// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export selectedPeople ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect := 0 ;
  15: LD_ADDR_EXP 18
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene := 1 ;
  23: LD_ADDR_EXP 19
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans := [ ] ;
  31: LD_ADDR_EXP 12
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans := [ ] ;
  38: LD_ADDR_EXP 13
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles := [ ] ;
  45: LD_ADDR_EXP 14
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 11
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// resources := [ ] ;
  59: LD_ADDR_EXP 21
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// mission_prefix := 06_ ;
  66: LD_ADDR_EXP 22
  70: PUSH
  71: LD_STRING 06_
  73: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  74: LD_ADDR_EXP 23
  78: PUSH
  79: LD_STRING 05_
  81: ST_TO_ADDR
// PrepareDeltaBase ;
  82: CALL 2310 0 0
// CreateNature ;
  86: CALL 170 0 0
// LoadVehicles ;
  90: CALL 1458 0 0
// PrepareHeroes ;
  94: CALL 291 0 0
// PrepareRandoms ;
  98: CALL 1723 0 0
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 102: LD_ADDR_EXP 20
 106: PUSH
 107: LD_INT 22
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 2
 119: PUSH
 120: LD_INT 30
 122: PUSH
 123: LD_INT 6
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 30
 132: PUSH
 133: LD_INT 7
 135: PUSH
 136: EMPTY
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 30
 142: PUSH
 143: LD_INT 8
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: PPUSH
 160: CALL_OW 69
 164: ST_TO_ADDR
// Action ;
 165: CALL 3238 0 0
// end ;
 169: END
// export function CreateNature ; var i ; begin
 170: LD_INT 0
 172: PPUSH
 173: PPUSH
// uc_side := 0 ;
 174: LD_ADDR_OWVAR 20
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// uc_nation := 0 ;
 182: LD_ADDR_OWVAR 21
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// for i = 1 to 4 do
 190: LD_ADDR_VAR 0 2
 194: PUSH
 195: DOUBLE
 196: LD_INT 1
 198: DEC
 199: ST_TO_ADDR
 200: LD_INT 4
 202: PUSH
 203: FOR_TO
 204: IFFALSE 284
// begin hc_gallery :=  ;
 206: LD_ADDR_OWVAR 33
 210: PUSH
 211: LD_STRING 
 213: ST_TO_ADDR
// hc_name :=  ;
 214: LD_ADDR_OWVAR 26
 218: PUSH
 219: LD_STRING 
 221: ST_TO_ADDR
// hc_attr := [ rand ( 10 , 11 ) , rand ( 10 , 12 ) ] ;
 222: LD_ADDR_OWVAR 29
 226: PUSH
 227: LD_INT 10
 229: PPUSH
 230: LD_INT 11
 232: PPUSH
 233: CALL_OW 12
 237: PUSH
 238: LD_INT 10
 240: PPUSH
 241: LD_INT 12
 243: PPUSH
 244: CALL_OW 12
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: ST_TO_ADDR
// hc_class := class_apeman ;
 253: LD_ADDR_OWVAR 28
 257: PUSH
 258: LD_INT 12
 260: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 22 , 18 , 20 , false ) ;
 261: CALL_OW 44
 265: PPUSH
 266: LD_INT 22
 268: PPUSH
 269: LD_INT 18
 271: PPUSH
 272: LD_INT 20
 274: PPUSH
 275: LD_INT 0
 277: PPUSH
 278: CALL_OW 50
// end ;
 282: GO 203
 284: POP
 285: POP
// end ; end_of_file
 286: LD_VAR 0 1
 290: RET
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 291: LD_INT 0
 293: PPUSH
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 298: LD_ADDR_VAR 0 3
 302: PUSH
 303: LD_INT 22
 305: PUSH
 306: LD_INT 1
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: PUSH
 313: LD_INT 21
 315: PUSH
 316: LD_INT 3
 318: PUSH
 319: EMPTY
 320: LIST
 321: LIST
 322: PUSH
 323: LD_INT 30
 325: PUSH
 326: LD_INT 0
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: PUSH
 333: EMPTY
 334: LIST
 335: LIST
 336: LIST
 337: PPUSH
 338: CALL_OW 69
 342: ST_TO_ADDR
// if tmp then
 343: LD_VAR 0 3
 347: IFFALSE 365
// SetBName ( tmp [ 1 ] , delta ) ;
 349: LD_VAR 0 3
 353: PUSH
 354: LD_INT 1
 356: ARRAY
 357: PPUSH
 358: LD_STRING delta
 360: PPUSH
 361: CALL_OW 500
// uc_side := 1 ;
 365: LD_ADDR_OWVAR 20
 369: PUSH
 370: LD_INT 1
 372: ST_TO_ADDR
// uc_nation := 1 ;
 373: LD_ADDR_OWVAR 21
 377: PUSH
 378: LD_INT 1
 380: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 381: LD_ADDR_EXP 1
 385: PUSH
 386: LD_STRING JMM
 388: PPUSH
 389: LD_INT 1
 391: PPUSH
 392: LD_EXP 23
 396: PPUSH
 397: CALL 25702 0 3
 401: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 402: LD_ADDR_EXP 16
 406: PUSH
 407: LD_STRING Harisson
 409: PPUSH
 410: LD_INT 0
 412: PPUSH
 413: LD_STRING 
 415: PPUSH
 416: CALL 25702 0 3
 420: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 421: LD_EXP 1
 425: PPUSH
 426: LD_VAR 0 3
 430: PUSH
 431: LD_INT 1
 433: ARRAY
 434: PPUSH
 435: CALL_OW 250
 439: PPUSH
 440: LD_VAR 0 3
 444: PUSH
 445: LD_INT 1
 447: ARRAY
 448: PPUSH
 449: CALL_OW 251
 453: PPUSH
 454: LD_INT 5
 456: PPUSH
 457: LD_INT 0
 459: PPUSH
 460: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 464: LD_EXP 1
 468: PPUSH
 469: LD_INT 1
 471: PPUSH
 472: CALL_OW 336
// Gladstone := PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
 476: LD_ADDR_EXP 2
 480: PUSH
 481: LD_STRING Gladstone
 483: PPUSH
 484: LD_INT 1
 486: PPUSH
 487: LD_EXP 23
 491: PPUSH
 492: CALL 25702 0 3
 496: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 497: LD_EXP 2
 501: PPUSH
 502: LD_VAR 0 3
 506: PUSH
 507: LD_INT 1
 509: ARRAY
 510: PPUSH
 511: CALL_OW 250
 515: PPUSH
 516: LD_VAR 0 3
 520: PUSH
 521: LD_INT 1
 523: ARRAY
 524: PPUSH
 525: CALL_OW 251
 529: PPUSH
 530: LD_INT 5
 532: PPUSH
 533: LD_INT 0
 535: PPUSH
 536: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 540: LD_EXP 2
 544: PPUSH
 545: LD_INT 4
 547: PPUSH
 548: CALL_OW 336
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
 552: LD_ADDR_EXP 3
 556: PUSH
 557: LD_STRING Denis
 559: PPUSH
 560: LD_INT 1
 562: PPUSH
 563: LD_EXP 23
 567: PPUSH
 568: CALL 25702 0 3
 572: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 573: LD_EXP 3
 577: PPUSH
 578: LD_VAR 0 3
 582: PUSH
 583: LD_INT 1
 585: ARRAY
 586: PPUSH
 587: CALL_OW 250
 591: PPUSH
 592: LD_VAR 0 3
 596: PUSH
 597: LD_INT 1
 599: ARRAY
 600: PPUSH
 601: CALL_OW 251
 605: PPUSH
 606: LD_INT 5
 608: PPUSH
 609: LD_INT 0
 611: PPUSH
 612: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 616: LD_EXP 3
 620: PPUSH
 621: LD_INT 4
 623: PPUSH
 624: CALL_OW 336
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 628: LD_STRING FrankInDelta
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: CALL_OW 30
 638: PUSH
 639: LD_INT 1
 641: EQUAL
 642: IFFALSE 720
// begin Frank := PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 644: LD_ADDR_EXP 5
 648: PUSH
 649: LD_STRING Frank
 651: PPUSH
 652: LD_INT 1
 654: PPUSH
 655: LD_EXP 23
 659: PPUSH
 660: CALL 25702 0 3
 664: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 665: LD_EXP 5
 669: PPUSH
 670: LD_VAR 0 3
 674: PUSH
 675: LD_INT 1
 677: ARRAY
 678: PPUSH
 679: CALL_OW 250
 683: PPUSH
 684: LD_VAR 0 3
 688: PUSH
 689: LD_INT 1
 691: ARRAY
 692: PPUSH
 693: CALL_OW 251
 697: PPUSH
 698: LD_INT 5
 700: PPUSH
 701: LD_INT 0
 703: PPUSH
 704: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 708: LD_EXP 5
 712: PPUSH
 713: LD_INT 1
 715: PPUSH
 716: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 720: LD_STRING LisaInDelta
 722: PPUSH
 723: LD_INT 0
 725: PPUSH
 726: CALL_OW 30
 730: PUSH
 731: LD_INT 1
 733: EQUAL
 734: IFFALSE 812
// begin Lisa := PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 736: LD_ADDR_EXP 4
 740: PUSH
 741: LD_STRING Lisa
 743: PPUSH
 744: LD_INT 1
 746: PPUSH
 747: LD_EXP 23
 751: PPUSH
 752: CALL 25702 0 3
 756: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 757: LD_EXP 4
 761: PPUSH
 762: LD_VAR 0 3
 766: PUSH
 767: LD_INT 1
 769: ARRAY
 770: PPUSH
 771: CALL_OW 250
 775: PPUSH
 776: LD_VAR 0 3
 780: PUSH
 781: LD_INT 1
 783: ARRAY
 784: PPUSH
 785: CALL_OW 251
 789: PPUSH
 790: LD_INT 5
 792: PPUSH
 793: LD_INT 0
 795: PPUSH
 796: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 800: LD_EXP 4
 804: PPUSH
 805: LD_INT 1
 807: PPUSH
 808: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 812: LD_STRING BobbyInDelta
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: CALL_OW 30
 822: PUSH
 823: LD_INT 1
 825: EQUAL
 826: IFFALSE 904
// begin Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 828: LD_ADDR_EXP 6
 832: PUSH
 833: LD_STRING Bobby
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: LD_EXP 23
 843: PPUSH
 844: CALL 25702 0 3
 848: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 849: LD_EXP 6
 853: PPUSH
 854: LD_VAR 0 3
 858: PUSH
 859: LD_INT 1
 861: ARRAY
 862: PPUSH
 863: CALL_OW 250
 867: PPUSH
 868: LD_VAR 0 3
 872: PUSH
 873: LD_INT 1
 875: ARRAY
 876: PPUSH
 877: CALL_OW 251
 881: PPUSH
 882: LD_INT 5
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 892: LD_EXP 6
 896: PPUSH
 897: LD_INT 1
 899: PPUSH
 900: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 904: LD_STRING CyrusInDelta
 906: PPUSH
 907: LD_INT 0
 909: PPUSH
 910: CALL_OW 30
 914: PUSH
 915: LD_INT 1
 917: EQUAL
 918: IFFALSE 996
// begin Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 920: LD_ADDR_EXP 7
 924: PUSH
 925: LD_STRING Cyrus
 927: PPUSH
 928: LD_INT 1
 930: PPUSH
 931: LD_EXP 23
 935: PPUSH
 936: CALL 25702 0 3
 940: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 941: LD_EXP 7
 945: PPUSH
 946: LD_VAR 0 3
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: PPUSH
 955: CALL_OW 250
 959: PPUSH
 960: LD_VAR 0 3
 964: PUSH
 965: LD_INT 1
 967: ARRAY
 968: PPUSH
 969: CALL_OW 251
 973: PPUSH
 974: LD_INT 5
 976: PPUSH
 977: LD_INT 0
 979: PPUSH
 980: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
 984: LD_EXP 7
 988: PPUSH
 989: LD_INT 1
 991: PPUSH
 992: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
 996: LD_STRING DonaldsonInDelta
 998: PPUSH
 999: LD_INT 0
1001: PPUSH
1002: CALL_OW 30
1006: PUSH
1007: LD_INT 1
1009: EQUAL
1010: IFFALSE 1088
// begin Donaldson := PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
1012: LD_ADDR_EXP 9
1016: PUSH
1017: LD_STRING Donaldson
1019: PPUSH
1020: LD_INT 1
1022: PPUSH
1023: LD_EXP 23
1027: PPUSH
1028: CALL 25702 0 3
1032: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1033: LD_EXP 9
1037: PPUSH
1038: LD_VAR 0 3
1042: PUSH
1043: LD_INT 1
1045: ARRAY
1046: PPUSH
1047: CALL_OW 250
1051: PPUSH
1052: LD_VAR 0 3
1056: PUSH
1057: LD_INT 1
1059: ARRAY
1060: PPUSH
1061: CALL_OW 251
1065: PPUSH
1066: LD_INT 5
1068: PPUSH
1069: LD_INT 0
1071: PPUSH
1072: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
1076: LD_EXP 9
1080: PPUSH
1081: LD_INT 1
1083: PPUSH
1084: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
1088: LD_STRING BrownInDelta
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: CALL_OW 30
1098: PUSH
1099: LD_INT 1
1101: EQUAL
1102: IFFALSE 1180
// begin Brown := PrepareUnit ( Brown , true , mission_prefix_prev ) ;
1104: LD_ADDR_EXP 8
1108: PUSH
1109: LD_STRING Brown
1111: PPUSH
1112: LD_INT 1
1114: PPUSH
1115: LD_EXP 23
1119: PPUSH
1120: CALL 25702 0 3
1124: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1125: LD_EXP 8
1129: PPUSH
1130: LD_VAR 0 3
1134: PUSH
1135: LD_INT 1
1137: ARRAY
1138: PPUSH
1139: CALL_OW 250
1143: PPUSH
1144: LD_VAR 0 3
1148: PUSH
1149: LD_INT 1
1151: ARRAY
1152: PPUSH
1153: CALL_OW 251
1157: PPUSH
1158: LD_INT 5
1160: PPUSH
1161: LD_INT 0
1163: PPUSH
1164: CALL_OW 50
// SetClass ( Brown , 2 ) ;
1168: LD_EXP 8
1172: PPUSH
1173: LD_INT 2
1175: PPUSH
1176: CALL_OW 336
// end ; others := CreateCharacterSet ( othersInDelta ) ;
1180: LD_ADDR_EXP 10
1184: PUSH
1185: LD_STRING othersInDelta
1187: PPUSH
1188: CALL_OW 31
1192: ST_TO_ADDR
// for i in others do
1193: LD_ADDR_VAR 0 2
1197: PUSH
1198: LD_EXP 10
1202: PUSH
1203: FOR_IN
1204: IFFALSE 1251
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1206: LD_VAR 0 2
1210: PPUSH
1211: LD_VAR 0 3
1215: PUSH
1216: LD_INT 1
1218: ARRAY
1219: PPUSH
1220: CALL_OW 250
1224: PPUSH
1225: LD_VAR 0 3
1229: PUSH
1230: LD_INT 1
1232: ARRAY
1233: PPUSH
1234: CALL_OW 251
1238: PPUSH
1239: LD_INT 35
1241: PPUSH
1242: LD_INT 0
1244: PPUSH
1245: CALL_OW 50
1249: GO 1203
1251: POP
1252: POP
// apemans := CreateCharacterSet ( apeInDelta ) ;
1253: LD_ADDR_EXP 12
1257: PUSH
1258: LD_STRING apeInDelta
1260: PPUSH
1261: CALL_OW 31
1265: ST_TO_ADDR
// uc_nation := 0 ;
1266: LD_ADDR_OWVAR 21
1270: PUSH
1271: LD_INT 0
1273: ST_TO_ADDR
// if apemans > 5 then
1274: LD_EXP 12
1278: PUSH
1279: LD_INT 5
1281: GREATER
1282: IFFALSE 1377
// begin for i := 1 to 5 do
1284: LD_ADDR_VAR 0 2
1288: PUSH
1289: DOUBLE
1290: LD_INT 1
1292: DEC
1293: ST_TO_ADDR
1294: LD_INT 5
1296: PUSH
1297: FOR_TO
1298: IFFALSE 1373
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1300: LD_EXP 12
1304: PUSH
1305: LD_VAR 0 2
1309: ARRAY
1310: PPUSH
1311: LD_VAR 0 3
1315: PUSH
1316: LD_INT 1
1318: ARRAY
1319: PPUSH
1320: CALL_OW 250
1324: PPUSH
1325: LD_VAR 0 3
1329: PUSH
1330: LD_INT 1
1332: ARRAY
1333: PPUSH
1334: CALL_OW 251
1338: PPUSH
1339: LD_INT 50
1341: PPUSH
1342: LD_INT 0
1344: PPUSH
1345: CALL_OW 50
// yourApemans := yourApemans ^ apemans [ i ] ;
1349: LD_ADDR_EXP 13
1353: PUSH
1354: LD_EXP 13
1358: PUSH
1359: LD_EXP 12
1363: PUSH
1364: LD_VAR 0 2
1368: ARRAY
1369: ADD
1370: ST_TO_ADDR
// end ;
1371: GO 1297
1373: POP
1374: POP
// end else
1375: GO 1453
// begin for i in apemans do
1377: LD_ADDR_VAR 0 2
1381: PUSH
1382: LD_EXP 12
1386: PUSH
1387: FOR_IN
1388: IFFALSE 1451
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1390: LD_VAR 0 2
1394: PPUSH
1395: LD_VAR 0 3
1399: PUSH
1400: LD_INT 1
1402: ARRAY
1403: PPUSH
1404: CALL_OW 250
1408: PPUSH
1409: LD_VAR 0 3
1413: PUSH
1414: LD_INT 1
1416: ARRAY
1417: PPUSH
1418: CALL_OW 251
1422: PPUSH
1423: LD_INT 50
1425: PPUSH
1426: LD_INT 0
1428: PPUSH
1429: CALL_OW 50
// yourApemans := yourApemans ^ i ;
1433: LD_ADDR_EXP 13
1437: PUSH
1438: LD_EXP 13
1442: PUSH
1443: LD_VAR 0 2
1447: ADD
1448: ST_TO_ADDR
// end ;
1449: GO 1387
1451: POP
1452: POP
// end ; end ;
1453: LD_VAR 0 1
1457: RET
// export function LoadVehicles ; var i , j , veh , tmp , vehicles ; begin
1458: LD_INT 0
1460: PPUSH
1461: PPUSH
1462: PPUSH
1463: PPUSH
1464: PPUSH
1465: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1466: LD_ADDR_VAR 0 5
1470: PUSH
1471: LD_INT 22
1473: PUSH
1474: LD_INT 1
1476: PUSH
1477: EMPTY
1478: LIST
1479: LIST
1480: PUSH
1481: LD_INT 21
1483: PUSH
1484: LD_INT 3
1486: PUSH
1487: EMPTY
1488: LIST
1489: LIST
1490: PUSH
1491: LD_INT 30
1493: PUSH
1494: LD_INT 0
1496: PUSH
1497: EMPTY
1498: LIST
1499: LIST
1500: PUSH
1501: EMPTY
1502: LIST
1503: LIST
1504: LIST
1505: PPUSH
1506: CALL_OW 69
1510: ST_TO_ADDR
// uc_side := 1 ;
1511: LD_ADDR_OWVAR 20
1515: PUSH
1516: LD_INT 1
1518: ST_TO_ADDR
// vehicles := LoadVariable ( vehiclesInDelta , [ ] ) ;
1519: LD_ADDR_VAR 0 6
1523: PUSH
1524: LD_STRING vehiclesInDelta
1526: PPUSH
1527: EMPTY
1528: PPUSH
1529: CALL_OW 30
1533: ST_TO_ADDR
// for i := 1 to Count ( vehicles ) div 4 do
1534: LD_ADDR_VAR 0 2
1538: PUSH
1539: DOUBLE
1540: LD_INT 1
1542: DEC
1543: ST_TO_ADDR
1544: LD_VAR 0 6
1548: PPUSH
1549: CALL 27804 0 1
1553: PUSH
1554: LD_INT 4
1556: DIV
1557: PUSH
1558: FOR_TO
1559: IFFALSE 1716
// begin uc_nation := vehicles [ 1 ] ;
1561: LD_ADDR_OWVAR 21
1565: PUSH
1566: LD_VAR 0 6
1570: PUSH
1571: LD_INT 1
1573: ARRAY
1574: ST_TO_ADDR
// vc_chassis := vehicles [ 2 ] ;
1575: LD_ADDR_OWVAR 37
1579: PUSH
1580: LD_VAR 0 6
1584: PUSH
1585: LD_INT 2
1587: ARRAY
1588: ST_TO_ADDR
// vc_engine := vehicles [ 3 ] ;
1589: LD_ADDR_OWVAR 39
1593: PUSH
1594: LD_VAR 0 6
1598: PUSH
1599: LD_INT 3
1601: ARRAY
1602: ST_TO_ADDR
// vc_control := vehicles [ 4 ] ;
1603: LD_ADDR_OWVAR 38
1607: PUSH
1608: LD_VAR 0 6
1612: PUSH
1613: LD_INT 4
1615: ARRAY
1616: ST_TO_ADDR
// vc_weapon := vehicles [ 5 ] ;
1617: LD_ADDR_OWVAR 40
1621: PUSH
1622: LD_VAR 0 6
1626: PUSH
1627: LD_INT 5
1629: ARRAY
1630: ST_TO_ADDR
// veh := CreateVehicle ;
1631: LD_ADDR_VAR 0 4
1635: PUSH
1636: CALL_OW 45
1640: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1641: LD_VAR 0 4
1645: PPUSH
1646: LD_INT 0
1648: PPUSH
1649: LD_INT 5
1651: PPUSH
1652: CALL_OW 12
1656: PPUSH
1657: CALL_OW 233
// PlaceUnitArea ( veh , parkingArea , false ) ;
1661: LD_VAR 0 4
1665: PPUSH
1666: LD_INT 4
1668: PPUSH
1669: LD_INT 0
1671: PPUSH
1672: CALL_OW 49
// for j := 1 to 5 do
1676: LD_ADDR_VAR 0 3
1680: PUSH
1681: DOUBLE
1682: LD_INT 1
1684: DEC
1685: ST_TO_ADDR
1686: LD_INT 5
1688: PUSH
1689: FOR_TO
1690: IFFALSE 1712
// vehicles := Delete ( vehicles , 1 ) ;
1692: LD_ADDR_VAR 0 6
1696: PUSH
1697: LD_VAR 0 6
1701: PPUSH
1702: LD_INT 1
1704: PPUSH
1705: CALL_OW 3
1709: ST_TO_ADDR
1710: GO 1689
1712: POP
1713: POP
// end ;
1714: GO 1558
1716: POP
1717: POP
// end ;
1718: LD_VAR 0 1
1722: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1723: LD_INT 0
1725: PPUSH
1726: PPUSH
1727: PPUSH
1728: PPUSH
1729: PPUSH
// uc_side := 1 ;
1730: LD_ADDR_OWVAR 20
1734: PUSH
1735: LD_INT 1
1737: ST_TO_ADDR
// uc_nation := 1 ;
1738: LD_ADDR_OWVAR 21
1742: PUSH
1743: LD_INT 1
1745: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1746: LD_ADDR_VAR 0 4
1750: PUSH
1751: LD_INT 22
1753: PUSH
1754: LD_INT 1
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: PUSH
1761: LD_INT 21
1763: PUSH
1764: LD_INT 3
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: PUSH
1771: LD_INT 30
1773: PUSH
1774: LD_INT 0
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: PUSH
1781: EMPTY
1782: LIST
1783: LIST
1784: LIST
1785: PPUSH
1786: CALL_OW 69
1790: ST_TO_ADDR
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) ;
1791: LD_ADDR_EXP 15
1795: PUSH
1796: LD_INT 22
1798: PUSH
1799: LD_INT 1
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: LD_INT 25
1808: PUSH
1809: LD_INT 4
1811: PUSH
1812: EMPTY
1813: LIST
1814: LIST
1815: PUSH
1816: LD_INT 26
1818: PUSH
1819: LD_INT 1
1821: PUSH
1822: EMPTY
1823: LIST
1824: LIST
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: LIST
1830: PUSH
1831: EMPTY
1832: LIST
1833: PPUSH
1834: CALL_OW 69
1838: PUSH
1839: LD_EXP 1
1843: PUSH
1844: LD_EXP 7
1848: PUSH
1849: LD_EXP 6
1853: PUSH
1854: LD_EXP 5
1858: PUSH
1859: LD_EXP 2
1863: PUSH
1864: LD_EXP 3
1868: PUSH
1869: LD_EXP 8
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: LIST
1882: DIFF
1883: ST_TO_ADDR
// if not deltaDoctor then
1884: LD_EXP 15
1888: NOT
1889: IFFALSE 2040
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
1891: LD_ADDR_VAR 0 5
1895: PUSH
1896: LD_INT 22
1898: PUSH
1899: LD_INT 1
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 26
1908: PUSH
1909: LD_INT 1
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: PUSH
1920: EMPTY
1921: LIST
1922: PPUSH
1923: CALL_OW 69
1927: PUSH
1928: LD_EXP 1
1932: PUSH
1933: LD_EXP 7
1937: PUSH
1938: LD_EXP 6
1942: PUSH
1943: LD_EXP 5
1947: PUSH
1948: LD_EXP 2
1952: PUSH
1953: LD_EXP 3
1957: PUSH
1958: LD_EXP 8
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: DIFF
1972: ST_TO_ADDR
// if filter then
1973: LD_VAR 0 5
1977: IFFALSE 2038
// for i in filter do
1979: LD_ADDR_VAR 0 2
1983: PUSH
1984: LD_VAR 0 5
1988: PUSH
1989: FOR_IN
1990: IFFALSE 2036
// if GetSkill ( i , 4 ) >= 4 then
1992: LD_VAR 0 2
1996: PPUSH
1997: LD_INT 4
1999: PPUSH
2000: CALL_OW 259
2004: PUSH
2005: LD_INT 4
2007: GREATEREQUAL
2008: IFFALSE 2034
// begin deltaDoctor := i ;
2010: LD_ADDR_EXP 15
2014: PUSH
2015: LD_VAR 0 2
2019: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
2020: LD_EXP 15
2024: PPUSH
2025: LD_INT 4
2027: PPUSH
2028: CALL_OW 336
// break ;
2032: GO 2036
// end ;
2034: GO 1989
2036: POP
2037: POP
// end else
2038: GO 2054
// deltaDoctor := deltaDoctor [ 1 ] ;
2040: LD_ADDR_EXP 15
2044: PUSH
2045: LD_EXP 15
2049: PUSH
2050: LD_INT 1
2052: ARRAY
2053: ST_TO_ADDR
// for i := 1 to 7 do
2054: LD_ADDR_VAR 0 2
2058: PUSH
2059: DOUBLE
2060: LD_INT 1
2062: DEC
2063: ST_TO_ADDR
2064: LD_INT 7
2066: PUSH
2067: FOR_TO
2068: IFFALSE 2205
// begin hc_gallery :=  ;
2070: LD_ADDR_OWVAR 33
2074: PUSH
2075: LD_STRING 
2077: ST_TO_ADDR
// hc_name :=  ;
2078: LD_ADDR_OWVAR 26
2082: PUSH
2083: LD_STRING 
2085: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) ) ;
2086: LD_INT 0
2088: PPUSH
2089: LD_INT 1
2091: PUSH
2092: LD_INT 2
2094: PUSH
2095: LD_INT 3
2097: PUSH
2098: LD_INT 4
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: PUSH
2107: LD_INT 1
2109: PPUSH
2110: LD_INT 4
2112: PPUSH
2113: CALL_OW 12
2117: ARRAY
2118: PPUSH
2119: LD_INT 3
2121: PPUSH
2122: LD_INT 5
2124: PPUSH
2125: CALL_OW 12
2129: PPUSH
2130: CALL_OW 380
// un := CreateHuman ;
2134: LD_ADDR_VAR 0 3
2138: PUSH
2139: CALL_OW 44
2143: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2144: LD_ADDR_EXP 11
2148: PUSH
2149: LD_EXP 11
2153: PUSH
2154: LD_VAR 0 3
2158: ADD
2159: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2160: LD_VAR 0 3
2164: PPUSH
2165: LD_VAR 0 4
2169: PUSH
2170: LD_INT 1
2172: ARRAY
2173: PPUSH
2174: CALL_OW 250
2178: PPUSH
2179: LD_VAR 0 4
2183: PUSH
2184: LD_INT 1
2186: ARRAY
2187: PPUSH
2188: CALL_OW 251
2192: PPUSH
2193: LD_INT 15
2195: PPUSH
2196: LD_INT 0
2198: PPUSH
2199: CALL_OW 50
// end ;
2203: GO 2067
2205: POP
2206: POP
// if deltaDoctor then
2207: LD_EXP 15
2211: IFFALSE 2215
// exit ;
2213: GO 2305
// hc_gallery := Dawkins ;
2215: LD_ADDR_OWVAR 33
2219: PUSH
2220: LD_STRING Dawkins
2222: ST_TO_ADDR
// hc_face_number := 1 ;
2223: LD_ADDR_OWVAR 34
2227: PUSH
2228: LD_INT 1
2230: ST_TO_ADDR
// hc_name := Dr. Adam Charles Dawkins ;
2231: LD_ADDR_OWVAR 26
2235: PUSH
2236: LD_STRING Dr. Adam Charles Dawkins
2238: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 5 ) ;
2239: LD_INT 1
2241: PPUSH
2242: LD_INT 4
2244: PPUSH
2245: LD_INT 5
2247: PPUSH
2248: CALL_OW 380
// deltaDoctor := CreateHuman ;
2252: LD_ADDR_EXP 15
2256: PUSH
2257: CALL_OW 44
2261: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2262: LD_EXP 15
2266: PPUSH
2267: LD_VAR 0 4
2271: PUSH
2272: LD_INT 1
2274: ARRAY
2275: PPUSH
2276: CALL_OW 250
2280: PPUSH
2281: LD_VAR 0 4
2285: PUSH
2286: LD_INT 1
2288: ARRAY
2289: PPUSH
2290: CALL_OW 251
2294: PPUSH
2295: LD_INT 5
2297: PPUSH
2298: LD_INT 0
2300: PPUSH
2301: CALL_OW 50
// end ; end_of_file
2305: LD_VAR 0 1
2309: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2310: LD_INT 0
2312: PPUSH
2313: PPUSH
2314: PPUSH
2315: PPUSH
2316: PPUSH
2317: PPUSH
2318: PPUSH
// buildings := LoadVariable ( buildingsInDelta , [ ] ) ;
2319: LD_ADDR_VAR 0 5
2323: PUSH
2324: LD_STRING buildingsInDelta
2326: PPUSH
2327: EMPTY
2328: PPUSH
2329: CALL_OW 30
2333: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2334: LD_INT 68
2336: PPUSH
2337: LD_INT 40
2339: PPUSH
2340: LD_INT 1
2342: PPUSH
2343: CALL_OW 441
// uc_side := 1 ;
2347: LD_ADDR_OWVAR 20
2351: PUSH
2352: LD_INT 1
2354: ST_TO_ADDR
// uc_nation := 1 ;
2355: LD_ADDR_OWVAR 21
2359: PUSH
2360: LD_INT 1
2362: ST_TO_ADDR
// for i := 1 to buildings do
2363: LD_ADDR_VAR 0 2
2367: PUSH
2368: DOUBLE
2369: LD_INT 1
2371: DEC
2372: ST_TO_ADDR
2373: LD_VAR 0 5
2377: PUSH
2378: FOR_TO
2379: IFFALSE 2694
// begin bc_type := buildings [ i ] [ 1 ] ;
2381: LD_ADDR_OWVAR 42
2385: PUSH
2386: LD_VAR 0 5
2390: PUSH
2391: LD_VAR 0 2
2395: ARRAY
2396: PUSH
2397: LD_INT 1
2399: ARRAY
2400: ST_TO_ADDR
// bc_level := buildings [ i ] [ 2 ] ;
2401: LD_ADDR_OWVAR 43
2405: PUSH
2406: LD_VAR 0 5
2410: PUSH
2411: LD_VAR 0 2
2415: ARRAY
2416: PUSH
2417: LD_INT 2
2419: ARRAY
2420: ST_TO_ADDR
// bc_kind1 := - 1 ;
2421: LD_ADDR_OWVAR 44
2425: PUSH
2426: LD_INT 1
2428: NEG
2429: ST_TO_ADDR
// bc_kind2 := - 1 ;
2430: LD_ADDR_OWVAR 45
2434: PUSH
2435: LD_INT 1
2437: NEG
2438: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half , b_lab_full ] then
2439: LD_OWVAR 42
2443: PUSH
2444: LD_INT 6
2446: PUSH
2447: LD_INT 7
2449: PUSH
2450: LD_INT 8
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: LIST
2457: IN
2458: IFFALSE 2582
// begin bc_kind1 := b_lab_basic ;
2460: LD_ADDR_OWVAR 44
2464: PUSH
2465: LD_INT 9
2467: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2468: LD_ADDR_OWVAR 45
2472: PUSH
2473: LD_INT 9
2475: ST_TO_ADDR
// if buildings [ i ] [ 6 ] then
2476: LD_VAR 0 5
2480: PUSH
2481: LD_VAR 0 2
2485: ARRAY
2486: PUSH
2487: LD_INT 6
2489: ARRAY
2490: IFFALSE 2558
// begin bc_kind1 := buildings [ i ] [ 6 ] ;
2492: LD_ADDR_OWVAR 44
2496: PUSH
2497: LD_VAR 0 5
2501: PUSH
2502: LD_VAR 0 2
2506: ARRAY
2507: PUSH
2508: LD_INT 6
2510: ARRAY
2511: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2512: LD_ADDR_OWVAR 45
2516: PUSH
2517: LD_INT 9
2519: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2520: LD_VAR 0 5
2524: PUSH
2525: LD_VAR 0 2
2529: ARRAY
2530: PUSH
2531: LD_INT 7
2533: ARRAY
2534: IFFALSE 2556
// bc_kind2 := buildings [ i ] [ 7 ] ;
2536: LD_ADDR_OWVAR 45
2540: PUSH
2541: LD_VAR 0 5
2545: PUSH
2546: LD_VAR 0 2
2550: ARRAY
2551: PUSH
2552: LD_INT 7
2554: ARRAY
2555: ST_TO_ADDR
// end else
2556: GO 2582
// begin bc_type := b_lab ;
2558: LD_ADDR_OWVAR 42
2562: PUSH
2563: LD_INT 6
2565: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
2566: LD_ADDR_OWVAR 44
2570: PUSH
2571: LD_INT 9
2573: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2574: LD_ADDR_OWVAR 45
2578: PUSH
2579: LD_INT 9
2581: ST_TO_ADDR
// end ; end ; building := CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2582: LD_ADDR_VAR 0 4
2586: PUSH
2587: LD_VAR 0 5
2591: PUSH
2592: LD_VAR 0 2
2596: ARRAY
2597: PUSH
2598: LD_INT 3
2600: ARRAY
2601: PPUSH
2602: LD_VAR 0 5
2606: PUSH
2607: LD_VAR 0 2
2611: ARRAY
2612: PUSH
2613: LD_INT 4
2615: ARRAY
2616: PPUSH
2617: LD_VAR 0 5
2621: PUSH
2622: LD_VAR 0 2
2626: ARRAY
2627: PUSH
2628: LD_INT 5
2630: ARRAY
2631: PPUSH
2632: CALL_OW 47
2636: ST_TO_ADDR
// if GetBType ( building ) = b_bunker and buildings [ i ] [ 8 ] then
2637: LD_VAR 0 4
2641: PPUSH
2642: CALL_OW 266
2646: PUSH
2647: LD_INT 32
2649: EQUAL
2650: PUSH
2651: LD_VAR 0 5
2655: PUSH
2656: LD_VAR 0 2
2660: ARRAY
2661: PUSH
2662: LD_INT 8
2664: ARRAY
2665: AND
2666: IFFALSE 2692
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2668: LD_VAR 0 4
2672: PPUSH
2673: LD_VAR 0 5
2677: PUSH
2678: LD_VAR 0 2
2682: ARRAY
2683: PUSH
2684: LD_INT 8
2686: ARRAY
2687: PPUSH
2688: CALL_OW 431
// end ;
2692: GO 2378
2694: POP
2695: POP
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2696: LD_ADDR_VAR 0 6
2700: PUSH
2701: LD_INT 22
2703: PUSH
2704: LD_INT 1
2706: PUSH
2707: EMPTY
2708: LIST
2709: LIST
2710: PUSH
2711: LD_INT 2
2713: PUSH
2714: LD_INT 30
2716: PUSH
2717: LD_INT 6
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: PUSH
2724: LD_INT 30
2726: PUSH
2727: LD_INT 7
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PUSH
2734: LD_INT 30
2736: PUSH
2737: LD_INT 8
2739: PUSH
2740: EMPTY
2741: LIST
2742: LIST
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: LIST
2748: LIST
2749: PUSH
2750: EMPTY
2751: LIST
2752: LIST
2753: PPUSH
2754: CALL_OW 69
2758: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2759: LD_ADDR_VAR 0 7
2763: PUSH
2764: LD_INT 22
2766: PUSH
2767: LD_INT 1
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 30
2776: PUSH
2777: LD_INT 0
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PPUSH
2788: CALL_OW 69
2792: ST_TO_ADDR
// if lab and tmp then
2793: LD_VAR 0 6
2797: PUSH
2798: LD_VAR 0 7
2802: AND
2803: IFFALSE 2813
// baseCorrect := 1 ;
2805: LD_ADDR_EXP 18
2809: PUSH
2810: LD_INT 1
2812: ST_TO_ADDR
// if not baseCorrect then
2813: LD_EXP 18
2817: NOT
2818: IFFALSE 3233
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2820: LD_ADDR_VAR 0 2
2824: PUSH
2825: LD_INT 22
2827: PUSH
2828: LD_INT 1
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PUSH
2835: LD_INT 21
2837: PUSH
2838: LD_INT 3
2840: PUSH
2841: EMPTY
2842: LIST
2843: LIST
2844: PUSH
2845: EMPTY
2846: LIST
2847: LIST
2848: PPUSH
2849: CALL_OW 69
2853: PUSH
2854: FOR_IN
2855: IFFALSE 2868
// RemoveUnit ( i ) ;
2857: LD_VAR 0 2
2861: PPUSH
2862: CALL_OW 64
2866: GO 2854
2868: POP
2869: POP
// uc_nation := 1 ;
2870: LD_ADDR_OWVAR 21
2874: PUSH
2875: LD_INT 1
2877: ST_TO_ADDR
// uc_side := 1 ;
2878: LD_ADDR_OWVAR 20
2882: PUSH
2883: LD_INT 1
2885: ST_TO_ADDR
// bc_level := 5 ;
2886: LD_ADDR_OWVAR 43
2890: PUSH
2891: LD_INT 5
2893: ST_TO_ADDR
// bc_type := b_depot ;
2894: LD_ADDR_OWVAR 42
2898: PUSH
2899: LD_INT 0
2901: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2902: LD_INT 50
2904: PPUSH
2905: LD_INT 22
2907: PPUSH
2908: LD_INT 0
2910: PPUSH
2911: CALL_OW 47
// bc_type = b_bunker ;
2915: LD_ADDR_OWVAR 42
2919: PUSH
2920: LD_INT 32
2922: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
2923: LD_ADDR_VAR 0 4
2927: PUSH
2928: LD_INT 68
2930: PPUSH
2931: LD_INT 24
2933: PPUSH
2934: LD_INT 4
2936: PPUSH
2937: CALL_OW 47
2941: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
2942: LD_VAR 0 4
2946: PPUSH
2947: LD_INT 4
2949: PUSH
2950: LD_INT 11
2952: PUSH
2953: EMPTY
2954: LIST
2955: LIST
2956: PUSH
2957: LD_INT 1
2959: PPUSH
2960: LD_INT 2
2962: PPUSH
2963: CALL_OW 12
2967: ARRAY
2968: PPUSH
2969: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
2973: LD_ADDR_VAR 0 4
2977: PUSH
2978: LD_INT 71
2980: PPUSH
2981: LD_INT 34
2983: PPUSH
2984: LD_INT 4
2986: PPUSH
2987: CALL_OW 47
2991: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
2992: LD_VAR 0 4
2996: PPUSH
2997: LD_INT 4
2999: PUSH
3000: LD_INT 11
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: PUSH
3007: LD_INT 1
3009: PPUSH
3010: LD_INT 2
3012: PPUSH
3013: CALL_OW 12
3017: ARRAY
3018: PPUSH
3019: CALL_OW 431
// bc_type := b_breastwork ;
3023: LD_ADDR_OWVAR 42
3027: PUSH
3028: LD_INT 31
3030: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
3031: LD_INT 51
3033: PPUSH
3034: LD_INT 7
3036: PPUSH
3037: LD_INT 3
3039: PPUSH
3040: CALL_OW 47
// bc_type := b_oil_mine ;
3044: LD_ADDR_OWVAR 42
3048: PUSH
3049: LD_INT 29
3051: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
3052: LD_INT 68
3054: PPUSH
3055: LD_INT 40
3057: PPUSH
3058: LD_INT 1
3060: PPUSH
3061: CALL_OW 47
// bc_type := b_factory ;
3065: LD_ADDR_OWVAR 42
3069: PUSH
3070: LD_INT 3
3072: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3073: LD_INT 38
3075: PPUSH
3076: LD_INT 20
3078: PPUSH
3079: LD_INT 2
3081: PPUSH
3082: CALL_OW 47
// bc_type := b_ext_noncombat ;
3086: LD_ADDR_OWVAR 42
3090: PUSH
3091: LD_INT 19
3093: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 24 , 2 ) ;
3094: LD_INT 38
3096: PPUSH
3097: LD_INT 24
3099: PPUSH
3100: LD_INT 2
3102: PPUSH
3103: CALL_OW 47
// bc_type := b_ext_radar ;
3107: LD_ADDR_OWVAR 42
3111: PUSH
3112: LD_INT 20
3114: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 35 , 20 , 1 ) ;
3115: LD_INT 35
3117: PPUSH
3118: LD_INT 20
3120: PPUSH
3121: LD_INT 1
3123: PPUSH
3124: CALL_OW 47
// bc_type := b_armoury ;
3128: LD_ADDR_OWVAR 42
3132: PUSH
3133: LD_INT 4
3135: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 33 , 28 , 1 ) ;
3136: LD_INT 33
3138: PPUSH
3139: LD_INT 28
3141: PPUSH
3142: LD_INT 1
3144: PPUSH
3145: CALL_OW 47
// bc_type := b_solar_power ;
3149: LD_ADDR_OWVAR 42
3153: PUSH
3154: LD_INT 27
3156: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3157: LD_INT 46
3159: PPUSH
3160: LD_INT 12
3162: PPUSH
3163: LD_INT 1
3165: PPUSH
3166: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3170: LD_INT 48
3172: PPUSH
3173: LD_INT 11
3175: PPUSH
3176: LD_INT 2
3178: PPUSH
3179: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 35 , 12 , 3 ) ;
3183: LD_INT 35
3185: PPUSH
3186: LD_INT 12
3188: PPUSH
3189: LD_INT 3
3191: PPUSH
3192: CALL_OW 47
// bc_type := b_lab_half ;
3196: LD_ADDR_OWVAR 42
3200: PUSH
3201: LD_INT 7
3203: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
3204: LD_ADDR_OWVAR 44
3208: PUSH
3209: LD_INT 15
3211: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
3212: LD_ADDR_OWVAR 45
3216: PUSH
3217: LD_INT 9
3219: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3220: LD_INT 42
3222: PPUSH
3223: LD_INT 15
3225: PPUSH
3226: LD_INT 2
3228: PPUSH
3229: CALL_OW 47
// end ; end ; end_of_file
3233: LD_VAR 0 1
3237: RET
// export function Action ; var i , j , tmp ; begin
3238: LD_INT 0
3240: PPUSH
3241: PPUSH
3242: PPUSH
3243: PPUSH
// InGameOn ;
3244: CALL_OW 8
// if lab then
3248: LD_EXP 20
3252: IFFALSE 3269
// CenterNowOnUnits ( lab [ 1 ] ) else
3254: LD_EXP 20
3258: PUSH
3259: LD_INT 1
3261: ARRAY
3262: PPUSH
3263: CALL_OW 87
3267: GO 3278
// CenterOnUnits ( JMM ) ;
3269: LD_EXP 1
3273: PPUSH
3274: CALL_OW 85
// if IsOK ( Denis ) then
3278: LD_EXP 3
3282: PPUSH
3283: CALL_OW 302
3287: IFFALSE 3315
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3289: LD_INT 6
3291: PPUSH
3292: LD_INT 1
3294: PPUSH
3295: LD_INT 2
3297: PPUSH
3298: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3302: LD_INT 20
3304: PPUSH
3305: LD_INT 1
3307: PPUSH
3308: LD_INT 1
3310: PPUSH
3311: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3315: LD_EXP 1
3319: PPUSH
3320: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3324: LD_EXP 1
3328: PPUSH
3329: LD_EXP 15
3333: PPUSH
3334: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3338: LD_INT 35
3340: PPUSH
3341: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3345: LD_EXP 15
3349: PPUSH
3350: LD_EXP 1
3354: PPUSH
3355: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3359: LD_EXP 1
3363: PPUSH
3364: LD_EXP 15
3368: PPUSH
3369: CALL_OW 296
3373: PUSH
3374: LD_INT 5
3376: LESS
3377: IFFALSE 3338
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3379: LD_EXP 15
3383: PPUSH
3384: LD_EXP 1
3388: PPUSH
3389: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3393: LD_EXP 1
3397: PPUSH
3398: LD_STRING D1-JMM-1
3400: PPUSH
3401: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3405: LD_EXP 15
3409: PPUSH
3410: LD_STRING D1-Sci-1
3412: PPUSH
3413: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3417: LD_EXP 1
3421: PUSH
3422: LD_EXP 15
3426: PUSH
3427: LD_EXP 3
3431: PUSH
3432: EMPTY
3433: LIST
3434: LIST
3435: LIST
3436: PPUSH
3437: LD_EXP 20
3441: PUSH
3442: LD_INT 1
3444: ARRAY
3445: PPUSH
3446: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
3450: LD_INT 35
3452: PPUSH
3453: CALL_OW 67
// until IsInUnit ( JMM ) and IsInUnit ( DeltaDoctor ) ;
3457: LD_EXP 1
3461: PPUSH
3462: CALL_OW 310
3466: PUSH
3467: LD_EXP 15
3471: PPUSH
3472: CALL_OW 310
3476: AND
3477: IFFALSE 3450
// CenterNowOnUnits ( lab [ 1 ] ) ;
3479: LD_EXP 20
3483: PUSH
3484: LD_INT 1
3486: ARRAY
3487: PPUSH
3488: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3492: LD_EXP 1
3496: PPUSH
3497: LD_STRING D1-JMM-2
3499: PPUSH
3500: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3504: LD_EXP 15
3508: PPUSH
3509: LD_STRING D1-Sci-2
3511: PPUSH
3512: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3516: LD_EXP 1
3520: PPUSH
3521: LD_STRING D1-JMM-3
3523: PPUSH
3524: CALL_OW 88
// if IsOK ( Denis ) then
3528: LD_EXP 3
3532: PPUSH
3533: CALL_OW 302
3537: IFFALSE 3553
// Say ( DeltaDoctor , D1-Sci-3 ) else
3539: LD_EXP 15
3543: PPUSH
3544: LD_STRING D1-Sci-3
3546: PPUSH
3547: CALL_OW 88
3551: GO 3565
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3553: LD_EXP 15
3557: PPUSH
3558: LD_STRING D1-Sci-3a
3560: PPUSH
3561: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3565: LD_EXP 1
3569: PPUSH
3570: LD_STRING D1-JMM-4
3572: PPUSH
3573: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3577: LD_ADDR_VAR 0 4
3581: PUSH
3582: LD_INT 22
3584: PUSH
3585: LD_INT 1
3587: PUSH
3588: EMPTY
3589: LIST
3590: LIST
3591: PUSH
3592: LD_INT 25
3594: PUSH
3595: LD_INT 4
3597: PUSH
3598: EMPTY
3599: LIST
3600: LIST
3601: PUSH
3602: LD_INT 3
3604: PUSH
3605: LD_INT 54
3607: PUSH
3608: EMPTY
3609: LIST
3610: PUSH
3611: EMPTY
3612: LIST
3613: LIST
3614: PUSH
3615: EMPTY
3616: LIST
3617: LIST
3618: LIST
3619: PPUSH
3620: CALL_OW 69
3624: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3625: LD_ADDR_VAR 0 2
3629: PUSH
3630: LD_INT 22
3632: PUSH
3633: LD_INT 0
3635: PUSH
3636: EMPTY
3637: LIST
3638: LIST
3639: PPUSH
3640: CALL_OW 69
3644: PUSH
3645: FOR_IN
3646: IFFALSE 3696
// for j in tmp do
3648: LD_ADDR_VAR 0 3
3652: PUSH
3653: LD_VAR 0 4
3657: PUSH
3658: FOR_IN
3659: IFFALSE 3692
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3661: LD_VAR 0 3
3665: PPUSH
3666: LD_VAR 0 2
3670: PPUSH
3671: CALL_OW 250
3675: PPUSH
3676: LD_VAR 0 2
3680: PPUSH
3681: CALL_OW 251
3685: PPUSH
3686: CALL_OW 191
3690: GO 3658
3692: POP
3693: POP
3694: GO 3645
3696: POP
3697: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3698: LD_EXP 15
3702: PPUSH
3703: LD_STRING D1-Sci-4
3705: PPUSH
3706: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3710: LD_EXP 1
3714: PPUSH
3715: LD_STRING D1-JMM-5
3717: PPUSH
3718: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3722: LD_EXP 15
3726: PPUSH
3727: LD_STRING D1-Sci-5
3729: PPUSH
3730: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3734: LD_EXP 1
3738: PPUSH
3739: LD_STRING D1-JMM-6
3741: PPUSH
3742: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3746: LD_EXP 16
3750: PPUSH
3751: LD_STRING D1-Har-6
3753: PPUSH
3754: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3758: LD_EXP 1
3762: PPUSH
3763: LD_STRING D1-JMM-7
3765: PPUSH
3766: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3770: LD_EXP 16
3774: PPUSH
3775: LD_STRING D1-Har-7
3777: PPUSH
3778: CALL_OW 94
// if IsOK ( Denis ) then
3782: LD_EXP 3
3786: PPUSH
3787: CALL_OW 302
3791: IFFALSE 3805
// Say ( JMM , D1-JMM-8 ) ;
3793: LD_EXP 1
3797: PPUSH
3798: LD_STRING D1-JMM-8
3800: PPUSH
3801: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3805: LD_EXP 1
3809: PPUSH
3810: LD_STRING D1-JMM-8a
3812: PPUSH
3813: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3817: LD_EXP 16
3821: PPUSH
3822: LD_STRING D1-Har-8
3824: PPUSH
3825: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3829: LD_EXP 1
3833: PPUSH
3834: LD_STRING D1-JMM-9
3836: PPUSH
3837: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3841: LD_EXP 16
3845: PPUSH
3846: LD_STRING D1-Har-9
3848: PPUSH
3849: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3853: LD_EXP 1
3857: PPUSH
3858: LD_STRING D1-JMM-10
3860: PPUSH
3861: CALL_OW 88
// if IsOK ( Denis ) then
3865: LD_EXP 3
3869: PPUSH
3870: CALL_OW 302
3874: IFFALSE 3888
// Say ( JMM , D1-JMM-10a ) ;
3876: LD_EXP 1
3880: PPUSH
3881: LD_STRING D1-JMM-10a
3883: PPUSH
3884: CALL_OW 88
// SelectDeltaCharacters ;
3888: CALL 4372 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 150 ) ;
3892: LD_EXP 20
3896: PUSH
3897: LD_INT 1
3899: ARRAY
3900: PPUSH
3901: CALL_OW 274
3905: PPUSH
3906: LD_INT 1
3908: PPUSH
3909: LD_INT 150
3911: PPUSH
3912: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) then
3916: LD_INT 22
3918: PUSH
3919: LD_INT 1
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: PUSH
3926: LD_INT 30
3928: PUSH
3929: LD_INT 29
3931: PUSH
3932: EMPTY
3933: LIST
3934: LIST
3935: PUSH
3936: EMPTY
3937: LIST
3938: LIST
3939: PPUSH
3940: CALL_OW 69
3944: IFFALSE 3970
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
3946: LD_EXP 20
3950: PUSH
3951: LD_INT 1
3953: ARRAY
3954: PPUSH
3955: CALL_OW 274
3959: PPUSH
3960: LD_INT 2
3962: PPUSH
3963: LD_INT 300
3965: PPUSH
3966: CALL_OW 277
// InGameOff ;
3970: CALL_OW 9
// Query ( Q1 ) ;
3974: LD_STRING Q1
3976: PPUSH
3977: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
3981: LD_INT 3
3983: PPUSH
3984: LD_INT 1
3986: PPUSH
3987: CALL_OW 424
// if IsInUnit ( JMM ) then
3991: LD_EXP 1
3995: PPUSH
3996: CALL_OW 310
4000: IFFALSE 4011
// ComExitBuilding ( JMM ) ;
4002: LD_EXP 1
4006: PPUSH
4007: CALL_OW 122
// end ;
4011: LD_VAR 0 1
4015: RET
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
4016: LD_INT 3
4018: PPUSH
4019: LD_INT 22
4021: PUSH
4022: LD_INT 1
4024: PUSH
4025: EMPTY
4026: LIST
4027: LIST
4028: PUSH
4029: LD_INT 21
4031: PUSH
4032: LD_INT 1
4034: PUSH
4035: EMPTY
4036: LIST
4037: LIST
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: PPUSH
4043: CALL_OW 71
4047: PUSH
4048: LD_INT 0
4050: EQUAL
4051: IFFALSE 4369
4053: GO 4055
4055: DISABLE
4056: LD_INT 0
4058: PPUSH
4059: PPUSH
// begin SaveDeltaCharacters ;
4060: CALL 4726 0 0
// if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) then
4064: LD_INT 3
4066: PPUSH
4067: LD_INT 21
4069: PUSH
4070: LD_INT 2
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: PUSH
4077: LD_INT 3
4079: PUSH
4080: LD_INT 58
4082: PUSH
4083: EMPTY
4084: LIST
4085: PUSH
4086: EMPTY
4087: LIST
4088: LIST
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: PPUSH
4094: CALL_OW 70
4098: IFFALSE 4355
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
4100: LD_ADDR_VAR 0 1
4104: PUSH
4105: LD_INT 3
4107: PPUSH
4108: LD_INT 21
4110: PUSH
4111: LD_INT 2
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: PUSH
4118: LD_INT 3
4120: PUSH
4121: LD_INT 58
4123: PUSH
4124: EMPTY
4125: LIST
4126: PUSH
4127: EMPTY
4128: LIST
4129: LIST
4130: PUSH
4131: EMPTY
4132: LIST
4133: LIST
4134: PPUSH
4135: CALL_OW 70
4139: PUSH
4140: FOR_IN
4141: IFFALSE 4353
// begin cargoType := GetCargoType ( i ) ;
4143: LD_ADDR_VAR 0 2
4147: PUSH
4148: LD_VAR 0 1
4152: PPUSH
4153: CALL_OW 288
4157: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4158: LD_VAR 0 1
4162: PPUSH
4163: CALL_OW 264
4167: PUSH
4168: LD_INT 12
4170: EQUAL
4171: IFFALSE 4268
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] else
4173: LD_ADDR_EXP 14
4177: PUSH
4178: LD_EXP 14
4182: PUSH
4183: LD_VAR 0 1
4187: PPUSH
4188: CALL_OW 248
4192: PUSH
4193: LD_VAR 0 1
4197: PPUSH
4198: CALL_OW 265
4202: PUSH
4203: LD_VAR 0 1
4207: PPUSH
4208: CALL_OW 262
4212: PUSH
4213: LD_VAR 0 1
4217: PPUSH
4218: CALL_OW 263
4222: PUSH
4223: LD_VAR 0 1
4227: PPUSH
4228: CALL_OW 264
4232: PUSH
4233: LD_VAR 0 2
4237: PUSH
4238: LD_VAR 0 1
4242: PPUSH
4243: LD_VAR 0 2
4247: PPUSH
4248: CALL_OW 289
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: PUSH
4262: EMPTY
4263: LIST
4264: ADD
4265: ST_TO_ADDR
4266: GO 4339
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4268: LD_ADDR_EXP 14
4272: PUSH
4273: LD_EXP 14
4277: PUSH
4278: LD_VAR 0 1
4282: PPUSH
4283: CALL_OW 248
4287: PUSH
4288: LD_VAR 0 1
4292: PPUSH
4293: CALL_OW 265
4297: PUSH
4298: LD_VAR 0 1
4302: PPUSH
4303: CALL_OW 262
4307: PUSH
4308: LD_VAR 0 1
4312: PPUSH
4313: CALL_OW 263
4317: PUSH
4318: LD_VAR 0 1
4322: PPUSH
4323: CALL_OW 264
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: LIST
4334: PUSH
4335: EMPTY
4336: LIST
4337: ADD
4338: ST_TO_ADDR
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4339: LD_EXP 14
4343: PPUSH
4344: LD_STRING 06_VehiclesIn06_1
4346: PPUSH
4347: CALL_OW 39
// end ;
4351: GO 4140
4353: POP
4354: POP
// end ; SaveCargos ;
4355: CALL 5482 0 0
// ChangeMap ( 6 , %_cont ) ;
4359: LD_INT 6
4361: PPUSH
4362: LD_STRING %_cont
4364: PPUSH
4365: CALL_OW 340
// end ; end_of_file
4369: PPOPN 2
4371: END
// export function SelectDeltaCharacters ; var i , yourPeople ; begin
4372: LD_INT 0
4374: PPUSH
4375: PPUSH
4376: PPUSH
// selectedPeople := [ ] ;
4377: LD_ADDR_EXP 17
4381: PUSH
4382: EMPTY
4383: ST_TO_ADDR
// yourPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4384: LD_ADDR_VAR 0 3
4388: PUSH
4389: LD_INT 22
4391: PUSH
4392: LD_INT 1
4394: PUSH
4395: EMPTY
4396: LIST
4397: LIST
4398: PUSH
4399: LD_INT 21
4401: PUSH
4402: LD_INT 1
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: PUSH
4409: LD_INT 2
4411: PUSH
4412: LD_INT 25
4414: PUSH
4415: LD_INT 1
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: PUSH
4422: LD_INT 25
4424: PUSH
4425: LD_INT 2
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: PUSH
4432: LD_INT 25
4434: PUSH
4435: LD_INT 3
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: PUSH
4442: LD_INT 25
4444: PUSH
4445: LD_INT 4
4447: PUSH
4448: EMPTY
4449: LIST
4450: LIST
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: LIST
4456: LIST
4457: LIST
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: LIST
4463: PPUSH
4464: CALL_OW 69
4468: PUSH
4469: LD_EXP 1
4473: PUSH
4474: LD_EXP 15
4478: PUSH
4479: LD_EXP 3
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: LIST
4488: DIFF
4489: ST_TO_ADDR
// selectedPeople := CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4490: LD_ADDR_EXP 17
4494: PUSH
4495: LD_STRING text
4497: PPUSH
4498: LD_INT 5
4500: PPUSH
4501: LD_INT 5
4503: PPUSH
4504: LD_INT -5
4506: PUSH
4507: LD_EXP 1
4511: PUSH
4512: LD_INT -6
4514: PUSH
4515: LD_INT -2
4517: PUSH
4518: LD_INT -3
4520: PUSH
4521: LD_INT -5
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: LIST
4531: PUSH
4532: LD_VAR 0 3
4536: ADD
4537: PUSH
4538: LD_INT -6
4540: PUSH
4541: LD_INT -4
4543: PUSH
4544: LD_EXP 3
4548: PUSH
4549: LD_EXP 15
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: LIST
4558: LIST
4559: ADD
4560: PPUSH
4561: LD_INT 1
4563: PUSH
4564: LD_INT 3
4566: PUSH
4567: LD_INT 2
4569: PUSH
4570: LD_INT 1
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: PUSH
4577: LD_INT 4
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: PPUSH
4586: CALL_OW 42
4590: ST_TO_ADDR
// ComStop ( selectedPeople ) ;
4591: LD_EXP 17
4595: PPUSH
4596: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4600: LD_INT 22
4602: PUSH
4603: LD_INT 1
4605: PUSH
4606: EMPTY
4607: LIST
4608: LIST
4609: PUSH
4610: LD_INT 21
4612: PUSH
4613: LD_INT 1
4615: PUSH
4616: EMPTY
4617: LIST
4618: LIST
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: PPUSH
4624: CALL_OW 69
4628: PPUSH
4629: LD_INT 4
4631: PPUSH
4632: CALL_OW 235
// for i in selectedPeople do
4636: LD_ADDR_VAR 0 2
4640: PUSH
4641: LD_EXP 17
4645: PUSH
4646: FOR_IN
4647: IFFALSE 4663
// SetSide ( i , 1 ) ;
4649: LD_VAR 0 2
4653: PPUSH
4654: LD_INT 1
4656: PPUSH
4657: CALL_OW 235
4661: GO 4646
4663: POP
4664: POP
// for i in yourApemans do
4665: LD_ADDR_VAR 0 2
4669: PUSH
4670: LD_EXP 13
4674: PUSH
4675: FOR_IN
4676: IFFALSE 4692
// SetSide ( i , 1 ) ;
4678: LD_VAR 0 2
4682: PPUSH
4683: LD_INT 1
4685: PPUSH
4686: CALL_OW 235
4690: GO 4675
4692: POP
4693: POP
// SetSide ( JMM , 1 ) ;
4694: LD_EXP 1
4698: PPUSH
4699: LD_INT 1
4701: PPUSH
4702: CALL_OW 235
// SetSkill ( yourApemans , 2 , 5 ) ;
4706: LD_EXP 13
4710: PPUSH
4711: LD_INT 2
4713: PPUSH
4714: LD_INT 5
4716: PPUSH
4717: CALL_OW 237
// end ;
4721: LD_VAR 0 1
4725: RET
// export function SaveDeltaCharacters ; begin
4726: LD_INT 0
4728: PPUSH
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4729: LD_EXP 1
4733: PPUSH
4734: LD_EXP 22
4738: PUSH
4739: LD_STRING JMM
4741: STR
4742: PPUSH
4743: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4747: LD_EXP 15
4751: PPUSH
4752: LD_STRING DeltaDoctor
4754: PPUSH
4755: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4759: LD_EXP 3
4763: PPUSH
4764: LD_EXP 22
4768: PUSH
4769: LD_STRING Denis
4771: STR
4772: PPUSH
4773: CALL_OW 38
// if Lisa in selectedPeople then
4777: LD_EXP 4
4781: PUSH
4782: LD_EXP 17
4786: IN
4787: IFFALSE 4819
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4789: LD_EXP 4
4793: PPUSH
4794: LD_EXP 22
4798: PUSH
4799: LD_STRING Lisa
4801: STR
4802: PPUSH
4803: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4807: LD_INT 1
4809: PPUSH
4810: LD_STRING LisaIn06
4812: PPUSH
4813: CALL_OW 39
// end else
4817: GO 4840
// if IsOk ( Lisa ) then
4819: LD_EXP 4
4823: PPUSH
4824: CALL_OW 302
4828: IFFALSE 4840
// SaveVariable ( 1 , LisaStayInDelta ) ;
4830: LD_INT 1
4832: PPUSH
4833: LD_STRING LisaStayInDelta
4835: PPUSH
4836: CALL_OW 39
// if Bobby in selectedPeople then
4840: LD_EXP 6
4844: PUSH
4845: LD_EXP 17
4849: IN
4850: IFFALSE 4882
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4852: LD_EXP 6
4856: PPUSH
4857: LD_EXP 22
4861: PUSH
4862: LD_STRING Bobby
4864: STR
4865: PPUSH
4866: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4870: LD_INT 1
4872: PPUSH
4873: LD_STRING BobbyIn06
4875: PPUSH
4876: CALL_OW 39
// end else
4880: GO 4903
// if IsOk ( Bobby ) then
4882: LD_EXP 6
4886: PPUSH
4887: CALL_OW 302
4891: IFFALSE 4903
// SaveVariable ( 1 , BobbyStayInDelta ) ;
4893: LD_INT 1
4895: PPUSH
4896: LD_STRING BobbyStayInDelta
4898: PPUSH
4899: CALL_OW 39
// if Cyrus in selectedPeople then
4903: LD_EXP 7
4907: PUSH
4908: LD_EXP 17
4912: IN
4913: IFFALSE 4945
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4915: LD_EXP 7
4919: PPUSH
4920: LD_EXP 22
4924: PUSH
4925: LD_STRING Cyrus
4927: STR
4928: PPUSH
4929: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
4933: LD_INT 1
4935: PPUSH
4936: LD_STRING CyrusIn06
4938: PPUSH
4939: CALL_OW 39
// end else
4943: GO 4966
// if IsOk ( Cyrus ) then
4945: LD_EXP 7
4949: PPUSH
4950: CALL_OW 302
4954: IFFALSE 4966
// SaveVariable ( 1 , CyrusStayInDelta ) ;
4956: LD_INT 1
4958: PPUSH
4959: LD_STRING CyrusStayInDelta
4961: PPUSH
4962: CALL_OW 39
// if Frank in selectedPeople then
4966: LD_EXP 5
4970: PUSH
4971: LD_EXP 17
4975: IN
4976: IFFALSE 5008
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
4978: LD_EXP 5
4982: PPUSH
4983: LD_EXP 22
4987: PUSH
4988: LD_STRING Frank
4990: STR
4991: PPUSH
4992: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
4996: LD_INT 1
4998: PPUSH
4999: LD_STRING FrankIn06
5001: PPUSH
5002: CALL_OW 39
// end else
5006: GO 5029
// if IsOk ( Frank ) then
5008: LD_EXP 5
5012: PPUSH
5013: CALL_OW 302
5017: IFFALSE 5029
// SaveVariable ( 1 , FrankStayInDelta ) ;
5019: LD_INT 1
5021: PPUSH
5022: LD_STRING FrankStayInDelta
5024: PPUSH
5025: CALL_OW 39
// if Brown in selectedPeople then
5029: LD_EXP 8
5033: PUSH
5034: LD_EXP 17
5038: IN
5039: IFFALSE 5071
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5041: LD_EXP 8
5045: PPUSH
5046: LD_EXP 22
5050: PUSH
5051: LD_STRING Brown
5053: STR
5054: PPUSH
5055: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
5059: LD_INT 1
5061: PPUSH
5062: LD_STRING BrownIn06
5064: PPUSH
5065: CALL_OW 39
// end else
5069: GO 5092
// if IsOk ( Brown ) then
5071: LD_EXP 8
5075: PPUSH
5076: CALL_OW 302
5080: IFFALSE 5092
// SaveVariable ( 1 , BrownStayInDelta ) ;
5082: LD_INT 1
5084: PPUSH
5085: LD_STRING BrownStayInDelta
5087: PPUSH
5088: CALL_OW 39
// if Donaldson in selectedPeople then
5092: LD_EXP 9
5096: PUSH
5097: LD_EXP 17
5101: IN
5102: IFFALSE 5134
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5104: LD_EXP 9
5108: PPUSH
5109: LD_EXP 22
5113: PUSH
5114: LD_STRING Donaldson
5116: STR
5117: PPUSH
5118: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5122: LD_INT 1
5124: PPUSH
5125: LD_STRING DonaldsonIn06
5127: PPUSH
5128: CALL_OW 39
// end else
5132: GO 5155
// if IsOk ( Donaldson ) then
5134: LD_EXP 9
5138: PPUSH
5139: CALL_OW 302
5143: IFFALSE 5155
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5145: LD_INT 1
5147: PPUSH
5148: LD_STRING DonaldsonStayInDelta
5150: PPUSH
5151: CALL_OW 39
// if Gladstone in selectedPeople then
5155: LD_EXP 2
5159: PUSH
5160: LD_EXP 17
5164: IN
5165: IFFALSE 5197
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5167: LD_EXP 2
5171: PPUSH
5172: LD_EXP 22
5176: PUSH
5177: LD_STRING Gladstone
5179: STR
5180: PPUSH
5181: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
5185: LD_INT 1
5187: PPUSH
5188: LD_STRING GladstoneIn06
5190: PPUSH
5191: CALL_OW 39
// end else
5195: GO 5218
// if IsOk ( Gladstone ) then
5197: LD_EXP 2
5201: PPUSH
5202: CALL_OW 302
5206: IFFALSE 5218
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5208: LD_INT 1
5210: PPUSH
5211: LD_STRING GladstoneStayInDelta
5213: PPUSH
5214: CALL_OW 39
// selectedPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ;
5218: LD_ADDR_EXP 17
5222: PUSH
5223: LD_INT 22
5225: PUSH
5226: LD_INT 1
5228: PUSH
5229: EMPTY
5230: LIST
5231: LIST
5232: PUSH
5233: LD_INT 23
5235: PUSH
5236: LD_INT 1
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: PUSH
5243: LD_INT 21
5245: PUSH
5246: LD_INT 1
5248: PUSH
5249: EMPTY
5250: LIST
5251: LIST
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: LIST
5257: PPUSH
5258: CALL_OW 69
5262: ST_TO_ADDR
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5263: LD_EXP 13
5267: PPUSH
5268: LD_STRING ApeIn06
5270: PPUSH
5271: CALL_OW 38
// SaveCharacters ( selectedPeople diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersIn06 ) ;
5275: LD_EXP 17
5279: PUSH
5280: LD_EXP 1
5284: PUSH
5285: LD_EXP 4
5289: PUSH
5290: LD_EXP 6
5294: PUSH
5295: LD_EXP 7
5299: PUSH
5300: LD_EXP 5
5304: PUSH
5305: LD_EXP 8
5309: PUSH
5310: LD_EXP 9
5314: PUSH
5315: LD_EXP 2
5319: PUSH
5320: LD_EXP 3
5324: PUSH
5325: EMPTY
5326: LIST
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: DIFF
5336: PPUSH
5337: LD_STRING OthersIn06
5339: PPUSH
5340: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersStayInDelta ) ;
5344: LD_INT 22
5346: PUSH
5347: LD_INT 4
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: PUSH
5354: LD_INT 2
5356: PUSH
5357: LD_INT 25
5359: PUSH
5360: LD_INT 1
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: PUSH
5367: LD_INT 25
5369: PUSH
5370: LD_INT 2
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: PUSH
5377: LD_INT 25
5379: PUSH
5380: LD_INT 3
5382: PUSH
5383: EMPTY
5384: LIST
5385: LIST
5386: PUSH
5387: LD_INT 25
5389: PUSH
5390: LD_INT 4
5392: PUSH
5393: EMPTY
5394: LIST
5395: LIST
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: LIST
5401: LIST
5402: LIST
5403: PUSH
5404: EMPTY
5405: LIST
5406: LIST
5407: PPUSH
5408: CALL_OW 69
5412: PUSH
5413: LD_EXP 15
5417: PUSH
5418: LD_EXP 4
5422: PUSH
5423: LD_EXP 6
5427: PUSH
5428: LD_EXP 7
5432: PUSH
5433: LD_EXP 5
5437: PUSH
5438: LD_EXP 8
5442: PUSH
5443: LD_EXP 9
5447: PUSH
5448: LD_EXP 2
5452: PUSH
5453: LD_EXP 3
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: LIST
5465: LIST
5466: LIST
5467: LIST
5468: DIFF
5469: PPUSH
5470: LD_STRING OthersStayInDelta
5472: PPUSH
5473: CALL_OW 38
// end ;
5477: LD_VAR 0 1
5481: RET
// export function SaveCargos ; var i ; begin
5482: LD_INT 0
5484: PPUSH
5485: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
5486: LD_ADDR_VAR 0 2
5490: PUSH
5491: LD_INT 3
5493: PPUSH
5494: LD_INT 22
5496: PUSH
5497: LD_INT 1
5499: PUSH
5500: EMPTY
5501: LIST
5502: LIST
5503: PUSH
5504: LD_INT 34
5506: PUSH
5507: LD_INT 12
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: PUSH
5514: EMPTY
5515: LIST
5516: LIST
5517: PPUSH
5518: CALL_OW 70
5522: PUSH
5523: FOR_IN
5524: IFFALSE 5552
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
5526: LD_ADDR_EXP 21
5530: PUSH
5531: LD_EXP 21
5535: PUSH
5536: LD_VAR 0 2
5540: PPUSH
5541: CALL 66716 0 1
5545: PUSH
5546: EMPTY
5547: LIST
5548: ADD
5549: ST_TO_ADDR
5550: GO 5523
5552: POP
5553: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
5554: LD_EXP 21
5558: PPUSH
5559: LD_STRING 06_ResourcesInCargo06_1
5561: PPUSH
5562: CALL_OW 39
// end ; end_of_file
5566: LD_VAR 0 1
5570: RET
// on Command ( comandid ) do var i ;
5571: LD_INT 0
5573: PPUSH
// begin if comandid = 65 then
5574: LD_VAR 0 1
5578: PUSH
5579: LD_INT 65
5581: EQUAL
5582: IFFALSE 5623
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5584: LD_ADDR_VAR 0 2
5588: PUSH
5589: LD_INT 22
5591: PUSH
5592: LD_INT 1
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PUSH
5599: EMPTY
5600: LIST
5601: PPUSH
5602: CALL_OW 69
5606: PUSH
5607: FOR_IN
5608: IFFALSE 5621
// ComStop ( i ) ;
5610: LD_VAR 0 2
5614: PPUSH
5615: CALL_OW 141
5619: GO 5607
5621: POP
5622: POP
// end ;
5623: PPOPN 2
5625: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5626: LD_INT 0
5628: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5629: LD_ADDR_VAR 0 3
5633: PUSH
5634: LD_INT 22
5636: PUSH
5637: LD_INT 1
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: PUSH
5644: LD_INT 21
5646: PUSH
5647: LD_INT 3
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: PUSH
5654: LD_INT 30
5656: PUSH
5657: LD_INT 0
5659: PUSH
5660: EMPTY
5661: LIST
5662: LIST
5663: PUSH
5664: EMPTY
5665: LIST
5666: LIST
5667: LIST
5668: PPUSH
5669: CALL_OW 69
5673: ST_TO_ADDR
// if not tmp then
5674: LD_VAR 0 3
5678: NOT
5679: IFFALSE 5683
// exit ;
5681: GO 5713
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5683: LD_VAR 0 1
5687: PPUSH
5688: LD_VAR 0 3
5692: PUSH
5693: LD_INT 1
5695: ARRAY
5696: PPUSH
5697: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5701: LD_VAR 0 1
5705: PPUSH
5706: LD_INT 4
5708: PPUSH
5709: CALL_OW 235
// end ;
5713: PPOPN 3
5715: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5716: LD_VAR 0 1
5720: PUSH
5721: LD_EXP 1
5725: EQUAL
5726: IFFALSE 5735
// YouLost ( JMM ) ;
5728: LD_STRING JMM
5730: PPUSH
5731: CALL_OW 104
// SOS_UnitDestroyed ( un ) ;
5735: LD_VAR 0 1
5739: PPUSH
5740: CALL 21413 0 1
// end ;
5744: PPOPN 1
5746: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5747: LD_VAR 0 1
5751: PPUSH
5752: LD_VAR 0 2
5756: PPUSH
5757: CALL 21533 0 2
// end ; end_of_file
5761: PPOPN 2
5763: END
// every 0 0$1 do
5764: GO 5766
5766: DISABLE
// begin enable ;
5767: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5768: LD_STRING updateTimer(
5770: PUSH
5771: LD_OWVAR 1
5775: STR
5776: PUSH
5777: LD_STRING );
5779: STR
5780: PPUSH
5781: CALL_OW 559
// end ;
5785: END
// export function SOS_MapStart ( ) ; begin
5786: LD_INT 0
5788: PPUSH
// if streamModeActive then
5789: LD_EXP 24
5793: IFFALSE 5802
// DefineStreamItems ( true ) ;
5795: LD_INT 1
5797: PPUSH
5798: CALL 7456 0 1
// UpdateFactoryWaypoints ( ) ;
5802: CALL 20317 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5806: CALL 20574 0 0
// end ;
5810: LD_VAR 0 1
5814: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5815: LD_INT 0
5817: PPUSH
// if p2 = hack_mode then
5818: LD_VAR 0 2
5822: PUSH
5823: LD_INT 100
5825: EQUAL
5826: IFFALSE 6829
// begin if not StreamModeActive then
5828: LD_EXP 24
5832: NOT
5833: IFFALSE 5843
// StreamModeActive := true ;
5835: LD_ADDR_EXP 24
5839: PUSH
5840: LD_INT 1
5842: ST_TO_ADDR
// if p3 = 0 then
5843: LD_VAR 0 3
5847: PUSH
5848: LD_INT 0
5850: EQUAL
5851: IFFALSE 5857
// InitStreamMode ;
5853: CALL 6992 0 0
// if p3 = 1 then
5857: LD_VAR 0 3
5861: PUSH
5862: LD_INT 1
5864: EQUAL
5865: IFFALSE 5875
// sRocket := true ;
5867: LD_ADDR_EXP 29
5871: PUSH
5872: LD_INT 1
5874: ST_TO_ADDR
// if p3 = 2 then
5875: LD_VAR 0 3
5879: PUSH
5880: LD_INT 2
5882: EQUAL
5883: IFFALSE 5893
// sSpeed := true ;
5885: LD_ADDR_EXP 28
5889: PUSH
5890: LD_INT 1
5892: ST_TO_ADDR
// if p3 = 3 then
5893: LD_VAR 0 3
5897: PUSH
5898: LD_INT 3
5900: EQUAL
5901: IFFALSE 5911
// sEngine := true ;
5903: LD_ADDR_EXP 30
5907: PUSH
5908: LD_INT 1
5910: ST_TO_ADDR
// if p3 = 4 then
5911: LD_VAR 0 3
5915: PUSH
5916: LD_INT 4
5918: EQUAL
5919: IFFALSE 5929
// sSpec := true ;
5921: LD_ADDR_EXP 27
5925: PUSH
5926: LD_INT 1
5928: ST_TO_ADDR
// if p3 = 5 then
5929: LD_VAR 0 3
5933: PUSH
5934: LD_INT 5
5936: EQUAL
5937: IFFALSE 5947
// sLevel := true ;
5939: LD_ADDR_EXP 31
5943: PUSH
5944: LD_INT 1
5946: ST_TO_ADDR
// if p3 = 6 then
5947: LD_VAR 0 3
5951: PUSH
5952: LD_INT 6
5954: EQUAL
5955: IFFALSE 5965
// sArmoury := true ;
5957: LD_ADDR_EXP 32
5961: PUSH
5962: LD_INT 1
5964: ST_TO_ADDR
// if p3 = 7 then
5965: LD_VAR 0 3
5969: PUSH
5970: LD_INT 7
5972: EQUAL
5973: IFFALSE 5983
// sRadar := true ;
5975: LD_ADDR_EXP 33
5979: PUSH
5980: LD_INT 1
5982: ST_TO_ADDR
// if p3 = 8 then
5983: LD_VAR 0 3
5987: PUSH
5988: LD_INT 8
5990: EQUAL
5991: IFFALSE 6001
// sBunker := true ;
5993: LD_ADDR_EXP 34
5997: PUSH
5998: LD_INT 1
6000: ST_TO_ADDR
// if p3 = 9 then
6001: LD_VAR 0 3
6005: PUSH
6006: LD_INT 9
6008: EQUAL
6009: IFFALSE 6019
// sHack := true ;
6011: LD_ADDR_EXP 35
6015: PUSH
6016: LD_INT 1
6018: ST_TO_ADDR
// if p3 = 10 then
6019: LD_VAR 0 3
6023: PUSH
6024: LD_INT 10
6026: EQUAL
6027: IFFALSE 6037
// sFire := true ;
6029: LD_ADDR_EXP 36
6033: PUSH
6034: LD_INT 1
6036: ST_TO_ADDR
// if p3 = 11 then
6037: LD_VAR 0 3
6041: PUSH
6042: LD_INT 11
6044: EQUAL
6045: IFFALSE 6055
// sRefresh := true ;
6047: LD_ADDR_EXP 37
6051: PUSH
6052: LD_INT 1
6054: ST_TO_ADDR
// if p3 = 12 then
6055: LD_VAR 0 3
6059: PUSH
6060: LD_INT 12
6062: EQUAL
6063: IFFALSE 6073
// sExp := true ;
6065: LD_ADDR_EXP 38
6069: PUSH
6070: LD_INT 1
6072: ST_TO_ADDR
// if p3 = 13 then
6073: LD_VAR 0 3
6077: PUSH
6078: LD_INT 13
6080: EQUAL
6081: IFFALSE 6091
// sDepot := true ;
6083: LD_ADDR_EXP 39
6087: PUSH
6088: LD_INT 1
6090: ST_TO_ADDR
// if p3 = 14 then
6091: LD_VAR 0 3
6095: PUSH
6096: LD_INT 14
6098: EQUAL
6099: IFFALSE 6109
// sFlag := true ;
6101: LD_ADDR_EXP 40
6105: PUSH
6106: LD_INT 1
6108: ST_TO_ADDR
// if p3 = 15 then
6109: LD_VAR 0 3
6113: PUSH
6114: LD_INT 15
6116: EQUAL
6117: IFFALSE 6127
// sKamikadze := true ;
6119: LD_ADDR_EXP 48
6123: PUSH
6124: LD_INT 1
6126: ST_TO_ADDR
// if p3 = 16 then
6127: LD_VAR 0 3
6131: PUSH
6132: LD_INT 16
6134: EQUAL
6135: IFFALSE 6145
// sTroll := true ;
6137: LD_ADDR_EXP 49
6141: PUSH
6142: LD_INT 1
6144: ST_TO_ADDR
// if p3 = 17 then
6145: LD_VAR 0 3
6149: PUSH
6150: LD_INT 17
6152: EQUAL
6153: IFFALSE 6163
// sSlow := true ;
6155: LD_ADDR_EXP 50
6159: PUSH
6160: LD_INT 1
6162: ST_TO_ADDR
// if p3 = 18 then
6163: LD_VAR 0 3
6167: PUSH
6168: LD_INT 18
6170: EQUAL
6171: IFFALSE 6181
// sLack := true ;
6173: LD_ADDR_EXP 51
6177: PUSH
6178: LD_INT 1
6180: ST_TO_ADDR
// if p3 = 19 then
6181: LD_VAR 0 3
6185: PUSH
6186: LD_INT 19
6188: EQUAL
6189: IFFALSE 6199
// sTank := true ;
6191: LD_ADDR_EXP 53
6195: PUSH
6196: LD_INT 1
6198: ST_TO_ADDR
// if p3 = 20 then
6199: LD_VAR 0 3
6203: PUSH
6204: LD_INT 20
6206: EQUAL
6207: IFFALSE 6217
// sRemote := true ;
6209: LD_ADDR_EXP 54
6213: PUSH
6214: LD_INT 1
6216: ST_TO_ADDR
// if p3 = 21 then
6217: LD_VAR 0 3
6221: PUSH
6222: LD_INT 21
6224: EQUAL
6225: IFFALSE 6235
// sPowell := true ;
6227: LD_ADDR_EXP 55
6231: PUSH
6232: LD_INT 1
6234: ST_TO_ADDR
// if p3 = 22 then
6235: LD_VAR 0 3
6239: PUSH
6240: LD_INT 22
6242: EQUAL
6243: IFFALSE 6253
// sTeleport := true ;
6245: LD_ADDR_EXP 58
6249: PUSH
6250: LD_INT 1
6252: ST_TO_ADDR
// if p3 = 23 then
6253: LD_VAR 0 3
6257: PUSH
6258: LD_INT 23
6260: EQUAL
6261: IFFALSE 6271
// sOilTower := true ;
6263: LD_ADDR_EXP 60
6267: PUSH
6268: LD_INT 1
6270: ST_TO_ADDR
// if p3 = 24 then
6271: LD_VAR 0 3
6275: PUSH
6276: LD_INT 24
6278: EQUAL
6279: IFFALSE 6289
// sShovel := true ;
6281: LD_ADDR_EXP 61
6285: PUSH
6286: LD_INT 1
6288: ST_TO_ADDR
// if p3 = 25 then
6289: LD_VAR 0 3
6293: PUSH
6294: LD_INT 25
6296: EQUAL
6297: IFFALSE 6307
// sSheik := true ;
6299: LD_ADDR_EXP 62
6303: PUSH
6304: LD_INT 1
6306: ST_TO_ADDR
// if p3 = 26 then
6307: LD_VAR 0 3
6311: PUSH
6312: LD_INT 26
6314: EQUAL
6315: IFFALSE 6325
// sEarthquake := true ;
6317: LD_ADDR_EXP 64
6321: PUSH
6322: LD_INT 1
6324: ST_TO_ADDR
// if p3 = 27 then
6325: LD_VAR 0 3
6329: PUSH
6330: LD_INT 27
6332: EQUAL
6333: IFFALSE 6343
// sAI := true ;
6335: LD_ADDR_EXP 65
6339: PUSH
6340: LD_INT 1
6342: ST_TO_ADDR
// if p3 = 28 then
6343: LD_VAR 0 3
6347: PUSH
6348: LD_INT 28
6350: EQUAL
6351: IFFALSE 6361
// sCargo := true ;
6353: LD_ADDR_EXP 68
6357: PUSH
6358: LD_INT 1
6360: ST_TO_ADDR
// if p3 = 29 then
6361: LD_VAR 0 3
6365: PUSH
6366: LD_INT 29
6368: EQUAL
6369: IFFALSE 6379
// sDLaser := true ;
6371: LD_ADDR_EXP 69
6375: PUSH
6376: LD_INT 1
6378: ST_TO_ADDR
// if p3 = 30 then
6379: LD_VAR 0 3
6383: PUSH
6384: LD_INT 30
6386: EQUAL
6387: IFFALSE 6397
// sExchange := true ;
6389: LD_ADDR_EXP 70
6393: PUSH
6394: LD_INT 1
6396: ST_TO_ADDR
// if p3 = 31 then
6397: LD_VAR 0 3
6401: PUSH
6402: LD_INT 31
6404: EQUAL
6405: IFFALSE 6415
// sFac := true ;
6407: LD_ADDR_EXP 71
6411: PUSH
6412: LD_INT 1
6414: ST_TO_ADDR
// if p3 = 32 then
6415: LD_VAR 0 3
6419: PUSH
6420: LD_INT 32
6422: EQUAL
6423: IFFALSE 6433
// sPower := true ;
6425: LD_ADDR_EXP 72
6429: PUSH
6430: LD_INT 1
6432: ST_TO_ADDR
// if p3 = 33 then
6433: LD_VAR 0 3
6437: PUSH
6438: LD_INT 33
6440: EQUAL
6441: IFFALSE 6451
// sRandom := true ;
6443: LD_ADDR_EXP 73
6447: PUSH
6448: LD_INT 1
6450: ST_TO_ADDR
// if p3 = 34 then
6451: LD_VAR 0 3
6455: PUSH
6456: LD_INT 34
6458: EQUAL
6459: IFFALSE 6469
// sShield := true ;
6461: LD_ADDR_EXP 74
6465: PUSH
6466: LD_INT 1
6468: ST_TO_ADDR
// if p3 = 35 then
6469: LD_VAR 0 3
6473: PUSH
6474: LD_INT 35
6476: EQUAL
6477: IFFALSE 6487
// sTime := true ;
6479: LD_ADDR_EXP 75
6483: PUSH
6484: LD_INT 1
6486: ST_TO_ADDR
// if p3 = 36 then
6487: LD_VAR 0 3
6491: PUSH
6492: LD_INT 36
6494: EQUAL
6495: IFFALSE 6505
// sTools := true ;
6497: LD_ADDR_EXP 76
6501: PUSH
6502: LD_INT 1
6504: ST_TO_ADDR
// if p3 = 101 then
6505: LD_VAR 0 3
6509: PUSH
6510: LD_INT 101
6512: EQUAL
6513: IFFALSE 6523
// sSold := true ;
6515: LD_ADDR_EXP 41
6519: PUSH
6520: LD_INT 1
6522: ST_TO_ADDR
// if p3 = 102 then
6523: LD_VAR 0 3
6527: PUSH
6528: LD_INT 102
6530: EQUAL
6531: IFFALSE 6541
// sDiff := true ;
6533: LD_ADDR_EXP 42
6537: PUSH
6538: LD_INT 1
6540: ST_TO_ADDR
// if p3 = 103 then
6541: LD_VAR 0 3
6545: PUSH
6546: LD_INT 103
6548: EQUAL
6549: IFFALSE 6559
// sFog := true ;
6551: LD_ADDR_EXP 45
6555: PUSH
6556: LD_INT 1
6558: ST_TO_ADDR
// if p3 = 104 then
6559: LD_VAR 0 3
6563: PUSH
6564: LD_INT 104
6566: EQUAL
6567: IFFALSE 6577
// sReset := true ;
6569: LD_ADDR_EXP 46
6573: PUSH
6574: LD_INT 1
6576: ST_TO_ADDR
// if p3 = 105 then
6577: LD_VAR 0 3
6581: PUSH
6582: LD_INT 105
6584: EQUAL
6585: IFFALSE 6595
// sSun := true ;
6587: LD_ADDR_EXP 47
6591: PUSH
6592: LD_INT 1
6594: ST_TO_ADDR
// if p3 = 106 then
6595: LD_VAR 0 3
6599: PUSH
6600: LD_INT 106
6602: EQUAL
6603: IFFALSE 6613
// sTiger := true ;
6605: LD_ADDR_EXP 43
6609: PUSH
6610: LD_INT 1
6612: ST_TO_ADDR
// if p3 = 107 then
6613: LD_VAR 0 3
6617: PUSH
6618: LD_INT 107
6620: EQUAL
6621: IFFALSE 6631
// sBomb := true ;
6623: LD_ADDR_EXP 44
6627: PUSH
6628: LD_INT 1
6630: ST_TO_ADDR
// if p3 = 108 then
6631: LD_VAR 0 3
6635: PUSH
6636: LD_INT 108
6638: EQUAL
6639: IFFALSE 6649
// sWound := true ;
6641: LD_ADDR_EXP 52
6645: PUSH
6646: LD_INT 1
6648: ST_TO_ADDR
// if p3 = 109 then
6649: LD_VAR 0 3
6653: PUSH
6654: LD_INT 109
6656: EQUAL
6657: IFFALSE 6667
// sBetray := true ;
6659: LD_ADDR_EXP 56
6663: PUSH
6664: LD_INT 1
6666: ST_TO_ADDR
// if p3 = 110 then
6667: LD_VAR 0 3
6671: PUSH
6672: LD_INT 110
6674: EQUAL
6675: IFFALSE 6685
// sContamin := true ;
6677: LD_ADDR_EXP 57
6681: PUSH
6682: LD_INT 1
6684: ST_TO_ADDR
// if p3 = 111 then
6685: LD_VAR 0 3
6689: PUSH
6690: LD_INT 111
6692: EQUAL
6693: IFFALSE 6703
// sOil := true ;
6695: LD_ADDR_EXP 59
6699: PUSH
6700: LD_INT 1
6702: ST_TO_ADDR
// if p3 = 112 then
6703: LD_VAR 0 3
6707: PUSH
6708: LD_INT 112
6710: EQUAL
6711: IFFALSE 6721
// sStu := true ;
6713: LD_ADDR_EXP 63
6717: PUSH
6718: LD_INT 1
6720: ST_TO_ADDR
// if p3 = 113 then
6721: LD_VAR 0 3
6725: PUSH
6726: LD_INT 113
6728: EQUAL
6729: IFFALSE 6739
// sBazooka := true ;
6731: LD_ADDR_EXP 66
6735: PUSH
6736: LD_INT 1
6738: ST_TO_ADDR
// if p3 = 114 then
6739: LD_VAR 0 3
6743: PUSH
6744: LD_INT 114
6746: EQUAL
6747: IFFALSE 6757
// sMortar := true ;
6749: LD_ADDR_EXP 67
6753: PUSH
6754: LD_INT 1
6756: ST_TO_ADDR
// if p3 = 115 then
6757: LD_VAR 0 3
6761: PUSH
6762: LD_INT 115
6764: EQUAL
6765: IFFALSE 6775
// sRanger := true ;
6767: LD_ADDR_EXP 77
6771: PUSH
6772: LD_INT 1
6774: ST_TO_ADDR
// if p3 = 116 then
6775: LD_VAR 0 3
6779: PUSH
6780: LD_INT 116
6782: EQUAL
6783: IFFALSE 6793
// sComputer := true ;
6785: LD_ADDR_EXP 78
6789: PUSH
6790: LD_INT 1
6792: ST_TO_ADDR
// if p3 = 117 then
6793: LD_VAR 0 3
6797: PUSH
6798: LD_INT 117
6800: EQUAL
6801: IFFALSE 6811
// s30 := true ;
6803: LD_ADDR_EXP 79
6807: PUSH
6808: LD_INT 1
6810: ST_TO_ADDR
// if p3 = 118 then
6811: LD_VAR 0 3
6815: PUSH
6816: LD_INT 118
6818: EQUAL
6819: IFFALSE 6829
// s60 := true ;
6821: LD_ADDR_EXP 80
6825: PUSH
6826: LD_INT 1
6828: ST_TO_ADDR
// end ; if p2 = stream_mode then
6829: LD_VAR 0 2
6833: PUSH
6834: LD_INT 101
6836: EQUAL
6837: IFFALSE 6965
// begin case p3 of 1 :
6839: LD_VAR 0 3
6843: PUSH
6844: LD_INT 1
6846: DOUBLE
6847: EQUAL
6848: IFTRUE 6852
6850: GO 6859
6852: POP
// hHackUnlimitedResources ; 2 :
6853: CALL 19063 0 0
6857: GO 6965
6859: LD_INT 2
6861: DOUBLE
6862: EQUAL
6863: IFTRUE 6867
6865: GO 6874
6867: POP
// hHackSetLevel10 ; 3 :
6868: CALL 19196 0 0
6872: GO 6965
6874: LD_INT 3
6876: DOUBLE
6877: EQUAL
6878: IFTRUE 6882
6880: GO 6889
6882: POP
// hHackSetLevel10YourUnits ; 4 :
6883: CALL 19281 0 0
6887: GO 6965
6889: LD_INT 4
6891: DOUBLE
6892: EQUAL
6893: IFTRUE 6897
6895: GO 6904
6897: POP
// hHackInvincible ; 5 :
6898: CALL 19729 0 0
6902: GO 6965
6904: LD_INT 5
6906: DOUBLE
6907: EQUAL
6908: IFTRUE 6912
6910: GO 6919
6912: POP
// hHackInvisible ; 6 :
6913: CALL 19840 0 0
6917: GO 6965
6919: LD_INT 6
6921: DOUBLE
6922: EQUAL
6923: IFTRUE 6927
6925: GO 6934
6927: POP
// hHackChangeYourSide ; 7 :
6928: CALL 19897 0 0
6932: GO 6965
6934: LD_INT 7
6936: DOUBLE
6937: EQUAL
6938: IFTRUE 6942
6940: GO 6949
6942: POP
// hHackChangeUnitSide ; 8 :
6943: CALL 19939 0 0
6947: GO 6965
6949: LD_INT 8
6951: DOUBLE
6952: EQUAL
6953: IFTRUE 6957
6955: GO 6964
6957: POP
// hHackFog ; end ;
6958: CALL 20040 0 0
6962: GO 6965
6964: POP
// end ; end ;
6965: LD_VAR 0 7
6969: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
6970: GO 6972
6972: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6973: LD_STRING initStreamRollete();
6975: PPUSH
6976: CALL_OW 559
// InitStreamMode ;
6980: CALL 6992 0 0
// DefineStreamItems ( false ) ;
6984: LD_INT 0
6986: PPUSH
6987: CALL 7456 0 1
// end ;
6991: END
// function InitStreamMode ; begin
6992: LD_INT 0
6994: PPUSH
// streamModeActive := false ;
6995: LD_ADDR_EXP 24
6999: PUSH
7000: LD_INT 0
7002: ST_TO_ADDR
// normalCounter := 36 ;
7003: LD_ADDR_EXP 25
7007: PUSH
7008: LD_INT 36
7010: ST_TO_ADDR
// hardcoreCounter := 18 ;
7011: LD_ADDR_EXP 26
7015: PUSH
7016: LD_INT 18
7018: ST_TO_ADDR
// sRocket := false ;
7019: LD_ADDR_EXP 29
7023: PUSH
7024: LD_INT 0
7026: ST_TO_ADDR
// sSpeed := false ;
7027: LD_ADDR_EXP 28
7031: PUSH
7032: LD_INT 0
7034: ST_TO_ADDR
// sEngine := false ;
7035: LD_ADDR_EXP 30
7039: PUSH
7040: LD_INT 0
7042: ST_TO_ADDR
// sSpec := false ;
7043: LD_ADDR_EXP 27
7047: PUSH
7048: LD_INT 0
7050: ST_TO_ADDR
// sLevel := false ;
7051: LD_ADDR_EXP 31
7055: PUSH
7056: LD_INT 0
7058: ST_TO_ADDR
// sArmoury := false ;
7059: LD_ADDR_EXP 32
7063: PUSH
7064: LD_INT 0
7066: ST_TO_ADDR
// sRadar := false ;
7067: LD_ADDR_EXP 33
7071: PUSH
7072: LD_INT 0
7074: ST_TO_ADDR
// sBunker := false ;
7075: LD_ADDR_EXP 34
7079: PUSH
7080: LD_INT 0
7082: ST_TO_ADDR
// sHack := false ;
7083: LD_ADDR_EXP 35
7087: PUSH
7088: LD_INT 0
7090: ST_TO_ADDR
// sFire := false ;
7091: LD_ADDR_EXP 36
7095: PUSH
7096: LD_INT 0
7098: ST_TO_ADDR
// sRefresh := false ;
7099: LD_ADDR_EXP 37
7103: PUSH
7104: LD_INT 0
7106: ST_TO_ADDR
// sExp := false ;
7107: LD_ADDR_EXP 38
7111: PUSH
7112: LD_INT 0
7114: ST_TO_ADDR
// sDepot := false ;
7115: LD_ADDR_EXP 39
7119: PUSH
7120: LD_INT 0
7122: ST_TO_ADDR
// sFlag := false ;
7123: LD_ADDR_EXP 40
7127: PUSH
7128: LD_INT 0
7130: ST_TO_ADDR
// sKamikadze := false ;
7131: LD_ADDR_EXP 48
7135: PUSH
7136: LD_INT 0
7138: ST_TO_ADDR
// sTroll := false ;
7139: LD_ADDR_EXP 49
7143: PUSH
7144: LD_INT 0
7146: ST_TO_ADDR
// sSlow := false ;
7147: LD_ADDR_EXP 50
7151: PUSH
7152: LD_INT 0
7154: ST_TO_ADDR
// sLack := false ;
7155: LD_ADDR_EXP 51
7159: PUSH
7160: LD_INT 0
7162: ST_TO_ADDR
// sTank := false ;
7163: LD_ADDR_EXP 53
7167: PUSH
7168: LD_INT 0
7170: ST_TO_ADDR
// sRemote := false ;
7171: LD_ADDR_EXP 54
7175: PUSH
7176: LD_INT 0
7178: ST_TO_ADDR
// sPowell := false ;
7179: LD_ADDR_EXP 55
7183: PUSH
7184: LD_INT 0
7186: ST_TO_ADDR
// sTeleport := false ;
7187: LD_ADDR_EXP 58
7191: PUSH
7192: LD_INT 0
7194: ST_TO_ADDR
// sOilTower := false ;
7195: LD_ADDR_EXP 60
7199: PUSH
7200: LD_INT 0
7202: ST_TO_ADDR
// sShovel := false ;
7203: LD_ADDR_EXP 61
7207: PUSH
7208: LD_INT 0
7210: ST_TO_ADDR
// sSheik := false ;
7211: LD_ADDR_EXP 62
7215: PUSH
7216: LD_INT 0
7218: ST_TO_ADDR
// sEarthquake := false ;
7219: LD_ADDR_EXP 64
7223: PUSH
7224: LD_INT 0
7226: ST_TO_ADDR
// sAI := false ;
7227: LD_ADDR_EXP 65
7231: PUSH
7232: LD_INT 0
7234: ST_TO_ADDR
// sCargo := false ;
7235: LD_ADDR_EXP 68
7239: PUSH
7240: LD_INT 0
7242: ST_TO_ADDR
// sDLaser := false ;
7243: LD_ADDR_EXP 69
7247: PUSH
7248: LD_INT 0
7250: ST_TO_ADDR
// sExchange := false ;
7251: LD_ADDR_EXP 70
7255: PUSH
7256: LD_INT 0
7258: ST_TO_ADDR
// sFac := false ;
7259: LD_ADDR_EXP 71
7263: PUSH
7264: LD_INT 0
7266: ST_TO_ADDR
// sPower := false ;
7267: LD_ADDR_EXP 72
7271: PUSH
7272: LD_INT 0
7274: ST_TO_ADDR
// sRandom := false ;
7275: LD_ADDR_EXP 73
7279: PUSH
7280: LD_INT 0
7282: ST_TO_ADDR
// sShield := false ;
7283: LD_ADDR_EXP 74
7287: PUSH
7288: LD_INT 0
7290: ST_TO_ADDR
// sTime := false ;
7291: LD_ADDR_EXP 75
7295: PUSH
7296: LD_INT 0
7298: ST_TO_ADDR
// sTools := false ;
7299: LD_ADDR_EXP 76
7303: PUSH
7304: LD_INT 0
7306: ST_TO_ADDR
// sSold := false ;
7307: LD_ADDR_EXP 41
7311: PUSH
7312: LD_INT 0
7314: ST_TO_ADDR
// sDiff := false ;
7315: LD_ADDR_EXP 42
7319: PUSH
7320: LD_INT 0
7322: ST_TO_ADDR
// sFog := false ;
7323: LD_ADDR_EXP 45
7327: PUSH
7328: LD_INT 0
7330: ST_TO_ADDR
// sReset := false ;
7331: LD_ADDR_EXP 46
7335: PUSH
7336: LD_INT 0
7338: ST_TO_ADDR
// sSun := false ;
7339: LD_ADDR_EXP 47
7343: PUSH
7344: LD_INT 0
7346: ST_TO_ADDR
// sTiger := false ;
7347: LD_ADDR_EXP 43
7351: PUSH
7352: LD_INT 0
7354: ST_TO_ADDR
// sBomb := false ;
7355: LD_ADDR_EXP 44
7359: PUSH
7360: LD_INT 0
7362: ST_TO_ADDR
// sWound := false ;
7363: LD_ADDR_EXP 52
7367: PUSH
7368: LD_INT 0
7370: ST_TO_ADDR
// sBetray := false ;
7371: LD_ADDR_EXP 56
7375: PUSH
7376: LD_INT 0
7378: ST_TO_ADDR
// sContamin := false ;
7379: LD_ADDR_EXP 57
7383: PUSH
7384: LD_INT 0
7386: ST_TO_ADDR
// sOil := false ;
7387: LD_ADDR_EXP 59
7391: PUSH
7392: LD_INT 0
7394: ST_TO_ADDR
// sStu := false ;
7395: LD_ADDR_EXP 63
7399: PUSH
7400: LD_INT 0
7402: ST_TO_ADDR
// sBazooka := false ;
7403: LD_ADDR_EXP 66
7407: PUSH
7408: LD_INT 0
7410: ST_TO_ADDR
// sMortar := false ;
7411: LD_ADDR_EXP 67
7415: PUSH
7416: LD_INT 0
7418: ST_TO_ADDR
// sRanger := false ;
7419: LD_ADDR_EXP 77
7423: PUSH
7424: LD_INT 0
7426: ST_TO_ADDR
// sComputer := false ;
7427: LD_ADDR_EXP 78
7431: PUSH
7432: LD_INT 0
7434: ST_TO_ADDR
// s30 := false ;
7435: LD_ADDR_EXP 79
7439: PUSH
7440: LD_INT 0
7442: ST_TO_ADDR
// s60 := false ;
7443: LD_ADDR_EXP 80
7447: PUSH
7448: LD_INT 0
7450: ST_TO_ADDR
// end ;
7451: LD_VAR 0 1
7455: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7456: LD_INT 0
7458: PPUSH
7459: PPUSH
7460: PPUSH
7461: PPUSH
7462: PPUSH
7463: PPUSH
7464: PPUSH
// result := [ ] ;
7465: LD_ADDR_VAR 0 2
7469: PUSH
7470: EMPTY
7471: ST_TO_ADDR
// if campaign_id = 1 then
7472: LD_OWVAR 69
7476: PUSH
7477: LD_INT 1
7479: EQUAL
7480: IFFALSE 10646
// begin case mission_number of 1 :
7482: LD_OWVAR 70
7486: PUSH
7487: LD_INT 1
7489: DOUBLE
7490: EQUAL
7491: IFTRUE 7495
7493: GO 7571
7495: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7496: LD_ADDR_VAR 0 2
7500: PUSH
7501: LD_INT 2
7503: PUSH
7504: LD_INT 4
7506: PUSH
7507: LD_INT 11
7509: PUSH
7510: LD_INT 12
7512: PUSH
7513: LD_INT 15
7515: PUSH
7516: LD_INT 16
7518: PUSH
7519: LD_INT 22
7521: PUSH
7522: LD_INT 23
7524: PUSH
7525: LD_INT 26
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: PUSH
7539: LD_INT 101
7541: PUSH
7542: LD_INT 102
7544: PUSH
7545: LD_INT 106
7547: PUSH
7548: LD_INT 116
7550: PUSH
7551: LD_INT 117
7553: PUSH
7554: LD_INT 118
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: ST_TO_ADDR
7569: GO 10644
7571: LD_INT 2
7573: DOUBLE
7574: EQUAL
7575: IFTRUE 7579
7577: GO 7663
7579: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7580: LD_ADDR_VAR 0 2
7584: PUSH
7585: LD_INT 2
7587: PUSH
7588: LD_INT 4
7590: PUSH
7591: LD_INT 11
7593: PUSH
7594: LD_INT 12
7596: PUSH
7597: LD_INT 15
7599: PUSH
7600: LD_INT 16
7602: PUSH
7603: LD_INT 22
7605: PUSH
7606: LD_INT 23
7608: PUSH
7609: LD_INT 26
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: PUSH
7623: LD_INT 101
7625: PUSH
7626: LD_INT 102
7628: PUSH
7629: LD_INT 105
7631: PUSH
7632: LD_INT 106
7634: PUSH
7635: LD_INT 108
7637: PUSH
7638: LD_INT 116
7640: PUSH
7641: LD_INT 117
7643: PUSH
7644: LD_INT 118
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: ST_TO_ADDR
7661: GO 10644
7663: LD_INT 3
7665: DOUBLE
7666: EQUAL
7667: IFTRUE 7671
7669: GO 7759
7671: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7672: LD_ADDR_VAR 0 2
7676: PUSH
7677: LD_INT 2
7679: PUSH
7680: LD_INT 4
7682: PUSH
7683: LD_INT 5
7685: PUSH
7686: LD_INT 11
7688: PUSH
7689: LD_INT 12
7691: PUSH
7692: LD_INT 15
7694: PUSH
7695: LD_INT 16
7697: PUSH
7698: LD_INT 22
7700: PUSH
7701: LD_INT 26
7703: PUSH
7704: LD_INT 36
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: PUSH
7719: LD_INT 101
7721: PUSH
7722: LD_INT 102
7724: PUSH
7725: LD_INT 105
7727: PUSH
7728: LD_INT 106
7730: PUSH
7731: LD_INT 108
7733: PUSH
7734: LD_INT 116
7736: PUSH
7737: LD_INT 117
7739: PUSH
7740: LD_INT 118
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: ST_TO_ADDR
7757: GO 10644
7759: LD_INT 4
7761: DOUBLE
7762: EQUAL
7763: IFTRUE 7767
7765: GO 7863
7767: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7768: LD_ADDR_VAR 0 2
7772: PUSH
7773: LD_INT 2
7775: PUSH
7776: LD_INT 4
7778: PUSH
7779: LD_INT 5
7781: PUSH
7782: LD_INT 8
7784: PUSH
7785: LD_INT 11
7787: PUSH
7788: LD_INT 12
7790: PUSH
7791: LD_INT 15
7793: PUSH
7794: LD_INT 16
7796: PUSH
7797: LD_INT 22
7799: PUSH
7800: LD_INT 23
7802: PUSH
7803: LD_INT 26
7805: PUSH
7806: LD_INT 36
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: PUSH
7823: LD_INT 101
7825: PUSH
7826: LD_INT 102
7828: PUSH
7829: LD_INT 105
7831: PUSH
7832: LD_INT 106
7834: PUSH
7835: LD_INT 108
7837: PUSH
7838: LD_INT 116
7840: PUSH
7841: LD_INT 117
7843: PUSH
7844: LD_INT 118
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: PUSH
7857: EMPTY
7858: LIST
7859: LIST
7860: ST_TO_ADDR
7861: GO 10644
7863: LD_INT 5
7865: DOUBLE
7866: EQUAL
7867: IFTRUE 7871
7869: GO 7983
7871: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7872: LD_ADDR_VAR 0 2
7876: PUSH
7877: LD_INT 2
7879: PUSH
7880: LD_INT 4
7882: PUSH
7883: LD_INT 5
7885: PUSH
7886: LD_INT 6
7888: PUSH
7889: LD_INT 8
7891: PUSH
7892: LD_INT 11
7894: PUSH
7895: LD_INT 12
7897: PUSH
7898: LD_INT 15
7900: PUSH
7901: LD_INT 16
7903: PUSH
7904: LD_INT 22
7906: PUSH
7907: LD_INT 23
7909: PUSH
7910: LD_INT 25
7912: PUSH
7913: LD_INT 26
7915: PUSH
7916: LD_INT 36
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: PUSH
7935: LD_INT 101
7937: PUSH
7938: LD_INT 102
7940: PUSH
7941: LD_INT 105
7943: PUSH
7944: LD_INT 106
7946: PUSH
7947: LD_INT 108
7949: PUSH
7950: LD_INT 109
7952: PUSH
7953: LD_INT 112
7955: PUSH
7956: LD_INT 116
7958: PUSH
7959: LD_INT 117
7961: PUSH
7962: LD_INT 118
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: LIST
7973: LIST
7974: LIST
7975: LIST
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: ST_TO_ADDR
7981: GO 10644
7983: LD_INT 6
7985: DOUBLE
7986: EQUAL
7987: IFTRUE 7991
7989: GO 8123
7991: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7992: LD_ADDR_VAR 0 2
7996: PUSH
7997: LD_INT 2
7999: PUSH
8000: LD_INT 4
8002: PUSH
8003: LD_INT 5
8005: PUSH
8006: LD_INT 6
8008: PUSH
8009: LD_INT 8
8011: PUSH
8012: LD_INT 11
8014: PUSH
8015: LD_INT 12
8017: PUSH
8018: LD_INT 15
8020: PUSH
8021: LD_INT 16
8023: PUSH
8024: LD_INT 20
8026: PUSH
8027: LD_INT 21
8029: PUSH
8030: LD_INT 22
8032: PUSH
8033: LD_INT 23
8035: PUSH
8036: LD_INT 25
8038: PUSH
8039: LD_INT 26
8041: PUSH
8042: LD_INT 30
8044: PUSH
8045: LD_INT 31
8047: PUSH
8048: LD_INT 32
8050: PUSH
8051: LD_INT 36
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: PUSH
8075: LD_INT 101
8077: PUSH
8078: LD_INT 102
8080: PUSH
8081: LD_INT 105
8083: PUSH
8084: LD_INT 106
8086: PUSH
8087: LD_INT 108
8089: PUSH
8090: LD_INT 109
8092: PUSH
8093: LD_INT 112
8095: PUSH
8096: LD_INT 116
8098: PUSH
8099: LD_INT 117
8101: PUSH
8102: LD_INT 118
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: PUSH
8117: EMPTY
8118: LIST
8119: LIST
8120: ST_TO_ADDR
8121: GO 10644
8123: LD_INT 7
8125: DOUBLE
8126: EQUAL
8127: IFTRUE 8131
8129: GO 8243
8131: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8132: LD_ADDR_VAR 0 2
8136: PUSH
8137: LD_INT 2
8139: PUSH
8140: LD_INT 4
8142: PUSH
8143: LD_INT 5
8145: PUSH
8146: LD_INT 7
8148: PUSH
8149: LD_INT 11
8151: PUSH
8152: LD_INT 12
8154: PUSH
8155: LD_INT 15
8157: PUSH
8158: LD_INT 16
8160: PUSH
8161: LD_INT 20
8163: PUSH
8164: LD_INT 21
8166: PUSH
8167: LD_INT 22
8169: PUSH
8170: LD_INT 23
8172: PUSH
8173: LD_INT 25
8175: PUSH
8176: LD_INT 26
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: PUSH
8195: LD_INT 101
8197: PUSH
8198: LD_INT 102
8200: PUSH
8201: LD_INT 103
8203: PUSH
8204: LD_INT 105
8206: PUSH
8207: LD_INT 106
8209: PUSH
8210: LD_INT 108
8212: PUSH
8213: LD_INT 112
8215: PUSH
8216: LD_INT 116
8218: PUSH
8219: LD_INT 117
8221: PUSH
8222: LD_INT 118
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: ST_TO_ADDR
8241: GO 10644
8243: LD_INT 8
8245: DOUBLE
8246: EQUAL
8247: IFTRUE 8251
8249: GO 8391
8251: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8252: LD_ADDR_VAR 0 2
8256: PUSH
8257: LD_INT 2
8259: PUSH
8260: LD_INT 4
8262: PUSH
8263: LD_INT 5
8265: PUSH
8266: LD_INT 6
8268: PUSH
8269: LD_INT 7
8271: PUSH
8272: LD_INT 8
8274: PUSH
8275: LD_INT 11
8277: PUSH
8278: LD_INT 12
8280: PUSH
8281: LD_INT 15
8283: PUSH
8284: LD_INT 16
8286: PUSH
8287: LD_INT 20
8289: PUSH
8290: LD_INT 21
8292: PUSH
8293: LD_INT 22
8295: PUSH
8296: LD_INT 23
8298: PUSH
8299: LD_INT 25
8301: PUSH
8302: LD_INT 26
8304: PUSH
8305: LD_INT 30
8307: PUSH
8308: LD_INT 31
8310: PUSH
8311: LD_INT 32
8313: PUSH
8314: LD_INT 36
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: PUSH
8339: LD_INT 101
8341: PUSH
8342: LD_INT 102
8344: PUSH
8345: LD_INT 103
8347: PUSH
8348: LD_INT 105
8350: PUSH
8351: LD_INT 106
8353: PUSH
8354: LD_INT 108
8356: PUSH
8357: LD_INT 109
8359: PUSH
8360: LD_INT 112
8362: PUSH
8363: LD_INT 116
8365: PUSH
8366: LD_INT 117
8368: PUSH
8369: LD_INT 118
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: ST_TO_ADDR
8389: GO 10644
8391: LD_INT 9
8393: DOUBLE
8394: EQUAL
8395: IFTRUE 8399
8397: GO 8547
8399: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8400: LD_ADDR_VAR 0 2
8404: PUSH
8405: LD_INT 2
8407: PUSH
8408: LD_INT 4
8410: PUSH
8411: LD_INT 5
8413: PUSH
8414: LD_INT 6
8416: PUSH
8417: LD_INT 7
8419: PUSH
8420: LD_INT 8
8422: PUSH
8423: LD_INT 11
8425: PUSH
8426: LD_INT 12
8428: PUSH
8429: LD_INT 15
8431: PUSH
8432: LD_INT 16
8434: PUSH
8435: LD_INT 20
8437: PUSH
8438: LD_INT 21
8440: PUSH
8441: LD_INT 22
8443: PUSH
8444: LD_INT 23
8446: PUSH
8447: LD_INT 25
8449: PUSH
8450: LD_INT 26
8452: PUSH
8453: LD_INT 28
8455: PUSH
8456: LD_INT 30
8458: PUSH
8459: LD_INT 31
8461: PUSH
8462: LD_INT 32
8464: PUSH
8465: LD_INT 36
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: PUSH
8491: LD_INT 101
8493: PUSH
8494: LD_INT 102
8496: PUSH
8497: LD_INT 103
8499: PUSH
8500: LD_INT 105
8502: PUSH
8503: LD_INT 106
8505: PUSH
8506: LD_INT 108
8508: PUSH
8509: LD_INT 109
8511: PUSH
8512: LD_INT 112
8514: PUSH
8515: LD_INT 114
8517: PUSH
8518: LD_INT 116
8520: PUSH
8521: LD_INT 117
8523: PUSH
8524: LD_INT 118
8526: PUSH
8527: EMPTY
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: ST_TO_ADDR
8545: GO 10644
8547: LD_INT 10
8549: DOUBLE
8550: EQUAL
8551: IFTRUE 8555
8553: GO 8751
8555: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8556: LD_ADDR_VAR 0 2
8560: PUSH
8561: LD_INT 2
8563: PUSH
8564: LD_INT 4
8566: PUSH
8567: LD_INT 5
8569: PUSH
8570: LD_INT 6
8572: PUSH
8573: LD_INT 7
8575: PUSH
8576: LD_INT 8
8578: PUSH
8579: LD_INT 9
8581: PUSH
8582: LD_INT 10
8584: PUSH
8585: LD_INT 11
8587: PUSH
8588: LD_INT 12
8590: PUSH
8591: LD_INT 13
8593: PUSH
8594: LD_INT 14
8596: PUSH
8597: LD_INT 15
8599: PUSH
8600: LD_INT 16
8602: PUSH
8603: LD_INT 17
8605: PUSH
8606: LD_INT 18
8608: PUSH
8609: LD_INT 19
8611: PUSH
8612: LD_INT 20
8614: PUSH
8615: LD_INT 21
8617: PUSH
8618: LD_INT 22
8620: PUSH
8621: LD_INT 23
8623: PUSH
8624: LD_INT 24
8626: PUSH
8627: LD_INT 25
8629: PUSH
8630: LD_INT 26
8632: PUSH
8633: LD_INT 28
8635: PUSH
8636: LD_INT 30
8638: PUSH
8639: LD_INT 31
8641: PUSH
8642: LD_INT 32
8644: PUSH
8645: LD_INT 36
8647: PUSH
8648: EMPTY
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: PUSH
8679: LD_INT 101
8681: PUSH
8682: LD_INT 102
8684: PUSH
8685: LD_INT 103
8687: PUSH
8688: LD_INT 104
8690: PUSH
8691: LD_INT 105
8693: PUSH
8694: LD_INT 106
8696: PUSH
8697: LD_INT 107
8699: PUSH
8700: LD_INT 108
8702: PUSH
8703: LD_INT 109
8705: PUSH
8706: LD_INT 110
8708: PUSH
8709: LD_INT 111
8711: PUSH
8712: LD_INT 112
8714: PUSH
8715: LD_INT 114
8717: PUSH
8718: LD_INT 116
8720: PUSH
8721: LD_INT 117
8723: PUSH
8724: LD_INT 118
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: ST_TO_ADDR
8749: GO 10644
8751: LD_INT 11
8753: DOUBLE
8754: EQUAL
8755: IFTRUE 8759
8757: GO 8963
8759: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8760: LD_ADDR_VAR 0 2
8764: PUSH
8765: LD_INT 2
8767: PUSH
8768: LD_INT 3
8770: PUSH
8771: LD_INT 4
8773: PUSH
8774: LD_INT 5
8776: PUSH
8777: LD_INT 6
8779: PUSH
8780: LD_INT 7
8782: PUSH
8783: LD_INT 8
8785: PUSH
8786: LD_INT 9
8788: PUSH
8789: LD_INT 10
8791: PUSH
8792: LD_INT 11
8794: PUSH
8795: LD_INT 12
8797: PUSH
8798: LD_INT 13
8800: PUSH
8801: LD_INT 14
8803: PUSH
8804: LD_INT 15
8806: PUSH
8807: LD_INT 16
8809: PUSH
8810: LD_INT 17
8812: PUSH
8813: LD_INT 18
8815: PUSH
8816: LD_INT 19
8818: PUSH
8819: LD_INT 20
8821: PUSH
8822: LD_INT 21
8824: PUSH
8825: LD_INT 22
8827: PUSH
8828: LD_INT 23
8830: PUSH
8831: LD_INT 24
8833: PUSH
8834: LD_INT 25
8836: PUSH
8837: LD_INT 26
8839: PUSH
8840: LD_INT 28
8842: PUSH
8843: LD_INT 30
8845: PUSH
8846: LD_INT 31
8848: PUSH
8849: LD_INT 32
8851: PUSH
8852: LD_INT 34
8854: PUSH
8855: LD_INT 36
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: PUSH
8891: LD_INT 101
8893: PUSH
8894: LD_INT 102
8896: PUSH
8897: LD_INT 103
8899: PUSH
8900: LD_INT 104
8902: PUSH
8903: LD_INT 105
8905: PUSH
8906: LD_INT 106
8908: PUSH
8909: LD_INT 107
8911: PUSH
8912: LD_INT 108
8914: PUSH
8915: LD_INT 109
8917: PUSH
8918: LD_INT 110
8920: PUSH
8921: LD_INT 111
8923: PUSH
8924: LD_INT 112
8926: PUSH
8927: LD_INT 114
8929: PUSH
8930: LD_INT 116
8932: PUSH
8933: LD_INT 117
8935: PUSH
8936: LD_INT 118
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: ST_TO_ADDR
8961: GO 10644
8963: LD_INT 12
8965: DOUBLE
8966: EQUAL
8967: IFTRUE 8971
8969: GO 9191
8971: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8972: LD_ADDR_VAR 0 2
8976: PUSH
8977: LD_INT 1
8979: PUSH
8980: LD_INT 2
8982: PUSH
8983: LD_INT 3
8985: PUSH
8986: LD_INT 4
8988: PUSH
8989: LD_INT 5
8991: PUSH
8992: LD_INT 6
8994: PUSH
8995: LD_INT 7
8997: PUSH
8998: LD_INT 8
9000: PUSH
9001: LD_INT 9
9003: PUSH
9004: LD_INT 10
9006: PUSH
9007: LD_INT 11
9009: PUSH
9010: LD_INT 12
9012: PUSH
9013: LD_INT 13
9015: PUSH
9016: LD_INT 14
9018: PUSH
9019: LD_INT 15
9021: PUSH
9022: LD_INT 16
9024: PUSH
9025: LD_INT 17
9027: PUSH
9028: LD_INT 18
9030: PUSH
9031: LD_INT 19
9033: PUSH
9034: LD_INT 20
9036: PUSH
9037: LD_INT 21
9039: PUSH
9040: LD_INT 22
9042: PUSH
9043: LD_INT 23
9045: PUSH
9046: LD_INT 24
9048: PUSH
9049: LD_INT 25
9051: PUSH
9052: LD_INT 26
9054: PUSH
9055: LD_INT 27
9057: PUSH
9058: LD_INT 28
9060: PUSH
9061: LD_INT 30
9063: PUSH
9064: LD_INT 31
9066: PUSH
9067: LD_INT 32
9069: PUSH
9070: LD_INT 33
9072: PUSH
9073: LD_INT 34
9075: PUSH
9076: LD_INT 36
9078: PUSH
9079: EMPTY
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: PUSH
9115: LD_INT 101
9117: PUSH
9118: LD_INT 102
9120: PUSH
9121: LD_INT 103
9123: PUSH
9124: LD_INT 104
9126: PUSH
9127: LD_INT 105
9129: PUSH
9130: LD_INT 106
9132: PUSH
9133: LD_INT 107
9135: PUSH
9136: LD_INT 108
9138: PUSH
9139: LD_INT 109
9141: PUSH
9142: LD_INT 110
9144: PUSH
9145: LD_INT 111
9147: PUSH
9148: LD_INT 112
9150: PUSH
9151: LD_INT 113
9153: PUSH
9154: LD_INT 114
9156: PUSH
9157: LD_INT 116
9159: PUSH
9160: LD_INT 117
9162: PUSH
9163: LD_INT 118
9165: PUSH
9166: EMPTY
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: ST_TO_ADDR
9189: GO 10644
9191: LD_INT 13
9193: DOUBLE
9194: EQUAL
9195: IFTRUE 9199
9197: GO 9407
9199: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9200: LD_ADDR_VAR 0 2
9204: PUSH
9205: LD_INT 1
9207: PUSH
9208: LD_INT 2
9210: PUSH
9211: LD_INT 3
9213: PUSH
9214: LD_INT 4
9216: PUSH
9217: LD_INT 5
9219: PUSH
9220: LD_INT 8
9222: PUSH
9223: LD_INT 9
9225: PUSH
9226: LD_INT 10
9228: PUSH
9229: LD_INT 11
9231: PUSH
9232: LD_INT 12
9234: PUSH
9235: LD_INT 14
9237: PUSH
9238: LD_INT 15
9240: PUSH
9241: LD_INT 16
9243: PUSH
9244: LD_INT 17
9246: PUSH
9247: LD_INT 18
9249: PUSH
9250: LD_INT 19
9252: PUSH
9253: LD_INT 20
9255: PUSH
9256: LD_INT 21
9258: PUSH
9259: LD_INT 22
9261: PUSH
9262: LD_INT 23
9264: PUSH
9265: LD_INT 24
9267: PUSH
9268: LD_INT 25
9270: PUSH
9271: LD_INT 26
9273: PUSH
9274: LD_INT 27
9276: PUSH
9277: LD_INT 28
9279: PUSH
9280: LD_INT 30
9282: PUSH
9283: LD_INT 31
9285: PUSH
9286: LD_INT 32
9288: PUSH
9289: LD_INT 33
9291: PUSH
9292: LD_INT 34
9294: PUSH
9295: LD_INT 36
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: PUSH
9331: LD_INT 101
9333: PUSH
9334: LD_INT 102
9336: PUSH
9337: LD_INT 103
9339: PUSH
9340: LD_INT 104
9342: PUSH
9343: LD_INT 105
9345: PUSH
9346: LD_INT 106
9348: PUSH
9349: LD_INT 107
9351: PUSH
9352: LD_INT 108
9354: PUSH
9355: LD_INT 109
9357: PUSH
9358: LD_INT 110
9360: PUSH
9361: LD_INT 111
9363: PUSH
9364: LD_INT 112
9366: PUSH
9367: LD_INT 113
9369: PUSH
9370: LD_INT 114
9372: PUSH
9373: LD_INT 116
9375: PUSH
9376: LD_INT 117
9378: PUSH
9379: LD_INT 118
9381: PUSH
9382: EMPTY
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: ST_TO_ADDR
9405: GO 10644
9407: LD_INT 14
9409: DOUBLE
9410: EQUAL
9411: IFTRUE 9415
9413: GO 9639
9415: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9416: LD_ADDR_VAR 0 2
9420: PUSH
9421: LD_INT 1
9423: PUSH
9424: LD_INT 2
9426: PUSH
9427: LD_INT 3
9429: PUSH
9430: LD_INT 4
9432: PUSH
9433: LD_INT 5
9435: PUSH
9436: LD_INT 6
9438: PUSH
9439: LD_INT 7
9441: PUSH
9442: LD_INT 8
9444: PUSH
9445: LD_INT 9
9447: PUSH
9448: LD_INT 10
9450: PUSH
9451: LD_INT 11
9453: PUSH
9454: LD_INT 12
9456: PUSH
9457: LD_INT 13
9459: PUSH
9460: LD_INT 14
9462: PUSH
9463: LD_INT 15
9465: PUSH
9466: LD_INT 16
9468: PUSH
9469: LD_INT 17
9471: PUSH
9472: LD_INT 18
9474: PUSH
9475: LD_INT 19
9477: PUSH
9478: LD_INT 20
9480: PUSH
9481: LD_INT 21
9483: PUSH
9484: LD_INT 22
9486: PUSH
9487: LD_INT 23
9489: PUSH
9490: LD_INT 24
9492: PUSH
9493: LD_INT 25
9495: PUSH
9496: LD_INT 26
9498: PUSH
9499: LD_INT 27
9501: PUSH
9502: LD_INT 28
9504: PUSH
9505: LD_INT 29
9507: PUSH
9508: LD_INT 30
9510: PUSH
9511: LD_INT 31
9513: PUSH
9514: LD_INT 32
9516: PUSH
9517: LD_INT 33
9519: PUSH
9520: LD_INT 34
9522: PUSH
9523: LD_INT 36
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: PUSH
9563: LD_INT 101
9565: PUSH
9566: LD_INT 102
9568: PUSH
9569: LD_INT 103
9571: PUSH
9572: LD_INT 104
9574: PUSH
9575: LD_INT 105
9577: PUSH
9578: LD_INT 106
9580: PUSH
9581: LD_INT 107
9583: PUSH
9584: LD_INT 108
9586: PUSH
9587: LD_INT 109
9589: PUSH
9590: LD_INT 110
9592: PUSH
9593: LD_INT 111
9595: PUSH
9596: LD_INT 112
9598: PUSH
9599: LD_INT 113
9601: PUSH
9602: LD_INT 114
9604: PUSH
9605: LD_INT 116
9607: PUSH
9608: LD_INT 117
9610: PUSH
9611: LD_INT 118
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: ST_TO_ADDR
9637: GO 10644
9639: LD_INT 15
9641: DOUBLE
9642: EQUAL
9643: IFTRUE 9647
9645: GO 9871
9647: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9648: LD_ADDR_VAR 0 2
9652: PUSH
9653: LD_INT 1
9655: PUSH
9656: LD_INT 2
9658: PUSH
9659: LD_INT 3
9661: PUSH
9662: LD_INT 4
9664: PUSH
9665: LD_INT 5
9667: PUSH
9668: LD_INT 6
9670: PUSH
9671: LD_INT 7
9673: PUSH
9674: LD_INT 8
9676: PUSH
9677: LD_INT 9
9679: PUSH
9680: LD_INT 10
9682: PUSH
9683: LD_INT 11
9685: PUSH
9686: LD_INT 12
9688: PUSH
9689: LD_INT 13
9691: PUSH
9692: LD_INT 14
9694: PUSH
9695: LD_INT 15
9697: PUSH
9698: LD_INT 16
9700: PUSH
9701: LD_INT 17
9703: PUSH
9704: LD_INT 18
9706: PUSH
9707: LD_INT 19
9709: PUSH
9710: LD_INT 20
9712: PUSH
9713: LD_INT 21
9715: PUSH
9716: LD_INT 22
9718: PUSH
9719: LD_INT 23
9721: PUSH
9722: LD_INT 24
9724: PUSH
9725: LD_INT 25
9727: PUSH
9728: LD_INT 26
9730: PUSH
9731: LD_INT 27
9733: PUSH
9734: LD_INT 28
9736: PUSH
9737: LD_INT 29
9739: PUSH
9740: LD_INT 30
9742: PUSH
9743: LD_INT 31
9745: PUSH
9746: LD_INT 32
9748: PUSH
9749: LD_INT 33
9751: PUSH
9752: LD_INT 34
9754: PUSH
9755: LD_INT 36
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: PUSH
9795: LD_INT 101
9797: PUSH
9798: LD_INT 102
9800: PUSH
9801: LD_INT 103
9803: PUSH
9804: LD_INT 104
9806: PUSH
9807: LD_INT 105
9809: PUSH
9810: LD_INT 106
9812: PUSH
9813: LD_INT 107
9815: PUSH
9816: LD_INT 108
9818: PUSH
9819: LD_INT 109
9821: PUSH
9822: LD_INT 110
9824: PUSH
9825: LD_INT 111
9827: PUSH
9828: LD_INT 112
9830: PUSH
9831: LD_INT 113
9833: PUSH
9834: LD_INT 114
9836: PUSH
9837: LD_INT 116
9839: PUSH
9840: LD_INT 117
9842: PUSH
9843: LD_INT 118
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: ST_TO_ADDR
9869: GO 10644
9871: LD_INT 16
9873: DOUBLE
9874: EQUAL
9875: IFTRUE 9879
9877: GO 10015
9879: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9880: LD_ADDR_VAR 0 2
9884: PUSH
9885: LD_INT 2
9887: PUSH
9888: LD_INT 4
9890: PUSH
9891: LD_INT 5
9893: PUSH
9894: LD_INT 7
9896: PUSH
9897: LD_INT 11
9899: PUSH
9900: LD_INT 12
9902: PUSH
9903: LD_INT 15
9905: PUSH
9906: LD_INT 16
9908: PUSH
9909: LD_INT 20
9911: PUSH
9912: LD_INT 21
9914: PUSH
9915: LD_INT 22
9917: PUSH
9918: LD_INT 23
9920: PUSH
9921: LD_INT 25
9923: PUSH
9924: LD_INT 26
9926: PUSH
9927: LD_INT 30
9929: PUSH
9930: LD_INT 31
9932: PUSH
9933: LD_INT 32
9935: PUSH
9936: LD_INT 33
9938: PUSH
9939: LD_INT 34
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: PUSH
9963: LD_INT 101
9965: PUSH
9966: LD_INT 102
9968: PUSH
9969: LD_INT 103
9971: PUSH
9972: LD_INT 106
9974: PUSH
9975: LD_INT 108
9977: PUSH
9978: LD_INT 112
9980: PUSH
9981: LD_INT 113
9983: PUSH
9984: LD_INT 114
9986: PUSH
9987: LD_INT 116
9989: PUSH
9990: LD_INT 117
9992: PUSH
9993: LD_INT 118
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: ST_TO_ADDR
10013: GO 10644
10015: LD_INT 17
10017: DOUBLE
10018: EQUAL
10019: IFTRUE 10023
10021: GO 10247
10023: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
10024: LD_ADDR_VAR 0 2
10028: PUSH
10029: LD_INT 1
10031: PUSH
10032: LD_INT 2
10034: PUSH
10035: LD_INT 3
10037: PUSH
10038: LD_INT 4
10040: PUSH
10041: LD_INT 5
10043: PUSH
10044: LD_INT 6
10046: PUSH
10047: LD_INT 7
10049: PUSH
10050: LD_INT 8
10052: PUSH
10053: LD_INT 9
10055: PUSH
10056: LD_INT 10
10058: PUSH
10059: LD_INT 11
10061: PUSH
10062: LD_INT 12
10064: PUSH
10065: LD_INT 13
10067: PUSH
10068: LD_INT 14
10070: PUSH
10071: LD_INT 15
10073: PUSH
10074: LD_INT 16
10076: PUSH
10077: LD_INT 17
10079: PUSH
10080: LD_INT 18
10082: PUSH
10083: LD_INT 19
10085: PUSH
10086: LD_INT 20
10088: PUSH
10089: LD_INT 21
10091: PUSH
10092: LD_INT 22
10094: PUSH
10095: LD_INT 23
10097: PUSH
10098: LD_INT 24
10100: PUSH
10101: LD_INT 25
10103: PUSH
10104: LD_INT 26
10106: PUSH
10107: LD_INT 27
10109: PUSH
10110: LD_INT 28
10112: PUSH
10113: LD_INT 29
10115: PUSH
10116: LD_INT 30
10118: PUSH
10119: LD_INT 31
10121: PUSH
10122: LD_INT 32
10124: PUSH
10125: LD_INT 33
10127: PUSH
10128: LD_INT 34
10130: PUSH
10131: LD_INT 36
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: PUSH
10171: LD_INT 101
10173: PUSH
10174: LD_INT 102
10176: PUSH
10177: LD_INT 103
10179: PUSH
10180: LD_INT 104
10182: PUSH
10183: LD_INT 105
10185: PUSH
10186: LD_INT 106
10188: PUSH
10189: LD_INT 107
10191: PUSH
10192: LD_INT 108
10194: PUSH
10195: LD_INT 109
10197: PUSH
10198: LD_INT 110
10200: PUSH
10201: LD_INT 111
10203: PUSH
10204: LD_INT 112
10206: PUSH
10207: LD_INT 113
10209: PUSH
10210: LD_INT 114
10212: PUSH
10213: LD_INT 116
10215: PUSH
10216: LD_INT 117
10218: PUSH
10219: LD_INT 118
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: ST_TO_ADDR
10245: GO 10644
10247: LD_INT 18
10249: DOUBLE
10250: EQUAL
10251: IFTRUE 10255
10253: GO 10403
10255: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10256: LD_ADDR_VAR 0 2
10260: PUSH
10261: LD_INT 2
10263: PUSH
10264: LD_INT 4
10266: PUSH
10267: LD_INT 5
10269: PUSH
10270: LD_INT 7
10272: PUSH
10273: LD_INT 11
10275: PUSH
10276: LD_INT 12
10278: PUSH
10279: LD_INT 15
10281: PUSH
10282: LD_INT 16
10284: PUSH
10285: LD_INT 20
10287: PUSH
10288: LD_INT 21
10290: PUSH
10291: LD_INT 22
10293: PUSH
10294: LD_INT 23
10296: PUSH
10297: LD_INT 25
10299: PUSH
10300: LD_INT 26
10302: PUSH
10303: LD_INT 30
10305: PUSH
10306: LD_INT 31
10308: PUSH
10309: LD_INT 32
10311: PUSH
10312: LD_INT 33
10314: PUSH
10315: LD_INT 34
10317: PUSH
10318: LD_INT 35
10320: PUSH
10321: LD_INT 36
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: PUSH
10347: LD_INT 101
10349: PUSH
10350: LD_INT 102
10352: PUSH
10353: LD_INT 103
10355: PUSH
10356: LD_INT 106
10358: PUSH
10359: LD_INT 108
10361: PUSH
10362: LD_INT 112
10364: PUSH
10365: LD_INT 113
10367: PUSH
10368: LD_INT 114
10370: PUSH
10371: LD_INT 115
10373: PUSH
10374: LD_INT 116
10376: PUSH
10377: LD_INT 117
10379: PUSH
10380: LD_INT 118
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: ST_TO_ADDR
10401: GO 10644
10403: LD_INT 19
10405: DOUBLE
10406: EQUAL
10407: IFTRUE 10411
10409: GO 10643
10411: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10412: LD_ADDR_VAR 0 2
10416: PUSH
10417: LD_INT 1
10419: PUSH
10420: LD_INT 2
10422: PUSH
10423: LD_INT 3
10425: PUSH
10426: LD_INT 4
10428: PUSH
10429: LD_INT 5
10431: PUSH
10432: LD_INT 6
10434: PUSH
10435: LD_INT 7
10437: PUSH
10438: LD_INT 8
10440: PUSH
10441: LD_INT 9
10443: PUSH
10444: LD_INT 10
10446: PUSH
10447: LD_INT 11
10449: PUSH
10450: LD_INT 12
10452: PUSH
10453: LD_INT 13
10455: PUSH
10456: LD_INT 14
10458: PUSH
10459: LD_INT 15
10461: PUSH
10462: LD_INT 16
10464: PUSH
10465: LD_INT 17
10467: PUSH
10468: LD_INT 18
10470: PUSH
10471: LD_INT 19
10473: PUSH
10474: LD_INT 20
10476: PUSH
10477: LD_INT 21
10479: PUSH
10480: LD_INT 22
10482: PUSH
10483: LD_INT 23
10485: PUSH
10486: LD_INT 24
10488: PUSH
10489: LD_INT 25
10491: PUSH
10492: LD_INT 26
10494: PUSH
10495: LD_INT 27
10497: PUSH
10498: LD_INT 28
10500: PUSH
10501: LD_INT 29
10503: PUSH
10504: LD_INT 30
10506: PUSH
10507: LD_INT 31
10509: PUSH
10510: LD_INT 32
10512: PUSH
10513: LD_INT 33
10515: PUSH
10516: LD_INT 34
10518: PUSH
10519: LD_INT 35
10521: PUSH
10522: LD_INT 36
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: PUSH
10563: LD_INT 101
10565: PUSH
10566: LD_INT 102
10568: PUSH
10569: LD_INT 103
10571: PUSH
10572: LD_INT 104
10574: PUSH
10575: LD_INT 105
10577: PUSH
10578: LD_INT 106
10580: PUSH
10581: LD_INT 107
10583: PUSH
10584: LD_INT 108
10586: PUSH
10587: LD_INT 109
10589: PUSH
10590: LD_INT 110
10592: PUSH
10593: LD_INT 111
10595: PUSH
10596: LD_INT 112
10598: PUSH
10599: LD_INT 113
10601: PUSH
10602: LD_INT 114
10604: PUSH
10605: LD_INT 115
10607: PUSH
10608: LD_INT 116
10610: PUSH
10611: LD_INT 117
10613: PUSH
10614: LD_INT 118
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: ST_TO_ADDR
10641: GO 10644
10643: POP
// end else
10644: GO 10875
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10646: LD_ADDR_VAR 0 2
10650: PUSH
10651: LD_INT 1
10653: PUSH
10654: LD_INT 2
10656: PUSH
10657: LD_INT 3
10659: PUSH
10660: LD_INT 4
10662: PUSH
10663: LD_INT 5
10665: PUSH
10666: LD_INT 6
10668: PUSH
10669: LD_INT 7
10671: PUSH
10672: LD_INT 8
10674: PUSH
10675: LD_INT 9
10677: PUSH
10678: LD_INT 10
10680: PUSH
10681: LD_INT 11
10683: PUSH
10684: LD_INT 12
10686: PUSH
10687: LD_INT 13
10689: PUSH
10690: LD_INT 14
10692: PUSH
10693: LD_INT 15
10695: PUSH
10696: LD_INT 16
10698: PUSH
10699: LD_INT 17
10701: PUSH
10702: LD_INT 18
10704: PUSH
10705: LD_INT 19
10707: PUSH
10708: LD_INT 20
10710: PUSH
10711: LD_INT 21
10713: PUSH
10714: LD_INT 22
10716: PUSH
10717: LD_INT 23
10719: PUSH
10720: LD_INT 24
10722: PUSH
10723: LD_INT 25
10725: PUSH
10726: LD_INT 26
10728: PUSH
10729: LD_INT 27
10731: PUSH
10732: LD_INT 28
10734: PUSH
10735: LD_INT 29
10737: PUSH
10738: LD_INT 30
10740: PUSH
10741: LD_INT 31
10743: PUSH
10744: LD_INT 32
10746: PUSH
10747: LD_INT 33
10749: PUSH
10750: LD_INT 34
10752: PUSH
10753: LD_INT 35
10755: PUSH
10756: LD_INT 36
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: PUSH
10797: LD_INT 101
10799: PUSH
10800: LD_INT 102
10802: PUSH
10803: LD_INT 103
10805: PUSH
10806: LD_INT 104
10808: PUSH
10809: LD_INT 105
10811: PUSH
10812: LD_INT 106
10814: PUSH
10815: LD_INT 107
10817: PUSH
10818: LD_INT 108
10820: PUSH
10821: LD_INT 109
10823: PUSH
10824: LD_INT 110
10826: PUSH
10827: LD_INT 111
10829: PUSH
10830: LD_INT 112
10832: PUSH
10833: LD_INT 113
10835: PUSH
10836: LD_INT 114
10838: PUSH
10839: LD_INT 115
10841: PUSH
10842: LD_INT 116
10844: PUSH
10845: LD_INT 117
10847: PUSH
10848: LD_INT 118
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: ST_TO_ADDR
// if result then
10875: LD_VAR 0 2
10879: IFFALSE 11665
// begin normal :=  ;
10881: LD_ADDR_VAR 0 5
10885: PUSH
10886: LD_STRING 
10888: ST_TO_ADDR
// hardcore :=  ;
10889: LD_ADDR_VAR 0 6
10893: PUSH
10894: LD_STRING 
10896: ST_TO_ADDR
// active :=  ;
10897: LD_ADDR_VAR 0 7
10901: PUSH
10902: LD_STRING 
10904: ST_TO_ADDR
// for i = 1 to normalCounter do
10905: LD_ADDR_VAR 0 8
10909: PUSH
10910: DOUBLE
10911: LD_INT 1
10913: DEC
10914: ST_TO_ADDR
10915: LD_EXP 25
10919: PUSH
10920: FOR_TO
10921: IFFALSE 11022
// begin tmp := 0 ;
10923: LD_ADDR_VAR 0 3
10927: PUSH
10928: LD_STRING 0
10930: ST_TO_ADDR
// if result [ 1 ] then
10931: LD_VAR 0 2
10935: PUSH
10936: LD_INT 1
10938: ARRAY
10939: IFFALSE 11004
// if result [ 1 ] [ 1 ] = i then
10941: LD_VAR 0 2
10945: PUSH
10946: LD_INT 1
10948: ARRAY
10949: PUSH
10950: LD_INT 1
10952: ARRAY
10953: PUSH
10954: LD_VAR 0 8
10958: EQUAL
10959: IFFALSE 11004
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10961: LD_ADDR_VAR 0 2
10965: PUSH
10966: LD_VAR 0 2
10970: PPUSH
10971: LD_INT 1
10973: PPUSH
10974: LD_VAR 0 2
10978: PUSH
10979: LD_INT 1
10981: ARRAY
10982: PPUSH
10983: LD_INT 1
10985: PPUSH
10986: CALL_OW 3
10990: PPUSH
10991: CALL_OW 1
10995: ST_TO_ADDR
// tmp := 1 ;
10996: LD_ADDR_VAR 0 3
11000: PUSH
11001: LD_STRING 1
11003: ST_TO_ADDR
// end ; normal := normal & tmp ;
11004: LD_ADDR_VAR 0 5
11008: PUSH
11009: LD_VAR 0 5
11013: PUSH
11014: LD_VAR 0 3
11018: STR
11019: ST_TO_ADDR
// end ;
11020: GO 10920
11022: POP
11023: POP
// for i = 1 to hardcoreCounter do
11024: LD_ADDR_VAR 0 8
11028: PUSH
11029: DOUBLE
11030: LD_INT 1
11032: DEC
11033: ST_TO_ADDR
11034: LD_EXP 26
11038: PUSH
11039: FOR_TO
11040: IFFALSE 11145
// begin tmp := 0 ;
11042: LD_ADDR_VAR 0 3
11046: PUSH
11047: LD_STRING 0
11049: ST_TO_ADDR
// if result [ 2 ] then
11050: LD_VAR 0 2
11054: PUSH
11055: LD_INT 2
11057: ARRAY
11058: IFFALSE 11127
// if result [ 2 ] [ 1 ] = 100 + i then
11060: LD_VAR 0 2
11064: PUSH
11065: LD_INT 2
11067: ARRAY
11068: PUSH
11069: LD_INT 1
11071: ARRAY
11072: PUSH
11073: LD_INT 100
11075: PUSH
11076: LD_VAR 0 8
11080: PLUS
11081: EQUAL
11082: IFFALSE 11127
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11084: LD_ADDR_VAR 0 2
11088: PUSH
11089: LD_VAR 0 2
11093: PPUSH
11094: LD_INT 2
11096: PPUSH
11097: LD_VAR 0 2
11101: PUSH
11102: LD_INT 2
11104: ARRAY
11105: PPUSH
11106: LD_INT 1
11108: PPUSH
11109: CALL_OW 3
11113: PPUSH
11114: CALL_OW 1
11118: ST_TO_ADDR
// tmp := 1 ;
11119: LD_ADDR_VAR 0 3
11123: PUSH
11124: LD_STRING 1
11126: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11127: LD_ADDR_VAR 0 6
11131: PUSH
11132: LD_VAR 0 6
11136: PUSH
11137: LD_VAR 0 3
11141: STR
11142: ST_TO_ADDR
// end ;
11143: GO 11039
11145: POP
11146: POP
// if isGameLoad then
11147: LD_VAR 0 1
11151: IFFALSE 11626
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
11153: LD_ADDR_VAR 0 4
11157: PUSH
11158: LD_EXP 29
11162: PUSH
11163: LD_EXP 28
11167: PUSH
11168: LD_EXP 30
11172: PUSH
11173: LD_EXP 27
11177: PUSH
11178: LD_EXP 31
11182: PUSH
11183: LD_EXP 32
11187: PUSH
11188: LD_EXP 33
11192: PUSH
11193: LD_EXP 34
11197: PUSH
11198: LD_EXP 35
11202: PUSH
11203: LD_EXP 36
11207: PUSH
11208: LD_EXP 37
11212: PUSH
11213: LD_EXP 38
11217: PUSH
11218: LD_EXP 39
11222: PUSH
11223: LD_EXP 40
11227: PUSH
11228: LD_EXP 48
11232: PUSH
11233: LD_EXP 49
11237: PUSH
11238: LD_EXP 50
11242: PUSH
11243: LD_EXP 51
11247: PUSH
11248: LD_EXP 53
11252: PUSH
11253: LD_EXP 54
11257: PUSH
11258: LD_EXP 55
11262: PUSH
11263: LD_EXP 58
11267: PUSH
11268: LD_EXP 60
11272: PUSH
11273: LD_EXP 61
11277: PUSH
11278: LD_EXP 62
11282: PUSH
11283: LD_EXP 64
11287: PUSH
11288: LD_EXP 65
11292: PUSH
11293: LD_EXP 68
11297: PUSH
11298: LD_EXP 69
11302: PUSH
11303: LD_EXP 70
11307: PUSH
11308: LD_EXP 71
11312: PUSH
11313: LD_EXP 72
11317: PUSH
11318: LD_EXP 73
11322: PUSH
11323: LD_EXP 74
11327: PUSH
11328: LD_EXP 75
11332: PUSH
11333: LD_EXP 76
11337: PUSH
11338: LD_EXP 41
11342: PUSH
11343: LD_EXP 42
11347: PUSH
11348: LD_EXP 45
11352: PUSH
11353: LD_EXP 46
11357: PUSH
11358: LD_EXP 47
11362: PUSH
11363: LD_EXP 43
11367: PUSH
11368: LD_EXP 44
11372: PUSH
11373: LD_EXP 52
11377: PUSH
11378: LD_EXP 56
11382: PUSH
11383: LD_EXP 57
11387: PUSH
11388: LD_EXP 59
11392: PUSH
11393: LD_EXP 63
11397: PUSH
11398: LD_EXP 66
11402: PUSH
11403: LD_EXP 67
11407: PUSH
11408: LD_EXP 77
11412: PUSH
11413: LD_EXP 78
11417: PUSH
11418: LD_EXP 79
11422: PUSH
11423: LD_EXP 80
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: ST_TO_ADDR
// tmp :=  ;
11484: LD_ADDR_VAR 0 3
11488: PUSH
11489: LD_STRING 
11491: ST_TO_ADDR
// for i = 1 to normalCounter do
11492: LD_ADDR_VAR 0 8
11496: PUSH
11497: DOUBLE
11498: LD_INT 1
11500: DEC
11501: ST_TO_ADDR
11502: LD_EXP 25
11506: PUSH
11507: FOR_TO
11508: IFFALSE 11544
// begin if flags [ i ] then
11510: LD_VAR 0 4
11514: PUSH
11515: LD_VAR 0 8
11519: ARRAY
11520: IFFALSE 11542
// tmp := tmp & i & ; ;
11522: LD_ADDR_VAR 0 3
11526: PUSH
11527: LD_VAR 0 3
11531: PUSH
11532: LD_VAR 0 8
11536: STR
11537: PUSH
11538: LD_STRING ;
11540: STR
11541: ST_TO_ADDR
// end ;
11542: GO 11507
11544: POP
11545: POP
// for i = 1 to hardcoreCounter do
11546: LD_ADDR_VAR 0 8
11550: PUSH
11551: DOUBLE
11552: LD_INT 1
11554: DEC
11555: ST_TO_ADDR
11556: LD_EXP 26
11560: PUSH
11561: FOR_TO
11562: IFFALSE 11608
// begin if flags [ normalCounter + i ] then
11564: LD_VAR 0 4
11568: PUSH
11569: LD_EXP 25
11573: PUSH
11574: LD_VAR 0 8
11578: PLUS
11579: ARRAY
11580: IFFALSE 11606
// tmp := tmp & ( 100 + i ) & ; ;
11582: LD_ADDR_VAR 0 3
11586: PUSH
11587: LD_VAR 0 3
11591: PUSH
11592: LD_INT 100
11594: PUSH
11595: LD_VAR 0 8
11599: PLUS
11600: STR
11601: PUSH
11602: LD_STRING ;
11604: STR
11605: ST_TO_ADDR
// end ;
11606: GO 11561
11608: POP
11609: POP
// if tmp then
11610: LD_VAR 0 3
11614: IFFALSE 11626
// active := tmp ;
11616: LD_ADDR_VAR 0 7
11620: PUSH
11621: LD_VAR 0 3
11625: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11626: LD_STRING getStreamItemsFromMission("
11628: PUSH
11629: LD_VAR 0 5
11633: STR
11634: PUSH
11635: LD_STRING ","
11637: STR
11638: PUSH
11639: LD_VAR 0 6
11643: STR
11644: PUSH
11645: LD_STRING ","
11647: STR
11648: PUSH
11649: LD_VAR 0 7
11653: STR
11654: PUSH
11655: LD_STRING ")
11657: STR
11658: PPUSH
11659: CALL_OW 559
// end else
11663: GO 11672
// ToLua ( getStreamItemsFromMission("","","") ) ;
11665: LD_STRING getStreamItemsFromMission("","","")
11667: PPUSH
11668: CALL_OW 559
// end ;
11672: LD_VAR 0 2
11676: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11677: LD_EXP 24
11681: PUSH
11682: LD_EXP 29
11686: AND
11687: IFFALSE 11811
11689: GO 11691
11691: DISABLE
11692: LD_INT 0
11694: PPUSH
11695: PPUSH
// begin enable ;
11696: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11697: LD_ADDR_VAR 0 2
11701: PUSH
11702: LD_INT 22
11704: PUSH
11705: LD_OWVAR 2
11709: PUSH
11710: EMPTY
11711: LIST
11712: LIST
11713: PUSH
11714: LD_INT 2
11716: PUSH
11717: LD_INT 34
11719: PUSH
11720: LD_INT 7
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: PUSH
11727: LD_INT 34
11729: PUSH
11730: LD_INT 45
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: PUSH
11737: LD_INT 34
11739: PUSH
11740: LD_INT 28
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PUSH
11747: LD_INT 34
11749: PUSH
11750: LD_INT 47
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: PPUSH
11768: CALL_OW 69
11772: ST_TO_ADDR
// if not tmp then
11773: LD_VAR 0 2
11777: NOT
11778: IFFALSE 11782
// exit ;
11780: GO 11811
// for i in tmp do
11782: LD_ADDR_VAR 0 1
11786: PUSH
11787: LD_VAR 0 2
11791: PUSH
11792: FOR_IN
11793: IFFALSE 11809
// begin SetLives ( i , 0 ) ;
11795: LD_VAR 0 1
11799: PPUSH
11800: LD_INT 0
11802: PPUSH
11803: CALL_OW 234
// end ;
11807: GO 11792
11809: POP
11810: POP
// end ;
11811: PPOPN 2
11813: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11814: LD_EXP 24
11818: PUSH
11819: LD_EXP 30
11823: AND
11824: IFFALSE 11908
11826: GO 11828
11828: DISABLE
11829: LD_INT 0
11831: PPUSH
11832: PPUSH
// begin enable ;
11833: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11834: LD_ADDR_VAR 0 2
11838: PUSH
11839: LD_INT 22
11841: PUSH
11842: LD_OWVAR 2
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PUSH
11851: LD_INT 32
11853: PUSH
11854: LD_INT 3
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: PPUSH
11865: CALL_OW 69
11869: ST_TO_ADDR
// if not tmp then
11870: LD_VAR 0 2
11874: NOT
11875: IFFALSE 11879
// exit ;
11877: GO 11908
// for i in tmp do
11879: LD_ADDR_VAR 0 1
11883: PUSH
11884: LD_VAR 0 2
11888: PUSH
11889: FOR_IN
11890: IFFALSE 11906
// begin SetLives ( i , 0 ) ;
11892: LD_VAR 0 1
11896: PPUSH
11897: LD_INT 0
11899: PPUSH
11900: CALL_OW 234
// end ;
11904: GO 11889
11906: POP
11907: POP
// end ;
11908: PPOPN 2
11910: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11911: LD_EXP 24
11915: PUSH
11916: LD_EXP 27
11920: AND
11921: IFFALSE 12014
11923: GO 11925
11925: DISABLE
11926: LD_INT 0
11928: PPUSH
// begin enable ;
11929: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11930: LD_ADDR_VAR 0 1
11934: PUSH
11935: LD_INT 22
11937: PUSH
11938: LD_OWVAR 2
11942: PUSH
11943: EMPTY
11944: LIST
11945: LIST
11946: PUSH
11947: LD_INT 2
11949: PUSH
11950: LD_INT 25
11952: PUSH
11953: LD_INT 5
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: PUSH
11960: LD_INT 25
11962: PUSH
11963: LD_INT 9
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: PUSH
11970: LD_INT 25
11972: PUSH
11973: LD_INT 8
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PPUSH
11990: CALL_OW 69
11994: PUSH
11995: FOR_IN
11996: IFFALSE 12012
// begin SetClass ( i , 1 ) ;
11998: LD_VAR 0 1
12002: PPUSH
12003: LD_INT 1
12005: PPUSH
12006: CALL_OW 336
// end ;
12010: GO 11995
12012: POP
12013: POP
// end ;
12014: PPOPN 1
12016: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12017: LD_EXP 24
12021: PUSH
12022: LD_EXP 28
12026: AND
12027: PUSH
12028: LD_OWVAR 65
12032: PUSH
12033: LD_INT 7
12035: LESS
12036: AND
12037: IFFALSE 12051
12039: GO 12041
12041: DISABLE
// begin enable ;
12042: ENABLE
// game_speed := 7 ;
12043: LD_ADDR_OWVAR 65
12047: PUSH
12048: LD_INT 7
12050: ST_TO_ADDR
// end ;
12051: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12052: LD_EXP 24
12056: PUSH
12057: LD_EXP 31
12061: AND
12062: IFFALSE 12264
12064: GO 12066
12066: DISABLE
12067: LD_INT 0
12069: PPUSH
12070: PPUSH
12071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12072: LD_ADDR_VAR 0 3
12076: PUSH
12077: LD_INT 81
12079: PUSH
12080: LD_OWVAR 2
12084: PUSH
12085: EMPTY
12086: LIST
12087: LIST
12088: PUSH
12089: LD_INT 21
12091: PUSH
12092: LD_INT 1
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: PPUSH
12103: CALL_OW 69
12107: ST_TO_ADDR
// if not tmp then
12108: LD_VAR 0 3
12112: NOT
12113: IFFALSE 12117
// exit ;
12115: GO 12264
// if tmp > 5 then
12117: LD_VAR 0 3
12121: PUSH
12122: LD_INT 5
12124: GREATER
12125: IFFALSE 12137
// k := 5 else
12127: LD_ADDR_VAR 0 2
12131: PUSH
12132: LD_INT 5
12134: ST_TO_ADDR
12135: GO 12147
// k := tmp ;
12137: LD_ADDR_VAR 0 2
12141: PUSH
12142: LD_VAR 0 3
12146: ST_TO_ADDR
// for i := 1 to k do
12147: LD_ADDR_VAR 0 1
12151: PUSH
12152: DOUBLE
12153: LD_INT 1
12155: DEC
12156: ST_TO_ADDR
12157: LD_VAR 0 2
12161: PUSH
12162: FOR_TO
12163: IFFALSE 12262
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12165: LD_VAR 0 3
12169: PUSH
12170: LD_VAR 0 1
12174: ARRAY
12175: PPUSH
12176: LD_VAR 0 1
12180: PUSH
12181: LD_INT 4
12183: MOD
12184: PUSH
12185: LD_INT 1
12187: PLUS
12188: PPUSH
12189: CALL_OW 259
12193: PUSH
12194: LD_INT 10
12196: LESS
12197: IFFALSE 12260
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12199: LD_VAR 0 3
12203: PUSH
12204: LD_VAR 0 1
12208: ARRAY
12209: PPUSH
12210: LD_VAR 0 1
12214: PUSH
12215: LD_INT 4
12217: MOD
12218: PUSH
12219: LD_INT 1
12221: PLUS
12222: PPUSH
12223: LD_VAR 0 3
12227: PUSH
12228: LD_VAR 0 1
12232: ARRAY
12233: PPUSH
12234: LD_VAR 0 1
12238: PUSH
12239: LD_INT 4
12241: MOD
12242: PUSH
12243: LD_INT 1
12245: PLUS
12246: PPUSH
12247: CALL_OW 259
12251: PUSH
12252: LD_INT 1
12254: PLUS
12255: PPUSH
12256: CALL_OW 237
12260: GO 12162
12262: POP
12263: POP
// end ;
12264: PPOPN 3
12266: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12267: LD_EXP 24
12271: PUSH
12272: LD_EXP 32
12276: AND
12277: IFFALSE 12297
12279: GO 12281
12281: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12282: LD_INT 4
12284: PPUSH
12285: LD_OWVAR 2
12289: PPUSH
12290: LD_INT 0
12292: PPUSH
12293: CALL_OW 324
12297: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12298: LD_EXP 24
12302: PUSH
12303: LD_EXP 61
12307: AND
12308: IFFALSE 12328
12310: GO 12312
12312: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12313: LD_INT 19
12315: PPUSH
12316: LD_OWVAR 2
12320: PPUSH
12321: LD_INT 0
12323: PPUSH
12324: CALL_OW 324
12328: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12329: LD_EXP 24
12333: PUSH
12334: LD_EXP 33
12338: AND
12339: IFFALSE 12441
12341: GO 12343
12343: DISABLE
12344: LD_INT 0
12346: PPUSH
12347: PPUSH
// begin enable ;
12348: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12349: LD_ADDR_VAR 0 2
12353: PUSH
12354: LD_INT 22
12356: PUSH
12357: LD_OWVAR 2
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: PUSH
12366: LD_INT 2
12368: PUSH
12369: LD_INT 34
12371: PUSH
12372: LD_INT 11
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: PUSH
12379: LD_INT 34
12381: PUSH
12382: LD_INT 30
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: LIST
12393: PUSH
12394: EMPTY
12395: LIST
12396: LIST
12397: PPUSH
12398: CALL_OW 69
12402: ST_TO_ADDR
// if not tmp then
12403: LD_VAR 0 2
12407: NOT
12408: IFFALSE 12412
// exit ;
12410: GO 12441
// for i in tmp do
12412: LD_ADDR_VAR 0 1
12416: PUSH
12417: LD_VAR 0 2
12421: PUSH
12422: FOR_IN
12423: IFFALSE 12439
// begin SetLives ( i , 0 ) ;
12425: LD_VAR 0 1
12429: PPUSH
12430: LD_INT 0
12432: PPUSH
12433: CALL_OW 234
// end ;
12437: GO 12422
12439: POP
12440: POP
// end ;
12441: PPOPN 2
12443: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12444: LD_EXP 24
12448: PUSH
12449: LD_EXP 34
12453: AND
12454: IFFALSE 12474
12456: GO 12458
12458: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12459: LD_INT 32
12461: PPUSH
12462: LD_OWVAR 2
12466: PPUSH
12467: LD_INT 0
12469: PPUSH
12470: CALL_OW 324
12474: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12475: LD_EXP 24
12479: PUSH
12480: LD_EXP 35
12484: AND
12485: IFFALSE 12666
12487: GO 12489
12489: DISABLE
12490: LD_INT 0
12492: PPUSH
12493: PPUSH
12494: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12495: LD_ADDR_VAR 0 2
12499: PUSH
12500: LD_INT 22
12502: PUSH
12503: LD_OWVAR 2
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: PUSH
12512: LD_INT 33
12514: PUSH
12515: LD_INT 3
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PPUSH
12526: CALL_OW 69
12530: ST_TO_ADDR
// if not tmp then
12531: LD_VAR 0 2
12535: NOT
12536: IFFALSE 12540
// exit ;
12538: GO 12666
// side := 0 ;
12540: LD_ADDR_VAR 0 3
12544: PUSH
12545: LD_INT 0
12547: ST_TO_ADDR
// for i := 1 to 8 do
12548: LD_ADDR_VAR 0 1
12552: PUSH
12553: DOUBLE
12554: LD_INT 1
12556: DEC
12557: ST_TO_ADDR
12558: LD_INT 8
12560: PUSH
12561: FOR_TO
12562: IFFALSE 12610
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12564: LD_OWVAR 2
12568: PUSH
12569: LD_VAR 0 1
12573: NONEQUAL
12574: PUSH
12575: LD_OWVAR 2
12579: PPUSH
12580: LD_VAR 0 1
12584: PPUSH
12585: CALL_OW 81
12589: PUSH
12590: LD_INT 2
12592: EQUAL
12593: AND
12594: IFFALSE 12608
// begin side := i ;
12596: LD_ADDR_VAR 0 3
12600: PUSH
12601: LD_VAR 0 1
12605: ST_TO_ADDR
// break ;
12606: GO 12610
// end ;
12608: GO 12561
12610: POP
12611: POP
// if not side then
12612: LD_VAR 0 3
12616: NOT
12617: IFFALSE 12621
// exit ;
12619: GO 12666
// for i := 1 to tmp do
12621: LD_ADDR_VAR 0 1
12625: PUSH
12626: DOUBLE
12627: LD_INT 1
12629: DEC
12630: ST_TO_ADDR
12631: LD_VAR 0 2
12635: PUSH
12636: FOR_TO
12637: IFFALSE 12664
// if Prob ( 60 ) then
12639: LD_INT 60
12641: PPUSH
12642: CALL_OW 13
12646: IFFALSE 12662
// SetSide ( i , side ) ;
12648: LD_VAR 0 1
12652: PPUSH
12653: LD_VAR 0 3
12657: PPUSH
12658: CALL_OW 235
12662: GO 12636
12664: POP
12665: POP
// end ;
12666: PPOPN 3
12668: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12669: LD_EXP 24
12673: PUSH
12674: LD_EXP 37
12678: AND
12679: IFFALSE 12798
12681: GO 12683
12683: DISABLE
12684: LD_INT 0
12686: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12687: LD_ADDR_VAR 0 1
12691: PUSH
12692: LD_INT 22
12694: PUSH
12695: LD_OWVAR 2
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: PUSH
12704: LD_INT 21
12706: PUSH
12707: LD_INT 1
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PUSH
12714: LD_INT 3
12716: PUSH
12717: LD_INT 23
12719: PUSH
12720: LD_INT 0
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: LIST
12735: PPUSH
12736: CALL_OW 69
12740: PUSH
12741: FOR_IN
12742: IFFALSE 12796
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12744: LD_VAR 0 1
12748: PPUSH
12749: CALL_OW 257
12753: PUSH
12754: LD_INT 1
12756: PUSH
12757: LD_INT 2
12759: PUSH
12760: LD_INT 3
12762: PUSH
12763: LD_INT 4
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: IN
12772: IFFALSE 12794
// SetClass ( un , rand ( 1 , 4 ) ) ;
12774: LD_VAR 0 1
12778: PPUSH
12779: LD_INT 1
12781: PPUSH
12782: LD_INT 4
12784: PPUSH
12785: CALL_OW 12
12789: PPUSH
12790: CALL_OW 336
12794: GO 12741
12796: POP
12797: POP
// end ;
12798: PPOPN 1
12800: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12801: LD_EXP 24
12805: PUSH
12806: LD_EXP 36
12810: AND
12811: IFFALSE 12890
12813: GO 12815
12815: DISABLE
12816: LD_INT 0
12818: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12819: LD_ADDR_VAR 0 1
12823: PUSH
12824: LD_INT 22
12826: PUSH
12827: LD_OWVAR 2
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: PUSH
12836: LD_INT 21
12838: PUSH
12839: LD_INT 3
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PUSH
12846: EMPTY
12847: LIST
12848: LIST
12849: PPUSH
12850: CALL_OW 69
12854: ST_TO_ADDR
// if not tmp then
12855: LD_VAR 0 1
12859: NOT
12860: IFFALSE 12864
// exit ;
12862: GO 12890
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12864: LD_VAR 0 1
12868: PUSH
12869: LD_INT 1
12871: PPUSH
12872: LD_VAR 0 1
12876: PPUSH
12877: CALL_OW 12
12881: ARRAY
12882: PPUSH
12883: LD_INT 100
12885: PPUSH
12886: CALL_OW 234
// end ;
12890: PPOPN 1
12892: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12893: LD_EXP 24
12897: PUSH
12898: LD_EXP 38
12902: AND
12903: IFFALSE 13001
12905: GO 12907
12907: DISABLE
12908: LD_INT 0
12910: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12911: LD_ADDR_VAR 0 1
12915: PUSH
12916: LD_INT 22
12918: PUSH
12919: LD_OWVAR 2
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: PUSH
12928: LD_INT 21
12930: PUSH
12931: LD_INT 1
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: PPUSH
12942: CALL_OW 69
12946: ST_TO_ADDR
// if not tmp then
12947: LD_VAR 0 1
12951: NOT
12952: IFFALSE 12956
// exit ;
12954: GO 13001
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12956: LD_VAR 0 1
12960: PUSH
12961: LD_INT 1
12963: PPUSH
12964: LD_VAR 0 1
12968: PPUSH
12969: CALL_OW 12
12973: ARRAY
12974: PPUSH
12975: LD_INT 1
12977: PPUSH
12978: LD_INT 4
12980: PPUSH
12981: CALL_OW 12
12985: PPUSH
12986: LD_INT 3000
12988: PPUSH
12989: LD_INT 9000
12991: PPUSH
12992: CALL_OW 12
12996: PPUSH
12997: CALL_OW 492
// end ;
13001: PPOPN 1
13003: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13004: LD_EXP 24
13008: PUSH
13009: LD_EXP 39
13013: AND
13014: IFFALSE 13034
13016: GO 13018
13018: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13019: LD_INT 1
13021: PPUSH
13022: LD_OWVAR 2
13026: PPUSH
13027: LD_INT 0
13029: PPUSH
13030: CALL_OW 324
13034: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13035: LD_EXP 24
13039: PUSH
13040: LD_EXP 40
13044: AND
13045: IFFALSE 13128
13047: GO 13049
13049: DISABLE
13050: LD_INT 0
13052: PPUSH
13053: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13054: LD_ADDR_VAR 0 2
13058: PUSH
13059: LD_INT 22
13061: PUSH
13062: LD_OWVAR 2
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: PUSH
13071: LD_INT 21
13073: PUSH
13074: LD_INT 3
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: PPUSH
13085: CALL_OW 69
13089: ST_TO_ADDR
// if not tmp then
13090: LD_VAR 0 2
13094: NOT
13095: IFFALSE 13099
// exit ;
13097: GO 13128
// for i in tmp do
13099: LD_ADDR_VAR 0 1
13103: PUSH
13104: LD_VAR 0 2
13108: PUSH
13109: FOR_IN
13110: IFFALSE 13126
// SetBLevel ( i , 10 ) ;
13112: LD_VAR 0 1
13116: PPUSH
13117: LD_INT 10
13119: PPUSH
13120: CALL_OW 241
13124: GO 13109
13126: POP
13127: POP
// end ;
13128: PPOPN 2
13130: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13131: LD_EXP 24
13135: PUSH
13136: LD_EXP 41
13140: AND
13141: IFFALSE 13252
13143: GO 13145
13145: DISABLE
13146: LD_INT 0
13148: PPUSH
13149: PPUSH
13150: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13151: LD_ADDR_VAR 0 3
13155: PUSH
13156: LD_INT 22
13158: PUSH
13159: LD_OWVAR 2
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PUSH
13168: LD_INT 25
13170: PUSH
13171: LD_INT 1
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: PUSH
13178: EMPTY
13179: LIST
13180: LIST
13181: PPUSH
13182: CALL_OW 69
13186: ST_TO_ADDR
// if not tmp then
13187: LD_VAR 0 3
13191: NOT
13192: IFFALSE 13196
// exit ;
13194: GO 13252
// un := tmp [ rand ( 1 , tmp ) ] ;
13196: LD_ADDR_VAR 0 2
13200: PUSH
13201: LD_VAR 0 3
13205: PUSH
13206: LD_INT 1
13208: PPUSH
13209: LD_VAR 0 3
13213: PPUSH
13214: CALL_OW 12
13218: ARRAY
13219: ST_TO_ADDR
// if Crawls ( un ) then
13220: LD_VAR 0 2
13224: PPUSH
13225: CALL_OW 318
13229: IFFALSE 13240
// ComWalk ( un ) ;
13231: LD_VAR 0 2
13235: PPUSH
13236: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13240: LD_VAR 0 2
13244: PPUSH
13245: LD_INT 5
13247: PPUSH
13248: CALL_OW 336
// end ;
13252: PPOPN 3
13254: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13255: LD_EXP 24
13259: PUSH
13260: LD_EXP 42
13264: AND
13265: PUSH
13266: LD_OWVAR 67
13270: PUSH
13271: LD_INT 4
13273: LESS
13274: AND
13275: IFFALSE 13294
13277: GO 13279
13279: DISABLE
// begin Difficulty := Difficulty + 1 ;
13280: LD_ADDR_OWVAR 67
13284: PUSH
13285: LD_OWVAR 67
13289: PUSH
13290: LD_INT 1
13292: PLUS
13293: ST_TO_ADDR
// end ;
13294: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13295: LD_EXP 24
13299: PUSH
13300: LD_EXP 43
13304: AND
13305: IFFALSE 13408
13307: GO 13309
13309: DISABLE
13310: LD_INT 0
13312: PPUSH
// begin for i := 1 to 5 do
13313: LD_ADDR_VAR 0 1
13317: PUSH
13318: DOUBLE
13319: LD_INT 1
13321: DEC
13322: ST_TO_ADDR
13323: LD_INT 5
13325: PUSH
13326: FOR_TO
13327: IFFALSE 13406
// begin uc_nation := nation_nature ;
13329: LD_ADDR_OWVAR 21
13333: PUSH
13334: LD_INT 0
13336: ST_TO_ADDR
// uc_side := 0 ;
13337: LD_ADDR_OWVAR 20
13341: PUSH
13342: LD_INT 0
13344: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13345: LD_ADDR_OWVAR 29
13349: PUSH
13350: LD_INT 12
13352: PUSH
13353: LD_INT 12
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: ST_TO_ADDR
// hc_agressivity := 20 ;
13360: LD_ADDR_OWVAR 35
13364: PUSH
13365: LD_INT 20
13367: ST_TO_ADDR
// hc_class := class_tiger ;
13368: LD_ADDR_OWVAR 28
13372: PUSH
13373: LD_INT 14
13375: ST_TO_ADDR
// hc_gallery :=  ;
13376: LD_ADDR_OWVAR 33
13380: PUSH
13381: LD_STRING 
13383: ST_TO_ADDR
// hc_name :=  ;
13384: LD_ADDR_OWVAR 26
13388: PUSH
13389: LD_STRING 
13391: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13392: CALL_OW 44
13396: PPUSH
13397: LD_INT 0
13399: PPUSH
13400: CALL_OW 51
// end ;
13404: GO 13326
13406: POP
13407: POP
// end ;
13408: PPOPN 1
13410: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13411: LD_EXP 24
13415: PUSH
13416: LD_EXP 44
13420: AND
13421: IFFALSE 13430
13423: GO 13425
13425: DISABLE
// StreamSibBomb ;
13426: CALL 13431 0 0
13430: END
// export function StreamSibBomb ; var i , x , y ; begin
13431: LD_INT 0
13433: PPUSH
13434: PPUSH
13435: PPUSH
13436: PPUSH
// result := false ;
13437: LD_ADDR_VAR 0 1
13441: PUSH
13442: LD_INT 0
13444: ST_TO_ADDR
// for i := 1 to 16 do
13445: LD_ADDR_VAR 0 2
13449: PUSH
13450: DOUBLE
13451: LD_INT 1
13453: DEC
13454: ST_TO_ADDR
13455: LD_INT 16
13457: PUSH
13458: FOR_TO
13459: IFFALSE 13658
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13461: LD_ADDR_VAR 0 3
13465: PUSH
13466: LD_INT 10
13468: PUSH
13469: LD_INT 20
13471: PUSH
13472: LD_INT 30
13474: PUSH
13475: LD_INT 40
13477: PUSH
13478: LD_INT 50
13480: PUSH
13481: LD_INT 60
13483: PUSH
13484: LD_INT 70
13486: PUSH
13487: LD_INT 80
13489: PUSH
13490: LD_INT 90
13492: PUSH
13493: LD_INT 100
13495: PUSH
13496: LD_INT 110
13498: PUSH
13499: LD_INT 120
13501: PUSH
13502: LD_INT 130
13504: PUSH
13505: LD_INT 140
13507: PUSH
13508: LD_INT 150
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: PUSH
13528: LD_INT 1
13530: PPUSH
13531: LD_INT 15
13533: PPUSH
13534: CALL_OW 12
13538: ARRAY
13539: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13540: LD_ADDR_VAR 0 4
13544: PUSH
13545: LD_INT 10
13547: PUSH
13548: LD_INT 20
13550: PUSH
13551: LD_INT 30
13553: PUSH
13554: LD_INT 40
13556: PUSH
13557: LD_INT 50
13559: PUSH
13560: LD_INT 60
13562: PUSH
13563: LD_INT 70
13565: PUSH
13566: LD_INT 80
13568: PUSH
13569: LD_INT 90
13571: PUSH
13572: LD_INT 100
13574: PUSH
13575: LD_INT 110
13577: PUSH
13578: LD_INT 120
13580: PUSH
13581: LD_INT 130
13583: PUSH
13584: LD_INT 140
13586: PUSH
13587: LD_INT 150
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: PUSH
13607: LD_INT 1
13609: PPUSH
13610: LD_INT 15
13612: PPUSH
13613: CALL_OW 12
13617: ARRAY
13618: ST_TO_ADDR
// if ValidHex ( x , y ) then
13619: LD_VAR 0 3
13623: PPUSH
13624: LD_VAR 0 4
13628: PPUSH
13629: CALL_OW 488
13633: IFFALSE 13656
// begin result := [ x , y ] ;
13635: LD_ADDR_VAR 0 1
13639: PUSH
13640: LD_VAR 0 3
13644: PUSH
13645: LD_VAR 0 4
13649: PUSH
13650: EMPTY
13651: LIST
13652: LIST
13653: ST_TO_ADDR
// break ;
13654: GO 13658
// end ; end ;
13656: GO 13458
13658: POP
13659: POP
// if result then
13660: LD_VAR 0 1
13664: IFFALSE 13724
// begin ToLua ( playSibBomb() ) ;
13666: LD_STRING playSibBomb()
13668: PPUSH
13669: CALL_OW 559
// wait ( 0 0$14 ) ;
13673: LD_INT 490
13675: PPUSH
13676: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13680: LD_VAR 0 1
13684: PUSH
13685: LD_INT 1
13687: ARRAY
13688: PPUSH
13689: LD_VAR 0 1
13693: PUSH
13694: LD_INT 2
13696: ARRAY
13697: PPUSH
13698: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13702: LD_VAR 0 1
13706: PUSH
13707: LD_INT 1
13709: ARRAY
13710: PPUSH
13711: LD_VAR 0 1
13715: PUSH
13716: LD_INT 2
13718: ARRAY
13719: PPUSH
13720: CALL_OW 429
// end ; end ;
13724: LD_VAR 0 1
13728: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13729: LD_EXP 24
13733: PUSH
13734: LD_EXP 46
13738: AND
13739: IFFALSE 13751
13741: GO 13743
13743: DISABLE
// YouLost (  ) ;
13744: LD_STRING 
13746: PPUSH
13747: CALL_OW 104
13751: END
// every 0 0$1 trigger StreamModeActive and sFog do
13752: LD_EXP 24
13756: PUSH
13757: LD_EXP 45
13761: AND
13762: IFFALSE 13776
13764: GO 13766
13766: DISABLE
// FogOff ( your_side ) ;
13767: LD_OWVAR 2
13771: PPUSH
13772: CALL_OW 344
13776: END
// every 0 0$1 trigger StreamModeActive and sSun do
13777: LD_EXP 24
13781: PUSH
13782: LD_EXP 47
13786: AND
13787: IFFALSE 13815
13789: GO 13791
13791: DISABLE
// begin solar_recharge_percent := 0 ;
13792: LD_ADDR_OWVAR 79
13796: PUSH
13797: LD_INT 0
13799: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13800: LD_INT 10500
13802: PPUSH
13803: CALL_OW 67
// solar_recharge_percent := 100 ;
13807: LD_ADDR_OWVAR 79
13811: PUSH
13812: LD_INT 100
13814: ST_TO_ADDR
// end ;
13815: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13816: LD_EXP 24
13820: PUSH
13821: LD_EXP 48
13825: AND
13826: IFFALSE 14065
13828: GO 13830
13830: DISABLE
13831: LD_INT 0
13833: PPUSH
13834: PPUSH
13835: PPUSH
// begin tmp := [ ] ;
13836: LD_ADDR_VAR 0 3
13840: PUSH
13841: EMPTY
13842: ST_TO_ADDR
// for i := 1 to 6 do
13843: LD_ADDR_VAR 0 1
13847: PUSH
13848: DOUBLE
13849: LD_INT 1
13851: DEC
13852: ST_TO_ADDR
13853: LD_INT 6
13855: PUSH
13856: FOR_TO
13857: IFFALSE 13962
// begin uc_nation := nation_nature ;
13859: LD_ADDR_OWVAR 21
13863: PUSH
13864: LD_INT 0
13866: ST_TO_ADDR
// uc_side := 0 ;
13867: LD_ADDR_OWVAR 20
13871: PUSH
13872: LD_INT 0
13874: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13875: LD_ADDR_OWVAR 29
13879: PUSH
13880: LD_INT 12
13882: PUSH
13883: LD_INT 12
13885: PUSH
13886: EMPTY
13887: LIST
13888: LIST
13889: ST_TO_ADDR
// hc_agressivity := 20 ;
13890: LD_ADDR_OWVAR 35
13894: PUSH
13895: LD_INT 20
13897: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13898: LD_ADDR_OWVAR 28
13902: PUSH
13903: LD_INT 17
13905: ST_TO_ADDR
// hc_gallery :=  ;
13906: LD_ADDR_OWVAR 33
13910: PUSH
13911: LD_STRING 
13913: ST_TO_ADDR
// hc_name :=  ;
13914: LD_ADDR_OWVAR 26
13918: PUSH
13919: LD_STRING 
13921: ST_TO_ADDR
// un := CreateHuman ;
13922: LD_ADDR_VAR 0 2
13926: PUSH
13927: CALL_OW 44
13931: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13932: LD_VAR 0 2
13936: PPUSH
13937: LD_INT 1
13939: PPUSH
13940: CALL_OW 51
// tmp := tmp ^ un ;
13944: LD_ADDR_VAR 0 3
13948: PUSH
13949: LD_VAR 0 3
13953: PUSH
13954: LD_VAR 0 2
13958: ADD
13959: ST_TO_ADDR
// end ;
13960: GO 13856
13962: POP
13963: POP
// repeat wait ( 0 0$1 ) ;
13964: LD_INT 35
13966: PPUSH
13967: CALL_OW 67
// for un in tmp do
13971: LD_ADDR_VAR 0 2
13975: PUSH
13976: LD_VAR 0 3
13980: PUSH
13981: FOR_IN
13982: IFFALSE 14056
// begin if IsDead ( un ) then
13984: LD_VAR 0 2
13988: PPUSH
13989: CALL_OW 301
13993: IFFALSE 14013
// begin tmp := tmp diff un ;
13995: LD_ADDR_VAR 0 3
13999: PUSH
14000: LD_VAR 0 3
14004: PUSH
14005: LD_VAR 0 2
14009: DIFF
14010: ST_TO_ADDR
// continue ;
14011: GO 13981
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14013: LD_VAR 0 2
14017: PPUSH
14018: LD_INT 3
14020: PUSH
14021: LD_INT 22
14023: PUSH
14024: LD_INT 0
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: PPUSH
14035: CALL_OW 69
14039: PPUSH
14040: LD_VAR 0 2
14044: PPUSH
14045: CALL_OW 74
14049: PPUSH
14050: CALL_OW 115
// end ;
14054: GO 13981
14056: POP
14057: POP
// until not tmp ;
14058: LD_VAR 0 3
14062: NOT
14063: IFFALSE 13964
// end ;
14065: PPOPN 3
14067: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14068: LD_EXP 24
14072: PUSH
14073: LD_EXP 49
14077: AND
14078: IFFALSE 14132
14080: GO 14082
14082: DISABLE
// begin ToLua ( displayTroll(); ) ;
14083: LD_STRING displayTroll();
14085: PPUSH
14086: CALL_OW 559
// wait ( 3 3$00 ) ;
14090: LD_INT 6300
14092: PPUSH
14093: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14097: LD_STRING hideTroll();
14099: PPUSH
14100: CALL_OW 559
// wait ( 1 1$00 ) ;
14104: LD_INT 2100
14106: PPUSH
14107: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14111: LD_STRING displayTroll();
14113: PPUSH
14114: CALL_OW 559
// wait ( 1 1$00 ) ;
14118: LD_INT 2100
14120: PPUSH
14121: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14125: LD_STRING hideTroll();
14127: PPUSH
14128: CALL_OW 559
// end ;
14132: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14133: LD_EXP 24
14137: PUSH
14138: LD_EXP 50
14142: AND
14143: IFFALSE 14206
14145: GO 14147
14147: DISABLE
14148: LD_INT 0
14150: PPUSH
// begin p := 0 ;
14151: LD_ADDR_VAR 0 1
14155: PUSH
14156: LD_INT 0
14158: ST_TO_ADDR
// repeat game_speed := 1 ;
14159: LD_ADDR_OWVAR 65
14163: PUSH
14164: LD_INT 1
14166: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14167: LD_INT 35
14169: PPUSH
14170: CALL_OW 67
// p := p + 1 ;
14174: LD_ADDR_VAR 0 1
14178: PUSH
14179: LD_VAR 0 1
14183: PUSH
14184: LD_INT 1
14186: PLUS
14187: ST_TO_ADDR
// until p >= 60 ;
14188: LD_VAR 0 1
14192: PUSH
14193: LD_INT 60
14195: GREATEREQUAL
14196: IFFALSE 14159
// game_speed := 4 ;
14198: LD_ADDR_OWVAR 65
14202: PUSH
14203: LD_INT 4
14205: ST_TO_ADDR
// end ;
14206: PPOPN 1
14208: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14209: LD_EXP 24
14213: PUSH
14214: LD_EXP 51
14218: AND
14219: IFFALSE 14365
14221: GO 14223
14223: DISABLE
14224: LD_INT 0
14226: PPUSH
14227: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14228: LD_ADDR_VAR 0 1
14232: PUSH
14233: LD_INT 22
14235: PUSH
14236: LD_OWVAR 2
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: PUSH
14245: LD_INT 2
14247: PUSH
14248: LD_INT 30
14250: PUSH
14251: LD_INT 0
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PUSH
14258: LD_INT 30
14260: PUSH
14261: LD_INT 1
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: LIST
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PPUSH
14277: CALL_OW 69
14281: ST_TO_ADDR
// if not depot then
14282: LD_VAR 0 1
14286: NOT
14287: IFFALSE 14291
// exit ;
14289: GO 14365
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14291: LD_ADDR_VAR 0 2
14295: PUSH
14296: LD_VAR 0 1
14300: PUSH
14301: LD_INT 1
14303: PPUSH
14304: LD_VAR 0 1
14308: PPUSH
14309: CALL_OW 12
14313: ARRAY
14314: PPUSH
14315: CALL_OW 274
14319: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14320: LD_VAR 0 2
14324: PPUSH
14325: LD_INT 1
14327: PPUSH
14328: LD_INT 0
14330: PPUSH
14331: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14335: LD_VAR 0 2
14339: PPUSH
14340: LD_INT 2
14342: PPUSH
14343: LD_INT 0
14345: PPUSH
14346: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14350: LD_VAR 0 2
14354: PPUSH
14355: LD_INT 3
14357: PPUSH
14358: LD_INT 0
14360: PPUSH
14361: CALL_OW 277
// end ;
14365: PPOPN 2
14367: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14368: LD_EXP 24
14372: PUSH
14373: LD_EXP 52
14377: AND
14378: IFFALSE 14475
14380: GO 14382
14382: DISABLE
14383: LD_INT 0
14385: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14386: LD_ADDR_VAR 0 1
14390: PUSH
14391: LD_INT 22
14393: PUSH
14394: LD_OWVAR 2
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: PUSH
14403: LD_INT 21
14405: PUSH
14406: LD_INT 1
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: PUSH
14413: LD_INT 3
14415: PUSH
14416: LD_INT 23
14418: PUSH
14419: LD_INT 0
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: LIST
14434: PPUSH
14435: CALL_OW 69
14439: ST_TO_ADDR
// if not tmp then
14440: LD_VAR 0 1
14444: NOT
14445: IFFALSE 14449
// exit ;
14447: GO 14475
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14449: LD_VAR 0 1
14453: PUSH
14454: LD_INT 1
14456: PPUSH
14457: LD_VAR 0 1
14461: PPUSH
14462: CALL_OW 12
14466: ARRAY
14467: PPUSH
14468: LD_INT 200
14470: PPUSH
14471: CALL_OW 234
// end ;
14475: PPOPN 1
14477: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14478: LD_EXP 24
14482: PUSH
14483: LD_EXP 53
14487: AND
14488: IFFALSE 14567
14490: GO 14492
14492: DISABLE
14493: LD_INT 0
14495: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14496: LD_ADDR_VAR 0 1
14500: PUSH
14501: LD_INT 22
14503: PUSH
14504: LD_OWVAR 2
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: PUSH
14513: LD_INT 21
14515: PUSH
14516: LD_INT 2
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: PPUSH
14527: CALL_OW 69
14531: ST_TO_ADDR
// if not tmp then
14532: LD_VAR 0 1
14536: NOT
14537: IFFALSE 14541
// exit ;
14539: GO 14567
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14541: LD_VAR 0 1
14545: PUSH
14546: LD_INT 1
14548: PPUSH
14549: LD_VAR 0 1
14553: PPUSH
14554: CALL_OW 12
14558: ARRAY
14559: PPUSH
14560: LD_INT 60
14562: PPUSH
14563: CALL_OW 234
// end ;
14567: PPOPN 1
14569: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14570: LD_EXP 24
14574: PUSH
14575: LD_EXP 54
14579: AND
14580: IFFALSE 14679
14582: GO 14584
14584: DISABLE
14585: LD_INT 0
14587: PPUSH
14588: PPUSH
// begin enable ;
14589: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14590: LD_ADDR_VAR 0 1
14594: PUSH
14595: LD_INT 22
14597: PUSH
14598: LD_OWVAR 2
14602: PUSH
14603: EMPTY
14604: LIST
14605: LIST
14606: PUSH
14607: LD_INT 61
14609: PUSH
14610: EMPTY
14611: LIST
14612: PUSH
14613: LD_INT 33
14615: PUSH
14616: LD_INT 2
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: PUSH
14623: EMPTY
14624: LIST
14625: LIST
14626: LIST
14627: PPUSH
14628: CALL_OW 69
14632: ST_TO_ADDR
// if not tmp then
14633: LD_VAR 0 1
14637: NOT
14638: IFFALSE 14642
// exit ;
14640: GO 14679
// for i in tmp do
14642: LD_ADDR_VAR 0 2
14646: PUSH
14647: LD_VAR 0 1
14651: PUSH
14652: FOR_IN
14653: IFFALSE 14677
// if IsControledBy ( i ) then
14655: LD_VAR 0 2
14659: PPUSH
14660: CALL_OW 312
14664: IFFALSE 14675
// ComUnlink ( i ) ;
14666: LD_VAR 0 2
14670: PPUSH
14671: CALL_OW 136
14675: GO 14652
14677: POP
14678: POP
// end ;
14679: PPOPN 2
14681: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14682: LD_EXP 24
14686: PUSH
14687: LD_EXP 55
14691: AND
14692: IFFALSE 14832
14694: GO 14696
14696: DISABLE
14697: LD_INT 0
14699: PPUSH
14700: PPUSH
// begin ToLua ( displayPowell(); ) ;
14701: LD_STRING displayPowell();
14703: PPUSH
14704: CALL_OW 559
// uc_side := 0 ;
14708: LD_ADDR_OWVAR 20
14712: PUSH
14713: LD_INT 0
14715: ST_TO_ADDR
// uc_nation := 2 ;
14716: LD_ADDR_OWVAR 21
14720: PUSH
14721: LD_INT 2
14723: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14724: LD_ADDR_OWVAR 37
14728: PUSH
14729: LD_INT 14
14731: ST_TO_ADDR
// vc_engine := engine_siberite ;
14732: LD_ADDR_OWVAR 39
14736: PUSH
14737: LD_INT 3
14739: ST_TO_ADDR
// vc_control := control_apeman ;
14740: LD_ADDR_OWVAR 38
14744: PUSH
14745: LD_INT 5
14747: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14748: LD_ADDR_OWVAR 40
14752: PUSH
14753: LD_INT 29
14755: ST_TO_ADDR
// un := CreateVehicle ;
14756: LD_ADDR_VAR 0 2
14760: PUSH
14761: CALL_OW 45
14765: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14766: LD_VAR 0 2
14770: PPUSH
14771: LD_INT 1
14773: PPUSH
14774: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14778: LD_INT 35
14780: PPUSH
14781: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14785: LD_VAR 0 2
14789: PPUSH
14790: LD_INT 22
14792: PUSH
14793: LD_OWVAR 2
14797: PUSH
14798: EMPTY
14799: LIST
14800: LIST
14801: PPUSH
14802: CALL_OW 69
14806: PPUSH
14807: LD_VAR 0 2
14811: PPUSH
14812: CALL_OW 74
14816: PPUSH
14817: CALL_OW 115
// until IsDead ( un ) ;
14821: LD_VAR 0 2
14825: PPUSH
14826: CALL_OW 301
14830: IFFALSE 14778
// end ;
14832: PPOPN 2
14834: END
// every 0 0$1 trigger StreamModeActive and sStu do
14835: LD_EXP 24
14839: PUSH
14840: LD_EXP 63
14844: AND
14845: IFFALSE 14861
14847: GO 14849
14849: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14850: LD_STRING displayStucuk();
14852: PPUSH
14853: CALL_OW 559
// ResetFog ;
14857: CALL_OW 335
// end ;
14861: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14862: LD_EXP 24
14866: PUSH
14867: LD_EXP 56
14871: AND
14872: IFFALSE 15013
14874: GO 14876
14876: DISABLE
14877: LD_INT 0
14879: PPUSH
14880: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14881: LD_ADDR_VAR 0 2
14885: PUSH
14886: LD_INT 22
14888: PUSH
14889: LD_OWVAR 2
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: PUSH
14898: LD_INT 21
14900: PUSH
14901: LD_INT 1
14903: PUSH
14904: EMPTY
14905: LIST
14906: LIST
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: PPUSH
14912: CALL_OW 69
14916: ST_TO_ADDR
// if not tmp then
14917: LD_VAR 0 2
14921: NOT
14922: IFFALSE 14926
// exit ;
14924: GO 15013
// un := tmp [ rand ( 1 , tmp ) ] ;
14926: LD_ADDR_VAR 0 1
14930: PUSH
14931: LD_VAR 0 2
14935: PUSH
14936: LD_INT 1
14938: PPUSH
14939: LD_VAR 0 2
14943: PPUSH
14944: CALL_OW 12
14948: ARRAY
14949: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14950: LD_VAR 0 1
14954: PPUSH
14955: LD_INT 0
14957: PPUSH
14958: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14962: LD_VAR 0 1
14966: PPUSH
14967: LD_OWVAR 3
14971: PUSH
14972: LD_VAR 0 1
14976: DIFF
14977: PPUSH
14978: LD_VAR 0 1
14982: PPUSH
14983: CALL_OW 74
14987: PPUSH
14988: CALL_OW 115
// wait ( 0 0$20 ) ;
14992: LD_INT 700
14994: PPUSH
14995: CALL_OW 67
// SetSide ( un , your_side ) ;
14999: LD_VAR 0 1
15003: PPUSH
15004: LD_OWVAR 2
15008: PPUSH
15009: CALL_OW 235
// end ;
15013: PPOPN 2
15015: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15016: LD_EXP 24
15020: PUSH
15021: LD_EXP 57
15025: AND
15026: IFFALSE 15132
15028: GO 15030
15030: DISABLE
15031: LD_INT 0
15033: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15034: LD_ADDR_VAR 0 1
15038: PUSH
15039: LD_INT 22
15041: PUSH
15042: LD_OWVAR 2
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PUSH
15051: LD_INT 2
15053: PUSH
15054: LD_INT 30
15056: PUSH
15057: LD_INT 0
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: PUSH
15064: LD_INT 30
15066: PUSH
15067: LD_INT 1
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PUSH
15074: EMPTY
15075: LIST
15076: LIST
15077: LIST
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PPUSH
15083: CALL_OW 69
15087: ST_TO_ADDR
// if not depot then
15088: LD_VAR 0 1
15092: NOT
15093: IFFALSE 15097
// exit ;
15095: GO 15132
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15097: LD_VAR 0 1
15101: PUSH
15102: LD_INT 1
15104: ARRAY
15105: PPUSH
15106: CALL_OW 250
15110: PPUSH
15111: LD_VAR 0 1
15115: PUSH
15116: LD_INT 1
15118: ARRAY
15119: PPUSH
15120: CALL_OW 251
15124: PPUSH
15125: LD_INT 70
15127: PPUSH
15128: CALL_OW 495
// end ;
15132: PPOPN 1
15134: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15135: LD_EXP 24
15139: PUSH
15140: LD_EXP 58
15144: AND
15145: IFFALSE 15356
15147: GO 15149
15149: DISABLE
15150: LD_INT 0
15152: PPUSH
15153: PPUSH
15154: PPUSH
15155: PPUSH
15156: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15157: LD_ADDR_VAR 0 5
15161: PUSH
15162: LD_INT 22
15164: PUSH
15165: LD_OWVAR 2
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: LD_INT 21
15176: PUSH
15177: LD_INT 1
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: PPUSH
15188: CALL_OW 69
15192: ST_TO_ADDR
// if not tmp then
15193: LD_VAR 0 5
15197: NOT
15198: IFFALSE 15202
// exit ;
15200: GO 15356
// for i in tmp do
15202: LD_ADDR_VAR 0 1
15206: PUSH
15207: LD_VAR 0 5
15211: PUSH
15212: FOR_IN
15213: IFFALSE 15354
// begin d := rand ( 0 , 5 ) ;
15215: LD_ADDR_VAR 0 4
15219: PUSH
15220: LD_INT 0
15222: PPUSH
15223: LD_INT 5
15225: PPUSH
15226: CALL_OW 12
15230: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15231: LD_ADDR_VAR 0 2
15235: PUSH
15236: LD_VAR 0 1
15240: PPUSH
15241: CALL_OW 250
15245: PPUSH
15246: LD_VAR 0 4
15250: PPUSH
15251: LD_INT 3
15253: PPUSH
15254: LD_INT 12
15256: PPUSH
15257: CALL_OW 12
15261: PPUSH
15262: CALL_OW 272
15266: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15267: LD_ADDR_VAR 0 3
15271: PUSH
15272: LD_VAR 0 1
15276: PPUSH
15277: CALL_OW 251
15281: PPUSH
15282: LD_VAR 0 4
15286: PPUSH
15287: LD_INT 3
15289: PPUSH
15290: LD_INT 12
15292: PPUSH
15293: CALL_OW 12
15297: PPUSH
15298: CALL_OW 273
15302: ST_TO_ADDR
// if ValidHex ( x , y ) then
15303: LD_VAR 0 2
15307: PPUSH
15308: LD_VAR 0 3
15312: PPUSH
15313: CALL_OW 488
15317: IFFALSE 15352
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15319: LD_VAR 0 1
15323: PPUSH
15324: LD_VAR 0 2
15328: PPUSH
15329: LD_VAR 0 3
15333: PPUSH
15334: LD_INT 3
15336: PPUSH
15337: LD_INT 6
15339: PPUSH
15340: CALL_OW 12
15344: PPUSH
15345: LD_INT 1
15347: PPUSH
15348: CALL_OW 483
// end ;
15352: GO 15212
15354: POP
15355: POP
// end ;
15356: PPOPN 5
15358: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15359: LD_EXP 24
15363: PUSH
15364: LD_EXP 59
15368: AND
15369: IFFALSE 15463
15371: GO 15373
15373: DISABLE
15374: LD_INT 0
15376: PPUSH
15377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15378: LD_ADDR_VAR 0 2
15382: PUSH
15383: LD_INT 22
15385: PUSH
15386: LD_OWVAR 2
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PUSH
15395: LD_INT 32
15397: PUSH
15398: LD_INT 1
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: PUSH
15405: LD_INT 21
15407: PUSH
15408: LD_INT 2
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: LIST
15419: PPUSH
15420: CALL_OW 69
15424: ST_TO_ADDR
// if not tmp then
15425: LD_VAR 0 2
15429: NOT
15430: IFFALSE 15434
// exit ;
15432: GO 15463
// for i in tmp do
15434: LD_ADDR_VAR 0 1
15438: PUSH
15439: LD_VAR 0 2
15443: PUSH
15444: FOR_IN
15445: IFFALSE 15461
// SetFuel ( i , 0 ) ;
15447: LD_VAR 0 1
15451: PPUSH
15452: LD_INT 0
15454: PPUSH
15455: CALL_OW 240
15459: GO 15444
15461: POP
15462: POP
// end ;
15463: PPOPN 2
15465: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15466: LD_EXP 24
15470: PUSH
15471: LD_EXP 60
15475: AND
15476: IFFALSE 15542
15478: GO 15480
15480: DISABLE
15481: LD_INT 0
15483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15484: LD_ADDR_VAR 0 1
15488: PUSH
15489: LD_INT 22
15491: PUSH
15492: LD_OWVAR 2
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: LD_INT 30
15503: PUSH
15504: LD_INT 29
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: PPUSH
15515: CALL_OW 69
15519: ST_TO_ADDR
// if not tmp then
15520: LD_VAR 0 1
15524: NOT
15525: IFFALSE 15529
// exit ;
15527: GO 15542
// DestroyUnit ( tmp [ 1 ] ) ;
15529: LD_VAR 0 1
15533: PUSH
15534: LD_INT 1
15536: ARRAY
15537: PPUSH
15538: CALL_OW 65
// end ;
15542: PPOPN 1
15544: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15545: LD_EXP 24
15549: PUSH
15550: LD_EXP 62
15554: AND
15555: IFFALSE 15684
15557: GO 15559
15559: DISABLE
15560: LD_INT 0
15562: PPUSH
// begin uc_side := 0 ;
15563: LD_ADDR_OWVAR 20
15567: PUSH
15568: LD_INT 0
15570: ST_TO_ADDR
// uc_nation := nation_arabian ;
15571: LD_ADDR_OWVAR 21
15575: PUSH
15576: LD_INT 2
15578: ST_TO_ADDR
// hc_gallery :=  ;
15579: LD_ADDR_OWVAR 33
15583: PUSH
15584: LD_STRING 
15586: ST_TO_ADDR
// hc_name :=  ;
15587: LD_ADDR_OWVAR 26
15591: PUSH
15592: LD_STRING 
15594: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15595: LD_INT 1
15597: PPUSH
15598: LD_INT 11
15600: PPUSH
15601: LD_INT 10
15603: PPUSH
15604: CALL_OW 380
// un := CreateHuman ;
15608: LD_ADDR_VAR 0 1
15612: PUSH
15613: CALL_OW 44
15617: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15618: LD_VAR 0 1
15622: PPUSH
15623: LD_INT 1
15625: PPUSH
15626: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15630: LD_INT 35
15632: PPUSH
15633: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15637: LD_VAR 0 1
15641: PPUSH
15642: LD_INT 22
15644: PUSH
15645: LD_OWVAR 2
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: PPUSH
15654: CALL_OW 69
15658: PPUSH
15659: LD_VAR 0 1
15663: PPUSH
15664: CALL_OW 74
15668: PPUSH
15669: CALL_OW 115
// until IsDead ( un ) ;
15673: LD_VAR 0 1
15677: PPUSH
15678: CALL_OW 301
15682: IFFALSE 15630
// end ;
15684: PPOPN 1
15686: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15687: LD_EXP 24
15691: PUSH
15692: LD_EXP 64
15696: AND
15697: IFFALSE 15709
15699: GO 15701
15701: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15702: LD_STRING earthquake(getX(game), 0, 32)
15704: PPUSH
15705: CALL_OW 559
15709: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15710: LD_EXP 24
15714: PUSH
15715: LD_EXP 65
15719: AND
15720: IFFALSE 15811
15722: GO 15724
15724: DISABLE
15725: LD_INT 0
15727: PPUSH
// begin enable ;
15728: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15729: LD_ADDR_VAR 0 1
15733: PUSH
15734: LD_INT 22
15736: PUSH
15737: LD_OWVAR 2
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: PUSH
15746: LD_INT 21
15748: PUSH
15749: LD_INT 2
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: PUSH
15756: LD_INT 33
15758: PUSH
15759: LD_INT 3
15761: PUSH
15762: EMPTY
15763: LIST
15764: LIST
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: LIST
15770: PPUSH
15771: CALL_OW 69
15775: ST_TO_ADDR
// if not tmp then
15776: LD_VAR 0 1
15780: NOT
15781: IFFALSE 15785
// exit ;
15783: GO 15811
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15785: LD_VAR 0 1
15789: PUSH
15790: LD_INT 1
15792: PPUSH
15793: LD_VAR 0 1
15797: PPUSH
15798: CALL_OW 12
15802: ARRAY
15803: PPUSH
15804: LD_INT 1
15806: PPUSH
15807: CALL_OW 234
// end ;
15811: PPOPN 1
15813: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15814: LD_EXP 24
15818: PUSH
15819: LD_EXP 66
15823: AND
15824: IFFALSE 15965
15826: GO 15828
15828: DISABLE
15829: LD_INT 0
15831: PPUSH
15832: PPUSH
15833: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15834: LD_ADDR_VAR 0 3
15838: PUSH
15839: LD_INT 22
15841: PUSH
15842: LD_OWVAR 2
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: PUSH
15851: LD_INT 25
15853: PUSH
15854: LD_INT 1
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: PUSH
15861: EMPTY
15862: LIST
15863: LIST
15864: PPUSH
15865: CALL_OW 69
15869: ST_TO_ADDR
// if not tmp then
15870: LD_VAR 0 3
15874: NOT
15875: IFFALSE 15879
// exit ;
15877: GO 15965
// un := tmp [ rand ( 1 , tmp ) ] ;
15879: LD_ADDR_VAR 0 2
15883: PUSH
15884: LD_VAR 0 3
15888: PUSH
15889: LD_INT 1
15891: PPUSH
15892: LD_VAR 0 3
15896: PPUSH
15897: CALL_OW 12
15901: ARRAY
15902: ST_TO_ADDR
// if Crawls ( un ) then
15903: LD_VAR 0 2
15907: PPUSH
15908: CALL_OW 318
15912: IFFALSE 15923
// ComWalk ( un ) ;
15914: LD_VAR 0 2
15918: PPUSH
15919: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15923: LD_VAR 0 2
15927: PPUSH
15928: LD_INT 9
15930: PPUSH
15931: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15935: LD_INT 28
15937: PPUSH
15938: LD_OWVAR 2
15942: PPUSH
15943: LD_INT 2
15945: PPUSH
15946: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15950: LD_INT 29
15952: PPUSH
15953: LD_OWVAR 2
15957: PPUSH
15958: LD_INT 2
15960: PPUSH
15961: CALL_OW 322
// end ;
15965: PPOPN 3
15967: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15968: LD_EXP 24
15972: PUSH
15973: LD_EXP 67
15977: AND
15978: IFFALSE 16089
15980: GO 15982
15982: DISABLE
15983: LD_INT 0
15985: PPUSH
15986: PPUSH
15987: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15988: LD_ADDR_VAR 0 3
15992: PUSH
15993: LD_INT 22
15995: PUSH
15996: LD_OWVAR 2
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: PUSH
16005: LD_INT 25
16007: PUSH
16008: LD_INT 1
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: PPUSH
16019: CALL_OW 69
16023: ST_TO_ADDR
// if not tmp then
16024: LD_VAR 0 3
16028: NOT
16029: IFFALSE 16033
// exit ;
16031: GO 16089
// un := tmp [ rand ( 1 , tmp ) ] ;
16033: LD_ADDR_VAR 0 2
16037: PUSH
16038: LD_VAR 0 3
16042: PUSH
16043: LD_INT 1
16045: PPUSH
16046: LD_VAR 0 3
16050: PPUSH
16051: CALL_OW 12
16055: ARRAY
16056: ST_TO_ADDR
// if Crawls ( un ) then
16057: LD_VAR 0 2
16061: PPUSH
16062: CALL_OW 318
16066: IFFALSE 16077
// ComWalk ( un ) ;
16068: LD_VAR 0 2
16072: PPUSH
16073: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16077: LD_VAR 0 2
16081: PPUSH
16082: LD_INT 8
16084: PPUSH
16085: CALL_OW 336
// end ;
16089: PPOPN 3
16091: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16092: LD_EXP 24
16096: PUSH
16097: LD_EXP 68
16101: AND
16102: IFFALSE 16246
16104: GO 16106
16106: DISABLE
16107: LD_INT 0
16109: PPUSH
16110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16111: LD_ADDR_VAR 0 2
16115: PUSH
16116: LD_INT 22
16118: PUSH
16119: LD_OWVAR 2
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: PUSH
16128: LD_INT 21
16130: PUSH
16131: LD_INT 2
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PUSH
16138: LD_INT 2
16140: PUSH
16141: LD_INT 34
16143: PUSH
16144: LD_INT 12
16146: PUSH
16147: EMPTY
16148: LIST
16149: LIST
16150: PUSH
16151: LD_INT 34
16153: PUSH
16154: LD_INT 51
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: PUSH
16161: LD_INT 34
16163: PUSH
16164: LD_INT 32
16166: PUSH
16167: EMPTY
16168: LIST
16169: LIST
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: LIST
16181: PPUSH
16182: CALL_OW 69
16186: ST_TO_ADDR
// if not tmp then
16187: LD_VAR 0 2
16191: NOT
16192: IFFALSE 16196
// exit ;
16194: GO 16246
// for i in tmp do
16196: LD_ADDR_VAR 0 1
16200: PUSH
16201: LD_VAR 0 2
16205: PUSH
16206: FOR_IN
16207: IFFALSE 16244
// if GetCargo ( i , mat_artifact ) = 0 then
16209: LD_VAR 0 1
16213: PPUSH
16214: LD_INT 4
16216: PPUSH
16217: CALL_OW 289
16221: PUSH
16222: LD_INT 0
16224: EQUAL
16225: IFFALSE 16242
// SetCargo ( i , mat_siberit , 100 ) ;
16227: LD_VAR 0 1
16231: PPUSH
16232: LD_INT 3
16234: PPUSH
16235: LD_INT 100
16237: PPUSH
16238: CALL_OW 290
16242: GO 16206
16244: POP
16245: POP
// end ;
16246: PPOPN 2
16248: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16249: LD_EXP 24
16253: PUSH
16254: LD_EXP 69
16258: AND
16259: IFFALSE 16442
16261: GO 16263
16263: DISABLE
16264: LD_INT 0
16266: PPUSH
16267: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16268: LD_ADDR_VAR 0 2
16272: PUSH
16273: LD_INT 22
16275: PUSH
16276: LD_OWVAR 2
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: PPUSH
16285: CALL_OW 69
16289: ST_TO_ADDR
// if not tmp then
16290: LD_VAR 0 2
16294: NOT
16295: IFFALSE 16299
// exit ;
16297: GO 16442
// for i := 1 to 2 do
16299: LD_ADDR_VAR 0 1
16303: PUSH
16304: DOUBLE
16305: LD_INT 1
16307: DEC
16308: ST_TO_ADDR
16309: LD_INT 2
16311: PUSH
16312: FOR_TO
16313: IFFALSE 16440
// begin uc_side := your_side ;
16315: LD_ADDR_OWVAR 20
16319: PUSH
16320: LD_OWVAR 2
16324: ST_TO_ADDR
// uc_nation := nation_american ;
16325: LD_ADDR_OWVAR 21
16329: PUSH
16330: LD_INT 1
16332: ST_TO_ADDR
// vc_chassis := us_morphling ;
16333: LD_ADDR_OWVAR 37
16337: PUSH
16338: LD_INT 5
16340: ST_TO_ADDR
// vc_engine := engine_siberite ;
16341: LD_ADDR_OWVAR 39
16345: PUSH
16346: LD_INT 3
16348: ST_TO_ADDR
// vc_control := control_computer ;
16349: LD_ADDR_OWVAR 38
16353: PUSH
16354: LD_INT 3
16356: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16357: LD_ADDR_OWVAR 40
16361: PUSH
16362: LD_INT 10
16364: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16365: LD_VAR 0 2
16369: PUSH
16370: LD_INT 1
16372: ARRAY
16373: PPUSH
16374: CALL_OW 310
16378: NOT
16379: IFFALSE 16426
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16381: CALL_OW 45
16385: PPUSH
16386: LD_VAR 0 2
16390: PUSH
16391: LD_INT 1
16393: ARRAY
16394: PPUSH
16395: CALL_OW 250
16399: PPUSH
16400: LD_VAR 0 2
16404: PUSH
16405: LD_INT 1
16407: ARRAY
16408: PPUSH
16409: CALL_OW 251
16413: PPUSH
16414: LD_INT 12
16416: PPUSH
16417: LD_INT 1
16419: PPUSH
16420: CALL_OW 50
16424: GO 16438
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16426: CALL_OW 45
16430: PPUSH
16431: LD_INT 1
16433: PPUSH
16434: CALL_OW 51
// end ;
16438: GO 16312
16440: POP
16441: POP
// end ;
16442: PPOPN 2
16444: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16445: LD_EXP 24
16449: PUSH
16450: LD_EXP 70
16454: AND
16455: IFFALSE 16677
16457: GO 16459
16459: DISABLE
16460: LD_INT 0
16462: PPUSH
16463: PPUSH
16464: PPUSH
16465: PPUSH
16466: PPUSH
16467: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16468: LD_ADDR_VAR 0 6
16472: PUSH
16473: LD_INT 22
16475: PUSH
16476: LD_OWVAR 2
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: LD_INT 21
16487: PUSH
16488: LD_INT 1
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 3
16497: PUSH
16498: LD_INT 23
16500: PUSH
16501: LD_INT 0
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: LIST
16516: PPUSH
16517: CALL_OW 69
16521: ST_TO_ADDR
// if not tmp then
16522: LD_VAR 0 6
16526: NOT
16527: IFFALSE 16531
// exit ;
16529: GO 16677
// s1 := rand ( 1 , 4 ) ;
16531: LD_ADDR_VAR 0 2
16535: PUSH
16536: LD_INT 1
16538: PPUSH
16539: LD_INT 4
16541: PPUSH
16542: CALL_OW 12
16546: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16547: LD_ADDR_VAR 0 4
16551: PUSH
16552: LD_VAR 0 6
16556: PUSH
16557: LD_INT 1
16559: ARRAY
16560: PPUSH
16561: LD_VAR 0 2
16565: PPUSH
16566: CALL_OW 259
16570: ST_TO_ADDR
// if s1 = 1 then
16571: LD_VAR 0 2
16575: PUSH
16576: LD_INT 1
16578: EQUAL
16579: IFFALSE 16599
// s2 := rand ( 2 , 4 ) else
16581: LD_ADDR_VAR 0 3
16585: PUSH
16586: LD_INT 2
16588: PPUSH
16589: LD_INT 4
16591: PPUSH
16592: CALL_OW 12
16596: ST_TO_ADDR
16597: GO 16607
// s2 := 1 ;
16599: LD_ADDR_VAR 0 3
16603: PUSH
16604: LD_INT 1
16606: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16607: LD_ADDR_VAR 0 5
16611: PUSH
16612: LD_VAR 0 6
16616: PUSH
16617: LD_INT 1
16619: ARRAY
16620: PPUSH
16621: LD_VAR 0 3
16625: PPUSH
16626: CALL_OW 259
16630: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16631: LD_VAR 0 6
16635: PUSH
16636: LD_INT 1
16638: ARRAY
16639: PPUSH
16640: LD_VAR 0 2
16644: PPUSH
16645: LD_VAR 0 5
16649: PPUSH
16650: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16654: LD_VAR 0 6
16658: PUSH
16659: LD_INT 1
16661: ARRAY
16662: PPUSH
16663: LD_VAR 0 3
16667: PPUSH
16668: LD_VAR 0 4
16672: PPUSH
16673: CALL_OW 237
// end ;
16677: PPOPN 6
16679: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16680: LD_EXP 24
16684: PUSH
16685: LD_EXP 71
16689: AND
16690: IFFALSE 16769
16692: GO 16694
16694: DISABLE
16695: LD_INT 0
16697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16698: LD_ADDR_VAR 0 1
16702: PUSH
16703: LD_INT 22
16705: PUSH
16706: LD_OWVAR 2
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PUSH
16715: LD_INT 30
16717: PUSH
16718: LD_INT 3
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: PUSH
16725: EMPTY
16726: LIST
16727: LIST
16728: PPUSH
16729: CALL_OW 69
16733: ST_TO_ADDR
// if not tmp then
16734: LD_VAR 0 1
16738: NOT
16739: IFFALSE 16743
// exit ;
16741: GO 16769
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16743: LD_VAR 0 1
16747: PUSH
16748: LD_INT 1
16750: PPUSH
16751: LD_VAR 0 1
16755: PPUSH
16756: CALL_OW 12
16760: ARRAY
16761: PPUSH
16762: LD_INT 1
16764: PPUSH
16765: CALL_OW 234
// end ;
16769: PPOPN 1
16771: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16772: LD_EXP 24
16776: PUSH
16777: LD_EXP 72
16781: AND
16782: IFFALSE 16894
16784: GO 16786
16786: DISABLE
16787: LD_INT 0
16789: PPUSH
16790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16791: LD_ADDR_VAR 0 2
16795: PUSH
16796: LD_INT 22
16798: PUSH
16799: LD_OWVAR 2
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: PUSH
16808: LD_INT 2
16810: PUSH
16811: LD_INT 30
16813: PUSH
16814: LD_INT 27
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: LD_INT 30
16823: PUSH
16824: LD_INT 26
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 30
16833: PUSH
16834: LD_INT 28
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: PPUSH
16851: CALL_OW 69
16855: ST_TO_ADDR
// if not tmp then
16856: LD_VAR 0 2
16860: NOT
16861: IFFALSE 16865
// exit ;
16863: GO 16894
// for i in tmp do
16865: LD_ADDR_VAR 0 1
16869: PUSH
16870: LD_VAR 0 2
16874: PUSH
16875: FOR_IN
16876: IFFALSE 16892
// SetLives ( i , 1 ) ;
16878: LD_VAR 0 1
16882: PPUSH
16883: LD_INT 1
16885: PPUSH
16886: CALL_OW 234
16890: GO 16875
16892: POP
16893: POP
// end ;
16894: PPOPN 2
16896: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16897: LD_EXP 24
16901: PUSH
16902: LD_EXP 73
16906: AND
16907: IFFALSE 17194
16909: GO 16911
16911: DISABLE
16912: LD_INT 0
16914: PPUSH
16915: PPUSH
16916: PPUSH
// begin i := rand ( 1 , 7 ) ;
16917: LD_ADDR_VAR 0 1
16921: PUSH
16922: LD_INT 1
16924: PPUSH
16925: LD_INT 7
16927: PPUSH
16928: CALL_OW 12
16932: ST_TO_ADDR
// case i of 1 :
16933: LD_VAR 0 1
16937: PUSH
16938: LD_INT 1
16940: DOUBLE
16941: EQUAL
16942: IFTRUE 16946
16944: GO 16956
16946: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16947: LD_STRING earthquake(getX(game), 0, 32)
16949: PPUSH
16950: CALL_OW 559
16954: GO 17194
16956: LD_INT 2
16958: DOUBLE
16959: EQUAL
16960: IFTRUE 16964
16962: GO 16978
16964: POP
// begin ToLua ( displayStucuk(); ) ;
16965: LD_STRING displayStucuk();
16967: PPUSH
16968: CALL_OW 559
// ResetFog ;
16972: CALL_OW 335
// end ; 3 :
16976: GO 17194
16978: LD_INT 3
16980: DOUBLE
16981: EQUAL
16982: IFTRUE 16986
16984: GO 17090
16986: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16987: LD_ADDR_VAR 0 2
16991: PUSH
16992: LD_INT 22
16994: PUSH
16995: LD_OWVAR 2
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: LD_INT 25
17006: PUSH
17007: LD_INT 1
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PPUSH
17018: CALL_OW 69
17022: ST_TO_ADDR
// if not tmp then
17023: LD_VAR 0 2
17027: NOT
17028: IFFALSE 17032
// exit ;
17030: GO 17194
// un := tmp [ rand ( 1 , tmp ) ] ;
17032: LD_ADDR_VAR 0 3
17036: PUSH
17037: LD_VAR 0 2
17041: PUSH
17042: LD_INT 1
17044: PPUSH
17045: LD_VAR 0 2
17049: PPUSH
17050: CALL_OW 12
17054: ARRAY
17055: ST_TO_ADDR
// if Crawls ( un ) then
17056: LD_VAR 0 3
17060: PPUSH
17061: CALL_OW 318
17065: IFFALSE 17076
// ComWalk ( un ) ;
17067: LD_VAR 0 3
17071: PPUSH
17072: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17076: LD_VAR 0 3
17080: PPUSH
17081: LD_INT 8
17083: PPUSH
17084: CALL_OW 336
// end ; 4 :
17088: GO 17194
17090: LD_INT 4
17092: DOUBLE
17093: EQUAL
17094: IFTRUE 17098
17096: GO 17172
17098: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17099: LD_ADDR_VAR 0 2
17103: PUSH
17104: LD_INT 22
17106: PUSH
17107: LD_OWVAR 2
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: PUSH
17116: LD_INT 30
17118: PUSH
17119: LD_INT 29
17121: PUSH
17122: EMPTY
17123: LIST
17124: LIST
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PPUSH
17130: CALL_OW 69
17134: ST_TO_ADDR
// if not tmp then
17135: LD_VAR 0 2
17139: NOT
17140: IFFALSE 17144
// exit ;
17142: GO 17194
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17144: LD_VAR 0 2
17148: PUSH
17149: LD_INT 1
17151: ARRAY
17152: PPUSH
17153: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17157: LD_VAR 0 2
17161: PUSH
17162: LD_INT 1
17164: ARRAY
17165: PPUSH
17166: CALL_OW 65
// end ; 5 .. 7 :
17170: GO 17194
17172: LD_INT 5
17174: DOUBLE
17175: GREATEREQUAL
17176: IFFALSE 17184
17178: LD_INT 7
17180: DOUBLE
17181: LESSEQUAL
17182: IFTRUE 17186
17184: GO 17193
17186: POP
// StreamSibBomb ; end ;
17187: CALL 13431 0 0
17191: GO 17194
17193: POP
// end ;
17194: PPOPN 3
17196: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17197: LD_EXP 24
17201: PUSH
17202: LD_EXP 74
17206: AND
17207: IFFALSE 17363
17209: GO 17211
17211: DISABLE
17212: LD_INT 0
17214: PPUSH
17215: PPUSH
17216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17217: LD_ADDR_VAR 0 2
17221: PUSH
17222: LD_INT 81
17224: PUSH
17225: LD_OWVAR 2
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: PUSH
17234: LD_INT 2
17236: PUSH
17237: LD_INT 21
17239: PUSH
17240: LD_INT 1
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PUSH
17247: LD_INT 21
17249: PUSH
17250: LD_INT 2
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: LIST
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: PPUSH
17266: CALL_OW 69
17270: ST_TO_ADDR
// if not tmp then
17271: LD_VAR 0 2
17275: NOT
17276: IFFALSE 17280
// exit ;
17278: GO 17363
// p := 0 ;
17280: LD_ADDR_VAR 0 3
17284: PUSH
17285: LD_INT 0
17287: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17288: LD_INT 35
17290: PPUSH
17291: CALL_OW 67
// p := p + 1 ;
17295: LD_ADDR_VAR 0 3
17299: PUSH
17300: LD_VAR 0 3
17304: PUSH
17305: LD_INT 1
17307: PLUS
17308: ST_TO_ADDR
// for i in tmp do
17309: LD_ADDR_VAR 0 1
17313: PUSH
17314: LD_VAR 0 2
17318: PUSH
17319: FOR_IN
17320: IFFALSE 17351
// if GetLives ( i ) < 1000 then
17322: LD_VAR 0 1
17326: PPUSH
17327: CALL_OW 256
17331: PUSH
17332: LD_INT 1000
17334: LESS
17335: IFFALSE 17349
// SetLives ( i , 1000 ) ;
17337: LD_VAR 0 1
17341: PPUSH
17342: LD_INT 1000
17344: PPUSH
17345: CALL_OW 234
17349: GO 17319
17351: POP
17352: POP
// until p > 20 ;
17353: LD_VAR 0 3
17357: PUSH
17358: LD_INT 20
17360: GREATER
17361: IFFALSE 17288
// end ;
17363: PPOPN 3
17365: END
// every 0 0$1 trigger StreamModeActive and sTime do
17366: LD_EXP 24
17370: PUSH
17371: LD_EXP 75
17375: AND
17376: IFFALSE 17411
17378: GO 17380
17380: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17381: LD_INT 28
17383: PPUSH
17384: LD_OWVAR 2
17388: PPUSH
17389: LD_INT 2
17391: PPUSH
17392: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17396: LD_INT 30
17398: PPUSH
17399: LD_OWVAR 2
17403: PPUSH
17404: LD_INT 2
17406: PPUSH
17407: CALL_OW 322
// end ;
17411: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17412: LD_EXP 24
17416: PUSH
17417: LD_EXP 76
17421: AND
17422: IFFALSE 17543
17424: GO 17426
17426: DISABLE
17427: LD_INT 0
17429: PPUSH
17430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17431: LD_ADDR_VAR 0 2
17435: PUSH
17436: LD_INT 22
17438: PUSH
17439: LD_OWVAR 2
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: PUSH
17448: LD_INT 21
17450: PUSH
17451: LD_INT 1
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: PUSH
17458: LD_INT 3
17460: PUSH
17461: LD_INT 23
17463: PUSH
17464: LD_INT 0
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: LIST
17479: PPUSH
17480: CALL_OW 69
17484: ST_TO_ADDR
// if not tmp then
17485: LD_VAR 0 2
17489: NOT
17490: IFFALSE 17494
// exit ;
17492: GO 17543
// for i in tmp do
17494: LD_ADDR_VAR 0 1
17498: PUSH
17499: LD_VAR 0 2
17503: PUSH
17504: FOR_IN
17505: IFFALSE 17541
// begin if Crawls ( i ) then
17507: LD_VAR 0 1
17511: PPUSH
17512: CALL_OW 318
17516: IFFALSE 17527
// ComWalk ( i ) ;
17518: LD_VAR 0 1
17522: PPUSH
17523: CALL_OW 138
// SetClass ( i , 2 ) ;
17527: LD_VAR 0 1
17531: PPUSH
17532: LD_INT 2
17534: PPUSH
17535: CALL_OW 336
// end ;
17539: GO 17504
17541: POP
17542: POP
// end ;
17543: PPOPN 2
17545: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17546: LD_EXP 24
17550: PUSH
17551: LD_EXP 77
17555: AND
17556: IFFALSE 17844
17558: GO 17560
17560: DISABLE
17561: LD_INT 0
17563: PPUSH
17564: PPUSH
17565: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17566: LD_OWVAR 2
17570: PPUSH
17571: LD_INT 9
17573: PPUSH
17574: LD_INT 1
17576: PPUSH
17577: LD_INT 1
17579: PPUSH
17580: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17584: LD_INT 9
17586: PPUSH
17587: LD_OWVAR 2
17591: PPUSH
17592: CALL_OW 343
// uc_side := 9 ;
17596: LD_ADDR_OWVAR 20
17600: PUSH
17601: LD_INT 9
17603: ST_TO_ADDR
// uc_nation := 2 ;
17604: LD_ADDR_OWVAR 21
17608: PUSH
17609: LD_INT 2
17611: ST_TO_ADDR
// hc_name := Dark Warrior ;
17612: LD_ADDR_OWVAR 26
17616: PUSH
17617: LD_STRING Dark Warrior
17619: ST_TO_ADDR
// hc_gallery :=  ;
17620: LD_ADDR_OWVAR 33
17624: PUSH
17625: LD_STRING 
17627: ST_TO_ADDR
// hc_noskilllimit := true ;
17628: LD_ADDR_OWVAR 76
17632: PUSH
17633: LD_INT 1
17635: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17636: LD_ADDR_OWVAR 31
17640: PUSH
17641: LD_INT 30
17643: PUSH
17644: LD_INT 30
17646: PUSH
17647: LD_INT 30
17649: PUSH
17650: LD_INT 30
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: ST_TO_ADDR
// un := CreateHuman ;
17659: LD_ADDR_VAR 0 3
17663: PUSH
17664: CALL_OW 44
17668: ST_TO_ADDR
// hc_noskilllimit := false ;
17669: LD_ADDR_OWVAR 76
17673: PUSH
17674: LD_INT 0
17676: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17677: LD_VAR 0 3
17681: PPUSH
17682: LD_INT 1
17684: PPUSH
17685: CALL_OW 51
// ToLua ( playRanger() ) ;
17689: LD_STRING playRanger()
17691: PPUSH
17692: CALL_OW 559
// p := 0 ;
17696: LD_ADDR_VAR 0 2
17700: PUSH
17701: LD_INT 0
17703: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17704: LD_INT 35
17706: PPUSH
17707: CALL_OW 67
// p := p + 1 ;
17711: LD_ADDR_VAR 0 2
17715: PUSH
17716: LD_VAR 0 2
17720: PUSH
17721: LD_INT 1
17723: PLUS
17724: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17725: LD_VAR 0 3
17729: PPUSH
17730: CALL_OW 256
17734: PUSH
17735: LD_INT 1000
17737: LESS
17738: IFFALSE 17752
// SetLives ( un , 1000 ) ;
17740: LD_VAR 0 3
17744: PPUSH
17745: LD_INT 1000
17747: PPUSH
17748: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17752: LD_VAR 0 3
17756: PPUSH
17757: LD_INT 81
17759: PUSH
17760: LD_OWVAR 2
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: PUSH
17769: LD_INT 91
17771: PUSH
17772: LD_VAR 0 3
17776: PUSH
17777: LD_INT 30
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: LIST
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PPUSH
17789: CALL_OW 69
17793: PPUSH
17794: LD_VAR 0 3
17798: PPUSH
17799: CALL_OW 74
17803: PPUSH
17804: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17808: LD_VAR 0 2
17812: PUSH
17813: LD_INT 80
17815: GREATER
17816: PUSH
17817: LD_VAR 0 3
17821: PPUSH
17822: CALL_OW 301
17826: OR
17827: IFFALSE 17704
// if un then
17829: LD_VAR 0 3
17833: IFFALSE 17844
// RemoveUnit ( un ) ;
17835: LD_VAR 0 3
17839: PPUSH
17840: CALL_OW 64
// end ;
17844: PPOPN 3
17846: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17847: LD_EXP 78
17851: IFFALSE 17967
17853: GO 17855
17855: DISABLE
17856: LD_INT 0
17858: PPUSH
17859: PPUSH
17860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17861: LD_ADDR_VAR 0 2
17865: PUSH
17866: LD_INT 81
17868: PUSH
17869: LD_OWVAR 2
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: LD_INT 21
17880: PUSH
17881: LD_INT 1
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: EMPTY
17889: LIST
17890: LIST
17891: PPUSH
17892: CALL_OW 69
17896: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17897: LD_STRING playComputer()
17899: PPUSH
17900: CALL_OW 559
// if not tmp then
17904: LD_VAR 0 2
17908: NOT
17909: IFFALSE 17913
// exit ;
17911: GO 17967
// for i in tmp do
17913: LD_ADDR_VAR 0 1
17917: PUSH
17918: LD_VAR 0 2
17922: PUSH
17923: FOR_IN
17924: IFFALSE 17965
// for j := 1 to 4 do
17926: LD_ADDR_VAR 0 3
17930: PUSH
17931: DOUBLE
17932: LD_INT 1
17934: DEC
17935: ST_TO_ADDR
17936: LD_INT 4
17938: PUSH
17939: FOR_TO
17940: IFFALSE 17961
// SetSkill ( i , j , 10 ) ;
17942: LD_VAR 0 1
17946: PPUSH
17947: LD_VAR 0 3
17951: PPUSH
17952: LD_INT 10
17954: PPUSH
17955: CALL_OW 237
17959: GO 17939
17961: POP
17962: POP
17963: GO 17923
17965: POP
17966: POP
// end ;
17967: PPOPN 3
17969: END
// every 0 0$1 trigger s30 do var i , tmp ;
17970: LD_EXP 79
17974: IFFALSE 18043
17976: GO 17978
17978: DISABLE
17979: LD_INT 0
17981: PPUSH
17982: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17983: LD_ADDR_VAR 0 2
17987: PUSH
17988: LD_INT 22
17990: PUSH
17991: LD_OWVAR 2
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: PPUSH
18000: CALL_OW 69
18004: ST_TO_ADDR
// if not tmp then
18005: LD_VAR 0 2
18009: NOT
18010: IFFALSE 18014
// exit ;
18012: GO 18043
// for i in tmp do
18014: LD_ADDR_VAR 0 1
18018: PUSH
18019: LD_VAR 0 2
18023: PUSH
18024: FOR_IN
18025: IFFALSE 18041
// SetLives ( i , 300 ) ;
18027: LD_VAR 0 1
18031: PPUSH
18032: LD_INT 300
18034: PPUSH
18035: CALL_OW 234
18039: GO 18024
18041: POP
18042: POP
// end ;
18043: PPOPN 2
18045: END
// every 0 0$1 trigger s60 do var i , tmp ;
18046: LD_EXP 80
18050: IFFALSE 18119
18052: GO 18054
18054: DISABLE
18055: LD_INT 0
18057: PPUSH
18058: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18059: LD_ADDR_VAR 0 2
18063: PUSH
18064: LD_INT 22
18066: PUSH
18067: LD_OWVAR 2
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: PPUSH
18076: CALL_OW 69
18080: ST_TO_ADDR
// if not tmp then
18081: LD_VAR 0 2
18085: NOT
18086: IFFALSE 18090
// exit ;
18088: GO 18119
// for i in tmp do
18090: LD_ADDR_VAR 0 1
18094: PUSH
18095: LD_VAR 0 2
18099: PUSH
18100: FOR_IN
18101: IFFALSE 18117
// SetLives ( i , 600 ) ;
18103: LD_VAR 0 1
18107: PPUSH
18108: LD_INT 600
18110: PPUSH
18111: CALL_OW 234
18115: GO 18100
18117: POP
18118: POP
// end ;
18119: PPOPN 2
18121: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18122: LD_INT 0
18124: PPUSH
// case cmd of 301 :
18125: LD_VAR 0 1
18129: PUSH
18130: LD_INT 301
18132: DOUBLE
18133: EQUAL
18134: IFTRUE 18138
18136: GO 18170
18138: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18139: LD_VAR 0 6
18143: PPUSH
18144: LD_VAR 0 7
18148: PPUSH
18149: LD_VAR 0 8
18153: PPUSH
18154: LD_VAR 0 4
18158: PPUSH
18159: LD_VAR 0 5
18163: PPUSH
18164: CALL 19371 0 5
18168: GO 18291
18170: LD_INT 302
18172: DOUBLE
18173: EQUAL
18174: IFTRUE 18178
18176: GO 18215
18178: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18179: LD_VAR 0 6
18183: PPUSH
18184: LD_VAR 0 7
18188: PPUSH
18189: LD_VAR 0 8
18193: PPUSH
18194: LD_VAR 0 9
18198: PPUSH
18199: LD_VAR 0 4
18203: PPUSH
18204: LD_VAR 0 5
18208: PPUSH
18209: CALL 19462 0 6
18213: GO 18291
18215: LD_INT 303
18217: DOUBLE
18218: EQUAL
18219: IFTRUE 18223
18221: GO 18260
18223: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18224: LD_VAR 0 6
18228: PPUSH
18229: LD_VAR 0 7
18233: PPUSH
18234: LD_VAR 0 8
18238: PPUSH
18239: LD_VAR 0 9
18243: PPUSH
18244: LD_VAR 0 4
18248: PPUSH
18249: LD_VAR 0 5
18253: PPUSH
18254: CALL 18296 0 6
18258: GO 18291
18260: LD_INT 304
18262: DOUBLE
18263: EQUAL
18264: IFTRUE 18268
18266: GO 18290
18268: POP
// hHackTeleport ( unit , x , y ) ; end ;
18269: LD_VAR 0 2
18273: PPUSH
18274: LD_VAR 0 4
18278: PPUSH
18279: LD_VAR 0 5
18283: PPUSH
18284: CALL 20055 0 3
18288: GO 18291
18290: POP
// end ;
18291: LD_VAR 0 12
18295: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18296: LD_INT 0
18298: PPUSH
18299: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18300: LD_VAR 0 1
18304: PUSH
18305: LD_INT 1
18307: LESS
18308: PUSH
18309: LD_VAR 0 1
18313: PUSH
18314: LD_INT 3
18316: GREATER
18317: OR
18318: PUSH
18319: LD_VAR 0 5
18323: PPUSH
18324: LD_VAR 0 6
18328: PPUSH
18329: CALL_OW 428
18333: OR
18334: IFFALSE 18338
// exit ;
18336: GO 19058
// uc_side := your_side ;
18338: LD_ADDR_OWVAR 20
18342: PUSH
18343: LD_OWVAR 2
18347: ST_TO_ADDR
// uc_nation := nation ;
18348: LD_ADDR_OWVAR 21
18352: PUSH
18353: LD_VAR 0 1
18357: ST_TO_ADDR
// bc_level = 1 ;
18358: LD_ADDR_OWVAR 43
18362: PUSH
18363: LD_INT 1
18365: ST_TO_ADDR
// case btype of 1 :
18366: LD_VAR 0 2
18370: PUSH
18371: LD_INT 1
18373: DOUBLE
18374: EQUAL
18375: IFTRUE 18379
18377: GO 18390
18379: POP
// bc_type := b_depot ; 2 :
18380: LD_ADDR_OWVAR 42
18384: PUSH
18385: LD_INT 0
18387: ST_TO_ADDR
18388: GO 19002
18390: LD_INT 2
18392: DOUBLE
18393: EQUAL
18394: IFTRUE 18398
18396: GO 18409
18398: POP
// bc_type := b_warehouse ; 3 :
18399: LD_ADDR_OWVAR 42
18403: PUSH
18404: LD_INT 1
18406: ST_TO_ADDR
18407: GO 19002
18409: LD_INT 3
18411: DOUBLE
18412: EQUAL
18413: IFTRUE 18417
18415: GO 18428
18417: POP
// bc_type := b_lab ; 4 .. 9 :
18418: LD_ADDR_OWVAR 42
18422: PUSH
18423: LD_INT 6
18425: ST_TO_ADDR
18426: GO 19002
18428: LD_INT 4
18430: DOUBLE
18431: GREATEREQUAL
18432: IFFALSE 18440
18434: LD_INT 9
18436: DOUBLE
18437: LESSEQUAL
18438: IFTRUE 18442
18440: GO 18494
18442: POP
// begin bc_type := b_lab_half ;
18443: LD_ADDR_OWVAR 42
18447: PUSH
18448: LD_INT 7
18450: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18451: LD_ADDR_OWVAR 44
18455: PUSH
18456: LD_INT 10
18458: PUSH
18459: LD_INT 11
18461: PUSH
18462: LD_INT 12
18464: PUSH
18465: LD_INT 15
18467: PUSH
18468: LD_INT 14
18470: PUSH
18471: LD_INT 13
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: PUSH
18482: LD_VAR 0 2
18486: PUSH
18487: LD_INT 3
18489: MINUS
18490: ARRAY
18491: ST_TO_ADDR
// end ; 10 .. 13 :
18492: GO 19002
18494: LD_INT 10
18496: DOUBLE
18497: GREATEREQUAL
18498: IFFALSE 18506
18500: LD_INT 13
18502: DOUBLE
18503: LESSEQUAL
18504: IFTRUE 18508
18506: GO 18585
18508: POP
// begin bc_type := b_lab_full ;
18509: LD_ADDR_OWVAR 42
18513: PUSH
18514: LD_INT 8
18516: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18517: LD_ADDR_OWVAR 44
18521: PUSH
18522: LD_INT 10
18524: PUSH
18525: LD_INT 12
18527: PUSH
18528: LD_INT 14
18530: PUSH
18531: LD_INT 13
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: PUSH
18540: LD_VAR 0 2
18544: PUSH
18545: LD_INT 9
18547: MINUS
18548: ARRAY
18549: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18550: LD_ADDR_OWVAR 45
18554: PUSH
18555: LD_INT 11
18557: PUSH
18558: LD_INT 15
18560: PUSH
18561: LD_INT 12
18563: PUSH
18564: LD_INT 15
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: PUSH
18573: LD_VAR 0 2
18577: PUSH
18578: LD_INT 9
18580: MINUS
18581: ARRAY
18582: ST_TO_ADDR
// end ; 14 :
18583: GO 19002
18585: LD_INT 14
18587: DOUBLE
18588: EQUAL
18589: IFTRUE 18593
18591: GO 18604
18593: POP
// bc_type := b_workshop ; 15 :
18594: LD_ADDR_OWVAR 42
18598: PUSH
18599: LD_INT 2
18601: ST_TO_ADDR
18602: GO 19002
18604: LD_INT 15
18606: DOUBLE
18607: EQUAL
18608: IFTRUE 18612
18610: GO 18623
18612: POP
// bc_type := b_factory ; 16 :
18613: LD_ADDR_OWVAR 42
18617: PUSH
18618: LD_INT 3
18620: ST_TO_ADDR
18621: GO 19002
18623: LD_INT 16
18625: DOUBLE
18626: EQUAL
18627: IFTRUE 18631
18629: GO 18642
18631: POP
// bc_type := b_ext_gun ; 17 :
18632: LD_ADDR_OWVAR 42
18636: PUSH
18637: LD_INT 17
18639: ST_TO_ADDR
18640: GO 19002
18642: LD_INT 17
18644: DOUBLE
18645: EQUAL
18646: IFTRUE 18650
18648: GO 18678
18650: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18651: LD_ADDR_OWVAR 42
18655: PUSH
18656: LD_INT 19
18658: PUSH
18659: LD_INT 23
18661: PUSH
18662: LD_INT 19
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: LIST
18669: PUSH
18670: LD_VAR 0 1
18674: ARRAY
18675: ST_TO_ADDR
18676: GO 19002
18678: LD_INT 18
18680: DOUBLE
18681: EQUAL
18682: IFTRUE 18686
18684: GO 18697
18686: POP
// bc_type := b_ext_radar ; 19 :
18687: LD_ADDR_OWVAR 42
18691: PUSH
18692: LD_INT 20
18694: ST_TO_ADDR
18695: GO 19002
18697: LD_INT 19
18699: DOUBLE
18700: EQUAL
18701: IFTRUE 18705
18703: GO 18716
18705: POP
// bc_type := b_ext_radio ; 20 :
18706: LD_ADDR_OWVAR 42
18710: PUSH
18711: LD_INT 22
18713: ST_TO_ADDR
18714: GO 19002
18716: LD_INT 20
18718: DOUBLE
18719: EQUAL
18720: IFTRUE 18724
18722: GO 18735
18724: POP
// bc_type := b_ext_siberium ; 21 :
18725: LD_ADDR_OWVAR 42
18729: PUSH
18730: LD_INT 21
18732: ST_TO_ADDR
18733: GO 19002
18735: LD_INT 21
18737: DOUBLE
18738: EQUAL
18739: IFTRUE 18743
18741: GO 18754
18743: POP
// bc_type := b_ext_computer ; 22 :
18744: LD_ADDR_OWVAR 42
18748: PUSH
18749: LD_INT 24
18751: ST_TO_ADDR
18752: GO 19002
18754: LD_INT 22
18756: DOUBLE
18757: EQUAL
18758: IFTRUE 18762
18760: GO 18773
18762: POP
// bc_type := b_ext_track ; 23 :
18763: LD_ADDR_OWVAR 42
18767: PUSH
18768: LD_INT 16
18770: ST_TO_ADDR
18771: GO 19002
18773: LD_INT 23
18775: DOUBLE
18776: EQUAL
18777: IFTRUE 18781
18779: GO 18792
18781: POP
// bc_type := b_ext_laser ; 24 :
18782: LD_ADDR_OWVAR 42
18786: PUSH
18787: LD_INT 25
18789: ST_TO_ADDR
18790: GO 19002
18792: LD_INT 24
18794: DOUBLE
18795: EQUAL
18796: IFTRUE 18800
18798: GO 18811
18800: POP
// bc_type := b_control_tower ; 25 :
18801: LD_ADDR_OWVAR 42
18805: PUSH
18806: LD_INT 36
18808: ST_TO_ADDR
18809: GO 19002
18811: LD_INT 25
18813: DOUBLE
18814: EQUAL
18815: IFTRUE 18819
18817: GO 18830
18819: POP
// bc_type := b_breastwork ; 26 :
18820: LD_ADDR_OWVAR 42
18824: PUSH
18825: LD_INT 31
18827: ST_TO_ADDR
18828: GO 19002
18830: LD_INT 26
18832: DOUBLE
18833: EQUAL
18834: IFTRUE 18838
18836: GO 18849
18838: POP
// bc_type := b_bunker ; 27 :
18839: LD_ADDR_OWVAR 42
18843: PUSH
18844: LD_INT 32
18846: ST_TO_ADDR
18847: GO 19002
18849: LD_INT 27
18851: DOUBLE
18852: EQUAL
18853: IFTRUE 18857
18855: GO 18868
18857: POP
// bc_type := b_turret ; 28 :
18858: LD_ADDR_OWVAR 42
18862: PUSH
18863: LD_INT 33
18865: ST_TO_ADDR
18866: GO 19002
18868: LD_INT 28
18870: DOUBLE
18871: EQUAL
18872: IFTRUE 18876
18874: GO 18887
18876: POP
// bc_type := b_armoury ; 29 :
18877: LD_ADDR_OWVAR 42
18881: PUSH
18882: LD_INT 4
18884: ST_TO_ADDR
18885: GO 19002
18887: LD_INT 29
18889: DOUBLE
18890: EQUAL
18891: IFTRUE 18895
18893: GO 18906
18895: POP
// bc_type := b_barracks ; 30 :
18896: LD_ADDR_OWVAR 42
18900: PUSH
18901: LD_INT 5
18903: ST_TO_ADDR
18904: GO 19002
18906: LD_INT 30
18908: DOUBLE
18909: EQUAL
18910: IFTRUE 18914
18912: GO 18925
18914: POP
// bc_type := b_solar_power ; 31 :
18915: LD_ADDR_OWVAR 42
18919: PUSH
18920: LD_INT 27
18922: ST_TO_ADDR
18923: GO 19002
18925: LD_INT 31
18927: DOUBLE
18928: EQUAL
18929: IFTRUE 18933
18931: GO 18944
18933: POP
// bc_type := b_oil_power ; 32 :
18934: LD_ADDR_OWVAR 42
18938: PUSH
18939: LD_INT 26
18941: ST_TO_ADDR
18942: GO 19002
18944: LD_INT 32
18946: DOUBLE
18947: EQUAL
18948: IFTRUE 18952
18950: GO 18963
18952: POP
// bc_type := b_siberite_power ; 33 :
18953: LD_ADDR_OWVAR 42
18957: PUSH
18958: LD_INT 28
18960: ST_TO_ADDR
18961: GO 19002
18963: LD_INT 33
18965: DOUBLE
18966: EQUAL
18967: IFTRUE 18971
18969: GO 18982
18971: POP
// bc_type := b_oil_mine ; 34 :
18972: LD_ADDR_OWVAR 42
18976: PUSH
18977: LD_INT 29
18979: ST_TO_ADDR
18980: GO 19002
18982: LD_INT 34
18984: DOUBLE
18985: EQUAL
18986: IFTRUE 18990
18988: GO 19001
18990: POP
// bc_type := b_siberite_mine ; end ;
18991: LD_ADDR_OWVAR 42
18995: PUSH
18996: LD_INT 30
18998: ST_TO_ADDR
18999: GO 19002
19001: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19002: LD_ADDR_VAR 0 8
19006: PUSH
19007: LD_VAR 0 5
19011: PPUSH
19012: LD_VAR 0 6
19016: PPUSH
19017: LD_VAR 0 3
19021: PPUSH
19022: CALL_OW 47
19026: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19027: LD_OWVAR 42
19031: PUSH
19032: LD_INT 32
19034: PUSH
19035: LD_INT 33
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: IN
19042: IFFALSE 19058
// PlaceWeaponTurret ( b , weapon ) ;
19044: LD_VAR 0 8
19048: PPUSH
19049: LD_VAR 0 4
19053: PPUSH
19054: CALL_OW 431
// end ;
19058: LD_VAR 0 7
19062: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19063: LD_INT 0
19065: PPUSH
19066: PPUSH
19067: PPUSH
19068: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19069: LD_ADDR_VAR 0 4
19073: PUSH
19074: LD_INT 22
19076: PUSH
19077: LD_OWVAR 2
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PUSH
19086: LD_INT 2
19088: PUSH
19089: LD_INT 30
19091: PUSH
19092: LD_INT 0
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: LD_INT 30
19101: PUSH
19102: LD_INT 1
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: LIST
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PPUSH
19118: CALL_OW 69
19122: ST_TO_ADDR
// if not tmp then
19123: LD_VAR 0 4
19127: NOT
19128: IFFALSE 19132
// exit ;
19130: GO 19191
// for i in tmp do
19132: LD_ADDR_VAR 0 2
19136: PUSH
19137: LD_VAR 0 4
19141: PUSH
19142: FOR_IN
19143: IFFALSE 19189
// for j = 1 to 3 do
19145: LD_ADDR_VAR 0 3
19149: PUSH
19150: DOUBLE
19151: LD_INT 1
19153: DEC
19154: ST_TO_ADDR
19155: LD_INT 3
19157: PUSH
19158: FOR_TO
19159: IFFALSE 19185
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19161: LD_VAR 0 2
19165: PPUSH
19166: CALL_OW 274
19170: PPUSH
19171: LD_VAR 0 3
19175: PPUSH
19176: LD_INT 99999
19178: PPUSH
19179: CALL_OW 277
19183: GO 19158
19185: POP
19186: POP
19187: GO 19142
19189: POP
19190: POP
// end ;
19191: LD_VAR 0 1
19195: RET
// export function hHackSetLevel10 ; var i , j ; begin
19196: LD_INT 0
19198: PPUSH
19199: PPUSH
19200: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19201: LD_ADDR_VAR 0 2
19205: PUSH
19206: LD_INT 21
19208: PUSH
19209: LD_INT 1
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PPUSH
19216: CALL_OW 69
19220: PUSH
19221: FOR_IN
19222: IFFALSE 19274
// if IsSelected ( i ) then
19224: LD_VAR 0 2
19228: PPUSH
19229: CALL_OW 306
19233: IFFALSE 19272
// begin for j := 1 to 4 do
19235: LD_ADDR_VAR 0 3
19239: PUSH
19240: DOUBLE
19241: LD_INT 1
19243: DEC
19244: ST_TO_ADDR
19245: LD_INT 4
19247: PUSH
19248: FOR_TO
19249: IFFALSE 19270
// SetSkill ( i , j , 10 ) ;
19251: LD_VAR 0 2
19255: PPUSH
19256: LD_VAR 0 3
19260: PPUSH
19261: LD_INT 10
19263: PPUSH
19264: CALL_OW 237
19268: GO 19248
19270: POP
19271: POP
// end ;
19272: GO 19221
19274: POP
19275: POP
// end ;
19276: LD_VAR 0 1
19280: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19281: LD_INT 0
19283: PPUSH
19284: PPUSH
19285: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19286: LD_ADDR_VAR 0 2
19290: PUSH
19291: LD_INT 22
19293: PUSH
19294: LD_OWVAR 2
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PUSH
19303: LD_INT 21
19305: PUSH
19306: LD_INT 1
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PPUSH
19317: CALL_OW 69
19321: PUSH
19322: FOR_IN
19323: IFFALSE 19364
// begin for j := 1 to 4 do
19325: LD_ADDR_VAR 0 3
19329: PUSH
19330: DOUBLE
19331: LD_INT 1
19333: DEC
19334: ST_TO_ADDR
19335: LD_INT 4
19337: PUSH
19338: FOR_TO
19339: IFFALSE 19360
// SetSkill ( i , j , 10 ) ;
19341: LD_VAR 0 2
19345: PPUSH
19346: LD_VAR 0 3
19350: PPUSH
19351: LD_INT 10
19353: PPUSH
19354: CALL_OW 237
19358: GO 19338
19360: POP
19361: POP
// end ;
19362: GO 19322
19364: POP
19365: POP
// end ;
19366: LD_VAR 0 1
19370: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19371: LD_INT 0
19373: PPUSH
// uc_side := your_side ;
19374: LD_ADDR_OWVAR 20
19378: PUSH
19379: LD_OWVAR 2
19383: ST_TO_ADDR
// uc_nation := nation ;
19384: LD_ADDR_OWVAR 21
19388: PUSH
19389: LD_VAR 0 1
19393: ST_TO_ADDR
// InitHc ;
19394: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19398: LD_INT 0
19400: PPUSH
19401: LD_VAR 0 2
19405: PPUSH
19406: LD_VAR 0 3
19410: PPUSH
19411: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19415: LD_VAR 0 4
19419: PPUSH
19420: LD_VAR 0 5
19424: PPUSH
19425: CALL_OW 428
19429: PUSH
19430: LD_INT 0
19432: EQUAL
19433: IFFALSE 19457
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19435: CALL_OW 44
19439: PPUSH
19440: LD_VAR 0 4
19444: PPUSH
19445: LD_VAR 0 5
19449: PPUSH
19450: LD_INT 1
19452: PPUSH
19453: CALL_OW 48
// end ;
19457: LD_VAR 0 6
19461: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19462: LD_INT 0
19464: PPUSH
19465: PPUSH
// uc_side := your_side ;
19466: LD_ADDR_OWVAR 20
19470: PUSH
19471: LD_OWVAR 2
19475: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19476: LD_VAR 0 1
19480: PUSH
19481: LD_INT 1
19483: PUSH
19484: LD_INT 2
19486: PUSH
19487: LD_INT 3
19489: PUSH
19490: LD_INT 4
19492: PUSH
19493: LD_INT 5
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: IN
19503: IFFALSE 19515
// uc_nation := nation_american else
19505: LD_ADDR_OWVAR 21
19509: PUSH
19510: LD_INT 1
19512: ST_TO_ADDR
19513: GO 19558
// if chassis in [ 11 , 12 , 13 , 14 ] then
19515: LD_VAR 0 1
19519: PUSH
19520: LD_INT 11
19522: PUSH
19523: LD_INT 12
19525: PUSH
19526: LD_INT 13
19528: PUSH
19529: LD_INT 14
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: IN
19538: IFFALSE 19550
// uc_nation := nation_arabian else
19540: LD_ADDR_OWVAR 21
19544: PUSH
19545: LD_INT 2
19547: ST_TO_ADDR
19548: GO 19558
// uc_nation := nation_russian ;
19550: LD_ADDR_OWVAR 21
19554: PUSH
19555: LD_INT 3
19557: ST_TO_ADDR
// vc_chassis := chassis ;
19558: LD_ADDR_OWVAR 37
19562: PUSH
19563: LD_VAR 0 1
19567: ST_TO_ADDR
// vc_engine := engine ;
19568: LD_ADDR_OWVAR 39
19572: PUSH
19573: LD_VAR 0 2
19577: ST_TO_ADDR
// vc_control := control ;
19578: LD_ADDR_OWVAR 38
19582: PUSH
19583: LD_VAR 0 3
19587: ST_TO_ADDR
// vc_weapon := weapon ;
19588: LD_ADDR_OWVAR 40
19592: PUSH
19593: LD_VAR 0 4
19597: ST_TO_ADDR
// un := CreateVehicle ;
19598: LD_ADDR_VAR 0 8
19602: PUSH
19603: CALL_OW 45
19607: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19608: LD_VAR 0 8
19612: PPUSH
19613: LD_INT 0
19615: PPUSH
19616: LD_INT 5
19618: PPUSH
19619: CALL_OW 12
19623: PPUSH
19624: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19628: LD_VAR 0 8
19632: PPUSH
19633: LD_VAR 0 5
19637: PPUSH
19638: LD_VAR 0 6
19642: PPUSH
19643: LD_INT 1
19645: PPUSH
19646: CALL_OW 48
// end ;
19650: LD_VAR 0 7
19654: RET
// export hInvincible ; every 1 do
19655: GO 19657
19657: DISABLE
// hInvincible := [ ] ;
19658: LD_ADDR_EXP 81
19662: PUSH
19663: EMPTY
19664: ST_TO_ADDR
19665: END
// every 10 do var i ;
19666: GO 19668
19668: DISABLE
19669: LD_INT 0
19671: PPUSH
// begin enable ;
19672: ENABLE
// if not hInvincible then
19673: LD_EXP 81
19677: NOT
19678: IFFALSE 19682
// exit ;
19680: GO 19726
// for i in hInvincible do
19682: LD_ADDR_VAR 0 1
19686: PUSH
19687: LD_EXP 81
19691: PUSH
19692: FOR_IN
19693: IFFALSE 19724
// if GetLives ( i ) < 1000 then
19695: LD_VAR 0 1
19699: PPUSH
19700: CALL_OW 256
19704: PUSH
19705: LD_INT 1000
19707: LESS
19708: IFFALSE 19722
// SetLives ( i , 1000 ) ;
19710: LD_VAR 0 1
19714: PPUSH
19715: LD_INT 1000
19717: PPUSH
19718: CALL_OW 234
19722: GO 19692
19724: POP
19725: POP
// end ;
19726: PPOPN 1
19728: END
// export function hHackInvincible ; var i ; begin
19729: LD_INT 0
19731: PPUSH
19732: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19733: LD_ADDR_VAR 0 2
19737: PUSH
19738: LD_INT 2
19740: PUSH
19741: LD_INT 21
19743: PUSH
19744: LD_INT 1
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: LD_INT 21
19753: PUSH
19754: LD_INT 2
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: LIST
19765: PPUSH
19766: CALL_OW 69
19770: PUSH
19771: FOR_IN
19772: IFFALSE 19833
// if IsSelected ( i ) then
19774: LD_VAR 0 2
19778: PPUSH
19779: CALL_OW 306
19783: IFFALSE 19831
// begin if i in hInvincible then
19785: LD_VAR 0 2
19789: PUSH
19790: LD_EXP 81
19794: IN
19795: IFFALSE 19815
// hInvincible := hInvincible diff i else
19797: LD_ADDR_EXP 81
19801: PUSH
19802: LD_EXP 81
19806: PUSH
19807: LD_VAR 0 2
19811: DIFF
19812: ST_TO_ADDR
19813: GO 19831
// hInvincible := hInvincible union i ;
19815: LD_ADDR_EXP 81
19819: PUSH
19820: LD_EXP 81
19824: PUSH
19825: LD_VAR 0 2
19829: UNION
19830: ST_TO_ADDR
// end ;
19831: GO 19771
19833: POP
19834: POP
// end ;
19835: LD_VAR 0 1
19839: RET
// export function hHackInvisible ; var i , j ; begin
19840: LD_INT 0
19842: PPUSH
19843: PPUSH
19844: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19845: LD_ADDR_VAR 0 2
19849: PUSH
19850: LD_INT 21
19852: PUSH
19853: LD_INT 1
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PPUSH
19860: CALL_OW 69
19864: PUSH
19865: FOR_IN
19866: IFFALSE 19890
// if IsSelected ( i ) then
19868: LD_VAR 0 2
19872: PPUSH
19873: CALL_OW 306
19877: IFFALSE 19888
// ComForceInvisible ( i ) ;
19879: LD_VAR 0 2
19883: PPUSH
19884: CALL_OW 496
19888: GO 19865
19890: POP
19891: POP
// end ;
19892: LD_VAR 0 1
19896: RET
// export function hHackChangeYourSide ; begin
19897: LD_INT 0
19899: PPUSH
// if your_side = 8 then
19900: LD_OWVAR 2
19904: PUSH
19905: LD_INT 8
19907: EQUAL
19908: IFFALSE 19920
// your_side := 0 else
19910: LD_ADDR_OWVAR 2
19914: PUSH
19915: LD_INT 0
19917: ST_TO_ADDR
19918: GO 19934
// your_side := your_side + 1 ;
19920: LD_ADDR_OWVAR 2
19924: PUSH
19925: LD_OWVAR 2
19929: PUSH
19930: LD_INT 1
19932: PLUS
19933: ST_TO_ADDR
// end ;
19934: LD_VAR 0 1
19938: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19939: LD_INT 0
19941: PPUSH
19942: PPUSH
19943: PPUSH
// for i in all_units do
19944: LD_ADDR_VAR 0 2
19948: PUSH
19949: LD_OWVAR 3
19953: PUSH
19954: FOR_IN
19955: IFFALSE 20033
// if IsSelected ( i ) then
19957: LD_VAR 0 2
19961: PPUSH
19962: CALL_OW 306
19966: IFFALSE 20031
// begin j := GetSide ( i ) ;
19968: LD_ADDR_VAR 0 3
19972: PUSH
19973: LD_VAR 0 2
19977: PPUSH
19978: CALL_OW 255
19982: ST_TO_ADDR
// if j = 8 then
19983: LD_VAR 0 3
19987: PUSH
19988: LD_INT 8
19990: EQUAL
19991: IFFALSE 20003
// j := 0 else
19993: LD_ADDR_VAR 0 3
19997: PUSH
19998: LD_INT 0
20000: ST_TO_ADDR
20001: GO 20017
// j := j + 1 ;
20003: LD_ADDR_VAR 0 3
20007: PUSH
20008: LD_VAR 0 3
20012: PUSH
20013: LD_INT 1
20015: PLUS
20016: ST_TO_ADDR
// SetSide ( i , j ) ;
20017: LD_VAR 0 2
20021: PPUSH
20022: LD_VAR 0 3
20026: PPUSH
20027: CALL_OW 235
// end ;
20031: GO 19954
20033: POP
20034: POP
// end ;
20035: LD_VAR 0 1
20039: RET
// export function hHackFog ; begin
20040: LD_INT 0
20042: PPUSH
// FogOff ( true ) ;
20043: LD_INT 1
20045: PPUSH
20046: CALL_OW 344
// end ;
20050: LD_VAR 0 1
20054: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20055: LD_INT 0
20057: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20058: LD_VAR 0 1
20062: PPUSH
20063: LD_VAR 0 2
20067: PPUSH
20068: LD_VAR 0 3
20072: PPUSH
20073: LD_INT 1
20075: PPUSH
20076: LD_INT 1
20078: PPUSH
20079: CALL_OW 483
// CenterOnXY ( x , y ) ;
20083: LD_VAR 0 2
20087: PPUSH
20088: LD_VAR 0 3
20092: PPUSH
20093: CALL_OW 84
// end ;
20097: LD_VAR 0 4
20101: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
20102: LD_INT 0
20104: PPUSH
20105: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
20106: LD_VAR 0 1
20110: NOT
20111: PUSH
20112: LD_VAR 0 2
20116: PPUSH
20117: LD_VAR 0 3
20121: PPUSH
20122: CALL_OW 488
20126: NOT
20127: OR
20128: PUSH
20129: LD_VAR 0 1
20133: PPUSH
20134: CALL_OW 266
20138: PUSH
20139: LD_INT 3
20141: NONEQUAL
20142: PUSH
20143: LD_VAR 0 1
20147: PPUSH
20148: CALL_OW 247
20152: PUSH
20153: LD_INT 1
20155: EQUAL
20156: NOT
20157: AND
20158: OR
20159: IFFALSE 20163
// exit ;
20161: GO 20312
// if GetType ( factory ) = unit_human then
20163: LD_VAR 0 1
20167: PPUSH
20168: CALL_OW 247
20172: PUSH
20173: LD_INT 1
20175: EQUAL
20176: IFFALSE 20193
// factory := IsInUnit ( factory ) ;
20178: LD_ADDR_VAR 0 1
20182: PUSH
20183: LD_VAR 0 1
20187: PPUSH
20188: CALL_OW 310
20192: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20193: LD_VAR 0 1
20197: PPUSH
20198: CALL_OW 266
20202: PUSH
20203: LD_INT 3
20205: NONEQUAL
20206: IFFALSE 20210
// exit ;
20208: GO 20312
// if HexInfo ( x , y ) = factory then
20210: LD_VAR 0 2
20214: PPUSH
20215: LD_VAR 0 3
20219: PPUSH
20220: CALL_OW 428
20224: PUSH
20225: LD_VAR 0 1
20229: EQUAL
20230: IFFALSE 20257
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20232: LD_ADDR_EXP 82
20236: PUSH
20237: LD_EXP 82
20241: PPUSH
20242: LD_VAR 0 1
20246: PPUSH
20247: LD_INT 0
20249: PPUSH
20250: CALL_OW 1
20254: ST_TO_ADDR
20255: GO 20308
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
20257: LD_ADDR_EXP 82
20261: PUSH
20262: LD_EXP 82
20266: PPUSH
20267: LD_VAR 0 1
20271: PPUSH
20272: LD_VAR 0 1
20276: PPUSH
20277: CALL_OW 255
20281: PUSH
20282: LD_VAR 0 1
20286: PUSH
20287: LD_VAR 0 2
20291: PUSH
20292: LD_VAR 0 3
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: PPUSH
20303: CALL_OW 1
20307: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20308: CALL 20317 0 0
// end ;
20312: LD_VAR 0 4
20316: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
20317: LD_INT 0
20319: PPUSH
20320: PPUSH
20321: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20322: LD_STRING resetFactoryWaypoint();
20324: PPUSH
20325: CALL_OW 559
// if factoryWaypoints then
20329: LD_EXP 82
20333: IFFALSE 20459
// begin list := PrepareArray ( factoryWaypoints ) ;
20335: LD_ADDR_VAR 0 3
20339: PUSH
20340: LD_EXP 82
20344: PPUSH
20345: CALL 66909 0 1
20349: ST_TO_ADDR
// for i := 1 to list do
20350: LD_ADDR_VAR 0 2
20354: PUSH
20355: DOUBLE
20356: LD_INT 1
20358: DEC
20359: ST_TO_ADDR
20360: LD_VAR 0 3
20364: PUSH
20365: FOR_TO
20366: IFFALSE 20457
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20368: LD_STRING setFactoryWaypointXY(
20370: PUSH
20371: LD_VAR 0 3
20375: PUSH
20376: LD_VAR 0 2
20380: ARRAY
20381: PUSH
20382: LD_INT 1
20384: ARRAY
20385: STR
20386: PUSH
20387: LD_STRING ,
20389: STR
20390: PUSH
20391: LD_VAR 0 3
20395: PUSH
20396: LD_VAR 0 2
20400: ARRAY
20401: PUSH
20402: LD_INT 2
20404: ARRAY
20405: STR
20406: PUSH
20407: LD_STRING ,
20409: STR
20410: PUSH
20411: LD_VAR 0 3
20415: PUSH
20416: LD_VAR 0 2
20420: ARRAY
20421: PUSH
20422: LD_INT 3
20424: ARRAY
20425: STR
20426: PUSH
20427: LD_STRING ,
20429: STR
20430: PUSH
20431: LD_VAR 0 3
20435: PUSH
20436: LD_VAR 0 2
20440: ARRAY
20441: PUSH
20442: LD_INT 4
20444: ARRAY
20445: STR
20446: PUSH
20447: LD_STRING )
20449: STR
20450: PPUSH
20451: CALL_OW 559
20455: GO 20365
20457: POP
20458: POP
// end ; end ;
20459: LD_VAR 0 1
20463: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20464: LD_INT 0
20466: PPUSH
// if HexInfo ( x , y ) = warehouse then
20467: LD_VAR 0 2
20471: PPUSH
20472: LD_VAR 0 3
20476: PPUSH
20477: CALL_OW 428
20481: PUSH
20482: LD_VAR 0 1
20486: EQUAL
20487: IFFALSE 20514
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20489: LD_ADDR_EXP 83
20493: PUSH
20494: LD_EXP 83
20498: PPUSH
20499: LD_VAR 0 1
20503: PPUSH
20504: LD_INT 0
20506: PPUSH
20507: CALL_OW 1
20511: ST_TO_ADDR
20512: GO 20565
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20514: LD_ADDR_EXP 83
20518: PUSH
20519: LD_EXP 83
20523: PPUSH
20524: LD_VAR 0 1
20528: PPUSH
20529: LD_VAR 0 1
20533: PPUSH
20534: CALL_OW 255
20538: PUSH
20539: LD_VAR 0 1
20543: PUSH
20544: LD_VAR 0 2
20548: PUSH
20549: LD_VAR 0 3
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: PPUSH
20560: CALL_OW 1
20564: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20565: CALL 20574 0 0
// end ;
20569: LD_VAR 0 4
20573: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
20574: LD_INT 0
20576: PPUSH
20577: PPUSH
20578: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
20579: LD_STRING resetWarehouseGatheringPoints();
20581: PPUSH
20582: CALL_OW 559
// if warehouseGatheringPoints then
20586: LD_EXP 83
20590: IFFALSE 20716
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
20592: LD_ADDR_VAR 0 3
20596: PUSH
20597: LD_EXP 83
20601: PPUSH
20602: CALL 66909 0 1
20606: ST_TO_ADDR
// for i := 1 to list do
20607: LD_ADDR_VAR 0 2
20611: PUSH
20612: DOUBLE
20613: LD_INT 1
20615: DEC
20616: ST_TO_ADDR
20617: LD_VAR 0 3
20621: PUSH
20622: FOR_TO
20623: IFFALSE 20714
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20625: LD_STRING setWarehouseGatheringPointXY(
20627: PUSH
20628: LD_VAR 0 3
20632: PUSH
20633: LD_VAR 0 2
20637: ARRAY
20638: PUSH
20639: LD_INT 1
20641: ARRAY
20642: STR
20643: PUSH
20644: LD_STRING ,
20646: STR
20647: PUSH
20648: LD_VAR 0 3
20652: PUSH
20653: LD_VAR 0 2
20657: ARRAY
20658: PUSH
20659: LD_INT 2
20661: ARRAY
20662: STR
20663: PUSH
20664: LD_STRING ,
20666: STR
20667: PUSH
20668: LD_VAR 0 3
20672: PUSH
20673: LD_VAR 0 2
20677: ARRAY
20678: PUSH
20679: LD_INT 3
20681: ARRAY
20682: STR
20683: PUSH
20684: LD_STRING ,
20686: STR
20687: PUSH
20688: LD_VAR 0 3
20692: PUSH
20693: LD_VAR 0 2
20697: ARRAY
20698: PUSH
20699: LD_INT 4
20701: ARRAY
20702: STR
20703: PUSH
20704: LD_STRING )
20706: STR
20707: PPUSH
20708: CALL_OW 559
20712: GO 20622
20714: POP
20715: POP
// end ; end ;
20716: LD_VAR 0 1
20720: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20721: LD_EXP 83
20725: IFFALSE 21410
20727: GO 20729
20729: DISABLE
20730: LD_INT 0
20732: PPUSH
20733: PPUSH
20734: PPUSH
20735: PPUSH
20736: PPUSH
20737: PPUSH
20738: PPUSH
20739: PPUSH
20740: PPUSH
// begin enable ;
20741: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
20742: LD_ADDR_VAR 0 3
20746: PUSH
20747: LD_EXP 83
20751: PPUSH
20752: CALL 66909 0 1
20756: ST_TO_ADDR
// if not list then
20757: LD_VAR 0 3
20761: NOT
20762: IFFALSE 20766
// exit ;
20764: GO 21410
// for i := 1 to list do
20766: LD_ADDR_VAR 0 1
20770: PUSH
20771: DOUBLE
20772: LD_INT 1
20774: DEC
20775: ST_TO_ADDR
20776: LD_VAR 0 3
20780: PUSH
20781: FOR_TO
20782: IFFALSE 21408
// begin depot := list [ i ] [ 2 ] ;
20784: LD_ADDR_VAR 0 8
20788: PUSH
20789: LD_VAR 0 3
20793: PUSH
20794: LD_VAR 0 1
20798: ARRAY
20799: PUSH
20800: LD_INT 2
20802: ARRAY
20803: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
20804: LD_ADDR_VAR 0 5
20808: PUSH
20809: LD_VAR 0 3
20813: PUSH
20814: LD_VAR 0 1
20818: ARRAY
20819: PUSH
20820: LD_INT 1
20822: ARRAY
20823: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
20824: LD_VAR 0 8
20828: PPUSH
20829: CALL_OW 301
20833: PUSH
20834: LD_VAR 0 5
20838: PUSH
20839: LD_VAR 0 8
20843: PPUSH
20844: CALL_OW 255
20848: NONEQUAL
20849: OR
20850: IFFALSE 20879
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
20852: LD_ADDR_EXP 83
20856: PUSH
20857: LD_EXP 83
20861: PPUSH
20862: LD_VAR 0 8
20866: PPUSH
20867: LD_INT 0
20869: PPUSH
20870: CALL_OW 1
20874: ST_TO_ADDR
// exit ;
20875: POP
20876: POP
20877: GO 21410
// end ; x := list [ i ] [ 3 ] ;
20879: LD_ADDR_VAR 0 6
20883: PUSH
20884: LD_VAR 0 3
20888: PUSH
20889: LD_VAR 0 1
20893: ARRAY
20894: PUSH
20895: LD_INT 3
20897: ARRAY
20898: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
20899: LD_ADDR_VAR 0 7
20903: PUSH
20904: LD_VAR 0 3
20908: PUSH
20909: LD_VAR 0 1
20913: ARRAY
20914: PUSH
20915: LD_INT 4
20917: ARRAY
20918: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
20919: LD_ADDR_VAR 0 9
20923: PUSH
20924: LD_VAR 0 6
20928: PPUSH
20929: LD_VAR 0 7
20933: PPUSH
20934: LD_INT 16
20936: PPUSH
20937: CALL 65497 0 3
20941: ST_TO_ADDR
// if not cratesNearbyPoint then
20942: LD_VAR 0 9
20946: NOT
20947: IFFALSE 20953
// exit ;
20949: POP
20950: POP
20951: GO 21410
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
20953: LD_ADDR_VAR 0 4
20957: PUSH
20958: LD_INT 22
20960: PUSH
20961: LD_VAR 0 5
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: LD_INT 3
20972: PUSH
20973: LD_INT 60
20975: PUSH
20976: EMPTY
20977: LIST
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: LD_INT 91
20985: PUSH
20986: LD_VAR 0 8
20990: PUSH
20991: LD_INT 6
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: LIST
20998: PUSH
20999: LD_INT 2
21001: PUSH
21002: LD_INT 25
21004: PUSH
21005: LD_INT 2
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PUSH
21012: LD_INT 25
21014: PUSH
21015: LD_INT 16
21017: PUSH
21018: EMPTY
21019: LIST
21020: LIST
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: LIST
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: PPUSH
21033: CALL_OW 69
21037: PUSH
21038: LD_VAR 0 8
21042: PPUSH
21043: CALL_OW 313
21047: PPUSH
21048: LD_INT 3
21050: PUSH
21051: LD_INT 60
21053: PUSH
21054: EMPTY
21055: LIST
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 2
21063: PUSH
21064: LD_INT 25
21066: PUSH
21067: LD_INT 2
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: PUSH
21074: LD_INT 25
21076: PUSH
21077: LD_INT 16
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: LIST
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PPUSH
21093: CALL_OW 72
21097: UNION
21098: ST_TO_ADDR
// if tmp then
21099: LD_VAR 0 4
21103: IFFALSE 21183
// begin tmp := ShrinkArray ( tmp , 3 ) ;
21105: LD_ADDR_VAR 0 4
21109: PUSH
21110: LD_VAR 0 4
21114: PPUSH
21115: LD_INT 3
21117: PPUSH
21118: CALL 63466 0 2
21122: ST_TO_ADDR
// for j in tmp do
21123: LD_ADDR_VAR 0 2
21127: PUSH
21128: LD_VAR 0 4
21132: PUSH
21133: FOR_IN
21134: IFFALSE 21177
// begin if IsInUnit ( j ) then
21136: LD_VAR 0 2
21140: PPUSH
21141: CALL_OW 310
21145: IFFALSE 21156
// ComExit ( j ) ;
21147: LD_VAR 0 2
21151: PPUSH
21152: CALL 63549 0 1
// AddComCollect ( j , x , y ) ;
21156: LD_VAR 0 2
21160: PPUSH
21161: LD_VAR 0 6
21165: PPUSH
21166: LD_VAR 0 7
21170: PPUSH
21171: CALL_OW 177
// end ;
21175: GO 21133
21177: POP
21178: POP
// exit ;
21179: POP
21180: POP
21181: GO 21410
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
21183: LD_ADDR_VAR 0 4
21187: PUSH
21188: LD_INT 22
21190: PUSH
21191: LD_VAR 0 5
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: LD_INT 91
21202: PUSH
21203: LD_VAR 0 8
21207: PUSH
21208: LD_INT 8
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: LIST
21215: PUSH
21216: LD_INT 2
21218: PUSH
21219: LD_INT 34
21221: PUSH
21222: LD_INT 12
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PUSH
21229: LD_INT 34
21231: PUSH
21232: LD_INT 51
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: PUSH
21239: LD_INT 34
21241: PUSH
21242: LD_INT 32
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 34
21251: PUSH
21252: LD_INT 89
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: LIST
21270: PPUSH
21271: CALL_OW 69
21275: ST_TO_ADDR
// if tmp then
21276: LD_VAR 0 4
21280: IFFALSE 21406
// begin for j in tmp do
21282: LD_ADDR_VAR 0 2
21286: PUSH
21287: LD_VAR 0 4
21291: PUSH
21292: FOR_IN
21293: IFFALSE 21404
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
21295: LD_VAR 0 2
21299: PPUSH
21300: CALL_OW 262
21304: PUSH
21305: LD_INT 3
21307: EQUAL
21308: PUSH
21309: LD_VAR 0 2
21313: PPUSH
21314: CALL_OW 261
21318: PUSH
21319: LD_INT 20
21321: GREATER
21322: OR
21323: PUSH
21324: LD_VAR 0 2
21328: PPUSH
21329: CALL_OW 314
21333: NOT
21334: AND
21335: PUSH
21336: LD_VAR 0 2
21340: PPUSH
21341: CALL_OW 263
21345: PUSH
21346: LD_INT 1
21348: NONEQUAL
21349: PUSH
21350: LD_VAR 0 2
21354: PPUSH
21355: CALL_OW 311
21359: OR
21360: AND
21361: IFFALSE 21402
// begin ComCollect ( j , x , y ) ;
21363: LD_VAR 0 2
21367: PPUSH
21368: LD_VAR 0 6
21372: PPUSH
21373: LD_VAR 0 7
21377: PPUSH
21378: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
21382: LD_VAR 0 2
21386: PPUSH
21387: LD_VAR 0 8
21391: PPUSH
21392: CALL_OW 172
// exit ;
21396: POP
21397: POP
21398: POP
21399: POP
21400: GO 21410
// end ;
21402: GO 21292
21404: POP
21405: POP
// end ; end ;
21406: GO 20781
21408: POP
21409: POP
// end ; end_of_file
21410: PPOPN 9
21412: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21413: LD_INT 0
21415: PPUSH
21416: PPUSH
21417: PPUSH
21418: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21419: LD_VAR 0 1
21423: PPUSH
21424: CALL_OW 264
21428: PUSH
21429: LD_INT 91
21431: EQUAL
21432: IFFALSE 21504
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21434: LD_INT 68
21436: PPUSH
21437: LD_VAR 0 1
21441: PPUSH
21442: CALL_OW 255
21446: PPUSH
21447: CALL_OW 321
21451: PUSH
21452: LD_INT 2
21454: EQUAL
21455: IFFALSE 21467
// eff := 70 else
21457: LD_ADDR_VAR 0 4
21461: PUSH
21462: LD_INT 70
21464: ST_TO_ADDR
21465: GO 21475
// eff := 30 ;
21467: LD_ADDR_VAR 0 4
21471: PUSH
21472: LD_INT 30
21474: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21475: LD_VAR 0 1
21479: PPUSH
21480: CALL_OW 250
21484: PPUSH
21485: LD_VAR 0 1
21489: PPUSH
21490: CALL_OW 251
21494: PPUSH
21495: LD_VAR 0 4
21499: PPUSH
21500: CALL_OW 495
// end ; end ;
21504: LD_VAR 0 2
21508: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21509: LD_INT 0
21511: PPUSH
// end ;
21512: LD_VAR 0 4
21516: RET
// export function SOS_Command ( cmd ) ; begin
21517: LD_INT 0
21519: PPUSH
// end ;
21520: LD_VAR 0 2
21524: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21525: LD_INT 0
21527: PPUSH
// end ;
21528: LD_VAR 0 6
21532: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
21533: LD_INT 0
21535: PPUSH
21536: PPUSH
// if not vehicle or not factory then
21537: LD_VAR 0 1
21541: NOT
21542: PUSH
21543: LD_VAR 0 2
21547: NOT
21548: OR
21549: IFFALSE 21553
// exit ;
21551: GO 21784
// if factoryWaypoints >= factory then
21553: LD_EXP 82
21557: PUSH
21558: LD_VAR 0 2
21562: GREATEREQUAL
21563: IFFALSE 21784
// if factoryWaypoints [ factory ] then
21565: LD_EXP 82
21569: PUSH
21570: LD_VAR 0 2
21574: ARRAY
21575: IFFALSE 21784
// begin if GetControl ( vehicle ) = control_manual then
21577: LD_VAR 0 1
21581: PPUSH
21582: CALL_OW 263
21586: PUSH
21587: LD_INT 1
21589: EQUAL
21590: IFFALSE 21671
// begin driver := IsDrivenBy ( vehicle ) ;
21592: LD_ADDR_VAR 0 4
21596: PUSH
21597: LD_VAR 0 1
21601: PPUSH
21602: CALL_OW 311
21606: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21607: LD_VAR 0 4
21611: PPUSH
21612: LD_EXP 82
21616: PUSH
21617: LD_VAR 0 2
21621: ARRAY
21622: PUSH
21623: LD_INT 3
21625: ARRAY
21626: PPUSH
21627: LD_EXP 82
21631: PUSH
21632: LD_VAR 0 2
21636: ARRAY
21637: PUSH
21638: LD_INT 4
21640: ARRAY
21641: PPUSH
21642: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21646: LD_VAR 0 4
21650: PPUSH
21651: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21655: LD_VAR 0 4
21659: PPUSH
21660: LD_VAR 0 2
21664: PPUSH
21665: CALL_OW 180
// end else
21669: GO 21784
// if GetControl ( vehicle ) = control_remote then
21671: LD_VAR 0 1
21675: PPUSH
21676: CALL_OW 263
21680: PUSH
21681: LD_INT 2
21683: EQUAL
21684: IFFALSE 21745
// begin wait ( 0 0$2 ) ;
21686: LD_INT 70
21688: PPUSH
21689: CALL_OW 67
// if Connect ( vehicle ) then
21693: LD_VAR 0 1
21697: PPUSH
21698: CALL 33808 0 1
21702: IFFALSE 21743
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21704: LD_VAR 0 1
21708: PPUSH
21709: LD_EXP 82
21713: PUSH
21714: LD_VAR 0 2
21718: ARRAY
21719: PUSH
21720: LD_INT 3
21722: ARRAY
21723: PPUSH
21724: LD_EXP 82
21728: PUSH
21729: LD_VAR 0 2
21733: ARRAY
21734: PUSH
21735: LD_INT 4
21737: ARRAY
21738: PPUSH
21739: CALL_OW 171
// end else
21743: GO 21784
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21745: LD_VAR 0 1
21749: PPUSH
21750: LD_EXP 82
21754: PUSH
21755: LD_VAR 0 2
21759: ARRAY
21760: PUSH
21761: LD_INT 3
21763: ARRAY
21764: PPUSH
21765: LD_EXP 82
21769: PUSH
21770: LD_VAR 0 2
21774: ARRAY
21775: PUSH
21776: LD_INT 4
21778: ARRAY
21779: PPUSH
21780: CALL_OW 171
// end ; end ;
21784: LD_VAR 0 3
21788: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21789: LD_INT 0
21791: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21792: LD_VAR 0 1
21796: PUSH
21797: LD_INT 250
21799: EQUAL
21800: PUSH
21801: LD_VAR 0 2
21805: PPUSH
21806: CALL_OW 264
21810: PUSH
21811: LD_INT 81
21813: EQUAL
21814: AND
21815: IFFALSE 21836
// MinerPlaceMine ( unit , x , y ) ;
21817: LD_VAR 0 2
21821: PPUSH
21822: LD_VAR 0 4
21826: PPUSH
21827: LD_VAR 0 5
21831: PPUSH
21832: CALL 24221 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21836: LD_VAR 0 1
21840: PUSH
21841: LD_INT 251
21843: EQUAL
21844: PUSH
21845: LD_VAR 0 2
21849: PPUSH
21850: CALL_OW 264
21854: PUSH
21855: LD_INT 81
21857: EQUAL
21858: AND
21859: IFFALSE 21880
// MinerDetonateMine ( unit , x , y ) ;
21861: LD_VAR 0 2
21865: PPUSH
21866: LD_VAR 0 4
21870: PPUSH
21871: LD_VAR 0 5
21875: PPUSH
21876: CALL 24496 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21880: LD_VAR 0 1
21884: PUSH
21885: LD_INT 252
21887: EQUAL
21888: PUSH
21889: LD_VAR 0 2
21893: PPUSH
21894: CALL_OW 264
21898: PUSH
21899: LD_INT 81
21901: EQUAL
21902: AND
21903: IFFALSE 21924
// MinerCreateMinefield ( unit , x , y ) ;
21905: LD_VAR 0 2
21909: PPUSH
21910: LD_VAR 0 4
21914: PPUSH
21915: LD_VAR 0 5
21919: PPUSH
21920: CALL 24913 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21924: LD_VAR 0 1
21928: PUSH
21929: LD_INT 253
21931: EQUAL
21932: PUSH
21933: LD_VAR 0 2
21937: PPUSH
21938: CALL_OW 257
21942: PUSH
21943: LD_INT 5
21945: EQUAL
21946: AND
21947: IFFALSE 21968
// ComBinocular ( unit , x , y ) ;
21949: LD_VAR 0 2
21953: PPUSH
21954: LD_VAR 0 4
21958: PPUSH
21959: LD_VAR 0 5
21963: PPUSH
21964: CALL 25282 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21968: LD_VAR 0 1
21972: PUSH
21973: LD_INT 254
21975: EQUAL
21976: PUSH
21977: LD_VAR 0 2
21981: PPUSH
21982: CALL_OW 264
21986: PUSH
21987: LD_INT 99
21989: EQUAL
21990: AND
21991: PUSH
21992: LD_VAR 0 3
21996: PPUSH
21997: CALL_OW 263
22001: PUSH
22002: LD_INT 3
22004: EQUAL
22005: AND
22006: IFFALSE 22022
// HackDestroyVehicle ( unit , selectedUnit ) ;
22008: LD_VAR 0 2
22012: PPUSH
22013: LD_VAR 0 3
22017: PPUSH
22018: CALL 23585 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22022: LD_VAR 0 1
22026: PUSH
22027: LD_INT 255
22029: EQUAL
22030: PUSH
22031: LD_VAR 0 2
22035: PPUSH
22036: CALL_OW 264
22040: PUSH
22041: LD_INT 14
22043: PUSH
22044: LD_INT 53
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: IN
22051: AND
22052: PUSH
22053: LD_VAR 0 4
22057: PPUSH
22058: LD_VAR 0 5
22062: PPUSH
22063: CALL_OW 488
22067: AND
22068: IFFALSE 22092
// CutTreeXYR ( unit , x , y , 12 ) ;
22070: LD_VAR 0 2
22074: PPUSH
22075: LD_VAR 0 4
22079: PPUSH
22080: LD_VAR 0 5
22084: PPUSH
22085: LD_INT 12
22087: PPUSH
22088: CALL 22155 0 4
// if cmd = 256 then
22092: LD_VAR 0 1
22096: PUSH
22097: LD_INT 256
22099: EQUAL
22100: IFFALSE 22121
// SetFactoryWaypoint ( unit , x , y ) ;
22102: LD_VAR 0 2
22106: PPUSH
22107: LD_VAR 0 4
22111: PPUSH
22112: LD_VAR 0 5
22116: PPUSH
22117: CALL 20102 0 3
// if cmd = 257 then
22121: LD_VAR 0 1
22125: PUSH
22126: LD_INT 257
22128: EQUAL
22129: IFFALSE 22150
// SetWarehouseGatheringPoint ( unit , x , y ) ;
22131: LD_VAR 0 2
22135: PPUSH
22136: LD_VAR 0 4
22140: PPUSH
22141: LD_VAR 0 5
22145: PPUSH
22146: CALL 20464 0 3
// end ;
22150: LD_VAR 0 6
22154: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22155: LD_INT 0
22157: PPUSH
22158: PPUSH
22159: PPUSH
22160: PPUSH
22161: PPUSH
22162: PPUSH
22163: PPUSH
22164: PPUSH
22165: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22166: LD_VAR 0 1
22170: NOT
22171: PUSH
22172: LD_VAR 0 2
22176: PPUSH
22177: LD_VAR 0 3
22181: PPUSH
22182: CALL_OW 488
22186: NOT
22187: OR
22188: PUSH
22189: LD_VAR 0 4
22193: NOT
22194: OR
22195: IFFALSE 22199
// exit ;
22197: GO 22539
// list := [ ] ;
22199: LD_ADDR_VAR 0 13
22203: PUSH
22204: EMPTY
22205: ST_TO_ADDR
// if x - r < 0 then
22206: LD_VAR 0 2
22210: PUSH
22211: LD_VAR 0 4
22215: MINUS
22216: PUSH
22217: LD_INT 0
22219: LESS
22220: IFFALSE 22232
// min_x := 0 else
22222: LD_ADDR_VAR 0 7
22226: PUSH
22227: LD_INT 0
22229: ST_TO_ADDR
22230: GO 22248
// min_x := x - r ;
22232: LD_ADDR_VAR 0 7
22236: PUSH
22237: LD_VAR 0 2
22241: PUSH
22242: LD_VAR 0 4
22246: MINUS
22247: ST_TO_ADDR
// if y - r < 0 then
22248: LD_VAR 0 3
22252: PUSH
22253: LD_VAR 0 4
22257: MINUS
22258: PUSH
22259: LD_INT 0
22261: LESS
22262: IFFALSE 22274
// min_y := 0 else
22264: LD_ADDR_VAR 0 8
22268: PUSH
22269: LD_INT 0
22271: ST_TO_ADDR
22272: GO 22290
// min_y := y - r ;
22274: LD_ADDR_VAR 0 8
22278: PUSH
22279: LD_VAR 0 3
22283: PUSH
22284: LD_VAR 0 4
22288: MINUS
22289: ST_TO_ADDR
// max_x := x + r ;
22290: LD_ADDR_VAR 0 9
22294: PUSH
22295: LD_VAR 0 2
22299: PUSH
22300: LD_VAR 0 4
22304: PLUS
22305: ST_TO_ADDR
// max_y := y + r ;
22306: LD_ADDR_VAR 0 10
22310: PUSH
22311: LD_VAR 0 3
22315: PUSH
22316: LD_VAR 0 4
22320: PLUS
22321: ST_TO_ADDR
// for _x = min_x to max_x do
22322: LD_ADDR_VAR 0 11
22326: PUSH
22327: DOUBLE
22328: LD_VAR 0 7
22332: DEC
22333: ST_TO_ADDR
22334: LD_VAR 0 9
22338: PUSH
22339: FOR_TO
22340: IFFALSE 22457
// for _y = min_y to max_y do
22342: LD_ADDR_VAR 0 12
22346: PUSH
22347: DOUBLE
22348: LD_VAR 0 8
22352: DEC
22353: ST_TO_ADDR
22354: LD_VAR 0 10
22358: PUSH
22359: FOR_TO
22360: IFFALSE 22453
// begin if not ValidHex ( _x , _y ) then
22362: LD_VAR 0 11
22366: PPUSH
22367: LD_VAR 0 12
22371: PPUSH
22372: CALL_OW 488
22376: NOT
22377: IFFALSE 22381
// continue ;
22379: GO 22359
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22381: LD_VAR 0 11
22385: PPUSH
22386: LD_VAR 0 12
22390: PPUSH
22391: CALL_OW 351
22395: PUSH
22396: LD_VAR 0 11
22400: PPUSH
22401: LD_VAR 0 12
22405: PPUSH
22406: CALL_OW 554
22410: AND
22411: IFFALSE 22451
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22413: LD_ADDR_VAR 0 13
22417: PUSH
22418: LD_VAR 0 13
22422: PPUSH
22423: LD_VAR 0 13
22427: PUSH
22428: LD_INT 1
22430: PLUS
22431: PPUSH
22432: LD_VAR 0 11
22436: PUSH
22437: LD_VAR 0 12
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PPUSH
22446: CALL_OW 2
22450: ST_TO_ADDR
// end ;
22451: GO 22359
22453: POP
22454: POP
22455: GO 22339
22457: POP
22458: POP
// if not list then
22459: LD_VAR 0 13
22463: NOT
22464: IFFALSE 22468
// exit ;
22466: GO 22539
// for i in list do
22468: LD_ADDR_VAR 0 6
22472: PUSH
22473: LD_VAR 0 13
22477: PUSH
22478: FOR_IN
22479: IFFALSE 22537
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22481: LD_VAR 0 1
22485: PPUSH
22486: LD_STRING M
22488: PUSH
22489: LD_VAR 0 6
22493: PUSH
22494: LD_INT 1
22496: ARRAY
22497: PUSH
22498: LD_VAR 0 6
22502: PUSH
22503: LD_INT 2
22505: ARRAY
22506: PUSH
22507: LD_INT 0
22509: PUSH
22510: LD_INT 0
22512: PUSH
22513: LD_INT 0
22515: PUSH
22516: LD_INT 0
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: PUSH
22528: EMPTY
22529: LIST
22530: PPUSH
22531: CALL_OW 447
22535: GO 22478
22537: POP
22538: POP
// end ;
22539: LD_VAR 0 5
22543: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22544: LD_EXP 85
22548: NOT
22549: IFFALSE 22599
22551: GO 22553
22553: DISABLE
// begin initHack := true ;
22554: LD_ADDR_EXP 85
22558: PUSH
22559: LD_INT 1
22561: ST_TO_ADDR
// hackTanks := [ ] ;
22562: LD_ADDR_EXP 86
22566: PUSH
22567: EMPTY
22568: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22569: LD_ADDR_EXP 87
22573: PUSH
22574: EMPTY
22575: ST_TO_ADDR
// hackLimit := 3 ;
22576: LD_ADDR_EXP 88
22580: PUSH
22581: LD_INT 3
22583: ST_TO_ADDR
// hackDist := 12 ;
22584: LD_ADDR_EXP 89
22588: PUSH
22589: LD_INT 12
22591: ST_TO_ADDR
// hackCounter := [ ] ;
22592: LD_ADDR_EXP 90
22596: PUSH
22597: EMPTY
22598: ST_TO_ADDR
// end ;
22599: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22600: LD_EXP 85
22604: PUSH
22605: LD_INT 34
22607: PUSH
22608: LD_INT 99
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PPUSH
22615: CALL_OW 69
22619: AND
22620: IFFALSE 22873
22622: GO 22624
22624: DISABLE
22625: LD_INT 0
22627: PPUSH
22628: PPUSH
// begin enable ;
22629: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22630: LD_ADDR_VAR 0 1
22634: PUSH
22635: LD_INT 34
22637: PUSH
22638: LD_INT 99
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PPUSH
22645: CALL_OW 69
22649: PUSH
22650: FOR_IN
22651: IFFALSE 22871
// begin if not i in hackTanks then
22653: LD_VAR 0 1
22657: PUSH
22658: LD_EXP 86
22662: IN
22663: NOT
22664: IFFALSE 22747
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22666: LD_ADDR_EXP 86
22670: PUSH
22671: LD_EXP 86
22675: PPUSH
22676: LD_EXP 86
22680: PUSH
22681: LD_INT 1
22683: PLUS
22684: PPUSH
22685: LD_VAR 0 1
22689: PPUSH
22690: CALL_OW 1
22694: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22695: LD_ADDR_EXP 87
22699: PUSH
22700: LD_EXP 87
22704: PPUSH
22705: LD_EXP 87
22709: PUSH
22710: LD_INT 1
22712: PLUS
22713: PPUSH
22714: EMPTY
22715: PPUSH
22716: CALL_OW 1
22720: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22721: LD_ADDR_EXP 90
22725: PUSH
22726: LD_EXP 90
22730: PPUSH
22731: LD_EXP 90
22735: PUSH
22736: LD_INT 1
22738: PLUS
22739: PPUSH
22740: EMPTY
22741: PPUSH
22742: CALL_OW 1
22746: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22747: LD_VAR 0 1
22751: PPUSH
22752: CALL_OW 302
22756: NOT
22757: IFFALSE 22770
// begin HackUnlinkAll ( i ) ;
22759: LD_VAR 0 1
22763: PPUSH
22764: CALL 22876 0 1
// continue ;
22768: GO 22650
// end ; HackCheckCapturedStatus ( i ) ;
22770: LD_VAR 0 1
22774: PPUSH
22775: CALL 23319 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22779: LD_ADDR_VAR 0 2
22783: PUSH
22784: LD_INT 81
22786: PUSH
22787: LD_VAR 0 1
22791: PPUSH
22792: CALL_OW 255
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 33
22803: PUSH
22804: LD_INT 3
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 91
22813: PUSH
22814: LD_VAR 0 1
22818: PUSH
22819: LD_EXP 89
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: LIST
22828: PUSH
22829: LD_INT 50
22831: PUSH
22832: EMPTY
22833: LIST
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: PPUSH
22841: CALL_OW 69
22845: ST_TO_ADDR
// if not tmp then
22846: LD_VAR 0 2
22850: NOT
22851: IFFALSE 22855
// continue ;
22853: GO 22650
// HackLink ( i , tmp ) ;
22855: LD_VAR 0 1
22859: PPUSH
22860: LD_VAR 0 2
22864: PPUSH
22865: CALL 23012 0 2
// end ;
22869: GO 22650
22871: POP
22872: POP
// end ;
22873: PPOPN 2
22875: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22876: LD_INT 0
22878: PPUSH
22879: PPUSH
22880: PPUSH
// if not hack in hackTanks then
22881: LD_VAR 0 1
22885: PUSH
22886: LD_EXP 86
22890: IN
22891: NOT
22892: IFFALSE 22896
// exit ;
22894: GO 23007
// index := GetElementIndex ( hackTanks , hack ) ;
22896: LD_ADDR_VAR 0 4
22900: PUSH
22901: LD_EXP 86
22905: PPUSH
22906: LD_VAR 0 1
22910: PPUSH
22911: CALL 30624 0 2
22915: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22916: LD_EXP 87
22920: PUSH
22921: LD_VAR 0 4
22925: ARRAY
22926: IFFALSE 23007
// begin for i in hackTanksCaptured [ index ] do
22928: LD_ADDR_VAR 0 3
22932: PUSH
22933: LD_EXP 87
22937: PUSH
22938: LD_VAR 0 4
22942: ARRAY
22943: PUSH
22944: FOR_IN
22945: IFFALSE 22971
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22947: LD_VAR 0 3
22951: PUSH
22952: LD_INT 1
22954: ARRAY
22955: PPUSH
22956: LD_VAR 0 3
22960: PUSH
22961: LD_INT 2
22963: ARRAY
22964: PPUSH
22965: CALL_OW 235
22969: GO 22944
22971: POP
22972: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22973: LD_ADDR_EXP 87
22977: PUSH
22978: LD_EXP 87
22982: PPUSH
22983: LD_VAR 0 4
22987: PPUSH
22988: EMPTY
22989: PPUSH
22990: CALL_OW 1
22994: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22995: LD_VAR 0 1
22999: PPUSH
23000: LD_INT 0
23002: PPUSH
23003: CALL_OW 505
// end ; end ;
23007: LD_VAR 0 2
23011: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23012: LD_INT 0
23014: PPUSH
23015: PPUSH
23016: PPUSH
// if not hack in hackTanks or not vehicles then
23017: LD_VAR 0 1
23021: PUSH
23022: LD_EXP 86
23026: IN
23027: NOT
23028: PUSH
23029: LD_VAR 0 2
23033: NOT
23034: OR
23035: IFFALSE 23039
// exit ;
23037: GO 23314
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23039: LD_ADDR_VAR 0 2
23043: PUSH
23044: LD_VAR 0 1
23048: PPUSH
23049: LD_VAR 0 2
23053: PPUSH
23054: LD_INT 1
23056: PPUSH
23057: LD_INT 1
23059: PPUSH
23060: CALL 31274 0 4
23064: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23065: LD_ADDR_VAR 0 5
23069: PUSH
23070: LD_EXP 86
23074: PPUSH
23075: LD_VAR 0 1
23079: PPUSH
23080: CALL 30624 0 2
23084: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23085: LD_EXP 87
23089: PUSH
23090: LD_VAR 0 5
23094: ARRAY
23095: PUSH
23096: LD_EXP 88
23100: LESS
23101: IFFALSE 23290
// begin for i := 1 to vehicles do
23103: LD_ADDR_VAR 0 4
23107: PUSH
23108: DOUBLE
23109: LD_INT 1
23111: DEC
23112: ST_TO_ADDR
23113: LD_VAR 0 2
23117: PUSH
23118: FOR_TO
23119: IFFALSE 23288
// begin if hackTanksCaptured [ index ] = hackLimit then
23121: LD_EXP 87
23125: PUSH
23126: LD_VAR 0 5
23130: ARRAY
23131: PUSH
23132: LD_EXP 88
23136: EQUAL
23137: IFFALSE 23141
// break ;
23139: GO 23288
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23141: LD_ADDR_EXP 90
23145: PUSH
23146: LD_EXP 90
23150: PPUSH
23151: LD_VAR 0 5
23155: PPUSH
23156: LD_EXP 90
23160: PUSH
23161: LD_VAR 0 5
23165: ARRAY
23166: PUSH
23167: LD_INT 1
23169: PLUS
23170: PPUSH
23171: CALL_OW 1
23175: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23176: LD_ADDR_EXP 87
23180: PUSH
23181: LD_EXP 87
23185: PPUSH
23186: LD_VAR 0 5
23190: PUSH
23191: LD_EXP 87
23195: PUSH
23196: LD_VAR 0 5
23200: ARRAY
23201: PUSH
23202: LD_INT 1
23204: PLUS
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PPUSH
23210: LD_VAR 0 2
23214: PUSH
23215: LD_VAR 0 4
23219: ARRAY
23220: PUSH
23221: LD_VAR 0 2
23225: PUSH
23226: LD_VAR 0 4
23230: ARRAY
23231: PPUSH
23232: CALL_OW 255
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: PPUSH
23241: CALL 30839 0 3
23245: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23246: LD_VAR 0 2
23250: PUSH
23251: LD_VAR 0 4
23255: ARRAY
23256: PPUSH
23257: LD_VAR 0 1
23261: PPUSH
23262: CALL_OW 255
23266: PPUSH
23267: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23271: LD_VAR 0 2
23275: PUSH
23276: LD_VAR 0 4
23280: ARRAY
23281: PPUSH
23282: CALL_OW 141
// end ;
23286: GO 23118
23288: POP
23289: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23290: LD_VAR 0 1
23294: PPUSH
23295: LD_EXP 87
23299: PUSH
23300: LD_VAR 0 5
23304: ARRAY
23305: PUSH
23306: LD_INT 0
23308: PLUS
23309: PPUSH
23310: CALL_OW 505
// end ;
23314: LD_VAR 0 3
23318: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23319: LD_INT 0
23321: PPUSH
23322: PPUSH
23323: PPUSH
23324: PPUSH
// if not hack in hackTanks then
23325: LD_VAR 0 1
23329: PUSH
23330: LD_EXP 86
23334: IN
23335: NOT
23336: IFFALSE 23340
// exit ;
23338: GO 23580
// index := GetElementIndex ( hackTanks , hack ) ;
23340: LD_ADDR_VAR 0 4
23344: PUSH
23345: LD_EXP 86
23349: PPUSH
23350: LD_VAR 0 1
23354: PPUSH
23355: CALL 30624 0 2
23359: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23360: LD_ADDR_VAR 0 3
23364: PUSH
23365: DOUBLE
23366: LD_EXP 87
23370: PUSH
23371: LD_VAR 0 4
23375: ARRAY
23376: INC
23377: ST_TO_ADDR
23378: LD_INT 1
23380: PUSH
23381: FOR_DOWNTO
23382: IFFALSE 23554
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23384: LD_ADDR_VAR 0 5
23388: PUSH
23389: LD_EXP 87
23393: PUSH
23394: LD_VAR 0 4
23398: ARRAY
23399: PUSH
23400: LD_VAR 0 3
23404: ARRAY
23405: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23406: LD_VAR 0 5
23410: PUSH
23411: LD_INT 1
23413: ARRAY
23414: PPUSH
23415: CALL_OW 302
23419: NOT
23420: PUSH
23421: LD_VAR 0 5
23425: PUSH
23426: LD_INT 1
23428: ARRAY
23429: PPUSH
23430: CALL_OW 255
23434: PUSH
23435: LD_VAR 0 1
23439: PPUSH
23440: CALL_OW 255
23444: NONEQUAL
23445: OR
23446: IFFALSE 23552
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23448: LD_VAR 0 5
23452: PUSH
23453: LD_INT 1
23455: ARRAY
23456: PPUSH
23457: CALL_OW 305
23461: PUSH
23462: LD_VAR 0 5
23466: PUSH
23467: LD_INT 1
23469: ARRAY
23470: PPUSH
23471: CALL_OW 255
23475: PUSH
23476: LD_VAR 0 1
23480: PPUSH
23481: CALL_OW 255
23485: EQUAL
23486: AND
23487: IFFALSE 23511
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23489: LD_VAR 0 5
23493: PUSH
23494: LD_INT 1
23496: ARRAY
23497: PPUSH
23498: LD_VAR 0 5
23502: PUSH
23503: LD_INT 2
23505: ARRAY
23506: PPUSH
23507: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23511: LD_ADDR_EXP 87
23515: PUSH
23516: LD_EXP 87
23520: PPUSH
23521: LD_VAR 0 4
23525: PPUSH
23526: LD_EXP 87
23530: PUSH
23531: LD_VAR 0 4
23535: ARRAY
23536: PPUSH
23537: LD_VAR 0 3
23541: PPUSH
23542: CALL_OW 3
23546: PPUSH
23547: CALL_OW 1
23551: ST_TO_ADDR
// end ; end ;
23552: GO 23381
23554: POP
23555: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23556: LD_VAR 0 1
23560: PPUSH
23561: LD_EXP 87
23565: PUSH
23566: LD_VAR 0 4
23570: ARRAY
23571: PUSH
23572: LD_INT 0
23574: PLUS
23575: PPUSH
23576: CALL_OW 505
// end ;
23580: LD_VAR 0 2
23584: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23585: LD_INT 0
23587: PPUSH
23588: PPUSH
23589: PPUSH
23590: PPUSH
// if not hack in hackTanks then
23591: LD_VAR 0 1
23595: PUSH
23596: LD_EXP 86
23600: IN
23601: NOT
23602: IFFALSE 23606
// exit ;
23604: GO 23691
// index := GetElementIndex ( hackTanks , hack ) ;
23606: LD_ADDR_VAR 0 5
23610: PUSH
23611: LD_EXP 86
23615: PPUSH
23616: LD_VAR 0 1
23620: PPUSH
23621: CALL 30624 0 2
23625: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23626: LD_ADDR_VAR 0 4
23630: PUSH
23631: DOUBLE
23632: LD_INT 1
23634: DEC
23635: ST_TO_ADDR
23636: LD_EXP 87
23640: PUSH
23641: LD_VAR 0 5
23645: ARRAY
23646: PUSH
23647: FOR_TO
23648: IFFALSE 23689
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23650: LD_EXP 87
23654: PUSH
23655: LD_VAR 0 5
23659: ARRAY
23660: PUSH
23661: LD_VAR 0 4
23665: ARRAY
23666: PUSH
23667: LD_INT 1
23669: ARRAY
23670: PUSH
23671: LD_VAR 0 2
23675: EQUAL
23676: IFFALSE 23687
// KillUnit ( vehicle ) ;
23678: LD_VAR 0 2
23682: PPUSH
23683: CALL_OW 66
23687: GO 23647
23689: POP
23690: POP
// end ;
23691: LD_VAR 0 3
23695: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23696: LD_EXP 91
23700: NOT
23701: IFFALSE 23736
23703: GO 23705
23705: DISABLE
// begin initMiner := true ;
23706: LD_ADDR_EXP 91
23710: PUSH
23711: LD_INT 1
23713: ST_TO_ADDR
// minersList := [ ] ;
23714: LD_ADDR_EXP 92
23718: PUSH
23719: EMPTY
23720: ST_TO_ADDR
// minerMinesList := [ ] ;
23721: LD_ADDR_EXP 93
23725: PUSH
23726: EMPTY
23727: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23728: LD_ADDR_EXP 94
23732: PUSH
23733: LD_INT 5
23735: ST_TO_ADDR
// end ;
23736: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23737: LD_EXP 91
23741: PUSH
23742: LD_INT 34
23744: PUSH
23745: LD_INT 81
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PPUSH
23752: CALL_OW 69
23756: AND
23757: IFFALSE 24218
23759: GO 23761
23761: DISABLE
23762: LD_INT 0
23764: PPUSH
23765: PPUSH
23766: PPUSH
23767: PPUSH
// begin enable ;
23768: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23769: LD_ADDR_VAR 0 1
23773: PUSH
23774: LD_INT 34
23776: PUSH
23777: LD_INT 81
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: PPUSH
23784: CALL_OW 69
23788: PUSH
23789: FOR_IN
23790: IFFALSE 23862
// begin if not i in minersList then
23792: LD_VAR 0 1
23796: PUSH
23797: LD_EXP 92
23801: IN
23802: NOT
23803: IFFALSE 23860
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23805: LD_ADDR_EXP 92
23809: PUSH
23810: LD_EXP 92
23814: PPUSH
23815: LD_EXP 92
23819: PUSH
23820: LD_INT 1
23822: PLUS
23823: PPUSH
23824: LD_VAR 0 1
23828: PPUSH
23829: CALL_OW 1
23833: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23834: LD_ADDR_EXP 93
23838: PUSH
23839: LD_EXP 93
23843: PPUSH
23844: LD_EXP 93
23848: PUSH
23849: LD_INT 1
23851: PLUS
23852: PPUSH
23853: EMPTY
23854: PPUSH
23855: CALL_OW 1
23859: ST_TO_ADDR
// end end ;
23860: GO 23789
23862: POP
23863: POP
// for i := minerMinesList downto 1 do
23864: LD_ADDR_VAR 0 1
23868: PUSH
23869: DOUBLE
23870: LD_EXP 93
23874: INC
23875: ST_TO_ADDR
23876: LD_INT 1
23878: PUSH
23879: FOR_DOWNTO
23880: IFFALSE 24216
// begin if IsLive ( minersList [ i ] ) then
23882: LD_EXP 92
23886: PUSH
23887: LD_VAR 0 1
23891: ARRAY
23892: PPUSH
23893: CALL_OW 300
23897: IFFALSE 23925
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23899: LD_EXP 92
23903: PUSH
23904: LD_VAR 0 1
23908: ARRAY
23909: PPUSH
23910: LD_EXP 93
23914: PUSH
23915: LD_VAR 0 1
23919: ARRAY
23920: PPUSH
23921: CALL_OW 505
// if not minerMinesList [ i ] then
23925: LD_EXP 93
23929: PUSH
23930: LD_VAR 0 1
23934: ARRAY
23935: NOT
23936: IFFALSE 23940
// continue ;
23938: GO 23879
// for j := minerMinesList [ i ] downto 1 do
23940: LD_ADDR_VAR 0 2
23944: PUSH
23945: DOUBLE
23946: LD_EXP 93
23950: PUSH
23951: LD_VAR 0 1
23955: ARRAY
23956: INC
23957: ST_TO_ADDR
23958: LD_INT 1
23960: PUSH
23961: FOR_DOWNTO
23962: IFFALSE 24212
// begin side := GetSide ( minersList [ i ] ) ;
23964: LD_ADDR_VAR 0 3
23968: PUSH
23969: LD_EXP 92
23973: PUSH
23974: LD_VAR 0 1
23978: ARRAY
23979: PPUSH
23980: CALL_OW 255
23984: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23985: LD_ADDR_VAR 0 4
23989: PUSH
23990: LD_EXP 93
23994: PUSH
23995: LD_VAR 0 1
23999: ARRAY
24000: PUSH
24001: LD_VAR 0 2
24005: ARRAY
24006: PUSH
24007: LD_INT 1
24009: ARRAY
24010: PPUSH
24011: LD_EXP 93
24015: PUSH
24016: LD_VAR 0 1
24020: ARRAY
24021: PUSH
24022: LD_VAR 0 2
24026: ARRAY
24027: PUSH
24028: LD_INT 2
24030: ARRAY
24031: PPUSH
24032: CALL_OW 428
24036: ST_TO_ADDR
// if not tmp then
24037: LD_VAR 0 4
24041: NOT
24042: IFFALSE 24046
// continue ;
24044: GO 23961
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24046: LD_VAR 0 4
24050: PUSH
24051: LD_INT 81
24053: PUSH
24054: LD_VAR 0 3
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: PPUSH
24063: CALL_OW 69
24067: IN
24068: PUSH
24069: LD_EXP 93
24073: PUSH
24074: LD_VAR 0 1
24078: ARRAY
24079: PUSH
24080: LD_VAR 0 2
24084: ARRAY
24085: PUSH
24086: LD_INT 1
24088: ARRAY
24089: PPUSH
24090: LD_EXP 93
24094: PUSH
24095: LD_VAR 0 1
24099: ARRAY
24100: PUSH
24101: LD_VAR 0 2
24105: ARRAY
24106: PUSH
24107: LD_INT 2
24109: ARRAY
24110: PPUSH
24111: CALL_OW 458
24115: AND
24116: IFFALSE 24210
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24118: LD_EXP 93
24122: PUSH
24123: LD_VAR 0 1
24127: ARRAY
24128: PUSH
24129: LD_VAR 0 2
24133: ARRAY
24134: PUSH
24135: LD_INT 1
24137: ARRAY
24138: PPUSH
24139: LD_EXP 93
24143: PUSH
24144: LD_VAR 0 1
24148: ARRAY
24149: PUSH
24150: LD_VAR 0 2
24154: ARRAY
24155: PUSH
24156: LD_INT 2
24158: ARRAY
24159: PPUSH
24160: LD_VAR 0 3
24164: PPUSH
24165: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24169: LD_ADDR_EXP 93
24173: PUSH
24174: LD_EXP 93
24178: PPUSH
24179: LD_VAR 0 1
24183: PPUSH
24184: LD_EXP 93
24188: PUSH
24189: LD_VAR 0 1
24193: ARRAY
24194: PPUSH
24195: LD_VAR 0 2
24199: PPUSH
24200: CALL_OW 3
24204: PPUSH
24205: CALL_OW 1
24209: ST_TO_ADDR
// end ; end ;
24210: GO 23961
24212: POP
24213: POP
// end ;
24214: GO 23879
24216: POP
24217: POP
// end ;
24218: PPOPN 4
24220: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24221: LD_INT 0
24223: PPUSH
24224: PPUSH
// result := false ;
24225: LD_ADDR_VAR 0 4
24229: PUSH
24230: LD_INT 0
24232: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24233: LD_VAR 0 1
24237: PPUSH
24238: CALL_OW 264
24242: PUSH
24243: LD_INT 81
24245: EQUAL
24246: NOT
24247: IFFALSE 24251
// exit ;
24249: GO 24491
// index := GetElementIndex ( minersList , unit ) ;
24251: LD_ADDR_VAR 0 5
24255: PUSH
24256: LD_EXP 92
24260: PPUSH
24261: LD_VAR 0 1
24265: PPUSH
24266: CALL 30624 0 2
24270: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24271: LD_EXP 93
24275: PUSH
24276: LD_VAR 0 5
24280: ARRAY
24281: PUSH
24282: LD_EXP 94
24286: GREATEREQUAL
24287: IFFALSE 24291
// exit ;
24289: GO 24491
// ComMoveXY ( unit , x , y ) ;
24291: LD_VAR 0 1
24295: PPUSH
24296: LD_VAR 0 2
24300: PPUSH
24301: LD_VAR 0 3
24305: PPUSH
24306: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24310: LD_INT 35
24312: PPUSH
24313: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24317: LD_VAR 0 1
24321: PPUSH
24322: LD_VAR 0 2
24326: PPUSH
24327: LD_VAR 0 3
24331: PPUSH
24332: CALL 61960 0 3
24336: NOT
24337: PUSH
24338: LD_VAR 0 1
24342: PPUSH
24343: CALL_OW 314
24347: AND
24348: IFFALSE 24352
// exit ;
24350: GO 24491
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24352: LD_VAR 0 2
24356: PPUSH
24357: LD_VAR 0 3
24361: PPUSH
24362: CALL_OW 428
24366: PUSH
24367: LD_VAR 0 1
24371: EQUAL
24372: PUSH
24373: LD_VAR 0 1
24377: PPUSH
24378: CALL_OW 314
24382: NOT
24383: AND
24384: IFFALSE 24310
// PlaySoundXY ( x , y , PlantMine ) ;
24386: LD_VAR 0 2
24390: PPUSH
24391: LD_VAR 0 3
24395: PPUSH
24396: LD_STRING PlantMine
24398: PPUSH
24399: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24403: LD_VAR 0 2
24407: PPUSH
24408: LD_VAR 0 3
24412: PPUSH
24413: LD_VAR 0 1
24417: PPUSH
24418: CALL_OW 255
24422: PPUSH
24423: LD_INT 0
24425: PPUSH
24426: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24430: LD_ADDR_EXP 93
24434: PUSH
24435: LD_EXP 93
24439: PPUSH
24440: LD_VAR 0 5
24444: PUSH
24445: LD_EXP 93
24449: PUSH
24450: LD_VAR 0 5
24454: ARRAY
24455: PUSH
24456: LD_INT 1
24458: PLUS
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PPUSH
24464: LD_VAR 0 2
24468: PUSH
24469: LD_VAR 0 3
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PPUSH
24478: CALL 30839 0 3
24482: ST_TO_ADDR
// result := true ;
24483: LD_ADDR_VAR 0 4
24487: PUSH
24488: LD_INT 1
24490: ST_TO_ADDR
// end ;
24491: LD_VAR 0 4
24495: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24496: LD_INT 0
24498: PPUSH
24499: PPUSH
24500: PPUSH
// if not unit in minersList then
24501: LD_VAR 0 1
24505: PUSH
24506: LD_EXP 92
24510: IN
24511: NOT
24512: IFFALSE 24516
// exit ;
24514: GO 24908
// index := GetElementIndex ( minersList , unit ) ;
24516: LD_ADDR_VAR 0 6
24520: PUSH
24521: LD_EXP 92
24525: PPUSH
24526: LD_VAR 0 1
24530: PPUSH
24531: CALL 30624 0 2
24535: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24536: LD_ADDR_VAR 0 5
24540: PUSH
24541: DOUBLE
24542: LD_EXP 93
24546: PUSH
24547: LD_VAR 0 6
24551: ARRAY
24552: INC
24553: ST_TO_ADDR
24554: LD_INT 1
24556: PUSH
24557: FOR_DOWNTO
24558: IFFALSE 24719
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24560: LD_EXP 93
24564: PUSH
24565: LD_VAR 0 6
24569: ARRAY
24570: PUSH
24571: LD_VAR 0 5
24575: ARRAY
24576: PUSH
24577: LD_INT 1
24579: ARRAY
24580: PUSH
24581: LD_VAR 0 2
24585: EQUAL
24586: PUSH
24587: LD_EXP 93
24591: PUSH
24592: LD_VAR 0 6
24596: ARRAY
24597: PUSH
24598: LD_VAR 0 5
24602: ARRAY
24603: PUSH
24604: LD_INT 2
24606: ARRAY
24607: PUSH
24608: LD_VAR 0 3
24612: EQUAL
24613: AND
24614: IFFALSE 24717
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24616: LD_EXP 93
24620: PUSH
24621: LD_VAR 0 6
24625: ARRAY
24626: PUSH
24627: LD_VAR 0 5
24631: ARRAY
24632: PUSH
24633: LD_INT 1
24635: ARRAY
24636: PPUSH
24637: LD_EXP 93
24641: PUSH
24642: LD_VAR 0 6
24646: ARRAY
24647: PUSH
24648: LD_VAR 0 5
24652: ARRAY
24653: PUSH
24654: LD_INT 2
24656: ARRAY
24657: PPUSH
24658: LD_VAR 0 1
24662: PPUSH
24663: CALL_OW 255
24667: PPUSH
24668: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24672: LD_ADDR_EXP 93
24676: PUSH
24677: LD_EXP 93
24681: PPUSH
24682: LD_VAR 0 6
24686: PPUSH
24687: LD_EXP 93
24691: PUSH
24692: LD_VAR 0 6
24696: ARRAY
24697: PPUSH
24698: LD_VAR 0 5
24702: PPUSH
24703: CALL_OW 3
24707: PPUSH
24708: CALL_OW 1
24712: ST_TO_ADDR
// exit ;
24713: POP
24714: POP
24715: GO 24908
// end ; end ;
24717: GO 24557
24719: POP
24720: POP
// for i := minerMinesList [ index ] downto 1 do
24721: LD_ADDR_VAR 0 5
24725: PUSH
24726: DOUBLE
24727: LD_EXP 93
24731: PUSH
24732: LD_VAR 0 6
24736: ARRAY
24737: INC
24738: ST_TO_ADDR
24739: LD_INT 1
24741: PUSH
24742: FOR_DOWNTO
24743: IFFALSE 24906
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24745: LD_EXP 93
24749: PUSH
24750: LD_VAR 0 6
24754: ARRAY
24755: PUSH
24756: LD_VAR 0 5
24760: ARRAY
24761: PUSH
24762: LD_INT 1
24764: ARRAY
24765: PPUSH
24766: LD_EXP 93
24770: PUSH
24771: LD_VAR 0 6
24775: ARRAY
24776: PUSH
24777: LD_VAR 0 5
24781: ARRAY
24782: PUSH
24783: LD_INT 2
24785: ARRAY
24786: PPUSH
24787: LD_VAR 0 2
24791: PPUSH
24792: LD_VAR 0 3
24796: PPUSH
24797: CALL_OW 298
24801: PUSH
24802: LD_INT 6
24804: LESS
24805: IFFALSE 24904
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24807: LD_EXP 93
24811: PUSH
24812: LD_VAR 0 6
24816: ARRAY
24817: PUSH
24818: LD_VAR 0 5
24822: ARRAY
24823: PUSH
24824: LD_INT 1
24826: ARRAY
24827: PPUSH
24828: LD_EXP 93
24832: PUSH
24833: LD_VAR 0 6
24837: ARRAY
24838: PUSH
24839: LD_VAR 0 5
24843: ARRAY
24844: PUSH
24845: LD_INT 2
24847: ARRAY
24848: PPUSH
24849: LD_VAR 0 1
24853: PPUSH
24854: CALL_OW 255
24858: PPUSH
24859: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24863: LD_ADDR_EXP 93
24867: PUSH
24868: LD_EXP 93
24872: PPUSH
24873: LD_VAR 0 6
24877: PPUSH
24878: LD_EXP 93
24882: PUSH
24883: LD_VAR 0 6
24887: ARRAY
24888: PPUSH
24889: LD_VAR 0 5
24893: PPUSH
24894: CALL_OW 3
24898: PPUSH
24899: CALL_OW 1
24903: ST_TO_ADDR
// end ; end ;
24904: GO 24742
24906: POP
24907: POP
// end ;
24908: LD_VAR 0 4
24912: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24913: LD_INT 0
24915: PPUSH
24916: PPUSH
24917: PPUSH
24918: PPUSH
24919: PPUSH
24920: PPUSH
24921: PPUSH
24922: PPUSH
24923: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24924: LD_VAR 0 1
24928: PPUSH
24929: CALL_OW 264
24933: PUSH
24934: LD_INT 81
24936: EQUAL
24937: NOT
24938: PUSH
24939: LD_VAR 0 1
24943: PUSH
24944: LD_EXP 92
24948: IN
24949: NOT
24950: OR
24951: IFFALSE 24955
// exit ;
24953: GO 25277
// index := GetElementIndex ( minersList , unit ) ;
24955: LD_ADDR_VAR 0 6
24959: PUSH
24960: LD_EXP 92
24964: PPUSH
24965: LD_VAR 0 1
24969: PPUSH
24970: CALL 30624 0 2
24974: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24975: LD_ADDR_VAR 0 8
24979: PUSH
24980: LD_EXP 94
24984: PUSH
24985: LD_EXP 93
24989: PUSH
24990: LD_VAR 0 6
24994: ARRAY
24995: MINUS
24996: ST_TO_ADDR
// if not minesFreeAmount then
24997: LD_VAR 0 8
25001: NOT
25002: IFFALSE 25006
// exit ;
25004: GO 25277
// tmp := [ ] ;
25006: LD_ADDR_VAR 0 7
25010: PUSH
25011: EMPTY
25012: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25013: LD_ADDR_VAR 0 5
25017: PUSH
25018: DOUBLE
25019: LD_INT 1
25021: DEC
25022: ST_TO_ADDR
25023: LD_VAR 0 8
25027: PUSH
25028: FOR_TO
25029: IFFALSE 25224
// begin _d := rand ( 0 , 5 ) ;
25031: LD_ADDR_VAR 0 11
25035: PUSH
25036: LD_INT 0
25038: PPUSH
25039: LD_INT 5
25041: PPUSH
25042: CALL_OW 12
25046: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25047: LD_ADDR_VAR 0 12
25051: PUSH
25052: LD_INT 2
25054: PPUSH
25055: LD_INT 6
25057: PPUSH
25058: CALL_OW 12
25062: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25063: LD_ADDR_VAR 0 9
25067: PUSH
25068: LD_VAR 0 2
25072: PPUSH
25073: LD_VAR 0 11
25077: PPUSH
25078: LD_VAR 0 12
25082: PPUSH
25083: CALL_OW 272
25087: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25088: LD_ADDR_VAR 0 10
25092: PUSH
25093: LD_VAR 0 3
25097: PPUSH
25098: LD_VAR 0 11
25102: PPUSH
25103: LD_VAR 0 12
25107: PPUSH
25108: CALL_OW 273
25112: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25113: LD_VAR 0 9
25117: PPUSH
25118: LD_VAR 0 10
25122: PPUSH
25123: CALL_OW 488
25127: PUSH
25128: LD_VAR 0 9
25132: PUSH
25133: LD_VAR 0 10
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: LD_VAR 0 7
25146: IN
25147: NOT
25148: AND
25149: PUSH
25150: LD_VAR 0 9
25154: PPUSH
25155: LD_VAR 0 10
25159: PPUSH
25160: CALL_OW 458
25164: NOT
25165: AND
25166: IFFALSE 25208
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25168: LD_ADDR_VAR 0 7
25172: PUSH
25173: LD_VAR 0 7
25177: PPUSH
25178: LD_VAR 0 7
25182: PUSH
25183: LD_INT 1
25185: PLUS
25186: PPUSH
25187: LD_VAR 0 9
25191: PUSH
25192: LD_VAR 0 10
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: PPUSH
25201: CALL_OW 1
25205: ST_TO_ADDR
25206: GO 25222
// i := i - 1 ;
25208: LD_ADDR_VAR 0 5
25212: PUSH
25213: LD_VAR 0 5
25217: PUSH
25218: LD_INT 1
25220: MINUS
25221: ST_TO_ADDR
// end ;
25222: GO 25028
25224: POP
25225: POP
// for i in tmp do
25226: LD_ADDR_VAR 0 5
25230: PUSH
25231: LD_VAR 0 7
25235: PUSH
25236: FOR_IN
25237: IFFALSE 25275
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25239: LD_VAR 0 1
25243: PPUSH
25244: LD_VAR 0 5
25248: PUSH
25249: LD_INT 1
25251: ARRAY
25252: PPUSH
25253: LD_VAR 0 5
25257: PUSH
25258: LD_INT 2
25260: ARRAY
25261: PPUSH
25262: CALL 24221 0 3
25266: NOT
25267: IFFALSE 25273
// exit ;
25269: POP
25270: POP
25271: GO 25277
25273: GO 25236
25275: POP
25276: POP
// end ;
25277: LD_VAR 0 4
25281: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25282: LD_INT 0
25284: PPUSH
25285: PPUSH
25286: PPUSH
25287: PPUSH
25288: PPUSH
25289: PPUSH
25290: PPUSH
// if not GetClass ( unit ) = class_sniper then
25291: LD_VAR 0 1
25295: PPUSH
25296: CALL_OW 257
25300: PUSH
25301: LD_INT 5
25303: EQUAL
25304: NOT
25305: IFFALSE 25309
// exit ;
25307: GO 25697
// dist := 8 ;
25309: LD_ADDR_VAR 0 5
25313: PUSH
25314: LD_INT 8
25316: ST_TO_ADDR
// viewRange := 12 ;
25317: LD_ADDR_VAR 0 7
25321: PUSH
25322: LD_INT 12
25324: ST_TO_ADDR
// side := GetSide ( unit ) ;
25325: LD_ADDR_VAR 0 6
25329: PUSH
25330: LD_VAR 0 1
25334: PPUSH
25335: CALL_OW 255
25339: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25340: LD_INT 61
25342: PPUSH
25343: LD_VAR 0 6
25347: PPUSH
25348: CALL_OW 321
25352: PUSH
25353: LD_INT 2
25355: EQUAL
25356: IFFALSE 25366
// viewRange := 16 ;
25358: LD_ADDR_VAR 0 7
25362: PUSH
25363: LD_INT 16
25365: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25366: LD_VAR 0 1
25370: PPUSH
25371: LD_VAR 0 2
25375: PPUSH
25376: LD_VAR 0 3
25380: PPUSH
25381: CALL_OW 297
25385: PUSH
25386: LD_VAR 0 5
25390: GREATER
25391: IFFALSE 25470
// begin ComMoveXY ( unit , x , y ) ;
25393: LD_VAR 0 1
25397: PPUSH
25398: LD_VAR 0 2
25402: PPUSH
25403: LD_VAR 0 3
25407: PPUSH
25408: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25412: LD_INT 35
25414: PPUSH
25415: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25419: LD_VAR 0 1
25423: PPUSH
25424: LD_VAR 0 2
25428: PPUSH
25429: LD_VAR 0 3
25433: PPUSH
25434: CALL 61960 0 3
25438: NOT
25439: IFFALSE 25443
// exit ;
25441: GO 25697
// until GetDistUnitXY ( unit , x , y ) < dist ;
25443: LD_VAR 0 1
25447: PPUSH
25448: LD_VAR 0 2
25452: PPUSH
25453: LD_VAR 0 3
25457: PPUSH
25458: CALL_OW 297
25462: PUSH
25463: LD_VAR 0 5
25467: LESS
25468: IFFALSE 25412
// end ; ComTurnXY ( unit , x , y ) ;
25470: LD_VAR 0 1
25474: PPUSH
25475: LD_VAR 0 2
25479: PPUSH
25480: LD_VAR 0 3
25484: PPUSH
25485: CALL_OW 118
// wait ( 5 ) ;
25489: LD_INT 5
25491: PPUSH
25492: CALL_OW 67
// _d := GetDir ( unit ) ;
25496: LD_ADDR_VAR 0 10
25500: PUSH
25501: LD_VAR 0 1
25505: PPUSH
25506: CALL_OW 254
25510: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25511: LD_ADDR_VAR 0 8
25515: PUSH
25516: LD_VAR 0 1
25520: PPUSH
25521: CALL_OW 250
25525: PPUSH
25526: LD_VAR 0 10
25530: PPUSH
25531: LD_VAR 0 5
25535: PPUSH
25536: CALL_OW 272
25540: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25541: LD_ADDR_VAR 0 9
25545: PUSH
25546: LD_VAR 0 1
25550: PPUSH
25551: CALL_OW 251
25555: PPUSH
25556: LD_VAR 0 10
25560: PPUSH
25561: LD_VAR 0 5
25565: PPUSH
25566: CALL_OW 273
25570: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25571: LD_VAR 0 8
25575: PPUSH
25576: LD_VAR 0 9
25580: PPUSH
25581: CALL_OW 488
25585: NOT
25586: IFFALSE 25590
// exit ;
25588: GO 25697
// ComAnimCustom ( unit , 1 ) ;
25590: LD_VAR 0 1
25594: PPUSH
25595: LD_INT 1
25597: PPUSH
25598: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25602: LD_VAR 0 8
25606: PPUSH
25607: LD_VAR 0 9
25611: PPUSH
25612: LD_VAR 0 6
25616: PPUSH
25617: LD_VAR 0 7
25621: PPUSH
25622: CALL_OW 330
// repeat wait ( 1 ) ;
25626: LD_INT 1
25628: PPUSH
25629: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25633: LD_VAR 0 1
25637: PPUSH
25638: CALL_OW 316
25642: PUSH
25643: LD_VAR 0 1
25647: PPUSH
25648: CALL_OW 314
25652: OR
25653: PUSH
25654: LD_VAR 0 1
25658: PPUSH
25659: CALL_OW 302
25663: NOT
25664: OR
25665: PUSH
25666: LD_VAR 0 1
25670: PPUSH
25671: CALL_OW 301
25675: OR
25676: IFFALSE 25626
// RemoveSeeing ( _x , _y , side ) ;
25678: LD_VAR 0 8
25682: PPUSH
25683: LD_VAR 0 9
25687: PPUSH
25688: LD_VAR 0 6
25692: PPUSH
25693: CALL_OW 331
// end ; end_of_file
25697: LD_VAR 0 4
25701: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25702: LD_INT 0
25704: PPUSH
25705: PPUSH
// if exist_mode then
25706: LD_VAR 0 2
25710: IFFALSE 25735
// unit := CreateCharacter ( prefix & ident ) else
25712: LD_ADDR_VAR 0 5
25716: PUSH
25717: LD_VAR 0 3
25721: PUSH
25722: LD_VAR 0 1
25726: STR
25727: PPUSH
25728: CALL_OW 34
25732: ST_TO_ADDR
25733: GO 25750
// unit := NewCharacter ( ident ) ;
25735: LD_ADDR_VAR 0 5
25739: PUSH
25740: LD_VAR 0 1
25744: PPUSH
25745: CALL_OW 25
25749: ST_TO_ADDR
// result := unit ;
25750: LD_ADDR_VAR 0 4
25754: PUSH
25755: LD_VAR 0 5
25759: ST_TO_ADDR
// end ;
25760: LD_VAR 0 4
25764: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25765: LD_INT 0
25767: PPUSH
25768: PPUSH
// if not side or not nation then
25769: LD_VAR 0 1
25773: NOT
25774: PUSH
25775: LD_VAR 0 2
25779: NOT
25780: OR
25781: IFFALSE 25785
// exit ;
25783: GO 26553
// case nation of nation_american :
25785: LD_VAR 0 2
25789: PUSH
25790: LD_INT 1
25792: DOUBLE
25793: EQUAL
25794: IFTRUE 25798
25796: GO 26012
25798: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25799: LD_ADDR_VAR 0 4
25803: PUSH
25804: LD_INT 35
25806: PUSH
25807: LD_INT 45
25809: PUSH
25810: LD_INT 46
25812: PUSH
25813: LD_INT 47
25815: PUSH
25816: LD_INT 82
25818: PUSH
25819: LD_INT 83
25821: PUSH
25822: LD_INT 84
25824: PUSH
25825: LD_INT 85
25827: PUSH
25828: LD_INT 86
25830: PUSH
25831: LD_INT 1
25833: PUSH
25834: LD_INT 2
25836: PUSH
25837: LD_INT 6
25839: PUSH
25840: LD_INT 15
25842: PUSH
25843: LD_INT 16
25845: PUSH
25846: LD_INT 7
25848: PUSH
25849: LD_INT 12
25851: PUSH
25852: LD_INT 13
25854: PUSH
25855: LD_INT 10
25857: PUSH
25858: LD_INT 14
25860: PUSH
25861: LD_INT 20
25863: PUSH
25864: LD_INT 21
25866: PUSH
25867: LD_INT 22
25869: PUSH
25870: LD_INT 25
25872: PUSH
25873: LD_INT 32
25875: PUSH
25876: LD_INT 27
25878: PUSH
25879: LD_INT 36
25881: PUSH
25882: LD_INT 69
25884: PUSH
25885: LD_INT 39
25887: PUSH
25888: LD_INT 34
25890: PUSH
25891: LD_INT 40
25893: PUSH
25894: LD_INT 48
25896: PUSH
25897: LD_INT 49
25899: PUSH
25900: LD_INT 50
25902: PUSH
25903: LD_INT 51
25905: PUSH
25906: LD_INT 52
25908: PUSH
25909: LD_INT 53
25911: PUSH
25912: LD_INT 54
25914: PUSH
25915: LD_INT 55
25917: PUSH
25918: LD_INT 56
25920: PUSH
25921: LD_INT 57
25923: PUSH
25924: LD_INT 58
25926: PUSH
25927: LD_INT 59
25929: PUSH
25930: LD_INT 60
25932: PUSH
25933: LD_INT 61
25935: PUSH
25936: LD_INT 62
25938: PUSH
25939: LD_INT 80
25941: PUSH
25942: LD_INT 82
25944: PUSH
25945: LD_INT 83
25947: PUSH
25948: LD_INT 84
25950: PUSH
25951: LD_INT 85
25953: PUSH
25954: LD_INT 86
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: ST_TO_ADDR
26010: GO 26477
26012: LD_INT 2
26014: DOUBLE
26015: EQUAL
26016: IFTRUE 26020
26018: GO 26246
26020: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26021: LD_ADDR_VAR 0 4
26025: PUSH
26026: LD_INT 35
26028: PUSH
26029: LD_INT 45
26031: PUSH
26032: LD_INT 46
26034: PUSH
26035: LD_INT 47
26037: PUSH
26038: LD_INT 82
26040: PUSH
26041: LD_INT 83
26043: PUSH
26044: LD_INT 84
26046: PUSH
26047: LD_INT 85
26049: PUSH
26050: LD_INT 87
26052: PUSH
26053: LD_INT 70
26055: PUSH
26056: LD_INT 1
26058: PUSH
26059: LD_INT 11
26061: PUSH
26062: LD_INT 3
26064: PUSH
26065: LD_INT 4
26067: PUSH
26068: LD_INT 5
26070: PUSH
26071: LD_INT 6
26073: PUSH
26074: LD_INT 15
26076: PUSH
26077: LD_INT 18
26079: PUSH
26080: LD_INT 7
26082: PUSH
26083: LD_INT 17
26085: PUSH
26086: LD_INT 8
26088: PUSH
26089: LD_INT 20
26091: PUSH
26092: LD_INT 21
26094: PUSH
26095: LD_INT 22
26097: PUSH
26098: LD_INT 72
26100: PUSH
26101: LD_INT 26
26103: PUSH
26104: LD_INT 69
26106: PUSH
26107: LD_INT 39
26109: PUSH
26110: LD_INT 40
26112: PUSH
26113: LD_INT 41
26115: PUSH
26116: LD_INT 42
26118: PUSH
26119: LD_INT 43
26121: PUSH
26122: LD_INT 48
26124: PUSH
26125: LD_INT 49
26127: PUSH
26128: LD_INT 50
26130: PUSH
26131: LD_INT 51
26133: PUSH
26134: LD_INT 52
26136: PUSH
26137: LD_INT 53
26139: PUSH
26140: LD_INT 54
26142: PUSH
26143: LD_INT 55
26145: PUSH
26146: LD_INT 56
26148: PUSH
26149: LD_INT 60
26151: PUSH
26152: LD_INT 61
26154: PUSH
26155: LD_INT 62
26157: PUSH
26158: LD_INT 66
26160: PUSH
26161: LD_INT 67
26163: PUSH
26164: LD_INT 68
26166: PUSH
26167: LD_INT 81
26169: PUSH
26170: LD_INT 82
26172: PUSH
26173: LD_INT 83
26175: PUSH
26176: LD_INT 84
26178: PUSH
26179: LD_INT 85
26181: PUSH
26182: LD_INT 87
26184: PUSH
26185: LD_INT 88
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: ST_TO_ADDR
26244: GO 26477
26246: LD_INT 3
26248: DOUBLE
26249: EQUAL
26250: IFTRUE 26254
26252: GO 26476
26254: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26255: LD_ADDR_VAR 0 4
26259: PUSH
26260: LD_INT 46
26262: PUSH
26263: LD_INT 47
26265: PUSH
26266: LD_INT 1
26268: PUSH
26269: LD_INT 2
26271: PUSH
26272: LD_INT 82
26274: PUSH
26275: LD_INT 83
26277: PUSH
26278: LD_INT 84
26280: PUSH
26281: LD_INT 85
26283: PUSH
26284: LD_INT 86
26286: PUSH
26287: LD_INT 11
26289: PUSH
26290: LD_INT 9
26292: PUSH
26293: LD_INT 20
26295: PUSH
26296: LD_INT 19
26298: PUSH
26299: LD_INT 21
26301: PUSH
26302: LD_INT 24
26304: PUSH
26305: LD_INT 22
26307: PUSH
26308: LD_INT 25
26310: PUSH
26311: LD_INT 28
26313: PUSH
26314: LD_INT 29
26316: PUSH
26317: LD_INT 30
26319: PUSH
26320: LD_INT 31
26322: PUSH
26323: LD_INT 37
26325: PUSH
26326: LD_INT 38
26328: PUSH
26329: LD_INT 32
26331: PUSH
26332: LD_INT 27
26334: PUSH
26335: LD_INT 33
26337: PUSH
26338: LD_INT 69
26340: PUSH
26341: LD_INT 39
26343: PUSH
26344: LD_INT 34
26346: PUSH
26347: LD_INT 40
26349: PUSH
26350: LD_INT 71
26352: PUSH
26353: LD_INT 23
26355: PUSH
26356: LD_INT 44
26358: PUSH
26359: LD_INT 48
26361: PUSH
26362: LD_INT 49
26364: PUSH
26365: LD_INT 50
26367: PUSH
26368: LD_INT 51
26370: PUSH
26371: LD_INT 52
26373: PUSH
26374: LD_INT 53
26376: PUSH
26377: LD_INT 54
26379: PUSH
26380: LD_INT 55
26382: PUSH
26383: LD_INT 56
26385: PUSH
26386: LD_INT 57
26388: PUSH
26389: LD_INT 58
26391: PUSH
26392: LD_INT 59
26394: PUSH
26395: LD_INT 63
26397: PUSH
26398: LD_INT 64
26400: PUSH
26401: LD_INT 65
26403: PUSH
26404: LD_INT 82
26406: PUSH
26407: LD_INT 83
26409: PUSH
26410: LD_INT 84
26412: PUSH
26413: LD_INT 85
26415: PUSH
26416: LD_INT 86
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: ST_TO_ADDR
26474: GO 26477
26476: POP
// if state > - 1 and state < 3 then
26477: LD_VAR 0 3
26481: PUSH
26482: LD_INT 1
26484: NEG
26485: GREATER
26486: PUSH
26487: LD_VAR 0 3
26491: PUSH
26492: LD_INT 3
26494: LESS
26495: AND
26496: IFFALSE 26553
// for i in result do
26498: LD_ADDR_VAR 0 5
26502: PUSH
26503: LD_VAR 0 4
26507: PUSH
26508: FOR_IN
26509: IFFALSE 26551
// if GetTech ( i , side ) <> state then
26511: LD_VAR 0 5
26515: PPUSH
26516: LD_VAR 0 1
26520: PPUSH
26521: CALL_OW 321
26525: PUSH
26526: LD_VAR 0 3
26530: NONEQUAL
26531: IFFALSE 26549
// result := result diff i ;
26533: LD_ADDR_VAR 0 4
26537: PUSH
26538: LD_VAR 0 4
26542: PUSH
26543: LD_VAR 0 5
26547: DIFF
26548: ST_TO_ADDR
26549: GO 26508
26551: POP
26552: POP
// end ;
26553: LD_VAR 0 4
26557: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26558: LD_INT 0
26560: PPUSH
26561: PPUSH
26562: PPUSH
// result := true ;
26563: LD_ADDR_VAR 0 3
26567: PUSH
26568: LD_INT 1
26570: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26571: LD_ADDR_VAR 0 5
26575: PUSH
26576: LD_VAR 0 2
26580: PPUSH
26581: CALL_OW 480
26585: ST_TO_ADDR
// if not tmp then
26586: LD_VAR 0 5
26590: NOT
26591: IFFALSE 26595
// exit ;
26593: GO 26644
// for i in tmp do
26595: LD_ADDR_VAR 0 4
26599: PUSH
26600: LD_VAR 0 5
26604: PUSH
26605: FOR_IN
26606: IFFALSE 26642
// if GetTech ( i , side ) <> state_researched then
26608: LD_VAR 0 4
26612: PPUSH
26613: LD_VAR 0 1
26617: PPUSH
26618: CALL_OW 321
26622: PUSH
26623: LD_INT 2
26625: NONEQUAL
26626: IFFALSE 26640
// begin result := false ;
26628: LD_ADDR_VAR 0 3
26632: PUSH
26633: LD_INT 0
26635: ST_TO_ADDR
// exit ;
26636: POP
26637: POP
26638: GO 26644
// end ;
26640: GO 26605
26642: POP
26643: POP
// end ;
26644: LD_VAR 0 3
26648: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26649: LD_INT 0
26651: PPUSH
26652: PPUSH
26653: PPUSH
26654: PPUSH
26655: PPUSH
26656: PPUSH
26657: PPUSH
26658: PPUSH
26659: PPUSH
26660: PPUSH
26661: PPUSH
26662: PPUSH
26663: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26664: LD_VAR 0 1
26668: NOT
26669: PUSH
26670: LD_VAR 0 1
26674: PPUSH
26675: CALL_OW 257
26679: PUSH
26680: LD_INT 9
26682: NONEQUAL
26683: OR
26684: IFFALSE 26688
// exit ;
26686: GO 27261
// side := GetSide ( unit ) ;
26688: LD_ADDR_VAR 0 9
26692: PUSH
26693: LD_VAR 0 1
26697: PPUSH
26698: CALL_OW 255
26702: ST_TO_ADDR
// tech_space := tech_spacanom ;
26703: LD_ADDR_VAR 0 12
26707: PUSH
26708: LD_INT 29
26710: ST_TO_ADDR
// tech_time := tech_taurad ;
26711: LD_ADDR_VAR 0 13
26715: PUSH
26716: LD_INT 28
26718: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26719: LD_ADDR_VAR 0 11
26723: PUSH
26724: LD_VAR 0 1
26728: PPUSH
26729: CALL_OW 310
26733: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26734: LD_VAR 0 11
26738: PPUSH
26739: CALL_OW 247
26743: PUSH
26744: LD_INT 2
26746: EQUAL
26747: IFFALSE 26751
// exit ;
26749: GO 27261
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26751: LD_ADDR_VAR 0 8
26755: PUSH
26756: LD_INT 81
26758: PUSH
26759: LD_VAR 0 9
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: PUSH
26768: LD_INT 3
26770: PUSH
26771: LD_INT 21
26773: PUSH
26774: LD_INT 3
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PPUSH
26789: CALL_OW 69
26793: ST_TO_ADDR
// if not tmp then
26794: LD_VAR 0 8
26798: NOT
26799: IFFALSE 26803
// exit ;
26801: GO 27261
// if in_unit then
26803: LD_VAR 0 11
26807: IFFALSE 26831
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26809: LD_ADDR_VAR 0 10
26813: PUSH
26814: LD_VAR 0 8
26818: PPUSH
26819: LD_VAR 0 11
26823: PPUSH
26824: CALL_OW 74
26828: ST_TO_ADDR
26829: GO 26851
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26831: LD_ADDR_VAR 0 10
26835: PUSH
26836: LD_VAR 0 8
26840: PPUSH
26841: LD_VAR 0 1
26845: PPUSH
26846: CALL_OW 74
26850: ST_TO_ADDR
// if not enemy then
26851: LD_VAR 0 10
26855: NOT
26856: IFFALSE 26860
// exit ;
26858: GO 27261
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26860: LD_VAR 0 11
26864: PUSH
26865: LD_VAR 0 11
26869: PPUSH
26870: LD_VAR 0 10
26874: PPUSH
26875: CALL_OW 296
26879: PUSH
26880: LD_INT 13
26882: GREATER
26883: AND
26884: PUSH
26885: LD_VAR 0 1
26889: PPUSH
26890: LD_VAR 0 10
26894: PPUSH
26895: CALL_OW 296
26899: PUSH
26900: LD_INT 12
26902: GREATER
26903: OR
26904: IFFALSE 26908
// exit ;
26906: GO 27261
// missile := [ 1 ] ;
26908: LD_ADDR_VAR 0 14
26912: PUSH
26913: LD_INT 1
26915: PUSH
26916: EMPTY
26917: LIST
26918: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26919: LD_VAR 0 9
26923: PPUSH
26924: LD_VAR 0 12
26928: PPUSH
26929: CALL_OW 325
26933: IFFALSE 26962
// missile := Replace ( missile , missile + 1 , 2 ) ;
26935: LD_ADDR_VAR 0 14
26939: PUSH
26940: LD_VAR 0 14
26944: PPUSH
26945: LD_VAR 0 14
26949: PUSH
26950: LD_INT 1
26952: PLUS
26953: PPUSH
26954: LD_INT 2
26956: PPUSH
26957: CALL_OW 1
26961: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26962: LD_VAR 0 9
26966: PPUSH
26967: LD_VAR 0 13
26971: PPUSH
26972: CALL_OW 325
26976: PUSH
26977: LD_VAR 0 10
26981: PPUSH
26982: CALL_OW 255
26986: PPUSH
26987: LD_VAR 0 13
26991: PPUSH
26992: CALL_OW 325
26996: NOT
26997: AND
26998: IFFALSE 27027
// missile := Replace ( missile , missile + 1 , 3 ) ;
27000: LD_ADDR_VAR 0 14
27004: PUSH
27005: LD_VAR 0 14
27009: PPUSH
27010: LD_VAR 0 14
27014: PUSH
27015: LD_INT 1
27017: PLUS
27018: PPUSH
27019: LD_INT 3
27021: PPUSH
27022: CALL_OW 1
27026: ST_TO_ADDR
// if missile < 2 then
27027: LD_VAR 0 14
27031: PUSH
27032: LD_INT 2
27034: LESS
27035: IFFALSE 27039
// exit ;
27037: GO 27261
// x := GetX ( enemy ) ;
27039: LD_ADDR_VAR 0 4
27043: PUSH
27044: LD_VAR 0 10
27048: PPUSH
27049: CALL_OW 250
27053: ST_TO_ADDR
// y := GetY ( enemy ) ;
27054: LD_ADDR_VAR 0 5
27058: PUSH
27059: LD_VAR 0 10
27063: PPUSH
27064: CALL_OW 251
27068: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27069: LD_ADDR_VAR 0 6
27073: PUSH
27074: LD_VAR 0 4
27078: PUSH
27079: LD_INT 1
27081: NEG
27082: PPUSH
27083: LD_INT 1
27085: PPUSH
27086: CALL_OW 12
27090: PLUS
27091: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27092: LD_ADDR_VAR 0 7
27096: PUSH
27097: LD_VAR 0 5
27101: PUSH
27102: LD_INT 1
27104: NEG
27105: PPUSH
27106: LD_INT 1
27108: PPUSH
27109: CALL_OW 12
27113: PLUS
27114: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27115: LD_VAR 0 6
27119: PPUSH
27120: LD_VAR 0 7
27124: PPUSH
27125: CALL_OW 488
27129: NOT
27130: IFFALSE 27152
// begin _x := x ;
27132: LD_ADDR_VAR 0 6
27136: PUSH
27137: LD_VAR 0 4
27141: ST_TO_ADDR
// _y := y ;
27142: LD_ADDR_VAR 0 7
27146: PUSH
27147: LD_VAR 0 5
27151: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27152: LD_ADDR_VAR 0 3
27156: PUSH
27157: LD_INT 1
27159: PPUSH
27160: LD_VAR 0 14
27164: PPUSH
27165: CALL_OW 12
27169: ST_TO_ADDR
// case i of 1 :
27170: LD_VAR 0 3
27174: PUSH
27175: LD_INT 1
27177: DOUBLE
27178: EQUAL
27179: IFTRUE 27183
27181: GO 27200
27183: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27184: LD_VAR 0 1
27188: PPUSH
27189: LD_VAR 0 10
27193: PPUSH
27194: CALL_OW 115
27198: GO 27261
27200: LD_INT 2
27202: DOUBLE
27203: EQUAL
27204: IFTRUE 27208
27206: GO 27230
27208: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27209: LD_VAR 0 1
27213: PPUSH
27214: LD_VAR 0 6
27218: PPUSH
27219: LD_VAR 0 7
27223: PPUSH
27224: CALL_OW 153
27228: GO 27261
27230: LD_INT 3
27232: DOUBLE
27233: EQUAL
27234: IFTRUE 27238
27236: GO 27260
27238: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27239: LD_VAR 0 1
27243: PPUSH
27244: LD_VAR 0 6
27248: PPUSH
27249: LD_VAR 0 7
27253: PPUSH
27254: CALL_OW 154
27258: GO 27261
27260: POP
// end ;
27261: LD_VAR 0 2
27265: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27266: LD_INT 0
27268: PPUSH
27269: PPUSH
27270: PPUSH
27271: PPUSH
27272: PPUSH
27273: PPUSH
// if not unit or not building then
27274: LD_VAR 0 1
27278: NOT
27279: PUSH
27280: LD_VAR 0 2
27284: NOT
27285: OR
27286: IFFALSE 27290
// exit ;
27288: GO 27448
// x := GetX ( building ) ;
27290: LD_ADDR_VAR 0 5
27294: PUSH
27295: LD_VAR 0 2
27299: PPUSH
27300: CALL_OW 250
27304: ST_TO_ADDR
// y := GetY ( building ) ;
27305: LD_ADDR_VAR 0 6
27309: PUSH
27310: LD_VAR 0 2
27314: PPUSH
27315: CALL_OW 251
27319: ST_TO_ADDR
// for i = 0 to 5 do
27320: LD_ADDR_VAR 0 4
27324: PUSH
27325: DOUBLE
27326: LD_INT 0
27328: DEC
27329: ST_TO_ADDR
27330: LD_INT 5
27332: PUSH
27333: FOR_TO
27334: IFFALSE 27446
// begin _x := ShiftX ( x , i , 3 ) ;
27336: LD_ADDR_VAR 0 7
27340: PUSH
27341: LD_VAR 0 5
27345: PPUSH
27346: LD_VAR 0 4
27350: PPUSH
27351: LD_INT 3
27353: PPUSH
27354: CALL_OW 272
27358: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27359: LD_ADDR_VAR 0 8
27363: PUSH
27364: LD_VAR 0 6
27368: PPUSH
27369: LD_VAR 0 4
27373: PPUSH
27374: LD_INT 3
27376: PPUSH
27377: CALL_OW 273
27381: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27382: LD_VAR 0 7
27386: PPUSH
27387: LD_VAR 0 8
27391: PPUSH
27392: CALL_OW 488
27396: NOT
27397: IFFALSE 27401
// continue ;
27399: GO 27333
// if HexInfo ( _x , _y ) = 0 then
27401: LD_VAR 0 7
27405: PPUSH
27406: LD_VAR 0 8
27410: PPUSH
27411: CALL_OW 428
27415: PUSH
27416: LD_INT 0
27418: EQUAL
27419: IFFALSE 27444
// begin ComMoveXY ( unit , _x , _y ) ;
27421: LD_VAR 0 1
27425: PPUSH
27426: LD_VAR 0 7
27430: PPUSH
27431: LD_VAR 0 8
27435: PPUSH
27436: CALL_OW 111
// exit ;
27440: POP
27441: POP
27442: GO 27448
// end ; end ;
27444: GO 27333
27446: POP
27447: POP
// end ;
27448: LD_VAR 0 3
27452: RET
// export function ScanBase ( side , base_area ) ; begin
27453: LD_INT 0
27455: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27456: LD_ADDR_VAR 0 3
27460: PUSH
27461: LD_VAR 0 2
27465: PPUSH
27466: LD_INT 81
27468: PUSH
27469: LD_VAR 0 1
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PPUSH
27478: CALL_OW 70
27482: ST_TO_ADDR
// end ;
27483: LD_VAR 0 3
27487: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27488: LD_INT 0
27490: PPUSH
27491: PPUSH
27492: PPUSH
27493: PPUSH
// result := false ;
27494: LD_ADDR_VAR 0 2
27498: PUSH
27499: LD_INT 0
27501: ST_TO_ADDR
// side := GetSide ( unit ) ;
27502: LD_ADDR_VAR 0 3
27506: PUSH
27507: LD_VAR 0 1
27511: PPUSH
27512: CALL_OW 255
27516: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27517: LD_ADDR_VAR 0 4
27521: PUSH
27522: LD_VAR 0 1
27526: PPUSH
27527: CALL_OW 248
27531: ST_TO_ADDR
// case nat of 1 :
27532: LD_VAR 0 4
27536: PUSH
27537: LD_INT 1
27539: DOUBLE
27540: EQUAL
27541: IFTRUE 27545
27543: GO 27556
27545: POP
// tech := tech_lassight ; 2 :
27546: LD_ADDR_VAR 0 5
27550: PUSH
27551: LD_INT 12
27553: ST_TO_ADDR
27554: GO 27595
27556: LD_INT 2
27558: DOUBLE
27559: EQUAL
27560: IFTRUE 27564
27562: GO 27575
27564: POP
// tech := tech_mortar ; 3 :
27565: LD_ADDR_VAR 0 5
27569: PUSH
27570: LD_INT 41
27572: ST_TO_ADDR
27573: GO 27595
27575: LD_INT 3
27577: DOUBLE
27578: EQUAL
27579: IFTRUE 27583
27581: GO 27594
27583: POP
// tech := tech_bazooka ; end ;
27584: LD_ADDR_VAR 0 5
27588: PUSH
27589: LD_INT 44
27591: ST_TO_ADDR
27592: GO 27595
27594: POP
// if Researched ( side , tech ) then
27595: LD_VAR 0 3
27599: PPUSH
27600: LD_VAR 0 5
27604: PPUSH
27605: CALL_OW 325
27609: IFFALSE 27636
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27611: LD_ADDR_VAR 0 2
27615: PUSH
27616: LD_INT 5
27618: PUSH
27619: LD_INT 8
27621: PUSH
27622: LD_INT 9
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: LIST
27629: PUSH
27630: LD_VAR 0 4
27634: ARRAY
27635: ST_TO_ADDR
// end ;
27636: LD_VAR 0 2
27640: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27641: LD_INT 0
27643: PPUSH
27644: PPUSH
27645: PPUSH
// if not mines then
27646: LD_VAR 0 2
27650: NOT
27651: IFFALSE 27655
// exit ;
27653: GO 27799
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27655: LD_ADDR_VAR 0 5
27659: PUSH
27660: LD_INT 81
27662: PUSH
27663: LD_VAR 0 1
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 3
27674: PUSH
27675: LD_INT 21
27677: PUSH
27678: LD_INT 3
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PPUSH
27693: CALL_OW 69
27697: ST_TO_ADDR
// for i in mines do
27698: LD_ADDR_VAR 0 4
27702: PUSH
27703: LD_VAR 0 2
27707: PUSH
27708: FOR_IN
27709: IFFALSE 27797
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27711: LD_VAR 0 4
27715: PUSH
27716: LD_INT 1
27718: ARRAY
27719: PPUSH
27720: LD_VAR 0 4
27724: PUSH
27725: LD_INT 2
27727: ARRAY
27728: PPUSH
27729: CALL_OW 458
27733: NOT
27734: IFFALSE 27738
// continue ;
27736: GO 27708
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27738: LD_VAR 0 4
27742: PUSH
27743: LD_INT 1
27745: ARRAY
27746: PPUSH
27747: LD_VAR 0 4
27751: PUSH
27752: LD_INT 2
27754: ARRAY
27755: PPUSH
27756: CALL_OW 428
27760: PUSH
27761: LD_VAR 0 5
27765: IN
27766: IFFALSE 27795
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27768: LD_VAR 0 4
27772: PUSH
27773: LD_INT 1
27775: ARRAY
27776: PPUSH
27777: LD_VAR 0 4
27781: PUSH
27782: LD_INT 2
27784: ARRAY
27785: PPUSH
27786: LD_VAR 0 1
27790: PPUSH
27791: CALL_OW 456
// end ;
27795: GO 27708
27797: POP
27798: POP
// end ;
27799: LD_VAR 0 3
27803: RET
// export function Count ( array ) ; var i ; begin
27804: LD_INT 0
27806: PPUSH
27807: PPUSH
// result := 0 ;
27808: LD_ADDR_VAR 0 2
27812: PUSH
27813: LD_INT 0
27815: ST_TO_ADDR
// for i in array do
27816: LD_ADDR_VAR 0 3
27820: PUSH
27821: LD_VAR 0 1
27825: PUSH
27826: FOR_IN
27827: IFFALSE 27851
// if i then
27829: LD_VAR 0 3
27833: IFFALSE 27849
// result := result + 1 ;
27835: LD_ADDR_VAR 0 2
27839: PUSH
27840: LD_VAR 0 2
27844: PUSH
27845: LD_INT 1
27847: PLUS
27848: ST_TO_ADDR
27849: GO 27826
27851: POP
27852: POP
// end ;
27853: LD_VAR 0 2
27857: RET
// export function IsEmpty ( building ) ; begin
27858: LD_INT 0
27860: PPUSH
// if not building then
27861: LD_VAR 0 1
27865: NOT
27866: IFFALSE 27870
// exit ;
27868: GO 27913
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27870: LD_ADDR_VAR 0 2
27874: PUSH
27875: LD_VAR 0 1
27879: PUSH
27880: LD_INT 22
27882: PUSH
27883: LD_VAR 0 1
27887: PPUSH
27888: CALL_OW 255
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 58
27899: PUSH
27900: EMPTY
27901: LIST
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PPUSH
27907: CALL_OW 69
27911: IN
27912: ST_TO_ADDR
// end ;
27913: LD_VAR 0 2
27917: RET
// export function IsNotFull ( building ) ; var places ; begin
27918: LD_INT 0
27920: PPUSH
27921: PPUSH
// if not building then
27922: LD_VAR 0 1
27926: NOT
27927: IFFALSE 27931
// exit ;
27929: GO 28102
// result := false ;
27931: LD_ADDR_VAR 0 2
27935: PUSH
27936: LD_INT 0
27938: ST_TO_ADDR
// places := 0 ;
27939: LD_ADDR_VAR 0 3
27943: PUSH
27944: LD_INT 0
27946: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
27947: LD_VAR 0 1
27951: PPUSH
27952: CALL_OW 266
27956: PUSH
27957: LD_INT 0
27959: DOUBLE
27960: EQUAL
27961: IFTRUE 28019
27963: LD_INT 1
27965: DOUBLE
27966: EQUAL
27967: IFTRUE 28019
27969: LD_INT 6
27971: DOUBLE
27972: EQUAL
27973: IFTRUE 28019
27975: LD_INT 7
27977: DOUBLE
27978: EQUAL
27979: IFTRUE 28019
27981: LD_INT 8
27983: DOUBLE
27984: EQUAL
27985: IFTRUE 28019
27987: LD_INT 4
27989: DOUBLE
27990: EQUAL
27991: IFTRUE 28019
27993: LD_INT 5
27995: DOUBLE
27996: EQUAL
27997: IFTRUE 28019
27999: LD_INT 2
28001: DOUBLE
28002: EQUAL
28003: IFTRUE 28019
28005: LD_INT 3
28007: DOUBLE
28008: EQUAL
28009: IFTRUE 28019
28011: LD_INT 35
28013: DOUBLE
28014: EQUAL
28015: IFTRUE 28019
28017: GO 28030
28019: POP
// places := 6 ; b_bunker , b_breastwork :
28020: LD_ADDR_VAR 0 3
28024: PUSH
28025: LD_INT 6
28027: ST_TO_ADDR
28028: GO 28075
28030: LD_INT 32
28032: DOUBLE
28033: EQUAL
28034: IFTRUE 28044
28036: LD_INT 31
28038: DOUBLE
28039: EQUAL
28040: IFTRUE 28044
28042: GO 28055
28044: POP
// places := 1 ; b_control_tower :
28045: LD_ADDR_VAR 0 3
28049: PUSH
28050: LD_INT 1
28052: ST_TO_ADDR
28053: GO 28075
28055: LD_INT 36
28057: DOUBLE
28058: EQUAL
28059: IFTRUE 28063
28061: GO 28074
28063: POP
// places := 3 ; end ;
28064: LD_ADDR_VAR 0 3
28068: PUSH
28069: LD_INT 3
28071: ST_TO_ADDR
28072: GO 28075
28074: POP
// if places then
28075: LD_VAR 0 3
28079: IFFALSE 28102
// result := UnitsInside ( building ) < places ;
28081: LD_ADDR_VAR 0 2
28085: PUSH
28086: LD_VAR 0 1
28090: PPUSH
28091: CALL_OW 313
28095: PUSH
28096: LD_VAR 0 3
28100: LESS
28101: ST_TO_ADDR
// end ;
28102: LD_VAR 0 2
28106: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28107: LD_INT 0
28109: PPUSH
28110: PPUSH
28111: PPUSH
28112: PPUSH
// tmp := [ ] ;
28113: LD_ADDR_VAR 0 3
28117: PUSH
28118: EMPTY
28119: ST_TO_ADDR
// list := [ ] ;
28120: LD_ADDR_VAR 0 5
28124: PUSH
28125: EMPTY
28126: ST_TO_ADDR
// for i = 16 to 25 do
28127: LD_ADDR_VAR 0 4
28131: PUSH
28132: DOUBLE
28133: LD_INT 16
28135: DEC
28136: ST_TO_ADDR
28137: LD_INT 25
28139: PUSH
28140: FOR_TO
28141: IFFALSE 28214
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28143: LD_ADDR_VAR 0 3
28147: PUSH
28148: LD_VAR 0 3
28152: PUSH
28153: LD_INT 22
28155: PUSH
28156: LD_VAR 0 1
28160: PPUSH
28161: CALL_OW 255
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: LD_INT 91
28172: PUSH
28173: LD_VAR 0 1
28177: PUSH
28178: LD_INT 6
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 30
28188: PUSH
28189: LD_VAR 0 4
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: LIST
28202: PUSH
28203: EMPTY
28204: LIST
28205: PPUSH
28206: CALL_OW 69
28210: ADD
28211: ST_TO_ADDR
28212: GO 28140
28214: POP
28215: POP
// for i = 1 to tmp do
28216: LD_ADDR_VAR 0 4
28220: PUSH
28221: DOUBLE
28222: LD_INT 1
28224: DEC
28225: ST_TO_ADDR
28226: LD_VAR 0 3
28230: PUSH
28231: FOR_TO
28232: IFFALSE 28320
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28234: LD_ADDR_VAR 0 5
28238: PUSH
28239: LD_VAR 0 5
28243: PUSH
28244: LD_VAR 0 3
28248: PUSH
28249: LD_VAR 0 4
28253: ARRAY
28254: PPUSH
28255: CALL_OW 266
28259: PUSH
28260: LD_VAR 0 3
28264: PUSH
28265: LD_VAR 0 4
28269: ARRAY
28270: PPUSH
28271: CALL_OW 250
28275: PUSH
28276: LD_VAR 0 3
28280: PUSH
28281: LD_VAR 0 4
28285: ARRAY
28286: PPUSH
28287: CALL_OW 251
28291: PUSH
28292: LD_VAR 0 3
28296: PUSH
28297: LD_VAR 0 4
28301: ARRAY
28302: PPUSH
28303: CALL_OW 254
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: PUSH
28314: EMPTY
28315: LIST
28316: ADD
28317: ST_TO_ADDR
28318: GO 28231
28320: POP
28321: POP
// result := list ;
28322: LD_ADDR_VAR 0 2
28326: PUSH
28327: LD_VAR 0 5
28331: ST_TO_ADDR
// end ;
28332: LD_VAR 0 2
28336: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28337: LD_INT 0
28339: PPUSH
28340: PPUSH
28341: PPUSH
28342: PPUSH
28343: PPUSH
28344: PPUSH
28345: PPUSH
// if not factory then
28346: LD_VAR 0 1
28350: NOT
28351: IFFALSE 28355
// exit ;
28353: GO 28948
// if control = control_apeman then
28355: LD_VAR 0 4
28359: PUSH
28360: LD_INT 5
28362: EQUAL
28363: IFFALSE 28472
// begin tmp := UnitsInside ( factory ) ;
28365: LD_ADDR_VAR 0 8
28369: PUSH
28370: LD_VAR 0 1
28374: PPUSH
28375: CALL_OW 313
28379: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28380: LD_VAR 0 8
28384: PPUSH
28385: LD_INT 25
28387: PUSH
28388: LD_INT 12
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PPUSH
28395: CALL_OW 72
28399: NOT
28400: IFFALSE 28410
// control := control_manual ;
28402: LD_ADDR_VAR 0 4
28406: PUSH
28407: LD_INT 1
28409: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28410: LD_ADDR_VAR 0 8
28414: PUSH
28415: LD_VAR 0 1
28419: PPUSH
28420: CALL 28107 0 1
28424: ST_TO_ADDR
// if tmp then
28425: LD_VAR 0 8
28429: IFFALSE 28472
// begin for i in tmp do
28431: LD_ADDR_VAR 0 7
28435: PUSH
28436: LD_VAR 0 8
28440: PUSH
28441: FOR_IN
28442: IFFALSE 28470
// if i [ 1 ] = b_ext_radio then
28444: LD_VAR 0 7
28448: PUSH
28449: LD_INT 1
28451: ARRAY
28452: PUSH
28453: LD_INT 22
28455: EQUAL
28456: IFFALSE 28468
// begin control := control_remote ;
28458: LD_ADDR_VAR 0 4
28462: PUSH
28463: LD_INT 2
28465: ST_TO_ADDR
// break ;
28466: GO 28470
// end ;
28468: GO 28441
28470: POP
28471: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28472: LD_VAR 0 1
28476: PPUSH
28477: LD_VAR 0 2
28481: PPUSH
28482: LD_VAR 0 3
28486: PPUSH
28487: LD_VAR 0 4
28491: PPUSH
28492: LD_VAR 0 5
28496: PPUSH
28497: CALL_OW 448
28501: IFFALSE 28536
// begin result := [ chassis , engine , control , weapon ] ;
28503: LD_ADDR_VAR 0 6
28507: PUSH
28508: LD_VAR 0 2
28512: PUSH
28513: LD_VAR 0 3
28517: PUSH
28518: LD_VAR 0 4
28522: PUSH
28523: LD_VAR 0 5
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: ST_TO_ADDR
// exit ;
28534: GO 28948
// end ; _chassis := AvailableChassisList ( factory ) ;
28536: LD_ADDR_VAR 0 9
28540: PUSH
28541: LD_VAR 0 1
28545: PPUSH
28546: CALL_OW 475
28550: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28551: LD_ADDR_VAR 0 11
28555: PUSH
28556: LD_VAR 0 1
28560: PPUSH
28561: CALL_OW 476
28565: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28566: LD_ADDR_VAR 0 12
28570: PUSH
28571: LD_VAR 0 1
28575: PPUSH
28576: CALL_OW 477
28580: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28581: LD_ADDR_VAR 0 10
28585: PUSH
28586: LD_VAR 0 1
28590: PPUSH
28591: CALL_OW 478
28595: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28596: LD_VAR 0 9
28600: NOT
28601: PUSH
28602: LD_VAR 0 11
28606: NOT
28607: OR
28608: PUSH
28609: LD_VAR 0 12
28613: NOT
28614: OR
28615: PUSH
28616: LD_VAR 0 10
28620: NOT
28621: OR
28622: IFFALSE 28657
// begin result := [ chassis , engine , control , weapon ] ;
28624: LD_ADDR_VAR 0 6
28628: PUSH
28629: LD_VAR 0 2
28633: PUSH
28634: LD_VAR 0 3
28638: PUSH
28639: LD_VAR 0 4
28643: PUSH
28644: LD_VAR 0 5
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: LIST
28653: LIST
28654: ST_TO_ADDR
// exit ;
28655: GO 28948
// end ; if not chassis in _chassis then
28657: LD_VAR 0 2
28661: PUSH
28662: LD_VAR 0 9
28666: IN
28667: NOT
28668: IFFALSE 28694
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28670: LD_ADDR_VAR 0 2
28674: PUSH
28675: LD_VAR 0 9
28679: PUSH
28680: LD_INT 1
28682: PPUSH
28683: LD_VAR 0 9
28687: PPUSH
28688: CALL_OW 12
28692: ARRAY
28693: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28694: LD_VAR 0 2
28698: PPUSH
28699: LD_VAR 0 3
28703: PPUSH
28704: CALL 28953 0 2
28708: NOT
28709: IFFALSE 28768
// repeat engine := _engine [ 1 ] ;
28711: LD_ADDR_VAR 0 3
28715: PUSH
28716: LD_VAR 0 11
28720: PUSH
28721: LD_INT 1
28723: ARRAY
28724: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28725: LD_ADDR_VAR 0 11
28729: PUSH
28730: LD_VAR 0 11
28734: PPUSH
28735: LD_INT 1
28737: PPUSH
28738: CALL_OW 3
28742: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28743: LD_VAR 0 2
28747: PPUSH
28748: LD_VAR 0 3
28752: PPUSH
28753: CALL 28953 0 2
28757: PUSH
28758: LD_VAR 0 11
28762: PUSH
28763: EMPTY
28764: EQUAL
28765: OR
28766: IFFALSE 28711
// if not control in _control then
28768: LD_VAR 0 4
28772: PUSH
28773: LD_VAR 0 12
28777: IN
28778: NOT
28779: IFFALSE 28805
// control := _control [ rand ( 1 , _control ) ] ;
28781: LD_ADDR_VAR 0 4
28785: PUSH
28786: LD_VAR 0 12
28790: PUSH
28791: LD_INT 1
28793: PPUSH
28794: LD_VAR 0 12
28798: PPUSH
28799: CALL_OW 12
28803: ARRAY
28804: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28805: LD_VAR 0 2
28809: PPUSH
28810: LD_VAR 0 5
28814: PPUSH
28815: CALL 29173 0 2
28819: NOT
28820: IFFALSE 28879
// repeat weapon := _weapon [ 1 ] ;
28822: LD_ADDR_VAR 0 5
28826: PUSH
28827: LD_VAR 0 10
28831: PUSH
28832: LD_INT 1
28834: ARRAY
28835: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28836: LD_ADDR_VAR 0 10
28840: PUSH
28841: LD_VAR 0 10
28845: PPUSH
28846: LD_INT 1
28848: PPUSH
28849: CALL_OW 3
28853: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28854: LD_VAR 0 2
28858: PPUSH
28859: LD_VAR 0 5
28863: PPUSH
28864: CALL 29173 0 2
28868: PUSH
28869: LD_VAR 0 10
28873: PUSH
28874: EMPTY
28875: EQUAL
28876: OR
28877: IFFALSE 28822
// result := [ ] ;
28879: LD_ADDR_VAR 0 6
28883: PUSH
28884: EMPTY
28885: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28886: LD_VAR 0 1
28890: PPUSH
28891: LD_VAR 0 2
28895: PPUSH
28896: LD_VAR 0 3
28900: PPUSH
28901: LD_VAR 0 4
28905: PPUSH
28906: LD_VAR 0 5
28910: PPUSH
28911: CALL_OW 448
28915: IFFALSE 28948
// result := [ chassis , engine , control , weapon ] ;
28917: LD_ADDR_VAR 0 6
28921: PUSH
28922: LD_VAR 0 2
28926: PUSH
28927: LD_VAR 0 3
28931: PUSH
28932: LD_VAR 0 4
28936: PUSH
28937: LD_VAR 0 5
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: ST_TO_ADDR
// end ;
28948: LD_VAR 0 6
28952: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28953: LD_INT 0
28955: PPUSH
// if not chassis or not engine then
28956: LD_VAR 0 1
28960: NOT
28961: PUSH
28962: LD_VAR 0 2
28966: NOT
28967: OR
28968: IFFALSE 28972
// exit ;
28970: GO 29168
// case engine of engine_solar :
28972: LD_VAR 0 2
28976: PUSH
28977: LD_INT 2
28979: DOUBLE
28980: EQUAL
28981: IFTRUE 28985
28983: GO 29023
28985: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28986: LD_ADDR_VAR 0 3
28990: PUSH
28991: LD_INT 11
28993: PUSH
28994: LD_INT 12
28996: PUSH
28997: LD_INT 13
28999: PUSH
29000: LD_INT 14
29002: PUSH
29003: LD_INT 1
29005: PUSH
29006: LD_INT 2
29008: PUSH
29009: LD_INT 3
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: ST_TO_ADDR
29021: GO 29152
29023: LD_INT 1
29025: DOUBLE
29026: EQUAL
29027: IFTRUE 29031
29029: GO 29093
29031: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29032: LD_ADDR_VAR 0 3
29036: PUSH
29037: LD_INT 11
29039: PUSH
29040: LD_INT 12
29042: PUSH
29043: LD_INT 13
29045: PUSH
29046: LD_INT 14
29048: PUSH
29049: LD_INT 1
29051: PUSH
29052: LD_INT 2
29054: PUSH
29055: LD_INT 3
29057: PUSH
29058: LD_INT 4
29060: PUSH
29061: LD_INT 5
29063: PUSH
29064: LD_INT 21
29066: PUSH
29067: LD_INT 23
29069: PUSH
29070: LD_INT 22
29072: PUSH
29073: LD_INT 24
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: ST_TO_ADDR
29091: GO 29152
29093: LD_INT 3
29095: DOUBLE
29096: EQUAL
29097: IFTRUE 29101
29099: GO 29151
29101: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29102: LD_ADDR_VAR 0 3
29106: PUSH
29107: LD_INT 13
29109: PUSH
29110: LD_INT 14
29112: PUSH
29113: LD_INT 2
29115: PUSH
29116: LD_INT 3
29118: PUSH
29119: LD_INT 4
29121: PUSH
29122: LD_INT 5
29124: PUSH
29125: LD_INT 21
29127: PUSH
29128: LD_INT 22
29130: PUSH
29131: LD_INT 23
29133: PUSH
29134: LD_INT 24
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: ST_TO_ADDR
29149: GO 29152
29151: POP
// result := ( chassis in result ) ;
29152: LD_ADDR_VAR 0 3
29156: PUSH
29157: LD_VAR 0 1
29161: PUSH
29162: LD_VAR 0 3
29166: IN
29167: ST_TO_ADDR
// end ;
29168: LD_VAR 0 3
29172: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29173: LD_INT 0
29175: PPUSH
// if not chassis or not weapon then
29176: LD_VAR 0 1
29180: NOT
29181: PUSH
29182: LD_VAR 0 2
29186: NOT
29187: OR
29188: IFFALSE 29192
// exit ;
29190: GO 30252
// case weapon of us_machine_gun :
29192: LD_VAR 0 2
29196: PUSH
29197: LD_INT 2
29199: DOUBLE
29200: EQUAL
29201: IFTRUE 29205
29203: GO 29235
29205: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29206: LD_ADDR_VAR 0 3
29210: PUSH
29211: LD_INT 1
29213: PUSH
29214: LD_INT 2
29216: PUSH
29217: LD_INT 3
29219: PUSH
29220: LD_INT 4
29222: PUSH
29223: LD_INT 5
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: ST_TO_ADDR
29233: GO 30236
29235: LD_INT 3
29237: DOUBLE
29238: EQUAL
29239: IFTRUE 29243
29241: GO 29273
29243: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29244: LD_ADDR_VAR 0 3
29248: PUSH
29249: LD_INT 1
29251: PUSH
29252: LD_INT 2
29254: PUSH
29255: LD_INT 3
29257: PUSH
29258: LD_INT 4
29260: PUSH
29261: LD_INT 5
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: ST_TO_ADDR
29271: GO 30236
29273: LD_INT 11
29275: DOUBLE
29276: EQUAL
29277: IFTRUE 29281
29279: GO 29311
29281: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29282: LD_ADDR_VAR 0 3
29286: PUSH
29287: LD_INT 1
29289: PUSH
29290: LD_INT 2
29292: PUSH
29293: LD_INT 3
29295: PUSH
29296: LD_INT 4
29298: PUSH
29299: LD_INT 5
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: ST_TO_ADDR
29309: GO 30236
29311: LD_INT 4
29313: DOUBLE
29314: EQUAL
29315: IFTRUE 29319
29317: GO 29345
29319: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29320: LD_ADDR_VAR 0 3
29324: PUSH
29325: LD_INT 2
29327: PUSH
29328: LD_INT 3
29330: PUSH
29331: LD_INT 4
29333: PUSH
29334: LD_INT 5
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: ST_TO_ADDR
29343: GO 30236
29345: LD_INT 5
29347: DOUBLE
29348: EQUAL
29349: IFTRUE 29353
29351: GO 29379
29353: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29354: LD_ADDR_VAR 0 3
29358: PUSH
29359: LD_INT 2
29361: PUSH
29362: LD_INT 3
29364: PUSH
29365: LD_INT 4
29367: PUSH
29368: LD_INT 5
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: ST_TO_ADDR
29377: GO 30236
29379: LD_INT 9
29381: DOUBLE
29382: EQUAL
29383: IFTRUE 29387
29385: GO 29413
29387: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29388: LD_ADDR_VAR 0 3
29392: PUSH
29393: LD_INT 2
29395: PUSH
29396: LD_INT 3
29398: PUSH
29399: LD_INT 4
29401: PUSH
29402: LD_INT 5
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: ST_TO_ADDR
29411: GO 30236
29413: LD_INT 7
29415: DOUBLE
29416: EQUAL
29417: IFTRUE 29421
29419: GO 29447
29421: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29422: LD_ADDR_VAR 0 3
29426: PUSH
29427: LD_INT 2
29429: PUSH
29430: LD_INT 3
29432: PUSH
29433: LD_INT 4
29435: PUSH
29436: LD_INT 5
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: ST_TO_ADDR
29445: GO 30236
29447: LD_INT 12
29449: DOUBLE
29450: EQUAL
29451: IFTRUE 29455
29453: GO 29481
29455: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29456: LD_ADDR_VAR 0 3
29460: PUSH
29461: LD_INT 2
29463: PUSH
29464: LD_INT 3
29466: PUSH
29467: LD_INT 4
29469: PUSH
29470: LD_INT 5
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: ST_TO_ADDR
29479: GO 30236
29481: LD_INT 13
29483: DOUBLE
29484: EQUAL
29485: IFTRUE 29489
29487: GO 29515
29489: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29490: LD_ADDR_VAR 0 3
29494: PUSH
29495: LD_INT 2
29497: PUSH
29498: LD_INT 3
29500: PUSH
29501: LD_INT 4
29503: PUSH
29504: LD_INT 5
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: ST_TO_ADDR
29513: GO 30236
29515: LD_INT 14
29517: DOUBLE
29518: EQUAL
29519: IFTRUE 29523
29521: GO 29541
29523: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29524: LD_ADDR_VAR 0 3
29528: PUSH
29529: LD_INT 4
29531: PUSH
29532: LD_INT 5
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: ST_TO_ADDR
29539: GO 30236
29541: LD_INT 6
29543: DOUBLE
29544: EQUAL
29545: IFTRUE 29549
29547: GO 29567
29549: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29550: LD_ADDR_VAR 0 3
29554: PUSH
29555: LD_INT 4
29557: PUSH
29558: LD_INT 5
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: ST_TO_ADDR
29565: GO 30236
29567: LD_INT 10
29569: DOUBLE
29570: EQUAL
29571: IFTRUE 29575
29573: GO 29593
29575: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29576: LD_ADDR_VAR 0 3
29580: PUSH
29581: LD_INT 4
29583: PUSH
29584: LD_INT 5
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: ST_TO_ADDR
29591: GO 30236
29593: LD_INT 22
29595: DOUBLE
29596: EQUAL
29597: IFTRUE 29601
29599: GO 29627
29601: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29602: LD_ADDR_VAR 0 3
29606: PUSH
29607: LD_INT 11
29609: PUSH
29610: LD_INT 12
29612: PUSH
29613: LD_INT 13
29615: PUSH
29616: LD_INT 14
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: ST_TO_ADDR
29625: GO 30236
29627: LD_INT 23
29629: DOUBLE
29630: EQUAL
29631: IFTRUE 29635
29633: GO 29661
29635: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29636: LD_ADDR_VAR 0 3
29640: PUSH
29641: LD_INT 11
29643: PUSH
29644: LD_INT 12
29646: PUSH
29647: LD_INT 13
29649: PUSH
29650: LD_INT 14
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: ST_TO_ADDR
29659: GO 30236
29661: LD_INT 24
29663: DOUBLE
29664: EQUAL
29665: IFTRUE 29669
29667: GO 29695
29669: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29670: LD_ADDR_VAR 0 3
29674: PUSH
29675: LD_INT 11
29677: PUSH
29678: LD_INT 12
29680: PUSH
29681: LD_INT 13
29683: PUSH
29684: LD_INT 14
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: ST_TO_ADDR
29693: GO 30236
29695: LD_INT 30
29697: DOUBLE
29698: EQUAL
29699: IFTRUE 29703
29701: GO 29729
29703: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29704: LD_ADDR_VAR 0 3
29708: PUSH
29709: LD_INT 11
29711: PUSH
29712: LD_INT 12
29714: PUSH
29715: LD_INT 13
29717: PUSH
29718: LD_INT 14
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: ST_TO_ADDR
29727: GO 30236
29729: LD_INT 25
29731: DOUBLE
29732: EQUAL
29733: IFTRUE 29737
29735: GO 29755
29737: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29738: LD_ADDR_VAR 0 3
29742: PUSH
29743: LD_INT 13
29745: PUSH
29746: LD_INT 14
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: ST_TO_ADDR
29753: GO 30236
29755: LD_INT 27
29757: DOUBLE
29758: EQUAL
29759: IFTRUE 29763
29761: GO 29781
29763: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29764: LD_ADDR_VAR 0 3
29768: PUSH
29769: LD_INT 13
29771: PUSH
29772: LD_INT 14
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: ST_TO_ADDR
29779: GO 30236
29781: LD_INT 92
29783: DOUBLE
29784: EQUAL
29785: IFTRUE 29789
29787: GO 29815
29789: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29790: LD_ADDR_VAR 0 3
29794: PUSH
29795: LD_INT 11
29797: PUSH
29798: LD_INT 12
29800: PUSH
29801: LD_INT 13
29803: PUSH
29804: LD_INT 14
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: ST_TO_ADDR
29813: GO 30236
29815: LD_INT 28
29817: DOUBLE
29818: EQUAL
29819: IFTRUE 29823
29821: GO 29841
29823: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29824: LD_ADDR_VAR 0 3
29828: PUSH
29829: LD_INT 13
29831: PUSH
29832: LD_INT 14
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: ST_TO_ADDR
29839: GO 30236
29841: LD_INT 29
29843: DOUBLE
29844: EQUAL
29845: IFTRUE 29849
29847: GO 29867
29849: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29850: LD_ADDR_VAR 0 3
29854: PUSH
29855: LD_INT 13
29857: PUSH
29858: LD_INT 14
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: ST_TO_ADDR
29865: GO 30236
29867: LD_INT 31
29869: DOUBLE
29870: EQUAL
29871: IFTRUE 29875
29873: GO 29893
29875: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29876: LD_ADDR_VAR 0 3
29880: PUSH
29881: LD_INT 13
29883: PUSH
29884: LD_INT 14
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: ST_TO_ADDR
29891: GO 30236
29893: LD_INT 26
29895: DOUBLE
29896: EQUAL
29897: IFTRUE 29901
29899: GO 29919
29901: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29902: LD_ADDR_VAR 0 3
29906: PUSH
29907: LD_INT 13
29909: PUSH
29910: LD_INT 14
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: ST_TO_ADDR
29917: GO 30236
29919: LD_INT 42
29921: DOUBLE
29922: EQUAL
29923: IFTRUE 29927
29925: GO 29953
29927: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29928: LD_ADDR_VAR 0 3
29932: PUSH
29933: LD_INT 21
29935: PUSH
29936: LD_INT 22
29938: PUSH
29939: LD_INT 23
29941: PUSH
29942: LD_INT 24
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: ST_TO_ADDR
29951: GO 30236
29953: LD_INT 43
29955: DOUBLE
29956: EQUAL
29957: IFTRUE 29961
29959: GO 29987
29961: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29962: LD_ADDR_VAR 0 3
29966: PUSH
29967: LD_INT 21
29969: PUSH
29970: LD_INT 22
29972: PUSH
29973: LD_INT 23
29975: PUSH
29976: LD_INT 24
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: ST_TO_ADDR
29985: GO 30236
29987: LD_INT 44
29989: DOUBLE
29990: EQUAL
29991: IFTRUE 29995
29993: GO 30021
29995: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29996: LD_ADDR_VAR 0 3
30000: PUSH
30001: LD_INT 21
30003: PUSH
30004: LD_INT 22
30006: PUSH
30007: LD_INT 23
30009: PUSH
30010: LD_INT 24
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: ST_TO_ADDR
30019: GO 30236
30021: LD_INT 45
30023: DOUBLE
30024: EQUAL
30025: IFTRUE 30029
30027: GO 30055
30029: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30030: LD_ADDR_VAR 0 3
30034: PUSH
30035: LD_INT 21
30037: PUSH
30038: LD_INT 22
30040: PUSH
30041: LD_INT 23
30043: PUSH
30044: LD_INT 24
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: ST_TO_ADDR
30053: GO 30236
30055: LD_INT 49
30057: DOUBLE
30058: EQUAL
30059: IFTRUE 30063
30061: GO 30089
30063: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30064: LD_ADDR_VAR 0 3
30068: PUSH
30069: LD_INT 21
30071: PUSH
30072: LD_INT 22
30074: PUSH
30075: LD_INT 23
30077: PUSH
30078: LD_INT 24
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: ST_TO_ADDR
30087: GO 30236
30089: LD_INT 51
30091: DOUBLE
30092: EQUAL
30093: IFTRUE 30097
30095: GO 30123
30097: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30098: LD_ADDR_VAR 0 3
30102: PUSH
30103: LD_INT 21
30105: PUSH
30106: LD_INT 22
30108: PUSH
30109: LD_INT 23
30111: PUSH
30112: LD_INT 24
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: ST_TO_ADDR
30121: GO 30236
30123: LD_INT 52
30125: DOUBLE
30126: EQUAL
30127: IFTRUE 30131
30129: GO 30157
30131: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30132: LD_ADDR_VAR 0 3
30136: PUSH
30137: LD_INT 21
30139: PUSH
30140: LD_INT 22
30142: PUSH
30143: LD_INT 23
30145: PUSH
30146: LD_INT 24
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: ST_TO_ADDR
30155: GO 30236
30157: LD_INT 53
30159: DOUBLE
30160: EQUAL
30161: IFTRUE 30165
30163: GO 30183
30165: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30166: LD_ADDR_VAR 0 3
30170: PUSH
30171: LD_INT 23
30173: PUSH
30174: LD_INT 24
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: ST_TO_ADDR
30181: GO 30236
30183: LD_INT 46
30185: DOUBLE
30186: EQUAL
30187: IFTRUE 30191
30189: GO 30209
30191: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30192: LD_ADDR_VAR 0 3
30196: PUSH
30197: LD_INT 23
30199: PUSH
30200: LD_INT 24
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: ST_TO_ADDR
30207: GO 30236
30209: LD_INT 47
30211: DOUBLE
30212: EQUAL
30213: IFTRUE 30217
30215: GO 30235
30217: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30218: LD_ADDR_VAR 0 3
30222: PUSH
30223: LD_INT 23
30225: PUSH
30226: LD_INT 24
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: ST_TO_ADDR
30233: GO 30236
30235: POP
// result := ( chassis in result ) ;
30236: LD_ADDR_VAR 0 3
30240: PUSH
30241: LD_VAR 0 1
30245: PUSH
30246: LD_VAR 0 3
30250: IN
30251: ST_TO_ADDR
// end ;
30252: LD_VAR 0 3
30256: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30257: LD_INT 0
30259: PPUSH
30260: PPUSH
30261: PPUSH
30262: PPUSH
30263: PPUSH
30264: PPUSH
30265: PPUSH
// result := array ;
30266: LD_ADDR_VAR 0 5
30270: PUSH
30271: LD_VAR 0 1
30275: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30276: LD_VAR 0 1
30280: NOT
30281: PUSH
30282: LD_VAR 0 2
30286: NOT
30287: OR
30288: PUSH
30289: LD_VAR 0 3
30293: NOT
30294: OR
30295: PUSH
30296: LD_VAR 0 2
30300: PUSH
30301: LD_VAR 0 1
30305: GREATER
30306: OR
30307: PUSH
30308: LD_VAR 0 3
30312: PUSH
30313: LD_VAR 0 1
30317: GREATER
30318: OR
30319: IFFALSE 30323
// exit ;
30321: GO 30619
// if direction then
30323: LD_VAR 0 4
30327: IFFALSE 30391
// begin d := 1 ;
30329: LD_ADDR_VAR 0 9
30333: PUSH
30334: LD_INT 1
30336: ST_TO_ADDR
// if i_from > i_to then
30337: LD_VAR 0 2
30341: PUSH
30342: LD_VAR 0 3
30346: GREATER
30347: IFFALSE 30373
// length := ( array - i_from ) + i_to else
30349: LD_ADDR_VAR 0 11
30353: PUSH
30354: LD_VAR 0 1
30358: PUSH
30359: LD_VAR 0 2
30363: MINUS
30364: PUSH
30365: LD_VAR 0 3
30369: PLUS
30370: ST_TO_ADDR
30371: GO 30389
// length := i_to - i_from ;
30373: LD_ADDR_VAR 0 11
30377: PUSH
30378: LD_VAR 0 3
30382: PUSH
30383: LD_VAR 0 2
30387: MINUS
30388: ST_TO_ADDR
// end else
30389: GO 30452
// begin d := - 1 ;
30391: LD_ADDR_VAR 0 9
30395: PUSH
30396: LD_INT 1
30398: NEG
30399: ST_TO_ADDR
// if i_from > i_to then
30400: LD_VAR 0 2
30404: PUSH
30405: LD_VAR 0 3
30409: GREATER
30410: IFFALSE 30430
// length := i_from - i_to else
30412: LD_ADDR_VAR 0 11
30416: PUSH
30417: LD_VAR 0 2
30421: PUSH
30422: LD_VAR 0 3
30426: MINUS
30427: ST_TO_ADDR
30428: GO 30452
// length := ( array - i_to ) + i_from ;
30430: LD_ADDR_VAR 0 11
30434: PUSH
30435: LD_VAR 0 1
30439: PUSH
30440: LD_VAR 0 3
30444: MINUS
30445: PUSH
30446: LD_VAR 0 2
30450: PLUS
30451: ST_TO_ADDR
// end ; if not length then
30452: LD_VAR 0 11
30456: NOT
30457: IFFALSE 30461
// exit ;
30459: GO 30619
// tmp := array ;
30461: LD_ADDR_VAR 0 10
30465: PUSH
30466: LD_VAR 0 1
30470: ST_TO_ADDR
// for i = 1 to length do
30471: LD_ADDR_VAR 0 6
30475: PUSH
30476: DOUBLE
30477: LD_INT 1
30479: DEC
30480: ST_TO_ADDR
30481: LD_VAR 0 11
30485: PUSH
30486: FOR_TO
30487: IFFALSE 30607
// begin for j = 1 to array do
30489: LD_ADDR_VAR 0 7
30493: PUSH
30494: DOUBLE
30495: LD_INT 1
30497: DEC
30498: ST_TO_ADDR
30499: LD_VAR 0 1
30503: PUSH
30504: FOR_TO
30505: IFFALSE 30593
// begin k := j + d ;
30507: LD_ADDR_VAR 0 8
30511: PUSH
30512: LD_VAR 0 7
30516: PUSH
30517: LD_VAR 0 9
30521: PLUS
30522: ST_TO_ADDR
// if k > array then
30523: LD_VAR 0 8
30527: PUSH
30528: LD_VAR 0 1
30532: GREATER
30533: IFFALSE 30543
// k := 1 ;
30535: LD_ADDR_VAR 0 8
30539: PUSH
30540: LD_INT 1
30542: ST_TO_ADDR
// if not k then
30543: LD_VAR 0 8
30547: NOT
30548: IFFALSE 30560
// k := array ;
30550: LD_ADDR_VAR 0 8
30554: PUSH
30555: LD_VAR 0 1
30559: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30560: LD_ADDR_VAR 0 10
30564: PUSH
30565: LD_VAR 0 10
30569: PPUSH
30570: LD_VAR 0 8
30574: PPUSH
30575: LD_VAR 0 1
30579: PUSH
30580: LD_VAR 0 7
30584: ARRAY
30585: PPUSH
30586: CALL_OW 1
30590: ST_TO_ADDR
// end ;
30591: GO 30504
30593: POP
30594: POP
// array := tmp ;
30595: LD_ADDR_VAR 0 1
30599: PUSH
30600: LD_VAR 0 10
30604: ST_TO_ADDR
// end ;
30605: GO 30486
30607: POP
30608: POP
// result := array ;
30609: LD_ADDR_VAR 0 5
30613: PUSH
30614: LD_VAR 0 1
30618: ST_TO_ADDR
// end ;
30619: LD_VAR 0 5
30623: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30624: LD_INT 0
30626: PPUSH
30627: PPUSH
// result := 0 ;
30628: LD_ADDR_VAR 0 3
30632: PUSH
30633: LD_INT 0
30635: ST_TO_ADDR
// if not array or not value in array then
30636: LD_VAR 0 1
30640: NOT
30641: PUSH
30642: LD_VAR 0 2
30646: PUSH
30647: LD_VAR 0 1
30651: IN
30652: NOT
30653: OR
30654: IFFALSE 30658
// exit ;
30656: GO 30712
// for i = 1 to array do
30658: LD_ADDR_VAR 0 4
30662: PUSH
30663: DOUBLE
30664: LD_INT 1
30666: DEC
30667: ST_TO_ADDR
30668: LD_VAR 0 1
30672: PUSH
30673: FOR_TO
30674: IFFALSE 30710
// if value = array [ i ] then
30676: LD_VAR 0 2
30680: PUSH
30681: LD_VAR 0 1
30685: PUSH
30686: LD_VAR 0 4
30690: ARRAY
30691: EQUAL
30692: IFFALSE 30708
// begin result := i ;
30694: LD_ADDR_VAR 0 3
30698: PUSH
30699: LD_VAR 0 4
30703: ST_TO_ADDR
// exit ;
30704: POP
30705: POP
30706: GO 30712
// end ;
30708: GO 30673
30710: POP
30711: POP
// end ;
30712: LD_VAR 0 3
30716: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30717: LD_INT 0
30719: PPUSH
// vc_chassis := chassis ;
30720: LD_ADDR_OWVAR 37
30724: PUSH
30725: LD_VAR 0 1
30729: ST_TO_ADDR
// vc_engine := engine ;
30730: LD_ADDR_OWVAR 39
30734: PUSH
30735: LD_VAR 0 2
30739: ST_TO_ADDR
// vc_control := control ;
30740: LD_ADDR_OWVAR 38
30744: PUSH
30745: LD_VAR 0 3
30749: ST_TO_ADDR
// vc_weapon := weapon ;
30750: LD_ADDR_OWVAR 40
30754: PUSH
30755: LD_VAR 0 4
30759: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30760: LD_ADDR_OWVAR 41
30764: PUSH
30765: LD_VAR 0 5
30769: ST_TO_ADDR
// end ;
30770: LD_VAR 0 6
30774: RET
// export function WantPlant ( unit ) ; var task ; begin
30775: LD_INT 0
30777: PPUSH
30778: PPUSH
// result := false ;
30779: LD_ADDR_VAR 0 2
30783: PUSH
30784: LD_INT 0
30786: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30787: LD_ADDR_VAR 0 3
30791: PUSH
30792: LD_VAR 0 1
30796: PPUSH
30797: CALL_OW 437
30801: ST_TO_ADDR
// if task then
30802: LD_VAR 0 3
30806: IFFALSE 30834
// if task [ 1 ] [ 1 ] = p then
30808: LD_VAR 0 3
30812: PUSH
30813: LD_INT 1
30815: ARRAY
30816: PUSH
30817: LD_INT 1
30819: ARRAY
30820: PUSH
30821: LD_STRING p
30823: EQUAL
30824: IFFALSE 30834
// result := true ;
30826: LD_ADDR_VAR 0 2
30830: PUSH
30831: LD_INT 1
30833: ST_TO_ADDR
// end ;
30834: LD_VAR 0 2
30838: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30839: LD_INT 0
30841: PPUSH
30842: PPUSH
30843: PPUSH
30844: PPUSH
// if pos < 1 then
30845: LD_VAR 0 2
30849: PUSH
30850: LD_INT 1
30852: LESS
30853: IFFALSE 30857
// exit ;
30855: GO 31160
// if pos = 1 then
30857: LD_VAR 0 2
30861: PUSH
30862: LD_INT 1
30864: EQUAL
30865: IFFALSE 30898
// result := Replace ( arr , pos [ 1 ] , value ) else
30867: LD_ADDR_VAR 0 4
30871: PUSH
30872: LD_VAR 0 1
30876: PPUSH
30877: LD_VAR 0 2
30881: PUSH
30882: LD_INT 1
30884: ARRAY
30885: PPUSH
30886: LD_VAR 0 3
30890: PPUSH
30891: CALL_OW 1
30895: ST_TO_ADDR
30896: GO 31160
// begin tmp := arr ;
30898: LD_ADDR_VAR 0 6
30902: PUSH
30903: LD_VAR 0 1
30907: ST_TO_ADDR
// s_arr := [ tmp ] ;
30908: LD_ADDR_VAR 0 7
30912: PUSH
30913: LD_VAR 0 6
30917: PUSH
30918: EMPTY
30919: LIST
30920: ST_TO_ADDR
// for i = 1 to pos - 1 do
30921: LD_ADDR_VAR 0 5
30925: PUSH
30926: DOUBLE
30927: LD_INT 1
30929: DEC
30930: ST_TO_ADDR
30931: LD_VAR 0 2
30935: PUSH
30936: LD_INT 1
30938: MINUS
30939: PUSH
30940: FOR_TO
30941: IFFALSE 30986
// begin tmp := tmp [ pos [ i ] ] ;
30943: LD_ADDR_VAR 0 6
30947: PUSH
30948: LD_VAR 0 6
30952: PUSH
30953: LD_VAR 0 2
30957: PUSH
30958: LD_VAR 0 5
30962: ARRAY
30963: ARRAY
30964: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30965: LD_ADDR_VAR 0 7
30969: PUSH
30970: LD_VAR 0 7
30974: PUSH
30975: LD_VAR 0 6
30979: PUSH
30980: EMPTY
30981: LIST
30982: ADD
30983: ST_TO_ADDR
// end ;
30984: GO 30940
30986: POP
30987: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30988: LD_ADDR_VAR 0 6
30992: PUSH
30993: LD_VAR 0 6
30997: PPUSH
30998: LD_VAR 0 2
31002: PUSH
31003: LD_VAR 0 2
31007: ARRAY
31008: PPUSH
31009: LD_VAR 0 3
31013: PPUSH
31014: CALL_OW 1
31018: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31019: LD_ADDR_VAR 0 7
31023: PUSH
31024: LD_VAR 0 7
31028: PPUSH
31029: LD_VAR 0 7
31033: PPUSH
31034: LD_VAR 0 6
31038: PPUSH
31039: CALL_OW 1
31043: ST_TO_ADDR
// for i = s_arr downto 2 do
31044: LD_ADDR_VAR 0 5
31048: PUSH
31049: DOUBLE
31050: LD_VAR 0 7
31054: INC
31055: ST_TO_ADDR
31056: LD_INT 2
31058: PUSH
31059: FOR_DOWNTO
31060: IFFALSE 31144
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31062: LD_ADDR_VAR 0 6
31066: PUSH
31067: LD_VAR 0 7
31071: PUSH
31072: LD_VAR 0 5
31076: PUSH
31077: LD_INT 1
31079: MINUS
31080: ARRAY
31081: PPUSH
31082: LD_VAR 0 2
31086: PUSH
31087: LD_VAR 0 5
31091: PUSH
31092: LD_INT 1
31094: MINUS
31095: ARRAY
31096: PPUSH
31097: LD_VAR 0 7
31101: PUSH
31102: LD_VAR 0 5
31106: ARRAY
31107: PPUSH
31108: CALL_OW 1
31112: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31113: LD_ADDR_VAR 0 7
31117: PUSH
31118: LD_VAR 0 7
31122: PPUSH
31123: LD_VAR 0 5
31127: PUSH
31128: LD_INT 1
31130: MINUS
31131: PPUSH
31132: LD_VAR 0 6
31136: PPUSH
31137: CALL_OW 1
31141: ST_TO_ADDR
// end ;
31142: GO 31059
31144: POP
31145: POP
// result := s_arr [ 1 ] ;
31146: LD_ADDR_VAR 0 4
31150: PUSH
31151: LD_VAR 0 7
31155: PUSH
31156: LD_INT 1
31158: ARRAY
31159: ST_TO_ADDR
// end ; end ;
31160: LD_VAR 0 4
31164: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31165: LD_INT 0
31167: PPUSH
31168: PPUSH
// if not list then
31169: LD_VAR 0 1
31173: NOT
31174: IFFALSE 31178
// exit ;
31176: GO 31269
// i := list [ pos1 ] ;
31178: LD_ADDR_VAR 0 5
31182: PUSH
31183: LD_VAR 0 1
31187: PUSH
31188: LD_VAR 0 2
31192: ARRAY
31193: ST_TO_ADDR
// if not i then
31194: LD_VAR 0 5
31198: NOT
31199: IFFALSE 31203
// exit ;
31201: GO 31269
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31203: LD_ADDR_VAR 0 1
31207: PUSH
31208: LD_VAR 0 1
31212: PPUSH
31213: LD_VAR 0 2
31217: PPUSH
31218: LD_VAR 0 1
31222: PUSH
31223: LD_VAR 0 3
31227: ARRAY
31228: PPUSH
31229: CALL_OW 1
31233: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31234: LD_ADDR_VAR 0 1
31238: PUSH
31239: LD_VAR 0 1
31243: PPUSH
31244: LD_VAR 0 3
31248: PPUSH
31249: LD_VAR 0 5
31253: PPUSH
31254: CALL_OW 1
31258: ST_TO_ADDR
// result := list ;
31259: LD_ADDR_VAR 0 4
31263: PUSH
31264: LD_VAR 0 1
31268: ST_TO_ADDR
// end ;
31269: LD_VAR 0 4
31273: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31274: LD_INT 0
31276: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31277: LD_ADDR_VAR 0 5
31281: PUSH
31282: LD_VAR 0 1
31286: PPUSH
31287: CALL_OW 250
31291: PPUSH
31292: LD_VAR 0 1
31296: PPUSH
31297: CALL_OW 251
31301: PPUSH
31302: LD_VAR 0 2
31306: PPUSH
31307: LD_VAR 0 3
31311: PPUSH
31312: LD_VAR 0 4
31316: PPUSH
31317: CALL 31327 0 5
31321: ST_TO_ADDR
// end ;
31322: LD_VAR 0 5
31326: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31327: LD_INT 0
31329: PPUSH
31330: PPUSH
31331: PPUSH
31332: PPUSH
// if not list then
31333: LD_VAR 0 3
31337: NOT
31338: IFFALSE 31342
// exit ;
31340: GO 31730
// result := [ ] ;
31342: LD_ADDR_VAR 0 6
31346: PUSH
31347: EMPTY
31348: ST_TO_ADDR
// for i in list do
31349: LD_ADDR_VAR 0 7
31353: PUSH
31354: LD_VAR 0 3
31358: PUSH
31359: FOR_IN
31360: IFFALSE 31562
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31362: LD_ADDR_VAR 0 9
31366: PUSH
31367: LD_VAR 0 7
31371: PPUSH
31372: LD_VAR 0 1
31376: PPUSH
31377: LD_VAR 0 2
31381: PPUSH
31382: CALL_OW 297
31386: ST_TO_ADDR
// if not result then
31387: LD_VAR 0 6
31391: NOT
31392: IFFALSE 31418
// result := [ [ i , tmp ] ] else
31394: LD_ADDR_VAR 0 6
31398: PUSH
31399: LD_VAR 0 7
31403: PUSH
31404: LD_VAR 0 9
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: EMPTY
31414: LIST
31415: ST_TO_ADDR
31416: GO 31560
// begin if result [ result ] [ 2 ] < tmp then
31418: LD_VAR 0 6
31422: PUSH
31423: LD_VAR 0 6
31427: ARRAY
31428: PUSH
31429: LD_INT 2
31431: ARRAY
31432: PUSH
31433: LD_VAR 0 9
31437: LESS
31438: IFFALSE 31480
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31440: LD_ADDR_VAR 0 6
31444: PUSH
31445: LD_VAR 0 6
31449: PPUSH
31450: LD_VAR 0 6
31454: PUSH
31455: LD_INT 1
31457: PLUS
31458: PPUSH
31459: LD_VAR 0 7
31463: PUSH
31464: LD_VAR 0 9
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PPUSH
31473: CALL_OW 2
31477: ST_TO_ADDR
31478: GO 31560
// for j = 1 to result do
31480: LD_ADDR_VAR 0 8
31484: PUSH
31485: DOUBLE
31486: LD_INT 1
31488: DEC
31489: ST_TO_ADDR
31490: LD_VAR 0 6
31494: PUSH
31495: FOR_TO
31496: IFFALSE 31558
// begin if tmp < result [ j ] [ 2 ] then
31498: LD_VAR 0 9
31502: PUSH
31503: LD_VAR 0 6
31507: PUSH
31508: LD_VAR 0 8
31512: ARRAY
31513: PUSH
31514: LD_INT 2
31516: ARRAY
31517: LESS
31518: IFFALSE 31556
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31520: LD_ADDR_VAR 0 6
31524: PUSH
31525: LD_VAR 0 6
31529: PPUSH
31530: LD_VAR 0 8
31534: PPUSH
31535: LD_VAR 0 7
31539: PUSH
31540: LD_VAR 0 9
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PPUSH
31549: CALL_OW 2
31553: ST_TO_ADDR
// break ;
31554: GO 31558
// end ; end ;
31556: GO 31495
31558: POP
31559: POP
// end ; end ;
31560: GO 31359
31562: POP
31563: POP
// if result and not asc then
31564: LD_VAR 0 6
31568: PUSH
31569: LD_VAR 0 4
31573: NOT
31574: AND
31575: IFFALSE 31650
// begin tmp := result ;
31577: LD_ADDR_VAR 0 9
31581: PUSH
31582: LD_VAR 0 6
31586: ST_TO_ADDR
// for i = tmp downto 1 do
31587: LD_ADDR_VAR 0 7
31591: PUSH
31592: DOUBLE
31593: LD_VAR 0 9
31597: INC
31598: ST_TO_ADDR
31599: LD_INT 1
31601: PUSH
31602: FOR_DOWNTO
31603: IFFALSE 31648
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31605: LD_ADDR_VAR 0 6
31609: PUSH
31610: LD_VAR 0 6
31614: PPUSH
31615: LD_VAR 0 9
31619: PUSH
31620: LD_VAR 0 7
31624: MINUS
31625: PUSH
31626: LD_INT 1
31628: PLUS
31629: PPUSH
31630: LD_VAR 0 9
31634: PUSH
31635: LD_VAR 0 7
31639: ARRAY
31640: PPUSH
31641: CALL_OW 1
31645: ST_TO_ADDR
31646: GO 31602
31648: POP
31649: POP
// end ; tmp := [ ] ;
31650: LD_ADDR_VAR 0 9
31654: PUSH
31655: EMPTY
31656: ST_TO_ADDR
// if mode then
31657: LD_VAR 0 5
31661: IFFALSE 31730
// begin for i = 1 to result do
31663: LD_ADDR_VAR 0 7
31667: PUSH
31668: DOUBLE
31669: LD_INT 1
31671: DEC
31672: ST_TO_ADDR
31673: LD_VAR 0 6
31677: PUSH
31678: FOR_TO
31679: IFFALSE 31718
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31681: LD_ADDR_VAR 0 9
31685: PUSH
31686: LD_VAR 0 9
31690: PPUSH
31691: LD_VAR 0 7
31695: PPUSH
31696: LD_VAR 0 6
31700: PUSH
31701: LD_VAR 0 7
31705: ARRAY
31706: PUSH
31707: LD_INT 1
31709: ARRAY
31710: PPUSH
31711: CALL_OW 1
31715: ST_TO_ADDR
31716: GO 31678
31718: POP
31719: POP
// result := tmp ;
31720: LD_ADDR_VAR 0 6
31724: PUSH
31725: LD_VAR 0 9
31729: ST_TO_ADDR
// end ; end ;
31730: LD_VAR 0 6
31734: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31735: LD_INT 0
31737: PPUSH
31738: PPUSH
31739: PPUSH
31740: PPUSH
31741: PPUSH
31742: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31743: LD_ADDR_VAR 0 5
31747: PUSH
31748: LD_INT 0
31750: PUSH
31751: LD_INT 0
31753: PUSH
31754: LD_INT 0
31756: PUSH
31757: EMPTY
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: ST_TO_ADDR
// if not x or not y then
31765: LD_VAR 0 2
31769: NOT
31770: PUSH
31771: LD_VAR 0 3
31775: NOT
31776: OR
31777: IFFALSE 31781
// exit ;
31779: GO 33431
// if not range then
31781: LD_VAR 0 4
31785: NOT
31786: IFFALSE 31796
// range := 10 ;
31788: LD_ADDR_VAR 0 4
31792: PUSH
31793: LD_INT 10
31795: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31796: LD_ADDR_VAR 0 8
31800: PUSH
31801: LD_INT 81
31803: PUSH
31804: LD_VAR 0 1
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 92
31815: PUSH
31816: LD_VAR 0 2
31820: PUSH
31821: LD_VAR 0 3
31825: PUSH
31826: LD_VAR 0 4
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 3
31839: PUSH
31840: LD_INT 21
31842: PUSH
31843: LD_INT 3
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: LIST
31858: PPUSH
31859: CALL_OW 69
31863: ST_TO_ADDR
// if not tmp then
31864: LD_VAR 0 8
31868: NOT
31869: IFFALSE 31873
// exit ;
31871: GO 33431
// for i in tmp do
31873: LD_ADDR_VAR 0 6
31877: PUSH
31878: LD_VAR 0 8
31882: PUSH
31883: FOR_IN
31884: IFFALSE 33406
// begin points := [ 0 , 0 , 0 ] ;
31886: LD_ADDR_VAR 0 9
31890: PUSH
31891: LD_INT 0
31893: PUSH
31894: LD_INT 0
31896: PUSH
31897: LD_INT 0
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: LIST
31904: ST_TO_ADDR
// bpoints := 1 ;
31905: LD_ADDR_VAR 0 10
31909: PUSH
31910: LD_INT 1
31912: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31913: LD_VAR 0 6
31917: PPUSH
31918: CALL_OW 247
31922: PUSH
31923: LD_INT 1
31925: DOUBLE
31926: EQUAL
31927: IFTRUE 31931
31929: GO 32509
31931: POP
// begin if GetClass ( i ) = 1 then
31932: LD_VAR 0 6
31936: PPUSH
31937: CALL_OW 257
31941: PUSH
31942: LD_INT 1
31944: EQUAL
31945: IFFALSE 31966
// points := [ 10 , 5 , 3 ] ;
31947: LD_ADDR_VAR 0 9
31951: PUSH
31952: LD_INT 10
31954: PUSH
31955: LD_INT 5
31957: PUSH
31958: LD_INT 3
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: LIST
31965: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31966: LD_VAR 0 6
31970: PPUSH
31971: CALL_OW 257
31975: PUSH
31976: LD_INT 2
31978: PUSH
31979: LD_INT 3
31981: PUSH
31982: LD_INT 4
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: LIST
31989: IN
31990: IFFALSE 32011
// points := [ 3 , 2 , 1 ] ;
31992: LD_ADDR_VAR 0 9
31996: PUSH
31997: LD_INT 3
31999: PUSH
32000: LD_INT 2
32002: PUSH
32003: LD_INT 1
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: LIST
32010: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32011: LD_VAR 0 6
32015: PPUSH
32016: CALL_OW 257
32020: PUSH
32021: LD_INT 5
32023: EQUAL
32024: IFFALSE 32045
// points := [ 130 , 5 , 2 ] ;
32026: LD_ADDR_VAR 0 9
32030: PUSH
32031: LD_INT 130
32033: PUSH
32034: LD_INT 5
32036: PUSH
32037: LD_INT 2
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: LIST
32044: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32045: LD_VAR 0 6
32049: PPUSH
32050: CALL_OW 257
32054: PUSH
32055: LD_INT 8
32057: EQUAL
32058: IFFALSE 32079
// points := [ 35 , 35 , 30 ] ;
32060: LD_ADDR_VAR 0 9
32064: PUSH
32065: LD_INT 35
32067: PUSH
32068: LD_INT 35
32070: PUSH
32071: LD_INT 30
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: LIST
32078: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32079: LD_VAR 0 6
32083: PPUSH
32084: CALL_OW 257
32088: PUSH
32089: LD_INT 9
32091: EQUAL
32092: IFFALSE 32113
// points := [ 20 , 55 , 40 ] ;
32094: LD_ADDR_VAR 0 9
32098: PUSH
32099: LD_INT 20
32101: PUSH
32102: LD_INT 55
32104: PUSH
32105: LD_INT 40
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: LIST
32112: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32113: LD_VAR 0 6
32117: PPUSH
32118: CALL_OW 257
32122: PUSH
32123: LD_INT 12
32125: PUSH
32126: LD_INT 16
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: IN
32133: IFFALSE 32154
// points := [ 5 , 3 , 2 ] ;
32135: LD_ADDR_VAR 0 9
32139: PUSH
32140: LD_INT 5
32142: PUSH
32143: LD_INT 3
32145: PUSH
32146: LD_INT 2
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: LIST
32153: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32154: LD_VAR 0 6
32158: PPUSH
32159: CALL_OW 257
32163: PUSH
32164: LD_INT 17
32166: EQUAL
32167: IFFALSE 32188
// points := [ 100 , 50 , 75 ] ;
32169: LD_ADDR_VAR 0 9
32173: PUSH
32174: LD_INT 100
32176: PUSH
32177: LD_INT 50
32179: PUSH
32180: LD_INT 75
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: LIST
32187: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32188: LD_VAR 0 6
32192: PPUSH
32193: CALL_OW 257
32197: PUSH
32198: LD_INT 15
32200: EQUAL
32201: IFFALSE 32222
// points := [ 10 , 5 , 3 ] ;
32203: LD_ADDR_VAR 0 9
32207: PUSH
32208: LD_INT 10
32210: PUSH
32211: LD_INT 5
32213: PUSH
32214: LD_INT 3
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: LIST
32221: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32222: LD_VAR 0 6
32226: PPUSH
32227: CALL_OW 257
32231: PUSH
32232: LD_INT 14
32234: EQUAL
32235: IFFALSE 32256
// points := [ 10 , 0 , 0 ] ;
32237: LD_ADDR_VAR 0 9
32241: PUSH
32242: LD_INT 10
32244: PUSH
32245: LD_INT 0
32247: PUSH
32248: LD_INT 0
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: LIST
32255: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32256: LD_VAR 0 6
32260: PPUSH
32261: CALL_OW 257
32265: PUSH
32266: LD_INT 11
32268: EQUAL
32269: IFFALSE 32290
// points := [ 30 , 10 , 5 ] ;
32271: LD_ADDR_VAR 0 9
32275: PUSH
32276: LD_INT 30
32278: PUSH
32279: LD_INT 10
32281: PUSH
32282: LD_INT 5
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: LIST
32289: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32290: LD_VAR 0 1
32294: PPUSH
32295: LD_INT 5
32297: PPUSH
32298: CALL_OW 321
32302: PUSH
32303: LD_INT 2
32305: EQUAL
32306: IFFALSE 32323
// bpoints := bpoints * 1.8 ;
32308: LD_ADDR_VAR 0 10
32312: PUSH
32313: LD_VAR 0 10
32317: PUSH
32318: LD_REAL  1.80000000000000E+0000
32321: MUL
32322: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32323: LD_VAR 0 6
32327: PPUSH
32328: CALL_OW 257
32332: PUSH
32333: LD_INT 1
32335: PUSH
32336: LD_INT 2
32338: PUSH
32339: LD_INT 3
32341: PUSH
32342: LD_INT 4
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: IN
32351: PUSH
32352: LD_VAR 0 1
32356: PPUSH
32357: LD_INT 51
32359: PPUSH
32360: CALL_OW 321
32364: PUSH
32365: LD_INT 2
32367: EQUAL
32368: AND
32369: IFFALSE 32386
// bpoints := bpoints * 1.2 ;
32371: LD_ADDR_VAR 0 10
32375: PUSH
32376: LD_VAR 0 10
32380: PUSH
32381: LD_REAL  1.20000000000000E+0000
32384: MUL
32385: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32386: LD_VAR 0 6
32390: PPUSH
32391: CALL_OW 257
32395: PUSH
32396: LD_INT 5
32398: PUSH
32399: LD_INT 7
32401: PUSH
32402: LD_INT 9
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: LIST
32409: IN
32410: PUSH
32411: LD_VAR 0 1
32415: PPUSH
32416: LD_INT 52
32418: PPUSH
32419: CALL_OW 321
32423: PUSH
32424: LD_INT 2
32426: EQUAL
32427: AND
32428: IFFALSE 32445
// bpoints := bpoints * 1.5 ;
32430: LD_ADDR_VAR 0 10
32434: PUSH
32435: LD_VAR 0 10
32439: PUSH
32440: LD_REAL  1.50000000000000E+0000
32443: MUL
32444: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32445: LD_VAR 0 1
32449: PPUSH
32450: LD_INT 66
32452: PPUSH
32453: CALL_OW 321
32457: PUSH
32458: LD_INT 2
32460: EQUAL
32461: IFFALSE 32478
// bpoints := bpoints * 1.1 ;
32463: LD_ADDR_VAR 0 10
32467: PUSH
32468: LD_VAR 0 10
32472: PUSH
32473: LD_REAL  1.10000000000000E+0000
32476: MUL
32477: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32478: LD_ADDR_VAR 0 10
32482: PUSH
32483: LD_VAR 0 10
32487: PUSH
32488: LD_VAR 0 6
32492: PPUSH
32493: LD_INT 1
32495: PPUSH
32496: CALL_OW 259
32500: PUSH
32501: LD_REAL  1.15000000000000E+0000
32504: MUL
32505: MUL
32506: ST_TO_ADDR
// end ; unit_vehicle :
32507: GO 33335
32509: LD_INT 2
32511: DOUBLE
32512: EQUAL
32513: IFTRUE 32517
32515: GO 33323
32517: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32518: LD_VAR 0 6
32522: PPUSH
32523: CALL_OW 264
32527: PUSH
32528: LD_INT 2
32530: PUSH
32531: LD_INT 42
32533: PUSH
32534: LD_INT 24
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: LIST
32541: IN
32542: IFFALSE 32563
// points := [ 25 , 5 , 3 ] ;
32544: LD_ADDR_VAR 0 9
32548: PUSH
32549: LD_INT 25
32551: PUSH
32552: LD_INT 5
32554: PUSH
32555: LD_INT 3
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: LIST
32562: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32563: LD_VAR 0 6
32567: PPUSH
32568: CALL_OW 264
32572: PUSH
32573: LD_INT 4
32575: PUSH
32576: LD_INT 43
32578: PUSH
32579: LD_INT 25
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: LIST
32586: IN
32587: IFFALSE 32608
// points := [ 40 , 15 , 5 ] ;
32589: LD_ADDR_VAR 0 9
32593: PUSH
32594: LD_INT 40
32596: PUSH
32597: LD_INT 15
32599: PUSH
32600: LD_INT 5
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: LIST
32607: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32608: LD_VAR 0 6
32612: PPUSH
32613: CALL_OW 264
32617: PUSH
32618: LD_INT 3
32620: PUSH
32621: LD_INT 23
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: IN
32628: IFFALSE 32649
// points := [ 7 , 25 , 8 ] ;
32630: LD_ADDR_VAR 0 9
32634: PUSH
32635: LD_INT 7
32637: PUSH
32638: LD_INT 25
32640: PUSH
32641: LD_INT 8
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: LIST
32648: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32649: LD_VAR 0 6
32653: PPUSH
32654: CALL_OW 264
32658: PUSH
32659: LD_INT 5
32661: PUSH
32662: LD_INT 27
32664: PUSH
32665: LD_INT 44
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: LIST
32672: IN
32673: IFFALSE 32694
// points := [ 14 , 50 , 16 ] ;
32675: LD_ADDR_VAR 0 9
32679: PUSH
32680: LD_INT 14
32682: PUSH
32683: LD_INT 50
32685: PUSH
32686: LD_INT 16
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: LIST
32693: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32694: LD_VAR 0 6
32698: PPUSH
32699: CALL_OW 264
32703: PUSH
32704: LD_INT 6
32706: PUSH
32707: LD_INT 46
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: IN
32714: IFFALSE 32735
// points := [ 32 , 120 , 70 ] ;
32716: LD_ADDR_VAR 0 9
32720: PUSH
32721: LD_INT 32
32723: PUSH
32724: LD_INT 120
32726: PUSH
32727: LD_INT 70
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: LIST
32734: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32735: LD_VAR 0 6
32739: PPUSH
32740: CALL_OW 264
32744: PUSH
32745: LD_INT 7
32747: PUSH
32748: LD_INT 28
32750: PUSH
32751: LD_INT 45
32753: PUSH
32754: LD_INT 92
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: IN
32763: IFFALSE 32784
// points := [ 35 , 20 , 45 ] ;
32765: LD_ADDR_VAR 0 9
32769: PUSH
32770: LD_INT 35
32772: PUSH
32773: LD_INT 20
32775: PUSH
32776: LD_INT 45
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: LIST
32783: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32784: LD_VAR 0 6
32788: PPUSH
32789: CALL_OW 264
32793: PUSH
32794: LD_INT 47
32796: PUSH
32797: EMPTY
32798: LIST
32799: IN
32800: IFFALSE 32821
// points := [ 67 , 45 , 75 ] ;
32802: LD_ADDR_VAR 0 9
32806: PUSH
32807: LD_INT 67
32809: PUSH
32810: LD_INT 45
32812: PUSH
32813: LD_INT 75
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: LIST
32820: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32821: LD_VAR 0 6
32825: PPUSH
32826: CALL_OW 264
32830: PUSH
32831: LD_INT 26
32833: PUSH
32834: EMPTY
32835: LIST
32836: IN
32837: IFFALSE 32858
// points := [ 120 , 30 , 80 ] ;
32839: LD_ADDR_VAR 0 9
32843: PUSH
32844: LD_INT 120
32846: PUSH
32847: LD_INT 30
32849: PUSH
32850: LD_INT 80
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: LIST
32857: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32858: LD_VAR 0 6
32862: PPUSH
32863: CALL_OW 264
32867: PUSH
32868: LD_INT 22
32870: PUSH
32871: EMPTY
32872: LIST
32873: IN
32874: IFFALSE 32895
// points := [ 40 , 1 , 1 ] ;
32876: LD_ADDR_VAR 0 9
32880: PUSH
32881: LD_INT 40
32883: PUSH
32884: LD_INT 1
32886: PUSH
32887: LD_INT 1
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: LIST
32894: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32895: LD_VAR 0 6
32899: PPUSH
32900: CALL_OW 264
32904: PUSH
32905: LD_INT 29
32907: PUSH
32908: EMPTY
32909: LIST
32910: IN
32911: IFFALSE 32932
// points := [ 70 , 200 , 400 ] ;
32913: LD_ADDR_VAR 0 9
32917: PUSH
32918: LD_INT 70
32920: PUSH
32921: LD_INT 200
32923: PUSH
32924: LD_INT 400
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: LIST
32931: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32932: LD_VAR 0 6
32936: PPUSH
32937: CALL_OW 264
32941: PUSH
32942: LD_INT 14
32944: PUSH
32945: LD_INT 53
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: IN
32952: IFFALSE 32973
// points := [ 40 , 10 , 20 ] ;
32954: LD_ADDR_VAR 0 9
32958: PUSH
32959: LD_INT 40
32961: PUSH
32962: LD_INT 10
32964: PUSH
32965: LD_INT 20
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: LIST
32972: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32973: LD_VAR 0 6
32977: PPUSH
32978: CALL_OW 264
32982: PUSH
32983: LD_INT 9
32985: PUSH
32986: EMPTY
32987: LIST
32988: IN
32989: IFFALSE 33010
// points := [ 5 , 70 , 20 ] ;
32991: LD_ADDR_VAR 0 9
32995: PUSH
32996: LD_INT 5
32998: PUSH
32999: LD_INT 70
33001: PUSH
33002: LD_INT 20
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: LIST
33009: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33010: LD_VAR 0 6
33014: PPUSH
33015: CALL_OW 264
33019: PUSH
33020: LD_INT 10
33022: PUSH
33023: EMPTY
33024: LIST
33025: IN
33026: IFFALSE 33047
// points := [ 35 , 110 , 70 ] ;
33028: LD_ADDR_VAR 0 9
33032: PUSH
33033: LD_INT 35
33035: PUSH
33036: LD_INT 110
33038: PUSH
33039: LD_INT 70
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: LIST
33046: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33047: LD_VAR 0 6
33051: PPUSH
33052: CALL_OW 265
33056: PUSH
33057: LD_INT 25
33059: EQUAL
33060: IFFALSE 33081
// points := [ 80 , 65 , 100 ] ;
33062: LD_ADDR_VAR 0 9
33066: PUSH
33067: LD_INT 80
33069: PUSH
33070: LD_INT 65
33072: PUSH
33073: LD_INT 100
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: LIST
33080: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33081: LD_VAR 0 6
33085: PPUSH
33086: CALL_OW 263
33090: PUSH
33091: LD_INT 1
33093: EQUAL
33094: IFFALSE 33129
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33096: LD_ADDR_VAR 0 10
33100: PUSH
33101: LD_VAR 0 10
33105: PUSH
33106: LD_VAR 0 6
33110: PPUSH
33111: CALL_OW 311
33115: PPUSH
33116: LD_INT 3
33118: PPUSH
33119: CALL_OW 259
33123: PUSH
33124: LD_INT 4
33126: MUL
33127: MUL
33128: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33129: LD_VAR 0 6
33133: PPUSH
33134: CALL_OW 263
33138: PUSH
33139: LD_INT 2
33141: EQUAL
33142: IFFALSE 33193
// begin j := IsControledBy ( i ) ;
33144: LD_ADDR_VAR 0 7
33148: PUSH
33149: LD_VAR 0 6
33153: PPUSH
33154: CALL_OW 312
33158: ST_TO_ADDR
// if j then
33159: LD_VAR 0 7
33163: IFFALSE 33193
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33165: LD_ADDR_VAR 0 10
33169: PUSH
33170: LD_VAR 0 10
33174: PUSH
33175: LD_VAR 0 7
33179: PPUSH
33180: LD_INT 3
33182: PPUSH
33183: CALL_OW 259
33187: PUSH
33188: LD_INT 3
33190: MUL
33191: MUL
33192: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33193: LD_VAR 0 6
33197: PPUSH
33198: CALL_OW 264
33202: PUSH
33203: LD_INT 5
33205: PUSH
33206: LD_INT 6
33208: PUSH
33209: LD_INT 46
33211: PUSH
33212: LD_INT 44
33214: PUSH
33215: LD_INT 47
33217: PUSH
33218: LD_INT 45
33220: PUSH
33221: LD_INT 28
33223: PUSH
33224: LD_INT 7
33226: PUSH
33227: LD_INT 27
33229: PUSH
33230: LD_INT 29
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: IN
33245: PUSH
33246: LD_VAR 0 1
33250: PPUSH
33251: LD_INT 52
33253: PPUSH
33254: CALL_OW 321
33258: PUSH
33259: LD_INT 2
33261: EQUAL
33262: AND
33263: IFFALSE 33280
// bpoints := bpoints * 1.2 ;
33265: LD_ADDR_VAR 0 10
33269: PUSH
33270: LD_VAR 0 10
33274: PUSH
33275: LD_REAL  1.20000000000000E+0000
33278: MUL
33279: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33280: LD_VAR 0 6
33284: PPUSH
33285: CALL_OW 264
33289: PUSH
33290: LD_INT 6
33292: PUSH
33293: LD_INT 46
33295: PUSH
33296: LD_INT 47
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: LIST
33303: IN
33304: IFFALSE 33321
// bpoints := bpoints * 1.2 ;
33306: LD_ADDR_VAR 0 10
33310: PUSH
33311: LD_VAR 0 10
33315: PUSH
33316: LD_REAL  1.20000000000000E+0000
33319: MUL
33320: ST_TO_ADDR
// end ; unit_building :
33321: GO 33335
33323: LD_INT 3
33325: DOUBLE
33326: EQUAL
33327: IFTRUE 33331
33329: GO 33334
33331: POP
// ; end ;
33332: GO 33335
33334: POP
// for j = 1 to 3 do
33335: LD_ADDR_VAR 0 7
33339: PUSH
33340: DOUBLE
33341: LD_INT 1
33343: DEC
33344: ST_TO_ADDR
33345: LD_INT 3
33347: PUSH
33348: FOR_TO
33349: IFFALSE 33402
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33351: LD_ADDR_VAR 0 5
33355: PUSH
33356: LD_VAR 0 5
33360: PPUSH
33361: LD_VAR 0 7
33365: PPUSH
33366: LD_VAR 0 5
33370: PUSH
33371: LD_VAR 0 7
33375: ARRAY
33376: PUSH
33377: LD_VAR 0 9
33381: PUSH
33382: LD_VAR 0 7
33386: ARRAY
33387: PUSH
33388: LD_VAR 0 10
33392: MUL
33393: PLUS
33394: PPUSH
33395: CALL_OW 1
33399: ST_TO_ADDR
33400: GO 33348
33402: POP
33403: POP
// end ;
33404: GO 31883
33406: POP
33407: POP
// result := Replace ( result , 4 , tmp ) ;
33408: LD_ADDR_VAR 0 5
33412: PUSH
33413: LD_VAR 0 5
33417: PPUSH
33418: LD_INT 4
33420: PPUSH
33421: LD_VAR 0 8
33425: PPUSH
33426: CALL_OW 1
33430: ST_TO_ADDR
// end ;
33431: LD_VAR 0 5
33435: RET
// export function DangerAtRange ( unit , range ) ; begin
33436: LD_INT 0
33438: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33439: LD_ADDR_VAR 0 3
33443: PUSH
33444: LD_VAR 0 1
33448: PPUSH
33449: CALL_OW 255
33453: PPUSH
33454: LD_VAR 0 1
33458: PPUSH
33459: CALL_OW 250
33463: PPUSH
33464: LD_VAR 0 1
33468: PPUSH
33469: CALL_OW 251
33473: PPUSH
33474: LD_VAR 0 2
33478: PPUSH
33479: CALL 31735 0 4
33483: ST_TO_ADDR
// end ;
33484: LD_VAR 0 3
33488: RET
// export function DangerInArea ( side , area ) ; begin
33489: LD_INT 0
33491: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33492: LD_ADDR_VAR 0 3
33496: PUSH
33497: LD_VAR 0 2
33501: PPUSH
33502: LD_INT 81
33504: PUSH
33505: LD_VAR 0 1
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PPUSH
33514: CALL_OW 70
33518: ST_TO_ADDR
// end ;
33519: LD_VAR 0 3
33523: RET
// export function IsExtension ( b ) ; begin
33524: LD_INT 0
33526: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33527: LD_ADDR_VAR 0 2
33531: PUSH
33532: LD_VAR 0 1
33536: PUSH
33537: LD_INT 23
33539: PUSH
33540: LD_INT 20
33542: PUSH
33543: LD_INT 22
33545: PUSH
33546: LD_INT 17
33548: PUSH
33549: LD_INT 24
33551: PUSH
33552: LD_INT 21
33554: PUSH
33555: LD_INT 19
33557: PUSH
33558: LD_INT 16
33560: PUSH
33561: LD_INT 25
33563: PUSH
33564: LD_INT 18
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: IN
33579: ST_TO_ADDR
// end ;
33580: LD_VAR 0 2
33584: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33585: LD_INT 0
33587: PPUSH
33588: PPUSH
33589: PPUSH
// result := [ ] ;
33590: LD_ADDR_VAR 0 4
33594: PUSH
33595: EMPTY
33596: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33597: LD_ADDR_VAR 0 5
33601: PUSH
33602: LD_VAR 0 2
33606: PPUSH
33607: LD_INT 21
33609: PUSH
33610: LD_INT 3
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PPUSH
33617: CALL_OW 70
33621: ST_TO_ADDR
// if not tmp then
33622: LD_VAR 0 5
33626: NOT
33627: IFFALSE 33631
// exit ;
33629: GO 33695
// if checkLink then
33631: LD_VAR 0 3
33635: IFFALSE 33685
// begin for i in tmp do
33637: LD_ADDR_VAR 0 6
33641: PUSH
33642: LD_VAR 0 5
33646: PUSH
33647: FOR_IN
33648: IFFALSE 33683
// if GetBase ( i ) <> base then
33650: LD_VAR 0 6
33654: PPUSH
33655: CALL_OW 274
33659: PUSH
33660: LD_VAR 0 1
33664: NONEQUAL
33665: IFFALSE 33681
// ComLinkToBase ( base , i ) ;
33667: LD_VAR 0 1
33671: PPUSH
33672: LD_VAR 0 6
33676: PPUSH
33677: CALL_OW 169
33681: GO 33647
33683: POP
33684: POP
// end ; result := tmp ;
33685: LD_ADDR_VAR 0 4
33689: PUSH
33690: LD_VAR 0 5
33694: ST_TO_ADDR
// end ;
33695: LD_VAR 0 4
33699: RET
// export function ComComplete ( units , b ) ; var i ; begin
33700: LD_INT 0
33702: PPUSH
33703: PPUSH
// if not units then
33704: LD_VAR 0 1
33708: NOT
33709: IFFALSE 33713
// exit ;
33711: GO 33803
// for i in units do
33713: LD_ADDR_VAR 0 4
33717: PUSH
33718: LD_VAR 0 1
33722: PUSH
33723: FOR_IN
33724: IFFALSE 33801
// if BuildingStatus ( b ) = bs_build then
33726: LD_VAR 0 2
33730: PPUSH
33731: CALL_OW 461
33735: PUSH
33736: LD_INT 1
33738: EQUAL
33739: IFFALSE 33799
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33741: LD_VAR 0 4
33745: PPUSH
33746: LD_STRING h
33748: PUSH
33749: LD_VAR 0 2
33753: PPUSH
33754: CALL_OW 250
33758: PUSH
33759: LD_VAR 0 2
33763: PPUSH
33764: CALL_OW 251
33768: PUSH
33769: LD_VAR 0 2
33773: PUSH
33774: LD_INT 0
33776: PUSH
33777: LD_INT 0
33779: PUSH
33780: LD_INT 0
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: PUSH
33792: EMPTY
33793: LIST
33794: PPUSH
33795: CALL_OW 446
33799: GO 33723
33801: POP
33802: POP
// end ;
33803: LD_VAR 0 3
33807: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33808: LD_INT 0
33810: PPUSH
33811: PPUSH
33812: PPUSH
33813: PPUSH
33814: PPUSH
33815: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33816: LD_VAR 0 1
33820: NOT
33821: PUSH
33822: LD_VAR 0 1
33826: PPUSH
33827: CALL_OW 263
33831: PUSH
33832: LD_INT 2
33834: NONEQUAL
33835: OR
33836: IFFALSE 33840
// exit ;
33838: GO 34156
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33840: LD_ADDR_VAR 0 6
33844: PUSH
33845: LD_INT 22
33847: PUSH
33848: LD_VAR 0 1
33852: PPUSH
33853: CALL_OW 255
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 2
33864: PUSH
33865: LD_INT 30
33867: PUSH
33868: LD_INT 36
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 34
33877: PUSH
33878: LD_INT 31
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: LIST
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PPUSH
33894: CALL_OW 69
33898: ST_TO_ADDR
// if not tmp then
33899: LD_VAR 0 6
33903: NOT
33904: IFFALSE 33908
// exit ;
33906: GO 34156
// result := [ ] ;
33908: LD_ADDR_VAR 0 2
33912: PUSH
33913: EMPTY
33914: ST_TO_ADDR
// for i in tmp do
33915: LD_ADDR_VAR 0 3
33919: PUSH
33920: LD_VAR 0 6
33924: PUSH
33925: FOR_IN
33926: IFFALSE 33997
// begin t := UnitsInside ( i ) ;
33928: LD_ADDR_VAR 0 4
33932: PUSH
33933: LD_VAR 0 3
33937: PPUSH
33938: CALL_OW 313
33942: ST_TO_ADDR
// if t then
33943: LD_VAR 0 4
33947: IFFALSE 33995
// for j in t do
33949: LD_ADDR_VAR 0 7
33953: PUSH
33954: LD_VAR 0 4
33958: PUSH
33959: FOR_IN
33960: IFFALSE 33993
// result := Replace ( result , result + 1 , j ) ;
33962: LD_ADDR_VAR 0 2
33966: PUSH
33967: LD_VAR 0 2
33971: PPUSH
33972: LD_VAR 0 2
33976: PUSH
33977: LD_INT 1
33979: PLUS
33980: PPUSH
33981: LD_VAR 0 7
33985: PPUSH
33986: CALL_OW 1
33990: ST_TO_ADDR
33991: GO 33959
33993: POP
33994: POP
// end ;
33995: GO 33925
33997: POP
33998: POP
// if not result then
33999: LD_VAR 0 2
34003: NOT
34004: IFFALSE 34008
// exit ;
34006: GO 34156
// mech := result [ 1 ] ;
34008: LD_ADDR_VAR 0 5
34012: PUSH
34013: LD_VAR 0 2
34017: PUSH
34018: LD_INT 1
34020: ARRAY
34021: ST_TO_ADDR
// if result > 1 then
34022: LD_VAR 0 2
34026: PUSH
34027: LD_INT 1
34029: GREATER
34030: IFFALSE 34142
// begin for i = 2 to result do
34032: LD_ADDR_VAR 0 3
34036: PUSH
34037: DOUBLE
34038: LD_INT 2
34040: DEC
34041: ST_TO_ADDR
34042: LD_VAR 0 2
34046: PUSH
34047: FOR_TO
34048: IFFALSE 34140
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34050: LD_ADDR_VAR 0 4
34054: PUSH
34055: LD_VAR 0 2
34059: PUSH
34060: LD_VAR 0 3
34064: ARRAY
34065: PPUSH
34066: LD_INT 3
34068: PPUSH
34069: CALL_OW 259
34073: PUSH
34074: LD_VAR 0 2
34078: PUSH
34079: LD_VAR 0 3
34083: ARRAY
34084: PPUSH
34085: CALL_OW 432
34089: MINUS
34090: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34091: LD_VAR 0 4
34095: PUSH
34096: LD_VAR 0 5
34100: PPUSH
34101: LD_INT 3
34103: PPUSH
34104: CALL_OW 259
34108: PUSH
34109: LD_VAR 0 5
34113: PPUSH
34114: CALL_OW 432
34118: MINUS
34119: GREATEREQUAL
34120: IFFALSE 34138
// mech := result [ i ] ;
34122: LD_ADDR_VAR 0 5
34126: PUSH
34127: LD_VAR 0 2
34131: PUSH
34132: LD_VAR 0 3
34136: ARRAY
34137: ST_TO_ADDR
// end ;
34138: GO 34047
34140: POP
34141: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34142: LD_VAR 0 1
34146: PPUSH
34147: LD_VAR 0 5
34151: PPUSH
34152: CALL_OW 135
// end ;
34156: LD_VAR 0 2
34160: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34161: LD_INT 0
34163: PPUSH
34164: PPUSH
34165: PPUSH
34166: PPUSH
34167: PPUSH
34168: PPUSH
34169: PPUSH
34170: PPUSH
34171: PPUSH
34172: PPUSH
34173: PPUSH
34174: PPUSH
34175: PPUSH
// result := [ ] ;
34176: LD_ADDR_VAR 0 7
34180: PUSH
34181: EMPTY
34182: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34183: LD_VAR 0 1
34187: PPUSH
34188: CALL_OW 266
34192: PUSH
34193: LD_INT 0
34195: PUSH
34196: LD_INT 1
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: IN
34203: NOT
34204: IFFALSE 34208
// exit ;
34206: GO 35842
// if name then
34208: LD_VAR 0 3
34212: IFFALSE 34228
// SetBName ( base_dep , name ) ;
34214: LD_VAR 0 1
34218: PPUSH
34219: LD_VAR 0 3
34223: PPUSH
34224: CALL_OW 500
// base := GetBase ( base_dep ) ;
34228: LD_ADDR_VAR 0 15
34232: PUSH
34233: LD_VAR 0 1
34237: PPUSH
34238: CALL_OW 274
34242: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34243: LD_ADDR_VAR 0 16
34247: PUSH
34248: LD_VAR 0 1
34252: PPUSH
34253: CALL_OW 255
34257: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34258: LD_ADDR_VAR 0 17
34262: PUSH
34263: LD_VAR 0 1
34267: PPUSH
34268: CALL_OW 248
34272: ST_TO_ADDR
// if sources then
34273: LD_VAR 0 5
34277: IFFALSE 34324
// for i = 1 to 3 do
34279: LD_ADDR_VAR 0 8
34283: PUSH
34284: DOUBLE
34285: LD_INT 1
34287: DEC
34288: ST_TO_ADDR
34289: LD_INT 3
34291: PUSH
34292: FOR_TO
34293: IFFALSE 34322
// AddResourceType ( base , i , sources [ i ] ) ;
34295: LD_VAR 0 15
34299: PPUSH
34300: LD_VAR 0 8
34304: PPUSH
34305: LD_VAR 0 5
34309: PUSH
34310: LD_VAR 0 8
34314: ARRAY
34315: PPUSH
34316: CALL_OW 276
34320: GO 34292
34322: POP
34323: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34324: LD_ADDR_VAR 0 18
34328: PUSH
34329: LD_VAR 0 15
34333: PPUSH
34334: LD_VAR 0 2
34338: PPUSH
34339: LD_INT 1
34341: PPUSH
34342: CALL 33585 0 3
34346: ST_TO_ADDR
// InitHc ;
34347: CALL_OW 19
// InitUc ;
34351: CALL_OW 18
// uc_side := side ;
34355: LD_ADDR_OWVAR 20
34359: PUSH
34360: LD_VAR 0 16
34364: ST_TO_ADDR
// uc_nation := nation ;
34365: LD_ADDR_OWVAR 21
34369: PUSH
34370: LD_VAR 0 17
34374: ST_TO_ADDR
// if buildings then
34375: LD_VAR 0 18
34379: IFFALSE 35701
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34381: LD_ADDR_VAR 0 19
34385: PUSH
34386: LD_VAR 0 18
34390: PPUSH
34391: LD_INT 2
34393: PUSH
34394: LD_INT 30
34396: PUSH
34397: LD_INT 29
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 30
34406: PUSH
34407: LD_INT 30
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: LIST
34418: PPUSH
34419: CALL_OW 72
34423: ST_TO_ADDR
// if tmp then
34424: LD_VAR 0 19
34428: IFFALSE 34476
// for i in tmp do
34430: LD_ADDR_VAR 0 8
34434: PUSH
34435: LD_VAR 0 19
34439: PUSH
34440: FOR_IN
34441: IFFALSE 34474
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34443: LD_VAR 0 8
34447: PPUSH
34448: CALL_OW 250
34452: PPUSH
34453: LD_VAR 0 8
34457: PPUSH
34458: CALL_OW 251
34462: PPUSH
34463: LD_VAR 0 16
34467: PPUSH
34468: CALL_OW 441
34472: GO 34440
34474: POP
34475: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34476: LD_VAR 0 18
34480: PPUSH
34481: LD_INT 2
34483: PUSH
34484: LD_INT 30
34486: PUSH
34487: LD_INT 32
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 30
34496: PUSH
34497: LD_INT 33
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: LIST
34508: PPUSH
34509: CALL_OW 72
34513: IFFALSE 34601
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34515: LD_ADDR_VAR 0 8
34519: PUSH
34520: LD_VAR 0 18
34524: PPUSH
34525: LD_INT 2
34527: PUSH
34528: LD_INT 30
34530: PUSH
34531: LD_INT 32
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 30
34540: PUSH
34541: LD_INT 33
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: LIST
34552: PPUSH
34553: CALL_OW 72
34557: PUSH
34558: FOR_IN
34559: IFFALSE 34599
// begin if not GetBWeapon ( i ) then
34561: LD_VAR 0 8
34565: PPUSH
34566: CALL_OW 269
34570: NOT
34571: IFFALSE 34597
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34573: LD_VAR 0 8
34577: PPUSH
34578: LD_VAR 0 8
34582: PPUSH
34583: LD_VAR 0 2
34587: PPUSH
34588: CALL 35847 0 2
34592: PPUSH
34593: CALL_OW 431
// end ;
34597: GO 34558
34599: POP
34600: POP
// end ; for i = 1 to personel do
34601: LD_ADDR_VAR 0 8
34605: PUSH
34606: DOUBLE
34607: LD_INT 1
34609: DEC
34610: ST_TO_ADDR
34611: LD_VAR 0 6
34615: PUSH
34616: FOR_TO
34617: IFFALSE 35681
// begin if i > 4 then
34619: LD_VAR 0 8
34623: PUSH
34624: LD_INT 4
34626: GREATER
34627: IFFALSE 34631
// break ;
34629: GO 35681
// case i of 1 :
34631: LD_VAR 0 8
34635: PUSH
34636: LD_INT 1
34638: DOUBLE
34639: EQUAL
34640: IFTRUE 34644
34642: GO 34724
34644: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34645: LD_ADDR_VAR 0 12
34649: PUSH
34650: LD_VAR 0 18
34654: PPUSH
34655: LD_INT 22
34657: PUSH
34658: LD_VAR 0 16
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 58
34669: PUSH
34670: EMPTY
34671: LIST
34672: PUSH
34673: LD_INT 2
34675: PUSH
34676: LD_INT 30
34678: PUSH
34679: LD_INT 32
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 30
34688: PUSH
34689: LD_INT 4
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PUSH
34696: LD_INT 30
34698: PUSH
34699: LD_INT 5
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: LIST
34716: PPUSH
34717: CALL_OW 72
34721: ST_TO_ADDR
34722: GO 34946
34724: LD_INT 2
34726: DOUBLE
34727: EQUAL
34728: IFTRUE 34732
34730: GO 34794
34732: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34733: LD_ADDR_VAR 0 12
34737: PUSH
34738: LD_VAR 0 18
34742: PPUSH
34743: LD_INT 22
34745: PUSH
34746: LD_VAR 0 16
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 2
34757: PUSH
34758: LD_INT 30
34760: PUSH
34761: LD_INT 0
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 30
34770: PUSH
34771: LD_INT 1
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: LIST
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PPUSH
34787: CALL_OW 72
34791: ST_TO_ADDR
34792: GO 34946
34794: LD_INT 3
34796: DOUBLE
34797: EQUAL
34798: IFTRUE 34802
34800: GO 34864
34802: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34803: LD_ADDR_VAR 0 12
34807: PUSH
34808: LD_VAR 0 18
34812: PPUSH
34813: LD_INT 22
34815: PUSH
34816: LD_VAR 0 16
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 2
34827: PUSH
34828: LD_INT 30
34830: PUSH
34831: LD_INT 2
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PUSH
34838: LD_INT 30
34840: PUSH
34841: LD_INT 3
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: LIST
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PPUSH
34857: CALL_OW 72
34861: ST_TO_ADDR
34862: GO 34946
34864: LD_INT 4
34866: DOUBLE
34867: EQUAL
34868: IFTRUE 34872
34870: GO 34945
34872: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34873: LD_ADDR_VAR 0 12
34877: PUSH
34878: LD_VAR 0 18
34882: PPUSH
34883: LD_INT 22
34885: PUSH
34886: LD_VAR 0 16
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 2
34897: PUSH
34898: LD_INT 30
34900: PUSH
34901: LD_INT 6
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 30
34910: PUSH
34911: LD_INT 7
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 30
34920: PUSH
34921: LD_INT 8
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PPUSH
34938: CALL_OW 72
34942: ST_TO_ADDR
34943: GO 34946
34945: POP
// if i = 1 then
34946: LD_VAR 0 8
34950: PUSH
34951: LD_INT 1
34953: EQUAL
34954: IFFALSE 35065
// begin tmp := [ ] ;
34956: LD_ADDR_VAR 0 19
34960: PUSH
34961: EMPTY
34962: ST_TO_ADDR
// for j in f do
34963: LD_ADDR_VAR 0 9
34967: PUSH
34968: LD_VAR 0 12
34972: PUSH
34973: FOR_IN
34974: IFFALSE 35047
// if GetBType ( j ) = b_bunker then
34976: LD_VAR 0 9
34980: PPUSH
34981: CALL_OW 266
34985: PUSH
34986: LD_INT 32
34988: EQUAL
34989: IFFALSE 35016
// tmp := Insert ( tmp , 1 , j ) else
34991: LD_ADDR_VAR 0 19
34995: PUSH
34996: LD_VAR 0 19
35000: PPUSH
35001: LD_INT 1
35003: PPUSH
35004: LD_VAR 0 9
35008: PPUSH
35009: CALL_OW 2
35013: ST_TO_ADDR
35014: GO 35045
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35016: LD_ADDR_VAR 0 19
35020: PUSH
35021: LD_VAR 0 19
35025: PPUSH
35026: LD_VAR 0 19
35030: PUSH
35031: LD_INT 1
35033: PLUS
35034: PPUSH
35035: LD_VAR 0 9
35039: PPUSH
35040: CALL_OW 2
35044: ST_TO_ADDR
35045: GO 34973
35047: POP
35048: POP
// if tmp then
35049: LD_VAR 0 19
35053: IFFALSE 35065
// f := tmp ;
35055: LD_ADDR_VAR 0 12
35059: PUSH
35060: LD_VAR 0 19
35064: ST_TO_ADDR
// end ; x := personel [ i ] ;
35065: LD_ADDR_VAR 0 13
35069: PUSH
35070: LD_VAR 0 6
35074: PUSH
35075: LD_VAR 0 8
35079: ARRAY
35080: ST_TO_ADDR
// if x = - 1 then
35081: LD_VAR 0 13
35085: PUSH
35086: LD_INT 1
35088: NEG
35089: EQUAL
35090: IFFALSE 35299
// begin for j in f do
35092: LD_ADDR_VAR 0 9
35096: PUSH
35097: LD_VAR 0 12
35101: PUSH
35102: FOR_IN
35103: IFFALSE 35295
// repeat InitHc ;
35105: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35109: LD_VAR 0 9
35113: PPUSH
35114: CALL_OW 266
35118: PUSH
35119: LD_INT 5
35121: EQUAL
35122: IFFALSE 35192
// begin if UnitsInside ( j ) < 3 then
35124: LD_VAR 0 9
35128: PPUSH
35129: CALL_OW 313
35133: PUSH
35134: LD_INT 3
35136: LESS
35137: IFFALSE 35173
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35139: LD_INT 0
35141: PPUSH
35142: LD_INT 5
35144: PUSH
35145: LD_INT 8
35147: PUSH
35148: LD_INT 9
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: LIST
35155: PUSH
35156: LD_VAR 0 17
35160: ARRAY
35161: PPUSH
35162: LD_VAR 0 4
35166: PPUSH
35167: CALL_OW 380
35171: GO 35190
// PrepareHuman ( false , i , skill ) ;
35173: LD_INT 0
35175: PPUSH
35176: LD_VAR 0 8
35180: PPUSH
35181: LD_VAR 0 4
35185: PPUSH
35186: CALL_OW 380
// end else
35190: GO 35209
// PrepareHuman ( false , i , skill ) ;
35192: LD_INT 0
35194: PPUSH
35195: LD_VAR 0 8
35199: PPUSH
35200: LD_VAR 0 4
35204: PPUSH
35205: CALL_OW 380
// un := CreateHuman ;
35209: LD_ADDR_VAR 0 14
35213: PUSH
35214: CALL_OW 44
35218: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35219: LD_ADDR_VAR 0 7
35223: PUSH
35224: LD_VAR 0 7
35228: PPUSH
35229: LD_INT 1
35231: PPUSH
35232: LD_VAR 0 14
35236: PPUSH
35237: CALL_OW 2
35241: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35242: LD_VAR 0 14
35246: PPUSH
35247: LD_VAR 0 9
35251: PPUSH
35252: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35256: LD_VAR 0 9
35260: PPUSH
35261: CALL_OW 313
35265: PUSH
35266: LD_INT 6
35268: EQUAL
35269: PUSH
35270: LD_VAR 0 9
35274: PPUSH
35275: CALL_OW 266
35279: PUSH
35280: LD_INT 32
35282: PUSH
35283: LD_INT 31
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: IN
35290: OR
35291: IFFALSE 35105
35293: GO 35102
35295: POP
35296: POP
// end else
35297: GO 35679
// for j = 1 to x do
35299: LD_ADDR_VAR 0 9
35303: PUSH
35304: DOUBLE
35305: LD_INT 1
35307: DEC
35308: ST_TO_ADDR
35309: LD_VAR 0 13
35313: PUSH
35314: FOR_TO
35315: IFFALSE 35677
// begin InitHc ;
35317: CALL_OW 19
// if not f then
35321: LD_VAR 0 12
35325: NOT
35326: IFFALSE 35415
// begin PrepareHuman ( false , i , skill ) ;
35328: LD_INT 0
35330: PPUSH
35331: LD_VAR 0 8
35335: PPUSH
35336: LD_VAR 0 4
35340: PPUSH
35341: CALL_OW 380
// un := CreateHuman ;
35345: LD_ADDR_VAR 0 14
35349: PUSH
35350: CALL_OW 44
35354: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35355: LD_ADDR_VAR 0 7
35359: PUSH
35360: LD_VAR 0 7
35364: PPUSH
35365: LD_INT 1
35367: PPUSH
35368: LD_VAR 0 14
35372: PPUSH
35373: CALL_OW 2
35377: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35378: LD_VAR 0 14
35382: PPUSH
35383: LD_VAR 0 1
35387: PPUSH
35388: CALL_OW 250
35392: PPUSH
35393: LD_VAR 0 1
35397: PPUSH
35398: CALL_OW 251
35402: PPUSH
35403: LD_INT 10
35405: PPUSH
35406: LD_INT 0
35408: PPUSH
35409: CALL_OW 50
// continue ;
35413: GO 35314
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35415: LD_VAR 0 12
35419: PUSH
35420: LD_INT 1
35422: ARRAY
35423: PPUSH
35424: CALL_OW 313
35428: PUSH
35429: LD_VAR 0 12
35433: PUSH
35434: LD_INT 1
35436: ARRAY
35437: PPUSH
35438: CALL_OW 266
35442: PUSH
35443: LD_INT 32
35445: PUSH
35446: LD_INT 31
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: IN
35453: AND
35454: PUSH
35455: LD_VAR 0 12
35459: PUSH
35460: LD_INT 1
35462: ARRAY
35463: PPUSH
35464: CALL_OW 313
35468: PUSH
35469: LD_INT 6
35471: EQUAL
35472: OR
35473: IFFALSE 35493
// f := Delete ( f , 1 ) ;
35475: LD_ADDR_VAR 0 12
35479: PUSH
35480: LD_VAR 0 12
35484: PPUSH
35485: LD_INT 1
35487: PPUSH
35488: CALL_OW 3
35492: ST_TO_ADDR
// if not f then
35493: LD_VAR 0 12
35497: NOT
35498: IFFALSE 35516
// begin x := x + 2 ;
35500: LD_ADDR_VAR 0 13
35504: PUSH
35505: LD_VAR 0 13
35509: PUSH
35510: LD_INT 2
35512: PLUS
35513: ST_TO_ADDR
// continue ;
35514: GO 35314
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35516: LD_VAR 0 12
35520: PUSH
35521: LD_INT 1
35523: ARRAY
35524: PPUSH
35525: CALL_OW 266
35529: PUSH
35530: LD_INT 5
35532: EQUAL
35533: IFFALSE 35607
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35535: LD_VAR 0 12
35539: PUSH
35540: LD_INT 1
35542: ARRAY
35543: PPUSH
35544: CALL_OW 313
35548: PUSH
35549: LD_INT 3
35551: LESS
35552: IFFALSE 35588
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35554: LD_INT 0
35556: PPUSH
35557: LD_INT 5
35559: PUSH
35560: LD_INT 8
35562: PUSH
35563: LD_INT 9
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: LIST
35570: PUSH
35571: LD_VAR 0 17
35575: ARRAY
35576: PPUSH
35577: LD_VAR 0 4
35581: PPUSH
35582: CALL_OW 380
35586: GO 35605
// PrepareHuman ( false , i , skill ) ;
35588: LD_INT 0
35590: PPUSH
35591: LD_VAR 0 8
35595: PPUSH
35596: LD_VAR 0 4
35600: PPUSH
35601: CALL_OW 380
// end else
35605: GO 35624
// PrepareHuman ( false , i , skill ) ;
35607: LD_INT 0
35609: PPUSH
35610: LD_VAR 0 8
35614: PPUSH
35615: LD_VAR 0 4
35619: PPUSH
35620: CALL_OW 380
// un := CreateHuman ;
35624: LD_ADDR_VAR 0 14
35628: PUSH
35629: CALL_OW 44
35633: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35634: LD_ADDR_VAR 0 7
35638: PUSH
35639: LD_VAR 0 7
35643: PPUSH
35644: LD_INT 1
35646: PPUSH
35647: LD_VAR 0 14
35651: PPUSH
35652: CALL_OW 2
35656: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35657: LD_VAR 0 14
35661: PPUSH
35662: LD_VAR 0 12
35666: PUSH
35667: LD_INT 1
35669: ARRAY
35670: PPUSH
35671: CALL_OW 52
// end ;
35675: GO 35314
35677: POP
35678: POP
// end ;
35679: GO 34616
35681: POP
35682: POP
// result := result ^ buildings ;
35683: LD_ADDR_VAR 0 7
35687: PUSH
35688: LD_VAR 0 7
35692: PUSH
35693: LD_VAR 0 18
35697: ADD
35698: ST_TO_ADDR
// end else
35699: GO 35842
// begin for i = 1 to personel do
35701: LD_ADDR_VAR 0 8
35705: PUSH
35706: DOUBLE
35707: LD_INT 1
35709: DEC
35710: ST_TO_ADDR
35711: LD_VAR 0 6
35715: PUSH
35716: FOR_TO
35717: IFFALSE 35840
// begin if i > 4 then
35719: LD_VAR 0 8
35723: PUSH
35724: LD_INT 4
35726: GREATER
35727: IFFALSE 35731
// break ;
35729: GO 35840
// x := personel [ i ] ;
35731: LD_ADDR_VAR 0 13
35735: PUSH
35736: LD_VAR 0 6
35740: PUSH
35741: LD_VAR 0 8
35745: ARRAY
35746: ST_TO_ADDR
// if x = - 1 then
35747: LD_VAR 0 13
35751: PUSH
35752: LD_INT 1
35754: NEG
35755: EQUAL
35756: IFFALSE 35760
// continue ;
35758: GO 35716
// PrepareHuman ( false , i , skill ) ;
35760: LD_INT 0
35762: PPUSH
35763: LD_VAR 0 8
35767: PPUSH
35768: LD_VAR 0 4
35772: PPUSH
35773: CALL_OW 380
// un := CreateHuman ;
35777: LD_ADDR_VAR 0 14
35781: PUSH
35782: CALL_OW 44
35786: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35787: LD_VAR 0 14
35791: PPUSH
35792: LD_VAR 0 1
35796: PPUSH
35797: CALL_OW 250
35801: PPUSH
35802: LD_VAR 0 1
35806: PPUSH
35807: CALL_OW 251
35811: PPUSH
35812: LD_INT 10
35814: PPUSH
35815: LD_INT 0
35817: PPUSH
35818: CALL_OW 50
// result := result ^ un ;
35822: LD_ADDR_VAR 0 7
35826: PUSH
35827: LD_VAR 0 7
35831: PUSH
35832: LD_VAR 0 14
35836: ADD
35837: ST_TO_ADDR
// end ;
35838: GO 35716
35840: POP
35841: POP
// end ; end ;
35842: LD_VAR 0 7
35846: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35847: LD_INT 0
35849: PPUSH
35850: PPUSH
35851: PPUSH
35852: PPUSH
35853: PPUSH
35854: PPUSH
35855: PPUSH
35856: PPUSH
35857: PPUSH
35858: PPUSH
35859: PPUSH
35860: PPUSH
35861: PPUSH
35862: PPUSH
35863: PPUSH
35864: PPUSH
// result := false ;
35865: LD_ADDR_VAR 0 3
35869: PUSH
35870: LD_INT 0
35872: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35873: LD_VAR 0 1
35877: NOT
35878: PUSH
35879: LD_VAR 0 1
35883: PPUSH
35884: CALL_OW 266
35888: PUSH
35889: LD_INT 32
35891: PUSH
35892: LD_INT 33
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: IN
35899: NOT
35900: OR
35901: IFFALSE 35905
// exit ;
35903: GO 37014
// nat := GetNation ( tower ) ;
35905: LD_ADDR_VAR 0 12
35909: PUSH
35910: LD_VAR 0 1
35914: PPUSH
35915: CALL_OW 248
35919: ST_TO_ADDR
// side := GetSide ( tower ) ;
35920: LD_ADDR_VAR 0 16
35924: PUSH
35925: LD_VAR 0 1
35929: PPUSH
35930: CALL_OW 255
35934: ST_TO_ADDR
// x := GetX ( tower ) ;
35935: LD_ADDR_VAR 0 10
35939: PUSH
35940: LD_VAR 0 1
35944: PPUSH
35945: CALL_OW 250
35949: ST_TO_ADDR
// y := GetY ( tower ) ;
35950: LD_ADDR_VAR 0 11
35954: PUSH
35955: LD_VAR 0 1
35959: PPUSH
35960: CALL_OW 251
35964: ST_TO_ADDR
// if not x or not y then
35965: LD_VAR 0 10
35969: NOT
35970: PUSH
35971: LD_VAR 0 11
35975: NOT
35976: OR
35977: IFFALSE 35981
// exit ;
35979: GO 37014
// weapon := 0 ;
35981: LD_ADDR_VAR 0 18
35985: PUSH
35986: LD_INT 0
35988: ST_TO_ADDR
// fac_list := [ ] ;
35989: LD_ADDR_VAR 0 17
35993: PUSH
35994: EMPTY
35995: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35996: LD_ADDR_VAR 0 6
36000: PUSH
36001: LD_VAR 0 1
36005: PPUSH
36006: CALL_OW 274
36010: PPUSH
36011: LD_VAR 0 2
36015: PPUSH
36016: LD_INT 0
36018: PPUSH
36019: CALL 33585 0 3
36023: PPUSH
36024: LD_INT 30
36026: PUSH
36027: LD_INT 3
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PPUSH
36034: CALL_OW 72
36038: ST_TO_ADDR
// if not factories then
36039: LD_VAR 0 6
36043: NOT
36044: IFFALSE 36048
// exit ;
36046: GO 37014
// for i in factories do
36048: LD_ADDR_VAR 0 8
36052: PUSH
36053: LD_VAR 0 6
36057: PUSH
36058: FOR_IN
36059: IFFALSE 36084
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36061: LD_ADDR_VAR 0 17
36065: PUSH
36066: LD_VAR 0 17
36070: PUSH
36071: LD_VAR 0 8
36075: PPUSH
36076: CALL_OW 478
36080: UNION
36081: ST_TO_ADDR
36082: GO 36058
36084: POP
36085: POP
// if not fac_list then
36086: LD_VAR 0 17
36090: NOT
36091: IFFALSE 36095
// exit ;
36093: GO 37014
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36095: LD_ADDR_VAR 0 5
36099: PUSH
36100: LD_INT 4
36102: PUSH
36103: LD_INT 5
36105: PUSH
36106: LD_INT 9
36108: PUSH
36109: LD_INT 10
36111: PUSH
36112: LD_INT 6
36114: PUSH
36115: LD_INT 7
36117: PUSH
36118: LD_INT 11
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 27
36132: PUSH
36133: LD_INT 28
36135: PUSH
36136: LD_INT 26
36138: PUSH
36139: LD_INT 30
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 43
36150: PUSH
36151: LD_INT 44
36153: PUSH
36154: LD_INT 46
36156: PUSH
36157: LD_INT 45
36159: PUSH
36160: LD_INT 47
36162: PUSH
36163: LD_INT 49
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: LIST
36178: PUSH
36179: LD_VAR 0 12
36183: ARRAY
36184: ST_TO_ADDR
// list := list isect fac_list ;
36185: LD_ADDR_VAR 0 5
36189: PUSH
36190: LD_VAR 0 5
36194: PUSH
36195: LD_VAR 0 17
36199: ISECT
36200: ST_TO_ADDR
// if not list then
36201: LD_VAR 0 5
36205: NOT
36206: IFFALSE 36210
// exit ;
36208: GO 37014
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36210: LD_VAR 0 12
36214: PUSH
36215: LD_INT 3
36217: EQUAL
36218: PUSH
36219: LD_INT 49
36221: PUSH
36222: LD_VAR 0 5
36226: IN
36227: AND
36228: PUSH
36229: LD_INT 31
36231: PPUSH
36232: LD_VAR 0 16
36236: PPUSH
36237: CALL_OW 321
36241: PUSH
36242: LD_INT 2
36244: EQUAL
36245: AND
36246: IFFALSE 36306
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36248: LD_INT 22
36250: PUSH
36251: LD_VAR 0 16
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 35
36262: PUSH
36263: LD_INT 49
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 91
36272: PUSH
36273: LD_VAR 0 1
36277: PUSH
36278: LD_INT 10
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: LIST
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: LIST
36290: PPUSH
36291: CALL_OW 69
36295: NOT
36296: IFFALSE 36306
// weapon := ru_time_lapser ;
36298: LD_ADDR_VAR 0 18
36302: PUSH
36303: LD_INT 49
36305: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36306: LD_VAR 0 12
36310: PUSH
36311: LD_INT 1
36313: PUSH
36314: LD_INT 2
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: IN
36321: PUSH
36322: LD_INT 11
36324: PUSH
36325: LD_VAR 0 5
36329: IN
36330: PUSH
36331: LD_INT 30
36333: PUSH
36334: LD_VAR 0 5
36338: IN
36339: OR
36340: AND
36341: PUSH
36342: LD_INT 6
36344: PPUSH
36345: LD_VAR 0 16
36349: PPUSH
36350: CALL_OW 321
36354: PUSH
36355: LD_INT 2
36357: EQUAL
36358: AND
36359: IFFALSE 36524
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36361: LD_INT 22
36363: PUSH
36364: LD_VAR 0 16
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 2
36375: PUSH
36376: LD_INT 35
36378: PUSH
36379: LD_INT 11
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 35
36388: PUSH
36389: LD_INT 30
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 91
36403: PUSH
36404: LD_VAR 0 1
36408: PUSH
36409: LD_INT 18
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: LIST
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: LIST
36421: PPUSH
36422: CALL_OW 69
36426: NOT
36427: PUSH
36428: LD_INT 22
36430: PUSH
36431: LD_VAR 0 16
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 2
36442: PUSH
36443: LD_INT 30
36445: PUSH
36446: LD_INT 32
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 30
36455: PUSH
36456: LD_INT 33
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 91
36470: PUSH
36471: LD_VAR 0 1
36475: PUSH
36476: LD_INT 12
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: LIST
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: LIST
36488: PUSH
36489: EMPTY
36490: LIST
36491: PPUSH
36492: CALL_OW 69
36496: PUSH
36497: LD_INT 2
36499: GREATER
36500: AND
36501: IFFALSE 36524
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36503: LD_ADDR_VAR 0 18
36507: PUSH
36508: LD_INT 11
36510: PUSH
36511: LD_INT 30
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_VAR 0 12
36522: ARRAY
36523: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36524: LD_VAR 0 18
36528: NOT
36529: PUSH
36530: LD_INT 40
36532: PPUSH
36533: LD_VAR 0 16
36537: PPUSH
36538: CALL_OW 321
36542: PUSH
36543: LD_INT 2
36545: EQUAL
36546: AND
36547: PUSH
36548: LD_INT 7
36550: PUSH
36551: LD_VAR 0 5
36555: IN
36556: PUSH
36557: LD_INT 28
36559: PUSH
36560: LD_VAR 0 5
36564: IN
36565: OR
36566: PUSH
36567: LD_INT 45
36569: PUSH
36570: LD_VAR 0 5
36574: IN
36575: OR
36576: AND
36577: IFFALSE 36831
// begin hex := GetHexInfo ( x , y ) ;
36579: LD_ADDR_VAR 0 4
36583: PUSH
36584: LD_VAR 0 10
36588: PPUSH
36589: LD_VAR 0 11
36593: PPUSH
36594: CALL_OW 546
36598: ST_TO_ADDR
// if hex [ 1 ] then
36599: LD_VAR 0 4
36603: PUSH
36604: LD_INT 1
36606: ARRAY
36607: IFFALSE 36611
// exit ;
36609: GO 37014
// height := hex [ 2 ] ;
36611: LD_ADDR_VAR 0 15
36615: PUSH
36616: LD_VAR 0 4
36620: PUSH
36621: LD_INT 2
36623: ARRAY
36624: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36625: LD_ADDR_VAR 0 14
36629: PUSH
36630: LD_INT 0
36632: PUSH
36633: LD_INT 2
36635: PUSH
36636: LD_INT 3
36638: PUSH
36639: LD_INT 5
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: ST_TO_ADDR
// for i in tmp do
36648: LD_ADDR_VAR 0 8
36652: PUSH
36653: LD_VAR 0 14
36657: PUSH
36658: FOR_IN
36659: IFFALSE 36829
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36661: LD_ADDR_VAR 0 9
36665: PUSH
36666: LD_VAR 0 10
36670: PPUSH
36671: LD_VAR 0 8
36675: PPUSH
36676: LD_INT 5
36678: PPUSH
36679: CALL_OW 272
36683: PUSH
36684: LD_VAR 0 11
36688: PPUSH
36689: LD_VAR 0 8
36693: PPUSH
36694: LD_INT 5
36696: PPUSH
36697: CALL_OW 273
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36706: LD_VAR 0 9
36710: PUSH
36711: LD_INT 1
36713: ARRAY
36714: PPUSH
36715: LD_VAR 0 9
36719: PUSH
36720: LD_INT 2
36722: ARRAY
36723: PPUSH
36724: CALL_OW 488
36728: IFFALSE 36827
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36730: LD_ADDR_VAR 0 4
36734: PUSH
36735: LD_VAR 0 9
36739: PUSH
36740: LD_INT 1
36742: ARRAY
36743: PPUSH
36744: LD_VAR 0 9
36748: PUSH
36749: LD_INT 2
36751: ARRAY
36752: PPUSH
36753: CALL_OW 546
36757: ST_TO_ADDR
// if hex [ 1 ] then
36758: LD_VAR 0 4
36762: PUSH
36763: LD_INT 1
36765: ARRAY
36766: IFFALSE 36770
// continue ;
36768: GO 36658
// h := hex [ 2 ] ;
36770: LD_ADDR_VAR 0 13
36774: PUSH
36775: LD_VAR 0 4
36779: PUSH
36780: LD_INT 2
36782: ARRAY
36783: ST_TO_ADDR
// if h + 7 < height then
36784: LD_VAR 0 13
36788: PUSH
36789: LD_INT 7
36791: PLUS
36792: PUSH
36793: LD_VAR 0 15
36797: LESS
36798: IFFALSE 36827
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36800: LD_ADDR_VAR 0 18
36804: PUSH
36805: LD_INT 7
36807: PUSH
36808: LD_INT 28
36810: PUSH
36811: LD_INT 45
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: LIST
36818: PUSH
36819: LD_VAR 0 12
36823: ARRAY
36824: ST_TO_ADDR
// break ;
36825: GO 36829
// end ; end ; end ;
36827: GO 36658
36829: POP
36830: POP
// end ; if not weapon then
36831: LD_VAR 0 18
36835: NOT
36836: IFFALSE 36896
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36838: LD_ADDR_VAR 0 5
36842: PUSH
36843: LD_VAR 0 5
36847: PUSH
36848: LD_INT 11
36850: PUSH
36851: LD_INT 30
36853: PUSH
36854: LD_INT 49
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: LIST
36861: DIFF
36862: ST_TO_ADDR
// if not list then
36863: LD_VAR 0 5
36867: NOT
36868: IFFALSE 36872
// exit ;
36870: GO 37014
// weapon := list [ rand ( 1 , list ) ] ;
36872: LD_ADDR_VAR 0 18
36876: PUSH
36877: LD_VAR 0 5
36881: PUSH
36882: LD_INT 1
36884: PPUSH
36885: LD_VAR 0 5
36889: PPUSH
36890: CALL_OW 12
36894: ARRAY
36895: ST_TO_ADDR
// end ; if weapon then
36896: LD_VAR 0 18
36900: IFFALSE 37014
// begin tmp := CostOfWeapon ( weapon ) ;
36902: LD_ADDR_VAR 0 14
36906: PUSH
36907: LD_VAR 0 18
36911: PPUSH
36912: CALL_OW 451
36916: ST_TO_ADDR
// j := GetBase ( tower ) ;
36917: LD_ADDR_VAR 0 9
36921: PUSH
36922: LD_VAR 0 1
36926: PPUSH
36927: CALL_OW 274
36931: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36932: LD_VAR 0 9
36936: PPUSH
36937: LD_INT 1
36939: PPUSH
36940: CALL_OW 275
36944: PUSH
36945: LD_VAR 0 14
36949: PUSH
36950: LD_INT 1
36952: ARRAY
36953: GREATEREQUAL
36954: PUSH
36955: LD_VAR 0 9
36959: PPUSH
36960: LD_INT 2
36962: PPUSH
36963: CALL_OW 275
36967: PUSH
36968: LD_VAR 0 14
36972: PUSH
36973: LD_INT 2
36975: ARRAY
36976: GREATEREQUAL
36977: AND
36978: PUSH
36979: LD_VAR 0 9
36983: PPUSH
36984: LD_INT 3
36986: PPUSH
36987: CALL_OW 275
36991: PUSH
36992: LD_VAR 0 14
36996: PUSH
36997: LD_INT 3
36999: ARRAY
37000: GREATEREQUAL
37001: AND
37002: IFFALSE 37014
// result := weapon ;
37004: LD_ADDR_VAR 0 3
37008: PUSH
37009: LD_VAR 0 18
37013: ST_TO_ADDR
// end ; end ;
37014: LD_VAR 0 3
37018: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37019: LD_INT 0
37021: PPUSH
37022: PPUSH
// result := true ;
37023: LD_ADDR_VAR 0 3
37027: PUSH
37028: LD_INT 1
37030: ST_TO_ADDR
// if array1 = array2 then
37031: LD_VAR 0 1
37035: PUSH
37036: LD_VAR 0 2
37040: EQUAL
37041: IFFALSE 37101
// begin for i = 1 to array1 do
37043: LD_ADDR_VAR 0 4
37047: PUSH
37048: DOUBLE
37049: LD_INT 1
37051: DEC
37052: ST_TO_ADDR
37053: LD_VAR 0 1
37057: PUSH
37058: FOR_TO
37059: IFFALSE 37097
// if array1 [ i ] <> array2 [ i ] then
37061: LD_VAR 0 1
37065: PUSH
37066: LD_VAR 0 4
37070: ARRAY
37071: PUSH
37072: LD_VAR 0 2
37076: PUSH
37077: LD_VAR 0 4
37081: ARRAY
37082: NONEQUAL
37083: IFFALSE 37095
// begin result := false ;
37085: LD_ADDR_VAR 0 3
37089: PUSH
37090: LD_INT 0
37092: ST_TO_ADDR
// break ;
37093: GO 37097
// end ;
37095: GO 37058
37097: POP
37098: POP
// end else
37099: GO 37109
// result := false ;
37101: LD_ADDR_VAR 0 3
37105: PUSH
37106: LD_INT 0
37108: ST_TO_ADDR
// end ;
37109: LD_VAR 0 3
37113: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37114: LD_INT 0
37116: PPUSH
37117: PPUSH
// if not array1 or not array2 then
37118: LD_VAR 0 1
37122: NOT
37123: PUSH
37124: LD_VAR 0 2
37128: NOT
37129: OR
37130: IFFALSE 37134
// exit ;
37132: GO 37198
// result := true ;
37134: LD_ADDR_VAR 0 3
37138: PUSH
37139: LD_INT 1
37141: ST_TO_ADDR
// for i = 1 to array1 do
37142: LD_ADDR_VAR 0 4
37146: PUSH
37147: DOUBLE
37148: LD_INT 1
37150: DEC
37151: ST_TO_ADDR
37152: LD_VAR 0 1
37156: PUSH
37157: FOR_TO
37158: IFFALSE 37196
// if array1 [ i ] <> array2 [ i ] then
37160: LD_VAR 0 1
37164: PUSH
37165: LD_VAR 0 4
37169: ARRAY
37170: PUSH
37171: LD_VAR 0 2
37175: PUSH
37176: LD_VAR 0 4
37180: ARRAY
37181: NONEQUAL
37182: IFFALSE 37194
// begin result := false ;
37184: LD_ADDR_VAR 0 3
37188: PUSH
37189: LD_INT 0
37191: ST_TO_ADDR
// break ;
37192: GO 37196
// end ;
37194: GO 37157
37196: POP
37197: POP
// end ;
37198: LD_VAR 0 3
37202: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37203: LD_INT 0
37205: PPUSH
37206: PPUSH
37207: PPUSH
// pom := GetBase ( fac ) ;
37208: LD_ADDR_VAR 0 5
37212: PUSH
37213: LD_VAR 0 1
37217: PPUSH
37218: CALL_OW 274
37222: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37223: LD_ADDR_VAR 0 4
37227: PUSH
37228: LD_VAR 0 2
37232: PUSH
37233: LD_INT 1
37235: ARRAY
37236: PPUSH
37237: LD_VAR 0 2
37241: PUSH
37242: LD_INT 2
37244: ARRAY
37245: PPUSH
37246: LD_VAR 0 2
37250: PUSH
37251: LD_INT 3
37253: ARRAY
37254: PPUSH
37255: LD_VAR 0 2
37259: PUSH
37260: LD_INT 4
37262: ARRAY
37263: PPUSH
37264: CALL_OW 449
37268: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37269: LD_ADDR_VAR 0 3
37273: PUSH
37274: LD_VAR 0 5
37278: PPUSH
37279: LD_INT 1
37281: PPUSH
37282: CALL_OW 275
37286: PUSH
37287: LD_VAR 0 4
37291: PUSH
37292: LD_INT 1
37294: ARRAY
37295: GREATEREQUAL
37296: PUSH
37297: LD_VAR 0 5
37301: PPUSH
37302: LD_INT 2
37304: PPUSH
37305: CALL_OW 275
37309: PUSH
37310: LD_VAR 0 4
37314: PUSH
37315: LD_INT 2
37317: ARRAY
37318: GREATEREQUAL
37319: AND
37320: PUSH
37321: LD_VAR 0 5
37325: PPUSH
37326: LD_INT 3
37328: PPUSH
37329: CALL_OW 275
37333: PUSH
37334: LD_VAR 0 4
37338: PUSH
37339: LD_INT 3
37341: ARRAY
37342: GREATEREQUAL
37343: AND
37344: ST_TO_ADDR
// end ;
37345: LD_VAR 0 3
37349: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37350: LD_INT 0
37352: PPUSH
37353: PPUSH
37354: PPUSH
37355: PPUSH
// pom := GetBase ( building ) ;
37356: LD_ADDR_VAR 0 3
37360: PUSH
37361: LD_VAR 0 1
37365: PPUSH
37366: CALL_OW 274
37370: ST_TO_ADDR
// if not pom then
37371: LD_VAR 0 3
37375: NOT
37376: IFFALSE 37380
// exit ;
37378: GO 37550
// btype := GetBType ( building ) ;
37380: LD_ADDR_VAR 0 5
37384: PUSH
37385: LD_VAR 0 1
37389: PPUSH
37390: CALL_OW 266
37394: ST_TO_ADDR
// if btype = b_armoury then
37395: LD_VAR 0 5
37399: PUSH
37400: LD_INT 4
37402: EQUAL
37403: IFFALSE 37413
// btype := b_barracks ;
37405: LD_ADDR_VAR 0 5
37409: PUSH
37410: LD_INT 5
37412: ST_TO_ADDR
// if btype = b_depot then
37413: LD_VAR 0 5
37417: PUSH
37418: LD_INT 0
37420: EQUAL
37421: IFFALSE 37431
// btype := b_warehouse ;
37423: LD_ADDR_VAR 0 5
37427: PUSH
37428: LD_INT 1
37430: ST_TO_ADDR
// if btype = b_workshop then
37431: LD_VAR 0 5
37435: PUSH
37436: LD_INT 2
37438: EQUAL
37439: IFFALSE 37449
// btype := b_factory ;
37441: LD_ADDR_VAR 0 5
37445: PUSH
37446: LD_INT 3
37448: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37449: LD_ADDR_VAR 0 4
37453: PUSH
37454: LD_VAR 0 5
37458: PPUSH
37459: LD_VAR 0 1
37463: PPUSH
37464: CALL_OW 248
37468: PPUSH
37469: CALL_OW 450
37473: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37474: LD_ADDR_VAR 0 2
37478: PUSH
37479: LD_VAR 0 3
37483: PPUSH
37484: LD_INT 1
37486: PPUSH
37487: CALL_OW 275
37491: PUSH
37492: LD_VAR 0 4
37496: PUSH
37497: LD_INT 1
37499: ARRAY
37500: GREATEREQUAL
37501: PUSH
37502: LD_VAR 0 3
37506: PPUSH
37507: LD_INT 2
37509: PPUSH
37510: CALL_OW 275
37514: PUSH
37515: LD_VAR 0 4
37519: PUSH
37520: LD_INT 2
37522: ARRAY
37523: GREATEREQUAL
37524: AND
37525: PUSH
37526: LD_VAR 0 3
37530: PPUSH
37531: LD_INT 3
37533: PPUSH
37534: CALL_OW 275
37538: PUSH
37539: LD_VAR 0 4
37543: PUSH
37544: LD_INT 3
37546: ARRAY
37547: GREATEREQUAL
37548: AND
37549: ST_TO_ADDR
// end ;
37550: LD_VAR 0 2
37554: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37555: LD_INT 0
37557: PPUSH
37558: PPUSH
37559: PPUSH
// pom := GetBase ( building ) ;
37560: LD_ADDR_VAR 0 4
37564: PUSH
37565: LD_VAR 0 1
37569: PPUSH
37570: CALL_OW 274
37574: ST_TO_ADDR
// if not pom then
37575: LD_VAR 0 4
37579: NOT
37580: IFFALSE 37584
// exit ;
37582: GO 37685
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37584: LD_ADDR_VAR 0 5
37588: PUSH
37589: LD_VAR 0 2
37593: PPUSH
37594: LD_VAR 0 1
37598: PPUSH
37599: CALL_OW 248
37603: PPUSH
37604: CALL_OW 450
37608: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37609: LD_ADDR_VAR 0 3
37613: PUSH
37614: LD_VAR 0 4
37618: PPUSH
37619: LD_INT 1
37621: PPUSH
37622: CALL_OW 275
37626: PUSH
37627: LD_VAR 0 5
37631: PUSH
37632: LD_INT 1
37634: ARRAY
37635: GREATEREQUAL
37636: PUSH
37637: LD_VAR 0 4
37641: PPUSH
37642: LD_INT 2
37644: PPUSH
37645: CALL_OW 275
37649: PUSH
37650: LD_VAR 0 5
37654: PUSH
37655: LD_INT 2
37657: ARRAY
37658: GREATEREQUAL
37659: AND
37660: PUSH
37661: LD_VAR 0 4
37665: PPUSH
37666: LD_INT 3
37668: PPUSH
37669: CALL_OW 275
37673: PUSH
37674: LD_VAR 0 5
37678: PUSH
37679: LD_INT 3
37681: ARRAY
37682: GREATEREQUAL
37683: AND
37684: ST_TO_ADDR
// end ;
37685: LD_VAR 0 3
37689: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37690: LD_INT 0
37692: PPUSH
37693: PPUSH
37694: PPUSH
37695: PPUSH
37696: PPUSH
37697: PPUSH
37698: PPUSH
37699: PPUSH
37700: PPUSH
37701: PPUSH
37702: PPUSH
// result := false ;
37703: LD_ADDR_VAR 0 8
37707: PUSH
37708: LD_INT 0
37710: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37711: LD_VAR 0 5
37715: NOT
37716: PUSH
37717: LD_VAR 0 1
37721: NOT
37722: OR
37723: PUSH
37724: LD_VAR 0 2
37728: NOT
37729: OR
37730: PUSH
37731: LD_VAR 0 3
37735: NOT
37736: OR
37737: IFFALSE 37741
// exit ;
37739: GO 38555
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37741: LD_ADDR_VAR 0 14
37745: PUSH
37746: LD_VAR 0 1
37750: PPUSH
37751: LD_VAR 0 2
37755: PPUSH
37756: LD_VAR 0 3
37760: PPUSH
37761: LD_VAR 0 4
37765: PPUSH
37766: LD_VAR 0 5
37770: PUSH
37771: LD_INT 1
37773: ARRAY
37774: PPUSH
37775: CALL_OW 248
37779: PPUSH
37780: LD_INT 0
37782: PPUSH
37783: CALL 39788 0 6
37787: ST_TO_ADDR
// if not hexes then
37788: LD_VAR 0 14
37792: NOT
37793: IFFALSE 37797
// exit ;
37795: GO 38555
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37797: LD_ADDR_VAR 0 17
37801: PUSH
37802: LD_VAR 0 5
37806: PPUSH
37807: LD_INT 22
37809: PUSH
37810: LD_VAR 0 13
37814: PPUSH
37815: CALL_OW 255
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 2
37826: PUSH
37827: LD_INT 30
37829: PUSH
37830: LD_INT 0
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 30
37839: PUSH
37840: LD_INT 1
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: LIST
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PPUSH
37856: CALL_OW 72
37860: ST_TO_ADDR
// for i = 1 to hexes do
37861: LD_ADDR_VAR 0 9
37865: PUSH
37866: DOUBLE
37867: LD_INT 1
37869: DEC
37870: ST_TO_ADDR
37871: LD_VAR 0 14
37875: PUSH
37876: FOR_TO
37877: IFFALSE 38553
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37879: LD_ADDR_VAR 0 13
37883: PUSH
37884: LD_VAR 0 14
37888: PUSH
37889: LD_VAR 0 9
37893: ARRAY
37894: PUSH
37895: LD_INT 1
37897: ARRAY
37898: PPUSH
37899: LD_VAR 0 14
37903: PUSH
37904: LD_VAR 0 9
37908: ARRAY
37909: PUSH
37910: LD_INT 2
37912: ARRAY
37913: PPUSH
37914: CALL_OW 428
37918: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37919: LD_VAR 0 14
37923: PUSH
37924: LD_VAR 0 9
37928: ARRAY
37929: PUSH
37930: LD_INT 1
37932: ARRAY
37933: PPUSH
37934: LD_VAR 0 14
37938: PUSH
37939: LD_VAR 0 9
37943: ARRAY
37944: PUSH
37945: LD_INT 2
37947: ARRAY
37948: PPUSH
37949: CALL_OW 351
37953: PUSH
37954: LD_VAR 0 14
37958: PUSH
37959: LD_VAR 0 9
37963: ARRAY
37964: PUSH
37965: LD_INT 1
37967: ARRAY
37968: PPUSH
37969: LD_VAR 0 14
37973: PUSH
37974: LD_VAR 0 9
37978: ARRAY
37979: PUSH
37980: LD_INT 2
37982: ARRAY
37983: PPUSH
37984: CALL_OW 488
37988: NOT
37989: OR
37990: PUSH
37991: LD_VAR 0 13
37995: PPUSH
37996: CALL_OW 247
38000: PUSH
38001: LD_INT 3
38003: EQUAL
38004: OR
38005: IFFALSE 38011
// exit ;
38007: POP
38008: POP
38009: GO 38555
// if not tmp then
38011: LD_VAR 0 13
38015: NOT
38016: IFFALSE 38020
// continue ;
38018: GO 37876
// result := true ;
38020: LD_ADDR_VAR 0 8
38024: PUSH
38025: LD_INT 1
38027: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38028: LD_VAR 0 6
38032: PUSH
38033: LD_VAR 0 13
38037: PPUSH
38038: CALL_OW 247
38042: PUSH
38043: LD_INT 2
38045: EQUAL
38046: AND
38047: PUSH
38048: LD_VAR 0 13
38052: PPUSH
38053: CALL_OW 263
38057: PUSH
38058: LD_INT 1
38060: EQUAL
38061: AND
38062: IFFALSE 38226
// begin if IsDrivenBy ( tmp ) then
38064: LD_VAR 0 13
38068: PPUSH
38069: CALL_OW 311
38073: IFFALSE 38077
// continue ;
38075: GO 37876
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38077: LD_VAR 0 6
38081: PPUSH
38082: LD_INT 3
38084: PUSH
38085: LD_INT 60
38087: PUSH
38088: EMPTY
38089: LIST
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 3
38097: PUSH
38098: LD_INT 55
38100: PUSH
38101: EMPTY
38102: LIST
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PPUSH
38112: CALL_OW 72
38116: IFFALSE 38224
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38118: LD_ADDR_VAR 0 18
38122: PUSH
38123: LD_VAR 0 6
38127: PPUSH
38128: LD_INT 3
38130: PUSH
38131: LD_INT 60
38133: PUSH
38134: EMPTY
38135: LIST
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 3
38143: PUSH
38144: LD_INT 55
38146: PUSH
38147: EMPTY
38148: LIST
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PPUSH
38158: CALL_OW 72
38162: PUSH
38163: LD_INT 1
38165: ARRAY
38166: ST_TO_ADDR
// if IsInUnit ( driver ) then
38167: LD_VAR 0 18
38171: PPUSH
38172: CALL_OW 310
38176: IFFALSE 38187
// ComExit ( driver ) ;
38178: LD_VAR 0 18
38182: PPUSH
38183: CALL 63549 0 1
// AddComEnterUnit ( driver , tmp ) ;
38187: LD_VAR 0 18
38191: PPUSH
38192: LD_VAR 0 13
38196: PPUSH
38197: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38201: LD_VAR 0 18
38205: PPUSH
38206: LD_VAR 0 7
38210: PPUSH
38211: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38215: LD_VAR 0 18
38219: PPUSH
38220: CALL_OW 181
// end ; continue ;
38224: GO 37876
// end ; if not cleaners or not tmp in cleaners then
38226: LD_VAR 0 6
38230: NOT
38231: PUSH
38232: LD_VAR 0 13
38236: PUSH
38237: LD_VAR 0 6
38241: IN
38242: NOT
38243: OR
38244: IFFALSE 38551
// begin if dep then
38246: LD_VAR 0 17
38250: IFFALSE 38386
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38252: LD_ADDR_VAR 0 16
38256: PUSH
38257: LD_VAR 0 17
38261: PUSH
38262: LD_INT 1
38264: ARRAY
38265: PPUSH
38266: CALL_OW 250
38270: PPUSH
38271: LD_VAR 0 17
38275: PUSH
38276: LD_INT 1
38278: ARRAY
38279: PPUSH
38280: CALL_OW 254
38284: PPUSH
38285: LD_INT 5
38287: PPUSH
38288: CALL_OW 272
38292: PUSH
38293: LD_VAR 0 17
38297: PUSH
38298: LD_INT 1
38300: ARRAY
38301: PPUSH
38302: CALL_OW 251
38306: PPUSH
38307: LD_VAR 0 17
38311: PUSH
38312: LD_INT 1
38314: ARRAY
38315: PPUSH
38316: CALL_OW 254
38320: PPUSH
38321: LD_INT 5
38323: PPUSH
38324: CALL_OW 273
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38333: LD_VAR 0 16
38337: PUSH
38338: LD_INT 1
38340: ARRAY
38341: PPUSH
38342: LD_VAR 0 16
38346: PUSH
38347: LD_INT 2
38349: ARRAY
38350: PPUSH
38351: CALL_OW 488
38355: IFFALSE 38386
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38357: LD_VAR 0 13
38361: PPUSH
38362: LD_VAR 0 16
38366: PUSH
38367: LD_INT 1
38369: ARRAY
38370: PPUSH
38371: LD_VAR 0 16
38375: PUSH
38376: LD_INT 2
38378: ARRAY
38379: PPUSH
38380: CALL_OW 111
// continue ;
38384: GO 37876
// end ; end ; r := GetDir ( tmp ) ;
38386: LD_ADDR_VAR 0 15
38390: PUSH
38391: LD_VAR 0 13
38395: PPUSH
38396: CALL_OW 254
38400: ST_TO_ADDR
// if r = 5 then
38401: LD_VAR 0 15
38405: PUSH
38406: LD_INT 5
38408: EQUAL
38409: IFFALSE 38419
// r := 0 ;
38411: LD_ADDR_VAR 0 15
38415: PUSH
38416: LD_INT 0
38418: ST_TO_ADDR
// for j = r to 5 do
38419: LD_ADDR_VAR 0 10
38423: PUSH
38424: DOUBLE
38425: LD_VAR 0 15
38429: DEC
38430: ST_TO_ADDR
38431: LD_INT 5
38433: PUSH
38434: FOR_TO
38435: IFFALSE 38549
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38437: LD_ADDR_VAR 0 11
38441: PUSH
38442: LD_VAR 0 13
38446: PPUSH
38447: CALL_OW 250
38451: PPUSH
38452: LD_VAR 0 10
38456: PPUSH
38457: LD_INT 2
38459: PPUSH
38460: CALL_OW 272
38464: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38465: LD_ADDR_VAR 0 12
38469: PUSH
38470: LD_VAR 0 13
38474: PPUSH
38475: CALL_OW 251
38479: PPUSH
38480: LD_VAR 0 10
38484: PPUSH
38485: LD_INT 2
38487: PPUSH
38488: CALL_OW 273
38492: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38493: LD_VAR 0 11
38497: PPUSH
38498: LD_VAR 0 12
38502: PPUSH
38503: CALL_OW 488
38507: PUSH
38508: LD_VAR 0 11
38512: PPUSH
38513: LD_VAR 0 12
38517: PPUSH
38518: CALL_OW 428
38522: NOT
38523: AND
38524: IFFALSE 38547
// begin ComMoveXY ( tmp , _x , _y ) ;
38526: LD_VAR 0 13
38530: PPUSH
38531: LD_VAR 0 11
38535: PPUSH
38536: LD_VAR 0 12
38540: PPUSH
38541: CALL_OW 111
// break ;
38545: GO 38549
// end ; end ;
38547: GO 38434
38549: POP
38550: POP
// end ; end ;
38551: GO 37876
38553: POP
38554: POP
// end ;
38555: LD_VAR 0 8
38559: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38560: LD_INT 0
38562: PPUSH
// result := true ;
38563: LD_ADDR_VAR 0 3
38567: PUSH
38568: LD_INT 1
38570: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38571: LD_VAR 0 2
38575: PUSH
38576: LD_INT 24
38578: DOUBLE
38579: EQUAL
38580: IFTRUE 38590
38582: LD_INT 33
38584: DOUBLE
38585: EQUAL
38586: IFTRUE 38590
38588: GO 38615
38590: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38591: LD_ADDR_VAR 0 3
38595: PUSH
38596: LD_INT 32
38598: PPUSH
38599: LD_VAR 0 1
38603: PPUSH
38604: CALL_OW 321
38608: PUSH
38609: LD_INT 2
38611: EQUAL
38612: ST_TO_ADDR
38613: GO 38931
38615: LD_INT 20
38617: DOUBLE
38618: EQUAL
38619: IFTRUE 38623
38621: GO 38648
38623: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38624: LD_ADDR_VAR 0 3
38628: PUSH
38629: LD_INT 6
38631: PPUSH
38632: LD_VAR 0 1
38636: PPUSH
38637: CALL_OW 321
38641: PUSH
38642: LD_INT 2
38644: EQUAL
38645: ST_TO_ADDR
38646: GO 38931
38648: LD_INT 22
38650: DOUBLE
38651: EQUAL
38652: IFTRUE 38662
38654: LD_INT 36
38656: DOUBLE
38657: EQUAL
38658: IFTRUE 38662
38660: GO 38687
38662: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38663: LD_ADDR_VAR 0 3
38667: PUSH
38668: LD_INT 15
38670: PPUSH
38671: LD_VAR 0 1
38675: PPUSH
38676: CALL_OW 321
38680: PUSH
38681: LD_INT 2
38683: EQUAL
38684: ST_TO_ADDR
38685: GO 38931
38687: LD_INT 30
38689: DOUBLE
38690: EQUAL
38691: IFTRUE 38695
38693: GO 38720
38695: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38696: LD_ADDR_VAR 0 3
38700: PUSH
38701: LD_INT 20
38703: PPUSH
38704: LD_VAR 0 1
38708: PPUSH
38709: CALL_OW 321
38713: PUSH
38714: LD_INT 2
38716: EQUAL
38717: ST_TO_ADDR
38718: GO 38931
38720: LD_INT 28
38722: DOUBLE
38723: EQUAL
38724: IFTRUE 38734
38726: LD_INT 21
38728: DOUBLE
38729: EQUAL
38730: IFTRUE 38734
38732: GO 38759
38734: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38735: LD_ADDR_VAR 0 3
38739: PUSH
38740: LD_INT 21
38742: PPUSH
38743: LD_VAR 0 1
38747: PPUSH
38748: CALL_OW 321
38752: PUSH
38753: LD_INT 2
38755: EQUAL
38756: ST_TO_ADDR
38757: GO 38931
38759: LD_INT 16
38761: DOUBLE
38762: EQUAL
38763: IFTRUE 38767
38765: GO 38792
38767: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38768: LD_ADDR_VAR 0 3
38772: PUSH
38773: LD_INT 84
38775: PPUSH
38776: LD_VAR 0 1
38780: PPUSH
38781: CALL_OW 321
38785: PUSH
38786: LD_INT 2
38788: EQUAL
38789: ST_TO_ADDR
38790: GO 38931
38792: LD_INT 19
38794: DOUBLE
38795: EQUAL
38796: IFTRUE 38806
38798: LD_INT 23
38800: DOUBLE
38801: EQUAL
38802: IFTRUE 38806
38804: GO 38831
38806: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38807: LD_ADDR_VAR 0 3
38811: PUSH
38812: LD_INT 83
38814: PPUSH
38815: LD_VAR 0 1
38819: PPUSH
38820: CALL_OW 321
38824: PUSH
38825: LD_INT 2
38827: EQUAL
38828: ST_TO_ADDR
38829: GO 38931
38831: LD_INT 17
38833: DOUBLE
38834: EQUAL
38835: IFTRUE 38839
38837: GO 38864
38839: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38840: LD_ADDR_VAR 0 3
38844: PUSH
38845: LD_INT 39
38847: PPUSH
38848: LD_VAR 0 1
38852: PPUSH
38853: CALL_OW 321
38857: PUSH
38858: LD_INT 2
38860: EQUAL
38861: ST_TO_ADDR
38862: GO 38931
38864: LD_INT 18
38866: DOUBLE
38867: EQUAL
38868: IFTRUE 38872
38870: GO 38897
38872: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38873: LD_ADDR_VAR 0 3
38877: PUSH
38878: LD_INT 40
38880: PPUSH
38881: LD_VAR 0 1
38885: PPUSH
38886: CALL_OW 321
38890: PUSH
38891: LD_INT 2
38893: EQUAL
38894: ST_TO_ADDR
38895: GO 38931
38897: LD_INT 27
38899: DOUBLE
38900: EQUAL
38901: IFTRUE 38905
38903: GO 38930
38905: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38906: LD_ADDR_VAR 0 3
38910: PUSH
38911: LD_INT 35
38913: PPUSH
38914: LD_VAR 0 1
38918: PPUSH
38919: CALL_OW 321
38923: PUSH
38924: LD_INT 2
38926: EQUAL
38927: ST_TO_ADDR
38928: GO 38931
38930: POP
// end ;
38931: LD_VAR 0 3
38935: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38936: LD_INT 0
38938: PPUSH
38939: PPUSH
38940: PPUSH
38941: PPUSH
38942: PPUSH
38943: PPUSH
38944: PPUSH
38945: PPUSH
38946: PPUSH
38947: PPUSH
38948: PPUSH
// result := false ;
38949: LD_ADDR_VAR 0 6
38953: PUSH
38954: LD_INT 0
38956: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38957: LD_VAR 0 1
38961: NOT
38962: PUSH
38963: LD_VAR 0 1
38967: PPUSH
38968: CALL_OW 266
38972: PUSH
38973: LD_INT 0
38975: PUSH
38976: LD_INT 1
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: IN
38983: NOT
38984: OR
38985: PUSH
38986: LD_VAR 0 2
38990: NOT
38991: OR
38992: PUSH
38993: LD_VAR 0 5
38997: PUSH
38998: LD_INT 0
39000: PUSH
39001: LD_INT 1
39003: PUSH
39004: LD_INT 2
39006: PUSH
39007: LD_INT 3
39009: PUSH
39010: LD_INT 4
39012: PUSH
39013: LD_INT 5
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: IN
39024: NOT
39025: OR
39026: PUSH
39027: LD_VAR 0 3
39031: PPUSH
39032: LD_VAR 0 4
39036: PPUSH
39037: CALL_OW 488
39041: NOT
39042: OR
39043: IFFALSE 39047
// exit ;
39045: GO 39783
// side := GetSide ( depot ) ;
39047: LD_ADDR_VAR 0 9
39051: PUSH
39052: LD_VAR 0 1
39056: PPUSH
39057: CALL_OW 255
39061: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39062: LD_VAR 0 9
39066: PPUSH
39067: LD_VAR 0 2
39071: PPUSH
39072: CALL 38560 0 2
39076: NOT
39077: IFFALSE 39081
// exit ;
39079: GO 39783
// pom := GetBase ( depot ) ;
39081: LD_ADDR_VAR 0 10
39085: PUSH
39086: LD_VAR 0 1
39090: PPUSH
39091: CALL_OW 274
39095: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39096: LD_ADDR_VAR 0 11
39100: PUSH
39101: LD_VAR 0 2
39105: PPUSH
39106: LD_VAR 0 1
39110: PPUSH
39111: CALL_OW 248
39115: PPUSH
39116: CALL_OW 450
39120: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39121: LD_VAR 0 10
39125: PPUSH
39126: LD_INT 1
39128: PPUSH
39129: CALL_OW 275
39133: PUSH
39134: LD_VAR 0 11
39138: PUSH
39139: LD_INT 1
39141: ARRAY
39142: GREATEREQUAL
39143: PUSH
39144: LD_VAR 0 10
39148: PPUSH
39149: LD_INT 2
39151: PPUSH
39152: CALL_OW 275
39156: PUSH
39157: LD_VAR 0 11
39161: PUSH
39162: LD_INT 2
39164: ARRAY
39165: GREATEREQUAL
39166: AND
39167: PUSH
39168: LD_VAR 0 10
39172: PPUSH
39173: LD_INT 3
39175: PPUSH
39176: CALL_OW 275
39180: PUSH
39181: LD_VAR 0 11
39185: PUSH
39186: LD_INT 3
39188: ARRAY
39189: GREATEREQUAL
39190: AND
39191: NOT
39192: IFFALSE 39196
// exit ;
39194: GO 39783
// if GetBType ( depot ) = b_depot then
39196: LD_VAR 0 1
39200: PPUSH
39201: CALL_OW 266
39205: PUSH
39206: LD_INT 0
39208: EQUAL
39209: IFFALSE 39221
// dist := 28 else
39211: LD_ADDR_VAR 0 14
39215: PUSH
39216: LD_INT 28
39218: ST_TO_ADDR
39219: GO 39229
// dist := 36 ;
39221: LD_ADDR_VAR 0 14
39225: PUSH
39226: LD_INT 36
39228: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39229: LD_VAR 0 1
39233: PPUSH
39234: LD_VAR 0 3
39238: PPUSH
39239: LD_VAR 0 4
39243: PPUSH
39244: CALL_OW 297
39248: PUSH
39249: LD_VAR 0 14
39253: GREATER
39254: IFFALSE 39258
// exit ;
39256: GO 39783
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39258: LD_ADDR_VAR 0 12
39262: PUSH
39263: LD_VAR 0 2
39267: PPUSH
39268: LD_VAR 0 3
39272: PPUSH
39273: LD_VAR 0 4
39277: PPUSH
39278: LD_VAR 0 5
39282: PPUSH
39283: LD_VAR 0 1
39287: PPUSH
39288: CALL_OW 248
39292: PPUSH
39293: LD_INT 0
39295: PPUSH
39296: CALL 39788 0 6
39300: ST_TO_ADDR
// if not hexes then
39301: LD_VAR 0 12
39305: NOT
39306: IFFALSE 39310
// exit ;
39308: GO 39783
// hex := GetHexInfo ( x , y ) ;
39310: LD_ADDR_VAR 0 15
39314: PUSH
39315: LD_VAR 0 3
39319: PPUSH
39320: LD_VAR 0 4
39324: PPUSH
39325: CALL_OW 546
39329: ST_TO_ADDR
// if hex [ 1 ] then
39330: LD_VAR 0 15
39334: PUSH
39335: LD_INT 1
39337: ARRAY
39338: IFFALSE 39342
// exit ;
39340: GO 39783
// height := hex [ 2 ] ;
39342: LD_ADDR_VAR 0 13
39346: PUSH
39347: LD_VAR 0 15
39351: PUSH
39352: LD_INT 2
39354: ARRAY
39355: ST_TO_ADDR
// for i = 1 to hexes do
39356: LD_ADDR_VAR 0 7
39360: PUSH
39361: DOUBLE
39362: LD_INT 1
39364: DEC
39365: ST_TO_ADDR
39366: LD_VAR 0 12
39370: PUSH
39371: FOR_TO
39372: IFFALSE 39702
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39374: LD_VAR 0 12
39378: PUSH
39379: LD_VAR 0 7
39383: ARRAY
39384: PUSH
39385: LD_INT 1
39387: ARRAY
39388: PPUSH
39389: LD_VAR 0 12
39393: PUSH
39394: LD_VAR 0 7
39398: ARRAY
39399: PUSH
39400: LD_INT 2
39402: ARRAY
39403: PPUSH
39404: CALL_OW 488
39408: NOT
39409: PUSH
39410: LD_VAR 0 12
39414: PUSH
39415: LD_VAR 0 7
39419: ARRAY
39420: PUSH
39421: LD_INT 1
39423: ARRAY
39424: PPUSH
39425: LD_VAR 0 12
39429: PUSH
39430: LD_VAR 0 7
39434: ARRAY
39435: PUSH
39436: LD_INT 2
39438: ARRAY
39439: PPUSH
39440: CALL_OW 428
39444: PUSH
39445: LD_INT 0
39447: GREATER
39448: OR
39449: PUSH
39450: LD_VAR 0 12
39454: PUSH
39455: LD_VAR 0 7
39459: ARRAY
39460: PUSH
39461: LD_INT 1
39463: ARRAY
39464: PPUSH
39465: LD_VAR 0 12
39469: PUSH
39470: LD_VAR 0 7
39474: ARRAY
39475: PUSH
39476: LD_INT 2
39478: ARRAY
39479: PPUSH
39480: CALL_OW 351
39484: OR
39485: IFFALSE 39491
// exit ;
39487: POP
39488: POP
39489: GO 39783
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39491: LD_ADDR_VAR 0 8
39495: PUSH
39496: LD_VAR 0 12
39500: PUSH
39501: LD_VAR 0 7
39505: ARRAY
39506: PUSH
39507: LD_INT 1
39509: ARRAY
39510: PPUSH
39511: LD_VAR 0 12
39515: PUSH
39516: LD_VAR 0 7
39520: ARRAY
39521: PUSH
39522: LD_INT 2
39524: ARRAY
39525: PPUSH
39526: CALL_OW 546
39530: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39531: LD_VAR 0 8
39535: PUSH
39536: LD_INT 1
39538: ARRAY
39539: PUSH
39540: LD_VAR 0 8
39544: PUSH
39545: LD_INT 2
39547: ARRAY
39548: PUSH
39549: LD_VAR 0 13
39553: PUSH
39554: LD_INT 2
39556: PLUS
39557: GREATER
39558: OR
39559: PUSH
39560: LD_VAR 0 8
39564: PUSH
39565: LD_INT 2
39567: ARRAY
39568: PUSH
39569: LD_VAR 0 13
39573: PUSH
39574: LD_INT 2
39576: MINUS
39577: LESS
39578: OR
39579: PUSH
39580: LD_VAR 0 8
39584: PUSH
39585: LD_INT 3
39587: ARRAY
39588: PUSH
39589: LD_INT 0
39591: PUSH
39592: LD_INT 8
39594: PUSH
39595: LD_INT 9
39597: PUSH
39598: LD_INT 10
39600: PUSH
39601: LD_INT 11
39603: PUSH
39604: LD_INT 12
39606: PUSH
39607: LD_INT 13
39609: PUSH
39610: LD_INT 16
39612: PUSH
39613: LD_INT 17
39615: PUSH
39616: LD_INT 18
39618: PUSH
39619: LD_INT 19
39621: PUSH
39622: LD_INT 20
39624: PUSH
39625: LD_INT 21
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: IN
39643: NOT
39644: OR
39645: PUSH
39646: LD_VAR 0 8
39650: PUSH
39651: LD_INT 5
39653: ARRAY
39654: NOT
39655: OR
39656: PUSH
39657: LD_VAR 0 8
39661: PUSH
39662: LD_INT 6
39664: ARRAY
39665: PUSH
39666: LD_INT 1
39668: PUSH
39669: LD_INT 2
39671: PUSH
39672: LD_INT 7
39674: PUSH
39675: LD_INT 9
39677: PUSH
39678: LD_INT 10
39680: PUSH
39681: LD_INT 11
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: IN
39692: NOT
39693: OR
39694: IFFALSE 39700
// exit ;
39696: POP
39697: POP
39698: GO 39783
// end ;
39700: GO 39371
39702: POP
39703: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39704: LD_VAR 0 9
39708: PPUSH
39709: LD_VAR 0 3
39713: PPUSH
39714: LD_VAR 0 4
39718: PPUSH
39719: LD_INT 20
39721: PPUSH
39722: CALL 31735 0 4
39726: PUSH
39727: LD_INT 4
39729: ARRAY
39730: IFFALSE 39734
// exit ;
39732: GO 39783
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39734: LD_VAR 0 2
39738: PUSH
39739: LD_INT 29
39741: PUSH
39742: LD_INT 30
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: IN
39749: PUSH
39750: LD_VAR 0 3
39754: PPUSH
39755: LD_VAR 0 4
39759: PPUSH
39760: LD_VAR 0 9
39764: PPUSH
39765: CALL_OW 440
39769: NOT
39770: AND
39771: IFFALSE 39775
// exit ;
39773: GO 39783
// result := true ;
39775: LD_ADDR_VAR 0 6
39779: PUSH
39780: LD_INT 1
39782: ST_TO_ADDR
// end ;
39783: LD_VAR 0 6
39787: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39788: LD_INT 0
39790: PPUSH
39791: PPUSH
39792: PPUSH
39793: PPUSH
39794: PPUSH
39795: PPUSH
39796: PPUSH
39797: PPUSH
39798: PPUSH
39799: PPUSH
39800: PPUSH
39801: PPUSH
39802: PPUSH
39803: PPUSH
39804: PPUSH
39805: PPUSH
39806: PPUSH
39807: PPUSH
39808: PPUSH
39809: PPUSH
39810: PPUSH
39811: PPUSH
39812: PPUSH
39813: PPUSH
39814: PPUSH
39815: PPUSH
39816: PPUSH
39817: PPUSH
39818: PPUSH
39819: PPUSH
39820: PPUSH
39821: PPUSH
39822: PPUSH
39823: PPUSH
39824: PPUSH
39825: PPUSH
39826: PPUSH
39827: PPUSH
39828: PPUSH
39829: PPUSH
39830: PPUSH
39831: PPUSH
39832: PPUSH
39833: PPUSH
39834: PPUSH
39835: PPUSH
39836: PPUSH
39837: PPUSH
39838: PPUSH
39839: PPUSH
39840: PPUSH
39841: PPUSH
39842: PPUSH
39843: PPUSH
39844: PPUSH
39845: PPUSH
39846: PPUSH
39847: PPUSH
// result = [ ] ;
39848: LD_ADDR_VAR 0 7
39852: PUSH
39853: EMPTY
39854: ST_TO_ADDR
// temp_list = [ ] ;
39855: LD_ADDR_VAR 0 9
39859: PUSH
39860: EMPTY
39861: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39862: LD_VAR 0 4
39866: PUSH
39867: LD_INT 0
39869: PUSH
39870: LD_INT 1
39872: PUSH
39873: LD_INT 2
39875: PUSH
39876: LD_INT 3
39878: PUSH
39879: LD_INT 4
39881: PUSH
39882: LD_INT 5
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: IN
39893: NOT
39894: PUSH
39895: LD_VAR 0 1
39899: PUSH
39900: LD_INT 0
39902: PUSH
39903: LD_INT 1
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: IN
39910: PUSH
39911: LD_VAR 0 5
39915: PUSH
39916: LD_INT 1
39918: PUSH
39919: LD_INT 2
39921: PUSH
39922: LD_INT 3
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: LIST
39929: IN
39930: NOT
39931: AND
39932: OR
39933: IFFALSE 39937
// exit ;
39935: GO 58328
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39937: LD_VAR 0 1
39941: PUSH
39942: LD_INT 6
39944: PUSH
39945: LD_INT 7
39947: PUSH
39948: LD_INT 8
39950: PUSH
39951: LD_INT 13
39953: PUSH
39954: LD_INT 12
39956: PUSH
39957: LD_INT 15
39959: PUSH
39960: LD_INT 11
39962: PUSH
39963: LD_INT 14
39965: PUSH
39966: LD_INT 10
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: IN
39980: IFFALSE 39990
// btype = b_lab ;
39982: LD_ADDR_VAR 0 1
39986: PUSH
39987: LD_INT 6
39989: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39990: LD_VAR 0 6
39994: PUSH
39995: LD_INT 0
39997: PUSH
39998: LD_INT 1
40000: PUSH
40001: LD_INT 2
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: LIST
40008: IN
40009: NOT
40010: PUSH
40011: LD_VAR 0 1
40015: PUSH
40016: LD_INT 0
40018: PUSH
40019: LD_INT 1
40021: PUSH
40022: LD_INT 2
40024: PUSH
40025: LD_INT 3
40027: PUSH
40028: LD_INT 6
40030: PUSH
40031: LD_INT 36
40033: PUSH
40034: LD_INT 4
40036: PUSH
40037: LD_INT 5
40039: PUSH
40040: LD_INT 31
40042: PUSH
40043: LD_INT 32
40045: PUSH
40046: LD_INT 33
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: IN
40062: NOT
40063: PUSH
40064: LD_VAR 0 6
40068: PUSH
40069: LD_INT 1
40071: EQUAL
40072: AND
40073: OR
40074: PUSH
40075: LD_VAR 0 1
40079: PUSH
40080: LD_INT 2
40082: PUSH
40083: LD_INT 3
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: IN
40090: NOT
40091: PUSH
40092: LD_VAR 0 6
40096: PUSH
40097: LD_INT 2
40099: EQUAL
40100: AND
40101: OR
40102: IFFALSE 40112
// mode = 0 ;
40104: LD_ADDR_VAR 0 6
40108: PUSH
40109: LD_INT 0
40111: ST_TO_ADDR
// case mode of 0 :
40112: LD_VAR 0 6
40116: PUSH
40117: LD_INT 0
40119: DOUBLE
40120: EQUAL
40121: IFTRUE 40125
40123: GO 51578
40125: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40126: LD_ADDR_VAR 0 11
40130: PUSH
40131: LD_INT 0
40133: PUSH
40134: LD_INT 0
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 0
40143: PUSH
40144: LD_INT 1
40146: NEG
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 1
40154: PUSH
40155: LD_INT 0
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 1
40164: PUSH
40165: LD_INT 1
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 0
40174: PUSH
40175: LD_INT 1
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 1
40184: NEG
40185: PUSH
40186: LD_INT 0
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 1
40195: NEG
40196: PUSH
40197: LD_INT 1
40199: NEG
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 1
40207: NEG
40208: PUSH
40209: LD_INT 2
40211: NEG
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 0
40219: PUSH
40220: LD_INT 2
40222: NEG
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 1
40230: PUSH
40231: LD_INT 1
40233: NEG
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 1
40241: PUSH
40242: LD_INT 2
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 0
40251: PUSH
40252: LD_INT 2
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 1
40261: NEG
40262: PUSH
40263: LD_INT 1
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 1
40272: PUSH
40273: LD_INT 3
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 0
40282: PUSH
40283: LD_INT 3
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 1
40292: NEG
40293: PUSH
40294: LD_INT 2
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40319: LD_ADDR_VAR 0 12
40323: PUSH
40324: LD_INT 0
40326: PUSH
40327: LD_INT 0
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 0
40336: PUSH
40337: LD_INT 1
40339: NEG
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 1
40347: PUSH
40348: LD_INT 0
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 1
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 0
40367: PUSH
40368: LD_INT 1
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 1
40377: NEG
40378: PUSH
40379: LD_INT 0
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 1
40388: NEG
40389: PUSH
40390: LD_INT 1
40392: NEG
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 1
40400: PUSH
40401: LD_INT 1
40403: NEG
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 2
40411: PUSH
40412: LD_INT 0
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 2
40421: PUSH
40422: LD_INT 1
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 1
40431: NEG
40432: PUSH
40433: LD_INT 1
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 2
40442: NEG
40443: PUSH
40444: LD_INT 0
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 2
40453: NEG
40454: PUSH
40455: LD_INT 1
40457: NEG
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 2
40465: NEG
40466: PUSH
40467: LD_INT 1
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 3
40476: NEG
40477: PUSH
40478: LD_INT 0
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 3
40487: NEG
40488: PUSH
40489: LD_INT 1
40491: NEG
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40515: LD_ADDR_VAR 0 13
40519: PUSH
40520: LD_INT 0
40522: PUSH
40523: LD_INT 0
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 0
40532: PUSH
40533: LD_INT 1
40535: NEG
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 1
40543: PUSH
40544: LD_INT 0
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 1
40553: PUSH
40554: LD_INT 1
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 0
40563: PUSH
40564: LD_INT 1
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: LD_INT 1
40573: NEG
40574: PUSH
40575: LD_INT 0
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 1
40584: NEG
40585: PUSH
40586: LD_INT 1
40588: NEG
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 1
40596: NEG
40597: PUSH
40598: LD_INT 2
40600: NEG
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 2
40608: PUSH
40609: LD_INT 1
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 2
40618: PUSH
40619: LD_INT 2
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 1
40628: PUSH
40629: LD_INT 2
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 2
40638: NEG
40639: PUSH
40640: LD_INT 1
40642: NEG
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 2
40650: NEG
40651: PUSH
40652: LD_INT 2
40654: NEG
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 2
40662: NEG
40663: PUSH
40664: LD_INT 3
40666: NEG
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 3
40674: NEG
40675: PUSH
40676: LD_INT 2
40678: NEG
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 3
40686: NEG
40687: PUSH
40688: LD_INT 3
40690: NEG
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40714: LD_ADDR_VAR 0 14
40718: PUSH
40719: LD_INT 0
40721: PUSH
40722: LD_INT 0
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 0
40731: PUSH
40732: LD_INT 1
40734: NEG
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 1
40742: PUSH
40743: LD_INT 0
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 1
40752: PUSH
40753: LD_INT 1
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: LD_INT 1
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 1
40772: NEG
40773: PUSH
40774: LD_INT 0
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 1
40783: NEG
40784: PUSH
40785: LD_INT 1
40787: NEG
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 1
40795: NEG
40796: PUSH
40797: LD_INT 2
40799: NEG
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 0
40807: PUSH
40808: LD_INT 2
40810: NEG
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 1
40818: PUSH
40819: LD_INT 1
40821: NEG
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 1
40829: PUSH
40830: LD_INT 2
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 0
40839: PUSH
40840: LD_INT 2
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 1
40849: NEG
40850: PUSH
40851: LD_INT 1
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 1
40860: NEG
40861: PUSH
40862: LD_INT 3
40864: NEG
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 0
40872: PUSH
40873: LD_INT 3
40875: NEG
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 1
40883: PUSH
40884: LD_INT 2
40886: NEG
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40910: LD_ADDR_VAR 0 15
40914: PUSH
40915: LD_INT 0
40917: PUSH
40918: LD_INT 0
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 0
40927: PUSH
40928: LD_INT 1
40930: NEG
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 1
40938: PUSH
40939: LD_INT 0
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 1
40948: PUSH
40949: LD_INT 1
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 0
40958: PUSH
40959: LD_INT 1
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 1
40968: NEG
40969: PUSH
40970: LD_INT 0
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 1
40979: NEG
40980: PUSH
40981: LD_INT 1
40983: NEG
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 1
40991: PUSH
40992: LD_INT 1
40994: NEG
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 2
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 2
41012: PUSH
41013: LD_INT 1
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 1
41022: NEG
41023: PUSH
41024: LD_INT 1
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 2
41033: NEG
41034: PUSH
41035: LD_INT 0
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 2
41044: NEG
41045: PUSH
41046: LD_INT 1
41048: NEG
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 2
41056: PUSH
41057: LD_INT 1
41059: NEG
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 3
41067: PUSH
41068: LD_INT 0
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 3
41077: PUSH
41078: LD_INT 1
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41103: LD_ADDR_VAR 0 16
41107: PUSH
41108: LD_INT 0
41110: PUSH
41111: LD_INT 0
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 0
41120: PUSH
41121: LD_INT 1
41123: NEG
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 1
41131: PUSH
41132: LD_INT 0
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 1
41141: PUSH
41142: LD_INT 1
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 0
41151: PUSH
41152: LD_INT 1
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 1
41161: NEG
41162: PUSH
41163: LD_INT 0
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 1
41172: NEG
41173: PUSH
41174: LD_INT 1
41176: NEG
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 1
41184: NEG
41185: PUSH
41186: LD_INT 2
41188: NEG
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 2
41196: PUSH
41197: LD_INT 1
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 2
41206: PUSH
41207: LD_INT 2
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 1
41216: PUSH
41217: LD_INT 2
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 2
41226: NEG
41227: PUSH
41228: LD_INT 1
41230: NEG
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 2
41238: NEG
41239: PUSH
41240: LD_INT 2
41242: NEG
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 3
41250: PUSH
41251: LD_INT 2
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 3
41260: PUSH
41261: LD_INT 3
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 2
41270: PUSH
41271: LD_INT 3
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41296: LD_ADDR_VAR 0 17
41300: PUSH
41301: LD_INT 0
41303: PUSH
41304: LD_INT 0
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 0
41313: PUSH
41314: LD_INT 1
41316: NEG
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 1
41324: PUSH
41325: LD_INT 0
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 1
41334: PUSH
41335: LD_INT 1
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 0
41344: PUSH
41345: LD_INT 1
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 1
41354: NEG
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 1
41365: NEG
41366: PUSH
41367: LD_INT 1
41369: NEG
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 1
41377: NEG
41378: PUSH
41379: LD_INT 2
41381: NEG
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: LD_INT 2
41392: NEG
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: LD_INT 1
41403: NEG
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 2
41411: PUSH
41412: LD_INT 0
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 2
41421: PUSH
41422: LD_INT 1
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 2
41431: PUSH
41432: LD_INT 2
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 1
41441: PUSH
41442: LD_INT 2
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 0
41451: PUSH
41452: LD_INT 2
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 1
41461: NEG
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 2
41472: NEG
41473: PUSH
41474: LD_INT 0
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 2
41483: NEG
41484: PUSH
41485: LD_INT 1
41487: NEG
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 2
41495: NEG
41496: PUSH
41497: LD_INT 2
41499: NEG
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41526: LD_ADDR_VAR 0 18
41530: PUSH
41531: LD_INT 0
41533: PUSH
41534: LD_INT 0
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 0
41543: PUSH
41544: LD_INT 1
41546: NEG
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 1
41554: PUSH
41555: LD_INT 0
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 1
41564: PUSH
41565: LD_INT 1
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 0
41574: PUSH
41575: LD_INT 1
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 1
41584: NEG
41585: PUSH
41586: LD_INT 0
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 1
41595: NEG
41596: PUSH
41597: LD_INT 1
41599: NEG
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 1
41607: NEG
41608: PUSH
41609: LD_INT 2
41611: NEG
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 0
41619: PUSH
41620: LD_INT 2
41622: NEG
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 1
41630: PUSH
41631: LD_INT 1
41633: NEG
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 2
41641: PUSH
41642: LD_INT 0
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 2
41651: PUSH
41652: LD_INT 1
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 2
41661: PUSH
41662: LD_INT 2
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 1
41671: PUSH
41672: LD_INT 2
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 0
41681: PUSH
41682: LD_INT 2
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 1
41691: NEG
41692: PUSH
41693: LD_INT 1
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 2
41702: NEG
41703: PUSH
41704: LD_INT 0
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 2
41713: NEG
41714: PUSH
41715: LD_INT 1
41717: NEG
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 2
41725: NEG
41726: PUSH
41727: LD_INT 2
41729: NEG
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41756: LD_ADDR_VAR 0 19
41760: PUSH
41761: LD_INT 0
41763: PUSH
41764: LD_INT 0
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 0
41773: PUSH
41774: LD_INT 1
41776: NEG
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 1
41784: PUSH
41785: LD_INT 0
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 1
41794: PUSH
41795: LD_INT 1
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 0
41804: PUSH
41805: LD_INT 1
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 1
41814: NEG
41815: PUSH
41816: LD_INT 0
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 1
41825: NEG
41826: PUSH
41827: LD_INT 1
41829: NEG
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 1
41837: NEG
41838: PUSH
41839: LD_INT 2
41841: NEG
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: LD_INT 2
41852: NEG
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 1
41860: PUSH
41861: LD_INT 1
41863: NEG
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 2
41871: PUSH
41872: LD_INT 0
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 2
41881: PUSH
41882: LD_INT 1
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 2
41891: PUSH
41892: LD_INT 2
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 1
41901: PUSH
41902: LD_INT 2
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 0
41911: PUSH
41912: LD_INT 2
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 1
41921: NEG
41922: PUSH
41923: LD_INT 1
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 2
41932: NEG
41933: PUSH
41934: LD_INT 0
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 2
41943: NEG
41944: PUSH
41945: LD_INT 1
41947: NEG
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 2
41955: NEG
41956: PUSH
41957: LD_INT 2
41959: NEG
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41986: LD_ADDR_VAR 0 20
41990: PUSH
41991: LD_INT 0
41993: PUSH
41994: LD_INT 0
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 0
42003: PUSH
42004: LD_INT 1
42006: NEG
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 1
42014: PUSH
42015: LD_INT 0
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 1
42024: PUSH
42025: LD_INT 1
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: LD_INT 1
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 1
42044: NEG
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 1
42055: NEG
42056: PUSH
42057: LD_INT 1
42059: NEG
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 1
42067: NEG
42068: PUSH
42069: LD_INT 2
42071: NEG
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 0
42079: PUSH
42080: LD_INT 2
42082: NEG
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 1
42090: PUSH
42091: LD_INT 1
42093: NEG
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 2
42101: PUSH
42102: LD_INT 0
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 2
42111: PUSH
42112: LD_INT 1
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 2
42121: PUSH
42122: LD_INT 2
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 1
42131: PUSH
42132: LD_INT 2
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 0
42141: PUSH
42142: LD_INT 2
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 1
42151: NEG
42152: PUSH
42153: LD_INT 1
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 2
42162: NEG
42163: PUSH
42164: LD_INT 0
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 2
42173: NEG
42174: PUSH
42175: LD_INT 1
42177: NEG
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 2
42185: NEG
42186: PUSH
42187: LD_INT 2
42189: NEG
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42216: LD_ADDR_VAR 0 21
42220: PUSH
42221: LD_INT 0
42223: PUSH
42224: LD_INT 0
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 0
42233: PUSH
42234: LD_INT 1
42236: NEG
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 1
42244: PUSH
42245: LD_INT 0
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 1
42254: PUSH
42255: LD_INT 1
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 0
42264: PUSH
42265: LD_INT 1
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 1
42274: NEG
42275: PUSH
42276: LD_INT 0
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 1
42285: NEG
42286: PUSH
42287: LD_INT 1
42289: NEG
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 1
42297: NEG
42298: PUSH
42299: LD_INT 2
42301: NEG
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 0
42309: PUSH
42310: LD_INT 2
42312: NEG
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 1
42320: PUSH
42321: LD_INT 1
42323: NEG
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 2
42331: PUSH
42332: LD_INT 0
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 2
42341: PUSH
42342: LD_INT 1
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 2
42351: PUSH
42352: LD_INT 2
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 1
42361: PUSH
42362: LD_INT 2
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 0
42371: PUSH
42372: LD_INT 2
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 1
42381: NEG
42382: PUSH
42383: LD_INT 1
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 2
42392: NEG
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 2
42403: NEG
42404: PUSH
42405: LD_INT 1
42407: NEG
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 2
42415: NEG
42416: PUSH
42417: LD_INT 2
42419: NEG
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42446: LD_ADDR_VAR 0 22
42450: PUSH
42451: LD_INT 0
42453: PUSH
42454: LD_INT 0
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 0
42463: PUSH
42464: LD_INT 1
42466: NEG
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 1
42474: PUSH
42475: LD_INT 0
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 1
42484: PUSH
42485: LD_INT 1
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 0
42494: PUSH
42495: LD_INT 1
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 1
42504: NEG
42505: PUSH
42506: LD_INT 0
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 1
42515: NEG
42516: PUSH
42517: LD_INT 1
42519: NEG
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 1
42527: NEG
42528: PUSH
42529: LD_INT 2
42531: NEG
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 0
42539: PUSH
42540: LD_INT 2
42542: NEG
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 1
42550: PUSH
42551: LD_INT 1
42553: NEG
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 2
42561: PUSH
42562: LD_INT 0
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 2
42571: PUSH
42572: LD_INT 1
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 2
42581: PUSH
42582: LD_INT 2
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 1
42591: PUSH
42592: LD_INT 2
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 0
42601: PUSH
42602: LD_INT 2
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 1
42611: NEG
42612: PUSH
42613: LD_INT 1
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 2
42622: NEG
42623: PUSH
42624: LD_INT 0
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 2
42633: NEG
42634: PUSH
42635: LD_INT 1
42637: NEG
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 2
42645: NEG
42646: PUSH
42647: LD_INT 2
42649: NEG
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42676: LD_ADDR_VAR 0 23
42680: PUSH
42681: LD_INT 0
42683: PUSH
42684: LD_INT 0
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 0
42693: PUSH
42694: LD_INT 1
42696: NEG
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 1
42704: PUSH
42705: LD_INT 0
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 1
42714: PUSH
42715: LD_INT 1
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 0
42724: PUSH
42725: LD_INT 1
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 1
42734: NEG
42735: PUSH
42736: LD_INT 0
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 1
42745: NEG
42746: PUSH
42747: LD_INT 1
42749: NEG
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: LD_INT 1
42757: NEG
42758: PUSH
42759: LD_INT 2
42761: NEG
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 0
42769: PUSH
42770: LD_INT 2
42772: NEG
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 1
42780: PUSH
42781: LD_INT 1
42783: NEG
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 2
42791: PUSH
42792: LD_INT 0
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 2
42801: PUSH
42802: LD_INT 1
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 2
42811: PUSH
42812: LD_INT 2
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 1
42821: PUSH
42822: LD_INT 2
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 0
42831: PUSH
42832: LD_INT 2
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 1
42841: NEG
42842: PUSH
42843: LD_INT 1
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 2
42852: NEG
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 2
42863: NEG
42864: PUSH
42865: LD_INT 1
42867: NEG
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 2
42875: NEG
42876: PUSH
42877: LD_INT 2
42879: NEG
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 2
42887: NEG
42888: PUSH
42889: LD_INT 3
42891: NEG
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 1
42899: NEG
42900: PUSH
42901: LD_INT 3
42903: NEG
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 1
42911: PUSH
42912: LD_INT 2
42914: NEG
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 2
42922: PUSH
42923: LD_INT 1
42925: NEG
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42956: LD_ADDR_VAR 0 24
42960: PUSH
42961: LD_INT 0
42963: PUSH
42964: LD_INT 0
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 0
42973: PUSH
42974: LD_INT 1
42976: NEG
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 1
42984: PUSH
42985: LD_INT 0
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 1
42994: PUSH
42995: LD_INT 1
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 0
43004: PUSH
43005: LD_INT 1
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 1
43014: NEG
43015: PUSH
43016: LD_INT 0
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 1
43025: NEG
43026: PUSH
43027: LD_INT 1
43029: NEG
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 1
43037: NEG
43038: PUSH
43039: LD_INT 2
43041: NEG
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 0
43049: PUSH
43050: LD_INT 2
43052: NEG
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 1
43060: PUSH
43061: LD_INT 1
43063: NEG
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 2
43071: PUSH
43072: LD_INT 0
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 2
43081: PUSH
43082: LD_INT 1
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 2
43091: PUSH
43092: LD_INT 2
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 1
43101: PUSH
43102: LD_INT 2
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 0
43111: PUSH
43112: LD_INT 2
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 1
43121: NEG
43122: PUSH
43123: LD_INT 1
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 2
43132: NEG
43133: PUSH
43134: LD_INT 0
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 2
43143: NEG
43144: PUSH
43145: LD_INT 1
43147: NEG
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 2
43155: NEG
43156: PUSH
43157: LD_INT 2
43159: NEG
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 1
43167: PUSH
43168: LD_INT 2
43170: NEG
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 2
43178: PUSH
43179: LD_INT 1
43181: NEG
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 3
43189: PUSH
43190: LD_INT 1
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 3
43199: PUSH
43200: LD_INT 2
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43232: LD_ADDR_VAR 0 25
43236: PUSH
43237: LD_INT 0
43239: PUSH
43240: LD_INT 0
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: LD_INT 1
43252: NEG
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 1
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 1
43270: PUSH
43271: LD_INT 1
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 0
43280: PUSH
43281: LD_INT 1
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 1
43290: NEG
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 1
43301: NEG
43302: PUSH
43303: LD_INT 1
43305: NEG
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 1
43313: NEG
43314: PUSH
43315: LD_INT 2
43317: NEG
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 0
43325: PUSH
43326: LD_INT 2
43328: NEG
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 1
43336: PUSH
43337: LD_INT 1
43339: NEG
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 2
43347: PUSH
43348: LD_INT 0
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 2
43357: PUSH
43358: LD_INT 1
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 2
43367: PUSH
43368: LD_INT 2
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 1
43377: PUSH
43378: LD_INT 2
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 0
43387: PUSH
43388: LD_INT 2
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 1
43397: NEG
43398: PUSH
43399: LD_INT 1
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 2
43408: NEG
43409: PUSH
43410: LD_INT 0
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 2
43419: NEG
43420: PUSH
43421: LD_INT 1
43423: NEG
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 2
43431: NEG
43432: PUSH
43433: LD_INT 2
43435: NEG
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 3
43443: PUSH
43444: LD_INT 1
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 3
43453: PUSH
43454: LD_INT 2
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 2
43463: PUSH
43464: LD_INT 3
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 1
43473: PUSH
43474: LD_INT 3
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43506: LD_ADDR_VAR 0 26
43510: PUSH
43511: LD_INT 0
43513: PUSH
43514: LD_INT 0
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 0
43523: PUSH
43524: LD_INT 1
43526: NEG
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 1
43534: PUSH
43535: LD_INT 0
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 1
43544: PUSH
43545: LD_INT 1
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 0
43554: PUSH
43555: LD_INT 1
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 1
43564: NEG
43565: PUSH
43566: LD_INT 0
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 1
43575: NEG
43576: PUSH
43577: LD_INT 1
43579: NEG
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 1
43587: NEG
43588: PUSH
43589: LD_INT 2
43591: NEG
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 0
43599: PUSH
43600: LD_INT 2
43602: NEG
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 1
43610: PUSH
43611: LD_INT 1
43613: NEG
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 2
43621: PUSH
43622: LD_INT 0
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 2
43631: PUSH
43632: LD_INT 1
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 2
43641: PUSH
43642: LD_INT 2
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 1
43651: PUSH
43652: LD_INT 2
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 0
43661: PUSH
43662: LD_INT 2
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 1
43671: NEG
43672: PUSH
43673: LD_INT 1
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 2
43682: NEG
43683: PUSH
43684: LD_INT 0
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 2
43693: NEG
43694: PUSH
43695: LD_INT 1
43697: NEG
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 2
43705: NEG
43706: PUSH
43707: LD_INT 2
43709: NEG
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 2
43717: PUSH
43718: LD_INT 3
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 1
43727: PUSH
43728: LD_INT 3
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 1
43737: NEG
43738: PUSH
43739: LD_INT 2
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 2
43748: NEG
43749: PUSH
43750: LD_INT 1
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43782: LD_ADDR_VAR 0 27
43786: PUSH
43787: LD_INT 0
43789: PUSH
43790: LD_INT 0
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: LD_INT 1
43802: NEG
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 1
43820: PUSH
43821: LD_INT 1
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 0
43830: PUSH
43831: LD_INT 1
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 1
43840: NEG
43841: PUSH
43842: LD_INT 0
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 1
43851: NEG
43852: PUSH
43853: LD_INT 1
43855: NEG
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: LD_INT 2
43867: NEG
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 0
43875: PUSH
43876: LD_INT 2
43878: NEG
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: LD_INT 1
43889: NEG
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 2
43897: PUSH
43898: LD_INT 0
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 2
43907: PUSH
43908: LD_INT 1
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 2
43917: PUSH
43918: LD_INT 2
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 1
43927: PUSH
43928: LD_INT 2
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 0
43937: PUSH
43938: LD_INT 2
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 1
43947: NEG
43948: PUSH
43949: LD_INT 1
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 2
43958: NEG
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 2
43969: NEG
43970: PUSH
43971: LD_INT 1
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 2
43981: NEG
43982: PUSH
43983: LD_INT 2
43985: NEG
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 1
43993: NEG
43994: PUSH
43995: LD_INT 2
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 2
44004: NEG
44005: PUSH
44006: LD_INT 1
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 3
44015: NEG
44016: PUSH
44017: LD_INT 1
44019: NEG
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 3
44027: NEG
44028: PUSH
44029: LD_INT 2
44031: NEG
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44062: LD_ADDR_VAR 0 28
44066: PUSH
44067: LD_INT 0
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 0
44079: PUSH
44080: LD_INT 1
44082: NEG
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: LD_INT 0
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 1
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 0
44110: PUSH
44111: LD_INT 1
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 1
44120: NEG
44121: PUSH
44122: LD_INT 0
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 1
44131: NEG
44132: PUSH
44133: LD_INT 1
44135: NEG
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 1
44143: NEG
44144: PUSH
44145: LD_INT 2
44147: NEG
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 0
44155: PUSH
44156: LD_INT 2
44158: NEG
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 1
44166: PUSH
44167: LD_INT 1
44169: NEG
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 2
44177: PUSH
44178: LD_INT 0
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 2
44187: PUSH
44188: LD_INT 1
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 2
44197: PUSH
44198: LD_INT 2
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 1
44207: PUSH
44208: LD_INT 2
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 0
44217: PUSH
44218: LD_INT 2
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 1
44227: NEG
44228: PUSH
44229: LD_INT 1
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 2
44238: NEG
44239: PUSH
44240: LD_INT 0
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 2
44249: NEG
44250: PUSH
44251: LD_INT 1
44253: NEG
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 2
44261: NEG
44262: PUSH
44263: LD_INT 2
44265: NEG
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 2
44273: NEG
44274: PUSH
44275: LD_INT 3
44277: NEG
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 1
44285: NEG
44286: PUSH
44287: LD_INT 3
44289: NEG
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 3
44297: NEG
44298: PUSH
44299: LD_INT 1
44301: NEG
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 3
44309: NEG
44310: PUSH
44311: LD_INT 2
44313: NEG
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44344: LD_ADDR_VAR 0 29
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: LD_INT 0
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 0
44361: PUSH
44362: LD_INT 1
44364: NEG
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: LD_INT 0
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 1
44382: PUSH
44383: LD_INT 1
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 0
44392: PUSH
44393: LD_INT 1
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 1
44402: NEG
44403: PUSH
44404: LD_INT 0
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 1
44413: NEG
44414: PUSH
44415: LD_INT 1
44417: NEG
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 1
44425: NEG
44426: PUSH
44427: LD_INT 2
44429: NEG
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: LD_INT 2
44440: NEG
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 1
44448: PUSH
44449: LD_INT 1
44451: NEG
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 2
44459: PUSH
44460: LD_INT 0
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 2
44469: PUSH
44470: LD_INT 1
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 1
44479: PUSH
44480: LD_INT 2
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 0
44489: PUSH
44490: LD_INT 2
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 1
44499: NEG
44500: PUSH
44501: LD_INT 1
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 2
44510: NEG
44511: PUSH
44512: LD_INT 1
44514: NEG
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 2
44522: NEG
44523: PUSH
44524: LD_INT 2
44526: NEG
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 2
44534: NEG
44535: PUSH
44536: LD_INT 3
44538: NEG
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 2
44546: PUSH
44547: LD_INT 1
44549: NEG
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 3
44557: PUSH
44558: LD_INT 1
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 1
44567: PUSH
44568: LD_INT 3
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 1
44577: NEG
44578: PUSH
44579: LD_INT 2
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 3
44588: NEG
44589: PUSH
44590: LD_INT 2
44592: NEG
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44623: LD_ADDR_VAR 0 30
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: LD_INT 0
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 0
44640: PUSH
44641: LD_INT 1
44643: NEG
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 1
44651: PUSH
44652: LD_INT 0
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 1
44661: PUSH
44662: LD_INT 1
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 0
44671: PUSH
44672: LD_INT 1
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 1
44681: NEG
44682: PUSH
44683: LD_INT 0
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 1
44692: NEG
44693: PUSH
44694: LD_INT 1
44696: NEG
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 1
44704: NEG
44705: PUSH
44706: LD_INT 2
44708: NEG
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 0
44716: PUSH
44717: LD_INT 2
44719: NEG
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 1
44727: PUSH
44728: LD_INT 1
44730: NEG
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 2
44738: PUSH
44739: LD_INT 0
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 2
44748: PUSH
44749: LD_INT 1
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 2
44758: PUSH
44759: LD_INT 2
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 1
44768: PUSH
44769: LD_INT 2
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 2
44789: NEG
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 2
44800: NEG
44801: PUSH
44802: LD_INT 1
44804: NEG
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 1
44812: NEG
44813: PUSH
44814: LD_INT 3
44816: NEG
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 1
44824: PUSH
44825: LD_INT 2
44827: NEG
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 3
44835: PUSH
44836: LD_INT 2
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 2
44845: PUSH
44846: LD_INT 3
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 2
44855: NEG
44856: PUSH
44857: LD_INT 1
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 3
44866: NEG
44867: PUSH
44868: LD_INT 1
44870: NEG
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44901: LD_ADDR_VAR 0 31
44905: PUSH
44906: LD_INT 0
44908: PUSH
44909: LD_INT 0
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 0
44918: PUSH
44919: LD_INT 1
44921: NEG
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 1
44929: PUSH
44930: LD_INT 0
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 1
44939: PUSH
44940: LD_INT 1
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 0
44949: PUSH
44950: LD_INT 1
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 1
44959: NEG
44960: PUSH
44961: LD_INT 0
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 1
44970: NEG
44971: PUSH
44972: LD_INT 1
44974: NEG
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 1
44982: NEG
44983: PUSH
44984: LD_INT 2
44986: NEG
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 1
44994: PUSH
44995: LD_INT 1
44997: NEG
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 2
45005: PUSH
45006: LD_INT 0
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 2
45015: PUSH
45016: LD_INT 1
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 2
45025: PUSH
45026: LD_INT 2
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: LD_INT 2
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 0
45045: PUSH
45046: LD_INT 2
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: NEG
45056: PUSH
45057: LD_INT 1
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 2
45066: NEG
45067: PUSH
45068: LD_INT 1
45070: NEG
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 2
45078: NEG
45079: PUSH
45080: LD_INT 2
45082: NEG
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 2
45090: NEG
45091: PUSH
45092: LD_INT 3
45094: NEG
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 2
45102: PUSH
45103: LD_INT 1
45105: NEG
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 3
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 1
45123: PUSH
45124: LD_INT 3
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 1
45133: NEG
45134: PUSH
45135: LD_INT 2
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 3
45144: NEG
45145: PUSH
45146: LD_INT 2
45148: NEG
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45179: LD_ADDR_VAR 0 32
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: LD_INT 0
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 0
45196: PUSH
45197: LD_INT 1
45199: NEG
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 1
45207: PUSH
45208: LD_INT 0
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 1
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 0
45227: PUSH
45228: LD_INT 1
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 1
45237: NEG
45238: PUSH
45239: LD_INT 0
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 1
45248: NEG
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 1
45260: NEG
45261: PUSH
45262: LD_INT 2
45264: NEG
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: LD_INT 2
45275: NEG
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 1
45283: PUSH
45284: LD_INT 1
45286: NEG
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 2
45294: PUSH
45295: LD_INT 1
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 2
45304: PUSH
45305: LD_INT 2
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 1
45314: PUSH
45315: LD_INT 2
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 0
45324: PUSH
45325: LD_INT 2
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 1
45334: NEG
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 2
45345: NEG
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 2
45356: NEG
45357: PUSH
45358: LD_INT 1
45360: NEG
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: LD_INT 3
45372: NEG
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: LD_INT 2
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 3
45391: PUSH
45392: LD_INT 2
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 2
45401: PUSH
45402: LD_INT 3
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 2
45411: NEG
45412: PUSH
45413: LD_INT 1
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 3
45422: NEG
45423: PUSH
45424: LD_INT 1
45426: NEG
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45457: LD_ADDR_VAR 0 33
45461: PUSH
45462: LD_INT 0
45464: PUSH
45465: LD_INT 0
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 0
45474: PUSH
45475: LD_INT 1
45477: NEG
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 1
45485: PUSH
45486: LD_INT 0
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 1
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 0
45505: PUSH
45506: LD_INT 1
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 1
45515: NEG
45516: PUSH
45517: LD_INT 0
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 1
45526: NEG
45527: PUSH
45528: LD_INT 1
45530: NEG
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 1
45538: NEG
45539: PUSH
45540: LD_INT 2
45542: NEG
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 1
45550: PUSH
45551: LD_INT 1
45553: NEG
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: LD_INT 0
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 2
45571: PUSH
45572: LD_INT 1
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 1
45581: PUSH
45582: LD_INT 2
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 0
45591: PUSH
45592: LD_INT 2
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 1
45601: NEG
45602: PUSH
45603: LD_INT 1
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 2
45612: NEG
45613: PUSH
45614: LD_INT 0
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 2
45623: NEG
45624: PUSH
45625: LD_INT 1
45627: NEG
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 2
45635: NEG
45636: PUSH
45637: LD_INT 2
45639: NEG
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 2
45647: NEG
45648: PUSH
45649: LD_INT 3
45651: NEG
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 2
45659: PUSH
45660: LD_INT 1
45662: NEG
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 3
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 1
45680: PUSH
45681: LD_INT 3
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 1
45690: NEG
45691: PUSH
45692: LD_INT 2
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 3
45701: NEG
45702: PUSH
45703: LD_INT 2
45705: NEG
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45736: LD_ADDR_VAR 0 34
45740: PUSH
45741: LD_INT 0
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: LD_INT 1
45756: NEG
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 1
45764: PUSH
45765: LD_INT 0
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 1
45774: PUSH
45775: LD_INT 1
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 0
45784: PUSH
45785: LD_INT 1
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 1
45794: NEG
45795: PUSH
45796: LD_INT 0
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 1
45805: NEG
45806: PUSH
45807: LD_INT 1
45809: NEG
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 1
45817: NEG
45818: PUSH
45819: LD_INT 2
45821: NEG
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 0
45829: PUSH
45830: LD_INT 2
45832: NEG
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 1
45840: PUSH
45841: LD_INT 1
45843: NEG
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 2
45851: PUSH
45852: LD_INT 1
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 2
45861: PUSH
45862: LD_INT 2
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 1
45871: PUSH
45872: LD_INT 2
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 1
45881: NEG
45882: PUSH
45883: LD_INT 1
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 2
45892: NEG
45893: PUSH
45894: LD_INT 0
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 2
45903: NEG
45904: PUSH
45905: LD_INT 1
45907: NEG
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 2
45915: NEG
45916: PUSH
45917: LD_INT 2
45919: NEG
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 1
45927: NEG
45928: PUSH
45929: LD_INT 3
45931: NEG
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 1
45939: PUSH
45940: LD_INT 2
45942: NEG
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 3
45950: PUSH
45951: LD_INT 2
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 2
45960: PUSH
45961: LD_INT 3
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 2
45970: NEG
45971: PUSH
45972: LD_INT 1
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 3
45981: NEG
45982: PUSH
45983: LD_INT 1
45985: NEG
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46016: LD_ADDR_VAR 0 35
46020: PUSH
46021: LD_INT 0
46023: PUSH
46024: LD_INT 0
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: LD_INT 1
46036: NEG
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 1
46054: PUSH
46055: LD_INT 1
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: LD_INT 1
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 1
46074: NEG
46075: PUSH
46076: LD_INT 0
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 1
46085: NEG
46086: PUSH
46087: LD_INT 1
46089: NEG
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 2
46097: PUSH
46098: LD_INT 1
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 2
46107: NEG
46108: PUSH
46109: LD_INT 1
46111: NEG
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46128: LD_ADDR_VAR 0 36
46132: PUSH
46133: LD_INT 0
46135: PUSH
46136: LD_INT 0
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 0
46145: PUSH
46146: LD_INT 1
46148: NEG
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 1
46156: PUSH
46157: LD_INT 0
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 1
46166: PUSH
46167: LD_INT 1
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 0
46176: PUSH
46177: LD_INT 1
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 1
46186: NEG
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 1
46197: NEG
46198: PUSH
46199: LD_INT 1
46201: NEG
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 1
46209: NEG
46210: PUSH
46211: LD_INT 2
46213: NEG
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 1
46221: PUSH
46222: LD_INT 2
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46240: LD_ADDR_VAR 0 37
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: LD_INT 0
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: LD_INT 1
46260: NEG
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 1
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: PUSH
46279: LD_INT 1
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 0
46288: PUSH
46289: LD_INT 1
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 1
46298: NEG
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 1
46309: NEG
46310: PUSH
46311: LD_INT 1
46313: NEG
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: LD_INT 1
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: NEG
46333: PUSH
46334: LD_INT 1
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46352: LD_ADDR_VAR 0 38
46356: PUSH
46357: LD_INT 0
46359: PUSH
46360: LD_INT 0
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 0
46369: PUSH
46370: LD_INT 1
46372: NEG
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 1
46390: PUSH
46391: LD_INT 1
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 0
46400: PUSH
46401: LD_INT 1
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 1
46410: NEG
46411: PUSH
46412: LD_INT 0
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 1
46421: NEG
46422: PUSH
46423: LD_INT 1
46425: NEG
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 2
46433: PUSH
46434: LD_INT 1
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 2
46443: NEG
46444: PUSH
46445: LD_INT 1
46447: NEG
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46464: LD_ADDR_VAR 0 39
46468: PUSH
46469: LD_INT 0
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: LD_INT 1
46484: NEG
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 1
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 1
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 1
46522: NEG
46523: PUSH
46524: LD_INT 0
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 1
46533: NEG
46534: PUSH
46535: LD_INT 1
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 1
46545: NEG
46546: PUSH
46547: LD_INT 2
46549: NEG
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 1
46557: PUSH
46558: LD_INT 2
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46576: LD_ADDR_VAR 0 40
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: LD_INT 1
46596: NEG
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: LD_INT 0
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: LD_INT 1
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 0
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 1
46634: NEG
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: LD_INT 1
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 1
46657: PUSH
46658: LD_INT 1
46660: NEG
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: LD_INT 1
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46688: LD_ADDR_VAR 0 41
46692: PUSH
46693: LD_INT 0
46695: PUSH
46696: LD_INT 0
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: LD_INT 1
46708: NEG
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: LD_INT 0
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: LD_INT 1
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 0
46736: PUSH
46737: LD_INT 1
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 1
46746: NEG
46747: PUSH
46748: LD_INT 0
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 1
46757: NEG
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 1
46769: NEG
46770: PUSH
46771: LD_INT 2
46773: NEG
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 1
46781: PUSH
46782: LD_INT 1
46784: NEG
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 2
46792: PUSH
46793: LD_INT 0
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 2
46802: PUSH
46803: LD_INT 1
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 2
46812: PUSH
46813: LD_INT 2
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: LD_INT 2
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 1
46832: NEG
46833: PUSH
46834: LD_INT 1
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 2
46843: NEG
46844: PUSH
46845: LD_INT 0
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 2
46854: NEG
46855: PUSH
46856: LD_INT 1
46858: NEG
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 2
46866: NEG
46867: PUSH
46868: LD_INT 2
46870: NEG
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 2
46878: NEG
46879: PUSH
46880: LD_INT 3
46882: NEG
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 2
46890: PUSH
46891: LD_INT 1
46893: NEG
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 3
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 3
46911: PUSH
46912: LD_INT 1
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 3
46921: PUSH
46922: LD_INT 2
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 3
46931: PUSH
46932: LD_INT 3
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 2
46941: PUSH
46942: LD_INT 3
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 2
46951: NEG
46952: PUSH
46953: LD_INT 1
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 3
46962: NEG
46963: PUSH
46964: LD_INT 0
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 3
46973: NEG
46974: PUSH
46975: LD_INT 1
46977: NEG
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 3
46985: NEG
46986: PUSH
46987: LD_INT 2
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 3
46997: NEG
46998: PUSH
46999: LD_INT 3
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47038: LD_ADDR_VAR 0 42
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 0
47055: PUSH
47056: LD_INT 1
47058: NEG
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 1
47066: PUSH
47067: LD_INT 0
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 1
47076: PUSH
47077: LD_INT 1
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 0
47086: PUSH
47087: LD_INT 1
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: LD_INT 1
47111: NEG
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 1
47119: NEG
47120: PUSH
47121: LD_INT 2
47123: NEG
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 0
47131: PUSH
47132: LD_INT 2
47134: NEG
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 1
47142: PUSH
47143: LD_INT 1
47145: NEG
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 2
47153: PUSH
47154: LD_INT 1
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 2
47163: PUSH
47164: LD_INT 2
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 1
47173: PUSH
47174: LD_INT 2
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 0
47183: PUSH
47184: LD_INT 2
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 1
47193: NEG
47194: PUSH
47195: LD_INT 1
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 2
47204: NEG
47205: PUSH
47206: LD_INT 1
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 2
47216: NEG
47217: PUSH
47218: LD_INT 2
47220: NEG
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 2
47228: NEG
47229: PUSH
47230: LD_INT 3
47232: NEG
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 1
47240: NEG
47241: PUSH
47242: LD_INT 3
47244: NEG
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 0
47252: PUSH
47253: LD_INT 3
47255: NEG
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 1
47263: PUSH
47264: LD_INT 2
47266: NEG
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 3
47274: PUSH
47275: LD_INT 2
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 3
47284: PUSH
47285: LD_INT 3
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 2
47294: PUSH
47295: LD_INT 3
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 1
47304: PUSH
47305: LD_INT 3
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: LD_INT 3
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 1
47324: NEG
47325: PUSH
47326: LD_INT 2
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 3
47335: NEG
47336: PUSH
47337: LD_INT 2
47339: NEG
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 3
47347: NEG
47348: PUSH
47349: LD_INT 3
47351: NEG
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47388: LD_ADDR_VAR 0 43
47392: PUSH
47393: LD_INT 0
47395: PUSH
47396: LD_INT 0
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 0
47405: PUSH
47406: LD_INT 1
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 1
47416: PUSH
47417: LD_INT 0
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 1
47426: PUSH
47427: LD_INT 1
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: LD_INT 1
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 1
47457: NEG
47458: PUSH
47459: LD_INT 1
47461: NEG
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 1
47469: NEG
47470: PUSH
47471: LD_INT 2
47473: NEG
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 0
47481: PUSH
47482: LD_INT 2
47484: NEG
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 1
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 2
47503: PUSH
47504: LD_INT 0
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 2
47513: PUSH
47514: LD_INT 1
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: LD_INT 2
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 0
47533: PUSH
47534: LD_INT 2
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 1
47543: NEG
47544: PUSH
47545: LD_INT 1
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 2
47554: NEG
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 2
47565: NEG
47566: PUSH
47567: LD_INT 1
47569: NEG
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 1
47577: NEG
47578: PUSH
47579: LD_INT 3
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: LD_INT 3
47592: NEG
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 1
47600: PUSH
47601: LD_INT 2
47603: NEG
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 2
47611: PUSH
47612: LD_INT 1
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 3
47622: PUSH
47623: LD_INT 0
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 3
47632: PUSH
47633: LD_INT 1
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: LD_INT 3
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 0
47652: PUSH
47653: LD_INT 3
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 1
47662: NEG
47663: PUSH
47664: LD_INT 2
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 2
47673: NEG
47674: PUSH
47675: LD_INT 1
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 3
47684: NEG
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 3
47695: NEG
47696: PUSH
47697: LD_INT 1
47699: NEG
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47736: LD_ADDR_VAR 0 44
47740: PUSH
47741: LD_INT 0
47743: PUSH
47744: LD_INT 0
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: LD_INT 1
47756: NEG
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 1
47764: PUSH
47765: LD_INT 0
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 1
47774: PUSH
47775: LD_INT 1
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 0
47784: PUSH
47785: LD_INT 1
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: NEG
47795: PUSH
47796: LD_INT 0
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 1
47805: NEG
47806: PUSH
47807: LD_INT 1
47809: NEG
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 1
47817: NEG
47818: PUSH
47819: LD_INT 2
47821: NEG
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 1
47829: PUSH
47830: LD_INT 1
47832: NEG
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 2
47840: PUSH
47841: LD_INT 0
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 2
47850: PUSH
47851: LD_INT 1
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 2
47860: PUSH
47861: LD_INT 2
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 1
47870: PUSH
47871: LD_INT 2
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 1
47880: NEG
47881: PUSH
47882: LD_INT 1
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 2
47891: NEG
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 2
47902: NEG
47903: PUSH
47904: LD_INT 1
47906: NEG
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 2
47914: NEG
47915: PUSH
47916: LD_INT 2
47918: NEG
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 2
47926: NEG
47927: PUSH
47928: LD_INT 3
47930: NEG
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 2
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 3
47949: PUSH
47950: LD_INT 0
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 3
47959: PUSH
47960: LD_INT 1
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 3
47969: PUSH
47970: LD_INT 2
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 3
47979: PUSH
47980: LD_INT 3
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 2
47989: PUSH
47990: LD_INT 3
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 2
47999: NEG
48000: PUSH
48001: LD_INT 1
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 3
48010: NEG
48011: PUSH
48012: LD_INT 0
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 3
48021: NEG
48022: PUSH
48023: LD_INT 1
48025: NEG
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 3
48033: NEG
48034: PUSH
48035: LD_INT 2
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 3
48045: NEG
48046: PUSH
48047: LD_INT 3
48049: NEG
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48086: LD_ADDR_VAR 0 45
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: LD_INT 0
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: LD_INT 1
48106: NEG
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 1
48124: PUSH
48125: LD_INT 1
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 0
48134: PUSH
48135: LD_INT 1
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 1
48144: NEG
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 1
48155: NEG
48156: PUSH
48157: LD_INT 1
48159: NEG
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 1
48167: NEG
48168: PUSH
48169: LD_INT 2
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: LD_INT 2
48182: NEG
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 1
48190: PUSH
48191: LD_INT 1
48193: NEG
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 2
48201: PUSH
48202: LD_INT 1
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 2
48211: PUSH
48212: LD_INT 2
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 1
48221: PUSH
48222: LD_INT 2
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: LD_INT 2
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: LD_INT 1
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 2
48252: NEG
48253: PUSH
48254: LD_INT 1
48256: NEG
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 2
48264: NEG
48265: PUSH
48266: LD_INT 2
48268: NEG
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 2
48276: NEG
48277: PUSH
48278: LD_INT 3
48280: NEG
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 1
48288: NEG
48289: PUSH
48290: LD_INT 3
48292: NEG
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 0
48300: PUSH
48301: LD_INT 3
48303: NEG
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 1
48311: PUSH
48312: LD_INT 2
48314: NEG
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 3
48322: PUSH
48323: LD_INT 2
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 3
48332: PUSH
48333: LD_INT 3
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 2
48342: PUSH
48343: LD_INT 3
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: LD_INT 3
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: LD_INT 3
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: LD_INT 2
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 3
48383: NEG
48384: PUSH
48385: LD_INT 2
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 3
48395: NEG
48396: PUSH
48397: LD_INT 3
48399: NEG
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48436: LD_ADDR_VAR 0 46
48440: PUSH
48441: LD_INT 0
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 0
48453: PUSH
48454: LD_INT 1
48456: NEG
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 1
48464: PUSH
48465: LD_INT 0
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 1
48474: PUSH
48475: LD_INT 1
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 0
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: PUSH
48507: LD_INT 1
48509: NEG
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 1
48517: NEG
48518: PUSH
48519: LD_INT 2
48521: NEG
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 0
48529: PUSH
48530: LD_INT 2
48532: NEG
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 1
48540: PUSH
48541: LD_INT 1
48543: NEG
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 2
48551: PUSH
48552: LD_INT 0
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 2
48561: PUSH
48562: LD_INT 1
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 1
48571: PUSH
48572: LD_INT 2
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 0
48581: PUSH
48582: LD_INT 2
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 1
48591: NEG
48592: PUSH
48593: LD_INT 1
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 2
48602: NEG
48603: PUSH
48604: LD_INT 0
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 2
48613: NEG
48614: PUSH
48615: LD_INT 1
48617: NEG
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: LD_INT 3
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: LD_INT 3
48640: NEG
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: PUSH
48649: LD_INT 2
48651: NEG
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 2
48659: PUSH
48660: LD_INT 1
48662: NEG
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 3
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 3
48680: PUSH
48681: LD_INT 1
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 1
48690: PUSH
48691: LD_INT 3
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 0
48700: PUSH
48701: LD_INT 3
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 1
48710: NEG
48711: PUSH
48712: LD_INT 2
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 2
48721: NEG
48722: PUSH
48723: LD_INT 1
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 3
48732: NEG
48733: PUSH
48734: LD_INT 0
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 3
48743: NEG
48744: PUSH
48745: LD_INT 1
48747: NEG
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48784: LD_ADDR_VAR 0 47
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: LD_INT 0
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 0
48801: PUSH
48802: LD_INT 1
48804: NEG
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 1
48812: PUSH
48813: LD_INT 0
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 1
48822: PUSH
48823: LD_INT 1
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 0
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 1
48842: NEG
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 1
48853: NEG
48854: PUSH
48855: LD_INT 1
48857: NEG
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 1
48865: NEG
48866: PUSH
48867: LD_INT 2
48869: NEG
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: LD_INT 2
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 1
48888: PUSH
48889: LD_INT 1
48891: NEG
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 2
48899: NEG
48900: PUSH
48901: LD_INT 1
48903: NEG
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 2
48911: NEG
48912: PUSH
48913: LD_INT 2
48915: NEG
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48935: LD_ADDR_VAR 0 48
48939: PUSH
48940: LD_INT 0
48942: PUSH
48943: LD_INT 0
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: LD_INT 1
48955: NEG
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: PUSH
48964: LD_INT 0
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 1
48973: PUSH
48974: LD_INT 1
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 0
48983: PUSH
48984: LD_INT 1
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 1
48993: NEG
48994: PUSH
48995: LD_INT 0
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 1
49004: NEG
49005: PUSH
49006: LD_INT 1
49008: NEG
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 1
49016: NEG
49017: PUSH
49018: LD_INT 2
49020: NEG
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 0
49028: PUSH
49029: LD_INT 2
49031: NEG
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 1
49039: PUSH
49040: LD_INT 1
49042: NEG
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 2
49050: PUSH
49051: LD_INT 0
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 2
49060: PUSH
49061: LD_INT 1
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49082: LD_ADDR_VAR 0 49
49086: PUSH
49087: LD_INT 0
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: LD_INT 0
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: PUSH
49121: LD_INT 1
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 0
49130: PUSH
49131: LD_INT 1
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: LD_INT 0
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 1
49151: NEG
49152: PUSH
49153: LD_INT 1
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 1
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 2
49174: PUSH
49175: LD_INT 0
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 2
49184: PUSH
49185: LD_INT 1
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 2
49194: PUSH
49195: LD_INT 2
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 1
49204: PUSH
49205: LD_INT 2
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49226: LD_ADDR_VAR 0 50
49230: PUSH
49231: LD_INT 0
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 0
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: LD_INT 0
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 1
49264: PUSH
49265: LD_INT 1
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: LD_INT 1
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: NEG
49285: PUSH
49286: LD_INT 0
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: LD_INT 1
49299: NEG
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 2
49307: PUSH
49308: LD_INT 1
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 2
49317: PUSH
49318: LD_INT 2
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 1
49327: PUSH
49328: LD_INT 2
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 0
49337: PUSH
49338: LD_INT 2
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 1
49347: NEG
49348: PUSH
49349: LD_INT 1
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49370: LD_ADDR_VAR 0 51
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: LD_INT 0
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 0
49387: PUSH
49388: LD_INT 1
49390: NEG
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: LD_INT 0
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 1
49408: PUSH
49409: LD_INT 1
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: LD_INT 1
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 1
49428: NEG
49429: PUSH
49430: LD_INT 0
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 1
49439: NEG
49440: PUSH
49441: LD_INT 1
49443: NEG
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 1
49451: PUSH
49452: LD_INT 2
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: LD_INT 2
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: NEG
49472: PUSH
49473: LD_INT 1
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 2
49482: NEG
49483: PUSH
49484: LD_INT 0
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 2
49493: NEG
49494: PUSH
49495: LD_INT 1
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49517: LD_ADDR_VAR 0 52
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: LD_INT 0
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: LD_INT 1
49537: NEG
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 1
49545: PUSH
49546: LD_INT 0
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: LD_INT 1
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 0
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 1
49575: NEG
49576: PUSH
49577: LD_INT 0
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 1
49586: NEG
49587: PUSH
49588: LD_INT 1
49590: NEG
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: LD_INT 2
49602: NEG
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: LD_INT 1
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 2
49621: NEG
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 2
49632: NEG
49633: PUSH
49634: LD_INT 1
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 2
49644: NEG
49645: PUSH
49646: LD_INT 2
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49668: LD_ADDR_VAR 0 53
49672: PUSH
49673: LD_INT 0
49675: PUSH
49676: LD_INT 0
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 0
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 1
49706: PUSH
49707: LD_INT 1
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: LD_INT 1
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 1
49726: NEG
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 1
49737: NEG
49738: PUSH
49739: LD_INT 1
49741: NEG
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 1
49749: NEG
49750: PUSH
49751: LD_INT 2
49753: NEG
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 0
49761: PUSH
49762: LD_INT 2
49764: NEG
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 1
49772: PUSH
49773: LD_INT 1
49775: NEG
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 2
49783: PUSH
49784: LD_INT 0
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 2
49793: PUSH
49794: LD_INT 1
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 2
49803: PUSH
49804: LD_INT 2
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: LD_INT 2
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: LD_INT 2
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 1
49833: NEG
49834: PUSH
49835: LD_INT 1
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 2
49844: NEG
49845: PUSH
49846: LD_INT 0
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 2
49855: NEG
49856: PUSH
49857: LD_INT 1
49859: NEG
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 2
49867: NEG
49868: PUSH
49869: LD_INT 2
49871: NEG
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49898: LD_ADDR_VAR 0 54
49902: PUSH
49903: LD_INT 0
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 0
49915: PUSH
49916: LD_INT 1
49918: NEG
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 1
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 1
49936: PUSH
49937: LD_INT 1
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 0
49946: PUSH
49947: LD_INT 1
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 1
49956: NEG
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 1
49967: NEG
49968: PUSH
49969: LD_INT 1
49971: NEG
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 1
49979: NEG
49980: PUSH
49981: LD_INT 2
49983: NEG
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: LD_INT 2
49994: NEG
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: PUSH
50003: LD_INT 1
50005: NEG
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 2
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 2
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 2
50033: PUSH
50034: LD_INT 2
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: LD_INT 2
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: LD_INT 2
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 1
50063: NEG
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 2
50074: NEG
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 2
50085: NEG
50086: PUSH
50087: LD_INT 1
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 2
50097: NEG
50098: PUSH
50099: LD_INT 2
50101: NEG
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50128: LD_ADDR_VAR 0 55
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: LD_INT 0
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 0
50145: PUSH
50146: LD_INT 1
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: LD_INT 0
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: LD_INT 1
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: LD_INT 1
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 1
50186: NEG
50187: PUSH
50188: LD_INT 0
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: NEG
50198: PUSH
50199: LD_INT 1
50201: NEG
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: LD_INT 2
50213: NEG
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: LD_INT 2
50224: NEG
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 1
50232: PUSH
50233: LD_INT 1
50235: NEG
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 2
50243: PUSH
50244: LD_INT 0
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 2
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 2
50263: PUSH
50264: LD_INT 2
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: LD_INT 2
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: LD_INT 2
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 1
50293: NEG
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 2
50304: NEG
50305: PUSH
50306: LD_INT 0
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 2
50315: NEG
50316: PUSH
50317: LD_INT 1
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 2
50327: NEG
50328: PUSH
50329: LD_INT 2
50331: NEG
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50358: LD_ADDR_VAR 0 56
50362: PUSH
50363: LD_INT 0
50365: PUSH
50366: LD_INT 0
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 0
50375: PUSH
50376: LD_INT 1
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: LD_INT 0
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 1
50396: PUSH
50397: LD_INT 1
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 0
50406: PUSH
50407: LD_INT 1
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 1
50416: NEG
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 1
50427: NEG
50428: PUSH
50429: LD_INT 1
50431: NEG
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 1
50439: NEG
50440: PUSH
50441: LD_INT 2
50443: NEG
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 0
50451: PUSH
50452: LD_INT 2
50454: NEG
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: PUSH
50463: LD_INT 1
50465: NEG
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 2
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 2
50483: PUSH
50484: LD_INT 1
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 2
50493: PUSH
50494: LD_INT 2
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 1
50503: PUSH
50504: LD_INT 2
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 0
50513: PUSH
50514: LD_INT 2
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 1
50523: NEG
50524: PUSH
50525: LD_INT 1
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 2
50534: NEG
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 2
50545: NEG
50546: PUSH
50547: LD_INT 1
50549: NEG
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 2
50557: NEG
50558: PUSH
50559: LD_INT 2
50561: NEG
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50588: LD_ADDR_VAR 0 57
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 0
50605: PUSH
50606: LD_INT 1
50608: NEG
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 1
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 0
50636: PUSH
50637: LD_INT 1
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 1
50646: NEG
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 1
50657: NEG
50658: PUSH
50659: LD_INT 1
50661: NEG
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 1
50669: NEG
50670: PUSH
50671: LD_INT 2
50673: NEG
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: LD_INT 2
50684: NEG
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 1
50692: PUSH
50693: LD_INT 1
50695: NEG
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 2
50703: PUSH
50704: LD_INT 0
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 2
50713: PUSH
50714: LD_INT 1
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 2
50723: PUSH
50724: LD_INT 2
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 1
50733: PUSH
50734: LD_INT 2
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 0
50743: PUSH
50744: LD_INT 2
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 1
50753: NEG
50754: PUSH
50755: LD_INT 1
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 2
50764: NEG
50765: PUSH
50766: LD_INT 0
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 2
50775: NEG
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 2
50787: NEG
50788: PUSH
50789: LD_INT 2
50791: NEG
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50818: LD_ADDR_VAR 0 58
50822: PUSH
50823: LD_INT 0
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 0
50835: PUSH
50836: LD_INT 1
50838: NEG
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 1
50846: PUSH
50847: LD_INT 0
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 1
50856: PUSH
50857: LD_INT 1
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: LD_INT 1
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 1
50876: NEG
50877: PUSH
50878: LD_INT 0
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 1
50887: NEG
50888: PUSH
50889: LD_INT 1
50891: NEG
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 1
50899: NEG
50900: PUSH
50901: LD_INT 2
50903: NEG
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: LD_INT 2
50914: NEG
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 1
50922: PUSH
50923: LD_INT 1
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 2
50933: PUSH
50934: LD_INT 0
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 2
50943: PUSH
50944: LD_INT 1
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 2
50953: PUSH
50954: LD_INT 2
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 1
50963: PUSH
50964: LD_INT 2
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 0
50973: PUSH
50974: LD_INT 2
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 1
50983: NEG
50984: PUSH
50985: LD_INT 1
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 2
50994: NEG
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 2
51005: NEG
51006: PUSH
51007: LD_INT 1
51009: NEG
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 2
51017: NEG
51018: PUSH
51019: LD_INT 2
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51048: LD_ADDR_VAR 0 59
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 0
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 1
51076: PUSH
51077: LD_INT 0
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 1
51086: PUSH
51087: LD_INT 1
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 0
51096: PUSH
51097: LD_INT 1
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 1
51106: NEG
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 1
51117: NEG
51118: PUSH
51119: LD_INT 1
51121: NEG
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51136: LD_ADDR_VAR 0 60
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 0
51153: PUSH
51154: LD_INT 1
51156: NEG
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 1
51174: PUSH
51175: LD_INT 1
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: LD_INT 1
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 1
51194: NEG
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: NEG
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51224: LD_ADDR_VAR 0 61
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: LD_INT 1
51244: NEG
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 0
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 1
51282: NEG
51283: PUSH
51284: LD_INT 0
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 1
51293: NEG
51294: PUSH
51295: LD_INT 1
51297: NEG
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51312: LD_ADDR_VAR 0 62
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 0
51329: PUSH
51330: LD_INT 1
51332: NEG
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: LD_INT 1
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 0
51360: PUSH
51361: LD_INT 1
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 1
51370: NEG
51371: PUSH
51372: LD_INT 0
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: LD_INT 1
51385: NEG
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51400: LD_ADDR_VAR 0 63
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 0
51417: PUSH
51418: LD_INT 1
51420: NEG
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 1
51428: PUSH
51429: LD_INT 0
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 1
51438: PUSH
51439: LD_INT 1
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 0
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 1
51458: NEG
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 1
51469: NEG
51470: PUSH
51471: LD_INT 1
51473: NEG
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51488: LD_ADDR_VAR 0 64
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: LD_INT 0
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: LD_INT 1
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 1
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: LD_INT 1
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: LD_INT 1
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 1
51557: NEG
51558: PUSH
51559: LD_INT 1
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: ST_TO_ADDR
// end ; 1 :
51576: GO 57473
51578: LD_INT 1
51580: DOUBLE
51581: EQUAL
51582: IFTRUE 51586
51584: GO 54209
51586: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51587: LD_ADDR_VAR 0 11
51591: PUSH
51592: LD_INT 1
51594: NEG
51595: PUSH
51596: LD_INT 3
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: LD_INT 3
51609: NEG
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 1
51617: PUSH
51618: LD_INT 2
51620: NEG
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: LIST
51630: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51631: LD_ADDR_VAR 0 12
51635: PUSH
51636: LD_INT 2
51638: PUSH
51639: LD_INT 1
51641: NEG
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 3
51649: PUSH
51650: LD_INT 0
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 3
51659: PUSH
51660: LD_INT 1
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: LIST
51671: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51672: LD_ADDR_VAR 0 13
51676: PUSH
51677: LD_INT 3
51679: PUSH
51680: LD_INT 2
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 3
51689: PUSH
51690: LD_INT 3
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 2
51699: PUSH
51700: LD_INT 3
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: LIST
51711: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51712: LD_ADDR_VAR 0 14
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: LD_INT 3
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 0
51729: PUSH
51730: LD_INT 3
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 1
51739: NEG
51740: PUSH
51741: LD_INT 2
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: LIST
51752: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51753: LD_ADDR_VAR 0 15
51757: PUSH
51758: LD_INT 2
51760: NEG
51761: PUSH
51762: LD_INT 1
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 3
51771: NEG
51772: PUSH
51773: LD_INT 0
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 3
51782: NEG
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: LIST
51796: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51797: LD_ADDR_VAR 0 16
51801: PUSH
51802: LD_INT 2
51804: NEG
51805: PUSH
51806: LD_INT 3
51808: NEG
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 3
51816: NEG
51817: PUSH
51818: LD_INT 2
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 3
51828: NEG
51829: PUSH
51830: LD_INT 3
51832: NEG
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: LIST
51842: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51843: LD_ADDR_VAR 0 17
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: PUSH
51852: LD_INT 3
51854: NEG
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: LD_INT 3
51865: NEG
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 1
51873: PUSH
51874: LD_INT 2
51876: NEG
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: LIST
51886: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51887: LD_ADDR_VAR 0 18
51891: PUSH
51892: LD_INT 2
51894: PUSH
51895: LD_INT 1
51897: NEG
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 3
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 3
51915: PUSH
51916: LD_INT 1
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: LIST
51927: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51928: LD_ADDR_VAR 0 19
51932: PUSH
51933: LD_INT 3
51935: PUSH
51936: LD_INT 2
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 3
51945: PUSH
51946: LD_INT 3
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 2
51955: PUSH
51956: LD_INT 3
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: LIST
51967: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51968: LD_ADDR_VAR 0 20
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: LD_INT 3
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 0
51985: PUSH
51986: LD_INT 3
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 1
51995: NEG
51996: PUSH
51997: LD_INT 2
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: LIST
52008: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52009: LD_ADDR_VAR 0 21
52013: PUSH
52014: LD_INT 2
52016: NEG
52017: PUSH
52018: LD_INT 1
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 3
52027: NEG
52028: PUSH
52029: LD_INT 0
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 3
52038: NEG
52039: PUSH
52040: LD_INT 1
52042: NEG
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: LIST
52052: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52053: LD_ADDR_VAR 0 22
52057: PUSH
52058: LD_INT 2
52060: NEG
52061: PUSH
52062: LD_INT 3
52064: NEG
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 3
52072: NEG
52073: PUSH
52074: LD_INT 2
52076: NEG
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 3
52084: NEG
52085: PUSH
52086: LD_INT 3
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: LIST
52098: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52099: LD_ADDR_VAR 0 23
52103: PUSH
52104: LD_INT 0
52106: PUSH
52107: LD_INT 3
52109: NEG
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 1
52117: NEG
52118: PUSH
52119: LD_INT 4
52121: NEG
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 1
52129: PUSH
52130: LD_INT 3
52132: NEG
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: LIST
52142: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52143: LD_ADDR_VAR 0 24
52147: PUSH
52148: LD_INT 3
52150: PUSH
52151: LD_INT 0
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 3
52160: PUSH
52161: LD_INT 1
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 4
52171: PUSH
52172: LD_INT 1
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: LIST
52183: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52184: LD_ADDR_VAR 0 25
52188: PUSH
52189: LD_INT 3
52191: PUSH
52192: LD_INT 3
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 4
52201: PUSH
52202: LD_INT 3
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 3
52211: PUSH
52212: LD_INT 4
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: LIST
52223: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52224: LD_ADDR_VAR 0 26
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: LD_INT 3
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 1
52241: PUSH
52242: LD_INT 4
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 1
52251: NEG
52252: PUSH
52253: LD_INT 3
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: LIST
52264: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52265: LD_ADDR_VAR 0 27
52269: PUSH
52270: LD_INT 3
52272: NEG
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 3
52283: NEG
52284: PUSH
52285: LD_INT 1
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 4
52294: NEG
52295: PUSH
52296: LD_INT 1
52298: NEG
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: LIST
52308: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52309: LD_ADDR_VAR 0 28
52313: PUSH
52314: LD_INT 3
52316: NEG
52317: PUSH
52318: LD_INT 3
52320: NEG
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 3
52328: NEG
52329: PUSH
52330: LD_INT 4
52332: NEG
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 4
52340: NEG
52341: PUSH
52342: LD_INT 3
52344: NEG
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: LIST
52354: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52355: LD_ADDR_VAR 0 29
52359: PUSH
52360: LD_INT 1
52362: NEG
52363: PUSH
52364: LD_INT 3
52366: NEG
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: LD_INT 3
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 1
52385: PUSH
52386: LD_INT 2
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 1
52396: NEG
52397: PUSH
52398: LD_INT 4
52400: NEG
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 0
52408: PUSH
52409: LD_INT 4
52411: NEG
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 1
52419: PUSH
52420: LD_INT 3
52422: NEG
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 1
52430: NEG
52431: PUSH
52432: LD_INT 5
52434: NEG
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 0
52442: PUSH
52443: LD_INT 5
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 1
52453: PUSH
52454: LD_INT 4
52456: NEG
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 1
52464: NEG
52465: PUSH
52466: LD_INT 6
52468: NEG
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 0
52476: PUSH
52477: LD_INT 6
52479: NEG
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 1
52487: PUSH
52488: LD_INT 5
52490: NEG
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52510: LD_ADDR_VAR 0 30
52514: PUSH
52515: LD_INT 2
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 3
52528: PUSH
52529: LD_INT 0
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 3
52538: PUSH
52539: LD_INT 1
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 3
52548: PUSH
52549: LD_INT 1
52551: NEG
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 4
52559: PUSH
52560: LD_INT 0
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 4
52569: PUSH
52570: LD_INT 1
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 4
52579: PUSH
52580: LD_INT 1
52582: NEG
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 5
52590: PUSH
52591: LD_INT 0
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 5
52600: PUSH
52601: LD_INT 1
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 5
52610: PUSH
52611: LD_INT 1
52613: NEG
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 6
52621: PUSH
52622: LD_INT 0
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 6
52631: PUSH
52632: LD_INT 1
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52653: LD_ADDR_VAR 0 31
52657: PUSH
52658: LD_INT 3
52660: PUSH
52661: LD_INT 2
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 3
52670: PUSH
52671: LD_INT 3
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 2
52680: PUSH
52681: LD_INT 3
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 4
52690: PUSH
52691: LD_INT 3
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 4
52700: PUSH
52701: LD_INT 4
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 3
52710: PUSH
52711: LD_INT 4
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 5
52720: PUSH
52721: LD_INT 4
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 5
52730: PUSH
52731: LD_INT 5
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 4
52740: PUSH
52741: LD_INT 5
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 6
52750: PUSH
52751: LD_INT 5
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 6
52760: PUSH
52761: LD_INT 6
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 5
52770: PUSH
52771: LD_INT 6
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52792: LD_ADDR_VAR 0 32
52796: PUSH
52797: LD_INT 1
52799: PUSH
52800: LD_INT 3
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 0
52809: PUSH
52810: LD_INT 3
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 1
52819: NEG
52820: PUSH
52821: LD_INT 2
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 1
52830: PUSH
52831: LD_INT 4
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 0
52840: PUSH
52841: LD_INT 4
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 1
52850: NEG
52851: PUSH
52852: LD_INT 3
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 1
52861: PUSH
52862: LD_INT 5
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 0
52871: PUSH
52872: LD_INT 5
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 1
52881: NEG
52882: PUSH
52883: LD_INT 4
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 1
52892: PUSH
52893: LD_INT 6
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 0
52902: PUSH
52903: LD_INT 6
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 1
52912: NEG
52913: PUSH
52914: LD_INT 5
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52935: LD_ADDR_VAR 0 33
52939: PUSH
52940: LD_INT 2
52942: NEG
52943: PUSH
52944: LD_INT 1
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 3
52953: NEG
52954: PUSH
52955: LD_INT 0
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 3
52964: NEG
52965: PUSH
52966: LD_INT 1
52968: NEG
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 3
52976: NEG
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 4
52987: NEG
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 4
52998: NEG
52999: PUSH
53000: LD_INT 1
53002: NEG
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 4
53010: NEG
53011: PUSH
53012: LD_INT 1
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 5
53021: NEG
53022: PUSH
53023: LD_INT 0
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 5
53032: NEG
53033: PUSH
53034: LD_INT 1
53036: NEG
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 5
53044: NEG
53045: PUSH
53046: LD_INT 1
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 6
53055: NEG
53056: PUSH
53057: LD_INT 0
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 6
53066: NEG
53067: PUSH
53068: LD_INT 1
53070: NEG
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53090: LD_ADDR_VAR 0 34
53094: PUSH
53095: LD_INT 2
53097: NEG
53098: PUSH
53099: LD_INT 3
53101: NEG
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 3
53109: NEG
53110: PUSH
53111: LD_INT 2
53113: NEG
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 3
53121: NEG
53122: PUSH
53123: LD_INT 3
53125: NEG
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 3
53133: NEG
53134: PUSH
53135: LD_INT 4
53137: NEG
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 4
53145: NEG
53146: PUSH
53147: LD_INT 3
53149: NEG
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 4
53157: NEG
53158: PUSH
53159: LD_INT 4
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 4
53169: NEG
53170: PUSH
53171: LD_INT 5
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 5
53181: NEG
53182: PUSH
53183: LD_INT 4
53185: NEG
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 5
53193: NEG
53194: PUSH
53195: LD_INT 5
53197: NEG
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 5
53205: NEG
53206: PUSH
53207: LD_INT 6
53209: NEG
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 6
53217: NEG
53218: PUSH
53219: LD_INT 5
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 6
53229: NEG
53230: PUSH
53231: LD_INT 6
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53253: LD_ADDR_VAR 0 41
53257: PUSH
53258: LD_INT 0
53260: PUSH
53261: LD_INT 2
53263: NEG
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 1
53271: NEG
53272: PUSH
53273: LD_INT 3
53275: NEG
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 1
53283: PUSH
53284: LD_INT 2
53286: NEG
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: LIST
53296: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53297: LD_ADDR_VAR 0 42
53301: PUSH
53302: LD_INT 2
53304: PUSH
53305: LD_INT 0
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 2
53314: PUSH
53315: LD_INT 1
53317: NEG
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 3
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: LIST
53337: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53338: LD_ADDR_VAR 0 43
53342: PUSH
53343: LD_INT 2
53345: PUSH
53346: LD_INT 2
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 3
53355: PUSH
53356: LD_INT 2
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 2
53365: PUSH
53366: LD_INT 3
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: LIST
53377: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53378: LD_ADDR_VAR 0 44
53382: PUSH
53383: LD_INT 0
53385: PUSH
53386: LD_INT 2
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 1
53395: PUSH
53396: LD_INT 3
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 1
53405: NEG
53406: PUSH
53407: LD_INT 2
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: LIST
53418: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53419: LD_ADDR_VAR 0 45
53423: PUSH
53424: LD_INT 2
53426: NEG
53427: PUSH
53428: LD_INT 0
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 2
53437: NEG
53438: PUSH
53439: LD_INT 1
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 3
53448: NEG
53449: PUSH
53450: LD_INT 1
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: LIST
53462: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53463: LD_ADDR_VAR 0 46
53467: PUSH
53468: LD_INT 2
53470: NEG
53471: PUSH
53472: LD_INT 2
53474: NEG
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 2
53482: NEG
53483: PUSH
53484: LD_INT 3
53486: NEG
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 3
53494: NEG
53495: PUSH
53496: LD_INT 2
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: LIST
53508: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53509: LD_ADDR_VAR 0 47
53513: PUSH
53514: LD_INT 2
53516: NEG
53517: PUSH
53518: LD_INT 3
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: NEG
53529: PUSH
53530: LD_INT 3
53532: NEG
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53542: LD_ADDR_VAR 0 48
53546: PUSH
53547: LD_INT 1
53549: PUSH
53550: LD_INT 2
53552: NEG
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 2
53560: PUSH
53561: LD_INT 1
53563: NEG
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53573: LD_ADDR_VAR 0 49
53577: PUSH
53578: LD_INT 3
53580: PUSH
53581: LD_INT 1
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 3
53590: PUSH
53591: LD_INT 2
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53602: LD_ADDR_VAR 0 50
53606: PUSH
53607: LD_INT 2
53609: PUSH
53610: LD_INT 3
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 1
53619: PUSH
53620: LD_INT 3
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53631: LD_ADDR_VAR 0 51
53635: PUSH
53636: LD_INT 1
53638: NEG
53639: PUSH
53640: LD_INT 2
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 2
53649: NEG
53650: PUSH
53651: LD_INT 1
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53662: LD_ADDR_VAR 0 52
53666: PUSH
53667: LD_INT 3
53669: NEG
53670: PUSH
53671: LD_INT 1
53673: NEG
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 3
53681: NEG
53682: PUSH
53683: LD_INT 2
53685: NEG
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53695: LD_ADDR_VAR 0 53
53699: PUSH
53700: LD_INT 1
53702: NEG
53703: PUSH
53704: LD_INT 3
53706: NEG
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 0
53714: PUSH
53715: LD_INT 3
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 1
53725: PUSH
53726: LD_INT 2
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: LIST
53738: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53739: LD_ADDR_VAR 0 54
53743: PUSH
53744: LD_INT 2
53746: PUSH
53747: LD_INT 1
53749: NEG
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 3
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 3
53767: PUSH
53768: LD_INT 1
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: LIST
53779: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53780: LD_ADDR_VAR 0 55
53784: PUSH
53785: LD_INT 3
53787: PUSH
53788: LD_INT 2
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 3
53797: PUSH
53798: LD_INT 3
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 2
53807: PUSH
53808: LD_INT 3
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: LIST
53819: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53820: LD_ADDR_VAR 0 56
53824: PUSH
53825: LD_INT 1
53827: PUSH
53828: LD_INT 3
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 0
53837: PUSH
53838: LD_INT 3
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 1
53847: NEG
53848: PUSH
53849: LD_INT 2
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: LIST
53860: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53861: LD_ADDR_VAR 0 57
53865: PUSH
53866: LD_INT 2
53868: NEG
53869: PUSH
53870: LD_INT 1
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 3
53879: NEG
53880: PUSH
53881: LD_INT 0
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 3
53890: NEG
53891: PUSH
53892: LD_INT 1
53894: NEG
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: LIST
53904: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53905: LD_ADDR_VAR 0 58
53909: PUSH
53910: LD_INT 2
53912: NEG
53913: PUSH
53914: LD_INT 3
53916: NEG
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 3
53924: NEG
53925: PUSH
53926: LD_INT 2
53928: NEG
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 3
53936: NEG
53937: PUSH
53938: LD_INT 3
53940: NEG
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: LIST
53950: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53951: LD_ADDR_VAR 0 59
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: LD_INT 2
53962: NEG
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: LD_INT 2
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 1
53981: PUSH
53982: LD_INT 1
53984: NEG
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: LIST
53994: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53995: LD_ADDR_VAR 0 60
53999: PUSH
54000: LD_INT 1
54002: PUSH
54003: LD_INT 1
54005: NEG
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 2
54013: PUSH
54014: LD_INT 0
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 2
54023: PUSH
54024: LD_INT 1
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: LIST
54035: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54036: LD_ADDR_VAR 0 61
54040: PUSH
54041: LD_INT 2
54043: PUSH
54044: LD_INT 1
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 2
54053: PUSH
54054: LD_INT 2
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 1
54063: PUSH
54064: LD_INT 2
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: LIST
54075: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54076: LD_ADDR_VAR 0 62
54080: PUSH
54081: LD_INT 1
54083: PUSH
54084: LD_INT 2
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: LD_INT 2
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 1
54103: NEG
54104: PUSH
54105: LD_INT 1
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: LIST
54116: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54117: LD_ADDR_VAR 0 63
54121: PUSH
54122: LD_INT 1
54124: NEG
54125: PUSH
54126: LD_INT 1
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 2
54135: NEG
54136: PUSH
54137: LD_INT 0
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 2
54146: NEG
54147: PUSH
54148: LD_INT 1
54150: NEG
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: LIST
54160: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54161: LD_ADDR_VAR 0 64
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: LD_INT 2
54172: NEG
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 2
54180: NEG
54181: PUSH
54182: LD_INT 1
54184: NEG
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 2
54192: NEG
54193: PUSH
54194: LD_INT 2
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: LIST
54206: ST_TO_ADDR
// end ; 2 :
54207: GO 57473
54209: LD_INT 2
54211: DOUBLE
54212: EQUAL
54213: IFTRUE 54217
54215: GO 57472
54217: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54218: LD_ADDR_VAR 0 29
54222: PUSH
54223: LD_INT 4
54225: PUSH
54226: LD_INT 0
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 4
54235: PUSH
54236: LD_INT 1
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 5
54246: PUSH
54247: LD_INT 0
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 5
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 4
54266: PUSH
54267: LD_INT 1
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 3
54276: PUSH
54277: LD_INT 0
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 3
54286: PUSH
54287: LD_INT 1
54289: NEG
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 3
54297: PUSH
54298: LD_INT 2
54300: NEG
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 5
54308: PUSH
54309: LD_INT 2
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 3
54318: PUSH
54319: LD_INT 3
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 3
54328: PUSH
54329: LD_INT 2
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 4
54338: PUSH
54339: LD_INT 3
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 4
54348: PUSH
54349: LD_INT 4
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 3
54358: PUSH
54359: LD_INT 4
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 2
54368: PUSH
54369: LD_INT 3
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 2
54378: PUSH
54379: LD_INT 2
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 4
54388: PUSH
54389: LD_INT 2
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 2
54398: PUSH
54399: LD_INT 4
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 0
54408: PUSH
54409: LD_INT 4
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 0
54418: PUSH
54419: LD_INT 3
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 1
54428: PUSH
54429: LD_INT 4
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 1
54438: PUSH
54439: LD_INT 5
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: LD_INT 5
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 1
54458: NEG
54459: PUSH
54460: LD_INT 4
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 1
54469: NEG
54470: PUSH
54471: LD_INT 3
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 2
54480: PUSH
54481: LD_INT 5
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 2
54490: NEG
54491: PUSH
54492: LD_INT 3
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 3
54501: NEG
54502: PUSH
54503: LD_INT 0
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 3
54512: NEG
54513: PUSH
54514: LD_INT 1
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 2
54524: NEG
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 2
54535: NEG
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 3
54546: NEG
54547: PUSH
54548: LD_INT 1
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 4
54557: NEG
54558: PUSH
54559: LD_INT 0
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 4
54568: NEG
54569: PUSH
54570: LD_INT 1
54572: NEG
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 4
54580: NEG
54581: PUSH
54582: LD_INT 2
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 2
54592: NEG
54593: PUSH
54594: LD_INT 2
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 4
54603: NEG
54604: PUSH
54605: LD_INT 4
54607: NEG
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 4
54615: NEG
54616: PUSH
54617: LD_INT 5
54619: NEG
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 3
54627: NEG
54628: PUSH
54629: LD_INT 4
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 3
54639: NEG
54640: PUSH
54641: LD_INT 3
54643: NEG
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 4
54651: NEG
54652: PUSH
54653: LD_INT 3
54655: NEG
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 5
54663: NEG
54664: PUSH
54665: LD_INT 4
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 5
54675: NEG
54676: PUSH
54677: LD_INT 5
54679: NEG
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 3
54687: NEG
54688: PUSH
54689: LD_INT 5
54691: NEG
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 5
54699: NEG
54700: PUSH
54701: LD_INT 3
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54756: LD_ADDR_VAR 0 30
54760: PUSH
54761: LD_INT 4
54763: PUSH
54764: LD_INT 4
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 4
54773: PUSH
54774: LD_INT 3
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 5
54783: PUSH
54784: LD_INT 4
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 5
54793: PUSH
54794: LD_INT 5
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 4
54803: PUSH
54804: LD_INT 5
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 3
54813: PUSH
54814: LD_INT 4
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 3
54823: PUSH
54824: LD_INT 3
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 5
54833: PUSH
54834: LD_INT 3
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 3
54843: PUSH
54844: LD_INT 5
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: LD_INT 3
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 0
54863: PUSH
54864: LD_INT 2
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 1
54873: PUSH
54874: LD_INT 3
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 1
54883: PUSH
54884: LD_INT 4
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 0
54893: PUSH
54894: LD_INT 4
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 1
54903: NEG
54904: PUSH
54905: LD_INT 3
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: LD_INT 2
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 2
54925: PUSH
54926: LD_INT 4
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 2
54935: NEG
54936: PUSH
54937: LD_INT 2
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 4
54946: NEG
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 4
54957: NEG
54958: PUSH
54959: LD_INT 1
54961: NEG
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 3
54969: NEG
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 3
54980: NEG
54981: PUSH
54982: LD_INT 1
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 4
54991: NEG
54992: PUSH
54993: LD_INT 1
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 5
55002: NEG
55003: PUSH
55004: LD_INT 0
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 5
55013: NEG
55014: PUSH
55015: LD_INT 1
55017: NEG
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 5
55025: NEG
55026: PUSH
55027: LD_INT 2
55029: NEG
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 3
55037: NEG
55038: PUSH
55039: LD_INT 2
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 3
55048: NEG
55049: PUSH
55050: LD_INT 3
55052: NEG
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 3
55060: NEG
55061: PUSH
55062: LD_INT 4
55064: NEG
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 2
55072: NEG
55073: PUSH
55074: LD_INT 3
55076: NEG
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 2
55084: NEG
55085: PUSH
55086: LD_INT 2
55088: NEG
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 3
55096: NEG
55097: PUSH
55098: LD_INT 2
55100: NEG
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 4
55108: NEG
55109: PUSH
55110: LD_INT 3
55112: NEG
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 4
55120: NEG
55121: PUSH
55122: LD_INT 4
55124: NEG
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 2
55132: NEG
55133: PUSH
55134: LD_INT 4
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 4
55144: NEG
55145: PUSH
55146: LD_INT 2
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: LD_INT 4
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: LD_INT 5
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 1
55178: PUSH
55179: LD_INT 4
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: LD_INT 3
55192: NEG
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: LD_INT 3
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: LD_INT 4
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 1
55223: NEG
55224: PUSH
55225: LD_INT 5
55227: NEG
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 2
55235: PUSH
55236: LD_INT 3
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 2
55246: NEG
55247: PUSH
55248: LD_INT 5
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55303: LD_ADDR_VAR 0 31
55307: PUSH
55308: LD_INT 0
55310: PUSH
55311: LD_INT 4
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 0
55320: PUSH
55321: LD_INT 3
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 1
55330: PUSH
55331: LD_INT 4
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 1
55340: PUSH
55341: LD_INT 5
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 0
55350: PUSH
55351: LD_INT 5
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 1
55360: NEG
55361: PUSH
55362: LD_INT 4
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 1
55371: NEG
55372: PUSH
55373: LD_INT 3
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 2
55382: PUSH
55383: LD_INT 5
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 2
55392: NEG
55393: PUSH
55394: LD_INT 3
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 3
55403: NEG
55404: PUSH
55405: LD_INT 0
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 3
55414: NEG
55415: PUSH
55416: LD_INT 1
55418: NEG
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 2
55426: NEG
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 2
55437: NEG
55438: PUSH
55439: LD_INT 1
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 3
55448: NEG
55449: PUSH
55450: LD_INT 1
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 4
55459: NEG
55460: PUSH
55461: LD_INT 0
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 4
55470: NEG
55471: PUSH
55472: LD_INT 1
55474: NEG
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 4
55482: NEG
55483: PUSH
55484: LD_INT 2
55486: NEG
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 2
55494: NEG
55495: PUSH
55496: LD_INT 2
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 4
55505: NEG
55506: PUSH
55507: LD_INT 4
55509: NEG
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 4
55517: NEG
55518: PUSH
55519: LD_INT 5
55521: NEG
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 3
55529: NEG
55530: PUSH
55531: LD_INT 4
55533: NEG
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 3
55541: NEG
55542: PUSH
55543: LD_INT 3
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 4
55553: NEG
55554: PUSH
55555: LD_INT 3
55557: NEG
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 5
55565: NEG
55566: PUSH
55567: LD_INT 4
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 5
55577: NEG
55578: PUSH
55579: LD_INT 5
55581: NEG
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 3
55589: NEG
55590: PUSH
55591: LD_INT 5
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 5
55601: NEG
55602: PUSH
55603: LD_INT 3
55605: NEG
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: LD_INT 3
55616: NEG
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 0
55624: PUSH
55625: LD_INT 4
55627: NEG
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 1
55635: PUSH
55636: LD_INT 3
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: LD_INT 2
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 0
55657: PUSH
55658: LD_INT 2
55660: NEG
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 1
55668: NEG
55669: PUSH
55670: LD_INT 3
55672: NEG
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: LD_INT 4
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 2
55692: PUSH
55693: LD_INT 2
55695: NEG
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 2
55703: NEG
55704: PUSH
55705: LD_INT 4
55707: NEG
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 4
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 4
55725: PUSH
55726: LD_INT 1
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 5
55736: PUSH
55737: LD_INT 0
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 5
55746: PUSH
55747: LD_INT 1
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 4
55756: PUSH
55757: LD_INT 1
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 3
55766: PUSH
55767: LD_INT 0
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 3
55776: PUSH
55777: LD_INT 1
55779: NEG
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 3
55787: PUSH
55788: LD_INT 2
55790: NEG
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 5
55798: PUSH
55799: LD_INT 2
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55853: LD_ADDR_VAR 0 32
55857: PUSH
55858: LD_INT 4
55860: NEG
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 4
55871: NEG
55872: PUSH
55873: LD_INT 1
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 3
55883: NEG
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 3
55894: NEG
55895: PUSH
55896: LD_INT 1
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 4
55905: NEG
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 5
55916: NEG
55917: PUSH
55918: LD_INT 0
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 5
55927: NEG
55928: PUSH
55929: LD_INT 1
55931: NEG
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 5
55939: NEG
55940: PUSH
55941: LD_INT 2
55943: NEG
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 3
55951: NEG
55952: PUSH
55953: LD_INT 2
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 3
55962: NEG
55963: PUSH
55964: LD_INT 3
55966: NEG
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 3
55974: NEG
55975: PUSH
55976: LD_INT 4
55978: NEG
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 2
55986: NEG
55987: PUSH
55988: LD_INT 3
55990: NEG
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 2
55998: NEG
55999: PUSH
56000: LD_INT 2
56002: NEG
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 3
56010: NEG
56011: PUSH
56012: LD_INT 2
56014: NEG
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 4
56022: NEG
56023: PUSH
56024: LD_INT 3
56026: NEG
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 4
56034: NEG
56035: PUSH
56036: LD_INT 4
56038: NEG
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 2
56046: NEG
56047: PUSH
56048: LD_INT 4
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 4
56058: NEG
56059: PUSH
56060: LD_INT 2
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: LD_INT 4
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 0
56081: PUSH
56082: LD_INT 5
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 1
56092: PUSH
56093: LD_INT 4
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 1
56103: PUSH
56104: LD_INT 3
56106: NEG
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: LD_INT 3
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 1
56125: NEG
56126: PUSH
56127: LD_INT 4
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 1
56137: NEG
56138: PUSH
56139: LD_INT 5
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 2
56149: PUSH
56150: LD_INT 3
56152: NEG
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 2
56160: NEG
56161: PUSH
56162: LD_INT 5
56164: NEG
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 3
56172: PUSH
56173: LD_INT 0
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 3
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 4
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 4
56203: PUSH
56204: LD_INT 1
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 3
56213: PUSH
56214: LD_INT 1
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 2
56223: PUSH
56224: LD_INT 0
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 2
56233: PUSH
56234: LD_INT 1
56236: NEG
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 2
56244: PUSH
56245: LD_INT 2
56247: NEG
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 4
56255: PUSH
56256: LD_INT 2
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 4
56265: PUSH
56266: LD_INT 4
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 4
56275: PUSH
56276: LD_INT 3
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 5
56285: PUSH
56286: LD_INT 4
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 5
56295: PUSH
56296: LD_INT 5
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 4
56305: PUSH
56306: LD_INT 5
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 3
56315: PUSH
56316: LD_INT 4
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 3
56325: PUSH
56326: LD_INT 3
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 5
56335: PUSH
56336: LD_INT 3
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 3
56345: PUSH
56346: LD_INT 5
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56400: LD_ADDR_VAR 0 33
56404: PUSH
56405: LD_INT 4
56407: NEG
56408: PUSH
56409: LD_INT 4
56411: NEG
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 4
56419: NEG
56420: PUSH
56421: LD_INT 5
56423: NEG
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 3
56431: NEG
56432: PUSH
56433: LD_INT 4
56435: NEG
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 3
56443: NEG
56444: PUSH
56445: LD_INT 3
56447: NEG
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 4
56455: NEG
56456: PUSH
56457: LD_INT 3
56459: NEG
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 5
56467: NEG
56468: PUSH
56469: LD_INT 4
56471: NEG
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 5
56479: NEG
56480: PUSH
56481: LD_INT 5
56483: NEG
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 3
56491: NEG
56492: PUSH
56493: LD_INT 5
56495: NEG
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 5
56503: NEG
56504: PUSH
56505: LD_INT 3
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 0
56515: PUSH
56516: LD_INT 3
56518: NEG
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 0
56526: PUSH
56527: LD_INT 4
56529: NEG
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 1
56537: PUSH
56538: LD_INT 3
56540: NEG
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 1
56548: PUSH
56549: LD_INT 2
56551: NEG
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 0
56559: PUSH
56560: LD_INT 2
56562: NEG
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 1
56570: NEG
56571: PUSH
56572: LD_INT 3
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 1
56582: NEG
56583: PUSH
56584: LD_INT 4
56586: NEG
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 2
56594: PUSH
56595: LD_INT 2
56597: NEG
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 2
56605: NEG
56606: PUSH
56607: LD_INT 4
56609: NEG
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 4
56617: PUSH
56618: LD_INT 0
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 4
56627: PUSH
56628: LD_INT 1
56630: NEG
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 5
56638: PUSH
56639: LD_INT 0
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 5
56648: PUSH
56649: LD_INT 1
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 4
56658: PUSH
56659: LD_INT 1
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 3
56668: PUSH
56669: LD_INT 0
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 3
56678: PUSH
56679: LD_INT 1
56681: NEG
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 3
56689: PUSH
56690: LD_INT 2
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 5
56700: PUSH
56701: LD_INT 2
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 3
56710: PUSH
56711: LD_INT 3
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 3
56720: PUSH
56721: LD_INT 2
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 4
56730: PUSH
56731: LD_INT 3
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 4
56740: PUSH
56741: LD_INT 4
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 3
56750: PUSH
56751: LD_INT 4
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 2
56760: PUSH
56761: LD_INT 3
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 2
56770: PUSH
56771: LD_INT 2
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 4
56780: PUSH
56781: LD_INT 2
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 2
56790: PUSH
56791: LD_INT 4
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: LD_INT 4
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 0
56810: PUSH
56811: LD_INT 3
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 1
56820: PUSH
56821: LD_INT 4
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 1
56830: PUSH
56831: LD_INT 5
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 0
56840: PUSH
56841: LD_INT 5
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 1
56850: NEG
56851: PUSH
56852: LD_INT 4
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 1
56861: NEG
56862: PUSH
56863: LD_INT 3
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 2
56872: PUSH
56873: LD_INT 5
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 2
56882: NEG
56883: PUSH
56884: LD_INT 3
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56938: LD_ADDR_VAR 0 34
56942: PUSH
56943: LD_INT 0
56945: PUSH
56946: LD_INT 4
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: LD_INT 5
56959: NEG
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 1
56967: PUSH
56968: LD_INT 4
56970: NEG
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 1
56978: PUSH
56979: LD_INT 3
56981: NEG
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 0
56989: PUSH
56990: LD_INT 3
56992: NEG
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 1
57000: NEG
57001: PUSH
57002: LD_INT 4
57004: NEG
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 1
57012: NEG
57013: PUSH
57014: LD_INT 5
57016: NEG
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 2
57024: PUSH
57025: LD_INT 3
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 2
57035: NEG
57036: PUSH
57037: LD_INT 5
57039: NEG
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 3
57047: PUSH
57048: LD_INT 0
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 3
57057: PUSH
57058: LD_INT 1
57060: NEG
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 4
57068: PUSH
57069: LD_INT 0
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 4
57078: PUSH
57079: LD_INT 1
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 3
57088: PUSH
57089: LD_INT 1
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 2
57098: PUSH
57099: LD_INT 0
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 2
57108: PUSH
57109: LD_INT 1
57111: NEG
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 2
57119: PUSH
57120: LD_INT 2
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 4
57130: PUSH
57131: LD_INT 2
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 4
57140: PUSH
57141: LD_INT 4
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 4
57150: PUSH
57151: LD_INT 3
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 5
57160: PUSH
57161: LD_INT 4
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 5
57170: PUSH
57171: LD_INT 5
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 4
57180: PUSH
57181: LD_INT 5
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 3
57190: PUSH
57191: LD_INT 4
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 3
57200: PUSH
57201: LD_INT 3
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 5
57210: PUSH
57211: LD_INT 3
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 3
57220: PUSH
57221: LD_INT 5
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: LD_INT 3
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: LD_INT 2
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 1
57250: PUSH
57251: LD_INT 3
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 1
57260: PUSH
57261: LD_INT 4
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 0
57270: PUSH
57271: LD_INT 4
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 1
57280: NEG
57281: PUSH
57282: LD_INT 3
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 1
57291: NEG
57292: PUSH
57293: LD_INT 2
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 2
57302: PUSH
57303: LD_INT 4
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 2
57312: NEG
57313: PUSH
57314: LD_INT 2
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 4
57323: NEG
57324: PUSH
57325: LD_INT 0
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 4
57334: NEG
57335: PUSH
57336: LD_INT 1
57338: NEG
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 3
57346: NEG
57347: PUSH
57348: LD_INT 0
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 3
57357: NEG
57358: PUSH
57359: LD_INT 1
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 4
57368: NEG
57369: PUSH
57370: LD_INT 1
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 5
57379: NEG
57380: PUSH
57381: LD_INT 0
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 5
57390: NEG
57391: PUSH
57392: LD_INT 1
57394: NEG
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 5
57402: NEG
57403: PUSH
57404: LD_INT 2
57406: NEG
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 3
57414: NEG
57415: PUSH
57416: LD_INT 2
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: ST_TO_ADDR
// end ; end ;
57470: GO 57473
57472: POP
// case btype of b_depot , b_warehouse :
57473: LD_VAR 0 1
57477: PUSH
57478: LD_INT 0
57480: DOUBLE
57481: EQUAL
57482: IFTRUE 57492
57484: LD_INT 1
57486: DOUBLE
57487: EQUAL
57488: IFTRUE 57492
57490: GO 57693
57492: POP
// case nation of nation_american :
57493: LD_VAR 0 5
57497: PUSH
57498: LD_INT 1
57500: DOUBLE
57501: EQUAL
57502: IFTRUE 57506
57504: GO 57562
57506: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57507: LD_ADDR_VAR 0 9
57511: PUSH
57512: LD_VAR 0 11
57516: PUSH
57517: LD_VAR 0 12
57521: PUSH
57522: LD_VAR 0 13
57526: PUSH
57527: LD_VAR 0 14
57531: PUSH
57532: LD_VAR 0 15
57536: PUSH
57537: LD_VAR 0 16
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: PUSH
57550: LD_VAR 0 4
57554: PUSH
57555: LD_INT 1
57557: PLUS
57558: ARRAY
57559: ST_TO_ADDR
57560: GO 57691
57562: LD_INT 2
57564: DOUBLE
57565: EQUAL
57566: IFTRUE 57570
57568: GO 57626
57570: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57571: LD_ADDR_VAR 0 9
57575: PUSH
57576: LD_VAR 0 17
57580: PUSH
57581: LD_VAR 0 18
57585: PUSH
57586: LD_VAR 0 19
57590: PUSH
57591: LD_VAR 0 20
57595: PUSH
57596: LD_VAR 0 21
57600: PUSH
57601: LD_VAR 0 22
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: PUSH
57614: LD_VAR 0 4
57618: PUSH
57619: LD_INT 1
57621: PLUS
57622: ARRAY
57623: ST_TO_ADDR
57624: GO 57691
57626: LD_INT 3
57628: DOUBLE
57629: EQUAL
57630: IFTRUE 57634
57632: GO 57690
57634: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57635: LD_ADDR_VAR 0 9
57639: PUSH
57640: LD_VAR 0 23
57644: PUSH
57645: LD_VAR 0 24
57649: PUSH
57650: LD_VAR 0 25
57654: PUSH
57655: LD_VAR 0 26
57659: PUSH
57660: LD_VAR 0 27
57664: PUSH
57665: LD_VAR 0 28
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: PUSH
57678: LD_VAR 0 4
57682: PUSH
57683: LD_INT 1
57685: PLUS
57686: ARRAY
57687: ST_TO_ADDR
57688: GO 57691
57690: POP
57691: GO 58246
57693: LD_INT 2
57695: DOUBLE
57696: EQUAL
57697: IFTRUE 57707
57699: LD_INT 3
57701: DOUBLE
57702: EQUAL
57703: IFTRUE 57707
57705: GO 57763
57707: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57708: LD_ADDR_VAR 0 9
57712: PUSH
57713: LD_VAR 0 29
57717: PUSH
57718: LD_VAR 0 30
57722: PUSH
57723: LD_VAR 0 31
57727: PUSH
57728: LD_VAR 0 32
57732: PUSH
57733: LD_VAR 0 33
57737: PUSH
57738: LD_VAR 0 34
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: PUSH
57751: LD_VAR 0 4
57755: PUSH
57756: LD_INT 1
57758: PLUS
57759: ARRAY
57760: ST_TO_ADDR
57761: GO 58246
57763: LD_INT 16
57765: DOUBLE
57766: EQUAL
57767: IFTRUE 57825
57769: LD_INT 17
57771: DOUBLE
57772: EQUAL
57773: IFTRUE 57825
57775: LD_INT 18
57777: DOUBLE
57778: EQUAL
57779: IFTRUE 57825
57781: LD_INT 19
57783: DOUBLE
57784: EQUAL
57785: IFTRUE 57825
57787: LD_INT 22
57789: DOUBLE
57790: EQUAL
57791: IFTRUE 57825
57793: LD_INT 20
57795: DOUBLE
57796: EQUAL
57797: IFTRUE 57825
57799: LD_INT 21
57801: DOUBLE
57802: EQUAL
57803: IFTRUE 57825
57805: LD_INT 23
57807: DOUBLE
57808: EQUAL
57809: IFTRUE 57825
57811: LD_INT 24
57813: DOUBLE
57814: EQUAL
57815: IFTRUE 57825
57817: LD_INT 25
57819: DOUBLE
57820: EQUAL
57821: IFTRUE 57825
57823: GO 57881
57825: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57826: LD_ADDR_VAR 0 9
57830: PUSH
57831: LD_VAR 0 35
57835: PUSH
57836: LD_VAR 0 36
57840: PUSH
57841: LD_VAR 0 37
57845: PUSH
57846: LD_VAR 0 38
57850: PUSH
57851: LD_VAR 0 39
57855: PUSH
57856: LD_VAR 0 40
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: PUSH
57869: LD_VAR 0 4
57873: PUSH
57874: LD_INT 1
57876: PLUS
57877: ARRAY
57878: ST_TO_ADDR
57879: GO 58246
57881: LD_INT 6
57883: DOUBLE
57884: EQUAL
57885: IFTRUE 57937
57887: LD_INT 7
57889: DOUBLE
57890: EQUAL
57891: IFTRUE 57937
57893: LD_INT 8
57895: DOUBLE
57896: EQUAL
57897: IFTRUE 57937
57899: LD_INT 13
57901: DOUBLE
57902: EQUAL
57903: IFTRUE 57937
57905: LD_INT 12
57907: DOUBLE
57908: EQUAL
57909: IFTRUE 57937
57911: LD_INT 15
57913: DOUBLE
57914: EQUAL
57915: IFTRUE 57937
57917: LD_INT 11
57919: DOUBLE
57920: EQUAL
57921: IFTRUE 57937
57923: LD_INT 14
57925: DOUBLE
57926: EQUAL
57927: IFTRUE 57937
57929: LD_INT 10
57931: DOUBLE
57932: EQUAL
57933: IFTRUE 57937
57935: GO 57993
57937: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57938: LD_ADDR_VAR 0 9
57942: PUSH
57943: LD_VAR 0 41
57947: PUSH
57948: LD_VAR 0 42
57952: PUSH
57953: LD_VAR 0 43
57957: PUSH
57958: LD_VAR 0 44
57962: PUSH
57963: LD_VAR 0 45
57967: PUSH
57968: LD_VAR 0 46
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: PUSH
57981: LD_VAR 0 4
57985: PUSH
57986: LD_INT 1
57988: PLUS
57989: ARRAY
57990: ST_TO_ADDR
57991: GO 58246
57993: LD_INT 36
57995: DOUBLE
57996: EQUAL
57997: IFTRUE 58001
57999: GO 58057
58001: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58002: LD_ADDR_VAR 0 9
58006: PUSH
58007: LD_VAR 0 47
58011: PUSH
58012: LD_VAR 0 48
58016: PUSH
58017: LD_VAR 0 49
58021: PUSH
58022: LD_VAR 0 50
58026: PUSH
58027: LD_VAR 0 51
58031: PUSH
58032: LD_VAR 0 52
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: PUSH
58045: LD_VAR 0 4
58049: PUSH
58050: LD_INT 1
58052: PLUS
58053: ARRAY
58054: ST_TO_ADDR
58055: GO 58246
58057: LD_INT 4
58059: DOUBLE
58060: EQUAL
58061: IFTRUE 58083
58063: LD_INT 5
58065: DOUBLE
58066: EQUAL
58067: IFTRUE 58083
58069: LD_INT 34
58071: DOUBLE
58072: EQUAL
58073: IFTRUE 58083
58075: LD_INT 37
58077: DOUBLE
58078: EQUAL
58079: IFTRUE 58083
58081: GO 58139
58083: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58084: LD_ADDR_VAR 0 9
58088: PUSH
58089: LD_VAR 0 53
58093: PUSH
58094: LD_VAR 0 54
58098: PUSH
58099: LD_VAR 0 55
58103: PUSH
58104: LD_VAR 0 56
58108: PUSH
58109: LD_VAR 0 57
58113: PUSH
58114: LD_VAR 0 58
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: PUSH
58127: LD_VAR 0 4
58131: PUSH
58132: LD_INT 1
58134: PLUS
58135: ARRAY
58136: ST_TO_ADDR
58137: GO 58246
58139: LD_INT 31
58141: DOUBLE
58142: EQUAL
58143: IFTRUE 58189
58145: LD_INT 32
58147: DOUBLE
58148: EQUAL
58149: IFTRUE 58189
58151: LD_INT 33
58153: DOUBLE
58154: EQUAL
58155: IFTRUE 58189
58157: LD_INT 27
58159: DOUBLE
58160: EQUAL
58161: IFTRUE 58189
58163: LD_INT 26
58165: DOUBLE
58166: EQUAL
58167: IFTRUE 58189
58169: LD_INT 28
58171: DOUBLE
58172: EQUAL
58173: IFTRUE 58189
58175: LD_INT 29
58177: DOUBLE
58178: EQUAL
58179: IFTRUE 58189
58181: LD_INT 30
58183: DOUBLE
58184: EQUAL
58185: IFTRUE 58189
58187: GO 58245
58189: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58190: LD_ADDR_VAR 0 9
58194: PUSH
58195: LD_VAR 0 59
58199: PUSH
58200: LD_VAR 0 60
58204: PUSH
58205: LD_VAR 0 61
58209: PUSH
58210: LD_VAR 0 62
58214: PUSH
58215: LD_VAR 0 63
58219: PUSH
58220: LD_VAR 0 64
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: PUSH
58233: LD_VAR 0 4
58237: PUSH
58238: LD_INT 1
58240: PLUS
58241: ARRAY
58242: ST_TO_ADDR
58243: GO 58246
58245: POP
// temp_list2 = [ ] ;
58246: LD_ADDR_VAR 0 10
58250: PUSH
58251: EMPTY
58252: ST_TO_ADDR
// for i in temp_list do
58253: LD_ADDR_VAR 0 8
58257: PUSH
58258: LD_VAR 0 9
58262: PUSH
58263: FOR_IN
58264: IFFALSE 58316
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58266: LD_ADDR_VAR 0 10
58270: PUSH
58271: LD_VAR 0 10
58275: PUSH
58276: LD_VAR 0 8
58280: PUSH
58281: LD_INT 1
58283: ARRAY
58284: PUSH
58285: LD_VAR 0 2
58289: PLUS
58290: PUSH
58291: LD_VAR 0 8
58295: PUSH
58296: LD_INT 2
58298: ARRAY
58299: PUSH
58300: LD_VAR 0 3
58304: PLUS
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: EMPTY
58311: LIST
58312: ADD
58313: ST_TO_ADDR
58314: GO 58263
58316: POP
58317: POP
// result = temp_list2 ;
58318: LD_ADDR_VAR 0 7
58322: PUSH
58323: LD_VAR 0 10
58327: ST_TO_ADDR
// end ;
58328: LD_VAR 0 7
58332: RET
// export function EnemyInRange ( unit , dist ) ; begin
58333: LD_INT 0
58335: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58336: LD_ADDR_VAR 0 3
58340: PUSH
58341: LD_VAR 0 1
58345: PPUSH
58346: CALL_OW 255
58350: PPUSH
58351: LD_VAR 0 1
58355: PPUSH
58356: CALL_OW 250
58360: PPUSH
58361: LD_VAR 0 1
58365: PPUSH
58366: CALL_OW 251
58370: PPUSH
58371: LD_VAR 0 2
58375: PPUSH
58376: CALL 31735 0 4
58380: PUSH
58381: LD_INT 4
58383: ARRAY
58384: ST_TO_ADDR
// end ;
58385: LD_VAR 0 3
58389: RET
// export function PlayerSeeMe ( unit ) ; begin
58390: LD_INT 0
58392: PPUSH
// result := See ( your_side , unit ) ;
58393: LD_ADDR_VAR 0 2
58397: PUSH
58398: LD_OWVAR 2
58402: PPUSH
58403: LD_VAR 0 1
58407: PPUSH
58408: CALL_OW 292
58412: ST_TO_ADDR
// end ;
58413: LD_VAR 0 2
58417: RET
// export function ReverseDir ( unit ) ; begin
58418: LD_INT 0
58420: PPUSH
// if not unit then
58421: LD_VAR 0 1
58425: NOT
58426: IFFALSE 58430
// exit ;
58428: GO 58453
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58430: LD_ADDR_VAR 0 2
58434: PUSH
58435: LD_VAR 0 1
58439: PPUSH
58440: CALL_OW 254
58444: PUSH
58445: LD_INT 3
58447: PLUS
58448: PUSH
58449: LD_INT 6
58451: MOD
58452: ST_TO_ADDR
// end ;
58453: LD_VAR 0 2
58457: RET
// export function ReverseArray ( array ) ; var i ; begin
58458: LD_INT 0
58460: PPUSH
58461: PPUSH
// if not array then
58462: LD_VAR 0 1
58466: NOT
58467: IFFALSE 58471
// exit ;
58469: GO 58526
// result := [ ] ;
58471: LD_ADDR_VAR 0 2
58475: PUSH
58476: EMPTY
58477: ST_TO_ADDR
// for i := array downto 1 do
58478: LD_ADDR_VAR 0 3
58482: PUSH
58483: DOUBLE
58484: LD_VAR 0 1
58488: INC
58489: ST_TO_ADDR
58490: LD_INT 1
58492: PUSH
58493: FOR_DOWNTO
58494: IFFALSE 58524
// result := Join ( result , array [ i ] ) ;
58496: LD_ADDR_VAR 0 2
58500: PUSH
58501: LD_VAR 0 2
58505: PPUSH
58506: LD_VAR 0 1
58510: PUSH
58511: LD_VAR 0 3
58515: ARRAY
58516: PPUSH
58517: CALL 63151 0 2
58521: ST_TO_ADDR
58522: GO 58493
58524: POP
58525: POP
// end ;
58526: LD_VAR 0 2
58530: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
58531: LD_INT 0
58533: PPUSH
58534: PPUSH
58535: PPUSH
58536: PPUSH
58537: PPUSH
58538: PPUSH
// if not unit or not hexes then
58539: LD_VAR 0 1
58543: NOT
58544: PUSH
58545: LD_VAR 0 2
58549: NOT
58550: OR
58551: IFFALSE 58555
// exit ;
58553: GO 58678
// dist := 9999 ;
58555: LD_ADDR_VAR 0 5
58559: PUSH
58560: LD_INT 9999
58562: ST_TO_ADDR
// for i = 1 to hexes do
58563: LD_ADDR_VAR 0 4
58567: PUSH
58568: DOUBLE
58569: LD_INT 1
58571: DEC
58572: ST_TO_ADDR
58573: LD_VAR 0 2
58577: PUSH
58578: FOR_TO
58579: IFFALSE 58666
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58581: LD_ADDR_VAR 0 6
58585: PUSH
58586: LD_VAR 0 1
58590: PPUSH
58591: LD_VAR 0 2
58595: PUSH
58596: LD_VAR 0 4
58600: ARRAY
58601: PUSH
58602: LD_INT 1
58604: ARRAY
58605: PPUSH
58606: LD_VAR 0 2
58610: PUSH
58611: LD_VAR 0 4
58615: ARRAY
58616: PUSH
58617: LD_INT 2
58619: ARRAY
58620: PPUSH
58621: CALL_OW 297
58625: ST_TO_ADDR
// if tdist < dist then
58626: LD_VAR 0 6
58630: PUSH
58631: LD_VAR 0 5
58635: LESS
58636: IFFALSE 58664
// begin hex := hexes [ i ] ;
58638: LD_ADDR_VAR 0 8
58642: PUSH
58643: LD_VAR 0 2
58647: PUSH
58648: LD_VAR 0 4
58652: ARRAY
58653: ST_TO_ADDR
// dist := tdist ;
58654: LD_ADDR_VAR 0 5
58658: PUSH
58659: LD_VAR 0 6
58663: ST_TO_ADDR
// end ; end ;
58664: GO 58578
58666: POP
58667: POP
// result := hex ;
58668: LD_ADDR_VAR 0 3
58672: PUSH
58673: LD_VAR 0 8
58677: ST_TO_ADDR
// end ;
58678: LD_VAR 0 3
58682: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58683: LD_INT 0
58685: PPUSH
58686: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58687: LD_VAR 0 1
58691: NOT
58692: PUSH
58693: LD_VAR 0 1
58697: PUSH
58698: LD_INT 21
58700: PUSH
58701: LD_INT 2
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 23
58710: PUSH
58711: LD_INT 2
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PPUSH
58722: CALL_OW 69
58726: IN
58727: NOT
58728: OR
58729: IFFALSE 58733
// exit ;
58731: GO 58780
// for i = 1 to 3 do
58733: LD_ADDR_VAR 0 3
58737: PUSH
58738: DOUBLE
58739: LD_INT 1
58741: DEC
58742: ST_TO_ADDR
58743: LD_INT 3
58745: PUSH
58746: FOR_TO
58747: IFFALSE 58778
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58749: LD_VAR 0 1
58753: PPUSH
58754: CALL_OW 250
58758: PPUSH
58759: LD_VAR 0 1
58763: PPUSH
58764: CALL_OW 251
58768: PPUSH
58769: LD_INT 1
58771: PPUSH
58772: CALL_OW 453
58776: GO 58746
58778: POP
58779: POP
// end ;
58780: LD_VAR 0 2
58784: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58785: LD_INT 0
58787: PPUSH
58788: PPUSH
58789: PPUSH
58790: PPUSH
58791: PPUSH
58792: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58793: LD_VAR 0 1
58797: NOT
58798: PUSH
58799: LD_VAR 0 2
58803: NOT
58804: OR
58805: PUSH
58806: LD_VAR 0 1
58810: PPUSH
58811: CALL_OW 314
58815: OR
58816: IFFALSE 58820
// exit ;
58818: GO 59261
// x := GetX ( enemy_unit ) ;
58820: LD_ADDR_VAR 0 7
58824: PUSH
58825: LD_VAR 0 2
58829: PPUSH
58830: CALL_OW 250
58834: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58835: LD_ADDR_VAR 0 8
58839: PUSH
58840: LD_VAR 0 2
58844: PPUSH
58845: CALL_OW 251
58849: ST_TO_ADDR
// if not x or not y then
58850: LD_VAR 0 7
58854: NOT
58855: PUSH
58856: LD_VAR 0 8
58860: NOT
58861: OR
58862: IFFALSE 58866
// exit ;
58864: GO 59261
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58866: LD_ADDR_VAR 0 6
58870: PUSH
58871: LD_VAR 0 7
58875: PPUSH
58876: LD_INT 0
58878: PPUSH
58879: LD_INT 4
58881: PPUSH
58882: CALL_OW 272
58886: PUSH
58887: LD_VAR 0 8
58891: PPUSH
58892: LD_INT 0
58894: PPUSH
58895: LD_INT 4
58897: PPUSH
58898: CALL_OW 273
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_VAR 0 7
58911: PPUSH
58912: LD_INT 1
58914: PPUSH
58915: LD_INT 4
58917: PPUSH
58918: CALL_OW 272
58922: PUSH
58923: LD_VAR 0 8
58927: PPUSH
58928: LD_INT 1
58930: PPUSH
58931: LD_INT 4
58933: PPUSH
58934: CALL_OW 273
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_VAR 0 7
58947: PPUSH
58948: LD_INT 2
58950: PPUSH
58951: LD_INT 4
58953: PPUSH
58954: CALL_OW 272
58958: PUSH
58959: LD_VAR 0 8
58963: PPUSH
58964: LD_INT 2
58966: PPUSH
58967: LD_INT 4
58969: PPUSH
58970: CALL_OW 273
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_VAR 0 7
58983: PPUSH
58984: LD_INT 3
58986: PPUSH
58987: LD_INT 4
58989: PPUSH
58990: CALL_OW 272
58994: PUSH
58995: LD_VAR 0 8
58999: PPUSH
59000: LD_INT 3
59002: PPUSH
59003: LD_INT 4
59005: PPUSH
59006: CALL_OW 273
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_VAR 0 7
59019: PPUSH
59020: LD_INT 4
59022: PPUSH
59023: LD_INT 4
59025: PPUSH
59026: CALL_OW 272
59030: PUSH
59031: LD_VAR 0 8
59035: PPUSH
59036: LD_INT 4
59038: PPUSH
59039: LD_INT 4
59041: PPUSH
59042: CALL_OW 273
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_VAR 0 7
59055: PPUSH
59056: LD_INT 5
59058: PPUSH
59059: LD_INT 4
59061: PPUSH
59062: CALL_OW 272
59066: PUSH
59067: LD_VAR 0 8
59071: PPUSH
59072: LD_INT 5
59074: PPUSH
59075: LD_INT 4
59077: PPUSH
59078: CALL_OW 273
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: ST_TO_ADDR
// for i = tmp downto 1 do
59095: LD_ADDR_VAR 0 4
59099: PUSH
59100: DOUBLE
59101: LD_VAR 0 6
59105: INC
59106: ST_TO_ADDR
59107: LD_INT 1
59109: PUSH
59110: FOR_DOWNTO
59111: IFFALSE 59212
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59113: LD_VAR 0 6
59117: PUSH
59118: LD_VAR 0 4
59122: ARRAY
59123: PUSH
59124: LD_INT 1
59126: ARRAY
59127: PPUSH
59128: LD_VAR 0 6
59132: PUSH
59133: LD_VAR 0 4
59137: ARRAY
59138: PUSH
59139: LD_INT 2
59141: ARRAY
59142: PPUSH
59143: CALL_OW 488
59147: NOT
59148: PUSH
59149: LD_VAR 0 6
59153: PUSH
59154: LD_VAR 0 4
59158: ARRAY
59159: PUSH
59160: LD_INT 1
59162: ARRAY
59163: PPUSH
59164: LD_VAR 0 6
59168: PUSH
59169: LD_VAR 0 4
59173: ARRAY
59174: PUSH
59175: LD_INT 2
59177: ARRAY
59178: PPUSH
59179: CALL_OW 428
59183: PUSH
59184: LD_INT 0
59186: NONEQUAL
59187: OR
59188: IFFALSE 59210
// tmp := Delete ( tmp , i ) ;
59190: LD_ADDR_VAR 0 6
59194: PUSH
59195: LD_VAR 0 6
59199: PPUSH
59200: LD_VAR 0 4
59204: PPUSH
59205: CALL_OW 3
59209: ST_TO_ADDR
59210: GO 59110
59212: POP
59213: POP
// j := GetClosestHex ( unit , tmp ) ;
59214: LD_ADDR_VAR 0 5
59218: PUSH
59219: LD_VAR 0 1
59223: PPUSH
59224: LD_VAR 0 6
59228: PPUSH
59229: CALL 58531 0 2
59233: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59234: LD_VAR 0 1
59238: PPUSH
59239: LD_VAR 0 5
59243: PUSH
59244: LD_INT 1
59246: ARRAY
59247: PPUSH
59248: LD_VAR 0 5
59252: PUSH
59253: LD_INT 2
59255: ARRAY
59256: PPUSH
59257: CALL_OW 111
// end ;
59261: LD_VAR 0 3
59265: RET
// export function PrepareApemanSoldier ( ) ; begin
59266: LD_INT 0
59268: PPUSH
// uc_nation := 0 ;
59269: LD_ADDR_OWVAR 21
59273: PUSH
59274: LD_INT 0
59276: ST_TO_ADDR
// hc_sex := sex_male ;
59277: LD_ADDR_OWVAR 27
59281: PUSH
59282: LD_INT 1
59284: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
59285: LD_ADDR_OWVAR 28
59289: PUSH
59290: LD_INT 15
59292: ST_TO_ADDR
// hc_gallery :=  ;
59293: LD_ADDR_OWVAR 33
59297: PUSH
59298: LD_STRING 
59300: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59301: LD_ADDR_OWVAR 31
59305: PUSH
59306: LD_INT 0
59308: PPUSH
59309: LD_INT 3
59311: PPUSH
59312: CALL_OW 12
59316: PUSH
59317: LD_INT 0
59319: PPUSH
59320: LD_INT 3
59322: PPUSH
59323: CALL_OW 12
59327: PUSH
59328: LD_INT 0
59330: PUSH
59331: LD_INT 0
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: ST_TO_ADDR
// end ;
59340: LD_VAR 0 1
59344: RET
// export function PrepareApemanEngineer ( ) ; begin
59345: LD_INT 0
59347: PPUSH
// uc_nation := 0 ;
59348: LD_ADDR_OWVAR 21
59352: PUSH
59353: LD_INT 0
59355: ST_TO_ADDR
// hc_sex := sex_male ;
59356: LD_ADDR_OWVAR 27
59360: PUSH
59361: LD_INT 1
59363: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
59364: LD_ADDR_OWVAR 28
59368: PUSH
59369: LD_INT 16
59371: ST_TO_ADDR
// hc_gallery :=  ;
59372: LD_ADDR_OWVAR 33
59376: PUSH
59377: LD_STRING 
59379: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59380: LD_ADDR_OWVAR 31
59384: PUSH
59385: LD_INT 0
59387: PPUSH
59388: LD_INT 3
59390: PPUSH
59391: CALL_OW 12
59395: PUSH
59396: LD_INT 0
59398: PPUSH
59399: LD_INT 3
59401: PPUSH
59402: CALL_OW 12
59406: PUSH
59407: LD_INT 0
59409: PUSH
59410: LD_INT 0
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: ST_TO_ADDR
// end ;
59419: LD_VAR 0 1
59423: RET
// export function PrepareApeman ( agressivity ) ; begin
59424: LD_INT 0
59426: PPUSH
// uc_side := 0 ;
59427: LD_ADDR_OWVAR 20
59431: PUSH
59432: LD_INT 0
59434: ST_TO_ADDR
// uc_nation := 0 ;
59435: LD_ADDR_OWVAR 21
59439: PUSH
59440: LD_INT 0
59442: ST_TO_ADDR
// hc_sex := sex_male ;
59443: LD_ADDR_OWVAR 27
59447: PUSH
59448: LD_INT 1
59450: ST_TO_ADDR
// hc_class := class_apeman ;
59451: LD_ADDR_OWVAR 28
59455: PUSH
59456: LD_INT 12
59458: ST_TO_ADDR
// hc_gallery :=  ;
59459: LD_ADDR_OWVAR 33
59463: PUSH
59464: LD_STRING 
59466: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59467: LD_ADDR_OWVAR 35
59471: PUSH
59472: LD_VAR 0 1
59476: NEG
59477: PPUSH
59478: LD_VAR 0 1
59482: PPUSH
59483: CALL_OW 12
59487: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59488: LD_ADDR_OWVAR 31
59492: PUSH
59493: LD_INT 0
59495: PPUSH
59496: LD_INT 3
59498: PPUSH
59499: CALL_OW 12
59503: PUSH
59504: LD_INT 0
59506: PPUSH
59507: LD_INT 3
59509: PPUSH
59510: CALL_OW 12
59514: PUSH
59515: LD_INT 0
59517: PUSH
59518: LD_INT 0
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: ST_TO_ADDR
// end ;
59527: LD_VAR 0 2
59531: RET
// export function PrepareTiger ( agressivity ) ; begin
59532: LD_INT 0
59534: PPUSH
// uc_side := 0 ;
59535: LD_ADDR_OWVAR 20
59539: PUSH
59540: LD_INT 0
59542: ST_TO_ADDR
// uc_nation := 0 ;
59543: LD_ADDR_OWVAR 21
59547: PUSH
59548: LD_INT 0
59550: ST_TO_ADDR
// hc_class := class_tiger ;
59551: LD_ADDR_OWVAR 28
59555: PUSH
59556: LD_INT 14
59558: ST_TO_ADDR
// hc_gallery :=  ;
59559: LD_ADDR_OWVAR 33
59563: PUSH
59564: LD_STRING 
59566: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59567: LD_ADDR_OWVAR 35
59571: PUSH
59572: LD_VAR 0 1
59576: NEG
59577: PPUSH
59578: LD_VAR 0 1
59582: PPUSH
59583: CALL_OW 12
59587: ST_TO_ADDR
// end ;
59588: LD_VAR 0 2
59592: RET
// export function PrepareEnchidna ( ) ; begin
59593: LD_INT 0
59595: PPUSH
// uc_side := 0 ;
59596: LD_ADDR_OWVAR 20
59600: PUSH
59601: LD_INT 0
59603: ST_TO_ADDR
// uc_nation := 0 ;
59604: LD_ADDR_OWVAR 21
59608: PUSH
59609: LD_INT 0
59611: ST_TO_ADDR
// hc_class := class_baggie ;
59612: LD_ADDR_OWVAR 28
59616: PUSH
59617: LD_INT 13
59619: ST_TO_ADDR
// hc_gallery :=  ;
59620: LD_ADDR_OWVAR 33
59624: PUSH
59625: LD_STRING 
59627: ST_TO_ADDR
// end ;
59628: LD_VAR 0 1
59632: RET
// export function PrepareFrog ( ) ; begin
59633: LD_INT 0
59635: PPUSH
// uc_side := 0 ;
59636: LD_ADDR_OWVAR 20
59640: PUSH
59641: LD_INT 0
59643: ST_TO_ADDR
// uc_nation := 0 ;
59644: LD_ADDR_OWVAR 21
59648: PUSH
59649: LD_INT 0
59651: ST_TO_ADDR
// hc_class := class_frog ;
59652: LD_ADDR_OWVAR 28
59656: PUSH
59657: LD_INT 19
59659: ST_TO_ADDR
// hc_gallery :=  ;
59660: LD_ADDR_OWVAR 33
59664: PUSH
59665: LD_STRING 
59667: ST_TO_ADDR
// end ;
59668: LD_VAR 0 1
59672: RET
// export function PrepareFish ( ) ; begin
59673: LD_INT 0
59675: PPUSH
// uc_side := 0 ;
59676: LD_ADDR_OWVAR 20
59680: PUSH
59681: LD_INT 0
59683: ST_TO_ADDR
// uc_nation := 0 ;
59684: LD_ADDR_OWVAR 21
59688: PUSH
59689: LD_INT 0
59691: ST_TO_ADDR
// hc_class := class_fish ;
59692: LD_ADDR_OWVAR 28
59696: PUSH
59697: LD_INT 20
59699: ST_TO_ADDR
// hc_gallery :=  ;
59700: LD_ADDR_OWVAR 33
59704: PUSH
59705: LD_STRING 
59707: ST_TO_ADDR
// end ;
59708: LD_VAR 0 1
59712: RET
// export function PrepareBird ( ) ; begin
59713: LD_INT 0
59715: PPUSH
// uc_side := 0 ;
59716: LD_ADDR_OWVAR 20
59720: PUSH
59721: LD_INT 0
59723: ST_TO_ADDR
// uc_nation := 0 ;
59724: LD_ADDR_OWVAR 21
59728: PUSH
59729: LD_INT 0
59731: ST_TO_ADDR
// hc_class := class_phororhacos ;
59732: LD_ADDR_OWVAR 28
59736: PUSH
59737: LD_INT 18
59739: ST_TO_ADDR
// hc_gallery :=  ;
59740: LD_ADDR_OWVAR 33
59744: PUSH
59745: LD_STRING 
59747: ST_TO_ADDR
// end ;
59748: LD_VAR 0 1
59752: RET
// export function PrepareHorse ( ) ; begin
59753: LD_INT 0
59755: PPUSH
// uc_side := 0 ;
59756: LD_ADDR_OWVAR 20
59760: PUSH
59761: LD_INT 0
59763: ST_TO_ADDR
// uc_nation := 0 ;
59764: LD_ADDR_OWVAR 21
59768: PUSH
59769: LD_INT 0
59771: ST_TO_ADDR
// hc_class := class_horse ;
59772: LD_ADDR_OWVAR 28
59776: PUSH
59777: LD_INT 21
59779: ST_TO_ADDR
// hc_gallery :=  ;
59780: LD_ADDR_OWVAR 33
59784: PUSH
59785: LD_STRING 
59787: ST_TO_ADDR
// end ;
59788: LD_VAR 0 1
59792: RET
// export function PrepareMastodont ( ) ; begin
59793: LD_INT 0
59795: PPUSH
// uc_side := 0 ;
59796: LD_ADDR_OWVAR 20
59800: PUSH
59801: LD_INT 0
59803: ST_TO_ADDR
// uc_nation := 0 ;
59804: LD_ADDR_OWVAR 21
59808: PUSH
59809: LD_INT 0
59811: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59812: LD_ADDR_OWVAR 37
59816: PUSH
59817: LD_INT 31
59819: ST_TO_ADDR
// vc_control := control_rider ;
59820: LD_ADDR_OWVAR 38
59824: PUSH
59825: LD_INT 4
59827: ST_TO_ADDR
// end ;
59828: LD_VAR 0 1
59832: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59833: LD_INT 0
59835: PPUSH
59836: PPUSH
59837: PPUSH
// uc_side = 0 ;
59838: LD_ADDR_OWVAR 20
59842: PUSH
59843: LD_INT 0
59845: ST_TO_ADDR
// uc_nation = 0 ;
59846: LD_ADDR_OWVAR 21
59850: PUSH
59851: LD_INT 0
59853: ST_TO_ADDR
// InitHc_All ( ) ;
59854: CALL_OW 584
// InitVc ;
59858: CALL_OW 20
// if mastodonts then
59862: LD_VAR 0 6
59866: IFFALSE 59933
// for i = 1 to mastodonts do
59868: LD_ADDR_VAR 0 11
59872: PUSH
59873: DOUBLE
59874: LD_INT 1
59876: DEC
59877: ST_TO_ADDR
59878: LD_VAR 0 6
59882: PUSH
59883: FOR_TO
59884: IFFALSE 59931
// begin vc_chassis := 31 ;
59886: LD_ADDR_OWVAR 37
59890: PUSH
59891: LD_INT 31
59893: ST_TO_ADDR
// vc_control := control_rider ;
59894: LD_ADDR_OWVAR 38
59898: PUSH
59899: LD_INT 4
59901: ST_TO_ADDR
// animal := CreateVehicle ;
59902: LD_ADDR_VAR 0 12
59906: PUSH
59907: CALL_OW 45
59911: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59912: LD_VAR 0 12
59916: PPUSH
59917: LD_VAR 0 8
59921: PPUSH
59922: LD_INT 0
59924: PPUSH
59925: CALL 62068 0 3
// end ;
59929: GO 59883
59931: POP
59932: POP
// if horses then
59933: LD_VAR 0 5
59937: IFFALSE 60004
// for i = 1 to horses do
59939: LD_ADDR_VAR 0 11
59943: PUSH
59944: DOUBLE
59945: LD_INT 1
59947: DEC
59948: ST_TO_ADDR
59949: LD_VAR 0 5
59953: PUSH
59954: FOR_TO
59955: IFFALSE 60002
// begin hc_class := 21 ;
59957: LD_ADDR_OWVAR 28
59961: PUSH
59962: LD_INT 21
59964: ST_TO_ADDR
// hc_gallery :=  ;
59965: LD_ADDR_OWVAR 33
59969: PUSH
59970: LD_STRING 
59972: ST_TO_ADDR
// animal := CreateHuman ;
59973: LD_ADDR_VAR 0 12
59977: PUSH
59978: CALL_OW 44
59982: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59983: LD_VAR 0 12
59987: PPUSH
59988: LD_VAR 0 8
59992: PPUSH
59993: LD_INT 0
59995: PPUSH
59996: CALL 62068 0 3
// end ;
60000: GO 59954
60002: POP
60003: POP
// if birds then
60004: LD_VAR 0 1
60008: IFFALSE 60075
// for i = 1 to birds do
60010: LD_ADDR_VAR 0 11
60014: PUSH
60015: DOUBLE
60016: LD_INT 1
60018: DEC
60019: ST_TO_ADDR
60020: LD_VAR 0 1
60024: PUSH
60025: FOR_TO
60026: IFFALSE 60073
// begin hc_class = 18 ;
60028: LD_ADDR_OWVAR 28
60032: PUSH
60033: LD_INT 18
60035: ST_TO_ADDR
// hc_gallery =  ;
60036: LD_ADDR_OWVAR 33
60040: PUSH
60041: LD_STRING 
60043: ST_TO_ADDR
// animal := CreateHuman ;
60044: LD_ADDR_VAR 0 12
60048: PUSH
60049: CALL_OW 44
60053: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60054: LD_VAR 0 12
60058: PPUSH
60059: LD_VAR 0 8
60063: PPUSH
60064: LD_INT 0
60066: PPUSH
60067: CALL 62068 0 3
// end ;
60071: GO 60025
60073: POP
60074: POP
// if tigers then
60075: LD_VAR 0 2
60079: IFFALSE 60163
// for i = 1 to tigers do
60081: LD_ADDR_VAR 0 11
60085: PUSH
60086: DOUBLE
60087: LD_INT 1
60089: DEC
60090: ST_TO_ADDR
60091: LD_VAR 0 2
60095: PUSH
60096: FOR_TO
60097: IFFALSE 60161
// begin hc_class = class_tiger ;
60099: LD_ADDR_OWVAR 28
60103: PUSH
60104: LD_INT 14
60106: ST_TO_ADDR
// hc_gallery =  ;
60107: LD_ADDR_OWVAR 33
60111: PUSH
60112: LD_STRING 
60114: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60115: LD_ADDR_OWVAR 35
60119: PUSH
60120: LD_INT 7
60122: NEG
60123: PPUSH
60124: LD_INT 7
60126: PPUSH
60127: CALL_OW 12
60131: ST_TO_ADDR
// animal := CreateHuman ;
60132: LD_ADDR_VAR 0 12
60136: PUSH
60137: CALL_OW 44
60141: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60142: LD_VAR 0 12
60146: PPUSH
60147: LD_VAR 0 8
60151: PPUSH
60152: LD_INT 0
60154: PPUSH
60155: CALL 62068 0 3
// end ;
60159: GO 60096
60161: POP
60162: POP
// if apemans then
60163: LD_VAR 0 3
60167: IFFALSE 60290
// for i = 1 to apemans do
60169: LD_ADDR_VAR 0 11
60173: PUSH
60174: DOUBLE
60175: LD_INT 1
60177: DEC
60178: ST_TO_ADDR
60179: LD_VAR 0 3
60183: PUSH
60184: FOR_TO
60185: IFFALSE 60288
// begin hc_class = class_apeman ;
60187: LD_ADDR_OWVAR 28
60191: PUSH
60192: LD_INT 12
60194: ST_TO_ADDR
// hc_gallery =  ;
60195: LD_ADDR_OWVAR 33
60199: PUSH
60200: LD_STRING 
60202: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60203: LD_ADDR_OWVAR 35
60207: PUSH
60208: LD_INT 2
60210: NEG
60211: PPUSH
60212: LD_INT 2
60214: PPUSH
60215: CALL_OW 12
60219: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60220: LD_ADDR_OWVAR 31
60224: PUSH
60225: LD_INT 1
60227: PPUSH
60228: LD_INT 3
60230: PPUSH
60231: CALL_OW 12
60235: PUSH
60236: LD_INT 1
60238: PPUSH
60239: LD_INT 3
60241: PPUSH
60242: CALL_OW 12
60246: PUSH
60247: LD_INT 0
60249: PUSH
60250: LD_INT 0
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: ST_TO_ADDR
// animal := CreateHuman ;
60259: LD_ADDR_VAR 0 12
60263: PUSH
60264: CALL_OW 44
60268: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60269: LD_VAR 0 12
60273: PPUSH
60274: LD_VAR 0 8
60278: PPUSH
60279: LD_INT 0
60281: PPUSH
60282: CALL 62068 0 3
// end ;
60286: GO 60184
60288: POP
60289: POP
// if enchidnas then
60290: LD_VAR 0 4
60294: IFFALSE 60361
// for i = 1 to enchidnas do
60296: LD_ADDR_VAR 0 11
60300: PUSH
60301: DOUBLE
60302: LD_INT 1
60304: DEC
60305: ST_TO_ADDR
60306: LD_VAR 0 4
60310: PUSH
60311: FOR_TO
60312: IFFALSE 60359
// begin hc_class = 13 ;
60314: LD_ADDR_OWVAR 28
60318: PUSH
60319: LD_INT 13
60321: ST_TO_ADDR
// hc_gallery =  ;
60322: LD_ADDR_OWVAR 33
60326: PUSH
60327: LD_STRING 
60329: ST_TO_ADDR
// animal := CreateHuman ;
60330: LD_ADDR_VAR 0 12
60334: PUSH
60335: CALL_OW 44
60339: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60340: LD_VAR 0 12
60344: PPUSH
60345: LD_VAR 0 8
60349: PPUSH
60350: LD_INT 0
60352: PPUSH
60353: CALL 62068 0 3
// end ;
60357: GO 60311
60359: POP
60360: POP
// if fishes then
60361: LD_VAR 0 7
60365: IFFALSE 60432
// for i = 1 to fishes do
60367: LD_ADDR_VAR 0 11
60371: PUSH
60372: DOUBLE
60373: LD_INT 1
60375: DEC
60376: ST_TO_ADDR
60377: LD_VAR 0 7
60381: PUSH
60382: FOR_TO
60383: IFFALSE 60430
// begin hc_class = 20 ;
60385: LD_ADDR_OWVAR 28
60389: PUSH
60390: LD_INT 20
60392: ST_TO_ADDR
// hc_gallery =  ;
60393: LD_ADDR_OWVAR 33
60397: PUSH
60398: LD_STRING 
60400: ST_TO_ADDR
// animal := CreateHuman ;
60401: LD_ADDR_VAR 0 12
60405: PUSH
60406: CALL_OW 44
60410: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60411: LD_VAR 0 12
60415: PPUSH
60416: LD_VAR 0 9
60420: PPUSH
60421: LD_INT 0
60423: PPUSH
60424: CALL 62068 0 3
// end ;
60428: GO 60382
60430: POP
60431: POP
// end ;
60432: LD_VAR 0 10
60436: RET
// export function WantHeal ( sci , unit ) ; begin
60437: LD_INT 0
60439: PPUSH
// if GetTaskList ( sci ) > 0 then
60440: LD_VAR 0 1
60444: PPUSH
60445: CALL_OW 437
60449: PUSH
60450: LD_INT 0
60452: GREATER
60453: IFFALSE 60523
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60455: LD_VAR 0 1
60459: PPUSH
60460: CALL_OW 437
60464: PUSH
60465: LD_INT 1
60467: ARRAY
60468: PUSH
60469: LD_INT 1
60471: ARRAY
60472: PUSH
60473: LD_STRING l
60475: EQUAL
60476: PUSH
60477: LD_VAR 0 1
60481: PPUSH
60482: CALL_OW 437
60486: PUSH
60487: LD_INT 1
60489: ARRAY
60490: PUSH
60491: LD_INT 4
60493: ARRAY
60494: PUSH
60495: LD_VAR 0 2
60499: EQUAL
60500: AND
60501: IFFALSE 60513
// result := true else
60503: LD_ADDR_VAR 0 3
60507: PUSH
60508: LD_INT 1
60510: ST_TO_ADDR
60511: GO 60521
// result := false ;
60513: LD_ADDR_VAR 0 3
60517: PUSH
60518: LD_INT 0
60520: ST_TO_ADDR
// end else
60521: GO 60531
// result := false ;
60523: LD_ADDR_VAR 0 3
60527: PUSH
60528: LD_INT 0
60530: ST_TO_ADDR
// end ;
60531: LD_VAR 0 3
60535: RET
// export function HealTarget ( sci ) ; begin
60536: LD_INT 0
60538: PPUSH
// if not sci then
60539: LD_VAR 0 1
60543: NOT
60544: IFFALSE 60548
// exit ;
60546: GO 60613
// result := 0 ;
60548: LD_ADDR_VAR 0 2
60552: PUSH
60553: LD_INT 0
60555: ST_TO_ADDR
// if GetTaskList ( sci ) then
60556: LD_VAR 0 1
60560: PPUSH
60561: CALL_OW 437
60565: IFFALSE 60613
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60567: LD_VAR 0 1
60571: PPUSH
60572: CALL_OW 437
60576: PUSH
60577: LD_INT 1
60579: ARRAY
60580: PUSH
60581: LD_INT 1
60583: ARRAY
60584: PUSH
60585: LD_STRING l
60587: EQUAL
60588: IFFALSE 60613
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60590: LD_ADDR_VAR 0 2
60594: PUSH
60595: LD_VAR 0 1
60599: PPUSH
60600: CALL_OW 437
60604: PUSH
60605: LD_INT 1
60607: ARRAY
60608: PUSH
60609: LD_INT 4
60611: ARRAY
60612: ST_TO_ADDR
// end ;
60613: LD_VAR 0 2
60617: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60618: LD_INT 0
60620: PPUSH
60621: PPUSH
60622: PPUSH
60623: PPUSH
// if not base_units then
60624: LD_VAR 0 1
60628: NOT
60629: IFFALSE 60633
// exit ;
60631: GO 60720
// result := false ;
60633: LD_ADDR_VAR 0 2
60637: PUSH
60638: LD_INT 0
60640: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60641: LD_ADDR_VAR 0 5
60645: PUSH
60646: LD_VAR 0 1
60650: PPUSH
60651: LD_INT 21
60653: PUSH
60654: LD_INT 3
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PPUSH
60661: CALL_OW 72
60665: ST_TO_ADDR
// if not tmp then
60666: LD_VAR 0 5
60670: NOT
60671: IFFALSE 60675
// exit ;
60673: GO 60720
// for i in tmp do
60675: LD_ADDR_VAR 0 3
60679: PUSH
60680: LD_VAR 0 5
60684: PUSH
60685: FOR_IN
60686: IFFALSE 60718
// begin result := EnemyInRange ( i , 22 ) ;
60688: LD_ADDR_VAR 0 2
60692: PUSH
60693: LD_VAR 0 3
60697: PPUSH
60698: LD_INT 22
60700: PPUSH
60701: CALL 58333 0 2
60705: ST_TO_ADDR
// if result then
60706: LD_VAR 0 2
60710: IFFALSE 60716
// exit ;
60712: POP
60713: POP
60714: GO 60720
// end ;
60716: GO 60685
60718: POP
60719: POP
// end ;
60720: LD_VAR 0 2
60724: RET
// export function FilterByTag ( units , tag ) ; begin
60725: LD_INT 0
60727: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60728: LD_ADDR_VAR 0 3
60732: PUSH
60733: LD_VAR 0 1
60737: PPUSH
60738: LD_INT 120
60740: PUSH
60741: LD_VAR 0 2
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PPUSH
60750: CALL_OW 72
60754: ST_TO_ADDR
// end ;
60755: LD_VAR 0 3
60759: RET
// export function IsDriver ( un ) ; begin
60760: LD_INT 0
60762: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60763: LD_ADDR_VAR 0 2
60767: PUSH
60768: LD_VAR 0 1
60772: PUSH
60773: LD_INT 55
60775: PUSH
60776: EMPTY
60777: LIST
60778: PPUSH
60779: CALL_OW 69
60783: IN
60784: ST_TO_ADDR
// end ;
60785: LD_VAR 0 2
60789: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60790: LD_INT 0
60792: PPUSH
60793: PPUSH
// list := [ ] ;
60794: LD_ADDR_VAR 0 5
60798: PUSH
60799: EMPTY
60800: ST_TO_ADDR
// case d of 0 :
60801: LD_VAR 0 3
60805: PUSH
60806: LD_INT 0
60808: DOUBLE
60809: EQUAL
60810: IFTRUE 60814
60812: GO 60947
60814: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60815: LD_ADDR_VAR 0 5
60819: PUSH
60820: LD_VAR 0 1
60824: PUSH
60825: LD_INT 4
60827: MINUS
60828: PUSH
60829: LD_VAR 0 2
60833: PUSH
60834: LD_INT 4
60836: MINUS
60837: PUSH
60838: LD_INT 2
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: LIST
60845: PUSH
60846: LD_VAR 0 1
60850: PUSH
60851: LD_INT 3
60853: MINUS
60854: PUSH
60855: LD_VAR 0 2
60859: PUSH
60860: LD_INT 1
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: LIST
60867: PUSH
60868: LD_VAR 0 1
60872: PUSH
60873: LD_INT 4
60875: PLUS
60876: PUSH
60877: LD_VAR 0 2
60881: PUSH
60882: LD_INT 4
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: LIST
60889: PUSH
60890: LD_VAR 0 1
60894: PUSH
60895: LD_INT 3
60897: PLUS
60898: PUSH
60899: LD_VAR 0 2
60903: PUSH
60904: LD_INT 3
60906: PLUS
60907: PUSH
60908: LD_INT 5
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: LIST
60915: PUSH
60916: LD_VAR 0 1
60920: PUSH
60921: LD_VAR 0 2
60925: PUSH
60926: LD_INT 4
60928: PLUS
60929: PUSH
60930: LD_INT 0
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: LIST
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: ST_TO_ADDR
// end ; 1 :
60945: GO 61645
60947: LD_INT 1
60949: DOUBLE
60950: EQUAL
60951: IFTRUE 60955
60953: GO 61088
60955: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60956: LD_ADDR_VAR 0 5
60960: PUSH
60961: LD_VAR 0 1
60965: PUSH
60966: LD_VAR 0 2
60970: PUSH
60971: LD_INT 4
60973: MINUS
60974: PUSH
60975: LD_INT 3
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: LIST
60982: PUSH
60983: LD_VAR 0 1
60987: PUSH
60988: LD_INT 3
60990: MINUS
60991: PUSH
60992: LD_VAR 0 2
60996: PUSH
60997: LD_INT 3
60999: MINUS
61000: PUSH
61001: LD_INT 2
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: LIST
61008: PUSH
61009: LD_VAR 0 1
61013: PUSH
61014: LD_INT 4
61016: MINUS
61017: PUSH
61018: LD_VAR 0 2
61022: PUSH
61023: LD_INT 1
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: LIST
61030: PUSH
61031: LD_VAR 0 1
61035: PUSH
61036: LD_VAR 0 2
61040: PUSH
61041: LD_INT 3
61043: PLUS
61044: PUSH
61045: LD_INT 0
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: LIST
61052: PUSH
61053: LD_VAR 0 1
61057: PUSH
61058: LD_INT 4
61060: PLUS
61061: PUSH
61062: LD_VAR 0 2
61066: PUSH
61067: LD_INT 4
61069: PLUS
61070: PUSH
61071: LD_INT 5
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: LIST
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: ST_TO_ADDR
// end ; 2 :
61086: GO 61645
61088: LD_INT 2
61090: DOUBLE
61091: EQUAL
61092: IFTRUE 61096
61094: GO 61225
61096: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61097: LD_ADDR_VAR 0 5
61101: PUSH
61102: LD_VAR 0 1
61106: PUSH
61107: LD_VAR 0 2
61111: PUSH
61112: LD_INT 3
61114: MINUS
61115: PUSH
61116: LD_INT 3
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: LIST
61123: PUSH
61124: LD_VAR 0 1
61128: PUSH
61129: LD_INT 4
61131: PLUS
61132: PUSH
61133: LD_VAR 0 2
61137: PUSH
61138: LD_INT 4
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: LIST
61145: PUSH
61146: LD_VAR 0 1
61150: PUSH
61151: LD_VAR 0 2
61155: PUSH
61156: LD_INT 4
61158: PLUS
61159: PUSH
61160: LD_INT 0
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: LIST
61167: PUSH
61168: LD_VAR 0 1
61172: PUSH
61173: LD_INT 3
61175: MINUS
61176: PUSH
61177: LD_VAR 0 2
61181: PUSH
61182: LD_INT 1
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: LIST
61189: PUSH
61190: LD_VAR 0 1
61194: PUSH
61195: LD_INT 4
61197: MINUS
61198: PUSH
61199: LD_VAR 0 2
61203: PUSH
61204: LD_INT 4
61206: MINUS
61207: PUSH
61208: LD_INT 2
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: LIST
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: ST_TO_ADDR
// end ; 3 :
61223: GO 61645
61225: LD_INT 3
61227: DOUBLE
61228: EQUAL
61229: IFTRUE 61233
61231: GO 61366
61233: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61234: LD_ADDR_VAR 0 5
61238: PUSH
61239: LD_VAR 0 1
61243: PUSH
61244: LD_INT 3
61246: PLUS
61247: PUSH
61248: LD_VAR 0 2
61252: PUSH
61253: LD_INT 4
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: LIST
61260: PUSH
61261: LD_VAR 0 1
61265: PUSH
61266: LD_INT 4
61268: PLUS
61269: PUSH
61270: LD_VAR 0 2
61274: PUSH
61275: LD_INT 4
61277: PLUS
61278: PUSH
61279: LD_INT 5
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: LIST
61286: PUSH
61287: LD_VAR 0 1
61291: PUSH
61292: LD_INT 4
61294: MINUS
61295: PUSH
61296: LD_VAR 0 2
61300: PUSH
61301: LD_INT 1
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: LIST
61308: PUSH
61309: LD_VAR 0 1
61313: PUSH
61314: LD_VAR 0 2
61318: PUSH
61319: LD_INT 4
61321: MINUS
61322: PUSH
61323: LD_INT 3
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: LIST
61330: PUSH
61331: LD_VAR 0 1
61335: PUSH
61336: LD_INT 3
61338: MINUS
61339: PUSH
61340: LD_VAR 0 2
61344: PUSH
61345: LD_INT 3
61347: MINUS
61348: PUSH
61349: LD_INT 2
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: LIST
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: ST_TO_ADDR
// end ; 4 :
61364: GO 61645
61366: LD_INT 4
61368: DOUBLE
61369: EQUAL
61370: IFTRUE 61374
61372: GO 61507
61374: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61375: LD_ADDR_VAR 0 5
61379: PUSH
61380: LD_VAR 0 1
61384: PUSH
61385: LD_VAR 0 2
61389: PUSH
61390: LD_INT 4
61392: PLUS
61393: PUSH
61394: LD_INT 0
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: LIST
61401: PUSH
61402: LD_VAR 0 1
61406: PUSH
61407: LD_INT 3
61409: PLUS
61410: PUSH
61411: LD_VAR 0 2
61415: PUSH
61416: LD_INT 3
61418: PLUS
61419: PUSH
61420: LD_INT 5
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: LIST
61427: PUSH
61428: LD_VAR 0 1
61432: PUSH
61433: LD_INT 4
61435: PLUS
61436: PUSH
61437: LD_VAR 0 2
61441: PUSH
61442: LD_INT 4
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: LIST
61449: PUSH
61450: LD_VAR 0 1
61454: PUSH
61455: LD_VAR 0 2
61459: PUSH
61460: LD_INT 3
61462: MINUS
61463: PUSH
61464: LD_INT 3
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: LIST
61471: PUSH
61472: LD_VAR 0 1
61476: PUSH
61477: LD_INT 4
61479: MINUS
61480: PUSH
61481: LD_VAR 0 2
61485: PUSH
61486: LD_INT 4
61488: MINUS
61489: PUSH
61490: LD_INT 2
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: LIST
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: ST_TO_ADDR
// end ; 5 :
61505: GO 61645
61507: LD_INT 5
61509: DOUBLE
61510: EQUAL
61511: IFTRUE 61515
61513: GO 61644
61515: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61516: LD_ADDR_VAR 0 5
61520: PUSH
61521: LD_VAR 0 1
61525: PUSH
61526: LD_INT 4
61528: MINUS
61529: PUSH
61530: LD_VAR 0 2
61534: PUSH
61535: LD_INT 1
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: LIST
61542: PUSH
61543: LD_VAR 0 1
61547: PUSH
61548: LD_VAR 0 2
61552: PUSH
61553: LD_INT 4
61555: MINUS
61556: PUSH
61557: LD_INT 3
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: LIST
61564: PUSH
61565: LD_VAR 0 1
61569: PUSH
61570: LD_INT 4
61572: PLUS
61573: PUSH
61574: LD_VAR 0 2
61578: PUSH
61579: LD_INT 4
61581: PLUS
61582: PUSH
61583: LD_INT 5
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: LIST
61590: PUSH
61591: LD_VAR 0 1
61595: PUSH
61596: LD_INT 3
61598: PLUS
61599: PUSH
61600: LD_VAR 0 2
61604: PUSH
61605: LD_INT 4
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: LIST
61612: PUSH
61613: LD_VAR 0 1
61617: PUSH
61618: LD_VAR 0 2
61622: PUSH
61623: LD_INT 3
61625: PLUS
61626: PUSH
61627: LD_INT 0
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: LIST
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: ST_TO_ADDR
// end ; end ;
61642: GO 61645
61644: POP
// result := list ;
61645: LD_ADDR_VAR 0 4
61649: PUSH
61650: LD_VAR 0 5
61654: ST_TO_ADDR
// end ;
61655: LD_VAR 0 4
61659: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61660: LD_INT 0
61662: PPUSH
61663: PPUSH
61664: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61665: LD_VAR 0 1
61669: NOT
61670: PUSH
61671: LD_VAR 0 2
61675: PUSH
61676: LD_INT 1
61678: PUSH
61679: LD_INT 2
61681: PUSH
61682: LD_INT 3
61684: PUSH
61685: LD_INT 4
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: IN
61694: NOT
61695: OR
61696: IFFALSE 61700
// exit ;
61698: GO 61792
// tmp := [ ] ;
61700: LD_ADDR_VAR 0 5
61704: PUSH
61705: EMPTY
61706: ST_TO_ADDR
// for i in units do
61707: LD_ADDR_VAR 0 4
61711: PUSH
61712: LD_VAR 0 1
61716: PUSH
61717: FOR_IN
61718: IFFALSE 61761
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61720: LD_ADDR_VAR 0 5
61724: PUSH
61725: LD_VAR 0 5
61729: PPUSH
61730: LD_VAR 0 5
61734: PUSH
61735: LD_INT 1
61737: PLUS
61738: PPUSH
61739: LD_VAR 0 4
61743: PPUSH
61744: LD_VAR 0 2
61748: PPUSH
61749: CALL_OW 259
61753: PPUSH
61754: CALL_OW 2
61758: ST_TO_ADDR
61759: GO 61717
61761: POP
61762: POP
// if not tmp then
61763: LD_VAR 0 5
61767: NOT
61768: IFFALSE 61772
// exit ;
61770: GO 61792
// result := SortListByListDesc ( units , tmp ) ;
61772: LD_ADDR_VAR 0 3
61776: PUSH
61777: LD_VAR 0 1
61781: PPUSH
61782: LD_VAR 0 5
61786: PPUSH
61787: CALL_OW 77
61791: ST_TO_ADDR
// end ;
61792: LD_VAR 0 3
61796: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61797: LD_INT 0
61799: PPUSH
61800: PPUSH
61801: PPUSH
// result := false ;
61802: LD_ADDR_VAR 0 3
61806: PUSH
61807: LD_INT 0
61809: ST_TO_ADDR
// x := GetX ( building ) ;
61810: LD_ADDR_VAR 0 4
61814: PUSH
61815: LD_VAR 0 2
61819: PPUSH
61820: CALL_OW 250
61824: ST_TO_ADDR
// y := GetY ( building ) ;
61825: LD_ADDR_VAR 0 5
61829: PUSH
61830: LD_VAR 0 2
61834: PPUSH
61835: CALL_OW 251
61839: ST_TO_ADDR
// if not building or not x or not y then
61840: LD_VAR 0 2
61844: NOT
61845: PUSH
61846: LD_VAR 0 4
61850: NOT
61851: OR
61852: PUSH
61853: LD_VAR 0 5
61857: NOT
61858: OR
61859: IFFALSE 61863
// exit ;
61861: GO 61955
// if GetTaskList ( unit ) then
61863: LD_VAR 0 1
61867: PPUSH
61868: CALL_OW 437
61872: IFFALSE 61955
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61874: LD_STRING e
61876: PUSH
61877: LD_VAR 0 1
61881: PPUSH
61882: CALL_OW 437
61886: PUSH
61887: LD_INT 1
61889: ARRAY
61890: PUSH
61891: LD_INT 1
61893: ARRAY
61894: EQUAL
61895: PUSH
61896: LD_VAR 0 4
61900: PUSH
61901: LD_VAR 0 1
61905: PPUSH
61906: CALL_OW 437
61910: PUSH
61911: LD_INT 1
61913: ARRAY
61914: PUSH
61915: LD_INT 2
61917: ARRAY
61918: EQUAL
61919: AND
61920: PUSH
61921: LD_VAR 0 5
61925: PUSH
61926: LD_VAR 0 1
61930: PPUSH
61931: CALL_OW 437
61935: PUSH
61936: LD_INT 1
61938: ARRAY
61939: PUSH
61940: LD_INT 3
61942: ARRAY
61943: EQUAL
61944: AND
61945: IFFALSE 61955
// result := true end ;
61947: LD_ADDR_VAR 0 3
61951: PUSH
61952: LD_INT 1
61954: ST_TO_ADDR
// end ;
61955: LD_VAR 0 3
61959: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61960: LD_INT 0
61962: PPUSH
// result := false ;
61963: LD_ADDR_VAR 0 4
61967: PUSH
61968: LD_INT 0
61970: ST_TO_ADDR
// if GetTaskList ( unit ) then
61971: LD_VAR 0 1
61975: PPUSH
61976: CALL_OW 437
61980: IFFALSE 62063
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61982: LD_STRING M
61984: PUSH
61985: LD_VAR 0 1
61989: PPUSH
61990: CALL_OW 437
61994: PUSH
61995: LD_INT 1
61997: ARRAY
61998: PUSH
61999: LD_INT 1
62001: ARRAY
62002: EQUAL
62003: PUSH
62004: LD_VAR 0 2
62008: PUSH
62009: LD_VAR 0 1
62013: PPUSH
62014: CALL_OW 437
62018: PUSH
62019: LD_INT 1
62021: ARRAY
62022: PUSH
62023: LD_INT 2
62025: ARRAY
62026: EQUAL
62027: AND
62028: PUSH
62029: LD_VAR 0 3
62033: PUSH
62034: LD_VAR 0 1
62038: PPUSH
62039: CALL_OW 437
62043: PUSH
62044: LD_INT 1
62046: ARRAY
62047: PUSH
62048: LD_INT 3
62050: ARRAY
62051: EQUAL
62052: AND
62053: IFFALSE 62063
// result := true ;
62055: LD_ADDR_VAR 0 4
62059: PUSH
62060: LD_INT 1
62062: ST_TO_ADDR
// end ; end ;
62063: LD_VAR 0 4
62067: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62068: LD_INT 0
62070: PPUSH
62071: PPUSH
62072: PPUSH
62073: PPUSH
// if not unit or not area then
62074: LD_VAR 0 1
62078: NOT
62079: PUSH
62080: LD_VAR 0 2
62084: NOT
62085: OR
62086: IFFALSE 62090
// exit ;
62088: GO 62254
// tmp := AreaToList ( area , i ) ;
62090: LD_ADDR_VAR 0 6
62094: PUSH
62095: LD_VAR 0 2
62099: PPUSH
62100: LD_VAR 0 5
62104: PPUSH
62105: CALL_OW 517
62109: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62110: LD_ADDR_VAR 0 5
62114: PUSH
62115: DOUBLE
62116: LD_INT 1
62118: DEC
62119: ST_TO_ADDR
62120: LD_VAR 0 6
62124: PUSH
62125: LD_INT 1
62127: ARRAY
62128: PUSH
62129: FOR_TO
62130: IFFALSE 62252
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62132: LD_ADDR_VAR 0 7
62136: PUSH
62137: LD_VAR 0 6
62141: PUSH
62142: LD_INT 1
62144: ARRAY
62145: PUSH
62146: LD_VAR 0 5
62150: ARRAY
62151: PUSH
62152: LD_VAR 0 6
62156: PUSH
62157: LD_INT 2
62159: ARRAY
62160: PUSH
62161: LD_VAR 0 5
62165: ARRAY
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62171: LD_VAR 0 7
62175: PUSH
62176: LD_INT 1
62178: ARRAY
62179: PPUSH
62180: LD_VAR 0 7
62184: PUSH
62185: LD_INT 2
62187: ARRAY
62188: PPUSH
62189: CALL_OW 428
62193: PUSH
62194: LD_INT 0
62196: EQUAL
62197: IFFALSE 62250
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62199: LD_VAR 0 1
62203: PPUSH
62204: LD_VAR 0 7
62208: PUSH
62209: LD_INT 1
62211: ARRAY
62212: PPUSH
62213: LD_VAR 0 7
62217: PUSH
62218: LD_INT 2
62220: ARRAY
62221: PPUSH
62222: LD_VAR 0 3
62226: PPUSH
62227: CALL_OW 48
// result := IsPlaced ( unit ) ;
62231: LD_ADDR_VAR 0 4
62235: PUSH
62236: LD_VAR 0 1
62240: PPUSH
62241: CALL_OW 305
62245: ST_TO_ADDR
// exit ;
62246: POP
62247: POP
62248: GO 62254
// end ; end ;
62250: GO 62129
62252: POP
62253: POP
// end ;
62254: LD_VAR 0 4
62258: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62259: LD_INT 0
62261: PPUSH
62262: PPUSH
62263: PPUSH
// if not side or side > 8 then
62264: LD_VAR 0 1
62268: NOT
62269: PUSH
62270: LD_VAR 0 1
62274: PUSH
62275: LD_INT 8
62277: GREATER
62278: OR
62279: IFFALSE 62283
// exit ;
62281: GO 62470
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62283: LD_ADDR_VAR 0 4
62287: PUSH
62288: LD_INT 22
62290: PUSH
62291: LD_VAR 0 1
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 21
62302: PUSH
62303: LD_INT 3
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PPUSH
62314: CALL_OW 69
62318: ST_TO_ADDR
// if not tmp then
62319: LD_VAR 0 4
62323: NOT
62324: IFFALSE 62328
// exit ;
62326: GO 62470
// enable_addtolog := true ;
62328: LD_ADDR_OWVAR 81
62332: PUSH
62333: LD_INT 1
62335: ST_TO_ADDR
// AddToLog ( [ ) ;
62336: LD_STRING [
62338: PPUSH
62339: CALL_OW 561
// for i in tmp do
62343: LD_ADDR_VAR 0 3
62347: PUSH
62348: LD_VAR 0 4
62352: PUSH
62353: FOR_IN
62354: IFFALSE 62461
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62356: LD_STRING [
62358: PUSH
62359: LD_VAR 0 3
62363: PPUSH
62364: CALL_OW 266
62368: STR
62369: PUSH
62370: LD_STRING , 
62372: STR
62373: PUSH
62374: LD_VAR 0 3
62378: PPUSH
62379: CALL_OW 250
62383: STR
62384: PUSH
62385: LD_STRING , 
62387: STR
62388: PUSH
62389: LD_VAR 0 3
62393: PPUSH
62394: CALL_OW 251
62398: STR
62399: PUSH
62400: LD_STRING , 
62402: STR
62403: PUSH
62404: LD_VAR 0 3
62408: PPUSH
62409: CALL_OW 254
62413: STR
62414: PUSH
62415: LD_STRING , 
62417: STR
62418: PUSH
62419: LD_VAR 0 3
62423: PPUSH
62424: LD_INT 1
62426: PPUSH
62427: CALL_OW 268
62431: STR
62432: PUSH
62433: LD_STRING , 
62435: STR
62436: PUSH
62437: LD_VAR 0 3
62441: PPUSH
62442: LD_INT 2
62444: PPUSH
62445: CALL_OW 268
62449: STR
62450: PUSH
62451: LD_STRING ],
62453: STR
62454: PPUSH
62455: CALL_OW 561
// end ;
62459: GO 62353
62461: POP
62462: POP
// AddToLog ( ]; ) ;
62463: LD_STRING ];
62465: PPUSH
62466: CALL_OW 561
// end ;
62470: LD_VAR 0 2
62474: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62475: LD_INT 0
62477: PPUSH
62478: PPUSH
62479: PPUSH
62480: PPUSH
62481: PPUSH
// if not area or not rate or not max then
62482: LD_VAR 0 1
62486: NOT
62487: PUSH
62488: LD_VAR 0 2
62492: NOT
62493: OR
62494: PUSH
62495: LD_VAR 0 4
62499: NOT
62500: OR
62501: IFFALSE 62505
// exit ;
62503: GO 62694
// while 1 do
62505: LD_INT 1
62507: IFFALSE 62694
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62509: LD_ADDR_VAR 0 9
62513: PUSH
62514: LD_VAR 0 1
62518: PPUSH
62519: LD_INT 1
62521: PPUSH
62522: CALL_OW 287
62526: PUSH
62527: LD_INT 10
62529: MUL
62530: ST_TO_ADDR
// r := rate / 10 ;
62531: LD_ADDR_VAR 0 7
62535: PUSH
62536: LD_VAR 0 2
62540: PUSH
62541: LD_INT 10
62543: DIVREAL
62544: ST_TO_ADDR
// time := 1 1$00 ;
62545: LD_ADDR_VAR 0 8
62549: PUSH
62550: LD_INT 2100
62552: ST_TO_ADDR
// if amount < min then
62553: LD_VAR 0 9
62557: PUSH
62558: LD_VAR 0 3
62562: LESS
62563: IFFALSE 62581
// r := r * 2 else
62565: LD_ADDR_VAR 0 7
62569: PUSH
62570: LD_VAR 0 7
62574: PUSH
62575: LD_INT 2
62577: MUL
62578: ST_TO_ADDR
62579: GO 62607
// if amount > max then
62581: LD_VAR 0 9
62585: PUSH
62586: LD_VAR 0 4
62590: GREATER
62591: IFFALSE 62607
// r := r / 2 ;
62593: LD_ADDR_VAR 0 7
62597: PUSH
62598: LD_VAR 0 7
62602: PUSH
62603: LD_INT 2
62605: DIVREAL
62606: ST_TO_ADDR
// time := time / r ;
62607: LD_ADDR_VAR 0 8
62611: PUSH
62612: LD_VAR 0 8
62616: PUSH
62617: LD_VAR 0 7
62621: DIVREAL
62622: ST_TO_ADDR
// if time < 0 then
62623: LD_VAR 0 8
62627: PUSH
62628: LD_INT 0
62630: LESS
62631: IFFALSE 62648
// time := time * - 1 ;
62633: LD_ADDR_VAR 0 8
62637: PUSH
62638: LD_VAR 0 8
62642: PUSH
62643: LD_INT 1
62645: NEG
62646: MUL
62647: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62648: LD_VAR 0 8
62652: PUSH
62653: LD_INT 35
62655: PPUSH
62656: LD_INT 875
62658: PPUSH
62659: CALL_OW 12
62663: PLUS
62664: PPUSH
62665: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62669: LD_INT 1
62671: PPUSH
62672: LD_INT 5
62674: PPUSH
62675: CALL_OW 12
62679: PPUSH
62680: LD_VAR 0 1
62684: PPUSH
62685: LD_INT 1
62687: PPUSH
62688: CALL_OW 55
// end ;
62692: GO 62505
// end ;
62694: LD_VAR 0 5
62698: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62699: LD_INT 0
62701: PPUSH
62702: PPUSH
62703: PPUSH
62704: PPUSH
62705: PPUSH
62706: PPUSH
62707: PPUSH
62708: PPUSH
// if not turrets or not factories then
62709: LD_VAR 0 1
62713: NOT
62714: PUSH
62715: LD_VAR 0 2
62719: NOT
62720: OR
62721: IFFALSE 62725
// exit ;
62723: GO 63032
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62725: LD_ADDR_VAR 0 10
62729: PUSH
62730: LD_INT 5
62732: PUSH
62733: LD_INT 6
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 2
62742: PUSH
62743: LD_INT 4
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 3
62752: PUSH
62753: LD_INT 5
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: LIST
62764: PUSH
62765: LD_INT 24
62767: PUSH
62768: LD_INT 25
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 23
62777: PUSH
62778: LD_INT 27
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 42
62791: PUSH
62792: LD_INT 43
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 44
62801: PUSH
62802: LD_INT 46
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 45
62811: PUSH
62812: LD_INT 47
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: LIST
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: LIST
62828: ST_TO_ADDR
// result := [ ] ;
62829: LD_ADDR_VAR 0 3
62833: PUSH
62834: EMPTY
62835: ST_TO_ADDR
// for i in turrets do
62836: LD_ADDR_VAR 0 4
62840: PUSH
62841: LD_VAR 0 1
62845: PUSH
62846: FOR_IN
62847: IFFALSE 63030
// begin nat := GetNation ( i ) ;
62849: LD_ADDR_VAR 0 7
62853: PUSH
62854: LD_VAR 0 4
62858: PPUSH
62859: CALL_OW 248
62863: ST_TO_ADDR
// weapon := 0 ;
62864: LD_ADDR_VAR 0 8
62868: PUSH
62869: LD_INT 0
62871: ST_TO_ADDR
// if not nat then
62872: LD_VAR 0 7
62876: NOT
62877: IFFALSE 62881
// continue ;
62879: GO 62846
// for j in list [ nat ] do
62881: LD_ADDR_VAR 0 5
62885: PUSH
62886: LD_VAR 0 10
62890: PUSH
62891: LD_VAR 0 7
62895: ARRAY
62896: PUSH
62897: FOR_IN
62898: IFFALSE 62939
// if GetBWeapon ( i ) = j [ 1 ] then
62900: LD_VAR 0 4
62904: PPUSH
62905: CALL_OW 269
62909: PUSH
62910: LD_VAR 0 5
62914: PUSH
62915: LD_INT 1
62917: ARRAY
62918: EQUAL
62919: IFFALSE 62937
// begin weapon := j [ 2 ] ;
62921: LD_ADDR_VAR 0 8
62925: PUSH
62926: LD_VAR 0 5
62930: PUSH
62931: LD_INT 2
62933: ARRAY
62934: ST_TO_ADDR
// break ;
62935: GO 62939
// end ;
62937: GO 62897
62939: POP
62940: POP
// if not weapon then
62941: LD_VAR 0 8
62945: NOT
62946: IFFALSE 62950
// continue ;
62948: GO 62846
// for k in factories do
62950: LD_ADDR_VAR 0 6
62954: PUSH
62955: LD_VAR 0 2
62959: PUSH
62960: FOR_IN
62961: IFFALSE 63026
// begin weapons := AvailableWeaponList ( k ) ;
62963: LD_ADDR_VAR 0 9
62967: PUSH
62968: LD_VAR 0 6
62972: PPUSH
62973: CALL_OW 478
62977: ST_TO_ADDR
// if not weapons then
62978: LD_VAR 0 9
62982: NOT
62983: IFFALSE 62987
// continue ;
62985: GO 62960
// if weapon in weapons then
62987: LD_VAR 0 8
62991: PUSH
62992: LD_VAR 0 9
62996: IN
62997: IFFALSE 63024
// begin result := [ i , weapon ] ;
62999: LD_ADDR_VAR 0 3
63003: PUSH
63004: LD_VAR 0 4
63008: PUSH
63009: LD_VAR 0 8
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: ST_TO_ADDR
// exit ;
63018: POP
63019: POP
63020: POP
63021: POP
63022: GO 63032
// end ; end ;
63024: GO 62960
63026: POP
63027: POP
// end ;
63028: GO 62846
63030: POP
63031: POP
// end ;
63032: LD_VAR 0 3
63036: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63037: LD_INT 0
63039: PPUSH
// if not side or side > 8 then
63040: LD_VAR 0 3
63044: NOT
63045: PUSH
63046: LD_VAR 0 3
63050: PUSH
63051: LD_INT 8
63053: GREATER
63054: OR
63055: IFFALSE 63059
// exit ;
63057: GO 63118
// if not range then
63059: LD_VAR 0 4
63063: NOT
63064: IFFALSE 63075
// range := - 12 ;
63066: LD_ADDR_VAR 0 4
63070: PUSH
63071: LD_INT 12
63073: NEG
63074: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63075: LD_VAR 0 1
63079: PPUSH
63080: LD_VAR 0 2
63084: PPUSH
63085: LD_VAR 0 3
63089: PPUSH
63090: LD_VAR 0 4
63094: PPUSH
63095: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63099: LD_VAR 0 1
63103: PPUSH
63104: LD_VAR 0 2
63108: PPUSH
63109: LD_VAR 0 3
63113: PPUSH
63114: CALL_OW 331
// end ;
63118: LD_VAR 0 5
63122: RET
// export function Video ( mode ) ; begin
63123: LD_INT 0
63125: PPUSH
// ingame_video = mode ;
63126: LD_ADDR_OWVAR 52
63130: PUSH
63131: LD_VAR 0 1
63135: ST_TO_ADDR
// interface_hidden = mode ;
63136: LD_ADDR_OWVAR 54
63140: PUSH
63141: LD_VAR 0 1
63145: ST_TO_ADDR
// end ;
63146: LD_VAR 0 2
63150: RET
// export function Join ( array , element ) ; begin
63151: LD_INT 0
63153: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63154: LD_ADDR_VAR 0 3
63158: PUSH
63159: LD_VAR 0 1
63163: PPUSH
63164: LD_VAR 0 1
63168: PUSH
63169: LD_INT 1
63171: PLUS
63172: PPUSH
63173: LD_VAR 0 2
63177: PPUSH
63178: CALL_OW 1
63182: ST_TO_ADDR
// end ;
63183: LD_VAR 0 3
63187: RET
// export function JoinUnion ( array , element ) ; begin
63188: LD_INT 0
63190: PPUSH
// result := array union element ;
63191: LD_ADDR_VAR 0 3
63195: PUSH
63196: LD_VAR 0 1
63200: PUSH
63201: LD_VAR 0 2
63205: UNION
63206: ST_TO_ADDR
// end ;
63207: LD_VAR 0 3
63211: RET
// export function GetBehemoths ( side ) ; begin
63212: LD_INT 0
63214: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
63215: LD_ADDR_VAR 0 2
63219: PUSH
63220: LD_INT 22
63222: PUSH
63223: LD_VAR 0 1
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 31
63234: PUSH
63235: LD_INT 25
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PPUSH
63246: CALL_OW 69
63250: ST_TO_ADDR
// end ;
63251: LD_VAR 0 2
63255: RET
// export function Shuffle ( array ) ; var i , index ; begin
63256: LD_INT 0
63258: PPUSH
63259: PPUSH
63260: PPUSH
// result := [ ] ;
63261: LD_ADDR_VAR 0 2
63265: PUSH
63266: EMPTY
63267: ST_TO_ADDR
// if not array then
63268: LD_VAR 0 1
63272: NOT
63273: IFFALSE 63277
// exit ;
63275: GO 63376
// Randomize ;
63277: CALL_OW 10
// for i = array downto 1 do
63281: LD_ADDR_VAR 0 3
63285: PUSH
63286: DOUBLE
63287: LD_VAR 0 1
63291: INC
63292: ST_TO_ADDR
63293: LD_INT 1
63295: PUSH
63296: FOR_DOWNTO
63297: IFFALSE 63374
// begin index := rand ( 1 , array ) ;
63299: LD_ADDR_VAR 0 4
63303: PUSH
63304: LD_INT 1
63306: PPUSH
63307: LD_VAR 0 1
63311: PPUSH
63312: CALL_OW 12
63316: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63317: LD_ADDR_VAR 0 2
63321: PUSH
63322: LD_VAR 0 2
63326: PPUSH
63327: LD_VAR 0 2
63331: PUSH
63332: LD_INT 1
63334: PLUS
63335: PPUSH
63336: LD_VAR 0 1
63340: PUSH
63341: LD_VAR 0 4
63345: ARRAY
63346: PPUSH
63347: CALL_OW 2
63351: ST_TO_ADDR
// array := Delete ( array , index ) ;
63352: LD_ADDR_VAR 0 1
63356: PUSH
63357: LD_VAR 0 1
63361: PPUSH
63362: LD_VAR 0 4
63366: PPUSH
63367: CALL_OW 3
63371: ST_TO_ADDR
// end ;
63372: GO 63296
63374: POP
63375: POP
// end ;
63376: LD_VAR 0 2
63380: RET
// export function GetBaseMaterials ( base ) ; begin
63381: LD_INT 0
63383: PPUSH
// result := [ 0 , 0 , 0 ] ;
63384: LD_ADDR_VAR 0 2
63388: PUSH
63389: LD_INT 0
63391: PUSH
63392: LD_INT 0
63394: PUSH
63395: LD_INT 0
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: LIST
63402: ST_TO_ADDR
// if not base then
63403: LD_VAR 0 1
63407: NOT
63408: IFFALSE 63412
// exit ;
63410: GO 63461
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63412: LD_ADDR_VAR 0 2
63416: PUSH
63417: LD_VAR 0 1
63421: PPUSH
63422: LD_INT 1
63424: PPUSH
63425: CALL_OW 275
63429: PUSH
63430: LD_VAR 0 1
63434: PPUSH
63435: LD_INT 2
63437: PPUSH
63438: CALL_OW 275
63442: PUSH
63443: LD_VAR 0 1
63447: PPUSH
63448: LD_INT 3
63450: PPUSH
63451: CALL_OW 275
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: LIST
63460: ST_TO_ADDR
// end ;
63461: LD_VAR 0 2
63465: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63466: LD_INT 0
63468: PPUSH
63469: PPUSH
// result := array ;
63470: LD_ADDR_VAR 0 3
63474: PUSH
63475: LD_VAR 0 1
63479: ST_TO_ADDR
// if size >= result then
63480: LD_VAR 0 2
63484: PUSH
63485: LD_VAR 0 3
63489: GREATEREQUAL
63490: IFFALSE 63494
// exit ;
63492: GO 63544
// if size then
63494: LD_VAR 0 2
63498: IFFALSE 63544
// for i := array downto size do
63500: LD_ADDR_VAR 0 4
63504: PUSH
63505: DOUBLE
63506: LD_VAR 0 1
63510: INC
63511: ST_TO_ADDR
63512: LD_VAR 0 2
63516: PUSH
63517: FOR_DOWNTO
63518: IFFALSE 63542
// result := Delete ( result , result ) ;
63520: LD_ADDR_VAR 0 3
63524: PUSH
63525: LD_VAR 0 3
63529: PPUSH
63530: LD_VAR 0 3
63534: PPUSH
63535: CALL_OW 3
63539: ST_TO_ADDR
63540: GO 63517
63542: POP
63543: POP
// end ;
63544: LD_VAR 0 3
63548: RET
// export function ComExit ( unit ) ; var tmp ; begin
63549: LD_INT 0
63551: PPUSH
63552: PPUSH
// if not IsInUnit ( unit ) then
63553: LD_VAR 0 1
63557: PPUSH
63558: CALL_OW 310
63562: NOT
63563: IFFALSE 63567
// exit ;
63565: GO 63627
// tmp := IsInUnit ( unit ) ;
63567: LD_ADDR_VAR 0 3
63571: PUSH
63572: LD_VAR 0 1
63576: PPUSH
63577: CALL_OW 310
63581: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63582: LD_VAR 0 3
63586: PPUSH
63587: CALL_OW 247
63591: PUSH
63592: LD_INT 2
63594: EQUAL
63595: IFFALSE 63608
// ComExitVehicle ( unit ) else
63597: LD_VAR 0 1
63601: PPUSH
63602: CALL_OW 121
63606: GO 63617
// ComExitBuilding ( unit ) ;
63608: LD_VAR 0 1
63612: PPUSH
63613: CALL_OW 122
// result := tmp ;
63617: LD_ADDR_VAR 0 2
63621: PUSH
63622: LD_VAR 0 3
63626: ST_TO_ADDR
// end ;
63627: LD_VAR 0 2
63631: RET
// export function ComExitAll ( units ) ; var i ; begin
63632: LD_INT 0
63634: PPUSH
63635: PPUSH
// if not units then
63636: LD_VAR 0 1
63640: NOT
63641: IFFALSE 63645
// exit ;
63643: GO 63671
// for i in units do
63645: LD_ADDR_VAR 0 3
63649: PUSH
63650: LD_VAR 0 1
63654: PUSH
63655: FOR_IN
63656: IFFALSE 63669
// ComExit ( i ) ;
63658: LD_VAR 0 3
63662: PPUSH
63663: CALL 63549 0 1
63667: GO 63655
63669: POP
63670: POP
// end ;
63671: LD_VAR 0 2
63675: RET
// export function ResetHc ; begin
63676: LD_INT 0
63678: PPUSH
// InitHc ;
63679: CALL_OW 19
// hc_importance := 0 ;
63683: LD_ADDR_OWVAR 32
63687: PUSH
63688: LD_INT 0
63690: ST_TO_ADDR
// end ;
63691: LD_VAR 0 1
63695: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63696: LD_INT 0
63698: PPUSH
63699: PPUSH
63700: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63701: LD_ADDR_VAR 0 6
63705: PUSH
63706: LD_VAR 0 1
63710: PUSH
63711: LD_VAR 0 3
63715: PLUS
63716: PUSH
63717: LD_INT 2
63719: DIV
63720: ST_TO_ADDR
// if _x < 0 then
63721: LD_VAR 0 6
63725: PUSH
63726: LD_INT 0
63728: LESS
63729: IFFALSE 63746
// _x := _x * - 1 ;
63731: LD_ADDR_VAR 0 6
63735: PUSH
63736: LD_VAR 0 6
63740: PUSH
63741: LD_INT 1
63743: NEG
63744: MUL
63745: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63746: LD_ADDR_VAR 0 7
63750: PUSH
63751: LD_VAR 0 2
63755: PUSH
63756: LD_VAR 0 4
63760: PLUS
63761: PUSH
63762: LD_INT 2
63764: DIV
63765: ST_TO_ADDR
// if _y < 0 then
63766: LD_VAR 0 7
63770: PUSH
63771: LD_INT 0
63773: LESS
63774: IFFALSE 63791
// _y := _y * - 1 ;
63776: LD_ADDR_VAR 0 7
63780: PUSH
63781: LD_VAR 0 7
63785: PUSH
63786: LD_INT 1
63788: NEG
63789: MUL
63790: ST_TO_ADDR
// result := [ _x , _y ] ;
63791: LD_ADDR_VAR 0 5
63795: PUSH
63796: LD_VAR 0 6
63800: PUSH
63801: LD_VAR 0 7
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: ST_TO_ADDR
// end ;
63810: LD_VAR 0 5
63814: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63815: LD_INT 0
63817: PPUSH
63818: PPUSH
63819: PPUSH
63820: PPUSH
// task := GetTaskList ( unit ) ;
63821: LD_ADDR_VAR 0 7
63825: PUSH
63826: LD_VAR 0 1
63830: PPUSH
63831: CALL_OW 437
63835: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63836: LD_VAR 0 7
63840: NOT
63841: PUSH
63842: LD_VAR 0 1
63846: PPUSH
63847: LD_VAR 0 2
63851: PPUSH
63852: CALL_OW 308
63856: NOT
63857: AND
63858: IFFALSE 63862
// exit ;
63860: GO 63980
// if IsInArea ( unit , area ) then
63862: LD_VAR 0 1
63866: PPUSH
63867: LD_VAR 0 2
63871: PPUSH
63872: CALL_OW 308
63876: IFFALSE 63894
// begin ComMoveToArea ( unit , goAway ) ;
63878: LD_VAR 0 1
63882: PPUSH
63883: LD_VAR 0 3
63887: PPUSH
63888: CALL_OW 113
// exit ;
63892: GO 63980
// end ; if task [ 1 ] [ 1 ] <> M then
63894: LD_VAR 0 7
63898: PUSH
63899: LD_INT 1
63901: ARRAY
63902: PUSH
63903: LD_INT 1
63905: ARRAY
63906: PUSH
63907: LD_STRING M
63909: NONEQUAL
63910: IFFALSE 63914
// exit ;
63912: GO 63980
// x := task [ 1 ] [ 2 ] ;
63914: LD_ADDR_VAR 0 5
63918: PUSH
63919: LD_VAR 0 7
63923: PUSH
63924: LD_INT 1
63926: ARRAY
63927: PUSH
63928: LD_INT 2
63930: ARRAY
63931: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63932: LD_ADDR_VAR 0 6
63936: PUSH
63937: LD_VAR 0 7
63941: PUSH
63942: LD_INT 1
63944: ARRAY
63945: PUSH
63946: LD_INT 3
63948: ARRAY
63949: ST_TO_ADDR
// if InArea ( x , y , area ) then
63950: LD_VAR 0 5
63954: PPUSH
63955: LD_VAR 0 6
63959: PPUSH
63960: LD_VAR 0 2
63964: PPUSH
63965: CALL_OW 309
63969: IFFALSE 63980
// ComStop ( unit ) ;
63971: LD_VAR 0 1
63975: PPUSH
63976: CALL_OW 141
// end ;
63980: LD_VAR 0 4
63984: RET
// export function Abs ( value ) ; begin
63985: LD_INT 0
63987: PPUSH
// result := value ;
63988: LD_ADDR_VAR 0 2
63992: PUSH
63993: LD_VAR 0 1
63997: ST_TO_ADDR
// if value < 0 then
63998: LD_VAR 0 1
64002: PUSH
64003: LD_INT 0
64005: LESS
64006: IFFALSE 64023
// result := value * - 1 ;
64008: LD_ADDR_VAR 0 2
64012: PUSH
64013: LD_VAR 0 1
64017: PUSH
64018: LD_INT 1
64020: NEG
64021: MUL
64022: ST_TO_ADDR
// end ;
64023: LD_VAR 0 2
64027: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64028: LD_INT 0
64030: PPUSH
64031: PPUSH
64032: PPUSH
64033: PPUSH
64034: PPUSH
64035: PPUSH
64036: PPUSH
64037: PPUSH
// if not unit or not building then
64038: LD_VAR 0 1
64042: NOT
64043: PUSH
64044: LD_VAR 0 2
64048: NOT
64049: OR
64050: IFFALSE 64054
// exit ;
64052: GO 64280
// x := GetX ( building ) ;
64054: LD_ADDR_VAR 0 4
64058: PUSH
64059: LD_VAR 0 2
64063: PPUSH
64064: CALL_OW 250
64068: ST_TO_ADDR
// y := GetY ( building ) ;
64069: LD_ADDR_VAR 0 6
64073: PUSH
64074: LD_VAR 0 2
64078: PPUSH
64079: CALL_OW 251
64083: ST_TO_ADDR
// d := GetDir ( building ) ;
64084: LD_ADDR_VAR 0 8
64088: PUSH
64089: LD_VAR 0 2
64093: PPUSH
64094: CALL_OW 254
64098: ST_TO_ADDR
// r := 4 ;
64099: LD_ADDR_VAR 0 9
64103: PUSH
64104: LD_INT 4
64106: ST_TO_ADDR
// for i := 1 to 5 do
64107: LD_ADDR_VAR 0 10
64111: PUSH
64112: DOUBLE
64113: LD_INT 1
64115: DEC
64116: ST_TO_ADDR
64117: LD_INT 5
64119: PUSH
64120: FOR_TO
64121: IFFALSE 64278
// begin _x := ShiftX ( x , d , r + i ) ;
64123: LD_ADDR_VAR 0 5
64127: PUSH
64128: LD_VAR 0 4
64132: PPUSH
64133: LD_VAR 0 8
64137: PPUSH
64138: LD_VAR 0 9
64142: PUSH
64143: LD_VAR 0 10
64147: PLUS
64148: PPUSH
64149: CALL_OW 272
64153: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64154: LD_ADDR_VAR 0 7
64158: PUSH
64159: LD_VAR 0 6
64163: PPUSH
64164: LD_VAR 0 8
64168: PPUSH
64169: LD_VAR 0 9
64173: PUSH
64174: LD_VAR 0 10
64178: PLUS
64179: PPUSH
64180: CALL_OW 273
64184: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64185: LD_VAR 0 5
64189: PPUSH
64190: LD_VAR 0 7
64194: PPUSH
64195: CALL_OW 488
64199: PUSH
64200: LD_VAR 0 5
64204: PPUSH
64205: LD_VAR 0 7
64209: PPUSH
64210: CALL_OW 428
64214: PPUSH
64215: CALL_OW 247
64219: PUSH
64220: LD_INT 3
64222: PUSH
64223: LD_INT 2
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: IN
64230: NOT
64231: AND
64232: IFFALSE 64276
// begin ComMoveXY ( unit , _x , _y ) ;
64234: LD_VAR 0 1
64238: PPUSH
64239: LD_VAR 0 5
64243: PPUSH
64244: LD_VAR 0 7
64248: PPUSH
64249: CALL_OW 111
// result := [ _x , _y ] ;
64253: LD_ADDR_VAR 0 3
64257: PUSH
64258: LD_VAR 0 5
64262: PUSH
64263: LD_VAR 0 7
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: ST_TO_ADDR
// exit ;
64272: POP
64273: POP
64274: GO 64280
// end ; end ;
64276: GO 64120
64278: POP
64279: POP
// end ;
64280: LD_VAR 0 3
64284: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64285: LD_INT 0
64287: PPUSH
64288: PPUSH
64289: PPUSH
// result := 0 ;
64290: LD_ADDR_VAR 0 3
64294: PUSH
64295: LD_INT 0
64297: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64298: LD_VAR 0 1
64302: PUSH
64303: LD_INT 0
64305: LESS
64306: PUSH
64307: LD_VAR 0 1
64311: PUSH
64312: LD_INT 8
64314: GREATER
64315: OR
64316: PUSH
64317: LD_VAR 0 2
64321: PUSH
64322: LD_INT 0
64324: LESS
64325: OR
64326: PUSH
64327: LD_VAR 0 2
64331: PUSH
64332: LD_INT 8
64334: GREATER
64335: OR
64336: IFFALSE 64340
// exit ;
64338: GO 64415
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64340: LD_ADDR_VAR 0 4
64344: PUSH
64345: LD_INT 22
64347: PUSH
64348: LD_VAR 0 2
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PPUSH
64357: CALL_OW 69
64361: PUSH
64362: FOR_IN
64363: IFFALSE 64413
// begin un := UnitShoot ( i ) ;
64365: LD_ADDR_VAR 0 5
64369: PUSH
64370: LD_VAR 0 4
64374: PPUSH
64375: CALL_OW 504
64379: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64380: LD_VAR 0 5
64384: PPUSH
64385: CALL_OW 255
64389: PUSH
64390: LD_VAR 0 1
64394: EQUAL
64395: IFFALSE 64411
// begin result := un ;
64397: LD_ADDR_VAR 0 3
64401: PUSH
64402: LD_VAR 0 5
64406: ST_TO_ADDR
// exit ;
64407: POP
64408: POP
64409: GO 64415
// end ; end ;
64411: GO 64362
64413: POP
64414: POP
// end ;
64415: LD_VAR 0 3
64419: RET
// export function GetCargoBay ( units ) ; begin
64420: LD_INT 0
64422: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64423: LD_ADDR_VAR 0 2
64427: PUSH
64428: LD_VAR 0 1
64432: PPUSH
64433: LD_INT 2
64435: PUSH
64436: LD_INT 34
64438: PUSH
64439: LD_INT 12
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 34
64448: PUSH
64449: LD_INT 51
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 34
64458: PUSH
64459: LD_INT 32
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 34
64468: PUSH
64469: LD_INT 89
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: PPUSH
64483: CALL_OW 72
64487: ST_TO_ADDR
// end ;
64488: LD_VAR 0 2
64492: RET
// export function Negate ( value ) ; begin
64493: LD_INT 0
64495: PPUSH
// result := not value ;
64496: LD_ADDR_VAR 0 2
64500: PUSH
64501: LD_VAR 0 1
64505: NOT
64506: ST_TO_ADDR
// end ;
64507: LD_VAR 0 2
64511: RET
// export function Inc ( value ) ; begin
64512: LD_INT 0
64514: PPUSH
// result := value + 1 ;
64515: LD_ADDR_VAR 0 2
64519: PUSH
64520: LD_VAR 0 1
64524: PUSH
64525: LD_INT 1
64527: PLUS
64528: ST_TO_ADDR
// end ;
64529: LD_VAR 0 2
64533: RET
// export function Dec ( value ) ; begin
64534: LD_INT 0
64536: PPUSH
// result := value - 1 ;
64537: LD_ADDR_VAR 0 2
64541: PUSH
64542: LD_VAR 0 1
64546: PUSH
64547: LD_INT 1
64549: MINUS
64550: ST_TO_ADDR
// end ;
64551: LD_VAR 0 2
64555: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64556: LD_INT 0
64558: PPUSH
64559: PPUSH
64560: PPUSH
64561: PPUSH
64562: PPUSH
64563: PPUSH
64564: PPUSH
64565: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64566: LD_VAR 0 1
64570: PPUSH
64571: LD_VAR 0 2
64575: PPUSH
64576: CALL_OW 488
64580: NOT
64581: PUSH
64582: LD_VAR 0 3
64586: PPUSH
64587: LD_VAR 0 4
64591: PPUSH
64592: CALL_OW 488
64596: NOT
64597: OR
64598: IFFALSE 64611
// begin result := - 1 ;
64600: LD_ADDR_VAR 0 5
64604: PUSH
64605: LD_INT 1
64607: NEG
64608: ST_TO_ADDR
// exit ;
64609: GO 64846
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64611: LD_ADDR_VAR 0 12
64615: PUSH
64616: LD_VAR 0 1
64620: PPUSH
64621: LD_VAR 0 2
64625: PPUSH
64626: LD_VAR 0 3
64630: PPUSH
64631: LD_VAR 0 4
64635: PPUSH
64636: CALL 63696 0 4
64640: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64641: LD_ADDR_VAR 0 11
64645: PUSH
64646: LD_VAR 0 1
64650: PPUSH
64651: LD_VAR 0 2
64655: PPUSH
64656: LD_VAR 0 12
64660: PUSH
64661: LD_INT 1
64663: ARRAY
64664: PPUSH
64665: LD_VAR 0 12
64669: PUSH
64670: LD_INT 2
64672: ARRAY
64673: PPUSH
64674: CALL_OW 298
64678: ST_TO_ADDR
// distance := 9999 ;
64679: LD_ADDR_VAR 0 10
64683: PUSH
64684: LD_INT 9999
64686: ST_TO_ADDR
// for i := 0 to 5 do
64687: LD_ADDR_VAR 0 6
64691: PUSH
64692: DOUBLE
64693: LD_INT 0
64695: DEC
64696: ST_TO_ADDR
64697: LD_INT 5
64699: PUSH
64700: FOR_TO
64701: IFFALSE 64844
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64703: LD_ADDR_VAR 0 7
64707: PUSH
64708: LD_VAR 0 1
64712: PPUSH
64713: LD_VAR 0 6
64717: PPUSH
64718: LD_VAR 0 11
64722: PPUSH
64723: CALL_OW 272
64727: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64728: LD_ADDR_VAR 0 8
64732: PUSH
64733: LD_VAR 0 2
64737: PPUSH
64738: LD_VAR 0 6
64742: PPUSH
64743: LD_VAR 0 11
64747: PPUSH
64748: CALL_OW 273
64752: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64753: LD_VAR 0 7
64757: PPUSH
64758: LD_VAR 0 8
64762: PPUSH
64763: CALL_OW 488
64767: NOT
64768: IFFALSE 64772
// continue ;
64770: GO 64700
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64772: LD_ADDR_VAR 0 9
64776: PUSH
64777: LD_VAR 0 12
64781: PUSH
64782: LD_INT 1
64784: ARRAY
64785: PPUSH
64786: LD_VAR 0 12
64790: PUSH
64791: LD_INT 2
64793: ARRAY
64794: PPUSH
64795: LD_VAR 0 7
64799: PPUSH
64800: LD_VAR 0 8
64804: PPUSH
64805: CALL_OW 298
64809: ST_TO_ADDR
// if tmp < distance then
64810: LD_VAR 0 9
64814: PUSH
64815: LD_VAR 0 10
64819: LESS
64820: IFFALSE 64842
// begin result := i ;
64822: LD_ADDR_VAR 0 5
64826: PUSH
64827: LD_VAR 0 6
64831: ST_TO_ADDR
// distance := tmp ;
64832: LD_ADDR_VAR 0 10
64836: PUSH
64837: LD_VAR 0 9
64841: ST_TO_ADDR
// end ; end ;
64842: GO 64700
64844: POP
64845: POP
// end ;
64846: LD_VAR 0 5
64850: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64851: LD_INT 0
64853: PPUSH
64854: PPUSH
// if not driver or not IsInUnit ( driver ) then
64855: LD_VAR 0 1
64859: NOT
64860: PUSH
64861: LD_VAR 0 1
64865: PPUSH
64866: CALL_OW 310
64870: NOT
64871: OR
64872: IFFALSE 64876
// exit ;
64874: GO 64966
// vehicle := IsInUnit ( driver ) ;
64876: LD_ADDR_VAR 0 3
64880: PUSH
64881: LD_VAR 0 1
64885: PPUSH
64886: CALL_OW 310
64890: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64891: LD_VAR 0 1
64895: PPUSH
64896: LD_STRING \
64898: PUSH
64899: LD_INT 0
64901: PUSH
64902: LD_INT 0
64904: PUSH
64905: LD_INT 0
64907: PUSH
64908: LD_INT 0
64910: PUSH
64911: LD_INT 0
64913: PUSH
64914: LD_INT 0
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: PUSH
64926: LD_STRING E
64928: PUSH
64929: LD_INT 0
64931: PUSH
64932: LD_INT 0
64934: PUSH
64935: LD_VAR 0 3
64939: PUSH
64940: LD_INT 0
64942: PUSH
64943: LD_INT 0
64945: PUSH
64946: LD_INT 0
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PPUSH
64962: CALL_OW 446
// end ;
64966: LD_VAR 0 2
64970: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64971: LD_INT 0
64973: PPUSH
64974: PPUSH
// if not driver or not IsInUnit ( driver ) then
64975: LD_VAR 0 1
64979: NOT
64980: PUSH
64981: LD_VAR 0 1
64985: PPUSH
64986: CALL_OW 310
64990: NOT
64991: OR
64992: IFFALSE 64996
// exit ;
64994: GO 65086
// vehicle := IsInUnit ( driver ) ;
64996: LD_ADDR_VAR 0 3
65000: PUSH
65001: LD_VAR 0 1
65005: PPUSH
65006: CALL_OW 310
65010: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65011: LD_VAR 0 1
65015: PPUSH
65016: LD_STRING \
65018: PUSH
65019: LD_INT 0
65021: PUSH
65022: LD_INT 0
65024: PUSH
65025: LD_INT 0
65027: PUSH
65028: LD_INT 0
65030: PUSH
65031: LD_INT 0
65033: PUSH
65034: LD_INT 0
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: PUSH
65046: LD_STRING E
65048: PUSH
65049: LD_INT 0
65051: PUSH
65052: LD_INT 0
65054: PUSH
65055: LD_VAR 0 3
65059: PUSH
65060: LD_INT 0
65062: PUSH
65063: LD_INT 0
65065: PUSH
65066: LD_INT 0
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PPUSH
65082: CALL_OW 447
// end ;
65086: LD_VAR 0 2
65090: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65091: LD_INT 0
65093: PPUSH
65094: PPUSH
65095: PPUSH
// tmp := [ ] ;
65096: LD_ADDR_VAR 0 5
65100: PUSH
65101: EMPTY
65102: ST_TO_ADDR
// for i in units do
65103: LD_ADDR_VAR 0 4
65107: PUSH
65108: LD_VAR 0 1
65112: PUSH
65113: FOR_IN
65114: IFFALSE 65152
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65116: LD_ADDR_VAR 0 5
65120: PUSH
65121: LD_VAR 0 5
65125: PPUSH
65126: LD_VAR 0 5
65130: PUSH
65131: LD_INT 1
65133: PLUS
65134: PPUSH
65135: LD_VAR 0 4
65139: PPUSH
65140: CALL_OW 256
65144: PPUSH
65145: CALL_OW 2
65149: ST_TO_ADDR
65150: GO 65113
65152: POP
65153: POP
// if not tmp then
65154: LD_VAR 0 5
65158: NOT
65159: IFFALSE 65163
// exit ;
65161: GO 65211
// if asc then
65163: LD_VAR 0 2
65167: IFFALSE 65191
// result := SortListByListAsc ( units , tmp ) else
65169: LD_ADDR_VAR 0 3
65173: PUSH
65174: LD_VAR 0 1
65178: PPUSH
65179: LD_VAR 0 5
65183: PPUSH
65184: CALL_OW 76
65188: ST_TO_ADDR
65189: GO 65211
// result := SortListByListDesc ( units , tmp ) ;
65191: LD_ADDR_VAR 0 3
65195: PUSH
65196: LD_VAR 0 1
65200: PPUSH
65201: LD_VAR 0 5
65205: PPUSH
65206: CALL_OW 77
65210: ST_TO_ADDR
// end ;
65211: LD_VAR 0 3
65215: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65216: LD_INT 0
65218: PPUSH
65219: PPUSH
// task := GetTaskList ( mech ) ;
65220: LD_ADDR_VAR 0 4
65224: PUSH
65225: LD_VAR 0 1
65229: PPUSH
65230: CALL_OW 437
65234: ST_TO_ADDR
// if not task then
65235: LD_VAR 0 4
65239: NOT
65240: IFFALSE 65244
// exit ;
65242: GO 65286
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65244: LD_ADDR_VAR 0 3
65248: PUSH
65249: LD_VAR 0 4
65253: PUSH
65254: LD_INT 1
65256: ARRAY
65257: PUSH
65258: LD_INT 1
65260: ARRAY
65261: PUSH
65262: LD_STRING r
65264: EQUAL
65265: PUSH
65266: LD_VAR 0 4
65270: PUSH
65271: LD_INT 1
65273: ARRAY
65274: PUSH
65275: LD_INT 4
65277: ARRAY
65278: PUSH
65279: LD_VAR 0 2
65283: EQUAL
65284: AND
65285: ST_TO_ADDR
// end ;
65286: LD_VAR 0 3
65290: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65291: LD_INT 0
65293: PPUSH
// SetDir ( unit , d ) ;
65294: LD_VAR 0 1
65298: PPUSH
65299: LD_VAR 0 4
65303: PPUSH
65304: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65308: LD_VAR 0 1
65312: PPUSH
65313: LD_VAR 0 2
65317: PPUSH
65318: LD_VAR 0 3
65322: PPUSH
65323: LD_VAR 0 5
65327: PPUSH
65328: CALL_OW 48
// end ;
65332: LD_VAR 0 6
65336: RET
// export function ToNaturalNumber ( number ) ; begin
65337: LD_INT 0
65339: PPUSH
// result := number div 1 ;
65340: LD_ADDR_VAR 0 2
65344: PUSH
65345: LD_VAR 0 1
65349: PUSH
65350: LD_INT 1
65352: DIV
65353: ST_TO_ADDR
// if number < 0 then
65354: LD_VAR 0 1
65358: PUSH
65359: LD_INT 0
65361: LESS
65362: IFFALSE 65372
// result := 0 ;
65364: LD_ADDR_VAR 0 2
65368: PUSH
65369: LD_INT 0
65371: ST_TO_ADDR
// end ;
65372: LD_VAR 0 2
65376: RET
// export function SortByClass ( units , class ) ; var un ; begin
65377: LD_INT 0
65379: PPUSH
65380: PPUSH
// if not units or not class then
65381: LD_VAR 0 1
65385: NOT
65386: PUSH
65387: LD_VAR 0 2
65391: NOT
65392: OR
65393: IFFALSE 65397
// exit ;
65395: GO 65492
// result := [ ] ;
65397: LD_ADDR_VAR 0 3
65401: PUSH
65402: EMPTY
65403: ST_TO_ADDR
// for un in units do
65404: LD_ADDR_VAR 0 4
65408: PUSH
65409: LD_VAR 0 1
65413: PUSH
65414: FOR_IN
65415: IFFALSE 65490
// if GetClass ( un ) = class then
65417: LD_VAR 0 4
65421: PPUSH
65422: CALL_OW 257
65426: PUSH
65427: LD_VAR 0 2
65431: EQUAL
65432: IFFALSE 65459
// result := Insert ( result , 1 , un ) else
65434: LD_ADDR_VAR 0 3
65438: PUSH
65439: LD_VAR 0 3
65443: PPUSH
65444: LD_INT 1
65446: PPUSH
65447: LD_VAR 0 4
65451: PPUSH
65452: CALL_OW 2
65456: ST_TO_ADDR
65457: GO 65488
// result := Replace ( result , result + 1 , un ) ;
65459: LD_ADDR_VAR 0 3
65463: PUSH
65464: LD_VAR 0 3
65468: PPUSH
65469: LD_VAR 0 3
65473: PUSH
65474: LD_INT 1
65476: PLUS
65477: PPUSH
65478: LD_VAR 0 4
65482: PPUSH
65483: CALL_OW 1
65487: ST_TO_ADDR
65488: GO 65414
65490: POP
65491: POP
// end ;
65492: LD_VAR 0 3
65496: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65497: LD_INT 0
65499: PPUSH
65500: PPUSH
65501: PPUSH
65502: PPUSH
65503: PPUSH
65504: PPUSH
65505: PPUSH
// result := [ ] ;
65506: LD_ADDR_VAR 0 4
65510: PUSH
65511: EMPTY
65512: ST_TO_ADDR
// if x - r < 0 then
65513: LD_VAR 0 1
65517: PUSH
65518: LD_VAR 0 3
65522: MINUS
65523: PUSH
65524: LD_INT 0
65526: LESS
65527: IFFALSE 65539
// min_x := 0 else
65529: LD_ADDR_VAR 0 8
65533: PUSH
65534: LD_INT 0
65536: ST_TO_ADDR
65537: GO 65555
// min_x := x - r ;
65539: LD_ADDR_VAR 0 8
65543: PUSH
65544: LD_VAR 0 1
65548: PUSH
65549: LD_VAR 0 3
65553: MINUS
65554: ST_TO_ADDR
// if y - r < 0 then
65555: LD_VAR 0 2
65559: PUSH
65560: LD_VAR 0 3
65564: MINUS
65565: PUSH
65566: LD_INT 0
65568: LESS
65569: IFFALSE 65581
// min_y := 0 else
65571: LD_ADDR_VAR 0 7
65575: PUSH
65576: LD_INT 0
65578: ST_TO_ADDR
65579: GO 65597
// min_y := y - r ;
65581: LD_ADDR_VAR 0 7
65585: PUSH
65586: LD_VAR 0 2
65590: PUSH
65591: LD_VAR 0 3
65595: MINUS
65596: ST_TO_ADDR
// max_x := x + r ;
65597: LD_ADDR_VAR 0 9
65601: PUSH
65602: LD_VAR 0 1
65606: PUSH
65607: LD_VAR 0 3
65611: PLUS
65612: ST_TO_ADDR
// max_y := y + r ;
65613: LD_ADDR_VAR 0 10
65617: PUSH
65618: LD_VAR 0 2
65622: PUSH
65623: LD_VAR 0 3
65627: PLUS
65628: ST_TO_ADDR
// for _x = min_x to max_x do
65629: LD_ADDR_VAR 0 5
65633: PUSH
65634: DOUBLE
65635: LD_VAR 0 8
65639: DEC
65640: ST_TO_ADDR
65641: LD_VAR 0 9
65645: PUSH
65646: FOR_TO
65647: IFFALSE 65748
// for _y = min_y to max_y do
65649: LD_ADDR_VAR 0 6
65653: PUSH
65654: DOUBLE
65655: LD_VAR 0 7
65659: DEC
65660: ST_TO_ADDR
65661: LD_VAR 0 10
65665: PUSH
65666: FOR_TO
65667: IFFALSE 65744
// begin if not ValidHex ( _x , _y ) then
65669: LD_VAR 0 5
65673: PPUSH
65674: LD_VAR 0 6
65678: PPUSH
65679: CALL_OW 488
65683: NOT
65684: IFFALSE 65688
// continue ;
65686: GO 65666
// if GetResourceTypeXY ( _x , _y ) then
65688: LD_VAR 0 5
65692: PPUSH
65693: LD_VAR 0 6
65697: PPUSH
65698: CALL_OW 283
65702: IFFALSE 65742
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65704: LD_ADDR_VAR 0 4
65708: PUSH
65709: LD_VAR 0 4
65713: PPUSH
65714: LD_VAR 0 4
65718: PUSH
65719: LD_INT 1
65721: PLUS
65722: PPUSH
65723: LD_VAR 0 5
65727: PUSH
65728: LD_VAR 0 6
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PPUSH
65737: CALL_OW 1
65741: ST_TO_ADDR
// end ;
65742: GO 65666
65744: POP
65745: POP
65746: GO 65646
65748: POP
65749: POP
// end ;
65750: LD_VAR 0 4
65754: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65755: LD_INT 0
65757: PPUSH
65758: PPUSH
65759: PPUSH
65760: PPUSH
65761: PPUSH
65762: PPUSH
65763: PPUSH
65764: PPUSH
// if not units then
65765: LD_VAR 0 1
65769: NOT
65770: IFFALSE 65774
// exit ;
65772: GO 66298
// result := UnitFilter ( units , [ f_ok ] ) ;
65774: LD_ADDR_VAR 0 3
65778: PUSH
65779: LD_VAR 0 1
65783: PPUSH
65784: LD_INT 50
65786: PUSH
65787: EMPTY
65788: LIST
65789: PPUSH
65790: CALL_OW 72
65794: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65795: LD_ADDR_VAR 0 8
65799: PUSH
65800: LD_VAR 0 1
65804: PUSH
65805: LD_INT 1
65807: ARRAY
65808: PPUSH
65809: CALL_OW 255
65813: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65814: LD_ADDR_VAR 0 10
65818: PUSH
65819: LD_INT 29
65821: PUSH
65822: LD_INT 91
65824: PUSH
65825: LD_INT 49
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: LIST
65832: ST_TO_ADDR
// if not result then
65833: LD_VAR 0 3
65837: NOT
65838: IFFALSE 65842
// exit ;
65840: GO 66298
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65842: LD_ADDR_VAR 0 5
65846: PUSH
65847: LD_INT 81
65849: PUSH
65850: LD_VAR 0 8
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: PPUSH
65859: CALL_OW 69
65863: ST_TO_ADDR
// for i in result do
65864: LD_ADDR_VAR 0 4
65868: PUSH
65869: LD_VAR 0 3
65873: PUSH
65874: FOR_IN
65875: IFFALSE 66296
// begin tag := GetTag ( i ) + 1 ;
65877: LD_ADDR_VAR 0 9
65881: PUSH
65882: LD_VAR 0 4
65886: PPUSH
65887: CALL_OW 110
65891: PUSH
65892: LD_INT 1
65894: PLUS
65895: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65896: LD_ADDR_VAR 0 7
65900: PUSH
65901: LD_VAR 0 4
65905: PPUSH
65906: CALL_OW 250
65910: PPUSH
65911: LD_VAR 0 4
65915: PPUSH
65916: CALL_OW 251
65920: PPUSH
65921: LD_INT 6
65923: PPUSH
65924: CALL 65497 0 3
65928: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65929: LD_VAR 0 4
65933: PPUSH
65934: CALL_OW 247
65938: PUSH
65939: LD_INT 2
65941: EQUAL
65942: PUSH
65943: LD_VAR 0 7
65947: AND
65948: PUSH
65949: LD_VAR 0 4
65953: PPUSH
65954: CALL_OW 264
65958: PUSH
65959: LD_VAR 0 10
65963: IN
65964: NOT
65965: AND
65966: IFFALSE 66005
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65968: LD_VAR 0 4
65972: PPUSH
65973: LD_VAR 0 7
65977: PUSH
65978: LD_INT 1
65980: ARRAY
65981: PUSH
65982: LD_INT 1
65984: ARRAY
65985: PPUSH
65986: LD_VAR 0 7
65990: PUSH
65991: LD_INT 1
65993: ARRAY
65994: PUSH
65995: LD_INT 2
65997: ARRAY
65998: PPUSH
65999: CALL_OW 116
66003: GO 66294
// if path > tag then
66005: LD_VAR 0 2
66009: PUSH
66010: LD_VAR 0 9
66014: GREATER
66015: IFFALSE 66223
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
66017: LD_ADDR_VAR 0 6
66021: PUSH
66022: LD_VAR 0 5
66026: PPUSH
66027: LD_INT 91
66029: PUSH
66030: LD_VAR 0 4
66034: PUSH
66035: LD_INT 8
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: LIST
66042: PPUSH
66043: CALL_OW 72
66047: ST_TO_ADDR
// if nearEnemy then
66048: LD_VAR 0 6
66052: IFFALSE 66121
// begin if GetWeapon ( i ) = ru_time_lapser then
66054: LD_VAR 0 4
66058: PPUSH
66059: CALL_OW 264
66063: PUSH
66064: LD_INT 49
66066: EQUAL
66067: IFFALSE 66095
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
66069: LD_VAR 0 4
66073: PPUSH
66074: LD_VAR 0 6
66078: PPUSH
66079: LD_VAR 0 4
66083: PPUSH
66084: CALL_OW 74
66088: PPUSH
66089: CALL_OW 112
66093: GO 66119
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
66095: LD_VAR 0 4
66099: PPUSH
66100: LD_VAR 0 6
66104: PPUSH
66105: LD_VAR 0 4
66109: PPUSH
66110: CALL_OW 74
66114: PPUSH
66115: CALL_OW 115
// end else
66119: GO 66221
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66121: LD_VAR 0 4
66125: PPUSH
66126: LD_VAR 0 2
66130: PUSH
66131: LD_VAR 0 9
66135: ARRAY
66136: PUSH
66137: LD_INT 1
66139: ARRAY
66140: PPUSH
66141: LD_VAR 0 2
66145: PUSH
66146: LD_VAR 0 9
66150: ARRAY
66151: PUSH
66152: LD_INT 2
66154: ARRAY
66155: PPUSH
66156: CALL_OW 297
66160: PUSH
66161: LD_INT 6
66163: GREATER
66164: IFFALSE 66207
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66166: LD_VAR 0 4
66170: PPUSH
66171: LD_VAR 0 2
66175: PUSH
66176: LD_VAR 0 9
66180: ARRAY
66181: PUSH
66182: LD_INT 1
66184: ARRAY
66185: PPUSH
66186: LD_VAR 0 2
66190: PUSH
66191: LD_VAR 0 9
66195: ARRAY
66196: PUSH
66197: LD_INT 2
66199: ARRAY
66200: PPUSH
66201: CALL_OW 114
66205: GO 66221
// SetTag ( i , tag ) ;
66207: LD_VAR 0 4
66211: PPUSH
66212: LD_VAR 0 9
66216: PPUSH
66217: CALL_OW 109
// end else
66221: GO 66294
// if enemy then
66223: LD_VAR 0 5
66227: IFFALSE 66294
// begin if GetWeapon ( i ) = ru_time_lapser then
66229: LD_VAR 0 4
66233: PPUSH
66234: CALL_OW 264
66238: PUSH
66239: LD_INT 49
66241: EQUAL
66242: IFFALSE 66270
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66244: LD_VAR 0 4
66248: PPUSH
66249: LD_VAR 0 5
66253: PPUSH
66254: LD_VAR 0 4
66258: PPUSH
66259: CALL_OW 74
66263: PPUSH
66264: CALL_OW 112
66268: GO 66294
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66270: LD_VAR 0 4
66274: PPUSH
66275: LD_VAR 0 5
66279: PPUSH
66280: LD_VAR 0 4
66284: PPUSH
66285: CALL_OW 74
66289: PPUSH
66290: CALL_OW 115
// end ; end ;
66294: GO 65874
66296: POP
66297: POP
// end ;
66298: LD_VAR 0 3
66302: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66303: LD_INT 0
66305: PPUSH
66306: PPUSH
66307: PPUSH
// if not unit or IsInUnit ( unit ) then
66308: LD_VAR 0 1
66312: NOT
66313: PUSH
66314: LD_VAR 0 1
66318: PPUSH
66319: CALL_OW 310
66323: OR
66324: IFFALSE 66328
// exit ;
66326: GO 66419
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66328: LD_ADDR_VAR 0 4
66332: PUSH
66333: LD_VAR 0 1
66337: PPUSH
66338: CALL_OW 250
66342: PPUSH
66343: LD_VAR 0 2
66347: PPUSH
66348: LD_INT 1
66350: PPUSH
66351: CALL_OW 272
66355: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66356: LD_ADDR_VAR 0 5
66360: PUSH
66361: LD_VAR 0 1
66365: PPUSH
66366: CALL_OW 251
66370: PPUSH
66371: LD_VAR 0 2
66375: PPUSH
66376: LD_INT 1
66378: PPUSH
66379: CALL_OW 273
66383: ST_TO_ADDR
// if ValidHex ( x , y ) then
66384: LD_VAR 0 4
66388: PPUSH
66389: LD_VAR 0 5
66393: PPUSH
66394: CALL_OW 488
66398: IFFALSE 66419
// ComTurnXY ( unit , x , y ) ;
66400: LD_VAR 0 1
66404: PPUSH
66405: LD_VAR 0 4
66409: PPUSH
66410: LD_VAR 0 5
66414: PPUSH
66415: CALL_OW 118
// end ;
66419: LD_VAR 0 3
66423: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66424: LD_INT 0
66426: PPUSH
66427: PPUSH
// result := false ;
66428: LD_ADDR_VAR 0 3
66432: PUSH
66433: LD_INT 0
66435: ST_TO_ADDR
// if not units then
66436: LD_VAR 0 2
66440: NOT
66441: IFFALSE 66445
// exit ;
66443: GO 66490
// for i in units do
66445: LD_ADDR_VAR 0 4
66449: PUSH
66450: LD_VAR 0 2
66454: PUSH
66455: FOR_IN
66456: IFFALSE 66488
// if See ( side , i ) then
66458: LD_VAR 0 1
66462: PPUSH
66463: LD_VAR 0 4
66467: PPUSH
66468: CALL_OW 292
66472: IFFALSE 66486
// begin result := true ;
66474: LD_ADDR_VAR 0 3
66478: PUSH
66479: LD_INT 1
66481: ST_TO_ADDR
// exit ;
66482: POP
66483: POP
66484: GO 66490
// end ;
66486: GO 66455
66488: POP
66489: POP
// end ;
66490: LD_VAR 0 3
66494: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66495: LD_INT 0
66497: PPUSH
66498: PPUSH
66499: PPUSH
66500: PPUSH
// if not unit or not points then
66501: LD_VAR 0 1
66505: NOT
66506: PUSH
66507: LD_VAR 0 2
66511: NOT
66512: OR
66513: IFFALSE 66517
// exit ;
66515: GO 66607
// dist := 99999 ;
66517: LD_ADDR_VAR 0 5
66521: PUSH
66522: LD_INT 99999
66524: ST_TO_ADDR
// for i in points do
66525: LD_ADDR_VAR 0 4
66529: PUSH
66530: LD_VAR 0 2
66534: PUSH
66535: FOR_IN
66536: IFFALSE 66605
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66538: LD_ADDR_VAR 0 6
66542: PUSH
66543: LD_VAR 0 1
66547: PPUSH
66548: LD_VAR 0 4
66552: PUSH
66553: LD_INT 1
66555: ARRAY
66556: PPUSH
66557: LD_VAR 0 4
66561: PUSH
66562: LD_INT 2
66564: ARRAY
66565: PPUSH
66566: CALL_OW 297
66570: ST_TO_ADDR
// if tmpDist < dist then
66571: LD_VAR 0 6
66575: PUSH
66576: LD_VAR 0 5
66580: LESS
66581: IFFALSE 66603
// begin result := i ;
66583: LD_ADDR_VAR 0 3
66587: PUSH
66588: LD_VAR 0 4
66592: ST_TO_ADDR
// dist := tmpDist ;
66593: LD_ADDR_VAR 0 5
66597: PUSH
66598: LD_VAR 0 6
66602: ST_TO_ADDR
// end ; end ;
66603: GO 66535
66605: POP
66606: POP
// end ;
66607: LD_VAR 0 3
66611: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66612: LD_INT 0
66614: PPUSH
// uc_side := side ;
66615: LD_ADDR_OWVAR 20
66619: PUSH
66620: LD_VAR 0 1
66624: ST_TO_ADDR
// uc_nation := 3 ;
66625: LD_ADDR_OWVAR 21
66629: PUSH
66630: LD_INT 3
66632: ST_TO_ADDR
// vc_chassis := 25 ;
66633: LD_ADDR_OWVAR 37
66637: PUSH
66638: LD_INT 25
66640: ST_TO_ADDR
// vc_engine := engine_siberite ;
66641: LD_ADDR_OWVAR 39
66645: PUSH
66646: LD_INT 3
66648: ST_TO_ADDR
// vc_control := control_computer ;
66649: LD_ADDR_OWVAR 38
66653: PUSH
66654: LD_INT 3
66656: ST_TO_ADDR
// vc_weapon := 59 ;
66657: LD_ADDR_OWVAR 40
66661: PUSH
66662: LD_INT 59
66664: ST_TO_ADDR
// result := CreateVehicle ;
66665: LD_ADDR_VAR 0 5
66669: PUSH
66670: CALL_OW 45
66674: ST_TO_ADDR
// SetDir ( result , d ) ;
66675: LD_VAR 0 5
66679: PPUSH
66680: LD_VAR 0 4
66684: PPUSH
66685: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66689: LD_VAR 0 5
66693: PPUSH
66694: LD_VAR 0 2
66698: PPUSH
66699: LD_VAR 0 3
66703: PPUSH
66704: LD_INT 0
66706: PPUSH
66707: CALL_OW 48
// end ;
66711: LD_VAR 0 5
66715: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66716: LD_INT 0
66718: PPUSH
66719: PPUSH
66720: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66721: LD_ADDR_VAR 0 2
66725: PUSH
66726: LD_INT 0
66728: PUSH
66729: LD_INT 0
66731: PUSH
66732: LD_INT 0
66734: PUSH
66735: LD_INT 0
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: LIST
66742: LIST
66743: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66744: LD_VAR 0 1
66748: NOT
66749: PUSH
66750: LD_VAR 0 1
66754: PPUSH
66755: CALL_OW 264
66759: PUSH
66760: LD_INT 12
66762: PUSH
66763: LD_INT 51
66765: PUSH
66766: LD_INT 32
66768: PUSH
66769: LD_INT 89
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: IN
66778: NOT
66779: OR
66780: IFFALSE 66784
// exit ;
66782: GO 66882
// for i := 1 to 3 do
66784: LD_ADDR_VAR 0 3
66788: PUSH
66789: DOUBLE
66790: LD_INT 1
66792: DEC
66793: ST_TO_ADDR
66794: LD_INT 3
66796: PUSH
66797: FOR_TO
66798: IFFALSE 66880
// begin tmp := GetCargo ( cargo , i ) ;
66800: LD_ADDR_VAR 0 4
66804: PUSH
66805: LD_VAR 0 1
66809: PPUSH
66810: LD_VAR 0 3
66814: PPUSH
66815: CALL_OW 289
66819: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66820: LD_ADDR_VAR 0 2
66824: PUSH
66825: LD_VAR 0 2
66829: PPUSH
66830: LD_VAR 0 3
66834: PPUSH
66835: LD_VAR 0 4
66839: PPUSH
66840: CALL_OW 1
66844: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66845: LD_ADDR_VAR 0 2
66849: PUSH
66850: LD_VAR 0 2
66854: PPUSH
66855: LD_INT 4
66857: PPUSH
66858: LD_VAR 0 2
66862: PUSH
66863: LD_INT 4
66865: ARRAY
66866: PUSH
66867: LD_VAR 0 4
66871: PLUS
66872: PPUSH
66873: CALL_OW 1
66877: ST_TO_ADDR
// end ;
66878: GO 66797
66880: POP
66881: POP
// end ;
66882: LD_VAR 0 2
66886: RET
// export function Length ( array ) ; begin
66887: LD_INT 0
66889: PPUSH
// result := array + 0 ;
66890: LD_ADDR_VAR 0 2
66894: PUSH
66895: LD_VAR 0 1
66899: PUSH
66900: LD_INT 0
66902: PLUS
66903: ST_TO_ADDR
// end ;
66904: LD_VAR 0 2
66908: RET
// export function PrepareArray ( array ) ; begin
66909: LD_INT 0
66911: PPUSH
// result := array diff 0 ;
66912: LD_ADDR_VAR 0 2
66916: PUSH
66917: LD_VAR 0 1
66921: PUSH
66922: LD_INT 0
66924: DIFF
66925: ST_TO_ADDR
// if not result [ 1 ] then
66926: LD_VAR 0 2
66930: PUSH
66931: LD_INT 1
66933: ARRAY
66934: NOT
66935: IFFALSE 66955
// result := Delete ( result , 1 ) ;
66937: LD_ADDR_VAR 0 2
66941: PUSH
66942: LD_VAR 0 2
66946: PPUSH
66947: LD_INT 1
66949: PPUSH
66950: CALL_OW 3
66954: ST_TO_ADDR
// end ;
66955: LD_VAR 0 2
66959: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
66960: LD_INT 0
66962: PPUSH
66963: PPUSH
66964: PPUSH
66965: PPUSH
// sibRocketRange := 25 ;
66966: LD_ADDR_VAR 0 6
66970: PUSH
66971: LD_INT 25
66973: ST_TO_ADDR
// result := false ;
66974: LD_ADDR_VAR 0 4
66978: PUSH
66979: LD_INT 0
66981: ST_TO_ADDR
// for i := 0 to 5 do
66982: LD_ADDR_VAR 0 5
66986: PUSH
66987: DOUBLE
66988: LD_INT 0
66990: DEC
66991: ST_TO_ADDR
66992: LD_INT 5
66994: PUSH
66995: FOR_TO
66996: IFFALSE 67063
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
66998: LD_VAR 0 1
67002: PPUSH
67003: LD_VAR 0 5
67007: PPUSH
67008: LD_VAR 0 6
67012: PPUSH
67013: CALL_OW 272
67017: PPUSH
67018: LD_VAR 0 2
67022: PPUSH
67023: LD_VAR 0 5
67027: PPUSH
67028: LD_VAR 0 6
67032: PPUSH
67033: CALL_OW 273
67037: PPUSH
67038: LD_VAR 0 3
67042: PPUSH
67043: CALL_OW 309
67047: IFFALSE 67061
// begin result := true ;
67049: LD_ADDR_VAR 0 4
67053: PUSH
67054: LD_INT 1
67056: ST_TO_ADDR
// exit ;
67057: POP
67058: POP
67059: GO 67065
// end ;
67061: GO 66995
67063: POP
67064: POP
// end ; end_of_file
67065: LD_VAR 0 4
67069: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67070: LD_VAR 0 1
67074: PPUSH
67075: LD_VAR 0 2
67079: PPUSH
67080: LD_VAR 0 3
67084: PPUSH
67085: LD_VAR 0 4
67089: PPUSH
67090: LD_VAR 0 5
67094: PPUSH
67095: LD_VAR 0 6
67099: PPUSH
67100: CALL 5815 0 6
// end ;
67104: PPOPN 6
67106: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
67107: LD_INT 0
67109: PPUSH
// begin if not units then
67110: LD_VAR 0 1
67114: NOT
67115: IFFALSE 67119
// exit ;
67117: GO 67119
// end ;
67119: PPOPN 7
67121: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
67122: CALL 5786 0 0
// end ; end_of_file
67126: PPOPN 1
67128: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67129: LD_VAR 0 1
67133: PUSH
67134: LD_INT 200
67136: DOUBLE
67137: GREATEREQUAL
67138: IFFALSE 67146
67140: LD_INT 299
67142: DOUBLE
67143: LESSEQUAL
67144: IFTRUE 67148
67146: GO 67180
67148: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67149: LD_VAR 0 1
67153: PPUSH
67154: LD_VAR 0 2
67158: PPUSH
67159: LD_VAR 0 3
67163: PPUSH
67164: LD_VAR 0 4
67168: PPUSH
67169: LD_VAR 0 5
67173: PPUSH
67174: CALL 21789 0 5
67178: GO 67257
67180: LD_INT 300
67182: DOUBLE
67183: GREATEREQUAL
67184: IFFALSE 67192
67186: LD_INT 399
67188: DOUBLE
67189: LESSEQUAL
67190: IFTRUE 67194
67192: GO 67256
67194: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67195: LD_VAR 0 1
67199: PPUSH
67200: LD_VAR 0 2
67204: PPUSH
67205: LD_VAR 0 3
67209: PPUSH
67210: LD_VAR 0 4
67214: PPUSH
67215: LD_VAR 0 5
67219: PPUSH
67220: LD_VAR 0 6
67224: PPUSH
67225: LD_VAR 0 7
67229: PPUSH
67230: LD_VAR 0 8
67234: PPUSH
67235: LD_VAR 0 9
67239: PPUSH
67240: LD_VAR 0 10
67244: PPUSH
67245: LD_VAR 0 11
67249: PPUSH
67250: CALL 18122 0 11
67254: GO 67257
67256: POP
// end ;
67257: PPOPN 11
67259: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67260: LD_VAR 0 1
67264: PPUSH
67265: LD_VAR 0 2
67269: PPUSH
67270: LD_VAR 0 3
67274: PPUSH
67275: LD_VAR 0 4
67279: PPUSH
67280: LD_VAR 0 5
67284: PPUSH
67285: CALL 21525 0 5
// end ;
67289: PPOPN 5
67291: END
