// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson , Mike ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export selectedPeople ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect := 0 ;
  15: LD_ADDR_EXP 19
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene := 1 ;
  23: LD_ADDR_EXP 20
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans := [ ] ;
  31: LD_ADDR_EXP 13
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans := [ ] ;
  38: LD_ADDR_EXP 14
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles := [ ] ;
  45: LD_ADDR_EXP 15
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 12
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// resources := [ ] ;
  59: LD_ADDR_EXP 22
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// mission_prefix := 06_ ;
  66: LD_ADDR_EXP 23
  70: PUSH
  71: LD_STRING 06_
  73: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  74: LD_ADDR_EXP 24
  78: PUSH
  79: LD_STRING 05_
  81: ST_TO_ADDR
// PrepareDeltaBase ;
  82: CALL 2382 0 0
// CreateNature ;
  86: CALL 170 0 0
// LoadVehicles ;
  90: CALL 1530 0 0
// PrepareHeroes ;
  94: CALL 299 0 0
// PrepareRandoms ;
  98: CALL 1795 0 0
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 102: LD_ADDR_EXP 21
 106: PUSH
 107: LD_INT 22
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 2
 119: PUSH
 120: LD_INT 30
 122: PUSH
 123: LD_INT 6
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 30
 132: PUSH
 133: LD_INT 7
 135: PUSH
 136: EMPTY
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 30
 142: PUSH
 143: LD_INT 8
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: PPUSH
 160: CALL_OW 69
 164: ST_TO_ADDR
// Action ;
 165: CALL 3310 0 0
// end ;
 169: END
// export function CreateNature ; var i ; begin
 170: LD_INT 0
 172: PPUSH
 173: PPUSH
// uc_side := 0 ;
 174: LD_ADDR_OWVAR 20
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// uc_nation := 0 ;
 182: LD_ADDR_OWVAR 21
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// for i = 1 to 4 do
 190: LD_ADDR_VAR 0 2
 194: PUSH
 195: DOUBLE
 196: LD_INT 1
 198: DEC
 199: ST_TO_ADDR
 200: LD_INT 4
 202: PUSH
 203: FOR_TO
 204: IFFALSE 292
// begin hc_gallery :=  ;
 206: LD_ADDR_OWVAR 33
 210: PUSH
 211: LD_STRING 
 213: ST_TO_ADDR
// hc_name :=  ;
 214: LD_ADDR_OWVAR 26
 218: PUSH
 219: LD_STRING 
 221: ST_TO_ADDR
// hc_agressivity := 0 ;
 222: LD_ADDR_OWVAR 35
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// hc_attr := [ rand ( 10 , 11 ) , rand ( 10 , 12 ) ] ;
 230: LD_ADDR_OWVAR 29
 234: PUSH
 235: LD_INT 10
 237: PPUSH
 238: LD_INT 11
 240: PPUSH
 241: CALL_OW 12
 245: PUSH
 246: LD_INT 10
 248: PPUSH
 249: LD_INT 12
 251: PPUSH
 252: CALL_OW 12
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: ST_TO_ADDR
// hc_class := class_apeman ;
 261: LD_ADDR_OWVAR 28
 265: PUSH
 266: LD_INT 12
 268: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 22 , 18 , 20 , false ) ;
 269: CALL_OW 44
 273: PPUSH
 274: LD_INT 22
 276: PPUSH
 277: LD_INT 18
 279: PPUSH
 280: LD_INT 20
 282: PPUSH
 283: LD_INT 0
 285: PPUSH
 286: CALL_OW 50
// end ;
 290: GO 203
 292: POP
 293: POP
// end ; end_of_file
 294: LD_VAR 0 1
 298: RET
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
 305: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 306: LD_ADDR_VAR 0 3
 310: PUSH
 311: LD_INT 22
 313: PUSH
 314: LD_INT 1
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 21
 323: PUSH
 324: LD_INT 3
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: LD_INT 30
 333: PUSH
 334: LD_INT 0
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PPUSH
 346: CALL_OW 69
 350: ST_TO_ADDR
// if tmp then
 351: LD_VAR 0 3
 355: IFFALSE 373
// SetBName ( tmp [ 1 ] , delta ) ;
 357: LD_VAR 0 3
 361: PUSH
 362: LD_INT 1
 364: ARRAY
 365: PPUSH
 366: LD_STRING delta
 368: PPUSH
 369: CALL_OW 500
// uc_side := 1 ;
 373: LD_ADDR_OWVAR 20
 377: PUSH
 378: LD_INT 1
 380: ST_TO_ADDR
// uc_nation := 1 ;
 381: LD_ADDR_OWVAR 21
 385: PUSH
 386: LD_INT 1
 388: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 389: LD_ADDR_EXP 1
 393: PUSH
 394: LD_STRING JMM
 396: PPUSH
 397: LD_INT 1
 399: PPUSH
 400: LD_EXP 24
 404: PPUSH
 405: CALL 25961 0 3
 409: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 410: LD_ADDR_EXP 17
 414: PUSH
 415: LD_STRING Harisson
 417: PPUSH
 418: LD_INT 0
 420: PPUSH
 421: LD_STRING 
 423: PPUSH
 424: CALL 25961 0 3
 428: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 429: LD_EXP 1
 433: PPUSH
 434: LD_VAR 0 3
 438: PUSH
 439: LD_INT 1
 441: ARRAY
 442: PPUSH
 443: CALL_OW 250
 447: PPUSH
 448: LD_VAR 0 3
 452: PUSH
 453: LD_INT 1
 455: ARRAY
 456: PPUSH
 457: CALL_OW 251
 461: PPUSH
 462: LD_INT 5
 464: PPUSH
 465: LD_INT 0
 467: PPUSH
 468: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 472: LD_EXP 1
 476: PPUSH
 477: LD_INT 1
 479: PPUSH
 480: CALL_OW 336
// Gladstone := PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
 484: LD_ADDR_EXP 2
 488: PUSH
 489: LD_STRING Gladstone
 491: PPUSH
 492: LD_INT 1
 494: PPUSH
 495: LD_EXP 24
 499: PPUSH
 500: CALL 25961 0 3
 504: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 505: LD_EXP 2
 509: PPUSH
 510: LD_VAR 0 3
 514: PUSH
 515: LD_INT 1
 517: ARRAY
 518: PPUSH
 519: CALL_OW 250
 523: PPUSH
 524: LD_VAR 0 3
 528: PUSH
 529: LD_INT 1
 531: ARRAY
 532: PPUSH
 533: CALL_OW 251
 537: PPUSH
 538: LD_INT 5
 540: PPUSH
 541: LD_INT 0
 543: PPUSH
 544: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 548: LD_EXP 2
 552: PPUSH
 553: LD_INT 4
 555: PPUSH
 556: CALL_OW 336
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
 560: LD_ADDR_EXP 3
 564: PUSH
 565: LD_STRING Denis
 567: PPUSH
 568: LD_INT 1
 570: PPUSH
 571: LD_EXP 24
 575: PPUSH
 576: CALL 25961 0 3
 580: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 581: LD_EXP 3
 585: PPUSH
 586: LD_VAR 0 3
 590: PUSH
 591: LD_INT 1
 593: ARRAY
 594: PPUSH
 595: CALL_OW 250
 599: PPUSH
 600: LD_VAR 0 3
 604: PUSH
 605: LD_INT 1
 607: ARRAY
 608: PPUSH
 609: CALL_OW 251
 613: PPUSH
 614: LD_INT 5
 616: PPUSH
 617: LD_INT 0
 619: PPUSH
 620: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 624: LD_EXP 3
 628: PPUSH
 629: LD_INT 4
 631: PPUSH
 632: CALL_OW 336
// Mike := PrepareUnit ( Mike , true , mission_prefix_prev ) ;
 636: LD_ADDR_EXP 10
 640: PUSH
 641: LD_STRING Mike
 643: PPUSH
 644: LD_INT 1
 646: PPUSH
 647: LD_EXP 24
 651: PPUSH
 652: CALL 25961 0 3
 656: ST_TO_ADDR
// PlaceUnitXYR ( Mike , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 657: LD_EXP 10
 661: PPUSH
 662: LD_VAR 0 3
 666: PUSH
 667: LD_INT 1
 669: ARRAY
 670: PPUSH
 671: CALL_OW 250
 675: PPUSH
 676: LD_VAR 0 3
 680: PUSH
 681: LD_INT 1
 683: ARRAY
 684: PPUSH
 685: CALL_OW 251
 689: PPUSH
 690: LD_INT 5
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 50
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 700: LD_STRING FrankInDelta
 702: PPUSH
 703: LD_INT 0
 705: PPUSH
 706: CALL_OW 30
 710: PUSH
 711: LD_INT 1
 713: EQUAL
 714: IFFALSE 792
// begin Frank := PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 716: LD_ADDR_EXP 5
 720: PUSH
 721: LD_STRING Frank
 723: PPUSH
 724: LD_INT 1
 726: PPUSH
 727: LD_EXP 24
 731: PPUSH
 732: CALL 25961 0 3
 736: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 737: LD_EXP 5
 741: PPUSH
 742: LD_VAR 0 3
 746: PUSH
 747: LD_INT 1
 749: ARRAY
 750: PPUSH
 751: CALL_OW 250
 755: PPUSH
 756: LD_VAR 0 3
 760: PUSH
 761: LD_INT 1
 763: ARRAY
 764: PPUSH
 765: CALL_OW 251
 769: PPUSH
 770: LD_INT 5
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 780: LD_EXP 5
 784: PPUSH
 785: LD_INT 1
 787: PPUSH
 788: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 792: LD_STRING LisaInDelta
 794: PPUSH
 795: LD_INT 0
 797: PPUSH
 798: CALL_OW 30
 802: PUSH
 803: LD_INT 1
 805: EQUAL
 806: IFFALSE 884
// begin Lisa := PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 808: LD_ADDR_EXP 4
 812: PUSH
 813: LD_STRING Lisa
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: LD_EXP 24
 823: PPUSH
 824: CALL 25961 0 3
 828: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 829: LD_EXP 4
 833: PPUSH
 834: LD_VAR 0 3
 838: PUSH
 839: LD_INT 1
 841: ARRAY
 842: PPUSH
 843: CALL_OW 250
 847: PPUSH
 848: LD_VAR 0 3
 852: PUSH
 853: LD_INT 1
 855: ARRAY
 856: PPUSH
 857: CALL_OW 251
 861: PPUSH
 862: LD_INT 5
 864: PPUSH
 865: LD_INT 0
 867: PPUSH
 868: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 872: LD_EXP 4
 876: PPUSH
 877: LD_INT 1
 879: PPUSH
 880: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 884: LD_STRING BobbyInDelta
 886: PPUSH
 887: LD_INT 0
 889: PPUSH
 890: CALL_OW 30
 894: PUSH
 895: LD_INT 1
 897: EQUAL
 898: IFFALSE 976
// begin Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 900: LD_ADDR_EXP 6
 904: PUSH
 905: LD_STRING Bobby
 907: PPUSH
 908: LD_INT 1
 910: PPUSH
 911: LD_EXP 24
 915: PPUSH
 916: CALL 25961 0 3
 920: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 921: LD_EXP 6
 925: PPUSH
 926: LD_VAR 0 3
 930: PUSH
 931: LD_INT 1
 933: ARRAY
 934: PPUSH
 935: CALL_OW 250
 939: PPUSH
 940: LD_VAR 0 3
 944: PUSH
 945: LD_INT 1
 947: ARRAY
 948: PPUSH
 949: CALL_OW 251
 953: PPUSH
 954: LD_INT 5
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 964: LD_EXP 6
 968: PPUSH
 969: LD_INT 1
 971: PPUSH
 972: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 976: LD_STRING CyrusInDelta
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL_OW 30
 986: PUSH
 987: LD_INT 1
 989: EQUAL
 990: IFFALSE 1068
// begin Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 992: LD_ADDR_EXP 7
 996: PUSH
 997: LD_STRING Cyrus
 999: PPUSH
1000: LD_INT 1
1002: PPUSH
1003: LD_EXP 24
1007: PPUSH
1008: CALL 25961 0 3
1012: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1013: LD_EXP 7
1017: PPUSH
1018: LD_VAR 0 3
1022: PUSH
1023: LD_INT 1
1025: ARRAY
1026: PPUSH
1027: CALL_OW 250
1031: PPUSH
1032: LD_VAR 0 3
1036: PUSH
1037: LD_INT 1
1039: ARRAY
1040: PPUSH
1041: CALL_OW 251
1045: PPUSH
1046: LD_INT 5
1048: PPUSH
1049: LD_INT 0
1051: PPUSH
1052: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
1056: LD_EXP 7
1060: PPUSH
1061: LD_INT 1
1063: PPUSH
1064: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
1068: LD_STRING DonaldsonInDelta
1070: PPUSH
1071: LD_INT 0
1073: PPUSH
1074: CALL_OW 30
1078: PUSH
1079: LD_INT 1
1081: EQUAL
1082: IFFALSE 1160
// begin Donaldson := PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
1084: LD_ADDR_EXP 9
1088: PUSH
1089: LD_STRING Donaldson
1091: PPUSH
1092: LD_INT 1
1094: PPUSH
1095: LD_EXP 24
1099: PPUSH
1100: CALL 25961 0 3
1104: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1105: LD_EXP 9
1109: PPUSH
1110: LD_VAR 0 3
1114: PUSH
1115: LD_INT 1
1117: ARRAY
1118: PPUSH
1119: CALL_OW 250
1123: PPUSH
1124: LD_VAR 0 3
1128: PUSH
1129: LD_INT 1
1131: ARRAY
1132: PPUSH
1133: CALL_OW 251
1137: PPUSH
1138: LD_INT 5
1140: PPUSH
1141: LD_INT 0
1143: PPUSH
1144: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
1148: LD_EXP 9
1152: PPUSH
1153: LD_INT 1
1155: PPUSH
1156: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
1160: LD_STRING BrownInDelta
1162: PPUSH
1163: LD_INT 0
1165: PPUSH
1166: CALL_OW 30
1170: PUSH
1171: LD_INT 1
1173: EQUAL
1174: IFFALSE 1252
// begin Brown := PrepareUnit ( Brown , true , mission_prefix_prev ) ;
1176: LD_ADDR_EXP 8
1180: PUSH
1181: LD_STRING Brown
1183: PPUSH
1184: LD_INT 1
1186: PPUSH
1187: LD_EXP 24
1191: PPUSH
1192: CALL 25961 0 3
1196: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1197: LD_EXP 8
1201: PPUSH
1202: LD_VAR 0 3
1206: PUSH
1207: LD_INT 1
1209: ARRAY
1210: PPUSH
1211: CALL_OW 250
1215: PPUSH
1216: LD_VAR 0 3
1220: PUSH
1221: LD_INT 1
1223: ARRAY
1224: PPUSH
1225: CALL_OW 251
1229: PPUSH
1230: LD_INT 5
1232: PPUSH
1233: LD_INT 0
1235: PPUSH
1236: CALL_OW 50
// SetClass ( Brown , 2 ) ;
1240: LD_EXP 8
1244: PPUSH
1245: LD_INT 2
1247: PPUSH
1248: CALL_OW 336
// end ; others := CreateCharacterSet ( othersInDelta ) ;
1252: LD_ADDR_EXP 11
1256: PUSH
1257: LD_STRING othersInDelta
1259: PPUSH
1260: CALL_OW 31
1264: ST_TO_ADDR
// for i in others do
1265: LD_ADDR_VAR 0 2
1269: PUSH
1270: LD_EXP 11
1274: PUSH
1275: FOR_IN
1276: IFFALSE 1323
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1278: LD_VAR 0 2
1282: PPUSH
1283: LD_VAR 0 3
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: CALL_OW 250
1296: PPUSH
1297: LD_VAR 0 3
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 251
1310: PPUSH
1311: LD_INT 35
1313: PPUSH
1314: LD_INT 0
1316: PPUSH
1317: CALL_OW 50
1321: GO 1275
1323: POP
1324: POP
// apemans := CreateCharacterSet ( apeInDelta ) ;
1325: LD_ADDR_EXP 13
1329: PUSH
1330: LD_STRING apeInDelta
1332: PPUSH
1333: CALL_OW 31
1337: ST_TO_ADDR
// uc_nation := 0 ;
1338: LD_ADDR_OWVAR 21
1342: PUSH
1343: LD_INT 0
1345: ST_TO_ADDR
// if apemans > 5 then
1346: LD_EXP 13
1350: PUSH
1351: LD_INT 5
1353: GREATER
1354: IFFALSE 1449
// begin for i := 1 to 5 do
1356: LD_ADDR_VAR 0 2
1360: PUSH
1361: DOUBLE
1362: LD_INT 1
1364: DEC
1365: ST_TO_ADDR
1366: LD_INT 5
1368: PUSH
1369: FOR_TO
1370: IFFALSE 1445
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1372: LD_EXP 13
1376: PUSH
1377: LD_VAR 0 2
1381: ARRAY
1382: PPUSH
1383: LD_VAR 0 3
1387: PUSH
1388: LD_INT 1
1390: ARRAY
1391: PPUSH
1392: CALL_OW 250
1396: PPUSH
1397: LD_VAR 0 3
1401: PUSH
1402: LD_INT 1
1404: ARRAY
1405: PPUSH
1406: CALL_OW 251
1410: PPUSH
1411: LD_INT 50
1413: PPUSH
1414: LD_INT 0
1416: PPUSH
1417: CALL_OW 50
// yourApemans := yourApemans ^ apemans [ i ] ;
1421: LD_ADDR_EXP 14
1425: PUSH
1426: LD_EXP 14
1430: PUSH
1431: LD_EXP 13
1435: PUSH
1436: LD_VAR 0 2
1440: ARRAY
1441: ADD
1442: ST_TO_ADDR
// end ;
1443: GO 1369
1445: POP
1446: POP
// end else
1447: GO 1525
// begin for i in apemans do
1449: LD_ADDR_VAR 0 2
1453: PUSH
1454: LD_EXP 13
1458: PUSH
1459: FOR_IN
1460: IFFALSE 1523
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1462: LD_VAR 0 2
1466: PPUSH
1467: LD_VAR 0 3
1471: PUSH
1472: LD_INT 1
1474: ARRAY
1475: PPUSH
1476: CALL_OW 250
1480: PPUSH
1481: LD_VAR 0 3
1485: PUSH
1486: LD_INT 1
1488: ARRAY
1489: PPUSH
1490: CALL_OW 251
1494: PPUSH
1495: LD_INT 50
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: CALL_OW 50
// yourApemans := yourApemans ^ i ;
1505: LD_ADDR_EXP 14
1509: PUSH
1510: LD_EXP 14
1514: PUSH
1515: LD_VAR 0 2
1519: ADD
1520: ST_TO_ADDR
// end ;
1521: GO 1459
1523: POP
1524: POP
// end ; end ;
1525: LD_VAR 0 1
1529: RET
// export function LoadVehicles ; var i , j , veh , tmp , vehicles ; begin
1530: LD_INT 0
1532: PPUSH
1533: PPUSH
1534: PPUSH
1535: PPUSH
1536: PPUSH
1537: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1538: LD_ADDR_VAR 0 5
1542: PUSH
1543: LD_INT 22
1545: PUSH
1546: LD_INT 1
1548: PUSH
1549: EMPTY
1550: LIST
1551: LIST
1552: PUSH
1553: LD_INT 21
1555: PUSH
1556: LD_INT 3
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: PUSH
1563: LD_INT 30
1565: PUSH
1566: LD_INT 0
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 69
1582: ST_TO_ADDR
// uc_side := 1 ;
1583: LD_ADDR_OWVAR 20
1587: PUSH
1588: LD_INT 1
1590: ST_TO_ADDR
// vehicles := LoadVariable ( vehiclesInDelta , [ ] ) ;
1591: LD_ADDR_VAR 0 6
1595: PUSH
1596: LD_STRING vehiclesInDelta
1598: PPUSH
1599: EMPTY
1600: PPUSH
1601: CALL_OW 30
1605: ST_TO_ADDR
// for i := 1 to Count ( vehicles ) div 4 do
1606: LD_ADDR_VAR 0 2
1610: PUSH
1611: DOUBLE
1612: LD_INT 1
1614: DEC
1615: ST_TO_ADDR
1616: LD_VAR 0 6
1620: PPUSH
1621: CALL 28063 0 1
1625: PUSH
1626: LD_INT 4
1628: DIV
1629: PUSH
1630: FOR_TO
1631: IFFALSE 1788
// begin uc_nation := vehicles [ 1 ] ;
1633: LD_ADDR_OWVAR 21
1637: PUSH
1638: LD_VAR 0 6
1642: PUSH
1643: LD_INT 1
1645: ARRAY
1646: ST_TO_ADDR
// vc_chassis := vehicles [ 2 ] ;
1647: LD_ADDR_OWVAR 37
1651: PUSH
1652: LD_VAR 0 6
1656: PUSH
1657: LD_INT 2
1659: ARRAY
1660: ST_TO_ADDR
// vc_engine := vehicles [ 3 ] ;
1661: LD_ADDR_OWVAR 39
1665: PUSH
1666: LD_VAR 0 6
1670: PUSH
1671: LD_INT 3
1673: ARRAY
1674: ST_TO_ADDR
// vc_control := vehicles [ 4 ] ;
1675: LD_ADDR_OWVAR 38
1679: PUSH
1680: LD_VAR 0 6
1684: PUSH
1685: LD_INT 4
1687: ARRAY
1688: ST_TO_ADDR
// vc_weapon := vehicles [ 5 ] ;
1689: LD_ADDR_OWVAR 40
1693: PUSH
1694: LD_VAR 0 6
1698: PUSH
1699: LD_INT 5
1701: ARRAY
1702: ST_TO_ADDR
// veh := CreateVehicle ;
1703: LD_ADDR_VAR 0 4
1707: PUSH
1708: CALL_OW 45
1712: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1713: LD_VAR 0 4
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: LD_INT 5
1723: PPUSH
1724: CALL_OW 12
1728: PPUSH
1729: CALL_OW 233
// PlaceUnitArea ( veh , parkingArea , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 4
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// for j := 1 to 5 do
1748: LD_ADDR_VAR 0 3
1752: PUSH
1753: DOUBLE
1754: LD_INT 1
1756: DEC
1757: ST_TO_ADDR
1758: LD_INT 5
1760: PUSH
1761: FOR_TO
1762: IFFALSE 1784
// vehicles := Delete ( vehicles , 1 ) ;
1764: LD_ADDR_VAR 0 6
1768: PUSH
1769: LD_VAR 0 6
1773: PPUSH
1774: LD_INT 1
1776: PPUSH
1777: CALL_OW 3
1781: ST_TO_ADDR
1782: GO 1761
1784: POP
1785: POP
// end ;
1786: GO 1630
1788: POP
1789: POP
// end ;
1790: LD_VAR 0 1
1794: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1795: LD_INT 0
1797: PPUSH
1798: PPUSH
1799: PPUSH
1800: PPUSH
1801: PPUSH
// uc_side := 1 ;
1802: LD_ADDR_OWVAR 20
1806: PUSH
1807: LD_INT 1
1809: ST_TO_ADDR
// uc_nation := 1 ;
1810: LD_ADDR_OWVAR 21
1814: PUSH
1815: LD_INT 1
1817: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1818: LD_ADDR_VAR 0 4
1822: PUSH
1823: LD_INT 22
1825: PUSH
1826: LD_INT 1
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: LD_INT 21
1835: PUSH
1836: LD_INT 3
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 30
1845: PUSH
1846: LD_INT 0
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: PPUSH
1858: CALL_OW 69
1862: ST_TO_ADDR
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) ;
1863: LD_ADDR_EXP 16
1867: PUSH
1868: LD_INT 22
1870: PUSH
1871: LD_INT 1
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: LD_INT 25
1880: PUSH
1881: LD_INT 4
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PUSH
1888: LD_INT 26
1890: PUSH
1891: LD_INT 1
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PUSH
1898: EMPTY
1899: LIST
1900: LIST
1901: LIST
1902: PUSH
1903: EMPTY
1904: LIST
1905: PPUSH
1906: CALL_OW 69
1910: PUSH
1911: LD_EXP 1
1915: PUSH
1916: LD_EXP 7
1920: PUSH
1921: LD_EXP 6
1925: PUSH
1926: LD_EXP 5
1930: PUSH
1931: LD_EXP 2
1935: PUSH
1936: LD_EXP 3
1940: PUSH
1941: LD_EXP 8
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: DIFF
1955: ST_TO_ADDR
// if not deltaDoctor then
1956: LD_EXP 16
1960: NOT
1961: IFFALSE 2112
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
1963: LD_ADDR_VAR 0 5
1967: PUSH
1968: LD_INT 22
1970: PUSH
1971: LD_INT 1
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: PUSH
1978: LD_INT 26
1980: PUSH
1981: LD_INT 1
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: PUSH
1992: EMPTY
1993: LIST
1994: PPUSH
1995: CALL_OW 69
1999: PUSH
2000: LD_EXP 1
2004: PUSH
2005: LD_EXP 7
2009: PUSH
2010: LD_EXP 6
2014: PUSH
2015: LD_EXP 5
2019: PUSH
2020: LD_EXP 2
2024: PUSH
2025: LD_EXP 3
2029: PUSH
2030: LD_EXP 8
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: DIFF
2044: ST_TO_ADDR
// if filter then
2045: LD_VAR 0 5
2049: IFFALSE 2110
// for i in filter do
2051: LD_ADDR_VAR 0 2
2055: PUSH
2056: LD_VAR 0 5
2060: PUSH
2061: FOR_IN
2062: IFFALSE 2108
// if GetSkill ( i , 4 ) >= 4 then
2064: LD_VAR 0 2
2068: PPUSH
2069: LD_INT 4
2071: PPUSH
2072: CALL_OW 259
2076: PUSH
2077: LD_INT 4
2079: GREATEREQUAL
2080: IFFALSE 2106
// begin deltaDoctor := i ;
2082: LD_ADDR_EXP 16
2086: PUSH
2087: LD_VAR 0 2
2091: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
2092: LD_EXP 16
2096: PPUSH
2097: LD_INT 4
2099: PPUSH
2100: CALL_OW 336
// break ;
2104: GO 2108
// end ;
2106: GO 2061
2108: POP
2109: POP
// end else
2110: GO 2126
// deltaDoctor := deltaDoctor [ 1 ] ;
2112: LD_ADDR_EXP 16
2116: PUSH
2117: LD_EXP 16
2121: PUSH
2122: LD_INT 1
2124: ARRAY
2125: ST_TO_ADDR
// for i := 1 to 7 do
2126: LD_ADDR_VAR 0 2
2130: PUSH
2131: DOUBLE
2132: LD_INT 1
2134: DEC
2135: ST_TO_ADDR
2136: LD_INT 7
2138: PUSH
2139: FOR_TO
2140: IFFALSE 2277
// begin hc_gallery :=  ;
2142: LD_ADDR_OWVAR 33
2146: PUSH
2147: LD_STRING 
2149: ST_TO_ADDR
// hc_name :=  ;
2150: LD_ADDR_OWVAR 26
2154: PUSH
2155: LD_STRING 
2157: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) ) ;
2158: LD_INT 0
2160: PPUSH
2161: LD_INT 1
2163: PUSH
2164: LD_INT 2
2166: PUSH
2167: LD_INT 3
2169: PUSH
2170: LD_INT 4
2172: PUSH
2173: EMPTY
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: PUSH
2179: LD_INT 1
2181: PPUSH
2182: LD_INT 4
2184: PPUSH
2185: CALL_OW 12
2189: ARRAY
2190: PPUSH
2191: LD_INT 3
2193: PPUSH
2194: LD_INT 5
2196: PPUSH
2197: CALL_OW 12
2201: PPUSH
2202: CALL_OW 380
// un := CreateHuman ;
2206: LD_ADDR_VAR 0 3
2210: PUSH
2211: CALL_OW 44
2215: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2216: LD_ADDR_EXP 12
2220: PUSH
2221: LD_EXP 12
2225: PUSH
2226: LD_VAR 0 3
2230: ADD
2231: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2232: LD_VAR 0 3
2236: PPUSH
2237: LD_VAR 0 4
2241: PUSH
2242: LD_INT 1
2244: ARRAY
2245: PPUSH
2246: CALL_OW 250
2250: PPUSH
2251: LD_VAR 0 4
2255: PUSH
2256: LD_INT 1
2258: ARRAY
2259: PPUSH
2260: CALL_OW 251
2264: PPUSH
2265: LD_INT 15
2267: PPUSH
2268: LD_INT 0
2270: PPUSH
2271: CALL_OW 50
// end ;
2275: GO 2139
2277: POP
2278: POP
// if deltaDoctor then
2279: LD_EXP 16
2283: IFFALSE 2287
// exit ;
2285: GO 2377
// hc_gallery := Dawkins ;
2287: LD_ADDR_OWVAR 33
2291: PUSH
2292: LD_STRING Dawkins
2294: ST_TO_ADDR
// hc_face_number := 1 ;
2295: LD_ADDR_OWVAR 34
2299: PUSH
2300: LD_INT 1
2302: ST_TO_ADDR
// hc_name := Dr. Adam Charles Dawkins ;
2303: LD_ADDR_OWVAR 26
2307: PUSH
2308: LD_STRING Dr. Adam Charles Dawkins
2310: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 5 ) ;
2311: LD_INT 1
2313: PPUSH
2314: LD_INT 4
2316: PPUSH
2317: LD_INT 5
2319: PPUSH
2320: CALL_OW 380
// deltaDoctor := CreateHuman ;
2324: LD_ADDR_EXP 16
2328: PUSH
2329: CALL_OW 44
2333: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2334: LD_EXP 16
2338: PPUSH
2339: LD_VAR 0 4
2343: PUSH
2344: LD_INT 1
2346: ARRAY
2347: PPUSH
2348: CALL_OW 250
2352: PPUSH
2353: LD_VAR 0 4
2357: PUSH
2358: LD_INT 1
2360: ARRAY
2361: PPUSH
2362: CALL_OW 251
2366: PPUSH
2367: LD_INT 5
2369: PPUSH
2370: LD_INT 0
2372: PPUSH
2373: CALL_OW 50
// end ; end_of_file
2377: LD_VAR 0 1
2381: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2382: LD_INT 0
2384: PPUSH
2385: PPUSH
2386: PPUSH
2387: PPUSH
2388: PPUSH
2389: PPUSH
2390: PPUSH
// buildings := LoadVariable ( buildingsInDelta , [ ] ) ;
2391: LD_ADDR_VAR 0 5
2395: PUSH
2396: LD_STRING buildingsInDelta
2398: PPUSH
2399: EMPTY
2400: PPUSH
2401: CALL_OW 30
2405: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2406: LD_INT 68
2408: PPUSH
2409: LD_INT 40
2411: PPUSH
2412: LD_INT 1
2414: PPUSH
2415: CALL_OW 441
// uc_side := 1 ;
2419: LD_ADDR_OWVAR 20
2423: PUSH
2424: LD_INT 1
2426: ST_TO_ADDR
// uc_nation := 1 ;
2427: LD_ADDR_OWVAR 21
2431: PUSH
2432: LD_INT 1
2434: ST_TO_ADDR
// for i := 1 to buildings do
2435: LD_ADDR_VAR 0 2
2439: PUSH
2440: DOUBLE
2441: LD_INT 1
2443: DEC
2444: ST_TO_ADDR
2445: LD_VAR 0 5
2449: PUSH
2450: FOR_TO
2451: IFFALSE 2766
// begin bc_type := buildings [ i ] [ 1 ] ;
2453: LD_ADDR_OWVAR 42
2457: PUSH
2458: LD_VAR 0 5
2462: PUSH
2463: LD_VAR 0 2
2467: ARRAY
2468: PUSH
2469: LD_INT 1
2471: ARRAY
2472: ST_TO_ADDR
// bc_level := buildings [ i ] [ 2 ] ;
2473: LD_ADDR_OWVAR 43
2477: PUSH
2478: LD_VAR 0 5
2482: PUSH
2483: LD_VAR 0 2
2487: ARRAY
2488: PUSH
2489: LD_INT 2
2491: ARRAY
2492: ST_TO_ADDR
// bc_kind1 := - 1 ;
2493: LD_ADDR_OWVAR 44
2497: PUSH
2498: LD_INT 1
2500: NEG
2501: ST_TO_ADDR
// bc_kind2 := - 1 ;
2502: LD_ADDR_OWVAR 45
2506: PUSH
2507: LD_INT 1
2509: NEG
2510: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half , b_lab_full ] then
2511: LD_OWVAR 42
2515: PUSH
2516: LD_INT 6
2518: PUSH
2519: LD_INT 7
2521: PUSH
2522: LD_INT 8
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: LIST
2529: IN
2530: IFFALSE 2654
// begin bc_kind1 := b_lab_basic ;
2532: LD_ADDR_OWVAR 44
2536: PUSH
2537: LD_INT 9
2539: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2540: LD_ADDR_OWVAR 45
2544: PUSH
2545: LD_INT 9
2547: ST_TO_ADDR
// if buildings [ i ] [ 6 ] then
2548: LD_VAR 0 5
2552: PUSH
2553: LD_VAR 0 2
2557: ARRAY
2558: PUSH
2559: LD_INT 6
2561: ARRAY
2562: IFFALSE 2630
// begin bc_kind1 := buildings [ i ] [ 6 ] ;
2564: LD_ADDR_OWVAR 44
2568: PUSH
2569: LD_VAR 0 5
2573: PUSH
2574: LD_VAR 0 2
2578: ARRAY
2579: PUSH
2580: LD_INT 6
2582: ARRAY
2583: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2584: LD_ADDR_OWVAR 45
2588: PUSH
2589: LD_INT 9
2591: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2592: LD_VAR 0 5
2596: PUSH
2597: LD_VAR 0 2
2601: ARRAY
2602: PUSH
2603: LD_INT 7
2605: ARRAY
2606: IFFALSE 2628
// bc_kind2 := buildings [ i ] [ 7 ] ;
2608: LD_ADDR_OWVAR 45
2612: PUSH
2613: LD_VAR 0 5
2617: PUSH
2618: LD_VAR 0 2
2622: ARRAY
2623: PUSH
2624: LD_INT 7
2626: ARRAY
2627: ST_TO_ADDR
// end else
2628: GO 2654
// begin bc_type := b_lab ;
2630: LD_ADDR_OWVAR 42
2634: PUSH
2635: LD_INT 6
2637: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
2638: LD_ADDR_OWVAR 44
2642: PUSH
2643: LD_INT 9
2645: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2646: LD_ADDR_OWVAR 45
2650: PUSH
2651: LD_INT 9
2653: ST_TO_ADDR
// end ; end ; building := CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2654: LD_ADDR_VAR 0 4
2658: PUSH
2659: LD_VAR 0 5
2663: PUSH
2664: LD_VAR 0 2
2668: ARRAY
2669: PUSH
2670: LD_INT 3
2672: ARRAY
2673: PPUSH
2674: LD_VAR 0 5
2678: PUSH
2679: LD_VAR 0 2
2683: ARRAY
2684: PUSH
2685: LD_INT 4
2687: ARRAY
2688: PPUSH
2689: LD_VAR 0 5
2693: PUSH
2694: LD_VAR 0 2
2698: ARRAY
2699: PUSH
2700: LD_INT 5
2702: ARRAY
2703: PPUSH
2704: CALL_OW 47
2708: ST_TO_ADDR
// if GetBType ( building ) = b_bunker and buildings [ i ] [ 8 ] then
2709: LD_VAR 0 4
2713: PPUSH
2714: CALL_OW 266
2718: PUSH
2719: LD_INT 32
2721: EQUAL
2722: PUSH
2723: LD_VAR 0 5
2727: PUSH
2728: LD_VAR 0 2
2732: ARRAY
2733: PUSH
2734: LD_INT 8
2736: ARRAY
2737: AND
2738: IFFALSE 2764
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2740: LD_VAR 0 4
2744: PPUSH
2745: LD_VAR 0 5
2749: PUSH
2750: LD_VAR 0 2
2754: ARRAY
2755: PUSH
2756: LD_INT 8
2758: ARRAY
2759: PPUSH
2760: CALL_OW 431
// end ;
2764: GO 2450
2766: POP
2767: POP
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2768: LD_ADDR_VAR 0 6
2772: PUSH
2773: LD_INT 22
2775: PUSH
2776: LD_INT 1
2778: PUSH
2779: EMPTY
2780: LIST
2781: LIST
2782: PUSH
2783: LD_INT 2
2785: PUSH
2786: LD_INT 30
2788: PUSH
2789: LD_INT 6
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PUSH
2796: LD_INT 30
2798: PUSH
2799: LD_INT 7
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: PUSH
2806: LD_INT 30
2808: PUSH
2809: LD_INT 8
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: LIST
2820: LIST
2821: PUSH
2822: EMPTY
2823: LIST
2824: LIST
2825: PPUSH
2826: CALL_OW 69
2830: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2831: LD_ADDR_VAR 0 7
2835: PUSH
2836: LD_INT 22
2838: PUSH
2839: LD_INT 1
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PUSH
2846: LD_INT 30
2848: PUSH
2849: LD_INT 0
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: PUSH
2856: EMPTY
2857: LIST
2858: LIST
2859: PPUSH
2860: CALL_OW 69
2864: ST_TO_ADDR
// if lab and tmp then
2865: LD_VAR 0 6
2869: PUSH
2870: LD_VAR 0 7
2874: AND
2875: IFFALSE 2885
// baseCorrect := 1 ;
2877: LD_ADDR_EXP 19
2881: PUSH
2882: LD_INT 1
2884: ST_TO_ADDR
// if not baseCorrect then
2885: LD_EXP 19
2889: NOT
2890: IFFALSE 3305
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2892: LD_ADDR_VAR 0 2
2896: PUSH
2897: LD_INT 22
2899: PUSH
2900: LD_INT 1
2902: PUSH
2903: EMPTY
2904: LIST
2905: LIST
2906: PUSH
2907: LD_INT 21
2909: PUSH
2910: LD_INT 3
2912: PUSH
2913: EMPTY
2914: LIST
2915: LIST
2916: PUSH
2917: EMPTY
2918: LIST
2919: LIST
2920: PPUSH
2921: CALL_OW 69
2925: PUSH
2926: FOR_IN
2927: IFFALSE 2940
// RemoveUnit ( i ) ;
2929: LD_VAR 0 2
2933: PPUSH
2934: CALL_OW 64
2938: GO 2926
2940: POP
2941: POP
// uc_nation := 1 ;
2942: LD_ADDR_OWVAR 21
2946: PUSH
2947: LD_INT 1
2949: ST_TO_ADDR
// uc_side := 1 ;
2950: LD_ADDR_OWVAR 20
2954: PUSH
2955: LD_INT 1
2957: ST_TO_ADDR
// bc_level := 5 ;
2958: LD_ADDR_OWVAR 43
2962: PUSH
2963: LD_INT 5
2965: ST_TO_ADDR
// bc_type := b_depot ;
2966: LD_ADDR_OWVAR 42
2970: PUSH
2971: LD_INT 0
2973: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2974: LD_INT 50
2976: PPUSH
2977: LD_INT 22
2979: PPUSH
2980: LD_INT 0
2982: PPUSH
2983: CALL_OW 47
// bc_type = b_bunker ;
2987: LD_ADDR_OWVAR 42
2991: PUSH
2992: LD_INT 32
2994: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
2995: LD_ADDR_VAR 0 4
2999: PUSH
3000: LD_INT 68
3002: PPUSH
3003: LD_INT 24
3005: PPUSH
3006: LD_INT 4
3008: PPUSH
3009: CALL_OW 47
3013: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
3014: LD_VAR 0 4
3018: PPUSH
3019: LD_INT 4
3021: PUSH
3022: LD_INT 11
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: PUSH
3029: LD_INT 1
3031: PPUSH
3032: LD_INT 2
3034: PPUSH
3035: CALL_OW 12
3039: ARRAY
3040: PPUSH
3041: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
3045: LD_ADDR_VAR 0 4
3049: PUSH
3050: LD_INT 71
3052: PPUSH
3053: LD_INT 34
3055: PPUSH
3056: LD_INT 4
3058: PPUSH
3059: CALL_OW 47
3063: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
3064: LD_VAR 0 4
3068: PPUSH
3069: LD_INT 4
3071: PUSH
3072: LD_INT 11
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: PUSH
3079: LD_INT 1
3081: PPUSH
3082: LD_INT 2
3084: PPUSH
3085: CALL_OW 12
3089: ARRAY
3090: PPUSH
3091: CALL_OW 431
// bc_type := b_breastwork ;
3095: LD_ADDR_OWVAR 42
3099: PUSH
3100: LD_INT 31
3102: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
3103: LD_INT 51
3105: PPUSH
3106: LD_INT 7
3108: PPUSH
3109: LD_INT 3
3111: PPUSH
3112: CALL_OW 47
// bc_type := b_oil_mine ;
3116: LD_ADDR_OWVAR 42
3120: PUSH
3121: LD_INT 29
3123: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
3124: LD_INT 68
3126: PPUSH
3127: LD_INT 40
3129: PPUSH
3130: LD_INT 1
3132: PPUSH
3133: CALL_OW 47
// bc_type := b_factory ;
3137: LD_ADDR_OWVAR 42
3141: PUSH
3142: LD_INT 3
3144: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3145: LD_INT 38
3147: PPUSH
3148: LD_INT 20
3150: PPUSH
3151: LD_INT 2
3153: PPUSH
3154: CALL_OW 47
// bc_type := b_ext_noncombat ;
3158: LD_ADDR_OWVAR 42
3162: PUSH
3163: LD_INT 19
3165: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 24 , 2 ) ;
3166: LD_INT 38
3168: PPUSH
3169: LD_INT 24
3171: PPUSH
3172: LD_INT 2
3174: PPUSH
3175: CALL_OW 47
// bc_type := b_ext_radar ;
3179: LD_ADDR_OWVAR 42
3183: PUSH
3184: LD_INT 20
3186: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 35 , 20 , 1 ) ;
3187: LD_INT 35
3189: PPUSH
3190: LD_INT 20
3192: PPUSH
3193: LD_INT 1
3195: PPUSH
3196: CALL_OW 47
// bc_type := b_armoury ;
3200: LD_ADDR_OWVAR 42
3204: PUSH
3205: LD_INT 4
3207: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 33 , 28 , 1 ) ;
3208: LD_INT 33
3210: PPUSH
3211: LD_INT 28
3213: PPUSH
3214: LD_INT 1
3216: PPUSH
3217: CALL_OW 47
// bc_type := b_solar_power ;
3221: LD_ADDR_OWVAR 42
3225: PUSH
3226: LD_INT 27
3228: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3229: LD_INT 46
3231: PPUSH
3232: LD_INT 12
3234: PPUSH
3235: LD_INT 1
3237: PPUSH
3238: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3242: LD_INT 48
3244: PPUSH
3245: LD_INT 11
3247: PPUSH
3248: LD_INT 2
3250: PPUSH
3251: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 35 , 12 , 3 ) ;
3255: LD_INT 35
3257: PPUSH
3258: LD_INT 12
3260: PPUSH
3261: LD_INT 3
3263: PPUSH
3264: CALL_OW 47
// bc_type := b_lab_half ;
3268: LD_ADDR_OWVAR 42
3272: PUSH
3273: LD_INT 7
3275: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
3276: LD_ADDR_OWVAR 44
3280: PUSH
3281: LD_INT 15
3283: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
3284: LD_ADDR_OWVAR 45
3288: PUSH
3289: LD_INT 9
3291: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3292: LD_INT 42
3294: PPUSH
3295: LD_INT 15
3297: PPUSH
3298: LD_INT 2
3300: PPUSH
3301: CALL_OW 47
// end ; end ; end_of_file
3305: LD_VAR 0 1
3309: RET
// export function Action ; var i , j , tmp ; begin
3310: LD_INT 0
3312: PPUSH
3313: PPUSH
3314: PPUSH
3315: PPUSH
// InGameOn ;
3316: CALL_OW 8
// if lab then
3320: LD_EXP 21
3324: IFFALSE 3341
// CenterNowOnUnits ( lab [ 1 ] ) else
3326: LD_EXP 21
3330: PUSH
3331: LD_INT 1
3333: ARRAY
3334: PPUSH
3335: CALL_OW 87
3339: GO 3350
// CenterOnUnits ( JMM ) ;
3341: LD_EXP 1
3345: PPUSH
3346: CALL_OW 85
// if IsOK ( Denis ) then
3350: LD_EXP 3
3354: PPUSH
3355: CALL_OW 302
3359: IFFALSE 3387
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3361: LD_INT 6
3363: PPUSH
3364: LD_INT 1
3366: PPUSH
3367: LD_INT 2
3369: PPUSH
3370: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3374: LD_INT 20
3376: PPUSH
3377: LD_INT 1
3379: PPUSH
3380: LD_INT 1
3382: PPUSH
3383: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3387: LD_EXP 1
3391: PPUSH
3392: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3396: LD_EXP 1
3400: PPUSH
3401: LD_EXP 16
3405: PPUSH
3406: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3410: LD_INT 35
3412: PPUSH
3413: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3417: LD_EXP 16
3421: PPUSH
3422: LD_EXP 1
3426: PPUSH
3427: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3431: LD_EXP 1
3435: PPUSH
3436: LD_EXP 16
3440: PPUSH
3441: CALL_OW 296
3445: PUSH
3446: LD_INT 5
3448: LESS
3449: IFFALSE 3410
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3451: LD_EXP 16
3455: PPUSH
3456: LD_EXP 1
3460: PPUSH
3461: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3465: LD_EXP 1
3469: PPUSH
3470: LD_STRING D1-JMM-1
3472: PPUSH
3473: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3477: LD_EXP 16
3481: PPUSH
3482: LD_STRING D1-Sci-1
3484: PPUSH
3485: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3489: LD_EXP 1
3493: PUSH
3494: LD_EXP 16
3498: PUSH
3499: LD_EXP 3
3503: PUSH
3504: EMPTY
3505: LIST
3506: LIST
3507: LIST
3508: PPUSH
3509: LD_EXP 21
3513: PUSH
3514: LD_INT 1
3516: ARRAY
3517: PPUSH
3518: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
3522: LD_INT 35
3524: PPUSH
3525: CALL_OW 67
// until IsInUnit ( JMM ) and IsInUnit ( DeltaDoctor ) ;
3529: LD_EXP 1
3533: PPUSH
3534: CALL_OW 310
3538: PUSH
3539: LD_EXP 16
3543: PPUSH
3544: CALL_OW 310
3548: AND
3549: IFFALSE 3522
// CenterNowOnUnits ( lab [ 1 ] ) ;
3551: LD_EXP 21
3555: PUSH
3556: LD_INT 1
3558: ARRAY
3559: PPUSH
3560: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3564: LD_EXP 1
3568: PPUSH
3569: LD_STRING D1-JMM-2
3571: PPUSH
3572: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3576: LD_EXP 16
3580: PPUSH
3581: LD_STRING D1-Sci-2
3583: PPUSH
3584: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3588: LD_EXP 1
3592: PPUSH
3593: LD_STRING D1-JMM-3
3595: PPUSH
3596: CALL_OW 88
// if IsOK ( Denis ) then
3600: LD_EXP 3
3604: PPUSH
3605: CALL_OW 302
3609: IFFALSE 3625
// Say ( DeltaDoctor , D1-Sci-3 ) else
3611: LD_EXP 16
3615: PPUSH
3616: LD_STRING D1-Sci-3
3618: PPUSH
3619: CALL_OW 88
3623: GO 3637
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3625: LD_EXP 16
3629: PPUSH
3630: LD_STRING D1-Sci-3a
3632: PPUSH
3633: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3637: LD_EXP 1
3641: PPUSH
3642: LD_STRING D1-JMM-4
3644: PPUSH
3645: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3649: LD_ADDR_VAR 0 4
3653: PUSH
3654: LD_INT 22
3656: PUSH
3657: LD_INT 1
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: PUSH
3664: LD_INT 25
3666: PUSH
3667: LD_INT 4
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: PUSH
3674: LD_INT 3
3676: PUSH
3677: LD_INT 54
3679: PUSH
3680: EMPTY
3681: LIST
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: LIST
3691: PPUSH
3692: CALL_OW 69
3696: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3697: LD_ADDR_VAR 0 2
3701: PUSH
3702: LD_INT 22
3704: PUSH
3705: LD_INT 0
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: PPUSH
3712: CALL_OW 69
3716: PUSH
3717: FOR_IN
3718: IFFALSE 3768
// for j in tmp do
3720: LD_ADDR_VAR 0 3
3724: PUSH
3725: LD_VAR 0 4
3729: PUSH
3730: FOR_IN
3731: IFFALSE 3764
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3733: LD_VAR 0 3
3737: PPUSH
3738: LD_VAR 0 2
3742: PPUSH
3743: CALL_OW 250
3747: PPUSH
3748: LD_VAR 0 2
3752: PPUSH
3753: CALL_OW 251
3757: PPUSH
3758: CALL_OW 191
3762: GO 3730
3764: POP
3765: POP
3766: GO 3717
3768: POP
3769: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3770: LD_EXP 16
3774: PPUSH
3775: LD_STRING D1-Sci-4
3777: PPUSH
3778: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3782: LD_EXP 1
3786: PPUSH
3787: LD_STRING D1-JMM-5
3789: PPUSH
3790: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3794: LD_EXP 16
3798: PPUSH
3799: LD_STRING D1-Sci-5
3801: PPUSH
3802: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3806: LD_EXP 1
3810: PPUSH
3811: LD_STRING D1-JMM-6
3813: PPUSH
3814: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3818: LD_EXP 17
3822: PPUSH
3823: LD_STRING D1-Har-6
3825: PPUSH
3826: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3830: LD_EXP 1
3834: PPUSH
3835: LD_STRING D1-JMM-7
3837: PPUSH
3838: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3842: LD_EXP 17
3846: PPUSH
3847: LD_STRING D1-Har-7
3849: PPUSH
3850: CALL_OW 94
// if IsOK ( Denis ) then
3854: LD_EXP 3
3858: PPUSH
3859: CALL_OW 302
3863: IFFALSE 3877
// Say ( JMM , D1-JMM-8 ) ;
3865: LD_EXP 1
3869: PPUSH
3870: LD_STRING D1-JMM-8
3872: PPUSH
3873: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3877: LD_EXP 1
3881: PPUSH
3882: LD_STRING D1-JMM-8a
3884: PPUSH
3885: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3889: LD_EXP 17
3893: PPUSH
3894: LD_STRING D1-Har-8
3896: PPUSH
3897: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3901: LD_EXP 1
3905: PPUSH
3906: LD_STRING D1-JMM-9
3908: PPUSH
3909: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3913: LD_EXP 17
3917: PPUSH
3918: LD_STRING D1-Har-9
3920: PPUSH
3921: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3925: LD_EXP 1
3929: PPUSH
3930: LD_STRING D1-JMM-10
3932: PPUSH
3933: CALL_OW 88
// if IsOK ( Denis ) then
3937: LD_EXP 3
3941: PPUSH
3942: CALL_OW 302
3946: IFFALSE 3960
// Say ( JMM , D1-JMM-10a ) ;
3948: LD_EXP 1
3952: PPUSH
3953: LD_STRING D1-JMM-10a
3955: PPUSH
3956: CALL_OW 88
// SelectDeltaCharacters ;
3960: CALL 4444 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 150 ) ;
3964: LD_EXP 21
3968: PUSH
3969: LD_INT 1
3971: ARRAY
3972: PPUSH
3973: CALL_OW 274
3977: PPUSH
3978: LD_INT 1
3980: PPUSH
3981: LD_INT 150
3983: PPUSH
3984: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) then
3988: LD_INT 22
3990: PUSH
3991: LD_INT 1
3993: PUSH
3994: EMPTY
3995: LIST
3996: LIST
3997: PUSH
3998: LD_INT 30
4000: PUSH
4001: LD_INT 29
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: PPUSH
4012: CALL_OW 69
4016: IFFALSE 4042
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
4018: LD_EXP 21
4022: PUSH
4023: LD_INT 1
4025: ARRAY
4026: PPUSH
4027: CALL_OW 274
4031: PPUSH
4032: LD_INT 2
4034: PPUSH
4035: LD_INT 300
4037: PPUSH
4038: CALL_OW 277
// InGameOff ;
4042: CALL_OW 9
// Query ( Q1 ) ;
4046: LD_STRING Q1
4048: PPUSH
4049: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
4053: LD_INT 3
4055: PPUSH
4056: LD_INT 1
4058: PPUSH
4059: CALL_OW 424
// if IsInUnit ( JMM ) then
4063: LD_EXP 1
4067: PPUSH
4068: CALL_OW 310
4072: IFFALSE 4083
// ComExitBuilding ( JMM ) ;
4074: LD_EXP 1
4078: PPUSH
4079: CALL_OW 122
// end ;
4083: LD_VAR 0 1
4087: RET
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
4088: LD_INT 3
4090: PPUSH
4091: LD_INT 22
4093: PUSH
4094: LD_INT 1
4096: PUSH
4097: EMPTY
4098: LIST
4099: LIST
4100: PUSH
4101: LD_INT 21
4103: PUSH
4104: LD_INT 1
4106: PUSH
4107: EMPTY
4108: LIST
4109: LIST
4110: PUSH
4111: EMPTY
4112: LIST
4113: LIST
4114: PPUSH
4115: CALL_OW 71
4119: PUSH
4120: LD_INT 0
4122: EQUAL
4123: IFFALSE 4441
4125: GO 4127
4127: DISABLE
4128: LD_INT 0
4130: PPUSH
4131: PPUSH
// begin SaveDeltaCharacters ;
4132: CALL 4816 0 0
// if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) then
4136: LD_INT 3
4138: PPUSH
4139: LD_INT 21
4141: PUSH
4142: LD_INT 2
4144: PUSH
4145: EMPTY
4146: LIST
4147: LIST
4148: PUSH
4149: LD_INT 3
4151: PUSH
4152: LD_INT 58
4154: PUSH
4155: EMPTY
4156: LIST
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: PPUSH
4166: CALL_OW 70
4170: IFFALSE 4427
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
4172: LD_ADDR_VAR 0 1
4176: PUSH
4177: LD_INT 3
4179: PPUSH
4180: LD_INT 21
4182: PUSH
4183: LD_INT 2
4185: PUSH
4186: EMPTY
4187: LIST
4188: LIST
4189: PUSH
4190: LD_INT 3
4192: PUSH
4193: LD_INT 58
4195: PUSH
4196: EMPTY
4197: LIST
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PPUSH
4207: CALL_OW 70
4211: PUSH
4212: FOR_IN
4213: IFFALSE 4425
// begin cargoType := GetCargoType ( i ) ;
4215: LD_ADDR_VAR 0 2
4219: PUSH
4220: LD_VAR 0 1
4224: PPUSH
4225: CALL_OW 288
4229: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4230: LD_VAR 0 1
4234: PPUSH
4235: CALL_OW 264
4239: PUSH
4240: LD_INT 12
4242: EQUAL
4243: IFFALSE 4340
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] else
4245: LD_ADDR_EXP 15
4249: PUSH
4250: LD_EXP 15
4254: PUSH
4255: LD_VAR 0 1
4259: PPUSH
4260: CALL_OW 248
4264: PUSH
4265: LD_VAR 0 1
4269: PPUSH
4270: CALL_OW 265
4274: PUSH
4275: LD_VAR 0 1
4279: PPUSH
4280: CALL_OW 262
4284: PUSH
4285: LD_VAR 0 1
4289: PPUSH
4290: CALL_OW 263
4294: PUSH
4295: LD_VAR 0 1
4299: PPUSH
4300: CALL_OW 264
4304: PUSH
4305: LD_VAR 0 2
4309: PUSH
4310: LD_VAR 0 1
4314: PPUSH
4315: LD_VAR 0 2
4319: PPUSH
4320: CALL_OW 289
4324: PUSH
4325: EMPTY
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: PUSH
4334: EMPTY
4335: LIST
4336: ADD
4337: ST_TO_ADDR
4338: GO 4411
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4340: LD_ADDR_EXP 15
4344: PUSH
4345: LD_EXP 15
4349: PUSH
4350: LD_VAR 0 1
4354: PPUSH
4355: CALL_OW 248
4359: PUSH
4360: LD_VAR 0 1
4364: PPUSH
4365: CALL_OW 265
4369: PUSH
4370: LD_VAR 0 1
4374: PPUSH
4375: CALL_OW 262
4379: PUSH
4380: LD_VAR 0 1
4384: PPUSH
4385: CALL_OW 263
4389: PUSH
4390: LD_VAR 0 1
4394: PPUSH
4395: CALL_OW 264
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: PUSH
4407: EMPTY
4408: LIST
4409: ADD
4410: ST_TO_ADDR
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4411: LD_EXP 15
4415: PPUSH
4416: LD_STRING 06_VehiclesIn06_1
4418: PPUSH
4419: CALL_OW 39
// end ;
4423: GO 4212
4425: POP
4426: POP
// end ; SaveCargos ;
4427: CALL 5596 0 0
// ChangeMap ( 6 , %_cont ) ;
4431: LD_INT 6
4433: PPUSH
4434: LD_STRING %_cont
4436: PPUSH
4437: CALL_OW 340
// end ; end_of_file
4441: PPOPN 2
4443: END
// export function SelectDeltaCharacters ; var i , yourPeople ; begin
4444: LD_INT 0
4446: PPUSH
4447: PPUSH
4448: PPUSH
// selectedPeople := [ ] ;
4449: LD_ADDR_EXP 18
4453: PUSH
4454: EMPTY
4455: ST_TO_ADDR
// yourPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4456: LD_ADDR_VAR 0 3
4460: PUSH
4461: LD_INT 22
4463: PUSH
4464: LD_INT 1
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PUSH
4471: LD_INT 21
4473: PUSH
4474: LD_INT 1
4476: PUSH
4477: EMPTY
4478: LIST
4479: LIST
4480: PUSH
4481: LD_INT 2
4483: PUSH
4484: LD_INT 25
4486: PUSH
4487: LD_INT 1
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: PUSH
4494: LD_INT 25
4496: PUSH
4497: LD_INT 2
4499: PUSH
4500: EMPTY
4501: LIST
4502: LIST
4503: PUSH
4504: LD_INT 25
4506: PUSH
4507: LD_INT 3
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: PUSH
4514: LD_INT 25
4516: PUSH
4517: LD_INT 4
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: LIST
4535: PPUSH
4536: CALL_OW 69
4540: PUSH
4541: LD_EXP 1
4545: PUSH
4546: LD_EXP 16
4550: PUSH
4551: LD_EXP 3
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: LIST
4560: DIFF
4561: ST_TO_ADDR
// selectedPeople := CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4562: LD_ADDR_EXP 18
4566: PUSH
4567: LD_STRING text
4569: PPUSH
4570: LD_INT 5
4572: PPUSH
4573: LD_INT 5
4575: PPUSH
4576: LD_INT -5
4578: PUSH
4579: LD_EXP 1
4583: PUSH
4584: LD_INT -6
4586: PUSH
4587: LD_INT -2
4589: PUSH
4590: LD_INT -3
4592: PUSH
4593: LD_INT -5
4595: PUSH
4596: EMPTY
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: PUSH
4604: LD_VAR 0 3
4608: ADD
4609: PUSH
4610: LD_INT -6
4612: PUSH
4613: LD_INT -4
4615: PUSH
4616: LD_EXP 3
4620: PUSH
4621: LD_EXP 16
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: ADD
4632: PPUSH
4633: LD_INT 1
4635: PUSH
4636: LD_INT 3
4638: PUSH
4639: LD_INT 2
4641: PUSH
4642: LD_INT 1
4644: PUSH
4645: EMPTY
4646: LIST
4647: LIST
4648: PUSH
4649: LD_INT 4
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: PPUSH
4658: CALL_OW 42
4662: ST_TO_ADDR
// ComStop ( selectedPeople ) ;
4663: LD_EXP 18
4667: PPUSH
4668: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4672: LD_INT 22
4674: PUSH
4675: LD_INT 1
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: PUSH
4682: LD_INT 21
4684: PUSH
4685: LD_INT 1
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: PPUSH
4696: CALL_OW 69
4700: PPUSH
4701: LD_INT 4
4703: PPUSH
4704: CALL_OW 235
// for i in selectedPeople do
4708: LD_ADDR_VAR 0 2
4712: PUSH
4713: LD_EXP 18
4717: PUSH
4718: FOR_IN
4719: IFFALSE 4735
// SetSide ( i , 1 ) ;
4721: LD_VAR 0 2
4725: PPUSH
4726: LD_INT 1
4728: PPUSH
4729: CALL_OW 235
4733: GO 4718
4735: POP
4736: POP
// for i in yourApemans do
4737: LD_ADDR_VAR 0 2
4741: PUSH
4742: LD_EXP 14
4746: PUSH
4747: FOR_IN
4748: IFFALSE 4764
// SetSide ( i , 1 ) ;
4750: LD_VAR 0 2
4754: PPUSH
4755: LD_INT 1
4757: PPUSH
4758: CALL_OW 235
4762: GO 4747
4764: POP
4765: POP
// if Mike then
4766: LD_EXP 10
4770: IFFALSE 4784
// SetSide ( Mike , 1 ) ;
4772: LD_EXP 10
4776: PPUSH
4777: LD_INT 1
4779: PPUSH
4780: CALL_OW 235
// SetSide ( JMM , 1 ) ;
4784: LD_EXP 1
4788: PPUSH
4789: LD_INT 1
4791: PPUSH
4792: CALL_OW 235
// SetSkill ( yourApemans , 2 , 3 ) ;
4796: LD_EXP 14
4800: PPUSH
4801: LD_INT 2
4803: PPUSH
4804: LD_INT 3
4806: PPUSH
4807: CALL_OW 237
// end ;
4811: LD_VAR 0 1
4815: RET
// export function SaveDeltaCharacters ; begin
4816: LD_INT 0
4818: PPUSH
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4819: LD_EXP 1
4823: PPUSH
4824: LD_EXP 23
4828: PUSH
4829: LD_STRING JMM
4831: STR
4832: PPUSH
4833: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4837: LD_EXP 16
4841: PPUSH
4842: LD_STRING DeltaDoctor
4844: PPUSH
4845: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4849: LD_EXP 3
4853: PPUSH
4854: LD_EXP 23
4858: PUSH
4859: LD_STRING Denis
4861: STR
4862: PPUSH
4863: CALL_OW 38
// if Lisa in selectedPeople then
4867: LD_EXP 4
4871: PUSH
4872: LD_EXP 18
4876: IN
4877: IFFALSE 4909
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4879: LD_EXP 4
4883: PPUSH
4884: LD_EXP 23
4888: PUSH
4889: LD_STRING Lisa
4891: STR
4892: PPUSH
4893: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4897: LD_INT 1
4899: PPUSH
4900: LD_STRING LisaIn06
4902: PPUSH
4903: CALL_OW 39
// end else
4907: GO 4930
// if IsOk ( Lisa ) then
4909: LD_EXP 4
4913: PPUSH
4914: CALL_OW 302
4918: IFFALSE 4930
// SaveVariable ( 1 , LisaStayInDelta ) ;
4920: LD_INT 1
4922: PPUSH
4923: LD_STRING LisaStayInDelta
4925: PPUSH
4926: CALL_OW 39
// if Bobby in selectedPeople then
4930: LD_EXP 6
4934: PUSH
4935: LD_EXP 18
4939: IN
4940: IFFALSE 4972
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4942: LD_EXP 6
4946: PPUSH
4947: LD_EXP 23
4951: PUSH
4952: LD_STRING Bobby
4954: STR
4955: PPUSH
4956: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4960: LD_INT 1
4962: PPUSH
4963: LD_STRING BobbyIn06
4965: PPUSH
4966: CALL_OW 39
// end else
4970: GO 4993
// if IsOk ( Bobby ) then
4972: LD_EXP 6
4976: PPUSH
4977: CALL_OW 302
4981: IFFALSE 4993
// SaveVariable ( 1 , BobbyStayInDelta ) ;
4983: LD_INT 1
4985: PPUSH
4986: LD_STRING BobbyStayInDelta
4988: PPUSH
4989: CALL_OW 39
// if Cyrus in selectedPeople then
4993: LD_EXP 7
4997: PUSH
4998: LD_EXP 18
5002: IN
5003: IFFALSE 5035
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5005: LD_EXP 7
5009: PPUSH
5010: LD_EXP 23
5014: PUSH
5015: LD_STRING Cyrus
5017: STR
5018: PPUSH
5019: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
5023: LD_INT 1
5025: PPUSH
5026: LD_STRING CyrusIn06
5028: PPUSH
5029: CALL_OW 39
// end else
5033: GO 5056
// if IsOk ( Cyrus ) then
5035: LD_EXP 7
5039: PPUSH
5040: CALL_OW 302
5044: IFFALSE 5056
// SaveVariable ( 1 , CyrusStayInDelta ) ;
5046: LD_INT 1
5048: PPUSH
5049: LD_STRING CyrusStayInDelta
5051: PPUSH
5052: CALL_OW 39
// if Frank in selectedPeople then
5056: LD_EXP 5
5060: PUSH
5061: LD_EXP 18
5065: IN
5066: IFFALSE 5098
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5068: LD_EXP 5
5072: PPUSH
5073: LD_EXP 23
5077: PUSH
5078: LD_STRING Frank
5080: STR
5081: PPUSH
5082: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
5086: LD_INT 1
5088: PPUSH
5089: LD_STRING FrankIn06
5091: PPUSH
5092: CALL_OW 39
// end else
5096: GO 5119
// if IsOk ( Frank ) then
5098: LD_EXP 5
5102: PPUSH
5103: CALL_OW 302
5107: IFFALSE 5119
// SaveVariable ( 1 , FrankStayInDelta ) ;
5109: LD_INT 1
5111: PPUSH
5112: LD_STRING FrankStayInDelta
5114: PPUSH
5115: CALL_OW 39
// if Brown in selectedPeople then
5119: LD_EXP 8
5123: PUSH
5124: LD_EXP 18
5128: IN
5129: IFFALSE 5161
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5131: LD_EXP 8
5135: PPUSH
5136: LD_EXP 23
5140: PUSH
5141: LD_STRING Brown
5143: STR
5144: PPUSH
5145: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
5149: LD_INT 1
5151: PPUSH
5152: LD_STRING BrownIn06
5154: PPUSH
5155: CALL_OW 39
// end else
5159: GO 5182
// if IsOk ( Brown ) then
5161: LD_EXP 8
5165: PPUSH
5166: CALL_OW 302
5170: IFFALSE 5182
// SaveVariable ( 1 , BrownStayInDelta ) ;
5172: LD_INT 1
5174: PPUSH
5175: LD_STRING BrownStayInDelta
5177: PPUSH
5178: CALL_OW 39
// if Donaldson in selectedPeople then
5182: LD_EXP 9
5186: PUSH
5187: LD_EXP 18
5191: IN
5192: IFFALSE 5224
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5194: LD_EXP 9
5198: PPUSH
5199: LD_EXP 23
5203: PUSH
5204: LD_STRING Donaldson
5206: STR
5207: PPUSH
5208: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5212: LD_INT 1
5214: PPUSH
5215: LD_STRING DonaldsonIn06
5217: PPUSH
5218: CALL_OW 39
// end else
5222: GO 5245
// if IsOk ( Donaldson ) then
5224: LD_EXP 9
5228: PPUSH
5229: CALL_OW 302
5233: IFFALSE 5245
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5235: LD_INT 1
5237: PPUSH
5238: LD_STRING DonaldsonStayInDelta
5240: PPUSH
5241: CALL_OW 39
// if Gladstone in selectedPeople then
5245: LD_EXP 2
5249: PUSH
5250: LD_EXP 18
5254: IN
5255: IFFALSE 5287
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5257: LD_EXP 2
5261: PPUSH
5262: LD_EXP 23
5266: PUSH
5267: LD_STRING Gladstone
5269: STR
5270: PPUSH
5271: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
5275: LD_INT 1
5277: PPUSH
5278: LD_STRING GladstoneIn06
5280: PPUSH
5281: CALL_OW 39
// end else
5285: GO 5308
// if IsOk ( Gladstone ) then
5287: LD_EXP 2
5291: PPUSH
5292: CALL_OW 302
5296: IFFALSE 5308
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5298: LD_INT 1
5300: PPUSH
5301: LD_STRING GladstoneStayInDelta
5303: PPUSH
5304: CALL_OW 39
// if Mike then
5308: LD_EXP 10
5312: IFFALSE 5332
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
5314: LD_EXP 10
5318: PPUSH
5319: LD_EXP 23
5323: PUSH
5324: LD_STRING Mike
5326: STR
5327: PPUSH
5328: CALL_OW 38
// selectedPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ;
5332: LD_ADDR_EXP 18
5336: PUSH
5337: LD_INT 22
5339: PUSH
5340: LD_INT 1
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: PUSH
5347: LD_INT 23
5349: PUSH
5350: LD_INT 1
5352: PUSH
5353: EMPTY
5354: LIST
5355: LIST
5356: PUSH
5357: LD_INT 21
5359: PUSH
5360: LD_INT 1
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: PUSH
5367: EMPTY
5368: LIST
5369: LIST
5370: LIST
5371: PPUSH
5372: CALL_OW 69
5376: ST_TO_ADDR
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5377: LD_EXP 14
5381: PPUSH
5382: LD_STRING ApeIn06
5384: PPUSH
5385: CALL_OW 38
// SaveCharacters ( selectedPeople diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersIn06 ) ;
5389: LD_EXP 18
5393: PUSH
5394: LD_EXP 1
5398: PUSH
5399: LD_EXP 4
5403: PUSH
5404: LD_EXP 6
5408: PUSH
5409: LD_EXP 7
5413: PUSH
5414: LD_EXP 5
5418: PUSH
5419: LD_EXP 8
5423: PUSH
5424: LD_EXP 9
5428: PUSH
5429: LD_EXP 2
5433: PUSH
5434: LD_EXP 3
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: DIFF
5450: PPUSH
5451: LD_STRING OthersIn06
5453: PPUSH
5454: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersStayInDelta ) ;
5458: LD_INT 22
5460: PUSH
5461: LD_INT 4
5463: PUSH
5464: EMPTY
5465: LIST
5466: LIST
5467: PUSH
5468: LD_INT 2
5470: PUSH
5471: LD_INT 25
5473: PUSH
5474: LD_INT 1
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: PUSH
5481: LD_INT 25
5483: PUSH
5484: LD_INT 2
5486: PUSH
5487: EMPTY
5488: LIST
5489: LIST
5490: PUSH
5491: LD_INT 25
5493: PUSH
5494: LD_INT 3
5496: PUSH
5497: EMPTY
5498: LIST
5499: LIST
5500: PUSH
5501: LD_INT 25
5503: PUSH
5504: LD_INT 4
5506: PUSH
5507: EMPTY
5508: LIST
5509: LIST
5510: PUSH
5511: EMPTY
5512: LIST
5513: LIST
5514: LIST
5515: LIST
5516: LIST
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PPUSH
5522: CALL_OW 69
5526: PUSH
5527: LD_EXP 16
5531: PUSH
5532: LD_EXP 4
5536: PUSH
5537: LD_EXP 6
5541: PUSH
5542: LD_EXP 7
5546: PUSH
5547: LD_EXP 5
5551: PUSH
5552: LD_EXP 8
5556: PUSH
5557: LD_EXP 9
5561: PUSH
5562: LD_EXP 2
5566: PUSH
5567: LD_EXP 3
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: LIST
5581: LIST
5582: DIFF
5583: PPUSH
5584: LD_STRING OthersStayInDelta
5586: PPUSH
5587: CALL_OW 38
// end ;
5591: LD_VAR 0 1
5595: RET
// export function SaveCargos ; var i ; begin
5596: LD_INT 0
5598: PPUSH
5599: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
5600: LD_ADDR_VAR 0 2
5604: PUSH
5605: LD_INT 3
5607: PPUSH
5608: LD_INT 22
5610: PUSH
5611: LD_INT 1
5613: PUSH
5614: EMPTY
5615: LIST
5616: LIST
5617: PUSH
5618: LD_INT 34
5620: PUSH
5621: LD_INT 12
5623: PUSH
5624: EMPTY
5625: LIST
5626: LIST
5627: PUSH
5628: EMPTY
5629: LIST
5630: LIST
5631: PPUSH
5632: CALL_OW 70
5636: PUSH
5637: FOR_IN
5638: IFFALSE 5666
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
5640: LD_ADDR_EXP 22
5644: PUSH
5645: LD_EXP 22
5649: PUSH
5650: LD_VAR 0 2
5654: PPUSH
5655: CALL 66994 0 1
5659: PUSH
5660: EMPTY
5661: LIST
5662: ADD
5663: ST_TO_ADDR
5664: GO 5637
5666: POP
5667: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
5668: LD_EXP 22
5672: PPUSH
5673: LD_STRING 06_ResourcesInCargo06_1
5675: PPUSH
5676: CALL_OW 39
// end ; end_of_file
5680: LD_VAR 0 1
5684: RET
// on Command ( comandid ) do var i ;
5685: LD_INT 0
5687: PPUSH
// begin if comandid = 65 then
5688: LD_VAR 0 1
5692: PUSH
5693: LD_INT 65
5695: EQUAL
5696: IFFALSE 5737
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5698: LD_ADDR_VAR 0 2
5702: PUSH
5703: LD_INT 22
5705: PUSH
5706: LD_INT 1
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: PUSH
5713: EMPTY
5714: LIST
5715: PPUSH
5716: CALL_OW 69
5720: PUSH
5721: FOR_IN
5722: IFFALSE 5735
// ComStop ( i ) ;
5724: LD_VAR 0 2
5728: PPUSH
5729: CALL_OW 141
5733: GO 5721
5735: POP
5736: POP
// end ;
5737: PPOPN 2
5739: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5740: LD_INT 0
5742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5743: LD_ADDR_VAR 0 3
5747: PUSH
5748: LD_INT 22
5750: PUSH
5751: LD_INT 1
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: PUSH
5758: LD_INT 21
5760: PUSH
5761: LD_INT 3
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: PUSH
5768: LD_INT 30
5770: PUSH
5771: LD_INT 0
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: PUSH
5778: EMPTY
5779: LIST
5780: LIST
5781: LIST
5782: PPUSH
5783: CALL_OW 69
5787: ST_TO_ADDR
// if not tmp then
5788: LD_VAR 0 3
5792: NOT
5793: IFFALSE 5797
// exit ;
5795: GO 5827
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5797: LD_VAR 0 1
5801: PPUSH
5802: LD_VAR 0 3
5806: PUSH
5807: LD_INT 1
5809: ARRAY
5810: PPUSH
5811: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5815: LD_VAR 0 1
5819: PPUSH
5820: LD_INT 4
5822: PPUSH
5823: CALL_OW 235
// end ;
5827: PPOPN 3
5829: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5830: LD_VAR 0 1
5834: PUSH
5835: LD_EXP 1
5839: EQUAL
5840: IFFALSE 5849
// YouLost ( JMM ) ;
5842: LD_STRING JMM
5844: PPUSH
5845: CALL_OW 104
// SOS_UnitDestroyed ( un ) ;
5849: LD_VAR 0 1
5853: PPUSH
5854: CALL 21672 0 1
// end ;
5858: PPOPN 1
5860: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5861: LD_VAR 0 1
5865: PPUSH
5866: LD_VAR 0 2
5870: PPUSH
5871: CALL 21792 0 2
// end ; end_of_file
5875: PPOPN 2
5877: END
// export globalGameSaveCounter ; every 0 0$1 do
5878: GO 5880
5880: DISABLE
// begin enable ;
5881: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5882: LD_STRING updateTimer(
5884: PUSH
5885: LD_OWVAR 1
5889: STR
5890: PUSH
5891: LD_STRING );
5893: STR
5894: PPUSH
5895: CALL_OW 559
// end ;
5899: END
// every 0 0$1 do
5900: GO 5902
5902: DISABLE
// begin globalGameSaveCounter := 0 ;
5903: LD_ADDR_EXP 25
5907: PUSH
5908: LD_INT 0
5910: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
5911: LD_STRING setGameSaveCounter(0)
5913: PPUSH
5914: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
5918: LD_STRING initStreamRollete();
5920: PPUSH
5921: CALL_OW 559
// InitStreamMode ;
5925: CALL 7251 0 0
// DefineStreamItems ( false ) ;
5929: LD_INT 0
5931: PPUSH
5932: CALL 7715 0 1
// end ;
5936: END
// export function SOS_MapStart ( ) ; begin
5937: LD_INT 0
5939: PPUSH
// if streamModeActive then
5940: LD_EXP 26
5944: IFFALSE 5953
// DefineStreamItems ( true ) ;
5946: LD_INT 1
5948: PPUSH
5949: CALL 7715 0 1
// UpdateLuaVariables ( ) ;
5953: CALL 5970 0 0
// UpdateFactoryWaypoints ( ) ;
5957: CALL 20576 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5961: CALL 20833 0 0
// end ;
5965: LD_VAR 0 1
5969: RET
// function UpdateLuaVariables ( ) ; begin
5970: LD_INT 0
5972: PPUSH
// if globalGameSaveCounter then
5973: LD_EXP 25
5977: IFFALSE 6011
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
5979: LD_ADDR_EXP 25
5983: PUSH
5984: LD_EXP 25
5988: PPUSH
5989: CALL 64790 0 1
5993: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5994: LD_STRING setGameSaveCounter(
5996: PUSH
5997: LD_EXP 25
6001: STR
6002: PUSH
6003: LD_STRING )
6005: STR
6006: PPUSH
6007: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
6011: LD_STRING setGameDifficulty(
6013: PUSH
6014: LD_OWVAR 67
6018: STR
6019: PUSH
6020: LD_STRING )
6022: STR
6023: PPUSH
6024: CALL_OW 559
// end ;
6028: LD_VAR 0 1
6032: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
6033: LD_INT 0
6035: PPUSH
// if p2 = stream_mode then
6036: LD_VAR 0 2
6040: PUSH
6041: LD_INT 100
6043: EQUAL
6044: IFFALSE 7047
// begin if not StreamModeActive then
6046: LD_EXP 26
6050: NOT
6051: IFFALSE 6061
// StreamModeActive := true ;
6053: LD_ADDR_EXP 26
6057: PUSH
6058: LD_INT 1
6060: ST_TO_ADDR
// if p3 = 0 then
6061: LD_VAR 0 3
6065: PUSH
6066: LD_INT 0
6068: EQUAL
6069: IFFALSE 6075
// InitStreamMode ;
6071: CALL 7251 0 0
// if p3 = 1 then
6075: LD_VAR 0 3
6079: PUSH
6080: LD_INT 1
6082: EQUAL
6083: IFFALSE 6093
// sRocket := true ;
6085: LD_ADDR_EXP 31
6089: PUSH
6090: LD_INT 1
6092: ST_TO_ADDR
// if p3 = 2 then
6093: LD_VAR 0 3
6097: PUSH
6098: LD_INT 2
6100: EQUAL
6101: IFFALSE 6111
// sSpeed := true ;
6103: LD_ADDR_EXP 30
6107: PUSH
6108: LD_INT 1
6110: ST_TO_ADDR
// if p3 = 3 then
6111: LD_VAR 0 3
6115: PUSH
6116: LD_INT 3
6118: EQUAL
6119: IFFALSE 6129
// sEngine := true ;
6121: LD_ADDR_EXP 32
6125: PUSH
6126: LD_INT 1
6128: ST_TO_ADDR
// if p3 = 4 then
6129: LD_VAR 0 3
6133: PUSH
6134: LD_INT 4
6136: EQUAL
6137: IFFALSE 6147
// sSpec := true ;
6139: LD_ADDR_EXP 29
6143: PUSH
6144: LD_INT 1
6146: ST_TO_ADDR
// if p3 = 5 then
6147: LD_VAR 0 3
6151: PUSH
6152: LD_INT 5
6154: EQUAL
6155: IFFALSE 6165
// sLevel := true ;
6157: LD_ADDR_EXP 33
6161: PUSH
6162: LD_INT 1
6164: ST_TO_ADDR
// if p3 = 6 then
6165: LD_VAR 0 3
6169: PUSH
6170: LD_INT 6
6172: EQUAL
6173: IFFALSE 6183
// sArmoury := true ;
6175: LD_ADDR_EXP 34
6179: PUSH
6180: LD_INT 1
6182: ST_TO_ADDR
// if p3 = 7 then
6183: LD_VAR 0 3
6187: PUSH
6188: LD_INT 7
6190: EQUAL
6191: IFFALSE 6201
// sRadar := true ;
6193: LD_ADDR_EXP 35
6197: PUSH
6198: LD_INT 1
6200: ST_TO_ADDR
// if p3 = 8 then
6201: LD_VAR 0 3
6205: PUSH
6206: LD_INT 8
6208: EQUAL
6209: IFFALSE 6219
// sBunker := true ;
6211: LD_ADDR_EXP 36
6215: PUSH
6216: LD_INT 1
6218: ST_TO_ADDR
// if p3 = 9 then
6219: LD_VAR 0 3
6223: PUSH
6224: LD_INT 9
6226: EQUAL
6227: IFFALSE 6237
// sHack := true ;
6229: LD_ADDR_EXP 37
6233: PUSH
6234: LD_INT 1
6236: ST_TO_ADDR
// if p3 = 10 then
6237: LD_VAR 0 3
6241: PUSH
6242: LD_INT 10
6244: EQUAL
6245: IFFALSE 6255
// sFire := true ;
6247: LD_ADDR_EXP 38
6251: PUSH
6252: LD_INT 1
6254: ST_TO_ADDR
// if p3 = 11 then
6255: LD_VAR 0 3
6259: PUSH
6260: LD_INT 11
6262: EQUAL
6263: IFFALSE 6273
// sRefresh := true ;
6265: LD_ADDR_EXP 39
6269: PUSH
6270: LD_INT 1
6272: ST_TO_ADDR
// if p3 = 12 then
6273: LD_VAR 0 3
6277: PUSH
6278: LD_INT 12
6280: EQUAL
6281: IFFALSE 6291
// sExp := true ;
6283: LD_ADDR_EXP 40
6287: PUSH
6288: LD_INT 1
6290: ST_TO_ADDR
// if p3 = 13 then
6291: LD_VAR 0 3
6295: PUSH
6296: LD_INT 13
6298: EQUAL
6299: IFFALSE 6309
// sDepot := true ;
6301: LD_ADDR_EXP 41
6305: PUSH
6306: LD_INT 1
6308: ST_TO_ADDR
// if p3 = 14 then
6309: LD_VAR 0 3
6313: PUSH
6314: LD_INT 14
6316: EQUAL
6317: IFFALSE 6327
// sFlag := true ;
6319: LD_ADDR_EXP 42
6323: PUSH
6324: LD_INT 1
6326: ST_TO_ADDR
// if p3 = 15 then
6327: LD_VAR 0 3
6331: PUSH
6332: LD_INT 15
6334: EQUAL
6335: IFFALSE 6345
// sKamikadze := true ;
6337: LD_ADDR_EXP 50
6341: PUSH
6342: LD_INT 1
6344: ST_TO_ADDR
// if p3 = 16 then
6345: LD_VAR 0 3
6349: PUSH
6350: LD_INT 16
6352: EQUAL
6353: IFFALSE 6363
// sTroll := true ;
6355: LD_ADDR_EXP 51
6359: PUSH
6360: LD_INT 1
6362: ST_TO_ADDR
// if p3 = 17 then
6363: LD_VAR 0 3
6367: PUSH
6368: LD_INT 17
6370: EQUAL
6371: IFFALSE 6381
// sSlow := true ;
6373: LD_ADDR_EXP 52
6377: PUSH
6378: LD_INT 1
6380: ST_TO_ADDR
// if p3 = 18 then
6381: LD_VAR 0 3
6385: PUSH
6386: LD_INT 18
6388: EQUAL
6389: IFFALSE 6399
// sLack := true ;
6391: LD_ADDR_EXP 53
6395: PUSH
6396: LD_INT 1
6398: ST_TO_ADDR
// if p3 = 19 then
6399: LD_VAR 0 3
6403: PUSH
6404: LD_INT 19
6406: EQUAL
6407: IFFALSE 6417
// sTank := true ;
6409: LD_ADDR_EXP 55
6413: PUSH
6414: LD_INT 1
6416: ST_TO_ADDR
// if p3 = 20 then
6417: LD_VAR 0 3
6421: PUSH
6422: LD_INT 20
6424: EQUAL
6425: IFFALSE 6435
// sRemote := true ;
6427: LD_ADDR_EXP 56
6431: PUSH
6432: LD_INT 1
6434: ST_TO_ADDR
// if p3 = 21 then
6435: LD_VAR 0 3
6439: PUSH
6440: LD_INT 21
6442: EQUAL
6443: IFFALSE 6453
// sPowell := true ;
6445: LD_ADDR_EXP 57
6449: PUSH
6450: LD_INT 1
6452: ST_TO_ADDR
// if p3 = 22 then
6453: LD_VAR 0 3
6457: PUSH
6458: LD_INT 22
6460: EQUAL
6461: IFFALSE 6471
// sTeleport := true ;
6463: LD_ADDR_EXP 60
6467: PUSH
6468: LD_INT 1
6470: ST_TO_ADDR
// if p3 = 23 then
6471: LD_VAR 0 3
6475: PUSH
6476: LD_INT 23
6478: EQUAL
6479: IFFALSE 6489
// sOilTower := true ;
6481: LD_ADDR_EXP 62
6485: PUSH
6486: LD_INT 1
6488: ST_TO_ADDR
// if p3 = 24 then
6489: LD_VAR 0 3
6493: PUSH
6494: LD_INT 24
6496: EQUAL
6497: IFFALSE 6507
// sShovel := true ;
6499: LD_ADDR_EXP 63
6503: PUSH
6504: LD_INT 1
6506: ST_TO_ADDR
// if p3 = 25 then
6507: LD_VAR 0 3
6511: PUSH
6512: LD_INT 25
6514: EQUAL
6515: IFFALSE 6525
// sSheik := true ;
6517: LD_ADDR_EXP 64
6521: PUSH
6522: LD_INT 1
6524: ST_TO_ADDR
// if p3 = 26 then
6525: LD_VAR 0 3
6529: PUSH
6530: LD_INT 26
6532: EQUAL
6533: IFFALSE 6543
// sEarthquake := true ;
6535: LD_ADDR_EXP 66
6539: PUSH
6540: LD_INT 1
6542: ST_TO_ADDR
// if p3 = 27 then
6543: LD_VAR 0 3
6547: PUSH
6548: LD_INT 27
6550: EQUAL
6551: IFFALSE 6561
// sAI := true ;
6553: LD_ADDR_EXP 67
6557: PUSH
6558: LD_INT 1
6560: ST_TO_ADDR
// if p3 = 28 then
6561: LD_VAR 0 3
6565: PUSH
6566: LD_INT 28
6568: EQUAL
6569: IFFALSE 6579
// sCargo := true ;
6571: LD_ADDR_EXP 70
6575: PUSH
6576: LD_INT 1
6578: ST_TO_ADDR
// if p3 = 29 then
6579: LD_VAR 0 3
6583: PUSH
6584: LD_INT 29
6586: EQUAL
6587: IFFALSE 6597
// sDLaser := true ;
6589: LD_ADDR_EXP 71
6593: PUSH
6594: LD_INT 1
6596: ST_TO_ADDR
// if p3 = 30 then
6597: LD_VAR 0 3
6601: PUSH
6602: LD_INT 30
6604: EQUAL
6605: IFFALSE 6615
// sExchange := true ;
6607: LD_ADDR_EXP 72
6611: PUSH
6612: LD_INT 1
6614: ST_TO_ADDR
// if p3 = 31 then
6615: LD_VAR 0 3
6619: PUSH
6620: LD_INT 31
6622: EQUAL
6623: IFFALSE 6633
// sFac := true ;
6625: LD_ADDR_EXP 73
6629: PUSH
6630: LD_INT 1
6632: ST_TO_ADDR
// if p3 = 32 then
6633: LD_VAR 0 3
6637: PUSH
6638: LD_INT 32
6640: EQUAL
6641: IFFALSE 6651
// sPower := true ;
6643: LD_ADDR_EXP 74
6647: PUSH
6648: LD_INT 1
6650: ST_TO_ADDR
// if p3 = 33 then
6651: LD_VAR 0 3
6655: PUSH
6656: LD_INT 33
6658: EQUAL
6659: IFFALSE 6669
// sRandom := true ;
6661: LD_ADDR_EXP 75
6665: PUSH
6666: LD_INT 1
6668: ST_TO_ADDR
// if p3 = 34 then
6669: LD_VAR 0 3
6673: PUSH
6674: LD_INT 34
6676: EQUAL
6677: IFFALSE 6687
// sShield := true ;
6679: LD_ADDR_EXP 76
6683: PUSH
6684: LD_INT 1
6686: ST_TO_ADDR
// if p3 = 35 then
6687: LD_VAR 0 3
6691: PUSH
6692: LD_INT 35
6694: EQUAL
6695: IFFALSE 6705
// sTime := true ;
6697: LD_ADDR_EXP 77
6701: PUSH
6702: LD_INT 1
6704: ST_TO_ADDR
// if p3 = 36 then
6705: LD_VAR 0 3
6709: PUSH
6710: LD_INT 36
6712: EQUAL
6713: IFFALSE 6723
// sTools := true ;
6715: LD_ADDR_EXP 78
6719: PUSH
6720: LD_INT 1
6722: ST_TO_ADDR
// if p3 = 101 then
6723: LD_VAR 0 3
6727: PUSH
6728: LD_INT 101
6730: EQUAL
6731: IFFALSE 6741
// sSold := true ;
6733: LD_ADDR_EXP 43
6737: PUSH
6738: LD_INT 1
6740: ST_TO_ADDR
// if p3 = 102 then
6741: LD_VAR 0 3
6745: PUSH
6746: LD_INT 102
6748: EQUAL
6749: IFFALSE 6759
// sDiff := true ;
6751: LD_ADDR_EXP 44
6755: PUSH
6756: LD_INT 1
6758: ST_TO_ADDR
// if p3 = 103 then
6759: LD_VAR 0 3
6763: PUSH
6764: LD_INT 103
6766: EQUAL
6767: IFFALSE 6777
// sFog := true ;
6769: LD_ADDR_EXP 47
6773: PUSH
6774: LD_INT 1
6776: ST_TO_ADDR
// if p3 = 104 then
6777: LD_VAR 0 3
6781: PUSH
6782: LD_INT 104
6784: EQUAL
6785: IFFALSE 6795
// sReset := true ;
6787: LD_ADDR_EXP 48
6791: PUSH
6792: LD_INT 1
6794: ST_TO_ADDR
// if p3 = 105 then
6795: LD_VAR 0 3
6799: PUSH
6800: LD_INT 105
6802: EQUAL
6803: IFFALSE 6813
// sSun := true ;
6805: LD_ADDR_EXP 49
6809: PUSH
6810: LD_INT 1
6812: ST_TO_ADDR
// if p3 = 106 then
6813: LD_VAR 0 3
6817: PUSH
6818: LD_INT 106
6820: EQUAL
6821: IFFALSE 6831
// sTiger := true ;
6823: LD_ADDR_EXP 45
6827: PUSH
6828: LD_INT 1
6830: ST_TO_ADDR
// if p3 = 107 then
6831: LD_VAR 0 3
6835: PUSH
6836: LD_INT 107
6838: EQUAL
6839: IFFALSE 6849
// sBomb := true ;
6841: LD_ADDR_EXP 46
6845: PUSH
6846: LD_INT 1
6848: ST_TO_ADDR
// if p3 = 108 then
6849: LD_VAR 0 3
6853: PUSH
6854: LD_INT 108
6856: EQUAL
6857: IFFALSE 6867
// sWound := true ;
6859: LD_ADDR_EXP 54
6863: PUSH
6864: LD_INT 1
6866: ST_TO_ADDR
// if p3 = 109 then
6867: LD_VAR 0 3
6871: PUSH
6872: LD_INT 109
6874: EQUAL
6875: IFFALSE 6885
// sBetray := true ;
6877: LD_ADDR_EXP 58
6881: PUSH
6882: LD_INT 1
6884: ST_TO_ADDR
// if p3 = 110 then
6885: LD_VAR 0 3
6889: PUSH
6890: LD_INT 110
6892: EQUAL
6893: IFFALSE 6903
// sContamin := true ;
6895: LD_ADDR_EXP 59
6899: PUSH
6900: LD_INT 1
6902: ST_TO_ADDR
// if p3 = 111 then
6903: LD_VAR 0 3
6907: PUSH
6908: LD_INT 111
6910: EQUAL
6911: IFFALSE 6921
// sOil := true ;
6913: LD_ADDR_EXP 61
6917: PUSH
6918: LD_INT 1
6920: ST_TO_ADDR
// if p3 = 112 then
6921: LD_VAR 0 3
6925: PUSH
6926: LD_INT 112
6928: EQUAL
6929: IFFALSE 6939
// sStu := true ;
6931: LD_ADDR_EXP 65
6935: PUSH
6936: LD_INT 1
6938: ST_TO_ADDR
// if p3 = 113 then
6939: LD_VAR 0 3
6943: PUSH
6944: LD_INT 113
6946: EQUAL
6947: IFFALSE 6957
// sBazooka := true ;
6949: LD_ADDR_EXP 68
6953: PUSH
6954: LD_INT 1
6956: ST_TO_ADDR
// if p3 = 114 then
6957: LD_VAR 0 3
6961: PUSH
6962: LD_INT 114
6964: EQUAL
6965: IFFALSE 6975
// sMortar := true ;
6967: LD_ADDR_EXP 69
6971: PUSH
6972: LD_INT 1
6974: ST_TO_ADDR
// if p3 = 115 then
6975: LD_VAR 0 3
6979: PUSH
6980: LD_INT 115
6982: EQUAL
6983: IFFALSE 6993
// sRanger := true ;
6985: LD_ADDR_EXP 79
6989: PUSH
6990: LD_INT 1
6992: ST_TO_ADDR
// if p3 = 116 then
6993: LD_VAR 0 3
6997: PUSH
6998: LD_INT 116
7000: EQUAL
7001: IFFALSE 7011
// sComputer := true ;
7003: LD_ADDR_EXP 80
7007: PUSH
7008: LD_INT 1
7010: ST_TO_ADDR
// if p3 = 117 then
7011: LD_VAR 0 3
7015: PUSH
7016: LD_INT 117
7018: EQUAL
7019: IFFALSE 7029
// s30 := true ;
7021: LD_ADDR_EXP 81
7025: PUSH
7026: LD_INT 1
7028: ST_TO_ADDR
// if p3 = 118 then
7029: LD_VAR 0 3
7033: PUSH
7034: LD_INT 118
7036: EQUAL
7037: IFFALSE 7047
// s60 := true ;
7039: LD_ADDR_EXP 82
7043: PUSH
7044: LD_INT 1
7046: ST_TO_ADDR
// end ; if p2 = hack_mode then
7047: LD_VAR 0 2
7051: PUSH
7052: LD_INT 101
7054: EQUAL
7055: IFFALSE 7183
// begin case p3 of 1 :
7057: LD_VAR 0 3
7061: PUSH
7062: LD_INT 1
7064: DOUBLE
7065: EQUAL
7066: IFTRUE 7070
7068: GO 7077
7070: POP
// hHackUnlimitedResources ; 2 :
7071: CALL 19322 0 0
7075: GO 7183
7077: LD_INT 2
7079: DOUBLE
7080: EQUAL
7081: IFTRUE 7085
7083: GO 7092
7085: POP
// hHackSetLevel10 ; 3 :
7086: CALL 19455 0 0
7090: GO 7183
7092: LD_INT 3
7094: DOUBLE
7095: EQUAL
7096: IFTRUE 7100
7098: GO 7107
7100: POP
// hHackSetLevel10YourUnits ; 4 :
7101: CALL 19540 0 0
7105: GO 7183
7107: LD_INT 4
7109: DOUBLE
7110: EQUAL
7111: IFTRUE 7115
7113: GO 7122
7115: POP
// hHackInvincible ; 5 :
7116: CALL 19988 0 0
7120: GO 7183
7122: LD_INT 5
7124: DOUBLE
7125: EQUAL
7126: IFTRUE 7130
7128: GO 7137
7130: POP
// hHackInvisible ; 6 :
7131: CALL 20099 0 0
7135: GO 7183
7137: LD_INT 6
7139: DOUBLE
7140: EQUAL
7141: IFTRUE 7145
7143: GO 7152
7145: POP
// hHackChangeYourSide ; 7 :
7146: CALL 20156 0 0
7150: GO 7183
7152: LD_INT 7
7154: DOUBLE
7155: EQUAL
7156: IFTRUE 7160
7158: GO 7167
7160: POP
// hHackChangeUnitSide ; 8 :
7161: CALL 20198 0 0
7165: GO 7183
7167: LD_INT 8
7169: DOUBLE
7170: EQUAL
7171: IFTRUE 7175
7173: GO 7182
7175: POP
// hHackFog ; end ;
7176: CALL 20299 0 0
7180: GO 7183
7182: POP
// end ; if p2 = game_save_mode then
7183: LD_VAR 0 2
7187: PUSH
7188: LD_INT 102
7190: EQUAL
7191: IFFALSE 7246
// begin if p3 = 1 then
7193: LD_VAR 0 3
7197: PUSH
7198: LD_INT 1
7200: EQUAL
7201: IFFALSE 7213
// globalGameSaveCounter := p4 ;
7203: LD_ADDR_EXP 25
7207: PUSH
7208: LD_VAR 0 4
7212: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
7213: LD_VAR 0 3
7217: PUSH
7218: LD_INT 2
7220: EQUAL
7221: PUSH
7222: LD_EXP 25
7226: AND
7227: IFFALSE 7246
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7229: LD_STRING setGameSaveCounter(
7231: PUSH
7232: LD_EXP 25
7236: STR
7237: PUSH
7238: LD_STRING )
7240: STR
7241: PPUSH
7242: CALL_OW 559
// end ; end ;
7246: LD_VAR 0 7
7250: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
7251: LD_INT 0
7253: PPUSH
// streamModeActive := false ;
7254: LD_ADDR_EXP 26
7258: PUSH
7259: LD_INT 0
7261: ST_TO_ADDR
// normalCounter := 36 ;
7262: LD_ADDR_EXP 27
7266: PUSH
7267: LD_INT 36
7269: ST_TO_ADDR
// hardcoreCounter := 18 ;
7270: LD_ADDR_EXP 28
7274: PUSH
7275: LD_INT 18
7277: ST_TO_ADDR
// sRocket := false ;
7278: LD_ADDR_EXP 31
7282: PUSH
7283: LD_INT 0
7285: ST_TO_ADDR
// sSpeed := false ;
7286: LD_ADDR_EXP 30
7290: PUSH
7291: LD_INT 0
7293: ST_TO_ADDR
// sEngine := false ;
7294: LD_ADDR_EXP 32
7298: PUSH
7299: LD_INT 0
7301: ST_TO_ADDR
// sSpec := false ;
7302: LD_ADDR_EXP 29
7306: PUSH
7307: LD_INT 0
7309: ST_TO_ADDR
// sLevel := false ;
7310: LD_ADDR_EXP 33
7314: PUSH
7315: LD_INT 0
7317: ST_TO_ADDR
// sArmoury := false ;
7318: LD_ADDR_EXP 34
7322: PUSH
7323: LD_INT 0
7325: ST_TO_ADDR
// sRadar := false ;
7326: LD_ADDR_EXP 35
7330: PUSH
7331: LD_INT 0
7333: ST_TO_ADDR
// sBunker := false ;
7334: LD_ADDR_EXP 36
7338: PUSH
7339: LD_INT 0
7341: ST_TO_ADDR
// sHack := false ;
7342: LD_ADDR_EXP 37
7346: PUSH
7347: LD_INT 0
7349: ST_TO_ADDR
// sFire := false ;
7350: LD_ADDR_EXP 38
7354: PUSH
7355: LD_INT 0
7357: ST_TO_ADDR
// sRefresh := false ;
7358: LD_ADDR_EXP 39
7362: PUSH
7363: LD_INT 0
7365: ST_TO_ADDR
// sExp := false ;
7366: LD_ADDR_EXP 40
7370: PUSH
7371: LD_INT 0
7373: ST_TO_ADDR
// sDepot := false ;
7374: LD_ADDR_EXP 41
7378: PUSH
7379: LD_INT 0
7381: ST_TO_ADDR
// sFlag := false ;
7382: LD_ADDR_EXP 42
7386: PUSH
7387: LD_INT 0
7389: ST_TO_ADDR
// sKamikadze := false ;
7390: LD_ADDR_EXP 50
7394: PUSH
7395: LD_INT 0
7397: ST_TO_ADDR
// sTroll := false ;
7398: LD_ADDR_EXP 51
7402: PUSH
7403: LD_INT 0
7405: ST_TO_ADDR
// sSlow := false ;
7406: LD_ADDR_EXP 52
7410: PUSH
7411: LD_INT 0
7413: ST_TO_ADDR
// sLack := false ;
7414: LD_ADDR_EXP 53
7418: PUSH
7419: LD_INT 0
7421: ST_TO_ADDR
// sTank := false ;
7422: LD_ADDR_EXP 55
7426: PUSH
7427: LD_INT 0
7429: ST_TO_ADDR
// sRemote := false ;
7430: LD_ADDR_EXP 56
7434: PUSH
7435: LD_INT 0
7437: ST_TO_ADDR
// sPowell := false ;
7438: LD_ADDR_EXP 57
7442: PUSH
7443: LD_INT 0
7445: ST_TO_ADDR
// sTeleport := false ;
7446: LD_ADDR_EXP 60
7450: PUSH
7451: LD_INT 0
7453: ST_TO_ADDR
// sOilTower := false ;
7454: LD_ADDR_EXP 62
7458: PUSH
7459: LD_INT 0
7461: ST_TO_ADDR
// sShovel := false ;
7462: LD_ADDR_EXP 63
7466: PUSH
7467: LD_INT 0
7469: ST_TO_ADDR
// sSheik := false ;
7470: LD_ADDR_EXP 64
7474: PUSH
7475: LD_INT 0
7477: ST_TO_ADDR
// sEarthquake := false ;
7478: LD_ADDR_EXP 66
7482: PUSH
7483: LD_INT 0
7485: ST_TO_ADDR
// sAI := false ;
7486: LD_ADDR_EXP 67
7490: PUSH
7491: LD_INT 0
7493: ST_TO_ADDR
// sCargo := false ;
7494: LD_ADDR_EXP 70
7498: PUSH
7499: LD_INT 0
7501: ST_TO_ADDR
// sDLaser := false ;
7502: LD_ADDR_EXP 71
7506: PUSH
7507: LD_INT 0
7509: ST_TO_ADDR
// sExchange := false ;
7510: LD_ADDR_EXP 72
7514: PUSH
7515: LD_INT 0
7517: ST_TO_ADDR
// sFac := false ;
7518: LD_ADDR_EXP 73
7522: PUSH
7523: LD_INT 0
7525: ST_TO_ADDR
// sPower := false ;
7526: LD_ADDR_EXP 74
7530: PUSH
7531: LD_INT 0
7533: ST_TO_ADDR
// sRandom := false ;
7534: LD_ADDR_EXP 75
7538: PUSH
7539: LD_INT 0
7541: ST_TO_ADDR
// sShield := false ;
7542: LD_ADDR_EXP 76
7546: PUSH
7547: LD_INT 0
7549: ST_TO_ADDR
// sTime := false ;
7550: LD_ADDR_EXP 77
7554: PUSH
7555: LD_INT 0
7557: ST_TO_ADDR
// sTools := false ;
7558: LD_ADDR_EXP 78
7562: PUSH
7563: LD_INT 0
7565: ST_TO_ADDR
// sSold := false ;
7566: LD_ADDR_EXP 43
7570: PUSH
7571: LD_INT 0
7573: ST_TO_ADDR
// sDiff := false ;
7574: LD_ADDR_EXP 44
7578: PUSH
7579: LD_INT 0
7581: ST_TO_ADDR
// sFog := false ;
7582: LD_ADDR_EXP 47
7586: PUSH
7587: LD_INT 0
7589: ST_TO_ADDR
// sReset := false ;
7590: LD_ADDR_EXP 48
7594: PUSH
7595: LD_INT 0
7597: ST_TO_ADDR
// sSun := false ;
7598: LD_ADDR_EXP 49
7602: PUSH
7603: LD_INT 0
7605: ST_TO_ADDR
// sTiger := false ;
7606: LD_ADDR_EXP 45
7610: PUSH
7611: LD_INT 0
7613: ST_TO_ADDR
// sBomb := false ;
7614: LD_ADDR_EXP 46
7618: PUSH
7619: LD_INT 0
7621: ST_TO_ADDR
// sWound := false ;
7622: LD_ADDR_EXP 54
7626: PUSH
7627: LD_INT 0
7629: ST_TO_ADDR
// sBetray := false ;
7630: LD_ADDR_EXP 58
7634: PUSH
7635: LD_INT 0
7637: ST_TO_ADDR
// sContamin := false ;
7638: LD_ADDR_EXP 59
7642: PUSH
7643: LD_INT 0
7645: ST_TO_ADDR
// sOil := false ;
7646: LD_ADDR_EXP 61
7650: PUSH
7651: LD_INT 0
7653: ST_TO_ADDR
// sStu := false ;
7654: LD_ADDR_EXP 65
7658: PUSH
7659: LD_INT 0
7661: ST_TO_ADDR
// sBazooka := false ;
7662: LD_ADDR_EXP 68
7666: PUSH
7667: LD_INT 0
7669: ST_TO_ADDR
// sMortar := false ;
7670: LD_ADDR_EXP 69
7674: PUSH
7675: LD_INT 0
7677: ST_TO_ADDR
// sRanger := false ;
7678: LD_ADDR_EXP 79
7682: PUSH
7683: LD_INT 0
7685: ST_TO_ADDR
// sComputer := false ;
7686: LD_ADDR_EXP 80
7690: PUSH
7691: LD_INT 0
7693: ST_TO_ADDR
// s30 := false ;
7694: LD_ADDR_EXP 81
7698: PUSH
7699: LD_INT 0
7701: ST_TO_ADDR
// s60 := false ;
7702: LD_ADDR_EXP 82
7706: PUSH
7707: LD_INT 0
7709: ST_TO_ADDR
// end ;
7710: LD_VAR 0 1
7714: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7715: LD_INT 0
7717: PPUSH
7718: PPUSH
7719: PPUSH
7720: PPUSH
7721: PPUSH
7722: PPUSH
7723: PPUSH
// result := [ ] ;
7724: LD_ADDR_VAR 0 2
7728: PUSH
7729: EMPTY
7730: ST_TO_ADDR
// if campaign_id = 1 then
7731: LD_OWVAR 69
7735: PUSH
7736: LD_INT 1
7738: EQUAL
7739: IFFALSE 10905
// begin case mission_number of 1 :
7741: LD_OWVAR 70
7745: PUSH
7746: LD_INT 1
7748: DOUBLE
7749: EQUAL
7750: IFTRUE 7754
7752: GO 7830
7754: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7755: LD_ADDR_VAR 0 2
7759: PUSH
7760: LD_INT 2
7762: PUSH
7763: LD_INT 4
7765: PUSH
7766: LD_INT 11
7768: PUSH
7769: LD_INT 12
7771: PUSH
7772: LD_INT 15
7774: PUSH
7775: LD_INT 16
7777: PUSH
7778: LD_INT 22
7780: PUSH
7781: LD_INT 23
7783: PUSH
7784: LD_INT 26
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: PUSH
7798: LD_INT 101
7800: PUSH
7801: LD_INT 102
7803: PUSH
7804: LD_INT 106
7806: PUSH
7807: LD_INT 116
7809: PUSH
7810: LD_INT 117
7812: PUSH
7813: LD_INT 118
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: ST_TO_ADDR
7828: GO 10903
7830: LD_INT 2
7832: DOUBLE
7833: EQUAL
7834: IFTRUE 7838
7836: GO 7922
7838: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7839: LD_ADDR_VAR 0 2
7843: PUSH
7844: LD_INT 2
7846: PUSH
7847: LD_INT 4
7849: PUSH
7850: LD_INT 11
7852: PUSH
7853: LD_INT 12
7855: PUSH
7856: LD_INT 15
7858: PUSH
7859: LD_INT 16
7861: PUSH
7862: LD_INT 22
7864: PUSH
7865: LD_INT 23
7867: PUSH
7868: LD_INT 26
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: PUSH
7882: LD_INT 101
7884: PUSH
7885: LD_INT 102
7887: PUSH
7888: LD_INT 105
7890: PUSH
7891: LD_INT 106
7893: PUSH
7894: LD_INT 108
7896: PUSH
7897: LD_INT 116
7899: PUSH
7900: LD_INT 117
7902: PUSH
7903: LD_INT 118
7905: PUSH
7906: EMPTY
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: ST_TO_ADDR
7920: GO 10903
7922: LD_INT 3
7924: DOUBLE
7925: EQUAL
7926: IFTRUE 7930
7928: GO 8018
7930: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7931: LD_ADDR_VAR 0 2
7935: PUSH
7936: LD_INT 2
7938: PUSH
7939: LD_INT 4
7941: PUSH
7942: LD_INT 5
7944: PUSH
7945: LD_INT 11
7947: PUSH
7948: LD_INT 12
7950: PUSH
7951: LD_INT 15
7953: PUSH
7954: LD_INT 16
7956: PUSH
7957: LD_INT 22
7959: PUSH
7960: LD_INT 26
7962: PUSH
7963: LD_INT 36
7965: PUSH
7966: EMPTY
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: LIST
7973: LIST
7974: LIST
7975: LIST
7976: LIST
7977: PUSH
7978: LD_INT 101
7980: PUSH
7981: LD_INT 102
7983: PUSH
7984: LD_INT 105
7986: PUSH
7987: LD_INT 106
7989: PUSH
7990: LD_INT 108
7992: PUSH
7993: LD_INT 116
7995: PUSH
7996: LD_INT 117
7998: PUSH
7999: LD_INT 118
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: ST_TO_ADDR
8016: GO 10903
8018: LD_INT 4
8020: DOUBLE
8021: EQUAL
8022: IFTRUE 8026
8024: GO 8122
8026: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
8027: LD_ADDR_VAR 0 2
8031: PUSH
8032: LD_INT 2
8034: PUSH
8035: LD_INT 4
8037: PUSH
8038: LD_INT 5
8040: PUSH
8041: LD_INT 8
8043: PUSH
8044: LD_INT 11
8046: PUSH
8047: LD_INT 12
8049: PUSH
8050: LD_INT 15
8052: PUSH
8053: LD_INT 16
8055: PUSH
8056: LD_INT 22
8058: PUSH
8059: LD_INT 23
8061: PUSH
8062: LD_INT 26
8064: PUSH
8065: LD_INT 36
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: PUSH
8082: LD_INT 101
8084: PUSH
8085: LD_INT 102
8087: PUSH
8088: LD_INT 105
8090: PUSH
8091: LD_INT 106
8093: PUSH
8094: LD_INT 108
8096: PUSH
8097: LD_INT 116
8099: PUSH
8100: LD_INT 117
8102: PUSH
8103: LD_INT 118
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: PUSH
8116: EMPTY
8117: LIST
8118: LIST
8119: ST_TO_ADDR
8120: GO 10903
8122: LD_INT 5
8124: DOUBLE
8125: EQUAL
8126: IFTRUE 8130
8128: GO 8242
8130: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
8131: LD_ADDR_VAR 0 2
8135: PUSH
8136: LD_INT 2
8138: PUSH
8139: LD_INT 4
8141: PUSH
8142: LD_INT 5
8144: PUSH
8145: LD_INT 6
8147: PUSH
8148: LD_INT 8
8150: PUSH
8151: LD_INT 11
8153: PUSH
8154: LD_INT 12
8156: PUSH
8157: LD_INT 15
8159: PUSH
8160: LD_INT 16
8162: PUSH
8163: LD_INT 22
8165: PUSH
8166: LD_INT 23
8168: PUSH
8169: LD_INT 25
8171: PUSH
8172: LD_INT 26
8174: PUSH
8175: LD_INT 36
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: PUSH
8194: LD_INT 101
8196: PUSH
8197: LD_INT 102
8199: PUSH
8200: LD_INT 105
8202: PUSH
8203: LD_INT 106
8205: PUSH
8206: LD_INT 108
8208: PUSH
8209: LD_INT 109
8211: PUSH
8212: LD_INT 112
8214: PUSH
8215: LD_INT 116
8217: PUSH
8218: LD_INT 117
8220: PUSH
8221: LD_INT 118
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: ST_TO_ADDR
8240: GO 10903
8242: LD_INT 6
8244: DOUBLE
8245: EQUAL
8246: IFTRUE 8250
8248: GO 8382
8250: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
8251: LD_ADDR_VAR 0 2
8255: PUSH
8256: LD_INT 2
8258: PUSH
8259: LD_INT 4
8261: PUSH
8262: LD_INT 5
8264: PUSH
8265: LD_INT 6
8267: PUSH
8268: LD_INT 8
8270: PUSH
8271: LD_INT 11
8273: PUSH
8274: LD_INT 12
8276: PUSH
8277: LD_INT 15
8279: PUSH
8280: LD_INT 16
8282: PUSH
8283: LD_INT 20
8285: PUSH
8286: LD_INT 21
8288: PUSH
8289: LD_INT 22
8291: PUSH
8292: LD_INT 23
8294: PUSH
8295: LD_INT 25
8297: PUSH
8298: LD_INT 26
8300: PUSH
8301: LD_INT 30
8303: PUSH
8304: LD_INT 31
8306: PUSH
8307: LD_INT 32
8309: PUSH
8310: LD_INT 36
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: PUSH
8334: LD_INT 101
8336: PUSH
8337: LD_INT 102
8339: PUSH
8340: LD_INT 105
8342: PUSH
8343: LD_INT 106
8345: PUSH
8346: LD_INT 108
8348: PUSH
8349: LD_INT 109
8351: PUSH
8352: LD_INT 112
8354: PUSH
8355: LD_INT 116
8357: PUSH
8358: LD_INT 117
8360: PUSH
8361: LD_INT 118
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: ST_TO_ADDR
8380: GO 10903
8382: LD_INT 7
8384: DOUBLE
8385: EQUAL
8386: IFTRUE 8390
8388: GO 8502
8390: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8391: LD_ADDR_VAR 0 2
8395: PUSH
8396: LD_INT 2
8398: PUSH
8399: LD_INT 4
8401: PUSH
8402: LD_INT 5
8404: PUSH
8405: LD_INT 7
8407: PUSH
8408: LD_INT 11
8410: PUSH
8411: LD_INT 12
8413: PUSH
8414: LD_INT 15
8416: PUSH
8417: LD_INT 16
8419: PUSH
8420: LD_INT 20
8422: PUSH
8423: LD_INT 21
8425: PUSH
8426: LD_INT 22
8428: PUSH
8429: LD_INT 23
8431: PUSH
8432: LD_INT 25
8434: PUSH
8435: LD_INT 26
8437: PUSH
8438: EMPTY
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: PUSH
8454: LD_INT 101
8456: PUSH
8457: LD_INT 102
8459: PUSH
8460: LD_INT 103
8462: PUSH
8463: LD_INT 105
8465: PUSH
8466: LD_INT 106
8468: PUSH
8469: LD_INT 108
8471: PUSH
8472: LD_INT 112
8474: PUSH
8475: LD_INT 116
8477: PUSH
8478: LD_INT 117
8480: PUSH
8481: LD_INT 118
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: ST_TO_ADDR
8500: GO 10903
8502: LD_INT 8
8504: DOUBLE
8505: EQUAL
8506: IFTRUE 8510
8508: GO 8650
8510: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8511: LD_ADDR_VAR 0 2
8515: PUSH
8516: LD_INT 2
8518: PUSH
8519: LD_INT 4
8521: PUSH
8522: LD_INT 5
8524: PUSH
8525: LD_INT 6
8527: PUSH
8528: LD_INT 7
8530: PUSH
8531: LD_INT 8
8533: PUSH
8534: LD_INT 11
8536: PUSH
8537: LD_INT 12
8539: PUSH
8540: LD_INT 15
8542: PUSH
8543: LD_INT 16
8545: PUSH
8546: LD_INT 20
8548: PUSH
8549: LD_INT 21
8551: PUSH
8552: LD_INT 22
8554: PUSH
8555: LD_INT 23
8557: PUSH
8558: LD_INT 25
8560: PUSH
8561: LD_INT 26
8563: PUSH
8564: LD_INT 30
8566: PUSH
8567: LD_INT 31
8569: PUSH
8570: LD_INT 32
8572: PUSH
8573: LD_INT 36
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: PUSH
8598: LD_INT 101
8600: PUSH
8601: LD_INT 102
8603: PUSH
8604: LD_INT 103
8606: PUSH
8607: LD_INT 105
8609: PUSH
8610: LD_INT 106
8612: PUSH
8613: LD_INT 108
8615: PUSH
8616: LD_INT 109
8618: PUSH
8619: LD_INT 112
8621: PUSH
8622: LD_INT 116
8624: PUSH
8625: LD_INT 117
8627: PUSH
8628: LD_INT 118
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: PUSH
8644: EMPTY
8645: LIST
8646: LIST
8647: ST_TO_ADDR
8648: GO 10903
8650: LD_INT 9
8652: DOUBLE
8653: EQUAL
8654: IFTRUE 8658
8656: GO 8806
8658: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8659: LD_ADDR_VAR 0 2
8663: PUSH
8664: LD_INT 2
8666: PUSH
8667: LD_INT 4
8669: PUSH
8670: LD_INT 5
8672: PUSH
8673: LD_INT 6
8675: PUSH
8676: LD_INT 7
8678: PUSH
8679: LD_INT 8
8681: PUSH
8682: LD_INT 11
8684: PUSH
8685: LD_INT 12
8687: PUSH
8688: LD_INT 15
8690: PUSH
8691: LD_INT 16
8693: PUSH
8694: LD_INT 20
8696: PUSH
8697: LD_INT 21
8699: PUSH
8700: LD_INT 22
8702: PUSH
8703: LD_INT 23
8705: PUSH
8706: LD_INT 25
8708: PUSH
8709: LD_INT 26
8711: PUSH
8712: LD_INT 28
8714: PUSH
8715: LD_INT 30
8717: PUSH
8718: LD_INT 31
8720: PUSH
8721: LD_INT 32
8723: PUSH
8724: LD_INT 36
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: PUSH
8750: LD_INT 101
8752: PUSH
8753: LD_INT 102
8755: PUSH
8756: LD_INT 103
8758: PUSH
8759: LD_INT 105
8761: PUSH
8762: LD_INT 106
8764: PUSH
8765: LD_INT 108
8767: PUSH
8768: LD_INT 109
8770: PUSH
8771: LD_INT 112
8773: PUSH
8774: LD_INT 114
8776: PUSH
8777: LD_INT 116
8779: PUSH
8780: LD_INT 117
8782: PUSH
8783: LD_INT 118
8785: PUSH
8786: EMPTY
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: PUSH
8800: EMPTY
8801: LIST
8802: LIST
8803: ST_TO_ADDR
8804: GO 10903
8806: LD_INT 10
8808: DOUBLE
8809: EQUAL
8810: IFTRUE 8814
8812: GO 9010
8814: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8815: LD_ADDR_VAR 0 2
8819: PUSH
8820: LD_INT 2
8822: PUSH
8823: LD_INT 4
8825: PUSH
8826: LD_INT 5
8828: PUSH
8829: LD_INT 6
8831: PUSH
8832: LD_INT 7
8834: PUSH
8835: LD_INT 8
8837: PUSH
8838: LD_INT 9
8840: PUSH
8841: LD_INT 10
8843: PUSH
8844: LD_INT 11
8846: PUSH
8847: LD_INT 12
8849: PUSH
8850: LD_INT 13
8852: PUSH
8853: LD_INT 14
8855: PUSH
8856: LD_INT 15
8858: PUSH
8859: LD_INT 16
8861: PUSH
8862: LD_INT 17
8864: PUSH
8865: LD_INT 18
8867: PUSH
8868: LD_INT 19
8870: PUSH
8871: LD_INT 20
8873: PUSH
8874: LD_INT 21
8876: PUSH
8877: LD_INT 22
8879: PUSH
8880: LD_INT 23
8882: PUSH
8883: LD_INT 24
8885: PUSH
8886: LD_INT 25
8888: PUSH
8889: LD_INT 26
8891: PUSH
8892: LD_INT 28
8894: PUSH
8895: LD_INT 30
8897: PUSH
8898: LD_INT 31
8900: PUSH
8901: LD_INT 32
8903: PUSH
8904: LD_INT 36
8906: PUSH
8907: EMPTY
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: PUSH
8938: LD_INT 101
8940: PUSH
8941: LD_INT 102
8943: PUSH
8944: LD_INT 103
8946: PUSH
8947: LD_INT 104
8949: PUSH
8950: LD_INT 105
8952: PUSH
8953: LD_INT 106
8955: PUSH
8956: LD_INT 107
8958: PUSH
8959: LD_INT 108
8961: PUSH
8962: LD_INT 109
8964: PUSH
8965: LD_INT 110
8967: PUSH
8968: LD_INT 111
8970: PUSH
8971: LD_INT 112
8973: PUSH
8974: LD_INT 114
8976: PUSH
8977: LD_INT 116
8979: PUSH
8980: LD_INT 117
8982: PUSH
8983: LD_INT 118
8985: PUSH
8986: EMPTY
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: ST_TO_ADDR
9008: GO 10903
9010: LD_INT 11
9012: DOUBLE
9013: EQUAL
9014: IFTRUE 9018
9016: GO 9222
9018: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
9019: LD_ADDR_VAR 0 2
9023: PUSH
9024: LD_INT 2
9026: PUSH
9027: LD_INT 3
9029: PUSH
9030: LD_INT 4
9032: PUSH
9033: LD_INT 5
9035: PUSH
9036: LD_INT 6
9038: PUSH
9039: LD_INT 7
9041: PUSH
9042: LD_INT 8
9044: PUSH
9045: LD_INT 9
9047: PUSH
9048: LD_INT 10
9050: PUSH
9051: LD_INT 11
9053: PUSH
9054: LD_INT 12
9056: PUSH
9057: LD_INT 13
9059: PUSH
9060: LD_INT 14
9062: PUSH
9063: LD_INT 15
9065: PUSH
9066: LD_INT 16
9068: PUSH
9069: LD_INT 17
9071: PUSH
9072: LD_INT 18
9074: PUSH
9075: LD_INT 19
9077: PUSH
9078: LD_INT 20
9080: PUSH
9081: LD_INT 21
9083: PUSH
9084: LD_INT 22
9086: PUSH
9087: LD_INT 23
9089: PUSH
9090: LD_INT 24
9092: PUSH
9093: LD_INT 25
9095: PUSH
9096: LD_INT 26
9098: PUSH
9099: LD_INT 28
9101: PUSH
9102: LD_INT 30
9104: PUSH
9105: LD_INT 31
9107: PUSH
9108: LD_INT 32
9110: PUSH
9111: LD_INT 34
9113: PUSH
9114: LD_INT 36
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: PUSH
9150: LD_INT 101
9152: PUSH
9153: LD_INT 102
9155: PUSH
9156: LD_INT 103
9158: PUSH
9159: LD_INT 104
9161: PUSH
9162: LD_INT 105
9164: PUSH
9165: LD_INT 106
9167: PUSH
9168: LD_INT 107
9170: PUSH
9171: LD_INT 108
9173: PUSH
9174: LD_INT 109
9176: PUSH
9177: LD_INT 110
9179: PUSH
9180: LD_INT 111
9182: PUSH
9183: LD_INT 112
9185: PUSH
9186: LD_INT 114
9188: PUSH
9189: LD_INT 116
9191: PUSH
9192: LD_INT 117
9194: PUSH
9195: LD_INT 118
9197: PUSH
9198: EMPTY
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: ST_TO_ADDR
9220: GO 10903
9222: LD_INT 12
9224: DOUBLE
9225: EQUAL
9226: IFTRUE 9230
9228: GO 9450
9230: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
9231: LD_ADDR_VAR 0 2
9235: PUSH
9236: LD_INT 1
9238: PUSH
9239: LD_INT 2
9241: PUSH
9242: LD_INT 3
9244: PUSH
9245: LD_INT 4
9247: PUSH
9248: LD_INT 5
9250: PUSH
9251: LD_INT 6
9253: PUSH
9254: LD_INT 7
9256: PUSH
9257: LD_INT 8
9259: PUSH
9260: LD_INT 9
9262: PUSH
9263: LD_INT 10
9265: PUSH
9266: LD_INT 11
9268: PUSH
9269: LD_INT 12
9271: PUSH
9272: LD_INT 13
9274: PUSH
9275: LD_INT 14
9277: PUSH
9278: LD_INT 15
9280: PUSH
9281: LD_INT 16
9283: PUSH
9284: LD_INT 17
9286: PUSH
9287: LD_INT 18
9289: PUSH
9290: LD_INT 19
9292: PUSH
9293: LD_INT 20
9295: PUSH
9296: LD_INT 21
9298: PUSH
9299: LD_INT 22
9301: PUSH
9302: LD_INT 23
9304: PUSH
9305: LD_INT 24
9307: PUSH
9308: LD_INT 25
9310: PUSH
9311: LD_INT 26
9313: PUSH
9314: LD_INT 27
9316: PUSH
9317: LD_INT 28
9319: PUSH
9320: LD_INT 30
9322: PUSH
9323: LD_INT 31
9325: PUSH
9326: LD_INT 32
9328: PUSH
9329: LD_INT 33
9331: PUSH
9332: LD_INT 34
9334: PUSH
9335: LD_INT 36
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: PUSH
9374: LD_INT 101
9376: PUSH
9377: LD_INT 102
9379: PUSH
9380: LD_INT 103
9382: PUSH
9383: LD_INT 104
9385: PUSH
9386: LD_INT 105
9388: PUSH
9389: LD_INT 106
9391: PUSH
9392: LD_INT 107
9394: PUSH
9395: LD_INT 108
9397: PUSH
9398: LD_INT 109
9400: PUSH
9401: LD_INT 110
9403: PUSH
9404: LD_INT 111
9406: PUSH
9407: LD_INT 112
9409: PUSH
9410: LD_INT 113
9412: PUSH
9413: LD_INT 114
9415: PUSH
9416: LD_INT 116
9418: PUSH
9419: LD_INT 117
9421: PUSH
9422: LD_INT 118
9424: PUSH
9425: EMPTY
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: ST_TO_ADDR
9448: GO 10903
9450: LD_INT 13
9452: DOUBLE
9453: EQUAL
9454: IFTRUE 9458
9456: GO 9666
9458: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9459: LD_ADDR_VAR 0 2
9463: PUSH
9464: LD_INT 1
9466: PUSH
9467: LD_INT 2
9469: PUSH
9470: LD_INT 3
9472: PUSH
9473: LD_INT 4
9475: PUSH
9476: LD_INT 5
9478: PUSH
9479: LD_INT 8
9481: PUSH
9482: LD_INT 9
9484: PUSH
9485: LD_INT 10
9487: PUSH
9488: LD_INT 11
9490: PUSH
9491: LD_INT 12
9493: PUSH
9494: LD_INT 14
9496: PUSH
9497: LD_INT 15
9499: PUSH
9500: LD_INT 16
9502: PUSH
9503: LD_INT 17
9505: PUSH
9506: LD_INT 18
9508: PUSH
9509: LD_INT 19
9511: PUSH
9512: LD_INT 20
9514: PUSH
9515: LD_INT 21
9517: PUSH
9518: LD_INT 22
9520: PUSH
9521: LD_INT 23
9523: PUSH
9524: LD_INT 24
9526: PUSH
9527: LD_INT 25
9529: PUSH
9530: LD_INT 26
9532: PUSH
9533: LD_INT 27
9535: PUSH
9536: LD_INT 28
9538: PUSH
9539: LD_INT 30
9541: PUSH
9542: LD_INT 31
9544: PUSH
9545: LD_INT 32
9547: PUSH
9548: LD_INT 33
9550: PUSH
9551: LD_INT 34
9553: PUSH
9554: LD_INT 36
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: PUSH
9590: LD_INT 101
9592: PUSH
9593: LD_INT 102
9595: PUSH
9596: LD_INT 103
9598: PUSH
9599: LD_INT 104
9601: PUSH
9602: LD_INT 105
9604: PUSH
9605: LD_INT 106
9607: PUSH
9608: LD_INT 107
9610: PUSH
9611: LD_INT 108
9613: PUSH
9614: LD_INT 109
9616: PUSH
9617: LD_INT 110
9619: PUSH
9620: LD_INT 111
9622: PUSH
9623: LD_INT 112
9625: PUSH
9626: LD_INT 113
9628: PUSH
9629: LD_INT 114
9631: PUSH
9632: LD_INT 116
9634: PUSH
9635: LD_INT 117
9637: PUSH
9638: LD_INT 118
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: ST_TO_ADDR
9664: GO 10903
9666: LD_INT 14
9668: DOUBLE
9669: EQUAL
9670: IFTRUE 9674
9672: GO 9898
9674: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9675: LD_ADDR_VAR 0 2
9679: PUSH
9680: LD_INT 1
9682: PUSH
9683: LD_INT 2
9685: PUSH
9686: LD_INT 3
9688: PUSH
9689: LD_INT 4
9691: PUSH
9692: LD_INT 5
9694: PUSH
9695: LD_INT 6
9697: PUSH
9698: LD_INT 7
9700: PUSH
9701: LD_INT 8
9703: PUSH
9704: LD_INT 9
9706: PUSH
9707: LD_INT 10
9709: PUSH
9710: LD_INT 11
9712: PUSH
9713: LD_INT 12
9715: PUSH
9716: LD_INT 13
9718: PUSH
9719: LD_INT 14
9721: PUSH
9722: LD_INT 15
9724: PUSH
9725: LD_INT 16
9727: PUSH
9728: LD_INT 17
9730: PUSH
9731: LD_INT 18
9733: PUSH
9734: LD_INT 19
9736: PUSH
9737: LD_INT 20
9739: PUSH
9740: LD_INT 21
9742: PUSH
9743: LD_INT 22
9745: PUSH
9746: LD_INT 23
9748: PUSH
9749: LD_INT 24
9751: PUSH
9752: LD_INT 25
9754: PUSH
9755: LD_INT 26
9757: PUSH
9758: LD_INT 27
9760: PUSH
9761: LD_INT 28
9763: PUSH
9764: LD_INT 29
9766: PUSH
9767: LD_INT 30
9769: PUSH
9770: LD_INT 31
9772: PUSH
9773: LD_INT 32
9775: PUSH
9776: LD_INT 33
9778: PUSH
9779: LD_INT 34
9781: PUSH
9782: LD_INT 36
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: PUSH
9822: LD_INT 101
9824: PUSH
9825: LD_INT 102
9827: PUSH
9828: LD_INT 103
9830: PUSH
9831: LD_INT 104
9833: PUSH
9834: LD_INT 105
9836: PUSH
9837: LD_INT 106
9839: PUSH
9840: LD_INT 107
9842: PUSH
9843: LD_INT 108
9845: PUSH
9846: LD_INT 109
9848: PUSH
9849: LD_INT 110
9851: PUSH
9852: LD_INT 111
9854: PUSH
9855: LD_INT 112
9857: PUSH
9858: LD_INT 113
9860: PUSH
9861: LD_INT 114
9863: PUSH
9864: LD_INT 116
9866: PUSH
9867: LD_INT 117
9869: PUSH
9870: LD_INT 118
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: PUSH
9892: EMPTY
9893: LIST
9894: LIST
9895: ST_TO_ADDR
9896: GO 10903
9898: LD_INT 15
9900: DOUBLE
9901: EQUAL
9902: IFTRUE 9906
9904: GO 10130
9906: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9907: LD_ADDR_VAR 0 2
9911: PUSH
9912: LD_INT 1
9914: PUSH
9915: LD_INT 2
9917: PUSH
9918: LD_INT 3
9920: PUSH
9921: LD_INT 4
9923: PUSH
9924: LD_INT 5
9926: PUSH
9927: LD_INT 6
9929: PUSH
9930: LD_INT 7
9932: PUSH
9933: LD_INT 8
9935: PUSH
9936: LD_INT 9
9938: PUSH
9939: LD_INT 10
9941: PUSH
9942: LD_INT 11
9944: PUSH
9945: LD_INT 12
9947: PUSH
9948: LD_INT 13
9950: PUSH
9951: LD_INT 14
9953: PUSH
9954: LD_INT 15
9956: PUSH
9957: LD_INT 16
9959: PUSH
9960: LD_INT 17
9962: PUSH
9963: LD_INT 18
9965: PUSH
9966: LD_INT 19
9968: PUSH
9969: LD_INT 20
9971: PUSH
9972: LD_INT 21
9974: PUSH
9975: LD_INT 22
9977: PUSH
9978: LD_INT 23
9980: PUSH
9981: LD_INT 24
9983: PUSH
9984: LD_INT 25
9986: PUSH
9987: LD_INT 26
9989: PUSH
9990: LD_INT 27
9992: PUSH
9993: LD_INT 28
9995: PUSH
9996: LD_INT 29
9998: PUSH
9999: LD_INT 30
10001: PUSH
10002: LD_INT 31
10004: PUSH
10005: LD_INT 32
10007: PUSH
10008: LD_INT 33
10010: PUSH
10011: LD_INT 34
10013: PUSH
10014: LD_INT 36
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: PUSH
10054: LD_INT 101
10056: PUSH
10057: LD_INT 102
10059: PUSH
10060: LD_INT 103
10062: PUSH
10063: LD_INT 104
10065: PUSH
10066: LD_INT 105
10068: PUSH
10069: LD_INT 106
10071: PUSH
10072: LD_INT 107
10074: PUSH
10075: LD_INT 108
10077: PUSH
10078: LD_INT 109
10080: PUSH
10081: LD_INT 110
10083: PUSH
10084: LD_INT 111
10086: PUSH
10087: LD_INT 112
10089: PUSH
10090: LD_INT 113
10092: PUSH
10093: LD_INT 114
10095: PUSH
10096: LD_INT 116
10098: PUSH
10099: LD_INT 117
10101: PUSH
10102: LD_INT 118
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: ST_TO_ADDR
10128: GO 10903
10130: LD_INT 16
10132: DOUBLE
10133: EQUAL
10134: IFTRUE 10138
10136: GO 10274
10138: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
10139: LD_ADDR_VAR 0 2
10143: PUSH
10144: LD_INT 2
10146: PUSH
10147: LD_INT 4
10149: PUSH
10150: LD_INT 5
10152: PUSH
10153: LD_INT 7
10155: PUSH
10156: LD_INT 11
10158: PUSH
10159: LD_INT 12
10161: PUSH
10162: LD_INT 15
10164: PUSH
10165: LD_INT 16
10167: PUSH
10168: LD_INT 20
10170: PUSH
10171: LD_INT 21
10173: PUSH
10174: LD_INT 22
10176: PUSH
10177: LD_INT 23
10179: PUSH
10180: LD_INT 25
10182: PUSH
10183: LD_INT 26
10185: PUSH
10186: LD_INT 30
10188: PUSH
10189: LD_INT 31
10191: PUSH
10192: LD_INT 32
10194: PUSH
10195: LD_INT 33
10197: PUSH
10198: LD_INT 34
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: PUSH
10222: LD_INT 101
10224: PUSH
10225: LD_INT 102
10227: PUSH
10228: LD_INT 103
10230: PUSH
10231: LD_INT 106
10233: PUSH
10234: LD_INT 108
10236: PUSH
10237: LD_INT 112
10239: PUSH
10240: LD_INT 113
10242: PUSH
10243: LD_INT 114
10245: PUSH
10246: LD_INT 116
10248: PUSH
10249: LD_INT 117
10251: PUSH
10252: LD_INT 118
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: PUSH
10268: EMPTY
10269: LIST
10270: LIST
10271: ST_TO_ADDR
10272: GO 10903
10274: LD_INT 17
10276: DOUBLE
10277: EQUAL
10278: IFTRUE 10282
10280: GO 10506
10282: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
10283: LD_ADDR_VAR 0 2
10287: PUSH
10288: LD_INT 1
10290: PUSH
10291: LD_INT 2
10293: PUSH
10294: LD_INT 3
10296: PUSH
10297: LD_INT 4
10299: PUSH
10300: LD_INT 5
10302: PUSH
10303: LD_INT 6
10305: PUSH
10306: LD_INT 7
10308: PUSH
10309: LD_INT 8
10311: PUSH
10312: LD_INT 9
10314: PUSH
10315: LD_INT 10
10317: PUSH
10318: LD_INT 11
10320: PUSH
10321: LD_INT 12
10323: PUSH
10324: LD_INT 13
10326: PUSH
10327: LD_INT 14
10329: PUSH
10330: LD_INT 15
10332: PUSH
10333: LD_INT 16
10335: PUSH
10336: LD_INT 17
10338: PUSH
10339: LD_INT 18
10341: PUSH
10342: LD_INT 19
10344: PUSH
10345: LD_INT 20
10347: PUSH
10348: LD_INT 21
10350: PUSH
10351: LD_INT 22
10353: PUSH
10354: LD_INT 23
10356: PUSH
10357: LD_INT 24
10359: PUSH
10360: LD_INT 25
10362: PUSH
10363: LD_INT 26
10365: PUSH
10366: LD_INT 27
10368: PUSH
10369: LD_INT 28
10371: PUSH
10372: LD_INT 29
10374: PUSH
10375: LD_INT 30
10377: PUSH
10378: LD_INT 31
10380: PUSH
10381: LD_INT 32
10383: PUSH
10384: LD_INT 33
10386: PUSH
10387: LD_INT 34
10389: PUSH
10390: LD_INT 36
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: PUSH
10430: LD_INT 101
10432: PUSH
10433: LD_INT 102
10435: PUSH
10436: LD_INT 103
10438: PUSH
10439: LD_INT 104
10441: PUSH
10442: LD_INT 105
10444: PUSH
10445: LD_INT 106
10447: PUSH
10448: LD_INT 107
10450: PUSH
10451: LD_INT 108
10453: PUSH
10454: LD_INT 109
10456: PUSH
10457: LD_INT 110
10459: PUSH
10460: LD_INT 111
10462: PUSH
10463: LD_INT 112
10465: PUSH
10466: LD_INT 113
10468: PUSH
10469: LD_INT 114
10471: PUSH
10472: LD_INT 116
10474: PUSH
10475: LD_INT 117
10477: PUSH
10478: LD_INT 118
10480: PUSH
10481: EMPTY
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: ST_TO_ADDR
10504: GO 10903
10506: LD_INT 18
10508: DOUBLE
10509: EQUAL
10510: IFTRUE 10514
10512: GO 10662
10514: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10515: LD_ADDR_VAR 0 2
10519: PUSH
10520: LD_INT 2
10522: PUSH
10523: LD_INT 4
10525: PUSH
10526: LD_INT 5
10528: PUSH
10529: LD_INT 7
10531: PUSH
10532: LD_INT 11
10534: PUSH
10535: LD_INT 12
10537: PUSH
10538: LD_INT 15
10540: PUSH
10541: LD_INT 16
10543: PUSH
10544: LD_INT 20
10546: PUSH
10547: LD_INT 21
10549: PUSH
10550: LD_INT 22
10552: PUSH
10553: LD_INT 23
10555: PUSH
10556: LD_INT 25
10558: PUSH
10559: LD_INT 26
10561: PUSH
10562: LD_INT 30
10564: PUSH
10565: LD_INT 31
10567: PUSH
10568: LD_INT 32
10570: PUSH
10571: LD_INT 33
10573: PUSH
10574: LD_INT 34
10576: PUSH
10577: LD_INT 35
10579: PUSH
10580: LD_INT 36
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: PUSH
10606: LD_INT 101
10608: PUSH
10609: LD_INT 102
10611: PUSH
10612: LD_INT 103
10614: PUSH
10615: LD_INT 106
10617: PUSH
10618: LD_INT 108
10620: PUSH
10621: LD_INT 112
10623: PUSH
10624: LD_INT 113
10626: PUSH
10627: LD_INT 114
10629: PUSH
10630: LD_INT 115
10632: PUSH
10633: LD_INT 116
10635: PUSH
10636: LD_INT 117
10638: PUSH
10639: LD_INT 118
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: ST_TO_ADDR
10660: GO 10903
10662: LD_INT 19
10664: DOUBLE
10665: EQUAL
10666: IFTRUE 10670
10668: GO 10902
10670: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10671: LD_ADDR_VAR 0 2
10675: PUSH
10676: LD_INT 1
10678: PUSH
10679: LD_INT 2
10681: PUSH
10682: LD_INT 3
10684: PUSH
10685: LD_INT 4
10687: PUSH
10688: LD_INT 5
10690: PUSH
10691: LD_INT 6
10693: PUSH
10694: LD_INT 7
10696: PUSH
10697: LD_INT 8
10699: PUSH
10700: LD_INT 9
10702: PUSH
10703: LD_INT 10
10705: PUSH
10706: LD_INT 11
10708: PUSH
10709: LD_INT 12
10711: PUSH
10712: LD_INT 13
10714: PUSH
10715: LD_INT 14
10717: PUSH
10718: LD_INT 15
10720: PUSH
10721: LD_INT 16
10723: PUSH
10724: LD_INT 17
10726: PUSH
10727: LD_INT 18
10729: PUSH
10730: LD_INT 19
10732: PUSH
10733: LD_INT 20
10735: PUSH
10736: LD_INT 21
10738: PUSH
10739: LD_INT 22
10741: PUSH
10742: LD_INT 23
10744: PUSH
10745: LD_INT 24
10747: PUSH
10748: LD_INT 25
10750: PUSH
10751: LD_INT 26
10753: PUSH
10754: LD_INT 27
10756: PUSH
10757: LD_INT 28
10759: PUSH
10760: LD_INT 29
10762: PUSH
10763: LD_INT 30
10765: PUSH
10766: LD_INT 31
10768: PUSH
10769: LD_INT 32
10771: PUSH
10772: LD_INT 33
10774: PUSH
10775: LD_INT 34
10777: PUSH
10778: LD_INT 35
10780: PUSH
10781: LD_INT 36
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: PUSH
10822: LD_INT 101
10824: PUSH
10825: LD_INT 102
10827: PUSH
10828: LD_INT 103
10830: PUSH
10831: LD_INT 104
10833: PUSH
10834: LD_INT 105
10836: PUSH
10837: LD_INT 106
10839: PUSH
10840: LD_INT 107
10842: PUSH
10843: LD_INT 108
10845: PUSH
10846: LD_INT 109
10848: PUSH
10849: LD_INT 110
10851: PUSH
10852: LD_INT 111
10854: PUSH
10855: LD_INT 112
10857: PUSH
10858: LD_INT 113
10860: PUSH
10861: LD_INT 114
10863: PUSH
10864: LD_INT 115
10866: PUSH
10867: LD_INT 116
10869: PUSH
10870: LD_INT 117
10872: PUSH
10873: LD_INT 118
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: ST_TO_ADDR
10900: GO 10903
10902: POP
// end else
10903: GO 11134
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10905: LD_ADDR_VAR 0 2
10909: PUSH
10910: LD_INT 1
10912: PUSH
10913: LD_INT 2
10915: PUSH
10916: LD_INT 3
10918: PUSH
10919: LD_INT 4
10921: PUSH
10922: LD_INT 5
10924: PUSH
10925: LD_INT 6
10927: PUSH
10928: LD_INT 7
10930: PUSH
10931: LD_INT 8
10933: PUSH
10934: LD_INT 9
10936: PUSH
10937: LD_INT 10
10939: PUSH
10940: LD_INT 11
10942: PUSH
10943: LD_INT 12
10945: PUSH
10946: LD_INT 13
10948: PUSH
10949: LD_INT 14
10951: PUSH
10952: LD_INT 15
10954: PUSH
10955: LD_INT 16
10957: PUSH
10958: LD_INT 17
10960: PUSH
10961: LD_INT 18
10963: PUSH
10964: LD_INT 19
10966: PUSH
10967: LD_INT 20
10969: PUSH
10970: LD_INT 21
10972: PUSH
10973: LD_INT 22
10975: PUSH
10976: LD_INT 23
10978: PUSH
10979: LD_INT 24
10981: PUSH
10982: LD_INT 25
10984: PUSH
10985: LD_INT 26
10987: PUSH
10988: LD_INT 27
10990: PUSH
10991: LD_INT 28
10993: PUSH
10994: LD_INT 29
10996: PUSH
10997: LD_INT 30
10999: PUSH
11000: LD_INT 31
11002: PUSH
11003: LD_INT 32
11005: PUSH
11006: LD_INT 33
11008: PUSH
11009: LD_INT 34
11011: PUSH
11012: LD_INT 35
11014: PUSH
11015: LD_INT 36
11017: PUSH
11018: EMPTY
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: PUSH
11056: LD_INT 101
11058: PUSH
11059: LD_INT 102
11061: PUSH
11062: LD_INT 103
11064: PUSH
11065: LD_INT 104
11067: PUSH
11068: LD_INT 105
11070: PUSH
11071: LD_INT 106
11073: PUSH
11074: LD_INT 107
11076: PUSH
11077: LD_INT 108
11079: PUSH
11080: LD_INT 109
11082: PUSH
11083: LD_INT 110
11085: PUSH
11086: LD_INT 111
11088: PUSH
11089: LD_INT 112
11091: PUSH
11092: LD_INT 113
11094: PUSH
11095: LD_INT 114
11097: PUSH
11098: LD_INT 115
11100: PUSH
11101: LD_INT 116
11103: PUSH
11104: LD_INT 117
11106: PUSH
11107: LD_INT 118
11109: PUSH
11110: EMPTY
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: ST_TO_ADDR
// if result then
11134: LD_VAR 0 2
11138: IFFALSE 11924
// begin normal :=  ;
11140: LD_ADDR_VAR 0 5
11144: PUSH
11145: LD_STRING 
11147: ST_TO_ADDR
// hardcore :=  ;
11148: LD_ADDR_VAR 0 6
11152: PUSH
11153: LD_STRING 
11155: ST_TO_ADDR
// active :=  ;
11156: LD_ADDR_VAR 0 7
11160: PUSH
11161: LD_STRING 
11163: ST_TO_ADDR
// for i = 1 to normalCounter do
11164: LD_ADDR_VAR 0 8
11168: PUSH
11169: DOUBLE
11170: LD_INT 1
11172: DEC
11173: ST_TO_ADDR
11174: LD_EXP 27
11178: PUSH
11179: FOR_TO
11180: IFFALSE 11281
// begin tmp := 0 ;
11182: LD_ADDR_VAR 0 3
11186: PUSH
11187: LD_STRING 0
11189: ST_TO_ADDR
// if result [ 1 ] then
11190: LD_VAR 0 2
11194: PUSH
11195: LD_INT 1
11197: ARRAY
11198: IFFALSE 11263
// if result [ 1 ] [ 1 ] = i then
11200: LD_VAR 0 2
11204: PUSH
11205: LD_INT 1
11207: ARRAY
11208: PUSH
11209: LD_INT 1
11211: ARRAY
11212: PUSH
11213: LD_VAR 0 8
11217: EQUAL
11218: IFFALSE 11263
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11220: LD_ADDR_VAR 0 2
11224: PUSH
11225: LD_VAR 0 2
11229: PPUSH
11230: LD_INT 1
11232: PPUSH
11233: LD_VAR 0 2
11237: PUSH
11238: LD_INT 1
11240: ARRAY
11241: PPUSH
11242: LD_INT 1
11244: PPUSH
11245: CALL_OW 3
11249: PPUSH
11250: CALL_OW 1
11254: ST_TO_ADDR
// tmp := 1 ;
11255: LD_ADDR_VAR 0 3
11259: PUSH
11260: LD_STRING 1
11262: ST_TO_ADDR
// end ; normal := normal & tmp ;
11263: LD_ADDR_VAR 0 5
11267: PUSH
11268: LD_VAR 0 5
11272: PUSH
11273: LD_VAR 0 3
11277: STR
11278: ST_TO_ADDR
// end ;
11279: GO 11179
11281: POP
11282: POP
// for i = 1 to hardcoreCounter do
11283: LD_ADDR_VAR 0 8
11287: PUSH
11288: DOUBLE
11289: LD_INT 1
11291: DEC
11292: ST_TO_ADDR
11293: LD_EXP 28
11297: PUSH
11298: FOR_TO
11299: IFFALSE 11404
// begin tmp := 0 ;
11301: LD_ADDR_VAR 0 3
11305: PUSH
11306: LD_STRING 0
11308: ST_TO_ADDR
// if result [ 2 ] then
11309: LD_VAR 0 2
11313: PUSH
11314: LD_INT 2
11316: ARRAY
11317: IFFALSE 11386
// if result [ 2 ] [ 1 ] = 100 + i then
11319: LD_VAR 0 2
11323: PUSH
11324: LD_INT 2
11326: ARRAY
11327: PUSH
11328: LD_INT 1
11330: ARRAY
11331: PUSH
11332: LD_INT 100
11334: PUSH
11335: LD_VAR 0 8
11339: PLUS
11340: EQUAL
11341: IFFALSE 11386
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11343: LD_ADDR_VAR 0 2
11347: PUSH
11348: LD_VAR 0 2
11352: PPUSH
11353: LD_INT 2
11355: PPUSH
11356: LD_VAR 0 2
11360: PUSH
11361: LD_INT 2
11363: ARRAY
11364: PPUSH
11365: LD_INT 1
11367: PPUSH
11368: CALL_OW 3
11372: PPUSH
11373: CALL_OW 1
11377: ST_TO_ADDR
// tmp := 1 ;
11378: LD_ADDR_VAR 0 3
11382: PUSH
11383: LD_STRING 1
11385: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11386: LD_ADDR_VAR 0 6
11390: PUSH
11391: LD_VAR 0 6
11395: PUSH
11396: LD_VAR 0 3
11400: STR
11401: ST_TO_ADDR
// end ;
11402: GO 11298
11404: POP
11405: POP
// if isGameLoad then
11406: LD_VAR 0 1
11410: IFFALSE 11885
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
11412: LD_ADDR_VAR 0 4
11416: PUSH
11417: LD_EXP 31
11421: PUSH
11422: LD_EXP 30
11426: PUSH
11427: LD_EXP 32
11431: PUSH
11432: LD_EXP 29
11436: PUSH
11437: LD_EXP 33
11441: PUSH
11442: LD_EXP 34
11446: PUSH
11447: LD_EXP 35
11451: PUSH
11452: LD_EXP 36
11456: PUSH
11457: LD_EXP 37
11461: PUSH
11462: LD_EXP 38
11466: PUSH
11467: LD_EXP 39
11471: PUSH
11472: LD_EXP 40
11476: PUSH
11477: LD_EXP 41
11481: PUSH
11482: LD_EXP 42
11486: PUSH
11487: LD_EXP 50
11491: PUSH
11492: LD_EXP 51
11496: PUSH
11497: LD_EXP 52
11501: PUSH
11502: LD_EXP 53
11506: PUSH
11507: LD_EXP 55
11511: PUSH
11512: LD_EXP 56
11516: PUSH
11517: LD_EXP 57
11521: PUSH
11522: LD_EXP 60
11526: PUSH
11527: LD_EXP 62
11531: PUSH
11532: LD_EXP 63
11536: PUSH
11537: LD_EXP 64
11541: PUSH
11542: LD_EXP 66
11546: PUSH
11547: LD_EXP 67
11551: PUSH
11552: LD_EXP 70
11556: PUSH
11557: LD_EXP 71
11561: PUSH
11562: LD_EXP 72
11566: PUSH
11567: LD_EXP 73
11571: PUSH
11572: LD_EXP 74
11576: PUSH
11577: LD_EXP 75
11581: PUSH
11582: LD_EXP 76
11586: PUSH
11587: LD_EXP 77
11591: PUSH
11592: LD_EXP 78
11596: PUSH
11597: LD_EXP 43
11601: PUSH
11602: LD_EXP 44
11606: PUSH
11607: LD_EXP 47
11611: PUSH
11612: LD_EXP 48
11616: PUSH
11617: LD_EXP 49
11621: PUSH
11622: LD_EXP 45
11626: PUSH
11627: LD_EXP 46
11631: PUSH
11632: LD_EXP 54
11636: PUSH
11637: LD_EXP 58
11641: PUSH
11642: LD_EXP 59
11646: PUSH
11647: LD_EXP 61
11651: PUSH
11652: LD_EXP 65
11656: PUSH
11657: LD_EXP 68
11661: PUSH
11662: LD_EXP 69
11666: PUSH
11667: LD_EXP 79
11671: PUSH
11672: LD_EXP 80
11676: PUSH
11677: LD_EXP 81
11681: PUSH
11682: LD_EXP 82
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: ST_TO_ADDR
// tmp :=  ;
11743: LD_ADDR_VAR 0 3
11747: PUSH
11748: LD_STRING 
11750: ST_TO_ADDR
// for i = 1 to normalCounter do
11751: LD_ADDR_VAR 0 8
11755: PUSH
11756: DOUBLE
11757: LD_INT 1
11759: DEC
11760: ST_TO_ADDR
11761: LD_EXP 27
11765: PUSH
11766: FOR_TO
11767: IFFALSE 11803
// begin if flags [ i ] then
11769: LD_VAR 0 4
11773: PUSH
11774: LD_VAR 0 8
11778: ARRAY
11779: IFFALSE 11801
// tmp := tmp & i & ; ;
11781: LD_ADDR_VAR 0 3
11785: PUSH
11786: LD_VAR 0 3
11790: PUSH
11791: LD_VAR 0 8
11795: STR
11796: PUSH
11797: LD_STRING ;
11799: STR
11800: ST_TO_ADDR
// end ;
11801: GO 11766
11803: POP
11804: POP
// for i = 1 to hardcoreCounter do
11805: LD_ADDR_VAR 0 8
11809: PUSH
11810: DOUBLE
11811: LD_INT 1
11813: DEC
11814: ST_TO_ADDR
11815: LD_EXP 28
11819: PUSH
11820: FOR_TO
11821: IFFALSE 11867
// begin if flags [ normalCounter + i ] then
11823: LD_VAR 0 4
11827: PUSH
11828: LD_EXP 27
11832: PUSH
11833: LD_VAR 0 8
11837: PLUS
11838: ARRAY
11839: IFFALSE 11865
// tmp := tmp & ( 100 + i ) & ; ;
11841: LD_ADDR_VAR 0 3
11845: PUSH
11846: LD_VAR 0 3
11850: PUSH
11851: LD_INT 100
11853: PUSH
11854: LD_VAR 0 8
11858: PLUS
11859: STR
11860: PUSH
11861: LD_STRING ;
11863: STR
11864: ST_TO_ADDR
// end ;
11865: GO 11820
11867: POP
11868: POP
// if tmp then
11869: LD_VAR 0 3
11873: IFFALSE 11885
// active := tmp ;
11875: LD_ADDR_VAR 0 7
11879: PUSH
11880: LD_VAR 0 3
11884: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11885: LD_STRING getStreamItemsFromMission("
11887: PUSH
11888: LD_VAR 0 5
11892: STR
11893: PUSH
11894: LD_STRING ","
11896: STR
11897: PUSH
11898: LD_VAR 0 6
11902: STR
11903: PUSH
11904: LD_STRING ","
11906: STR
11907: PUSH
11908: LD_VAR 0 7
11912: STR
11913: PUSH
11914: LD_STRING ")
11916: STR
11917: PPUSH
11918: CALL_OW 559
// end else
11922: GO 11931
// ToLua ( getStreamItemsFromMission("","","") ) ;
11924: LD_STRING getStreamItemsFromMission("","","")
11926: PPUSH
11927: CALL_OW 559
// end ;
11931: LD_VAR 0 2
11935: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11936: LD_EXP 26
11940: PUSH
11941: LD_EXP 31
11945: AND
11946: IFFALSE 12070
11948: GO 11950
11950: DISABLE
11951: LD_INT 0
11953: PPUSH
11954: PPUSH
// begin enable ;
11955: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11956: LD_ADDR_VAR 0 2
11960: PUSH
11961: LD_INT 22
11963: PUSH
11964: LD_OWVAR 2
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 2
11975: PUSH
11976: LD_INT 34
11978: PUSH
11979: LD_INT 7
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: PUSH
11986: LD_INT 34
11988: PUSH
11989: LD_INT 45
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: PUSH
11996: LD_INT 34
11998: PUSH
11999: LD_INT 28
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: PUSH
12006: LD_INT 34
12008: PUSH
12009: LD_INT 47
12011: PUSH
12012: EMPTY
12013: LIST
12014: LIST
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: PPUSH
12027: CALL_OW 69
12031: ST_TO_ADDR
// if not tmp then
12032: LD_VAR 0 2
12036: NOT
12037: IFFALSE 12041
// exit ;
12039: GO 12070
// for i in tmp do
12041: LD_ADDR_VAR 0 1
12045: PUSH
12046: LD_VAR 0 2
12050: PUSH
12051: FOR_IN
12052: IFFALSE 12068
// begin SetLives ( i , 0 ) ;
12054: LD_VAR 0 1
12058: PPUSH
12059: LD_INT 0
12061: PPUSH
12062: CALL_OW 234
// end ;
12066: GO 12051
12068: POP
12069: POP
// end ;
12070: PPOPN 2
12072: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12073: LD_EXP 26
12077: PUSH
12078: LD_EXP 32
12082: AND
12083: IFFALSE 12167
12085: GO 12087
12087: DISABLE
12088: LD_INT 0
12090: PPUSH
12091: PPUSH
// begin enable ;
12092: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12093: LD_ADDR_VAR 0 2
12097: PUSH
12098: LD_INT 22
12100: PUSH
12101: LD_OWVAR 2
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PUSH
12110: LD_INT 32
12112: PUSH
12113: LD_INT 3
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: PPUSH
12124: CALL_OW 69
12128: ST_TO_ADDR
// if not tmp then
12129: LD_VAR 0 2
12133: NOT
12134: IFFALSE 12138
// exit ;
12136: GO 12167
// for i in tmp do
12138: LD_ADDR_VAR 0 1
12142: PUSH
12143: LD_VAR 0 2
12147: PUSH
12148: FOR_IN
12149: IFFALSE 12165
// begin SetLives ( i , 0 ) ;
12151: LD_VAR 0 1
12155: PPUSH
12156: LD_INT 0
12158: PPUSH
12159: CALL_OW 234
// end ;
12163: GO 12148
12165: POP
12166: POP
// end ;
12167: PPOPN 2
12169: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12170: LD_EXP 26
12174: PUSH
12175: LD_EXP 29
12179: AND
12180: IFFALSE 12273
12182: GO 12184
12184: DISABLE
12185: LD_INT 0
12187: PPUSH
// begin enable ;
12188: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12189: LD_ADDR_VAR 0 1
12193: PUSH
12194: LD_INT 22
12196: PUSH
12197: LD_OWVAR 2
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: PUSH
12206: LD_INT 2
12208: PUSH
12209: LD_INT 25
12211: PUSH
12212: LD_INT 5
12214: PUSH
12215: EMPTY
12216: LIST
12217: LIST
12218: PUSH
12219: LD_INT 25
12221: PUSH
12222: LD_INT 9
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: PUSH
12229: LD_INT 25
12231: PUSH
12232: LD_INT 8
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PPUSH
12249: CALL_OW 69
12253: PUSH
12254: FOR_IN
12255: IFFALSE 12271
// begin SetClass ( i , 1 ) ;
12257: LD_VAR 0 1
12261: PPUSH
12262: LD_INT 1
12264: PPUSH
12265: CALL_OW 336
// end ;
12269: GO 12254
12271: POP
12272: POP
// end ;
12273: PPOPN 1
12275: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12276: LD_EXP 26
12280: PUSH
12281: LD_EXP 30
12285: AND
12286: PUSH
12287: LD_OWVAR 65
12291: PUSH
12292: LD_INT 7
12294: LESS
12295: AND
12296: IFFALSE 12310
12298: GO 12300
12300: DISABLE
// begin enable ;
12301: ENABLE
// game_speed := 7 ;
12302: LD_ADDR_OWVAR 65
12306: PUSH
12307: LD_INT 7
12309: ST_TO_ADDR
// end ;
12310: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12311: LD_EXP 26
12315: PUSH
12316: LD_EXP 33
12320: AND
12321: IFFALSE 12523
12323: GO 12325
12325: DISABLE
12326: LD_INT 0
12328: PPUSH
12329: PPUSH
12330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12331: LD_ADDR_VAR 0 3
12335: PUSH
12336: LD_INT 81
12338: PUSH
12339: LD_OWVAR 2
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: PUSH
12348: LD_INT 21
12350: PUSH
12351: LD_INT 1
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: PUSH
12358: EMPTY
12359: LIST
12360: LIST
12361: PPUSH
12362: CALL_OW 69
12366: ST_TO_ADDR
// if not tmp then
12367: LD_VAR 0 3
12371: NOT
12372: IFFALSE 12376
// exit ;
12374: GO 12523
// if tmp > 5 then
12376: LD_VAR 0 3
12380: PUSH
12381: LD_INT 5
12383: GREATER
12384: IFFALSE 12396
// k := 5 else
12386: LD_ADDR_VAR 0 2
12390: PUSH
12391: LD_INT 5
12393: ST_TO_ADDR
12394: GO 12406
// k := tmp ;
12396: LD_ADDR_VAR 0 2
12400: PUSH
12401: LD_VAR 0 3
12405: ST_TO_ADDR
// for i := 1 to k do
12406: LD_ADDR_VAR 0 1
12410: PUSH
12411: DOUBLE
12412: LD_INT 1
12414: DEC
12415: ST_TO_ADDR
12416: LD_VAR 0 2
12420: PUSH
12421: FOR_TO
12422: IFFALSE 12521
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12424: LD_VAR 0 3
12428: PUSH
12429: LD_VAR 0 1
12433: ARRAY
12434: PPUSH
12435: LD_VAR 0 1
12439: PUSH
12440: LD_INT 4
12442: MOD
12443: PUSH
12444: LD_INT 1
12446: PLUS
12447: PPUSH
12448: CALL_OW 259
12452: PUSH
12453: LD_INT 10
12455: LESS
12456: IFFALSE 12519
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12458: LD_VAR 0 3
12462: PUSH
12463: LD_VAR 0 1
12467: ARRAY
12468: PPUSH
12469: LD_VAR 0 1
12473: PUSH
12474: LD_INT 4
12476: MOD
12477: PUSH
12478: LD_INT 1
12480: PLUS
12481: PPUSH
12482: LD_VAR 0 3
12486: PUSH
12487: LD_VAR 0 1
12491: ARRAY
12492: PPUSH
12493: LD_VAR 0 1
12497: PUSH
12498: LD_INT 4
12500: MOD
12501: PUSH
12502: LD_INT 1
12504: PLUS
12505: PPUSH
12506: CALL_OW 259
12510: PUSH
12511: LD_INT 1
12513: PLUS
12514: PPUSH
12515: CALL_OW 237
12519: GO 12421
12521: POP
12522: POP
// end ;
12523: PPOPN 3
12525: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12526: LD_EXP 26
12530: PUSH
12531: LD_EXP 34
12535: AND
12536: IFFALSE 12556
12538: GO 12540
12540: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12541: LD_INT 4
12543: PPUSH
12544: LD_OWVAR 2
12548: PPUSH
12549: LD_INT 0
12551: PPUSH
12552: CALL_OW 324
12556: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12557: LD_EXP 26
12561: PUSH
12562: LD_EXP 63
12566: AND
12567: IFFALSE 12587
12569: GO 12571
12571: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12572: LD_INT 19
12574: PPUSH
12575: LD_OWVAR 2
12579: PPUSH
12580: LD_INT 0
12582: PPUSH
12583: CALL_OW 324
12587: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12588: LD_EXP 26
12592: PUSH
12593: LD_EXP 35
12597: AND
12598: IFFALSE 12700
12600: GO 12602
12602: DISABLE
12603: LD_INT 0
12605: PPUSH
12606: PPUSH
// begin enable ;
12607: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12608: LD_ADDR_VAR 0 2
12612: PUSH
12613: LD_INT 22
12615: PUSH
12616: LD_OWVAR 2
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: PUSH
12625: LD_INT 2
12627: PUSH
12628: LD_INT 34
12630: PUSH
12631: LD_INT 11
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: PUSH
12638: LD_INT 34
12640: PUSH
12641: LD_INT 30
12643: PUSH
12644: EMPTY
12645: LIST
12646: LIST
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: LIST
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PPUSH
12657: CALL_OW 69
12661: ST_TO_ADDR
// if not tmp then
12662: LD_VAR 0 2
12666: NOT
12667: IFFALSE 12671
// exit ;
12669: GO 12700
// for i in tmp do
12671: LD_ADDR_VAR 0 1
12675: PUSH
12676: LD_VAR 0 2
12680: PUSH
12681: FOR_IN
12682: IFFALSE 12698
// begin SetLives ( i , 0 ) ;
12684: LD_VAR 0 1
12688: PPUSH
12689: LD_INT 0
12691: PPUSH
12692: CALL_OW 234
// end ;
12696: GO 12681
12698: POP
12699: POP
// end ;
12700: PPOPN 2
12702: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12703: LD_EXP 26
12707: PUSH
12708: LD_EXP 36
12712: AND
12713: IFFALSE 12733
12715: GO 12717
12717: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12718: LD_INT 32
12720: PPUSH
12721: LD_OWVAR 2
12725: PPUSH
12726: LD_INT 0
12728: PPUSH
12729: CALL_OW 324
12733: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12734: LD_EXP 26
12738: PUSH
12739: LD_EXP 37
12743: AND
12744: IFFALSE 12925
12746: GO 12748
12748: DISABLE
12749: LD_INT 0
12751: PPUSH
12752: PPUSH
12753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12754: LD_ADDR_VAR 0 2
12758: PUSH
12759: LD_INT 22
12761: PUSH
12762: LD_OWVAR 2
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: PUSH
12771: LD_INT 33
12773: PUSH
12774: LD_INT 3
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PPUSH
12785: CALL_OW 69
12789: ST_TO_ADDR
// if not tmp then
12790: LD_VAR 0 2
12794: NOT
12795: IFFALSE 12799
// exit ;
12797: GO 12925
// side := 0 ;
12799: LD_ADDR_VAR 0 3
12803: PUSH
12804: LD_INT 0
12806: ST_TO_ADDR
// for i := 1 to 8 do
12807: LD_ADDR_VAR 0 1
12811: PUSH
12812: DOUBLE
12813: LD_INT 1
12815: DEC
12816: ST_TO_ADDR
12817: LD_INT 8
12819: PUSH
12820: FOR_TO
12821: IFFALSE 12869
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12823: LD_OWVAR 2
12827: PUSH
12828: LD_VAR 0 1
12832: NONEQUAL
12833: PUSH
12834: LD_OWVAR 2
12838: PPUSH
12839: LD_VAR 0 1
12843: PPUSH
12844: CALL_OW 81
12848: PUSH
12849: LD_INT 2
12851: EQUAL
12852: AND
12853: IFFALSE 12867
// begin side := i ;
12855: LD_ADDR_VAR 0 3
12859: PUSH
12860: LD_VAR 0 1
12864: ST_TO_ADDR
// break ;
12865: GO 12869
// end ;
12867: GO 12820
12869: POP
12870: POP
// if not side then
12871: LD_VAR 0 3
12875: NOT
12876: IFFALSE 12880
// exit ;
12878: GO 12925
// for i := 1 to tmp do
12880: LD_ADDR_VAR 0 1
12884: PUSH
12885: DOUBLE
12886: LD_INT 1
12888: DEC
12889: ST_TO_ADDR
12890: LD_VAR 0 2
12894: PUSH
12895: FOR_TO
12896: IFFALSE 12923
// if Prob ( 60 ) then
12898: LD_INT 60
12900: PPUSH
12901: CALL_OW 13
12905: IFFALSE 12921
// SetSide ( i , side ) ;
12907: LD_VAR 0 1
12911: PPUSH
12912: LD_VAR 0 3
12916: PPUSH
12917: CALL_OW 235
12921: GO 12895
12923: POP
12924: POP
// end ;
12925: PPOPN 3
12927: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12928: LD_EXP 26
12932: PUSH
12933: LD_EXP 39
12937: AND
12938: IFFALSE 13057
12940: GO 12942
12942: DISABLE
12943: LD_INT 0
12945: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12946: LD_ADDR_VAR 0 1
12950: PUSH
12951: LD_INT 22
12953: PUSH
12954: LD_OWVAR 2
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PUSH
12963: LD_INT 21
12965: PUSH
12966: LD_INT 1
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: PUSH
12973: LD_INT 3
12975: PUSH
12976: LD_INT 23
12978: PUSH
12979: LD_INT 0
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: LIST
12994: PPUSH
12995: CALL_OW 69
12999: PUSH
13000: FOR_IN
13001: IFFALSE 13055
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13003: LD_VAR 0 1
13007: PPUSH
13008: CALL_OW 257
13012: PUSH
13013: LD_INT 1
13015: PUSH
13016: LD_INT 2
13018: PUSH
13019: LD_INT 3
13021: PUSH
13022: LD_INT 4
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: IN
13031: IFFALSE 13053
// SetClass ( un , rand ( 1 , 4 ) ) ;
13033: LD_VAR 0 1
13037: PPUSH
13038: LD_INT 1
13040: PPUSH
13041: LD_INT 4
13043: PPUSH
13044: CALL_OW 12
13048: PPUSH
13049: CALL_OW 336
13053: GO 13000
13055: POP
13056: POP
// end ;
13057: PPOPN 1
13059: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13060: LD_EXP 26
13064: PUSH
13065: LD_EXP 38
13069: AND
13070: IFFALSE 13149
13072: GO 13074
13074: DISABLE
13075: LD_INT 0
13077: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13078: LD_ADDR_VAR 0 1
13082: PUSH
13083: LD_INT 22
13085: PUSH
13086: LD_OWVAR 2
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: PUSH
13095: LD_INT 21
13097: PUSH
13098: LD_INT 3
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PPUSH
13109: CALL_OW 69
13113: ST_TO_ADDR
// if not tmp then
13114: LD_VAR 0 1
13118: NOT
13119: IFFALSE 13123
// exit ;
13121: GO 13149
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13123: LD_VAR 0 1
13127: PUSH
13128: LD_INT 1
13130: PPUSH
13131: LD_VAR 0 1
13135: PPUSH
13136: CALL_OW 12
13140: ARRAY
13141: PPUSH
13142: LD_INT 100
13144: PPUSH
13145: CALL_OW 234
// end ;
13149: PPOPN 1
13151: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13152: LD_EXP 26
13156: PUSH
13157: LD_EXP 40
13161: AND
13162: IFFALSE 13260
13164: GO 13166
13166: DISABLE
13167: LD_INT 0
13169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13170: LD_ADDR_VAR 0 1
13174: PUSH
13175: LD_INT 22
13177: PUSH
13178: LD_OWVAR 2
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PUSH
13187: LD_INT 21
13189: PUSH
13190: LD_INT 1
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: PUSH
13197: EMPTY
13198: LIST
13199: LIST
13200: PPUSH
13201: CALL_OW 69
13205: ST_TO_ADDR
// if not tmp then
13206: LD_VAR 0 1
13210: NOT
13211: IFFALSE 13215
// exit ;
13213: GO 13260
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13215: LD_VAR 0 1
13219: PUSH
13220: LD_INT 1
13222: PPUSH
13223: LD_VAR 0 1
13227: PPUSH
13228: CALL_OW 12
13232: ARRAY
13233: PPUSH
13234: LD_INT 1
13236: PPUSH
13237: LD_INT 4
13239: PPUSH
13240: CALL_OW 12
13244: PPUSH
13245: LD_INT 3000
13247: PPUSH
13248: LD_INT 9000
13250: PPUSH
13251: CALL_OW 12
13255: PPUSH
13256: CALL_OW 492
// end ;
13260: PPOPN 1
13262: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13263: LD_EXP 26
13267: PUSH
13268: LD_EXP 41
13272: AND
13273: IFFALSE 13293
13275: GO 13277
13277: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13278: LD_INT 1
13280: PPUSH
13281: LD_OWVAR 2
13285: PPUSH
13286: LD_INT 0
13288: PPUSH
13289: CALL_OW 324
13293: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13294: LD_EXP 26
13298: PUSH
13299: LD_EXP 42
13303: AND
13304: IFFALSE 13387
13306: GO 13308
13308: DISABLE
13309: LD_INT 0
13311: PPUSH
13312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13313: LD_ADDR_VAR 0 2
13317: PUSH
13318: LD_INT 22
13320: PUSH
13321: LD_OWVAR 2
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: PUSH
13330: LD_INT 21
13332: PUSH
13333: LD_INT 3
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: PPUSH
13344: CALL_OW 69
13348: ST_TO_ADDR
// if not tmp then
13349: LD_VAR 0 2
13353: NOT
13354: IFFALSE 13358
// exit ;
13356: GO 13387
// for i in tmp do
13358: LD_ADDR_VAR 0 1
13362: PUSH
13363: LD_VAR 0 2
13367: PUSH
13368: FOR_IN
13369: IFFALSE 13385
// SetBLevel ( i , 10 ) ;
13371: LD_VAR 0 1
13375: PPUSH
13376: LD_INT 10
13378: PPUSH
13379: CALL_OW 241
13383: GO 13368
13385: POP
13386: POP
// end ;
13387: PPOPN 2
13389: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13390: LD_EXP 26
13394: PUSH
13395: LD_EXP 43
13399: AND
13400: IFFALSE 13511
13402: GO 13404
13404: DISABLE
13405: LD_INT 0
13407: PPUSH
13408: PPUSH
13409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13410: LD_ADDR_VAR 0 3
13414: PUSH
13415: LD_INT 22
13417: PUSH
13418: LD_OWVAR 2
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: PUSH
13427: LD_INT 25
13429: PUSH
13430: LD_INT 1
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: PPUSH
13441: CALL_OW 69
13445: ST_TO_ADDR
// if not tmp then
13446: LD_VAR 0 3
13450: NOT
13451: IFFALSE 13455
// exit ;
13453: GO 13511
// un := tmp [ rand ( 1 , tmp ) ] ;
13455: LD_ADDR_VAR 0 2
13459: PUSH
13460: LD_VAR 0 3
13464: PUSH
13465: LD_INT 1
13467: PPUSH
13468: LD_VAR 0 3
13472: PPUSH
13473: CALL_OW 12
13477: ARRAY
13478: ST_TO_ADDR
// if Crawls ( un ) then
13479: LD_VAR 0 2
13483: PPUSH
13484: CALL_OW 318
13488: IFFALSE 13499
// ComWalk ( un ) ;
13490: LD_VAR 0 2
13494: PPUSH
13495: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13499: LD_VAR 0 2
13503: PPUSH
13504: LD_INT 5
13506: PPUSH
13507: CALL_OW 336
// end ;
13511: PPOPN 3
13513: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13514: LD_EXP 26
13518: PUSH
13519: LD_EXP 44
13523: AND
13524: PUSH
13525: LD_OWVAR 67
13529: PUSH
13530: LD_INT 4
13532: LESS
13533: AND
13534: IFFALSE 13553
13536: GO 13538
13538: DISABLE
// begin Difficulty := Difficulty + 1 ;
13539: LD_ADDR_OWVAR 67
13543: PUSH
13544: LD_OWVAR 67
13548: PUSH
13549: LD_INT 1
13551: PLUS
13552: ST_TO_ADDR
// end ;
13553: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13554: LD_EXP 26
13558: PUSH
13559: LD_EXP 45
13563: AND
13564: IFFALSE 13667
13566: GO 13568
13568: DISABLE
13569: LD_INT 0
13571: PPUSH
// begin for i := 1 to 5 do
13572: LD_ADDR_VAR 0 1
13576: PUSH
13577: DOUBLE
13578: LD_INT 1
13580: DEC
13581: ST_TO_ADDR
13582: LD_INT 5
13584: PUSH
13585: FOR_TO
13586: IFFALSE 13665
// begin uc_nation := nation_nature ;
13588: LD_ADDR_OWVAR 21
13592: PUSH
13593: LD_INT 0
13595: ST_TO_ADDR
// uc_side := 0 ;
13596: LD_ADDR_OWVAR 20
13600: PUSH
13601: LD_INT 0
13603: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13604: LD_ADDR_OWVAR 29
13608: PUSH
13609: LD_INT 12
13611: PUSH
13612: LD_INT 12
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: ST_TO_ADDR
// hc_agressivity := 20 ;
13619: LD_ADDR_OWVAR 35
13623: PUSH
13624: LD_INT 20
13626: ST_TO_ADDR
// hc_class := class_tiger ;
13627: LD_ADDR_OWVAR 28
13631: PUSH
13632: LD_INT 14
13634: ST_TO_ADDR
// hc_gallery :=  ;
13635: LD_ADDR_OWVAR 33
13639: PUSH
13640: LD_STRING 
13642: ST_TO_ADDR
// hc_name :=  ;
13643: LD_ADDR_OWVAR 26
13647: PUSH
13648: LD_STRING 
13650: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13651: CALL_OW 44
13655: PPUSH
13656: LD_INT 0
13658: PPUSH
13659: CALL_OW 51
// end ;
13663: GO 13585
13665: POP
13666: POP
// end ;
13667: PPOPN 1
13669: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13670: LD_EXP 26
13674: PUSH
13675: LD_EXP 46
13679: AND
13680: IFFALSE 13689
13682: GO 13684
13684: DISABLE
// StreamSibBomb ;
13685: CALL 13690 0 0
13689: END
// export function StreamSibBomb ; var i , x , y ; begin
13690: LD_INT 0
13692: PPUSH
13693: PPUSH
13694: PPUSH
13695: PPUSH
// result := false ;
13696: LD_ADDR_VAR 0 1
13700: PUSH
13701: LD_INT 0
13703: ST_TO_ADDR
// for i := 1 to 16 do
13704: LD_ADDR_VAR 0 2
13708: PUSH
13709: DOUBLE
13710: LD_INT 1
13712: DEC
13713: ST_TO_ADDR
13714: LD_INT 16
13716: PUSH
13717: FOR_TO
13718: IFFALSE 13917
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13720: LD_ADDR_VAR 0 3
13724: PUSH
13725: LD_INT 10
13727: PUSH
13728: LD_INT 20
13730: PUSH
13731: LD_INT 30
13733: PUSH
13734: LD_INT 40
13736: PUSH
13737: LD_INT 50
13739: PUSH
13740: LD_INT 60
13742: PUSH
13743: LD_INT 70
13745: PUSH
13746: LD_INT 80
13748: PUSH
13749: LD_INT 90
13751: PUSH
13752: LD_INT 100
13754: PUSH
13755: LD_INT 110
13757: PUSH
13758: LD_INT 120
13760: PUSH
13761: LD_INT 130
13763: PUSH
13764: LD_INT 140
13766: PUSH
13767: LD_INT 150
13769: PUSH
13770: EMPTY
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: PUSH
13787: LD_INT 1
13789: PPUSH
13790: LD_INT 15
13792: PPUSH
13793: CALL_OW 12
13797: ARRAY
13798: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13799: LD_ADDR_VAR 0 4
13803: PUSH
13804: LD_INT 10
13806: PUSH
13807: LD_INT 20
13809: PUSH
13810: LD_INT 30
13812: PUSH
13813: LD_INT 40
13815: PUSH
13816: LD_INT 50
13818: PUSH
13819: LD_INT 60
13821: PUSH
13822: LD_INT 70
13824: PUSH
13825: LD_INT 80
13827: PUSH
13828: LD_INT 90
13830: PUSH
13831: LD_INT 100
13833: PUSH
13834: LD_INT 110
13836: PUSH
13837: LD_INT 120
13839: PUSH
13840: LD_INT 130
13842: PUSH
13843: LD_INT 140
13845: PUSH
13846: LD_INT 150
13848: PUSH
13849: EMPTY
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: PUSH
13866: LD_INT 1
13868: PPUSH
13869: LD_INT 15
13871: PPUSH
13872: CALL_OW 12
13876: ARRAY
13877: ST_TO_ADDR
// if ValidHex ( x , y ) then
13878: LD_VAR 0 3
13882: PPUSH
13883: LD_VAR 0 4
13887: PPUSH
13888: CALL_OW 488
13892: IFFALSE 13915
// begin result := [ x , y ] ;
13894: LD_ADDR_VAR 0 1
13898: PUSH
13899: LD_VAR 0 3
13903: PUSH
13904: LD_VAR 0 4
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: ST_TO_ADDR
// break ;
13913: GO 13917
// end ; end ;
13915: GO 13717
13917: POP
13918: POP
// if result then
13919: LD_VAR 0 1
13923: IFFALSE 13983
// begin ToLua ( playSibBomb() ) ;
13925: LD_STRING playSibBomb()
13927: PPUSH
13928: CALL_OW 559
// wait ( 0 0$14 ) ;
13932: LD_INT 490
13934: PPUSH
13935: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13939: LD_VAR 0 1
13943: PUSH
13944: LD_INT 1
13946: ARRAY
13947: PPUSH
13948: LD_VAR 0 1
13952: PUSH
13953: LD_INT 2
13955: ARRAY
13956: PPUSH
13957: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13961: LD_VAR 0 1
13965: PUSH
13966: LD_INT 1
13968: ARRAY
13969: PPUSH
13970: LD_VAR 0 1
13974: PUSH
13975: LD_INT 2
13977: ARRAY
13978: PPUSH
13979: CALL_OW 429
// end ; end ;
13983: LD_VAR 0 1
13987: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13988: LD_EXP 26
13992: PUSH
13993: LD_EXP 48
13997: AND
13998: IFFALSE 14010
14000: GO 14002
14002: DISABLE
// YouLost (  ) ;
14003: LD_STRING 
14005: PPUSH
14006: CALL_OW 104
14010: END
// every 0 0$1 trigger StreamModeActive and sFog do
14011: LD_EXP 26
14015: PUSH
14016: LD_EXP 47
14020: AND
14021: IFFALSE 14035
14023: GO 14025
14025: DISABLE
// FogOff ( your_side ) ;
14026: LD_OWVAR 2
14030: PPUSH
14031: CALL_OW 344
14035: END
// every 0 0$1 trigger StreamModeActive and sSun do
14036: LD_EXP 26
14040: PUSH
14041: LD_EXP 49
14045: AND
14046: IFFALSE 14074
14048: GO 14050
14050: DISABLE
// begin solar_recharge_percent := 0 ;
14051: LD_ADDR_OWVAR 79
14055: PUSH
14056: LD_INT 0
14058: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14059: LD_INT 10500
14061: PPUSH
14062: CALL_OW 67
// solar_recharge_percent := 100 ;
14066: LD_ADDR_OWVAR 79
14070: PUSH
14071: LD_INT 100
14073: ST_TO_ADDR
// end ;
14074: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14075: LD_EXP 26
14079: PUSH
14080: LD_EXP 50
14084: AND
14085: IFFALSE 14324
14087: GO 14089
14089: DISABLE
14090: LD_INT 0
14092: PPUSH
14093: PPUSH
14094: PPUSH
// begin tmp := [ ] ;
14095: LD_ADDR_VAR 0 3
14099: PUSH
14100: EMPTY
14101: ST_TO_ADDR
// for i := 1 to 6 do
14102: LD_ADDR_VAR 0 1
14106: PUSH
14107: DOUBLE
14108: LD_INT 1
14110: DEC
14111: ST_TO_ADDR
14112: LD_INT 6
14114: PUSH
14115: FOR_TO
14116: IFFALSE 14221
// begin uc_nation := nation_nature ;
14118: LD_ADDR_OWVAR 21
14122: PUSH
14123: LD_INT 0
14125: ST_TO_ADDR
// uc_side := 0 ;
14126: LD_ADDR_OWVAR 20
14130: PUSH
14131: LD_INT 0
14133: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14134: LD_ADDR_OWVAR 29
14138: PUSH
14139: LD_INT 12
14141: PUSH
14142: LD_INT 12
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: ST_TO_ADDR
// hc_agressivity := 20 ;
14149: LD_ADDR_OWVAR 35
14153: PUSH
14154: LD_INT 20
14156: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14157: LD_ADDR_OWVAR 28
14161: PUSH
14162: LD_INT 17
14164: ST_TO_ADDR
// hc_gallery :=  ;
14165: LD_ADDR_OWVAR 33
14169: PUSH
14170: LD_STRING 
14172: ST_TO_ADDR
// hc_name :=  ;
14173: LD_ADDR_OWVAR 26
14177: PUSH
14178: LD_STRING 
14180: ST_TO_ADDR
// un := CreateHuman ;
14181: LD_ADDR_VAR 0 2
14185: PUSH
14186: CALL_OW 44
14190: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14191: LD_VAR 0 2
14195: PPUSH
14196: LD_INT 1
14198: PPUSH
14199: CALL_OW 51
// tmp := tmp ^ un ;
14203: LD_ADDR_VAR 0 3
14207: PUSH
14208: LD_VAR 0 3
14212: PUSH
14213: LD_VAR 0 2
14217: ADD
14218: ST_TO_ADDR
// end ;
14219: GO 14115
14221: POP
14222: POP
// repeat wait ( 0 0$1 ) ;
14223: LD_INT 35
14225: PPUSH
14226: CALL_OW 67
// for un in tmp do
14230: LD_ADDR_VAR 0 2
14234: PUSH
14235: LD_VAR 0 3
14239: PUSH
14240: FOR_IN
14241: IFFALSE 14315
// begin if IsDead ( un ) then
14243: LD_VAR 0 2
14247: PPUSH
14248: CALL_OW 301
14252: IFFALSE 14272
// begin tmp := tmp diff un ;
14254: LD_ADDR_VAR 0 3
14258: PUSH
14259: LD_VAR 0 3
14263: PUSH
14264: LD_VAR 0 2
14268: DIFF
14269: ST_TO_ADDR
// continue ;
14270: GO 14240
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14272: LD_VAR 0 2
14276: PPUSH
14277: LD_INT 3
14279: PUSH
14280: LD_INT 22
14282: PUSH
14283: LD_INT 0
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: PPUSH
14294: CALL_OW 69
14298: PPUSH
14299: LD_VAR 0 2
14303: PPUSH
14304: CALL_OW 74
14308: PPUSH
14309: CALL_OW 115
// end ;
14313: GO 14240
14315: POP
14316: POP
// until not tmp ;
14317: LD_VAR 0 3
14321: NOT
14322: IFFALSE 14223
// end ;
14324: PPOPN 3
14326: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14327: LD_EXP 26
14331: PUSH
14332: LD_EXP 51
14336: AND
14337: IFFALSE 14391
14339: GO 14341
14341: DISABLE
// begin ToLua ( displayTroll(); ) ;
14342: LD_STRING displayTroll();
14344: PPUSH
14345: CALL_OW 559
// wait ( 3 3$00 ) ;
14349: LD_INT 6300
14351: PPUSH
14352: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14356: LD_STRING hideTroll();
14358: PPUSH
14359: CALL_OW 559
// wait ( 1 1$00 ) ;
14363: LD_INT 2100
14365: PPUSH
14366: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14370: LD_STRING displayTroll();
14372: PPUSH
14373: CALL_OW 559
// wait ( 1 1$00 ) ;
14377: LD_INT 2100
14379: PPUSH
14380: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14384: LD_STRING hideTroll();
14386: PPUSH
14387: CALL_OW 559
// end ;
14391: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14392: LD_EXP 26
14396: PUSH
14397: LD_EXP 52
14401: AND
14402: IFFALSE 14465
14404: GO 14406
14406: DISABLE
14407: LD_INT 0
14409: PPUSH
// begin p := 0 ;
14410: LD_ADDR_VAR 0 1
14414: PUSH
14415: LD_INT 0
14417: ST_TO_ADDR
// repeat game_speed := 1 ;
14418: LD_ADDR_OWVAR 65
14422: PUSH
14423: LD_INT 1
14425: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14426: LD_INT 35
14428: PPUSH
14429: CALL_OW 67
// p := p + 1 ;
14433: LD_ADDR_VAR 0 1
14437: PUSH
14438: LD_VAR 0 1
14442: PUSH
14443: LD_INT 1
14445: PLUS
14446: ST_TO_ADDR
// until p >= 60 ;
14447: LD_VAR 0 1
14451: PUSH
14452: LD_INT 60
14454: GREATEREQUAL
14455: IFFALSE 14418
// game_speed := 4 ;
14457: LD_ADDR_OWVAR 65
14461: PUSH
14462: LD_INT 4
14464: ST_TO_ADDR
// end ;
14465: PPOPN 1
14467: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14468: LD_EXP 26
14472: PUSH
14473: LD_EXP 53
14477: AND
14478: IFFALSE 14624
14480: GO 14482
14482: DISABLE
14483: LD_INT 0
14485: PPUSH
14486: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14487: LD_ADDR_VAR 0 1
14491: PUSH
14492: LD_INT 22
14494: PUSH
14495: LD_OWVAR 2
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: PUSH
14504: LD_INT 2
14506: PUSH
14507: LD_INT 30
14509: PUSH
14510: LD_INT 0
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: PUSH
14517: LD_INT 30
14519: PUSH
14520: LD_INT 1
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: LIST
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: PPUSH
14536: CALL_OW 69
14540: ST_TO_ADDR
// if not depot then
14541: LD_VAR 0 1
14545: NOT
14546: IFFALSE 14550
// exit ;
14548: GO 14624
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14550: LD_ADDR_VAR 0 2
14554: PUSH
14555: LD_VAR 0 1
14559: PUSH
14560: LD_INT 1
14562: PPUSH
14563: LD_VAR 0 1
14567: PPUSH
14568: CALL_OW 12
14572: ARRAY
14573: PPUSH
14574: CALL_OW 274
14578: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14579: LD_VAR 0 2
14583: PPUSH
14584: LD_INT 1
14586: PPUSH
14587: LD_INT 0
14589: PPUSH
14590: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14594: LD_VAR 0 2
14598: PPUSH
14599: LD_INT 2
14601: PPUSH
14602: LD_INT 0
14604: PPUSH
14605: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14609: LD_VAR 0 2
14613: PPUSH
14614: LD_INT 3
14616: PPUSH
14617: LD_INT 0
14619: PPUSH
14620: CALL_OW 277
// end ;
14624: PPOPN 2
14626: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14627: LD_EXP 26
14631: PUSH
14632: LD_EXP 54
14636: AND
14637: IFFALSE 14734
14639: GO 14641
14641: DISABLE
14642: LD_INT 0
14644: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14645: LD_ADDR_VAR 0 1
14649: PUSH
14650: LD_INT 22
14652: PUSH
14653: LD_OWVAR 2
14657: PUSH
14658: EMPTY
14659: LIST
14660: LIST
14661: PUSH
14662: LD_INT 21
14664: PUSH
14665: LD_INT 1
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: PUSH
14672: LD_INT 3
14674: PUSH
14675: LD_INT 23
14677: PUSH
14678: LD_INT 0
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: LIST
14693: PPUSH
14694: CALL_OW 69
14698: ST_TO_ADDR
// if not tmp then
14699: LD_VAR 0 1
14703: NOT
14704: IFFALSE 14708
// exit ;
14706: GO 14734
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14708: LD_VAR 0 1
14712: PUSH
14713: LD_INT 1
14715: PPUSH
14716: LD_VAR 0 1
14720: PPUSH
14721: CALL_OW 12
14725: ARRAY
14726: PPUSH
14727: LD_INT 200
14729: PPUSH
14730: CALL_OW 234
// end ;
14734: PPOPN 1
14736: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14737: LD_EXP 26
14741: PUSH
14742: LD_EXP 55
14746: AND
14747: IFFALSE 14826
14749: GO 14751
14751: DISABLE
14752: LD_INT 0
14754: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14755: LD_ADDR_VAR 0 1
14759: PUSH
14760: LD_INT 22
14762: PUSH
14763: LD_OWVAR 2
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: PUSH
14772: LD_INT 21
14774: PUSH
14775: LD_INT 2
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PPUSH
14786: CALL_OW 69
14790: ST_TO_ADDR
// if not tmp then
14791: LD_VAR 0 1
14795: NOT
14796: IFFALSE 14800
// exit ;
14798: GO 14826
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14800: LD_VAR 0 1
14804: PUSH
14805: LD_INT 1
14807: PPUSH
14808: LD_VAR 0 1
14812: PPUSH
14813: CALL_OW 12
14817: ARRAY
14818: PPUSH
14819: LD_INT 60
14821: PPUSH
14822: CALL_OW 234
// end ;
14826: PPOPN 1
14828: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14829: LD_EXP 26
14833: PUSH
14834: LD_EXP 56
14838: AND
14839: IFFALSE 14938
14841: GO 14843
14843: DISABLE
14844: LD_INT 0
14846: PPUSH
14847: PPUSH
// begin enable ;
14848: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14849: LD_ADDR_VAR 0 1
14853: PUSH
14854: LD_INT 22
14856: PUSH
14857: LD_OWVAR 2
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: LD_INT 61
14868: PUSH
14869: EMPTY
14870: LIST
14871: PUSH
14872: LD_INT 33
14874: PUSH
14875: LD_INT 2
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: LIST
14886: PPUSH
14887: CALL_OW 69
14891: ST_TO_ADDR
// if not tmp then
14892: LD_VAR 0 1
14896: NOT
14897: IFFALSE 14901
// exit ;
14899: GO 14938
// for i in tmp do
14901: LD_ADDR_VAR 0 2
14905: PUSH
14906: LD_VAR 0 1
14910: PUSH
14911: FOR_IN
14912: IFFALSE 14936
// if IsControledBy ( i ) then
14914: LD_VAR 0 2
14918: PPUSH
14919: CALL_OW 312
14923: IFFALSE 14934
// ComUnlink ( i ) ;
14925: LD_VAR 0 2
14929: PPUSH
14930: CALL_OW 136
14934: GO 14911
14936: POP
14937: POP
// end ;
14938: PPOPN 2
14940: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14941: LD_EXP 26
14945: PUSH
14946: LD_EXP 57
14950: AND
14951: IFFALSE 15091
14953: GO 14955
14955: DISABLE
14956: LD_INT 0
14958: PPUSH
14959: PPUSH
// begin ToLua ( displayPowell(); ) ;
14960: LD_STRING displayPowell();
14962: PPUSH
14963: CALL_OW 559
// uc_side := 0 ;
14967: LD_ADDR_OWVAR 20
14971: PUSH
14972: LD_INT 0
14974: ST_TO_ADDR
// uc_nation := 2 ;
14975: LD_ADDR_OWVAR 21
14979: PUSH
14980: LD_INT 2
14982: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14983: LD_ADDR_OWVAR 37
14987: PUSH
14988: LD_INT 14
14990: ST_TO_ADDR
// vc_engine := engine_siberite ;
14991: LD_ADDR_OWVAR 39
14995: PUSH
14996: LD_INT 3
14998: ST_TO_ADDR
// vc_control := control_apeman ;
14999: LD_ADDR_OWVAR 38
15003: PUSH
15004: LD_INT 5
15006: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15007: LD_ADDR_OWVAR 40
15011: PUSH
15012: LD_INT 29
15014: ST_TO_ADDR
// un := CreateVehicle ;
15015: LD_ADDR_VAR 0 2
15019: PUSH
15020: CALL_OW 45
15024: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15025: LD_VAR 0 2
15029: PPUSH
15030: LD_INT 1
15032: PPUSH
15033: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15037: LD_INT 35
15039: PPUSH
15040: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15044: LD_VAR 0 2
15048: PPUSH
15049: LD_INT 22
15051: PUSH
15052: LD_OWVAR 2
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: PPUSH
15061: CALL_OW 69
15065: PPUSH
15066: LD_VAR 0 2
15070: PPUSH
15071: CALL_OW 74
15075: PPUSH
15076: CALL_OW 115
// until IsDead ( un ) ;
15080: LD_VAR 0 2
15084: PPUSH
15085: CALL_OW 301
15089: IFFALSE 15037
// end ;
15091: PPOPN 2
15093: END
// every 0 0$1 trigger StreamModeActive and sStu do
15094: LD_EXP 26
15098: PUSH
15099: LD_EXP 65
15103: AND
15104: IFFALSE 15120
15106: GO 15108
15108: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15109: LD_STRING displayStucuk();
15111: PPUSH
15112: CALL_OW 559
// ResetFog ;
15116: CALL_OW 335
// end ;
15120: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15121: LD_EXP 26
15125: PUSH
15126: LD_EXP 58
15130: AND
15131: IFFALSE 15272
15133: GO 15135
15135: DISABLE
15136: LD_INT 0
15138: PPUSH
15139: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15140: LD_ADDR_VAR 0 2
15144: PUSH
15145: LD_INT 22
15147: PUSH
15148: LD_OWVAR 2
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: PUSH
15157: LD_INT 21
15159: PUSH
15160: LD_INT 1
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: PPUSH
15171: CALL_OW 69
15175: ST_TO_ADDR
// if not tmp then
15176: LD_VAR 0 2
15180: NOT
15181: IFFALSE 15185
// exit ;
15183: GO 15272
// un := tmp [ rand ( 1 , tmp ) ] ;
15185: LD_ADDR_VAR 0 1
15189: PUSH
15190: LD_VAR 0 2
15194: PUSH
15195: LD_INT 1
15197: PPUSH
15198: LD_VAR 0 2
15202: PPUSH
15203: CALL_OW 12
15207: ARRAY
15208: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15209: LD_VAR 0 1
15213: PPUSH
15214: LD_INT 0
15216: PPUSH
15217: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15221: LD_VAR 0 1
15225: PPUSH
15226: LD_OWVAR 3
15230: PUSH
15231: LD_VAR 0 1
15235: DIFF
15236: PPUSH
15237: LD_VAR 0 1
15241: PPUSH
15242: CALL_OW 74
15246: PPUSH
15247: CALL_OW 115
// wait ( 0 0$20 ) ;
15251: LD_INT 700
15253: PPUSH
15254: CALL_OW 67
// SetSide ( un , your_side ) ;
15258: LD_VAR 0 1
15262: PPUSH
15263: LD_OWVAR 2
15267: PPUSH
15268: CALL_OW 235
// end ;
15272: PPOPN 2
15274: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15275: LD_EXP 26
15279: PUSH
15280: LD_EXP 59
15284: AND
15285: IFFALSE 15391
15287: GO 15289
15289: DISABLE
15290: LD_INT 0
15292: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15293: LD_ADDR_VAR 0 1
15297: PUSH
15298: LD_INT 22
15300: PUSH
15301: LD_OWVAR 2
15305: PUSH
15306: EMPTY
15307: LIST
15308: LIST
15309: PUSH
15310: LD_INT 2
15312: PUSH
15313: LD_INT 30
15315: PUSH
15316: LD_INT 0
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: PUSH
15323: LD_INT 30
15325: PUSH
15326: LD_INT 1
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: LIST
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PPUSH
15342: CALL_OW 69
15346: ST_TO_ADDR
// if not depot then
15347: LD_VAR 0 1
15351: NOT
15352: IFFALSE 15356
// exit ;
15354: GO 15391
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15356: LD_VAR 0 1
15360: PUSH
15361: LD_INT 1
15363: ARRAY
15364: PPUSH
15365: CALL_OW 250
15369: PPUSH
15370: LD_VAR 0 1
15374: PUSH
15375: LD_INT 1
15377: ARRAY
15378: PPUSH
15379: CALL_OW 251
15383: PPUSH
15384: LD_INT 70
15386: PPUSH
15387: CALL_OW 495
// end ;
15391: PPOPN 1
15393: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15394: LD_EXP 26
15398: PUSH
15399: LD_EXP 60
15403: AND
15404: IFFALSE 15615
15406: GO 15408
15408: DISABLE
15409: LD_INT 0
15411: PPUSH
15412: PPUSH
15413: PPUSH
15414: PPUSH
15415: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15416: LD_ADDR_VAR 0 5
15420: PUSH
15421: LD_INT 22
15423: PUSH
15424: LD_OWVAR 2
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: LD_INT 21
15435: PUSH
15436: LD_INT 1
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: PPUSH
15447: CALL_OW 69
15451: ST_TO_ADDR
// if not tmp then
15452: LD_VAR 0 5
15456: NOT
15457: IFFALSE 15461
// exit ;
15459: GO 15615
// for i in tmp do
15461: LD_ADDR_VAR 0 1
15465: PUSH
15466: LD_VAR 0 5
15470: PUSH
15471: FOR_IN
15472: IFFALSE 15613
// begin d := rand ( 0 , 5 ) ;
15474: LD_ADDR_VAR 0 4
15478: PUSH
15479: LD_INT 0
15481: PPUSH
15482: LD_INT 5
15484: PPUSH
15485: CALL_OW 12
15489: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15490: LD_ADDR_VAR 0 2
15494: PUSH
15495: LD_VAR 0 1
15499: PPUSH
15500: CALL_OW 250
15504: PPUSH
15505: LD_VAR 0 4
15509: PPUSH
15510: LD_INT 3
15512: PPUSH
15513: LD_INT 12
15515: PPUSH
15516: CALL_OW 12
15520: PPUSH
15521: CALL_OW 272
15525: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15526: LD_ADDR_VAR 0 3
15530: PUSH
15531: LD_VAR 0 1
15535: PPUSH
15536: CALL_OW 251
15540: PPUSH
15541: LD_VAR 0 4
15545: PPUSH
15546: LD_INT 3
15548: PPUSH
15549: LD_INT 12
15551: PPUSH
15552: CALL_OW 12
15556: PPUSH
15557: CALL_OW 273
15561: ST_TO_ADDR
// if ValidHex ( x , y ) then
15562: LD_VAR 0 2
15566: PPUSH
15567: LD_VAR 0 3
15571: PPUSH
15572: CALL_OW 488
15576: IFFALSE 15611
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15578: LD_VAR 0 1
15582: PPUSH
15583: LD_VAR 0 2
15587: PPUSH
15588: LD_VAR 0 3
15592: PPUSH
15593: LD_INT 3
15595: PPUSH
15596: LD_INT 6
15598: PPUSH
15599: CALL_OW 12
15603: PPUSH
15604: LD_INT 1
15606: PPUSH
15607: CALL_OW 483
// end ;
15611: GO 15471
15613: POP
15614: POP
// end ;
15615: PPOPN 5
15617: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15618: LD_EXP 26
15622: PUSH
15623: LD_EXP 61
15627: AND
15628: IFFALSE 15722
15630: GO 15632
15632: DISABLE
15633: LD_INT 0
15635: PPUSH
15636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15637: LD_ADDR_VAR 0 2
15641: PUSH
15642: LD_INT 22
15644: PUSH
15645: LD_OWVAR 2
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: PUSH
15654: LD_INT 32
15656: PUSH
15657: LD_INT 1
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: PUSH
15664: LD_INT 21
15666: PUSH
15667: LD_INT 2
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PUSH
15674: EMPTY
15675: LIST
15676: LIST
15677: LIST
15678: PPUSH
15679: CALL_OW 69
15683: ST_TO_ADDR
// if not tmp then
15684: LD_VAR 0 2
15688: NOT
15689: IFFALSE 15693
// exit ;
15691: GO 15722
// for i in tmp do
15693: LD_ADDR_VAR 0 1
15697: PUSH
15698: LD_VAR 0 2
15702: PUSH
15703: FOR_IN
15704: IFFALSE 15720
// SetFuel ( i , 0 ) ;
15706: LD_VAR 0 1
15710: PPUSH
15711: LD_INT 0
15713: PPUSH
15714: CALL_OW 240
15718: GO 15703
15720: POP
15721: POP
// end ;
15722: PPOPN 2
15724: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15725: LD_EXP 26
15729: PUSH
15730: LD_EXP 62
15734: AND
15735: IFFALSE 15801
15737: GO 15739
15739: DISABLE
15740: LD_INT 0
15742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15743: LD_ADDR_VAR 0 1
15747: PUSH
15748: LD_INT 22
15750: PUSH
15751: LD_OWVAR 2
15755: PUSH
15756: EMPTY
15757: LIST
15758: LIST
15759: PUSH
15760: LD_INT 30
15762: PUSH
15763: LD_INT 29
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: PPUSH
15774: CALL_OW 69
15778: ST_TO_ADDR
// if not tmp then
15779: LD_VAR 0 1
15783: NOT
15784: IFFALSE 15788
// exit ;
15786: GO 15801
// DestroyUnit ( tmp [ 1 ] ) ;
15788: LD_VAR 0 1
15792: PUSH
15793: LD_INT 1
15795: ARRAY
15796: PPUSH
15797: CALL_OW 65
// end ;
15801: PPOPN 1
15803: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15804: LD_EXP 26
15808: PUSH
15809: LD_EXP 64
15813: AND
15814: IFFALSE 15943
15816: GO 15818
15818: DISABLE
15819: LD_INT 0
15821: PPUSH
// begin uc_side := 0 ;
15822: LD_ADDR_OWVAR 20
15826: PUSH
15827: LD_INT 0
15829: ST_TO_ADDR
// uc_nation := nation_arabian ;
15830: LD_ADDR_OWVAR 21
15834: PUSH
15835: LD_INT 2
15837: ST_TO_ADDR
// hc_gallery :=  ;
15838: LD_ADDR_OWVAR 33
15842: PUSH
15843: LD_STRING 
15845: ST_TO_ADDR
// hc_name :=  ;
15846: LD_ADDR_OWVAR 26
15850: PUSH
15851: LD_STRING 
15853: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15854: LD_INT 1
15856: PPUSH
15857: LD_INT 11
15859: PPUSH
15860: LD_INT 10
15862: PPUSH
15863: CALL_OW 380
// un := CreateHuman ;
15867: LD_ADDR_VAR 0 1
15871: PUSH
15872: CALL_OW 44
15876: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15877: LD_VAR 0 1
15881: PPUSH
15882: LD_INT 1
15884: PPUSH
15885: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15889: LD_INT 35
15891: PPUSH
15892: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15896: LD_VAR 0 1
15900: PPUSH
15901: LD_INT 22
15903: PUSH
15904: LD_OWVAR 2
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: PPUSH
15913: CALL_OW 69
15917: PPUSH
15918: LD_VAR 0 1
15922: PPUSH
15923: CALL_OW 74
15927: PPUSH
15928: CALL_OW 115
// until IsDead ( un ) ;
15932: LD_VAR 0 1
15936: PPUSH
15937: CALL_OW 301
15941: IFFALSE 15889
// end ;
15943: PPOPN 1
15945: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15946: LD_EXP 26
15950: PUSH
15951: LD_EXP 66
15955: AND
15956: IFFALSE 15968
15958: GO 15960
15960: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15961: LD_STRING earthquake(getX(game), 0, 32)
15963: PPUSH
15964: CALL_OW 559
15968: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15969: LD_EXP 26
15973: PUSH
15974: LD_EXP 67
15978: AND
15979: IFFALSE 16070
15981: GO 15983
15983: DISABLE
15984: LD_INT 0
15986: PPUSH
// begin enable ;
15987: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15988: LD_ADDR_VAR 0 1
15992: PUSH
15993: LD_INT 22
15995: PUSH
15996: LD_OWVAR 2
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: PUSH
16005: LD_INT 21
16007: PUSH
16008: LD_INT 2
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PUSH
16015: LD_INT 33
16017: PUSH
16018: LD_INT 3
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: LIST
16029: PPUSH
16030: CALL_OW 69
16034: ST_TO_ADDR
// if not tmp then
16035: LD_VAR 0 1
16039: NOT
16040: IFFALSE 16044
// exit ;
16042: GO 16070
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16044: LD_VAR 0 1
16048: PUSH
16049: LD_INT 1
16051: PPUSH
16052: LD_VAR 0 1
16056: PPUSH
16057: CALL_OW 12
16061: ARRAY
16062: PPUSH
16063: LD_INT 1
16065: PPUSH
16066: CALL_OW 234
// end ;
16070: PPOPN 1
16072: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16073: LD_EXP 26
16077: PUSH
16078: LD_EXP 68
16082: AND
16083: IFFALSE 16224
16085: GO 16087
16087: DISABLE
16088: LD_INT 0
16090: PPUSH
16091: PPUSH
16092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16093: LD_ADDR_VAR 0 3
16097: PUSH
16098: LD_INT 22
16100: PUSH
16101: LD_OWVAR 2
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PUSH
16110: LD_INT 25
16112: PUSH
16113: LD_INT 1
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: PUSH
16120: EMPTY
16121: LIST
16122: LIST
16123: PPUSH
16124: CALL_OW 69
16128: ST_TO_ADDR
// if not tmp then
16129: LD_VAR 0 3
16133: NOT
16134: IFFALSE 16138
// exit ;
16136: GO 16224
// un := tmp [ rand ( 1 , tmp ) ] ;
16138: LD_ADDR_VAR 0 2
16142: PUSH
16143: LD_VAR 0 3
16147: PUSH
16148: LD_INT 1
16150: PPUSH
16151: LD_VAR 0 3
16155: PPUSH
16156: CALL_OW 12
16160: ARRAY
16161: ST_TO_ADDR
// if Crawls ( un ) then
16162: LD_VAR 0 2
16166: PPUSH
16167: CALL_OW 318
16171: IFFALSE 16182
// ComWalk ( un ) ;
16173: LD_VAR 0 2
16177: PPUSH
16178: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16182: LD_VAR 0 2
16186: PPUSH
16187: LD_INT 9
16189: PPUSH
16190: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16194: LD_INT 28
16196: PPUSH
16197: LD_OWVAR 2
16201: PPUSH
16202: LD_INT 2
16204: PPUSH
16205: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16209: LD_INT 29
16211: PPUSH
16212: LD_OWVAR 2
16216: PPUSH
16217: LD_INT 2
16219: PPUSH
16220: CALL_OW 322
// end ;
16224: PPOPN 3
16226: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16227: LD_EXP 26
16231: PUSH
16232: LD_EXP 69
16236: AND
16237: IFFALSE 16348
16239: GO 16241
16241: DISABLE
16242: LD_INT 0
16244: PPUSH
16245: PPUSH
16246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16247: LD_ADDR_VAR 0 3
16251: PUSH
16252: LD_INT 22
16254: PUSH
16255: LD_OWVAR 2
16259: PUSH
16260: EMPTY
16261: LIST
16262: LIST
16263: PUSH
16264: LD_INT 25
16266: PUSH
16267: LD_INT 1
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: PUSH
16274: EMPTY
16275: LIST
16276: LIST
16277: PPUSH
16278: CALL_OW 69
16282: ST_TO_ADDR
// if not tmp then
16283: LD_VAR 0 3
16287: NOT
16288: IFFALSE 16292
// exit ;
16290: GO 16348
// un := tmp [ rand ( 1 , tmp ) ] ;
16292: LD_ADDR_VAR 0 2
16296: PUSH
16297: LD_VAR 0 3
16301: PUSH
16302: LD_INT 1
16304: PPUSH
16305: LD_VAR 0 3
16309: PPUSH
16310: CALL_OW 12
16314: ARRAY
16315: ST_TO_ADDR
// if Crawls ( un ) then
16316: LD_VAR 0 2
16320: PPUSH
16321: CALL_OW 318
16325: IFFALSE 16336
// ComWalk ( un ) ;
16327: LD_VAR 0 2
16331: PPUSH
16332: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16336: LD_VAR 0 2
16340: PPUSH
16341: LD_INT 8
16343: PPUSH
16344: CALL_OW 336
// end ;
16348: PPOPN 3
16350: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16351: LD_EXP 26
16355: PUSH
16356: LD_EXP 70
16360: AND
16361: IFFALSE 16505
16363: GO 16365
16365: DISABLE
16366: LD_INT 0
16368: PPUSH
16369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16370: LD_ADDR_VAR 0 2
16374: PUSH
16375: LD_INT 22
16377: PUSH
16378: LD_OWVAR 2
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PUSH
16387: LD_INT 21
16389: PUSH
16390: LD_INT 2
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: PUSH
16397: LD_INT 2
16399: PUSH
16400: LD_INT 34
16402: PUSH
16403: LD_INT 12
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: PUSH
16410: LD_INT 34
16412: PUSH
16413: LD_INT 51
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: PUSH
16420: LD_INT 34
16422: PUSH
16423: LD_INT 32
16425: PUSH
16426: EMPTY
16427: LIST
16428: LIST
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: PUSH
16436: EMPTY
16437: LIST
16438: LIST
16439: LIST
16440: PPUSH
16441: CALL_OW 69
16445: ST_TO_ADDR
// if not tmp then
16446: LD_VAR 0 2
16450: NOT
16451: IFFALSE 16455
// exit ;
16453: GO 16505
// for i in tmp do
16455: LD_ADDR_VAR 0 1
16459: PUSH
16460: LD_VAR 0 2
16464: PUSH
16465: FOR_IN
16466: IFFALSE 16503
// if GetCargo ( i , mat_artifact ) = 0 then
16468: LD_VAR 0 1
16472: PPUSH
16473: LD_INT 4
16475: PPUSH
16476: CALL_OW 289
16480: PUSH
16481: LD_INT 0
16483: EQUAL
16484: IFFALSE 16501
// SetCargo ( i , mat_siberit , 100 ) ;
16486: LD_VAR 0 1
16490: PPUSH
16491: LD_INT 3
16493: PPUSH
16494: LD_INT 100
16496: PPUSH
16497: CALL_OW 290
16501: GO 16465
16503: POP
16504: POP
// end ;
16505: PPOPN 2
16507: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16508: LD_EXP 26
16512: PUSH
16513: LD_EXP 71
16517: AND
16518: IFFALSE 16701
16520: GO 16522
16522: DISABLE
16523: LD_INT 0
16525: PPUSH
16526: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16527: LD_ADDR_VAR 0 2
16531: PUSH
16532: LD_INT 22
16534: PUSH
16535: LD_OWVAR 2
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PPUSH
16544: CALL_OW 69
16548: ST_TO_ADDR
// if not tmp then
16549: LD_VAR 0 2
16553: NOT
16554: IFFALSE 16558
// exit ;
16556: GO 16701
// for i := 1 to 2 do
16558: LD_ADDR_VAR 0 1
16562: PUSH
16563: DOUBLE
16564: LD_INT 1
16566: DEC
16567: ST_TO_ADDR
16568: LD_INT 2
16570: PUSH
16571: FOR_TO
16572: IFFALSE 16699
// begin uc_side := your_side ;
16574: LD_ADDR_OWVAR 20
16578: PUSH
16579: LD_OWVAR 2
16583: ST_TO_ADDR
// uc_nation := nation_american ;
16584: LD_ADDR_OWVAR 21
16588: PUSH
16589: LD_INT 1
16591: ST_TO_ADDR
// vc_chassis := us_morphling ;
16592: LD_ADDR_OWVAR 37
16596: PUSH
16597: LD_INT 5
16599: ST_TO_ADDR
// vc_engine := engine_siberite ;
16600: LD_ADDR_OWVAR 39
16604: PUSH
16605: LD_INT 3
16607: ST_TO_ADDR
// vc_control := control_computer ;
16608: LD_ADDR_OWVAR 38
16612: PUSH
16613: LD_INT 3
16615: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16616: LD_ADDR_OWVAR 40
16620: PUSH
16621: LD_INT 10
16623: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16624: LD_VAR 0 2
16628: PUSH
16629: LD_INT 1
16631: ARRAY
16632: PPUSH
16633: CALL_OW 310
16637: NOT
16638: IFFALSE 16685
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16640: CALL_OW 45
16644: PPUSH
16645: LD_VAR 0 2
16649: PUSH
16650: LD_INT 1
16652: ARRAY
16653: PPUSH
16654: CALL_OW 250
16658: PPUSH
16659: LD_VAR 0 2
16663: PUSH
16664: LD_INT 1
16666: ARRAY
16667: PPUSH
16668: CALL_OW 251
16672: PPUSH
16673: LD_INT 12
16675: PPUSH
16676: LD_INT 1
16678: PPUSH
16679: CALL_OW 50
16683: GO 16697
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16685: CALL_OW 45
16689: PPUSH
16690: LD_INT 1
16692: PPUSH
16693: CALL_OW 51
// end ;
16697: GO 16571
16699: POP
16700: POP
// end ;
16701: PPOPN 2
16703: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16704: LD_EXP 26
16708: PUSH
16709: LD_EXP 72
16713: AND
16714: IFFALSE 16936
16716: GO 16718
16718: DISABLE
16719: LD_INT 0
16721: PPUSH
16722: PPUSH
16723: PPUSH
16724: PPUSH
16725: PPUSH
16726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16727: LD_ADDR_VAR 0 6
16731: PUSH
16732: LD_INT 22
16734: PUSH
16735: LD_OWVAR 2
16739: PUSH
16740: EMPTY
16741: LIST
16742: LIST
16743: PUSH
16744: LD_INT 21
16746: PUSH
16747: LD_INT 1
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: PUSH
16754: LD_INT 3
16756: PUSH
16757: LD_INT 23
16759: PUSH
16760: LD_INT 0
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: LIST
16775: PPUSH
16776: CALL_OW 69
16780: ST_TO_ADDR
// if not tmp then
16781: LD_VAR 0 6
16785: NOT
16786: IFFALSE 16790
// exit ;
16788: GO 16936
// s1 := rand ( 1 , 4 ) ;
16790: LD_ADDR_VAR 0 2
16794: PUSH
16795: LD_INT 1
16797: PPUSH
16798: LD_INT 4
16800: PPUSH
16801: CALL_OW 12
16805: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16806: LD_ADDR_VAR 0 4
16810: PUSH
16811: LD_VAR 0 6
16815: PUSH
16816: LD_INT 1
16818: ARRAY
16819: PPUSH
16820: LD_VAR 0 2
16824: PPUSH
16825: CALL_OW 259
16829: ST_TO_ADDR
// if s1 = 1 then
16830: LD_VAR 0 2
16834: PUSH
16835: LD_INT 1
16837: EQUAL
16838: IFFALSE 16858
// s2 := rand ( 2 , 4 ) else
16840: LD_ADDR_VAR 0 3
16844: PUSH
16845: LD_INT 2
16847: PPUSH
16848: LD_INT 4
16850: PPUSH
16851: CALL_OW 12
16855: ST_TO_ADDR
16856: GO 16866
// s2 := 1 ;
16858: LD_ADDR_VAR 0 3
16862: PUSH
16863: LD_INT 1
16865: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16866: LD_ADDR_VAR 0 5
16870: PUSH
16871: LD_VAR 0 6
16875: PUSH
16876: LD_INT 1
16878: ARRAY
16879: PPUSH
16880: LD_VAR 0 3
16884: PPUSH
16885: CALL_OW 259
16889: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16890: LD_VAR 0 6
16894: PUSH
16895: LD_INT 1
16897: ARRAY
16898: PPUSH
16899: LD_VAR 0 2
16903: PPUSH
16904: LD_VAR 0 5
16908: PPUSH
16909: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16913: LD_VAR 0 6
16917: PUSH
16918: LD_INT 1
16920: ARRAY
16921: PPUSH
16922: LD_VAR 0 3
16926: PPUSH
16927: LD_VAR 0 4
16931: PPUSH
16932: CALL_OW 237
// end ;
16936: PPOPN 6
16938: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16939: LD_EXP 26
16943: PUSH
16944: LD_EXP 73
16948: AND
16949: IFFALSE 17028
16951: GO 16953
16953: DISABLE
16954: LD_INT 0
16956: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16957: LD_ADDR_VAR 0 1
16961: PUSH
16962: LD_INT 22
16964: PUSH
16965: LD_OWVAR 2
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: PUSH
16974: LD_INT 30
16976: PUSH
16977: LD_INT 3
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: PPUSH
16988: CALL_OW 69
16992: ST_TO_ADDR
// if not tmp then
16993: LD_VAR 0 1
16997: NOT
16998: IFFALSE 17002
// exit ;
17000: GO 17028
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17002: LD_VAR 0 1
17006: PUSH
17007: LD_INT 1
17009: PPUSH
17010: LD_VAR 0 1
17014: PPUSH
17015: CALL_OW 12
17019: ARRAY
17020: PPUSH
17021: LD_INT 1
17023: PPUSH
17024: CALL_OW 234
// end ;
17028: PPOPN 1
17030: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17031: LD_EXP 26
17035: PUSH
17036: LD_EXP 74
17040: AND
17041: IFFALSE 17153
17043: GO 17045
17045: DISABLE
17046: LD_INT 0
17048: PPUSH
17049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17050: LD_ADDR_VAR 0 2
17054: PUSH
17055: LD_INT 22
17057: PUSH
17058: LD_OWVAR 2
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PUSH
17067: LD_INT 2
17069: PUSH
17070: LD_INT 30
17072: PUSH
17073: LD_INT 27
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PUSH
17080: LD_INT 30
17082: PUSH
17083: LD_INT 26
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: PUSH
17090: LD_INT 30
17092: PUSH
17093: LD_INT 28
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PPUSH
17110: CALL_OW 69
17114: ST_TO_ADDR
// if not tmp then
17115: LD_VAR 0 2
17119: NOT
17120: IFFALSE 17124
// exit ;
17122: GO 17153
// for i in tmp do
17124: LD_ADDR_VAR 0 1
17128: PUSH
17129: LD_VAR 0 2
17133: PUSH
17134: FOR_IN
17135: IFFALSE 17151
// SetLives ( i , 1 ) ;
17137: LD_VAR 0 1
17141: PPUSH
17142: LD_INT 1
17144: PPUSH
17145: CALL_OW 234
17149: GO 17134
17151: POP
17152: POP
// end ;
17153: PPOPN 2
17155: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17156: LD_EXP 26
17160: PUSH
17161: LD_EXP 75
17165: AND
17166: IFFALSE 17453
17168: GO 17170
17170: DISABLE
17171: LD_INT 0
17173: PPUSH
17174: PPUSH
17175: PPUSH
// begin i := rand ( 1 , 7 ) ;
17176: LD_ADDR_VAR 0 1
17180: PUSH
17181: LD_INT 1
17183: PPUSH
17184: LD_INT 7
17186: PPUSH
17187: CALL_OW 12
17191: ST_TO_ADDR
// case i of 1 :
17192: LD_VAR 0 1
17196: PUSH
17197: LD_INT 1
17199: DOUBLE
17200: EQUAL
17201: IFTRUE 17205
17203: GO 17215
17205: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17206: LD_STRING earthquake(getX(game), 0, 32)
17208: PPUSH
17209: CALL_OW 559
17213: GO 17453
17215: LD_INT 2
17217: DOUBLE
17218: EQUAL
17219: IFTRUE 17223
17221: GO 17237
17223: POP
// begin ToLua ( displayStucuk(); ) ;
17224: LD_STRING displayStucuk();
17226: PPUSH
17227: CALL_OW 559
// ResetFog ;
17231: CALL_OW 335
// end ; 3 :
17235: GO 17453
17237: LD_INT 3
17239: DOUBLE
17240: EQUAL
17241: IFTRUE 17245
17243: GO 17349
17245: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17246: LD_ADDR_VAR 0 2
17250: PUSH
17251: LD_INT 22
17253: PUSH
17254: LD_OWVAR 2
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: PUSH
17263: LD_INT 25
17265: PUSH
17266: LD_INT 1
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PPUSH
17277: CALL_OW 69
17281: ST_TO_ADDR
// if not tmp then
17282: LD_VAR 0 2
17286: NOT
17287: IFFALSE 17291
// exit ;
17289: GO 17453
// un := tmp [ rand ( 1 , tmp ) ] ;
17291: LD_ADDR_VAR 0 3
17295: PUSH
17296: LD_VAR 0 2
17300: PUSH
17301: LD_INT 1
17303: PPUSH
17304: LD_VAR 0 2
17308: PPUSH
17309: CALL_OW 12
17313: ARRAY
17314: ST_TO_ADDR
// if Crawls ( un ) then
17315: LD_VAR 0 3
17319: PPUSH
17320: CALL_OW 318
17324: IFFALSE 17335
// ComWalk ( un ) ;
17326: LD_VAR 0 3
17330: PPUSH
17331: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17335: LD_VAR 0 3
17339: PPUSH
17340: LD_INT 8
17342: PPUSH
17343: CALL_OW 336
// end ; 4 :
17347: GO 17453
17349: LD_INT 4
17351: DOUBLE
17352: EQUAL
17353: IFTRUE 17357
17355: GO 17431
17357: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17358: LD_ADDR_VAR 0 2
17362: PUSH
17363: LD_INT 22
17365: PUSH
17366: LD_OWVAR 2
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PUSH
17375: LD_INT 30
17377: PUSH
17378: LD_INT 29
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: PPUSH
17389: CALL_OW 69
17393: ST_TO_ADDR
// if not tmp then
17394: LD_VAR 0 2
17398: NOT
17399: IFFALSE 17403
// exit ;
17401: GO 17453
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17403: LD_VAR 0 2
17407: PUSH
17408: LD_INT 1
17410: ARRAY
17411: PPUSH
17412: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17416: LD_VAR 0 2
17420: PUSH
17421: LD_INT 1
17423: ARRAY
17424: PPUSH
17425: CALL_OW 65
// end ; 5 .. 7 :
17429: GO 17453
17431: LD_INT 5
17433: DOUBLE
17434: GREATEREQUAL
17435: IFFALSE 17443
17437: LD_INT 7
17439: DOUBLE
17440: LESSEQUAL
17441: IFTRUE 17445
17443: GO 17452
17445: POP
// StreamSibBomb ; end ;
17446: CALL 13690 0 0
17450: GO 17453
17452: POP
// end ;
17453: PPOPN 3
17455: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17456: LD_EXP 26
17460: PUSH
17461: LD_EXP 76
17465: AND
17466: IFFALSE 17622
17468: GO 17470
17470: DISABLE
17471: LD_INT 0
17473: PPUSH
17474: PPUSH
17475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17476: LD_ADDR_VAR 0 2
17480: PUSH
17481: LD_INT 81
17483: PUSH
17484: LD_OWVAR 2
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PUSH
17493: LD_INT 2
17495: PUSH
17496: LD_INT 21
17498: PUSH
17499: LD_INT 1
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: PUSH
17506: LD_INT 21
17508: PUSH
17509: LD_INT 2
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: LIST
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PPUSH
17525: CALL_OW 69
17529: ST_TO_ADDR
// if not tmp then
17530: LD_VAR 0 2
17534: NOT
17535: IFFALSE 17539
// exit ;
17537: GO 17622
// p := 0 ;
17539: LD_ADDR_VAR 0 3
17543: PUSH
17544: LD_INT 0
17546: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17547: LD_INT 35
17549: PPUSH
17550: CALL_OW 67
// p := p + 1 ;
17554: LD_ADDR_VAR 0 3
17558: PUSH
17559: LD_VAR 0 3
17563: PUSH
17564: LD_INT 1
17566: PLUS
17567: ST_TO_ADDR
// for i in tmp do
17568: LD_ADDR_VAR 0 1
17572: PUSH
17573: LD_VAR 0 2
17577: PUSH
17578: FOR_IN
17579: IFFALSE 17610
// if GetLives ( i ) < 1000 then
17581: LD_VAR 0 1
17585: PPUSH
17586: CALL_OW 256
17590: PUSH
17591: LD_INT 1000
17593: LESS
17594: IFFALSE 17608
// SetLives ( i , 1000 ) ;
17596: LD_VAR 0 1
17600: PPUSH
17601: LD_INT 1000
17603: PPUSH
17604: CALL_OW 234
17608: GO 17578
17610: POP
17611: POP
// until p > 20 ;
17612: LD_VAR 0 3
17616: PUSH
17617: LD_INT 20
17619: GREATER
17620: IFFALSE 17547
// end ;
17622: PPOPN 3
17624: END
// every 0 0$1 trigger StreamModeActive and sTime do
17625: LD_EXP 26
17629: PUSH
17630: LD_EXP 77
17634: AND
17635: IFFALSE 17670
17637: GO 17639
17639: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17640: LD_INT 28
17642: PPUSH
17643: LD_OWVAR 2
17647: PPUSH
17648: LD_INT 2
17650: PPUSH
17651: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17655: LD_INT 30
17657: PPUSH
17658: LD_OWVAR 2
17662: PPUSH
17663: LD_INT 2
17665: PPUSH
17666: CALL_OW 322
// end ;
17670: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17671: LD_EXP 26
17675: PUSH
17676: LD_EXP 78
17680: AND
17681: IFFALSE 17802
17683: GO 17685
17685: DISABLE
17686: LD_INT 0
17688: PPUSH
17689: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17690: LD_ADDR_VAR 0 2
17694: PUSH
17695: LD_INT 22
17697: PUSH
17698: LD_OWVAR 2
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: PUSH
17707: LD_INT 21
17709: PUSH
17710: LD_INT 1
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: LD_INT 3
17719: PUSH
17720: LD_INT 23
17722: PUSH
17723: LD_INT 0
17725: PUSH
17726: EMPTY
17727: LIST
17728: LIST
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: LIST
17738: PPUSH
17739: CALL_OW 69
17743: ST_TO_ADDR
// if not tmp then
17744: LD_VAR 0 2
17748: NOT
17749: IFFALSE 17753
// exit ;
17751: GO 17802
// for i in tmp do
17753: LD_ADDR_VAR 0 1
17757: PUSH
17758: LD_VAR 0 2
17762: PUSH
17763: FOR_IN
17764: IFFALSE 17800
// begin if Crawls ( i ) then
17766: LD_VAR 0 1
17770: PPUSH
17771: CALL_OW 318
17775: IFFALSE 17786
// ComWalk ( i ) ;
17777: LD_VAR 0 1
17781: PPUSH
17782: CALL_OW 138
// SetClass ( i , 2 ) ;
17786: LD_VAR 0 1
17790: PPUSH
17791: LD_INT 2
17793: PPUSH
17794: CALL_OW 336
// end ;
17798: GO 17763
17800: POP
17801: POP
// end ;
17802: PPOPN 2
17804: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17805: LD_EXP 26
17809: PUSH
17810: LD_EXP 79
17814: AND
17815: IFFALSE 18103
17817: GO 17819
17819: DISABLE
17820: LD_INT 0
17822: PPUSH
17823: PPUSH
17824: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17825: LD_OWVAR 2
17829: PPUSH
17830: LD_INT 9
17832: PPUSH
17833: LD_INT 1
17835: PPUSH
17836: LD_INT 1
17838: PPUSH
17839: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17843: LD_INT 9
17845: PPUSH
17846: LD_OWVAR 2
17850: PPUSH
17851: CALL_OW 343
// uc_side := 9 ;
17855: LD_ADDR_OWVAR 20
17859: PUSH
17860: LD_INT 9
17862: ST_TO_ADDR
// uc_nation := 2 ;
17863: LD_ADDR_OWVAR 21
17867: PUSH
17868: LD_INT 2
17870: ST_TO_ADDR
// hc_name := Dark Warrior ;
17871: LD_ADDR_OWVAR 26
17875: PUSH
17876: LD_STRING Dark Warrior
17878: ST_TO_ADDR
// hc_gallery :=  ;
17879: LD_ADDR_OWVAR 33
17883: PUSH
17884: LD_STRING 
17886: ST_TO_ADDR
// hc_noskilllimit := true ;
17887: LD_ADDR_OWVAR 76
17891: PUSH
17892: LD_INT 1
17894: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17895: LD_ADDR_OWVAR 31
17899: PUSH
17900: LD_INT 30
17902: PUSH
17903: LD_INT 30
17905: PUSH
17906: LD_INT 30
17908: PUSH
17909: LD_INT 30
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: ST_TO_ADDR
// un := CreateHuman ;
17918: LD_ADDR_VAR 0 3
17922: PUSH
17923: CALL_OW 44
17927: ST_TO_ADDR
// hc_noskilllimit := false ;
17928: LD_ADDR_OWVAR 76
17932: PUSH
17933: LD_INT 0
17935: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17936: LD_VAR 0 3
17940: PPUSH
17941: LD_INT 1
17943: PPUSH
17944: CALL_OW 51
// ToLua ( playRanger() ) ;
17948: LD_STRING playRanger()
17950: PPUSH
17951: CALL_OW 559
// p := 0 ;
17955: LD_ADDR_VAR 0 2
17959: PUSH
17960: LD_INT 0
17962: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17963: LD_INT 35
17965: PPUSH
17966: CALL_OW 67
// p := p + 1 ;
17970: LD_ADDR_VAR 0 2
17974: PUSH
17975: LD_VAR 0 2
17979: PUSH
17980: LD_INT 1
17982: PLUS
17983: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17984: LD_VAR 0 3
17988: PPUSH
17989: CALL_OW 256
17993: PUSH
17994: LD_INT 1000
17996: LESS
17997: IFFALSE 18011
// SetLives ( un , 1000 ) ;
17999: LD_VAR 0 3
18003: PPUSH
18004: LD_INT 1000
18006: PPUSH
18007: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18011: LD_VAR 0 3
18015: PPUSH
18016: LD_INT 81
18018: PUSH
18019: LD_OWVAR 2
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PUSH
18028: LD_INT 91
18030: PUSH
18031: LD_VAR 0 3
18035: PUSH
18036: LD_INT 30
18038: PUSH
18039: EMPTY
18040: LIST
18041: LIST
18042: LIST
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PPUSH
18048: CALL_OW 69
18052: PPUSH
18053: LD_VAR 0 3
18057: PPUSH
18058: CALL_OW 74
18062: PPUSH
18063: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
18067: LD_VAR 0 2
18071: PUSH
18072: LD_INT 80
18074: GREATER
18075: PUSH
18076: LD_VAR 0 3
18080: PPUSH
18081: CALL_OW 301
18085: OR
18086: IFFALSE 17963
// if un then
18088: LD_VAR 0 3
18092: IFFALSE 18103
// RemoveUnit ( un ) ;
18094: LD_VAR 0 3
18098: PPUSH
18099: CALL_OW 64
// end ;
18103: PPOPN 3
18105: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
18106: LD_EXP 80
18110: IFFALSE 18226
18112: GO 18114
18114: DISABLE
18115: LD_INT 0
18117: PPUSH
18118: PPUSH
18119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18120: LD_ADDR_VAR 0 2
18124: PUSH
18125: LD_INT 81
18127: PUSH
18128: LD_OWVAR 2
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 21
18139: PUSH
18140: LD_INT 1
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PPUSH
18151: CALL_OW 69
18155: ST_TO_ADDR
// ToLua ( playComputer() ) ;
18156: LD_STRING playComputer()
18158: PPUSH
18159: CALL_OW 559
// if not tmp then
18163: LD_VAR 0 2
18167: NOT
18168: IFFALSE 18172
// exit ;
18170: GO 18226
// for i in tmp do
18172: LD_ADDR_VAR 0 1
18176: PUSH
18177: LD_VAR 0 2
18181: PUSH
18182: FOR_IN
18183: IFFALSE 18224
// for j := 1 to 4 do
18185: LD_ADDR_VAR 0 3
18189: PUSH
18190: DOUBLE
18191: LD_INT 1
18193: DEC
18194: ST_TO_ADDR
18195: LD_INT 4
18197: PUSH
18198: FOR_TO
18199: IFFALSE 18220
// SetSkill ( i , j , 10 ) ;
18201: LD_VAR 0 1
18205: PPUSH
18206: LD_VAR 0 3
18210: PPUSH
18211: LD_INT 10
18213: PPUSH
18214: CALL_OW 237
18218: GO 18198
18220: POP
18221: POP
18222: GO 18182
18224: POP
18225: POP
// end ;
18226: PPOPN 3
18228: END
// every 0 0$1 trigger s30 do var i , tmp ;
18229: LD_EXP 81
18233: IFFALSE 18302
18235: GO 18237
18237: DISABLE
18238: LD_INT 0
18240: PPUSH
18241: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18242: LD_ADDR_VAR 0 2
18246: PUSH
18247: LD_INT 22
18249: PUSH
18250: LD_OWVAR 2
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: PPUSH
18259: CALL_OW 69
18263: ST_TO_ADDR
// if not tmp then
18264: LD_VAR 0 2
18268: NOT
18269: IFFALSE 18273
// exit ;
18271: GO 18302
// for i in tmp do
18273: LD_ADDR_VAR 0 1
18277: PUSH
18278: LD_VAR 0 2
18282: PUSH
18283: FOR_IN
18284: IFFALSE 18300
// SetLives ( i , 300 ) ;
18286: LD_VAR 0 1
18290: PPUSH
18291: LD_INT 300
18293: PPUSH
18294: CALL_OW 234
18298: GO 18283
18300: POP
18301: POP
// end ;
18302: PPOPN 2
18304: END
// every 0 0$1 trigger s60 do var i , tmp ;
18305: LD_EXP 82
18309: IFFALSE 18378
18311: GO 18313
18313: DISABLE
18314: LD_INT 0
18316: PPUSH
18317: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18318: LD_ADDR_VAR 0 2
18322: PUSH
18323: LD_INT 22
18325: PUSH
18326: LD_OWVAR 2
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PPUSH
18335: CALL_OW 69
18339: ST_TO_ADDR
// if not tmp then
18340: LD_VAR 0 2
18344: NOT
18345: IFFALSE 18349
// exit ;
18347: GO 18378
// for i in tmp do
18349: LD_ADDR_VAR 0 1
18353: PUSH
18354: LD_VAR 0 2
18358: PUSH
18359: FOR_IN
18360: IFFALSE 18376
// SetLives ( i , 600 ) ;
18362: LD_VAR 0 1
18366: PPUSH
18367: LD_INT 600
18369: PPUSH
18370: CALL_OW 234
18374: GO 18359
18376: POP
18377: POP
// end ;
18378: PPOPN 2
18380: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18381: LD_INT 0
18383: PPUSH
// case cmd of 301 :
18384: LD_VAR 0 1
18388: PUSH
18389: LD_INT 301
18391: DOUBLE
18392: EQUAL
18393: IFTRUE 18397
18395: GO 18429
18397: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18398: LD_VAR 0 6
18402: PPUSH
18403: LD_VAR 0 7
18407: PPUSH
18408: LD_VAR 0 8
18412: PPUSH
18413: LD_VAR 0 4
18417: PPUSH
18418: LD_VAR 0 5
18422: PPUSH
18423: CALL 19630 0 5
18427: GO 18550
18429: LD_INT 302
18431: DOUBLE
18432: EQUAL
18433: IFTRUE 18437
18435: GO 18474
18437: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18438: LD_VAR 0 6
18442: PPUSH
18443: LD_VAR 0 7
18447: PPUSH
18448: LD_VAR 0 8
18452: PPUSH
18453: LD_VAR 0 9
18457: PPUSH
18458: LD_VAR 0 4
18462: PPUSH
18463: LD_VAR 0 5
18467: PPUSH
18468: CALL 19721 0 6
18472: GO 18550
18474: LD_INT 303
18476: DOUBLE
18477: EQUAL
18478: IFTRUE 18482
18480: GO 18519
18482: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18483: LD_VAR 0 6
18487: PPUSH
18488: LD_VAR 0 7
18492: PPUSH
18493: LD_VAR 0 8
18497: PPUSH
18498: LD_VAR 0 9
18502: PPUSH
18503: LD_VAR 0 4
18507: PPUSH
18508: LD_VAR 0 5
18512: PPUSH
18513: CALL 18555 0 6
18517: GO 18550
18519: LD_INT 304
18521: DOUBLE
18522: EQUAL
18523: IFTRUE 18527
18525: GO 18549
18527: POP
// hHackTeleport ( unit , x , y ) ; end ;
18528: LD_VAR 0 2
18532: PPUSH
18533: LD_VAR 0 4
18537: PPUSH
18538: LD_VAR 0 5
18542: PPUSH
18543: CALL 20314 0 3
18547: GO 18550
18549: POP
// end ;
18550: LD_VAR 0 12
18554: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18555: LD_INT 0
18557: PPUSH
18558: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18559: LD_VAR 0 1
18563: PUSH
18564: LD_INT 1
18566: LESS
18567: PUSH
18568: LD_VAR 0 1
18572: PUSH
18573: LD_INT 3
18575: GREATER
18576: OR
18577: PUSH
18578: LD_VAR 0 5
18582: PPUSH
18583: LD_VAR 0 6
18587: PPUSH
18588: CALL_OW 428
18592: OR
18593: IFFALSE 18597
// exit ;
18595: GO 19317
// uc_side := your_side ;
18597: LD_ADDR_OWVAR 20
18601: PUSH
18602: LD_OWVAR 2
18606: ST_TO_ADDR
// uc_nation := nation ;
18607: LD_ADDR_OWVAR 21
18611: PUSH
18612: LD_VAR 0 1
18616: ST_TO_ADDR
// bc_level = 1 ;
18617: LD_ADDR_OWVAR 43
18621: PUSH
18622: LD_INT 1
18624: ST_TO_ADDR
// case btype of 1 :
18625: LD_VAR 0 2
18629: PUSH
18630: LD_INT 1
18632: DOUBLE
18633: EQUAL
18634: IFTRUE 18638
18636: GO 18649
18638: POP
// bc_type := b_depot ; 2 :
18639: LD_ADDR_OWVAR 42
18643: PUSH
18644: LD_INT 0
18646: ST_TO_ADDR
18647: GO 19261
18649: LD_INT 2
18651: DOUBLE
18652: EQUAL
18653: IFTRUE 18657
18655: GO 18668
18657: POP
// bc_type := b_warehouse ; 3 :
18658: LD_ADDR_OWVAR 42
18662: PUSH
18663: LD_INT 1
18665: ST_TO_ADDR
18666: GO 19261
18668: LD_INT 3
18670: DOUBLE
18671: EQUAL
18672: IFTRUE 18676
18674: GO 18687
18676: POP
// bc_type := b_lab ; 4 .. 9 :
18677: LD_ADDR_OWVAR 42
18681: PUSH
18682: LD_INT 6
18684: ST_TO_ADDR
18685: GO 19261
18687: LD_INT 4
18689: DOUBLE
18690: GREATEREQUAL
18691: IFFALSE 18699
18693: LD_INT 9
18695: DOUBLE
18696: LESSEQUAL
18697: IFTRUE 18701
18699: GO 18753
18701: POP
// begin bc_type := b_lab_half ;
18702: LD_ADDR_OWVAR 42
18706: PUSH
18707: LD_INT 7
18709: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18710: LD_ADDR_OWVAR 44
18714: PUSH
18715: LD_INT 10
18717: PUSH
18718: LD_INT 11
18720: PUSH
18721: LD_INT 12
18723: PUSH
18724: LD_INT 15
18726: PUSH
18727: LD_INT 14
18729: PUSH
18730: LD_INT 13
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: PUSH
18741: LD_VAR 0 2
18745: PUSH
18746: LD_INT 3
18748: MINUS
18749: ARRAY
18750: ST_TO_ADDR
// end ; 10 .. 13 :
18751: GO 19261
18753: LD_INT 10
18755: DOUBLE
18756: GREATEREQUAL
18757: IFFALSE 18765
18759: LD_INT 13
18761: DOUBLE
18762: LESSEQUAL
18763: IFTRUE 18767
18765: GO 18844
18767: POP
// begin bc_type := b_lab_full ;
18768: LD_ADDR_OWVAR 42
18772: PUSH
18773: LD_INT 8
18775: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18776: LD_ADDR_OWVAR 44
18780: PUSH
18781: LD_INT 10
18783: PUSH
18784: LD_INT 12
18786: PUSH
18787: LD_INT 14
18789: PUSH
18790: LD_INT 13
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: PUSH
18799: LD_VAR 0 2
18803: PUSH
18804: LD_INT 9
18806: MINUS
18807: ARRAY
18808: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18809: LD_ADDR_OWVAR 45
18813: PUSH
18814: LD_INT 11
18816: PUSH
18817: LD_INT 15
18819: PUSH
18820: LD_INT 12
18822: PUSH
18823: LD_INT 15
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: PUSH
18832: LD_VAR 0 2
18836: PUSH
18837: LD_INT 9
18839: MINUS
18840: ARRAY
18841: ST_TO_ADDR
// end ; 14 :
18842: GO 19261
18844: LD_INT 14
18846: DOUBLE
18847: EQUAL
18848: IFTRUE 18852
18850: GO 18863
18852: POP
// bc_type := b_workshop ; 15 :
18853: LD_ADDR_OWVAR 42
18857: PUSH
18858: LD_INT 2
18860: ST_TO_ADDR
18861: GO 19261
18863: LD_INT 15
18865: DOUBLE
18866: EQUAL
18867: IFTRUE 18871
18869: GO 18882
18871: POP
// bc_type := b_factory ; 16 :
18872: LD_ADDR_OWVAR 42
18876: PUSH
18877: LD_INT 3
18879: ST_TO_ADDR
18880: GO 19261
18882: LD_INT 16
18884: DOUBLE
18885: EQUAL
18886: IFTRUE 18890
18888: GO 18901
18890: POP
// bc_type := b_ext_gun ; 17 :
18891: LD_ADDR_OWVAR 42
18895: PUSH
18896: LD_INT 17
18898: ST_TO_ADDR
18899: GO 19261
18901: LD_INT 17
18903: DOUBLE
18904: EQUAL
18905: IFTRUE 18909
18907: GO 18937
18909: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18910: LD_ADDR_OWVAR 42
18914: PUSH
18915: LD_INT 19
18917: PUSH
18918: LD_INT 23
18920: PUSH
18921: LD_INT 19
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: LIST
18928: PUSH
18929: LD_VAR 0 1
18933: ARRAY
18934: ST_TO_ADDR
18935: GO 19261
18937: LD_INT 18
18939: DOUBLE
18940: EQUAL
18941: IFTRUE 18945
18943: GO 18956
18945: POP
// bc_type := b_ext_radar ; 19 :
18946: LD_ADDR_OWVAR 42
18950: PUSH
18951: LD_INT 20
18953: ST_TO_ADDR
18954: GO 19261
18956: LD_INT 19
18958: DOUBLE
18959: EQUAL
18960: IFTRUE 18964
18962: GO 18975
18964: POP
// bc_type := b_ext_radio ; 20 :
18965: LD_ADDR_OWVAR 42
18969: PUSH
18970: LD_INT 22
18972: ST_TO_ADDR
18973: GO 19261
18975: LD_INT 20
18977: DOUBLE
18978: EQUAL
18979: IFTRUE 18983
18981: GO 18994
18983: POP
// bc_type := b_ext_siberium ; 21 :
18984: LD_ADDR_OWVAR 42
18988: PUSH
18989: LD_INT 21
18991: ST_TO_ADDR
18992: GO 19261
18994: LD_INT 21
18996: DOUBLE
18997: EQUAL
18998: IFTRUE 19002
19000: GO 19013
19002: POP
// bc_type := b_ext_computer ; 22 :
19003: LD_ADDR_OWVAR 42
19007: PUSH
19008: LD_INT 24
19010: ST_TO_ADDR
19011: GO 19261
19013: LD_INT 22
19015: DOUBLE
19016: EQUAL
19017: IFTRUE 19021
19019: GO 19032
19021: POP
// bc_type := b_ext_track ; 23 :
19022: LD_ADDR_OWVAR 42
19026: PUSH
19027: LD_INT 16
19029: ST_TO_ADDR
19030: GO 19261
19032: LD_INT 23
19034: DOUBLE
19035: EQUAL
19036: IFTRUE 19040
19038: GO 19051
19040: POP
// bc_type := b_ext_laser ; 24 :
19041: LD_ADDR_OWVAR 42
19045: PUSH
19046: LD_INT 25
19048: ST_TO_ADDR
19049: GO 19261
19051: LD_INT 24
19053: DOUBLE
19054: EQUAL
19055: IFTRUE 19059
19057: GO 19070
19059: POP
// bc_type := b_control_tower ; 25 :
19060: LD_ADDR_OWVAR 42
19064: PUSH
19065: LD_INT 36
19067: ST_TO_ADDR
19068: GO 19261
19070: LD_INT 25
19072: DOUBLE
19073: EQUAL
19074: IFTRUE 19078
19076: GO 19089
19078: POP
// bc_type := b_breastwork ; 26 :
19079: LD_ADDR_OWVAR 42
19083: PUSH
19084: LD_INT 31
19086: ST_TO_ADDR
19087: GO 19261
19089: LD_INT 26
19091: DOUBLE
19092: EQUAL
19093: IFTRUE 19097
19095: GO 19108
19097: POP
// bc_type := b_bunker ; 27 :
19098: LD_ADDR_OWVAR 42
19102: PUSH
19103: LD_INT 32
19105: ST_TO_ADDR
19106: GO 19261
19108: LD_INT 27
19110: DOUBLE
19111: EQUAL
19112: IFTRUE 19116
19114: GO 19127
19116: POP
// bc_type := b_turret ; 28 :
19117: LD_ADDR_OWVAR 42
19121: PUSH
19122: LD_INT 33
19124: ST_TO_ADDR
19125: GO 19261
19127: LD_INT 28
19129: DOUBLE
19130: EQUAL
19131: IFTRUE 19135
19133: GO 19146
19135: POP
// bc_type := b_armoury ; 29 :
19136: LD_ADDR_OWVAR 42
19140: PUSH
19141: LD_INT 4
19143: ST_TO_ADDR
19144: GO 19261
19146: LD_INT 29
19148: DOUBLE
19149: EQUAL
19150: IFTRUE 19154
19152: GO 19165
19154: POP
// bc_type := b_barracks ; 30 :
19155: LD_ADDR_OWVAR 42
19159: PUSH
19160: LD_INT 5
19162: ST_TO_ADDR
19163: GO 19261
19165: LD_INT 30
19167: DOUBLE
19168: EQUAL
19169: IFTRUE 19173
19171: GO 19184
19173: POP
// bc_type := b_solar_power ; 31 :
19174: LD_ADDR_OWVAR 42
19178: PUSH
19179: LD_INT 27
19181: ST_TO_ADDR
19182: GO 19261
19184: LD_INT 31
19186: DOUBLE
19187: EQUAL
19188: IFTRUE 19192
19190: GO 19203
19192: POP
// bc_type := b_oil_power ; 32 :
19193: LD_ADDR_OWVAR 42
19197: PUSH
19198: LD_INT 26
19200: ST_TO_ADDR
19201: GO 19261
19203: LD_INT 32
19205: DOUBLE
19206: EQUAL
19207: IFTRUE 19211
19209: GO 19222
19211: POP
// bc_type := b_siberite_power ; 33 :
19212: LD_ADDR_OWVAR 42
19216: PUSH
19217: LD_INT 28
19219: ST_TO_ADDR
19220: GO 19261
19222: LD_INT 33
19224: DOUBLE
19225: EQUAL
19226: IFTRUE 19230
19228: GO 19241
19230: POP
// bc_type := b_oil_mine ; 34 :
19231: LD_ADDR_OWVAR 42
19235: PUSH
19236: LD_INT 29
19238: ST_TO_ADDR
19239: GO 19261
19241: LD_INT 34
19243: DOUBLE
19244: EQUAL
19245: IFTRUE 19249
19247: GO 19260
19249: POP
// bc_type := b_siberite_mine ; end ;
19250: LD_ADDR_OWVAR 42
19254: PUSH
19255: LD_INT 30
19257: ST_TO_ADDR
19258: GO 19261
19260: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19261: LD_ADDR_VAR 0 8
19265: PUSH
19266: LD_VAR 0 5
19270: PPUSH
19271: LD_VAR 0 6
19275: PPUSH
19276: LD_VAR 0 3
19280: PPUSH
19281: CALL_OW 47
19285: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19286: LD_OWVAR 42
19290: PUSH
19291: LD_INT 32
19293: PUSH
19294: LD_INT 33
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: IN
19301: IFFALSE 19317
// PlaceWeaponTurret ( b , weapon ) ;
19303: LD_VAR 0 8
19307: PPUSH
19308: LD_VAR 0 4
19312: PPUSH
19313: CALL_OW 431
// end ;
19317: LD_VAR 0 7
19321: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19322: LD_INT 0
19324: PPUSH
19325: PPUSH
19326: PPUSH
19327: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19328: LD_ADDR_VAR 0 4
19332: PUSH
19333: LD_INT 22
19335: PUSH
19336: LD_OWVAR 2
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: PUSH
19345: LD_INT 2
19347: PUSH
19348: LD_INT 30
19350: PUSH
19351: LD_INT 0
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 30
19360: PUSH
19361: LD_INT 1
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: LIST
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: PPUSH
19377: CALL_OW 69
19381: ST_TO_ADDR
// if not tmp then
19382: LD_VAR 0 4
19386: NOT
19387: IFFALSE 19391
// exit ;
19389: GO 19450
// for i in tmp do
19391: LD_ADDR_VAR 0 2
19395: PUSH
19396: LD_VAR 0 4
19400: PUSH
19401: FOR_IN
19402: IFFALSE 19448
// for j = 1 to 3 do
19404: LD_ADDR_VAR 0 3
19408: PUSH
19409: DOUBLE
19410: LD_INT 1
19412: DEC
19413: ST_TO_ADDR
19414: LD_INT 3
19416: PUSH
19417: FOR_TO
19418: IFFALSE 19444
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19420: LD_VAR 0 2
19424: PPUSH
19425: CALL_OW 274
19429: PPUSH
19430: LD_VAR 0 3
19434: PPUSH
19435: LD_INT 99999
19437: PPUSH
19438: CALL_OW 277
19442: GO 19417
19444: POP
19445: POP
19446: GO 19401
19448: POP
19449: POP
// end ;
19450: LD_VAR 0 1
19454: RET
// export function hHackSetLevel10 ; var i , j ; begin
19455: LD_INT 0
19457: PPUSH
19458: PPUSH
19459: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19460: LD_ADDR_VAR 0 2
19464: PUSH
19465: LD_INT 21
19467: PUSH
19468: LD_INT 1
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PPUSH
19475: CALL_OW 69
19479: PUSH
19480: FOR_IN
19481: IFFALSE 19533
// if IsSelected ( i ) then
19483: LD_VAR 0 2
19487: PPUSH
19488: CALL_OW 306
19492: IFFALSE 19531
// begin for j := 1 to 4 do
19494: LD_ADDR_VAR 0 3
19498: PUSH
19499: DOUBLE
19500: LD_INT 1
19502: DEC
19503: ST_TO_ADDR
19504: LD_INT 4
19506: PUSH
19507: FOR_TO
19508: IFFALSE 19529
// SetSkill ( i , j , 10 ) ;
19510: LD_VAR 0 2
19514: PPUSH
19515: LD_VAR 0 3
19519: PPUSH
19520: LD_INT 10
19522: PPUSH
19523: CALL_OW 237
19527: GO 19507
19529: POP
19530: POP
// end ;
19531: GO 19480
19533: POP
19534: POP
// end ;
19535: LD_VAR 0 1
19539: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19540: LD_INT 0
19542: PPUSH
19543: PPUSH
19544: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19545: LD_ADDR_VAR 0 2
19549: PUSH
19550: LD_INT 22
19552: PUSH
19553: LD_OWVAR 2
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 21
19564: PUSH
19565: LD_INT 1
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: PPUSH
19576: CALL_OW 69
19580: PUSH
19581: FOR_IN
19582: IFFALSE 19623
// begin for j := 1 to 4 do
19584: LD_ADDR_VAR 0 3
19588: PUSH
19589: DOUBLE
19590: LD_INT 1
19592: DEC
19593: ST_TO_ADDR
19594: LD_INT 4
19596: PUSH
19597: FOR_TO
19598: IFFALSE 19619
// SetSkill ( i , j , 10 ) ;
19600: LD_VAR 0 2
19604: PPUSH
19605: LD_VAR 0 3
19609: PPUSH
19610: LD_INT 10
19612: PPUSH
19613: CALL_OW 237
19617: GO 19597
19619: POP
19620: POP
// end ;
19621: GO 19581
19623: POP
19624: POP
// end ;
19625: LD_VAR 0 1
19629: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19630: LD_INT 0
19632: PPUSH
// uc_side := your_side ;
19633: LD_ADDR_OWVAR 20
19637: PUSH
19638: LD_OWVAR 2
19642: ST_TO_ADDR
// uc_nation := nation ;
19643: LD_ADDR_OWVAR 21
19647: PUSH
19648: LD_VAR 0 1
19652: ST_TO_ADDR
// InitHc ;
19653: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19657: LD_INT 0
19659: PPUSH
19660: LD_VAR 0 2
19664: PPUSH
19665: LD_VAR 0 3
19669: PPUSH
19670: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19674: LD_VAR 0 4
19678: PPUSH
19679: LD_VAR 0 5
19683: PPUSH
19684: CALL_OW 428
19688: PUSH
19689: LD_INT 0
19691: EQUAL
19692: IFFALSE 19716
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19694: CALL_OW 44
19698: PPUSH
19699: LD_VAR 0 4
19703: PPUSH
19704: LD_VAR 0 5
19708: PPUSH
19709: LD_INT 1
19711: PPUSH
19712: CALL_OW 48
// end ;
19716: LD_VAR 0 6
19720: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19721: LD_INT 0
19723: PPUSH
19724: PPUSH
// uc_side := your_side ;
19725: LD_ADDR_OWVAR 20
19729: PUSH
19730: LD_OWVAR 2
19734: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19735: LD_VAR 0 1
19739: PUSH
19740: LD_INT 1
19742: PUSH
19743: LD_INT 2
19745: PUSH
19746: LD_INT 3
19748: PUSH
19749: LD_INT 4
19751: PUSH
19752: LD_INT 5
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: IN
19762: IFFALSE 19774
// uc_nation := nation_american else
19764: LD_ADDR_OWVAR 21
19768: PUSH
19769: LD_INT 1
19771: ST_TO_ADDR
19772: GO 19817
// if chassis in [ 11 , 12 , 13 , 14 ] then
19774: LD_VAR 0 1
19778: PUSH
19779: LD_INT 11
19781: PUSH
19782: LD_INT 12
19784: PUSH
19785: LD_INT 13
19787: PUSH
19788: LD_INT 14
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: IN
19797: IFFALSE 19809
// uc_nation := nation_arabian else
19799: LD_ADDR_OWVAR 21
19803: PUSH
19804: LD_INT 2
19806: ST_TO_ADDR
19807: GO 19817
// uc_nation := nation_russian ;
19809: LD_ADDR_OWVAR 21
19813: PUSH
19814: LD_INT 3
19816: ST_TO_ADDR
// vc_chassis := chassis ;
19817: LD_ADDR_OWVAR 37
19821: PUSH
19822: LD_VAR 0 1
19826: ST_TO_ADDR
// vc_engine := engine ;
19827: LD_ADDR_OWVAR 39
19831: PUSH
19832: LD_VAR 0 2
19836: ST_TO_ADDR
// vc_control := control ;
19837: LD_ADDR_OWVAR 38
19841: PUSH
19842: LD_VAR 0 3
19846: ST_TO_ADDR
// vc_weapon := weapon ;
19847: LD_ADDR_OWVAR 40
19851: PUSH
19852: LD_VAR 0 4
19856: ST_TO_ADDR
// un := CreateVehicle ;
19857: LD_ADDR_VAR 0 8
19861: PUSH
19862: CALL_OW 45
19866: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19867: LD_VAR 0 8
19871: PPUSH
19872: LD_INT 0
19874: PPUSH
19875: LD_INT 5
19877: PPUSH
19878: CALL_OW 12
19882: PPUSH
19883: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19887: LD_VAR 0 8
19891: PPUSH
19892: LD_VAR 0 5
19896: PPUSH
19897: LD_VAR 0 6
19901: PPUSH
19902: LD_INT 1
19904: PPUSH
19905: CALL_OW 48
// end ;
19909: LD_VAR 0 7
19913: RET
// export hInvincible ; every 1 do
19914: GO 19916
19916: DISABLE
// hInvincible := [ ] ;
19917: LD_ADDR_EXP 83
19921: PUSH
19922: EMPTY
19923: ST_TO_ADDR
19924: END
// every 10 do var i ;
19925: GO 19927
19927: DISABLE
19928: LD_INT 0
19930: PPUSH
// begin enable ;
19931: ENABLE
// if not hInvincible then
19932: LD_EXP 83
19936: NOT
19937: IFFALSE 19941
// exit ;
19939: GO 19985
// for i in hInvincible do
19941: LD_ADDR_VAR 0 1
19945: PUSH
19946: LD_EXP 83
19950: PUSH
19951: FOR_IN
19952: IFFALSE 19983
// if GetLives ( i ) < 1000 then
19954: LD_VAR 0 1
19958: PPUSH
19959: CALL_OW 256
19963: PUSH
19964: LD_INT 1000
19966: LESS
19967: IFFALSE 19981
// SetLives ( i , 1000 ) ;
19969: LD_VAR 0 1
19973: PPUSH
19974: LD_INT 1000
19976: PPUSH
19977: CALL_OW 234
19981: GO 19951
19983: POP
19984: POP
// end ;
19985: PPOPN 1
19987: END
// export function hHackInvincible ; var i ; begin
19988: LD_INT 0
19990: PPUSH
19991: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19992: LD_ADDR_VAR 0 2
19996: PUSH
19997: LD_INT 2
19999: PUSH
20000: LD_INT 21
20002: PUSH
20003: LD_INT 1
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: PUSH
20010: LD_INT 21
20012: PUSH
20013: LD_INT 2
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: LIST
20024: PPUSH
20025: CALL_OW 69
20029: PUSH
20030: FOR_IN
20031: IFFALSE 20092
// if IsSelected ( i ) then
20033: LD_VAR 0 2
20037: PPUSH
20038: CALL_OW 306
20042: IFFALSE 20090
// begin if i in hInvincible then
20044: LD_VAR 0 2
20048: PUSH
20049: LD_EXP 83
20053: IN
20054: IFFALSE 20074
// hInvincible := hInvincible diff i else
20056: LD_ADDR_EXP 83
20060: PUSH
20061: LD_EXP 83
20065: PUSH
20066: LD_VAR 0 2
20070: DIFF
20071: ST_TO_ADDR
20072: GO 20090
// hInvincible := hInvincible union i ;
20074: LD_ADDR_EXP 83
20078: PUSH
20079: LD_EXP 83
20083: PUSH
20084: LD_VAR 0 2
20088: UNION
20089: ST_TO_ADDR
// end ;
20090: GO 20030
20092: POP
20093: POP
// end ;
20094: LD_VAR 0 1
20098: RET
// export function hHackInvisible ; var i , j ; begin
20099: LD_INT 0
20101: PPUSH
20102: PPUSH
20103: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20104: LD_ADDR_VAR 0 2
20108: PUSH
20109: LD_INT 21
20111: PUSH
20112: LD_INT 1
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PPUSH
20119: CALL_OW 69
20123: PUSH
20124: FOR_IN
20125: IFFALSE 20149
// if IsSelected ( i ) then
20127: LD_VAR 0 2
20131: PPUSH
20132: CALL_OW 306
20136: IFFALSE 20147
// ComForceInvisible ( i ) ;
20138: LD_VAR 0 2
20142: PPUSH
20143: CALL_OW 496
20147: GO 20124
20149: POP
20150: POP
// end ;
20151: LD_VAR 0 1
20155: RET
// export function hHackChangeYourSide ; begin
20156: LD_INT 0
20158: PPUSH
// if your_side = 8 then
20159: LD_OWVAR 2
20163: PUSH
20164: LD_INT 8
20166: EQUAL
20167: IFFALSE 20179
// your_side := 0 else
20169: LD_ADDR_OWVAR 2
20173: PUSH
20174: LD_INT 0
20176: ST_TO_ADDR
20177: GO 20193
// your_side := your_side + 1 ;
20179: LD_ADDR_OWVAR 2
20183: PUSH
20184: LD_OWVAR 2
20188: PUSH
20189: LD_INT 1
20191: PLUS
20192: ST_TO_ADDR
// end ;
20193: LD_VAR 0 1
20197: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20198: LD_INT 0
20200: PPUSH
20201: PPUSH
20202: PPUSH
// for i in all_units do
20203: LD_ADDR_VAR 0 2
20207: PUSH
20208: LD_OWVAR 3
20212: PUSH
20213: FOR_IN
20214: IFFALSE 20292
// if IsSelected ( i ) then
20216: LD_VAR 0 2
20220: PPUSH
20221: CALL_OW 306
20225: IFFALSE 20290
// begin j := GetSide ( i ) ;
20227: LD_ADDR_VAR 0 3
20231: PUSH
20232: LD_VAR 0 2
20236: PPUSH
20237: CALL_OW 255
20241: ST_TO_ADDR
// if j = 8 then
20242: LD_VAR 0 3
20246: PUSH
20247: LD_INT 8
20249: EQUAL
20250: IFFALSE 20262
// j := 0 else
20252: LD_ADDR_VAR 0 3
20256: PUSH
20257: LD_INT 0
20259: ST_TO_ADDR
20260: GO 20276
// j := j + 1 ;
20262: LD_ADDR_VAR 0 3
20266: PUSH
20267: LD_VAR 0 3
20271: PUSH
20272: LD_INT 1
20274: PLUS
20275: ST_TO_ADDR
// SetSide ( i , j ) ;
20276: LD_VAR 0 2
20280: PPUSH
20281: LD_VAR 0 3
20285: PPUSH
20286: CALL_OW 235
// end ;
20290: GO 20213
20292: POP
20293: POP
// end ;
20294: LD_VAR 0 1
20298: RET
// export function hHackFog ; begin
20299: LD_INT 0
20301: PPUSH
// FogOff ( true ) ;
20302: LD_INT 1
20304: PPUSH
20305: CALL_OW 344
// end ;
20309: LD_VAR 0 1
20313: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20314: LD_INT 0
20316: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20317: LD_VAR 0 1
20321: PPUSH
20322: LD_VAR 0 2
20326: PPUSH
20327: LD_VAR 0 3
20331: PPUSH
20332: LD_INT 1
20334: PPUSH
20335: LD_INT 1
20337: PPUSH
20338: CALL_OW 483
// CenterOnXY ( x , y ) ;
20342: LD_VAR 0 2
20346: PPUSH
20347: LD_VAR 0 3
20351: PPUSH
20352: CALL_OW 84
// end ;
20356: LD_VAR 0 4
20360: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
20361: LD_INT 0
20363: PPUSH
20364: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
20365: LD_VAR 0 1
20369: NOT
20370: PUSH
20371: LD_VAR 0 2
20375: PPUSH
20376: LD_VAR 0 3
20380: PPUSH
20381: CALL_OW 488
20385: NOT
20386: OR
20387: PUSH
20388: LD_VAR 0 1
20392: PPUSH
20393: CALL_OW 266
20397: PUSH
20398: LD_INT 3
20400: NONEQUAL
20401: PUSH
20402: LD_VAR 0 1
20406: PPUSH
20407: CALL_OW 247
20411: PUSH
20412: LD_INT 1
20414: EQUAL
20415: NOT
20416: AND
20417: OR
20418: IFFALSE 20422
// exit ;
20420: GO 20571
// if GetType ( factory ) = unit_human then
20422: LD_VAR 0 1
20426: PPUSH
20427: CALL_OW 247
20431: PUSH
20432: LD_INT 1
20434: EQUAL
20435: IFFALSE 20452
// factory := IsInUnit ( factory ) ;
20437: LD_ADDR_VAR 0 1
20441: PUSH
20442: LD_VAR 0 1
20446: PPUSH
20447: CALL_OW 310
20451: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20452: LD_VAR 0 1
20456: PPUSH
20457: CALL_OW 266
20461: PUSH
20462: LD_INT 3
20464: NONEQUAL
20465: IFFALSE 20469
// exit ;
20467: GO 20571
// if HexInfo ( x , y ) = factory then
20469: LD_VAR 0 2
20473: PPUSH
20474: LD_VAR 0 3
20478: PPUSH
20479: CALL_OW 428
20483: PUSH
20484: LD_VAR 0 1
20488: EQUAL
20489: IFFALSE 20516
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20491: LD_ADDR_EXP 84
20495: PUSH
20496: LD_EXP 84
20500: PPUSH
20501: LD_VAR 0 1
20505: PPUSH
20506: LD_INT 0
20508: PPUSH
20509: CALL_OW 1
20513: ST_TO_ADDR
20514: GO 20567
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
20516: LD_ADDR_EXP 84
20520: PUSH
20521: LD_EXP 84
20525: PPUSH
20526: LD_VAR 0 1
20530: PPUSH
20531: LD_VAR 0 1
20535: PPUSH
20536: CALL_OW 255
20540: PUSH
20541: LD_VAR 0 1
20545: PUSH
20546: LD_VAR 0 2
20550: PUSH
20551: LD_VAR 0 3
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: PPUSH
20562: CALL_OW 1
20566: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20567: CALL 20576 0 0
// end ;
20571: LD_VAR 0 4
20575: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
20576: LD_INT 0
20578: PPUSH
20579: PPUSH
20580: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20581: LD_STRING resetFactoryWaypoint();
20583: PPUSH
20584: CALL_OW 559
// if factoryWaypoints then
20588: LD_EXP 84
20592: IFFALSE 20718
// begin list := PrepareArray ( factoryWaypoints ) ;
20594: LD_ADDR_VAR 0 3
20598: PUSH
20599: LD_EXP 84
20603: PPUSH
20604: CALL 67187 0 1
20608: ST_TO_ADDR
// for i := 1 to list do
20609: LD_ADDR_VAR 0 2
20613: PUSH
20614: DOUBLE
20615: LD_INT 1
20617: DEC
20618: ST_TO_ADDR
20619: LD_VAR 0 3
20623: PUSH
20624: FOR_TO
20625: IFFALSE 20716
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20627: LD_STRING setFactoryWaypointXY(
20629: PUSH
20630: LD_VAR 0 3
20634: PUSH
20635: LD_VAR 0 2
20639: ARRAY
20640: PUSH
20641: LD_INT 1
20643: ARRAY
20644: STR
20645: PUSH
20646: LD_STRING ,
20648: STR
20649: PUSH
20650: LD_VAR 0 3
20654: PUSH
20655: LD_VAR 0 2
20659: ARRAY
20660: PUSH
20661: LD_INT 2
20663: ARRAY
20664: STR
20665: PUSH
20666: LD_STRING ,
20668: STR
20669: PUSH
20670: LD_VAR 0 3
20674: PUSH
20675: LD_VAR 0 2
20679: ARRAY
20680: PUSH
20681: LD_INT 3
20683: ARRAY
20684: STR
20685: PUSH
20686: LD_STRING ,
20688: STR
20689: PUSH
20690: LD_VAR 0 3
20694: PUSH
20695: LD_VAR 0 2
20699: ARRAY
20700: PUSH
20701: LD_INT 4
20703: ARRAY
20704: STR
20705: PUSH
20706: LD_STRING )
20708: STR
20709: PPUSH
20710: CALL_OW 559
20714: GO 20624
20716: POP
20717: POP
// end ; end ;
20718: LD_VAR 0 1
20722: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20723: LD_INT 0
20725: PPUSH
// if HexInfo ( x , y ) = warehouse then
20726: LD_VAR 0 2
20730: PPUSH
20731: LD_VAR 0 3
20735: PPUSH
20736: CALL_OW 428
20740: PUSH
20741: LD_VAR 0 1
20745: EQUAL
20746: IFFALSE 20773
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20748: LD_ADDR_EXP 85
20752: PUSH
20753: LD_EXP 85
20757: PPUSH
20758: LD_VAR 0 1
20762: PPUSH
20763: LD_INT 0
20765: PPUSH
20766: CALL_OW 1
20770: ST_TO_ADDR
20771: GO 20824
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20773: LD_ADDR_EXP 85
20777: PUSH
20778: LD_EXP 85
20782: PPUSH
20783: LD_VAR 0 1
20787: PPUSH
20788: LD_VAR 0 1
20792: PPUSH
20793: CALL_OW 255
20797: PUSH
20798: LD_VAR 0 1
20802: PUSH
20803: LD_VAR 0 2
20807: PUSH
20808: LD_VAR 0 3
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: PPUSH
20819: CALL_OW 1
20823: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20824: CALL 20833 0 0
// end ;
20828: LD_VAR 0 4
20832: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
20833: LD_INT 0
20835: PPUSH
20836: PPUSH
20837: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
20838: LD_STRING resetWarehouseGatheringPoints();
20840: PPUSH
20841: CALL_OW 559
// if warehouseGatheringPoints then
20845: LD_EXP 85
20849: IFFALSE 20975
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
20851: LD_ADDR_VAR 0 3
20855: PUSH
20856: LD_EXP 85
20860: PPUSH
20861: CALL 67187 0 1
20865: ST_TO_ADDR
// for i := 1 to list do
20866: LD_ADDR_VAR 0 2
20870: PUSH
20871: DOUBLE
20872: LD_INT 1
20874: DEC
20875: ST_TO_ADDR
20876: LD_VAR 0 3
20880: PUSH
20881: FOR_TO
20882: IFFALSE 20973
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20884: LD_STRING setWarehouseGatheringPointXY(
20886: PUSH
20887: LD_VAR 0 3
20891: PUSH
20892: LD_VAR 0 2
20896: ARRAY
20897: PUSH
20898: LD_INT 1
20900: ARRAY
20901: STR
20902: PUSH
20903: LD_STRING ,
20905: STR
20906: PUSH
20907: LD_VAR 0 3
20911: PUSH
20912: LD_VAR 0 2
20916: ARRAY
20917: PUSH
20918: LD_INT 2
20920: ARRAY
20921: STR
20922: PUSH
20923: LD_STRING ,
20925: STR
20926: PUSH
20927: LD_VAR 0 3
20931: PUSH
20932: LD_VAR 0 2
20936: ARRAY
20937: PUSH
20938: LD_INT 3
20940: ARRAY
20941: STR
20942: PUSH
20943: LD_STRING ,
20945: STR
20946: PUSH
20947: LD_VAR 0 3
20951: PUSH
20952: LD_VAR 0 2
20956: ARRAY
20957: PUSH
20958: LD_INT 4
20960: ARRAY
20961: STR
20962: PUSH
20963: LD_STRING )
20965: STR
20966: PPUSH
20967: CALL_OW 559
20971: GO 20881
20973: POP
20974: POP
// end ; end ;
20975: LD_VAR 0 1
20979: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20980: LD_EXP 85
20984: IFFALSE 21669
20986: GO 20988
20988: DISABLE
20989: LD_INT 0
20991: PPUSH
20992: PPUSH
20993: PPUSH
20994: PPUSH
20995: PPUSH
20996: PPUSH
20997: PPUSH
20998: PPUSH
20999: PPUSH
// begin enable ;
21000: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
21001: LD_ADDR_VAR 0 3
21005: PUSH
21006: LD_EXP 85
21010: PPUSH
21011: CALL 67187 0 1
21015: ST_TO_ADDR
// if not list then
21016: LD_VAR 0 3
21020: NOT
21021: IFFALSE 21025
// exit ;
21023: GO 21669
// for i := 1 to list do
21025: LD_ADDR_VAR 0 1
21029: PUSH
21030: DOUBLE
21031: LD_INT 1
21033: DEC
21034: ST_TO_ADDR
21035: LD_VAR 0 3
21039: PUSH
21040: FOR_TO
21041: IFFALSE 21667
// begin depot := list [ i ] [ 2 ] ;
21043: LD_ADDR_VAR 0 8
21047: PUSH
21048: LD_VAR 0 3
21052: PUSH
21053: LD_VAR 0 1
21057: ARRAY
21058: PUSH
21059: LD_INT 2
21061: ARRAY
21062: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
21063: LD_ADDR_VAR 0 5
21067: PUSH
21068: LD_VAR 0 3
21072: PUSH
21073: LD_VAR 0 1
21077: ARRAY
21078: PUSH
21079: LD_INT 1
21081: ARRAY
21082: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
21083: LD_VAR 0 8
21087: PPUSH
21088: CALL_OW 301
21092: PUSH
21093: LD_VAR 0 5
21097: PUSH
21098: LD_VAR 0 8
21102: PPUSH
21103: CALL_OW 255
21107: NONEQUAL
21108: OR
21109: IFFALSE 21138
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
21111: LD_ADDR_EXP 85
21115: PUSH
21116: LD_EXP 85
21120: PPUSH
21121: LD_VAR 0 8
21125: PPUSH
21126: LD_INT 0
21128: PPUSH
21129: CALL_OW 1
21133: ST_TO_ADDR
// exit ;
21134: POP
21135: POP
21136: GO 21669
// end ; x := list [ i ] [ 3 ] ;
21138: LD_ADDR_VAR 0 6
21142: PUSH
21143: LD_VAR 0 3
21147: PUSH
21148: LD_VAR 0 1
21152: ARRAY
21153: PUSH
21154: LD_INT 3
21156: ARRAY
21157: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
21158: LD_ADDR_VAR 0 7
21162: PUSH
21163: LD_VAR 0 3
21167: PUSH
21168: LD_VAR 0 1
21172: ARRAY
21173: PUSH
21174: LD_INT 4
21176: ARRAY
21177: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
21178: LD_ADDR_VAR 0 9
21182: PUSH
21183: LD_VAR 0 6
21187: PPUSH
21188: LD_VAR 0 7
21192: PPUSH
21193: LD_INT 16
21195: PPUSH
21196: CALL 65775 0 3
21200: ST_TO_ADDR
// if not cratesNearbyPoint then
21201: LD_VAR 0 9
21205: NOT
21206: IFFALSE 21212
// exit ;
21208: POP
21209: POP
21210: GO 21669
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
21212: LD_ADDR_VAR 0 4
21216: PUSH
21217: LD_INT 22
21219: PUSH
21220: LD_VAR 0 5
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PUSH
21229: LD_INT 3
21231: PUSH
21232: LD_INT 60
21234: PUSH
21235: EMPTY
21236: LIST
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PUSH
21242: LD_INT 91
21244: PUSH
21245: LD_VAR 0 8
21249: PUSH
21250: LD_INT 6
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 2
21260: PUSH
21261: LD_INT 25
21263: PUSH
21264: LD_INT 2
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: LD_INT 25
21273: PUSH
21274: LD_INT 16
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: LIST
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: PPUSH
21292: CALL_OW 69
21296: PUSH
21297: LD_VAR 0 8
21301: PPUSH
21302: CALL_OW 313
21306: PPUSH
21307: LD_INT 3
21309: PUSH
21310: LD_INT 60
21312: PUSH
21313: EMPTY
21314: LIST
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 2
21322: PUSH
21323: LD_INT 25
21325: PUSH
21326: LD_INT 2
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: LD_INT 25
21335: PUSH
21336: LD_INT 16
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: LIST
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PPUSH
21352: CALL_OW 72
21356: UNION
21357: ST_TO_ADDR
// if tmp then
21358: LD_VAR 0 4
21362: IFFALSE 21442
// begin tmp := ShrinkArray ( tmp , 3 ) ;
21364: LD_ADDR_VAR 0 4
21368: PUSH
21369: LD_VAR 0 4
21373: PPUSH
21374: LD_INT 3
21376: PPUSH
21377: CALL 63744 0 2
21381: ST_TO_ADDR
// for j in tmp do
21382: LD_ADDR_VAR 0 2
21386: PUSH
21387: LD_VAR 0 4
21391: PUSH
21392: FOR_IN
21393: IFFALSE 21436
// begin if IsInUnit ( j ) then
21395: LD_VAR 0 2
21399: PPUSH
21400: CALL_OW 310
21404: IFFALSE 21415
// ComExit ( j ) ;
21406: LD_VAR 0 2
21410: PPUSH
21411: CALL 63827 0 1
// AddComCollect ( j , x , y ) ;
21415: LD_VAR 0 2
21419: PPUSH
21420: LD_VAR 0 6
21424: PPUSH
21425: LD_VAR 0 7
21429: PPUSH
21430: CALL_OW 177
// end ;
21434: GO 21392
21436: POP
21437: POP
// exit ;
21438: POP
21439: POP
21440: GO 21669
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
21442: LD_ADDR_VAR 0 4
21446: PUSH
21447: LD_INT 22
21449: PUSH
21450: LD_VAR 0 5
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PUSH
21459: LD_INT 91
21461: PUSH
21462: LD_VAR 0 8
21466: PUSH
21467: LD_INT 8
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 2
21477: PUSH
21478: LD_INT 34
21480: PUSH
21481: LD_INT 12
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: LD_INT 34
21490: PUSH
21491: LD_INT 51
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PUSH
21498: LD_INT 34
21500: PUSH
21501: LD_INT 32
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: PUSH
21508: LD_INT 34
21510: PUSH
21511: LD_INT 89
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: LIST
21529: PPUSH
21530: CALL_OW 69
21534: ST_TO_ADDR
// if tmp then
21535: LD_VAR 0 4
21539: IFFALSE 21665
// begin for j in tmp do
21541: LD_ADDR_VAR 0 2
21545: PUSH
21546: LD_VAR 0 4
21550: PUSH
21551: FOR_IN
21552: IFFALSE 21663
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
21554: LD_VAR 0 2
21558: PPUSH
21559: CALL_OW 262
21563: PUSH
21564: LD_INT 3
21566: EQUAL
21567: PUSH
21568: LD_VAR 0 2
21572: PPUSH
21573: CALL_OW 261
21577: PUSH
21578: LD_INT 20
21580: GREATER
21581: OR
21582: PUSH
21583: LD_VAR 0 2
21587: PPUSH
21588: CALL_OW 314
21592: NOT
21593: AND
21594: PUSH
21595: LD_VAR 0 2
21599: PPUSH
21600: CALL_OW 263
21604: PUSH
21605: LD_INT 1
21607: NONEQUAL
21608: PUSH
21609: LD_VAR 0 2
21613: PPUSH
21614: CALL_OW 311
21618: OR
21619: AND
21620: IFFALSE 21661
// begin ComCollect ( j , x , y ) ;
21622: LD_VAR 0 2
21626: PPUSH
21627: LD_VAR 0 6
21631: PPUSH
21632: LD_VAR 0 7
21636: PPUSH
21637: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
21641: LD_VAR 0 2
21645: PPUSH
21646: LD_VAR 0 8
21650: PPUSH
21651: CALL_OW 172
// exit ;
21655: POP
21656: POP
21657: POP
21658: POP
21659: GO 21669
// end ;
21661: GO 21551
21663: POP
21664: POP
// end ; end ;
21665: GO 21040
21667: POP
21668: POP
// end ; end_of_file
21669: PPOPN 9
21671: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21672: LD_INT 0
21674: PPUSH
21675: PPUSH
21676: PPUSH
21677: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21678: LD_VAR 0 1
21682: PPUSH
21683: CALL_OW 264
21687: PUSH
21688: LD_INT 91
21690: EQUAL
21691: IFFALSE 21763
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21693: LD_INT 68
21695: PPUSH
21696: LD_VAR 0 1
21700: PPUSH
21701: CALL_OW 255
21705: PPUSH
21706: CALL_OW 321
21710: PUSH
21711: LD_INT 2
21713: EQUAL
21714: IFFALSE 21726
// eff := 70 else
21716: LD_ADDR_VAR 0 4
21720: PUSH
21721: LD_INT 70
21723: ST_TO_ADDR
21724: GO 21734
// eff := 30 ;
21726: LD_ADDR_VAR 0 4
21730: PUSH
21731: LD_INT 30
21733: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21734: LD_VAR 0 1
21738: PPUSH
21739: CALL_OW 250
21743: PPUSH
21744: LD_VAR 0 1
21748: PPUSH
21749: CALL_OW 251
21753: PPUSH
21754: LD_VAR 0 4
21758: PPUSH
21759: CALL_OW 495
// end ; end ;
21763: LD_VAR 0 2
21767: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21768: LD_INT 0
21770: PPUSH
// end ;
21771: LD_VAR 0 4
21775: RET
// export function SOS_Command ( cmd ) ; begin
21776: LD_INT 0
21778: PPUSH
// end ;
21779: LD_VAR 0 2
21783: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21784: LD_INT 0
21786: PPUSH
// end ;
21787: LD_VAR 0 6
21791: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
21792: LD_INT 0
21794: PPUSH
21795: PPUSH
// if not vehicle or not factory then
21796: LD_VAR 0 1
21800: NOT
21801: PUSH
21802: LD_VAR 0 2
21806: NOT
21807: OR
21808: IFFALSE 21812
// exit ;
21810: GO 22043
// if factoryWaypoints >= factory then
21812: LD_EXP 84
21816: PUSH
21817: LD_VAR 0 2
21821: GREATEREQUAL
21822: IFFALSE 22043
// if factoryWaypoints [ factory ] then
21824: LD_EXP 84
21828: PUSH
21829: LD_VAR 0 2
21833: ARRAY
21834: IFFALSE 22043
// begin if GetControl ( vehicle ) = control_manual then
21836: LD_VAR 0 1
21840: PPUSH
21841: CALL_OW 263
21845: PUSH
21846: LD_INT 1
21848: EQUAL
21849: IFFALSE 21930
// begin driver := IsDrivenBy ( vehicle ) ;
21851: LD_ADDR_VAR 0 4
21855: PUSH
21856: LD_VAR 0 1
21860: PPUSH
21861: CALL_OW 311
21865: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21866: LD_VAR 0 4
21870: PPUSH
21871: LD_EXP 84
21875: PUSH
21876: LD_VAR 0 2
21880: ARRAY
21881: PUSH
21882: LD_INT 3
21884: ARRAY
21885: PPUSH
21886: LD_EXP 84
21890: PUSH
21891: LD_VAR 0 2
21895: ARRAY
21896: PUSH
21897: LD_INT 4
21899: ARRAY
21900: PPUSH
21901: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21905: LD_VAR 0 4
21909: PPUSH
21910: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21914: LD_VAR 0 4
21918: PPUSH
21919: LD_VAR 0 2
21923: PPUSH
21924: CALL_OW 180
// end else
21928: GO 22043
// if GetControl ( vehicle ) = control_remote then
21930: LD_VAR 0 1
21934: PPUSH
21935: CALL_OW 263
21939: PUSH
21940: LD_INT 2
21942: EQUAL
21943: IFFALSE 22004
// begin wait ( 0 0$2 ) ;
21945: LD_INT 70
21947: PPUSH
21948: CALL_OW 67
// if Connect ( vehicle ) then
21952: LD_VAR 0 1
21956: PPUSH
21957: CALL 34067 0 1
21961: IFFALSE 22002
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21963: LD_VAR 0 1
21967: PPUSH
21968: LD_EXP 84
21972: PUSH
21973: LD_VAR 0 2
21977: ARRAY
21978: PUSH
21979: LD_INT 3
21981: ARRAY
21982: PPUSH
21983: LD_EXP 84
21987: PUSH
21988: LD_VAR 0 2
21992: ARRAY
21993: PUSH
21994: LD_INT 4
21996: ARRAY
21997: PPUSH
21998: CALL_OW 171
// end else
22002: GO 22043
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22004: LD_VAR 0 1
22008: PPUSH
22009: LD_EXP 84
22013: PUSH
22014: LD_VAR 0 2
22018: ARRAY
22019: PUSH
22020: LD_INT 3
22022: ARRAY
22023: PPUSH
22024: LD_EXP 84
22028: PUSH
22029: LD_VAR 0 2
22033: ARRAY
22034: PUSH
22035: LD_INT 4
22037: ARRAY
22038: PPUSH
22039: CALL_OW 171
// end ; end ;
22043: LD_VAR 0 3
22047: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22048: LD_INT 0
22050: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22051: LD_VAR 0 1
22055: PUSH
22056: LD_INT 250
22058: EQUAL
22059: PUSH
22060: LD_VAR 0 2
22064: PPUSH
22065: CALL_OW 264
22069: PUSH
22070: LD_INT 81
22072: EQUAL
22073: AND
22074: IFFALSE 22095
// MinerPlaceMine ( unit , x , y ) ;
22076: LD_VAR 0 2
22080: PPUSH
22081: LD_VAR 0 4
22085: PPUSH
22086: LD_VAR 0 5
22090: PPUSH
22091: CALL 24480 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22095: LD_VAR 0 1
22099: PUSH
22100: LD_INT 251
22102: EQUAL
22103: PUSH
22104: LD_VAR 0 2
22108: PPUSH
22109: CALL_OW 264
22113: PUSH
22114: LD_INT 81
22116: EQUAL
22117: AND
22118: IFFALSE 22139
// MinerDetonateMine ( unit , x , y ) ;
22120: LD_VAR 0 2
22124: PPUSH
22125: LD_VAR 0 4
22129: PPUSH
22130: LD_VAR 0 5
22134: PPUSH
22135: CALL 24755 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22139: LD_VAR 0 1
22143: PUSH
22144: LD_INT 252
22146: EQUAL
22147: PUSH
22148: LD_VAR 0 2
22152: PPUSH
22153: CALL_OW 264
22157: PUSH
22158: LD_INT 81
22160: EQUAL
22161: AND
22162: IFFALSE 22183
// MinerCreateMinefield ( unit , x , y ) ;
22164: LD_VAR 0 2
22168: PPUSH
22169: LD_VAR 0 4
22173: PPUSH
22174: LD_VAR 0 5
22178: PPUSH
22179: CALL 25172 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22183: LD_VAR 0 1
22187: PUSH
22188: LD_INT 253
22190: EQUAL
22191: PUSH
22192: LD_VAR 0 2
22196: PPUSH
22197: CALL_OW 257
22201: PUSH
22202: LD_INT 5
22204: EQUAL
22205: AND
22206: IFFALSE 22227
// ComBinocular ( unit , x , y ) ;
22208: LD_VAR 0 2
22212: PPUSH
22213: LD_VAR 0 4
22217: PPUSH
22218: LD_VAR 0 5
22222: PPUSH
22223: CALL 25541 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22227: LD_VAR 0 1
22231: PUSH
22232: LD_INT 254
22234: EQUAL
22235: PUSH
22236: LD_VAR 0 2
22240: PPUSH
22241: CALL_OW 264
22245: PUSH
22246: LD_INT 99
22248: EQUAL
22249: AND
22250: PUSH
22251: LD_VAR 0 3
22255: PPUSH
22256: CALL_OW 263
22260: PUSH
22261: LD_INT 3
22263: EQUAL
22264: AND
22265: IFFALSE 22281
// HackDestroyVehicle ( unit , selectedUnit ) ;
22267: LD_VAR 0 2
22271: PPUSH
22272: LD_VAR 0 3
22276: PPUSH
22277: CALL 23844 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22281: LD_VAR 0 1
22285: PUSH
22286: LD_INT 255
22288: EQUAL
22289: PUSH
22290: LD_VAR 0 2
22294: PPUSH
22295: CALL_OW 264
22299: PUSH
22300: LD_INT 14
22302: PUSH
22303: LD_INT 53
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: IN
22310: AND
22311: PUSH
22312: LD_VAR 0 4
22316: PPUSH
22317: LD_VAR 0 5
22321: PPUSH
22322: CALL_OW 488
22326: AND
22327: IFFALSE 22351
// CutTreeXYR ( unit , x , y , 12 ) ;
22329: LD_VAR 0 2
22333: PPUSH
22334: LD_VAR 0 4
22338: PPUSH
22339: LD_VAR 0 5
22343: PPUSH
22344: LD_INT 12
22346: PPUSH
22347: CALL 22414 0 4
// if cmd = 256 then
22351: LD_VAR 0 1
22355: PUSH
22356: LD_INT 256
22358: EQUAL
22359: IFFALSE 22380
// SetFactoryWaypoint ( unit , x , y ) ;
22361: LD_VAR 0 2
22365: PPUSH
22366: LD_VAR 0 4
22370: PPUSH
22371: LD_VAR 0 5
22375: PPUSH
22376: CALL 20361 0 3
// if cmd = 257 then
22380: LD_VAR 0 1
22384: PUSH
22385: LD_INT 257
22387: EQUAL
22388: IFFALSE 22409
// SetWarehouseGatheringPoint ( unit , x , y ) ;
22390: LD_VAR 0 2
22394: PPUSH
22395: LD_VAR 0 4
22399: PPUSH
22400: LD_VAR 0 5
22404: PPUSH
22405: CALL 20723 0 3
// end ;
22409: LD_VAR 0 6
22413: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22414: LD_INT 0
22416: PPUSH
22417: PPUSH
22418: PPUSH
22419: PPUSH
22420: PPUSH
22421: PPUSH
22422: PPUSH
22423: PPUSH
22424: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22425: LD_VAR 0 1
22429: NOT
22430: PUSH
22431: LD_VAR 0 2
22435: PPUSH
22436: LD_VAR 0 3
22440: PPUSH
22441: CALL_OW 488
22445: NOT
22446: OR
22447: PUSH
22448: LD_VAR 0 4
22452: NOT
22453: OR
22454: IFFALSE 22458
// exit ;
22456: GO 22798
// list := [ ] ;
22458: LD_ADDR_VAR 0 13
22462: PUSH
22463: EMPTY
22464: ST_TO_ADDR
// if x - r < 0 then
22465: LD_VAR 0 2
22469: PUSH
22470: LD_VAR 0 4
22474: MINUS
22475: PUSH
22476: LD_INT 0
22478: LESS
22479: IFFALSE 22491
// min_x := 0 else
22481: LD_ADDR_VAR 0 7
22485: PUSH
22486: LD_INT 0
22488: ST_TO_ADDR
22489: GO 22507
// min_x := x - r ;
22491: LD_ADDR_VAR 0 7
22495: PUSH
22496: LD_VAR 0 2
22500: PUSH
22501: LD_VAR 0 4
22505: MINUS
22506: ST_TO_ADDR
// if y - r < 0 then
22507: LD_VAR 0 3
22511: PUSH
22512: LD_VAR 0 4
22516: MINUS
22517: PUSH
22518: LD_INT 0
22520: LESS
22521: IFFALSE 22533
// min_y := 0 else
22523: LD_ADDR_VAR 0 8
22527: PUSH
22528: LD_INT 0
22530: ST_TO_ADDR
22531: GO 22549
// min_y := y - r ;
22533: LD_ADDR_VAR 0 8
22537: PUSH
22538: LD_VAR 0 3
22542: PUSH
22543: LD_VAR 0 4
22547: MINUS
22548: ST_TO_ADDR
// max_x := x + r ;
22549: LD_ADDR_VAR 0 9
22553: PUSH
22554: LD_VAR 0 2
22558: PUSH
22559: LD_VAR 0 4
22563: PLUS
22564: ST_TO_ADDR
// max_y := y + r ;
22565: LD_ADDR_VAR 0 10
22569: PUSH
22570: LD_VAR 0 3
22574: PUSH
22575: LD_VAR 0 4
22579: PLUS
22580: ST_TO_ADDR
// for _x = min_x to max_x do
22581: LD_ADDR_VAR 0 11
22585: PUSH
22586: DOUBLE
22587: LD_VAR 0 7
22591: DEC
22592: ST_TO_ADDR
22593: LD_VAR 0 9
22597: PUSH
22598: FOR_TO
22599: IFFALSE 22716
// for _y = min_y to max_y do
22601: LD_ADDR_VAR 0 12
22605: PUSH
22606: DOUBLE
22607: LD_VAR 0 8
22611: DEC
22612: ST_TO_ADDR
22613: LD_VAR 0 10
22617: PUSH
22618: FOR_TO
22619: IFFALSE 22712
// begin if not ValidHex ( _x , _y ) then
22621: LD_VAR 0 11
22625: PPUSH
22626: LD_VAR 0 12
22630: PPUSH
22631: CALL_OW 488
22635: NOT
22636: IFFALSE 22640
// continue ;
22638: GO 22618
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22640: LD_VAR 0 11
22644: PPUSH
22645: LD_VAR 0 12
22649: PPUSH
22650: CALL_OW 351
22654: PUSH
22655: LD_VAR 0 11
22659: PPUSH
22660: LD_VAR 0 12
22664: PPUSH
22665: CALL_OW 554
22669: AND
22670: IFFALSE 22710
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22672: LD_ADDR_VAR 0 13
22676: PUSH
22677: LD_VAR 0 13
22681: PPUSH
22682: LD_VAR 0 13
22686: PUSH
22687: LD_INT 1
22689: PLUS
22690: PPUSH
22691: LD_VAR 0 11
22695: PUSH
22696: LD_VAR 0 12
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: PPUSH
22705: CALL_OW 2
22709: ST_TO_ADDR
// end ;
22710: GO 22618
22712: POP
22713: POP
22714: GO 22598
22716: POP
22717: POP
// if not list then
22718: LD_VAR 0 13
22722: NOT
22723: IFFALSE 22727
// exit ;
22725: GO 22798
// for i in list do
22727: LD_ADDR_VAR 0 6
22731: PUSH
22732: LD_VAR 0 13
22736: PUSH
22737: FOR_IN
22738: IFFALSE 22796
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22740: LD_VAR 0 1
22744: PPUSH
22745: LD_STRING M
22747: PUSH
22748: LD_VAR 0 6
22752: PUSH
22753: LD_INT 1
22755: ARRAY
22756: PUSH
22757: LD_VAR 0 6
22761: PUSH
22762: LD_INT 2
22764: ARRAY
22765: PUSH
22766: LD_INT 0
22768: PUSH
22769: LD_INT 0
22771: PUSH
22772: LD_INT 0
22774: PUSH
22775: LD_INT 0
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: PUSH
22787: EMPTY
22788: LIST
22789: PPUSH
22790: CALL_OW 447
22794: GO 22737
22796: POP
22797: POP
// end ;
22798: LD_VAR 0 5
22802: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22803: LD_EXP 87
22807: NOT
22808: IFFALSE 22858
22810: GO 22812
22812: DISABLE
// begin initHack := true ;
22813: LD_ADDR_EXP 87
22817: PUSH
22818: LD_INT 1
22820: ST_TO_ADDR
// hackTanks := [ ] ;
22821: LD_ADDR_EXP 88
22825: PUSH
22826: EMPTY
22827: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22828: LD_ADDR_EXP 89
22832: PUSH
22833: EMPTY
22834: ST_TO_ADDR
// hackLimit := 3 ;
22835: LD_ADDR_EXP 90
22839: PUSH
22840: LD_INT 3
22842: ST_TO_ADDR
// hackDist := 12 ;
22843: LD_ADDR_EXP 91
22847: PUSH
22848: LD_INT 12
22850: ST_TO_ADDR
// hackCounter := [ ] ;
22851: LD_ADDR_EXP 92
22855: PUSH
22856: EMPTY
22857: ST_TO_ADDR
// end ;
22858: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22859: LD_EXP 87
22863: PUSH
22864: LD_INT 34
22866: PUSH
22867: LD_INT 99
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PPUSH
22874: CALL_OW 69
22878: AND
22879: IFFALSE 23132
22881: GO 22883
22883: DISABLE
22884: LD_INT 0
22886: PPUSH
22887: PPUSH
// begin enable ;
22888: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22889: LD_ADDR_VAR 0 1
22893: PUSH
22894: LD_INT 34
22896: PUSH
22897: LD_INT 99
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PPUSH
22904: CALL_OW 69
22908: PUSH
22909: FOR_IN
22910: IFFALSE 23130
// begin if not i in hackTanks then
22912: LD_VAR 0 1
22916: PUSH
22917: LD_EXP 88
22921: IN
22922: NOT
22923: IFFALSE 23006
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22925: LD_ADDR_EXP 88
22929: PUSH
22930: LD_EXP 88
22934: PPUSH
22935: LD_EXP 88
22939: PUSH
22940: LD_INT 1
22942: PLUS
22943: PPUSH
22944: LD_VAR 0 1
22948: PPUSH
22949: CALL_OW 1
22953: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22954: LD_ADDR_EXP 89
22958: PUSH
22959: LD_EXP 89
22963: PPUSH
22964: LD_EXP 89
22968: PUSH
22969: LD_INT 1
22971: PLUS
22972: PPUSH
22973: EMPTY
22974: PPUSH
22975: CALL_OW 1
22979: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22980: LD_ADDR_EXP 92
22984: PUSH
22985: LD_EXP 92
22989: PPUSH
22990: LD_EXP 92
22994: PUSH
22995: LD_INT 1
22997: PLUS
22998: PPUSH
22999: EMPTY
23000: PPUSH
23001: CALL_OW 1
23005: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23006: LD_VAR 0 1
23010: PPUSH
23011: CALL_OW 302
23015: NOT
23016: IFFALSE 23029
// begin HackUnlinkAll ( i ) ;
23018: LD_VAR 0 1
23022: PPUSH
23023: CALL 23135 0 1
// continue ;
23027: GO 22909
// end ; HackCheckCapturedStatus ( i ) ;
23029: LD_VAR 0 1
23033: PPUSH
23034: CALL 23578 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23038: LD_ADDR_VAR 0 2
23042: PUSH
23043: LD_INT 81
23045: PUSH
23046: LD_VAR 0 1
23050: PPUSH
23051: CALL_OW 255
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 33
23062: PUSH
23063: LD_INT 3
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 91
23072: PUSH
23073: LD_VAR 0 1
23077: PUSH
23078: LD_EXP 91
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: LIST
23087: PUSH
23088: LD_INT 50
23090: PUSH
23091: EMPTY
23092: LIST
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: PPUSH
23100: CALL_OW 69
23104: ST_TO_ADDR
// if not tmp then
23105: LD_VAR 0 2
23109: NOT
23110: IFFALSE 23114
// continue ;
23112: GO 22909
// HackLink ( i , tmp ) ;
23114: LD_VAR 0 1
23118: PPUSH
23119: LD_VAR 0 2
23123: PPUSH
23124: CALL 23271 0 2
// end ;
23128: GO 22909
23130: POP
23131: POP
// end ;
23132: PPOPN 2
23134: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23135: LD_INT 0
23137: PPUSH
23138: PPUSH
23139: PPUSH
// if not hack in hackTanks then
23140: LD_VAR 0 1
23144: PUSH
23145: LD_EXP 88
23149: IN
23150: NOT
23151: IFFALSE 23155
// exit ;
23153: GO 23266
// index := GetElementIndex ( hackTanks , hack ) ;
23155: LD_ADDR_VAR 0 4
23159: PUSH
23160: LD_EXP 88
23164: PPUSH
23165: LD_VAR 0 1
23169: PPUSH
23170: CALL 30883 0 2
23174: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23175: LD_EXP 89
23179: PUSH
23180: LD_VAR 0 4
23184: ARRAY
23185: IFFALSE 23266
// begin for i in hackTanksCaptured [ index ] do
23187: LD_ADDR_VAR 0 3
23191: PUSH
23192: LD_EXP 89
23196: PUSH
23197: LD_VAR 0 4
23201: ARRAY
23202: PUSH
23203: FOR_IN
23204: IFFALSE 23230
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23206: LD_VAR 0 3
23210: PUSH
23211: LD_INT 1
23213: ARRAY
23214: PPUSH
23215: LD_VAR 0 3
23219: PUSH
23220: LD_INT 2
23222: ARRAY
23223: PPUSH
23224: CALL_OW 235
23228: GO 23203
23230: POP
23231: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23232: LD_ADDR_EXP 89
23236: PUSH
23237: LD_EXP 89
23241: PPUSH
23242: LD_VAR 0 4
23246: PPUSH
23247: EMPTY
23248: PPUSH
23249: CALL_OW 1
23253: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23254: LD_VAR 0 1
23258: PPUSH
23259: LD_INT 0
23261: PPUSH
23262: CALL_OW 505
// end ; end ;
23266: LD_VAR 0 2
23270: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23271: LD_INT 0
23273: PPUSH
23274: PPUSH
23275: PPUSH
// if not hack in hackTanks or not vehicles then
23276: LD_VAR 0 1
23280: PUSH
23281: LD_EXP 88
23285: IN
23286: NOT
23287: PUSH
23288: LD_VAR 0 2
23292: NOT
23293: OR
23294: IFFALSE 23298
// exit ;
23296: GO 23573
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23298: LD_ADDR_VAR 0 2
23302: PUSH
23303: LD_VAR 0 1
23307: PPUSH
23308: LD_VAR 0 2
23312: PPUSH
23313: LD_INT 1
23315: PPUSH
23316: LD_INT 1
23318: PPUSH
23319: CALL 31533 0 4
23323: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23324: LD_ADDR_VAR 0 5
23328: PUSH
23329: LD_EXP 88
23333: PPUSH
23334: LD_VAR 0 1
23338: PPUSH
23339: CALL 30883 0 2
23343: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23344: LD_EXP 89
23348: PUSH
23349: LD_VAR 0 5
23353: ARRAY
23354: PUSH
23355: LD_EXP 90
23359: LESS
23360: IFFALSE 23549
// begin for i := 1 to vehicles do
23362: LD_ADDR_VAR 0 4
23366: PUSH
23367: DOUBLE
23368: LD_INT 1
23370: DEC
23371: ST_TO_ADDR
23372: LD_VAR 0 2
23376: PUSH
23377: FOR_TO
23378: IFFALSE 23547
// begin if hackTanksCaptured [ index ] = hackLimit then
23380: LD_EXP 89
23384: PUSH
23385: LD_VAR 0 5
23389: ARRAY
23390: PUSH
23391: LD_EXP 90
23395: EQUAL
23396: IFFALSE 23400
// break ;
23398: GO 23547
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23400: LD_ADDR_EXP 92
23404: PUSH
23405: LD_EXP 92
23409: PPUSH
23410: LD_VAR 0 5
23414: PPUSH
23415: LD_EXP 92
23419: PUSH
23420: LD_VAR 0 5
23424: ARRAY
23425: PUSH
23426: LD_INT 1
23428: PLUS
23429: PPUSH
23430: CALL_OW 1
23434: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23435: LD_ADDR_EXP 89
23439: PUSH
23440: LD_EXP 89
23444: PPUSH
23445: LD_VAR 0 5
23449: PUSH
23450: LD_EXP 89
23454: PUSH
23455: LD_VAR 0 5
23459: ARRAY
23460: PUSH
23461: LD_INT 1
23463: PLUS
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PPUSH
23469: LD_VAR 0 2
23473: PUSH
23474: LD_VAR 0 4
23478: ARRAY
23479: PUSH
23480: LD_VAR 0 2
23484: PUSH
23485: LD_VAR 0 4
23489: ARRAY
23490: PPUSH
23491: CALL_OW 255
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PPUSH
23500: CALL 31098 0 3
23504: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23505: LD_VAR 0 2
23509: PUSH
23510: LD_VAR 0 4
23514: ARRAY
23515: PPUSH
23516: LD_VAR 0 1
23520: PPUSH
23521: CALL_OW 255
23525: PPUSH
23526: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23530: LD_VAR 0 2
23534: PUSH
23535: LD_VAR 0 4
23539: ARRAY
23540: PPUSH
23541: CALL_OW 141
// end ;
23545: GO 23377
23547: POP
23548: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23549: LD_VAR 0 1
23553: PPUSH
23554: LD_EXP 89
23558: PUSH
23559: LD_VAR 0 5
23563: ARRAY
23564: PUSH
23565: LD_INT 0
23567: PLUS
23568: PPUSH
23569: CALL_OW 505
// end ;
23573: LD_VAR 0 3
23577: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23578: LD_INT 0
23580: PPUSH
23581: PPUSH
23582: PPUSH
23583: PPUSH
// if not hack in hackTanks then
23584: LD_VAR 0 1
23588: PUSH
23589: LD_EXP 88
23593: IN
23594: NOT
23595: IFFALSE 23599
// exit ;
23597: GO 23839
// index := GetElementIndex ( hackTanks , hack ) ;
23599: LD_ADDR_VAR 0 4
23603: PUSH
23604: LD_EXP 88
23608: PPUSH
23609: LD_VAR 0 1
23613: PPUSH
23614: CALL 30883 0 2
23618: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23619: LD_ADDR_VAR 0 3
23623: PUSH
23624: DOUBLE
23625: LD_EXP 89
23629: PUSH
23630: LD_VAR 0 4
23634: ARRAY
23635: INC
23636: ST_TO_ADDR
23637: LD_INT 1
23639: PUSH
23640: FOR_DOWNTO
23641: IFFALSE 23813
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23643: LD_ADDR_VAR 0 5
23647: PUSH
23648: LD_EXP 89
23652: PUSH
23653: LD_VAR 0 4
23657: ARRAY
23658: PUSH
23659: LD_VAR 0 3
23663: ARRAY
23664: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23665: LD_VAR 0 5
23669: PUSH
23670: LD_INT 1
23672: ARRAY
23673: PPUSH
23674: CALL_OW 302
23678: NOT
23679: PUSH
23680: LD_VAR 0 5
23684: PUSH
23685: LD_INT 1
23687: ARRAY
23688: PPUSH
23689: CALL_OW 255
23693: PUSH
23694: LD_VAR 0 1
23698: PPUSH
23699: CALL_OW 255
23703: NONEQUAL
23704: OR
23705: IFFALSE 23811
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23707: LD_VAR 0 5
23711: PUSH
23712: LD_INT 1
23714: ARRAY
23715: PPUSH
23716: CALL_OW 305
23720: PUSH
23721: LD_VAR 0 5
23725: PUSH
23726: LD_INT 1
23728: ARRAY
23729: PPUSH
23730: CALL_OW 255
23734: PUSH
23735: LD_VAR 0 1
23739: PPUSH
23740: CALL_OW 255
23744: EQUAL
23745: AND
23746: IFFALSE 23770
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23748: LD_VAR 0 5
23752: PUSH
23753: LD_INT 1
23755: ARRAY
23756: PPUSH
23757: LD_VAR 0 5
23761: PUSH
23762: LD_INT 2
23764: ARRAY
23765: PPUSH
23766: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23770: LD_ADDR_EXP 89
23774: PUSH
23775: LD_EXP 89
23779: PPUSH
23780: LD_VAR 0 4
23784: PPUSH
23785: LD_EXP 89
23789: PUSH
23790: LD_VAR 0 4
23794: ARRAY
23795: PPUSH
23796: LD_VAR 0 3
23800: PPUSH
23801: CALL_OW 3
23805: PPUSH
23806: CALL_OW 1
23810: ST_TO_ADDR
// end ; end ;
23811: GO 23640
23813: POP
23814: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23815: LD_VAR 0 1
23819: PPUSH
23820: LD_EXP 89
23824: PUSH
23825: LD_VAR 0 4
23829: ARRAY
23830: PUSH
23831: LD_INT 0
23833: PLUS
23834: PPUSH
23835: CALL_OW 505
// end ;
23839: LD_VAR 0 2
23843: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23844: LD_INT 0
23846: PPUSH
23847: PPUSH
23848: PPUSH
23849: PPUSH
// if not hack in hackTanks then
23850: LD_VAR 0 1
23854: PUSH
23855: LD_EXP 88
23859: IN
23860: NOT
23861: IFFALSE 23865
// exit ;
23863: GO 23950
// index := GetElementIndex ( hackTanks , hack ) ;
23865: LD_ADDR_VAR 0 5
23869: PUSH
23870: LD_EXP 88
23874: PPUSH
23875: LD_VAR 0 1
23879: PPUSH
23880: CALL 30883 0 2
23884: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23885: LD_ADDR_VAR 0 4
23889: PUSH
23890: DOUBLE
23891: LD_INT 1
23893: DEC
23894: ST_TO_ADDR
23895: LD_EXP 89
23899: PUSH
23900: LD_VAR 0 5
23904: ARRAY
23905: PUSH
23906: FOR_TO
23907: IFFALSE 23948
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23909: LD_EXP 89
23913: PUSH
23914: LD_VAR 0 5
23918: ARRAY
23919: PUSH
23920: LD_VAR 0 4
23924: ARRAY
23925: PUSH
23926: LD_INT 1
23928: ARRAY
23929: PUSH
23930: LD_VAR 0 2
23934: EQUAL
23935: IFFALSE 23946
// KillUnit ( vehicle ) ;
23937: LD_VAR 0 2
23941: PPUSH
23942: CALL_OW 66
23946: GO 23906
23948: POP
23949: POP
// end ;
23950: LD_VAR 0 3
23954: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23955: LD_EXP 93
23959: NOT
23960: IFFALSE 23995
23962: GO 23964
23964: DISABLE
// begin initMiner := true ;
23965: LD_ADDR_EXP 93
23969: PUSH
23970: LD_INT 1
23972: ST_TO_ADDR
// minersList := [ ] ;
23973: LD_ADDR_EXP 94
23977: PUSH
23978: EMPTY
23979: ST_TO_ADDR
// minerMinesList := [ ] ;
23980: LD_ADDR_EXP 95
23984: PUSH
23985: EMPTY
23986: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23987: LD_ADDR_EXP 96
23991: PUSH
23992: LD_INT 5
23994: ST_TO_ADDR
// end ;
23995: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23996: LD_EXP 93
24000: PUSH
24001: LD_INT 34
24003: PUSH
24004: LD_INT 81
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PPUSH
24011: CALL_OW 69
24015: AND
24016: IFFALSE 24477
24018: GO 24020
24020: DISABLE
24021: LD_INT 0
24023: PPUSH
24024: PPUSH
24025: PPUSH
24026: PPUSH
// begin enable ;
24027: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24028: LD_ADDR_VAR 0 1
24032: PUSH
24033: LD_INT 34
24035: PUSH
24036: LD_INT 81
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PPUSH
24043: CALL_OW 69
24047: PUSH
24048: FOR_IN
24049: IFFALSE 24121
// begin if not i in minersList then
24051: LD_VAR 0 1
24055: PUSH
24056: LD_EXP 94
24060: IN
24061: NOT
24062: IFFALSE 24119
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24064: LD_ADDR_EXP 94
24068: PUSH
24069: LD_EXP 94
24073: PPUSH
24074: LD_EXP 94
24078: PUSH
24079: LD_INT 1
24081: PLUS
24082: PPUSH
24083: LD_VAR 0 1
24087: PPUSH
24088: CALL_OW 1
24092: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24093: LD_ADDR_EXP 95
24097: PUSH
24098: LD_EXP 95
24102: PPUSH
24103: LD_EXP 95
24107: PUSH
24108: LD_INT 1
24110: PLUS
24111: PPUSH
24112: EMPTY
24113: PPUSH
24114: CALL_OW 1
24118: ST_TO_ADDR
// end end ;
24119: GO 24048
24121: POP
24122: POP
// for i := minerMinesList downto 1 do
24123: LD_ADDR_VAR 0 1
24127: PUSH
24128: DOUBLE
24129: LD_EXP 95
24133: INC
24134: ST_TO_ADDR
24135: LD_INT 1
24137: PUSH
24138: FOR_DOWNTO
24139: IFFALSE 24475
// begin if IsLive ( minersList [ i ] ) then
24141: LD_EXP 94
24145: PUSH
24146: LD_VAR 0 1
24150: ARRAY
24151: PPUSH
24152: CALL_OW 300
24156: IFFALSE 24184
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24158: LD_EXP 94
24162: PUSH
24163: LD_VAR 0 1
24167: ARRAY
24168: PPUSH
24169: LD_EXP 95
24173: PUSH
24174: LD_VAR 0 1
24178: ARRAY
24179: PPUSH
24180: CALL_OW 505
// if not minerMinesList [ i ] then
24184: LD_EXP 95
24188: PUSH
24189: LD_VAR 0 1
24193: ARRAY
24194: NOT
24195: IFFALSE 24199
// continue ;
24197: GO 24138
// for j := minerMinesList [ i ] downto 1 do
24199: LD_ADDR_VAR 0 2
24203: PUSH
24204: DOUBLE
24205: LD_EXP 95
24209: PUSH
24210: LD_VAR 0 1
24214: ARRAY
24215: INC
24216: ST_TO_ADDR
24217: LD_INT 1
24219: PUSH
24220: FOR_DOWNTO
24221: IFFALSE 24471
// begin side := GetSide ( minersList [ i ] ) ;
24223: LD_ADDR_VAR 0 3
24227: PUSH
24228: LD_EXP 94
24232: PUSH
24233: LD_VAR 0 1
24237: ARRAY
24238: PPUSH
24239: CALL_OW 255
24243: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24244: LD_ADDR_VAR 0 4
24248: PUSH
24249: LD_EXP 95
24253: PUSH
24254: LD_VAR 0 1
24258: ARRAY
24259: PUSH
24260: LD_VAR 0 2
24264: ARRAY
24265: PUSH
24266: LD_INT 1
24268: ARRAY
24269: PPUSH
24270: LD_EXP 95
24274: PUSH
24275: LD_VAR 0 1
24279: ARRAY
24280: PUSH
24281: LD_VAR 0 2
24285: ARRAY
24286: PUSH
24287: LD_INT 2
24289: ARRAY
24290: PPUSH
24291: CALL_OW 428
24295: ST_TO_ADDR
// if not tmp then
24296: LD_VAR 0 4
24300: NOT
24301: IFFALSE 24305
// continue ;
24303: GO 24220
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24305: LD_VAR 0 4
24309: PUSH
24310: LD_INT 81
24312: PUSH
24313: LD_VAR 0 3
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PPUSH
24322: CALL_OW 69
24326: IN
24327: PUSH
24328: LD_EXP 95
24332: PUSH
24333: LD_VAR 0 1
24337: ARRAY
24338: PUSH
24339: LD_VAR 0 2
24343: ARRAY
24344: PUSH
24345: LD_INT 1
24347: ARRAY
24348: PPUSH
24349: LD_EXP 95
24353: PUSH
24354: LD_VAR 0 1
24358: ARRAY
24359: PUSH
24360: LD_VAR 0 2
24364: ARRAY
24365: PUSH
24366: LD_INT 2
24368: ARRAY
24369: PPUSH
24370: CALL_OW 458
24374: AND
24375: IFFALSE 24469
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24377: LD_EXP 95
24381: PUSH
24382: LD_VAR 0 1
24386: ARRAY
24387: PUSH
24388: LD_VAR 0 2
24392: ARRAY
24393: PUSH
24394: LD_INT 1
24396: ARRAY
24397: PPUSH
24398: LD_EXP 95
24402: PUSH
24403: LD_VAR 0 1
24407: ARRAY
24408: PUSH
24409: LD_VAR 0 2
24413: ARRAY
24414: PUSH
24415: LD_INT 2
24417: ARRAY
24418: PPUSH
24419: LD_VAR 0 3
24423: PPUSH
24424: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24428: LD_ADDR_EXP 95
24432: PUSH
24433: LD_EXP 95
24437: PPUSH
24438: LD_VAR 0 1
24442: PPUSH
24443: LD_EXP 95
24447: PUSH
24448: LD_VAR 0 1
24452: ARRAY
24453: PPUSH
24454: LD_VAR 0 2
24458: PPUSH
24459: CALL_OW 3
24463: PPUSH
24464: CALL_OW 1
24468: ST_TO_ADDR
// end ; end ;
24469: GO 24220
24471: POP
24472: POP
// end ;
24473: GO 24138
24475: POP
24476: POP
// end ;
24477: PPOPN 4
24479: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24480: LD_INT 0
24482: PPUSH
24483: PPUSH
// result := false ;
24484: LD_ADDR_VAR 0 4
24488: PUSH
24489: LD_INT 0
24491: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24492: LD_VAR 0 1
24496: PPUSH
24497: CALL_OW 264
24501: PUSH
24502: LD_INT 81
24504: EQUAL
24505: NOT
24506: IFFALSE 24510
// exit ;
24508: GO 24750
// index := GetElementIndex ( minersList , unit ) ;
24510: LD_ADDR_VAR 0 5
24514: PUSH
24515: LD_EXP 94
24519: PPUSH
24520: LD_VAR 0 1
24524: PPUSH
24525: CALL 30883 0 2
24529: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24530: LD_EXP 95
24534: PUSH
24535: LD_VAR 0 5
24539: ARRAY
24540: PUSH
24541: LD_EXP 96
24545: GREATEREQUAL
24546: IFFALSE 24550
// exit ;
24548: GO 24750
// ComMoveXY ( unit , x , y ) ;
24550: LD_VAR 0 1
24554: PPUSH
24555: LD_VAR 0 2
24559: PPUSH
24560: LD_VAR 0 3
24564: PPUSH
24565: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24569: LD_INT 35
24571: PPUSH
24572: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24576: LD_VAR 0 1
24580: PPUSH
24581: LD_VAR 0 2
24585: PPUSH
24586: LD_VAR 0 3
24590: PPUSH
24591: CALL 62238 0 3
24595: NOT
24596: PUSH
24597: LD_VAR 0 1
24601: PPUSH
24602: CALL_OW 314
24606: AND
24607: IFFALSE 24611
// exit ;
24609: GO 24750
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24611: LD_VAR 0 2
24615: PPUSH
24616: LD_VAR 0 3
24620: PPUSH
24621: CALL_OW 428
24625: PUSH
24626: LD_VAR 0 1
24630: EQUAL
24631: PUSH
24632: LD_VAR 0 1
24636: PPUSH
24637: CALL_OW 314
24641: NOT
24642: AND
24643: IFFALSE 24569
// PlaySoundXY ( x , y , PlantMine ) ;
24645: LD_VAR 0 2
24649: PPUSH
24650: LD_VAR 0 3
24654: PPUSH
24655: LD_STRING PlantMine
24657: PPUSH
24658: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24662: LD_VAR 0 2
24666: PPUSH
24667: LD_VAR 0 3
24671: PPUSH
24672: LD_VAR 0 1
24676: PPUSH
24677: CALL_OW 255
24681: PPUSH
24682: LD_INT 0
24684: PPUSH
24685: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24689: LD_ADDR_EXP 95
24693: PUSH
24694: LD_EXP 95
24698: PPUSH
24699: LD_VAR 0 5
24703: PUSH
24704: LD_EXP 95
24708: PUSH
24709: LD_VAR 0 5
24713: ARRAY
24714: PUSH
24715: LD_INT 1
24717: PLUS
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PPUSH
24723: LD_VAR 0 2
24727: PUSH
24728: LD_VAR 0 3
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PPUSH
24737: CALL 31098 0 3
24741: ST_TO_ADDR
// result := true ;
24742: LD_ADDR_VAR 0 4
24746: PUSH
24747: LD_INT 1
24749: ST_TO_ADDR
// end ;
24750: LD_VAR 0 4
24754: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24755: LD_INT 0
24757: PPUSH
24758: PPUSH
24759: PPUSH
// if not unit in minersList then
24760: LD_VAR 0 1
24764: PUSH
24765: LD_EXP 94
24769: IN
24770: NOT
24771: IFFALSE 24775
// exit ;
24773: GO 25167
// index := GetElementIndex ( minersList , unit ) ;
24775: LD_ADDR_VAR 0 6
24779: PUSH
24780: LD_EXP 94
24784: PPUSH
24785: LD_VAR 0 1
24789: PPUSH
24790: CALL 30883 0 2
24794: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24795: LD_ADDR_VAR 0 5
24799: PUSH
24800: DOUBLE
24801: LD_EXP 95
24805: PUSH
24806: LD_VAR 0 6
24810: ARRAY
24811: INC
24812: ST_TO_ADDR
24813: LD_INT 1
24815: PUSH
24816: FOR_DOWNTO
24817: IFFALSE 24978
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24819: LD_EXP 95
24823: PUSH
24824: LD_VAR 0 6
24828: ARRAY
24829: PUSH
24830: LD_VAR 0 5
24834: ARRAY
24835: PUSH
24836: LD_INT 1
24838: ARRAY
24839: PUSH
24840: LD_VAR 0 2
24844: EQUAL
24845: PUSH
24846: LD_EXP 95
24850: PUSH
24851: LD_VAR 0 6
24855: ARRAY
24856: PUSH
24857: LD_VAR 0 5
24861: ARRAY
24862: PUSH
24863: LD_INT 2
24865: ARRAY
24866: PUSH
24867: LD_VAR 0 3
24871: EQUAL
24872: AND
24873: IFFALSE 24976
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24875: LD_EXP 95
24879: PUSH
24880: LD_VAR 0 6
24884: ARRAY
24885: PUSH
24886: LD_VAR 0 5
24890: ARRAY
24891: PUSH
24892: LD_INT 1
24894: ARRAY
24895: PPUSH
24896: LD_EXP 95
24900: PUSH
24901: LD_VAR 0 6
24905: ARRAY
24906: PUSH
24907: LD_VAR 0 5
24911: ARRAY
24912: PUSH
24913: LD_INT 2
24915: ARRAY
24916: PPUSH
24917: LD_VAR 0 1
24921: PPUSH
24922: CALL_OW 255
24926: PPUSH
24927: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24931: LD_ADDR_EXP 95
24935: PUSH
24936: LD_EXP 95
24940: PPUSH
24941: LD_VAR 0 6
24945: PPUSH
24946: LD_EXP 95
24950: PUSH
24951: LD_VAR 0 6
24955: ARRAY
24956: PPUSH
24957: LD_VAR 0 5
24961: PPUSH
24962: CALL_OW 3
24966: PPUSH
24967: CALL_OW 1
24971: ST_TO_ADDR
// exit ;
24972: POP
24973: POP
24974: GO 25167
// end ; end ;
24976: GO 24816
24978: POP
24979: POP
// for i := minerMinesList [ index ] downto 1 do
24980: LD_ADDR_VAR 0 5
24984: PUSH
24985: DOUBLE
24986: LD_EXP 95
24990: PUSH
24991: LD_VAR 0 6
24995: ARRAY
24996: INC
24997: ST_TO_ADDR
24998: LD_INT 1
25000: PUSH
25001: FOR_DOWNTO
25002: IFFALSE 25165
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25004: LD_EXP 95
25008: PUSH
25009: LD_VAR 0 6
25013: ARRAY
25014: PUSH
25015: LD_VAR 0 5
25019: ARRAY
25020: PUSH
25021: LD_INT 1
25023: ARRAY
25024: PPUSH
25025: LD_EXP 95
25029: PUSH
25030: LD_VAR 0 6
25034: ARRAY
25035: PUSH
25036: LD_VAR 0 5
25040: ARRAY
25041: PUSH
25042: LD_INT 2
25044: ARRAY
25045: PPUSH
25046: LD_VAR 0 2
25050: PPUSH
25051: LD_VAR 0 3
25055: PPUSH
25056: CALL_OW 298
25060: PUSH
25061: LD_INT 6
25063: LESS
25064: IFFALSE 25163
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25066: LD_EXP 95
25070: PUSH
25071: LD_VAR 0 6
25075: ARRAY
25076: PUSH
25077: LD_VAR 0 5
25081: ARRAY
25082: PUSH
25083: LD_INT 1
25085: ARRAY
25086: PPUSH
25087: LD_EXP 95
25091: PUSH
25092: LD_VAR 0 6
25096: ARRAY
25097: PUSH
25098: LD_VAR 0 5
25102: ARRAY
25103: PUSH
25104: LD_INT 2
25106: ARRAY
25107: PPUSH
25108: LD_VAR 0 1
25112: PPUSH
25113: CALL_OW 255
25117: PPUSH
25118: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25122: LD_ADDR_EXP 95
25126: PUSH
25127: LD_EXP 95
25131: PPUSH
25132: LD_VAR 0 6
25136: PPUSH
25137: LD_EXP 95
25141: PUSH
25142: LD_VAR 0 6
25146: ARRAY
25147: PPUSH
25148: LD_VAR 0 5
25152: PPUSH
25153: CALL_OW 3
25157: PPUSH
25158: CALL_OW 1
25162: ST_TO_ADDR
// end ; end ;
25163: GO 25001
25165: POP
25166: POP
// end ;
25167: LD_VAR 0 4
25171: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25172: LD_INT 0
25174: PPUSH
25175: PPUSH
25176: PPUSH
25177: PPUSH
25178: PPUSH
25179: PPUSH
25180: PPUSH
25181: PPUSH
25182: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25183: LD_VAR 0 1
25187: PPUSH
25188: CALL_OW 264
25192: PUSH
25193: LD_INT 81
25195: EQUAL
25196: NOT
25197: PUSH
25198: LD_VAR 0 1
25202: PUSH
25203: LD_EXP 94
25207: IN
25208: NOT
25209: OR
25210: IFFALSE 25214
// exit ;
25212: GO 25536
// index := GetElementIndex ( minersList , unit ) ;
25214: LD_ADDR_VAR 0 6
25218: PUSH
25219: LD_EXP 94
25223: PPUSH
25224: LD_VAR 0 1
25228: PPUSH
25229: CALL 30883 0 2
25233: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25234: LD_ADDR_VAR 0 8
25238: PUSH
25239: LD_EXP 96
25243: PUSH
25244: LD_EXP 95
25248: PUSH
25249: LD_VAR 0 6
25253: ARRAY
25254: MINUS
25255: ST_TO_ADDR
// if not minesFreeAmount then
25256: LD_VAR 0 8
25260: NOT
25261: IFFALSE 25265
// exit ;
25263: GO 25536
// tmp := [ ] ;
25265: LD_ADDR_VAR 0 7
25269: PUSH
25270: EMPTY
25271: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25272: LD_ADDR_VAR 0 5
25276: PUSH
25277: DOUBLE
25278: LD_INT 1
25280: DEC
25281: ST_TO_ADDR
25282: LD_VAR 0 8
25286: PUSH
25287: FOR_TO
25288: IFFALSE 25483
// begin _d := rand ( 0 , 5 ) ;
25290: LD_ADDR_VAR 0 11
25294: PUSH
25295: LD_INT 0
25297: PPUSH
25298: LD_INT 5
25300: PPUSH
25301: CALL_OW 12
25305: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25306: LD_ADDR_VAR 0 12
25310: PUSH
25311: LD_INT 2
25313: PPUSH
25314: LD_INT 6
25316: PPUSH
25317: CALL_OW 12
25321: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25322: LD_ADDR_VAR 0 9
25326: PUSH
25327: LD_VAR 0 2
25331: PPUSH
25332: LD_VAR 0 11
25336: PPUSH
25337: LD_VAR 0 12
25341: PPUSH
25342: CALL_OW 272
25346: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25347: LD_ADDR_VAR 0 10
25351: PUSH
25352: LD_VAR 0 3
25356: PPUSH
25357: LD_VAR 0 11
25361: PPUSH
25362: LD_VAR 0 12
25366: PPUSH
25367: CALL_OW 273
25371: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25372: LD_VAR 0 9
25376: PPUSH
25377: LD_VAR 0 10
25381: PPUSH
25382: CALL_OW 488
25386: PUSH
25387: LD_VAR 0 9
25391: PUSH
25392: LD_VAR 0 10
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: LD_VAR 0 7
25405: IN
25406: NOT
25407: AND
25408: PUSH
25409: LD_VAR 0 9
25413: PPUSH
25414: LD_VAR 0 10
25418: PPUSH
25419: CALL_OW 458
25423: NOT
25424: AND
25425: IFFALSE 25467
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25427: LD_ADDR_VAR 0 7
25431: PUSH
25432: LD_VAR 0 7
25436: PPUSH
25437: LD_VAR 0 7
25441: PUSH
25442: LD_INT 1
25444: PLUS
25445: PPUSH
25446: LD_VAR 0 9
25450: PUSH
25451: LD_VAR 0 10
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PPUSH
25460: CALL_OW 1
25464: ST_TO_ADDR
25465: GO 25481
// i := i - 1 ;
25467: LD_ADDR_VAR 0 5
25471: PUSH
25472: LD_VAR 0 5
25476: PUSH
25477: LD_INT 1
25479: MINUS
25480: ST_TO_ADDR
// end ;
25481: GO 25287
25483: POP
25484: POP
// for i in tmp do
25485: LD_ADDR_VAR 0 5
25489: PUSH
25490: LD_VAR 0 7
25494: PUSH
25495: FOR_IN
25496: IFFALSE 25534
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25498: LD_VAR 0 1
25502: PPUSH
25503: LD_VAR 0 5
25507: PUSH
25508: LD_INT 1
25510: ARRAY
25511: PPUSH
25512: LD_VAR 0 5
25516: PUSH
25517: LD_INT 2
25519: ARRAY
25520: PPUSH
25521: CALL 24480 0 3
25525: NOT
25526: IFFALSE 25532
// exit ;
25528: POP
25529: POP
25530: GO 25536
25532: GO 25495
25534: POP
25535: POP
// end ;
25536: LD_VAR 0 4
25540: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25541: LD_INT 0
25543: PPUSH
25544: PPUSH
25545: PPUSH
25546: PPUSH
25547: PPUSH
25548: PPUSH
25549: PPUSH
// if not GetClass ( unit ) = class_sniper then
25550: LD_VAR 0 1
25554: PPUSH
25555: CALL_OW 257
25559: PUSH
25560: LD_INT 5
25562: EQUAL
25563: NOT
25564: IFFALSE 25568
// exit ;
25566: GO 25956
// dist := 8 ;
25568: LD_ADDR_VAR 0 5
25572: PUSH
25573: LD_INT 8
25575: ST_TO_ADDR
// viewRange := 12 ;
25576: LD_ADDR_VAR 0 7
25580: PUSH
25581: LD_INT 12
25583: ST_TO_ADDR
// side := GetSide ( unit ) ;
25584: LD_ADDR_VAR 0 6
25588: PUSH
25589: LD_VAR 0 1
25593: PPUSH
25594: CALL_OW 255
25598: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25599: LD_INT 61
25601: PPUSH
25602: LD_VAR 0 6
25606: PPUSH
25607: CALL_OW 321
25611: PUSH
25612: LD_INT 2
25614: EQUAL
25615: IFFALSE 25625
// viewRange := 16 ;
25617: LD_ADDR_VAR 0 7
25621: PUSH
25622: LD_INT 16
25624: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25625: LD_VAR 0 1
25629: PPUSH
25630: LD_VAR 0 2
25634: PPUSH
25635: LD_VAR 0 3
25639: PPUSH
25640: CALL_OW 297
25644: PUSH
25645: LD_VAR 0 5
25649: GREATER
25650: IFFALSE 25729
// begin ComMoveXY ( unit , x , y ) ;
25652: LD_VAR 0 1
25656: PPUSH
25657: LD_VAR 0 2
25661: PPUSH
25662: LD_VAR 0 3
25666: PPUSH
25667: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25671: LD_INT 35
25673: PPUSH
25674: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25678: LD_VAR 0 1
25682: PPUSH
25683: LD_VAR 0 2
25687: PPUSH
25688: LD_VAR 0 3
25692: PPUSH
25693: CALL 62238 0 3
25697: NOT
25698: IFFALSE 25702
// exit ;
25700: GO 25956
// until GetDistUnitXY ( unit , x , y ) < dist ;
25702: LD_VAR 0 1
25706: PPUSH
25707: LD_VAR 0 2
25711: PPUSH
25712: LD_VAR 0 3
25716: PPUSH
25717: CALL_OW 297
25721: PUSH
25722: LD_VAR 0 5
25726: LESS
25727: IFFALSE 25671
// end ; ComTurnXY ( unit , x , y ) ;
25729: LD_VAR 0 1
25733: PPUSH
25734: LD_VAR 0 2
25738: PPUSH
25739: LD_VAR 0 3
25743: PPUSH
25744: CALL_OW 118
// wait ( 5 ) ;
25748: LD_INT 5
25750: PPUSH
25751: CALL_OW 67
// _d := GetDir ( unit ) ;
25755: LD_ADDR_VAR 0 10
25759: PUSH
25760: LD_VAR 0 1
25764: PPUSH
25765: CALL_OW 254
25769: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25770: LD_ADDR_VAR 0 8
25774: PUSH
25775: LD_VAR 0 1
25779: PPUSH
25780: CALL_OW 250
25784: PPUSH
25785: LD_VAR 0 10
25789: PPUSH
25790: LD_VAR 0 5
25794: PPUSH
25795: CALL_OW 272
25799: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25800: LD_ADDR_VAR 0 9
25804: PUSH
25805: LD_VAR 0 1
25809: PPUSH
25810: CALL_OW 251
25814: PPUSH
25815: LD_VAR 0 10
25819: PPUSH
25820: LD_VAR 0 5
25824: PPUSH
25825: CALL_OW 273
25829: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25830: LD_VAR 0 8
25834: PPUSH
25835: LD_VAR 0 9
25839: PPUSH
25840: CALL_OW 488
25844: NOT
25845: IFFALSE 25849
// exit ;
25847: GO 25956
// ComAnimCustom ( unit , 1 ) ;
25849: LD_VAR 0 1
25853: PPUSH
25854: LD_INT 1
25856: PPUSH
25857: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25861: LD_VAR 0 8
25865: PPUSH
25866: LD_VAR 0 9
25870: PPUSH
25871: LD_VAR 0 6
25875: PPUSH
25876: LD_VAR 0 7
25880: PPUSH
25881: CALL_OW 330
// repeat wait ( 1 ) ;
25885: LD_INT 1
25887: PPUSH
25888: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25892: LD_VAR 0 1
25896: PPUSH
25897: CALL_OW 316
25901: PUSH
25902: LD_VAR 0 1
25906: PPUSH
25907: CALL_OW 314
25911: OR
25912: PUSH
25913: LD_VAR 0 1
25917: PPUSH
25918: CALL_OW 302
25922: NOT
25923: OR
25924: PUSH
25925: LD_VAR 0 1
25929: PPUSH
25930: CALL_OW 301
25934: OR
25935: IFFALSE 25885
// RemoveSeeing ( _x , _y , side ) ;
25937: LD_VAR 0 8
25941: PPUSH
25942: LD_VAR 0 9
25946: PPUSH
25947: LD_VAR 0 6
25951: PPUSH
25952: CALL_OW 331
// end ; end_of_file
25956: LD_VAR 0 4
25960: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25961: LD_INT 0
25963: PPUSH
25964: PPUSH
// if exist_mode then
25965: LD_VAR 0 2
25969: IFFALSE 25994
// unit := CreateCharacter ( prefix & ident ) else
25971: LD_ADDR_VAR 0 5
25975: PUSH
25976: LD_VAR 0 3
25980: PUSH
25981: LD_VAR 0 1
25985: STR
25986: PPUSH
25987: CALL_OW 34
25991: ST_TO_ADDR
25992: GO 26009
// unit := NewCharacter ( ident ) ;
25994: LD_ADDR_VAR 0 5
25998: PUSH
25999: LD_VAR 0 1
26003: PPUSH
26004: CALL_OW 25
26008: ST_TO_ADDR
// result := unit ;
26009: LD_ADDR_VAR 0 4
26013: PUSH
26014: LD_VAR 0 5
26018: ST_TO_ADDR
// end ;
26019: LD_VAR 0 4
26023: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26024: LD_INT 0
26026: PPUSH
26027: PPUSH
// if not side or not nation then
26028: LD_VAR 0 1
26032: NOT
26033: PUSH
26034: LD_VAR 0 2
26038: NOT
26039: OR
26040: IFFALSE 26044
// exit ;
26042: GO 26812
// case nation of nation_american :
26044: LD_VAR 0 2
26048: PUSH
26049: LD_INT 1
26051: DOUBLE
26052: EQUAL
26053: IFTRUE 26057
26055: GO 26271
26057: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26058: LD_ADDR_VAR 0 4
26062: PUSH
26063: LD_INT 35
26065: PUSH
26066: LD_INT 45
26068: PUSH
26069: LD_INT 46
26071: PUSH
26072: LD_INT 47
26074: PUSH
26075: LD_INT 82
26077: PUSH
26078: LD_INT 83
26080: PUSH
26081: LD_INT 84
26083: PUSH
26084: LD_INT 85
26086: PUSH
26087: LD_INT 86
26089: PUSH
26090: LD_INT 1
26092: PUSH
26093: LD_INT 2
26095: PUSH
26096: LD_INT 6
26098: PUSH
26099: LD_INT 15
26101: PUSH
26102: LD_INT 16
26104: PUSH
26105: LD_INT 7
26107: PUSH
26108: LD_INT 12
26110: PUSH
26111: LD_INT 13
26113: PUSH
26114: LD_INT 10
26116: PUSH
26117: LD_INT 14
26119: PUSH
26120: LD_INT 20
26122: PUSH
26123: LD_INT 21
26125: PUSH
26126: LD_INT 22
26128: PUSH
26129: LD_INT 25
26131: PUSH
26132: LD_INT 32
26134: PUSH
26135: LD_INT 27
26137: PUSH
26138: LD_INT 36
26140: PUSH
26141: LD_INT 69
26143: PUSH
26144: LD_INT 39
26146: PUSH
26147: LD_INT 34
26149: PUSH
26150: LD_INT 40
26152: PUSH
26153: LD_INT 48
26155: PUSH
26156: LD_INT 49
26158: PUSH
26159: LD_INT 50
26161: PUSH
26162: LD_INT 51
26164: PUSH
26165: LD_INT 52
26167: PUSH
26168: LD_INT 53
26170: PUSH
26171: LD_INT 54
26173: PUSH
26174: LD_INT 55
26176: PUSH
26177: LD_INT 56
26179: PUSH
26180: LD_INT 57
26182: PUSH
26183: LD_INT 58
26185: PUSH
26186: LD_INT 59
26188: PUSH
26189: LD_INT 60
26191: PUSH
26192: LD_INT 61
26194: PUSH
26195: LD_INT 62
26197: PUSH
26198: LD_INT 80
26200: PUSH
26201: LD_INT 82
26203: PUSH
26204: LD_INT 83
26206: PUSH
26207: LD_INT 84
26209: PUSH
26210: LD_INT 85
26212: PUSH
26213: LD_INT 86
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: ST_TO_ADDR
26269: GO 26736
26271: LD_INT 2
26273: DOUBLE
26274: EQUAL
26275: IFTRUE 26279
26277: GO 26505
26279: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26280: LD_ADDR_VAR 0 4
26284: PUSH
26285: LD_INT 35
26287: PUSH
26288: LD_INT 45
26290: PUSH
26291: LD_INT 46
26293: PUSH
26294: LD_INT 47
26296: PUSH
26297: LD_INT 82
26299: PUSH
26300: LD_INT 83
26302: PUSH
26303: LD_INT 84
26305: PUSH
26306: LD_INT 85
26308: PUSH
26309: LD_INT 87
26311: PUSH
26312: LD_INT 70
26314: PUSH
26315: LD_INT 1
26317: PUSH
26318: LD_INT 11
26320: PUSH
26321: LD_INT 3
26323: PUSH
26324: LD_INT 4
26326: PUSH
26327: LD_INT 5
26329: PUSH
26330: LD_INT 6
26332: PUSH
26333: LD_INT 15
26335: PUSH
26336: LD_INT 18
26338: PUSH
26339: LD_INT 7
26341: PUSH
26342: LD_INT 17
26344: PUSH
26345: LD_INT 8
26347: PUSH
26348: LD_INT 20
26350: PUSH
26351: LD_INT 21
26353: PUSH
26354: LD_INT 22
26356: PUSH
26357: LD_INT 72
26359: PUSH
26360: LD_INT 26
26362: PUSH
26363: LD_INT 69
26365: PUSH
26366: LD_INT 39
26368: PUSH
26369: LD_INT 40
26371: PUSH
26372: LD_INT 41
26374: PUSH
26375: LD_INT 42
26377: PUSH
26378: LD_INT 43
26380: PUSH
26381: LD_INT 48
26383: PUSH
26384: LD_INT 49
26386: PUSH
26387: LD_INT 50
26389: PUSH
26390: LD_INT 51
26392: PUSH
26393: LD_INT 52
26395: PUSH
26396: LD_INT 53
26398: PUSH
26399: LD_INT 54
26401: PUSH
26402: LD_INT 55
26404: PUSH
26405: LD_INT 56
26407: PUSH
26408: LD_INT 60
26410: PUSH
26411: LD_INT 61
26413: PUSH
26414: LD_INT 62
26416: PUSH
26417: LD_INT 66
26419: PUSH
26420: LD_INT 67
26422: PUSH
26423: LD_INT 68
26425: PUSH
26426: LD_INT 81
26428: PUSH
26429: LD_INT 82
26431: PUSH
26432: LD_INT 83
26434: PUSH
26435: LD_INT 84
26437: PUSH
26438: LD_INT 85
26440: PUSH
26441: LD_INT 87
26443: PUSH
26444: LD_INT 88
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: ST_TO_ADDR
26503: GO 26736
26505: LD_INT 3
26507: DOUBLE
26508: EQUAL
26509: IFTRUE 26513
26511: GO 26735
26513: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26514: LD_ADDR_VAR 0 4
26518: PUSH
26519: LD_INT 46
26521: PUSH
26522: LD_INT 47
26524: PUSH
26525: LD_INT 1
26527: PUSH
26528: LD_INT 2
26530: PUSH
26531: LD_INT 82
26533: PUSH
26534: LD_INT 83
26536: PUSH
26537: LD_INT 84
26539: PUSH
26540: LD_INT 85
26542: PUSH
26543: LD_INT 86
26545: PUSH
26546: LD_INT 11
26548: PUSH
26549: LD_INT 9
26551: PUSH
26552: LD_INT 20
26554: PUSH
26555: LD_INT 19
26557: PUSH
26558: LD_INT 21
26560: PUSH
26561: LD_INT 24
26563: PUSH
26564: LD_INT 22
26566: PUSH
26567: LD_INT 25
26569: PUSH
26570: LD_INT 28
26572: PUSH
26573: LD_INT 29
26575: PUSH
26576: LD_INT 30
26578: PUSH
26579: LD_INT 31
26581: PUSH
26582: LD_INT 37
26584: PUSH
26585: LD_INT 38
26587: PUSH
26588: LD_INT 32
26590: PUSH
26591: LD_INT 27
26593: PUSH
26594: LD_INT 33
26596: PUSH
26597: LD_INT 69
26599: PUSH
26600: LD_INT 39
26602: PUSH
26603: LD_INT 34
26605: PUSH
26606: LD_INT 40
26608: PUSH
26609: LD_INT 71
26611: PUSH
26612: LD_INT 23
26614: PUSH
26615: LD_INT 44
26617: PUSH
26618: LD_INT 48
26620: PUSH
26621: LD_INT 49
26623: PUSH
26624: LD_INT 50
26626: PUSH
26627: LD_INT 51
26629: PUSH
26630: LD_INT 52
26632: PUSH
26633: LD_INT 53
26635: PUSH
26636: LD_INT 54
26638: PUSH
26639: LD_INT 55
26641: PUSH
26642: LD_INT 56
26644: PUSH
26645: LD_INT 57
26647: PUSH
26648: LD_INT 58
26650: PUSH
26651: LD_INT 59
26653: PUSH
26654: LD_INT 63
26656: PUSH
26657: LD_INT 64
26659: PUSH
26660: LD_INT 65
26662: PUSH
26663: LD_INT 82
26665: PUSH
26666: LD_INT 83
26668: PUSH
26669: LD_INT 84
26671: PUSH
26672: LD_INT 85
26674: PUSH
26675: LD_INT 86
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: ST_TO_ADDR
26733: GO 26736
26735: POP
// if state > - 1 and state < 3 then
26736: LD_VAR 0 3
26740: PUSH
26741: LD_INT 1
26743: NEG
26744: GREATER
26745: PUSH
26746: LD_VAR 0 3
26750: PUSH
26751: LD_INT 3
26753: LESS
26754: AND
26755: IFFALSE 26812
// for i in result do
26757: LD_ADDR_VAR 0 5
26761: PUSH
26762: LD_VAR 0 4
26766: PUSH
26767: FOR_IN
26768: IFFALSE 26810
// if GetTech ( i , side ) <> state then
26770: LD_VAR 0 5
26774: PPUSH
26775: LD_VAR 0 1
26779: PPUSH
26780: CALL_OW 321
26784: PUSH
26785: LD_VAR 0 3
26789: NONEQUAL
26790: IFFALSE 26808
// result := result diff i ;
26792: LD_ADDR_VAR 0 4
26796: PUSH
26797: LD_VAR 0 4
26801: PUSH
26802: LD_VAR 0 5
26806: DIFF
26807: ST_TO_ADDR
26808: GO 26767
26810: POP
26811: POP
// end ;
26812: LD_VAR 0 4
26816: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26817: LD_INT 0
26819: PPUSH
26820: PPUSH
26821: PPUSH
// result := true ;
26822: LD_ADDR_VAR 0 3
26826: PUSH
26827: LD_INT 1
26829: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26830: LD_ADDR_VAR 0 5
26834: PUSH
26835: LD_VAR 0 2
26839: PPUSH
26840: CALL_OW 480
26844: ST_TO_ADDR
// if not tmp then
26845: LD_VAR 0 5
26849: NOT
26850: IFFALSE 26854
// exit ;
26852: GO 26903
// for i in tmp do
26854: LD_ADDR_VAR 0 4
26858: PUSH
26859: LD_VAR 0 5
26863: PUSH
26864: FOR_IN
26865: IFFALSE 26901
// if GetTech ( i , side ) <> state_researched then
26867: LD_VAR 0 4
26871: PPUSH
26872: LD_VAR 0 1
26876: PPUSH
26877: CALL_OW 321
26881: PUSH
26882: LD_INT 2
26884: NONEQUAL
26885: IFFALSE 26899
// begin result := false ;
26887: LD_ADDR_VAR 0 3
26891: PUSH
26892: LD_INT 0
26894: ST_TO_ADDR
// exit ;
26895: POP
26896: POP
26897: GO 26903
// end ;
26899: GO 26864
26901: POP
26902: POP
// end ;
26903: LD_VAR 0 3
26907: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26908: LD_INT 0
26910: PPUSH
26911: PPUSH
26912: PPUSH
26913: PPUSH
26914: PPUSH
26915: PPUSH
26916: PPUSH
26917: PPUSH
26918: PPUSH
26919: PPUSH
26920: PPUSH
26921: PPUSH
26922: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26923: LD_VAR 0 1
26927: NOT
26928: PUSH
26929: LD_VAR 0 1
26933: PPUSH
26934: CALL_OW 257
26938: PUSH
26939: LD_INT 9
26941: NONEQUAL
26942: OR
26943: IFFALSE 26947
// exit ;
26945: GO 27520
// side := GetSide ( unit ) ;
26947: LD_ADDR_VAR 0 9
26951: PUSH
26952: LD_VAR 0 1
26956: PPUSH
26957: CALL_OW 255
26961: ST_TO_ADDR
// tech_space := tech_spacanom ;
26962: LD_ADDR_VAR 0 12
26966: PUSH
26967: LD_INT 29
26969: ST_TO_ADDR
// tech_time := tech_taurad ;
26970: LD_ADDR_VAR 0 13
26974: PUSH
26975: LD_INT 28
26977: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26978: LD_ADDR_VAR 0 11
26982: PUSH
26983: LD_VAR 0 1
26987: PPUSH
26988: CALL_OW 310
26992: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26993: LD_VAR 0 11
26997: PPUSH
26998: CALL_OW 247
27002: PUSH
27003: LD_INT 2
27005: EQUAL
27006: IFFALSE 27010
// exit ;
27008: GO 27520
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27010: LD_ADDR_VAR 0 8
27014: PUSH
27015: LD_INT 81
27017: PUSH
27018: LD_VAR 0 9
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 3
27029: PUSH
27030: LD_INT 21
27032: PUSH
27033: LD_INT 3
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PPUSH
27048: CALL_OW 69
27052: ST_TO_ADDR
// if not tmp then
27053: LD_VAR 0 8
27057: NOT
27058: IFFALSE 27062
// exit ;
27060: GO 27520
// if in_unit then
27062: LD_VAR 0 11
27066: IFFALSE 27090
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27068: LD_ADDR_VAR 0 10
27072: PUSH
27073: LD_VAR 0 8
27077: PPUSH
27078: LD_VAR 0 11
27082: PPUSH
27083: CALL_OW 74
27087: ST_TO_ADDR
27088: GO 27110
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27090: LD_ADDR_VAR 0 10
27094: PUSH
27095: LD_VAR 0 8
27099: PPUSH
27100: LD_VAR 0 1
27104: PPUSH
27105: CALL_OW 74
27109: ST_TO_ADDR
// if not enemy then
27110: LD_VAR 0 10
27114: NOT
27115: IFFALSE 27119
// exit ;
27117: GO 27520
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27119: LD_VAR 0 11
27123: PUSH
27124: LD_VAR 0 11
27128: PPUSH
27129: LD_VAR 0 10
27133: PPUSH
27134: CALL_OW 296
27138: PUSH
27139: LD_INT 13
27141: GREATER
27142: AND
27143: PUSH
27144: LD_VAR 0 1
27148: PPUSH
27149: LD_VAR 0 10
27153: PPUSH
27154: CALL_OW 296
27158: PUSH
27159: LD_INT 12
27161: GREATER
27162: OR
27163: IFFALSE 27167
// exit ;
27165: GO 27520
// missile := [ 1 ] ;
27167: LD_ADDR_VAR 0 14
27171: PUSH
27172: LD_INT 1
27174: PUSH
27175: EMPTY
27176: LIST
27177: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27178: LD_VAR 0 9
27182: PPUSH
27183: LD_VAR 0 12
27187: PPUSH
27188: CALL_OW 325
27192: IFFALSE 27221
// missile := Replace ( missile , missile + 1 , 2 ) ;
27194: LD_ADDR_VAR 0 14
27198: PUSH
27199: LD_VAR 0 14
27203: PPUSH
27204: LD_VAR 0 14
27208: PUSH
27209: LD_INT 1
27211: PLUS
27212: PPUSH
27213: LD_INT 2
27215: PPUSH
27216: CALL_OW 1
27220: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27221: LD_VAR 0 9
27225: PPUSH
27226: LD_VAR 0 13
27230: PPUSH
27231: CALL_OW 325
27235: PUSH
27236: LD_VAR 0 10
27240: PPUSH
27241: CALL_OW 255
27245: PPUSH
27246: LD_VAR 0 13
27250: PPUSH
27251: CALL_OW 325
27255: NOT
27256: AND
27257: IFFALSE 27286
// missile := Replace ( missile , missile + 1 , 3 ) ;
27259: LD_ADDR_VAR 0 14
27263: PUSH
27264: LD_VAR 0 14
27268: PPUSH
27269: LD_VAR 0 14
27273: PUSH
27274: LD_INT 1
27276: PLUS
27277: PPUSH
27278: LD_INT 3
27280: PPUSH
27281: CALL_OW 1
27285: ST_TO_ADDR
// if missile < 2 then
27286: LD_VAR 0 14
27290: PUSH
27291: LD_INT 2
27293: LESS
27294: IFFALSE 27298
// exit ;
27296: GO 27520
// x := GetX ( enemy ) ;
27298: LD_ADDR_VAR 0 4
27302: PUSH
27303: LD_VAR 0 10
27307: PPUSH
27308: CALL_OW 250
27312: ST_TO_ADDR
// y := GetY ( enemy ) ;
27313: LD_ADDR_VAR 0 5
27317: PUSH
27318: LD_VAR 0 10
27322: PPUSH
27323: CALL_OW 251
27327: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27328: LD_ADDR_VAR 0 6
27332: PUSH
27333: LD_VAR 0 4
27337: PUSH
27338: LD_INT 1
27340: NEG
27341: PPUSH
27342: LD_INT 1
27344: PPUSH
27345: CALL_OW 12
27349: PLUS
27350: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27351: LD_ADDR_VAR 0 7
27355: PUSH
27356: LD_VAR 0 5
27360: PUSH
27361: LD_INT 1
27363: NEG
27364: PPUSH
27365: LD_INT 1
27367: PPUSH
27368: CALL_OW 12
27372: PLUS
27373: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27374: LD_VAR 0 6
27378: PPUSH
27379: LD_VAR 0 7
27383: PPUSH
27384: CALL_OW 488
27388: NOT
27389: IFFALSE 27411
// begin _x := x ;
27391: LD_ADDR_VAR 0 6
27395: PUSH
27396: LD_VAR 0 4
27400: ST_TO_ADDR
// _y := y ;
27401: LD_ADDR_VAR 0 7
27405: PUSH
27406: LD_VAR 0 5
27410: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27411: LD_ADDR_VAR 0 3
27415: PUSH
27416: LD_INT 1
27418: PPUSH
27419: LD_VAR 0 14
27423: PPUSH
27424: CALL_OW 12
27428: ST_TO_ADDR
// case i of 1 :
27429: LD_VAR 0 3
27433: PUSH
27434: LD_INT 1
27436: DOUBLE
27437: EQUAL
27438: IFTRUE 27442
27440: GO 27459
27442: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27443: LD_VAR 0 1
27447: PPUSH
27448: LD_VAR 0 10
27452: PPUSH
27453: CALL_OW 115
27457: GO 27520
27459: LD_INT 2
27461: DOUBLE
27462: EQUAL
27463: IFTRUE 27467
27465: GO 27489
27467: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27468: LD_VAR 0 1
27472: PPUSH
27473: LD_VAR 0 6
27477: PPUSH
27478: LD_VAR 0 7
27482: PPUSH
27483: CALL_OW 153
27487: GO 27520
27489: LD_INT 3
27491: DOUBLE
27492: EQUAL
27493: IFTRUE 27497
27495: GO 27519
27497: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27498: LD_VAR 0 1
27502: PPUSH
27503: LD_VAR 0 6
27507: PPUSH
27508: LD_VAR 0 7
27512: PPUSH
27513: CALL_OW 154
27517: GO 27520
27519: POP
// end ;
27520: LD_VAR 0 2
27524: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27525: LD_INT 0
27527: PPUSH
27528: PPUSH
27529: PPUSH
27530: PPUSH
27531: PPUSH
27532: PPUSH
// if not unit or not building then
27533: LD_VAR 0 1
27537: NOT
27538: PUSH
27539: LD_VAR 0 2
27543: NOT
27544: OR
27545: IFFALSE 27549
// exit ;
27547: GO 27707
// x := GetX ( building ) ;
27549: LD_ADDR_VAR 0 5
27553: PUSH
27554: LD_VAR 0 2
27558: PPUSH
27559: CALL_OW 250
27563: ST_TO_ADDR
// y := GetY ( building ) ;
27564: LD_ADDR_VAR 0 6
27568: PUSH
27569: LD_VAR 0 2
27573: PPUSH
27574: CALL_OW 251
27578: ST_TO_ADDR
// for i = 0 to 5 do
27579: LD_ADDR_VAR 0 4
27583: PUSH
27584: DOUBLE
27585: LD_INT 0
27587: DEC
27588: ST_TO_ADDR
27589: LD_INT 5
27591: PUSH
27592: FOR_TO
27593: IFFALSE 27705
// begin _x := ShiftX ( x , i , 3 ) ;
27595: LD_ADDR_VAR 0 7
27599: PUSH
27600: LD_VAR 0 5
27604: PPUSH
27605: LD_VAR 0 4
27609: PPUSH
27610: LD_INT 3
27612: PPUSH
27613: CALL_OW 272
27617: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27618: LD_ADDR_VAR 0 8
27622: PUSH
27623: LD_VAR 0 6
27627: PPUSH
27628: LD_VAR 0 4
27632: PPUSH
27633: LD_INT 3
27635: PPUSH
27636: CALL_OW 273
27640: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27641: LD_VAR 0 7
27645: PPUSH
27646: LD_VAR 0 8
27650: PPUSH
27651: CALL_OW 488
27655: NOT
27656: IFFALSE 27660
// continue ;
27658: GO 27592
// if HexInfo ( _x , _y ) = 0 then
27660: LD_VAR 0 7
27664: PPUSH
27665: LD_VAR 0 8
27669: PPUSH
27670: CALL_OW 428
27674: PUSH
27675: LD_INT 0
27677: EQUAL
27678: IFFALSE 27703
// begin ComMoveXY ( unit , _x , _y ) ;
27680: LD_VAR 0 1
27684: PPUSH
27685: LD_VAR 0 7
27689: PPUSH
27690: LD_VAR 0 8
27694: PPUSH
27695: CALL_OW 111
// exit ;
27699: POP
27700: POP
27701: GO 27707
// end ; end ;
27703: GO 27592
27705: POP
27706: POP
// end ;
27707: LD_VAR 0 3
27711: RET
// export function ScanBase ( side , base_area ) ; begin
27712: LD_INT 0
27714: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27715: LD_ADDR_VAR 0 3
27719: PUSH
27720: LD_VAR 0 2
27724: PPUSH
27725: LD_INT 81
27727: PUSH
27728: LD_VAR 0 1
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PPUSH
27737: CALL_OW 70
27741: ST_TO_ADDR
// end ;
27742: LD_VAR 0 3
27746: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27747: LD_INT 0
27749: PPUSH
27750: PPUSH
27751: PPUSH
27752: PPUSH
// result := false ;
27753: LD_ADDR_VAR 0 2
27757: PUSH
27758: LD_INT 0
27760: ST_TO_ADDR
// side := GetSide ( unit ) ;
27761: LD_ADDR_VAR 0 3
27765: PUSH
27766: LD_VAR 0 1
27770: PPUSH
27771: CALL_OW 255
27775: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27776: LD_ADDR_VAR 0 4
27780: PUSH
27781: LD_VAR 0 1
27785: PPUSH
27786: CALL_OW 248
27790: ST_TO_ADDR
// case nat of 1 :
27791: LD_VAR 0 4
27795: PUSH
27796: LD_INT 1
27798: DOUBLE
27799: EQUAL
27800: IFTRUE 27804
27802: GO 27815
27804: POP
// tech := tech_lassight ; 2 :
27805: LD_ADDR_VAR 0 5
27809: PUSH
27810: LD_INT 12
27812: ST_TO_ADDR
27813: GO 27854
27815: LD_INT 2
27817: DOUBLE
27818: EQUAL
27819: IFTRUE 27823
27821: GO 27834
27823: POP
// tech := tech_mortar ; 3 :
27824: LD_ADDR_VAR 0 5
27828: PUSH
27829: LD_INT 41
27831: ST_TO_ADDR
27832: GO 27854
27834: LD_INT 3
27836: DOUBLE
27837: EQUAL
27838: IFTRUE 27842
27840: GO 27853
27842: POP
// tech := tech_bazooka ; end ;
27843: LD_ADDR_VAR 0 5
27847: PUSH
27848: LD_INT 44
27850: ST_TO_ADDR
27851: GO 27854
27853: POP
// if Researched ( side , tech ) then
27854: LD_VAR 0 3
27858: PPUSH
27859: LD_VAR 0 5
27863: PPUSH
27864: CALL_OW 325
27868: IFFALSE 27895
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27870: LD_ADDR_VAR 0 2
27874: PUSH
27875: LD_INT 5
27877: PUSH
27878: LD_INT 8
27880: PUSH
27881: LD_INT 9
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: LIST
27888: PUSH
27889: LD_VAR 0 4
27893: ARRAY
27894: ST_TO_ADDR
// end ;
27895: LD_VAR 0 2
27899: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27900: LD_INT 0
27902: PPUSH
27903: PPUSH
27904: PPUSH
// if not mines then
27905: LD_VAR 0 2
27909: NOT
27910: IFFALSE 27914
// exit ;
27912: GO 28058
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27914: LD_ADDR_VAR 0 5
27918: PUSH
27919: LD_INT 81
27921: PUSH
27922: LD_VAR 0 1
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 3
27933: PUSH
27934: LD_INT 21
27936: PUSH
27937: LD_INT 3
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PPUSH
27952: CALL_OW 69
27956: ST_TO_ADDR
// for i in mines do
27957: LD_ADDR_VAR 0 4
27961: PUSH
27962: LD_VAR 0 2
27966: PUSH
27967: FOR_IN
27968: IFFALSE 28056
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27970: LD_VAR 0 4
27974: PUSH
27975: LD_INT 1
27977: ARRAY
27978: PPUSH
27979: LD_VAR 0 4
27983: PUSH
27984: LD_INT 2
27986: ARRAY
27987: PPUSH
27988: CALL_OW 458
27992: NOT
27993: IFFALSE 27997
// continue ;
27995: GO 27967
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27997: LD_VAR 0 4
28001: PUSH
28002: LD_INT 1
28004: ARRAY
28005: PPUSH
28006: LD_VAR 0 4
28010: PUSH
28011: LD_INT 2
28013: ARRAY
28014: PPUSH
28015: CALL_OW 428
28019: PUSH
28020: LD_VAR 0 5
28024: IN
28025: IFFALSE 28054
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28027: LD_VAR 0 4
28031: PUSH
28032: LD_INT 1
28034: ARRAY
28035: PPUSH
28036: LD_VAR 0 4
28040: PUSH
28041: LD_INT 2
28043: ARRAY
28044: PPUSH
28045: LD_VAR 0 1
28049: PPUSH
28050: CALL_OW 456
// end ;
28054: GO 27967
28056: POP
28057: POP
// end ;
28058: LD_VAR 0 3
28062: RET
// export function Count ( array ) ; var i ; begin
28063: LD_INT 0
28065: PPUSH
28066: PPUSH
// result := 0 ;
28067: LD_ADDR_VAR 0 2
28071: PUSH
28072: LD_INT 0
28074: ST_TO_ADDR
// for i in array do
28075: LD_ADDR_VAR 0 3
28079: PUSH
28080: LD_VAR 0 1
28084: PUSH
28085: FOR_IN
28086: IFFALSE 28110
// if i then
28088: LD_VAR 0 3
28092: IFFALSE 28108
// result := result + 1 ;
28094: LD_ADDR_VAR 0 2
28098: PUSH
28099: LD_VAR 0 2
28103: PUSH
28104: LD_INT 1
28106: PLUS
28107: ST_TO_ADDR
28108: GO 28085
28110: POP
28111: POP
// end ;
28112: LD_VAR 0 2
28116: RET
// export function IsEmpty ( building ) ; begin
28117: LD_INT 0
28119: PPUSH
// if not building then
28120: LD_VAR 0 1
28124: NOT
28125: IFFALSE 28129
// exit ;
28127: GO 28172
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28129: LD_ADDR_VAR 0 2
28133: PUSH
28134: LD_VAR 0 1
28138: PUSH
28139: LD_INT 22
28141: PUSH
28142: LD_VAR 0 1
28146: PPUSH
28147: CALL_OW 255
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 58
28158: PUSH
28159: EMPTY
28160: LIST
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PPUSH
28166: CALL_OW 69
28170: IN
28171: ST_TO_ADDR
// end ;
28172: LD_VAR 0 2
28176: RET
// export function IsNotFull ( building ) ; var places ; begin
28177: LD_INT 0
28179: PPUSH
28180: PPUSH
// if not building then
28181: LD_VAR 0 1
28185: NOT
28186: IFFALSE 28190
// exit ;
28188: GO 28361
// result := false ;
28190: LD_ADDR_VAR 0 2
28194: PUSH
28195: LD_INT 0
28197: ST_TO_ADDR
// places := 0 ;
28198: LD_ADDR_VAR 0 3
28202: PUSH
28203: LD_INT 0
28205: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
28206: LD_VAR 0 1
28210: PPUSH
28211: CALL_OW 266
28215: PUSH
28216: LD_INT 0
28218: DOUBLE
28219: EQUAL
28220: IFTRUE 28278
28222: LD_INT 1
28224: DOUBLE
28225: EQUAL
28226: IFTRUE 28278
28228: LD_INT 6
28230: DOUBLE
28231: EQUAL
28232: IFTRUE 28278
28234: LD_INT 7
28236: DOUBLE
28237: EQUAL
28238: IFTRUE 28278
28240: LD_INT 8
28242: DOUBLE
28243: EQUAL
28244: IFTRUE 28278
28246: LD_INT 4
28248: DOUBLE
28249: EQUAL
28250: IFTRUE 28278
28252: LD_INT 5
28254: DOUBLE
28255: EQUAL
28256: IFTRUE 28278
28258: LD_INT 2
28260: DOUBLE
28261: EQUAL
28262: IFTRUE 28278
28264: LD_INT 3
28266: DOUBLE
28267: EQUAL
28268: IFTRUE 28278
28270: LD_INT 35
28272: DOUBLE
28273: EQUAL
28274: IFTRUE 28278
28276: GO 28289
28278: POP
// places := 6 ; b_bunker , b_breastwork :
28279: LD_ADDR_VAR 0 3
28283: PUSH
28284: LD_INT 6
28286: ST_TO_ADDR
28287: GO 28334
28289: LD_INT 32
28291: DOUBLE
28292: EQUAL
28293: IFTRUE 28303
28295: LD_INT 31
28297: DOUBLE
28298: EQUAL
28299: IFTRUE 28303
28301: GO 28314
28303: POP
// places := 1 ; b_control_tower :
28304: LD_ADDR_VAR 0 3
28308: PUSH
28309: LD_INT 1
28311: ST_TO_ADDR
28312: GO 28334
28314: LD_INT 36
28316: DOUBLE
28317: EQUAL
28318: IFTRUE 28322
28320: GO 28333
28322: POP
// places := 3 ; end ;
28323: LD_ADDR_VAR 0 3
28327: PUSH
28328: LD_INT 3
28330: ST_TO_ADDR
28331: GO 28334
28333: POP
// if places then
28334: LD_VAR 0 3
28338: IFFALSE 28361
// result := UnitsInside ( building ) < places ;
28340: LD_ADDR_VAR 0 2
28344: PUSH
28345: LD_VAR 0 1
28349: PPUSH
28350: CALL_OW 313
28354: PUSH
28355: LD_VAR 0 3
28359: LESS
28360: ST_TO_ADDR
// end ;
28361: LD_VAR 0 2
28365: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28366: LD_INT 0
28368: PPUSH
28369: PPUSH
28370: PPUSH
28371: PPUSH
// tmp := [ ] ;
28372: LD_ADDR_VAR 0 3
28376: PUSH
28377: EMPTY
28378: ST_TO_ADDR
// list := [ ] ;
28379: LD_ADDR_VAR 0 5
28383: PUSH
28384: EMPTY
28385: ST_TO_ADDR
// for i = 16 to 25 do
28386: LD_ADDR_VAR 0 4
28390: PUSH
28391: DOUBLE
28392: LD_INT 16
28394: DEC
28395: ST_TO_ADDR
28396: LD_INT 25
28398: PUSH
28399: FOR_TO
28400: IFFALSE 28473
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28402: LD_ADDR_VAR 0 3
28406: PUSH
28407: LD_VAR 0 3
28411: PUSH
28412: LD_INT 22
28414: PUSH
28415: LD_VAR 0 1
28419: PPUSH
28420: CALL_OW 255
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PUSH
28429: LD_INT 91
28431: PUSH
28432: LD_VAR 0 1
28436: PUSH
28437: LD_INT 6
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: LIST
28444: PUSH
28445: LD_INT 30
28447: PUSH
28448: LD_VAR 0 4
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: LIST
28461: PUSH
28462: EMPTY
28463: LIST
28464: PPUSH
28465: CALL_OW 69
28469: ADD
28470: ST_TO_ADDR
28471: GO 28399
28473: POP
28474: POP
// for i = 1 to tmp do
28475: LD_ADDR_VAR 0 4
28479: PUSH
28480: DOUBLE
28481: LD_INT 1
28483: DEC
28484: ST_TO_ADDR
28485: LD_VAR 0 3
28489: PUSH
28490: FOR_TO
28491: IFFALSE 28579
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28493: LD_ADDR_VAR 0 5
28497: PUSH
28498: LD_VAR 0 5
28502: PUSH
28503: LD_VAR 0 3
28507: PUSH
28508: LD_VAR 0 4
28512: ARRAY
28513: PPUSH
28514: CALL_OW 266
28518: PUSH
28519: LD_VAR 0 3
28523: PUSH
28524: LD_VAR 0 4
28528: ARRAY
28529: PPUSH
28530: CALL_OW 250
28534: PUSH
28535: LD_VAR 0 3
28539: PUSH
28540: LD_VAR 0 4
28544: ARRAY
28545: PPUSH
28546: CALL_OW 251
28550: PUSH
28551: LD_VAR 0 3
28555: PUSH
28556: LD_VAR 0 4
28560: ARRAY
28561: PPUSH
28562: CALL_OW 254
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: PUSH
28573: EMPTY
28574: LIST
28575: ADD
28576: ST_TO_ADDR
28577: GO 28490
28579: POP
28580: POP
// result := list ;
28581: LD_ADDR_VAR 0 2
28585: PUSH
28586: LD_VAR 0 5
28590: ST_TO_ADDR
// end ;
28591: LD_VAR 0 2
28595: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28596: LD_INT 0
28598: PPUSH
28599: PPUSH
28600: PPUSH
28601: PPUSH
28602: PPUSH
28603: PPUSH
28604: PPUSH
// if not factory then
28605: LD_VAR 0 1
28609: NOT
28610: IFFALSE 28614
// exit ;
28612: GO 29207
// if control = control_apeman then
28614: LD_VAR 0 4
28618: PUSH
28619: LD_INT 5
28621: EQUAL
28622: IFFALSE 28731
// begin tmp := UnitsInside ( factory ) ;
28624: LD_ADDR_VAR 0 8
28628: PUSH
28629: LD_VAR 0 1
28633: PPUSH
28634: CALL_OW 313
28638: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28639: LD_VAR 0 8
28643: PPUSH
28644: LD_INT 25
28646: PUSH
28647: LD_INT 12
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PPUSH
28654: CALL_OW 72
28658: NOT
28659: IFFALSE 28669
// control := control_manual ;
28661: LD_ADDR_VAR 0 4
28665: PUSH
28666: LD_INT 1
28668: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28669: LD_ADDR_VAR 0 8
28673: PUSH
28674: LD_VAR 0 1
28678: PPUSH
28679: CALL 28366 0 1
28683: ST_TO_ADDR
// if tmp then
28684: LD_VAR 0 8
28688: IFFALSE 28731
// begin for i in tmp do
28690: LD_ADDR_VAR 0 7
28694: PUSH
28695: LD_VAR 0 8
28699: PUSH
28700: FOR_IN
28701: IFFALSE 28729
// if i [ 1 ] = b_ext_radio then
28703: LD_VAR 0 7
28707: PUSH
28708: LD_INT 1
28710: ARRAY
28711: PUSH
28712: LD_INT 22
28714: EQUAL
28715: IFFALSE 28727
// begin control := control_remote ;
28717: LD_ADDR_VAR 0 4
28721: PUSH
28722: LD_INT 2
28724: ST_TO_ADDR
// break ;
28725: GO 28729
// end ;
28727: GO 28700
28729: POP
28730: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28731: LD_VAR 0 1
28735: PPUSH
28736: LD_VAR 0 2
28740: PPUSH
28741: LD_VAR 0 3
28745: PPUSH
28746: LD_VAR 0 4
28750: PPUSH
28751: LD_VAR 0 5
28755: PPUSH
28756: CALL_OW 448
28760: IFFALSE 28795
// begin result := [ chassis , engine , control , weapon ] ;
28762: LD_ADDR_VAR 0 6
28766: PUSH
28767: LD_VAR 0 2
28771: PUSH
28772: LD_VAR 0 3
28776: PUSH
28777: LD_VAR 0 4
28781: PUSH
28782: LD_VAR 0 5
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: ST_TO_ADDR
// exit ;
28793: GO 29207
// end ; _chassis := AvailableChassisList ( factory ) ;
28795: LD_ADDR_VAR 0 9
28799: PUSH
28800: LD_VAR 0 1
28804: PPUSH
28805: CALL_OW 475
28809: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28810: LD_ADDR_VAR 0 11
28814: PUSH
28815: LD_VAR 0 1
28819: PPUSH
28820: CALL_OW 476
28824: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28825: LD_ADDR_VAR 0 12
28829: PUSH
28830: LD_VAR 0 1
28834: PPUSH
28835: CALL_OW 477
28839: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28840: LD_ADDR_VAR 0 10
28844: PUSH
28845: LD_VAR 0 1
28849: PPUSH
28850: CALL_OW 478
28854: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28855: LD_VAR 0 9
28859: NOT
28860: PUSH
28861: LD_VAR 0 11
28865: NOT
28866: OR
28867: PUSH
28868: LD_VAR 0 12
28872: NOT
28873: OR
28874: PUSH
28875: LD_VAR 0 10
28879: NOT
28880: OR
28881: IFFALSE 28916
// begin result := [ chassis , engine , control , weapon ] ;
28883: LD_ADDR_VAR 0 6
28887: PUSH
28888: LD_VAR 0 2
28892: PUSH
28893: LD_VAR 0 3
28897: PUSH
28898: LD_VAR 0 4
28902: PUSH
28903: LD_VAR 0 5
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: ST_TO_ADDR
// exit ;
28914: GO 29207
// end ; if not chassis in _chassis then
28916: LD_VAR 0 2
28920: PUSH
28921: LD_VAR 0 9
28925: IN
28926: NOT
28927: IFFALSE 28953
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28929: LD_ADDR_VAR 0 2
28933: PUSH
28934: LD_VAR 0 9
28938: PUSH
28939: LD_INT 1
28941: PPUSH
28942: LD_VAR 0 9
28946: PPUSH
28947: CALL_OW 12
28951: ARRAY
28952: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28953: LD_VAR 0 2
28957: PPUSH
28958: LD_VAR 0 3
28962: PPUSH
28963: CALL 29212 0 2
28967: NOT
28968: IFFALSE 29027
// repeat engine := _engine [ 1 ] ;
28970: LD_ADDR_VAR 0 3
28974: PUSH
28975: LD_VAR 0 11
28979: PUSH
28980: LD_INT 1
28982: ARRAY
28983: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28984: LD_ADDR_VAR 0 11
28988: PUSH
28989: LD_VAR 0 11
28993: PPUSH
28994: LD_INT 1
28996: PPUSH
28997: CALL_OW 3
29001: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29002: LD_VAR 0 2
29006: PPUSH
29007: LD_VAR 0 3
29011: PPUSH
29012: CALL 29212 0 2
29016: PUSH
29017: LD_VAR 0 11
29021: PUSH
29022: EMPTY
29023: EQUAL
29024: OR
29025: IFFALSE 28970
// if not control in _control then
29027: LD_VAR 0 4
29031: PUSH
29032: LD_VAR 0 12
29036: IN
29037: NOT
29038: IFFALSE 29064
// control := _control [ rand ( 1 , _control ) ] ;
29040: LD_ADDR_VAR 0 4
29044: PUSH
29045: LD_VAR 0 12
29049: PUSH
29050: LD_INT 1
29052: PPUSH
29053: LD_VAR 0 12
29057: PPUSH
29058: CALL_OW 12
29062: ARRAY
29063: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29064: LD_VAR 0 2
29068: PPUSH
29069: LD_VAR 0 5
29073: PPUSH
29074: CALL 29432 0 2
29078: NOT
29079: IFFALSE 29138
// repeat weapon := _weapon [ 1 ] ;
29081: LD_ADDR_VAR 0 5
29085: PUSH
29086: LD_VAR 0 10
29090: PUSH
29091: LD_INT 1
29093: ARRAY
29094: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29095: LD_ADDR_VAR 0 10
29099: PUSH
29100: LD_VAR 0 10
29104: PPUSH
29105: LD_INT 1
29107: PPUSH
29108: CALL_OW 3
29112: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29113: LD_VAR 0 2
29117: PPUSH
29118: LD_VAR 0 5
29122: PPUSH
29123: CALL 29432 0 2
29127: PUSH
29128: LD_VAR 0 10
29132: PUSH
29133: EMPTY
29134: EQUAL
29135: OR
29136: IFFALSE 29081
// result := [ ] ;
29138: LD_ADDR_VAR 0 6
29142: PUSH
29143: EMPTY
29144: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29145: LD_VAR 0 1
29149: PPUSH
29150: LD_VAR 0 2
29154: PPUSH
29155: LD_VAR 0 3
29159: PPUSH
29160: LD_VAR 0 4
29164: PPUSH
29165: LD_VAR 0 5
29169: PPUSH
29170: CALL_OW 448
29174: IFFALSE 29207
// result := [ chassis , engine , control , weapon ] ;
29176: LD_ADDR_VAR 0 6
29180: PUSH
29181: LD_VAR 0 2
29185: PUSH
29186: LD_VAR 0 3
29190: PUSH
29191: LD_VAR 0 4
29195: PUSH
29196: LD_VAR 0 5
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: ST_TO_ADDR
// end ;
29207: LD_VAR 0 6
29211: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29212: LD_INT 0
29214: PPUSH
// if not chassis or not engine then
29215: LD_VAR 0 1
29219: NOT
29220: PUSH
29221: LD_VAR 0 2
29225: NOT
29226: OR
29227: IFFALSE 29231
// exit ;
29229: GO 29427
// case engine of engine_solar :
29231: LD_VAR 0 2
29235: PUSH
29236: LD_INT 2
29238: DOUBLE
29239: EQUAL
29240: IFTRUE 29244
29242: GO 29282
29244: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29245: LD_ADDR_VAR 0 3
29249: PUSH
29250: LD_INT 11
29252: PUSH
29253: LD_INT 12
29255: PUSH
29256: LD_INT 13
29258: PUSH
29259: LD_INT 14
29261: PUSH
29262: LD_INT 1
29264: PUSH
29265: LD_INT 2
29267: PUSH
29268: LD_INT 3
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: ST_TO_ADDR
29280: GO 29411
29282: LD_INT 1
29284: DOUBLE
29285: EQUAL
29286: IFTRUE 29290
29288: GO 29352
29290: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29291: LD_ADDR_VAR 0 3
29295: PUSH
29296: LD_INT 11
29298: PUSH
29299: LD_INT 12
29301: PUSH
29302: LD_INT 13
29304: PUSH
29305: LD_INT 14
29307: PUSH
29308: LD_INT 1
29310: PUSH
29311: LD_INT 2
29313: PUSH
29314: LD_INT 3
29316: PUSH
29317: LD_INT 4
29319: PUSH
29320: LD_INT 5
29322: PUSH
29323: LD_INT 21
29325: PUSH
29326: LD_INT 23
29328: PUSH
29329: LD_INT 22
29331: PUSH
29332: LD_INT 24
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: ST_TO_ADDR
29350: GO 29411
29352: LD_INT 3
29354: DOUBLE
29355: EQUAL
29356: IFTRUE 29360
29358: GO 29410
29360: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29361: LD_ADDR_VAR 0 3
29365: PUSH
29366: LD_INT 13
29368: PUSH
29369: LD_INT 14
29371: PUSH
29372: LD_INT 2
29374: PUSH
29375: LD_INT 3
29377: PUSH
29378: LD_INT 4
29380: PUSH
29381: LD_INT 5
29383: PUSH
29384: LD_INT 21
29386: PUSH
29387: LD_INT 22
29389: PUSH
29390: LD_INT 23
29392: PUSH
29393: LD_INT 24
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: ST_TO_ADDR
29408: GO 29411
29410: POP
// result := ( chassis in result ) ;
29411: LD_ADDR_VAR 0 3
29415: PUSH
29416: LD_VAR 0 1
29420: PUSH
29421: LD_VAR 0 3
29425: IN
29426: ST_TO_ADDR
// end ;
29427: LD_VAR 0 3
29431: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29432: LD_INT 0
29434: PPUSH
// if not chassis or not weapon then
29435: LD_VAR 0 1
29439: NOT
29440: PUSH
29441: LD_VAR 0 2
29445: NOT
29446: OR
29447: IFFALSE 29451
// exit ;
29449: GO 30511
// case weapon of us_machine_gun :
29451: LD_VAR 0 2
29455: PUSH
29456: LD_INT 2
29458: DOUBLE
29459: EQUAL
29460: IFTRUE 29464
29462: GO 29494
29464: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29465: LD_ADDR_VAR 0 3
29469: PUSH
29470: LD_INT 1
29472: PUSH
29473: LD_INT 2
29475: PUSH
29476: LD_INT 3
29478: PUSH
29479: LD_INT 4
29481: PUSH
29482: LD_INT 5
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: ST_TO_ADDR
29492: GO 30495
29494: LD_INT 3
29496: DOUBLE
29497: EQUAL
29498: IFTRUE 29502
29500: GO 29532
29502: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29503: LD_ADDR_VAR 0 3
29507: PUSH
29508: LD_INT 1
29510: PUSH
29511: LD_INT 2
29513: PUSH
29514: LD_INT 3
29516: PUSH
29517: LD_INT 4
29519: PUSH
29520: LD_INT 5
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: ST_TO_ADDR
29530: GO 30495
29532: LD_INT 11
29534: DOUBLE
29535: EQUAL
29536: IFTRUE 29540
29538: GO 29570
29540: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29541: LD_ADDR_VAR 0 3
29545: PUSH
29546: LD_INT 1
29548: PUSH
29549: LD_INT 2
29551: PUSH
29552: LD_INT 3
29554: PUSH
29555: LD_INT 4
29557: PUSH
29558: LD_INT 5
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: ST_TO_ADDR
29568: GO 30495
29570: LD_INT 4
29572: DOUBLE
29573: EQUAL
29574: IFTRUE 29578
29576: GO 29604
29578: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29579: LD_ADDR_VAR 0 3
29583: PUSH
29584: LD_INT 2
29586: PUSH
29587: LD_INT 3
29589: PUSH
29590: LD_INT 4
29592: PUSH
29593: LD_INT 5
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: ST_TO_ADDR
29602: GO 30495
29604: LD_INT 5
29606: DOUBLE
29607: EQUAL
29608: IFTRUE 29612
29610: GO 29638
29612: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29613: LD_ADDR_VAR 0 3
29617: PUSH
29618: LD_INT 2
29620: PUSH
29621: LD_INT 3
29623: PUSH
29624: LD_INT 4
29626: PUSH
29627: LD_INT 5
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: ST_TO_ADDR
29636: GO 30495
29638: LD_INT 9
29640: DOUBLE
29641: EQUAL
29642: IFTRUE 29646
29644: GO 29672
29646: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29647: LD_ADDR_VAR 0 3
29651: PUSH
29652: LD_INT 2
29654: PUSH
29655: LD_INT 3
29657: PUSH
29658: LD_INT 4
29660: PUSH
29661: LD_INT 5
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: ST_TO_ADDR
29670: GO 30495
29672: LD_INT 7
29674: DOUBLE
29675: EQUAL
29676: IFTRUE 29680
29678: GO 29706
29680: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29681: LD_ADDR_VAR 0 3
29685: PUSH
29686: LD_INT 2
29688: PUSH
29689: LD_INT 3
29691: PUSH
29692: LD_INT 4
29694: PUSH
29695: LD_INT 5
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: LIST
29702: LIST
29703: ST_TO_ADDR
29704: GO 30495
29706: LD_INT 12
29708: DOUBLE
29709: EQUAL
29710: IFTRUE 29714
29712: GO 29740
29714: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29715: LD_ADDR_VAR 0 3
29719: PUSH
29720: LD_INT 2
29722: PUSH
29723: LD_INT 3
29725: PUSH
29726: LD_INT 4
29728: PUSH
29729: LD_INT 5
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: ST_TO_ADDR
29738: GO 30495
29740: LD_INT 13
29742: DOUBLE
29743: EQUAL
29744: IFTRUE 29748
29746: GO 29774
29748: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29749: LD_ADDR_VAR 0 3
29753: PUSH
29754: LD_INT 2
29756: PUSH
29757: LD_INT 3
29759: PUSH
29760: LD_INT 4
29762: PUSH
29763: LD_INT 5
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: ST_TO_ADDR
29772: GO 30495
29774: LD_INT 14
29776: DOUBLE
29777: EQUAL
29778: IFTRUE 29782
29780: GO 29800
29782: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29783: LD_ADDR_VAR 0 3
29787: PUSH
29788: LD_INT 4
29790: PUSH
29791: LD_INT 5
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: ST_TO_ADDR
29798: GO 30495
29800: LD_INT 6
29802: DOUBLE
29803: EQUAL
29804: IFTRUE 29808
29806: GO 29826
29808: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29809: LD_ADDR_VAR 0 3
29813: PUSH
29814: LD_INT 4
29816: PUSH
29817: LD_INT 5
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: ST_TO_ADDR
29824: GO 30495
29826: LD_INT 10
29828: DOUBLE
29829: EQUAL
29830: IFTRUE 29834
29832: GO 29852
29834: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29835: LD_ADDR_VAR 0 3
29839: PUSH
29840: LD_INT 4
29842: PUSH
29843: LD_INT 5
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: ST_TO_ADDR
29850: GO 30495
29852: LD_INT 22
29854: DOUBLE
29855: EQUAL
29856: IFTRUE 29860
29858: GO 29886
29860: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29861: LD_ADDR_VAR 0 3
29865: PUSH
29866: LD_INT 11
29868: PUSH
29869: LD_INT 12
29871: PUSH
29872: LD_INT 13
29874: PUSH
29875: LD_INT 14
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: ST_TO_ADDR
29884: GO 30495
29886: LD_INT 23
29888: DOUBLE
29889: EQUAL
29890: IFTRUE 29894
29892: GO 29920
29894: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29895: LD_ADDR_VAR 0 3
29899: PUSH
29900: LD_INT 11
29902: PUSH
29903: LD_INT 12
29905: PUSH
29906: LD_INT 13
29908: PUSH
29909: LD_INT 14
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: ST_TO_ADDR
29918: GO 30495
29920: LD_INT 24
29922: DOUBLE
29923: EQUAL
29924: IFTRUE 29928
29926: GO 29954
29928: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29929: LD_ADDR_VAR 0 3
29933: PUSH
29934: LD_INT 11
29936: PUSH
29937: LD_INT 12
29939: PUSH
29940: LD_INT 13
29942: PUSH
29943: LD_INT 14
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: ST_TO_ADDR
29952: GO 30495
29954: LD_INT 30
29956: DOUBLE
29957: EQUAL
29958: IFTRUE 29962
29960: GO 29988
29962: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29963: LD_ADDR_VAR 0 3
29967: PUSH
29968: LD_INT 11
29970: PUSH
29971: LD_INT 12
29973: PUSH
29974: LD_INT 13
29976: PUSH
29977: LD_INT 14
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: ST_TO_ADDR
29986: GO 30495
29988: LD_INT 25
29990: DOUBLE
29991: EQUAL
29992: IFTRUE 29996
29994: GO 30014
29996: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29997: LD_ADDR_VAR 0 3
30001: PUSH
30002: LD_INT 13
30004: PUSH
30005: LD_INT 14
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: ST_TO_ADDR
30012: GO 30495
30014: LD_INT 27
30016: DOUBLE
30017: EQUAL
30018: IFTRUE 30022
30020: GO 30040
30022: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30023: LD_ADDR_VAR 0 3
30027: PUSH
30028: LD_INT 13
30030: PUSH
30031: LD_INT 14
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: ST_TO_ADDR
30038: GO 30495
30040: LD_INT 92
30042: DOUBLE
30043: EQUAL
30044: IFTRUE 30048
30046: GO 30074
30048: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30049: LD_ADDR_VAR 0 3
30053: PUSH
30054: LD_INT 11
30056: PUSH
30057: LD_INT 12
30059: PUSH
30060: LD_INT 13
30062: PUSH
30063: LD_INT 14
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: ST_TO_ADDR
30072: GO 30495
30074: LD_INT 28
30076: DOUBLE
30077: EQUAL
30078: IFTRUE 30082
30080: GO 30100
30082: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30083: LD_ADDR_VAR 0 3
30087: PUSH
30088: LD_INT 13
30090: PUSH
30091: LD_INT 14
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: ST_TO_ADDR
30098: GO 30495
30100: LD_INT 29
30102: DOUBLE
30103: EQUAL
30104: IFTRUE 30108
30106: GO 30126
30108: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30109: LD_ADDR_VAR 0 3
30113: PUSH
30114: LD_INT 13
30116: PUSH
30117: LD_INT 14
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: ST_TO_ADDR
30124: GO 30495
30126: LD_INT 31
30128: DOUBLE
30129: EQUAL
30130: IFTRUE 30134
30132: GO 30152
30134: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30135: LD_ADDR_VAR 0 3
30139: PUSH
30140: LD_INT 13
30142: PUSH
30143: LD_INT 14
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: ST_TO_ADDR
30150: GO 30495
30152: LD_INT 26
30154: DOUBLE
30155: EQUAL
30156: IFTRUE 30160
30158: GO 30178
30160: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30161: LD_ADDR_VAR 0 3
30165: PUSH
30166: LD_INT 13
30168: PUSH
30169: LD_INT 14
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: ST_TO_ADDR
30176: GO 30495
30178: LD_INT 42
30180: DOUBLE
30181: EQUAL
30182: IFTRUE 30186
30184: GO 30212
30186: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30187: LD_ADDR_VAR 0 3
30191: PUSH
30192: LD_INT 21
30194: PUSH
30195: LD_INT 22
30197: PUSH
30198: LD_INT 23
30200: PUSH
30201: LD_INT 24
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: ST_TO_ADDR
30210: GO 30495
30212: LD_INT 43
30214: DOUBLE
30215: EQUAL
30216: IFTRUE 30220
30218: GO 30246
30220: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30221: LD_ADDR_VAR 0 3
30225: PUSH
30226: LD_INT 21
30228: PUSH
30229: LD_INT 22
30231: PUSH
30232: LD_INT 23
30234: PUSH
30235: LD_INT 24
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: ST_TO_ADDR
30244: GO 30495
30246: LD_INT 44
30248: DOUBLE
30249: EQUAL
30250: IFTRUE 30254
30252: GO 30280
30254: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30255: LD_ADDR_VAR 0 3
30259: PUSH
30260: LD_INT 21
30262: PUSH
30263: LD_INT 22
30265: PUSH
30266: LD_INT 23
30268: PUSH
30269: LD_INT 24
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: ST_TO_ADDR
30278: GO 30495
30280: LD_INT 45
30282: DOUBLE
30283: EQUAL
30284: IFTRUE 30288
30286: GO 30314
30288: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30289: LD_ADDR_VAR 0 3
30293: PUSH
30294: LD_INT 21
30296: PUSH
30297: LD_INT 22
30299: PUSH
30300: LD_INT 23
30302: PUSH
30303: LD_INT 24
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: ST_TO_ADDR
30312: GO 30495
30314: LD_INT 49
30316: DOUBLE
30317: EQUAL
30318: IFTRUE 30322
30320: GO 30348
30322: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30323: LD_ADDR_VAR 0 3
30327: PUSH
30328: LD_INT 21
30330: PUSH
30331: LD_INT 22
30333: PUSH
30334: LD_INT 23
30336: PUSH
30337: LD_INT 24
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: ST_TO_ADDR
30346: GO 30495
30348: LD_INT 51
30350: DOUBLE
30351: EQUAL
30352: IFTRUE 30356
30354: GO 30382
30356: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30357: LD_ADDR_VAR 0 3
30361: PUSH
30362: LD_INT 21
30364: PUSH
30365: LD_INT 22
30367: PUSH
30368: LD_INT 23
30370: PUSH
30371: LD_INT 24
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: ST_TO_ADDR
30380: GO 30495
30382: LD_INT 52
30384: DOUBLE
30385: EQUAL
30386: IFTRUE 30390
30388: GO 30416
30390: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30391: LD_ADDR_VAR 0 3
30395: PUSH
30396: LD_INT 21
30398: PUSH
30399: LD_INT 22
30401: PUSH
30402: LD_INT 23
30404: PUSH
30405: LD_INT 24
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: ST_TO_ADDR
30414: GO 30495
30416: LD_INT 53
30418: DOUBLE
30419: EQUAL
30420: IFTRUE 30424
30422: GO 30442
30424: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30425: LD_ADDR_VAR 0 3
30429: PUSH
30430: LD_INT 23
30432: PUSH
30433: LD_INT 24
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: ST_TO_ADDR
30440: GO 30495
30442: LD_INT 46
30444: DOUBLE
30445: EQUAL
30446: IFTRUE 30450
30448: GO 30468
30450: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30451: LD_ADDR_VAR 0 3
30455: PUSH
30456: LD_INT 23
30458: PUSH
30459: LD_INT 24
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: ST_TO_ADDR
30466: GO 30495
30468: LD_INT 47
30470: DOUBLE
30471: EQUAL
30472: IFTRUE 30476
30474: GO 30494
30476: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30477: LD_ADDR_VAR 0 3
30481: PUSH
30482: LD_INT 23
30484: PUSH
30485: LD_INT 24
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: ST_TO_ADDR
30492: GO 30495
30494: POP
// result := ( chassis in result ) ;
30495: LD_ADDR_VAR 0 3
30499: PUSH
30500: LD_VAR 0 1
30504: PUSH
30505: LD_VAR 0 3
30509: IN
30510: ST_TO_ADDR
// end ;
30511: LD_VAR 0 3
30515: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30516: LD_INT 0
30518: PPUSH
30519: PPUSH
30520: PPUSH
30521: PPUSH
30522: PPUSH
30523: PPUSH
30524: PPUSH
// result := array ;
30525: LD_ADDR_VAR 0 5
30529: PUSH
30530: LD_VAR 0 1
30534: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30535: LD_VAR 0 1
30539: NOT
30540: PUSH
30541: LD_VAR 0 2
30545: NOT
30546: OR
30547: PUSH
30548: LD_VAR 0 3
30552: NOT
30553: OR
30554: PUSH
30555: LD_VAR 0 2
30559: PUSH
30560: LD_VAR 0 1
30564: GREATER
30565: OR
30566: PUSH
30567: LD_VAR 0 3
30571: PUSH
30572: LD_VAR 0 1
30576: GREATER
30577: OR
30578: IFFALSE 30582
// exit ;
30580: GO 30878
// if direction then
30582: LD_VAR 0 4
30586: IFFALSE 30650
// begin d := 1 ;
30588: LD_ADDR_VAR 0 9
30592: PUSH
30593: LD_INT 1
30595: ST_TO_ADDR
// if i_from > i_to then
30596: LD_VAR 0 2
30600: PUSH
30601: LD_VAR 0 3
30605: GREATER
30606: IFFALSE 30632
// length := ( array - i_from ) + i_to else
30608: LD_ADDR_VAR 0 11
30612: PUSH
30613: LD_VAR 0 1
30617: PUSH
30618: LD_VAR 0 2
30622: MINUS
30623: PUSH
30624: LD_VAR 0 3
30628: PLUS
30629: ST_TO_ADDR
30630: GO 30648
// length := i_to - i_from ;
30632: LD_ADDR_VAR 0 11
30636: PUSH
30637: LD_VAR 0 3
30641: PUSH
30642: LD_VAR 0 2
30646: MINUS
30647: ST_TO_ADDR
// end else
30648: GO 30711
// begin d := - 1 ;
30650: LD_ADDR_VAR 0 9
30654: PUSH
30655: LD_INT 1
30657: NEG
30658: ST_TO_ADDR
// if i_from > i_to then
30659: LD_VAR 0 2
30663: PUSH
30664: LD_VAR 0 3
30668: GREATER
30669: IFFALSE 30689
// length := i_from - i_to else
30671: LD_ADDR_VAR 0 11
30675: PUSH
30676: LD_VAR 0 2
30680: PUSH
30681: LD_VAR 0 3
30685: MINUS
30686: ST_TO_ADDR
30687: GO 30711
// length := ( array - i_to ) + i_from ;
30689: LD_ADDR_VAR 0 11
30693: PUSH
30694: LD_VAR 0 1
30698: PUSH
30699: LD_VAR 0 3
30703: MINUS
30704: PUSH
30705: LD_VAR 0 2
30709: PLUS
30710: ST_TO_ADDR
// end ; if not length then
30711: LD_VAR 0 11
30715: NOT
30716: IFFALSE 30720
// exit ;
30718: GO 30878
// tmp := array ;
30720: LD_ADDR_VAR 0 10
30724: PUSH
30725: LD_VAR 0 1
30729: ST_TO_ADDR
// for i = 1 to length do
30730: LD_ADDR_VAR 0 6
30734: PUSH
30735: DOUBLE
30736: LD_INT 1
30738: DEC
30739: ST_TO_ADDR
30740: LD_VAR 0 11
30744: PUSH
30745: FOR_TO
30746: IFFALSE 30866
// begin for j = 1 to array do
30748: LD_ADDR_VAR 0 7
30752: PUSH
30753: DOUBLE
30754: LD_INT 1
30756: DEC
30757: ST_TO_ADDR
30758: LD_VAR 0 1
30762: PUSH
30763: FOR_TO
30764: IFFALSE 30852
// begin k := j + d ;
30766: LD_ADDR_VAR 0 8
30770: PUSH
30771: LD_VAR 0 7
30775: PUSH
30776: LD_VAR 0 9
30780: PLUS
30781: ST_TO_ADDR
// if k > array then
30782: LD_VAR 0 8
30786: PUSH
30787: LD_VAR 0 1
30791: GREATER
30792: IFFALSE 30802
// k := 1 ;
30794: LD_ADDR_VAR 0 8
30798: PUSH
30799: LD_INT 1
30801: ST_TO_ADDR
// if not k then
30802: LD_VAR 0 8
30806: NOT
30807: IFFALSE 30819
// k := array ;
30809: LD_ADDR_VAR 0 8
30813: PUSH
30814: LD_VAR 0 1
30818: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30819: LD_ADDR_VAR 0 10
30823: PUSH
30824: LD_VAR 0 10
30828: PPUSH
30829: LD_VAR 0 8
30833: PPUSH
30834: LD_VAR 0 1
30838: PUSH
30839: LD_VAR 0 7
30843: ARRAY
30844: PPUSH
30845: CALL_OW 1
30849: ST_TO_ADDR
// end ;
30850: GO 30763
30852: POP
30853: POP
// array := tmp ;
30854: LD_ADDR_VAR 0 1
30858: PUSH
30859: LD_VAR 0 10
30863: ST_TO_ADDR
// end ;
30864: GO 30745
30866: POP
30867: POP
// result := array ;
30868: LD_ADDR_VAR 0 5
30872: PUSH
30873: LD_VAR 0 1
30877: ST_TO_ADDR
// end ;
30878: LD_VAR 0 5
30882: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30883: LD_INT 0
30885: PPUSH
30886: PPUSH
// result := 0 ;
30887: LD_ADDR_VAR 0 3
30891: PUSH
30892: LD_INT 0
30894: ST_TO_ADDR
// if not array or not value in array then
30895: LD_VAR 0 1
30899: NOT
30900: PUSH
30901: LD_VAR 0 2
30905: PUSH
30906: LD_VAR 0 1
30910: IN
30911: NOT
30912: OR
30913: IFFALSE 30917
// exit ;
30915: GO 30971
// for i = 1 to array do
30917: LD_ADDR_VAR 0 4
30921: PUSH
30922: DOUBLE
30923: LD_INT 1
30925: DEC
30926: ST_TO_ADDR
30927: LD_VAR 0 1
30931: PUSH
30932: FOR_TO
30933: IFFALSE 30969
// if value = array [ i ] then
30935: LD_VAR 0 2
30939: PUSH
30940: LD_VAR 0 1
30944: PUSH
30945: LD_VAR 0 4
30949: ARRAY
30950: EQUAL
30951: IFFALSE 30967
// begin result := i ;
30953: LD_ADDR_VAR 0 3
30957: PUSH
30958: LD_VAR 0 4
30962: ST_TO_ADDR
// exit ;
30963: POP
30964: POP
30965: GO 30971
// end ;
30967: GO 30932
30969: POP
30970: POP
// end ;
30971: LD_VAR 0 3
30975: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30976: LD_INT 0
30978: PPUSH
// vc_chassis := chassis ;
30979: LD_ADDR_OWVAR 37
30983: PUSH
30984: LD_VAR 0 1
30988: ST_TO_ADDR
// vc_engine := engine ;
30989: LD_ADDR_OWVAR 39
30993: PUSH
30994: LD_VAR 0 2
30998: ST_TO_ADDR
// vc_control := control ;
30999: LD_ADDR_OWVAR 38
31003: PUSH
31004: LD_VAR 0 3
31008: ST_TO_ADDR
// vc_weapon := weapon ;
31009: LD_ADDR_OWVAR 40
31013: PUSH
31014: LD_VAR 0 4
31018: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31019: LD_ADDR_OWVAR 41
31023: PUSH
31024: LD_VAR 0 5
31028: ST_TO_ADDR
// end ;
31029: LD_VAR 0 6
31033: RET
// export function WantPlant ( unit ) ; var task ; begin
31034: LD_INT 0
31036: PPUSH
31037: PPUSH
// result := false ;
31038: LD_ADDR_VAR 0 2
31042: PUSH
31043: LD_INT 0
31045: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31046: LD_ADDR_VAR 0 3
31050: PUSH
31051: LD_VAR 0 1
31055: PPUSH
31056: CALL_OW 437
31060: ST_TO_ADDR
// if task then
31061: LD_VAR 0 3
31065: IFFALSE 31093
// if task [ 1 ] [ 1 ] = p then
31067: LD_VAR 0 3
31071: PUSH
31072: LD_INT 1
31074: ARRAY
31075: PUSH
31076: LD_INT 1
31078: ARRAY
31079: PUSH
31080: LD_STRING p
31082: EQUAL
31083: IFFALSE 31093
// result := true ;
31085: LD_ADDR_VAR 0 2
31089: PUSH
31090: LD_INT 1
31092: ST_TO_ADDR
// end ;
31093: LD_VAR 0 2
31097: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31098: LD_INT 0
31100: PPUSH
31101: PPUSH
31102: PPUSH
31103: PPUSH
// if pos < 1 then
31104: LD_VAR 0 2
31108: PUSH
31109: LD_INT 1
31111: LESS
31112: IFFALSE 31116
// exit ;
31114: GO 31419
// if pos = 1 then
31116: LD_VAR 0 2
31120: PUSH
31121: LD_INT 1
31123: EQUAL
31124: IFFALSE 31157
// result := Replace ( arr , pos [ 1 ] , value ) else
31126: LD_ADDR_VAR 0 4
31130: PUSH
31131: LD_VAR 0 1
31135: PPUSH
31136: LD_VAR 0 2
31140: PUSH
31141: LD_INT 1
31143: ARRAY
31144: PPUSH
31145: LD_VAR 0 3
31149: PPUSH
31150: CALL_OW 1
31154: ST_TO_ADDR
31155: GO 31419
// begin tmp := arr ;
31157: LD_ADDR_VAR 0 6
31161: PUSH
31162: LD_VAR 0 1
31166: ST_TO_ADDR
// s_arr := [ tmp ] ;
31167: LD_ADDR_VAR 0 7
31171: PUSH
31172: LD_VAR 0 6
31176: PUSH
31177: EMPTY
31178: LIST
31179: ST_TO_ADDR
// for i = 1 to pos - 1 do
31180: LD_ADDR_VAR 0 5
31184: PUSH
31185: DOUBLE
31186: LD_INT 1
31188: DEC
31189: ST_TO_ADDR
31190: LD_VAR 0 2
31194: PUSH
31195: LD_INT 1
31197: MINUS
31198: PUSH
31199: FOR_TO
31200: IFFALSE 31245
// begin tmp := tmp [ pos [ i ] ] ;
31202: LD_ADDR_VAR 0 6
31206: PUSH
31207: LD_VAR 0 6
31211: PUSH
31212: LD_VAR 0 2
31216: PUSH
31217: LD_VAR 0 5
31221: ARRAY
31222: ARRAY
31223: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31224: LD_ADDR_VAR 0 7
31228: PUSH
31229: LD_VAR 0 7
31233: PUSH
31234: LD_VAR 0 6
31238: PUSH
31239: EMPTY
31240: LIST
31241: ADD
31242: ST_TO_ADDR
// end ;
31243: GO 31199
31245: POP
31246: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31247: LD_ADDR_VAR 0 6
31251: PUSH
31252: LD_VAR 0 6
31256: PPUSH
31257: LD_VAR 0 2
31261: PUSH
31262: LD_VAR 0 2
31266: ARRAY
31267: PPUSH
31268: LD_VAR 0 3
31272: PPUSH
31273: CALL_OW 1
31277: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31278: LD_ADDR_VAR 0 7
31282: PUSH
31283: LD_VAR 0 7
31287: PPUSH
31288: LD_VAR 0 7
31292: PPUSH
31293: LD_VAR 0 6
31297: PPUSH
31298: CALL_OW 1
31302: ST_TO_ADDR
// for i = s_arr downto 2 do
31303: LD_ADDR_VAR 0 5
31307: PUSH
31308: DOUBLE
31309: LD_VAR 0 7
31313: INC
31314: ST_TO_ADDR
31315: LD_INT 2
31317: PUSH
31318: FOR_DOWNTO
31319: IFFALSE 31403
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31321: LD_ADDR_VAR 0 6
31325: PUSH
31326: LD_VAR 0 7
31330: PUSH
31331: LD_VAR 0 5
31335: PUSH
31336: LD_INT 1
31338: MINUS
31339: ARRAY
31340: PPUSH
31341: LD_VAR 0 2
31345: PUSH
31346: LD_VAR 0 5
31350: PUSH
31351: LD_INT 1
31353: MINUS
31354: ARRAY
31355: PPUSH
31356: LD_VAR 0 7
31360: PUSH
31361: LD_VAR 0 5
31365: ARRAY
31366: PPUSH
31367: CALL_OW 1
31371: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31372: LD_ADDR_VAR 0 7
31376: PUSH
31377: LD_VAR 0 7
31381: PPUSH
31382: LD_VAR 0 5
31386: PUSH
31387: LD_INT 1
31389: MINUS
31390: PPUSH
31391: LD_VAR 0 6
31395: PPUSH
31396: CALL_OW 1
31400: ST_TO_ADDR
// end ;
31401: GO 31318
31403: POP
31404: POP
// result := s_arr [ 1 ] ;
31405: LD_ADDR_VAR 0 4
31409: PUSH
31410: LD_VAR 0 7
31414: PUSH
31415: LD_INT 1
31417: ARRAY
31418: ST_TO_ADDR
// end ; end ;
31419: LD_VAR 0 4
31423: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31424: LD_INT 0
31426: PPUSH
31427: PPUSH
// if not list then
31428: LD_VAR 0 1
31432: NOT
31433: IFFALSE 31437
// exit ;
31435: GO 31528
// i := list [ pos1 ] ;
31437: LD_ADDR_VAR 0 5
31441: PUSH
31442: LD_VAR 0 1
31446: PUSH
31447: LD_VAR 0 2
31451: ARRAY
31452: ST_TO_ADDR
// if not i then
31453: LD_VAR 0 5
31457: NOT
31458: IFFALSE 31462
// exit ;
31460: GO 31528
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31462: LD_ADDR_VAR 0 1
31466: PUSH
31467: LD_VAR 0 1
31471: PPUSH
31472: LD_VAR 0 2
31476: PPUSH
31477: LD_VAR 0 1
31481: PUSH
31482: LD_VAR 0 3
31486: ARRAY
31487: PPUSH
31488: CALL_OW 1
31492: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31493: LD_ADDR_VAR 0 1
31497: PUSH
31498: LD_VAR 0 1
31502: PPUSH
31503: LD_VAR 0 3
31507: PPUSH
31508: LD_VAR 0 5
31512: PPUSH
31513: CALL_OW 1
31517: ST_TO_ADDR
// result := list ;
31518: LD_ADDR_VAR 0 4
31522: PUSH
31523: LD_VAR 0 1
31527: ST_TO_ADDR
// end ;
31528: LD_VAR 0 4
31532: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31533: LD_INT 0
31535: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31536: LD_ADDR_VAR 0 5
31540: PUSH
31541: LD_VAR 0 1
31545: PPUSH
31546: CALL_OW 250
31550: PPUSH
31551: LD_VAR 0 1
31555: PPUSH
31556: CALL_OW 251
31560: PPUSH
31561: LD_VAR 0 2
31565: PPUSH
31566: LD_VAR 0 3
31570: PPUSH
31571: LD_VAR 0 4
31575: PPUSH
31576: CALL 31586 0 5
31580: ST_TO_ADDR
// end ;
31581: LD_VAR 0 5
31585: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31586: LD_INT 0
31588: PPUSH
31589: PPUSH
31590: PPUSH
31591: PPUSH
// if not list then
31592: LD_VAR 0 3
31596: NOT
31597: IFFALSE 31601
// exit ;
31599: GO 31989
// result := [ ] ;
31601: LD_ADDR_VAR 0 6
31605: PUSH
31606: EMPTY
31607: ST_TO_ADDR
// for i in list do
31608: LD_ADDR_VAR 0 7
31612: PUSH
31613: LD_VAR 0 3
31617: PUSH
31618: FOR_IN
31619: IFFALSE 31821
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31621: LD_ADDR_VAR 0 9
31625: PUSH
31626: LD_VAR 0 7
31630: PPUSH
31631: LD_VAR 0 1
31635: PPUSH
31636: LD_VAR 0 2
31640: PPUSH
31641: CALL_OW 297
31645: ST_TO_ADDR
// if not result then
31646: LD_VAR 0 6
31650: NOT
31651: IFFALSE 31677
// result := [ [ i , tmp ] ] else
31653: LD_ADDR_VAR 0 6
31657: PUSH
31658: LD_VAR 0 7
31662: PUSH
31663: LD_VAR 0 9
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: EMPTY
31673: LIST
31674: ST_TO_ADDR
31675: GO 31819
// begin if result [ result ] [ 2 ] < tmp then
31677: LD_VAR 0 6
31681: PUSH
31682: LD_VAR 0 6
31686: ARRAY
31687: PUSH
31688: LD_INT 2
31690: ARRAY
31691: PUSH
31692: LD_VAR 0 9
31696: LESS
31697: IFFALSE 31739
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31699: LD_ADDR_VAR 0 6
31703: PUSH
31704: LD_VAR 0 6
31708: PPUSH
31709: LD_VAR 0 6
31713: PUSH
31714: LD_INT 1
31716: PLUS
31717: PPUSH
31718: LD_VAR 0 7
31722: PUSH
31723: LD_VAR 0 9
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PPUSH
31732: CALL_OW 2
31736: ST_TO_ADDR
31737: GO 31819
// for j = 1 to result do
31739: LD_ADDR_VAR 0 8
31743: PUSH
31744: DOUBLE
31745: LD_INT 1
31747: DEC
31748: ST_TO_ADDR
31749: LD_VAR 0 6
31753: PUSH
31754: FOR_TO
31755: IFFALSE 31817
// begin if tmp < result [ j ] [ 2 ] then
31757: LD_VAR 0 9
31761: PUSH
31762: LD_VAR 0 6
31766: PUSH
31767: LD_VAR 0 8
31771: ARRAY
31772: PUSH
31773: LD_INT 2
31775: ARRAY
31776: LESS
31777: IFFALSE 31815
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31779: LD_ADDR_VAR 0 6
31783: PUSH
31784: LD_VAR 0 6
31788: PPUSH
31789: LD_VAR 0 8
31793: PPUSH
31794: LD_VAR 0 7
31798: PUSH
31799: LD_VAR 0 9
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PPUSH
31808: CALL_OW 2
31812: ST_TO_ADDR
// break ;
31813: GO 31817
// end ; end ;
31815: GO 31754
31817: POP
31818: POP
// end ; end ;
31819: GO 31618
31821: POP
31822: POP
// if result and not asc then
31823: LD_VAR 0 6
31827: PUSH
31828: LD_VAR 0 4
31832: NOT
31833: AND
31834: IFFALSE 31909
// begin tmp := result ;
31836: LD_ADDR_VAR 0 9
31840: PUSH
31841: LD_VAR 0 6
31845: ST_TO_ADDR
// for i = tmp downto 1 do
31846: LD_ADDR_VAR 0 7
31850: PUSH
31851: DOUBLE
31852: LD_VAR 0 9
31856: INC
31857: ST_TO_ADDR
31858: LD_INT 1
31860: PUSH
31861: FOR_DOWNTO
31862: IFFALSE 31907
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31864: LD_ADDR_VAR 0 6
31868: PUSH
31869: LD_VAR 0 6
31873: PPUSH
31874: LD_VAR 0 9
31878: PUSH
31879: LD_VAR 0 7
31883: MINUS
31884: PUSH
31885: LD_INT 1
31887: PLUS
31888: PPUSH
31889: LD_VAR 0 9
31893: PUSH
31894: LD_VAR 0 7
31898: ARRAY
31899: PPUSH
31900: CALL_OW 1
31904: ST_TO_ADDR
31905: GO 31861
31907: POP
31908: POP
// end ; tmp := [ ] ;
31909: LD_ADDR_VAR 0 9
31913: PUSH
31914: EMPTY
31915: ST_TO_ADDR
// if mode then
31916: LD_VAR 0 5
31920: IFFALSE 31989
// begin for i = 1 to result do
31922: LD_ADDR_VAR 0 7
31926: PUSH
31927: DOUBLE
31928: LD_INT 1
31930: DEC
31931: ST_TO_ADDR
31932: LD_VAR 0 6
31936: PUSH
31937: FOR_TO
31938: IFFALSE 31977
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31940: LD_ADDR_VAR 0 9
31944: PUSH
31945: LD_VAR 0 9
31949: PPUSH
31950: LD_VAR 0 7
31954: PPUSH
31955: LD_VAR 0 6
31959: PUSH
31960: LD_VAR 0 7
31964: ARRAY
31965: PUSH
31966: LD_INT 1
31968: ARRAY
31969: PPUSH
31970: CALL_OW 1
31974: ST_TO_ADDR
31975: GO 31937
31977: POP
31978: POP
// result := tmp ;
31979: LD_ADDR_VAR 0 6
31983: PUSH
31984: LD_VAR 0 9
31988: ST_TO_ADDR
// end ; end ;
31989: LD_VAR 0 6
31993: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31994: LD_INT 0
31996: PPUSH
31997: PPUSH
31998: PPUSH
31999: PPUSH
32000: PPUSH
32001: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32002: LD_ADDR_VAR 0 5
32006: PUSH
32007: LD_INT 0
32009: PUSH
32010: LD_INT 0
32012: PUSH
32013: LD_INT 0
32015: PUSH
32016: EMPTY
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: ST_TO_ADDR
// if not x or not y then
32024: LD_VAR 0 2
32028: NOT
32029: PUSH
32030: LD_VAR 0 3
32034: NOT
32035: OR
32036: IFFALSE 32040
// exit ;
32038: GO 33690
// if not range then
32040: LD_VAR 0 4
32044: NOT
32045: IFFALSE 32055
// range := 10 ;
32047: LD_ADDR_VAR 0 4
32051: PUSH
32052: LD_INT 10
32054: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32055: LD_ADDR_VAR 0 8
32059: PUSH
32060: LD_INT 81
32062: PUSH
32063: LD_VAR 0 1
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 92
32074: PUSH
32075: LD_VAR 0 2
32079: PUSH
32080: LD_VAR 0 3
32084: PUSH
32085: LD_VAR 0 4
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 3
32098: PUSH
32099: LD_INT 21
32101: PUSH
32102: LD_INT 3
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: LIST
32117: PPUSH
32118: CALL_OW 69
32122: ST_TO_ADDR
// if not tmp then
32123: LD_VAR 0 8
32127: NOT
32128: IFFALSE 32132
// exit ;
32130: GO 33690
// for i in tmp do
32132: LD_ADDR_VAR 0 6
32136: PUSH
32137: LD_VAR 0 8
32141: PUSH
32142: FOR_IN
32143: IFFALSE 33665
// begin points := [ 0 , 0 , 0 ] ;
32145: LD_ADDR_VAR 0 9
32149: PUSH
32150: LD_INT 0
32152: PUSH
32153: LD_INT 0
32155: PUSH
32156: LD_INT 0
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: LIST
32163: ST_TO_ADDR
// bpoints := 1 ;
32164: LD_ADDR_VAR 0 10
32168: PUSH
32169: LD_INT 1
32171: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32172: LD_VAR 0 6
32176: PPUSH
32177: CALL_OW 247
32181: PUSH
32182: LD_INT 1
32184: DOUBLE
32185: EQUAL
32186: IFTRUE 32190
32188: GO 32768
32190: POP
// begin if GetClass ( i ) = 1 then
32191: LD_VAR 0 6
32195: PPUSH
32196: CALL_OW 257
32200: PUSH
32201: LD_INT 1
32203: EQUAL
32204: IFFALSE 32225
// points := [ 10 , 5 , 3 ] ;
32206: LD_ADDR_VAR 0 9
32210: PUSH
32211: LD_INT 10
32213: PUSH
32214: LD_INT 5
32216: PUSH
32217: LD_INT 3
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: LIST
32224: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32225: LD_VAR 0 6
32229: PPUSH
32230: CALL_OW 257
32234: PUSH
32235: LD_INT 2
32237: PUSH
32238: LD_INT 3
32240: PUSH
32241: LD_INT 4
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: LIST
32248: IN
32249: IFFALSE 32270
// points := [ 3 , 2 , 1 ] ;
32251: LD_ADDR_VAR 0 9
32255: PUSH
32256: LD_INT 3
32258: PUSH
32259: LD_INT 2
32261: PUSH
32262: LD_INT 1
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: LIST
32269: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32270: LD_VAR 0 6
32274: PPUSH
32275: CALL_OW 257
32279: PUSH
32280: LD_INT 5
32282: EQUAL
32283: IFFALSE 32304
// points := [ 130 , 5 , 2 ] ;
32285: LD_ADDR_VAR 0 9
32289: PUSH
32290: LD_INT 130
32292: PUSH
32293: LD_INT 5
32295: PUSH
32296: LD_INT 2
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: LIST
32303: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32304: LD_VAR 0 6
32308: PPUSH
32309: CALL_OW 257
32313: PUSH
32314: LD_INT 8
32316: EQUAL
32317: IFFALSE 32338
// points := [ 35 , 35 , 30 ] ;
32319: LD_ADDR_VAR 0 9
32323: PUSH
32324: LD_INT 35
32326: PUSH
32327: LD_INT 35
32329: PUSH
32330: LD_INT 30
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: LIST
32337: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32338: LD_VAR 0 6
32342: PPUSH
32343: CALL_OW 257
32347: PUSH
32348: LD_INT 9
32350: EQUAL
32351: IFFALSE 32372
// points := [ 20 , 55 , 40 ] ;
32353: LD_ADDR_VAR 0 9
32357: PUSH
32358: LD_INT 20
32360: PUSH
32361: LD_INT 55
32363: PUSH
32364: LD_INT 40
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: LIST
32371: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32372: LD_VAR 0 6
32376: PPUSH
32377: CALL_OW 257
32381: PUSH
32382: LD_INT 12
32384: PUSH
32385: LD_INT 16
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: IN
32392: IFFALSE 32413
// points := [ 5 , 3 , 2 ] ;
32394: LD_ADDR_VAR 0 9
32398: PUSH
32399: LD_INT 5
32401: PUSH
32402: LD_INT 3
32404: PUSH
32405: LD_INT 2
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: LIST
32412: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32413: LD_VAR 0 6
32417: PPUSH
32418: CALL_OW 257
32422: PUSH
32423: LD_INT 17
32425: EQUAL
32426: IFFALSE 32447
// points := [ 100 , 50 , 75 ] ;
32428: LD_ADDR_VAR 0 9
32432: PUSH
32433: LD_INT 100
32435: PUSH
32436: LD_INT 50
32438: PUSH
32439: LD_INT 75
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: LIST
32446: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32447: LD_VAR 0 6
32451: PPUSH
32452: CALL_OW 257
32456: PUSH
32457: LD_INT 15
32459: EQUAL
32460: IFFALSE 32481
// points := [ 10 , 5 , 3 ] ;
32462: LD_ADDR_VAR 0 9
32466: PUSH
32467: LD_INT 10
32469: PUSH
32470: LD_INT 5
32472: PUSH
32473: LD_INT 3
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: LIST
32480: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32481: LD_VAR 0 6
32485: PPUSH
32486: CALL_OW 257
32490: PUSH
32491: LD_INT 14
32493: EQUAL
32494: IFFALSE 32515
// points := [ 10 , 0 , 0 ] ;
32496: LD_ADDR_VAR 0 9
32500: PUSH
32501: LD_INT 10
32503: PUSH
32504: LD_INT 0
32506: PUSH
32507: LD_INT 0
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: LIST
32514: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32515: LD_VAR 0 6
32519: PPUSH
32520: CALL_OW 257
32524: PUSH
32525: LD_INT 11
32527: EQUAL
32528: IFFALSE 32549
// points := [ 30 , 10 , 5 ] ;
32530: LD_ADDR_VAR 0 9
32534: PUSH
32535: LD_INT 30
32537: PUSH
32538: LD_INT 10
32540: PUSH
32541: LD_INT 5
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: LIST
32548: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32549: LD_VAR 0 1
32553: PPUSH
32554: LD_INT 5
32556: PPUSH
32557: CALL_OW 321
32561: PUSH
32562: LD_INT 2
32564: EQUAL
32565: IFFALSE 32582
// bpoints := bpoints * 1.8 ;
32567: LD_ADDR_VAR 0 10
32571: PUSH
32572: LD_VAR 0 10
32576: PUSH
32577: LD_REAL  1.80000000000000E+0000
32580: MUL
32581: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32582: LD_VAR 0 6
32586: PPUSH
32587: CALL_OW 257
32591: PUSH
32592: LD_INT 1
32594: PUSH
32595: LD_INT 2
32597: PUSH
32598: LD_INT 3
32600: PUSH
32601: LD_INT 4
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: IN
32610: PUSH
32611: LD_VAR 0 1
32615: PPUSH
32616: LD_INT 51
32618: PPUSH
32619: CALL_OW 321
32623: PUSH
32624: LD_INT 2
32626: EQUAL
32627: AND
32628: IFFALSE 32645
// bpoints := bpoints * 1.2 ;
32630: LD_ADDR_VAR 0 10
32634: PUSH
32635: LD_VAR 0 10
32639: PUSH
32640: LD_REAL  1.20000000000000E+0000
32643: MUL
32644: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32645: LD_VAR 0 6
32649: PPUSH
32650: CALL_OW 257
32654: PUSH
32655: LD_INT 5
32657: PUSH
32658: LD_INT 7
32660: PUSH
32661: LD_INT 9
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: LIST
32668: IN
32669: PUSH
32670: LD_VAR 0 1
32674: PPUSH
32675: LD_INT 52
32677: PPUSH
32678: CALL_OW 321
32682: PUSH
32683: LD_INT 2
32685: EQUAL
32686: AND
32687: IFFALSE 32704
// bpoints := bpoints * 1.5 ;
32689: LD_ADDR_VAR 0 10
32693: PUSH
32694: LD_VAR 0 10
32698: PUSH
32699: LD_REAL  1.50000000000000E+0000
32702: MUL
32703: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32704: LD_VAR 0 1
32708: PPUSH
32709: LD_INT 66
32711: PPUSH
32712: CALL_OW 321
32716: PUSH
32717: LD_INT 2
32719: EQUAL
32720: IFFALSE 32737
// bpoints := bpoints * 1.1 ;
32722: LD_ADDR_VAR 0 10
32726: PUSH
32727: LD_VAR 0 10
32731: PUSH
32732: LD_REAL  1.10000000000000E+0000
32735: MUL
32736: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32737: LD_ADDR_VAR 0 10
32741: PUSH
32742: LD_VAR 0 10
32746: PUSH
32747: LD_VAR 0 6
32751: PPUSH
32752: LD_INT 1
32754: PPUSH
32755: CALL_OW 259
32759: PUSH
32760: LD_REAL  1.15000000000000E+0000
32763: MUL
32764: MUL
32765: ST_TO_ADDR
// end ; unit_vehicle :
32766: GO 33594
32768: LD_INT 2
32770: DOUBLE
32771: EQUAL
32772: IFTRUE 32776
32774: GO 33582
32776: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32777: LD_VAR 0 6
32781: PPUSH
32782: CALL_OW 264
32786: PUSH
32787: LD_INT 2
32789: PUSH
32790: LD_INT 42
32792: PUSH
32793: LD_INT 24
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: LIST
32800: IN
32801: IFFALSE 32822
// points := [ 25 , 5 , 3 ] ;
32803: LD_ADDR_VAR 0 9
32807: PUSH
32808: LD_INT 25
32810: PUSH
32811: LD_INT 5
32813: PUSH
32814: LD_INT 3
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: LIST
32821: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32822: LD_VAR 0 6
32826: PPUSH
32827: CALL_OW 264
32831: PUSH
32832: LD_INT 4
32834: PUSH
32835: LD_INT 43
32837: PUSH
32838: LD_INT 25
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: LIST
32845: IN
32846: IFFALSE 32867
// points := [ 40 , 15 , 5 ] ;
32848: LD_ADDR_VAR 0 9
32852: PUSH
32853: LD_INT 40
32855: PUSH
32856: LD_INT 15
32858: PUSH
32859: LD_INT 5
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: LIST
32866: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32867: LD_VAR 0 6
32871: PPUSH
32872: CALL_OW 264
32876: PUSH
32877: LD_INT 3
32879: PUSH
32880: LD_INT 23
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: IN
32887: IFFALSE 32908
// points := [ 7 , 25 , 8 ] ;
32889: LD_ADDR_VAR 0 9
32893: PUSH
32894: LD_INT 7
32896: PUSH
32897: LD_INT 25
32899: PUSH
32900: LD_INT 8
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: LIST
32907: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32908: LD_VAR 0 6
32912: PPUSH
32913: CALL_OW 264
32917: PUSH
32918: LD_INT 5
32920: PUSH
32921: LD_INT 27
32923: PUSH
32924: LD_INT 44
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: LIST
32931: IN
32932: IFFALSE 32953
// points := [ 14 , 50 , 16 ] ;
32934: LD_ADDR_VAR 0 9
32938: PUSH
32939: LD_INT 14
32941: PUSH
32942: LD_INT 50
32944: PUSH
32945: LD_INT 16
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: LIST
32952: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32953: LD_VAR 0 6
32957: PPUSH
32958: CALL_OW 264
32962: PUSH
32963: LD_INT 6
32965: PUSH
32966: LD_INT 46
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: IN
32973: IFFALSE 32994
// points := [ 32 , 120 , 70 ] ;
32975: LD_ADDR_VAR 0 9
32979: PUSH
32980: LD_INT 32
32982: PUSH
32983: LD_INT 120
32985: PUSH
32986: LD_INT 70
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: LIST
32993: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32994: LD_VAR 0 6
32998: PPUSH
32999: CALL_OW 264
33003: PUSH
33004: LD_INT 7
33006: PUSH
33007: LD_INT 28
33009: PUSH
33010: LD_INT 45
33012: PUSH
33013: LD_INT 92
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: IN
33022: IFFALSE 33043
// points := [ 35 , 20 , 45 ] ;
33024: LD_ADDR_VAR 0 9
33028: PUSH
33029: LD_INT 35
33031: PUSH
33032: LD_INT 20
33034: PUSH
33035: LD_INT 45
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: LIST
33042: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33043: LD_VAR 0 6
33047: PPUSH
33048: CALL_OW 264
33052: PUSH
33053: LD_INT 47
33055: PUSH
33056: EMPTY
33057: LIST
33058: IN
33059: IFFALSE 33080
// points := [ 67 , 45 , 75 ] ;
33061: LD_ADDR_VAR 0 9
33065: PUSH
33066: LD_INT 67
33068: PUSH
33069: LD_INT 45
33071: PUSH
33072: LD_INT 75
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: LIST
33079: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33080: LD_VAR 0 6
33084: PPUSH
33085: CALL_OW 264
33089: PUSH
33090: LD_INT 26
33092: PUSH
33093: EMPTY
33094: LIST
33095: IN
33096: IFFALSE 33117
// points := [ 120 , 30 , 80 ] ;
33098: LD_ADDR_VAR 0 9
33102: PUSH
33103: LD_INT 120
33105: PUSH
33106: LD_INT 30
33108: PUSH
33109: LD_INT 80
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: LIST
33116: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33117: LD_VAR 0 6
33121: PPUSH
33122: CALL_OW 264
33126: PUSH
33127: LD_INT 22
33129: PUSH
33130: EMPTY
33131: LIST
33132: IN
33133: IFFALSE 33154
// points := [ 40 , 1 , 1 ] ;
33135: LD_ADDR_VAR 0 9
33139: PUSH
33140: LD_INT 40
33142: PUSH
33143: LD_INT 1
33145: PUSH
33146: LD_INT 1
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: LIST
33153: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33154: LD_VAR 0 6
33158: PPUSH
33159: CALL_OW 264
33163: PUSH
33164: LD_INT 29
33166: PUSH
33167: EMPTY
33168: LIST
33169: IN
33170: IFFALSE 33191
// points := [ 70 , 200 , 400 ] ;
33172: LD_ADDR_VAR 0 9
33176: PUSH
33177: LD_INT 70
33179: PUSH
33180: LD_INT 200
33182: PUSH
33183: LD_INT 400
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: LIST
33190: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33191: LD_VAR 0 6
33195: PPUSH
33196: CALL_OW 264
33200: PUSH
33201: LD_INT 14
33203: PUSH
33204: LD_INT 53
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: IN
33211: IFFALSE 33232
// points := [ 40 , 10 , 20 ] ;
33213: LD_ADDR_VAR 0 9
33217: PUSH
33218: LD_INT 40
33220: PUSH
33221: LD_INT 10
33223: PUSH
33224: LD_INT 20
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: LIST
33231: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33232: LD_VAR 0 6
33236: PPUSH
33237: CALL_OW 264
33241: PUSH
33242: LD_INT 9
33244: PUSH
33245: EMPTY
33246: LIST
33247: IN
33248: IFFALSE 33269
// points := [ 5 , 70 , 20 ] ;
33250: LD_ADDR_VAR 0 9
33254: PUSH
33255: LD_INT 5
33257: PUSH
33258: LD_INT 70
33260: PUSH
33261: LD_INT 20
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: LIST
33268: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33269: LD_VAR 0 6
33273: PPUSH
33274: CALL_OW 264
33278: PUSH
33279: LD_INT 10
33281: PUSH
33282: EMPTY
33283: LIST
33284: IN
33285: IFFALSE 33306
// points := [ 35 , 110 , 70 ] ;
33287: LD_ADDR_VAR 0 9
33291: PUSH
33292: LD_INT 35
33294: PUSH
33295: LD_INT 110
33297: PUSH
33298: LD_INT 70
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: LIST
33305: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33306: LD_VAR 0 6
33310: PPUSH
33311: CALL_OW 265
33315: PUSH
33316: LD_INT 25
33318: EQUAL
33319: IFFALSE 33340
// points := [ 80 , 65 , 100 ] ;
33321: LD_ADDR_VAR 0 9
33325: PUSH
33326: LD_INT 80
33328: PUSH
33329: LD_INT 65
33331: PUSH
33332: LD_INT 100
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: LIST
33339: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33340: LD_VAR 0 6
33344: PPUSH
33345: CALL_OW 263
33349: PUSH
33350: LD_INT 1
33352: EQUAL
33353: IFFALSE 33388
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33355: LD_ADDR_VAR 0 10
33359: PUSH
33360: LD_VAR 0 10
33364: PUSH
33365: LD_VAR 0 6
33369: PPUSH
33370: CALL_OW 311
33374: PPUSH
33375: LD_INT 3
33377: PPUSH
33378: CALL_OW 259
33382: PUSH
33383: LD_INT 4
33385: MUL
33386: MUL
33387: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33388: LD_VAR 0 6
33392: PPUSH
33393: CALL_OW 263
33397: PUSH
33398: LD_INT 2
33400: EQUAL
33401: IFFALSE 33452
// begin j := IsControledBy ( i ) ;
33403: LD_ADDR_VAR 0 7
33407: PUSH
33408: LD_VAR 0 6
33412: PPUSH
33413: CALL_OW 312
33417: ST_TO_ADDR
// if j then
33418: LD_VAR 0 7
33422: IFFALSE 33452
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33424: LD_ADDR_VAR 0 10
33428: PUSH
33429: LD_VAR 0 10
33433: PUSH
33434: LD_VAR 0 7
33438: PPUSH
33439: LD_INT 3
33441: PPUSH
33442: CALL_OW 259
33446: PUSH
33447: LD_INT 3
33449: MUL
33450: MUL
33451: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33452: LD_VAR 0 6
33456: PPUSH
33457: CALL_OW 264
33461: PUSH
33462: LD_INT 5
33464: PUSH
33465: LD_INT 6
33467: PUSH
33468: LD_INT 46
33470: PUSH
33471: LD_INT 44
33473: PUSH
33474: LD_INT 47
33476: PUSH
33477: LD_INT 45
33479: PUSH
33480: LD_INT 28
33482: PUSH
33483: LD_INT 7
33485: PUSH
33486: LD_INT 27
33488: PUSH
33489: LD_INT 29
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: IN
33504: PUSH
33505: LD_VAR 0 1
33509: PPUSH
33510: LD_INT 52
33512: PPUSH
33513: CALL_OW 321
33517: PUSH
33518: LD_INT 2
33520: EQUAL
33521: AND
33522: IFFALSE 33539
// bpoints := bpoints * 1.2 ;
33524: LD_ADDR_VAR 0 10
33528: PUSH
33529: LD_VAR 0 10
33533: PUSH
33534: LD_REAL  1.20000000000000E+0000
33537: MUL
33538: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33539: LD_VAR 0 6
33543: PPUSH
33544: CALL_OW 264
33548: PUSH
33549: LD_INT 6
33551: PUSH
33552: LD_INT 46
33554: PUSH
33555: LD_INT 47
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: LIST
33562: IN
33563: IFFALSE 33580
// bpoints := bpoints * 1.2 ;
33565: LD_ADDR_VAR 0 10
33569: PUSH
33570: LD_VAR 0 10
33574: PUSH
33575: LD_REAL  1.20000000000000E+0000
33578: MUL
33579: ST_TO_ADDR
// end ; unit_building :
33580: GO 33594
33582: LD_INT 3
33584: DOUBLE
33585: EQUAL
33586: IFTRUE 33590
33588: GO 33593
33590: POP
// ; end ;
33591: GO 33594
33593: POP
// for j = 1 to 3 do
33594: LD_ADDR_VAR 0 7
33598: PUSH
33599: DOUBLE
33600: LD_INT 1
33602: DEC
33603: ST_TO_ADDR
33604: LD_INT 3
33606: PUSH
33607: FOR_TO
33608: IFFALSE 33661
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33610: LD_ADDR_VAR 0 5
33614: PUSH
33615: LD_VAR 0 5
33619: PPUSH
33620: LD_VAR 0 7
33624: PPUSH
33625: LD_VAR 0 5
33629: PUSH
33630: LD_VAR 0 7
33634: ARRAY
33635: PUSH
33636: LD_VAR 0 9
33640: PUSH
33641: LD_VAR 0 7
33645: ARRAY
33646: PUSH
33647: LD_VAR 0 10
33651: MUL
33652: PLUS
33653: PPUSH
33654: CALL_OW 1
33658: ST_TO_ADDR
33659: GO 33607
33661: POP
33662: POP
// end ;
33663: GO 32142
33665: POP
33666: POP
// result := Replace ( result , 4 , tmp ) ;
33667: LD_ADDR_VAR 0 5
33671: PUSH
33672: LD_VAR 0 5
33676: PPUSH
33677: LD_INT 4
33679: PPUSH
33680: LD_VAR 0 8
33684: PPUSH
33685: CALL_OW 1
33689: ST_TO_ADDR
// end ;
33690: LD_VAR 0 5
33694: RET
// export function DangerAtRange ( unit , range ) ; begin
33695: LD_INT 0
33697: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33698: LD_ADDR_VAR 0 3
33702: PUSH
33703: LD_VAR 0 1
33707: PPUSH
33708: CALL_OW 255
33712: PPUSH
33713: LD_VAR 0 1
33717: PPUSH
33718: CALL_OW 250
33722: PPUSH
33723: LD_VAR 0 1
33727: PPUSH
33728: CALL_OW 251
33732: PPUSH
33733: LD_VAR 0 2
33737: PPUSH
33738: CALL 31994 0 4
33742: ST_TO_ADDR
// end ;
33743: LD_VAR 0 3
33747: RET
// export function DangerInArea ( side , area ) ; begin
33748: LD_INT 0
33750: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33751: LD_ADDR_VAR 0 3
33755: PUSH
33756: LD_VAR 0 2
33760: PPUSH
33761: LD_INT 81
33763: PUSH
33764: LD_VAR 0 1
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PPUSH
33773: CALL_OW 70
33777: ST_TO_ADDR
// end ;
33778: LD_VAR 0 3
33782: RET
// export function IsExtension ( b ) ; begin
33783: LD_INT 0
33785: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33786: LD_ADDR_VAR 0 2
33790: PUSH
33791: LD_VAR 0 1
33795: PUSH
33796: LD_INT 23
33798: PUSH
33799: LD_INT 20
33801: PUSH
33802: LD_INT 22
33804: PUSH
33805: LD_INT 17
33807: PUSH
33808: LD_INT 24
33810: PUSH
33811: LD_INT 21
33813: PUSH
33814: LD_INT 19
33816: PUSH
33817: LD_INT 16
33819: PUSH
33820: LD_INT 25
33822: PUSH
33823: LD_INT 18
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: IN
33838: ST_TO_ADDR
// end ;
33839: LD_VAR 0 2
33843: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33844: LD_INT 0
33846: PPUSH
33847: PPUSH
33848: PPUSH
// result := [ ] ;
33849: LD_ADDR_VAR 0 4
33853: PUSH
33854: EMPTY
33855: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33856: LD_ADDR_VAR 0 5
33860: PUSH
33861: LD_VAR 0 2
33865: PPUSH
33866: LD_INT 21
33868: PUSH
33869: LD_INT 3
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PPUSH
33876: CALL_OW 70
33880: ST_TO_ADDR
// if not tmp then
33881: LD_VAR 0 5
33885: NOT
33886: IFFALSE 33890
// exit ;
33888: GO 33954
// if checkLink then
33890: LD_VAR 0 3
33894: IFFALSE 33944
// begin for i in tmp do
33896: LD_ADDR_VAR 0 6
33900: PUSH
33901: LD_VAR 0 5
33905: PUSH
33906: FOR_IN
33907: IFFALSE 33942
// if GetBase ( i ) <> base then
33909: LD_VAR 0 6
33913: PPUSH
33914: CALL_OW 274
33918: PUSH
33919: LD_VAR 0 1
33923: NONEQUAL
33924: IFFALSE 33940
// ComLinkToBase ( base , i ) ;
33926: LD_VAR 0 1
33930: PPUSH
33931: LD_VAR 0 6
33935: PPUSH
33936: CALL_OW 169
33940: GO 33906
33942: POP
33943: POP
// end ; result := tmp ;
33944: LD_ADDR_VAR 0 4
33948: PUSH
33949: LD_VAR 0 5
33953: ST_TO_ADDR
// end ;
33954: LD_VAR 0 4
33958: RET
// export function ComComplete ( units , b ) ; var i ; begin
33959: LD_INT 0
33961: PPUSH
33962: PPUSH
// if not units then
33963: LD_VAR 0 1
33967: NOT
33968: IFFALSE 33972
// exit ;
33970: GO 34062
// for i in units do
33972: LD_ADDR_VAR 0 4
33976: PUSH
33977: LD_VAR 0 1
33981: PUSH
33982: FOR_IN
33983: IFFALSE 34060
// if BuildingStatus ( b ) = bs_build then
33985: LD_VAR 0 2
33989: PPUSH
33990: CALL_OW 461
33994: PUSH
33995: LD_INT 1
33997: EQUAL
33998: IFFALSE 34058
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34000: LD_VAR 0 4
34004: PPUSH
34005: LD_STRING h
34007: PUSH
34008: LD_VAR 0 2
34012: PPUSH
34013: CALL_OW 250
34017: PUSH
34018: LD_VAR 0 2
34022: PPUSH
34023: CALL_OW 251
34027: PUSH
34028: LD_VAR 0 2
34032: PUSH
34033: LD_INT 0
34035: PUSH
34036: LD_INT 0
34038: PUSH
34039: LD_INT 0
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: PUSH
34051: EMPTY
34052: LIST
34053: PPUSH
34054: CALL_OW 446
34058: GO 33982
34060: POP
34061: POP
// end ;
34062: LD_VAR 0 3
34066: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34067: LD_INT 0
34069: PPUSH
34070: PPUSH
34071: PPUSH
34072: PPUSH
34073: PPUSH
34074: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34075: LD_VAR 0 1
34079: NOT
34080: PUSH
34081: LD_VAR 0 1
34085: PPUSH
34086: CALL_OW 263
34090: PUSH
34091: LD_INT 2
34093: NONEQUAL
34094: OR
34095: IFFALSE 34099
// exit ;
34097: GO 34415
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34099: LD_ADDR_VAR 0 6
34103: PUSH
34104: LD_INT 22
34106: PUSH
34107: LD_VAR 0 1
34111: PPUSH
34112: CALL_OW 255
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PUSH
34121: LD_INT 2
34123: PUSH
34124: LD_INT 30
34126: PUSH
34127: LD_INT 36
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 34
34136: PUSH
34137: LD_INT 31
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: LIST
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PPUSH
34153: CALL_OW 69
34157: ST_TO_ADDR
// if not tmp then
34158: LD_VAR 0 6
34162: NOT
34163: IFFALSE 34167
// exit ;
34165: GO 34415
// result := [ ] ;
34167: LD_ADDR_VAR 0 2
34171: PUSH
34172: EMPTY
34173: ST_TO_ADDR
// for i in tmp do
34174: LD_ADDR_VAR 0 3
34178: PUSH
34179: LD_VAR 0 6
34183: PUSH
34184: FOR_IN
34185: IFFALSE 34256
// begin t := UnitsInside ( i ) ;
34187: LD_ADDR_VAR 0 4
34191: PUSH
34192: LD_VAR 0 3
34196: PPUSH
34197: CALL_OW 313
34201: ST_TO_ADDR
// if t then
34202: LD_VAR 0 4
34206: IFFALSE 34254
// for j in t do
34208: LD_ADDR_VAR 0 7
34212: PUSH
34213: LD_VAR 0 4
34217: PUSH
34218: FOR_IN
34219: IFFALSE 34252
// result := Replace ( result , result + 1 , j ) ;
34221: LD_ADDR_VAR 0 2
34225: PUSH
34226: LD_VAR 0 2
34230: PPUSH
34231: LD_VAR 0 2
34235: PUSH
34236: LD_INT 1
34238: PLUS
34239: PPUSH
34240: LD_VAR 0 7
34244: PPUSH
34245: CALL_OW 1
34249: ST_TO_ADDR
34250: GO 34218
34252: POP
34253: POP
// end ;
34254: GO 34184
34256: POP
34257: POP
// if not result then
34258: LD_VAR 0 2
34262: NOT
34263: IFFALSE 34267
// exit ;
34265: GO 34415
// mech := result [ 1 ] ;
34267: LD_ADDR_VAR 0 5
34271: PUSH
34272: LD_VAR 0 2
34276: PUSH
34277: LD_INT 1
34279: ARRAY
34280: ST_TO_ADDR
// if result > 1 then
34281: LD_VAR 0 2
34285: PUSH
34286: LD_INT 1
34288: GREATER
34289: IFFALSE 34401
// begin for i = 2 to result do
34291: LD_ADDR_VAR 0 3
34295: PUSH
34296: DOUBLE
34297: LD_INT 2
34299: DEC
34300: ST_TO_ADDR
34301: LD_VAR 0 2
34305: PUSH
34306: FOR_TO
34307: IFFALSE 34399
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34309: LD_ADDR_VAR 0 4
34313: PUSH
34314: LD_VAR 0 2
34318: PUSH
34319: LD_VAR 0 3
34323: ARRAY
34324: PPUSH
34325: LD_INT 3
34327: PPUSH
34328: CALL_OW 259
34332: PUSH
34333: LD_VAR 0 2
34337: PUSH
34338: LD_VAR 0 3
34342: ARRAY
34343: PPUSH
34344: CALL_OW 432
34348: MINUS
34349: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34350: LD_VAR 0 4
34354: PUSH
34355: LD_VAR 0 5
34359: PPUSH
34360: LD_INT 3
34362: PPUSH
34363: CALL_OW 259
34367: PUSH
34368: LD_VAR 0 5
34372: PPUSH
34373: CALL_OW 432
34377: MINUS
34378: GREATEREQUAL
34379: IFFALSE 34397
// mech := result [ i ] ;
34381: LD_ADDR_VAR 0 5
34385: PUSH
34386: LD_VAR 0 2
34390: PUSH
34391: LD_VAR 0 3
34395: ARRAY
34396: ST_TO_ADDR
// end ;
34397: GO 34306
34399: POP
34400: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34401: LD_VAR 0 1
34405: PPUSH
34406: LD_VAR 0 5
34410: PPUSH
34411: CALL_OW 135
// end ;
34415: LD_VAR 0 2
34419: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34420: LD_INT 0
34422: PPUSH
34423: PPUSH
34424: PPUSH
34425: PPUSH
34426: PPUSH
34427: PPUSH
34428: PPUSH
34429: PPUSH
34430: PPUSH
34431: PPUSH
34432: PPUSH
34433: PPUSH
34434: PPUSH
// result := [ ] ;
34435: LD_ADDR_VAR 0 7
34439: PUSH
34440: EMPTY
34441: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34442: LD_VAR 0 1
34446: PPUSH
34447: CALL_OW 266
34451: PUSH
34452: LD_INT 0
34454: PUSH
34455: LD_INT 1
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: IN
34462: NOT
34463: IFFALSE 34467
// exit ;
34465: GO 36101
// if name then
34467: LD_VAR 0 3
34471: IFFALSE 34487
// SetBName ( base_dep , name ) ;
34473: LD_VAR 0 1
34477: PPUSH
34478: LD_VAR 0 3
34482: PPUSH
34483: CALL_OW 500
// base := GetBase ( base_dep ) ;
34487: LD_ADDR_VAR 0 15
34491: PUSH
34492: LD_VAR 0 1
34496: PPUSH
34497: CALL_OW 274
34501: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34502: LD_ADDR_VAR 0 16
34506: PUSH
34507: LD_VAR 0 1
34511: PPUSH
34512: CALL_OW 255
34516: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34517: LD_ADDR_VAR 0 17
34521: PUSH
34522: LD_VAR 0 1
34526: PPUSH
34527: CALL_OW 248
34531: ST_TO_ADDR
// if sources then
34532: LD_VAR 0 5
34536: IFFALSE 34583
// for i = 1 to 3 do
34538: LD_ADDR_VAR 0 8
34542: PUSH
34543: DOUBLE
34544: LD_INT 1
34546: DEC
34547: ST_TO_ADDR
34548: LD_INT 3
34550: PUSH
34551: FOR_TO
34552: IFFALSE 34581
// AddResourceType ( base , i , sources [ i ] ) ;
34554: LD_VAR 0 15
34558: PPUSH
34559: LD_VAR 0 8
34563: PPUSH
34564: LD_VAR 0 5
34568: PUSH
34569: LD_VAR 0 8
34573: ARRAY
34574: PPUSH
34575: CALL_OW 276
34579: GO 34551
34581: POP
34582: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34583: LD_ADDR_VAR 0 18
34587: PUSH
34588: LD_VAR 0 15
34592: PPUSH
34593: LD_VAR 0 2
34597: PPUSH
34598: LD_INT 1
34600: PPUSH
34601: CALL 33844 0 3
34605: ST_TO_ADDR
// InitHc ;
34606: CALL_OW 19
// InitUc ;
34610: CALL_OW 18
// uc_side := side ;
34614: LD_ADDR_OWVAR 20
34618: PUSH
34619: LD_VAR 0 16
34623: ST_TO_ADDR
// uc_nation := nation ;
34624: LD_ADDR_OWVAR 21
34628: PUSH
34629: LD_VAR 0 17
34633: ST_TO_ADDR
// if buildings then
34634: LD_VAR 0 18
34638: IFFALSE 35960
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34640: LD_ADDR_VAR 0 19
34644: PUSH
34645: LD_VAR 0 18
34649: PPUSH
34650: LD_INT 2
34652: PUSH
34653: LD_INT 30
34655: PUSH
34656: LD_INT 29
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 30
34665: PUSH
34666: LD_INT 30
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: LIST
34677: PPUSH
34678: CALL_OW 72
34682: ST_TO_ADDR
// if tmp then
34683: LD_VAR 0 19
34687: IFFALSE 34735
// for i in tmp do
34689: LD_ADDR_VAR 0 8
34693: PUSH
34694: LD_VAR 0 19
34698: PUSH
34699: FOR_IN
34700: IFFALSE 34733
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34702: LD_VAR 0 8
34706: PPUSH
34707: CALL_OW 250
34711: PPUSH
34712: LD_VAR 0 8
34716: PPUSH
34717: CALL_OW 251
34721: PPUSH
34722: LD_VAR 0 16
34726: PPUSH
34727: CALL_OW 441
34731: GO 34699
34733: POP
34734: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34735: LD_VAR 0 18
34739: PPUSH
34740: LD_INT 2
34742: PUSH
34743: LD_INT 30
34745: PUSH
34746: LD_INT 32
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 30
34755: PUSH
34756: LD_INT 33
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: LIST
34767: PPUSH
34768: CALL_OW 72
34772: IFFALSE 34860
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34774: LD_ADDR_VAR 0 8
34778: PUSH
34779: LD_VAR 0 18
34783: PPUSH
34784: LD_INT 2
34786: PUSH
34787: LD_INT 30
34789: PUSH
34790: LD_INT 32
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 30
34799: PUSH
34800: LD_INT 33
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: LIST
34811: PPUSH
34812: CALL_OW 72
34816: PUSH
34817: FOR_IN
34818: IFFALSE 34858
// begin if not GetBWeapon ( i ) then
34820: LD_VAR 0 8
34824: PPUSH
34825: CALL_OW 269
34829: NOT
34830: IFFALSE 34856
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34832: LD_VAR 0 8
34836: PPUSH
34837: LD_VAR 0 8
34841: PPUSH
34842: LD_VAR 0 2
34846: PPUSH
34847: CALL 36106 0 2
34851: PPUSH
34852: CALL_OW 431
// end ;
34856: GO 34817
34858: POP
34859: POP
// end ; for i = 1 to personel do
34860: LD_ADDR_VAR 0 8
34864: PUSH
34865: DOUBLE
34866: LD_INT 1
34868: DEC
34869: ST_TO_ADDR
34870: LD_VAR 0 6
34874: PUSH
34875: FOR_TO
34876: IFFALSE 35940
// begin if i > 4 then
34878: LD_VAR 0 8
34882: PUSH
34883: LD_INT 4
34885: GREATER
34886: IFFALSE 34890
// break ;
34888: GO 35940
// case i of 1 :
34890: LD_VAR 0 8
34894: PUSH
34895: LD_INT 1
34897: DOUBLE
34898: EQUAL
34899: IFTRUE 34903
34901: GO 34983
34903: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34904: LD_ADDR_VAR 0 12
34908: PUSH
34909: LD_VAR 0 18
34913: PPUSH
34914: LD_INT 22
34916: PUSH
34917: LD_VAR 0 16
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 58
34928: PUSH
34929: EMPTY
34930: LIST
34931: PUSH
34932: LD_INT 2
34934: PUSH
34935: LD_INT 30
34937: PUSH
34938: LD_INT 32
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 30
34947: PUSH
34948: LD_INT 4
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 30
34957: PUSH
34958: LD_INT 5
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: LIST
34975: PPUSH
34976: CALL_OW 72
34980: ST_TO_ADDR
34981: GO 35205
34983: LD_INT 2
34985: DOUBLE
34986: EQUAL
34987: IFTRUE 34991
34989: GO 35053
34991: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34992: LD_ADDR_VAR 0 12
34996: PUSH
34997: LD_VAR 0 18
35001: PPUSH
35002: LD_INT 22
35004: PUSH
35005: LD_VAR 0 16
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 2
35016: PUSH
35017: LD_INT 30
35019: PUSH
35020: LD_INT 0
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 30
35029: PUSH
35030: LD_INT 1
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: LIST
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PPUSH
35046: CALL_OW 72
35050: ST_TO_ADDR
35051: GO 35205
35053: LD_INT 3
35055: DOUBLE
35056: EQUAL
35057: IFTRUE 35061
35059: GO 35123
35061: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35062: LD_ADDR_VAR 0 12
35066: PUSH
35067: LD_VAR 0 18
35071: PPUSH
35072: LD_INT 22
35074: PUSH
35075: LD_VAR 0 16
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: LD_INT 2
35086: PUSH
35087: LD_INT 30
35089: PUSH
35090: LD_INT 2
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 30
35099: PUSH
35100: LD_INT 3
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: LIST
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PPUSH
35116: CALL_OW 72
35120: ST_TO_ADDR
35121: GO 35205
35123: LD_INT 4
35125: DOUBLE
35126: EQUAL
35127: IFTRUE 35131
35129: GO 35204
35131: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35132: LD_ADDR_VAR 0 12
35136: PUSH
35137: LD_VAR 0 18
35141: PPUSH
35142: LD_INT 22
35144: PUSH
35145: LD_VAR 0 16
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 2
35156: PUSH
35157: LD_INT 30
35159: PUSH
35160: LD_INT 6
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 30
35169: PUSH
35170: LD_INT 7
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 30
35179: PUSH
35180: LD_INT 8
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PPUSH
35197: CALL_OW 72
35201: ST_TO_ADDR
35202: GO 35205
35204: POP
// if i = 1 then
35205: LD_VAR 0 8
35209: PUSH
35210: LD_INT 1
35212: EQUAL
35213: IFFALSE 35324
// begin tmp := [ ] ;
35215: LD_ADDR_VAR 0 19
35219: PUSH
35220: EMPTY
35221: ST_TO_ADDR
// for j in f do
35222: LD_ADDR_VAR 0 9
35226: PUSH
35227: LD_VAR 0 12
35231: PUSH
35232: FOR_IN
35233: IFFALSE 35306
// if GetBType ( j ) = b_bunker then
35235: LD_VAR 0 9
35239: PPUSH
35240: CALL_OW 266
35244: PUSH
35245: LD_INT 32
35247: EQUAL
35248: IFFALSE 35275
// tmp := Insert ( tmp , 1 , j ) else
35250: LD_ADDR_VAR 0 19
35254: PUSH
35255: LD_VAR 0 19
35259: PPUSH
35260: LD_INT 1
35262: PPUSH
35263: LD_VAR 0 9
35267: PPUSH
35268: CALL_OW 2
35272: ST_TO_ADDR
35273: GO 35304
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35275: LD_ADDR_VAR 0 19
35279: PUSH
35280: LD_VAR 0 19
35284: PPUSH
35285: LD_VAR 0 19
35289: PUSH
35290: LD_INT 1
35292: PLUS
35293: PPUSH
35294: LD_VAR 0 9
35298: PPUSH
35299: CALL_OW 2
35303: ST_TO_ADDR
35304: GO 35232
35306: POP
35307: POP
// if tmp then
35308: LD_VAR 0 19
35312: IFFALSE 35324
// f := tmp ;
35314: LD_ADDR_VAR 0 12
35318: PUSH
35319: LD_VAR 0 19
35323: ST_TO_ADDR
// end ; x := personel [ i ] ;
35324: LD_ADDR_VAR 0 13
35328: PUSH
35329: LD_VAR 0 6
35333: PUSH
35334: LD_VAR 0 8
35338: ARRAY
35339: ST_TO_ADDR
// if x = - 1 then
35340: LD_VAR 0 13
35344: PUSH
35345: LD_INT 1
35347: NEG
35348: EQUAL
35349: IFFALSE 35558
// begin for j in f do
35351: LD_ADDR_VAR 0 9
35355: PUSH
35356: LD_VAR 0 12
35360: PUSH
35361: FOR_IN
35362: IFFALSE 35554
// repeat InitHc ;
35364: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35368: LD_VAR 0 9
35372: PPUSH
35373: CALL_OW 266
35377: PUSH
35378: LD_INT 5
35380: EQUAL
35381: IFFALSE 35451
// begin if UnitsInside ( j ) < 3 then
35383: LD_VAR 0 9
35387: PPUSH
35388: CALL_OW 313
35392: PUSH
35393: LD_INT 3
35395: LESS
35396: IFFALSE 35432
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35398: LD_INT 0
35400: PPUSH
35401: LD_INT 5
35403: PUSH
35404: LD_INT 8
35406: PUSH
35407: LD_INT 9
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: LIST
35414: PUSH
35415: LD_VAR 0 17
35419: ARRAY
35420: PPUSH
35421: LD_VAR 0 4
35425: PPUSH
35426: CALL_OW 380
35430: GO 35449
// PrepareHuman ( false , i , skill ) ;
35432: LD_INT 0
35434: PPUSH
35435: LD_VAR 0 8
35439: PPUSH
35440: LD_VAR 0 4
35444: PPUSH
35445: CALL_OW 380
// end else
35449: GO 35468
// PrepareHuman ( false , i , skill ) ;
35451: LD_INT 0
35453: PPUSH
35454: LD_VAR 0 8
35458: PPUSH
35459: LD_VAR 0 4
35463: PPUSH
35464: CALL_OW 380
// un := CreateHuman ;
35468: LD_ADDR_VAR 0 14
35472: PUSH
35473: CALL_OW 44
35477: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35478: LD_ADDR_VAR 0 7
35482: PUSH
35483: LD_VAR 0 7
35487: PPUSH
35488: LD_INT 1
35490: PPUSH
35491: LD_VAR 0 14
35495: PPUSH
35496: CALL_OW 2
35500: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35501: LD_VAR 0 14
35505: PPUSH
35506: LD_VAR 0 9
35510: PPUSH
35511: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35515: LD_VAR 0 9
35519: PPUSH
35520: CALL_OW 313
35524: PUSH
35525: LD_INT 6
35527: EQUAL
35528: PUSH
35529: LD_VAR 0 9
35533: PPUSH
35534: CALL_OW 266
35538: PUSH
35539: LD_INT 32
35541: PUSH
35542: LD_INT 31
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: IN
35549: OR
35550: IFFALSE 35364
35552: GO 35361
35554: POP
35555: POP
// end else
35556: GO 35938
// for j = 1 to x do
35558: LD_ADDR_VAR 0 9
35562: PUSH
35563: DOUBLE
35564: LD_INT 1
35566: DEC
35567: ST_TO_ADDR
35568: LD_VAR 0 13
35572: PUSH
35573: FOR_TO
35574: IFFALSE 35936
// begin InitHc ;
35576: CALL_OW 19
// if not f then
35580: LD_VAR 0 12
35584: NOT
35585: IFFALSE 35674
// begin PrepareHuman ( false , i , skill ) ;
35587: LD_INT 0
35589: PPUSH
35590: LD_VAR 0 8
35594: PPUSH
35595: LD_VAR 0 4
35599: PPUSH
35600: CALL_OW 380
// un := CreateHuman ;
35604: LD_ADDR_VAR 0 14
35608: PUSH
35609: CALL_OW 44
35613: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35614: LD_ADDR_VAR 0 7
35618: PUSH
35619: LD_VAR 0 7
35623: PPUSH
35624: LD_INT 1
35626: PPUSH
35627: LD_VAR 0 14
35631: PPUSH
35632: CALL_OW 2
35636: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35637: LD_VAR 0 14
35641: PPUSH
35642: LD_VAR 0 1
35646: PPUSH
35647: CALL_OW 250
35651: PPUSH
35652: LD_VAR 0 1
35656: PPUSH
35657: CALL_OW 251
35661: PPUSH
35662: LD_INT 10
35664: PPUSH
35665: LD_INT 0
35667: PPUSH
35668: CALL_OW 50
// continue ;
35672: GO 35573
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35674: LD_VAR 0 12
35678: PUSH
35679: LD_INT 1
35681: ARRAY
35682: PPUSH
35683: CALL_OW 313
35687: PUSH
35688: LD_VAR 0 12
35692: PUSH
35693: LD_INT 1
35695: ARRAY
35696: PPUSH
35697: CALL_OW 266
35701: PUSH
35702: LD_INT 32
35704: PUSH
35705: LD_INT 31
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: IN
35712: AND
35713: PUSH
35714: LD_VAR 0 12
35718: PUSH
35719: LD_INT 1
35721: ARRAY
35722: PPUSH
35723: CALL_OW 313
35727: PUSH
35728: LD_INT 6
35730: EQUAL
35731: OR
35732: IFFALSE 35752
// f := Delete ( f , 1 ) ;
35734: LD_ADDR_VAR 0 12
35738: PUSH
35739: LD_VAR 0 12
35743: PPUSH
35744: LD_INT 1
35746: PPUSH
35747: CALL_OW 3
35751: ST_TO_ADDR
// if not f then
35752: LD_VAR 0 12
35756: NOT
35757: IFFALSE 35775
// begin x := x + 2 ;
35759: LD_ADDR_VAR 0 13
35763: PUSH
35764: LD_VAR 0 13
35768: PUSH
35769: LD_INT 2
35771: PLUS
35772: ST_TO_ADDR
// continue ;
35773: GO 35573
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35775: LD_VAR 0 12
35779: PUSH
35780: LD_INT 1
35782: ARRAY
35783: PPUSH
35784: CALL_OW 266
35788: PUSH
35789: LD_INT 5
35791: EQUAL
35792: IFFALSE 35866
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35794: LD_VAR 0 12
35798: PUSH
35799: LD_INT 1
35801: ARRAY
35802: PPUSH
35803: CALL_OW 313
35807: PUSH
35808: LD_INT 3
35810: LESS
35811: IFFALSE 35847
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35813: LD_INT 0
35815: PPUSH
35816: LD_INT 5
35818: PUSH
35819: LD_INT 8
35821: PUSH
35822: LD_INT 9
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: LIST
35829: PUSH
35830: LD_VAR 0 17
35834: ARRAY
35835: PPUSH
35836: LD_VAR 0 4
35840: PPUSH
35841: CALL_OW 380
35845: GO 35864
// PrepareHuman ( false , i , skill ) ;
35847: LD_INT 0
35849: PPUSH
35850: LD_VAR 0 8
35854: PPUSH
35855: LD_VAR 0 4
35859: PPUSH
35860: CALL_OW 380
// end else
35864: GO 35883
// PrepareHuman ( false , i , skill ) ;
35866: LD_INT 0
35868: PPUSH
35869: LD_VAR 0 8
35873: PPUSH
35874: LD_VAR 0 4
35878: PPUSH
35879: CALL_OW 380
// un := CreateHuman ;
35883: LD_ADDR_VAR 0 14
35887: PUSH
35888: CALL_OW 44
35892: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35893: LD_ADDR_VAR 0 7
35897: PUSH
35898: LD_VAR 0 7
35902: PPUSH
35903: LD_INT 1
35905: PPUSH
35906: LD_VAR 0 14
35910: PPUSH
35911: CALL_OW 2
35915: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35916: LD_VAR 0 14
35920: PPUSH
35921: LD_VAR 0 12
35925: PUSH
35926: LD_INT 1
35928: ARRAY
35929: PPUSH
35930: CALL_OW 52
// end ;
35934: GO 35573
35936: POP
35937: POP
// end ;
35938: GO 34875
35940: POP
35941: POP
// result := result ^ buildings ;
35942: LD_ADDR_VAR 0 7
35946: PUSH
35947: LD_VAR 0 7
35951: PUSH
35952: LD_VAR 0 18
35956: ADD
35957: ST_TO_ADDR
// end else
35958: GO 36101
// begin for i = 1 to personel do
35960: LD_ADDR_VAR 0 8
35964: PUSH
35965: DOUBLE
35966: LD_INT 1
35968: DEC
35969: ST_TO_ADDR
35970: LD_VAR 0 6
35974: PUSH
35975: FOR_TO
35976: IFFALSE 36099
// begin if i > 4 then
35978: LD_VAR 0 8
35982: PUSH
35983: LD_INT 4
35985: GREATER
35986: IFFALSE 35990
// break ;
35988: GO 36099
// x := personel [ i ] ;
35990: LD_ADDR_VAR 0 13
35994: PUSH
35995: LD_VAR 0 6
35999: PUSH
36000: LD_VAR 0 8
36004: ARRAY
36005: ST_TO_ADDR
// if x = - 1 then
36006: LD_VAR 0 13
36010: PUSH
36011: LD_INT 1
36013: NEG
36014: EQUAL
36015: IFFALSE 36019
// continue ;
36017: GO 35975
// PrepareHuman ( false , i , skill ) ;
36019: LD_INT 0
36021: PPUSH
36022: LD_VAR 0 8
36026: PPUSH
36027: LD_VAR 0 4
36031: PPUSH
36032: CALL_OW 380
// un := CreateHuman ;
36036: LD_ADDR_VAR 0 14
36040: PUSH
36041: CALL_OW 44
36045: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36046: LD_VAR 0 14
36050: PPUSH
36051: LD_VAR 0 1
36055: PPUSH
36056: CALL_OW 250
36060: PPUSH
36061: LD_VAR 0 1
36065: PPUSH
36066: CALL_OW 251
36070: PPUSH
36071: LD_INT 10
36073: PPUSH
36074: LD_INT 0
36076: PPUSH
36077: CALL_OW 50
// result := result ^ un ;
36081: LD_ADDR_VAR 0 7
36085: PUSH
36086: LD_VAR 0 7
36090: PUSH
36091: LD_VAR 0 14
36095: ADD
36096: ST_TO_ADDR
// end ;
36097: GO 35975
36099: POP
36100: POP
// end ; end ;
36101: LD_VAR 0 7
36105: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36106: LD_INT 0
36108: PPUSH
36109: PPUSH
36110: PPUSH
36111: PPUSH
36112: PPUSH
36113: PPUSH
36114: PPUSH
36115: PPUSH
36116: PPUSH
36117: PPUSH
36118: PPUSH
36119: PPUSH
36120: PPUSH
36121: PPUSH
36122: PPUSH
36123: PPUSH
// result := false ;
36124: LD_ADDR_VAR 0 3
36128: PUSH
36129: LD_INT 0
36131: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36132: LD_VAR 0 1
36136: NOT
36137: PUSH
36138: LD_VAR 0 1
36142: PPUSH
36143: CALL_OW 266
36147: PUSH
36148: LD_INT 32
36150: PUSH
36151: LD_INT 33
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: IN
36158: NOT
36159: OR
36160: IFFALSE 36164
// exit ;
36162: GO 37273
// nat := GetNation ( tower ) ;
36164: LD_ADDR_VAR 0 12
36168: PUSH
36169: LD_VAR 0 1
36173: PPUSH
36174: CALL_OW 248
36178: ST_TO_ADDR
// side := GetSide ( tower ) ;
36179: LD_ADDR_VAR 0 16
36183: PUSH
36184: LD_VAR 0 1
36188: PPUSH
36189: CALL_OW 255
36193: ST_TO_ADDR
// x := GetX ( tower ) ;
36194: LD_ADDR_VAR 0 10
36198: PUSH
36199: LD_VAR 0 1
36203: PPUSH
36204: CALL_OW 250
36208: ST_TO_ADDR
// y := GetY ( tower ) ;
36209: LD_ADDR_VAR 0 11
36213: PUSH
36214: LD_VAR 0 1
36218: PPUSH
36219: CALL_OW 251
36223: ST_TO_ADDR
// if not x or not y then
36224: LD_VAR 0 10
36228: NOT
36229: PUSH
36230: LD_VAR 0 11
36234: NOT
36235: OR
36236: IFFALSE 36240
// exit ;
36238: GO 37273
// weapon := 0 ;
36240: LD_ADDR_VAR 0 18
36244: PUSH
36245: LD_INT 0
36247: ST_TO_ADDR
// fac_list := [ ] ;
36248: LD_ADDR_VAR 0 17
36252: PUSH
36253: EMPTY
36254: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36255: LD_ADDR_VAR 0 6
36259: PUSH
36260: LD_VAR 0 1
36264: PPUSH
36265: CALL_OW 274
36269: PPUSH
36270: LD_VAR 0 2
36274: PPUSH
36275: LD_INT 0
36277: PPUSH
36278: CALL 33844 0 3
36282: PPUSH
36283: LD_INT 30
36285: PUSH
36286: LD_INT 3
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PPUSH
36293: CALL_OW 72
36297: ST_TO_ADDR
// if not factories then
36298: LD_VAR 0 6
36302: NOT
36303: IFFALSE 36307
// exit ;
36305: GO 37273
// for i in factories do
36307: LD_ADDR_VAR 0 8
36311: PUSH
36312: LD_VAR 0 6
36316: PUSH
36317: FOR_IN
36318: IFFALSE 36343
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36320: LD_ADDR_VAR 0 17
36324: PUSH
36325: LD_VAR 0 17
36329: PUSH
36330: LD_VAR 0 8
36334: PPUSH
36335: CALL_OW 478
36339: UNION
36340: ST_TO_ADDR
36341: GO 36317
36343: POP
36344: POP
// if not fac_list then
36345: LD_VAR 0 17
36349: NOT
36350: IFFALSE 36354
// exit ;
36352: GO 37273
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36354: LD_ADDR_VAR 0 5
36358: PUSH
36359: LD_INT 4
36361: PUSH
36362: LD_INT 5
36364: PUSH
36365: LD_INT 9
36367: PUSH
36368: LD_INT 10
36370: PUSH
36371: LD_INT 6
36373: PUSH
36374: LD_INT 7
36376: PUSH
36377: LD_INT 11
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 27
36391: PUSH
36392: LD_INT 28
36394: PUSH
36395: LD_INT 26
36397: PUSH
36398: LD_INT 30
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: PUSH
36407: LD_INT 43
36409: PUSH
36410: LD_INT 44
36412: PUSH
36413: LD_INT 46
36415: PUSH
36416: LD_INT 45
36418: PUSH
36419: LD_INT 47
36421: PUSH
36422: LD_INT 49
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: LIST
36437: PUSH
36438: LD_VAR 0 12
36442: ARRAY
36443: ST_TO_ADDR
// list := list isect fac_list ;
36444: LD_ADDR_VAR 0 5
36448: PUSH
36449: LD_VAR 0 5
36453: PUSH
36454: LD_VAR 0 17
36458: ISECT
36459: ST_TO_ADDR
// if not list then
36460: LD_VAR 0 5
36464: NOT
36465: IFFALSE 36469
// exit ;
36467: GO 37273
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36469: LD_VAR 0 12
36473: PUSH
36474: LD_INT 3
36476: EQUAL
36477: PUSH
36478: LD_INT 49
36480: PUSH
36481: LD_VAR 0 5
36485: IN
36486: AND
36487: PUSH
36488: LD_INT 31
36490: PPUSH
36491: LD_VAR 0 16
36495: PPUSH
36496: CALL_OW 321
36500: PUSH
36501: LD_INT 2
36503: EQUAL
36504: AND
36505: IFFALSE 36565
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36507: LD_INT 22
36509: PUSH
36510: LD_VAR 0 16
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 35
36521: PUSH
36522: LD_INT 49
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 91
36531: PUSH
36532: LD_VAR 0 1
36536: PUSH
36537: LD_INT 10
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: LIST
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: LIST
36549: PPUSH
36550: CALL_OW 69
36554: NOT
36555: IFFALSE 36565
// weapon := ru_time_lapser ;
36557: LD_ADDR_VAR 0 18
36561: PUSH
36562: LD_INT 49
36564: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36565: LD_VAR 0 12
36569: PUSH
36570: LD_INT 1
36572: PUSH
36573: LD_INT 2
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: IN
36580: PUSH
36581: LD_INT 11
36583: PUSH
36584: LD_VAR 0 5
36588: IN
36589: PUSH
36590: LD_INT 30
36592: PUSH
36593: LD_VAR 0 5
36597: IN
36598: OR
36599: AND
36600: PUSH
36601: LD_INT 6
36603: PPUSH
36604: LD_VAR 0 16
36608: PPUSH
36609: CALL_OW 321
36613: PUSH
36614: LD_INT 2
36616: EQUAL
36617: AND
36618: IFFALSE 36783
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36620: LD_INT 22
36622: PUSH
36623: LD_VAR 0 16
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 2
36634: PUSH
36635: LD_INT 35
36637: PUSH
36638: LD_INT 11
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PUSH
36645: LD_INT 35
36647: PUSH
36648: LD_INT 30
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: LIST
36659: PUSH
36660: LD_INT 91
36662: PUSH
36663: LD_VAR 0 1
36667: PUSH
36668: LD_INT 18
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: LIST
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: LIST
36680: PPUSH
36681: CALL_OW 69
36685: NOT
36686: PUSH
36687: LD_INT 22
36689: PUSH
36690: LD_VAR 0 16
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 2
36701: PUSH
36702: LD_INT 30
36704: PUSH
36705: LD_INT 32
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: LD_INT 30
36714: PUSH
36715: LD_INT 33
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 91
36729: PUSH
36730: LD_VAR 0 1
36734: PUSH
36735: LD_INT 12
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: LIST
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: LIST
36747: PUSH
36748: EMPTY
36749: LIST
36750: PPUSH
36751: CALL_OW 69
36755: PUSH
36756: LD_INT 2
36758: GREATER
36759: AND
36760: IFFALSE 36783
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36762: LD_ADDR_VAR 0 18
36766: PUSH
36767: LD_INT 11
36769: PUSH
36770: LD_INT 30
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_VAR 0 12
36781: ARRAY
36782: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36783: LD_VAR 0 18
36787: NOT
36788: PUSH
36789: LD_INT 40
36791: PPUSH
36792: LD_VAR 0 16
36796: PPUSH
36797: CALL_OW 321
36801: PUSH
36802: LD_INT 2
36804: EQUAL
36805: AND
36806: PUSH
36807: LD_INT 7
36809: PUSH
36810: LD_VAR 0 5
36814: IN
36815: PUSH
36816: LD_INT 28
36818: PUSH
36819: LD_VAR 0 5
36823: IN
36824: OR
36825: PUSH
36826: LD_INT 45
36828: PUSH
36829: LD_VAR 0 5
36833: IN
36834: OR
36835: AND
36836: IFFALSE 37090
// begin hex := GetHexInfo ( x , y ) ;
36838: LD_ADDR_VAR 0 4
36842: PUSH
36843: LD_VAR 0 10
36847: PPUSH
36848: LD_VAR 0 11
36852: PPUSH
36853: CALL_OW 546
36857: ST_TO_ADDR
// if hex [ 1 ] then
36858: LD_VAR 0 4
36862: PUSH
36863: LD_INT 1
36865: ARRAY
36866: IFFALSE 36870
// exit ;
36868: GO 37273
// height := hex [ 2 ] ;
36870: LD_ADDR_VAR 0 15
36874: PUSH
36875: LD_VAR 0 4
36879: PUSH
36880: LD_INT 2
36882: ARRAY
36883: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36884: LD_ADDR_VAR 0 14
36888: PUSH
36889: LD_INT 0
36891: PUSH
36892: LD_INT 2
36894: PUSH
36895: LD_INT 3
36897: PUSH
36898: LD_INT 5
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: ST_TO_ADDR
// for i in tmp do
36907: LD_ADDR_VAR 0 8
36911: PUSH
36912: LD_VAR 0 14
36916: PUSH
36917: FOR_IN
36918: IFFALSE 37088
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36920: LD_ADDR_VAR 0 9
36924: PUSH
36925: LD_VAR 0 10
36929: PPUSH
36930: LD_VAR 0 8
36934: PPUSH
36935: LD_INT 5
36937: PPUSH
36938: CALL_OW 272
36942: PUSH
36943: LD_VAR 0 11
36947: PPUSH
36948: LD_VAR 0 8
36952: PPUSH
36953: LD_INT 5
36955: PPUSH
36956: CALL_OW 273
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36965: LD_VAR 0 9
36969: PUSH
36970: LD_INT 1
36972: ARRAY
36973: PPUSH
36974: LD_VAR 0 9
36978: PUSH
36979: LD_INT 2
36981: ARRAY
36982: PPUSH
36983: CALL_OW 488
36987: IFFALSE 37086
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36989: LD_ADDR_VAR 0 4
36993: PUSH
36994: LD_VAR 0 9
36998: PUSH
36999: LD_INT 1
37001: ARRAY
37002: PPUSH
37003: LD_VAR 0 9
37007: PUSH
37008: LD_INT 2
37010: ARRAY
37011: PPUSH
37012: CALL_OW 546
37016: ST_TO_ADDR
// if hex [ 1 ] then
37017: LD_VAR 0 4
37021: PUSH
37022: LD_INT 1
37024: ARRAY
37025: IFFALSE 37029
// continue ;
37027: GO 36917
// h := hex [ 2 ] ;
37029: LD_ADDR_VAR 0 13
37033: PUSH
37034: LD_VAR 0 4
37038: PUSH
37039: LD_INT 2
37041: ARRAY
37042: ST_TO_ADDR
// if h + 7 < height then
37043: LD_VAR 0 13
37047: PUSH
37048: LD_INT 7
37050: PLUS
37051: PUSH
37052: LD_VAR 0 15
37056: LESS
37057: IFFALSE 37086
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37059: LD_ADDR_VAR 0 18
37063: PUSH
37064: LD_INT 7
37066: PUSH
37067: LD_INT 28
37069: PUSH
37070: LD_INT 45
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: LIST
37077: PUSH
37078: LD_VAR 0 12
37082: ARRAY
37083: ST_TO_ADDR
// break ;
37084: GO 37088
// end ; end ; end ;
37086: GO 36917
37088: POP
37089: POP
// end ; if not weapon then
37090: LD_VAR 0 18
37094: NOT
37095: IFFALSE 37155
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37097: LD_ADDR_VAR 0 5
37101: PUSH
37102: LD_VAR 0 5
37106: PUSH
37107: LD_INT 11
37109: PUSH
37110: LD_INT 30
37112: PUSH
37113: LD_INT 49
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: LIST
37120: DIFF
37121: ST_TO_ADDR
// if not list then
37122: LD_VAR 0 5
37126: NOT
37127: IFFALSE 37131
// exit ;
37129: GO 37273
// weapon := list [ rand ( 1 , list ) ] ;
37131: LD_ADDR_VAR 0 18
37135: PUSH
37136: LD_VAR 0 5
37140: PUSH
37141: LD_INT 1
37143: PPUSH
37144: LD_VAR 0 5
37148: PPUSH
37149: CALL_OW 12
37153: ARRAY
37154: ST_TO_ADDR
// end ; if weapon then
37155: LD_VAR 0 18
37159: IFFALSE 37273
// begin tmp := CostOfWeapon ( weapon ) ;
37161: LD_ADDR_VAR 0 14
37165: PUSH
37166: LD_VAR 0 18
37170: PPUSH
37171: CALL_OW 451
37175: ST_TO_ADDR
// j := GetBase ( tower ) ;
37176: LD_ADDR_VAR 0 9
37180: PUSH
37181: LD_VAR 0 1
37185: PPUSH
37186: CALL_OW 274
37190: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37191: LD_VAR 0 9
37195: PPUSH
37196: LD_INT 1
37198: PPUSH
37199: CALL_OW 275
37203: PUSH
37204: LD_VAR 0 14
37208: PUSH
37209: LD_INT 1
37211: ARRAY
37212: GREATEREQUAL
37213: PUSH
37214: LD_VAR 0 9
37218: PPUSH
37219: LD_INT 2
37221: PPUSH
37222: CALL_OW 275
37226: PUSH
37227: LD_VAR 0 14
37231: PUSH
37232: LD_INT 2
37234: ARRAY
37235: GREATEREQUAL
37236: AND
37237: PUSH
37238: LD_VAR 0 9
37242: PPUSH
37243: LD_INT 3
37245: PPUSH
37246: CALL_OW 275
37250: PUSH
37251: LD_VAR 0 14
37255: PUSH
37256: LD_INT 3
37258: ARRAY
37259: GREATEREQUAL
37260: AND
37261: IFFALSE 37273
// result := weapon ;
37263: LD_ADDR_VAR 0 3
37267: PUSH
37268: LD_VAR 0 18
37272: ST_TO_ADDR
// end ; end ;
37273: LD_VAR 0 3
37277: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37278: LD_INT 0
37280: PPUSH
37281: PPUSH
// result := true ;
37282: LD_ADDR_VAR 0 3
37286: PUSH
37287: LD_INT 1
37289: ST_TO_ADDR
// if array1 = array2 then
37290: LD_VAR 0 1
37294: PUSH
37295: LD_VAR 0 2
37299: EQUAL
37300: IFFALSE 37360
// begin for i = 1 to array1 do
37302: LD_ADDR_VAR 0 4
37306: PUSH
37307: DOUBLE
37308: LD_INT 1
37310: DEC
37311: ST_TO_ADDR
37312: LD_VAR 0 1
37316: PUSH
37317: FOR_TO
37318: IFFALSE 37356
// if array1 [ i ] <> array2 [ i ] then
37320: LD_VAR 0 1
37324: PUSH
37325: LD_VAR 0 4
37329: ARRAY
37330: PUSH
37331: LD_VAR 0 2
37335: PUSH
37336: LD_VAR 0 4
37340: ARRAY
37341: NONEQUAL
37342: IFFALSE 37354
// begin result := false ;
37344: LD_ADDR_VAR 0 3
37348: PUSH
37349: LD_INT 0
37351: ST_TO_ADDR
// break ;
37352: GO 37356
// end ;
37354: GO 37317
37356: POP
37357: POP
// end else
37358: GO 37368
// result := false ;
37360: LD_ADDR_VAR 0 3
37364: PUSH
37365: LD_INT 0
37367: ST_TO_ADDR
// end ;
37368: LD_VAR 0 3
37372: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37373: LD_INT 0
37375: PPUSH
37376: PPUSH
// if not array1 or not array2 then
37377: LD_VAR 0 1
37381: NOT
37382: PUSH
37383: LD_VAR 0 2
37387: NOT
37388: OR
37389: IFFALSE 37393
// exit ;
37391: GO 37457
// result := true ;
37393: LD_ADDR_VAR 0 3
37397: PUSH
37398: LD_INT 1
37400: ST_TO_ADDR
// for i = 1 to array1 do
37401: LD_ADDR_VAR 0 4
37405: PUSH
37406: DOUBLE
37407: LD_INT 1
37409: DEC
37410: ST_TO_ADDR
37411: LD_VAR 0 1
37415: PUSH
37416: FOR_TO
37417: IFFALSE 37455
// if array1 [ i ] <> array2 [ i ] then
37419: LD_VAR 0 1
37423: PUSH
37424: LD_VAR 0 4
37428: ARRAY
37429: PUSH
37430: LD_VAR 0 2
37434: PUSH
37435: LD_VAR 0 4
37439: ARRAY
37440: NONEQUAL
37441: IFFALSE 37453
// begin result := false ;
37443: LD_ADDR_VAR 0 3
37447: PUSH
37448: LD_INT 0
37450: ST_TO_ADDR
// break ;
37451: GO 37455
// end ;
37453: GO 37416
37455: POP
37456: POP
// end ;
37457: LD_VAR 0 3
37461: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37462: LD_INT 0
37464: PPUSH
37465: PPUSH
37466: PPUSH
// pom := GetBase ( fac ) ;
37467: LD_ADDR_VAR 0 5
37471: PUSH
37472: LD_VAR 0 1
37476: PPUSH
37477: CALL_OW 274
37481: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37482: LD_ADDR_VAR 0 4
37486: PUSH
37487: LD_VAR 0 2
37491: PUSH
37492: LD_INT 1
37494: ARRAY
37495: PPUSH
37496: LD_VAR 0 2
37500: PUSH
37501: LD_INT 2
37503: ARRAY
37504: PPUSH
37505: LD_VAR 0 2
37509: PUSH
37510: LD_INT 3
37512: ARRAY
37513: PPUSH
37514: LD_VAR 0 2
37518: PUSH
37519: LD_INT 4
37521: ARRAY
37522: PPUSH
37523: CALL_OW 449
37527: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37528: LD_ADDR_VAR 0 3
37532: PUSH
37533: LD_VAR 0 5
37537: PPUSH
37538: LD_INT 1
37540: PPUSH
37541: CALL_OW 275
37545: PUSH
37546: LD_VAR 0 4
37550: PUSH
37551: LD_INT 1
37553: ARRAY
37554: GREATEREQUAL
37555: PUSH
37556: LD_VAR 0 5
37560: PPUSH
37561: LD_INT 2
37563: PPUSH
37564: CALL_OW 275
37568: PUSH
37569: LD_VAR 0 4
37573: PUSH
37574: LD_INT 2
37576: ARRAY
37577: GREATEREQUAL
37578: AND
37579: PUSH
37580: LD_VAR 0 5
37584: PPUSH
37585: LD_INT 3
37587: PPUSH
37588: CALL_OW 275
37592: PUSH
37593: LD_VAR 0 4
37597: PUSH
37598: LD_INT 3
37600: ARRAY
37601: GREATEREQUAL
37602: AND
37603: ST_TO_ADDR
// end ;
37604: LD_VAR 0 3
37608: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37609: LD_INT 0
37611: PPUSH
37612: PPUSH
37613: PPUSH
37614: PPUSH
// pom := GetBase ( building ) ;
37615: LD_ADDR_VAR 0 3
37619: PUSH
37620: LD_VAR 0 1
37624: PPUSH
37625: CALL_OW 274
37629: ST_TO_ADDR
// if not pom then
37630: LD_VAR 0 3
37634: NOT
37635: IFFALSE 37639
// exit ;
37637: GO 37809
// btype := GetBType ( building ) ;
37639: LD_ADDR_VAR 0 5
37643: PUSH
37644: LD_VAR 0 1
37648: PPUSH
37649: CALL_OW 266
37653: ST_TO_ADDR
// if btype = b_armoury then
37654: LD_VAR 0 5
37658: PUSH
37659: LD_INT 4
37661: EQUAL
37662: IFFALSE 37672
// btype := b_barracks ;
37664: LD_ADDR_VAR 0 5
37668: PUSH
37669: LD_INT 5
37671: ST_TO_ADDR
// if btype = b_depot then
37672: LD_VAR 0 5
37676: PUSH
37677: LD_INT 0
37679: EQUAL
37680: IFFALSE 37690
// btype := b_warehouse ;
37682: LD_ADDR_VAR 0 5
37686: PUSH
37687: LD_INT 1
37689: ST_TO_ADDR
// if btype = b_workshop then
37690: LD_VAR 0 5
37694: PUSH
37695: LD_INT 2
37697: EQUAL
37698: IFFALSE 37708
// btype := b_factory ;
37700: LD_ADDR_VAR 0 5
37704: PUSH
37705: LD_INT 3
37707: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37708: LD_ADDR_VAR 0 4
37712: PUSH
37713: LD_VAR 0 5
37717: PPUSH
37718: LD_VAR 0 1
37722: PPUSH
37723: CALL_OW 248
37727: PPUSH
37728: CALL_OW 450
37732: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37733: LD_ADDR_VAR 0 2
37737: PUSH
37738: LD_VAR 0 3
37742: PPUSH
37743: LD_INT 1
37745: PPUSH
37746: CALL_OW 275
37750: PUSH
37751: LD_VAR 0 4
37755: PUSH
37756: LD_INT 1
37758: ARRAY
37759: GREATEREQUAL
37760: PUSH
37761: LD_VAR 0 3
37765: PPUSH
37766: LD_INT 2
37768: PPUSH
37769: CALL_OW 275
37773: PUSH
37774: LD_VAR 0 4
37778: PUSH
37779: LD_INT 2
37781: ARRAY
37782: GREATEREQUAL
37783: AND
37784: PUSH
37785: LD_VAR 0 3
37789: PPUSH
37790: LD_INT 3
37792: PPUSH
37793: CALL_OW 275
37797: PUSH
37798: LD_VAR 0 4
37802: PUSH
37803: LD_INT 3
37805: ARRAY
37806: GREATEREQUAL
37807: AND
37808: ST_TO_ADDR
// end ;
37809: LD_VAR 0 2
37813: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37814: LD_INT 0
37816: PPUSH
37817: PPUSH
37818: PPUSH
// pom := GetBase ( building ) ;
37819: LD_ADDR_VAR 0 4
37823: PUSH
37824: LD_VAR 0 1
37828: PPUSH
37829: CALL_OW 274
37833: ST_TO_ADDR
// if not pom then
37834: LD_VAR 0 4
37838: NOT
37839: IFFALSE 37843
// exit ;
37841: GO 37944
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37843: LD_ADDR_VAR 0 5
37847: PUSH
37848: LD_VAR 0 2
37852: PPUSH
37853: LD_VAR 0 1
37857: PPUSH
37858: CALL_OW 248
37862: PPUSH
37863: CALL_OW 450
37867: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37868: LD_ADDR_VAR 0 3
37872: PUSH
37873: LD_VAR 0 4
37877: PPUSH
37878: LD_INT 1
37880: PPUSH
37881: CALL_OW 275
37885: PUSH
37886: LD_VAR 0 5
37890: PUSH
37891: LD_INT 1
37893: ARRAY
37894: GREATEREQUAL
37895: PUSH
37896: LD_VAR 0 4
37900: PPUSH
37901: LD_INT 2
37903: PPUSH
37904: CALL_OW 275
37908: PUSH
37909: LD_VAR 0 5
37913: PUSH
37914: LD_INT 2
37916: ARRAY
37917: GREATEREQUAL
37918: AND
37919: PUSH
37920: LD_VAR 0 4
37924: PPUSH
37925: LD_INT 3
37927: PPUSH
37928: CALL_OW 275
37932: PUSH
37933: LD_VAR 0 5
37937: PUSH
37938: LD_INT 3
37940: ARRAY
37941: GREATEREQUAL
37942: AND
37943: ST_TO_ADDR
// end ;
37944: LD_VAR 0 3
37948: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37949: LD_INT 0
37951: PPUSH
37952: PPUSH
37953: PPUSH
37954: PPUSH
37955: PPUSH
37956: PPUSH
37957: PPUSH
37958: PPUSH
37959: PPUSH
37960: PPUSH
37961: PPUSH
// result := false ;
37962: LD_ADDR_VAR 0 8
37966: PUSH
37967: LD_INT 0
37969: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37970: LD_VAR 0 5
37974: NOT
37975: PUSH
37976: LD_VAR 0 1
37980: NOT
37981: OR
37982: PUSH
37983: LD_VAR 0 2
37987: NOT
37988: OR
37989: PUSH
37990: LD_VAR 0 3
37994: NOT
37995: OR
37996: IFFALSE 38000
// exit ;
37998: GO 38814
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38000: LD_ADDR_VAR 0 14
38004: PUSH
38005: LD_VAR 0 1
38009: PPUSH
38010: LD_VAR 0 2
38014: PPUSH
38015: LD_VAR 0 3
38019: PPUSH
38020: LD_VAR 0 4
38024: PPUSH
38025: LD_VAR 0 5
38029: PUSH
38030: LD_INT 1
38032: ARRAY
38033: PPUSH
38034: CALL_OW 248
38038: PPUSH
38039: LD_INT 0
38041: PPUSH
38042: CALL 40047 0 6
38046: ST_TO_ADDR
// if not hexes then
38047: LD_VAR 0 14
38051: NOT
38052: IFFALSE 38056
// exit ;
38054: GO 38814
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38056: LD_ADDR_VAR 0 17
38060: PUSH
38061: LD_VAR 0 5
38065: PPUSH
38066: LD_INT 22
38068: PUSH
38069: LD_VAR 0 13
38073: PPUSH
38074: CALL_OW 255
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 2
38085: PUSH
38086: LD_INT 30
38088: PUSH
38089: LD_INT 0
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 30
38098: PUSH
38099: LD_INT 1
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: LIST
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PPUSH
38115: CALL_OW 72
38119: ST_TO_ADDR
// for i = 1 to hexes do
38120: LD_ADDR_VAR 0 9
38124: PUSH
38125: DOUBLE
38126: LD_INT 1
38128: DEC
38129: ST_TO_ADDR
38130: LD_VAR 0 14
38134: PUSH
38135: FOR_TO
38136: IFFALSE 38812
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38138: LD_ADDR_VAR 0 13
38142: PUSH
38143: LD_VAR 0 14
38147: PUSH
38148: LD_VAR 0 9
38152: ARRAY
38153: PUSH
38154: LD_INT 1
38156: ARRAY
38157: PPUSH
38158: LD_VAR 0 14
38162: PUSH
38163: LD_VAR 0 9
38167: ARRAY
38168: PUSH
38169: LD_INT 2
38171: ARRAY
38172: PPUSH
38173: CALL_OW 428
38177: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38178: LD_VAR 0 14
38182: PUSH
38183: LD_VAR 0 9
38187: ARRAY
38188: PUSH
38189: LD_INT 1
38191: ARRAY
38192: PPUSH
38193: LD_VAR 0 14
38197: PUSH
38198: LD_VAR 0 9
38202: ARRAY
38203: PUSH
38204: LD_INT 2
38206: ARRAY
38207: PPUSH
38208: CALL_OW 351
38212: PUSH
38213: LD_VAR 0 14
38217: PUSH
38218: LD_VAR 0 9
38222: ARRAY
38223: PUSH
38224: LD_INT 1
38226: ARRAY
38227: PPUSH
38228: LD_VAR 0 14
38232: PUSH
38233: LD_VAR 0 9
38237: ARRAY
38238: PUSH
38239: LD_INT 2
38241: ARRAY
38242: PPUSH
38243: CALL_OW 488
38247: NOT
38248: OR
38249: PUSH
38250: LD_VAR 0 13
38254: PPUSH
38255: CALL_OW 247
38259: PUSH
38260: LD_INT 3
38262: EQUAL
38263: OR
38264: IFFALSE 38270
// exit ;
38266: POP
38267: POP
38268: GO 38814
// if not tmp then
38270: LD_VAR 0 13
38274: NOT
38275: IFFALSE 38279
// continue ;
38277: GO 38135
// result := true ;
38279: LD_ADDR_VAR 0 8
38283: PUSH
38284: LD_INT 1
38286: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38287: LD_VAR 0 6
38291: PUSH
38292: LD_VAR 0 13
38296: PPUSH
38297: CALL_OW 247
38301: PUSH
38302: LD_INT 2
38304: EQUAL
38305: AND
38306: PUSH
38307: LD_VAR 0 13
38311: PPUSH
38312: CALL_OW 263
38316: PUSH
38317: LD_INT 1
38319: EQUAL
38320: AND
38321: IFFALSE 38485
// begin if IsDrivenBy ( tmp ) then
38323: LD_VAR 0 13
38327: PPUSH
38328: CALL_OW 311
38332: IFFALSE 38336
// continue ;
38334: GO 38135
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38336: LD_VAR 0 6
38340: PPUSH
38341: LD_INT 3
38343: PUSH
38344: LD_INT 60
38346: PUSH
38347: EMPTY
38348: LIST
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 3
38356: PUSH
38357: LD_INT 55
38359: PUSH
38360: EMPTY
38361: LIST
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PPUSH
38371: CALL_OW 72
38375: IFFALSE 38483
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38377: LD_ADDR_VAR 0 18
38381: PUSH
38382: LD_VAR 0 6
38386: PPUSH
38387: LD_INT 3
38389: PUSH
38390: LD_INT 60
38392: PUSH
38393: EMPTY
38394: LIST
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: LD_INT 3
38402: PUSH
38403: LD_INT 55
38405: PUSH
38406: EMPTY
38407: LIST
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PPUSH
38417: CALL_OW 72
38421: PUSH
38422: LD_INT 1
38424: ARRAY
38425: ST_TO_ADDR
// if IsInUnit ( driver ) then
38426: LD_VAR 0 18
38430: PPUSH
38431: CALL_OW 310
38435: IFFALSE 38446
// ComExit ( driver ) ;
38437: LD_VAR 0 18
38441: PPUSH
38442: CALL 63827 0 1
// AddComEnterUnit ( driver , tmp ) ;
38446: LD_VAR 0 18
38450: PPUSH
38451: LD_VAR 0 13
38455: PPUSH
38456: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38460: LD_VAR 0 18
38464: PPUSH
38465: LD_VAR 0 7
38469: PPUSH
38470: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38474: LD_VAR 0 18
38478: PPUSH
38479: CALL_OW 181
// end ; continue ;
38483: GO 38135
// end ; if not cleaners or not tmp in cleaners then
38485: LD_VAR 0 6
38489: NOT
38490: PUSH
38491: LD_VAR 0 13
38495: PUSH
38496: LD_VAR 0 6
38500: IN
38501: NOT
38502: OR
38503: IFFALSE 38810
// begin if dep then
38505: LD_VAR 0 17
38509: IFFALSE 38645
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38511: LD_ADDR_VAR 0 16
38515: PUSH
38516: LD_VAR 0 17
38520: PUSH
38521: LD_INT 1
38523: ARRAY
38524: PPUSH
38525: CALL_OW 250
38529: PPUSH
38530: LD_VAR 0 17
38534: PUSH
38535: LD_INT 1
38537: ARRAY
38538: PPUSH
38539: CALL_OW 254
38543: PPUSH
38544: LD_INT 5
38546: PPUSH
38547: CALL_OW 272
38551: PUSH
38552: LD_VAR 0 17
38556: PUSH
38557: LD_INT 1
38559: ARRAY
38560: PPUSH
38561: CALL_OW 251
38565: PPUSH
38566: LD_VAR 0 17
38570: PUSH
38571: LD_INT 1
38573: ARRAY
38574: PPUSH
38575: CALL_OW 254
38579: PPUSH
38580: LD_INT 5
38582: PPUSH
38583: CALL_OW 273
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38592: LD_VAR 0 16
38596: PUSH
38597: LD_INT 1
38599: ARRAY
38600: PPUSH
38601: LD_VAR 0 16
38605: PUSH
38606: LD_INT 2
38608: ARRAY
38609: PPUSH
38610: CALL_OW 488
38614: IFFALSE 38645
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38616: LD_VAR 0 13
38620: PPUSH
38621: LD_VAR 0 16
38625: PUSH
38626: LD_INT 1
38628: ARRAY
38629: PPUSH
38630: LD_VAR 0 16
38634: PUSH
38635: LD_INT 2
38637: ARRAY
38638: PPUSH
38639: CALL_OW 111
// continue ;
38643: GO 38135
// end ; end ; r := GetDir ( tmp ) ;
38645: LD_ADDR_VAR 0 15
38649: PUSH
38650: LD_VAR 0 13
38654: PPUSH
38655: CALL_OW 254
38659: ST_TO_ADDR
// if r = 5 then
38660: LD_VAR 0 15
38664: PUSH
38665: LD_INT 5
38667: EQUAL
38668: IFFALSE 38678
// r := 0 ;
38670: LD_ADDR_VAR 0 15
38674: PUSH
38675: LD_INT 0
38677: ST_TO_ADDR
// for j = r to 5 do
38678: LD_ADDR_VAR 0 10
38682: PUSH
38683: DOUBLE
38684: LD_VAR 0 15
38688: DEC
38689: ST_TO_ADDR
38690: LD_INT 5
38692: PUSH
38693: FOR_TO
38694: IFFALSE 38808
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38696: LD_ADDR_VAR 0 11
38700: PUSH
38701: LD_VAR 0 13
38705: PPUSH
38706: CALL_OW 250
38710: PPUSH
38711: LD_VAR 0 10
38715: PPUSH
38716: LD_INT 2
38718: PPUSH
38719: CALL_OW 272
38723: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38724: LD_ADDR_VAR 0 12
38728: PUSH
38729: LD_VAR 0 13
38733: PPUSH
38734: CALL_OW 251
38738: PPUSH
38739: LD_VAR 0 10
38743: PPUSH
38744: LD_INT 2
38746: PPUSH
38747: CALL_OW 273
38751: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38752: LD_VAR 0 11
38756: PPUSH
38757: LD_VAR 0 12
38761: PPUSH
38762: CALL_OW 488
38766: PUSH
38767: LD_VAR 0 11
38771: PPUSH
38772: LD_VAR 0 12
38776: PPUSH
38777: CALL_OW 428
38781: NOT
38782: AND
38783: IFFALSE 38806
// begin ComMoveXY ( tmp , _x , _y ) ;
38785: LD_VAR 0 13
38789: PPUSH
38790: LD_VAR 0 11
38794: PPUSH
38795: LD_VAR 0 12
38799: PPUSH
38800: CALL_OW 111
// break ;
38804: GO 38808
// end ; end ;
38806: GO 38693
38808: POP
38809: POP
// end ; end ;
38810: GO 38135
38812: POP
38813: POP
// end ;
38814: LD_VAR 0 8
38818: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38819: LD_INT 0
38821: PPUSH
// result := true ;
38822: LD_ADDR_VAR 0 3
38826: PUSH
38827: LD_INT 1
38829: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38830: LD_VAR 0 2
38834: PUSH
38835: LD_INT 24
38837: DOUBLE
38838: EQUAL
38839: IFTRUE 38849
38841: LD_INT 33
38843: DOUBLE
38844: EQUAL
38845: IFTRUE 38849
38847: GO 38874
38849: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38850: LD_ADDR_VAR 0 3
38854: PUSH
38855: LD_INT 32
38857: PPUSH
38858: LD_VAR 0 1
38862: PPUSH
38863: CALL_OW 321
38867: PUSH
38868: LD_INT 2
38870: EQUAL
38871: ST_TO_ADDR
38872: GO 39190
38874: LD_INT 20
38876: DOUBLE
38877: EQUAL
38878: IFTRUE 38882
38880: GO 38907
38882: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38883: LD_ADDR_VAR 0 3
38887: PUSH
38888: LD_INT 6
38890: PPUSH
38891: LD_VAR 0 1
38895: PPUSH
38896: CALL_OW 321
38900: PUSH
38901: LD_INT 2
38903: EQUAL
38904: ST_TO_ADDR
38905: GO 39190
38907: LD_INT 22
38909: DOUBLE
38910: EQUAL
38911: IFTRUE 38921
38913: LD_INT 36
38915: DOUBLE
38916: EQUAL
38917: IFTRUE 38921
38919: GO 38946
38921: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38922: LD_ADDR_VAR 0 3
38926: PUSH
38927: LD_INT 15
38929: PPUSH
38930: LD_VAR 0 1
38934: PPUSH
38935: CALL_OW 321
38939: PUSH
38940: LD_INT 2
38942: EQUAL
38943: ST_TO_ADDR
38944: GO 39190
38946: LD_INT 30
38948: DOUBLE
38949: EQUAL
38950: IFTRUE 38954
38952: GO 38979
38954: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38955: LD_ADDR_VAR 0 3
38959: PUSH
38960: LD_INT 20
38962: PPUSH
38963: LD_VAR 0 1
38967: PPUSH
38968: CALL_OW 321
38972: PUSH
38973: LD_INT 2
38975: EQUAL
38976: ST_TO_ADDR
38977: GO 39190
38979: LD_INT 28
38981: DOUBLE
38982: EQUAL
38983: IFTRUE 38993
38985: LD_INT 21
38987: DOUBLE
38988: EQUAL
38989: IFTRUE 38993
38991: GO 39018
38993: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38994: LD_ADDR_VAR 0 3
38998: PUSH
38999: LD_INT 21
39001: PPUSH
39002: LD_VAR 0 1
39006: PPUSH
39007: CALL_OW 321
39011: PUSH
39012: LD_INT 2
39014: EQUAL
39015: ST_TO_ADDR
39016: GO 39190
39018: LD_INT 16
39020: DOUBLE
39021: EQUAL
39022: IFTRUE 39026
39024: GO 39051
39026: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39027: LD_ADDR_VAR 0 3
39031: PUSH
39032: LD_INT 84
39034: PPUSH
39035: LD_VAR 0 1
39039: PPUSH
39040: CALL_OW 321
39044: PUSH
39045: LD_INT 2
39047: EQUAL
39048: ST_TO_ADDR
39049: GO 39190
39051: LD_INT 19
39053: DOUBLE
39054: EQUAL
39055: IFTRUE 39065
39057: LD_INT 23
39059: DOUBLE
39060: EQUAL
39061: IFTRUE 39065
39063: GO 39090
39065: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39066: LD_ADDR_VAR 0 3
39070: PUSH
39071: LD_INT 83
39073: PPUSH
39074: LD_VAR 0 1
39078: PPUSH
39079: CALL_OW 321
39083: PUSH
39084: LD_INT 2
39086: EQUAL
39087: ST_TO_ADDR
39088: GO 39190
39090: LD_INT 17
39092: DOUBLE
39093: EQUAL
39094: IFTRUE 39098
39096: GO 39123
39098: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39099: LD_ADDR_VAR 0 3
39103: PUSH
39104: LD_INT 39
39106: PPUSH
39107: LD_VAR 0 1
39111: PPUSH
39112: CALL_OW 321
39116: PUSH
39117: LD_INT 2
39119: EQUAL
39120: ST_TO_ADDR
39121: GO 39190
39123: LD_INT 18
39125: DOUBLE
39126: EQUAL
39127: IFTRUE 39131
39129: GO 39156
39131: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39132: LD_ADDR_VAR 0 3
39136: PUSH
39137: LD_INT 40
39139: PPUSH
39140: LD_VAR 0 1
39144: PPUSH
39145: CALL_OW 321
39149: PUSH
39150: LD_INT 2
39152: EQUAL
39153: ST_TO_ADDR
39154: GO 39190
39156: LD_INT 27
39158: DOUBLE
39159: EQUAL
39160: IFTRUE 39164
39162: GO 39189
39164: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39165: LD_ADDR_VAR 0 3
39169: PUSH
39170: LD_INT 35
39172: PPUSH
39173: LD_VAR 0 1
39177: PPUSH
39178: CALL_OW 321
39182: PUSH
39183: LD_INT 2
39185: EQUAL
39186: ST_TO_ADDR
39187: GO 39190
39189: POP
// end ;
39190: LD_VAR 0 3
39194: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39195: LD_INT 0
39197: PPUSH
39198: PPUSH
39199: PPUSH
39200: PPUSH
39201: PPUSH
39202: PPUSH
39203: PPUSH
39204: PPUSH
39205: PPUSH
39206: PPUSH
39207: PPUSH
// result := false ;
39208: LD_ADDR_VAR 0 6
39212: PUSH
39213: LD_INT 0
39215: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39216: LD_VAR 0 1
39220: NOT
39221: PUSH
39222: LD_VAR 0 1
39226: PPUSH
39227: CALL_OW 266
39231: PUSH
39232: LD_INT 0
39234: PUSH
39235: LD_INT 1
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: IN
39242: NOT
39243: OR
39244: PUSH
39245: LD_VAR 0 2
39249: NOT
39250: OR
39251: PUSH
39252: LD_VAR 0 5
39256: PUSH
39257: LD_INT 0
39259: PUSH
39260: LD_INT 1
39262: PUSH
39263: LD_INT 2
39265: PUSH
39266: LD_INT 3
39268: PUSH
39269: LD_INT 4
39271: PUSH
39272: LD_INT 5
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: IN
39283: NOT
39284: OR
39285: PUSH
39286: LD_VAR 0 3
39290: PPUSH
39291: LD_VAR 0 4
39295: PPUSH
39296: CALL_OW 488
39300: NOT
39301: OR
39302: IFFALSE 39306
// exit ;
39304: GO 40042
// side := GetSide ( depot ) ;
39306: LD_ADDR_VAR 0 9
39310: PUSH
39311: LD_VAR 0 1
39315: PPUSH
39316: CALL_OW 255
39320: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39321: LD_VAR 0 9
39325: PPUSH
39326: LD_VAR 0 2
39330: PPUSH
39331: CALL 38819 0 2
39335: NOT
39336: IFFALSE 39340
// exit ;
39338: GO 40042
// pom := GetBase ( depot ) ;
39340: LD_ADDR_VAR 0 10
39344: PUSH
39345: LD_VAR 0 1
39349: PPUSH
39350: CALL_OW 274
39354: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39355: LD_ADDR_VAR 0 11
39359: PUSH
39360: LD_VAR 0 2
39364: PPUSH
39365: LD_VAR 0 1
39369: PPUSH
39370: CALL_OW 248
39374: PPUSH
39375: CALL_OW 450
39379: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39380: LD_VAR 0 10
39384: PPUSH
39385: LD_INT 1
39387: PPUSH
39388: CALL_OW 275
39392: PUSH
39393: LD_VAR 0 11
39397: PUSH
39398: LD_INT 1
39400: ARRAY
39401: GREATEREQUAL
39402: PUSH
39403: LD_VAR 0 10
39407: PPUSH
39408: LD_INT 2
39410: PPUSH
39411: CALL_OW 275
39415: PUSH
39416: LD_VAR 0 11
39420: PUSH
39421: LD_INT 2
39423: ARRAY
39424: GREATEREQUAL
39425: AND
39426: PUSH
39427: LD_VAR 0 10
39431: PPUSH
39432: LD_INT 3
39434: PPUSH
39435: CALL_OW 275
39439: PUSH
39440: LD_VAR 0 11
39444: PUSH
39445: LD_INT 3
39447: ARRAY
39448: GREATEREQUAL
39449: AND
39450: NOT
39451: IFFALSE 39455
// exit ;
39453: GO 40042
// if GetBType ( depot ) = b_depot then
39455: LD_VAR 0 1
39459: PPUSH
39460: CALL_OW 266
39464: PUSH
39465: LD_INT 0
39467: EQUAL
39468: IFFALSE 39480
// dist := 28 else
39470: LD_ADDR_VAR 0 14
39474: PUSH
39475: LD_INT 28
39477: ST_TO_ADDR
39478: GO 39488
// dist := 36 ;
39480: LD_ADDR_VAR 0 14
39484: PUSH
39485: LD_INT 36
39487: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39488: LD_VAR 0 1
39492: PPUSH
39493: LD_VAR 0 3
39497: PPUSH
39498: LD_VAR 0 4
39502: PPUSH
39503: CALL_OW 297
39507: PUSH
39508: LD_VAR 0 14
39512: GREATER
39513: IFFALSE 39517
// exit ;
39515: GO 40042
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39517: LD_ADDR_VAR 0 12
39521: PUSH
39522: LD_VAR 0 2
39526: PPUSH
39527: LD_VAR 0 3
39531: PPUSH
39532: LD_VAR 0 4
39536: PPUSH
39537: LD_VAR 0 5
39541: PPUSH
39542: LD_VAR 0 1
39546: PPUSH
39547: CALL_OW 248
39551: PPUSH
39552: LD_INT 0
39554: PPUSH
39555: CALL 40047 0 6
39559: ST_TO_ADDR
// if not hexes then
39560: LD_VAR 0 12
39564: NOT
39565: IFFALSE 39569
// exit ;
39567: GO 40042
// hex := GetHexInfo ( x , y ) ;
39569: LD_ADDR_VAR 0 15
39573: PUSH
39574: LD_VAR 0 3
39578: PPUSH
39579: LD_VAR 0 4
39583: PPUSH
39584: CALL_OW 546
39588: ST_TO_ADDR
// if hex [ 1 ] then
39589: LD_VAR 0 15
39593: PUSH
39594: LD_INT 1
39596: ARRAY
39597: IFFALSE 39601
// exit ;
39599: GO 40042
// height := hex [ 2 ] ;
39601: LD_ADDR_VAR 0 13
39605: PUSH
39606: LD_VAR 0 15
39610: PUSH
39611: LD_INT 2
39613: ARRAY
39614: ST_TO_ADDR
// for i = 1 to hexes do
39615: LD_ADDR_VAR 0 7
39619: PUSH
39620: DOUBLE
39621: LD_INT 1
39623: DEC
39624: ST_TO_ADDR
39625: LD_VAR 0 12
39629: PUSH
39630: FOR_TO
39631: IFFALSE 39961
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39633: LD_VAR 0 12
39637: PUSH
39638: LD_VAR 0 7
39642: ARRAY
39643: PUSH
39644: LD_INT 1
39646: ARRAY
39647: PPUSH
39648: LD_VAR 0 12
39652: PUSH
39653: LD_VAR 0 7
39657: ARRAY
39658: PUSH
39659: LD_INT 2
39661: ARRAY
39662: PPUSH
39663: CALL_OW 488
39667: NOT
39668: PUSH
39669: LD_VAR 0 12
39673: PUSH
39674: LD_VAR 0 7
39678: ARRAY
39679: PUSH
39680: LD_INT 1
39682: ARRAY
39683: PPUSH
39684: LD_VAR 0 12
39688: PUSH
39689: LD_VAR 0 7
39693: ARRAY
39694: PUSH
39695: LD_INT 2
39697: ARRAY
39698: PPUSH
39699: CALL_OW 428
39703: PUSH
39704: LD_INT 0
39706: GREATER
39707: OR
39708: PUSH
39709: LD_VAR 0 12
39713: PUSH
39714: LD_VAR 0 7
39718: ARRAY
39719: PUSH
39720: LD_INT 1
39722: ARRAY
39723: PPUSH
39724: LD_VAR 0 12
39728: PUSH
39729: LD_VAR 0 7
39733: ARRAY
39734: PUSH
39735: LD_INT 2
39737: ARRAY
39738: PPUSH
39739: CALL_OW 351
39743: OR
39744: IFFALSE 39750
// exit ;
39746: POP
39747: POP
39748: GO 40042
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39750: LD_ADDR_VAR 0 8
39754: PUSH
39755: LD_VAR 0 12
39759: PUSH
39760: LD_VAR 0 7
39764: ARRAY
39765: PUSH
39766: LD_INT 1
39768: ARRAY
39769: PPUSH
39770: LD_VAR 0 12
39774: PUSH
39775: LD_VAR 0 7
39779: ARRAY
39780: PUSH
39781: LD_INT 2
39783: ARRAY
39784: PPUSH
39785: CALL_OW 546
39789: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39790: LD_VAR 0 8
39794: PUSH
39795: LD_INT 1
39797: ARRAY
39798: PUSH
39799: LD_VAR 0 8
39803: PUSH
39804: LD_INT 2
39806: ARRAY
39807: PUSH
39808: LD_VAR 0 13
39812: PUSH
39813: LD_INT 2
39815: PLUS
39816: GREATER
39817: OR
39818: PUSH
39819: LD_VAR 0 8
39823: PUSH
39824: LD_INT 2
39826: ARRAY
39827: PUSH
39828: LD_VAR 0 13
39832: PUSH
39833: LD_INT 2
39835: MINUS
39836: LESS
39837: OR
39838: PUSH
39839: LD_VAR 0 8
39843: PUSH
39844: LD_INT 3
39846: ARRAY
39847: PUSH
39848: LD_INT 0
39850: PUSH
39851: LD_INT 8
39853: PUSH
39854: LD_INT 9
39856: PUSH
39857: LD_INT 10
39859: PUSH
39860: LD_INT 11
39862: PUSH
39863: LD_INT 12
39865: PUSH
39866: LD_INT 13
39868: PUSH
39869: LD_INT 16
39871: PUSH
39872: LD_INT 17
39874: PUSH
39875: LD_INT 18
39877: PUSH
39878: LD_INT 19
39880: PUSH
39881: LD_INT 20
39883: PUSH
39884: LD_INT 21
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: IN
39902: NOT
39903: OR
39904: PUSH
39905: LD_VAR 0 8
39909: PUSH
39910: LD_INT 5
39912: ARRAY
39913: NOT
39914: OR
39915: PUSH
39916: LD_VAR 0 8
39920: PUSH
39921: LD_INT 6
39923: ARRAY
39924: PUSH
39925: LD_INT 1
39927: PUSH
39928: LD_INT 2
39930: PUSH
39931: LD_INT 7
39933: PUSH
39934: LD_INT 9
39936: PUSH
39937: LD_INT 10
39939: PUSH
39940: LD_INT 11
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: IN
39951: NOT
39952: OR
39953: IFFALSE 39959
// exit ;
39955: POP
39956: POP
39957: GO 40042
// end ;
39959: GO 39630
39961: POP
39962: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39963: LD_VAR 0 9
39967: PPUSH
39968: LD_VAR 0 3
39972: PPUSH
39973: LD_VAR 0 4
39977: PPUSH
39978: LD_INT 20
39980: PPUSH
39981: CALL 31994 0 4
39985: PUSH
39986: LD_INT 4
39988: ARRAY
39989: IFFALSE 39993
// exit ;
39991: GO 40042
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39993: LD_VAR 0 2
39997: PUSH
39998: LD_INT 29
40000: PUSH
40001: LD_INT 30
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: IN
40008: PUSH
40009: LD_VAR 0 3
40013: PPUSH
40014: LD_VAR 0 4
40018: PPUSH
40019: LD_VAR 0 9
40023: PPUSH
40024: CALL_OW 440
40028: NOT
40029: AND
40030: IFFALSE 40034
// exit ;
40032: GO 40042
// result := true ;
40034: LD_ADDR_VAR 0 6
40038: PUSH
40039: LD_INT 1
40041: ST_TO_ADDR
// end ;
40042: LD_VAR 0 6
40046: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40047: LD_INT 0
40049: PPUSH
40050: PPUSH
40051: PPUSH
40052: PPUSH
40053: PPUSH
40054: PPUSH
40055: PPUSH
40056: PPUSH
40057: PPUSH
40058: PPUSH
40059: PPUSH
40060: PPUSH
40061: PPUSH
40062: PPUSH
40063: PPUSH
40064: PPUSH
40065: PPUSH
40066: PPUSH
40067: PPUSH
40068: PPUSH
40069: PPUSH
40070: PPUSH
40071: PPUSH
40072: PPUSH
40073: PPUSH
40074: PPUSH
40075: PPUSH
40076: PPUSH
40077: PPUSH
40078: PPUSH
40079: PPUSH
40080: PPUSH
40081: PPUSH
40082: PPUSH
40083: PPUSH
40084: PPUSH
40085: PPUSH
40086: PPUSH
40087: PPUSH
40088: PPUSH
40089: PPUSH
40090: PPUSH
40091: PPUSH
40092: PPUSH
40093: PPUSH
40094: PPUSH
40095: PPUSH
40096: PPUSH
40097: PPUSH
40098: PPUSH
40099: PPUSH
40100: PPUSH
40101: PPUSH
40102: PPUSH
40103: PPUSH
40104: PPUSH
40105: PPUSH
40106: PPUSH
// result = [ ] ;
40107: LD_ADDR_VAR 0 7
40111: PUSH
40112: EMPTY
40113: ST_TO_ADDR
// temp_list = [ ] ;
40114: LD_ADDR_VAR 0 9
40118: PUSH
40119: EMPTY
40120: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40121: LD_VAR 0 4
40125: PUSH
40126: LD_INT 0
40128: PUSH
40129: LD_INT 1
40131: PUSH
40132: LD_INT 2
40134: PUSH
40135: LD_INT 3
40137: PUSH
40138: LD_INT 4
40140: PUSH
40141: LD_INT 5
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: IN
40152: NOT
40153: PUSH
40154: LD_VAR 0 1
40158: PUSH
40159: LD_INT 0
40161: PUSH
40162: LD_INT 1
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: IN
40169: PUSH
40170: LD_VAR 0 5
40174: PUSH
40175: LD_INT 1
40177: PUSH
40178: LD_INT 2
40180: PUSH
40181: LD_INT 3
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: LIST
40188: IN
40189: NOT
40190: AND
40191: OR
40192: IFFALSE 40196
// exit ;
40194: GO 58587
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40196: LD_VAR 0 1
40200: PUSH
40201: LD_INT 6
40203: PUSH
40204: LD_INT 7
40206: PUSH
40207: LD_INT 8
40209: PUSH
40210: LD_INT 13
40212: PUSH
40213: LD_INT 12
40215: PUSH
40216: LD_INT 15
40218: PUSH
40219: LD_INT 11
40221: PUSH
40222: LD_INT 14
40224: PUSH
40225: LD_INT 10
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: IN
40239: IFFALSE 40249
// btype = b_lab ;
40241: LD_ADDR_VAR 0 1
40245: PUSH
40246: LD_INT 6
40248: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40249: LD_VAR 0 6
40253: PUSH
40254: LD_INT 0
40256: PUSH
40257: LD_INT 1
40259: PUSH
40260: LD_INT 2
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: LIST
40267: IN
40268: NOT
40269: PUSH
40270: LD_VAR 0 1
40274: PUSH
40275: LD_INT 0
40277: PUSH
40278: LD_INT 1
40280: PUSH
40281: LD_INT 2
40283: PUSH
40284: LD_INT 3
40286: PUSH
40287: LD_INT 6
40289: PUSH
40290: LD_INT 36
40292: PUSH
40293: LD_INT 4
40295: PUSH
40296: LD_INT 5
40298: PUSH
40299: LD_INT 31
40301: PUSH
40302: LD_INT 32
40304: PUSH
40305: LD_INT 33
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: IN
40321: NOT
40322: PUSH
40323: LD_VAR 0 6
40327: PUSH
40328: LD_INT 1
40330: EQUAL
40331: AND
40332: OR
40333: PUSH
40334: LD_VAR 0 1
40338: PUSH
40339: LD_INT 2
40341: PUSH
40342: LD_INT 3
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: IN
40349: NOT
40350: PUSH
40351: LD_VAR 0 6
40355: PUSH
40356: LD_INT 2
40358: EQUAL
40359: AND
40360: OR
40361: IFFALSE 40371
// mode = 0 ;
40363: LD_ADDR_VAR 0 6
40367: PUSH
40368: LD_INT 0
40370: ST_TO_ADDR
// case mode of 0 :
40371: LD_VAR 0 6
40375: PUSH
40376: LD_INT 0
40378: DOUBLE
40379: EQUAL
40380: IFTRUE 40384
40382: GO 51837
40384: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40385: LD_ADDR_VAR 0 11
40389: PUSH
40390: LD_INT 0
40392: PUSH
40393: LD_INT 0
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 0
40402: PUSH
40403: LD_INT 1
40405: NEG
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 1
40413: PUSH
40414: LD_INT 0
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 1
40423: PUSH
40424: LD_INT 1
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 0
40433: PUSH
40434: LD_INT 1
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 1
40443: NEG
40444: PUSH
40445: LD_INT 0
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 1
40454: NEG
40455: PUSH
40456: LD_INT 1
40458: NEG
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 1
40466: NEG
40467: PUSH
40468: LD_INT 2
40470: NEG
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 0
40478: PUSH
40479: LD_INT 2
40481: NEG
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 1
40489: PUSH
40490: LD_INT 1
40492: NEG
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 1
40500: PUSH
40501: LD_INT 2
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 0
40510: PUSH
40511: LD_INT 2
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 1
40520: NEG
40521: PUSH
40522: LD_INT 1
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 1
40531: PUSH
40532: LD_INT 3
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 0
40541: PUSH
40542: LD_INT 3
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 1
40551: NEG
40552: PUSH
40553: LD_INT 2
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40578: LD_ADDR_VAR 0 12
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: LD_INT 0
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 0
40595: PUSH
40596: LD_INT 1
40598: NEG
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 1
40606: PUSH
40607: LD_INT 0
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 1
40616: PUSH
40617: LD_INT 1
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 0
40626: PUSH
40627: LD_INT 1
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 1
40636: NEG
40637: PUSH
40638: LD_INT 0
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 1
40647: NEG
40648: PUSH
40649: LD_INT 1
40651: NEG
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 1
40659: PUSH
40660: LD_INT 1
40662: NEG
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 2
40670: PUSH
40671: LD_INT 0
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 2
40680: PUSH
40681: LD_INT 1
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 1
40690: NEG
40691: PUSH
40692: LD_INT 1
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 2
40701: NEG
40702: PUSH
40703: LD_INT 0
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 2
40712: NEG
40713: PUSH
40714: LD_INT 1
40716: NEG
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 2
40724: NEG
40725: PUSH
40726: LD_INT 1
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 3
40735: NEG
40736: PUSH
40737: LD_INT 0
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 3
40746: NEG
40747: PUSH
40748: LD_INT 1
40750: NEG
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40774: LD_ADDR_VAR 0 13
40778: PUSH
40779: LD_INT 0
40781: PUSH
40782: LD_INT 0
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 0
40791: PUSH
40792: LD_INT 1
40794: NEG
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 1
40802: PUSH
40803: LD_INT 0
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 1
40812: PUSH
40813: LD_INT 1
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 0
40822: PUSH
40823: LD_INT 1
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 1
40832: NEG
40833: PUSH
40834: LD_INT 0
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 1
40843: NEG
40844: PUSH
40845: LD_INT 1
40847: NEG
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 1
40855: NEG
40856: PUSH
40857: LD_INT 2
40859: NEG
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 2
40867: PUSH
40868: LD_INT 1
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 2
40877: PUSH
40878: LD_INT 2
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 1
40887: PUSH
40888: LD_INT 2
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 2
40897: NEG
40898: PUSH
40899: LD_INT 1
40901: NEG
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 2
40909: NEG
40910: PUSH
40911: LD_INT 2
40913: NEG
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 2
40921: NEG
40922: PUSH
40923: LD_INT 3
40925: NEG
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 3
40933: NEG
40934: PUSH
40935: LD_INT 2
40937: NEG
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 3
40945: NEG
40946: PUSH
40947: LD_INT 3
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40973: LD_ADDR_VAR 0 14
40977: PUSH
40978: LD_INT 0
40980: PUSH
40981: LD_INT 0
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 0
40990: PUSH
40991: LD_INT 1
40993: NEG
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 1
41001: PUSH
41002: LD_INT 0
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 1
41011: PUSH
41012: LD_INT 1
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 0
41021: PUSH
41022: LD_INT 1
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 1
41031: NEG
41032: PUSH
41033: LD_INT 0
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 1
41042: NEG
41043: PUSH
41044: LD_INT 1
41046: NEG
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 1
41054: NEG
41055: PUSH
41056: LD_INT 2
41058: NEG
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 0
41066: PUSH
41067: LD_INT 2
41069: NEG
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 1
41077: PUSH
41078: LD_INT 1
41080: NEG
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 1
41088: PUSH
41089: LD_INT 2
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 0
41098: PUSH
41099: LD_INT 2
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 1
41108: NEG
41109: PUSH
41110: LD_INT 1
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 1
41119: NEG
41120: PUSH
41121: LD_INT 3
41123: NEG
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 0
41131: PUSH
41132: LD_INT 3
41134: NEG
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 1
41142: PUSH
41143: LD_INT 2
41145: NEG
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41169: LD_ADDR_VAR 0 15
41173: PUSH
41174: LD_INT 0
41176: PUSH
41177: LD_INT 0
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 0
41186: PUSH
41187: LD_INT 1
41189: NEG
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 1
41197: PUSH
41198: LD_INT 0
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 1
41207: PUSH
41208: LD_INT 1
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 0
41217: PUSH
41218: LD_INT 1
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 1
41227: NEG
41228: PUSH
41229: LD_INT 0
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 1
41238: NEG
41239: PUSH
41240: LD_INT 1
41242: NEG
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 1
41250: PUSH
41251: LD_INT 1
41253: NEG
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 2
41261: PUSH
41262: LD_INT 0
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 2
41271: PUSH
41272: LD_INT 1
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 1
41281: NEG
41282: PUSH
41283: LD_INT 1
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 2
41292: NEG
41293: PUSH
41294: LD_INT 0
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 2
41303: NEG
41304: PUSH
41305: LD_INT 1
41307: NEG
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 2
41315: PUSH
41316: LD_INT 1
41318: NEG
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 3
41326: PUSH
41327: LD_INT 0
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 3
41336: PUSH
41337: LD_INT 1
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41362: LD_ADDR_VAR 0 16
41366: PUSH
41367: LD_INT 0
41369: PUSH
41370: LD_INT 0
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: LD_INT 1
41382: NEG
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 1
41390: PUSH
41391: LD_INT 0
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: LD_INT 1
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 0
41410: PUSH
41411: LD_INT 1
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 1
41420: NEG
41421: PUSH
41422: LD_INT 0
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 1
41431: NEG
41432: PUSH
41433: LD_INT 1
41435: NEG
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 1
41443: NEG
41444: PUSH
41445: LD_INT 2
41447: NEG
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 2
41455: PUSH
41456: LD_INT 1
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 2
41465: PUSH
41466: LD_INT 2
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 1
41475: PUSH
41476: LD_INT 2
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 2
41485: NEG
41486: PUSH
41487: LD_INT 1
41489: NEG
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 2
41497: NEG
41498: PUSH
41499: LD_INT 2
41501: NEG
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 3
41509: PUSH
41510: LD_INT 2
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 3
41519: PUSH
41520: LD_INT 3
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 2
41529: PUSH
41530: LD_INT 3
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41555: LD_ADDR_VAR 0 17
41559: PUSH
41560: LD_INT 0
41562: PUSH
41563: LD_INT 0
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 0
41572: PUSH
41573: LD_INT 1
41575: NEG
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 1
41583: PUSH
41584: LD_INT 0
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: PUSH
41594: LD_INT 1
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: LD_INT 1
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: PUSH
41615: LD_INT 0
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 1
41624: NEG
41625: PUSH
41626: LD_INT 1
41628: NEG
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 1
41636: NEG
41637: PUSH
41638: LD_INT 2
41640: NEG
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 0
41648: PUSH
41649: LD_INT 2
41651: NEG
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 1
41659: PUSH
41660: LD_INT 1
41662: NEG
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 2
41670: PUSH
41671: LD_INT 0
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 2
41680: PUSH
41681: LD_INT 1
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 2
41690: PUSH
41691: LD_INT 2
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 1
41700: PUSH
41701: LD_INT 2
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 0
41710: PUSH
41711: LD_INT 2
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 1
41720: NEG
41721: PUSH
41722: LD_INT 1
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 2
41731: NEG
41732: PUSH
41733: LD_INT 0
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 2
41742: NEG
41743: PUSH
41744: LD_INT 1
41746: NEG
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 2
41754: NEG
41755: PUSH
41756: LD_INT 2
41758: NEG
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41785: LD_ADDR_VAR 0 18
41789: PUSH
41790: LD_INT 0
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: LD_INT 1
41805: NEG
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 1
41813: PUSH
41814: LD_INT 0
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 1
41823: PUSH
41824: LD_INT 1
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 0
41833: PUSH
41834: LD_INT 1
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 1
41843: NEG
41844: PUSH
41845: LD_INT 0
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 1
41854: NEG
41855: PUSH
41856: LD_INT 1
41858: NEG
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 1
41866: NEG
41867: PUSH
41868: LD_INT 2
41870: NEG
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 0
41878: PUSH
41879: LD_INT 2
41881: NEG
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 1
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 2
41900: PUSH
41901: LD_INT 0
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 2
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 2
41920: PUSH
41921: LD_INT 2
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 1
41930: PUSH
41931: LD_INT 2
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 0
41940: PUSH
41941: LD_INT 2
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 1
41950: NEG
41951: PUSH
41952: LD_INT 1
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 2
41961: NEG
41962: PUSH
41963: LD_INT 0
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 2
41972: NEG
41973: PUSH
41974: LD_INT 1
41976: NEG
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 2
41984: NEG
41985: PUSH
41986: LD_INT 2
41988: NEG
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42015: LD_ADDR_VAR 0 19
42019: PUSH
42020: LD_INT 0
42022: PUSH
42023: LD_INT 0
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: LD_INT 1
42035: NEG
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 1
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: LD_INT 1
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 0
42063: PUSH
42064: LD_INT 1
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 1
42073: NEG
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 1
42084: NEG
42085: PUSH
42086: LD_INT 1
42088: NEG
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 1
42096: NEG
42097: PUSH
42098: LD_INT 2
42100: NEG
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 0
42108: PUSH
42109: LD_INT 2
42111: NEG
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 1
42119: PUSH
42120: LD_INT 1
42122: NEG
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 2
42130: PUSH
42131: LD_INT 0
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 2
42140: PUSH
42141: LD_INT 1
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 2
42150: PUSH
42151: LD_INT 2
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 1
42160: PUSH
42161: LD_INT 2
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 0
42170: PUSH
42171: LD_INT 2
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 1
42180: NEG
42181: PUSH
42182: LD_INT 1
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 2
42191: NEG
42192: PUSH
42193: LD_INT 0
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 2
42202: NEG
42203: PUSH
42204: LD_INT 1
42206: NEG
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 2
42214: NEG
42215: PUSH
42216: LD_INT 2
42218: NEG
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42245: LD_ADDR_VAR 0 20
42249: PUSH
42250: LD_INT 0
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 0
42262: PUSH
42263: LD_INT 1
42265: NEG
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 1
42273: PUSH
42274: LD_INT 0
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 1
42283: PUSH
42284: LD_INT 1
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 0
42293: PUSH
42294: LD_INT 1
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 1
42303: NEG
42304: PUSH
42305: LD_INT 0
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 1
42314: NEG
42315: PUSH
42316: LD_INT 1
42318: NEG
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 1
42326: NEG
42327: PUSH
42328: LD_INT 2
42330: NEG
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 0
42338: PUSH
42339: LD_INT 2
42341: NEG
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 1
42349: PUSH
42350: LD_INT 1
42352: NEG
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 2
42360: PUSH
42361: LD_INT 0
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 2
42370: PUSH
42371: LD_INT 1
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 2
42380: PUSH
42381: LD_INT 2
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 1
42390: PUSH
42391: LD_INT 2
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: LD_INT 2
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 1
42410: NEG
42411: PUSH
42412: LD_INT 1
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 2
42421: NEG
42422: PUSH
42423: LD_INT 0
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 2
42432: NEG
42433: PUSH
42434: LD_INT 1
42436: NEG
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 2
42444: NEG
42445: PUSH
42446: LD_INT 2
42448: NEG
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42475: LD_ADDR_VAR 0 21
42479: PUSH
42480: LD_INT 0
42482: PUSH
42483: LD_INT 0
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: LD_INT 1
42495: NEG
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 1
42503: PUSH
42504: LD_INT 0
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 1
42513: PUSH
42514: LD_INT 1
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: LD_INT 1
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 1
42533: NEG
42534: PUSH
42535: LD_INT 0
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 1
42544: NEG
42545: PUSH
42546: LD_INT 1
42548: NEG
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 1
42556: NEG
42557: PUSH
42558: LD_INT 2
42560: NEG
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 0
42568: PUSH
42569: LD_INT 2
42571: NEG
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 1
42579: PUSH
42580: LD_INT 1
42582: NEG
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 2
42590: PUSH
42591: LD_INT 0
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 2
42600: PUSH
42601: LD_INT 1
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 2
42610: PUSH
42611: LD_INT 2
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 1
42620: PUSH
42621: LD_INT 2
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 0
42630: PUSH
42631: LD_INT 2
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: PUSH
42642: LD_INT 1
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 2
42651: NEG
42652: PUSH
42653: LD_INT 0
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 2
42662: NEG
42663: PUSH
42664: LD_INT 1
42666: NEG
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 2
42674: NEG
42675: PUSH
42676: LD_INT 2
42678: NEG
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42705: LD_ADDR_VAR 0 22
42709: PUSH
42710: LD_INT 0
42712: PUSH
42713: LD_INT 0
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: LD_INT 1
42725: NEG
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 1
42733: PUSH
42734: LD_INT 0
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 1
42743: PUSH
42744: LD_INT 1
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 0
42753: PUSH
42754: LD_INT 1
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 1
42763: NEG
42764: PUSH
42765: LD_INT 0
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 1
42774: NEG
42775: PUSH
42776: LD_INT 1
42778: NEG
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 1
42786: NEG
42787: PUSH
42788: LD_INT 2
42790: NEG
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 0
42798: PUSH
42799: LD_INT 2
42801: NEG
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 1
42809: PUSH
42810: LD_INT 1
42812: NEG
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 2
42820: PUSH
42821: LD_INT 0
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 2
42830: PUSH
42831: LD_INT 1
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 2
42840: PUSH
42841: LD_INT 2
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 1
42850: PUSH
42851: LD_INT 2
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 0
42860: PUSH
42861: LD_INT 2
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: LD_INT 1
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 2
42881: NEG
42882: PUSH
42883: LD_INT 0
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 2
42892: NEG
42893: PUSH
42894: LD_INT 1
42896: NEG
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 2
42904: NEG
42905: PUSH
42906: LD_INT 2
42908: NEG
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42935: LD_ADDR_VAR 0 23
42939: PUSH
42940: LD_INT 0
42942: PUSH
42943: LD_INT 0
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 0
42952: PUSH
42953: LD_INT 1
42955: NEG
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 1
42963: PUSH
42964: LD_INT 0
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 1
42973: PUSH
42974: LD_INT 1
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 0
42983: PUSH
42984: LD_INT 1
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 1
42993: NEG
42994: PUSH
42995: LD_INT 0
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: LD_INT 1
43008: NEG
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 1
43016: NEG
43017: PUSH
43018: LD_INT 2
43020: NEG
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 0
43028: PUSH
43029: LD_INT 2
43031: NEG
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 1
43039: PUSH
43040: LD_INT 1
43042: NEG
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 2
43050: PUSH
43051: LD_INT 0
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 2
43060: PUSH
43061: LD_INT 1
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 2
43070: PUSH
43071: LD_INT 2
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 1
43080: PUSH
43081: LD_INT 2
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 0
43090: PUSH
43091: LD_INT 2
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 1
43100: NEG
43101: PUSH
43102: LD_INT 1
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 2
43111: NEG
43112: PUSH
43113: LD_INT 0
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 2
43122: NEG
43123: PUSH
43124: LD_INT 1
43126: NEG
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 2
43134: NEG
43135: PUSH
43136: LD_INT 2
43138: NEG
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 2
43146: NEG
43147: PUSH
43148: LD_INT 3
43150: NEG
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 1
43158: NEG
43159: PUSH
43160: LD_INT 3
43162: NEG
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 1
43170: PUSH
43171: LD_INT 2
43173: NEG
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 2
43181: PUSH
43182: LD_INT 1
43184: NEG
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43215: LD_ADDR_VAR 0 24
43219: PUSH
43220: LD_INT 0
43222: PUSH
43223: LD_INT 0
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 0
43232: PUSH
43233: LD_INT 1
43235: NEG
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 1
43243: PUSH
43244: LD_INT 0
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 1
43253: PUSH
43254: LD_INT 1
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: LD_INT 1
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 1
43273: NEG
43274: PUSH
43275: LD_INT 0
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 1
43284: NEG
43285: PUSH
43286: LD_INT 1
43288: NEG
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 1
43296: NEG
43297: PUSH
43298: LD_INT 2
43300: NEG
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 0
43308: PUSH
43309: LD_INT 2
43311: NEG
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 1
43319: PUSH
43320: LD_INT 1
43322: NEG
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 2
43330: PUSH
43331: LD_INT 0
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 2
43340: PUSH
43341: LD_INT 1
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 2
43350: PUSH
43351: LD_INT 2
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 1
43360: PUSH
43361: LD_INT 2
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 0
43370: PUSH
43371: LD_INT 2
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 1
43380: NEG
43381: PUSH
43382: LD_INT 1
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 2
43391: NEG
43392: PUSH
43393: LD_INT 0
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 2
43402: NEG
43403: PUSH
43404: LD_INT 1
43406: NEG
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 2
43414: NEG
43415: PUSH
43416: LD_INT 2
43418: NEG
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 1
43426: PUSH
43427: LD_INT 2
43429: NEG
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 2
43437: PUSH
43438: LD_INT 1
43440: NEG
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 3
43448: PUSH
43449: LD_INT 1
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 3
43458: PUSH
43459: LD_INT 2
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43491: LD_ADDR_VAR 0 25
43495: PUSH
43496: LD_INT 0
43498: PUSH
43499: LD_INT 0
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 0
43508: PUSH
43509: LD_INT 1
43511: NEG
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 1
43519: PUSH
43520: LD_INT 0
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 1
43529: PUSH
43530: LD_INT 1
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: LD_INT 1
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 1
43549: NEG
43550: PUSH
43551: LD_INT 0
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 1
43560: NEG
43561: PUSH
43562: LD_INT 1
43564: NEG
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 1
43572: NEG
43573: PUSH
43574: LD_INT 2
43576: NEG
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 0
43584: PUSH
43585: LD_INT 2
43587: NEG
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 1
43595: PUSH
43596: LD_INT 1
43598: NEG
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 2
43606: PUSH
43607: LD_INT 0
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 2
43616: PUSH
43617: LD_INT 1
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 2
43626: PUSH
43627: LD_INT 2
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 1
43636: PUSH
43637: LD_INT 2
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 0
43646: PUSH
43647: LD_INT 2
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 1
43656: NEG
43657: PUSH
43658: LD_INT 1
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 2
43667: NEG
43668: PUSH
43669: LD_INT 0
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 2
43678: NEG
43679: PUSH
43680: LD_INT 1
43682: NEG
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 2
43690: NEG
43691: PUSH
43692: LD_INT 2
43694: NEG
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 3
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 3
43712: PUSH
43713: LD_INT 2
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 2
43722: PUSH
43723: LD_INT 3
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 1
43732: PUSH
43733: LD_INT 3
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43765: LD_ADDR_VAR 0 26
43769: PUSH
43770: LD_INT 0
43772: PUSH
43773: LD_INT 0
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 0
43782: PUSH
43783: LD_INT 1
43785: NEG
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 1
43793: PUSH
43794: LD_INT 0
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: LD_INT 1
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: LD_INT 1
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 1
43823: NEG
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 1
43834: NEG
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: NEG
43847: PUSH
43848: LD_INT 2
43850: NEG
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 0
43858: PUSH
43859: LD_INT 2
43861: NEG
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 1
43869: PUSH
43870: LD_INT 1
43872: NEG
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 2
43880: PUSH
43881: LD_INT 0
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 2
43890: PUSH
43891: LD_INT 1
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 2
43900: PUSH
43901: LD_INT 2
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 1
43910: PUSH
43911: LD_INT 2
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: LD_INT 2
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 1
43930: NEG
43931: PUSH
43932: LD_INT 1
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 2
43941: NEG
43942: PUSH
43943: LD_INT 0
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 2
43952: NEG
43953: PUSH
43954: LD_INT 1
43956: NEG
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 2
43964: NEG
43965: PUSH
43966: LD_INT 2
43968: NEG
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 2
43976: PUSH
43977: LD_INT 3
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 1
43986: PUSH
43987: LD_INT 3
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 1
43996: NEG
43997: PUSH
43998: LD_INT 2
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 2
44007: NEG
44008: PUSH
44009: LD_INT 1
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44041: LD_ADDR_VAR 0 27
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 1
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 1
44110: NEG
44111: PUSH
44112: LD_INT 1
44114: NEG
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 1
44122: NEG
44123: PUSH
44124: LD_INT 2
44126: NEG
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 0
44134: PUSH
44135: LD_INT 2
44137: NEG
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 1
44145: PUSH
44146: LD_INT 1
44148: NEG
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 2
44156: PUSH
44157: LD_INT 0
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 2
44166: PUSH
44167: LD_INT 1
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 2
44176: PUSH
44177: LD_INT 2
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 1
44186: PUSH
44187: LD_INT 2
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 0
44196: PUSH
44197: LD_INT 2
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 1
44206: NEG
44207: PUSH
44208: LD_INT 1
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 2
44217: NEG
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 2
44228: NEG
44229: PUSH
44230: LD_INT 1
44232: NEG
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 2
44240: NEG
44241: PUSH
44242: LD_INT 2
44244: NEG
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 1
44252: NEG
44253: PUSH
44254: LD_INT 2
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 2
44263: NEG
44264: PUSH
44265: LD_INT 1
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 3
44274: NEG
44275: PUSH
44276: LD_INT 1
44278: NEG
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 3
44286: NEG
44287: PUSH
44288: LD_INT 2
44290: NEG
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44321: LD_ADDR_VAR 0 28
44325: PUSH
44326: LD_INT 0
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 0
44338: PUSH
44339: LD_INT 1
44341: NEG
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 1
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 1
44359: PUSH
44360: LD_INT 1
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 0
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: LD_INT 0
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 1
44390: NEG
44391: PUSH
44392: LD_INT 1
44394: NEG
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 1
44402: NEG
44403: PUSH
44404: LD_INT 2
44406: NEG
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 0
44414: PUSH
44415: LD_INT 2
44417: NEG
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 1
44425: PUSH
44426: LD_INT 1
44428: NEG
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 2
44436: PUSH
44437: LD_INT 0
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 2
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 2
44456: PUSH
44457: LD_INT 2
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: LD_INT 2
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 0
44476: PUSH
44477: LD_INT 2
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 1
44486: NEG
44487: PUSH
44488: LD_INT 1
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 2
44497: NEG
44498: PUSH
44499: LD_INT 0
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 2
44508: NEG
44509: PUSH
44510: LD_INT 1
44512: NEG
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 2
44520: NEG
44521: PUSH
44522: LD_INT 2
44524: NEG
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 2
44532: NEG
44533: PUSH
44534: LD_INT 3
44536: NEG
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 1
44544: NEG
44545: PUSH
44546: LD_INT 3
44548: NEG
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 3
44556: NEG
44557: PUSH
44558: LD_INT 1
44560: NEG
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 3
44568: NEG
44569: PUSH
44570: LD_INT 2
44572: NEG
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44603: LD_ADDR_VAR 0 29
44607: PUSH
44608: LD_INT 0
44610: PUSH
44611: LD_INT 0
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: LD_INT 1
44623: NEG
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 1
44631: PUSH
44632: LD_INT 0
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 1
44641: PUSH
44642: LD_INT 1
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 0
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 1
44661: NEG
44662: PUSH
44663: LD_INT 0
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 1
44672: NEG
44673: PUSH
44674: LD_INT 1
44676: NEG
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 1
44684: NEG
44685: PUSH
44686: LD_INT 2
44688: NEG
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 0
44696: PUSH
44697: LD_INT 2
44699: NEG
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 1
44707: PUSH
44708: LD_INT 1
44710: NEG
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 2
44718: PUSH
44719: LD_INT 0
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 2
44728: PUSH
44729: LD_INT 1
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 1
44738: PUSH
44739: LD_INT 2
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: LD_INT 2
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 1
44758: NEG
44759: PUSH
44760: LD_INT 1
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 2
44769: NEG
44770: PUSH
44771: LD_INT 1
44773: NEG
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 2
44781: NEG
44782: PUSH
44783: LD_INT 2
44785: NEG
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 2
44793: NEG
44794: PUSH
44795: LD_INT 3
44797: NEG
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 2
44805: PUSH
44806: LD_INT 1
44808: NEG
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 3
44816: PUSH
44817: LD_INT 1
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 1
44826: PUSH
44827: LD_INT 3
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 1
44836: NEG
44837: PUSH
44838: LD_INT 2
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 3
44847: NEG
44848: PUSH
44849: LD_INT 2
44851: NEG
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44882: LD_ADDR_VAR 0 30
44886: PUSH
44887: LD_INT 0
44889: PUSH
44890: LD_INT 0
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 0
44899: PUSH
44900: LD_INT 1
44902: NEG
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 1
44910: PUSH
44911: LD_INT 0
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 1
44920: PUSH
44921: LD_INT 1
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 0
44930: PUSH
44931: LD_INT 1
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 1
44940: NEG
44941: PUSH
44942: LD_INT 0
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 1
44951: NEG
44952: PUSH
44953: LD_INT 1
44955: NEG
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: LD_INT 2
44967: NEG
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 0
44975: PUSH
44976: LD_INT 2
44978: NEG
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 1
44986: PUSH
44987: LD_INT 1
44989: NEG
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 2
44997: PUSH
44998: LD_INT 0
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 2
45007: PUSH
45008: LD_INT 1
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 2
45017: PUSH
45018: LD_INT 2
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 1
45027: PUSH
45028: LD_INT 2
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 1
45037: NEG
45038: PUSH
45039: LD_INT 1
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 2
45048: NEG
45049: PUSH
45050: LD_INT 0
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 2
45059: NEG
45060: PUSH
45061: LD_INT 1
45063: NEG
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 1
45071: NEG
45072: PUSH
45073: LD_INT 3
45075: NEG
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 1
45083: PUSH
45084: LD_INT 2
45086: NEG
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 3
45094: PUSH
45095: LD_INT 2
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 2
45104: PUSH
45105: LD_INT 3
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 2
45114: NEG
45115: PUSH
45116: LD_INT 1
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 3
45125: NEG
45126: PUSH
45127: LD_INT 1
45129: NEG
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45160: LD_ADDR_VAR 0 31
45164: PUSH
45165: LD_INT 0
45167: PUSH
45168: LD_INT 0
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: LD_INT 1
45180: NEG
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: LD_INT 0
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 1
45198: PUSH
45199: LD_INT 1
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: LD_INT 1
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 1
45218: NEG
45219: PUSH
45220: LD_INT 0
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 1
45229: NEG
45230: PUSH
45231: LD_INT 1
45233: NEG
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 1
45241: NEG
45242: PUSH
45243: LD_INT 2
45245: NEG
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 1
45253: PUSH
45254: LD_INT 1
45256: NEG
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 2
45264: PUSH
45265: LD_INT 0
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 2
45274: PUSH
45275: LD_INT 1
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 2
45284: PUSH
45285: LD_INT 2
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: LD_INT 2
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 0
45304: PUSH
45305: LD_INT 2
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 1
45314: NEG
45315: PUSH
45316: LD_INT 1
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 2
45325: NEG
45326: PUSH
45327: LD_INT 1
45329: NEG
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 2
45337: NEG
45338: PUSH
45339: LD_INT 2
45341: NEG
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 2
45349: NEG
45350: PUSH
45351: LD_INT 3
45353: NEG
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 2
45361: PUSH
45362: LD_INT 1
45364: NEG
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 3
45372: PUSH
45373: LD_INT 1
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 1
45382: PUSH
45383: LD_INT 3
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 1
45392: NEG
45393: PUSH
45394: LD_INT 2
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 3
45403: NEG
45404: PUSH
45405: LD_INT 2
45407: NEG
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45438: LD_ADDR_VAR 0 32
45442: PUSH
45443: LD_INT 0
45445: PUSH
45446: LD_INT 0
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 0
45455: PUSH
45456: LD_INT 1
45458: NEG
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 1
45466: PUSH
45467: LD_INT 0
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 1
45476: PUSH
45477: LD_INT 1
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 0
45486: PUSH
45487: LD_INT 1
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 1
45496: NEG
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 1
45507: NEG
45508: PUSH
45509: LD_INT 1
45511: NEG
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 1
45519: NEG
45520: PUSH
45521: LD_INT 2
45523: NEG
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 0
45531: PUSH
45532: LD_INT 2
45534: NEG
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 1
45542: PUSH
45543: LD_INT 1
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 2
45553: PUSH
45554: LD_INT 1
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 2
45563: PUSH
45564: LD_INT 2
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 1
45573: PUSH
45574: LD_INT 2
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: LD_INT 2
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 1
45593: NEG
45594: PUSH
45595: LD_INT 1
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 2
45604: NEG
45605: PUSH
45606: LD_INT 0
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 2
45615: NEG
45616: PUSH
45617: LD_INT 1
45619: NEG
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 1
45627: NEG
45628: PUSH
45629: LD_INT 3
45631: NEG
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 1
45639: PUSH
45640: LD_INT 2
45642: NEG
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 3
45650: PUSH
45651: LD_INT 2
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 2
45660: PUSH
45661: LD_INT 3
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 2
45670: NEG
45671: PUSH
45672: LD_INT 1
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 3
45681: NEG
45682: PUSH
45683: LD_INT 1
45685: NEG
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45716: LD_ADDR_VAR 0 33
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: LD_INT 0
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: LD_INT 1
45736: NEG
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 1
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 1
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: LD_INT 1
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 1
45774: NEG
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 1
45785: NEG
45786: PUSH
45787: LD_INT 1
45789: NEG
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: NEG
45798: PUSH
45799: LD_INT 2
45801: NEG
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 1
45809: PUSH
45810: LD_INT 1
45812: NEG
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 2
45820: PUSH
45821: LD_INT 0
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 2
45830: PUSH
45831: LD_INT 1
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 1
45840: PUSH
45841: LD_INT 2
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 0
45850: PUSH
45851: LD_INT 2
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 1
45860: NEG
45861: PUSH
45862: LD_INT 1
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 2
45871: NEG
45872: PUSH
45873: LD_INT 0
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 2
45882: NEG
45883: PUSH
45884: LD_INT 1
45886: NEG
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 2
45894: NEG
45895: PUSH
45896: LD_INT 2
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 2
45906: NEG
45907: PUSH
45908: LD_INT 3
45910: NEG
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 2
45918: PUSH
45919: LD_INT 1
45921: NEG
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 3
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 1
45939: PUSH
45940: LD_INT 3
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 1
45949: NEG
45950: PUSH
45951: LD_INT 2
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 3
45960: NEG
45961: PUSH
45962: LD_INT 2
45964: NEG
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45995: LD_ADDR_VAR 0 34
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 0
46012: PUSH
46013: LD_INT 1
46015: NEG
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 1
46023: PUSH
46024: LD_INT 0
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 1
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 0
46043: PUSH
46044: LD_INT 1
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 1
46053: NEG
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 1
46064: NEG
46065: PUSH
46066: LD_INT 1
46068: NEG
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 1
46076: NEG
46077: PUSH
46078: LD_INT 2
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: LD_INT 2
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 1
46099: PUSH
46100: LD_INT 1
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 2
46110: PUSH
46111: LD_INT 1
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 2
46120: PUSH
46121: LD_INT 2
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 1
46130: PUSH
46131: LD_INT 2
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 1
46140: NEG
46141: PUSH
46142: LD_INT 1
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 2
46151: NEG
46152: PUSH
46153: LD_INT 0
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 2
46162: NEG
46163: PUSH
46164: LD_INT 1
46166: NEG
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 2
46174: NEG
46175: PUSH
46176: LD_INT 2
46178: NEG
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 1
46186: NEG
46187: PUSH
46188: LD_INT 3
46190: NEG
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 1
46198: PUSH
46199: LD_INT 2
46201: NEG
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 3
46209: PUSH
46210: LD_INT 2
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 2
46219: PUSH
46220: LD_INT 3
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 2
46229: NEG
46230: PUSH
46231: LD_INT 1
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 3
46240: NEG
46241: PUSH
46242: LD_INT 1
46244: NEG
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46275: LD_ADDR_VAR 0 35
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: LD_INT 0
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 0
46292: PUSH
46293: LD_INT 1
46295: NEG
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 1
46303: PUSH
46304: LD_INT 0
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 1
46313: PUSH
46314: LD_INT 1
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 0
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 1
46333: NEG
46334: PUSH
46335: LD_INT 0
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 1
46344: NEG
46345: PUSH
46346: LD_INT 1
46348: NEG
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 2
46356: PUSH
46357: LD_INT 1
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 2
46366: NEG
46367: PUSH
46368: LD_INT 1
46370: NEG
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46387: LD_ADDR_VAR 0 36
46391: PUSH
46392: LD_INT 0
46394: PUSH
46395: LD_INT 0
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: LD_INT 1
46407: NEG
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 1
46415: PUSH
46416: LD_INT 0
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 1
46425: PUSH
46426: LD_INT 1
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 0
46435: PUSH
46436: LD_INT 1
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 1
46445: NEG
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 1
46456: NEG
46457: PUSH
46458: LD_INT 1
46460: NEG
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 1
46468: NEG
46469: PUSH
46470: LD_INT 2
46472: NEG
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: LD_INT 2
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46499: LD_ADDR_VAR 0 37
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: LD_INT 0
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: LD_INT 1
46519: NEG
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 1
46527: PUSH
46528: LD_INT 0
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: LD_INT 1
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: LD_INT 1
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 1
46557: NEG
46558: PUSH
46559: LD_INT 0
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 1
46568: NEG
46569: PUSH
46570: LD_INT 1
46572: NEG
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 1
46580: PUSH
46581: LD_INT 1
46583: NEG
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 1
46591: NEG
46592: PUSH
46593: LD_INT 1
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46611: LD_ADDR_VAR 0 38
46615: PUSH
46616: LD_INT 0
46618: PUSH
46619: LD_INT 0
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: LD_INT 1
46631: NEG
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 1
46639: PUSH
46640: LD_INT 0
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 1
46649: PUSH
46650: LD_INT 1
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 0
46659: PUSH
46660: LD_INT 1
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 1
46669: NEG
46670: PUSH
46671: LD_INT 0
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 1
46680: NEG
46681: PUSH
46682: LD_INT 1
46684: NEG
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 2
46692: PUSH
46693: LD_INT 1
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 2
46702: NEG
46703: PUSH
46704: LD_INT 1
46706: NEG
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46723: LD_ADDR_VAR 0 39
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: LD_INT 0
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: LD_INT 1
46743: NEG
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 1
46761: PUSH
46762: LD_INT 1
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 0
46771: PUSH
46772: LD_INT 1
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 1
46781: NEG
46782: PUSH
46783: LD_INT 0
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 1
46792: NEG
46793: PUSH
46794: LD_INT 1
46796: NEG
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 1
46804: NEG
46805: PUSH
46806: LD_INT 2
46808: NEG
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: LD_INT 2
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46835: LD_ADDR_VAR 0 40
46839: PUSH
46840: LD_INT 0
46842: PUSH
46843: LD_INT 0
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: LD_INT 1
46855: NEG
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 1
46863: PUSH
46864: LD_INT 0
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 1
46873: PUSH
46874: LD_INT 1
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 0
46883: PUSH
46884: LD_INT 1
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 1
46893: NEG
46894: PUSH
46895: LD_INT 0
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 1
46904: NEG
46905: PUSH
46906: LD_INT 1
46908: NEG
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 1
46916: PUSH
46917: LD_INT 1
46919: NEG
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 1
46927: NEG
46928: PUSH
46929: LD_INT 1
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46947: LD_ADDR_VAR 0 41
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: LD_INT 0
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: LD_INT 1
46967: NEG
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 1
46975: PUSH
46976: LD_INT 0
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 1
46985: PUSH
46986: LD_INT 1
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 0
46995: PUSH
46996: LD_INT 1
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 1
47005: NEG
47006: PUSH
47007: LD_INT 0
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 1
47016: NEG
47017: PUSH
47018: LD_INT 1
47020: NEG
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 1
47028: NEG
47029: PUSH
47030: LD_INT 2
47032: NEG
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 1
47040: PUSH
47041: LD_INT 1
47043: NEG
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 2
47051: PUSH
47052: LD_INT 0
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 2
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 2
47071: PUSH
47072: LD_INT 2
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: PUSH
47082: LD_INT 2
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 1
47091: NEG
47092: PUSH
47093: LD_INT 1
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 2
47102: NEG
47103: PUSH
47104: LD_INT 0
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 2
47113: NEG
47114: PUSH
47115: LD_INT 1
47117: NEG
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 2
47125: NEG
47126: PUSH
47127: LD_INT 2
47129: NEG
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 2
47137: NEG
47138: PUSH
47139: LD_INT 3
47141: NEG
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 2
47149: PUSH
47150: LD_INT 1
47152: NEG
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 3
47160: PUSH
47161: LD_INT 0
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 3
47170: PUSH
47171: LD_INT 1
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 3
47180: PUSH
47181: LD_INT 2
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 3
47190: PUSH
47191: LD_INT 3
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 2
47200: PUSH
47201: LD_INT 3
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 2
47210: NEG
47211: PUSH
47212: LD_INT 1
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 3
47221: NEG
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 3
47232: NEG
47233: PUSH
47234: LD_INT 1
47236: NEG
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 3
47244: NEG
47245: PUSH
47246: LD_INT 2
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 3
47256: NEG
47257: PUSH
47258: LD_INT 3
47260: NEG
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47297: LD_ADDR_VAR 0 42
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 1
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: LD_INT 1
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: LD_INT 1
47370: NEG
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 1
47378: NEG
47379: PUSH
47380: LD_INT 2
47382: NEG
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 0
47390: PUSH
47391: LD_INT 2
47393: NEG
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 1
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 2
47412: PUSH
47413: LD_INT 1
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 2
47422: PUSH
47423: LD_INT 2
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 1
47432: PUSH
47433: LD_INT 2
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: LD_INT 2
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 1
47452: NEG
47453: PUSH
47454: LD_INT 1
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 2
47463: NEG
47464: PUSH
47465: LD_INT 1
47467: NEG
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 2
47475: NEG
47476: PUSH
47477: LD_INT 2
47479: NEG
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 2
47487: NEG
47488: PUSH
47489: LD_INT 3
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: PUSH
47501: LD_INT 3
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 0
47511: PUSH
47512: LD_INT 3
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 1
47522: PUSH
47523: LD_INT 2
47525: NEG
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 3
47533: PUSH
47534: LD_INT 2
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 3
47543: PUSH
47544: LD_INT 3
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 2
47553: PUSH
47554: LD_INT 3
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 1
47563: PUSH
47564: LD_INT 3
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 0
47573: PUSH
47574: LD_INT 3
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 1
47583: NEG
47584: PUSH
47585: LD_INT 2
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 3
47594: NEG
47595: PUSH
47596: LD_INT 2
47598: NEG
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 3
47606: NEG
47607: PUSH
47608: LD_INT 3
47610: NEG
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47647: LD_ADDR_VAR 0 43
47651: PUSH
47652: LD_INT 0
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: LD_INT 0
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 1
47685: PUSH
47686: LD_INT 1
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 0
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: LD_INT 0
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: LD_INT 1
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 1
47728: NEG
47729: PUSH
47730: LD_INT 2
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: LD_INT 2
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 1
47751: PUSH
47752: LD_INT 1
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 2
47762: PUSH
47763: LD_INT 0
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 2
47772: PUSH
47773: LD_INT 1
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: LD_INT 2
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: LD_INT 2
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 1
47802: NEG
47803: PUSH
47804: LD_INT 1
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 2
47813: NEG
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 2
47824: NEG
47825: PUSH
47826: LD_INT 1
47828: NEG
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 1
47836: NEG
47837: PUSH
47838: LD_INT 3
47840: NEG
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 0
47848: PUSH
47849: LD_INT 3
47851: NEG
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 1
47859: PUSH
47860: LD_INT 2
47862: NEG
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 2
47870: PUSH
47871: LD_INT 1
47873: NEG
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 3
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 3
47891: PUSH
47892: LD_INT 1
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: LD_INT 3
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 0
47911: PUSH
47912: LD_INT 3
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 1
47921: NEG
47922: PUSH
47923: LD_INT 2
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 2
47932: NEG
47933: PUSH
47934: LD_INT 1
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 3
47943: NEG
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 3
47954: NEG
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47995: LD_ADDR_VAR 0 44
47999: PUSH
48000: LD_INT 0
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 0
48012: PUSH
48013: LD_INT 1
48015: NEG
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 1
48023: PUSH
48024: LD_INT 0
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 1
48033: PUSH
48034: LD_INT 1
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 0
48043: PUSH
48044: LD_INT 1
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 1
48053: NEG
48054: PUSH
48055: LD_INT 0
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 1
48064: NEG
48065: PUSH
48066: LD_INT 1
48068: NEG
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: LD_INT 2
48080: NEG
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 1
48088: PUSH
48089: LD_INT 1
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 2
48099: PUSH
48100: LD_INT 0
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 2
48109: PUSH
48110: LD_INT 1
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 2
48119: PUSH
48120: LD_INT 2
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 1
48129: PUSH
48130: LD_INT 2
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 1
48139: NEG
48140: PUSH
48141: LD_INT 1
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 2
48150: NEG
48151: PUSH
48152: LD_INT 0
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 2
48161: NEG
48162: PUSH
48163: LD_INT 1
48165: NEG
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 2
48173: NEG
48174: PUSH
48175: LD_INT 2
48177: NEG
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 2
48185: NEG
48186: PUSH
48187: LD_INT 3
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 2
48197: PUSH
48198: LD_INT 1
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 3
48208: PUSH
48209: LD_INT 0
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 3
48218: PUSH
48219: LD_INT 1
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 3
48228: PUSH
48229: LD_INT 2
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 3
48238: PUSH
48239: LD_INT 3
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 2
48248: PUSH
48249: LD_INT 3
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 2
48258: NEG
48259: PUSH
48260: LD_INT 1
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 3
48269: NEG
48270: PUSH
48271: LD_INT 0
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 3
48280: NEG
48281: PUSH
48282: LD_INT 1
48284: NEG
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 3
48292: NEG
48293: PUSH
48294: LD_INT 2
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 3
48304: NEG
48305: PUSH
48306: LD_INT 3
48308: NEG
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48345: LD_ADDR_VAR 0 45
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 1
48373: PUSH
48374: LD_INT 0
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 1
48383: PUSH
48384: LD_INT 1
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: NEG
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 1
48414: NEG
48415: PUSH
48416: LD_INT 1
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: NEG
48427: PUSH
48428: LD_INT 2
48430: NEG
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: LD_INT 2
48441: NEG
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 1
48449: PUSH
48450: LD_INT 1
48452: NEG
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 2
48460: PUSH
48461: LD_INT 1
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 2
48470: PUSH
48471: LD_INT 2
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: LD_INT 2
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 0
48490: PUSH
48491: LD_INT 2
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 1
48500: NEG
48501: PUSH
48502: LD_INT 1
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 2
48511: NEG
48512: PUSH
48513: LD_INT 1
48515: NEG
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 2
48523: NEG
48524: PUSH
48525: LD_INT 2
48527: NEG
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 2
48535: NEG
48536: PUSH
48537: LD_INT 3
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: LD_INT 3
48551: NEG
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: LD_INT 3
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 1
48570: PUSH
48571: LD_INT 2
48573: NEG
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 3
48581: PUSH
48582: LD_INT 2
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 3
48591: PUSH
48592: LD_INT 3
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 2
48601: PUSH
48602: LD_INT 3
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: LD_INT 3
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: LD_INT 3
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: LD_INT 2
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 3
48642: NEG
48643: PUSH
48644: LD_INT 2
48646: NEG
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 3
48654: NEG
48655: PUSH
48656: LD_INT 3
48658: NEG
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48695: LD_ADDR_VAR 0 46
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: LD_INT 0
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: LD_INT 1
48715: NEG
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 1
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: LD_INT 1
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: LD_INT 1
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 1
48764: NEG
48765: PUSH
48766: LD_INT 1
48768: NEG
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: LD_INT 2
48780: NEG
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 0
48788: PUSH
48789: LD_INT 2
48791: NEG
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 1
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 2
48810: PUSH
48811: LD_INT 0
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 2
48820: PUSH
48821: LD_INT 1
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 1
48830: PUSH
48831: LD_INT 2
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 0
48840: PUSH
48841: LD_INT 2
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 1
48850: NEG
48851: PUSH
48852: LD_INT 1
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 2
48861: NEG
48862: PUSH
48863: LD_INT 0
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 2
48872: NEG
48873: PUSH
48874: LD_INT 1
48876: NEG
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 1
48884: NEG
48885: PUSH
48886: LD_INT 3
48888: NEG
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 0
48896: PUSH
48897: LD_INT 3
48899: NEG
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 1
48907: PUSH
48908: LD_INT 2
48910: NEG
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 2
48918: PUSH
48919: LD_INT 1
48921: NEG
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 3
48929: PUSH
48930: LD_INT 0
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 3
48939: PUSH
48940: LD_INT 1
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 1
48949: PUSH
48950: LD_INT 3
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 0
48959: PUSH
48960: LD_INT 3
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: LD_INT 2
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 2
48980: NEG
48981: PUSH
48982: LD_INT 1
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 3
48991: NEG
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 3
49002: NEG
49003: PUSH
49004: LD_INT 1
49006: NEG
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49043: LD_ADDR_VAR 0 47
49047: PUSH
49048: LD_INT 0
49050: PUSH
49051: LD_INT 0
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: LD_INT 1
49063: NEG
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 1
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 0
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 1
49101: NEG
49102: PUSH
49103: LD_INT 0
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 1
49112: NEG
49113: PUSH
49114: LD_INT 1
49116: NEG
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 1
49124: NEG
49125: PUSH
49126: LD_INT 2
49128: NEG
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 0
49136: PUSH
49137: LD_INT 2
49139: NEG
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 1
49147: PUSH
49148: LD_INT 1
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 2
49158: NEG
49159: PUSH
49160: LD_INT 1
49162: NEG
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 2
49170: NEG
49171: PUSH
49172: LD_INT 2
49174: NEG
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49194: LD_ADDR_VAR 0 48
49198: PUSH
49199: LD_INT 0
49201: PUSH
49202: LD_INT 0
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 0
49211: PUSH
49212: LD_INT 1
49214: NEG
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 1
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 1
49232: PUSH
49233: LD_INT 1
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 0
49242: PUSH
49243: LD_INT 1
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 1
49252: NEG
49253: PUSH
49254: LD_INT 0
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 1
49263: NEG
49264: PUSH
49265: LD_INT 1
49267: NEG
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 1
49275: NEG
49276: PUSH
49277: LD_INT 2
49279: NEG
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 0
49287: PUSH
49288: LD_INT 2
49290: NEG
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 1
49298: PUSH
49299: LD_INT 1
49301: NEG
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 2
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 2
49319: PUSH
49320: LD_INT 1
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49341: LD_ADDR_VAR 0 49
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: LD_INT 0
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 0
49358: PUSH
49359: LD_INT 1
49361: NEG
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 1
49369: PUSH
49370: LD_INT 0
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 1
49379: PUSH
49380: LD_INT 1
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 0
49389: PUSH
49390: LD_INT 1
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 1
49399: NEG
49400: PUSH
49401: LD_INT 0
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 1
49410: NEG
49411: PUSH
49412: LD_INT 1
49414: NEG
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 1
49422: PUSH
49423: LD_INT 1
49425: NEG
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 2
49433: PUSH
49434: LD_INT 0
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 2
49443: PUSH
49444: LD_INT 1
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 2
49453: PUSH
49454: LD_INT 2
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 1
49463: PUSH
49464: LD_INT 2
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49485: LD_ADDR_VAR 0 50
49489: PUSH
49490: LD_INT 0
49492: PUSH
49493: LD_INT 0
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: LD_INT 1
49505: NEG
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 1
49513: PUSH
49514: LD_INT 0
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 1
49523: PUSH
49524: LD_INT 1
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 0
49533: PUSH
49534: LD_INT 1
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 1
49543: NEG
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 1
49554: NEG
49555: PUSH
49556: LD_INT 1
49558: NEG
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 2
49566: PUSH
49567: LD_INT 1
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 2
49576: PUSH
49577: LD_INT 2
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 1
49586: PUSH
49587: LD_INT 2
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 0
49596: PUSH
49597: LD_INT 2
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 1
49606: NEG
49607: PUSH
49608: LD_INT 1
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49629: LD_ADDR_VAR 0 51
49633: PUSH
49634: LD_INT 0
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 0
49646: PUSH
49647: LD_INT 1
49649: NEG
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 1
49657: PUSH
49658: LD_INT 0
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 1
49667: PUSH
49668: LD_INT 1
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: LD_INT 1
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 1
49687: NEG
49688: PUSH
49689: LD_INT 0
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 1
49698: NEG
49699: PUSH
49700: LD_INT 1
49702: NEG
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 1
49710: PUSH
49711: LD_INT 2
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: LD_INT 2
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 1
49730: NEG
49731: PUSH
49732: LD_INT 1
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 2
49741: NEG
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 2
49752: NEG
49753: PUSH
49754: LD_INT 1
49756: NEG
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49776: LD_ADDR_VAR 0 52
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: LD_INT 0
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: LD_INT 1
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 1
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 1
49814: PUSH
49815: LD_INT 1
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: LD_INT 1
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 1
49834: NEG
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 1
49845: NEG
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 1
49857: NEG
49858: PUSH
49859: LD_INT 2
49861: NEG
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 1
49869: NEG
49870: PUSH
49871: LD_INT 1
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 2
49880: NEG
49881: PUSH
49882: LD_INT 0
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 2
49891: NEG
49892: PUSH
49893: LD_INT 1
49895: NEG
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 2
49903: NEG
49904: PUSH
49905: LD_INT 2
49907: NEG
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49927: LD_ADDR_VAR 0 53
49931: PUSH
49932: LD_INT 0
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 0
49944: PUSH
49945: LD_INT 1
49947: NEG
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 1
49955: PUSH
49956: LD_INT 0
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 1
49965: PUSH
49966: LD_INT 1
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: LD_INT 1
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 1
49985: NEG
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 1
50008: NEG
50009: PUSH
50010: LD_INT 2
50012: NEG
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 0
50020: PUSH
50021: LD_INT 2
50023: NEG
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 1
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 2
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 2
50052: PUSH
50053: LD_INT 1
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 2
50062: PUSH
50063: LD_INT 2
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 1
50072: PUSH
50073: LD_INT 2
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: LD_INT 2
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 1
50092: NEG
50093: PUSH
50094: LD_INT 1
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 2
50103: NEG
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 2
50114: NEG
50115: PUSH
50116: LD_INT 1
50118: NEG
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 2
50126: NEG
50127: PUSH
50128: LD_INT 2
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50157: LD_ADDR_VAR 0 54
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 1
50195: PUSH
50196: LD_INT 1
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 0
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 1
50215: NEG
50216: PUSH
50217: LD_INT 0
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 1
50226: NEG
50227: PUSH
50228: LD_INT 1
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: LD_INT 2
50242: NEG
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: LD_INT 2
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 1
50261: PUSH
50262: LD_INT 1
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 2
50272: PUSH
50273: LD_INT 0
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 2
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 2
50292: PUSH
50293: LD_INT 2
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 1
50302: PUSH
50303: LD_INT 2
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: LD_INT 2
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 1
50322: NEG
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 2
50333: NEG
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 2
50344: NEG
50345: PUSH
50346: LD_INT 1
50348: NEG
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 2
50356: NEG
50357: PUSH
50358: LD_INT 2
50360: NEG
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50387: LD_ADDR_VAR 0 55
50391: PUSH
50392: LD_INT 0
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 0
50404: PUSH
50405: LD_INT 1
50407: NEG
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 1
50415: PUSH
50416: LD_INT 0
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 1
50425: PUSH
50426: LD_INT 1
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 1
50445: NEG
50446: PUSH
50447: LD_INT 0
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 1
50456: NEG
50457: PUSH
50458: LD_INT 1
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 1
50468: NEG
50469: PUSH
50470: LD_INT 2
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: LD_INT 2
50483: NEG
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 1
50491: PUSH
50492: LD_INT 1
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 2
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 2
50512: PUSH
50513: LD_INT 1
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 2
50522: PUSH
50523: LD_INT 2
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 1
50532: PUSH
50533: LD_INT 2
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 0
50542: PUSH
50543: LD_INT 2
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 1
50552: NEG
50553: PUSH
50554: LD_INT 1
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 2
50563: NEG
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 2
50574: NEG
50575: PUSH
50576: LD_INT 1
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 2
50586: NEG
50587: PUSH
50588: LD_INT 2
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50617: LD_ADDR_VAR 0 56
50621: PUSH
50622: LD_INT 0
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: LD_INT 1
50637: NEG
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 1
50655: PUSH
50656: LD_INT 1
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 0
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 1
50675: NEG
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 1
50686: NEG
50687: PUSH
50688: LD_INT 1
50690: NEG
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 1
50698: NEG
50699: PUSH
50700: LD_INT 2
50702: NEG
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 0
50710: PUSH
50711: LD_INT 2
50713: NEG
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 1
50721: PUSH
50722: LD_INT 1
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 2
50732: PUSH
50733: LD_INT 0
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 2
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 2
50752: PUSH
50753: LD_INT 2
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 1
50762: PUSH
50763: LD_INT 2
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: LD_INT 2
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 1
50782: NEG
50783: PUSH
50784: LD_INT 1
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 2
50793: NEG
50794: PUSH
50795: LD_INT 0
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 2
50804: NEG
50805: PUSH
50806: LD_INT 1
50808: NEG
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 2
50816: NEG
50817: PUSH
50818: LD_INT 2
50820: NEG
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50847: LD_ADDR_VAR 0 57
50851: PUSH
50852: LD_INT 0
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 1
50875: PUSH
50876: LD_INT 0
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 1
50885: PUSH
50886: LD_INT 1
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 0
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: LD_INT 0
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 1
50916: NEG
50917: PUSH
50918: LD_INT 1
50920: NEG
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 1
50928: NEG
50929: PUSH
50930: LD_INT 2
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 0
50940: PUSH
50941: LD_INT 2
50943: NEG
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 1
50951: PUSH
50952: LD_INT 1
50954: NEG
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 2
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 2
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 2
50982: PUSH
50983: LD_INT 2
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 1
50992: PUSH
50993: LD_INT 2
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 0
51002: PUSH
51003: LD_INT 2
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: LD_INT 1
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 2
51023: NEG
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 2
51034: NEG
51035: PUSH
51036: LD_INT 1
51038: NEG
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 2
51046: NEG
51047: PUSH
51048: LD_INT 2
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51077: LD_ADDR_VAR 0 58
51081: PUSH
51082: LD_INT 0
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 1
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 0
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 1
51146: NEG
51147: PUSH
51148: LD_INT 1
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 1
51158: NEG
51159: PUSH
51160: LD_INT 2
51162: NEG
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 0
51170: PUSH
51171: LD_INT 2
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: LD_INT 1
51184: NEG
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 2
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 2
51202: PUSH
51203: LD_INT 1
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 2
51212: PUSH
51213: LD_INT 2
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 1
51222: PUSH
51223: LD_INT 2
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: LD_INT 2
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 1
51242: NEG
51243: PUSH
51244: LD_INT 1
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 2
51253: NEG
51254: PUSH
51255: LD_INT 0
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 2
51264: NEG
51265: PUSH
51266: LD_INT 1
51268: NEG
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 2
51276: NEG
51277: PUSH
51278: LD_INT 2
51280: NEG
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51307: LD_ADDR_VAR 0 59
51311: PUSH
51312: LD_INT 0
51314: PUSH
51315: LD_INT 0
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 1
51335: PUSH
51336: LD_INT 0
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 1
51345: PUSH
51346: LD_INT 1
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 0
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 1
51365: NEG
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 1
51376: NEG
51377: PUSH
51378: LD_INT 1
51380: NEG
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51395: LD_ADDR_VAR 0 60
51399: PUSH
51400: LD_INT 0
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: LD_INT 1
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: LD_INT 0
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: LD_INT 1
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: LD_INT 1
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 1
51464: NEG
51465: PUSH
51466: LD_INT 1
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51483: LD_ADDR_VAR 0 61
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: LD_INT 0
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 0
51500: PUSH
51501: LD_INT 1
51503: NEG
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 1
51511: PUSH
51512: LD_INT 0
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 1
51521: PUSH
51522: LD_INT 1
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: LD_INT 1
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 1
51541: NEG
51542: PUSH
51543: LD_INT 0
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 1
51552: NEG
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51571: LD_ADDR_VAR 0 62
51575: PUSH
51576: LD_INT 0
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: LD_INT 1
51591: NEG
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 1
51599: PUSH
51600: LD_INT 0
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 1
51609: PUSH
51610: LD_INT 1
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: LD_INT 1
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 1
51629: NEG
51630: PUSH
51631: LD_INT 0
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 1
51640: NEG
51641: PUSH
51642: LD_INT 1
51644: NEG
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51659: LD_ADDR_VAR 0 63
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 0
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 1
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 1
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 0
51707: PUSH
51708: LD_INT 1
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 1
51717: NEG
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 1
51728: NEG
51729: PUSH
51730: LD_INT 1
51732: NEG
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51747: LD_ADDR_VAR 0 64
51751: PUSH
51752: LD_INT 0
51754: PUSH
51755: LD_INT 0
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: LD_INT 1
51767: NEG
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 1
51775: PUSH
51776: LD_INT 0
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 1
51785: PUSH
51786: LD_INT 1
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 1
51805: NEG
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 1
51816: NEG
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: ST_TO_ADDR
// end ; 1 :
51835: GO 57732
51837: LD_INT 1
51839: DOUBLE
51840: EQUAL
51841: IFTRUE 51845
51843: GO 54468
51845: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51846: LD_ADDR_VAR 0 11
51850: PUSH
51851: LD_INT 1
51853: NEG
51854: PUSH
51855: LD_INT 3
51857: NEG
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 0
51865: PUSH
51866: LD_INT 3
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 1
51876: PUSH
51877: LD_INT 2
51879: NEG
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: LIST
51889: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51890: LD_ADDR_VAR 0 12
51894: PUSH
51895: LD_INT 2
51897: PUSH
51898: LD_INT 1
51900: NEG
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 3
51908: PUSH
51909: LD_INT 0
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 3
51918: PUSH
51919: LD_INT 1
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: LIST
51930: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51931: LD_ADDR_VAR 0 13
51935: PUSH
51936: LD_INT 3
51938: PUSH
51939: LD_INT 2
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 3
51948: PUSH
51949: LD_INT 3
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 2
51958: PUSH
51959: LD_INT 3
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: LIST
51970: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51971: LD_ADDR_VAR 0 14
51975: PUSH
51976: LD_INT 1
51978: PUSH
51979: LD_INT 3
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 0
51988: PUSH
51989: LD_INT 3
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 1
51998: NEG
51999: PUSH
52000: LD_INT 2
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: LIST
52011: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52012: LD_ADDR_VAR 0 15
52016: PUSH
52017: LD_INT 2
52019: NEG
52020: PUSH
52021: LD_INT 1
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 3
52030: NEG
52031: PUSH
52032: LD_INT 0
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 3
52041: NEG
52042: PUSH
52043: LD_INT 1
52045: NEG
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: LIST
52055: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52056: LD_ADDR_VAR 0 16
52060: PUSH
52061: LD_INT 2
52063: NEG
52064: PUSH
52065: LD_INT 3
52067: NEG
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 3
52075: NEG
52076: PUSH
52077: LD_INT 2
52079: NEG
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 3
52087: NEG
52088: PUSH
52089: LD_INT 3
52091: NEG
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: LIST
52101: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52102: LD_ADDR_VAR 0 17
52106: PUSH
52107: LD_INT 1
52109: NEG
52110: PUSH
52111: LD_INT 3
52113: NEG
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 0
52121: PUSH
52122: LD_INT 3
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 1
52132: PUSH
52133: LD_INT 2
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: LIST
52145: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52146: LD_ADDR_VAR 0 18
52150: PUSH
52151: LD_INT 2
52153: PUSH
52154: LD_INT 1
52156: NEG
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 3
52164: PUSH
52165: LD_INT 0
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 3
52174: PUSH
52175: LD_INT 1
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: LIST
52186: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52187: LD_ADDR_VAR 0 19
52191: PUSH
52192: LD_INT 3
52194: PUSH
52195: LD_INT 2
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 3
52204: PUSH
52205: LD_INT 3
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 2
52214: PUSH
52215: LD_INT 3
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: LIST
52226: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52227: LD_ADDR_VAR 0 20
52231: PUSH
52232: LD_INT 1
52234: PUSH
52235: LD_INT 3
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: LD_INT 3
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 1
52254: NEG
52255: PUSH
52256: LD_INT 2
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: LIST
52267: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52268: LD_ADDR_VAR 0 21
52272: PUSH
52273: LD_INT 2
52275: NEG
52276: PUSH
52277: LD_INT 1
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 3
52286: NEG
52287: PUSH
52288: LD_INT 0
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 3
52297: NEG
52298: PUSH
52299: LD_INT 1
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: LIST
52311: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52312: LD_ADDR_VAR 0 22
52316: PUSH
52317: LD_INT 2
52319: NEG
52320: PUSH
52321: LD_INT 3
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 3
52331: NEG
52332: PUSH
52333: LD_INT 2
52335: NEG
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 3
52343: NEG
52344: PUSH
52345: LD_INT 3
52347: NEG
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: LIST
52357: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52358: LD_ADDR_VAR 0 23
52362: PUSH
52363: LD_INT 0
52365: PUSH
52366: LD_INT 3
52368: NEG
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 1
52376: NEG
52377: PUSH
52378: LD_INT 4
52380: NEG
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 1
52388: PUSH
52389: LD_INT 3
52391: NEG
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: LIST
52401: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52402: LD_ADDR_VAR 0 24
52406: PUSH
52407: LD_INT 3
52409: PUSH
52410: LD_INT 0
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 3
52419: PUSH
52420: LD_INT 1
52422: NEG
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 4
52430: PUSH
52431: LD_INT 1
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: LIST
52442: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52443: LD_ADDR_VAR 0 25
52447: PUSH
52448: LD_INT 3
52450: PUSH
52451: LD_INT 3
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 4
52460: PUSH
52461: LD_INT 3
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 3
52470: PUSH
52471: LD_INT 4
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: LIST
52482: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52483: LD_ADDR_VAR 0 26
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: LD_INT 3
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 1
52500: PUSH
52501: LD_INT 4
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 1
52510: NEG
52511: PUSH
52512: LD_INT 3
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: LIST
52523: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52524: LD_ADDR_VAR 0 27
52528: PUSH
52529: LD_INT 3
52531: NEG
52532: PUSH
52533: LD_INT 0
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 3
52542: NEG
52543: PUSH
52544: LD_INT 1
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 4
52553: NEG
52554: PUSH
52555: LD_INT 1
52557: NEG
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: LIST
52567: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52568: LD_ADDR_VAR 0 28
52572: PUSH
52573: LD_INT 3
52575: NEG
52576: PUSH
52577: LD_INT 3
52579: NEG
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 3
52587: NEG
52588: PUSH
52589: LD_INT 4
52591: NEG
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 4
52599: NEG
52600: PUSH
52601: LD_INT 3
52603: NEG
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: LIST
52613: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52614: LD_ADDR_VAR 0 29
52618: PUSH
52619: LD_INT 1
52621: NEG
52622: PUSH
52623: LD_INT 3
52625: NEG
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 0
52633: PUSH
52634: LD_INT 3
52636: NEG
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 1
52644: PUSH
52645: LD_INT 2
52647: NEG
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 1
52655: NEG
52656: PUSH
52657: LD_INT 4
52659: NEG
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 0
52667: PUSH
52668: LD_INT 4
52670: NEG
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 1
52678: PUSH
52679: LD_INT 3
52681: NEG
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 1
52689: NEG
52690: PUSH
52691: LD_INT 5
52693: NEG
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: LD_INT 5
52704: NEG
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 1
52712: PUSH
52713: LD_INT 4
52715: NEG
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 1
52723: NEG
52724: PUSH
52725: LD_INT 6
52727: NEG
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 0
52735: PUSH
52736: LD_INT 6
52738: NEG
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 1
52746: PUSH
52747: LD_INT 5
52749: NEG
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52769: LD_ADDR_VAR 0 30
52773: PUSH
52774: LD_INT 2
52776: PUSH
52777: LD_INT 1
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 3
52787: PUSH
52788: LD_INT 0
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 3
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 3
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 4
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 4
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 4
52838: PUSH
52839: LD_INT 1
52841: NEG
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 5
52849: PUSH
52850: LD_INT 0
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 5
52859: PUSH
52860: LD_INT 1
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 5
52869: PUSH
52870: LD_INT 1
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 6
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 6
52890: PUSH
52891: LD_INT 1
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52912: LD_ADDR_VAR 0 31
52916: PUSH
52917: LD_INT 3
52919: PUSH
52920: LD_INT 2
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 3
52929: PUSH
52930: LD_INT 3
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 2
52939: PUSH
52940: LD_INT 3
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 4
52949: PUSH
52950: LD_INT 3
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 4
52959: PUSH
52960: LD_INT 4
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 3
52969: PUSH
52970: LD_INT 4
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 5
52979: PUSH
52980: LD_INT 4
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 5
52989: PUSH
52990: LD_INT 5
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 4
52999: PUSH
53000: LD_INT 5
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 6
53009: PUSH
53010: LD_INT 5
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 6
53019: PUSH
53020: LD_INT 6
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 5
53029: PUSH
53030: LD_INT 6
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53051: LD_ADDR_VAR 0 32
53055: PUSH
53056: LD_INT 1
53058: PUSH
53059: LD_INT 3
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 0
53068: PUSH
53069: LD_INT 3
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 1
53078: NEG
53079: PUSH
53080: LD_INT 2
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 1
53089: PUSH
53090: LD_INT 4
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: LD_INT 4
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 1
53109: NEG
53110: PUSH
53111: LD_INT 3
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: LD_INT 5
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 0
53130: PUSH
53131: LD_INT 5
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 1
53140: NEG
53141: PUSH
53142: LD_INT 4
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 1
53151: PUSH
53152: LD_INT 6
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 0
53161: PUSH
53162: LD_INT 6
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 1
53171: NEG
53172: PUSH
53173: LD_INT 5
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53194: LD_ADDR_VAR 0 33
53198: PUSH
53199: LD_INT 2
53201: NEG
53202: PUSH
53203: LD_INT 1
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 3
53212: NEG
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 3
53223: NEG
53224: PUSH
53225: LD_INT 1
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 3
53235: NEG
53236: PUSH
53237: LD_INT 1
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 4
53246: NEG
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 4
53257: NEG
53258: PUSH
53259: LD_INT 1
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 4
53269: NEG
53270: PUSH
53271: LD_INT 1
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 5
53280: NEG
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 5
53291: NEG
53292: PUSH
53293: LD_INT 1
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 5
53303: NEG
53304: PUSH
53305: LD_INT 1
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 6
53314: NEG
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 6
53325: NEG
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53349: LD_ADDR_VAR 0 34
53353: PUSH
53354: LD_INT 2
53356: NEG
53357: PUSH
53358: LD_INT 3
53360: NEG
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 3
53368: NEG
53369: PUSH
53370: LD_INT 2
53372: NEG
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 3
53380: NEG
53381: PUSH
53382: LD_INT 3
53384: NEG
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 3
53392: NEG
53393: PUSH
53394: LD_INT 4
53396: NEG
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 4
53404: NEG
53405: PUSH
53406: LD_INT 3
53408: NEG
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 4
53416: NEG
53417: PUSH
53418: LD_INT 4
53420: NEG
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 4
53428: NEG
53429: PUSH
53430: LD_INT 5
53432: NEG
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 5
53440: NEG
53441: PUSH
53442: LD_INT 4
53444: NEG
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 5
53452: NEG
53453: PUSH
53454: LD_INT 5
53456: NEG
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 5
53464: NEG
53465: PUSH
53466: LD_INT 6
53468: NEG
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 6
53476: NEG
53477: PUSH
53478: LD_INT 5
53480: NEG
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 6
53488: NEG
53489: PUSH
53490: LD_INT 6
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53512: LD_ADDR_VAR 0 41
53516: PUSH
53517: LD_INT 0
53519: PUSH
53520: LD_INT 2
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 1
53530: NEG
53531: PUSH
53532: LD_INT 3
53534: NEG
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 1
53542: PUSH
53543: LD_INT 2
53545: NEG
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: LIST
53555: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53556: LD_ADDR_VAR 0 42
53560: PUSH
53561: LD_INT 2
53563: PUSH
53564: LD_INT 0
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 2
53573: PUSH
53574: LD_INT 1
53576: NEG
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 3
53584: PUSH
53585: LD_INT 1
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: LIST
53596: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53597: LD_ADDR_VAR 0 43
53601: PUSH
53602: LD_INT 2
53604: PUSH
53605: LD_INT 2
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 3
53614: PUSH
53615: LD_INT 2
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 2
53624: PUSH
53625: LD_INT 3
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: LIST
53636: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53637: LD_ADDR_VAR 0 44
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: LD_INT 2
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: LD_INT 3
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 1
53664: NEG
53665: PUSH
53666: LD_INT 2
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: LIST
53677: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53678: LD_ADDR_VAR 0 45
53682: PUSH
53683: LD_INT 2
53685: NEG
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 2
53696: NEG
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 3
53707: NEG
53708: PUSH
53709: LD_INT 1
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: LIST
53721: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53722: LD_ADDR_VAR 0 46
53726: PUSH
53727: LD_INT 2
53729: NEG
53730: PUSH
53731: LD_INT 2
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 2
53741: NEG
53742: PUSH
53743: LD_INT 3
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 3
53753: NEG
53754: PUSH
53755: LD_INT 2
53757: NEG
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: LIST
53767: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53768: LD_ADDR_VAR 0 47
53772: PUSH
53773: LD_INT 2
53775: NEG
53776: PUSH
53777: LD_INT 3
53779: NEG
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 1
53787: NEG
53788: PUSH
53789: LD_INT 3
53791: NEG
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53801: LD_ADDR_VAR 0 48
53805: PUSH
53806: LD_INT 1
53808: PUSH
53809: LD_INT 2
53811: NEG
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 2
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53832: LD_ADDR_VAR 0 49
53836: PUSH
53837: LD_INT 3
53839: PUSH
53840: LD_INT 1
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 3
53849: PUSH
53850: LD_INT 2
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53861: LD_ADDR_VAR 0 50
53865: PUSH
53866: LD_INT 2
53868: PUSH
53869: LD_INT 3
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 1
53878: PUSH
53879: LD_INT 3
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53890: LD_ADDR_VAR 0 51
53894: PUSH
53895: LD_INT 1
53897: NEG
53898: PUSH
53899: LD_INT 2
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 2
53908: NEG
53909: PUSH
53910: LD_INT 1
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53921: LD_ADDR_VAR 0 52
53925: PUSH
53926: LD_INT 3
53928: NEG
53929: PUSH
53930: LD_INT 1
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 3
53940: NEG
53941: PUSH
53942: LD_INT 2
53944: NEG
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53954: LD_ADDR_VAR 0 53
53958: PUSH
53959: LD_INT 1
53961: NEG
53962: PUSH
53963: LD_INT 3
53965: NEG
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 0
53973: PUSH
53974: LD_INT 3
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 1
53984: PUSH
53985: LD_INT 2
53987: NEG
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: LIST
53997: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53998: LD_ADDR_VAR 0 54
54002: PUSH
54003: LD_INT 2
54005: PUSH
54006: LD_INT 1
54008: NEG
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 3
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 3
54026: PUSH
54027: LD_INT 1
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: LIST
54038: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54039: LD_ADDR_VAR 0 55
54043: PUSH
54044: LD_INT 3
54046: PUSH
54047: LD_INT 2
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 3
54056: PUSH
54057: LD_INT 3
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 2
54066: PUSH
54067: LD_INT 3
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: LIST
54078: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54079: LD_ADDR_VAR 0 56
54083: PUSH
54084: LD_INT 1
54086: PUSH
54087: LD_INT 3
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 0
54096: PUSH
54097: LD_INT 3
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 1
54106: NEG
54107: PUSH
54108: LD_INT 2
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: LIST
54119: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54120: LD_ADDR_VAR 0 57
54124: PUSH
54125: LD_INT 2
54127: NEG
54128: PUSH
54129: LD_INT 1
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 3
54138: NEG
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 3
54149: NEG
54150: PUSH
54151: LD_INT 1
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: LIST
54163: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54164: LD_ADDR_VAR 0 58
54168: PUSH
54169: LD_INT 2
54171: NEG
54172: PUSH
54173: LD_INT 3
54175: NEG
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 3
54183: NEG
54184: PUSH
54185: LD_INT 2
54187: NEG
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 3
54195: NEG
54196: PUSH
54197: LD_INT 3
54199: NEG
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: LIST
54209: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54210: LD_ADDR_VAR 0 59
54214: PUSH
54215: LD_INT 1
54217: NEG
54218: PUSH
54219: LD_INT 2
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 0
54229: PUSH
54230: LD_INT 2
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 1
54240: PUSH
54241: LD_INT 1
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: LIST
54253: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54254: LD_ADDR_VAR 0 60
54258: PUSH
54259: LD_INT 1
54261: PUSH
54262: LD_INT 1
54264: NEG
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 2
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 2
54282: PUSH
54283: LD_INT 1
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: LIST
54294: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54295: LD_ADDR_VAR 0 61
54299: PUSH
54300: LD_INT 2
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 2
54312: PUSH
54313: LD_INT 2
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 1
54322: PUSH
54323: LD_INT 2
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: LIST
54334: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54335: LD_ADDR_VAR 0 62
54339: PUSH
54340: LD_INT 1
54342: PUSH
54343: LD_INT 2
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 0
54352: PUSH
54353: LD_INT 2
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 1
54362: NEG
54363: PUSH
54364: LD_INT 1
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: LIST
54375: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54376: LD_ADDR_VAR 0 63
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: LD_INT 1
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 2
54394: NEG
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 2
54405: NEG
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: LIST
54419: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54420: LD_ADDR_VAR 0 64
54424: PUSH
54425: LD_INT 1
54427: NEG
54428: PUSH
54429: LD_INT 2
54431: NEG
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 2
54439: NEG
54440: PUSH
54441: LD_INT 1
54443: NEG
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 2
54451: NEG
54452: PUSH
54453: LD_INT 2
54455: NEG
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: LIST
54465: ST_TO_ADDR
// end ; 2 :
54466: GO 57732
54468: LD_INT 2
54470: DOUBLE
54471: EQUAL
54472: IFTRUE 54476
54474: GO 57731
54476: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54477: LD_ADDR_VAR 0 29
54481: PUSH
54482: LD_INT 4
54484: PUSH
54485: LD_INT 0
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 4
54494: PUSH
54495: LD_INT 1
54497: NEG
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 5
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 5
54515: PUSH
54516: LD_INT 1
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 4
54525: PUSH
54526: LD_INT 1
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 3
54535: PUSH
54536: LD_INT 0
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 3
54545: PUSH
54546: LD_INT 1
54548: NEG
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 3
54556: PUSH
54557: LD_INT 2
54559: NEG
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 5
54567: PUSH
54568: LD_INT 2
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 3
54577: PUSH
54578: LD_INT 3
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 3
54587: PUSH
54588: LD_INT 2
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 4
54597: PUSH
54598: LD_INT 3
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 4
54607: PUSH
54608: LD_INT 4
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 3
54617: PUSH
54618: LD_INT 4
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 2
54627: PUSH
54628: LD_INT 3
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 2
54637: PUSH
54638: LD_INT 2
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 4
54647: PUSH
54648: LD_INT 2
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 2
54657: PUSH
54658: LD_INT 4
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: LD_INT 4
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 0
54677: PUSH
54678: LD_INT 3
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 1
54687: PUSH
54688: LD_INT 4
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 1
54697: PUSH
54698: LD_INT 5
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 0
54707: PUSH
54708: LD_INT 5
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 1
54717: NEG
54718: PUSH
54719: LD_INT 4
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 1
54728: NEG
54729: PUSH
54730: LD_INT 3
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 2
54739: PUSH
54740: LD_INT 5
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 2
54749: NEG
54750: PUSH
54751: LD_INT 3
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 3
54760: NEG
54761: PUSH
54762: LD_INT 0
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 3
54771: NEG
54772: PUSH
54773: LD_INT 1
54775: NEG
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 2
54783: NEG
54784: PUSH
54785: LD_INT 0
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 2
54794: NEG
54795: PUSH
54796: LD_INT 1
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 3
54805: NEG
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 4
54816: NEG
54817: PUSH
54818: LD_INT 0
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 4
54827: NEG
54828: PUSH
54829: LD_INT 1
54831: NEG
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 4
54839: NEG
54840: PUSH
54841: LD_INT 2
54843: NEG
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 2
54851: NEG
54852: PUSH
54853: LD_INT 2
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 4
54862: NEG
54863: PUSH
54864: LD_INT 4
54866: NEG
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 4
54874: NEG
54875: PUSH
54876: LD_INT 5
54878: NEG
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 3
54886: NEG
54887: PUSH
54888: LD_INT 4
54890: NEG
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 3
54898: NEG
54899: PUSH
54900: LD_INT 3
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 4
54910: NEG
54911: PUSH
54912: LD_INT 3
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 5
54922: NEG
54923: PUSH
54924: LD_INT 4
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 5
54934: NEG
54935: PUSH
54936: LD_INT 5
54938: NEG
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 3
54946: NEG
54947: PUSH
54948: LD_INT 5
54950: NEG
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 5
54958: NEG
54959: PUSH
54960: LD_INT 3
54962: NEG
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55015: LD_ADDR_VAR 0 30
55019: PUSH
55020: LD_INT 4
55022: PUSH
55023: LD_INT 4
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 4
55032: PUSH
55033: LD_INT 3
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 5
55042: PUSH
55043: LD_INT 4
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 5
55052: PUSH
55053: LD_INT 5
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 4
55062: PUSH
55063: LD_INT 5
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 3
55072: PUSH
55073: LD_INT 4
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 3
55082: PUSH
55083: LD_INT 3
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 5
55092: PUSH
55093: LD_INT 3
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 3
55102: PUSH
55103: LD_INT 5
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: LD_INT 3
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: LD_INT 2
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 1
55132: PUSH
55133: LD_INT 3
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 1
55142: PUSH
55143: LD_INT 4
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: LD_INT 4
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 1
55162: NEG
55163: PUSH
55164: LD_INT 3
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 1
55173: NEG
55174: PUSH
55175: LD_INT 2
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 2
55184: PUSH
55185: LD_INT 4
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 2
55194: NEG
55195: PUSH
55196: LD_INT 2
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 4
55205: NEG
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 4
55216: NEG
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 3
55228: NEG
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 3
55239: NEG
55240: PUSH
55241: LD_INT 1
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 4
55250: NEG
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 5
55261: NEG
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 5
55272: NEG
55273: PUSH
55274: LD_INT 1
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 5
55284: NEG
55285: PUSH
55286: LD_INT 2
55288: NEG
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 3
55296: NEG
55297: PUSH
55298: LD_INT 2
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 3
55307: NEG
55308: PUSH
55309: LD_INT 3
55311: NEG
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 3
55319: NEG
55320: PUSH
55321: LD_INT 4
55323: NEG
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 2
55331: NEG
55332: PUSH
55333: LD_INT 3
55335: NEG
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 2
55343: NEG
55344: PUSH
55345: LD_INT 2
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 3
55355: NEG
55356: PUSH
55357: LD_INT 2
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 4
55367: NEG
55368: PUSH
55369: LD_INT 3
55371: NEG
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 4
55379: NEG
55380: PUSH
55381: LD_INT 4
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 2
55391: NEG
55392: PUSH
55393: LD_INT 4
55395: NEG
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 4
55403: NEG
55404: PUSH
55405: LD_INT 2
55407: NEG
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 0
55415: PUSH
55416: LD_INT 4
55418: NEG
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 0
55426: PUSH
55427: LD_INT 5
55429: NEG
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 1
55437: PUSH
55438: LD_INT 4
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 1
55448: PUSH
55449: LD_INT 3
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 0
55459: PUSH
55460: LD_INT 3
55462: NEG
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: NEG
55471: PUSH
55472: LD_INT 4
55474: NEG
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 1
55482: NEG
55483: PUSH
55484: LD_INT 5
55486: NEG
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 2
55494: PUSH
55495: LD_INT 3
55497: NEG
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 2
55505: NEG
55506: PUSH
55507: LD_INT 5
55509: NEG
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55562: LD_ADDR_VAR 0 31
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: LD_INT 4
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: LD_INT 3
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 1
55589: PUSH
55590: LD_INT 4
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 1
55599: PUSH
55600: LD_INT 5
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: LD_INT 5
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 1
55619: NEG
55620: PUSH
55621: LD_INT 4
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 1
55630: NEG
55631: PUSH
55632: LD_INT 3
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 2
55641: PUSH
55642: LD_INT 5
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 2
55651: NEG
55652: PUSH
55653: LD_INT 3
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 3
55662: NEG
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 3
55673: NEG
55674: PUSH
55675: LD_INT 1
55677: NEG
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 2
55685: NEG
55686: PUSH
55687: LD_INT 0
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 2
55696: NEG
55697: PUSH
55698: LD_INT 1
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 3
55707: NEG
55708: PUSH
55709: LD_INT 1
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 4
55718: NEG
55719: PUSH
55720: LD_INT 0
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 4
55729: NEG
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 4
55741: NEG
55742: PUSH
55743: LD_INT 2
55745: NEG
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 2
55753: NEG
55754: PUSH
55755: LD_INT 2
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 4
55764: NEG
55765: PUSH
55766: LD_INT 4
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 4
55776: NEG
55777: PUSH
55778: LD_INT 5
55780: NEG
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 3
55788: NEG
55789: PUSH
55790: LD_INT 4
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 3
55800: NEG
55801: PUSH
55802: LD_INT 3
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 4
55812: NEG
55813: PUSH
55814: LD_INT 3
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 5
55824: NEG
55825: PUSH
55826: LD_INT 4
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 5
55836: NEG
55837: PUSH
55838: LD_INT 5
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 3
55848: NEG
55849: PUSH
55850: LD_INT 5
55852: NEG
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 5
55860: NEG
55861: PUSH
55862: LD_INT 3
55864: NEG
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: LD_INT 3
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 0
55883: PUSH
55884: LD_INT 4
55886: NEG
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: LD_INT 3
55897: NEG
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: PUSH
55906: LD_INT 2
55908: NEG
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: LD_INT 2
55919: NEG
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 1
55927: NEG
55928: PUSH
55929: LD_INT 3
55931: NEG
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 1
55939: NEG
55940: PUSH
55941: LD_INT 4
55943: NEG
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 2
55951: PUSH
55952: LD_INT 2
55954: NEG
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 2
55962: NEG
55963: PUSH
55964: LD_INT 4
55966: NEG
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 4
55974: PUSH
55975: LD_INT 0
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 4
55984: PUSH
55985: LD_INT 1
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 5
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 5
56005: PUSH
56006: LD_INT 1
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 4
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 3
56025: PUSH
56026: LD_INT 0
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 3
56035: PUSH
56036: LD_INT 1
56038: NEG
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 3
56046: PUSH
56047: LD_INT 2
56049: NEG
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 5
56057: PUSH
56058: LD_INT 2
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56112: LD_ADDR_VAR 0 32
56116: PUSH
56117: LD_INT 4
56119: NEG
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 4
56130: NEG
56131: PUSH
56132: LD_INT 1
56134: NEG
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 3
56142: NEG
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 3
56153: NEG
56154: PUSH
56155: LD_INT 1
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 4
56164: NEG
56165: PUSH
56166: LD_INT 1
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 5
56175: NEG
56176: PUSH
56177: LD_INT 0
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 5
56186: NEG
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 5
56198: NEG
56199: PUSH
56200: LD_INT 2
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 3
56210: NEG
56211: PUSH
56212: LD_INT 2
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 3
56221: NEG
56222: PUSH
56223: LD_INT 3
56225: NEG
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 3
56233: NEG
56234: PUSH
56235: LD_INT 4
56237: NEG
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 2
56245: NEG
56246: PUSH
56247: LD_INT 3
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 2
56257: NEG
56258: PUSH
56259: LD_INT 2
56261: NEG
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 3
56269: NEG
56270: PUSH
56271: LD_INT 2
56273: NEG
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 4
56281: NEG
56282: PUSH
56283: LD_INT 3
56285: NEG
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 4
56293: NEG
56294: PUSH
56295: LD_INT 4
56297: NEG
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 2
56305: NEG
56306: PUSH
56307: LD_INT 4
56309: NEG
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 4
56317: NEG
56318: PUSH
56319: LD_INT 2
56321: NEG
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 0
56329: PUSH
56330: LD_INT 4
56332: NEG
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: LD_INT 5
56343: NEG
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 1
56351: PUSH
56352: LD_INT 4
56354: NEG
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 1
56362: PUSH
56363: LD_INT 3
56365: NEG
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: LD_INT 3
56376: NEG
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 1
56384: NEG
56385: PUSH
56386: LD_INT 4
56388: NEG
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 1
56396: NEG
56397: PUSH
56398: LD_INT 5
56400: NEG
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 2
56408: PUSH
56409: LD_INT 3
56411: NEG
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 2
56419: NEG
56420: PUSH
56421: LD_INT 5
56423: NEG
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 3
56431: PUSH
56432: LD_INT 0
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 3
56441: PUSH
56442: LD_INT 1
56444: NEG
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 4
56452: PUSH
56453: LD_INT 0
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 4
56462: PUSH
56463: LD_INT 1
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 3
56472: PUSH
56473: LD_INT 1
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 2
56482: PUSH
56483: LD_INT 0
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 2
56492: PUSH
56493: LD_INT 1
56495: NEG
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 2
56503: PUSH
56504: LD_INT 2
56506: NEG
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 4
56514: PUSH
56515: LD_INT 2
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 4
56524: PUSH
56525: LD_INT 4
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 4
56534: PUSH
56535: LD_INT 3
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 5
56544: PUSH
56545: LD_INT 4
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 5
56554: PUSH
56555: LD_INT 5
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 4
56564: PUSH
56565: LD_INT 5
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 3
56574: PUSH
56575: LD_INT 4
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 3
56584: PUSH
56585: LD_INT 3
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 5
56594: PUSH
56595: LD_INT 3
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 3
56604: PUSH
56605: LD_INT 5
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56659: LD_ADDR_VAR 0 33
56663: PUSH
56664: LD_INT 4
56666: NEG
56667: PUSH
56668: LD_INT 4
56670: NEG
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 4
56678: NEG
56679: PUSH
56680: LD_INT 5
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 3
56690: NEG
56691: PUSH
56692: LD_INT 4
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 3
56702: NEG
56703: PUSH
56704: LD_INT 3
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 4
56714: NEG
56715: PUSH
56716: LD_INT 3
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 5
56726: NEG
56727: PUSH
56728: LD_INT 4
56730: NEG
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 5
56738: NEG
56739: PUSH
56740: LD_INT 5
56742: NEG
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 3
56750: NEG
56751: PUSH
56752: LD_INT 5
56754: NEG
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 5
56762: NEG
56763: PUSH
56764: LD_INT 3
56766: NEG
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: LD_INT 3
56777: NEG
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 0
56785: PUSH
56786: LD_INT 4
56788: NEG
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 1
56796: PUSH
56797: LD_INT 3
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 1
56807: PUSH
56808: LD_INT 2
56810: NEG
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 0
56818: PUSH
56819: LD_INT 2
56821: NEG
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 1
56829: NEG
56830: PUSH
56831: LD_INT 3
56833: NEG
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 1
56841: NEG
56842: PUSH
56843: LD_INT 4
56845: NEG
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 2
56853: PUSH
56854: LD_INT 2
56856: NEG
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 2
56864: NEG
56865: PUSH
56866: LD_INT 4
56868: NEG
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 4
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 4
56886: PUSH
56887: LD_INT 1
56889: NEG
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 5
56897: PUSH
56898: LD_INT 0
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 5
56907: PUSH
56908: LD_INT 1
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 4
56917: PUSH
56918: LD_INT 1
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 3
56927: PUSH
56928: LD_INT 0
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 3
56937: PUSH
56938: LD_INT 1
56940: NEG
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 3
56948: PUSH
56949: LD_INT 2
56951: NEG
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 5
56959: PUSH
56960: LD_INT 2
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 3
56969: PUSH
56970: LD_INT 3
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 3
56979: PUSH
56980: LD_INT 2
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 4
56989: PUSH
56990: LD_INT 3
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 4
56999: PUSH
57000: LD_INT 4
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 3
57009: PUSH
57010: LD_INT 4
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 2
57019: PUSH
57020: LD_INT 3
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 2
57029: PUSH
57030: LD_INT 2
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 4
57039: PUSH
57040: LD_INT 2
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 2
57049: PUSH
57050: LD_INT 4
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 0
57059: PUSH
57060: LD_INT 4
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 0
57069: PUSH
57070: LD_INT 3
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 1
57079: PUSH
57080: LD_INT 4
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 1
57089: PUSH
57090: LD_INT 5
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: LD_INT 5
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 1
57109: NEG
57110: PUSH
57111: LD_INT 4
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: LD_INT 3
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 2
57131: PUSH
57132: LD_INT 5
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 2
57141: NEG
57142: PUSH
57143: LD_INT 3
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57197: LD_ADDR_VAR 0 34
57201: PUSH
57202: LD_INT 0
57204: PUSH
57205: LD_INT 4
57207: NEG
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 0
57215: PUSH
57216: LD_INT 5
57218: NEG
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 1
57226: PUSH
57227: LD_INT 4
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 1
57237: PUSH
57238: LD_INT 3
57240: NEG
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: LD_INT 3
57251: NEG
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 1
57259: NEG
57260: PUSH
57261: LD_INT 4
57263: NEG
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 1
57271: NEG
57272: PUSH
57273: LD_INT 5
57275: NEG
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 2
57283: PUSH
57284: LD_INT 3
57286: NEG
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 2
57294: NEG
57295: PUSH
57296: LD_INT 5
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 3
57306: PUSH
57307: LD_INT 0
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 3
57316: PUSH
57317: LD_INT 1
57319: NEG
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 4
57327: PUSH
57328: LD_INT 0
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 4
57337: PUSH
57338: LD_INT 1
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 3
57347: PUSH
57348: LD_INT 1
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 2
57357: PUSH
57358: LD_INT 0
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 2
57367: PUSH
57368: LD_INT 1
57370: NEG
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 2
57378: PUSH
57379: LD_INT 2
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 4
57389: PUSH
57390: LD_INT 2
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 4
57399: PUSH
57400: LD_INT 4
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 4
57409: PUSH
57410: LD_INT 3
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 5
57419: PUSH
57420: LD_INT 4
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 5
57429: PUSH
57430: LD_INT 5
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 4
57439: PUSH
57440: LD_INT 5
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 3
57449: PUSH
57450: LD_INT 4
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 3
57459: PUSH
57460: LD_INT 3
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 5
57469: PUSH
57470: LD_INT 3
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 3
57479: PUSH
57480: LD_INT 5
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 0
57489: PUSH
57490: LD_INT 3
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 0
57499: PUSH
57500: LD_INT 2
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 1
57509: PUSH
57510: LD_INT 3
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 1
57519: PUSH
57520: LD_INT 4
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 0
57529: PUSH
57530: LD_INT 4
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 1
57539: NEG
57540: PUSH
57541: LD_INT 3
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 1
57550: NEG
57551: PUSH
57552: LD_INT 2
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 2
57561: PUSH
57562: LD_INT 4
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 2
57571: NEG
57572: PUSH
57573: LD_INT 2
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 4
57582: NEG
57583: PUSH
57584: LD_INT 0
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 4
57593: NEG
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 3
57605: NEG
57606: PUSH
57607: LD_INT 0
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 3
57616: NEG
57617: PUSH
57618: LD_INT 1
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 4
57627: NEG
57628: PUSH
57629: LD_INT 1
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 5
57638: NEG
57639: PUSH
57640: LD_INT 0
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 5
57649: NEG
57650: PUSH
57651: LD_INT 1
57653: NEG
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 5
57661: NEG
57662: PUSH
57663: LD_INT 2
57665: NEG
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 3
57673: NEG
57674: PUSH
57675: LD_INT 2
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: ST_TO_ADDR
// end ; end ;
57729: GO 57732
57731: POP
// case btype of b_depot , b_warehouse :
57732: LD_VAR 0 1
57736: PUSH
57737: LD_INT 0
57739: DOUBLE
57740: EQUAL
57741: IFTRUE 57751
57743: LD_INT 1
57745: DOUBLE
57746: EQUAL
57747: IFTRUE 57751
57749: GO 57952
57751: POP
// case nation of nation_american :
57752: LD_VAR 0 5
57756: PUSH
57757: LD_INT 1
57759: DOUBLE
57760: EQUAL
57761: IFTRUE 57765
57763: GO 57821
57765: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57766: LD_ADDR_VAR 0 9
57770: PUSH
57771: LD_VAR 0 11
57775: PUSH
57776: LD_VAR 0 12
57780: PUSH
57781: LD_VAR 0 13
57785: PUSH
57786: LD_VAR 0 14
57790: PUSH
57791: LD_VAR 0 15
57795: PUSH
57796: LD_VAR 0 16
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: PUSH
57809: LD_VAR 0 4
57813: PUSH
57814: LD_INT 1
57816: PLUS
57817: ARRAY
57818: ST_TO_ADDR
57819: GO 57950
57821: LD_INT 2
57823: DOUBLE
57824: EQUAL
57825: IFTRUE 57829
57827: GO 57885
57829: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57830: LD_ADDR_VAR 0 9
57834: PUSH
57835: LD_VAR 0 17
57839: PUSH
57840: LD_VAR 0 18
57844: PUSH
57845: LD_VAR 0 19
57849: PUSH
57850: LD_VAR 0 20
57854: PUSH
57855: LD_VAR 0 21
57859: PUSH
57860: LD_VAR 0 22
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: PUSH
57873: LD_VAR 0 4
57877: PUSH
57878: LD_INT 1
57880: PLUS
57881: ARRAY
57882: ST_TO_ADDR
57883: GO 57950
57885: LD_INT 3
57887: DOUBLE
57888: EQUAL
57889: IFTRUE 57893
57891: GO 57949
57893: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57894: LD_ADDR_VAR 0 9
57898: PUSH
57899: LD_VAR 0 23
57903: PUSH
57904: LD_VAR 0 24
57908: PUSH
57909: LD_VAR 0 25
57913: PUSH
57914: LD_VAR 0 26
57918: PUSH
57919: LD_VAR 0 27
57923: PUSH
57924: LD_VAR 0 28
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: PUSH
57937: LD_VAR 0 4
57941: PUSH
57942: LD_INT 1
57944: PLUS
57945: ARRAY
57946: ST_TO_ADDR
57947: GO 57950
57949: POP
57950: GO 58505
57952: LD_INT 2
57954: DOUBLE
57955: EQUAL
57956: IFTRUE 57966
57958: LD_INT 3
57960: DOUBLE
57961: EQUAL
57962: IFTRUE 57966
57964: GO 58022
57966: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57967: LD_ADDR_VAR 0 9
57971: PUSH
57972: LD_VAR 0 29
57976: PUSH
57977: LD_VAR 0 30
57981: PUSH
57982: LD_VAR 0 31
57986: PUSH
57987: LD_VAR 0 32
57991: PUSH
57992: LD_VAR 0 33
57996: PUSH
57997: LD_VAR 0 34
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: PUSH
58010: LD_VAR 0 4
58014: PUSH
58015: LD_INT 1
58017: PLUS
58018: ARRAY
58019: ST_TO_ADDR
58020: GO 58505
58022: LD_INT 16
58024: DOUBLE
58025: EQUAL
58026: IFTRUE 58084
58028: LD_INT 17
58030: DOUBLE
58031: EQUAL
58032: IFTRUE 58084
58034: LD_INT 18
58036: DOUBLE
58037: EQUAL
58038: IFTRUE 58084
58040: LD_INT 19
58042: DOUBLE
58043: EQUAL
58044: IFTRUE 58084
58046: LD_INT 22
58048: DOUBLE
58049: EQUAL
58050: IFTRUE 58084
58052: LD_INT 20
58054: DOUBLE
58055: EQUAL
58056: IFTRUE 58084
58058: LD_INT 21
58060: DOUBLE
58061: EQUAL
58062: IFTRUE 58084
58064: LD_INT 23
58066: DOUBLE
58067: EQUAL
58068: IFTRUE 58084
58070: LD_INT 24
58072: DOUBLE
58073: EQUAL
58074: IFTRUE 58084
58076: LD_INT 25
58078: DOUBLE
58079: EQUAL
58080: IFTRUE 58084
58082: GO 58140
58084: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58085: LD_ADDR_VAR 0 9
58089: PUSH
58090: LD_VAR 0 35
58094: PUSH
58095: LD_VAR 0 36
58099: PUSH
58100: LD_VAR 0 37
58104: PUSH
58105: LD_VAR 0 38
58109: PUSH
58110: LD_VAR 0 39
58114: PUSH
58115: LD_VAR 0 40
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: PUSH
58128: LD_VAR 0 4
58132: PUSH
58133: LD_INT 1
58135: PLUS
58136: ARRAY
58137: ST_TO_ADDR
58138: GO 58505
58140: LD_INT 6
58142: DOUBLE
58143: EQUAL
58144: IFTRUE 58196
58146: LD_INT 7
58148: DOUBLE
58149: EQUAL
58150: IFTRUE 58196
58152: LD_INT 8
58154: DOUBLE
58155: EQUAL
58156: IFTRUE 58196
58158: LD_INT 13
58160: DOUBLE
58161: EQUAL
58162: IFTRUE 58196
58164: LD_INT 12
58166: DOUBLE
58167: EQUAL
58168: IFTRUE 58196
58170: LD_INT 15
58172: DOUBLE
58173: EQUAL
58174: IFTRUE 58196
58176: LD_INT 11
58178: DOUBLE
58179: EQUAL
58180: IFTRUE 58196
58182: LD_INT 14
58184: DOUBLE
58185: EQUAL
58186: IFTRUE 58196
58188: LD_INT 10
58190: DOUBLE
58191: EQUAL
58192: IFTRUE 58196
58194: GO 58252
58196: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58197: LD_ADDR_VAR 0 9
58201: PUSH
58202: LD_VAR 0 41
58206: PUSH
58207: LD_VAR 0 42
58211: PUSH
58212: LD_VAR 0 43
58216: PUSH
58217: LD_VAR 0 44
58221: PUSH
58222: LD_VAR 0 45
58226: PUSH
58227: LD_VAR 0 46
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: PUSH
58240: LD_VAR 0 4
58244: PUSH
58245: LD_INT 1
58247: PLUS
58248: ARRAY
58249: ST_TO_ADDR
58250: GO 58505
58252: LD_INT 36
58254: DOUBLE
58255: EQUAL
58256: IFTRUE 58260
58258: GO 58316
58260: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58261: LD_ADDR_VAR 0 9
58265: PUSH
58266: LD_VAR 0 47
58270: PUSH
58271: LD_VAR 0 48
58275: PUSH
58276: LD_VAR 0 49
58280: PUSH
58281: LD_VAR 0 50
58285: PUSH
58286: LD_VAR 0 51
58290: PUSH
58291: LD_VAR 0 52
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: PUSH
58304: LD_VAR 0 4
58308: PUSH
58309: LD_INT 1
58311: PLUS
58312: ARRAY
58313: ST_TO_ADDR
58314: GO 58505
58316: LD_INT 4
58318: DOUBLE
58319: EQUAL
58320: IFTRUE 58342
58322: LD_INT 5
58324: DOUBLE
58325: EQUAL
58326: IFTRUE 58342
58328: LD_INT 34
58330: DOUBLE
58331: EQUAL
58332: IFTRUE 58342
58334: LD_INT 37
58336: DOUBLE
58337: EQUAL
58338: IFTRUE 58342
58340: GO 58398
58342: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58343: LD_ADDR_VAR 0 9
58347: PUSH
58348: LD_VAR 0 53
58352: PUSH
58353: LD_VAR 0 54
58357: PUSH
58358: LD_VAR 0 55
58362: PUSH
58363: LD_VAR 0 56
58367: PUSH
58368: LD_VAR 0 57
58372: PUSH
58373: LD_VAR 0 58
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: PUSH
58386: LD_VAR 0 4
58390: PUSH
58391: LD_INT 1
58393: PLUS
58394: ARRAY
58395: ST_TO_ADDR
58396: GO 58505
58398: LD_INT 31
58400: DOUBLE
58401: EQUAL
58402: IFTRUE 58448
58404: LD_INT 32
58406: DOUBLE
58407: EQUAL
58408: IFTRUE 58448
58410: LD_INT 33
58412: DOUBLE
58413: EQUAL
58414: IFTRUE 58448
58416: LD_INT 27
58418: DOUBLE
58419: EQUAL
58420: IFTRUE 58448
58422: LD_INT 26
58424: DOUBLE
58425: EQUAL
58426: IFTRUE 58448
58428: LD_INT 28
58430: DOUBLE
58431: EQUAL
58432: IFTRUE 58448
58434: LD_INT 29
58436: DOUBLE
58437: EQUAL
58438: IFTRUE 58448
58440: LD_INT 30
58442: DOUBLE
58443: EQUAL
58444: IFTRUE 58448
58446: GO 58504
58448: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58449: LD_ADDR_VAR 0 9
58453: PUSH
58454: LD_VAR 0 59
58458: PUSH
58459: LD_VAR 0 60
58463: PUSH
58464: LD_VAR 0 61
58468: PUSH
58469: LD_VAR 0 62
58473: PUSH
58474: LD_VAR 0 63
58478: PUSH
58479: LD_VAR 0 64
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: PUSH
58492: LD_VAR 0 4
58496: PUSH
58497: LD_INT 1
58499: PLUS
58500: ARRAY
58501: ST_TO_ADDR
58502: GO 58505
58504: POP
// temp_list2 = [ ] ;
58505: LD_ADDR_VAR 0 10
58509: PUSH
58510: EMPTY
58511: ST_TO_ADDR
// for i in temp_list do
58512: LD_ADDR_VAR 0 8
58516: PUSH
58517: LD_VAR 0 9
58521: PUSH
58522: FOR_IN
58523: IFFALSE 58575
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58525: LD_ADDR_VAR 0 10
58529: PUSH
58530: LD_VAR 0 10
58534: PUSH
58535: LD_VAR 0 8
58539: PUSH
58540: LD_INT 1
58542: ARRAY
58543: PUSH
58544: LD_VAR 0 2
58548: PLUS
58549: PUSH
58550: LD_VAR 0 8
58554: PUSH
58555: LD_INT 2
58557: ARRAY
58558: PUSH
58559: LD_VAR 0 3
58563: PLUS
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: EMPTY
58570: LIST
58571: ADD
58572: ST_TO_ADDR
58573: GO 58522
58575: POP
58576: POP
// result = temp_list2 ;
58577: LD_ADDR_VAR 0 7
58581: PUSH
58582: LD_VAR 0 10
58586: ST_TO_ADDR
// end ;
58587: LD_VAR 0 7
58591: RET
// export function EnemyInRange ( unit , dist ) ; begin
58592: LD_INT 0
58594: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58595: LD_ADDR_VAR 0 3
58599: PUSH
58600: LD_VAR 0 1
58604: PPUSH
58605: CALL_OW 255
58609: PPUSH
58610: LD_VAR 0 1
58614: PPUSH
58615: CALL_OW 250
58619: PPUSH
58620: LD_VAR 0 1
58624: PPUSH
58625: CALL_OW 251
58629: PPUSH
58630: LD_VAR 0 2
58634: PPUSH
58635: CALL 31994 0 4
58639: PUSH
58640: LD_INT 4
58642: ARRAY
58643: ST_TO_ADDR
// end ;
58644: LD_VAR 0 3
58648: RET
// export function PlayerSeeMe ( unit ) ; begin
58649: LD_INT 0
58651: PPUSH
// result := See ( your_side , unit ) ;
58652: LD_ADDR_VAR 0 2
58656: PUSH
58657: LD_OWVAR 2
58661: PPUSH
58662: LD_VAR 0 1
58666: PPUSH
58667: CALL_OW 292
58671: ST_TO_ADDR
// end ;
58672: LD_VAR 0 2
58676: RET
// export function ReverseDir ( unit ) ; begin
58677: LD_INT 0
58679: PPUSH
// if not unit then
58680: LD_VAR 0 1
58684: NOT
58685: IFFALSE 58689
// exit ;
58687: GO 58712
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58689: LD_ADDR_VAR 0 2
58693: PUSH
58694: LD_VAR 0 1
58698: PPUSH
58699: CALL_OW 254
58703: PUSH
58704: LD_INT 3
58706: PLUS
58707: PUSH
58708: LD_INT 6
58710: MOD
58711: ST_TO_ADDR
// end ;
58712: LD_VAR 0 2
58716: RET
// export function ReverseArray ( array ) ; var i ; begin
58717: LD_INT 0
58719: PPUSH
58720: PPUSH
// if not array then
58721: LD_VAR 0 1
58725: NOT
58726: IFFALSE 58730
// exit ;
58728: GO 58785
// result := [ ] ;
58730: LD_ADDR_VAR 0 2
58734: PUSH
58735: EMPTY
58736: ST_TO_ADDR
// for i := array downto 1 do
58737: LD_ADDR_VAR 0 3
58741: PUSH
58742: DOUBLE
58743: LD_VAR 0 1
58747: INC
58748: ST_TO_ADDR
58749: LD_INT 1
58751: PUSH
58752: FOR_DOWNTO
58753: IFFALSE 58783
// result := Join ( result , array [ i ] ) ;
58755: LD_ADDR_VAR 0 2
58759: PUSH
58760: LD_VAR 0 2
58764: PPUSH
58765: LD_VAR 0 1
58769: PUSH
58770: LD_VAR 0 3
58774: ARRAY
58775: PPUSH
58776: CALL 63429 0 2
58780: ST_TO_ADDR
58781: GO 58752
58783: POP
58784: POP
// end ;
58785: LD_VAR 0 2
58789: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
58790: LD_INT 0
58792: PPUSH
58793: PPUSH
58794: PPUSH
58795: PPUSH
58796: PPUSH
58797: PPUSH
// if not unit or not hexes then
58798: LD_VAR 0 1
58802: NOT
58803: PUSH
58804: LD_VAR 0 2
58808: NOT
58809: OR
58810: IFFALSE 58814
// exit ;
58812: GO 58937
// dist := 9999 ;
58814: LD_ADDR_VAR 0 5
58818: PUSH
58819: LD_INT 9999
58821: ST_TO_ADDR
// for i = 1 to hexes do
58822: LD_ADDR_VAR 0 4
58826: PUSH
58827: DOUBLE
58828: LD_INT 1
58830: DEC
58831: ST_TO_ADDR
58832: LD_VAR 0 2
58836: PUSH
58837: FOR_TO
58838: IFFALSE 58925
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58840: LD_ADDR_VAR 0 6
58844: PUSH
58845: LD_VAR 0 1
58849: PPUSH
58850: LD_VAR 0 2
58854: PUSH
58855: LD_VAR 0 4
58859: ARRAY
58860: PUSH
58861: LD_INT 1
58863: ARRAY
58864: PPUSH
58865: LD_VAR 0 2
58869: PUSH
58870: LD_VAR 0 4
58874: ARRAY
58875: PUSH
58876: LD_INT 2
58878: ARRAY
58879: PPUSH
58880: CALL_OW 297
58884: ST_TO_ADDR
// if tdist < dist then
58885: LD_VAR 0 6
58889: PUSH
58890: LD_VAR 0 5
58894: LESS
58895: IFFALSE 58923
// begin hex := hexes [ i ] ;
58897: LD_ADDR_VAR 0 8
58901: PUSH
58902: LD_VAR 0 2
58906: PUSH
58907: LD_VAR 0 4
58911: ARRAY
58912: ST_TO_ADDR
// dist := tdist ;
58913: LD_ADDR_VAR 0 5
58917: PUSH
58918: LD_VAR 0 6
58922: ST_TO_ADDR
// end ; end ;
58923: GO 58837
58925: POP
58926: POP
// result := hex ;
58927: LD_ADDR_VAR 0 3
58931: PUSH
58932: LD_VAR 0 8
58936: ST_TO_ADDR
// end ;
58937: LD_VAR 0 3
58941: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58942: LD_INT 0
58944: PPUSH
58945: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58946: LD_VAR 0 1
58950: NOT
58951: PUSH
58952: LD_VAR 0 1
58956: PUSH
58957: LD_INT 21
58959: PUSH
58960: LD_INT 2
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 23
58969: PUSH
58970: LD_INT 2
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PPUSH
58981: CALL_OW 69
58985: IN
58986: NOT
58987: OR
58988: IFFALSE 58992
// exit ;
58990: GO 59039
// for i = 1 to 3 do
58992: LD_ADDR_VAR 0 3
58996: PUSH
58997: DOUBLE
58998: LD_INT 1
59000: DEC
59001: ST_TO_ADDR
59002: LD_INT 3
59004: PUSH
59005: FOR_TO
59006: IFFALSE 59037
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59008: LD_VAR 0 1
59012: PPUSH
59013: CALL_OW 250
59017: PPUSH
59018: LD_VAR 0 1
59022: PPUSH
59023: CALL_OW 251
59027: PPUSH
59028: LD_INT 1
59030: PPUSH
59031: CALL_OW 453
59035: GO 59005
59037: POP
59038: POP
// end ;
59039: LD_VAR 0 2
59043: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59044: LD_INT 0
59046: PPUSH
59047: PPUSH
59048: PPUSH
59049: PPUSH
59050: PPUSH
59051: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59052: LD_VAR 0 1
59056: NOT
59057: PUSH
59058: LD_VAR 0 2
59062: NOT
59063: OR
59064: PUSH
59065: LD_VAR 0 1
59069: PPUSH
59070: CALL_OW 314
59074: OR
59075: IFFALSE 59079
// exit ;
59077: GO 59546
// if GetLives ( i ) < 250 then
59079: LD_VAR 0 4
59083: PPUSH
59084: CALL_OW 256
59088: PUSH
59089: LD_INT 250
59091: LESS
59092: IFFALSE 59105
// begin ComAutodestruct ( i ) ;
59094: LD_VAR 0 4
59098: PPUSH
59099: CALL 58942 0 1
// exit ;
59103: GO 59546
// end ; x := GetX ( enemy_unit ) ;
59105: LD_ADDR_VAR 0 7
59109: PUSH
59110: LD_VAR 0 2
59114: PPUSH
59115: CALL_OW 250
59119: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59120: LD_ADDR_VAR 0 8
59124: PUSH
59125: LD_VAR 0 2
59129: PPUSH
59130: CALL_OW 251
59134: ST_TO_ADDR
// if not x or not y then
59135: LD_VAR 0 7
59139: NOT
59140: PUSH
59141: LD_VAR 0 8
59145: NOT
59146: OR
59147: IFFALSE 59151
// exit ;
59149: GO 59546
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59151: LD_ADDR_VAR 0 6
59155: PUSH
59156: LD_VAR 0 7
59160: PPUSH
59161: LD_INT 0
59163: PPUSH
59164: LD_INT 4
59166: PPUSH
59167: CALL_OW 272
59171: PUSH
59172: LD_VAR 0 8
59176: PPUSH
59177: LD_INT 0
59179: PPUSH
59180: LD_INT 4
59182: PPUSH
59183: CALL_OW 273
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_VAR 0 7
59196: PPUSH
59197: LD_INT 1
59199: PPUSH
59200: LD_INT 4
59202: PPUSH
59203: CALL_OW 272
59207: PUSH
59208: LD_VAR 0 8
59212: PPUSH
59213: LD_INT 1
59215: PPUSH
59216: LD_INT 4
59218: PPUSH
59219: CALL_OW 273
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_VAR 0 7
59232: PPUSH
59233: LD_INT 2
59235: PPUSH
59236: LD_INT 4
59238: PPUSH
59239: CALL_OW 272
59243: PUSH
59244: LD_VAR 0 8
59248: PPUSH
59249: LD_INT 2
59251: PPUSH
59252: LD_INT 4
59254: PPUSH
59255: CALL_OW 273
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_VAR 0 7
59268: PPUSH
59269: LD_INT 3
59271: PPUSH
59272: LD_INT 4
59274: PPUSH
59275: CALL_OW 272
59279: PUSH
59280: LD_VAR 0 8
59284: PPUSH
59285: LD_INT 3
59287: PPUSH
59288: LD_INT 4
59290: PPUSH
59291: CALL_OW 273
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_VAR 0 7
59304: PPUSH
59305: LD_INT 4
59307: PPUSH
59308: LD_INT 4
59310: PPUSH
59311: CALL_OW 272
59315: PUSH
59316: LD_VAR 0 8
59320: PPUSH
59321: LD_INT 4
59323: PPUSH
59324: LD_INT 4
59326: PPUSH
59327: CALL_OW 273
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_VAR 0 7
59340: PPUSH
59341: LD_INT 5
59343: PPUSH
59344: LD_INT 4
59346: PPUSH
59347: CALL_OW 272
59351: PUSH
59352: LD_VAR 0 8
59356: PPUSH
59357: LD_INT 5
59359: PPUSH
59360: LD_INT 4
59362: PPUSH
59363: CALL_OW 273
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: ST_TO_ADDR
// for i = tmp downto 1 do
59380: LD_ADDR_VAR 0 4
59384: PUSH
59385: DOUBLE
59386: LD_VAR 0 6
59390: INC
59391: ST_TO_ADDR
59392: LD_INT 1
59394: PUSH
59395: FOR_DOWNTO
59396: IFFALSE 59497
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59398: LD_VAR 0 6
59402: PUSH
59403: LD_VAR 0 4
59407: ARRAY
59408: PUSH
59409: LD_INT 1
59411: ARRAY
59412: PPUSH
59413: LD_VAR 0 6
59417: PUSH
59418: LD_VAR 0 4
59422: ARRAY
59423: PUSH
59424: LD_INT 2
59426: ARRAY
59427: PPUSH
59428: CALL_OW 488
59432: NOT
59433: PUSH
59434: LD_VAR 0 6
59438: PUSH
59439: LD_VAR 0 4
59443: ARRAY
59444: PUSH
59445: LD_INT 1
59447: ARRAY
59448: PPUSH
59449: LD_VAR 0 6
59453: PUSH
59454: LD_VAR 0 4
59458: ARRAY
59459: PUSH
59460: LD_INT 2
59462: ARRAY
59463: PPUSH
59464: CALL_OW 428
59468: PUSH
59469: LD_INT 0
59471: NONEQUAL
59472: OR
59473: IFFALSE 59495
// tmp := Delete ( tmp , i ) ;
59475: LD_ADDR_VAR 0 6
59479: PUSH
59480: LD_VAR 0 6
59484: PPUSH
59485: LD_VAR 0 4
59489: PPUSH
59490: CALL_OW 3
59494: ST_TO_ADDR
59495: GO 59395
59497: POP
59498: POP
// j := GetClosestHex ( unit , tmp ) ;
59499: LD_ADDR_VAR 0 5
59503: PUSH
59504: LD_VAR 0 1
59508: PPUSH
59509: LD_VAR 0 6
59513: PPUSH
59514: CALL 58790 0 2
59518: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59519: LD_VAR 0 1
59523: PPUSH
59524: LD_VAR 0 5
59528: PUSH
59529: LD_INT 1
59531: ARRAY
59532: PPUSH
59533: LD_VAR 0 5
59537: PUSH
59538: LD_INT 2
59540: ARRAY
59541: PPUSH
59542: CALL_OW 111
// end ;
59546: LD_VAR 0 3
59550: RET
// export function PrepareApemanSoldier ( ) ; begin
59551: LD_INT 0
59553: PPUSH
// uc_nation := 0 ;
59554: LD_ADDR_OWVAR 21
59558: PUSH
59559: LD_INT 0
59561: ST_TO_ADDR
// hc_sex := sex_male ;
59562: LD_ADDR_OWVAR 27
59566: PUSH
59567: LD_INT 1
59569: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
59570: LD_ADDR_OWVAR 28
59574: PUSH
59575: LD_INT 15
59577: ST_TO_ADDR
// hc_gallery :=  ;
59578: LD_ADDR_OWVAR 33
59582: PUSH
59583: LD_STRING 
59585: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59586: LD_ADDR_OWVAR 31
59590: PUSH
59591: LD_INT 0
59593: PPUSH
59594: LD_INT 3
59596: PPUSH
59597: CALL_OW 12
59601: PUSH
59602: LD_INT 0
59604: PPUSH
59605: LD_INT 3
59607: PPUSH
59608: CALL_OW 12
59612: PUSH
59613: LD_INT 0
59615: PUSH
59616: LD_INT 0
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: ST_TO_ADDR
// end ;
59625: LD_VAR 0 1
59629: RET
// export function PrepareApemanEngineer ( ) ; begin
59630: LD_INT 0
59632: PPUSH
// uc_nation := 0 ;
59633: LD_ADDR_OWVAR 21
59637: PUSH
59638: LD_INT 0
59640: ST_TO_ADDR
// hc_sex := sex_male ;
59641: LD_ADDR_OWVAR 27
59645: PUSH
59646: LD_INT 1
59648: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
59649: LD_ADDR_OWVAR 28
59653: PUSH
59654: LD_INT 16
59656: ST_TO_ADDR
// hc_gallery :=  ;
59657: LD_ADDR_OWVAR 33
59661: PUSH
59662: LD_STRING 
59664: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59665: LD_ADDR_OWVAR 31
59669: PUSH
59670: LD_INT 0
59672: PPUSH
59673: LD_INT 3
59675: PPUSH
59676: CALL_OW 12
59680: PUSH
59681: LD_INT 0
59683: PPUSH
59684: LD_INT 3
59686: PPUSH
59687: CALL_OW 12
59691: PUSH
59692: LD_INT 0
59694: PUSH
59695: LD_INT 0
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: ST_TO_ADDR
// end ;
59704: LD_VAR 0 1
59708: RET
// export function PrepareApeman ( agressivity ) ; begin
59709: LD_INT 0
59711: PPUSH
// uc_side := 0 ;
59712: LD_ADDR_OWVAR 20
59716: PUSH
59717: LD_INT 0
59719: ST_TO_ADDR
// uc_nation := 0 ;
59720: LD_ADDR_OWVAR 21
59724: PUSH
59725: LD_INT 0
59727: ST_TO_ADDR
// hc_sex := sex_male ;
59728: LD_ADDR_OWVAR 27
59732: PUSH
59733: LD_INT 1
59735: ST_TO_ADDR
// hc_class := class_apeman ;
59736: LD_ADDR_OWVAR 28
59740: PUSH
59741: LD_INT 12
59743: ST_TO_ADDR
// hc_gallery :=  ;
59744: LD_ADDR_OWVAR 33
59748: PUSH
59749: LD_STRING 
59751: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59752: LD_ADDR_OWVAR 35
59756: PUSH
59757: LD_VAR 0 1
59761: NEG
59762: PPUSH
59763: LD_VAR 0 1
59767: PPUSH
59768: CALL_OW 12
59772: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59773: LD_ADDR_OWVAR 31
59777: PUSH
59778: LD_INT 0
59780: PPUSH
59781: LD_INT 3
59783: PPUSH
59784: CALL_OW 12
59788: PUSH
59789: LD_INT 0
59791: PPUSH
59792: LD_INT 3
59794: PPUSH
59795: CALL_OW 12
59799: PUSH
59800: LD_INT 0
59802: PUSH
59803: LD_INT 0
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: ST_TO_ADDR
// end ;
59812: LD_VAR 0 2
59816: RET
// export function PrepareTiger ( agressivity ) ; begin
59817: LD_INT 0
59819: PPUSH
// uc_side := 0 ;
59820: LD_ADDR_OWVAR 20
59824: PUSH
59825: LD_INT 0
59827: ST_TO_ADDR
// uc_nation := 0 ;
59828: LD_ADDR_OWVAR 21
59832: PUSH
59833: LD_INT 0
59835: ST_TO_ADDR
// hc_class := class_tiger ;
59836: LD_ADDR_OWVAR 28
59840: PUSH
59841: LD_INT 14
59843: ST_TO_ADDR
// hc_gallery :=  ;
59844: LD_ADDR_OWVAR 33
59848: PUSH
59849: LD_STRING 
59851: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59852: LD_ADDR_OWVAR 35
59856: PUSH
59857: LD_VAR 0 1
59861: NEG
59862: PPUSH
59863: LD_VAR 0 1
59867: PPUSH
59868: CALL_OW 12
59872: ST_TO_ADDR
// end ;
59873: LD_VAR 0 2
59877: RET
// export function PrepareEnchidna ( ) ; begin
59878: LD_INT 0
59880: PPUSH
// uc_side := 0 ;
59881: LD_ADDR_OWVAR 20
59885: PUSH
59886: LD_INT 0
59888: ST_TO_ADDR
// uc_nation := 0 ;
59889: LD_ADDR_OWVAR 21
59893: PUSH
59894: LD_INT 0
59896: ST_TO_ADDR
// hc_class := class_baggie ;
59897: LD_ADDR_OWVAR 28
59901: PUSH
59902: LD_INT 13
59904: ST_TO_ADDR
// hc_gallery :=  ;
59905: LD_ADDR_OWVAR 33
59909: PUSH
59910: LD_STRING 
59912: ST_TO_ADDR
// end ;
59913: LD_VAR 0 1
59917: RET
// export function PrepareFrog ( ) ; begin
59918: LD_INT 0
59920: PPUSH
// uc_side := 0 ;
59921: LD_ADDR_OWVAR 20
59925: PUSH
59926: LD_INT 0
59928: ST_TO_ADDR
// uc_nation := 0 ;
59929: LD_ADDR_OWVAR 21
59933: PUSH
59934: LD_INT 0
59936: ST_TO_ADDR
// hc_class := class_frog ;
59937: LD_ADDR_OWVAR 28
59941: PUSH
59942: LD_INT 19
59944: ST_TO_ADDR
// hc_gallery :=  ;
59945: LD_ADDR_OWVAR 33
59949: PUSH
59950: LD_STRING 
59952: ST_TO_ADDR
// end ;
59953: LD_VAR 0 1
59957: RET
// export function PrepareFish ( ) ; begin
59958: LD_INT 0
59960: PPUSH
// uc_side := 0 ;
59961: LD_ADDR_OWVAR 20
59965: PUSH
59966: LD_INT 0
59968: ST_TO_ADDR
// uc_nation := 0 ;
59969: LD_ADDR_OWVAR 21
59973: PUSH
59974: LD_INT 0
59976: ST_TO_ADDR
// hc_class := class_fish ;
59977: LD_ADDR_OWVAR 28
59981: PUSH
59982: LD_INT 20
59984: ST_TO_ADDR
// hc_gallery :=  ;
59985: LD_ADDR_OWVAR 33
59989: PUSH
59990: LD_STRING 
59992: ST_TO_ADDR
// end ;
59993: LD_VAR 0 1
59997: RET
// export function PrepareBird ( ) ; begin
59998: LD_INT 0
60000: PPUSH
// uc_side := 0 ;
60001: LD_ADDR_OWVAR 20
60005: PUSH
60006: LD_INT 0
60008: ST_TO_ADDR
// uc_nation := 0 ;
60009: LD_ADDR_OWVAR 21
60013: PUSH
60014: LD_INT 0
60016: ST_TO_ADDR
// hc_class := class_phororhacos ;
60017: LD_ADDR_OWVAR 28
60021: PUSH
60022: LD_INT 18
60024: ST_TO_ADDR
// hc_gallery :=  ;
60025: LD_ADDR_OWVAR 33
60029: PUSH
60030: LD_STRING 
60032: ST_TO_ADDR
// end ;
60033: LD_VAR 0 1
60037: RET
// export function PrepareHorse ( ) ; begin
60038: LD_INT 0
60040: PPUSH
// uc_side := 0 ;
60041: LD_ADDR_OWVAR 20
60045: PUSH
60046: LD_INT 0
60048: ST_TO_ADDR
// uc_nation := 0 ;
60049: LD_ADDR_OWVAR 21
60053: PUSH
60054: LD_INT 0
60056: ST_TO_ADDR
// hc_class := class_horse ;
60057: LD_ADDR_OWVAR 28
60061: PUSH
60062: LD_INT 21
60064: ST_TO_ADDR
// hc_gallery :=  ;
60065: LD_ADDR_OWVAR 33
60069: PUSH
60070: LD_STRING 
60072: ST_TO_ADDR
// end ;
60073: LD_VAR 0 1
60077: RET
// export function PrepareMastodont ( ) ; begin
60078: LD_INT 0
60080: PPUSH
// uc_side := 0 ;
60081: LD_ADDR_OWVAR 20
60085: PUSH
60086: LD_INT 0
60088: ST_TO_ADDR
// uc_nation := 0 ;
60089: LD_ADDR_OWVAR 21
60093: PUSH
60094: LD_INT 0
60096: ST_TO_ADDR
// vc_chassis := class_mastodont ;
60097: LD_ADDR_OWVAR 37
60101: PUSH
60102: LD_INT 31
60104: ST_TO_ADDR
// vc_control := control_rider ;
60105: LD_ADDR_OWVAR 38
60109: PUSH
60110: LD_INT 4
60112: ST_TO_ADDR
// end ;
60113: LD_VAR 0 1
60117: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60118: LD_INT 0
60120: PPUSH
60121: PPUSH
60122: PPUSH
// uc_side = 0 ;
60123: LD_ADDR_OWVAR 20
60127: PUSH
60128: LD_INT 0
60130: ST_TO_ADDR
// uc_nation = 0 ;
60131: LD_ADDR_OWVAR 21
60135: PUSH
60136: LD_INT 0
60138: ST_TO_ADDR
// InitHc_All ( ) ;
60139: CALL_OW 584
// InitVc ;
60143: CALL_OW 20
// if mastodonts then
60147: LD_VAR 0 6
60151: IFFALSE 60218
// for i = 1 to mastodonts do
60153: LD_ADDR_VAR 0 11
60157: PUSH
60158: DOUBLE
60159: LD_INT 1
60161: DEC
60162: ST_TO_ADDR
60163: LD_VAR 0 6
60167: PUSH
60168: FOR_TO
60169: IFFALSE 60216
// begin vc_chassis := 31 ;
60171: LD_ADDR_OWVAR 37
60175: PUSH
60176: LD_INT 31
60178: ST_TO_ADDR
// vc_control := control_rider ;
60179: LD_ADDR_OWVAR 38
60183: PUSH
60184: LD_INT 4
60186: ST_TO_ADDR
// animal := CreateVehicle ;
60187: LD_ADDR_VAR 0 12
60191: PUSH
60192: CALL_OW 45
60196: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60197: LD_VAR 0 12
60201: PPUSH
60202: LD_VAR 0 8
60206: PPUSH
60207: LD_INT 0
60209: PPUSH
60210: CALL 62346 0 3
// end ;
60214: GO 60168
60216: POP
60217: POP
// if horses then
60218: LD_VAR 0 5
60222: IFFALSE 60289
// for i = 1 to horses do
60224: LD_ADDR_VAR 0 11
60228: PUSH
60229: DOUBLE
60230: LD_INT 1
60232: DEC
60233: ST_TO_ADDR
60234: LD_VAR 0 5
60238: PUSH
60239: FOR_TO
60240: IFFALSE 60287
// begin hc_class := 21 ;
60242: LD_ADDR_OWVAR 28
60246: PUSH
60247: LD_INT 21
60249: ST_TO_ADDR
// hc_gallery :=  ;
60250: LD_ADDR_OWVAR 33
60254: PUSH
60255: LD_STRING 
60257: ST_TO_ADDR
// animal := CreateHuman ;
60258: LD_ADDR_VAR 0 12
60262: PUSH
60263: CALL_OW 44
60267: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60268: LD_VAR 0 12
60272: PPUSH
60273: LD_VAR 0 8
60277: PPUSH
60278: LD_INT 0
60280: PPUSH
60281: CALL 62346 0 3
// end ;
60285: GO 60239
60287: POP
60288: POP
// if birds then
60289: LD_VAR 0 1
60293: IFFALSE 60360
// for i = 1 to birds do
60295: LD_ADDR_VAR 0 11
60299: PUSH
60300: DOUBLE
60301: LD_INT 1
60303: DEC
60304: ST_TO_ADDR
60305: LD_VAR 0 1
60309: PUSH
60310: FOR_TO
60311: IFFALSE 60358
// begin hc_class = 18 ;
60313: LD_ADDR_OWVAR 28
60317: PUSH
60318: LD_INT 18
60320: ST_TO_ADDR
// hc_gallery =  ;
60321: LD_ADDR_OWVAR 33
60325: PUSH
60326: LD_STRING 
60328: ST_TO_ADDR
// animal := CreateHuman ;
60329: LD_ADDR_VAR 0 12
60333: PUSH
60334: CALL_OW 44
60338: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60339: LD_VAR 0 12
60343: PPUSH
60344: LD_VAR 0 8
60348: PPUSH
60349: LD_INT 0
60351: PPUSH
60352: CALL 62346 0 3
// end ;
60356: GO 60310
60358: POP
60359: POP
// if tigers then
60360: LD_VAR 0 2
60364: IFFALSE 60448
// for i = 1 to tigers do
60366: LD_ADDR_VAR 0 11
60370: PUSH
60371: DOUBLE
60372: LD_INT 1
60374: DEC
60375: ST_TO_ADDR
60376: LD_VAR 0 2
60380: PUSH
60381: FOR_TO
60382: IFFALSE 60446
// begin hc_class = class_tiger ;
60384: LD_ADDR_OWVAR 28
60388: PUSH
60389: LD_INT 14
60391: ST_TO_ADDR
// hc_gallery =  ;
60392: LD_ADDR_OWVAR 33
60396: PUSH
60397: LD_STRING 
60399: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60400: LD_ADDR_OWVAR 35
60404: PUSH
60405: LD_INT 7
60407: NEG
60408: PPUSH
60409: LD_INT 7
60411: PPUSH
60412: CALL_OW 12
60416: ST_TO_ADDR
// animal := CreateHuman ;
60417: LD_ADDR_VAR 0 12
60421: PUSH
60422: CALL_OW 44
60426: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60427: LD_VAR 0 12
60431: PPUSH
60432: LD_VAR 0 8
60436: PPUSH
60437: LD_INT 0
60439: PPUSH
60440: CALL 62346 0 3
// end ;
60444: GO 60381
60446: POP
60447: POP
// if apemans then
60448: LD_VAR 0 3
60452: IFFALSE 60575
// for i = 1 to apemans do
60454: LD_ADDR_VAR 0 11
60458: PUSH
60459: DOUBLE
60460: LD_INT 1
60462: DEC
60463: ST_TO_ADDR
60464: LD_VAR 0 3
60468: PUSH
60469: FOR_TO
60470: IFFALSE 60573
// begin hc_class = class_apeman ;
60472: LD_ADDR_OWVAR 28
60476: PUSH
60477: LD_INT 12
60479: ST_TO_ADDR
// hc_gallery =  ;
60480: LD_ADDR_OWVAR 33
60484: PUSH
60485: LD_STRING 
60487: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60488: LD_ADDR_OWVAR 35
60492: PUSH
60493: LD_INT 2
60495: NEG
60496: PPUSH
60497: LD_INT 2
60499: PPUSH
60500: CALL_OW 12
60504: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60505: LD_ADDR_OWVAR 31
60509: PUSH
60510: LD_INT 1
60512: PPUSH
60513: LD_INT 3
60515: PPUSH
60516: CALL_OW 12
60520: PUSH
60521: LD_INT 1
60523: PPUSH
60524: LD_INT 3
60526: PPUSH
60527: CALL_OW 12
60531: PUSH
60532: LD_INT 0
60534: PUSH
60535: LD_INT 0
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: ST_TO_ADDR
// animal := CreateHuman ;
60544: LD_ADDR_VAR 0 12
60548: PUSH
60549: CALL_OW 44
60553: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60554: LD_VAR 0 12
60558: PPUSH
60559: LD_VAR 0 8
60563: PPUSH
60564: LD_INT 0
60566: PPUSH
60567: CALL 62346 0 3
// end ;
60571: GO 60469
60573: POP
60574: POP
// if enchidnas then
60575: LD_VAR 0 4
60579: IFFALSE 60646
// for i = 1 to enchidnas do
60581: LD_ADDR_VAR 0 11
60585: PUSH
60586: DOUBLE
60587: LD_INT 1
60589: DEC
60590: ST_TO_ADDR
60591: LD_VAR 0 4
60595: PUSH
60596: FOR_TO
60597: IFFALSE 60644
// begin hc_class = 13 ;
60599: LD_ADDR_OWVAR 28
60603: PUSH
60604: LD_INT 13
60606: ST_TO_ADDR
// hc_gallery =  ;
60607: LD_ADDR_OWVAR 33
60611: PUSH
60612: LD_STRING 
60614: ST_TO_ADDR
// animal := CreateHuman ;
60615: LD_ADDR_VAR 0 12
60619: PUSH
60620: CALL_OW 44
60624: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60625: LD_VAR 0 12
60629: PPUSH
60630: LD_VAR 0 8
60634: PPUSH
60635: LD_INT 0
60637: PPUSH
60638: CALL 62346 0 3
// end ;
60642: GO 60596
60644: POP
60645: POP
// if fishes then
60646: LD_VAR 0 7
60650: IFFALSE 60717
// for i = 1 to fishes do
60652: LD_ADDR_VAR 0 11
60656: PUSH
60657: DOUBLE
60658: LD_INT 1
60660: DEC
60661: ST_TO_ADDR
60662: LD_VAR 0 7
60666: PUSH
60667: FOR_TO
60668: IFFALSE 60715
// begin hc_class = 20 ;
60670: LD_ADDR_OWVAR 28
60674: PUSH
60675: LD_INT 20
60677: ST_TO_ADDR
// hc_gallery =  ;
60678: LD_ADDR_OWVAR 33
60682: PUSH
60683: LD_STRING 
60685: ST_TO_ADDR
// animal := CreateHuman ;
60686: LD_ADDR_VAR 0 12
60690: PUSH
60691: CALL_OW 44
60695: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60696: LD_VAR 0 12
60700: PPUSH
60701: LD_VAR 0 9
60705: PPUSH
60706: LD_INT 0
60708: PPUSH
60709: CALL 62346 0 3
// end ;
60713: GO 60667
60715: POP
60716: POP
// end ;
60717: LD_VAR 0 10
60721: RET
// export function WantHeal ( sci , unit ) ; begin
60722: LD_INT 0
60724: PPUSH
// if GetTaskList ( sci ) > 0 then
60725: LD_VAR 0 1
60729: PPUSH
60730: CALL_OW 437
60734: PUSH
60735: LD_INT 0
60737: GREATER
60738: IFFALSE 60808
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60740: LD_VAR 0 1
60744: PPUSH
60745: CALL_OW 437
60749: PUSH
60750: LD_INT 1
60752: ARRAY
60753: PUSH
60754: LD_INT 1
60756: ARRAY
60757: PUSH
60758: LD_STRING l
60760: EQUAL
60761: PUSH
60762: LD_VAR 0 1
60766: PPUSH
60767: CALL_OW 437
60771: PUSH
60772: LD_INT 1
60774: ARRAY
60775: PUSH
60776: LD_INT 4
60778: ARRAY
60779: PUSH
60780: LD_VAR 0 2
60784: EQUAL
60785: AND
60786: IFFALSE 60798
// result := true else
60788: LD_ADDR_VAR 0 3
60792: PUSH
60793: LD_INT 1
60795: ST_TO_ADDR
60796: GO 60806
// result := false ;
60798: LD_ADDR_VAR 0 3
60802: PUSH
60803: LD_INT 0
60805: ST_TO_ADDR
// end else
60806: GO 60816
// result := false ;
60808: LD_ADDR_VAR 0 3
60812: PUSH
60813: LD_INT 0
60815: ST_TO_ADDR
// end ;
60816: LD_VAR 0 3
60820: RET
// export function HealTarget ( sci ) ; begin
60821: LD_INT 0
60823: PPUSH
// if not sci then
60824: LD_VAR 0 1
60828: NOT
60829: IFFALSE 60833
// exit ;
60831: GO 60898
// result := 0 ;
60833: LD_ADDR_VAR 0 2
60837: PUSH
60838: LD_INT 0
60840: ST_TO_ADDR
// if GetTaskList ( sci ) then
60841: LD_VAR 0 1
60845: PPUSH
60846: CALL_OW 437
60850: IFFALSE 60898
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60852: LD_VAR 0 1
60856: PPUSH
60857: CALL_OW 437
60861: PUSH
60862: LD_INT 1
60864: ARRAY
60865: PUSH
60866: LD_INT 1
60868: ARRAY
60869: PUSH
60870: LD_STRING l
60872: EQUAL
60873: IFFALSE 60898
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60875: LD_ADDR_VAR 0 2
60879: PUSH
60880: LD_VAR 0 1
60884: PPUSH
60885: CALL_OW 437
60889: PUSH
60890: LD_INT 1
60892: ARRAY
60893: PUSH
60894: LD_INT 4
60896: ARRAY
60897: ST_TO_ADDR
// end ;
60898: LD_VAR 0 2
60902: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60903: LD_INT 0
60905: PPUSH
60906: PPUSH
60907: PPUSH
60908: PPUSH
// if not base_units then
60909: LD_VAR 0 1
60913: NOT
60914: IFFALSE 60918
// exit ;
60916: GO 61005
// result := false ;
60918: LD_ADDR_VAR 0 2
60922: PUSH
60923: LD_INT 0
60925: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60926: LD_ADDR_VAR 0 5
60930: PUSH
60931: LD_VAR 0 1
60935: PPUSH
60936: LD_INT 21
60938: PUSH
60939: LD_INT 3
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PPUSH
60946: CALL_OW 72
60950: ST_TO_ADDR
// if not tmp then
60951: LD_VAR 0 5
60955: NOT
60956: IFFALSE 60960
// exit ;
60958: GO 61005
// for i in tmp do
60960: LD_ADDR_VAR 0 3
60964: PUSH
60965: LD_VAR 0 5
60969: PUSH
60970: FOR_IN
60971: IFFALSE 61003
// begin result := EnemyInRange ( i , 22 ) ;
60973: LD_ADDR_VAR 0 2
60977: PUSH
60978: LD_VAR 0 3
60982: PPUSH
60983: LD_INT 22
60985: PPUSH
60986: CALL 58592 0 2
60990: ST_TO_ADDR
// if result then
60991: LD_VAR 0 2
60995: IFFALSE 61001
// exit ;
60997: POP
60998: POP
60999: GO 61005
// end ;
61001: GO 60970
61003: POP
61004: POP
// end ;
61005: LD_VAR 0 2
61009: RET
// export function FilterByTag ( units , tag ) ; begin
61010: LD_INT 0
61012: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
61013: LD_ADDR_VAR 0 3
61017: PUSH
61018: LD_VAR 0 1
61022: PPUSH
61023: LD_INT 120
61025: PUSH
61026: LD_VAR 0 2
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PPUSH
61035: CALL_OW 72
61039: ST_TO_ADDR
// end ;
61040: LD_VAR 0 3
61044: RET
// export function IsDriver ( un ) ; begin
61045: LD_INT 0
61047: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61048: LD_ADDR_VAR 0 2
61052: PUSH
61053: LD_VAR 0 1
61057: PUSH
61058: LD_INT 55
61060: PUSH
61061: EMPTY
61062: LIST
61063: PPUSH
61064: CALL_OW 69
61068: IN
61069: ST_TO_ADDR
// end ;
61070: LD_VAR 0 2
61074: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61075: LD_INT 0
61077: PPUSH
61078: PPUSH
// list := [ ] ;
61079: LD_ADDR_VAR 0 5
61083: PUSH
61084: EMPTY
61085: ST_TO_ADDR
// case d of 0 :
61086: LD_VAR 0 3
61090: PUSH
61091: LD_INT 0
61093: DOUBLE
61094: EQUAL
61095: IFTRUE 61099
61097: GO 61232
61099: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61100: LD_ADDR_VAR 0 5
61104: PUSH
61105: LD_VAR 0 1
61109: PUSH
61110: LD_INT 4
61112: MINUS
61113: PUSH
61114: LD_VAR 0 2
61118: PUSH
61119: LD_INT 4
61121: MINUS
61122: PUSH
61123: LD_INT 2
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: LIST
61130: PUSH
61131: LD_VAR 0 1
61135: PUSH
61136: LD_INT 3
61138: MINUS
61139: PUSH
61140: LD_VAR 0 2
61144: PUSH
61145: LD_INT 1
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: LIST
61152: PUSH
61153: LD_VAR 0 1
61157: PUSH
61158: LD_INT 4
61160: PLUS
61161: PUSH
61162: LD_VAR 0 2
61166: PUSH
61167: LD_INT 4
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: LIST
61174: PUSH
61175: LD_VAR 0 1
61179: PUSH
61180: LD_INT 3
61182: PLUS
61183: PUSH
61184: LD_VAR 0 2
61188: PUSH
61189: LD_INT 3
61191: PLUS
61192: PUSH
61193: LD_INT 5
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: LIST
61200: PUSH
61201: LD_VAR 0 1
61205: PUSH
61206: LD_VAR 0 2
61210: PUSH
61211: LD_INT 4
61213: PLUS
61214: PUSH
61215: LD_INT 0
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: LIST
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: ST_TO_ADDR
// end ; 1 :
61230: GO 61930
61232: LD_INT 1
61234: DOUBLE
61235: EQUAL
61236: IFTRUE 61240
61238: GO 61373
61240: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61241: LD_ADDR_VAR 0 5
61245: PUSH
61246: LD_VAR 0 1
61250: PUSH
61251: LD_VAR 0 2
61255: PUSH
61256: LD_INT 4
61258: MINUS
61259: PUSH
61260: LD_INT 3
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: LIST
61267: PUSH
61268: LD_VAR 0 1
61272: PUSH
61273: LD_INT 3
61275: MINUS
61276: PUSH
61277: LD_VAR 0 2
61281: PUSH
61282: LD_INT 3
61284: MINUS
61285: PUSH
61286: LD_INT 2
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: LIST
61293: PUSH
61294: LD_VAR 0 1
61298: PUSH
61299: LD_INT 4
61301: MINUS
61302: PUSH
61303: LD_VAR 0 2
61307: PUSH
61308: LD_INT 1
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: LIST
61315: PUSH
61316: LD_VAR 0 1
61320: PUSH
61321: LD_VAR 0 2
61325: PUSH
61326: LD_INT 3
61328: PLUS
61329: PUSH
61330: LD_INT 0
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: LIST
61337: PUSH
61338: LD_VAR 0 1
61342: PUSH
61343: LD_INT 4
61345: PLUS
61346: PUSH
61347: LD_VAR 0 2
61351: PUSH
61352: LD_INT 4
61354: PLUS
61355: PUSH
61356: LD_INT 5
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: LIST
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: ST_TO_ADDR
// end ; 2 :
61371: GO 61930
61373: LD_INT 2
61375: DOUBLE
61376: EQUAL
61377: IFTRUE 61381
61379: GO 61510
61381: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61382: LD_ADDR_VAR 0 5
61386: PUSH
61387: LD_VAR 0 1
61391: PUSH
61392: LD_VAR 0 2
61396: PUSH
61397: LD_INT 3
61399: MINUS
61400: PUSH
61401: LD_INT 3
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: LIST
61408: PUSH
61409: LD_VAR 0 1
61413: PUSH
61414: LD_INT 4
61416: PLUS
61417: PUSH
61418: LD_VAR 0 2
61422: PUSH
61423: LD_INT 4
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: LIST
61430: PUSH
61431: LD_VAR 0 1
61435: PUSH
61436: LD_VAR 0 2
61440: PUSH
61441: LD_INT 4
61443: PLUS
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: LIST
61452: PUSH
61453: LD_VAR 0 1
61457: PUSH
61458: LD_INT 3
61460: MINUS
61461: PUSH
61462: LD_VAR 0 2
61466: PUSH
61467: LD_INT 1
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: LIST
61474: PUSH
61475: LD_VAR 0 1
61479: PUSH
61480: LD_INT 4
61482: MINUS
61483: PUSH
61484: LD_VAR 0 2
61488: PUSH
61489: LD_INT 4
61491: MINUS
61492: PUSH
61493: LD_INT 2
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: LIST
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: ST_TO_ADDR
// end ; 3 :
61508: GO 61930
61510: LD_INT 3
61512: DOUBLE
61513: EQUAL
61514: IFTRUE 61518
61516: GO 61651
61518: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61519: LD_ADDR_VAR 0 5
61523: PUSH
61524: LD_VAR 0 1
61528: PUSH
61529: LD_INT 3
61531: PLUS
61532: PUSH
61533: LD_VAR 0 2
61537: PUSH
61538: LD_INT 4
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: LIST
61545: PUSH
61546: LD_VAR 0 1
61550: PUSH
61551: LD_INT 4
61553: PLUS
61554: PUSH
61555: LD_VAR 0 2
61559: PUSH
61560: LD_INT 4
61562: PLUS
61563: PUSH
61564: LD_INT 5
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: LIST
61571: PUSH
61572: LD_VAR 0 1
61576: PUSH
61577: LD_INT 4
61579: MINUS
61580: PUSH
61581: LD_VAR 0 2
61585: PUSH
61586: LD_INT 1
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: LIST
61593: PUSH
61594: LD_VAR 0 1
61598: PUSH
61599: LD_VAR 0 2
61603: PUSH
61604: LD_INT 4
61606: MINUS
61607: PUSH
61608: LD_INT 3
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: LIST
61615: PUSH
61616: LD_VAR 0 1
61620: PUSH
61621: LD_INT 3
61623: MINUS
61624: PUSH
61625: LD_VAR 0 2
61629: PUSH
61630: LD_INT 3
61632: MINUS
61633: PUSH
61634: LD_INT 2
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: LIST
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: ST_TO_ADDR
// end ; 4 :
61649: GO 61930
61651: LD_INT 4
61653: DOUBLE
61654: EQUAL
61655: IFTRUE 61659
61657: GO 61792
61659: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61660: LD_ADDR_VAR 0 5
61664: PUSH
61665: LD_VAR 0 1
61669: PUSH
61670: LD_VAR 0 2
61674: PUSH
61675: LD_INT 4
61677: PLUS
61678: PUSH
61679: LD_INT 0
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: LIST
61686: PUSH
61687: LD_VAR 0 1
61691: PUSH
61692: LD_INT 3
61694: PLUS
61695: PUSH
61696: LD_VAR 0 2
61700: PUSH
61701: LD_INT 3
61703: PLUS
61704: PUSH
61705: LD_INT 5
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: LIST
61712: PUSH
61713: LD_VAR 0 1
61717: PUSH
61718: LD_INT 4
61720: PLUS
61721: PUSH
61722: LD_VAR 0 2
61726: PUSH
61727: LD_INT 4
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: LIST
61734: PUSH
61735: LD_VAR 0 1
61739: PUSH
61740: LD_VAR 0 2
61744: PUSH
61745: LD_INT 3
61747: MINUS
61748: PUSH
61749: LD_INT 3
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: LIST
61756: PUSH
61757: LD_VAR 0 1
61761: PUSH
61762: LD_INT 4
61764: MINUS
61765: PUSH
61766: LD_VAR 0 2
61770: PUSH
61771: LD_INT 4
61773: MINUS
61774: PUSH
61775: LD_INT 2
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: LIST
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: ST_TO_ADDR
// end ; 5 :
61790: GO 61930
61792: LD_INT 5
61794: DOUBLE
61795: EQUAL
61796: IFTRUE 61800
61798: GO 61929
61800: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61801: LD_ADDR_VAR 0 5
61805: PUSH
61806: LD_VAR 0 1
61810: PUSH
61811: LD_INT 4
61813: MINUS
61814: PUSH
61815: LD_VAR 0 2
61819: PUSH
61820: LD_INT 1
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: LIST
61827: PUSH
61828: LD_VAR 0 1
61832: PUSH
61833: LD_VAR 0 2
61837: PUSH
61838: LD_INT 4
61840: MINUS
61841: PUSH
61842: LD_INT 3
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: LIST
61849: PUSH
61850: LD_VAR 0 1
61854: PUSH
61855: LD_INT 4
61857: PLUS
61858: PUSH
61859: LD_VAR 0 2
61863: PUSH
61864: LD_INT 4
61866: PLUS
61867: PUSH
61868: LD_INT 5
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: LIST
61875: PUSH
61876: LD_VAR 0 1
61880: PUSH
61881: LD_INT 3
61883: PLUS
61884: PUSH
61885: LD_VAR 0 2
61889: PUSH
61890: LD_INT 4
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: LIST
61897: PUSH
61898: LD_VAR 0 1
61902: PUSH
61903: LD_VAR 0 2
61907: PUSH
61908: LD_INT 3
61910: PLUS
61911: PUSH
61912: LD_INT 0
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: LIST
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: ST_TO_ADDR
// end ; end ;
61927: GO 61930
61929: POP
// result := list ;
61930: LD_ADDR_VAR 0 4
61934: PUSH
61935: LD_VAR 0 5
61939: ST_TO_ADDR
// end ;
61940: LD_VAR 0 4
61944: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61945: LD_INT 0
61947: PPUSH
61948: PPUSH
61949: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61950: LD_VAR 0 1
61954: NOT
61955: PUSH
61956: LD_VAR 0 2
61960: PUSH
61961: LD_INT 1
61963: PUSH
61964: LD_INT 2
61966: PUSH
61967: LD_INT 3
61969: PUSH
61970: LD_INT 4
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: IN
61979: NOT
61980: OR
61981: IFFALSE 61985
// exit ;
61983: GO 62068
// tmp := [ ] ;
61985: LD_ADDR_VAR 0 5
61989: PUSH
61990: EMPTY
61991: ST_TO_ADDR
// for i in units do
61992: LD_ADDR_VAR 0 4
61996: PUSH
61997: LD_VAR 0 1
62001: PUSH
62002: FOR_IN
62003: IFFALSE 62037
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
62005: LD_ADDR_VAR 0 5
62009: PUSH
62010: LD_VAR 0 5
62014: PPUSH
62015: LD_VAR 0 4
62019: PPUSH
62020: LD_VAR 0 2
62024: PPUSH
62025: CALL_OW 259
62029: PPUSH
62030: CALL 63429 0 2
62034: ST_TO_ADDR
62035: GO 62002
62037: POP
62038: POP
// if not tmp then
62039: LD_VAR 0 5
62043: NOT
62044: IFFALSE 62048
// exit ;
62046: GO 62068
// result := SortListByListDesc ( units , tmp ) ;
62048: LD_ADDR_VAR 0 3
62052: PUSH
62053: LD_VAR 0 1
62057: PPUSH
62058: LD_VAR 0 5
62062: PPUSH
62063: CALL_OW 77
62067: ST_TO_ADDR
// end ;
62068: LD_VAR 0 3
62072: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62073: LD_INT 0
62075: PPUSH
62076: PPUSH
62077: PPUSH
// result := false ;
62078: LD_ADDR_VAR 0 3
62082: PUSH
62083: LD_INT 0
62085: ST_TO_ADDR
// if not building then
62086: LD_VAR 0 2
62090: NOT
62091: IFFALSE 62095
// exit ;
62093: GO 62233
// x := GetX ( building ) ;
62095: LD_ADDR_VAR 0 4
62099: PUSH
62100: LD_VAR 0 2
62104: PPUSH
62105: CALL_OW 250
62109: ST_TO_ADDR
// y := GetY ( building ) ;
62110: LD_ADDR_VAR 0 5
62114: PUSH
62115: LD_VAR 0 2
62119: PPUSH
62120: CALL_OW 251
62124: ST_TO_ADDR
// if not x or not y then
62125: LD_VAR 0 4
62129: NOT
62130: PUSH
62131: LD_VAR 0 5
62135: NOT
62136: OR
62137: IFFALSE 62141
// exit ;
62139: GO 62233
// if GetTaskList ( unit ) then
62141: LD_VAR 0 1
62145: PPUSH
62146: CALL_OW 437
62150: IFFALSE 62233
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62152: LD_STRING e
62154: PUSH
62155: LD_VAR 0 1
62159: PPUSH
62160: CALL_OW 437
62164: PUSH
62165: LD_INT 1
62167: ARRAY
62168: PUSH
62169: LD_INT 1
62171: ARRAY
62172: EQUAL
62173: PUSH
62174: LD_VAR 0 4
62178: PUSH
62179: LD_VAR 0 1
62183: PPUSH
62184: CALL_OW 437
62188: PUSH
62189: LD_INT 1
62191: ARRAY
62192: PUSH
62193: LD_INT 2
62195: ARRAY
62196: EQUAL
62197: AND
62198: PUSH
62199: LD_VAR 0 5
62203: PUSH
62204: LD_VAR 0 1
62208: PPUSH
62209: CALL_OW 437
62213: PUSH
62214: LD_INT 1
62216: ARRAY
62217: PUSH
62218: LD_INT 3
62220: ARRAY
62221: EQUAL
62222: AND
62223: IFFALSE 62233
// result := true end ;
62225: LD_ADDR_VAR 0 3
62229: PUSH
62230: LD_INT 1
62232: ST_TO_ADDR
// end ;
62233: LD_VAR 0 3
62237: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62238: LD_INT 0
62240: PPUSH
// result := false ;
62241: LD_ADDR_VAR 0 4
62245: PUSH
62246: LD_INT 0
62248: ST_TO_ADDR
// if GetTaskList ( unit ) then
62249: LD_VAR 0 1
62253: PPUSH
62254: CALL_OW 437
62258: IFFALSE 62341
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62260: LD_STRING M
62262: PUSH
62263: LD_VAR 0 1
62267: PPUSH
62268: CALL_OW 437
62272: PUSH
62273: LD_INT 1
62275: ARRAY
62276: PUSH
62277: LD_INT 1
62279: ARRAY
62280: EQUAL
62281: PUSH
62282: LD_VAR 0 2
62286: PUSH
62287: LD_VAR 0 1
62291: PPUSH
62292: CALL_OW 437
62296: PUSH
62297: LD_INT 1
62299: ARRAY
62300: PUSH
62301: LD_INT 2
62303: ARRAY
62304: EQUAL
62305: AND
62306: PUSH
62307: LD_VAR 0 3
62311: PUSH
62312: LD_VAR 0 1
62316: PPUSH
62317: CALL_OW 437
62321: PUSH
62322: LD_INT 1
62324: ARRAY
62325: PUSH
62326: LD_INT 3
62328: ARRAY
62329: EQUAL
62330: AND
62331: IFFALSE 62341
// result := true ;
62333: LD_ADDR_VAR 0 4
62337: PUSH
62338: LD_INT 1
62340: ST_TO_ADDR
// end ; end ;
62341: LD_VAR 0 4
62345: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62346: LD_INT 0
62348: PPUSH
62349: PPUSH
62350: PPUSH
62351: PPUSH
// if not unit or not area then
62352: LD_VAR 0 1
62356: NOT
62357: PUSH
62358: LD_VAR 0 2
62362: NOT
62363: OR
62364: IFFALSE 62368
// exit ;
62366: GO 62532
// tmp := AreaToList ( area , i ) ;
62368: LD_ADDR_VAR 0 6
62372: PUSH
62373: LD_VAR 0 2
62377: PPUSH
62378: LD_VAR 0 5
62382: PPUSH
62383: CALL_OW 517
62387: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62388: LD_ADDR_VAR 0 5
62392: PUSH
62393: DOUBLE
62394: LD_INT 1
62396: DEC
62397: ST_TO_ADDR
62398: LD_VAR 0 6
62402: PUSH
62403: LD_INT 1
62405: ARRAY
62406: PUSH
62407: FOR_TO
62408: IFFALSE 62530
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62410: LD_ADDR_VAR 0 7
62414: PUSH
62415: LD_VAR 0 6
62419: PUSH
62420: LD_INT 1
62422: ARRAY
62423: PUSH
62424: LD_VAR 0 5
62428: ARRAY
62429: PUSH
62430: LD_VAR 0 6
62434: PUSH
62435: LD_INT 2
62437: ARRAY
62438: PUSH
62439: LD_VAR 0 5
62443: ARRAY
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62449: LD_VAR 0 7
62453: PUSH
62454: LD_INT 1
62456: ARRAY
62457: PPUSH
62458: LD_VAR 0 7
62462: PUSH
62463: LD_INT 2
62465: ARRAY
62466: PPUSH
62467: CALL_OW 428
62471: PUSH
62472: LD_INT 0
62474: EQUAL
62475: IFFALSE 62528
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62477: LD_VAR 0 1
62481: PPUSH
62482: LD_VAR 0 7
62486: PUSH
62487: LD_INT 1
62489: ARRAY
62490: PPUSH
62491: LD_VAR 0 7
62495: PUSH
62496: LD_INT 2
62498: ARRAY
62499: PPUSH
62500: LD_VAR 0 3
62504: PPUSH
62505: CALL_OW 48
// result := IsPlaced ( unit ) ;
62509: LD_ADDR_VAR 0 4
62513: PUSH
62514: LD_VAR 0 1
62518: PPUSH
62519: CALL_OW 305
62523: ST_TO_ADDR
// exit ;
62524: POP
62525: POP
62526: GO 62532
// end ; end ;
62528: GO 62407
62530: POP
62531: POP
// end ;
62532: LD_VAR 0 4
62536: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62537: LD_INT 0
62539: PPUSH
62540: PPUSH
62541: PPUSH
// if not side or side > 8 then
62542: LD_VAR 0 1
62546: NOT
62547: PUSH
62548: LD_VAR 0 1
62552: PUSH
62553: LD_INT 8
62555: GREATER
62556: OR
62557: IFFALSE 62561
// exit ;
62559: GO 62748
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62561: LD_ADDR_VAR 0 4
62565: PUSH
62566: LD_INT 22
62568: PUSH
62569: LD_VAR 0 1
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 21
62580: PUSH
62581: LD_INT 3
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PPUSH
62592: CALL_OW 69
62596: ST_TO_ADDR
// if not tmp then
62597: LD_VAR 0 4
62601: NOT
62602: IFFALSE 62606
// exit ;
62604: GO 62748
// enable_addtolog := true ;
62606: LD_ADDR_OWVAR 81
62610: PUSH
62611: LD_INT 1
62613: ST_TO_ADDR
// AddToLog ( [ ) ;
62614: LD_STRING [
62616: PPUSH
62617: CALL_OW 561
// for i in tmp do
62621: LD_ADDR_VAR 0 3
62625: PUSH
62626: LD_VAR 0 4
62630: PUSH
62631: FOR_IN
62632: IFFALSE 62739
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62634: LD_STRING [
62636: PUSH
62637: LD_VAR 0 3
62641: PPUSH
62642: CALL_OW 266
62646: STR
62647: PUSH
62648: LD_STRING , 
62650: STR
62651: PUSH
62652: LD_VAR 0 3
62656: PPUSH
62657: CALL_OW 250
62661: STR
62662: PUSH
62663: LD_STRING , 
62665: STR
62666: PUSH
62667: LD_VAR 0 3
62671: PPUSH
62672: CALL_OW 251
62676: STR
62677: PUSH
62678: LD_STRING , 
62680: STR
62681: PUSH
62682: LD_VAR 0 3
62686: PPUSH
62687: CALL_OW 254
62691: STR
62692: PUSH
62693: LD_STRING , 
62695: STR
62696: PUSH
62697: LD_VAR 0 3
62701: PPUSH
62702: LD_INT 1
62704: PPUSH
62705: CALL_OW 268
62709: STR
62710: PUSH
62711: LD_STRING , 
62713: STR
62714: PUSH
62715: LD_VAR 0 3
62719: PPUSH
62720: LD_INT 2
62722: PPUSH
62723: CALL_OW 268
62727: STR
62728: PUSH
62729: LD_STRING ],
62731: STR
62732: PPUSH
62733: CALL_OW 561
// end ;
62737: GO 62631
62739: POP
62740: POP
// AddToLog ( ]; ) ;
62741: LD_STRING ];
62743: PPUSH
62744: CALL_OW 561
// end ;
62748: LD_VAR 0 2
62752: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62753: LD_INT 0
62755: PPUSH
62756: PPUSH
62757: PPUSH
62758: PPUSH
62759: PPUSH
// if not area or not rate or not max then
62760: LD_VAR 0 1
62764: NOT
62765: PUSH
62766: LD_VAR 0 2
62770: NOT
62771: OR
62772: PUSH
62773: LD_VAR 0 4
62777: NOT
62778: OR
62779: IFFALSE 62783
// exit ;
62781: GO 62972
// while 1 do
62783: LD_INT 1
62785: IFFALSE 62972
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62787: LD_ADDR_VAR 0 9
62791: PUSH
62792: LD_VAR 0 1
62796: PPUSH
62797: LD_INT 1
62799: PPUSH
62800: CALL_OW 287
62804: PUSH
62805: LD_INT 10
62807: MUL
62808: ST_TO_ADDR
// r := rate / 10 ;
62809: LD_ADDR_VAR 0 7
62813: PUSH
62814: LD_VAR 0 2
62818: PUSH
62819: LD_INT 10
62821: DIVREAL
62822: ST_TO_ADDR
// time := 1 1$00 ;
62823: LD_ADDR_VAR 0 8
62827: PUSH
62828: LD_INT 2100
62830: ST_TO_ADDR
// if amount < min then
62831: LD_VAR 0 9
62835: PUSH
62836: LD_VAR 0 3
62840: LESS
62841: IFFALSE 62859
// r := r * 2 else
62843: LD_ADDR_VAR 0 7
62847: PUSH
62848: LD_VAR 0 7
62852: PUSH
62853: LD_INT 2
62855: MUL
62856: ST_TO_ADDR
62857: GO 62885
// if amount > max then
62859: LD_VAR 0 9
62863: PUSH
62864: LD_VAR 0 4
62868: GREATER
62869: IFFALSE 62885
// r := r / 2 ;
62871: LD_ADDR_VAR 0 7
62875: PUSH
62876: LD_VAR 0 7
62880: PUSH
62881: LD_INT 2
62883: DIVREAL
62884: ST_TO_ADDR
// time := time / r ;
62885: LD_ADDR_VAR 0 8
62889: PUSH
62890: LD_VAR 0 8
62894: PUSH
62895: LD_VAR 0 7
62899: DIVREAL
62900: ST_TO_ADDR
// if time < 0 then
62901: LD_VAR 0 8
62905: PUSH
62906: LD_INT 0
62908: LESS
62909: IFFALSE 62926
// time := time * - 1 ;
62911: LD_ADDR_VAR 0 8
62915: PUSH
62916: LD_VAR 0 8
62920: PUSH
62921: LD_INT 1
62923: NEG
62924: MUL
62925: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62926: LD_VAR 0 8
62930: PUSH
62931: LD_INT 35
62933: PPUSH
62934: LD_INT 875
62936: PPUSH
62937: CALL_OW 12
62941: PLUS
62942: PPUSH
62943: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62947: LD_INT 1
62949: PPUSH
62950: LD_INT 5
62952: PPUSH
62953: CALL_OW 12
62957: PPUSH
62958: LD_VAR 0 1
62962: PPUSH
62963: LD_INT 1
62965: PPUSH
62966: CALL_OW 55
// end ;
62970: GO 62783
// end ;
62972: LD_VAR 0 5
62976: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62977: LD_INT 0
62979: PPUSH
62980: PPUSH
62981: PPUSH
62982: PPUSH
62983: PPUSH
62984: PPUSH
62985: PPUSH
62986: PPUSH
// if not turrets or not factories then
62987: LD_VAR 0 1
62991: NOT
62992: PUSH
62993: LD_VAR 0 2
62997: NOT
62998: OR
62999: IFFALSE 63003
// exit ;
63001: GO 63310
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63003: LD_ADDR_VAR 0 10
63007: PUSH
63008: LD_INT 5
63010: PUSH
63011: LD_INT 6
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 2
63020: PUSH
63021: LD_INT 4
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 3
63030: PUSH
63031: LD_INT 5
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: LIST
63042: PUSH
63043: LD_INT 24
63045: PUSH
63046: LD_INT 25
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 23
63055: PUSH
63056: LD_INT 27
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 42
63069: PUSH
63070: LD_INT 43
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 44
63079: PUSH
63080: LD_INT 46
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 45
63089: PUSH
63090: LD_INT 47
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: LIST
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: LIST
63106: ST_TO_ADDR
// result := [ ] ;
63107: LD_ADDR_VAR 0 3
63111: PUSH
63112: EMPTY
63113: ST_TO_ADDR
// for i in turrets do
63114: LD_ADDR_VAR 0 4
63118: PUSH
63119: LD_VAR 0 1
63123: PUSH
63124: FOR_IN
63125: IFFALSE 63308
// begin nat := GetNation ( i ) ;
63127: LD_ADDR_VAR 0 7
63131: PUSH
63132: LD_VAR 0 4
63136: PPUSH
63137: CALL_OW 248
63141: ST_TO_ADDR
// weapon := 0 ;
63142: LD_ADDR_VAR 0 8
63146: PUSH
63147: LD_INT 0
63149: ST_TO_ADDR
// if not nat then
63150: LD_VAR 0 7
63154: NOT
63155: IFFALSE 63159
// continue ;
63157: GO 63124
// for j in list [ nat ] do
63159: LD_ADDR_VAR 0 5
63163: PUSH
63164: LD_VAR 0 10
63168: PUSH
63169: LD_VAR 0 7
63173: ARRAY
63174: PUSH
63175: FOR_IN
63176: IFFALSE 63217
// if GetBWeapon ( i ) = j [ 1 ] then
63178: LD_VAR 0 4
63182: PPUSH
63183: CALL_OW 269
63187: PUSH
63188: LD_VAR 0 5
63192: PUSH
63193: LD_INT 1
63195: ARRAY
63196: EQUAL
63197: IFFALSE 63215
// begin weapon := j [ 2 ] ;
63199: LD_ADDR_VAR 0 8
63203: PUSH
63204: LD_VAR 0 5
63208: PUSH
63209: LD_INT 2
63211: ARRAY
63212: ST_TO_ADDR
// break ;
63213: GO 63217
// end ;
63215: GO 63175
63217: POP
63218: POP
// if not weapon then
63219: LD_VAR 0 8
63223: NOT
63224: IFFALSE 63228
// continue ;
63226: GO 63124
// for k in factories do
63228: LD_ADDR_VAR 0 6
63232: PUSH
63233: LD_VAR 0 2
63237: PUSH
63238: FOR_IN
63239: IFFALSE 63304
// begin weapons := AvailableWeaponList ( k ) ;
63241: LD_ADDR_VAR 0 9
63245: PUSH
63246: LD_VAR 0 6
63250: PPUSH
63251: CALL_OW 478
63255: ST_TO_ADDR
// if not weapons then
63256: LD_VAR 0 9
63260: NOT
63261: IFFALSE 63265
// continue ;
63263: GO 63238
// if weapon in weapons then
63265: LD_VAR 0 8
63269: PUSH
63270: LD_VAR 0 9
63274: IN
63275: IFFALSE 63302
// begin result := [ i , weapon ] ;
63277: LD_ADDR_VAR 0 3
63281: PUSH
63282: LD_VAR 0 4
63286: PUSH
63287: LD_VAR 0 8
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: ST_TO_ADDR
// exit ;
63296: POP
63297: POP
63298: POP
63299: POP
63300: GO 63310
// end ; end ;
63302: GO 63238
63304: POP
63305: POP
// end ;
63306: GO 63124
63308: POP
63309: POP
// end ;
63310: LD_VAR 0 3
63314: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63315: LD_INT 0
63317: PPUSH
// if not side or side > 8 then
63318: LD_VAR 0 3
63322: NOT
63323: PUSH
63324: LD_VAR 0 3
63328: PUSH
63329: LD_INT 8
63331: GREATER
63332: OR
63333: IFFALSE 63337
// exit ;
63335: GO 63396
// if not range then
63337: LD_VAR 0 4
63341: NOT
63342: IFFALSE 63353
// range := - 12 ;
63344: LD_ADDR_VAR 0 4
63348: PUSH
63349: LD_INT 12
63351: NEG
63352: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63353: LD_VAR 0 1
63357: PPUSH
63358: LD_VAR 0 2
63362: PPUSH
63363: LD_VAR 0 3
63367: PPUSH
63368: LD_VAR 0 4
63372: PPUSH
63373: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63377: LD_VAR 0 1
63381: PPUSH
63382: LD_VAR 0 2
63386: PPUSH
63387: LD_VAR 0 3
63391: PPUSH
63392: CALL_OW 331
// end ;
63396: LD_VAR 0 5
63400: RET
// export function Video ( mode ) ; begin
63401: LD_INT 0
63403: PPUSH
// ingame_video = mode ;
63404: LD_ADDR_OWVAR 52
63408: PUSH
63409: LD_VAR 0 1
63413: ST_TO_ADDR
// interface_hidden = mode ;
63414: LD_ADDR_OWVAR 54
63418: PUSH
63419: LD_VAR 0 1
63423: ST_TO_ADDR
// end ;
63424: LD_VAR 0 2
63428: RET
// export function Join ( array , element ) ; begin
63429: LD_INT 0
63431: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63432: LD_ADDR_VAR 0 3
63436: PUSH
63437: LD_VAR 0 1
63441: PPUSH
63442: LD_VAR 0 1
63446: PUSH
63447: LD_INT 1
63449: PLUS
63450: PPUSH
63451: LD_VAR 0 2
63455: PPUSH
63456: CALL_OW 1
63460: ST_TO_ADDR
// end ;
63461: LD_VAR 0 3
63465: RET
// export function JoinUnion ( array , element ) ; begin
63466: LD_INT 0
63468: PPUSH
// result := array union element ;
63469: LD_ADDR_VAR 0 3
63473: PUSH
63474: LD_VAR 0 1
63478: PUSH
63479: LD_VAR 0 2
63483: UNION
63484: ST_TO_ADDR
// end ;
63485: LD_VAR 0 3
63489: RET
// export function GetBehemoths ( side ) ; begin
63490: LD_INT 0
63492: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
63493: LD_ADDR_VAR 0 2
63497: PUSH
63498: LD_INT 22
63500: PUSH
63501: LD_VAR 0 1
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 31
63512: PUSH
63513: LD_INT 25
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PPUSH
63524: CALL_OW 69
63528: ST_TO_ADDR
// end ;
63529: LD_VAR 0 2
63533: RET
// export function Shuffle ( array ) ; var i , index ; begin
63534: LD_INT 0
63536: PPUSH
63537: PPUSH
63538: PPUSH
// result := [ ] ;
63539: LD_ADDR_VAR 0 2
63543: PUSH
63544: EMPTY
63545: ST_TO_ADDR
// if not array then
63546: LD_VAR 0 1
63550: NOT
63551: IFFALSE 63555
// exit ;
63553: GO 63654
// Randomize ;
63555: CALL_OW 10
// for i = array downto 1 do
63559: LD_ADDR_VAR 0 3
63563: PUSH
63564: DOUBLE
63565: LD_VAR 0 1
63569: INC
63570: ST_TO_ADDR
63571: LD_INT 1
63573: PUSH
63574: FOR_DOWNTO
63575: IFFALSE 63652
// begin index := rand ( 1 , array ) ;
63577: LD_ADDR_VAR 0 4
63581: PUSH
63582: LD_INT 1
63584: PPUSH
63585: LD_VAR 0 1
63589: PPUSH
63590: CALL_OW 12
63594: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63595: LD_ADDR_VAR 0 2
63599: PUSH
63600: LD_VAR 0 2
63604: PPUSH
63605: LD_VAR 0 2
63609: PUSH
63610: LD_INT 1
63612: PLUS
63613: PPUSH
63614: LD_VAR 0 1
63618: PUSH
63619: LD_VAR 0 4
63623: ARRAY
63624: PPUSH
63625: CALL_OW 2
63629: ST_TO_ADDR
// array := Delete ( array , index ) ;
63630: LD_ADDR_VAR 0 1
63634: PUSH
63635: LD_VAR 0 1
63639: PPUSH
63640: LD_VAR 0 4
63644: PPUSH
63645: CALL_OW 3
63649: ST_TO_ADDR
// end ;
63650: GO 63574
63652: POP
63653: POP
// end ;
63654: LD_VAR 0 2
63658: RET
// export function GetBaseMaterials ( base ) ; begin
63659: LD_INT 0
63661: PPUSH
// result := [ 0 , 0 , 0 ] ;
63662: LD_ADDR_VAR 0 2
63666: PUSH
63667: LD_INT 0
63669: PUSH
63670: LD_INT 0
63672: PUSH
63673: LD_INT 0
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: LIST
63680: ST_TO_ADDR
// if not base then
63681: LD_VAR 0 1
63685: NOT
63686: IFFALSE 63690
// exit ;
63688: GO 63739
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63690: LD_ADDR_VAR 0 2
63694: PUSH
63695: LD_VAR 0 1
63699: PPUSH
63700: LD_INT 1
63702: PPUSH
63703: CALL_OW 275
63707: PUSH
63708: LD_VAR 0 1
63712: PPUSH
63713: LD_INT 2
63715: PPUSH
63716: CALL_OW 275
63720: PUSH
63721: LD_VAR 0 1
63725: PPUSH
63726: LD_INT 3
63728: PPUSH
63729: CALL_OW 275
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: LIST
63738: ST_TO_ADDR
// end ;
63739: LD_VAR 0 2
63743: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63744: LD_INT 0
63746: PPUSH
63747: PPUSH
// result := array ;
63748: LD_ADDR_VAR 0 3
63752: PUSH
63753: LD_VAR 0 1
63757: ST_TO_ADDR
// if size >= result then
63758: LD_VAR 0 2
63762: PUSH
63763: LD_VAR 0 3
63767: GREATEREQUAL
63768: IFFALSE 63772
// exit ;
63770: GO 63822
// if size then
63772: LD_VAR 0 2
63776: IFFALSE 63822
// for i := array downto size do
63778: LD_ADDR_VAR 0 4
63782: PUSH
63783: DOUBLE
63784: LD_VAR 0 1
63788: INC
63789: ST_TO_ADDR
63790: LD_VAR 0 2
63794: PUSH
63795: FOR_DOWNTO
63796: IFFALSE 63820
// result := Delete ( result , result ) ;
63798: LD_ADDR_VAR 0 3
63802: PUSH
63803: LD_VAR 0 3
63807: PPUSH
63808: LD_VAR 0 3
63812: PPUSH
63813: CALL_OW 3
63817: ST_TO_ADDR
63818: GO 63795
63820: POP
63821: POP
// end ;
63822: LD_VAR 0 3
63826: RET
// export function ComExit ( unit ) ; var tmp ; begin
63827: LD_INT 0
63829: PPUSH
63830: PPUSH
// if not IsInUnit ( unit ) then
63831: LD_VAR 0 1
63835: PPUSH
63836: CALL_OW 310
63840: NOT
63841: IFFALSE 63845
// exit ;
63843: GO 63905
// tmp := IsInUnit ( unit ) ;
63845: LD_ADDR_VAR 0 3
63849: PUSH
63850: LD_VAR 0 1
63854: PPUSH
63855: CALL_OW 310
63859: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63860: LD_VAR 0 3
63864: PPUSH
63865: CALL_OW 247
63869: PUSH
63870: LD_INT 2
63872: EQUAL
63873: IFFALSE 63886
// ComExitVehicle ( unit ) else
63875: LD_VAR 0 1
63879: PPUSH
63880: CALL_OW 121
63884: GO 63895
// ComExitBuilding ( unit ) ;
63886: LD_VAR 0 1
63890: PPUSH
63891: CALL_OW 122
// result := tmp ;
63895: LD_ADDR_VAR 0 2
63899: PUSH
63900: LD_VAR 0 3
63904: ST_TO_ADDR
// end ;
63905: LD_VAR 0 2
63909: RET
// export function ComExitAll ( units ) ; var i ; begin
63910: LD_INT 0
63912: PPUSH
63913: PPUSH
// if not units then
63914: LD_VAR 0 1
63918: NOT
63919: IFFALSE 63923
// exit ;
63921: GO 63949
// for i in units do
63923: LD_ADDR_VAR 0 3
63927: PUSH
63928: LD_VAR 0 1
63932: PUSH
63933: FOR_IN
63934: IFFALSE 63947
// ComExit ( i ) ;
63936: LD_VAR 0 3
63940: PPUSH
63941: CALL 63827 0 1
63945: GO 63933
63947: POP
63948: POP
// end ;
63949: LD_VAR 0 2
63953: RET
// export function ResetHc ; begin
63954: LD_INT 0
63956: PPUSH
// InitHc ;
63957: CALL_OW 19
// hc_importance := 0 ;
63961: LD_ADDR_OWVAR 32
63965: PUSH
63966: LD_INT 0
63968: ST_TO_ADDR
// end ;
63969: LD_VAR 0 1
63973: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63974: LD_INT 0
63976: PPUSH
63977: PPUSH
63978: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63979: LD_ADDR_VAR 0 6
63983: PUSH
63984: LD_VAR 0 1
63988: PUSH
63989: LD_VAR 0 3
63993: PLUS
63994: PUSH
63995: LD_INT 2
63997: DIV
63998: ST_TO_ADDR
// if _x < 0 then
63999: LD_VAR 0 6
64003: PUSH
64004: LD_INT 0
64006: LESS
64007: IFFALSE 64024
// _x := _x * - 1 ;
64009: LD_ADDR_VAR 0 6
64013: PUSH
64014: LD_VAR 0 6
64018: PUSH
64019: LD_INT 1
64021: NEG
64022: MUL
64023: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64024: LD_ADDR_VAR 0 7
64028: PUSH
64029: LD_VAR 0 2
64033: PUSH
64034: LD_VAR 0 4
64038: PLUS
64039: PUSH
64040: LD_INT 2
64042: DIV
64043: ST_TO_ADDR
// if _y < 0 then
64044: LD_VAR 0 7
64048: PUSH
64049: LD_INT 0
64051: LESS
64052: IFFALSE 64069
// _y := _y * - 1 ;
64054: LD_ADDR_VAR 0 7
64058: PUSH
64059: LD_VAR 0 7
64063: PUSH
64064: LD_INT 1
64066: NEG
64067: MUL
64068: ST_TO_ADDR
// result := [ _x , _y ] ;
64069: LD_ADDR_VAR 0 5
64073: PUSH
64074: LD_VAR 0 6
64078: PUSH
64079: LD_VAR 0 7
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: ST_TO_ADDR
// end ;
64088: LD_VAR 0 5
64092: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64093: LD_INT 0
64095: PPUSH
64096: PPUSH
64097: PPUSH
64098: PPUSH
// task := GetTaskList ( unit ) ;
64099: LD_ADDR_VAR 0 7
64103: PUSH
64104: LD_VAR 0 1
64108: PPUSH
64109: CALL_OW 437
64113: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64114: LD_VAR 0 7
64118: NOT
64119: PUSH
64120: LD_VAR 0 1
64124: PPUSH
64125: LD_VAR 0 2
64129: PPUSH
64130: CALL_OW 308
64134: NOT
64135: AND
64136: IFFALSE 64140
// exit ;
64138: GO 64258
// if IsInArea ( unit , area ) then
64140: LD_VAR 0 1
64144: PPUSH
64145: LD_VAR 0 2
64149: PPUSH
64150: CALL_OW 308
64154: IFFALSE 64172
// begin ComMoveToArea ( unit , goAway ) ;
64156: LD_VAR 0 1
64160: PPUSH
64161: LD_VAR 0 3
64165: PPUSH
64166: CALL_OW 113
// exit ;
64170: GO 64258
// end ; if task [ 1 ] [ 1 ] <> M then
64172: LD_VAR 0 7
64176: PUSH
64177: LD_INT 1
64179: ARRAY
64180: PUSH
64181: LD_INT 1
64183: ARRAY
64184: PUSH
64185: LD_STRING M
64187: NONEQUAL
64188: IFFALSE 64192
// exit ;
64190: GO 64258
// x := task [ 1 ] [ 2 ] ;
64192: LD_ADDR_VAR 0 5
64196: PUSH
64197: LD_VAR 0 7
64201: PUSH
64202: LD_INT 1
64204: ARRAY
64205: PUSH
64206: LD_INT 2
64208: ARRAY
64209: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64210: LD_ADDR_VAR 0 6
64214: PUSH
64215: LD_VAR 0 7
64219: PUSH
64220: LD_INT 1
64222: ARRAY
64223: PUSH
64224: LD_INT 3
64226: ARRAY
64227: ST_TO_ADDR
// if InArea ( x , y , area ) then
64228: LD_VAR 0 5
64232: PPUSH
64233: LD_VAR 0 6
64237: PPUSH
64238: LD_VAR 0 2
64242: PPUSH
64243: CALL_OW 309
64247: IFFALSE 64258
// ComStop ( unit ) ;
64249: LD_VAR 0 1
64253: PPUSH
64254: CALL_OW 141
// end ;
64258: LD_VAR 0 4
64262: RET
// export function Abs ( value ) ; begin
64263: LD_INT 0
64265: PPUSH
// result := value ;
64266: LD_ADDR_VAR 0 2
64270: PUSH
64271: LD_VAR 0 1
64275: ST_TO_ADDR
// if value < 0 then
64276: LD_VAR 0 1
64280: PUSH
64281: LD_INT 0
64283: LESS
64284: IFFALSE 64301
// result := value * - 1 ;
64286: LD_ADDR_VAR 0 2
64290: PUSH
64291: LD_VAR 0 1
64295: PUSH
64296: LD_INT 1
64298: NEG
64299: MUL
64300: ST_TO_ADDR
// end ;
64301: LD_VAR 0 2
64305: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64306: LD_INT 0
64308: PPUSH
64309: PPUSH
64310: PPUSH
64311: PPUSH
64312: PPUSH
64313: PPUSH
64314: PPUSH
64315: PPUSH
// if not unit or not building then
64316: LD_VAR 0 1
64320: NOT
64321: PUSH
64322: LD_VAR 0 2
64326: NOT
64327: OR
64328: IFFALSE 64332
// exit ;
64330: GO 64558
// x := GetX ( building ) ;
64332: LD_ADDR_VAR 0 4
64336: PUSH
64337: LD_VAR 0 2
64341: PPUSH
64342: CALL_OW 250
64346: ST_TO_ADDR
// y := GetY ( building ) ;
64347: LD_ADDR_VAR 0 6
64351: PUSH
64352: LD_VAR 0 2
64356: PPUSH
64357: CALL_OW 251
64361: ST_TO_ADDR
// d := GetDir ( building ) ;
64362: LD_ADDR_VAR 0 8
64366: PUSH
64367: LD_VAR 0 2
64371: PPUSH
64372: CALL_OW 254
64376: ST_TO_ADDR
// r := 4 ;
64377: LD_ADDR_VAR 0 9
64381: PUSH
64382: LD_INT 4
64384: ST_TO_ADDR
// for i := 1 to 5 do
64385: LD_ADDR_VAR 0 10
64389: PUSH
64390: DOUBLE
64391: LD_INT 1
64393: DEC
64394: ST_TO_ADDR
64395: LD_INT 5
64397: PUSH
64398: FOR_TO
64399: IFFALSE 64556
// begin _x := ShiftX ( x , d , r + i ) ;
64401: LD_ADDR_VAR 0 5
64405: PUSH
64406: LD_VAR 0 4
64410: PPUSH
64411: LD_VAR 0 8
64415: PPUSH
64416: LD_VAR 0 9
64420: PUSH
64421: LD_VAR 0 10
64425: PLUS
64426: PPUSH
64427: CALL_OW 272
64431: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64432: LD_ADDR_VAR 0 7
64436: PUSH
64437: LD_VAR 0 6
64441: PPUSH
64442: LD_VAR 0 8
64446: PPUSH
64447: LD_VAR 0 9
64451: PUSH
64452: LD_VAR 0 10
64456: PLUS
64457: PPUSH
64458: CALL_OW 273
64462: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64463: LD_VAR 0 5
64467: PPUSH
64468: LD_VAR 0 7
64472: PPUSH
64473: CALL_OW 488
64477: PUSH
64478: LD_VAR 0 5
64482: PPUSH
64483: LD_VAR 0 7
64487: PPUSH
64488: CALL_OW 428
64492: PPUSH
64493: CALL_OW 247
64497: PUSH
64498: LD_INT 3
64500: PUSH
64501: LD_INT 2
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: IN
64508: NOT
64509: AND
64510: IFFALSE 64554
// begin ComMoveXY ( unit , _x , _y ) ;
64512: LD_VAR 0 1
64516: PPUSH
64517: LD_VAR 0 5
64521: PPUSH
64522: LD_VAR 0 7
64526: PPUSH
64527: CALL_OW 111
// result := [ _x , _y ] ;
64531: LD_ADDR_VAR 0 3
64535: PUSH
64536: LD_VAR 0 5
64540: PUSH
64541: LD_VAR 0 7
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: ST_TO_ADDR
// exit ;
64550: POP
64551: POP
64552: GO 64558
// end ; end ;
64554: GO 64398
64556: POP
64557: POP
// end ;
64558: LD_VAR 0 3
64562: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64563: LD_INT 0
64565: PPUSH
64566: PPUSH
64567: PPUSH
// result := 0 ;
64568: LD_ADDR_VAR 0 3
64572: PUSH
64573: LD_INT 0
64575: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64576: LD_VAR 0 1
64580: PUSH
64581: LD_INT 0
64583: LESS
64584: PUSH
64585: LD_VAR 0 1
64589: PUSH
64590: LD_INT 8
64592: GREATER
64593: OR
64594: PUSH
64595: LD_VAR 0 2
64599: PUSH
64600: LD_INT 0
64602: LESS
64603: OR
64604: PUSH
64605: LD_VAR 0 2
64609: PUSH
64610: LD_INT 8
64612: GREATER
64613: OR
64614: IFFALSE 64618
// exit ;
64616: GO 64693
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64618: LD_ADDR_VAR 0 4
64622: PUSH
64623: LD_INT 22
64625: PUSH
64626: LD_VAR 0 2
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PPUSH
64635: CALL_OW 69
64639: PUSH
64640: FOR_IN
64641: IFFALSE 64691
// begin un := UnitShoot ( i ) ;
64643: LD_ADDR_VAR 0 5
64647: PUSH
64648: LD_VAR 0 4
64652: PPUSH
64653: CALL_OW 504
64657: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64658: LD_VAR 0 5
64662: PPUSH
64663: CALL_OW 255
64667: PUSH
64668: LD_VAR 0 1
64672: EQUAL
64673: IFFALSE 64689
// begin result := un ;
64675: LD_ADDR_VAR 0 3
64679: PUSH
64680: LD_VAR 0 5
64684: ST_TO_ADDR
// exit ;
64685: POP
64686: POP
64687: GO 64693
// end ; end ;
64689: GO 64640
64691: POP
64692: POP
// end ;
64693: LD_VAR 0 3
64697: RET
// export function GetCargoBay ( units ) ; begin
64698: LD_INT 0
64700: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64701: LD_ADDR_VAR 0 2
64705: PUSH
64706: LD_VAR 0 1
64710: PPUSH
64711: LD_INT 2
64713: PUSH
64714: LD_INT 34
64716: PUSH
64717: LD_INT 12
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PUSH
64724: LD_INT 34
64726: PUSH
64727: LD_INT 51
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: LD_INT 34
64736: PUSH
64737: LD_INT 32
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 34
64746: PUSH
64747: LD_INT 89
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: PPUSH
64761: CALL_OW 72
64765: ST_TO_ADDR
// end ;
64766: LD_VAR 0 2
64770: RET
// export function Negate ( value ) ; begin
64771: LD_INT 0
64773: PPUSH
// result := not value ;
64774: LD_ADDR_VAR 0 2
64778: PUSH
64779: LD_VAR 0 1
64783: NOT
64784: ST_TO_ADDR
// end ;
64785: LD_VAR 0 2
64789: RET
// export function Inc ( value ) ; begin
64790: LD_INT 0
64792: PPUSH
// result := value + 1 ;
64793: LD_ADDR_VAR 0 2
64797: PUSH
64798: LD_VAR 0 1
64802: PUSH
64803: LD_INT 1
64805: PLUS
64806: ST_TO_ADDR
// end ;
64807: LD_VAR 0 2
64811: RET
// export function Dec ( value ) ; begin
64812: LD_INT 0
64814: PPUSH
// result := value - 1 ;
64815: LD_ADDR_VAR 0 2
64819: PUSH
64820: LD_VAR 0 1
64824: PUSH
64825: LD_INT 1
64827: MINUS
64828: ST_TO_ADDR
// end ;
64829: LD_VAR 0 2
64833: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64834: LD_INT 0
64836: PPUSH
64837: PPUSH
64838: PPUSH
64839: PPUSH
64840: PPUSH
64841: PPUSH
64842: PPUSH
64843: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64844: LD_VAR 0 1
64848: PPUSH
64849: LD_VAR 0 2
64853: PPUSH
64854: CALL_OW 488
64858: NOT
64859: PUSH
64860: LD_VAR 0 3
64864: PPUSH
64865: LD_VAR 0 4
64869: PPUSH
64870: CALL_OW 488
64874: NOT
64875: OR
64876: IFFALSE 64889
// begin result := - 1 ;
64878: LD_ADDR_VAR 0 5
64882: PUSH
64883: LD_INT 1
64885: NEG
64886: ST_TO_ADDR
// exit ;
64887: GO 65124
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64889: LD_ADDR_VAR 0 12
64893: PUSH
64894: LD_VAR 0 1
64898: PPUSH
64899: LD_VAR 0 2
64903: PPUSH
64904: LD_VAR 0 3
64908: PPUSH
64909: LD_VAR 0 4
64913: PPUSH
64914: CALL 63974 0 4
64918: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64919: LD_ADDR_VAR 0 11
64923: PUSH
64924: LD_VAR 0 1
64928: PPUSH
64929: LD_VAR 0 2
64933: PPUSH
64934: LD_VAR 0 12
64938: PUSH
64939: LD_INT 1
64941: ARRAY
64942: PPUSH
64943: LD_VAR 0 12
64947: PUSH
64948: LD_INT 2
64950: ARRAY
64951: PPUSH
64952: CALL_OW 298
64956: ST_TO_ADDR
// distance := 9999 ;
64957: LD_ADDR_VAR 0 10
64961: PUSH
64962: LD_INT 9999
64964: ST_TO_ADDR
// for i := 0 to 5 do
64965: LD_ADDR_VAR 0 6
64969: PUSH
64970: DOUBLE
64971: LD_INT 0
64973: DEC
64974: ST_TO_ADDR
64975: LD_INT 5
64977: PUSH
64978: FOR_TO
64979: IFFALSE 65122
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64981: LD_ADDR_VAR 0 7
64985: PUSH
64986: LD_VAR 0 1
64990: PPUSH
64991: LD_VAR 0 6
64995: PPUSH
64996: LD_VAR 0 11
65000: PPUSH
65001: CALL_OW 272
65005: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
65006: LD_ADDR_VAR 0 8
65010: PUSH
65011: LD_VAR 0 2
65015: PPUSH
65016: LD_VAR 0 6
65020: PPUSH
65021: LD_VAR 0 11
65025: PPUSH
65026: CALL_OW 273
65030: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65031: LD_VAR 0 7
65035: PPUSH
65036: LD_VAR 0 8
65040: PPUSH
65041: CALL_OW 488
65045: NOT
65046: IFFALSE 65050
// continue ;
65048: GO 64978
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65050: LD_ADDR_VAR 0 9
65054: PUSH
65055: LD_VAR 0 12
65059: PUSH
65060: LD_INT 1
65062: ARRAY
65063: PPUSH
65064: LD_VAR 0 12
65068: PUSH
65069: LD_INT 2
65071: ARRAY
65072: PPUSH
65073: LD_VAR 0 7
65077: PPUSH
65078: LD_VAR 0 8
65082: PPUSH
65083: CALL_OW 298
65087: ST_TO_ADDR
// if tmp < distance then
65088: LD_VAR 0 9
65092: PUSH
65093: LD_VAR 0 10
65097: LESS
65098: IFFALSE 65120
// begin result := i ;
65100: LD_ADDR_VAR 0 5
65104: PUSH
65105: LD_VAR 0 6
65109: ST_TO_ADDR
// distance := tmp ;
65110: LD_ADDR_VAR 0 10
65114: PUSH
65115: LD_VAR 0 9
65119: ST_TO_ADDR
// end ; end ;
65120: GO 64978
65122: POP
65123: POP
// end ;
65124: LD_VAR 0 5
65128: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65129: LD_INT 0
65131: PPUSH
65132: PPUSH
// if not driver or not IsInUnit ( driver ) then
65133: LD_VAR 0 1
65137: NOT
65138: PUSH
65139: LD_VAR 0 1
65143: PPUSH
65144: CALL_OW 310
65148: NOT
65149: OR
65150: IFFALSE 65154
// exit ;
65152: GO 65244
// vehicle := IsInUnit ( driver ) ;
65154: LD_ADDR_VAR 0 3
65158: PUSH
65159: LD_VAR 0 1
65163: PPUSH
65164: CALL_OW 310
65168: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65169: LD_VAR 0 1
65173: PPUSH
65174: LD_STRING \
65176: PUSH
65177: LD_INT 0
65179: PUSH
65180: LD_INT 0
65182: PUSH
65183: LD_INT 0
65185: PUSH
65186: LD_INT 0
65188: PUSH
65189: LD_INT 0
65191: PUSH
65192: LD_INT 0
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: PUSH
65204: LD_STRING E
65206: PUSH
65207: LD_INT 0
65209: PUSH
65210: LD_INT 0
65212: PUSH
65213: LD_VAR 0 3
65217: PUSH
65218: LD_INT 0
65220: PUSH
65221: LD_INT 0
65223: PUSH
65224: LD_INT 0
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: LIST
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: PPUSH
65240: CALL_OW 446
// end ;
65244: LD_VAR 0 2
65248: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65249: LD_INT 0
65251: PPUSH
65252: PPUSH
// if not driver or not IsInUnit ( driver ) then
65253: LD_VAR 0 1
65257: NOT
65258: PUSH
65259: LD_VAR 0 1
65263: PPUSH
65264: CALL_OW 310
65268: NOT
65269: OR
65270: IFFALSE 65274
// exit ;
65272: GO 65364
// vehicle := IsInUnit ( driver ) ;
65274: LD_ADDR_VAR 0 3
65278: PUSH
65279: LD_VAR 0 1
65283: PPUSH
65284: CALL_OW 310
65288: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65289: LD_VAR 0 1
65293: PPUSH
65294: LD_STRING \
65296: PUSH
65297: LD_INT 0
65299: PUSH
65300: LD_INT 0
65302: PUSH
65303: LD_INT 0
65305: PUSH
65306: LD_INT 0
65308: PUSH
65309: LD_INT 0
65311: PUSH
65312: LD_INT 0
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: PUSH
65324: LD_STRING E
65326: PUSH
65327: LD_INT 0
65329: PUSH
65330: LD_INT 0
65332: PUSH
65333: LD_VAR 0 3
65337: PUSH
65338: LD_INT 0
65340: PUSH
65341: LD_INT 0
65343: PUSH
65344: LD_INT 0
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PPUSH
65360: CALL_OW 447
// end ;
65364: LD_VAR 0 2
65368: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65369: LD_INT 0
65371: PPUSH
65372: PPUSH
65373: PPUSH
// tmp := [ ] ;
65374: LD_ADDR_VAR 0 5
65378: PUSH
65379: EMPTY
65380: ST_TO_ADDR
// for i in units do
65381: LD_ADDR_VAR 0 4
65385: PUSH
65386: LD_VAR 0 1
65390: PUSH
65391: FOR_IN
65392: IFFALSE 65430
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65394: LD_ADDR_VAR 0 5
65398: PUSH
65399: LD_VAR 0 5
65403: PPUSH
65404: LD_VAR 0 5
65408: PUSH
65409: LD_INT 1
65411: PLUS
65412: PPUSH
65413: LD_VAR 0 4
65417: PPUSH
65418: CALL_OW 256
65422: PPUSH
65423: CALL_OW 2
65427: ST_TO_ADDR
65428: GO 65391
65430: POP
65431: POP
// if not tmp then
65432: LD_VAR 0 5
65436: NOT
65437: IFFALSE 65441
// exit ;
65439: GO 65489
// if asc then
65441: LD_VAR 0 2
65445: IFFALSE 65469
// result := SortListByListAsc ( units , tmp ) else
65447: LD_ADDR_VAR 0 3
65451: PUSH
65452: LD_VAR 0 1
65456: PPUSH
65457: LD_VAR 0 5
65461: PPUSH
65462: CALL_OW 76
65466: ST_TO_ADDR
65467: GO 65489
// result := SortListByListDesc ( units , tmp ) ;
65469: LD_ADDR_VAR 0 3
65473: PUSH
65474: LD_VAR 0 1
65478: PPUSH
65479: LD_VAR 0 5
65483: PPUSH
65484: CALL_OW 77
65488: ST_TO_ADDR
// end ;
65489: LD_VAR 0 3
65493: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65494: LD_INT 0
65496: PPUSH
65497: PPUSH
// task := GetTaskList ( mech ) ;
65498: LD_ADDR_VAR 0 4
65502: PUSH
65503: LD_VAR 0 1
65507: PPUSH
65508: CALL_OW 437
65512: ST_TO_ADDR
// if not task then
65513: LD_VAR 0 4
65517: NOT
65518: IFFALSE 65522
// exit ;
65520: GO 65564
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65522: LD_ADDR_VAR 0 3
65526: PUSH
65527: LD_VAR 0 4
65531: PUSH
65532: LD_INT 1
65534: ARRAY
65535: PUSH
65536: LD_INT 1
65538: ARRAY
65539: PUSH
65540: LD_STRING r
65542: EQUAL
65543: PUSH
65544: LD_VAR 0 4
65548: PUSH
65549: LD_INT 1
65551: ARRAY
65552: PUSH
65553: LD_INT 4
65555: ARRAY
65556: PUSH
65557: LD_VAR 0 2
65561: EQUAL
65562: AND
65563: ST_TO_ADDR
// end ;
65564: LD_VAR 0 3
65568: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65569: LD_INT 0
65571: PPUSH
// SetDir ( unit , d ) ;
65572: LD_VAR 0 1
65576: PPUSH
65577: LD_VAR 0 4
65581: PPUSH
65582: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65586: LD_VAR 0 1
65590: PPUSH
65591: LD_VAR 0 2
65595: PPUSH
65596: LD_VAR 0 3
65600: PPUSH
65601: LD_VAR 0 5
65605: PPUSH
65606: CALL_OW 48
// end ;
65610: LD_VAR 0 6
65614: RET
// export function ToNaturalNumber ( number ) ; begin
65615: LD_INT 0
65617: PPUSH
// result := number div 1 ;
65618: LD_ADDR_VAR 0 2
65622: PUSH
65623: LD_VAR 0 1
65627: PUSH
65628: LD_INT 1
65630: DIV
65631: ST_TO_ADDR
// if number < 0 then
65632: LD_VAR 0 1
65636: PUSH
65637: LD_INT 0
65639: LESS
65640: IFFALSE 65650
// result := 0 ;
65642: LD_ADDR_VAR 0 2
65646: PUSH
65647: LD_INT 0
65649: ST_TO_ADDR
// end ;
65650: LD_VAR 0 2
65654: RET
// export function SortByClass ( units , class ) ; var un ; begin
65655: LD_INT 0
65657: PPUSH
65658: PPUSH
// if not units or not class then
65659: LD_VAR 0 1
65663: NOT
65664: PUSH
65665: LD_VAR 0 2
65669: NOT
65670: OR
65671: IFFALSE 65675
// exit ;
65673: GO 65770
// result := [ ] ;
65675: LD_ADDR_VAR 0 3
65679: PUSH
65680: EMPTY
65681: ST_TO_ADDR
// for un in units do
65682: LD_ADDR_VAR 0 4
65686: PUSH
65687: LD_VAR 0 1
65691: PUSH
65692: FOR_IN
65693: IFFALSE 65768
// if GetClass ( un ) = class then
65695: LD_VAR 0 4
65699: PPUSH
65700: CALL_OW 257
65704: PUSH
65705: LD_VAR 0 2
65709: EQUAL
65710: IFFALSE 65737
// result := Insert ( result , 1 , un ) else
65712: LD_ADDR_VAR 0 3
65716: PUSH
65717: LD_VAR 0 3
65721: PPUSH
65722: LD_INT 1
65724: PPUSH
65725: LD_VAR 0 4
65729: PPUSH
65730: CALL_OW 2
65734: ST_TO_ADDR
65735: GO 65766
// result := Replace ( result , result + 1 , un ) ;
65737: LD_ADDR_VAR 0 3
65741: PUSH
65742: LD_VAR 0 3
65746: PPUSH
65747: LD_VAR 0 3
65751: PUSH
65752: LD_INT 1
65754: PLUS
65755: PPUSH
65756: LD_VAR 0 4
65760: PPUSH
65761: CALL_OW 1
65765: ST_TO_ADDR
65766: GO 65692
65768: POP
65769: POP
// end ;
65770: LD_VAR 0 3
65774: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65775: LD_INT 0
65777: PPUSH
65778: PPUSH
65779: PPUSH
65780: PPUSH
65781: PPUSH
65782: PPUSH
65783: PPUSH
// result := [ ] ;
65784: LD_ADDR_VAR 0 4
65788: PUSH
65789: EMPTY
65790: ST_TO_ADDR
// if x - r < 0 then
65791: LD_VAR 0 1
65795: PUSH
65796: LD_VAR 0 3
65800: MINUS
65801: PUSH
65802: LD_INT 0
65804: LESS
65805: IFFALSE 65817
// min_x := 0 else
65807: LD_ADDR_VAR 0 8
65811: PUSH
65812: LD_INT 0
65814: ST_TO_ADDR
65815: GO 65833
// min_x := x - r ;
65817: LD_ADDR_VAR 0 8
65821: PUSH
65822: LD_VAR 0 1
65826: PUSH
65827: LD_VAR 0 3
65831: MINUS
65832: ST_TO_ADDR
// if y - r < 0 then
65833: LD_VAR 0 2
65837: PUSH
65838: LD_VAR 0 3
65842: MINUS
65843: PUSH
65844: LD_INT 0
65846: LESS
65847: IFFALSE 65859
// min_y := 0 else
65849: LD_ADDR_VAR 0 7
65853: PUSH
65854: LD_INT 0
65856: ST_TO_ADDR
65857: GO 65875
// min_y := y - r ;
65859: LD_ADDR_VAR 0 7
65863: PUSH
65864: LD_VAR 0 2
65868: PUSH
65869: LD_VAR 0 3
65873: MINUS
65874: ST_TO_ADDR
// max_x := x + r ;
65875: LD_ADDR_VAR 0 9
65879: PUSH
65880: LD_VAR 0 1
65884: PUSH
65885: LD_VAR 0 3
65889: PLUS
65890: ST_TO_ADDR
// max_y := y + r ;
65891: LD_ADDR_VAR 0 10
65895: PUSH
65896: LD_VAR 0 2
65900: PUSH
65901: LD_VAR 0 3
65905: PLUS
65906: ST_TO_ADDR
// for _x = min_x to max_x do
65907: LD_ADDR_VAR 0 5
65911: PUSH
65912: DOUBLE
65913: LD_VAR 0 8
65917: DEC
65918: ST_TO_ADDR
65919: LD_VAR 0 9
65923: PUSH
65924: FOR_TO
65925: IFFALSE 66026
// for _y = min_y to max_y do
65927: LD_ADDR_VAR 0 6
65931: PUSH
65932: DOUBLE
65933: LD_VAR 0 7
65937: DEC
65938: ST_TO_ADDR
65939: LD_VAR 0 10
65943: PUSH
65944: FOR_TO
65945: IFFALSE 66022
// begin if not ValidHex ( _x , _y ) then
65947: LD_VAR 0 5
65951: PPUSH
65952: LD_VAR 0 6
65956: PPUSH
65957: CALL_OW 488
65961: NOT
65962: IFFALSE 65966
// continue ;
65964: GO 65944
// if GetResourceTypeXY ( _x , _y ) then
65966: LD_VAR 0 5
65970: PPUSH
65971: LD_VAR 0 6
65975: PPUSH
65976: CALL_OW 283
65980: IFFALSE 66020
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65982: LD_ADDR_VAR 0 4
65986: PUSH
65987: LD_VAR 0 4
65991: PPUSH
65992: LD_VAR 0 4
65996: PUSH
65997: LD_INT 1
65999: PLUS
66000: PPUSH
66001: LD_VAR 0 5
66005: PUSH
66006: LD_VAR 0 6
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PPUSH
66015: CALL_OW 1
66019: ST_TO_ADDR
// end ;
66020: GO 65944
66022: POP
66023: POP
66024: GO 65924
66026: POP
66027: POP
// end ;
66028: LD_VAR 0 4
66032: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
66033: LD_INT 0
66035: PPUSH
66036: PPUSH
66037: PPUSH
66038: PPUSH
66039: PPUSH
66040: PPUSH
66041: PPUSH
66042: PPUSH
// if not units then
66043: LD_VAR 0 1
66047: NOT
66048: IFFALSE 66052
// exit ;
66050: GO 66576
// result := UnitFilter ( units , [ f_ok ] ) ;
66052: LD_ADDR_VAR 0 3
66056: PUSH
66057: LD_VAR 0 1
66061: PPUSH
66062: LD_INT 50
66064: PUSH
66065: EMPTY
66066: LIST
66067: PPUSH
66068: CALL_OW 72
66072: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66073: LD_ADDR_VAR 0 8
66077: PUSH
66078: LD_VAR 0 1
66082: PUSH
66083: LD_INT 1
66085: ARRAY
66086: PPUSH
66087: CALL_OW 255
66091: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
66092: LD_ADDR_VAR 0 10
66096: PUSH
66097: LD_INT 29
66099: PUSH
66100: LD_INT 91
66102: PUSH
66103: LD_INT 49
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: LIST
66110: ST_TO_ADDR
// if not result then
66111: LD_VAR 0 3
66115: NOT
66116: IFFALSE 66120
// exit ;
66118: GO 66576
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66120: LD_ADDR_VAR 0 5
66124: PUSH
66125: LD_INT 81
66127: PUSH
66128: LD_VAR 0 8
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PPUSH
66137: CALL_OW 69
66141: ST_TO_ADDR
// for i in result do
66142: LD_ADDR_VAR 0 4
66146: PUSH
66147: LD_VAR 0 3
66151: PUSH
66152: FOR_IN
66153: IFFALSE 66574
// begin tag := GetTag ( i ) + 1 ;
66155: LD_ADDR_VAR 0 9
66159: PUSH
66160: LD_VAR 0 4
66164: PPUSH
66165: CALL_OW 110
66169: PUSH
66170: LD_INT 1
66172: PLUS
66173: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
66174: LD_ADDR_VAR 0 7
66178: PUSH
66179: LD_VAR 0 4
66183: PPUSH
66184: CALL_OW 250
66188: PPUSH
66189: LD_VAR 0 4
66193: PPUSH
66194: CALL_OW 251
66198: PPUSH
66199: LD_INT 6
66201: PPUSH
66202: CALL 65775 0 3
66206: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
66207: LD_VAR 0 4
66211: PPUSH
66212: CALL_OW 247
66216: PUSH
66217: LD_INT 2
66219: EQUAL
66220: PUSH
66221: LD_VAR 0 7
66225: AND
66226: PUSH
66227: LD_VAR 0 4
66231: PPUSH
66232: CALL_OW 264
66236: PUSH
66237: LD_VAR 0 10
66241: IN
66242: NOT
66243: AND
66244: IFFALSE 66283
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66246: LD_VAR 0 4
66250: PPUSH
66251: LD_VAR 0 7
66255: PUSH
66256: LD_INT 1
66258: ARRAY
66259: PUSH
66260: LD_INT 1
66262: ARRAY
66263: PPUSH
66264: LD_VAR 0 7
66268: PUSH
66269: LD_INT 1
66271: ARRAY
66272: PUSH
66273: LD_INT 2
66275: ARRAY
66276: PPUSH
66277: CALL_OW 116
66281: GO 66572
// if path > tag then
66283: LD_VAR 0 2
66287: PUSH
66288: LD_VAR 0 9
66292: GREATER
66293: IFFALSE 66501
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
66295: LD_ADDR_VAR 0 6
66299: PUSH
66300: LD_VAR 0 5
66304: PPUSH
66305: LD_INT 91
66307: PUSH
66308: LD_VAR 0 4
66312: PUSH
66313: LD_INT 8
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: LIST
66320: PPUSH
66321: CALL_OW 72
66325: ST_TO_ADDR
// if nearEnemy then
66326: LD_VAR 0 6
66330: IFFALSE 66399
// begin if GetWeapon ( i ) = ru_time_lapser then
66332: LD_VAR 0 4
66336: PPUSH
66337: CALL_OW 264
66341: PUSH
66342: LD_INT 49
66344: EQUAL
66345: IFFALSE 66373
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
66347: LD_VAR 0 4
66351: PPUSH
66352: LD_VAR 0 6
66356: PPUSH
66357: LD_VAR 0 4
66361: PPUSH
66362: CALL_OW 74
66366: PPUSH
66367: CALL_OW 112
66371: GO 66397
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
66373: LD_VAR 0 4
66377: PPUSH
66378: LD_VAR 0 6
66382: PPUSH
66383: LD_VAR 0 4
66387: PPUSH
66388: CALL_OW 74
66392: PPUSH
66393: CALL_OW 115
// end else
66397: GO 66499
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66399: LD_VAR 0 4
66403: PPUSH
66404: LD_VAR 0 2
66408: PUSH
66409: LD_VAR 0 9
66413: ARRAY
66414: PUSH
66415: LD_INT 1
66417: ARRAY
66418: PPUSH
66419: LD_VAR 0 2
66423: PUSH
66424: LD_VAR 0 9
66428: ARRAY
66429: PUSH
66430: LD_INT 2
66432: ARRAY
66433: PPUSH
66434: CALL_OW 297
66438: PUSH
66439: LD_INT 6
66441: GREATER
66442: IFFALSE 66485
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66444: LD_VAR 0 4
66448: PPUSH
66449: LD_VAR 0 2
66453: PUSH
66454: LD_VAR 0 9
66458: ARRAY
66459: PUSH
66460: LD_INT 1
66462: ARRAY
66463: PPUSH
66464: LD_VAR 0 2
66468: PUSH
66469: LD_VAR 0 9
66473: ARRAY
66474: PUSH
66475: LD_INT 2
66477: ARRAY
66478: PPUSH
66479: CALL_OW 114
66483: GO 66499
// SetTag ( i , tag ) ;
66485: LD_VAR 0 4
66489: PPUSH
66490: LD_VAR 0 9
66494: PPUSH
66495: CALL_OW 109
// end else
66499: GO 66572
// if enemy then
66501: LD_VAR 0 5
66505: IFFALSE 66572
// begin if GetWeapon ( i ) = ru_time_lapser then
66507: LD_VAR 0 4
66511: PPUSH
66512: CALL_OW 264
66516: PUSH
66517: LD_INT 49
66519: EQUAL
66520: IFFALSE 66548
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66522: LD_VAR 0 4
66526: PPUSH
66527: LD_VAR 0 5
66531: PPUSH
66532: LD_VAR 0 4
66536: PPUSH
66537: CALL_OW 74
66541: PPUSH
66542: CALL_OW 112
66546: GO 66572
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66548: LD_VAR 0 4
66552: PPUSH
66553: LD_VAR 0 5
66557: PPUSH
66558: LD_VAR 0 4
66562: PPUSH
66563: CALL_OW 74
66567: PPUSH
66568: CALL_OW 115
// end ; end ;
66572: GO 66152
66574: POP
66575: POP
// end ;
66576: LD_VAR 0 3
66580: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66581: LD_INT 0
66583: PPUSH
66584: PPUSH
66585: PPUSH
// if not unit or IsInUnit ( unit ) then
66586: LD_VAR 0 1
66590: NOT
66591: PUSH
66592: LD_VAR 0 1
66596: PPUSH
66597: CALL_OW 310
66601: OR
66602: IFFALSE 66606
// exit ;
66604: GO 66697
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66606: LD_ADDR_VAR 0 4
66610: PUSH
66611: LD_VAR 0 1
66615: PPUSH
66616: CALL_OW 250
66620: PPUSH
66621: LD_VAR 0 2
66625: PPUSH
66626: LD_INT 1
66628: PPUSH
66629: CALL_OW 272
66633: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66634: LD_ADDR_VAR 0 5
66638: PUSH
66639: LD_VAR 0 1
66643: PPUSH
66644: CALL_OW 251
66648: PPUSH
66649: LD_VAR 0 2
66653: PPUSH
66654: LD_INT 1
66656: PPUSH
66657: CALL_OW 273
66661: ST_TO_ADDR
// if ValidHex ( x , y ) then
66662: LD_VAR 0 4
66666: PPUSH
66667: LD_VAR 0 5
66671: PPUSH
66672: CALL_OW 488
66676: IFFALSE 66697
// ComTurnXY ( unit , x , y ) ;
66678: LD_VAR 0 1
66682: PPUSH
66683: LD_VAR 0 4
66687: PPUSH
66688: LD_VAR 0 5
66692: PPUSH
66693: CALL_OW 118
// end ;
66697: LD_VAR 0 3
66701: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66702: LD_INT 0
66704: PPUSH
66705: PPUSH
// result := false ;
66706: LD_ADDR_VAR 0 3
66710: PUSH
66711: LD_INT 0
66713: ST_TO_ADDR
// if not units then
66714: LD_VAR 0 2
66718: NOT
66719: IFFALSE 66723
// exit ;
66721: GO 66768
// for i in units do
66723: LD_ADDR_VAR 0 4
66727: PUSH
66728: LD_VAR 0 2
66732: PUSH
66733: FOR_IN
66734: IFFALSE 66766
// if See ( side , i ) then
66736: LD_VAR 0 1
66740: PPUSH
66741: LD_VAR 0 4
66745: PPUSH
66746: CALL_OW 292
66750: IFFALSE 66764
// begin result := true ;
66752: LD_ADDR_VAR 0 3
66756: PUSH
66757: LD_INT 1
66759: ST_TO_ADDR
// exit ;
66760: POP
66761: POP
66762: GO 66768
// end ;
66764: GO 66733
66766: POP
66767: POP
// end ;
66768: LD_VAR 0 3
66772: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66773: LD_INT 0
66775: PPUSH
66776: PPUSH
66777: PPUSH
66778: PPUSH
// if not unit or not points then
66779: LD_VAR 0 1
66783: NOT
66784: PUSH
66785: LD_VAR 0 2
66789: NOT
66790: OR
66791: IFFALSE 66795
// exit ;
66793: GO 66885
// dist := 99999 ;
66795: LD_ADDR_VAR 0 5
66799: PUSH
66800: LD_INT 99999
66802: ST_TO_ADDR
// for i in points do
66803: LD_ADDR_VAR 0 4
66807: PUSH
66808: LD_VAR 0 2
66812: PUSH
66813: FOR_IN
66814: IFFALSE 66883
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66816: LD_ADDR_VAR 0 6
66820: PUSH
66821: LD_VAR 0 1
66825: PPUSH
66826: LD_VAR 0 4
66830: PUSH
66831: LD_INT 1
66833: ARRAY
66834: PPUSH
66835: LD_VAR 0 4
66839: PUSH
66840: LD_INT 2
66842: ARRAY
66843: PPUSH
66844: CALL_OW 297
66848: ST_TO_ADDR
// if tmpDist < dist then
66849: LD_VAR 0 6
66853: PUSH
66854: LD_VAR 0 5
66858: LESS
66859: IFFALSE 66881
// begin result := i ;
66861: LD_ADDR_VAR 0 3
66865: PUSH
66866: LD_VAR 0 4
66870: ST_TO_ADDR
// dist := tmpDist ;
66871: LD_ADDR_VAR 0 5
66875: PUSH
66876: LD_VAR 0 6
66880: ST_TO_ADDR
// end ; end ;
66881: GO 66813
66883: POP
66884: POP
// end ;
66885: LD_VAR 0 3
66889: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66890: LD_INT 0
66892: PPUSH
// uc_side := side ;
66893: LD_ADDR_OWVAR 20
66897: PUSH
66898: LD_VAR 0 1
66902: ST_TO_ADDR
// uc_nation := 3 ;
66903: LD_ADDR_OWVAR 21
66907: PUSH
66908: LD_INT 3
66910: ST_TO_ADDR
// vc_chassis := 25 ;
66911: LD_ADDR_OWVAR 37
66915: PUSH
66916: LD_INT 25
66918: ST_TO_ADDR
// vc_engine := engine_siberite ;
66919: LD_ADDR_OWVAR 39
66923: PUSH
66924: LD_INT 3
66926: ST_TO_ADDR
// vc_control := control_computer ;
66927: LD_ADDR_OWVAR 38
66931: PUSH
66932: LD_INT 3
66934: ST_TO_ADDR
// vc_weapon := 59 ;
66935: LD_ADDR_OWVAR 40
66939: PUSH
66940: LD_INT 59
66942: ST_TO_ADDR
// result := CreateVehicle ;
66943: LD_ADDR_VAR 0 5
66947: PUSH
66948: CALL_OW 45
66952: ST_TO_ADDR
// SetDir ( result , d ) ;
66953: LD_VAR 0 5
66957: PPUSH
66958: LD_VAR 0 4
66962: PPUSH
66963: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66967: LD_VAR 0 5
66971: PPUSH
66972: LD_VAR 0 2
66976: PPUSH
66977: LD_VAR 0 3
66981: PPUSH
66982: LD_INT 0
66984: PPUSH
66985: CALL_OW 48
// end ;
66989: LD_VAR 0 5
66993: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66994: LD_INT 0
66996: PPUSH
66997: PPUSH
66998: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66999: LD_ADDR_VAR 0 2
67003: PUSH
67004: LD_INT 0
67006: PUSH
67007: LD_INT 0
67009: PUSH
67010: LD_INT 0
67012: PUSH
67013: LD_INT 0
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
67022: LD_VAR 0 1
67026: NOT
67027: PUSH
67028: LD_VAR 0 1
67032: PPUSH
67033: CALL_OW 264
67037: PUSH
67038: LD_INT 12
67040: PUSH
67041: LD_INT 51
67043: PUSH
67044: LD_INT 32
67046: PUSH
67047: LD_INT 89
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: LIST
67054: LIST
67055: IN
67056: NOT
67057: OR
67058: IFFALSE 67062
// exit ;
67060: GO 67160
// for i := 1 to 3 do
67062: LD_ADDR_VAR 0 3
67066: PUSH
67067: DOUBLE
67068: LD_INT 1
67070: DEC
67071: ST_TO_ADDR
67072: LD_INT 3
67074: PUSH
67075: FOR_TO
67076: IFFALSE 67158
// begin tmp := GetCargo ( cargo , i ) ;
67078: LD_ADDR_VAR 0 4
67082: PUSH
67083: LD_VAR 0 1
67087: PPUSH
67088: LD_VAR 0 3
67092: PPUSH
67093: CALL_OW 289
67097: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
67098: LD_ADDR_VAR 0 2
67102: PUSH
67103: LD_VAR 0 2
67107: PPUSH
67108: LD_VAR 0 3
67112: PPUSH
67113: LD_VAR 0 4
67117: PPUSH
67118: CALL_OW 1
67122: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
67123: LD_ADDR_VAR 0 2
67127: PUSH
67128: LD_VAR 0 2
67132: PPUSH
67133: LD_INT 4
67135: PPUSH
67136: LD_VAR 0 2
67140: PUSH
67141: LD_INT 4
67143: ARRAY
67144: PUSH
67145: LD_VAR 0 4
67149: PLUS
67150: PPUSH
67151: CALL_OW 1
67155: ST_TO_ADDR
// end ;
67156: GO 67075
67158: POP
67159: POP
// end ;
67160: LD_VAR 0 2
67164: RET
// export function Length ( array ) ; begin
67165: LD_INT 0
67167: PPUSH
// result := array + 0 ;
67168: LD_ADDR_VAR 0 2
67172: PUSH
67173: LD_VAR 0 1
67177: PUSH
67178: LD_INT 0
67180: PLUS
67181: ST_TO_ADDR
// end ;
67182: LD_VAR 0 2
67186: RET
// export function PrepareArray ( array ) ; begin
67187: LD_INT 0
67189: PPUSH
// result := array diff 0 ;
67190: LD_ADDR_VAR 0 2
67194: PUSH
67195: LD_VAR 0 1
67199: PUSH
67200: LD_INT 0
67202: DIFF
67203: ST_TO_ADDR
// if not result [ 1 ] then
67204: LD_VAR 0 2
67208: PUSH
67209: LD_INT 1
67211: ARRAY
67212: NOT
67213: IFFALSE 67233
// result := Delete ( result , 1 ) ;
67215: LD_ADDR_VAR 0 2
67219: PUSH
67220: LD_VAR 0 2
67224: PPUSH
67225: LD_INT 1
67227: PPUSH
67228: CALL_OW 3
67232: ST_TO_ADDR
// end ;
67233: LD_VAR 0 2
67237: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
67238: LD_INT 0
67240: PPUSH
67241: PPUSH
67242: PPUSH
67243: PPUSH
// sibRocketRange := 25 ;
67244: LD_ADDR_VAR 0 6
67248: PUSH
67249: LD_INT 25
67251: ST_TO_ADDR
// result := false ;
67252: LD_ADDR_VAR 0 4
67256: PUSH
67257: LD_INT 0
67259: ST_TO_ADDR
// for i := 0 to 5 do
67260: LD_ADDR_VAR 0 5
67264: PUSH
67265: DOUBLE
67266: LD_INT 0
67268: DEC
67269: ST_TO_ADDR
67270: LD_INT 5
67272: PUSH
67273: FOR_TO
67274: IFFALSE 67341
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
67276: LD_VAR 0 1
67280: PPUSH
67281: LD_VAR 0 5
67285: PPUSH
67286: LD_VAR 0 6
67290: PPUSH
67291: CALL_OW 272
67295: PPUSH
67296: LD_VAR 0 2
67300: PPUSH
67301: LD_VAR 0 5
67305: PPUSH
67306: LD_VAR 0 6
67310: PPUSH
67311: CALL_OW 273
67315: PPUSH
67316: LD_VAR 0 3
67320: PPUSH
67321: CALL_OW 309
67325: IFFALSE 67339
// begin result := true ;
67327: LD_ADDR_VAR 0 4
67331: PUSH
67332: LD_INT 1
67334: ST_TO_ADDR
// exit ;
67335: POP
67336: POP
67337: GO 67343
// end ;
67339: GO 67273
67341: POP
67342: POP
// end ;
67343: LD_VAR 0 4
67347: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
67348: LD_INT 0
67350: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
67351: LD_VAR 0 1
67355: PPUSH
67356: LD_VAR 0 2
67360: PPUSH
67361: LD_INT 0
67363: PPUSH
67364: LD_INT 0
67366: PPUSH
67367: LD_INT 1
67369: PPUSH
67370: LD_INT 0
67372: PPUSH
67373: CALL_OW 587
// end ; end_of_file
67377: LD_VAR 0 3
67381: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67382: LD_VAR 0 1
67386: PPUSH
67387: LD_VAR 0 2
67391: PPUSH
67392: LD_VAR 0 3
67396: PPUSH
67397: LD_VAR 0 4
67401: PPUSH
67402: LD_VAR 0 5
67406: PPUSH
67407: LD_VAR 0 6
67411: PPUSH
67412: CALL 6033 0 6
// end ;
67416: PPOPN 6
67418: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
67419: LD_INT 0
67421: PPUSH
// begin if not units then
67422: LD_VAR 0 1
67426: NOT
67427: IFFALSE 67431
// exit ;
67429: GO 67431
// end ;
67431: PPOPN 7
67433: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
67434: CALL 5937 0 0
// end ; end_of_file
67438: PPOPN 1
67440: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67441: LD_VAR 0 1
67445: PUSH
67446: LD_INT 200
67448: DOUBLE
67449: GREATEREQUAL
67450: IFFALSE 67458
67452: LD_INT 299
67454: DOUBLE
67455: LESSEQUAL
67456: IFTRUE 67460
67458: GO 67492
67460: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67461: LD_VAR 0 1
67465: PPUSH
67466: LD_VAR 0 2
67470: PPUSH
67471: LD_VAR 0 3
67475: PPUSH
67476: LD_VAR 0 4
67480: PPUSH
67481: LD_VAR 0 5
67485: PPUSH
67486: CALL 22048 0 5
67490: GO 67569
67492: LD_INT 300
67494: DOUBLE
67495: GREATEREQUAL
67496: IFFALSE 67504
67498: LD_INT 399
67500: DOUBLE
67501: LESSEQUAL
67502: IFTRUE 67506
67504: GO 67568
67506: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67507: LD_VAR 0 1
67511: PPUSH
67512: LD_VAR 0 2
67516: PPUSH
67517: LD_VAR 0 3
67521: PPUSH
67522: LD_VAR 0 4
67526: PPUSH
67527: LD_VAR 0 5
67531: PPUSH
67532: LD_VAR 0 6
67536: PPUSH
67537: LD_VAR 0 7
67541: PPUSH
67542: LD_VAR 0 8
67546: PPUSH
67547: LD_VAR 0 9
67551: PPUSH
67552: LD_VAR 0 10
67556: PPUSH
67557: LD_VAR 0 11
67561: PPUSH
67562: CALL 18381 0 11
67566: GO 67569
67568: POP
// end ;
67569: PPOPN 11
67571: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67572: LD_VAR 0 1
67576: PPUSH
67577: LD_VAR 0 2
67581: PPUSH
67582: LD_VAR 0 3
67586: PPUSH
67587: LD_VAR 0 4
67591: PPUSH
67592: LD_VAR 0 5
67596: PPUSH
67597: CALL 21784 0 5
// end ;
67601: PPOPN 5
67603: END
