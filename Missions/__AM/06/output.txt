// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export selectedPeople ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect := 0 ;
  15: LD_ADDR_EXP 18
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene := 1 ;
  23: LD_ADDR_EXP 19
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans := [ ] ;
  31: LD_ADDR_EXP 12
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans := [ ] ;
  38: LD_ADDR_EXP 13
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles := [ ] ;
  45: LD_ADDR_EXP 14
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 11
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// resources := [ ] ;
  59: LD_ADDR_EXP 21
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// mission_prefix := 06_ ;
  66: LD_ADDR_EXP 22
  70: PUSH
  71: LD_STRING 06_
  73: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  74: LD_ADDR_EXP 23
  78: PUSH
  79: LD_STRING 05_
  81: ST_TO_ADDR
// CreateNature ;
  82: CALL 170 0 0
// PrepareDeltaBase ;
  86: CALL 2346 0 0
// LoadVehicles ;
  90: CALL 1458 0 0
// PrepareHeroes ;
  94: CALL 291 0 0
// PrepareRandoms ;
  98: CALL 1759 0 0
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 102: LD_ADDR_EXP 20
 106: PUSH
 107: LD_INT 22
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 2
 119: PUSH
 120: LD_INT 30
 122: PUSH
 123: LD_INT 6
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 30
 132: PUSH
 133: LD_INT 7
 135: PUSH
 136: EMPTY
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 30
 142: PUSH
 143: LD_INT 8
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: PPUSH
 160: CALL_OW 69
 164: ST_TO_ADDR
// Action ;
 165: CALL 3228 0 0
// end ;
 169: END
// export function CreateNature ; var i ; begin
 170: LD_INT 0
 172: PPUSH
 173: PPUSH
// uc_side := 0 ;
 174: LD_ADDR_OWVAR 20
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// uc_nation := 0 ;
 182: LD_ADDR_OWVAR 21
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// for i = 1 to 4 do
 190: LD_ADDR_VAR 0 2
 194: PUSH
 195: DOUBLE
 196: LD_INT 1
 198: DEC
 199: ST_TO_ADDR
 200: LD_INT 4
 202: PUSH
 203: FOR_TO
 204: IFFALSE 284
// begin hc_gallery :=  ;
 206: LD_ADDR_OWVAR 33
 210: PUSH
 211: LD_STRING 
 213: ST_TO_ADDR
// hc_name :=  ;
 214: LD_ADDR_OWVAR 26
 218: PUSH
 219: LD_STRING 
 221: ST_TO_ADDR
// hc_attr := [ rand ( 10 , 11 ) , rand ( 10 , 12 ) ] ;
 222: LD_ADDR_OWVAR 29
 226: PUSH
 227: LD_INT 10
 229: PPUSH
 230: LD_INT 11
 232: PPUSH
 233: CALL_OW 12
 237: PUSH
 238: LD_INT 10
 240: PPUSH
 241: LD_INT 12
 243: PPUSH
 244: CALL_OW 12
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: ST_TO_ADDR
// hc_class := class_apeman ;
 253: LD_ADDR_OWVAR 28
 257: PUSH
 258: LD_INT 12
 260: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 22 , 18 , 20 , false ) ;
 261: CALL_OW 44
 265: PPUSH
 266: LD_INT 22
 268: PPUSH
 269: LD_INT 18
 271: PPUSH
 272: LD_INT 20
 274: PPUSH
 275: LD_INT 0
 277: PPUSH
 278: CALL_OW 50
// end ;
 282: GO 203
 284: POP
 285: POP
// end ; end_of_file
 286: LD_VAR 0 1
 290: RET
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 291: LD_INT 0
 293: PPUSH
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 298: LD_ADDR_VAR 0 3
 302: PUSH
 303: LD_INT 22
 305: PUSH
 306: LD_INT 1
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: PUSH
 313: LD_INT 21
 315: PUSH
 316: LD_INT 3
 318: PUSH
 319: EMPTY
 320: LIST
 321: LIST
 322: PUSH
 323: LD_INT 30
 325: PUSH
 326: LD_INT 0
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: PUSH
 333: EMPTY
 334: LIST
 335: LIST
 336: LIST
 337: PPUSH
 338: CALL_OW 69
 342: ST_TO_ADDR
// if tmp then
 343: LD_VAR 0 3
 347: IFFALSE 365
// SetBName ( tmp [ 1 ] , delta ) ;
 349: LD_VAR 0 3
 353: PUSH
 354: LD_INT 1
 356: ARRAY
 357: PPUSH
 358: LD_STRING delta
 360: PPUSH
 361: CALL_OW 500
// uc_side := 1 ;
 365: LD_ADDR_OWVAR 20
 369: PUSH
 370: LD_INT 1
 372: ST_TO_ADDR
// uc_nation := 1 ;
 373: LD_ADDR_OWVAR 21
 377: PUSH
 378: LD_INT 1
 380: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 381: LD_ADDR_EXP 1
 385: PUSH
 386: LD_STRING JMM
 388: PPUSH
 389: LD_INT 1
 391: PPUSH
 392: LD_EXP 23
 396: PPUSH
 397: CALL 25692 0 3
 401: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 402: LD_ADDR_EXP 16
 406: PUSH
 407: LD_STRING Harisson
 409: PPUSH
 410: LD_INT 0
 412: PPUSH
 413: LD_STRING 
 415: PPUSH
 416: CALL 25692 0 3
 420: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 421: LD_EXP 1
 425: PPUSH
 426: LD_VAR 0 3
 430: PUSH
 431: LD_INT 1
 433: ARRAY
 434: PPUSH
 435: CALL_OW 250
 439: PPUSH
 440: LD_VAR 0 3
 444: PUSH
 445: LD_INT 1
 447: ARRAY
 448: PPUSH
 449: CALL_OW 251
 453: PPUSH
 454: LD_INT 5
 456: PPUSH
 457: LD_INT 0
 459: PPUSH
 460: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 464: LD_EXP 1
 468: PPUSH
 469: LD_INT 1
 471: PPUSH
 472: CALL_OW 336
// Gladstone := PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
 476: LD_ADDR_EXP 2
 480: PUSH
 481: LD_STRING Gladstone
 483: PPUSH
 484: LD_INT 1
 486: PPUSH
 487: LD_EXP 23
 491: PPUSH
 492: CALL 25692 0 3
 496: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 497: LD_EXP 2
 501: PPUSH
 502: LD_VAR 0 3
 506: PUSH
 507: LD_INT 1
 509: ARRAY
 510: PPUSH
 511: CALL_OW 250
 515: PPUSH
 516: LD_VAR 0 3
 520: PUSH
 521: LD_INT 1
 523: ARRAY
 524: PPUSH
 525: CALL_OW 251
 529: PPUSH
 530: LD_INT 5
 532: PPUSH
 533: LD_INT 0
 535: PPUSH
 536: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 540: LD_EXP 2
 544: PPUSH
 545: LD_INT 4
 547: PPUSH
 548: CALL_OW 336
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
 552: LD_ADDR_EXP 3
 556: PUSH
 557: LD_STRING Denis
 559: PPUSH
 560: LD_INT 1
 562: PPUSH
 563: LD_EXP 23
 567: PPUSH
 568: CALL 25692 0 3
 572: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 573: LD_EXP 3
 577: PPUSH
 578: LD_VAR 0 3
 582: PUSH
 583: LD_INT 1
 585: ARRAY
 586: PPUSH
 587: CALL_OW 250
 591: PPUSH
 592: LD_VAR 0 3
 596: PUSH
 597: LD_INT 1
 599: ARRAY
 600: PPUSH
 601: CALL_OW 251
 605: PPUSH
 606: LD_INT 5
 608: PPUSH
 609: LD_INT 0
 611: PPUSH
 612: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 616: LD_EXP 3
 620: PPUSH
 621: LD_INT 4
 623: PPUSH
 624: CALL_OW 336
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 628: LD_STRING FrankInDelta
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: CALL_OW 30
 638: PUSH
 639: LD_INT 1
 641: EQUAL
 642: IFFALSE 720
// begin Frank := PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 644: LD_ADDR_EXP 5
 648: PUSH
 649: LD_STRING Frank
 651: PPUSH
 652: LD_INT 1
 654: PPUSH
 655: LD_EXP 23
 659: PPUSH
 660: CALL 25692 0 3
 664: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 665: LD_EXP 5
 669: PPUSH
 670: LD_VAR 0 3
 674: PUSH
 675: LD_INT 1
 677: ARRAY
 678: PPUSH
 679: CALL_OW 250
 683: PPUSH
 684: LD_VAR 0 3
 688: PUSH
 689: LD_INT 1
 691: ARRAY
 692: PPUSH
 693: CALL_OW 251
 697: PPUSH
 698: LD_INT 5
 700: PPUSH
 701: LD_INT 0
 703: PPUSH
 704: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 708: LD_EXP 5
 712: PPUSH
 713: LD_INT 1
 715: PPUSH
 716: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 720: LD_STRING LisaInDelta
 722: PPUSH
 723: LD_INT 0
 725: PPUSH
 726: CALL_OW 30
 730: PUSH
 731: LD_INT 1
 733: EQUAL
 734: IFFALSE 812
// begin Lisa := PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 736: LD_ADDR_EXP 4
 740: PUSH
 741: LD_STRING Lisa
 743: PPUSH
 744: LD_INT 1
 746: PPUSH
 747: LD_EXP 23
 751: PPUSH
 752: CALL 25692 0 3
 756: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 757: LD_EXP 4
 761: PPUSH
 762: LD_VAR 0 3
 766: PUSH
 767: LD_INT 1
 769: ARRAY
 770: PPUSH
 771: CALL_OW 250
 775: PPUSH
 776: LD_VAR 0 3
 780: PUSH
 781: LD_INT 1
 783: ARRAY
 784: PPUSH
 785: CALL_OW 251
 789: PPUSH
 790: LD_INT 5
 792: PPUSH
 793: LD_INT 0
 795: PPUSH
 796: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 800: LD_EXP 4
 804: PPUSH
 805: LD_INT 1
 807: PPUSH
 808: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 812: LD_STRING BobbyInDelta
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: CALL_OW 30
 822: PUSH
 823: LD_INT 1
 825: EQUAL
 826: IFFALSE 904
// begin Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 828: LD_ADDR_EXP 6
 832: PUSH
 833: LD_STRING Bobby
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: LD_EXP 23
 843: PPUSH
 844: CALL 25692 0 3
 848: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 849: LD_EXP 6
 853: PPUSH
 854: LD_VAR 0 3
 858: PUSH
 859: LD_INT 1
 861: ARRAY
 862: PPUSH
 863: CALL_OW 250
 867: PPUSH
 868: LD_VAR 0 3
 872: PUSH
 873: LD_INT 1
 875: ARRAY
 876: PPUSH
 877: CALL_OW 251
 881: PPUSH
 882: LD_INT 5
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 892: LD_EXP 6
 896: PPUSH
 897: LD_INT 1
 899: PPUSH
 900: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 904: LD_STRING CyrusInDelta
 906: PPUSH
 907: LD_INT 0
 909: PPUSH
 910: CALL_OW 30
 914: PUSH
 915: LD_INT 1
 917: EQUAL
 918: IFFALSE 996
// begin Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 920: LD_ADDR_EXP 7
 924: PUSH
 925: LD_STRING Cyrus
 927: PPUSH
 928: LD_INT 1
 930: PPUSH
 931: LD_EXP 23
 935: PPUSH
 936: CALL 25692 0 3
 940: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 941: LD_EXP 7
 945: PPUSH
 946: LD_VAR 0 3
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: PPUSH
 955: CALL_OW 250
 959: PPUSH
 960: LD_VAR 0 3
 964: PUSH
 965: LD_INT 1
 967: ARRAY
 968: PPUSH
 969: CALL_OW 251
 973: PPUSH
 974: LD_INT 5
 976: PPUSH
 977: LD_INT 0
 979: PPUSH
 980: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
 984: LD_EXP 7
 988: PPUSH
 989: LD_INT 1
 991: PPUSH
 992: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
 996: LD_STRING DonaldsonInDelta
 998: PPUSH
 999: LD_INT 0
1001: PPUSH
1002: CALL_OW 30
1006: PUSH
1007: LD_INT 1
1009: EQUAL
1010: IFFALSE 1088
// begin Donaldson := PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
1012: LD_ADDR_EXP 9
1016: PUSH
1017: LD_STRING Donaldson
1019: PPUSH
1020: LD_INT 1
1022: PPUSH
1023: LD_EXP 23
1027: PPUSH
1028: CALL 25692 0 3
1032: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1033: LD_EXP 9
1037: PPUSH
1038: LD_VAR 0 3
1042: PUSH
1043: LD_INT 1
1045: ARRAY
1046: PPUSH
1047: CALL_OW 250
1051: PPUSH
1052: LD_VAR 0 3
1056: PUSH
1057: LD_INT 1
1059: ARRAY
1060: PPUSH
1061: CALL_OW 251
1065: PPUSH
1066: LD_INT 5
1068: PPUSH
1069: LD_INT 0
1071: PPUSH
1072: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
1076: LD_EXP 9
1080: PPUSH
1081: LD_INT 1
1083: PPUSH
1084: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
1088: LD_STRING BrownInDelta
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: CALL_OW 30
1098: PUSH
1099: LD_INT 1
1101: EQUAL
1102: IFFALSE 1180
// begin Brown := PrepareUnit ( Brown , true , mission_prefix_prev ) ;
1104: LD_ADDR_EXP 8
1108: PUSH
1109: LD_STRING Brown
1111: PPUSH
1112: LD_INT 1
1114: PPUSH
1115: LD_EXP 23
1119: PPUSH
1120: CALL 25692 0 3
1124: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1125: LD_EXP 8
1129: PPUSH
1130: LD_VAR 0 3
1134: PUSH
1135: LD_INT 1
1137: ARRAY
1138: PPUSH
1139: CALL_OW 250
1143: PPUSH
1144: LD_VAR 0 3
1148: PUSH
1149: LD_INT 1
1151: ARRAY
1152: PPUSH
1153: CALL_OW 251
1157: PPUSH
1158: LD_INT 5
1160: PPUSH
1161: LD_INT 0
1163: PPUSH
1164: CALL_OW 50
// SetClass ( Brown , 2 ) ;
1168: LD_EXP 8
1172: PPUSH
1173: LD_INT 2
1175: PPUSH
1176: CALL_OW 336
// end ; others := CreateCharacterSet ( othersInDelta ) ;
1180: LD_ADDR_EXP 10
1184: PUSH
1185: LD_STRING othersInDelta
1187: PPUSH
1188: CALL_OW 31
1192: ST_TO_ADDR
// for i in others do
1193: LD_ADDR_VAR 0 2
1197: PUSH
1198: LD_EXP 10
1202: PUSH
1203: FOR_IN
1204: IFFALSE 1251
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1206: LD_VAR 0 2
1210: PPUSH
1211: LD_VAR 0 3
1215: PUSH
1216: LD_INT 1
1218: ARRAY
1219: PPUSH
1220: CALL_OW 250
1224: PPUSH
1225: LD_VAR 0 3
1229: PUSH
1230: LD_INT 1
1232: ARRAY
1233: PPUSH
1234: CALL_OW 251
1238: PPUSH
1239: LD_INT 35
1241: PPUSH
1242: LD_INT 0
1244: PPUSH
1245: CALL_OW 50
1249: GO 1203
1251: POP
1252: POP
// apemans := CreateCharacterSet ( apeInDelta ) ;
1253: LD_ADDR_EXP 12
1257: PUSH
1258: LD_STRING apeInDelta
1260: PPUSH
1261: CALL_OW 31
1265: ST_TO_ADDR
// uc_nation := 0 ;
1266: LD_ADDR_OWVAR 21
1270: PUSH
1271: LD_INT 0
1273: ST_TO_ADDR
// if apemans > 5 then
1274: LD_EXP 12
1278: PUSH
1279: LD_INT 5
1281: GREATER
1282: IFFALSE 1377
// begin for i := 1 to 5 do
1284: LD_ADDR_VAR 0 2
1288: PUSH
1289: DOUBLE
1290: LD_INT 1
1292: DEC
1293: ST_TO_ADDR
1294: LD_INT 5
1296: PUSH
1297: FOR_TO
1298: IFFALSE 1373
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1300: LD_EXP 12
1304: PUSH
1305: LD_VAR 0 2
1309: ARRAY
1310: PPUSH
1311: LD_VAR 0 3
1315: PUSH
1316: LD_INT 1
1318: ARRAY
1319: PPUSH
1320: CALL_OW 250
1324: PPUSH
1325: LD_VAR 0 3
1329: PUSH
1330: LD_INT 1
1332: ARRAY
1333: PPUSH
1334: CALL_OW 251
1338: PPUSH
1339: LD_INT 50
1341: PPUSH
1342: LD_INT 0
1344: PPUSH
1345: CALL_OW 50
// yourApemans := yourApemans ^ apemans [ i ] ;
1349: LD_ADDR_EXP 13
1353: PUSH
1354: LD_EXP 13
1358: PUSH
1359: LD_EXP 12
1363: PUSH
1364: LD_VAR 0 2
1368: ARRAY
1369: ADD
1370: ST_TO_ADDR
// end ;
1371: GO 1297
1373: POP
1374: POP
// end else
1375: GO 1453
// begin for i in apemans do
1377: LD_ADDR_VAR 0 2
1381: PUSH
1382: LD_EXP 12
1386: PUSH
1387: FOR_IN
1388: IFFALSE 1451
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1390: LD_VAR 0 2
1394: PPUSH
1395: LD_VAR 0 3
1399: PUSH
1400: LD_INT 1
1402: ARRAY
1403: PPUSH
1404: CALL_OW 250
1408: PPUSH
1409: LD_VAR 0 3
1413: PUSH
1414: LD_INT 1
1416: ARRAY
1417: PPUSH
1418: CALL_OW 251
1422: PPUSH
1423: LD_INT 50
1425: PPUSH
1426: LD_INT 0
1428: PPUSH
1429: CALL_OW 50
// yourApemans := yourApemans ^ i ;
1433: LD_ADDR_EXP 13
1437: PUSH
1438: LD_EXP 13
1442: PUSH
1443: LD_VAR 0 2
1447: ADD
1448: ST_TO_ADDR
// end ;
1449: GO 1387
1451: POP
1452: POP
// end ; end ;
1453: LD_VAR 0 1
1457: RET
// export function LoadVehicles ; var i , veh , tmp , vehicles ; begin
1458: LD_INT 0
1460: PPUSH
1461: PPUSH
1462: PPUSH
1463: PPUSH
1464: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1465: LD_ADDR_VAR 0 4
1469: PUSH
1470: LD_INT 22
1472: PUSH
1473: LD_INT 1
1475: PUSH
1476: EMPTY
1477: LIST
1478: LIST
1479: PUSH
1480: LD_INT 21
1482: PUSH
1483: LD_INT 3
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: LD_INT 30
1492: PUSH
1493: LD_INT 0
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: LIST
1504: PPUSH
1505: CALL_OW 69
1509: ST_TO_ADDR
// uc_side = 1 ;
1510: LD_ADDR_OWVAR 20
1514: PUSH
1515: LD_INT 1
1517: ST_TO_ADDR
// vehicles := LoadVariable ( vehiclesInDelta , [ ] ) ;
1518: LD_ADDR_VAR 0 5
1522: PUSH
1523: LD_STRING vehiclesInDelta
1525: PPUSH
1526: EMPTY
1527: PPUSH
1528: CALL_OW 30
1532: ST_TO_ADDR
// for i = 1 to vehicles do
1533: LD_ADDR_VAR 0 2
1537: PUSH
1538: DOUBLE
1539: LD_INT 1
1541: DEC
1542: ST_TO_ADDR
1543: LD_VAR 0 5
1547: PUSH
1548: FOR_TO
1549: IFFALSE 1752
// begin if vehicles [ i + 4 ] = 11 or vehicles [ i ] = 3 then
1551: LD_VAR 0 5
1555: PUSH
1556: LD_VAR 0 2
1560: PUSH
1561: LD_INT 4
1563: PLUS
1564: ARRAY
1565: PUSH
1566: LD_INT 11
1568: EQUAL
1569: PUSH
1570: LD_VAR 0 5
1574: PUSH
1575: LD_VAR 0 2
1579: ARRAY
1580: PUSH
1581: LD_INT 3
1583: EQUAL
1584: OR
1585: IFFALSE 1736
// begin uc_nation := vehicles [ i ] ;
1587: LD_ADDR_OWVAR 21
1591: PUSH
1592: LD_VAR 0 5
1596: PUSH
1597: LD_VAR 0 2
1601: ARRAY
1602: ST_TO_ADDR
// vc_chassis := vehicles [ i + 1 ] ;
1603: LD_ADDR_OWVAR 37
1607: PUSH
1608: LD_VAR 0 5
1612: PUSH
1613: LD_VAR 0 2
1617: PUSH
1618: LD_INT 1
1620: PLUS
1621: ARRAY
1622: ST_TO_ADDR
// vc_engine := vehicles [ i + 2 ] ;
1623: LD_ADDR_OWVAR 39
1627: PUSH
1628: LD_VAR 0 5
1632: PUSH
1633: LD_VAR 0 2
1637: PUSH
1638: LD_INT 2
1640: PLUS
1641: ARRAY
1642: ST_TO_ADDR
// vc_control := vehicles [ i + 3 ] ;
1643: LD_ADDR_OWVAR 38
1647: PUSH
1648: LD_VAR 0 5
1652: PUSH
1653: LD_VAR 0 2
1657: PUSH
1658: LD_INT 3
1660: PLUS
1661: ARRAY
1662: ST_TO_ADDR
// vc_weapon := vehicles [ i + 4 ] ;
1663: LD_ADDR_OWVAR 40
1667: PUSH
1668: LD_VAR 0 5
1672: PUSH
1673: LD_VAR 0 2
1677: PUSH
1678: LD_INT 4
1680: PLUS
1681: ARRAY
1682: ST_TO_ADDR
// veh = CreateVehicle ;
1683: LD_ADDR_VAR 0 3
1687: PUSH
1688: CALL_OW 45
1692: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 40 , false ) ;
1693: LD_VAR 0 3
1697: PPUSH
1698: LD_VAR 0 4
1702: PUSH
1703: LD_INT 1
1705: ARRAY
1706: PPUSH
1707: CALL_OW 250
1711: PPUSH
1712: LD_VAR 0 4
1716: PUSH
1717: LD_INT 1
1719: ARRAY
1720: PPUSH
1721: CALL_OW 251
1725: PPUSH
1726: LD_INT 40
1728: PPUSH
1729: LD_INT 0
1731: PPUSH
1732: CALL_OW 50
// end ; i := i + 4 ;
1736: LD_ADDR_VAR 0 2
1740: PUSH
1741: LD_VAR 0 2
1745: PUSH
1746: LD_INT 4
1748: PLUS
1749: ST_TO_ADDR
// end ;
1750: GO 1548
1752: POP
1753: POP
// end ;
1754: LD_VAR 0 1
1758: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1759: LD_INT 0
1761: PPUSH
1762: PPUSH
1763: PPUSH
1764: PPUSH
1765: PPUSH
// uc_side := 1 ;
1766: LD_ADDR_OWVAR 20
1770: PUSH
1771: LD_INT 1
1773: ST_TO_ADDR
// uc_nation := 1 ;
1774: LD_ADDR_OWVAR 21
1778: PUSH
1779: LD_INT 1
1781: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1782: LD_ADDR_VAR 0 4
1786: PUSH
1787: LD_INT 22
1789: PUSH
1790: LD_INT 1
1792: PUSH
1793: EMPTY
1794: LIST
1795: LIST
1796: PUSH
1797: LD_INT 21
1799: PUSH
1800: LD_INT 3
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: PUSH
1807: LD_INT 30
1809: PUSH
1810: LD_INT 0
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: LIST
1821: PPUSH
1822: CALL_OW 69
1826: ST_TO_ADDR
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) ;
1827: LD_ADDR_EXP 15
1831: PUSH
1832: LD_INT 22
1834: PUSH
1835: LD_INT 1
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PUSH
1842: LD_INT 25
1844: PUSH
1845: LD_INT 4
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PUSH
1852: LD_INT 26
1854: PUSH
1855: LD_INT 1
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: LIST
1866: PUSH
1867: EMPTY
1868: LIST
1869: PPUSH
1870: CALL_OW 69
1874: PUSH
1875: LD_EXP 1
1879: PUSH
1880: LD_EXP 7
1884: PUSH
1885: LD_EXP 6
1889: PUSH
1890: LD_EXP 5
1894: PUSH
1895: LD_EXP 2
1899: PUSH
1900: LD_EXP 3
1904: PUSH
1905: LD_EXP 8
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: DIFF
1919: ST_TO_ADDR
// if not deltaDoctor then
1920: LD_EXP 15
1924: NOT
1925: IFFALSE 2076
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
1927: LD_ADDR_VAR 0 5
1931: PUSH
1932: LD_INT 22
1934: PUSH
1935: LD_INT 1
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 26
1944: PUSH
1945: LD_INT 1
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: EMPTY
1957: LIST
1958: PPUSH
1959: CALL_OW 69
1963: PUSH
1964: LD_EXP 1
1968: PUSH
1969: LD_EXP 7
1973: PUSH
1974: LD_EXP 6
1978: PUSH
1979: LD_EXP 5
1983: PUSH
1984: LD_EXP 2
1988: PUSH
1989: LD_EXP 3
1993: PUSH
1994: LD_EXP 8
1998: PUSH
1999: EMPTY
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: DIFF
2008: ST_TO_ADDR
// if filter then
2009: LD_VAR 0 5
2013: IFFALSE 2074
// for i in filter do
2015: LD_ADDR_VAR 0 2
2019: PUSH
2020: LD_VAR 0 5
2024: PUSH
2025: FOR_IN
2026: IFFALSE 2072
// if GetSkill ( i , 4 ) >= 4 then
2028: LD_VAR 0 2
2032: PPUSH
2033: LD_INT 4
2035: PPUSH
2036: CALL_OW 259
2040: PUSH
2041: LD_INT 4
2043: GREATEREQUAL
2044: IFFALSE 2070
// begin deltaDoctor := i ;
2046: LD_ADDR_EXP 15
2050: PUSH
2051: LD_VAR 0 2
2055: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
2056: LD_EXP 15
2060: PPUSH
2061: LD_INT 4
2063: PPUSH
2064: CALL_OW 336
// break ;
2068: GO 2072
// end ;
2070: GO 2025
2072: POP
2073: POP
// end else
2074: GO 2090
// deltaDoctor := deltaDoctor [ 1 ] ;
2076: LD_ADDR_EXP 15
2080: PUSH
2081: LD_EXP 15
2085: PUSH
2086: LD_INT 1
2088: ARRAY
2089: ST_TO_ADDR
// for i := 1 to 7 do
2090: LD_ADDR_VAR 0 2
2094: PUSH
2095: DOUBLE
2096: LD_INT 1
2098: DEC
2099: ST_TO_ADDR
2100: LD_INT 7
2102: PUSH
2103: FOR_TO
2104: IFFALSE 2241
// begin hc_gallery :=  ;
2106: LD_ADDR_OWVAR 33
2110: PUSH
2111: LD_STRING 
2113: ST_TO_ADDR
// hc_name :=  ;
2114: LD_ADDR_OWVAR 26
2118: PUSH
2119: LD_STRING 
2121: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) ) ;
2122: LD_INT 0
2124: PPUSH
2125: LD_INT 1
2127: PUSH
2128: LD_INT 2
2130: PUSH
2131: LD_INT 3
2133: PUSH
2134: LD_INT 4
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: PUSH
2143: LD_INT 1
2145: PPUSH
2146: LD_INT 4
2148: PPUSH
2149: CALL_OW 12
2153: ARRAY
2154: PPUSH
2155: LD_INT 3
2157: PPUSH
2158: LD_INT 5
2160: PPUSH
2161: CALL_OW 12
2165: PPUSH
2166: CALL_OW 380
// un := CreateHuman ;
2170: LD_ADDR_VAR 0 3
2174: PUSH
2175: CALL_OW 44
2179: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2180: LD_ADDR_EXP 11
2184: PUSH
2185: LD_EXP 11
2189: PUSH
2190: LD_VAR 0 3
2194: ADD
2195: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2196: LD_VAR 0 3
2200: PPUSH
2201: LD_VAR 0 4
2205: PUSH
2206: LD_INT 1
2208: ARRAY
2209: PPUSH
2210: CALL_OW 250
2214: PPUSH
2215: LD_VAR 0 4
2219: PUSH
2220: LD_INT 1
2222: ARRAY
2223: PPUSH
2224: CALL_OW 251
2228: PPUSH
2229: LD_INT 15
2231: PPUSH
2232: LD_INT 0
2234: PPUSH
2235: CALL_OW 50
// end ;
2239: GO 2103
2241: POP
2242: POP
// if deltaDoctor then
2243: LD_EXP 15
2247: IFFALSE 2251
// exit ;
2249: GO 2341
// hc_gallery := Dawkins ;
2251: LD_ADDR_OWVAR 33
2255: PUSH
2256: LD_STRING Dawkins
2258: ST_TO_ADDR
// hc_face_number := 1 ;
2259: LD_ADDR_OWVAR 34
2263: PUSH
2264: LD_INT 1
2266: ST_TO_ADDR
// hc_name := Dr. Adam Charles Dawkins ;
2267: LD_ADDR_OWVAR 26
2271: PUSH
2272: LD_STRING Dr. Adam Charles Dawkins
2274: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 5 ) ;
2275: LD_INT 1
2277: PPUSH
2278: LD_INT 4
2280: PPUSH
2281: LD_INT 5
2283: PPUSH
2284: CALL_OW 380
// deltaDoctor := CreateHuman ;
2288: LD_ADDR_EXP 15
2292: PUSH
2293: CALL_OW 44
2297: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2298: LD_EXP 15
2302: PPUSH
2303: LD_VAR 0 4
2307: PUSH
2308: LD_INT 1
2310: ARRAY
2311: PPUSH
2312: CALL_OW 250
2316: PPUSH
2317: LD_VAR 0 4
2321: PUSH
2322: LD_INT 1
2324: ARRAY
2325: PPUSH
2326: CALL_OW 251
2330: PPUSH
2331: LD_INT 5
2333: PPUSH
2334: LD_INT 0
2336: PPUSH
2337: CALL_OW 50
// end ; end_of_file
2341: LD_VAR 0 1
2345: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2346: LD_INT 0
2348: PPUSH
2349: PPUSH
2350: PPUSH
2351: PPUSH
2352: PPUSH
2353: PPUSH
2354: PPUSH
// buildings := LoadVariable ( buildingsInDelta , [ ] ) ;
2355: LD_ADDR_VAR 0 5
2359: PUSH
2360: LD_STRING buildingsInDelta
2362: PPUSH
2363: EMPTY
2364: PPUSH
2365: CALL_OW 30
2369: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2370: LD_INT 68
2372: PPUSH
2373: LD_INT 40
2375: PPUSH
2376: LD_INT 1
2378: PPUSH
2379: CALL_OW 441
// uc_side := 1 ;
2383: LD_ADDR_OWVAR 20
2387: PUSH
2388: LD_INT 1
2390: ST_TO_ADDR
// uc_nation := 1 ;
2391: LD_ADDR_OWVAR 21
2395: PUSH
2396: LD_INT 1
2398: ST_TO_ADDR
// for i := 1 to buildings do
2399: LD_ADDR_VAR 0 2
2403: PUSH
2404: DOUBLE
2405: LD_INT 1
2407: DEC
2408: ST_TO_ADDR
2409: LD_VAR 0 5
2413: PUSH
2414: FOR_TO
2415: IFFALSE 2723
// begin bc_type := buildings [ i ] [ 1 ] ;
2417: LD_ADDR_OWVAR 42
2421: PUSH
2422: LD_VAR 0 5
2426: PUSH
2427: LD_VAR 0 2
2431: ARRAY
2432: PUSH
2433: LD_INT 1
2435: ARRAY
2436: ST_TO_ADDR
// bc_level := buildings [ i ] [ 2 ] ;
2437: LD_ADDR_OWVAR 43
2441: PUSH
2442: LD_VAR 0 5
2446: PUSH
2447: LD_VAR 0 2
2451: ARRAY
2452: PUSH
2453: LD_INT 2
2455: ARRAY
2456: ST_TO_ADDR
// if bc_type = b_lab then
2457: LD_OWVAR 42
2461: PUSH
2462: LD_INT 6
2464: EQUAL
2465: IFFALSE 2483
// begin bc_kind1 := b_lab_basic ;
2467: LD_ADDR_OWVAR 44
2471: PUSH
2472: LD_INT 9
2474: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2475: LD_ADDR_OWVAR 45
2479: PUSH
2480: LD_INT 9
2482: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
2483: LD_OWVAR 42
2487: PUSH
2488: LD_INT 7
2490: EQUAL
2491: PUSH
2492: LD_OWVAR 42
2496: PUSH
2497: LD_INT 8
2499: EQUAL
2500: OR
2501: IFFALSE 2611
// begin if buildings [ i ] [ 6 ] then
2503: LD_VAR 0 5
2507: PUSH
2508: LD_VAR 0 2
2512: ARRAY
2513: PUSH
2514: LD_INT 6
2516: ARRAY
2517: IFFALSE 2587
// begin bc_kind1 := buildings [ i ] [ 6 ] ;
2519: LD_ADDR_OWVAR 44
2523: PUSH
2524: LD_VAR 0 5
2528: PUSH
2529: LD_VAR 0 2
2533: ARRAY
2534: PUSH
2535: LD_INT 6
2537: ARRAY
2538: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2539: LD_VAR 0 5
2543: PUSH
2544: LD_VAR 0 2
2548: ARRAY
2549: PUSH
2550: LD_INT 7
2552: ARRAY
2553: IFFALSE 2577
// bc_kind1 := buildings [ i ] [ 7 ] else
2555: LD_ADDR_OWVAR 44
2559: PUSH
2560: LD_VAR 0 5
2564: PUSH
2565: LD_VAR 0 2
2569: ARRAY
2570: PUSH
2571: LD_INT 7
2573: ARRAY
2574: ST_TO_ADDR
2575: GO 2585
// bc_kind2 := b_lab_basic ;
2577: LD_ADDR_OWVAR 45
2581: PUSH
2582: LD_INT 9
2584: ST_TO_ADDR
// end else
2585: GO 2611
// begin bc_type := b_lab ;
2587: LD_ADDR_OWVAR 42
2591: PUSH
2592: LD_INT 6
2594: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
2595: LD_ADDR_OWVAR 44
2599: PUSH
2600: LD_INT 9
2602: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2603: LD_ADDR_OWVAR 45
2607: PUSH
2608: LD_INT 9
2610: ST_TO_ADDR
// end ; end ; building := CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2611: LD_ADDR_VAR 0 4
2615: PUSH
2616: LD_VAR 0 5
2620: PUSH
2621: LD_VAR 0 2
2625: ARRAY
2626: PUSH
2627: LD_INT 3
2629: ARRAY
2630: PPUSH
2631: LD_VAR 0 5
2635: PUSH
2636: LD_VAR 0 2
2640: ARRAY
2641: PUSH
2642: LD_INT 4
2644: ARRAY
2645: PPUSH
2646: LD_VAR 0 5
2650: PUSH
2651: LD_VAR 0 2
2655: ARRAY
2656: PUSH
2657: LD_INT 5
2659: ARRAY
2660: PPUSH
2661: CALL_OW 47
2665: ST_TO_ADDR
// if GetBType ( building ) = b_bunker and buildings [ i ] [ 8 ] then
2666: LD_VAR 0 4
2670: PPUSH
2671: CALL_OW 266
2675: PUSH
2676: LD_INT 32
2678: EQUAL
2679: PUSH
2680: LD_VAR 0 5
2684: PUSH
2685: LD_VAR 0 2
2689: ARRAY
2690: PUSH
2691: LD_INT 8
2693: ARRAY
2694: AND
2695: IFFALSE 2721
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2697: LD_VAR 0 4
2701: PPUSH
2702: LD_VAR 0 5
2706: PUSH
2707: LD_VAR 0 2
2711: ARRAY
2712: PUSH
2713: LD_INT 8
2715: ARRAY
2716: PPUSH
2717: CALL_OW 431
// end ;
2721: GO 2414
2723: POP
2724: POP
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2725: LD_ADDR_VAR 0 6
2729: PUSH
2730: LD_INT 22
2732: PUSH
2733: LD_INT 1
2735: PUSH
2736: EMPTY
2737: LIST
2738: LIST
2739: PUSH
2740: LD_INT 2
2742: PUSH
2743: LD_INT 30
2745: PUSH
2746: LD_INT 6
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: PUSH
2753: LD_INT 30
2755: PUSH
2756: LD_INT 7
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PUSH
2763: LD_INT 30
2765: PUSH
2766: LD_INT 8
2768: PUSH
2769: EMPTY
2770: LIST
2771: LIST
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: LIST
2777: LIST
2778: PUSH
2779: EMPTY
2780: LIST
2781: LIST
2782: PPUSH
2783: CALL_OW 69
2787: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2788: LD_ADDR_VAR 0 7
2792: PUSH
2793: LD_INT 22
2795: PUSH
2796: LD_INT 1
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: PUSH
2803: LD_INT 30
2805: PUSH
2806: LD_INT 0
2808: PUSH
2809: EMPTY
2810: LIST
2811: LIST
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: PPUSH
2817: CALL_OW 69
2821: ST_TO_ADDR
// if lab and tmp then
2822: LD_VAR 0 6
2826: PUSH
2827: LD_VAR 0 7
2831: AND
2832: IFFALSE 2842
// baseCorrect := 1 ;
2834: LD_ADDR_EXP 18
2838: PUSH
2839: LD_INT 1
2841: ST_TO_ADDR
// if baseCorrect = 0 then
2842: LD_EXP 18
2846: PUSH
2847: LD_INT 0
2849: EQUAL
2850: IFFALSE 3223
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2852: LD_ADDR_VAR 0 2
2856: PUSH
2857: LD_INT 22
2859: PUSH
2860: LD_INT 1
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PUSH
2867: LD_INT 21
2869: PUSH
2870: LD_INT 3
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PPUSH
2881: CALL_OW 69
2885: PUSH
2886: FOR_IN
2887: IFFALSE 2900
// RemoveUnit ( i ) ;
2889: LD_VAR 0 2
2893: PPUSH
2894: CALL_OW 64
2898: GO 2886
2900: POP
2901: POP
// uc_nation := 1 ;
2902: LD_ADDR_OWVAR 21
2906: PUSH
2907: LD_INT 1
2909: ST_TO_ADDR
// uc_side := 1 ;
2910: LD_ADDR_OWVAR 20
2914: PUSH
2915: LD_INT 1
2917: ST_TO_ADDR
// bc_level := 5 ;
2918: LD_ADDR_OWVAR 43
2922: PUSH
2923: LD_INT 5
2925: ST_TO_ADDR
// bc_type := b_depot ;
2926: LD_ADDR_OWVAR 42
2930: PUSH
2931: LD_INT 0
2933: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2934: LD_INT 50
2936: PPUSH
2937: LD_INT 22
2939: PPUSH
2940: LD_INT 0
2942: PPUSH
2943: CALL_OW 47
// bc_type = b_bunker ;
2947: LD_ADDR_OWVAR 42
2951: PUSH
2952: LD_INT 32
2954: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
2955: LD_ADDR_VAR 0 4
2959: PUSH
2960: LD_INT 68
2962: PPUSH
2963: LD_INT 24
2965: PPUSH
2966: LD_INT 4
2968: PPUSH
2969: CALL_OW 47
2973: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
2974: LD_VAR 0 4
2978: PPUSH
2979: LD_INT 4
2981: PUSH
2982: LD_INT 11
2984: PUSH
2985: EMPTY
2986: LIST
2987: LIST
2988: PUSH
2989: LD_INT 1
2991: PPUSH
2992: LD_INT 2
2994: PPUSH
2995: CALL_OW 12
2999: ARRAY
3000: PPUSH
3001: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
3005: LD_ADDR_VAR 0 4
3009: PUSH
3010: LD_INT 71
3012: PPUSH
3013: LD_INT 34
3015: PPUSH
3016: LD_INT 4
3018: PPUSH
3019: CALL_OW 47
3023: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
3024: LD_VAR 0 4
3028: PPUSH
3029: LD_INT 4
3031: PUSH
3032: LD_INT 11
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: PUSH
3039: LD_INT 1
3041: PPUSH
3042: LD_INT 2
3044: PPUSH
3045: CALL_OW 12
3049: ARRAY
3050: PPUSH
3051: CALL_OW 431
// bc_type := b_breastwork ;
3055: LD_ADDR_OWVAR 42
3059: PUSH
3060: LD_INT 31
3062: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
3063: LD_INT 51
3065: PPUSH
3066: LD_INT 7
3068: PPUSH
3069: LD_INT 3
3071: PPUSH
3072: CALL_OW 47
// bc_type := b_oil_mine ;
3076: LD_ADDR_OWVAR 42
3080: PUSH
3081: LD_INT 29
3083: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
3084: LD_INT 68
3086: PPUSH
3087: LD_INT 40
3089: PPUSH
3090: LD_INT 1
3092: PPUSH
3093: CALL_OW 47
// bc_type := b_workshop ;
3097: LD_ADDR_OWVAR 42
3101: PUSH
3102: LD_INT 2
3104: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3105: LD_INT 38
3107: PPUSH
3108: LD_INT 20
3110: PPUSH
3111: LD_INT 2
3113: PPUSH
3114: CALL_OW 47
// bc_type := b_armoury ;
3118: LD_ADDR_OWVAR 42
3122: PUSH
3123: LD_INT 4
3125: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3126: LD_INT 38
3128: PPUSH
3129: LD_INT 20
3131: PPUSH
3132: LD_INT 2
3134: PPUSH
3135: CALL_OW 47
// bc_type := b_solar_power ;
3139: LD_ADDR_OWVAR 42
3143: PUSH
3144: LD_INT 27
3146: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3147: LD_INT 46
3149: PPUSH
3150: LD_INT 12
3152: PPUSH
3153: LD_INT 1
3155: PPUSH
3156: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3160: LD_INT 48
3162: PPUSH
3163: LD_INT 11
3165: PPUSH
3166: LD_INT 2
3168: PPUSH
3169: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 49 , 11 , 3 ) ;
3173: LD_INT 49
3175: PPUSH
3176: LD_INT 11
3178: PPUSH
3179: LD_INT 3
3181: PPUSH
3182: CALL_OW 47
// bc_type := b_lab_half ;
3186: LD_ADDR_OWVAR 42
3190: PUSH
3191: LD_INT 7
3193: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
3194: LD_ADDR_OWVAR 44
3198: PUSH
3199: LD_INT 15
3201: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
3202: LD_ADDR_OWVAR 45
3206: PUSH
3207: LD_INT 9
3209: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3210: LD_INT 42
3212: PPUSH
3213: LD_INT 15
3215: PPUSH
3216: LD_INT 2
3218: PPUSH
3219: CALL_OW 47
// end ; end ; end_of_file
3223: LD_VAR 0 1
3227: RET
// export function Action ; var i , j , tmp ; begin
3228: LD_INT 0
3230: PPUSH
3231: PPUSH
3232: PPUSH
3233: PPUSH
// InGameOn ;
3234: CALL_OW 8
// if lab then
3238: LD_EXP 20
3242: IFFALSE 3259
// CenterNowOnUnits ( lab [ 1 ] ) else
3244: LD_EXP 20
3248: PUSH
3249: LD_INT 1
3251: ARRAY
3252: PPUSH
3253: CALL_OW 87
3257: GO 3268
// CenterOnUnits ( JMM ) ;
3259: LD_EXP 1
3263: PPUSH
3264: CALL_OW 85
// if IsOK ( Denis ) then
3268: LD_EXP 3
3272: PPUSH
3273: CALL_OW 302
3277: IFFALSE 3305
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3279: LD_INT 6
3281: PPUSH
3282: LD_INT 1
3284: PPUSH
3285: LD_INT 2
3287: PPUSH
3288: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3292: LD_INT 20
3294: PPUSH
3295: LD_INT 1
3297: PPUSH
3298: LD_INT 1
3300: PPUSH
3301: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3305: LD_EXP 1
3309: PPUSH
3310: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3314: LD_EXP 1
3318: PPUSH
3319: LD_EXP 15
3323: PPUSH
3324: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3328: LD_INT 35
3330: PPUSH
3331: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3335: LD_EXP 15
3339: PPUSH
3340: LD_EXP 1
3344: PPUSH
3345: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3349: LD_EXP 1
3353: PPUSH
3354: LD_EXP 15
3358: PPUSH
3359: CALL_OW 296
3363: PUSH
3364: LD_INT 5
3366: LESS
3367: IFFALSE 3328
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3369: LD_EXP 15
3373: PPUSH
3374: LD_EXP 1
3378: PPUSH
3379: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3383: LD_EXP 1
3387: PPUSH
3388: LD_STRING D1-JMM-1
3390: PPUSH
3391: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3395: LD_EXP 15
3399: PPUSH
3400: LD_STRING D1-Sci-1
3402: PPUSH
3403: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3407: LD_EXP 1
3411: PUSH
3412: LD_EXP 15
3416: PUSH
3417: LD_EXP 3
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: LIST
3426: PPUSH
3427: LD_EXP 20
3431: PUSH
3432: LD_INT 1
3434: ARRAY
3435: PPUSH
3436: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
3440: LD_INT 35
3442: PPUSH
3443: CALL_OW 67
// until IsInUnit ( JMM ) and IsInUnit ( DeltaDoctor ) ;
3447: LD_EXP 1
3451: PPUSH
3452: CALL_OW 310
3456: PUSH
3457: LD_EXP 15
3461: PPUSH
3462: CALL_OW 310
3466: AND
3467: IFFALSE 3440
// CenterNowOnUnits ( lab [ 1 ] ) ;
3469: LD_EXP 20
3473: PUSH
3474: LD_INT 1
3476: ARRAY
3477: PPUSH
3478: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3482: LD_EXP 1
3486: PPUSH
3487: LD_STRING D1-JMM-2
3489: PPUSH
3490: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3494: LD_EXP 15
3498: PPUSH
3499: LD_STRING D1-Sci-2
3501: PPUSH
3502: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3506: LD_EXP 1
3510: PPUSH
3511: LD_STRING D1-JMM-3
3513: PPUSH
3514: CALL_OW 88
// if IsOK ( Denis ) then
3518: LD_EXP 3
3522: PPUSH
3523: CALL_OW 302
3527: IFFALSE 3543
// Say ( DeltaDoctor , D1-Sci-3 ) else
3529: LD_EXP 15
3533: PPUSH
3534: LD_STRING D1-Sci-3
3536: PPUSH
3537: CALL_OW 88
3541: GO 3555
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3543: LD_EXP 15
3547: PPUSH
3548: LD_STRING D1-Sci-3a
3550: PPUSH
3551: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3555: LD_EXP 1
3559: PPUSH
3560: LD_STRING D1-JMM-4
3562: PPUSH
3563: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3567: LD_ADDR_VAR 0 4
3571: PUSH
3572: LD_INT 22
3574: PUSH
3575: LD_INT 1
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: PUSH
3582: LD_INT 25
3584: PUSH
3585: LD_INT 4
3587: PUSH
3588: EMPTY
3589: LIST
3590: LIST
3591: PUSH
3592: LD_INT 3
3594: PUSH
3595: LD_INT 54
3597: PUSH
3598: EMPTY
3599: LIST
3600: PUSH
3601: EMPTY
3602: LIST
3603: LIST
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: LIST
3609: PPUSH
3610: CALL_OW 69
3614: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3615: LD_ADDR_VAR 0 2
3619: PUSH
3620: LD_INT 22
3622: PUSH
3623: LD_INT 0
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: PPUSH
3630: CALL_OW 69
3634: PUSH
3635: FOR_IN
3636: IFFALSE 3686
// for j in tmp do
3638: LD_ADDR_VAR 0 3
3642: PUSH
3643: LD_VAR 0 4
3647: PUSH
3648: FOR_IN
3649: IFFALSE 3682
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3651: LD_VAR 0 3
3655: PPUSH
3656: LD_VAR 0 2
3660: PPUSH
3661: CALL_OW 250
3665: PPUSH
3666: LD_VAR 0 2
3670: PPUSH
3671: CALL_OW 251
3675: PPUSH
3676: CALL_OW 191
3680: GO 3648
3682: POP
3683: POP
3684: GO 3635
3686: POP
3687: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3688: LD_EXP 15
3692: PPUSH
3693: LD_STRING D1-Sci-4
3695: PPUSH
3696: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3700: LD_EXP 1
3704: PPUSH
3705: LD_STRING D1-JMM-5
3707: PPUSH
3708: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3712: LD_EXP 15
3716: PPUSH
3717: LD_STRING D1-Sci-5
3719: PPUSH
3720: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3724: LD_EXP 1
3728: PPUSH
3729: LD_STRING D1-JMM-6
3731: PPUSH
3732: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3736: LD_EXP 16
3740: PPUSH
3741: LD_STRING D1-Har-6
3743: PPUSH
3744: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3748: LD_EXP 1
3752: PPUSH
3753: LD_STRING D1-JMM-7
3755: PPUSH
3756: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3760: LD_EXP 16
3764: PPUSH
3765: LD_STRING D1-Har-7
3767: PPUSH
3768: CALL_OW 94
// if IsOK ( Denis ) then
3772: LD_EXP 3
3776: PPUSH
3777: CALL_OW 302
3781: IFFALSE 3795
// Say ( JMM , D1-JMM-8 ) ;
3783: LD_EXP 1
3787: PPUSH
3788: LD_STRING D1-JMM-8
3790: PPUSH
3791: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3795: LD_EXP 1
3799: PPUSH
3800: LD_STRING D1-JMM-8a
3802: PPUSH
3803: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3807: LD_EXP 16
3811: PPUSH
3812: LD_STRING D1-Har-8
3814: PPUSH
3815: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3819: LD_EXP 1
3823: PPUSH
3824: LD_STRING D1-JMM-9
3826: PPUSH
3827: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3831: LD_EXP 16
3835: PPUSH
3836: LD_STRING D1-Har-9
3838: PPUSH
3839: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3843: LD_EXP 1
3847: PPUSH
3848: LD_STRING D1-JMM-10
3850: PPUSH
3851: CALL_OW 88
// if IsOK ( Denis ) then
3855: LD_EXP 3
3859: PPUSH
3860: CALL_OW 302
3864: IFFALSE 3878
// Say ( JMM , D1-JMM-10a ) ;
3866: LD_EXP 1
3870: PPUSH
3871: LD_STRING D1-JMM-10a
3873: PPUSH
3874: CALL_OW 88
// SelectDeltaCharacters ;
3878: CALL 4362 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 150 ) ;
3882: LD_EXP 20
3886: PUSH
3887: LD_INT 1
3889: ARRAY
3890: PPUSH
3891: CALL_OW 274
3895: PPUSH
3896: LD_INT 1
3898: PPUSH
3899: LD_INT 150
3901: PPUSH
3902: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) then
3906: LD_INT 22
3908: PUSH
3909: LD_INT 1
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: PUSH
3916: LD_INT 30
3918: PUSH
3919: LD_INT 29
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: PUSH
3926: EMPTY
3927: LIST
3928: LIST
3929: PPUSH
3930: CALL_OW 69
3934: IFFALSE 3960
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
3936: LD_EXP 20
3940: PUSH
3941: LD_INT 1
3943: ARRAY
3944: PPUSH
3945: CALL_OW 274
3949: PPUSH
3950: LD_INT 2
3952: PPUSH
3953: LD_INT 300
3955: PPUSH
3956: CALL_OW 277
// InGameOff ;
3960: CALL_OW 9
// Query ( Q1 ) ;
3964: LD_STRING Q1
3966: PPUSH
3967: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
3971: LD_INT 3
3973: PPUSH
3974: LD_INT 1
3976: PPUSH
3977: CALL_OW 424
// if IsInUnit ( JMM ) then
3981: LD_EXP 1
3985: PPUSH
3986: CALL_OW 310
3990: IFFALSE 4001
// ComExitBuilding ( JMM ) ;
3992: LD_EXP 1
3996: PPUSH
3997: CALL_OW 122
// end ;
4001: LD_VAR 0 1
4005: RET
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
4006: LD_INT 3
4008: PPUSH
4009: LD_INT 22
4011: PUSH
4012: LD_INT 1
4014: PUSH
4015: EMPTY
4016: LIST
4017: LIST
4018: PUSH
4019: LD_INT 21
4021: PUSH
4022: LD_INT 1
4024: PUSH
4025: EMPTY
4026: LIST
4027: LIST
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: PPUSH
4033: CALL_OW 71
4037: PUSH
4038: LD_INT 0
4040: EQUAL
4041: IFFALSE 4359
4043: GO 4045
4045: DISABLE
4046: LD_INT 0
4048: PPUSH
4049: PPUSH
// begin SaveDeltaCharacters ;
4050: CALL 4716 0 0
// if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) then
4054: LD_INT 3
4056: PPUSH
4057: LD_INT 21
4059: PUSH
4060: LD_INT 2
4062: PUSH
4063: EMPTY
4064: LIST
4065: LIST
4066: PUSH
4067: LD_INT 3
4069: PUSH
4070: LD_INT 58
4072: PUSH
4073: EMPTY
4074: LIST
4075: PUSH
4076: EMPTY
4077: LIST
4078: LIST
4079: PUSH
4080: EMPTY
4081: LIST
4082: LIST
4083: PPUSH
4084: CALL_OW 70
4088: IFFALSE 4345
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
4090: LD_ADDR_VAR 0 1
4094: PUSH
4095: LD_INT 3
4097: PPUSH
4098: LD_INT 21
4100: PUSH
4101: LD_INT 2
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PUSH
4108: LD_INT 3
4110: PUSH
4111: LD_INT 58
4113: PUSH
4114: EMPTY
4115: LIST
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: PPUSH
4125: CALL_OW 70
4129: PUSH
4130: FOR_IN
4131: IFFALSE 4343
// begin cargoType := GetCargoType ( i ) ;
4133: LD_ADDR_VAR 0 2
4137: PUSH
4138: LD_VAR 0 1
4142: PPUSH
4143: CALL_OW 288
4147: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4148: LD_VAR 0 1
4152: PPUSH
4153: CALL_OW 264
4157: PUSH
4158: LD_INT 12
4160: EQUAL
4161: IFFALSE 4258
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] else
4163: LD_ADDR_EXP 14
4167: PUSH
4168: LD_EXP 14
4172: PUSH
4173: LD_VAR 0 1
4177: PPUSH
4178: CALL_OW 248
4182: PUSH
4183: LD_VAR 0 1
4187: PPUSH
4188: CALL_OW 265
4192: PUSH
4193: LD_VAR 0 1
4197: PPUSH
4198: CALL_OW 262
4202: PUSH
4203: LD_VAR 0 1
4207: PPUSH
4208: CALL_OW 263
4212: PUSH
4213: LD_VAR 0 1
4217: PPUSH
4218: CALL_OW 264
4222: PUSH
4223: LD_VAR 0 2
4227: PUSH
4228: LD_VAR 0 1
4232: PPUSH
4233: LD_VAR 0 2
4237: PPUSH
4238: CALL_OW 289
4242: PUSH
4243: EMPTY
4244: LIST
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: PUSH
4252: EMPTY
4253: LIST
4254: ADD
4255: ST_TO_ADDR
4256: GO 4329
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4258: LD_ADDR_EXP 14
4262: PUSH
4263: LD_EXP 14
4267: PUSH
4268: LD_VAR 0 1
4272: PPUSH
4273: CALL_OW 248
4277: PUSH
4278: LD_VAR 0 1
4282: PPUSH
4283: CALL_OW 265
4287: PUSH
4288: LD_VAR 0 1
4292: PPUSH
4293: CALL_OW 262
4297: PUSH
4298: LD_VAR 0 1
4302: PPUSH
4303: CALL_OW 263
4307: PUSH
4308: LD_VAR 0 1
4312: PPUSH
4313: CALL_OW 264
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: PUSH
4325: EMPTY
4326: LIST
4327: ADD
4328: ST_TO_ADDR
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4329: LD_EXP 14
4333: PPUSH
4334: LD_STRING 06_VehiclesIn06_1
4336: PPUSH
4337: CALL_OW 39
// end ;
4341: GO 4130
4343: POP
4344: POP
// end ; SaveCargos ;
4345: CALL 5472 0 0
// ChangeMap ( 6 , %_cont ) ;
4349: LD_INT 6
4351: PPUSH
4352: LD_STRING %_cont
4354: PPUSH
4355: CALL_OW 340
// end ; end_of_file
4359: PPOPN 2
4361: END
// export function SelectDeltaCharacters ; var i , yourPeople ; begin
4362: LD_INT 0
4364: PPUSH
4365: PPUSH
4366: PPUSH
// selectedPeople := [ ] ;
4367: LD_ADDR_EXP 17
4371: PUSH
4372: EMPTY
4373: ST_TO_ADDR
// yourPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4374: LD_ADDR_VAR 0 3
4378: PUSH
4379: LD_INT 22
4381: PUSH
4382: LD_INT 1
4384: PUSH
4385: EMPTY
4386: LIST
4387: LIST
4388: PUSH
4389: LD_INT 21
4391: PUSH
4392: LD_INT 1
4394: PUSH
4395: EMPTY
4396: LIST
4397: LIST
4398: PUSH
4399: LD_INT 2
4401: PUSH
4402: LD_INT 25
4404: PUSH
4405: LD_INT 1
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: PUSH
4412: LD_INT 25
4414: PUSH
4415: LD_INT 2
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: PUSH
4422: LD_INT 25
4424: PUSH
4425: LD_INT 3
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: PUSH
4432: LD_INT 25
4434: PUSH
4435: LD_INT 4
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: PUSH
4442: EMPTY
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: PUSH
4449: EMPTY
4450: LIST
4451: LIST
4452: LIST
4453: PPUSH
4454: CALL_OW 69
4458: PUSH
4459: LD_EXP 1
4463: PUSH
4464: LD_EXP 15
4468: PUSH
4469: LD_EXP 3
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: LIST
4478: DIFF
4479: ST_TO_ADDR
// selectedPeople := CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4480: LD_ADDR_EXP 17
4484: PUSH
4485: LD_STRING text
4487: PPUSH
4488: LD_INT 5
4490: PPUSH
4491: LD_INT 5
4493: PPUSH
4494: LD_INT -5
4496: PUSH
4497: LD_EXP 1
4501: PUSH
4502: LD_INT -6
4504: PUSH
4505: LD_INT -2
4507: PUSH
4508: LD_INT -3
4510: PUSH
4511: LD_INT -5
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: PUSH
4522: LD_VAR 0 3
4526: ADD
4527: PUSH
4528: LD_INT -6
4530: PUSH
4531: LD_INT -4
4533: PUSH
4534: LD_EXP 3
4538: PUSH
4539: LD_EXP 15
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: ADD
4550: PPUSH
4551: LD_INT 1
4553: PUSH
4554: LD_INT 3
4556: PUSH
4557: LD_INT 2
4559: PUSH
4560: LD_INT 1
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: PUSH
4567: LD_INT 4
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: PPUSH
4576: CALL_OW 42
4580: ST_TO_ADDR
// ComStop ( selectedPeople ) ;
4581: LD_EXP 17
4585: PPUSH
4586: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4590: LD_INT 22
4592: PUSH
4593: LD_INT 1
4595: PUSH
4596: EMPTY
4597: LIST
4598: LIST
4599: PUSH
4600: LD_INT 21
4602: PUSH
4603: LD_INT 1
4605: PUSH
4606: EMPTY
4607: LIST
4608: LIST
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: PPUSH
4614: CALL_OW 69
4618: PPUSH
4619: LD_INT 4
4621: PPUSH
4622: CALL_OW 235
// for i in selectedPeople do
4626: LD_ADDR_VAR 0 2
4630: PUSH
4631: LD_EXP 17
4635: PUSH
4636: FOR_IN
4637: IFFALSE 4653
// SetSide ( i , 1 ) ;
4639: LD_VAR 0 2
4643: PPUSH
4644: LD_INT 1
4646: PPUSH
4647: CALL_OW 235
4651: GO 4636
4653: POP
4654: POP
// for i in yourApemans do
4655: LD_ADDR_VAR 0 2
4659: PUSH
4660: LD_EXP 13
4664: PUSH
4665: FOR_IN
4666: IFFALSE 4682
// SetSide ( i , 1 ) ;
4668: LD_VAR 0 2
4672: PPUSH
4673: LD_INT 1
4675: PPUSH
4676: CALL_OW 235
4680: GO 4665
4682: POP
4683: POP
// SetSide ( JMM , 1 ) ;
4684: LD_EXP 1
4688: PPUSH
4689: LD_INT 1
4691: PPUSH
4692: CALL_OW 235
// SetSkill ( yourApemans , 2 , 5 ) ;
4696: LD_EXP 13
4700: PPUSH
4701: LD_INT 2
4703: PPUSH
4704: LD_INT 5
4706: PPUSH
4707: CALL_OW 237
// end ;
4711: LD_VAR 0 1
4715: RET
// export function SaveDeltaCharacters ; begin
4716: LD_INT 0
4718: PPUSH
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4719: LD_EXP 1
4723: PPUSH
4724: LD_EXP 22
4728: PUSH
4729: LD_STRING JMM
4731: STR
4732: PPUSH
4733: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4737: LD_EXP 15
4741: PPUSH
4742: LD_STRING DeltaDoctor
4744: PPUSH
4745: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4749: LD_EXP 3
4753: PPUSH
4754: LD_EXP 22
4758: PUSH
4759: LD_STRING Denis
4761: STR
4762: PPUSH
4763: CALL_OW 38
// if Lisa in selectedPeople then
4767: LD_EXP 4
4771: PUSH
4772: LD_EXP 17
4776: IN
4777: IFFALSE 4809
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4779: LD_EXP 4
4783: PPUSH
4784: LD_EXP 22
4788: PUSH
4789: LD_STRING Lisa
4791: STR
4792: PPUSH
4793: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4797: LD_INT 1
4799: PPUSH
4800: LD_STRING LisaIn06
4802: PPUSH
4803: CALL_OW 39
// end else
4807: GO 4830
// if IsOk ( Lisa ) then
4809: LD_EXP 4
4813: PPUSH
4814: CALL_OW 302
4818: IFFALSE 4830
// SaveVariable ( 1 , LisaStayInDelta ) ;
4820: LD_INT 1
4822: PPUSH
4823: LD_STRING LisaStayInDelta
4825: PPUSH
4826: CALL_OW 39
// if Bobby in selectedPeople then
4830: LD_EXP 6
4834: PUSH
4835: LD_EXP 17
4839: IN
4840: IFFALSE 4872
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4842: LD_EXP 6
4846: PPUSH
4847: LD_EXP 22
4851: PUSH
4852: LD_STRING Bobby
4854: STR
4855: PPUSH
4856: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4860: LD_INT 1
4862: PPUSH
4863: LD_STRING BobbyIn06
4865: PPUSH
4866: CALL_OW 39
// end else
4870: GO 4893
// if IsOk ( Bobby ) then
4872: LD_EXP 6
4876: PPUSH
4877: CALL_OW 302
4881: IFFALSE 4893
// SaveVariable ( 1 , BobbyStayInDelta ) ;
4883: LD_INT 1
4885: PPUSH
4886: LD_STRING BobbyStayInDelta
4888: PPUSH
4889: CALL_OW 39
// if Cyrus in selectedPeople then
4893: LD_EXP 7
4897: PUSH
4898: LD_EXP 17
4902: IN
4903: IFFALSE 4935
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4905: LD_EXP 7
4909: PPUSH
4910: LD_EXP 22
4914: PUSH
4915: LD_STRING Cyrus
4917: STR
4918: PPUSH
4919: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
4923: LD_INT 1
4925: PPUSH
4926: LD_STRING CyrusIn06
4928: PPUSH
4929: CALL_OW 39
// end else
4933: GO 4956
// if IsOk ( Cyrus ) then
4935: LD_EXP 7
4939: PPUSH
4940: CALL_OW 302
4944: IFFALSE 4956
// SaveVariable ( 1 , CyrusStayInDelta ) ;
4946: LD_INT 1
4948: PPUSH
4949: LD_STRING CyrusStayInDelta
4951: PPUSH
4952: CALL_OW 39
// if Frank in selectedPeople then
4956: LD_EXP 5
4960: PUSH
4961: LD_EXP 17
4965: IN
4966: IFFALSE 4998
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
4968: LD_EXP 5
4972: PPUSH
4973: LD_EXP 22
4977: PUSH
4978: LD_STRING Frank
4980: STR
4981: PPUSH
4982: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
4986: LD_INT 1
4988: PPUSH
4989: LD_STRING FrankIn06
4991: PPUSH
4992: CALL_OW 39
// end else
4996: GO 5019
// if IsOk ( Frank ) then
4998: LD_EXP 5
5002: PPUSH
5003: CALL_OW 302
5007: IFFALSE 5019
// SaveVariable ( 1 , FrankStayInDelta ) ;
5009: LD_INT 1
5011: PPUSH
5012: LD_STRING FrankStayInDelta
5014: PPUSH
5015: CALL_OW 39
// if Brown in selectedPeople then
5019: LD_EXP 8
5023: PUSH
5024: LD_EXP 17
5028: IN
5029: IFFALSE 5061
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5031: LD_EXP 8
5035: PPUSH
5036: LD_EXP 22
5040: PUSH
5041: LD_STRING Brown
5043: STR
5044: PPUSH
5045: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
5049: LD_INT 1
5051: PPUSH
5052: LD_STRING BrownIn06
5054: PPUSH
5055: CALL_OW 39
// end else
5059: GO 5082
// if IsOk ( Brown ) then
5061: LD_EXP 8
5065: PPUSH
5066: CALL_OW 302
5070: IFFALSE 5082
// SaveVariable ( 1 , BrownStayInDelta ) ;
5072: LD_INT 1
5074: PPUSH
5075: LD_STRING BrownStayInDelta
5077: PPUSH
5078: CALL_OW 39
// if Donaldson in selectedPeople then
5082: LD_EXP 9
5086: PUSH
5087: LD_EXP 17
5091: IN
5092: IFFALSE 5124
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5094: LD_EXP 9
5098: PPUSH
5099: LD_EXP 22
5103: PUSH
5104: LD_STRING Donaldson
5106: STR
5107: PPUSH
5108: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5112: LD_INT 1
5114: PPUSH
5115: LD_STRING DonaldsonIn06
5117: PPUSH
5118: CALL_OW 39
// end else
5122: GO 5145
// if IsOk ( Donaldson ) then
5124: LD_EXP 9
5128: PPUSH
5129: CALL_OW 302
5133: IFFALSE 5145
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5135: LD_INT 1
5137: PPUSH
5138: LD_STRING DonaldsonStayInDelta
5140: PPUSH
5141: CALL_OW 39
// if Gladstone in selectedPeople then
5145: LD_EXP 2
5149: PUSH
5150: LD_EXP 17
5154: IN
5155: IFFALSE 5187
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5157: LD_EXP 2
5161: PPUSH
5162: LD_EXP 22
5166: PUSH
5167: LD_STRING Gladstone
5169: STR
5170: PPUSH
5171: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
5175: LD_INT 1
5177: PPUSH
5178: LD_STRING GladstoneIn06
5180: PPUSH
5181: CALL_OW 39
// end else
5185: GO 5208
// if IsOk ( Gladstone ) then
5187: LD_EXP 2
5191: PPUSH
5192: CALL_OW 302
5196: IFFALSE 5208
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5198: LD_INT 1
5200: PPUSH
5201: LD_STRING GladstoneStayInDelta
5203: PPUSH
5204: CALL_OW 39
// selectedPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ;
5208: LD_ADDR_EXP 17
5212: PUSH
5213: LD_INT 22
5215: PUSH
5216: LD_INT 1
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: PUSH
5223: LD_INT 23
5225: PUSH
5226: LD_INT 1
5228: PUSH
5229: EMPTY
5230: LIST
5231: LIST
5232: PUSH
5233: LD_INT 21
5235: PUSH
5236: LD_INT 1
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: LIST
5247: PPUSH
5248: CALL_OW 69
5252: ST_TO_ADDR
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5253: LD_EXP 13
5257: PPUSH
5258: LD_STRING ApeIn06
5260: PPUSH
5261: CALL_OW 38
// SaveCharacters ( selectedPeople diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersIn06 ) ;
5265: LD_EXP 17
5269: PUSH
5270: LD_EXP 1
5274: PUSH
5275: LD_EXP 4
5279: PUSH
5280: LD_EXP 6
5284: PUSH
5285: LD_EXP 7
5289: PUSH
5290: LD_EXP 5
5294: PUSH
5295: LD_EXP 8
5299: PUSH
5300: LD_EXP 9
5304: PUSH
5305: LD_EXP 2
5309: PUSH
5310: LD_EXP 3
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: DIFF
5326: PPUSH
5327: LD_STRING OthersIn06
5329: PPUSH
5330: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersStayInDelta ) ;
5334: LD_INT 22
5336: PUSH
5337: LD_INT 4
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: PUSH
5344: LD_INT 2
5346: PUSH
5347: LD_INT 25
5349: PUSH
5350: LD_INT 1
5352: PUSH
5353: EMPTY
5354: LIST
5355: LIST
5356: PUSH
5357: LD_INT 25
5359: PUSH
5360: LD_INT 2
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: PUSH
5367: LD_INT 25
5369: PUSH
5370: LD_INT 3
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: PUSH
5377: LD_INT 25
5379: PUSH
5380: LD_INT 4
5382: PUSH
5383: EMPTY
5384: LIST
5385: LIST
5386: PUSH
5387: EMPTY
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: PPUSH
5398: CALL_OW 69
5402: PUSH
5403: LD_EXP 15
5407: PUSH
5408: LD_EXP 4
5412: PUSH
5413: LD_EXP 6
5417: PUSH
5418: LD_EXP 7
5422: PUSH
5423: LD_EXP 5
5427: PUSH
5428: LD_EXP 8
5432: PUSH
5433: LD_EXP 9
5437: PUSH
5438: LD_EXP 2
5442: PUSH
5443: LD_EXP 3
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: LIST
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: LIST
5458: DIFF
5459: PPUSH
5460: LD_STRING OthersStayInDelta
5462: PPUSH
5463: CALL_OW 38
// end ;
5467: LD_VAR 0 1
5471: RET
// export function SaveCargos ; var i ; begin
5472: LD_INT 0
5474: PPUSH
5475: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
5476: LD_ADDR_VAR 0 2
5480: PUSH
5481: LD_INT 3
5483: PPUSH
5484: LD_INT 22
5486: PUSH
5487: LD_INT 1
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: PUSH
5494: LD_INT 34
5496: PUSH
5497: LD_INT 12
5499: PUSH
5500: EMPTY
5501: LIST
5502: LIST
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: PPUSH
5508: CALL_OW 70
5512: PUSH
5513: FOR_IN
5514: IFFALSE 5542
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
5516: LD_ADDR_EXP 21
5520: PUSH
5521: LD_EXP 21
5525: PUSH
5526: LD_VAR 0 2
5530: PPUSH
5531: CALL 66633 0 1
5535: PUSH
5536: EMPTY
5537: LIST
5538: ADD
5539: ST_TO_ADDR
5540: GO 5513
5542: POP
5543: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
5544: LD_EXP 21
5548: PPUSH
5549: LD_STRING 06_ResourcesInCargo06_1
5551: PPUSH
5552: CALL_OW 39
// end ; end_of_file
5556: LD_VAR 0 1
5560: RET
// on Command ( comandid ) do var i ;
5561: LD_INT 0
5563: PPUSH
// begin if comandid = 65 then
5564: LD_VAR 0 1
5568: PUSH
5569: LD_INT 65
5571: EQUAL
5572: IFFALSE 5613
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5574: LD_ADDR_VAR 0 2
5578: PUSH
5579: LD_INT 22
5581: PUSH
5582: LD_INT 1
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: PUSH
5589: EMPTY
5590: LIST
5591: PPUSH
5592: CALL_OW 69
5596: PUSH
5597: FOR_IN
5598: IFFALSE 5611
// ComStop ( i ) ;
5600: LD_VAR 0 2
5604: PPUSH
5605: CALL_OW 141
5609: GO 5597
5611: POP
5612: POP
// end ;
5613: PPOPN 2
5615: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5616: LD_INT 0
5618: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5619: LD_ADDR_VAR 0 3
5623: PUSH
5624: LD_INT 22
5626: PUSH
5627: LD_INT 1
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: PUSH
5634: LD_INT 21
5636: PUSH
5637: LD_INT 3
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: PUSH
5644: LD_INT 30
5646: PUSH
5647: LD_INT 0
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: PUSH
5654: EMPTY
5655: LIST
5656: LIST
5657: LIST
5658: PPUSH
5659: CALL_OW 69
5663: ST_TO_ADDR
// if not tmp then
5664: LD_VAR 0 3
5668: NOT
5669: IFFALSE 5673
// exit ;
5671: GO 5703
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5673: LD_VAR 0 1
5677: PPUSH
5678: LD_VAR 0 3
5682: PUSH
5683: LD_INT 1
5685: ARRAY
5686: PPUSH
5687: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5691: LD_VAR 0 1
5695: PPUSH
5696: LD_INT 4
5698: PPUSH
5699: CALL_OW 235
// end ;
5703: PPOPN 3
5705: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5706: LD_VAR 0 1
5710: PUSH
5711: LD_EXP 1
5715: EQUAL
5716: IFFALSE 5725
// YouLost ( JMM ) ;
5718: LD_STRING JMM
5720: PPUSH
5721: CALL_OW 104
// SOS_UnitDestroyed ( un ) ;
5725: LD_VAR 0 1
5729: PPUSH
5730: CALL 21403 0 1
// end ;
5734: PPOPN 1
5736: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5737: LD_VAR 0 1
5741: PPUSH
5742: LD_VAR 0 2
5746: PPUSH
5747: CALL 21523 0 2
// end ; end_of_file
5751: PPOPN 2
5753: END
// every 0 0$1 do
5754: GO 5756
5756: DISABLE
// begin enable ;
5757: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5758: LD_STRING updateTimer(
5760: PUSH
5761: LD_OWVAR 1
5765: STR
5766: PUSH
5767: LD_STRING );
5769: STR
5770: PPUSH
5771: CALL_OW 559
// end ;
5775: END
// export function SOS_MapStart ( ) ; begin
5776: LD_INT 0
5778: PPUSH
// if streamModeActive then
5779: LD_EXP 24
5783: IFFALSE 5792
// DefineStreamItems ( true ) ;
5785: LD_INT 1
5787: PPUSH
5788: CALL 7446 0 1
// UpdateFactoryWaypoints ( ) ;
5792: CALL 20307 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5796: CALL 20564 0 0
// end ;
5800: LD_VAR 0 1
5804: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5805: LD_INT 0
5807: PPUSH
// if p2 = 100 then
5808: LD_VAR 0 2
5812: PUSH
5813: LD_INT 100
5815: EQUAL
5816: IFFALSE 6819
// begin if not StreamModeActive then
5818: LD_EXP 24
5822: NOT
5823: IFFALSE 5833
// StreamModeActive := true ;
5825: LD_ADDR_EXP 24
5829: PUSH
5830: LD_INT 1
5832: ST_TO_ADDR
// if p3 = 0 then
5833: LD_VAR 0 3
5837: PUSH
5838: LD_INT 0
5840: EQUAL
5841: IFFALSE 5847
// InitStreamMode ;
5843: CALL 6982 0 0
// if p3 = 1 then
5847: LD_VAR 0 3
5851: PUSH
5852: LD_INT 1
5854: EQUAL
5855: IFFALSE 5865
// sRocket := true ;
5857: LD_ADDR_EXP 29
5861: PUSH
5862: LD_INT 1
5864: ST_TO_ADDR
// if p3 = 2 then
5865: LD_VAR 0 3
5869: PUSH
5870: LD_INT 2
5872: EQUAL
5873: IFFALSE 5883
// sSpeed := true ;
5875: LD_ADDR_EXP 28
5879: PUSH
5880: LD_INT 1
5882: ST_TO_ADDR
// if p3 = 3 then
5883: LD_VAR 0 3
5887: PUSH
5888: LD_INT 3
5890: EQUAL
5891: IFFALSE 5901
// sEngine := true ;
5893: LD_ADDR_EXP 30
5897: PUSH
5898: LD_INT 1
5900: ST_TO_ADDR
// if p3 = 4 then
5901: LD_VAR 0 3
5905: PUSH
5906: LD_INT 4
5908: EQUAL
5909: IFFALSE 5919
// sSpec := true ;
5911: LD_ADDR_EXP 27
5915: PUSH
5916: LD_INT 1
5918: ST_TO_ADDR
// if p3 = 5 then
5919: LD_VAR 0 3
5923: PUSH
5924: LD_INT 5
5926: EQUAL
5927: IFFALSE 5937
// sLevel := true ;
5929: LD_ADDR_EXP 31
5933: PUSH
5934: LD_INT 1
5936: ST_TO_ADDR
// if p3 = 6 then
5937: LD_VAR 0 3
5941: PUSH
5942: LD_INT 6
5944: EQUAL
5945: IFFALSE 5955
// sArmoury := true ;
5947: LD_ADDR_EXP 32
5951: PUSH
5952: LD_INT 1
5954: ST_TO_ADDR
// if p3 = 7 then
5955: LD_VAR 0 3
5959: PUSH
5960: LD_INT 7
5962: EQUAL
5963: IFFALSE 5973
// sRadar := true ;
5965: LD_ADDR_EXP 33
5969: PUSH
5970: LD_INT 1
5972: ST_TO_ADDR
// if p3 = 8 then
5973: LD_VAR 0 3
5977: PUSH
5978: LD_INT 8
5980: EQUAL
5981: IFFALSE 5991
// sBunker := true ;
5983: LD_ADDR_EXP 34
5987: PUSH
5988: LD_INT 1
5990: ST_TO_ADDR
// if p3 = 9 then
5991: LD_VAR 0 3
5995: PUSH
5996: LD_INT 9
5998: EQUAL
5999: IFFALSE 6009
// sHack := true ;
6001: LD_ADDR_EXP 35
6005: PUSH
6006: LD_INT 1
6008: ST_TO_ADDR
// if p3 = 10 then
6009: LD_VAR 0 3
6013: PUSH
6014: LD_INT 10
6016: EQUAL
6017: IFFALSE 6027
// sFire := true ;
6019: LD_ADDR_EXP 36
6023: PUSH
6024: LD_INT 1
6026: ST_TO_ADDR
// if p3 = 11 then
6027: LD_VAR 0 3
6031: PUSH
6032: LD_INT 11
6034: EQUAL
6035: IFFALSE 6045
// sRefresh := true ;
6037: LD_ADDR_EXP 37
6041: PUSH
6042: LD_INT 1
6044: ST_TO_ADDR
// if p3 = 12 then
6045: LD_VAR 0 3
6049: PUSH
6050: LD_INT 12
6052: EQUAL
6053: IFFALSE 6063
// sExp := true ;
6055: LD_ADDR_EXP 38
6059: PUSH
6060: LD_INT 1
6062: ST_TO_ADDR
// if p3 = 13 then
6063: LD_VAR 0 3
6067: PUSH
6068: LD_INT 13
6070: EQUAL
6071: IFFALSE 6081
// sDepot := true ;
6073: LD_ADDR_EXP 39
6077: PUSH
6078: LD_INT 1
6080: ST_TO_ADDR
// if p3 = 14 then
6081: LD_VAR 0 3
6085: PUSH
6086: LD_INT 14
6088: EQUAL
6089: IFFALSE 6099
// sFlag := true ;
6091: LD_ADDR_EXP 40
6095: PUSH
6096: LD_INT 1
6098: ST_TO_ADDR
// if p3 = 15 then
6099: LD_VAR 0 3
6103: PUSH
6104: LD_INT 15
6106: EQUAL
6107: IFFALSE 6117
// sKamikadze := true ;
6109: LD_ADDR_EXP 48
6113: PUSH
6114: LD_INT 1
6116: ST_TO_ADDR
// if p3 = 16 then
6117: LD_VAR 0 3
6121: PUSH
6122: LD_INT 16
6124: EQUAL
6125: IFFALSE 6135
// sTroll := true ;
6127: LD_ADDR_EXP 49
6131: PUSH
6132: LD_INT 1
6134: ST_TO_ADDR
// if p3 = 17 then
6135: LD_VAR 0 3
6139: PUSH
6140: LD_INT 17
6142: EQUAL
6143: IFFALSE 6153
// sSlow := true ;
6145: LD_ADDR_EXP 50
6149: PUSH
6150: LD_INT 1
6152: ST_TO_ADDR
// if p3 = 18 then
6153: LD_VAR 0 3
6157: PUSH
6158: LD_INT 18
6160: EQUAL
6161: IFFALSE 6171
// sLack := true ;
6163: LD_ADDR_EXP 51
6167: PUSH
6168: LD_INT 1
6170: ST_TO_ADDR
// if p3 = 19 then
6171: LD_VAR 0 3
6175: PUSH
6176: LD_INT 19
6178: EQUAL
6179: IFFALSE 6189
// sTank := true ;
6181: LD_ADDR_EXP 53
6185: PUSH
6186: LD_INT 1
6188: ST_TO_ADDR
// if p3 = 20 then
6189: LD_VAR 0 3
6193: PUSH
6194: LD_INT 20
6196: EQUAL
6197: IFFALSE 6207
// sRemote := true ;
6199: LD_ADDR_EXP 54
6203: PUSH
6204: LD_INT 1
6206: ST_TO_ADDR
// if p3 = 21 then
6207: LD_VAR 0 3
6211: PUSH
6212: LD_INT 21
6214: EQUAL
6215: IFFALSE 6225
// sPowell := true ;
6217: LD_ADDR_EXP 55
6221: PUSH
6222: LD_INT 1
6224: ST_TO_ADDR
// if p3 = 22 then
6225: LD_VAR 0 3
6229: PUSH
6230: LD_INT 22
6232: EQUAL
6233: IFFALSE 6243
// sTeleport := true ;
6235: LD_ADDR_EXP 58
6239: PUSH
6240: LD_INT 1
6242: ST_TO_ADDR
// if p3 = 23 then
6243: LD_VAR 0 3
6247: PUSH
6248: LD_INT 23
6250: EQUAL
6251: IFFALSE 6261
// sOilTower := true ;
6253: LD_ADDR_EXP 60
6257: PUSH
6258: LD_INT 1
6260: ST_TO_ADDR
// if p3 = 24 then
6261: LD_VAR 0 3
6265: PUSH
6266: LD_INT 24
6268: EQUAL
6269: IFFALSE 6279
// sShovel := true ;
6271: LD_ADDR_EXP 61
6275: PUSH
6276: LD_INT 1
6278: ST_TO_ADDR
// if p3 = 25 then
6279: LD_VAR 0 3
6283: PUSH
6284: LD_INT 25
6286: EQUAL
6287: IFFALSE 6297
// sSheik := true ;
6289: LD_ADDR_EXP 62
6293: PUSH
6294: LD_INT 1
6296: ST_TO_ADDR
// if p3 = 26 then
6297: LD_VAR 0 3
6301: PUSH
6302: LD_INT 26
6304: EQUAL
6305: IFFALSE 6315
// sEarthquake := true ;
6307: LD_ADDR_EXP 64
6311: PUSH
6312: LD_INT 1
6314: ST_TO_ADDR
// if p3 = 27 then
6315: LD_VAR 0 3
6319: PUSH
6320: LD_INT 27
6322: EQUAL
6323: IFFALSE 6333
// sAI := true ;
6325: LD_ADDR_EXP 65
6329: PUSH
6330: LD_INT 1
6332: ST_TO_ADDR
// if p3 = 28 then
6333: LD_VAR 0 3
6337: PUSH
6338: LD_INT 28
6340: EQUAL
6341: IFFALSE 6351
// sCargo := true ;
6343: LD_ADDR_EXP 68
6347: PUSH
6348: LD_INT 1
6350: ST_TO_ADDR
// if p3 = 29 then
6351: LD_VAR 0 3
6355: PUSH
6356: LD_INT 29
6358: EQUAL
6359: IFFALSE 6369
// sDLaser := true ;
6361: LD_ADDR_EXP 69
6365: PUSH
6366: LD_INT 1
6368: ST_TO_ADDR
// if p3 = 30 then
6369: LD_VAR 0 3
6373: PUSH
6374: LD_INT 30
6376: EQUAL
6377: IFFALSE 6387
// sExchange := true ;
6379: LD_ADDR_EXP 70
6383: PUSH
6384: LD_INT 1
6386: ST_TO_ADDR
// if p3 = 31 then
6387: LD_VAR 0 3
6391: PUSH
6392: LD_INT 31
6394: EQUAL
6395: IFFALSE 6405
// sFac := true ;
6397: LD_ADDR_EXP 71
6401: PUSH
6402: LD_INT 1
6404: ST_TO_ADDR
// if p3 = 32 then
6405: LD_VAR 0 3
6409: PUSH
6410: LD_INT 32
6412: EQUAL
6413: IFFALSE 6423
// sPower := true ;
6415: LD_ADDR_EXP 72
6419: PUSH
6420: LD_INT 1
6422: ST_TO_ADDR
// if p3 = 33 then
6423: LD_VAR 0 3
6427: PUSH
6428: LD_INT 33
6430: EQUAL
6431: IFFALSE 6441
// sRandom := true ;
6433: LD_ADDR_EXP 73
6437: PUSH
6438: LD_INT 1
6440: ST_TO_ADDR
// if p3 = 34 then
6441: LD_VAR 0 3
6445: PUSH
6446: LD_INT 34
6448: EQUAL
6449: IFFALSE 6459
// sShield := true ;
6451: LD_ADDR_EXP 74
6455: PUSH
6456: LD_INT 1
6458: ST_TO_ADDR
// if p3 = 35 then
6459: LD_VAR 0 3
6463: PUSH
6464: LD_INT 35
6466: EQUAL
6467: IFFALSE 6477
// sTime := true ;
6469: LD_ADDR_EXP 75
6473: PUSH
6474: LD_INT 1
6476: ST_TO_ADDR
// if p3 = 36 then
6477: LD_VAR 0 3
6481: PUSH
6482: LD_INT 36
6484: EQUAL
6485: IFFALSE 6495
// sTools := true ;
6487: LD_ADDR_EXP 76
6491: PUSH
6492: LD_INT 1
6494: ST_TO_ADDR
// if p3 = 101 then
6495: LD_VAR 0 3
6499: PUSH
6500: LD_INT 101
6502: EQUAL
6503: IFFALSE 6513
// sSold := true ;
6505: LD_ADDR_EXP 41
6509: PUSH
6510: LD_INT 1
6512: ST_TO_ADDR
// if p3 = 102 then
6513: LD_VAR 0 3
6517: PUSH
6518: LD_INT 102
6520: EQUAL
6521: IFFALSE 6531
// sDiff := true ;
6523: LD_ADDR_EXP 42
6527: PUSH
6528: LD_INT 1
6530: ST_TO_ADDR
// if p3 = 103 then
6531: LD_VAR 0 3
6535: PUSH
6536: LD_INT 103
6538: EQUAL
6539: IFFALSE 6549
// sFog := true ;
6541: LD_ADDR_EXP 45
6545: PUSH
6546: LD_INT 1
6548: ST_TO_ADDR
// if p3 = 104 then
6549: LD_VAR 0 3
6553: PUSH
6554: LD_INT 104
6556: EQUAL
6557: IFFALSE 6567
// sReset := true ;
6559: LD_ADDR_EXP 46
6563: PUSH
6564: LD_INT 1
6566: ST_TO_ADDR
// if p3 = 105 then
6567: LD_VAR 0 3
6571: PUSH
6572: LD_INT 105
6574: EQUAL
6575: IFFALSE 6585
// sSun := true ;
6577: LD_ADDR_EXP 47
6581: PUSH
6582: LD_INT 1
6584: ST_TO_ADDR
// if p3 = 106 then
6585: LD_VAR 0 3
6589: PUSH
6590: LD_INT 106
6592: EQUAL
6593: IFFALSE 6603
// sTiger := true ;
6595: LD_ADDR_EXP 43
6599: PUSH
6600: LD_INT 1
6602: ST_TO_ADDR
// if p3 = 107 then
6603: LD_VAR 0 3
6607: PUSH
6608: LD_INT 107
6610: EQUAL
6611: IFFALSE 6621
// sBomb := true ;
6613: LD_ADDR_EXP 44
6617: PUSH
6618: LD_INT 1
6620: ST_TO_ADDR
// if p3 = 108 then
6621: LD_VAR 0 3
6625: PUSH
6626: LD_INT 108
6628: EQUAL
6629: IFFALSE 6639
// sWound := true ;
6631: LD_ADDR_EXP 52
6635: PUSH
6636: LD_INT 1
6638: ST_TO_ADDR
// if p3 = 109 then
6639: LD_VAR 0 3
6643: PUSH
6644: LD_INT 109
6646: EQUAL
6647: IFFALSE 6657
// sBetray := true ;
6649: LD_ADDR_EXP 56
6653: PUSH
6654: LD_INT 1
6656: ST_TO_ADDR
// if p3 = 110 then
6657: LD_VAR 0 3
6661: PUSH
6662: LD_INT 110
6664: EQUAL
6665: IFFALSE 6675
// sContamin := true ;
6667: LD_ADDR_EXP 57
6671: PUSH
6672: LD_INT 1
6674: ST_TO_ADDR
// if p3 = 111 then
6675: LD_VAR 0 3
6679: PUSH
6680: LD_INT 111
6682: EQUAL
6683: IFFALSE 6693
// sOil := true ;
6685: LD_ADDR_EXP 59
6689: PUSH
6690: LD_INT 1
6692: ST_TO_ADDR
// if p3 = 112 then
6693: LD_VAR 0 3
6697: PUSH
6698: LD_INT 112
6700: EQUAL
6701: IFFALSE 6711
// sStu := true ;
6703: LD_ADDR_EXP 63
6707: PUSH
6708: LD_INT 1
6710: ST_TO_ADDR
// if p3 = 113 then
6711: LD_VAR 0 3
6715: PUSH
6716: LD_INT 113
6718: EQUAL
6719: IFFALSE 6729
// sBazooka := true ;
6721: LD_ADDR_EXP 66
6725: PUSH
6726: LD_INT 1
6728: ST_TO_ADDR
// if p3 = 114 then
6729: LD_VAR 0 3
6733: PUSH
6734: LD_INT 114
6736: EQUAL
6737: IFFALSE 6747
// sMortar := true ;
6739: LD_ADDR_EXP 67
6743: PUSH
6744: LD_INT 1
6746: ST_TO_ADDR
// if p3 = 115 then
6747: LD_VAR 0 3
6751: PUSH
6752: LD_INT 115
6754: EQUAL
6755: IFFALSE 6765
// sRanger := true ;
6757: LD_ADDR_EXP 77
6761: PUSH
6762: LD_INT 1
6764: ST_TO_ADDR
// if p3 = 116 then
6765: LD_VAR 0 3
6769: PUSH
6770: LD_INT 116
6772: EQUAL
6773: IFFALSE 6783
// sComputer := true ;
6775: LD_ADDR_EXP 78
6779: PUSH
6780: LD_INT 1
6782: ST_TO_ADDR
// if p3 = 117 then
6783: LD_VAR 0 3
6787: PUSH
6788: LD_INT 117
6790: EQUAL
6791: IFFALSE 6801
// s30 := true ;
6793: LD_ADDR_EXP 79
6797: PUSH
6798: LD_INT 1
6800: ST_TO_ADDR
// if p3 = 118 then
6801: LD_VAR 0 3
6805: PUSH
6806: LD_INT 118
6808: EQUAL
6809: IFFALSE 6819
// s60 := true ;
6811: LD_ADDR_EXP 80
6815: PUSH
6816: LD_INT 1
6818: ST_TO_ADDR
// end ; if p2 = 101 then
6819: LD_VAR 0 2
6823: PUSH
6824: LD_INT 101
6826: EQUAL
6827: IFFALSE 6955
// begin case p3 of 1 :
6829: LD_VAR 0 3
6833: PUSH
6834: LD_INT 1
6836: DOUBLE
6837: EQUAL
6838: IFTRUE 6842
6840: GO 6849
6842: POP
// hHackUnlimitedResources ; 2 :
6843: CALL 19053 0 0
6847: GO 6955
6849: LD_INT 2
6851: DOUBLE
6852: EQUAL
6853: IFTRUE 6857
6855: GO 6864
6857: POP
// hHackSetLevel10 ; 3 :
6858: CALL 19186 0 0
6862: GO 6955
6864: LD_INT 3
6866: DOUBLE
6867: EQUAL
6868: IFTRUE 6872
6870: GO 6879
6872: POP
// hHackSetLevel10YourUnits ; 4 :
6873: CALL 19271 0 0
6877: GO 6955
6879: LD_INT 4
6881: DOUBLE
6882: EQUAL
6883: IFTRUE 6887
6885: GO 6894
6887: POP
// hHackInvincible ; 5 :
6888: CALL 19719 0 0
6892: GO 6955
6894: LD_INT 5
6896: DOUBLE
6897: EQUAL
6898: IFTRUE 6902
6900: GO 6909
6902: POP
// hHackInvisible ; 6 :
6903: CALL 19830 0 0
6907: GO 6955
6909: LD_INT 6
6911: DOUBLE
6912: EQUAL
6913: IFTRUE 6917
6915: GO 6924
6917: POP
// hHackChangeYourSide ; 7 :
6918: CALL 19887 0 0
6922: GO 6955
6924: LD_INT 7
6926: DOUBLE
6927: EQUAL
6928: IFTRUE 6932
6930: GO 6939
6932: POP
// hHackChangeUnitSide ; 8 :
6933: CALL 19929 0 0
6937: GO 6955
6939: LD_INT 8
6941: DOUBLE
6942: EQUAL
6943: IFTRUE 6947
6945: GO 6954
6947: POP
// hHackFog ; end ;
6948: CALL 20030 0 0
6952: GO 6955
6954: POP
// end ; end ;
6955: LD_VAR 0 7
6959: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
6960: GO 6962
6962: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6963: LD_STRING initStreamRollete();
6965: PPUSH
6966: CALL_OW 559
// InitStreamMode ;
6970: CALL 6982 0 0
// DefineStreamItems ( false ) ;
6974: LD_INT 0
6976: PPUSH
6977: CALL 7446 0 1
// end ;
6981: END
// function InitStreamMode ; begin
6982: LD_INT 0
6984: PPUSH
// streamModeActive := false ;
6985: LD_ADDR_EXP 24
6989: PUSH
6990: LD_INT 0
6992: ST_TO_ADDR
// normalCounter := 36 ;
6993: LD_ADDR_EXP 25
6997: PUSH
6998: LD_INT 36
7000: ST_TO_ADDR
// hardcoreCounter := 18 ;
7001: LD_ADDR_EXP 26
7005: PUSH
7006: LD_INT 18
7008: ST_TO_ADDR
// sRocket := false ;
7009: LD_ADDR_EXP 29
7013: PUSH
7014: LD_INT 0
7016: ST_TO_ADDR
// sSpeed := false ;
7017: LD_ADDR_EXP 28
7021: PUSH
7022: LD_INT 0
7024: ST_TO_ADDR
// sEngine := false ;
7025: LD_ADDR_EXP 30
7029: PUSH
7030: LD_INT 0
7032: ST_TO_ADDR
// sSpec := false ;
7033: LD_ADDR_EXP 27
7037: PUSH
7038: LD_INT 0
7040: ST_TO_ADDR
// sLevel := false ;
7041: LD_ADDR_EXP 31
7045: PUSH
7046: LD_INT 0
7048: ST_TO_ADDR
// sArmoury := false ;
7049: LD_ADDR_EXP 32
7053: PUSH
7054: LD_INT 0
7056: ST_TO_ADDR
// sRadar := false ;
7057: LD_ADDR_EXP 33
7061: PUSH
7062: LD_INT 0
7064: ST_TO_ADDR
// sBunker := false ;
7065: LD_ADDR_EXP 34
7069: PUSH
7070: LD_INT 0
7072: ST_TO_ADDR
// sHack := false ;
7073: LD_ADDR_EXP 35
7077: PUSH
7078: LD_INT 0
7080: ST_TO_ADDR
// sFire := false ;
7081: LD_ADDR_EXP 36
7085: PUSH
7086: LD_INT 0
7088: ST_TO_ADDR
// sRefresh := false ;
7089: LD_ADDR_EXP 37
7093: PUSH
7094: LD_INT 0
7096: ST_TO_ADDR
// sExp := false ;
7097: LD_ADDR_EXP 38
7101: PUSH
7102: LD_INT 0
7104: ST_TO_ADDR
// sDepot := false ;
7105: LD_ADDR_EXP 39
7109: PUSH
7110: LD_INT 0
7112: ST_TO_ADDR
// sFlag := false ;
7113: LD_ADDR_EXP 40
7117: PUSH
7118: LD_INT 0
7120: ST_TO_ADDR
// sKamikadze := false ;
7121: LD_ADDR_EXP 48
7125: PUSH
7126: LD_INT 0
7128: ST_TO_ADDR
// sTroll := false ;
7129: LD_ADDR_EXP 49
7133: PUSH
7134: LD_INT 0
7136: ST_TO_ADDR
// sSlow := false ;
7137: LD_ADDR_EXP 50
7141: PUSH
7142: LD_INT 0
7144: ST_TO_ADDR
// sLack := false ;
7145: LD_ADDR_EXP 51
7149: PUSH
7150: LD_INT 0
7152: ST_TO_ADDR
// sTank := false ;
7153: LD_ADDR_EXP 53
7157: PUSH
7158: LD_INT 0
7160: ST_TO_ADDR
// sRemote := false ;
7161: LD_ADDR_EXP 54
7165: PUSH
7166: LD_INT 0
7168: ST_TO_ADDR
// sPowell := false ;
7169: LD_ADDR_EXP 55
7173: PUSH
7174: LD_INT 0
7176: ST_TO_ADDR
// sTeleport := false ;
7177: LD_ADDR_EXP 58
7181: PUSH
7182: LD_INT 0
7184: ST_TO_ADDR
// sOilTower := false ;
7185: LD_ADDR_EXP 60
7189: PUSH
7190: LD_INT 0
7192: ST_TO_ADDR
// sShovel := false ;
7193: LD_ADDR_EXP 61
7197: PUSH
7198: LD_INT 0
7200: ST_TO_ADDR
// sSheik := false ;
7201: LD_ADDR_EXP 62
7205: PUSH
7206: LD_INT 0
7208: ST_TO_ADDR
// sEarthquake := false ;
7209: LD_ADDR_EXP 64
7213: PUSH
7214: LD_INT 0
7216: ST_TO_ADDR
// sAI := false ;
7217: LD_ADDR_EXP 65
7221: PUSH
7222: LD_INT 0
7224: ST_TO_ADDR
// sCargo := false ;
7225: LD_ADDR_EXP 68
7229: PUSH
7230: LD_INT 0
7232: ST_TO_ADDR
// sDLaser := false ;
7233: LD_ADDR_EXP 69
7237: PUSH
7238: LD_INT 0
7240: ST_TO_ADDR
// sExchange := false ;
7241: LD_ADDR_EXP 70
7245: PUSH
7246: LD_INT 0
7248: ST_TO_ADDR
// sFac := false ;
7249: LD_ADDR_EXP 71
7253: PUSH
7254: LD_INT 0
7256: ST_TO_ADDR
// sPower := false ;
7257: LD_ADDR_EXP 72
7261: PUSH
7262: LD_INT 0
7264: ST_TO_ADDR
// sRandom := false ;
7265: LD_ADDR_EXP 73
7269: PUSH
7270: LD_INT 0
7272: ST_TO_ADDR
// sShield := false ;
7273: LD_ADDR_EXP 74
7277: PUSH
7278: LD_INT 0
7280: ST_TO_ADDR
// sTime := false ;
7281: LD_ADDR_EXP 75
7285: PUSH
7286: LD_INT 0
7288: ST_TO_ADDR
// sTools := false ;
7289: LD_ADDR_EXP 76
7293: PUSH
7294: LD_INT 0
7296: ST_TO_ADDR
// sSold := false ;
7297: LD_ADDR_EXP 41
7301: PUSH
7302: LD_INT 0
7304: ST_TO_ADDR
// sDiff := false ;
7305: LD_ADDR_EXP 42
7309: PUSH
7310: LD_INT 0
7312: ST_TO_ADDR
// sFog := false ;
7313: LD_ADDR_EXP 45
7317: PUSH
7318: LD_INT 0
7320: ST_TO_ADDR
// sReset := false ;
7321: LD_ADDR_EXP 46
7325: PUSH
7326: LD_INT 0
7328: ST_TO_ADDR
// sSun := false ;
7329: LD_ADDR_EXP 47
7333: PUSH
7334: LD_INT 0
7336: ST_TO_ADDR
// sTiger := false ;
7337: LD_ADDR_EXP 43
7341: PUSH
7342: LD_INT 0
7344: ST_TO_ADDR
// sBomb := false ;
7345: LD_ADDR_EXP 44
7349: PUSH
7350: LD_INT 0
7352: ST_TO_ADDR
// sWound := false ;
7353: LD_ADDR_EXP 52
7357: PUSH
7358: LD_INT 0
7360: ST_TO_ADDR
// sBetray := false ;
7361: LD_ADDR_EXP 56
7365: PUSH
7366: LD_INT 0
7368: ST_TO_ADDR
// sContamin := false ;
7369: LD_ADDR_EXP 57
7373: PUSH
7374: LD_INT 0
7376: ST_TO_ADDR
// sOil := false ;
7377: LD_ADDR_EXP 59
7381: PUSH
7382: LD_INT 0
7384: ST_TO_ADDR
// sStu := false ;
7385: LD_ADDR_EXP 63
7389: PUSH
7390: LD_INT 0
7392: ST_TO_ADDR
// sBazooka := false ;
7393: LD_ADDR_EXP 66
7397: PUSH
7398: LD_INT 0
7400: ST_TO_ADDR
// sMortar := false ;
7401: LD_ADDR_EXP 67
7405: PUSH
7406: LD_INT 0
7408: ST_TO_ADDR
// sRanger := false ;
7409: LD_ADDR_EXP 77
7413: PUSH
7414: LD_INT 0
7416: ST_TO_ADDR
// sComputer := false ;
7417: LD_ADDR_EXP 78
7421: PUSH
7422: LD_INT 0
7424: ST_TO_ADDR
// s30 := false ;
7425: LD_ADDR_EXP 79
7429: PUSH
7430: LD_INT 0
7432: ST_TO_ADDR
// s60 := false ;
7433: LD_ADDR_EXP 80
7437: PUSH
7438: LD_INT 0
7440: ST_TO_ADDR
// end ;
7441: LD_VAR 0 1
7445: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7446: LD_INT 0
7448: PPUSH
7449: PPUSH
7450: PPUSH
7451: PPUSH
7452: PPUSH
7453: PPUSH
7454: PPUSH
// result := [ ] ;
7455: LD_ADDR_VAR 0 2
7459: PUSH
7460: EMPTY
7461: ST_TO_ADDR
// if campaign_id = 1 then
7462: LD_OWVAR 69
7466: PUSH
7467: LD_INT 1
7469: EQUAL
7470: IFFALSE 10636
// begin case mission_number of 1 :
7472: LD_OWVAR 70
7476: PUSH
7477: LD_INT 1
7479: DOUBLE
7480: EQUAL
7481: IFTRUE 7485
7483: GO 7561
7485: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7486: LD_ADDR_VAR 0 2
7490: PUSH
7491: LD_INT 2
7493: PUSH
7494: LD_INT 4
7496: PUSH
7497: LD_INT 11
7499: PUSH
7500: LD_INT 12
7502: PUSH
7503: LD_INT 15
7505: PUSH
7506: LD_INT 16
7508: PUSH
7509: LD_INT 22
7511: PUSH
7512: LD_INT 23
7514: PUSH
7515: LD_INT 26
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: PUSH
7529: LD_INT 101
7531: PUSH
7532: LD_INT 102
7534: PUSH
7535: LD_INT 106
7537: PUSH
7538: LD_INT 116
7540: PUSH
7541: LD_INT 117
7543: PUSH
7544: LD_INT 118
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: ST_TO_ADDR
7559: GO 10634
7561: LD_INT 2
7563: DOUBLE
7564: EQUAL
7565: IFTRUE 7569
7567: GO 7653
7569: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7570: LD_ADDR_VAR 0 2
7574: PUSH
7575: LD_INT 2
7577: PUSH
7578: LD_INT 4
7580: PUSH
7581: LD_INT 11
7583: PUSH
7584: LD_INT 12
7586: PUSH
7587: LD_INT 15
7589: PUSH
7590: LD_INT 16
7592: PUSH
7593: LD_INT 22
7595: PUSH
7596: LD_INT 23
7598: PUSH
7599: LD_INT 26
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: PUSH
7613: LD_INT 101
7615: PUSH
7616: LD_INT 102
7618: PUSH
7619: LD_INT 105
7621: PUSH
7622: LD_INT 106
7624: PUSH
7625: LD_INT 108
7627: PUSH
7628: LD_INT 116
7630: PUSH
7631: LD_INT 117
7633: PUSH
7634: LD_INT 118
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: ST_TO_ADDR
7651: GO 10634
7653: LD_INT 3
7655: DOUBLE
7656: EQUAL
7657: IFTRUE 7661
7659: GO 7749
7661: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7662: LD_ADDR_VAR 0 2
7666: PUSH
7667: LD_INT 2
7669: PUSH
7670: LD_INT 4
7672: PUSH
7673: LD_INT 5
7675: PUSH
7676: LD_INT 11
7678: PUSH
7679: LD_INT 12
7681: PUSH
7682: LD_INT 15
7684: PUSH
7685: LD_INT 16
7687: PUSH
7688: LD_INT 22
7690: PUSH
7691: LD_INT 26
7693: PUSH
7694: LD_INT 36
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: PUSH
7709: LD_INT 101
7711: PUSH
7712: LD_INT 102
7714: PUSH
7715: LD_INT 105
7717: PUSH
7718: LD_INT 106
7720: PUSH
7721: LD_INT 108
7723: PUSH
7724: LD_INT 116
7726: PUSH
7727: LD_INT 117
7729: PUSH
7730: LD_INT 118
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: ST_TO_ADDR
7747: GO 10634
7749: LD_INT 4
7751: DOUBLE
7752: EQUAL
7753: IFTRUE 7757
7755: GO 7853
7757: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7758: LD_ADDR_VAR 0 2
7762: PUSH
7763: LD_INT 2
7765: PUSH
7766: LD_INT 4
7768: PUSH
7769: LD_INT 5
7771: PUSH
7772: LD_INT 8
7774: PUSH
7775: LD_INT 11
7777: PUSH
7778: LD_INT 12
7780: PUSH
7781: LD_INT 15
7783: PUSH
7784: LD_INT 16
7786: PUSH
7787: LD_INT 22
7789: PUSH
7790: LD_INT 23
7792: PUSH
7793: LD_INT 26
7795: PUSH
7796: LD_INT 36
7798: PUSH
7799: EMPTY
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: PUSH
7813: LD_INT 101
7815: PUSH
7816: LD_INT 102
7818: PUSH
7819: LD_INT 105
7821: PUSH
7822: LD_INT 106
7824: PUSH
7825: LD_INT 108
7827: PUSH
7828: LD_INT 116
7830: PUSH
7831: LD_INT 117
7833: PUSH
7834: LD_INT 118
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: ST_TO_ADDR
7851: GO 10634
7853: LD_INT 5
7855: DOUBLE
7856: EQUAL
7857: IFTRUE 7861
7859: GO 7973
7861: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7862: LD_ADDR_VAR 0 2
7866: PUSH
7867: LD_INT 2
7869: PUSH
7870: LD_INT 4
7872: PUSH
7873: LD_INT 5
7875: PUSH
7876: LD_INT 6
7878: PUSH
7879: LD_INT 8
7881: PUSH
7882: LD_INT 11
7884: PUSH
7885: LD_INT 12
7887: PUSH
7888: LD_INT 15
7890: PUSH
7891: LD_INT 16
7893: PUSH
7894: LD_INT 22
7896: PUSH
7897: LD_INT 23
7899: PUSH
7900: LD_INT 25
7902: PUSH
7903: LD_INT 26
7905: PUSH
7906: LD_INT 36
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: PUSH
7925: LD_INT 101
7927: PUSH
7928: LD_INT 102
7930: PUSH
7931: LD_INT 105
7933: PUSH
7934: LD_INT 106
7936: PUSH
7937: LD_INT 108
7939: PUSH
7940: LD_INT 109
7942: PUSH
7943: LD_INT 112
7945: PUSH
7946: LD_INT 116
7948: PUSH
7949: LD_INT 117
7951: PUSH
7952: LD_INT 118
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: LIST
7965: LIST
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: ST_TO_ADDR
7971: GO 10634
7973: LD_INT 6
7975: DOUBLE
7976: EQUAL
7977: IFTRUE 7981
7979: GO 8113
7981: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7982: LD_ADDR_VAR 0 2
7986: PUSH
7987: LD_INT 2
7989: PUSH
7990: LD_INT 4
7992: PUSH
7993: LD_INT 5
7995: PUSH
7996: LD_INT 6
7998: PUSH
7999: LD_INT 8
8001: PUSH
8002: LD_INT 11
8004: PUSH
8005: LD_INT 12
8007: PUSH
8008: LD_INT 15
8010: PUSH
8011: LD_INT 16
8013: PUSH
8014: LD_INT 20
8016: PUSH
8017: LD_INT 21
8019: PUSH
8020: LD_INT 22
8022: PUSH
8023: LD_INT 23
8025: PUSH
8026: LD_INT 25
8028: PUSH
8029: LD_INT 26
8031: PUSH
8032: LD_INT 30
8034: PUSH
8035: LD_INT 31
8037: PUSH
8038: LD_INT 32
8040: PUSH
8041: LD_INT 36
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: PUSH
8065: LD_INT 101
8067: PUSH
8068: LD_INT 102
8070: PUSH
8071: LD_INT 105
8073: PUSH
8074: LD_INT 106
8076: PUSH
8077: LD_INT 108
8079: PUSH
8080: LD_INT 109
8082: PUSH
8083: LD_INT 112
8085: PUSH
8086: LD_INT 116
8088: PUSH
8089: LD_INT 117
8091: PUSH
8092: LD_INT 118
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: ST_TO_ADDR
8111: GO 10634
8113: LD_INT 7
8115: DOUBLE
8116: EQUAL
8117: IFTRUE 8121
8119: GO 8233
8121: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8122: LD_ADDR_VAR 0 2
8126: PUSH
8127: LD_INT 2
8129: PUSH
8130: LD_INT 4
8132: PUSH
8133: LD_INT 5
8135: PUSH
8136: LD_INT 7
8138: PUSH
8139: LD_INT 11
8141: PUSH
8142: LD_INT 12
8144: PUSH
8145: LD_INT 15
8147: PUSH
8148: LD_INT 16
8150: PUSH
8151: LD_INT 20
8153: PUSH
8154: LD_INT 21
8156: PUSH
8157: LD_INT 22
8159: PUSH
8160: LD_INT 23
8162: PUSH
8163: LD_INT 25
8165: PUSH
8166: LD_INT 26
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: PUSH
8185: LD_INT 101
8187: PUSH
8188: LD_INT 102
8190: PUSH
8191: LD_INT 103
8193: PUSH
8194: LD_INT 105
8196: PUSH
8197: LD_INT 106
8199: PUSH
8200: LD_INT 108
8202: PUSH
8203: LD_INT 112
8205: PUSH
8206: LD_INT 116
8208: PUSH
8209: LD_INT 117
8211: PUSH
8212: LD_INT 118
8214: PUSH
8215: EMPTY
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: ST_TO_ADDR
8231: GO 10634
8233: LD_INT 8
8235: DOUBLE
8236: EQUAL
8237: IFTRUE 8241
8239: GO 8381
8241: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8242: LD_ADDR_VAR 0 2
8246: PUSH
8247: LD_INT 2
8249: PUSH
8250: LD_INT 4
8252: PUSH
8253: LD_INT 5
8255: PUSH
8256: LD_INT 6
8258: PUSH
8259: LD_INT 7
8261: PUSH
8262: LD_INT 8
8264: PUSH
8265: LD_INT 11
8267: PUSH
8268: LD_INT 12
8270: PUSH
8271: LD_INT 15
8273: PUSH
8274: LD_INT 16
8276: PUSH
8277: LD_INT 20
8279: PUSH
8280: LD_INT 21
8282: PUSH
8283: LD_INT 22
8285: PUSH
8286: LD_INT 23
8288: PUSH
8289: LD_INT 25
8291: PUSH
8292: LD_INT 26
8294: PUSH
8295: LD_INT 30
8297: PUSH
8298: LD_INT 31
8300: PUSH
8301: LD_INT 32
8303: PUSH
8304: LD_INT 36
8306: PUSH
8307: EMPTY
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: PUSH
8329: LD_INT 101
8331: PUSH
8332: LD_INT 102
8334: PUSH
8335: LD_INT 103
8337: PUSH
8338: LD_INT 105
8340: PUSH
8341: LD_INT 106
8343: PUSH
8344: LD_INT 108
8346: PUSH
8347: LD_INT 109
8349: PUSH
8350: LD_INT 112
8352: PUSH
8353: LD_INT 116
8355: PUSH
8356: LD_INT 117
8358: PUSH
8359: LD_INT 118
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: ST_TO_ADDR
8379: GO 10634
8381: LD_INT 9
8383: DOUBLE
8384: EQUAL
8385: IFTRUE 8389
8387: GO 8537
8389: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8390: LD_ADDR_VAR 0 2
8394: PUSH
8395: LD_INT 2
8397: PUSH
8398: LD_INT 4
8400: PUSH
8401: LD_INT 5
8403: PUSH
8404: LD_INT 6
8406: PUSH
8407: LD_INT 7
8409: PUSH
8410: LD_INT 8
8412: PUSH
8413: LD_INT 11
8415: PUSH
8416: LD_INT 12
8418: PUSH
8419: LD_INT 15
8421: PUSH
8422: LD_INT 16
8424: PUSH
8425: LD_INT 20
8427: PUSH
8428: LD_INT 21
8430: PUSH
8431: LD_INT 22
8433: PUSH
8434: LD_INT 23
8436: PUSH
8437: LD_INT 25
8439: PUSH
8440: LD_INT 26
8442: PUSH
8443: LD_INT 28
8445: PUSH
8446: LD_INT 30
8448: PUSH
8449: LD_INT 31
8451: PUSH
8452: LD_INT 32
8454: PUSH
8455: LD_INT 36
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: PUSH
8481: LD_INT 101
8483: PUSH
8484: LD_INT 102
8486: PUSH
8487: LD_INT 103
8489: PUSH
8490: LD_INT 105
8492: PUSH
8493: LD_INT 106
8495: PUSH
8496: LD_INT 108
8498: PUSH
8499: LD_INT 109
8501: PUSH
8502: LD_INT 112
8504: PUSH
8505: LD_INT 114
8507: PUSH
8508: LD_INT 116
8510: PUSH
8511: LD_INT 117
8513: PUSH
8514: LD_INT 118
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: PUSH
8531: EMPTY
8532: LIST
8533: LIST
8534: ST_TO_ADDR
8535: GO 10634
8537: LD_INT 10
8539: DOUBLE
8540: EQUAL
8541: IFTRUE 8545
8543: GO 8741
8545: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8546: LD_ADDR_VAR 0 2
8550: PUSH
8551: LD_INT 2
8553: PUSH
8554: LD_INT 4
8556: PUSH
8557: LD_INT 5
8559: PUSH
8560: LD_INT 6
8562: PUSH
8563: LD_INT 7
8565: PUSH
8566: LD_INT 8
8568: PUSH
8569: LD_INT 9
8571: PUSH
8572: LD_INT 10
8574: PUSH
8575: LD_INT 11
8577: PUSH
8578: LD_INT 12
8580: PUSH
8581: LD_INT 13
8583: PUSH
8584: LD_INT 14
8586: PUSH
8587: LD_INT 15
8589: PUSH
8590: LD_INT 16
8592: PUSH
8593: LD_INT 17
8595: PUSH
8596: LD_INT 18
8598: PUSH
8599: LD_INT 19
8601: PUSH
8602: LD_INT 20
8604: PUSH
8605: LD_INT 21
8607: PUSH
8608: LD_INT 22
8610: PUSH
8611: LD_INT 23
8613: PUSH
8614: LD_INT 24
8616: PUSH
8617: LD_INT 25
8619: PUSH
8620: LD_INT 26
8622: PUSH
8623: LD_INT 28
8625: PUSH
8626: LD_INT 30
8628: PUSH
8629: LD_INT 31
8631: PUSH
8632: LD_INT 32
8634: PUSH
8635: LD_INT 36
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: PUSH
8669: LD_INT 101
8671: PUSH
8672: LD_INT 102
8674: PUSH
8675: LD_INT 103
8677: PUSH
8678: LD_INT 104
8680: PUSH
8681: LD_INT 105
8683: PUSH
8684: LD_INT 106
8686: PUSH
8687: LD_INT 107
8689: PUSH
8690: LD_INT 108
8692: PUSH
8693: LD_INT 109
8695: PUSH
8696: LD_INT 110
8698: PUSH
8699: LD_INT 111
8701: PUSH
8702: LD_INT 112
8704: PUSH
8705: LD_INT 114
8707: PUSH
8708: LD_INT 116
8710: PUSH
8711: LD_INT 117
8713: PUSH
8714: LD_INT 118
8716: PUSH
8717: EMPTY
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: PUSH
8735: EMPTY
8736: LIST
8737: LIST
8738: ST_TO_ADDR
8739: GO 10634
8741: LD_INT 11
8743: DOUBLE
8744: EQUAL
8745: IFTRUE 8749
8747: GO 8953
8749: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8750: LD_ADDR_VAR 0 2
8754: PUSH
8755: LD_INT 2
8757: PUSH
8758: LD_INT 3
8760: PUSH
8761: LD_INT 4
8763: PUSH
8764: LD_INT 5
8766: PUSH
8767: LD_INT 6
8769: PUSH
8770: LD_INT 7
8772: PUSH
8773: LD_INT 8
8775: PUSH
8776: LD_INT 9
8778: PUSH
8779: LD_INT 10
8781: PUSH
8782: LD_INT 11
8784: PUSH
8785: LD_INT 12
8787: PUSH
8788: LD_INT 13
8790: PUSH
8791: LD_INT 14
8793: PUSH
8794: LD_INT 15
8796: PUSH
8797: LD_INT 16
8799: PUSH
8800: LD_INT 17
8802: PUSH
8803: LD_INT 18
8805: PUSH
8806: LD_INT 19
8808: PUSH
8809: LD_INT 20
8811: PUSH
8812: LD_INT 21
8814: PUSH
8815: LD_INT 22
8817: PUSH
8818: LD_INT 23
8820: PUSH
8821: LD_INT 24
8823: PUSH
8824: LD_INT 25
8826: PUSH
8827: LD_INT 26
8829: PUSH
8830: LD_INT 28
8832: PUSH
8833: LD_INT 30
8835: PUSH
8836: LD_INT 31
8838: PUSH
8839: LD_INT 32
8841: PUSH
8842: LD_INT 34
8844: PUSH
8845: LD_INT 36
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: PUSH
8881: LD_INT 101
8883: PUSH
8884: LD_INT 102
8886: PUSH
8887: LD_INT 103
8889: PUSH
8890: LD_INT 104
8892: PUSH
8893: LD_INT 105
8895: PUSH
8896: LD_INT 106
8898: PUSH
8899: LD_INT 107
8901: PUSH
8902: LD_INT 108
8904: PUSH
8905: LD_INT 109
8907: PUSH
8908: LD_INT 110
8910: PUSH
8911: LD_INT 111
8913: PUSH
8914: LD_INT 112
8916: PUSH
8917: LD_INT 114
8919: PUSH
8920: LD_INT 116
8922: PUSH
8923: LD_INT 117
8925: PUSH
8926: LD_INT 118
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: ST_TO_ADDR
8951: GO 10634
8953: LD_INT 12
8955: DOUBLE
8956: EQUAL
8957: IFTRUE 8961
8959: GO 9181
8961: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8962: LD_ADDR_VAR 0 2
8966: PUSH
8967: LD_INT 1
8969: PUSH
8970: LD_INT 2
8972: PUSH
8973: LD_INT 3
8975: PUSH
8976: LD_INT 4
8978: PUSH
8979: LD_INT 5
8981: PUSH
8982: LD_INT 6
8984: PUSH
8985: LD_INT 7
8987: PUSH
8988: LD_INT 8
8990: PUSH
8991: LD_INT 9
8993: PUSH
8994: LD_INT 10
8996: PUSH
8997: LD_INT 11
8999: PUSH
9000: LD_INT 12
9002: PUSH
9003: LD_INT 13
9005: PUSH
9006: LD_INT 14
9008: PUSH
9009: LD_INT 15
9011: PUSH
9012: LD_INT 16
9014: PUSH
9015: LD_INT 17
9017: PUSH
9018: LD_INT 18
9020: PUSH
9021: LD_INT 19
9023: PUSH
9024: LD_INT 20
9026: PUSH
9027: LD_INT 21
9029: PUSH
9030: LD_INT 22
9032: PUSH
9033: LD_INT 23
9035: PUSH
9036: LD_INT 24
9038: PUSH
9039: LD_INT 25
9041: PUSH
9042: LD_INT 26
9044: PUSH
9045: LD_INT 27
9047: PUSH
9048: LD_INT 28
9050: PUSH
9051: LD_INT 30
9053: PUSH
9054: LD_INT 31
9056: PUSH
9057: LD_INT 32
9059: PUSH
9060: LD_INT 33
9062: PUSH
9063: LD_INT 34
9065: PUSH
9066: LD_INT 36
9068: PUSH
9069: EMPTY
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: PUSH
9105: LD_INT 101
9107: PUSH
9108: LD_INT 102
9110: PUSH
9111: LD_INT 103
9113: PUSH
9114: LD_INT 104
9116: PUSH
9117: LD_INT 105
9119: PUSH
9120: LD_INT 106
9122: PUSH
9123: LD_INT 107
9125: PUSH
9126: LD_INT 108
9128: PUSH
9129: LD_INT 109
9131: PUSH
9132: LD_INT 110
9134: PUSH
9135: LD_INT 111
9137: PUSH
9138: LD_INT 112
9140: PUSH
9141: LD_INT 113
9143: PUSH
9144: LD_INT 114
9146: PUSH
9147: LD_INT 116
9149: PUSH
9150: LD_INT 117
9152: PUSH
9153: LD_INT 118
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: PUSH
9175: EMPTY
9176: LIST
9177: LIST
9178: ST_TO_ADDR
9179: GO 10634
9181: LD_INT 13
9183: DOUBLE
9184: EQUAL
9185: IFTRUE 9189
9187: GO 9397
9189: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9190: LD_ADDR_VAR 0 2
9194: PUSH
9195: LD_INT 1
9197: PUSH
9198: LD_INT 2
9200: PUSH
9201: LD_INT 3
9203: PUSH
9204: LD_INT 4
9206: PUSH
9207: LD_INT 5
9209: PUSH
9210: LD_INT 8
9212: PUSH
9213: LD_INT 9
9215: PUSH
9216: LD_INT 10
9218: PUSH
9219: LD_INT 11
9221: PUSH
9222: LD_INT 12
9224: PUSH
9225: LD_INT 14
9227: PUSH
9228: LD_INT 15
9230: PUSH
9231: LD_INT 16
9233: PUSH
9234: LD_INT 17
9236: PUSH
9237: LD_INT 18
9239: PUSH
9240: LD_INT 19
9242: PUSH
9243: LD_INT 20
9245: PUSH
9246: LD_INT 21
9248: PUSH
9249: LD_INT 22
9251: PUSH
9252: LD_INT 23
9254: PUSH
9255: LD_INT 24
9257: PUSH
9258: LD_INT 25
9260: PUSH
9261: LD_INT 26
9263: PUSH
9264: LD_INT 27
9266: PUSH
9267: LD_INT 28
9269: PUSH
9270: LD_INT 30
9272: PUSH
9273: LD_INT 31
9275: PUSH
9276: LD_INT 32
9278: PUSH
9279: LD_INT 33
9281: PUSH
9282: LD_INT 34
9284: PUSH
9285: LD_INT 36
9287: PUSH
9288: EMPTY
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: PUSH
9321: LD_INT 101
9323: PUSH
9324: LD_INT 102
9326: PUSH
9327: LD_INT 103
9329: PUSH
9330: LD_INT 104
9332: PUSH
9333: LD_INT 105
9335: PUSH
9336: LD_INT 106
9338: PUSH
9339: LD_INT 107
9341: PUSH
9342: LD_INT 108
9344: PUSH
9345: LD_INT 109
9347: PUSH
9348: LD_INT 110
9350: PUSH
9351: LD_INT 111
9353: PUSH
9354: LD_INT 112
9356: PUSH
9357: LD_INT 113
9359: PUSH
9360: LD_INT 114
9362: PUSH
9363: LD_INT 116
9365: PUSH
9366: LD_INT 117
9368: PUSH
9369: LD_INT 118
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: ST_TO_ADDR
9395: GO 10634
9397: LD_INT 14
9399: DOUBLE
9400: EQUAL
9401: IFTRUE 9405
9403: GO 9629
9405: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9406: LD_ADDR_VAR 0 2
9410: PUSH
9411: LD_INT 1
9413: PUSH
9414: LD_INT 2
9416: PUSH
9417: LD_INT 3
9419: PUSH
9420: LD_INT 4
9422: PUSH
9423: LD_INT 5
9425: PUSH
9426: LD_INT 6
9428: PUSH
9429: LD_INT 7
9431: PUSH
9432: LD_INT 8
9434: PUSH
9435: LD_INT 9
9437: PUSH
9438: LD_INT 10
9440: PUSH
9441: LD_INT 11
9443: PUSH
9444: LD_INT 12
9446: PUSH
9447: LD_INT 13
9449: PUSH
9450: LD_INT 14
9452: PUSH
9453: LD_INT 15
9455: PUSH
9456: LD_INT 16
9458: PUSH
9459: LD_INT 17
9461: PUSH
9462: LD_INT 18
9464: PUSH
9465: LD_INT 19
9467: PUSH
9468: LD_INT 20
9470: PUSH
9471: LD_INT 21
9473: PUSH
9474: LD_INT 22
9476: PUSH
9477: LD_INT 23
9479: PUSH
9480: LD_INT 24
9482: PUSH
9483: LD_INT 25
9485: PUSH
9486: LD_INT 26
9488: PUSH
9489: LD_INT 27
9491: PUSH
9492: LD_INT 28
9494: PUSH
9495: LD_INT 29
9497: PUSH
9498: LD_INT 30
9500: PUSH
9501: LD_INT 31
9503: PUSH
9504: LD_INT 32
9506: PUSH
9507: LD_INT 33
9509: PUSH
9510: LD_INT 34
9512: PUSH
9513: LD_INT 36
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: PUSH
9553: LD_INT 101
9555: PUSH
9556: LD_INT 102
9558: PUSH
9559: LD_INT 103
9561: PUSH
9562: LD_INT 104
9564: PUSH
9565: LD_INT 105
9567: PUSH
9568: LD_INT 106
9570: PUSH
9571: LD_INT 107
9573: PUSH
9574: LD_INT 108
9576: PUSH
9577: LD_INT 109
9579: PUSH
9580: LD_INT 110
9582: PUSH
9583: LD_INT 111
9585: PUSH
9586: LD_INT 112
9588: PUSH
9589: LD_INT 113
9591: PUSH
9592: LD_INT 114
9594: PUSH
9595: LD_INT 116
9597: PUSH
9598: LD_INT 117
9600: PUSH
9601: LD_INT 118
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: ST_TO_ADDR
9627: GO 10634
9629: LD_INT 15
9631: DOUBLE
9632: EQUAL
9633: IFTRUE 9637
9635: GO 9861
9637: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9638: LD_ADDR_VAR 0 2
9642: PUSH
9643: LD_INT 1
9645: PUSH
9646: LD_INT 2
9648: PUSH
9649: LD_INT 3
9651: PUSH
9652: LD_INT 4
9654: PUSH
9655: LD_INT 5
9657: PUSH
9658: LD_INT 6
9660: PUSH
9661: LD_INT 7
9663: PUSH
9664: LD_INT 8
9666: PUSH
9667: LD_INT 9
9669: PUSH
9670: LD_INT 10
9672: PUSH
9673: LD_INT 11
9675: PUSH
9676: LD_INT 12
9678: PUSH
9679: LD_INT 13
9681: PUSH
9682: LD_INT 14
9684: PUSH
9685: LD_INT 15
9687: PUSH
9688: LD_INT 16
9690: PUSH
9691: LD_INT 17
9693: PUSH
9694: LD_INT 18
9696: PUSH
9697: LD_INT 19
9699: PUSH
9700: LD_INT 20
9702: PUSH
9703: LD_INT 21
9705: PUSH
9706: LD_INT 22
9708: PUSH
9709: LD_INT 23
9711: PUSH
9712: LD_INT 24
9714: PUSH
9715: LD_INT 25
9717: PUSH
9718: LD_INT 26
9720: PUSH
9721: LD_INT 27
9723: PUSH
9724: LD_INT 28
9726: PUSH
9727: LD_INT 29
9729: PUSH
9730: LD_INT 30
9732: PUSH
9733: LD_INT 31
9735: PUSH
9736: LD_INT 32
9738: PUSH
9739: LD_INT 33
9741: PUSH
9742: LD_INT 34
9744: PUSH
9745: LD_INT 36
9747: PUSH
9748: EMPTY
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: PUSH
9785: LD_INT 101
9787: PUSH
9788: LD_INT 102
9790: PUSH
9791: LD_INT 103
9793: PUSH
9794: LD_INT 104
9796: PUSH
9797: LD_INT 105
9799: PUSH
9800: LD_INT 106
9802: PUSH
9803: LD_INT 107
9805: PUSH
9806: LD_INT 108
9808: PUSH
9809: LD_INT 109
9811: PUSH
9812: LD_INT 110
9814: PUSH
9815: LD_INT 111
9817: PUSH
9818: LD_INT 112
9820: PUSH
9821: LD_INT 113
9823: PUSH
9824: LD_INT 114
9826: PUSH
9827: LD_INT 116
9829: PUSH
9830: LD_INT 117
9832: PUSH
9833: LD_INT 118
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: PUSH
9855: EMPTY
9856: LIST
9857: LIST
9858: ST_TO_ADDR
9859: GO 10634
9861: LD_INT 16
9863: DOUBLE
9864: EQUAL
9865: IFTRUE 9869
9867: GO 10005
9869: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9870: LD_ADDR_VAR 0 2
9874: PUSH
9875: LD_INT 2
9877: PUSH
9878: LD_INT 4
9880: PUSH
9881: LD_INT 5
9883: PUSH
9884: LD_INT 7
9886: PUSH
9887: LD_INT 11
9889: PUSH
9890: LD_INT 12
9892: PUSH
9893: LD_INT 15
9895: PUSH
9896: LD_INT 16
9898: PUSH
9899: LD_INT 20
9901: PUSH
9902: LD_INT 21
9904: PUSH
9905: LD_INT 22
9907: PUSH
9908: LD_INT 23
9910: PUSH
9911: LD_INT 25
9913: PUSH
9914: LD_INT 26
9916: PUSH
9917: LD_INT 30
9919: PUSH
9920: LD_INT 31
9922: PUSH
9923: LD_INT 32
9925: PUSH
9926: LD_INT 33
9928: PUSH
9929: LD_INT 34
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: PUSH
9953: LD_INT 101
9955: PUSH
9956: LD_INT 102
9958: PUSH
9959: LD_INT 103
9961: PUSH
9962: LD_INT 106
9964: PUSH
9965: LD_INT 108
9967: PUSH
9968: LD_INT 112
9970: PUSH
9971: LD_INT 113
9973: PUSH
9974: LD_INT 114
9976: PUSH
9977: LD_INT 116
9979: PUSH
9980: LD_INT 117
9982: PUSH
9983: LD_INT 118
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: ST_TO_ADDR
10003: GO 10634
10005: LD_INT 17
10007: DOUBLE
10008: EQUAL
10009: IFTRUE 10013
10011: GO 10237
10013: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
10014: LD_ADDR_VAR 0 2
10018: PUSH
10019: LD_INT 1
10021: PUSH
10022: LD_INT 2
10024: PUSH
10025: LD_INT 3
10027: PUSH
10028: LD_INT 4
10030: PUSH
10031: LD_INT 5
10033: PUSH
10034: LD_INT 6
10036: PUSH
10037: LD_INT 7
10039: PUSH
10040: LD_INT 8
10042: PUSH
10043: LD_INT 9
10045: PUSH
10046: LD_INT 10
10048: PUSH
10049: LD_INT 11
10051: PUSH
10052: LD_INT 12
10054: PUSH
10055: LD_INT 13
10057: PUSH
10058: LD_INT 14
10060: PUSH
10061: LD_INT 15
10063: PUSH
10064: LD_INT 16
10066: PUSH
10067: LD_INT 17
10069: PUSH
10070: LD_INT 18
10072: PUSH
10073: LD_INT 19
10075: PUSH
10076: LD_INT 20
10078: PUSH
10079: LD_INT 21
10081: PUSH
10082: LD_INT 22
10084: PUSH
10085: LD_INT 23
10087: PUSH
10088: LD_INT 24
10090: PUSH
10091: LD_INT 25
10093: PUSH
10094: LD_INT 26
10096: PUSH
10097: LD_INT 27
10099: PUSH
10100: LD_INT 28
10102: PUSH
10103: LD_INT 29
10105: PUSH
10106: LD_INT 30
10108: PUSH
10109: LD_INT 31
10111: PUSH
10112: LD_INT 32
10114: PUSH
10115: LD_INT 33
10117: PUSH
10118: LD_INT 34
10120: PUSH
10121: LD_INT 36
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: PUSH
10161: LD_INT 101
10163: PUSH
10164: LD_INT 102
10166: PUSH
10167: LD_INT 103
10169: PUSH
10170: LD_INT 104
10172: PUSH
10173: LD_INT 105
10175: PUSH
10176: LD_INT 106
10178: PUSH
10179: LD_INT 107
10181: PUSH
10182: LD_INT 108
10184: PUSH
10185: LD_INT 109
10187: PUSH
10188: LD_INT 110
10190: PUSH
10191: LD_INT 111
10193: PUSH
10194: LD_INT 112
10196: PUSH
10197: LD_INT 113
10199: PUSH
10200: LD_INT 114
10202: PUSH
10203: LD_INT 116
10205: PUSH
10206: LD_INT 117
10208: PUSH
10209: LD_INT 118
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: ST_TO_ADDR
10235: GO 10634
10237: LD_INT 18
10239: DOUBLE
10240: EQUAL
10241: IFTRUE 10245
10243: GO 10393
10245: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10246: LD_ADDR_VAR 0 2
10250: PUSH
10251: LD_INT 2
10253: PUSH
10254: LD_INT 4
10256: PUSH
10257: LD_INT 5
10259: PUSH
10260: LD_INT 7
10262: PUSH
10263: LD_INT 11
10265: PUSH
10266: LD_INT 12
10268: PUSH
10269: LD_INT 15
10271: PUSH
10272: LD_INT 16
10274: PUSH
10275: LD_INT 20
10277: PUSH
10278: LD_INT 21
10280: PUSH
10281: LD_INT 22
10283: PUSH
10284: LD_INT 23
10286: PUSH
10287: LD_INT 25
10289: PUSH
10290: LD_INT 26
10292: PUSH
10293: LD_INT 30
10295: PUSH
10296: LD_INT 31
10298: PUSH
10299: LD_INT 32
10301: PUSH
10302: LD_INT 33
10304: PUSH
10305: LD_INT 34
10307: PUSH
10308: LD_INT 35
10310: PUSH
10311: LD_INT 36
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: PUSH
10337: LD_INT 101
10339: PUSH
10340: LD_INT 102
10342: PUSH
10343: LD_INT 103
10345: PUSH
10346: LD_INT 106
10348: PUSH
10349: LD_INT 108
10351: PUSH
10352: LD_INT 112
10354: PUSH
10355: LD_INT 113
10357: PUSH
10358: LD_INT 114
10360: PUSH
10361: LD_INT 115
10363: PUSH
10364: LD_INT 116
10366: PUSH
10367: LD_INT 117
10369: PUSH
10370: LD_INT 118
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: PUSH
10387: EMPTY
10388: LIST
10389: LIST
10390: ST_TO_ADDR
10391: GO 10634
10393: LD_INT 19
10395: DOUBLE
10396: EQUAL
10397: IFTRUE 10401
10399: GO 10633
10401: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10402: LD_ADDR_VAR 0 2
10406: PUSH
10407: LD_INT 1
10409: PUSH
10410: LD_INT 2
10412: PUSH
10413: LD_INT 3
10415: PUSH
10416: LD_INT 4
10418: PUSH
10419: LD_INT 5
10421: PUSH
10422: LD_INT 6
10424: PUSH
10425: LD_INT 7
10427: PUSH
10428: LD_INT 8
10430: PUSH
10431: LD_INT 9
10433: PUSH
10434: LD_INT 10
10436: PUSH
10437: LD_INT 11
10439: PUSH
10440: LD_INT 12
10442: PUSH
10443: LD_INT 13
10445: PUSH
10446: LD_INT 14
10448: PUSH
10449: LD_INT 15
10451: PUSH
10452: LD_INT 16
10454: PUSH
10455: LD_INT 17
10457: PUSH
10458: LD_INT 18
10460: PUSH
10461: LD_INT 19
10463: PUSH
10464: LD_INT 20
10466: PUSH
10467: LD_INT 21
10469: PUSH
10470: LD_INT 22
10472: PUSH
10473: LD_INT 23
10475: PUSH
10476: LD_INT 24
10478: PUSH
10479: LD_INT 25
10481: PUSH
10482: LD_INT 26
10484: PUSH
10485: LD_INT 27
10487: PUSH
10488: LD_INT 28
10490: PUSH
10491: LD_INT 29
10493: PUSH
10494: LD_INT 30
10496: PUSH
10497: LD_INT 31
10499: PUSH
10500: LD_INT 32
10502: PUSH
10503: LD_INT 33
10505: PUSH
10506: LD_INT 34
10508: PUSH
10509: LD_INT 35
10511: PUSH
10512: LD_INT 36
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 101
10555: PUSH
10556: LD_INT 102
10558: PUSH
10559: LD_INT 103
10561: PUSH
10562: LD_INT 104
10564: PUSH
10565: LD_INT 105
10567: PUSH
10568: LD_INT 106
10570: PUSH
10571: LD_INT 107
10573: PUSH
10574: LD_INT 108
10576: PUSH
10577: LD_INT 109
10579: PUSH
10580: LD_INT 110
10582: PUSH
10583: LD_INT 111
10585: PUSH
10586: LD_INT 112
10588: PUSH
10589: LD_INT 113
10591: PUSH
10592: LD_INT 114
10594: PUSH
10595: LD_INT 115
10597: PUSH
10598: LD_INT 116
10600: PUSH
10601: LD_INT 117
10603: PUSH
10604: LD_INT 118
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: ST_TO_ADDR
10631: GO 10634
10633: POP
// end else
10634: GO 10865
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10636: LD_ADDR_VAR 0 2
10640: PUSH
10641: LD_INT 1
10643: PUSH
10644: LD_INT 2
10646: PUSH
10647: LD_INT 3
10649: PUSH
10650: LD_INT 4
10652: PUSH
10653: LD_INT 5
10655: PUSH
10656: LD_INT 6
10658: PUSH
10659: LD_INT 7
10661: PUSH
10662: LD_INT 8
10664: PUSH
10665: LD_INT 9
10667: PUSH
10668: LD_INT 10
10670: PUSH
10671: LD_INT 11
10673: PUSH
10674: LD_INT 12
10676: PUSH
10677: LD_INT 13
10679: PUSH
10680: LD_INT 14
10682: PUSH
10683: LD_INT 15
10685: PUSH
10686: LD_INT 16
10688: PUSH
10689: LD_INT 17
10691: PUSH
10692: LD_INT 18
10694: PUSH
10695: LD_INT 19
10697: PUSH
10698: LD_INT 20
10700: PUSH
10701: LD_INT 21
10703: PUSH
10704: LD_INT 22
10706: PUSH
10707: LD_INT 23
10709: PUSH
10710: LD_INT 24
10712: PUSH
10713: LD_INT 25
10715: PUSH
10716: LD_INT 26
10718: PUSH
10719: LD_INT 27
10721: PUSH
10722: LD_INT 28
10724: PUSH
10725: LD_INT 29
10727: PUSH
10728: LD_INT 30
10730: PUSH
10731: LD_INT 31
10733: PUSH
10734: LD_INT 32
10736: PUSH
10737: LD_INT 33
10739: PUSH
10740: LD_INT 34
10742: PUSH
10743: LD_INT 35
10745: PUSH
10746: LD_INT 36
10748: PUSH
10749: EMPTY
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: PUSH
10787: LD_INT 101
10789: PUSH
10790: LD_INT 102
10792: PUSH
10793: LD_INT 103
10795: PUSH
10796: LD_INT 104
10798: PUSH
10799: LD_INT 105
10801: PUSH
10802: LD_INT 106
10804: PUSH
10805: LD_INT 107
10807: PUSH
10808: LD_INT 108
10810: PUSH
10811: LD_INT 109
10813: PUSH
10814: LD_INT 110
10816: PUSH
10817: LD_INT 111
10819: PUSH
10820: LD_INT 112
10822: PUSH
10823: LD_INT 113
10825: PUSH
10826: LD_INT 114
10828: PUSH
10829: LD_INT 115
10831: PUSH
10832: LD_INT 116
10834: PUSH
10835: LD_INT 117
10837: PUSH
10838: LD_INT 118
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: ST_TO_ADDR
// if result then
10865: LD_VAR 0 2
10869: IFFALSE 11655
// begin normal :=  ;
10871: LD_ADDR_VAR 0 5
10875: PUSH
10876: LD_STRING 
10878: ST_TO_ADDR
// hardcore :=  ;
10879: LD_ADDR_VAR 0 6
10883: PUSH
10884: LD_STRING 
10886: ST_TO_ADDR
// active :=  ;
10887: LD_ADDR_VAR 0 7
10891: PUSH
10892: LD_STRING 
10894: ST_TO_ADDR
// for i = 1 to normalCounter do
10895: LD_ADDR_VAR 0 8
10899: PUSH
10900: DOUBLE
10901: LD_INT 1
10903: DEC
10904: ST_TO_ADDR
10905: LD_EXP 25
10909: PUSH
10910: FOR_TO
10911: IFFALSE 11012
// begin tmp := 0 ;
10913: LD_ADDR_VAR 0 3
10917: PUSH
10918: LD_STRING 0
10920: ST_TO_ADDR
// if result [ 1 ] then
10921: LD_VAR 0 2
10925: PUSH
10926: LD_INT 1
10928: ARRAY
10929: IFFALSE 10994
// if result [ 1 ] [ 1 ] = i then
10931: LD_VAR 0 2
10935: PUSH
10936: LD_INT 1
10938: ARRAY
10939: PUSH
10940: LD_INT 1
10942: ARRAY
10943: PUSH
10944: LD_VAR 0 8
10948: EQUAL
10949: IFFALSE 10994
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10951: LD_ADDR_VAR 0 2
10955: PUSH
10956: LD_VAR 0 2
10960: PPUSH
10961: LD_INT 1
10963: PPUSH
10964: LD_VAR 0 2
10968: PUSH
10969: LD_INT 1
10971: ARRAY
10972: PPUSH
10973: LD_INT 1
10975: PPUSH
10976: CALL_OW 3
10980: PPUSH
10981: CALL_OW 1
10985: ST_TO_ADDR
// tmp := 1 ;
10986: LD_ADDR_VAR 0 3
10990: PUSH
10991: LD_STRING 1
10993: ST_TO_ADDR
// end ; normal := normal & tmp ;
10994: LD_ADDR_VAR 0 5
10998: PUSH
10999: LD_VAR 0 5
11003: PUSH
11004: LD_VAR 0 3
11008: STR
11009: ST_TO_ADDR
// end ;
11010: GO 10910
11012: POP
11013: POP
// for i = 1 to hardcoreCounter do
11014: LD_ADDR_VAR 0 8
11018: PUSH
11019: DOUBLE
11020: LD_INT 1
11022: DEC
11023: ST_TO_ADDR
11024: LD_EXP 26
11028: PUSH
11029: FOR_TO
11030: IFFALSE 11135
// begin tmp := 0 ;
11032: LD_ADDR_VAR 0 3
11036: PUSH
11037: LD_STRING 0
11039: ST_TO_ADDR
// if result [ 2 ] then
11040: LD_VAR 0 2
11044: PUSH
11045: LD_INT 2
11047: ARRAY
11048: IFFALSE 11117
// if result [ 2 ] [ 1 ] = 100 + i then
11050: LD_VAR 0 2
11054: PUSH
11055: LD_INT 2
11057: ARRAY
11058: PUSH
11059: LD_INT 1
11061: ARRAY
11062: PUSH
11063: LD_INT 100
11065: PUSH
11066: LD_VAR 0 8
11070: PLUS
11071: EQUAL
11072: IFFALSE 11117
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11074: LD_ADDR_VAR 0 2
11078: PUSH
11079: LD_VAR 0 2
11083: PPUSH
11084: LD_INT 2
11086: PPUSH
11087: LD_VAR 0 2
11091: PUSH
11092: LD_INT 2
11094: ARRAY
11095: PPUSH
11096: LD_INT 1
11098: PPUSH
11099: CALL_OW 3
11103: PPUSH
11104: CALL_OW 1
11108: ST_TO_ADDR
// tmp := 1 ;
11109: LD_ADDR_VAR 0 3
11113: PUSH
11114: LD_STRING 1
11116: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11117: LD_ADDR_VAR 0 6
11121: PUSH
11122: LD_VAR 0 6
11126: PUSH
11127: LD_VAR 0 3
11131: STR
11132: ST_TO_ADDR
// end ;
11133: GO 11029
11135: POP
11136: POP
// if isGameLoad then
11137: LD_VAR 0 1
11141: IFFALSE 11616
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
11143: LD_ADDR_VAR 0 4
11147: PUSH
11148: LD_EXP 29
11152: PUSH
11153: LD_EXP 28
11157: PUSH
11158: LD_EXP 30
11162: PUSH
11163: LD_EXP 27
11167: PUSH
11168: LD_EXP 31
11172: PUSH
11173: LD_EXP 32
11177: PUSH
11178: LD_EXP 33
11182: PUSH
11183: LD_EXP 34
11187: PUSH
11188: LD_EXP 35
11192: PUSH
11193: LD_EXP 36
11197: PUSH
11198: LD_EXP 37
11202: PUSH
11203: LD_EXP 38
11207: PUSH
11208: LD_EXP 39
11212: PUSH
11213: LD_EXP 40
11217: PUSH
11218: LD_EXP 48
11222: PUSH
11223: LD_EXP 49
11227: PUSH
11228: LD_EXP 50
11232: PUSH
11233: LD_EXP 51
11237: PUSH
11238: LD_EXP 53
11242: PUSH
11243: LD_EXP 54
11247: PUSH
11248: LD_EXP 55
11252: PUSH
11253: LD_EXP 58
11257: PUSH
11258: LD_EXP 60
11262: PUSH
11263: LD_EXP 61
11267: PUSH
11268: LD_EXP 62
11272: PUSH
11273: LD_EXP 64
11277: PUSH
11278: LD_EXP 65
11282: PUSH
11283: LD_EXP 68
11287: PUSH
11288: LD_EXP 69
11292: PUSH
11293: LD_EXP 70
11297: PUSH
11298: LD_EXP 71
11302: PUSH
11303: LD_EXP 72
11307: PUSH
11308: LD_EXP 73
11312: PUSH
11313: LD_EXP 74
11317: PUSH
11318: LD_EXP 75
11322: PUSH
11323: LD_EXP 76
11327: PUSH
11328: LD_EXP 41
11332: PUSH
11333: LD_EXP 42
11337: PUSH
11338: LD_EXP 45
11342: PUSH
11343: LD_EXP 46
11347: PUSH
11348: LD_EXP 47
11352: PUSH
11353: LD_EXP 43
11357: PUSH
11358: LD_EXP 44
11362: PUSH
11363: LD_EXP 52
11367: PUSH
11368: LD_EXP 56
11372: PUSH
11373: LD_EXP 57
11377: PUSH
11378: LD_EXP 59
11382: PUSH
11383: LD_EXP 63
11387: PUSH
11388: LD_EXP 66
11392: PUSH
11393: LD_EXP 67
11397: PUSH
11398: LD_EXP 77
11402: PUSH
11403: LD_EXP 78
11407: PUSH
11408: LD_EXP 79
11412: PUSH
11413: LD_EXP 80
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: ST_TO_ADDR
// tmp :=  ;
11474: LD_ADDR_VAR 0 3
11478: PUSH
11479: LD_STRING 
11481: ST_TO_ADDR
// for i = 1 to normalCounter do
11482: LD_ADDR_VAR 0 8
11486: PUSH
11487: DOUBLE
11488: LD_INT 1
11490: DEC
11491: ST_TO_ADDR
11492: LD_EXP 25
11496: PUSH
11497: FOR_TO
11498: IFFALSE 11534
// begin if flags [ i ] then
11500: LD_VAR 0 4
11504: PUSH
11505: LD_VAR 0 8
11509: ARRAY
11510: IFFALSE 11532
// tmp := tmp & i & ; ;
11512: LD_ADDR_VAR 0 3
11516: PUSH
11517: LD_VAR 0 3
11521: PUSH
11522: LD_VAR 0 8
11526: STR
11527: PUSH
11528: LD_STRING ;
11530: STR
11531: ST_TO_ADDR
// end ;
11532: GO 11497
11534: POP
11535: POP
// for i = 1 to hardcoreCounter do
11536: LD_ADDR_VAR 0 8
11540: PUSH
11541: DOUBLE
11542: LD_INT 1
11544: DEC
11545: ST_TO_ADDR
11546: LD_EXP 26
11550: PUSH
11551: FOR_TO
11552: IFFALSE 11598
// begin if flags [ normalCounter + i ] then
11554: LD_VAR 0 4
11558: PUSH
11559: LD_EXP 25
11563: PUSH
11564: LD_VAR 0 8
11568: PLUS
11569: ARRAY
11570: IFFALSE 11596
// tmp := tmp & ( 100 + i ) & ; ;
11572: LD_ADDR_VAR 0 3
11576: PUSH
11577: LD_VAR 0 3
11581: PUSH
11582: LD_INT 100
11584: PUSH
11585: LD_VAR 0 8
11589: PLUS
11590: STR
11591: PUSH
11592: LD_STRING ;
11594: STR
11595: ST_TO_ADDR
// end ;
11596: GO 11551
11598: POP
11599: POP
// if tmp then
11600: LD_VAR 0 3
11604: IFFALSE 11616
// active := tmp ;
11606: LD_ADDR_VAR 0 7
11610: PUSH
11611: LD_VAR 0 3
11615: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11616: LD_STRING getStreamItemsFromMission("
11618: PUSH
11619: LD_VAR 0 5
11623: STR
11624: PUSH
11625: LD_STRING ","
11627: STR
11628: PUSH
11629: LD_VAR 0 6
11633: STR
11634: PUSH
11635: LD_STRING ","
11637: STR
11638: PUSH
11639: LD_VAR 0 7
11643: STR
11644: PUSH
11645: LD_STRING ")
11647: STR
11648: PPUSH
11649: CALL_OW 559
// end else
11653: GO 11662
// ToLua ( getStreamItemsFromMission("","","") ) ;
11655: LD_STRING getStreamItemsFromMission("","","")
11657: PPUSH
11658: CALL_OW 559
// end ;
11662: LD_VAR 0 2
11666: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11667: LD_EXP 24
11671: PUSH
11672: LD_EXP 29
11676: AND
11677: IFFALSE 11801
11679: GO 11681
11681: DISABLE
11682: LD_INT 0
11684: PPUSH
11685: PPUSH
// begin enable ;
11686: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11687: LD_ADDR_VAR 0 2
11691: PUSH
11692: LD_INT 22
11694: PUSH
11695: LD_OWVAR 2
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: PUSH
11704: LD_INT 2
11706: PUSH
11707: LD_INT 34
11709: PUSH
11710: LD_INT 7
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: LD_INT 34
11719: PUSH
11720: LD_INT 45
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: PUSH
11727: LD_INT 34
11729: PUSH
11730: LD_INT 28
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: PUSH
11737: LD_INT 34
11739: PUSH
11740: LD_INT 47
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: PUSH
11754: EMPTY
11755: LIST
11756: LIST
11757: PPUSH
11758: CALL_OW 69
11762: ST_TO_ADDR
// if not tmp then
11763: LD_VAR 0 2
11767: NOT
11768: IFFALSE 11772
// exit ;
11770: GO 11801
// for i in tmp do
11772: LD_ADDR_VAR 0 1
11776: PUSH
11777: LD_VAR 0 2
11781: PUSH
11782: FOR_IN
11783: IFFALSE 11799
// begin SetLives ( i , 0 ) ;
11785: LD_VAR 0 1
11789: PPUSH
11790: LD_INT 0
11792: PPUSH
11793: CALL_OW 234
// end ;
11797: GO 11782
11799: POP
11800: POP
// end ;
11801: PPOPN 2
11803: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11804: LD_EXP 24
11808: PUSH
11809: LD_EXP 30
11813: AND
11814: IFFALSE 11898
11816: GO 11818
11818: DISABLE
11819: LD_INT 0
11821: PPUSH
11822: PPUSH
// begin enable ;
11823: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11824: LD_ADDR_VAR 0 2
11828: PUSH
11829: LD_INT 22
11831: PUSH
11832: LD_OWVAR 2
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: LD_INT 32
11843: PUSH
11844: LD_INT 3
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: PPUSH
11855: CALL_OW 69
11859: ST_TO_ADDR
// if not tmp then
11860: LD_VAR 0 2
11864: NOT
11865: IFFALSE 11869
// exit ;
11867: GO 11898
// for i in tmp do
11869: LD_ADDR_VAR 0 1
11873: PUSH
11874: LD_VAR 0 2
11878: PUSH
11879: FOR_IN
11880: IFFALSE 11896
// begin SetLives ( i , 0 ) ;
11882: LD_VAR 0 1
11886: PPUSH
11887: LD_INT 0
11889: PPUSH
11890: CALL_OW 234
// end ;
11894: GO 11879
11896: POP
11897: POP
// end ;
11898: PPOPN 2
11900: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11901: LD_EXP 24
11905: PUSH
11906: LD_EXP 27
11910: AND
11911: IFFALSE 12004
11913: GO 11915
11915: DISABLE
11916: LD_INT 0
11918: PPUSH
// begin enable ;
11919: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11920: LD_ADDR_VAR 0 1
11924: PUSH
11925: LD_INT 22
11927: PUSH
11928: LD_OWVAR 2
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: PUSH
11937: LD_INT 2
11939: PUSH
11940: LD_INT 25
11942: PUSH
11943: LD_INT 5
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: PUSH
11950: LD_INT 25
11952: PUSH
11953: LD_INT 9
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: PUSH
11960: LD_INT 25
11962: PUSH
11963: LD_INT 8
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: PPUSH
11980: CALL_OW 69
11984: PUSH
11985: FOR_IN
11986: IFFALSE 12002
// begin SetClass ( i , 1 ) ;
11988: LD_VAR 0 1
11992: PPUSH
11993: LD_INT 1
11995: PPUSH
11996: CALL_OW 336
// end ;
12000: GO 11985
12002: POP
12003: POP
// end ;
12004: PPOPN 1
12006: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12007: LD_EXP 24
12011: PUSH
12012: LD_EXP 28
12016: AND
12017: PUSH
12018: LD_OWVAR 65
12022: PUSH
12023: LD_INT 7
12025: LESS
12026: AND
12027: IFFALSE 12041
12029: GO 12031
12031: DISABLE
// begin enable ;
12032: ENABLE
// game_speed := 7 ;
12033: LD_ADDR_OWVAR 65
12037: PUSH
12038: LD_INT 7
12040: ST_TO_ADDR
// end ;
12041: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12042: LD_EXP 24
12046: PUSH
12047: LD_EXP 31
12051: AND
12052: IFFALSE 12254
12054: GO 12056
12056: DISABLE
12057: LD_INT 0
12059: PPUSH
12060: PPUSH
12061: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12062: LD_ADDR_VAR 0 3
12066: PUSH
12067: LD_INT 81
12069: PUSH
12070: LD_OWVAR 2
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: PUSH
12079: LD_INT 21
12081: PUSH
12082: LD_INT 1
12084: PUSH
12085: EMPTY
12086: LIST
12087: LIST
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: PPUSH
12093: CALL_OW 69
12097: ST_TO_ADDR
// if not tmp then
12098: LD_VAR 0 3
12102: NOT
12103: IFFALSE 12107
// exit ;
12105: GO 12254
// if tmp > 5 then
12107: LD_VAR 0 3
12111: PUSH
12112: LD_INT 5
12114: GREATER
12115: IFFALSE 12127
// k := 5 else
12117: LD_ADDR_VAR 0 2
12121: PUSH
12122: LD_INT 5
12124: ST_TO_ADDR
12125: GO 12137
// k := tmp ;
12127: LD_ADDR_VAR 0 2
12131: PUSH
12132: LD_VAR 0 3
12136: ST_TO_ADDR
// for i := 1 to k do
12137: LD_ADDR_VAR 0 1
12141: PUSH
12142: DOUBLE
12143: LD_INT 1
12145: DEC
12146: ST_TO_ADDR
12147: LD_VAR 0 2
12151: PUSH
12152: FOR_TO
12153: IFFALSE 12252
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12155: LD_VAR 0 3
12159: PUSH
12160: LD_VAR 0 1
12164: ARRAY
12165: PPUSH
12166: LD_VAR 0 1
12170: PUSH
12171: LD_INT 4
12173: MOD
12174: PUSH
12175: LD_INT 1
12177: PLUS
12178: PPUSH
12179: CALL_OW 259
12183: PUSH
12184: LD_INT 10
12186: LESS
12187: IFFALSE 12250
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12189: LD_VAR 0 3
12193: PUSH
12194: LD_VAR 0 1
12198: ARRAY
12199: PPUSH
12200: LD_VAR 0 1
12204: PUSH
12205: LD_INT 4
12207: MOD
12208: PUSH
12209: LD_INT 1
12211: PLUS
12212: PPUSH
12213: LD_VAR 0 3
12217: PUSH
12218: LD_VAR 0 1
12222: ARRAY
12223: PPUSH
12224: LD_VAR 0 1
12228: PUSH
12229: LD_INT 4
12231: MOD
12232: PUSH
12233: LD_INT 1
12235: PLUS
12236: PPUSH
12237: CALL_OW 259
12241: PUSH
12242: LD_INT 1
12244: PLUS
12245: PPUSH
12246: CALL_OW 237
12250: GO 12152
12252: POP
12253: POP
// end ;
12254: PPOPN 3
12256: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12257: LD_EXP 24
12261: PUSH
12262: LD_EXP 32
12266: AND
12267: IFFALSE 12287
12269: GO 12271
12271: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12272: LD_INT 4
12274: PPUSH
12275: LD_OWVAR 2
12279: PPUSH
12280: LD_INT 0
12282: PPUSH
12283: CALL_OW 324
12287: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12288: LD_EXP 24
12292: PUSH
12293: LD_EXP 61
12297: AND
12298: IFFALSE 12318
12300: GO 12302
12302: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12303: LD_INT 19
12305: PPUSH
12306: LD_OWVAR 2
12310: PPUSH
12311: LD_INT 0
12313: PPUSH
12314: CALL_OW 324
12318: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12319: LD_EXP 24
12323: PUSH
12324: LD_EXP 33
12328: AND
12329: IFFALSE 12431
12331: GO 12333
12333: DISABLE
12334: LD_INT 0
12336: PPUSH
12337: PPUSH
// begin enable ;
12338: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12339: LD_ADDR_VAR 0 2
12343: PUSH
12344: LD_INT 22
12346: PUSH
12347: LD_OWVAR 2
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: PUSH
12356: LD_INT 2
12358: PUSH
12359: LD_INT 34
12361: PUSH
12362: LD_INT 11
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: PUSH
12369: LD_INT 34
12371: PUSH
12372: LD_INT 30
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: LIST
12383: PUSH
12384: EMPTY
12385: LIST
12386: LIST
12387: PPUSH
12388: CALL_OW 69
12392: ST_TO_ADDR
// if not tmp then
12393: LD_VAR 0 2
12397: NOT
12398: IFFALSE 12402
// exit ;
12400: GO 12431
// for i in tmp do
12402: LD_ADDR_VAR 0 1
12406: PUSH
12407: LD_VAR 0 2
12411: PUSH
12412: FOR_IN
12413: IFFALSE 12429
// begin SetLives ( i , 0 ) ;
12415: LD_VAR 0 1
12419: PPUSH
12420: LD_INT 0
12422: PPUSH
12423: CALL_OW 234
// end ;
12427: GO 12412
12429: POP
12430: POP
// end ;
12431: PPOPN 2
12433: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12434: LD_EXP 24
12438: PUSH
12439: LD_EXP 34
12443: AND
12444: IFFALSE 12464
12446: GO 12448
12448: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12449: LD_INT 32
12451: PPUSH
12452: LD_OWVAR 2
12456: PPUSH
12457: LD_INT 0
12459: PPUSH
12460: CALL_OW 324
12464: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12465: LD_EXP 24
12469: PUSH
12470: LD_EXP 35
12474: AND
12475: IFFALSE 12656
12477: GO 12479
12479: DISABLE
12480: LD_INT 0
12482: PPUSH
12483: PPUSH
12484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12485: LD_ADDR_VAR 0 2
12489: PUSH
12490: LD_INT 22
12492: PUSH
12493: LD_OWVAR 2
12497: PUSH
12498: EMPTY
12499: LIST
12500: LIST
12501: PUSH
12502: LD_INT 33
12504: PUSH
12505: LD_INT 3
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: PPUSH
12516: CALL_OW 69
12520: ST_TO_ADDR
// if not tmp then
12521: LD_VAR 0 2
12525: NOT
12526: IFFALSE 12530
// exit ;
12528: GO 12656
// side := 0 ;
12530: LD_ADDR_VAR 0 3
12534: PUSH
12535: LD_INT 0
12537: ST_TO_ADDR
// for i := 1 to 8 do
12538: LD_ADDR_VAR 0 1
12542: PUSH
12543: DOUBLE
12544: LD_INT 1
12546: DEC
12547: ST_TO_ADDR
12548: LD_INT 8
12550: PUSH
12551: FOR_TO
12552: IFFALSE 12600
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12554: LD_OWVAR 2
12558: PUSH
12559: LD_VAR 0 1
12563: NONEQUAL
12564: PUSH
12565: LD_OWVAR 2
12569: PPUSH
12570: LD_VAR 0 1
12574: PPUSH
12575: CALL_OW 81
12579: PUSH
12580: LD_INT 2
12582: EQUAL
12583: AND
12584: IFFALSE 12598
// begin side := i ;
12586: LD_ADDR_VAR 0 3
12590: PUSH
12591: LD_VAR 0 1
12595: ST_TO_ADDR
// break ;
12596: GO 12600
// end ;
12598: GO 12551
12600: POP
12601: POP
// if not side then
12602: LD_VAR 0 3
12606: NOT
12607: IFFALSE 12611
// exit ;
12609: GO 12656
// for i := 1 to tmp do
12611: LD_ADDR_VAR 0 1
12615: PUSH
12616: DOUBLE
12617: LD_INT 1
12619: DEC
12620: ST_TO_ADDR
12621: LD_VAR 0 2
12625: PUSH
12626: FOR_TO
12627: IFFALSE 12654
// if Prob ( 60 ) then
12629: LD_INT 60
12631: PPUSH
12632: CALL_OW 13
12636: IFFALSE 12652
// SetSide ( i , side ) ;
12638: LD_VAR 0 1
12642: PPUSH
12643: LD_VAR 0 3
12647: PPUSH
12648: CALL_OW 235
12652: GO 12626
12654: POP
12655: POP
// end ;
12656: PPOPN 3
12658: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12659: LD_EXP 24
12663: PUSH
12664: LD_EXP 37
12668: AND
12669: IFFALSE 12788
12671: GO 12673
12673: DISABLE
12674: LD_INT 0
12676: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12677: LD_ADDR_VAR 0 1
12681: PUSH
12682: LD_INT 22
12684: PUSH
12685: LD_OWVAR 2
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: PUSH
12694: LD_INT 21
12696: PUSH
12697: LD_INT 1
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: PUSH
12704: LD_INT 3
12706: PUSH
12707: LD_INT 23
12709: PUSH
12710: LD_INT 0
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: LIST
12725: PPUSH
12726: CALL_OW 69
12730: PUSH
12731: FOR_IN
12732: IFFALSE 12786
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12734: LD_VAR 0 1
12738: PPUSH
12739: CALL_OW 257
12743: PUSH
12744: LD_INT 1
12746: PUSH
12747: LD_INT 2
12749: PUSH
12750: LD_INT 3
12752: PUSH
12753: LD_INT 4
12755: PUSH
12756: EMPTY
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: IN
12762: IFFALSE 12784
// SetClass ( un , rand ( 1 , 4 ) ) ;
12764: LD_VAR 0 1
12768: PPUSH
12769: LD_INT 1
12771: PPUSH
12772: LD_INT 4
12774: PPUSH
12775: CALL_OW 12
12779: PPUSH
12780: CALL_OW 336
12784: GO 12731
12786: POP
12787: POP
// end ;
12788: PPOPN 1
12790: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12791: LD_EXP 24
12795: PUSH
12796: LD_EXP 36
12800: AND
12801: IFFALSE 12880
12803: GO 12805
12805: DISABLE
12806: LD_INT 0
12808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12809: LD_ADDR_VAR 0 1
12813: PUSH
12814: LD_INT 22
12816: PUSH
12817: LD_OWVAR 2
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: PUSH
12826: LD_INT 21
12828: PUSH
12829: LD_INT 3
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: PPUSH
12840: CALL_OW 69
12844: ST_TO_ADDR
// if not tmp then
12845: LD_VAR 0 1
12849: NOT
12850: IFFALSE 12854
// exit ;
12852: GO 12880
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12854: LD_VAR 0 1
12858: PUSH
12859: LD_INT 1
12861: PPUSH
12862: LD_VAR 0 1
12866: PPUSH
12867: CALL_OW 12
12871: ARRAY
12872: PPUSH
12873: LD_INT 100
12875: PPUSH
12876: CALL_OW 234
// end ;
12880: PPOPN 1
12882: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12883: LD_EXP 24
12887: PUSH
12888: LD_EXP 38
12892: AND
12893: IFFALSE 12991
12895: GO 12897
12897: DISABLE
12898: LD_INT 0
12900: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12901: LD_ADDR_VAR 0 1
12905: PUSH
12906: LD_INT 22
12908: PUSH
12909: LD_OWVAR 2
12913: PUSH
12914: EMPTY
12915: LIST
12916: LIST
12917: PUSH
12918: LD_INT 21
12920: PUSH
12921: LD_INT 1
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: PPUSH
12932: CALL_OW 69
12936: ST_TO_ADDR
// if not tmp then
12937: LD_VAR 0 1
12941: NOT
12942: IFFALSE 12946
// exit ;
12944: GO 12991
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12946: LD_VAR 0 1
12950: PUSH
12951: LD_INT 1
12953: PPUSH
12954: LD_VAR 0 1
12958: PPUSH
12959: CALL_OW 12
12963: ARRAY
12964: PPUSH
12965: LD_INT 1
12967: PPUSH
12968: LD_INT 4
12970: PPUSH
12971: CALL_OW 12
12975: PPUSH
12976: LD_INT 3000
12978: PPUSH
12979: LD_INT 9000
12981: PPUSH
12982: CALL_OW 12
12986: PPUSH
12987: CALL_OW 492
// end ;
12991: PPOPN 1
12993: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12994: LD_EXP 24
12998: PUSH
12999: LD_EXP 39
13003: AND
13004: IFFALSE 13024
13006: GO 13008
13008: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13009: LD_INT 1
13011: PPUSH
13012: LD_OWVAR 2
13016: PPUSH
13017: LD_INT 0
13019: PPUSH
13020: CALL_OW 324
13024: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13025: LD_EXP 24
13029: PUSH
13030: LD_EXP 40
13034: AND
13035: IFFALSE 13118
13037: GO 13039
13039: DISABLE
13040: LD_INT 0
13042: PPUSH
13043: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13044: LD_ADDR_VAR 0 2
13048: PUSH
13049: LD_INT 22
13051: PUSH
13052: LD_OWVAR 2
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PUSH
13061: LD_INT 21
13063: PUSH
13064: LD_INT 3
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: PPUSH
13075: CALL_OW 69
13079: ST_TO_ADDR
// if not tmp then
13080: LD_VAR 0 2
13084: NOT
13085: IFFALSE 13089
// exit ;
13087: GO 13118
// for i in tmp do
13089: LD_ADDR_VAR 0 1
13093: PUSH
13094: LD_VAR 0 2
13098: PUSH
13099: FOR_IN
13100: IFFALSE 13116
// SetBLevel ( i , 10 ) ;
13102: LD_VAR 0 1
13106: PPUSH
13107: LD_INT 10
13109: PPUSH
13110: CALL_OW 241
13114: GO 13099
13116: POP
13117: POP
// end ;
13118: PPOPN 2
13120: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13121: LD_EXP 24
13125: PUSH
13126: LD_EXP 41
13130: AND
13131: IFFALSE 13242
13133: GO 13135
13135: DISABLE
13136: LD_INT 0
13138: PPUSH
13139: PPUSH
13140: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13141: LD_ADDR_VAR 0 3
13145: PUSH
13146: LD_INT 22
13148: PUSH
13149: LD_OWVAR 2
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: PUSH
13158: LD_INT 25
13160: PUSH
13161: LD_INT 1
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: PPUSH
13172: CALL_OW 69
13176: ST_TO_ADDR
// if not tmp then
13177: LD_VAR 0 3
13181: NOT
13182: IFFALSE 13186
// exit ;
13184: GO 13242
// un := tmp [ rand ( 1 , tmp ) ] ;
13186: LD_ADDR_VAR 0 2
13190: PUSH
13191: LD_VAR 0 3
13195: PUSH
13196: LD_INT 1
13198: PPUSH
13199: LD_VAR 0 3
13203: PPUSH
13204: CALL_OW 12
13208: ARRAY
13209: ST_TO_ADDR
// if Crawls ( un ) then
13210: LD_VAR 0 2
13214: PPUSH
13215: CALL_OW 318
13219: IFFALSE 13230
// ComWalk ( un ) ;
13221: LD_VAR 0 2
13225: PPUSH
13226: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13230: LD_VAR 0 2
13234: PPUSH
13235: LD_INT 5
13237: PPUSH
13238: CALL_OW 336
// end ;
13242: PPOPN 3
13244: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13245: LD_EXP 24
13249: PUSH
13250: LD_EXP 42
13254: AND
13255: PUSH
13256: LD_OWVAR 67
13260: PUSH
13261: LD_INT 4
13263: LESS
13264: AND
13265: IFFALSE 13284
13267: GO 13269
13269: DISABLE
// begin Difficulty := Difficulty + 1 ;
13270: LD_ADDR_OWVAR 67
13274: PUSH
13275: LD_OWVAR 67
13279: PUSH
13280: LD_INT 1
13282: PLUS
13283: ST_TO_ADDR
// end ;
13284: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13285: LD_EXP 24
13289: PUSH
13290: LD_EXP 43
13294: AND
13295: IFFALSE 13398
13297: GO 13299
13299: DISABLE
13300: LD_INT 0
13302: PPUSH
// begin for i := 1 to 5 do
13303: LD_ADDR_VAR 0 1
13307: PUSH
13308: DOUBLE
13309: LD_INT 1
13311: DEC
13312: ST_TO_ADDR
13313: LD_INT 5
13315: PUSH
13316: FOR_TO
13317: IFFALSE 13396
// begin uc_nation := nation_nature ;
13319: LD_ADDR_OWVAR 21
13323: PUSH
13324: LD_INT 0
13326: ST_TO_ADDR
// uc_side := 0 ;
13327: LD_ADDR_OWVAR 20
13331: PUSH
13332: LD_INT 0
13334: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13335: LD_ADDR_OWVAR 29
13339: PUSH
13340: LD_INT 12
13342: PUSH
13343: LD_INT 12
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: ST_TO_ADDR
// hc_agressivity := 20 ;
13350: LD_ADDR_OWVAR 35
13354: PUSH
13355: LD_INT 20
13357: ST_TO_ADDR
// hc_class := class_tiger ;
13358: LD_ADDR_OWVAR 28
13362: PUSH
13363: LD_INT 14
13365: ST_TO_ADDR
// hc_gallery :=  ;
13366: LD_ADDR_OWVAR 33
13370: PUSH
13371: LD_STRING 
13373: ST_TO_ADDR
// hc_name :=  ;
13374: LD_ADDR_OWVAR 26
13378: PUSH
13379: LD_STRING 
13381: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13382: CALL_OW 44
13386: PPUSH
13387: LD_INT 0
13389: PPUSH
13390: CALL_OW 51
// end ;
13394: GO 13316
13396: POP
13397: POP
// end ;
13398: PPOPN 1
13400: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13401: LD_EXP 24
13405: PUSH
13406: LD_EXP 44
13410: AND
13411: IFFALSE 13420
13413: GO 13415
13415: DISABLE
// StreamSibBomb ;
13416: CALL 13421 0 0
13420: END
// export function StreamSibBomb ; var i , x , y ; begin
13421: LD_INT 0
13423: PPUSH
13424: PPUSH
13425: PPUSH
13426: PPUSH
// result := false ;
13427: LD_ADDR_VAR 0 1
13431: PUSH
13432: LD_INT 0
13434: ST_TO_ADDR
// for i := 1 to 16 do
13435: LD_ADDR_VAR 0 2
13439: PUSH
13440: DOUBLE
13441: LD_INT 1
13443: DEC
13444: ST_TO_ADDR
13445: LD_INT 16
13447: PUSH
13448: FOR_TO
13449: IFFALSE 13648
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13451: LD_ADDR_VAR 0 3
13455: PUSH
13456: LD_INT 10
13458: PUSH
13459: LD_INT 20
13461: PUSH
13462: LD_INT 30
13464: PUSH
13465: LD_INT 40
13467: PUSH
13468: LD_INT 50
13470: PUSH
13471: LD_INT 60
13473: PUSH
13474: LD_INT 70
13476: PUSH
13477: LD_INT 80
13479: PUSH
13480: LD_INT 90
13482: PUSH
13483: LD_INT 100
13485: PUSH
13486: LD_INT 110
13488: PUSH
13489: LD_INT 120
13491: PUSH
13492: LD_INT 130
13494: PUSH
13495: LD_INT 140
13497: PUSH
13498: LD_INT 150
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: PUSH
13518: LD_INT 1
13520: PPUSH
13521: LD_INT 15
13523: PPUSH
13524: CALL_OW 12
13528: ARRAY
13529: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13530: LD_ADDR_VAR 0 4
13534: PUSH
13535: LD_INT 10
13537: PUSH
13538: LD_INT 20
13540: PUSH
13541: LD_INT 30
13543: PUSH
13544: LD_INT 40
13546: PUSH
13547: LD_INT 50
13549: PUSH
13550: LD_INT 60
13552: PUSH
13553: LD_INT 70
13555: PUSH
13556: LD_INT 80
13558: PUSH
13559: LD_INT 90
13561: PUSH
13562: LD_INT 100
13564: PUSH
13565: LD_INT 110
13567: PUSH
13568: LD_INT 120
13570: PUSH
13571: LD_INT 130
13573: PUSH
13574: LD_INT 140
13576: PUSH
13577: LD_INT 150
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: PUSH
13597: LD_INT 1
13599: PPUSH
13600: LD_INT 15
13602: PPUSH
13603: CALL_OW 12
13607: ARRAY
13608: ST_TO_ADDR
// if ValidHex ( x , y ) then
13609: LD_VAR 0 3
13613: PPUSH
13614: LD_VAR 0 4
13618: PPUSH
13619: CALL_OW 488
13623: IFFALSE 13646
// begin result := [ x , y ] ;
13625: LD_ADDR_VAR 0 1
13629: PUSH
13630: LD_VAR 0 3
13634: PUSH
13635: LD_VAR 0 4
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: ST_TO_ADDR
// break ;
13644: GO 13648
// end ; end ;
13646: GO 13448
13648: POP
13649: POP
// if result then
13650: LD_VAR 0 1
13654: IFFALSE 13714
// begin ToLua ( playSibBomb() ) ;
13656: LD_STRING playSibBomb()
13658: PPUSH
13659: CALL_OW 559
// wait ( 0 0$14 ) ;
13663: LD_INT 490
13665: PPUSH
13666: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13670: LD_VAR 0 1
13674: PUSH
13675: LD_INT 1
13677: ARRAY
13678: PPUSH
13679: LD_VAR 0 1
13683: PUSH
13684: LD_INT 2
13686: ARRAY
13687: PPUSH
13688: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13692: LD_VAR 0 1
13696: PUSH
13697: LD_INT 1
13699: ARRAY
13700: PPUSH
13701: LD_VAR 0 1
13705: PUSH
13706: LD_INT 2
13708: ARRAY
13709: PPUSH
13710: CALL_OW 429
// end ; end ;
13714: LD_VAR 0 1
13718: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13719: LD_EXP 24
13723: PUSH
13724: LD_EXP 46
13728: AND
13729: IFFALSE 13741
13731: GO 13733
13733: DISABLE
// YouLost (  ) ;
13734: LD_STRING 
13736: PPUSH
13737: CALL_OW 104
13741: END
// every 0 0$1 trigger StreamModeActive and sFog do
13742: LD_EXP 24
13746: PUSH
13747: LD_EXP 45
13751: AND
13752: IFFALSE 13766
13754: GO 13756
13756: DISABLE
// FogOff ( your_side ) ;
13757: LD_OWVAR 2
13761: PPUSH
13762: CALL_OW 344
13766: END
// every 0 0$1 trigger StreamModeActive and sSun do
13767: LD_EXP 24
13771: PUSH
13772: LD_EXP 47
13776: AND
13777: IFFALSE 13805
13779: GO 13781
13781: DISABLE
// begin solar_recharge_percent := 0 ;
13782: LD_ADDR_OWVAR 79
13786: PUSH
13787: LD_INT 0
13789: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13790: LD_INT 10500
13792: PPUSH
13793: CALL_OW 67
// solar_recharge_percent := 100 ;
13797: LD_ADDR_OWVAR 79
13801: PUSH
13802: LD_INT 100
13804: ST_TO_ADDR
// end ;
13805: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13806: LD_EXP 24
13810: PUSH
13811: LD_EXP 48
13815: AND
13816: IFFALSE 14055
13818: GO 13820
13820: DISABLE
13821: LD_INT 0
13823: PPUSH
13824: PPUSH
13825: PPUSH
// begin tmp := [ ] ;
13826: LD_ADDR_VAR 0 3
13830: PUSH
13831: EMPTY
13832: ST_TO_ADDR
// for i := 1 to 6 do
13833: LD_ADDR_VAR 0 1
13837: PUSH
13838: DOUBLE
13839: LD_INT 1
13841: DEC
13842: ST_TO_ADDR
13843: LD_INT 6
13845: PUSH
13846: FOR_TO
13847: IFFALSE 13952
// begin uc_nation := nation_nature ;
13849: LD_ADDR_OWVAR 21
13853: PUSH
13854: LD_INT 0
13856: ST_TO_ADDR
// uc_side := 0 ;
13857: LD_ADDR_OWVAR 20
13861: PUSH
13862: LD_INT 0
13864: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13865: LD_ADDR_OWVAR 29
13869: PUSH
13870: LD_INT 12
13872: PUSH
13873: LD_INT 12
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: ST_TO_ADDR
// hc_agressivity := 20 ;
13880: LD_ADDR_OWVAR 35
13884: PUSH
13885: LD_INT 20
13887: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13888: LD_ADDR_OWVAR 28
13892: PUSH
13893: LD_INT 17
13895: ST_TO_ADDR
// hc_gallery :=  ;
13896: LD_ADDR_OWVAR 33
13900: PUSH
13901: LD_STRING 
13903: ST_TO_ADDR
// hc_name :=  ;
13904: LD_ADDR_OWVAR 26
13908: PUSH
13909: LD_STRING 
13911: ST_TO_ADDR
// un := CreateHuman ;
13912: LD_ADDR_VAR 0 2
13916: PUSH
13917: CALL_OW 44
13921: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13922: LD_VAR 0 2
13926: PPUSH
13927: LD_INT 1
13929: PPUSH
13930: CALL_OW 51
// tmp := tmp ^ un ;
13934: LD_ADDR_VAR 0 3
13938: PUSH
13939: LD_VAR 0 3
13943: PUSH
13944: LD_VAR 0 2
13948: ADD
13949: ST_TO_ADDR
// end ;
13950: GO 13846
13952: POP
13953: POP
// repeat wait ( 0 0$1 ) ;
13954: LD_INT 35
13956: PPUSH
13957: CALL_OW 67
// for un in tmp do
13961: LD_ADDR_VAR 0 2
13965: PUSH
13966: LD_VAR 0 3
13970: PUSH
13971: FOR_IN
13972: IFFALSE 14046
// begin if IsDead ( un ) then
13974: LD_VAR 0 2
13978: PPUSH
13979: CALL_OW 301
13983: IFFALSE 14003
// begin tmp := tmp diff un ;
13985: LD_ADDR_VAR 0 3
13989: PUSH
13990: LD_VAR 0 3
13994: PUSH
13995: LD_VAR 0 2
13999: DIFF
14000: ST_TO_ADDR
// continue ;
14001: GO 13971
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14003: LD_VAR 0 2
14007: PPUSH
14008: LD_INT 3
14010: PUSH
14011: LD_INT 22
14013: PUSH
14014: LD_INT 0
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: PPUSH
14025: CALL_OW 69
14029: PPUSH
14030: LD_VAR 0 2
14034: PPUSH
14035: CALL_OW 74
14039: PPUSH
14040: CALL_OW 115
// end ;
14044: GO 13971
14046: POP
14047: POP
// until not tmp ;
14048: LD_VAR 0 3
14052: NOT
14053: IFFALSE 13954
// end ;
14055: PPOPN 3
14057: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14058: LD_EXP 24
14062: PUSH
14063: LD_EXP 49
14067: AND
14068: IFFALSE 14122
14070: GO 14072
14072: DISABLE
// begin ToLua ( displayTroll(); ) ;
14073: LD_STRING displayTroll();
14075: PPUSH
14076: CALL_OW 559
// wait ( 3 3$00 ) ;
14080: LD_INT 6300
14082: PPUSH
14083: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14087: LD_STRING hideTroll();
14089: PPUSH
14090: CALL_OW 559
// wait ( 1 1$00 ) ;
14094: LD_INT 2100
14096: PPUSH
14097: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14101: LD_STRING displayTroll();
14103: PPUSH
14104: CALL_OW 559
// wait ( 1 1$00 ) ;
14108: LD_INT 2100
14110: PPUSH
14111: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14115: LD_STRING hideTroll();
14117: PPUSH
14118: CALL_OW 559
// end ;
14122: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14123: LD_EXP 24
14127: PUSH
14128: LD_EXP 50
14132: AND
14133: IFFALSE 14196
14135: GO 14137
14137: DISABLE
14138: LD_INT 0
14140: PPUSH
// begin p := 0 ;
14141: LD_ADDR_VAR 0 1
14145: PUSH
14146: LD_INT 0
14148: ST_TO_ADDR
// repeat game_speed := 1 ;
14149: LD_ADDR_OWVAR 65
14153: PUSH
14154: LD_INT 1
14156: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14157: LD_INT 35
14159: PPUSH
14160: CALL_OW 67
// p := p + 1 ;
14164: LD_ADDR_VAR 0 1
14168: PUSH
14169: LD_VAR 0 1
14173: PUSH
14174: LD_INT 1
14176: PLUS
14177: ST_TO_ADDR
// until p >= 60 ;
14178: LD_VAR 0 1
14182: PUSH
14183: LD_INT 60
14185: GREATEREQUAL
14186: IFFALSE 14149
// game_speed := 4 ;
14188: LD_ADDR_OWVAR 65
14192: PUSH
14193: LD_INT 4
14195: ST_TO_ADDR
// end ;
14196: PPOPN 1
14198: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14199: LD_EXP 24
14203: PUSH
14204: LD_EXP 51
14208: AND
14209: IFFALSE 14355
14211: GO 14213
14213: DISABLE
14214: LD_INT 0
14216: PPUSH
14217: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14218: LD_ADDR_VAR 0 1
14222: PUSH
14223: LD_INT 22
14225: PUSH
14226: LD_OWVAR 2
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: PUSH
14235: LD_INT 2
14237: PUSH
14238: LD_INT 30
14240: PUSH
14241: LD_INT 0
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: PUSH
14248: LD_INT 30
14250: PUSH
14251: LD_INT 1
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: LIST
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: PPUSH
14267: CALL_OW 69
14271: ST_TO_ADDR
// if not depot then
14272: LD_VAR 0 1
14276: NOT
14277: IFFALSE 14281
// exit ;
14279: GO 14355
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14281: LD_ADDR_VAR 0 2
14285: PUSH
14286: LD_VAR 0 1
14290: PUSH
14291: LD_INT 1
14293: PPUSH
14294: LD_VAR 0 1
14298: PPUSH
14299: CALL_OW 12
14303: ARRAY
14304: PPUSH
14305: CALL_OW 274
14309: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14310: LD_VAR 0 2
14314: PPUSH
14315: LD_INT 1
14317: PPUSH
14318: LD_INT 0
14320: PPUSH
14321: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14325: LD_VAR 0 2
14329: PPUSH
14330: LD_INT 2
14332: PPUSH
14333: LD_INT 0
14335: PPUSH
14336: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14340: LD_VAR 0 2
14344: PPUSH
14345: LD_INT 3
14347: PPUSH
14348: LD_INT 0
14350: PPUSH
14351: CALL_OW 277
// end ;
14355: PPOPN 2
14357: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14358: LD_EXP 24
14362: PUSH
14363: LD_EXP 52
14367: AND
14368: IFFALSE 14465
14370: GO 14372
14372: DISABLE
14373: LD_INT 0
14375: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14376: LD_ADDR_VAR 0 1
14380: PUSH
14381: LD_INT 22
14383: PUSH
14384: LD_OWVAR 2
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: PUSH
14393: LD_INT 21
14395: PUSH
14396: LD_INT 1
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: PUSH
14403: LD_INT 3
14405: PUSH
14406: LD_INT 23
14408: PUSH
14409: LD_INT 0
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: PUSH
14420: EMPTY
14421: LIST
14422: LIST
14423: LIST
14424: PPUSH
14425: CALL_OW 69
14429: ST_TO_ADDR
// if not tmp then
14430: LD_VAR 0 1
14434: NOT
14435: IFFALSE 14439
// exit ;
14437: GO 14465
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14439: LD_VAR 0 1
14443: PUSH
14444: LD_INT 1
14446: PPUSH
14447: LD_VAR 0 1
14451: PPUSH
14452: CALL_OW 12
14456: ARRAY
14457: PPUSH
14458: LD_INT 200
14460: PPUSH
14461: CALL_OW 234
// end ;
14465: PPOPN 1
14467: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14468: LD_EXP 24
14472: PUSH
14473: LD_EXP 53
14477: AND
14478: IFFALSE 14557
14480: GO 14482
14482: DISABLE
14483: LD_INT 0
14485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14486: LD_ADDR_VAR 0 1
14490: PUSH
14491: LD_INT 22
14493: PUSH
14494: LD_OWVAR 2
14498: PUSH
14499: EMPTY
14500: LIST
14501: LIST
14502: PUSH
14503: LD_INT 21
14505: PUSH
14506: LD_INT 2
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: PPUSH
14517: CALL_OW 69
14521: ST_TO_ADDR
// if not tmp then
14522: LD_VAR 0 1
14526: NOT
14527: IFFALSE 14531
// exit ;
14529: GO 14557
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14531: LD_VAR 0 1
14535: PUSH
14536: LD_INT 1
14538: PPUSH
14539: LD_VAR 0 1
14543: PPUSH
14544: CALL_OW 12
14548: ARRAY
14549: PPUSH
14550: LD_INT 60
14552: PPUSH
14553: CALL_OW 234
// end ;
14557: PPOPN 1
14559: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14560: LD_EXP 24
14564: PUSH
14565: LD_EXP 54
14569: AND
14570: IFFALSE 14669
14572: GO 14574
14574: DISABLE
14575: LD_INT 0
14577: PPUSH
14578: PPUSH
// begin enable ;
14579: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14580: LD_ADDR_VAR 0 1
14584: PUSH
14585: LD_INT 22
14587: PUSH
14588: LD_OWVAR 2
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: PUSH
14597: LD_INT 61
14599: PUSH
14600: EMPTY
14601: LIST
14602: PUSH
14603: LD_INT 33
14605: PUSH
14606: LD_INT 2
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: PUSH
14613: EMPTY
14614: LIST
14615: LIST
14616: LIST
14617: PPUSH
14618: CALL_OW 69
14622: ST_TO_ADDR
// if not tmp then
14623: LD_VAR 0 1
14627: NOT
14628: IFFALSE 14632
// exit ;
14630: GO 14669
// for i in tmp do
14632: LD_ADDR_VAR 0 2
14636: PUSH
14637: LD_VAR 0 1
14641: PUSH
14642: FOR_IN
14643: IFFALSE 14667
// if IsControledBy ( i ) then
14645: LD_VAR 0 2
14649: PPUSH
14650: CALL_OW 312
14654: IFFALSE 14665
// ComUnlink ( i ) ;
14656: LD_VAR 0 2
14660: PPUSH
14661: CALL_OW 136
14665: GO 14642
14667: POP
14668: POP
// end ;
14669: PPOPN 2
14671: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14672: LD_EXP 24
14676: PUSH
14677: LD_EXP 55
14681: AND
14682: IFFALSE 14822
14684: GO 14686
14686: DISABLE
14687: LD_INT 0
14689: PPUSH
14690: PPUSH
// begin ToLua ( displayPowell(); ) ;
14691: LD_STRING displayPowell();
14693: PPUSH
14694: CALL_OW 559
// uc_side := 0 ;
14698: LD_ADDR_OWVAR 20
14702: PUSH
14703: LD_INT 0
14705: ST_TO_ADDR
// uc_nation := 2 ;
14706: LD_ADDR_OWVAR 21
14710: PUSH
14711: LD_INT 2
14713: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14714: LD_ADDR_OWVAR 37
14718: PUSH
14719: LD_INT 14
14721: ST_TO_ADDR
// vc_engine := engine_siberite ;
14722: LD_ADDR_OWVAR 39
14726: PUSH
14727: LD_INT 3
14729: ST_TO_ADDR
// vc_control := control_apeman ;
14730: LD_ADDR_OWVAR 38
14734: PUSH
14735: LD_INT 5
14737: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14738: LD_ADDR_OWVAR 40
14742: PUSH
14743: LD_INT 29
14745: ST_TO_ADDR
// un := CreateVehicle ;
14746: LD_ADDR_VAR 0 2
14750: PUSH
14751: CALL_OW 45
14755: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14756: LD_VAR 0 2
14760: PPUSH
14761: LD_INT 1
14763: PPUSH
14764: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14768: LD_INT 35
14770: PPUSH
14771: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14775: LD_VAR 0 2
14779: PPUSH
14780: LD_INT 22
14782: PUSH
14783: LD_OWVAR 2
14787: PUSH
14788: EMPTY
14789: LIST
14790: LIST
14791: PPUSH
14792: CALL_OW 69
14796: PPUSH
14797: LD_VAR 0 2
14801: PPUSH
14802: CALL_OW 74
14806: PPUSH
14807: CALL_OW 115
// until IsDead ( un ) ;
14811: LD_VAR 0 2
14815: PPUSH
14816: CALL_OW 301
14820: IFFALSE 14768
// end ;
14822: PPOPN 2
14824: END
// every 0 0$1 trigger StreamModeActive and sStu do
14825: LD_EXP 24
14829: PUSH
14830: LD_EXP 63
14834: AND
14835: IFFALSE 14851
14837: GO 14839
14839: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14840: LD_STRING displayStucuk();
14842: PPUSH
14843: CALL_OW 559
// ResetFog ;
14847: CALL_OW 335
// end ;
14851: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14852: LD_EXP 24
14856: PUSH
14857: LD_EXP 56
14861: AND
14862: IFFALSE 15003
14864: GO 14866
14866: DISABLE
14867: LD_INT 0
14869: PPUSH
14870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14871: LD_ADDR_VAR 0 2
14875: PUSH
14876: LD_INT 22
14878: PUSH
14879: LD_OWVAR 2
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PUSH
14888: LD_INT 21
14890: PUSH
14891: LD_INT 1
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: PUSH
14898: EMPTY
14899: LIST
14900: LIST
14901: PPUSH
14902: CALL_OW 69
14906: ST_TO_ADDR
// if not tmp then
14907: LD_VAR 0 2
14911: NOT
14912: IFFALSE 14916
// exit ;
14914: GO 15003
// un := tmp [ rand ( 1 , tmp ) ] ;
14916: LD_ADDR_VAR 0 1
14920: PUSH
14921: LD_VAR 0 2
14925: PUSH
14926: LD_INT 1
14928: PPUSH
14929: LD_VAR 0 2
14933: PPUSH
14934: CALL_OW 12
14938: ARRAY
14939: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14940: LD_VAR 0 1
14944: PPUSH
14945: LD_INT 0
14947: PPUSH
14948: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14952: LD_VAR 0 1
14956: PPUSH
14957: LD_OWVAR 3
14961: PUSH
14962: LD_VAR 0 1
14966: DIFF
14967: PPUSH
14968: LD_VAR 0 1
14972: PPUSH
14973: CALL_OW 74
14977: PPUSH
14978: CALL_OW 115
// wait ( 0 0$20 ) ;
14982: LD_INT 700
14984: PPUSH
14985: CALL_OW 67
// SetSide ( un , your_side ) ;
14989: LD_VAR 0 1
14993: PPUSH
14994: LD_OWVAR 2
14998: PPUSH
14999: CALL_OW 235
// end ;
15003: PPOPN 2
15005: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15006: LD_EXP 24
15010: PUSH
15011: LD_EXP 57
15015: AND
15016: IFFALSE 15122
15018: GO 15020
15020: DISABLE
15021: LD_INT 0
15023: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15024: LD_ADDR_VAR 0 1
15028: PUSH
15029: LD_INT 22
15031: PUSH
15032: LD_OWVAR 2
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: PUSH
15041: LD_INT 2
15043: PUSH
15044: LD_INT 30
15046: PUSH
15047: LD_INT 0
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: PUSH
15054: LD_INT 30
15056: PUSH
15057: LD_INT 1
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: LIST
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: PPUSH
15073: CALL_OW 69
15077: ST_TO_ADDR
// if not depot then
15078: LD_VAR 0 1
15082: NOT
15083: IFFALSE 15087
// exit ;
15085: GO 15122
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15087: LD_VAR 0 1
15091: PUSH
15092: LD_INT 1
15094: ARRAY
15095: PPUSH
15096: CALL_OW 250
15100: PPUSH
15101: LD_VAR 0 1
15105: PUSH
15106: LD_INT 1
15108: ARRAY
15109: PPUSH
15110: CALL_OW 251
15114: PPUSH
15115: LD_INT 70
15117: PPUSH
15118: CALL_OW 495
// end ;
15122: PPOPN 1
15124: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15125: LD_EXP 24
15129: PUSH
15130: LD_EXP 58
15134: AND
15135: IFFALSE 15346
15137: GO 15139
15139: DISABLE
15140: LD_INT 0
15142: PPUSH
15143: PPUSH
15144: PPUSH
15145: PPUSH
15146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15147: LD_ADDR_VAR 0 5
15151: PUSH
15152: LD_INT 22
15154: PUSH
15155: LD_OWVAR 2
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PUSH
15164: LD_INT 21
15166: PUSH
15167: LD_INT 1
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: PPUSH
15178: CALL_OW 69
15182: ST_TO_ADDR
// if not tmp then
15183: LD_VAR 0 5
15187: NOT
15188: IFFALSE 15192
// exit ;
15190: GO 15346
// for i in tmp do
15192: LD_ADDR_VAR 0 1
15196: PUSH
15197: LD_VAR 0 5
15201: PUSH
15202: FOR_IN
15203: IFFALSE 15344
// begin d := rand ( 0 , 5 ) ;
15205: LD_ADDR_VAR 0 4
15209: PUSH
15210: LD_INT 0
15212: PPUSH
15213: LD_INT 5
15215: PPUSH
15216: CALL_OW 12
15220: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15221: LD_ADDR_VAR 0 2
15225: PUSH
15226: LD_VAR 0 1
15230: PPUSH
15231: CALL_OW 250
15235: PPUSH
15236: LD_VAR 0 4
15240: PPUSH
15241: LD_INT 3
15243: PPUSH
15244: LD_INT 12
15246: PPUSH
15247: CALL_OW 12
15251: PPUSH
15252: CALL_OW 272
15256: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15257: LD_ADDR_VAR 0 3
15261: PUSH
15262: LD_VAR 0 1
15266: PPUSH
15267: CALL_OW 251
15271: PPUSH
15272: LD_VAR 0 4
15276: PPUSH
15277: LD_INT 3
15279: PPUSH
15280: LD_INT 12
15282: PPUSH
15283: CALL_OW 12
15287: PPUSH
15288: CALL_OW 273
15292: ST_TO_ADDR
// if ValidHex ( x , y ) then
15293: LD_VAR 0 2
15297: PPUSH
15298: LD_VAR 0 3
15302: PPUSH
15303: CALL_OW 488
15307: IFFALSE 15342
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15309: LD_VAR 0 1
15313: PPUSH
15314: LD_VAR 0 2
15318: PPUSH
15319: LD_VAR 0 3
15323: PPUSH
15324: LD_INT 3
15326: PPUSH
15327: LD_INT 6
15329: PPUSH
15330: CALL_OW 12
15334: PPUSH
15335: LD_INT 1
15337: PPUSH
15338: CALL_OW 483
// end ;
15342: GO 15202
15344: POP
15345: POP
// end ;
15346: PPOPN 5
15348: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15349: LD_EXP 24
15353: PUSH
15354: LD_EXP 59
15358: AND
15359: IFFALSE 15453
15361: GO 15363
15363: DISABLE
15364: LD_INT 0
15366: PPUSH
15367: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15368: LD_ADDR_VAR 0 2
15372: PUSH
15373: LD_INT 22
15375: PUSH
15376: LD_OWVAR 2
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: PUSH
15385: LD_INT 32
15387: PUSH
15388: LD_INT 1
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PUSH
15395: LD_INT 21
15397: PUSH
15398: LD_INT 2
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: LIST
15409: PPUSH
15410: CALL_OW 69
15414: ST_TO_ADDR
// if not tmp then
15415: LD_VAR 0 2
15419: NOT
15420: IFFALSE 15424
// exit ;
15422: GO 15453
// for i in tmp do
15424: LD_ADDR_VAR 0 1
15428: PUSH
15429: LD_VAR 0 2
15433: PUSH
15434: FOR_IN
15435: IFFALSE 15451
// SetFuel ( i , 0 ) ;
15437: LD_VAR 0 1
15441: PPUSH
15442: LD_INT 0
15444: PPUSH
15445: CALL_OW 240
15449: GO 15434
15451: POP
15452: POP
// end ;
15453: PPOPN 2
15455: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15456: LD_EXP 24
15460: PUSH
15461: LD_EXP 60
15465: AND
15466: IFFALSE 15532
15468: GO 15470
15470: DISABLE
15471: LD_INT 0
15473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15474: LD_ADDR_VAR 0 1
15478: PUSH
15479: LD_INT 22
15481: PUSH
15482: LD_OWVAR 2
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: PUSH
15491: LD_INT 30
15493: PUSH
15494: LD_INT 29
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: PPUSH
15505: CALL_OW 69
15509: ST_TO_ADDR
// if not tmp then
15510: LD_VAR 0 1
15514: NOT
15515: IFFALSE 15519
// exit ;
15517: GO 15532
// DestroyUnit ( tmp [ 1 ] ) ;
15519: LD_VAR 0 1
15523: PUSH
15524: LD_INT 1
15526: ARRAY
15527: PPUSH
15528: CALL_OW 65
// end ;
15532: PPOPN 1
15534: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15535: LD_EXP 24
15539: PUSH
15540: LD_EXP 62
15544: AND
15545: IFFALSE 15674
15547: GO 15549
15549: DISABLE
15550: LD_INT 0
15552: PPUSH
// begin uc_side := 0 ;
15553: LD_ADDR_OWVAR 20
15557: PUSH
15558: LD_INT 0
15560: ST_TO_ADDR
// uc_nation := nation_arabian ;
15561: LD_ADDR_OWVAR 21
15565: PUSH
15566: LD_INT 2
15568: ST_TO_ADDR
// hc_gallery :=  ;
15569: LD_ADDR_OWVAR 33
15573: PUSH
15574: LD_STRING 
15576: ST_TO_ADDR
// hc_name :=  ;
15577: LD_ADDR_OWVAR 26
15581: PUSH
15582: LD_STRING 
15584: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15585: LD_INT 1
15587: PPUSH
15588: LD_INT 11
15590: PPUSH
15591: LD_INT 10
15593: PPUSH
15594: CALL_OW 380
// un := CreateHuman ;
15598: LD_ADDR_VAR 0 1
15602: PUSH
15603: CALL_OW 44
15607: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15608: LD_VAR 0 1
15612: PPUSH
15613: LD_INT 1
15615: PPUSH
15616: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15620: LD_INT 35
15622: PPUSH
15623: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15627: LD_VAR 0 1
15631: PPUSH
15632: LD_INT 22
15634: PUSH
15635: LD_OWVAR 2
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: PPUSH
15644: CALL_OW 69
15648: PPUSH
15649: LD_VAR 0 1
15653: PPUSH
15654: CALL_OW 74
15658: PPUSH
15659: CALL_OW 115
// until IsDead ( un ) ;
15663: LD_VAR 0 1
15667: PPUSH
15668: CALL_OW 301
15672: IFFALSE 15620
// end ;
15674: PPOPN 1
15676: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15677: LD_EXP 24
15681: PUSH
15682: LD_EXP 64
15686: AND
15687: IFFALSE 15699
15689: GO 15691
15691: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15692: LD_STRING earthquake(getX(game), 0, 32)
15694: PPUSH
15695: CALL_OW 559
15699: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15700: LD_EXP 24
15704: PUSH
15705: LD_EXP 65
15709: AND
15710: IFFALSE 15801
15712: GO 15714
15714: DISABLE
15715: LD_INT 0
15717: PPUSH
// begin enable ;
15718: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15719: LD_ADDR_VAR 0 1
15723: PUSH
15724: LD_INT 22
15726: PUSH
15727: LD_OWVAR 2
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: PUSH
15736: LD_INT 21
15738: PUSH
15739: LD_INT 2
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: PUSH
15746: LD_INT 33
15748: PUSH
15749: LD_INT 3
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: PUSH
15756: EMPTY
15757: LIST
15758: LIST
15759: LIST
15760: PPUSH
15761: CALL_OW 69
15765: ST_TO_ADDR
// if not tmp then
15766: LD_VAR 0 1
15770: NOT
15771: IFFALSE 15775
// exit ;
15773: GO 15801
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15775: LD_VAR 0 1
15779: PUSH
15780: LD_INT 1
15782: PPUSH
15783: LD_VAR 0 1
15787: PPUSH
15788: CALL_OW 12
15792: ARRAY
15793: PPUSH
15794: LD_INT 1
15796: PPUSH
15797: CALL_OW 234
// end ;
15801: PPOPN 1
15803: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15804: LD_EXP 24
15808: PUSH
15809: LD_EXP 66
15813: AND
15814: IFFALSE 15955
15816: GO 15818
15818: DISABLE
15819: LD_INT 0
15821: PPUSH
15822: PPUSH
15823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15824: LD_ADDR_VAR 0 3
15828: PUSH
15829: LD_INT 22
15831: PUSH
15832: LD_OWVAR 2
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: PUSH
15841: LD_INT 25
15843: PUSH
15844: LD_INT 1
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: PPUSH
15855: CALL_OW 69
15859: ST_TO_ADDR
// if not tmp then
15860: LD_VAR 0 3
15864: NOT
15865: IFFALSE 15869
// exit ;
15867: GO 15955
// un := tmp [ rand ( 1 , tmp ) ] ;
15869: LD_ADDR_VAR 0 2
15873: PUSH
15874: LD_VAR 0 3
15878: PUSH
15879: LD_INT 1
15881: PPUSH
15882: LD_VAR 0 3
15886: PPUSH
15887: CALL_OW 12
15891: ARRAY
15892: ST_TO_ADDR
// if Crawls ( un ) then
15893: LD_VAR 0 2
15897: PPUSH
15898: CALL_OW 318
15902: IFFALSE 15913
// ComWalk ( un ) ;
15904: LD_VAR 0 2
15908: PPUSH
15909: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15913: LD_VAR 0 2
15917: PPUSH
15918: LD_INT 9
15920: PPUSH
15921: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15925: LD_INT 28
15927: PPUSH
15928: LD_OWVAR 2
15932: PPUSH
15933: LD_INT 2
15935: PPUSH
15936: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15940: LD_INT 29
15942: PPUSH
15943: LD_OWVAR 2
15947: PPUSH
15948: LD_INT 2
15950: PPUSH
15951: CALL_OW 322
// end ;
15955: PPOPN 3
15957: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15958: LD_EXP 24
15962: PUSH
15963: LD_EXP 67
15967: AND
15968: IFFALSE 16079
15970: GO 15972
15972: DISABLE
15973: LD_INT 0
15975: PPUSH
15976: PPUSH
15977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15978: LD_ADDR_VAR 0 3
15982: PUSH
15983: LD_INT 22
15985: PUSH
15986: LD_OWVAR 2
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PUSH
15995: LD_INT 25
15997: PUSH
15998: LD_INT 1
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: PPUSH
16009: CALL_OW 69
16013: ST_TO_ADDR
// if not tmp then
16014: LD_VAR 0 3
16018: NOT
16019: IFFALSE 16023
// exit ;
16021: GO 16079
// un := tmp [ rand ( 1 , tmp ) ] ;
16023: LD_ADDR_VAR 0 2
16027: PUSH
16028: LD_VAR 0 3
16032: PUSH
16033: LD_INT 1
16035: PPUSH
16036: LD_VAR 0 3
16040: PPUSH
16041: CALL_OW 12
16045: ARRAY
16046: ST_TO_ADDR
// if Crawls ( un ) then
16047: LD_VAR 0 2
16051: PPUSH
16052: CALL_OW 318
16056: IFFALSE 16067
// ComWalk ( un ) ;
16058: LD_VAR 0 2
16062: PPUSH
16063: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16067: LD_VAR 0 2
16071: PPUSH
16072: LD_INT 8
16074: PPUSH
16075: CALL_OW 336
// end ;
16079: PPOPN 3
16081: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16082: LD_EXP 24
16086: PUSH
16087: LD_EXP 68
16091: AND
16092: IFFALSE 16236
16094: GO 16096
16096: DISABLE
16097: LD_INT 0
16099: PPUSH
16100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16101: LD_ADDR_VAR 0 2
16105: PUSH
16106: LD_INT 22
16108: PUSH
16109: LD_OWVAR 2
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PUSH
16118: LD_INT 21
16120: PUSH
16121: LD_INT 2
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: PUSH
16128: LD_INT 2
16130: PUSH
16131: LD_INT 34
16133: PUSH
16134: LD_INT 12
16136: PUSH
16137: EMPTY
16138: LIST
16139: LIST
16140: PUSH
16141: LD_INT 34
16143: PUSH
16144: LD_INT 51
16146: PUSH
16147: EMPTY
16148: LIST
16149: LIST
16150: PUSH
16151: LD_INT 34
16153: PUSH
16154: LD_INT 32
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: PUSH
16167: EMPTY
16168: LIST
16169: LIST
16170: LIST
16171: PPUSH
16172: CALL_OW 69
16176: ST_TO_ADDR
// if not tmp then
16177: LD_VAR 0 2
16181: NOT
16182: IFFALSE 16186
// exit ;
16184: GO 16236
// for i in tmp do
16186: LD_ADDR_VAR 0 1
16190: PUSH
16191: LD_VAR 0 2
16195: PUSH
16196: FOR_IN
16197: IFFALSE 16234
// if GetCargo ( i , mat_artifact ) = 0 then
16199: LD_VAR 0 1
16203: PPUSH
16204: LD_INT 4
16206: PPUSH
16207: CALL_OW 289
16211: PUSH
16212: LD_INT 0
16214: EQUAL
16215: IFFALSE 16232
// SetCargo ( i , mat_siberit , 100 ) ;
16217: LD_VAR 0 1
16221: PPUSH
16222: LD_INT 3
16224: PPUSH
16225: LD_INT 100
16227: PPUSH
16228: CALL_OW 290
16232: GO 16196
16234: POP
16235: POP
// end ;
16236: PPOPN 2
16238: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16239: LD_EXP 24
16243: PUSH
16244: LD_EXP 69
16248: AND
16249: IFFALSE 16432
16251: GO 16253
16253: DISABLE
16254: LD_INT 0
16256: PPUSH
16257: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16258: LD_ADDR_VAR 0 2
16262: PUSH
16263: LD_INT 22
16265: PUSH
16266: LD_OWVAR 2
16270: PUSH
16271: EMPTY
16272: LIST
16273: LIST
16274: PPUSH
16275: CALL_OW 69
16279: ST_TO_ADDR
// if not tmp then
16280: LD_VAR 0 2
16284: NOT
16285: IFFALSE 16289
// exit ;
16287: GO 16432
// for i := 1 to 2 do
16289: LD_ADDR_VAR 0 1
16293: PUSH
16294: DOUBLE
16295: LD_INT 1
16297: DEC
16298: ST_TO_ADDR
16299: LD_INT 2
16301: PUSH
16302: FOR_TO
16303: IFFALSE 16430
// begin uc_side := your_side ;
16305: LD_ADDR_OWVAR 20
16309: PUSH
16310: LD_OWVAR 2
16314: ST_TO_ADDR
// uc_nation := nation_american ;
16315: LD_ADDR_OWVAR 21
16319: PUSH
16320: LD_INT 1
16322: ST_TO_ADDR
// vc_chassis := us_morphling ;
16323: LD_ADDR_OWVAR 37
16327: PUSH
16328: LD_INT 5
16330: ST_TO_ADDR
// vc_engine := engine_siberite ;
16331: LD_ADDR_OWVAR 39
16335: PUSH
16336: LD_INT 3
16338: ST_TO_ADDR
// vc_control := control_computer ;
16339: LD_ADDR_OWVAR 38
16343: PUSH
16344: LD_INT 3
16346: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16347: LD_ADDR_OWVAR 40
16351: PUSH
16352: LD_INT 10
16354: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16355: LD_VAR 0 2
16359: PUSH
16360: LD_INT 1
16362: ARRAY
16363: PPUSH
16364: CALL_OW 310
16368: NOT
16369: IFFALSE 16416
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16371: CALL_OW 45
16375: PPUSH
16376: LD_VAR 0 2
16380: PUSH
16381: LD_INT 1
16383: ARRAY
16384: PPUSH
16385: CALL_OW 250
16389: PPUSH
16390: LD_VAR 0 2
16394: PUSH
16395: LD_INT 1
16397: ARRAY
16398: PPUSH
16399: CALL_OW 251
16403: PPUSH
16404: LD_INT 12
16406: PPUSH
16407: LD_INT 1
16409: PPUSH
16410: CALL_OW 50
16414: GO 16428
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16416: CALL_OW 45
16420: PPUSH
16421: LD_INT 1
16423: PPUSH
16424: CALL_OW 51
// end ;
16428: GO 16302
16430: POP
16431: POP
// end ;
16432: PPOPN 2
16434: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16435: LD_EXP 24
16439: PUSH
16440: LD_EXP 70
16444: AND
16445: IFFALSE 16667
16447: GO 16449
16449: DISABLE
16450: LD_INT 0
16452: PPUSH
16453: PPUSH
16454: PPUSH
16455: PPUSH
16456: PPUSH
16457: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16458: LD_ADDR_VAR 0 6
16462: PUSH
16463: LD_INT 22
16465: PUSH
16466: LD_OWVAR 2
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: LD_INT 21
16477: PUSH
16478: LD_INT 1
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: LD_INT 3
16487: PUSH
16488: LD_INT 23
16490: PUSH
16491: LD_INT 0
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: LIST
16506: PPUSH
16507: CALL_OW 69
16511: ST_TO_ADDR
// if not tmp then
16512: LD_VAR 0 6
16516: NOT
16517: IFFALSE 16521
// exit ;
16519: GO 16667
// s1 := rand ( 1 , 4 ) ;
16521: LD_ADDR_VAR 0 2
16525: PUSH
16526: LD_INT 1
16528: PPUSH
16529: LD_INT 4
16531: PPUSH
16532: CALL_OW 12
16536: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16537: LD_ADDR_VAR 0 4
16541: PUSH
16542: LD_VAR 0 6
16546: PUSH
16547: LD_INT 1
16549: ARRAY
16550: PPUSH
16551: LD_VAR 0 2
16555: PPUSH
16556: CALL_OW 259
16560: ST_TO_ADDR
// if s1 = 1 then
16561: LD_VAR 0 2
16565: PUSH
16566: LD_INT 1
16568: EQUAL
16569: IFFALSE 16589
// s2 := rand ( 2 , 4 ) else
16571: LD_ADDR_VAR 0 3
16575: PUSH
16576: LD_INT 2
16578: PPUSH
16579: LD_INT 4
16581: PPUSH
16582: CALL_OW 12
16586: ST_TO_ADDR
16587: GO 16597
// s2 := 1 ;
16589: LD_ADDR_VAR 0 3
16593: PUSH
16594: LD_INT 1
16596: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16597: LD_ADDR_VAR 0 5
16601: PUSH
16602: LD_VAR 0 6
16606: PUSH
16607: LD_INT 1
16609: ARRAY
16610: PPUSH
16611: LD_VAR 0 3
16615: PPUSH
16616: CALL_OW 259
16620: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16621: LD_VAR 0 6
16625: PUSH
16626: LD_INT 1
16628: ARRAY
16629: PPUSH
16630: LD_VAR 0 2
16634: PPUSH
16635: LD_VAR 0 5
16639: PPUSH
16640: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16644: LD_VAR 0 6
16648: PUSH
16649: LD_INT 1
16651: ARRAY
16652: PPUSH
16653: LD_VAR 0 3
16657: PPUSH
16658: LD_VAR 0 4
16662: PPUSH
16663: CALL_OW 237
// end ;
16667: PPOPN 6
16669: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16670: LD_EXP 24
16674: PUSH
16675: LD_EXP 71
16679: AND
16680: IFFALSE 16759
16682: GO 16684
16684: DISABLE
16685: LD_INT 0
16687: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16688: LD_ADDR_VAR 0 1
16692: PUSH
16693: LD_INT 22
16695: PUSH
16696: LD_OWVAR 2
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: PUSH
16705: LD_INT 30
16707: PUSH
16708: LD_INT 3
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: PPUSH
16719: CALL_OW 69
16723: ST_TO_ADDR
// if not tmp then
16724: LD_VAR 0 1
16728: NOT
16729: IFFALSE 16733
// exit ;
16731: GO 16759
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16733: LD_VAR 0 1
16737: PUSH
16738: LD_INT 1
16740: PPUSH
16741: LD_VAR 0 1
16745: PPUSH
16746: CALL_OW 12
16750: ARRAY
16751: PPUSH
16752: LD_INT 1
16754: PPUSH
16755: CALL_OW 234
// end ;
16759: PPOPN 1
16761: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16762: LD_EXP 24
16766: PUSH
16767: LD_EXP 72
16771: AND
16772: IFFALSE 16884
16774: GO 16776
16776: DISABLE
16777: LD_INT 0
16779: PPUSH
16780: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16781: LD_ADDR_VAR 0 2
16785: PUSH
16786: LD_INT 22
16788: PUSH
16789: LD_OWVAR 2
16793: PUSH
16794: EMPTY
16795: LIST
16796: LIST
16797: PUSH
16798: LD_INT 2
16800: PUSH
16801: LD_INT 30
16803: PUSH
16804: LD_INT 27
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PUSH
16811: LD_INT 30
16813: PUSH
16814: LD_INT 26
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: LD_INT 30
16823: PUSH
16824: LD_INT 28
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: EMPTY
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PPUSH
16841: CALL_OW 69
16845: ST_TO_ADDR
// if not tmp then
16846: LD_VAR 0 2
16850: NOT
16851: IFFALSE 16855
// exit ;
16853: GO 16884
// for i in tmp do
16855: LD_ADDR_VAR 0 1
16859: PUSH
16860: LD_VAR 0 2
16864: PUSH
16865: FOR_IN
16866: IFFALSE 16882
// SetLives ( i , 1 ) ;
16868: LD_VAR 0 1
16872: PPUSH
16873: LD_INT 1
16875: PPUSH
16876: CALL_OW 234
16880: GO 16865
16882: POP
16883: POP
// end ;
16884: PPOPN 2
16886: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16887: LD_EXP 24
16891: PUSH
16892: LD_EXP 73
16896: AND
16897: IFFALSE 17184
16899: GO 16901
16901: DISABLE
16902: LD_INT 0
16904: PPUSH
16905: PPUSH
16906: PPUSH
// begin i := rand ( 1 , 7 ) ;
16907: LD_ADDR_VAR 0 1
16911: PUSH
16912: LD_INT 1
16914: PPUSH
16915: LD_INT 7
16917: PPUSH
16918: CALL_OW 12
16922: ST_TO_ADDR
// case i of 1 :
16923: LD_VAR 0 1
16927: PUSH
16928: LD_INT 1
16930: DOUBLE
16931: EQUAL
16932: IFTRUE 16936
16934: GO 16946
16936: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16937: LD_STRING earthquake(getX(game), 0, 32)
16939: PPUSH
16940: CALL_OW 559
16944: GO 17184
16946: LD_INT 2
16948: DOUBLE
16949: EQUAL
16950: IFTRUE 16954
16952: GO 16968
16954: POP
// begin ToLua ( displayStucuk(); ) ;
16955: LD_STRING displayStucuk();
16957: PPUSH
16958: CALL_OW 559
// ResetFog ;
16962: CALL_OW 335
// end ; 3 :
16966: GO 17184
16968: LD_INT 3
16970: DOUBLE
16971: EQUAL
16972: IFTRUE 16976
16974: GO 17080
16976: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16977: LD_ADDR_VAR 0 2
16981: PUSH
16982: LD_INT 22
16984: PUSH
16985: LD_OWVAR 2
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 25
16996: PUSH
16997: LD_INT 1
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: PPUSH
17008: CALL_OW 69
17012: ST_TO_ADDR
// if not tmp then
17013: LD_VAR 0 2
17017: NOT
17018: IFFALSE 17022
// exit ;
17020: GO 17184
// un := tmp [ rand ( 1 , tmp ) ] ;
17022: LD_ADDR_VAR 0 3
17026: PUSH
17027: LD_VAR 0 2
17031: PUSH
17032: LD_INT 1
17034: PPUSH
17035: LD_VAR 0 2
17039: PPUSH
17040: CALL_OW 12
17044: ARRAY
17045: ST_TO_ADDR
// if Crawls ( un ) then
17046: LD_VAR 0 3
17050: PPUSH
17051: CALL_OW 318
17055: IFFALSE 17066
// ComWalk ( un ) ;
17057: LD_VAR 0 3
17061: PPUSH
17062: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17066: LD_VAR 0 3
17070: PPUSH
17071: LD_INT 8
17073: PPUSH
17074: CALL_OW 336
// end ; 4 :
17078: GO 17184
17080: LD_INT 4
17082: DOUBLE
17083: EQUAL
17084: IFTRUE 17088
17086: GO 17162
17088: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17089: LD_ADDR_VAR 0 2
17093: PUSH
17094: LD_INT 22
17096: PUSH
17097: LD_OWVAR 2
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: PUSH
17106: LD_INT 30
17108: PUSH
17109: LD_INT 29
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: PPUSH
17120: CALL_OW 69
17124: ST_TO_ADDR
// if not tmp then
17125: LD_VAR 0 2
17129: NOT
17130: IFFALSE 17134
// exit ;
17132: GO 17184
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17134: LD_VAR 0 2
17138: PUSH
17139: LD_INT 1
17141: ARRAY
17142: PPUSH
17143: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17147: LD_VAR 0 2
17151: PUSH
17152: LD_INT 1
17154: ARRAY
17155: PPUSH
17156: CALL_OW 65
// end ; 5 .. 7 :
17160: GO 17184
17162: LD_INT 5
17164: DOUBLE
17165: GREATEREQUAL
17166: IFFALSE 17174
17168: LD_INT 7
17170: DOUBLE
17171: LESSEQUAL
17172: IFTRUE 17176
17174: GO 17183
17176: POP
// StreamSibBomb ; end ;
17177: CALL 13421 0 0
17181: GO 17184
17183: POP
// end ;
17184: PPOPN 3
17186: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17187: LD_EXP 24
17191: PUSH
17192: LD_EXP 74
17196: AND
17197: IFFALSE 17353
17199: GO 17201
17201: DISABLE
17202: LD_INT 0
17204: PPUSH
17205: PPUSH
17206: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17207: LD_ADDR_VAR 0 2
17211: PUSH
17212: LD_INT 81
17214: PUSH
17215: LD_OWVAR 2
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: PUSH
17224: LD_INT 2
17226: PUSH
17227: LD_INT 21
17229: PUSH
17230: LD_INT 1
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: LD_INT 21
17239: PUSH
17240: LD_INT 2
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: LIST
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PPUSH
17256: CALL_OW 69
17260: ST_TO_ADDR
// if not tmp then
17261: LD_VAR 0 2
17265: NOT
17266: IFFALSE 17270
// exit ;
17268: GO 17353
// p := 0 ;
17270: LD_ADDR_VAR 0 3
17274: PUSH
17275: LD_INT 0
17277: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17278: LD_INT 35
17280: PPUSH
17281: CALL_OW 67
// p := p + 1 ;
17285: LD_ADDR_VAR 0 3
17289: PUSH
17290: LD_VAR 0 3
17294: PUSH
17295: LD_INT 1
17297: PLUS
17298: ST_TO_ADDR
// for i in tmp do
17299: LD_ADDR_VAR 0 1
17303: PUSH
17304: LD_VAR 0 2
17308: PUSH
17309: FOR_IN
17310: IFFALSE 17341
// if GetLives ( i ) < 1000 then
17312: LD_VAR 0 1
17316: PPUSH
17317: CALL_OW 256
17321: PUSH
17322: LD_INT 1000
17324: LESS
17325: IFFALSE 17339
// SetLives ( i , 1000 ) ;
17327: LD_VAR 0 1
17331: PPUSH
17332: LD_INT 1000
17334: PPUSH
17335: CALL_OW 234
17339: GO 17309
17341: POP
17342: POP
// until p > 20 ;
17343: LD_VAR 0 3
17347: PUSH
17348: LD_INT 20
17350: GREATER
17351: IFFALSE 17278
// end ;
17353: PPOPN 3
17355: END
// every 0 0$1 trigger StreamModeActive and sTime do
17356: LD_EXP 24
17360: PUSH
17361: LD_EXP 75
17365: AND
17366: IFFALSE 17401
17368: GO 17370
17370: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17371: LD_INT 28
17373: PPUSH
17374: LD_OWVAR 2
17378: PPUSH
17379: LD_INT 2
17381: PPUSH
17382: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17386: LD_INT 30
17388: PPUSH
17389: LD_OWVAR 2
17393: PPUSH
17394: LD_INT 2
17396: PPUSH
17397: CALL_OW 322
// end ;
17401: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17402: LD_EXP 24
17406: PUSH
17407: LD_EXP 76
17411: AND
17412: IFFALSE 17533
17414: GO 17416
17416: DISABLE
17417: LD_INT 0
17419: PPUSH
17420: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17421: LD_ADDR_VAR 0 2
17425: PUSH
17426: LD_INT 22
17428: PUSH
17429: LD_OWVAR 2
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: PUSH
17438: LD_INT 21
17440: PUSH
17441: LD_INT 1
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: PUSH
17448: LD_INT 3
17450: PUSH
17451: LD_INT 23
17453: PUSH
17454: LD_INT 0
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: LIST
17469: PPUSH
17470: CALL_OW 69
17474: ST_TO_ADDR
// if not tmp then
17475: LD_VAR 0 2
17479: NOT
17480: IFFALSE 17484
// exit ;
17482: GO 17533
// for i in tmp do
17484: LD_ADDR_VAR 0 1
17488: PUSH
17489: LD_VAR 0 2
17493: PUSH
17494: FOR_IN
17495: IFFALSE 17531
// begin if Crawls ( i ) then
17497: LD_VAR 0 1
17501: PPUSH
17502: CALL_OW 318
17506: IFFALSE 17517
// ComWalk ( i ) ;
17508: LD_VAR 0 1
17512: PPUSH
17513: CALL_OW 138
// SetClass ( i , 2 ) ;
17517: LD_VAR 0 1
17521: PPUSH
17522: LD_INT 2
17524: PPUSH
17525: CALL_OW 336
// end ;
17529: GO 17494
17531: POP
17532: POP
// end ;
17533: PPOPN 2
17535: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17536: LD_EXP 24
17540: PUSH
17541: LD_EXP 77
17545: AND
17546: IFFALSE 17834
17548: GO 17550
17550: DISABLE
17551: LD_INT 0
17553: PPUSH
17554: PPUSH
17555: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17556: LD_OWVAR 2
17560: PPUSH
17561: LD_INT 9
17563: PPUSH
17564: LD_INT 1
17566: PPUSH
17567: LD_INT 1
17569: PPUSH
17570: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17574: LD_INT 9
17576: PPUSH
17577: LD_OWVAR 2
17581: PPUSH
17582: CALL_OW 343
// uc_side := 9 ;
17586: LD_ADDR_OWVAR 20
17590: PUSH
17591: LD_INT 9
17593: ST_TO_ADDR
// uc_nation := 2 ;
17594: LD_ADDR_OWVAR 21
17598: PUSH
17599: LD_INT 2
17601: ST_TO_ADDR
// hc_name := Dark Warrior ;
17602: LD_ADDR_OWVAR 26
17606: PUSH
17607: LD_STRING Dark Warrior
17609: ST_TO_ADDR
// hc_gallery :=  ;
17610: LD_ADDR_OWVAR 33
17614: PUSH
17615: LD_STRING 
17617: ST_TO_ADDR
// hc_noskilllimit := true ;
17618: LD_ADDR_OWVAR 76
17622: PUSH
17623: LD_INT 1
17625: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17626: LD_ADDR_OWVAR 31
17630: PUSH
17631: LD_INT 30
17633: PUSH
17634: LD_INT 30
17636: PUSH
17637: LD_INT 30
17639: PUSH
17640: LD_INT 30
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: ST_TO_ADDR
// un := CreateHuman ;
17649: LD_ADDR_VAR 0 3
17653: PUSH
17654: CALL_OW 44
17658: ST_TO_ADDR
// hc_noskilllimit := false ;
17659: LD_ADDR_OWVAR 76
17663: PUSH
17664: LD_INT 0
17666: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17667: LD_VAR 0 3
17671: PPUSH
17672: LD_INT 1
17674: PPUSH
17675: CALL_OW 51
// ToLua ( playRanger() ) ;
17679: LD_STRING playRanger()
17681: PPUSH
17682: CALL_OW 559
// p := 0 ;
17686: LD_ADDR_VAR 0 2
17690: PUSH
17691: LD_INT 0
17693: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17694: LD_INT 35
17696: PPUSH
17697: CALL_OW 67
// p := p + 1 ;
17701: LD_ADDR_VAR 0 2
17705: PUSH
17706: LD_VAR 0 2
17710: PUSH
17711: LD_INT 1
17713: PLUS
17714: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17715: LD_VAR 0 3
17719: PPUSH
17720: CALL_OW 256
17724: PUSH
17725: LD_INT 1000
17727: LESS
17728: IFFALSE 17742
// SetLives ( un , 1000 ) ;
17730: LD_VAR 0 3
17734: PPUSH
17735: LD_INT 1000
17737: PPUSH
17738: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17742: LD_VAR 0 3
17746: PPUSH
17747: LD_INT 81
17749: PUSH
17750: LD_OWVAR 2
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: PUSH
17759: LD_INT 91
17761: PUSH
17762: LD_VAR 0 3
17766: PUSH
17767: LD_INT 30
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: LIST
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PPUSH
17779: CALL_OW 69
17783: PPUSH
17784: LD_VAR 0 3
17788: PPUSH
17789: CALL_OW 74
17793: PPUSH
17794: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17798: LD_VAR 0 2
17802: PUSH
17803: LD_INT 80
17805: GREATER
17806: PUSH
17807: LD_VAR 0 3
17811: PPUSH
17812: CALL_OW 301
17816: OR
17817: IFFALSE 17694
// if un then
17819: LD_VAR 0 3
17823: IFFALSE 17834
// RemoveUnit ( un ) ;
17825: LD_VAR 0 3
17829: PPUSH
17830: CALL_OW 64
// end ;
17834: PPOPN 3
17836: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17837: LD_EXP 78
17841: IFFALSE 17957
17843: GO 17845
17845: DISABLE
17846: LD_INT 0
17848: PPUSH
17849: PPUSH
17850: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17851: LD_ADDR_VAR 0 2
17855: PUSH
17856: LD_INT 81
17858: PUSH
17859: LD_OWVAR 2
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: LD_INT 21
17870: PUSH
17871: LD_INT 1
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: PPUSH
17882: CALL_OW 69
17886: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17887: LD_STRING playComputer()
17889: PPUSH
17890: CALL_OW 559
// if not tmp then
17894: LD_VAR 0 2
17898: NOT
17899: IFFALSE 17903
// exit ;
17901: GO 17957
// for i in tmp do
17903: LD_ADDR_VAR 0 1
17907: PUSH
17908: LD_VAR 0 2
17912: PUSH
17913: FOR_IN
17914: IFFALSE 17955
// for j := 1 to 4 do
17916: LD_ADDR_VAR 0 3
17920: PUSH
17921: DOUBLE
17922: LD_INT 1
17924: DEC
17925: ST_TO_ADDR
17926: LD_INT 4
17928: PUSH
17929: FOR_TO
17930: IFFALSE 17951
// SetSkill ( i , j , 10 ) ;
17932: LD_VAR 0 1
17936: PPUSH
17937: LD_VAR 0 3
17941: PPUSH
17942: LD_INT 10
17944: PPUSH
17945: CALL_OW 237
17949: GO 17929
17951: POP
17952: POP
17953: GO 17913
17955: POP
17956: POP
// end ;
17957: PPOPN 3
17959: END
// every 0 0$1 trigger s30 do var i , tmp ;
17960: LD_EXP 79
17964: IFFALSE 18033
17966: GO 17968
17968: DISABLE
17969: LD_INT 0
17971: PPUSH
17972: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17973: LD_ADDR_VAR 0 2
17977: PUSH
17978: LD_INT 22
17980: PUSH
17981: LD_OWVAR 2
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: PPUSH
17990: CALL_OW 69
17994: ST_TO_ADDR
// if not tmp then
17995: LD_VAR 0 2
17999: NOT
18000: IFFALSE 18004
// exit ;
18002: GO 18033
// for i in tmp do
18004: LD_ADDR_VAR 0 1
18008: PUSH
18009: LD_VAR 0 2
18013: PUSH
18014: FOR_IN
18015: IFFALSE 18031
// SetLives ( i , 300 ) ;
18017: LD_VAR 0 1
18021: PPUSH
18022: LD_INT 300
18024: PPUSH
18025: CALL_OW 234
18029: GO 18014
18031: POP
18032: POP
// end ;
18033: PPOPN 2
18035: END
// every 0 0$1 trigger s60 do var i , tmp ;
18036: LD_EXP 80
18040: IFFALSE 18109
18042: GO 18044
18044: DISABLE
18045: LD_INT 0
18047: PPUSH
18048: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18049: LD_ADDR_VAR 0 2
18053: PUSH
18054: LD_INT 22
18056: PUSH
18057: LD_OWVAR 2
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: PPUSH
18066: CALL_OW 69
18070: ST_TO_ADDR
// if not tmp then
18071: LD_VAR 0 2
18075: NOT
18076: IFFALSE 18080
// exit ;
18078: GO 18109
// for i in tmp do
18080: LD_ADDR_VAR 0 1
18084: PUSH
18085: LD_VAR 0 2
18089: PUSH
18090: FOR_IN
18091: IFFALSE 18107
// SetLives ( i , 600 ) ;
18093: LD_VAR 0 1
18097: PPUSH
18098: LD_INT 600
18100: PPUSH
18101: CALL_OW 234
18105: GO 18090
18107: POP
18108: POP
// end ;
18109: PPOPN 2
18111: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18112: LD_INT 0
18114: PPUSH
// case cmd of 301 :
18115: LD_VAR 0 1
18119: PUSH
18120: LD_INT 301
18122: DOUBLE
18123: EQUAL
18124: IFTRUE 18128
18126: GO 18160
18128: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18129: LD_VAR 0 6
18133: PPUSH
18134: LD_VAR 0 7
18138: PPUSH
18139: LD_VAR 0 8
18143: PPUSH
18144: LD_VAR 0 4
18148: PPUSH
18149: LD_VAR 0 5
18153: PPUSH
18154: CALL 19361 0 5
18158: GO 18281
18160: LD_INT 302
18162: DOUBLE
18163: EQUAL
18164: IFTRUE 18168
18166: GO 18205
18168: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18169: LD_VAR 0 6
18173: PPUSH
18174: LD_VAR 0 7
18178: PPUSH
18179: LD_VAR 0 8
18183: PPUSH
18184: LD_VAR 0 9
18188: PPUSH
18189: LD_VAR 0 4
18193: PPUSH
18194: LD_VAR 0 5
18198: PPUSH
18199: CALL 19452 0 6
18203: GO 18281
18205: LD_INT 303
18207: DOUBLE
18208: EQUAL
18209: IFTRUE 18213
18211: GO 18250
18213: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18214: LD_VAR 0 6
18218: PPUSH
18219: LD_VAR 0 7
18223: PPUSH
18224: LD_VAR 0 8
18228: PPUSH
18229: LD_VAR 0 9
18233: PPUSH
18234: LD_VAR 0 4
18238: PPUSH
18239: LD_VAR 0 5
18243: PPUSH
18244: CALL 18286 0 6
18248: GO 18281
18250: LD_INT 304
18252: DOUBLE
18253: EQUAL
18254: IFTRUE 18258
18256: GO 18280
18258: POP
// hHackTeleport ( unit , x , y ) ; end ;
18259: LD_VAR 0 2
18263: PPUSH
18264: LD_VAR 0 4
18268: PPUSH
18269: LD_VAR 0 5
18273: PPUSH
18274: CALL 20045 0 3
18278: GO 18281
18280: POP
// end ;
18281: LD_VAR 0 12
18285: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18286: LD_INT 0
18288: PPUSH
18289: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18290: LD_VAR 0 1
18294: PUSH
18295: LD_INT 1
18297: LESS
18298: PUSH
18299: LD_VAR 0 1
18303: PUSH
18304: LD_INT 3
18306: GREATER
18307: OR
18308: PUSH
18309: LD_VAR 0 5
18313: PPUSH
18314: LD_VAR 0 6
18318: PPUSH
18319: CALL_OW 428
18323: OR
18324: IFFALSE 18328
// exit ;
18326: GO 19048
// uc_side := your_side ;
18328: LD_ADDR_OWVAR 20
18332: PUSH
18333: LD_OWVAR 2
18337: ST_TO_ADDR
// uc_nation := nation ;
18338: LD_ADDR_OWVAR 21
18342: PUSH
18343: LD_VAR 0 1
18347: ST_TO_ADDR
// bc_level = 1 ;
18348: LD_ADDR_OWVAR 43
18352: PUSH
18353: LD_INT 1
18355: ST_TO_ADDR
// case btype of 1 :
18356: LD_VAR 0 2
18360: PUSH
18361: LD_INT 1
18363: DOUBLE
18364: EQUAL
18365: IFTRUE 18369
18367: GO 18380
18369: POP
// bc_type := b_depot ; 2 :
18370: LD_ADDR_OWVAR 42
18374: PUSH
18375: LD_INT 0
18377: ST_TO_ADDR
18378: GO 18992
18380: LD_INT 2
18382: DOUBLE
18383: EQUAL
18384: IFTRUE 18388
18386: GO 18399
18388: POP
// bc_type := b_warehouse ; 3 :
18389: LD_ADDR_OWVAR 42
18393: PUSH
18394: LD_INT 1
18396: ST_TO_ADDR
18397: GO 18992
18399: LD_INT 3
18401: DOUBLE
18402: EQUAL
18403: IFTRUE 18407
18405: GO 18418
18407: POP
// bc_type := b_lab ; 4 .. 9 :
18408: LD_ADDR_OWVAR 42
18412: PUSH
18413: LD_INT 6
18415: ST_TO_ADDR
18416: GO 18992
18418: LD_INT 4
18420: DOUBLE
18421: GREATEREQUAL
18422: IFFALSE 18430
18424: LD_INT 9
18426: DOUBLE
18427: LESSEQUAL
18428: IFTRUE 18432
18430: GO 18484
18432: POP
// begin bc_type := b_lab_half ;
18433: LD_ADDR_OWVAR 42
18437: PUSH
18438: LD_INT 7
18440: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18441: LD_ADDR_OWVAR 44
18445: PUSH
18446: LD_INT 10
18448: PUSH
18449: LD_INT 11
18451: PUSH
18452: LD_INT 12
18454: PUSH
18455: LD_INT 15
18457: PUSH
18458: LD_INT 14
18460: PUSH
18461: LD_INT 13
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: PUSH
18472: LD_VAR 0 2
18476: PUSH
18477: LD_INT 3
18479: MINUS
18480: ARRAY
18481: ST_TO_ADDR
// end ; 10 .. 13 :
18482: GO 18992
18484: LD_INT 10
18486: DOUBLE
18487: GREATEREQUAL
18488: IFFALSE 18496
18490: LD_INT 13
18492: DOUBLE
18493: LESSEQUAL
18494: IFTRUE 18498
18496: GO 18575
18498: POP
// begin bc_type := b_lab_full ;
18499: LD_ADDR_OWVAR 42
18503: PUSH
18504: LD_INT 8
18506: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18507: LD_ADDR_OWVAR 44
18511: PUSH
18512: LD_INT 10
18514: PUSH
18515: LD_INT 12
18517: PUSH
18518: LD_INT 14
18520: PUSH
18521: LD_INT 13
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: PUSH
18530: LD_VAR 0 2
18534: PUSH
18535: LD_INT 9
18537: MINUS
18538: ARRAY
18539: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18540: LD_ADDR_OWVAR 45
18544: PUSH
18545: LD_INT 11
18547: PUSH
18548: LD_INT 15
18550: PUSH
18551: LD_INT 12
18553: PUSH
18554: LD_INT 15
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: PUSH
18563: LD_VAR 0 2
18567: PUSH
18568: LD_INT 9
18570: MINUS
18571: ARRAY
18572: ST_TO_ADDR
// end ; 14 :
18573: GO 18992
18575: LD_INT 14
18577: DOUBLE
18578: EQUAL
18579: IFTRUE 18583
18581: GO 18594
18583: POP
// bc_type := b_workshop ; 15 :
18584: LD_ADDR_OWVAR 42
18588: PUSH
18589: LD_INT 2
18591: ST_TO_ADDR
18592: GO 18992
18594: LD_INT 15
18596: DOUBLE
18597: EQUAL
18598: IFTRUE 18602
18600: GO 18613
18602: POP
// bc_type := b_factory ; 16 :
18603: LD_ADDR_OWVAR 42
18607: PUSH
18608: LD_INT 3
18610: ST_TO_ADDR
18611: GO 18992
18613: LD_INT 16
18615: DOUBLE
18616: EQUAL
18617: IFTRUE 18621
18619: GO 18632
18621: POP
// bc_type := b_ext_gun ; 17 :
18622: LD_ADDR_OWVAR 42
18626: PUSH
18627: LD_INT 17
18629: ST_TO_ADDR
18630: GO 18992
18632: LD_INT 17
18634: DOUBLE
18635: EQUAL
18636: IFTRUE 18640
18638: GO 18668
18640: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18641: LD_ADDR_OWVAR 42
18645: PUSH
18646: LD_INT 19
18648: PUSH
18649: LD_INT 23
18651: PUSH
18652: LD_INT 19
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: LIST
18659: PUSH
18660: LD_VAR 0 1
18664: ARRAY
18665: ST_TO_ADDR
18666: GO 18992
18668: LD_INT 18
18670: DOUBLE
18671: EQUAL
18672: IFTRUE 18676
18674: GO 18687
18676: POP
// bc_type := b_ext_radar ; 19 :
18677: LD_ADDR_OWVAR 42
18681: PUSH
18682: LD_INT 20
18684: ST_TO_ADDR
18685: GO 18992
18687: LD_INT 19
18689: DOUBLE
18690: EQUAL
18691: IFTRUE 18695
18693: GO 18706
18695: POP
// bc_type := b_ext_radio ; 20 :
18696: LD_ADDR_OWVAR 42
18700: PUSH
18701: LD_INT 22
18703: ST_TO_ADDR
18704: GO 18992
18706: LD_INT 20
18708: DOUBLE
18709: EQUAL
18710: IFTRUE 18714
18712: GO 18725
18714: POP
// bc_type := b_ext_siberium ; 21 :
18715: LD_ADDR_OWVAR 42
18719: PUSH
18720: LD_INT 21
18722: ST_TO_ADDR
18723: GO 18992
18725: LD_INT 21
18727: DOUBLE
18728: EQUAL
18729: IFTRUE 18733
18731: GO 18744
18733: POP
// bc_type := b_ext_computer ; 22 :
18734: LD_ADDR_OWVAR 42
18738: PUSH
18739: LD_INT 24
18741: ST_TO_ADDR
18742: GO 18992
18744: LD_INT 22
18746: DOUBLE
18747: EQUAL
18748: IFTRUE 18752
18750: GO 18763
18752: POP
// bc_type := b_ext_track ; 23 :
18753: LD_ADDR_OWVAR 42
18757: PUSH
18758: LD_INT 16
18760: ST_TO_ADDR
18761: GO 18992
18763: LD_INT 23
18765: DOUBLE
18766: EQUAL
18767: IFTRUE 18771
18769: GO 18782
18771: POP
// bc_type := b_ext_laser ; 24 :
18772: LD_ADDR_OWVAR 42
18776: PUSH
18777: LD_INT 25
18779: ST_TO_ADDR
18780: GO 18992
18782: LD_INT 24
18784: DOUBLE
18785: EQUAL
18786: IFTRUE 18790
18788: GO 18801
18790: POP
// bc_type := b_control_tower ; 25 :
18791: LD_ADDR_OWVAR 42
18795: PUSH
18796: LD_INT 36
18798: ST_TO_ADDR
18799: GO 18992
18801: LD_INT 25
18803: DOUBLE
18804: EQUAL
18805: IFTRUE 18809
18807: GO 18820
18809: POP
// bc_type := b_breastwork ; 26 :
18810: LD_ADDR_OWVAR 42
18814: PUSH
18815: LD_INT 31
18817: ST_TO_ADDR
18818: GO 18992
18820: LD_INT 26
18822: DOUBLE
18823: EQUAL
18824: IFTRUE 18828
18826: GO 18839
18828: POP
// bc_type := b_bunker ; 27 :
18829: LD_ADDR_OWVAR 42
18833: PUSH
18834: LD_INT 32
18836: ST_TO_ADDR
18837: GO 18992
18839: LD_INT 27
18841: DOUBLE
18842: EQUAL
18843: IFTRUE 18847
18845: GO 18858
18847: POP
// bc_type := b_turret ; 28 :
18848: LD_ADDR_OWVAR 42
18852: PUSH
18853: LD_INT 33
18855: ST_TO_ADDR
18856: GO 18992
18858: LD_INT 28
18860: DOUBLE
18861: EQUAL
18862: IFTRUE 18866
18864: GO 18877
18866: POP
// bc_type := b_armoury ; 29 :
18867: LD_ADDR_OWVAR 42
18871: PUSH
18872: LD_INT 4
18874: ST_TO_ADDR
18875: GO 18992
18877: LD_INT 29
18879: DOUBLE
18880: EQUAL
18881: IFTRUE 18885
18883: GO 18896
18885: POP
// bc_type := b_barracks ; 30 :
18886: LD_ADDR_OWVAR 42
18890: PUSH
18891: LD_INT 5
18893: ST_TO_ADDR
18894: GO 18992
18896: LD_INT 30
18898: DOUBLE
18899: EQUAL
18900: IFTRUE 18904
18902: GO 18915
18904: POP
// bc_type := b_solar_power ; 31 :
18905: LD_ADDR_OWVAR 42
18909: PUSH
18910: LD_INT 27
18912: ST_TO_ADDR
18913: GO 18992
18915: LD_INT 31
18917: DOUBLE
18918: EQUAL
18919: IFTRUE 18923
18921: GO 18934
18923: POP
// bc_type := b_oil_power ; 32 :
18924: LD_ADDR_OWVAR 42
18928: PUSH
18929: LD_INT 26
18931: ST_TO_ADDR
18932: GO 18992
18934: LD_INT 32
18936: DOUBLE
18937: EQUAL
18938: IFTRUE 18942
18940: GO 18953
18942: POP
// bc_type := b_siberite_power ; 33 :
18943: LD_ADDR_OWVAR 42
18947: PUSH
18948: LD_INT 28
18950: ST_TO_ADDR
18951: GO 18992
18953: LD_INT 33
18955: DOUBLE
18956: EQUAL
18957: IFTRUE 18961
18959: GO 18972
18961: POP
// bc_type := b_oil_mine ; 34 :
18962: LD_ADDR_OWVAR 42
18966: PUSH
18967: LD_INT 29
18969: ST_TO_ADDR
18970: GO 18992
18972: LD_INT 34
18974: DOUBLE
18975: EQUAL
18976: IFTRUE 18980
18978: GO 18991
18980: POP
// bc_type := b_siberite_mine ; end ;
18981: LD_ADDR_OWVAR 42
18985: PUSH
18986: LD_INT 30
18988: ST_TO_ADDR
18989: GO 18992
18991: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18992: LD_ADDR_VAR 0 8
18996: PUSH
18997: LD_VAR 0 5
19001: PPUSH
19002: LD_VAR 0 6
19006: PPUSH
19007: LD_VAR 0 3
19011: PPUSH
19012: CALL_OW 47
19016: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19017: LD_OWVAR 42
19021: PUSH
19022: LD_INT 32
19024: PUSH
19025: LD_INT 33
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: IN
19032: IFFALSE 19048
// PlaceWeaponTurret ( b , weapon ) ;
19034: LD_VAR 0 8
19038: PPUSH
19039: LD_VAR 0 4
19043: PPUSH
19044: CALL_OW 431
// end ;
19048: LD_VAR 0 7
19052: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19053: LD_INT 0
19055: PPUSH
19056: PPUSH
19057: PPUSH
19058: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19059: LD_ADDR_VAR 0 4
19063: PUSH
19064: LD_INT 22
19066: PUSH
19067: LD_OWVAR 2
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: LD_INT 2
19078: PUSH
19079: LD_INT 30
19081: PUSH
19082: LD_INT 0
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PUSH
19089: LD_INT 30
19091: PUSH
19092: LD_INT 1
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: LIST
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PPUSH
19108: CALL_OW 69
19112: ST_TO_ADDR
// if not tmp then
19113: LD_VAR 0 4
19117: NOT
19118: IFFALSE 19122
// exit ;
19120: GO 19181
// for i in tmp do
19122: LD_ADDR_VAR 0 2
19126: PUSH
19127: LD_VAR 0 4
19131: PUSH
19132: FOR_IN
19133: IFFALSE 19179
// for j = 1 to 3 do
19135: LD_ADDR_VAR 0 3
19139: PUSH
19140: DOUBLE
19141: LD_INT 1
19143: DEC
19144: ST_TO_ADDR
19145: LD_INT 3
19147: PUSH
19148: FOR_TO
19149: IFFALSE 19175
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19151: LD_VAR 0 2
19155: PPUSH
19156: CALL_OW 274
19160: PPUSH
19161: LD_VAR 0 3
19165: PPUSH
19166: LD_INT 99999
19168: PPUSH
19169: CALL_OW 277
19173: GO 19148
19175: POP
19176: POP
19177: GO 19132
19179: POP
19180: POP
// end ;
19181: LD_VAR 0 1
19185: RET
// export function hHackSetLevel10 ; var i , j ; begin
19186: LD_INT 0
19188: PPUSH
19189: PPUSH
19190: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19191: LD_ADDR_VAR 0 2
19195: PUSH
19196: LD_INT 21
19198: PUSH
19199: LD_INT 1
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PPUSH
19206: CALL_OW 69
19210: PUSH
19211: FOR_IN
19212: IFFALSE 19264
// if IsSelected ( i ) then
19214: LD_VAR 0 2
19218: PPUSH
19219: CALL_OW 306
19223: IFFALSE 19262
// begin for j := 1 to 4 do
19225: LD_ADDR_VAR 0 3
19229: PUSH
19230: DOUBLE
19231: LD_INT 1
19233: DEC
19234: ST_TO_ADDR
19235: LD_INT 4
19237: PUSH
19238: FOR_TO
19239: IFFALSE 19260
// SetSkill ( i , j , 10 ) ;
19241: LD_VAR 0 2
19245: PPUSH
19246: LD_VAR 0 3
19250: PPUSH
19251: LD_INT 10
19253: PPUSH
19254: CALL_OW 237
19258: GO 19238
19260: POP
19261: POP
// end ;
19262: GO 19211
19264: POP
19265: POP
// end ;
19266: LD_VAR 0 1
19270: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19271: LD_INT 0
19273: PPUSH
19274: PPUSH
19275: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19276: LD_ADDR_VAR 0 2
19280: PUSH
19281: LD_INT 22
19283: PUSH
19284: LD_OWVAR 2
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 21
19295: PUSH
19296: LD_INT 1
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PPUSH
19307: CALL_OW 69
19311: PUSH
19312: FOR_IN
19313: IFFALSE 19354
// begin for j := 1 to 4 do
19315: LD_ADDR_VAR 0 3
19319: PUSH
19320: DOUBLE
19321: LD_INT 1
19323: DEC
19324: ST_TO_ADDR
19325: LD_INT 4
19327: PUSH
19328: FOR_TO
19329: IFFALSE 19350
// SetSkill ( i , j , 10 ) ;
19331: LD_VAR 0 2
19335: PPUSH
19336: LD_VAR 0 3
19340: PPUSH
19341: LD_INT 10
19343: PPUSH
19344: CALL_OW 237
19348: GO 19328
19350: POP
19351: POP
// end ;
19352: GO 19312
19354: POP
19355: POP
// end ;
19356: LD_VAR 0 1
19360: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19361: LD_INT 0
19363: PPUSH
// uc_side := your_side ;
19364: LD_ADDR_OWVAR 20
19368: PUSH
19369: LD_OWVAR 2
19373: ST_TO_ADDR
// uc_nation := nation ;
19374: LD_ADDR_OWVAR 21
19378: PUSH
19379: LD_VAR 0 1
19383: ST_TO_ADDR
// InitHc ;
19384: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19388: LD_INT 0
19390: PPUSH
19391: LD_VAR 0 2
19395: PPUSH
19396: LD_VAR 0 3
19400: PPUSH
19401: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19405: LD_VAR 0 4
19409: PPUSH
19410: LD_VAR 0 5
19414: PPUSH
19415: CALL_OW 428
19419: PUSH
19420: LD_INT 0
19422: EQUAL
19423: IFFALSE 19447
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19425: CALL_OW 44
19429: PPUSH
19430: LD_VAR 0 4
19434: PPUSH
19435: LD_VAR 0 5
19439: PPUSH
19440: LD_INT 1
19442: PPUSH
19443: CALL_OW 48
// end ;
19447: LD_VAR 0 6
19451: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19452: LD_INT 0
19454: PPUSH
19455: PPUSH
// uc_side := your_side ;
19456: LD_ADDR_OWVAR 20
19460: PUSH
19461: LD_OWVAR 2
19465: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19466: LD_VAR 0 1
19470: PUSH
19471: LD_INT 1
19473: PUSH
19474: LD_INT 2
19476: PUSH
19477: LD_INT 3
19479: PUSH
19480: LD_INT 4
19482: PUSH
19483: LD_INT 5
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: IN
19493: IFFALSE 19505
// uc_nation := nation_american else
19495: LD_ADDR_OWVAR 21
19499: PUSH
19500: LD_INT 1
19502: ST_TO_ADDR
19503: GO 19548
// if chassis in [ 11 , 12 , 13 , 14 ] then
19505: LD_VAR 0 1
19509: PUSH
19510: LD_INT 11
19512: PUSH
19513: LD_INT 12
19515: PUSH
19516: LD_INT 13
19518: PUSH
19519: LD_INT 14
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: IN
19528: IFFALSE 19540
// uc_nation := nation_arabian else
19530: LD_ADDR_OWVAR 21
19534: PUSH
19535: LD_INT 2
19537: ST_TO_ADDR
19538: GO 19548
// uc_nation := nation_russian ;
19540: LD_ADDR_OWVAR 21
19544: PUSH
19545: LD_INT 3
19547: ST_TO_ADDR
// vc_chassis := chassis ;
19548: LD_ADDR_OWVAR 37
19552: PUSH
19553: LD_VAR 0 1
19557: ST_TO_ADDR
// vc_engine := engine ;
19558: LD_ADDR_OWVAR 39
19562: PUSH
19563: LD_VAR 0 2
19567: ST_TO_ADDR
// vc_control := control ;
19568: LD_ADDR_OWVAR 38
19572: PUSH
19573: LD_VAR 0 3
19577: ST_TO_ADDR
// vc_weapon := weapon ;
19578: LD_ADDR_OWVAR 40
19582: PUSH
19583: LD_VAR 0 4
19587: ST_TO_ADDR
// un := CreateVehicle ;
19588: LD_ADDR_VAR 0 8
19592: PUSH
19593: CALL_OW 45
19597: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19598: LD_VAR 0 8
19602: PPUSH
19603: LD_INT 0
19605: PPUSH
19606: LD_INT 5
19608: PPUSH
19609: CALL_OW 12
19613: PPUSH
19614: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19618: LD_VAR 0 8
19622: PPUSH
19623: LD_VAR 0 5
19627: PPUSH
19628: LD_VAR 0 6
19632: PPUSH
19633: LD_INT 1
19635: PPUSH
19636: CALL_OW 48
// end ;
19640: LD_VAR 0 7
19644: RET
// export hInvincible ; every 1 do
19645: GO 19647
19647: DISABLE
// hInvincible := [ ] ;
19648: LD_ADDR_EXP 81
19652: PUSH
19653: EMPTY
19654: ST_TO_ADDR
19655: END
// every 10 do var i ;
19656: GO 19658
19658: DISABLE
19659: LD_INT 0
19661: PPUSH
// begin enable ;
19662: ENABLE
// if not hInvincible then
19663: LD_EXP 81
19667: NOT
19668: IFFALSE 19672
// exit ;
19670: GO 19716
// for i in hInvincible do
19672: LD_ADDR_VAR 0 1
19676: PUSH
19677: LD_EXP 81
19681: PUSH
19682: FOR_IN
19683: IFFALSE 19714
// if GetLives ( i ) < 1000 then
19685: LD_VAR 0 1
19689: PPUSH
19690: CALL_OW 256
19694: PUSH
19695: LD_INT 1000
19697: LESS
19698: IFFALSE 19712
// SetLives ( i , 1000 ) ;
19700: LD_VAR 0 1
19704: PPUSH
19705: LD_INT 1000
19707: PPUSH
19708: CALL_OW 234
19712: GO 19682
19714: POP
19715: POP
// end ;
19716: PPOPN 1
19718: END
// export function hHackInvincible ; var i ; begin
19719: LD_INT 0
19721: PPUSH
19722: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19723: LD_ADDR_VAR 0 2
19727: PUSH
19728: LD_INT 2
19730: PUSH
19731: LD_INT 21
19733: PUSH
19734: LD_INT 1
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: LD_INT 21
19743: PUSH
19744: LD_INT 2
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: LIST
19755: PPUSH
19756: CALL_OW 69
19760: PUSH
19761: FOR_IN
19762: IFFALSE 19823
// if IsSelected ( i ) then
19764: LD_VAR 0 2
19768: PPUSH
19769: CALL_OW 306
19773: IFFALSE 19821
// begin if i in hInvincible then
19775: LD_VAR 0 2
19779: PUSH
19780: LD_EXP 81
19784: IN
19785: IFFALSE 19805
// hInvincible := hInvincible diff i else
19787: LD_ADDR_EXP 81
19791: PUSH
19792: LD_EXP 81
19796: PUSH
19797: LD_VAR 0 2
19801: DIFF
19802: ST_TO_ADDR
19803: GO 19821
// hInvincible := hInvincible union i ;
19805: LD_ADDR_EXP 81
19809: PUSH
19810: LD_EXP 81
19814: PUSH
19815: LD_VAR 0 2
19819: UNION
19820: ST_TO_ADDR
// end ;
19821: GO 19761
19823: POP
19824: POP
// end ;
19825: LD_VAR 0 1
19829: RET
// export function hHackInvisible ; var i , j ; begin
19830: LD_INT 0
19832: PPUSH
19833: PPUSH
19834: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19835: LD_ADDR_VAR 0 2
19839: PUSH
19840: LD_INT 21
19842: PUSH
19843: LD_INT 1
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: PPUSH
19850: CALL_OW 69
19854: PUSH
19855: FOR_IN
19856: IFFALSE 19880
// if IsSelected ( i ) then
19858: LD_VAR 0 2
19862: PPUSH
19863: CALL_OW 306
19867: IFFALSE 19878
// ComForceInvisible ( i ) ;
19869: LD_VAR 0 2
19873: PPUSH
19874: CALL_OW 496
19878: GO 19855
19880: POP
19881: POP
// end ;
19882: LD_VAR 0 1
19886: RET
// export function hHackChangeYourSide ; begin
19887: LD_INT 0
19889: PPUSH
// if your_side = 8 then
19890: LD_OWVAR 2
19894: PUSH
19895: LD_INT 8
19897: EQUAL
19898: IFFALSE 19910
// your_side := 0 else
19900: LD_ADDR_OWVAR 2
19904: PUSH
19905: LD_INT 0
19907: ST_TO_ADDR
19908: GO 19924
// your_side := your_side + 1 ;
19910: LD_ADDR_OWVAR 2
19914: PUSH
19915: LD_OWVAR 2
19919: PUSH
19920: LD_INT 1
19922: PLUS
19923: ST_TO_ADDR
// end ;
19924: LD_VAR 0 1
19928: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19929: LD_INT 0
19931: PPUSH
19932: PPUSH
19933: PPUSH
// for i in all_units do
19934: LD_ADDR_VAR 0 2
19938: PUSH
19939: LD_OWVAR 3
19943: PUSH
19944: FOR_IN
19945: IFFALSE 20023
// if IsSelected ( i ) then
19947: LD_VAR 0 2
19951: PPUSH
19952: CALL_OW 306
19956: IFFALSE 20021
// begin j := GetSide ( i ) ;
19958: LD_ADDR_VAR 0 3
19962: PUSH
19963: LD_VAR 0 2
19967: PPUSH
19968: CALL_OW 255
19972: ST_TO_ADDR
// if j = 8 then
19973: LD_VAR 0 3
19977: PUSH
19978: LD_INT 8
19980: EQUAL
19981: IFFALSE 19993
// j := 0 else
19983: LD_ADDR_VAR 0 3
19987: PUSH
19988: LD_INT 0
19990: ST_TO_ADDR
19991: GO 20007
// j := j + 1 ;
19993: LD_ADDR_VAR 0 3
19997: PUSH
19998: LD_VAR 0 3
20002: PUSH
20003: LD_INT 1
20005: PLUS
20006: ST_TO_ADDR
// SetSide ( i , j ) ;
20007: LD_VAR 0 2
20011: PPUSH
20012: LD_VAR 0 3
20016: PPUSH
20017: CALL_OW 235
// end ;
20021: GO 19944
20023: POP
20024: POP
// end ;
20025: LD_VAR 0 1
20029: RET
// export function hHackFog ; begin
20030: LD_INT 0
20032: PPUSH
// FogOff ( true ) ;
20033: LD_INT 1
20035: PPUSH
20036: CALL_OW 344
// end ;
20040: LD_VAR 0 1
20044: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20045: LD_INT 0
20047: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20048: LD_VAR 0 1
20052: PPUSH
20053: LD_VAR 0 2
20057: PPUSH
20058: LD_VAR 0 3
20062: PPUSH
20063: LD_INT 1
20065: PPUSH
20066: LD_INT 1
20068: PPUSH
20069: CALL_OW 483
// CenterOnXY ( x , y ) ;
20073: LD_VAR 0 2
20077: PPUSH
20078: LD_VAR 0 3
20082: PPUSH
20083: CALL_OW 84
// end ;
20087: LD_VAR 0 4
20091: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
20092: LD_INT 0
20094: PPUSH
20095: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
20096: LD_VAR 0 1
20100: NOT
20101: PUSH
20102: LD_VAR 0 2
20106: PPUSH
20107: LD_VAR 0 3
20111: PPUSH
20112: CALL_OW 488
20116: NOT
20117: OR
20118: PUSH
20119: LD_VAR 0 1
20123: PPUSH
20124: CALL_OW 266
20128: PUSH
20129: LD_INT 3
20131: NONEQUAL
20132: PUSH
20133: LD_VAR 0 1
20137: PPUSH
20138: CALL_OW 247
20142: PUSH
20143: LD_INT 1
20145: EQUAL
20146: NOT
20147: AND
20148: OR
20149: IFFALSE 20153
// exit ;
20151: GO 20302
// if GetType ( factory ) = unit_human then
20153: LD_VAR 0 1
20157: PPUSH
20158: CALL_OW 247
20162: PUSH
20163: LD_INT 1
20165: EQUAL
20166: IFFALSE 20183
// factory := IsInUnit ( factory ) ;
20168: LD_ADDR_VAR 0 1
20172: PUSH
20173: LD_VAR 0 1
20177: PPUSH
20178: CALL_OW 310
20182: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20183: LD_VAR 0 1
20187: PPUSH
20188: CALL_OW 266
20192: PUSH
20193: LD_INT 3
20195: NONEQUAL
20196: IFFALSE 20200
// exit ;
20198: GO 20302
// if HexInfo ( x , y ) = factory then
20200: LD_VAR 0 2
20204: PPUSH
20205: LD_VAR 0 3
20209: PPUSH
20210: CALL_OW 428
20214: PUSH
20215: LD_VAR 0 1
20219: EQUAL
20220: IFFALSE 20247
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20222: LD_ADDR_EXP 82
20226: PUSH
20227: LD_EXP 82
20231: PPUSH
20232: LD_VAR 0 1
20236: PPUSH
20237: LD_INT 0
20239: PPUSH
20240: CALL_OW 1
20244: ST_TO_ADDR
20245: GO 20298
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
20247: LD_ADDR_EXP 82
20251: PUSH
20252: LD_EXP 82
20256: PPUSH
20257: LD_VAR 0 1
20261: PPUSH
20262: LD_VAR 0 1
20266: PPUSH
20267: CALL_OW 255
20271: PUSH
20272: LD_VAR 0 1
20276: PUSH
20277: LD_VAR 0 2
20281: PUSH
20282: LD_VAR 0 3
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: PPUSH
20293: CALL_OW 1
20297: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20298: CALL 20307 0 0
// end ;
20302: LD_VAR 0 4
20306: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
20307: LD_INT 0
20309: PPUSH
20310: PPUSH
20311: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20312: LD_STRING resetFactoryWaypoint();
20314: PPUSH
20315: CALL_OW 559
// if factoryWaypoints then
20319: LD_EXP 82
20323: IFFALSE 20449
// begin list := PrepareArray ( factoryWaypoints ) ;
20325: LD_ADDR_VAR 0 3
20329: PUSH
20330: LD_EXP 82
20334: PPUSH
20335: CALL 66826 0 1
20339: ST_TO_ADDR
// for i := 1 to list do
20340: LD_ADDR_VAR 0 2
20344: PUSH
20345: DOUBLE
20346: LD_INT 1
20348: DEC
20349: ST_TO_ADDR
20350: LD_VAR 0 3
20354: PUSH
20355: FOR_TO
20356: IFFALSE 20447
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20358: LD_STRING setFactoryWaypointXY(
20360: PUSH
20361: LD_VAR 0 3
20365: PUSH
20366: LD_VAR 0 2
20370: ARRAY
20371: PUSH
20372: LD_INT 1
20374: ARRAY
20375: STR
20376: PUSH
20377: LD_STRING ,
20379: STR
20380: PUSH
20381: LD_VAR 0 3
20385: PUSH
20386: LD_VAR 0 2
20390: ARRAY
20391: PUSH
20392: LD_INT 2
20394: ARRAY
20395: STR
20396: PUSH
20397: LD_STRING ,
20399: STR
20400: PUSH
20401: LD_VAR 0 3
20405: PUSH
20406: LD_VAR 0 2
20410: ARRAY
20411: PUSH
20412: LD_INT 3
20414: ARRAY
20415: STR
20416: PUSH
20417: LD_STRING ,
20419: STR
20420: PUSH
20421: LD_VAR 0 3
20425: PUSH
20426: LD_VAR 0 2
20430: ARRAY
20431: PUSH
20432: LD_INT 4
20434: ARRAY
20435: STR
20436: PUSH
20437: LD_STRING )
20439: STR
20440: PPUSH
20441: CALL_OW 559
20445: GO 20355
20447: POP
20448: POP
// end ; end ;
20449: LD_VAR 0 1
20453: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20454: LD_INT 0
20456: PPUSH
// if HexInfo ( x , y ) = warehouse then
20457: LD_VAR 0 2
20461: PPUSH
20462: LD_VAR 0 3
20466: PPUSH
20467: CALL_OW 428
20471: PUSH
20472: LD_VAR 0 1
20476: EQUAL
20477: IFFALSE 20504
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20479: LD_ADDR_EXP 83
20483: PUSH
20484: LD_EXP 83
20488: PPUSH
20489: LD_VAR 0 1
20493: PPUSH
20494: LD_INT 0
20496: PPUSH
20497: CALL_OW 1
20501: ST_TO_ADDR
20502: GO 20555
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20504: LD_ADDR_EXP 83
20508: PUSH
20509: LD_EXP 83
20513: PPUSH
20514: LD_VAR 0 1
20518: PPUSH
20519: LD_VAR 0 1
20523: PPUSH
20524: CALL_OW 255
20528: PUSH
20529: LD_VAR 0 1
20533: PUSH
20534: LD_VAR 0 2
20538: PUSH
20539: LD_VAR 0 3
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: PPUSH
20550: CALL_OW 1
20554: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20555: CALL 20564 0 0
// end ;
20559: LD_VAR 0 4
20563: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
20564: LD_INT 0
20566: PPUSH
20567: PPUSH
20568: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
20569: LD_STRING resetWarehouseGatheringPoints();
20571: PPUSH
20572: CALL_OW 559
// if warehouseGatheringPoints then
20576: LD_EXP 83
20580: IFFALSE 20706
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
20582: LD_ADDR_VAR 0 3
20586: PUSH
20587: LD_EXP 83
20591: PPUSH
20592: CALL 66826 0 1
20596: ST_TO_ADDR
// for i := 1 to list do
20597: LD_ADDR_VAR 0 2
20601: PUSH
20602: DOUBLE
20603: LD_INT 1
20605: DEC
20606: ST_TO_ADDR
20607: LD_VAR 0 3
20611: PUSH
20612: FOR_TO
20613: IFFALSE 20704
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20615: LD_STRING setWarehouseGatheringPointXY(
20617: PUSH
20618: LD_VAR 0 3
20622: PUSH
20623: LD_VAR 0 2
20627: ARRAY
20628: PUSH
20629: LD_INT 1
20631: ARRAY
20632: STR
20633: PUSH
20634: LD_STRING ,
20636: STR
20637: PUSH
20638: LD_VAR 0 3
20642: PUSH
20643: LD_VAR 0 2
20647: ARRAY
20648: PUSH
20649: LD_INT 2
20651: ARRAY
20652: STR
20653: PUSH
20654: LD_STRING ,
20656: STR
20657: PUSH
20658: LD_VAR 0 3
20662: PUSH
20663: LD_VAR 0 2
20667: ARRAY
20668: PUSH
20669: LD_INT 3
20671: ARRAY
20672: STR
20673: PUSH
20674: LD_STRING ,
20676: STR
20677: PUSH
20678: LD_VAR 0 3
20682: PUSH
20683: LD_VAR 0 2
20687: ARRAY
20688: PUSH
20689: LD_INT 4
20691: ARRAY
20692: STR
20693: PUSH
20694: LD_STRING )
20696: STR
20697: PPUSH
20698: CALL_OW 559
20702: GO 20612
20704: POP
20705: POP
// end ; end ;
20706: LD_VAR 0 1
20710: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20711: LD_EXP 83
20715: IFFALSE 21400
20717: GO 20719
20719: DISABLE
20720: LD_INT 0
20722: PPUSH
20723: PPUSH
20724: PPUSH
20725: PPUSH
20726: PPUSH
20727: PPUSH
20728: PPUSH
20729: PPUSH
20730: PPUSH
// begin enable ;
20731: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
20732: LD_ADDR_VAR 0 3
20736: PUSH
20737: LD_EXP 83
20741: PPUSH
20742: CALL 66826 0 1
20746: ST_TO_ADDR
// if not list then
20747: LD_VAR 0 3
20751: NOT
20752: IFFALSE 20756
// exit ;
20754: GO 21400
// for i := 1 to list do
20756: LD_ADDR_VAR 0 1
20760: PUSH
20761: DOUBLE
20762: LD_INT 1
20764: DEC
20765: ST_TO_ADDR
20766: LD_VAR 0 3
20770: PUSH
20771: FOR_TO
20772: IFFALSE 21398
// begin depot := list [ i ] [ 2 ] ;
20774: LD_ADDR_VAR 0 8
20778: PUSH
20779: LD_VAR 0 3
20783: PUSH
20784: LD_VAR 0 1
20788: ARRAY
20789: PUSH
20790: LD_INT 2
20792: ARRAY
20793: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
20794: LD_ADDR_VAR 0 5
20798: PUSH
20799: LD_VAR 0 3
20803: PUSH
20804: LD_VAR 0 1
20808: ARRAY
20809: PUSH
20810: LD_INT 1
20812: ARRAY
20813: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
20814: LD_VAR 0 8
20818: PPUSH
20819: CALL_OW 301
20823: PUSH
20824: LD_VAR 0 5
20828: PUSH
20829: LD_VAR 0 8
20833: PPUSH
20834: CALL_OW 255
20838: NONEQUAL
20839: OR
20840: IFFALSE 20869
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
20842: LD_ADDR_EXP 83
20846: PUSH
20847: LD_EXP 83
20851: PPUSH
20852: LD_VAR 0 8
20856: PPUSH
20857: LD_INT 0
20859: PPUSH
20860: CALL_OW 1
20864: ST_TO_ADDR
// exit ;
20865: POP
20866: POP
20867: GO 21400
// end ; x := list [ i ] [ 3 ] ;
20869: LD_ADDR_VAR 0 6
20873: PUSH
20874: LD_VAR 0 3
20878: PUSH
20879: LD_VAR 0 1
20883: ARRAY
20884: PUSH
20885: LD_INT 3
20887: ARRAY
20888: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
20889: LD_ADDR_VAR 0 7
20893: PUSH
20894: LD_VAR 0 3
20898: PUSH
20899: LD_VAR 0 1
20903: ARRAY
20904: PUSH
20905: LD_INT 4
20907: ARRAY
20908: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
20909: LD_ADDR_VAR 0 9
20913: PUSH
20914: LD_VAR 0 6
20918: PPUSH
20919: LD_VAR 0 7
20923: PPUSH
20924: LD_INT 16
20926: PPUSH
20927: CALL 65414 0 3
20931: ST_TO_ADDR
// if not cratesNearbyPoint then
20932: LD_VAR 0 9
20936: NOT
20937: IFFALSE 20943
// exit ;
20939: POP
20940: POP
20941: GO 21400
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
20943: LD_ADDR_VAR 0 4
20947: PUSH
20948: LD_INT 22
20950: PUSH
20951: LD_VAR 0 5
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 3
20962: PUSH
20963: LD_INT 60
20965: PUSH
20966: EMPTY
20967: LIST
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: LD_INT 91
20975: PUSH
20976: LD_VAR 0 8
20980: PUSH
20981: LD_INT 6
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: LIST
20988: PUSH
20989: LD_INT 2
20991: PUSH
20992: LD_INT 25
20994: PUSH
20995: LD_INT 2
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PUSH
21002: LD_INT 25
21004: PUSH
21005: LD_INT 16
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: LIST
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: PPUSH
21023: CALL_OW 69
21027: PUSH
21028: LD_VAR 0 8
21032: PPUSH
21033: CALL_OW 313
21037: PPUSH
21038: LD_INT 3
21040: PUSH
21041: LD_INT 60
21043: PUSH
21044: EMPTY
21045: LIST
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: LD_INT 2
21053: PUSH
21054: LD_INT 25
21056: PUSH
21057: LD_INT 2
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 25
21066: PUSH
21067: LD_INT 16
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: LIST
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PPUSH
21083: CALL_OW 72
21087: UNION
21088: ST_TO_ADDR
// if tmp then
21089: LD_VAR 0 4
21093: IFFALSE 21173
// begin tmp := ShrinkArray ( tmp , 3 ) ;
21095: LD_ADDR_VAR 0 4
21099: PUSH
21100: LD_VAR 0 4
21104: PPUSH
21105: LD_INT 3
21107: PPUSH
21108: CALL 63383 0 2
21112: ST_TO_ADDR
// for j in tmp do
21113: LD_ADDR_VAR 0 2
21117: PUSH
21118: LD_VAR 0 4
21122: PUSH
21123: FOR_IN
21124: IFFALSE 21167
// begin if IsInUnit ( j ) then
21126: LD_VAR 0 2
21130: PPUSH
21131: CALL_OW 310
21135: IFFALSE 21146
// ComExit ( j ) ;
21137: LD_VAR 0 2
21141: PPUSH
21142: CALL 63466 0 1
// AddComCollect ( j , x , y ) ;
21146: LD_VAR 0 2
21150: PPUSH
21151: LD_VAR 0 6
21155: PPUSH
21156: LD_VAR 0 7
21160: PPUSH
21161: CALL_OW 177
// end ;
21165: GO 21123
21167: POP
21168: POP
// exit ;
21169: POP
21170: POP
21171: GO 21400
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
21173: LD_ADDR_VAR 0 4
21177: PUSH
21178: LD_INT 22
21180: PUSH
21181: LD_VAR 0 5
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: LD_INT 91
21192: PUSH
21193: LD_VAR 0 8
21197: PUSH
21198: LD_INT 8
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: LIST
21205: PUSH
21206: LD_INT 2
21208: PUSH
21209: LD_INT 34
21211: PUSH
21212: LD_INT 12
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: PUSH
21219: LD_INT 34
21221: PUSH
21222: LD_INT 51
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PUSH
21229: LD_INT 34
21231: PUSH
21232: LD_INT 32
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: PUSH
21239: LD_INT 34
21241: PUSH
21242: LD_INT 89
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: LIST
21260: PPUSH
21261: CALL_OW 69
21265: ST_TO_ADDR
// if tmp then
21266: LD_VAR 0 4
21270: IFFALSE 21396
// begin for j in tmp do
21272: LD_ADDR_VAR 0 2
21276: PUSH
21277: LD_VAR 0 4
21281: PUSH
21282: FOR_IN
21283: IFFALSE 21394
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
21285: LD_VAR 0 2
21289: PPUSH
21290: CALL_OW 262
21294: PUSH
21295: LD_INT 3
21297: EQUAL
21298: PUSH
21299: LD_VAR 0 2
21303: PPUSH
21304: CALL_OW 261
21308: PUSH
21309: LD_INT 20
21311: GREATER
21312: OR
21313: PUSH
21314: LD_VAR 0 2
21318: PPUSH
21319: CALL_OW 314
21323: NOT
21324: AND
21325: PUSH
21326: LD_VAR 0 2
21330: PPUSH
21331: CALL_OW 263
21335: PUSH
21336: LD_INT 1
21338: NONEQUAL
21339: PUSH
21340: LD_VAR 0 2
21344: PPUSH
21345: CALL_OW 311
21349: OR
21350: AND
21351: IFFALSE 21392
// begin ComCollect ( j , x , y ) ;
21353: LD_VAR 0 2
21357: PPUSH
21358: LD_VAR 0 6
21362: PPUSH
21363: LD_VAR 0 7
21367: PPUSH
21368: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
21372: LD_VAR 0 2
21376: PPUSH
21377: LD_VAR 0 8
21381: PPUSH
21382: CALL_OW 172
// exit ;
21386: POP
21387: POP
21388: POP
21389: POP
21390: GO 21400
// end ;
21392: GO 21282
21394: POP
21395: POP
// end ; end ;
21396: GO 20771
21398: POP
21399: POP
// end ; end_of_file
21400: PPOPN 9
21402: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21403: LD_INT 0
21405: PPUSH
21406: PPUSH
21407: PPUSH
21408: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21409: LD_VAR 0 1
21413: PPUSH
21414: CALL_OW 264
21418: PUSH
21419: LD_INT 91
21421: EQUAL
21422: IFFALSE 21494
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21424: LD_INT 68
21426: PPUSH
21427: LD_VAR 0 1
21431: PPUSH
21432: CALL_OW 255
21436: PPUSH
21437: CALL_OW 321
21441: PUSH
21442: LD_INT 2
21444: EQUAL
21445: IFFALSE 21457
// eff := 70 else
21447: LD_ADDR_VAR 0 4
21451: PUSH
21452: LD_INT 70
21454: ST_TO_ADDR
21455: GO 21465
// eff := 30 ;
21457: LD_ADDR_VAR 0 4
21461: PUSH
21462: LD_INT 30
21464: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21465: LD_VAR 0 1
21469: PPUSH
21470: CALL_OW 250
21474: PPUSH
21475: LD_VAR 0 1
21479: PPUSH
21480: CALL_OW 251
21484: PPUSH
21485: LD_VAR 0 4
21489: PPUSH
21490: CALL_OW 495
// end ; end ;
21494: LD_VAR 0 2
21498: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21499: LD_INT 0
21501: PPUSH
// end ;
21502: LD_VAR 0 4
21506: RET
// export function SOS_Command ( cmd ) ; begin
21507: LD_INT 0
21509: PPUSH
// end ;
21510: LD_VAR 0 2
21514: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21515: LD_INT 0
21517: PPUSH
// end ;
21518: LD_VAR 0 6
21522: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
21523: LD_INT 0
21525: PPUSH
21526: PPUSH
// if not vehicle or not factory then
21527: LD_VAR 0 1
21531: NOT
21532: PUSH
21533: LD_VAR 0 2
21537: NOT
21538: OR
21539: IFFALSE 21543
// exit ;
21541: GO 21774
// if factoryWaypoints >= factory then
21543: LD_EXP 82
21547: PUSH
21548: LD_VAR 0 2
21552: GREATEREQUAL
21553: IFFALSE 21774
// if factoryWaypoints [ factory ] then
21555: LD_EXP 82
21559: PUSH
21560: LD_VAR 0 2
21564: ARRAY
21565: IFFALSE 21774
// begin if GetControl ( vehicle ) = control_manual then
21567: LD_VAR 0 1
21571: PPUSH
21572: CALL_OW 263
21576: PUSH
21577: LD_INT 1
21579: EQUAL
21580: IFFALSE 21661
// begin driver := IsDrivenBy ( vehicle ) ;
21582: LD_ADDR_VAR 0 4
21586: PUSH
21587: LD_VAR 0 1
21591: PPUSH
21592: CALL_OW 311
21596: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21597: LD_VAR 0 4
21601: PPUSH
21602: LD_EXP 82
21606: PUSH
21607: LD_VAR 0 2
21611: ARRAY
21612: PUSH
21613: LD_INT 3
21615: ARRAY
21616: PPUSH
21617: LD_EXP 82
21621: PUSH
21622: LD_VAR 0 2
21626: ARRAY
21627: PUSH
21628: LD_INT 4
21630: ARRAY
21631: PPUSH
21632: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21636: LD_VAR 0 4
21640: PPUSH
21641: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21645: LD_VAR 0 4
21649: PPUSH
21650: LD_VAR 0 2
21654: PPUSH
21655: CALL_OW 180
// end else
21659: GO 21774
// if GetControl ( vehicle ) = control_remote then
21661: LD_VAR 0 1
21665: PPUSH
21666: CALL_OW 263
21670: PUSH
21671: LD_INT 2
21673: EQUAL
21674: IFFALSE 21735
// begin wait ( 0 0$2 ) ;
21676: LD_INT 70
21678: PPUSH
21679: CALL_OW 67
// if Connect ( vehicle ) then
21683: LD_VAR 0 1
21687: PPUSH
21688: CALL 33798 0 1
21692: IFFALSE 21733
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21694: LD_VAR 0 1
21698: PPUSH
21699: LD_EXP 82
21703: PUSH
21704: LD_VAR 0 2
21708: ARRAY
21709: PUSH
21710: LD_INT 3
21712: ARRAY
21713: PPUSH
21714: LD_EXP 82
21718: PUSH
21719: LD_VAR 0 2
21723: ARRAY
21724: PUSH
21725: LD_INT 4
21727: ARRAY
21728: PPUSH
21729: CALL_OW 171
// end else
21733: GO 21774
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21735: LD_VAR 0 1
21739: PPUSH
21740: LD_EXP 82
21744: PUSH
21745: LD_VAR 0 2
21749: ARRAY
21750: PUSH
21751: LD_INT 3
21753: ARRAY
21754: PPUSH
21755: LD_EXP 82
21759: PUSH
21760: LD_VAR 0 2
21764: ARRAY
21765: PUSH
21766: LD_INT 4
21768: ARRAY
21769: PPUSH
21770: CALL_OW 171
// end ; end ;
21774: LD_VAR 0 3
21778: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21779: LD_INT 0
21781: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21782: LD_VAR 0 1
21786: PUSH
21787: LD_INT 250
21789: EQUAL
21790: PUSH
21791: LD_VAR 0 2
21795: PPUSH
21796: CALL_OW 264
21800: PUSH
21801: LD_INT 81
21803: EQUAL
21804: AND
21805: IFFALSE 21826
// MinerPlaceMine ( unit , x , y ) ;
21807: LD_VAR 0 2
21811: PPUSH
21812: LD_VAR 0 4
21816: PPUSH
21817: LD_VAR 0 5
21821: PPUSH
21822: CALL 24211 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21826: LD_VAR 0 1
21830: PUSH
21831: LD_INT 251
21833: EQUAL
21834: PUSH
21835: LD_VAR 0 2
21839: PPUSH
21840: CALL_OW 264
21844: PUSH
21845: LD_INT 81
21847: EQUAL
21848: AND
21849: IFFALSE 21870
// MinerDetonateMine ( unit , x , y ) ;
21851: LD_VAR 0 2
21855: PPUSH
21856: LD_VAR 0 4
21860: PPUSH
21861: LD_VAR 0 5
21865: PPUSH
21866: CALL 24486 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21870: LD_VAR 0 1
21874: PUSH
21875: LD_INT 252
21877: EQUAL
21878: PUSH
21879: LD_VAR 0 2
21883: PPUSH
21884: CALL_OW 264
21888: PUSH
21889: LD_INT 81
21891: EQUAL
21892: AND
21893: IFFALSE 21914
// MinerCreateMinefield ( unit , x , y ) ;
21895: LD_VAR 0 2
21899: PPUSH
21900: LD_VAR 0 4
21904: PPUSH
21905: LD_VAR 0 5
21909: PPUSH
21910: CALL 24903 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21914: LD_VAR 0 1
21918: PUSH
21919: LD_INT 253
21921: EQUAL
21922: PUSH
21923: LD_VAR 0 2
21927: PPUSH
21928: CALL_OW 257
21932: PUSH
21933: LD_INT 5
21935: EQUAL
21936: AND
21937: IFFALSE 21958
// ComBinocular ( unit , x , y ) ;
21939: LD_VAR 0 2
21943: PPUSH
21944: LD_VAR 0 4
21948: PPUSH
21949: LD_VAR 0 5
21953: PPUSH
21954: CALL 25272 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21958: LD_VAR 0 1
21962: PUSH
21963: LD_INT 254
21965: EQUAL
21966: PUSH
21967: LD_VAR 0 2
21971: PPUSH
21972: CALL_OW 264
21976: PUSH
21977: LD_INT 99
21979: EQUAL
21980: AND
21981: PUSH
21982: LD_VAR 0 3
21986: PPUSH
21987: CALL_OW 263
21991: PUSH
21992: LD_INT 3
21994: EQUAL
21995: AND
21996: IFFALSE 22012
// HackDestroyVehicle ( unit , selectedUnit ) ;
21998: LD_VAR 0 2
22002: PPUSH
22003: LD_VAR 0 3
22007: PPUSH
22008: CALL 23575 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22012: LD_VAR 0 1
22016: PUSH
22017: LD_INT 255
22019: EQUAL
22020: PUSH
22021: LD_VAR 0 2
22025: PPUSH
22026: CALL_OW 264
22030: PUSH
22031: LD_INT 14
22033: PUSH
22034: LD_INT 53
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: IN
22041: AND
22042: PUSH
22043: LD_VAR 0 4
22047: PPUSH
22048: LD_VAR 0 5
22052: PPUSH
22053: CALL_OW 488
22057: AND
22058: IFFALSE 22082
// CutTreeXYR ( unit , x , y , 12 ) ;
22060: LD_VAR 0 2
22064: PPUSH
22065: LD_VAR 0 4
22069: PPUSH
22070: LD_VAR 0 5
22074: PPUSH
22075: LD_INT 12
22077: PPUSH
22078: CALL 22145 0 4
// if cmd = 256 then
22082: LD_VAR 0 1
22086: PUSH
22087: LD_INT 256
22089: EQUAL
22090: IFFALSE 22111
// SetFactoryWaypoint ( unit , x , y ) ;
22092: LD_VAR 0 2
22096: PPUSH
22097: LD_VAR 0 4
22101: PPUSH
22102: LD_VAR 0 5
22106: PPUSH
22107: CALL 20092 0 3
// if cmd = 257 then
22111: LD_VAR 0 1
22115: PUSH
22116: LD_INT 257
22118: EQUAL
22119: IFFALSE 22140
// SetWarehouseGatheringPoint ( unit , x , y ) ;
22121: LD_VAR 0 2
22125: PPUSH
22126: LD_VAR 0 4
22130: PPUSH
22131: LD_VAR 0 5
22135: PPUSH
22136: CALL 20454 0 3
// end ;
22140: LD_VAR 0 6
22144: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22145: LD_INT 0
22147: PPUSH
22148: PPUSH
22149: PPUSH
22150: PPUSH
22151: PPUSH
22152: PPUSH
22153: PPUSH
22154: PPUSH
22155: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22156: LD_VAR 0 1
22160: NOT
22161: PUSH
22162: LD_VAR 0 2
22166: PPUSH
22167: LD_VAR 0 3
22171: PPUSH
22172: CALL_OW 488
22176: NOT
22177: OR
22178: PUSH
22179: LD_VAR 0 4
22183: NOT
22184: OR
22185: IFFALSE 22189
// exit ;
22187: GO 22529
// list := [ ] ;
22189: LD_ADDR_VAR 0 13
22193: PUSH
22194: EMPTY
22195: ST_TO_ADDR
// if x - r < 0 then
22196: LD_VAR 0 2
22200: PUSH
22201: LD_VAR 0 4
22205: MINUS
22206: PUSH
22207: LD_INT 0
22209: LESS
22210: IFFALSE 22222
// min_x := 0 else
22212: LD_ADDR_VAR 0 7
22216: PUSH
22217: LD_INT 0
22219: ST_TO_ADDR
22220: GO 22238
// min_x := x - r ;
22222: LD_ADDR_VAR 0 7
22226: PUSH
22227: LD_VAR 0 2
22231: PUSH
22232: LD_VAR 0 4
22236: MINUS
22237: ST_TO_ADDR
// if y - r < 0 then
22238: LD_VAR 0 3
22242: PUSH
22243: LD_VAR 0 4
22247: MINUS
22248: PUSH
22249: LD_INT 0
22251: LESS
22252: IFFALSE 22264
// min_y := 0 else
22254: LD_ADDR_VAR 0 8
22258: PUSH
22259: LD_INT 0
22261: ST_TO_ADDR
22262: GO 22280
// min_y := y - r ;
22264: LD_ADDR_VAR 0 8
22268: PUSH
22269: LD_VAR 0 3
22273: PUSH
22274: LD_VAR 0 4
22278: MINUS
22279: ST_TO_ADDR
// max_x := x + r ;
22280: LD_ADDR_VAR 0 9
22284: PUSH
22285: LD_VAR 0 2
22289: PUSH
22290: LD_VAR 0 4
22294: PLUS
22295: ST_TO_ADDR
// max_y := y + r ;
22296: LD_ADDR_VAR 0 10
22300: PUSH
22301: LD_VAR 0 3
22305: PUSH
22306: LD_VAR 0 4
22310: PLUS
22311: ST_TO_ADDR
// for _x = min_x to max_x do
22312: LD_ADDR_VAR 0 11
22316: PUSH
22317: DOUBLE
22318: LD_VAR 0 7
22322: DEC
22323: ST_TO_ADDR
22324: LD_VAR 0 9
22328: PUSH
22329: FOR_TO
22330: IFFALSE 22447
// for _y = min_y to max_y do
22332: LD_ADDR_VAR 0 12
22336: PUSH
22337: DOUBLE
22338: LD_VAR 0 8
22342: DEC
22343: ST_TO_ADDR
22344: LD_VAR 0 10
22348: PUSH
22349: FOR_TO
22350: IFFALSE 22443
// begin if not ValidHex ( _x , _y ) then
22352: LD_VAR 0 11
22356: PPUSH
22357: LD_VAR 0 12
22361: PPUSH
22362: CALL_OW 488
22366: NOT
22367: IFFALSE 22371
// continue ;
22369: GO 22349
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22371: LD_VAR 0 11
22375: PPUSH
22376: LD_VAR 0 12
22380: PPUSH
22381: CALL_OW 351
22385: PUSH
22386: LD_VAR 0 11
22390: PPUSH
22391: LD_VAR 0 12
22395: PPUSH
22396: CALL_OW 554
22400: AND
22401: IFFALSE 22441
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22403: LD_ADDR_VAR 0 13
22407: PUSH
22408: LD_VAR 0 13
22412: PPUSH
22413: LD_VAR 0 13
22417: PUSH
22418: LD_INT 1
22420: PLUS
22421: PPUSH
22422: LD_VAR 0 11
22426: PUSH
22427: LD_VAR 0 12
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PPUSH
22436: CALL_OW 2
22440: ST_TO_ADDR
// end ;
22441: GO 22349
22443: POP
22444: POP
22445: GO 22329
22447: POP
22448: POP
// if not list then
22449: LD_VAR 0 13
22453: NOT
22454: IFFALSE 22458
// exit ;
22456: GO 22529
// for i in list do
22458: LD_ADDR_VAR 0 6
22462: PUSH
22463: LD_VAR 0 13
22467: PUSH
22468: FOR_IN
22469: IFFALSE 22527
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22471: LD_VAR 0 1
22475: PPUSH
22476: LD_STRING M
22478: PUSH
22479: LD_VAR 0 6
22483: PUSH
22484: LD_INT 1
22486: ARRAY
22487: PUSH
22488: LD_VAR 0 6
22492: PUSH
22493: LD_INT 2
22495: ARRAY
22496: PUSH
22497: LD_INT 0
22499: PUSH
22500: LD_INT 0
22502: PUSH
22503: LD_INT 0
22505: PUSH
22506: LD_INT 0
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: PUSH
22518: EMPTY
22519: LIST
22520: PPUSH
22521: CALL_OW 447
22525: GO 22468
22527: POP
22528: POP
// end ;
22529: LD_VAR 0 5
22533: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22534: LD_EXP 85
22538: NOT
22539: IFFALSE 22589
22541: GO 22543
22543: DISABLE
// begin initHack := true ;
22544: LD_ADDR_EXP 85
22548: PUSH
22549: LD_INT 1
22551: ST_TO_ADDR
// hackTanks := [ ] ;
22552: LD_ADDR_EXP 86
22556: PUSH
22557: EMPTY
22558: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22559: LD_ADDR_EXP 87
22563: PUSH
22564: EMPTY
22565: ST_TO_ADDR
// hackLimit := 3 ;
22566: LD_ADDR_EXP 88
22570: PUSH
22571: LD_INT 3
22573: ST_TO_ADDR
// hackDist := 12 ;
22574: LD_ADDR_EXP 89
22578: PUSH
22579: LD_INT 12
22581: ST_TO_ADDR
// hackCounter := [ ] ;
22582: LD_ADDR_EXP 90
22586: PUSH
22587: EMPTY
22588: ST_TO_ADDR
// end ;
22589: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22590: LD_EXP 85
22594: PUSH
22595: LD_INT 34
22597: PUSH
22598: LD_INT 99
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PPUSH
22605: CALL_OW 69
22609: AND
22610: IFFALSE 22863
22612: GO 22614
22614: DISABLE
22615: LD_INT 0
22617: PPUSH
22618: PPUSH
// begin enable ;
22619: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22620: LD_ADDR_VAR 0 1
22624: PUSH
22625: LD_INT 34
22627: PUSH
22628: LD_INT 99
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PPUSH
22635: CALL_OW 69
22639: PUSH
22640: FOR_IN
22641: IFFALSE 22861
// begin if not i in hackTanks then
22643: LD_VAR 0 1
22647: PUSH
22648: LD_EXP 86
22652: IN
22653: NOT
22654: IFFALSE 22737
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22656: LD_ADDR_EXP 86
22660: PUSH
22661: LD_EXP 86
22665: PPUSH
22666: LD_EXP 86
22670: PUSH
22671: LD_INT 1
22673: PLUS
22674: PPUSH
22675: LD_VAR 0 1
22679: PPUSH
22680: CALL_OW 1
22684: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22685: LD_ADDR_EXP 87
22689: PUSH
22690: LD_EXP 87
22694: PPUSH
22695: LD_EXP 87
22699: PUSH
22700: LD_INT 1
22702: PLUS
22703: PPUSH
22704: EMPTY
22705: PPUSH
22706: CALL_OW 1
22710: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22711: LD_ADDR_EXP 90
22715: PUSH
22716: LD_EXP 90
22720: PPUSH
22721: LD_EXP 90
22725: PUSH
22726: LD_INT 1
22728: PLUS
22729: PPUSH
22730: EMPTY
22731: PPUSH
22732: CALL_OW 1
22736: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22737: LD_VAR 0 1
22741: PPUSH
22742: CALL_OW 302
22746: NOT
22747: IFFALSE 22760
// begin HackUnlinkAll ( i ) ;
22749: LD_VAR 0 1
22753: PPUSH
22754: CALL 22866 0 1
// continue ;
22758: GO 22640
// end ; HackCheckCapturedStatus ( i ) ;
22760: LD_VAR 0 1
22764: PPUSH
22765: CALL 23309 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22769: LD_ADDR_VAR 0 2
22773: PUSH
22774: LD_INT 81
22776: PUSH
22777: LD_VAR 0 1
22781: PPUSH
22782: CALL_OW 255
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PUSH
22791: LD_INT 33
22793: PUSH
22794: LD_INT 3
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 91
22803: PUSH
22804: LD_VAR 0 1
22808: PUSH
22809: LD_EXP 89
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: LIST
22818: PUSH
22819: LD_INT 50
22821: PUSH
22822: EMPTY
22823: LIST
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: PPUSH
22831: CALL_OW 69
22835: ST_TO_ADDR
// if not tmp then
22836: LD_VAR 0 2
22840: NOT
22841: IFFALSE 22845
// continue ;
22843: GO 22640
// HackLink ( i , tmp ) ;
22845: LD_VAR 0 1
22849: PPUSH
22850: LD_VAR 0 2
22854: PPUSH
22855: CALL 23002 0 2
// end ;
22859: GO 22640
22861: POP
22862: POP
// end ;
22863: PPOPN 2
22865: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22866: LD_INT 0
22868: PPUSH
22869: PPUSH
22870: PPUSH
// if not hack in hackTanks then
22871: LD_VAR 0 1
22875: PUSH
22876: LD_EXP 86
22880: IN
22881: NOT
22882: IFFALSE 22886
// exit ;
22884: GO 22997
// index := GetElementIndex ( hackTanks , hack ) ;
22886: LD_ADDR_VAR 0 4
22890: PUSH
22891: LD_EXP 86
22895: PPUSH
22896: LD_VAR 0 1
22900: PPUSH
22901: CALL 30614 0 2
22905: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22906: LD_EXP 87
22910: PUSH
22911: LD_VAR 0 4
22915: ARRAY
22916: IFFALSE 22997
// begin for i in hackTanksCaptured [ index ] do
22918: LD_ADDR_VAR 0 3
22922: PUSH
22923: LD_EXP 87
22927: PUSH
22928: LD_VAR 0 4
22932: ARRAY
22933: PUSH
22934: FOR_IN
22935: IFFALSE 22961
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22937: LD_VAR 0 3
22941: PUSH
22942: LD_INT 1
22944: ARRAY
22945: PPUSH
22946: LD_VAR 0 3
22950: PUSH
22951: LD_INT 2
22953: ARRAY
22954: PPUSH
22955: CALL_OW 235
22959: GO 22934
22961: POP
22962: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22963: LD_ADDR_EXP 87
22967: PUSH
22968: LD_EXP 87
22972: PPUSH
22973: LD_VAR 0 4
22977: PPUSH
22978: EMPTY
22979: PPUSH
22980: CALL_OW 1
22984: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22985: LD_VAR 0 1
22989: PPUSH
22990: LD_INT 0
22992: PPUSH
22993: CALL_OW 505
// end ; end ;
22997: LD_VAR 0 2
23001: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23002: LD_INT 0
23004: PPUSH
23005: PPUSH
23006: PPUSH
// if not hack in hackTanks or not vehicles then
23007: LD_VAR 0 1
23011: PUSH
23012: LD_EXP 86
23016: IN
23017: NOT
23018: PUSH
23019: LD_VAR 0 2
23023: NOT
23024: OR
23025: IFFALSE 23029
// exit ;
23027: GO 23304
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23029: LD_ADDR_VAR 0 2
23033: PUSH
23034: LD_VAR 0 1
23038: PPUSH
23039: LD_VAR 0 2
23043: PPUSH
23044: LD_INT 1
23046: PPUSH
23047: LD_INT 1
23049: PPUSH
23050: CALL 31264 0 4
23054: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23055: LD_ADDR_VAR 0 5
23059: PUSH
23060: LD_EXP 86
23064: PPUSH
23065: LD_VAR 0 1
23069: PPUSH
23070: CALL 30614 0 2
23074: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23075: LD_EXP 87
23079: PUSH
23080: LD_VAR 0 5
23084: ARRAY
23085: PUSH
23086: LD_EXP 88
23090: LESS
23091: IFFALSE 23280
// begin for i := 1 to vehicles do
23093: LD_ADDR_VAR 0 4
23097: PUSH
23098: DOUBLE
23099: LD_INT 1
23101: DEC
23102: ST_TO_ADDR
23103: LD_VAR 0 2
23107: PUSH
23108: FOR_TO
23109: IFFALSE 23278
// begin if hackTanksCaptured [ index ] = hackLimit then
23111: LD_EXP 87
23115: PUSH
23116: LD_VAR 0 5
23120: ARRAY
23121: PUSH
23122: LD_EXP 88
23126: EQUAL
23127: IFFALSE 23131
// break ;
23129: GO 23278
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23131: LD_ADDR_EXP 90
23135: PUSH
23136: LD_EXP 90
23140: PPUSH
23141: LD_VAR 0 5
23145: PPUSH
23146: LD_EXP 90
23150: PUSH
23151: LD_VAR 0 5
23155: ARRAY
23156: PUSH
23157: LD_INT 1
23159: PLUS
23160: PPUSH
23161: CALL_OW 1
23165: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23166: LD_ADDR_EXP 87
23170: PUSH
23171: LD_EXP 87
23175: PPUSH
23176: LD_VAR 0 5
23180: PUSH
23181: LD_EXP 87
23185: PUSH
23186: LD_VAR 0 5
23190: ARRAY
23191: PUSH
23192: LD_INT 1
23194: PLUS
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PPUSH
23200: LD_VAR 0 2
23204: PUSH
23205: LD_VAR 0 4
23209: ARRAY
23210: PUSH
23211: LD_VAR 0 2
23215: PUSH
23216: LD_VAR 0 4
23220: ARRAY
23221: PPUSH
23222: CALL_OW 255
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PPUSH
23231: CALL 30829 0 3
23235: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23236: LD_VAR 0 2
23240: PUSH
23241: LD_VAR 0 4
23245: ARRAY
23246: PPUSH
23247: LD_VAR 0 1
23251: PPUSH
23252: CALL_OW 255
23256: PPUSH
23257: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23261: LD_VAR 0 2
23265: PUSH
23266: LD_VAR 0 4
23270: ARRAY
23271: PPUSH
23272: CALL_OW 141
// end ;
23276: GO 23108
23278: POP
23279: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23280: LD_VAR 0 1
23284: PPUSH
23285: LD_EXP 87
23289: PUSH
23290: LD_VAR 0 5
23294: ARRAY
23295: PUSH
23296: LD_INT 0
23298: PLUS
23299: PPUSH
23300: CALL_OW 505
// end ;
23304: LD_VAR 0 3
23308: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23309: LD_INT 0
23311: PPUSH
23312: PPUSH
23313: PPUSH
23314: PPUSH
// if not hack in hackTanks then
23315: LD_VAR 0 1
23319: PUSH
23320: LD_EXP 86
23324: IN
23325: NOT
23326: IFFALSE 23330
// exit ;
23328: GO 23570
// index := GetElementIndex ( hackTanks , hack ) ;
23330: LD_ADDR_VAR 0 4
23334: PUSH
23335: LD_EXP 86
23339: PPUSH
23340: LD_VAR 0 1
23344: PPUSH
23345: CALL 30614 0 2
23349: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23350: LD_ADDR_VAR 0 3
23354: PUSH
23355: DOUBLE
23356: LD_EXP 87
23360: PUSH
23361: LD_VAR 0 4
23365: ARRAY
23366: INC
23367: ST_TO_ADDR
23368: LD_INT 1
23370: PUSH
23371: FOR_DOWNTO
23372: IFFALSE 23544
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23374: LD_ADDR_VAR 0 5
23378: PUSH
23379: LD_EXP 87
23383: PUSH
23384: LD_VAR 0 4
23388: ARRAY
23389: PUSH
23390: LD_VAR 0 3
23394: ARRAY
23395: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23396: LD_VAR 0 5
23400: PUSH
23401: LD_INT 1
23403: ARRAY
23404: PPUSH
23405: CALL_OW 302
23409: NOT
23410: PUSH
23411: LD_VAR 0 5
23415: PUSH
23416: LD_INT 1
23418: ARRAY
23419: PPUSH
23420: CALL_OW 255
23424: PUSH
23425: LD_VAR 0 1
23429: PPUSH
23430: CALL_OW 255
23434: NONEQUAL
23435: OR
23436: IFFALSE 23542
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23438: LD_VAR 0 5
23442: PUSH
23443: LD_INT 1
23445: ARRAY
23446: PPUSH
23447: CALL_OW 305
23451: PUSH
23452: LD_VAR 0 5
23456: PUSH
23457: LD_INT 1
23459: ARRAY
23460: PPUSH
23461: CALL_OW 255
23465: PUSH
23466: LD_VAR 0 1
23470: PPUSH
23471: CALL_OW 255
23475: EQUAL
23476: AND
23477: IFFALSE 23501
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23479: LD_VAR 0 5
23483: PUSH
23484: LD_INT 1
23486: ARRAY
23487: PPUSH
23488: LD_VAR 0 5
23492: PUSH
23493: LD_INT 2
23495: ARRAY
23496: PPUSH
23497: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23501: LD_ADDR_EXP 87
23505: PUSH
23506: LD_EXP 87
23510: PPUSH
23511: LD_VAR 0 4
23515: PPUSH
23516: LD_EXP 87
23520: PUSH
23521: LD_VAR 0 4
23525: ARRAY
23526: PPUSH
23527: LD_VAR 0 3
23531: PPUSH
23532: CALL_OW 3
23536: PPUSH
23537: CALL_OW 1
23541: ST_TO_ADDR
// end ; end ;
23542: GO 23371
23544: POP
23545: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23546: LD_VAR 0 1
23550: PPUSH
23551: LD_EXP 87
23555: PUSH
23556: LD_VAR 0 4
23560: ARRAY
23561: PUSH
23562: LD_INT 0
23564: PLUS
23565: PPUSH
23566: CALL_OW 505
// end ;
23570: LD_VAR 0 2
23574: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23575: LD_INT 0
23577: PPUSH
23578: PPUSH
23579: PPUSH
23580: PPUSH
// if not hack in hackTanks then
23581: LD_VAR 0 1
23585: PUSH
23586: LD_EXP 86
23590: IN
23591: NOT
23592: IFFALSE 23596
// exit ;
23594: GO 23681
// index := GetElementIndex ( hackTanks , hack ) ;
23596: LD_ADDR_VAR 0 5
23600: PUSH
23601: LD_EXP 86
23605: PPUSH
23606: LD_VAR 0 1
23610: PPUSH
23611: CALL 30614 0 2
23615: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23616: LD_ADDR_VAR 0 4
23620: PUSH
23621: DOUBLE
23622: LD_INT 1
23624: DEC
23625: ST_TO_ADDR
23626: LD_EXP 87
23630: PUSH
23631: LD_VAR 0 5
23635: ARRAY
23636: PUSH
23637: FOR_TO
23638: IFFALSE 23679
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23640: LD_EXP 87
23644: PUSH
23645: LD_VAR 0 5
23649: ARRAY
23650: PUSH
23651: LD_VAR 0 4
23655: ARRAY
23656: PUSH
23657: LD_INT 1
23659: ARRAY
23660: PUSH
23661: LD_VAR 0 2
23665: EQUAL
23666: IFFALSE 23677
// KillUnit ( vehicle ) ;
23668: LD_VAR 0 2
23672: PPUSH
23673: CALL_OW 66
23677: GO 23637
23679: POP
23680: POP
// end ;
23681: LD_VAR 0 3
23685: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23686: LD_EXP 91
23690: NOT
23691: IFFALSE 23726
23693: GO 23695
23695: DISABLE
// begin initMiner := true ;
23696: LD_ADDR_EXP 91
23700: PUSH
23701: LD_INT 1
23703: ST_TO_ADDR
// minersList := [ ] ;
23704: LD_ADDR_EXP 92
23708: PUSH
23709: EMPTY
23710: ST_TO_ADDR
// minerMinesList := [ ] ;
23711: LD_ADDR_EXP 93
23715: PUSH
23716: EMPTY
23717: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23718: LD_ADDR_EXP 94
23722: PUSH
23723: LD_INT 5
23725: ST_TO_ADDR
// end ;
23726: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23727: LD_EXP 91
23731: PUSH
23732: LD_INT 34
23734: PUSH
23735: LD_INT 81
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PPUSH
23742: CALL_OW 69
23746: AND
23747: IFFALSE 24208
23749: GO 23751
23751: DISABLE
23752: LD_INT 0
23754: PPUSH
23755: PPUSH
23756: PPUSH
23757: PPUSH
// begin enable ;
23758: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23759: LD_ADDR_VAR 0 1
23763: PUSH
23764: LD_INT 34
23766: PUSH
23767: LD_INT 81
23769: PUSH
23770: EMPTY
23771: LIST
23772: LIST
23773: PPUSH
23774: CALL_OW 69
23778: PUSH
23779: FOR_IN
23780: IFFALSE 23852
// begin if not i in minersList then
23782: LD_VAR 0 1
23786: PUSH
23787: LD_EXP 92
23791: IN
23792: NOT
23793: IFFALSE 23850
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23795: LD_ADDR_EXP 92
23799: PUSH
23800: LD_EXP 92
23804: PPUSH
23805: LD_EXP 92
23809: PUSH
23810: LD_INT 1
23812: PLUS
23813: PPUSH
23814: LD_VAR 0 1
23818: PPUSH
23819: CALL_OW 1
23823: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23824: LD_ADDR_EXP 93
23828: PUSH
23829: LD_EXP 93
23833: PPUSH
23834: LD_EXP 93
23838: PUSH
23839: LD_INT 1
23841: PLUS
23842: PPUSH
23843: EMPTY
23844: PPUSH
23845: CALL_OW 1
23849: ST_TO_ADDR
// end end ;
23850: GO 23779
23852: POP
23853: POP
// for i := minerMinesList downto 1 do
23854: LD_ADDR_VAR 0 1
23858: PUSH
23859: DOUBLE
23860: LD_EXP 93
23864: INC
23865: ST_TO_ADDR
23866: LD_INT 1
23868: PUSH
23869: FOR_DOWNTO
23870: IFFALSE 24206
// begin if IsLive ( minersList [ i ] ) then
23872: LD_EXP 92
23876: PUSH
23877: LD_VAR 0 1
23881: ARRAY
23882: PPUSH
23883: CALL_OW 300
23887: IFFALSE 23915
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23889: LD_EXP 92
23893: PUSH
23894: LD_VAR 0 1
23898: ARRAY
23899: PPUSH
23900: LD_EXP 93
23904: PUSH
23905: LD_VAR 0 1
23909: ARRAY
23910: PPUSH
23911: CALL_OW 505
// if not minerMinesList [ i ] then
23915: LD_EXP 93
23919: PUSH
23920: LD_VAR 0 1
23924: ARRAY
23925: NOT
23926: IFFALSE 23930
// continue ;
23928: GO 23869
// for j := minerMinesList [ i ] downto 1 do
23930: LD_ADDR_VAR 0 2
23934: PUSH
23935: DOUBLE
23936: LD_EXP 93
23940: PUSH
23941: LD_VAR 0 1
23945: ARRAY
23946: INC
23947: ST_TO_ADDR
23948: LD_INT 1
23950: PUSH
23951: FOR_DOWNTO
23952: IFFALSE 24202
// begin side := GetSide ( minersList [ i ] ) ;
23954: LD_ADDR_VAR 0 3
23958: PUSH
23959: LD_EXP 92
23963: PUSH
23964: LD_VAR 0 1
23968: ARRAY
23969: PPUSH
23970: CALL_OW 255
23974: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23975: LD_ADDR_VAR 0 4
23979: PUSH
23980: LD_EXP 93
23984: PUSH
23985: LD_VAR 0 1
23989: ARRAY
23990: PUSH
23991: LD_VAR 0 2
23995: ARRAY
23996: PUSH
23997: LD_INT 1
23999: ARRAY
24000: PPUSH
24001: LD_EXP 93
24005: PUSH
24006: LD_VAR 0 1
24010: ARRAY
24011: PUSH
24012: LD_VAR 0 2
24016: ARRAY
24017: PUSH
24018: LD_INT 2
24020: ARRAY
24021: PPUSH
24022: CALL_OW 428
24026: ST_TO_ADDR
// if not tmp then
24027: LD_VAR 0 4
24031: NOT
24032: IFFALSE 24036
// continue ;
24034: GO 23951
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24036: LD_VAR 0 4
24040: PUSH
24041: LD_INT 81
24043: PUSH
24044: LD_VAR 0 3
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PPUSH
24053: CALL_OW 69
24057: IN
24058: PUSH
24059: LD_EXP 93
24063: PUSH
24064: LD_VAR 0 1
24068: ARRAY
24069: PUSH
24070: LD_VAR 0 2
24074: ARRAY
24075: PUSH
24076: LD_INT 1
24078: ARRAY
24079: PPUSH
24080: LD_EXP 93
24084: PUSH
24085: LD_VAR 0 1
24089: ARRAY
24090: PUSH
24091: LD_VAR 0 2
24095: ARRAY
24096: PUSH
24097: LD_INT 2
24099: ARRAY
24100: PPUSH
24101: CALL_OW 458
24105: AND
24106: IFFALSE 24200
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24108: LD_EXP 93
24112: PUSH
24113: LD_VAR 0 1
24117: ARRAY
24118: PUSH
24119: LD_VAR 0 2
24123: ARRAY
24124: PUSH
24125: LD_INT 1
24127: ARRAY
24128: PPUSH
24129: LD_EXP 93
24133: PUSH
24134: LD_VAR 0 1
24138: ARRAY
24139: PUSH
24140: LD_VAR 0 2
24144: ARRAY
24145: PUSH
24146: LD_INT 2
24148: ARRAY
24149: PPUSH
24150: LD_VAR 0 3
24154: PPUSH
24155: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24159: LD_ADDR_EXP 93
24163: PUSH
24164: LD_EXP 93
24168: PPUSH
24169: LD_VAR 0 1
24173: PPUSH
24174: LD_EXP 93
24178: PUSH
24179: LD_VAR 0 1
24183: ARRAY
24184: PPUSH
24185: LD_VAR 0 2
24189: PPUSH
24190: CALL_OW 3
24194: PPUSH
24195: CALL_OW 1
24199: ST_TO_ADDR
// end ; end ;
24200: GO 23951
24202: POP
24203: POP
// end ;
24204: GO 23869
24206: POP
24207: POP
// end ;
24208: PPOPN 4
24210: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24211: LD_INT 0
24213: PPUSH
24214: PPUSH
// result := false ;
24215: LD_ADDR_VAR 0 4
24219: PUSH
24220: LD_INT 0
24222: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24223: LD_VAR 0 1
24227: PPUSH
24228: CALL_OW 264
24232: PUSH
24233: LD_INT 81
24235: EQUAL
24236: NOT
24237: IFFALSE 24241
// exit ;
24239: GO 24481
// index := GetElementIndex ( minersList , unit ) ;
24241: LD_ADDR_VAR 0 5
24245: PUSH
24246: LD_EXP 92
24250: PPUSH
24251: LD_VAR 0 1
24255: PPUSH
24256: CALL 30614 0 2
24260: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24261: LD_EXP 93
24265: PUSH
24266: LD_VAR 0 5
24270: ARRAY
24271: PUSH
24272: LD_EXP 94
24276: GREATEREQUAL
24277: IFFALSE 24281
// exit ;
24279: GO 24481
// ComMoveXY ( unit , x , y ) ;
24281: LD_VAR 0 1
24285: PPUSH
24286: LD_VAR 0 2
24290: PPUSH
24291: LD_VAR 0 3
24295: PPUSH
24296: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24300: LD_INT 35
24302: PPUSH
24303: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24307: LD_VAR 0 1
24311: PPUSH
24312: LD_VAR 0 2
24316: PPUSH
24317: LD_VAR 0 3
24321: PPUSH
24322: CALL 61877 0 3
24326: NOT
24327: PUSH
24328: LD_VAR 0 1
24332: PPUSH
24333: CALL_OW 314
24337: AND
24338: IFFALSE 24342
// exit ;
24340: GO 24481
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24342: LD_VAR 0 2
24346: PPUSH
24347: LD_VAR 0 3
24351: PPUSH
24352: CALL_OW 428
24356: PUSH
24357: LD_VAR 0 1
24361: EQUAL
24362: PUSH
24363: LD_VAR 0 1
24367: PPUSH
24368: CALL_OW 314
24372: NOT
24373: AND
24374: IFFALSE 24300
// PlaySoundXY ( x , y , PlantMine ) ;
24376: LD_VAR 0 2
24380: PPUSH
24381: LD_VAR 0 3
24385: PPUSH
24386: LD_STRING PlantMine
24388: PPUSH
24389: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24393: LD_VAR 0 2
24397: PPUSH
24398: LD_VAR 0 3
24402: PPUSH
24403: LD_VAR 0 1
24407: PPUSH
24408: CALL_OW 255
24412: PPUSH
24413: LD_INT 0
24415: PPUSH
24416: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24420: LD_ADDR_EXP 93
24424: PUSH
24425: LD_EXP 93
24429: PPUSH
24430: LD_VAR 0 5
24434: PUSH
24435: LD_EXP 93
24439: PUSH
24440: LD_VAR 0 5
24444: ARRAY
24445: PUSH
24446: LD_INT 1
24448: PLUS
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PPUSH
24454: LD_VAR 0 2
24458: PUSH
24459: LD_VAR 0 3
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PPUSH
24468: CALL 30829 0 3
24472: ST_TO_ADDR
// result := true ;
24473: LD_ADDR_VAR 0 4
24477: PUSH
24478: LD_INT 1
24480: ST_TO_ADDR
// end ;
24481: LD_VAR 0 4
24485: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24486: LD_INT 0
24488: PPUSH
24489: PPUSH
24490: PPUSH
// if not unit in minersList then
24491: LD_VAR 0 1
24495: PUSH
24496: LD_EXP 92
24500: IN
24501: NOT
24502: IFFALSE 24506
// exit ;
24504: GO 24898
// index := GetElementIndex ( minersList , unit ) ;
24506: LD_ADDR_VAR 0 6
24510: PUSH
24511: LD_EXP 92
24515: PPUSH
24516: LD_VAR 0 1
24520: PPUSH
24521: CALL 30614 0 2
24525: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24526: LD_ADDR_VAR 0 5
24530: PUSH
24531: DOUBLE
24532: LD_EXP 93
24536: PUSH
24537: LD_VAR 0 6
24541: ARRAY
24542: INC
24543: ST_TO_ADDR
24544: LD_INT 1
24546: PUSH
24547: FOR_DOWNTO
24548: IFFALSE 24709
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24550: LD_EXP 93
24554: PUSH
24555: LD_VAR 0 6
24559: ARRAY
24560: PUSH
24561: LD_VAR 0 5
24565: ARRAY
24566: PUSH
24567: LD_INT 1
24569: ARRAY
24570: PUSH
24571: LD_VAR 0 2
24575: EQUAL
24576: PUSH
24577: LD_EXP 93
24581: PUSH
24582: LD_VAR 0 6
24586: ARRAY
24587: PUSH
24588: LD_VAR 0 5
24592: ARRAY
24593: PUSH
24594: LD_INT 2
24596: ARRAY
24597: PUSH
24598: LD_VAR 0 3
24602: EQUAL
24603: AND
24604: IFFALSE 24707
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24606: LD_EXP 93
24610: PUSH
24611: LD_VAR 0 6
24615: ARRAY
24616: PUSH
24617: LD_VAR 0 5
24621: ARRAY
24622: PUSH
24623: LD_INT 1
24625: ARRAY
24626: PPUSH
24627: LD_EXP 93
24631: PUSH
24632: LD_VAR 0 6
24636: ARRAY
24637: PUSH
24638: LD_VAR 0 5
24642: ARRAY
24643: PUSH
24644: LD_INT 2
24646: ARRAY
24647: PPUSH
24648: LD_VAR 0 1
24652: PPUSH
24653: CALL_OW 255
24657: PPUSH
24658: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24662: LD_ADDR_EXP 93
24666: PUSH
24667: LD_EXP 93
24671: PPUSH
24672: LD_VAR 0 6
24676: PPUSH
24677: LD_EXP 93
24681: PUSH
24682: LD_VAR 0 6
24686: ARRAY
24687: PPUSH
24688: LD_VAR 0 5
24692: PPUSH
24693: CALL_OW 3
24697: PPUSH
24698: CALL_OW 1
24702: ST_TO_ADDR
// exit ;
24703: POP
24704: POP
24705: GO 24898
// end ; end ;
24707: GO 24547
24709: POP
24710: POP
// for i := minerMinesList [ index ] downto 1 do
24711: LD_ADDR_VAR 0 5
24715: PUSH
24716: DOUBLE
24717: LD_EXP 93
24721: PUSH
24722: LD_VAR 0 6
24726: ARRAY
24727: INC
24728: ST_TO_ADDR
24729: LD_INT 1
24731: PUSH
24732: FOR_DOWNTO
24733: IFFALSE 24896
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24735: LD_EXP 93
24739: PUSH
24740: LD_VAR 0 6
24744: ARRAY
24745: PUSH
24746: LD_VAR 0 5
24750: ARRAY
24751: PUSH
24752: LD_INT 1
24754: ARRAY
24755: PPUSH
24756: LD_EXP 93
24760: PUSH
24761: LD_VAR 0 6
24765: ARRAY
24766: PUSH
24767: LD_VAR 0 5
24771: ARRAY
24772: PUSH
24773: LD_INT 2
24775: ARRAY
24776: PPUSH
24777: LD_VAR 0 2
24781: PPUSH
24782: LD_VAR 0 3
24786: PPUSH
24787: CALL_OW 298
24791: PUSH
24792: LD_INT 6
24794: LESS
24795: IFFALSE 24894
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24797: LD_EXP 93
24801: PUSH
24802: LD_VAR 0 6
24806: ARRAY
24807: PUSH
24808: LD_VAR 0 5
24812: ARRAY
24813: PUSH
24814: LD_INT 1
24816: ARRAY
24817: PPUSH
24818: LD_EXP 93
24822: PUSH
24823: LD_VAR 0 6
24827: ARRAY
24828: PUSH
24829: LD_VAR 0 5
24833: ARRAY
24834: PUSH
24835: LD_INT 2
24837: ARRAY
24838: PPUSH
24839: LD_VAR 0 1
24843: PPUSH
24844: CALL_OW 255
24848: PPUSH
24849: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24853: LD_ADDR_EXP 93
24857: PUSH
24858: LD_EXP 93
24862: PPUSH
24863: LD_VAR 0 6
24867: PPUSH
24868: LD_EXP 93
24872: PUSH
24873: LD_VAR 0 6
24877: ARRAY
24878: PPUSH
24879: LD_VAR 0 5
24883: PPUSH
24884: CALL_OW 3
24888: PPUSH
24889: CALL_OW 1
24893: ST_TO_ADDR
// end ; end ;
24894: GO 24732
24896: POP
24897: POP
// end ;
24898: LD_VAR 0 4
24902: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24903: LD_INT 0
24905: PPUSH
24906: PPUSH
24907: PPUSH
24908: PPUSH
24909: PPUSH
24910: PPUSH
24911: PPUSH
24912: PPUSH
24913: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24914: LD_VAR 0 1
24918: PPUSH
24919: CALL_OW 264
24923: PUSH
24924: LD_INT 81
24926: EQUAL
24927: NOT
24928: PUSH
24929: LD_VAR 0 1
24933: PUSH
24934: LD_EXP 92
24938: IN
24939: NOT
24940: OR
24941: IFFALSE 24945
// exit ;
24943: GO 25267
// index := GetElementIndex ( minersList , unit ) ;
24945: LD_ADDR_VAR 0 6
24949: PUSH
24950: LD_EXP 92
24954: PPUSH
24955: LD_VAR 0 1
24959: PPUSH
24960: CALL 30614 0 2
24964: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24965: LD_ADDR_VAR 0 8
24969: PUSH
24970: LD_EXP 94
24974: PUSH
24975: LD_EXP 93
24979: PUSH
24980: LD_VAR 0 6
24984: ARRAY
24985: MINUS
24986: ST_TO_ADDR
// if not minesFreeAmount then
24987: LD_VAR 0 8
24991: NOT
24992: IFFALSE 24996
// exit ;
24994: GO 25267
// tmp := [ ] ;
24996: LD_ADDR_VAR 0 7
25000: PUSH
25001: EMPTY
25002: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25003: LD_ADDR_VAR 0 5
25007: PUSH
25008: DOUBLE
25009: LD_INT 1
25011: DEC
25012: ST_TO_ADDR
25013: LD_VAR 0 8
25017: PUSH
25018: FOR_TO
25019: IFFALSE 25214
// begin _d := rand ( 0 , 5 ) ;
25021: LD_ADDR_VAR 0 11
25025: PUSH
25026: LD_INT 0
25028: PPUSH
25029: LD_INT 5
25031: PPUSH
25032: CALL_OW 12
25036: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25037: LD_ADDR_VAR 0 12
25041: PUSH
25042: LD_INT 2
25044: PPUSH
25045: LD_INT 6
25047: PPUSH
25048: CALL_OW 12
25052: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25053: LD_ADDR_VAR 0 9
25057: PUSH
25058: LD_VAR 0 2
25062: PPUSH
25063: LD_VAR 0 11
25067: PPUSH
25068: LD_VAR 0 12
25072: PPUSH
25073: CALL_OW 272
25077: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25078: LD_ADDR_VAR 0 10
25082: PUSH
25083: LD_VAR 0 3
25087: PPUSH
25088: LD_VAR 0 11
25092: PPUSH
25093: LD_VAR 0 12
25097: PPUSH
25098: CALL_OW 273
25102: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25103: LD_VAR 0 9
25107: PPUSH
25108: LD_VAR 0 10
25112: PPUSH
25113: CALL_OW 488
25117: PUSH
25118: LD_VAR 0 9
25122: PUSH
25123: LD_VAR 0 10
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: PUSH
25132: LD_VAR 0 7
25136: IN
25137: NOT
25138: AND
25139: PUSH
25140: LD_VAR 0 9
25144: PPUSH
25145: LD_VAR 0 10
25149: PPUSH
25150: CALL_OW 458
25154: NOT
25155: AND
25156: IFFALSE 25198
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25158: LD_ADDR_VAR 0 7
25162: PUSH
25163: LD_VAR 0 7
25167: PPUSH
25168: LD_VAR 0 7
25172: PUSH
25173: LD_INT 1
25175: PLUS
25176: PPUSH
25177: LD_VAR 0 9
25181: PUSH
25182: LD_VAR 0 10
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PPUSH
25191: CALL_OW 1
25195: ST_TO_ADDR
25196: GO 25212
// i := i - 1 ;
25198: LD_ADDR_VAR 0 5
25202: PUSH
25203: LD_VAR 0 5
25207: PUSH
25208: LD_INT 1
25210: MINUS
25211: ST_TO_ADDR
// end ;
25212: GO 25018
25214: POP
25215: POP
// for i in tmp do
25216: LD_ADDR_VAR 0 5
25220: PUSH
25221: LD_VAR 0 7
25225: PUSH
25226: FOR_IN
25227: IFFALSE 25265
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25229: LD_VAR 0 1
25233: PPUSH
25234: LD_VAR 0 5
25238: PUSH
25239: LD_INT 1
25241: ARRAY
25242: PPUSH
25243: LD_VAR 0 5
25247: PUSH
25248: LD_INT 2
25250: ARRAY
25251: PPUSH
25252: CALL 24211 0 3
25256: NOT
25257: IFFALSE 25263
// exit ;
25259: POP
25260: POP
25261: GO 25267
25263: GO 25226
25265: POP
25266: POP
// end ;
25267: LD_VAR 0 4
25271: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25272: LD_INT 0
25274: PPUSH
25275: PPUSH
25276: PPUSH
25277: PPUSH
25278: PPUSH
25279: PPUSH
25280: PPUSH
// if not GetClass ( unit ) = class_sniper then
25281: LD_VAR 0 1
25285: PPUSH
25286: CALL_OW 257
25290: PUSH
25291: LD_INT 5
25293: EQUAL
25294: NOT
25295: IFFALSE 25299
// exit ;
25297: GO 25687
// dist := 8 ;
25299: LD_ADDR_VAR 0 5
25303: PUSH
25304: LD_INT 8
25306: ST_TO_ADDR
// viewRange := 12 ;
25307: LD_ADDR_VAR 0 7
25311: PUSH
25312: LD_INT 12
25314: ST_TO_ADDR
// side := GetSide ( unit ) ;
25315: LD_ADDR_VAR 0 6
25319: PUSH
25320: LD_VAR 0 1
25324: PPUSH
25325: CALL_OW 255
25329: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25330: LD_INT 61
25332: PPUSH
25333: LD_VAR 0 6
25337: PPUSH
25338: CALL_OW 321
25342: PUSH
25343: LD_INT 2
25345: EQUAL
25346: IFFALSE 25356
// viewRange := 16 ;
25348: LD_ADDR_VAR 0 7
25352: PUSH
25353: LD_INT 16
25355: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25356: LD_VAR 0 1
25360: PPUSH
25361: LD_VAR 0 2
25365: PPUSH
25366: LD_VAR 0 3
25370: PPUSH
25371: CALL_OW 297
25375: PUSH
25376: LD_VAR 0 5
25380: GREATER
25381: IFFALSE 25460
// begin ComMoveXY ( unit , x , y ) ;
25383: LD_VAR 0 1
25387: PPUSH
25388: LD_VAR 0 2
25392: PPUSH
25393: LD_VAR 0 3
25397: PPUSH
25398: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25402: LD_INT 35
25404: PPUSH
25405: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25409: LD_VAR 0 1
25413: PPUSH
25414: LD_VAR 0 2
25418: PPUSH
25419: LD_VAR 0 3
25423: PPUSH
25424: CALL 61877 0 3
25428: NOT
25429: IFFALSE 25433
// exit ;
25431: GO 25687
// until GetDistUnitXY ( unit , x , y ) < dist ;
25433: LD_VAR 0 1
25437: PPUSH
25438: LD_VAR 0 2
25442: PPUSH
25443: LD_VAR 0 3
25447: PPUSH
25448: CALL_OW 297
25452: PUSH
25453: LD_VAR 0 5
25457: LESS
25458: IFFALSE 25402
// end ; ComTurnXY ( unit , x , y ) ;
25460: LD_VAR 0 1
25464: PPUSH
25465: LD_VAR 0 2
25469: PPUSH
25470: LD_VAR 0 3
25474: PPUSH
25475: CALL_OW 118
// wait ( 5 ) ;
25479: LD_INT 5
25481: PPUSH
25482: CALL_OW 67
// _d := GetDir ( unit ) ;
25486: LD_ADDR_VAR 0 10
25490: PUSH
25491: LD_VAR 0 1
25495: PPUSH
25496: CALL_OW 254
25500: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25501: LD_ADDR_VAR 0 8
25505: PUSH
25506: LD_VAR 0 1
25510: PPUSH
25511: CALL_OW 250
25515: PPUSH
25516: LD_VAR 0 10
25520: PPUSH
25521: LD_VAR 0 5
25525: PPUSH
25526: CALL_OW 272
25530: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25531: LD_ADDR_VAR 0 9
25535: PUSH
25536: LD_VAR 0 1
25540: PPUSH
25541: CALL_OW 251
25545: PPUSH
25546: LD_VAR 0 10
25550: PPUSH
25551: LD_VAR 0 5
25555: PPUSH
25556: CALL_OW 273
25560: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25561: LD_VAR 0 8
25565: PPUSH
25566: LD_VAR 0 9
25570: PPUSH
25571: CALL_OW 488
25575: NOT
25576: IFFALSE 25580
// exit ;
25578: GO 25687
// ComAnimCustom ( unit , 1 ) ;
25580: LD_VAR 0 1
25584: PPUSH
25585: LD_INT 1
25587: PPUSH
25588: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25592: LD_VAR 0 8
25596: PPUSH
25597: LD_VAR 0 9
25601: PPUSH
25602: LD_VAR 0 6
25606: PPUSH
25607: LD_VAR 0 7
25611: PPUSH
25612: CALL_OW 330
// repeat wait ( 1 ) ;
25616: LD_INT 1
25618: PPUSH
25619: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25623: LD_VAR 0 1
25627: PPUSH
25628: CALL_OW 316
25632: PUSH
25633: LD_VAR 0 1
25637: PPUSH
25638: CALL_OW 314
25642: OR
25643: PUSH
25644: LD_VAR 0 1
25648: PPUSH
25649: CALL_OW 302
25653: NOT
25654: OR
25655: PUSH
25656: LD_VAR 0 1
25660: PPUSH
25661: CALL_OW 301
25665: OR
25666: IFFALSE 25616
// RemoveSeeing ( _x , _y , side ) ;
25668: LD_VAR 0 8
25672: PPUSH
25673: LD_VAR 0 9
25677: PPUSH
25678: LD_VAR 0 6
25682: PPUSH
25683: CALL_OW 331
// end ; end_of_file
25687: LD_VAR 0 4
25691: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25692: LD_INT 0
25694: PPUSH
25695: PPUSH
// if exist_mode then
25696: LD_VAR 0 2
25700: IFFALSE 25725
// unit := CreateCharacter ( prefix & ident ) else
25702: LD_ADDR_VAR 0 5
25706: PUSH
25707: LD_VAR 0 3
25711: PUSH
25712: LD_VAR 0 1
25716: STR
25717: PPUSH
25718: CALL_OW 34
25722: ST_TO_ADDR
25723: GO 25740
// unit := NewCharacter ( ident ) ;
25725: LD_ADDR_VAR 0 5
25729: PUSH
25730: LD_VAR 0 1
25734: PPUSH
25735: CALL_OW 25
25739: ST_TO_ADDR
// result := unit ;
25740: LD_ADDR_VAR 0 4
25744: PUSH
25745: LD_VAR 0 5
25749: ST_TO_ADDR
// end ;
25750: LD_VAR 0 4
25754: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25755: LD_INT 0
25757: PPUSH
25758: PPUSH
// if not side or not nation then
25759: LD_VAR 0 1
25763: NOT
25764: PUSH
25765: LD_VAR 0 2
25769: NOT
25770: OR
25771: IFFALSE 25775
// exit ;
25773: GO 26543
// case nation of nation_american :
25775: LD_VAR 0 2
25779: PUSH
25780: LD_INT 1
25782: DOUBLE
25783: EQUAL
25784: IFTRUE 25788
25786: GO 26002
25788: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25789: LD_ADDR_VAR 0 4
25793: PUSH
25794: LD_INT 35
25796: PUSH
25797: LD_INT 45
25799: PUSH
25800: LD_INT 46
25802: PUSH
25803: LD_INT 47
25805: PUSH
25806: LD_INT 82
25808: PUSH
25809: LD_INT 83
25811: PUSH
25812: LD_INT 84
25814: PUSH
25815: LD_INT 85
25817: PUSH
25818: LD_INT 86
25820: PUSH
25821: LD_INT 1
25823: PUSH
25824: LD_INT 2
25826: PUSH
25827: LD_INT 6
25829: PUSH
25830: LD_INT 15
25832: PUSH
25833: LD_INT 16
25835: PUSH
25836: LD_INT 7
25838: PUSH
25839: LD_INT 12
25841: PUSH
25842: LD_INT 13
25844: PUSH
25845: LD_INT 10
25847: PUSH
25848: LD_INT 14
25850: PUSH
25851: LD_INT 20
25853: PUSH
25854: LD_INT 21
25856: PUSH
25857: LD_INT 22
25859: PUSH
25860: LD_INT 25
25862: PUSH
25863: LD_INT 32
25865: PUSH
25866: LD_INT 27
25868: PUSH
25869: LD_INT 36
25871: PUSH
25872: LD_INT 69
25874: PUSH
25875: LD_INT 39
25877: PUSH
25878: LD_INT 34
25880: PUSH
25881: LD_INT 40
25883: PUSH
25884: LD_INT 48
25886: PUSH
25887: LD_INT 49
25889: PUSH
25890: LD_INT 50
25892: PUSH
25893: LD_INT 51
25895: PUSH
25896: LD_INT 52
25898: PUSH
25899: LD_INT 53
25901: PUSH
25902: LD_INT 54
25904: PUSH
25905: LD_INT 55
25907: PUSH
25908: LD_INT 56
25910: PUSH
25911: LD_INT 57
25913: PUSH
25914: LD_INT 58
25916: PUSH
25917: LD_INT 59
25919: PUSH
25920: LD_INT 60
25922: PUSH
25923: LD_INT 61
25925: PUSH
25926: LD_INT 62
25928: PUSH
25929: LD_INT 80
25931: PUSH
25932: LD_INT 82
25934: PUSH
25935: LD_INT 83
25937: PUSH
25938: LD_INT 84
25940: PUSH
25941: LD_INT 85
25943: PUSH
25944: LD_INT 86
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: ST_TO_ADDR
26000: GO 26467
26002: LD_INT 2
26004: DOUBLE
26005: EQUAL
26006: IFTRUE 26010
26008: GO 26236
26010: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26011: LD_ADDR_VAR 0 4
26015: PUSH
26016: LD_INT 35
26018: PUSH
26019: LD_INT 45
26021: PUSH
26022: LD_INT 46
26024: PUSH
26025: LD_INT 47
26027: PUSH
26028: LD_INT 82
26030: PUSH
26031: LD_INT 83
26033: PUSH
26034: LD_INT 84
26036: PUSH
26037: LD_INT 85
26039: PUSH
26040: LD_INT 87
26042: PUSH
26043: LD_INT 70
26045: PUSH
26046: LD_INT 1
26048: PUSH
26049: LD_INT 11
26051: PUSH
26052: LD_INT 3
26054: PUSH
26055: LD_INT 4
26057: PUSH
26058: LD_INT 5
26060: PUSH
26061: LD_INT 6
26063: PUSH
26064: LD_INT 15
26066: PUSH
26067: LD_INT 18
26069: PUSH
26070: LD_INT 7
26072: PUSH
26073: LD_INT 17
26075: PUSH
26076: LD_INT 8
26078: PUSH
26079: LD_INT 20
26081: PUSH
26082: LD_INT 21
26084: PUSH
26085: LD_INT 22
26087: PUSH
26088: LD_INT 72
26090: PUSH
26091: LD_INT 26
26093: PUSH
26094: LD_INT 69
26096: PUSH
26097: LD_INT 39
26099: PUSH
26100: LD_INT 40
26102: PUSH
26103: LD_INT 41
26105: PUSH
26106: LD_INT 42
26108: PUSH
26109: LD_INT 43
26111: PUSH
26112: LD_INT 48
26114: PUSH
26115: LD_INT 49
26117: PUSH
26118: LD_INT 50
26120: PUSH
26121: LD_INT 51
26123: PUSH
26124: LD_INT 52
26126: PUSH
26127: LD_INT 53
26129: PUSH
26130: LD_INT 54
26132: PUSH
26133: LD_INT 55
26135: PUSH
26136: LD_INT 56
26138: PUSH
26139: LD_INT 60
26141: PUSH
26142: LD_INT 61
26144: PUSH
26145: LD_INT 62
26147: PUSH
26148: LD_INT 66
26150: PUSH
26151: LD_INT 67
26153: PUSH
26154: LD_INT 68
26156: PUSH
26157: LD_INT 81
26159: PUSH
26160: LD_INT 82
26162: PUSH
26163: LD_INT 83
26165: PUSH
26166: LD_INT 84
26168: PUSH
26169: LD_INT 85
26171: PUSH
26172: LD_INT 87
26174: PUSH
26175: LD_INT 88
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: ST_TO_ADDR
26234: GO 26467
26236: LD_INT 3
26238: DOUBLE
26239: EQUAL
26240: IFTRUE 26244
26242: GO 26466
26244: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26245: LD_ADDR_VAR 0 4
26249: PUSH
26250: LD_INT 46
26252: PUSH
26253: LD_INT 47
26255: PUSH
26256: LD_INT 1
26258: PUSH
26259: LD_INT 2
26261: PUSH
26262: LD_INT 82
26264: PUSH
26265: LD_INT 83
26267: PUSH
26268: LD_INT 84
26270: PUSH
26271: LD_INT 85
26273: PUSH
26274: LD_INT 86
26276: PUSH
26277: LD_INT 11
26279: PUSH
26280: LD_INT 9
26282: PUSH
26283: LD_INT 20
26285: PUSH
26286: LD_INT 19
26288: PUSH
26289: LD_INT 21
26291: PUSH
26292: LD_INT 24
26294: PUSH
26295: LD_INT 22
26297: PUSH
26298: LD_INT 25
26300: PUSH
26301: LD_INT 28
26303: PUSH
26304: LD_INT 29
26306: PUSH
26307: LD_INT 30
26309: PUSH
26310: LD_INT 31
26312: PUSH
26313: LD_INT 37
26315: PUSH
26316: LD_INT 38
26318: PUSH
26319: LD_INT 32
26321: PUSH
26322: LD_INT 27
26324: PUSH
26325: LD_INT 33
26327: PUSH
26328: LD_INT 69
26330: PUSH
26331: LD_INT 39
26333: PUSH
26334: LD_INT 34
26336: PUSH
26337: LD_INT 40
26339: PUSH
26340: LD_INT 71
26342: PUSH
26343: LD_INT 23
26345: PUSH
26346: LD_INT 44
26348: PUSH
26349: LD_INT 48
26351: PUSH
26352: LD_INT 49
26354: PUSH
26355: LD_INT 50
26357: PUSH
26358: LD_INT 51
26360: PUSH
26361: LD_INT 52
26363: PUSH
26364: LD_INT 53
26366: PUSH
26367: LD_INT 54
26369: PUSH
26370: LD_INT 55
26372: PUSH
26373: LD_INT 56
26375: PUSH
26376: LD_INT 57
26378: PUSH
26379: LD_INT 58
26381: PUSH
26382: LD_INT 59
26384: PUSH
26385: LD_INT 63
26387: PUSH
26388: LD_INT 64
26390: PUSH
26391: LD_INT 65
26393: PUSH
26394: LD_INT 82
26396: PUSH
26397: LD_INT 83
26399: PUSH
26400: LD_INT 84
26402: PUSH
26403: LD_INT 85
26405: PUSH
26406: LD_INT 86
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: ST_TO_ADDR
26464: GO 26467
26466: POP
// if state > - 1 and state < 3 then
26467: LD_VAR 0 3
26471: PUSH
26472: LD_INT 1
26474: NEG
26475: GREATER
26476: PUSH
26477: LD_VAR 0 3
26481: PUSH
26482: LD_INT 3
26484: LESS
26485: AND
26486: IFFALSE 26543
// for i in result do
26488: LD_ADDR_VAR 0 5
26492: PUSH
26493: LD_VAR 0 4
26497: PUSH
26498: FOR_IN
26499: IFFALSE 26541
// if GetTech ( i , side ) <> state then
26501: LD_VAR 0 5
26505: PPUSH
26506: LD_VAR 0 1
26510: PPUSH
26511: CALL_OW 321
26515: PUSH
26516: LD_VAR 0 3
26520: NONEQUAL
26521: IFFALSE 26539
// result := result diff i ;
26523: LD_ADDR_VAR 0 4
26527: PUSH
26528: LD_VAR 0 4
26532: PUSH
26533: LD_VAR 0 5
26537: DIFF
26538: ST_TO_ADDR
26539: GO 26498
26541: POP
26542: POP
// end ;
26543: LD_VAR 0 4
26547: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26548: LD_INT 0
26550: PPUSH
26551: PPUSH
26552: PPUSH
// result := true ;
26553: LD_ADDR_VAR 0 3
26557: PUSH
26558: LD_INT 1
26560: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26561: LD_ADDR_VAR 0 5
26565: PUSH
26566: LD_VAR 0 2
26570: PPUSH
26571: CALL_OW 480
26575: ST_TO_ADDR
// if not tmp then
26576: LD_VAR 0 5
26580: NOT
26581: IFFALSE 26585
// exit ;
26583: GO 26634
// for i in tmp do
26585: LD_ADDR_VAR 0 4
26589: PUSH
26590: LD_VAR 0 5
26594: PUSH
26595: FOR_IN
26596: IFFALSE 26632
// if GetTech ( i , side ) <> state_researched then
26598: LD_VAR 0 4
26602: PPUSH
26603: LD_VAR 0 1
26607: PPUSH
26608: CALL_OW 321
26612: PUSH
26613: LD_INT 2
26615: NONEQUAL
26616: IFFALSE 26630
// begin result := false ;
26618: LD_ADDR_VAR 0 3
26622: PUSH
26623: LD_INT 0
26625: ST_TO_ADDR
// exit ;
26626: POP
26627: POP
26628: GO 26634
// end ;
26630: GO 26595
26632: POP
26633: POP
// end ;
26634: LD_VAR 0 3
26638: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26639: LD_INT 0
26641: PPUSH
26642: PPUSH
26643: PPUSH
26644: PPUSH
26645: PPUSH
26646: PPUSH
26647: PPUSH
26648: PPUSH
26649: PPUSH
26650: PPUSH
26651: PPUSH
26652: PPUSH
26653: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26654: LD_VAR 0 1
26658: NOT
26659: PUSH
26660: LD_VAR 0 1
26664: PPUSH
26665: CALL_OW 257
26669: PUSH
26670: LD_INT 9
26672: NONEQUAL
26673: OR
26674: IFFALSE 26678
// exit ;
26676: GO 27251
// side := GetSide ( unit ) ;
26678: LD_ADDR_VAR 0 9
26682: PUSH
26683: LD_VAR 0 1
26687: PPUSH
26688: CALL_OW 255
26692: ST_TO_ADDR
// tech_space := tech_spacanom ;
26693: LD_ADDR_VAR 0 12
26697: PUSH
26698: LD_INT 29
26700: ST_TO_ADDR
// tech_time := tech_taurad ;
26701: LD_ADDR_VAR 0 13
26705: PUSH
26706: LD_INT 28
26708: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26709: LD_ADDR_VAR 0 11
26713: PUSH
26714: LD_VAR 0 1
26718: PPUSH
26719: CALL_OW 310
26723: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26724: LD_VAR 0 11
26728: PPUSH
26729: CALL_OW 247
26733: PUSH
26734: LD_INT 2
26736: EQUAL
26737: IFFALSE 26741
// exit ;
26739: GO 27251
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26741: LD_ADDR_VAR 0 8
26745: PUSH
26746: LD_INT 81
26748: PUSH
26749: LD_VAR 0 9
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: LD_INT 3
26760: PUSH
26761: LD_INT 21
26763: PUSH
26764: LD_INT 3
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PPUSH
26779: CALL_OW 69
26783: ST_TO_ADDR
// if not tmp then
26784: LD_VAR 0 8
26788: NOT
26789: IFFALSE 26793
// exit ;
26791: GO 27251
// if in_unit then
26793: LD_VAR 0 11
26797: IFFALSE 26821
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26799: LD_ADDR_VAR 0 10
26803: PUSH
26804: LD_VAR 0 8
26808: PPUSH
26809: LD_VAR 0 11
26813: PPUSH
26814: CALL_OW 74
26818: ST_TO_ADDR
26819: GO 26841
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26821: LD_ADDR_VAR 0 10
26825: PUSH
26826: LD_VAR 0 8
26830: PPUSH
26831: LD_VAR 0 1
26835: PPUSH
26836: CALL_OW 74
26840: ST_TO_ADDR
// if not enemy then
26841: LD_VAR 0 10
26845: NOT
26846: IFFALSE 26850
// exit ;
26848: GO 27251
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26850: LD_VAR 0 11
26854: PUSH
26855: LD_VAR 0 11
26859: PPUSH
26860: LD_VAR 0 10
26864: PPUSH
26865: CALL_OW 296
26869: PUSH
26870: LD_INT 13
26872: GREATER
26873: AND
26874: PUSH
26875: LD_VAR 0 1
26879: PPUSH
26880: LD_VAR 0 10
26884: PPUSH
26885: CALL_OW 296
26889: PUSH
26890: LD_INT 12
26892: GREATER
26893: OR
26894: IFFALSE 26898
// exit ;
26896: GO 27251
// missile := [ 1 ] ;
26898: LD_ADDR_VAR 0 14
26902: PUSH
26903: LD_INT 1
26905: PUSH
26906: EMPTY
26907: LIST
26908: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26909: LD_VAR 0 9
26913: PPUSH
26914: LD_VAR 0 12
26918: PPUSH
26919: CALL_OW 325
26923: IFFALSE 26952
// missile := Replace ( missile , missile + 1 , 2 ) ;
26925: LD_ADDR_VAR 0 14
26929: PUSH
26930: LD_VAR 0 14
26934: PPUSH
26935: LD_VAR 0 14
26939: PUSH
26940: LD_INT 1
26942: PLUS
26943: PPUSH
26944: LD_INT 2
26946: PPUSH
26947: CALL_OW 1
26951: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26952: LD_VAR 0 9
26956: PPUSH
26957: LD_VAR 0 13
26961: PPUSH
26962: CALL_OW 325
26966: PUSH
26967: LD_VAR 0 10
26971: PPUSH
26972: CALL_OW 255
26976: PPUSH
26977: LD_VAR 0 13
26981: PPUSH
26982: CALL_OW 325
26986: NOT
26987: AND
26988: IFFALSE 27017
// missile := Replace ( missile , missile + 1 , 3 ) ;
26990: LD_ADDR_VAR 0 14
26994: PUSH
26995: LD_VAR 0 14
26999: PPUSH
27000: LD_VAR 0 14
27004: PUSH
27005: LD_INT 1
27007: PLUS
27008: PPUSH
27009: LD_INT 3
27011: PPUSH
27012: CALL_OW 1
27016: ST_TO_ADDR
// if missile < 2 then
27017: LD_VAR 0 14
27021: PUSH
27022: LD_INT 2
27024: LESS
27025: IFFALSE 27029
// exit ;
27027: GO 27251
// x := GetX ( enemy ) ;
27029: LD_ADDR_VAR 0 4
27033: PUSH
27034: LD_VAR 0 10
27038: PPUSH
27039: CALL_OW 250
27043: ST_TO_ADDR
// y := GetY ( enemy ) ;
27044: LD_ADDR_VAR 0 5
27048: PUSH
27049: LD_VAR 0 10
27053: PPUSH
27054: CALL_OW 251
27058: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27059: LD_ADDR_VAR 0 6
27063: PUSH
27064: LD_VAR 0 4
27068: PUSH
27069: LD_INT 1
27071: NEG
27072: PPUSH
27073: LD_INT 1
27075: PPUSH
27076: CALL_OW 12
27080: PLUS
27081: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27082: LD_ADDR_VAR 0 7
27086: PUSH
27087: LD_VAR 0 5
27091: PUSH
27092: LD_INT 1
27094: NEG
27095: PPUSH
27096: LD_INT 1
27098: PPUSH
27099: CALL_OW 12
27103: PLUS
27104: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27105: LD_VAR 0 6
27109: PPUSH
27110: LD_VAR 0 7
27114: PPUSH
27115: CALL_OW 488
27119: NOT
27120: IFFALSE 27142
// begin _x := x ;
27122: LD_ADDR_VAR 0 6
27126: PUSH
27127: LD_VAR 0 4
27131: ST_TO_ADDR
// _y := y ;
27132: LD_ADDR_VAR 0 7
27136: PUSH
27137: LD_VAR 0 5
27141: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27142: LD_ADDR_VAR 0 3
27146: PUSH
27147: LD_INT 1
27149: PPUSH
27150: LD_VAR 0 14
27154: PPUSH
27155: CALL_OW 12
27159: ST_TO_ADDR
// case i of 1 :
27160: LD_VAR 0 3
27164: PUSH
27165: LD_INT 1
27167: DOUBLE
27168: EQUAL
27169: IFTRUE 27173
27171: GO 27190
27173: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27174: LD_VAR 0 1
27178: PPUSH
27179: LD_VAR 0 10
27183: PPUSH
27184: CALL_OW 115
27188: GO 27251
27190: LD_INT 2
27192: DOUBLE
27193: EQUAL
27194: IFTRUE 27198
27196: GO 27220
27198: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27199: LD_VAR 0 1
27203: PPUSH
27204: LD_VAR 0 6
27208: PPUSH
27209: LD_VAR 0 7
27213: PPUSH
27214: CALL_OW 153
27218: GO 27251
27220: LD_INT 3
27222: DOUBLE
27223: EQUAL
27224: IFTRUE 27228
27226: GO 27250
27228: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27229: LD_VAR 0 1
27233: PPUSH
27234: LD_VAR 0 6
27238: PPUSH
27239: LD_VAR 0 7
27243: PPUSH
27244: CALL_OW 154
27248: GO 27251
27250: POP
// end ;
27251: LD_VAR 0 2
27255: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27256: LD_INT 0
27258: PPUSH
27259: PPUSH
27260: PPUSH
27261: PPUSH
27262: PPUSH
27263: PPUSH
// if not unit or not building then
27264: LD_VAR 0 1
27268: NOT
27269: PUSH
27270: LD_VAR 0 2
27274: NOT
27275: OR
27276: IFFALSE 27280
// exit ;
27278: GO 27438
// x := GetX ( building ) ;
27280: LD_ADDR_VAR 0 5
27284: PUSH
27285: LD_VAR 0 2
27289: PPUSH
27290: CALL_OW 250
27294: ST_TO_ADDR
// y := GetY ( building ) ;
27295: LD_ADDR_VAR 0 6
27299: PUSH
27300: LD_VAR 0 2
27304: PPUSH
27305: CALL_OW 251
27309: ST_TO_ADDR
// for i = 0 to 5 do
27310: LD_ADDR_VAR 0 4
27314: PUSH
27315: DOUBLE
27316: LD_INT 0
27318: DEC
27319: ST_TO_ADDR
27320: LD_INT 5
27322: PUSH
27323: FOR_TO
27324: IFFALSE 27436
// begin _x := ShiftX ( x , i , 3 ) ;
27326: LD_ADDR_VAR 0 7
27330: PUSH
27331: LD_VAR 0 5
27335: PPUSH
27336: LD_VAR 0 4
27340: PPUSH
27341: LD_INT 3
27343: PPUSH
27344: CALL_OW 272
27348: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27349: LD_ADDR_VAR 0 8
27353: PUSH
27354: LD_VAR 0 6
27358: PPUSH
27359: LD_VAR 0 4
27363: PPUSH
27364: LD_INT 3
27366: PPUSH
27367: CALL_OW 273
27371: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27372: LD_VAR 0 7
27376: PPUSH
27377: LD_VAR 0 8
27381: PPUSH
27382: CALL_OW 488
27386: NOT
27387: IFFALSE 27391
// continue ;
27389: GO 27323
// if HexInfo ( _x , _y ) = 0 then
27391: LD_VAR 0 7
27395: PPUSH
27396: LD_VAR 0 8
27400: PPUSH
27401: CALL_OW 428
27405: PUSH
27406: LD_INT 0
27408: EQUAL
27409: IFFALSE 27434
// begin ComMoveXY ( unit , _x , _y ) ;
27411: LD_VAR 0 1
27415: PPUSH
27416: LD_VAR 0 7
27420: PPUSH
27421: LD_VAR 0 8
27425: PPUSH
27426: CALL_OW 111
// exit ;
27430: POP
27431: POP
27432: GO 27438
// end ; end ;
27434: GO 27323
27436: POP
27437: POP
// end ;
27438: LD_VAR 0 3
27442: RET
// export function ScanBase ( side , base_area ) ; begin
27443: LD_INT 0
27445: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27446: LD_ADDR_VAR 0 3
27450: PUSH
27451: LD_VAR 0 2
27455: PPUSH
27456: LD_INT 81
27458: PUSH
27459: LD_VAR 0 1
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PPUSH
27468: CALL_OW 70
27472: ST_TO_ADDR
// end ;
27473: LD_VAR 0 3
27477: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27478: LD_INT 0
27480: PPUSH
27481: PPUSH
27482: PPUSH
27483: PPUSH
// result := false ;
27484: LD_ADDR_VAR 0 2
27488: PUSH
27489: LD_INT 0
27491: ST_TO_ADDR
// side := GetSide ( unit ) ;
27492: LD_ADDR_VAR 0 3
27496: PUSH
27497: LD_VAR 0 1
27501: PPUSH
27502: CALL_OW 255
27506: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27507: LD_ADDR_VAR 0 4
27511: PUSH
27512: LD_VAR 0 1
27516: PPUSH
27517: CALL_OW 248
27521: ST_TO_ADDR
// case nat of 1 :
27522: LD_VAR 0 4
27526: PUSH
27527: LD_INT 1
27529: DOUBLE
27530: EQUAL
27531: IFTRUE 27535
27533: GO 27546
27535: POP
// tech := tech_lassight ; 2 :
27536: LD_ADDR_VAR 0 5
27540: PUSH
27541: LD_INT 12
27543: ST_TO_ADDR
27544: GO 27585
27546: LD_INT 2
27548: DOUBLE
27549: EQUAL
27550: IFTRUE 27554
27552: GO 27565
27554: POP
// tech := tech_mortar ; 3 :
27555: LD_ADDR_VAR 0 5
27559: PUSH
27560: LD_INT 41
27562: ST_TO_ADDR
27563: GO 27585
27565: LD_INT 3
27567: DOUBLE
27568: EQUAL
27569: IFTRUE 27573
27571: GO 27584
27573: POP
// tech := tech_bazooka ; end ;
27574: LD_ADDR_VAR 0 5
27578: PUSH
27579: LD_INT 44
27581: ST_TO_ADDR
27582: GO 27585
27584: POP
// if Researched ( side , tech ) then
27585: LD_VAR 0 3
27589: PPUSH
27590: LD_VAR 0 5
27594: PPUSH
27595: CALL_OW 325
27599: IFFALSE 27626
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27601: LD_ADDR_VAR 0 2
27605: PUSH
27606: LD_INT 5
27608: PUSH
27609: LD_INT 8
27611: PUSH
27612: LD_INT 9
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: LIST
27619: PUSH
27620: LD_VAR 0 4
27624: ARRAY
27625: ST_TO_ADDR
// end ;
27626: LD_VAR 0 2
27630: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27631: LD_INT 0
27633: PPUSH
27634: PPUSH
27635: PPUSH
// if not mines then
27636: LD_VAR 0 2
27640: NOT
27641: IFFALSE 27645
// exit ;
27643: GO 27789
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27645: LD_ADDR_VAR 0 5
27649: PUSH
27650: LD_INT 81
27652: PUSH
27653: LD_VAR 0 1
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 3
27664: PUSH
27665: LD_INT 21
27667: PUSH
27668: LD_INT 3
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PPUSH
27683: CALL_OW 69
27687: ST_TO_ADDR
// for i in mines do
27688: LD_ADDR_VAR 0 4
27692: PUSH
27693: LD_VAR 0 2
27697: PUSH
27698: FOR_IN
27699: IFFALSE 27787
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27701: LD_VAR 0 4
27705: PUSH
27706: LD_INT 1
27708: ARRAY
27709: PPUSH
27710: LD_VAR 0 4
27714: PUSH
27715: LD_INT 2
27717: ARRAY
27718: PPUSH
27719: CALL_OW 458
27723: NOT
27724: IFFALSE 27728
// continue ;
27726: GO 27698
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27728: LD_VAR 0 4
27732: PUSH
27733: LD_INT 1
27735: ARRAY
27736: PPUSH
27737: LD_VAR 0 4
27741: PUSH
27742: LD_INT 2
27744: ARRAY
27745: PPUSH
27746: CALL_OW 428
27750: PUSH
27751: LD_VAR 0 5
27755: IN
27756: IFFALSE 27785
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27758: LD_VAR 0 4
27762: PUSH
27763: LD_INT 1
27765: ARRAY
27766: PPUSH
27767: LD_VAR 0 4
27771: PUSH
27772: LD_INT 2
27774: ARRAY
27775: PPUSH
27776: LD_VAR 0 1
27780: PPUSH
27781: CALL_OW 456
// end ;
27785: GO 27698
27787: POP
27788: POP
// end ;
27789: LD_VAR 0 3
27793: RET
// export function Count ( array ) ; var i ; begin
27794: LD_INT 0
27796: PPUSH
27797: PPUSH
// result := 0 ;
27798: LD_ADDR_VAR 0 2
27802: PUSH
27803: LD_INT 0
27805: ST_TO_ADDR
// for i in array do
27806: LD_ADDR_VAR 0 3
27810: PUSH
27811: LD_VAR 0 1
27815: PUSH
27816: FOR_IN
27817: IFFALSE 27841
// if i then
27819: LD_VAR 0 3
27823: IFFALSE 27839
// result := result + 1 ;
27825: LD_ADDR_VAR 0 2
27829: PUSH
27830: LD_VAR 0 2
27834: PUSH
27835: LD_INT 1
27837: PLUS
27838: ST_TO_ADDR
27839: GO 27816
27841: POP
27842: POP
// end ;
27843: LD_VAR 0 2
27847: RET
// export function IsEmpty ( building ) ; begin
27848: LD_INT 0
27850: PPUSH
// if not building then
27851: LD_VAR 0 1
27855: NOT
27856: IFFALSE 27860
// exit ;
27858: GO 27903
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27860: LD_ADDR_VAR 0 2
27864: PUSH
27865: LD_VAR 0 1
27869: PUSH
27870: LD_INT 22
27872: PUSH
27873: LD_VAR 0 1
27877: PPUSH
27878: CALL_OW 255
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: PUSH
27887: LD_INT 58
27889: PUSH
27890: EMPTY
27891: LIST
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PPUSH
27897: CALL_OW 69
27901: IN
27902: ST_TO_ADDR
// end ;
27903: LD_VAR 0 2
27907: RET
// export function IsNotFull ( building ) ; var places ; begin
27908: LD_INT 0
27910: PPUSH
27911: PPUSH
// if not building then
27912: LD_VAR 0 1
27916: NOT
27917: IFFALSE 27921
// exit ;
27919: GO 28092
// result := false ;
27921: LD_ADDR_VAR 0 2
27925: PUSH
27926: LD_INT 0
27928: ST_TO_ADDR
// places := 0 ;
27929: LD_ADDR_VAR 0 3
27933: PUSH
27934: LD_INT 0
27936: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
27937: LD_VAR 0 1
27941: PPUSH
27942: CALL_OW 266
27946: PUSH
27947: LD_INT 0
27949: DOUBLE
27950: EQUAL
27951: IFTRUE 28009
27953: LD_INT 1
27955: DOUBLE
27956: EQUAL
27957: IFTRUE 28009
27959: LD_INT 6
27961: DOUBLE
27962: EQUAL
27963: IFTRUE 28009
27965: LD_INT 7
27967: DOUBLE
27968: EQUAL
27969: IFTRUE 28009
27971: LD_INT 8
27973: DOUBLE
27974: EQUAL
27975: IFTRUE 28009
27977: LD_INT 4
27979: DOUBLE
27980: EQUAL
27981: IFTRUE 28009
27983: LD_INT 5
27985: DOUBLE
27986: EQUAL
27987: IFTRUE 28009
27989: LD_INT 2
27991: DOUBLE
27992: EQUAL
27993: IFTRUE 28009
27995: LD_INT 3
27997: DOUBLE
27998: EQUAL
27999: IFTRUE 28009
28001: LD_INT 35
28003: DOUBLE
28004: EQUAL
28005: IFTRUE 28009
28007: GO 28020
28009: POP
// places := 6 ; b_bunker , b_breastwork :
28010: LD_ADDR_VAR 0 3
28014: PUSH
28015: LD_INT 6
28017: ST_TO_ADDR
28018: GO 28065
28020: LD_INT 32
28022: DOUBLE
28023: EQUAL
28024: IFTRUE 28034
28026: LD_INT 31
28028: DOUBLE
28029: EQUAL
28030: IFTRUE 28034
28032: GO 28045
28034: POP
// places := 1 ; b_control_tower :
28035: LD_ADDR_VAR 0 3
28039: PUSH
28040: LD_INT 1
28042: ST_TO_ADDR
28043: GO 28065
28045: LD_INT 36
28047: DOUBLE
28048: EQUAL
28049: IFTRUE 28053
28051: GO 28064
28053: POP
// places := 3 ; end ;
28054: LD_ADDR_VAR 0 3
28058: PUSH
28059: LD_INT 3
28061: ST_TO_ADDR
28062: GO 28065
28064: POP
// if places then
28065: LD_VAR 0 3
28069: IFFALSE 28092
// result := UnitsInside ( building ) < places ;
28071: LD_ADDR_VAR 0 2
28075: PUSH
28076: LD_VAR 0 1
28080: PPUSH
28081: CALL_OW 313
28085: PUSH
28086: LD_VAR 0 3
28090: LESS
28091: ST_TO_ADDR
// end ;
28092: LD_VAR 0 2
28096: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28097: LD_INT 0
28099: PPUSH
28100: PPUSH
28101: PPUSH
28102: PPUSH
// tmp := [ ] ;
28103: LD_ADDR_VAR 0 3
28107: PUSH
28108: EMPTY
28109: ST_TO_ADDR
// list := [ ] ;
28110: LD_ADDR_VAR 0 5
28114: PUSH
28115: EMPTY
28116: ST_TO_ADDR
// for i = 16 to 25 do
28117: LD_ADDR_VAR 0 4
28121: PUSH
28122: DOUBLE
28123: LD_INT 16
28125: DEC
28126: ST_TO_ADDR
28127: LD_INT 25
28129: PUSH
28130: FOR_TO
28131: IFFALSE 28204
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28133: LD_ADDR_VAR 0 3
28137: PUSH
28138: LD_VAR 0 3
28142: PUSH
28143: LD_INT 22
28145: PUSH
28146: LD_VAR 0 1
28150: PPUSH
28151: CALL_OW 255
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 91
28162: PUSH
28163: LD_VAR 0 1
28167: PUSH
28168: LD_INT 6
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: LIST
28175: PUSH
28176: LD_INT 30
28178: PUSH
28179: LD_VAR 0 4
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: LIST
28192: PUSH
28193: EMPTY
28194: LIST
28195: PPUSH
28196: CALL_OW 69
28200: ADD
28201: ST_TO_ADDR
28202: GO 28130
28204: POP
28205: POP
// for i = 1 to tmp do
28206: LD_ADDR_VAR 0 4
28210: PUSH
28211: DOUBLE
28212: LD_INT 1
28214: DEC
28215: ST_TO_ADDR
28216: LD_VAR 0 3
28220: PUSH
28221: FOR_TO
28222: IFFALSE 28310
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28224: LD_ADDR_VAR 0 5
28228: PUSH
28229: LD_VAR 0 5
28233: PUSH
28234: LD_VAR 0 3
28238: PUSH
28239: LD_VAR 0 4
28243: ARRAY
28244: PPUSH
28245: CALL_OW 266
28249: PUSH
28250: LD_VAR 0 3
28254: PUSH
28255: LD_VAR 0 4
28259: ARRAY
28260: PPUSH
28261: CALL_OW 250
28265: PUSH
28266: LD_VAR 0 3
28270: PUSH
28271: LD_VAR 0 4
28275: ARRAY
28276: PPUSH
28277: CALL_OW 251
28281: PUSH
28282: LD_VAR 0 3
28286: PUSH
28287: LD_VAR 0 4
28291: ARRAY
28292: PPUSH
28293: CALL_OW 254
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: PUSH
28304: EMPTY
28305: LIST
28306: ADD
28307: ST_TO_ADDR
28308: GO 28221
28310: POP
28311: POP
// result := list ;
28312: LD_ADDR_VAR 0 2
28316: PUSH
28317: LD_VAR 0 5
28321: ST_TO_ADDR
// end ;
28322: LD_VAR 0 2
28326: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28327: LD_INT 0
28329: PPUSH
28330: PPUSH
28331: PPUSH
28332: PPUSH
28333: PPUSH
28334: PPUSH
28335: PPUSH
// if not factory then
28336: LD_VAR 0 1
28340: NOT
28341: IFFALSE 28345
// exit ;
28343: GO 28938
// if control = control_apeman then
28345: LD_VAR 0 4
28349: PUSH
28350: LD_INT 5
28352: EQUAL
28353: IFFALSE 28462
// begin tmp := UnitsInside ( factory ) ;
28355: LD_ADDR_VAR 0 8
28359: PUSH
28360: LD_VAR 0 1
28364: PPUSH
28365: CALL_OW 313
28369: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28370: LD_VAR 0 8
28374: PPUSH
28375: LD_INT 25
28377: PUSH
28378: LD_INT 12
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PPUSH
28385: CALL_OW 72
28389: NOT
28390: IFFALSE 28400
// control := control_manual ;
28392: LD_ADDR_VAR 0 4
28396: PUSH
28397: LD_INT 1
28399: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28400: LD_ADDR_VAR 0 8
28404: PUSH
28405: LD_VAR 0 1
28409: PPUSH
28410: CALL 28097 0 1
28414: ST_TO_ADDR
// if tmp then
28415: LD_VAR 0 8
28419: IFFALSE 28462
// begin for i in tmp do
28421: LD_ADDR_VAR 0 7
28425: PUSH
28426: LD_VAR 0 8
28430: PUSH
28431: FOR_IN
28432: IFFALSE 28460
// if i [ 1 ] = b_ext_radio then
28434: LD_VAR 0 7
28438: PUSH
28439: LD_INT 1
28441: ARRAY
28442: PUSH
28443: LD_INT 22
28445: EQUAL
28446: IFFALSE 28458
// begin control := control_remote ;
28448: LD_ADDR_VAR 0 4
28452: PUSH
28453: LD_INT 2
28455: ST_TO_ADDR
// break ;
28456: GO 28460
// end ;
28458: GO 28431
28460: POP
28461: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28462: LD_VAR 0 1
28466: PPUSH
28467: LD_VAR 0 2
28471: PPUSH
28472: LD_VAR 0 3
28476: PPUSH
28477: LD_VAR 0 4
28481: PPUSH
28482: LD_VAR 0 5
28486: PPUSH
28487: CALL_OW 448
28491: IFFALSE 28526
// begin result := [ chassis , engine , control , weapon ] ;
28493: LD_ADDR_VAR 0 6
28497: PUSH
28498: LD_VAR 0 2
28502: PUSH
28503: LD_VAR 0 3
28507: PUSH
28508: LD_VAR 0 4
28512: PUSH
28513: LD_VAR 0 5
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: ST_TO_ADDR
// exit ;
28524: GO 28938
// end ; _chassis := AvailableChassisList ( factory ) ;
28526: LD_ADDR_VAR 0 9
28530: PUSH
28531: LD_VAR 0 1
28535: PPUSH
28536: CALL_OW 475
28540: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28541: LD_ADDR_VAR 0 11
28545: PUSH
28546: LD_VAR 0 1
28550: PPUSH
28551: CALL_OW 476
28555: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28556: LD_ADDR_VAR 0 12
28560: PUSH
28561: LD_VAR 0 1
28565: PPUSH
28566: CALL_OW 477
28570: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28571: LD_ADDR_VAR 0 10
28575: PUSH
28576: LD_VAR 0 1
28580: PPUSH
28581: CALL_OW 478
28585: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28586: LD_VAR 0 9
28590: NOT
28591: PUSH
28592: LD_VAR 0 11
28596: NOT
28597: OR
28598: PUSH
28599: LD_VAR 0 12
28603: NOT
28604: OR
28605: PUSH
28606: LD_VAR 0 10
28610: NOT
28611: OR
28612: IFFALSE 28647
// begin result := [ chassis , engine , control , weapon ] ;
28614: LD_ADDR_VAR 0 6
28618: PUSH
28619: LD_VAR 0 2
28623: PUSH
28624: LD_VAR 0 3
28628: PUSH
28629: LD_VAR 0 4
28633: PUSH
28634: LD_VAR 0 5
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: ST_TO_ADDR
// exit ;
28645: GO 28938
// end ; if not chassis in _chassis then
28647: LD_VAR 0 2
28651: PUSH
28652: LD_VAR 0 9
28656: IN
28657: NOT
28658: IFFALSE 28684
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28660: LD_ADDR_VAR 0 2
28664: PUSH
28665: LD_VAR 0 9
28669: PUSH
28670: LD_INT 1
28672: PPUSH
28673: LD_VAR 0 9
28677: PPUSH
28678: CALL_OW 12
28682: ARRAY
28683: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28684: LD_VAR 0 2
28688: PPUSH
28689: LD_VAR 0 3
28693: PPUSH
28694: CALL 28943 0 2
28698: NOT
28699: IFFALSE 28758
// repeat engine := _engine [ 1 ] ;
28701: LD_ADDR_VAR 0 3
28705: PUSH
28706: LD_VAR 0 11
28710: PUSH
28711: LD_INT 1
28713: ARRAY
28714: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28715: LD_ADDR_VAR 0 11
28719: PUSH
28720: LD_VAR 0 11
28724: PPUSH
28725: LD_INT 1
28727: PPUSH
28728: CALL_OW 3
28732: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28733: LD_VAR 0 2
28737: PPUSH
28738: LD_VAR 0 3
28742: PPUSH
28743: CALL 28943 0 2
28747: PUSH
28748: LD_VAR 0 11
28752: PUSH
28753: EMPTY
28754: EQUAL
28755: OR
28756: IFFALSE 28701
// if not control in _control then
28758: LD_VAR 0 4
28762: PUSH
28763: LD_VAR 0 12
28767: IN
28768: NOT
28769: IFFALSE 28795
// control := _control [ rand ( 1 , _control ) ] ;
28771: LD_ADDR_VAR 0 4
28775: PUSH
28776: LD_VAR 0 12
28780: PUSH
28781: LD_INT 1
28783: PPUSH
28784: LD_VAR 0 12
28788: PPUSH
28789: CALL_OW 12
28793: ARRAY
28794: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28795: LD_VAR 0 2
28799: PPUSH
28800: LD_VAR 0 5
28804: PPUSH
28805: CALL 29163 0 2
28809: NOT
28810: IFFALSE 28869
// repeat weapon := _weapon [ 1 ] ;
28812: LD_ADDR_VAR 0 5
28816: PUSH
28817: LD_VAR 0 10
28821: PUSH
28822: LD_INT 1
28824: ARRAY
28825: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28826: LD_ADDR_VAR 0 10
28830: PUSH
28831: LD_VAR 0 10
28835: PPUSH
28836: LD_INT 1
28838: PPUSH
28839: CALL_OW 3
28843: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28844: LD_VAR 0 2
28848: PPUSH
28849: LD_VAR 0 5
28853: PPUSH
28854: CALL 29163 0 2
28858: PUSH
28859: LD_VAR 0 10
28863: PUSH
28864: EMPTY
28865: EQUAL
28866: OR
28867: IFFALSE 28812
// result := [ ] ;
28869: LD_ADDR_VAR 0 6
28873: PUSH
28874: EMPTY
28875: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28876: LD_VAR 0 1
28880: PPUSH
28881: LD_VAR 0 2
28885: PPUSH
28886: LD_VAR 0 3
28890: PPUSH
28891: LD_VAR 0 4
28895: PPUSH
28896: LD_VAR 0 5
28900: PPUSH
28901: CALL_OW 448
28905: IFFALSE 28938
// result := [ chassis , engine , control , weapon ] ;
28907: LD_ADDR_VAR 0 6
28911: PUSH
28912: LD_VAR 0 2
28916: PUSH
28917: LD_VAR 0 3
28921: PUSH
28922: LD_VAR 0 4
28926: PUSH
28927: LD_VAR 0 5
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: ST_TO_ADDR
// end ;
28938: LD_VAR 0 6
28942: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28943: LD_INT 0
28945: PPUSH
// if not chassis or not engine then
28946: LD_VAR 0 1
28950: NOT
28951: PUSH
28952: LD_VAR 0 2
28956: NOT
28957: OR
28958: IFFALSE 28962
// exit ;
28960: GO 29158
// case engine of engine_solar :
28962: LD_VAR 0 2
28966: PUSH
28967: LD_INT 2
28969: DOUBLE
28970: EQUAL
28971: IFTRUE 28975
28973: GO 29013
28975: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28976: LD_ADDR_VAR 0 3
28980: PUSH
28981: LD_INT 11
28983: PUSH
28984: LD_INT 12
28986: PUSH
28987: LD_INT 13
28989: PUSH
28990: LD_INT 14
28992: PUSH
28993: LD_INT 1
28995: PUSH
28996: LD_INT 2
28998: PUSH
28999: LD_INT 3
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: ST_TO_ADDR
29011: GO 29142
29013: LD_INT 1
29015: DOUBLE
29016: EQUAL
29017: IFTRUE 29021
29019: GO 29083
29021: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29022: LD_ADDR_VAR 0 3
29026: PUSH
29027: LD_INT 11
29029: PUSH
29030: LD_INT 12
29032: PUSH
29033: LD_INT 13
29035: PUSH
29036: LD_INT 14
29038: PUSH
29039: LD_INT 1
29041: PUSH
29042: LD_INT 2
29044: PUSH
29045: LD_INT 3
29047: PUSH
29048: LD_INT 4
29050: PUSH
29051: LD_INT 5
29053: PUSH
29054: LD_INT 21
29056: PUSH
29057: LD_INT 23
29059: PUSH
29060: LD_INT 22
29062: PUSH
29063: LD_INT 24
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: ST_TO_ADDR
29081: GO 29142
29083: LD_INT 3
29085: DOUBLE
29086: EQUAL
29087: IFTRUE 29091
29089: GO 29141
29091: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29092: LD_ADDR_VAR 0 3
29096: PUSH
29097: LD_INT 13
29099: PUSH
29100: LD_INT 14
29102: PUSH
29103: LD_INT 2
29105: PUSH
29106: LD_INT 3
29108: PUSH
29109: LD_INT 4
29111: PUSH
29112: LD_INT 5
29114: PUSH
29115: LD_INT 21
29117: PUSH
29118: LD_INT 22
29120: PUSH
29121: LD_INT 23
29123: PUSH
29124: LD_INT 24
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: ST_TO_ADDR
29139: GO 29142
29141: POP
// result := ( chassis in result ) ;
29142: LD_ADDR_VAR 0 3
29146: PUSH
29147: LD_VAR 0 1
29151: PUSH
29152: LD_VAR 0 3
29156: IN
29157: ST_TO_ADDR
// end ;
29158: LD_VAR 0 3
29162: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29163: LD_INT 0
29165: PPUSH
// if not chassis or not weapon then
29166: LD_VAR 0 1
29170: NOT
29171: PUSH
29172: LD_VAR 0 2
29176: NOT
29177: OR
29178: IFFALSE 29182
// exit ;
29180: GO 30242
// case weapon of us_machine_gun :
29182: LD_VAR 0 2
29186: PUSH
29187: LD_INT 2
29189: DOUBLE
29190: EQUAL
29191: IFTRUE 29195
29193: GO 29225
29195: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29196: LD_ADDR_VAR 0 3
29200: PUSH
29201: LD_INT 1
29203: PUSH
29204: LD_INT 2
29206: PUSH
29207: LD_INT 3
29209: PUSH
29210: LD_INT 4
29212: PUSH
29213: LD_INT 5
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: ST_TO_ADDR
29223: GO 30226
29225: LD_INT 3
29227: DOUBLE
29228: EQUAL
29229: IFTRUE 29233
29231: GO 29263
29233: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29234: LD_ADDR_VAR 0 3
29238: PUSH
29239: LD_INT 1
29241: PUSH
29242: LD_INT 2
29244: PUSH
29245: LD_INT 3
29247: PUSH
29248: LD_INT 4
29250: PUSH
29251: LD_INT 5
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: ST_TO_ADDR
29261: GO 30226
29263: LD_INT 11
29265: DOUBLE
29266: EQUAL
29267: IFTRUE 29271
29269: GO 29301
29271: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29272: LD_ADDR_VAR 0 3
29276: PUSH
29277: LD_INT 1
29279: PUSH
29280: LD_INT 2
29282: PUSH
29283: LD_INT 3
29285: PUSH
29286: LD_INT 4
29288: PUSH
29289: LD_INT 5
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: ST_TO_ADDR
29299: GO 30226
29301: LD_INT 4
29303: DOUBLE
29304: EQUAL
29305: IFTRUE 29309
29307: GO 29335
29309: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29310: LD_ADDR_VAR 0 3
29314: PUSH
29315: LD_INT 2
29317: PUSH
29318: LD_INT 3
29320: PUSH
29321: LD_INT 4
29323: PUSH
29324: LD_INT 5
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: LIST
29331: LIST
29332: ST_TO_ADDR
29333: GO 30226
29335: LD_INT 5
29337: DOUBLE
29338: EQUAL
29339: IFTRUE 29343
29341: GO 29369
29343: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29344: LD_ADDR_VAR 0 3
29348: PUSH
29349: LD_INT 2
29351: PUSH
29352: LD_INT 3
29354: PUSH
29355: LD_INT 4
29357: PUSH
29358: LD_INT 5
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: ST_TO_ADDR
29367: GO 30226
29369: LD_INT 9
29371: DOUBLE
29372: EQUAL
29373: IFTRUE 29377
29375: GO 29403
29377: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29378: LD_ADDR_VAR 0 3
29382: PUSH
29383: LD_INT 2
29385: PUSH
29386: LD_INT 3
29388: PUSH
29389: LD_INT 4
29391: PUSH
29392: LD_INT 5
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: ST_TO_ADDR
29401: GO 30226
29403: LD_INT 7
29405: DOUBLE
29406: EQUAL
29407: IFTRUE 29411
29409: GO 29437
29411: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29412: LD_ADDR_VAR 0 3
29416: PUSH
29417: LD_INT 2
29419: PUSH
29420: LD_INT 3
29422: PUSH
29423: LD_INT 4
29425: PUSH
29426: LD_INT 5
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: ST_TO_ADDR
29435: GO 30226
29437: LD_INT 12
29439: DOUBLE
29440: EQUAL
29441: IFTRUE 29445
29443: GO 29471
29445: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29446: LD_ADDR_VAR 0 3
29450: PUSH
29451: LD_INT 2
29453: PUSH
29454: LD_INT 3
29456: PUSH
29457: LD_INT 4
29459: PUSH
29460: LD_INT 5
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: LIST
29467: LIST
29468: ST_TO_ADDR
29469: GO 30226
29471: LD_INT 13
29473: DOUBLE
29474: EQUAL
29475: IFTRUE 29479
29477: GO 29505
29479: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29480: LD_ADDR_VAR 0 3
29484: PUSH
29485: LD_INT 2
29487: PUSH
29488: LD_INT 3
29490: PUSH
29491: LD_INT 4
29493: PUSH
29494: LD_INT 5
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: ST_TO_ADDR
29503: GO 30226
29505: LD_INT 14
29507: DOUBLE
29508: EQUAL
29509: IFTRUE 29513
29511: GO 29531
29513: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29514: LD_ADDR_VAR 0 3
29518: PUSH
29519: LD_INT 4
29521: PUSH
29522: LD_INT 5
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: ST_TO_ADDR
29529: GO 30226
29531: LD_INT 6
29533: DOUBLE
29534: EQUAL
29535: IFTRUE 29539
29537: GO 29557
29539: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29540: LD_ADDR_VAR 0 3
29544: PUSH
29545: LD_INT 4
29547: PUSH
29548: LD_INT 5
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: ST_TO_ADDR
29555: GO 30226
29557: LD_INT 10
29559: DOUBLE
29560: EQUAL
29561: IFTRUE 29565
29563: GO 29583
29565: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29566: LD_ADDR_VAR 0 3
29570: PUSH
29571: LD_INT 4
29573: PUSH
29574: LD_INT 5
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: ST_TO_ADDR
29581: GO 30226
29583: LD_INT 22
29585: DOUBLE
29586: EQUAL
29587: IFTRUE 29591
29589: GO 29617
29591: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29592: LD_ADDR_VAR 0 3
29596: PUSH
29597: LD_INT 11
29599: PUSH
29600: LD_INT 12
29602: PUSH
29603: LD_INT 13
29605: PUSH
29606: LD_INT 14
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: ST_TO_ADDR
29615: GO 30226
29617: LD_INT 23
29619: DOUBLE
29620: EQUAL
29621: IFTRUE 29625
29623: GO 29651
29625: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29626: LD_ADDR_VAR 0 3
29630: PUSH
29631: LD_INT 11
29633: PUSH
29634: LD_INT 12
29636: PUSH
29637: LD_INT 13
29639: PUSH
29640: LD_INT 14
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: ST_TO_ADDR
29649: GO 30226
29651: LD_INT 24
29653: DOUBLE
29654: EQUAL
29655: IFTRUE 29659
29657: GO 29685
29659: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29660: LD_ADDR_VAR 0 3
29664: PUSH
29665: LD_INT 11
29667: PUSH
29668: LD_INT 12
29670: PUSH
29671: LD_INT 13
29673: PUSH
29674: LD_INT 14
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: ST_TO_ADDR
29683: GO 30226
29685: LD_INT 30
29687: DOUBLE
29688: EQUAL
29689: IFTRUE 29693
29691: GO 29719
29693: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29694: LD_ADDR_VAR 0 3
29698: PUSH
29699: LD_INT 11
29701: PUSH
29702: LD_INT 12
29704: PUSH
29705: LD_INT 13
29707: PUSH
29708: LD_INT 14
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: ST_TO_ADDR
29717: GO 30226
29719: LD_INT 25
29721: DOUBLE
29722: EQUAL
29723: IFTRUE 29727
29725: GO 29745
29727: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29728: LD_ADDR_VAR 0 3
29732: PUSH
29733: LD_INT 13
29735: PUSH
29736: LD_INT 14
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: ST_TO_ADDR
29743: GO 30226
29745: LD_INT 27
29747: DOUBLE
29748: EQUAL
29749: IFTRUE 29753
29751: GO 29771
29753: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29754: LD_ADDR_VAR 0 3
29758: PUSH
29759: LD_INT 13
29761: PUSH
29762: LD_INT 14
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: ST_TO_ADDR
29769: GO 30226
29771: LD_INT 92
29773: DOUBLE
29774: EQUAL
29775: IFTRUE 29779
29777: GO 29805
29779: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29780: LD_ADDR_VAR 0 3
29784: PUSH
29785: LD_INT 11
29787: PUSH
29788: LD_INT 12
29790: PUSH
29791: LD_INT 13
29793: PUSH
29794: LD_INT 14
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: ST_TO_ADDR
29803: GO 30226
29805: LD_INT 28
29807: DOUBLE
29808: EQUAL
29809: IFTRUE 29813
29811: GO 29831
29813: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29814: LD_ADDR_VAR 0 3
29818: PUSH
29819: LD_INT 13
29821: PUSH
29822: LD_INT 14
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: ST_TO_ADDR
29829: GO 30226
29831: LD_INT 29
29833: DOUBLE
29834: EQUAL
29835: IFTRUE 29839
29837: GO 29857
29839: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29840: LD_ADDR_VAR 0 3
29844: PUSH
29845: LD_INT 13
29847: PUSH
29848: LD_INT 14
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: ST_TO_ADDR
29855: GO 30226
29857: LD_INT 31
29859: DOUBLE
29860: EQUAL
29861: IFTRUE 29865
29863: GO 29883
29865: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29866: LD_ADDR_VAR 0 3
29870: PUSH
29871: LD_INT 13
29873: PUSH
29874: LD_INT 14
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: ST_TO_ADDR
29881: GO 30226
29883: LD_INT 26
29885: DOUBLE
29886: EQUAL
29887: IFTRUE 29891
29889: GO 29909
29891: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29892: LD_ADDR_VAR 0 3
29896: PUSH
29897: LD_INT 13
29899: PUSH
29900: LD_INT 14
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: ST_TO_ADDR
29907: GO 30226
29909: LD_INT 42
29911: DOUBLE
29912: EQUAL
29913: IFTRUE 29917
29915: GO 29943
29917: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29918: LD_ADDR_VAR 0 3
29922: PUSH
29923: LD_INT 21
29925: PUSH
29926: LD_INT 22
29928: PUSH
29929: LD_INT 23
29931: PUSH
29932: LD_INT 24
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: ST_TO_ADDR
29941: GO 30226
29943: LD_INT 43
29945: DOUBLE
29946: EQUAL
29947: IFTRUE 29951
29949: GO 29977
29951: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29952: LD_ADDR_VAR 0 3
29956: PUSH
29957: LD_INT 21
29959: PUSH
29960: LD_INT 22
29962: PUSH
29963: LD_INT 23
29965: PUSH
29966: LD_INT 24
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: ST_TO_ADDR
29975: GO 30226
29977: LD_INT 44
29979: DOUBLE
29980: EQUAL
29981: IFTRUE 29985
29983: GO 30011
29985: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29986: LD_ADDR_VAR 0 3
29990: PUSH
29991: LD_INT 21
29993: PUSH
29994: LD_INT 22
29996: PUSH
29997: LD_INT 23
29999: PUSH
30000: LD_INT 24
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: ST_TO_ADDR
30009: GO 30226
30011: LD_INT 45
30013: DOUBLE
30014: EQUAL
30015: IFTRUE 30019
30017: GO 30045
30019: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30020: LD_ADDR_VAR 0 3
30024: PUSH
30025: LD_INT 21
30027: PUSH
30028: LD_INT 22
30030: PUSH
30031: LD_INT 23
30033: PUSH
30034: LD_INT 24
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: ST_TO_ADDR
30043: GO 30226
30045: LD_INT 49
30047: DOUBLE
30048: EQUAL
30049: IFTRUE 30053
30051: GO 30079
30053: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30054: LD_ADDR_VAR 0 3
30058: PUSH
30059: LD_INT 21
30061: PUSH
30062: LD_INT 22
30064: PUSH
30065: LD_INT 23
30067: PUSH
30068: LD_INT 24
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: ST_TO_ADDR
30077: GO 30226
30079: LD_INT 51
30081: DOUBLE
30082: EQUAL
30083: IFTRUE 30087
30085: GO 30113
30087: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30088: LD_ADDR_VAR 0 3
30092: PUSH
30093: LD_INT 21
30095: PUSH
30096: LD_INT 22
30098: PUSH
30099: LD_INT 23
30101: PUSH
30102: LD_INT 24
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: ST_TO_ADDR
30111: GO 30226
30113: LD_INT 52
30115: DOUBLE
30116: EQUAL
30117: IFTRUE 30121
30119: GO 30147
30121: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30122: LD_ADDR_VAR 0 3
30126: PUSH
30127: LD_INT 21
30129: PUSH
30130: LD_INT 22
30132: PUSH
30133: LD_INT 23
30135: PUSH
30136: LD_INT 24
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: ST_TO_ADDR
30145: GO 30226
30147: LD_INT 53
30149: DOUBLE
30150: EQUAL
30151: IFTRUE 30155
30153: GO 30173
30155: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30156: LD_ADDR_VAR 0 3
30160: PUSH
30161: LD_INT 23
30163: PUSH
30164: LD_INT 24
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: ST_TO_ADDR
30171: GO 30226
30173: LD_INT 46
30175: DOUBLE
30176: EQUAL
30177: IFTRUE 30181
30179: GO 30199
30181: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30182: LD_ADDR_VAR 0 3
30186: PUSH
30187: LD_INT 23
30189: PUSH
30190: LD_INT 24
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: ST_TO_ADDR
30197: GO 30226
30199: LD_INT 47
30201: DOUBLE
30202: EQUAL
30203: IFTRUE 30207
30205: GO 30225
30207: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30208: LD_ADDR_VAR 0 3
30212: PUSH
30213: LD_INT 23
30215: PUSH
30216: LD_INT 24
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: ST_TO_ADDR
30223: GO 30226
30225: POP
// result := ( chassis in result ) ;
30226: LD_ADDR_VAR 0 3
30230: PUSH
30231: LD_VAR 0 1
30235: PUSH
30236: LD_VAR 0 3
30240: IN
30241: ST_TO_ADDR
// end ;
30242: LD_VAR 0 3
30246: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30247: LD_INT 0
30249: PPUSH
30250: PPUSH
30251: PPUSH
30252: PPUSH
30253: PPUSH
30254: PPUSH
30255: PPUSH
// result := array ;
30256: LD_ADDR_VAR 0 5
30260: PUSH
30261: LD_VAR 0 1
30265: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30266: LD_VAR 0 1
30270: NOT
30271: PUSH
30272: LD_VAR 0 2
30276: NOT
30277: OR
30278: PUSH
30279: LD_VAR 0 3
30283: NOT
30284: OR
30285: PUSH
30286: LD_VAR 0 2
30290: PUSH
30291: LD_VAR 0 1
30295: GREATER
30296: OR
30297: PUSH
30298: LD_VAR 0 3
30302: PUSH
30303: LD_VAR 0 1
30307: GREATER
30308: OR
30309: IFFALSE 30313
// exit ;
30311: GO 30609
// if direction then
30313: LD_VAR 0 4
30317: IFFALSE 30381
// begin d := 1 ;
30319: LD_ADDR_VAR 0 9
30323: PUSH
30324: LD_INT 1
30326: ST_TO_ADDR
// if i_from > i_to then
30327: LD_VAR 0 2
30331: PUSH
30332: LD_VAR 0 3
30336: GREATER
30337: IFFALSE 30363
// length := ( array - i_from ) + i_to else
30339: LD_ADDR_VAR 0 11
30343: PUSH
30344: LD_VAR 0 1
30348: PUSH
30349: LD_VAR 0 2
30353: MINUS
30354: PUSH
30355: LD_VAR 0 3
30359: PLUS
30360: ST_TO_ADDR
30361: GO 30379
// length := i_to - i_from ;
30363: LD_ADDR_VAR 0 11
30367: PUSH
30368: LD_VAR 0 3
30372: PUSH
30373: LD_VAR 0 2
30377: MINUS
30378: ST_TO_ADDR
// end else
30379: GO 30442
// begin d := - 1 ;
30381: LD_ADDR_VAR 0 9
30385: PUSH
30386: LD_INT 1
30388: NEG
30389: ST_TO_ADDR
// if i_from > i_to then
30390: LD_VAR 0 2
30394: PUSH
30395: LD_VAR 0 3
30399: GREATER
30400: IFFALSE 30420
// length := i_from - i_to else
30402: LD_ADDR_VAR 0 11
30406: PUSH
30407: LD_VAR 0 2
30411: PUSH
30412: LD_VAR 0 3
30416: MINUS
30417: ST_TO_ADDR
30418: GO 30442
// length := ( array - i_to ) + i_from ;
30420: LD_ADDR_VAR 0 11
30424: PUSH
30425: LD_VAR 0 1
30429: PUSH
30430: LD_VAR 0 3
30434: MINUS
30435: PUSH
30436: LD_VAR 0 2
30440: PLUS
30441: ST_TO_ADDR
// end ; if not length then
30442: LD_VAR 0 11
30446: NOT
30447: IFFALSE 30451
// exit ;
30449: GO 30609
// tmp := array ;
30451: LD_ADDR_VAR 0 10
30455: PUSH
30456: LD_VAR 0 1
30460: ST_TO_ADDR
// for i = 1 to length do
30461: LD_ADDR_VAR 0 6
30465: PUSH
30466: DOUBLE
30467: LD_INT 1
30469: DEC
30470: ST_TO_ADDR
30471: LD_VAR 0 11
30475: PUSH
30476: FOR_TO
30477: IFFALSE 30597
// begin for j = 1 to array do
30479: LD_ADDR_VAR 0 7
30483: PUSH
30484: DOUBLE
30485: LD_INT 1
30487: DEC
30488: ST_TO_ADDR
30489: LD_VAR 0 1
30493: PUSH
30494: FOR_TO
30495: IFFALSE 30583
// begin k := j + d ;
30497: LD_ADDR_VAR 0 8
30501: PUSH
30502: LD_VAR 0 7
30506: PUSH
30507: LD_VAR 0 9
30511: PLUS
30512: ST_TO_ADDR
// if k > array then
30513: LD_VAR 0 8
30517: PUSH
30518: LD_VAR 0 1
30522: GREATER
30523: IFFALSE 30533
// k := 1 ;
30525: LD_ADDR_VAR 0 8
30529: PUSH
30530: LD_INT 1
30532: ST_TO_ADDR
// if not k then
30533: LD_VAR 0 8
30537: NOT
30538: IFFALSE 30550
// k := array ;
30540: LD_ADDR_VAR 0 8
30544: PUSH
30545: LD_VAR 0 1
30549: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30550: LD_ADDR_VAR 0 10
30554: PUSH
30555: LD_VAR 0 10
30559: PPUSH
30560: LD_VAR 0 8
30564: PPUSH
30565: LD_VAR 0 1
30569: PUSH
30570: LD_VAR 0 7
30574: ARRAY
30575: PPUSH
30576: CALL_OW 1
30580: ST_TO_ADDR
// end ;
30581: GO 30494
30583: POP
30584: POP
// array := tmp ;
30585: LD_ADDR_VAR 0 1
30589: PUSH
30590: LD_VAR 0 10
30594: ST_TO_ADDR
// end ;
30595: GO 30476
30597: POP
30598: POP
// result := array ;
30599: LD_ADDR_VAR 0 5
30603: PUSH
30604: LD_VAR 0 1
30608: ST_TO_ADDR
// end ;
30609: LD_VAR 0 5
30613: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30614: LD_INT 0
30616: PPUSH
30617: PPUSH
// result := 0 ;
30618: LD_ADDR_VAR 0 3
30622: PUSH
30623: LD_INT 0
30625: ST_TO_ADDR
// if not array or not value in array then
30626: LD_VAR 0 1
30630: NOT
30631: PUSH
30632: LD_VAR 0 2
30636: PUSH
30637: LD_VAR 0 1
30641: IN
30642: NOT
30643: OR
30644: IFFALSE 30648
// exit ;
30646: GO 30702
// for i = 1 to array do
30648: LD_ADDR_VAR 0 4
30652: PUSH
30653: DOUBLE
30654: LD_INT 1
30656: DEC
30657: ST_TO_ADDR
30658: LD_VAR 0 1
30662: PUSH
30663: FOR_TO
30664: IFFALSE 30700
// if value = array [ i ] then
30666: LD_VAR 0 2
30670: PUSH
30671: LD_VAR 0 1
30675: PUSH
30676: LD_VAR 0 4
30680: ARRAY
30681: EQUAL
30682: IFFALSE 30698
// begin result := i ;
30684: LD_ADDR_VAR 0 3
30688: PUSH
30689: LD_VAR 0 4
30693: ST_TO_ADDR
// exit ;
30694: POP
30695: POP
30696: GO 30702
// end ;
30698: GO 30663
30700: POP
30701: POP
// end ;
30702: LD_VAR 0 3
30706: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30707: LD_INT 0
30709: PPUSH
// vc_chassis := chassis ;
30710: LD_ADDR_OWVAR 37
30714: PUSH
30715: LD_VAR 0 1
30719: ST_TO_ADDR
// vc_engine := engine ;
30720: LD_ADDR_OWVAR 39
30724: PUSH
30725: LD_VAR 0 2
30729: ST_TO_ADDR
// vc_control := control ;
30730: LD_ADDR_OWVAR 38
30734: PUSH
30735: LD_VAR 0 3
30739: ST_TO_ADDR
// vc_weapon := weapon ;
30740: LD_ADDR_OWVAR 40
30744: PUSH
30745: LD_VAR 0 4
30749: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30750: LD_ADDR_OWVAR 41
30754: PUSH
30755: LD_VAR 0 5
30759: ST_TO_ADDR
// end ;
30760: LD_VAR 0 6
30764: RET
// export function WantPlant ( unit ) ; var task ; begin
30765: LD_INT 0
30767: PPUSH
30768: PPUSH
// result := false ;
30769: LD_ADDR_VAR 0 2
30773: PUSH
30774: LD_INT 0
30776: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30777: LD_ADDR_VAR 0 3
30781: PUSH
30782: LD_VAR 0 1
30786: PPUSH
30787: CALL_OW 437
30791: ST_TO_ADDR
// if task then
30792: LD_VAR 0 3
30796: IFFALSE 30824
// if task [ 1 ] [ 1 ] = p then
30798: LD_VAR 0 3
30802: PUSH
30803: LD_INT 1
30805: ARRAY
30806: PUSH
30807: LD_INT 1
30809: ARRAY
30810: PUSH
30811: LD_STRING p
30813: EQUAL
30814: IFFALSE 30824
// result := true ;
30816: LD_ADDR_VAR 0 2
30820: PUSH
30821: LD_INT 1
30823: ST_TO_ADDR
// end ;
30824: LD_VAR 0 2
30828: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30829: LD_INT 0
30831: PPUSH
30832: PPUSH
30833: PPUSH
30834: PPUSH
// if pos < 1 then
30835: LD_VAR 0 2
30839: PUSH
30840: LD_INT 1
30842: LESS
30843: IFFALSE 30847
// exit ;
30845: GO 31150
// if pos = 1 then
30847: LD_VAR 0 2
30851: PUSH
30852: LD_INT 1
30854: EQUAL
30855: IFFALSE 30888
// result := Replace ( arr , pos [ 1 ] , value ) else
30857: LD_ADDR_VAR 0 4
30861: PUSH
30862: LD_VAR 0 1
30866: PPUSH
30867: LD_VAR 0 2
30871: PUSH
30872: LD_INT 1
30874: ARRAY
30875: PPUSH
30876: LD_VAR 0 3
30880: PPUSH
30881: CALL_OW 1
30885: ST_TO_ADDR
30886: GO 31150
// begin tmp := arr ;
30888: LD_ADDR_VAR 0 6
30892: PUSH
30893: LD_VAR 0 1
30897: ST_TO_ADDR
// s_arr := [ tmp ] ;
30898: LD_ADDR_VAR 0 7
30902: PUSH
30903: LD_VAR 0 6
30907: PUSH
30908: EMPTY
30909: LIST
30910: ST_TO_ADDR
// for i = 1 to pos - 1 do
30911: LD_ADDR_VAR 0 5
30915: PUSH
30916: DOUBLE
30917: LD_INT 1
30919: DEC
30920: ST_TO_ADDR
30921: LD_VAR 0 2
30925: PUSH
30926: LD_INT 1
30928: MINUS
30929: PUSH
30930: FOR_TO
30931: IFFALSE 30976
// begin tmp := tmp [ pos [ i ] ] ;
30933: LD_ADDR_VAR 0 6
30937: PUSH
30938: LD_VAR 0 6
30942: PUSH
30943: LD_VAR 0 2
30947: PUSH
30948: LD_VAR 0 5
30952: ARRAY
30953: ARRAY
30954: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30955: LD_ADDR_VAR 0 7
30959: PUSH
30960: LD_VAR 0 7
30964: PUSH
30965: LD_VAR 0 6
30969: PUSH
30970: EMPTY
30971: LIST
30972: ADD
30973: ST_TO_ADDR
// end ;
30974: GO 30930
30976: POP
30977: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30978: LD_ADDR_VAR 0 6
30982: PUSH
30983: LD_VAR 0 6
30987: PPUSH
30988: LD_VAR 0 2
30992: PUSH
30993: LD_VAR 0 2
30997: ARRAY
30998: PPUSH
30999: LD_VAR 0 3
31003: PPUSH
31004: CALL_OW 1
31008: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31009: LD_ADDR_VAR 0 7
31013: PUSH
31014: LD_VAR 0 7
31018: PPUSH
31019: LD_VAR 0 7
31023: PPUSH
31024: LD_VAR 0 6
31028: PPUSH
31029: CALL_OW 1
31033: ST_TO_ADDR
// for i = s_arr downto 2 do
31034: LD_ADDR_VAR 0 5
31038: PUSH
31039: DOUBLE
31040: LD_VAR 0 7
31044: INC
31045: ST_TO_ADDR
31046: LD_INT 2
31048: PUSH
31049: FOR_DOWNTO
31050: IFFALSE 31134
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31052: LD_ADDR_VAR 0 6
31056: PUSH
31057: LD_VAR 0 7
31061: PUSH
31062: LD_VAR 0 5
31066: PUSH
31067: LD_INT 1
31069: MINUS
31070: ARRAY
31071: PPUSH
31072: LD_VAR 0 2
31076: PUSH
31077: LD_VAR 0 5
31081: PUSH
31082: LD_INT 1
31084: MINUS
31085: ARRAY
31086: PPUSH
31087: LD_VAR 0 7
31091: PUSH
31092: LD_VAR 0 5
31096: ARRAY
31097: PPUSH
31098: CALL_OW 1
31102: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31103: LD_ADDR_VAR 0 7
31107: PUSH
31108: LD_VAR 0 7
31112: PPUSH
31113: LD_VAR 0 5
31117: PUSH
31118: LD_INT 1
31120: MINUS
31121: PPUSH
31122: LD_VAR 0 6
31126: PPUSH
31127: CALL_OW 1
31131: ST_TO_ADDR
// end ;
31132: GO 31049
31134: POP
31135: POP
// result := s_arr [ 1 ] ;
31136: LD_ADDR_VAR 0 4
31140: PUSH
31141: LD_VAR 0 7
31145: PUSH
31146: LD_INT 1
31148: ARRAY
31149: ST_TO_ADDR
// end ; end ;
31150: LD_VAR 0 4
31154: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31155: LD_INT 0
31157: PPUSH
31158: PPUSH
// if not list then
31159: LD_VAR 0 1
31163: NOT
31164: IFFALSE 31168
// exit ;
31166: GO 31259
// i := list [ pos1 ] ;
31168: LD_ADDR_VAR 0 5
31172: PUSH
31173: LD_VAR 0 1
31177: PUSH
31178: LD_VAR 0 2
31182: ARRAY
31183: ST_TO_ADDR
// if not i then
31184: LD_VAR 0 5
31188: NOT
31189: IFFALSE 31193
// exit ;
31191: GO 31259
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31193: LD_ADDR_VAR 0 1
31197: PUSH
31198: LD_VAR 0 1
31202: PPUSH
31203: LD_VAR 0 2
31207: PPUSH
31208: LD_VAR 0 1
31212: PUSH
31213: LD_VAR 0 3
31217: ARRAY
31218: PPUSH
31219: CALL_OW 1
31223: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31224: LD_ADDR_VAR 0 1
31228: PUSH
31229: LD_VAR 0 1
31233: PPUSH
31234: LD_VAR 0 3
31238: PPUSH
31239: LD_VAR 0 5
31243: PPUSH
31244: CALL_OW 1
31248: ST_TO_ADDR
// result := list ;
31249: LD_ADDR_VAR 0 4
31253: PUSH
31254: LD_VAR 0 1
31258: ST_TO_ADDR
// end ;
31259: LD_VAR 0 4
31263: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31264: LD_INT 0
31266: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31267: LD_ADDR_VAR 0 5
31271: PUSH
31272: LD_VAR 0 1
31276: PPUSH
31277: CALL_OW 250
31281: PPUSH
31282: LD_VAR 0 1
31286: PPUSH
31287: CALL_OW 251
31291: PPUSH
31292: LD_VAR 0 2
31296: PPUSH
31297: LD_VAR 0 3
31301: PPUSH
31302: LD_VAR 0 4
31306: PPUSH
31307: CALL 31317 0 5
31311: ST_TO_ADDR
// end ;
31312: LD_VAR 0 5
31316: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31317: LD_INT 0
31319: PPUSH
31320: PPUSH
31321: PPUSH
31322: PPUSH
// if not list then
31323: LD_VAR 0 3
31327: NOT
31328: IFFALSE 31332
// exit ;
31330: GO 31720
// result := [ ] ;
31332: LD_ADDR_VAR 0 6
31336: PUSH
31337: EMPTY
31338: ST_TO_ADDR
// for i in list do
31339: LD_ADDR_VAR 0 7
31343: PUSH
31344: LD_VAR 0 3
31348: PUSH
31349: FOR_IN
31350: IFFALSE 31552
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31352: LD_ADDR_VAR 0 9
31356: PUSH
31357: LD_VAR 0 7
31361: PPUSH
31362: LD_VAR 0 1
31366: PPUSH
31367: LD_VAR 0 2
31371: PPUSH
31372: CALL_OW 297
31376: ST_TO_ADDR
// if not result then
31377: LD_VAR 0 6
31381: NOT
31382: IFFALSE 31408
// result := [ [ i , tmp ] ] else
31384: LD_ADDR_VAR 0 6
31388: PUSH
31389: LD_VAR 0 7
31393: PUSH
31394: LD_VAR 0 9
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: EMPTY
31404: LIST
31405: ST_TO_ADDR
31406: GO 31550
// begin if result [ result ] [ 2 ] < tmp then
31408: LD_VAR 0 6
31412: PUSH
31413: LD_VAR 0 6
31417: ARRAY
31418: PUSH
31419: LD_INT 2
31421: ARRAY
31422: PUSH
31423: LD_VAR 0 9
31427: LESS
31428: IFFALSE 31470
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31430: LD_ADDR_VAR 0 6
31434: PUSH
31435: LD_VAR 0 6
31439: PPUSH
31440: LD_VAR 0 6
31444: PUSH
31445: LD_INT 1
31447: PLUS
31448: PPUSH
31449: LD_VAR 0 7
31453: PUSH
31454: LD_VAR 0 9
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PPUSH
31463: CALL_OW 2
31467: ST_TO_ADDR
31468: GO 31550
// for j = 1 to result do
31470: LD_ADDR_VAR 0 8
31474: PUSH
31475: DOUBLE
31476: LD_INT 1
31478: DEC
31479: ST_TO_ADDR
31480: LD_VAR 0 6
31484: PUSH
31485: FOR_TO
31486: IFFALSE 31548
// begin if tmp < result [ j ] [ 2 ] then
31488: LD_VAR 0 9
31492: PUSH
31493: LD_VAR 0 6
31497: PUSH
31498: LD_VAR 0 8
31502: ARRAY
31503: PUSH
31504: LD_INT 2
31506: ARRAY
31507: LESS
31508: IFFALSE 31546
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31510: LD_ADDR_VAR 0 6
31514: PUSH
31515: LD_VAR 0 6
31519: PPUSH
31520: LD_VAR 0 8
31524: PPUSH
31525: LD_VAR 0 7
31529: PUSH
31530: LD_VAR 0 9
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PPUSH
31539: CALL_OW 2
31543: ST_TO_ADDR
// break ;
31544: GO 31548
// end ; end ;
31546: GO 31485
31548: POP
31549: POP
// end ; end ;
31550: GO 31349
31552: POP
31553: POP
// if result and not asc then
31554: LD_VAR 0 6
31558: PUSH
31559: LD_VAR 0 4
31563: NOT
31564: AND
31565: IFFALSE 31640
// begin tmp := result ;
31567: LD_ADDR_VAR 0 9
31571: PUSH
31572: LD_VAR 0 6
31576: ST_TO_ADDR
// for i = tmp downto 1 do
31577: LD_ADDR_VAR 0 7
31581: PUSH
31582: DOUBLE
31583: LD_VAR 0 9
31587: INC
31588: ST_TO_ADDR
31589: LD_INT 1
31591: PUSH
31592: FOR_DOWNTO
31593: IFFALSE 31638
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31595: LD_ADDR_VAR 0 6
31599: PUSH
31600: LD_VAR 0 6
31604: PPUSH
31605: LD_VAR 0 9
31609: PUSH
31610: LD_VAR 0 7
31614: MINUS
31615: PUSH
31616: LD_INT 1
31618: PLUS
31619: PPUSH
31620: LD_VAR 0 9
31624: PUSH
31625: LD_VAR 0 7
31629: ARRAY
31630: PPUSH
31631: CALL_OW 1
31635: ST_TO_ADDR
31636: GO 31592
31638: POP
31639: POP
// end ; tmp := [ ] ;
31640: LD_ADDR_VAR 0 9
31644: PUSH
31645: EMPTY
31646: ST_TO_ADDR
// if mode then
31647: LD_VAR 0 5
31651: IFFALSE 31720
// begin for i = 1 to result do
31653: LD_ADDR_VAR 0 7
31657: PUSH
31658: DOUBLE
31659: LD_INT 1
31661: DEC
31662: ST_TO_ADDR
31663: LD_VAR 0 6
31667: PUSH
31668: FOR_TO
31669: IFFALSE 31708
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31671: LD_ADDR_VAR 0 9
31675: PUSH
31676: LD_VAR 0 9
31680: PPUSH
31681: LD_VAR 0 7
31685: PPUSH
31686: LD_VAR 0 6
31690: PUSH
31691: LD_VAR 0 7
31695: ARRAY
31696: PUSH
31697: LD_INT 1
31699: ARRAY
31700: PPUSH
31701: CALL_OW 1
31705: ST_TO_ADDR
31706: GO 31668
31708: POP
31709: POP
// result := tmp ;
31710: LD_ADDR_VAR 0 6
31714: PUSH
31715: LD_VAR 0 9
31719: ST_TO_ADDR
// end ; end ;
31720: LD_VAR 0 6
31724: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31725: LD_INT 0
31727: PPUSH
31728: PPUSH
31729: PPUSH
31730: PPUSH
31731: PPUSH
31732: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31733: LD_ADDR_VAR 0 5
31737: PUSH
31738: LD_INT 0
31740: PUSH
31741: LD_INT 0
31743: PUSH
31744: LD_INT 0
31746: PUSH
31747: EMPTY
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: ST_TO_ADDR
// if not x or not y then
31755: LD_VAR 0 2
31759: NOT
31760: PUSH
31761: LD_VAR 0 3
31765: NOT
31766: OR
31767: IFFALSE 31771
// exit ;
31769: GO 33421
// if not range then
31771: LD_VAR 0 4
31775: NOT
31776: IFFALSE 31786
// range := 10 ;
31778: LD_ADDR_VAR 0 4
31782: PUSH
31783: LD_INT 10
31785: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31786: LD_ADDR_VAR 0 8
31790: PUSH
31791: LD_INT 81
31793: PUSH
31794: LD_VAR 0 1
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 92
31805: PUSH
31806: LD_VAR 0 2
31810: PUSH
31811: LD_VAR 0 3
31815: PUSH
31816: LD_VAR 0 4
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 3
31829: PUSH
31830: LD_INT 21
31832: PUSH
31833: LD_INT 3
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: LIST
31848: PPUSH
31849: CALL_OW 69
31853: ST_TO_ADDR
// if not tmp then
31854: LD_VAR 0 8
31858: NOT
31859: IFFALSE 31863
// exit ;
31861: GO 33421
// for i in tmp do
31863: LD_ADDR_VAR 0 6
31867: PUSH
31868: LD_VAR 0 8
31872: PUSH
31873: FOR_IN
31874: IFFALSE 33396
// begin points := [ 0 , 0 , 0 ] ;
31876: LD_ADDR_VAR 0 9
31880: PUSH
31881: LD_INT 0
31883: PUSH
31884: LD_INT 0
31886: PUSH
31887: LD_INT 0
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: LIST
31894: ST_TO_ADDR
// bpoints := 1 ;
31895: LD_ADDR_VAR 0 10
31899: PUSH
31900: LD_INT 1
31902: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31903: LD_VAR 0 6
31907: PPUSH
31908: CALL_OW 247
31912: PUSH
31913: LD_INT 1
31915: DOUBLE
31916: EQUAL
31917: IFTRUE 31921
31919: GO 32499
31921: POP
// begin if GetClass ( i ) = 1 then
31922: LD_VAR 0 6
31926: PPUSH
31927: CALL_OW 257
31931: PUSH
31932: LD_INT 1
31934: EQUAL
31935: IFFALSE 31956
// points := [ 10 , 5 , 3 ] ;
31937: LD_ADDR_VAR 0 9
31941: PUSH
31942: LD_INT 10
31944: PUSH
31945: LD_INT 5
31947: PUSH
31948: LD_INT 3
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: LIST
31955: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31956: LD_VAR 0 6
31960: PPUSH
31961: CALL_OW 257
31965: PUSH
31966: LD_INT 2
31968: PUSH
31969: LD_INT 3
31971: PUSH
31972: LD_INT 4
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: LIST
31979: IN
31980: IFFALSE 32001
// points := [ 3 , 2 , 1 ] ;
31982: LD_ADDR_VAR 0 9
31986: PUSH
31987: LD_INT 3
31989: PUSH
31990: LD_INT 2
31992: PUSH
31993: LD_INT 1
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: LIST
32000: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32001: LD_VAR 0 6
32005: PPUSH
32006: CALL_OW 257
32010: PUSH
32011: LD_INT 5
32013: EQUAL
32014: IFFALSE 32035
// points := [ 130 , 5 , 2 ] ;
32016: LD_ADDR_VAR 0 9
32020: PUSH
32021: LD_INT 130
32023: PUSH
32024: LD_INT 5
32026: PUSH
32027: LD_INT 2
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: LIST
32034: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32035: LD_VAR 0 6
32039: PPUSH
32040: CALL_OW 257
32044: PUSH
32045: LD_INT 8
32047: EQUAL
32048: IFFALSE 32069
// points := [ 35 , 35 , 30 ] ;
32050: LD_ADDR_VAR 0 9
32054: PUSH
32055: LD_INT 35
32057: PUSH
32058: LD_INT 35
32060: PUSH
32061: LD_INT 30
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: LIST
32068: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32069: LD_VAR 0 6
32073: PPUSH
32074: CALL_OW 257
32078: PUSH
32079: LD_INT 9
32081: EQUAL
32082: IFFALSE 32103
// points := [ 20 , 55 , 40 ] ;
32084: LD_ADDR_VAR 0 9
32088: PUSH
32089: LD_INT 20
32091: PUSH
32092: LD_INT 55
32094: PUSH
32095: LD_INT 40
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: LIST
32102: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32103: LD_VAR 0 6
32107: PPUSH
32108: CALL_OW 257
32112: PUSH
32113: LD_INT 12
32115: PUSH
32116: LD_INT 16
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: IN
32123: IFFALSE 32144
// points := [ 5 , 3 , 2 ] ;
32125: LD_ADDR_VAR 0 9
32129: PUSH
32130: LD_INT 5
32132: PUSH
32133: LD_INT 3
32135: PUSH
32136: LD_INT 2
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: LIST
32143: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32144: LD_VAR 0 6
32148: PPUSH
32149: CALL_OW 257
32153: PUSH
32154: LD_INT 17
32156: EQUAL
32157: IFFALSE 32178
// points := [ 100 , 50 , 75 ] ;
32159: LD_ADDR_VAR 0 9
32163: PUSH
32164: LD_INT 100
32166: PUSH
32167: LD_INT 50
32169: PUSH
32170: LD_INT 75
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: LIST
32177: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32178: LD_VAR 0 6
32182: PPUSH
32183: CALL_OW 257
32187: PUSH
32188: LD_INT 15
32190: EQUAL
32191: IFFALSE 32212
// points := [ 10 , 5 , 3 ] ;
32193: LD_ADDR_VAR 0 9
32197: PUSH
32198: LD_INT 10
32200: PUSH
32201: LD_INT 5
32203: PUSH
32204: LD_INT 3
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: LIST
32211: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32212: LD_VAR 0 6
32216: PPUSH
32217: CALL_OW 257
32221: PUSH
32222: LD_INT 14
32224: EQUAL
32225: IFFALSE 32246
// points := [ 10 , 0 , 0 ] ;
32227: LD_ADDR_VAR 0 9
32231: PUSH
32232: LD_INT 10
32234: PUSH
32235: LD_INT 0
32237: PUSH
32238: LD_INT 0
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: LIST
32245: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32246: LD_VAR 0 6
32250: PPUSH
32251: CALL_OW 257
32255: PUSH
32256: LD_INT 11
32258: EQUAL
32259: IFFALSE 32280
// points := [ 30 , 10 , 5 ] ;
32261: LD_ADDR_VAR 0 9
32265: PUSH
32266: LD_INT 30
32268: PUSH
32269: LD_INT 10
32271: PUSH
32272: LD_INT 5
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: LIST
32279: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32280: LD_VAR 0 1
32284: PPUSH
32285: LD_INT 5
32287: PPUSH
32288: CALL_OW 321
32292: PUSH
32293: LD_INT 2
32295: EQUAL
32296: IFFALSE 32313
// bpoints := bpoints * 1.8 ;
32298: LD_ADDR_VAR 0 10
32302: PUSH
32303: LD_VAR 0 10
32307: PUSH
32308: LD_REAL  1.80000000000000E+0000
32311: MUL
32312: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32313: LD_VAR 0 6
32317: PPUSH
32318: CALL_OW 257
32322: PUSH
32323: LD_INT 1
32325: PUSH
32326: LD_INT 2
32328: PUSH
32329: LD_INT 3
32331: PUSH
32332: LD_INT 4
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: IN
32341: PUSH
32342: LD_VAR 0 1
32346: PPUSH
32347: LD_INT 51
32349: PPUSH
32350: CALL_OW 321
32354: PUSH
32355: LD_INT 2
32357: EQUAL
32358: AND
32359: IFFALSE 32376
// bpoints := bpoints * 1.2 ;
32361: LD_ADDR_VAR 0 10
32365: PUSH
32366: LD_VAR 0 10
32370: PUSH
32371: LD_REAL  1.20000000000000E+0000
32374: MUL
32375: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32376: LD_VAR 0 6
32380: PPUSH
32381: CALL_OW 257
32385: PUSH
32386: LD_INT 5
32388: PUSH
32389: LD_INT 7
32391: PUSH
32392: LD_INT 9
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: LIST
32399: IN
32400: PUSH
32401: LD_VAR 0 1
32405: PPUSH
32406: LD_INT 52
32408: PPUSH
32409: CALL_OW 321
32413: PUSH
32414: LD_INT 2
32416: EQUAL
32417: AND
32418: IFFALSE 32435
// bpoints := bpoints * 1.5 ;
32420: LD_ADDR_VAR 0 10
32424: PUSH
32425: LD_VAR 0 10
32429: PUSH
32430: LD_REAL  1.50000000000000E+0000
32433: MUL
32434: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32435: LD_VAR 0 1
32439: PPUSH
32440: LD_INT 66
32442: PPUSH
32443: CALL_OW 321
32447: PUSH
32448: LD_INT 2
32450: EQUAL
32451: IFFALSE 32468
// bpoints := bpoints * 1.1 ;
32453: LD_ADDR_VAR 0 10
32457: PUSH
32458: LD_VAR 0 10
32462: PUSH
32463: LD_REAL  1.10000000000000E+0000
32466: MUL
32467: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32468: LD_ADDR_VAR 0 10
32472: PUSH
32473: LD_VAR 0 10
32477: PUSH
32478: LD_VAR 0 6
32482: PPUSH
32483: LD_INT 1
32485: PPUSH
32486: CALL_OW 259
32490: PUSH
32491: LD_REAL  1.15000000000000E+0000
32494: MUL
32495: MUL
32496: ST_TO_ADDR
// end ; unit_vehicle :
32497: GO 33325
32499: LD_INT 2
32501: DOUBLE
32502: EQUAL
32503: IFTRUE 32507
32505: GO 33313
32507: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32508: LD_VAR 0 6
32512: PPUSH
32513: CALL_OW 264
32517: PUSH
32518: LD_INT 2
32520: PUSH
32521: LD_INT 42
32523: PUSH
32524: LD_INT 24
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: LIST
32531: IN
32532: IFFALSE 32553
// points := [ 25 , 5 , 3 ] ;
32534: LD_ADDR_VAR 0 9
32538: PUSH
32539: LD_INT 25
32541: PUSH
32542: LD_INT 5
32544: PUSH
32545: LD_INT 3
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: LIST
32552: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32553: LD_VAR 0 6
32557: PPUSH
32558: CALL_OW 264
32562: PUSH
32563: LD_INT 4
32565: PUSH
32566: LD_INT 43
32568: PUSH
32569: LD_INT 25
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: LIST
32576: IN
32577: IFFALSE 32598
// points := [ 40 , 15 , 5 ] ;
32579: LD_ADDR_VAR 0 9
32583: PUSH
32584: LD_INT 40
32586: PUSH
32587: LD_INT 15
32589: PUSH
32590: LD_INT 5
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: LIST
32597: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32598: LD_VAR 0 6
32602: PPUSH
32603: CALL_OW 264
32607: PUSH
32608: LD_INT 3
32610: PUSH
32611: LD_INT 23
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: IN
32618: IFFALSE 32639
// points := [ 7 , 25 , 8 ] ;
32620: LD_ADDR_VAR 0 9
32624: PUSH
32625: LD_INT 7
32627: PUSH
32628: LD_INT 25
32630: PUSH
32631: LD_INT 8
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: LIST
32638: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32639: LD_VAR 0 6
32643: PPUSH
32644: CALL_OW 264
32648: PUSH
32649: LD_INT 5
32651: PUSH
32652: LD_INT 27
32654: PUSH
32655: LD_INT 44
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: LIST
32662: IN
32663: IFFALSE 32684
// points := [ 14 , 50 , 16 ] ;
32665: LD_ADDR_VAR 0 9
32669: PUSH
32670: LD_INT 14
32672: PUSH
32673: LD_INT 50
32675: PUSH
32676: LD_INT 16
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: LIST
32683: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32684: LD_VAR 0 6
32688: PPUSH
32689: CALL_OW 264
32693: PUSH
32694: LD_INT 6
32696: PUSH
32697: LD_INT 46
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: IN
32704: IFFALSE 32725
// points := [ 32 , 120 , 70 ] ;
32706: LD_ADDR_VAR 0 9
32710: PUSH
32711: LD_INT 32
32713: PUSH
32714: LD_INT 120
32716: PUSH
32717: LD_INT 70
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: LIST
32724: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32725: LD_VAR 0 6
32729: PPUSH
32730: CALL_OW 264
32734: PUSH
32735: LD_INT 7
32737: PUSH
32738: LD_INT 28
32740: PUSH
32741: LD_INT 45
32743: PUSH
32744: LD_INT 92
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: IN
32753: IFFALSE 32774
// points := [ 35 , 20 , 45 ] ;
32755: LD_ADDR_VAR 0 9
32759: PUSH
32760: LD_INT 35
32762: PUSH
32763: LD_INT 20
32765: PUSH
32766: LD_INT 45
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: LIST
32773: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32774: LD_VAR 0 6
32778: PPUSH
32779: CALL_OW 264
32783: PUSH
32784: LD_INT 47
32786: PUSH
32787: EMPTY
32788: LIST
32789: IN
32790: IFFALSE 32811
// points := [ 67 , 45 , 75 ] ;
32792: LD_ADDR_VAR 0 9
32796: PUSH
32797: LD_INT 67
32799: PUSH
32800: LD_INT 45
32802: PUSH
32803: LD_INT 75
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: LIST
32810: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32811: LD_VAR 0 6
32815: PPUSH
32816: CALL_OW 264
32820: PUSH
32821: LD_INT 26
32823: PUSH
32824: EMPTY
32825: LIST
32826: IN
32827: IFFALSE 32848
// points := [ 120 , 30 , 80 ] ;
32829: LD_ADDR_VAR 0 9
32833: PUSH
32834: LD_INT 120
32836: PUSH
32837: LD_INT 30
32839: PUSH
32840: LD_INT 80
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: LIST
32847: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32848: LD_VAR 0 6
32852: PPUSH
32853: CALL_OW 264
32857: PUSH
32858: LD_INT 22
32860: PUSH
32861: EMPTY
32862: LIST
32863: IN
32864: IFFALSE 32885
// points := [ 40 , 1 , 1 ] ;
32866: LD_ADDR_VAR 0 9
32870: PUSH
32871: LD_INT 40
32873: PUSH
32874: LD_INT 1
32876: PUSH
32877: LD_INT 1
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: LIST
32884: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32885: LD_VAR 0 6
32889: PPUSH
32890: CALL_OW 264
32894: PUSH
32895: LD_INT 29
32897: PUSH
32898: EMPTY
32899: LIST
32900: IN
32901: IFFALSE 32922
// points := [ 70 , 200 , 400 ] ;
32903: LD_ADDR_VAR 0 9
32907: PUSH
32908: LD_INT 70
32910: PUSH
32911: LD_INT 200
32913: PUSH
32914: LD_INT 400
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: LIST
32921: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32922: LD_VAR 0 6
32926: PPUSH
32927: CALL_OW 264
32931: PUSH
32932: LD_INT 14
32934: PUSH
32935: LD_INT 53
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: IN
32942: IFFALSE 32963
// points := [ 40 , 10 , 20 ] ;
32944: LD_ADDR_VAR 0 9
32948: PUSH
32949: LD_INT 40
32951: PUSH
32952: LD_INT 10
32954: PUSH
32955: LD_INT 20
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: LIST
32962: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32963: LD_VAR 0 6
32967: PPUSH
32968: CALL_OW 264
32972: PUSH
32973: LD_INT 9
32975: PUSH
32976: EMPTY
32977: LIST
32978: IN
32979: IFFALSE 33000
// points := [ 5 , 70 , 20 ] ;
32981: LD_ADDR_VAR 0 9
32985: PUSH
32986: LD_INT 5
32988: PUSH
32989: LD_INT 70
32991: PUSH
32992: LD_INT 20
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: LIST
32999: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33000: LD_VAR 0 6
33004: PPUSH
33005: CALL_OW 264
33009: PUSH
33010: LD_INT 10
33012: PUSH
33013: EMPTY
33014: LIST
33015: IN
33016: IFFALSE 33037
// points := [ 35 , 110 , 70 ] ;
33018: LD_ADDR_VAR 0 9
33022: PUSH
33023: LD_INT 35
33025: PUSH
33026: LD_INT 110
33028: PUSH
33029: LD_INT 70
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: LIST
33036: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33037: LD_VAR 0 6
33041: PPUSH
33042: CALL_OW 265
33046: PUSH
33047: LD_INT 25
33049: EQUAL
33050: IFFALSE 33071
// points := [ 80 , 65 , 100 ] ;
33052: LD_ADDR_VAR 0 9
33056: PUSH
33057: LD_INT 80
33059: PUSH
33060: LD_INT 65
33062: PUSH
33063: LD_INT 100
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: LIST
33070: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33071: LD_VAR 0 6
33075: PPUSH
33076: CALL_OW 263
33080: PUSH
33081: LD_INT 1
33083: EQUAL
33084: IFFALSE 33119
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33086: LD_ADDR_VAR 0 10
33090: PUSH
33091: LD_VAR 0 10
33095: PUSH
33096: LD_VAR 0 6
33100: PPUSH
33101: CALL_OW 311
33105: PPUSH
33106: LD_INT 3
33108: PPUSH
33109: CALL_OW 259
33113: PUSH
33114: LD_INT 4
33116: MUL
33117: MUL
33118: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33119: LD_VAR 0 6
33123: PPUSH
33124: CALL_OW 263
33128: PUSH
33129: LD_INT 2
33131: EQUAL
33132: IFFALSE 33183
// begin j := IsControledBy ( i ) ;
33134: LD_ADDR_VAR 0 7
33138: PUSH
33139: LD_VAR 0 6
33143: PPUSH
33144: CALL_OW 312
33148: ST_TO_ADDR
// if j then
33149: LD_VAR 0 7
33153: IFFALSE 33183
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33155: LD_ADDR_VAR 0 10
33159: PUSH
33160: LD_VAR 0 10
33164: PUSH
33165: LD_VAR 0 7
33169: PPUSH
33170: LD_INT 3
33172: PPUSH
33173: CALL_OW 259
33177: PUSH
33178: LD_INT 3
33180: MUL
33181: MUL
33182: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33183: LD_VAR 0 6
33187: PPUSH
33188: CALL_OW 264
33192: PUSH
33193: LD_INT 5
33195: PUSH
33196: LD_INT 6
33198: PUSH
33199: LD_INT 46
33201: PUSH
33202: LD_INT 44
33204: PUSH
33205: LD_INT 47
33207: PUSH
33208: LD_INT 45
33210: PUSH
33211: LD_INT 28
33213: PUSH
33214: LD_INT 7
33216: PUSH
33217: LD_INT 27
33219: PUSH
33220: LD_INT 29
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: IN
33235: PUSH
33236: LD_VAR 0 1
33240: PPUSH
33241: LD_INT 52
33243: PPUSH
33244: CALL_OW 321
33248: PUSH
33249: LD_INT 2
33251: EQUAL
33252: AND
33253: IFFALSE 33270
// bpoints := bpoints * 1.2 ;
33255: LD_ADDR_VAR 0 10
33259: PUSH
33260: LD_VAR 0 10
33264: PUSH
33265: LD_REAL  1.20000000000000E+0000
33268: MUL
33269: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33270: LD_VAR 0 6
33274: PPUSH
33275: CALL_OW 264
33279: PUSH
33280: LD_INT 6
33282: PUSH
33283: LD_INT 46
33285: PUSH
33286: LD_INT 47
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: LIST
33293: IN
33294: IFFALSE 33311
// bpoints := bpoints * 1.2 ;
33296: LD_ADDR_VAR 0 10
33300: PUSH
33301: LD_VAR 0 10
33305: PUSH
33306: LD_REAL  1.20000000000000E+0000
33309: MUL
33310: ST_TO_ADDR
// end ; unit_building :
33311: GO 33325
33313: LD_INT 3
33315: DOUBLE
33316: EQUAL
33317: IFTRUE 33321
33319: GO 33324
33321: POP
// ; end ;
33322: GO 33325
33324: POP
// for j = 1 to 3 do
33325: LD_ADDR_VAR 0 7
33329: PUSH
33330: DOUBLE
33331: LD_INT 1
33333: DEC
33334: ST_TO_ADDR
33335: LD_INT 3
33337: PUSH
33338: FOR_TO
33339: IFFALSE 33392
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33341: LD_ADDR_VAR 0 5
33345: PUSH
33346: LD_VAR 0 5
33350: PPUSH
33351: LD_VAR 0 7
33355: PPUSH
33356: LD_VAR 0 5
33360: PUSH
33361: LD_VAR 0 7
33365: ARRAY
33366: PUSH
33367: LD_VAR 0 9
33371: PUSH
33372: LD_VAR 0 7
33376: ARRAY
33377: PUSH
33378: LD_VAR 0 10
33382: MUL
33383: PLUS
33384: PPUSH
33385: CALL_OW 1
33389: ST_TO_ADDR
33390: GO 33338
33392: POP
33393: POP
// end ;
33394: GO 31873
33396: POP
33397: POP
// result := Replace ( result , 4 , tmp ) ;
33398: LD_ADDR_VAR 0 5
33402: PUSH
33403: LD_VAR 0 5
33407: PPUSH
33408: LD_INT 4
33410: PPUSH
33411: LD_VAR 0 8
33415: PPUSH
33416: CALL_OW 1
33420: ST_TO_ADDR
// end ;
33421: LD_VAR 0 5
33425: RET
// export function DangerAtRange ( unit , range ) ; begin
33426: LD_INT 0
33428: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33429: LD_ADDR_VAR 0 3
33433: PUSH
33434: LD_VAR 0 1
33438: PPUSH
33439: CALL_OW 255
33443: PPUSH
33444: LD_VAR 0 1
33448: PPUSH
33449: CALL_OW 250
33453: PPUSH
33454: LD_VAR 0 1
33458: PPUSH
33459: CALL_OW 251
33463: PPUSH
33464: LD_VAR 0 2
33468: PPUSH
33469: CALL 31725 0 4
33473: ST_TO_ADDR
// end ;
33474: LD_VAR 0 3
33478: RET
// export function DangerInArea ( side , area ) ; begin
33479: LD_INT 0
33481: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33482: LD_ADDR_VAR 0 3
33486: PUSH
33487: LD_VAR 0 2
33491: PPUSH
33492: LD_INT 81
33494: PUSH
33495: LD_VAR 0 1
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PPUSH
33504: CALL_OW 70
33508: ST_TO_ADDR
// end ;
33509: LD_VAR 0 3
33513: RET
// export function IsExtension ( b ) ; begin
33514: LD_INT 0
33516: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33517: LD_ADDR_VAR 0 2
33521: PUSH
33522: LD_VAR 0 1
33526: PUSH
33527: LD_INT 23
33529: PUSH
33530: LD_INT 20
33532: PUSH
33533: LD_INT 22
33535: PUSH
33536: LD_INT 17
33538: PUSH
33539: LD_INT 24
33541: PUSH
33542: LD_INT 21
33544: PUSH
33545: LD_INT 19
33547: PUSH
33548: LD_INT 16
33550: PUSH
33551: LD_INT 25
33553: PUSH
33554: LD_INT 18
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: IN
33569: ST_TO_ADDR
// end ;
33570: LD_VAR 0 2
33574: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33575: LD_INT 0
33577: PPUSH
33578: PPUSH
33579: PPUSH
// result := [ ] ;
33580: LD_ADDR_VAR 0 4
33584: PUSH
33585: EMPTY
33586: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33587: LD_ADDR_VAR 0 5
33591: PUSH
33592: LD_VAR 0 2
33596: PPUSH
33597: LD_INT 21
33599: PUSH
33600: LD_INT 3
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PPUSH
33607: CALL_OW 70
33611: ST_TO_ADDR
// if not tmp then
33612: LD_VAR 0 5
33616: NOT
33617: IFFALSE 33621
// exit ;
33619: GO 33685
// if checkLink then
33621: LD_VAR 0 3
33625: IFFALSE 33675
// begin for i in tmp do
33627: LD_ADDR_VAR 0 6
33631: PUSH
33632: LD_VAR 0 5
33636: PUSH
33637: FOR_IN
33638: IFFALSE 33673
// if GetBase ( i ) <> base then
33640: LD_VAR 0 6
33644: PPUSH
33645: CALL_OW 274
33649: PUSH
33650: LD_VAR 0 1
33654: NONEQUAL
33655: IFFALSE 33671
// ComLinkToBase ( base , i ) ;
33657: LD_VAR 0 1
33661: PPUSH
33662: LD_VAR 0 6
33666: PPUSH
33667: CALL_OW 169
33671: GO 33637
33673: POP
33674: POP
// end ; result := tmp ;
33675: LD_ADDR_VAR 0 4
33679: PUSH
33680: LD_VAR 0 5
33684: ST_TO_ADDR
// end ;
33685: LD_VAR 0 4
33689: RET
// export function ComComplete ( units , b ) ; var i ; begin
33690: LD_INT 0
33692: PPUSH
33693: PPUSH
// if not units then
33694: LD_VAR 0 1
33698: NOT
33699: IFFALSE 33703
// exit ;
33701: GO 33793
// for i in units do
33703: LD_ADDR_VAR 0 4
33707: PUSH
33708: LD_VAR 0 1
33712: PUSH
33713: FOR_IN
33714: IFFALSE 33791
// if BuildingStatus ( b ) = bs_build then
33716: LD_VAR 0 2
33720: PPUSH
33721: CALL_OW 461
33725: PUSH
33726: LD_INT 1
33728: EQUAL
33729: IFFALSE 33789
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33731: LD_VAR 0 4
33735: PPUSH
33736: LD_STRING h
33738: PUSH
33739: LD_VAR 0 2
33743: PPUSH
33744: CALL_OW 250
33748: PUSH
33749: LD_VAR 0 2
33753: PPUSH
33754: CALL_OW 251
33758: PUSH
33759: LD_VAR 0 2
33763: PUSH
33764: LD_INT 0
33766: PUSH
33767: LD_INT 0
33769: PUSH
33770: LD_INT 0
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: PUSH
33782: EMPTY
33783: LIST
33784: PPUSH
33785: CALL_OW 446
33789: GO 33713
33791: POP
33792: POP
// end ;
33793: LD_VAR 0 3
33797: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33798: LD_INT 0
33800: PPUSH
33801: PPUSH
33802: PPUSH
33803: PPUSH
33804: PPUSH
33805: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33806: LD_VAR 0 1
33810: NOT
33811: PUSH
33812: LD_VAR 0 1
33816: PPUSH
33817: CALL_OW 263
33821: PUSH
33822: LD_INT 2
33824: NONEQUAL
33825: OR
33826: IFFALSE 33830
// exit ;
33828: GO 34146
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33830: LD_ADDR_VAR 0 6
33834: PUSH
33835: LD_INT 22
33837: PUSH
33838: LD_VAR 0 1
33842: PPUSH
33843: CALL_OW 255
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 2
33854: PUSH
33855: LD_INT 30
33857: PUSH
33858: LD_INT 36
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 34
33867: PUSH
33868: LD_INT 31
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: LIST
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PPUSH
33884: CALL_OW 69
33888: ST_TO_ADDR
// if not tmp then
33889: LD_VAR 0 6
33893: NOT
33894: IFFALSE 33898
// exit ;
33896: GO 34146
// result := [ ] ;
33898: LD_ADDR_VAR 0 2
33902: PUSH
33903: EMPTY
33904: ST_TO_ADDR
// for i in tmp do
33905: LD_ADDR_VAR 0 3
33909: PUSH
33910: LD_VAR 0 6
33914: PUSH
33915: FOR_IN
33916: IFFALSE 33987
// begin t := UnitsInside ( i ) ;
33918: LD_ADDR_VAR 0 4
33922: PUSH
33923: LD_VAR 0 3
33927: PPUSH
33928: CALL_OW 313
33932: ST_TO_ADDR
// if t then
33933: LD_VAR 0 4
33937: IFFALSE 33985
// for j in t do
33939: LD_ADDR_VAR 0 7
33943: PUSH
33944: LD_VAR 0 4
33948: PUSH
33949: FOR_IN
33950: IFFALSE 33983
// result := Replace ( result , result + 1 , j ) ;
33952: LD_ADDR_VAR 0 2
33956: PUSH
33957: LD_VAR 0 2
33961: PPUSH
33962: LD_VAR 0 2
33966: PUSH
33967: LD_INT 1
33969: PLUS
33970: PPUSH
33971: LD_VAR 0 7
33975: PPUSH
33976: CALL_OW 1
33980: ST_TO_ADDR
33981: GO 33949
33983: POP
33984: POP
// end ;
33985: GO 33915
33987: POP
33988: POP
// if not result then
33989: LD_VAR 0 2
33993: NOT
33994: IFFALSE 33998
// exit ;
33996: GO 34146
// mech := result [ 1 ] ;
33998: LD_ADDR_VAR 0 5
34002: PUSH
34003: LD_VAR 0 2
34007: PUSH
34008: LD_INT 1
34010: ARRAY
34011: ST_TO_ADDR
// if result > 1 then
34012: LD_VAR 0 2
34016: PUSH
34017: LD_INT 1
34019: GREATER
34020: IFFALSE 34132
// begin for i = 2 to result do
34022: LD_ADDR_VAR 0 3
34026: PUSH
34027: DOUBLE
34028: LD_INT 2
34030: DEC
34031: ST_TO_ADDR
34032: LD_VAR 0 2
34036: PUSH
34037: FOR_TO
34038: IFFALSE 34130
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34040: LD_ADDR_VAR 0 4
34044: PUSH
34045: LD_VAR 0 2
34049: PUSH
34050: LD_VAR 0 3
34054: ARRAY
34055: PPUSH
34056: LD_INT 3
34058: PPUSH
34059: CALL_OW 259
34063: PUSH
34064: LD_VAR 0 2
34068: PUSH
34069: LD_VAR 0 3
34073: ARRAY
34074: PPUSH
34075: CALL_OW 432
34079: MINUS
34080: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34081: LD_VAR 0 4
34085: PUSH
34086: LD_VAR 0 5
34090: PPUSH
34091: LD_INT 3
34093: PPUSH
34094: CALL_OW 259
34098: PUSH
34099: LD_VAR 0 5
34103: PPUSH
34104: CALL_OW 432
34108: MINUS
34109: GREATEREQUAL
34110: IFFALSE 34128
// mech := result [ i ] ;
34112: LD_ADDR_VAR 0 5
34116: PUSH
34117: LD_VAR 0 2
34121: PUSH
34122: LD_VAR 0 3
34126: ARRAY
34127: ST_TO_ADDR
// end ;
34128: GO 34037
34130: POP
34131: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34132: LD_VAR 0 1
34136: PPUSH
34137: LD_VAR 0 5
34141: PPUSH
34142: CALL_OW 135
// end ;
34146: LD_VAR 0 2
34150: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34151: LD_INT 0
34153: PPUSH
34154: PPUSH
34155: PPUSH
34156: PPUSH
34157: PPUSH
34158: PPUSH
34159: PPUSH
34160: PPUSH
34161: PPUSH
34162: PPUSH
34163: PPUSH
34164: PPUSH
34165: PPUSH
// result := [ ] ;
34166: LD_ADDR_VAR 0 7
34170: PUSH
34171: EMPTY
34172: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34173: LD_VAR 0 1
34177: PPUSH
34178: CALL_OW 266
34182: PUSH
34183: LD_INT 0
34185: PUSH
34186: LD_INT 1
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: IN
34193: NOT
34194: IFFALSE 34198
// exit ;
34196: GO 35832
// if name then
34198: LD_VAR 0 3
34202: IFFALSE 34218
// SetBName ( base_dep , name ) ;
34204: LD_VAR 0 1
34208: PPUSH
34209: LD_VAR 0 3
34213: PPUSH
34214: CALL_OW 500
// base := GetBase ( base_dep ) ;
34218: LD_ADDR_VAR 0 15
34222: PUSH
34223: LD_VAR 0 1
34227: PPUSH
34228: CALL_OW 274
34232: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34233: LD_ADDR_VAR 0 16
34237: PUSH
34238: LD_VAR 0 1
34242: PPUSH
34243: CALL_OW 255
34247: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34248: LD_ADDR_VAR 0 17
34252: PUSH
34253: LD_VAR 0 1
34257: PPUSH
34258: CALL_OW 248
34262: ST_TO_ADDR
// if sources then
34263: LD_VAR 0 5
34267: IFFALSE 34314
// for i = 1 to 3 do
34269: LD_ADDR_VAR 0 8
34273: PUSH
34274: DOUBLE
34275: LD_INT 1
34277: DEC
34278: ST_TO_ADDR
34279: LD_INT 3
34281: PUSH
34282: FOR_TO
34283: IFFALSE 34312
// AddResourceType ( base , i , sources [ i ] ) ;
34285: LD_VAR 0 15
34289: PPUSH
34290: LD_VAR 0 8
34294: PPUSH
34295: LD_VAR 0 5
34299: PUSH
34300: LD_VAR 0 8
34304: ARRAY
34305: PPUSH
34306: CALL_OW 276
34310: GO 34282
34312: POP
34313: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34314: LD_ADDR_VAR 0 18
34318: PUSH
34319: LD_VAR 0 15
34323: PPUSH
34324: LD_VAR 0 2
34328: PPUSH
34329: LD_INT 1
34331: PPUSH
34332: CALL 33575 0 3
34336: ST_TO_ADDR
// InitHc ;
34337: CALL_OW 19
// InitUc ;
34341: CALL_OW 18
// uc_side := side ;
34345: LD_ADDR_OWVAR 20
34349: PUSH
34350: LD_VAR 0 16
34354: ST_TO_ADDR
// uc_nation := nation ;
34355: LD_ADDR_OWVAR 21
34359: PUSH
34360: LD_VAR 0 17
34364: ST_TO_ADDR
// if buildings then
34365: LD_VAR 0 18
34369: IFFALSE 35691
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34371: LD_ADDR_VAR 0 19
34375: PUSH
34376: LD_VAR 0 18
34380: PPUSH
34381: LD_INT 2
34383: PUSH
34384: LD_INT 30
34386: PUSH
34387: LD_INT 29
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 30
34396: PUSH
34397: LD_INT 30
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: LIST
34408: PPUSH
34409: CALL_OW 72
34413: ST_TO_ADDR
// if tmp then
34414: LD_VAR 0 19
34418: IFFALSE 34466
// for i in tmp do
34420: LD_ADDR_VAR 0 8
34424: PUSH
34425: LD_VAR 0 19
34429: PUSH
34430: FOR_IN
34431: IFFALSE 34464
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34433: LD_VAR 0 8
34437: PPUSH
34438: CALL_OW 250
34442: PPUSH
34443: LD_VAR 0 8
34447: PPUSH
34448: CALL_OW 251
34452: PPUSH
34453: LD_VAR 0 16
34457: PPUSH
34458: CALL_OW 441
34462: GO 34430
34464: POP
34465: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34466: LD_VAR 0 18
34470: PPUSH
34471: LD_INT 2
34473: PUSH
34474: LD_INT 30
34476: PUSH
34477: LD_INT 32
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 30
34486: PUSH
34487: LD_INT 33
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: LIST
34498: PPUSH
34499: CALL_OW 72
34503: IFFALSE 34591
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34505: LD_ADDR_VAR 0 8
34509: PUSH
34510: LD_VAR 0 18
34514: PPUSH
34515: LD_INT 2
34517: PUSH
34518: LD_INT 30
34520: PUSH
34521: LD_INT 32
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 30
34530: PUSH
34531: LD_INT 33
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: LIST
34542: PPUSH
34543: CALL_OW 72
34547: PUSH
34548: FOR_IN
34549: IFFALSE 34589
// begin if not GetBWeapon ( i ) then
34551: LD_VAR 0 8
34555: PPUSH
34556: CALL_OW 269
34560: NOT
34561: IFFALSE 34587
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34563: LD_VAR 0 8
34567: PPUSH
34568: LD_VAR 0 8
34572: PPUSH
34573: LD_VAR 0 2
34577: PPUSH
34578: CALL 35837 0 2
34582: PPUSH
34583: CALL_OW 431
// end ;
34587: GO 34548
34589: POP
34590: POP
// end ; for i = 1 to personel do
34591: LD_ADDR_VAR 0 8
34595: PUSH
34596: DOUBLE
34597: LD_INT 1
34599: DEC
34600: ST_TO_ADDR
34601: LD_VAR 0 6
34605: PUSH
34606: FOR_TO
34607: IFFALSE 35671
// begin if i > 4 then
34609: LD_VAR 0 8
34613: PUSH
34614: LD_INT 4
34616: GREATER
34617: IFFALSE 34621
// break ;
34619: GO 35671
// case i of 1 :
34621: LD_VAR 0 8
34625: PUSH
34626: LD_INT 1
34628: DOUBLE
34629: EQUAL
34630: IFTRUE 34634
34632: GO 34714
34634: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34635: LD_ADDR_VAR 0 12
34639: PUSH
34640: LD_VAR 0 18
34644: PPUSH
34645: LD_INT 22
34647: PUSH
34648: LD_VAR 0 16
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 58
34659: PUSH
34660: EMPTY
34661: LIST
34662: PUSH
34663: LD_INT 2
34665: PUSH
34666: LD_INT 30
34668: PUSH
34669: LD_INT 32
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 30
34678: PUSH
34679: LD_INT 4
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 30
34688: PUSH
34689: LD_INT 5
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: LIST
34706: PPUSH
34707: CALL_OW 72
34711: ST_TO_ADDR
34712: GO 34936
34714: LD_INT 2
34716: DOUBLE
34717: EQUAL
34718: IFTRUE 34722
34720: GO 34784
34722: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34723: LD_ADDR_VAR 0 12
34727: PUSH
34728: LD_VAR 0 18
34732: PPUSH
34733: LD_INT 22
34735: PUSH
34736: LD_VAR 0 16
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 2
34747: PUSH
34748: LD_INT 30
34750: PUSH
34751: LD_INT 0
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 30
34760: PUSH
34761: LD_INT 1
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: LIST
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PPUSH
34777: CALL_OW 72
34781: ST_TO_ADDR
34782: GO 34936
34784: LD_INT 3
34786: DOUBLE
34787: EQUAL
34788: IFTRUE 34792
34790: GO 34854
34792: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34793: LD_ADDR_VAR 0 12
34797: PUSH
34798: LD_VAR 0 18
34802: PPUSH
34803: LD_INT 22
34805: PUSH
34806: LD_VAR 0 16
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 2
34817: PUSH
34818: LD_INT 30
34820: PUSH
34821: LD_INT 2
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 30
34830: PUSH
34831: LD_INT 3
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: LIST
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PPUSH
34847: CALL_OW 72
34851: ST_TO_ADDR
34852: GO 34936
34854: LD_INT 4
34856: DOUBLE
34857: EQUAL
34858: IFTRUE 34862
34860: GO 34935
34862: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34863: LD_ADDR_VAR 0 12
34867: PUSH
34868: LD_VAR 0 18
34872: PPUSH
34873: LD_INT 22
34875: PUSH
34876: LD_VAR 0 16
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 2
34887: PUSH
34888: LD_INT 30
34890: PUSH
34891: LD_INT 6
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 30
34900: PUSH
34901: LD_INT 7
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 30
34910: PUSH
34911: LD_INT 8
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PPUSH
34928: CALL_OW 72
34932: ST_TO_ADDR
34933: GO 34936
34935: POP
// if i = 1 then
34936: LD_VAR 0 8
34940: PUSH
34941: LD_INT 1
34943: EQUAL
34944: IFFALSE 35055
// begin tmp := [ ] ;
34946: LD_ADDR_VAR 0 19
34950: PUSH
34951: EMPTY
34952: ST_TO_ADDR
// for j in f do
34953: LD_ADDR_VAR 0 9
34957: PUSH
34958: LD_VAR 0 12
34962: PUSH
34963: FOR_IN
34964: IFFALSE 35037
// if GetBType ( j ) = b_bunker then
34966: LD_VAR 0 9
34970: PPUSH
34971: CALL_OW 266
34975: PUSH
34976: LD_INT 32
34978: EQUAL
34979: IFFALSE 35006
// tmp := Insert ( tmp , 1 , j ) else
34981: LD_ADDR_VAR 0 19
34985: PUSH
34986: LD_VAR 0 19
34990: PPUSH
34991: LD_INT 1
34993: PPUSH
34994: LD_VAR 0 9
34998: PPUSH
34999: CALL_OW 2
35003: ST_TO_ADDR
35004: GO 35035
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35006: LD_ADDR_VAR 0 19
35010: PUSH
35011: LD_VAR 0 19
35015: PPUSH
35016: LD_VAR 0 19
35020: PUSH
35021: LD_INT 1
35023: PLUS
35024: PPUSH
35025: LD_VAR 0 9
35029: PPUSH
35030: CALL_OW 2
35034: ST_TO_ADDR
35035: GO 34963
35037: POP
35038: POP
// if tmp then
35039: LD_VAR 0 19
35043: IFFALSE 35055
// f := tmp ;
35045: LD_ADDR_VAR 0 12
35049: PUSH
35050: LD_VAR 0 19
35054: ST_TO_ADDR
// end ; x := personel [ i ] ;
35055: LD_ADDR_VAR 0 13
35059: PUSH
35060: LD_VAR 0 6
35064: PUSH
35065: LD_VAR 0 8
35069: ARRAY
35070: ST_TO_ADDR
// if x = - 1 then
35071: LD_VAR 0 13
35075: PUSH
35076: LD_INT 1
35078: NEG
35079: EQUAL
35080: IFFALSE 35289
// begin for j in f do
35082: LD_ADDR_VAR 0 9
35086: PUSH
35087: LD_VAR 0 12
35091: PUSH
35092: FOR_IN
35093: IFFALSE 35285
// repeat InitHc ;
35095: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35099: LD_VAR 0 9
35103: PPUSH
35104: CALL_OW 266
35108: PUSH
35109: LD_INT 5
35111: EQUAL
35112: IFFALSE 35182
// begin if UnitsInside ( j ) < 3 then
35114: LD_VAR 0 9
35118: PPUSH
35119: CALL_OW 313
35123: PUSH
35124: LD_INT 3
35126: LESS
35127: IFFALSE 35163
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35129: LD_INT 0
35131: PPUSH
35132: LD_INT 5
35134: PUSH
35135: LD_INT 8
35137: PUSH
35138: LD_INT 9
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: LIST
35145: PUSH
35146: LD_VAR 0 17
35150: ARRAY
35151: PPUSH
35152: LD_VAR 0 4
35156: PPUSH
35157: CALL_OW 380
35161: GO 35180
// PrepareHuman ( false , i , skill ) ;
35163: LD_INT 0
35165: PPUSH
35166: LD_VAR 0 8
35170: PPUSH
35171: LD_VAR 0 4
35175: PPUSH
35176: CALL_OW 380
// end else
35180: GO 35199
// PrepareHuman ( false , i , skill ) ;
35182: LD_INT 0
35184: PPUSH
35185: LD_VAR 0 8
35189: PPUSH
35190: LD_VAR 0 4
35194: PPUSH
35195: CALL_OW 380
// un := CreateHuman ;
35199: LD_ADDR_VAR 0 14
35203: PUSH
35204: CALL_OW 44
35208: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35209: LD_ADDR_VAR 0 7
35213: PUSH
35214: LD_VAR 0 7
35218: PPUSH
35219: LD_INT 1
35221: PPUSH
35222: LD_VAR 0 14
35226: PPUSH
35227: CALL_OW 2
35231: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35232: LD_VAR 0 14
35236: PPUSH
35237: LD_VAR 0 9
35241: PPUSH
35242: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35246: LD_VAR 0 9
35250: PPUSH
35251: CALL_OW 313
35255: PUSH
35256: LD_INT 6
35258: EQUAL
35259: PUSH
35260: LD_VAR 0 9
35264: PPUSH
35265: CALL_OW 266
35269: PUSH
35270: LD_INT 32
35272: PUSH
35273: LD_INT 31
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: IN
35280: OR
35281: IFFALSE 35095
35283: GO 35092
35285: POP
35286: POP
// end else
35287: GO 35669
// for j = 1 to x do
35289: LD_ADDR_VAR 0 9
35293: PUSH
35294: DOUBLE
35295: LD_INT 1
35297: DEC
35298: ST_TO_ADDR
35299: LD_VAR 0 13
35303: PUSH
35304: FOR_TO
35305: IFFALSE 35667
// begin InitHc ;
35307: CALL_OW 19
// if not f then
35311: LD_VAR 0 12
35315: NOT
35316: IFFALSE 35405
// begin PrepareHuman ( false , i , skill ) ;
35318: LD_INT 0
35320: PPUSH
35321: LD_VAR 0 8
35325: PPUSH
35326: LD_VAR 0 4
35330: PPUSH
35331: CALL_OW 380
// un := CreateHuman ;
35335: LD_ADDR_VAR 0 14
35339: PUSH
35340: CALL_OW 44
35344: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35345: LD_ADDR_VAR 0 7
35349: PUSH
35350: LD_VAR 0 7
35354: PPUSH
35355: LD_INT 1
35357: PPUSH
35358: LD_VAR 0 14
35362: PPUSH
35363: CALL_OW 2
35367: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35368: LD_VAR 0 14
35372: PPUSH
35373: LD_VAR 0 1
35377: PPUSH
35378: CALL_OW 250
35382: PPUSH
35383: LD_VAR 0 1
35387: PPUSH
35388: CALL_OW 251
35392: PPUSH
35393: LD_INT 10
35395: PPUSH
35396: LD_INT 0
35398: PPUSH
35399: CALL_OW 50
// continue ;
35403: GO 35304
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35405: LD_VAR 0 12
35409: PUSH
35410: LD_INT 1
35412: ARRAY
35413: PPUSH
35414: CALL_OW 313
35418: PUSH
35419: LD_VAR 0 12
35423: PUSH
35424: LD_INT 1
35426: ARRAY
35427: PPUSH
35428: CALL_OW 266
35432: PUSH
35433: LD_INT 32
35435: PUSH
35436: LD_INT 31
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: IN
35443: AND
35444: PUSH
35445: LD_VAR 0 12
35449: PUSH
35450: LD_INT 1
35452: ARRAY
35453: PPUSH
35454: CALL_OW 313
35458: PUSH
35459: LD_INT 6
35461: EQUAL
35462: OR
35463: IFFALSE 35483
// f := Delete ( f , 1 ) ;
35465: LD_ADDR_VAR 0 12
35469: PUSH
35470: LD_VAR 0 12
35474: PPUSH
35475: LD_INT 1
35477: PPUSH
35478: CALL_OW 3
35482: ST_TO_ADDR
// if not f then
35483: LD_VAR 0 12
35487: NOT
35488: IFFALSE 35506
// begin x := x + 2 ;
35490: LD_ADDR_VAR 0 13
35494: PUSH
35495: LD_VAR 0 13
35499: PUSH
35500: LD_INT 2
35502: PLUS
35503: ST_TO_ADDR
// continue ;
35504: GO 35304
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35506: LD_VAR 0 12
35510: PUSH
35511: LD_INT 1
35513: ARRAY
35514: PPUSH
35515: CALL_OW 266
35519: PUSH
35520: LD_INT 5
35522: EQUAL
35523: IFFALSE 35597
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35525: LD_VAR 0 12
35529: PUSH
35530: LD_INT 1
35532: ARRAY
35533: PPUSH
35534: CALL_OW 313
35538: PUSH
35539: LD_INT 3
35541: LESS
35542: IFFALSE 35578
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35544: LD_INT 0
35546: PPUSH
35547: LD_INT 5
35549: PUSH
35550: LD_INT 8
35552: PUSH
35553: LD_INT 9
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: LIST
35560: PUSH
35561: LD_VAR 0 17
35565: ARRAY
35566: PPUSH
35567: LD_VAR 0 4
35571: PPUSH
35572: CALL_OW 380
35576: GO 35595
// PrepareHuman ( false , i , skill ) ;
35578: LD_INT 0
35580: PPUSH
35581: LD_VAR 0 8
35585: PPUSH
35586: LD_VAR 0 4
35590: PPUSH
35591: CALL_OW 380
// end else
35595: GO 35614
// PrepareHuman ( false , i , skill ) ;
35597: LD_INT 0
35599: PPUSH
35600: LD_VAR 0 8
35604: PPUSH
35605: LD_VAR 0 4
35609: PPUSH
35610: CALL_OW 380
// un := CreateHuman ;
35614: LD_ADDR_VAR 0 14
35618: PUSH
35619: CALL_OW 44
35623: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35624: LD_ADDR_VAR 0 7
35628: PUSH
35629: LD_VAR 0 7
35633: PPUSH
35634: LD_INT 1
35636: PPUSH
35637: LD_VAR 0 14
35641: PPUSH
35642: CALL_OW 2
35646: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35647: LD_VAR 0 14
35651: PPUSH
35652: LD_VAR 0 12
35656: PUSH
35657: LD_INT 1
35659: ARRAY
35660: PPUSH
35661: CALL_OW 52
// end ;
35665: GO 35304
35667: POP
35668: POP
// end ;
35669: GO 34606
35671: POP
35672: POP
// result := result ^ buildings ;
35673: LD_ADDR_VAR 0 7
35677: PUSH
35678: LD_VAR 0 7
35682: PUSH
35683: LD_VAR 0 18
35687: ADD
35688: ST_TO_ADDR
// end else
35689: GO 35832
// begin for i = 1 to personel do
35691: LD_ADDR_VAR 0 8
35695: PUSH
35696: DOUBLE
35697: LD_INT 1
35699: DEC
35700: ST_TO_ADDR
35701: LD_VAR 0 6
35705: PUSH
35706: FOR_TO
35707: IFFALSE 35830
// begin if i > 4 then
35709: LD_VAR 0 8
35713: PUSH
35714: LD_INT 4
35716: GREATER
35717: IFFALSE 35721
// break ;
35719: GO 35830
// x := personel [ i ] ;
35721: LD_ADDR_VAR 0 13
35725: PUSH
35726: LD_VAR 0 6
35730: PUSH
35731: LD_VAR 0 8
35735: ARRAY
35736: ST_TO_ADDR
// if x = - 1 then
35737: LD_VAR 0 13
35741: PUSH
35742: LD_INT 1
35744: NEG
35745: EQUAL
35746: IFFALSE 35750
// continue ;
35748: GO 35706
// PrepareHuman ( false , i , skill ) ;
35750: LD_INT 0
35752: PPUSH
35753: LD_VAR 0 8
35757: PPUSH
35758: LD_VAR 0 4
35762: PPUSH
35763: CALL_OW 380
// un := CreateHuman ;
35767: LD_ADDR_VAR 0 14
35771: PUSH
35772: CALL_OW 44
35776: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35777: LD_VAR 0 14
35781: PPUSH
35782: LD_VAR 0 1
35786: PPUSH
35787: CALL_OW 250
35791: PPUSH
35792: LD_VAR 0 1
35796: PPUSH
35797: CALL_OW 251
35801: PPUSH
35802: LD_INT 10
35804: PPUSH
35805: LD_INT 0
35807: PPUSH
35808: CALL_OW 50
// result := result ^ un ;
35812: LD_ADDR_VAR 0 7
35816: PUSH
35817: LD_VAR 0 7
35821: PUSH
35822: LD_VAR 0 14
35826: ADD
35827: ST_TO_ADDR
// end ;
35828: GO 35706
35830: POP
35831: POP
// end ; end ;
35832: LD_VAR 0 7
35836: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35837: LD_INT 0
35839: PPUSH
35840: PPUSH
35841: PPUSH
35842: PPUSH
35843: PPUSH
35844: PPUSH
35845: PPUSH
35846: PPUSH
35847: PPUSH
35848: PPUSH
35849: PPUSH
35850: PPUSH
35851: PPUSH
35852: PPUSH
35853: PPUSH
35854: PPUSH
// result := false ;
35855: LD_ADDR_VAR 0 3
35859: PUSH
35860: LD_INT 0
35862: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35863: LD_VAR 0 1
35867: NOT
35868: PUSH
35869: LD_VAR 0 1
35873: PPUSH
35874: CALL_OW 266
35878: PUSH
35879: LD_INT 32
35881: PUSH
35882: LD_INT 33
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: IN
35889: NOT
35890: OR
35891: IFFALSE 35895
// exit ;
35893: GO 37004
// nat := GetNation ( tower ) ;
35895: LD_ADDR_VAR 0 12
35899: PUSH
35900: LD_VAR 0 1
35904: PPUSH
35905: CALL_OW 248
35909: ST_TO_ADDR
// side := GetSide ( tower ) ;
35910: LD_ADDR_VAR 0 16
35914: PUSH
35915: LD_VAR 0 1
35919: PPUSH
35920: CALL_OW 255
35924: ST_TO_ADDR
// x := GetX ( tower ) ;
35925: LD_ADDR_VAR 0 10
35929: PUSH
35930: LD_VAR 0 1
35934: PPUSH
35935: CALL_OW 250
35939: ST_TO_ADDR
// y := GetY ( tower ) ;
35940: LD_ADDR_VAR 0 11
35944: PUSH
35945: LD_VAR 0 1
35949: PPUSH
35950: CALL_OW 251
35954: ST_TO_ADDR
// if not x or not y then
35955: LD_VAR 0 10
35959: NOT
35960: PUSH
35961: LD_VAR 0 11
35965: NOT
35966: OR
35967: IFFALSE 35971
// exit ;
35969: GO 37004
// weapon := 0 ;
35971: LD_ADDR_VAR 0 18
35975: PUSH
35976: LD_INT 0
35978: ST_TO_ADDR
// fac_list := [ ] ;
35979: LD_ADDR_VAR 0 17
35983: PUSH
35984: EMPTY
35985: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35986: LD_ADDR_VAR 0 6
35990: PUSH
35991: LD_VAR 0 1
35995: PPUSH
35996: CALL_OW 274
36000: PPUSH
36001: LD_VAR 0 2
36005: PPUSH
36006: LD_INT 0
36008: PPUSH
36009: CALL 33575 0 3
36013: PPUSH
36014: LD_INT 30
36016: PUSH
36017: LD_INT 3
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PPUSH
36024: CALL_OW 72
36028: ST_TO_ADDR
// if not factories then
36029: LD_VAR 0 6
36033: NOT
36034: IFFALSE 36038
// exit ;
36036: GO 37004
// for i in factories do
36038: LD_ADDR_VAR 0 8
36042: PUSH
36043: LD_VAR 0 6
36047: PUSH
36048: FOR_IN
36049: IFFALSE 36074
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36051: LD_ADDR_VAR 0 17
36055: PUSH
36056: LD_VAR 0 17
36060: PUSH
36061: LD_VAR 0 8
36065: PPUSH
36066: CALL_OW 478
36070: UNION
36071: ST_TO_ADDR
36072: GO 36048
36074: POP
36075: POP
// if not fac_list then
36076: LD_VAR 0 17
36080: NOT
36081: IFFALSE 36085
// exit ;
36083: GO 37004
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36085: LD_ADDR_VAR 0 5
36089: PUSH
36090: LD_INT 4
36092: PUSH
36093: LD_INT 5
36095: PUSH
36096: LD_INT 9
36098: PUSH
36099: LD_INT 10
36101: PUSH
36102: LD_INT 6
36104: PUSH
36105: LD_INT 7
36107: PUSH
36108: LD_INT 11
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: PUSH
36120: LD_INT 27
36122: PUSH
36123: LD_INT 28
36125: PUSH
36126: LD_INT 26
36128: PUSH
36129: LD_INT 30
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 43
36140: PUSH
36141: LD_INT 44
36143: PUSH
36144: LD_INT 46
36146: PUSH
36147: LD_INT 45
36149: PUSH
36150: LD_INT 47
36152: PUSH
36153: LD_INT 49
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: LIST
36168: PUSH
36169: LD_VAR 0 12
36173: ARRAY
36174: ST_TO_ADDR
// list := list isect fac_list ;
36175: LD_ADDR_VAR 0 5
36179: PUSH
36180: LD_VAR 0 5
36184: PUSH
36185: LD_VAR 0 17
36189: ISECT
36190: ST_TO_ADDR
// if not list then
36191: LD_VAR 0 5
36195: NOT
36196: IFFALSE 36200
// exit ;
36198: GO 37004
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36200: LD_VAR 0 12
36204: PUSH
36205: LD_INT 3
36207: EQUAL
36208: PUSH
36209: LD_INT 49
36211: PUSH
36212: LD_VAR 0 5
36216: IN
36217: AND
36218: PUSH
36219: LD_INT 31
36221: PPUSH
36222: LD_VAR 0 16
36226: PPUSH
36227: CALL_OW 321
36231: PUSH
36232: LD_INT 2
36234: EQUAL
36235: AND
36236: IFFALSE 36296
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36238: LD_INT 22
36240: PUSH
36241: LD_VAR 0 16
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 35
36252: PUSH
36253: LD_INT 49
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 91
36262: PUSH
36263: LD_VAR 0 1
36267: PUSH
36268: LD_INT 10
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: LIST
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: LIST
36280: PPUSH
36281: CALL_OW 69
36285: NOT
36286: IFFALSE 36296
// weapon := ru_time_lapser ;
36288: LD_ADDR_VAR 0 18
36292: PUSH
36293: LD_INT 49
36295: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36296: LD_VAR 0 12
36300: PUSH
36301: LD_INT 1
36303: PUSH
36304: LD_INT 2
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: IN
36311: PUSH
36312: LD_INT 11
36314: PUSH
36315: LD_VAR 0 5
36319: IN
36320: PUSH
36321: LD_INT 30
36323: PUSH
36324: LD_VAR 0 5
36328: IN
36329: OR
36330: AND
36331: PUSH
36332: LD_INT 6
36334: PPUSH
36335: LD_VAR 0 16
36339: PPUSH
36340: CALL_OW 321
36344: PUSH
36345: LD_INT 2
36347: EQUAL
36348: AND
36349: IFFALSE 36514
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36351: LD_INT 22
36353: PUSH
36354: LD_VAR 0 16
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: LD_INT 2
36365: PUSH
36366: LD_INT 35
36368: PUSH
36369: LD_INT 11
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 35
36378: PUSH
36379: LD_INT 30
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 91
36393: PUSH
36394: LD_VAR 0 1
36398: PUSH
36399: LD_INT 18
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: LIST
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: LIST
36411: PPUSH
36412: CALL_OW 69
36416: NOT
36417: PUSH
36418: LD_INT 22
36420: PUSH
36421: LD_VAR 0 16
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 2
36432: PUSH
36433: LD_INT 30
36435: PUSH
36436: LD_INT 32
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 30
36445: PUSH
36446: LD_INT 33
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 91
36460: PUSH
36461: LD_VAR 0 1
36465: PUSH
36466: LD_INT 12
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: LIST
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: LIST
36478: PUSH
36479: EMPTY
36480: LIST
36481: PPUSH
36482: CALL_OW 69
36486: PUSH
36487: LD_INT 2
36489: GREATER
36490: AND
36491: IFFALSE 36514
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36493: LD_ADDR_VAR 0 18
36497: PUSH
36498: LD_INT 11
36500: PUSH
36501: LD_INT 30
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: LD_VAR 0 12
36512: ARRAY
36513: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36514: LD_VAR 0 18
36518: NOT
36519: PUSH
36520: LD_INT 40
36522: PPUSH
36523: LD_VAR 0 16
36527: PPUSH
36528: CALL_OW 321
36532: PUSH
36533: LD_INT 2
36535: EQUAL
36536: AND
36537: PUSH
36538: LD_INT 7
36540: PUSH
36541: LD_VAR 0 5
36545: IN
36546: PUSH
36547: LD_INT 28
36549: PUSH
36550: LD_VAR 0 5
36554: IN
36555: OR
36556: PUSH
36557: LD_INT 45
36559: PUSH
36560: LD_VAR 0 5
36564: IN
36565: OR
36566: AND
36567: IFFALSE 36821
// begin hex := GetHexInfo ( x , y ) ;
36569: LD_ADDR_VAR 0 4
36573: PUSH
36574: LD_VAR 0 10
36578: PPUSH
36579: LD_VAR 0 11
36583: PPUSH
36584: CALL_OW 546
36588: ST_TO_ADDR
// if hex [ 1 ] then
36589: LD_VAR 0 4
36593: PUSH
36594: LD_INT 1
36596: ARRAY
36597: IFFALSE 36601
// exit ;
36599: GO 37004
// height := hex [ 2 ] ;
36601: LD_ADDR_VAR 0 15
36605: PUSH
36606: LD_VAR 0 4
36610: PUSH
36611: LD_INT 2
36613: ARRAY
36614: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36615: LD_ADDR_VAR 0 14
36619: PUSH
36620: LD_INT 0
36622: PUSH
36623: LD_INT 2
36625: PUSH
36626: LD_INT 3
36628: PUSH
36629: LD_INT 5
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: ST_TO_ADDR
// for i in tmp do
36638: LD_ADDR_VAR 0 8
36642: PUSH
36643: LD_VAR 0 14
36647: PUSH
36648: FOR_IN
36649: IFFALSE 36819
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36651: LD_ADDR_VAR 0 9
36655: PUSH
36656: LD_VAR 0 10
36660: PPUSH
36661: LD_VAR 0 8
36665: PPUSH
36666: LD_INT 5
36668: PPUSH
36669: CALL_OW 272
36673: PUSH
36674: LD_VAR 0 11
36678: PPUSH
36679: LD_VAR 0 8
36683: PPUSH
36684: LD_INT 5
36686: PPUSH
36687: CALL_OW 273
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36696: LD_VAR 0 9
36700: PUSH
36701: LD_INT 1
36703: ARRAY
36704: PPUSH
36705: LD_VAR 0 9
36709: PUSH
36710: LD_INT 2
36712: ARRAY
36713: PPUSH
36714: CALL_OW 488
36718: IFFALSE 36817
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36720: LD_ADDR_VAR 0 4
36724: PUSH
36725: LD_VAR 0 9
36729: PUSH
36730: LD_INT 1
36732: ARRAY
36733: PPUSH
36734: LD_VAR 0 9
36738: PUSH
36739: LD_INT 2
36741: ARRAY
36742: PPUSH
36743: CALL_OW 546
36747: ST_TO_ADDR
// if hex [ 1 ] then
36748: LD_VAR 0 4
36752: PUSH
36753: LD_INT 1
36755: ARRAY
36756: IFFALSE 36760
// continue ;
36758: GO 36648
// h := hex [ 2 ] ;
36760: LD_ADDR_VAR 0 13
36764: PUSH
36765: LD_VAR 0 4
36769: PUSH
36770: LD_INT 2
36772: ARRAY
36773: ST_TO_ADDR
// if h + 7 < height then
36774: LD_VAR 0 13
36778: PUSH
36779: LD_INT 7
36781: PLUS
36782: PUSH
36783: LD_VAR 0 15
36787: LESS
36788: IFFALSE 36817
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36790: LD_ADDR_VAR 0 18
36794: PUSH
36795: LD_INT 7
36797: PUSH
36798: LD_INT 28
36800: PUSH
36801: LD_INT 45
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: LIST
36808: PUSH
36809: LD_VAR 0 12
36813: ARRAY
36814: ST_TO_ADDR
// break ;
36815: GO 36819
// end ; end ; end ;
36817: GO 36648
36819: POP
36820: POP
// end ; if not weapon then
36821: LD_VAR 0 18
36825: NOT
36826: IFFALSE 36886
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36828: LD_ADDR_VAR 0 5
36832: PUSH
36833: LD_VAR 0 5
36837: PUSH
36838: LD_INT 11
36840: PUSH
36841: LD_INT 30
36843: PUSH
36844: LD_INT 49
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: LIST
36851: DIFF
36852: ST_TO_ADDR
// if not list then
36853: LD_VAR 0 5
36857: NOT
36858: IFFALSE 36862
// exit ;
36860: GO 37004
// weapon := list [ rand ( 1 , list ) ] ;
36862: LD_ADDR_VAR 0 18
36866: PUSH
36867: LD_VAR 0 5
36871: PUSH
36872: LD_INT 1
36874: PPUSH
36875: LD_VAR 0 5
36879: PPUSH
36880: CALL_OW 12
36884: ARRAY
36885: ST_TO_ADDR
// end ; if weapon then
36886: LD_VAR 0 18
36890: IFFALSE 37004
// begin tmp := CostOfWeapon ( weapon ) ;
36892: LD_ADDR_VAR 0 14
36896: PUSH
36897: LD_VAR 0 18
36901: PPUSH
36902: CALL_OW 451
36906: ST_TO_ADDR
// j := GetBase ( tower ) ;
36907: LD_ADDR_VAR 0 9
36911: PUSH
36912: LD_VAR 0 1
36916: PPUSH
36917: CALL_OW 274
36921: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36922: LD_VAR 0 9
36926: PPUSH
36927: LD_INT 1
36929: PPUSH
36930: CALL_OW 275
36934: PUSH
36935: LD_VAR 0 14
36939: PUSH
36940: LD_INT 1
36942: ARRAY
36943: GREATEREQUAL
36944: PUSH
36945: LD_VAR 0 9
36949: PPUSH
36950: LD_INT 2
36952: PPUSH
36953: CALL_OW 275
36957: PUSH
36958: LD_VAR 0 14
36962: PUSH
36963: LD_INT 2
36965: ARRAY
36966: GREATEREQUAL
36967: AND
36968: PUSH
36969: LD_VAR 0 9
36973: PPUSH
36974: LD_INT 3
36976: PPUSH
36977: CALL_OW 275
36981: PUSH
36982: LD_VAR 0 14
36986: PUSH
36987: LD_INT 3
36989: ARRAY
36990: GREATEREQUAL
36991: AND
36992: IFFALSE 37004
// result := weapon ;
36994: LD_ADDR_VAR 0 3
36998: PUSH
36999: LD_VAR 0 18
37003: ST_TO_ADDR
// end ; end ;
37004: LD_VAR 0 3
37008: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37009: LD_INT 0
37011: PPUSH
37012: PPUSH
// result := true ;
37013: LD_ADDR_VAR 0 3
37017: PUSH
37018: LD_INT 1
37020: ST_TO_ADDR
// if array1 = array2 then
37021: LD_VAR 0 1
37025: PUSH
37026: LD_VAR 0 2
37030: EQUAL
37031: IFFALSE 37091
// begin for i = 1 to array1 do
37033: LD_ADDR_VAR 0 4
37037: PUSH
37038: DOUBLE
37039: LD_INT 1
37041: DEC
37042: ST_TO_ADDR
37043: LD_VAR 0 1
37047: PUSH
37048: FOR_TO
37049: IFFALSE 37087
// if array1 [ i ] <> array2 [ i ] then
37051: LD_VAR 0 1
37055: PUSH
37056: LD_VAR 0 4
37060: ARRAY
37061: PUSH
37062: LD_VAR 0 2
37066: PUSH
37067: LD_VAR 0 4
37071: ARRAY
37072: NONEQUAL
37073: IFFALSE 37085
// begin result := false ;
37075: LD_ADDR_VAR 0 3
37079: PUSH
37080: LD_INT 0
37082: ST_TO_ADDR
// break ;
37083: GO 37087
// end ;
37085: GO 37048
37087: POP
37088: POP
// end else
37089: GO 37099
// result := false ;
37091: LD_ADDR_VAR 0 3
37095: PUSH
37096: LD_INT 0
37098: ST_TO_ADDR
// end ;
37099: LD_VAR 0 3
37103: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37104: LD_INT 0
37106: PPUSH
37107: PPUSH
// if not array1 or not array2 then
37108: LD_VAR 0 1
37112: NOT
37113: PUSH
37114: LD_VAR 0 2
37118: NOT
37119: OR
37120: IFFALSE 37124
// exit ;
37122: GO 37188
// result := true ;
37124: LD_ADDR_VAR 0 3
37128: PUSH
37129: LD_INT 1
37131: ST_TO_ADDR
// for i = 1 to array1 do
37132: LD_ADDR_VAR 0 4
37136: PUSH
37137: DOUBLE
37138: LD_INT 1
37140: DEC
37141: ST_TO_ADDR
37142: LD_VAR 0 1
37146: PUSH
37147: FOR_TO
37148: IFFALSE 37186
// if array1 [ i ] <> array2 [ i ] then
37150: LD_VAR 0 1
37154: PUSH
37155: LD_VAR 0 4
37159: ARRAY
37160: PUSH
37161: LD_VAR 0 2
37165: PUSH
37166: LD_VAR 0 4
37170: ARRAY
37171: NONEQUAL
37172: IFFALSE 37184
// begin result := false ;
37174: LD_ADDR_VAR 0 3
37178: PUSH
37179: LD_INT 0
37181: ST_TO_ADDR
// break ;
37182: GO 37186
// end ;
37184: GO 37147
37186: POP
37187: POP
// end ;
37188: LD_VAR 0 3
37192: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37193: LD_INT 0
37195: PPUSH
37196: PPUSH
37197: PPUSH
// pom := GetBase ( fac ) ;
37198: LD_ADDR_VAR 0 5
37202: PUSH
37203: LD_VAR 0 1
37207: PPUSH
37208: CALL_OW 274
37212: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37213: LD_ADDR_VAR 0 4
37217: PUSH
37218: LD_VAR 0 2
37222: PUSH
37223: LD_INT 1
37225: ARRAY
37226: PPUSH
37227: LD_VAR 0 2
37231: PUSH
37232: LD_INT 2
37234: ARRAY
37235: PPUSH
37236: LD_VAR 0 2
37240: PUSH
37241: LD_INT 3
37243: ARRAY
37244: PPUSH
37245: LD_VAR 0 2
37249: PUSH
37250: LD_INT 4
37252: ARRAY
37253: PPUSH
37254: CALL_OW 449
37258: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37259: LD_ADDR_VAR 0 3
37263: PUSH
37264: LD_VAR 0 5
37268: PPUSH
37269: LD_INT 1
37271: PPUSH
37272: CALL_OW 275
37276: PUSH
37277: LD_VAR 0 4
37281: PUSH
37282: LD_INT 1
37284: ARRAY
37285: GREATEREQUAL
37286: PUSH
37287: LD_VAR 0 5
37291: PPUSH
37292: LD_INT 2
37294: PPUSH
37295: CALL_OW 275
37299: PUSH
37300: LD_VAR 0 4
37304: PUSH
37305: LD_INT 2
37307: ARRAY
37308: GREATEREQUAL
37309: AND
37310: PUSH
37311: LD_VAR 0 5
37315: PPUSH
37316: LD_INT 3
37318: PPUSH
37319: CALL_OW 275
37323: PUSH
37324: LD_VAR 0 4
37328: PUSH
37329: LD_INT 3
37331: ARRAY
37332: GREATEREQUAL
37333: AND
37334: ST_TO_ADDR
// end ;
37335: LD_VAR 0 3
37339: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37340: LD_INT 0
37342: PPUSH
37343: PPUSH
37344: PPUSH
37345: PPUSH
// pom := GetBase ( building ) ;
37346: LD_ADDR_VAR 0 3
37350: PUSH
37351: LD_VAR 0 1
37355: PPUSH
37356: CALL_OW 274
37360: ST_TO_ADDR
// if not pom then
37361: LD_VAR 0 3
37365: NOT
37366: IFFALSE 37370
// exit ;
37368: GO 37540
// btype := GetBType ( building ) ;
37370: LD_ADDR_VAR 0 5
37374: PUSH
37375: LD_VAR 0 1
37379: PPUSH
37380: CALL_OW 266
37384: ST_TO_ADDR
// if btype = b_armoury then
37385: LD_VAR 0 5
37389: PUSH
37390: LD_INT 4
37392: EQUAL
37393: IFFALSE 37403
// btype := b_barracks ;
37395: LD_ADDR_VAR 0 5
37399: PUSH
37400: LD_INT 5
37402: ST_TO_ADDR
// if btype = b_depot then
37403: LD_VAR 0 5
37407: PUSH
37408: LD_INT 0
37410: EQUAL
37411: IFFALSE 37421
// btype := b_warehouse ;
37413: LD_ADDR_VAR 0 5
37417: PUSH
37418: LD_INT 1
37420: ST_TO_ADDR
// if btype = b_workshop then
37421: LD_VAR 0 5
37425: PUSH
37426: LD_INT 2
37428: EQUAL
37429: IFFALSE 37439
// btype := b_factory ;
37431: LD_ADDR_VAR 0 5
37435: PUSH
37436: LD_INT 3
37438: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37439: LD_ADDR_VAR 0 4
37443: PUSH
37444: LD_VAR 0 5
37448: PPUSH
37449: LD_VAR 0 1
37453: PPUSH
37454: CALL_OW 248
37458: PPUSH
37459: CALL_OW 450
37463: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37464: LD_ADDR_VAR 0 2
37468: PUSH
37469: LD_VAR 0 3
37473: PPUSH
37474: LD_INT 1
37476: PPUSH
37477: CALL_OW 275
37481: PUSH
37482: LD_VAR 0 4
37486: PUSH
37487: LD_INT 1
37489: ARRAY
37490: GREATEREQUAL
37491: PUSH
37492: LD_VAR 0 3
37496: PPUSH
37497: LD_INT 2
37499: PPUSH
37500: CALL_OW 275
37504: PUSH
37505: LD_VAR 0 4
37509: PUSH
37510: LD_INT 2
37512: ARRAY
37513: GREATEREQUAL
37514: AND
37515: PUSH
37516: LD_VAR 0 3
37520: PPUSH
37521: LD_INT 3
37523: PPUSH
37524: CALL_OW 275
37528: PUSH
37529: LD_VAR 0 4
37533: PUSH
37534: LD_INT 3
37536: ARRAY
37537: GREATEREQUAL
37538: AND
37539: ST_TO_ADDR
// end ;
37540: LD_VAR 0 2
37544: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37545: LD_INT 0
37547: PPUSH
37548: PPUSH
37549: PPUSH
// pom := GetBase ( building ) ;
37550: LD_ADDR_VAR 0 4
37554: PUSH
37555: LD_VAR 0 1
37559: PPUSH
37560: CALL_OW 274
37564: ST_TO_ADDR
// if not pom then
37565: LD_VAR 0 4
37569: NOT
37570: IFFALSE 37574
// exit ;
37572: GO 37675
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37574: LD_ADDR_VAR 0 5
37578: PUSH
37579: LD_VAR 0 2
37583: PPUSH
37584: LD_VAR 0 1
37588: PPUSH
37589: CALL_OW 248
37593: PPUSH
37594: CALL_OW 450
37598: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37599: LD_ADDR_VAR 0 3
37603: PUSH
37604: LD_VAR 0 4
37608: PPUSH
37609: LD_INT 1
37611: PPUSH
37612: CALL_OW 275
37616: PUSH
37617: LD_VAR 0 5
37621: PUSH
37622: LD_INT 1
37624: ARRAY
37625: GREATEREQUAL
37626: PUSH
37627: LD_VAR 0 4
37631: PPUSH
37632: LD_INT 2
37634: PPUSH
37635: CALL_OW 275
37639: PUSH
37640: LD_VAR 0 5
37644: PUSH
37645: LD_INT 2
37647: ARRAY
37648: GREATEREQUAL
37649: AND
37650: PUSH
37651: LD_VAR 0 4
37655: PPUSH
37656: LD_INT 3
37658: PPUSH
37659: CALL_OW 275
37663: PUSH
37664: LD_VAR 0 5
37668: PUSH
37669: LD_INT 3
37671: ARRAY
37672: GREATEREQUAL
37673: AND
37674: ST_TO_ADDR
// end ;
37675: LD_VAR 0 3
37679: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37680: LD_INT 0
37682: PPUSH
37683: PPUSH
37684: PPUSH
37685: PPUSH
37686: PPUSH
37687: PPUSH
37688: PPUSH
37689: PPUSH
37690: PPUSH
37691: PPUSH
37692: PPUSH
// result := false ;
37693: LD_ADDR_VAR 0 8
37697: PUSH
37698: LD_INT 0
37700: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37701: LD_VAR 0 5
37705: NOT
37706: PUSH
37707: LD_VAR 0 1
37711: NOT
37712: OR
37713: PUSH
37714: LD_VAR 0 2
37718: NOT
37719: OR
37720: PUSH
37721: LD_VAR 0 3
37725: NOT
37726: OR
37727: IFFALSE 37731
// exit ;
37729: GO 38545
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37731: LD_ADDR_VAR 0 14
37735: PUSH
37736: LD_VAR 0 1
37740: PPUSH
37741: LD_VAR 0 2
37745: PPUSH
37746: LD_VAR 0 3
37750: PPUSH
37751: LD_VAR 0 4
37755: PPUSH
37756: LD_VAR 0 5
37760: PUSH
37761: LD_INT 1
37763: ARRAY
37764: PPUSH
37765: CALL_OW 248
37769: PPUSH
37770: LD_INT 0
37772: PPUSH
37773: CALL 39778 0 6
37777: ST_TO_ADDR
// if not hexes then
37778: LD_VAR 0 14
37782: NOT
37783: IFFALSE 37787
// exit ;
37785: GO 38545
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37787: LD_ADDR_VAR 0 17
37791: PUSH
37792: LD_VAR 0 5
37796: PPUSH
37797: LD_INT 22
37799: PUSH
37800: LD_VAR 0 13
37804: PPUSH
37805: CALL_OW 255
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 2
37816: PUSH
37817: LD_INT 30
37819: PUSH
37820: LD_INT 0
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 30
37829: PUSH
37830: LD_INT 1
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: LIST
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PPUSH
37846: CALL_OW 72
37850: ST_TO_ADDR
// for i = 1 to hexes do
37851: LD_ADDR_VAR 0 9
37855: PUSH
37856: DOUBLE
37857: LD_INT 1
37859: DEC
37860: ST_TO_ADDR
37861: LD_VAR 0 14
37865: PUSH
37866: FOR_TO
37867: IFFALSE 38543
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37869: LD_ADDR_VAR 0 13
37873: PUSH
37874: LD_VAR 0 14
37878: PUSH
37879: LD_VAR 0 9
37883: ARRAY
37884: PUSH
37885: LD_INT 1
37887: ARRAY
37888: PPUSH
37889: LD_VAR 0 14
37893: PUSH
37894: LD_VAR 0 9
37898: ARRAY
37899: PUSH
37900: LD_INT 2
37902: ARRAY
37903: PPUSH
37904: CALL_OW 428
37908: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37909: LD_VAR 0 14
37913: PUSH
37914: LD_VAR 0 9
37918: ARRAY
37919: PUSH
37920: LD_INT 1
37922: ARRAY
37923: PPUSH
37924: LD_VAR 0 14
37928: PUSH
37929: LD_VAR 0 9
37933: ARRAY
37934: PUSH
37935: LD_INT 2
37937: ARRAY
37938: PPUSH
37939: CALL_OW 351
37943: PUSH
37944: LD_VAR 0 14
37948: PUSH
37949: LD_VAR 0 9
37953: ARRAY
37954: PUSH
37955: LD_INT 1
37957: ARRAY
37958: PPUSH
37959: LD_VAR 0 14
37963: PUSH
37964: LD_VAR 0 9
37968: ARRAY
37969: PUSH
37970: LD_INT 2
37972: ARRAY
37973: PPUSH
37974: CALL_OW 488
37978: NOT
37979: OR
37980: PUSH
37981: LD_VAR 0 13
37985: PPUSH
37986: CALL_OW 247
37990: PUSH
37991: LD_INT 3
37993: EQUAL
37994: OR
37995: IFFALSE 38001
// exit ;
37997: POP
37998: POP
37999: GO 38545
// if not tmp then
38001: LD_VAR 0 13
38005: NOT
38006: IFFALSE 38010
// continue ;
38008: GO 37866
// result := true ;
38010: LD_ADDR_VAR 0 8
38014: PUSH
38015: LD_INT 1
38017: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38018: LD_VAR 0 6
38022: PUSH
38023: LD_VAR 0 13
38027: PPUSH
38028: CALL_OW 247
38032: PUSH
38033: LD_INT 2
38035: EQUAL
38036: AND
38037: PUSH
38038: LD_VAR 0 13
38042: PPUSH
38043: CALL_OW 263
38047: PUSH
38048: LD_INT 1
38050: EQUAL
38051: AND
38052: IFFALSE 38216
// begin if IsDrivenBy ( tmp ) then
38054: LD_VAR 0 13
38058: PPUSH
38059: CALL_OW 311
38063: IFFALSE 38067
// continue ;
38065: GO 37866
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38067: LD_VAR 0 6
38071: PPUSH
38072: LD_INT 3
38074: PUSH
38075: LD_INT 60
38077: PUSH
38078: EMPTY
38079: LIST
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 3
38087: PUSH
38088: LD_INT 55
38090: PUSH
38091: EMPTY
38092: LIST
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PPUSH
38102: CALL_OW 72
38106: IFFALSE 38214
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38108: LD_ADDR_VAR 0 18
38112: PUSH
38113: LD_VAR 0 6
38117: PPUSH
38118: LD_INT 3
38120: PUSH
38121: LD_INT 60
38123: PUSH
38124: EMPTY
38125: LIST
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 3
38133: PUSH
38134: LD_INT 55
38136: PUSH
38137: EMPTY
38138: LIST
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PPUSH
38148: CALL_OW 72
38152: PUSH
38153: LD_INT 1
38155: ARRAY
38156: ST_TO_ADDR
// if IsInUnit ( driver ) then
38157: LD_VAR 0 18
38161: PPUSH
38162: CALL_OW 310
38166: IFFALSE 38177
// ComExit ( driver ) ;
38168: LD_VAR 0 18
38172: PPUSH
38173: CALL 63466 0 1
// AddComEnterUnit ( driver , tmp ) ;
38177: LD_VAR 0 18
38181: PPUSH
38182: LD_VAR 0 13
38186: PPUSH
38187: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38191: LD_VAR 0 18
38195: PPUSH
38196: LD_VAR 0 7
38200: PPUSH
38201: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38205: LD_VAR 0 18
38209: PPUSH
38210: CALL_OW 181
// end ; continue ;
38214: GO 37866
// end ; if not cleaners or not tmp in cleaners then
38216: LD_VAR 0 6
38220: NOT
38221: PUSH
38222: LD_VAR 0 13
38226: PUSH
38227: LD_VAR 0 6
38231: IN
38232: NOT
38233: OR
38234: IFFALSE 38541
// begin if dep then
38236: LD_VAR 0 17
38240: IFFALSE 38376
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38242: LD_ADDR_VAR 0 16
38246: PUSH
38247: LD_VAR 0 17
38251: PUSH
38252: LD_INT 1
38254: ARRAY
38255: PPUSH
38256: CALL_OW 250
38260: PPUSH
38261: LD_VAR 0 17
38265: PUSH
38266: LD_INT 1
38268: ARRAY
38269: PPUSH
38270: CALL_OW 254
38274: PPUSH
38275: LD_INT 5
38277: PPUSH
38278: CALL_OW 272
38282: PUSH
38283: LD_VAR 0 17
38287: PUSH
38288: LD_INT 1
38290: ARRAY
38291: PPUSH
38292: CALL_OW 251
38296: PPUSH
38297: LD_VAR 0 17
38301: PUSH
38302: LD_INT 1
38304: ARRAY
38305: PPUSH
38306: CALL_OW 254
38310: PPUSH
38311: LD_INT 5
38313: PPUSH
38314: CALL_OW 273
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38323: LD_VAR 0 16
38327: PUSH
38328: LD_INT 1
38330: ARRAY
38331: PPUSH
38332: LD_VAR 0 16
38336: PUSH
38337: LD_INT 2
38339: ARRAY
38340: PPUSH
38341: CALL_OW 488
38345: IFFALSE 38376
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38347: LD_VAR 0 13
38351: PPUSH
38352: LD_VAR 0 16
38356: PUSH
38357: LD_INT 1
38359: ARRAY
38360: PPUSH
38361: LD_VAR 0 16
38365: PUSH
38366: LD_INT 2
38368: ARRAY
38369: PPUSH
38370: CALL_OW 111
// continue ;
38374: GO 37866
// end ; end ; r := GetDir ( tmp ) ;
38376: LD_ADDR_VAR 0 15
38380: PUSH
38381: LD_VAR 0 13
38385: PPUSH
38386: CALL_OW 254
38390: ST_TO_ADDR
// if r = 5 then
38391: LD_VAR 0 15
38395: PUSH
38396: LD_INT 5
38398: EQUAL
38399: IFFALSE 38409
// r := 0 ;
38401: LD_ADDR_VAR 0 15
38405: PUSH
38406: LD_INT 0
38408: ST_TO_ADDR
// for j = r to 5 do
38409: LD_ADDR_VAR 0 10
38413: PUSH
38414: DOUBLE
38415: LD_VAR 0 15
38419: DEC
38420: ST_TO_ADDR
38421: LD_INT 5
38423: PUSH
38424: FOR_TO
38425: IFFALSE 38539
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38427: LD_ADDR_VAR 0 11
38431: PUSH
38432: LD_VAR 0 13
38436: PPUSH
38437: CALL_OW 250
38441: PPUSH
38442: LD_VAR 0 10
38446: PPUSH
38447: LD_INT 2
38449: PPUSH
38450: CALL_OW 272
38454: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38455: LD_ADDR_VAR 0 12
38459: PUSH
38460: LD_VAR 0 13
38464: PPUSH
38465: CALL_OW 251
38469: PPUSH
38470: LD_VAR 0 10
38474: PPUSH
38475: LD_INT 2
38477: PPUSH
38478: CALL_OW 273
38482: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38483: LD_VAR 0 11
38487: PPUSH
38488: LD_VAR 0 12
38492: PPUSH
38493: CALL_OW 488
38497: PUSH
38498: LD_VAR 0 11
38502: PPUSH
38503: LD_VAR 0 12
38507: PPUSH
38508: CALL_OW 428
38512: NOT
38513: AND
38514: IFFALSE 38537
// begin ComMoveXY ( tmp , _x , _y ) ;
38516: LD_VAR 0 13
38520: PPUSH
38521: LD_VAR 0 11
38525: PPUSH
38526: LD_VAR 0 12
38530: PPUSH
38531: CALL_OW 111
// break ;
38535: GO 38539
// end ; end ;
38537: GO 38424
38539: POP
38540: POP
// end ; end ;
38541: GO 37866
38543: POP
38544: POP
// end ;
38545: LD_VAR 0 8
38549: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38550: LD_INT 0
38552: PPUSH
// result := true ;
38553: LD_ADDR_VAR 0 3
38557: PUSH
38558: LD_INT 1
38560: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38561: LD_VAR 0 2
38565: PUSH
38566: LD_INT 24
38568: DOUBLE
38569: EQUAL
38570: IFTRUE 38580
38572: LD_INT 33
38574: DOUBLE
38575: EQUAL
38576: IFTRUE 38580
38578: GO 38605
38580: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38581: LD_ADDR_VAR 0 3
38585: PUSH
38586: LD_INT 32
38588: PPUSH
38589: LD_VAR 0 1
38593: PPUSH
38594: CALL_OW 321
38598: PUSH
38599: LD_INT 2
38601: EQUAL
38602: ST_TO_ADDR
38603: GO 38921
38605: LD_INT 20
38607: DOUBLE
38608: EQUAL
38609: IFTRUE 38613
38611: GO 38638
38613: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38614: LD_ADDR_VAR 0 3
38618: PUSH
38619: LD_INT 6
38621: PPUSH
38622: LD_VAR 0 1
38626: PPUSH
38627: CALL_OW 321
38631: PUSH
38632: LD_INT 2
38634: EQUAL
38635: ST_TO_ADDR
38636: GO 38921
38638: LD_INT 22
38640: DOUBLE
38641: EQUAL
38642: IFTRUE 38652
38644: LD_INT 36
38646: DOUBLE
38647: EQUAL
38648: IFTRUE 38652
38650: GO 38677
38652: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38653: LD_ADDR_VAR 0 3
38657: PUSH
38658: LD_INT 15
38660: PPUSH
38661: LD_VAR 0 1
38665: PPUSH
38666: CALL_OW 321
38670: PUSH
38671: LD_INT 2
38673: EQUAL
38674: ST_TO_ADDR
38675: GO 38921
38677: LD_INT 30
38679: DOUBLE
38680: EQUAL
38681: IFTRUE 38685
38683: GO 38710
38685: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38686: LD_ADDR_VAR 0 3
38690: PUSH
38691: LD_INT 20
38693: PPUSH
38694: LD_VAR 0 1
38698: PPUSH
38699: CALL_OW 321
38703: PUSH
38704: LD_INT 2
38706: EQUAL
38707: ST_TO_ADDR
38708: GO 38921
38710: LD_INT 28
38712: DOUBLE
38713: EQUAL
38714: IFTRUE 38724
38716: LD_INT 21
38718: DOUBLE
38719: EQUAL
38720: IFTRUE 38724
38722: GO 38749
38724: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38725: LD_ADDR_VAR 0 3
38729: PUSH
38730: LD_INT 21
38732: PPUSH
38733: LD_VAR 0 1
38737: PPUSH
38738: CALL_OW 321
38742: PUSH
38743: LD_INT 2
38745: EQUAL
38746: ST_TO_ADDR
38747: GO 38921
38749: LD_INT 16
38751: DOUBLE
38752: EQUAL
38753: IFTRUE 38757
38755: GO 38782
38757: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38758: LD_ADDR_VAR 0 3
38762: PUSH
38763: LD_INT 84
38765: PPUSH
38766: LD_VAR 0 1
38770: PPUSH
38771: CALL_OW 321
38775: PUSH
38776: LD_INT 2
38778: EQUAL
38779: ST_TO_ADDR
38780: GO 38921
38782: LD_INT 19
38784: DOUBLE
38785: EQUAL
38786: IFTRUE 38796
38788: LD_INT 23
38790: DOUBLE
38791: EQUAL
38792: IFTRUE 38796
38794: GO 38821
38796: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38797: LD_ADDR_VAR 0 3
38801: PUSH
38802: LD_INT 83
38804: PPUSH
38805: LD_VAR 0 1
38809: PPUSH
38810: CALL_OW 321
38814: PUSH
38815: LD_INT 2
38817: EQUAL
38818: ST_TO_ADDR
38819: GO 38921
38821: LD_INT 17
38823: DOUBLE
38824: EQUAL
38825: IFTRUE 38829
38827: GO 38854
38829: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38830: LD_ADDR_VAR 0 3
38834: PUSH
38835: LD_INT 39
38837: PPUSH
38838: LD_VAR 0 1
38842: PPUSH
38843: CALL_OW 321
38847: PUSH
38848: LD_INT 2
38850: EQUAL
38851: ST_TO_ADDR
38852: GO 38921
38854: LD_INT 18
38856: DOUBLE
38857: EQUAL
38858: IFTRUE 38862
38860: GO 38887
38862: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38863: LD_ADDR_VAR 0 3
38867: PUSH
38868: LD_INT 40
38870: PPUSH
38871: LD_VAR 0 1
38875: PPUSH
38876: CALL_OW 321
38880: PUSH
38881: LD_INT 2
38883: EQUAL
38884: ST_TO_ADDR
38885: GO 38921
38887: LD_INT 27
38889: DOUBLE
38890: EQUAL
38891: IFTRUE 38895
38893: GO 38920
38895: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38896: LD_ADDR_VAR 0 3
38900: PUSH
38901: LD_INT 35
38903: PPUSH
38904: LD_VAR 0 1
38908: PPUSH
38909: CALL_OW 321
38913: PUSH
38914: LD_INT 2
38916: EQUAL
38917: ST_TO_ADDR
38918: GO 38921
38920: POP
// end ;
38921: LD_VAR 0 3
38925: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38926: LD_INT 0
38928: PPUSH
38929: PPUSH
38930: PPUSH
38931: PPUSH
38932: PPUSH
38933: PPUSH
38934: PPUSH
38935: PPUSH
38936: PPUSH
38937: PPUSH
38938: PPUSH
// result := false ;
38939: LD_ADDR_VAR 0 6
38943: PUSH
38944: LD_INT 0
38946: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38947: LD_VAR 0 1
38951: NOT
38952: PUSH
38953: LD_VAR 0 1
38957: PPUSH
38958: CALL_OW 266
38962: PUSH
38963: LD_INT 0
38965: PUSH
38966: LD_INT 1
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: IN
38973: NOT
38974: OR
38975: PUSH
38976: LD_VAR 0 2
38980: NOT
38981: OR
38982: PUSH
38983: LD_VAR 0 5
38987: PUSH
38988: LD_INT 0
38990: PUSH
38991: LD_INT 1
38993: PUSH
38994: LD_INT 2
38996: PUSH
38997: LD_INT 3
38999: PUSH
39000: LD_INT 4
39002: PUSH
39003: LD_INT 5
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: IN
39014: NOT
39015: OR
39016: PUSH
39017: LD_VAR 0 3
39021: PPUSH
39022: LD_VAR 0 4
39026: PPUSH
39027: CALL_OW 488
39031: NOT
39032: OR
39033: IFFALSE 39037
// exit ;
39035: GO 39773
// side := GetSide ( depot ) ;
39037: LD_ADDR_VAR 0 9
39041: PUSH
39042: LD_VAR 0 1
39046: PPUSH
39047: CALL_OW 255
39051: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39052: LD_VAR 0 9
39056: PPUSH
39057: LD_VAR 0 2
39061: PPUSH
39062: CALL 38550 0 2
39066: NOT
39067: IFFALSE 39071
// exit ;
39069: GO 39773
// pom := GetBase ( depot ) ;
39071: LD_ADDR_VAR 0 10
39075: PUSH
39076: LD_VAR 0 1
39080: PPUSH
39081: CALL_OW 274
39085: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39086: LD_ADDR_VAR 0 11
39090: PUSH
39091: LD_VAR 0 2
39095: PPUSH
39096: LD_VAR 0 1
39100: PPUSH
39101: CALL_OW 248
39105: PPUSH
39106: CALL_OW 450
39110: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39111: LD_VAR 0 10
39115: PPUSH
39116: LD_INT 1
39118: PPUSH
39119: CALL_OW 275
39123: PUSH
39124: LD_VAR 0 11
39128: PUSH
39129: LD_INT 1
39131: ARRAY
39132: GREATEREQUAL
39133: PUSH
39134: LD_VAR 0 10
39138: PPUSH
39139: LD_INT 2
39141: PPUSH
39142: CALL_OW 275
39146: PUSH
39147: LD_VAR 0 11
39151: PUSH
39152: LD_INT 2
39154: ARRAY
39155: GREATEREQUAL
39156: AND
39157: PUSH
39158: LD_VAR 0 10
39162: PPUSH
39163: LD_INT 3
39165: PPUSH
39166: CALL_OW 275
39170: PUSH
39171: LD_VAR 0 11
39175: PUSH
39176: LD_INT 3
39178: ARRAY
39179: GREATEREQUAL
39180: AND
39181: NOT
39182: IFFALSE 39186
// exit ;
39184: GO 39773
// if GetBType ( depot ) = b_depot then
39186: LD_VAR 0 1
39190: PPUSH
39191: CALL_OW 266
39195: PUSH
39196: LD_INT 0
39198: EQUAL
39199: IFFALSE 39211
// dist := 28 else
39201: LD_ADDR_VAR 0 14
39205: PUSH
39206: LD_INT 28
39208: ST_TO_ADDR
39209: GO 39219
// dist := 36 ;
39211: LD_ADDR_VAR 0 14
39215: PUSH
39216: LD_INT 36
39218: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39219: LD_VAR 0 1
39223: PPUSH
39224: LD_VAR 0 3
39228: PPUSH
39229: LD_VAR 0 4
39233: PPUSH
39234: CALL_OW 297
39238: PUSH
39239: LD_VAR 0 14
39243: GREATER
39244: IFFALSE 39248
// exit ;
39246: GO 39773
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39248: LD_ADDR_VAR 0 12
39252: PUSH
39253: LD_VAR 0 2
39257: PPUSH
39258: LD_VAR 0 3
39262: PPUSH
39263: LD_VAR 0 4
39267: PPUSH
39268: LD_VAR 0 5
39272: PPUSH
39273: LD_VAR 0 1
39277: PPUSH
39278: CALL_OW 248
39282: PPUSH
39283: LD_INT 0
39285: PPUSH
39286: CALL 39778 0 6
39290: ST_TO_ADDR
// if not hexes then
39291: LD_VAR 0 12
39295: NOT
39296: IFFALSE 39300
// exit ;
39298: GO 39773
// hex := GetHexInfo ( x , y ) ;
39300: LD_ADDR_VAR 0 15
39304: PUSH
39305: LD_VAR 0 3
39309: PPUSH
39310: LD_VAR 0 4
39314: PPUSH
39315: CALL_OW 546
39319: ST_TO_ADDR
// if hex [ 1 ] then
39320: LD_VAR 0 15
39324: PUSH
39325: LD_INT 1
39327: ARRAY
39328: IFFALSE 39332
// exit ;
39330: GO 39773
// height := hex [ 2 ] ;
39332: LD_ADDR_VAR 0 13
39336: PUSH
39337: LD_VAR 0 15
39341: PUSH
39342: LD_INT 2
39344: ARRAY
39345: ST_TO_ADDR
// for i = 1 to hexes do
39346: LD_ADDR_VAR 0 7
39350: PUSH
39351: DOUBLE
39352: LD_INT 1
39354: DEC
39355: ST_TO_ADDR
39356: LD_VAR 0 12
39360: PUSH
39361: FOR_TO
39362: IFFALSE 39692
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39364: LD_VAR 0 12
39368: PUSH
39369: LD_VAR 0 7
39373: ARRAY
39374: PUSH
39375: LD_INT 1
39377: ARRAY
39378: PPUSH
39379: LD_VAR 0 12
39383: PUSH
39384: LD_VAR 0 7
39388: ARRAY
39389: PUSH
39390: LD_INT 2
39392: ARRAY
39393: PPUSH
39394: CALL_OW 488
39398: NOT
39399: PUSH
39400: LD_VAR 0 12
39404: PUSH
39405: LD_VAR 0 7
39409: ARRAY
39410: PUSH
39411: LD_INT 1
39413: ARRAY
39414: PPUSH
39415: LD_VAR 0 12
39419: PUSH
39420: LD_VAR 0 7
39424: ARRAY
39425: PUSH
39426: LD_INT 2
39428: ARRAY
39429: PPUSH
39430: CALL_OW 428
39434: PUSH
39435: LD_INT 0
39437: GREATER
39438: OR
39439: PUSH
39440: LD_VAR 0 12
39444: PUSH
39445: LD_VAR 0 7
39449: ARRAY
39450: PUSH
39451: LD_INT 1
39453: ARRAY
39454: PPUSH
39455: LD_VAR 0 12
39459: PUSH
39460: LD_VAR 0 7
39464: ARRAY
39465: PUSH
39466: LD_INT 2
39468: ARRAY
39469: PPUSH
39470: CALL_OW 351
39474: OR
39475: IFFALSE 39481
// exit ;
39477: POP
39478: POP
39479: GO 39773
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39481: LD_ADDR_VAR 0 8
39485: PUSH
39486: LD_VAR 0 12
39490: PUSH
39491: LD_VAR 0 7
39495: ARRAY
39496: PUSH
39497: LD_INT 1
39499: ARRAY
39500: PPUSH
39501: LD_VAR 0 12
39505: PUSH
39506: LD_VAR 0 7
39510: ARRAY
39511: PUSH
39512: LD_INT 2
39514: ARRAY
39515: PPUSH
39516: CALL_OW 546
39520: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39521: LD_VAR 0 8
39525: PUSH
39526: LD_INT 1
39528: ARRAY
39529: PUSH
39530: LD_VAR 0 8
39534: PUSH
39535: LD_INT 2
39537: ARRAY
39538: PUSH
39539: LD_VAR 0 13
39543: PUSH
39544: LD_INT 2
39546: PLUS
39547: GREATER
39548: OR
39549: PUSH
39550: LD_VAR 0 8
39554: PUSH
39555: LD_INT 2
39557: ARRAY
39558: PUSH
39559: LD_VAR 0 13
39563: PUSH
39564: LD_INT 2
39566: MINUS
39567: LESS
39568: OR
39569: PUSH
39570: LD_VAR 0 8
39574: PUSH
39575: LD_INT 3
39577: ARRAY
39578: PUSH
39579: LD_INT 0
39581: PUSH
39582: LD_INT 8
39584: PUSH
39585: LD_INT 9
39587: PUSH
39588: LD_INT 10
39590: PUSH
39591: LD_INT 11
39593: PUSH
39594: LD_INT 12
39596: PUSH
39597: LD_INT 13
39599: PUSH
39600: LD_INT 16
39602: PUSH
39603: LD_INT 17
39605: PUSH
39606: LD_INT 18
39608: PUSH
39609: LD_INT 19
39611: PUSH
39612: LD_INT 20
39614: PUSH
39615: LD_INT 21
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: IN
39633: NOT
39634: OR
39635: PUSH
39636: LD_VAR 0 8
39640: PUSH
39641: LD_INT 5
39643: ARRAY
39644: NOT
39645: OR
39646: PUSH
39647: LD_VAR 0 8
39651: PUSH
39652: LD_INT 6
39654: ARRAY
39655: PUSH
39656: LD_INT 1
39658: PUSH
39659: LD_INT 2
39661: PUSH
39662: LD_INT 7
39664: PUSH
39665: LD_INT 9
39667: PUSH
39668: LD_INT 10
39670: PUSH
39671: LD_INT 11
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: IN
39682: NOT
39683: OR
39684: IFFALSE 39690
// exit ;
39686: POP
39687: POP
39688: GO 39773
// end ;
39690: GO 39361
39692: POP
39693: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39694: LD_VAR 0 9
39698: PPUSH
39699: LD_VAR 0 3
39703: PPUSH
39704: LD_VAR 0 4
39708: PPUSH
39709: LD_INT 20
39711: PPUSH
39712: CALL 31725 0 4
39716: PUSH
39717: LD_INT 4
39719: ARRAY
39720: IFFALSE 39724
// exit ;
39722: GO 39773
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39724: LD_VAR 0 2
39728: PUSH
39729: LD_INT 29
39731: PUSH
39732: LD_INT 30
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: IN
39739: PUSH
39740: LD_VAR 0 3
39744: PPUSH
39745: LD_VAR 0 4
39749: PPUSH
39750: LD_VAR 0 9
39754: PPUSH
39755: CALL_OW 440
39759: NOT
39760: AND
39761: IFFALSE 39765
// exit ;
39763: GO 39773
// result := true ;
39765: LD_ADDR_VAR 0 6
39769: PUSH
39770: LD_INT 1
39772: ST_TO_ADDR
// end ;
39773: LD_VAR 0 6
39777: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39778: LD_INT 0
39780: PPUSH
39781: PPUSH
39782: PPUSH
39783: PPUSH
39784: PPUSH
39785: PPUSH
39786: PPUSH
39787: PPUSH
39788: PPUSH
39789: PPUSH
39790: PPUSH
39791: PPUSH
39792: PPUSH
39793: PPUSH
39794: PPUSH
39795: PPUSH
39796: PPUSH
39797: PPUSH
39798: PPUSH
39799: PPUSH
39800: PPUSH
39801: PPUSH
39802: PPUSH
39803: PPUSH
39804: PPUSH
39805: PPUSH
39806: PPUSH
39807: PPUSH
39808: PPUSH
39809: PPUSH
39810: PPUSH
39811: PPUSH
39812: PPUSH
39813: PPUSH
39814: PPUSH
39815: PPUSH
39816: PPUSH
39817: PPUSH
39818: PPUSH
39819: PPUSH
39820: PPUSH
39821: PPUSH
39822: PPUSH
39823: PPUSH
39824: PPUSH
39825: PPUSH
39826: PPUSH
39827: PPUSH
39828: PPUSH
39829: PPUSH
39830: PPUSH
39831: PPUSH
39832: PPUSH
39833: PPUSH
39834: PPUSH
39835: PPUSH
39836: PPUSH
39837: PPUSH
// result = [ ] ;
39838: LD_ADDR_VAR 0 7
39842: PUSH
39843: EMPTY
39844: ST_TO_ADDR
// temp_list = [ ] ;
39845: LD_ADDR_VAR 0 9
39849: PUSH
39850: EMPTY
39851: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39852: LD_VAR 0 4
39856: PUSH
39857: LD_INT 0
39859: PUSH
39860: LD_INT 1
39862: PUSH
39863: LD_INT 2
39865: PUSH
39866: LD_INT 3
39868: PUSH
39869: LD_INT 4
39871: PUSH
39872: LD_INT 5
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: IN
39883: NOT
39884: PUSH
39885: LD_VAR 0 1
39889: PUSH
39890: LD_INT 0
39892: PUSH
39893: LD_INT 1
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: IN
39900: PUSH
39901: LD_VAR 0 5
39905: PUSH
39906: LD_INT 1
39908: PUSH
39909: LD_INT 2
39911: PUSH
39912: LD_INT 3
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: LIST
39919: IN
39920: NOT
39921: AND
39922: OR
39923: IFFALSE 39927
// exit ;
39925: GO 58318
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39927: LD_VAR 0 1
39931: PUSH
39932: LD_INT 6
39934: PUSH
39935: LD_INT 7
39937: PUSH
39938: LD_INT 8
39940: PUSH
39941: LD_INT 13
39943: PUSH
39944: LD_INT 12
39946: PUSH
39947: LD_INT 15
39949: PUSH
39950: LD_INT 11
39952: PUSH
39953: LD_INT 14
39955: PUSH
39956: LD_INT 10
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: IN
39970: IFFALSE 39980
// btype = b_lab ;
39972: LD_ADDR_VAR 0 1
39976: PUSH
39977: LD_INT 6
39979: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39980: LD_VAR 0 6
39984: PUSH
39985: LD_INT 0
39987: PUSH
39988: LD_INT 1
39990: PUSH
39991: LD_INT 2
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: LIST
39998: IN
39999: NOT
40000: PUSH
40001: LD_VAR 0 1
40005: PUSH
40006: LD_INT 0
40008: PUSH
40009: LD_INT 1
40011: PUSH
40012: LD_INT 2
40014: PUSH
40015: LD_INT 3
40017: PUSH
40018: LD_INT 6
40020: PUSH
40021: LD_INT 36
40023: PUSH
40024: LD_INT 4
40026: PUSH
40027: LD_INT 5
40029: PUSH
40030: LD_INT 31
40032: PUSH
40033: LD_INT 32
40035: PUSH
40036: LD_INT 33
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: IN
40052: NOT
40053: PUSH
40054: LD_VAR 0 6
40058: PUSH
40059: LD_INT 1
40061: EQUAL
40062: AND
40063: OR
40064: PUSH
40065: LD_VAR 0 1
40069: PUSH
40070: LD_INT 2
40072: PUSH
40073: LD_INT 3
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: IN
40080: NOT
40081: PUSH
40082: LD_VAR 0 6
40086: PUSH
40087: LD_INT 2
40089: EQUAL
40090: AND
40091: OR
40092: IFFALSE 40102
// mode = 0 ;
40094: LD_ADDR_VAR 0 6
40098: PUSH
40099: LD_INT 0
40101: ST_TO_ADDR
// case mode of 0 :
40102: LD_VAR 0 6
40106: PUSH
40107: LD_INT 0
40109: DOUBLE
40110: EQUAL
40111: IFTRUE 40115
40113: GO 51568
40115: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40116: LD_ADDR_VAR 0 11
40120: PUSH
40121: LD_INT 0
40123: PUSH
40124: LD_INT 0
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 0
40133: PUSH
40134: LD_INT 1
40136: NEG
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 1
40144: PUSH
40145: LD_INT 0
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 1
40154: PUSH
40155: LD_INT 1
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 0
40164: PUSH
40165: LD_INT 1
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 1
40174: NEG
40175: PUSH
40176: LD_INT 0
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 1
40185: NEG
40186: PUSH
40187: LD_INT 1
40189: NEG
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 1
40197: NEG
40198: PUSH
40199: LD_INT 2
40201: NEG
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 0
40209: PUSH
40210: LD_INT 2
40212: NEG
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 1
40220: PUSH
40221: LD_INT 1
40223: NEG
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 1
40231: PUSH
40232: LD_INT 2
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 0
40241: PUSH
40242: LD_INT 2
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 1
40251: NEG
40252: PUSH
40253: LD_INT 1
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 1
40262: PUSH
40263: LD_INT 3
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 0
40272: PUSH
40273: LD_INT 3
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 1
40282: NEG
40283: PUSH
40284: LD_INT 2
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40309: LD_ADDR_VAR 0 12
40313: PUSH
40314: LD_INT 0
40316: PUSH
40317: LD_INT 0
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 0
40326: PUSH
40327: LD_INT 1
40329: NEG
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: PUSH
40338: LD_INT 0
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 1
40347: PUSH
40348: LD_INT 1
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 0
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 1
40367: NEG
40368: PUSH
40369: LD_INT 0
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 1
40378: NEG
40379: PUSH
40380: LD_INT 1
40382: NEG
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 1
40390: PUSH
40391: LD_INT 1
40393: NEG
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 2
40401: PUSH
40402: LD_INT 0
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 2
40411: PUSH
40412: LD_INT 1
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 1
40421: NEG
40422: PUSH
40423: LD_INT 1
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 2
40432: NEG
40433: PUSH
40434: LD_INT 0
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 2
40443: NEG
40444: PUSH
40445: LD_INT 1
40447: NEG
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 2
40455: NEG
40456: PUSH
40457: LD_INT 1
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 3
40466: NEG
40467: PUSH
40468: LD_INT 0
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 3
40477: NEG
40478: PUSH
40479: LD_INT 1
40481: NEG
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40505: LD_ADDR_VAR 0 13
40509: PUSH
40510: LD_INT 0
40512: PUSH
40513: LD_INT 0
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 0
40522: PUSH
40523: LD_INT 1
40525: NEG
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 1
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 1
40543: PUSH
40544: LD_INT 1
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 0
40553: PUSH
40554: LD_INT 1
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 1
40563: NEG
40564: PUSH
40565: LD_INT 0
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 1
40574: NEG
40575: PUSH
40576: LD_INT 1
40578: NEG
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 1
40586: NEG
40587: PUSH
40588: LD_INT 2
40590: NEG
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 2
40598: PUSH
40599: LD_INT 1
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 2
40608: PUSH
40609: LD_INT 2
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 1
40618: PUSH
40619: LD_INT 2
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 2
40628: NEG
40629: PUSH
40630: LD_INT 1
40632: NEG
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 2
40640: NEG
40641: PUSH
40642: LD_INT 2
40644: NEG
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 2
40652: NEG
40653: PUSH
40654: LD_INT 3
40656: NEG
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 3
40664: NEG
40665: PUSH
40666: LD_INT 2
40668: NEG
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 3
40676: NEG
40677: PUSH
40678: LD_INT 3
40680: NEG
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40704: LD_ADDR_VAR 0 14
40708: PUSH
40709: LD_INT 0
40711: PUSH
40712: LD_INT 0
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 0
40721: PUSH
40722: LD_INT 1
40724: NEG
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 1
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 1
40742: PUSH
40743: LD_INT 1
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 0
40752: PUSH
40753: LD_INT 1
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 1
40762: NEG
40763: PUSH
40764: LD_INT 0
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 1
40773: NEG
40774: PUSH
40775: LD_INT 1
40777: NEG
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 1
40785: NEG
40786: PUSH
40787: LD_INT 2
40789: NEG
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 0
40797: PUSH
40798: LD_INT 2
40800: NEG
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 1
40808: PUSH
40809: LD_INT 1
40811: NEG
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 1
40819: PUSH
40820: LD_INT 2
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 0
40829: PUSH
40830: LD_INT 2
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 1
40839: NEG
40840: PUSH
40841: LD_INT 1
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 1
40850: NEG
40851: PUSH
40852: LD_INT 3
40854: NEG
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 0
40862: PUSH
40863: LD_INT 3
40865: NEG
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 1
40873: PUSH
40874: LD_INT 2
40876: NEG
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40900: LD_ADDR_VAR 0 15
40904: PUSH
40905: LD_INT 0
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 0
40917: PUSH
40918: LD_INT 1
40920: NEG
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 1
40928: PUSH
40929: LD_INT 0
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 1
40938: PUSH
40939: LD_INT 1
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 0
40948: PUSH
40949: LD_INT 1
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 1
40958: NEG
40959: PUSH
40960: LD_INT 0
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 1
40969: NEG
40970: PUSH
40971: LD_INT 1
40973: NEG
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: PUSH
40982: LD_INT 1
40984: NEG
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 2
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 2
41002: PUSH
41003: LD_INT 1
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 1
41012: NEG
41013: PUSH
41014: LD_INT 1
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 2
41023: NEG
41024: PUSH
41025: LD_INT 0
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 2
41034: NEG
41035: PUSH
41036: LD_INT 1
41038: NEG
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 2
41046: PUSH
41047: LD_INT 1
41049: NEG
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 3
41057: PUSH
41058: LD_INT 0
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 3
41067: PUSH
41068: LD_INT 1
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41093: LD_ADDR_VAR 0 16
41097: PUSH
41098: LD_INT 0
41100: PUSH
41101: LD_INT 0
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 0
41110: PUSH
41111: LD_INT 1
41113: NEG
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 1
41121: PUSH
41122: LD_INT 0
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 1
41131: PUSH
41132: LD_INT 1
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 0
41141: PUSH
41142: LD_INT 1
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 1
41151: NEG
41152: PUSH
41153: LD_INT 0
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 1
41162: NEG
41163: PUSH
41164: LD_INT 1
41166: NEG
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 1
41174: NEG
41175: PUSH
41176: LD_INT 2
41178: NEG
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 2
41186: PUSH
41187: LD_INT 1
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 2
41196: PUSH
41197: LD_INT 2
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 1
41206: PUSH
41207: LD_INT 2
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 2
41216: NEG
41217: PUSH
41218: LD_INT 1
41220: NEG
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 2
41228: NEG
41229: PUSH
41230: LD_INT 2
41232: NEG
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 3
41240: PUSH
41241: LD_INT 2
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 3
41250: PUSH
41251: LD_INT 3
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 2
41260: PUSH
41261: LD_INT 3
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41286: LD_ADDR_VAR 0 17
41290: PUSH
41291: LD_INT 0
41293: PUSH
41294: LD_INT 0
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 0
41303: PUSH
41304: LD_INT 1
41306: NEG
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 1
41314: PUSH
41315: LD_INT 0
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 1
41324: PUSH
41325: LD_INT 1
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 0
41334: PUSH
41335: LD_INT 1
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 1
41344: NEG
41345: PUSH
41346: LD_INT 0
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 1
41355: NEG
41356: PUSH
41357: LD_INT 1
41359: NEG
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 1
41367: NEG
41368: PUSH
41369: LD_INT 2
41371: NEG
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: LD_INT 2
41382: NEG
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 1
41390: PUSH
41391: LD_INT 1
41393: NEG
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 2
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 2
41411: PUSH
41412: LD_INT 1
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 2
41421: PUSH
41422: LD_INT 2
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 1
41431: PUSH
41432: LD_INT 2
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 0
41441: PUSH
41442: LD_INT 2
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 1
41451: NEG
41452: PUSH
41453: LD_INT 1
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 2
41462: NEG
41463: PUSH
41464: LD_INT 0
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 2
41473: NEG
41474: PUSH
41475: LD_INT 1
41477: NEG
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 2
41485: NEG
41486: PUSH
41487: LD_INT 2
41489: NEG
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41516: LD_ADDR_VAR 0 18
41520: PUSH
41521: LD_INT 0
41523: PUSH
41524: LD_INT 0
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 0
41533: PUSH
41534: LD_INT 1
41536: NEG
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 1
41544: PUSH
41545: LD_INT 0
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 1
41554: PUSH
41555: LD_INT 1
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 0
41564: PUSH
41565: LD_INT 1
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 1
41574: NEG
41575: PUSH
41576: LD_INT 0
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 1
41585: NEG
41586: PUSH
41587: LD_INT 1
41589: NEG
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 1
41597: NEG
41598: PUSH
41599: LD_INT 2
41601: NEG
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 0
41609: PUSH
41610: LD_INT 2
41612: NEG
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 1
41620: PUSH
41621: LD_INT 1
41623: NEG
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 2
41631: PUSH
41632: LD_INT 0
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 2
41641: PUSH
41642: LD_INT 1
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 2
41651: PUSH
41652: LD_INT 2
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 1
41661: PUSH
41662: LD_INT 2
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 0
41671: PUSH
41672: LD_INT 2
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 1
41681: NEG
41682: PUSH
41683: LD_INT 1
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 2
41692: NEG
41693: PUSH
41694: LD_INT 0
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 2
41703: NEG
41704: PUSH
41705: LD_INT 1
41707: NEG
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 2
41715: NEG
41716: PUSH
41717: LD_INT 2
41719: NEG
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41746: LD_ADDR_VAR 0 19
41750: PUSH
41751: LD_INT 0
41753: PUSH
41754: LD_INT 0
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 0
41763: PUSH
41764: LD_INT 1
41766: NEG
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 1
41774: PUSH
41775: LD_INT 0
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 1
41784: PUSH
41785: LD_INT 1
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 0
41794: PUSH
41795: LD_INT 1
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 1
41804: NEG
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 1
41815: NEG
41816: PUSH
41817: LD_INT 1
41819: NEG
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 1
41827: NEG
41828: PUSH
41829: LD_INT 2
41831: NEG
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 0
41839: PUSH
41840: LD_INT 2
41842: NEG
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 1
41850: PUSH
41851: LD_INT 1
41853: NEG
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 2
41861: PUSH
41862: LD_INT 0
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 2
41871: PUSH
41872: LD_INT 1
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 2
41881: PUSH
41882: LD_INT 2
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 1
41891: PUSH
41892: LD_INT 2
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 0
41901: PUSH
41902: LD_INT 2
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 1
41911: NEG
41912: PUSH
41913: LD_INT 1
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 2
41922: NEG
41923: PUSH
41924: LD_INT 0
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 2
41933: NEG
41934: PUSH
41935: LD_INT 1
41937: NEG
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 2
41945: NEG
41946: PUSH
41947: LD_INT 2
41949: NEG
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41976: LD_ADDR_VAR 0 20
41980: PUSH
41981: LD_INT 0
41983: PUSH
41984: LD_INT 0
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 0
41993: PUSH
41994: LD_INT 1
41996: NEG
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 1
42004: PUSH
42005: LD_INT 0
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 1
42014: PUSH
42015: LD_INT 1
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 0
42024: PUSH
42025: LD_INT 1
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 1
42034: NEG
42035: PUSH
42036: LD_INT 0
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 1
42045: NEG
42046: PUSH
42047: LD_INT 1
42049: NEG
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 1
42057: NEG
42058: PUSH
42059: LD_INT 2
42061: NEG
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 0
42069: PUSH
42070: LD_INT 2
42072: NEG
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 1
42080: PUSH
42081: LD_INT 1
42083: NEG
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 2
42091: PUSH
42092: LD_INT 0
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 2
42101: PUSH
42102: LD_INT 1
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 2
42111: PUSH
42112: LD_INT 2
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 1
42121: PUSH
42122: LD_INT 2
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 0
42131: PUSH
42132: LD_INT 2
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 1
42141: NEG
42142: PUSH
42143: LD_INT 1
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 2
42152: NEG
42153: PUSH
42154: LD_INT 0
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 2
42163: NEG
42164: PUSH
42165: LD_INT 1
42167: NEG
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 2
42175: NEG
42176: PUSH
42177: LD_INT 2
42179: NEG
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42206: LD_ADDR_VAR 0 21
42210: PUSH
42211: LD_INT 0
42213: PUSH
42214: LD_INT 0
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 0
42223: PUSH
42224: LD_INT 1
42226: NEG
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 1
42234: PUSH
42235: LD_INT 0
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 1
42244: PUSH
42245: LD_INT 1
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 0
42254: PUSH
42255: LD_INT 1
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 1
42264: NEG
42265: PUSH
42266: LD_INT 0
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 1
42275: NEG
42276: PUSH
42277: LD_INT 1
42279: NEG
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 1
42287: NEG
42288: PUSH
42289: LD_INT 2
42291: NEG
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 0
42299: PUSH
42300: LD_INT 2
42302: NEG
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 1
42310: PUSH
42311: LD_INT 1
42313: NEG
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 2
42321: PUSH
42322: LD_INT 0
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 2
42331: PUSH
42332: LD_INT 1
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 2
42341: PUSH
42342: LD_INT 2
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 1
42351: PUSH
42352: LD_INT 2
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 0
42361: PUSH
42362: LD_INT 2
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 1
42371: NEG
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 2
42382: NEG
42383: PUSH
42384: LD_INT 0
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 2
42393: NEG
42394: PUSH
42395: LD_INT 1
42397: NEG
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 2
42405: NEG
42406: PUSH
42407: LD_INT 2
42409: NEG
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42436: LD_ADDR_VAR 0 22
42440: PUSH
42441: LD_INT 0
42443: PUSH
42444: LD_INT 0
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 0
42453: PUSH
42454: LD_INT 1
42456: NEG
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 1
42464: PUSH
42465: LD_INT 0
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 1
42474: PUSH
42475: LD_INT 1
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 0
42484: PUSH
42485: LD_INT 1
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 1
42494: NEG
42495: PUSH
42496: LD_INT 0
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 1
42505: NEG
42506: PUSH
42507: LD_INT 1
42509: NEG
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 1
42517: NEG
42518: PUSH
42519: LD_INT 2
42521: NEG
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 0
42529: PUSH
42530: LD_INT 2
42532: NEG
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 1
42540: PUSH
42541: LD_INT 1
42543: NEG
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 2
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 2
42561: PUSH
42562: LD_INT 1
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 2
42571: PUSH
42572: LD_INT 2
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 1
42581: PUSH
42582: LD_INT 2
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 0
42591: PUSH
42592: LD_INT 2
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 1
42601: NEG
42602: PUSH
42603: LD_INT 1
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 2
42612: NEG
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 2
42623: NEG
42624: PUSH
42625: LD_INT 1
42627: NEG
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 2
42635: NEG
42636: PUSH
42637: LD_INT 2
42639: NEG
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42666: LD_ADDR_VAR 0 23
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: LD_INT 0
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 0
42683: PUSH
42684: LD_INT 1
42686: NEG
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 1
42694: PUSH
42695: LD_INT 0
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 1
42704: PUSH
42705: LD_INT 1
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 0
42714: PUSH
42715: LD_INT 1
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 1
42724: NEG
42725: PUSH
42726: LD_INT 0
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 1
42735: NEG
42736: PUSH
42737: LD_INT 1
42739: NEG
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 1
42747: NEG
42748: PUSH
42749: LD_INT 2
42751: NEG
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 0
42759: PUSH
42760: LD_INT 2
42762: NEG
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 1
42770: PUSH
42771: LD_INT 1
42773: NEG
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 2
42781: PUSH
42782: LD_INT 0
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 2
42791: PUSH
42792: LD_INT 1
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 2
42801: PUSH
42802: LD_INT 2
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 1
42811: PUSH
42812: LD_INT 2
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 0
42821: PUSH
42822: LD_INT 2
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 1
42831: NEG
42832: PUSH
42833: LD_INT 1
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 2
42842: NEG
42843: PUSH
42844: LD_INT 0
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 2
42853: NEG
42854: PUSH
42855: LD_INT 1
42857: NEG
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 2
42865: NEG
42866: PUSH
42867: LD_INT 2
42869: NEG
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 2
42877: NEG
42878: PUSH
42879: LD_INT 3
42881: NEG
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 1
42889: NEG
42890: PUSH
42891: LD_INT 3
42893: NEG
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 1
42901: PUSH
42902: LD_INT 2
42904: NEG
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 2
42912: PUSH
42913: LD_INT 1
42915: NEG
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42946: LD_ADDR_VAR 0 24
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: LD_INT 0
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 0
42963: PUSH
42964: LD_INT 1
42966: NEG
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 1
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 1
42984: PUSH
42985: LD_INT 1
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 0
42994: PUSH
42995: LD_INT 1
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: LD_INT 0
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 1
43015: NEG
43016: PUSH
43017: LD_INT 1
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 1
43027: NEG
43028: PUSH
43029: LD_INT 2
43031: NEG
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 0
43039: PUSH
43040: LD_INT 2
43042: NEG
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 1
43050: PUSH
43051: LD_INT 1
43053: NEG
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 2
43061: PUSH
43062: LD_INT 0
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 2
43071: PUSH
43072: LD_INT 1
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 2
43081: PUSH
43082: LD_INT 2
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 1
43091: PUSH
43092: LD_INT 2
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 0
43101: PUSH
43102: LD_INT 2
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 1
43111: NEG
43112: PUSH
43113: LD_INT 1
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 2
43122: NEG
43123: PUSH
43124: LD_INT 0
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 2
43133: NEG
43134: PUSH
43135: LD_INT 1
43137: NEG
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 2
43145: NEG
43146: PUSH
43147: LD_INT 2
43149: NEG
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 1
43157: PUSH
43158: LD_INT 2
43160: NEG
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 2
43168: PUSH
43169: LD_INT 1
43171: NEG
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 3
43179: PUSH
43180: LD_INT 1
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 3
43189: PUSH
43190: LD_INT 2
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43222: LD_ADDR_VAR 0 25
43226: PUSH
43227: LD_INT 0
43229: PUSH
43230: LD_INT 0
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 0
43239: PUSH
43240: LD_INT 1
43242: NEG
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 1
43250: PUSH
43251: LD_INT 0
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 1
43260: PUSH
43261: LD_INT 1
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 0
43270: PUSH
43271: LD_INT 1
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 1
43280: NEG
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 1
43291: NEG
43292: PUSH
43293: LD_INT 1
43295: NEG
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 1
43303: NEG
43304: PUSH
43305: LD_INT 2
43307: NEG
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: LD_INT 2
43318: NEG
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: PUSH
43327: LD_INT 1
43329: NEG
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 2
43337: PUSH
43338: LD_INT 0
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 2
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 2
43357: PUSH
43358: LD_INT 2
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 1
43367: PUSH
43368: LD_INT 2
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: LD_INT 2
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 1
43387: NEG
43388: PUSH
43389: LD_INT 1
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 2
43398: NEG
43399: PUSH
43400: LD_INT 0
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 2
43409: NEG
43410: PUSH
43411: LD_INT 1
43413: NEG
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 2
43421: NEG
43422: PUSH
43423: LD_INT 2
43425: NEG
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 3
43433: PUSH
43434: LD_INT 1
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 3
43443: PUSH
43444: LD_INT 2
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 2
43453: PUSH
43454: LD_INT 3
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 1
43463: PUSH
43464: LD_INT 3
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43496: LD_ADDR_VAR 0 26
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 0
43513: PUSH
43514: LD_INT 1
43516: NEG
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 1
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 1
43534: PUSH
43535: LD_INT 1
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 0
43544: PUSH
43545: LD_INT 1
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 1
43554: NEG
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 1
43565: NEG
43566: PUSH
43567: LD_INT 1
43569: NEG
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 1
43577: NEG
43578: PUSH
43579: LD_INT 2
43581: NEG
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 0
43589: PUSH
43590: LD_INT 2
43592: NEG
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 1
43600: PUSH
43601: LD_INT 1
43603: NEG
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 2
43611: PUSH
43612: LD_INT 0
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 2
43621: PUSH
43622: LD_INT 1
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 2
43631: PUSH
43632: LD_INT 2
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 1
43641: PUSH
43642: LD_INT 2
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: LD_INT 2
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 1
43661: NEG
43662: PUSH
43663: LD_INT 1
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 2
43672: NEG
43673: PUSH
43674: LD_INT 0
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 2
43683: NEG
43684: PUSH
43685: LD_INT 1
43687: NEG
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 2
43695: NEG
43696: PUSH
43697: LD_INT 2
43699: NEG
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 2
43707: PUSH
43708: LD_INT 3
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 1
43717: PUSH
43718: LD_INT 3
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 1
43727: NEG
43728: PUSH
43729: LD_INT 2
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 2
43738: NEG
43739: PUSH
43740: LD_INT 1
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43772: LD_ADDR_VAR 0 27
43776: PUSH
43777: LD_INT 0
43779: PUSH
43780: LD_INT 0
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 0
43789: PUSH
43790: LD_INT 1
43792: NEG
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 1
43800: PUSH
43801: LD_INT 0
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: LD_INT 1
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 0
43820: PUSH
43821: LD_INT 1
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 1
43830: NEG
43831: PUSH
43832: LD_INT 0
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 1
43841: NEG
43842: PUSH
43843: LD_INT 1
43845: NEG
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 1
43853: NEG
43854: PUSH
43855: LD_INT 2
43857: NEG
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: LD_INT 2
43868: NEG
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 1
43876: PUSH
43877: LD_INT 1
43879: NEG
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 2
43887: PUSH
43888: LD_INT 0
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 2
43897: PUSH
43898: LD_INT 1
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 2
43907: PUSH
43908: LD_INT 2
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 1
43917: PUSH
43918: LD_INT 2
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: LD_INT 2
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 1
43937: NEG
43938: PUSH
43939: LD_INT 1
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 2
43948: NEG
43949: PUSH
43950: LD_INT 0
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 2
43959: NEG
43960: PUSH
43961: LD_INT 1
43963: NEG
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 2
43971: NEG
43972: PUSH
43973: LD_INT 2
43975: NEG
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 1
43983: NEG
43984: PUSH
43985: LD_INT 2
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 2
43994: NEG
43995: PUSH
43996: LD_INT 1
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 3
44005: NEG
44006: PUSH
44007: LD_INT 1
44009: NEG
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 3
44017: NEG
44018: PUSH
44019: LD_INT 2
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44052: LD_ADDR_VAR 0 28
44056: PUSH
44057: LD_INT 0
44059: PUSH
44060: LD_INT 0
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 0
44069: PUSH
44070: LD_INT 1
44072: NEG
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 1
44080: PUSH
44081: LD_INT 0
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: LD_INT 1
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 0
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 1
44110: NEG
44111: PUSH
44112: LD_INT 0
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 1
44121: NEG
44122: PUSH
44123: LD_INT 1
44125: NEG
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 1
44133: NEG
44134: PUSH
44135: LD_INT 2
44137: NEG
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: LD_INT 2
44148: NEG
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 1
44156: PUSH
44157: LD_INT 1
44159: NEG
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 2
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 2
44177: PUSH
44178: LD_INT 1
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 2
44187: PUSH
44188: LD_INT 2
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 1
44197: PUSH
44198: LD_INT 2
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 0
44207: PUSH
44208: LD_INT 2
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 1
44217: NEG
44218: PUSH
44219: LD_INT 1
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 2
44228: NEG
44229: PUSH
44230: LD_INT 0
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 2
44239: NEG
44240: PUSH
44241: LD_INT 1
44243: NEG
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 2
44251: NEG
44252: PUSH
44253: LD_INT 2
44255: NEG
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 2
44263: NEG
44264: PUSH
44265: LD_INT 3
44267: NEG
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 1
44275: NEG
44276: PUSH
44277: LD_INT 3
44279: NEG
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 3
44287: NEG
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 3
44299: NEG
44300: PUSH
44301: LD_INT 2
44303: NEG
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44334: LD_ADDR_VAR 0 29
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: LD_INT 0
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: LD_INT 1
44354: NEG
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 1
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 0
44382: PUSH
44383: LD_INT 1
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 1
44392: NEG
44393: PUSH
44394: LD_INT 0
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: LD_INT 1
44407: NEG
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: LD_INT 2
44419: NEG
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 0
44427: PUSH
44428: LD_INT 2
44430: NEG
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 1
44438: PUSH
44439: LD_INT 1
44441: NEG
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 2
44449: PUSH
44450: LD_INT 0
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 2
44459: PUSH
44460: LD_INT 1
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 1
44469: PUSH
44470: LD_INT 2
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 0
44479: PUSH
44480: LD_INT 2
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 1
44489: NEG
44490: PUSH
44491: LD_INT 1
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 2
44500: NEG
44501: PUSH
44502: LD_INT 1
44504: NEG
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 2
44512: NEG
44513: PUSH
44514: LD_INT 2
44516: NEG
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 2
44524: NEG
44525: PUSH
44526: LD_INT 3
44528: NEG
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 2
44536: PUSH
44537: LD_INT 1
44539: NEG
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 3
44547: PUSH
44548: LD_INT 1
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 1
44557: PUSH
44558: LD_INT 3
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 1
44567: NEG
44568: PUSH
44569: LD_INT 2
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 3
44578: NEG
44579: PUSH
44580: LD_INT 2
44582: NEG
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44613: LD_ADDR_VAR 0 30
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: LD_INT 0
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: LD_INT 1
44633: NEG
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 1
44641: PUSH
44642: LD_INT 0
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 1
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: LD_INT 1
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 1
44671: NEG
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 1
44682: NEG
44683: PUSH
44684: LD_INT 1
44686: NEG
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 1
44694: NEG
44695: PUSH
44696: LD_INT 2
44698: NEG
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 0
44706: PUSH
44707: LD_INT 2
44709: NEG
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 1
44717: PUSH
44718: LD_INT 1
44720: NEG
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 2
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 2
44738: PUSH
44739: LD_INT 1
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 2
44748: PUSH
44749: LD_INT 2
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: LD_INT 2
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 1
44768: NEG
44769: PUSH
44770: LD_INT 1
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 2
44779: NEG
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 2
44790: NEG
44791: PUSH
44792: LD_INT 1
44794: NEG
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 1
44802: NEG
44803: PUSH
44804: LD_INT 3
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: LD_INT 2
44817: NEG
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 3
44825: PUSH
44826: LD_INT 2
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 2
44835: PUSH
44836: LD_INT 3
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 2
44845: NEG
44846: PUSH
44847: LD_INT 1
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 3
44856: NEG
44857: PUSH
44858: LD_INT 1
44860: NEG
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44891: LD_ADDR_VAR 0 31
44895: PUSH
44896: LD_INT 0
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 0
44908: PUSH
44909: LD_INT 1
44911: NEG
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 1
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 1
44929: PUSH
44930: LD_INT 1
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 0
44939: PUSH
44940: LD_INT 1
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 1
44949: NEG
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 1
44960: NEG
44961: PUSH
44962: LD_INT 1
44964: NEG
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 1
44972: NEG
44973: PUSH
44974: LD_INT 2
44976: NEG
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 1
44984: PUSH
44985: LD_INT 1
44987: NEG
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 2
44995: PUSH
44996: LD_INT 0
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 2
45005: PUSH
45006: LD_INT 1
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 2
45015: PUSH
45016: LD_INT 2
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: LD_INT 2
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 0
45035: PUSH
45036: LD_INT 2
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 1
45045: NEG
45046: PUSH
45047: LD_INT 1
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 2
45056: NEG
45057: PUSH
45058: LD_INT 1
45060: NEG
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 2
45068: NEG
45069: PUSH
45070: LD_INT 2
45072: NEG
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 2
45080: NEG
45081: PUSH
45082: LD_INT 3
45084: NEG
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 2
45092: PUSH
45093: LD_INT 1
45095: NEG
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 3
45103: PUSH
45104: LD_INT 1
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 1
45113: PUSH
45114: LD_INT 3
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 1
45123: NEG
45124: PUSH
45125: LD_INT 2
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 3
45134: NEG
45135: PUSH
45136: LD_INT 2
45138: NEG
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45169: LD_ADDR_VAR 0 32
45173: PUSH
45174: LD_INT 0
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: LD_INT 1
45189: NEG
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: LD_INT 0
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 1
45207: PUSH
45208: LD_INT 1
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 0
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: PUSH
45240: LD_INT 1
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 1
45250: NEG
45251: PUSH
45252: LD_INT 2
45254: NEG
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 0
45262: PUSH
45263: LD_INT 2
45265: NEG
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 1
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 2
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 2
45294: PUSH
45295: LD_INT 2
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: LD_INT 2
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: LD_INT 2
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: LD_INT 1
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 2
45335: NEG
45336: PUSH
45337: LD_INT 0
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 2
45346: NEG
45347: PUSH
45348: LD_INT 1
45350: NEG
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 1
45358: NEG
45359: PUSH
45360: LD_INT 3
45362: NEG
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 1
45370: PUSH
45371: LD_INT 2
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 3
45381: PUSH
45382: LD_INT 2
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 2
45391: PUSH
45392: LD_INT 3
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 2
45401: NEG
45402: PUSH
45403: LD_INT 1
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 3
45412: NEG
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45447: LD_ADDR_VAR 0 33
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 0
45464: PUSH
45465: LD_INT 1
45467: NEG
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 1
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 1
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 0
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: LD_INT 1
45520: NEG
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 1
45528: NEG
45529: PUSH
45530: LD_INT 2
45532: NEG
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 1
45540: PUSH
45541: LD_INT 1
45543: NEG
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 2
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: PUSH
45572: LD_INT 2
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 0
45581: PUSH
45582: LD_INT 2
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 1
45591: NEG
45592: PUSH
45593: LD_INT 1
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 2
45602: NEG
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 2
45613: NEG
45614: PUSH
45615: LD_INT 1
45617: NEG
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 2
45625: NEG
45626: PUSH
45627: LD_INT 2
45629: NEG
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 2
45637: NEG
45638: PUSH
45639: LD_INT 3
45641: NEG
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 2
45649: PUSH
45650: LD_INT 1
45652: NEG
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 3
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 1
45670: PUSH
45671: LD_INT 3
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 1
45680: NEG
45681: PUSH
45682: LD_INT 2
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 3
45691: NEG
45692: PUSH
45693: LD_INT 2
45695: NEG
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45726: LD_ADDR_VAR 0 34
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: LD_INT 0
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 0
45743: PUSH
45744: LD_INT 1
45746: NEG
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 1
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 1
45764: PUSH
45765: LD_INT 1
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: LD_INT 1
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 1
45784: NEG
45785: PUSH
45786: LD_INT 0
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 1
45795: NEG
45796: PUSH
45797: LD_INT 1
45799: NEG
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 1
45807: NEG
45808: PUSH
45809: LD_INT 2
45811: NEG
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: LD_INT 2
45822: NEG
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 1
45830: PUSH
45831: LD_INT 1
45833: NEG
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 2
45841: PUSH
45842: LD_INT 1
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 2
45851: PUSH
45852: LD_INT 2
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 1
45861: PUSH
45862: LD_INT 2
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 1
45871: NEG
45872: PUSH
45873: LD_INT 1
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 2
45882: NEG
45883: PUSH
45884: LD_INT 0
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 2
45893: NEG
45894: PUSH
45895: LD_INT 1
45897: NEG
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 2
45905: NEG
45906: PUSH
45907: LD_INT 2
45909: NEG
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 1
45917: NEG
45918: PUSH
45919: LD_INT 3
45921: NEG
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 1
45929: PUSH
45930: LD_INT 2
45932: NEG
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 3
45940: PUSH
45941: LD_INT 2
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 2
45950: PUSH
45951: LD_INT 3
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 2
45960: NEG
45961: PUSH
45962: LD_INT 1
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 3
45971: NEG
45972: PUSH
45973: LD_INT 1
45975: NEG
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46006: LD_ADDR_VAR 0 35
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 0
46023: PUSH
46024: LD_INT 1
46026: NEG
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 1
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: LD_INT 1
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 1
46064: NEG
46065: PUSH
46066: LD_INT 0
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 1
46075: NEG
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 2
46087: PUSH
46088: LD_INT 1
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 2
46097: NEG
46098: PUSH
46099: LD_INT 1
46101: NEG
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46118: LD_ADDR_VAR 0 36
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: LD_INT 0
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 0
46135: PUSH
46136: LD_INT 1
46138: NEG
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 1
46146: PUSH
46147: LD_INT 0
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 1
46156: PUSH
46157: LD_INT 1
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 0
46166: PUSH
46167: LD_INT 1
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 1
46176: NEG
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 1
46187: NEG
46188: PUSH
46189: LD_INT 1
46191: NEG
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 1
46199: NEG
46200: PUSH
46201: LD_INT 2
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 1
46211: PUSH
46212: LD_INT 2
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46230: LD_ADDR_VAR 0 37
46234: PUSH
46235: LD_INT 0
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: LD_INT 1
46250: NEG
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: PUSH
46259: LD_INT 0
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 1
46268: PUSH
46269: LD_INT 1
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 0
46278: PUSH
46279: LD_INT 1
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: NEG
46289: PUSH
46290: LD_INT 0
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 1
46299: NEG
46300: PUSH
46301: LD_INT 1
46303: NEG
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 1
46311: PUSH
46312: LD_INT 1
46314: NEG
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 1
46322: NEG
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46342: LD_ADDR_VAR 0 38
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: LD_INT 0
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 0
46359: PUSH
46360: LD_INT 1
46362: NEG
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 1
46370: PUSH
46371: LD_INT 0
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: LD_INT 1
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: LD_INT 1
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 1
46400: NEG
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: NEG
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 2
46423: PUSH
46424: LD_INT 1
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 2
46433: NEG
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46454: LD_ADDR_VAR 0 39
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: LD_INT 0
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 0
46471: PUSH
46472: LD_INT 1
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 1
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 1
46512: NEG
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 1
46535: NEG
46536: PUSH
46537: LD_INT 2
46539: NEG
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 1
46547: PUSH
46548: LD_INT 2
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46566: LD_ADDR_VAR 0 40
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: LD_INT 1
46586: NEG
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 0
46614: PUSH
46615: LD_INT 1
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 1
46624: NEG
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 1
46635: NEG
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: PUSH
46648: LD_INT 1
46650: NEG
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 1
46658: NEG
46659: PUSH
46660: LD_INT 1
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46678: LD_ADDR_VAR 0 41
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: LD_INT 0
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 0
46695: PUSH
46696: LD_INT 1
46698: NEG
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 1
46706: PUSH
46707: LD_INT 0
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: LD_INT 1
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 0
46726: PUSH
46727: LD_INT 1
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 1
46736: NEG
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 1
46747: NEG
46748: PUSH
46749: LD_INT 1
46751: NEG
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 1
46759: NEG
46760: PUSH
46761: LD_INT 2
46763: NEG
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: LD_INT 1
46774: NEG
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 2
46782: PUSH
46783: LD_INT 0
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 2
46792: PUSH
46793: LD_INT 1
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 2
46802: PUSH
46803: LD_INT 2
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 1
46812: PUSH
46813: LD_INT 2
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 1
46822: NEG
46823: PUSH
46824: LD_INT 1
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 2
46833: NEG
46834: PUSH
46835: LD_INT 0
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 2
46844: NEG
46845: PUSH
46846: LD_INT 1
46848: NEG
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 2
46856: NEG
46857: PUSH
46858: LD_INT 2
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 2
46868: NEG
46869: PUSH
46870: LD_INT 3
46872: NEG
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 2
46880: PUSH
46881: LD_INT 1
46883: NEG
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 3
46891: PUSH
46892: LD_INT 0
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 3
46901: PUSH
46902: LD_INT 1
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 3
46911: PUSH
46912: LD_INT 2
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 3
46921: PUSH
46922: LD_INT 3
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 2
46931: PUSH
46932: LD_INT 3
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 2
46941: NEG
46942: PUSH
46943: LD_INT 1
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 3
46952: NEG
46953: PUSH
46954: LD_INT 0
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 3
46963: NEG
46964: PUSH
46965: LD_INT 1
46967: NEG
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 3
46975: NEG
46976: PUSH
46977: LD_INT 2
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 3
46987: NEG
46988: PUSH
46989: LD_INT 3
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47028: LD_ADDR_VAR 0 42
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: LD_INT 0
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: LD_INT 1
47048: NEG
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 1
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 1
47066: PUSH
47067: LD_INT 1
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: LD_INT 1
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 1
47086: NEG
47087: PUSH
47088: LD_INT 0
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 1
47097: NEG
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 1
47109: NEG
47110: PUSH
47111: LD_INT 2
47113: NEG
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 0
47121: PUSH
47122: LD_INT 2
47124: NEG
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 1
47132: PUSH
47133: LD_INT 1
47135: NEG
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 2
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 2
47153: PUSH
47154: LD_INT 2
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 1
47163: PUSH
47164: LD_INT 2
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 0
47173: PUSH
47174: LD_INT 2
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: LD_INT 1
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 2
47194: NEG
47195: PUSH
47196: LD_INT 1
47198: NEG
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 2
47206: NEG
47207: PUSH
47208: LD_INT 2
47210: NEG
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 2
47218: NEG
47219: PUSH
47220: LD_INT 3
47222: NEG
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 1
47230: NEG
47231: PUSH
47232: LD_INT 3
47234: NEG
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 0
47242: PUSH
47243: LD_INT 3
47245: NEG
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: PUSH
47254: LD_INT 2
47256: NEG
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 3
47264: PUSH
47265: LD_INT 2
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 3
47274: PUSH
47275: LD_INT 3
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 2
47284: PUSH
47285: LD_INT 3
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: LD_INT 3
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: LD_INT 3
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 1
47314: NEG
47315: PUSH
47316: LD_INT 2
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 3
47325: NEG
47326: PUSH
47327: LD_INT 2
47329: NEG
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 3
47337: NEG
47338: PUSH
47339: LD_INT 3
47341: NEG
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47378: LD_ADDR_VAR 0 43
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: LD_INT 0
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 0
47395: PUSH
47396: LD_INT 1
47398: NEG
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 1
47406: PUSH
47407: LD_INT 0
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 1
47416: PUSH
47417: LD_INT 1
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 0
47426: PUSH
47427: LD_INT 1
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 1
47436: NEG
47437: PUSH
47438: LD_INT 0
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 1
47447: NEG
47448: PUSH
47449: LD_INT 1
47451: NEG
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 1
47459: NEG
47460: PUSH
47461: LD_INT 2
47463: NEG
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: LD_INT 2
47474: NEG
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 1
47482: PUSH
47483: LD_INT 1
47485: NEG
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 2
47493: PUSH
47494: LD_INT 0
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 2
47503: PUSH
47504: LD_INT 1
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 1
47513: PUSH
47514: LD_INT 2
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: LD_INT 2
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: LD_INT 1
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 2
47544: NEG
47545: PUSH
47546: LD_INT 0
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 2
47555: NEG
47556: PUSH
47557: LD_INT 1
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: LD_INT 3
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: LD_INT 3
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 1
47590: PUSH
47591: LD_INT 2
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 2
47601: PUSH
47602: LD_INT 1
47604: NEG
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 3
47612: PUSH
47613: LD_INT 0
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 3
47622: PUSH
47623: LD_INT 1
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: LD_INT 3
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: LD_INT 3
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: LD_INT 2
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 2
47663: NEG
47664: PUSH
47665: LD_INT 1
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 3
47674: NEG
47675: PUSH
47676: LD_INT 0
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 3
47685: NEG
47686: PUSH
47687: LD_INT 1
47689: NEG
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47726: LD_ADDR_VAR 0 44
47730: PUSH
47731: LD_INT 0
47733: PUSH
47734: LD_INT 0
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 0
47743: PUSH
47744: LD_INT 1
47746: NEG
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 1
47754: PUSH
47755: LD_INT 0
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 1
47764: PUSH
47765: LD_INT 1
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 0
47774: PUSH
47775: LD_INT 1
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 1
47784: NEG
47785: PUSH
47786: LD_INT 0
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 1
47795: NEG
47796: PUSH
47797: LD_INT 1
47799: NEG
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 1
47807: NEG
47808: PUSH
47809: LD_INT 2
47811: NEG
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: PUSH
47820: LD_INT 1
47822: NEG
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 2
47830: PUSH
47831: LD_INT 0
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 2
47840: PUSH
47841: LD_INT 1
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 2
47850: PUSH
47851: LD_INT 2
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 1
47860: PUSH
47861: LD_INT 2
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 1
47870: NEG
47871: PUSH
47872: LD_INT 1
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 2
47881: NEG
47882: PUSH
47883: LD_INT 0
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 2
47892: NEG
47893: PUSH
47894: LD_INT 1
47896: NEG
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 2
47904: NEG
47905: PUSH
47906: LD_INT 2
47908: NEG
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 2
47916: NEG
47917: PUSH
47918: LD_INT 3
47920: NEG
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 2
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 3
47939: PUSH
47940: LD_INT 0
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 3
47949: PUSH
47950: LD_INT 1
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 3
47959: PUSH
47960: LD_INT 2
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 3
47969: PUSH
47970: LD_INT 3
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 2
47979: PUSH
47980: LD_INT 3
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 2
47989: NEG
47990: PUSH
47991: LD_INT 1
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 3
48000: NEG
48001: PUSH
48002: LD_INT 0
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 3
48011: NEG
48012: PUSH
48013: LD_INT 1
48015: NEG
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 3
48023: NEG
48024: PUSH
48025: LD_INT 2
48027: NEG
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 3
48035: NEG
48036: PUSH
48037: LD_INT 3
48039: NEG
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48076: LD_ADDR_VAR 0 45
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: PUSH
48105: LD_INT 0
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: LD_INT 1
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 0
48124: PUSH
48125: LD_INT 1
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 1
48134: NEG
48135: PUSH
48136: LD_INT 0
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: LD_INT 1
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 1
48157: NEG
48158: PUSH
48159: LD_INT 2
48161: NEG
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 0
48169: PUSH
48170: LD_INT 2
48172: NEG
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 2
48191: PUSH
48192: LD_INT 1
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 2
48201: PUSH
48202: LD_INT 2
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 1
48211: PUSH
48212: LD_INT 2
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 0
48221: PUSH
48222: LD_INT 2
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 1
48231: NEG
48232: PUSH
48233: LD_INT 1
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 2
48242: NEG
48243: PUSH
48244: LD_INT 1
48246: NEG
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 2
48254: NEG
48255: PUSH
48256: LD_INT 2
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 2
48266: NEG
48267: PUSH
48268: LD_INT 3
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 1
48278: NEG
48279: PUSH
48280: LD_INT 3
48282: NEG
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 0
48290: PUSH
48291: LD_INT 3
48293: NEG
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 1
48301: PUSH
48302: LD_INT 2
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 3
48312: PUSH
48313: LD_INT 2
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 3
48322: PUSH
48323: LD_INT 3
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 2
48332: PUSH
48333: LD_INT 3
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: LD_INT 3
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: LD_INT 3
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 1
48362: NEG
48363: PUSH
48364: LD_INT 2
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 3
48373: NEG
48374: PUSH
48375: LD_INT 2
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 3
48385: NEG
48386: PUSH
48387: LD_INT 3
48389: NEG
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48426: LD_ADDR_VAR 0 46
48430: PUSH
48431: LD_INT 0
48433: PUSH
48434: LD_INT 0
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 0
48443: PUSH
48444: LD_INT 1
48446: NEG
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 1
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 1
48464: PUSH
48465: LD_INT 1
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 0
48474: PUSH
48475: LD_INT 1
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 1
48484: NEG
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 1
48495: NEG
48496: PUSH
48497: LD_INT 1
48499: NEG
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 1
48507: NEG
48508: PUSH
48509: LD_INT 2
48511: NEG
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 0
48519: PUSH
48520: LD_INT 2
48522: NEG
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 1
48530: PUSH
48531: LD_INT 1
48533: NEG
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 2
48541: PUSH
48542: LD_INT 0
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 2
48551: PUSH
48552: LD_INT 1
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 1
48561: PUSH
48562: LD_INT 2
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 0
48571: PUSH
48572: LD_INT 2
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 1
48581: NEG
48582: PUSH
48583: LD_INT 1
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 2
48592: NEG
48593: PUSH
48594: LD_INT 0
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 2
48603: NEG
48604: PUSH
48605: LD_INT 1
48607: NEG
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: LD_INT 3
48619: NEG
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: LD_INT 3
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 1
48638: PUSH
48639: LD_INT 2
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 2
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 3
48660: PUSH
48661: LD_INT 0
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 3
48670: PUSH
48671: LD_INT 1
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 1
48680: PUSH
48681: LD_INT 3
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 0
48690: PUSH
48691: LD_INT 3
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 1
48700: NEG
48701: PUSH
48702: LD_INT 2
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 2
48711: NEG
48712: PUSH
48713: LD_INT 1
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 3
48722: NEG
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 3
48733: NEG
48734: PUSH
48735: LD_INT 1
48737: NEG
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48774: LD_ADDR_VAR 0 47
48778: PUSH
48779: LD_INT 0
48781: PUSH
48782: LD_INT 0
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 1
48802: PUSH
48803: LD_INT 0
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 1
48812: PUSH
48813: LD_INT 1
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: LD_INT 1
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 1
48832: NEG
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 1
48843: NEG
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: LD_INT 2
48859: NEG
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: LD_INT 2
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 2
48889: NEG
48890: PUSH
48891: LD_INT 1
48893: NEG
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 2
48901: NEG
48902: PUSH
48903: LD_INT 2
48905: NEG
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48925: LD_ADDR_VAR 0 48
48929: PUSH
48930: LD_INT 0
48932: PUSH
48933: LD_INT 0
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 0
48942: PUSH
48943: LD_INT 1
48945: NEG
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 1
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: PUSH
48964: LD_INT 1
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: LD_INT 1
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 1
48983: NEG
48984: PUSH
48985: LD_INT 0
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 1
48994: NEG
48995: PUSH
48996: LD_INT 1
48998: NEG
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 1
49006: NEG
49007: PUSH
49008: LD_INT 2
49010: NEG
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 0
49018: PUSH
49019: LD_INT 2
49021: NEG
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 1
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 2
49040: PUSH
49041: LD_INT 0
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 2
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49072: LD_ADDR_VAR 0 49
49076: PUSH
49077: LD_INT 0
49079: PUSH
49080: LD_INT 0
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 0
49089: PUSH
49090: LD_INT 1
49092: NEG
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 1
49100: PUSH
49101: LD_INT 0
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: LD_INT 1
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 0
49120: PUSH
49121: LD_INT 1
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 1
49130: NEG
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: NEG
49142: PUSH
49143: LD_INT 1
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 1
49153: PUSH
49154: LD_INT 1
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 2
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 2
49174: PUSH
49175: LD_INT 1
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 2
49184: PUSH
49185: LD_INT 2
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 1
49194: PUSH
49195: LD_INT 2
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49216: LD_ADDR_VAR 0 50
49220: PUSH
49221: LD_INT 0
49223: PUSH
49224: LD_INT 0
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 0
49233: PUSH
49234: LD_INT 1
49236: NEG
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 1
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: LD_INT 1
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: LD_INT 1
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 1
49274: NEG
49275: PUSH
49276: LD_INT 0
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 1
49285: NEG
49286: PUSH
49287: LD_INT 1
49289: NEG
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 2
49297: PUSH
49298: LD_INT 1
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 2
49307: PUSH
49308: LD_INT 2
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: LD_INT 2
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: LD_INT 2
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49360: LD_ADDR_VAR 0 51
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: LD_INT 0
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: LD_INT 1
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 1
49388: PUSH
49389: LD_INT 0
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: LD_INT 1
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: NEG
49430: PUSH
49431: LD_INT 1
49433: NEG
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 1
49441: PUSH
49442: LD_INT 2
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: LD_INT 2
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 1
49461: NEG
49462: PUSH
49463: LD_INT 1
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 2
49472: NEG
49473: PUSH
49474: LD_INT 0
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 2
49483: NEG
49484: PUSH
49485: LD_INT 1
49487: NEG
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49507: LD_ADDR_VAR 0 52
49511: PUSH
49512: LD_INT 0
49514: PUSH
49515: LD_INT 0
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: LD_INT 1
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 1
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 1
49545: PUSH
49546: LD_INT 1
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 0
49555: PUSH
49556: LD_INT 1
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 1
49565: NEG
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 1
49576: NEG
49577: PUSH
49578: LD_INT 1
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: NEG
49589: PUSH
49590: LD_INT 2
49592: NEG
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: PUSH
49602: LD_INT 1
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 2
49611: NEG
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 2
49622: NEG
49623: PUSH
49624: LD_INT 1
49626: NEG
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 2
49634: NEG
49635: PUSH
49636: LD_INT 2
49638: NEG
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49658: LD_ADDR_VAR 0 53
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 0
49675: PUSH
49676: LD_INT 1
49678: NEG
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: LD_INT 1
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 0
49706: PUSH
49707: LD_INT 1
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 1
49716: NEG
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 1
49727: NEG
49728: PUSH
49729: LD_INT 1
49731: NEG
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 1
49739: NEG
49740: PUSH
49741: LD_INT 2
49743: NEG
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: LD_INT 2
49754: NEG
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 1
49762: PUSH
49763: LD_INT 1
49765: NEG
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 2
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 2
49783: PUSH
49784: LD_INT 1
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 2
49793: PUSH
49794: LD_INT 2
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: LD_INT 2
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 0
49813: PUSH
49814: LD_INT 2
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 1
49823: NEG
49824: PUSH
49825: LD_INT 1
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 2
49834: NEG
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 2
49845: NEG
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 2
49857: NEG
49858: PUSH
49859: LD_INT 2
49861: NEG
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49888: LD_ADDR_VAR 0 54
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 0
49905: PUSH
49906: LD_INT 1
49908: NEG
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 1
49916: PUSH
49917: LD_INT 0
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 1
49926: PUSH
49927: LD_INT 1
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 0
49936: PUSH
49937: LD_INT 1
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 1
49946: NEG
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 1
49957: NEG
49958: PUSH
49959: LD_INT 1
49961: NEG
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 1
49969: NEG
49970: PUSH
49971: LD_INT 2
49973: NEG
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: LD_INT 2
49984: NEG
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: LD_INT 1
49995: NEG
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 2
50003: PUSH
50004: LD_INT 0
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 2
50013: PUSH
50014: LD_INT 1
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 2
50023: PUSH
50024: LD_INT 2
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 1
50033: PUSH
50034: LD_INT 2
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 0
50043: PUSH
50044: LD_INT 2
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 1
50053: NEG
50054: PUSH
50055: LD_INT 1
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 2
50064: NEG
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 2
50075: NEG
50076: PUSH
50077: LD_INT 1
50079: NEG
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 2
50087: NEG
50088: PUSH
50089: LD_INT 2
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50118: LD_ADDR_VAR 0 55
50122: PUSH
50123: LD_INT 0
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: LD_INT 1
50138: NEG
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: LD_INT 0
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: LD_INT 1
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 0
50166: PUSH
50167: LD_INT 1
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 1
50176: NEG
50177: PUSH
50178: LD_INT 0
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 1
50187: NEG
50188: PUSH
50189: LD_INT 1
50191: NEG
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: LD_INT 2
50203: NEG
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 0
50211: PUSH
50212: LD_INT 2
50214: NEG
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 1
50222: PUSH
50223: LD_INT 1
50225: NEG
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 2
50233: PUSH
50234: LD_INT 0
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 2
50243: PUSH
50244: LD_INT 1
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 2
50253: PUSH
50254: LD_INT 2
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 1
50263: PUSH
50264: LD_INT 2
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: LD_INT 2
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: NEG
50284: PUSH
50285: LD_INT 1
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 2
50294: NEG
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 2
50305: NEG
50306: PUSH
50307: LD_INT 1
50309: NEG
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 2
50317: NEG
50318: PUSH
50319: LD_INT 2
50321: NEG
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50348: LD_ADDR_VAR 0 56
50352: PUSH
50353: LD_INT 0
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 0
50365: PUSH
50366: LD_INT 1
50368: NEG
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 1
50376: PUSH
50377: LD_INT 0
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 0
50396: PUSH
50397: LD_INT 1
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 1
50406: NEG
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 1
50417: NEG
50418: PUSH
50419: LD_INT 1
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: LD_INT 2
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: LD_INT 2
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: LD_INT 1
50455: NEG
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 2
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 2
50473: PUSH
50474: LD_INT 1
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 2
50483: PUSH
50484: LD_INT 2
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 1
50493: PUSH
50494: LD_INT 2
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: LD_INT 2
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 1
50513: NEG
50514: PUSH
50515: LD_INT 1
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 2
50524: NEG
50525: PUSH
50526: LD_INT 0
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 2
50535: NEG
50536: PUSH
50537: LD_INT 1
50539: NEG
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 2
50547: NEG
50548: PUSH
50549: LD_INT 2
50551: NEG
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50578: LD_ADDR_VAR 0 57
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 1
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 0
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 1
50636: NEG
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 1
50647: NEG
50648: PUSH
50649: LD_INT 1
50651: NEG
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 1
50659: NEG
50660: PUSH
50661: LD_INT 2
50663: NEG
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: LD_INT 2
50674: NEG
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 1
50682: PUSH
50683: LD_INT 1
50685: NEG
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 2
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 2
50703: PUSH
50704: LD_INT 1
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 2
50713: PUSH
50714: LD_INT 2
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 1
50723: PUSH
50724: LD_INT 2
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 0
50733: PUSH
50734: LD_INT 2
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 1
50743: NEG
50744: PUSH
50745: LD_INT 1
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 2
50754: NEG
50755: PUSH
50756: LD_INT 0
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 2
50765: NEG
50766: PUSH
50767: LD_INT 1
50769: NEG
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 2
50777: NEG
50778: PUSH
50779: LD_INT 2
50781: NEG
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50808: LD_ADDR_VAR 0 58
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 0
50825: PUSH
50826: LD_INT 1
50828: NEG
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 1
50836: PUSH
50837: LD_INT 0
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 1
50846: PUSH
50847: LD_INT 1
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 0
50856: PUSH
50857: LD_INT 1
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 1
50866: NEG
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 1
50877: NEG
50878: PUSH
50879: LD_INT 1
50881: NEG
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 1
50889: NEG
50890: PUSH
50891: LD_INT 2
50893: NEG
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 0
50901: PUSH
50902: LD_INT 2
50904: NEG
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 1
50912: PUSH
50913: LD_INT 1
50915: NEG
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 2
50923: PUSH
50924: LD_INT 0
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 2
50933: PUSH
50934: LD_INT 1
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 2
50943: PUSH
50944: LD_INT 2
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 1
50953: PUSH
50954: LD_INT 2
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 0
50963: PUSH
50964: LD_INT 2
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 1
50973: NEG
50974: PUSH
50975: LD_INT 1
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 2
50984: NEG
50985: PUSH
50986: LD_INT 0
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 2
50995: NEG
50996: PUSH
50997: LD_INT 1
50999: NEG
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 2
51007: NEG
51008: PUSH
51009: LD_INT 2
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51038: LD_ADDR_VAR 0 59
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: LD_INT 0
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: LD_INT 1
51058: NEG
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 1
51066: PUSH
51067: LD_INT 0
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 1
51076: PUSH
51077: LD_INT 1
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 0
51086: PUSH
51087: LD_INT 1
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 1
51096: NEG
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 1
51107: NEG
51108: PUSH
51109: LD_INT 1
51111: NEG
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51126: LD_ADDR_VAR 0 60
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: LD_INT 0
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: LD_INT 1
51146: NEG
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 1
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: LD_INT 1
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: LD_INT 1
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 1
51184: NEG
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: LD_INT 1
51199: NEG
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51214: LD_ADDR_VAR 0 61
51218: PUSH
51219: LD_INT 0
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: LD_INT 1
51234: NEG
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: PUSH
51253: LD_INT 1
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 0
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: LD_INT 0
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 1
51283: NEG
51284: PUSH
51285: LD_INT 1
51287: NEG
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51302: LD_ADDR_VAR 0 62
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: LD_INT 0
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: LD_INT 1
51322: NEG
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 1
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: LD_INT 1
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: LD_INT 1
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 1
51371: NEG
51372: PUSH
51373: LD_INT 1
51375: NEG
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51390: LD_ADDR_VAR 0 63
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: LD_INT 0
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: LD_INT 1
51410: NEG
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 1
51418: PUSH
51419: LD_INT 0
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 1
51428: PUSH
51429: LD_INT 1
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: LD_INT 1
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 1
51448: NEG
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 1
51459: NEG
51460: PUSH
51461: LD_INT 1
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51478: LD_ADDR_VAR 0 64
51482: PUSH
51483: LD_INT 0
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: LD_INT 1
51498: NEG
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: LD_INT 0
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 1
51516: PUSH
51517: LD_INT 1
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: LD_INT 1
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: NEG
51537: PUSH
51538: LD_INT 0
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 1
51547: NEG
51548: PUSH
51549: LD_INT 1
51551: NEG
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: ST_TO_ADDR
// end ; 1 :
51566: GO 57463
51568: LD_INT 1
51570: DOUBLE
51571: EQUAL
51572: IFTRUE 51576
51574: GO 54199
51576: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51577: LD_ADDR_VAR 0 11
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: LD_INT 3
51588: NEG
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: LD_INT 3
51599: NEG
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 1
51607: PUSH
51608: LD_INT 2
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: LIST
51620: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51621: LD_ADDR_VAR 0 12
51625: PUSH
51626: LD_INT 2
51628: PUSH
51629: LD_INT 1
51631: NEG
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 3
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 3
51649: PUSH
51650: LD_INT 1
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: LIST
51661: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51662: LD_ADDR_VAR 0 13
51666: PUSH
51667: LD_INT 3
51669: PUSH
51670: LD_INT 2
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 3
51679: PUSH
51680: LD_INT 3
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 2
51689: PUSH
51690: LD_INT 3
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: LIST
51701: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51702: LD_ADDR_VAR 0 14
51706: PUSH
51707: LD_INT 1
51709: PUSH
51710: LD_INT 3
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: LD_INT 3
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: LD_INT 2
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: LIST
51742: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51743: LD_ADDR_VAR 0 15
51747: PUSH
51748: LD_INT 2
51750: NEG
51751: PUSH
51752: LD_INT 1
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 3
51761: NEG
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 3
51772: NEG
51773: PUSH
51774: LD_INT 1
51776: NEG
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: LIST
51786: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51787: LD_ADDR_VAR 0 16
51791: PUSH
51792: LD_INT 2
51794: NEG
51795: PUSH
51796: LD_INT 3
51798: NEG
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 3
51806: NEG
51807: PUSH
51808: LD_INT 2
51810: NEG
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 3
51818: NEG
51819: PUSH
51820: LD_INT 3
51822: NEG
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: LIST
51832: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51833: LD_ADDR_VAR 0 17
51837: PUSH
51838: LD_INT 1
51840: NEG
51841: PUSH
51842: LD_INT 3
51844: NEG
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 0
51852: PUSH
51853: LD_INT 3
51855: NEG
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 1
51863: PUSH
51864: LD_INT 2
51866: NEG
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: LIST
51876: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51877: LD_ADDR_VAR 0 18
51881: PUSH
51882: LD_INT 2
51884: PUSH
51885: LD_INT 1
51887: NEG
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 3
51895: PUSH
51896: LD_INT 0
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 3
51905: PUSH
51906: LD_INT 1
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: LIST
51917: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51918: LD_ADDR_VAR 0 19
51922: PUSH
51923: LD_INT 3
51925: PUSH
51926: LD_INT 2
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 3
51935: PUSH
51936: LD_INT 3
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 2
51945: PUSH
51946: LD_INT 3
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: LIST
51957: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51958: LD_ADDR_VAR 0 20
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: LD_INT 3
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: LD_INT 3
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 1
51985: NEG
51986: PUSH
51987: LD_INT 2
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: LIST
51998: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51999: LD_ADDR_VAR 0 21
52003: PUSH
52004: LD_INT 2
52006: NEG
52007: PUSH
52008: LD_INT 1
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 3
52017: NEG
52018: PUSH
52019: LD_INT 0
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 3
52028: NEG
52029: PUSH
52030: LD_INT 1
52032: NEG
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: LIST
52042: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52043: LD_ADDR_VAR 0 22
52047: PUSH
52048: LD_INT 2
52050: NEG
52051: PUSH
52052: LD_INT 3
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 3
52062: NEG
52063: PUSH
52064: LD_INT 2
52066: NEG
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 3
52074: NEG
52075: PUSH
52076: LD_INT 3
52078: NEG
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: LIST
52088: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52089: LD_ADDR_VAR 0 23
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: LD_INT 3
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 1
52107: NEG
52108: PUSH
52109: LD_INT 4
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: LD_INT 3
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: LIST
52132: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52133: LD_ADDR_VAR 0 24
52137: PUSH
52138: LD_INT 3
52140: PUSH
52141: LD_INT 0
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 3
52150: PUSH
52151: LD_INT 1
52153: NEG
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 4
52161: PUSH
52162: LD_INT 1
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: LIST
52173: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52174: LD_ADDR_VAR 0 25
52178: PUSH
52179: LD_INT 3
52181: PUSH
52182: LD_INT 3
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 4
52191: PUSH
52192: LD_INT 3
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 3
52201: PUSH
52202: LD_INT 4
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: LIST
52213: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52214: LD_ADDR_VAR 0 26
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: LD_INT 3
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 1
52231: PUSH
52232: LD_INT 4
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 1
52241: NEG
52242: PUSH
52243: LD_INT 3
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: LIST
52254: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52255: LD_ADDR_VAR 0 27
52259: PUSH
52260: LD_INT 3
52262: NEG
52263: PUSH
52264: LD_INT 0
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 3
52273: NEG
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 4
52284: NEG
52285: PUSH
52286: LD_INT 1
52288: NEG
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: LIST
52298: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52299: LD_ADDR_VAR 0 28
52303: PUSH
52304: LD_INT 3
52306: NEG
52307: PUSH
52308: LD_INT 3
52310: NEG
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 3
52318: NEG
52319: PUSH
52320: LD_INT 4
52322: NEG
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 4
52330: NEG
52331: PUSH
52332: LD_INT 3
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: LIST
52344: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52345: LD_ADDR_VAR 0 29
52349: PUSH
52350: LD_INT 1
52352: NEG
52353: PUSH
52354: LD_INT 3
52356: NEG
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: LD_INT 3
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 1
52375: PUSH
52376: LD_INT 2
52378: NEG
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 1
52386: NEG
52387: PUSH
52388: LD_INT 4
52390: NEG
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 0
52398: PUSH
52399: LD_INT 4
52401: NEG
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 1
52409: PUSH
52410: LD_INT 3
52412: NEG
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 1
52420: NEG
52421: PUSH
52422: LD_INT 5
52424: NEG
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 0
52432: PUSH
52433: LD_INT 5
52435: NEG
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 1
52443: PUSH
52444: LD_INT 4
52446: NEG
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 1
52454: NEG
52455: PUSH
52456: LD_INT 6
52458: NEG
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: LD_INT 6
52469: NEG
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 1
52477: PUSH
52478: LD_INT 5
52480: NEG
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52500: LD_ADDR_VAR 0 30
52504: PUSH
52505: LD_INT 2
52507: PUSH
52508: LD_INT 1
52510: NEG
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 3
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 3
52528: PUSH
52529: LD_INT 1
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 3
52538: PUSH
52539: LD_INT 1
52541: NEG
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 4
52549: PUSH
52550: LD_INT 0
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 4
52559: PUSH
52560: LD_INT 1
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 4
52569: PUSH
52570: LD_INT 1
52572: NEG
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 5
52580: PUSH
52581: LD_INT 0
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 5
52590: PUSH
52591: LD_INT 1
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 5
52600: PUSH
52601: LD_INT 1
52603: NEG
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 6
52611: PUSH
52612: LD_INT 0
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 6
52621: PUSH
52622: LD_INT 1
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52643: LD_ADDR_VAR 0 31
52647: PUSH
52648: LD_INT 3
52650: PUSH
52651: LD_INT 2
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 3
52660: PUSH
52661: LD_INT 3
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 2
52670: PUSH
52671: LD_INT 3
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 4
52680: PUSH
52681: LD_INT 3
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 4
52690: PUSH
52691: LD_INT 4
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 3
52700: PUSH
52701: LD_INT 4
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 5
52710: PUSH
52711: LD_INT 4
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 5
52720: PUSH
52721: LD_INT 5
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 4
52730: PUSH
52731: LD_INT 5
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 6
52740: PUSH
52741: LD_INT 5
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 6
52750: PUSH
52751: LD_INT 6
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 5
52760: PUSH
52761: LD_INT 6
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52782: LD_ADDR_VAR 0 32
52786: PUSH
52787: LD_INT 1
52789: PUSH
52790: LD_INT 3
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 0
52799: PUSH
52800: LD_INT 3
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 1
52809: NEG
52810: PUSH
52811: LD_INT 2
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 1
52820: PUSH
52821: LD_INT 4
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 0
52830: PUSH
52831: LD_INT 4
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 1
52840: NEG
52841: PUSH
52842: LD_INT 3
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 1
52851: PUSH
52852: LD_INT 5
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 0
52861: PUSH
52862: LD_INT 5
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: LD_INT 4
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 1
52882: PUSH
52883: LD_INT 6
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 0
52892: PUSH
52893: LD_INT 6
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: NEG
52903: PUSH
52904: LD_INT 5
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52925: LD_ADDR_VAR 0 33
52929: PUSH
52930: LD_INT 2
52932: NEG
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 3
52943: NEG
52944: PUSH
52945: LD_INT 0
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 3
52954: NEG
52955: PUSH
52956: LD_INT 1
52958: NEG
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 3
52966: NEG
52967: PUSH
52968: LD_INT 1
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 4
52977: NEG
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 4
52988: NEG
52989: PUSH
52990: LD_INT 1
52992: NEG
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 4
53000: NEG
53001: PUSH
53002: LD_INT 1
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 5
53011: NEG
53012: PUSH
53013: LD_INT 0
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 5
53022: NEG
53023: PUSH
53024: LD_INT 1
53026: NEG
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 5
53034: NEG
53035: PUSH
53036: LD_INT 1
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 6
53045: NEG
53046: PUSH
53047: LD_INT 0
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 6
53056: NEG
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53080: LD_ADDR_VAR 0 34
53084: PUSH
53085: LD_INT 2
53087: NEG
53088: PUSH
53089: LD_INT 3
53091: NEG
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 3
53099: NEG
53100: PUSH
53101: LD_INT 2
53103: NEG
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 3
53111: NEG
53112: PUSH
53113: LD_INT 3
53115: NEG
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 3
53123: NEG
53124: PUSH
53125: LD_INT 4
53127: NEG
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 4
53135: NEG
53136: PUSH
53137: LD_INT 3
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 4
53147: NEG
53148: PUSH
53149: LD_INT 4
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 4
53159: NEG
53160: PUSH
53161: LD_INT 5
53163: NEG
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 5
53171: NEG
53172: PUSH
53173: LD_INT 4
53175: NEG
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 5
53183: NEG
53184: PUSH
53185: LD_INT 5
53187: NEG
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 5
53195: NEG
53196: PUSH
53197: LD_INT 6
53199: NEG
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 6
53207: NEG
53208: PUSH
53209: LD_INT 5
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 6
53219: NEG
53220: PUSH
53221: LD_INT 6
53223: NEG
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53243: LD_ADDR_VAR 0 41
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: LD_INT 2
53253: NEG
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 1
53261: NEG
53262: PUSH
53263: LD_INT 3
53265: NEG
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 1
53273: PUSH
53274: LD_INT 2
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: LIST
53286: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53287: LD_ADDR_VAR 0 42
53291: PUSH
53292: LD_INT 2
53294: PUSH
53295: LD_INT 0
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 2
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 3
53315: PUSH
53316: LD_INT 1
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: LIST
53327: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53328: LD_ADDR_VAR 0 43
53332: PUSH
53333: LD_INT 2
53335: PUSH
53336: LD_INT 2
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 3
53345: PUSH
53346: LD_INT 2
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 2
53355: PUSH
53356: LD_INT 3
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: LIST
53367: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53368: LD_ADDR_VAR 0 44
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: LD_INT 2
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: LD_INT 3
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 1
53395: NEG
53396: PUSH
53397: LD_INT 2
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: LIST
53408: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53409: LD_ADDR_VAR 0 45
53413: PUSH
53414: LD_INT 2
53416: NEG
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 2
53427: NEG
53428: PUSH
53429: LD_INT 1
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 3
53438: NEG
53439: PUSH
53440: LD_INT 1
53442: NEG
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: LIST
53452: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53453: LD_ADDR_VAR 0 46
53457: PUSH
53458: LD_INT 2
53460: NEG
53461: PUSH
53462: LD_INT 2
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 2
53472: NEG
53473: PUSH
53474: LD_INT 3
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 3
53484: NEG
53485: PUSH
53486: LD_INT 2
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: LIST
53498: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53499: LD_ADDR_VAR 0 47
53503: PUSH
53504: LD_INT 2
53506: NEG
53507: PUSH
53508: LD_INT 3
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 1
53518: NEG
53519: PUSH
53520: LD_INT 3
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53532: LD_ADDR_VAR 0 48
53536: PUSH
53537: LD_INT 1
53539: PUSH
53540: LD_INT 2
53542: NEG
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 2
53550: PUSH
53551: LD_INT 1
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53563: LD_ADDR_VAR 0 49
53567: PUSH
53568: LD_INT 3
53570: PUSH
53571: LD_INT 1
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 3
53580: PUSH
53581: LD_INT 2
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53592: LD_ADDR_VAR 0 50
53596: PUSH
53597: LD_INT 2
53599: PUSH
53600: LD_INT 3
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: PUSH
53610: LD_INT 3
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53621: LD_ADDR_VAR 0 51
53625: PUSH
53626: LD_INT 1
53628: NEG
53629: PUSH
53630: LD_INT 2
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 2
53639: NEG
53640: PUSH
53641: LD_INT 1
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53652: LD_ADDR_VAR 0 52
53656: PUSH
53657: LD_INT 3
53659: NEG
53660: PUSH
53661: LD_INT 1
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 3
53671: NEG
53672: PUSH
53673: LD_INT 2
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53685: LD_ADDR_VAR 0 53
53689: PUSH
53690: LD_INT 1
53692: NEG
53693: PUSH
53694: LD_INT 3
53696: NEG
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 0
53704: PUSH
53705: LD_INT 3
53707: NEG
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 1
53715: PUSH
53716: LD_INT 2
53718: NEG
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: LIST
53728: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53729: LD_ADDR_VAR 0 54
53733: PUSH
53734: LD_INT 2
53736: PUSH
53737: LD_INT 1
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 3
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 3
53757: PUSH
53758: LD_INT 1
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: LIST
53769: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53770: LD_ADDR_VAR 0 55
53774: PUSH
53775: LD_INT 3
53777: PUSH
53778: LD_INT 2
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 3
53787: PUSH
53788: LD_INT 3
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 2
53797: PUSH
53798: LD_INT 3
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: LIST
53809: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53810: LD_ADDR_VAR 0 56
53814: PUSH
53815: LD_INT 1
53817: PUSH
53818: LD_INT 3
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: LD_INT 3
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: LD_INT 2
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: LIST
53850: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53851: LD_ADDR_VAR 0 57
53855: PUSH
53856: LD_INT 2
53858: NEG
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 3
53869: NEG
53870: PUSH
53871: LD_INT 0
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 3
53880: NEG
53881: PUSH
53882: LD_INT 1
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: LIST
53894: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53895: LD_ADDR_VAR 0 58
53899: PUSH
53900: LD_INT 2
53902: NEG
53903: PUSH
53904: LD_INT 3
53906: NEG
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 3
53914: NEG
53915: PUSH
53916: LD_INT 2
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 3
53926: NEG
53927: PUSH
53928: LD_INT 3
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: LIST
53940: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53941: LD_ADDR_VAR 0 59
53945: PUSH
53946: LD_INT 1
53948: NEG
53949: PUSH
53950: LD_INT 2
53952: NEG
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: LD_INT 2
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 1
53971: PUSH
53972: LD_INT 1
53974: NEG
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: LIST
53984: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53985: LD_ADDR_VAR 0 60
53989: PUSH
53990: LD_INT 1
53992: PUSH
53993: LD_INT 1
53995: NEG
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 2
54003: PUSH
54004: LD_INT 0
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 2
54013: PUSH
54014: LD_INT 1
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: LIST
54025: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54026: LD_ADDR_VAR 0 61
54030: PUSH
54031: LD_INT 2
54033: PUSH
54034: LD_INT 1
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 2
54043: PUSH
54044: LD_INT 2
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: LD_INT 2
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: LIST
54065: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54066: LD_ADDR_VAR 0 62
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: LD_INT 2
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 0
54083: PUSH
54084: LD_INT 2
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 1
54093: NEG
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: LIST
54106: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54107: LD_ADDR_VAR 0 63
54111: PUSH
54112: LD_INT 1
54114: NEG
54115: PUSH
54116: LD_INT 1
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 2
54125: NEG
54126: PUSH
54127: LD_INT 0
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 2
54136: NEG
54137: PUSH
54138: LD_INT 1
54140: NEG
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: LIST
54150: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54151: LD_ADDR_VAR 0 64
54155: PUSH
54156: LD_INT 1
54158: NEG
54159: PUSH
54160: LD_INT 2
54162: NEG
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 2
54170: NEG
54171: PUSH
54172: LD_INT 1
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 2
54182: NEG
54183: PUSH
54184: LD_INT 2
54186: NEG
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: LIST
54196: ST_TO_ADDR
// end ; 2 :
54197: GO 57463
54199: LD_INT 2
54201: DOUBLE
54202: EQUAL
54203: IFTRUE 54207
54205: GO 57462
54207: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54208: LD_ADDR_VAR 0 29
54212: PUSH
54213: LD_INT 4
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 4
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 5
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 5
54246: PUSH
54247: LD_INT 1
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 4
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 3
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 3
54276: PUSH
54277: LD_INT 1
54279: NEG
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 3
54287: PUSH
54288: LD_INT 2
54290: NEG
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 5
54298: PUSH
54299: LD_INT 2
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 3
54308: PUSH
54309: LD_INT 3
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 3
54318: PUSH
54319: LD_INT 2
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 4
54328: PUSH
54329: LD_INT 3
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 4
54338: PUSH
54339: LD_INT 4
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 3
54348: PUSH
54349: LD_INT 4
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 2
54358: PUSH
54359: LD_INT 3
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 2
54368: PUSH
54369: LD_INT 2
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 4
54378: PUSH
54379: LD_INT 2
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 2
54388: PUSH
54389: LD_INT 4
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: LD_INT 4
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 0
54408: PUSH
54409: LD_INT 3
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: PUSH
54419: LD_INT 4
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 1
54428: PUSH
54429: LD_INT 5
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 0
54438: PUSH
54439: LD_INT 5
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: NEG
54449: PUSH
54450: LD_INT 4
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 1
54459: NEG
54460: PUSH
54461: LD_INT 3
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 2
54470: PUSH
54471: LD_INT 5
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 2
54480: NEG
54481: PUSH
54482: LD_INT 3
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 3
54491: NEG
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 3
54502: NEG
54503: PUSH
54504: LD_INT 1
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 2
54514: NEG
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 2
54525: NEG
54526: PUSH
54527: LD_INT 1
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 3
54536: NEG
54537: PUSH
54538: LD_INT 1
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 4
54547: NEG
54548: PUSH
54549: LD_INT 0
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 4
54558: NEG
54559: PUSH
54560: LD_INT 1
54562: NEG
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 4
54570: NEG
54571: PUSH
54572: LD_INT 2
54574: NEG
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 2
54582: NEG
54583: PUSH
54584: LD_INT 2
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 4
54593: NEG
54594: PUSH
54595: LD_INT 4
54597: NEG
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 4
54605: NEG
54606: PUSH
54607: LD_INT 5
54609: NEG
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 3
54617: NEG
54618: PUSH
54619: LD_INT 4
54621: NEG
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 3
54629: NEG
54630: PUSH
54631: LD_INT 3
54633: NEG
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 4
54641: NEG
54642: PUSH
54643: LD_INT 3
54645: NEG
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 5
54653: NEG
54654: PUSH
54655: LD_INT 4
54657: NEG
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 5
54665: NEG
54666: PUSH
54667: LD_INT 5
54669: NEG
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 3
54677: NEG
54678: PUSH
54679: LD_INT 5
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 5
54689: NEG
54690: PUSH
54691: LD_INT 3
54693: NEG
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54746: LD_ADDR_VAR 0 30
54750: PUSH
54751: LD_INT 4
54753: PUSH
54754: LD_INT 4
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 4
54763: PUSH
54764: LD_INT 3
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 5
54773: PUSH
54774: LD_INT 4
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 5
54783: PUSH
54784: LD_INT 5
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 4
54793: PUSH
54794: LD_INT 5
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 3
54803: PUSH
54804: LD_INT 4
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 3
54813: PUSH
54814: LD_INT 3
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 5
54823: PUSH
54824: LD_INT 3
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 3
54833: PUSH
54834: LD_INT 5
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 0
54843: PUSH
54844: LD_INT 3
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: LD_INT 2
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 1
54863: PUSH
54864: LD_INT 3
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 1
54873: PUSH
54874: LD_INT 4
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: LD_INT 4
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 1
54893: NEG
54894: PUSH
54895: LD_INT 3
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 1
54904: NEG
54905: PUSH
54906: LD_INT 2
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 2
54915: PUSH
54916: LD_INT 4
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 2
54925: NEG
54926: PUSH
54927: LD_INT 2
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 4
54936: NEG
54937: PUSH
54938: LD_INT 0
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 4
54947: NEG
54948: PUSH
54949: LD_INT 1
54951: NEG
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 3
54959: NEG
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 3
54970: NEG
54971: PUSH
54972: LD_INT 1
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 4
54981: NEG
54982: PUSH
54983: LD_INT 1
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 5
54992: NEG
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 5
55003: NEG
55004: PUSH
55005: LD_INT 1
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 5
55015: NEG
55016: PUSH
55017: LD_INT 2
55019: NEG
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 3
55027: NEG
55028: PUSH
55029: LD_INT 2
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 3
55038: NEG
55039: PUSH
55040: LD_INT 3
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 3
55050: NEG
55051: PUSH
55052: LD_INT 4
55054: NEG
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 2
55062: NEG
55063: PUSH
55064: LD_INT 3
55066: NEG
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 2
55074: NEG
55075: PUSH
55076: LD_INT 2
55078: NEG
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 3
55086: NEG
55087: PUSH
55088: LD_INT 2
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 4
55098: NEG
55099: PUSH
55100: LD_INT 3
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 4
55110: NEG
55111: PUSH
55112: LD_INT 4
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 2
55122: NEG
55123: PUSH
55124: LD_INT 4
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 4
55134: NEG
55135: PUSH
55136: LD_INT 2
55138: NEG
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 0
55146: PUSH
55147: LD_INT 4
55149: NEG
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 0
55157: PUSH
55158: LD_INT 5
55160: NEG
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 1
55168: PUSH
55169: LD_INT 4
55171: NEG
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: LD_INT 3
55182: NEG
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 0
55190: PUSH
55191: LD_INT 3
55193: NEG
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 1
55201: NEG
55202: PUSH
55203: LD_INT 4
55205: NEG
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 1
55213: NEG
55214: PUSH
55215: LD_INT 5
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 2
55225: PUSH
55226: LD_INT 3
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 2
55236: NEG
55237: PUSH
55238: LD_INT 5
55240: NEG
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55293: LD_ADDR_VAR 0 31
55297: PUSH
55298: LD_INT 0
55300: PUSH
55301: LD_INT 4
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 0
55310: PUSH
55311: LD_INT 3
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 1
55320: PUSH
55321: LD_INT 4
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 1
55330: PUSH
55331: LD_INT 5
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 0
55340: PUSH
55341: LD_INT 5
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 1
55350: NEG
55351: PUSH
55352: LD_INT 4
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 1
55361: NEG
55362: PUSH
55363: LD_INT 3
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 2
55372: PUSH
55373: LD_INT 5
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 2
55382: NEG
55383: PUSH
55384: LD_INT 3
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 3
55393: NEG
55394: PUSH
55395: LD_INT 0
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 3
55404: NEG
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 2
55416: NEG
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 2
55427: NEG
55428: PUSH
55429: LD_INT 1
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 3
55438: NEG
55439: PUSH
55440: LD_INT 1
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 4
55449: NEG
55450: PUSH
55451: LD_INT 0
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 4
55460: NEG
55461: PUSH
55462: LD_INT 1
55464: NEG
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 4
55472: NEG
55473: PUSH
55474: LD_INT 2
55476: NEG
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 2
55484: NEG
55485: PUSH
55486: LD_INT 2
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 4
55495: NEG
55496: PUSH
55497: LD_INT 4
55499: NEG
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 4
55507: NEG
55508: PUSH
55509: LD_INT 5
55511: NEG
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 3
55519: NEG
55520: PUSH
55521: LD_INT 4
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 3
55531: NEG
55532: PUSH
55533: LD_INT 3
55535: NEG
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 4
55543: NEG
55544: PUSH
55545: LD_INT 3
55547: NEG
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 5
55555: NEG
55556: PUSH
55557: LD_INT 4
55559: NEG
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 5
55567: NEG
55568: PUSH
55569: LD_INT 5
55571: NEG
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 3
55579: NEG
55580: PUSH
55581: LD_INT 5
55583: NEG
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 5
55591: NEG
55592: PUSH
55593: LD_INT 3
55595: NEG
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 0
55603: PUSH
55604: LD_INT 3
55606: NEG
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: LD_INT 4
55617: NEG
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 1
55625: PUSH
55626: LD_INT 3
55628: NEG
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 1
55636: PUSH
55637: LD_INT 2
55639: NEG
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 0
55647: PUSH
55648: LD_INT 2
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 1
55658: NEG
55659: PUSH
55660: LD_INT 3
55662: NEG
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 1
55670: NEG
55671: PUSH
55672: LD_INT 4
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 2
55682: PUSH
55683: LD_INT 2
55685: NEG
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 2
55693: NEG
55694: PUSH
55695: LD_INT 4
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 4
55705: PUSH
55706: LD_INT 0
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 4
55715: PUSH
55716: LD_INT 1
55718: NEG
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 5
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 5
55736: PUSH
55737: LD_INT 1
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 4
55746: PUSH
55747: LD_INT 1
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 3
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 3
55766: PUSH
55767: LD_INT 1
55769: NEG
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 3
55777: PUSH
55778: LD_INT 2
55780: NEG
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 5
55788: PUSH
55789: LD_INT 2
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55843: LD_ADDR_VAR 0 32
55847: PUSH
55848: LD_INT 4
55850: NEG
55851: PUSH
55852: LD_INT 0
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 4
55861: NEG
55862: PUSH
55863: LD_INT 1
55865: NEG
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 3
55873: NEG
55874: PUSH
55875: LD_INT 0
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 3
55884: NEG
55885: PUSH
55886: LD_INT 1
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 4
55895: NEG
55896: PUSH
55897: LD_INT 1
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 5
55906: NEG
55907: PUSH
55908: LD_INT 0
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 5
55917: NEG
55918: PUSH
55919: LD_INT 1
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 5
55929: NEG
55930: PUSH
55931: LD_INT 2
55933: NEG
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 3
55941: NEG
55942: PUSH
55943: LD_INT 2
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 3
55952: NEG
55953: PUSH
55954: LD_INT 3
55956: NEG
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 3
55964: NEG
55965: PUSH
55966: LD_INT 4
55968: NEG
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 2
55976: NEG
55977: PUSH
55978: LD_INT 3
55980: NEG
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 2
55988: NEG
55989: PUSH
55990: LD_INT 2
55992: NEG
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 3
56000: NEG
56001: PUSH
56002: LD_INT 2
56004: NEG
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 4
56012: NEG
56013: PUSH
56014: LD_INT 3
56016: NEG
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 4
56024: NEG
56025: PUSH
56026: LD_INT 4
56028: NEG
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 2
56036: NEG
56037: PUSH
56038: LD_INT 4
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 4
56048: NEG
56049: PUSH
56050: LD_INT 2
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 0
56060: PUSH
56061: LD_INT 4
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 0
56071: PUSH
56072: LD_INT 5
56074: NEG
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 1
56082: PUSH
56083: LD_INT 4
56085: NEG
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 1
56093: PUSH
56094: LD_INT 3
56096: NEG
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: LD_INT 3
56107: NEG
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 1
56115: NEG
56116: PUSH
56117: LD_INT 4
56119: NEG
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 1
56127: NEG
56128: PUSH
56129: LD_INT 5
56131: NEG
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 2
56139: PUSH
56140: LD_INT 3
56142: NEG
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 2
56150: NEG
56151: PUSH
56152: LD_INT 5
56154: NEG
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 3
56162: PUSH
56163: LD_INT 0
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 3
56172: PUSH
56173: LD_INT 1
56175: NEG
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 4
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 4
56193: PUSH
56194: LD_INT 1
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 3
56203: PUSH
56204: LD_INT 1
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 2
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 2
56223: PUSH
56224: LD_INT 1
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 2
56234: PUSH
56235: LD_INT 2
56237: NEG
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 4
56245: PUSH
56246: LD_INT 2
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 4
56255: PUSH
56256: LD_INT 4
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 4
56265: PUSH
56266: LD_INT 3
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 5
56275: PUSH
56276: LD_INT 4
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 5
56285: PUSH
56286: LD_INT 5
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 4
56295: PUSH
56296: LD_INT 5
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 3
56305: PUSH
56306: LD_INT 4
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 3
56315: PUSH
56316: LD_INT 3
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 5
56325: PUSH
56326: LD_INT 3
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 3
56335: PUSH
56336: LD_INT 5
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56390: LD_ADDR_VAR 0 33
56394: PUSH
56395: LD_INT 4
56397: NEG
56398: PUSH
56399: LD_INT 4
56401: NEG
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 4
56409: NEG
56410: PUSH
56411: LD_INT 5
56413: NEG
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 3
56421: NEG
56422: PUSH
56423: LD_INT 4
56425: NEG
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 3
56433: NEG
56434: PUSH
56435: LD_INT 3
56437: NEG
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 4
56445: NEG
56446: PUSH
56447: LD_INT 3
56449: NEG
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 5
56457: NEG
56458: PUSH
56459: LD_INT 4
56461: NEG
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 5
56469: NEG
56470: PUSH
56471: LD_INT 5
56473: NEG
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 3
56481: NEG
56482: PUSH
56483: LD_INT 5
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 5
56493: NEG
56494: PUSH
56495: LD_INT 3
56497: NEG
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 0
56505: PUSH
56506: LD_INT 3
56508: NEG
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: LD_INT 4
56519: NEG
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: LD_INT 3
56530: NEG
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 1
56538: PUSH
56539: LD_INT 2
56541: NEG
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 0
56549: PUSH
56550: LD_INT 2
56552: NEG
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 1
56560: NEG
56561: PUSH
56562: LD_INT 3
56564: NEG
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 1
56572: NEG
56573: PUSH
56574: LD_INT 4
56576: NEG
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 2
56584: PUSH
56585: LD_INT 2
56587: NEG
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 2
56595: NEG
56596: PUSH
56597: LD_INT 4
56599: NEG
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 4
56607: PUSH
56608: LD_INT 0
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 4
56617: PUSH
56618: LD_INT 1
56620: NEG
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 5
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 5
56638: PUSH
56639: LD_INT 1
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 4
56648: PUSH
56649: LD_INT 1
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 3
56658: PUSH
56659: LD_INT 0
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 3
56668: PUSH
56669: LD_INT 1
56671: NEG
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 3
56679: PUSH
56680: LD_INT 2
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 5
56690: PUSH
56691: LD_INT 2
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 3
56700: PUSH
56701: LD_INT 3
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 3
56710: PUSH
56711: LD_INT 2
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 4
56720: PUSH
56721: LD_INT 3
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 4
56730: PUSH
56731: LD_INT 4
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 3
56740: PUSH
56741: LD_INT 4
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 2
56750: PUSH
56751: LD_INT 3
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 2
56760: PUSH
56761: LD_INT 2
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 4
56770: PUSH
56771: LD_INT 2
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 2
56780: PUSH
56781: LD_INT 4
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 0
56790: PUSH
56791: LD_INT 4
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: LD_INT 3
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 1
56810: PUSH
56811: LD_INT 4
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 1
56820: PUSH
56821: LD_INT 5
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 0
56830: PUSH
56831: LD_INT 5
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 1
56840: NEG
56841: PUSH
56842: LD_INT 4
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 1
56851: NEG
56852: PUSH
56853: LD_INT 3
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 2
56862: PUSH
56863: LD_INT 5
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 2
56872: NEG
56873: PUSH
56874: LD_INT 3
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56928: LD_ADDR_VAR 0 34
56932: PUSH
56933: LD_INT 0
56935: PUSH
56936: LD_INT 4
56938: NEG
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 0
56946: PUSH
56947: LD_INT 5
56949: NEG
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 1
56957: PUSH
56958: LD_INT 4
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 1
56968: PUSH
56969: LD_INT 3
56971: NEG
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 0
56979: PUSH
56980: LD_INT 3
56982: NEG
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 1
56990: NEG
56991: PUSH
56992: LD_INT 4
56994: NEG
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: LD_INT 5
57006: NEG
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 2
57014: PUSH
57015: LD_INT 3
57017: NEG
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 2
57025: NEG
57026: PUSH
57027: LD_INT 5
57029: NEG
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 3
57037: PUSH
57038: LD_INT 0
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 3
57047: PUSH
57048: LD_INT 1
57050: NEG
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 4
57058: PUSH
57059: LD_INT 0
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 4
57068: PUSH
57069: LD_INT 1
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 3
57078: PUSH
57079: LD_INT 1
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 2
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 2
57098: PUSH
57099: LD_INT 1
57101: NEG
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 2
57109: PUSH
57110: LD_INT 2
57112: NEG
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 4
57120: PUSH
57121: LD_INT 2
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 4
57130: PUSH
57131: LD_INT 4
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 4
57140: PUSH
57141: LD_INT 3
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 5
57150: PUSH
57151: LD_INT 4
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 5
57160: PUSH
57161: LD_INT 5
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 4
57170: PUSH
57171: LD_INT 5
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 3
57180: PUSH
57181: LD_INT 4
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 3
57190: PUSH
57191: LD_INT 3
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 5
57200: PUSH
57201: LD_INT 3
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 3
57210: PUSH
57211: LD_INT 5
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 0
57220: PUSH
57221: LD_INT 3
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: LD_INT 2
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: LD_INT 3
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 1
57250: PUSH
57251: LD_INT 4
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 0
57260: PUSH
57261: LD_INT 4
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 1
57270: NEG
57271: PUSH
57272: LD_INT 3
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 1
57281: NEG
57282: PUSH
57283: LD_INT 2
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 2
57292: PUSH
57293: LD_INT 4
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 2
57302: NEG
57303: PUSH
57304: LD_INT 2
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 4
57313: NEG
57314: PUSH
57315: LD_INT 0
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 4
57324: NEG
57325: PUSH
57326: LD_INT 1
57328: NEG
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 3
57336: NEG
57337: PUSH
57338: LD_INT 0
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 3
57347: NEG
57348: PUSH
57349: LD_INT 1
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 4
57358: NEG
57359: PUSH
57360: LD_INT 1
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 5
57369: NEG
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 5
57380: NEG
57381: PUSH
57382: LD_INT 1
57384: NEG
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 5
57392: NEG
57393: PUSH
57394: LD_INT 2
57396: NEG
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 3
57404: NEG
57405: PUSH
57406: LD_INT 2
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: ST_TO_ADDR
// end ; end ;
57460: GO 57463
57462: POP
// case btype of b_depot , b_warehouse :
57463: LD_VAR 0 1
57467: PUSH
57468: LD_INT 0
57470: DOUBLE
57471: EQUAL
57472: IFTRUE 57482
57474: LD_INT 1
57476: DOUBLE
57477: EQUAL
57478: IFTRUE 57482
57480: GO 57683
57482: POP
// case nation of nation_american :
57483: LD_VAR 0 5
57487: PUSH
57488: LD_INT 1
57490: DOUBLE
57491: EQUAL
57492: IFTRUE 57496
57494: GO 57552
57496: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57497: LD_ADDR_VAR 0 9
57501: PUSH
57502: LD_VAR 0 11
57506: PUSH
57507: LD_VAR 0 12
57511: PUSH
57512: LD_VAR 0 13
57516: PUSH
57517: LD_VAR 0 14
57521: PUSH
57522: LD_VAR 0 15
57526: PUSH
57527: LD_VAR 0 16
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: PUSH
57540: LD_VAR 0 4
57544: PUSH
57545: LD_INT 1
57547: PLUS
57548: ARRAY
57549: ST_TO_ADDR
57550: GO 57681
57552: LD_INT 2
57554: DOUBLE
57555: EQUAL
57556: IFTRUE 57560
57558: GO 57616
57560: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57561: LD_ADDR_VAR 0 9
57565: PUSH
57566: LD_VAR 0 17
57570: PUSH
57571: LD_VAR 0 18
57575: PUSH
57576: LD_VAR 0 19
57580: PUSH
57581: LD_VAR 0 20
57585: PUSH
57586: LD_VAR 0 21
57590: PUSH
57591: LD_VAR 0 22
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: PUSH
57604: LD_VAR 0 4
57608: PUSH
57609: LD_INT 1
57611: PLUS
57612: ARRAY
57613: ST_TO_ADDR
57614: GO 57681
57616: LD_INT 3
57618: DOUBLE
57619: EQUAL
57620: IFTRUE 57624
57622: GO 57680
57624: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57625: LD_ADDR_VAR 0 9
57629: PUSH
57630: LD_VAR 0 23
57634: PUSH
57635: LD_VAR 0 24
57639: PUSH
57640: LD_VAR 0 25
57644: PUSH
57645: LD_VAR 0 26
57649: PUSH
57650: LD_VAR 0 27
57654: PUSH
57655: LD_VAR 0 28
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: PUSH
57668: LD_VAR 0 4
57672: PUSH
57673: LD_INT 1
57675: PLUS
57676: ARRAY
57677: ST_TO_ADDR
57678: GO 57681
57680: POP
57681: GO 58236
57683: LD_INT 2
57685: DOUBLE
57686: EQUAL
57687: IFTRUE 57697
57689: LD_INT 3
57691: DOUBLE
57692: EQUAL
57693: IFTRUE 57697
57695: GO 57753
57697: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57698: LD_ADDR_VAR 0 9
57702: PUSH
57703: LD_VAR 0 29
57707: PUSH
57708: LD_VAR 0 30
57712: PUSH
57713: LD_VAR 0 31
57717: PUSH
57718: LD_VAR 0 32
57722: PUSH
57723: LD_VAR 0 33
57727: PUSH
57728: LD_VAR 0 34
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: PUSH
57741: LD_VAR 0 4
57745: PUSH
57746: LD_INT 1
57748: PLUS
57749: ARRAY
57750: ST_TO_ADDR
57751: GO 58236
57753: LD_INT 16
57755: DOUBLE
57756: EQUAL
57757: IFTRUE 57815
57759: LD_INT 17
57761: DOUBLE
57762: EQUAL
57763: IFTRUE 57815
57765: LD_INT 18
57767: DOUBLE
57768: EQUAL
57769: IFTRUE 57815
57771: LD_INT 19
57773: DOUBLE
57774: EQUAL
57775: IFTRUE 57815
57777: LD_INT 22
57779: DOUBLE
57780: EQUAL
57781: IFTRUE 57815
57783: LD_INT 20
57785: DOUBLE
57786: EQUAL
57787: IFTRUE 57815
57789: LD_INT 21
57791: DOUBLE
57792: EQUAL
57793: IFTRUE 57815
57795: LD_INT 23
57797: DOUBLE
57798: EQUAL
57799: IFTRUE 57815
57801: LD_INT 24
57803: DOUBLE
57804: EQUAL
57805: IFTRUE 57815
57807: LD_INT 25
57809: DOUBLE
57810: EQUAL
57811: IFTRUE 57815
57813: GO 57871
57815: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57816: LD_ADDR_VAR 0 9
57820: PUSH
57821: LD_VAR 0 35
57825: PUSH
57826: LD_VAR 0 36
57830: PUSH
57831: LD_VAR 0 37
57835: PUSH
57836: LD_VAR 0 38
57840: PUSH
57841: LD_VAR 0 39
57845: PUSH
57846: LD_VAR 0 40
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: PUSH
57859: LD_VAR 0 4
57863: PUSH
57864: LD_INT 1
57866: PLUS
57867: ARRAY
57868: ST_TO_ADDR
57869: GO 58236
57871: LD_INT 6
57873: DOUBLE
57874: EQUAL
57875: IFTRUE 57927
57877: LD_INT 7
57879: DOUBLE
57880: EQUAL
57881: IFTRUE 57927
57883: LD_INT 8
57885: DOUBLE
57886: EQUAL
57887: IFTRUE 57927
57889: LD_INT 13
57891: DOUBLE
57892: EQUAL
57893: IFTRUE 57927
57895: LD_INT 12
57897: DOUBLE
57898: EQUAL
57899: IFTRUE 57927
57901: LD_INT 15
57903: DOUBLE
57904: EQUAL
57905: IFTRUE 57927
57907: LD_INT 11
57909: DOUBLE
57910: EQUAL
57911: IFTRUE 57927
57913: LD_INT 14
57915: DOUBLE
57916: EQUAL
57917: IFTRUE 57927
57919: LD_INT 10
57921: DOUBLE
57922: EQUAL
57923: IFTRUE 57927
57925: GO 57983
57927: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57928: LD_ADDR_VAR 0 9
57932: PUSH
57933: LD_VAR 0 41
57937: PUSH
57938: LD_VAR 0 42
57942: PUSH
57943: LD_VAR 0 43
57947: PUSH
57948: LD_VAR 0 44
57952: PUSH
57953: LD_VAR 0 45
57957: PUSH
57958: LD_VAR 0 46
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: PUSH
57971: LD_VAR 0 4
57975: PUSH
57976: LD_INT 1
57978: PLUS
57979: ARRAY
57980: ST_TO_ADDR
57981: GO 58236
57983: LD_INT 36
57985: DOUBLE
57986: EQUAL
57987: IFTRUE 57991
57989: GO 58047
57991: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57992: LD_ADDR_VAR 0 9
57996: PUSH
57997: LD_VAR 0 47
58001: PUSH
58002: LD_VAR 0 48
58006: PUSH
58007: LD_VAR 0 49
58011: PUSH
58012: LD_VAR 0 50
58016: PUSH
58017: LD_VAR 0 51
58021: PUSH
58022: LD_VAR 0 52
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: PUSH
58035: LD_VAR 0 4
58039: PUSH
58040: LD_INT 1
58042: PLUS
58043: ARRAY
58044: ST_TO_ADDR
58045: GO 58236
58047: LD_INT 4
58049: DOUBLE
58050: EQUAL
58051: IFTRUE 58073
58053: LD_INT 5
58055: DOUBLE
58056: EQUAL
58057: IFTRUE 58073
58059: LD_INT 34
58061: DOUBLE
58062: EQUAL
58063: IFTRUE 58073
58065: LD_INT 37
58067: DOUBLE
58068: EQUAL
58069: IFTRUE 58073
58071: GO 58129
58073: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58074: LD_ADDR_VAR 0 9
58078: PUSH
58079: LD_VAR 0 53
58083: PUSH
58084: LD_VAR 0 54
58088: PUSH
58089: LD_VAR 0 55
58093: PUSH
58094: LD_VAR 0 56
58098: PUSH
58099: LD_VAR 0 57
58103: PUSH
58104: LD_VAR 0 58
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: PUSH
58117: LD_VAR 0 4
58121: PUSH
58122: LD_INT 1
58124: PLUS
58125: ARRAY
58126: ST_TO_ADDR
58127: GO 58236
58129: LD_INT 31
58131: DOUBLE
58132: EQUAL
58133: IFTRUE 58179
58135: LD_INT 32
58137: DOUBLE
58138: EQUAL
58139: IFTRUE 58179
58141: LD_INT 33
58143: DOUBLE
58144: EQUAL
58145: IFTRUE 58179
58147: LD_INT 27
58149: DOUBLE
58150: EQUAL
58151: IFTRUE 58179
58153: LD_INT 26
58155: DOUBLE
58156: EQUAL
58157: IFTRUE 58179
58159: LD_INT 28
58161: DOUBLE
58162: EQUAL
58163: IFTRUE 58179
58165: LD_INT 29
58167: DOUBLE
58168: EQUAL
58169: IFTRUE 58179
58171: LD_INT 30
58173: DOUBLE
58174: EQUAL
58175: IFTRUE 58179
58177: GO 58235
58179: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58180: LD_ADDR_VAR 0 9
58184: PUSH
58185: LD_VAR 0 59
58189: PUSH
58190: LD_VAR 0 60
58194: PUSH
58195: LD_VAR 0 61
58199: PUSH
58200: LD_VAR 0 62
58204: PUSH
58205: LD_VAR 0 63
58209: PUSH
58210: LD_VAR 0 64
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: PUSH
58223: LD_VAR 0 4
58227: PUSH
58228: LD_INT 1
58230: PLUS
58231: ARRAY
58232: ST_TO_ADDR
58233: GO 58236
58235: POP
// temp_list2 = [ ] ;
58236: LD_ADDR_VAR 0 10
58240: PUSH
58241: EMPTY
58242: ST_TO_ADDR
// for i in temp_list do
58243: LD_ADDR_VAR 0 8
58247: PUSH
58248: LD_VAR 0 9
58252: PUSH
58253: FOR_IN
58254: IFFALSE 58306
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58256: LD_ADDR_VAR 0 10
58260: PUSH
58261: LD_VAR 0 10
58265: PUSH
58266: LD_VAR 0 8
58270: PUSH
58271: LD_INT 1
58273: ARRAY
58274: PUSH
58275: LD_VAR 0 2
58279: PLUS
58280: PUSH
58281: LD_VAR 0 8
58285: PUSH
58286: LD_INT 2
58288: ARRAY
58289: PUSH
58290: LD_VAR 0 3
58294: PLUS
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: EMPTY
58301: LIST
58302: ADD
58303: ST_TO_ADDR
58304: GO 58253
58306: POP
58307: POP
// result = temp_list2 ;
58308: LD_ADDR_VAR 0 7
58312: PUSH
58313: LD_VAR 0 10
58317: ST_TO_ADDR
// end ;
58318: LD_VAR 0 7
58322: RET
// export function EnemyInRange ( unit , dist ) ; begin
58323: LD_INT 0
58325: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58326: LD_ADDR_VAR 0 3
58330: PUSH
58331: LD_VAR 0 1
58335: PPUSH
58336: CALL_OW 255
58340: PPUSH
58341: LD_VAR 0 1
58345: PPUSH
58346: CALL_OW 250
58350: PPUSH
58351: LD_VAR 0 1
58355: PPUSH
58356: CALL_OW 251
58360: PPUSH
58361: LD_VAR 0 2
58365: PPUSH
58366: CALL 31725 0 4
58370: PUSH
58371: LD_INT 4
58373: ARRAY
58374: ST_TO_ADDR
// end ;
58375: LD_VAR 0 3
58379: RET
// export function PlayerSeeMe ( unit ) ; begin
58380: LD_INT 0
58382: PPUSH
// result := See ( your_side , unit ) ;
58383: LD_ADDR_VAR 0 2
58387: PUSH
58388: LD_OWVAR 2
58392: PPUSH
58393: LD_VAR 0 1
58397: PPUSH
58398: CALL_OW 292
58402: ST_TO_ADDR
// end ;
58403: LD_VAR 0 2
58407: RET
// export function ReverseDir ( unit ) ; begin
58408: LD_INT 0
58410: PPUSH
// if not unit then
58411: LD_VAR 0 1
58415: NOT
58416: IFFALSE 58420
// exit ;
58418: GO 58443
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58420: LD_ADDR_VAR 0 2
58424: PUSH
58425: LD_VAR 0 1
58429: PPUSH
58430: CALL_OW 254
58434: PUSH
58435: LD_INT 3
58437: PLUS
58438: PUSH
58439: LD_INT 6
58441: MOD
58442: ST_TO_ADDR
// end ;
58443: LD_VAR 0 2
58447: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
58448: LD_INT 0
58450: PPUSH
58451: PPUSH
58452: PPUSH
58453: PPUSH
58454: PPUSH
58455: PPUSH
// if not unit or not hexes then
58456: LD_VAR 0 1
58460: NOT
58461: PUSH
58462: LD_VAR 0 2
58466: NOT
58467: OR
58468: IFFALSE 58472
// exit ;
58470: GO 58595
// dist := 9999 ;
58472: LD_ADDR_VAR 0 5
58476: PUSH
58477: LD_INT 9999
58479: ST_TO_ADDR
// for i = 1 to hexes do
58480: LD_ADDR_VAR 0 4
58484: PUSH
58485: DOUBLE
58486: LD_INT 1
58488: DEC
58489: ST_TO_ADDR
58490: LD_VAR 0 2
58494: PUSH
58495: FOR_TO
58496: IFFALSE 58583
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58498: LD_ADDR_VAR 0 6
58502: PUSH
58503: LD_VAR 0 1
58507: PPUSH
58508: LD_VAR 0 2
58512: PUSH
58513: LD_VAR 0 4
58517: ARRAY
58518: PUSH
58519: LD_INT 1
58521: ARRAY
58522: PPUSH
58523: LD_VAR 0 2
58527: PUSH
58528: LD_VAR 0 4
58532: ARRAY
58533: PUSH
58534: LD_INT 2
58536: ARRAY
58537: PPUSH
58538: CALL_OW 297
58542: ST_TO_ADDR
// if tdist < dist then
58543: LD_VAR 0 6
58547: PUSH
58548: LD_VAR 0 5
58552: LESS
58553: IFFALSE 58581
// begin hex := hexes [ i ] ;
58555: LD_ADDR_VAR 0 8
58559: PUSH
58560: LD_VAR 0 2
58564: PUSH
58565: LD_VAR 0 4
58569: ARRAY
58570: ST_TO_ADDR
// dist := tdist ;
58571: LD_ADDR_VAR 0 5
58575: PUSH
58576: LD_VAR 0 6
58580: ST_TO_ADDR
// end ; end ;
58581: GO 58495
58583: POP
58584: POP
// result := hex ;
58585: LD_ADDR_VAR 0 3
58589: PUSH
58590: LD_VAR 0 8
58594: ST_TO_ADDR
// end ;
58595: LD_VAR 0 3
58599: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58600: LD_INT 0
58602: PPUSH
58603: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58604: LD_VAR 0 1
58608: NOT
58609: PUSH
58610: LD_VAR 0 1
58614: PUSH
58615: LD_INT 21
58617: PUSH
58618: LD_INT 2
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 23
58627: PUSH
58628: LD_INT 2
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PPUSH
58639: CALL_OW 69
58643: IN
58644: NOT
58645: OR
58646: IFFALSE 58650
// exit ;
58648: GO 58697
// for i = 1 to 3 do
58650: LD_ADDR_VAR 0 3
58654: PUSH
58655: DOUBLE
58656: LD_INT 1
58658: DEC
58659: ST_TO_ADDR
58660: LD_INT 3
58662: PUSH
58663: FOR_TO
58664: IFFALSE 58695
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58666: LD_VAR 0 1
58670: PPUSH
58671: CALL_OW 250
58675: PPUSH
58676: LD_VAR 0 1
58680: PPUSH
58681: CALL_OW 251
58685: PPUSH
58686: LD_INT 1
58688: PPUSH
58689: CALL_OW 453
58693: GO 58663
58695: POP
58696: POP
// end ;
58697: LD_VAR 0 2
58701: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58702: LD_INT 0
58704: PPUSH
58705: PPUSH
58706: PPUSH
58707: PPUSH
58708: PPUSH
58709: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58710: LD_VAR 0 1
58714: NOT
58715: PUSH
58716: LD_VAR 0 2
58720: NOT
58721: OR
58722: PUSH
58723: LD_VAR 0 1
58727: PPUSH
58728: CALL_OW 314
58732: OR
58733: IFFALSE 58737
// exit ;
58735: GO 59178
// x := GetX ( enemy_unit ) ;
58737: LD_ADDR_VAR 0 7
58741: PUSH
58742: LD_VAR 0 2
58746: PPUSH
58747: CALL_OW 250
58751: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58752: LD_ADDR_VAR 0 8
58756: PUSH
58757: LD_VAR 0 2
58761: PPUSH
58762: CALL_OW 251
58766: ST_TO_ADDR
// if not x or not y then
58767: LD_VAR 0 7
58771: NOT
58772: PUSH
58773: LD_VAR 0 8
58777: NOT
58778: OR
58779: IFFALSE 58783
// exit ;
58781: GO 59178
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58783: LD_ADDR_VAR 0 6
58787: PUSH
58788: LD_VAR 0 7
58792: PPUSH
58793: LD_INT 0
58795: PPUSH
58796: LD_INT 4
58798: PPUSH
58799: CALL_OW 272
58803: PUSH
58804: LD_VAR 0 8
58808: PPUSH
58809: LD_INT 0
58811: PPUSH
58812: LD_INT 4
58814: PPUSH
58815: CALL_OW 273
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_VAR 0 7
58828: PPUSH
58829: LD_INT 1
58831: PPUSH
58832: LD_INT 4
58834: PPUSH
58835: CALL_OW 272
58839: PUSH
58840: LD_VAR 0 8
58844: PPUSH
58845: LD_INT 1
58847: PPUSH
58848: LD_INT 4
58850: PPUSH
58851: CALL_OW 273
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_VAR 0 7
58864: PPUSH
58865: LD_INT 2
58867: PPUSH
58868: LD_INT 4
58870: PPUSH
58871: CALL_OW 272
58875: PUSH
58876: LD_VAR 0 8
58880: PPUSH
58881: LD_INT 2
58883: PPUSH
58884: LD_INT 4
58886: PPUSH
58887: CALL_OW 273
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_VAR 0 7
58900: PPUSH
58901: LD_INT 3
58903: PPUSH
58904: LD_INT 4
58906: PPUSH
58907: CALL_OW 272
58911: PUSH
58912: LD_VAR 0 8
58916: PPUSH
58917: LD_INT 3
58919: PPUSH
58920: LD_INT 4
58922: PPUSH
58923: CALL_OW 273
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_VAR 0 7
58936: PPUSH
58937: LD_INT 4
58939: PPUSH
58940: LD_INT 4
58942: PPUSH
58943: CALL_OW 272
58947: PUSH
58948: LD_VAR 0 8
58952: PPUSH
58953: LD_INT 4
58955: PPUSH
58956: LD_INT 4
58958: PPUSH
58959: CALL_OW 273
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_VAR 0 7
58972: PPUSH
58973: LD_INT 5
58975: PPUSH
58976: LD_INT 4
58978: PPUSH
58979: CALL_OW 272
58983: PUSH
58984: LD_VAR 0 8
58988: PPUSH
58989: LD_INT 5
58991: PPUSH
58992: LD_INT 4
58994: PPUSH
58995: CALL_OW 273
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: ST_TO_ADDR
// for i = tmp downto 1 do
59012: LD_ADDR_VAR 0 4
59016: PUSH
59017: DOUBLE
59018: LD_VAR 0 6
59022: INC
59023: ST_TO_ADDR
59024: LD_INT 1
59026: PUSH
59027: FOR_DOWNTO
59028: IFFALSE 59129
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59030: LD_VAR 0 6
59034: PUSH
59035: LD_VAR 0 4
59039: ARRAY
59040: PUSH
59041: LD_INT 1
59043: ARRAY
59044: PPUSH
59045: LD_VAR 0 6
59049: PUSH
59050: LD_VAR 0 4
59054: ARRAY
59055: PUSH
59056: LD_INT 2
59058: ARRAY
59059: PPUSH
59060: CALL_OW 488
59064: NOT
59065: PUSH
59066: LD_VAR 0 6
59070: PUSH
59071: LD_VAR 0 4
59075: ARRAY
59076: PUSH
59077: LD_INT 1
59079: ARRAY
59080: PPUSH
59081: LD_VAR 0 6
59085: PUSH
59086: LD_VAR 0 4
59090: ARRAY
59091: PUSH
59092: LD_INT 2
59094: ARRAY
59095: PPUSH
59096: CALL_OW 428
59100: PUSH
59101: LD_INT 0
59103: NONEQUAL
59104: OR
59105: IFFALSE 59127
// tmp := Delete ( tmp , i ) ;
59107: LD_ADDR_VAR 0 6
59111: PUSH
59112: LD_VAR 0 6
59116: PPUSH
59117: LD_VAR 0 4
59121: PPUSH
59122: CALL_OW 3
59126: ST_TO_ADDR
59127: GO 59027
59129: POP
59130: POP
// j := GetClosestHex ( unit , tmp ) ;
59131: LD_ADDR_VAR 0 5
59135: PUSH
59136: LD_VAR 0 1
59140: PPUSH
59141: LD_VAR 0 6
59145: PPUSH
59146: CALL 58448 0 2
59150: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59151: LD_VAR 0 1
59155: PPUSH
59156: LD_VAR 0 5
59160: PUSH
59161: LD_INT 1
59163: ARRAY
59164: PPUSH
59165: LD_VAR 0 5
59169: PUSH
59170: LD_INT 2
59172: ARRAY
59173: PPUSH
59174: CALL_OW 111
// end ;
59178: LD_VAR 0 3
59182: RET
// export function PrepareApemanSoldier ( ) ; begin
59183: LD_INT 0
59185: PPUSH
// uc_nation := 0 ;
59186: LD_ADDR_OWVAR 21
59190: PUSH
59191: LD_INT 0
59193: ST_TO_ADDR
// hc_sex := sex_male ;
59194: LD_ADDR_OWVAR 27
59198: PUSH
59199: LD_INT 1
59201: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
59202: LD_ADDR_OWVAR 28
59206: PUSH
59207: LD_INT 15
59209: ST_TO_ADDR
// hc_gallery :=  ;
59210: LD_ADDR_OWVAR 33
59214: PUSH
59215: LD_STRING 
59217: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59218: LD_ADDR_OWVAR 31
59222: PUSH
59223: LD_INT 0
59225: PPUSH
59226: LD_INT 3
59228: PPUSH
59229: CALL_OW 12
59233: PUSH
59234: LD_INT 0
59236: PPUSH
59237: LD_INT 3
59239: PPUSH
59240: CALL_OW 12
59244: PUSH
59245: LD_INT 0
59247: PUSH
59248: LD_INT 0
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: ST_TO_ADDR
// end ;
59257: LD_VAR 0 1
59261: RET
// export function PrepareApemanEngineer ( ) ; begin
59262: LD_INT 0
59264: PPUSH
// uc_nation := 0 ;
59265: LD_ADDR_OWVAR 21
59269: PUSH
59270: LD_INT 0
59272: ST_TO_ADDR
// hc_sex := sex_male ;
59273: LD_ADDR_OWVAR 27
59277: PUSH
59278: LD_INT 1
59280: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
59281: LD_ADDR_OWVAR 28
59285: PUSH
59286: LD_INT 16
59288: ST_TO_ADDR
// hc_gallery :=  ;
59289: LD_ADDR_OWVAR 33
59293: PUSH
59294: LD_STRING 
59296: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59297: LD_ADDR_OWVAR 31
59301: PUSH
59302: LD_INT 0
59304: PPUSH
59305: LD_INT 3
59307: PPUSH
59308: CALL_OW 12
59312: PUSH
59313: LD_INT 0
59315: PPUSH
59316: LD_INT 3
59318: PPUSH
59319: CALL_OW 12
59323: PUSH
59324: LD_INT 0
59326: PUSH
59327: LD_INT 0
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: ST_TO_ADDR
// end ;
59336: LD_VAR 0 1
59340: RET
// export function PrepareApeman ( agressivity ) ; begin
59341: LD_INT 0
59343: PPUSH
// uc_side := 0 ;
59344: LD_ADDR_OWVAR 20
59348: PUSH
59349: LD_INT 0
59351: ST_TO_ADDR
// uc_nation := 0 ;
59352: LD_ADDR_OWVAR 21
59356: PUSH
59357: LD_INT 0
59359: ST_TO_ADDR
// hc_sex := sex_male ;
59360: LD_ADDR_OWVAR 27
59364: PUSH
59365: LD_INT 1
59367: ST_TO_ADDR
// hc_class := class_apeman ;
59368: LD_ADDR_OWVAR 28
59372: PUSH
59373: LD_INT 12
59375: ST_TO_ADDR
// hc_gallery :=  ;
59376: LD_ADDR_OWVAR 33
59380: PUSH
59381: LD_STRING 
59383: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59384: LD_ADDR_OWVAR 35
59388: PUSH
59389: LD_VAR 0 1
59393: NEG
59394: PPUSH
59395: LD_VAR 0 1
59399: PPUSH
59400: CALL_OW 12
59404: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59405: LD_ADDR_OWVAR 31
59409: PUSH
59410: LD_INT 0
59412: PPUSH
59413: LD_INT 3
59415: PPUSH
59416: CALL_OW 12
59420: PUSH
59421: LD_INT 0
59423: PPUSH
59424: LD_INT 3
59426: PPUSH
59427: CALL_OW 12
59431: PUSH
59432: LD_INT 0
59434: PUSH
59435: LD_INT 0
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: ST_TO_ADDR
// end ;
59444: LD_VAR 0 2
59448: RET
// export function PrepareTiger ( agressivity ) ; begin
59449: LD_INT 0
59451: PPUSH
// uc_side := 0 ;
59452: LD_ADDR_OWVAR 20
59456: PUSH
59457: LD_INT 0
59459: ST_TO_ADDR
// uc_nation := 0 ;
59460: LD_ADDR_OWVAR 21
59464: PUSH
59465: LD_INT 0
59467: ST_TO_ADDR
// hc_class := class_tiger ;
59468: LD_ADDR_OWVAR 28
59472: PUSH
59473: LD_INT 14
59475: ST_TO_ADDR
// hc_gallery :=  ;
59476: LD_ADDR_OWVAR 33
59480: PUSH
59481: LD_STRING 
59483: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59484: LD_ADDR_OWVAR 35
59488: PUSH
59489: LD_VAR 0 1
59493: NEG
59494: PPUSH
59495: LD_VAR 0 1
59499: PPUSH
59500: CALL_OW 12
59504: ST_TO_ADDR
// end ;
59505: LD_VAR 0 2
59509: RET
// export function PrepareEnchidna ( ) ; begin
59510: LD_INT 0
59512: PPUSH
// uc_side := 0 ;
59513: LD_ADDR_OWVAR 20
59517: PUSH
59518: LD_INT 0
59520: ST_TO_ADDR
// uc_nation := 0 ;
59521: LD_ADDR_OWVAR 21
59525: PUSH
59526: LD_INT 0
59528: ST_TO_ADDR
// hc_class := class_baggie ;
59529: LD_ADDR_OWVAR 28
59533: PUSH
59534: LD_INT 13
59536: ST_TO_ADDR
// hc_gallery :=  ;
59537: LD_ADDR_OWVAR 33
59541: PUSH
59542: LD_STRING 
59544: ST_TO_ADDR
// end ;
59545: LD_VAR 0 1
59549: RET
// export function PrepareFrog ( ) ; begin
59550: LD_INT 0
59552: PPUSH
// uc_side := 0 ;
59553: LD_ADDR_OWVAR 20
59557: PUSH
59558: LD_INT 0
59560: ST_TO_ADDR
// uc_nation := 0 ;
59561: LD_ADDR_OWVAR 21
59565: PUSH
59566: LD_INT 0
59568: ST_TO_ADDR
// hc_class := class_frog ;
59569: LD_ADDR_OWVAR 28
59573: PUSH
59574: LD_INT 19
59576: ST_TO_ADDR
// hc_gallery :=  ;
59577: LD_ADDR_OWVAR 33
59581: PUSH
59582: LD_STRING 
59584: ST_TO_ADDR
// end ;
59585: LD_VAR 0 1
59589: RET
// export function PrepareFish ( ) ; begin
59590: LD_INT 0
59592: PPUSH
// uc_side := 0 ;
59593: LD_ADDR_OWVAR 20
59597: PUSH
59598: LD_INT 0
59600: ST_TO_ADDR
// uc_nation := 0 ;
59601: LD_ADDR_OWVAR 21
59605: PUSH
59606: LD_INT 0
59608: ST_TO_ADDR
// hc_class := class_fish ;
59609: LD_ADDR_OWVAR 28
59613: PUSH
59614: LD_INT 20
59616: ST_TO_ADDR
// hc_gallery :=  ;
59617: LD_ADDR_OWVAR 33
59621: PUSH
59622: LD_STRING 
59624: ST_TO_ADDR
// end ;
59625: LD_VAR 0 1
59629: RET
// export function PrepareBird ( ) ; begin
59630: LD_INT 0
59632: PPUSH
// uc_side := 0 ;
59633: LD_ADDR_OWVAR 20
59637: PUSH
59638: LD_INT 0
59640: ST_TO_ADDR
// uc_nation := 0 ;
59641: LD_ADDR_OWVAR 21
59645: PUSH
59646: LD_INT 0
59648: ST_TO_ADDR
// hc_class := class_phororhacos ;
59649: LD_ADDR_OWVAR 28
59653: PUSH
59654: LD_INT 18
59656: ST_TO_ADDR
// hc_gallery :=  ;
59657: LD_ADDR_OWVAR 33
59661: PUSH
59662: LD_STRING 
59664: ST_TO_ADDR
// end ;
59665: LD_VAR 0 1
59669: RET
// export function PrepareHorse ( ) ; begin
59670: LD_INT 0
59672: PPUSH
// uc_side := 0 ;
59673: LD_ADDR_OWVAR 20
59677: PUSH
59678: LD_INT 0
59680: ST_TO_ADDR
// uc_nation := 0 ;
59681: LD_ADDR_OWVAR 21
59685: PUSH
59686: LD_INT 0
59688: ST_TO_ADDR
// hc_class := class_horse ;
59689: LD_ADDR_OWVAR 28
59693: PUSH
59694: LD_INT 21
59696: ST_TO_ADDR
// hc_gallery :=  ;
59697: LD_ADDR_OWVAR 33
59701: PUSH
59702: LD_STRING 
59704: ST_TO_ADDR
// end ;
59705: LD_VAR 0 1
59709: RET
// export function PrepareMastodont ( ) ; begin
59710: LD_INT 0
59712: PPUSH
// uc_side := 0 ;
59713: LD_ADDR_OWVAR 20
59717: PUSH
59718: LD_INT 0
59720: ST_TO_ADDR
// uc_nation := 0 ;
59721: LD_ADDR_OWVAR 21
59725: PUSH
59726: LD_INT 0
59728: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59729: LD_ADDR_OWVAR 37
59733: PUSH
59734: LD_INT 31
59736: ST_TO_ADDR
// vc_control := control_rider ;
59737: LD_ADDR_OWVAR 38
59741: PUSH
59742: LD_INT 4
59744: ST_TO_ADDR
// end ;
59745: LD_VAR 0 1
59749: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59750: LD_INT 0
59752: PPUSH
59753: PPUSH
59754: PPUSH
// uc_side = 0 ;
59755: LD_ADDR_OWVAR 20
59759: PUSH
59760: LD_INT 0
59762: ST_TO_ADDR
// uc_nation = 0 ;
59763: LD_ADDR_OWVAR 21
59767: PUSH
59768: LD_INT 0
59770: ST_TO_ADDR
// InitHc_All ( ) ;
59771: CALL_OW 584
// InitVc ;
59775: CALL_OW 20
// if mastodonts then
59779: LD_VAR 0 6
59783: IFFALSE 59850
// for i = 1 to mastodonts do
59785: LD_ADDR_VAR 0 11
59789: PUSH
59790: DOUBLE
59791: LD_INT 1
59793: DEC
59794: ST_TO_ADDR
59795: LD_VAR 0 6
59799: PUSH
59800: FOR_TO
59801: IFFALSE 59848
// begin vc_chassis := 31 ;
59803: LD_ADDR_OWVAR 37
59807: PUSH
59808: LD_INT 31
59810: ST_TO_ADDR
// vc_control := control_rider ;
59811: LD_ADDR_OWVAR 38
59815: PUSH
59816: LD_INT 4
59818: ST_TO_ADDR
// animal := CreateVehicle ;
59819: LD_ADDR_VAR 0 12
59823: PUSH
59824: CALL_OW 45
59828: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59829: LD_VAR 0 12
59833: PPUSH
59834: LD_VAR 0 8
59838: PPUSH
59839: LD_INT 0
59841: PPUSH
59842: CALL 61985 0 3
// end ;
59846: GO 59800
59848: POP
59849: POP
// if horses then
59850: LD_VAR 0 5
59854: IFFALSE 59921
// for i = 1 to horses do
59856: LD_ADDR_VAR 0 11
59860: PUSH
59861: DOUBLE
59862: LD_INT 1
59864: DEC
59865: ST_TO_ADDR
59866: LD_VAR 0 5
59870: PUSH
59871: FOR_TO
59872: IFFALSE 59919
// begin hc_class := 21 ;
59874: LD_ADDR_OWVAR 28
59878: PUSH
59879: LD_INT 21
59881: ST_TO_ADDR
// hc_gallery :=  ;
59882: LD_ADDR_OWVAR 33
59886: PUSH
59887: LD_STRING 
59889: ST_TO_ADDR
// animal := CreateHuman ;
59890: LD_ADDR_VAR 0 12
59894: PUSH
59895: CALL_OW 44
59899: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59900: LD_VAR 0 12
59904: PPUSH
59905: LD_VAR 0 8
59909: PPUSH
59910: LD_INT 0
59912: PPUSH
59913: CALL 61985 0 3
// end ;
59917: GO 59871
59919: POP
59920: POP
// if birds then
59921: LD_VAR 0 1
59925: IFFALSE 59992
// for i = 1 to birds do
59927: LD_ADDR_VAR 0 11
59931: PUSH
59932: DOUBLE
59933: LD_INT 1
59935: DEC
59936: ST_TO_ADDR
59937: LD_VAR 0 1
59941: PUSH
59942: FOR_TO
59943: IFFALSE 59990
// begin hc_class = 18 ;
59945: LD_ADDR_OWVAR 28
59949: PUSH
59950: LD_INT 18
59952: ST_TO_ADDR
// hc_gallery =  ;
59953: LD_ADDR_OWVAR 33
59957: PUSH
59958: LD_STRING 
59960: ST_TO_ADDR
// animal := CreateHuman ;
59961: LD_ADDR_VAR 0 12
59965: PUSH
59966: CALL_OW 44
59970: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59971: LD_VAR 0 12
59975: PPUSH
59976: LD_VAR 0 8
59980: PPUSH
59981: LD_INT 0
59983: PPUSH
59984: CALL 61985 0 3
// end ;
59988: GO 59942
59990: POP
59991: POP
// if tigers then
59992: LD_VAR 0 2
59996: IFFALSE 60080
// for i = 1 to tigers do
59998: LD_ADDR_VAR 0 11
60002: PUSH
60003: DOUBLE
60004: LD_INT 1
60006: DEC
60007: ST_TO_ADDR
60008: LD_VAR 0 2
60012: PUSH
60013: FOR_TO
60014: IFFALSE 60078
// begin hc_class = class_tiger ;
60016: LD_ADDR_OWVAR 28
60020: PUSH
60021: LD_INT 14
60023: ST_TO_ADDR
// hc_gallery =  ;
60024: LD_ADDR_OWVAR 33
60028: PUSH
60029: LD_STRING 
60031: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60032: LD_ADDR_OWVAR 35
60036: PUSH
60037: LD_INT 7
60039: NEG
60040: PPUSH
60041: LD_INT 7
60043: PPUSH
60044: CALL_OW 12
60048: ST_TO_ADDR
// animal := CreateHuman ;
60049: LD_ADDR_VAR 0 12
60053: PUSH
60054: CALL_OW 44
60058: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60059: LD_VAR 0 12
60063: PPUSH
60064: LD_VAR 0 8
60068: PPUSH
60069: LD_INT 0
60071: PPUSH
60072: CALL 61985 0 3
// end ;
60076: GO 60013
60078: POP
60079: POP
// if apemans then
60080: LD_VAR 0 3
60084: IFFALSE 60207
// for i = 1 to apemans do
60086: LD_ADDR_VAR 0 11
60090: PUSH
60091: DOUBLE
60092: LD_INT 1
60094: DEC
60095: ST_TO_ADDR
60096: LD_VAR 0 3
60100: PUSH
60101: FOR_TO
60102: IFFALSE 60205
// begin hc_class = class_apeman ;
60104: LD_ADDR_OWVAR 28
60108: PUSH
60109: LD_INT 12
60111: ST_TO_ADDR
// hc_gallery =  ;
60112: LD_ADDR_OWVAR 33
60116: PUSH
60117: LD_STRING 
60119: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60120: LD_ADDR_OWVAR 35
60124: PUSH
60125: LD_INT 2
60127: NEG
60128: PPUSH
60129: LD_INT 2
60131: PPUSH
60132: CALL_OW 12
60136: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60137: LD_ADDR_OWVAR 31
60141: PUSH
60142: LD_INT 1
60144: PPUSH
60145: LD_INT 3
60147: PPUSH
60148: CALL_OW 12
60152: PUSH
60153: LD_INT 1
60155: PPUSH
60156: LD_INT 3
60158: PPUSH
60159: CALL_OW 12
60163: PUSH
60164: LD_INT 0
60166: PUSH
60167: LD_INT 0
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: ST_TO_ADDR
// animal := CreateHuman ;
60176: LD_ADDR_VAR 0 12
60180: PUSH
60181: CALL_OW 44
60185: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60186: LD_VAR 0 12
60190: PPUSH
60191: LD_VAR 0 8
60195: PPUSH
60196: LD_INT 0
60198: PPUSH
60199: CALL 61985 0 3
// end ;
60203: GO 60101
60205: POP
60206: POP
// if enchidnas then
60207: LD_VAR 0 4
60211: IFFALSE 60278
// for i = 1 to enchidnas do
60213: LD_ADDR_VAR 0 11
60217: PUSH
60218: DOUBLE
60219: LD_INT 1
60221: DEC
60222: ST_TO_ADDR
60223: LD_VAR 0 4
60227: PUSH
60228: FOR_TO
60229: IFFALSE 60276
// begin hc_class = 13 ;
60231: LD_ADDR_OWVAR 28
60235: PUSH
60236: LD_INT 13
60238: ST_TO_ADDR
// hc_gallery =  ;
60239: LD_ADDR_OWVAR 33
60243: PUSH
60244: LD_STRING 
60246: ST_TO_ADDR
// animal := CreateHuman ;
60247: LD_ADDR_VAR 0 12
60251: PUSH
60252: CALL_OW 44
60256: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60257: LD_VAR 0 12
60261: PPUSH
60262: LD_VAR 0 8
60266: PPUSH
60267: LD_INT 0
60269: PPUSH
60270: CALL 61985 0 3
// end ;
60274: GO 60228
60276: POP
60277: POP
// if fishes then
60278: LD_VAR 0 7
60282: IFFALSE 60349
// for i = 1 to fishes do
60284: LD_ADDR_VAR 0 11
60288: PUSH
60289: DOUBLE
60290: LD_INT 1
60292: DEC
60293: ST_TO_ADDR
60294: LD_VAR 0 7
60298: PUSH
60299: FOR_TO
60300: IFFALSE 60347
// begin hc_class = 20 ;
60302: LD_ADDR_OWVAR 28
60306: PUSH
60307: LD_INT 20
60309: ST_TO_ADDR
// hc_gallery =  ;
60310: LD_ADDR_OWVAR 33
60314: PUSH
60315: LD_STRING 
60317: ST_TO_ADDR
// animal := CreateHuman ;
60318: LD_ADDR_VAR 0 12
60322: PUSH
60323: CALL_OW 44
60327: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60328: LD_VAR 0 12
60332: PPUSH
60333: LD_VAR 0 9
60337: PPUSH
60338: LD_INT 0
60340: PPUSH
60341: CALL 61985 0 3
// end ;
60345: GO 60299
60347: POP
60348: POP
// end ;
60349: LD_VAR 0 10
60353: RET
// export function WantHeal ( sci , unit ) ; begin
60354: LD_INT 0
60356: PPUSH
// if GetTaskList ( sci ) > 0 then
60357: LD_VAR 0 1
60361: PPUSH
60362: CALL_OW 437
60366: PUSH
60367: LD_INT 0
60369: GREATER
60370: IFFALSE 60440
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60372: LD_VAR 0 1
60376: PPUSH
60377: CALL_OW 437
60381: PUSH
60382: LD_INT 1
60384: ARRAY
60385: PUSH
60386: LD_INT 1
60388: ARRAY
60389: PUSH
60390: LD_STRING l
60392: EQUAL
60393: PUSH
60394: LD_VAR 0 1
60398: PPUSH
60399: CALL_OW 437
60403: PUSH
60404: LD_INT 1
60406: ARRAY
60407: PUSH
60408: LD_INT 4
60410: ARRAY
60411: PUSH
60412: LD_VAR 0 2
60416: EQUAL
60417: AND
60418: IFFALSE 60430
// result := true else
60420: LD_ADDR_VAR 0 3
60424: PUSH
60425: LD_INT 1
60427: ST_TO_ADDR
60428: GO 60438
// result := false ;
60430: LD_ADDR_VAR 0 3
60434: PUSH
60435: LD_INT 0
60437: ST_TO_ADDR
// end else
60438: GO 60448
// result := false ;
60440: LD_ADDR_VAR 0 3
60444: PUSH
60445: LD_INT 0
60447: ST_TO_ADDR
// end ;
60448: LD_VAR 0 3
60452: RET
// export function HealTarget ( sci ) ; begin
60453: LD_INT 0
60455: PPUSH
// if not sci then
60456: LD_VAR 0 1
60460: NOT
60461: IFFALSE 60465
// exit ;
60463: GO 60530
// result := 0 ;
60465: LD_ADDR_VAR 0 2
60469: PUSH
60470: LD_INT 0
60472: ST_TO_ADDR
// if GetTaskList ( sci ) then
60473: LD_VAR 0 1
60477: PPUSH
60478: CALL_OW 437
60482: IFFALSE 60530
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60484: LD_VAR 0 1
60488: PPUSH
60489: CALL_OW 437
60493: PUSH
60494: LD_INT 1
60496: ARRAY
60497: PUSH
60498: LD_INT 1
60500: ARRAY
60501: PUSH
60502: LD_STRING l
60504: EQUAL
60505: IFFALSE 60530
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60507: LD_ADDR_VAR 0 2
60511: PUSH
60512: LD_VAR 0 1
60516: PPUSH
60517: CALL_OW 437
60521: PUSH
60522: LD_INT 1
60524: ARRAY
60525: PUSH
60526: LD_INT 4
60528: ARRAY
60529: ST_TO_ADDR
// end ;
60530: LD_VAR 0 2
60534: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60535: LD_INT 0
60537: PPUSH
60538: PPUSH
60539: PPUSH
60540: PPUSH
// if not base_units then
60541: LD_VAR 0 1
60545: NOT
60546: IFFALSE 60550
// exit ;
60548: GO 60637
// result := false ;
60550: LD_ADDR_VAR 0 2
60554: PUSH
60555: LD_INT 0
60557: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60558: LD_ADDR_VAR 0 5
60562: PUSH
60563: LD_VAR 0 1
60567: PPUSH
60568: LD_INT 21
60570: PUSH
60571: LD_INT 3
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PPUSH
60578: CALL_OW 72
60582: ST_TO_ADDR
// if not tmp then
60583: LD_VAR 0 5
60587: NOT
60588: IFFALSE 60592
// exit ;
60590: GO 60637
// for i in tmp do
60592: LD_ADDR_VAR 0 3
60596: PUSH
60597: LD_VAR 0 5
60601: PUSH
60602: FOR_IN
60603: IFFALSE 60635
// begin result := EnemyInRange ( i , 22 ) ;
60605: LD_ADDR_VAR 0 2
60609: PUSH
60610: LD_VAR 0 3
60614: PPUSH
60615: LD_INT 22
60617: PPUSH
60618: CALL 58323 0 2
60622: ST_TO_ADDR
// if result then
60623: LD_VAR 0 2
60627: IFFALSE 60633
// exit ;
60629: POP
60630: POP
60631: GO 60637
// end ;
60633: GO 60602
60635: POP
60636: POP
// end ;
60637: LD_VAR 0 2
60641: RET
// export function FilterByTag ( units , tag ) ; begin
60642: LD_INT 0
60644: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60645: LD_ADDR_VAR 0 3
60649: PUSH
60650: LD_VAR 0 1
60654: PPUSH
60655: LD_INT 120
60657: PUSH
60658: LD_VAR 0 2
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PPUSH
60667: CALL_OW 72
60671: ST_TO_ADDR
// end ;
60672: LD_VAR 0 3
60676: RET
// export function IsDriver ( un ) ; begin
60677: LD_INT 0
60679: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60680: LD_ADDR_VAR 0 2
60684: PUSH
60685: LD_VAR 0 1
60689: PUSH
60690: LD_INT 55
60692: PUSH
60693: EMPTY
60694: LIST
60695: PPUSH
60696: CALL_OW 69
60700: IN
60701: ST_TO_ADDR
// end ;
60702: LD_VAR 0 2
60706: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60707: LD_INT 0
60709: PPUSH
60710: PPUSH
// list := [ ] ;
60711: LD_ADDR_VAR 0 5
60715: PUSH
60716: EMPTY
60717: ST_TO_ADDR
// case d of 0 :
60718: LD_VAR 0 3
60722: PUSH
60723: LD_INT 0
60725: DOUBLE
60726: EQUAL
60727: IFTRUE 60731
60729: GO 60864
60731: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60732: LD_ADDR_VAR 0 5
60736: PUSH
60737: LD_VAR 0 1
60741: PUSH
60742: LD_INT 4
60744: MINUS
60745: PUSH
60746: LD_VAR 0 2
60750: PUSH
60751: LD_INT 4
60753: MINUS
60754: PUSH
60755: LD_INT 2
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: LIST
60762: PUSH
60763: LD_VAR 0 1
60767: PUSH
60768: LD_INT 3
60770: MINUS
60771: PUSH
60772: LD_VAR 0 2
60776: PUSH
60777: LD_INT 1
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: LIST
60784: PUSH
60785: LD_VAR 0 1
60789: PUSH
60790: LD_INT 4
60792: PLUS
60793: PUSH
60794: LD_VAR 0 2
60798: PUSH
60799: LD_INT 4
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: LIST
60806: PUSH
60807: LD_VAR 0 1
60811: PUSH
60812: LD_INT 3
60814: PLUS
60815: PUSH
60816: LD_VAR 0 2
60820: PUSH
60821: LD_INT 3
60823: PLUS
60824: PUSH
60825: LD_INT 5
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: LIST
60832: PUSH
60833: LD_VAR 0 1
60837: PUSH
60838: LD_VAR 0 2
60842: PUSH
60843: LD_INT 4
60845: PLUS
60846: PUSH
60847: LD_INT 0
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: LIST
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: ST_TO_ADDR
// end ; 1 :
60862: GO 61562
60864: LD_INT 1
60866: DOUBLE
60867: EQUAL
60868: IFTRUE 60872
60870: GO 61005
60872: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60873: LD_ADDR_VAR 0 5
60877: PUSH
60878: LD_VAR 0 1
60882: PUSH
60883: LD_VAR 0 2
60887: PUSH
60888: LD_INT 4
60890: MINUS
60891: PUSH
60892: LD_INT 3
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: LIST
60899: PUSH
60900: LD_VAR 0 1
60904: PUSH
60905: LD_INT 3
60907: MINUS
60908: PUSH
60909: LD_VAR 0 2
60913: PUSH
60914: LD_INT 3
60916: MINUS
60917: PUSH
60918: LD_INT 2
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: LIST
60925: PUSH
60926: LD_VAR 0 1
60930: PUSH
60931: LD_INT 4
60933: MINUS
60934: PUSH
60935: LD_VAR 0 2
60939: PUSH
60940: LD_INT 1
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: LIST
60947: PUSH
60948: LD_VAR 0 1
60952: PUSH
60953: LD_VAR 0 2
60957: PUSH
60958: LD_INT 3
60960: PLUS
60961: PUSH
60962: LD_INT 0
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: LIST
60969: PUSH
60970: LD_VAR 0 1
60974: PUSH
60975: LD_INT 4
60977: PLUS
60978: PUSH
60979: LD_VAR 0 2
60983: PUSH
60984: LD_INT 4
60986: PLUS
60987: PUSH
60988: LD_INT 5
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: LIST
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: ST_TO_ADDR
// end ; 2 :
61003: GO 61562
61005: LD_INT 2
61007: DOUBLE
61008: EQUAL
61009: IFTRUE 61013
61011: GO 61142
61013: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61014: LD_ADDR_VAR 0 5
61018: PUSH
61019: LD_VAR 0 1
61023: PUSH
61024: LD_VAR 0 2
61028: PUSH
61029: LD_INT 3
61031: MINUS
61032: PUSH
61033: LD_INT 3
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: LIST
61040: PUSH
61041: LD_VAR 0 1
61045: PUSH
61046: LD_INT 4
61048: PLUS
61049: PUSH
61050: LD_VAR 0 2
61054: PUSH
61055: LD_INT 4
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: LIST
61062: PUSH
61063: LD_VAR 0 1
61067: PUSH
61068: LD_VAR 0 2
61072: PUSH
61073: LD_INT 4
61075: PLUS
61076: PUSH
61077: LD_INT 0
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: LIST
61084: PUSH
61085: LD_VAR 0 1
61089: PUSH
61090: LD_INT 3
61092: MINUS
61093: PUSH
61094: LD_VAR 0 2
61098: PUSH
61099: LD_INT 1
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: LIST
61106: PUSH
61107: LD_VAR 0 1
61111: PUSH
61112: LD_INT 4
61114: MINUS
61115: PUSH
61116: LD_VAR 0 2
61120: PUSH
61121: LD_INT 4
61123: MINUS
61124: PUSH
61125: LD_INT 2
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: LIST
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: ST_TO_ADDR
// end ; 3 :
61140: GO 61562
61142: LD_INT 3
61144: DOUBLE
61145: EQUAL
61146: IFTRUE 61150
61148: GO 61283
61150: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61151: LD_ADDR_VAR 0 5
61155: PUSH
61156: LD_VAR 0 1
61160: PUSH
61161: LD_INT 3
61163: PLUS
61164: PUSH
61165: LD_VAR 0 2
61169: PUSH
61170: LD_INT 4
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: LIST
61177: PUSH
61178: LD_VAR 0 1
61182: PUSH
61183: LD_INT 4
61185: PLUS
61186: PUSH
61187: LD_VAR 0 2
61191: PUSH
61192: LD_INT 4
61194: PLUS
61195: PUSH
61196: LD_INT 5
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: LIST
61203: PUSH
61204: LD_VAR 0 1
61208: PUSH
61209: LD_INT 4
61211: MINUS
61212: PUSH
61213: LD_VAR 0 2
61217: PUSH
61218: LD_INT 1
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: LIST
61225: PUSH
61226: LD_VAR 0 1
61230: PUSH
61231: LD_VAR 0 2
61235: PUSH
61236: LD_INT 4
61238: MINUS
61239: PUSH
61240: LD_INT 3
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: LIST
61247: PUSH
61248: LD_VAR 0 1
61252: PUSH
61253: LD_INT 3
61255: MINUS
61256: PUSH
61257: LD_VAR 0 2
61261: PUSH
61262: LD_INT 3
61264: MINUS
61265: PUSH
61266: LD_INT 2
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: LIST
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: ST_TO_ADDR
// end ; 4 :
61281: GO 61562
61283: LD_INT 4
61285: DOUBLE
61286: EQUAL
61287: IFTRUE 61291
61289: GO 61424
61291: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61292: LD_ADDR_VAR 0 5
61296: PUSH
61297: LD_VAR 0 1
61301: PUSH
61302: LD_VAR 0 2
61306: PUSH
61307: LD_INT 4
61309: PLUS
61310: PUSH
61311: LD_INT 0
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: LIST
61318: PUSH
61319: LD_VAR 0 1
61323: PUSH
61324: LD_INT 3
61326: PLUS
61327: PUSH
61328: LD_VAR 0 2
61332: PUSH
61333: LD_INT 3
61335: PLUS
61336: PUSH
61337: LD_INT 5
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: LIST
61344: PUSH
61345: LD_VAR 0 1
61349: PUSH
61350: LD_INT 4
61352: PLUS
61353: PUSH
61354: LD_VAR 0 2
61358: PUSH
61359: LD_INT 4
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: LIST
61366: PUSH
61367: LD_VAR 0 1
61371: PUSH
61372: LD_VAR 0 2
61376: PUSH
61377: LD_INT 3
61379: MINUS
61380: PUSH
61381: LD_INT 3
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: LIST
61388: PUSH
61389: LD_VAR 0 1
61393: PUSH
61394: LD_INT 4
61396: MINUS
61397: PUSH
61398: LD_VAR 0 2
61402: PUSH
61403: LD_INT 4
61405: MINUS
61406: PUSH
61407: LD_INT 2
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: LIST
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: ST_TO_ADDR
// end ; 5 :
61422: GO 61562
61424: LD_INT 5
61426: DOUBLE
61427: EQUAL
61428: IFTRUE 61432
61430: GO 61561
61432: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61433: LD_ADDR_VAR 0 5
61437: PUSH
61438: LD_VAR 0 1
61442: PUSH
61443: LD_INT 4
61445: MINUS
61446: PUSH
61447: LD_VAR 0 2
61451: PUSH
61452: LD_INT 1
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: LIST
61459: PUSH
61460: LD_VAR 0 1
61464: PUSH
61465: LD_VAR 0 2
61469: PUSH
61470: LD_INT 4
61472: MINUS
61473: PUSH
61474: LD_INT 3
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: LIST
61481: PUSH
61482: LD_VAR 0 1
61486: PUSH
61487: LD_INT 4
61489: PLUS
61490: PUSH
61491: LD_VAR 0 2
61495: PUSH
61496: LD_INT 4
61498: PLUS
61499: PUSH
61500: LD_INT 5
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: LIST
61507: PUSH
61508: LD_VAR 0 1
61512: PUSH
61513: LD_INT 3
61515: PLUS
61516: PUSH
61517: LD_VAR 0 2
61521: PUSH
61522: LD_INT 4
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: LIST
61529: PUSH
61530: LD_VAR 0 1
61534: PUSH
61535: LD_VAR 0 2
61539: PUSH
61540: LD_INT 3
61542: PLUS
61543: PUSH
61544: LD_INT 0
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: LIST
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: ST_TO_ADDR
// end ; end ;
61559: GO 61562
61561: POP
// result := list ;
61562: LD_ADDR_VAR 0 4
61566: PUSH
61567: LD_VAR 0 5
61571: ST_TO_ADDR
// end ;
61572: LD_VAR 0 4
61576: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61577: LD_INT 0
61579: PPUSH
61580: PPUSH
61581: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61582: LD_VAR 0 1
61586: NOT
61587: PUSH
61588: LD_VAR 0 2
61592: PUSH
61593: LD_INT 1
61595: PUSH
61596: LD_INT 2
61598: PUSH
61599: LD_INT 3
61601: PUSH
61602: LD_INT 4
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: IN
61611: NOT
61612: OR
61613: IFFALSE 61617
// exit ;
61615: GO 61709
// tmp := [ ] ;
61617: LD_ADDR_VAR 0 5
61621: PUSH
61622: EMPTY
61623: ST_TO_ADDR
// for i in units do
61624: LD_ADDR_VAR 0 4
61628: PUSH
61629: LD_VAR 0 1
61633: PUSH
61634: FOR_IN
61635: IFFALSE 61678
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61637: LD_ADDR_VAR 0 5
61641: PUSH
61642: LD_VAR 0 5
61646: PPUSH
61647: LD_VAR 0 5
61651: PUSH
61652: LD_INT 1
61654: PLUS
61655: PPUSH
61656: LD_VAR 0 4
61660: PPUSH
61661: LD_VAR 0 2
61665: PPUSH
61666: CALL_OW 259
61670: PPUSH
61671: CALL_OW 2
61675: ST_TO_ADDR
61676: GO 61634
61678: POP
61679: POP
// if not tmp then
61680: LD_VAR 0 5
61684: NOT
61685: IFFALSE 61689
// exit ;
61687: GO 61709
// result := SortListByListDesc ( units , tmp ) ;
61689: LD_ADDR_VAR 0 3
61693: PUSH
61694: LD_VAR 0 1
61698: PPUSH
61699: LD_VAR 0 5
61703: PPUSH
61704: CALL_OW 77
61708: ST_TO_ADDR
// end ;
61709: LD_VAR 0 3
61713: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61714: LD_INT 0
61716: PPUSH
61717: PPUSH
61718: PPUSH
// result := false ;
61719: LD_ADDR_VAR 0 3
61723: PUSH
61724: LD_INT 0
61726: ST_TO_ADDR
// x := GetX ( building ) ;
61727: LD_ADDR_VAR 0 4
61731: PUSH
61732: LD_VAR 0 2
61736: PPUSH
61737: CALL_OW 250
61741: ST_TO_ADDR
// y := GetY ( building ) ;
61742: LD_ADDR_VAR 0 5
61746: PUSH
61747: LD_VAR 0 2
61751: PPUSH
61752: CALL_OW 251
61756: ST_TO_ADDR
// if not building or not x or not y then
61757: LD_VAR 0 2
61761: NOT
61762: PUSH
61763: LD_VAR 0 4
61767: NOT
61768: OR
61769: PUSH
61770: LD_VAR 0 5
61774: NOT
61775: OR
61776: IFFALSE 61780
// exit ;
61778: GO 61872
// if GetTaskList ( unit ) then
61780: LD_VAR 0 1
61784: PPUSH
61785: CALL_OW 437
61789: IFFALSE 61872
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61791: LD_STRING e
61793: PUSH
61794: LD_VAR 0 1
61798: PPUSH
61799: CALL_OW 437
61803: PUSH
61804: LD_INT 1
61806: ARRAY
61807: PUSH
61808: LD_INT 1
61810: ARRAY
61811: EQUAL
61812: PUSH
61813: LD_VAR 0 4
61817: PUSH
61818: LD_VAR 0 1
61822: PPUSH
61823: CALL_OW 437
61827: PUSH
61828: LD_INT 1
61830: ARRAY
61831: PUSH
61832: LD_INT 2
61834: ARRAY
61835: EQUAL
61836: AND
61837: PUSH
61838: LD_VAR 0 5
61842: PUSH
61843: LD_VAR 0 1
61847: PPUSH
61848: CALL_OW 437
61852: PUSH
61853: LD_INT 1
61855: ARRAY
61856: PUSH
61857: LD_INT 3
61859: ARRAY
61860: EQUAL
61861: AND
61862: IFFALSE 61872
// result := true end ;
61864: LD_ADDR_VAR 0 3
61868: PUSH
61869: LD_INT 1
61871: ST_TO_ADDR
// end ;
61872: LD_VAR 0 3
61876: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61877: LD_INT 0
61879: PPUSH
// result := false ;
61880: LD_ADDR_VAR 0 4
61884: PUSH
61885: LD_INT 0
61887: ST_TO_ADDR
// if GetTaskList ( unit ) then
61888: LD_VAR 0 1
61892: PPUSH
61893: CALL_OW 437
61897: IFFALSE 61980
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61899: LD_STRING M
61901: PUSH
61902: LD_VAR 0 1
61906: PPUSH
61907: CALL_OW 437
61911: PUSH
61912: LD_INT 1
61914: ARRAY
61915: PUSH
61916: LD_INT 1
61918: ARRAY
61919: EQUAL
61920: PUSH
61921: LD_VAR 0 2
61925: PUSH
61926: LD_VAR 0 1
61930: PPUSH
61931: CALL_OW 437
61935: PUSH
61936: LD_INT 1
61938: ARRAY
61939: PUSH
61940: LD_INT 2
61942: ARRAY
61943: EQUAL
61944: AND
61945: PUSH
61946: LD_VAR 0 3
61950: PUSH
61951: LD_VAR 0 1
61955: PPUSH
61956: CALL_OW 437
61960: PUSH
61961: LD_INT 1
61963: ARRAY
61964: PUSH
61965: LD_INT 3
61967: ARRAY
61968: EQUAL
61969: AND
61970: IFFALSE 61980
// result := true ;
61972: LD_ADDR_VAR 0 4
61976: PUSH
61977: LD_INT 1
61979: ST_TO_ADDR
// end ; end ;
61980: LD_VAR 0 4
61984: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61985: LD_INT 0
61987: PPUSH
61988: PPUSH
61989: PPUSH
61990: PPUSH
// if not unit or not area then
61991: LD_VAR 0 1
61995: NOT
61996: PUSH
61997: LD_VAR 0 2
62001: NOT
62002: OR
62003: IFFALSE 62007
// exit ;
62005: GO 62171
// tmp := AreaToList ( area , i ) ;
62007: LD_ADDR_VAR 0 6
62011: PUSH
62012: LD_VAR 0 2
62016: PPUSH
62017: LD_VAR 0 5
62021: PPUSH
62022: CALL_OW 517
62026: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62027: LD_ADDR_VAR 0 5
62031: PUSH
62032: DOUBLE
62033: LD_INT 1
62035: DEC
62036: ST_TO_ADDR
62037: LD_VAR 0 6
62041: PUSH
62042: LD_INT 1
62044: ARRAY
62045: PUSH
62046: FOR_TO
62047: IFFALSE 62169
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62049: LD_ADDR_VAR 0 7
62053: PUSH
62054: LD_VAR 0 6
62058: PUSH
62059: LD_INT 1
62061: ARRAY
62062: PUSH
62063: LD_VAR 0 5
62067: ARRAY
62068: PUSH
62069: LD_VAR 0 6
62073: PUSH
62074: LD_INT 2
62076: ARRAY
62077: PUSH
62078: LD_VAR 0 5
62082: ARRAY
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62088: LD_VAR 0 7
62092: PUSH
62093: LD_INT 1
62095: ARRAY
62096: PPUSH
62097: LD_VAR 0 7
62101: PUSH
62102: LD_INT 2
62104: ARRAY
62105: PPUSH
62106: CALL_OW 428
62110: PUSH
62111: LD_INT 0
62113: EQUAL
62114: IFFALSE 62167
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62116: LD_VAR 0 1
62120: PPUSH
62121: LD_VAR 0 7
62125: PUSH
62126: LD_INT 1
62128: ARRAY
62129: PPUSH
62130: LD_VAR 0 7
62134: PUSH
62135: LD_INT 2
62137: ARRAY
62138: PPUSH
62139: LD_VAR 0 3
62143: PPUSH
62144: CALL_OW 48
// result := IsPlaced ( unit ) ;
62148: LD_ADDR_VAR 0 4
62152: PUSH
62153: LD_VAR 0 1
62157: PPUSH
62158: CALL_OW 305
62162: ST_TO_ADDR
// exit ;
62163: POP
62164: POP
62165: GO 62171
// end ; end ;
62167: GO 62046
62169: POP
62170: POP
// end ;
62171: LD_VAR 0 4
62175: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62176: LD_INT 0
62178: PPUSH
62179: PPUSH
62180: PPUSH
// if not side or side > 8 then
62181: LD_VAR 0 1
62185: NOT
62186: PUSH
62187: LD_VAR 0 1
62191: PUSH
62192: LD_INT 8
62194: GREATER
62195: OR
62196: IFFALSE 62200
// exit ;
62198: GO 62387
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62200: LD_ADDR_VAR 0 4
62204: PUSH
62205: LD_INT 22
62207: PUSH
62208: LD_VAR 0 1
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 21
62219: PUSH
62220: LD_INT 3
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PPUSH
62231: CALL_OW 69
62235: ST_TO_ADDR
// if not tmp then
62236: LD_VAR 0 4
62240: NOT
62241: IFFALSE 62245
// exit ;
62243: GO 62387
// enable_addtolog := true ;
62245: LD_ADDR_OWVAR 81
62249: PUSH
62250: LD_INT 1
62252: ST_TO_ADDR
// AddToLog ( [ ) ;
62253: LD_STRING [
62255: PPUSH
62256: CALL_OW 561
// for i in tmp do
62260: LD_ADDR_VAR 0 3
62264: PUSH
62265: LD_VAR 0 4
62269: PUSH
62270: FOR_IN
62271: IFFALSE 62378
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62273: LD_STRING [
62275: PUSH
62276: LD_VAR 0 3
62280: PPUSH
62281: CALL_OW 266
62285: STR
62286: PUSH
62287: LD_STRING , 
62289: STR
62290: PUSH
62291: LD_VAR 0 3
62295: PPUSH
62296: CALL_OW 250
62300: STR
62301: PUSH
62302: LD_STRING , 
62304: STR
62305: PUSH
62306: LD_VAR 0 3
62310: PPUSH
62311: CALL_OW 251
62315: STR
62316: PUSH
62317: LD_STRING , 
62319: STR
62320: PUSH
62321: LD_VAR 0 3
62325: PPUSH
62326: CALL_OW 254
62330: STR
62331: PUSH
62332: LD_STRING , 
62334: STR
62335: PUSH
62336: LD_VAR 0 3
62340: PPUSH
62341: LD_INT 1
62343: PPUSH
62344: CALL_OW 268
62348: STR
62349: PUSH
62350: LD_STRING , 
62352: STR
62353: PUSH
62354: LD_VAR 0 3
62358: PPUSH
62359: LD_INT 2
62361: PPUSH
62362: CALL_OW 268
62366: STR
62367: PUSH
62368: LD_STRING ],
62370: STR
62371: PPUSH
62372: CALL_OW 561
// end ;
62376: GO 62270
62378: POP
62379: POP
// AddToLog ( ]; ) ;
62380: LD_STRING ];
62382: PPUSH
62383: CALL_OW 561
// end ;
62387: LD_VAR 0 2
62391: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62392: LD_INT 0
62394: PPUSH
62395: PPUSH
62396: PPUSH
62397: PPUSH
62398: PPUSH
// if not area or not rate or not max then
62399: LD_VAR 0 1
62403: NOT
62404: PUSH
62405: LD_VAR 0 2
62409: NOT
62410: OR
62411: PUSH
62412: LD_VAR 0 4
62416: NOT
62417: OR
62418: IFFALSE 62422
// exit ;
62420: GO 62611
// while 1 do
62422: LD_INT 1
62424: IFFALSE 62611
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62426: LD_ADDR_VAR 0 9
62430: PUSH
62431: LD_VAR 0 1
62435: PPUSH
62436: LD_INT 1
62438: PPUSH
62439: CALL_OW 287
62443: PUSH
62444: LD_INT 10
62446: MUL
62447: ST_TO_ADDR
// r := rate / 10 ;
62448: LD_ADDR_VAR 0 7
62452: PUSH
62453: LD_VAR 0 2
62457: PUSH
62458: LD_INT 10
62460: DIVREAL
62461: ST_TO_ADDR
// time := 1 1$00 ;
62462: LD_ADDR_VAR 0 8
62466: PUSH
62467: LD_INT 2100
62469: ST_TO_ADDR
// if amount < min then
62470: LD_VAR 0 9
62474: PUSH
62475: LD_VAR 0 3
62479: LESS
62480: IFFALSE 62498
// r := r * 2 else
62482: LD_ADDR_VAR 0 7
62486: PUSH
62487: LD_VAR 0 7
62491: PUSH
62492: LD_INT 2
62494: MUL
62495: ST_TO_ADDR
62496: GO 62524
// if amount > max then
62498: LD_VAR 0 9
62502: PUSH
62503: LD_VAR 0 4
62507: GREATER
62508: IFFALSE 62524
// r := r / 2 ;
62510: LD_ADDR_VAR 0 7
62514: PUSH
62515: LD_VAR 0 7
62519: PUSH
62520: LD_INT 2
62522: DIVREAL
62523: ST_TO_ADDR
// time := time / r ;
62524: LD_ADDR_VAR 0 8
62528: PUSH
62529: LD_VAR 0 8
62533: PUSH
62534: LD_VAR 0 7
62538: DIVREAL
62539: ST_TO_ADDR
// if time < 0 then
62540: LD_VAR 0 8
62544: PUSH
62545: LD_INT 0
62547: LESS
62548: IFFALSE 62565
// time := time * - 1 ;
62550: LD_ADDR_VAR 0 8
62554: PUSH
62555: LD_VAR 0 8
62559: PUSH
62560: LD_INT 1
62562: NEG
62563: MUL
62564: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62565: LD_VAR 0 8
62569: PUSH
62570: LD_INT 35
62572: PPUSH
62573: LD_INT 875
62575: PPUSH
62576: CALL_OW 12
62580: PLUS
62581: PPUSH
62582: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62586: LD_INT 1
62588: PPUSH
62589: LD_INT 5
62591: PPUSH
62592: CALL_OW 12
62596: PPUSH
62597: LD_VAR 0 1
62601: PPUSH
62602: LD_INT 1
62604: PPUSH
62605: CALL_OW 55
// end ;
62609: GO 62422
// end ;
62611: LD_VAR 0 5
62615: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62616: LD_INT 0
62618: PPUSH
62619: PPUSH
62620: PPUSH
62621: PPUSH
62622: PPUSH
62623: PPUSH
62624: PPUSH
62625: PPUSH
// if not turrets or not factories then
62626: LD_VAR 0 1
62630: NOT
62631: PUSH
62632: LD_VAR 0 2
62636: NOT
62637: OR
62638: IFFALSE 62642
// exit ;
62640: GO 62949
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62642: LD_ADDR_VAR 0 10
62646: PUSH
62647: LD_INT 5
62649: PUSH
62650: LD_INT 6
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 2
62659: PUSH
62660: LD_INT 4
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 3
62669: PUSH
62670: LD_INT 5
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 24
62684: PUSH
62685: LD_INT 25
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 23
62694: PUSH
62695: LD_INT 27
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 42
62708: PUSH
62709: LD_INT 43
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 44
62718: PUSH
62719: LD_INT 46
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 45
62728: PUSH
62729: LD_INT 47
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: LIST
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: LIST
62745: ST_TO_ADDR
// result := [ ] ;
62746: LD_ADDR_VAR 0 3
62750: PUSH
62751: EMPTY
62752: ST_TO_ADDR
// for i in turrets do
62753: LD_ADDR_VAR 0 4
62757: PUSH
62758: LD_VAR 0 1
62762: PUSH
62763: FOR_IN
62764: IFFALSE 62947
// begin nat := GetNation ( i ) ;
62766: LD_ADDR_VAR 0 7
62770: PUSH
62771: LD_VAR 0 4
62775: PPUSH
62776: CALL_OW 248
62780: ST_TO_ADDR
// weapon := 0 ;
62781: LD_ADDR_VAR 0 8
62785: PUSH
62786: LD_INT 0
62788: ST_TO_ADDR
// if not nat then
62789: LD_VAR 0 7
62793: NOT
62794: IFFALSE 62798
// continue ;
62796: GO 62763
// for j in list [ nat ] do
62798: LD_ADDR_VAR 0 5
62802: PUSH
62803: LD_VAR 0 10
62807: PUSH
62808: LD_VAR 0 7
62812: ARRAY
62813: PUSH
62814: FOR_IN
62815: IFFALSE 62856
// if GetBWeapon ( i ) = j [ 1 ] then
62817: LD_VAR 0 4
62821: PPUSH
62822: CALL_OW 269
62826: PUSH
62827: LD_VAR 0 5
62831: PUSH
62832: LD_INT 1
62834: ARRAY
62835: EQUAL
62836: IFFALSE 62854
// begin weapon := j [ 2 ] ;
62838: LD_ADDR_VAR 0 8
62842: PUSH
62843: LD_VAR 0 5
62847: PUSH
62848: LD_INT 2
62850: ARRAY
62851: ST_TO_ADDR
// break ;
62852: GO 62856
// end ;
62854: GO 62814
62856: POP
62857: POP
// if not weapon then
62858: LD_VAR 0 8
62862: NOT
62863: IFFALSE 62867
// continue ;
62865: GO 62763
// for k in factories do
62867: LD_ADDR_VAR 0 6
62871: PUSH
62872: LD_VAR 0 2
62876: PUSH
62877: FOR_IN
62878: IFFALSE 62943
// begin weapons := AvailableWeaponList ( k ) ;
62880: LD_ADDR_VAR 0 9
62884: PUSH
62885: LD_VAR 0 6
62889: PPUSH
62890: CALL_OW 478
62894: ST_TO_ADDR
// if not weapons then
62895: LD_VAR 0 9
62899: NOT
62900: IFFALSE 62904
// continue ;
62902: GO 62877
// if weapon in weapons then
62904: LD_VAR 0 8
62908: PUSH
62909: LD_VAR 0 9
62913: IN
62914: IFFALSE 62941
// begin result := [ i , weapon ] ;
62916: LD_ADDR_VAR 0 3
62920: PUSH
62921: LD_VAR 0 4
62925: PUSH
62926: LD_VAR 0 8
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: ST_TO_ADDR
// exit ;
62935: POP
62936: POP
62937: POP
62938: POP
62939: GO 62949
// end ; end ;
62941: GO 62877
62943: POP
62944: POP
// end ;
62945: GO 62763
62947: POP
62948: POP
// end ;
62949: LD_VAR 0 3
62953: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62954: LD_INT 0
62956: PPUSH
// if not side or side > 8 then
62957: LD_VAR 0 3
62961: NOT
62962: PUSH
62963: LD_VAR 0 3
62967: PUSH
62968: LD_INT 8
62970: GREATER
62971: OR
62972: IFFALSE 62976
// exit ;
62974: GO 63035
// if not range then
62976: LD_VAR 0 4
62980: NOT
62981: IFFALSE 62992
// range := - 12 ;
62983: LD_ADDR_VAR 0 4
62987: PUSH
62988: LD_INT 12
62990: NEG
62991: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62992: LD_VAR 0 1
62996: PPUSH
62997: LD_VAR 0 2
63001: PPUSH
63002: LD_VAR 0 3
63006: PPUSH
63007: LD_VAR 0 4
63011: PPUSH
63012: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63016: LD_VAR 0 1
63020: PPUSH
63021: LD_VAR 0 2
63025: PPUSH
63026: LD_VAR 0 3
63030: PPUSH
63031: CALL_OW 331
// end ;
63035: LD_VAR 0 5
63039: RET
// export function Video ( mode ) ; begin
63040: LD_INT 0
63042: PPUSH
// ingame_video = mode ;
63043: LD_ADDR_OWVAR 52
63047: PUSH
63048: LD_VAR 0 1
63052: ST_TO_ADDR
// interface_hidden = mode ;
63053: LD_ADDR_OWVAR 54
63057: PUSH
63058: LD_VAR 0 1
63062: ST_TO_ADDR
// end ;
63063: LD_VAR 0 2
63067: RET
// export function Join ( array , element ) ; begin
63068: LD_INT 0
63070: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63071: LD_ADDR_VAR 0 3
63075: PUSH
63076: LD_VAR 0 1
63080: PPUSH
63081: LD_VAR 0 1
63085: PUSH
63086: LD_INT 1
63088: PLUS
63089: PPUSH
63090: LD_VAR 0 2
63094: PPUSH
63095: CALL_OW 1
63099: ST_TO_ADDR
// end ;
63100: LD_VAR 0 3
63104: RET
// export function JoinUnion ( array , element ) ; begin
63105: LD_INT 0
63107: PPUSH
// result := array union element ;
63108: LD_ADDR_VAR 0 3
63112: PUSH
63113: LD_VAR 0 1
63117: PUSH
63118: LD_VAR 0 2
63122: UNION
63123: ST_TO_ADDR
// end ;
63124: LD_VAR 0 3
63128: RET
// export function GetBehemoths ( side ) ; begin
63129: LD_INT 0
63131: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
63132: LD_ADDR_VAR 0 2
63136: PUSH
63137: LD_INT 22
63139: PUSH
63140: LD_VAR 0 1
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 31
63151: PUSH
63152: LD_INT 25
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PPUSH
63163: CALL_OW 69
63167: ST_TO_ADDR
// end ;
63168: LD_VAR 0 2
63172: RET
// export function Shuffle ( array ) ; var i , index ; begin
63173: LD_INT 0
63175: PPUSH
63176: PPUSH
63177: PPUSH
// result := [ ] ;
63178: LD_ADDR_VAR 0 2
63182: PUSH
63183: EMPTY
63184: ST_TO_ADDR
// if not array then
63185: LD_VAR 0 1
63189: NOT
63190: IFFALSE 63194
// exit ;
63192: GO 63293
// Randomize ;
63194: CALL_OW 10
// for i = array downto 1 do
63198: LD_ADDR_VAR 0 3
63202: PUSH
63203: DOUBLE
63204: LD_VAR 0 1
63208: INC
63209: ST_TO_ADDR
63210: LD_INT 1
63212: PUSH
63213: FOR_DOWNTO
63214: IFFALSE 63291
// begin index := rand ( 1 , array ) ;
63216: LD_ADDR_VAR 0 4
63220: PUSH
63221: LD_INT 1
63223: PPUSH
63224: LD_VAR 0 1
63228: PPUSH
63229: CALL_OW 12
63233: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63234: LD_ADDR_VAR 0 2
63238: PUSH
63239: LD_VAR 0 2
63243: PPUSH
63244: LD_VAR 0 2
63248: PUSH
63249: LD_INT 1
63251: PLUS
63252: PPUSH
63253: LD_VAR 0 1
63257: PUSH
63258: LD_VAR 0 4
63262: ARRAY
63263: PPUSH
63264: CALL_OW 2
63268: ST_TO_ADDR
// array := Delete ( array , index ) ;
63269: LD_ADDR_VAR 0 1
63273: PUSH
63274: LD_VAR 0 1
63278: PPUSH
63279: LD_VAR 0 4
63283: PPUSH
63284: CALL_OW 3
63288: ST_TO_ADDR
// end ;
63289: GO 63213
63291: POP
63292: POP
// end ;
63293: LD_VAR 0 2
63297: RET
// export function GetBaseMaterials ( base ) ; begin
63298: LD_INT 0
63300: PPUSH
// result := [ 0 , 0 , 0 ] ;
63301: LD_ADDR_VAR 0 2
63305: PUSH
63306: LD_INT 0
63308: PUSH
63309: LD_INT 0
63311: PUSH
63312: LD_INT 0
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: LIST
63319: ST_TO_ADDR
// if not base then
63320: LD_VAR 0 1
63324: NOT
63325: IFFALSE 63329
// exit ;
63327: GO 63378
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63329: LD_ADDR_VAR 0 2
63333: PUSH
63334: LD_VAR 0 1
63338: PPUSH
63339: LD_INT 1
63341: PPUSH
63342: CALL_OW 275
63346: PUSH
63347: LD_VAR 0 1
63351: PPUSH
63352: LD_INT 2
63354: PPUSH
63355: CALL_OW 275
63359: PUSH
63360: LD_VAR 0 1
63364: PPUSH
63365: LD_INT 3
63367: PPUSH
63368: CALL_OW 275
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: LIST
63377: ST_TO_ADDR
// end ;
63378: LD_VAR 0 2
63382: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63383: LD_INT 0
63385: PPUSH
63386: PPUSH
// result := array ;
63387: LD_ADDR_VAR 0 3
63391: PUSH
63392: LD_VAR 0 1
63396: ST_TO_ADDR
// if size >= result then
63397: LD_VAR 0 2
63401: PUSH
63402: LD_VAR 0 3
63406: GREATEREQUAL
63407: IFFALSE 63411
// exit ;
63409: GO 63461
// if size then
63411: LD_VAR 0 2
63415: IFFALSE 63461
// for i := array downto size do
63417: LD_ADDR_VAR 0 4
63421: PUSH
63422: DOUBLE
63423: LD_VAR 0 1
63427: INC
63428: ST_TO_ADDR
63429: LD_VAR 0 2
63433: PUSH
63434: FOR_DOWNTO
63435: IFFALSE 63459
// result := Delete ( result , result ) ;
63437: LD_ADDR_VAR 0 3
63441: PUSH
63442: LD_VAR 0 3
63446: PPUSH
63447: LD_VAR 0 3
63451: PPUSH
63452: CALL_OW 3
63456: ST_TO_ADDR
63457: GO 63434
63459: POP
63460: POP
// end ;
63461: LD_VAR 0 3
63465: RET
// export function ComExit ( unit ) ; var tmp ; begin
63466: LD_INT 0
63468: PPUSH
63469: PPUSH
// if not IsInUnit ( unit ) then
63470: LD_VAR 0 1
63474: PPUSH
63475: CALL_OW 310
63479: NOT
63480: IFFALSE 63484
// exit ;
63482: GO 63544
// tmp := IsInUnit ( unit ) ;
63484: LD_ADDR_VAR 0 3
63488: PUSH
63489: LD_VAR 0 1
63493: PPUSH
63494: CALL_OW 310
63498: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63499: LD_VAR 0 3
63503: PPUSH
63504: CALL_OW 247
63508: PUSH
63509: LD_INT 2
63511: EQUAL
63512: IFFALSE 63525
// ComExitVehicle ( unit ) else
63514: LD_VAR 0 1
63518: PPUSH
63519: CALL_OW 121
63523: GO 63534
// ComExitBuilding ( unit ) ;
63525: LD_VAR 0 1
63529: PPUSH
63530: CALL_OW 122
// result := tmp ;
63534: LD_ADDR_VAR 0 2
63538: PUSH
63539: LD_VAR 0 3
63543: ST_TO_ADDR
// end ;
63544: LD_VAR 0 2
63548: RET
// export function ComExitAll ( units ) ; var i ; begin
63549: LD_INT 0
63551: PPUSH
63552: PPUSH
// if not units then
63553: LD_VAR 0 1
63557: NOT
63558: IFFALSE 63562
// exit ;
63560: GO 63588
// for i in units do
63562: LD_ADDR_VAR 0 3
63566: PUSH
63567: LD_VAR 0 1
63571: PUSH
63572: FOR_IN
63573: IFFALSE 63586
// ComExit ( i ) ;
63575: LD_VAR 0 3
63579: PPUSH
63580: CALL 63466 0 1
63584: GO 63572
63586: POP
63587: POP
// end ;
63588: LD_VAR 0 2
63592: RET
// export function ResetHc ; begin
63593: LD_INT 0
63595: PPUSH
// InitHc ;
63596: CALL_OW 19
// hc_importance := 0 ;
63600: LD_ADDR_OWVAR 32
63604: PUSH
63605: LD_INT 0
63607: ST_TO_ADDR
// end ;
63608: LD_VAR 0 1
63612: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63613: LD_INT 0
63615: PPUSH
63616: PPUSH
63617: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63618: LD_ADDR_VAR 0 6
63622: PUSH
63623: LD_VAR 0 1
63627: PUSH
63628: LD_VAR 0 3
63632: PLUS
63633: PUSH
63634: LD_INT 2
63636: DIV
63637: ST_TO_ADDR
// if _x < 0 then
63638: LD_VAR 0 6
63642: PUSH
63643: LD_INT 0
63645: LESS
63646: IFFALSE 63663
// _x := _x * - 1 ;
63648: LD_ADDR_VAR 0 6
63652: PUSH
63653: LD_VAR 0 6
63657: PUSH
63658: LD_INT 1
63660: NEG
63661: MUL
63662: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63663: LD_ADDR_VAR 0 7
63667: PUSH
63668: LD_VAR 0 2
63672: PUSH
63673: LD_VAR 0 4
63677: PLUS
63678: PUSH
63679: LD_INT 2
63681: DIV
63682: ST_TO_ADDR
// if _y < 0 then
63683: LD_VAR 0 7
63687: PUSH
63688: LD_INT 0
63690: LESS
63691: IFFALSE 63708
// _y := _y * - 1 ;
63693: LD_ADDR_VAR 0 7
63697: PUSH
63698: LD_VAR 0 7
63702: PUSH
63703: LD_INT 1
63705: NEG
63706: MUL
63707: ST_TO_ADDR
// result := [ _x , _y ] ;
63708: LD_ADDR_VAR 0 5
63712: PUSH
63713: LD_VAR 0 6
63717: PUSH
63718: LD_VAR 0 7
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: ST_TO_ADDR
// end ;
63727: LD_VAR 0 5
63731: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63732: LD_INT 0
63734: PPUSH
63735: PPUSH
63736: PPUSH
63737: PPUSH
// task := GetTaskList ( unit ) ;
63738: LD_ADDR_VAR 0 7
63742: PUSH
63743: LD_VAR 0 1
63747: PPUSH
63748: CALL_OW 437
63752: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63753: LD_VAR 0 7
63757: NOT
63758: PUSH
63759: LD_VAR 0 1
63763: PPUSH
63764: LD_VAR 0 2
63768: PPUSH
63769: CALL_OW 308
63773: NOT
63774: AND
63775: IFFALSE 63779
// exit ;
63777: GO 63897
// if IsInArea ( unit , area ) then
63779: LD_VAR 0 1
63783: PPUSH
63784: LD_VAR 0 2
63788: PPUSH
63789: CALL_OW 308
63793: IFFALSE 63811
// begin ComMoveToArea ( unit , goAway ) ;
63795: LD_VAR 0 1
63799: PPUSH
63800: LD_VAR 0 3
63804: PPUSH
63805: CALL_OW 113
// exit ;
63809: GO 63897
// end ; if task [ 1 ] [ 1 ] <> M then
63811: LD_VAR 0 7
63815: PUSH
63816: LD_INT 1
63818: ARRAY
63819: PUSH
63820: LD_INT 1
63822: ARRAY
63823: PUSH
63824: LD_STRING M
63826: NONEQUAL
63827: IFFALSE 63831
// exit ;
63829: GO 63897
// x := task [ 1 ] [ 2 ] ;
63831: LD_ADDR_VAR 0 5
63835: PUSH
63836: LD_VAR 0 7
63840: PUSH
63841: LD_INT 1
63843: ARRAY
63844: PUSH
63845: LD_INT 2
63847: ARRAY
63848: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63849: LD_ADDR_VAR 0 6
63853: PUSH
63854: LD_VAR 0 7
63858: PUSH
63859: LD_INT 1
63861: ARRAY
63862: PUSH
63863: LD_INT 3
63865: ARRAY
63866: ST_TO_ADDR
// if InArea ( x , y , area ) then
63867: LD_VAR 0 5
63871: PPUSH
63872: LD_VAR 0 6
63876: PPUSH
63877: LD_VAR 0 2
63881: PPUSH
63882: CALL_OW 309
63886: IFFALSE 63897
// ComStop ( unit ) ;
63888: LD_VAR 0 1
63892: PPUSH
63893: CALL_OW 141
// end ;
63897: LD_VAR 0 4
63901: RET
// export function Abs ( value ) ; begin
63902: LD_INT 0
63904: PPUSH
// result := value ;
63905: LD_ADDR_VAR 0 2
63909: PUSH
63910: LD_VAR 0 1
63914: ST_TO_ADDR
// if value < 0 then
63915: LD_VAR 0 1
63919: PUSH
63920: LD_INT 0
63922: LESS
63923: IFFALSE 63940
// result := value * - 1 ;
63925: LD_ADDR_VAR 0 2
63929: PUSH
63930: LD_VAR 0 1
63934: PUSH
63935: LD_INT 1
63937: NEG
63938: MUL
63939: ST_TO_ADDR
// end ;
63940: LD_VAR 0 2
63944: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63945: LD_INT 0
63947: PPUSH
63948: PPUSH
63949: PPUSH
63950: PPUSH
63951: PPUSH
63952: PPUSH
63953: PPUSH
63954: PPUSH
// if not unit or not building then
63955: LD_VAR 0 1
63959: NOT
63960: PUSH
63961: LD_VAR 0 2
63965: NOT
63966: OR
63967: IFFALSE 63971
// exit ;
63969: GO 64197
// x := GetX ( building ) ;
63971: LD_ADDR_VAR 0 4
63975: PUSH
63976: LD_VAR 0 2
63980: PPUSH
63981: CALL_OW 250
63985: ST_TO_ADDR
// y := GetY ( building ) ;
63986: LD_ADDR_VAR 0 6
63990: PUSH
63991: LD_VAR 0 2
63995: PPUSH
63996: CALL_OW 251
64000: ST_TO_ADDR
// d := GetDir ( building ) ;
64001: LD_ADDR_VAR 0 8
64005: PUSH
64006: LD_VAR 0 2
64010: PPUSH
64011: CALL_OW 254
64015: ST_TO_ADDR
// r := 4 ;
64016: LD_ADDR_VAR 0 9
64020: PUSH
64021: LD_INT 4
64023: ST_TO_ADDR
// for i := 1 to 5 do
64024: LD_ADDR_VAR 0 10
64028: PUSH
64029: DOUBLE
64030: LD_INT 1
64032: DEC
64033: ST_TO_ADDR
64034: LD_INT 5
64036: PUSH
64037: FOR_TO
64038: IFFALSE 64195
// begin _x := ShiftX ( x , d , r + i ) ;
64040: LD_ADDR_VAR 0 5
64044: PUSH
64045: LD_VAR 0 4
64049: PPUSH
64050: LD_VAR 0 8
64054: PPUSH
64055: LD_VAR 0 9
64059: PUSH
64060: LD_VAR 0 10
64064: PLUS
64065: PPUSH
64066: CALL_OW 272
64070: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64071: LD_ADDR_VAR 0 7
64075: PUSH
64076: LD_VAR 0 6
64080: PPUSH
64081: LD_VAR 0 8
64085: PPUSH
64086: LD_VAR 0 9
64090: PUSH
64091: LD_VAR 0 10
64095: PLUS
64096: PPUSH
64097: CALL_OW 273
64101: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64102: LD_VAR 0 5
64106: PPUSH
64107: LD_VAR 0 7
64111: PPUSH
64112: CALL_OW 488
64116: PUSH
64117: LD_VAR 0 5
64121: PPUSH
64122: LD_VAR 0 7
64126: PPUSH
64127: CALL_OW 428
64131: PPUSH
64132: CALL_OW 247
64136: PUSH
64137: LD_INT 3
64139: PUSH
64140: LD_INT 2
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: IN
64147: NOT
64148: AND
64149: IFFALSE 64193
// begin ComMoveXY ( unit , _x , _y ) ;
64151: LD_VAR 0 1
64155: PPUSH
64156: LD_VAR 0 5
64160: PPUSH
64161: LD_VAR 0 7
64165: PPUSH
64166: CALL_OW 111
// result := [ _x , _y ] ;
64170: LD_ADDR_VAR 0 3
64174: PUSH
64175: LD_VAR 0 5
64179: PUSH
64180: LD_VAR 0 7
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: ST_TO_ADDR
// exit ;
64189: POP
64190: POP
64191: GO 64197
// end ; end ;
64193: GO 64037
64195: POP
64196: POP
// end ;
64197: LD_VAR 0 3
64201: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64202: LD_INT 0
64204: PPUSH
64205: PPUSH
64206: PPUSH
// result := 0 ;
64207: LD_ADDR_VAR 0 3
64211: PUSH
64212: LD_INT 0
64214: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64215: LD_VAR 0 1
64219: PUSH
64220: LD_INT 0
64222: LESS
64223: PUSH
64224: LD_VAR 0 1
64228: PUSH
64229: LD_INT 8
64231: GREATER
64232: OR
64233: PUSH
64234: LD_VAR 0 2
64238: PUSH
64239: LD_INT 0
64241: LESS
64242: OR
64243: PUSH
64244: LD_VAR 0 2
64248: PUSH
64249: LD_INT 8
64251: GREATER
64252: OR
64253: IFFALSE 64257
// exit ;
64255: GO 64332
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64257: LD_ADDR_VAR 0 4
64261: PUSH
64262: LD_INT 22
64264: PUSH
64265: LD_VAR 0 2
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PPUSH
64274: CALL_OW 69
64278: PUSH
64279: FOR_IN
64280: IFFALSE 64330
// begin un := UnitShoot ( i ) ;
64282: LD_ADDR_VAR 0 5
64286: PUSH
64287: LD_VAR 0 4
64291: PPUSH
64292: CALL_OW 504
64296: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64297: LD_VAR 0 5
64301: PPUSH
64302: CALL_OW 255
64306: PUSH
64307: LD_VAR 0 1
64311: EQUAL
64312: IFFALSE 64328
// begin result := un ;
64314: LD_ADDR_VAR 0 3
64318: PUSH
64319: LD_VAR 0 5
64323: ST_TO_ADDR
// exit ;
64324: POP
64325: POP
64326: GO 64332
// end ; end ;
64328: GO 64279
64330: POP
64331: POP
// end ;
64332: LD_VAR 0 3
64336: RET
// export function GetCargoBay ( units ) ; begin
64337: LD_INT 0
64339: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64340: LD_ADDR_VAR 0 2
64344: PUSH
64345: LD_VAR 0 1
64349: PPUSH
64350: LD_INT 2
64352: PUSH
64353: LD_INT 34
64355: PUSH
64356: LD_INT 12
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 34
64365: PUSH
64366: LD_INT 51
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 34
64375: PUSH
64376: LD_INT 32
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 34
64385: PUSH
64386: LD_INT 89
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: PPUSH
64400: CALL_OW 72
64404: ST_TO_ADDR
// end ;
64405: LD_VAR 0 2
64409: RET
// export function Negate ( value ) ; begin
64410: LD_INT 0
64412: PPUSH
// result := not value ;
64413: LD_ADDR_VAR 0 2
64417: PUSH
64418: LD_VAR 0 1
64422: NOT
64423: ST_TO_ADDR
// end ;
64424: LD_VAR 0 2
64428: RET
// export function Inc ( value ) ; begin
64429: LD_INT 0
64431: PPUSH
// result := value + 1 ;
64432: LD_ADDR_VAR 0 2
64436: PUSH
64437: LD_VAR 0 1
64441: PUSH
64442: LD_INT 1
64444: PLUS
64445: ST_TO_ADDR
// end ;
64446: LD_VAR 0 2
64450: RET
// export function Dec ( value ) ; begin
64451: LD_INT 0
64453: PPUSH
// result := value - 1 ;
64454: LD_ADDR_VAR 0 2
64458: PUSH
64459: LD_VAR 0 1
64463: PUSH
64464: LD_INT 1
64466: MINUS
64467: ST_TO_ADDR
// end ;
64468: LD_VAR 0 2
64472: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64473: LD_INT 0
64475: PPUSH
64476: PPUSH
64477: PPUSH
64478: PPUSH
64479: PPUSH
64480: PPUSH
64481: PPUSH
64482: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64483: LD_VAR 0 1
64487: PPUSH
64488: LD_VAR 0 2
64492: PPUSH
64493: CALL_OW 488
64497: NOT
64498: PUSH
64499: LD_VAR 0 3
64503: PPUSH
64504: LD_VAR 0 4
64508: PPUSH
64509: CALL_OW 488
64513: NOT
64514: OR
64515: IFFALSE 64528
// begin result := - 1 ;
64517: LD_ADDR_VAR 0 5
64521: PUSH
64522: LD_INT 1
64524: NEG
64525: ST_TO_ADDR
// exit ;
64526: GO 64763
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64528: LD_ADDR_VAR 0 12
64532: PUSH
64533: LD_VAR 0 1
64537: PPUSH
64538: LD_VAR 0 2
64542: PPUSH
64543: LD_VAR 0 3
64547: PPUSH
64548: LD_VAR 0 4
64552: PPUSH
64553: CALL 63613 0 4
64557: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64558: LD_ADDR_VAR 0 11
64562: PUSH
64563: LD_VAR 0 1
64567: PPUSH
64568: LD_VAR 0 2
64572: PPUSH
64573: LD_VAR 0 12
64577: PUSH
64578: LD_INT 1
64580: ARRAY
64581: PPUSH
64582: LD_VAR 0 12
64586: PUSH
64587: LD_INT 2
64589: ARRAY
64590: PPUSH
64591: CALL_OW 298
64595: ST_TO_ADDR
// distance := 9999 ;
64596: LD_ADDR_VAR 0 10
64600: PUSH
64601: LD_INT 9999
64603: ST_TO_ADDR
// for i := 0 to 5 do
64604: LD_ADDR_VAR 0 6
64608: PUSH
64609: DOUBLE
64610: LD_INT 0
64612: DEC
64613: ST_TO_ADDR
64614: LD_INT 5
64616: PUSH
64617: FOR_TO
64618: IFFALSE 64761
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64620: LD_ADDR_VAR 0 7
64624: PUSH
64625: LD_VAR 0 1
64629: PPUSH
64630: LD_VAR 0 6
64634: PPUSH
64635: LD_VAR 0 11
64639: PPUSH
64640: CALL_OW 272
64644: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64645: LD_ADDR_VAR 0 8
64649: PUSH
64650: LD_VAR 0 2
64654: PPUSH
64655: LD_VAR 0 6
64659: PPUSH
64660: LD_VAR 0 11
64664: PPUSH
64665: CALL_OW 273
64669: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64670: LD_VAR 0 7
64674: PPUSH
64675: LD_VAR 0 8
64679: PPUSH
64680: CALL_OW 488
64684: NOT
64685: IFFALSE 64689
// continue ;
64687: GO 64617
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64689: LD_ADDR_VAR 0 9
64693: PUSH
64694: LD_VAR 0 12
64698: PUSH
64699: LD_INT 1
64701: ARRAY
64702: PPUSH
64703: LD_VAR 0 12
64707: PUSH
64708: LD_INT 2
64710: ARRAY
64711: PPUSH
64712: LD_VAR 0 7
64716: PPUSH
64717: LD_VAR 0 8
64721: PPUSH
64722: CALL_OW 298
64726: ST_TO_ADDR
// if tmp < distance then
64727: LD_VAR 0 9
64731: PUSH
64732: LD_VAR 0 10
64736: LESS
64737: IFFALSE 64759
// begin result := i ;
64739: LD_ADDR_VAR 0 5
64743: PUSH
64744: LD_VAR 0 6
64748: ST_TO_ADDR
// distance := tmp ;
64749: LD_ADDR_VAR 0 10
64753: PUSH
64754: LD_VAR 0 9
64758: ST_TO_ADDR
// end ; end ;
64759: GO 64617
64761: POP
64762: POP
// end ;
64763: LD_VAR 0 5
64767: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64768: LD_INT 0
64770: PPUSH
64771: PPUSH
// if not driver or not IsInUnit ( driver ) then
64772: LD_VAR 0 1
64776: NOT
64777: PUSH
64778: LD_VAR 0 1
64782: PPUSH
64783: CALL_OW 310
64787: NOT
64788: OR
64789: IFFALSE 64793
// exit ;
64791: GO 64883
// vehicle := IsInUnit ( driver ) ;
64793: LD_ADDR_VAR 0 3
64797: PUSH
64798: LD_VAR 0 1
64802: PPUSH
64803: CALL_OW 310
64807: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64808: LD_VAR 0 1
64812: PPUSH
64813: LD_STRING \
64815: PUSH
64816: LD_INT 0
64818: PUSH
64819: LD_INT 0
64821: PUSH
64822: LD_INT 0
64824: PUSH
64825: LD_INT 0
64827: PUSH
64828: LD_INT 0
64830: PUSH
64831: LD_INT 0
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: LIST
64838: LIST
64839: LIST
64840: LIST
64841: LIST
64842: PUSH
64843: LD_STRING E
64845: PUSH
64846: LD_INT 0
64848: PUSH
64849: LD_INT 0
64851: PUSH
64852: LD_VAR 0 3
64856: PUSH
64857: LD_INT 0
64859: PUSH
64860: LD_INT 0
64862: PUSH
64863: LD_INT 0
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: LIST
64870: LIST
64871: LIST
64872: LIST
64873: LIST
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PPUSH
64879: CALL_OW 446
// end ;
64883: LD_VAR 0 2
64887: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64888: LD_INT 0
64890: PPUSH
64891: PPUSH
// if not driver or not IsInUnit ( driver ) then
64892: LD_VAR 0 1
64896: NOT
64897: PUSH
64898: LD_VAR 0 1
64902: PPUSH
64903: CALL_OW 310
64907: NOT
64908: OR
64909: IFFALSE 64913
// exit ;
64911: GO 65003
// vehicle := IsInUnit ( driver ) ;
64913: LD_ADDR_VAR 0 3
64917: PUSH
64918: LD_VAR 0 1
64922: PPUSH
64923: CALL_OW 310
64927: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64928: LD_VAR 0 1
64932: PPUSH
64933: LD_STRING \
64935: PUSH
64936: LD_INT 0
64938: PUSH
64939: LD_INT 0
64941: PUSH
64942: LD_INT 0
64944: PUSH
64945: LD_INT 0
64947: PUSH
64948: LD_INT 0
64950: PUSH
64951: LD_INT 0
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: PUSH
64963: LD_STRING E
64965: PUSH
64966: LD_INT 0
64968: PUSH
64969: LD_INT 0
64971: PUSH
64972: LD_VAR 0 3
64976: PUSH
64977: LD_INT 0
64979: PUSH
64980: LD_INT 0
64982: PUSH
64983: LD_INT 0
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PPUSH
64999: CALL_OW 447
// end ;
65003: LD_VAR 0 2
65007: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65008: LD_INT 0
65010: PPUSH
65011: PPUSH
65012: PPUSH
// tmp := [ ] ;
65013: LD_ADDR_VAR 0 5
65017: PUSH
65018: EMPTY
65019: ST_TO_ADDR
// for i in units do
65020: LD_ADDR_VAR 0 4
65024: PUSH
65025: LD_VAR 0 1
65029: PUSH
65030: FOR_IN
65031: IFFALSE 65069
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65033: LD_ADDR_VAR 0 5
65037: PUSH
65038: LD_VAR 0 5
65042: PPUSH
65043: LD_VAR 0 5
65047: PUSH
65048: LD_INT 1
65050: PLUS
65051: PPUSH
65052: LD_VAR 0 4
65056: PPUSH
65057: CALL_OW 256
65061: PPUSH
65062: CALL_OW 2
65066: ST_TO_ADDR
65067: GO 65030
65069: POP
65070: POP
// if not tmp then
65071: LD_VAR 0 5
65075: NOT
65076: IFFALSE 65080
// exit ;
65078: GO 65128
// if asc then
65080: LD_VAR 0 2
65084: IFFALSE 65108
// result := SortListByListAsc ( units , tmp ) else
65086: LD_ADDR_VAR 0 3
65090: PUSH
65091: LD_VAR 0 1
65095: PPUSH
65096: LD_VAR 0 5
65100: PPUSH
65101: CALL_OW 76
65105: ST_TO_ADDR
65106: GO 65128
// result := SortListByListDesc ( units , tmp ) ;
65108: LD_ADDR_VAR 0 3
65112: PUSH
65113: LD_VAR 0 1
65117: PPUSH
65118: LD_VAR 0 5
65122: PPUSH
65123: CALL_OW 77
65127: ST_TO_ADDR
// end ;
65128: LD_VAR 0 3
65132: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65133: LD_INT 0
65135: PPUSH
65136: PPUSH
// task := GetTaskList ( mech ) ;
65137: LD_ADDR_VAR 0 4
65141: PUSH
65142: LD_VAR 0 1
65146: PPUSH
65147: CALL_OW 437
65151: ST_TO_ADDR
// if not task then
65152: LD_VAR 0 4
65156: NOT
65157: IFFALSE 65161
// exit ;
65159: GO 65203
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65161: LD_ADDR_VAR 0 3
65165: PUSH
65166: LD_VAR 0 4
65170: PUSH
65171: LD_INT 1
65173: ARRAY
65174: PUSH
65175: LD_INT 1
65177: ARRAY
65178: PUSH
65179: LD_STRING r
65181: EQUAL
65182: PUSH
65183: LD_VAR 0 4
65187: PUSH
65188: LD_INT 1
65190: ARRAY
65191: PUSH
65192: LD_INT 4
65194: ARRAY
65195: PUSH
65196: LD_VAR 0 2
65200: EQUAL
65201: AND
65202: ST_TO_ADDR
// end ;
65203: LD_VAR 0 3
65207: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65208: LD_INT 0
65210: PPUSH
// SetDir ( unit , d ) ;
65211: LD_VAR 0 1
65215: PPUSH
65216: LD_VAR 0 4
65220: PPUSH
65221: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65225: LD_VAR 0 1
65229: PPUSH
65230: LD_VAR 0 2
65234: PPUSH
65235: LD_VAR 0 3
65239: PPUSH
65240: LD_VAR 0 5
65244: PPUSH
65245: CALL_OW 48
// end ;
65249: LD_VAR 0 6
65253: RET
// export function ToNaturalNumber ( number ) ; begin
65254: LD_INT 0
65256: PPUSH
// result := number div 1 ;
65257: LD_ADDR_VAR 0 2
65261: PUSH
65262: LD_VAR 0 1
65266: PUSH
65267: LD_INT 1
65269: DIV
65270: ST_TO_ADDR
// if number < 0 then
65271: LD_VAR 0 1
65275: PUSH
65276: LD_INT 0
65278: LESS
65279: IFFALSE 65289
// result := 0 ;
65281: LD_ADDR_VAR 0 2
65285: PUSH
65286: LD_INT 0
65288: ST_TO_ADDR
// end ;
65289: LD_VAR 0 2
65293: RET
// export function SortByClass ( units , class ) ; var un ; begin
65294: LD_INT 0
65296: PPUSH
65297: PPUSH
// if not units or not class then
65298: LD_VAR 0 1
65302: NOT
65303: PUSH
65304: LD_VAR 0 2
65308: NOT
65309: OR
65310: IFFALSE 65314
// exit ;
65312: GO 65409
// result := [ ] ;
65314: LD_ADDR_VAR 0 3
65318: PUSH
65319: EMPTY
65320: ST_TO_ADDR
// for un in units do
65321: LD_ADDR_VAR 0 4
65325: PUSH
65326: LD_VAR 0 1
65330: PUSH
65331: FOR_IN
65332: IFFALSE 65407
// if GetClass ( un ) = class then
65334: LD_VAR 0 4
65338: PPUSH
65339: CALL_OW 257
65343: PUSH
65344: LD_VAR 0 2
65348: EQUAL
65349: IFFALSE 65376
// result := Insert ( result , 1 , un ) else
65351: LD_ADDR_VAR 0 3
65355: PUSH
65356: LD_VAR 0 3
65360: PPUSH
65361: LD_INT 1
65363: PPUSH
65364: LD_VAR 0 4
65368: PPUSH
65369: CALL_OW 2
65373: ST_TO_ADDR
65374: GO 65405
// result := Replace ( result , result + 1 , un ) ;
65376: LD_ADDR_VAR 0 3
65380: PUSH
65381: LD_VAR 0 3
65385: PPUSH
65386: LD_VAR 0 3
65390: PUSH
65391: LD_INT 1
65393: PLUS
65394: PPUSH
65395: LD_VAR 0 4
65399: PPUSH
65400: CALL_OW 1
65404: ST_TO_ADDR
65405: GO 65331
65407: POP
65408: POP
// end ;
65409: LD_VAR 0 3
65413: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65414: LD_INT 0
65416: PPUSH
65417: PPUSH
65418: PPUSH
65419: PPUSH
65420: PPUSH
65421: PPUSH
65422: PPUSH
// result := [ ] ;
65423: LD_ADDR_VAR 0 4
65427: PUSH
65428: EMPTY
65429: ST_TO_ADDR
// if x - r < 0 then
65430: LD_VAR 0 1
65434: PUSH
65435: LD_VAR 0 3
65439: MINUS
65440: PUSH
65441: LD_INT 0
65443: LESS
65444: IFFALSE 65456
// min_x := 0 else
65446: LD_ADDR_VAR 0 8
65450: PUSH
65451: LD_INT 0
65453: ST_TO_ADDR
65454: GO 65472
// min_x := x - r ;
65456: LD_ADDR_VAR 0 8
65460: PUSH
65461: LD_VAR 0 1
65465: PUSH
65466: LD_VAR 0 3
65470: MINUS
65471: ST_TO_ADDR
// if y - r < 0 then
65472: LD_VAR 0 2
65476: PUSH
65477: LD_VAR 0 3
65481: MINUS
65482: PUSH
65483: LD_INT 0
65485: LESS
65486: IFFALSE 65498
// min_y := 0 else
65488: LD_ADDR_VAR 0 7
65492: PUSH
65493: LD_INT 0
65495: ST_TO_ADDR
65496: GO 65514
// min_y := y - r ;
65498: LD_ADDR_VAR 0 7
65502: PUSH
65503: LD_VAR 0 2
65507: PUSH
65508: LD_VAR 0 3
65512: MINUS
65513: ST_TO_ADDR
// max_x := x + r ;
65514: LD_ADDR_VAR 0 9
65518: PUSH
65519: LD_VAR 0 1
65523: PUSH
65524: LD_VAR 0 3
65528: PLUS
65529: ST_TO_ADDR
// max_y := y + r ;
65530: LD_ADDR_VAR 0 10
65534: PUSH
65535: LD_VAR 0 2
65539: PUSH
65540: LD_VAR 0 3
65544: PLUS
65545: ST_TO_ADDR
// for _x = min_x to max_x do
65546: LD_ADDR_VAR 0 5
65550: PUSH
65551: DOUBLE
65552: LD_VAR 0 8
65556: DEC
65557: ST_TO_ADDR
65558: LD_VAR 0 9
65562: PUSH
65563: FOR_TO
65564: IFFALSE 65665
// for _y = min_y to max_y do
65566: LD_ADDR_VAR 0 6
65570: PUSH
65571: DOUBLE
65572: LD_VAR 0 7
65576: DEC
65577: ST_TO_ADDR
65578: LD_VAR 0 10
65582: PUSH
65583: FOR_TO
65584: IFFALSE 65661
// begin if not ValidHex ( _x , _y ) then
65586: LD_VAR 0 5
65590: PPUSH
65591: LD_VAR 0 6
65595: PPUSH
65596: CALL_OW 488
65600: NOT
65601: IFFALSE 65605
// continue ;
65603: GO 65583
// if GetResourceTypeXY ( _x , _y ) then
65605: LD_VAR 0 5
65609: PPUSH
65610: LD_VAR 0 6
65614: PPUSH
65615: CALL_OW 283
65619: IFFALSE 65659
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65621: LD_ADDR_VAR 0 4
65625: PUSH
65626: LD_VAR 0 4
65630: PPUSH
65631: LD_VAR 0 4
65635: PUSH
65636: LD_INT 1
65638: PLUS
65639: PPUSH
65640: LD_VAR 0 5
65644: PUSH
65645: LD_VAR 0 6
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PPUSH
65654: CALL_OW 1
65658: ST_TO_ADDR
// end ;
65659: GO 65583
65661: POP
65662: POP
65663: GO 65563
65665: POP
65666: POP
// end ;
65667: LD_VAR 0 4
65671: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65672: LD_INT 0
65674: PPUSH
65675: PPUSH
65676: PPUSH
65677: PPUSH
65678: PPUSH
65679: PPUSH
65680: PPUSH
65681: PPUSH
// if not units then
65682: LD_VAR 0 1
65686: NOT
65687: IFFALSE 65691
// exit ;
65689: GO 66215
// result := UnitFilter ( units , [ f_ok ] ) ;
65691: LD_ADDR_VAR 0 3
65695: PUSH
65696: LD_VAR 0 1
65700: PPUSH
65701: LD_INT 50
65703: PUSH
65704: EMPTY
65705: LIST
65706: PPUSH
65707: CALL_OW 72
65711: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65712: LD_ADDR_VAR 0 8
65716: PUSH
65717: LD_VAR 0 1
65721: PUSH
65722: LD_INT 1
65724: ARRAY
65725: PPUSH
65726: CALL_OW 255
65730: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65731: LD_ADDR_VAR 0 10
65735: PUSH
65736: LD_INT 29
65738: PUSH
65739: LD_INT 91
65741: PUSH
65742: LD_INT 49
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: LIST
65749: ST_TO_ADDR
// if not result then
65750: LD_VAR 0 3
65754: NOT
65755: IFFALSE 65759
// exit ;
65757: GO 66215
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65759: LD_ADDR_VAR 0 5
65763: PUSH
65764: LD_INT 81
65766: PUSH
65767: LD_VAR 0 8
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PPUSH
65776: CALL_OW 69
65780: ST_TO_ADDR
// for i in result do
65781: LD_ADDR_VAR 0 4
65785: PUSH
65786: LD_VAR 0 3
65790: PUSH
65791: FOR_IN
65792: IFFALSE 66213
// begin tag := GetTag ( i ) + 1 ;
65794: LD_ADDR_VAR 0 9
65798: PUSH
65799: LD_VAR 0 4
65803: PPUSH
65804: CALL_OW 110
65808: PUSH
65809: LD_INT 1
65811: PLUS
65812: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65813: LD_ADDR_VAR 0 7
65817: PUSH
65818: LD_VAR 0 4
65822: PPUSH
65823: CALL_OW 250
65827: PPUSH
65828: LD_VAR 0 4
65832: PPUSH
65833: CALL_OW 251
65837: PPUSH
65838: LD_INT 6
65840: PPUSH
65841: CALL 65414 0 3
65845: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65846: LD_VAR 0 4
65850: PPUSH
65851: CALL_OW 247
65855: PUSH
65856: LD_INT 2
65858: EQUAL
65859: PUSH
65860: LD_VAR 0 7
65864: AND
65865: PUSH
65866: LD_VAR 0 4
65870: PPUSH
65871: CALL_OW 264
65875: PUSH
65876: LD_VAR 0 10
65880: IN
65881: NOT
65882: AND
65883: IFFALSE 65922
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65885: LD_VAR 0 4
65889: PPUSH
65890: LD_VAR 0 7
65894: PUSH
65895: LD_INT 1
65897: ARRAY
65898: PUSH
65899: LD_INT 1
65901: ARRAY
65902: PPUSH
65903: LD_VAR 0 7
65907: PUSH
65908: LD_INT 1
65910: ARRAY
65911: PUSH
65912: LD_INT 2
65914: ARRAY
65915: PPUSH
65916: CALL_OW 116
65920: GO 66211
// if path > tag then
65922: LD_VAR 0 2
65926: PUSH
65927: LD_VAR 0 9
65931: GREATER
65932: IFFALSE 66140
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
65934: LD_ADDR_VAR 0 6
65938: PUSH
65939: LD_VAR 0 5
65943: PPUSH
65944: LD_INT 91
65946: PUSH
65947: LD_VAR 0 4
65951: PUSH
65952: LD_INT 8
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: LIST
65959: PPUSH
65960: CALL_OW 72
65964: ST_TO_ADDR
// if nearEnemy then
65965: LD_VAR 0 6
65969: IFFALSE 66038
// begin if GetWeapon ( i ) = ru_time_lapser then
65971: LD_VAR 0 4
65975: PPUSH
65976: CALL_OW 264
65980: PUSH
65981: LD_INT 49
65983: EQUAL
65984: IFFALSE 66012
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65986: LD_VAR 0 4
65990: PPUSH
65991: LD_VAR 0 6
65995: PPUSH
65996: LD_VAR 0 4
66000: PPUSH
66001: CALL_OW 74
66005: PPUSH
66006: CALL_OW 112
66010: GO 66036
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
66012: LD_VAR 0 4
66016: PPUSH
66017: LD_VAR 0 6
66021: PPUSH
66022: LD_VAR 0 4
66026: PPUSH
66027: CALL_OW 74
66031: PPUSH
66032: CALL_OW 115
// end else
66036: GO 66138
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66038: LD_VAR 0 4
66042: PPUSH
66043: LD_VAR 0 2
66047: PUSH
66048: LD_VAR 0 9
66052: ARRAY
66053: PUSH
66054: LD_INT 1
66056: ARRAY
66057: PPUSH
66058: LD_VAR 0 2
66062: PUSH
66063: LD_VAR 0 9
66067: ARRAY
66068: PUSH
66069: LD_INT 2
66071: ARRAY
66072: PPUSH
66073: CALL_OW 297
66077: PUSH
66078: LD_INT 6
66080: GREATER
66081: IFFALSE 66124
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66083: LD_VAR 0 4
66087: PPUSH
66088: LD_VAR 0 2
66092: PUSH
66093: LD_VAR 0 9
66097: ARRAY
66098: PUSH
66099: LD_INT 1
66101: ARRAY
66102: PPUSH
66103: LD_VAR 0 2
66107: PUSH
66108: LD_VAR 0 9
66112: ARRAY
66113: PUSH
66114: LD_INT 2
66116: ARRAY
66117: PPUSH
66118: CALL_OW 114
66122: GO 66138
// SetTag ( i , tag ) ;
66124: LD_VAR 0 4
66128: PPUSH
66129: LD_VAR 0 9
66133: PPUSH
66134: CALL_OW 109
// end else
66138: GO 66211
// if enemy then
66140: LD_VAR 0 5
66144: IFFALSE 66211
// begin if GetWeapon ( i ) = ru_time_lapser then
66146: LD_VAR 0 4
66150: PPUSH
66151: CALL_OW 264
66155: PUSH
66156: LD_INT 49
66158: EQUAL
66159: IFFALSE 66187
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66161: LD_VAR 0 4
66165: PPUSH
66166: LD_VAR 0 5
66170: PPUSH
66171: LD_VAR 0 4
66175: PPUSH
66176: CALL_OW 74
66180: PPUSH
66181: CALL_OW 112
66185: GO 66211
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66187: LD_VAR 0 4
66191: PPUSH
66192: LD_VAR 0 5
66196: PPUSH
66197: LD_VAR 0 4
66201: PPUSH
66202: CALL_OW 74
66206: PPUSH
66207: CALL_OW 115
// end ; end ;
66211: GO 65791
66213: POP
66214: POP
// end ;
66215: LD_VAR 0 3
66219: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66220: LD_INT 0
66222: PPUSH
66223: PPUSH
66224: PPUSH
// if not unit or IsInUnit ( unit ) then
66225: LD_VAR 0 1
66229: NOT
66230: PUSH
66231: LD_VAR 0 1
66235: PPUSH
66236: CALL_OW 310
66240: OR
66241: IFFALSE 66245
// exit ;
66243: GO 66336
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66245: LD_ADDR_VAR 0 4
66249: PUSH
66250: LD_VAR 0 1
66254: PPUSH
66255: CALL_OW 250
66259: PPUSH
66260: LD_VAR 0 2
66264: PPUSH
66265: LD_INT 1
66267: PPUSH
66268: CALL_OW 272
66272: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66273: LD_ADDR_VAR 0 5
66277: PUSH
66278: LD_VAR 0 1
66282: PPUSH
66283: CALL_OW 251
66287: PPUSH
66288: LD_VAR 0 2
66292: PPUSH
66293: LD_INT 1
66295: PPUSH
66296: CALL_OW 273
66300: ST_TO_ADDR
// if ValidHex ( x , y ) then
66301: LD_VAR 0 4
66305: PPUSH
66306: LD_VAR 0 5
66310: PPUSH
66311: CALL_OW 488
66315: IFFALSE 66336
// ComTurnXY ( unit , x , y ) ;
66317: LD_VAR 0 1
66321: PPUSH
66322: LD_VAR 0 4
66326: PPUSH
66327: LD_VAR 0 5
66331: PPUSH
66332: CALL_OW 118
// end ;
66336: LD_VAR 0 3
66340: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66341: LD_INT 0
66343: PPUSH
66344: PPUSH
// result := false ;
66345: LD_ADDR_VAR 0 3
66349: PUSH
66350: LD_INT 0
66352: ST_TO_ADDR
// if not units then
66353: LD_VAR 0 2
66357: NOT
66358: IFFALSE 66362
// exit ;
66360: GO 66407
// for i in units do
66362: LD_ADDR_VAR 0 4
66366: PUSH
66367: LD_VAR 0 2
66371: PUSH
66372: FOR_IN
66373: IFFALSE 66405
// if See ( side , i ) then
66375: LD_VAR 0 1
66379: PPUSH
66380: LD_VAR 0 4
66384: PPUSH
66385: CALL_OW 292
66389: IFFALSE 66403
// begin result := true ;
66391: LD_ADDR_VAR 0 3
66395: PUSH
66396: LD_INT 1
66398: ST_TO_ADDR
// exit ;
66399: POP
66400: POP
66401: GO 66407
// end ;
66403: GO 66372
66405: POP
66406: POP
// end ;
66407: LD_VAR 0 3
66411: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66412: LD_INT 0
66414: PPUSH
66415: PPUSH
66416: PPUSH
66417: PPUSH
// if not unit or not points then
66418: LD_VAR 0 1
66422: NOT
66423: PUSH
66424: LD_VAR 0 2
66428: NOT
66429: OR
66430: IFFALSE 66434
// exit ;
66432: GO 66524
// dist := 99999 ;
66434: LD_ADDR_VAR 0 5
66438: PUSH
66439: LD_INT 99999
66441: ST_TO_ADDR
// for i in points do
66442: LD_ADDR_VAR 0 4
66446: PUSH
66447: LD_VAR 0 2
66451: PUSH
66452: FOR_IN
66453: IFFALSE 66522
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66455: LD_ADDR_VAR 0 6
66459: PUSH
66460: LD_VAR 0 1
66464: PPUSH
66465: LD_VAR 0 4
66469: PUSH
66470: LD_INT 1
66472: ARRAY
66473: PPUSH
66474: LD_VAR 0 4
66478: PUSH
66479: LD_INT 2
66481: ARRAY
66482: PPUSH
66483: CALL_OW 297
66487: ST_TO_ADDR
// if tmpDist < dist then
66488: LD_VAR 0 6
66492: PUSH
66493: LD_VAR 0 5
66497: LESS
66498: IFFALSE 66520
// begin result := i ;
66500: LD_ADDR_VAR 0 3
66504: PUSH
66505: LD_VAR 0 4
66509: ST_TO_ADDR
// dist := tmpDist ;
66510: LD_ADDR_VAR 0 5
66514: PUSH
66515: LD_VAR 0 6
66519: ST_TO_ADDR
// end ; end ;
66520: GO 66452
66522: POP
66523: POP
// end ;
66524: LD_VAR 0 3
66528: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66529: LD_INT 0
66531: PPUSH
// uc_side := side ;
66532: LD_ADDR_OWVAR 20
66536: PUSH
66537: LD_VAR 0 1
66541: ST_TO_ADDR
// uc_nation := 3 ;
66542: LD_ADDR_OWVAR 21
66546: PUSH
66547: LD_INT 3
66549: ST_TO_ADDR
// vc_chassis := 25 ;
66550: LD_ADDR_OWVAR 37
66554: PUSH
66555: LD_INT 25
66557: ST_TO_ADDR
// vc_engine := engine_siberite ;
66558: LD_ADDR_OWVAR 39
66562: PUSH
66563: LD_INT 3
66565: ST_TO_ADDR
// vc_control := control_computer ;
66566: LD_ADDR_OWVAR 38
66570: PUSH
66571: LD_INT 3
66573: ST_TO_ADDR
// vc_weapon := 59 ;
66574: LD_ADDR_OWVAR 40
66578: PUSH
66579: LD_INT 59
66581: ST_TO_ADDR
// result := CreateVehicle ;
66582: LD_ADDR_VAR 0 5
66586: PUSH
66587: CALL_OW 45
66591: ST_TO_ADDR
// SetDir ( result , d ) ;
66592: LD_VAR 0 5
66596: PPUSH
66597: LD_VAR 0 4
66601: PPUSH
66602: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66606: LD_VAR 0 5
66610: PPUSH
66611: LD_VAR 0 2
66615: PPUSH
66616: LD_VAR 0 3
66620: PPUSH
66621: LD_INT 0
66623: PPUSH
66624: CALL_OW 48
// end ;
66628: LD_VAR 0 5
66632: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66633: LD_INT 0
66635: PPUSH
66636: PPUSH
66637: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66638: LD_ADDR_VAR 0 2
66642: PUSH
66643: LD_INT 0
66645: PUSH
66646: LD_INT 0
66648: PUSH
66649: LD_INT 0
66651: PUSH
66652: LD_INT 0
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66661: LD_VAR 0 1
66665: NOT
66666: PUSH
66667: LD_VAR 0 1
66671: PPUSH
66672: CALL_OW 264
66676: PUSH
66677: LD_INT 12
66679: PUSH
66680: LD_INT 51
66682: PUSH
66683: LD_INT 32
66685: PUSH
66686: LD_INT 89
66688: PUSH
66689: EMPTY
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: IN
66695: NOT
66696: OR
66697: IFFALSE 66701
// exit ;
66699: GO 66799
// for i := 1 to 3 do
66701: LD_ADDR_VAR 0 3
66705: PUSH
66706: DOUBLE
66707: LD_INT 1
66709: DEC
66710: ST_TO_ADDR
66711: LD_INT 3
66713: PUSH
66714: FOR_TO
66715: IFFALSE 66797
// begin tmp := GetCargo ( cargo , i ) ;
66717: LD_ADDR_VAR 0 4
66721: PUSH
66722: LD_VAR 0 1
66726: PPUSH
66727: LD_VAR 0 3
66731: PPUSH
66732: CALL_OW 289
66736: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66737: LD_ADDR_VAR 0 2
66741: PUSH
66742: LD_VAR 0 2
66746: PPUSH
66747: LD_VAR 0 3
66751: PPUSH
66752: LD_VAR 0 4
66756: PPUSH
66757: CALL_OW 1
66761: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66762: LD_ADDR_VAR 0 2
66766: PUSH
66767: LD_VAR 0 2
66771: PPUSH
66772: LD_INT 4
66774: PPUSH
66775: LD_VAR 0 2
66779: PUSH
66780: LD_INT 4
66782: ARRAY
66783: PUSH
66784: LD_VAR 0 4
66788: PLUS
66789: PPUSH
66790: CALL_OW 1
66794: ST_TO_ADDR
// end ;
66795: GO 66714
66797: POP
66798: POP
// end ;
66799: LD_VAR 0 2
66803: RET
// export function Length ( array ) ; begin
66804: LD_INT 0
66806: PPUSH
// result := array + 0 ;
66807: LD_ADDR_VAR 0 2
66811: PUSH
66812: LD_VAR 0 1
66816: PUSH
66817: LD_INT 0
66819: PLUS
66820: ST_TO_ADDR
// end ;
66821: LD_VAR 0 2
66825: RET
// export function PrepareArray ( array ) ; begin
66826: LD_INT 0
66828: PPUSH
// result := array diff 0 ;
66829: LD_ADDR_VAR 0 2
66833: PUSH
66834: LD_VAR 0 1
66838: PUSH
66839: LD_INT 0
66841: DIFF
66842: ST_TO_ADDR
// if not result [ 1 ] then
66843: LD_VAR 0 2
66847: PUSH
66848: LD_INT 1
66850: ARRAY
66851: NOT
66852: IFFALSE 66872
// result := Delete ( result , 1 ) ;
66854: LD_ADDR_VAR 0 2
66858: PUSH
66859: LD_VAR 0 2
66863: PPUSH
66864: LD_INT 1
66866: PPUSH
66867: CALL_OW 3
66871: ST_TO_ADDR
// end ; end_of_file
66872: LD_VAR 0 2
66876: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
66877: LD_VAR 0 1
66881: PPUSH
66882: LD_VAR 0 2
66886: PPUSH
66887: LD_VAR 0 3
66891: PPUSH
66892: LD_VAR 0 4
66896: PPUSH
66897: LD_VAR 0 5
66901: PPUSH
66902: LD_VAR 0 6
66906: PPUSH
66907: CALL 5805 0 6
// end ;
66911: PPOPN 6
66913: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
66914: LD_INT 0
66916: PPUSH
// begin if not units then
66917: LD_VAR 0 1
66921: NOT
66922: IFFALSE 66926
// exit ;
66924: GO 66926
// end ;
66926: PPOPN 7
66928: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
66929: CALL 5776 0 0
// end ; end_of_file
66933: PPOPN 1
66935: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
66936: LD_VAR 0 1
66940: PUSH
66941: LD_INT 200
66943: DOUBLE
66944: GREATEREQUAL
66945: IFFALSE 66953
66947: LD_INT 299
66949: DOUBLE
66950: LESSEQUAL
66951: IFTRUE 66955
66953: GO 66987
66955: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
66956: LD_VAR 0 1
66960: PPUSH
66961: LD_VAR 0 2
66965: PPUSH
66966: LD_VAR 0 3
66970: PPUSH
66971: LD_VAR 0 4
66975: PPUSH
66976: LD_VAR 0 5
66980: PPUSH
66981: CALL 21779 0 5
66985: GO 67064
66987: LD_INT 300
66989: DOUBLE
66990: GREATEREQUAL
66991: IFFALSE 66999
66993: LD_INT 399
66995: DOUBLE
66996: LESSEQUAL
66997: IFTRUE 67001
66999: GO 67063
67001: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67002: LD_VAR 0 1
67006: PPUSH
67007: LD_VAR 0 2
67011: PPUSH
67012: LD_VAR 0 3
67016: PPUSH
67017: LD_VAR 0 4
67021: PPUSH
67022: LD_VAR 0 5
67026: PPUSH
67027: LD_VAR 0 6
67031: PPUSH
67032: LD_VAR 0 7
67036: PPUSH
67037: LD_VAR 0 8
67041: PPUSH
67042: LD_VAR 0 9
67046: PPUSH
67047: LD_VAR 0 10
67051: PPUSH
67052: LD_VAR 0 11
67056: PPUSH
67057: CALL 18112 0 11
67061: GO 67064
67063: POP
// end ;
67064: PPOPN 11
67066: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67067: LD_VAR 0 1
67071: PPUSH
67072: LD_VAR 0 2
67076: PPUSH
67077: LD_VAR 0 3
67081: PPUSH
67082: LD_VAR 0 4
67086: PPUSH
67087: LD_VAR 0 5
67091: PPUSH
67092: CALL 21515 0 5
// end ;
67096: PPOPN 5
67098: END
