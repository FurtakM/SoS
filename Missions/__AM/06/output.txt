// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson , Mike ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export selectedPeople ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect := 0 ;
  15: LD_ADDR_EXP 19
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene := 1 ;
  23: LD_ADDR_EXP 20
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans := [ ] ;
  31: LD_ADDR_EXP 13
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans := [ ] ;
  38: LD_ADDR_EXP 14
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles := [ ] ;
  45: LD_ADDR_EXP 15
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 12
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// resources := [ ] ;
  59: LD_ADDR_EXP 22
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// mission_prefix := 06_ ;
  66: LD_ADDR_EXP 23
  70: PUSH
  71: LD_STRING 06_
  73: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  74: LD_ADDR_EXP 24
  78: PUSH
  79: LD_STRING 05_
  81: ST_TO_ADDR
// PrepareDeltaBase ;
  82: CALL 2374 0 0
// CreateNature ;
  86: CALL 170 0 0
// LoadVehicles ;
  90: CALL 1522 0 0
// PrepareHeroes ;
  94: CALL 291 0 0
// PrepareRandoms ;
  98: CALL 1787 0 0
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 102: LD_ADDR_EXP 21
 106: PUSH
 107: LD_INT 22
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 2
 119: PUSH
 120: LD_INT 30
 122: PUSH
 123: LD_INT 6
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 30
 132: PUSH
 133: LD_INT 7
 135: PUSH
 136: EMPTY
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 30
 142: PUSH
 143: LD_INT 8
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: PPUSH
 160: CALL_OW 69
 164: ST_TO_ADDR
// Action ;
 165: CALL 3302 0 0
// end ;
 169: END
// export function CreateNature ; var i ; begin
 170: LD_INT 0
 172: PPUSH
 173: PPUSH
// uc_side := 0 ;
 174: LD_ADDR_OWVAR 20
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// uc_nation := 0 ;
 182: LD_ADDR_OWVAR 21
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// for i = 1 to 4 do
 190: LD_ADDR_VAR 0 2
 194: PUSH
 195: DOUBLE
 196: LD_INT 1
 198: DEC
 199: ST_TO_ADDR
 200: LD_INT 4
 202: PUSH
 203: FOR_TO
 204: IFFALSE 284
// begin hc_gallery :=  ;
 206: LD_ADDR_OWVAR 33
 210: PUSH
 211: LD_STRING 
 213: ST_TO_ADDR
// hc_name :=  ;
 214: LD_ADDR_OWVAR 26
 218: PUSH
 219: LD_STRING 
 221: ST_TO_ADDR
// hc_attr := [ rand ( 10 , 11 ) , rand ( 10 , 12 ) ] ;
 222: LD_ADDR_OWVAR 29
 226: PUSH
 227: LD_INT 10
 229: PPUSH
 230: LD_INT 11
 232: PPUSH
 233: CALL_OW 12
 237: PUSH
 238: LD_INT 10
 240: PPUSH
 241: LD_INT 12
 243: PPUSH
 244: CALL_OW 12
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: ST_TO_ADDR
// hc_class := class_apeman ;
 253: LD_ADDR_OWVAR 28
 257: PUSH
 258: LD_INT 12
 260: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 22 , 18 , 20 , false ) ;
 261: CALL_OW 44
 265: PPUSH
 266: LD_INT 22
 268: PPUSH
 269: LD_INT 18
 271: PPUSH
 272: LD_INT 20
 274: PPUSH
 275: LD_INT 0
 277: PPUSH
 278: CALL_OW 50
// end ;
 282: GO 203
 284: POP
 285: POP
// end ; end_of_file
 286: LD_VAR 0 1
 290: RET
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 291: LD_INT 0
 293: PPUSH
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 298: LD_ADDR_VAR 0 3
 302: PUSH
 303: LD_INT 22
 305: PUSH
 306: LD_INT 1
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: PUSH
 313: LD_INT 21
 315: PUSH
 316: LD_INT 3
 318: PUSH
 319: EMPTY
 320: LIST
 321: LIST
 322: PUSH
 323: LD_INT 30
 325: PUSH
 326: LD_INT 0
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: PUSH
 333: EMPTY
 334: LIST
 335: LIST
 336: LIST
 337: PPUSH
 338: CALL_OW 69
 342: ST_TO_ADDR
// if tmp then
 343: LD_VAR 0 3
 347: IFFALSE 365
// SetBName ( tmp [ 1 ] , delta ) ;
 349: LD_VAR 0 3
 353: PUSH
 354: LD_INT 1
 356: ARRAY
 357: PPUSH
 358: LD_STRING delta
 360: PPUSH
 361: CALL_OW 500
// uc_side := 1 ;
 365: LD_ADDR_OWVAR 20
 369: PUSH
 370: LD_INT 1
 372: ST_TO_ADDR
// uc_nation := 1 ;
 373: LD_ADDR_OWVAR 21
 377: PUSH
 378: LD_INT 1
 380: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 381: LD_ADDR_EXP 1
 385: PUSH
 386: LD_STRING JMM
 388: PPUSH
 389: LD_INT 1
 391: PPUSH
 392: LD_EXP 24
 396: PPUSH
 397: CALL 25808 0 3
 401: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 402: LD_ADDR_EXP 17
 406: PUSH
 407: LD_STRING Harisson
 409: PPUSH
 410: LD_INT 0
 412: PPUSH
 413: LD_STRING 
 415: PPUSH
 416: CALL 25808 0 3
 420: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 421: LD_EXP 1
 425: PPUSH
 426: LD_VAR 0 3
 430: PUSH
 431: LD_INT 1
 433: ARRAY
 434: PPUSH
 435: CALL_OW 250
 439: PPUSH
 440: LD_VAR 0 3
 444: PUSH
 445: LD_INT 1
 447: ARRAY
 448: PPUSH
 449: CALL_OW 251
 453: PPUSH
 454: LD_INT 5
 456: PPUSH
 457: LD_INT 0
 459: PPUSH
 460: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 464: LD_EXP 1
 468: PPUSH
 469: LD_INT 1
 471: PPUSH
 472: CALL_OW 336
// Gladstone := PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
 476: LD_ADDR_EXP 2
 480: PUSH
 481: LD_STRING Gladstone
 483: PPUSH
 484: LD_INT 1
 486: PPUSH
 487: LD_EXP 24
 491: PPUSH
 492: CALL 25808 0 3
 496: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 497: LD_EXP 2
 501: PPUSH
 502: LD_VAR 0 3
 506: PUSH
 507: LD_INT 1
 509: ARRAY
 510: PPUSH
 511: CALL_OW 250
 515: PPUSH
 516: LD_VAR 0 3
 520: PUSH
 521: LD_INT 1
 523: ARRAY
 524: PPUSH
 525: CALL_OW 251
 529: PPUSH
 530: LD_INT 5
 532: PPUSH
 533: LD_INT 0
 535: PPUSH
 536: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 540: LD_EXP 2
 544: PPUSH
 545: LD_INT 4
 547: PPUSH
 548: CALL_OW 336
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
 552: LD_ADDR_EXP 3
 556: PUSH
 557: LD_STRING Denis
 559: PPUSH
 560: LD_INT 1
 562: PPUSH
 563: LD_EXP 24
 567: PPUSH
 568: CALL 25808 0 3
 572: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 573: LD_EXP 3
 577: PPUSH
 578: LD_VAR 0 3
 582: PUSH
 583: LD_INT 1
 585: ARRAY
 586: PPUSH
 587: CALL_OW 250
 591: PPUSH
 592: LD_VAR 0 3
 596: PUSH
 597: LD_INT 1
 599: ARRAY
 600: PPUSH
 601: CALL_OW 251
 605: PPUSH
 606: LD_INT 5
 608: PPUSH
 609: LD_INT 0
 611: PPUSH
 612: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 616: LD_EXP 3
 620: PPUSH
 621: LD_INT 4
 623: PPUSH
 624: CALL_OW 336
// Mike := PrepareUnit ( Mike , true , mission_prefix_prev ) ;
 628: LD_ADDR_EXP 10
 632: PUSH
 633: LD_STRING Mike
 635: PPUSH
 636: LD_INT 1
 638: PPUSH
 639: LD_EXP 24
 643: PPUSH
 644: CALL 25808 0 3
 648: ST_TO_ADDR
// PlaceUnitXYR ( Mike , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 649: LD_EXP 10
 653: PPUSH
 654: LD_VAR 0 3
 658: PUSH
 659: LD_INT 1
 661: ARRAY
 662: PPUSH
 663: CALL_OW 250
 667: PPUSH
 668: LD_VAR 0 3
 672: PUSH
 673: LD_INT 1
 675: ARRAY
 676: PPUSH
 677: CALL_OW 251
 681: PPUSH
 682: LD_INT 5
 684: PPUSH
 685: LD_INT 0
 687: PPUSH
 688: CALL_OW 50
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 692: LD_STRING FrankInDelta
 694: PPUSH
 695: LD_INT 0
 697: PPUSH
 698: CALL_OW 30
 702: PUSH
 703: LD_INT 1
 705: EQUAL
 706: IFFALSE 784
// begin Frank := PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 708: LD_ADDR_EXP 5
 712: PUSH
 713: LD_STRING Frank
 715: PPUSH
 716: LD_INT 1
 718: PPUSH
 719: LD_EXP 24
 723: PPUSH
 724: CALL 25808 0 3
 728: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 729: LD_EXP 5
 733: PPUSH
 734: LD_VAR 0 3
 738: PUSH
 739: LD_INT 1
 741: ARRAY
 742: PPUSH
 743: CALL_OW 250
 747: PPUSH
 748: LD_VAR 0 3
 752: PUSH
 753: LD_INT 1
 755: ARRAY
 756: PPUSH
 757: CALL_OW 251
 761: PPUSH
 762: LD_INT 5
 764: PPUSH
 765: LD_INT 0
 767: PPUSH
 768: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 772: LD_EXP 5
 776: PPUSH
 777: LD_INT 1
 779: PPUSH
 780: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 784: LD_STRING LisaInDelta
 786: PPUSH
 787: LD_INT 0
 789: PPUSH
 790: CALL_OW 30
 794: PUSH
 795: LD_INT 1
 797: EQUAL
 798: IFFALSE 876
// begin Lisa := PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 800: LD_ADDR_EXP 4
 804: PUSH
 805: LD_STRING Lisa
 807: PPUSH
 808: LD_INT 1
 810: PPUSH
 811: LD_EXP 24
 815: PPUSH
 816: CALL 25808 0 3
 820: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 821: LD_EXP 4
 825: PPUSH
 826: LD_VAR 0 3
 830: PUSH
 831: LD_INT 1
 833: ARRAY
 834: PPUSH
 835: CALL_OW 250
 839: PPUSH
 840: LD_VAR 0 3
 844: PUSH
 845: LD_INT 1
 847: ARRAY
 848: PPUSH
 849: CALL_OW 251
 853: PPUSH
 854: LD_INT 5
 856: PPUSH
 857: LD_INT 0
 859: PPUSH
 860: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 864: LD_EXP 4
 868: PPUSH
 869: LD_INT 1
 871: PPUSH
 872: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 876: LD_STRING BobbyInDelta
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: CALL_OW 30
 886: PUSH
 887: LD_INT 1
 889: EQUAL
 890: IFFALSE 968
// begin Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 892: LD_ADDR_EXP 6
 896: PUSH
 897: LD_STRING Bobby
 899: PPUSH
 900: LD_INT 1
 902: PPUSH
 903: LD_EXP 24
 907: PPUSH
 908: CALL 25808 0 3
 912: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 913: LD_EXP 6
 917: PPUSH
 918: LD_VAR 0 3
 922: PUSH
 923: LD_INT 1
 925: ARRAY
 926: PPUSH
 927: CALL_OW 250
 931: PPUSH
 932: LD_VAR 0 3
 936: PUSH
 937: LD_INT 1
 939: ARRAY
 940: PPUSH
 941: CALL_OW 251
 945: PPUSH
 946: LD_INT 5
 948: PPUSH
 949: LD_INT 0
 951: PPUSH
 952: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 956: LD_EXP 6
 960: PPUSH
 961: LD_INT 1
 963: PPUSH
 964: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 968: LD_STRING CyrusInDelta
 970: PPUSH
 971: LD_INT 0
 973: PPUSH
 974: CALL_OW 30
 978: PUSH
 979: LD_INT 1
 981: EQUAL
 982: IFFALSE 1060
// begin Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 984: LD_ADDR_EXP 7
 988: PUSH
 989: LD_STRING Cyrus
 991: PPUSH
 992: LD_INT 1
 994: PPUSH
 995: LD_EXP 24
 999: PPUSH
1000: CALL 25808 0 3
1004: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1005: LD_EXP 7
1009: PPUSH
1010: LD_VAR 0 3
1014: PUSH
1015: LD_INT 1
1017: ARRAY
1018: PPUSH
1019: CALL_OW 250
1023: PPUSH
1024: LD_VAR 0 3
1028: PUSH
1029: LD_INT 1
1031: ARRAY
1032: PPUSH
1033: CALL_OW 251
1037: PPUSH
1038: LD_INT 5
1040: PPUSH
1041: LD_INT 0
1043: PPUSH
1044: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
1048: LD_EXP 7
1052: PPUSH
1053: LD_INT 1
1055: PPUSH
1056: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
1060: LD_STRING DonaldsonInDelta
1062: PPUSH
1063: LD_INT 0
1065: PPUSH
1066: CALL_OW 30
1070: PUSH
1071: LD_INT 1
1073: EQUAL
1074: IFFALSE 1152
// begin Donaldson := PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
1076: LD_ADDR_EXP 9
1080: PUSH
1081: LD_STRING Donaldson
1083: PPUSH
1084: LD_INT 1
1086: PPUSH
1087: LD_EXP 24
1091: PPUSH
1092: CALL 25808 0 3
1096: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1097: LD_EXP 9
1101: PPUSH
1102: LD_VAR 0 3
1106: PUSH
1107: LD_INT 1
1109: ARRAY
1110: PPUSH
1111: CALL_OW 250
1115: PPUSH
1116: LD_VAR 0 3
1120: PUSH
1121: LD_INT 1
1123: ARRAY
1124: PPUSH
1125: CALL_OW 251
1129: PPUSH
1130: LD_INT 5
1132: PPUSH
1133: LD_INT 0
1135: PPUSH
1136: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
1140: LD_EXP 9
1144: PPUSH
1145: LD_INT 1
1147: PPUSH
1148: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
1152: LD_STRING BrownInDelta
1154: PPUSH
1155: LD_INT 0
1157: PPUSH
1158: CALL_OW 30
1162: PUSH
1163: LD_INT 1
1165: EQUAL
1166: IFFALSE 1244
// begin Brown := PrepareUnit ( Brown , true , mission_prefix_prev ) ;
1168: LD_ADDR_EXP 8
1172: PUSH
1173: LD_STRING Brown
1175: PPUSH
1176: LD_INT 1
1178: PPUSH
1179: LD_EXP 24
1183: PPUSH
1184: CALL 25808 0 3
1188: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1189: LD_EXP 8
1193: PPUSH
1194: LD_VAR 0 3
1198: PUSH
1199: LD_INT 1
1201: ARRAY
1202: PPUSH
1203: CALL_OW 250
1207: PPUSH
1208: LD_VAR 0 3
1212: PUSH
1213: LD_INT 1
1215: ARRAY
1216: PPUSH
1217: CALL_OW 251
1221: PPUSH
1222: LD_INT 5
1224: PPUSH
1225: LD_INT 0
1227: PPUSH
1228: CALL_OW 50
// SetClass ( Brown , 2 ) ;
1232: LD_EXP 8
1236: PPUSH
1237: LD_INT 2
1239: PPUSH
1240: CALL_OW 336
// end ; others := CreateCharacterSet ( othersInDelta ) ;
1244: LD_ADDR_EXP 11
1248: PUSH
1249: LD_STRING othersInDelta
1251: PPUSH
1252: CALL_OW 31
1256: ST_TO_ADDR
// for i in others do
1257: LD_ADDR_VAR 0 2
1261: PUSH
1262: LD_EXP 11
1266: PUSH
1267: FOR_IN
1268: IFFALSE 1315
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1270: LD_VAR 0 2
1274: PPUSH
1275: LD_VAR 0 3
1279: PUSH
1280: LD_INT 1
1282: ARRAY
1283: PPUSH
1284: CALL_OW 250
1288: PPUSH
1289: LD_VAR 0 3
1293: PUSH
1294: LD_INT 1
1296: ARRAY
1297: PPUSH
1298: CALL_OW 251
1302: PPUSH
1303: LD_INT 35
1305: PPUSH
1306: LD_INT 0
1308: PPUSH
1309: CALL_OW 50
1313: GO 1267
1315: POP
1316: POP
// apemans := CreateCharacterSet ( apeInDelta ) ;
1317: LD_ADDR_EXP 13
1321: PUSH
1322: LD_STRING apeInDelta
1324: PPUSH
1325: CALL_OW 31
1329: ST_TO_ADDR
// uc_nation := 0 ;
1330: LD_ADDR_OWVAR 21
1334: PUSH
1335: LD_INT 0
1337: ST_TO_ADDR
// if apemans > 5 then
1338: LD_EXP 13
1342: PUSH
1343: LD_INT 5
1345: GREATER
1346: IFFALSE 1441
// begin for i := 1 to 5 do
1348: LD_ADDR_VAR 0 2
1352: PUSH
1353: DOUBLE
1354: LD_INT 1
1356: DEC
1357: ST_TO_ADDR
1358: LD_INT 5
1360: PUSH
1361: FOR_TO
1362: IFFALSE 1437
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1364: LD_EXP 13
1368: PUSH
1369: LD_VAR 0 2
1373: ARRAY
1374: PPUSH
1375: LD_VAR 0 3
1379: PUSH
1380: LD_INT 1
1382: ARRAY
1383: PPUSH
1384: CALL_OW 250
1388: PPUSH
1389: LD_VAR 0 3
1393: PUSH
1394: LD_INT 1
1396: ARRAY
1397: PPUSH
1398: CALL_OW 251
1402: PPUSH
1403: LD_INT 50
1405: PPUSH
1406: LD_INT 0
1408: PPUSH
1409: CALL_OW 50
// yourApemans := yourApemans ^ apemans [ i ] ;
1413: LD_ADDR_EXP 14
1417: PUSH
1418: LD_EXP 14
1422: PUSH
1423: LD_EXP 13
1427: PUSH
1428: LD_VAR 0 2
1432: ARRAY
1433: ADD
1434: ST_TO_ADDR
// end ;
1435: GO 1361
1437: POP
1438: POP
// end else
1439: GO 1517
// begin for i in apemans do
1441: LD_ADDR_VAR 0 2
1445: PUSH
1446: LD_EXP 13
1450: PUSH
1451: FOR_IN
1452: IFFALSE 1515
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1454: LD_VAR 0 2
1458: PPUSH
1459: LD_VAR 0 3
1463: PUSH
1464: LD_INT 1
1466: ARRAY
1467: PPUSH
1468: CALL_OW 250
1472: PPUSH
1473: LD_VAR 0 3
1477: PUSH
1478: LD_INT 1
1480: ARRAY
1481: PPUSH
1482: CALL_OW 251
1486: PPUSH
1487: LD_INT 50
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: CALL_OW 50
// yourApemans := yourApemans ^ i ;
1497: LD_ADDR_EXP 14
1501: PUSH
1502: LD_EXP 14
1506: PUSH
1507: LD_VAR 0 2
1511: ADD
1512: ST_TO_ADDR
// end ;
1513: GO 1451
1515: POP
1516: POP
// end ; end ;
1517: LD_VAR 0 1
1521: RET
// export function LoadVehicles ; var i , j , veh , tmp , vehicles ; begin
1522: LD_INT 0
1524: PPUSH
1525: PPUSH
1526: PPUSH
1527: PPUSH
1528: PPUSH
1529: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1530: LD_ADDR_VAR 0 5
1534: PUSH
1535: LD_INT 22
1537: PUSH
1538: LD_INT 1
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: PUSH
1545: LD_INT 21
1547: PUSH
1548: LD_INT 3
1550: PUSH
1551: EMPTY
1552: LIST
1553: LIST
1554: PUSH
1555: LD_INT 30
1557: PUSH
1558: LD_INT 0
1560: PUSH
1561: EMPTY
1562: LIST
1563: LIST
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: LIST
1569: PPUSH
1570: CALL_OW 69
1574: ST_TO_ADDR
// uc_side := 1 ;
1575: LD_ADDR_OWVAR 20
1579: PUSH
1580: LD_INT 1
1582: ST_TO_ADDR
// vehicles := LoadVariable ( vehiclesInDelta , [ ] ) ;
1583: LD_ADDR_VAR 0 6
1587: PUSH
1588: LD_STRING vehiclesInDelta
1590: PPUSH
1591: EMPTY
1592: PPUSH
1593: CALL_OW 30
1597: ST_TO_ADDR
// for i := 1 to Count ( vehicles ) div 4 do
1598: LD_ADDR_VAR 0 2
1602: PUSH
1603: DOUBLE
1604: LD_INT 1
1606: DEC
1607: ST_TO_ADDR
1608: LD_VAR 0 6
1612: PPUSH
1613: CALL 27910 0 1
1617: PUSH
1618: LD_INT 4
1620: DIV
1621: PUSH
1622: FOR_TO
1623: IFFALSE 1780
// begin uc_nation := vehicles [ 1 ] ;
1625: LD_ADDR_OWVAR 21
1629: PUSH
1630: LD_VAR 0 6
1634: PUSH
1635: LD_INT 1
1637: ARRAY
1638: ST_TO_ADDR
// vc_chassis := vehicles [ 2 ] ;
1639: LD_ADDR_OWVAR 37
1643: PUSH
1644: LD_VAR 0 6
1648: PUSH
1649: LD_INT 2
1651: ARRAY
1652: ST_TO_ADDR
// vc_engine := vehicles [ 3 ] ;
1653: LD_ADDR_OWVAR 39
1657: PUSH
1658: LD_VAR 0 6
1662: PUSH
1663: LD_INT 3
1665: ARRAY
1666: ST_TO_ADDR
// vc_control := vehicles [ 4 ] ;
1667: LD_ADDR_OWVAR 38
1671: PUSH
1672: LD_VAR 0 6
1676: PUSH
1677: LD_INT 4
1679: ARRAY
1680: ST_TO_ADDR
// vc_weapon := vehicles [ 5 ] ;
1681: LD_ADDR_OWVAR 40
1685: PUSH
1686: LD_VAR 0 6
1690: PUSH
1691: LD_INT 5
1693: ARRAY
1694: ST_TO_ADDR
// veh := CreateVehicle ;
1695: LD_ADDR_VAR 0 4
1699: PUSH
1700: CALL_OW 45
1704: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1705: LD_VAR 0 4
1709: PPUSH
1710: LD_INT 0
1712: PPUSH
1713: LD_INT 5
1715: PPUSH
1716: CALL_OW 12
1720: PPUSH
1721: CALL_OW 233
// PlaceUnitArea ( veh , parkingArea , false ) ;
1725: LD_VAR 0 4
1729: PPUSH
1730: LD_INT 4
1732: PPUSH
1733: LD_INT 0
1735: PPUSH
1736: CALL_OW 49
// for j := 1 to 5 do
1740: LD_ADDR_VAR 0 3
1744: PUSH
1745: DOUBLE
1746: LD_INT 1
1748: DEC
1749: ST_TO_ADDR
1750: LD_INT 5
1752: PUSH
1753: FOR_TO
1754: IFFALSE 1776
// vehicles := Delete ( vehicles , 1 ) ;
1756: LD_ADDR_VAR 0 6
1760: PUSH
1761: LD_VAR 0 6
1765: PPUSH
1766: LD_INT 1
1768: PPUSH
1769: CALL_OW 3
1773: ST_TO_ADDR
1774: GO 1753
1776: POP
1777: POP
// end ;
1778: GO 1622
1780: POP
1781: POP
// end ;
1782: LD_VAR 0 1
1786: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1787: LD_INT 0
1789: PPUSH
1790: PPUSH
1791: PPUSH
1792: PPUSH
1793: PPUSH
// uc_side := 1 ;
1794: LD_ADDR_OWVAR 20
1798: PUSH
1799: LD_INT 1
1801: ST_TO_ADDR
// uc_nation := 1 ;
1802: LD_ADDR_OWVAR 21
1806: PUSH
1807: LD_INT 1
1809: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1810: LD_ADDR_VAR 0 4
1814: PUSH
1815: LD_INT 22
1817: PUSH
1818: LD_INT 1
1820: PUSH
1821: EMPTY
1822: LIST
1823: LIST
1824: PUSH
1825: LD_INT 21
1827: PUSH
1828: LD_INT 3
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: PUSH
1835: LD_INT 30
1837: PUSH
1838: LD_INT 0
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: PUSH
1845: EMPTY
1846: LIST
1847: LIST
1848: LIST
1849: PPUSH
1850: CALL_OW 69
1854: ST_TO_ADDR
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) ;
1855: LD_ADDR_EXP 16
1859: PUSH
1860: LD_INT 22
1862: PUSH
1863: LD_INT 1
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: PUSH
1870: LD_INT 25
1872: PUSH
1873: LD_INT 4
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: PUSH
1880: LD_INT 26
1882: PUSH
1883: LD_INT 1
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: LIST
1894: PUSH
1895: EMPTY
1896: LIST
1897: PPUSH
1898: CALL_OW 69
1902: PUSH
1903: LD_EXP 1
1907: PUSH
1908: LD_EXP 7
1912: PUSH
1913: LD_EXP 6
1917: PUSH
1918: LD_EXP 5
1922: PUSH
1923: LD_EXP 2
1927: PUSH
1928: LD_EXP 3
1932: PUSH
1933: LD_EXP 8
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: DIFF
1947: ST_TO_ADDR
// if not deltaDoctor then
1948: LD_EXP 16
1952: NOT
1953: IFFALSE 2104
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
1955: LD_ADDR_VAR 0 5
1959: PUSH
1960: LD_INT 22
1962: PUSH
1963: LD_INT 1
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: PUSH
1970: LD_INT 26
1972: PUSH
1973: LD_INT 1
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: PUSH
1984: EMPTY
1985: LIST
1986: PPUSH
1987: CALL_OW 69
1991: PUSH
1992: LD_EXP 1
1996: PUSH
1997: LD_EXP 7
2001: PUSH
2002: LD_EXP 6
2006: PUSH
2007: LD_EXP 5
2011: PUSH
2012: LD_EXP 2
2016: PUSH
2017: LD_EXP 3
2021: PUSH
2022: LD_EXP 8
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: DIFF
2036: ST_TO_ADDR
// if filter then
2037: LD_VAR 0 5
2041: IFFALSE 2102
// for i in filter do
2043: LD_ADDR_VAR 0 2
2047: PUSH
2048: LD_VAR 0 5
2052: PUSH
2053: FOR_IN
2054: IFFALSE 2100
// if GetSkill ( i , 4 ) >= 4 then
2056: LD_VAR 0 2
2060: PPUSH
2061: LD_INT 4
2063: PPUSH
2064: CALL_OW 259
2068: PUSH
2069: LD_INT 4
2071: GREATEREQUAL
2072: IFFALSE 2098
// begin deltaDoctor := i ;
2074: LD_ADDR_EXP 16
2078: PUSH
2079: LD_VAR 0 2
2083: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
2084: LD_EXP 16
2088: PPUSH
2089: LD_INT 4
2091: PPUSH
2092: CALL_OW 336
// break ;
2096: GO 2100
// end ;
2098: GO 2053
2100: POP
2101: POP
// end else
2102: GO 2118
// deltaDoctor := deltaDoctor [ 1 ] ;
2104: LD_ADDR_EXP 16
2108: PUSH
2109: LD_EXP 16
2113: PUSH
2114: LD_INT 1
2116: ARRAY
2117: ST_TO_ADDR
// for i := 1 to 7 do
2118: LD_ADDR_VAR 0 2
2122: PUSH
2123: DOUBLE
2124: LD_INT 1
2126: DEC
2127: ST_TO_ADDR
2128: LD_INT 7
2130: PUSH
2131: FOR_TO
2132: IFFALSE 2269
// begin hc_gallery :=  ;
2134: LD_ADDR_OWVAR 33
2138: PUSH
2139: LD_STRING 
2141: ST_TO_ADDR
// hc_name :=  ;
2142: LD_ADDR_OWVAR 26
2146: PUSH
2147: LD_STRING 
2149: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) ) ;
2150: LD_INT 0
2152: PPUSH
2153: LD_INT 1
2155: PUSH
2156: LD_INT 2
2158: PUSH
2159: LD_INT 3
2161: PUSH
2162: LD_INT 4
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: PUSH
2171: LD_INT 1
2173: PPUSH
2174: LD_INT 4
2176: PPUSH
2177: CALL_OW 12
2181: ARRAY
2182: PPUSH
2183: LD_INT 3
2185: PPUSH
2186: LD_INT 5
2188: PPUSH
2189: CALL_OW 12
2193: PPUSH
2194: CALL_OW 380
// un := CreateHuman ;
2198: LD_ADDR_VAR 0 3
2202: PUSH
2203: CALL_OW 44
2207: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2208: LD_ADDR_EXP 12
2212: PUSH
2213: LD_EXP 12
2217: PUSH
2218: LD_VAR 0 3
2222: ADD
2223: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2224: LD_VAR 0 3
2228: PPUSH
2229: LD_VAR 0 4
2233: PUSH
2234: LD_INT 1
2236: ARRAY
2237: PPUSH
2238: CALL_OW 250
2242: PPUSH
2243: LD_VAR 0 4
2247: PUSH
2248: LD_INT 1
2250: ARRAY
2251: PPUSH
2252: CALL_OW 251
2256: PPUSH
2257: LD_INT 15
2259: PPUSH
2260: LD_INT 0
2262: PPUSH
2263: CALL_OW 50
// end ;
2267: GO 2131
2269: POP
2270: POP
// if deltaDoctor then
2271: LD_EXP 16
2275: IFFALSE 2279
// exit ;
2277: GO 2369
// hc_gallery := Dawkins ;
2279: LD_ADDR_OWVAR 33
2283: PUSH
2284: LD_STRING Dawkins
2286: ST_TO_ADDR
// hc_face_number := 1 ;
2287: LD_ADDR_OWVAR 34
2291: PUSH
2292: LD_INT 1
2294: ST_TO_ADDR
// hc_name := Dr. Adam Charles Dawkins ;
2295: LD_ADDR_OWVAR 26
2299: PUSH
2300: LD_STRING Dr. Adam Charles Dawkins
2302: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 5 ) ;
2303: LD_INT 1
2305: PPUSH
2306: LD_INT 4
2308: PPUSH
2309: LD_INT 5
2311: PPUSH
2312: CALL_OW 380
// deltaDoctor := CreateHuman ;
2316: LD_ADDR_EXP 16
2320: PUSH
2321: CALL_OW 44
2325: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2326: LD_EXP 16
2330: PPUSH
2331: LD_VAR 0 4
2335: PUSH
2336: LD_INT 1
2338: ARRAY
2339: PPUSH
2340: CALL_OW 250
2344: PPUSH
2345: LD_VAR 0 4
2349: PUSH
2350: LD_INT 1
2352: ARRAY
2353: PPUSH
2354: CALL_OW 251
2358: PPUSH
2359: LD_INT 5
2361: PPUSH
2362: LD_INT 0
2364: PPUSH
2365: CALL_OW 50
// end ; end_of_file
2369: LD_VAR 0 1
2373: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2374: LD_INT 0
2376: PPUSH
2377: PPUSH
2378: PPUSH
2379: PPUSH
2380: PPUSH
2381: PPUSH
2382: PPUSH
// buildings := LoadVariable ( buildingsInDelta , [ ] ) ;
2383: LD_ADDR_VAR 0 5
2387: PUSH
2388: LD_STRING buildingsInDelta
2390: PPUSH
2391: EMPTY
2392: PPUSH
2393: CALL_OW 30
2397: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2398: LD_INT 68
2400: PPUSH
2401: LD_INT 40
2403: PPUSH
2404: LD_INT 1
2406: PPUSH
2407: CALL_OW 441
// uc_side := 1 ;
2411: LD_ADDR_OWVAR 20
2415: PUSH
2416: LD_INT 1
2418: ST_TO_ADDR
// uc_nation := 1 ;
2419: LD_ADDR_OWVAR 21
2423: PUSH
2424: LD_INT 1
2426: ST_TO_ADDR
// for i := 1 to buildings do
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: DOUBLE
2433: LD_INT 1
2435: DEC
2436: ST_TO_ADDR
2437: LD_VAR 0 5
2441: PUSH
2442: FOR_TO
2443: IFFALSE 2758
// begin bc_type := buildings [ i ] [ 1 ] ;
2445: LD_ADDR_OWVAR 42
2449: PUSH
2450: LD_VAR 0 5
2454: PUSH
2455: LD_VAR 0 2
2459: ARRAY
2460: PUSH
2461: LD_INT 1
2463: ARRAY
2464: ST_TO_ADDR
// bc_level := buildings [ i ] [ 2 ] ;
2465: LD_ADDR_OWVAR 43
2469: PUSH
2470: LD_VAR 0 5
2474: PUSH
2475: LD_VAR 0 2
2479: ARRAY
2480: PUSH
2481: LD_INT 2
2483: ARRAY
2484: ST_TO_ADDR
// bc_kind1 := - 1 ;
2485: LD_ADDR_OWVAR 44
2489: PUSH
2490: LD_INT 1
2492: NEG
2493: ST_TO_ADDR
// bc_kind2 := - 1 ;
2494: LD_ADDR_OWVAR 45
2498: PUSH
2499: LD_INT 1
2501: NEG
2502: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half , b_lab_full ] then
2503: LD_OWVAR 42
2507: PUSH
2508: LD_INT 6
2510: PUSH
2511: LD_INT 7
2513: PUSH
2514: LD_INT 8
2516: PUSH
2517: EMPTY
2518: LIST
2519: LIST
2520: LIST
2521: IN
2522: IFFALSE 2646
// begin bc_kind1 := b_lab_basic ;
2524: LD_ADDR_OWVAR 44
2528: PUSH
2529: LD_INT 9
2531: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2532: LD_ADDR_OWVAR 45
2536: PUSH
2537: LD_INT 9
2539: ST_TO_ADDR
// if buildings [ i ] [ 6 ] then
2540: LD_VAR 0 5
2544: PUSH
2545: LD_VAR 0 2
2549: ARRAY
2550: PUSH
2551: LD_INT 6
2553: ARRAY
2554: IFFALSE 2622
// begin bc_kind1 := buildings [ i ] [ 6 ] ;
2556: LD_ADDR_OWVAR 44
2560: PUSH
2561: LD_VAR 0 5
2565: PUSH
2566: LD_VAR 0 2
2570: ARRAY
2571: PUSH
2572: LD_INT 6
2574: ARRAY
2575: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2576: LD_ADDR_OWVAR 45
2580: PUSH
2581: LD_INT 9
2583: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2584: LD_VAR 0 5
2588: PUSH
2589: LD_VAR 0 2
2593: ARRAY
2594: PUSH
2595: LD_INT 7
2597: ARRAY
2598: IFFALSE 2620
// bc_kind2 := buildings [ i ] [ 7 ] ;
2600: LD_ADDR_OWVAR 45
2604: PUSH
2605: LD_VAR 0 5
2609: PUSH
2610: LD_VAR 0 2
2614: ARRAY
2615: PUSH
2616: LD_INT 7
2618: ARRAY
2619: ST_TO_ADDR
// end else
2620: GO 2646
// begin bc_type := b_lab ;
2622: LD_ADDR_OWVAR 42
2626: PUSH
2627: LD_INT 6
2629: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
2630: LD_ADDR_OWVAR 44
2634: PUSH
2635: LD_INT 9
2637: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2638: LD_ADDR_OWVAR 45
2642: PUSH
2643: LD_INT 9
2645: ST_TO_ADDR
// end ; end ; building := CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2646: LD_ADDR_VAR 0 4
2650: PUSH
2651: LD_VAR 0 5
2655: PUSH
2656: LD_VAR 0 2
2660: ARRAY
2661: PUSH
2662: LD_INT 3
2664: ARRAY
2665: PPUSH
2666: LD_VAR 0 5
2670: PUSH
2671: LD_VAR 0 2
2675: ARRAY
2676: PUSH
2677: LD_INT 4
2679: ARRAY
2680: PPUSH
2681: LD_VAR 0 5
2685: PUSH
2686: LD_VAR 0 2
2690: ARRAY
2691: PUSH
2692: LD_INT 5
2694: ARRAY
2695: PPUSH
2696: CALL_OW 47
2700: ST_TO_ADDR
// if GetBType ( building ) = b_bunker and buildings [ i ] [ 8 ] then
2701: LD_VAR 0 4
2705: PPUSH
2706: CALL_OW 266
2710: PUSH
2711: LD_INT 32
2713: EQUAL
2714: PUSH
2715: LD_VAR 0 5
2719: PUSH
2720: LD_VAR 0 2
2724: ARRAY
2725: PUSH
2726: LD_INT 8
2728: ARRAY
2729: AND
2730: IFFALSE 2756
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2732: LD_VAR 0 4
2736: PPUSH
2737: LD_VAR 0 5
2741: PUSH
2742: LD_VAR 0 2
2746: ARRAY
2747: PUSH
2748: LD_INT 8
2750: ARRAY
2751: PPUSH
2752: CALL_OW 431
// end ;
2756: GO 2442
2758: POP
2759: POP
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2760: LD_ADDR_VAR 0 6
2764: PUSH
2765: LD_INT 22
2767: PUSH
2768: LD_INT 1
2770: PUSH
2771: EMPTY
2772: LIST
2773: LIST
2774: PUSH
2775: LD_INT 2
2777: PUSH
2778: LD_INT 30
2780: PUSH
2781: LD_INT 6
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PUSH
2788: LD_INT 30
2790: PUSH
2791: LD_INT 7
2793: PUSH
2794: EMPTY
2795: LIST
2796: LIST
2797: PUSH
2798: LD_INT 30
2800: PUSH
2801: LD_INT 8
2803: PUSH
2804: EMPTY
2805: LIST
2806: LIST
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: LIST
2812: LIST
2813: PUSH
2814: EMPTY
2815: LIST
2816: LIST
2817: PPUSH
2818: CALL_OW 69
2822: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2823: LD_ADDR_VAR 0 7
2827: PUSH
2828: LD_INT 22
2830: PUSH
2831: LD_INT 1
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: PUSH
2838: LD_INT 30
2840: PUSH
2841: LD_INT 0
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PPUSH
2852: CALL_OW 69
2856: ST_TO_ADDR
// if lab and tmp then
2857: LD_VAR 0 6
2861: PUSH
2862: LD_VAR 0 7
2866: AND
2867: IFFALSE 2877
// baseCorrect := 1 ;
2869: LD_ADDR_EXP 19
2873: PUSH
2874: LD_INT 1
2876: ST_TO_ADDR
// if not baseCorrect then
2877: LD_EXP 19
2881: NOT
2882: IFFALSE 3297
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2884: LD_ADDR_VAR 0 2
2888: PUSH
2889: LD_INT 22
2891: PUSH
2892: LD_INT 1
2894: PUSH
2895: EMPTY
2896: LIST
2897: LIST
2898: PUSH
2899: LD_INT 21
2901: PUSH
2902: LD_INT 3
2904: PUSH
2905: EMPTY
2906: LIST
2907: LIST
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: PPUSH
2913: CALL_OW 69
2917: PUSH
2918: FOR_IN
2919: IFFALSE 2932
// RemoveUnit ( i ) ;
2921: LD_VAR 0 2
2925: PPUSH
2926: CALL_OW 64
2930: GO 2918
2932: POP
2933: POP
// uc_nation := 1 ;
2934: LD_ADDR_OWVAR 21
2938: PUSH
2939: LD_INT 1
2941: ST_TO_ADDR
// uc_side := 1 ;
2942: LD_ADDR_OWVAR 20
2946: PUSH
2947: LD_INT 1
2949: ST_TO_ADDR
// bc_level := 5 ;
2950: LD_ADDR_OWVAR 43
2954: PUSH
2955: LD_INT 5
2957: ST_TO_ADDR
// bc_type := b_depot ;
2958: LD_ADDR_OWVAR 42
2962: PUSH
2963: LD_INT 0
2965: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2966: LD_INT 50
2968: PPUSH
2969: LD_INT 22
2971: PPUSH
2972: LD_INT 0
2974: PPUSH
2975: CALL_OW 47
// bc_type = b_bunker ;
2979: LD_ADDR_OWVAR 42
2983: PUSH
2984: LD_INT 32
2986: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
2987: LD_ADDR_VAR 0 4
2991: PUSH
2992: LD_INT 68
2994: PPUSH
2995: LD_INT 24
2997: PPUSH
2998: LD_INT 4
3000: PPUSH
3001: CALL_OW 47
3005: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
3006: LD_VAR 0 4
3010: PPUSH
3011: LD_INT 4
3013: PUSH
3014: LD_INT 11
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PUSH
3021: LD_INT 1
3023: PPUSH
3024: LD_INT 2
3026: PPUSH
3027: CALL_OW 12
3031: ARRAY
3032: PPUSH
3033: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
3037: LD_ADDR_VAR 0 4
3041: PUSH
3042: LD_INT 71
3044: PPUSH
3045: LD_INT 34
3047: PPUSH
3048: LD_INT 4
3050: PPUSH
3051: CALL_OW 47
3055: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
3056: LD_VAR 0 4
3060: PPUSH
3061: LD_INT 4
3063: PUSH
3064: LD_INT 11
3066: PUSH
3067: EMPTY
3068: LIST
3069: LIST
3070: PUSH
3071: LD_INT 1
3073: PPUSH
3074: LD_INT 2
3076: PPUSH
3077: CALL_OW 12
3081: ARRAY
3082: PPUSH
3083: CALL_OW 431
// bc_type := b_breastwork ;
3087: LD_ADDR_OWVAR 42
3091: PUSH
3092: LD_INT 31
3094: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
3095: LD_INT 51
3097: PPUSH
3098: LD_INT 7
3100: PPUSH
3101: LD_INT 3
3103: PPUSH
3104: CALL_OW 47
// bc_type := b_oil_mine ;
3108: LD_ADDR_OWVAR 42
3112: PUSH
3113: LD_INT 29
3115: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
3116: LD_INT 68
3118: PPUSH
3119: LD_INT 40
3121: PPUSH
3122: LD_INT 1
3124: PPUSH
3125: CALL_OW 47
// bc_type := b_factory ;
3129: LD_ADDR_OWVAR 42
3133: PUSH
3134: LD_INT 3
3136: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3137: LD_INT 38
3139: PPUSH
3140: LD_INT 20
3142: PPUSH
3143: LD_INT 2
3145: PPUSH
3146: CALL_OW 47
// bc_type := b_ext_noncombat ;
3150: LD_ADDR_OWVAR 42
3154: PUSH
3155: LD_INT 19
3157: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 24 , 2 ) ;
3158: LD_INT 38
3160: PPUSH
3161: LD_INT 24
3163: PPUSH
3164: LD_INT 2
3166: PPUSH
3167: CALL_OW 47
// bc_type := b_ext_radar ;
3171: LD_ADDR_OWVAR 42
3175: PUSH
3176: LD_INT 20
3178: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 35 , 20 , 1 ) ;
3179: LD_INT 35
3181: PPUSH
3182: LD_INT 20
3184: PPUSH
3185: LD_INT 1
3187: PPUSH
3188: CALL_OW 47
// bc_type := b_armoury ;
3192: LD_ADDR_OWVAR 42
3196: PUSH
3197: LD_INT 4
3199: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 33 , 28 , 1 ) ;
3200: LD_INT 33
3202: PPUSH
3203: LD_INT 28
3205: PPUSH
3206: LD_INT 1
3208: PPUSH
3209: CALL_OW 47
// bc_type := b_solar_power ;
3213: LD_ADDR_OWVAR 42
3217: PUSH
3218: LD_INT 27
3220: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3221: LD_INT 46
3223: PPUSH
3224: LD_INT 12
3226: PPUSH
3227: LD_INT 1
3229: PPUSH
3230: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3234: LD_INT 48
3236: PPUSH
3237: LD_INT 11
3239: PPUSH
3240: LD_INT 2
3242: PPUSH
3243: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 35 , 12 , 3 ) ;
3247: LD_INT 35
3249: PPUSH
3250: LD_INT 12
3252: PPUSH
3253: LD_INT 3
3255: PPUSH
3256: CALL_OW 47
// bc_type := b_lab_half ;
3260: LD_ADDR_OWVAR 42
3264: PUSH
3265: LD_INT 7
3267: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
3268: LD_ADDR_OWVAR 44
3272: PUSH
3273: LD_INT 15
3275: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
3276: LD_ADDR_OWVAR 45
3280: PUSH
3281: LD_INT 9
3283: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3284: LD_INT 42
3286: PPUSH
3287: LD_INT 15
3289: PPUSH
3290: LD_INT 2
3292: PPUSH
3293: CALL_OW 47
// end ; end ; end_of_file
3297: LD_VAR 0 1
3301: RET
// export function Action ; var i , j , tmp ; begin
3302: LD_INT 0
3304: PPUSH
3305: PPUSH
3306: PPUSH
3307: PPUSH
// InGameOn ;
3308: CALL_OW 8
// if lab then
3312: LD_EXP 21
3316: IFFALSE 3333
// CenterNowOnUnits ( lab [ 1 ] ) else
3318: LD_EXP 21
3322: PUSH
3323: LD_INT 1
3325: ARRAY
3326: PPUSH
3327: CALL_OW 87
3331: GO 3342
// CenterOnUnits ( JMM ) ;
3333: LD_EXP 1
3337: PPUSH
3338: CALL_OW 85
// if IsOK ( Denis ) then
3342: LD_EXP 3
3346: PPUSH
3347: CALL_OW 302
3351: IFFALSE 3379
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3353: LD_INT 6
3355: PPUSH
3356: LD_INT 1
3358: PPUSH
3359: LD_INT 2
3361: PPUSH
3362: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3366: LD_INT 20
3368: PPUSH
3369: LD_INT 1
3371: PPUSH
3372: LD_INT 1
3374: PPUSH
3375: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3379: LD_EXP 1
3383: PPUSH
3384: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3388: LD_EXP 1
3392: PPUSH
3393: LD_EXP 16
3397: PPUSH
3398: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3402: LD_INT 35
3404: PPUSH
3405: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3409: LD_EXP 16
3413: PPUSH
3414: LD_EXP 1
3418: PPUSH
3419: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3423: LD_EXP 1
3427: PPUSH
3428: LD_EXP 16
3432: PPUSH
3433: CALL_OW 296
3437: PUSH
3438: LD_INT 5
3440: LESS
3441: IFFALSE 3402
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3443: LD_EXP 16
3447: PPUSH
3448: LD_EXP 1
3452: PPUSH
3453: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3457: LD_EXP 1
3461: PPUSH
3462: LD_STRING D1-JMM-1
3464: PPUSH
3465: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3469: LD_EXP 16
3473: PPUSH
3474: LD_STRING D1-Sci-1
3476: PPUSH
3477: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3481: LD_EXP 1
3485: PUSH
3486: LD_EXP 16
3490: PUSH
3491: LD_EXP 3
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: LIST
3500: PPUSH
3501: LD_EXP 21
3505: PUSH
3506: LD_INT 1
3508: ARRAY
3509: PPUSH
3510: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
3514: LD_INT 35
3516: PPUSH
3517: CALL_OW 67
// until IsInUnit ( JMM ) and IsInUnit ( DeltaDoctor ) ;
3521: LD_EXP 1
3525: PPUSH
3526: CALL_OW 310
3530: PUSH
3531: LD_EXP 16
3535: PPUSH
3536: CALL_OW 310
3540: AND
3541: IFFALSE 3514
// CenterNowOnUnits ( lab [ 1 ] ) ;
3543: LD_EXP 21
3547: PUSH
3548: LD_INT 1
3550: ARRAY
3551: PPUSH
3552: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3556: LD_EXP 1
3560: PPUSH
3561: LD_STRING D1-JMM-2
3563: PPUSH
3564: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3568: LD_EXP 16
3572: PPUSH
3573: LD_STRING D1-Sci-2
3575: PPUSH
3576: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3580: LD_EXP 1
3584: PPUSH
3585: LD_STRING D1-JMM-3
3587: PPUSH
3588: CALL_OW 88
// if IsOK ( Denis ) then
3592: LD_EXP 3
3596: PPUSH
3597: CALL_OW 302
3601: IFFALSE 3617
// Say ( DeltaDoctor , D1-Sci-3 ) else
3603: LD_EXP 16
3607: PPUSH
3608: LD_STRING D1-Sci-3
3610: PPUSH
3611: CALL_OW 88
3615: GO 3629
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3617: LD_EXP 16
3621: PPUSH
3622: LD_STRING D1-Sci-3a
3624: PPUSH
3625: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3629: LD_EXP 1
3633: PPUSH
3634: LD_STRING D1-JMM-4
3636: PPUSH
3637: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3641: LD_ADDR_VAR 0 4
3645: PUSH
3646: LD_INT 22
3648: PUSH
3649: LD_INT 1
3651: PUSH
3652: EMPTY
3653: LIST
3654: LIST
3655: PUSH
3656: LD_INT 25
3658: PUSH
3659: LD_INT 4
3661: PUSH
3662: EMPTY
3663: LIST
3664: LIST
3665: PUSH
3666: LD_INT 3
3668: PUSH
3669: LD_INT 54
3671: PUSH
3672: EMPTY
3673: LIST
3674: PUSH
3675: EMPTY
3676: LIST
3677: LIST
3678: PUSH
3679: EMPTY
3680: LIST
3681: LIST
3682: LIST
3683: PPUSH
3684: CALL_OW 69
3688: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3689: LD_ADDR_VAR 0 2
3693: PUSH
3694: LD_INT 22
3696: PUSH
3697: LD_INT 0
3699: PUSH
3700: EMPTY
3701: LIST
3702: LIST
3703: PPUSH
3704: CALL_OW 69
3708: PUSH
3709: FOR_IN
3710: IFFALSE 3760
// for j in tmp do
3712: LD_ADDR_VAR 0 3
3716: PUSH
3717: LD_VAR 0 4
3721: PUSH
3722: FOR_IN
3723: IFFALSE 3756
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3725: LD_VAR 0 3
3729: PPUSH
3730: LD_VAR 0 2
3734: PPUSH
3735: CALL_OW 250
3739: PPUSH
3740: LD_VAR 0 2
3744: PPUSH
3745: CALL_OW 251
3749: PPUSH
3750: CALL_OW 191
3754: GO 3722
3756: POP
3757: POP
3758: GO 3709
3760: POP
3761: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3762: LD_EXP 16
3766: PPUSH
3767: LD_STRING D1-Sci-4
3769: PPUSH
3770: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3774: LD_EXP 1
3778: PPUSH
3779: LD_STRING D1-JMM-5
3781: PPUSH
3782: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3786: LD_EXP 16
3790: PPUSH
3791: LD_STRING D1-Sci-5
3793: PPUSH
3794: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3798: LD_EXP 1
3802: PPUSH
3803: LD_STRING D1-JMM-6
3805: PPUSH
3806: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3810: LD_EXP 17
3814: PPUSH
3815: LD_STRING D1-Har-6
3817: PPUSH
3818: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3822: LD_EXP 1
3826: PPUSH
3827: LD_STRING D1-JMM-7
3829: PPUSH
3830: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3834: LD_EXP 17
3838: PPUSH
3839: LD_STRING D1-Har-7
3841: PPUSH
3842: CALL_OW 94
// if IsOK ( Denis ) then
3846: LD_EXP 3
3850: PPUSH
3851: CALL_OW 302
3855: IFFALSE 3869
// Say ( JMM , D1-JMM-8 ) ;
3857: LD_EXP 1
3861: PPUSH
3862: LD_STRING D1-JMM-8
3864: PPUSH
3865: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3869: LD_EXP 1
3873: PPUSH
3874: LD_STRING D1-JMM-8a
3876: PPUSH
3877: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3881: LD_EXP 17
3885: PPUSH
3886: LD_STRING D1-Har-8
3888: PPUSH
3889: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3893: LD_EXP 1
3897: PPUSH
3898: LD_STRING D1-JMM-9
3900: PPUSH
3901: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3905: LD_EXP 17
3909: PPUSH
3910: LD_STRING D1-Har-9
3912: PPUSH
3913: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3917: LD_EXP 1
3921: PPUSH
3922: LD_STRING D1-JMM-10
3924: PPUSH
3925: CALL_OW 88
// if IsOK ( Denis ) then
3929: LD_EXP 3
3933: PPUSH
3934: CALL_OW 302
3938: IFFALSE 3952
// Say ( JMM , D1-JMM-10a ) ;
3940: LD_EXP 1
3944: PPUSH
3945: LD_STRING D1-JMM-10a
3947: PPUSH
3948: CALL_OW 88
// SelectDeltaCharacters ;
3952: CALL 4436 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 150 ) ;
3956: LD_EXP 21
3960: PUSH
3961: LD_INT 1
3963: ARRAY
3964: PPUSH
3965: CALL_OW 274
3969: PPUSH
3970: LD_INT 1
3972: PPUSH
3973: LD_INT 150
3975: PPUSH
3976: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) then
3980: LD_INT 22
3982: PUSH
3983: LD_INT 1
3985: PUSH
3986: EMPTY
3987: LIST
3988: LIST
3989: PUSH
3990: LD_INT 30
3992: PUSH
3993: LD_INT 29
3995: PUSH
3996: EMPTY
3997: LIST
3998: LIST
3999: PUSH
4000: EMPTY
4001: LIST
4002: LIST
4003: PPUSH
4004: CALL_OW 69
4008: IFFALSE 4034
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
4010: LD_EXP 21
4014: PUSH
4015: LD_INT 1
4017: ARRAY
4018: PPUSH
4019: CALL_OW 274
4023: PPUSH
4024: LD_INT 2
4026: PPUSH
4027: LD_INT 300
4029: PPUSH
4030: CALL_OW 277
// InGameOff ;
4034: CALL_OW 9
// Query ( Q1 ) ;
4038: LD_STRING Q1
4040: PPUSH
4041: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
4045: LD_INT 3
4047: PPUSH
4048: LD_INT 1
4050: PPUSH
4051: CALL_OW 424
// if IsInUnit ( JMM ) then
4055: LD_EXP 1
4059: PPUSH
4060: CALL_OW 310
4064: IFFALSE 4075
// ComExitBuilding ( JMM ) ;
4066: LD_EXP 1
4070: PPUSH
4071: CALL_OW 122
// end ;
4075: LD_VAR 0 1
4079: RET
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
4080: LD_INT 3
4082: PPUSH
4083: LD_INT 22
4085: PUSH
4086: LD_INT 1
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: PUSH
4093: LD_INT 21
4095: PUSH
4096: LD_INT 1
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: PPUSH
4107: CALL_OW 71
4111: PUSH
4112: LD_INT 0
4114: EQUAL
4115: IFFALSE 4433
4117: GO 4119
4119: DISABLE
4120: LD_INT 0
4122: PPUSH
4123: PPUSH
// begin SaveDeltaCharacters ;
4124: CALL 4808 0 0
// if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) then
4128: LD_INT 3
4130: PPUSH
4131: LD_INT 21
4133: PUSH
4134: LD_INT 2
4136: PUSH
4137: EMPTY
4138: LIST
4139: LIST
4140: PUSH
4141: LD_INT 3
4143: PUSH
4144: LD_INT 58
4146: PUSH
4147: EMPTY
4148: LIST
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: PUSH
4154: EMPTY
4155: LIST
4156: LIST
4157: PPUSH
4158: CALL_OW 70
4162: IFFALSE 4419
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
4164: LD_ADDR_VAR 0 1
4168: PUSH
4169: LD_INT 3
4171: PPUSH
4172: LD_INT 21
4174: PUSH
4175: LD_INT 2
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: PUSH
4182: LD_INT 3
4184: PUSH
4185: LD_INT 58
4187: PUSH
4188: EMPTY
4189: LIST
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: PUSH
4195: EMPTY
4196: LIST
4197: LIST
4198: PPUSH
4199: CALL_OW 70
4203: PUSH
4204: FOR_IN
4205: IFFALSE 4417
// begin cargoType := GetCargoType ( i ) ;
4207: LD_ADDR_VAR 0 2
4211: PUSH
4212: LD_VAR 0 1
4216: PPUSH
4217: CALL_OW 288
4221: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4222: LD_VAR 0 1
4226: PPUSH
4227: CALL_OW 264
4231: PUSH
4232: LD_INT 12
4234: EQUAL
4235: IFFALSE 4332
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] else
4237: LD_ADDR_EXP 15
4241: PUSH
4242: LD_EXP 15
4246: PUSH
4247: LD_VAR 0 1
4251: PPUSH
4252: CALL_OW 248
4256: PUSH
4257: LD_VAR 0 1
4261: PPUSH
4262: CALL_OW 265
4266: PUSH
4267: LD_VAR 0 1
4271: PPUSH
4272: CALL_OW 262
4276: PUSH
4277: LD_VAR 0 1
4281: PPUSH
4282: CALL_OW 263
4286: PUSH
4287: LD_VAR 0 1
4291: PPUSH
4292: CALL_OW 264
4296: PUSH
4297: LD_VAR 0 2
4301: PUSH
4302: LD_VAR 0 1
4306: PPUSH
4307: LD_VAR 0 2
4311: PPUSH
4312: CALL_OW 289
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: PUSH
4326: EMPTY
4327: LIST
4328: ADD
4329: ST_TO_ADDR
4330: GO 4403
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4332: LD_ADDR_EXP 15
4336: PUSH
4337: LD_EXP 15
4341: PUSH
4342: LD_VAR 0 1
4346: PPUSH
4347: CALL_OW 248
4351: PUSH
4352: LD_VAR 0 1
4356: PPUSH
4357: CALL_OW 265
4361: PUSH
4362: LD_VAR 0 1
4366: PPUSH
4367: CALL_OW 262
4371: PUSH
4372: LD_VAR 0 1
4376: PPUSH
4377: CALL_OW 263
4381: PUSH
4382: LD_VAR 0 1
4386: PPUSH
4387: CALL_OW 264
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: PUSH
4399: EMPTY
4400: LIST
4401: ADD
4402: ST_TO_ADDR
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4403: LD_EXP 15
4407: PPUSH
4408: LD_STRING 06_VehiclesIn06_1
4410: PPUSH
4411: CALL_OW 39
// end ;
4415: GO 4204
4417: POP
4418: POP
// end ; SaveCargos ;
4419: CALL 5588 0 0
// ChangeMap ( 6 , %_cont ) ;
4423: LD_INT 6
4425: PPUSH
4426: LD_STRING %_cont
4428: PPUSH
4429: CALL_OW 340
// end ; end_of_file
4433: PPOPN 2
4435: END
// export function SelectDeltaCharacters ; var i , yourPeople ; begin
4436: LD_INT 0
4438: PPUSH
4439: PPUSH
4440: PPUSH
// selectedPeople := [ ] ;
4441: LD_ADDR_EXP 18
4445: PUSH
4446: EMPTY
4447: ST_TO_ADDR
// yourPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4448: LD_ADDR_VAR 0 3
4452: PUSH
4453: LD_INT 22
4455: PUSH
4456: LD_INT 1
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: PUSH
4463: LD_INT 21
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 2
4475: PUSH
4476: LD_INT 25
4478: PUSH
4479: LD_INT 1
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: LD_INT 25
4488: PUSH
4489: LD_INT 2
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 25
4498: PUSH
4499: LD_INT 3
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: LD_INT 25
4508: PUSH
4509: LD_INT 4
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: PUSH
4516: EMPTY
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: LIST
4527: PPUSH
4528: CALL_OW 69
4532: PUSH
4533: LD_EXP 1
4537: PUSH
4538: LD_EXP 16
4542: PUSH
4543: LD_EXP 3
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: DIFF
4553: ST_TO_ADDR
// selectedPeople := CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4554: LD_ADDR_EXP 18
4558: PUSH
4559: LD_STRING text
4561: PPUSH
4562: LD_INT 5
4564: PPUSH
4565: LD_INT 5
4567: PPUSH
4568: LD_INT -5
4570: PUSH
4571: LD_EXP 1
4575: PUSH
4576: LD_INT -6
4578: PUSH
4579: LD_INT -2
4581: PUSH
4582: LD_INT -3
4584: PUSH
4585: LD_INT -5
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: PUSH
4596: LD_VAR 0 3
4600: ADD
4601: PUSH
4602: LD_INT -6
4604: PUSH
4605: LD_INT -4
4607: PUSH
4608: LD_EXP 3
4612: PUSH
4613: LD_EXP 16
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: LIST
4622: LIST
4623: ADD
4624: PPUSH
4625: LD_INT 1
4627: PUSH
4628: LD_INT 3
4630: PUSH
4631: LD_INT 2
4633: PUSH
4634: LD_INT 1
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: PUSH
4641: LD_INT 4
4643: PUSH
4644: EMPTY
4645: LIST
4646: LIST
4647: LIST
4648: LIST
4649: PPUSH
4650: CALL_OW 42
4654: ST_TO_ADDR
// ComStop ( selectedPeople ) ;
4655: LD_EXP 18
4659: PPUSH
4660: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4664: LD_INT 22
4666: PUSH
4667: LD_INT 1
4669: PUSH
4670: EMPTY
4671: LIST
4672: LIST
4673: PUSH
4674: LD_INT 21
4676: PUSH
4677: LD_INT 1
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PUSH
4684: EMPTY
4685: LIST
4686: LIST
4687: PPUSH
4688: CALL_OW 69
4692: PPUSH
4693: LD_INT 4
4695: PPUSH
4696: CALL_OW 235
// for i in selectedPeople do
4700: LD_ADDR_VAR 0 2
4704: PUSH
4705: LD_EXP 18
4709: PUSH
4710: FOR_IN
4711: IFFALSE 4727
// SetSide ( i , 1 ) ;
4713: LD_VAR 0 2
4717: PPUSH
4718: LD_INT 1
4720: PPUSH
4721: CALL_OW 235
4725: GO 4710
4727: POP
4728: POP
// for i in yourApemans do
4729: LD_ADDR_VAR 0 2
4733: PUSH
4734: LD_EXP 14
4738: PUSH
4739: FOR_IN
4740: IFFALSE 4756
// SetSide ( i , 1 ) ;
4742: LD_VAR 0 2
4746: PPUSH
4747: LD_INT 1
4749: PPUSH
4750: CALL_OW 235
4754: GO 4739
4756: POP
4757: POP
// if Mike then
4758: LD_EXP 10
4762: IFFALSE 4776
// SetSide ( Mike , 1 ) ;
4764: LD_EXP 10
4768: PPUSH
4769: LD_INT 1
4771: PPUSH
4772: CALL_OW 235
// SetSide ( JMM , 1 ) ;
4776: LD_EXP 1
4780: PPUSH
4781: LD_INT 1
4783: PPUSH
4784: CALL_OW 235
// SetSkill ( yourApemans , 2 , 3 ) ;
4788: LD_EXP 14
4792: PPUSH
4793: LD_INT 2
4795: PPUSH
4796: LD_INT 3
4798: PPUSH
4799: CALL_OW 237
// end ;
4803: LD_VAR 0 1
4807: RET
// export function SaveDeltaCharacters ; begin
4808: LD_INT 0
4810: PPUSH
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4811: LD_EXP 1
4815: PPUSH
4816: LD_EXP 23
4820: PUSH
4821: LD_STRING JMM
4823: STR
4824: PPUSH
4825: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4829: LD_EXP 16
4833: PPUSH
4834: LD_STRING DeltaDoctor
4836: PPUSH
4837: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4841: LD_EXP 3
4845: PPUSH
4846: LD_EXP 23
4850: PUSH
4851: LD_STRING Denis
4853: STR
4854: PPUSH
4855: CALL_OW 38
// if Lisa in selectedPeople then
4859: LD_EXP 4
4863: PUSH
4864: LD_EXP 18
4868: IN
4869: IFFALSE 4901
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4871: LD_EXP 4
4875: PPUSH
4876: LD_EXP 23
4880: PUSH
4881: LD_STRING Lisa
4883: STR
4884: PPUSH
4885: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4889: LD_INT 1
4891: PPUSH
4892: LD_STRING LisaIn06
4894: PPUSH
4895: CALL_OW 39
// end else
4899: GO 4922
// if IsOk ( Lisa ) then
4901: LD_EXP 4
4905: PPUSH
4906: CALL_OW 302
4910: IFFALSE 4922
// SaveVariable ( 1 , LisaStayInDelta ) ;
4912: LD_INT 1
4914: PPUSH
4915: LD_STRING LisaStayInDelta
4917: PPUSH
4918: CALL_OW 39
// if Bobby in selectedPeople then
4922: LD_EXP 6
4926: PUSH
4927: LD_EXP 18
4931: IN
4932: IFFALSE 4964
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4934: LD_EXP 6
4938: PPUSH
4939: LD_EXP 23
4943: PUSH
4944: LD_STRING Bobby
4946: STR
4947: PPUSH
4948: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4952: LD_INT 1
4954: PPUSH
4955: LD_STRING BobbyIn06
4957: PPUSH
4958: CALL_OW 39
// end else
4962: GO 4985
// if IsOk ( Bobby ) then
4964: LD_EXP 6
4968: PPUSH
4969: CALL_OW 302
4973: IFFALSE 4985
// SaveVariable ( 1 , BobbyStayInDelta ) ;
4975: LD_INT 1
4977: PPUSH
4978: LD_STRING BobbyStayInDelta
4980: PPUSH
4981: CALL_OW 39
// if Cyrus in selectedPeople then
4985: LD_EXP 7
4989: PUSH
4990: LD_EXP 18
4994: IN
4995: IFFALSE 5027
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4997: LD_EXP 7
5001: PPUSH
5002: LD_EXP 23
5006: PUSH
5007: LD_STRING Cyrus
5009: STR
5010: PPUSH
5011: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
5015: LD_INT 1
5017: PPUSH
5018: LD_STRING CyrusIn06
5020: PPUSH
5021: CALL_OW 39
// end else
5025: GO 5048
// if IsOk ( Cyrus ) then
5027: LD_EXP 7
5031: PPUSH
5032: CALL_OW 302
5036: IFFALSE 5048
// SaveVariable ( 1 , CyrusStayInDelta ) ;
5038: LD_INT 1
5040: PPUSH
5041: LD_STRING CyrusStayInDelta
5043: PPUSH
5044: CALL_OW 39
// if Frank in selectedPeople then
5048: LD_EXP 5
5052: PUSH
5053: LD_EXP 18
5057: IN
5058: IFFALSE 5090
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5060: LD_EXP 5
5064: PPUSH
5065: LD_EXP 23
5069: PUSH
5070: LD_STRING Frank
5072: STR
5073: PPUSH
5074: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
5078: LD_INT 1
5080: PPUSH
5081: LD_STRING FrankIn06
5083: PPUSH
5084: CALL_OW 39
// end else
5088: GO 5111
// if IsOk ( Frank ) then
5090: LD_EXP 5
5094: PPUSH
5095: CALL_OW 302
5099: IFFALSE 5111
// SaveVariable ( 1 , FrankStayInDelta ) ;
5101: LD_INT 1
5103: PPUSH
5104: LD_STRING FrankStayInDelta
5106: PPUSH
5107: CALL_OW 39
// if Brown in selectedPeople then
5111: LD_EXP 8
5115: PUSH
5116: LD_EXP 18
5120: IN
5121: IFFALSE 5153
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5123: LD_EXP 8
5127: PPUSH
5128: LD_EXP 23
5132: PUSH
5133: LD_STRING Brown
5135: STR
5136: PPUSH
5137: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
5141: LD_INT 1
5143: PPUSH
5144: LD_STRING BrownIn06
5146: PPUSH
5147: CALL_OW 39
// end else
5151: GO 5174
// if IsOk ( Brown ) then
5153: LD_EXP 8
5157: PPUSH
5158: CALL_OW 302
5162: IFFALSE 5174
// SaveVariable ( 1 , BrownStayInDelta ) ;
5164: LD_INT 1
5166: PPUSH
5167: LD_STRING BrownStayInDelta
5169: PPUSH
5170: CALL_OW 39
// if Donaldson in selectedPeople then
5174: LD_EXP 9
5178: PUSH
5179: LD_EXP 18
5183: IN
5184: IFFALSE 5216
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5186: LD_EXP 9
5190: PPUSH
5191: LD_EXP 23
5195: PUSH
5196: LD_STRING Donaldson
5198: STR
5199: PPUSH
5200: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5204: LD_INT 1
5206: PPUSH
5207: LD_STRING DonaldsonIn06
5209: PPUSH
5210: CALL_OW 39
// end else
5214: GO 5237
// if IsOk ( Donaldson ) then
5216: LD_EXP 9
5220: PPUSH
5221: CALL_OW 302
5225: IFFALSE 5237
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5227: LD_INT 1
5229: PPUSH
5230: LD_STRING DonaldsonStayInDelta
5232: PPUSH
5233: CALL_OW 39
// if Gladstone in selectedPeople then
5237: LD_EXP 2
5241: PUSH
5242: LD_EXP 18
5246: IN
5247: IFFALSE 5279
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5249: LD_EXP 2
5253: PPUSH
5254: LD_EXP 23
5258: PUSH
5259: LD_STRING Gladstone
5261: STR
5262: PPUSH
5263: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
5267: LD_INT 1
5269: PPUSH
5270: LD_STRING GladstoneIn06
5272: PPUSH
5273: CALL_OW 39
// end else
5277: GO 5300
// if IsOk ( Gladstone ) then
5279: LD_EXP 2
5283: PPUSH
5284: CALL_OW 302
5288: IFFALSE 5300
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5290: LD_INT 1
5292: PPUSH
5293: LD_STRING GladstoneStayInDelta
5295: PPUSH
5296: CALL_OW 39
// if Mike then
5300: LD_EXP 10
5304: IFFALSE 5324
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
5306: LD_EXP 10
5310: PPUSH
5311: LD_EXP 23
5315: PUSH
5316: LD_STRING Mike
5318: STR
5319: PPUSH
5320: CALL_OW 38
// selectedPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ;
5324: LD_ADDR_EXP 18
5328: PUSH
5329: LD_INT 22
5331: PUSH
5332: LD_INT 1
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: PUSH
5339: LD_INT 23
5341: PUSH
5342: LD_INT 1
5344: PUSH
5345: EMPTY
5346: LIST
5347: LIST
5348: PUSH
5349: LD_INT 21
5351: PUSH
5352: LD_INT 1
5354: PUSH
5355: EMPTY
5356: LIST
5357: LIST
5358: PUSH
5359: EMPTY
5360: LIST
5361: LIST
5362: LIST
5363: PPUSH
5364: CALL_OW 69
5368: ST_TO_ADDR
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5369: LD_EXP 14
5373: PPUSH
5374: LD_STRING ApeIn06
5376: PPUSH
5377: CALL_OW 38
// SaveCharacters ( selectedPeople diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersIn06 ) ;
5381: LD_EXP 18
5385: PUSH
5386: LD_EXP 1
5390: PUSH
5391: LD_EXP 4
5395: PUSH
5396: LD_EXP 6
5400: PUSH
5401: LD_EXP 7
5405: PUSH
5406: LD_EXP 5
5410: PUSH
5411: LD_EXP 8
5415: PUSH
5416: LD_EXP 9
5420: PUSH
5421: LD_EXP 2
5425: PUSH
5426: LD_EXP 3
5430: PUSH
5431: EMPTY
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: LIST
5441: DIFF
5442: PPUSH
5443: LD_STRING OthersIn06
5445: PPUSH
5446: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersStayInDelta ) ;
5450: LD_INT 22
5452: PUSH
5453: LD_INT 4
5455: PUSH
5456: EMPTY
5457: LIST
5458: LIST
5459: PUSH
5460: LD_INT 2
5462: PUSH
5463: LD_INT 25
5465: PUSH
5466: LD_INT 1
5468: PUSH
5469: EMPTY
5470: LIST
5471: LIST
5472: PUSH
5473: LD_INT 25
5475: PUSH
5476: LD_INT 2
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: PUSH
5483: LD_INT 25
5485: PUSH
5486: LD_INT 3
5488: PUSH
5489: EMPTY
5490: LIST
5491: LIST
5492: PUSH
5493: LD_INT 25
5495: PUSH
5496: LD_INT 4
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: PUSH
5503: EMPTY
5504: LIST
5505: LIST
5506: LIST
5507: LIST
5508: LIST
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: PPUSH
5514: CALL_OW 69
5518: PUSH
5519: LD_EXP 16
5523: PUSH
5524: LD_EXP 4
5528: PUSH
5529: LD_EXP 6
5533: PUSH
5534: LD_EXP 7
5538: PUSH
5539: LD_EXP 5
5543: PUSH
5544: LD_EXP 8
5548: PUSH
5549: LD_EXP 9
5553: PUSH
5554: LD_EXP 2
5558: PUSH
5559: LD_EXP 3
5563: PUSH
5564: EMPTY
5565: LIST
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: LIST
5573: LIST
5574: DIFF
5575: PPUSH
5576: LD_STRING OthersStayInDelta
5578: PPUSH
5579: CALL_OW 38
// end ;
5583: LD_VAR 0 1
5587: RET
// export function SaveCargos ; var i ; begin
5588: LD_INT 0
5590: PPUSH
5591: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
5592: LD_ADDR_VAR 0 2
5596: PUSH
5597: LD_INT 3
5599: PPUSH
5600: LD_INT 22
5602: PUSH
5603: LD_INT 1
5605: PUSH
5606: EMPTY
5607: LIST
5608: LIST
5609: PUSH
5610: LD_INT 34
5612: PUSH
5613: LD_INT 12
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: PUSH
5620: EMPTY
5621: LIST
5622: LIST
5623: PPUSH
5624: CALL_OW 70
5628: PUSH
5629: FOR_IN
5630: IFFALSE 5658
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
5632: LD_ADDR_EXP 22
5636: PUSH
5637: LD_EXP 22
5641: PUSH
5642: LD_VAR 0 2
5646: PPUSH
5647: CALL 66822 0 1
5651: PUSH
5652: EMPTY
5653: LIST
5654: ADD
5655: ST_TO_ADDR
5656: GO 5629
5658: POP
5659: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
5660: LD_EXP 22
5664: PPUSH
5665: LD_STRING 06_ResourcesInCargo06_1
5667: PPUSH
5668: CALL_OW 39
// end ; end_of_file
5672: LD_VAR 0 1
5676: RET
// on Command ( comandid ) do var i ;
5677: LD_INT 0
5679: PPUSH
// begin if comandid = 65 then
5680: LD_VAR 0 1
5684: PUSH
5685: LD_INT 65
5687: EQUAL
5688: IFFALSE 5729
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5690: LD_ADDR_VAR 0 2
5694: PUSH
5695: LD_INT 22
5697: PUSH
5698: LD_INT 1
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: PUSH
5705: EMPTY
5706: LIST
5707: PPUSH
5708: CALL_OW 69
5712: PUSH
5713: FOR_IN
5714: IFFALSE 5727
// ComStop ( i ) ;
5716: LD_VAR 0 2
5720: PPUSH
5721: CALL_OW 141
5725: GO 5713
5727: POP
5728: POP
// end ;
5729: PPOPN 2
5731: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5732: LD_INT 0
5734: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5735: LD_ADDR_VAR 0 3
5739: PUSH
5740: LD_INT 22
5742: PUSH
5743: LD_INT 1
5745: PUSH
5746: EMPTY
5747: LIST
5748: LIST
5749: PUSH
5750: LD_INT 21
5752: PUSH
5753: LD_INT 3
5755: PUSH
5756: EMPTY
5757: LIST
5758: LIST
5759: PUSH
5760: LD_INT 30
5762: PUSH
5763: LD_INT 0
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PUSH
5770: EMPTY
5771: LIST
5772: LIST
5773: LIST
5774: PPUSH
5775: CALL_OW 69
5779: ST_TO_ADDR
// if not tmp then
5780: LD_VAR 0 3
5784: NOT
5785: IFFALSE 5789
// exit ;
5787: GO 5819
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5789: LD_VAR 0 1
5793: PPUSH
5794: LD_VAR 0 3
5798: PUSH
5799: LD_INT 1
5801: ARRAY
5802: PPUSH
5803: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5807: LD_VAR 0 1
5811: PPUSH
5812: LD_INT 4
5814: PPUSH
5815: CALL_OW 235
// end ;
5819: PPOPN 3
5821: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5822: LD_VAR 0 1
5826: PUSH
5827: LD_EXP 1
5831: EQUAL
5832: IFFALSE 5841
// YouLost ( JMM ) ;
5834: LD_STRING JMM
5836: PPUSH
5837: CALL_OW 104
// SOS_UnitDestroyed ( un ) ;
5841: LD_VAR 0 1
5845: PPUSH
5846: CALL 21519 0 1
// end ;
5850: PPOPN 1
5852: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5853: LD_VAR 0 1
5857: PPUSH
5858: LD_VAR 0 2
5862: PPUSH
5863: CALL 21639 0 2
// end ; end_of_file
5867: PPOPN 2
5869: END
// every 0 0$1 do
5870: GO 5872
5872: DISABLE
// begin enable ;
5873: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5874: LD_STRING updateTimer(
5876: PUSH
5877: LD_OWVAR 1
5881: STR
5882: PUSH
5883: LD_STRING );
5885: STR
5886: PPUSH
5887: CALL_OW 559
// end ;
5891: END
// export function SOS_MapStart ( ) ; begin
5892: LD_INT 0
5894: PPUSH
// if streamModeActive then
5895: LD_EXP 25
5899: IFFALSE 5908
// DefineStreamItems ( true ) ;
5901: LD_INT 1
5903: PPUSH
5904: CALL 7562 0 1
// UpdateFactoryWaypoints ( ) ;
5908: CALL 20423 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5912: CALL 20680 0 0
// end ;
5916: LD_VAR 0 1
5920: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5921: LD_INT 0
5923: PPUSH
// if p2 = hack_mode then
5924: LD_VAR 0 2
5928: PUSH
5929: LD_INT 100
5931: EQUAL
5932: IFFALSE 6935
// begin if not StreamModeActive then
5934: LD_EXP 25
5938: NOT
5939: IFFALSE 5949
// StreamModeActive := true ;
5941: LD_ADDR_EXP 25
5945: PUSH
5946: LD_INT 1
5948: ST_TO_ADDR
// if p3 = 0 then
5949: LD_VAR 0 3
5953: PUSH
5954: LD_INT 0
5956: EQUAL
5957: IFFALSE 5963
// InitStreamMode ;
5959: CALL 7098 0 0
// if p3 = 1 then
5963: LD_VAR 0 3
5967: PUSH
5968: LD_INT 1
5970: EQUAL
5971: IFFALSE 5981
// sRocket := true ;
5973: LD_ADDR_EXP 30
5977: PUSH
5978: LD_INT 1
5980: ST_TO_ADDR
// if p3 = 2 then
5981: LD_VAR 0 3
5985: PUSH
5986: LD_INT 2
5988: EQUAL
5989: IFFALSE 5999
// sSpeed := true ;
5991: LD_ADDR_EXP 29
5995: PUSH
5996: LD_INT 1
5998: ST_TO_ADDR
// if p3 = 3 then
5999: LD_VAR 0 3
6003: PUSH
6004: LD_INT 3
6006: EQUAL
6007: IFFALSE 6017
// sEngine := true ;
6009: LD_ADDR_EXP 31
6013: PUSH
6014: LD_INT 1
6016: ST_TO_ADDR
// if p3 = 4 then
6017: LD_VAR 0 3
6021: PUSH
6022: LD_INT 4
6024: EQUAL
6025: IFFALSE 6035
// sSpec := true ;
6027: LD_ADDR_EXP 28
6031: PUSH
6032: LD_INT 1
6034: ST_TO_ADDR
// if p3 = 5 then
6035: LD_VAR 0 3
6039: PUSH
6040: LD_INT 5
6042: EQUAL
6043: IFFALSE 6053
// sLevel := true ;
6045: LD_ADDR_EXP 32
6049: PUSH
6050: LD_INT 1
6052: ST_TO_ADDR
// if p3 = 6 then
6053: LD_VAR 0 3
6057: PUSH
6058: LD_INT 6
6060: EQUAL
6061: IFFALSE 6071
// sArmoury := true ;
6063: LD_ADDR_EXP 33
6067: PUSH
6068: LD_INT 1
6070: ST_TO_ADDR
// if p3 = 7 then
6071: LD_VAR 0 3
6075: PUSH
6076: LD_INT 7
6078: EQUAL
6079: IFFALSE 6089
// sRadar := true ;
6081: LD_ADDR_EXP 34
6085: PUSH
6086: LD_INT 1
6088: ST_TO_ADDR
// if p3 = 8 then
6089: LD_VAR 0 3
6093: PUSH
6094: LD_INT 8
6096: EQUAL
6097: IFFALSE 6107
// sBunker := true ;
6099: LD_ADDR_EXP 35
6103: PUSH
6104: LD_INT 1
6106: ST_TO_ADDR
// if p3 = 9 then
6107: LD_VAR 0 3
6111: PUSH
6112: LD_INT 9
6114: EQUAL
6115: IFFALSE 6125
// sHack := true ;
6117: LD_ADDR_EXP 36
6121: PUSH
6122: LD_INT 1
6124: ST_TO_ADDR
// if p3 = 10 then
6125: LD_VAR 0 3
6129: PUSH
6130: LD_INT 10
6132: EQUAL
6133: IFFALSE 6143
// sFire := true ;
6135: LD_ADDR_EXP 37
6139: PUSH
6140: LD_INT 1
6142: ST_TO_ADDR
// if p3 = 11 then
6143: LD_VAR 0 3
6147: PUSH
6148: LD_INT 11
6150: EQUAL
6151: IFFALSE 6161
// sRefresh := true ;
6153: LD_ADDR_EXP 38
6157: PUSH
6158: LD_INT 1
6160: ST_TO_ADDR
// if p3 = 12 then
6161: LD_VAR 0 3
6165: PUSH
6166: LD_INT 12
6168: EQUAL
6169: IFFALSE 6179
// sExp := true ;
6171: LD_ADDR_EXP 39
6175: PUSH
6176: LD_INT 1
6178: ST_TO_ADDR
// if p3 = 13 then
6179: LD_VAR 0 3
6183: PUSH
6184: LD_INT 13
6186: EQUAL
6187: IFFALSE 6197
// sDepot := true ;
6189: LD_ADDR_EXP 40
6193: PUSH
6194: LD_INT 1
6196: ST_TO_ADDR
// if p3 = 14 then
6197: LD_VAR 0 3
6201: PUSH
6202: LD_INT 14
6204: EQUAL
6205: IFFALSE 6215
// sFlag := true ;
6207: LD_ADDR_EXP 41
6211: PUSH
6212: LD_INT 1
6214: ST_TO_ADDR
// if p3 = 15 then
6215: LD_VAR 0 3
6219: PUSH
6220: LD_INT 15
6222: EQUAL
6223: IFFALSE 6233
// sKamikadze := true ;
6225: LD_ADDR_EXP 49
6229: PUSH
6230: LD_INT 1
6232: ST_TO_ADDR
// if p3 = 16 then
6233: LD_VAR 0 3
6237: PUSH
6238: LD_INT 16
6240: EQUAL
6241: IFFALSE 6251
// sTroll := true ;
6243: LD_ADDR_EXP 50
6247: PUSH
6248: LD_INT 1
6250: ST_TO_ADDR
// if p3 = 17 then
6251: LD_VAR 0 3
6255: PUSH
6256: LD_INT 17
6258: EQUAL
6259: IFFALSE 6269
// sSlow := true ;
6261: LD_ADDR_EXP 51
6265: PUSH
6266: LD_INT 1
6268: ST_TO_ADDR
// if p3 = 18 then
6269: LD_VAR 0 3
6273: PUSH
6274: LD_INT 18
6276: EQUAL
6277: IFFALSE 6287
// sLack := true ;
6279: LD_ADDR_EXP 52
6283: PUSH
6284: LD_INT 1
6286: ST_TO_ADDR
// if p3 = 19 then
6287: LD_VAR 0 3
6291: PUSH
6292: LD_INT 19
6294: EQUAL
6295: IFFALSE 6305
// sTank := true ;
6297: LD_ADDR_EXP 54
6301: PUSH
6302: LD_INT 1
6304: ST_TO_ADDR
// if p3 = 20 then
6305: LD_VAR 0 3
6309: PUSH
6310: LD_INT 20
6312: EQUAL
6313: IFFALSE 6323
// sRemote := true ;
6315: LD_ADDR_EXP 55
6319: PUSH
6320: LD_INT 1
6322: ST_TO_ADDR
// if p3 = 21 then
6323: LD_VAR 0 3
6327: PUSH
6328: LD_INT 21
6330: EQUAL
6331: IFFALSE 6341
// sPowell := true ;
6333: LD_ADDR_EXP 56
6337: PUSH
6338: LD_INT 1
6340: ST_TO_ADDR
// if p3 = 22 then
6341: LD_VAR 0 3
6345: PUSH
6346: LD_INT 22
6348: EQUAL
6349: IFFALSE 6359
// sTeleport := true ;
6351: LD_ADDR_EXP 59
6355: PUSH
6356: LD_INT 1
6358: ST_TO_ADDR
// if p3 = 23 then
6359: LD_VAR 0 3
6363: PUSH
6364: LD_INT 23
6366: EQUAL
6367: IFFALSE 6377
// sOilTower := true ;
6369: LD_ADDR_EXP 61
6373: PUSH
6374: LD_INT 1
6376: ST_TO_ADDR
// if p3 = 24 then
6377: LD_VAR 0 3
6381: PUSH
6382: LD_INT 24
6384: EQUAL
6385: IFFALSE 6395
// sShovel := true ;
6387: LD_ADDR_EXP 62
6391: PUSH
6392: LD_INT 1
6394: ST_TO_ADDR
// if p3 = 25 then
6395: LD_VAR 0 3
6399: PUSH
6400: LD_INT 25
6402: EQUAL
6403: IFFALSE 6413
// sSheik := true ;
6405: LD_ADDR_EXP 63
6409: PUSH
6410: LD_INT 1
6412: ST_TO_ADDR
// if p3 = 26 then
6413: LD_VAR 0 3
6417: PUSH
6418: LD_INT 26
6420: EQUAL
6421: IFFALSE 6431
// sEarthquake := true ;
6423: LD_ADDR_EXP 65
6427: PUSH
6428: LD_INT 1
6430: ST_TO_ADDR
// if p3 = 27 then
6431: LD_VAR 0 3
6435: PUSH
6436: LD_INT 27
6438: EQUAL
6439: IFFALSE 6449
// sAI := true ;
6441: LD_ADDR_EXP 66
6445: PUSH
6446: LD_INT 1
6448: ST_TO_ADDR
// if p3 = 28 then
6449: LD_VAR 0 3
6453: PUSH
6454: LD_INT 28
6456: EQUAL
6457: IFFALSE 6467
// sCargo := true ;
6459: LD_ADDR_EXP 69
6463: PUSH
6464: LD_INT 1
6466: ST_TO_ADDR
// if p3 = 29 then
6467: LD_VAR 0 3
6471: PUSH
6472: LD_INT 29
6474: EQUAL
6475: IFFALSE 6485
// sDLaser := true ;
6477: LD_ADDR_EXP 70
6481: PUSH
6482: LD_INT 1
6484: ST_TO_ADDR
// if p3 = 30 then
6485: LD_VAR 0 3
6489: PUSH
6490: LD_INT 30
6492: EQUAL
6493: IFFALSE 6503
// sExchange := true ;
6495: LD_ADDR_EXP 71
6499: PUSH
6500: LD_INT 1
6502: ST_TO_ADDR
// if p3 = 31 then
6503: LD_VAR 0 3
6507: PUSH
6508: LD_INT 31
6510: EQUAL
6511: IFFALSE 6521
// sFac := true ;
6513: LD_ADDR_EXP 72
6517: PUSH
6518: LD_INT 1
6520: ST_TO_ADDR
// if p3 = 32 then
6521: LD_VAR 0 3
6525: PUSH
6526: LD_INT 32
6528: EQUAL
6529: IFFALSE 6539
// sPower := true ;
6531: LD_ADDR_EXP 73
6535: PUSH
6536: LD_INT 1
6538: ST_TO_ADDR
// if p3 = 33 then
6539: LD_VAR 0 3
6543: PUSH
6544: LD_INT 33
6546: EQUAL
6547: IFFALSE 6557
// sRandom := true ;
6549: LD_ADDR_EXP 74
6553: PUSH
6554: LD_INT 1
6556: ST_TO_ADDR
// if p3 = 34 then
6557: LD_VAR 0 3
6561: PUSH
6562: LD_INT 34
6564: EQUAL
6565: IFFALSE 6575
// sShield := true ;
6567: LD_ADDR_EXP 75
6571: PUSH
6572: LD_INT 1
6574: ST_TO_ADDR
// if p3 = 35 then
6575: LD_VAR 0 3
6579: PUSH
6580: LD_INT 35
6582: EQUAL
6583: IFFALSE 6593
// sTime := true ;
6585: LD_ADDR_EXP 76
6589: PUSH
6590: LD_INT 1
6592: ST_TO_ADDR
// if p3 = 36 then
6593: LD_VAR 0 3
6597: PUSH
6598: LD_INT 36
6600: EQUAL
6601: IFFALSE 6611
// sTools := true ;
6603: LD_ADDR_EXP 77
6607: PUSH
6608: LD_INT 1
6610: ST_TO_ADDR
// if p3 = 101 then
6611: LD_VAR 0 3
6615: PUSH
6616: LD_INT 101
6618: EQUAL
6619: IFFALSE 6629
// sSold := true ;
6621: LD_ADDR_EXP 42
6625: PUSH
6626: LD_INT 1
6628: ST_TO_ADDR
// if p3 = 102 then
6629: LD_VAR 0 3
6633: PUSH
6634: LD_INT 102
6636: EQUAL
6637: IFFALSE 6647
// sDiff := true ;
6639: LD_ADDR_EXP 43
6643: PUSH
6644: LD_INT 1
6646: ST_TO_ADDR
// if p3 = 103 then
6647: LD_VAR 0 3
6651: PUSH
6652: LD_INT 103
6654: EQUAL
6655: IFFALSE 6665
// sFog := true ;
6657: LD_ADDR_EXP 46
6661: PUSH
6662: LD_INT 1
6664: ST_TO_ADDR
// if p3 = 104 then
6665: LD_VAR 0 3
6669: PUSH
6670: LD_INT 104
6672: EQUAL
6673: IFFALSE 6683
// sReset := true ;
6675: LD_ADDR_EXP 47
6679: PUSH
6680: LD_INT 1
6682: ST_TO_ADDR
// if p3 = 105 then
6683: LD_VAR 0 3
6687: PUSH
6688: LD_INT 105
6690: EQUAL
6691: IFFALSE 6701
// sSun := true ;
6693: LD_ADDR_EXP 48
6697: PUSH
6698: LD_INT 1
6700: ST_TO_ADDR
// if p3 = 106 then
6701: LD_VAR 0 3
6705: PUSH
6706: LD_INT 106
6708: EQUAL
6709: IFFALSE 6719
// sTiger := true ;
6711: LD_ADDR_EXP 44
6715: PUSH
6716: LD_INT 1
6718: ST_TO_ADDR
// if p3 = 107 then
6719: LD_VAR 0 3
6723: PUSH
6724: LD_INT 107
6726: EQUAL
6727: IFFALSE 6737
// sBomb := true ;
6729: LD_ADDR_EXP 45
6733: PUSH
6734: LD_INT 1
6736: ST_TO_ADDR
// if p3 = 108 then
6737: LD_VAR 0 3
6741: PUSH
6742: LD_INT 108
6744: EQUAL
6745: IFFALSE 6755
// sWound := true ;
6747: LD_ADDR_EXP 53
6751: PUSH
6752: LD_INT 1
6754: ST_TO_ADDR
// if p3 = 109 then
6755: LD_VAR 0 3
6759: PUSH
6760: LD_INT 109
6762: EQUAL
6763: IFFALSE 6773
// sBetray := true ;
6765: LD_ADDR_EXP 57
6769: PUSH
6770: LD_INT 1
6772: ST_TO_ADDR
// if p3 = 110 then
6773: LD_VAR 0 3
6777: PUSH
6778: LD_INT 110
6780: EQUAL
6781: IFFALSE 6791
// sContamin := true ;
6783: LD_ADDR_EXP 58
6787: PUSH
6788: LD_INT 1
6790: ST_TO_ADDR
// if p3 = 111 then
6791: LD_VAR 0 3
6795: PUSH
6796: LD_INT 111
6798: EQUAL
6799: IFFALSE 6809
// sOil := true ;
6801: LD_ADDR_EXP 60
6805: PUSH
6806: LD_INT 1
6808: ST_TO_ADDR
// if p3 = 112 then
6809: LD_VAR 0 3
6813: PUSH
6814: LD_INT 112
6816: EQUAL
6817: IFFALSE 6827
// sStu := true ;
6819: LD_ADDR_EXP 64
6823: PUSH
6824: LD_INT 1
6826: ST_TO_ADDR
// if p3 = 113 then
6827: LD_VAR 0 3
6831: PUSH
6832: LD_INT 113
6834: EQUAL
6835: IFFALSE 6845
// sBazooka := true ;
6837: LD_ADDR_EXP 67
6841: PUSH
6842: LD_INT 1
6844: ST_TO_ADDR
// if p3 = 114 then
6845: LD_VAR 0 3
6849: PUSH
6850: LD_INT 114
6852: EQUAL
6853: IFFALSE 6863
// sMortar := true ;
6855: LD_ADDR_EXP 68
6859: PUSH
6860: LD_INT 1
6862: ST_TO_ADDR
// if p3 = 115 then
6863: LD_VAR 0 3
6867: PUSH
6868: LD_INT 115
6870: EQUAL
6871: IFFALSE 6881
// sRanger := true ;
6873: LD_ADDR_EXP 78
6877: PUSH
6878: LD_INT 1
6880: ST_TO_ADDR
// if p3 = 116 then
6881: LD_VAR 0 3
6885: PUSH
6886: LD_INT 116
6888: EQUAL
6889: IFFALSE 6899
// sComputer := true ;
6891: LD_ADDR_EXP 79
6895: PUSH
6896: LD_INT 1
6898: ST_TO_ADDR
// if p3 = 117 then
6899: LD_VAR 0 3
6903: PUSH
6904: LD_INT 117
6906: EQUAL
6907: IFFALSE 6917
// s30 := true ;
6909: LD_ADDR_EXP 80
6913: PUSH
6914: LD_INT 1
6916: ST_TO_ADDR
// if p3 = 118 then
6917: LD_VAR 0 3
6921: PUSH
6922: LD_INT 118
6924: EQUAL
6925: IFFALSE 6935
// s60 := true ;
6927: LD_ADDR_EXP 81
6931: PUSH
6932: LD_INT 1
6934: ST_TO_ADDR
// end ; if p2 = stream_mode then
6935: LD_VAR 0 2
6939: PUSH
6940: LD_INT 101
6942: EQUAL
6943: IFFALSE 7071
// begin case p3 of 1 :
6945: LD_VAR 0 3
6949: PUSH
6950: LD_INT 1
6952: DOUBLE
6953: EQUAL
6954: IFTRUE 6958
6956: GO 6965
6958: POP
// hHackUnlimitedResources ; 2 :
6959: CALL 19169 0 0
6963: GO 7071
6965: LD_INT 2
6967: DOUBLE
6968: EQUAL
6969: IFTRUE 6973
6971: GO 6980
6973: POP
// hHackSetLevel10 ; 3 :
6974: CALL 19302 0 0
6978: GO 7071
6980: LD_INT 3
6982: DOUBLE
6983: EQUAL
6984: IFTRUE 6988
6986: GO 6995
6988: POP
// hHackSetLevel10YourUnits ; 4 :
6989: CALL 19387 0 0
6993: GO 7071
6995: LD_INT 4
6997: DOUBLE
6998: EQUAL
6999: IFTRUE 7003
7001: GO 7010
7003: POP
// hHackInvincible ; 5 :
7004: CALL 19835 0 0
7008: GO 7071
7010: LD_INT 5
7012: DOUBLE
7013: EQUAL
7014: IFTRUE 7018
7016: GO 7025
7018: POP
// hHackInvisible ; 6 :
7019: CALL 19946 0 0
7023: GO 7071
7025: LD_INT 6
7027: DOUBLE
7028: EQUAL
7029: IFTRUE 7033
7031: GO 7040
7033: POP
// hHackChangeYourSide ; 7 :
7034: CALL 20003 0 0
7038: GO 7071
7040: LD_INT 7
7042: DOUBLE
7043: EQUAL
7044: IFTRUE 7048
7046: GO 7055
7048: POP
// hHackChangeUnitSide ; 8 :
7049: CALL 20045 0 0
7053: GO 7071
7055: LD_INT 8
7057: DOUBLE
7058: EQUAL
7059: IFTRUE 7063
7061: GO 7070
7063: POP
// hHackFog ; end ;
7064: CALL 20146 0 0
7068: GO 7071
7070: POP
// end ; end ;
7071: LD_VAR 0 7
7075: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
7076: GO 7078
7078: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7079: LD_STRING initStreamRollete();
7081: PPUSH
7082: CALL_OW 559
// InitStreamMode ;
7086: CALL 7098 0 0
// DefineStreamItems ( false ) ;
7090: LD_INT 0
7092: PPUSH
7093: CALL 7562 0 1
// end ;
7097: END
// function InitStreamMode ; begin
7098: LD_INT 0
7100: PPUSH
// streamModeActive := false ;
7101: LD_ADDR_EXP 25
7105: PUSH
7106: LD_INT 0
7108: ST_TO_ADDR
// normalCounter := 36 ;
7109: LD_ADDR_EXP 26
7113: PUSH
7114: LD_INT 36
7116: ST_TO_ADDR
// hardcoreCounter := 18 ;
7117: LD_ADDR_EXP 27
7121: PUSH
7122: LD_INT 18
7124: ST_TO_ADDR
// sRocket := false ;
7125: LD_ADDR_EXP 30
7129: PUSH
7130: LD_INT 0
7132: ST_TO_ADDR
// sSpeed := false ;
7133: LD_ADDR_EXP 29
7137: PUSH
7138: LD_INT 0
7140: ST_TO_ADDR
// sEngine := false ;
7141: LD_ADDR_EXP 31
7145: PUSH
7146: LD_INT 0
7148: ST_TO_ADDR
// sSpec := false ;
7149: LD_ADDR_EXP 28
7153: PUSH
7154: LD_INT 0
7156: ST_TO_ADDR
// sLevel := false ;
7157: LD_ADDR_EXP 32
7161: PUSH
7162: LD_INT 0
7164: ST_TO_ADDR
// sArmoury := false ;
7165: LD_ADDR_EXP 33
7169: PUSH
7170: LD_INT 0
7172: ST_TO_ADDR
// sRadar := false ;
7173: LD_ADDR_EXP 34
7177: PUSH
7178: LD_INT 0
7180: ST_TO_ADDR
// sBunker := false ;
7181: LD_ADDR_EXP 35
7185: PUSH
7186: LD_INT 0
7188: ST_TO_ADDR
// sHack := false ;
7189: LD_ADDR_EXP 36
7193: PUSH
7194: LD_INT 0
7196: ST_TO_ADDR
// sFire := false ;
7197: LD_ADDR_EXP 37
7201: PUSH
7202: LD_INT 0
7204: ST_TO_ADDR
// sRefresh := false ;
7205: LD_ADDR_EXP 38
7209: PUSH
7210: LD_INT 0
7212: ST_TO_ADDR
// sExp := false ;
7213: LD_ADDR_EXP 39
7217: PUSH
7218: LD_INT 0
7220: ST_TO_ADDR
// sDepot := false ;
7221: LD_ADDR_EXP 40
7225: PUSH
7226: LD_INT 0
7228: ST_TO_ADDR
// sFlag := false ;
7229: LD_ADDR_EXP 41
7233: PUSH
7234: LD_INT 0
7236: ST_TO_ADDR
// sKamikadze := false ;
7237: LD_ADDR_EXP 49
7241: PUSH
7242: LD_INT 0
7244: ST_TO_ADDR
// sTroll := false ;
7245: LD_ADDR_EXP 50
7249: PUSH
7250: LD_INT 0
7252: ST_TO_ADDR
// sSlow := false ;
7253: LD_ADDR_EXP 51
7257: PUSH
7258: LD_INT 0
7260: ST_TO_ADDR
// sLack := false ;
7261: LD_ADDR_EXP 52
7265: PUSH
7266: LD_INT 0
7268: ST_TO_ADDR
// sTank := false ;
7269: LD_ADDR_EXP 54
7273: PUSH
7274: LD_INT 0
7276: ST_TO_ADDR
// sRemote := false ;
7277: LD_ADDR_EXP 55
7281: PUSH
7282: LD_INT 0
7284: ST_TO_ADDR
// sPowell := false ;
7285: LD_ADDR_EXP 56
7289: PUSH
7290: LD_INT 0
7292: ST_TO_ADDR
// sTeleport := false ;
7293: LD_ADDR_EXP 59
7297: PUSH
7298: LD_INT 0
7300: ST_TO_ADDR
// sOilTower := false ;
7301: LD_ADDR_EXP 61
7305: PUSH
7306: LD_INT 0
7308: ST_TO_ADDR
// sShovel := false ;
7309: LD_ADDR_EXP 62
7313: PUSH
7314: LD_INT 0
7316: ST_TO_ADDR
// sSheik := false ;
7317: LD_ADDR_EXP 63
7321: PUSH
7322: LD_INT 0
7324: ST_TO_ADDR
// sEarthquake := false ;
7325: LD_ADDR_EXP 65
7329: PUSH
7330: LD_INT 0
7332: ST_TO_ADDR
// sAI := false ;
7333: LD_ADDR_EXP 66
7337: PUSH
7338: LD_INT 0
7340: ST_TO_ADDR
// sCargo := false ;
7341: LD_ADDR_EXP 69
7345: PUSH
7346: LD_INT 0
7348: ST_TO_ADDR
// sDLaser := false ;
7349: LD_ADDR_EXP 70
7353: PUSH
7354: LD_INT 0
7356: ST_TO_ADDR
// sExchange := false ;
7357: LD_ADDR_EXP 71
7361: PUSH
7362: LD_INT 0
7364: ST_TO_ADDR
// sFac := false ;
7365: LD_ADDR_EXP 72
7369: PUSH
7370: LD_INT 0
7372: ST_TO_ADDR
// sPower := false ;
7373: LD_ADDR_EXP 73
7377: PUSH
7378: LD_INT 0
7380: ST_TO_ADDR
// sRandom := false ;
7381: LD_ADDR_EXP 74
7385: PUSH
7386: LD_INT 0
7388: ST_TO_ADDR
// sShield := false ;
7389: LD_ADDR_EXP 75
7393: PUSH
7394: LD_INT 0
7396: ST_TO_ADDR
// sTime := false ;
7397: LD_ADDR_EXP 76
7401: PUSH
7402: LD_INT 0
7404: ST_TO_ADDR
// sTools := false ;
7405: LD_ADDR_EXP 77
7409: PUSH
7410: LD_INT 0
7412: ST_TO_ADDR
// sSold := false ;
7413: LD_ADDR_EXP 42
7417: PUSH
7418: LD_INT 0
7420: ST_TO_ADDR
// sDiff := false ;
7421: LD_ADDR_EXP 43
7425: PUSH
7426: LD_INT 0
7428: ST_TO_ADDR
// sFog := false ;
7429: LD_ADDR_EXP 46
7433: PUSH
7434: LD_INT 0
7436: ST_TO_ADDR
// sReset := false ;
7437: LD_ADDR_EXP 47
7441: PUSH
7442: LD_INT 0
7444: ST_TO_ADDR
// sSun := false ;
7445: LD_ADDR_EXP 48
7449: PUSH
7450: LD_INT 0
7452: ST_TO_ADDR
// sTiger := false ;
7453: LD_ADDR_EXP 44
7457: PUSH
7458: LD_INT 0
7460: ST_TO_ADDR
// sBomb := false ;
7461: LD_ADDR_EXP 45
7465: PUSH
7466: LD_INT 0
7468: ST_TO_ADDR
// sWound := false ;
7469: LD_ADDR_EXP 53
7473: PUSH
7474: LD_INT 0
7476: ST_TO_ADDR
// sBetray := false ;
7477: LD_ADDR_EXP 57
7481: PUSH
7482: LD_INT 0
7484: ST_TO_ADDR
// sContamin := false ;
7485: LD_ADDR_EXP 58
7489: PUSH
7490: LD_INT 0
7492: ST_TO_ADDR
// sOil := false ;
7493: LD_ADDR_EXP 60
7497: PUSH
7498: LD_INT 0
7500: ST_TO_ADDR
// sStu := false ;
7501: LD_ADDR_EXP 64
7505: PUSH
7506: LD_INT 0
7508: ST_TO_ADDR
// sBazooka := false ;
7509: LD_ADDR_EXP 67
7513: PUSH
7514: LD_INT 0
7516: ST_TO_ADDR
// sMortar := false ;
7517: LD_ADDR_EXP 68
7521: PUSH
7522: LD_INT 0
7524: ST_TO_ADDR
// sRanger := false ;
7525: LD_ADDR_EXP 78
7529: PUSH
7530: LD_INT 0
7532: ST_TO_ADDR
// sComputer := false ;
7533: LD_ADDR_EXP 79
7537: PUSH
7538: LD_INT 0
7540: ST_TO_ADDR
// s30 := false ;
7541: LD_ADDR_EXP 80
7545: PUSH
7546: LD_INT 0
7548: ST_TO_ADDR
// s60 := false ;
7549: LD_ADDR_EXP 81
7553: PUSH
7554: LD_INT 0
7556: ST_TO_ADDR
// end ;
7557: LD_VAR 0 1
7561: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7562: LD_INT 0
7564: PPUSH
7565: PPUSH
7566: PPUSH
7567: PPUSH
7568: PPUSH
7569: PPUSH
7570: PPUSH
// result := [ ] ;
7571: LD_ADDR_VAR 0 2
7575: PUSH
7576: EMPTY
7577: ST_TO_ADDR
// if campaign_id = 1 then
7578: LD_OWVAR 69
7582: PUSH
7583: LD_INT 1
7585: EQUAL
7586: IFFALSE 10752
// begin case mission_number of 1 :
7588: LD_OWVAR 70
7592: PUSH
7593: LD_INT 1
7595: DOUBLE
7596: EQUAL
7597: IFTRUE 7601
7599: GO 7677
7601: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7602: LD_ADDR_VAR 0 2
7606: PUSH
7607: LD_INT 2
7609: PUSH
7610: LD_INT 4
7612: PUSH
7613: LD_INT 11
7615: PUSH
7616: LD_INT 12
7618: PUSH
7619: LD_INT 15
7621: PUSH
7622: LD_INT 16
7624: PUSH
7625: LD_INT 22
7627: PUSH
7628: LD_INT 23
7630: PUSH
7631: LD_INT 26
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: PUSH
7645: LD_INT 101
7647: PUSH
7648: LD_INT 102
7650: PUSH
7651: LD_INT 106
7653: PUSH
7654: LD_INT 116
7656: PUSH
7657: LD_INT 117
7659: PUSH
7660: LD_INT 118
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: ST_TO_ADDR
7675: GO 10750
7677: LD_INT 2
7679: DOUBLE
7680: EQUAL
7681: IFTRUE 7685
7683: GO 7769
7685: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7686: LD_ADDR_VAR 0 2
7690: PUSH
7691: LD_INT 2
7693: PUSH
7694: LD_INT 4
7696: PUSH
7697: LD_INT 11
7699: PUSH
7700: LD_INT 12
7702: PUSH
7703: LD_INT 15
7705: PUSH
7706: LD_INT 16
7708: PUSH
7709: LD_INT 22
7711: PUSH
7712: LD_INT 23
7714: PUSH
7715: LD_INT 26
7717: PUSH
7718: EMPTY
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: PUSH
7729: LD_INT 101
7731: PUSH
7732: LD_INT 102
7734: PUSH
7735: LD_INT 105
7737: PUSH
7738: LD_INT 106
7740: PUSH
7741: LD_INT 108
7743: PUSH
7744: LD_INT 116
7746: PUSH
7747: LD_INT 117
7749: PUSH
7750: LD_INT 118
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: ST_TO_ADDR
7767: GO 10750
7769: LD_INT 3
7771: DOUBLE
7772: EQUAL
7773: IFTRUE 7777
7775: GO 7865
7777: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7778: LD_ADDR_VAR 0 2
7782: PUSH
7783: LD_INT 2
7785: PUSH
7786: LD_INT 4
7788: PUSH
7789: LD_INT 5
7791: PUSH
7792: LD_INT 11
7794: PUSH
7795: LD_INT 12
7797: PUSH
7798: LD_INT 15
7800: PUSH
7801: LD_INT 16
7803: PUSH
7804: LD_INT 22
7806: PUSH
7807: LD_INT 26
7809: PUSH
7810: LD_INT 36
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: PUSH
7825: LD_INT 101
7827: PUSH
7828: LD_INT 102
7830: PUSH
7831: LD_INT 105
7833: PUSH
7834: LD_INT 106
7836: PUSH
7837: LD_INT 108
7839: PUSH
7840: LD_INT 116
7842: PUSH
7843: LD_INT 117
7845: PUSH
7846: LD_INT 118
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: PUSH
7859: EMPTY
7860: LIST
7861: LIST
7862: ST_TO_ADDR
7863: GO 10750
7865: LD_INT 4
7867: DOUBLE
7868: EQUAL
7869: IFTRUE 7873
7871: GO 7969
7873: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7874: LD_ADDR_VAR 0 2
7878: PUSH
7879: LD_INT 2
7881: PUSH
7882: LD_INT 4
7884: PUSH
7885: LD_INT 5
7887: PUSH
7888: LD_INT 8
7890: PUSH
7891: LD_INT 11
7893: PUSH
7894: LD_INT 12
7896: PUSH
7897: LD_INT 15
7899: PUSH
7900: LD_INT 16
7902: PUSH
7903: LD_INT 22
7905: PUSH
7906: LD_INT 23
7908: PUSH
7909: LD_INT 26
7911: PUSH
7912: LD_INT 36
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: PUSH
7929: LD_INT 101
7931: PUSH
7932: LD_INT 102
7934: PUSH
7935: LD_INT 105
7937: PUSH
7938: LD_INT 106
7940: PUSH
7941: LD_INT 108
7943: PUSH
7944: LD_INT 116
7946: PUSH
7947: LD_INT 117
7949: PUSH
7950: LD_INT 118
7952: PUSH
7953: EMPTY
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: ST_TO_ADDR
7967: GO 10750
7969: LD_INT 5
7971: DOUBLE
7972: EQUAL
7973: IFTRUE 7977
7975: GO 8089
7977: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7978: LD_ADDR_VAR 0 2
7982: PUSH
7983: LD_INT 2
7985: PUSH
7986: LD_INT 4
7988: PUSH
7989: LD_INT 5
7991: PUSH
7992: LD_INT 6
7994: PUSH
7995: LD_INT 8
7997: PUSH
7998: LD_INT 11
8000: PUSH
8001: LD_INT 12
8003: PUSH
8004: LD_INT 15
8006: PUSH
8007: LD_INT 16
8009: PUSH
8010: LD_INT 22
8012: PUSH
8013: LD_INT 23
8015: PUSH
8016: LD_INT 25
8018: PUSH
8019: LD_INT 26
8021: PUSH
8022: LD_INT 36
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: PUSH
8041: LD_INT 101
8043: PUSH
8044: LD_INT 102
8046: PUSH
8047: LD_INT 105
8049: PUSH
8050: LD_INT 106
8052: PUSH
8053: LD_INT 108
8055: PUSH
8056: LD_INT 109
8058: PUSH
8059: LD_INT 112
8061: PUSH
8062: LD_INT 116
8064: PUSH
8065: LD_INT 117
8067: PUSH
8068: LD_INT 118
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: ST_TO_ADDR
8087: GO 10750
8089: LD_INT 6
8091: DOUBLE
8092: EQUAL
8093: IFTRUE 8097
8095: GO 8229
8097: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
8098: LD_ADDR_VAR 0 2
8102: PUSH
8103: LD_INT 2
8105: PUSH
8106: LD_INT 4
8108: PUSH
8109: LD_INT 5
8111: PUSH
8112: LD_INT 6
8114: PUSH
8115: LD_INT 8
8117: PUSH
8118: LD_INT 11
8120: PUSH
8121: LD_INT 12
8123: PUSH
8124: LD_INT 15
8126: PUSH
8127: LD_INT 16
8129: PUSH
8130: LD_INT 20
8132: PUSH
8133: LD_INT 21
8135: PUSH
8136: LD_INT 22
8138: PUSH
8139: LD_INT 23
8141: PUSH
8142: LD_INT 25
8144: PUSH
8145: LD_INT 26
8147: PUSH
8148: LD_INT 30
8150: PUSH
8151: LD_INT 31
8153: PUSH
8154: LD_INT 32
8156: PUSH
8157: LD_INT 36
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: PUSH
8181: LD_INT 101
8183: PUSH
8184: LD_INT 102
8186: PUSH
8187: LD_INT 105
8189: PUSH
8190: LD_INT 106
8192: PUSH
8193: LD_INT 108
8195: PUSH
8196: LD_INT 109
8198: PUSH
8199: LD_INT 112
8201: PUSH
8202: LD_INT 116
8204: PUSH
8205: LD_INT 117
8207: PUSH
8208: LD_INT 118
8210: PUSH
8211: EMPTY
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: PUSH
8223: EMPTY
8224: LIST
8225: LIST
8226: ST_TO_ADDR
8227: GO 10750
8229: LD_INT 7
8231: DOUBLE
8232: EQUAL
8233: IFTRUE 8237
8235: GO 8349
8237: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8238: LD_ADDR_VAR 0 2
8242: PUSH
8243: LD_INT 2
8245: PUSH
8246: LD_INT 4
8248: PUSH
8249: LD_INT 5
8251: PUSH
8252: LD_INT 7
8254: PUSH
8255: LD_INT 11
8257: PUSH
8258: LD_INT 12
8260: PUSH
8261: LD_INT 15
8263: PUSH
8264: LD_INT 16
8266: PUSH
8267: LD_INT 20
8269: PUSH
8270: LD_INT 21
8272: PUSH
8273: LD_INT 22
8275: PUSH
8276: LD_INT 23
8278: PUSH
8279: LD_INT 25
8281: PUSH
8282: LD_INT 26
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: PUSH
8301: LD_INT 101
8303: PUSH
8304: LD_INT 102
8306: PUSH
8307: LD_INT 103
8309: PUSH
8310: LD_INT 105
8312: PUSH
8313: LD_INT 106
8315: PUSH
8316: LD_INT 108
8318: PUSH
8319: LD_INT 112
8321: PUSH
8322: LD_INT 116
8324: PUSH
8325: LD_INT 117
8327: PUSH
8328: LD_INT 118
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: ST_TO_ADDR
8347: GO 10750
8349: LD_INT 8
8351: DOUBLE
8352: EQUAL
8353: IFTRUE 8357
8355: GO 8497
8357: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8358: LD_ADDR_VAR 0 2
8362: PUSH
8363: LD_INT 2
8365: PUSH
8366: LD_INT 4
8368: PUSH
8369: LD_INT 5
8371: PUSH
8372: LD_INT 6
8374: PUSH
8375: LD_INT 7
8377: PUSH
8378: LD_INT 8
8380: PUSH
8381: LD_INT 11
8383: PUSH
8384: LD_INT 12
8386: PUSH
8387: LD_INT 15
8389: PUSH
8390: LD_INT 16
8392: PUSH
8393: LD_INT 20
8395: PUSH
8396: LD_INT 21
8398: PUSH
8399: LD_INT 22
8401: PUSH
8402: LD_INT 23
8404: PUSH
8405: LD_INT 25
8407: PUSH
8408: LD_INT 26
8410: PUSH
8411: LD_INT 30
8413: PUSH
8414: LD_INT 31
8416: PUSH
8417: LD_INT 32
8419: PUSH
8420: LD_INT 36
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: LIST
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: PUSH
8445: LD_INT 101
8447: PUSH
8448: LD_INT 102
8450: PUSH
8451: LD_INT 103
8453: PUSH
8454: LD_INT 105
8456: PUSH
8457: LD_INT 106
8459: PUSH
8460: LD_INT 108
8462: PUSH
8463: LD_INT 109
8465: PUSH
8466: LD_INT 112
8468: PUSH
8469: LD_INT 116
8471: PUSH
8472: LD_INT 117
8474: PUSH
8475: LD_INT 118
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: PUSH
8491: EMPTY
8492: LIST
8493: LIST
8494: ST_TO_ADDR
8495: GO 10750
8497: LD_INT 9
8499: DOUBLE
8500: EQUAL
8501: IFTRUE 8505
8503: GO 8653
8505: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8506: LD_ADDR_VAR 0 2
8510: PUSH
8511: LD_INT 2
8513: PUSH
8514: LD_INT 4
8516: PUSH
8517: LD_INT 5
8519: PUSH
8520: LD_INT 6
8522: PUSH
8523: LD_INT 7
8525: PUSH
8526: LD_INT 8
8528: PUSH
8529: LD_INT 11
8531: PUSH
8532: LD_INT 12
8534: PUSH
8535: LD_INT 15
8537: PUSH
8538: LD_INT 16
8540: PUSH
8541: LD_INT 20
8543: PUSH
8544: LD_INT 21
8546: PUSH
8547: LD_INT 22
8549: PUSH
8550: LD_INT 23
8552: PUSH
8553: LD_INT 25
8555: PUSH
8556: LD_INT 26
8558: PUSH
8559: LD_INT 28
8561: PUSH
8562: LD_INT 30
8564: PUSH
8565: LD_INT 31
8567: PUSH
8568: LD_INT 32
8570: PUSH
8571: LD_INT 36
8573: PUSH
8574: EMPTY
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: PUSH
8597: LD_INT 101
8599: PUSH
8600: LD_INT 102
8602: PUSH
8603: LD_INT 103
8605: PUSH
8606: LD_INT 105
8608: PUSH
8609: LD_INT 106
8611: PUSH
8612: LD_INT 108
8614: PUSH
8615: LD_INT 109
8617: PUSH
8618: LD_INT 112
8620: PUSH
8621: LD_INT 114
8623: PUSH
8624: LD_INT 116
8626: PUSH
8627: LD_INT 117
8629: PUSH
8630: LD_INT 118
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: ST_TO_ADDR
8651: GO 10750
8653: LD_INT 10
8655: DOUBLE
8656: EQUAL
8657: IFTRUE 8661
8659: GO 8857
8661: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8662: LD_ADDR_VAR 0 2
8666: PUSH
8667: LD_INT 2
8669: PUSH
8670: LD_INT 4
8672: PUSH
8673: LD_INT 5
8675: PUSH
8676: LD_INT 6
8678: PUSH
8679: LD_INT 7
8681: PUSH
8682: LD_INT 8
8684: PUSH
8685: LD_INT 9
8687: PUSH
8688: LD_INT 10
8690: PUSH
8691: LD_INT 11
8693: PUSH
8694: LD_INT 12
8696: PUSH
8697: LD_INT 13
8699: PUSH
8700: LD_INT 14
8702: PUSH
8703: LD_INT 15
8705: PUSH
8706: LD_INT 16
8708: PUSH
8709: LD_INT 17
8711: PUSH
8712: LD_INT 18
8714: PUSH
8715: LD_INT 19
8717: PUSH
8718: LD_INT 20
8720: PUSH
8721: LD_INT 21
8723: PUSH
8724: LD_INT 22
8726: PUSH
8727: LD_INT 23
8729: PUSH
8730: LD_INT 24
8732: PUSH
8733: LD_INT 25
8735: PUSH
8736: LD_INT 26
8738: PUSH
8739: LD_INT 28
8741: PUSH
8742: LD_INT 30
8744: PUSH
8745: LD_INT 31
8747: PUSH
8748: LD_INT 32
8750: PUSH
8751: LD_INT 36
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: LIST
8782: LIST
8783: LIST
8784: PUSH
8785: LD_INT 101
8787: PUSH
8788: LD_INT 102
8790: PUSH
8791: LD_INT 103
8793: PUSH
8794: LD_INT 104
8796: PUSH
8797: LD_INT 105
8799: PUSH
8800: LD_INT 106
8802: PUSH
8803: LD_INT 107
8805: PUSH
8806: LD_INT 108
8808: PUSH
8809: LD_INT 109
8811: PUSH
8812: LD_INT 110
8814: PUSH
8815: LD_INT 111
8817: PUSH
8818: LD_INT 112
8820: PUSH
8821: LD_INT 114
8823: PUSH
8824: LD_INT 116
8826: PUSH
8827: LD_INT 117
8829: PUSH
8830: LD_INT 118
8832: PUSH
8833: EMPTY
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: PUSH
8851: EMPTY
8852: LIST
8853: LIST
8854: ST_TO_ADDR
8855: GO 10750
8857: LD_INT 11
8859: DOUBLE
8860: EQUAL
8861: IFTRUE 8865
8863: GO 9069
8865: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8866: LD_ADDR_VAR 0 2
8870: PUSH
8871: LD_INT 2
8873: PUSH
8874: LD_INT 3
8876: PUSH
8877: LD_INT 4
8879: PUSH
8880: LD_INT 5
8882: PUSH
8883: LD_INT 6
8885: PUSH
8886: LD_INT 7
8888: PUSH
8889: LD_INT 8
8891: PUSH
8892: LD_INT 9
8894: PUSH
8895: LD_INT 10
8897: PUSH
8898: LD_INT 11
8900: PUSH
8901: LD_INT 12
8903: PUSH
8904: LD_INT 13
8906: PUSH
8907: LD_INT 14
8909: PUSH
8910: LD_INT 15
8912: PUSH
8913: LD_INT 16
8915: PUSH
8916: LD_INT 17
8918: PUSH
8919: LD_INT 18
8921: PUSH
8922: LD_INT 19
8924: PUSH
8925: LD_INT 20
8927: PUSH
8928: LD_INT 21
8930: PUSH
8931: LD_INT 22
8933: PUSH
8934: LD_INT 23
8936: PUSH
8937: LD_INT 24
8939: PUSH
8940: LD_INT 25
8942: PUSH
8943: LD_INT 26
8945: PUSH
8946: LD_INT 28
8948: PUSH
8949: LD_INT 30
8951: PUSH
8952: LD_INT 31
8954: PUSH
8955: LD_INT 32
8957: PUSH
8958: LD_INT 34
8960: PUSH
8961: LD_INT 36
8963: PUSH
8964: EMPTY
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: PUSH
8997: LD_INT 101
8999: PUSH
9000: LD_INT 102
9002: PUSH
9003: LD_INT 103
9005: PUSH
9006: LD_INT 104
9008: PUSH
9009: LD_INT 105
9011: PUSH
9012: LD_INT 106
9014: PUSH
9015: LD_INT 107
9017: PUSH
9018: LD_INT 108
9020: PUSH
9021: LD_INT 109
9023: PUSH
9024: LD_INT 110
9026: PUSH
9027: LD_INT 111
9029: PUSH
9030: LD_INT 112
9032: PUSH
9033: LD_INT 114
9035: PUSH
9036: LD_INT 116
9038: PUSH
9039: LD_INT 117
9041: PUSH
9042: LD_INT 118
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: PUSH
9063: EMPTY
9064: LIST
9065: LIST
9066: ST_TO_ADDR
9067: GO 10750
9069: LD_INT 12
9071: DOUBLE
9072: EQUAL
9073: IFTRUE 9077
9075: GO 9297
9077: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
9078: LD_ADDR_VAR 0 2
9082: PUSH
9083: LD_INT 1
9085: PUSH
9086: LD_INT 2
9088: PUSH
9089: LD_INT 3
9091: PUSH
9092: LD_INT 4
9094: PUSH
9095: LD_INT 5
9097: PUSH
9098: LD_INT 6
9100: PUSH
9101: LD_INT 7
9103: PUSH
9104: LD_INT 8
9106: PUSH
9107: LD_INT 9
9109: PUSH
9110: LD_INT 10
9112: PUSH
9113: LD_INT 11
9115: PUSH
9116: LD_INT 12
9118: PUSH
9119: LD_INT 13
9121: PUSH
9122: LD_INT 14
9124: PUSH
9125: LD_INT 15
9127: PUSH
9128: LD_INT 16
9130: PUSH
9131: LD_INT 17
9133: PUSH
9134: LD_INT 18
9136: PUSH
9137: LD_INT 19
9139: PUSH
9140: LD_INT 20
9142: PUSH
9143: LD_INT 21
9145: PUSH
9146: LD_INT 22
9148: PUSH
9149: LD_INT 23
9151: PUSH
9152: LD_INT 24
9154: PUSH
9155: LD_INT 25
9157: PUSH
9158: LD_INT 26
9160: PUSH
9161: LD_INT 27
9163: PUSH
9164: LD_INT 28
9166: PUSH
9167: LD_INT 30
9169: PUSH
9170: LD_INT 31
9172: PUSH
9173: LD_INT 32
9175: PUSH
9176: LD_INT 33
9178: PUSH
9179: LD_INT 34
9181: PUSH
9182: LD_INT 36
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: PUSH
9221: LD_INT 101
9223: PUSH
9224: LD_INT 102
9226: PUSH
9227: LD_INT 103
9229: PUSH
9230: LD_INT 104
9232: PUSH
9233: LD_INT 105
9235: PUSH
9236: LD_INT 106
9238: PUSH
9239: LD_INT 107
9241: PUSH
9242: LD_INT 108
9244: PUSH
9245: LD_INT 109
9247: PUSH
9248: LD_INT 110
9250: PUSH
9251: LD_INT 111
9253: PUSH
9254: LD_INT 112
9256: PUSH
9257: LD_INT 113
9259: PUSH
9260: LD_INT 114
9262: PUSH
9263: LD_INT 116
9265: PUSH
9266: LD_INT 117
9268: PUSH
9269: LD_INT 118
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: ST_TO_ADDR
9295: GO 10750
9297: LD_INT 13
9299: DOUBLE
9300: EQUAL
9301: IFTRUE 9305
9303: GO 9513
9305: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9306: LD_ADDR_VAR 0 2
9310: PUSH
9311: LD_INT 1
9313: PUSH
9314: LD_INT 2
9316: PUSH
9317: LD_INT 3
9319: PUSH
9320: LD_INT 4
9322: PUSH
9323: LD_INT 5
9325: PUSH
9326: LD_INT 8
9328: PUSH
9329: LD_INT 9
9331: PUSH
9332: LD_INT 10
9334: PUSH
9335: LD_INT 11
9337: PUSH
9338: LD_INT 12
9340: PUSH
9341: LD_INT 14
9343: PUSH
9344: LD_INT 15
9346: PUSH
9347: LD_INT 16
9349: PUSH
9350: LD_INT 17
9352: PUSH
9353: LD_INT 18
9355: PUSH
9356: LD_INT 19
9358: PUSH
9359: LD_INT 20
9361: PUSH
9362: LD_INT 21
9364: PUSH
9365: LD_INT 22
9367: PUSH
9368: LD_INT 23
9370: PUSH
9371: LD_INT 24
9373: PUSH
9374: LD_INT 25
9376: PUSH
9377: LD_INT 26
9379: PUSH
9380: LD_INT 27
9382: PUSH
9383: LD_INT 28
9385: PUSH
9386: LD_INT 30
9388: PUSH
9389: LD_INT 31
9391: PUSH
9392: LD_INT 32
9394: PUSH
9395: LD_INT 33
9397: PUSH
9398: LD_INT 34
9400: PUSH
9401: LD_INT 36
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: PUSH
9437: LD_INT 101
9439: PUSH
9440: LD_INT 102
9442: PUSH
9443: LD_INT 103
9445: PUSH
9446: LD_INT 104
9448: PUSH
9449: LD_INT 105
9451: PUSH
9452: LD_INT 106
9454: PUSH
9455: LD_INT 107
9457: PUSH
9458: LD_INT 108
9460: PUSH
9461: LD_INT 109
9463: PUSH
9464: LD_INT 110
9466: PUSH
9467: LD_INT 111
9469: PUSH
9470: LD_INT 112
9472: PUSH
9473: LD_INT 113
9475: PUSH
9476: LD_INT 114
9478: PUSH
9479: LD_INT 116
9481: PUSH
9482: LD_INT 117
9484: PUSH
9485: LD_INT 118
9487: PUSH
9488: EMPTY
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: ST_TO_ADDR
9511: GO 10750
9513: LD_INT 14
9515: DOUBLE
9516: EQUAL
9517: IFTRUE 9521
9519: GO 9745
9521: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9522: LD_ADDR_VAR 0 2
9526: PUSH
9527: LD_INT 1
9529: PUSH
9530: LD_INT 2
9532: PUSH
9533: LD_INT 3
9535: PUSH
9536: LD_INT 4
9538: PUSH
9539: LD_INT 5
9541: PUSH
9542: LD_INT 6
9544: PUSH
9545: LD_INT 7
9547: PUSH
9548: LD_INT 8
9550: PUSH
9551: LD_INT 9
9553: PUSH
9554: LD_INT 10
9556: PUSH
9557: LD_INT 11
9559: PUSH
9560: LD_INT 12
9562: PUSH
9563: LD_INT 13
9565: PUSH
9566: LD_INT 14
9568: PUSH
9569: LD_INT 15
9571: PUSH
9572: LD_INT 16
9574: PUSH
9575: LD_INT 17
9577: PUSH
9578: LD_INT 18
9580: PUSH
9581: LD_INT 19
9583: PUSH
9584: LD_INT 20
9586: PUSH
9587: LD_INT 21
9589: PUSH
9590: LD_INT 22
9592: PUSH
9593: LD_INT 23
9595: PUSH
9596: LD_INT 24
9598: PUSH
9599: LD_INT 25
9601: PUSH
9602: LD_INT 26
9604: PUSH
9605: LD_INT 27
9607: PUSH
9608: LD_INT 28
9610: PUSH
9611: LD_INT 29
9613: PUSH
9614: LD_INT 30
9616: PUSH
9617: LD_INT 31
9619: PUSH
9620: LD_INT 32
9622: PUSH
9623: LD_INT 33
9625: PUSH
9626: LD_INT 34
9628: PUSH
9629: LD_INT 36
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: PUSH
9669: LD_INT 101
9671: PUSH
9672: LD_INT 102
9674: PUSH
9675: LD_INT 103
9677: PUSH
9678: LD_INT 104
9680: PUSH
9681: LD_INT 105
9683: PUSH
9684: LD_INT 106
9686: PUSH
9687: LD_INT 107
9689: PUSH
9690: LD_INT 108
9692: PUSH
9693: LD_INT 109
9695: PUSH
9696: LD_INT 110
9698: PUSH
9699: LD_INT 111
9701: PUSH
9702: LD_INT 112
9704: PUSH
9705: LD_INT 113
9707: PUSH
9708: LD_INT 114
9710: PUSH
9711: LD_INT 116
9713: PUSH
9714: LD_INT 117
9716: PUSH
9717: LD_INT 118
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: ST_TO_ADDR
9743: GO 10750
9745: LD_INT 15
9747: DOUBLE
9748: EQUAL
9749: IFTRUE 9753
9751: GO 9977
9753: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9754: LD_ADDR_VAR 0 2
9758: PUSH
9759: LD_INT 1
9761: PUSH
9762: LD_INT 2
9764: PUSH
9765: LD_INT 3
9767: PUSH
9768: LD_INT 4
9770: PUSH
9771: LD_INT 5
9773: PUSH
9774: LD_INT 6
9776: PUSH
9777: LD_INT 7
9779: PUSH
9780: LD_INT 8
9782: PUSH
9783: LD_INT 9
9785: PUSH
9786: LD_INT 10
9788: PUSH
9789: LD_INT 11
9791: PUSH
9792: LD_INT 12
9794: PUSH
9795: LD_INT 13
9797: PUSH
9798: LD_INT 14
9800: PUSH
9801: LD_INT 15
9803: PUSH
9804: LD_INT 16
9806: PUSH
9807: LD_INT 17
9809: PUSH
9810: LD_INT 18
9812: PUSH
9813: LD_INT 19
9815: PUSH
9816: LD_INT 20
9818: PUSH
9819: LD_INT 21
9821: PUSH
9822: LD_INT 22
9824: PUSH
9825: LD_INT 23
9827: PUSH
9828: LD_INT 24
9830: PUSH
9831: LD_INT 25
9833: PUSH
9834: LD_INT 26
9836: PUSH
9837: LD_INT 27
9839: PUSH
9840: LD_INT 28
9842: PUSH
9843: LD_INT 29
9845: PUSH
9846: LD_INT 30
9848: PUSH
9849: LD_INT 31
9851: PUSH
9852: LD_INT 32
9854: PUSH
9855: LD_INT 33
9857: PUSH
9858: LD_INT 34
9860: PUSH
9861: LD_INT 36
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: PUSH
9901: LD_INT 101
9903: PUSH
9904: LD_INT 102
9906: PUSH
9907: LD_INT 103
9909: PUSH
9910: LD_INT 104
9912: PUSH
9913: LD_INT 105
9915: PUSH
9916: LD_INT 106
9918: PUSH
9919: LD_INT 107
9921: PUSH
9922: LD_INT 108
9924: PUSH
9925: LD_INT 109
9927: PUSH
9928: LD_INT 110
9930: PUSH
9931: LD_INT 111
9933: PUSH
9934: LD_INT 112
9936: PUSH
9937: LD_INT 113
9939: PUSH
9940: LD_INT 114
9942: PUSH
9943: LD_INT 116
9945: PUSH
9946: LD_INT 117
9948: PUSH
9949: LD_INT 118
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: ST_TO_ADDR
9975: GO 10750
9977: LD_INT 16
9979: DOUBLE
9980: EQUAL
9981: IFTRUE 9985
9983: GO 10121
9985: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9986: LD_ADDR_VAR 0 2
9990: PUSH
9991: LD_INT 2
9993: PUSH
9994: LD_INT 4
9996: PUSH
9997: LD_INT 5
9999: PUSH
10000: LD_INT 7
10002: PUSH
10003: LD_INT 11
10005: PUSH
10006: LD_INT 12
10008: PUSH
10009: LD_INT 15
10011: PUSH
10012: LD_INT 16
10014: PUSH
10015: LD_INT 20
10017: PUSH
10018: LD_INT 21
10020: PUSH
10021: LD_INT 22
10023: PUSH
10024: LD_INT 23
10026: PUSH
10027: LD_INT 25
10029: PUSH
10030: LD_INT 26
10032: PUSH
10033: LD_INT 30
10035: PUSH
10036: LD_INT 31
10038: PUSH
10039: LD_INT 32
10041: PUSH
10042: LD_INT 33
10044: PUSH
10045: LD_INT 34
10047: PUSH
10048: EMPTY
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: PUSH
10069: LD_INT 101
10071: PUSH
10072: LD_INT 102
10074: PUSH
10075: LD_INT 103
10077: PUSH
10078: LD_INT 106
10080: PUSH
10081: LD_INT 108
10083: PUSH
10084: LD_INT 112
10086: PUSH
10087: LD_INT 113
10089: PUSH
10090: LD_INT 114
10092: PUSH
10093: LD_INT 116
10095: PUSH
10096: LD_INT 117
10098: PUSH
10099: LD_INT 118
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: ST_TO_ADDR
10119: GO 10750
10121: LD_INT 17
10123: DOUBLE
10124: EQUAL
10125: IFTRUE 10129
10127: GO 10353
10129: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
10130: LD_ADDR_VAR 0 2
10134: PUSH
10135: LD_INT 1
10137: PUSH
10138: LD_INT 2
10140: PUSH
10141: LD_INT 3
10143: PUSH
10144: LD_INT 4
10146: PUSH
10147: LD_INT 5
10149: PUSH
10150: LD_INT 6
10152: PUSH
10153: LD_INT 7
10155: PUSH
10156: LD_INT 8
10158: PUSH
10159: LD_INT 9
10161: PUSH
10162: LD_INT 10
10164: PUSH
10165: LD_INT 11
10167: PUSH
10168: LD_INT 12
10170: PUSH
10171: LD_INT 13
10173: PUSH
10174: LD_INT 14
10176: PUSH
10177: LD_INT 15
10179: PUSH
10180: LD_INT 16
10182: PUSH
10183: LD_INT 17
10185: PUSH
10186: LD_INT 18
10188: PUSH
10189: LD_INT 19
10191: PUSH
10192: LD_INT 20
10194: PUSH
10195: LD_INT 21
10197: PUSH
10198: LD_INT 22
10200: PUSH
10201: LD_INT 23
10203: PUSH
10204: LD_INT 24
10206: PUSH
10207: LD_INT 25
10209: PUSH
10210: LD_INT 26
10212: PUSH
10213: LD_INT 27
10215: PUSH
10216: LD_INT 28
10218: PUSH
10219: LD_INT 29
10221: PUSH
10222: LD_INT 30
10224: PUSH
10225: LD_INT 31
10227: PUSH
10228: LD_INT 32
10230: PUSH
10231: LD_INT 33
10233: PUSH
10234: LD_INT 34
10236: PUSH
10237: LD_INT 36
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: PUSH
10277: LD_INT 101
10279: PUSH
10280: LD_INT 102
10282: PUSH
10283: LD_INT 103
10285: PUSH
10286: LD_INT 104
10288: PUSH
10289: LD_INT 105
10291: PUSH
10292: LD_INT 106
10294: PUSH
10295: LD_INT 107
10297: PUSH
10298: LD_INT 108
10300: PUSH
10301: LD_INT 109
10303: PUSH
10304: LD_INT 110
10306: PUSH
10307: LD_INT 111
10309: PUSH
10310: LD_INT 112
10312: PUSH
10313: LD_INT 113
10315: PUSH
10316: LD_INT 114
10318: PUSH
10319: LD_INT 116
10321: PUSH
10322: LD_INT 117
10324: PUSH
10325: LD_INT 118
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: ST_TO_ADDR
10351: GO 10750
10353: LD_INT 18
10355: DOUBLE
10356: EQUAL
10357: IFTRUE 10361
10359: GO 10509
10361: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10362: LD_ADDR_VAR 0 2
10366: PUSH
10367: LD_INT 2
10369: PUSH
10370: LD_INT 4
10372: PUSH
10373: LD_INT 5
10375: PUSH
10376: LD_INT 7
10378: PUSH
10379: LD_INT 11
10381: PUSH
10382: LD_INT 12
10384: PUSH
10385: LD_INT 15
10387: PUSH
10388: LD_INT 16
10390: PUSH
10391: LD_INT 20
10393: PUSH
10394: LD_INT 21
10396: PUSH
10397: LD_INT 22
10399: PUSH
10400: LD_INT 23
10402: PUSH
10403: LD_INT 25
10405: PUSH
10406: LD_INT 26
10408: PUSH
10409: LD_INT 30
10411: PUSH
10412: LD_INT 31
10414: PUSH
10415: LD_INT 32
10417: PUSH
10418: LD_INT 33
10420: PUSH
10421: LD_INT 34
10423: PUSH
10424: LD_INT 35
10426: PUSH
10427: LD_INT 36
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: PUSH
10453: LD_INT 101
10455: PUSH
10456: LD_INT 102
10458: PUSH
10459: LD_INT 103
10461: PUSH
10462: LD_INT 106
10464: PUSH
10465: LD_INT 108
10467: PUSH
10468: LD_INT 112
10470: PUSH
10471: LD_INT 113
10473: PUSH
10474: LD_INT 114
10476: PUSH
10477: LD_INT 115
10479: PUSH
10480: LD_INT 116
10482: PUSH
10483: LD_INT 117
10485: PUSH
10486: LD_INT 118
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: ST_TO_ADDR
10507: GO 10750
10509: LD_INT 19
10511: DOUBLE
10512: EQUAL
10513: IFTRUE 10517
10515: GO 10749
10517: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10518: LD_ADDR_VAR 0 2
10522: PUSH
10523: LD_INT 1
10525: PUSH
10526: LD_INT 2
10528: PUSH
10529: LD_INT 3
10531: PUSH
10532: LD_INT 4
10534: PUSH
10535: LD_INT 5
10537: PUSH
10538: LD_INT 6
10540: PUSH
10541: LD_INT 7
10543: PUSH
10544: LD_INT 8
10546: PUSH
10547: LD_INT 9
10549: PUSH
10550: LD_INT 10
10552: PUSH
10553: LD_INT 11
10555: PUSH
10556: LD_INT 12
10558: PUSH
10559: LD_INT 13
10561: PUSH
10562: LD_INT 14
10564: PUSH
10565: LD_INT 15
10567: PUSH
10568: LD_INT 16
10570: PUSH
10571: LD_INT 17
10573: PUSH
10574: LD_INT 18
10576: PUSH
10577: LD_INT 19
10579: PUSH
10580: LD_INT 20
10582: PUSH
10583: LD_INT 21
10585: PUSH
10586: LD_INT 22
10588: PUSH
10589: LD_INT 23
10591: PUSH
10592: LD_INT 24
10594: PUSH
10595: LD_INT 25
10597: PUSH
10598: LD_INT 26
10600: PUSH
10601: LD_INT 27
10603: PUSH
10604: LD_INT 28
10606: PUSH
10607: LD_INT 29
10609: PUSH
10610: LD_INT 30
10612: PUSH
10613: LD_INT 31
10615: PUSH
10616: LD_INT 32
10618: PUSH
10619: LD_INT 33
10621: PUSH
10622: LD_INT 34
10624: PUSH
10625: LD_INT 35
10627: PUSH
10628: LD_INT 36
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: PUSH
10669: LD_INT 101
10671: PUSH
10672: LD_INT 102
10674: PUSH
10675: LD_INT 103
10677: PUSH
10678: LD_INT 104
10680: PUSH
10681: LD_INT 105
10683: PUSH
10684: LD_INT 106
10686: PUSH
10687: LD_INT 107
10689: PUSH
10690: LD_INT 108
10692: PUSH
10693: LD_INT 109
10695: PUSH
10696: LD_INT 110
10698: PUSH
10699: LD_INT 111
10701: PUSH
10702: LD_INT 112
10704: PUSH
10705: LD_INT 113
10707: PUSH
10708: LD_INT 114
10710: PUSH
10711: LD_INT 115
10713: PUSH
10714: LD_INT 116
10716: PUSH
10717: LD_INT 117
10719: PUSH
10720: LD_INT 118
10722: PUSH
10723: EMPTY
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: ST_TO_ADDR
10747: GO 10750
10749: POP
// end else
10750: GO 10981
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10752: LD_ADDR_VAR 0 2
10756: PUSH
10757: LD_INT 1
10759: PUSH
10760: LD_INT 2
10762: PUSH
10763: LD_INT 3
10765: PUSH
10766: LD_INT 4
10768: PUSH
10769: LD_INT 5
10771: PUSH
10772: LD_INT 6
10774: PUSH
10775: LD_INT 7
10777: PUSH
10778: LD_INT 8
10780: PUSH
10781: LD_INT 9
10783: PUSH
10784: LD_INT 10
10786: PUSH
10787: LD_INT 11
10789: PUSH
10790: LD_INT 12
10792: PUSH
10793: LD_INT 13
10795: PUSH
10796: LD_INT 14
10798: PUSH
10799: LD_INT 15
10801: PUSH
10802: LD_INT 16
10804: PUSH
10805: LD_INT 17
10807: PUSH
10808: LD_INT 18
10810: PUSH
10811: LD_INT 19
10813: PUSH
10814: LD_INT 20
10816: PUSH
10817: LD_INT 21
10819: PUSH
10820: LD_INT 22
10822: PUSH
10823: LD_INT 23
10825: PUSH
10826: LD_INT 24
10828: PUSH
10829: LD_INT 25
10831: PUSH
10832: LD_INT 26
10834: PUSH
10835: LD_INT 27
10837: PUSH
10838: LD_INT 28
10840: PUSH
10841: LD_INT 29
10843: PUSH
10844: LD_INT 30
10846: PUSH
10847: LD_INT 31
10849: PUSH
10850: LD_INT 32
10852: PUSH
10853: LD_INT 33
10855: PUSH
10856: LD_INT 34
10858: PUSH
10859: LD_INT 35
10861: PUSH
10862: LD_INT 36
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: PUSH
10903: LD_INT 101
10905: PUSH
10906: LD_INT 102
10908: PUSH
10909: LD_INT 103
10911: PUSH
10912: LD_INT 104
10914: PUSH
10915: LD_INT 105
10917: PUSH
10918: LD_INT 106
10920: PUSH
10921: LD_INT 107
10923: PUSH
10924: LD_INT 108
10926: PUSH
10927: LD_INT 109
10929: PUSH
10930: LD_INT 110
10932: PUSH
10933: LD_INT 111
10935: PUSH
10936: LD_INT 112
10938: PUSH
10939: LD_INT 113
10941: PUSH
10942: LD_INT 114
10944: PUSH
10945: LD_INT 115
10947: PUSH
10948: LD_INT 116
10950: PUSH
10951: LD_INT 117
10953: PUSH
10954: LD_INT 118
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: ST_TO_ADDR
// if result then
10981: LD_VAR 0 2
10985: IFFALSE 11771
// begin normal :=  ;
10987: LD_ADDR_VAR 0 5
10991: PUSH
10992: LD_STRING 
10994: ST_TO_ADDR
// hardcore :=  ;
10995: LD_ADDR_VAR 0 6
10999: PUSH
11000: LD_STRING 
11002: ST_TO_ADDR
// active :=  ;
11003: LD_ADDR_VAR 0 7
11007: PUSH
11008: LD_STRING 
11010: ST_TO_ADDR
// for i = 1 to normalCounter do
11011: LD_ADDR_VAR 0 8
11015: PUSH
11016: DOUBLE
11017: LD_INT 1
11019: DEC
11020: ST_TO_ADDR
11021: LD_EXP 26
11025: PUSH
11026: FOR_TO
11027: IFFALSE 11128
// begin tmp := 0 ;
11029: LD_ADDR_VAR 0 3
11033: PUSH
11034: LD_STRING 0
11036: ST_TO_ADDR
// if result [ 1 ] then
11037: LD_VAR 0 2
11041: PUSH
11042: LD_INT 1
11044: ARRAY
11045: IFFALSE 11110
// if result [ 1 ] [ 1 ] = i then
11047: LD_VAR 0 2
11051: PUSH
11052: LD_INT 1
11054: ARRAY
11055: PUSH
11056: LD_INT 1
11058: ARRAY
11059: PUSH
11060: LD_VAR 0 8
11064: EQUAL
11065: IFFALSE 11110
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11067: LD_ADDR_VAR 0 2
11071: PUSH
11072: LD_VAR 0 2
11076: PPUSH
11077: LD_INT 1
11079: PPUSH
11080: LD_VAR 0 2
11084: PUSH
11085: LD_INT 1
11087: ARRAY
11088: PPUSH
11089: LD_INT 1
11091: PPUSH
11092: CALL_OW 3
11096: PPUSH
11097: CALL_OW 1
11101: ST_TO_ADDR
// tmp := 1 ;
11102: LD_ADDR_VAR 0 3
11106: PUSH
11107: LD_STRING 1
11109: ST_TO_ADDR
// end ; normal := normal & tmp ;
11110: LD_ADDR_VAR 0 5
11114: PUSH
11115: LD_VAR 0 5
11119: PUSH
11120: LD_VAR 0 3
11124: STR
11125: ST_TO_ADDR
// end ;
11126: GO 11026
11128: POP
11129: POP
// for i = 1 to hardcoreCounter do
11130: LD_ADDR_VAR 0 8
11134: PUSH
11135: DOUBLE
11136: LD_INT 1
11138: DEC
11139: ST_TO_ADDR
11140: LD_EXP 27
11144: PUSH
11145: FOR_TO
11146: IFFALSE 11251
// begin tmp := 0 ;
11148: LD_ADDR_VAR 0 3
11152: PUSH
11153: LD_STRING 0
11155: ST_TO_ADDR
// if result [ 2 ] then
11156: LD_VAR 0 2
11160: PUSH
11161: LD_INT 2
11163: ARRAY
11164: IFFALSE 11233
// if result [ 2 ] [ 1 ] = 100 + i then
11166: LD_VAR 0 2
11170: PUSH
11171: LD_INT 2
11173: ARRAY
11174: PUSH
11175: LD_INT 1
11177: ARRAY
11178: PUSH
11179: LD_INT 100
11181: PUSH
11182: LD_VAR 0 8
11186: PLUS
11187: EQUAL
11188: IFFALSE 11233
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11190: LD_ADDR_VAR 0 2
11194: PUSH
11195: LD_VAR 0 2
11199: PPUSH
11200: LD_INT 2
11202: PPUSH
11203: LD_VAR 0 2
11207: PUSH
11208: LD_INT 2
11210: ARRAY
11211: PPUSH
11212: LD_INT 1
11214: PPUSH
11215: CALL_OW 3
11219: PPUSH
11220: CALL_OW 1
11224: ST_TO_ADDR
// tmp := 1 ;
11225: LD_ADDR_VAR 0 3
11229: PUSH
11230: LD_STRING 1
11232: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11233: LD_ADDR_VAR 0 6
11237: PUSH
11238: LD_VAR 0 6
11242: PUSH
11243: LD_VAR 0 3
11247: STR
11248: ST_TO_ADDR
// end ;
11249: GO 11145
11251: POP
11252: POP
// if isGameLoad then
11253: LD_VAR 0 1
11257: IFFALSE 11732
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
11259: LD_ADDR_VAR 0 4
11263: PUSH
11264: LD_EXP 30
11268: PUSH
11269: LD_EXP 29
11273: PUSH
11274: LD_EXP 31
11278: PUSH
11279: LD_EXP 28
11283: PUSH
11284: LD_EXP 32
11288: PUSH
11289: LD_EXP 33
11293: PUSH
11294: LD_EXP 34
11298: PUSH
11299: LD_EXP 35
11303: PUSH
11304: LD_EXP 36
11308: PUSH
11309: LD_EXP 37
11313: PUSH
11314: LD_EXP 38
11318: PUSH
11319: LD_EXP 39
11323: PUSH
11324: LD_EXP 40
11328: PUSH
11329: LD_EXP 41
11333: PUSH
11334: LD_EXP 49
11338: PUSH
11339: LD_EXP 50
11343: PUSH
11344: LD_EXP 51
11348: PUSH
11349: LD_EXP 52
11353: PUSH
11354: LD_EXP 54
11358: PUSH
11359: LD_EXP 55
11363: PUSH
11364: LD_EXP 56
11368: PUSH
11369: LD_EXP 59
11373: PUSH
11374: LD_EXP 61
11378: PUSH
11379: LD_EXP 62
11383: PUSH
11384: LD_EXP 63
11388: PUSH
11389: LD_EXP 65
11393: PUSH
11394: LD_EXP 66
11398: PUSH
11399: LD_EXP 69
11403: PUSH
11404: LD_EXP 70
11408: PUSH
11409: LD_EXP 71
11413: PUSH
11414: LD_EXP 72
11418: PUSH
11419: LD_EXP 73
11423: PUSH
11424: LD_EXP 74
11428: PUSH
11429: LD_EXP 75
11433: PUSH
11434: LD_EXP 76
11438: PUSH
11439: LD_EXP 77
11443: PUSH
11444: LD_EXP 42
11448: PUSH
11449: LD_EXP 43
11453: PUSH
11454: LD_EXP 46
11458: PUSH
11459: LD_EXP 47
11463: PUSH
11464: LD_EXP 48
11468: PUSH
11469: LD_EXP 44
11473: PUSH
11474: LD_EXP 45
11478: PUSH
11479: LD_EXP 53
11483: PUSH
11484: LD_EXP 57
11488: PUSH
11489: LD_EXP 58
11493: PUSH
11494: LD_EXP 60
11498: PUSH
11499: LD_EXP 64
11503: PUSH
11504: LD_EXP 67
11508: PUSH
11509: LD_EXP 68
11513: PUSH
11514: LD_EXP 78
11518: PUSH
11519: LD_EXP 79
11523: PUSH
11524: LD_EXP 80
11528: PUSH
11529: LD_EXP 81
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: ST_TO_ADDR
// tmp :=  ;
11590: LD_ADDR_VAR 0 3
11594: PUSH
11595: LD_STRING 
11597: ST_TO_ADDR
// for i = 1 to normalCounter do
11598: LD_ADDR_VAR 0 8
11602: PUSH
11603: DOUBLE
11604: LD_INT 1
11606: DEC
11607: ST_TO_ADDR
11608: LD_EXP 26
11612: PUSH
11613: FOR_TO
11614: IFFALSE 11650
// begin if flags [ i ] then
11616: LD_VAR 0 4
11620: PUSH
11621: LD_VAR 0 8
11625: ARRAY
11626: IFFALSE 11648
// tmp := tmp & i & ; ;
11628: LD_ADDR_VAR 0 3
11632: PUSH
11633: LD_VAR 0 3
11637: PUSH
11638: LD_VAR 0 8
11642: STR
11643: PUSH
11644: LD_STRING ;
11646: STR
11647: ST_TO_ADDR
// end ;
11648: GO 11613
11650: POP
11651: POP
// for i = 1 to hardcoreCounter do
11652: LD_ADDR_VAR 0 8
11656: PUSH
11657: DOUBLE
11658: LD_INT 1
11660: DEC
11661: ST_TO_ADDR
11662: LD_EXP 27
11666: PUSH
11667: FOR_TO
11668: IFFALSE 11714
// begin if flags [ normalCounter + i ] then
11670: LD_VAR 0 4
11674: PUSH
11675: LD_EXP 26
11679: PUSH
11680: LD_VAR 0 8
11684: PLUS
11685: ARRAY
11686: IFFALSE 11712
// tmp := tmp & ( 100 + i ) & ; ;
11688: LD_ADDR_VAR 0 3
11692: PUSH
11693: LD_VAR 0 3
11697: PUSH
11698: LD_INT 100
11700: PUSH
11701: LD_VAR 0 8
11705: PLUS
11706: STR
11707: PUSH
11708: LD_STRING ;
11710: STR
11711: ST_TO_ADDR
// end ;
11712: GO 11667
11714: POP
11715: POP
// if tmp then
11716: LD_VAR 0 3
11720: IFFALSE 11732
// active := tmp ;
11722: LD_ADDR_VAR 0 7
11726: PUSH
11727: LD_VAR 0 3
11731: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11732: LD_STRING getStreamItemsFromMission("
11734: PUSH
11735: LD_VAR 0 5
11739: STR
11740: PUSH
11741: LD_STRING ","
11743: STR
11744: PUSH
11745: LD_VAR 0 6
11749: STR
11750: PUSH
11751: LD_STRING ","
11753: STR
11754: PUSH
11755: LD_VAR 0 7
11759: STR
11760: PUSH
11761: LD_STRING ")
11763: STR
11764: PPUSH
11765: CALL_OW 559
// end else
11769: GO 11778
// ToLua ( getStreamItemsFromMission("","","") ) ;
11771: LD_STRING getStreamItemsFromMission("","","")
11773: PPUSH
11774: CALL_OW 559
// end ;
11778: LD_VAR 0 2
11782: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11783: LD_EXP 25
11787: PUSH
11788: LD_EXP 30
11792: AND
11793: IFFALSE 11917
11795: GO 11797
11797: DISABLE
11798: LD_INT 0
11800: PPUSH
11801: PPUSH
// begin enable ;
11802: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11803: LD_ADDR_VAR 0 2
11807: PUSH
11808: LD_INT 22
11810: PUSH
11811: LD_OWVAR 2
11815: PUSH
11816: EMPTY
11817: LIST
11818: LIST
11819: PUSH
11820: LD_INT 2
11822: PUSH
11823: LD_INT 34
11825: PUSH
11826: LD_INT 7
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: PUSH
11833: LD_INT 34
11835: PUSH
11836: LD_INT 45
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: PUSH
11843: LD_INT 34
11845: PUSH
11846: LD_INT 28
11848: PUSH
11849: EMPTY
11850: LIST
11851: LIST
11852: PUSH
11853: LD_INT 34
11855: PUSH
11856: LD_INT 47
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: PPUSH
11874: CALL_OW 69
11878: ST_TO_ADDR
// if not tmp then
11879: LD_VAR 0 2
11883: NOT
11884: IFFALSE 11888
// exit ;
11886: GO 11917
// for i in tmp do
11888: LD_ADDR_VAR 0 1
11892: PUSH
11893: LD_VAR 0 2
11897: PUSH
11898: FOR_IN
11899: IFFALSE 11915
// begin SetLives ( i , 0 ) ;
11901: LD_VAR 0 1
11905: PPUSH
11906: LD_INT 0
11908: PPUSH
11909: CALL_OW 234
// end ;
11913: GO 11898
11915: POP
11916: POP
// end ;
11917: PPOPN 2
11919: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11920: LD_EXP 25
11924: PUSH
11925: LD_EXP 31
11929: AND
11930: IFFALSE 12014
11932: GO 11934
11934: DISABLE
11935: LD_INT 0
11937: PPUSH
11938: PPUSH
// begin enable ;
11939: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11940: LD_ADDR_VAR 0 2
11944: PUSH
11945: LD_INT 22
11947: PUSH
11948: LD_OWVAR 2
11952: PUSH
11953: EMPTY
11954: LIST
11955: LIST
11956: PUSH
11957: LD_INT 32
11959: PUSH
11960: LD_INT 3
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: PPUSH
11971: CALL_OW 69
11975: ST_TO_ADDR
// if not tmp then
11976: LD_VAR 0 2
11980: NOT
11981: IFFALSE 11985
// exit ;
11983: GO 12014
// for i in tmp do
11985: LD_ADDR_VAR 0 1
11989: PUSH
11990: LD_VAR 0 2
11994: PUSH
11995: FOR_IN
11996: IFFALSE 12012
// begin SetLives ( i , 0 ) ;
11998: LD_VAR 0 1
12002: PPUSH
12003: LD_INT 0
12005: PPUSH
12006: CALL_OW 234
// end ;
12010: GO 11995
12012: POP
12013: POP
// end ;
12014: PPOPN 2
12016: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12017: LD_EXP 25
12021: PUSH
12022: LD_EXP 28
12026: AND
12027: IFFALSE 12120
12029: GO 12031
12031: DISABLE
12032: LD_INT 0
12034: PPUSH
// begin enable ;
12035: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12036: LD_ADDR_VAR 0 1
12040: PUSH
12041: LD_INT 22
12043: PUSH
12044: LD_OWVAR 2
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PUSH
12053: LD_INT 2
12055: PUSH
12056: LD_INT 25
12058: PUSH
12059: LD_INT 5
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: PUSH
12066: LD_INT 25
12068: PUSH
12069: LD_INT 9
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: PUSH
12076: LD_INT 25
12078: PUSH
12079: LD_INT 8
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: PPUSH
12096: CALL_OW 69
12100: PUSH
12101: FOR_IN
12102: IFFALSE 12118
// begin SetClass ( i , 1 ) ;
12104: LD_VAR 0 1
12108: PPUSH
12109: LD_INT 1
12111: PPUSH
12112: CALL_OW 336
// end ;
12116: GO 12101
12118: POP
12119: POP
// end ;
12120: PPOPN 1
12122: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12123: LD_EXP 25
12127: PUSH
12128: LD_EXP 29
12132: AND
12133: PUSH
12134: LD_OWVAR 65
12138: PUSH
12139: LD_INT 7
12141: LESS
12142: AND
12143: IFFALSE 12157
12145: GO 12147
12147: DISABLE
// begin enable ;
12148: ENABLE
// game_speed := 7 ;
12149: LD_ADDR_OWVAR 65
12153: PUSH
12154: LD_INT 7
12156: ST_TO_ADDR
// end ;
12157: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12158: LD_EXP 25
12162: PUSH
12163: LD_EXP 32
12167: AND
12168: IFFALSE 12370
12170: GO 12172
12172: DISABLE
12173: LD_INT 0
12175: PPUSH
12176: PPUSH
12177: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12178: LD_ADDR_VAR 0 3
12182: PUSH
12183: LD_INT 81
12185: PUSH
12186: LD_OWVAR 2
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: PUSH
12195: LD_INT 21
12197: PUSH
12198: LD_INT 1
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: PPUSH
12209: CALL_OW 69
12213: ST_TO_ADDR
// if not tmp then
12214: LD_VAR 0 3
12218: NOT
12219: IFFALSE 12223
// exit ;
12221: GO 12370
// if tmp > 5 then
12223: LD_VAR 0 3
12227: PUSH
12228: LD_INT 5
12230: GREATER
12231: IFFALSE 12243
// k := 5 else
12233: LD_ADDR_VAR 0 2
12237: PUSH
12238: LD_INT 5
12240: ST_TO_ADDR
12241: GO 12253
// k := tmp ;
12243: LD_ADDR_VAR 0 2
12247: PUSH
12248: LD_VAR 0 3
12252: ST_TO_ADDR
// for i := 1 to k do
12253: LD_ADDR_VAR 0 1
12257: PUSH
12258: DOUBLE
12259: LD_INT 1
12261: DEC
12262: ST_TO_ADDR
12263: LD_VAR 0 2
12267: PUSH
12268: FOR_TO
12269: IFFALSE 12368
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12271: LD_VAR 0 3
12275: PUSH
12276: LD_VAR 0 1
12280: ARRAY
12281: PPUSH
12282: LD_VAR 0 1
12286: PUSH
12287: LD_INT 4
12289: MOD
12290: PUSH
12291: LD_INT 1
12293: PLUS
12294: PPUSH
12295: CALL_OW 259
12299: PUSH
12300: LD_INT 10
12302: LESS
12303: IFFALSE 12366
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12305: LD_VAR 0 3
12309: PUSH
12310: LD_VAR 0 1
12314: ARRAY
12315: PPUSH
12316: LD_VAR 0 1
12320: PUSH
12321: LD_INT 4
12323: MOD
12324: PUSH
12325: LD_INT 1
12327: PLUS
12328: PPUSH
12329: LD_VAR 0 3
12333: PUSH
12334: LD_VAR 0 1
12338: ARRAY
12339: PPUSH
12340: LD_VAR 0 1
12344: PUSH
12345: LD_INT 4
12347: MOD
12348: PUSH
12349: LD_INT 1
12351: PLUS
12352: PPUSH
12353: CALL_OW 259
12357: PUSH
12358: LD_INT 1
12360: PLUS
12361: PPUSH
12362: CALL_OW 237
12366: GO 12268
12368: POP
12369: POP
// end ;
12370: PPOPN 3
12372: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12373: LD_EXP 25
12377: PUSH
12378: LD_EXP 33
12382: AND
12383: IFFALSE 12403
12385: GO 12387
12387: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12388: LD_INT 4
12390: PPUSH
12391: LD_OWVAR 2
12395: PPUSH
12396: LD_INT 0
12398: PPUSH
12399: CALL_OW 324
12403: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12404: LD_EXP 25
12408: PUSH
12409: LD_EXP 62
12413: AND
12414: IFFALSE 12434
12416: GO 12418
12418: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12419: LD_INT 19
12421: PPUSH
12422: LD_OWVAR 2
12426: PPUSH
12427: LD_INT 0
12429: PPUSH
12430: CALL_OW 324
12434: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12435: LD_EXP 25
12439: PUSH
12440: LD_EXP 34
12444: AND
12445: IFFALSE 12547
12447: GO 12449
12449: DISABLE
12450: LD_INT 0
12452: PPUSH
12453: PPUSH
// begin enable ;
12454: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12455: LD_ADDR_VAR 0 2
12459: PUSH
12460: LD_INT 22
12462: PUSH
12463: LD_OWVAR 2
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: PUSH
12472: LD_INT 2
12474: PUSH
12475: LD_INT 34
12477: PUSH
12478: LD_INT 11
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: PUSH
12485: LD_INT 34
12487: PUSH
12488: LD_INT 30
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: LIST
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: PPUSH
12504: CALL_OW 69
12508: ST_TO_ADDR
// if not tmp then
12509: LD_VAR 0 2
12513: NOT
12514: IFFALSE 12518
// exit ;
12516: GO 12547
// for i in tmp do
12518: LD_ADDR_VAR 0 1
12522: PUSH
12523: LD_VAR 0 2
12527: PUSH
12528: FOR_IN
12529: IFFALSE 12545
// begin SetLives ( i , 0 ) ;
12531: LD_VAR 0 1
12535: PPUSH
12536: LD_INT 0
12538: PPUSH
12539: CALL_OW 234
// end ;
12543: GO 12528
12545: POP
12546: POP
// end ;
12547: PPOPN 2
12549: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12550: LD_EXP 25
12554: PUSH
12555: LD_EXP 35
12559: AND
12560: IFFALSE 12580
12562: GO 12564
12564: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12565: LD_INT 32
12567: PPUSH
12568: LD_OWVAR 2
12572: PPUSH
12573: LD_INT 0
12575: PPUSH
12576: CALL_OW 324
12580: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12581: LD_EXP 25
12585: PUSH
12586: LD_EXP 36
12590: AND
12591: IFFALSE 12772
12593: GO 12595
12595: DISABLE
12596: LD_INT 0
12598: PPUSH
12599: PPUSH
12600: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12601: LD_ADDR_VAR 0 2
12605: PUSH
12606: LD_INT 22
12608: PUSH
12609: LD_OWVAR 2
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: PUSH
12618: LD_INT 33
12620: PUSH
12621: LD_INT 3
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: PPUSH
12632: CALL_OW 69
12636: ST_TO_ADDR
// if not tmp then
12637: LD_VAR 0 2
12641: NOT
12642: IFFALSE 12646
// exit ;
12644: GO 12772
// side := 0 ;
12646: LD_ADDR_VAR 0 3
12650: PUSH
12651: LD_INT 0
12653: ST_TO_ADDR
// for i := 1 to 8 do
12654: LD_ADDR_VAR 0 1
12658: PUSH
12659: DOUBLE
12660: LD_INT 1
12662: DEC
12663: ST_TO_ADDR
12664: LD_INT 8
12666: PUSH
12667: FOR_TO
12668: IFFALSE 12716
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12670: LD_OWVAR 2
12674: PUSH
12675: LD_VAR 0 1
12679: NONEQUAL
12680: PUSH
12681: LD_OWVAR 2
12685: PPUSH
12686: LD_VAR 0 1
12690: PPUSH
12691: CALL_OW 81
12695: PUSH
12696: LD_INT 2
12698: EQUAL
12699: AND
12700: IFFALSE 12714
// begin side := i ;
12702: LD_ADDR_VAR 0 3
12706: PUSH
12707: LD_VAR 0 1
12711: ST_TO_ADDR
// break ;
12712: GO 12716
// end ;
12714: GO 12667
12716: POP
12717: POP
// if not side then
12718: LD_VAR 0 3
12722: NOT
12723: IFFALSE 12727
// exit ;
12725: GO 12772
// for i := 1 to tmp do
12727: LD_ADDR_VAR 0 1
12731: PUSH
12732: DOUBLE
12733: LD_INT 1
12735: DEC
12736: ST_TO_ADDR
12737: LD_VAR 0 2
12741: PUSH
12742: FOR_TO
12743: IFFALSE 12770
// if Prob ( 60 ) then
12745: LD_INT 60
12747: PPUSH
12748: CALL_OW 13
12752: IFFALSE 12768
// SetSide ( i , side ) ;
12754: LD_VAR 0 1
12758: PPUSH
12759: LD_VAR 0 3
12763: PPUSH
12764: CALL_OW 235
12768: GO 12742
12770: POP
12771: POP
// end ;
12772: PPOPN 3
12774: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12775: LD_EXP 25
12779: PUSH
12780: LD_EXP 38
12784: AND
12785: IFFALSE 12904
12787: GO 12789
12789: DISABLE
12790: LD_INT 0
12792: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12793: LD_ADDR_VAR 0 1
12797: PUSH
12798: LD_INT 22
12800: PUSH
12801: LD_OWVAR 2
12805: PUSH
12806: EMPTY
12807: LIST
12808: LIST
12809: PUSH
12810: LD_INT 21
12812: PUSH
12813: LD_INT 1
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: PUSH
12820: LD_INT 3
12822: PUSH
12823: LD_INT 23
12825: PUSH
12826: LD_INT 0
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: PUSH
12837: EMPTY
12838: LIST
12839: LIST
12840: LIST
12841: PPUSH
12842: CALL_OW 69
12846: PUSH
12847: FOR_IN
12848: IFFALSE 12902
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12850: LD_VAR 0 1
12854: PPUSH
12855: CALL_OW 257
12859: PUSH
12860: LD_INT 1
12862: PUSH
12863: LD_INT 2
12865: PUSH
12866: LD_INT 3
12868: PUSH
12869: LD_INT 4
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: IN
12878: IFFALSE 12900
// SetClass ( un , rand ( 1 , 4 ) ) ;
12880: LD_VAR 0 1
12884: PPUSH
12885: LD_INT 1
12887: PPUSH
12888: LD_INT 4
12890: PPUSH
12891: CALL_OW 12
12895: PPUSH
12896: CALL_OW 336
12900: GO 12847
12902: POP
12903: POP
// end ;
12904: PPOPN 1
12906: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12907: LD_EXP 25
12911: PUSH
12912: LD_EXP 37
12916: AND
12917: IFFALSE 12996
12919: GO 12921
12921: DISABLE
12922: LD_INT 0
12924: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12925: LD_ADDR_VAR 0 1
12929: PUSH
12930: LD_INT 22
12932: PUSH
12933: LD_OWVAR 2
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: PUSH
12942: LD_INT 21
12944: PUSH
12945: LD_INT 3
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: PPUSH
12956: CALL_OW 69
12960: ST_TO_ADDR
// if not tmp then
12961: LD_VAR 0 1
12965: NOT
12966: IFFALSE 12970
// exit ;
12968: GO 12996
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12970: LD_VAR 0 1
12974: PUSH
12975: LD_INT 1
12977: PPUSH
12978: LD_VAR 0 1
12982: PPUSH
12983: CALL_OW 12
12987: ARRAY
12988: PPUSH
12989: LD_INT 100
12991: PPUSH
12992: CALL_OW 234
// end ;
12996: PPOPN 1
12998: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12999: LD_EXP 25
13003: PUSH
13004: LD_EXP 39
13008: AND
13009: IFFALSE 13107
13011: GO 13013
13013: DISABLE
13014: LD_INT 0
13016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13017: LD_ADDR_VAR 0 1
13021: PUSH
13022: LD_INT 22
13024: PUSH
13025: LD_OWVAR 2
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: PUSH
13034: LD_INT 21
13036: PUSH
13037: LD_INT 1
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: PPUSH
13048: CALL_OW 69
13052: ST_TO_ADDR
// if not tmp then
13053: LD_VAR 0 1
13057: NOT
13058: IFFALSE 13062
// exit ;
13060: GO 13107
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13062: LD_VAR 0 1
13066: PUSH
13067: LD_INT 1
13069: PPUSH
13070: LD_VAR 0 1
13074: PPUSH
13075: CALL_OW 12
13079: ARRAY
13080: PPUSH
13081: LD_INT 1
13083: PPUSH
13084: LD_INT 4
13086: PPUSH
13087: CALL_OW 12
13091: PPUSH
13092: LD_INT 3000
13094: PPUSH
13095: LD_INT 9000
13097: PPUSH
13098: CALL_OW 12
13102: PPUSH
13103: CALL_OW 492
// end ;
13107: PPOPN 1
13109: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13110: LD_EXP 25
13114: PUSH
13115: LD_EXP 40
13119: AND
13120: IFFALSE 13140
13122: GO 13124
13124: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13125: LD_INT 1
13127: PPUSH
13128: LD_OWVAR 2
13132: PPUSH
13133: LD_INT 0
13135: PPUSH
13136: CALL_OW 324
13140: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13141: LD_EXP 25
13145: PUSH
13146: LD_EXP 41
13150: AND
13151: IFFALSE 13234
13153: GO 13155
13155: DISABLE
13156: LD_INT 0
13158: PPUSH
13159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13160: LD_ADDR_VAR 0 2
13164: PUSH
13165: LD_INT 22
13167: PUSH
13168: LD_OWVAR 2
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: PUSH
13177: LD_INT 21
13179: PUSH
13180: LD_INT 3
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PUSH
13187: EMPTY
13188: LIST
13189: LIST
13190: PPUSH
13191: CALL_OW 69
13195: ST_TO_ADDR
// if not tmp then
13196: LD_VAR 0 2
13200: NOT
13201: IFFALSE 13205
// exit ;
13203: GO 13234
// for i in tmp do
13205: LD_ADDR_VAR 0 1
13209: PUSH
13210: LD_VAR 0 2
13214: PUSH
13215: FOR_IN
13216: IFFALSE 13232
// SetBLevel ( i , 10 ) ;
13218: LD_VAR 0 1
13222: PPUSH
13223: LD_INT 10
13225: PPUSH
13226: CALL_OW 241
13230: GO 13215
13232: POP
13233: POP
// end ;
13234: PPOPN 2
13236: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13237: LD_EXP 25
13241: PUSH
13242: LD_EXP 42
13246: AND
13247: IFFALSE 13358
13249: GO 13251
13251: DISABLE
13252: LD_INT 0
13254: PPUSH
13255: PPUSH
13256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13257: LD_ADDR_VAR 0 3
13261: PUSH
13262: LD_INT 22
13264: PUSH
13265: LD_OWVAR 2
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: PUSH
13274: LD_INT 25
13276: PUSH
13277: LD_INT 1
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: PPUSH
13288: CALL_OW 69
13292: ST_TO_ADDR
// if not tmp then
13293: LD_VAR 0 3
13297: NOT
13298: IFFALSE 13302
// exit ;
13300: GO 13358
// un := tmp [ rand ( 1 , tmp ) ] ;
13302: LD_ADDR_VAR 0 2
13306: PUSH
13307: LD_VAR 0 3
13311: PUSH
13312: LD_INT 1
13314: PPUSH
13315: LD_VAR 0 3
13319: PPUSH
13320: CALL_OW 12
13324: ARRAY
13325: ST_TO_ADDR
// if Crawls ( un ) then
13326: LD_VAR 0 2
13330: PPUSH
13331: CALL_OW 318
13335: IFFALSE 13346
// ComWalk ( un ) ;
13337: LD_VAR 0 2
13341: PPUSH
13342: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13346: LD_VAR 0 2
13350: PPUSH
13351: LD_INT 5
13353: PPUSH
13354: CALL_OW 336
// end ;
13358: PPOPN 3
13360: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13361: LD_EXP 25
13365: PUSH
13366: LD_EXP 43
13370: AND
13371: PUSH
13372: LD_OWVAR 67
13376: PUSH
13377: LD_INT 4
13379: LESS
13380: AND
13381: IFFALSE 13400
13383: GO 13385
13385: DISABLE
// begin Difficulty := Difficulty + 1 ;
13386: LD_ADDR_OWVAR 67
13390: PUSH
13391: LD_OWVAR 67
13395: PUSH
13396: LD_INT 1
13398: PLUS
13399: ST_TO_ADDR
// end ;
13400: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13401: LD_EXP 25
13405: PUSH
13406: LD_EXP 44
13410: AND
13411: IFFALSE 13514
13413: GO 13415
13415: DISABLE
13416: LD_INT 0
13418: PPUSH
// begin for i := 1 to 5 do
13419: LD_ADDR_VAR 0 1
13423: PUSH
13424: DOUBLE
13425: LD_INT 1
13427: DEC
13428: ST_TO_ADDR
13429: LD_INT 5
13431: PUSH
13432: FOR_TO
13433: IFFALSE 13512
// begin uc_nation := nation_nature ;
13435: LD_ADDR_OWVAR 21
13439: PUSH
13440: LD_INT 0
13442: ST_TO_ADDR
// uc_side := 0 ;
13443: LD_ADDR_OWVAR 20
13447: PUSH
13448: LD_INT 0
13450: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13451: LD_ADDR_OWVAR 29
13455: PUSH
13456: LD_INT 12
13458: PUSH
13459: LD_INT 12
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: ST_TO_ADDR
// hc_agressivity := 20 ;
13466: LD_ADDR_OWVAR 35
13470: PUSH
13471: LD_INT 20
13473: ST_TO_ADDR
// hc_class := class_tiger ;
13474: LD_ADDR_OWVAR 28
13478: PUSH
13479: LD_INT 14
13481: ST_TO_ADDR
// hc_gallery :=  ;
13482: LD_ADDR_OWVAR 33
13486: PUSH
13487: LD_STRING 
13489: ST_TO_ADDR
// hc_name :=  ;
13490: LD_ADDR_OWVAR 26
13494: PUSH
13495: LD_STRING 
13497: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13498: CALL_OW 44
13502: PPUSH
13503: LD_INT 0
13505: PPUSH
13506: CALL_OW 51
// end ;
13510: GO 13432
13512: POP
13513: POP
// end ;
13514: PPOPN 1
13516: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13517: LD_EXP 25
13521: PUSH
13522: LD_EXP 45
13526: AND
13527: IFFALSE 13536
13529: GO 13531
13531: DISABLE
// StreamSibBomb ;
13532: CALL 13537 0 0
13536: END
// export function StreamSibBomb ; var i , x , y ; begin
13537: LD_INT 0
13539: PPUSH
13540: PPUSH
13541: PPUSH
13542: PPUSH
// result := false ;
13543: LD_ADDR_VAR 0 1
13547: PUSH
13548: LD_INT 0
13550: ST_TO_ADDR
// for i := 1 to 16 do
13551: LD_ADDR_VAR 0 2
13555: PUSH
13556: DOUBLE
13557: LD_INT 1
13559: DEC
13560: ST_TO_ADDR
13561: LD_INT 16
13563: PUSH
13564: FOR_TO
13565: IFFALSE 13764
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13567: LD_ADDR_VAR 0 3
13571: PUSH
13572: LD_INT 10
13574: PUSH
13575: LD_INT 20
13577: PUSH
13578: LD_INT 30
13580: PUSH
13581: LD_INT 40
13583: PUSH
13584: LD_INT 50
13586: PUSH
13587: LD_INT 60
13589: PUSH
13590: LD_INT 70
13592: PUSH
13593: LD_INT 80
13595: PUSH
13596: LD_INT 90
13598: PUSH
13599: LD_INT 100
13601: PUSH
13602: LD_INT 110
13604: PUSH
13605: LD_INT 120
13607: PUSH
13608: LD_INT 130
13610: PUSH
13611: LD_INT 140
13613: PUSH
13614: LD_INT 150
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: PUSH
13634: LD_INT 1
13636: PPUSH
13637: LD_INT 15
13639: PPUSH
13640: CALL_OW 12
13644: ARRAY
13645: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13646: LD_ADDR_VAR 0 4
13650: PUSH
13651: LD_INT 10
13653: PUSH
13654: LD_INT 20
13656: PUSH
13657: LD_INT 30
13659: PUSH
13660: LD_INT 40
13662: PUSH
13663: LD_INT 50
13665: PUSH
13666: LD_INT 60
13668: PUSH
13669: LD_INT 70
13671: PUSH
13672: LD_INT 80
13674: PUSH
13675: LD_INT 90
13677: PUSH
13678: LD_INT 100
13680: PUSH
13681: LD_INT 110
13683: PUSH
13684: LD_INT 120
13686: PUSH
13687: LD_INT 130
13689: PUSH
13690: LD_INT 140
13692: PUSH
13693: LD_INT 150
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: PUSH
13713: LD_INT 1
13715: PPUSH
13716: LD_INT 15
13718: PPUSH
13719: CALL_OW 12
13723: ARRAY
13724: ST_TO_ADDR
// if ValidHex ( x , y ) then
13725: LD_VAR 0 3
13729: PPUSH
13730: LD_VAR 0 4
13734: PPUSH
13735: CALL_OW 488
13739: IFFALSE 13762
// begin result := [ x , y ] ;
13741: LD_ADDR_VAR 0 1
13745: PUSH
13746: LD_VAR 0 3
13750: PUSH
13751: LD_VAR 0 4
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: ST_TO_ADDR
// break ;
13760: GO 13764
// end ; end ;
13762: GO 13564
13764: POP
13765: POP
// if result then
13766: LD_VAR 0 1
13770: IFFALSE 13830
// begin ToLua ( playSibBomb() ) ;
13772: LD_STRING playSibBomb()
13774: PPUSH
13775: CALL_OW 559
// wait ( 0 0$14 ) ;
13779: LD_INT 490
13781: PPUSH
13782: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13786: LD_VAR 0 1
13790: PUSH
13791: LD_INT 1
13793: ARRAY
13794: PPUSH
13795: LD_VAR 0 1
13799: PUSH
13800: LD_INT 2
13802: ARRAY
13803: PPUSH
13804: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13808: LD_VAR 0 1
13812: PUSH
13813: LD_INT 1
13815: ARRAY
13816: PPUSH
13817: LD_VAR 0 1
13821: PUSH
13822: LD_INT 2
13824: ARRAY
13825: PPUSH
13826: CALL_OW 429
// end ; end ;
13830: LD_VAR 0 1
13834: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13835: LD_EXP 25
13839: PUSH
13840: LD_EXP 47
13844: AND
13845: IFFALSE 13857
13847: GO 13849
13849: DISABLE
// YouLost (  ) ;
13850: LD_STRING 
13852: PPUSH
13853: CALL_OW 104
13857: END
// every 0 0$1 trigger StreamModeActive and sFog do
13858: LD_EXP 25
13862: PUSH
13863: LD_EXP 46
13867: AND
13868: IFFALSE 13882
13870: GO 13872
13872: DISABLE
// FogOff ( your_side ) ;
13873: LD_OWVAR 2
13877: PPUSH
13878: CALL_OW 344
13882: END
// every 0 0$1 trigger StreamModeActive and sSun do
13883: LD_EXP 25
13887: PUSH
13888: LD_EXP 48
13892: AND
13893: IFFALSE 13921
13895: GO 13897
13897: DISABLE
// begin solar_recharge_percent := 0 ;
13898: LD_ADDR_OWVAR 79
13902: PUSH
13903: LD_INT 0
13905: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13906: LD_INT 10500
13908: PPUSH
13909: CALL_OW 67
// solar_recharge_percent := 100 ;
13913: LD_ADDR_OWVAR 79
13917: PUSH
13918: LD_INT 100
13920: ST_TO_ADDR
// end ;
13921: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13922: LD_EXP 25
13926: PUSH
13927: LD_EXP 49
13931: AND
13932: IFFALSE 14171
13934: GO 13936
13936: DISABLE
13937: LD_INT 0
13939: PPUSH
13940: PPUSH
13941: PPUSH
// begin tmp := [ ] ;
13942: LD_ADDR_VAR 0 3
13946: PUSH
13947: EMPTY
13948: ST_TO_ADDR
// for i := 1 to 6 do
13949: LD_ADDR_VAR 0 1
13953: PUSH
13954: DOUBLE
13955: LD_INT 1
13957: DEC
13958: ST_TO_ADDR
13959: LD_INT 6
13961: PUSH
13962: FOR_TO
13963: IFFALSE 14068
// begin uc_nation := nation_nature ;
13965: LD_ADDR_OWVAR 21
13969: PUSH
13970: LD_INT 0
13972: ST_TO_ADDR
// uc_side := 0 ;
13973: LD_ADDR_OWVAR 20
13977: PUSH
13978: LD_INT 0
13980: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13981: LD_ADDR_OWVAR 29
13985: PUSH
13986: LD_INT 12
13988: PUSH
13989: LD_INT 12
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: ST_TO_ADDR
// hc_agressivity := 20 ;
13996: LD_ADDR_OWVAR 35
14000: PUSH
14001: LD_INT 20
14003: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14004: LD_ADDR_OWVAR 28
14008: PUSH
14009: LD_INT 17
14011: ST_TO_ADDR
// hc_gallery :=  ;
14012: LD_ADDR_OWVAR 33
14016: PUSH
14017: LD_STRING 
14019: ST_TO_ADDR
// hc_name :=  ;
14020: LD_ADDR_OWVAR 26
14024: PUSH
14025: LD_STRING 
14027: ST_TO_ADDR
// un := CreateHuman ;
14028: LD_ADDR_VAR 0 2
14032: PUSH
14033: CALL_OW 44
14037: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14038: LD_VAR 0 2
14042: PPUSH
14043: LD_INT 1
14045: PPUSH
14046: CALL_OW 51
// tmp := tmp ^ un ;
14050: LD_ADDR_VAR 0 3
14054: PUSH
14055: LD_VAR 0 3
14059: PUSH
14060: LD_VAR 0 2
14064: ADD
14065: ST_TO_ADDR
// end ;
14066: GO 13962
14068: POP
14069: POP
// repeat wait ( 0 0$1 ) ;
14070: LD_INT 35
14072: PPUSH
14073: CALL_OW 67
// for un in tmp do
14077: LD_ADDR_VAR 0 2
14081: PUSH
14082: LD_VAR 0 3
14086: PUSH
14087: FOR_IN
14088: IFFALSE 14162
// begin if IsDead ( un ) then
14090: LD_VAR 0 2
14094: PPUSH
14095: CALL_OW 301
14099: IFFALSE 14119
// begin tmp := tmp diff un ;
14101: LD_ADDR_VAR 0 3
14105: PUSH
14106: LD_VAR 0 3
14110: PUSH
14111: LD_VAR 0 2
14115: DIFF
14116: ST_TO_ADDR
// continue ;
14117: GO 14087
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14119: LD_VAR 0 2
14123: PPUSH
14124: LD_INT 3
14126: PUSH
14127: LD_INT 22
14129: PUSH
14130: LD_INT 0
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: PPUSH
14141: CALL_OW 69
14145: PPUSH
14146: LD_VAR 0 2
14150: PPUSH
14151: CALL_OW 74
14155: PPUSH
14156: CALL_OW 115
// end ;
14160: GO 14087
14162: POP
14163: POP
// until not tmp ;
14164: LD_VAR 0 3
14168: NOT
14169: IFFALSE 14070
// end ;
14171: PPOPN 3
14173: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14174: LD_EXP 25
14178: PUSH
14179: LD_EXP 50
14183: AND
14184: IFFALSE 14238
14186: GO 14188
14188: DISABLE
// begin ToLua ( displayTroll(); ) ;
14189: LD_STRING displayTroll();
14191: PPUSH
14192: CALL_OW 559
// wait ( 3 3$00 ) ;
14196: LD_INT 6300
14198: PPUSH
14199: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14203: LD_STRING hideTroll();
14205: PPUSH
14206: CALL_OW 559
// wait ( 1 1$00 ) ;
14210: LD_INT 2100
14212: PPUSH
14213: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14217: LD_STRING displayTroll();
14219: PPUSH
14220: CALL_OW 559
// wait ( 1 1$00 ) ;
14224: LD_INT 2100
14226: PPUSH
14227: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14231: LD_STRING hideTroll();
14233: PPUSH
14234: CALL_OW 559
// end ;
14238: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14239: LD_EXP 25
14243: PUSH
14244: LD_EXP 51
14248: AND
14249: IFFALSE 14312
14251: GO 14253
14253: DISABLE
14254: LD_INT 0
14256: PPUSH
// begin p := 0 ;
14257: LD_ADDR_VAR 0 1
14261: PUSH
14262: LD_INT 0
14264: ST_TO_ADDR
// repeat game_speed := 1 ;
14265: LD_ADDR_OWVAR 65
14269: PUSH
14270: LD_INT 1
14272: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14273: LD_INT 35
14275: PPUSH
14276: CALL_OW 67
// p := p + 1 ;
14280: LD_ADDR_VAR 0 1
14284: PUSH
14285: LD_VAR 0 1
14289: PUSH
14290: LD_INT 1
14292: PLUS
14293: ST_TO_ADDR
// until p >= 60 ;
14294: LD_VAR 0 1
14298: PUSH
14299: LD_INT 60
14301: GREATEREQUAL
14302: IFFALSE 14265
// game_speed := 4 ;
14304: LD_ADDR_OWVAR 65
14308: PUSH
14309: LD_INT 4
14311: ST_TO_ADDR
// end ;
14312: PPOPN 1
14314: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14315: LD_EXP 25
14319: PUSH
14320: LD_EXP 52
14324: AND
14325: IFFALSE 14471
14327: GO 14329
14329: DISABLE
14330: LD_INT 0
14332: PPUSH
14333: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14334: LD_ADDR_VAR 0 1
14338: PUSH
14339: LD_INT 22
14341: PUSH
14342: LD_OWVAR 2
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: PUSH
14351: LD_INT 2
14353: PUSH
14354: LD_INT 30
14356: PUSH
14357: LD_INT 0
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PUSH
14364: LD_INT 30
14366: PUSH
14367: LD_INT 1
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: LIST
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: PPUSH
14383: CALL_OW 69
14387: ST_TO_ADDR
// if not depot then
14388: LD_VAR 0 1
14392: NOT
14393: IFFALSE 14397
// exit ;
14395: GO 14471
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14397: LD_ADDR_VAR 0 2
14401: PUSH
14402: LD_VAR 0 1
14406: PUSH
14407: LD_INT 1
14409: PPUSH
14410: LD_VAR 0 1
14414: PPUSH
14415: CALL_OW 12
14419: ARRAY
14420: PPUSH
14421: CALL_OW 274
14425: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14426: LD_VAR 0 2
14430: PPUSH
14431: LD_INT 1
14433: PPUSH
14434: LD_INT 0
14436: PPUSH
14437: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14441: LD_VAR 0 2
14445: PPUSH
14446: LD_INT 2
14448: PPUSH
14449: LD_INT 0
14451: PPUSH
14452: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14456: LD_VAR 0 2
14460: PPUSH
14461: LD_INT 3
14463: PPUSH
14464: LD_INT 0
14466: PPUSH
14467: CALL_OW 277
// end ;
14471: PPOPN 2
14473: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14474: LD_EXP 25
14478: PUSH
14479: LD_EXP 53
14483: AND
14484: IFFALSE 14581
14486: GO 14488
14488: DISABLE
14489: LD_INT 0
14491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14492: LD_ADDR_VAR 0 1
14496: PUSH
14497: LD_INT 22
14499: PUSH
14500: LD_OWVAR 2
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: PUSH
14509: LD_INT 21
14511: PUSH
14512: LD_INT 1
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: PUSH
14519: LD_INT 3
14521: PUSH
14522: LD_INT 23
14524: PUSH
14525: LD_INT 0
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: LIST
14540: PPUSH
14541: CALL_OW 69
14545: ST_TO_ADDR
// if not tmp then
14546: LD_VAR 0 1
14550: NOT
14551: IFFALSE 14555
// exit ;
14553: GO 14581
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14555: LD_VAR 0 1
14559: PUSH
14560: LD_INT 1
14562: PPUSH
14563: LD_VAR 0 1
14567: PPUSH
14568: CALL_OW 12
14572: ARRAY
14573: PPUSH
14574: LD_INT 200
14576: PPUSH
14577: CALL_OW 234
// end ;
14581: PPOPN 1
14583: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14584: LD_EXP 25
14588: PUSH
14589: LD_EXP 54
14593: AND
14594: IFFALSE 14673
14596: GO 14598
14598: DISABLE
14599: LD_INT 0
14601: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14602: LD_ADDR_VAR 0 1
14606: PUSH
14607: LD_INT 22
14609: PUSH
14610: LD_OWVAR 2
14614: PUSH
14615: EMPTY
14616: LIST
14617: LIST
14618: PUSH
14619: LD_INT 21
14621: PUSH
14622: LD_INT 2
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: PPUSH
14633: CALL_OW 69
14637: ST_TO_ADDR
// if not tmp then
14638: LD_VAR 0 1
14642: NOT
14643: IFFALSE 14647
// exit ;
14645: GO 14673
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14647: LD_VAR 0 1
14651: PUSH
14652: LD_INT 1
14654: PPUSH
14655: LD_VAR 0 1
14659: PPUSH
14660: CALL_OW 12
14664: ARRAY
14665: PPUSH
14666: LD_INT 60
14668: PPUSH
14669: CALL_OW 234
// end ;
14673: PPOPN 1
14675: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14676: LD_EXP 25
14680: PUSH
14681: LD_EXP 55
14685: AND
14686: IFFALSE 14785
14688: GO 14690
14690: DISABLE
14691: LD_INT 0
14693: PPUSH
14694: PPUSH
// begin enable ;
14695: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14696: LD_ADDR_VAR 0 1
14700: PUSH
14701: LD_INT 22
14703: PUSH
14704: LD_OWVAR 2
14708: PUSH
14709: EMPTY
14710: LIST
14711: LIST
14712: PUSH
14713: LD_INT 61
14715: PUSH
14716: EMPTY
14717: LIST
14718: PUSH
14719: LD_INT 33
14721: PUSH
14722: LD_INT 2
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: LIST
14733: PPUSH
14734: CALL_OW 69
14738: ST_TO_ADDR
// if not tmp then
14739: LD_VAR 0 1
14743: NOT
14744: IFFALSE 14748
// exit ;
14746: GO 14785
// for i in tmp do
14748: LD_ADDR_VAR 0 2
14752: PUSH
14753: LD_VAR 0 1
14757: PUSH
14758: FOR_IN
14759: IFFALSE 14783
// if IsControledBy ( i ) then
14761: LD_VAR 0 2
14765: PPUSH
14766: CALL_OW 312
14770: IFFALSE 14781
// ComUnlink ( i ) ;
14772: LD_VAR 0 2
14776: PPUSH
14777: CALL_OW 136
14781: GO 14758
14783: POP
14784: POP
// end ;
14785: PPOPN 2
14787: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14788: LD_EXP 25
14792: PUSH
14793: LD_EXP 56
14797: AND
14798: IFFALSE 14938
14800: GO 14802
14802: DISABLE
14803: LD_INT 0
14805: PPUSH
14806: PPUSH
// begin ToLua ( displayPowell(); ) ;
14807: LD_STRING displayPowell();
14809: PPUSH
14810: CALL_OW 559
// uc_side := 0 ;
14814: LD_ADDR_OWVAR 20
14818: PUSH
14819: LD_INT 0
14821: ST_TO_ADDR
// uc_nation := 2 ;
14822: LD_ADDR_OWVAR 21
14826: PUSH
14827: LD_INT 2
14829: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14830: LD_ADDR_OWVAR 37
14834: PUSH
14835: LD_INT 14
14837: ST_TO_ADDR
// vc_engine := engine_siberite ;
14838: LD_ADDR_OWVAR 39
14842: PUSH
14843: LD_INT 3
14845: ST_TO_ADDR
// vc_control := control_apeman ;
14846: LD_ADDR_OWVAR 38
14850: PUSH
14851: LD_INT 5
14853: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14854: LD_ADDR_OWVAR 40
14858: PUSH
14859: LD_INT 29
14861: ST_TO_ADDR
// un := CreateVehicle ;
14862: LD_ADDR_VAR 0 2
14866: PUSH
14867: CALL_OW 45
14871: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14872: LD_VAR 0 2
14876: PPUSH
14877: LD_INT 1
14879: PPUSH
14880: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14884: LD_INT 35
14886: PPUSH
14887: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14891: LD_VAR 0 2
14895: PPUSH
14896: LD_INT 22
14898: PUSH
14899: LD_OWVAR 2
14903: PUSH
14904: EMPTY
14905: LIST
14906: LIST
14907: PPUSH
14908: CALL_OW 69
14912: PPUSH
14913: LD_VAR 0 2
14917: PPUSH
14918: CALL_OW 74
14922: PPUSH
14923: CALL_OW 115
// until IsDead ( un ) ;
14927: LD_VAR 0 2
14931: PPUSH
14932: CALL_OW 301
14936: IFFALSE 14884
// end ;
14938: PPOPN 2
14940: END
// every 0 0$1 trigger StreamModeActive and sStu do
14941: LD_EXP 25
14945: PUSH
14946: LD_EXP 64
14950: AND
14951: IFFALSE 14967
14953: GO 14955
14955: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14956: LD_STRING displayStucuk();
14958: PPUSH
14959: CALL_OW 559
// ResetFog ;
14963: CALL_OW 335
// end ;
14967: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14968: LD_EXP 25
14972: PUSH
14973: LD_EXP 57
14977: AND
14978: IFFALSE 15119
14980: GO 14982
14982: DISABLE
14983: LD_INT 0
14985: PPUSH
14986: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14987: LD_ADDR_VAR 0 2
14991: PUSH
14992: LD_INT 22
14994: PUSH
14995: LD_OWVAR 2
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: PUSH
15004: LD_INT 21
15006: PUSH
15007: LD_INT 1
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: PUSH
15014: EMPTY
15015: LIST
15016: LIST
15017: PPUSH
15018: CALL_OW 69
15022: ST_TO_ADDR
// if not tmp then
15023: LD_VAR 0 2
15027: NOT
15028: IFFALSE 15032
// exit ;
15030: GO 15119
// un := tmp [ rand ( 1 , tmp ) ] ;
15032: LD_ADDR_VAR 0 1
15036: PUSH
15037: LD_VAR 0 2
15041: PUSH
15042: LD_INT 1
15044: PPUSH
15045: LD_VAR 0 2
15049: PPUSH
15050: CALL_OW 12
15054: ARRAY
15055: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15056: LD_VAR 0 1
15060: PPUSH
15061: LD_INT 0
15063: PPUSH
15064: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15068: LD_VAR 0 1
15072: PPUSH
15073: LD_OWVAR 3
15077: PUSH
15078: LD_VAR 0 1
15082: DIFF
15083: PPUSH
15084: LD_VAR 0 1
15088: PPUSH
15089: CALL_OW 74
15093: PPUSH
15094: CALL_OW 115
// wait ( 0 0$20 ) ;
15098: LD_INT 700
15100: PPUSH
15101: CALL_OW 67
// SetSide ( un , your_side ) ;
15105: LD_VAR 0 1
15109: PPUSH
15110: LD_OWVAR 2
15114: PPUSH
15115: CALL_OW 235
// end ;
15119: PPOPN 2
15121: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15122: LD_EXP 25
15126: PUSH
15127: LD_EXP 58
15131: AND
15132: IFFALSE 15238
15134: GO 15136
15136: DISABLE
15137: LD_INT 0
15139: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15140: LD_ADDR_VAR 0 1
15144: PUSH
15145: LD_INT 22
15147: PUSH
15148: LD_OWVAR 2
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: PUSH
15157: LD_INT 2
15159: PUSH
15160: LD_INT 30
15162: PUSH
15163: LD_INT 0
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: PUSH
15170: LD_INT 30
15172: PUSH
15173: LD_INT 1
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: LIST
15184: PUSH
15185: EMPTY
15186: LIST
15187: LIST
15188: PPUSH
15189: CALL_OW 69
15193: ST_TO_ADDR
// if not depot then
15194: LD_VAR 0 1
15198: NOT
15199: IFFALSE 15203
// exit ;
15201: GO 15238
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15203: LD_VAR 0 1
15207: PUSH
15208: LD_INT 1
15210: ARRAY
15211: PPUSH
15212: CALL_OW 250
15216: PPUSH
15217: LD_VAR 0 1
15221: PUSH
15222: LD_INT 1
15224: ARRAY
15225: PPUSH
15226: CALL_OW 251
15230: PPUSH
15231: LD_INT 70
15233: PPUSH
15234: CALL_OW 495
// end ;
15238: PPOPN 1
15240: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15241: LD_EXP 25
15245: PUSH
15246: LD_EXP 59
15250: AND
15251: IFFALSE 15462
15253: GO 15255
15255: DISABLE
15256: LD_INT 0
15258: PPUSH
15259: PPUSH
15260: PPUSH
15261: PPUSH
15262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15263: LD_ADDR_VAR 0 5
15267: PUSH
15268: LD_INT 22
15270: PUSH
15271: LD_OWVAR 2
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: PUSH
15280: LD_INT 21
15282: PUSH
15283: LD_INT 1
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: PPUSH
15294: CALL_OW 69
15298: ST_TO_ADDR
// if not tmp then
15299: LD_VAR 0 5
15303: NOT
15304: IFFALSE 15308
// exit ;
15306: GO 15462
// for i in tmp do
15308: LD_ADDR_VAR 0 1
15312: PUSH
15313: LD_VAR 0 5
15317: PUSH
15318: FOR_IN
15319: IFFALSE 15460
// begin d := rand ( 0 , 5 ) ;
15321: LD_ADDR_VAR 0 4
15325: PUSH
15326: LD_INT 0
15328: PPUSH
15329: LD_INT 5
15331: PPUSH
15332: CALL_OW 12
15336: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15337: LD_ADDR_VAR 0 2
15341: PUSH
15342: LD_VAR 0 1
15346: PPUSH
15347: CALL_OW 250
15351: PPUSH
15352: LD_VAR 0 4
15356: PPUSH
15357: LD_INT 3
15359: PPUSH
15360: LD_INT 12
15362: PPUSH
15363: CALL_OW 12
15367: PPUSH
15368: CALL_OW 272
15372: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15373: LD_ADDR_VAR 0 3
15377: PUSH
15378: LD_VAR 0 1
15382: PPUSH
15383: CALL_OW 251
15387: PPUSH
15388: LD_VAR 0 4
15392: PPUSH
15393: LD_INT 3
15395: PPUSH
15396: LD_INT 12
15398: PPUSH
15399: CALL_OW 12
15403: PPUSH
15404: CALL_OW 273
15408: ST_TO_ADDR
// if ValidHex ( x , y ) then
15409: LD_VAR 0 2
15413: PPUSH
15414: LD_VAR 0 3
15418: PPUSH
15419: CALL_OW 488
15423: IFFALSE 15458
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15425: LD_VAR 0 1
15429: PPUSH
15430: LD_VAR 0 2
15434: PPUSH
15435: LD_VAR 0 3
15439: PPUSH
15440: LD_INT 3
15442: PPUSH
15443: LD_INT 6
15445: PPUSH
15446: CALL_OW 12
15450: PPUSH
15451: LD_INT 1
15453: PPUSH
15454: CALL_OW 483
// end ;
15458: GO 15318
15460: POP
15461: POP
// end ;
15462: PPOPN 5
15464: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15465: LD_EXP 25
15469: PUSH
15470: LD_EXP 60
15474: AND
15475: IFFALSE 15569
15477: GO 15479
15479: DISABLE
15480: LD_INT 0
15482: PPUSH
15483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15484: LD_ADDR_VAR 0 2
15488: PUSH
15489: LD_INT 22
15491: PUSH
15492: LD_OWVAR 2
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: LD_INT 32
15503: PUSH
15504: LD_INT 1
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: LD_INT 21
15513: PUSH
15514: LD_INT 2
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: LIST
15525: PPUSH
15526: CALL_OW 69
15530: ST_TO_ADDR
// if not tmp then
15531: LD_VAR 0 2
15535: NOT
15536: IFFALSE 15540
// exit ;
15538: GO 15569
// for i in tmp do
15540: LD_ADDR_VAR 0 1
15544: PUSH
15545: LD_VAR 0 2
15549: PUSH
15550: FOR_IN
15551: IFFALSE 15567
// SetFuel ( i , 0 ) ;
15553: LD_VAR 0 1
15557: PPUSH
15558: LD_INT 0
15560: PPUSH
15561: CALL_OW 240
15565: GO 15550
15567: POP
15568: POP
// end ;
15569: PPOPN 2
15571: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15572: LD_EXP 25
15576: PUSH
15577: LD_EXP 61
15581: AND
15582: IFFALSE 15648
15584: GO 15586
15586: DISABLE
15587: LD_INT 0
15589: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15590: LD_ADDR_VAR 0 1
15594: PUSH
15595: LD_INT 22
15597: PUSH
15598: LD_OWVAR 2
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: LD_INT 30
15609: PUSH
15610: LD_INT 29
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: PPUSH
15621: CALL_OW 69
15625: ST_TO_ADDR
// if not tmp then
15626: LD_VAR 0 1
15630: NOT
15631: IFFALSE 15635
// exit ;
15633: GO 15648
// DestroyUnit ( tmp [ 1 ] ) ;
15635: LD_VAR 0 1
15639: PUSH
15640: LD_INT 1
15642: ARRAY
15643: PPUSH
15644: CALL_OW 65
// end ;
15648: PPOPN 1
15650: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15651: LD_EXP 25
15655: PUSH
15656: LD_EXP 63
15660: AND
15661: IFFALSE 15790
15663: GO 15665
15665: DISABLE
15666: LD_INT 0
15668: PPUSH
// begin uc_side := 0 ;
15669: LD_ADDR_OWVAR 20
15673: PUSH
15674: LD_INT 0
15676: ST_TO_ADDR
// uc_nation := nation_arabian ;
15677: LD_ADDR_OWVAR 21
15681: PUSH
15682: LD_INT 2
15684: ST_TO_ADDR
// hc_gallery :=  ;
15685: LD_ADDR_OWVAR 33
15689: PUSH
15690: LD_STRING 
15692: ST_TO_ADDR
// hc_name :=  ;
15693: LD_ADDR_OWVAR 26
15697: PUSH
15698: LD_STRING 
15700: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15701: LD_INT 1
15703: PPUSH
15704: LD_INT 11
15706: PPUSH
15707: LD_INT 10
15709: PPUSH
15710: CALL_OW 380
// un := CreateHuman ;
15714: LD_ADDR_VAR 0 1
15718: PUSH
15719: CALL_OW 44
15723: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15724: LD_VAR 0 1
15728: PPUSH
15729: LD_INT 1
15731: PPUSH
15732: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15736: LD_INT 35
15738: PPUSH
15739: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15743: LD_VAR 0 1
15747: PPUSH
15748: LD_INT 22
15750: PUSH
15751: LD_OWVAR 2
15755: PUSH
15756: EMPTY
15757: LIST
15758: LIST
15759: PPUSH
15760: CALL_OW 69
15764: PPUSH
15765: LD_VAR 0 1
15769: PPUSH
15770: CALL_OW 74
15774: PPUSH
15775: CALL_OW 115
// until IsDead ( un ) ;
15779: LD_VAR 0 1
15783: PPUSH
15784: CALL_OW 301
15788: IFFALSE 15736
// end ;
15790: PPOPN 1
15792: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15793: LD_EXP 25
15797: PUSH
15798: LD_EXP 65
15802: AND
15803: IFFALSE 15815
15805: GO 15807
15807: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15808: LD_STRING earthquake(getX(game), 0, 32)
15810: PPUSH
15811: CALL_OW 559
15815: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15816: LD_EXP 25
15820: PUSH
15821: LD_EXP 66
15825: AND
15826: IFFALSE 15917
15828: GO 15830
15830: DISABLE
15831: LD_INT 0
15833: PPUSH
// begin enable ;
15834: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15835: LD_ADDR_VAR 0 1
15839: PUSH
15840: LD_INT 22
15842: PUSH
15843: LD_OWVAR 2
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PUSH
15852: LD_INT 21
15854: PUSH
15855: LD_INT 2
15857: PUSH
15858: EMPTY
15859: LIST
15860: LIST
15861: PUSH
15862: LD_INT 33
15864: PUSH
15865: LD_INT 3
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: LIST
15876: PPUSH
15877: CALL_OW 69
15881: ST_TO_ADDR
// if not tmp then
15882: LD_VAR 0 1
15886: NOT
15887: IFFALSE 15891
// exit ;
15889: GO 15917
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15891: LD_VAR 0 1
15895: PUSH
15896: LD_INT 1
15898: PPUSH
15899: LD_VAR 0 1
15903: PPUSH
15904: CALL_OW 12
15908: ARRAY
15909: PPUSH
15910: LD_INT 1
15912: PPUSH
15913: CALL_OW 234
// end ;
15917: PPOPN 1
15919: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15920: LD_EXP 25
15924: PUSH
15925: LD_EXP 67
15929: AND
15930: IFFALSE 16071
15932: GO 15934
15934: DISABLE
15935: LD_INT 0
15937: PPUSH
15938: PPUSH
15939: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15940: LD_ADDR_VAR 0 3
15944: PUSH
15945: LD_INT 22
15947: PUSH
15948: LD_OWVAR 2
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: PUSH
15957: LD_INT 25
15959: PUSH
15960: LD_INT 1
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PPUSH
15971: CALL_OW 69
15975: ST_TO_ADDR
// if not tmp then
15976: LD_VAR 0 3
15980: NOT
15981: IFFALSE 15985
// exit ;
15983: GO 16071
// un := tmp [ rand ( 1 , tmp ) ] ;
15985: LD_ADDR_VAR 0 2
15989: PUSH
15990: LD_VAR 0 3
15994: PUSH
15995: LD_INT 1
15997: PPUSH
15998: LD_VAR 0 3
16002: PPUSH
16003: CALL_OW 12
16007: ARRAY
16008: ST_TO_ADDR
// if Crawls ( un ) then
16009: LD_VAR 0 2
16013: PPUSH
16014: CALL_OW 318
16018: IFFALSE 16029
// ComWalk ( un ) ;
16020: LD_VAR 0 2
16024: PPUSH
16025: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16029: LD_VAR 0 2
16033: PPUSH
16034: LD_INT 9
16036: PPUSH
16037: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16041: LD_INT 28
16043: PPUSH
16044: LD_OWVAR 2
16048: PPUSH
16049: LD_INT 2
16051: PPUSH
16052: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16056: LD_INT 29
16058: PPUSH
16059: LD_OWVAR 2
16063: PPUSH
16064: LD_INT 2
16066: PPUSH
16067: CALL_OW 322
// end ;
16071: PPOPN 3
16073: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16074: LD_EXP 25
16078: PUSH
16079: LD_EXP 68
16083: AND
16084: IFFALSE 16195
16086: GO 16088
16088: DISABLE
16089: LD_INT 0
16091: PPUSH
16092: PPUSH
16093: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16094: LD_ADDR_VAR 0 3
16098: PUSH
16099: LD_INT 22
16101: PUSH
16102: LD_OWVAR 2
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: PUSH
16111: LD_INT 25
16113: PUSH
16114: LD_INT 1
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: PPUSH
16125: CALL_OW 69
16129: ST_TO_ADDR
// if not tmp then
16130: LD_VAR 0 3
16134: NOT
16135: IFFALSE 16139
// exit ;
16137: GO 16195
// un := tmp [ rand ( 1 , tmp ) ] ;
16139: LD_ADDR_VAR 0 2
16143: PUSH
16144: LD_VAR 0 3
16148: PUSH
16149: LD_INT 1
16151: PPUSH
16152: LD_VAR 0 3
16156: PPUSH
16157: CALL_OW 12
16161: ARRAY
16162: ST_TO_ADDR
// if Crawls ( un ) then
16163: LD_VAR 0 2
16167: PPUSH
16168: CALL_OW 318
16172: IFFALSE 16183
// ComWalk ( un ) ;
16174: LD_VAR 0 2
16178: PPUSH
16179: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16183: LD_VAR 0 2
16187: PPUSH
16188: LD_INT 8
16190: PPUSH
16191: CALL_OW 336
// end ;
16195: PPOPN 3
16197: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16198: LD_EXP 25
16202: PUSH
16203: LD_EXP 69
16207: AND
16208: IFFALSE 16352
16210: GO 16212
16212: DISABLE
16213: LD_INT 0
16215: PPUSH
16216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16217: LD_ADDR_VAR 0 2
16221: PUSH
16222: LD_INT 22
16224: PUSH
16225: LD_OWVAR 2
16229: PUSH
16230: EMPTY
16231: LIST
16232: LIST
16233: PUSH
16234: LD_INT 21
16236: PUSH
16237: LD_INT 2
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: PUSH
16244: LD_INT 2
16246: PUSH
16247: LD_INT 34
16249: PUSH
16250: LD_INT 12
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: PUSH
16257: LD_INT 34
16259: PUSH
16260: LD_INT 51
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PUSH
16267: LD_INT 34
16269: PUSH
16270: LD_INT 32
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: LIST
16287: PPUSH
16288: CALL_OW 69
16292: ST_TO_ADDR
// if not tmp then
16293: LD_VAR 0 2
16297: NOT
16298: IFFALSE 16302
// exit ;
16300: GO 16352
// for i in tmp do
16302: LD_ADDR_VAR 0 1
16306: PUSH
16307: LD_VAR 0 2
16311: PUSH
16312: FOR_IN
16313: IFFALSE 16350
// if GetCargo ( i , mat_artifact ) = 0 then
16315: LD_VAR 0 1
16319: PPUSH
16320: LD_INT 4
16322: PPUSH
16323: CALL_OW 289
16327: PUSH
16328: LD_INT 0
16330: EQUAL
16331: IFFALSE 16348
// SetCargo ( i , mat_siberit , 100 ) ;
16333: LD_VAR 0 1
16337: PPUSH
16338: LD_INT 3
16340: PPUSH
16341: LD_INT 100
16343: PPUSH
16344: CALL_OW 290
16348: GO 16312
16350: POP
16351: POP
// end ;
16352: PPOPN 2
16354: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16355: LD_EXP 25
16359: PUSH
16360: LD_EXP 70
16364: AND
16365: IFFALSE 16548
16367: GO 16369
16369: DISABLE
16370: LD_INT 0
16372: PPUSH
16373: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16374: LD_ADDR_VAR 0 2
16378: PUSH
16379: LD_INT 22
16381: PUSH
16382: LD_OWVAR 2
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: PPUSH
16391: CALL_OW 69
16395: ST_TO_ADDR
// if not tmp then
16396: LD_VAR 0 2
16400: NOT
16401: IFFALSE 16405
// exit ;
16403: GO 16548
// for i := 1 to 2 do
16405: LD_ADDR_VAR 0 1
16409: PUSH
16410: DOUBLE
16411: LD_INT 1
16413: DEC
16414: ST_TO_ADDR
16415: LD_INT 2
16417: PUSH
16418: FOR_TO
16419: IFFALSE 16546
// begin uc_side := your_side ;
16421: LD_ADDR_OWVAR 20
16425: PUSH
16426: LD_OWVAR 2
16430: ST_TO_ADDR
// uc_nation := nation_american ;
16431: LD_ADDR_OWVAR 21
16435: PUSH
16436: LD_INT 1
16438: ST_TO_ADDR
// vc_chassis := us_morphling ;
16439: LD_ADDR_OWVAR 37
16443: PUSH
16444: LD_INT 5
16446: ST_TO_ADDR
// vc_engine := engine_siberite ;
16447: LD_ADDR_OWVAR 39
16451: PUSH
16452: LD_INT 3
16454: ST_TO_ADDR
// vc_control := control_computer ;
16455: LD_ADDR_OWVAR 38
16459: PUSH
16460: LD_INT 3
16462: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16463: LD_ADDR_OWVAR 40
16467: PUSH
16468: LD_INT 10
16470: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16471: LD_VAR 0 2
16475: PUSH
16476: LD_INT 1
16478: ARRAY
16479: PPUSH
16480: CALL_OW 310
16484: NOT
16485: IFFALSE 16532
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16487: CALL_OW 45
16491: PPUSH
16492: LD_VAR 0 2
16496: PUSH
16497: LD_INT 1
16499: ARRAY
16500: PPUSH
16501: CALL_OW 250
16505: PPUSH
16506: LD_VAR 0 2
16510: PUSH
16511: LD_INT 1
16513: ARRAY
16514: PPUSH
16515: CALL_OW 251
16519: PPUSH
16520: LD_INT 12
16522: PPUSH
16523: LD_INT 1
16525: PPUSH
16526: CALL_OW 50
16530: GO 16544
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16532: CALL_OW 45
16536: PPUSH
16537: LD_INT 1
16539: PPUSH
16540: CALL_OW 51
// end ;
16544: GO 16418
16546: POP
16547: POP
// end ;
16548: PPOPN 2
16550: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16551: LD_EXP 25
16555: PUSH
16556: LD_EXP 71
16560: AND
16561: IFFALSE 16783
16563: GO 16565
16565: DISABLE
16566: LD_INT 0
16568: PPUSH
16569: PPUSH
16570: PPUSH
16571: PPUSH
16572: PPUSH
16573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16574: LD_ADDR_VAR 0 6
16578: PUSH
16579: LD_INT 22
16581: PUSH
16582: LD_OWVAR 2
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PUSH
16591: LD_INT 21
16593: PUSH
16594: LD_INT 1
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: PUSH
16601: LD_INT 3
16603: PUSH
16604: LD_INT 23
16606: PUSH
16607: LD_INT 0
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: LIST
16622: PPUSH
16623: CALL_OW 69
16627: ST_TO_ADDR
// if not tmp then
16628: LD_VAR 0 6
16632: NOT
16633: IFFALSE 16637
// exit ;
16635: GO 16783
// s1 := rand ( 1 , 4 ) ;
16637: LD_ADDR_VAR 0 2
16641: PUSH
16642: LD_INT 1
16644: PPUSH
16645: LD_INT 4
16647: PPUSH
16648: CALL_OW 12
16652: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16653: LD_ADDR_VAR 0 4
16657: PUSH
16658: LD_VAR 0 6
16662: PUSH
16663: LD_INT 1
16665: ARRAY
16666: PPUSH
16667: LD_VAR 0 2
16671: PPUSH
16672: CALL_OW 259
16676: ST_TO_ADDR
// if s1 = 1 then
16677: LD_VAR 0 2
16681: PUSH
16682: LD_INT 1
16684: EQUAL
16685: IFFALSE 16705
// s2 := rand ( 2 , 4 ) else
16687: LD_ADDR_VAR 0 3
16691: PUSH
16692: LD_INT 2
16694: PPUSH
16695: LD_INT 4
16697: PPUSH
16698: CALL_OW 12
16702: ST_TO_ADDR
16703: GO 16713
// s2 := 1 ;
16705: LD_ADDR_VAR 0 3
16709: PUSH
16710: LD_INT 1
16712: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16713: LD_ADDR_VAR 0 5
16717: PUSH
16718: LD_VAR 0 6
16722: PUSH
16723: LD_INT 1
16725: ARRAY
16726: PPUSH
16727: LD_VAR 0 3
16731: PPUSH
16732: CALL_OW 259
16736: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16737: LD_VAR 0 6
16741: PUSH
16742: LD_INT 1
16744: ARRAY
16745: PPUSH
16746: LD_VAR 0 2
16750: PPUSH
16751: LD_VAR 0 5
16755: PPUSH
16756: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16760: LD_VAR 0 6
16764: PUSH
16765: LD_INT 1
16767: ARRAY
16768: PPUSH
16769: LD_VAR 0 3
16773: PPUSH
16774: LD_VAR 0 4
16778: PPUSH
16779: CALL_OW 237
// end ;
16783: PPOPN 6
16785: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16786: LD_EXP 25
16790: PUSH
16791: LD_EXP 72
16795: AND
16796: IFFALSE 16875
16798: GO 16800
16800: DISABLE
16801: LD_INT 0
16803: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16804: LD_ADDR_VAR 0 1
16808: PUSH
16809: LD_INT 22
16811: PUSH
16812: LD_OWVAR 2
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: LD_INT 30
16823: PUSH
16824: LD_INT 3
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: EMPTY
16832: LIST
16833: LIST
16834: PPUSH
16835: CALL_OW 69
16839: ST_TO_ADDR
// if not tmp then
16840: LD_VAR 0 1
16844: NOT
16845: IFFALSE 16849
// exit ;
16847: GO 16875
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16849: LD_VAR 0 1
16853: PUSH
16854: LD_INT 1
16856: PPUSH
16857: LD_VAR 0 1
16861: PPUSH
16862: CALL_OW 12
16866: ARRAY
16867: PPUSH
16868: LD_INT 1
16870: PPUSH
16871: CALL_OW 234
// end ;
16875: PPOPN 1
16877: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16878: LD_EXP 25
16882: PUSH
16883: LD_EXP 73
16887: AND
16888: IFFALSE 17000
16890: GO 16892
16892: DISABLE
16893: LD_INT 0
16895: PPUSH
16896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16897: LD_ADDR_VAR 0 2
16901: PUSH
16902: LD_INT 22
16904: PUSH
16905: LD_OWVAR 2
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: PUSH
16914: LD_INT 2
16916: PUSH
16917: LD_INT 30
16919: PUSH
16920: LD_INT 27
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: PUSH
16927: LD_INT 30
16929: PUSH
16930: LD_INT 26
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: PUSH
16937: LD_INT 30
16939: PUSH
16940: LD_INT 28
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: PPUSH
16957: CALL_OW 69
16961: ST_TO_ADDR
// if not tmp then
16962: LD_VAR 0 2
16966: NOT
16967: IFFALSE 16971
// exit ;
16969: GO 17000
// for i in tmp do
16971: LD_ADDR_VAR 0 1
16975: PUSH
16976: LD_VAR 0 2
16980: PUSH
16981: FOR_IN
16982: IFFALSE 16998
// SetLives ( i , 1 ) ;
16984: LD_VAR 0 1
16988: PPUSH
16989: LD_INT 1
16991: PPUSH
16992: CALL_OW 234
16996: GO 16981
16998: POP
16999: POP
// end ;
17000: PPOPN 2
17002: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17003: LD_EXP 25
17007: PUSH
17008: LD_EXP 74
17012: AND
17013: IFFALSE 17300
17015: GO 17017
17017: DISABLE
17018: LD_INT 0
17020: PPUSH
17021: PPUSH
17022: PPUSH
// begin i := rand ( 1 , 7 ) ;
17023: LD_ADDR_VAR 0 1
17027: PUSH
17028: LD_INT 1
17030: PPUSH
17031: LD_INT 7
17033: PPUSH
17034: CALL_OW 12
17038: ST_TO_ADDR
// case i of 1 :
17039: LD_VAR 0 1
17043: PUSH
17044: LD_INT 1
17046: DOUBLE
17047: EQUAL
17048: IFTRUE 17052
17050: GO 17062
17052: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17053: LD_STRING earthquake(getX(game), 0, 32)
17055: PPUSH
17056: CALL_OW 559
17060: GO 17300
17062: LD_INT 2
17064: DOUBLE
17065: EQUAL
17066: IFTRUE 17070
17068: GO 17084
17070: POP
// begin ToLua ( displayStucuk(); ) ;
17071: LD_STRING displayStucuk();
17073: PPUSH
17074: CALL_OW 559
// ResetFog ;
17078: CALL_OW 335
// end ; 3 :
17082: GO 17300
17084: LD_INT 3
17086: DOUBLE
17087: EQUAL
17088: IFTRUE 17092
17090: GO 17196
17092: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17093: LD_ADDR_VAR 0 2
17097: PUSH
17098: LD_INT 22
17100: PUSH
17101: LD_OWVAR 2
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PUSH
17110: LD_INT 25
17112: PUSH
17113: LD_INT 1
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PPUSH
17124: CALL_OW 69
17128: ST_TO_ADDR
// if not tmp then
17129: LD_VAR 0 2
17133: NOT
17134: IFFALSE 17138
// exit ;
17136: GO 17300
// un := tmp [ rand ( 1 , tmp ) ] ;
17138: LD_ADDR_VAR 0 3
17142: PUSH
17143: LD_VAR 0 2
17147: PUSH
17148: LD_INT 1
17150: PPUSH
17151: LD_VAR 0 2
17155: PPUSH
17156: CALL_OW 12
17160: ARRAY
17161: ST_TO_ADDR
// if Crawls ( un ) then
17162: LD_VAR 0 3
17166: PPUSH
17167: CALL_OW 318
17171: IFFALSE 17182
// ComWalk ( un ) ;
17173: LD_VAR 0 3
17177: PPUSH
17178: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17182: LD_VAR 0 3
17186: PPUSH
17187: LD_INT 8
17189: PPUSH
17190: CALL_OW 336
// end ; 4 :
17194: GO 17300
17196: LD_INT 4
17198: DOUBLE
17199: EQUAL
17200: IFTRUE 17204
17202: GO 17278
17204: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17205: LD_ADDR_VAR 0 2
17209: PUSH
17210: LD_INT 22
17212: PUSH
17213: LD_OWVAR 2
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: LD_INT 30
17224: PUSH
17225: LD_INT 29
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: PPUSH
17236: CALL_OW 69
17240: ST_TO_ADDR
// if not tmp then
17241: LD_VAR 0 2
17245: NOT
17246: IFFALSE 17250
// exit ;
17248: GO 17300
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17250: LD_VAR 0 2
17254: PUSH
17255: LD_INT 1
17257: ARRAY
17258: PPUSH
17259: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17263: LD_VAR 0 2
17267: PUSH
17268: LD_INT 1
17270: ARRAY
17271: PPUSH
17272: CALL_OW 65
// end ; 5 .. 7 :
17276: GO 17300
17278: LD_INT 5
17280: DOUBLE
17281: GREATEREQUAL
17282: IFFALSE 17290
17284: LD_INT 7
17286: DOUBLE
17287: LESSEQUAL
17288: IFTRUE 17292
17290: GO 17299
17292: POP
// StreamSibBomb ; end ;
17293: CALL 13537 0 0
17297: GO 17300
17299: POP
// end ;
17300: PPOPN 3
17302: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17303: LD_EXP 25
17307: PUSH
17308: LD_EXP 75
17312: AND
17313: IFFALSE 17469
17315: GO 17317
17317: DISABLE
17318: LD_INT 0
17320: PPUSH
17321: PPUSH
17322: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17323: LD_ADDR_VAR 0 2
17327: PUSH
17328: LD_INT 81
17330: PUSH
17331: LD_OWVAR 2
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: PUSH
17340: LD_INT 2
17342: PUSH
17343: LD_INT 21
17345: PUSH
17346: LD_INT 1
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: PUSH
17353: LD_INT 21
17355: PUSH
17356: LD_INT 2
17358: PUSH
17359: EMPTY
17360: LIST
17361: LIST
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: LIST
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: PPUSH
17372: CALL_OW 69
17376: ST_TO_ADDR
// if not tmp then
17377: LD_VAR 0 2
17381: NOT
17382: IFFALSE 17386
// exit ;
17384: GO 17469
// p := 0 ;
17386: LD_ADDR_VAR 0 3
17390: PUSH
17391: LD_INT 0
17393: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17394: LD_INT 35
17396: PPUSH
17397: CALL_OW 67
// p := p + 1 ;
17401: LD_ADDR_VAR 0 3
17405: PUSH
17406: LD_VAR 0 3
17410: PUSH
17411: LD_INT 1
17413: PLUS
17414: ST_TO_ADDR
// for i in tmp do
17415: LD_ADDR_VAR 0 1
17419: PUSH
17420: LD_VAR 0 2
17424: PUSH
17425: FOR_IN
17426: IFFALSE 17457
// if GetLives ( i ) < 1000 then
17428: LD_VAR 0 1
17432: PPUSH
17433: CALL_OW 256
17437: PUSH
17438: LD_INT 1000
17440: LESS
17441: IFFALSE 17455
// SetLives ( i , 1000 ) ;
17443: LD_VAR 0 1
17447: PPUSH
17448: LD_INT 1000
17450: PPUSH
17451: CALL_OW 234
17455: GO 17425
17457: POP
17458: POP
// until p > 20 ;
17459: LD_VAR 0 3
17463: PUSH
17464: LD_INT 20
17466: GREATER
17467: IFFALSE 17394
// end ;
17469: PPOPN 3
17471: END
// every 0 0$1 trigger StreamModeActive and sTime do
17472: LD_EXP 25
17476: PUSH
17477: LD_EXP 76
17481: AND
17482: IFFALSE 17517
17484: GO 17486
17486: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17487: LD_INT 28
17489: PPUSH
17490: LD_OWVAR 2
17494: PPUSH
17495: LD_INT 2
17497: PPUSH
17498: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17502: LD_INT 30
17504: PPUSH
17505: LD_OWVAR 2
17509: PPUSH
17510: LD_INT 2
17512: PPUSH
17513: CALL_OW 322
// end ;
17517: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17518: LD_EXP 25
17522: PUSH
17523: LD_EXP 77
17527: AND
17528: IFFALSE 17649
17530: GO 17532
17532: DISABLE
17533: LD_INT 0
17535: PPUSH
17536: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17537: LD_ADDR_VAR 0 2
17541: PUSH
17542: LD_INT 22
17544: PUSH
17545: LD_OWVAR 2
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PUSH
17554: LD_INT 21
17556: PUSH
17557: LD_INT 1
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: LD_INT 3
17566: PUSH
17567: LD_INT 23
17569: PUSH
17570: LD_INT 0
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: LIST
17585: PPUSH
17586: CALL_OW 69
17590: ST_TO_ADDR
// if not tmp then
17591: LD_VAR 0 2
17595: NOT
17596: IFFALSE 17600
// exit ;
17598: GO 17649
// for i in tmp do
17600: LD_ADDR_VAR 0 1
17604: PUSH
17605: LD_VAR 0 2
17609: PUSH
17610: FOR_IN
17611: IFFALSE 17647
// begin if Crawls ( i ) then
17613: LD_VAR 0 1
17617: PPUSH
17618: CALL_OW 318
17622: IFFALSE 17633
// ComWalk ( i ) ;
17624: LD_VAR 0 1
17628: PPUSH
17629: CALL_OW 138
// SetClass ( i , 2 ) ;
17633: LD_VAR 0 1
17637: PPUSH
17638: LD_INT 2
17640: PPUSH
17641: CALL_OW 336
// end ;
17645: GO 17610
17647: POP
17648: POP
// end ;
17649: PPOPN 2
17651: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17652: LD_EXP 25
17656: PUSH
17657: LD_EXP 78
17661: AND
17662: IFFALSE 17950
17664: GO 17666
17666: DISABLE
17667: LD_INT 0
17669: PPUSH
17670: PPUSH
17671: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17672: LD_OWVAR 2
17676: PPUSH
17677: LD_INT 9
17679: PPUSH
17680: LD_INT 1
17682: PPUSH
17683: LD_INT 1
17685: PPUSH
17686: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17690: LD_INT 9
17692: PPUSH
17693: LD_OWVAR 2
17697: PPUSH
17698: CALL_OW 343
// uc_side := 9 ;
17702: LD_ADDR_OWVAR 20
17706: PUSH
17707: LD_INT 9
17709: ST_TO_ADDR
// uc_nation := 2 ;
17710: LD_ADDR_OWVAR 21
17714: PUSH
17715: LD_INT 2
17717: ST_TO_ADDR
// hc_name := Dark Warrior ;
17718: LD_ADDR_OWVAR 26
17722: PUSH
17723: LD_STRING Dark Warrior
17725: ST_TO_ADDR
// hc_gallery :=  ;
17726: LD_ADDR_OWVAR 33
17730: PUSH
17731: LD_STRING 
17733: ST_TO_ADDR
// hc_noskilllimit := true ;
17734: LD_ADDR_OWVAR 76
17738: PUSH
17739: LD_INT 1
17741: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17742: LD_ADDR_OWVAR 31
17746: PUSH
17747: LD_INT 30
17749: PUSH
17750: LD_INT 30
17752: PUSH
17753: LD_INT 30
17755: PUSH
17756: LD_INT 30
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: ST_TO_ADDR
// un := CreateHuman ;
17765: LD_ADDR_VAR 0 3
17769: PUSH
17770: CALL_OW 44
17774: ST_TO_ADDR
// hc_noskilllimit := false ;
17775: LD_ADDR_OWVAR 76
17779: PUSH
17780: LD_INT 0
17782: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17783: LD_VAR 0 3
17787: PPUSH
17788: LD_INT 1
17790: PPUSH
17791: CALL_OW 51
// ToLua ( playRanger() ) ;
17795: LD_STRING playRanger()
17797: PPUSH
17798: CALL_OW 559
// p := 0 ;
17802: LD_ADDR_VAR 0 2
17806: PUSH
17807: LD_INT 0
17809: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17810: LD_INT 35
17812: PPUSH
17813: CALL_OW 67
// p := p + 1 ;
17817: LD_ADDR_VAR 0 2
17821: PUSH
17822: LD_VAR 0 2
17826: PUSH
17827: LD_INT 1
17829: PLUS
17830: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17831: LD_VAR 0 3
17835: PPUSH
17836: CALL_OW 256
17840: PUSH
17841: LD_INT 1000
17843: LESS
17844: IFFALSE 17858
// SetLives ( un , 1000 ) ;
17846: LD_VAR 0 3
17850: PPUSH
17851: LD_INT 1000
17853: PPUSH
17854: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17858: LD_VAR 0 3
17862: PPUSH
17863: LD_INT 81
17865: PUSH
17866: LD_OWVAR 2
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: LD_INT 91
17877: PUSH
17878: LD_VAR 0 3
17882: PUSH
17883: LD_INT 30
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: LIST
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PPUSH
17895: CALL_OW 69
17899: PPUSH
17900: LD_VAR 0 3
17904: PPUSH
17905: CALL_OW 74
17909: PPUSH
17910: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17914: LD_VAR 0 2
17918: PUSH
17919: LD_INT 80
17921: GREATER
17922: PUSH
17923: LD_VAR 0 3
17927: PPUSH
17928: CALL_OW 301
17932: OR
17933: IFFALSE 17810
// if un then
17935: LD_VAR 0 3
17939: IFFALSE 17950
// RemoveUnit ( un ) ;
17941: LD_VAR 0 3
17945: PPUSH
17946: CALL_OW 64
// end ;
17950: PPOPN 3
17952: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17953: LD_EXP 79
17957: IFFALSE 18073
17959: GO 17961
17961: DISABLE
17962: LD_INT 0
17964: PPUSH
17965: PPUSH
17966: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17967: LD_ADDR_VAR 0 2
17971: PUSH
17972: LD_INT 81
17974: PUSH
17975: LD_OWVAR 2
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 21
17986: PUSH
17987: LD_INT 1
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PPUSH
17998: CALL_OW 69
18002: ST_TO_ADDR
// ToLua ( playComputer() ) ;
18003: LD_STRING playComputer()
18005: PPUSH
18006: CALL_OW 559
// if not tmp then
18010: LD_VAR 0 2
18014: NOT
18015: IFFALSE 18019
// exit ;
18017: GO 18073
// for i in tmp do
18019: LD_ADDR_VAR 0 1
18023: PUSH
18024: LD_VAR 0 2
18028: PUSH
18029: FOR_IN
18030: IFFALSE 18071
// for j := 1 to 4 do
18032: LD_ADDR_VAR 0 3
18036: PUSH
18037: DOUBLE
18038: LD_INT 1
18040: DEC
18041: ST_TO_ADDR
18042: LD_INT 4
18044: PUSH
18045: FOR_TO
18046: IFFALSE 18067
// SetSkill ( i , j , 10 ) ;
18048: LD_VAR 0 1
18052: PPUSH
18053: LD_VAR 0 3
18057: PPUSH
18058: LD_INT 10
18060: PPUSH
18061: CALL_OW 237
18065: GO 18045
18067: POP
18068: POP
18069: GO 18029
18071: POP
18072: POP
// end ;
18073: PPOPN 3
18075: END
// every 0 0$1 trigger s30 do var i , tmp ;
18076: LD_EXP 80
18080: IFFALSE 18149
18082: GO 18084
18084: DISABLE
18085: LD_INT 0
18087: PPUSH
18088: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18089: LD_ADDR_VAR 0 2
18093: PUSH
18094: LD_INT 22
18096: PUSH
18097: LD_OWVAR 2
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PPUSH
18106: CALL_OW 69
18110: ST_TO_ADDR
// if not tmp then
18111: LD_VAR 0 2
18115: NOT
18116: IFFALSE 18120
// exit ;
18118: GO 18149
// for i in tmp do
18120: LD_ADDR_VAR 0 1
18124: PUSH
18125: LD_VAR 0 2
18129: PUSH
18130: FOR_IN
18131: IFFALSE 18147
// SetLives ( i , 300 ) ;
18133: LD_VAR 0 1
18137: PPUSH
18138: LD_INT 300
18140: PPUSH
18141: CALL_OW 234
18145: GO 18130
18147: POP
18148: POP
// end ;
18149: PPOPN 2
18151: END
// every 0 0$1 trigger s60 do var i , tmp ;
18152: LD_EXP 81
18156: IFFALSE 18225
18158: GO 18160
18160: DISABLE
18161: LD_INT 0
18163: PPUSH
18164: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18165: LD_ADDR_VAR 0 2
18169: PUSH
18170: LD_INT 22
18172: PUSH
18173: LD_OWVAR 2
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PPUSH
18182: CALL_OW 69
18186: ST_TO_ADDR
// if not tmp then
18187: LD_VAR 0 2
18191: NOT
18192: IFFALSE 18196
// exit ;
18194: GO 18225
// for i in tmp do
18196: LD_ADDR_VAR 0 1
18200: PUSH
18201: LD_VAR 0 2
18205: PUSH
18206: FOR_IN
18207: IFFALSE 18223
// SetLives ( i , 600 ) ;
18209: LD_VAR 0 1
18213: PPUSH
18214: LD_INT 600
18216: PPUSH
18217: CALL_OW 234
18221: GO 18206
18223: POP
18224: POP
// end ;
18225: PPOPN 2
18227: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18228: LD_INT 0
18230: PPUSH
// case cmd of 301 :
18231: LD_VAR 0 1
18235: PUSH
18236: LD_INT 301
18238: DOUBLE
18239: EQUAL
18240: IFTRUE 18244
18242: GO 18276
18244: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18245: LD_VAR 0 6
18249: PPUSH
18250: LD_VAR 0 7
18254: PPUSH
18255: LD_VAR 0 8
18259: PPUSH
18260: LD_VAR 0 4
18264: PPUSH
18265: LD_VAR 0 5
18269: PPUSH
18270: CALL 19477 0 5
18274: GO 18397
18276: LD_INT 302
18278: DOUBLE
18279: EQUAL
18280: IFTRUE 18284
18282: GO 18321
18284: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18285: LD_VAR 0 6
18289: PPUSH
18290: LD_VAR 0 7
18294: PPUSH
18295: LD_VAR 0 8
18299: PPUSH
18300: LD_VAR 0 9
18304: PPUSH
18305: LD_VAR 0 4
18309: PPUSH
18310: LD_VAR 0 5
18314: PPUSH
18315: CALL 19568 0 6
18319: GO 18397
18321: LD_INT 303
18323: DOUBLE
18324: EQUAL
18325: IFTRUE 18329
18327: GO 18366
18329: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18330: LD_VAR 0 6
18334: PPUSH
18335: LD_VAR 0 7
18339: PPUSH
18340: LD_VAR 0 8
18344: PPUSH
18345: LD_VAR 0 9
18349: PPUSH
18350: LD_VAR 0 4
18354: PPUSH
18355: LD_VAR 0 5
18359: PPUSH
18360: CALL 18402 0 6
18364: GO 18397
18366: LD_INT 304
18368: DOUBLE
18369: EQUAL
18370: IFTRUE 18374
18372: GO 18396
18374: POP
// hHackTeleport ( unit , x , y ) ; end ;
18375: LD_VAR 0 2
18379: PPUSH
18380: LD_VAR 0 4
18384: PPUSH
18385: LD_VAR 0 5
18389: PPUSH
18390: CALL 20161 0 3
18394: GO 18397
18396: POP
// end ;
18397: LD_VAR 0 12
18401: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18402: LD_INT 0
18404: PPUSH
18405: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18406: LD_VAR 0 1
18410: PUSH
18411: LD_INT 1
18413: LESS
18414: PUSH
18415: LD_VAR 0 1
18419: PUSH
18420: LD_INT 3
18422: GREATER
18423: OR
18424: PUSH
18425: LD_VAR 0 5
18429: PPUSH
18430: LD_VAR 0 6
18434: PPUSH
18435: CALL_OW 428
18439: OR
18440: IFFALSE 18444
// exit ;
18442: GO 19164
// uc_side := your_side ;
18444: LD_ADDR_OWVAR 20
18448: PUSH
18449: LD_OWVAR 2
18453: ST_TO_ADDR
// uc_nation := nation ;
18454: LD_ADDR_OWVAR 21
18458: PUSH
18459: LD_VAR 0 1
18463: ST_TO_ADDR
// bc_level = 1 ;
18464: LD_ADDR_OWVAR 43
18468: PUSH
18469: LD_INT 1
18471: ST_TO_ADDR
// case btype of 1 :
18472: LD_VAR 0 2
18476: PUSH
18477: LD_INT 1
18479: DOUBLE
18480: EQUAL
18481: IFTRUE 18485
18483: GO 18496
18485: POP
// bc_type := b_depot ; 2 :
18486: LD_ADDR_OWVAR 42
18490: PUSH
18491: LD_INT 0
18493: ST_TO_ADDR
18494: GO 19108
18496: LD_INT 2
18498: DOUBLE
18499: EQUAL
18500: IFTRUE 18504
18502: GO 18515
18504: POP
// bc_type := b_warehouse ; 3 :
18505: LD_ADDR_OWVAR 42
18509: PUSH
18510: LD_INT 1
18512: ST_TO_ADDR
18513: GO 19108
18515: LD_INT 3
18517: DOUBLE
18518: EQUAL
18519: IFTRUE 18523
18521: GO 18534
18523: POP
// bc_type := b_lab ; 4 .. 9 :
18524: LD_ADDR_OWVAR 42
18528: PUSH
18529: LD_INT 6
18531: ST_TO_ADDR
18532: GO 19108
18534: LD_INT 4
18536: DOUBLE
18537: GREATEREQUAL
18538: IFFALSE 18546
18540: LD_INT 9
18542: DOUBLE
18543: LESSEQUAL
18544: IFTRUE 18548
18546: GO 18600
18548: POP
// begin bc_type := b_lab_half ;
18549: LD_ADDR_OWVAR 42
18553: PUSH
18554: LD_INT 7
18556: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18557: LD_ADDR_OWVAR 44
18561: PUSH
18562: LD_INT 10
18564: PUSH
18565: LD_INT 11
18567: PUSH
18568: LD_INT 12
18570: PUSH
18571: LD_INT 15
18573: PUSH
18574: LD_INT 14
18576: PUSH
18577: LD_INT 13
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: PUSH
18588: LD_VAR 0 2
18592: PUSH
18593: LD_INT 3
18595: MINUS
18596: ARRAY
18597: ST_TO_ADDR
// end ; 10 .. 13 :
18598: GO 19108
18600: LD_INT 10
18602: DOUBLE
18603: GREATEREQUAL
18604: IFFALSE 18612
18606: LD_INT 13
18608: DOUBLE
18609: LESSEQUAL
18610: IFTRUE 18614
18612: GO 18691
18614: POP
// begin bc_type := b_lab_full ;
18615: LD_ADDR_OWVAR 42
18619: PUSH
18620: LD_INT 8
18622: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18623: LD_ADDR_OWVAR 44
18627: PUSH
18628: LD_INT 10
18630: PUSH
18631: LD_INT 12
18633: PUSH
18634: LD_INT 14
18636: PUSH
18637: LD_INT 13
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: PUSH
18646: LD_VAR 0 2
18650: PUSH
18651: LD_INT 9
18653: MINUS
18654: ARRAY
18655: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18656: LD_ADDR_OWVAR 45
18660: PUSH
18661: LD_INT 11
18663: PUSH
18664: LD_INT 15
18666: PUSH
18667: LD_INT 12
18669: PUSH
18670: LD_INT 15
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: PUSH
18679: LD_VAR 0 2
18683: PUSH
18684: LD_INT 9
18686: MINUS
18687: ARRAY
18688: ST_TO_ADDR
// end ; 14 :
18689: GO 19108
18691: LD_INT 14
18693: DOUBLE
18694: EQUAL
18695: IFTRUE 18699
18697: GO 18710
18699: POP
// bc_type := b_workshop ; 15 :
18700: LD_ADDR_OWVAR 42
18704: PUSH
18705: LD_INT 2
18707: ST_TO_ADDR
18708: GO 19108
18710: LD_INT 15
18712: DOUBLE
18713: EQUAL
18714: IFTRUE 18718
18716: GO 18729
18718: POP
// bc_type := b_factory ; 16 :
18719: LD_ADDR_OWVAR 42
18723: PUSH
18724: LD_INT 3
18726: ST_TO_ADDR
18727: GO 19108
18729: LD_INT 16
18731: DOUBLE
18732: EQUAL
18733: IFTRUE 18737
18735: GO 18748
18737: POP
// bc_type := b_ext_gun ; 17 :
18738: LD_ADDR_OWVAR 42
18742: PUSH
18743: LD_INT 17
18745: ST_TO_ADDR
18746: GO 19108
18748: LD_INT 17
18750: DOUBLE
18751: EQUAL
18752: IFTRUE 18756
18754: GO 18784
18756: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18757: LD_ADDR_OWVAR 42
18761: PUSH
18762: LD_INT 19
18764: PUSH
18765: LD_INT 23
18767: PUSH
18768: LD_INT 19
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: LIST
18775: PUSH
18776: LD_VAR 0 1
18780: ARRAY
18781: ST_TO_ADDR
18782: GO 19108
18784: LD_INT 18
18786: DOUBLE
18787: EQUAL
18788: IFTRUE 18792
18790: GO 18803
18792: POP
// bc_type := b_ext_radar ; 19 :
18793: LD_ADDR_OWVAR 42
18797: PUSH
18798: LD_INT 20
18800: ST_TO_ADDR
18801: GO 19108
18803: LD_INT 19
18805: DOUBLE
18806: EQUAL
18807: IFTRUE 18811
18809: GO 18822
18811: POP
// bc_type := b_ext_radio ; 20 :
18812: LD_ADDR_OWVAR 42
18816: PUSH
18817: LD_INT 22
18819: ST_TO_ADDR
18820: GO 19108
18822: LD_INT 20
18824: DOUBLE
18825: EQUAL
18826: IFTRUE 18830
18828: GO 18841
18830: POP
// bc_type := b_ext_siberium ; 21 :
18831: LD_ADDR_OWVAR 42
18835: PUSH
18836: LD_INT 21
18838: ST_TO_ADDR
18839: GO 19108
18841: LD_INT 21
18843: DOUBLE
18844: EQUAL
18845: IFTRUE 18849
18847: GO 18860
18849: POP
// bc_type := b_ext_computer ; 22 :
18850: LD_ADDR_OWVAR 42
18854: PUSH
18855: LD_INT 24
18857: ST_TO_ADDR
18858: GO 19108
18860: LD_INT 22
18862: DOUBLE
18863: EQUAL
18864: IFTRUE 18868
18866: GO 18879
18868: POP
// bc_type := b_ext_track ; 23 :
18869: LD_ADDR_OWVAR 42
18873: PUSH
18874: LD_INT 16
18876: ST_TO_ADDR
18877: GO 19108
18879: LD_INT 23
18881: DOUBLE
18882: EQUAL
18883: IFTRUE 18887
18885: GO 18898
18887: POP
// bc_type := b_ext_laser ; 24 :
18888: LD_ADDR_OWVAR 42
18892: PUSH
18893: LD_INT 25
18895: ST_TO_ADDR
18896: GO 19108
18898: LD_INT 24
18900: DOUBLE
18901: EQUAL
18902: IFTRUE 18906
18904: GO 18917
18906: POP
// bc_type := b_control_tower ; 25 :
18907: LD_ADDR_OWVAR 42
18911: PUSH
18912: LD_INT 36
18914: ST_TO_ADDR
18915: GO 19108
18917: LD_INT 25
18919: DOUBLE
18920: EQUAL
18921: IFTRUE 18925
18923: GO 18936
18925: POP
// bc_type := b_breastwork ; 26 :
18926: LD_ADDR_OWVAR 42
18930: PUSH
18931: LD_INT 31
18933: ST_TO_ADDR
18934: GO 19108
18936: LD_INT 26
18938: DOUBLE
18939: EQUAL
18940: IFTRUE 18944
18942: GO 18955
18944: POP
// bc_type := b_bunker ; 27 :
18945: LD_ADDR_OWVAR 42
18949: PUSH
18950: LD_INT 32
18952: ST_TO_ADDR
18953: GO 19108
18955: LD_INT 27
18957: DOUBLE
18958: EQUAL
18959: IFTRUE 18963
18961: GO 18974
18963: POP
// bc_type := b_turret ; 28 :
18964: LD_ADDR_OWVAR 42
18968: PUSH
18969: LD_INT 33
18971: ST_TO_ADDR
18972: GO 19108
18974: LD_INT 28
18976: DOUBLE
18977: EQUAL
18978: IFTRUE 18982
18980: GO 18993
18982: POP
// bc_type := b_armoury ; 29 :
18983: LD_ADDR_OWVAR 42
18987: PUSH
18988: LD_INT 4
18990: ST_TO_ADDR
18991: GO 19108
18993: LD_INT 29
18995: DOUBLE
18996: EQUAL
18997: IFTRUE 19001
18999: GO 19012
19001: POP
// bc_type := b_barracks ; 30 :
19002: LD_ADDR_OWVAR 42
19006: PUSH
19007: LD_INT 5
19009: ST_TO_ADDR
19010: GO 19108
19012: LD_INT 30
19014: DOUBLE
19015: EQUAL
19016: IFTRUE 19020
19018: GO 19031
19020: POP
// bc_type := b_solar_power ; 31 :
19021: LD_ADDR_OWVAR 42
19025: PUSH
19026: LD_INT 27
19028: ST_TO_ADDR
19029: GO 19108
19031: LD_INT 31
19033: DOUBLE
19034: EQUAL
19035: IFTRUE 19039
19037: GO 19050
19039: POP
// bc_type := b_oil_power ; 32 :
19040: LD_ADDR_OWVAR 42
19044: PUSH
19045: LD_INT 26
19047: ST_TO_ADDR
19048: GO 19108
19050: LD_INT 32
19052: DOUBLE
19053: EQUAL
19054: IFTRUE 19058
19056: GO 19069
19058: POP
// bc_type := b_siberite_power ; 33 :
19059: LD_ADDR_OWVAR 42
19063: PUSH
19064: LD_INT 28
19066: ST_TO_ADDR
19067: GO 19108
19069: LD_INT 33
19071: DOUBLE
19072: EQUAL
19073: IFTRUE 19077
19075: GO 19088
19077: POP
// bc_type := b_oil_mine ; 34 :
19078: LD_ADDR_OWVAR 42
19082: PUSH
19083: LD_INT 29
19085: ST_TO_ADDR
19086: GO 19108
19088: LD_INT 34
19090: DOUBLE
19091: EQUAL
19092: IFTRUE 19096
19094: GO 19107
19096: POP
// bc_type := b_siberite_mine ; end ;
19097: LD_ADDR_OWVAR 42
19101: PUSH
19102: LD_INT 30
19104: ST_TO_ADDR
19105: GO 19108
19107: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19108: LD_ADDR_VAR 0 8
19112: PUSH
19113: LD_VAR 0 5
19117: PPUSH
19118: LD_VAR 0 6
19122: PPUSH
19123: LD_VAR 0 3
19127: PPUSH
19128: CALL_OW 47
19132: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19133: LD_OWVAR 42
19137: PUSH
19138: LD_INT 32
19140: PUSH
19141: LD_INT 33
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: IN
19148: IFFALSE 19164
// PlaceWeaponTurret ( b , weapon ) ;
19150: LD_VAR 0 8
19154: PPUSH
19155: LD_VAR 0 4
19159: PPUSH
19160: CALL_OW 431
// end ;
19164: LD_VAR 0 7
19168: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19169: LD_INT 0
19171: PPUSH
19172: PPUSH
19173: PPUSH
19174: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19175: LD_ADDR_VAR 0 4
19179: PUSH
19180: LD_INT 22
19182: PUSH
19183: LD_OWVAR 2
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: LD_INT 2
19194: PUSH
19195: LD_INT 30
19197: PUSH
19198: LD_INT 0
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: LD_INT 30
19207: PUSH
19208: LD_INT 1
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: LIST
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: PPUSH
19224: CALL_OW 69
19228: ST_TO_ADDR
// if not tmp then
19229: LD_VAR 0 4
19233: NOT
19234: IFFALSE 19238
// exit ;
19236: GO 19297
// for i in tmp do
19238: LD_ADDR_VAR 0 2
19242: PUSH
19243: LD_VAR 0 4
19247: PUSH
19248: FOR_IN
19249: IFFALSE 19295
// for j = 1 to 3 do
19251: LD_ADDR_VAR 0 3
19255: PUSH
19256: DOUBLE
19257: LD_INT 1
19259: DEC
19260: ST_TO_ADDR
19261: LD_INT 3
19263: PUSH
19264: FOR_TO
19265: IFFALSE 19291
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19267: LD_VAR 0 2
19271: PPUSH
19272: CALL_OW 274
19276: PPUSH
19277: LD_VAR 0 3
19281: PPUSH
19282: LD_INT 99999
19284: PPUSH
19285: CALL_OW 277
19289: GO 19264
19291: POP
19292: POP
19293: GO 19248
19295: POP
19296: POP
// end ;
19297: LD_VAR 0 1
19301: RET
// export function hHackSetLevel10 ; var i , j ; begin
19302: LD_INT 0
19304: PPUSH
19305: PPUSH
19306: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19307: LD_ADDR_VAR 0 2
19311: PUSH
19312: LD_INT 21
19314: PUSH
19315: LD_INT 1
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PPUSH
19322: CALL_OW 69
19326: PUSH
19327: FOR_IN
19328: IFFALSE 19380
// if IsSelected ( i ) then
19330: LD_VAR 0 2
19334: PPUSH
19335: CALL_OW 306
19339: IFFALSE 19378
// begin for j := 1 to 4 do
19341: LD_ADDR_VAR 0 3
19345: PUSH
19346: DOUBLE
19347: LD_INT 1
19349: DEC
19350: ST_TO_ADDR
19351: LD_INT 4
19353: PUSH
19354: FOR_TO
19355: IFFALSE 19376
// SetSkill ( i , j , 10 ) ;
19357: LD_VAR 0 2
19361: PPUSH
19362: LD_VAR 0 3
19366: PPUSH
19367: LD_INT 10
19369: PPUSH
19370: CALL_OW 237
19374: GO 19354
19376: POP
19377: POP
// end ;
19378: GO 19327
19380: POP
19381: POP
// end ;
19382: LD_VAR 0 1
19386: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19387: LD_INT 0
19389: PPUSH
19390: PPUSH
19391: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19392: LD_ADDR_VAR 0 2
19396: PUSH
19397: LD_INT 22
19399: PUSH
19400: LD_OWVAR 2
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PUSH
19409: LD_INT 21
19411: PUSH
19412: LD_INT 1
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PPUSH
19423: CALL_OW 69
19427: PUSH
19428: FOR_IN
19429: IFFALSE 19470
// begin for j := 1 to 4 do
19431: LD_ADDR_VAR 0 3
19435: PUSH
19436: DOUBLE
19437: LD_INT 1
19439: DEC
19440: ST_TO_ADDR
19441: LD_INT 4
19443: PUSH
19444: FOR_TO
19445: IFFALSE 19466
// SetSkill ( i , j , 10 ) ;
19447: LD_VAR 0 2
19451: PPUSH
19452: LD_VAR 0 3
19456: PPUSH
19457: LD_INT 10
19459: PPUSH
19460: CALL_OW 237
19464: GO 19444
19466: POP
19467: POP
// end ;
19468: GO 19428
19470: POP
19471: POP
// end ;
19472: LD_VAR 0 1
19476: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19477: LD_INT 0
19479: PPUSH
// uc_side := your_side ;
19480: LD_ADDR_OWVAR 20
19484: PUSH
19485: LD_OWVAR 2
19489: ST_TO_ADDR
// uc_nation := nation ;
19490: LD_ADDR_OWVAR 21
19494: PUSH
19495: LD_VAR 0 1
19499: ST_TO_ADDR
// InitHc ;
19500: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19504: LD_INT 0
19506: PPUSH
19507: LD_VAR 0 2
19511: PPUSH
19512: LD_VAR 0 3
19516: PPUSH
19517: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19521: LD_VAR 0 4
19525: PPUSH
19526: LD_VAR 0 5
19530: PPUSH
19531: CALL_OW 428
19535: PUSH
19536: LD_INT 0
19538: EQUAL
19539: IFFALSE 19563
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19541: CALL_OW 44
19545: PPUSH
19546: LD_VAR 0 4
19550: PPUSH
19551: LD_VAR 0 5
19555: PPUSH
19556: LD_INT 1
19558: PPUSH
19559: CALL_OW 48
// end ;
19563: LD_VAR 0 6
19567: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19568: LD_INT 0
19570: PPUSH
19571: PPUSH
// uc_side := your_side ;
19572: LD_ADDR_OWVAR 20
19576: PUSH
19577: LD_OWVAR 2
19581: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19582: LD_VAR 0 1
19586: PUSH
19587: LD_INT 1
19589: PUSH
19590: LD_INT 2
19592: PUSH
19593: LD_INT 3
19595: PUSH
19596: LD_INT 4
19598: PUSH
19599: LD_INT 5
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: IN
19609: IFFALSE 19621
// uc_nation := nation_american else
19611: LD_ADDR_OWVAR 21
19615: PUSH
19616: LD_INT 1
19618: ST_TO_ADDR
19619: GO 19664
// if chassis in [ 11 , 12 , 13 , 14 ] then
19621: LD_VAR 0 1
19625: PUSH
19626: LD_INT 11
19628: PUSH
19629: LD_INT 12
19631: PUSH
19632: LD_INT 13
19634: PUSH
19635: LD_INT 14
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: IN
19644: IFFALSE 19656
// uc_nation := nation_arabian else
19646: LD_ADDR_OWVAR 21
19650: PUSH
19651: LD_INT 2
19653: ST_TO_ADDR
19654: GO 19664
// uc_nation := nation_russian ;
19656: LD_ADDR_OWVAR 21
19660: PUSH
19661: LD_INT 3
19663: ST_TO_ADDR
// vc_chassis := chassis ;
19664: LD_ADDR_OWVAR 37
19668: PUSH
19669: LD_VAR 0 1
19673: ST_TO_ADDR
// vc_engine := engine ;
19674: LD_ADDR_OWVAR 39
19678: PUSH
19679: LD_VAR 0 2
19683: ST_TO_ADDR
// vc_control := control ;
19684: LD_ADDR_OWVAR 38
19688: PUSH
19689: LD_VAR 0 3
19693: ST_TO_ADDR
// vc_weapon := weapon ;
19694: LD_ADDR_OWVAR 40
19698: PUSH
19699: LD_VAR 0 4
19703: ST_TO_ADDR
// un := CreateVehicle ;
19704: LD_ADDR_VAR 0 8
19708: PUSH
19709: CALL_OW 45
19713: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19714: LD_VAR 0 8
19718: PPUSH
19719: LD_INT 0
19721: PPUSH
19722: LD_INT 5
19724: PPUSH
19725: CALL_OW 12
19729: PPUSH
19730: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19734: LD_VAR 0 8
19738: PPUSH
19739: LD_VAR 0 5
19743: PPUSH
19744: LD_VAR 0 6
19748: PPUSH
19749: LD_INT 1
19751: PPUSH
19752: CALL_OW 48
// end ;
19756: LD_VAR 0 7
19760: RET
// export hInvincible ; every 1 do
19761: GO 19763
19763: DISABLE
// hInvincible := [ ] ;
19764: LD_ADDR_EXP 82
19768: PUSH
19769: EMPTY
19770: ST_TO_ADDR
19771: END
// every 10 do var i ;
19772: GO 19774
19774: DISABLE
19775: LD_INT 0
19777: PPUSH
// begin enable ;
19778: ENABLE
// if not hInvincible then
19779: LD_EXP 82
19783: NOT
19784: IFFALSE 19788
// exit ;
19786: GO 19832
// for i in hInvincible do
19788: LD_ADDR_VAR 0 1
19792: PUSH
19793: LD_EXP 82
19797: PUSH
19798: FOR_IN
19799: IFFALSE 19830
// if GetLives ( i ) < 1000 then
19801: LD_VAR 0 1
19805: PPUSH
19806: CALL_OW 256
19810: PUSH
19811: LD_INT 1000
19813: LESS
19814: IFFALSE 19828
// SetLives ( i , 1000 ) ;
19816: LD_VAR 0 1
19820: PPUSH
19821: LD_INT 1000
19823: PPUSH
19824: CALL_OW 234
19828: GO 19798
19830: POP
19831: POP
// end ;
19832: PPOPN 1
19834: END
// export function hHackInvincible ; var i ; begin
19835: LD_INT 0
19837: PPUSH
19838: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19839: LD_ADDR_VAR 0 2
19843: PUSH
19844: LD_INT 2
19846: PUSH
19847: LD_INT 21
19849: PUSH
19850: LD_INT 1
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: LD_INT 21
19859: PUSH
19860: LD_INT 2
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: LIST
19871: PPUSH
19872: CALL_OW 69
19876: PUSH
19877: FOR_IN
19878: IFFALSE 19939
// if IsSelected ( i ) then
19880: LD_VAR 0 2
19884: PPUSH
19885: CALL_OW 306
19889: IFFALSE 19937
// begin if i in hInvincible then
19891: LD_VAR 0 2
19895: PUSH
19896: LD_EXP 82
19900: IN
19901: IFFALSE 19921
// hInvincible := hInvincible diff i else
19903: LD_ADDR_EXP 82
19907: PUSH
19908: LD_EXP 82
19912: PUSH
19913: LD_VAR 0 2
19917: DIFF
19918: ST_TO_ADDR
19919: GO 19937
// hInvincible := hInvincible union i ;
19921: LD_ADDR_EXP 82
19925: PUSH
19926: LD_EXP 82
19930: PUSH
19931: LD_VAR 0 2
19935: UNION
19936: ST_TO_ADDR
// end ;
19937: GO 19877
19939: POP
19940: POP
// end ;
19941: LD_VAR 0 1
19945: RET
// export function hHackInvisible ; var i , j ; begin
19946: LD_INT 0
19948: PPUSH
19949: PPUSH
19950: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19951: LD_ADDR_VAR 0 2
19955: PUSH
19956: LD_INT 21
19958: PUSH
19959: LD_INT 1
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PPUSH
19966: CALL_OW 69
19970: PUSH
19971: FOR_IN
19972: IFFALSE 19996
// if IsSelected ( i ) then
19974: LD_VAR 0 2
19978: PPUSH
19979: CALL_OW 306
19983: IFFALSE 19994
// ComForceInvisible ( i ) ;
19985: LD_VAR 0 2
19989: PPUSH
19990: CALL_OW 496
19994: GO 19971
19996: POP
19997: POP
// end ;
19998: LD_VAR 0 1
20002: RET
// export function hHackChangeYourSide ; begin
20003: LD_INT 0
20005: PPUSH
// if your_side = 8 then
20006: LD_OWVAR 2
20010: PUSH
20011: LD_INT 8
20013: EQUAL
20014: IFFALSE 20026
// your_side := 0 else
20016: LD_ADDR_OWVAR 2
20020: PUSH
20021: LD_INT 0
20023: ST_TO_ADDR
20024: GO 20040
// your_side := your_side + 1 ;
20026: LD_ADDR_OWVAR 2
20030: PUSH
20031: LD_OWVAR 2
20035: PUSH
20036: LD_INT 1
20038: PLUS
20039: ST_TO_ADDR
// end ;
20040: LD_VAR 0 1
20044: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20045: LD_INT 0
20047: PPUSH
20048: PPUSH
20049: PPUSH
// for i in all_units do
20050: LD_ADDR_VAR 0 2
20054: PUSH
20055: LD_OWVAR 3
20059: PUSH
20060: FOR_IN
20061: IFFALSE 20139
// if IsSelected ( i ) then
20063: LD_VAR 0 2
20067: PPUSH
20068: CALL_OW 306
20072: IFFALSE 20137
// begin j := GetSide ( i ) ;
20074: LD_ADDR_VAR 0 3
20078: PUSH
20079: LD_VAR 0 2
20083: PPUSH
20084: CALL_OW 255
20088: ST_TO_ADDR
// if j = 8 then
20089: LD_VAR 0 3
20093: PUSH
20094: LD_INT 8
20096: EQUAL
20097: IFFALSE 20109
// j := 0 else
20099: LD_ADDR_VAR 0 3
20103: PUSH
20104: LD_INT 0
20106: ST_TO_ADDR
20107: GO 20123
// j := j + 1 ;
20109: LD_ADDR_VAR 0 3
20113: PUSH
20114: LD_VAR 0 3
20118: PUSH
20119: LD_INT 1
20121: PLUS
20122: ST_TO_ADDR
// SetSide ( i , j ) ;
20123: LD_VAR 0 2
20127: PPUSH
20128: LD_VAR 0 3
20132: PPUSH
20133: CALL_OW 235
// end ;
20137: GO 20060
20139: POP
20140: POP
// end ;
20141: LD_VAR 0 1
20145: RET
// export function hHackFog ; begin
20146: LD_INT 0
20148: PPUSH
// FogOff ( true ) ;
20149: LD_INT 1
20151: PPUSH
20152: CALL_OW 344
// end ;
20156: LD_VAR 0 1
20160: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20161: LD_INT 0
20163: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20164: LD_VAR 0 1
20168: PPUSH
20169: LD_VAR 0 2
20173: PPUSH
20174: LD_VAR 0 3
20178: PPUSH
20179: LD_INT 1
20181: PPUSH
20182: LD_INT 1
20184: PPUSH
20185: CALL_OW 483
// CenterOnXY ( x , y ) ;
20189: LD_VAR 0 2
20193: PPUSH
20194: LD_VAR 0 3
20198: PPUSH
20199: CALL_OW 84
// end ;
20203: LD_VAR 0 4
20207: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
20208: LD_INT 0
20210: PPUSH
20211: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
20212: LD_VAR 0 1
20216: NOT
20217: PUSH
20218: LD_VAR 0 2
20222: PPUSH
20223: LD_VAR 0 3
20227: PPUSH
20228: CALL_OW 488
20232: NOT
20233: OR
20234: PUSH
20235: LD_VAR 0 1
20239: PPUSH
20240: CALL_OW 266
20244: PUSH
20245: LD_INT 3
20247: NONEQUAL
20248: PUSH
20249: LD_VAR 0 1
20253: PPUSH
20254: CALL_OW 247
20258: PUSH
20259: LD_INT 1
20261: EQUAL
20262: NOT
20263: AND
20264: OR
20265: IFFALSE 20269
// exit ;
20267: GO 20418
// if GetType ( factory ) = unit_human then
20269: LD_VAR 0 1
20273: PPUSH
20274: CALL_OW 247
20278: PUSH
20279: LD_INT 1
20281: EQUAL
20282: IFFALSE 20299
// factory := IsInUnit ( factory ) ;
20284: LD_ADDR_VAR 0 1
20288: PUSH
20289: LD_VAR 0 1
20293: PPUSH
20294: CALL_OW 310
20298: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20299: LD_VAR 0 1
20303: PPUSH
20304: CALL_OW 266
20308: PUSH
20309: LD_INT 3
20311: NONEQUAL
20312: IFFALSE 20316
// exit ;
20314: GO 20418
// if HexInfo ( x , y ) = factory then
20316: LD_VAR 0 2
20320: PPUSH
20321: LD_VAR 0 3
20325: PPUSH
20326: CALL_OW 428
20330: PUSH
20331: LD_VAR 0 1
20335: EQUAL
20336: IFFALSE 20363
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20338: LD_ADDR_EXP 83
20342: PUSH
20343: LD_EXP 83
20347: PPUSH
20348: LD_VAR 0 1
20352: PPUSH
20353: LD_INT 0
20355: PPUSH
20356: CALL_OW 1
20360: ST_TO_ADDR
20361: GO 20414
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
20363: LD_ADDR_EXP 83
20367: PUSH
20368: LD_EXP 83
20372: PPUSH
20373: LD_VAR 0 1
20377: PPUSH
20378: LD_VAR 0 1
20382: PPUSH
20383: CALL_OW 255
20387: PUSH
20388: LD_VAR 0 1
20392: PUSH
20393: LD_VAR 0 2
20397: PUSH
20398: LD_VAR 0 3
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: PPUSH
20409: CALL_OW 1
20413: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20414: CALL 20423 0 0
// end ;
20418: LD_VAR 0 4
20422: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
20423: LD_INT 0
20425: PPUSH
20426: PPUSH
20427: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20428: LD_STRING resetFactoryWaypoint();
20430: PPUSH
20431: CALL_OW 559
// if factoryWaypoints then
20435: LD_EXP 83
20439: IFFALSE 20565
// begin list := PrepareArray ( factoryWaypoints ) ;
20441: LD_ADDR_VAR 0 3
20445: PUSH
20446: LD_EXP 83
20450: PPUSH
20451: CALL 67015 0 1
20455: ST_TO_ADDR
// for i := 1 to list do
20456: LD_ADDR_VAR 0 2
20460: PUSH
20461: DOUBLE
20462: LD_INT 1
20464: DEC
20465: ST_TO_ADDR
20466: LD_VAR 0 3
20470: PUSH
20471: FOR_TO
20472: IFFALSE 20563
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20474: LD_STRING setFactoryWaypointXY(
20476: PUSH
20477: LD_VAR 0 3
20481: PUSH
20482: LD_VAR 0 2
20486: ARRAY
20487: PUSH
20488: LD_INT 1
20490: ARRAY
20491: STR
20492: PUSH
20493: LD_STRING ,
20495: STR
20496: PUSH
20497: LD_VAR 0 3
20501: PUSH
20502: LD_VAR 0 2
20506: ARRAY
20507: PUSH
20508: LD_INT 2
20510: ARRAY
20511: STR
20512: PUSH
20513: LD_STRING ,
20515: STR
20516: PUSH
20517: LD_VAR 0 3
20521: PUSH
20522: LD_VAR 0 2
20526: ARRAY
20527: PUSH
20528: LD_INT 3
20530: ARRAY
20531: STR
20532: PUSH
20533: LD_STRING ,
20535: STR
20536: PUSH
20537: LD_VAR 0 3
20541: PUSH
20542: LD_VAR 0 2
20546: ARRAY
20547: PUSH
20548: LD_INT 4
20550: ARRAY
20551: STR
20552: PUSH
20553: LD_STRING )
20555: STR
20556: PPUSH
20557: CALL_OW 559
20561: GO 20471
20563: POP
20564: POP
// end ; end ;
20565: LD_VAR 0 1
20569: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20570: LD_INT 0
20572: PPUSH
// if HexInfo ( x , y ) = warehouse then
20573: LD_VAR 0 2
20577: PPUSH
20578: LD_VAR 0 3
20582: PPUSH
20583: CALL_OW 428
20587: PUSH
20588: LD_VAR 0 1
20592: EQUAL
20593: IFFALSE 20620
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20595: LD_ADDR_EXP 84
20599: PUSH
20600: LD_EXP 84
20604: PPUSH
20605: LD_VAR 0 1
20609: PPUSH
20610: LD_INT 0
20612: PPUSH
20613: CALL_OW 1
20617: ST_TO_ADDR
20618: GO 20671
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20620: LD_ADDR_EXP 84
20624: PUSH
20625: LD_EXP 84
20629: PPUSH
20630: LD_VAR 0 1
20634: PPUSH
20635: LD_VAR 0 1
20639: PPUSH
20640: CALL_OW 255
20644: PUSH
20645: LD_VAR 0 1
20649: PUSH
20650: LD_VAR 0 2
20654: PUSH
20655: LD_VAR 0 3
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: PPUSH
20666: CALL_OW 1
20670: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20671: CALL 20680 0 0
// end ;
20675: LD_VAR 0 4
20679: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
20680: LD_INT 0
20682: PPUSH
20683: PPUSH
20684: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
20685: LD_STRING resetWarehouseGatheringPoints();
20687: PPUSH
20688: CALL_OW 559
// if warehouseGatheringPoints then
20692: LD_EXP 84
20696: IFFALSE 20822
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
20698: LD_ADDR_VAR 0 3
20702: PUSH
20703: LD_EXP 84
20707: PPUSH
20708: CALL 67015 0 1
20712: ST_TO_ADDR
// for i := 1 to list do
20713: LD_ADDR_VAR 0 2
20717: PUSH
20718: DOUBLE
20719: LD_INT 1
20721: DEC
20722: ST_TO_ADDR
20723: LD_VAR 0 3
20727: PUSH
20728: FOR_TO
20729: IFFALSE 20820
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20731: LD_STRING setWarehouseGatheringPointXY(
20733: PUSH
20734: LD_VAR 0 3
20738: PUSH
20739: LD_VAR 0 2
20743: ARRAY
20744: PUSH
20745: LD_INT 1
20747: ARRAY
20748: STR
20749: PUSH
20750: LD_STRING ,
20752: STR
20753: PUSH
20754: LD_VAR 0 3
20758: PUSH
20759: LD_VAR 0 2
20763: ARRAY
20764: PUSH
20765: LD_INT 2
20767: ARRAY
20768: STR
20769: PUSH
20770: LD_STRING ,
20772: STR
20773: PUSH
20774: LD_VAR 0 3
20778: PUSH
20779: LD_VAR 0 2
20783: ARRAY
20784: PUSH
20785: LD_INT 3
20787: ARRAY
20788: STR
20789: PUSH
20790: LD_STRING ,
20792: STR
20793: PUSH
20794: LD_VAR 0 3
20798: PUSH
20799: LD_VAR 0 2
20803: ARRAY
20804: PUSH
20805: LD_INT 4
20807: ARRAY
20808: STR
20809: PUSH
20810: LD_STRING )
20812: STR
20813: PPUSH
20814: CALL_OW 559
20818: GO 20728
20820: POP
20821: POP
// end ; end ;
20822: LD_VAR 0 1
20826: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20827: LD_EXP 84
20831: IFFALSE 21516
20833: GO 20835
20835: DISABLE
20836: LD_INT 0
20838: PPUSH
20839: PPUSH
20840: PPUSH
20841: PPUSH
20842: PPUSH
20843: PPUSH
20844: PPUSH
20845: PPUSH
20846: PPUSH
// begin enable ;
20847: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
20848: LD_ADDR_VAR 0 3
20852: PUSH
20853: LD_EXP 84
20857: PPUSH
20858: CALL 67015 0 1
20862: ST_TO_ADDR
// if not list then
20863: LD_VAR 0 3
20867: NOT
20868: IFFALSE 20872
// exit ;
20870: GO 21516
// for i := 1 to list do
20872: LD_ADDR_VAR 0 1
20876: PUSH
20877: DOUBLE
20878: LD_INT 1
20880: DEC
20881: ST_TO_ADDR
20882: LD_VAR 0 3
20886: PUSH
20887: FOR_TO
20888: IFFALSE 21514
// begin depot := list [ i ] [ 2 ] ;
20890: LD_ADDR_VAR 0 8
20894: PUSH
20895: LD_VAR 0 3
20899: PUSH
20900: LD_VAR 0 1
20904: ARRAY
20905: PUSH
20906: LD_INT 2
20908: ARRAY
20909: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
20910: LD_ADDR_VAR 0 5
20914: PUSH
20915: LD_VAR 0 3
20919: PUSH
20920: LD_VAR 0 1
20924: ARRAY
20925: PUSH
20926: LD_INT 1
20928: ARRAY
20929: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
20930: LD_VAR 0 8
20934: PPUSH
20935: CALL_OW 301
20939: PUSH
20940: LD_VAR 0 5
20944: PUSH
20945: LD_VAR 0 8
20949: PPUSH
20950: CALL_OW 255
20954: NONEQUAL
20955: OR
20956: IFFALSE 20985
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
20958: LD_ADDR_EXP 84
20962: PUSH
20963: LD_EXP 84
20967: PPUSH
20968: LD_VAR 0 8
20972: PPUSH
20973: LD_INT 0
20975: PPUSH
20976: CALL_OW 1
20980: ST_TO_ADDR
// exit ;
20981: POP
20982: POP
20983: GO 21516
// end ; x := list [ i ] [ 3 ] ;
20985: LD_ADDR_VAR 0 6
20989: PUSH
20990: LD_VAR 0 3
20994: PUSH
20995: LD_VAR 0 1
20999: ARRAY
21000: PUSH
21001: LD_INT 3
21003: ARRAY
21004: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
21005: LD_ADDR_VAR 0 7
21009: PUSH
21010: LD_VAR 0 3
21014: PUSH
21015: LD_VAR 0 1
21019: ARRAY
21020: PUSH
21021: LD_INT 4
21023: ARRAY
21024: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
21025: LD_ADDR_VAR 0 9
21029: PUSH
21030: LD_VAR 0 6
21034: PPUSH
21035: LD_VAR 0 7
21039: PPUSH
21040: LD_INT 16
21042: PPUSH
21043: CALL 65603 0 3
21047: ST_TO_ADDR
// if not cratesNearbyPoint then
21048: LD_VAR 0 9
21052: NOT
21053: IFFALSE 21059
// exit ;
21055: POP
21056: POP
21057: GO 21516
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
21059: LD_ADDR_VAR 0 4
21063: PUSH
21064: LD_INT 22
21066: PUSH
21067: LD_VAR 0 5
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: LD_INT 3
21078: PUSH
21079: LD_INT 60
21081: PUSH
21082: EMPTY
21083: LIST
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: LD_INT 91
21091: PUSH
21092: LD_VAR 0 8
21096: PUSH
21097: LD_INT 6
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: LIST
21104: PUSH
21105: LD_INT 2
21107: PUSH
21108: LD_INT 25
21110: PUSH
21111: LD_INT 2
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: LD_INT 25
21120: PUSH
21121: LD_INT 16
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: LIST
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: PPUSH
21139: CALL_OW 69
21143: PUSH
21144: LD_VAR 0 8
21148: PPUSH
21149: CALL_OW 313
21153: PPUSH
21154: LD_INT 3
21156: PUSH
21157: LD_INT 60
21159: PUSH
21160: EMPTY
21161: LIST
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: LD_INT 2
21169: PUSH
21170: LD_INT 25
21172: PUSH
21173: LD_INT 2
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: LD_INT 25
21182: PUSH
21183: LD_INT 16
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: EMPTY
21191: LIST
21192: LIST
21193: LIST
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: PPUSH
21199: CALL_OW 72
21203: UNION
21204: ST_TO_ADDR
// if tmp then
21205: LD_VAR 0 4
21209: IFFALSE 21289
// begin tmp := ShrinkArray ( tmp , 3 ) ;
21211: LD_ADDR_VAR 0 4
21215: PUSH
21216: LD_VAR 0 4
21220: PPUSH
21221: LD_INT 3
21223: PPUSH
21224: CALL 63572 0 2
21228: ST_TO_ADDR
// for j in tmp do
21229: LD_ADDR_VAR 0 2
21233: PUSH
21234: LD_VAR 0 4
21238: PUSH
21239: FOR_IN
21240: IFFALSE 21283
// begin if IsInUnit ( j ) then
21242: LD_VAR 0 2
21246: PPUSH
21247: CALL_OW 310
21251: IFFALSE 21262
// ComExit ( j ) ;
21253: LD_VAR 0 2
21257: PPUSH
21258: CALL 63655 0 1
// AddComCollect ( j , x , y ) ;
21262: LD_VAR 0 2
21266: PPUSH
21267: LD_VAR 0 6
21271: PPUSH
21272: LD_VAR 0 7
21276: PPUSH
21277: CALL_OW 177
// end ;
21281: GO 21239
21283: POP
21284: POP
// exit ;
21285: POP
21286: POP
21287: GO 21516
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
21289: LD_ADDR_VAR 0 4
21293: PUSH
21294: LD_INT 22
21296: PUSH
21297: LD_VAR 0 5
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: LD_INT 91
21308: PUSH
21309: LD_VAR 0 8
21313: PUSH
21314: LD_INT 8
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: LIST
21321: PUSH
21322: LD_INT 2
21324: PUSH
21325: LD_INT 34
21327: PUSH
21328: LD_INT 12
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: LD_INT 34
21337: PUSH
21338: LD_INT 51
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: LD_INT 34
21347: PUSH
21348: LD_INT 32
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: LD_INT 34
21357: PUSH
21358: LD_INT 89
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: LIST
21376: PPUSH
21377: CALL_OW 69
21381: ST_TO_ADDR
// if tmp then
21382: LD_VAR 0 4
21386: IFFALSE 21512
// begin for j in tmp do
21388: LD_ADDR_VAR 0 2
21392: PUSH
21393: LD_VAR 0 4
21397: PUSH
21398: FOR_IN
21399: IFFALSE 21510
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
21401: LD_VAR 0 2
21405: PPUSH
21406: CALL_OW 262
21410: PUSH
21411: LD_INT 3
21413: EQUAL
21414: PUSH
21415: LD_VAR 0 2
21419: PPUSH
21420: CALL_OW 261
21424: PUSH
21425: LD_INT 20
21427: GREATER
21428: OR
21429: PUSH
21430: LD_VAR 0 2
21434: PPUSH
21435: CALL_OW 314
21439: NOT
21440: AND
21441: PUSH
21442: LD_VAR 0 2
21446: PPUSH
21447: CALL_OW 263
21451: PUSH
21452: LD_INT 1
21454: NONEQUAL
21455: PUSH
21456: LD_VAR 0 2
21460: PPUSH
21461: CALL_OW 311
21465: OR
21466: AND
21467: IFFALSE 21508
// begin ComCollect ( j , x , y ) ;
21469: LD_VAR 0 2
21473: PPUSH
21474: LD_VAR 0 6
21478: PPUSH
21479: LD_VAR 0 7
21483: PPUSH
21484: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
21488: LD_VAR 0 2
21492: PPUSH
21493: LD_VAR 0 8
21497: PPUSH
21498: CALL_OW 172
// exit ;
21502: POP
21503: POP
21504: POP
21505: POP
21506: GO 21516
// end ;
21508: GO 21398
21510: POP
21511: POP
// end ; end ;
21512: GO 20887
21514: POP
21515: POP
// end ; end_of_file
21516: PPOPN 9
21518: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21519: LD_INT 0
21521: PPUSH
21522: PPUSH
21523: PPUSH
21524: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21525: LD_VAR 0 1
21529: PPUSH
21530: CALL_OW 264
21534: PUSH
21535: LD_INT 91
21537: EQUAL
21538: IFFALSE 21610
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21540: LD_INT 68
21542: PPUSH
21543: LD_VAR 0 1
21547: PPUSH
21548: CALL_OW 255
21552: PPUSH
21553: CALL_OW 321
21557: PUSH
21558: LD_INT 2
21560: EQUAL
21561: IFFALSE 21573
// eff := 70 else
21563: LD_ADDR_VAR 0 4
21567: PUSH
21568: LD_INT 70
21570: ST_TO_ADDR
21571: GO 21581
// eff := 30 ;
21573: LD_ADDR_VAR 0 4
21577: PUSH
21578: LD_INT 30
21580: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21581: LD_VAR 0 1
21585: PPUSH
21586: CALL_OW 250
21590: PPUSH
21591: LD_VAR 0 1
21595: PPUSH
21596: CALL_OW 251
21600: PPUSH
21601: LD_VAR 0 4
21605: PPUSH
21606: CALL_OW 495
// end ; end ;
21610: LD_VAR 0 2
21614: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21615: LD_INT 0
21617: PPUSH
// end ;
21618: LD_VAR 0 4
21622: RET
// export function SOS_Command ( cmd ) ; begin
21623: LD_INT 0
21625: PPUSH
// end ;
21626: LD_VAR 0 2
21630: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21631: LD_INT 0
21633: PPUSH
// end ;
21634: LD_VAR 0 6
21638: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
21639: LD_INT 0
21641: PPUSH
21642: PPUSH
// if not vehicle or not factory then
21643: LD_VAR 0 1
21647: NOT
21648: PUSH
21649: LD_VAR 0 2
21653: NOT
21654: OR
21655: IFFALSE 21659
// exit ;
21657: GO 21890
// if factoryWaypoints >= factory then
21659: LD_EXP 83
21663: PUSH
21664: LD_VAR 0 2
21668: GREATEREQUAL
21669: IFFALSE 21890
// if factoryWaypoints [ factory ] then
21671: LD_EXP 83
21675: PUSH
21676: LD_VAR 0 2
21680: ARRAY
21681: IFFALSE 21890
// begin if GetControl ( vehicle ) = control_manual then
21683: LD_VAR 0 1
21687: PPUSH
21688: CALL_OW 263
21692: PUSH
21693: LD_INT 1
21695: EQUAL
21696: IFFALSE 21777
// begin driver := IsDrivenBy ( vehicle ) ;
21698: LD_ADDR_VAR 0 4
21702: PUSH
21703: LD_VAR 0 1
21707: PPUSH
21708: CALL_OW 311
21712: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21713: LD_VAR 0 4
21717: PPUSH
21718: LD_EXP 83
21722: PUSH
21723: LD_VAR 0 2
21727: ARRAY
21728: PUSH
21729: LD_INT 3
21731: ARRAY
21732: PPUSH
21733: LD_EXP 83
21737: PUSH
21738: LD_VAR 0 2
21742: ARRAY
21743: PUSH
21744: LD_INT 4
21746: ARRAY
21747: PPUSH
21748: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21752: LD_VAR 0 4
21756: PPUSH
21757: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21761: LD_VAR 0 4
21765: PPUSH
21766: LD_VAR 0 2
21770: PPUSH
21771: CALL_OW 180
// end else
21775: GO 21890
// if GetControl ( vehicle ) = control_remote then
21777: LD_VAR 0 1
21781: PPUSH
21782: CALL_OW 263
21786: PUSH
21787: LD_INT 2
21789: EQUAL
21790: IFFALSE 21851
// begin wait ( 0 0$2 ) ;
21792: LD_INT 70
21794: PPUSH
21795: CALL_OW 67
// if Connect ( vehicle ) then
21799: LD_VAR 0 1
21803: PPUSH
21804: CALL 33914 0 1
21808: IFFALSE 21849
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21810: LD_VAR 0 1
21814: PPUSH
21815: LD_EXP 83
21819: PUSH
21820: LD_VAR 0 2
21824: ARRAY
21825: PUSH
21826: LD_INT 3
21828: ARRAY
21829: PPUSH
21830: LD_EXP 83
21834: PUSH
21835: LD_VAR 0 2
21839: ARRAY
21840: PUSH
21841: LD_INT 4
21843: ARRAY
21844: PPUSH
21845: CALL_OW 171
// end else
21849: GO 21890
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21851: LD_VAR 0 1
21855: PPUSH
21856: LD_EXP 83
21860: PUSH
21861: LD_VAR 0 2
21865: ARRAY
21866: PUSH
21867: LD_INT 3
21869: ARRAY
21870: PPUSH
21871: LD_EXP 83
21875: PUSH
21876: LD_VAR 0 2
21880: ARRAY
21881: PUSH
21882: LD_INT 4
21884: ARRAY
21885: PPUSH
21886: CALL_OW 171
// end ; end ;
21890: LD_VAR 0 3
21894: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21895: LD_INT 0
21897: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21898: LD_VAR 0 1
21902: PUSH
21903: LD_INT 250
21905: EQUAL
21906: PUSH
21907: LD_VAR 0 2
21911: PPUSH
21912: CALL_OW 264
21916: PUSH
21917: LD_INT 81
21919: EQUAL
21920: AND
21921: IFFALSE 21942
// MinerPlaceMine ( unit , x , y ) ;
21923: LD_VAR 0 2
21927: PPUSH
21928: LD_VAR 0 4
21932: PPUSH
21933: LD_VAR 0 5
21937: PPUSH
21938: CALL 24327 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21942: LD_VAR 0 1
21946: PUSH
21947: LD_INT 251
21949: EQUAL
21950: PUSH
21951: LD_VAR 0 2
21955: PPUSH
21956: CALL_OW 264
21960: PUSH
21961: LD_INT 81
21963: EQUAL
21964: AND
21965: IFFALSE 21986
// MinerDetonateMine ( unit , x , y ) ;
21967: LD_VAR 0 2
21971: PPUSH
21972: LD_VAR 0 4
21976: PPUSH
21977: LD_VAR 0 5
21981: PPUSH
21982: CALL 24602 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21986: LD_VAR 0 1
21990: PUSH
21991: LD_INT 252
21993: EQUAL
21994: PUSH
21995: LD_VAR 0 2
21999: PPUSH
22000: CALL_OW 264
22004: PUSH
22005: LD_INT 81
22007: EQUAL
22008: AND
22009: IFFALSE 22030
// MinerCreateMinefield ( unit , x , y ) ;
22011: LD_VAR 0 2
22015: PPUSH
22016: LD_VAR 0 4
22020: PPUSH
22021: LD_VAR 0 5
22025: PPUSH
22026: CALL 25019 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22030: LD_VAR 0 1
22034: PUSH
22035: LD_INT 253
22037: EQUAL
22038: PUSH
22039: LD_VAR 0 2
22043: PPUSH
22044: CALL_OW 257
22048: PUSH
22049: LD_INT 5
22051: EQUAL
22052: AND
22053: IFFALSE 22074
// ComBinocular ( unit , x , y ) ;
22055: LD_VAR 0 2
22059: PPUSH
22060: LD_VAR 0 4
22064: PPUSH
22065: LD_VAR 0 5
22069: PPUSH
22070: CALL 25388 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22074: LD_VAR 0 1
22078: PUSH
22079: LD_INT 254
22081: EQUAL
22082: PUSH
22083: LD_VAR 0 2
22087: PPUSH
22088: CALL_OW 264
22092: PUSH
22093: LD_INT 99
22095: EQUAL
22096: AND
22097: PUSH
22098: LD_VAR 0 3
22102: PPUSH
22103: CALL_OW 263
22107: PUSH
22108: LD_INT 3
22110: EQUAL
22111: AND
22112: IFFALSE 22128
// HackDestroyVehicle ( unit , selectedUnit ) ;
22114: LD_VAR 0 2
22118: PPUSH
22119: LD_VAR 0 3
22123: PPUSH
22124: CALL 23691 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22128: LD_VAR 0 1
22132: PUSH
22133: LD_INT 255
22135: EQUAL
22136: PUSH
22137: LD_VAR 0 2
22141: PPUSH
22142: CALL_OW 264
22146: PUSH
22147: LD_INT 14
22149: PUSH
22150: LD_INT 53
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: IN
22157: AND
22158: PUSH
22159: LD_VAR 0 4
22163: PPUSH
22164: LD_VAR 0 5
22168: PPUSH
22169: CALL_OW 488
22173: AND
22174: IFFALSE 22198
// CutTreeXYR ( unit , x , y , 12 ) ;
22176: LD_VAR 0 2
22180: PPUSH
22181: LD_VAR 0 4
22185: PPUSH
22186: LD_VAR 0 5
22190: PPUSH
22191: LD_INT 12
22193: PPUSH
22194: CALL 22261 0 4
// if cmd = 256 then
22198: LD_VAR 0 1
22202: PUSH
22203: LD_INT 256
22205: EQUAL
22206: IFFALSE 22227
// SetFactoryWaypoint ( unit , x , y ) ;
22208: LD_VAR 0 2
22212: PPUSH
22213: LD_VAR 0 4
22217: PPUSH
22218: LD_VAR 0 5
22222: PPUSH
22223: CALL 20208 0 3
// if cmd = 257 then
22227: LD_VAR 0 1
22231: PUSH
22232: LD_INT 257
22234: EQUAL
22235: IFFALSE 22256
// SetWarehouseGatheringPoint ( unit , x , y ) ;
22237: LD_VAR 0 2
22241: PPUSH
22242: LD_VAR 0 4
22246: PPUSH
22247: LD_VAR 0 5
22251: PPUSH
22252: CALL 20570 0 3
// end ;
22256: LD_VAR 0 6
22260: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22261: LD_INT 0
22263: PPUSH
22264: PPUSH
22265: PPUSH
22266: PPUSH
22267: PPUSH
22268: PPUSH
22269: PPUSH
22270: PPUSH
22271: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22272: LD_VAR 0 1
22276: NOT
22277: PUSH
22278: LD_VAR 0 2
22282: PPUSH
22283: LD_VAR 0 3
22287: PPUSH
22288: CALL_OW 488
22292: NOT
22293: OR
22294: PUSH
22295: LD_VAR 0 4
22299: NOT
22300: OR
22301: IFFALSE 22305
// exit ;
22303: GO 22645
// list := [ ] ;
22305: LD_ADDR_VAR 0 13
22309: PUSH
22310: EMPTY
22311: ST_TO_ADDR
// if x - r < 0 then
22312: LD_VAR 0 2
22316: PUSH
22317: LD_VAR 0 4
22321: MINUS
22322: PUSH
22323: LD_INT 0
22325: LESS
22326: IFFALSE 22338
// min_x := 0 else
22328: LD_ADDR_VAR 0 7
22332: PUSH
22333: LD_INT 0
22335: ST_TO_ADDR
22336: GO 22354
// min_x := x - r ;
22338: LD_ADDR_VAR 0 7
22342: PUSH
22343: LD_VAR 0 2
22347: PUSH
22348: LD_VAR 0 4
22352: MINUS
22353: ST_TO_ADDR
// if y - r < 0 then
22354: LD_VAR 0 3
22358: PUSH
22359: LD_VAR 0 4
22363: MINUS
22364: PUSH
22365: LD_INT 0
22367: LESS
22368: IFFALSE 22380
// min_y := 0 else
22370: LD_ADDR_VAR 0 8
22374: PUSH
22375: LD_INT 0
22377: ST_TO_ADDR
22378: GO 22396
// min_y := y - r ;
22380: LD_ADDR_VAR 0 8
22384: PUSH
22385: LD_VAR 0 3
22389: PUSH
22390: LD_VAR 0 4
22394: MINUS
22395: ST_TO_ADDR
// max_x := x + r ;
22396: LD_ADDR_VAR 0 9
22400: PUSH
22401: LD_VAR 0 2
22405: PUSH
22406: LD_VAR 0 4
22410: PLUS
22411: ST_TO_ADDR
// max_y := y + r ;
22412: LD_ADDR_VAR 0 10
22416: PUSH
22417: LD_VAR 0 3
22421: PUSH
22422: LD_VAR 0 4
22426: PLUS
22427: ST_TO_ADDR
// for _x = min_x to max_x do
22428: LD_ADDR_VAR 0 11
22432: PUSH
22433: DOUBLE
22434: LD_VAR 0 7
22438: DEC
22439: ST_TO_ADDR
22440: LD_VAR 0 9
22444: PUSH
22445: FOR_TO
22446: IFFALSE 22563
// for _y = min_y to max_y do
22448: LD_ADDR_VAR 0 12
22452: PUSH
22453: DOUBLE
22454: LD_VAR 0 8
22458: DEC
22459: ST_TO_ADDR
22460: LD_VAR 0 10
22464: PUSH
22465: FOR_TO
22466: IFFALSE 22559
// begin if not ValidHex ( _x , _y ) then
22468: LD_VAR 0 11
22472: PPUSH
22473: LD_VAR 0 12
22477: PPUSH
22478: CALL_OW 488
22482: NOT
22483: IFFALSE 22487
// continue ;
22485: GO 22465
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22487: LD_VAR 0 11
22491: PPUSH
22492: LD_VAR 0 12
22496: PPUSH
22497: CALL_OW 351
22501: PUSH
22502: LD_VAR 0 11
22506: PPUSH
22507: LD_VAR 0 12
22511: PPUSH
22512: CALL_OW 554
22516: AND
22517: IFFALSE 22557
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22519: LD_ADDR_VAR 0 13
22523: PUSH
22524: LD_VAR 0 13
22528: PPUSH
22529: LD_VAR 0 13
22533: PUSH
22534: LD_INT 1
22536: PLUS
22537: PPUSH
22538: LD_VAR 0 11
22542: PUSH
22543: LD_VAR 0 12
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: PPUSH
22552: CALL_OW 2
22556: ST_TO_ADDR
// end ;
22557: GO 22465
22559: POP
22560: POP
22561: GO 22445
22563: POP
22564: POP
// if not list then
22565: LD_VAR 0 13
22569: NOT
22570: IFFALSE 22574
// exit ;
22572: GO 22645
// for i in list do
22574: LD_ADDR_VAR 0 6
22578: PUSH
22579: LD_VAR 0 13
22583: PUSH
22584: FOR_IN
22585: IFFALSE 22643
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22587: LD_VAR 0 1
22591: PPUSH
22592: LD_STRING M
22594: PUSH
22595: LD_VAR 0 6
22599: PUSH
22600: LD_INT 1
22602: ARRAY
22603: PUSH
22604: LD_VAR 0 6
22608: PUSH
22609: LD_INT 2
22611: ARRAY
22612: PUSH
22613: LD_INT 0
22615: PUSH
22616: LD_INT 0
22618: PUSH
22619: LD_INT 0
22621: PUSH
22622: LD_INT 0
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: PUSH
22634: EMPTY
22635: LIST
22636: PPUSH
22637: CALL_OW 447
22641: GO 22584
22643: POP
22644: POP
// end ;
22645: LD_VAR 0 5
22649: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22650: LD_EXP 86
22654: NOT
22655: IFFALSE 22705
22657: GO 22659
22659: DISABLE
// begin initHack := true ;
22660: LD_ADDR_EXP 86
22664: PUSH
22665: LD_INT 1
22667: ST_TO_ADDR
// hackTanks := [ ] ;
22668: LD_ADDR_EXP 87
22672: PUSH
22673: EMPTY
22674: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22675: LD_ADDR_EXP 88
22679: PUSH
22680: EMPTY
22681: ST_TO_ADDR
// hackLimit := 3 ;
22682: LD_ADDR_EXP 89
22686: PUSH
22687: LD_INT 3
22689: ST_TO_ADDR
// hackDist := 12 ;
22690: LD_ADDR_EXP 90
22694: PUSH
22695: LD_INT 12
22697: ST_TO_ADDR
// hackCounter := [ ] ;
22698: LD_ADDR_EXP 91
22702: PUSH
22703: EMPTY
22704: ST_TO_ADDR
// end ;
22705: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22706: LD_EXP 86
22710: PUSH
22711: LD_INT 34
22713: PUSH
22714: LD_INT 99
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: PPUSH
22721: CALL_OW 69
22725: AND
22726: IFFALSE 22979
22728: GO 22730
22730: DISABLE
22731: LD_INT 0
22733: PPUSH
22734: PPUSH
// begin enable ;
22735: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22736: LD_ADDR_VAR 0 1
22740: PUSH
22741: LD_INT 34
22743: PUSH
22744: LD_INT 99
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PPUSH
22751: CALL_OW 69
22755: PUSH
22756: FOR_IN
22757: IFFALSE 22977
// begin if not i in hackTanks then
22759: LD_VAR 0 1
22763: PUSH
22764: LD_EXP 87
22768: IN
22769: NOT
22770: IFFALSE 22853
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22772: LD_ADDR_EXP 87
22776: PUSH
22777: LD_EXP 87
22781: PPUSH
22782: LD_EXP 87
22786: PUSH
22787: LD_INT 1
22789: PLUS
22790: PPUSH
22791: LD_VAR 0 1
22795: PPUSH
22796: CALL_OW 1
22800: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22801: LD_ADDR_EXP 88
22805: PUSH
22806: LD_EXP 88
22810: PPUSH
22811: LD_EXP 88
22815: PUSH
22816: LD_INT 1
22818: PLUS
22819: PPUSH
22820: EMPTY
22821: PPUSH
22822: CALL_OW 1
22826: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22827: LD_ADDR_EXP 91
22831: PUSH
22832: LD_EXP 91
22836: PPUSH
22837: LD_EXP 91
22841: PUSH
22842: LD_INT 1
22844: PLUS
22845: PPUSH
22846: EMPTY
22847: PPUSH
22848: CALL_OW 1
22852: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22853: LD_VAR 0 1
22857: PPUSH
22858: CALL_OW 302
22862: NOT
22863: IFFALSE 22876
// begin HackUnlinkAll ( i ) ;
22865: LD_VAR 0 1
22869: PPUSH
22870: CALL 22982 0 1
// continue ;
22874: GO 22756
// end ; HackCheckCapturedStatus ( i ) ;
22876: LD_VAR 0 1
22880: PPUSH
22881: CALL 23425 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22885: LD_ADDR_VAR 0 2
22889: PUSH
22890: LD_INT 81
22892: PUSH
22893: LD_VAR 0 1
22897: PPUSH
22898: CALL_OW 255
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 33
22909: PUSH
22910: LD_INT 3
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PUSH
22917: LD_INT 91
22919: PUSH
22920: LD_VAR 0 1
22924: PUSH
22925: LD_EXP 90
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 50
22937: PUSH
22938: EMPTY
22939: LIST
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: PPUSH
22947: CALL_OW 69
22951: ST_TO_ADDR
// if not tmp then
22952: LD_VAR 0 2
22956: NOT
22957: IFFALSE 22961
// continue ;
22959: GO 22756
// HackLink ( i , tmp ) ;
22961: LD_VAR 0 1
22965: PPUSH
22966: LD_VAR 0 2
22970: PPUSH
22971: CALL 23118 0 2
// end ;
22975: GO 22756
22977: POP
22978: POP
// end ;
22979: PPOPN 2
22981: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22982: LD_INT 0
22984: PPUSH
22985: PPUSH
22986: PPUSH
// if not hack in hackTanks then
22987: LD_VAR 0 1
22991: PUSH
22992: LD_EXP 87
22996: IN
22997: NOT
22998: IFFALSE 23002
// exit ;
23000: GO 23113
// index := GetElementIndex ( hackTanks , hack ) ;
23002: LD_ADDR_VAR 0 4
23006: PUSH
23007: LD_EXP 87
23011: PPUSH
23012: LD_VAR 0 1
23016: PPUSH
23017: CALL 30730 0 2
23021: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23022: LD_EXP 88
23026: PUSH
23027: LD_VAR 0 4
23031: ARRAY
23032: IFFALSE 23113
// begin for i in hackTanksCaptured [ index ] do
23034: LD_ADDR_VAR 0 3
23038: PUSH
23039: LD_EXP 88
23043: PUSH
23044: LD_VAR 0 4
23048: ARRAY
23049: PUSH
23050: FOR_IN
23051: IFFALSE 23077
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23053: LD_VAR 0 3
23057: PUSH
23058: LD_INT 1
23060: ARRAY
23061: PPUSH
23062: LD_VAR 0 3
23066: PUSH
23067: LD_INT 2
23069: ARRAY
23070: PPUSH
23071: CALL_OW 235
23075: GO 23050
23077: POP
23078: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23079: LD_ADDR_EXP 88
23083: PUSH
23084: LD_EXP 88
23088: PPUSH
23089: LD_VAR 0 4
23093: PPUSH
23094: EMPTY
23095: PPUSH
23096: CALL_OW 1
23100: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23101: LD_VAR 0 1
23105: PPUSH
23106: LD_INT 0
23108: PPUSH
23109: CALL_OW 505
// end ; end ;
23113: LD_VAR 0 2
23117: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23118: LD_INT 0
23120: PPUSH
23121: PPUSH
23122: PPUSH
// if not hack in hackTanks or not vehicles then
23123: LD_VAR 0 1
23127: PUSH
23128: LD_EXP 87
23132: IN
23133: NOT
23134: PUSH
23135: LD_VAR 0 2
23139: NOT
23140: OR
23141: IFFALSE 23145
// exit ;
23143: GO 23420
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23145: LD_ADDR_VAR 0 2
23149: PUSH
23150: LD_VAR 0 1
23154: PPUSH
23155: LD_VAR 0 2
23159: PPUSH
23160: LD_INT 1
23162: PPUSH
23163: LD_INT 1
23165: PPUSH
23166: CALL 31380 0 4
23170: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23171: LD_ADDR_VAR 0 5
23175: PUSH
23176: LD_EXP 87
23180: PPUSH
23181: LD_VAR 0 1
23185: PPUSH
23186: CALL 30730 0 2
23190: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23191: LD_EXP 88
23195: PUSH
23196: LD_VAR 0 5
23200: ARRAY
23201: PUSH
23202: LD_EXP 89
23206: LESS
23207: IFFALSE 23396
// begin for i := 1 to vehicles do
23209: LD_ADDR_VAR 0 4
23213: PUSH
23214: DOUBLE
23215: LD_INT 1
23217: DEC
23218: ST_TO_ADDR
23219: LD_VAR 0 2
23223: PUSH
23224: FOR_TO
23225: IFFALSE 23394
// begin if hackTanksCaptured [ index ] = hackLimit then
23227: LD_EXP 88
23231: PUSH
23232: LD_VAR 0 5
23236: ARRAY
23237: PUSH
23238: LD_EXP 89
23242: EQUAL
23243: IFFALSE 23247
// break ;
23245: GO 23394
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23247: LD_ADDR_EXP 91
23251: PUSH
23252: LD_EXP 91
23256: PPUSH
23257: LD_VAR 0 5
23261: PPUSH
23262: LD_EXP 91
23266: PUSH
23267: LD_VAR 0 5
23271: ARRAY
23272: PUSH
23273: LD_INT 1
23275: PLUS
23276: PPUSH
23277: CALL_OW 1
23281: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23282: LD_ADDR_EXP 88
23286: PUSH
23287: LD_EXP 88
23291: PPUSH
23292: LD_VAR 0 5
23296: PUSH
23297: LD_EXP 88
23301: PUSH
23302: LD_VAR 0 5
23306: ARRAY
23307: PUSH
23308: LD_INT 1
23310: PLUS
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PPUSH
23316: LD_VAR 0 2
23320: PUSH
23321: LD_VAR 0 4
23325: ARRAY
23326: PUSH
23327: LD_VAR 0 2
23331: PUSH
23332: LD_VAR 0 4
23336: ARRAY
23337: PPUSH
23338: CALL_OW 255
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: PPUSH
23347: CALL 30945 0 3
23351: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23352: LD_VAR 0 2
23356: PUSH
23357: LD_VAR 0 4
23361: ARRAY
23362: PPUSH
23363: LD_VAR 0 1
23367: PPUSH
23368: CALL_OW 255
23372: PPUSH
23373: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23377: LD_VAR 0 2
23381: PUSH
23382: LD_VAR 0 4
23386: ARRAY
23387: PPUSH
23388: CALL_OW 141
// end ;
23392: GO 23224
23394: POP
23395: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23396: LD_VAR 0 1
23400: PPUSH
23401: LD_EXP 88
23405: PUSH
23406: LD_VAR 0 5
23410: ARRAY
23411: PUSH
23412: LD_INT 0
23414: PLUS
23415: PPUSH
23416: CALL_OW 505
// end ;
23420: LD_VAR 0 3
23424: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23425: LD_INT 0
23427: PPUSH
23428: PPUSH
23429: PPUSH
23430: PPUSH
// if not hack in hackTanks then
23431: LD_VAR 0 1
23435: PUSH
23436: LD_EXP 87
23440: IN
23441: NOT
23442: IFFALSE 23446
// exit ;
23444: GO 23686
// index := GetElementIndex ( hackTanks , hack ) ;
23446: LD_ADDR_VAR 0 4
23450: PUSH
23451: LD_EXP 87
23455: PPUSH
23456: LD_VAR 0 1
23460: PPUSH
23461: CALL 30730 0 2
23465: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23466: LD_ADDR_VAR 0 3
23470: PUSH
23471: DOUBLE
23472: LD_EXP 88
23476: PUSH
23477: LD_VAR 0 4
23481: ARRAY
23482: INC
23483: ST_TO_ADDR
23484: LD_INT 1
23486: PUSH
23487: FOR_DOWNTO
23488: IFFALSE 23660
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23490: LD_ADDR_VAR 0 5
23494: PUSH
23495: LD_EXP 88
23499: PUSH
23500: LD_VAR 0 4
23504: ARRAY
23505: PUSH
23506: LD_VAR 0 3
23510: ARRAY
23511: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23512: LD_VAR 0 5
23516: PUSH
23517: LD_INT 1
23519: ARRAY
23520: PPUSH
23521: CALL_OW 302
23525: NOT
23526: PUSH
23527: LD_VAR 0 5
23531: PUSH
23532: LD_INT 1
23534: ARRAY
23535: PPUSH
23536: CALL_OW 255
23540: PUSH
23541: LD_VAR 0 1
23545: PPUSH
23546: CALL_OW 255
23550: NONEQUAL
23551: OR
23552: IFFALSE 23658
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23554: LD_VAR 0 5
23558: PUSH
23559: LD_INT 1
23561: ARRAY
23562: PPUSH
23563: CALL_OW 305
23567: PUSH
23568: LD_VAR 0 5
23572: PUSH
23573: LD_INT 1
23575: ARRAY
23576: PPUSH
23577: CALL_OW 255
23581: PUSH
23582: LD_VAR 0 1
23586: PPUSH
23587: CALL_OW 255
23591: EQUAL
23592: AND
23593: IFFALSE 23617
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23595: LD_VAR 0 5
23599: PUSH
23600: LD_INT 1
23602: ARRAY
23603: PPUSH
23604: LD_VAR 0 5
23608: PUSH
23609: LD_INT 2
23611: ARRAY
23612: PPUSH
23613: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23617: LD_ADDR_EXP 88
23621: PUSH
23622: LD_EXP 88
23626: PPUSH
23627: LD_VAR 0 4
23631: PPUSH
23632: LD_EXP 88
23636: PUSH
23637: LD_VAR 0 4
23641: ARRAY
23642: PPUSH
23643: LD_VAR 0 3
23647: PPUSH
23648: CALL_OW 3
23652: PPUSH
23653: CALL_OW 1
23657: ST_TO_ADDR
// end ; end ;
23658: GO 23487
23660: POP
23661: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23662: LD_VAR 0 1
23666: PPUSH
23667: LD_EXP 88
23671: PUSH
23672: LD_VAR 0 4
23676: ARRAY
23677: PUSH
23678: LD_INT 0
23680: PLUS
23681: PPUSH
23682: CALL_OW 505
// end ;
23686: LD_VAR 0 2
23690: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23691: LD_INT 0
23693: PPUSH
23694: PPUSH
23695: PPUSH
23696: PPUSH
// if not hack in hackTanks then
23697: LD_VAR 0 1
23701: PUSH
23702: LD_EXP 87
23706: IN
23707: NOT
23708: IFFALSE 23712
// exit ;
23710: GO 23797
// index := GetElementIndex ( hackTanks , hack ) ;
23712: LD_ADDR_VAR 0 5
23716: PUSH
23717: LD_EXP 87
23721: PPUSH
23722: LD_VAR 0 1
23726: PPUSH
23727: CALL 30730 0 2
23731: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23732: LD_ADDR_VAR 0 4
23736: PUSH
23737: DOUBLE
23738: LD_INT 1
23740: DEC
23741: ST_TO_ADDR
23742: LD_EXP 88
23746: PUSH
23747: LD_VAR 0 5
23751: ARRAY
23752: PUSH
23753: FOR_TO
23754: IFFALSE 23795
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23756: LD_EXP 88
23760: PUSH
23761: LD_VAR 0 5
23765: ARRAY
23766: PUSH
23767: LD_VAR 0 4
23771: ARRAY
23772: PUSH
23773: LD_INT 1
23775: ARRAY
23776: PUSH
23777: LD_VAR 0 2
23781: EQUAL
23782: IFFALSE 23793
// KillUnit ( vehicle ) ;
23784: LD_VAR 0 2
23788: PPUSH
23789: CALL_OW 66
23793: GO 23753
23795: POP
23796: POP
// end ;
23797: LD_VAR 0 3
23801: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23802: LD_EXP 92
23806: NOT
23807: IFFALSE 23842
23809: GO 23811
23811: DISABLE
// begin initMiner := true ;
23812: LD_ADDR_EXP 92
23816: PUSH
23817: LD_INT 1
23819: ST_TO_ADDR
// minersList := [ ] ;
23820: LD_ADDR_EXP 93
23824: PUSH
23825: EMPTY
23826: ST_TO_ADDR
// minerMinesList := [ ] ;
23827: LD_ADDR_EXP 94
23831: PUSH
23832: EMPTY
23833: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23834: LD_ADDR_EXP 95
23838: PUSH
23839: LD_INT 5
23841: ST_TO_ADDR
// end ;
23842: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23843: LD_EXP 92
23847: PUSH
23848: LD_INT 34
23850: PUSH
23851: LD_INT 81
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: PPUSH
23858: CALL_OW 69
23862: AND
23863: IFFALSE 24324
23865: GO 23867
23867: DISABLE
23868: LD_INT 0
23870: PPUSH
23871: PPUSH
23872: PPUSH
23873: PPUSH
// begin enable ;
23874: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23875: LD_ADDR_VAR 0 1
23879: PUSH
23880: LD_INT 34
23882: PUSH
23883: LD_INT 81
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PPUSH
23890: CALL_OW 69
23894: PUSH
23895: FOR_IN
23896: IFFALSE 23968
// begin if not i in minersList then
23898: LD_VAR 0 1
23902: PUSH
23903: LD_EXP 93
23907: IN
23908: NOT
23909: IFFALSE 23966
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23911: LD_ADDR_EXP 93
23915: PUSH
23916: LD_EXP 93
23920: PPUSH
23921: LD_EXP 93
23925: PUSH
23926: LD_INT 1
23928: PLUS
23929: PPUSH
23930: LD_VAR 0 1
23934: PPUSH
23935: CALL_OW 1
23939: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23940: LD_ADDR_EXP 94
23944: PUSH
23945: LD_EXP 94
23949: PPUSH
23950: LD_EXP 94
23954: PUSH
23955: LD_INT 1
23957: PLUS
23958: PPUSH
23959: EMPTY
23960: PPUSH
23961: CALL_OW 1
23965: ST_TO_ADDR
// end end ;
23966: GO 23895
23968: POP
23969: POP
// for i := minerMinesList downto 1 do
23970: LD_ADDR_VAR 0 1
23974: PUSH
23975: DOUBLE
23976: LD_EXP 94
23980: INC
23981: ST_TO_ADDR
23982: LD_INT 1
23984: PUSH
23985: FOR_DOWNTO
23986: IFFALSE 24322
// begin if IsLive ( minersList [ i ] ) then
23988: LD_EXP 93
23992: PUSH
23993: LD_VAR 0 1
23997: ARRAY
23998: PPUSH
23999: CALL_OW 300
24003: IFFALSE 24031
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24005: LD_EXP 93
24009: PUSH
24010: LD_VAR 0 1
24014: ARRAY
24015: PPUSH
24016: LD_EXP 94
24020: PUSH
24021: LD_VAR 0 1
24025: ARRAY
24026: PPUSH
24027: CALL_OW 505
// if not minerMinesList [ i ] then
24031: LD_EXP 94
24035: PUSH
24036: LD_VAR 0 1
24040: ARRAY
24041: NOT
24042: IFFALSE 24046
// continue ;
24044: GO 23985
// for j := minerMinesList [ i ] downto 1 do
24046: LD_ADDR_VAR 0 2
24050: PUSH
24051: DOUBLE
24052: LD_EXP 94
24056: PUSH
24057: LD_VAR 0 1
24061: ARRAY
24062: INC
24063: ST_TO_ADDR
24064: LD_INT 1
24066: PUSH
24067: FOR_DOWNTO
24068: IFFALSE 24318
// begin side := GetSide ( minersList [ i ] ) ;
24070: LD_ADDR_VAR 0 3
24074: PUSH
24075: LD_EXP 93
24079: PUSH
24080: LD_VAR 0 1
24084: ARRAY
24085: PPUSH
24086: CALL_OW 255
24090: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24091: LD_ADDR_VAR 0 4
24095: PUSH
24096: LD_EXP 94
24100: PUSH
24101: LD_VAR 0 1
24105: ARRAY
24106: PUSH
24107: LD_VAR 0 2
24111: ARRAY
24112: PUSH
24113: LD_INT 1
24115: ARRAY
24116: PPUSH
24117: LD_EXP 94
24121: PUSH
24122: LD_VAR 0 1
24126: ARRAY
24127: PUSH
24128: LD_VAR 0 2
24132: ARRAY
24133: PUSH
24134: LD_INT 2
24136: ARRAY
24137: PPUSH
24138: CALL_OW 428
24142: ST_TO_ADDR
// if not tmp then
24143: LD_VAR 0 4
24147: NOT
24148: IFFALSE 24152
// continue ;
24150: GO 24067
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24152: LD_VAR 0 4
24156: PUSH
24157: LD_INT 81
24159: PUSH
24160: LD_VAR 0 3
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PPUSH
24169: CALL_OW 69
24173: IN
24174: PUSH
24175: LD_EXP 94
24179: PUSH
24180: LD_VAR 0 1
24184: ARRAY
24185: PUSH
24186: LD_VAR 0 2
24190: ARRAY
24191: PUSH
24192: LD_INT 1
24194: ARRAY
24195: PPUSH
24196: LD_EXP 94
24200: PUSH
24201: LD_VAR 0 1
24205: ARRAY
24206: PUSH
24207: LD_VAR 0 2
24211: ARRAY
24212: PUSH
24213: LD_INT 2
24215: ARRAY
24216: PPUSH
24217: CALL_OW 458
24221: AND
24222: IFFALSE 24316
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24224: LD_EXP 94
24228: PUSH
24229: LD_VAR 0 1
24233: ARRAY
24234: PUSH
24235: LD_VAR 0 2
24239: ARRAY
24240: PUSH
24241: LD_INT 1
24243: ARRAY
24244: PPUSH
24245: LD_EXP 94
24249: PUSH
24250: LD_VAR 0 1
24254: ARRAY
24255: PUSH
24256: LD_VAR 0 2
24260: ARRAY
24261: PUSH
24262: LD_INT 2
24264: ARRAY
24265: PPUSH
24266: LD_VAR 0 3
24270: PPUSH
24271: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24275: LD_ADDR_EXP 94
24279: PUSH
24280: LD_EXP 94
24284: PPUSH
24285: LD_VAR 0 1
24289: PPUSH
24290: LD_EXP 94
24294: PUSH
24295: LD_VAR 0 1
24299: ARRAY
24300: PPUSH
24301: LD_VAR 0 2
24305: PPUSH
24306: CALL_OW 3
24310: PPUSH
24311: CALL_OW 1
24315: ST_TO_ADDR
// end ; end ;
24316: GO 24067
24318: POP
24319: POP
// end ;
24320: GO 23985
24322: POP
24323: POP
// end ;
24324: PPOPN 4
24326: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24327: LD_INT 0
24329: PPUSH
24330: PPUSH
// result := false ;
24331: LD_ADDR_VAR 0 4
24335: PUSH
24336: LD_INT 0
24338: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24339: LD_VAR 0 1
24343: PPUSH
24344: CALL_OW 264
24348: PUSH
24349: LD_INT 81
24351: EQUAL
24352: NOT
24353: IFFALSE 24357
// exit ;
24355: GO 24597
// index := GetElementIndex ( minersList , unit ) ;
24357: LD_ADDR_VAR 0 5
24361: PUSH
24362: LD_EXP 93
24366: PPUSH
24367: LD_VAR 0 1
24371: PPUSH
24372: CALL 30730 0 2
24376: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24377: LD_EXP 94
24381: PUSH
24382: LD_VAR 0 5
24386: ARRAY
24387: PUSH
24388: LD_EXP 95
24392: GREATEREQUAL
24393: IFFALSE 24397
// exit ;
24395: GO 24597
// ComMoveXY ( unit , x , y ) ;
24397: LD_VAR 0 1
24401: PPUSH
24402: LD_VAR 0 2
24406: PPUSH
24407: LD_VAR 0 3
24411: PPUSH
24412: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24416: LD_INT 35
24418: PPUSH
24419: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24423: LD_VAR 0 1
24427: PPUSH
24428: LD_VAR 0 2
24432: PPUSH
24433: LD_VAR 0 3
24437: PPUSH
24438: CALL 62066 0 3
24442: NOT
24443: PUSH
24444: LD_VAR 0 1
24448: PPUSH
24449: CALL_OW 314
24453: AND
24454: IFFALSE 24458
// exit ;
24456: GO 24597
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24458: LD_VAR 0 2
24462: PPUSH
24463: LD_VAR 0 3
24467: PPUSH
24468: CALL_OW 428
24472: PUSH
24473: LD_VAR 0 1
24477: EQUAL
24478: PUSH
24479: LD_VAR 0 1
24483: PPUSH
24484: CALL_OW 314
24488: NOT
24489: AND
24490: IFFALSE 24416
// PlaySoundXY ( x , y , PlantMine ) ;
24492: LD_VAR 0 2
24496: PPUSH
24497: LD_VAR 0 3
24501: PPUSH
24502: LD_STRING PlantMine
24504: PPUSH
24505: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24509: LD_VAR 0 2
24513: PPUSH
24514: LD_VAR 0 3
24518: PPUSH
24519: LD_VAR 0 1
24523: PPUSH
24524: CALL_OW 255
24528: PPUSH
24529: LD_INT 0
24531: PPUSH
24532: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24536: LD_ADDR_EXP 94
24540: PUSH
24541: LD_EXP 94
24545: PPUSH
24546: LD_VAR 0 5
24550: PUSH
24551: LD_EXP 94
24555: PUSH
24556: LD_VAR 0 5
24560: ARRAY
24561: PUSH
24562: LD_INT 1
24564: PLUS
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PPUSH
24570: LD_VAR 0 2
24574: PUSH
24575: LD_VAR 0 3
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PPUSH
24584: CALL 30945 0 3
24588: ST_TO_ADDR
// result := true ;
24589: LD_ADDR_VAR 0 4
24593: PUSH
24594: LD_INT 1
24596: ST_TO_ADDR
// end ;
24597: LD_VAR 0 4
24601: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24602: LD_INT 0
24604: PPUSH
24605: PPUSH
24606: PPUSH
// if not unit in minersList then
24607: LD_VAR 0 1
24611: PUSH
24612: LD_EXP 93
24616: IN
24617: NOT
24618: IFFALSE 24622
// exit ;
24620: GO 25014
// index := GetElementIndex ( minersList , unit ) ;
24622: LD_ADDR_VAR 0 6
24626: PUSH
24627: LD_EXP 93
24631: PPUSH
24632: LD_VAR 0 1
24636: PPUSH
24637: CALL 30730 0 2
24641: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24642: LD_ADDR_VAR 0 5
24646: PUSH
24647: DOUBLE
24648: LD_EXP 94
24652: PUSH
24653: LD_VAR 0 6
24657: ARRAY
24658: INC
24659: ST_TO_ADDR
24660: LD_INT 1
24662: PUSH
24663: FOR_DOWNTO
24664: IFFALSE 24825
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24666: LD_EXP 94
24670: PUSH
24671: LD_VAR 0 6
24675: ARRAY
24676: PUSH
24677: LD_VAR 0 5
24681: ARRAY
24682: PUSH
24683: LD_INT 1
24685: ARRAY
24686: PUSH
24687: LD_VAR 0 2
24691: EQUAL
24692: PUSH
24693: LD_EXP 94
24697: PUSH
24698: LD_VAR 0 6
24702: ARRAY
24703: PUSH
24704: LD_VAR 0 5
24708: ARRAY
24709: PUSH
24710: LD_INT 2
24712: ARRAY
24713: PUSH
24714: LD_VAR 0 3
24718: EQUAL
24719: AND
24720: IFFALSE 24823
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24722: LD_EXP 94
24726: PUSH
24727: LD_VAR 0 6
24731: ARRAY
24732: PUSH
24733: LD_VAR 0 5
24737: ARRAY
24738: PUSH
24739: LD_INT 1
24741: ARRAY
24742: PPUSH
24743: LD_EXP 94
24747: PUSH
24748: LD_VAR 0 6
24752: ARRAY
24753: PUSH
24754: LD_VAR 0 5
24758: ARRAY
24759: PUSH
24760: LD_INT 2
24762: ARRAY
24763: PPUSH
24764: LD_VAR 0 1
24768: PPUSH
24769: CALL_OW 255
24773: PPUSH
24774: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24778: LD_ADDR_EXP 94
24782: PUSH
24783: LD_EXP 94
24787: PPUSH
24788: LD_VAR 0 6
24792: PPUSH
24793: LD_EXP 94
24797: PUSH
24798: LD_VAR 0 6
24802: ARRAY
24803: PPUSH
24804: LD_VAR 0 5
24808: PPUSH
24809: CALL_OW 3
24813: PPUSH
24814: CALL_OW 1
24818: ST_TO_ADDR
// exit ;
24819: POP
24820: POP
24821: GO 25014
// end ; end ;
24823: GO 24663
24825: POP
24826: POP
// for i := minerMinesList [ index ] downto 1 do
24827: LD_ADDR_VAR 0 5
24831: PUSH
24832: DOUBLE
24833: LD_EXP 94
24837: PUSH
24838: LD_VAR 0 6
24842: ARRAY
24843: INC
24844: ST_TO_ADDR
24845: LD_INT 1
24847: PUSH
24848: FOR_DOWNTO
24849: IFFALSE 25012
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24851: LD_EXP 94
24855: PUSH
24856: LD_VAR 0 6
24860: ARRAY
24861: PUSH
24862: LD_VAR 0 5
24866: ARRAY
24867: PUSH
24868: LD_INT 1
24870: ARRAY
24871: PPUSH
24872: LD_EXP 94
24876: PUSH
24877: LD_VAR 0 6
24881: ARRAY
24882: PUSH
24883: LD_VAR 0 5
24887: ARRAY
24888: PUSH
24889: LD_INT 2
24891: ARRAY
24892: PPUSH
24893: LD_VAR 0 2
24897: PPUSH
24898: LD_VAR 0 3
24902: PPUSH
24903: CALL_OW 298
24907: PUSH
24908: LD_INT 6
24910: LESS
24911: IFFALSE 25010
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24913: LD_EXP 94
24917: PUSH
24918: LD_VAR 0 6
24922: ARRAY
24923: PUSH
24924: LD_VAR 0 5
24928: ARRAY
24929: PUSH
24930: LD_INT 1
24932: ARRAY
24933: PPUSH
24934: LD_EXP 94
24938: PUSH
24939: LD_VAR 0 6
24943: ARRAY
24944: PUSH
24945: LD_VAR 0 5
24949: ARRAY
24950: PUSH
24951: LD_INT 2
24953: ARRAY
24954: PPUSH
24955: LD_VAR 0 1
24959: PPUSH
24960: CALL_OW 255
24964: PPUSH
24965: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24969: LD_ADDR_EXP 94
24973: PUSH
24974: LD_EXP 94
24978: PPUSH
24979: LD_VAR 0 6
24983: PPUSH
24984: LD_EXP 94
24988: PUSH
24989: LD_VAR 0 6
24993: ARRAY
24994: PPUSH
24995: LD_VAR 0 5
24999: PPUSH
25000: CALL_OW 3
25004: PPUSH
25005: CALL_OW 1
25009: ST_TO_ADDR
// end ; end ;
25010: GO 24848
25012: POP
25013: POP
// end ;
25014: LD_VAR 0 4
25018: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25019: LD_INT 0
25021: PPUSH
25022: PPUSH
25023: PPUSH
25024: PPUSH
25025: PPUSH
25026: PPUSH
25027: PPUSH
25028: PPUSH
25029: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25030: LD_VAR 0 1
25034: PPUSH
25035: CALL_OW 264
25039: PUSH
25040: LD_INT 81
25042: EQUAL
25043: NOT
25044: PUSH
25045: LD_VAR 0 1
25049: PUSH
25050: LD_EXP 93
25054: IN
25055: NOT
25056: OR
25057: IFFALSE 25061
// exit ;
25059: GO 25383
// index := GetElementIndex ( minersList , unit ) ;
25061: LD_ADDR_VAR 0 6
25065: PUSH
25066: LD_EXP 93
25070: PPUSH
25071: LD_VAR 0 1
25075: PPUSH
25076: CALL 30730 0 2
25080: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25081: LD_ADDR_VAR 0 8
25085: PUSH
25086: LD_EXP 95
25090: PUSH
25091: LD_EXP 94
25095: PUSH
25096: LD_VAR 0 6
25100: ARRAY
25101: MINUS
25102: ST_TO_ADDR
// if not minesFreeAmount then
25103: LD_VAR 0 8
25107: NOT
25108: IFFALSE 25112
// exit ;
25110: GO 25383
// tmp := [ ] ;
25112: LD_ADDR_VAR 0 7
25116: PUSH
25117: EMPTY
25118: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25119: LD_ADDR_VAR 0 5
25123: PUSH
25124: DOUBLE
25125: LD_INT 1
25127: DEC
25128: ST_TO_ADDR
25129: LD_VAR 0 8
25133: PUSH
25134: FOR_TO
25135: IFFALSE 25330
// begin _d := rand ( 0 , 5 ) ;
25137: LD_ADDR_VAR 0 11
25141: PUSH
25142: LD_INT 0
25144: PPUSH
25145: LD_INT 5
25147: PPUSH
25148: CALL_OW 12
25152: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25153: LD_ADDR_VAR 0 12
25157: PUSH
25158: LD_INT 2
25160: PPUSH
25161: LD_INT 6
25163: PPUSH
25164: CALL_OW 12
25168: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25169: LD_ADDR_VAR 0 9
25173: PUSH
25174: LD_VAR 0 2
25178: PPUSH
25179: LD_VAR 0 11
25183: PPUSH
25184: LD_VAR 0 12
25188: PPUSH
25189: CALL_OW 272
25193: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25194: LD_ADDR_VAR 0 10
25198: PUSH
25199: LD_VAR 0 3
25203: PPUSH
25204: LD_VAR 0 11
25208: PPUSH
25209: LD_VAR 0 12
25213: PPUSH
25214: CALL_OW 273
25218: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25219: LD_VAR 0 9
25223: PPUSH
25224: LD_VAR 0 10
25228: PPUSH
25229: CALL_OW 488
25233: PUSH
25234: LD_VAR 0 9
25238: PUSH
25239: LD_VAR 0 10
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: LD_VAR 0 7
25252: IN
25253: NOT
25254: AND
25255: PUSH
25256: LD_VAR 0 9
25260: PPUSH
25261: LD_VAR 0 10
25265: PPUSH
25266: CALL_OW 458
25270: NOT
25271: AND
25272: IFFALSE 25314
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25274: LD_ADDR_VAR 0 7
25278: PUSH
25279: LD_VAR 0 7
25283: PPUSH
25284: LD_VAR 0 7
25288: PUSH
25289: LD_INT 1
25291: PLUS
25292: PPUSH
25293: LD_VAR 0 9
25297: PUSH
25298: LD_VAR 0 10
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PPUSH
25307: CALL_OW 1
25311: ST_TO_ADDR
25312: GO 25328
// i := i - 1 ;
25314: LD_ADDR_VAR 0 5
25318: PUSH
25319: LD_VAR 0 5
25323: PUSH
25324: LD_INT 1
25326: MINUS
25327: ST_TO_ADDR
// end ;
25328: GO 25134
25330: POP
25331: POP
// for i in tmp do
25332: LD_ADDR_VAR 0 5
25336: PUSH
25337: LD_VAR 0 7
25341: PUSH
25342: FOR_IN
25343: IFFALSE 25381
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25345: LD_VAR 0 1
25349: PPUSH
25350: LD_VAR 0 5
25354: PUSH
25355: LD_INT 1
25357: ARRAY
25358: PPUSH
25359: LD_VAR 0 5
25363: PUSH
25364: LD_INT 2
25366: ARRAY
25367: PPUSH
25368: CALL 24327 0 3
25372: NOT
25373: IFFALSE 25379
// exit ;
25375: POP
25376: POP
25377: GO 25383
25379: GO 25342
25381: POP
25382: POP
// end ;
25383: LD_VAR 0 4
25387: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25388: LD_INT 0
25390: PPUSH
25391: PPUSH
25392: PPUSH
25393: PPUSH
25394: PPUSH
25395: PPUSH
25396: PPUSH
// if not GetClass ( unit ) = class_sniper then
25397: LD_VAR 0 1
25401: PPUSH
25402: CALL_OW 257
25406: PUSH
25407: LD_INT 5
25409: EQUAL
25410: NOT
25411: IFFALSE 25415
// exit ;
25413: GO 25803
// dist := 8 ;
25415: LD_ADDR_VAR 0 5
25419: PUSH
25420: LD_INT 8
25422: ST_TO_ADDR
// viewRange := 12 ;
25423: LD_ADDR_VAR 0 7
25427: PUSH
25428: LD_INT 12
25430: ST_TO_ADDR
// side := GetSide ( unit ) ;
25431: LD_ADDR_VAR 0 6
25435: PUSH
25436: LD_VAR 0 1
25440: PPUSH
25441: CALL_OW 255
25445: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25446: LD_INT 61
25448: PPUSH
25449: LD_VAR 0 6
25453: PPUSH
25454: CALL_OW 321
25458: PUSH
25459: LD_INT 2
25461: EQUAL
25462: IFFALSE 25472
// viewRange := 16 ;
25464: LD_ADDR_VAR 0 7
25468: PUSH
25469: LD_INT 16
25471: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25472: LD_VAR 0 1
25476: PPUSH
25477: LD_VAR 0 2
25481: PPUSH
25482: LD_VAR 0 3
25486: PPUSH
25487: CALL_OW 297
25491: PUSH
25492: LD_VAR 0 5
25496: GREATER
25497: IFFALSE 25576
// begin ComMoveXY ( unit , x , y ) ;
25499: LD_VAR 0 1
25503: PPUSH
25504: LD_VAR 0 2
25508: PPUSH
25509: LD_VAR 0 3
25513: PPUSH
25514: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25518: LD_INT 35
25520: PPUSH
25521: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25525: LD_VAR 0 1
25529: PPUSH
25530: LD_VAR 0 2
25534: PPUSH
25535: LD_VAR 0 3
25539: PPUSH
25540: CALL 62066 0 3
25544: NOT
25545: IFFALSE 25549
// exit ;
25547: GO 25803
// until GetDistUnitXY ( unit , x , y ) < dist ;
25549: LD_VAR 0 1
25553: PPUSH
25554: LD_VAR 0 2
25558: PPUSH
25559: LD_VAR 0 3
25563: PPUSH
25564: CALL_OW 297
25568: PUSH
25569: LD_VAR 0 5
25573: LESS
25574: IFFALSE 25518
// end ; ComTurnXY ( unit , x , y ) ;
25576: LD_VAR 0 1
25580: PPUSH
25581: LD_VAR 0 2
25585: PPUSH
25586: LD_VAR 0 3
25590: PPUSH
25591: CALL_OW 118
// wait ( 5 ) ;
25595: LD_INT 5
25597: PPUSH
25598: CALL_OW 67
// _d := GetDir ( unit ) ;
25602: LD_ADDR_VAR 0 10
25606: PUSH
25607: LD_VAR 0 1
25611: PPUSH
25612: CALL_OW 254
25616: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25617: LD_ADDR_VAR 0 8
25621: PUSH
25622: LD_VAR 0 1
25626: PPUSH
25627: CALL_OW 250
25631: PPUSH
25632: LD_VAR 0 10
25636: PPUSH
25637: LD_VAR 0 5
25641: PPUSH
25642: CALL_OW 272
25646: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25647: LD_ADDR_VAR 0 9
25651: PUSH
25652: LD_VAR 0 1
25656: PPUSH
25657: CALL_OW 251
25661: PPUSH
25662: LD_VAR 0 10
25666: PPUSH
25667: LD_VAR 0 5
25671: PPUSH
25672: CALL_OW 273
25676: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25677: LD_VAR 0 8
25681: PPUSH
25682: LD_VAR 0 9
25686: PPUSH
25687: CALL_OW 488
25691: NOT
25692: IFFALSE 25696
// exit ;
25694: GO 25803
// ComAnimCustom ( unit , 1 ) ;
25696: LD_VAR 0 1
25700: PPUSH
25701: LD_INT 1
25703: PPUSH
25704: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25708: LD_VAR 0 8
25712: PPUSH
25713: LD_VAR 0 9
25717: PPUSH
25718: LD_VAR 0 6
25722: PPUSH
25723: LD_VAR 0 7
25727: PPUSH
25728: CALL_OW 330
// repeat wait ( 1 ) ;
25732: LD_INT 1
25734: PPUSH
25735: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25739: LD_VAR 0 1
25743: PPUSH
25744: CALL_OW 316
25748: PUSH
25749: LD_VAR 0 1
25753: PPUSH
25754: CALL_OW 314
25758: OR
25759: PUSH
25760: LD_VAR 0 1
25764: PPUSH
25765: CALL_OW 302
25769: NOT
25770: OR
25771: PUSH
25772: LD_VAR 0 1
25776: PPUSH
25777: CALL_OW 301
25781: OR
25782: IFFALSE 25732
// RemoveSeeing ( _x , _y , side ) ;
25784: LD_VAR 0 8
25788: PPUSH
25789: LD_VAR 0 9
25793: PPUSH
25794: LD_VAR 0 6
25798: PPUSH
25799: CALL_OW 331
// end ; end_of_file
25803: LD_VAR 0 4
25807: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25808: LD_INT 0
25810: PPUSH
25811: PPUSH
// if exist_mode then
25812: LD_VAR 0 2
25816: IFFALSE 25841
// unit := CreateCharacter ( prefix & ident ) else
25818: LD_ADDR_VAR 0 5
25822: PUSH
25823: LD_VAR 0 3
25827: PUSH
25828: LD_VAR 0 1
25832: STR
25833: PPUSH
25834: CALL_OW 34
25838: ST_TO_ADDR
25839: GO 25856
// unit := NewCharacter ( ident ) ;
25841: LD_ADDR_VAR 0 5
25845: PUSH
25846: LD_VAR 0 1
25850: PPUSH
25851: CALL_OW 25
25855: ST_TO_ADDR
// result := unit ;
25856: LD_ADDR_VAR 0 4
25860: PUSH
25861: LD_VAR 0 5
25865: ST_TO_ADDR
// end ;
25866: LD_VAR 0 4
25870: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25871: LD_INT 0
25873: PPUSH
25874: PPUSH
// if not side or not nation then
25875: LD_VAR 0 1
25879: NOT
25880: PUSH
25881: LD_VAR 0 2
25885: NOT
25886: OR
25887: IFFALSE 25891
// exit ;
25889: GO 26659
// case nation of nation_american :
25891: LD_VAR 0 2
25895: PUSH
25896: LD_INT 1
25898: DOUBLE
25899: EQUAL
25900: IFTRUE 25904
25902: GO 26118
25904: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25905: LD_ADDR_VAR 0 4
25909: PUSH
25910: LD_INT 35
25912: PUSH
25913: LD_INT 45
25915: PUSH
25916: LD_INT 46
25918: PUSH
25919: LD_INT 47
25921: PUSH
25922: LD_INT 82
25924: PUSH
25925: LD_INT 83
25927: PUSH
25928: LD_INT 84
25930: PUSH
25931: LD_INT 85
25933: PUSH
25934: LD_INT 86
25936: PUSH
25937: LD_INT 1
25939: PUSH
25940: LD_INT 2
25942: PUSH
25943: LD_INT 6
25945: PUSH
25946: LD_INT 15
25948: PUSH
25949: LD_INT 16
25951: PUSH
25952: LD_INT 7
25954: PUSH
25955: LD_INT 12
25957: PUSH
25958: LD_INT 13
25960: PUSH
25961: LD_INT 10
25963: PUSH
25964: LD_INT 14
25966: PUSH
25967: LD_INT 20
25969: PUSH
25970: LD_INT 21
25972: PUSH
25973: LD_INT 22
25975: PUSH
25976: LD_INT 25
25978: PUSH
25979: LD_INT 32
25981: PUSH
25982: LD_INT 27
25984: PUSH
25985: LD_INT 36
25987: PUSH
25988: LD_INT 69
25990: PUSH
25991: LD_INT 39
25993: PUSH
25994: LD_INT 34
25996: PUSH
25997: LD_INT 40
25999: PUSH
26000: LD_INT 48
26002: PUSH
26003: LD_INT 49
26005: PUSH
26006: LD_INT 50
26008: PUSH
26009: LD_INT 51
26011: PUSH
26012: LD_INT 52
26014: PUSH
26015: LD_INT 53
26017: PUSH
26018: LD_INT 54
26020: PUSH
26021: LD_INT 55
26023: PUSH
26024: LD_INT 56
26026: PUSH
26027: LD_INT 57
26029: PUSH
26030: LD_INT 58
26032: PUSH
26033: LD_INT 59
26035: PUSH
26036: LD_INT 60
26038: PUSH
26039: LD_INT 61
26041: PUSH
26042: LD_INT 62
26044: PUSH
26045: LD_INT 80
26047: PUSH
26048: LD_INT 82
26050: PUSH
26051: LD_INT 83
26053: PUSH
26054: LD_INT 84
26056: PUSH
26057: LD_INT 85
26059: PUSH
26060: LD_INT 86
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: ST_TO_ADDR
26116: GO 26583
26118: LD_INT 2
26120: DOUBLE
26121: EQUAL
26122: IFTRUE 26126
26124: GO 26352
26126: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26127: LD_ADDR_VAR 0 4
26131: PUSH
26132: LD_INT 35
26134: PUSH
26135: LD_INT 45
26137: PUSH
26138: LD_INT 46
26140: PUSH
26141: LD_INT 47
26143: PUSH
26144: LD_INT 82
26146: PUSH
26147: LD_INT 83
26149: PUSH
26150: LD_INT 84
26152: PUSH
26153: LD_INT 85
26155: PUSH
26156: LD_INT 87
26158: PUSH
26159: LD_INT 70
26161: PUSH
26162: LD_INT 1
26164: PUSH
26165: LD_INT 11
26167: PUSH
26168: LD_INT 3
26170: PUSH
26171: LD_INT 4
26173: PUSH
26174: LD_INT 5
26176: PUSH
26177: LD_INT 6
26179: PUSH
26180: LD_INT 15
26182: PUSH
26183: LD_INT 18
26185: PUSH
26186: LD_INT 7
26188: PUSH
26189: LD_INT 17
26191: PUSH
26192: LD_INT 8
26194: PUSH
26195: LD_INT 20
26197: PUSH
26198: LD_INT 21
26200: PUSH
26201: LD_INT 22
26203: PUSH
26204: LD_INT 72
26206: PUSH
26207: LD_INT 26
26209: PUSH
26210: LD_INT 69
26212: PUSH
26213: LD_INT 39
26215: PUSH
26216: LD_INT 40
26218: PUSH
26219: LD_INT 41
26221: PUSH
26222: LD_INT 42
26224: PUSH
26225: LD_INT 43
26227: PUSH
26228: LD_INT 48
26230: PUSH
26231: LD_INT 49
26233: PUSH
26234: LD_INT 50
26236: PUSH
26237: LD_INT 51
26239: PUSH
26240: LD_INT 52
26242: PUSH
26243: LD_INT 53
26245: PUSH
26246: LD_INT 54
26248: PUSH
26249: LD_INT 55
26251: PUSH
26252: LD_INT 56
26254: PUSH
26255: LD_INT 60
26257: PUSH
26258: LD_INT 61
26260: PUSH
26261: LD_INT 62
26263: PUSH
26264: LD_INT 66
26266: PUSH
26267: LD_INT 67
26269: PUSH
26270: LD_INT 68
26272: PUSH
26273: LD_INT 81
26275: PUSH
26276: LD_INT 82
26278: PUSH
26279: LD_INT 83
26281: PUSH
26282: LD_INT 84
26284: PUSH
26285: LD_INT 85
26287: PUSH
26288: LD_INT 87
26290: PUSH
26291: LD_INT 88
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: ST_TO_ADDR
26350: GO 26583
26352: LD_INT 3
26354: DOUBLE
26355: EQUAL
26356: IFTRUE 26360
26358: GO 26582
26360: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26361: LD_ADDR_VAR 0 4
26365: PUSH
26366: LD_INT 46
26368: PUSH
26369: LD_INT 47
26371: PUSH
26372: LD_INT 1
26374: PUSH
26375: LD_INT 2
26377: PUSH
26378: LD_INT 82
26380: PUSH
26381: LD_INT 83
26383: PUSH
26384: LD_INT 84
26386: PUSH
26387: LD_INT 85
26389: PUSH
26390: LD_INT 86
26392: PUSH
26393: LD_INT 11
26395: PUSH
26396: LD_INT 9
26398: PUSH
26399: LD_INT 20
26401: PUSH
26402: LD_INT 19
26404: PUSH
26405: LD_INT 21
26407: PUSH
26408: LD_INT 24
26410: PUSH
26411: LD_INT 22
26413: PUSH
26414: LD_INT 25
26416: PUSH
26417: LD_INT 28
26419: PUSH
26420: LD_INT 29
26422: PUSH
26423: LD_INT 30
26425: PUSH
26426: LD_INT 31
26428: PUSH
26429: LD_INT 37
26431: PUSH
26432: LD_INT 38
26434: PUSH
26435: LD_INT 32
26437: PUSH
26438: LD_INT 27
26440: PUSH
26441: LD_INT 33
26443: PUSH
26444: LD_INT 69
26446: PUSH
26447: LD_INT 39
26449: PUSH
26450: LD_INT 34
26452: PUSH
26453: LD_INT 40
26455: PUSH
26456: LD_INT 71
26458: PUSH
26459: LD_INT 23
26461: PUSH
26462: LD_INT 44
26464: PUSH
26465: LD_INT 48
26467: PUSH
26468: LD_INT 49
26470: PUSH
26471: LD_INT 50
26473: PUSH
26474: LD_INT 51
26476: PUSH
26477: LD_INT 52
26479: PUSH
26480: LD_INT 53
26482: PUSH
26483: LD_INT 54
26485: PUSH
26486: LD_INT 55
26488: PUSH
26489: LD_INT 56
26491: PUSH
26492: LD_INT 57
26494: PUSH
26495: LD_INT 58
26497: PUSH
26498: LD_INT 59
26500: PUSH
26501: LD_INT 63
26503: PUSH
26504: LD_INT 64
26506: PUSH
26507: LD_INT 65
26509: PUSH
26510: LD_INT 82
26512: PUSH
26513: LD_INT 83
26515: PUSH
26516: LD_INT 84
26518: PUSH
26519: LD_INT 85
26521: PUSH
26522: LD_INT 86
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: ST_TO_ADDR
26580: GO 26583
26582: POP
// if state > - 1 and state < 3 then
26583: LD_VAR 0 3
26587: PUSH
26588: LD_INT 1
26590: NEG
26591: GREATER
26592: PUSH
26593: LD_VAR 0 3
26597: PUSH
26598: LD_INT 3
26600: LESS
26601: AND
26602: IFFALSE 26659
// for i in result do
26604: LD_ADDR_VAR 0 5
26608: PUSH
26609: LD_VAR 0 4
26613: PUSH
26614: FOR_IN
26615: IFFALSE 26657
// if GetTech ( i , side ) <> state then
26617: LD_VAR 0 5
26621: PPUSH
26622: LD_VAR 0 1
26626: PPUSH
26627: CALL_OW 321
26631: PUSH
26632: LD_VAR 0 3
26636: NONEQUAL
26637: IFFALSE 26655
// result := result diff i ;
26639: LD_ADDR_VAR 0 4
26643: PUSH
26644: LD_VAR 0 4
26648: PUSH
26649: LD_VAR 0 5
26653: DIFF
26654: ST_TO_ADDR
26655: GO 26614
26657: POP
26658: POP
// end ;
26659: LD_VAR 0 4
26663: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26664: LD_INT 0
26666: PPUSH
26667: PPUSH
26668: PPUSH
// result := true ;
26669: LD_ADDR_VAR 0 3
26673: PUSH
26674: LD_INT 1
26676: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26677: LD_ADDR_VAR 0 5
26681: PUSH
26682: LD_VAR 0 2
26686: PPUSH
26687: CALL_OW 480
26691: ST_TO_ADDR
// if not tmp then
26692: LD_VAR 0 5
26696: NOT
26697: IFFALSE 26701
// exit ;
26699: GO 26750
// for i in tmp do
26701: LD_ADDR_VAR 0 4
26705: PUSH
26706: LD_VAR 0 5
26710: PUSH
26711: FOR_IN
26712: IFFALSE 26748
// if GetTech ( i , side ) <> state_researched then
26714: LD_VAR 0 4
26718: PPUSH
26719: LD_VAR 0 1
26723: PPUSH
26724: CALL_OW 321
26728: PUSH
26729: LD_INT 2
26731: NONEQUAL
26732: IFFALSE 26746
// begin result := false ;
26734: LD_ADDR_VAR 0 3
26738: PUSH
26739: LD_INT 0
26741: ST_TO_ADDR
// exit ;
26742: POP
26743: POP
26744: GO 26750
// end ;
26746: GO 26711
26748: POP
26749: POP
// end ;
26750: LD_VAR 0 3
26754: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26755: LD_INT 0
26757: PPUSH
26758: PPUSH
26759: PPUSH
26760: PPUSH
26761: PPUSH
26762: PPUSH
26763: PPUSH
26764: PPUSH
26765: PPUSH
26766: PPUSH
26767: PPUSH
26768: PPUSH
26769: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26770: LD_VAR 0 1
26774: NOT
26775: PUSH
26776: LD_VAR 0 1
26780: PPUSH
26781: CALL_OW 257
26785: PUSH
26786: LD_INT 9
26788: NONEQUAL
26789: OR
26790: IFFALSE 26794
// exit ;
26792: GO 27367
// side := GetSide ( unit ) ;
26794: LD_ADDR_VAR 0 9
26798: PUSH
26799: LD_VAR 0 1
26803: PPUSH
26804: CALL_OW 255
26808: ST_TO_ADDR
// tech_space := tech_spacanom ;
26809: LD_ADDR_VAR 0 12
26813: PUSH
26814: LD_INT 29
26816: ST_TO_ADDR
// tech_time := tech_taurad ;
26817: LD_ADDR_VAR 0 13
26821: PUSH
26822: LD_INT 28
26824: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26825: LD_ADDR_VAR 0 11
26829: PUSH
26830: LD_VAR 0 1
26834: PPUSH
26835: CALL_OW 310
26839: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26840: LD_VAR 0 11
26844: PPUSH
26845: CALL_OW 247
26849: PUSH
26850: LD_INT 2
26852: EQUAL
26853: IFFALSE 26857
// exit ;
26855: GO 27367
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26857: LD_ADDR_VAR 0 8
26861: PUSH
26862: LD_INT 81
26864: PUSH
26865: LD_VAR 0 9
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 3
26876: PUSH
26877: LD_INT 21
26879: PUSH
26880: LD_INT 3
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PPUSH
26895: CALL_OW 69
26899: ST_TO_ADDR
// if not tmp then
26900: LD_VAR 0 8
26904: NOT
26905: IFFALSE 26909
// exit ;
26907: GO 27367
// if in_unit then
26909: LD_VAR 0 11
26913: IFFALSE 26937
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26915: LD_ADDR_VAR 0 10
26919: PUSH
26920: LD_VAR 0 8
26924: PPUSH
26925: LD_VAR 0 11
26929: PPUSH
26930: CALL_OW 74
26934: ST_TO_ADDR
26935: GO 26957
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26937: LD_ADDR_VAR 0 10
26941: PUSH
26942: LD_VAR 0 8
26946: PPUSH
26947: LD_VAR 0 1
26951: PPUSH
26952: CALL_OW 74
26956: ST_TO_ADDR
// if not enemy then
26957: LD_VAR 0 10
26961: NOT
26962: IFFALSE 26966
// exit ;
26964: GO 27367
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26966: LD_VAR 0 11
26970: PUSH
26971: LD_VAR 0 11
26975: PPUSH
26976: LD_VAR 0 10
26980: PPUSH
26981: CALL_OW 296
26985: PUSH
26986: LD_INT 13
26988: GREATER
26989: AND
26990: PUSH
26991: LD_VAR 0 1
26995: PPUSH
26996: LD_VAR 0 10
27000: PPUSH
27001: CALL_OW 296
27005: PUSH
27006: LD_INT 12
27008: GREATER
27009: OR
27010: IFFALSE 27014
// exit ;
27012: GO 27367
// missile := [ 1 ] ;
27014: LD_ADDR_VAR 0 14
27018: PUSH
27019: LD_INT 1
27021: PUSH
27022: EMPTY
27023: LIST
27024: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27025: LD_VAR 0 9
27029: PPUSH
27030: LD_VAR 0 12
27034: PPUSH
27035: CALL_OW 325
27039: IFFALSE 27068
// missile := Replace ( missile , missile + 1 , 2 ) ;
27041: LD_ADDR_VAR 0 14
27045: PUSH
27046: LD_VAR 0 14
27050: PPUSH
27051: LD_VAR 0 14
27055: PUSH
27056: LD_INT 1
27058: PLUS
27059: PPUSH
27060: LD_INT 2
27062: PPUSH
27063: CALL_OW 1
27067: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27068: LD_VAR 0 9
27072: PPUSH
27073: LD_VAR 0 13
27077: PPUSH
27078: CALL_OW 325
27082: PUSH
27083: LD_VAR 0 10
27087: PPUSH
27088: CALL_OW 255
27092: PPUSH
27093: LD_VAR 0 13
27097: PPUSH
27098: CALL_OW 325
27102: NOT
27103: AND
27104: IFFALSE 27133
// missile := Replace ( missile , missile + 1 , 3 ) ;
27106: LD_ADDR_VAR 0 14
27110: PUSH
27111: LD_VAR 0 14
27115: PPUSH
27116: LD_VAR 0 14
27120: PUSH
27121: LD_INT 1
27123: PLUS
27124: PPUSH
27125: LD_INT 3
27127: PPUSH
27128: CALL_OW 1
27132: ST_TO_ADDR
// if missile < 2 then
27133: LD_VAR 0 14
27137: PUSH
27138: LD_INT 2
27140: LESS
27141: IFFALSE 27145
// exit ;
27143: GO 27367
// x := GetX ( enemy ) ;
27145: LD_ADDR_VAR 0 4
27149: PUSH
27150: LD_VAR 0 10
27154: PPUSH
27155: CALL_OW 250
27159: ST_TO_ADDR
// y := GetY ( enemy ) ;
27160: LD_ADDR_VAR 0 5
27164: PUSH
27165: LD_VAR 0 10
27169: PPUSH
27170: CALL_OW 251
27174: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27175: LD_ADDR_VAR 0 6
27179: PUSH
27180: LD_VAR 0 4
27184: PUSH
27185: LD_INT 1
27187: NEG
27188: PPUSH
27189: LD_INT 1
27191: PPUSH
27192: CALL_OW 12
27196: PLUS
27197: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27198: LD_ADDR_VAR 0 7
27202: PUSH
27203: LD_VAR 0 5
27207: PUSH
27208: LD_INT 1
27210: NEG
27211: PPUSH
27212: LD_INT 1
27214: PPUSH
27215: CALL_OW 12
27219: PLUS
27220: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27221: LD_VAR 0 6
27225: PPUSH
27226: LD_VAR 0 7
27230: PPUSH
27231: CALL_OW 488
27235: NOT
27236: IFFALSE 27258
// begin _x := x ;
27238: LD_ADDR_VAR 0 6
27242: PUSH
27243: LD_VAR 0 4
27247: ST_TO_ADDR
// _y := y ;
27248: LD_ADDR_VAR 0 7
27252: PUSH
27253: LD_VAR 0 5
27257: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27258: LD_ADDR_VAR 0 3
27262: PUSH
27263: LD_INT 1
27265: PPUSH
27266: LD_VAR 0 14
27270: PPUSH
27271: CALL_OW 12
27275: ST_TO_ADDR
// case i of 1 :
27276: LD_VAR 0 3
27280: PUSH
27281: LD_INT 1
27283: DOUBLE
27284: EQUAL
27285: IFTRUE 27289
27287: GO 27306
27289: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27290: LD_VAR 0 1
27294: PPUSH
27295: LD_VAR 0 10
27299: PPUSH
27300: CALL_OW 115
27304: GO 27367
27306: LD_INT 2
27308: DOUBLE
27309: EQUAL
27310: IFTRUE 27314
27312: GO 27336
27314: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27315: LD_VAR 0 1
27319: PPUSH
27320: LD_VAR 0 6
27324: PPUSH
27325: LD_VAR 0 7
27329: PPUSH
27330: CALL_OW 153
27334: GO 27367
27336: LD_INT 3
27338: DOUBLE
27339: EQUAL
27340: IFTRUE 27344
27342: GO 27366
27344: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27345: LD_VAR 0 1
27349: PPUSH
27350: LD_VAR 0 6
27354: PPUSH
27355: LD_VAR 0 7
27359: PPUSH
27360: CALL_OW 154
27364: GO 27367
27366: POP
// end ;
27367: LD_VAR 0 2
27371: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27372: LD_INT 0
27374: PPUSH
27375: PPUSH
27376: PPUSH
27377: PPUSH
27378: PPUSH
27379: PPUSH
// if not unit or not building then
27380: LD_VAR 0 1
27384: NOT
27385: PUSH
27386: LD_VAR 0 2
27390: NOT
27391: OR
27392: IFFALSE 27396
// exit ;
27394: GO 27554
// x := GetX ( building ) ;
27396: LD_ADDR_VAR 0 5
27400: PUSH
27401: LD_VAR 0 2
27405: PPUSH
27406: CALL_OW 250
27410: ST_TO_ADDR
// y := GetY ( building ) ;
27411: LD_ADDR_VAR 0 6
27415: PUSH
27416: LD_VAR 0 2
27420: PPUSH
27421: CALL_OW 251
27425: ST_TO_ADDR
// for i = 0 to 5 do
27426: LD_ADDR_VAR 0 4
27430: PUSH
27431: DOUBLE
27432: LD_INT 0
27434: DEC
27435: ST_TO_ADDR
27436: LD_INT 5
27438: PUSH
27439: FOR_TO
27440: IFFALSE 27552
// begin _x := ShiftX ( x , i , 3 ) ;
27442: LD_ADDR_VAR 0 7
27446: PUSH
27447: LD_VAR 0 5
27451: PPUSH
27452: LD_VAR 0 4
27456: PPUSH
27457: LD_INT 3
27459: PPUSH
27460: CALL_OW 272
27464: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27465: LD_ADDR_VAR 0 8
27469: PUSH
27470: LD_VAR 0 6
27474: PPUSH
27475: LD_VAR 0 4
27479: PPUSH
27480: LD_INT 3
27482: PPUSH
27483: CALL_OW 273
27487: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27488: LD_VAR 0 7
27492: PPUSH
27493: LD_VAR 0 8
27497: PPUSH
27498: CALL_OW 488
27502: NOT
27503: IFFALSE 27507
// continue ;
27505: GO 27439
// if HexInfo ( _x , _y ) = 0 then
27507: LD_VAR 0 7
27511: PPUSH
27512: LD_VAR 0 8
27516: PPUSH
27517: CALL_OW 428
27521: PUSH
27522: LD_INT 0
27524: EQUAL
27525: IFFALSE 27550
// begin ComMoveXY ( unit , _x , _y ) ;
27527: LD_VAR 0 1
27531: PPUSH
27532: LD_VAR 0 7
27536: PPUSH
27537: LD_VAR 0 8
27541: PPUSH
27542: CALL_OW 111
// exit ;
27546: POP
27547: POP
27548: GO 27554
// end ; end ;
27550: GO 27439
27552: POP
27553: POP
// end ;
27554: LD_VAR 0 3
27558: RET
// export function ScanBase ( side , base_area ) ; begin
27559: LD_INT 0
27561: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27562: LD_ADDR_VAR 0 3
27566: PUSH
27567: LD_VAR 0 2
27571: PPUSH
27572: LD_INT 81
27574: PUSH
27575: LD_VAR 0 1
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PPUSH
27584: CALL_OW 70
27588: ST_TO_ADDR
// end ;
27589: LD_VAR 0 3
27593: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27594: LD_INT 0
27596: PPUSH
27597: PPUSH
27598: PPUSH
27599: PPUSH
// result := false ;
27600: LD_ADDR_VAR 0 2
27604: PUSH
27605: LD_INT 0
27607: ST_TO_ADDR
// side := GetSide ( unit ) ;
27608: LD_ADDR_VAR 0 3
27612: PUSH
27613: LD_VAR 0 1
27617: PPUSH
27618: CALL_OW 255
27622: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27623: LD_ADDR_VAR 0 4
27627: PUSH
27628: LD_VAR 0 1
27632: PPUSH
27633: CALL_OW 248
27637: ST_TO_ADDR
// case nat of 1 :
27638: LD_VAR 0 4
27642: PUSH
27643: LD_INT 1
27645: DOUBLE
27646: EQUAL
27647: IFTRUE 27651
27649: GO 27662
27651: POP
// tech := tech_lassight ; 2 :
27652: LD_ADDR_VAR 0 5
27656: PUSH
27657: LD_INT 12
27659: ST_TO_ADDR
27660: GO 27701
27662: LD_INT 2
27664: DOUBLE
27665: EQUAL
27666: IFTRUE 27670
27668: GO 27681
27670: POP
// tech := tech_mortar ; 3 :
27671: LD_ADDR_VAR 0 5
27675: PUSH
27676: LD_INT 41
27678: ST_TO_ADDR
27679: GO 27701
27681: LD_INT 3
27683: DOUBLE
27684: EQUAL
27685: IFTRUE 27689
27687: GO 27700
27689: POP
// tech := tech_bazooka ; end ;
27690: LD_ADDR_VAR 0 5
27694: PUSH
27695: LD_INT 44
27697: ST_TO_ADDR
27698: GO 27701
27700: POP
// if Researched ( side , tech ) then
27701: LD_VAR 0 3
27705: PPUSH
27706: LD_VAR 0 5
27710: PPUSH
27711: CALL_OW 325
27715: IFFALSE 27742
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27717: LD_ADDR_VAR 0 2
27721: PUSH
27722: LD_INT 5
27724: PUSH
27725: LD_INT 8
27727: PUSH
27728: LD_INT 9
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: LIST
27735: PUSH
27736: LD_VAR 0 4
27740: ARRAY
27741: ST_TO_ADDR
// end ;
27742: LD_VAR 0 2
27746: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27747: LD_INT 0
27749: PPUSH
27750: PPUSH
27751: PPUSH
// if not mines then
27752: LD_VAR 0 2
27756: NOT
27757: IFFALSE 27761
// exit ;
27759: GO 27905
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27761: LD_ADDR_VAR 0 5
27765: PUSH
27766: LD_INT 81
27768: PUSH
27769: LD_VAR 0 1
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: LD_INT 3
27780: PUSH
27781: LD_INT 21
27783: PUSH
27784: LD_INT 3
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PPUSH
27799: CALL_OW 69
27803: ST_TO_ADDR
// for i in mines do
27804: LD_ADDR_VAR 0 4
27808: PUSH
27809: LD_VAR 0 2
27813: PUSH
27814: FOR_IN
27815: IFFALSE 27903
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27817: LD_VAR 0 4
27821: PUSH
27822: LD_INT 1
27824: ARRAY
27825: PPUSH
27826: LD_VAR 0 4
27830: PUSH
27831: LD_INT 2
27833: ARRAY
27834: PPUSH
27835: CALL_OW 458
27839: NOT
27840: IFFALSE 27844
// continue ;
27842: GO 27814
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27844: LD_VAR 0 4
27848: PUSH
27849: LD_INT 1
27851: ARRAY
27852: PPUSH
27853: LD_VAR 0 4
27857: PUSH
27858: LD_INT 2
27860: ARRAY
27861: PPUSH
27862: CALL_OW 428
27866: PUSH
27867: LD_VAR 0 5
27871: IN
27872: IFFALSE 27901
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27874: LD_VAR 0 4
27878: PUSH
27879: LD_INT 1
27881: ARRAY
27882: PPUSH
27883: LD_VAR 0 4
27887: PUSH
27888: LD_INT 2
27890: ARRAY
27891: PPUSH
27892: LD_VAR 0 1
27896: PPUSH
27897: CALL_OW 456
// end ;
27901: GO 27814
27903: POP
27904: POP
// end ;
27905: LD_VAR 0 3
27909: RET
// export function Count ( array ) ; var i ; begin
27910: LD_INT 0
27912: PPUSH
27913: PPUSH
// result := 0 ;
27914: LD_ADDR_VAR 0 2
27918: PUSH
27919: LD_INT 0
27921: ST_TO_ADDR
// for i in array do
27922: LD_ADDR_VAR 0 3
27926: PUSH
27927: LD_VAR 0 1
27931: PUSH
27932: FOR_IN
27933: IFFALSE 27957
// if i then
27935: LD_VAR 0 3
27939: IFFALSE 27955
// result := result + 1 ;
27941: LD_ADDR_VAR 0 2
27945: PUSH
27946: LD_VAR 0 2
27950: PUSH
27951: LD_INT 1
27953: PLUS
27954: ST_TO_ADDR
27955: GO 27932
27957: POP
27958: POP
// end ;
27959: LD_VAR 0 2
27963: RET
// export function IsEmpty ( building ) ; begin
27964: LD_INT 0
27966: PPUSH
// if not building then
27967: LD_VAR 0 1
27971: NOT
27972: IFFALSE 27976
// exit ;
27974: GO 28019
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27976: LD_ADDR_VAR 0 2
27980: PUSH
27981: LD_VAR 0 1
27985: PUSH
27986: LD_INT 22
27988: PUSH
27989: LD_VAR 0 1
27993: PPUSH
27994: CALL_OW 255
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 58
28005: PUSH
28006: EMPTY
28007: LIST
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PPUSH
28013: CALL_OW 69
28017: IN
28018: ST_TO_ADDR
// end ;
28019: LD_VAR 0 2
28023: RET
// export function IsNotFull ( building ) ; var places ; begin
28024: LD_INT 0
28026: PPUSH
28027: PPUSH
// if not building then
28028: LD_VAR 0 1
28032: NOT
28033: IFFALSE 28037
// exit ;
28035: GO 28208
// result := false ;
28037: LD_ADDR_VAR 0 2
28041: PUSH
28042: LD_INT 0
28044: ST_TO_ADDR
// places := 0 ;
28045: LD_ADDR_VAR 0 3
28049: PUSH
28050: LD_INT 0
28052: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
28053: LD_VAR 0 1
28057: PPUSH
28058: CALL_OW 266
28062: PUSH
28063: LD_INT 0
28065: DOUBLE
28066: EQUAL
28067: IFTRUE 28125
28069: LD_INT 1
28071: DOUBLE
28072: EQUAL
28073: IFTRUE 28125
28075: LD_INT 6
28077: DOUBLE
28078: EQUAL
28079: IFTRUE 28125
28081: LD_INT 7
28083: DOUBLE
28084: EQUAL
28085: IFTRUE 28125
28087: LD_INT 8
28089: DOUBLE
28090: EQUAL
28091: IFTRUE 28125
28093: LD_INT 4
28095: DOUBLE
28096: EQUAL
28097: IFTRUE 28125
28099: LD_INT 5
28101: DOUBLE
28102: EQUAL
28103: IFTRUE 28125
28105: LD_INT 2
28107: DOUBLE
28108: EQUAL
28109: IFTRUE 28125
28111: LD_INT 3
28113: DOUBLE
28114: EQUAL
28115: IFTRUE 28125
28117: LD_INT 35
28119: DOUBLE
28120: EQUAL
28121: IFTRUE 28125
28123: GO 28136
28125: POP
// places := 6 ; b_bunker , b_breastwork :
28126: LD_ADDR_VAR 0 3
28130: PUSH
28131: LD_INT 6
28133: ST_TO_ADDR
28134: GO 28181
28136: LD_INT 32
28138: DOUBLE
28139: EQUAL
28140: IFTRUE 28150
28142: LD_INT 31
28144: DOUBLE
28145: EQUAL
28146: IFTRUE 28150
28148: GO 28161
28150: POP
// places := 1 ; b_control_tower :
28151: LD_ADDR_VAR 0 3
28155: PUSH
28156: LD_INT 1
28158: ST_TO_ADDR
28159: GO 28181
28161: LD_INT 36
28163: DOUBLE
28164: EQUAL
28165: IFTRUE 28169
28167: GO 28180
28169: POP
// places := 3 ; end ;
28170: LD_ADDR_VAR 0 3
28174: PUSH
28175: LD_INT 3
28177: ST_TO_ADDR
28178: GO 28181
28180: POP
// if places then
28181: LD_VAR 0 3
28185: IFFALSE 28208
// result := UnitsInside ( building ) < places ;
28187: LD_ADDR_VAR 0 2
28191: PUSH
28192: LD_VAR 0 1
28196: PPUSH
28197: CALL_OW 313
28201: PUSH
28202: LD_VAR 0 3
28206: LESS
28207: ST_TO_ADDR
// end ;
28208: LD_VAR 0 2
28212: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28213: LD_INT 0
28215: PPUSH
28216: PPUSH
28217: PPUSH
28218: PPUSH
// tmp := [ ] ;
28219: LD_ADDR_VAR 0 3
28223: PUSH
28224: EMPTY
28225: ST_TO_ADDR
// list := [ ] ;
28226: LD_ADDR_VAR 0 5
28230: PUSH
28231: EMPTY
28232: ST_TO_ADDR
// for i = 16 to 25 do
28233: LD_ADDR_VAR 0 4
28237: PUSH
28238: DOUBLE
28239: LD_INT 16
28241: DEC
28242: ST_TO_ADDR
28243: LD_INT 25
28245: PUSH
28246: FOR_TO
28247: IFFALSE 28320
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28249: LD_ADDR_VAR 0 3
28253: PUSH
28254: LD_VAR 0 3
28258: PUSH
28259: LD_INT 22
28261: PUSH
28262: LD_VAR 0 1
28266: PPUSH
28267: CALL_OW 255
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 91
28278: PUSH
28279: LD_VAR 0 1
28283: PUSH
28284: LD_INT 6
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: LIST
28291: PUSH
28292: LD_INT 30
28294: PUSH
28295: LD_VAR 0 4
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: LIST
28308: PUSH
28309: EMPTY
28310: LIST
28311: PPUSH
28312: CALL_OW 69
28316: ADD
28317: ST_TO_ADDR
28318: GO 28246
28320: POP
28321: POP
// for i = 1 to tmp do
28322: LD_ADDR_VAR 0 4
28326: PUSH
28327: DOUBLE
28328: LD_INT 1
28330: DEC
28331: ST_TO_ADDR
28332: LD_VAR 0 3
28336: PUSH
28337: FOR_TO
28338: IFFALSE 28426
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28340: LD_ADDR_VAR 0 5
28344: PUSH
28345: LD_VAR 0 5
28349: PUSH
28350: LD_VAR 0 3
28354: PUSH
28355: LD_VAR 0 4
28359: ARRAY
28360: PPUSH
28361: CALL_OW 266
28365: PUSH
28366: LD_VAR 0 3
28370: PUSH
28371: LD_VAR 0 4
28375: ARRAY
28376: PPUSH
28377: CALL_OW 250
28381: PUSH
28382: LD_VAR 0 3
28386: PUSH
28387: LD_VAR 0 4
28391: ARRAY
28392: PPUSH
28393: CALL_OW 251
28397: PUSH
28398: LD_VAR 0 3
28402: PUSH
28403: LD_VAR 0 4
28407: ARRAY
28408: PPUSH
28409: CALL_OW 254
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: LIST
28418: LIST
28419: PUSH
28420: EMPTY
28421: LIST
28422: ADD
28423: ST_TO_ADDR
28424: GO 28337
28426: POP
28427: POP
// result := list ;
28428: LD_ADDR_VAR 0 2
28432: PUSH
28433: LD_VAR 0 5
28437: ST_TO_ADDR
// end ;
28438: LD_VAR 0 2
28442: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28443: LD_INT 0
28445: PPUSH
28446: PPUSH
28447: PPUSH
28448: PPUSH
28449: PPUSH
28450: PPUSH
28451: PPUSH
// if not factory then
28452: LD_VAR 0 1
28456: NOT
28457: IFFALSE 28461
// exit ;
28459: GO 29054
// if control = control_apeman then
28461: LD_VAR 0 4
28465: PUSH
28466: LD_INT 5
28468: EQUAL
28469: IFFALSE 28578
// begin tmp := UnitsInside ( factory ) ;
28471: LD_ADDR_VAR 0 8
28475: PUSH
28476: LD_VAR 0 1
28480: PPUSH
28481: CALL_OW 313
28485: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28486: LD_VAR 0 8
28490: PPUSH
28491: LD_INT 25
28493: PUSH
28494: LD_INT 12
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PPUSH
28501: CALL_OW 72
28505: NOT
28506: IFFALSE 28516
// control := control_manual ;
28508: LD_ADDR_VAR 0 4
28512: PUSH
28513: LD_INT 1
28515: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28516: LD_ADDR_VAR 0 8
28520: PUSH
28521: LD_VAR 0 1
28525: PPUSH
28526: CALL 28213 0 1
28530: ST_TO_ADDR
// if tmp then
28531: LD_VAR 0 8
28535: IFFALSE 28578
// begin for i in tmp do
28537: LD_ADDR_VAR 0 7
28541: PUSH
28542: LD_VAR 0 8
28546: PUSH
28547: FOR_IN
28548: IFFALSE 28576
// if i [ 1 ] = b_ext_radio then
28550: LD_VAR 0 7
28554: PUSH
28555: LD_INT 1
28557: ARRAY
28558: PUSH
28559: LD_INT 22
28561: EQUAL
28562: IFFALSE 28574
// begin control := control_remote ;
28564: LD_ADDR_VAR 0 4
28568: PUSH
28569: LD_INT 2
28571: ST_TO_ADDR
// break ;
28572: GO 28576
// end ;
28574: GO 28547
28576: POP
28577: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28578: LD_VAR 0 1
28582: PPUSH
28583: LD_VAR 0 2
28587: PPUSH
28588: LD_VAR 0 3
28592: PPUSH
28593: LD_VAR 0 4
28597: PPUSH
28598: LD_VAR 0 5
28602: PPUSH
28603: CALL_OW 448
28607: IFFALSE 28642
// begin result := [ chassis , engine , control , weapon ] ;
28609: LD_ADDR_VAR 0 6
28613: PUSH
28614: LD_VAR 0 2
28618: PUSH
28619: LD_VAR 0 3
28623: PUSH
28624: LD_VAR 0 4
28628: PUSH
28629: LD_VAR 0 5
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: ST_TO_ADDR
// exit ;
28640: GO 29054
// end ; _chassis := AvailableChassisList ( factory ) ;
28642: LD_ADDR_VAR 0 9
28646: PUSH
28647: LD_VAR 0 1
28651: PPUSH
28652: CALL_OW 475
28656: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28657: LD_ADDR_VAR 0 11
28661: PUSH
28662: LD_VAR 0 1
28666: PPUSH
28667: CALL_OW 476
28671: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28672: LD_ADDR_VAR 0 12
28676: PUSH
28677: LD_VAR 0 1
28681: PPUSH
28682: CALL_OW 477
28686: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28687: LD_ADDR_VAR 0 10
28691: PUSH
28692: LD_VAR 0 1
28696: PPUSH
28697: CALL_OW 478
28701: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28702: LD_VAR 0 9
28706: NOT
28707: PUSH
28708: LD_VAR 0 11
28712: NOT
28713: OR
28714: PUSH
28715: LD_VAR 0 12
28719: NOT
28720: OR
28721: PUSH
28722: LD_VAR 0 10
28726: NOT
28727: OR
28728: IFFALSE 28763
// begin result := [ chassis , engine , control , weapon ] ;
28730: LD_ADDR_VAR 0 6
28734: PUSH
28735: LD_VAR 0 2
28739: PUSH
28740: LD_VAR 0 3
28744: PUSH
28745: LD_VAR 0 4
28749: PUSH
28750: LD_VAR 0 5
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: ST_TO_ADDR
// exit ;
28761: GO 29054
// end ; if not chassis in _chassis then
28763: LD_VAR 0 2
28767: PUSH
28768: LD_VAR 0 9
28772: IN
28773: NOT
28774: IFFALSE 28800
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28776: LD_ADDR_VAR 0 2
28780: PUSH
28781: LD_VAR 0 9
28785: PUSH
28786: LD_INT 1
28788: PPUSH
28789: LD_VAR 0 9
28793: PPUSH
28794: CALL_OW 12
28798: ARRAY
28799: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28800: LD_VAR 0 2
28804: PPUSH
28805: LD_VAR 0 3
28809: PPUSH
28810: CALL 29059 0 2
28814: NOT
28815: IFFALSE 28874
// repeat engine := _engine [ 1 ] ;
28817: LD_ADDR_VAR 0 3
28821: PUSH
28822: LD_VAR 0 11
28826: PUSH
28827: LD_INT 1
28829: ARRAY
28830: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28831: LD_ADDR_VAR 0 11
28835: PUSH
28836: LD_VAR 0 11
28840: PPUSH
28841: LD_INT 1
28843: PPUSH
28844: CALL_OW 3
28848: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28849: LD_VAR 0 2
28853: PPUSH
28854: LD_VAR 0 3
28858: PPUSH
28859: CALL 29059 0 2
28863: PUSH
28864: LD_VAR 0 11
28868: PUSH
28869: EMPTY
28870: EQUAL
28871: OR
28872: IFFALSE 28817
// if not control in _control then
28874: LD_VAR 0 4
28878: PUSH
28879: LD_VAR 0 12
28883: IN
28884: NOT
28885: IFFALSE 28911
// control := _control [ rand ( 1 , _control ) ] ;
28887: LD_ADDR_VAR 0 4
28891: PUSH
28892: LD_VAR 0 12
28896: PUSH
28897: LD_INT 1
28899: PPUSH
28900: LD_VAR 0 12
28904: PPUSH
28905: CALL_OW 12
28909: ARRAY
28910: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28911: LD_VAR 0 2
28915: PPUSH
28916: LD_VAR 0 5
28920: PPUSH
28921: CALL 29279 0 2
28925: NOT
28926: IFFALSE 28985
// repeat weapon := _weapon [ 1 ] ;
28928: LD_ADDR_VAR 0 5
28932: PUSH
28933: LD_VAR 0 10
28937: PUSH
28938: LD_INT 1
28940: ARRAY
28941: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28942: LD_ADDR_VAR 0 10
28946: PUSH
28947: LD_VAR 0 10
28951: PPUSH
28952: LD_INT 1
28954: PPUSH
28955: CALL_OW 3
28959: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28960: LD_VAR 0 2
28964: PPUSH
28965: LD_VAR 0 5
28969: PPUSH
28970: CALL 29279 0 2
28974: PUSH
28975: LD_VAR 0 10
28979: PUSH
28980: EMPTY
28981: EQUAL
28982: OR
28983: IFFALSE 28928
// result := [ ] ;
28985: LD_ADDR_VAR 0 6
28989: PUSH
28990: EMPTY
28991: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28992: LD_VAR 0 1
28996: PPUSH
28997: LD_VAR 0 2
29001: PPUSH
29002: LD_VAR 0 3
29006: PPUSH
29007: LD_VAR 0 4
29011: PPUSH
29012: LD_VAR 0 5
29016: PPUSH
29017: CALL_OW 448
29021: IFFALSE 29054
// result := [ chassis , engine , control , weapon ] ;
29023: LD_ADDR_VAR 0 6
29027: PUSH
29028: LD_VAR 0 2
29032: PUSH
29033: LD_VAR 0 3
29037: PUSH
29038: LD_VAR 0 4
29042: PUSH
29043: LD_VAR 0 5
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: ST_TO_ADDR
// end ;
29054: LD_VAR 0 6
29058: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29059: LD_INT 0
29061: PPUSH
// if not chassis or not engine then
29062: LD_VAR 0 1
29066: NOT
29067: PUSH
29068: LD_VAR 0 2
29072: NOT
29073: OR
29074: IFFALSE 29078
// exit ;
29076: GO 29274
// case engine of engine_solar :
29078: LD_VAR 0 2
29082: PUSH
29083: LD_INT 2
29085: DOUBLE
29086: EQUAL
29087: IFTRUE 29091
29089: GO 29129
29091: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29092: LD_ADDR_VAR 0 3
29096: PUSH
29097: LD_INT 11
29099: PUSH
29100: LD_INT 12
29102: PUSH
29103: LD_INT 13
29105: PUSH
29106: LD_INT 14
29108: PUSH
29109: LD_INT 1
29111: PUSH
29112: LD_INT 2
29114: PUSH
29115: LD_INT 3
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: ST_TO_ADDR
29127: GO 29258
29129: LD_INT 1
29131: DOUBLE
29132: EQUAL
29133: IFTRUE 29137
29135: GO 29199
29137: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29138: LD_ADDR_VAR 0 3
29142: PUSH
29143: LD_INT 11
29145: PUSH
29146: LD_INT 12
29148: PUSH
29149: LD_INT 13
29151: PUSH
29152: LD_INT 14
29154: PUSH
29155: LD_INT 1
29157: PUSH
29158: LD_INT 2
29160: PUSH
29161: LD_INT 3
29163: PUSH
29164: LD_INT 4
29166: PUSH
29167: LD_INT 5
29169: PUSH
29170: LD_INT 21
29172: PUSH
29173: LD_INT 23
29175: PUSH
29176: LD_INT 22
29178: PUSH
29179: LD_INT 24
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: ST_TO_ADDR
29197: GO 29258
29199: LD_INT 3
29201: DOUBLE
29202: EQUAL
29203: IFTRUE 29207
29205: GO 29257
29207: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29208: LD_ADDR_VAR 0 3
29212: PUSH
29213: LD_INT 13
29215: PUSH
29216: LD_INT 14
29218: PUSH
29219: LD_INT 2
29221: PUSH
29222: LD_INT 3
29224: PUSH
29225: LD_INT 4
29227: PUSH
29228: LD_INT 5
29230: PUSH
29231: LD_INT 21
29233: PUSH
29234: LD_INT 22
29236: PUSH
29237: LD_INT 23
29239: PUSH
29240: LD_INT 24
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: ST_TO_ADDR
29255: GO 29258
29257: POP
// result := ( chassis in result ) ;
29258: LD_ADDR_VAR 0 3
29262: PUSH
29263: LD_VAR 0 1
29267: PUSH
29268: LD_VAR 0 3
29272: IN
29273: ST_TO_ADDR
// end ;
29274: LD_VAR 0 3
29278: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29279: LD_INT 0
29281: PPUSH
// if not chassis or not weapon then
29282: LD_VAR 0 1
29286: NOT
29287: PUSH
29288: LD_VAR 0 2
29292: NOT
29293: OR
29294: IFFALSE 29298
// exit ;
29296: GO 30358
// case weapon of us_machine_gun :
29298: LD_VAR 0 2
29302: PUSH
29303: LD_INT 2
29305: DOUBLE
29306: EQUAL
29307: IFTRUE 29311
29309: GO 29341
29311: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29312: LD_ADDR_VAR 0 3
29316: PUSH
29317: LD_INT 1
29319: PUSH
29320: LD_INT 2
29322: PUSH
29323: LD_INT 3
29325: PUSH
29326: LD_INT 4
29328: PUSH
29329: LD_INT 5
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: ST_TO_ADDR
29339: GO 30342
29341: LD_INT 3
29343: DOUBLE
29344: EQUAL
29345: IFTRUE 29349
29347: GO 29379
29349: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29350: LD_ADDR_VAR 0 3
29354: PUSH
29355: LD_INT 1
29357: PUSH
29358: LD_INT 2
29360: PUSH
29361: LD_INT 3
29363: PUSH
29364: LD_INT 4
29366: PUSH
29367: LD_INT 5
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: ST_TO_ADDR
29377: GO 30342
29379: LD_INT 11
29381: DOUBLE
29382: EQUAL
29383: IFTRUE 29387
29385: GO 29417
29387: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29388: LD_ADDR_VAR 0 3
29392: PUSH
29393: LD_INT 1
29395: PUSH
29396: LD_INT 2
29398: PUSH
29399: LD_INT 3
29401: PUSH
29402: LD_INT 4
29404: PUSH
29405: LD_INT 5
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: ST_TO_ADDR
29415: GO 30342
29417: LD_INT 4
29419: DOUBLE
29420: EQUAL
29421: IFTRUE 29425
29423: GO 29451
29425: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29426: LD_ADDR_VAR 0 3
29430: PUSH
29431: LD_INT 2
29433: PUSH
29434: LD_INT 3
29436: PUSH
29437: LD_INT 4
29439: PUSH
29440: LD_INT 5
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: ST_TO_ADDR
29449: GO 30342
29451: LD_INT 5
29453: DOUBLE
29454: EQUAL
29455: IFTRUE 29459
29457: GO 29485
29459: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29460: LD_ADDR_VAR 0 3
29464: PUSH
29465: LD_INT 2
29467: PUSH
29468: LD_INT 3
29470: PUSH
29471: LD_INT 4
29473: PUSH
29474: LD_INT 5
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: ST_TO_ADDR
29483: GO 30342
29485: LD_INT 9
29487: DOUBLE
29488: EQUAL
29489: IFTRUE 29493
29491: GO 29519
29493: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29494: LD_ADDR_VAR 0 3
29498: PUSH
29499: LD_INT 2
29501: PUSH
29502: LD_INT 3
29504: PUSH
29505: LD_INT 4
29507: PUSH
29508: LD_INT 5
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: ST_TO_ADDR
29517: GO 30342
29519: LD_INT 7
29521: DOUBLE
29522: EQUAL
29523: IFTRUE 29527
29525: GO 29553
29527: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29528: LD_ADDR_VAR 0 3
29532: PUSH
29533: LD_INT 2
29535: PUSH
29536: LD_INT 3
29538: PUSH
29539: LD_INT 4
29541: PUSH
29542: LD_INT 5
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: ST_TO_ADDR
29551: GO 30342
29553: LD_INT 12
29555: DOUBLE
29556: EQUAL
29557: IFTRUE 29561
29559: GO 29587
29561: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29562: LD_ADDR_VAR 0 3
29566: PUSH
29567: LD_INT 2
29569: PUSH
29570: LD_INT 3
29572: PUSH
29573: LD_INT 4
29575: PUSH
29576: LD_INT 5
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: ST_TO_ADDR
29585: GO 30342
29587: LD_INT 13
29589: DOUBLE
29590: EQUAL
29591: IFTRUE 29595
29593: GO 29621
29595: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29596: LD_ADDR_VAR 0 3
29600: PUSH
29601: LD_INT 2
29603: PUSH
29604: LD_INT 3
29606: PUSH
29607: LD_INT 4
29609: PUSH
29610: LD_INT 5
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: ST_TO_ADDR
29619: GO 30342
29621: LD_INT 14
29623: DOUBLE
29624: EQUAL
29625: IFTRUE 29629
29627: GO 29647
29629: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29630: LD_ADDR_VAR 0 3
29634: PUSH
29635: LD_INT 4
29637: PUSH
29638: LD_INT 5
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: ST_TO_ADDR
29645: GO 30342
29647: LD_INT 6
29649: DOUBLE
29650: EQUAL
29651: IFTRUE 29655
29653: GO 29673
29655: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29656: LD_ADDR_VAR 0 3
29660: PUSH
29661: LD_INT 4
29663: PUSH
29664: LD_INT 5
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: ST_TO_ADDR
29671: GO 30342
29673: LD_INT 10
29675: DOUBLE
29676: EQUAL
29677: IFTRUE 29681
29679: GO 29699
29681: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29682: LD_ADDR_VAR 0 3
29686: PUSH
29687: LD_INT 4
29689: PUSH
29690: LD_INT 5
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: ST_TO_ADDR
29697: GO 30342
29699: LD_INT 22
29701: DOUBLE
29702: EQUAL
29703: IFTRUE 29707
29705: GO 29733
29707: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29708: LD_ADDR_VAR 0 3
29712: PUSH
29713: LD_INT 11
29715: PUSH
29716: LD_INT 12
29718: PUSH
29719: LD_INT 13
29721: PUSH
29722: LD_INT 14
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: ST_TO_ADDR
29731: GO 30342
29733: LD_INT 23
29735: DOUBLE
29736: EQUAL
29737: IFTRUE 29741
29739: GO 29767
29741: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29742: LD_ADDR_VAR 0 3
29746: PUSH
29747: LD_INT 11
29749: PUSH
29750: LD_INT 12
29752: PUSH
29753: LD_INT 13
29755: PUSH
29756: LD_INT 14
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: ST_TO_ADDR
29765: GO 30342
29767: LD_INT 24
29769: DOUBLE
29770: EQUAL
29771: IFTRUE 29775
29773: GO 29801
29775: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29776: LD_ADDR_VAR 0 3
29780: PUSH
29781: LD_INT 11
29783: PUSH
29784: LD_INT 12
29786: PUSH
29787: LD_INT 13
29789: PUSH
29790: LD_INT 14
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: ST_TO_ADDR
29799: GO 30342
29801: LD_INT 30
29803: DOUBLE
29804: EQUAL
29805: IFTRUE 29809
29807: GO 29835
29809: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29810: LD_ADDR_VAR 0 3
29814: PUSH
29815: LD_INT 11
29817: PUSH
29818: LD_INT 12
29820: PUSH
29821: LD_INT 13
29823: PUSH
29824: LD_INT 14
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: ST_TO_ADDR
29833: GO 30342
29835: LD_INT 25
29837: DOUBLE
29838: EQUAL
29839: IFTRUE 29843
29841: GO 29861
29843: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29844: LD_ADDR_VAR 0 3
29848: PUSH
29849: LD_INT 13
29851: PUSH
29852: LD_INT 14
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: ST_TO_ADDR
29859: GO 30342
29861: LD_INT 27
29863: DOUBLE
29864: EQUAL
29865: IFTRUE 29869
29867: GO 29887
29869: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29870: LD_ADDR_VAR 0 3
29874: PUSH
29875: LD_INT 13
29877: PUSH
29878: LD_INT 14
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: ST_TO_ADDR
29885: GO 30342
29887: LD_INT 92
29889: DOUBLE
29890: EQUAL
29891: IFTRUE 29895
29893: GO 29921
29895: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29896: LD_ADDR_VAR 0 3
29900: PUSH
29901: LD_INT 11
29903: PUSH
29904: LD_INT 12
29906: PUSH
29907: LD_INT 13
29909: PUSH
29910: LD_INT 14
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: ST_TO_ADDR
29919: GO 30342
29921: LD_INT 28
29923: DOUBLE
29924: EQUAL
29925: IFTRUE 29929
29927: GO 29947
29929: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29930: LD_ADDR_VAR 0 3
29934: PUSH
29935: LD_INT 13
29937: PUSH
29938: LD_INT 14
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: ST_TO_ADDR
29945: GO 30342
29947: LD_INT 29
29949: DOUBLE
29950: EQUAL
29951: IFTRUE 29955
29953: GO 29973
29955: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29956: LD_ADDR_VAR 0 3
29960: PUSH
29961: LD_INT 13
29963: PUSH
29964: LD_INT 14
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: ST_TO_ADDR
29971: GO 30342
29973: LD_INT 31
29975: DOUBLE
29976: EQUAL
29977: IFTRUE 29981
29979: GO 29999
29981: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29982: LD_ADDR_VAR 0 3
29986: PUSH
29987: LD_INT 13
29989: PUSH
29990: LD_INT 14
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: ST_TO_ADDR
29997: GO 30342
29999: LD_INT 26
30001: DOUBLE
30002: EQUAL
30003: IFTRUE 30007
30005: GO 30025
30007: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30008: LD_ADDR_VAR 0 3
30012: PUSH
30013: LD_INT 13
30015: PUSH
30016: LD_INT 14
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: ST_TO_ADDR
30023: GO 30342
30025: LD_INT 42
30027: DOUBLE
30028: EQUAL
30029: IFTRUE 30033
30031: GO 30059
30033: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30034: LD_ADDR_VAR 0 3
30038: PUSH
30039: LD_INT 21
30041: PUSH
30042: LD_INT 22
30044: PUSH
30045: LD_INT 23
30047: PUSH
30048: LD_INT 24
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: ST_TO_ADDR
30057: GO 30342
30059: LD_INT 43
30061: DOUBLE
30062: EQUAL
30063: IFTRUE 30067
30065: GO 30093
30067: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30068: LD_ADDR_VAR 0 3
30072: PUSH
30073: LD_INT 21
30075: PUSH
30076: LD_INT 22
30078: PUSH
30079: LD_INT 23
30081: PUSH
30082: LD_INT 24
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: ST_TO_ADDR
30091: GO 30342
30093: LD_INT 44
30095: DOUBLE
30096: EQUAL
30097: IFTRUE 30101
30099: GO 30127
30101: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30102: LD_ADDR_VAR 0 3
30106: PUSH
30107: LD_INT 21
30109: PUSH
30110: LD_INT 22
30112: PUSH
30113: LD_INT 23
30115: PUSH
30116: LD_INT 24
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: ST_TO_ADDR
30125: GO 30342
30127: LD_INT 45
30129: DOUBLE
30130: EQUAL
30131: IFTRUE 30135
30133: GO 30161
30135: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30136: LD_ADDR_VAR 0 3
30140: PUSH
30141: LD_INT 21
30143: PUSH
30144: LD_INT 22
30146: PUSH
30147: LD_INT 23
30149: PUSH
30150: LD_INT 24
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: ST_TO_ADDR
30159: GO 30342
30161: LD_INT 49
30163: DOUBLE
30164: EQUAL
30165: IFTRUE 30169
30167: GO 30195
30169: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30170: LD_ADDR_VAR 0 3
30174: PUSH
30175: LD_INT 21
30177: PUSH
30178: LD_INT 22
30180: PUSH
30181: LD_INT 23
30183: PUSH
30184: LD_INT 24
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: ST_TO_ADDR
30193: GO 30342
30195: LD_INT 51
30197: DOUBLE
30198: EQUAL
30199: IFTRUE 30203
30201: GO 30229
30203: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30204: LD_ADDR_VAR 0 3
30208: PUSH
30209: LD_INT 21
30211: PUSH
30212: LD_INT 22
30214: PUSH
30215: LD_INT 23
30217: PUSH
30218: LD_INT 24
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: ST_TO_ADDR
30227: GO 30342
30229: LD_INT 52
30231: DOUBLE
30232: EQUAL
30233: IFTRUE 30237
30235: GO 30263
30237: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30238: LD_ADDR_VAR 0 3
30242: PUSH
30243: LD_INT 21
30245: PUSH
30246: LD_INT 22
30248: PUSH
30249: LD_INT 23
30251: PUSH
30252: LD_INT 24
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: ST_TO_ADDR
30261: GO 30342
30263: LD_INT 53
30265: DOUBLE
30266: EQUAL
30267: IFTRUE 30271
30269: GO 30289
30271: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30272: LD_ADDR_VAR 0 3
30276: PUSH
30277: LD_INT 23
30279: PUSH
30280: LD_INT 24
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: ST_TO_ADDR
30287: GO 30342
30289: LD_INT 46
30291: DOUBLE
30292: EQUAL
30293: IFTRUE 30297
30295: GO 30315
30297: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30298: LD_ADDR_VAR 0 3
30302: PUSH
30303: LD_INT 23
30305: PUSH
30306: LD_INT 24
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: ST_TO_ADDR
30313: GO 30342
30315: LD_INT 47
30317: DOUBLE
30318: EQUAL
30319: IFTRUE 30323
30321: GO 30341
30323: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30324: LD_ADDR_VAR 0 3
30328: PUSH
30329: LD_INT 23
30331: PUSH
30332: LD_INT 24
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: ST_TO_ADDR
30339: GO 30342
30341: POP
// result := ( chassis in result ) ;
30342: LD_ADDR_VAR 0 3
30346: PUSH
30347: LD_VAR 0 1
30351: PUSH
30352: LD_VAR 0 3
30356: IN
30357: ST_TO_ADDR
// end ;
30358: LD_VAR 0 3
30362: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30363: LD_INT 0
30365: PPUSH
30366: PPUSH
30367: PPUSH
30368: PPUSH
30369: PPUSH
30370: PPUSH
30371: PPUSH
// result := array ;
30372: LD_ADDR_VAR 0 5
30376: PUSH
30377: LD_VAR 0 1
30381: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30382: LD_VAR 0 1
30386: NOT
30387: PUSH
30388: LD_VAR 0 2
30392: NOT
30393: OR
30394: PUSH
30395: LD_VAR 0 3
30399: NOT
30400: OR
30401: PUSH
30402: LD_VAR 0 2
30406: PUSH
30407: LD_VAR 0 1
30411: GREATER
30412: OR
30413: PUSH
30414: LD_VAR 0 3
30418: PUSH
30419: LD_VAR 0 1
30423: GREATER
30424: OR
30425: IFFALSE 30429
// exit ;
30427: GO 30725
// if direction then
30429: LD_VAR 0 4
30433: IFFALSE 30497
// begin d := 1 ;
30435: LD_ADDR_VAR 0 9
30439: PUSH
30440: LD_INT 1
30442: ST_TO_ADDR
// if i_from > i_to then
30443: LD_VAR 0 2
30447: PUSH
30448: LD_VAR 0 3
30452: GREATER
30453: IFFALSE 30479
// length := ( array - i_from ) + i_to else
30455: LD_ADDR_VAR 0 11
30459: PUSH
30460: LD_VAR 0 1
30464: PUSH
30465: LD_VAR 0 2
30469: MINUS
30470: PUSH
30471: LD_VAR 0 3
30475: PLUS
30476: ST_TO_ADDR
30477: GO 30495
// length := i_to - i_from ;
30479: LD_ADDR_VAR 0 11
30483: PUSH
30484: LD_VAR 0 3
30488: PUSH
30489: LD_VAR 0 2
30493: MINUS
30494: ST_TO_ADDR
// end else
30495: GO 30558
// begin d := - 1 ;
30497: LD_ADDR_VAR 0 9
30501: PUSH
30502: LD_INT 1
30504: NEG
30505: ST_TO_ADDR
// if i_from > i_to then
30506: LD_VAR 0 2
30510: PUSH
30511: LD_VAR 0 3
30515: GREATER
30516: IFFALSE 30536
// length := i_from - i_to else
30518: LD_ADDR_VAR 0 11
30522: PUSH
30523: LD_VAR 0 2
30527: PUSH
30528: LD_VAR 0 3
30532: MINUS
30533: ST_TO_ADDR
30534: GO 30558
// length := ( array - i_to ) + i_from ;
30536: LD_ADDR_VAR 0 11
30540: PUSH
30541: LD_VAR 0 1
30545: PUSH
30546: LD_VAR 0 3
30550: MINUS
30551: PUSH
30552: LD_VAR 0 2
30556: PLUS
30557: ST_TO_ADDR
// end ; if not length then
30558: LD_VAR 0 11
30562: NOT
30563: IFFALSE 30567
// exit ;
30565: GO 30725
// tmp := array ;
30567: LD_ADDR_VAR 0 10
30571: PUSH
30572: LD_VAR 0 1
30576: ST_TO_ADDR
// for i = 1 to length do
30577: LD_ADDR_VAR 0 6
30581: PUSH
30582: DOUBLE
30583: LD_INT 1
30585: DEC
30586: ST_TO_ADDR
30587: LD_VAR 0 11
30591: PUSH
30592: FOR_TO
30593: IFFALSE 30713
// begin for j = 1 to array do
30595: LD_ADDR_VAR 0 7
30599: PUSH
30600: DOUBLE
30601: LD_INT 1
30603: DEC
30604: ST_TO_ADDR
30605: LD_VAR 0 1
30609: PUSH
30610: FOR_TO
30611: IFFALSE 30699
// begin k := j + d ;
30613: LD_ADDR_VAR 0 8
30617: PUSH
30618: LD_VAR 0 7
30622: PUSH
30623: LD_VAR 0 9
30627: PLUS
30628: ST_TO_ADDR
// if k > array then
30629: LD_VAR 0 8
30633: PUSH
30634: LD_VAR 0 1
30638: GREATER
30639: IFFALSE 30649
// k := 1 ;
30641: LD_ADDR_VAR 0 8
30645: PUSH
30646: LD_INT 1
30648: ST_TO_ADDR
// if not k then
30649: LD_VAR 0 8
30653: NOT
30654: IFFALSE 30666
// k := array ;
30656: LD_ADDR_VAR 0 8
30660: PUSH
30661: LD_VAR 0 1
30665: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30666: LD_ADDR_VAR 0 10
30670: PUSH
30671: LD_VAR 0 10
30675: PPUSH
30676: LD_VAR 0 8
30680: PPUSH
30681: LD_VAR 0 1
30685: PUSH
30686: LD_VAR 0 7
30690: ARRAY
30691: PPUSH
30692: CALL_OW 1
30696: ST_TO_ADDR
// end ;
30697: GO 30610
30699: POP
30700: POP
// array := tmp ;
30701: LD_ADDR_VAR 0 1
30705: PUSH
30706: LD_VAR 0 10
30710: ST_TO_ADDR
// end ;
30711: GO 30592
30713: POP
30714: POP
// result := array ;
30715: LD_ADDR_VAR 0 5
30719: PUSH
30720: LD_VAR 0 1
30724: ST_TO_ADDR
// end ;
30725: LD_VAR 0 5
30729: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30730: LD_INT 0
30732: PPUSH
30733: PPUSH
// result := 0 ;
30734: LD_ADDR_VAR 0 3
30738: PUSH
30739: LD_INT 0
30741: ST_TO_ADDR
// if not array or not value in array then
30742: LD_VAR 0 1
30746: NOT
30747: PUSH
30748: LD_VAR 0 2
30752: PUSH
30753: LD_VAR 0 1
30757: IN
30758: NOT
30759: OR
30760: IFFALSE 30764
// exit ;
30762: GO 30818
// for i = 1 to array do
30764: LD_ADDR_VAR 0 4
30768: PUSH
30769: DOUBLE
30770: LD_INT 1
30772: DEC
30773: ST_TO_ADDR
30774: LD_VAR 0 1
30778: PUSH
30779: FOR_TO
30780: IFFALSE 30816
// if value = array [ i ] then
30782: LD_VAR 0 2
30786: PUSH
30787: LD_VAR 0 1
30791: PUSH
30792: LD_VAR 0 4
30796: ARRAY
30797: EQUAL
30798: IFFALSE 30814
// begin result := i ;
30800: LD_ADDR_VAR 0 3
30804: PUSH
30805: LD_VAR 0 4
30809: ST_TO_ADDR
// exit ;
30810: POP
30811: POP
30812: GO 30818
// end ;
30814: GO 30779
30816: POP
30817: POP
// end ;
30818: LD_VAR 0 3
30822: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30823: LD_INT 0
30825: PPUSH
// vc_chassis := chassis ;
30826: LD_ADDR_OWVAR 37
30830: PUSH
30831: LD_VAR 0 1
30835: ST_TO_ADDR
// vc_engine := engine ;
30836: LD_ADDR_OWVAR 39
30840: PUSH
30841: LD_VAR 0 2
30845: ST_TO_ADDR
// vc_control := control ;
30846: LD_ADDR_OWVAR 38
30850: PUSH
30851: LD_VAR 0 3
30855: ST_TO_ADDR
// vc_weapon := weapon ;
30856: LD_ADDR_OWVAR 40
30860: PUSH
30861: LD_VAR 0 4
30865: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30866: LD_ADDR_OWVAR 41
30870: PUSH
30871: LD_VAR 0 5
30875: ST_TO_ADDR
// end ;
30876: LD_VAR 0 6
30880: RET
// export function WantPlant ( unit ) ; var task ; begin
30881: LD_INT 0
30883: PPUSH
30884: PPUSH
// result := false ;
30885: LD_ADDR_VAR 0 2
30889: PUSH
30890: LD_INT 0
30892: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30893: LD_ADDR_VAR 0 3
30897: PUSH
30898: LD_VAR 0 1
30902: PPUSH
30903: CALL_OW 437
30907: ST_TO_ADDR
// if task then
30908: LD_VAR 0 3
30912: IFFALSE 30940
// if task [ 1 ] [ 1 ] = p then
30914: LD_VAR 0 3
30918: PUSH
30919: LD_INT 1
30921: ARRAY
30922: PUSH
30923: LD_INT 1
30925: ARRAY
30926: PUSH
30927: LD_STRING p
30929: EQUAL
30930: IFFALSE 30940
// result := true ;
30932: LD_ADDR_VAR 0 2
30936: PUSH
30937: LD_INT 1
30939: ST_TO_ADDR
// end ;
30940: LD_VAR 0 2
30944: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30945: LD_INT 0
30947: PPUSH
30948: PPUSH
30949: PPUSH
30950: PPUSH
// if pos < 1 then
30951: LD_VAR 0 2
30955: PUSH
30956: LD_INT 1
30958: LESS
30959: IFFALSE 30963
// exit ;
30961: GO 31266
// if pos = 1 then
30963: LD_VAR 0 2
30967: PUSH
30968: LD_INT 1
30970: EQUAL
30971: IFFALSE 31004
// result := Replace ( arr , pos [ 1 ] , value ) else
30973: LD_ADDR_VAR 0 4
30977: PUSH
30978: LD_VAR 0 1
30982: PPUSH
30983: LD_VAR 0 2
30987: PUSH
30988: LD_INT 1
30990: ARRAY
30991: PPUSH
30992: LD_VAR 0 3
30996: PPUSH
30997: CALL_OW 1
31001: ST_TO_ADDR
31002: GO 31266
// begin tmp := arr ;
31004: LD_ADDR_VAR 0 6
31008: PUSH
31009: LD_VAR 0 1
31013: ST_TO_ADDR
// s_arr := [ tmp ] ;
31014: LD_ADDR_VAR 0 7
31018: PUSH
31019: LD_VAR 0 6
31023: PUSH
31024: EMPTY
31025: LIST
31026: ST_TO_ADDR
// for i = 1 to pos - 1 do
31027: LD_ADDR_VAR 0 5
31031: PUSH
31032: DOUBLE
31033: LD_INT 1
31035: DEC
31036: ST_TO_ADDR
31037: LD_VAR 0 2
31041: PUSH
31042: LD_INT 1
31044: MINUS
31045: PUSH
31046: FOR_TO
31047: IFFALSE 31092
// begin tmp := tmp [ pos [ i ] ] ;
31049: LD_ADDR_VAR 0 6
31053: PUSH
31054: LD_VAR 0 6
31058: PUSH
31059: LD_VAR 0 2
31063: PUSH
31064: LD_VAR 0 5
31068: ARRAY
31069: ARRAY
31070: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31071: LD_ADDR_VAR 0 7
31075: PUSH
31076: LD_VAR 0 7
31080: PUSH
31081: LD_VAR 0 6
31085: PUSH
31086: EMPTY
31087: LIST
31088: ADD
31089: ST_TO_ADDR
// end ;
31090: GO 31046
31092: POP
31093: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31094: LD_ADDR_VAR 0 6
31098: PUSH
31099: LD_VAR 0 6
31103: PPUSH
31104: LD_VAR 0 2
31108: PUSH
31109: LD_VAR 0 2
31113: ARRAY
31114: PPUSH
31115: LD_VAR 0 3
31119: PPUSH
31120: CALL_OW 1
31124: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31125: LD_ADDR_VAR 0 7
31129: PUSH
31130: LD_VAR 0 7
31134: PPUSH
31135: LD_VAR 0 7
31139: PPUSH
31140: LD_VAR 0 6
31144: PPUSH
31145: CALL_OW 1
31149: ST_TO_ADDR
// for i = s_arr downto 2 do
31150: LD_ADDR_VAR 0 5
31154: PUSH
31155: DOUBLE
31156: LD_VAR 0 7
31160: INC
31161: ST_TO_ADDR
31162: LD_INT 2
31164: PUSH
31165: FOR_DOWNTO
31166: IFFALSE 31250
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31168: LD_ADDR_VAR 0 6
31172: PUSH
31173: LD_VAR 0 7
31177: PUSH
31178: LD_VAR 0 5
31182: PUSH
31183: LD_INT 1
31185: MINUS
31186: ARRAY
31187: PPUSH
31188: LD_VAR 0 2
31192: PUSH
31193: LD_VAR 0 5
31197: PUSH
31198: LD_INT 1
31200: MINUS
31201: ARRAY
31202: PPUSH
31203: LD_VAR 0 7
31207: PUSH
31208: LD_VAR 0 5
31212: ARRAY
31213: PPUSH
31214: CALL_OW 1
31218: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31219: LD_ADDR_VAR 0 7
31223: PUSH
31224: LD_VAR 0 7
31228: PPUSH
31229: LD_VAR 0 5
31233: PUSH
31234: LD_INT 1
31236: MINUS
31237: PPUSH
31238: LD_VAR 0 6
31242: PPUSH
31243: CALL_OW 1
31247: ST_TO_ADDR
// end ;
31248: GO 31165
31250: POP
31251: POP
// result := s_arr [ 1 ] ;
31252: LD_ADDR_VAR 0 4
31256: PUSH
31257: LD_VAR 0 7
31261: PUSH
31262: LD_INT 1
31264: ARRAY
31265: ST_TO_ADDR
// end ; end ;
31266: LD_VAR 0 4
31270: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31271: LD_INT 0
31273: PPUSH
31274: PPUSH
// if not list then
31275: LD_VAR 0 1
31279: NOT
31280: IFFALSE 31284
// exit ;
31282: GO 31375
// i := list [ pos1 ] ;
31284: LD_ADDR_VAR 0 5
31288: PUSH
31289: LD_VAR 0 1
31293: PUSH
31294: LD_VAR 0 2
31298: ARRAY
31299: ST_TO_ADDR
// if not i then
31300: LD_VAR 0 5
31304: NOT
31305: IFFALSE 31309
// exit ;
31307: GO 31375
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31309: LD_ADDR_VAR 0 1
31313: PUSH
31314: LD_VAR 0 1
31318: PPUSH
31319: LD_VAR 0 2
31323: PPUSH
31324: LD_VAR 0 1
31328: PUSH
31329: LD_VAR 0 3
31333: ARRAY
31334: PPUSH
31335: CALL_OW 1
31339: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31340: LD_ADDR_VAR 0 1
31344: PUSH
31345: LD_VAR 0 1
31349: PPUSH
31350: LD_VAR 0 3
31354: PPUSH
31355: LD_VAR 0 5
31359: PPUSH
31360: CALL_OW 1
31364: ST_TO_ADDR
// result := list ;
31365: LD_ADDR_VAR 0 4
31369: PUSH
31370: LD_VAR 0 1
31374: ST_TO_ADDR
// end ;
31375: LD_VAR 0 4
31379: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31380: LD_INT 0
31382: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31383: LD_ADDR_VAR 0 5
31387: PUSH
31388: LD_VAR 0 1
31392: PPUSH
31393: CALL_OW 250
31397: PPUSH
31398: LD_VAR 0 1
31402: PPUSH
31403: CALL_OW 251
31407: PPUSH
31408: LD_VAR 0 2
31412: PPUSH
31413: LD_VAR 0 3
31417: PPUSH
31418: LD_VAR 0 4
31422: PPUSH
31423: CALL 31433 0 5
31427: ST_TO_ADDR
// end ;
31428: LD_VAR 0 5
31432: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31433: LD_INT 0
31435: PPUSH
31436: PPUSH
31437: PPUSH
31438: PPUSH
// if not list then
31439: LD_VAR 0 3
31443: NOT
31444: IFFALSE 31448
// exit ;
31446: GO 31836
// result := [ ] ;
31448: LD_ADDR_VAR 0 6
31452: PUSH
31453: EMPTY
31454: ST_TO_ADDR
// for i in list do
31455: LD_ADDR_VAR 0 7
31459: PUSH
31460: LD_VAR 0 3
31464: PUSH
31465: FOR_IN
31466: IFFALSE 31668
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31468: LD_ADDR_VAR 0 9
31472: PUSH
31473: LD_VAR 0 7
31477: PPUSH
31478: LD_VAR 0 1
31482: PPUSH
31483: LD_VAR 0 2
31487: PPUSH
31488: CALL_OW 297
31492: ST_TO_ADDR
// if not result then
31493: LD_VAR 0 6
31497: NOT
31498: IFFALSE 31524
// result := [ [ i , tmp ] ] else
31500: LD_ADDR_VAR 0 6
31504: PUSH
31505: LD_VAR 0 7
31509: PUSH
31510: LD_VAR 0 9
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: EMPTY
31520: LIST
31521: ST_TO_ADDR
31522: GO 31666
// begin if result [ result ] [ 2 ] < tmp then
31524: LD_VAR 0 6
31528: PUSH
31529: LD_VAR 0 6
31533: ARRAY
31534: PUSH
31535: LD_INT 2
31537: ARRAY
31538: PUSH
31539: LD_VAR 0 9
31543: LESS
31544: IFFALSE 31586
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31546: LD_ADDR_VAR 0 6
31550: PUSH
31551: LD_VAR 0 6
31555: PPUSH
31556: LD_VAR 0 6
31560: PUSH
31561: LD_INT 1
31563: PLUS
31564: PPUSH
31565: LD_VAR 0 7
31569: PUSH
31570: LD_VAR 0 9
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PPUSH
31579: CALL_OW 2
31583: ST_TO_ADDR
31584: GO 31666
// for j = 1 to result do
31586: LD_ADDR_VAR 0 8
31590: PUSH
31591: DOUBLE
31592: LD_INT 1
31594: DEC
31595: ST_TO_ADDR
31596: LD_VAR 0 6
31600: PUSH
31601: FOR_TO
31602: IFFALSE 31664
// begin if tmp < result [ j ] [ 2 ] then
31604: LD_VAR 0 9
31608: PUSH
31609: LD_VAR 0 6
31613: PUSH
31614: LD_VAR 0 8
31618: ARRAY
31619: PUSH
31620: LD_INT 2
31622: ARRAY
31623: LESS
31624: IFFALSE 31662
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31626: LD_ADDR_VAR 0 6
31630: PUSH
31631: LD_VAR 0 6
31635: PPUSH
31636: LD_VAR 0 8
31640: PPUSH
31641: LD_VAR 0 7
31645: PUSH
31646: LD_VAR 0 9
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PPUSH
31655: CALL_OW 2
31659: ST_TO_ADDR
// break ;
31660: GO 31664
// end ; end ;
31662: GO 31601
31664: POP
31665: POP
// end ; end ;
31666: GO 31465
31668: POP
31669: POP
// if result and not asc then
31670: LD_VAR 0 6
31674: PUSH
31675: LD_VAR 0 4
31679: NOT
31680: AND
31681: IFFALSE 31756
// begin tmp := result ;
31683: LD_ADDR_VAR 0 9
31687: PUSH
31688: LD_VAR 0 6
31692: ST_TO_ADDR
// for i = tmp downto 1 do
31693: LD_ADDR_VAR 0 7
31697: PUSH
31698: DOUBLE
31699: LD_VAR 0 9
31703: INC
31704: ST_TO_ADDR
31705: LD_INT 1
31707: PUSH
31708: FOR_DOWNTO
31709: IFFALSE 31754
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31711: LD_ADDR_VAR 0 6
31715: PUSH
31716: LD_VAR 0 6
31720: PPUSH
31721: LD_VAR 0 9
31725: PUSH
31726: LD_VAR 0 7
31730: MINUS
31731: PUSH
31732: LD_INT 1
31734: PLUS
31735: PPUSH
31736: LD_VAR 0 9
31740: PUSH
31741: LD_VAR 0 7
31745: ARRAY
31746: PPUSH
31747: CALL_OW 1
31751: ST_TO_ADDR
31752: GO 31708
31754: POP
31755: POP
// end ; tmp := [ ] ;
31756: LD_ADDR_VAR 0 9
31760: PUSH
31761: EMPTY
31762: ST_TO_ADDR
// if mode then
31763: LD_VAR 0 5
31767: IFFALSE 31836
// begin for i = 1 to result do
31769: LD_ADDR_VAR 0 7
31773: PUSH
31774: DOUBLE
31775: LD_INT 1
31777: DEC
31778: ST_TO_ADDR
31779: LD_VAR 0 6
31783: PUSH
31784: FOR_TO
31785: IFFALSE 31824
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31787: LD_ADDR_VAR 0 9
31791: PUSH
31792: LD_VAR 0 9
31796: PPUSH
31797: LD_VAR 0 7
31801: PPUSH
31802: LD_VAR 0 6
31806: PUSH
31807: LD_VAR 0 7
31811: ARRAY
31812: PUSH
31813: LD_INT 1
31815: ARRAY
31816: PPUSH
31817: CALL_OW 1
31821: ST_TO_ADDR
31822: GO 31784
31824: POP
31825: POP
// result := tmp ;
31826: LD_ADDR_VAR 0 6
31830: PUSH
31831: LD_VAR 0 9
31835: ST_TO_ADDR
// end ; end ;
31836: LD_VAR 0 6
31840: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31841: LD_INT 0
31843: PPUSH
31844: PPUSH
31845: PPUSH
31846: PPUSH
31847: PPUSH
31848: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31849: LD_ADDR_VAR 0 5
31853: PUSH
31854: LD_INT 0
31856: PUSH
31857: LD_INT 0
31859: PUSH
31860: LD_INT 0
31862: PUSH
31863: EMPTY
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: ST_TO_ADDR
// if not x or not y then
31871: LD_VAR 0 2
31875: NOT
31876: PUSH
31877: LD_VAR 0 3
31881: NOT
31882: OR
31883: IFFALSE 31887
// exit ;
31885: GO 33537
// if not range then
31887: LD_VAR 0 4
31891: NOT
31892: IFFALSE 31902
// range := 10 ;
31894: LD_ADDR_VAR 0 4
31898: PUSH
31899: LD_INT 10
31901: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31902: LD_ADDR_VAR 0 8
31906: PUSH
31907: LD_INT 81
31909: PUSH
31910: LD_VAR 0 1
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 92
31921: PUSH
31922: LD_VAR 0 2
31926: PUSH
31927: LD_VAR 0 3
31931: PUSH
31932: LD_VAR 0 4
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 3
31945: PUSH
31946: LD_INT 21
31948: PUSH
31949: LD_INT 3
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: LIST
31964: PPUSH
31965: CALL_OW 69
31969: ST_TO_ADDR
// if not tmp then
31970: LD_VAR 0 8
31974: NOT
31975: IFFALSE 31979
// exit ;
31977: GO 33537
// for i in tmp do
31979: LD_ADDR_VAR 0 6
31983: PUSH
31984: LD_VAR 0 8
31988: PUSH
31989: FOR_IN
31990: IFFALSE 33512
// begin points := [ 0 , 0 , 0 ] ;
31992: LD_ADDR_VAR 0 9
31996: PUSH
31997: LD_INT 0
31999: PUSH
32000: LD_INT 0
32002: PUSH
32003: LD_INT 0
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: LIST
32010: ST_TO_ADDR
// bpoints := 1 ;
32011: LD_ADDR_VAR 0 10
32015: PUSH
32016: LD_INT 1
32018: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32019: LD_VAR 0 6
32023: PPUSH
32024: CALL_OW 247
32028: PUSH
32029: LD_INT 1
32031: DOUBLE
32032: EQUAL
32033: IFTRUE 32037
32035: GO 32615
32037: POP
// begin if GetClass ( i ) = 1 then
32038: LD_VAR 0 6
32042: PPUSH
32043: CALL_OW 257
32047: PUSH
32048: LD_INT 1
32050: EQUAL
32051: IFFALSE 32072
// points := [ 10 , 5 , 3 ] ;
32053: LD_ADDR_VAR 0 9
32057: PUSH
32058: LD_INT 10
32060: PUSH
32061: LD_INT 5
32063: PUSH
32064: LD_INT 3
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: LIST
32071: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32072: LD_VAR 0 6
32076: PPUSH
32077: CALL_OW 257
32081: PUSH
32082: LD_INT 2
32084: PUSH
32085: LD_INT 3
32087: PUSH
32088: LD_INT 4
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: LIST
32095: IN
32096: IFFALSE 32117
// points := [ 3 , 2 , 1 ] ;
32098: LD_ADDR_VAR 0 9
32102: PUSH
32103: LD_INT 3
32105: PUSH
32106: LD_INT 2
32108: PUSH
32109: LD_INT 1
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: LIST
32116: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32117: LD_VAR 0 6
32121: PPUSH
32122: CALL_OW 257
32126: PUSH
32127: LD_INT 5
32129: EQUAL
32130: IFFALSE 32151
// points := [ 130 , 5 , 2 ] ;
32132: LD_ADDR_VAR 0 9
32136: PUSH
32137: LD_INT 130
32139: PUSH
32140: LD_INT 5
32142: PUSH
32143: LD_INT 2
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: LIST
32150: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32151: LD_VAR 0 6
32155: PPUSH
32156: CALL_OW 257
32160: PUSH
32161: LD_INT 8
32163: EQUAL
32164: IFFALSE 32185
// points := [ 35 , 35 , 30 ] ;
32166: LD_ADDR_VAR 0 9
32170: PUSH
32171: LD_INT 35
32173: PUSH
32174: LD_INT 35
32176: PUSH
32177: LD_INT 30
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: LIST
32184: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32185: LD_VAR 0 6
32189: PPUSH
32190: CALL_OW 257
32194: PUSH
32195: LD_INT 9
32197: EQUAL
32198: IFFALSE 32219
// points := [ 20 , 55 , 40 ] ;
32200: LD_ADDR_VAR 0 9
32204: PUSH
32205: LD_INT 20
32207: PUSH
32208: LD_INT 55
32210: PUSH
32211: LD_INT 40
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: LIST
32218: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32219: LD_VAR 0 6
32223: PPUSH
32224: CALL_OW 257
32228: PUSH
32229: LD_INT 12
32231: PUSH
32232: LD_INT 16
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: IN
32239: IFFALSE 32260
// points := [ 5 , 3 , 2 ] ;
32241: LD_ADDR_VAR 0 9
32245: PUSH
32246: LD_INT 5
32248: PUSH
32249: LD_INT 3
32251: PUSH
32252: LD_INT 2
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: LIST
32259: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32260: LD_VAR 0 6
32264: PPUSH
32265: CALL_OW 257
32269: PUSH
32270: LD_INT 17
32272: EQUAL
32273: IFFALSE 32294
// points := [ 100 , 50 , 75 ] ;
32275: LD_ADDR_VAR 0 9
32279: PUSH
32280: LD_INT 100
32282: PUSH
32283: LD_INT 50
32285: PUSH
32286: LD_INT 75
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: LIST
32293: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32294: LD_VAR 0 6
32298: PPUSH
32299: CALL_OW 257
32303: PUSH
32304: LD_INT 15
32306: EQUAL
32307: IFFALSE 32328
// points := [ 10 , 5 , 3 ] ;
32309: LD_ADDR_VAR 0 9
32313: PUSH
32314: LD_INT 10
32316: PUSH
32317: LD_INT 5
32319: PUSH
32320: LD_INT 3
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: LIST
32327: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32328: LD_VAR 0 6
32332: PPUSH
32333: CALL_OW 257
32337: PUSH
32338: LD_INT 14
32340: EQUAL
32341: IFFALSE 32362
// points := [ 10 , 0 , 0 ] ;
32343: LD_ADDR_VAR 0 9
32347: PUSH
32348: LD_INT 10
32350: PUSH
32351: LD_INT 0
32353: PUSH
32354: LD_INT 0
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: LIST
32361: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32362: LD_VAR 0 6
32366: PPUSH
32367: CALL_OW 257
32371: PUSH
32372: LD_INT 11
32374: EQUAL
32375: IFFALSE 32396
// points := [ 30 , 10 , 5 ] ;
32377: LD_ADDR_VAR 0 9
32381: PUSH
32382: LD_INT 30
32384: PUSH
32385: LD_INT 10
32387: PUSH
32388: LD_INT 5
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: LIST
32395: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32396: LD_VAR 0 1
32400: PPUSH
32401: LD_INT 5
32403: PPUSH
32404: CALL_OW 321
32408: PUSH
32409: LD_INT 2
32411: EQUAL
32412: IFFALSE 32429
// bpoints := bpoints * 1.8 ;
32414: LD_ADDR_VAR 0 10
32418: PUSH
32419: LD_VAR 0 10
32423: PUSH
32424: LD_REAL  1.80000000000000E+0000
32427: MUL
32428: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32429: LD_VAR 0 6
32433: PPUSH
32434: CALL_OW 257
32438: PUSH
32439: LD_INT 1
32441: PUSH
32442: LD_INT 2
32444: PUSH
32445: LD_INT 3
32447: PUSH
32448: LD_INT 4
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: IN
32457: PUSH
32458: LD_VAR 0 1
32462: PPUSH
32463: LD_INT 51
32465: PPUSH
32466: CALL_OW 321
32470: PUSH
32471: LD_INT 2
32473: EQUAL
32474: AND
32475: IFFALSE 32492
// bpoints := bpoints * 1.2 ;
32477: LD_ADDR_VAR 0 10
32481: PUSH
32482: LD_VAR 0 10
32486: PUSH
32487: LD_REAL  1.20000000000000E+0000
32490: MUL
32491: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32492: LD_VAR 0 6
32496: PPUSH
32497: CALL_OW 257
32501: PUSH
32502: LD_INT 5
32504: PUSH
32505: LD_INT 7
32507: PUSH
32508: LD_INT 9
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: LIST
32515: IN
32516: PUSH
32517: LD_VAR 0 1
32521: PPUSH
32522: LD_INT 52
32524: PPUSH
32525: CALL_OW 321
32529: PUSH
32530: LD_INT 2
32532: EQUAL
32533: AND
32534: IFFALSE 32551
// bpoints := bpoints * 1.5 ;
32536: LD_ADDR_VAR 0 10
32540: PUSH
32541: LD_VAR 0 10
32545: PUSH
32546: LD_REAL  1.50000000000000E+0000
32549: MUL
32550: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32551: LD_VAR 0 1
32555: PPUSH
32556: LD_INT 66
32558: PPUSH
32559: CALL_OW 321
32563: PUSH
32564: LD_INT 2
32566: EQUAL
32567: IFFALSE 32584
// bpoints := bpoints * 1.1 ;
32569: LD_ADDR_VAR 0 10
32573: PUSH
32574: LD_VAR 0 10
32578: PUSH
32579: LD_REAL  1.10000000000000E+0000
32582: MUL
32583: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32584: LD_ADDR_VAR 0 10
32588: PUSH
32589: LD_VAR 0 10
32593: PUSH
32594: LD_VAR 0 6
32598: PPUSH
32599: LD_INT 1
32601: PPUSH
32602: CALL_OW 259
32606: PUSH
32607: LD_REAL  1.15000000000000E+0000
32610: MUL
32611: MUL
32612: ST_TO_ADDR
// end ; unit_vehicle :
32613: GO 33441
32615: LD_INT 2
32617: DOUBLE
32618: EQUAL
32619: IFTRUE 32623
32621: GO 33429
32623: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32624: LD_VAR 0 6
32628: PPUSH
32629: CALL_OW 264
32633: PUSH
32634: LD_INT 2
32636: PUSH
32637: LD_INT 42
32639: PUSH
32640: LD_INT 24
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: LIST
32647: IN
32648: IFFALSE 32669
// points := [ 25 , 5 , 3 ] ;
32650: LD_ADDR_VAR 0 9
32654: PUSH
32655: LD_INT 25
32657: PUSH
32658: LD_INT 5
32660: PUSH
32661: LD_INT 3
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: LIST
32668: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32669: LD_VAR 0 6
32673: PPUSH
32674: CALL_OW 264
32678: PUSH
32679: LD_INT 4
32681: PUSH
32682: LD_INT 43
32684: PUSH
32685: LD_INT 25
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: LIST
32692: IN
32693: IFFALSE 32714
// points := [ 40 , 15 , 5 ] ;
32695: LD_ADDR_VAR 0 9
32699: PUSH
32700: LD_INT 40
32702: PUSH
32703: LD_INT 15
32705: PUSH
32706: LD_INT 5
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: LIST
32713: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32714: LD_VAR 0 6
32718: PPUSH
32719: CALL_OW 264
32723: PUSH
32724: LD_INT 3
32726: PUSH
32727: LD_INT 23
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: IN
32734: IFFALSE 32755
// points := [ 7 , 25 , 8 ] ;
32736: LD_ADDR_VAR 0 9
32740: PUSH
32741: LD_INT 7
32743: PUSH
32744: LD_INT 25
32746: PUSH
32747: LD_INT 8
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: LIST
32754: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32755: LD_VAR 0 6
32759: PPUSH
32760: CALL_OW 264
32764: PUSH
32765: LD_INT 5
32767: PUSH
32768: LD_INT 27
32770: PUSH
32771: LD_INT 44
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: LIST
32778: IN
32779: IFFALSE 32800
// points := [ 14 , 50 , 16 ] ;
32781: LD_ADDR_VAR 0 9
32785: PUSH
32786: LD_INT 14
32788: PUSH
32789: LD_INT 50
32791: PUSH
32792: LD_INT 16
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: LIST
32799: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32800: LD_VAR 0 6
32804: PPUSH
32805: CALL_OW 264
32809: PUSH
32810: LD_INT 6
32812: PUSH
32813: LD_INT 46
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: IN
32820: IFFALSE 32841
// points := [ 32 , 120 , 70 ] ;
32822: LD_ADDR_VAR 0 9
32826: PUSH
32827: LD_INT 32
32829: PUSH
32830: LD_INT 120
32832: PUSH
32833: LD_INT 70
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: LIST
32840: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32841: LD_VAR 0 6
32845: PPUSH
32846: CALL_OW 264
32850: PUSH
32851: LD_INT 7
32853: PUSH
32854: LD_INT 28
32856: PUSH
32857: LD_INT 45
32859: PUSH
32860: LD_INT 92
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: IN
32869: IFFALSE 32890
// points := [ 35 , 20 , 45 ] ;
32871: LD_ADDR_VAR 0 9
32875: PUSH
32876: LD_INT 35
32878: PUSH
32879: LD_INT 20
32881: PUSH
32882: LD_INT 45
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: LIST
32889: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32890: LD_VAR 0 6
32894: PPUSH
32895: CALL_OW 264
32899: PUSH
32900: LD_INT 47
32902: PUSH
32903: EMPTY
32904: LIST
32905: IN
32906: IFFALSE 32927
// points := [ 67 , 45 , 75 ] ;
32908: LD_ADDR_VAR 0 9
32912: PUSH
32913: LD_INT 67
32915: PUSH
32916: LD_INT 45
32918: PUSH
32919: LD_INT 75
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: LIST
32926: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32927: LD_VAR 0 6
32931: PPUSH
32932: CALL_OW 264
32936: PUSH
32937: LD_INT 26
32939: PUSH
32940: EMPTY
32941: LIST
32942: IN
32943: IFFALSE 32964
// points := [ 120 , 30 , 80 ] ;
32945: LD_ADDR_VAR 0 9
32949: PUSH
32950: LD_INT 120
32952: PUSH
32953: LD_INT 30
32955: PUSH
32956: LD_INT 80
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: LIST
32963: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32964: LD_VAR 0 6
32968: PPUSH
32969: CALL_OW 264
32973: PUSH
32974: LD_INT 22
32976: PUSH
32977: EMPTY
32978: LIST
32979: IN
32980: IFFALSE 33001
// points := [ 40 , 1 , 1 ] ;
32982: LD_ADDR_VAR 0 9
32986: PUSH
32987: LD_INT 40
32989: PUSH
32990: LD_INT 1
32992: PUSH
32993: LD_INT 1
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: LIST
33000: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33001: LD_VAR 0 6
33005: PPUSH
33006: CALL_OW 264
33010: PUSH
33011: LD_INT 29
33013: PUSH
33014: EMPTY
33015: LIST
33016: IN
33017: IFFALSE 33038
// points := [ 70 , 200 , 400 ] ;
33019: LD_ADDR_VAR 0 9
33023: PUSH
33024: LD_INT 70
33026: PUSH
33027: LD_INT 200
33029: PUSH
33030: LD_INT 400
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: LIST
33037: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33038: LD_VAR 0 6
33042: PPUSH
33043: CALL_OW 264
33047: PUSH
33048: LD_INT 14
33050: PUSH
33051: LD_INT 53
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: IN
33058: IFFALSE 33079
// points := [ 40 , 10 , 20 ] ;
33060: LD_ADDR_VAR 0 9
33064: PUSH
33065: LD_INT 40
33067: PUSH
33068: LD_INT 10
33070: PUSH
33071: LD_INT 20
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: LIST
33078: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33079: LD_VAR 0 6
33083: PPUSH
33084: CALL_OW 264
33088: PUSH
33089: LD_INT 9
33091: PUSH
33092: EMPTY
33093: LIST
33094: IN
33095: IFFALSE 33116
// points := [ 5 , 70 , 20 ] ;
33097: LD_ADDR_VAR 0 9
33101: PUSH
33102: LD_INT 5
33104: PUSH
33105: LD_INT 70
33107: PUSH
33108: LD_INT 20
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: LIST
33115: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33116: LD_VAR 0 6
33120: PPUSH
33121: CALL_OW 264
33125: PUSH
33126: LD_INT 10
33128: PUSH
33129: EMPTY
33130: LIST
33131: IN
33132: IFFALSE 33153
// points := [ 35 , 110 , 70 ] ;
33134: LD_ADDR_VAR 0 9
33138: PUSH
33139: LD_INT 35
33141: PUSH
33142: LD_INT 110
33144: PUSH
33145: LD_INT 70
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: LIST
33152: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33153: LD_VAR 0 6
33157: PPUSH
33158: CALL_OW 265
33162: PUSH
33163: LD_INT 25
33165: EQUAL
33166: IFFALSE 33187
// points := [ 80 , 65 , 100 ] ;
33168: LD_ADDR_VAR 0 9
33172: PUSH
33173: LD_INT 80
33175: PUSH
33176: LD_INT 65
33178: PUSH
33179: LD_INT 100
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: LIST
33186: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33187: LD_VAR 0 6
33191: PPUSH
33192: CALL_OW 263
33196: PUSH
33197: LD_INT 1
33199: EQUAL
33200: IFFALSE 33235
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33202: LD_ADDR_VAR 0 10
33206: PUSH
33207: LD_VAR 0 10
33211: PUSH
33212: LD_VAR 0 6
33216: PPUSH
33217: CALL_OW 311
33221: PPUSH
33222: LD_INT 3
33224: PPUSH
33225: CALL_OW 259
33229: PUSH
33230: LD_INT 4
33232: MUL
33233: MUL
33234: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33235: LD_VAR 0 6
33239: PPUSH
33240: CALL_OW 263
33244: PUSH
33245: LD_INT 2
33247: EQUAL
33248: IFFALSE 33299
// begin j := IsControledBy ( i ) ;
33250: LD_ADDR_VAR 0 7
33254: PUSH
33255: LD_VAR 0 6
33259: PPUSH
33260: CALL_OW 312
33264: ST_TO_ADDR
// if j then
33265: LD_VAR 0 7
33269: IFFALSE 33299
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33271: LD_ADDR_VAR 0 10
33275: PUSH
33276: LD_VAR 0 10
33280: PUSH
33281: LD_VAR 0 7
33285: PPUSH
33286: LD_INT 3
33288: PPUSH
33289: CALL_OW 259
33293: PUSH
33294: LD_INT 3
33296: MUL
33297: MUL
33298: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33299: LD_VAR 0 6
33303: PPUSH
33304: CALL_OW 264
33308: PUSH
33309: LD_INT 5
33311: PUSH
33312: LD_INT 6
33314: PUSH
33315: LD_INT 46
33317: PUSH
33318: LD_INT 44
33320: PUSH
33321: LD_INT 47
33323: PUSH
33324: LD_INT 45
33326: PUSH
33327: LD_INT 28
33329: PUSH
33330: LD_INT 7
33332: PUSH
33333: LD_INT 27
33335: PUSH
33336: LD_INT 29
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: IN
33351: PUSH
33352: LD_VAR 0 1
33356: PPUSH
33357: LD_INT 52
33359: PPUSH
33360: CALL_OW 321
33364: PUSH
33365: LD_INT 2
33367: EQUAL
33368: AND
33369: IFFALSE 33386
// bpoints := bpoints * 1.2 ;
33371: LD_ADDR_VAR 0 10
33375: PUSH
33376: LD_VAR 0 10
33380: PUSH
33381: LD_REAL  1.20000000000000E+0000
33384: MUL
33385: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33386: LD_VAR 0 6
33390: PPUSH
33391: CALL_OW 264
33395: PUSH
33396: LD_INT 6
33398: PUSH
33399: LD_INT 46
33401: PUSH
33402: LD_INT 47
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: LIST
33409: IN
33410: IFFALSE 33427
// bpoints := bpoints * 1.2 ;
33412: LD_ADDR_VAR 0 10
33416: PUSH
33417: LD_VAR 0 10
33421: PUSH
33422: LD_REAL  1.20000000000000E+0000
33425: MUL
33426: ST_TO_ADDR
// end ; unit_building :
33427: GO 33441
33429: LD_INT 3
33431: DOUBLE
33432: EQUAL
33433: IFTRUE 33437
33435: GO 33440
33437: POP
// ; end ;
33438: GO 33441
33440: POP
// for j = 1 to 3 do
33441: LD_ADDR_VAR 0 7
33445: PUSH
33446: DOUBLE
33447: LD_INT 1
33449: DEC
33450: ST_TO_ADDR
33451: LD_INT 3
33453: PUSH
33454: FOR_TO
33455: IFFALSE 33508
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33457: LD_ADDR_VAR 0 5
33461: PUSH
33462: LD_VAR 0 5
33466: PPUSH
33467: LD_VAR 0 7
33471: PPUSH
33472: LD_VAR 0 5
33476: PUSH
33477: LD_VAR 0 7
33481: ARRAY
33482: PUSH
33483: LD_VAR 0 9
33487: PUSH
33488: LD_VAR 0 7
33492: ARRAY
33493: PUSH
33494: LD_VAR 0 10
33498: MUL
33499: PLUS
33500: PPUSH
33501: CALL_OW 1
33505: ST_TO_ADDR
33506: GO 33454
33508: POP
33509: POP
// end ;
33510: GO 31989
33512: POP
33513: POP
// result := Replace ( result , 4 , tmp ) ;
33514: LD_ADDR_VAR 0 5
33518: PUSH
33519: LD_VAR 0 5
33523: PPUSH
33524: LD_INT 4
33526: PPUSH
33527: LD_VAR 0 8
33531: PPUSH
33532: CALL_OW 1
33536: ST_TO_ADDR
// end ;
33537: LD_VAR 0 5
33541: RET
// export function DangerAtRange ( unit , range ) ; begin
33542: LD_INT 0
33544: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33545: LD_ADDR_VAR 0 3
33549: PUSH
33550: LD_VAR 0 1
33554: PPUSH
33555: CALL_OW 255
33559: PPUSH
33560: LD_VAR 0 1
33564: PPUSH
33565: CALL_OW 250
33569: PPUSH
33570: LD_VAR 0 1
33574: PPUSH
33575: CALL_OW 251
33579: PPUSH
33580: LD_VAR 0 2
33584: PPUSH
33585: CALL 31841 0 4
33589: ST_TO_ADDR
// end ;
33590: LD_VAR 0 3
33594: RET
// export function DangerInArea ( side , area ) ; begin
33595: LD_INT 0
33597: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33598: LD_ADDR_VAR 0 3
33602: PUSH
33603: LD_VAR 0 2
33607: PPUSH
33608: LD_INT 81
33610: PUSH
33611: LD_VAR 0 1
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PPUSH
33620: CALL_OW 70
33624: ST_TO_ADDR
// end ;
33625: LD_VAR 0 3
33629: RET
// export function IsExtension ( b ) ; begin
33630: LD_INT 0
33632: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33633: LD_ADDR_VAR 0 2
33637: PUSH
33638: LD_VAR 0 1
33642: PUSH
33643: LD_INT 23
33645: PUSH
33646: LD_INT 20
33648: PUSH
33649: LD_INT 22
33651: PUSH
33652: LD_INT 17
33654: PUSH
33655: LD_INT 24
33657: PUSH
33658: LD_INT 21
33660: PUSH
33661: LD_INT 19
33663: PUSH
33664: LD_INT 16
33666: PUSH
33667: LD_INT 25
33669: PUSH
33670: LD_INT 18
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: IN
33685: ST_TO_ADDR
// end ;
33686: LD_VAR 0 2
33690: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33691: LD_INT 0
33693: PPUSH
33694: PPUSH
33695: PPUSH
// result := [ ] ;
33696: LD_ADDR_VAR 0 4
33700: PUSH
33701: EMPTY
33702: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33703: LD_ADDR_VAR 0 5
33707: PUSH
33708: LD_VAR 0 2
33712: PPUSH
33713: LD_INT 21
33715: PUSH
33716: LD_INT 3
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PPUSH
33723: CALL_OW 70
33727: ST_TO_ADDR
// if not tmp then
33728: LD_VAR 0 5
33732: NOT
33733: IFFALSE 33737
// exit ;
33735: GO 33801
// if checkLink then
33737: LD_VAR 0 3
33741: IFFALSE 33791
// begin for i in tmp do
33743: LD_ADDR_VAR 0 6
33747: PUSH
33748: LD_VAR 0 5
33752: PUSH
33753: FOR_IN
33754: IFFALSE 33789
// if GetBase ( i ) <> base then
33756: LD_VAR 0 6
33760: PPUSH
33761: CALL_OW 274
33765: PUSH
33766: LD_VAR 0 1
33770: NONEQUAL
33771: IFFALSE 33787
// ComLinkToBase ( base , i ) ;
33773: LD_VAR 0 1
33777: PPUSH
33778: LD_VAR 0 6
33782: PPUSH
33783: CALL_OW 169
33787: GO 33753
33789: POP
33790: POP
// end ; result := tmp ;
33791: LD_ADDR_VAR 0 4
33795: PUSH
33796: LD_VAR 0 5
33800: ST_TO_ADDR
// end ;
33801: LD_VAR 0 4
33805: RET
// export function ComComplete ( units , b ) ; var i ; begin
33806: LD_INT 0
33808: PPUSH
33809: PPUSH
// if not units then
33810: LD_VAR 0 1
33814: NOT
33815: IFFALSE 33819
// exit ;
33817: GO 33909
// for i in units do
33819: LD_ADDR_VAR 0 4
33823: PUSH
33824: LD_VAR 0 1
33828: PUSH
33829: FOR_IN
33830: IFFALSE 33907
// if BuildingStatus ( b ) = bs_build then
33832: LD_VAR 0 2
33836: PPUSH
33837: CALL_OW 461
33841: PUSH
33842: LD_INT 1
33844: EQUAL
33845: IFFALSE 33905
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33847: LD_VAR 0 4
33851: PPUSH
33852: LD_STRING h
33854: PUSH
33855: LD_VAR 0 2
33859: PPUSH
33860: CALL_OW 250
33864: PUSH
33865: LD_VAR 0 2
33869: PPUSH
33870: CALL_OW 251
33874: PUSH
33875: LD_VAR 0 2
33879: PUSH
33880: LD_INT 0
33882: PUSH
33883: LD_INT 0
33885: PUSH
33886: LD_INT 0
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: PUSH
33898: EMPTY
33899: LIST
33900: PPUSH
33901: CALL_OW 446
33905: GO 33829
33907: POP
33908: POP
// end ;
33909: LD_VAR 0 3
33913: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33914: LD_INT 0
33916: PPUSH
33917: PPUSH
33918: PPUSH
33919: PPUSH
33920: PPUSH
33921: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33922: LD_VAR 0 1
33926: NOT
33927: PUSH
33928: LD_VAR 0 1
33932: PPUSH
33933: CALL_OW 263
33937: PUSH
33938: LD_INT 2
33940: NONEQUAL
33941: OR
33942: IFFALSE 33946
// exit ;
33944: GO 34262
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33946: LD_ADDR_VAR 0 6
33950: PUSH
33951: LD_INT 22
33953: PUSH
33954: LD_VAR 0 1
33958: PPUSH
33959: CALL_OW 255
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: PUSH
33968: LD_INT 2
33970: PUSH
33971: LD_INT 30
33973: PUSH
33974: LD_INT 36
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 34
33983: PUSH
33984: LD_INT 31
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: LIST
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PPUSH
34000: CALL_OW 69
34004: ST_TO_ADDR
// if not tmp then
34005: LD_VAR 0 6
34009: NOT
34010: IFFALSE 34014
// exit ;
34012: GO 34262
// result := [ ] ;
34014: LD_ADDR_VAR 0 2
34018: PUSH
34019: EMPTY
34020: ST_TO_ADDR
// for i in tmp do
34021: LD_ADDR_VAR 0 3
34025: PUSH
34026: LD_VAR 0 6
34030: PUSH
34031: FOR_IN
34032: IFFALSE 34103
// begin t := UnitsInside ( i ) ;
34034: LD_ADDR_VAR 0 4
34038: PUSH
34039: LD_VAR 0 3
34043: PPUSH
34044: CALL_OW 313
34048: ST_TO_ADDR
// if t then
34049: LD_VAR 0 4
34053: IFFALSE 34101
// for j in t do
34055: LD_ADDR_VAR 0 7
34059: PUSH
34060: LD_VAR 0 4
34064: PUSH
34065: FOR_IN
34066: IFFALSE 34099
// result := Replace ( result , result + 1 , j ) ;
34068: LD_ADDR_VAR 0 2
34072: PUSH
34073: LD_VAR 0 2
34077: PPUSH
34078: LD_VAR 0 2
34082: PUSH
34083: LD_INT 1
34085: PLUS
34086: PPUSH
34087: LD_VAR 0 7
34091: PPUSH
34092: CALL_OW 1
34096: ST_TO_ADDR
34097: GO 34065
34099: POP
34100: POP
// end ;
34101: GO 34031
34103: POP
34104: POP
// if not result then
34105: LD_VAR 0 2
34109: NOT
34110: IFFALSE 34114
// exit ;
34112: GO 34262
// mech := result [ 1 ] ;
34114: LD_ADDR_VAR 0 5
34118: PUSH
34119: LD_VAR 0 2
34123: PUSH
34124: LD_INT 1
34126: ARRAY
34127: ST_TO_ADDR
// if result > 1 then
34128: LD_VAR 0 2
34132: PUSH
34133: LD_INT 1
34135: GREATER
34136: IFFALSE 34248
// begin for i = 2 to result do
34138: LD_ADDR_VAR 0 3
34142: PUSH
34143: DOUBLE
34144: LD_INT 2
34146: DEC
34147: ST_TO_ADDR
34148: LD_VAR 0 2
34152: PUSH
34153: FOR_TO
34154: IFFALSE 34246
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34156: LD_ADDR_VAR 0 4
34160: PUSH
34161: LD_VAR 0 2
34165: PUSH
34166: LD_VAR 0 3
34170: ARRAY
34171: PPUSH
34172: LD_INT 3
34174: PPUSH
34175: CALL_OW 259
34179: PUSH
34180: LD_VAR 0 2
34184: PUSH
34185: LD_VAR 0 3
34189: ARRAY
34190: PPUSH
34191: CALL_OW 432
34195: MINUS
34196: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34197: LD_VAR 0 4
34201: PUSH
34202: LD_VAR 0 5
34206: PPUSH
34207: LD_INT 3
34209: PPUSH
34210: CALL_OW 259
34214: PUSH
34215: LD_VAR 0 5
34219: PPUSH
34220: CALL_OW 432
34224: MINUS
34225: GREATEREQUAL
34226: IFFALSE 34244
// mech := result [ i ] ;
34228: LD_ADDR_VAR 0 5
34232: PUSH
34233: LD_VAR 0 2
34237: PUSH
34238: LD_VAR 0 3
34242: ARRAY
34243: ST_TO_ADDR
// end ;
34244: GO 34153
34246: POP
34247: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34248: LD_VAR 0 1
34252: PPUSH
34253: LD_VAR 0 5
34257: PPUSH
34258: CALL_OW 135
// end ;
34262: LD_VAR 0 2
34266: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34267: LD_INT 0
34269: PPUSH
34270: PPUSH
34271: PPUSH
34272: PPUSH
34273: PPUSH
34274: PPUSH
34275: PPUSH
34276: PPUSH
34277: PPUSH
34278: PPUSH
34279: PPUSH
34280: PPUSH
34281: PPUSH
// result := [ ] ;
34282: LD_ADDR_VAR 0 7
34286: PUSH
34287: EMPTY
34288: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34289: LD_VAR 0 1
34293: PPUSH
34294: CALL_OW 266
34298: PUSH
34299: LD_INT 0
34301: PUSH
34302: LD_INT 1
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: IN
34309: NOT
34310: IFFALSE 34314
// exit ;
34312: GO 35948
// if name then
34314: LD_VAR 0 3
34318: IFFALSE 34334
// SetBName ( base_dep , name ) ;
34320: LD_VAR 0 1
34324: PPUSH
34325: LD_VAR 0 3
34329: PPUSH
34330: CALL_OW 500
// base := GetBase ( base_dep ) ;
34334: LD_ADDR_VAR 0 15
34338: PUSH
34339: LD_VAR 0 1
34343: PPUSH
34344: CALL_OW 274
34348: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34349: LD_ADDR_VAR 0 16
34353: PUSH
34354: LD_VAR 0 1
34358: PPUSH
34359: CALL_OW 255
34363: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34364: LD_ADDR_VAR 0 17
34368: PUSH
34369: LD_VAR 0 1
34373: PPUSH
34374: CALL_OW 248
34378: ST_TO_ADDR
// if sources then
34379: LD_VAR 0 5
34383: IFFALSE 34430
// for i = 1 to 3 do
34385: LD_ADDR_VAR 0 8
34389: PUSH
34390: DOUBLE
34391: LD_INT 1
34393: DEC
34394: ST_TO_ADDR
34395: LD_INT 3
34397: PUSH
34398: FOR_TO
34399: IFFALSE 34428
// AddResourceType ( base , i , sources [ i ] ) ;
34401: LD_VAR 0 15
34405: PPUSH
34406: LD_VAR 0 8
34410: PPUSH
34411: LD_VAR 0 5
34415: PUSH
34416: LD_VAR 0 8
34420: ARRAY
34421: PPUSH
34422: CALL_OW 276
34426: GO 34398
34428: POP
34429: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34430: LD_ADDR_VAR 0 18
34434: PUSH
34435: LD_VAR 0 15
34439: PPUSH
34440: LD_VAR 0 2
34444: PPUSH
34445: LD_INT 1
34447: PPUSH
34448: CALL 33691 0 3
34452: ST_TO_ADDR
// InitHc ;
34453: CALL_OW 19
// InitUc ;
34457: CALL_OW 18
// uc_side := side ;
34461: LD_ADDR_OWVAR 20
34465: PUSH
34466: LD_VAR 0 16
34470: ST_TO_ADDR
// uc_nation := nation ;
34471: LD_ADDR_OWVAR 21
34475: PUSH
34476: LD_VAR 0 17
34480: ST_TO_ADDR
// if buildings then
34481: LD_VAR 0 18
34485: IFFALSE 35807
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34487: LD_ADDR_VAR 0 19
34491: PUSH
34492: LD_VAR 0 18
34496: PPUSH
34497: LD_INT 2
34499: PUSH
34500: LD_INT 30
34502: PUSH
34503: LD_INT 29
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 30
34512: PUSH
34513: LD_INT 30
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: LIST
34524: PPUSH
34525: CALL_OW 72
34529: ST_TO_ADDR
// if tmp then
34530: LD_VAR 0 19
34534: IFFALSE 34582
// for i in tmp do
34536: LD_ADDR_VAR 0 8
34540: PUSH
34541: LD_VAR 0 19
34545: PUSH
34546: FOR_IN
34547: IFFALSE 34580
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34549: LD_VAR 0 8
34553: PPUSH
34554: CALL_OW 250
34558: PPUSH
34559: LD_VAR 0 8
34563: PPUSH
34564: CALL_OW 251
34568: PPUSH
34569: LD_VAR 0 16
34573: PPUSH
34574: CALL_OW 441
34578: GO 34546
34580: POP
34581: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34582: LD_VAR 0 18
34586: PPUSH
34587: LD_INT 2
34589: PUSH
34590: LD_INT 30
34592: PUSH
34593: LD_INT 32
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 30
34602: PUSH
34603: LD_INT 33
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: LIST
34614: PPUSH
34615: CALL_OW 72
34619: IFFALSE 34707
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34621: LD_ADDR_VAR 0 8
34625: PUSH
34626: LD_VAR 0 18
34630: PPUSH
34631: LD_INT 2
34633: PUSH
34634: LD_INT 30
34636: PUSH
34637: LD_INT 32
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 30
34646: PUSH
34647: LD_INT 33
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: LIST
34658: PPUSH
34659: CALL_OW 72
34663: PUSH
34664: FOR_IN
34665: IFFALSE 34705
// begin if not GetBWeapon ( i ) then
34667: LD_VAR 0 8
34671: PPUSH
34672: CALL_OW 269
34676: NOT
34677: IFFALSE 34703
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34679: LD_VAR 0 8
34683: PPUSH
34684: LD_VAR 0 8
34688: PPUSH
34689: LD_VAR 0 2
34693: PPUSH
34694: CALL 35953 0 2
34698: PPUSH
34699: CALL_OW 431
// end ;
34703: GO 34664
34705: POP
34706: POP
// end ; for i = 1 to personel do
34707: LD_ADDR_VAR 0 8
34711: PUSH
34712: DOUBLE
34713: LD_INT 1
34715: DEC
34716: ST_TO_ADDR
34717: LD_VAR 0 6
34721: PUSH
34722: FOR_TO
34723: IFFALSE 35787
// begin if i > 4 then
34725: LD_VAR 0 8
34729: PUSH
34730: LD_INT 4
34732: GREATER
34733: IFFALSE 34737
// break ;
34735: GO 35787
// case i of 1 :
34737: LD_VAR 0 8
34741: PUSH
34742: LD_INT 1
34744: DOUBLE
34745: EQUAL
34746: IFTRUE 34750
34748: GO 34830
34750: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34751: LD_ADDR_VAR 0 12
34755: PUSH
34756: LD_VAR 0 18
34760: PPUSH
34761: LD_INT 22
34763: PUSH
34764: LD_VAR 0 16
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 58
34775: PUSH
34776: EMPTY
34777: LIST
34778: PUSH
34779: LD_INT 2
34781: PUSH
34782: LD_INT 30
34784: PUSH
34785: LD_INT 32
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 30
34794: PUSH
34795: LD_INT 4
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 30
34804: PUSH
34805: LD_INT 5
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: LIST
34822: PPUSH
34823: CALL_OW 72
34827: ST_TO_ADDR
34828: GO 35052
34830: LD_INT 2
34832: DOUBLE
34833: EQUAL
34834: IFTRUE 34838
34836: GO 34900
34838: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34839: LD_ADDR_VAR 0 12
34843: PUSH
34844: LD_VAR 0 18
34848: PPUSH
34849: LD_INT 22
34851: PUSH
34852: LD_VAR 0 16
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 2
34863: PUSH
34864: LD_INT 30
34866: PUSH
34867: LD_INT 0
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 30
34876: PUSH
34877: LD_INT 1
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: LIST
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PPUSH
34893: CALL_OW 72
34897: ST_TO_ADDR
34898: GO 35052
34900: LD_INT 3
34902: DOUBLE
34903: EQUAL
34904: IFTRUE 34908
34906: GO 34970
34908: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34909: LD_ADDR_VAR 0 12
34913: PUSH
34914: LD_VAR 0 18
34918: PPUSH
34919: LD_INT 22
34921: PUSH
34922: LD_VAR 0 16
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 2
34933: PUSH
34934: LD_INT 30
34936: PUSH
34937: LD_INT 2
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: PUSH
34944: LD_INT 30
34946: PUSH
34947: LD_INT 3
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: LIST
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PPUSH
34963: CALL_OW 72
34967: ST_TO_ADDR
34968: GO 35052
34970: LD_INT 4
34972: DOUBLE
34973: EQUAL
34974: IFTRUE 34978
34976: GO 35051
34978: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34979: LD_ADDR_VAR 0 12
34983: PUSH
34984: LD_VAR 0 18
34988: PPUSH
34989: LD_INT 22
34991: PUSH
34992: LD_VAR 0 16
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 2
35003: PUSH
35004: LD_INT 30
35006: PUSH
35007: LD_INT 6
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 30
35016: PUSH
35017: LD_INT 7
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 30
35026: PUSH
35027: LD_INT 8
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PPUSH
35044: CALL_OW 72
35048: ST_TO_ADDR
35049: GO 35052
35051: POP
// if i = 1 then
35052: LD_VAR 0 8
35056: PUSH
35057: LD_INT 1
35059: EQUAL
35060: IFFALSE 35171
// begin tmp := [ ] ;
35062: LD_ADDR_VAR 0 19
35066: PUSH
35067: EMPTY
35068: ST_TO_ADDR
// for j in f do
35069: LD_ADDR_VAR 0 9
35073: PUSH
35074: LD_VAR 0 12
35078: PUSH
35079: FOR_IN
35080: IFFALSE 35153
// if GetBType ( j ) = b_bunker then
35082: LD_VAR 0 9
35086: PPUSH
35087: CALL_OW 266
35091: PUSH
35092: LD_INT 32
35094: EQUAL
35095: IFFALSE 35122
// tmp := Insert ( tmp , 1 , j ) else
35097: LD_ADDR_VAR 0 19
35101: PUSH
35102: LD_VAR 0 19
35106: PPUSH
35107: LD_INT 1
35109: PPUSH
35110: LD_VAR 0 9
35114: PPUSH
35115: CALL_OW 2
35119: ST_TO_ADDR
35120: GO 35151
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35122: LD_ADDR_VAR 0 19
35126: PUSH
35127: LD_VAR 0 19
35131: PPUSH
35132: LD_VAR 0 19
35136: PUSH
35137: LD_INT 1
35139: PLUS
35140: PPUSH
35141: LD_VAR 0 9
35145: PPUSH
35146: CALL_OW 2
35150: ST_TO_ADDR
35151: GO 35079
35153: POP
35154: POP
// if tmp then
35155: LD_VAR 0 19
35159: IFFALSE 35171
// f := tmp ;
35161: LD_ADDR_VAR 0 12
35165: PUSH
35166: LD_VAR 0 19
35170: ST_TO_ADDR
// end ; x := personel [ i ] ;
35171: LD_ADDR_VAR 0 13
35175: PUSH
35176: LD_VAR 0 6
35180: PUSH
35181: LD_VAR 0 8
35185: ARRAY
35186: ST_TO_ADDR
// if x = - 1 then
35187: LD_VAR 0 13
35191: PUSH
35192: LD_INT 1
35194: NEG
35195: EQUAL
35196: IFFALSE 35405
// begin for j in f do
35198: LD_ADDR_VAR 0 9
35202: PUSH
35203: LD_VAR 0 12
35207: PUSH
35208: FOR_IN
35209: IFFALSE 35401
// repeat InitHc ;
35211: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35215: LD_VAR 0 9
35219: PPUSH
35220: CALL_OW 266
35224: PUSH
35225: LD_INT 5
35227: EQUAL
35228: IFFALSE 35298
// begin if UnitsInside ( j ) < 3 then
35230: LD_VAR 0 9
35234: PPUSH
35235: CALL_OW 313
35239: PUSH
35240: LD_INT 3
35242: LESS
35243: IFFALSE 35279
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35245: LD_INT 0
35247: PPUSH
35248: LD_INT 5
35250: PUSH
35251: LD_INT 8
35253: PUSH
35254: LD_INT 9
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: LIST
35261: PUSH
35262: LD_VAR 0 17
35266: ARRAY
35267: PPUSH
35268: LD_VAR 0 4
35272: PPUSH
35273: CALL_OW 380
35277: GO 35296
// PrepareHuman ( false , i , skill ) ;
35279: LD_INT 0
35281: PPUSH
35282: LD_VAR 0 8
35286: PPUSH
35287: LD_VAR 0 4
35291: PPUSH
35292: CALL_OW 380
// end else
35296: GO 35315
// PrepareHuman ( false , i , skill ) ;
35298: LD_INT 0
35300: PPUSH
35301: LD_VAR 0 8
35305: PPUSH
35306: LD_VAR 0 4
35310: PPUSH
35311: CALL_OW 380
// un := CreateHuman ;
35315: LD_ADDR_VAR 0 14
35319: PUSH
35320: CALL_OW 44
35324: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35325: LD_ADDR_VAR 0 7
35329: PUSH
35330: LD_VAR 0 7
35334: PPUSH
35335: LD_INT 1
35337: PPUSH
35338: LD_VAR 0 14
35342: PPUSH
35343: CALL_OW 2
35347: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35348: LD_VAR 0 14
35352: PPUSH
35353: LD_VAR 0 9
35357: PPUSH
35358: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35362: LD_VAR 0 9
35366: PPUSH
35367: CALL_OW 313
35371: PUSH
35372: LD_INT 6
35374: EQUAL
35375: PUSH
35376: LD_VAR 0 9
35380: PPUSH
35381: CALL_OW 266
35385: PUSH
35386: LD_INT 32
35388: PUSH
35389: LD_INT 31
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: IN
35396: OR
35397: IFFALSE 35211
35399: GO 35208
35401: POP
35402: POP
// end else
35403: GO 35785
// for j = 1 to x do
35405: LD_ADDR_VAR 0 9
35409: PUSH
35410: DOUBLE
35411: LD_INT 1
35413: DEC
35414: ST_TO_ADDR
35415: LD_VAR 0 13
35419: PUSH
35420: FOR_TO
35421: IFFALSE 35783
// begin InitHc ;
35423: CALL_OW 19
// if not f then
35427: LD_VAR 0 12
35431: NOT
35432: IFFALSE 35521
// begin PrepareHuman ( false , i , skill ) ;
35434: LD_INT 0
35436: PPUSH
35437: LD_VAR 0 8
35441: PPUSH
35442: LD_VAR 0 4
35446: PPUSH
35447: CALL_OW 380
// un := CreateHuman ;
35451: LD_ADDR_VAR 0 14
35455: PUSH
35456: CALL_OW 44
35460: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35461: LD_ADDR_VAR 0 7
35465: PUSH
35466: LD_VAR 0 7
35470: PPUSH
35471: LD_INT 1
35473: PPUSH
35474: LD_VAR 0 14
35478: PPUSH
35479: CALL_OW 2
35483: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35484: LD_VAR 0 14
35488: PPUSH
35489: LD_VAR 0 1
35493: PPUSH
35494: CALL_OW 250
35498: PPUSH
35499: LD_VAR 0 1
35503: PPUSH
35504: CALL_OW 251
35508: PPUSH
35509: LD_INT 10
35511: PPUSH
35512: LD_INT 0
35514: PPUSH
35515: CALL_OW 50
// continue ;
35519: GO 35420
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35521: LD_VAR 0 12
35525: PUSH
35526: LD_INT 1
35528: ARRAY
35529: PPUSH
35530: CALL_OW 313
35534: PUSH
35535: LD_VAR 0 12
35539: PUSH
35540: LD_INT 1
35542: ARRAY
35543: PPUSH
35544: CALL_OW 266
35548: PUSH
35549: LD_INT 32
35551: PUSH
35552: LD_INT 31
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: IN
35559: AND
35560: PUSH
35561: LD_VAR 0 12
35565: PUSH
35566: LD_INT 1
35568: ARRAY
35569: PPUSH
35570: CALL_OW 313
35574: PUSH
35575: LD_INT 6
35577: EQUAL
35578: OR
35579: IFFALSE 35599
// f := Delete ( f , 1 ) ;
35581: LD_ADDR_VAR 0 12
35585: PUSH
35586: LD_VAR 0 12
35590: PPUSH
35591: LD_INT 1
35593: PPUSH
35594: CALL_OW 3
35598: ST_TO_ADDR
// if not f then
35599: LD_VAR 0 12
35603: NOT
35604: IFFALSE 35622
// begin x := x + 2 ;
35606: LD_ADDR_VAR 0 13
35610: PUSH
35611: LD_VAR 0 13
35615: PUSH
35616: LD_INT 2
35618: PLUS
35619: ST_TO_ADDR
// continue ;
35620: GO 35420
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35622: LD_VAR 0 12
35626: PUSH
35627: LD_INT 1
35629: ARRAY
35630: PPUSH
35631: CALL_OW 266
35635: PUSH
35636: LD_INT 5
35638: EQUAL
35639: IFFALSE 35713
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35641: LD_VAR 0 12
35645: PUSH
35646: LD_INT 1
35648: ARRAY
35649: PPUSH
35650: CALL_OW 313
35654: PUSH
35655: LD_INT 3
35657: LESS
35658: IFFALSE 35694
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35660: LD_INT 0
35662: PPUSH
35663: LD_INT 5
35665: PUSH
35666: LD_INT 8
35668: PUSH
35669: LD_INT 9
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: LIST
35676: PUSH
35677: LD_VAR 0 17
35681: ARRAY
35682: PPUSH
35683: LD_VAR 0 4
35687: PPUSH
35688: CALL_OW 380
35692: GO 35711
// PrepareHuman ( false , i , skill ) ;
35694: LD_INT 0
35696: PPUSH
35697: LD_VAR 0 8
35701: PPUSH
35702: LD_VAR 0 4
35706: PPUSH
35707: CALL_OW 380
// end else
35711: GO 35730
// PrepareHuman ( false , i , skill ) ;
35713: LD_INT 0
35715: PPUSH
35716: LD_VAR 0 8
35720: PPUSH
35721: LD_VAR 0 4
35725: PPUSH
35726: CALL_OW 380
// un := CreateHuman ;
35730: LD_ADDR_VAR 0 14
35734: PUSH
35735: CALL_OW 44
35739: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35740: LD_ADDR_VAR 0 7
35744: PUSH
35745: LD_VAR 0 7
35749: PPUSH
35750: LD_INT 1
35752: PPUSH
35753: LD_VAR 0 14
35757: PPUSH
35758: CALL_OW 2
35762: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35763: LD_VAR 0 14
35767: PPUSH
35768: LD_VAR 0 12
35772: PUSH
35773: LD_INT 1
35775: ARRAY
35776: PPUSH
35777: CALL_OW 52
// end ;
35781: GO 35420
35783: POP
35784: POP
// end ;
35785: GO 34722
35787: POP
35788: POP
// result := result ^ buildings ;
35789: LD_ADDR_VAR 0 7
35793: PUSH
35794: LD_VAR 0 7
35798: PUSH
35799: LD_VAR 0 18
35803: ADD
35804: ST_TO_ADDR
// end else
35805: GO 35948
// begin for i = 1 to personel do
35807: LD_ADDR_VAR 0 8
35811: PUSH
35812: DOUBLE
35813: LD_INT 1
35815: DEC
35816: ST_TO_ADDR
35817: LD_VAR 0 6
35821: PUSH
35822: FOR_TO
35823: IFFALSE 35946
// begin if i > 4 then
35825: LD_VAR 0 8
35829: PUSH
35830: LD_INT 4
35832: GREATER
35833: IFFALSE 35837
// break ;
35835: GO 35946
// x := personel [ i ] ;
35837: LD_ADDR_VAR 0 13
35841: PUSH
35842: LD_VAR 0 6
35846: PUSH
35847: LD_VAR 0 8
35851: ARRAY
35852: ST_TO_ADDR
// if x = - 1 then
35853: LD_VAR 0 13
35857: PUSH
35858: LD_INT 1
35860: NEG
35861: EQUAL
35862: IFFALSE 35866
// continue ;
35864: GO 35822
// PrepareHuman ( false , i , skill ) ;
35866: LD_INT 0
35868: PPUSH
35869: LD_VAR 0 8
35873: PPUSH
35874: LD_VAR 0 4
35878: PPUSH
35879: CALL_OW 380
// un := CreateHuman ;
35883: LD_ADDR_VAR 0 14
35887: PUSH
35888: CALL_OW 44
35892: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35893: LD_VAR 0 14
35897: PPUSH
35898: LD_VAR 0 1
35902: PPUSH
35903: CALL_OW 250
35907: PPUSH
35908: LD_VAR 0 1
35912: PPUSH
35913: CALL_OW 251
35917: PPUSH
35918: LD_INT 10
35920: PPUSH
35921: LD_INT 0
35923: PPUSH
35924: CALL_OW 50
// result := result ^ un ;
35928: LD_ADDR_VAR 0 7
35932: PUSH
35933: LD_VAR 0 7
35937: PUSH
35938: LD_VAR 0 14
35942: ADD
35943: ST_TO_ADDR
// end ;
35944: GO 35822
35946: POP
35947: POP
// end ; end ;
35948: LD_VAR 0 7
35952: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35953: LD_INT 0
35955: PPUSH
35956: PPUSH
35957: PPUSH
35958: PPUSH
35959: PPUSH
35960: PPUSH
35961: PPUSH
35962: PPUSH
35963: PPUSH
35964: PPUSH
35965: PPUSH
35966: PPUSH
35967: PPUSH
35968: PPUSH
35969: PPUSH
35970: PPUSH
// result := false ;
35971: LD_ADDR_VAR 0 3
35975: PUSH
35976: LD_INT 0
35978: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35979: LD_VAR 0 1
35983: NOT
35984: PUSH
35985: LD_VAR 0 1
35989: PPUSH
35990: CALL_OW 266
35994: PUSH
35995: LD_INT 32
35997: PUSH
35998: LD_INT 33
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: IN
36005: NOT
36006: OR
36007: IFFALSE 36011
// exit ;
36009: GO 37120
// nat := GetNation ( tower ) ;
36011: LD_ADDR_VAR 0 12
36015: PUSH
36016: LD_VAR 0 1
36020: PPUSH
36021: CALL_OW 248
36025: ST_TO_ADDR
// side := GetSide ( tower ) ;
36026: LD_ADDR_VAR 0 16
36030: PUSH
36031: LD_VAR 0 1
36035: PPUSH
36036: CALL_OW 255
36040: ST_TO_ADDR
// x := GetX ( tower ) ;
36041: LD_ADDR_VAR 0 10
36045: PUSH
36046: LD_VAR 0 1
36050: PPUSH
36051: CALL_OW 250
36055: ST_TO_ADDR
// y := GetY ( tower ) ;
36056: LD_ADDR_VAR 0 11
36060: PUSH
36061: LD_VAR 0 1
36065: PPUSH
36066: CALL_OW 251
36070: ST_TO_ADDR
// if not x or not y then
36071: LD_VAR 0 10
36075: NOT
36076: PUSH
36077: LD_VAR 0 11
36081: NOT
36082: OR
36083: IFFALSE 36087
// exit ;
36085: GO 37120
// weapon := 0 ;
36087: LD_ADDR_VAR 0 18
36091: PUSH
36092: LD_INT 0
36094: ST_TO_ADDR
// fac_list := [ ] ;
36095: LD_ADDR_VAR 0 17
36099: PUSH
36100: EMPTY
36101: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36102: LD_ADDR_VAR 0 6
36106: PUSH
36107: LD_VAR 0 1
36111: PPUSH
36112: CALL_OW 274
36116: PPUSH
36117: LD_VAR 0 2
36121: PPUSH
36122: LD_INT 0
36124: PPUSH
36125: CALL 33691 0 3
36129: PPUSH
36130: LD_INT 30
36132: PUSH
36133: LD_INT 3
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PPUSH
36140: CALL_OW 72
36144: ST_TO_ADDR
// if not factories then
36145: LD_VAR 0 6
36149: NOT
36150: IFFALSE 36154
// exit ;
36152: GO 37120
// for i in factories do
36154: LD_ADDR_VAR 0 8
36158: PUSH
36159: LD_VAR 0 6
36163: PUSH
36164: FOR_IN
36165: IFFALSE 36190
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36167: LD_ADDR_VAR 0 17
36171: PUSH
36172: LD_VAR 0 17
36176: PUSH
36177: LD_VAR 0 8
36181: PPUSH
36182: CALL_OW 478
36186: UNION
36187: ST_TO_ADDR
36188: GO 36164
36190: POP
36191: POP
// if not fac_list then
36192: LD_VAR 0 17
36196: NOT
36197: IFFALSE 36201
// exit ;
36199: GO 37120
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36201: LD_ADDR_VAR 0 5
36205: PUSH
36206: LD_INT 4
36208: PUSH
36209: LD_INT 5
36211: PUSH
36212: LD_INT 9
36214: PUSH
36215: LD_INT 10
36217: PUSH
36218: LD_INT 6
36220: PUSH
36221: LD_INT 7
36223: PUSH
36224: LD_INT 11
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 27
36238: PUSH
36239: LD_INT 28
36241: PUSH
36242: LD_INT 26
36244: PUSH
36245: LD_INT 30
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 43
36256: PUSH
36257: LD_INT 44
36259: PUSH
36260: LD_INT 46
36262: PUSH
36263: LD_INT 45
36265: PUSH
36266: LD_INT 47
36268: PUSH
36269: LD_INT 49
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: LIST
36284: PUSH
36285: LD_VAR 0 12
36289: ARRAY
36290: ST_TO_ADDR
// list := list isect fac_list ;
36291: LD_ADDR_VAR 0 5
36295: PUSH
36296: LD_VAR 0 5
36300: PUSH
36301: LD_VAR 0 17
36305: ISECT
36306: ST_TO_ADDR
// if not list then
36307: LD_VAR 0 5
36311: NOT
36312: IFFALSE 36316
// exit ;
36314: GO 37120
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36316: LD_VAR 0 12
36320: PUSH
36321: LD_INT 3
36323: EQUAL
36324: PUSH
36325: LD_INT 49
36327: PUSH
36328: LD_VAR 0 5
36332: IN
36333: AND
36334: PUSH
36335: LD_INT 31
36337: PPUSH
36338: LD_VAR 0 16
36342: PPUSH
36343: CALL_OW 321
36347: PUSH
36348: LD_INT 2
36350: EQUAL
36351: AND
36352: IFFALSE 36412
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36354: LD_INT 22
36356: PUSH
36357: LD_VAR 0 16
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 35
36368: PUSH
36369: LD_INT 49
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 91
36378: PUSH
36379: LD_VAR 0 1
36383: PUSH
36384: LD_INT 10
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: LIST
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: LIST
36396: PPUSH
36397: CALL_OW 69
36401: NOT
36402: IFFALSE 36412
// weapon := ru_time_lapser ;
36404: LD_ADDR_VAR 0 18
36408: PUSH
36409: LD_INT 49
36411: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36412: LD_VAR 0 12
36416: PUSH
36417: LD_INT 1
36419: PUSH
36420: LD_INT 2
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: IN
36427: PUSH
36428: LD_INT 11
36430: PUSH
36431: LD_VAR 0 5
36435: IN
36436: PUSH
36437: LD_INT 30
36439: PUSH
36440: LD_VAR 0 5
36444: IN
36445: OR
36446: AND
36447: PUSH
36448: LD_INT 6
36450: PPUSH
36451: LD_VAR 0 16
36455: PPUSH
36456: CALL_OW 321
36460: PUSH
36461: LD_INT 2
36463: EQUAL
36464: AND
36465: IFFALSE 36630
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36467: LD_INT 22
36469: PUSH
36470: LD_VAR 0 16
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 2
36481: PUSH
36482: LD_INT 35
36484: PUSH
36485: LD_INT 11
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 35
36494: PUSH
36495: LD_INT 30
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 91
36509: PUSH
36510: LD_VAR 0 1
36514: PUSH
36515: LD_INT 18
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: LIST
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: LIST
36527: PPUSH
36528: CALL_OW 69
36532: NOT
36533: PUSH
36534: LD_INT 22
36536: PUSH
36537: LD_VAR 0 16
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: PUSH
36546: LD_INT 2
36548: PUSH
36549: LD_INT 30
36551: PUSH
36552: LD_INT 32
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 30
36561: PUSH
36562: LD_INT 33
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: LIST
36573: PUSH
36574: LD_INT 91
36576: PUSH
36577: LD_VAR 0 1
36581: PUSH
36582: LD_INT 12
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: LIST
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: LIST
36594: PUSH
36595: EMPTY
36596: LIST
36597: PPUSH
36598: CALL_OW 69
36602: PUSH
36603: LD_INT 2
36605: GREATER
36606: AND
36607: IFFALSE 36630
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36609: LD_ADDR_VAR 0 18
36613: PUSH
36614: LD_INT 11
36616: PUSH
36617: LD_INT 30
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_VAR 0 12
36628: ARRAY
36629: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36630: LD_VAR 0 18
36634: NOT
36635: PUSH
36636: LD_INT 40
36638: PPUSH
36639: LD_VAR 0 16
36643: PPUSH
36644: CALL_OW 321
36648: PUSH
36649: LD_INT 2
36651: EQUAL
36652: AND
36653: PUSH
36654: LD_INT 7
36656: PUSH
36657: LD_VAR 0 5
36661: IN
36662: PUSH
36663: LD_INT 28
36665: PUSH
36666: LD_VAR 0 5
36670: IN
36671: OR
36672: PUSH
36673: LD_INT 45
36675: PUSH
36676: LD_VAR 0 5
36680: IN
36681: OR
36682: AND
36683: IFFALSE 36937
// begin hex := GetHexInfo ( x , y ) ;
36685: LD_ADDR_VAR 0 4
36689: PUSH
36690: LD_VAR 0 10
36694: PPUSH
36695: LD_VAR 0 11
36699: PPUSH
36700: CALL_OW 546
36704: ST_TO_ADDR
// if hex [ 1 ] then
36705: LD_VAR 0 4
36709: PUSH
36710: LD_INT 1
36712: ARRAY
36713: IFFALSE 36717
// exit ;
36715: GO 37120
// height := hex [ 2 ] ;
36717: LD_ADDR_VAR 0 15
36721: PUSH
36722: LD_VAR 0 4
36726: PUSH
36727: LD_INT 2
36729: ARRAY
36730: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36731: LD_ADDR_VAR 0 14
36735: PUSH
36736: LD_INT 0
36738: PUSH
36739: LD_INT 2
36741: PUSH
36742: LD_INT 3
36744: PUSH
36745: LD_INT 5
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: ST_TO_ADDR
// for i in tmp do
36754: LD_ADDR_VAR 0 8
36758: PUSH
36759: LD_VAR 0 14
36763: PUSH
36764: FOR_IN
36765: IFFALSE 36935
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36767: LD_ADDR_VAR 0 9
36771: PUSH
36772: LD_VAR 0 10
36776: PPUSH
36777: LD_VAR 0 8
36781: PPUSH
36782: LD_INT 5
36784: PPUSH
36785: CALL_OW 272
36789: PUSH
36790: LD_VAR 0 11
36794: PPUSH
36795: LD_VAR 0 8
36799: PPUSH
36800: LD_INT 5
36802: PPUSH
36803: CALL_OW 273
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36812: LD_VAR 0 9
36816: PUSH
36817: LD_INT 1
36819: ARRAY
36820: PPUSH
36821: LD_VAR 0 9
36825: PUSH
36826: LD_INT 2
36828: ARRAY
36829: PPUSH
36830: CALL_OW 488
36834: IFFALSE 36933
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36836: LD_ADDR_VAR 0 4
36840: PUSH
36841: LD_VAR 0 9
36845: PUSH
36846: LD_INT 1
36848: ARRAY
36849: PPUSH
36850: LD_VAR 0 9
36854: PUSH
36855: LD_INT 2
36857: ARRAY
36858: PPUSH
36859: CALL_OW 546
36863: ST_TO_ADDR
// if hex [ 1 ] then
36864: LD_VAR 0 4
36868: PUSH
36869: LD_INT 1
36871: ARRAY
36872: IFFALSE 36876
// continue ;
36874: GO 36764
// h := hex [ 2 ] ;
36876: LD_ADDR_VAR 0 13
36880: PUSH
36881: LD_VAR 0 4
36885: PUSH
36886: LD_INT 2
36888: ARRAY
36889: ST_TO_ADDR
// if h + 7 < height then
36890: LD_VAR 0 13
36894: PUSH
36895: LD_INT 7
36897: PLUS
36898: PUSH
36899: LD_VAR 0 15
36903: LESS
36904: IFFALSE 36933
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36906: LD_ADDR_VAR 0 18
36910: PUSH
36911: LD_INT 7
36913: PUSH
36914: LD_INT 28
36916: PUSH
36917: LD_INT 45
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: LIST
36924: PUSH
36925: LD_VAR 0 12
36929: ARRAY
36930: ST_TO_ADDR
// break ;
36931: GO 36935
// end ; end ; end ;
36933: GO 36764
36935: POP
36936: POP
// end ; if not weapon then
36937: LD_VAR 0 18
36941: NOT
36942: IFFALSE 37002
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36944: LD_ADDR_VAR 0 5
36948: PUSH
36949: LD_VAR 0 5
36953: PUSH
36954: LD_INT 11
36956: PUSH
36957: LD_INT 30
36959: PUSH
36960: LD_INT 49
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: LIST
36967: DIFF
36968: ST_TO_ADDR
// if not list then
36969: LD_VAR 0 5
36973: NOT
36974: IFFALSE 36978
// exit ;
36976: GO 37120
// weapon := list [ rand ( 1 , list ) ] ;
36978: LD_ADDR_VAR 0 18
36982: PUSH
36983: LD_VAR 0 5
36987: PUSH
36988: LD_INT 1
36990: PPUSH
36991: LD_VAR 0 5
36995: PPUSH
36996: CALL_OW 12
37000: ARRAY
37001: ST_TO_ADDR
// end ; if weapon then
37002: LD_VAR 0 18
37006: IFFALSE 37120
// begin tmp := CostOfWeapon ( weapon ) ;
37008: LD_ADDR_VAR 0 14
37012: PUSH
37013: LD_VAR 0 18
37017: PPUSH
37018: CALL_OW 451
37022: ST_TO_ADDR
// j := GetBase ( tower ) ;
37023: LD_ADDR_VAR 0 9
37027: PUSH
37028: LD_VAR 0 1
37032: PPUSH
37033: CALL_OW 274
37037: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37038: LD_VAR 0 9
37042: PPUSH
37043: LD_INT 1
37045: PPUSH
37046: CALL_OW 275
37050: PUSH
37051: LD_VAR 0 14
37055: PUSH
37056: LD_INT 1
37058: ARRAY
37059: GREATEREQUAL
37060: PUSH
37061: LD_VAR 0 9
37065: PPUSH
37066: LD_INT 2
37068: PPUSH
37069: CALL_OW 275
37073: PUSH
37074: LD_VAR 0 14
37078: PUSH
37079: LD_INT 2
37081: ARRAY
37082: GREATEREQUAL
37083: AND
37084: PUSH
37085: LD_VAR 0 9
37089: PPUSH
37090: LD_INT 3
37092: PPUSH
37093: CALL_OW 275
37097: PUSH
37098: LD_VAR 0 14
37102: PUSH
37103: LD_INT 3
37105: ARRAY
37106: GREATEREQUAL
37107: AND
37108: IFFALSE 37120
// result := weapon ;
37110: LD_ADDR_VAR 0 3
37114: PUSH
37115: LD_VAR 0 18
37119: ST_TO_ADDR
// end ; end ;
37120: LD_VAR 0 3
37124: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37125: LD_INT 0
37127: PPUSH
37128: PPUSH
// result := true ;
37129: LD_ADDR_VAR 0 3
37133: PUSH
37134: LD_INT 1
37136: ST_TO_ADDR
// if array1 = array2 then
37137: LD_VAR 0 1
37141: PUSH
37142: LD_VAR 0 2
37146: EQUAL
37147: IFFALSE 37207
// begin for i = 1 to array1 do
37149: LD_ADDR_VAR 0 4
37153: PUSH
37154: DOUBLE
37155: LD_INT 1
37157: DEC
37158: ST_TO_ADDR
37159: LD_VAR 0 1
37163: PUSH
37164: FOR_TO
37165: IFFALSE 37203
// if array1 [ i ] <> array2 [ i ] then
37167: LD_VAR 0 1
37171: PUSH
37172: LD_VAR 0 4
37176: ARRAY
37177: PUSH
37178: LD_VAR 0 2
37182: PUSH
37183: LD_VAR 0 4
37187: ARRAY
37188: NONEQUAL
37189: IFFALSE 37201
// begin result := false ;
37191: LD_ADDR_VAR 0 3
37195: PUSH
37196: LD_INT 0
37198: ST_TO_ADDR
// break ;
37199: GO 37203
// end ;
37201: GO 37164
37203: POP
37204: POP
// end else
37205: GO 37215
// result := false ;
37207: LD_ADDR_VAR 0 3
37211: PUSH
37212: LD_INT 0
37214: ST_TO_ADDR
// end ;
37215: LD_VAR 0 3
37219: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37220: LD_INT 0
37222: PPUSH
37223: PPUSH
// if not array1 or not array2 then
37224: LD_VAR 0 1
37228: NOT
37229: PUSH
37230: LD_VAR 0 2
37234: NOT
37235: OR
37236: IFFALSE 37240
// exit ;
37238: GO 37304
// result := true ;
37240: LD_ADDR_VAR 0 3
37244: PUSH
37245: LD_INT 1
37247: ST_TO_ADDR
// for i = 1 to array1 do
37248: LD_ADDR_VAR 0 4
37252: PUSH
37253: DOUBLE
37254: LD_INT 1
37256: DEC
37257: ST_TO_ADDR
37258: LD_VAR 0 1
37262: PUSH
37263: FOR_TO
37264: IFFALSE 37302
// if array1 [ i ] <> array2 [ i ] then
37266: LD_VAR 0 1
37270: PUSH
37271: LD_VAR 0 4
37275: ARRAY
37276: PUSH
37277: LD_VAR 0 2
37281: PUSH
37282: LD_VAR 0 4
37286: ARRAY
37287: NONEQUAL
37288: IFFALSE 37300
// begin result := false ;
37290: LD_ADDR_VAR 0 3
37294: PUSH
37295: LD_INT 0
37297: ST_TO_ADDR
// break ;
37298: GO 37302
// end ;
37300: GO 37263
37302: POP
37303: POP
// end ;
37304: LD_VAR 0 3
37308: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37309: LD_INT 0
37311: PPUSH
37312: PPUSH
37313: PPUSH
// pom := GetBase ( fac ) ;
37314: LD_ADDR_VAR 0 5
37318: PUSH
37319: LD_VAR 0 1
37323: PPUSH
37324: CALL_OW 274
37328: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37329: LD_ADDR_VAR 0 4
37333: PUSH
37334: LD_VAR 0 2
37338: PUSH
37339: LD_INT 1
37341: ARRAY
37342: PPUSH
37343: LD_VAR 0 2
37347: PUSH
37348: LD_INT 2
37350: ARRAY
37351: PPUSH
37352: LD_VAR 0 2
37356: PUSH
37357: LD_INT 3
37359: ARRAY
37360: PPUSH
37361: LD_VAR 0 2
37365: PUSH
37366: LD_INT 4
37368: ARRAY
37369: PPUSH
37370: CALL_OW 449
37374: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37375: LD_ADDR_VAR 0 3
37379: PUSH
37380: LD_VAR 0 5
37384: PPUSH
37385: LD_INT 1
37387: PPUSH
37388: CALL_OW 275
37392: PUSH
37393: LD_VAR 0 4
37397: PUSH
37398: LD_INT 1
37400: ARRAY
37401: GREATEREQUAL
37402: PUSH
37403: LD_VAR 0 5
37407: PPUSH
37408: LD_INT 2
37410: PPUSH
37411: CALL_OW 275
37415: PUSH
37416: LD_VAR 0 4
37420: PUSH
37421: LD_INT 2
37423: ARRAY
37424: GREATEREQUAL
37425: AND
37426: PUSH
37427: LD_VAR 0 5
37431: PPUSH
37432: LD_INT 3
37434: PPUSH
37435: CALL_OW 275
37439: PUSH
37440: LD_VAR 0 4
37444: PUSH
37445: LD_INT 3
37447: ARRAY
37448: GREATEREQUAL
37449: AND
37450: ST_TO_ADDR
// end ;
37451: LD_VAR 0 3
37455: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37456: LD_INT 0
37458: PPUSH
37459: PPUSH
37460: PPUSH
37461: PPUSH
// pom := GetBase ( building ) ;
37462: LD_ADDR_VAR 0 3
37466: PUSH
37467: LD_VAR 0 1
37471: PPUSH
37472: CALL_OW 274
37476: ST_TO_ADDR
// if not pom then
37477: LD_VAR 0 3
37481: NOT
37482: IFFALSE 37486
// exit ;
37484: GO 37656
// btype := GetBType ( building ) ;
37486: LD_ADDR_VAR 0 5
37490: PUSH
37491: LD_VAR 0 1
37495: PPUSH
37496: CALL_OW 266
37500: ST_TO_ADDR
// if btype = b_armoury then
37501: LD_VAR 0 5
37505: PUSH
37506: LD_INT 4
37508: EQUAL
37509: IFFALSE 37519
// btype := b_barracks ;
37511: LD_ADDR_VAR 0 5
37515: PUSH
37516: LD_INT 5
37518: ST_TO_ADDR
// if btype = b_depot then
37519: LD_VAR 0 5
37523: PUSH
37524: LD_INT 0
37526: EQUAL
37527: IFFALSE 37537
// btype := b_warehouse ;
37529: LD_ADDR_VAR 0 5
37533: PUSH
37534: LD_INT 1
37536: ST_TO_ADDR
// if btype = b_workshop then
37537: LD_VAR 0 5
37541: PUSH
37542: LD_INT 2
37544: EQUAL
37545: IFFALSE 37555
// btype := b_factory ;
37547: LD_ADDR_VAR 0 5
37551: PUSH
37552: LD_INT 3
37554: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37555: LD_ADDR_VAR 0 4
37559: PUSH
37560: LD_VAR 0 5
37564: PPUSH
37565: LD_VAR 0 1
37569: PPUSH
37570: CALL_OW 248
37574: PPUSH
37575: CALL_OW 450
37579: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37580: LD_ADDR_VAR 0 2
37584: PUSH
37585: LD_VAR 0 3
37589: PPUSH
37590: LD_INT 1
37592: PPUSH
37593: CALL_OW 275
37597: PUSH
37598: LD_VAR 0 4
37602: PUSH
37603: LD_INT 1
37605: ARRAY
37606: GREATEREQUAL
37607: PUSH
37608: LD_VAR 0 3
37612: PPUSH
37613: LD_INT 2
37615: PPUSH
37616: CALL_OW 275
37620: PUSH
37621: LD_VAR 0 4
37625: PUSH
37626: LD_INT 2
37628: ARRAY
37629: GREATEREQUAL
37630: AND
37631: PUSH
37632: LD_VAR 0 3
37636: PPUSH
37637: LD_INT 3
37639: PPUSH
37640: CALL_OW 275
37644: PUSH
37645: LD_VAR 0 4
37649: PUSH
37650: LD_INT 3
37652: ARRAY
37653: GREATEREQUAL
37654: AND
37655: ST_TO_ADDR
// end ;
37656: LD_VAR 0 2
37660: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37661: LD_INT 0
37663: PPUSH
37664: PPUSH
37665: PPUSH
// pom := GetBase ( building ) ;
37666: LD_ADDR_VAR 0 4
37670: PUSH
37671: LD_VAR 0 1
37675: PPUSH
37676: CALL_OW 274
37680: ST_TO_ADDR
// if not pom then
37681: LD_VAR 0 4
37685: NOT
37686: IFFALSE 37690
// exit ;
37688: GO 37791
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37690: LD_ADDR_VAR 0 5
37694: PUSH
37695: LD_VAR 0 2
37699: PPUSH
37700: LD_VAR 0 1
37704: PPUSH
37705: CALL_OW 248
37709: PPUSH
37710: CALL_OW 450
37714: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37715: LD_ADDR_VAR 0 3
37719: PUSH
37720: LD_VAR 0 4
37724: PPUSH
37725: LD_INT 1
37727: PPUSH
37728: CALL_OW 275
37732: PUSH
37733: LD_VAR 0 5
37737: PUSH
37738: LD_INT 1
37740: ARRAY
37741: GREATEREQUAL
37742: PUSH
37743: LD_VAR 0 4
37747: PPUSH
37748: LD_INT 2
37750: PPUSH
37751: CALL_OW 275
37755: PUSH
37756: LD_VAR 0 5
37760: PUSH
37761: LD_INT 2
37763: ARRAY
37764: GREATEREQUAL
37765: AND
37766: PUSH
37767: LD_VAR 0 4
37771: PPUSH
37772: LD_INT 3
37774: PPUSH
37775: CALL_OW 275
37779: PUSH
37780: LD_VAR 0 5
37784: PUSH
37785: LD_INT 3
37787: ARRAY
37788: GREATEREQUAL
37789: AND
37790: ST_TO_ADDR
// end ;
37791: LD_VAR 0 3
37795: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37796: LD_INT 0
37798: PPUSH
37799: PPUSH
37800: PPUSH
37801: PPUSH
37802: PPUSH
37803: PPUSH
37804: PPUSH
37805: PPUSH
37806: PPUSH
37807: PPUSH
37808: PPUSH
// result := false ;
37809: LD_ADDR_VAR 0 8
37813: PUSH
37814: LD_INT 0
37816: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37817: LD_VAR 0 5
37821: NOT
37822: PUSH
37823: LD_VAR 0 1
37827: NOT
37828: OR
37829: PUSH
37830: LD_VAR 0 2
37834: NOT
37835: OR
37836: PUSH
37837: LD_VAR 0 3
37841: NOT
37842: OR
37843: IFFALSE 37847
// exit ;
37845: GO 38661
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37847: LD_ADDR_VAR 0 14
37851: PUSH
37852: LD_VAR 0 1
37856: PPUSH
37857: LD_VAR 0 2
37861: PPUSH
37862: LD_VAR 0 3
37866: PPUSH
37867: LD_VAR 0 4
37871: PPUSH
37872: LD_VAR 0 5
37876: PUSH
37877: LD_INT 1
37879: ARRAY
37880: PPUSH
37881: CALL_OW 248
37885: PPUSH
37886: LD_INT 0
37888: PPUSH
37889: CALL 39894 0 6
37893: ST_TO_ADDR
// if not hexes then
37894: LD_VAR 0 14
37898: NOT
37899: IFFALSE 37903
// exit ;
37901: GO 38661
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37903: LD_ADDR_VAR 0 17
37907: PUSH
37908: LD_VAR 0 5
37912: PPUSH
37913: LD_INT 22
37915: PUSH
37916: LD_VAR 0 13
37920: PPUSH
37921: CALL_OW 255
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 2
37932: PUSH
37933: LD_INT 30
37935: PUSH
37936: LD_INT 0
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 30
37945: PUSH
37946: LD_INT 1
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: LIST
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PPUSH
37962: CALL_OW 72
37966: ST_TO_ADDR
// for i = 1 to hexes do
37967: LD_ADDR_VAR 0 9
37971: PUSH
37972: DOUBLE
37973: LD_INT 1
37975: DEC
37976: ST_TO_ADDR
37977: LD_VAR 0 14
37981: PUSH
37982: FOR_TO
37983: IFFALSE 38659
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37985: LD_ADDR_VAR 0 13
37989: PUSH
37990: LD_VAR 0 14
37994: PUSH
37995: LD_VAR 0 9
37999: ARRAY
38000: PUSH
38001: LD_INT 1
38003: ARRAY
38004: PPUSH
38005: LD_VAR 0 14
38009: PUSH
38010: LD_VAR 0 9
38014: ARRAY
38015: PUSH
38016: LD_INT 2
38018: ARRAY
38019: PPUSH
38020: CALL_OW 428
38024: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38025: LD_VAR 0 14
38029: PUSH
38030: LD_VAR 0 9
38034: ARRAY
38035: PUSH
38036: LD_INT 1
38038: ARRAY
38039: PPUSH
38040: LD_VAR 0 14
38044: PUSH
38045: LD_VAR 0 9
38049: ARRAY
38050: PUSH
38051: LD_INT 2
38053: ARRAY
38054: PPUSH
38055: CALL_OW 351
38059: PUSH
38060: LD_VAR 0 14
38064: PUSH
38065: LD_VAR 0 9
38069: ARRAY
38070: PUSH
38071: LD_INT 1
38073: ARRAY
38074: PPUSH
38075: LD_VAR 0 14
38079: PUSH
38080: LD_VAR 0 9
38084: ARRAY
38085: PUSH
38086: LD_INT 2
38088: ARRAY
38089: PPUSH
38090: CALL_OW 488
38094: NOT
38095: OR
38096: PUSH
38097: LD_VAR 0 13
38101: PPUSH
38102: CALL_OW 247
38106: PUSH
38107: LD_INT 3
38109: EQUAL
38110: OR
38111: IFFALSE 38117
// exit ;
38113: POP
38114: POP
38115: GO 38661
// if not tmp then
38117: LD_VAR 0 13
38121: NOT
38122: IFFALSE 38126
// continue ;
38124: GO 37982
// result := true ;
38126: LD_ADDR_VAR 0 8
38130: PUSH
38131: LD_INT 1
38133: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38134: LD_VAR 0 6
38138: PUSH
38139: LD_VAR 0 13
38143: PPUSH
38144: CALL_OW 247
38148: PUSH
38149: LD_INT 2
38151: EQUAL
38152: AND
38153: PUSH
38154: LD_VAR 0 13
38158: PPUSH
38159: CALL_OW 263
38163: PUSH
38164: LD_INT 1
38166: EQUAL
38167: AND
38168: IFFALSE 38332
// begin if IsDrivenBy ( tmp ) then
38170: LD_VAR 0 13
38174: PPUSH
38175: CALL_OW 311
38179: IFFALSE 38183
// continue ;
38181: GO 37982
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38183: LD_VAR 0 6
38187: PPUSH
38188: LD_INT 3
38190: PUSH
38191: LD_INT 60
38193: PUSH
38194: EMPTY
38195: LIST
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 3
38203: PUSH
38204: LD_INT 55
38206: PUSH
38207: EMPTY
38208: LIST
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PPUSH
38218: CALL_OW 72
38222: IFFALSE 38330
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38224: LD_ADDR_VAR 0 18
38228: PUSH
38229: LD_VAR 0 6
38233: PPUSH
38234: LD_INT 3
38236: PUSH
38237: LD_INT 60
38239: PUSH
38240: EMPTY
38241: LIST
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 3
38249: PUSH
38250: LD_INT 55
38252: PUSH
38253: EMPTY
38254: LIST
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PPUSH
38264: CALL_OW 72
38268: PUSH
38269: LD_INT 1
38271: ARRAY
38272: ST_TO_ADDR
// if IsInUnit ( driver ) then
38273: LD_VAR 0 18
38277: PPUSH
38278: CALL_OW 310
38282: IFFALSE 38293
// ComExit ( driver ) ;
38284: LD_VAR 0 18
38288: PPUSH
38289: CALL 63655 0 1
// AddComEnterUnit ( driver , tmp ) ;
38293: LD_VAR 0 18
38297: PPUSH
38298: LD_VAR 0 13
38302: PPUSH
38303: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38307: LD_VAR 0 18
38311: PPUSH
38312: LD_VAR 0 7
38316: PPUSH
38317: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38321: LD_VAR 0 18
38325: PPUSH
38326: CALL_OW 181
// end ; continue ;
38330: GO 37982
// end ; if not cleaners or not tmp in cleaners then
38332: LD_VAR 0 6
38336: NOT
38337: PUSH
38338: LD_VAR 0 13
38342: PUSH
38343: LD_VAR 0 6
38347: IN
38348: NOT
38349: OR
38350: IFFALSE 38657
// begin if dep then
38352: LD_VAR 0 17
38356: IFFALSE 38492
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38358: LD_ADDR_VAR 0 16
38362: PUSH
38363: LD_VAR 0 17
38367: PUSH
38368: LD_INT 1
38370: ARRAY
38371: PPUSH
38372: CALL_OW 250
38376: PPUSH
38377: LD_VAR 0 17
38381: PUSH
38382: LD_INT 1
38384: ARRAY
38385: PPUSH
38386: CALL_OW 254
38390: PPUSH
38391: LD_INT 5
38393: PPUSH
38394: CALL_OW 272
38398: PUSH
38399: LD_VAR 0 17
38403: PUSH
38404: LD_INT 1
38406: ARRAY
38407: PPUSH
38408: CALL_OW 251
38412: PPUSH
38413: LD_VAR 0 17
38417: PUSH
38418: LD_INT 1
38420: ARRAY
38421: PPUSH
38422: CALL_OW 254
38426: PPUSH
38427: LD_INT 5
38429: PPUSH
38430: CALL_OW 273
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38439: LD_VAR 0 16
38443: PUSH
38444: LD_INT 1
38446: ARRAY
38447: PPUSH
38448: LD_VAR 0 16
38452: PUSH
38453: LD_INT 2
38455: ARRAY
38456: PPUSH
38457: CALL_OW 488
38461: IFFALSE 38492
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38463: LD_VAR 0 13
38467: PPUSH
38468: LD_VAR 0 16
38472: PUSH
38473: LD_INT 1
38475: ARRAY
38476: PPUSH
38477: LD_VAR 0 16
38481: PUSH
38482: LD_INT 2
38484: ARRAY
38485: PPUSH
38486: CALL_OW 111
// continue ;
38490: GO 37982
// end ; end ; r := GetDir ( tmp ) ;
38492: LD_ADDR_VAR 0 15
38496: PUSH
38497: LD_VAR 0 13
38501: PPUSH
38502: CALL_OW 254
38506: ST_TO_ADDR
// if r = 5 then
38507: LD_VAR 0 15
38511: PUSH
38512: LD_INT 5
38514: EQUAL
38515: IFFALSE 38525
// r := 0 ;
38517: LD_ADDR_VAR 0 15
38521: PUSH
38522: LD_INT 0
38524: ST_TO_ADDR
// for j = r to 5 do
38525: LD_ADDR_VAR 0 10
38529: PUSH
38530: DOUBLE
38531: LD_VAR 0 15
38535: DEC
38536: ST_TO_ADDR
38537: LD_INT 5
38539: PUSH
38540: FOR_TO
38541: IFFALSE 38655
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38543: LD_ADDR_VAR 0 11
38547: PUSH
38548: LD_VAR 0 13
38552: PPUSH
38553: CALL_OW 250
38557: PPUSH
38558: LD_VAR 0 10
38562: PPUSH
38563: LD_INT 2
38565: PPUSH
38566: CALL_OW 272
38570: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38571: LD_ADDR_VAR 0 12
38575: PUSH
38576: LD_VAR 0 13
38580: PPUSH
38581: CALL_OW 251
38585: PPUSH
38586: LD_VAR 0 10
38590: PPUSH
38591: LD_INT 2
38593: PPUSH
38594: CALL_OW 273
38598: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38599: LD_VAR 0 11
38603: PPUSH
38604: LD_VAR 0 12
38608: PPUSH
38609: CALL_OW 488
38613: PUSH
38614: LD_VAR 0 11
38618: PPUSH
38619: LD_VAR 0 12
38623: PPUSH
38624: CALL_OW 428
38628: NOT
38629: AND
38630: IFFALSE 38653
// begin ComMoveXY ( tmp , _x , _y ) ;
38632: LD_VAR 0 13
38636: PPUSH
38637: LD_VAR 0 11
38641: PPUSH
38642: LD_VAR 0 12
38646: PPUSH
38647: CALL_OW 111
// break ;
38651: GO 38655
// end ; end ;
38653: GO 38540
38655: POP
38656: POP
// end ; end ;
38657: GO 37982
38659: POP
38660: POP
// end ;
38661: LD_VAR 0 8
38665: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38666: LD_INT 0
38668: PPUSH
// result := true ;
38669: LD_ADDR_VAR 0 3
38673: PUSH
38674: LD_INT 1
38676: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38677: LD_VAR 0 2
38681: PUSH
38682: LD_INT 24
38684: DOUBLE
38685: EQUAL
38686: IFTRUE 38696
38688: LD_INT 33
38690: DOUBLE
38691: EQUAL
38692: IFTRUE 38696
38694: GO 38721
38696: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38697: LD_ADDR_VAR 0 3
38701: PUSH
38702: LD_INT 32
38704: PPUSH
38705: LD_VAR 0 1
38709: PPUSH
38710: CALL_OW 321
38714: PUSH
38715: LD_INT 2
38717: EQUAL
38718: ST_TO_ADDR
38719: GO 39037
38721: LD_INT 20
38723: DOUBLE
38724: EQUAL
38725: IFTRUE 38729
38727: GO 38754
38729: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38730: LD_ADDR_VAR 0 3
38734: PUSH
38735: LD_INT 6
38737: PPUSH
38738: LD_VAR 0 1
38742: PPUSH
38743: CALL_OW 321
38747: PUSH
38748: LD_INT 2
38750: EQUAL
38751: ST_TO_ADDR
38752: GO 39037
38754: LD_INT 22
38756: DOUBLE
38757: EQUAL
38758: IFTRUE 38768
38760: LD_INT 36
38762: DOUBLE
38763: EQUAL
38764: IFTRUE 38768
38766: GO 38793
38768: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38769: LD_ADDR_VAR 0 3
38773: PUSH
38774: LD_INT 15
38776: PPUSH
38777: LD_VAR 0 1
38781: PPUSH
38782: CALL_OW 321
38786: PUSH
38787: LD_INT 2
38789: EQUAL
38790: ST_TO_ADDR
38791: GO 39037
38793: LD_INT 30
38795: DOUBLE
38796: EQUAL
38797: IFTRUE 38801
38799: GO 38826
38801: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38802: LD_ADDR_VAR 0 3
38806: PUSH
38807: LD_INT 20
38809: PPUSH
38810: LD_VAR 0 1
38814: PPUSH
38815: CALL_OW 321
38819: PUSH
38820: LD_INT 2
38822: EQUAL
38823: ST_TO_ADDR
38824: GO 39037
38826: LD_INT 28
38828: DOUBLE
38829: EQUAL
38830: IFTRUE 38840
38832: LD_INT 21
38834: DOUBLE
38835: EQUAL
38836: IFTRUE 38840
38838: GO 38865
38840: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38841: LD_ADDR_VAR 0 3
38845: PUSH
38846: LD_INT 21
38848: PPUSH
38849: LD_VAR 0 1
38853: PPUSH
38854: CALL_OW 321
38858: PUSH
38859: LD_INT 2
38861: EQUAL
38862: ST_TO_ADDR
38863: GO 39037
38865: LD_INT 16
38867: DOUBLE
38868: EQUAL
38869: IFTRUE 38873
38871: GO 38898
38873: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38874: LD_ADDR_VAR 0 3
38878: PUSH
38879: LD_INT 84
38881: PPUSH
38882: LD_VAR 0 1
38886: PPUSH
38887: CALL_OW 321
38891: PUSH
38892: LD_INT 2
38894: EQUAL
38895: ST_TO_ADDR
38896: GO 39037
38898: LD_INT 19
38900: DOUBLE
38901: EQUAL
38902: IFTRUE 38912
38904: LD_INT 23
38906: DOUBLE
38907: EQUAL
38908: IFTRUE 38912
38910: GO 38937
38912: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38913: LD_ADDR_VAR 0 3
38917: PUSH
38918: LD_INT 83
38920: PPUSH
38921: LD_VAR 0 1
38925: PPUSH
38926: CALL_OW 321
38930: PUSH
38931: LD_INT 2
38933: EQUAL
38934: ST_TO_ADDR
38935: GO 39037
38937: LD_INT 17
38939: DOUBLE
38940: EQUAL
38941: IFTRUE 38945
38943: GO 38970
38945: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38946: LD_ADDR_VAR 0 3
38950: PUSH
38951: LD_INT 39
38953: PPUSH
38954: LD_VAR 0 1
38958: PPUSH
38959: CALL_OW 321
38963: PUSH
38964: LD_INT 2
38966: EQUAL
38967: ST_TO_ADDR
38968: GO 39037
38970: LD_INT 18
38972: DOUBLE
38973: EQUAL
38974: IFTRUE 38978
38976: GO 39003
38978: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38979: LD_ADDR_VAR 0 3
38983: PUSH
38984: LD_INT 40
38986: PPUSH
38987: LD_VAR 0 1
38991: PPUSH
38992: CALL_OW 321
38996: PUSH
38997: LD_INT 2
38999: EQUAL
39000: ST_TO_ADDR
39001: GO 39037
39003: LD_INT 27
39005: DOUBLE
39006: EQUAL
39007: IFTRUE 39011
39009: GO 39036
39011: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39012: LD_ADDR_VAR 0 3
39016: PUSH
39017: LD_INT 35
39019: PPUSH
39020: LD_VAR 0 1
39024: PPUSH
39025: CALL_OW 321
39029: PUSH
39030: LD_INT 2
39032: EQUAL
39033: ST_TO_ADDR
39034: GO 39037
39036: POP
// end ;
39037: LD_VAR 0 3
39041: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39042: LD_INT 0
39044: PPUSH
39045: PPUSH
39046: PPUSH
39047: PPUSH
39048: PPUSH
39049: PPUSH
39050: PPUSH
39051: PPUSH
39052: PPUSH
39053: PPUSH
39054: PPUSH
// result := false ;
39055: LD_ADDR_VAR 0 6
39059: PUSH
39060: LD_INT 0
39062: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39063: LD_VAR 0 1
39067: NOT
39068: PUSH
39069: LD_VAR 0 1
39073: PPUSH
39074: CALL_OW 266
39078: PUSH
39079: LD_INT 0
39081: PUSH
39082: LD_INT 1
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: IN
39089: NOT
39090: OR
39091: PUSH
39092: LD_VAR 0 2
39096: NOT
39097: OR
39098: PUSH
39099: LD_VAR 0 5
39103: PUSH
39104: LD_INT 0
39106: PUSH
39107: LD_INT 1
39109: PUSH
39110: LD_INT 2
39112: PUSH
39113: LD_INT 3
39115: PUSH
39116: LD_INT 4
39118: PUSH
39119: LD_INT 5
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: IN
39130: NOT
39131: OR
39132: PUSH
39133: LD_VAR 0 3
39137: PPUSH
39138: LD_VAR 0 4
39142: PPUSH
39143: CALL_OW 488
39147: NOT
39148: OR
39149: IFFALSE 39153
// exit ;
39151: GO 39889
// side := GetSide ( depot ) ;
39153: LD_ADDR_VAR 0 9
39157: PUSH
39158: LD_VAR 0 1
39162: PPUSH
39163: CALL_OW 255
39167: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39168: LD_VAR 0 9
39172: PPUSH
39173: LD_VAR 0 2
39177: PPUSH
39178: CALL 38666 0 2
39182: NOT
39183: IFFALSE 39187
// exit ;
39185: GO 39889
// pom := GetBase ( depot ) ;
39187: LD_ADDR_VAR 0 10
39191: PUSH
39192: LD_VAR 0 1
39196: PPUSH
39197: CALL_OW 274
39201: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39202: LD_ADDR_VAR 0 11
39206: PUSH
39207: LD_VAR 0 2
39211: PPUSH
39212: LD_VAR 0 1
39216: PPUSH
39217: CALL_OW 248
39221: PPUSH
39222: CALL_OW 450
39226: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39227: LD_VAR 0 10
39231: PPUSH
39232: LD_INT 1
39234: PPUSH
39235: CALL_OW 275
39239: PUSH
39240: LD_VAR 0 11
39244: PUSH
39245: LD_INT 1
39247: ARRAY
39248: GREATEREQUAL
39249: PUSH
39250: LD_VAR 0 10
39254: PPUSH
39255: LD_INT 2
39257: PPUSH
39258: CALL_OW 275
39262: PUSH
39263: LD_VAR 0 11
39267: PUSH
39268: LD_INT 2
39270: ARRAY
39271: GREATEREQUAL
39272: AND
39273: PUSH
39274: LD_VAR 0 10
39278: PPUSH
39279: LD_INT 3
39281: PPUSH
39282: CALL_OW 275
39286: PUSH
39287: LD_VAR 0 11
39291: PUSH
39292: LD_INT 3
39294: ARRAY
39295: GREATEREQUAL
39296: AND
39297: NOT
39298: IFFALSE 39302
// exit ;
39300: GO 39889
// if GetBType ( depot ) = b_depot then
39302: LD_VAR 0 1
39306: PPUSH
39307: CALL_OW 266
39311: PUSH
39312: LD_INT 0
39314: EQUAL
39315: IFFALSE 39327
// dist := 28 else
39317: LD_ADDR_VAR 0 14
39321: PUSH
39322: LD_INT 28
39324: ST_TO_ADDR
39325: GO 39335
// dist := 36 ;
39327: LD_ADDR_VAR 0 14
39331: PUSH
39332: LD_INT 36
39334: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39335: LD_VAR 0 1
39339: PPUSH
39340: LD_VAR 0 3
39344: PPUSH
39345: LD_VAR 0 4
39349: PPUSH
39350: CALL_OW 297
39354: PUSH
39355: LD_VAR 0 14
39359: GREATER
39360: IFFALSE 39364
// exit ;
39362: GO 39889
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39364: LD_ADDR_VAR 0 12
39368: PUSH
39369: LD_VAR 0 2
39373: PPUSH
39374: LD_VAR 0 3
39378: PPUSH
39379: LD_VAR 0 4
39383: PPUSH
39384: LD_VAR 0 5
39388: PPUSH
39389: LD_VAR 0 1
39393: PPUSH
39394: CALL_OW 248
39398: PPUSH
39399: LD_INT 0
39401: PPUSH
39402: CALL 39894 0 6
39406: ST_TO_ADDR
// if not hexes then
39407: LD_VAR 0 12
39411: NOT
39412: IFFALSE 39416
// exit ;
39414: GO 39889
// hex := GetHexInfo ( x , y ) ;
39416: LD_ADDR_VAR 0 15
39420: PUSH
39421: LD_VAR 0 3
39425: PPUSH
39426: LD_VAR 0 4
39430: PPUSH
39431: CALL_OW 546
39435: ST_TO_ADDR
// if hex [ 1 ] then
39436: LD_VAR 0 15
39440: PUSH
39441: LD_INT 1
39443: ARRAY
39444: IFFALSE 39448
// exit ;
39446: GO 39889
// height := hex [ 2 ] ;
39448: LD_ADDR_VAR 0 13
39452: PUSH
39453: LD_VAR 0 15
39457: PUSH
39458: LD_INT 2
39460: ARRAY
39461: ST_TO_ADDR
// for i = 1 to hexes do
39462: LD_ADDR_VAR 0 7
39466: PUSH
39467: DOUBLE
39468: LD_INT 1
39470: DEC
39471: ST_TO_ADDR
39472: LD_VAR 0 12
39476: PUSH
39477: FOR_TO
39478: IFFALSE 39808
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39480: LD_VAR 0 12
39484: PUSH
39485: LD_VAR 0 7
39489: ARRAY
39490: PUSH
39491: LD_INT 1
39493: ARRAY
39494: PPUSH
39495: LD_VAR 0 12
39499: PUSH
39500: LD_VAR 0 7
39504: ARRAY
39505: PUSH
39506: LD_INT 2
39508: ARRAY
39509: PPUSH
39510: CALL_OW 488
39514: NOT
39515: PUSH
39516: LD_VAR 0 12
39520: PUSH
39521: LD_VAR 0 7
39525: ARRAY
39526: PUSH
39527: LD_INT 1
39529: ARRAY
39530: PPUSH
39531: LD_VAR 0 12
39535: PUSH
39536: LD_VAR 0 7
39540: ARRAY
39541: PUSH
39542: LD_INT 2
39544: ARRAY
39545: PPUSH
39546: CALL_OW 428
39550: PUSH
39551: LD_INT 0
39553: GREATER
39554: OR
39555: PUSH
39556: LD_VAR 0 12
39560: PUSH
39561: LD_VAR 0 7
39565: ARRAY
39566: PUSH
39567: LD_INT 1
39569: ARRAY
39570: PPUSH
39571: LD_VAR 0 12
39575: PUSH
39576: LD_VAR 0 7
39580: ARRAY
39581: PUSH
39582: LD_INT 2
39584: ARRAY
39585: PPUSH
39586: CALL_OW 351
39590: OR
39591: IFFALSE 39597
// exit ;
39593: POP
39594: POP
39595: GO 39889
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39597: LD_ADDR_VAR 0 8
39601: PUSH
39602: LD_VAR 0 12
39606: PUSH
39607: LD_VAR 0 7
39611: ARRAY
39612: PUSH
39613: LD_INT 1
39615: ARRAY
39616: PPUSH
39617: LD_VAR 0 12
39621: PUSH
39622: LD_VAR 0 7
39626: ARRAY
39627: PUSH
39628: LD_INT 2
39630: ARRAY
39631: PPUSH
39632: CALL_OW 546
39636: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39637: LD_VAR 0 8
39641: PUSH
39642: LD_INT 1
39644: ARRAY
39645: PUSH
39646: LD_VAR 0 8
39650: PUSH
39651: LD_INT 2
39653: ARRAY
39654: PUSH
39655: LD_VAR 0 13
39659: PUSH
39660: LD_INT 2
39662: PLUS
39663: GREATER
39664: OR
39665: PUSH
39666: LD_VAR 0 8
39670: PUSH
39671: LD_INT 2
39673: ARRAY
39674: PUSH
39675: LD_VAR 0 13
39679: PUSH
39680: LD_INT 2
39682: MINUS
39683: LESS
39684: OR
39685: PUSH
39686: LD_VAR 0 8
39690: PUSH
39691: LD_INT 3
39693: ARRAY
39694: PUSH
39695: LD_INT 0
39697: PUSH
39698: LD_INT 8
39700: PUSH
39701: LD_INT 9
39703: PUSH
39704: LD_INT 10
39706: PUSH
39707: LD_INT 11
39709: PUSH
39710: LD_INT 12
39712: PUSH
39713: LD_INT 13
39715: PUSH
39716: LD_INT 16
39718: PUSH
39719: LD_INT 17
39721: PUSH
39722: LD_INT 18
39724: PUSH
39725: LD_INT 19
39727: PUSH
39728: LD_INT 20
39730: PUSH
39731: LD_INT 21
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: IN
39749: NOT
39750: OR
39751: PUSH
39752: LD_VAR 0 8
39756: PUSH
39757: LD_INT 5
39759: ARRAY
39760: NOT
39761: OR
39762: PUSH
39763: LD_VAR 0 8
39767: PUSH
39768: LD_INT 6
39770: ARRAY
39771: PUSH
39772: LD_INT 1
39774: PUSH
39775: LD_INT 2
39777: PUSH
39778: LD_INT 7
39780: PUSH
39781: LD_INT 9
39783: PUSH
39784: LD_INT 10
39786: PUSH
39787: LD_INT 11
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: IN
39798: NOT
39799: OR
39800: IFFALSE 39806
// exit ;
39802: POP
39803: POP
39804: GO 39889
// end ;
39806: GO 39477
39808: POP
39809: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39810: LD_VAR 0 9
39814: PPUSH
39815: LD_VAR 0 3
39819: PPUSH
39820: LD_VAR 0 4
39824: PPUSH
39825: LD_INT 20
39827: PPUSH
39828: CALL 31841 0 4
39832: PUSH
39833: LD_INT 4
39835: ARRAY
39836: IFFALSE 39840
// exit ;
39838: GO 39889
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39840: LD_VAR 0 2
39844: PUSH
39845: LD_INT 29
39847: PUSH
39848: LD_INT 30
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: IN
39855: PUSH
39856: LD_VAR 0 3
39860: PPUSH
39861: LD_VAR 0 4
39865: PPUSH
39866: LD_VAR 0 9
39870: PPUSH
39871: CALL_OW 440
39875: NOT
39876: AND
39877: IFFALSE 39881
// exit ;
39879: GO 39889
// result := true ;
39881: LD_ADDR_VAR 0 6
39885: PUSH
39886: LD_INT 1
39888: ST_TO_ADDR
// end ;
39889: LD_VAR 0 6
39893: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39894: LD_INT 0
39896: PPUSH
39897: PPUSH
39898: PPUSH
39899: PPUSH
39900: PPUSH
39901: PPUSH
39902: PPUSH
39903: PPUSH
39904: PPUSH
39905: PPUSH
39906: PPUSH
39907: PPUSH
39908: PPUSH
39909: PPUSH
39910: PPUSH
39911: PPUSH
39912: PPUSH
39913: PPUSH
39914: PPUSH
39915: PPUSH
39916: PPUSH
39917: PPUSH
39918: PPUSH
39919: PPUSH
39920: PPUSH
39921: PPUSH
39922: PPUSH
39923: PPUSH
39924: PPUSH
39925: PPUSH
39926: PPUSH
39927: PPUSH
39928: PPUSH
39929: PPUSH
39930: PPUSH
39931: PPUSH
39932: PPUSH
39933: PPUSH
39934: PPUSH
39935: PPUSH
39936: PPUSH
39937: PPUSH
39938: PPUSH
39939: PPUSH
39940: PPUSH
39941: PPUSH
39942: PPUSH
39943: PPUSH
39944: PPUSH
39945: PPUSH
39946: PPUSH
39947: PPUSH
39948: PPUSH
39949: PPUSH
39950: PPUSH
39951: PPUSH
39952: PPUSH
39953: PPUSH
// result = [ ] ;
39954: LD_ADDR_VAR 0 7
39958: PUSH
39959: EMPTY
39960: ST_TO_ADDR
// temp_list = [ ] ;
39961: LD_ADDR_VAR 0 9
39965: PUSH
39966: EMPTY
39967: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39968: LD_VAR 0 4
39972: PUSH
39973: LD_INT 0
39975: PUSH
39976: LD_INT 1
39978: PUSH
39979: LD_INT 2
39981: PUSH
39982: LD_INT 3
39984: PUSH
39985: LD_INT 4
39987: PUSH
39988: LD_INT 5
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: IN
39999: NOT
40000: PUSH
40001: LD_VAR 0 1
40005: PUSH
40006: LD_INT 0
40008: PUSH
40009: LD_INT 1
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: IN
40016: PUSH
40017: LD_VAR 0 5
40021: PUSH
40022: LD_INT 1
40024: PUSH
40025: LD_INT 2
40027: PUSH
40028: LD_INT 3
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: LIST
40035: IN
40036: NOT
40037: AND
40038: OR
40039: IFFALSE 40043
// exit ;
40041: GO 58434
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40043: LD_VAR 0 1
40047: PUSH
40048: LD_INT 6
40050: PUSH
40051: LD_INT 7
40053: PUSH
40054: LD_INT 8
40056: PUSH
40057: LD_INT 13
40059: PUSH
40060: LD_INT 12
40062: PUSH
40063: LD_INT 15
40065: PUSH
40066: LD_INT 11
40068: PUSH
40069: LD_INT 14
40071: PUSH
40072: LD_INT 10
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: IN
40086: IFFALSE 40096
// btype = b_lab ;
40088: LD_ADDR_VAR 0 1
40092: PUSH
40093: LD_INT 6
40095: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40096: LD_VAR 0 6
40100: PUSH
40101: LD_INT 0
40103: PUSH
40104: LD_INT 1
40106: PUSH
40107: LD_INT 2
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: LIST
40114: IN
40115: NOT
40116: PUSH
40117: LD_VAR 0 1
40121: PUSH
40122: LD_INT 0
40124: PUSH
40125: LD_INT 1
40127: PUSH
40128: LD_INT 2
40130: PUSH
40131: LD_INT 3
40133: PUSH
40134: LD_INT 6
40136: PUSH
40137: LD_INT 36
40139: PUSH
40140: LD_INT 4
40142: PUSH
40143: LD_INT 5
40145: PUSH
40146: LD_INT 31
40148: PUSH
40149: LD_INT 32
40151: PUSH
40152: LD_INT 33
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: IN
40168: NOT
40169: PUSH
40170: LD_VAR 0 6
40174: PUSH
40175: LD_INT 1
40177: EQUAL
40178: AND
40179: OR
40180: PUSH
40181: LD_VAR 0 1
40185: PUSH
40186: LD_INT 2
40188: PUSH
40189: LD_INT 3
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: IN
40196: NOT
40197: PUSH
40198: LD_VAR 0 6
40202: PUSH
40203: LD_INT 2
40205: EQUAL
40206: AND
40207: OR
40208: IFFALSE 40218
// mode = 0 ;
40210: LD_ADDR_VAR 0 6
40214: PUSH
40215: LD_INT 0
40217: ST_TO_ADDR
// case mode of 0 :
40218: LD_VAR 0 6
40222: PUSH
40223: LD_INT 0
40225: DOUBLE
40226: EQUAL
40227: IFTRUE 40231
40229: GO 51684
40231: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40232: LD_ADDR_VAR 0 11
40236: PUSH
40237: LD_INT 0
40239: PUSH
40240: LD_INT 0
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 0
40249: PUSH
40250: LD_INT 1
40252: NEG
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 1
40260: PUSH
40261: LD_INT 0
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 1
40270: PUSH
40271: LD_INT 1
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 0
40280: PUSH
40281: LD_INT 1
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 1
40290: NEG
40291: PUSH
40292: LD_INT 0
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 1
40301: NEG
40302: PUSH
40303: LD_INT 1
40305: NEG
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 1
40313: NEG
40314: PUSH
40315: LD_INT 2
40317: NEG
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 0
40325: PUSH
40326: LD_INT 2
40328: NEG
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 1
40336: PUSH
40337: LD_INT 1
40339: NEG
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 1
40347: PUSH
40348: LD_INT 2
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 0
40357: PUSH
40358: LD_INT 2
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 1
40367: NEG
40368: PUSH
40369: LD_INT 1
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 1
40378: PUSH
40379: LD_INT 3
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 0
40388: PUSH
40389: LD_INT 3
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 1
40398: NEG
40399: PUSH
40400: LD_INT 2
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40425: LD_ADDR_VAR 0 12
40429: PUSH
40430: LD_INT 0
40432: PUSH
40433: LD_INT 0
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 0
40442: PUSH
40443: LD_INT 1
40445: NEG
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 1
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 1
40463: PUSH
40464: LD_INT 1
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 0
40473: PUSH
40474: LD_INT 1
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 1
40483: NEG
40484: PUSH
40485: LD_INT 0
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 1
40494: NEG
40495: PUSH
40496: LD_INT 1
40498: NEG
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 1
40506: PUSH
40507: LD_INT 1
40509: NEG
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 2
40517: PUSH
40518: LD_INT 0
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 2
40527: PUSH
40528: LD_INT 1
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 1
40537: NEG
40538: PUSH
40539: LD_INT 1
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 2
40548: NEG
40549: PUSH
40550: LD_INT 0
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 2
40559: NEG
40560: PUSH
40561: LD_INT 1
40563: NEG
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 2
40571: NEG
40572: PUSH
40573: LD_INT 1
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 3
40582: NEG
40583: PUSH
40584: LD_INT 0
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 3
40593: NEG
40594: PUSH
40595: LD_INT 1
40597: NEG
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40621: LD_ADDR_VAR 0 13
40625: PUSH
40626: LD_INT 0
40628: PUSH
40629: LD_INT 0
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 0
40638: PUSH
40639: LD_INT 1
40641: NEG
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 1
40649: PUSH
40650: LD_INT 0
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 1
40659: PUSH
40660: LD_INT 1
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 0
40669: PUSH
40670: LD_INT 1
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 1
40679: NEG
40680: PUSH
40681: LD_INT 0
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 1
40690: NEG
40691: PUSH
40692: LD_INT 1
40694: NEG
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 1
40702: NEG
40703: PUSH
40704: LD_INT 2
40706: NEG
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 2
40714: PUSH
40715: LD_INT 1
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 2
40724: PUSH
40725: LD_INT 2
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 1
40734: PUSH
40735: LD_INT 2
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 2
40744: NEG
40745: PUSH
40746: LD_INT 1
40748: NEG
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 2
40756: NEG
40757: PUSH
40758: LD_INT 2
40760: NEG
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 2
40768: NEG
40769: PUSH
40770: LD_INT 3
40772: NEG
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 3
40780: NEG
40781: PUSH
40782: LD_INT 2
40784: NEG
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 3
40792: NEG
40793: PUSH
40794: LD_INT 3
40796: NEG
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40820: LD_ADDR_VAR 0 14
40824: PUSH
40825: LD_INT 0
40827: PUSH
40828: LD_INT 0
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 0
40837: PUSH
40838: LD_INT 1
40840: NEG
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 1
40848: PUSH
40849: LD_INT 0
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 1
40858: PUSH
40859: LD_INT 1
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 0
40868: PUSH
40869: LD_INT 1
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 1
40878: NEG
40879: PUSH
40880: LD_INT 0
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 1
40889: NEG
40890: PUSH
40891: LD_INT 1
40893: NEG
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 1
40901: NEG
40902: PUSH
40903: LD_INT 2
40905: NEG
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 0
40913: PUSH
40914: LD_INT 2
40916: NEG
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 1
40924: PUSH
40925: LD_INT 1
40927: NEG
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 1
40935: PUSH
40936: LD_INT 2
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 0
40945: PUSH
40946: LD_INT 2
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 1
40955: NEG
40956: PUSH
40957: LD_INT 1
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: LD_INT 1
40966: NEG
40967: PUSH
40968: LD_INT 3
40970: NEG
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 0
40978: PUSH
40979: LD_INT 3
40981: NEG
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 1
40989: PUSH
40990: LD_INT 2
40992: NEG
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41016: LD_ADDR_VAR 0 15
41020: PUSH
41021: LD_INT 0
41023: PUSH
41024: LD_INT 0
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 0
41033: PUSH
41034: LD_INT 1
41036: NEG
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 1
41044: PUSH
41045: LD_INT 0
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 1
41054: PUSH
41055: LD_INT 1
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 0
41064: PUSH
41065: LD_INT 1
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 1
41074: NEG
41075: PUSH
41076: LD_INT 0
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 1
41085: NEG
41086: PUSH
41087: LD_INT 1
41089: NEG
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 1
41097: PUSH
41098: LD_INT 1
41100: NEG
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 2
41108: PUSH
41109: LD_INT 0
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 2
41118: PUSH
41119: LD_INT 1
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 1
41128: NEG
41129: PUSH
41130: LD_INT 1
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 2
41139: NEG
41140: PUSH
41141: LD_INT 0
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 2
41150: NEG
41151: PUSH
41152: LD_INT 1
41154: NEG
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 2
41162: PUSH
41163: LD_INT 1
41165: NEG
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 3
41173: PUSH
41174: LD_INT 0
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 3
41183: PUSH
41184: LD_INT 1
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41209: LD_ADDR_VAR 0 16
41213: PUSH
41214: LD_INT 0
41216: PUSH
41217: LD_INT 0
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 0
41226: PUSH
41227: LD_INT 1
41229: NEG
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 1
41237: PUSH
41238: LD_INT 0
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 1
41247: PUSH
41248: LD_INT 1
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 0
41257: PUSH
41258: LD_INT 1
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 1
41267: NEG
41268: PUSH
41269: LD_INT 0
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 1
41278: NEG
41279: PUSH
41280: LD_INT 1
41282: NEG
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 1
41290: NEG
41291: PUSH
41292: LD_INT 2
41294: NEG
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 2
41302: PUSH
41303: LD_INT 1
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 2
41312: PUSH
41313: LD_INT 2
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 1
41322: PUSH
41323: LD_INT 2
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 2
41332: NEG
41333: PUSH
41334: LD_INT 1
41336: NEG
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 2
41344: NEG
41345: PUSH
41346: LD_INT 2
41348: NEG
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 3
41356: PUSH
41357: LD_INT 2
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 3
41366: PUSH
41367: LD_INT 3
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 2
41376: PUSH
41377: LD_INT 3
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41402: LD_ADDR_VAR 0 17
41406: PUSH
41407: LD_INT 0
41409: PUSH
41410: LD_INT 0
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 0
41419: PUSH
41420: LD_INT 1
41422: NEG
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 1
41430: PUSH
41431: LD_INT 0
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 1
41440: PUSH
41441: LD_INT 1
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 0
41450: PUSH
41451: LD_INT 1
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 1
41460: NEG
41461: PUSH
41462: LD_INT 0
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 1
41471: NEG
41472: PUSH
41473: LD_INT 1
41475: NEG
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 1
41483: NEG
41484: PUSH
41485: LD_INT 2
41487: NEG
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 0
41495: PUSH
41496: LD_INT 2
41498: NEG
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 1
41506: PUSH
41507: LD_INT 1
41509: NEG
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 2
41517: PUSH
41518: LD_INT 0
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 2
41527: PUSH
41528: LD_INT 1
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 2
41537: PUSH
41538: LD_INT 2
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 1
41547: PUSH
41548: LD_INT 2
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 0
41557: PUSH
41558: LD_INT 2
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 1
41567: NEG
41568: PUSH
41569: LD_INT 1
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 2
41578: NEG
41579: PUSH
41580: LD_INT 0
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 2
41589: NEG
41590: PUSH
41591: LD_INT 1
41593: NEG
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 2
41601: NEG
41602: PUSH
41603: LD_INT 2
41605: NEG
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41632: LD_ADDR_VAR 0 18
41636: PUSH
41637: LD_INT 0
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 0
41649: PUSH
41650: LD_INT 1
41652: NEG
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 1
41660: PUSH
41661: LD_INT 0
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 1
41670: PUSH
41671: LD_INT 1
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 0
41680: PUSH
41681: LD_INT 1
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 1
41690: NEG
41691: PUSH
41692: LD_INT 0
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 1
41701: NEG
41702: PUSH
41703: LD_INT 1
41705: NEG
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 1
41713: NEG
41714: PUSH
41715: LD_INT 2
41717: NEG
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 0
41725: PUSH
41726: LD_INT 2
41728: NEG
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 1
41736: PUSH
41737: LD_INT 1
41739: NEG
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 2
41747: PUSH
41748: LD_INT 0
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 2
41757: PUSH
41758: LD_INT 1
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 2
41767: PUSH
41768: LD_INT 2
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 1
41777: PUSH
41778: LD_INT 2
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 0
41787: PUSH
41788: LD_INT 2
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 1
41797: NEG
41798: PUSH
41799: LD_INT 1
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 2
41808: NEG
41809: PUSH
41810: LD_INT 0
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 2
41819: NEG
41820: PUSH
41821: LD_INT 1
41823: NEG
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 2
41831: NEG
41832: PUSH
41833: LD_INT 2
41835: NEG
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41862: LD_ADDR_VAR 0 19
41866: PUSH
41867: LD_INT 0
41869: PUSH
41870: LD_INT 0
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 0
41879: PUSH
41880: LD_INT 1
41882: NEG
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 1
41890: PUSH
41891: LD_INT 0
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 1
41900: PUSH
41901: LD_INT 1
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 0
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: PUSH
41922: LD_INT 0
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 1
41931: NEG
41932: PUSH
41933: LD_INT 1
41935: NEG
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 1
41943: NEG
41944: PUSH
41945: LD_INT 2
41947: NEG
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 0
41955: PUSH
41956: LD_INT 2
41958: NEG
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 1
41966: PUSH
41967: LD_INT 1
41969: NEG
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 2
41977: PUSH
41978: LD_INT 0
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 2
41987: PUSH
41988: LD_INT 1
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 2
41997: PUSH
41998: LD_INT 2
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 1
42007: PUSH
42008: LD_INT 2
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 0
42017: PUSH
42018: LD_INT 2
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 1
42027: NEG
42028: PUSH
42029: LD_INT 1
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 2
42038: NEG
42039: PUSH
42040: LD_INT 0
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 2
42049: NEG
42050: PUSH
42051: LD_INT 1
42053: NEG
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 2
42061: NEG
42062: PUSH
42063: LD_INT 2
42065: NEG
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42092: LD_ADDR_VAR 0 20
42096: PUSH
42097: LD_INT 0
42099: PUSH
42100: LD_INT 0
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 0
42109: PUSH
42110: LD_INT 1
42112: NEG
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 1
42120: PUSH
42121: LD_INT 0
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 1
42130: PUSH
42131: LD_INT 1
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 0
42140: PUSH
42141: LD_INT 1
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 1
42150: NEG
42151: PUSH
42152: LD_INT 0
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 1
42161: NEG
42162: PUSH
42163: LD_INT 1
42165: NEG
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 1
42173: NEG
42174: PUSH
42175: LD_INT 2
42177: NEG
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 0
42185: PUSH
42186: LD_INT 2
42188: NEG
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 1
42196: PUSH
42197: LD_INT 1
42199: NEG
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 2
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 2
42217: PUSH
42218: LD_INT 1
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 2
42227: PUSH
42228: LD_INT 2
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 1
42237: PUSH
42238: LD_INT 2
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 0
42247: PUSH
42248: LD_INT 2
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 1
42257: NEG
42258: PUSH
42259: LD_INT 1
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 2
42268: NEG
42269: PUSH
42270: LD_INT 0
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 2
42279: NEG
42280: PUSH
42281: LD_INT 1
42283: NEG
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 2
42291: NEG
42292: PUSH
42293: LD_INT 2
42295: NEG
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42322: LD_ADDR_VAR 0 21
42326: PUSH
42327: LD_INT 0
42329: PUSH
42330: LD_INT 0
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 0
42339: PUSH
42340: LD_INT 1
42342: NEG
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 1
42350: PUSH
42351: LD_INT 0
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 1
42360: PUSH
42361: LD_INT 1
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 0
42370: PUSH
42371: LD_INT 1
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 1
42380: NEG
42381: PUSH
42382: LD_INT 0
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 1
42391: NEG
42392: PUSH
42393: LD_INT 1
42395: NEG
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 1
42403: NEG
42404: PUSH
42405: LD_INT 2
42407: NEG
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 0
42415: PUSH
42416: LD_INT 2
42418: NEG
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 1
42426: PUSH
42427: LD_INT 1
42429: NEG
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 2
42437: PUSH
42438: LD_INT 0
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 2
42447: PUSH
42448: LD_INT 1
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 2
42457: PUSH
42458: LD_INT 2
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 1
42467: PUSH
42468: LD_INT 2
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 0
42477: PUSH
42478: LD_INT 2
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 1
42487: NEG
42488: PUSH
42489: LD_INT 1
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 2
42498: NEG
42499: PUSH
42500: LD_INT 0
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 2
42509: NEG
42510: PUSH
42511: LD_INT 1
42513: NEG
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 2
42521: NEG
42522: PUSH
42523: LD_INT 2
42525: NEG
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42552: LD_ADDR_VAR 0 22
42556: PUSH
42557: LD_INT 0
42559: PUSH
42560: LD_INT 0
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 0
42569: PUSH
42570: LD_INT 1
42572: NEG
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 1
42580: PUSH
42581: LD_INT 0
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: LD_INT 1
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 0
42600: PUSH
42601: LD_INT 1
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 1
42610: NEG
42611: PUSH
42612: LD_INT 0
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 1
42621: NEG
42622: PUSH
42623: LD_INT 1
42625: NEG
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 1
42633: NEG
42634: PUSH
42635: LD_INT 2
42637: NEG
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 0
42645: PUSH
42646: LD_INT 2
42648: NEG
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 1
42656: PUSH
42657: LD_INT 1
42659: NEG
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 2
42667: PUSH
42668: LD_INT 0
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 2
42677: PUSH
42678: LD_INT 1
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 2
42687: PUSH
42688: LD_INT 2
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 1
42697: PUSH
42698: LD_INT 2
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 0
42707: PUSH
42708: LD_INT 2
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 1
42717: NEG
42718: PUSH
42719: LD_INT 1
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 2
42728: NEG
42729: PUSH
42730: LD_INT 0
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 2
42739: NEG
42740: PUSH
42741: LD_INT 1
42743: NEG
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 2
42751: NEG
42752: PUSH
42753: LD_INT 2
42755: NEG
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42782: LD_ADDR_VAR 0 23
42786: PUSH
42787: LD_INT 0
42789: PUSH
42790: LD_INT 0
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 0
42799: PUSH
42800: LD_INT 1
42802: NEG
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 1
42810: PUSH
42811: LD_INT 0
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 1
42820: PUSH
42821: LD_INT 1
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 0
42830: PUSH
42831: LD_INT 1
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 1
42840: NEG
42841: PUSH
42842: LD_INT 0
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 1
42851: NEG
42852: PUSH
42853: LD_INT 1
42855: NEG
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 1
42863: NEG
42864: PUSH
42865: LD_INT 2
42867: NEG
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 0
42875: PUSH
42876: LD_INT 2
42878: NEG
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 1
42886: PUSH
42887: LD_INT 1
42889: NEG
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 2
42897: PUSH
42898: LD_INT 0
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 2
42907: PUSH
42908: LD_INT 1
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 2
42917: PUSH
42918: LD_INT 2
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 1
42927: PUSH
42928: LD_INT 2
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: LD_INT 2
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 1
42947: NEG
42948: PUSH
42949: LD_INT 1
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 2
42958: NEG
42959: PUSH
42960: LD_INT 0
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 2
42969: NEG
42970: PUSH
42971: LD_INT 1
42973: NEG
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 2
42981: NEG
42982: PUSH
42983: LD_INT 2
42985: NEG
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 2
42993: NEG
42994: PUSH
42995: LD_INT 3
42997: NEG
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 1
43005: NEG
43006: PUSH
43007: LD_INT 3
43009: NEG
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 1
43017: PUSH
43018: LD_INT 2
43020: NEG
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 2
43028: PUSH
43029: LD_INT 1
43031: NEG
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43062: LD_ADDR_VAR 0 24
43066: PUSH
43067: LD_INT 0
43069: PUSH
43070: LD_INT 0
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 0
43079: PUSH
43080: LD_INT 1
43082: NEG
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 1
43090: PUSH
43091: LD_INT 0
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 1
43100: PUSH
43101: LD_INT 1
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 0
43110: PUSH
43111: LD_INT 1
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 1
43120: NEG
43121: PUSH
43122: LD_INT 0
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 1
43131: NEG
43132: PUSH
43133: LD_INT 1
43135: NEG
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 1
43143: NEG
43144: PUSH
43145: LD_INT 2
43147: NEG
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 0
43155: PUSH
43156: LD_INT 2
43158: NEG
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 1
43166: PUSH
43167: LD_INT 1
43169: NEG
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 2
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 2
43187: PUSH
43188: LD_INT 1
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 2
43197: PUSH
43198: LD_INT 2
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 1
43207: PUSH
43208: LD_INT 2
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 0
43217: PUSH
43218: LD_INT 2
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 1
43227: NEG
43228: PUSH
43229: LD_INT 1
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 2
43238: NEG
43239: PUSH
43240: LD_INT 0
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 2
43249: NEG
43250: PUSH
43251: LD_INT 1
43253: NEG
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 2
43261: NEG
43262: PUSH
43263: LD_INT 2
43265: NEG
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 1
43273: PUSH
43274: LD_INT 2
43276: NEG
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 2
43284: PUSH
43285: LD_INT 1
43287: NEG
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 3
43295: PUSH
43296: LD_INT 1
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 3
43305: PUSH
43306: LD_INT 2
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43338: LD_ADDR_VAR 0 25
43342: PUSH
43343: LD_INT 0
43345: PUSH
43346: LD_INT 0
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 0
43355: PUSH
43356: LD_INT 1
43358: NEG
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 1
43366: PUSH
43367: LD_INT 0
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 1
43376: PUSH
43377: LD_INT 1
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 0
43386: PUSH
43387: LD_INT 1
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 1
43396: NEG
43397: PUSH
43398: LD_INT 0
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 1
43407: NEG
43408: PUSH
43409: LD_INT 1
43411: NEG
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 1
43419: NEG
43420: PUSH
43421: LD_INT 2
43423: NEG
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 0
43431: PUSH
43432: LD_INT 2
43434: NEG
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 1
43442: PUSH
43443: LD_INT 1
43445: NEG
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 2
43453: PUSH
43454: LD_INT 0
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 2
43463: PUSH
43464: LD_INT 1
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 2
43473: PUSH
43474: LD_INT 2
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 1
43483: PUSH
43484: LD_INT 2
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 0
43493: PUSH
43494: LD_INT 2
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 1
43503: NEG
43504: PUSH
43505: LD_INT 1
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 2
43514: NEG
43515: PUSH
43516: LD_INT 0
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 2
43525: NEG
43526: PUSH
43527: LD_INT 1
43529: NEG
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 2
43537: NEG
43538: PUSH
43539: LD_INT 2
43541: NEG
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 3
43549: PUSH
43550: LD_INT 1
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 3
43559: PUSH
43560: LD_INT 2
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 2
43569: PUSH
43570: LD_INT 3
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 1
43579: PUSH
43580: LD_INT 3
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43612: LD_ADDR_VAR 0 26
43616: PUSH
43617: LD_INT 0
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 0
43629: PUSH
43630: LD_INT 1
43632: NEG
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 1
43640: PUSH
43641: LD_INT 0
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 1
43650: PUSH
43651: LD_INT 1
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 0
43660: PUSH
43661: LD_INT 1
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 1
43670: NEG
43671: PUSH
43672: LD_INT 0
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 1
43681: NEG
43682: PUSH
43683: LD_INT 1
43685: NEG
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 1
43693: NEG
43694: PUSH
43695: LD_INT 2
43697: NEG
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 0
43705: PUSH
43706: LD_INT 2
43708: NEG
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 1
43716: PUSH
43717: LD_INT 1
43719: NEG
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 2
43727: PUSH
43728: LD_INT 0
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 2
43737: PUSH
43738: LD_INT 1
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 2
43747: PUSH
43748: LD_INT 2
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 1
43757: PUSH
43758: LD_INT 2
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 0
43767: PUSH
43768: LD_INT 2
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 1
43777: NEG
43778: PUSH
43779: LD_INT 1
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 2
43788: NEG
43789: PUSH
43790: LD_INT 0
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 2
43799: NEG
43800: PUSH
43801: LD_INT 1
43803: NEG
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 2
43811: NEG
43812: PUSH
43813: LD_INT 2
43815: NEG
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 2
43823: PUSH
43824: LD_INT 3
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 1
43833: PUSH
43834: LD_INT 3
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 1
43843: NEG
43844: PUSH
43845: LD_INT 2
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 2
43854: NEG
43855: PUSH
43856: LD_INT 1
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43888: LD_ADDR_VAR 0 27
43892: PUSH
43893: LD_INT 0
43895: PUSH
43896: LD_INT 0
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: LD_INT 1
43908: NEG
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: PUSH
43917: LD_INT 0
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 1
43926: PUSH
43927: LD_INT 1
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 0
43936: PUSH
43937: LD_INT 1
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 1
43946: NEG
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 1
43957: NEG
43958: PUSH
43959: LD_INT 1
43961: NEG
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 1
43969: NEG
43970: PUSH
43971: LD_INT 2
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: LD_INT 2
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: LD_INT 1
43995: NEG
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 2
44003: PUSH
44004: LD_INT 0
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 2
44013: PUSH
44014: LD_INT 1
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 2
44023: PUSH
44024: LD_INT 2
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 1
44033: PUSH
44034: LD_INT 2
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 0
44043: PUSH
44044: LD_INT 2
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 1
44053: NEG
44054: PUSH
44055: LD_INT 1
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 2
44064: NEG
44065: PUSH
44066: LD_INT 0
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 2
44075: NEG
44076: PUSH
44077: LD_INT 1
44079: NEG
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 2
44087: NEG
44088: PUSH
44089: LD_INT 2
44091: NEG
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: LD_INT 2
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 2
44110: NEG
44111: PUSH
44112: LD_INT 1
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 3
44121: NEG
44122: PUSH
44123: LD_INT 1
44125: NEG
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 3
44133: NEG
44134: PUSH
44135: LD_INT 2
44137: NEG
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44168: LD_ADDR_VAR 0 28
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: LD_INT 0
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 0
44185: PUSH
44186: LD_INT 1
44188: NEG
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 1
44196: PUSH
44197: LD_INT 0
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 1
44206: PUSH
44207: LD_INT 1
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 0
44216: PUSH
44217: LD_INT 1
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 1
44226: NEG
44227: PUSH
44228: LD_INT 0
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 1
44237: NEG
44238: PUSH
44239: LD_INT 1
44241: NEG
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 1
44249: NEG
44250: PUSH
44251: LD_INT 2
44253: NEG
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 0
44261: PUSH
44262: LD_INT 2
44264: NEG
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 1
44272: PUSH
44273: LD_INT 1
44275: NEG
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 2
44283: PUSH
44284: LD_INT 0
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 2
44293: PUSH
44294: LD_INT 1
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 2
44303: PUSH
44304: LD_INT 2
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 1
44313: PUSH
44314: LD_INT 2
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: LD_INT 2
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 1
44333: NEG
44334: PUSH
44335: LD_INT 1
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 2
44344: NEG
44345: PUSH
44346: LD_INT 0
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 2
44355: NEG
44356: PUSH
44357: LD_INT 1
44359: NEG
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 2
44367: NEG
44368: PUSH
44369: LD_INT 2
44371: NEG
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 2
44379: NEG
44380: PUSH
44381: LD_INT 3
44383: NEG
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 1
44391: NEG
44392: PUSH
44393: LD_INT 3
44395: NEG
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 3
44403: NEG
44404: PUSH
44405: LD_INT 1
44407: NEG
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 3
44415: NEG
44416: PUSH
44417: LD_INT 2
44419: NEG
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44450: LD_ADDR_VAR 0 29
44454: PUSH
44455: LD_INT 0
44457: PUSH
44458: LD_INT 0
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 0
44467: PUSH
44468: LD_INT 1
44470: NEG
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: LD_INT 0
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 1
44488: PUSH
44489: LD_INT 1
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 0
44498: PUSH
44499: LD_INT 1
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 1
44508: NEG
44509: PUSH
44510: LD_INT 0
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 1
44519: NEG
44520: PUSH
44521: LD_INT 1
44523: NEG
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 1
44531: NEG
44532: PUSH
44533: LD_INT 2
44535: NEG
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 0
44543: PUSH
44544: LD_INT 2
44546: NEG
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 1
44554: PUSH
44555: LD_INT 1
44557: NEG
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 2
44565: PUSH
44566: LD_INT 0
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 2
44575: PUSH
44576: LD_INT 1
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 1
44585: PUSH
44586: LD_INT 2
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 0
44595: PUSH
44596: LD_INT 2
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 1
44605: NEG
44606: PUSH
44607: LD_INT 1
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 2
44616: NEG
44617: PUSH
44618: LD_INT 1
44620: NEG
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 2
44628: NEG
44629: PUSH
44630: LD_INT 2
44632: NEG
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 2
44640: NEG
44641: PUSH
44642: LD_INT 3
44644: NEG
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 2
44652: PUSH
44653: LD_INT 1
44655: NEG
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 3
44663: PUSH
44664: LD_INT 1
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: LD_INT 3
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 1
44683: NEG
44684: PUSH
44685: LD_INT 2
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 3
44694: NEG
44695: PUSH
44696: LD_INT 2
44698: NEG
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44729: LD_ADDR_VAR 0 30
44733: PUSH
44734: LD_INT 0
44736: PUSH
44737: LD_INT 0
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 0
44746: PUSH
44747: LD_INT 1
44749: NEG
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 1
44757: PUSH
44758: LD_INT 0
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 1
44767: PUSH
44768: LD_INT 1
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 0
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 1
44787: NEG
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 1
44798: NEG
44799: PUSH
44800: LD_INT 1
44802: NEG
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 1
44810: NEG
44811: PUSH
44812: LD_INT 2
44814: NEG
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 0
44822: PUSH
44823: LD_INT 2
44825: NEG
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 1
44833: PUSH
44834: LD_INT 1
44836: NEG
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 2
44844: PUSH
44845: LD_INT 0
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 2
44854: PUSH
44855: LD_INT 1
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 2
44864: PUSH
44865: LD_INT 2
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 1
44874: PUSH
44875: LD_INT 2
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 1
44884: NEG
44885: PUSH
44886: LD_INT 1
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 2
44895: NEG
44896: PUSH
44897: LD_INT 0
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 2
44906: NEG
44907: PUSH
44908: LD_INT 1
44910: NEG
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 1
44918: NEG
44919: PUSH
44920: LD_INT 3
44922: NEG
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 1
44930: PUSH
44931: LD_INT 2
44933: NEG
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 3
44941: PUSH
44942: LD_INT 2
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 2
44951: PUSH
44952: LD_INT 3
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 2
44961: NEG
44962: PUSH
44963: LD_INT 1
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 3
44972: NEG
44973: PUSH
44974: LD_INT 1
44976: NEG
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45007: LD_ADDR_VAR 0 31
45011: PUSH
45012: LD_INT 0
45014: PUSH
45015: LD_INT 0
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: LD_INT 1
45027: NEG
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: LD_INT 0
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 1
45045: PUSH
45046: LD_INT 1
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 0
45055: PUSH
45056: LD_INT 1
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 1
45065: NEG
45066: PUSH
45067: LD_INT 0
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 1
45076: NEG
45077: PUSH
45078: LD_INT 1
45080: NEG
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 1
45088: NEG
45089: PUSH
45090: LD_INT 2
45092: NEG
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 1
45100: PUSH
45101: LD_INT 1
45103: NEG
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 2
45111: PUSH
45112: LD_INT 0
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 2
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 2
45131: PUSH
45132: LD_INT 2
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 1
45141: PUSH
45142: LD_INT 2
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 0
45151: PUSH
45152: LD_INT 2
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 1
45161: NEG
45162: PUSH
45163: LD_INT 1
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 2
45172: NEG
45173: PUSH
45174: LD_INT 1
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 2
45184: NEG
45185: PUSH
45186: LD_INT 2
45188: NEG
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 2
45196: NEG
45197: PUSH
45198: LD_INT 3
45200: NEG
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 2
45208: PUSH
45209: LD_INT 1
45211: NEG
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 3
45219: PUSH
45220: LD_INT 1
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: LD_INT 3
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 1
45239: NEG
45240: PUSH
45241: LD_INT 2
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 3
45250: NEG
45251: PUSH
45252: LD_INT 2
45254: NEG
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45285: LD_ADDR_VAR 0 32
45289: PUSH
45290: LD_INT 0
45292: PUSH
45293: LD_INT 0
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 0
45302: PUSH
45303: LD_INT 1
45305: NEG
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 1
45313: PUSH
45314: LD_INT 0
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 1
45323: PUSH
45324: LD_INT 1
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 0
45333: PUSH
45334: LD_INT 1
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 1
45343: NEG
45344: PUSH
45345: LD_INT 0
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 1
45354: NEG
45355: PUSH
45356: LD_INT 1
45358: NEG
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: LD_INT 2
45370: NEG
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 0
45378: PUSH
45379: LD_INT 2
45381: NEG
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: LD_INT 1
45392: NEG
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 2
45400: PUSH
45401: LD_INT 1
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 2
45410: PUSH
45411: LD_INT 2
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 1
45420: PUSH
45421: LD_INT 2
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 0
45430: PUSH
45431: LD_INT 2
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 1
45440: NEG
45441: PUSH
45442: LD_INT 1
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 2
45451: NEG
45452: PUSH
45453: LD_INT 0
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 2
45462: NEG
45463: PUSH
45464: LD_INT 1
45466: NEG
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 1
45474: NEG
45475: PUSH
45476: LD_INT 3
45478: NEG
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 1
45486: PUSH
45487: LD_INT 2
45489: NEG
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 3
45497: PUSH
45498: LD_INT 2
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 2
45507: PUSH
45508: LD_INT 3
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 2
45517: NEG
45518: PUSH
45519: LD_INT 1
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 3
45528: NEG
45529: PUSH
45530: LD_INT 1
45532: NEG
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45563: LD_ADDR_VAR 0 33
45567: PUSH
45568: LD_INT 0
45570: PUSH
45571: LD_INT 0
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: LD_INT 1
45583: NEG
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 1
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 1
45601: PUSH
45602: LD_INT 1
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: LD_INT 1
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 1
45621: NEG
45622: PUSH
45623: LD_INT 0
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 1
45632: NEG
45633: PUSH
45634: LD_INT 1
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: NEG
45645: PUSH
45646: LD_INT 2
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: LD_INT 1
45659: NEG
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 2
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 2
45677: PUSH
45678: LD_INT 1
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: LD_INT 2
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: LD_INT 2
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 1
45707: NEG
45708: PUSH
45709: LD_INT 1
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 2
45718: NEG
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 2
45729: NEG
45730: PUSH
45731: LD_INT 1
45733: NEG
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 2
45741: NEG
45742: PUSH
45743: LD_INT 2
45745: NEG
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 2
45753: NEG
45754: PUSH
45755: LD_INT 3
45757: NEG
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 2
45765: PUSH
45766: LD_INT 1
45768: NEG
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 3
45776: PUSH
45777: LD_INT 1
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 1
45786: PUSH
45787: LD_INT 3
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: LD_INT 2
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 3
45807: NEG
45808: PUSH
45809: LD_INT 2
45811: NEG
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45842: LD_ADDR_VAR 0 34
45846: PUSH
45847: LD_INT 0
45849: PUSH
45850: LD_INT 0
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 0
45859: PUSH
45860: LD_INT 1
45862: NEG
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 1
45870: PUSH
45871: LD_INT 0
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 1
45880: PUSH
45881: LD_INT 1
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 0
45890: PUSH
45891: LD_INT 1
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 1
45900: NEG
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 1
45911: NEG
45912: PUSH
45913: LD_INT 1
45915: NEG
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 1
45923: NEG
45924: PUSH
45925: LD_INT 2
45927: NEG
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: LD_INT 2
45938: NEG
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 1
45946: PUSH
45947: LD_INT 1
45949: NEG
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 2
45957: PUSH
45958: LD_INT 1
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 2
45967: PUSH
45968: LD_INT 2
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 1
45977: PUSH
45978: LD_INT 2
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 1
45987: NEG
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 2
45998: NEG
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 2
46009: NEG
46010: PUSH
46011: LD_INT 1
46013: NEG
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 2
46021: NEG
46022: PUSH
46023: LD_INT 2
46025: NEG
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 1
46033: NEG
46034: PUSH
46035: LD_INT 3
46037: NEG
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 1
46045: PUSH
46046: LD_INT 2
46048: NEG
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 3
46056: PUSH
46057: LD_INT 2
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 2
46066: PUSH
46067: LD_INT 3
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 2
46076: NEG
46077: PUSH
46078: LD_INT 1
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 3
46087: NEG
46088: PUSH
46089: LD_INT 1
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46122: LD_ADDR_VAR 0 35
46126: PUSH
46127: LD_INT 0
46129: PUSH
46130: LD_INT 0
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 0
46139: PUSH
46140: LD_INT 1
46142: NEG
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: LD_INT 0
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 1
46160: PUSH
46161: LD_INT 1
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 0
46170: PUSH
46171: LD_INT 1
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 1
46180: NEG
46181: PUSH
46182: LD_INT 0
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 1
46191: NEG
46192: PUSH
46193: LD_INT 1
46195: NEG
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 2
46203: PUSH
46204: LD_INT 1
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 2
46213: NEG
46214: PUSH
46215: LD_INT 1
46217: NEG
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46234: LD_ADDR_VAR 0 36
46238: PUSH
46239: LD_INT 0
46241: PUSH
46242: LD_INT 0
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: LD_INT 1
46254: NEG
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 1
46262: PUSH
46263: LD_INT 0
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 1
46272: PUSH
46273: LD_INT 1
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: LD_INT 1
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 1
46292: NEG
46293: PUSH
46294: LD_INT 0
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 1
46303: NEG
46304: PUSH
46305: LD_INT 1
46307: NEG
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 1
46315: NEG
46316: PUSH
46317: LD_INT 2
46319: NEG
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 1
46327: PUSH
46328: LD_INT 2
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46346: LD_ADDR_VAR 0 37
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: LD_INT 0
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 0
46363: PUSH
46364: LD_INT 1
46366: NEG
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: LD_INT 0
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 1
46384: PUSH
46385: LD_INT 1
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 0
46394: PUSH
46395: LD_INT 1
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 1
46404: NEG
46405: PUSH
46406: LD_INT 0
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: LD_INT 1
46419: NEG
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 1
46427: PUSH
46428: LD_INT 1
46430: NEG
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 1
46438: NEG
46439: PUSH
46440: LD_INT 1
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46458: LD_ADDR_VAR 0 38
46462: PUSH
46463: LD_INT 0
46465: PUSH
46466: LD_INT 0
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: LD_INT 1
46478: NEG
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: LD_INT 0
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 1
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: LD_INT 1
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 1
46516: NEG
46517: PUSH
46518: LD_INT 0
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: LD_INT 1
46531: NEG
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 2
46539: PUSH
46540: LD_INT 1
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 2
46549: NEG
46550: PUSH
46551: LD_INT 1
46553: NEG
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46570: LD_ADDR_VAR 0 39
46574: PUSH
46575: LD_INT 0
46577: PUSH
46578: LD_INT 0
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: LD_INT 1
46590: NEG
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 1
46598: PUSH
46599: LD_INT 0
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 1
46608: PUSH
46609: LD_INT 1
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 0
46618: PUSH
46619: LD_INT 1
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 1
46628: NEG
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: LD_INT 1
46643: NEG
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 1
46651: NEG
46652: PUSH
46653: LD_INT 2
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: LD_INT 2
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46682: LD_ADDR_VAR 0 40
46686: PUSH
46687: LD_INT 0
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: LD_INT 1
46702: NEG
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 1
46720: PUSH
46721: LD_INT 1
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: LD_INT 1
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 1
46740: NEG
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 1
46751: NEG
46752: PUSH
46753: LD_INT 1
46755: NEG
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 1
46763: PUSH
46764: LD_INT 1
46766: NEG
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 1
46774: NEG
46775: PUSH
46776: LD_INT 1
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46794: LD_ADDR_VAR 0 41
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: LD_INT 0
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 0
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: LD_INT 1
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 0
46842: PUSH
46843: LD_INT 1
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: LD_INT 0
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: LD_INT 1
46867: NEG
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 1
46875: NEG
46876: PUSH
46877: LD_INT 2
46879: NEG
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 1
46887: PUSH
46888: LD_INT 1
46890: NEG
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 2
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 2
46908: PUSH
46909: LD_INT 1
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 2
46918: PUSH
46919: LD_INT 2
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 1
46928: PUSH
46929: LD_INT 2
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 1
46938: NEG
46939: PUSH
46940: LD_INT 1
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 2
46949: NEG
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 2
46960: NEG
46961: PUSH
46962: LD_INT 1
46964: NEG
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 2
46972: NEG
46973: PUSH
46974: LD_INT 2
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 2
46984: NEG
46985: PUSH
46986: LD_INT 3
46988: NEG
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 2
46996: PUSH
46997: LD_INT 1
46999: NEG
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 3
47007: PUSH
47008: LD_INT 0
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 3
47017: PUSH
47018: LD_INT 1
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 3
47027: PUSH
47028: LD_INT 2
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 3
47037: PUSH
47038: LD_INT 3
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 2
47047: PUSH
47048: LD_INT 3
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 2
47057: NEG
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 3
47068: NEG
47069: PUSH
47070: LD_INT 0
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 3
47079: NEG
47080: PUSH
47081: LD_INT 1
47083: NEG
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 3
47091: NEG
47092: PUSH
47093: LD_INT 2
47095: NEG
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 3
47103: NEG
47104: PUSH
47105: LD_INT 3
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47144: LD_ADDR_VAR 0 42
47148: PUSH
47149: LD_INT 0
47151: PUSH
47152: LD_INT 0
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: LD_INT 1
47164: NEG
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 1
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 1
47182: PUSH
47183: LD_INT 1
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: LD_INT 1
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 1
47202: NEG
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: LD_INT 1
47217: NEG
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 1
47225: NEG
47226: PUSH
47227: LD_INT 2
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: LD_INT 2
47240: NEG
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 1
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 2
47259: PUSH
47260: LD_INT 1
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 2
47269: PUSH
47270: LD_INT 2
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 1
47279: PUSH
47280: LD_INT 2
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: LD_INT 2
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 1
47299: NEG
47300: PUSH
47301: LD_INT 1
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 2
47310: NEG
47311: PUSH
47312: LD_INT 1
47314: NEG
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 2
47322: NEG
47323: PUSH
47324: LD_INT 2
47326: NEG
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 2
47334: NEG
47335: PUSH
47336: LD_INT 3
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: LD_INT 3
47350: NEG
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 0
47358: PUSH
47359: LD_INT 3
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 1
47369: PUSH
47370: LD_INT 2
47372: NEG
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 3
47380: PUSH
47381: LD_INT 2
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 3
47390: PUSH
47391: LD_INT 3
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 2
47400: PUSH
47401: LD_INT 3
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 1
47410: PUSH
47411: LD_INT 3
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 0
47420: PUSH
47421: LD_INT 3
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 1
47430: NEG
47431: PUSH
47432: LD_INT 2
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 3
47441: NEG
47442: PUSH
47443: LD_INT 2
47445: NEG
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 3
47453: NEG
47454: PUSH
47455: LD_INT 3
47457: NEG
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47494: LD_ADDR_VAR 0 43
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: LD_INT 0
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 0
47511: PUSH
47512: LD_INT 1
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 1
47522: PUSH
47523: LD_INT 0
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: LD_INT 1
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 0
47542: PUSH
47543: LD_INT 1
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 1
47552: NEG
47553: PUSH
47554: LD_INT 0
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 1
47575: NEG
47576: PUSH
47577: LD_INT 2
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 0
47587: PUSH
47588: LD_INT 2
47590: NEG
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 1
47598: PUSH
47599: LD_INT 1
47601: NEG
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 2
47609: PUSH
47610: LD_INT 0
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 2
47619: PUSH
47620: LD_INT 1
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 1
47629: PUSH
47630: LD_INT 2
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: LD_INT 2
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 1
47649: NEG
47650: PUSH
47651: LD_INT 1
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 2
47660: NEG
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 2
47671: NEG
47672: PUSH
47673: LD_INT 1
47675: NEG
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 1
47683: NEG
47684: PUSH
47685: LD_INT 3
47687: NEG
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 0
47695: PUSH
47696: LD_INT 3
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 1
47706: PUSH
47707: LD_INT 2
47709: NEG
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 2
47717: PUSH
47718: LD_INT 1
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 3
47728: PUSH
47729: LD_INT 0
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 3
47738: PUSH
47739: LD_INT 1
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 1
47748: PUSH
47749: LD_INT 3
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 0
47758: PUSH
47759: LD_INT 3
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 1
47768: NEG
47769: PUSH
47770: LD_INT 2
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 2
47779: NEG
47780: PUSH
47781: LD_INT 1
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 3
47790: NEG
47791: PUSH
47792: LD_INT 0
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 3
47801: NEG
47802: PUSH
47803: LD_INT 1
47805: NEG
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47842: LD_ADDR_VAR 0 44
47846: PUSH
47847: LD_INT 0
47849: PUSH
47850: LD_INT 0
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 0
47859: PUSH
47860: LD_INT 1
47862: NEG
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 1
47870: PUSH
47871: LD_INT 0
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: LD_INT 1
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 0
47890: PUSH
47891: LD_INT 1
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 1
47900: NEG
47901: PUSH
47902: LD_INT 0
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 1
47911: NEG
47912: PUSH
47913: LD_INT 1
47915: NEG
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 1
47923: NEG
47924: PUSH
47925: LD_INT 2
47927: NEG
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: LD_INT 1
47938: NEG
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 2
47946: PUSH
47947: LD_INT 0
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 2
47956: PUSH
47957: LD_INT 1
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 2
47966: PUSH
47967: LD_INT 2
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: LD_INT 2
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 1
47986: NEG
47987: PUSH
47988: LD_INT 1
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 2
47997: NEG
47998: PUSH
47999: LD_INT 0
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 2
48008: NEG
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 2
48020: NEG
48021: PUSH
48022: LD_INT 2
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 2
48032: NEG
48033: PUSH
48034: LD_INT 3
48036: NEG
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 2
48044: PUSH
48045: LD_INT 1
48047: NEG
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 3
48055: PUSH
48056: LD_INT 0
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 3
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 3
48075: PUSH
48076: LD_INT 2
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 3
48085: PUSH
48086: LD_INT 3
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 2
48095: PUSH
48096: LD_INT 3
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 2
48105: NEG
48106: PUSH
48107: LD_INT 1
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 3
48116: NEG
48117: PUSH
48118: LD_INT 0
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 3
48127: NEG
48128: PUSH
48129: LD_INT 1
48131: NEG
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 3
48139: NEG
48140: PUSH
48141: LD_INT 2
48143: NEG
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 3
48151: NEG
48152: PUSH
48153: LD_INT 3
48155: NEG
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48192: LD_ADDR_VAR 0 45
48196: PUSH
48197: LD_INT 0
48199: PUSH
48200: LD_INT 0
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: LD_INT 1
48212: NEG
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 1
48220: PUSH
48221: LD_INT 0
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 1
48230: PUSH
48231: LD_INT 1
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: LD_INT 1
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 1
48250: NEG
48251: PUSH
48252: LD_INT 0
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 1
48261: NEG
48262: PUSH
48263: LD_INT 1
48265: NEG
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 1
48273: NEG
48274: PUSH
48275: LD_INT 2
48277: NEG
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 0
48285: PUSH
48286: LD_INT 2
48288: NEG
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 1
48296: PUSH
48297: LD_INT 1
48299: NEG
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 2
48307: PUSH
48308: LD_INT 1
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 2
48317: PUSH
48318: LD_INT 2
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 1
48327: PUSH
48328: LD_INT 2
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 0
48337: PUSH
48338: LD_INT 2
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 1
48347: NEG
48348: PUSH
48349: LD_INT 1
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 2
48358: NEG
48359: PUSH
48360: LD_INT 1
48362: NEG
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 2
48370: NEG
48371: PUSH
48372: LD_INT 2
48374: NEG
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 2
48382: NEG
48383: PUSH
48384: LD_INT 3
48386: NEG
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 1
48394: NEG
48395: PUSH
48396: LD_INT 3
48398: NEG
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 0
48406: PUSH
48407: LD_INT 3
48409: NEG
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 1
48417: PUSH
48418: LD_INT 2
48420: NEG
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 3
48428: PUSH
48429: LD_INT 2
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 3
48438: PUSH
48439: LD_INT 3
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 2
48448: PUSH
48449: LD_INT 3
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 1
48458: PUSH
48459: LD_INT 3
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 0
48468: PUSH
48469: LD_INT 3
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: NEG
48479: PUSH
48480: LD_INT 2
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 3
48489: NEG
48490: PUSH
48491: LD_INT 2
48493: NEG
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 3
48501: NEG
48502: PUSH
48503: LD_INT 3
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48542: LD_ADDR_VAR 0 46
48546: PUSH
48547: LD_INT 0
48549: PUSH
48550: LD_INT 0
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: LD_INT 1
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 1
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 1
48580: PUSH
48581: LD_INT 1
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: LD_INT 1
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: NEG
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 1
48623: NEG
48624: PUSH
48625: LD_INT 2
48627: NEG
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: LD_INT 2
48638: NEG
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 1
48646: PUSH
48647: LD_INT 1
48649: NEG
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 2
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 2
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 1
48677: PUSH
48678: LD_INT 2
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: LD_INT 2
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 1
48697: NEG
48698: PUSH
48699: LD_INT 1
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 2
48708: NEG
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 2
48719: NEG
48720: PUSH
48721: LD_INT 1
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: NEG
48732: PUSH
48733: LD_INT 3
48735: NEG
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: LD_INT 3
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: LD_INT 2
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 2
48765: PUSH
48766: LD_INT 1
48768: NEG
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 3
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 3
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 1
48796: PUSH
48797: LD_INT 3
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: LD_INT 3
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 1
48816: NEG
48817: PUSH
48818: LD_INT 2
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 2
48827: NEG
48828: PUSH
48829: LD_INT 1
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 3
48838: NEG
48839: PUSH
48840: LD_INT 0
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 3
48849: NEG
48850: PUSH
48851: LD_INT 1
48853: NEG
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48890: LD_ADDR_VAR 0 47
48894: PUSH
48895: LD_INT 0
48897: PUSH
48898: LD_INT 0
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: LD_INT 1
48910: NEG
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 1
48918: PUSH
48919: LD_INT 0
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: PUSH
48929: LD_INT 1
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 1
48948: NEG
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 1
48959: NEG
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 1
48971: NEG
48972: PUSH
48973: LD_INT 2
48975: NEG
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 0
48983: PUSH
48984: LD_INT 2
48986: NEG
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 1
48994: PUSH
48995: LD_INT 1
48997: NEG
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 2
49005: NEG
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 2
49017: NEG
49018: PUSH
49019: LD_INT 2
49021: NEG
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49041: LD_ADDR_VAR 0 48
49045: PUSH
49046: LD_INT 0
49048: PUSH
49049: LD_INT 0
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 0
49058: PUSH
49059: LD_INT 1
49061: NEG
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 1
49069: PUSH
49070: LD_INT 0
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 1
49079: PUSH
49080: LD_INT 1
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 0
49089: PUSH
49090: LD_INT 1
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 1
49099: NEG
49100: PUSH
49101: LD_INT 0
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: NEG
49111: PUSH
49112: LD_INT 1
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 1
49122: NEG
49123: PUSH
49124: LD_INT 2
49126: NEG
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: LD_INT 2
49137: NEG
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 1
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 2
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 2
49166: PUSH
49167: LD_INT 1
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49188: LD_ADDR_VAR 0 49
49192: PUSH
49193: LD_INT 0
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 0
49205: PUSH
49206: LD_INT 1
49208: NEG
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 1
49216: PUSH
49217: LD_INT 0
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 1
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: LD_INT 1
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: LD_INT 0
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 1
49257: NEG
49258: PUSH
49259: LD_INT 1
49261: NEG
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 1
49269: PUSH
49270: LD_INT 1
49272: NEG
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 2
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 2
49290: PUSH
49291: LD_INT 1
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 2
49300: PUSH
49301: LD_INT 2
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 1
49310: PUSH
49311: LD_INT 2
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49332: LD_ADDR_VAR 0 50
49336: PUSH
49337: LD_INT 0
49339: PUSH
49340: LD_INT 0
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 0
49349: PUSH
49350: LD_INT 1
49352: NEG
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 1
49360: PUSH
49361: LD_INT 0
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 1
49370: PUSH
49371: LD_INT 1
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 0
49380: PUSH
49381: LD_INT 1
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 1
49390: NEG
49391: PUSH
49392: LD_INT 0
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 1
49401: NEG
49402: PUSH
49403: LD_INT 1
49405: NEG
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 2
49413: PUSH
49414: LD_INT 1
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 2
49423: PUSH
49424: LD_INT 2
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 1
49433: PUSH
49434: LD_INT 2
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 0
49443: PUSH
49444: LD_INT 2
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 1
49453: NEG
49454: PUSH
49455: LD_INT 1
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49476: LD_ADDR_VAR 0 51
49480: PUSH
49481: LD_INT 0
49483: PUSH
49484: LD_INT 0
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 0
49493: PUSH
49494: LD_INT 1
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 1
49504: PUSH
49505: LD_INT 0
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 1
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: LD_INT 1
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 1
49534: NEG
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 1
49545: NEG
49546: PUSH
49547: LD_INT 1
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 1
49557: PUSH
49558: LD_INT 2
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 0
49567: PUSH
49568: LD_INT 2
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 1
49577: NEG
49578: PUSH
49579: LD_INT 1
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 2
49588: NEG
49589: PUSH
49590: LD_INT 0
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 2
49599: NEG
49600: PUSH
49601: LD_INT 1
49603: NEG
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49623: LD_ADDR_VAR 0 52
49627: PUSH
49628: LD_INT 0
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 0
49640: PUSH
49641: LD_INT 1
49643: NEG
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 1
49651: PUSH
49652: LD_INT 0
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 1
49661: PUSH
49662: LD_INT 1
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 0
49671: PUSH
49672: LD_INT 1
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: NEG
49682: PUSH
49683: LD_INT 0
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 1
49692: NEG
49693: PUSH
49694: LD_INT 1
49696: NEG
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 1
49704: NEG
49705: PUSH
49706: LD_INT 2
49708: NEG
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 1
49716: NEG
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 2
49727: NEG
49728: PUSH
49729: LD_INT 0
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 2
49738: NEG
49739: PUSH
49740: LD_INT 1
49742: NEG
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 2
49750: NEG
49751: PUSH
49752: LD_INT 2
49754: NEG
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49774: LD_ADDR_VAR 0 53
49778: PUSH
49779: LD_INT 0
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 0
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: LD_INT 0
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 1
49812: PUSH
49813: LD_INT 1
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 0
49822: PUSH
49823: LD_INT 1
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 1
49832: NEG
49833: PUSH
49834: LD_INT 0
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 1
49843: NEG
49844: PUSH
49845: LD_INT 1
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 1
49855: NEG
49856: PUSH
49857: LD_INT 2
49859: NEG
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: LD_INT 2
49870: NEG
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 1
49878: PUSH
49879: LD_INT 1
49881: NEG
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 2
49889: PUSH
49890: LD_INT 0
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 2
49899: PUSH
49900: LD_INT 1
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 2
49909: PUSH
49910: LD_INT 2
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 1
49919: PUSH
49920: LD_INT 2
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: LD_INT 2
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: LD_INT 1
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 2
49950: NEG
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 2
49961: NEG
49962: PUSH
49963: LD_INT 1
49965: NEG
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 2
49973: NEG
49974: PUSH
49975: LD_INT 2
49977: NEG
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50004: LD_ADDR_VAR 0 54
50008: PUSH
50009: LD_INT 0
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 0
50021: PUSH
50022: LD_INT 1
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 1
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 0
50052: PUSH
50053: LD_INT 1
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 1
50062: NEG
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 1
50073: NEG
50074: PUSH
50075: LD_INT 1
50077: NEG
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 1
50085: NEG
50086: PUSH
50087: LD_INT 2
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: LD_INT 2
50100: NEG
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 1
50108: PUSH
50109: LD_INT 1
50111: NEG
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 2
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 2
50129: PUSH
50130: LD_INT 1
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 2
50139: PUSH
50140: LD_INT 2
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 1
50149: PUSH
50150: LD_INT 2
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 0
50159: PUSH
50160: LD_INT 2
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 1
50169: NEG
50170: PUSH
50171: LD_INT 1
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 2
50180: NEG
50181: PUSH
50182: LD_INT 0
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 2
50191: NEG
50192: PUSH
50193: LD_INT 1
50195: NEG
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 2
50203: NEG
50204: PUSH
50205: LD_INT 2
50207: NEG
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50234: LD_ADDR_VAR 0 55
50238: PUSH
50239: LD_INT 0
50241: PUSH
50242: LD_INT 0
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 0
50251: PUSH
50252: LD_INT 1
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 1
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 1
50272: PUSH
50273: LD_INT 1
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 0
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 1
50292: NEG
50293: PUSH
50294: LD_INT 0
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 1
50303: NEG
50304: PUSH
50305: LD_INT 1
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: LD_INT 2
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 0
50327: PUSH
50328: LD_INT 2
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 1
50338: PUSH
50339: LD_INT 1
50341: NEG
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 2
50349: PUSH
50350: LD_INT 0
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 2
50359: PUSH
50360: LD_INT 1
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 2
50369: PUSH
50370: LD_INT 2
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 1
50379: PUSH
50380: LD_INT 2
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 0
50389: PUSH
50390: LD_INT 2
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 1
50399: NEG
50400: PUSH
50401: LD_INT 1
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 2
50410: NEG
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 2
50421: NEG
50422: PUSH
50423: LD_INT 1
50425: NEG
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 2
50433: NEG
50434: PUSH
50435: LD_INT 2
50437: NEG
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50464: LD_ADDR_VAR 0 56
50468: PUSH
50469: LD_INT 0
50471: PUSH
50472: LD_INT 0
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: LD_INT 1
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 1
50492: PUSH
50493: LD_INT 0
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: LD_INT 1
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: LD_INT 1
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: LD_INT 0
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 1
50533: NEG
50534: PUSH
50535: LD_INT 1
50537: NEG
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: LD_INT 2
50549: NEG
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: LD_INT 2
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: PUSH
50569: LD_INT 1
50571: NEG
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 2
50579: PUSH
50580: LD_INT 0
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 2
50589: PUSH
50590: LD_INT 1
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 2
50599: PUSH
50600: LD_INT 2
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: LD_INT 2
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: LD_INT 2
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 1
50629: NEG
50630: PUSH
50631: LD_INT 1
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 2
50640: NEG
50641: PUSH
50642: LD_INT 0
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 2
50651: NEG
50652: PUSH
50653: LD_INT 1
50655: NEG
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 2
50663: NEG
50664: PUSH
50665: LD_INT 2
50667: NEG
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50694: LD_ADDR_VAR 0 57
50698: PUSH
50699: LD_INT 0
50701: PUSH
50702: LD_INT 0
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: LD_INT 1
50714: NEG
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 1
50722: PUSH
50723: LD_INT 0
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: LD_INT 1
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 0
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 1
50752: NEG
50753: PUSH
50754: LD_INT 0
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 1
50763: NEG
50764: PUSH
50765: LD_INT 1
50767: NEG
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: LD_INT 2
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: LD_INT 2
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 1
50798: PUSH
50799: LD_INT 1
50801: NEG
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 2
50809: PUSH
50810: LD_INT 0
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 2
50819: PUSH
50820: LD_INT 1
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 2
50829: PUSH
50830: LD_INT 2
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 1
50839: PUSH
50840: LD_INT 2
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 0
50849: PUSH
50850: LD_INT 2
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 1
50859: NEG
50860: PUSH
50861: LD_INT 1
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 2
50870: NEG
50871: PUSH
50872: LD_INT 0
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 2
50881: NEG
50882: PUSH
50883: LD_INT 1
50885: NEG
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 2
50893: NEG
50894: PUSH
50895: LD_INT 2
50897: NEG
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50924: LD_ADDR_VAR 0 58
50928: PUSH
50929: LD_INT 0
50931: PUSH
50932: LD_INT 0
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 1
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 1
50962: PUSH
50963: LD_INT 1
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 0
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 1
50982: NEG
50983: PUSH
50984: LD_INT 0
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 1
50993: NEG
50994: PUSH
50995: LD_INT 1
50997: NEG
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 1
51005: NEG
51006: PUSH
51007: LD_INT 2
51009: NEG
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: LD_INT 2
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: PUSH
51029: LD_INT 1
51031: NEG
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 2
51039: PUSH
51040: LD_INT 0
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 2
51049: PUSH
51050: LD_INT 1
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 2
51059: PUSH
51060: LD_INT 2
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 1
51069: PUSH
51070: LD_INT 2
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 0
51079: PUSH
51080: LD_INT 2
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 1
51089: NEG
51090: PUSH
51091: LD_INT 1
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 2
51100: NEG
51101: PUSH
51102: LD_INT 0
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 2
51111: NEG
51112: PUSH
51113: LD_INT 1
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 2
51123: NEG
51124: PUSH
51125: LD_INT 2
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51154: LD_ADDR_VAR 0 59
51158: PUSH
51159: LD_INT 0
51161: PUSH
51162: LD_INT 0
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 0
51171: PUSH
51172: LD_INT 1
51174: NEG
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 1
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 0
51202: PUSH
51203: LD_INT 1
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 1
51212: NEG
51213: PUSH
51214: LD_INT 0
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 1
51223: NEG
51224: PUSH
51225: LD_INT 1
51227: NEG
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51242: LD_ADDR_VAR 0 60
51246: PUSH
51247: LD_INT 0
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: LD_INT 1
51262: NEG
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 1
51270: PUSH
51271: LD_INT 0
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 1
51280: PUSH
51281: LD_INT 1
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: LD_INT 1
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 1
51300: NEG
51301: PUSH
51302: LD_INT 0
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 1
51311: NEG
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51330: LD_ADDR_VAR 0 61
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: LD_INT 1
51350: NEG
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: LD_INT 0
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 1
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: LD_INT 1
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 1
51388: NEG
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 1
51399: NEG
51400: PUSH
51401: LD_INT 1
51403: NEG
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51418: LD_ADDR_VAR 0 62
51422: PUSH
51423: LD_INT 0
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 0
51435: PUSH
51436: LD_INT 1
51438: NEG
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 1
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 1
51456: PUSH
51457: LD_INT 1
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 0
51466: PUSH
51467: LD_INT 1
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 1
51476: NEG
51477: PUSH
51478: LD_INT 0
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 1
51487: NEG
51488: PUSH
51489: LD_INT 1
51491: NEG
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51506: LD_ADDR_VAR 0 63
51510: PUSH
51511: LD_INT 0
51513: PUSH
51514: LD_INT 0
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 0
51523: PUSH
51524: LD_INT 1
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 1
51534: PUSH
51535: LD_INT 0
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 1
51544: PUSH
51545: LD_INT 1
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 0
51554: PUSH
51555: LD_INT 1
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 1
51564: NEG
51565: PUSH
51566: LD_INT 0
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 1
51575: NEG
51576: PUSH
51577: LD_INT 1
51579: NEG
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51594: LD_ADDR_VAR 0 64
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 0
51611: PUSH
51612: LD_INT 1
51614: NEG
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: PUSH
51623: LD_INT 0
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: LD_INT 1
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 1
51652: NEG
51653: PUSH
51654: LD_INT 0
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 1
51663: NEG
51664: PUSH
51665: LD_INT 1
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: ST_TO_ADDR
// end ; 1 :
51682: GO 57579
51684: LD_INT 1
51686: DOUBLE
51687: EQUAL
51688: IFTRUE 51692
51690: GO 54315
51692: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51693: LD_ADDR_VAR 0 11
51697: PUSH
51698: LD_INT 1
51700: NEG
51701: PUSH
51702: LD_INT 3
51704: NEG
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 0
51712: PUSH
51713: LD_INT 3
51715: NEG
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 1
51723: PUSH
51724: LD_INT 2
51726: NEG
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: LIST
51736: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51737: LD_ADDR_VAR 0 12
51741: PUSH
51742: LD_INT 2
51744: PUSH
51745: LD_INT 1
51747: NEG
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 3
51755: PUSH
51756: LD_INT 0
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 3
51765: PUSH
51766: LD_INT 1
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: LIST
51777: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51778: LD_ADDR_VAR 0 13
51782: PUSH
51783: LD_INT 3
51785: PUSH
51786: LD_INT 2
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 3
51795: PUSH
51796: LD_INT 3
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 2
51805: PUSH
51806: LD_INT 3
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: LIST
51817: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51818: LD_ADDR_VAR 0 14
51822: PUSH
51823: LD_INT 1
51825: PUSH
51826: LD_INT 3
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: LD_INT 3
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 1
51845: NEG
51846: PUSH
51847: LD_INT 2
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: LIST
51858: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51859: LD_ADDR_VAR 0 15
51863: PUSH
51864: LD_INT 2
51866: NEG
51867: PUSH
51868: LD_INT 1
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 3
51877: NEG
51878: PUSH
51879: LD_INT 0
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 3
51888: NEG
51889: PUSH
51890: LD_INT 1
51892: NEG
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: LIST
51902: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51903: LD_ADDR_VAR 0 16
51907: PUSH
51908: LD_INT 2
51910: NEG
51911: PUSH
51912: LD_INT 3
51914: NEG
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 3
51922: NEG
51923: PUSH
51924: LD_INT 2
51926: NEG
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 3
51934: NEG
51935: PUSH
51936: LD_INT 3
51938: NEG
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: LIST
51948: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51949: LD_ADDR_VAR 0 17
51953: PUSH
51954: LD_INT 1
51956: NEG
51957: PUSH
51958: LD_INT 3
51960: NEG
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 0
51968: PUSH
51969: LD_INT 3
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 1
51979: PUSH
51980: LD_INT 2
51982: NEG
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: LIST
51992: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51993: LD_ADDR_VAR 0 18
51997: PUSH
51998: LD_INT 2
52000: PUSH
52001: LD_INT 1
52003: NEG
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 3
52011: PUSH
52012: LD_INT 0
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 3
52021: PUSH
52022: LD_INT 1
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: LIST
52033: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52034: LD_ADDR_VAR 0 19
52038: PUSH
52039: LD_INT 3
52041: PUSH
52042: LD_INT 2
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 3
52051: PUSH
52052: LD_INT 3
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 2
52061: PUSH
52062: LD_INT 3
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: LIST
52073: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52074: LD_ADDR_VAR 0 20
52078: PUSH
52079: LD_INT 1
52081: PUSH
52082: LD_INT 3
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: LD_INT 3
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 1
52101: NEG
52102: PUSH
52103: LD_INT 2
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: LIST
52114: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52115: LD_ADDR_VAR 0 21
52119: PUSH
52120: LD_INT 2
52122: NEG
52123: PUSH
52124: LD_INT 1
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 3
52133: NEG
52134: PUSH
52135: LD_INT 0
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 3
52144: NEG
52145: PUSH
52146: LD_INT 1
52148: NEG
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: LIST
52158: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52159: LD_ADDR_VAR 0 22
52163: PUSH
52164: LD_INT 2
52166: NEG
52167: PUSH
52168: LD_INT 3
52170: NEG
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 3
52178: NEG
52179: PUSH
52180: LD_INT 2
52182: NEG
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 3
52190: NEG
52191: PUSH
52192: LD_INT 3
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: LIST
52204: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52205: LD_ADDR_VAR 0 23
52209: PUSH
52210: LD_INT 0
52212: PUSH
52213: LD_INT 3
52215: NEG
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 1
52223: NEG
52224: PUSH
52225: LD_INT 4
52227: NEG
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 1
52235: PUSH
52236: LD_INT 3
52238: NEG
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: LIST
52248: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52249: LD_ADDR_VAR 0 24
52253: PUSH
52254: LD_INT 3
52256: PUSH
52257: LD_INT 0
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 3
52266: PUSH
52267: LD_INT 1
52269: NEG
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 4
52277: PUSH
52278: LD_INT 1
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: LIST
52289: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52290: LD_ADDR_VAR 0 25
52294: PUSH
52295: LD_INT 3
52297: PUSH
52298: LD_INT 3
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 4
52307: PUSH
52308: LD_INT 3
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 3
52317: PUSH
52318: LD_INT 4
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: LIST
52329: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52330: LD_ADDR_VAR 0 26
52334: PUSH
52335: LD_INT 0
52337: PUSH
52338: LD_INT 3
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 1
52347: PUSH
52348: LD_INT 4
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 1
52357: NEG
52358: PUSH
52359: LD_INT 3
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: LIST
52370: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52371: LD_ADDR_VAR 0 27
52375: PUSH
52376: LD_INT 3
52378: NEG
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 3
52389: NEG
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 4
52400: NEG
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: LIST
52414: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52415: LD_ADDR_VAR 0 28
52419: PUSH
52420: LD_INT 3
52422: NEG
52423: PUSH
52424: LD_INT 3
52426: NEG
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 3
52434: NEG
52435: PUSH
52436: LD_INT 4
52438: NEG
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 4
52446: NEG
52447: PUSH
52448: LD_INT 3
52450: NEG
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: LIST
52460: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52461: LD_ADDR_VAR 0 29
52465: PUSH
52466: LD_INT 1
52468: NEG
52469: PUSH
52470: LD_INT 3
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: LD_INT 3
52483: NEG
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 1
52491: PUSH
52492: LD_INT 2
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 1
52502: NEG
52503: PUSH
52504: LD_INT 4
52506: NEG
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 0
52514: PUSH
52515: LD_INT 4
52517: NEG
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 1
52525: PUSH
52526: LD_INT 3
52528: NEG
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 1
52536: NEG
52537: PUSH
52538: LD_INT 5
52540: NEG
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 0
52548: PUSH
52549: LD_INT 5
52551: NEG
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: LD_INT 4
52562: NEG
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 1
52570: NEG
52571: PUSH
52572: LD_INT 6
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 0
52582: PUSH
52583: LD_INT 6
52585: NEG
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 1
52593: PUSH
52594: LD_INT 5
52596: NEG
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52616: LD_ADDR_VAR 0 30
52620: PUSH
52621: LD_INT 2
52623: PUSH
52624: LD_INT 1
52626: NEG
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 3
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 3
52644: PUSH
52645: LD_INT 1
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 3
52654: PUSH
52655: LD_INT 1
52657: NEG
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 4
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 4
52675: PUSH
52676: LD_INT 1
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 4
52685: PUSH
52686: LD_INT 1
52688: NEG
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 5
52696: PUSH
52697: LD_INT 0
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 5
52706: PUSH
52707: LD_INT 1
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 5
52716: PUSH
52717: LD_INT 1
52719: NEG
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 6
52727: PUSH
52728: LD_INT 0
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 6
52737: PUSH
52738: LD_INT 1
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52759: LD_ADDR_VAR 0 31
52763: PUSH
52764: LD_INT 3
52766: PUSH
52767: LD_INT 2
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 3
52776: PUSH
52777: LD_INT 3
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 2
52786: PUSH
52787: LD_INT 3
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 4
52796: PUSH
52797: LD_INT 3
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 4
52806: PUSH
52807: LD_INT 4
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 3
52816: PUSH
52817: LD_INT 4
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 5
52826: PUSH
52827: LD_INT 4
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 5
52836: PUSH
52837: LD_INT 5
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 4
52846: PUSH
52847: LD_INT 5
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 6
52856: PUSH
52857: LD_INT 5
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 6
52866: PUSH
52867: LD_INT 6
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 5
52876: PUSH
52877: LD_INT 6
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52898: LD_ADDR_VAR 0 32
52902: PUSH
52903: LD_INT 1
52905: PUSH
52906: LD_INT 3
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 0
52915: PUSH
52916: LD_INT 3
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 1
52925: NEG
52926: PUSH
52927: LD_INT 2
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: LD_INT 4
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: LD_INT 4
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 1
52956: NEG
52957: PUSH
52958: LD_INT 3
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 1
52967: PUSH
52968: LD_INT 5
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: LD_INT 5
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 1
52987: NEG
52988: PUSH
52989: LD_INT 4
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 1
52998: PUSH
52999: LD_INT 6
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: LD_INT 6
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 1
53018: NEG
53019: PUSH
53020: LD_INT 5
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53041: LD_ADDR_VAR 0 33
53045: PUSH
53046: LD_INT 2
53048: NEG
53049: PUSH
53050: LD_INT 1
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 3
53059: NEG
53060: PUSH
53061: LD_INT 0
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 3
53070: NEG
53071: PUSH
53072: LD_INT 1
53074: NEG
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 3
53082: NEG
53083: PUSH
53084: LD_INT 1
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 4
53093: NEG
53094: PUSH
53095: LD_INT 0
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 4
53104: NEG
53105: PUSH
53106: LD_INT 1
53108: NEG
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 4
53116: NEG
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 5
53127: NEG
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 5
53138: NEG
53139: PUSH
53140: LD_INT 1
53142: NEG
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 5
53150: NEG
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 6
53161: NEG
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 6
53172: NEG
53173: PUSH
53174: LD_INT 1
53176: NEG
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53196: LD_ADDR_VAR 0 34
53200: PUSH
53201: LD_INT 2
53203: NEG
53204: PUSH
53205: LD_INT 3
53207: NEG
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 3
53215: NEG
53216: PUSH
53217: LD_INT 2
53219: NEG
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 3
53227: NEG
53228: PUSH
53229: LD_INT 3
53231: NEG
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 3
53239: NEG
53240: PUSH
53241: LD_INT 4
53243: NEG
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 4
53251: NEG
53252: PUSH
53253: LD_INT 3
53255: NEG
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 4
53263: NEG
53264: PUSH
53265: LD_INT 4
53267: NEG
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 4
53275: NEG
53276: PUSH
53277: LD_INT 5
53279: NEG
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 5
53287: NEG
53288: PUSH
53289: LD_INT 4
53291: NEG
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 5
53299: NEG
53300: PUSH
53301: LD_INT 5
53303: NEG
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 5
53311: NEG
53312: PUSH
53313: LD_INT 6
53315: NEG
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 6
53323: NEG
53324: PUSH
53325: LD_INT 5
53327: NEG
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 6
53335: NEG
53336: PUSH
53337: LD_INT 6
53339: NEG
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53359: LD_ADDR_VAR 0 41
53363: PUSH
53364: LD_INT 0
53366: PUSH
53367: LD_INT 2
53369: NEG
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 1
53377: NEG
53378: PUSH
53379: LD_INT 3
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 1
53389: PUSH
53390: LD_INT 2
53392: NEG
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: LIST
53402: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53403: LD_ADDR_VAR 0 42
53407: PUSH
53408: LD_INT 2
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 2
53420: PUSH
53421: LD_INT 1
53423: NEG
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 3
53431: PUSH
53432: LD_INT 1
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: LIST
53443: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53444: LD_ADDR_VAR 0 43
53448: PUSH
53449: LD_INT 2
53451: PUSH
53452: LD_INT 2
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 3
53461: PUSH
53462: LD_INT 2
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 2
53471: PUSH
53472: LD_INT 3
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: LIST
53483: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53484: LD_ADDR_VAR 0 44
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: LD_INT 2
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 1
53501: PUSH
53502: LD_INT 3
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 1
53511: NEG
53512: PUSH
53513: LD_INT 2
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: LIST
53524: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53525: LD_ADDR_VAR 0 45
53529: PUSH
53530: LD_INT 2
53532: NEG
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 2
53543: NEG
53544: PUSH
53545: LD_INT 1
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 3
53554: NEG
53555: PUSH
53556: LD_INT 1
53558: NEG
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: LIST
53568: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53569: LD_ADDR_VAR 0 46
53573: PUSH
53574: LD_INT 2
53576: NEG
53577: PUSH
53578: LD_INT 2
53580: NEG
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 2
53588: NEG
53589: PUSH
53590: LD_INT 3
53592: NEG
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 3
53600: NEG
53601: PUSH
53602: LD_INT 2
53604: NEG
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: LIST
53614: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53615: LD_ADDR_VAR 0 47
53619: PUSH
53620: LD_INT 2
53622: NEG
53623: PUSH
53624: LD_INT 3
53626: NEG
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 1
53634: NEG
53635: PUSH
53636: LD_INT 3
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53648: LD_ADDR_VAR 0 48
53652: PUSH
53653: LD_INT 1
53655: PUSH
53656: LD_INT 2
53658: NEG
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 2
53666: PUSH
53667: LD_INT 1
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53679: LD_ADDR_VAR 0 49
53683: PUSH
53684: LD_INT 3
53686: PUSH
53687: LD_INT 1
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 3
53696: PUSH
53697: LD_INT 2
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53708: LD_ADDR_VAR 0 50
53712: PUSH
53713: LD_INT 2
53715: PUSH
53716: LD_INT 3
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 1
53725: PUSH
53726: LD_INT 3
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53737: LD_ADDR_VAR 0 51
53741: PUSH
53742: LD_INT 1
53744: NEG
53745: PUSH
53746: LD_INT 2
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 2
53755: NEG
53756: PUSH
53757: LD_INT 1
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53768: LD_ADDR_VAR 0 52
53772: PUSH
53773: LD_INT 3
53775: NEG
53776: PUSH
53777: LD_INT 1
53779: NEG
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 3
53787: NEG
53788: PUSH
53789: LD_INT 2
53791: NEG
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53801: LD_ADDR_VAR 0 53
53805: PUSH
53806: LD_INT 1
53808: NEG
53809: PUSH
53810: LD_INT 3
53812: NEG
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 0
53820: PUSH
53821: LD_INT 3
53823: NEG
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 1
53831: PUSH
53832: LD_INT 2
53834: NEG
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: LIST
53844: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53845: LD_ADDR_VAR 0 54
53849: PUSH
53850: LD_INT 2
53852: PUSH
53853: LD_INT 1
53855: NEG
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 3
53863: PUSH
53864: LD_INT 0
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 3
53873: PUSH
53874: LD_INT 1
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: LIST
53885: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53886: LD_ADDR_VAR 0 55
53890: PUSH
53891: LD_INT 3
53893: PUSH
53894: LD_INT 2
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 3
53903: PUSH
53904: LD_INT 3
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 2
53913: PUSH
53914: LD_INT 3
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: LIST
53925: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53926: LD_ADDR_VAR 0 56
53930: PUSH
53931: LD_INT 1
53933: PUSH
53934: LD_INT 3
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 0
53943: PUSH
53944: LD_INT 3
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 1
53953: NEG
53954: PUSH
53955: LD_INT 2
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: LIST
53966: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53967: LD_ADDR_VAR 0 57
53971: PUSH
53972: LD_INT 2
53974: NEG
53975: PUSH
53976: LD_INT 1
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 3
53985: NEG
53986: PUSH
53987: LD_INT 0
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 3
53996: NEG
53997: PUSH
53998: LD_INT 1
54000: NEG
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: LIST
54010: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54011: LD_ADDR_VAR 0 58
54015: PUSH
54016: LD_INT 2
54018: NEG
54019: PUSH
54020: LD_INT 3
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 3
54030: NEG
54031: PUSH
54032: LD_INT 2
54034: NEG
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 3
54042: NEG
54043: PUSH
54044: LD_INT 3
54046: NEG
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: LIST
54056: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54057: LD_ADDR_VAR 0 59
54061: PUSH
54062: LD_INT 1
54064: NEG
54065: PUSH
54066: LD_INT 2
54068: NEG
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 0
54076: PUSH
54077: LD_INT 2
54079: NEG
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 1
54087: PUSH
54088: LD_INT 1
54090: NEG
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: LIST
54100: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54101: LD_ADDR_VAR 0 60
54105: PUSH
54106: LD_INT 1
54108: PUSH
54109: LD_INT 1
54111: NEG
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 2
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 2
54129: PUSH
54130: LD_INT 1
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: LIST
54141: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54142: LD_ADDR_VAR 0 61
54146: PUSH
54147: LD_INT 2
54149: PUSH
54150: LD_INT 1
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 2
54159: PUSH
54160: LD_INT 2
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 1
54169: PUSH
54170: LD_INT 2
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: LIST
54181: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54182: LD_ADDR_VAR 0 62
54186: PUSH
54187: LD_INT 1
54189: PUSH
54190: LD_INT 2
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 0
54199: PUSH
54200: LD_INT 2
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 1
54209: NEG
54210: PUSH
54211: LD_INT 1
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: LIST
54222: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54223: LD_ADDR_VAR 0 63
54227: PUSH
54228: LD_INT 1
54230: NEG
54231: PUSH
54232: LD_INT 1
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 2
54241: NEG
54242: PUSH
54243: LD_INT 0
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 2
54252: NEG
54253: PUSH
54254: LD_INT 1
54256: NEG
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: LIST
54266: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54267: LD_ADDR_VAR 0 64
54271: PUSH
54272: LD_INT 1
54274: NEG
54275: PUSH
54276: LD_INT 2
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 2
54286: NEG
54287: PUSH
54288: LD_INT 1
54290: NEG
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 2
54298: NEG
54299: PUSH
54300: LD_INT 2
54302: NEG
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: LIST
54312: ST_TO_ADDR
// end ; 2 :
54313: GO 57579
54315: LD_INT 2
54317: DOUBLE
54318: EQUAL
54319: IFTRUE 54323
54321: GO 57578
54323: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54324: LD_ADDR_VAR 0 29
54328: PUSH
54329: LD_INT 4
54331: PUSH
54332: LD_INT 0
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 4
54341: PUSH
54342: LD_INT 1
54344: NEG
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 5
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 5
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 4
54372: PUSH
54373: LD_INT 1
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 3
54382: PUSH
54383: LD_INT 0
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 3
54392: PUSH
54393: LD_INT 1
54395: NEG
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 3
54403: PUSH
54404: LD_INT 2
54406: NEG
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 5
54414: PUSH
54415: LD_INT 2
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 3
54424: PUSH
54425: LD_INT 3
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 3
54434: PUSH
54435: LD_INT 2
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 4
54444: PUSH
54445: LD_INT 3
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 4
54454: PUSH
54455: LD_INT 4
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 3
54464: PUSH
54465: LD_INT 4
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 2
54474: PUSH
54475: LD_INT 3
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 2
54484: PUSH
54485: LD_INT 2
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 4
54494: PUSH
54495: LD_INT 2
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 2
54504: PUSH
54505: LD_INT 4
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 0
54514: PUSH
54515: LD_INT 4
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: LD_INT 3
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 1
54534: PUSH
54535: LD_INT 4
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: LD_INT 5
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: LD_INT 5
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 1
54564: NEG
54565: PUSH
54566: LD_INT 4
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 1
54575: NEG
54576: PUSH
54577: LD_INT 3
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 2
54586: PUSH
54587: LD_INT 5
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 2
54596: NEG
54597: PUSH
54598: LD_INT 3
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 3
54607: NEG
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 3
54618: NEG
54619: PUSH
54620: LD_INT 1
54622: NEG
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 2
54630: NEG
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 2
54641: NEG
54642: PUSH
54643: LD_INT 1
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 3
54652: NEG
54653: PUSH
54654: LD_INT 1
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 4
54663: NEG
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 4
54674: NEG
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 4
54686: NEG
54687: PUSH
54688: LD_INT 2
54690: NEG
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 2
54698: NEG
54699: PUSH
54700: LD_INT 2
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 4
54709: NEG
54710: PUSH
54711: LD_INT 4
54713: NEG
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 4
54721: NEG
54722: PUSH
54723: LD_INT 5
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 3
54733: NEG
54734: PUSH
54735: LD_INT 4
54737: NEG
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 3
54745: NEG
54746: PUSH
54747: LD_INT 3
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 4
54757: NEG
54758: PUSH
54759: LD_INT 3
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 5
54769: NEG
54770: PUSH
54771: LD_INT 4
54773: NEG
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 5
54781: NEG
54782: PUSH
54783: LD_INT 5
54785: NEG
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 3
54793: NEG
54794: PUSH
54795: LD_INT 5
54797: NEG
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 5
54805: NEG
54806: PUSH
54807: LD_INT 3
54809: NEG
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54862: LD_ADDR_VAR 0 30
54866: PUSH
54867: LD_INT 4
54869: PUSH
54870: LD_INT 4
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 4
54879: PUSH
54880: LD_INT 3
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 5
54889: PUSH
54890: LD_INT 4
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 5
54899: PUSH
54900: LD_INT 5
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 4
54909: PUSH
54910: LD_INT 5
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 3
54919: PUSH
54920: LD_INT 4
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 3
54929: PUSH
54930: LD_INT 3
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 5
54939: PUSH
54940: LD_INT 3
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 3
54949: PUSH
54950: LD_INT 5
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: LD_INT 3
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 0
54969: PUSH
54970: LD_INT 2
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 1
54979: PUSH
54980: LD_INT 3
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 1
54989: PUSH
54990: LD_INT 4
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 0
54999: PUSH
55000: LD_INT 4
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 1
55009: NEG
55010: PUSH
55011: LD_INT 3
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 1
55020: NEG
55021: PUSH
55022: LD_INT 2
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 2
55031: PUSH
55032: LD_INT 4
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 2
55041: NEG
55042: PUSH
55043: LD_INT 2
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 4
55052: NEG
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 4
55063: NEG
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 3
55075: NEG
55076: PUSH
55077: LD_INT 0
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 3
55086: NEG
55087: PUSH
55088: LD_INT 1
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 4
55097: NEG
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 5
55108: NEG
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 5
55119: NEG
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 5
55131: NEG
55132: PUSH
55133: LD_INT 2
55135: NEG
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 3
55143: NEG
55144: PUSH
55145: LD_INT 2
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 3
55154: NEG
55155: PUSH
55156: LD_INT 3
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 3
55166: NEG
55167: PUSH
55168: LD_INT 4
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 2
55178: NEG
55179: PUSH
55180: LD_INT 3
55182: NEG
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 2
55190: NEG
55191: PUSH
55192: LD_INT 2
55194: NEG
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 3
55202: NEG
55203: PUSH
55204: LD_INT 2
55206: NEG
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 4
55214: NEG
55215: PUSH
55216: LD_INT 3
55218: NEG
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 4
55226: NEG
55227: PUSH
55228: LD_INT 4
55230: NEG
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 2
55238: NEG
55239: PUSH
55240: LD_INT 4
55242: NEG
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 4
55250: NEG
55251: PUSH
55252: LD_INT 2
55254: NEG
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: LD_INT 4
55265: NEG
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: LD_INT 5
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 1
55284: PUSH
55285: LD_INT 4
55287: NEG
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: LD_INT 3
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: LD_INT 3
55309: NEG
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 1
55317: NEG
55318: PUSH
55319: LD_INT 4
55321: NEG
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 1
55329: NEG
55330: PUSH
55331: LD_INT 5
55333: NEG
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 2
55341: PUSH
55342: LD_INT 3
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 2
55352: NEG
55353: PUSH
55354: LD_INT 5
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55409: LD_ADDR_VAR 0 31
55413: PUSH
55414: LD_INT 0
55416: PUSH
55417: LD_INT 4
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 0
55426: PUSH
55427: LD_INT 3
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: LD_INT 4
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: LD_INT 5
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 0
55456: PUSH
55457: LD_INT 5
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: NEG
55467: PUSH
55468: LD_INT 4
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 1
55477: NEG
55478: PUSH
55479: LD_INT 3
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 2
55488: PUSH
55489: LD_INT 5
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 2
55498: NEG
55499: PUSH
55500: LD_INT 3
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 3
55509: NEG
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 3
55520: NEG
55521: PUSH
55522: LD_INT 1
55524: NEG
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 2
55532: NEG
55533: PUSH
55534: LD_INT 0
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 2
55543: NEG
55544: PUSH
55545: LD_INT 1
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 3
55554: NEG
55555: PUSH
55556: LD_INT 1
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 4
55565: NEG
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 4
55576: NEG
55577: PUSH
55578: LD_INT 1
55580: NEG
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 4
55588: NEG
55589: PUSH
55590: LD_INT 2
55592: NEG
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 2
55600: NEG
55601: PUSH
55602: LD_INT 2
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 4
55611: NEG
55612: PUSH
55613: LD_INT 4
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 4
55623: NEG
55624: PUSH
55625: LD_INT 5
55627: NEG
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 3
55635: NEG
55636: PUSH
55637: LD_INT 4
55639: NEG
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 3
55647: NEG
55648: PUSH
55649: LD_INT 3
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 4
55659: NEG
55660: PUSH
55661: LD_INT 3
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 5
55671: NEG
55672: PUSH
55673: LD_INT 4
55675: NEG
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 5
55683: NEG
55684: PUSH
55685: LD_INT 5
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 3
55695: NEG
55696: PUSH
55697: LD_INT 5
55699: NEG
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 5
55707: NEG
55708: PUSH
55709: LD_INT 3
55711: NEG
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: LD_INT 3
55722: NEG
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: LD_INT 4
55733: NEG
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 1
55741: PUSH
55742: LD_INT 3
55744: NEG
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 1
55752: PUSH
55753: LD_INT 2
55755: NEG
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 0
55763: PUSH
55764: LD_INT 2
55766: NEG
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 1
55774: NEG
55775: PUSH
55776: LD_INT 3
55778: NEG
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 1
55786: NEG
55787: PUSH
55788: LD_INT 4
55790: NEG
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 2
55798: PUSH
55799: LD_INT 2
55801: NEG
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 2
55809: NEG
55810: PUSH
55811: LD_INT 4
55813: NEG
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 4
55821: PUSH
55822: LD_INT 0
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 4
55831: PUSH
55832: LD_INT 1
55834: NEG
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 5
55842: PUSH
55843: LD_INT 0
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 5
55852: PUSH
55853: LD_INT 1
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 4
55862: PUSH
55863: LD_INT 1
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 3
55872: PUSH
55873: LD_INT 0
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 3
55882: PUSH
55883: LD_INT 1
55885: NEG
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 3
55893: PUSH
55894: LD_INT 2
55896: NEG
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 5
55904: PUSH
55905: LD_INT 2
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55959: LD_ADDR_VAR 0 32
55963: PUSH
55964: LD_INT 4
55966: NEG
55967: PUSH
55968: LD_INT 0
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 4
55977: NEG
55978: PUSH
55979: LD_INT 1
55981: NEG
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 3
55989: NEG
55990: PUSH
55991: LD_INT 0
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 3
56000: NEG
56001: PUSH
56002: LD_INT 1
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 4
56011: NEG
56012: PUSH
56013: LD_INT 1
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 5
56022: NEG
56023: PUSH
56024: LD_INT 0
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 5
56033: NEG
56034: PUSH
56035: LD_INT 1
56037: NEG
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 5
56045: NEG
56046: PUSH
56047: LD_INT 2
56049: NEG
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 3
56057: NEG
56058: PUSH
56059: LD_INT 2
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 3
56068: NEG
56069: PUSH
56070: LD_INT 3
56072: NEG
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 3
56080: NEG
56081: PUSH
56082: LD_INT 4
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 2
56092: NEG
56093: PUSH
56094: LD_INT 3
56096: NEG
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 2
56104: NEG
56105: PUSH
56106: LD_INT 2
56108: NEG
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 3
56116: NEG
56117: PUSH
56118: LD_INT 2
56120: NEG
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 4
56128: NEG
56129: PUSH
56130: LD_INT 3
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 4
56140: NEG
56141: PUSH
56142: LD_INT 4
56144: NEG
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 2
56152: NEG
56153: PUSH
56154: LD_INT 4
56156: NEG
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 4
56164: NEG
56165: PUSH
56166: LD_INT 2
56168: NEG
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: LD_INT 4
56179: NEG
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 0
56187: PUSH
56188: LD_INT 5
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 1
56198: PUSH
56199: LD_INT 4
56201: NEG
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 1
56209: PUSH
56210: LD_INT 3
56212: NEG
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 0
56220: PUSH
56221: LD_INT 3
56223: NEG
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 1
56231: NEG
56232: PUSH
56233: LD_INT 4
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 1
56243: NEG
56244: PUSH
56245: LD_INT 5
56247: NEG
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 2
56255: PUSH
56256: LD_INT 3
56258: NEG
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 2
56266: NEG
56267: PUSH
56268: LD_INT 5
56270: NEG
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 3
56278: PUSH
56279: LD_INT 0
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 3
56288: PUSH
56289: LD_INT 1
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 4
56299: PUSH
56300: LD_INT 0
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 4
56309: PUSH
56310: LD_INT 1
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 3
56319: PUSH
56320: LD_INT 1
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 2
56329: PUSH
56330: LD_INT 0
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 2
56339: PUSH
56340: LD_INT 1
56342: NEG
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 2
56350: PUSH
56351: LD_INT 2
56353: NEG
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 4
56361: PUSH
56362: LD_INT 2
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 4
56371: PUSH
56372: LD_INT 4
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 4
56381: PUSH
56382: LD_INT 3
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 5
56391: PUSH
56392: LD_INT 4
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 5
56401: PUSH
56402: LD_INT 5
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 4
56411: PUSH
56412: LD_INT 5
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 3
56421: PUSH
56422: LD_INT 4
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 3
56431: PUSH
56432: LD_INT 3
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 5
56441: PUSH
56442: LD_INT 3
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 3
56451: PUSH
56452: LD_INT 5
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56506: LD_ADDR_VAR 0 33
56510: PUSH
56511: LD_INT 4
56513: NEG
56514: PUSH
56515: LD_INT 4
56517: NEG
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 4
56525: NEG
56526: PUSH
56527: LD_INT 5
56529: NEG
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 3
56537: NEG
56538: PUSH
56539: LD_INT 4
56541: NEG
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 3
56549: NEG
56550: PUSH
56551: LD_INT 3
56553: NEG
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 4
56561: NEG
56562: PUSH
56563: LD_INT 3
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 5
56573: NEG
56574: PUSH
56575: LD_INT 4
56577: NEG
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 5
56585: NEG
56586: PUSH
56587: LD_INT 5
56589: NEG
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 3
56597: NEG
56598: PUSH
56599: LD_INT 5
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 5
56609: NEG
56610: PUSH
56611: LD_INT 3
56613: NEG
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 0
56621: PUSH
56622: LD_INT 3
56624: NEG
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 0
56632: PUSH
56633: LD_INT 4
56635: NEG
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 1
56643: PUSH
56644: LD_INT 3
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 1
56654: PUSH
56655: LD_INT 2
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 0
56665: PUSH
56666: LD_INT 2
56668: NEG
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 1
56676: NEG
56677: PUSH
56678: LD_INT 3
56680: NEG
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: LD_INT 4
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 2
56700: PUSH
56701: LD_INT 2
56703: NEG
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 2
56711: NEG
56712: PUSH
56713: LD_INT 4
56715: NEG
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 4
56723: PUSH
56724: LD_INT 0
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 4
56733: PUSH
56734: LD_INT 1
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 5
56744: PUSH
56745: LD_INT 0
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 5
56754: PUSH
56755: LD_INT 1
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 4
56764: PUSH
56765: LD_INT 1
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 3
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 3
56784: PUSH
56785: LD_INT 1
56787: NEG
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 3
56795: PUSH
56796: LD_INT 2
56798: NEG
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 5
56806: PUSH
56807: LD_INT 2
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 3
56816: PUSH
56817: LD_INT 3
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 3
56826: PUSH
56827: LD_INT 2
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 4
56836: PUSH
56837: LD_INT 3
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 4
56846: PUSH
56847: LD_INT 4
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 3
56856: PUSH
56857: LD_INT 4
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 2
56866: PUSH
56867: LD_INT 3
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 2
56876: PUSH
56877: LD_INT 2
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 4
56886: PUSH
56887: LD_INT 2
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 2
56896: PUSH
56897: LD_INT 4
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 0
56906: PUSH
56907: LD_INT 4
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 0
56916: PUSH
56917: LD_INT 3
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 1
56926: PUSH
56927: LD_INT 4
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 1
56936: PUSH
56937: LD_INT 5
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 0
56946: PUSH
56947: LD_INT 5
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 1
56956: NEG
56957: PUSH
56958: LD_INT 4
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 1
56967: NEG
56968: PUSH
56969: LD_INT 3
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 2
56978: PUSH
56979: LD_INT 5
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 2
56988: NEG
56989: PUSH
56990: LD_INT 3
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57044: LD_ADDR_VAR 0 34
57048: PUSH
57049: LD_INT 0
57051: PUSH
57052: LD_INT 4
57054: NEG
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 0
57062: PUSH
57063: LD_INT 5
57065: NEG
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 1
57073: PUSH
57074: LD_INT 4
57076: NEG
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 1
57084: PUSH
57085: LD_INT 3
57087: NEG
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: LD_INT 3
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 1
57106: NEG
57107: PUSH
57108: LD_INT 4
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 1
57118: NEG
57119: PUSH
57120: LD_INT 5
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 2
57130: PUSH
57131: LD_INT 3
57133: NEG
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 2
57141: NEG
57142: PUSH
57143: LD_INT 5
57145: NEG
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 3
57153: PUSH
57154: LD_INT 0
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 3
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 4
57174: PUSH
57175: LD_INT 0
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 4
57184: PUSH
57185: LD_INT 1
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 3
57194: PUSH
57195: LD_INT 1
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 2
57204: PUSH
57205: LD_INT 0
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 2
57214: PUSH
57215: LD_INT 1
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 2
57225: PUSH
57226: LD_INT 2
57228: NEG
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 4
57236: PUSH
57237: LD_INT 2
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 4
57246: PUSH
57247: LD_INT 4
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 4
57256: PUSH
57257: LD_INT 3
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 5
57266: PUSH
57267: LD_INT 4
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 5
57276: PUSH
57277: LD_INT 5
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 4
57286: PUSH
57287: LD_INT 5
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 3
57296: PUSH
57297: LD_INT 4
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 3
57306: PUSH
57307: LD_INT 3
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 5
57316: PUSH
57317: LD_INT 3
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 3
57326: PUSH
57327: LD_INT 5
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 0
57336: PUSH
57337: LD_INT 3
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 0
57346: PUSH
57347: LD_INT 2
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 1
57356: PUSH
57357: LD_INT 3
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 1
57366: PUSH
57367: LD_INT 4
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 0
57376: PUSH
57377: LD_INT 4
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 1
57386: NEG
57387: PUSH
57388: LD_INT 3
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 1
57397: NEG
57398: PUSH
57399: LD_INT 2
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 2
57408: PUSH
57409: LD_INT 4
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 2
57418: NEG
57419: PUSH
57420: LD_INT 2
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 4
57429: NEG
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 4
57440: NEG
57441: PUSH
57442: LD_INT 1
57444: NEG
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 3
57452: NEG
57453: PUSH
57454: LD_INT 0
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 3
57463: NEG
57464: PUSH
57465: LD_INT 1
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 4
57474: NEG
57475: PUSH
57476: LD_INT 1
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 5
57485: NEG
57486: PUSH
57487: LD_INT 0
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 5
57496: NEG
57497: PUSH
57498: LD_INT 1
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 5
57508: NEG
57509: PUSH
57510: LD_INT 2
57512: NEG
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 3
57520: NEG
57521: PUSH
57522: LD_INT 2
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: ST_TO_ADDR
// end ; end ;
57576: GO 57579
57578: POP
// case btype of b_depot , b_warehouse :
57579: LD_VAR 0 1
57583: PUSH
57584: LD_INT 0
57586: DOUBLE
57587: EQUAL
57588: IFTRUE 57598
57590: LD_INT 1
57592: DOUBLE
57593: EQUAL
57594: IFTRUE 57598
57596: GO 57799
57598: POP
// case nation of nation_american :
57599: LD_VAR 0 5
57603: PUSH
57604: LD_INT 1
57606: DOUBLE
57607: EQUAL
57608: IFTRUE 57612
57610: GO 57668
57612: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57613: LD_ADDR_VAR 0 9
57617: PUSH
57618: LD_VAR 0 11
57622: PUSH
57623: LD_VAR 0 12
57627: PUSH
57628: LD_VAR 0 13
57632: PUSH
57633: LD_VAR 0 14
57637: PUSH
57638: LD_VAR 0 15
57642: PUSH
57643: LD_VAR 0 16
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: PUSH
57656: LD_VAR 0 4
57660: PUSH
57661: LD_INT 1
57663: PLUS
57664: ARRAY
57665: ST_TO_ADDR
57666: GO 57797
57668: LD_INT 2
57670: DOUBLE
57671: EQUAL
57672: IFTRUE 57676
57674: GO 57732
57676: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57677: LD_ADDR_VAR 0 9
57681: PUSH
57682: LD_VAR 0 17
57686: PUSH
57687: LD_VAR 0 18
57691: PUSH
57692: LD_VAR 0 19
57696: PUSH
57697: LD_VAR 0 20
57701: PUSH
57702: LD_VAR 0 21
57706: PUSH
57707: LD_VAR 0 22
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: PUSH
57720: LD_VAR 0 4
57724: PUSH
57725: LD_INT 1
57727: PLUS
57728: ARRAY
57729: ST_TO_ADDR
57730: GO 57797
57732: LD_INT 3
57734: DOUBLE
57735: EQUAL
57736: IFTRUE 57740
57738: GO 57796
57740: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57741: LD_ADDR_VAR 0 9
57745: PUSH
57746: LD_VAR 0 23
57750: PUSH
57751: LD_VAR 0 24
57755: PUSH
57756: LD_VAR 0 25
57760: PUSH
57761: LD_VAR 0 26
57765: PUSH
57766: LD_VAR 0 27
57770: PUSH
57771: LD_VAR 0 28
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: PUSH
57784: LD_VAR 0 4
57788: PUSH
57789: LD_INT 1
57791: PLUS
57792: ARRAY
57793: ST_TO_ADDR
57794: GO 57797
57796: POP
57797: GO 58352
57799: LD_INT 2
57801: DOUBLE
57802: EQUAL
57803: IFTRUE 57813
57805: LD_INT 3
57807: DOUBLE
57808: EQUAL
57809: IFTRUE 57813
57811: GO 57869
57813: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57814: LD_ADDR_VAR 0 9
57818: PUSH
57819: LD_VAR 0 29
57823: PUSH
57824: LD_VAR 0 30
57828: PUSH
57829: LD_VAR 0 31
57833: PUSH
57834: LD_VAR 0 32
57838: PUSH
57839: LD_VAR 0 33
57843: PUSH
57844: LD_VAR 0 34
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: PUSH
57857: LD_VAR 0 4
57861: PUSH
57862: LD_INT 1
57864: PLUS
57865: ARRAY
57866: ST_TO_ADDR
57867: GO 58352
57869: LD_INT 16
57871: DOUBLE
57872: EQUAL
57873: IFTRUE 57931
57875: LD_INT 17
57877: DOUBLE
57878: EQUAL
57879: IFTRUE 57931
57881: LD_INT 18
57883: DOUBLE
57884: EQUAL
57885: IFTRUE 57931
57887: LD_INT 19
57889: DOUBLE
57890: EQUAL
57891: IFTRUE 57931
57893: LD_INT 22
57895: DOUBLE
57896: EQUAL
57897: IFTRUE 57931
57899: LD_INT 20
57901: DOUBLE
57902: EQUAL
57903: IFTRUE 57931
57905: LD_INT 21
57907: DOUBLE
57908: EQUAL
57909: IFTRUE 57931
57911: LD_INT 23
57913: DOUBLE
57914: EQUAL
57915: IFTRUE 57931
57917: LD_INT 24
57919: DOUBLE
57920: EQUAL
57921: IFTRUE 57931
57923: LD_INT 25
57925: DOUBLE
57926: EQUAL
57927: IFTRUE 57931
57929: GO 57987
57931: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57932: LD_ADDR_VAR 0 9
57936: PUSH
57937: LD_VAR 0 35
57941: PUSH
57942: LD_VAR 0 36
57946: PUSH
57947: LD_VAR 0 37
57951: PUSH
57952: LD_VAR 0 38
57956: PUSH
57957: LD_VAR 0 39
57961: PUSH
57962: LD_VAR 0 40
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: PUSH
57975: LD_VAR 0 4
57979: PUSH
57980: LD_INT 1
57982: PLUS
57983: ARRAY
57984: ST_TO_ADDR
57985: GO 58352
57987: LD_INT 6
57989: DOUBLE
57990: EQUAL
57991: IFTRUE 58043
57993: LD_INT 7
57995: DOUBLE
57996: EQUAL
57997: IFTRUE 58043
57999: LD_INT 8
58001: DOUBLE
58002: EQUAL
58003: IFTRUE 58043
58005: LD_INT 13
58007: DOUBLE
58008: EQUAL
58009: IFTRUE 58043
58011: LD_INT 12
58013: DOUBLE
58014: EQUAL
58015: IFTRUE 58043
58017: LD_INT 15
58019: DOUBLE
58020: EQUAL
58021: IFTRUE 58043
58023: LD_INT 11
58025: DOUBLE
58026: EQUAL
58027: IFTRUE 58043
58029: LD_INT 14
58031: DOUBLE
58032: EQUAL
58033: IFTRUE 58043
58035: LD_INT 10
58037: DOUBLE
58038: EQUAL
58039: IFTRUE 58043
58041: GO 58099
58043: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58044: LD_ADDR_VAR 0 9
58048: PUSH
58049: LD_VAR 0 41
58053: PUSH
58054: LD_VAR 0 42
58058: PUSH
58059: LD_VAR 0 43
58063: PUSH
58064: LD_VAR 0 44
58068: PUSH
58069: LD_VAR 0 45
58073: PUSH
58074: LD_VAR 0 46
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: PUSH
58087: LD_VAR 0 4
58091: PUSH
58092: LD_INT 1
58094: PLUS
58095: ARRAY
58096: ST_TO_ADDR
58097: GO 58352
58099: LD_INT 36
58101: DOUBLE
58102: EQUAL
58103: IFTRUE 58107
58105: GO 58163
58107: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58108: LD_ADDR_VAR 0 9
58112: PUSH
58113: LD_VAR 0 47
58117: PUSH
58118: LD_VAR 0 48
58122: PUSH
58123: LD_VAR 0 49
58127: PUSH
58128: LD_VAR 0 50
58132: PUSH
58133: LD_VAR 0 51
58137: PUSH
58138: LD_VAR 0 52
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: PUSH
58151: LD_VAR 0 4
58155: PUSH
58156: LD_INT 1
58158: PLUS
58159: ARRAY
58160: ST_TO_ADDR
58161: GO 58352
58163: LD_INT 4
58165: DOUBLE
58166: EQUAL
58167: IFTRUE 58189
58169: LD_INT 5
58171: DOUBLE
58172: EQUAL
58173: IFTRUE 58189
58175: LD_INT 34
58177: DOUBLE
58178: EQUAL
58179: IFTRUE 58189
58181: LD_INT 37
58183: DOUBLE
58184: EQUAL
58185: IFTRUE 58189
58187: GO 58245
58189: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58190: LD_ADDR_VAR 0 9
58194: PUSH
58195: LD_VAR 0 53
58199: PUSH
58200: LD_VAR 0 54
58204: PUSH
58205: LD_VAR 0 55
58209: PUSH
58210: LD_VAR 0 56
58214: PUSH
58215: LD_VAR 0 57
58219: PUSH
58220: LD_VAR 0 58
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: PUSH
58233: LD_VAR 0 4
58237: PUSH
58238: LD_INT 1
58240: PLUS
58241: ARRAY
58242: ST_TO_ADDR
58243: GO 58352
58245: LD_INT 31
58247: DOUBLE
58248: EQUAL
58249: IFTRUE 58295
58251: LD_INT 32
58253: DOUBLE
58254: EQUAL
58255: IFTRUE 58295
58257: LD_INT 33
58259: DOUBLE
58260: EQUAL
58261: IFTRUE 58295
58263: LD_INT 27
58265: DOUBLE
58266: EQUAL
58267: IFTRUE 58295
58269: LD_INT 26
58271: DOUBLE
58272: EQUAL
58273: IFTRUE 58295
58275: LD_INT 28
58277: DOUBLE
58278: EQUAL
58279: IFTRUE 58295
58281: LD_INT 29
58283: DOUBLE
58284: EQUAL
58285: IFTRUE 58295
58287: LD_INT 30
58289: DOUBLE
58290: EQUAL
58291: IFTRUE 58295
58293: GO 58351
58295: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58296: LD_ADDR_VAR 0 9
58300: PUSH
58301: LD_VAR 0 59
58305: PUSH
58306: LD_VAR 0 60
58310: PUSH
58311: LD_VAR 0 61
58315: PUSH
58316: LD_VAR 0 62
58320: PUSH
58321: LD_VAR 0 63
58325: PUSH
58326: LD_VAR 0 64
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: PUSH
58339: LD_VAR 0 4
58343: PUSH
58344: LD_INT 1
58346: PLUS
58347: ARRAY
58348: ST_TO_ADDR
58349: GO 58352
58351: POP
// temp_list2 = [ ] ;
58352: LD_ADDR_VAR 0 10
58356: PUSH
58357: EMPTY
58358: ST_TO_ADDR
// for i in temp_list do
58359: LD_ADDR_VAR 0 8
58363: PUSH
58364: LD_VAR 0 9
58368: PUSH
58369: FOR_IN
58370: IFFALSE 58422
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58372: LD_ADDR_VAR 0 10
58376: PUSH
58377: LD_VAR 0 10
58381: PUSH
58382: LD_VAR 0 8
58386: PUSH
58387: LD_INT 1
58389: ARRAY
58390: PUSH
58391: LD_VAR 0 2
58395: PLUS
58396: PUSH
58397: LD_VAR 0 8
58401: PUSH
58402: LD_INT 2
58404: ARRAY
58405: PUSH
58406: LD_VAR 0 3
58410: PLUS
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: EMPTY
58417: LIST
58418: ADD
58419: ST_TO_ADDR
58420: GO 58369
58422: POP
58423: POP
// result = temp_list2 ;
58424: LD_ADDR_VAR 0 7
58428: PUSH
58429: LD_VAR 0 10
58433: ST_TO_ADDR
// end ;
58434: LD_VAR 0 7
58438: RET
// export function EnemyInRange ( unit , dist ) ; begin
58439: LD_INT 0
58441: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58442: LD_ADDR_VAR 0 3
58446: PUSH
58447: LD_VAR 0 1
58451: PPUSH
58452: CALL_OW 255
58456: PPUSH
58457: LD_VAR 0 1
58461: PPUSH
58462: CALL_OW 250
58466: PPUSH
58467: LD_VAR 0 1
58471: PPUSH
58472: CALL_OW 251
58476: PPUSH
58477: LD_VAR 0 2
58481: PPUSH
58482: CALL 31841 0 4
58486: PUSH
58487: LD_INT 4
58489: ARRAY
58490: ST_TO_ADDR
// end ;
58491: LD_VAR 0 3
58495: RET
// export function PlayerSeeMe ( unit ) ; begin
58496: LD_INT 0
58498: PPUSH
// result := See ( your_side , unit ) ;
58499: LD_ADDR_VAR 0 2
58503: PUSH
58504: LD_OWVAR 2
58508: PPUSH
58509: LD_VAR 0 1
58513: PPUSH
58514: CALL_OW 292
58518: ST_TO_ADDR
// end ;
58519: LD_VAR 0 2
58523: RET
// export function ReverseDir ( unit ) ; begin
58524: LD_INT 0
58526: PPUSH
// if not unit then
58527: LD_VAR 0 1
58531: NOT
58532: IFFALSE 58536
// exit ;
58534: GO 58559
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58536: LD_ADDR_VAR 0 2
58540: PUSH
58541: LD_VAR 0 1
58545: PPUSH
58546: CALL_OW 254
58550: PUSH
58551: LD_INT 3
58553: PLUS
58554: PUSH
58555: LD_INT 6
58557: MOD
58558: ST_TO_ADDR
// end ;
58559: LD_VAR 0 2
58563: RET
// export function ReverseArray ( array ) ; var i ; begin
58564: LD_INT 0
58566: PPUSH
58567: PPUSH
// if not array then
58568: LD_VAR 0 1
58572: NOT
58573: IFFALSE 58577
// exit ;
58575: GO 58632
// result := [ ] ;
58577: LD_ADDR_VAR 0 2
58581: PUSH
58582: EMPTY
58583: ST_TO_ADDR
// for i := array downto 1 do
58584: LD_ADDR_VAR 0 3
58588: PUSH
58589: DOUBLE
58590: LD_VAR 0 1
58594: INC
58595: ST_TO_ADDR
58596: LD_INT 1
58598: PUSH
58599: FOR_DOWNTO
58600: IFFALSE 58630
// result := Join ( result , array [ i ] ) ;
58602: LD_ADDR_VAR 0 2
58606: PUSH
58607: LD_VAR 0 2
58611: PPUSH
58612: LD_VAR 0 1
58616: PUSH
58617: LD_VAR 0 3
58621: ARRAY
58622: PPUSH
58623: CALL 63257 0 2
58627: ST_TO_ADDR
58628: GO 58599
58630: POP
58631: POP
// end ;
58632: LD_VAR 0 2
58636: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
58637: LD_INT 0
58639: PPUSH
58640: PPUSH
58641: PPUSH
58642: PPUSH
58643: PPUSH
58644: PPUSH
// if not unit or not hexes then
58645: LD_VAR 0 1
58649: NOT
58650: PUSH
58651: LD_VAR 0 2
58655: NOT
58656: OR
58657: IFFALSE 58661
// exit ;
58659: GO 58784
// dist := 9999 ;
58661: LD_ADDR_VAR 0 5
58665: PUSH
58666: LD_INT 9999
58668: ST_TO_ADDR
// for i = 1 to hexes do
58669: LD_ADDR_VAR 0 4
58673: PUSH
58674: DOUBLE
58675: LD_INT 1
58677: DEC
58678: ST_TO_ADDR
58679: LD_VAR 0 2
58683: PUSH
58684: FOR_TO
58685: IFFALSE 58772
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58687: LD_ADDR_VAR 0 6
58691: PUSH
58692: LD_VAR 0 1
58696: PPUSH
58697: LD_VAR 0 2
58701: PUSH
58702: LD_VAR 0 4
58706: ARRAY
58707: PUSH
58708: LD_INT 1
58710: ARRAY
58711: PPUSH
58712: LD_VAR 0 2
58716: PUSH
58717: LD_VAR 0 4
58721: ARRAY
58722: PUSH
58723: LD_INT 2
58725: ARRAY
58726: PPUSH
58727: CALL_OW 297
58731: ST_TO_ADDR
// if tdist < dist then
58732: LD_VAR 0 6
58736: PUSH
58737: LD_VAR 0 5
58741: LESS
58742: IFFALSE 58770
// begin hex := hexes [ i ] ;
58744: LD_ADDR_VAR 0 8
58748: PUSH
58749: LD_VAR 0 2
58753: PUSH
58754: LD_VAR 0 4
58758: ARRAY
58759: ST_TO_ADDR
// dist := tdist ;
58760: LD_ADDR_VAR 0 5
58764: PUSH
58765: LD_VAR 0 6
58769: ST_TO_ADDR
// end ; end ;
58770: GO 58684
58772: POP
58773: POP
// result := hex ;
58774: LD_ADDR_VAR 0 3
58778: PUSH
58779: LD_VAR 0 8
58783: ST_TO_ADDR
// end ;
58784: LD_VAR 0 3
58788: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58789: LD_INT 0
58791: PPUSH
58792: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58793: LD_VAR 0 1
58797: NOT
58798: PUSH
58799: LD_VAR 0 1
58803: PUSH
58804: LD_INT 21
58806: PUSH
58807: LD_INT 2
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 23
58816: PUSH
58817: LD_INT 2
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PPUSH
58828: CALL_OW 69
58832: IN
58833: NOT
58834: OR
58835: IFFALSE 58839
// exit ;
58837: GO 58886
// for i = 1 to 3 do
58839: LD_ADDR_VAR 0 3
58843: PUSH
58844: DOUBLE
58845: LD_INT 1
58847: DEC
58848: ST_TO_ADDR
58849: LD_INT 3
58851: PUSH
58852: FOR_TO
58853: IFFALSE 58884
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58855: LD_VAR 0 1
58859: PPUSH
58860: CALL_OW 250
58864: PPUSH
58865: LD_VAR 0 1
58869: PPUSH
58870: CALL_OW 251
58874: PPUSH
58875: LD_INT 1
58877: PPUSH
58878: CALL_OW 453
58882: GO 58852
58884: POP
58885: POP
// end ;
58886: LD_VAR 0 2
58890: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58891: LD_INT 0
58893: PPUSH
58894: PPUSH
58895: PPUSH
58896: PPUSH
58897: PPUSH
58898: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58899: LD_VAR 0 1
58903: NOT
58904: PUSH
58905: LD_VAR 0 2
58909: NOT
58910: OR
58911: PUSH
58912: LD_VAR 0 1
58916: PPUSH
58917: CALL_OW 314
58921: OR
58922: IFFALSE 58926
// exit ;
58924: GO 59367
// x := GetX ( enemy_unit ) ;
58926: LD_ADDR_VAR 0 7
58930: PUSH
58931: LD_VAR 0 2
58935: PPUSH
58936: CALL_OW 250
58940: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58941: LD_ADDR_VAR 0 8
58945: PUSH
58946: LD_VAR 0 2
58950: PPUSH
58951: CALL_OW 251
58955: ST_TO_ADDR
// if not x or not y then
58956: LD_VAR 0 7
58960: NOT
58961: PUSH
58962: LD_VAR 0 8
58966: NOT
58967: OR
58968: IFFALSE 58972
// exit ;
58970: GO 59367
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58972: LD_ADDR_VAR 0 6
58976: PUSH
58977: LD_VAR 0 7
58981: PPUSH
58982: LD_INT 0
58984: PPUSH
58985: LD_INT 4
58987: PPUSH
58988: CALL_OW 272
58992: PUSH
58993: LD_VAR 0 8
58997: PPUSH
58998: LD_INT 0
59000: PPUSH
59001: LD_INT 4
59003: PPUSH
59004: CALL_OW 273
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_VAR 0 7
59017: PPUSH
59018: LD_INT 1
59020: PPUSH
59021: LD_INT 4
59023: PPUSH
59024: CALL_OW 272
59028: PUSH
59029: LD_VAR 0 8
59033: PPUSH
59034: LD_INT 1
59036: PPUSH
59037: LD_INT 4
59039: PPUSH
59040: CALL_OW 273
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_VAR 0 7
59053: PPUSH
59054: LD_INT 2
59056: PPUSH
59057: LD_INT 4
59059: PPUSH
59060: CALL_OW 272
59064: PUSH
59065: LD_VAR 0 8
59069: PPUSH
59070: LD_INT 2
59072: PPUSH
59073: LD_INT 4
59075: PPUSH
59076: CALL_OW 273
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_VAR 0 7
59089: PPUSH
59090: LD_INT 3
59092: PPUSH
59093: LD_INT 4
59095: PPUSH
59096: CALL_OW 272
59100: PUSH
59101: LD_VAR 0 8
59105: PPUSH
59106: LD_INT 3
59108: PPUSH
59109: LD_INT 4
59111: PPUSH
59112: CALL_OW 273
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_VAR 0 7
59125: PPUSH
59126: LD_INT 4
59128: PPUSH
59129: LD_INT 4
59131: PPUSH
59132: CALL_OW 272
59136: PUSH
59137: LD_VAR 0 8
59141: PPUSH
59142: LD_INT 4
59144: PPUSH
59145: LD_INT 4
59147: PPUSH
59148: CALL_OW 273
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_VAR 0 7
59161: PPUSH
59162: LD_INT 5
59164: PPUSH
59165: LD_INT 4
59167: PPUSH
59168: CALL_OW 272
59172: PUSH
59173: LD_VAR 0 8
59177: PPUSH
59178: LD_INT 5
59180: PPUSH
59181: LD_INT 4
59183: PPUSH
59184: CALL_OW 273
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: ST_TO_ADDR
// for i = tmp downto 1 do
59201: LD_ADDR_VAR 0 4
59205: PUSH
59206: DOUBLE
59207: LD_VAR 0 6
59211: INC
59212: ST_TO_ADDR
59213: LD_INT 1
59215: PUSH
59216: FOR_DOWNTO
59217: IFFALSE 59318
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59219: LD_VAR 0 6
59223: PUSH
59224: LD_VAR 0 4
59228: ARRAY
59229: PUSH
59230: LD_INT 1
59232: ARRAY
59233: PPUSH
59234: LD_VAR 0 6
59238: PUSH
59239: LD_VAR 0 4
59243: ARRAY
59244: PUSH
59245: LD_INT 2
59247: ARRAY
59248: PPUSH
59249: CALL_OW 488
59253: NOT
59254: PUSH
59255: LD_VAR 0 6
59259: PUSH
59260: LD_VAR 0 4
59264: ARRAY
59265: PUSH
59266: LD_INT 1
59268: ARRAY
59269: PPUSH
59270: LD_VAR 0 6
59274: PUSH
59275: LD_VAR 0 4
59279: ARRAY
59280: PUSH
59281: LD_INT 2
59283: ARRAY
59284: PPUSH
59285: CALL_OW 428
59289: PUSH
59290: LD_INT 0
59292: NONEQUAL
59293: OR
59294: IFFALSE 59316
// tmp := Delete ( tmp , i ) ;
59296: LD_ADDR_VAR 0 6
59300: PUSH
59301: LD_VAR 0 6
59305: PPUSH
59306: LD_VAR 0 4
59310: PPUSH
59311: CALL_OW 3
59315: ST_TO_ADDR
59316: GO 59216
59318: POP
59319: POP
// j := GetClosestHex ( unit , tmp ) ;
59320: LD_ADDR_VAR 0 5
59324: PUSH
59325: LD_VAR 0 1
59329: PPUSH
59330: LD_VAR 0 6
59334: PPUSH
59335: CALL 58637 0 2
59339: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59340: LD_VAR 0 1
59344: PPUSH
59345: LD_VAR 0 5
59349: PUSH
59350: LD_INT 1
59352: ARRAY
59353: PPUSH
59354: LD_VAR 0 5
59358: PUSH
59359: LD_INT 2
59361: ARRAY
59362: PPUSH
59363: CALL_OW 111
// end ;
59367: LD_VAR 0 3
59371: RET
// export function PrepareApemanSoldier ( ) ; begin
59372: LD_INT 0
59374: PPUSH
// uc_nation := 0 ;
59375: LD_ADDR_OWVAR 21
59379: PUSH
59380: LD_INT 0
59382: ST_TO_ADDR
// hc_sex := sex_male ;
59383: LD_ADDR_OWVAR 27
59387: PUSH
59388: LD_INT 1
59390: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
59391: LD_ADDR_OWVAR 28
59395: PUSH
59396: LD_INT 15
59398: ST_TO_ADDR
// hc_gallery :=  ;
59399: LD_ADDR_OWVAR 33
59403: PUSH
59404: LD_STRING 
59406: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59407: LD_ADDR_OWVAR 31
59411: PUSH
59412: LD_INT 0
59414: PPUSH
59415: LD_INT 3
59417: PPUSH
59418: CALL_OW 12
59422: PUSH
59423: LD_INT 0
59425: PPUSH
59426: LD_INT 3
59428: PPUSH
59429: CALL_OW 12
59433: PUSH
59434: LD_INT 0
59436: PUSH
59437: LD_INT 0
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: ST_TO_ADDR
// end ;
59446: LD_VAR 0 1
59450: RET
// export function PrepareApemanEngineer ( ) ; begin
59451: LD_INT 0
59453: PPUSH
// uc_nation := 0 ;
59454: LD_ADDR_OWVAR 21
59458: PUSH
59459: LD_INT 0
59461: ST_TO_ADDR
// hc_sex := sex_male ;
59462: LD_ADDR_OWVAR 27
59466: PUSH
59467: LD_INT 1
59469: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
59470: LD_ADDR_OWVAR 28
59474: PUSH
59475: LD_INT 16
59477: ST_TO_ADDR
// hc_gallery :=  ;
59478: LD_ADDR_OWVAR 33
59482: PUSH
59483: LD_STRING 
59485: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59486: LD_ADDR_OWVAR 31
59490: PUSH
59491: LD_INT 0
59493: PPUSH
59494: LD_INT 3
59496: PPUSH
59497: CALL_OW 12
59501: PUSH
59502: LD_INT 0
59504: PPUSH
59505: LD_INT 3
59507: PPUSH
59508: CALL_OW 12
59512: PUSH
59513: LD_INT 0
59515: PUSH
59516: LD_INT 0
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: ST_TO_ADDR
// end ;
59525: LD_VAR 0 1
59529: RET
// export function PrepareApeman ( agressivity ) ; begin
59530: LD_INT 0
59532: PPUSH
// uc_side := 0 ;
59533: LD_ADDR_OWVAR 20
59537: PUSH
59538: LD_INT 0
59540: ST_TO_ADDR
// uc_nation := 0 ;
59541: LD_ADDR_OWVAR 21
59545: PUSH
59546: LD_INT 0
59548: ST_TO_ADDR
// hc_sex := sex_male ;
59549: LD_ADDR_OWVAR 27
59553: PUSH
59554: LD_INT 1
59556: ST_TO_ADDR
// hc_class := class_apeman ;
59557: LD_ADDR_OWVAR 28
59561: PUSH
59562: LD_INT 12
59564: ST_TO_ADDR
// hc_gallery :=  ;
59565: LD_ADDR_OWVAR 33
59569: PUSH
59570: LD_STRING 
59572: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59573: LD_ADDR_OWVAR 35
59577: PUSH
59578: LD_VAR 0 1
59582: NEG
59583: PPUSH
59584: LD_VAR 0 1
59588: PPUSH
59589: CALL_OW 12
59593: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59594: LD_ADDR_OWVAR 31
59598: PUSH
59599: LD_INT 0
59601: PPUSH
59602: LD_INT 3
59604: PPUSH
59605: CALL_OW 12
59609: PUSH
59610: LD_INT 0
59612: PPUSH
59613: LD_INT 3
59615: PPUSH
59616: CALL_OW 12
59620: PUSH
59621: LD_INT 0
59623: PUSH
59624: LD_INT 0
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: ST_TO_ADDR
// end ;
59633: LD_VAR 0 2
59637: RET
// export function PrepareTiger ( agressivity ) ; begin
59638: LD_INT 0
59640: PPUSH
// uc_side := 0 ;
59641: LD_ADDR_OWVAR 20
59645: PUSH
59646: LD_INT 0
59648: ST_TO_ADDR
// uc_nation := 0 ;
59649: LD_ADDR_OWVAR 21
59653: PUSH
59654: LD_INT 0
59656: ST_TO_ADDR
// hc_class := class_tiger ;
59657: LD_ADDR_OWVAR 28
59661: PUSH
59662: LD_INT 14
59664: ST_TO_ADDR
// hc_gallery :=  ;
59665: LD_ADDR_OWVAR 33
59669: PUSH
59670: LD_STRING 
59672: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59673: LD_ADDR_OWVAR 35
59677: PUSH
59678: LD_VAR 0 1
59682: NEG
59683: PPUSH
59684: LD_VAR 0 1
59688: PPUSH
59689: CALL_OW 12
59693: ST_TO_ADDR
// end ;
59694: LD_VAR 0 2
59698: RET
// export function PrepareEnchidna ( ) ; begin
59699: LD_INT 0
59701: PPUSH
// uc_side := 0 ;
59702: LD_ADDR_OWVAR 20
59706: PUSH
59707: LD_INT 0
59709: ST_TO_ADDR
// uc_nation := 0 ;
59710: LD_ADDR_OWVAR 21
59714: PUSH
59715: LD_INT 0
59717: ST_TO_ADDR
// hc_class := class_baggie ;
59718: LD_ADDR_OWVAR 28
59722: PUSH
59723: LD_INT 13
59725: ST_TO_ADDR
// hc_gallery :=  ;
59726: LD_ADDR_OWVAR 33
59730: PUSH
59731: LD_STRING 
59733: ST_TO_ADDR
// end ;
59734: LD_VAR 0 1
59738: RET
// export function PrepareFrog ( ) ; begin
59739: LD_INT 0
59741: PPUSH
// uc_side := 0 ;
59742: LD_ADDR_OWVAR 20
59746: PUSH
59747: LD_INT 0
59749: ST_TO_ADDR
// uc_nation := 0 ;
59750: LD_ADDR_OWVAR 21
59754: PUSH
59755: LD_INT 0
59757: ST_TO_ADDR
// hc_class := class_frog ;
59758: LD_ADDR_OWVAR 28
59762: PUSH
59763: LD_INT 19
59765: ST_TO_ADDR
// hc_gallery :=  ;
59766: LD_ADDR_OWVAR 33
59770: PUSH
59771: LD_STRING 
59773: ST_TO_ADDR
// end ;
59774: LD_VAR 0 1
59778: RET
// export function PrepareFish ( ) ; begin
59779: LD_INT 0
59781: PPUSH
// uc_side := 0 ;
59782: LD_ADDR_OWVAR 20
59786: PUSH
59787: LD_INT 0
59789: ST_TO_ADDR
// uc_nation := 0 ;
59790: LD_ADDR_OWVAR 21
59794: PUSH
59795: LD_INT 0
59797: ST_TO_ADDR
// hc_class := class_fish ;
59798: LD_ADDR_OWVAR 28
59802: PUSH
59803: LD_INT 20
59805: ST_TO_ADDR
// hc_gallery :=  ;
59806: LD_ADDR_OWVAR 33
59810: PUSH
59811: LD_STRING 
59813: ST_TO_ADDR
// end ;
59814: LD_VAR 0 1
59818: RET
// export function PrepareBird ( ) ; begin
59819: LD_INT 0
59821: PPUSH
// uc_side := 0 ;
59822: LD_ADDR_OWVAR 20
59826: PUSH
59827: LD_INT 0
59829: ST_TO_ADDR
// uc_nation := 0 ;
59830: LD_ADDR_OWVAR 21
59834: PUSH
59835: LD_INT 0
59837: ST_TO_ADDR
// hc_class := class_phororhacos ;
59838: LD_ADDR_OWVAR 28
59842: PUSH
59843: LD_INT 18
59845: ST_TO_ADDR
// hc_gallery :=  ;
59846: LD_ADDR_OWVAR 33
59850: PUSH
59851: LD_STRING 
59853: ST_TO_ADDR
// end ;
59854: LD_VAR 0 1
59858: RET
// export function PrepareHorse ( ) ; begin
59859: LD_INT 0
59861: PPUSH
// uc_side := 0 ;
59862: LD_ADDR_OWVAR 20
59866: PUSH
59867: LD_INT 0
59869: ST_TO_ADDR
// uc_nation := 0 ;
59870: LD_ADDR_OWVAR 21
59874: PUSH
59875: LD_INT 0
59877: ST_TO_ADDR
// hc_class := class_horse ;
59878: LD_ADDR_OWVAR 28
59882: PUSH
59883: LD_INT 21
59885: ST_TO_ADDR
// hc_gallery :=  ;
59886: LD_ADDR_OWVAR 33
59890: PUSH
59891: LD_STRING 
59893: ST_TO_ADDR
// end ;
59894: LD_VAR 0 1
59898: RET
// export function PrepareMastodont ( ) ; begin
59899: LD_INT 0
59901: PPUSH
// uc_side := 0 ;
59902: LD_ADDR_OWVAR 20
59906: PUSH
59907: LD_INT 0
59909: ST_TO_ADDR
// uc_nation := 0 ;
59910: LD_ADDR_OWVAR 21
59914: PUSH
59915: LD_INT 0
59917: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59918: LD_ADDR_OWVAR 37
59922: PUSH
59923: LD_INT 31
59925: ST_TO_ADDR
// vc_control := control_rider ;
59926: LD_ADDR_OWVAR 38
59930: PUSH
59931: LD_INT 4
59933: ST_TO_ADDR
// end ;
59934: LD_VAR 0 1
59938: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59939: LD_INT 0
59941: PPUSH
59942: PPUSH
59943: PPUSH
// uc_side = 0 ;
59944: LD_ADDR_OWVAR 20
59948: PUSH
59949: LD_INT 0
59951: ST_TO_ADDR
// uc_nation = 0 ;
59952: LD_ADDR_OWVAR 21
59956: PUSH
59957: LD_INT 0
59959: ST_TO_ADDR
// InitHc_All ( ) ;
59960: CALL_OW 584
// InitVc ;
59964: CALL_OW 20
// if mastodonts then
59968: LD_VAR 0 6
59972: IFFALSE 60039
// for i = 1 to mastodonts do
59974: LD_ADDR_VAR 0 11
59978: PUSH
59979: DOUBLE
59980: LD_INT 1
59982: DEC
59983: ST_TO_ADDR
59984: LD_VAR 0 6
59988: PUSH
59989: FOR_TO
59990: IFFALSE 60037
// begin vc_chassis := 31 ;
59992: LD_ADDR_OWVAR 37
59996: PUSH
59997: LD_INT 31
59999: ST_TO_ADDR
// vc_control := control_rider ;
60000: LD_ADDR_OWVAR 38
60004: PUSH
60005: LD_INT 4
60007: ST_TO_ADDR
// animal := CreateVehicle ;
60008: LD_ADDR_VAR 0 12
60012: PUSH
60013: CALL_OW 45
60017: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60018: LD_VAR 0 12
60022: PPUSH
60023: LD_VAR 0 8
60027: PPUSH
60028: LD_INT 0
60030: PPUSH
60031: CALL 62174 0 3
// end ;
60035: GO 59989
60037: POP
60038: POP
// if horses then
60039: LD_VAR 0 5
60043: IFFALSE 60110
// for i = 1 to horses do
60045: LD_ADDR_VAR 0 11
60049: PUSH
60050: DOUBLE
60051: LD_INT 1
60053: DEC
60054: ST_TO_ADDR
60055: LD_VAR 0 5
60059: PUSH
60060: FOR_TO
60061: IFFALSE 60108
// begin hc_class := 21 ;
60063: LD_ADDR_OWVAR 28
60067: PUSH
60068: LD_INT 21
60070: ST_TO_ADDR
// hc_gallery :=  ;
60071: LD_ADDR_OWVAR 33
60075: PUSH
60076: LD_STRING 
60078: ST_TO_ADDR
// animal := CreateHuman ;
60079: LD_ADDR_VAR 0 12
60083: PUSH
60084: CALL_OW 44
60088: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60089: LD_VAR 0 12
60093: PPUSH
60094: LD_VAR 0 8
60098: PPUSH
60099: LD_INT 0
60101: PPUSH
60102: CALL 62174 0 3
// end ;
60106: GO 60060
60108: POP
60109: POP
// if birds then
60110: LD_VAR 0 1
60114: IFFALSE 60181
// for i = 1 to birds do
60116: LD_ADDR_VAR 0 11
60120: PUSH
60121: DOUBLE
60122: LD_INT 1
60124: DEC
60125: ST_TO_ADDR
60126: LD_VAR 0 1
60130: PUSH
60131: FOR_TO
60132: IFFALSE 60179
// begin hc_class = 18 ;
60134: LD_ADDR_OWVAR 28
60138: PUSH
60139: LD_INT 18
60141: ST_TO_ADDR
// hc_gallery =  ;
60142: LD_ADDR_OWVAR 33
60146: PUSH
60147: LD_STRING 
60149: ST_TO_ADDR
// animal := CreateHuman ;
60150: LD_ADDR_VAR 0 12
60154: PUSH
60155: CALL_OW 44
60159: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60160: LD_VAR 0 12
60164: PPUSH
60165: LD_VAR 0 8
60169: PPUSH
60170: LD_INT 0
60172: PPUSH
60173: CALL 62174 0 3
// end ;
60177: GO 60131
60179: POP
60180: POP
// if tigers then
60181: LD_VAR 0 2
60185: IFFALSE 60269
// for i = 1 to tigers do
60187: LD_ADDR_VAR 0 11
60191: PUSH
60192: DOUBLE
60193: LD_INT 1
60195: DEC
60196: ST_TO_ADDR
60197: LD_VAR 0 2
60201: PUSH
60202: FOR_TO
60203: IFFALSE 60267
// begin hc_class = class_tiger ;
60205: LD_ADDR_OWVAR 28
60209: PUSH
60210: LD_INT 14
60212: ST_TO_ADDR
// hc_gallery =  ;
60213: LD_ADDR_OWVAR 33
60217: PUSH
60218: LD_STRING 
60220: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60221: LD_ADDR_OWVAR 35
60225: PUSH
60226: LD_INT 7
60228: NEG
60229: PPUSH
60230: LD_INT 7
60232: PPUSH
60233: CALL_OW 12
60237: ST_TO_ADDR
// animal := CreateHuman ;
60238: LD_ADDR_VAR 0 12
60242: PUSH
60243: CALL_OW 44
60247: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60248: LD_VAR 0 12
60252: PPUSH
60253: LD_VAR 0 8
60257: PPUSH
60258: LD_INT 0
60260: PPUSH
60261: CALL 62174 0 3
// end ;
60265: GO 60202
60267: POP
60268: POP
// if apemans then
60269: LD_VAR 0 3
60273: IFFALSE 60396
// for i = 1 to apemans do
60275: LD_ADDR_VAR 0 11
60279: PUSH
60280: DOUBLE
60281: LD_INT 1
60283: DEC
60284: ST_TO_ADDR
60285: LD_VAR 0 3
60289: PUSH
60290: FOR_TO
60291: IFFALSE 60394
// begin hc_class = class_apeman ;
60293: LD_ADDR_OWVAR 28
60297: PUSH
60298: LD_INT 12
60300: ST_TO_ADDR
// hc_gallery =  ;
60301: LD_ADDR_OWVAR 33
60305: PUSH
60306: LD_STRING 
60308: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60309: LD_ADDR_OWVAR 35
60313: PUSH
60314: LD_INT 2
60316: NEG
60317: PPUSH
60318: LD_INT 2
60320: PPUSH
60321: CALL_OW 12
60325: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60326: LD_ADDR_OWVAR 31
60330: PUSH
60331: LD_INT 1
60333: PPUSH
60334: LD_INT 3
60336: PPUSH
60337: CALL_OW 12
60341: PUSH
60342: LD_INT 1
60344: PPUSH
60345: LD_INT 3
60347: PPUSH
60348: CALL_OW 12
60352: PUSH
60353: LD_INT 0
60355: PUSH
60356: LD_INT 0
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: ST_TO_ADDR
// animal := CreateHuman ;
60365: LD_ADDR_VAR 0 12
60369: PUSH
60370: CALL_OW 44
60374: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60375: LD_VAR 0 12
60379: PPUSH
60380: LD_VAR 0 8
60384: PPUSH
60385: LD_INT 0
60387: PPUSH
60388: CALL 62174 0 3
// end ;
60392: GO 60290
60394: POP
60395: POP
// if enchidnas then
60396: LD_VAR 0 4
60400: IFFALSE 60467
// for i = 1 to enchidnas do
60402: LD_ADDR_VAR 0 11
60406: PUSH
60407: DOUBLE
60408: LD_INT 1
60410: DEC
60411: ST_TO_ADDR
60412: LD_VAR 0 4
60416: PUSH
60417: FOR_TO
60418: IFFALSE 60465
// begin hc_class = 13 ;
60420: LD_ADDR_OWVAR 28
60424: PUSH
60425: LD_INT 13
60427: ST_TO_ADDR
// hc_gallery =  ;
60428: LD_ADDR_OWVAR 33
60432: PUSH
60433: LD_STRING 
60435: ST_TO_ADDR
// animal := CreateHuman ;
60436: LD_ADDR_VAR 0 12
60440: PUSH
60441: CALL_OW 44
60445: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60446: LD_VAR 0 12
60450: PPUSH
60451: LD_VAR 0 8
60455: PPUSH
60456: LD_INT 0
60458: PPUSH
60459: CALL 62174 0 3
// end ;
60463: GO 60417
60465: POP
60466: POP
// if fishes then
60467: LD_VAR 0 7
60471: IFFALSE 60538
// for i = 1 to fishes do
60473: LD_ADDR_VAR 0 11
60477: PUSH
60478: DOUBLE
60479: LD_INT 1
60481: DEC
60482: ST_TO_ADDR
60483: LD_VAR 0 7
60487: PUSH
60488: FOR_TO
60489: IFFALSE 60536
// begin hc_class = 20 ;
60491: LD_ADDR_OWVAR 28
60495: PUSH
60496: LD_INT 20
60498: ST_TO_ADDR
// hc_gallery =  ;
60499: LD_ADDR_OWVAR 33
60503: PUSH
60504: LD_STRING 
60506: ST_TO_ADDR
// animal := CreateHuman ;
60507: LD_ADDR_VAR 0 12
60511: PUSH
60512: CALL_OW 44
60516: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60517: LD_VAR 0 12
60521: PPUSH
60522: LD_VAR 0 9
60526: PPUSH
60527: LD_INT 0
60529: PPUSH
60530: CALL 62174 0 3
// end ;
60534: GO 60488
60536: POP
60537: POP
// end ;
60538: LD_VAR 0 10
60542: RET
// export function WantHeal ( sci , unit ) ; begin
60543: LD_INT 0
60545: PPUSH
// if GetTaskList ( sci ) > 0 then
60546: LD_VAR 0 1
60550: PPUSH
60551: CALL_OW 437
60555: PUSH
60556: LD_INT 0
60558: GREATER
60559: IFFALSE 60629
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60561: LD_VAR 0 1
60565: PPUSH
60566: CALL_OW 437
60570: PUSH
60571: LD_INT 1
60573: ARRAY
60574: PUSH
60575: LD_INT 1
60577: ARRAY
60578: PUSH
60579: LD_STRING l
60581: EQUAL
60582: PUSH
60583: LD_VAR 0 1
60587: PPUSH
60588: CALL_OW 437
60592: PUSH
60593: LD_INT 1
60595: ARRAY
60596: PUSH
60597: LD_INT 4
60599: ARRAY
60600: PUSH
60601: LD_VAR 0 2
60605: EQUAL
60606: AND
60607: IFFALSE 60619
// result := true else
60609: LD_ADDR_VAR 0 3
60613: PUSH
60614: LD_INT 1
60616: ST_TO_ADDR
60617: GO 60627
// result := false ;
60619: LD_ADDR_VAR 0 3
60623: PUSH
60624: LD_INT 0
60626: ST_TO_ADDR
// end else
60627: GO 60637
// result := false ;
60629: LD_ADDR_VAR 0 3
60633: PUSH
60634: LD_INT 0
60636: ST_TO_ADDR
// end ;
60637: LD_VAR 0 3
60641: RET
// export function HealTarget ( sci ) ; begin
60642: LD_INT 0
60644: PPUSH
// if not sci then
60645: LD_VAR 0 1
60649: NOT
60650: IFFALSE 60654
// exit ;
60652: GO 60719
// result := 0 ;
60654: LD_ADDR_VAR 0 2
60658: PUSH
60659: LD_INT 0
60661: ST_TO_ADDR
// if GetTaskList ( sci ) then
60662: LD_VAR 0 1
60666: PPUSH
60667: CALL_OW 437
60671: IFFALSE 60719
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60673: LD_VAR 0 1
60677: PPUSH
60678: CALL_OW 437
60682: PUSH
60683: LD_INT 1
60685: ARRAY
60686: PUSH
60687: LD_INT 1
60689: ARRAY
60690: PUSH
60691: LD_STRING l
60693: EQUAL
60694: IFFALSE 60719
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60696: LD_ADDR_VAR 0 2
60700: PUSH
60701: LD_VAR 0 1
60705: PPUSH
60706: CALL_OW 437
60710: PUSH
60711: LD_INT 1
60713: ARRAY
60714: PUSH
60715: LD_INT 4
60717: ARRAY
60718: ST_TO_ADDR
// end ;
60719: LD_VAR 0 2
60723: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60724: LD_INT 0
60726: PPUSH
60727: PPUSH
60728: PPUSH
60729: PPUSH
// if not base_units then
60730: LD_VAR 0 1
60734: NOT
60735: IFFALSE 60739
// exit ;
60737: GO 60826
// result := false ;
60739: LD_ADDR_VAR 0 2
60743: PUSH
60744: LD_INT 0
60746: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60747: LD_ADDR_VAR 0 5
60751: PUSH
60752: LD_VAR 0 1
60756: PPUSH
60757: LD_INT 21
60759: PUSH
60760: LD_INT 3
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PPUSH
60767: CALL_OW 72
60771: ST_TO_ADDR
// if not tmp then
60772: LD_VAR 0 5
60776: NOT
60777: IFFALSE 60781
// exit ;
60779: GO 60826
// for i in tmp do
60781: LD_ADDR_VAR 0 3
60785: PUSH
60786: LD_VAR 0 5
60790: PUSH
60791: FOR_IN
60792: IFFALSE 60824
// begin result := EnemyInRange ( i , 22 ) ;
60794: LD_ADDR_VAR 0 2
60798: PUSH
60799: LD_VAR 0 3
60803: PPUSH
60804: LD_INT 22
60806: PPUSH
60807: CALL 58439 0 2
60811: ST_TO_ADDR
// if result then
60812: LD_VAR 0 2
60816: IFFALSE 60822
// exit ;
60818: POP
60819: POP
60820: GO 60826
// end ;
60822: GO 60791
60824: POP
60825: POP
// end ;
60826: LD_VAR 0 2
60830: RET
// export function FilterByTag ( units , tag ) ; begin
60831: LD_INT 0
60833: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60834: LD_ADDR_VAR 0 3
60838: PUSH
60839: LD_VAR 0 1
60843: PPUSH
60844: LD_INT 120
60846: PUSH
60847: LD_VAR 0 2
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PPUSH
60856: CALL_OW 72
60860: ST_TO_ADDR
// end ;
60861: LD_VAR 0 3
60865: RET
// export function IsDriver ( un ) ; begin
60866: LD_INT 0
60868: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60869: LD_ADDR_VAR 0 2
60873: PUSH
60874: LD_VAR 0 1
60878: PUSH
60879: LD_INT 55
60881: PUSH
60882: EMPTY
60883: LIST
60884: PPUSH
60885: CALL_OW 69
60889: IN
60890: ST_TO_ADDR
// end ;
60891: LD_VAR 0 2
60895: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60896: LD_INT 0
60898: PPUSH
60899: PPUSH
// list := [ ] ;
60900: LD_ADDR_VAR 0 5
60904: PUSH
60905: EMPTY
60906: ST_TO_ADDR
// case d of 0 :
60907: LD_VAR 0 3
60911: PUSH
60912: LD_INT 0
60914: DOUBLE
60915: EQUAL
60916: IFTRUE 60920
60918: GO 61053
60920: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60921: LD_ADDR_VAR 0 5
60925: PUSH
60926: LD_VAR 0 1
60930: PUSH
60931: LD_INT 4
60933: MINUS
60934: PUSH
60935: LD_VAR 0 2
60939: PUSH
60940: LD_INT 4
60942: MINUS
60943: PUSH
60944: LD_INT 2
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: LIST
60951: PUSH
60952: LD_VAR 0 1
60956: PUSH
60957: LD_INT 3
60959: MINUS
60960: PUSH
60961: LD_VAR 0 2
60965: PUSH
60966: LD_INT 1
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: LIST
60973: PUSH
60974: LD_VAR 0 1
60978: PUSH
60979: LD_INT 4
60981: PLUS
60982: PUSH
60983: LD_VAR 0 2
60987: PUSH
60988: LD_INT 4
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: LIST
60995: PUSH
60996: LD_VAR 0 1
61000: PUSH
61001: LD_INT 3
61003: PLUS
61004: PUSH
61005: LD_VAR 0 2
61009: PUSH
61010: LD_INT 3
61012: PLUS
61013: PUSH
61014: LD_INT 5
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: LIST
61021: PUSH
61022: LD_VAR 0 1
61026: PUSH
61027: LD_VAR 0 2
61031: PUSH
61032: LD_INT 4
61034: PLUS
61035: PUSH
61036: LD_INT 0
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: LIST
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: ST_TO_ADDR
// end ; 1 :
61051: GO 61751
61053: LD_INT 1
61055: DOUBLE
61056: EQUAL
61057: IFTRUE 61061
61059: GO 61194
61061: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61062: LD_ADDR_VAR 0 5
61066: PUSH
61067: LD_VAR 0 1
61071: PUSH
61072: LD_VAR 0 2
61076: PUSH
61077: LD_INT 4
61079: MINUS
61080: PUSH
61081: LD_INT 3
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: LIST
61088: PUSH
61089: LD_VAR 0 1
61093: PUSH
61094: LD_INT 3
61096: MINUS
61097: PUSH
61098: LD_VAR 0 2
61102: PUSH
61103: LD_INT 3
61105: MINUS
61106: PUSH
61107: LD_INT 2
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: LIST
61114: PUSH
61115: LD_VAR 0 1
61119: PUSH
61120: LD_INT 4
61122: MINUS
61123: PUSH
61124: LD_VAR 0 2
61128: PUSH
61129: LD_INT 1
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: LIST
61136: PUSH
61137: LD_VAR 0 1
61141: PUSH
61142: LD_VAR 0 2
61146: PUSH
61147: LD_INT 3
61149: PLUS
61150: PUSH
61151: LD_INT 0
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: LIST
61158: PUSH
61159: LD_VAR 0 1
61163: PUSH
61164: LD_INT 4
61166: PLUS
61167: PUSH
61168: LD_VAR 0 2
61172: PUSH
61173: LD_INT 4
61175: PLUS
61176: PUSH
61177: LD_INT 5
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: LIST
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: ST_TO_ADDR
// end ; 2 :
61192: GO 61751
61194: LD_INT 2
61196: DOUBLE
61197: EQUAL
61198: IFTRUE 61202
61200: GO 61331
61202: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61203: LD_ADDR_VAR 0 5
61207: PUSH
61208: LD_VAR 0 1
61212: PUSH
61213: LD_VAR 0 2
61217: PUSH
61218: LD_INT 3
61220: MINUS
61221: PUSH
61222: LD_INT 3
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: LIST
61229: PUSH
61230: LD_VAR 0 1
61234: PUSH
61235: LD_INT 4
61237: PLUS
61238: PUSH
61239: LD_VAR 0 2
61243: PUSH
61244: LD_INT 4
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: LIST
61251: PUSH
61252: LD_VAR 0 1
61256: PUSH
61257: LD_VAR 0 2
61261: PUSH
61262: LD_INT 4
61264: PLUS
61265: PUSH
61266: LD_INT 0
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: LIST
61273: PUSH
61274: LD_VAR 0 1
61278: PUSH
61279: LD_INT 3
61281: MINUS
61282: PUSH
61283: LD_VAR 0 2
61287: PUSH
61288: LD_INT 1
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: LIST
61295: PUSH
61296: LD_VAR 0 1
61300: PUSH
61301: LD_INT 4
61303: MINUS
61304: PUSH
61305: LD_VAR 0 2
61309: PUSH
61310: LD_INT 4
61312: MINUS
61313: PUSH
61314: LD_INT 2
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: LIST
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: ST_TO_ADDR
// end ; 3 :
61329: GO 61751
61331: LD_INT 3
61333: DOUBLE
61334: EQUAL
61335: IFTRUE 61339
61337: GO 61472
61339: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61340: LD_ADDR_VAR 0 5
61344: PUSH
61345: LD_VAR 0 1
61349: PUSH
61350: LD_INT 3
61352: PLUS
61353: PUSH
61354: LD_VAR 0 2
61358: PUSH
61359: LD_INT 4
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: LIST
61366: PUSH
61367: LD_VAR 0 1
61371: PUSH
61372: LD_INT 4
61374: PLUS
61375: PUSH
61376: LD_VAR 0 2
61380: PUSH
61381: LD_INT 4
61383: PLUS
61384: PUSH
61385: LD_INT 5
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: LIST
61392: PUSH
61393: LD_VAR 0 1
61397: PUSH
61398: LD_INT 4
61400: MINUS
61401: PUSH
61402: LD_VAR 0 2
61406: PUSH
61407: LD_INT 1
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: LIST
61414: PUSH
61415: LD_VAR 0 1
61419: PUSH
61420: LD_VAR 0 2
61424: PUSH
61425: LD_INT 4
61427: MINUS
61428: PUSH
61429: LD_INT 3
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: LIST
61436: PUSH
61437: LD_VAR 0 1
61441: PUSH
61442: LD_INT 3
61444: MINUS
61445: PUSH
61446: LD_VAR 0 2
61450: PUSH
61451: LD_INT 3
61453: MINUS
61454: PUSH
61455: LD_INT 2
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: LIST
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: ST_TO_ADDR
// end ; 4 :
61470: GO 61751
61472: LD_INT 4
61474: DOUBLE
61475: EQUAL
61476: IFTRUE 61480
61478: GO 61613
61480: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61481: LD_ADDR_VAR 0 5
61485: PUSH
61486: LD_VAR 0 1
61490: PUSH
61491: LD_VAR 0 2
61495: PUSH
61496: LD_INT 4
61498: PLUS
61499: PUSH
61500: LD_INT 0
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: LIST
61507: PUSH
61508: LD_VAR 0 1
61512: PUSH
61513: LD_INT 3
61515: PLUS
61516: PUSH
61517: LD_VAR 0 2
61521: PUSH
61522: LD_INT 3
61524: PLUS
61525: PUSH
61526: LD_INT 5
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: LIST
61533: PUSH
61534: LD_VAR 0 1
61538: PUSH
61539: LD_INT 4
61541: PLUS
61542: PUSH
61543: LD_VAR 0 2
61547: PUSH
61548: LD_INT 4
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: LIST
61555: PUSH
61556: LD_VAR 0 1
61560: PUSH
61561: LD_VAR 0 2
61565: PUSH
61566: LD_INT 3
61568: MINUS
61569: PUSH
61570: LD_INT 3
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: LIST
61577: PUSH
61578: LD_VAR 0 1
61582: PUSH
61583: LD_INT 4
61585: MINUS
61586: PUSH
61587: LD_VAR 0 2
61591: PUSH
61592: LD_INT 4
61594: MINUS
61595: PUSH
61596: LD_INT 2
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: LIST
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: ST_TO_ADDR
// end ; 5 :
61611: GO 61751
61613: LD_INT 5
61615: DOUBLE
61616: EQUAL
61617: IFTRUE 61621
61619: GO 61750
61621: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61622: LD_ADDR_VAR 0 5
61626: PUSH
61627: LD_VAR 0 1
61631: PUSH
61632: LD_INT 4
61634: MINUS
61635: PUSH
61636: LD_VAR 0 2
61640: PUSH
61641: LD_INT 1
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: LIST
61648: PUSH
61649: LD_VAR 0 1
61653: PUSH
61654: LD_VAR 0 2
61658: PUSH
61659: LD_INT 4
61661: MINUS
61662: PUSH
61663: LD_INT 3
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: LIST
61670: PUSH
61671: LD_VAR 0 1
61675: PUSH
61676: LD_INT 4
61678: PLUS
61679: PUSH
61680: LD_VAR 0 2
61684: PUSH
61685: LD_INT 4
61687: PLUS
61688: PUSH
61689: LD_INT 5
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: LIST
61696: PUSH
61697: LD_VAR 0 1
61701: PUSH
61702: LD_INT 3
61704: PLUS
61705: PUSH
61706: LD_VAR 0 2
61710: PUSH
61711: LD_INT 4
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: LIST
61718: PUSH
61719: LD_VAR 0 1
61723: PUSH
61724: LD_VAR 0 2
61728: PUSH
61729: LD_INT 3
61731: PLUS
61732: PUSH
61733: LD_INT 0
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: LIST
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: ST_TO_ADDR
// end ; end ;
61748: GO 61751
61750: POP
// result := list ;
61751: LD_ADDR_VAR 0 4
61755: PUSH
61756: LD_VAR 0 5
61760: ST_TO_ADDR
// end ;
61761: LD_VAR 0 4
61765: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61766: LD_INT 0
61768: PPUSH
61769: PPUSH
61770: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61771: LD_VAR 0 1
61775: NOT
61776: PUSH
61777: LD_VAR 0 2
61781: PUSH
61782: LD_INT 1
61784: PUSH
61785: LD_INT 2
61787: PUSH
61788: LD_INT 3
61790: PUSH
61791: LD_INT 4
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: IN
61800: NOT
61801: OR
61802: IFFALSE 61806
// exit ;
61804: GO 61898
// tmp := [ ] ;
61806: LD_ADDR_VAR 0 5
61810: PUSH
61811: EMPTY
61812: ST_TO_ADDR
// for i in units do
61813: LD_ADDR_VAR 0 4
61817: PUSH
61818: LD_VAR 0 1
61822: PUSH
61823: FOR_IN
61824: IFFALSE 61867
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61826: LD_ADDR_VAR 0 5
61830: PUSH
61831: LD_VAR 0 5
61835: PPUSH
61836: LD_VAR 0 5
61840: PUSH
61841: LD_INT 1
61843: PLUS
61844: PPUSH
61845: LD_VAR 0 4
61849: PPUSH
61850: LD_VAR 0 2
61854: PPUSH
61855: CALL_OW 259
61859: PPUSH
61860: CALL_OW 2
61864: ST_TO_ADDR
61865: GO 61823
61867: POP
61868: POP
// if not tmp then
61869: LD_VAR 0 5
61873: NOT
61874: IFFALSE 61878
// exit ;
61876: GO 61898
// result := SortListByListDesc ( units , tmp ) ;
61878: LD_ADDR_VAR 0 3
61882: PUSH
61883: LD_VAR 0 1
61887: PPUSH
61888: LD_VAR 0 5
61892: PPUSH
61893: CALL_OW 77
61897: ST_TO_ADDR
// end ;
61898: LD_VAR 0 3
61902: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61903: LD_INT 0
61905: PPUSH
61906: PPUSH
61907: PPUSH
// result := false ;
61908: LD_ADDR_VAR 0 3
61912: PUSH
61913: LD_INT 0
61915: ST_TO_ADDR
// x := GetX ( building ) ;
61916: LD_ADDR_VAR 0 4
61920: PUSH
61921: LD_VAR 0 2
61925: PPUSH
61926: CALL_OW 250
61930: ST_TO_ADDR
// y := GetY ( building ) ;
61931: LD_ADDR_VAR 0 5
61935: PUSH
61936: LD_VAR 0 2
61940: PPUSH
61941: CALL_OW 251
61945: ST_TO_ADDR
// if not building or not x or not y then
61946: LD_VAR 0 2
61950: NOT
61951: PUSH
61952: LD_VAR 0 4
61956: NOT
61957: OR
61958: PUSH
61959: LD_VAR 0 5
61963: NOT
61964: OR
61965: IFFALSE 61969
// exit ;
61967: GO 62061
// if GetTaskList ( unit ) then
61969: LD_VAR 0 1
61973: PPUSH
61974: CALL_OW 437
61978: IFFALSE 62061
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61980: LD_STRING e
61982: PUSH
61983: LD_VAR 0 1
61987: PPUSH
61988: CALL_OW 437
61992: PUSH
61993: LD_INT 1
61995: ARRAY
61996: PUSH
61997: LD_INT 1
61999: ARRAY
62000: EQUAL
62001: PUSH
62002: LD_VAR 0 4
62006: PUSH
62007: LD_VAR 0 1
62011: PPUSH
62012: CALL_OW 437
62016: PUSH
62017: LD_INT 1
62019: ARRAY
62020: PUSH
62021: LD_INT 2
62023: ARRAY
62024: EQUAL
62025: AND
62026: PUSH
62027: LD_VAR 0 5
62031: PUSH
62032: LD_VAR 0 1
62036: PPUSH
62037: CALL_OW 437
62041: PUSH
62042: LD_INT 1
62044: ARRAY
62045: PUSH
62046: LD_INT 3
62048: ARRAY
62049: EQUAL
62050: AND
62051: IFFALSE 62061
// result := true end ;
62053: LD_ADDR_VAR 0 3
62057: PUSH
62058: LD_INT 1
62060: ST_TO_ADDR
// end ;
62061: LD_VAR 0 3
62065: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62066: LD_INT 0
62068: PPUSH
// result := false ;
62069: LD_ADDR_VAR 0 4
62073: PUSH
62074: LD_INT 0
62076: ST_TO_ADDR
// if GetTaskList ( unit ) then
62077: LD_VAR 0 1
62081: PPUSH
62082: CALL_OW 437
62086: IFFALSE 62169
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62088: LD_STRING M
62090: PUSH
62091: LD_VAR 0 1
62095: PPUSH
62096: CALL_OW 437
62100: PUSH
62101: LD_INT 1
62103: ARRAY
62104: PUSH
62105: LD_INT 1
62107: ARRAY
62108: EQUAL
62109: PUSH
62110: LD_VAR 0 2
62114: PUSH
62115: LD_VAR 0 1
62119: PPUSH
62120: CALL_OW 437
62124: PUSH
62125: LD_INT 1
62127: ARRAY
62128: PUSH
62129: LD_INT 2
62131: ARRAY
62132: EQUAL
62133: AND
62134: PUSH
62135: LD_VAR 0 3
62139: PUSH
62140: LD_VAR 0 1
62144: PPUSH
62145: CALL_OW 437
62149: PUSH
62150: LD_INT 1
62152: ARRAY
62153: PUSH
62154: LD_INT 3
62156: ARRAY
62157: EQUAL
62158: AND
62159: IFFALSE 62169
// result := true ;
62161: LD_ADDR_VAR 0 4
62165: PUSH
62166: LD_INT 1
62168: ST_TO_ADDR
// end ; end ;
62169: LD_VAR 0 4
62173: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62174: LD_INT 0
62176: PPUSH
62177: PPUSH
62178: PPUSH
62179: PPUSH
// if not unit or not area then
62180: LD_VAR 0 1
62184: NOT
62185: PUSH
62186: LD_VAR 0 2
62190: NOT
62191: OR
62192: IFFALSE 62196
// exit ;
62194: GO 62360
// tmp := AreaToList ( area , i ) ;
62196: LD_ADDR_VAR 0 6
62200: PUSH
62201: LD_VAR 0 2
62205: PPUSH
62206: LD_VAR 0 5
62210: PPUSH
62211: CALL_OW 517
62215: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62216: LD_ADDR_VAR 0 5
62220: PUSH
62221: DOUBLE
62222: LD_INT 1
62224: DEC
62225: ST_TO_ADDR
62226: LD_VAR 0 6
62230: PUSH
62231: LD_INT 1
62233: ARRAY
62234: PUSH
62235: FOR_TO
62236: IFFALSE 62358
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62238: LD_ADDR_VAR 0 7
62242: PUSH
62243: LD_VAR 0 6
62247: PUSH
62248: LD_INT 1
62250: ARRAY
62251: PUSH
62252: LD_VAR 0 5
62256: ARRAY
62257: PUSH
62258: LD_VAR 0 6
62262: PUSH
62263: LD_INT 2
62265: ARRAY
62266: PUSH
62267: LD_VAR 0 5
62271: ARRAY
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62277: LD_VAR 0 7
62281: PUSH
62282: LD_INT 1
62284: ARRAY
62285: PPUSH
62286: LD_VAR 0 7
62290: PUSH
62291: LD_INT 2
62293: ARRAY
62294: PPUSH
62295: CALL_OW 428
62299: PUSH
62300: LD_INT 0
62302: EQUAL
62303: IFFALSE 62356
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62305: LD_VAR 0 1
62309: PPUSH
62310: LD_VAR 0 7
62314: PUSH
62315: LD_INT 1
62317: ARRAY
62318: PPUSH
62319: LD_VAR 0 7
62323: PUSH
62324: LD_INT 2
62326: ARRAY
62327: PPUSH
62328: LD_VAR 0 3
62332: PPUSH
62333: CALL_OW 48
// result := IsPlaced ( unit ) ;
62337: LD_ADDR_VAR 0 4
62341: PUSH
62342: LD_VAR 0 1
62346: PPUSH
62347: CALL_OW 305
62351: ST_TO_ADDR
// exit ;
62352: POP
62353: POP
62354: GO 62360
// end ; end ;
62356: GO 62235
62358: POP
62359: POP
// end ;
62360: LD_VAR 0 4
62364: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62365: LD_INT 0
62367: PPUSH
62368: PPUSH
62369: PPUSH
// if not side or side > 8 then
62370: LD_VAR 0 1
62374: NOT
62375: PUSH
62376: LD_VAR 0 1
62380: PUSH
62381: LD_INT 8
62383: GREATER
62384: OR
62385: IFFALSE 62389
// exit ;
62387: GO 62576
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62389: LD_ADDR_VAR 0 4
62393: PUSH
62394: LD_INT 22
62396: PUSH
62397: LD_VAR 0 1
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 21
62408: PUSH
62409: LD_INT 3
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PPUSH
62420: CALL_OW 69
62424: ST_TO_ADDR
// if not tmp then
62425: LD_VAR 0 4
62429: NOT
62430: IFFALSE 62434
// exit ;
62432: GO 62576
// enable_addtolog := true ;
62434: LD_ADDR_OWVAR 81
62438: PUSH
62439: LD_INT 1
62441: ST_TO_ADDR
// AddToLog ( [ ) ;
62442: LD_STRING [
62444: PPUSH
62445: CALL_OW 561
// for i in tmp do
62449: LD_ADDR_VAR 0 3
62453: PUSH
62454: LD_VAR 0 4
62458: PUSH
62459: FOR_IN
62460: IFFALSE 62567
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62462: LD_STRING [
62464: PUSH
62465: LD_VAR 0 3
62469: PPUSH
62470: CALL_OW 266
62474: STR
62475: PUSH
62476: LD_STRING , 
62478: STR
62479: PUSH
62480: LD_VAR 0 3
62484: PPUSH
62485: CALL_OW 250
62489: STR
62490: PUSH
62491: LD_STRING , 
62493: STR
62494: PUSH
62495: LD_VAR 0 3
62499: PPUSH
62500: CALL_OW 251
62504: STR
62505: PUSH
62506: LD_STRING , 
62508: STR
62509: PUSH
62510: LD_VAR 0 3
62514: PPUSH
62515: CALL_OW 254
62519: STR
62520: PUSH
62521: LD_STRING , 
62523: STR
62524: PUSH
62525: LD_VAR 0 3
62529: PPUSH
62530: LD_INT 1
62532: PPUSH
62533: CALL_OW 268
62537: STR
62538: PUSH
62539: LD_STRING , 
62541: STR
62542: PUSH
62543: LD_VAR 0 3
62547: PPUSH
62548: LD_INT 2
62550: PPUSH
62551: CALL_OW 268
62555: STR
62556: PUSH
62557: LD_STRING ],
62559: STR
62560: PPUSH
62561: CALL_OW 561
// end ;
62565: GO 62459
62567: POP
62568: POP
// AddToLog ( ]; ) ;
62569: LD_STRING ];
62571: PPUSH
62572: CALL_OW 561
// end ;
62576: LD_VAR 0 2
62580: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62581: LD_INT 0
62583: PPUSH
62584: PPUSH
62585: PPUSH
62586: PPUSH
62587: PPUSH
// if not area or not rate or not max then
62588: LD_VAR 0 1
62592: NOT
62593: PUSH
62594: LD_VAR 0 2
62598: NOT
62599: OR
62600: PUSH
62601: LD_VAR 0 4
62605: NOT
62606: OR
62607: IFFALSE 62611
// exit ;
62609: GO 62800
// while 1 do
62611: LD_INT 1
62613: IFFALSE 62800
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62615: LD_ADDR_VAR 0 9
62619: PUSH
62620: LD_VAR 0 1
62624: PPUSH
62625: LD_INT 1
62627: PPUSH
62628: CALL_OW 287
62632: PUSH
62633: LD_INT 10
62635: MUL
62636: ST_TO_ADDR
// r := rate / 10 ;
62637: LD_ADDR_VAR 0 7
62641: PUSH
62642: LD_VAR 0 2
62646: PUSH
62647: LD_INT 10
62649: DIVREAL
62650: ST_TO_ADDR
// time := 1 1$00 ;
62651: LD_ADDR_VAR 0 8
62655: PUSH
62656: LD_INT 2100
62658: ST_TO_ADDR
// if amount < min then
62659: LD_VAR 0 9
62663: PUSH
62664: LD_VAR 0 3
62668: LESS
62669: IFFALSE 62687
// r := r * 2 else
62671: LD_ADDR_VAR 0 7
62675: PUSH
62676: LD_VAR 0 7
62680: PUSH
62681: LD_INT 2
62683: MUL
62684: ST_TO_ADDR
62685: GO 62713
// if amount > max then
62687: LD_VAR 0 9
62691: PUSH
62692: LD_VAR 0 4
62696: GREATER
62697: IFFALSE 62713
// r := r / 2 ;
62699: LD_ADDR_VAR 0 7
62703: PUSH
62704: LD_VAR 0 7
62708: PUSH
62709: LD_INT 2
62711: DIVREAL
62712: ST_TO_ADDR
// time := time / r ;
62713: LD_ADDR_VAR 0 8
62717: PUSH
62718: LD_VAR 0 8
62722: PUSH
62723: LD_VAR 0 7
62727: DIVREAL
62728: ST_TO_ADDR
// if time < 0 then
62729: LD_VAR 0 8
62733: PUSH
62734: LD_INT 0
62736: LESS
62737: IFFALSE 62754
// time := time * - 1 ;
62739: LD_ADDR_VAR 0 8
62743: PUSH
62744: LD_VAR 0 8
62748: PUSH
62749: LD_INT 1
62751: NEG
62752: MUL
62753: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62754: LD_VAR 0 8
62758: PUSH
62759: LD_INT 35
62761: PPUSH
62762: LD_INT 875
62764: PPUSH
62765: CALL_OW 12
62769: PLUS
62770: PPUSH
62771: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62775: LD_INT 1
62777: PPUSH
62778: LD_INT 5
62780: PPUSH
62781: CALL_OW 12
62785: PPUSH
62786: LD_VAR 0 1
62790: PPUSH
62791: LD_INT 1
62793: PPUSH
62794: CALL_OW 55
// end ;
62798: GO 62611
// end ;
62800: LD_VAR 0 5
62804: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62805: LD_INT 0
62807: PPUSH
62808: PPUSH
62809: PPUSH
62810: PPUSH
62811: PPUSH
62812: PPUSH
62813: PPUSH
62814: PPUSH
// if not turrets or not factories then
62815: LD_VAR 0 1
62819: NOT
62820: PUSH
62821: LD_VAR 0 2
62825: NOT
62826: OR
62827: IFFALSE 62831
// exit ;
62829: GO 63138
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62831: LD_ADDR_VAR 0 10
62835: PUSH
62836: LD_INT 5
62838: PUSH
62839: LD_INT 6
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PUSH
62846: LD_INT 2
62848: PUSH
62849: LD_INT 4
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: PUSH
62856: LD_INT 3
62858: PUSH
62859: LD_INT 5
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 24
62873: PUSH
62874: LD_INT 25
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 23
62883: PUSH
62884: LD_INT 27
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 42
62897: PUSH
62898: LD_INT 43
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 44
62907: PUSH
62908: LD_INT 46
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 45
62917: PUSH
62918: LD_INT 47
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: LIST
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: LIST
62934: ST_TO_ADDR
// result := [ ] ;
62935: LD_ADDR_VAR 0 3
62939: PUSH
62940: EMPTY
62941: ST_TO_ADDR
// for i in turrets do
62942: LD_ADDR_VAR 0 4
62946: PUSH
62947: LD_VAR 0 1
62951: PUSH
62952: FOR_IN
62953: IFFALSE 63136
// begin nat := GetNation ( i ) ;
62955: LD_ADDR_VAR 0 7
62959: PUSH
62960: LD_VAR 0 4
62964: PPUSH
62965: CALL_OW 248
62969: ST_TO_ADDR
// weapon := 0 ;
62970: LD_ADDR_VAR 0 8
62974: PUSH
62975: LD_INT 0
62977: ST_TO_ADDR
// if not nat then
62978: LD_VAR 0 7
62982: NOT
62983: IFFALSE 62987
// continue ;
62985: GO 62952
// for j in list [ nat ] do
62987: LD_ADDR_VAR 0 5
62991: PUSH
62992: LD_VAR 0 10
62996: PUSH
62997: LD_VAR 0 7
63001: ARRAY
63002: PUSH
63003: FOR_IN
63004: IFFALSE 63045
// if GetBWeapon ( i ) = j [ 1 ] then
63006: LD_VAR 0 4
63010: PPUSH
63011: CALL_OW 269
63015: PUSH
63016: LD_VAR 0 5
63020: PUSH
63021: LD_INT 1
63023: ARRAY
63024: EQUAL
63025: IFFALSE 63043
// begin weapon := j [ 2 ] ;
63027: LD_ADDR_VAR 0 8
63031: PUSH
63032: LD_VAR 0 5
63036: PUSH
63037: LD_INT 2
63039: ARRAY
63040: ST_TO_ADDR
// break ;
63041: GO 63045
// end ;
63043: GO 63003
63045: POP
63046: POP
// if not weapon then
63047: LD_VAR 0 8
63051: NOT
63052: IFFALSE 63056
// continue ;
63054: GO 62952
// for k in factories do
63056: LD_ADDR_VAR 0 6
63060: PUSH
63061: LD_VAR 0 2
63065: PUSH
63066: FOR_IN
63067: IFFALSE 63132
// begin weapons := AvailableWeaponList ( k ) ;
63069: LD_ADDR_VAR 0 9
63073: PUSH
63074: LD_VAR 0 6
63078: PPUSH
63079: CALL_OW 478
63083: ST_TO_ADDR
// if not weapons then
63084: LD_VAR 0 9
63088: NOT
63089: IFFALSE 63093
// continue ;
63091: GO 63066
// if weapon in weapons then
63093: LD_VAR 0 8
63097: PUSH
63098: LD_VAR 0 9
63102: IN
63103: IFFALSE 63130
// begin result := [ i , weapon ] ;
63105: LD_ADDR_VAR 0 3
63109: PUSH
63110: LD_VAR 0 4
63114: PUSH
63115: LD_VAR 0 8
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: ST_TO_ADDR
// exit ;
63124: POP
63125: POP
63126: POP
63127: POP
63128: GO 63138
// end ; end ;
63130: GO 63066
63132: POP
63133: POP
// end ;
63134: GO 62952
63136: POP
63137: POP
// end ;
63138: LD_VAR 0 3
63142: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63143: LD_INT 0
63145: PPUSH
// if not side or side > 8 then
63146: LD_VAR 0 3
63150: NOT
63151: PUSH
63152: LD_VAR 0 3
63156: PUSH
63157: LD_INT 8
63159: GREATER
63160: OR
63161: IFFALSE 63165
// exit ;
63163: GO 63224
// if not range then
63165: LD_VAR 0 4
63169: NOT
63170: IFFALSE 63181
// range := - 12 ;
63172: LD_ADDR_VAR 0 4
63176: PUSH
63177: LD_INT 12
63179: NEG
63180: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63181: LD_VAR 0 1
63185: PPUSH
63186: LD_VAR 0 2
63190: PPUSH
63191: LD_VAR 0 3
63195: PPUSH
63196: LD_VAR 0 4
63200: PPUSH
63201: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63205: LD_VAR 0 1
63209: PPUSH
63210: LD_VAR 0 2
63214: PPUSH
63215: LD_VAR 0 3
63219: PPUSH
63220: CALL_OW 331
// end ;
63224: LD_VAR 0 5
63228: RET
// export function Video ( mode ) ; begin
63229: LD_INT 0
63231: PPUSH
// ingame_video = mode ;
63232: LD_ADDR_OWVAR 52
63236: PUSH
63237: LD_VAR 0 1
63241: ST_TO_ADDR
// interface_hidden = mode ;
63242: LD_ADDR_OWVAR 54
63246: PUSH
63247: LD_VAR 0 1
63251: ST_TO_ADDR
// end ;
63252: LD_VAR 0 2
63256: RET
// export function Join ( array , element ) ; begin
63257: LD_INT 0
63259: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63260: LD_ADDR_VAR 0 3
63264: PUSH
63265: LD_VAR 0 1
63269: PPUSH
63270: LD_VAR 0 1
63274: PUSH
63275: LD_INT 1
63277: PLUS
63278: PPUSH
63279: LD_VAR 0 2
63283: PPUSH
63284: CALL_OW 1
63288: ST_TO_ADDR
// end ;
63289: LD_VAR 0 3
63293: RET
// export function JoinUnion ( array , element ) ; begin
63294: LD_INT 0
63296: PPUSH
// result := array union element ;
63297: LD_ADDR_VAR 0 3
63301: PUSH
63302: LD_VAR 0 1
63306: PUSH
63307: LD_VAR 0 2
63311: UNION
63312: ST_TO_ADDR
// end ;
63313: LD_VAR 0 3
63317: RET
// export function GetBehemoths ( side ) ; begin
63318: LD_INT 0
63320: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
63321: LD_ADDR_VAR 0 2
63325: PUSH
63326: LD_INT 22
63328: PUSH
63329: LD_VAR 0 1
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 31
63340: PUSH
63341: LD_INT 25
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PPUSH
63352: CALL_OW 69
63356: ST_TO_ADDR
// end ;
63357: LD_VAR 0 2
63361: RET
// export function Shuffle ( array ) ; var i , index ; begin
63362: LD_INT 0
63364: PPUSH
63365: PPUSH
63366: PPUSH
// result := [ ] ;
63367: LD_ADDR_VAR 0 2
63371: PUSH
63372: EMPTY
63373: ST_TO_ADDR
// if not array then
63374: LD_VAR 0 1
63378: NOT
63379: IFFALSE 63383
// exit ;
63381: GO 63482
// Randomize ;
63383: CALL_OW 10
// for i = array downto 1 do
63387: LD_ADDR_VAR 0 3
63391: PUSH
63392: DOUBLE
63393: LD_VAR 0 1
63397: INC
63398: ST_TO_ADDR
63399: LD_INT 1
63401: PUSH
63402: FOR_DOWNTO
63403: IFFALSE 63480
// begin index := rand ( 1 , array ) ;
63405: LD_ADDR_VAR 0 4
63409: PUSH
63410: LD_INT 1
63412: PPUSH
63413: LD_VAR 0 1
63417: PPUSH
63418: CALL_OW 12
63422: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63423: LD_ADDR_VAR 0 2
63427: PUSH
63428: LD_VAR 0 2
63432: PPUSH
63433: LD_VAR 0 2
63437: PUSH
63438: LD_INT 1
63440: PLUS
63441: PPUSH
63442: LD_VAR 0 1
63446: PUSH
63447: LD_VAR 0 4
63451: ARRAY
63452: PPUSH
63453: CALL_OW 2
63457: ST_TO_ADDR
// array := Delete ( array , index ) ;
63458: LD_ADDR_VAR 0 1
63462: PUSH
63463: LD_VAR 0 1
63467: PPUSH
63468: LD_VAR 0 4
63472: PPUSH
63473: CALL_OW 3
63477: ST_TO_ADDR
// end ;
63478: GO 63402
63480: POP
63481: POP
// end ;
63482: LD_VAR 0 2
63486: RET
// export function GetBaseMaterials ( base ) ; begin
63487: LD_INT 0
63489: PPUSH
// result := [ 0 , 0 , 0 ] ;
63490: LD_ADDR_VAR 0 2
63494: PUSH
63495: LD_INT 0
63497: PUSH
63498: LD_INT 0
63500: PUSH
63501: LD_INT 0
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: LIST
63508: ST_TO_ADDR
// if not base then
63509: LD_VAR 0 1
63513: NOT
63514: IFFALSE 63518
// exit ;
63516: GO 63567
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63518: LD_ADDR_VAR 0 2
63522: PUSH
63523: LD_VAR 0 1
63527: PPUSH
63528: LD_INT 1
63530: PPUSH
63531: CALL_OW 275
63535: PUSH
63536: LD_VAR 0 1
63540: PPUSH
63541: LD_INT 2
63543: PPUSH
63544: CALL_OW 275
63548: PUSH
63549: LD_VAR 0 1
63553: PPUSH
63554: LD_INT 3
63556: PPUSH
63557: CALL_OW 275
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: LIST
63566: ST_TO_ADDR
// end ;
63567: LD_VAR 0 2
63571: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63572: LD_INT 0
63574: PPUSH
63575: PPUSH
// result := array ;
63576: LD_ADDR_VAR 0 3
63580: PUSH
63581: LD_VAR 0 1
63585: ST_TO_ADDR
// if size >= result then
63586: LD_VAR 0 2
63590: PUSH
63591: LD_VAR 0 3
63595: GREATEREQUAL
63596: IFFALSE 63600
// exit ;
63598: GO 63650
// if size then
63600: LD_VAR 0 2
63604: IFFALSE 63650
// for i := array downto size do
63606: LD_ADDR_VAR 0 4
63610: PUSH
63611: DOUBLE
63612: LD_VAR 0 1
63616: INC
63617: ST_TO_ADDR
63618: LD_VAR 0 2
63622: PUSH
63623: FOR_DOWNTO
63624: IFFALSE 63648
// result := Delete ( result , result ) ;
63626: LD_ADDR_VAR 0 3
63630: PUSH
63631: LD_VAR 0 3
63635: PPUSH
63636: LD_VAR 0 3
63640: PPUSH
63641: CALL_OW 3
63645: ST_TO_ADDR
63646: GO 63623
63648: POP
63649: POP
// end ;
63650: LD_VAR 0 3
63654: RET
// export function ComExit ( unit ) ; var tmp ; begin
63655: LD_INT 0
63657: PPUSH
63658: PPUSH
// if not IsInUnit ( unit ) then
63659: LD_VAR 0 1
63663: PPUSH
63664: CALL_OW 310
63668: NOT
63669: IFFALSE 63673
// exit ;
63671: GO 63733
// tmp := IsInUnit ( unit ) ;
63673: LD_ADDR_VAR 0 3
63677: PUSH
63678: LD_VAR 0 1
63682: PPUSH
63683: CALL_OW 310
63687: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63688: LD_VAR 0 3
63692: PPUSH
63693: CALL_OW 247
63697: PUSH
63698: LD_INT 2
63700: EQUAL
63701: IFFALSE 63714
// ComExitVehicle ( unit ) else
63703: LD_VAR 0 1
63707: PPUSH
63708: CALL_OW 121
63712: GO 63723
// ComExitBuilding ( unit ) ;
63714: LD_VAR 0 1
63718: PPUSH
63719: CALL_OW 122
// result := tmp ;
63723: LD_ADDR_VAR 0 2
63727: PUSH
63728: LD_VAR 0 3
63732: ST_TO_ADDR
// end ;
63733: LD_VAR 0 2
63737: RET
// export function ComExitAll ( units ) ; var i ; begin
63738: LD_INT 0
63740: PPUSH
63741: PPUSH
// if not units then
63742: LD_VAR 0 1
63746: NOT
63747: IFFALSE 63751
// exit ;
63749: GO 63777
// for i in units do
63751: LD_ADDR_VAR 0 3
63755: PUSH
63756: LD_VAR 0 1
63760: PUSH
63761: FOR_IN
63762: IFFALSE 63775
// ComExit ( i ) ;
63764: LD_VAR 0 3
63768: PPUSH
63769: CALL 63655 0 1
63773: GO 63761
63775: POP
63776: POP
// end ;
63777: LD_VAR 0 2
63781: RET
// export function ResetHc ; begin
63782: LD_INT 0
63784: PPUSH
// InitHc ;
63785: CALL_OW 19
// hc_importance := 0 ;
63789: LD_ADDR_OWVAR 32
63793: PUSH
63794: LD_INT 0
63796: ST_TO_ADDR
// end ;
63797: LD_VAR 0 1
63801: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63802: LD_INT 0
63804: PPUSH
63805: PPUSH
63806: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63807: LD_ADDR_VAR 0 6
63811: PUSH
63812: LD_VAR 0 1
63816: PUSH
63817: LD_VAR 0 3
63821: PLUS
63822: PUSH
63823: LD_INT 2
63825: DIV
63826: ST_TO_ADDR
// if _x < 0 then
63827: LD_VAR 0 6
63831: PUSH
63832: LD_INT 0
63834: LESS
63835: IFFALSE 63852
// _x := _x * - 1 ;
63837: LD_ADDR_VAR 0 6
63841: PUSH
63842: LD_VAR 0 6
63846: PUSH
63847: LD_INT 1
63849: NEG
63850: MUL
63851: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63852: LD_ADDR_VAR 0 7
63856: PUSH
63857: LD_VAR 0 2
63861: PUSH
63862: LD_VAR 0 4
63866: PLUS
63867: PUSH
63868: LD_INT 2
63870: DIV
63871: ST_TO_ADDR
// if _y < 0 then
63872: LD_VAR 0 7
63876: PUSH
63877: LD_INT 0
63879: LESS
63880: IFFALSE 63897
// _y := _y * - 1 ;
63882: LD_ADDR_VAR 0 7
63886: PUSH
63887: LD_VAR 0 7
63891: PUSH
63892: LD_INT 1
63894: NEG
63895: MUL
63896: ST_TO_ADDR
// result := [ _x , _y ] ;
63897: LD_ADDR_VAR 0 5
63901: PUSH
63902: LD_VAR 0 6
63906: PUSH
63907: LD_VAR 0 7
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: ST_TO_ADDR
// end ;
63916: LD_VAR 0 5
63920: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63921: LD_INT 0
63923: PPUSH
63924: PPUSH
63925: PPUSH
63926: PPUSH
// task := GetTaskList ( unit ) ;
63927: LD_ADDR_VAR 0 7
63931: PUSH
63932: LD_VAR 0 1
63936: PPUSH
63937: CALL_OW 437
63941: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63942: LD_VAR 0 7
63946: NOT
63947: PUSH
63948: LD_VAR 0 1
63952: PPUSH
63953: LD_VAR 0 2
63957: PPUSH
63958: CALL_OW 308
63962: NOT
63963: AND
63964: IFFALSE 63968
// exit ;
63966: GO 64086
// if IsInArea ( unit , area ) then
63968: LD_VAR 0 1
63972: PPUSH
63973: LD_VAR 0 2
63977: PPUSH
63978: CALL_OW 308
63982: IFFALSE 64000
// begin ComMoveToArea ( unit , goAway ) ;
63984: LD_VAR 0 1
63988: PPUSH
63989: LD_VAR 0 3
63993: PPUSH
63994: CALL_OW 113
// exit ;
63998: GO 64086
// end ; if task [ 1 ] [ 1 ] <> M then
64000: LD_VAR 0 7
64004: PUSH
64005: LD_INT 1
64007: ARRAY
64008: PUSH
64009: LD_INT 1
64011: ARRAY
64012: PUSH
64013: LD_STRING M
64015: NONEQUAL
64016: IFFALSE 64020
// exit ;
64018: GO 64086
// x := task [ 1 ] [ 2 ] ;
64020: LD_ADDR_VAR 0 5
64024: PUSH
64025: LD_VAR 0 7
64029: PUSH
64030: LD_INT 1
64032: ARRAY
64033: PUSH
64034: LD_INT 2
64036: ARRAY
64037: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64038: LD_ADDR_VAR 0 6
64042: PUSH
64043: LD_VAR 0 7
64047: PUSH
64048: LD_INT 1
64050: ARRAY
64051: PUSH
64052: LD_INT 3
64054: ARRAY
64055: ST_TO_ADDR
// if InArea ( x , y , area ) then
64056: LD_VAR 0 5
64060: PPUSH
64061: LD_VAR 0 6
64065: PPUSH
64066: LD_VAR 0 2
64070: PPUSH
64071: CALL_OW 309
64075: IFFALSE 64086
// ComStop ( unit ) ;
64077: LD_VAR 0 1
64081: PPUSH
64082: CALL_OW 141
// end ;
64086: LD_VAR 0 4
64090: RET
// export function Abs ( value ) ; begin
64091: LD_INT 0
64093: PPUSH
// result := value ;
64094: LD_ADDR_VAR 0 2
64098: PUSH
64099: LD_VAR 0 1
64103: ST_TO_ADDR
// if value < 0 then
64104: LD_VAR 0 1
64108: PUSH
64109: LD_INT 0
64111: LESS
64112: IFFALSE 64129
// result := value * - 1 ;
64114: LD_ADDR_VAR 0 2
64118: PUSH
64119: LD_VAR 0 1
64123: PUSH
64124: LD_INT 1
64126: NEG
64127: MUL
64128: ST_TO_ADDR
// end ;
64129: LD_VAR 0 2
64133: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64134: LD_INT 0
64136: PPUSH
64137: PPUSH
64138: PPUSH
64139: PPUSH
64140: PPUSH
64141: PPUSH
64142: PPUSH
64143: PPUSH
// if not unit or not building then
64144: LD_VAR 0 1
64148: NOT
64149: PUSH
64150: LD_VAR 0 2
64154: NOT
64155: OR
64156: IFFALSE 64160
// exit ;
64158: GO 64386
// x := GetX ( building ) ;
64160: LD_ADDR_VAR 0 4
64164: PUSH
64165: LD_VAR 0 2
64169: PPUSH
64170: CALL_OW 250
64174: ST_TO_ADDR
// y := GetY ( building ) ;
64175: LD_ADDR_VAR 0 6
64179: PUSH
64180: LD_VAR 0 2
64184: PPUSH
64185: CALL_OW 251
64189: ST_TO_ADDR
// d := GetDir ( building ) ;
64190: LD_ADDR_VAR 0 8
64194: PUSH
64195: LD_VAR 0 2
64199: PPUSH
64200: CALL_OW 254
64204: ST_TO_ADDR
// r := 4 ;
64205: LD_ADDR_VAR 0 9
64209: PUSH
64210: LD_INT 4
64212: ST_TO_ADDR
// for i := 1 to 5 do
64213: LD_ADDR_VAR 0 10
64217: PUSH
64218: DOUBLE
64219: LD_INT 1
64221: DEC
64222: ST_TO_ADDR
64223: LD_INT 5
64225: PUSH
64226: FOR_TO
64227: IFFALSE 64384
// begin _x := ShiftX ( x , d , r + i ) ;
64229: LD_ADDR_VAR 0 5
64233: PUSH
64234: LD_VAR 0 4
64238: PPUSH
64239: LD_VAR 0 8
64243: PPUSH
64244: LD_VAR 0 9
64248: PUSH
64249: LD_VAR 0 10
64253: PLUS
64254: PPUSH
64255: CALL_OW 272
64259: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64260: LD_ADDR_VAR 0 7
64264: PUSH
64265: LD_VAR 0 6
64269: PPUSH
64270: LD_VAR 0 8
64274: PPUSH
64275: LD_VAR 0 9
64279: PUSH
64280: LD_VAR 0 10
64284: PLUS
64285: PPUSH
64286: CALL_OW 273
64290: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64291: LD_VAR 0 5
64295: PPUSH
64296: LD_VAR 0 7
64300: PPUSH
64301: CALL_OW 488
64305: PUSH
64306: LD_VAR 0 5
64310: PPUSH
64311: LD_VAR 0 7
64315: PPUSH
64316: CALL_OW 428
64320: PPUSH
64321: CALL_OW 247
64325: PUSH
64326: LD_INT 3
64328: PUSH
64329: LD_INT 2
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: IN
64336: NOT
64337: AND
64338: IFFALSE 64382
// begin ComMoveXY ( unit , _x , _y ) ;
64340: LD_VAR 0 1
64344: PPUSH
64345: LD_VAR 0 5
64349: PPUSH
64350: LD_VAR 0 7
64354: PPUSH
64355: CALL_OW 111
// result := [ _x , _y ] ;
64359: LD_ADDR_VAR 0 3
64363: PUSH
64364: LD_VAR 0 5
64368: PUSH
64369: LD_VAR 0 7
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: ST_TO_ADDR
// exit ;
64378: POP
64379: POP
64380: GO 64386
// end ; end ;
64382: GO 64226
64384: POP
64385: POP
// end ;
64386: LD_VAR 0 3
64390: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64391: LD_INT 0
64393: PPUSH
64394: PPUSH
64395: PPUSH
// result := 0 ;
64396: LD_ADDR_VAR 0 3
64400: PUSH
64401: LD_INT 0
64403: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64404: LD_VAR 0 1
64408: PUSH
64409: LD_INT 0
64411: LESS
64412: PUSH
64413: LD_VAR 0 1
64417: PUSH
64418: LD_INT 8
64420: GREATER
64421: OR
64422: PUSH
64423: LD_VAR 0 2
64427: PUSH
64428: LD_INT 0
64430: LESS
64431: OR
64432: PUSH
64433: LD_VAR 0 2
64437: PUSH
64438: LD_INT 8
64440: GREATER
64441: OR
64442: IFFALSE 64446
// exit ;
64444: GO 64521
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64446: LD_ADDR_VAR 0 4
64450: PUSH
64451: LD_INT 22
64453: PUSH
64454: LD_VAR 0 2
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PPUSH
64463: CALL_OW 69
64467: PUSH
64468: FOR_IN
64469: IFFALSE 64519
// begin un := UnitShoot ( i ) ;
64471: LD_ADDR_VAR 0 5
64475: PUSH
64476: LD_VAR 0 4
64480: PPUSH
64481: CALL_OW 504
64485: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64486: LD_VAR 0 5
64490: PPUSH
64491: CALL_OW 255
64495: PUSH
64496: LD_VAR 0 1
64500: EQUAL
64501: IFFALSE 64517
// begin result := un ;
64503: LD_ADDR_VAR 0 3
64507: PUSH
64508: LD_VAR 0 5
64512: ST_TO_ADDR
// exit ;
64513: POP
64514: POP
64515: GO 64521
// end ; end ;
64517: GO 64468
64519: POP
64520: POP
// end ;
64521: LD_VAR 0 3
64525: RET
// export function GetCargoBay ( units ) ; begin
64526: LD_INT 0
64528: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64529: LD_ADDR_VAR 0 2
64533: PUSH
64534: LD_VAR 0 1
64538: PPUSH
64539: LD_INT 2
64541: PUSH
64542: LD_INT 34
64544: PUSH
64545: LD_INT 12
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 34
64554: PUSH
64555: LD_INT 51
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 34
64564: PUSH
64565: LD_INT 32
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 34
64574: PUSH
64575: LD_INT 89
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: PPUSH
64589: CALL_OW 72
64593: ST_TO_ADDR
// end ;
64594: LD_VAR 0 2
64598: RET
// export function Negate ( value ) ; begin
64599: LD_INT 0
64601: PPUSH
// result := not value ;
64602: LD_ADDR_VAR 0 2
64606: PUSH
64607: LD_VAR 0 1
64611: NOT
64612: ST_TO_ADDR
// end ;
64613: LD_VAR 0 2
64617: RET
// export function Inc ( value ) ; begin
64618: LD_INT 0
64620: PPUSH
// result := value + 1 ;
64621: LD_ADDR_VAR 0 2
64625: PUSH
64626: LD_VAR 0 1
64630: PUSH
64631: LD_INT 1
64633: PLUS
64634: ST_TO_ADDR
// end ;
64635: LD_VAR 0 2
64639: RET
// export function Dec ( value ) ; begin
64640: LD_INT 0
64642: PPUSH
// result := value - 1 ;
64643: LD_ADDR_VAR 0 2
64647: PUSH
64648: LD_VAR 0 1
64652: PUSH
64653: LD_INT 1
64655: MINUS
64656: ST_TO_ADDR
// end ;
64657: LD_VAR 0 2
64661: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64662: LD_INT 0
64664: PPUSH
64665: PPUSH
64666: PPUSH
64667: PPUSH
64668: PPUSH
64669: PPUSH
64670: PPUSH
64671: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64672: LD_VAR 0 1
64676: PPUSH
64677: LD_VAR 0 2
64681: PPUSH
64682: CALL_OW 488
64686: NOT
64687: PUSH
64688: LD_VAR 0 3
64692: PPUSH
64693: LD_VAR 0 4
64697: PPUSH
64698: CALL_OW 488
64702: NOT
64703: OR
64704: IFFALSE 64717
// begin result := - 1 ;
64706: LD_ADDR_VAR 0 5
64710: PUSH
64711: LD_INT 1
64713: NEG
64714: ST_TO_ADDR
// exit ;
64715: GO 64952
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64717: LD_ADDR_VAR 0 12
64721: PUSH
64722: LD_VAR 0 1
64726: PPUSH
64727: LD_VAR 0 2
64731: PPUSH
64732: LD_VAR 0 3
64736: PPUSH
64737: LD_VAR 0 4
64741: PPUSH
64742: CALL 63802 0 4
64746: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64747: LD_ADDR_VAR 0 11
64751: PUSH
64752: LD_VAR 0 1
64756: PPUSH
64757: LD_VAR 0 2
64761: PPUSH
64762: LD_VAR 0 12
64766: PUSH
64767: LD_INT 1
64769: ARRAY
64770: PPUSH
64771: LD_VAR 0 12
64775: PUSH
64776: LD_INT 2
64778: ARRAY
64779: PPUSH
64780: CALL_OW 298
64784: ST_TO_ADDR
// distance := 9999 ;
64785: LD_ADDR_VAR 0 10
64789: PUSH
64790: LD_INT 9999
64792: ST_TO_ADDR
// for i := 0 to 5 do
64793: LD_ADDR_VAR 0 6
64797: PUSH
64798: DOUBLE
64799: LD_INT 0
64801: DEC
64802: ST_TO_ADDR
64803: LD_INT 5
64805: PUSH
64806: FOR_TO
64807: IFFALSE 64950
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64809: LD_ADDR_VAR 0 7
64813: PUSH
64814: LD_VAR 0 1
64818: PPUSH
64819: LD_VAR 0 6
64823: PPUSH
64824: LD_VAR 0 11
64828: PPUSH
64829: CALL_OW 272
64833: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64834: LD_ADDR_VAR 0 8
64838: PUSH
64839: LD_VAR 0 2
64843: PPUSH
64844: LD_VAR 0 6
64848: PPUSH
64849: LD_VAR 0 11
64853: PPUSH
64854: CALL_OW 273
64858: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64859: LD_VAR 0 7
64863: PPUSH
64864: LD_VAR 0 8
64868: PPUSH
64869: CALL_OW 488
64873: NOT
64874: IFFALSE 64878
// continue ;
64876: GO 64806
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64878: LD_ADDR_VAR 0 9
64882: PUSH
64883: LD_VAR 0 12
64887: PUSH
64888: LD_INT 1
64890: ARRAY
64891: PPUSH
64892: LD_VAR 0 12
64896: PUSH
64897: LD_INT 2
64899: ARRAY
64900: PPUSH
64901: LD_VAR 0 7
64905: PPUSH
64906: LD_VAR 0 8
64910: PPUSH
64911: CALL_OW 298
64915: ST_TO_ADDR
// if tmp < distance then
64916: LD_VAR 0 9
64920: PUSH
64921: LD_VAR 0 10
64925: LESS
64926: IFFALSE 64948
// begin result := i ;
64928: LD_ADDR_VAR 0 5
64932: PUSH
64933: LD_VAR 0 6
64937: ST_TO_ADDR
// distance := tmp ;
64938: LD_ADDR_VAR 0 10
64942: PUSH
64943: LD_VAR 0 9
64947: ST_TO_ADDR
// end ; end ;
64948: GO 64806
64950: POP
64951: POP
// end ;
64952: LD_VAR 0 5
64956: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64957: LD_INT 0
64959: PPUSH
64960: PPUSH
// if not driver or not IsInUnit ( driver ) then
64961: LD_VAR 0 1
64965: NOT
64966: PUSH
64967: LD_VAR 0 1
64971: PPUSH
64972: CALL_OW 310
64976: NOT
64977: OR
64978: IFFALSE 64982
// exit ;
64980: GO 65072
// vehicle := IsInUnit ( driver ) ;
64982: LD_ADDR_VAR 0 3
64986: PUSH
64987: LD_VAR 0 1
64991: PPUSH
64992: CALL_OW 310
64996: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64997: LD_VAR 0 1
65001: PPUSH
65002: LD_STRING \
65004: PUSH
65005: LD_INT 0
65007: PUSH
65008: LD_INT 0
65010: PUSH
65011: LD_INT 0
65013: PUSH
65014: LD_INT 0
65016: PUSH
65017: LD_INT 0
65019: PUSH
65020: LD_INT 0
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: LIST
65027: LIST
65028: LIST
65029: LIST
65030: LIST
65031: PUSH
65032: LD_STRING E
65034: PUSH
65035: LD_INT 0
65037: PUSH
65038: LD_INT 0
65040: PUSH
65041: LD_VAR 0 3
65045: PUSH
65046: LD_INT 0
65048: PUSH
65049: LD_INT 0
65051: PUSH
65052: LD_INT 0
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PPUSH
65068: CALL_OW 446
// end ;
65072: LD_VAR 0 2
65076: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65077: LD_INT 0
65079: PPUSH
65080: PPUSH
// if not driver or not IsInUnit ( driver ) then
65081: LD_VAR 0 1
65085: NOT
65086: PUSH
65087: LD_VAR 0 1
65091: PPUSH
65092: CALL_OW 310
65096: NOT
65097: OR
65098: IFFALSE 65102
// exit ;
65100: GO 65192
// vehicle := IsInUnit ( driver ) ;
65102: LD_ADDR_VAR 0 3
65106: PUSH
65107: LD_VAR 0 1
65111: PPUSH
65112: CALL_OW 310
65116: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65117: LD_VAR 0 1
65121: PPUSH
65122: LD_STRING \
65124: PUSH
65125: LD_INT 0
65127: PUSH
65128: LD_INT 0
65130: PUSH
65131: LD_INT 0
65133: PUSH
65134: LD_INT 0
65136: PUSH
65137: LD_INT 0
65139: PUSH
65140: LD_INT 0
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: PUSH
65152: LD_STRING E
65154: PUSH
65155: LD_INT 0
65157: PUSH
65158: LD_INT 0
65160: PUSH
65161: LD_VAR 0 3
65165: PUSH
65166: LD_INT 0
65168: PUSH
65169: LD_INT 0
65171: PUSH
65172: LD_INT 0
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: LIST
65182: LIST
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PPUSH
65188: CALL_OW 447
// end ;
65192: LD_VAR 0 2
65196: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65197: LD_INT 0
65199: PPUSH
65200: PPUSH
65201: PPUSH
// tmp := [ ] ;
65202: LD_ADDR_VAR 0 5
65206: PUSH
65207: EMPTY
65208: ST_TO_ADDR
// for i in units do
65209: LD_ADDR_VAR 0 4
65213: PUSH
65214: LD_VAR 0 1
65218: PUSH
65219: FOR_IN
65220: IFFALSE 65258
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65222: LD_ADDR_VAR 0 5
65226: PUSH
65227: LD_VAR 0 5
65231: PPUSH
65232: LD_VAR 0 5
65236: PUSH
65237: LD_INT 1
65239: PLUS
65240: PPUSH
65241: LD_VAR 0 4
65245: PPUSH
65246: CALL_OW 256
65250: PPUSH
65251: CALL_OW 2
65255: ST_TO_ADDR
65256: GO 65219
65258: POP
65259: POP
// if not tmp then
65260: LD_VAR 0 5
65264: NOT
65265: IFFALSE 65269
// exit ;
65267: GO 65317
// if asc then
65269: LD_VAR 0 2
65273: IFFALSE 65297
// result := SortListByListAsc ( units , tmp ) else
65275: LD_ADDR_VAR 0 3
65279: PUSH
65280: LD_VAR 0 1
65284: PPUSH
65285: LD_VAR 0 5
65289: PPUSH
65290: CALL_OW 76
65294: ST_TO_ADDR
65295: GO 65317
// result := SortListByListDesc ( units , tmp ) ;
65297: LD_ADDR_VAR 0 3
65301: PUSH
65302: LD_VAR 0 1
65306: PPUSH
65307: LD_VAR 0 5
65311: PPUSH
65312: CALL_OW 77
65316: ST_TO_ADDR
// end ;
65317: LD_VAR 0 3
65321: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65322: LD_INT 0
65324: PPUSH
65325: PPUSH
// task := GetTaskList ( mech ) ;
65326: LD_ADDR_VAR 0 4
65330: PUSH
65331: LD_VAR 0 1
65335: PPUSH
65336: CALL_OW 437
65340: ST_TO_ADDR
// if not task then
65341: LD_VAR 0 4
65345: NOT
65346: IFFALSE 65350
// exit ;
65348: GO 65392
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65350: LD_ADDR_VAR 0 3
65354: PUSH
65355: LD_VAR 0 4
65359: PUSH
65360: LD_INT 1
65362: ARRAY
65363: PUSH
65364: LD_INT 1
65366: ARRAY
65367: PUSH
65368: LD_STRING r
65370: EQUAL
65371: PUSH
65372: LD_VAR 0 4
65376: PUSH
65377: LD_INT 1
65379: ARRAY
65380: PUSH
65381: LD_INT 4
65383: ARRAY
65384: PUSH
65385: LD_VAR 0 2
65389: EQUAL
65390: AND
65391: ST_TO_ADDR
// end ;
65392: LD_VAR 0 3
65396: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65397: LD_INT 0
65399: PPUSH
// SetDir ( unit , d ) ;
65400: LD_VAR 0 1
65404: PPUSH
65405: LD_VAR 0 4
65409: PPUSH
65410: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65414: LD_VAR 0 1
65418: PPUSH
65419: LD_VAR 0 2
65423: PPUSH
65424: LD_VAR 0 3
65428: PPUSH
65429: LD_VAR 0 5
65433: PPUSH
65434: CALL_OW 48
// end ;
65438: LD_VAR 0 6
65442: RET
// export function ToNaturalNumber ( number ) ; begin
65443: LD_INT 0
65445: PPUSH
// result := number div 1 ;
65446: LD_ADDR_VAR 0 2
65450: PUSH
65451: LD_VAR 0 1
65455: PUSH
65456: LD_INT 1
65458: DIV
65459: ST_TO_ADDR
// if number < 0 then
65460: LD_VAR 0 1
65464: PUSH
65465: LD_INT 0
65467: LESS
65468: IFFALSE 65478
// result := 0 ;
65470: LD_ADDR_VAR 0 2
65474: PUSH
65475: LD_INT 0
65477: ST_TO_ADDR
// end ;
65478: LD_VAR 0 2
65482: RET
// export function SortByClass ( units , class ) ; var un ; begin
65483: LD_INT 0
65485: PPUSH
65486: PPUSH
// if not units or not class then
65487: LD_VAR 0 1
65491: NOT
65492: PUSH
65493: LD_VAR 0 2
65497: NOT
65498: OR
65499: IFFALSE 65503
// exit ;
65501: GO 65598
// result := [ ] ;
65503: LD_ADDR_VAR 0 3
65507: PUSH
65508: EMPTY
65509: ST_TO_ADDR
// for un in units do
65510: LD_ADDR_VAR 0 4
65514: PUSH
65515: LD_VAR 0 1
65519: PUSH
65520: FOR_IN
65521: IFFALSE 65596
// if GetClass ( un ) = class then
65523: LD_VAR 0 4
65527: PPUSH
65528: CALL_OW 257
65532: PUSH
65533: LD_VAR 0 2
65537: EQUAL
65538: IFFALSE 65565
// result := Insert ( result , 1 , un ) else
65540: LD_ADDR_VAR 0 3
65544: PUSH
65545: LD_VAR 0 3
65549: PPUSH
65550: LD_INT 1
65552: PPUSH
65553: LD_VAR 0 4
65557: PPUSH
65558: CALL_OW 2
65562: ST_TO_ADDR
65563: GO 65594
// result := Replace ( result , result + 1 , un ) ;
65565: LD_ADDR_VAR 0 3
65569: PUSH
65570: LD_VAR 0 3
65574: PPUSH
65575: LD_VAR 0 3
65579: PUSH
65580: LD_INT 1
65582: PLUS
65583: PPUSH
65584: LD_VAR 0 4
65588: PPUSH
65589: CALL_OW 1
65593: ST_TO_ADDR
65594: GO 65520
65596: POP
65597: POP
// end ;
65598: LD_VAR 0 3
65602: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65603: LD_INT 0
65605: PPUSH
65606: PPUSH
65607: PPUSH
65608: PPUSH
65609: PPUSH
65610: PPUSH
65611: PPUSH
// result := [ ] ;
65612: LD_ADDR_VAR 0 4
65616: PUSH
65617: EMPTY
65618: ST_TO_ADDR
// if x - r < 0 then
65619: LD_VAR 0 1
65623: PUSH
65624: LD_VAR 0 3
65628: MINUS
65629: PUSH
65630: LD_INT 0
65632: LESS
65633: IFFALSE 65645
// min_x := 0 else
65635: LD_ADDR_VAR 0 8
65639: PUSH
65640: LD_INT 0
65642: ST_TO_ADDR
65643: GO 65661
// min_x := x - r ;
65645: LD_ADDR_VAR 0 8
65649: PUSH
65650: LD_VAR 0 1
65654: PUSH
65655: LD_VAR 0 3
65659: MINUS
65660: ST_TO_ADDR
// if y - r < 0 then
65661: LD_VAR 0 2
65665: PUSH
65666: LD_VAR 0 3
65670: MINUS
65671: PUSH
65672: LD_INT 0
65674: LESS
65675: IFFALSE 65687
// min_y := 0 else
65677: LD_ADDR_VAR 0 7
65681: PUSH
65682: LD_INT 0
65684: ST_TO_ADDR
65685: GO 65703
// min_y := y - r ;
65687: LD_ADDR_VAR 0 7
65691: PUSH
65692: LD_VAR 0 2
65696: PUSH
65697: LD_VAR 0 3
65701: MINUS
65702: ST_TO_ADDR
// max_x := x + r ;
65703: LD_ADDR_VAR 0 9
65707: PUSH
65708: LD_VAR 0 1
65712: PUSH
65713: LD_VAR 0 3
65717: PLUS
65718: ST_TO_ADDR
// max_y := y + r ;
65719: LD_ADDR_VAR 0 10
65723: PUSH
65724: LD_VAR 0 2
65728: PUSH
65729: LD_VAR 0 3
65733: PLUS
65734: ST_TO_ADDR
// for _x = min_x to max_x do
65735: LD_ADDR_VAR 0 5
65739: PUSH
65740: DOUBLE
65741: LD_VAR 0 8
65745: DEC
65746: ST_TO_ADDR
65747: LD_VAR 0 9
65751: PUSH
65752: FOR_TO
65753: IFFALSE 65854
// for _y = min_y to max_y do
65755: LD_ADDR_VAR 0 6
65759: PUSH
65760: DOUBLE
65761: LD_VAR 0 7
65765: DEC
65766: ST_TO_ADDR
65767: LD_VAR 0 10
65771: PUSH
65772: FOR_TO
65773: IFFALSE 65850
// begin if not ValidHex ( _x , _y ) then
65775: LD_VAR 0 5
65779: PPUSH
65780: LD_VAR 0 6
65784: PPUSH
65785: CALL_OW 488
65789: NOT
65790: IFFALSE 65794
// continue ;
65792: GO 65772
// if GetResourceTypeXY ( _x , _y ) then
65794: LD_VAR 0 5
65798: PPUSH
65799: LD_VAR 0 6
65803: PPUSH
65804: CALL_OW 283
65808: IFFALSE 65848
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65810: LD_ADDR_VAR 0 4
65814: PUSH
65815: LD_VAR 0 4
65819: PPUSH
65820: LD_VAR 0 4
65824: PUSH
65825: LD_INT 1
65827: PLUS
65828: PPUSH
65829: LD_VAR 0 5
65833: PUSH
65834: LD_VAR 0 6
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PPUSH
65843: CALL_OW 1
65847: ST_TO_ADDR
// end ;
65848: GO 65772
65850: POP
65851: POP
65852: GO 65752
65854: POP
65855: POP
// end ;
65856: LD_VAR 0 4
65860: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65861: LD_INT 0
65863: PPUSH
65864: PPUSH
65865: PPUSH
65866: PPUSH
65867: PPUSH
65868: PPUSH
65869: PPUSH
65870: PPUSH
// if not units then
65871: LD_VAR 0 1
65875: NOT
65876: IFFALSE 65880
// exit ;
65878: GO 66404
// result := UnitFilter ( units , [ f_ok ] ) ;
65880: LD_ADDR_VAR 0 3
65884: PUSH
65885: LD_VAR 0 1
65889: PPUSH
65890: LD_INT 50
65892: PUSH
65893: EMPTY
65894: LIST
65895: PPUSH
65896: CALL_OW 72
65900: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65901: LD_ADDR_VAR 0 8
65905: PUSH
65906: LD_VAR 0 1
65910: PUSH
65911: LD_INT 1
65913: ARRAY
65914: PPUSH
65915: CALL_OW 255
65919: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65920: LD_ADDR_VAR 0 10
65924: PUSH
65925: LD_INT 29
65927: PUSH
65928: LD_INT 91
65930: PUSH
65931: LD_INT 49
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: LIST
65938: ST_TO_ADDR
// if not result then
65939: LD_VAR 0 3
65943: NOT
65944: IFFALSE 65948
// exit ;
65946: GO 66404
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65948: LD_ADDR_VAR 0 5
65952: PUSH
65953: LD_INT 81
65955: PUSH
65956: LD_VAR 0 8
65960: PUSH
65961: EMPTY
65962: LIST
65963: LIST
65964: PPUSH
65965: CALL_OW 69
65969: ST_TO_ADDR
// for i in result do
65970: LD_ADDR_VAR 0 4
65974: PUSH
65975: LD_VAR 0 3
65979: PUSH
65980: FOR_IN
65981: IFFALSE 66402
// begin tag := GetTag ( i ) + 1 ;
65983: LD_ADDR_VAR 0 9
65987: PUSH
65988: LD_VAR 0 4
65992: PPUSH
65993: CALL_OW 110
65997: PUSH
65998: LD_INT 1
66000: PLUS
66001: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
66002: LD_ADDR_VAR 0 7
66006: PUSH
66007: LD_VAR 0 4
66011: PPUSH
66012: CALL_OW 250
66016: PPUSH
66017: LD_VAR 0 4
66021: PPUSH
66022: CALL_OW 251
66026: PPUSH
66027: LD_INT 6
66029: PPUSH
66030: CALL 65603 0 3
66034: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
66035: LD_VAR 0 4
66039: PPUSH
66040: CALL_OW 247
66044: PUSH
66045: LD_INT 2
66047: EQUAL
66048: PUSH
66049: LD_VAR 0 7
66053: AND
66054: PUSH
66055: LD_VAR 0 4
66059: PPUSH
66060: CALL_OW 264
66064: PUSH
66065: LD_VAR 0 10
66069: IN
66070: NOT
66071: AND
66072: IFFALSE 66111
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66074: LD_VAR 0 4
66078: PPUSH
66079: LD_VAR 0 7
66083: PUSH
66084: LD_INT 1
66086: ARRAY
66087: PUSH
66088: LD_INT 1
66090: ARRAY
66091: PPUSH
66092: LD_VAR 0 7
66096: PUSH
66097: LD_INT 1
66099: ARRAY
66100: PUSH
66101: LD_INT 2
66103: ARRAY
66104: PPUSH
66105: CALL_OW 116
66109: GO 66400
// if path > tag then
66111: LD_VAR 0 2
66115: PUSH
66116: LD_VAR 0 9
66120: GREATER
66121: IFFALSE 66329
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
66123: LD_ADDR_VAR 0 6
66127: PUSH
66128: LD_VAR 0 5
66132: PPUSH
66133: LD_INT 91
66135: PUSH
66136: LD_VAR 0 4
66140: PUSH
66141: LD_INT 8
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: LIST
66148: PPUSH
66149: CALL_OW 72
66153: ST_TO_ADDR
// if nearEnemy then
66154: LD_VAR 0 6
66158: IFFALSE 66227
// begin if GetWeapon ( i ) = ru_time_lapser then
66160: LD_VAR 0 4
66164: PPUSH
66165: CALL_OW 264
66169: PUSH
66170: LD_INT 49
66172: EQUAL
66173: IFFALSE 66201
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
66175: LD_VAR 0 4
66179: PPUSH
66180: LD_VAR 0 6
66184: PPUSH
66185: LD_VAR 0 4
66189: PPUSH
66190: CALL_OW 74
66194: PPUSH
66195: CALL_OW 112
66199: GO 66225
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
66201: LD_VAR 0 4
66205: PPUSH
66206: LD_VAR 0 6
66210: PPUSH
66211: LD_VAR 0 4
66215: PPUSH
66216: CALL_OW 74
66220: PPUSH
66221: CALL_OW 115
// end else
66225: GO 66327
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66227: LD_VAR 0 4
66231: PPUSH
66232: LD_VAR 0 2
66236: PUSH
66237: LD_VAR 0 9
66241: ARRAY
66242: PUSH
66243: LD_INT 1
66245: ARRAY
66246: PPUSH
66247: LD_VAR 0 2
66251: PUSH
66252: LD_VAR 0 9
66256: ARRAY
66257: PUSH
66258: LD_INT 2
66260: ARRAY
66261: PPUSH
66262: CALL_OW 297
66266: PUSH
66267: LD_INT 6
66269: GREATER
66270: IFFALSE 66313
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66272: LD_VAR 0 4
66276: PPUSH
66277: LD_VAR 0 2
66281: PUSH
66282: LD_VAR 0 9
66286: ARRAY
66287: PUSH
66288: LD_INT 1
66290: ARRAY
66291: PPUSH
66292: LD_VAR 0 2
66296: PUSH
66297: LD_VAR 0 9
66301: ARRAY
66302: PUSH
66303: LD_INT 2
66305: ARRAY
66306: PPUSH
66307: CALL_OW 114
66311: GO 66327
// SetTag ( i , tag ) ;
66313: LD_VAR 0 4
66317: PPUSH
66318: LD_VAR 0 9
66322: PPUSH
66323: CALL_OW 109
// end else
66327: GO 66400
// if enemy then
66329: LD_VAR 0 5
66333: IFFALSE 66400
// begin if GetWeapon ( i ) = ru_time_lapser then
66335: LD_VAR 0 4
66339: PPUSH
66340: CALL_OW 264
66344: PUSH
66345: LD_INT 49
66347: EQUAL
66348: IFFALSE 66376
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66350: LD_VAR 0 4
66354: PPUSH
66355: LD_VAR 0 5
66359: PPUSH
66360: LD_VAR 0 4
66364: PPUSH
66365: CALL_OW 74
66369: PPUSH
66370: CALL_OW 112
66374: GO 66400
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66376: LD_VAR 0 4
66380: PPUSH
66381: LD_VAR 0 5
66385: PPUSH
66386: LD_VAR 0 4
66390: PPUSH
66391: CALL_OW 74
66395: PPUSH
66396: CALL_OW 115
// end ; end ;
66400: GO 65980
66402: POP
66403: POP
// end ;
66404: LD_VAR 0 3
66408: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66409: LD_INT 0
66411: PPUSH
66412: PPUSH
66413: PPUSH
// if not unit or IsInUnit ( unit ) then
66414: LD_VAR 0 1
66418: NOT
66419: PUSH
66420: LD_VAR 0 1
66424: PPUSH
66425: CALL_OW 310
66429: OR
66430: IFFALSE 66434
// exit ;
66432: GO 66525
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66434: LD_ADDR_VAR 0 4
66438: PUSH
66439: LD_VAR 0 1
66443: PPUSH
66444: CALL_OW 250
66448: PPUSH
66449: LD_VAR 0 2
66453: PPUSH
66454: LD_INT 1
66456: PPUSH
66457: CALL_OW 272
66461: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66462: LD_ADDR_VAR 0 5
66466: PUSH
66467: LD_VAR 0 1
66471: PPUSH
66472: CALL_OW 251
66476: PPUSH
66477: LD_VAR 0 2
66481: PPUSH
66482: LD_INT 1
66484: PPUSH
66485: CALL_OW 273
66489: ST_TO_ADDR
// if ValidHex ( x , y ) then
66490: LD_VAR 0 4
66494: PPUSH
66495: LD_VAR 0 5
66499: PPUSH
66500: CALL_OW 488
66504: IFFALSE 66525
// ComTurnXY ( unit , x , y ) ;
66506: LD_VAR 0 1
66510: PPUSH
66511: LD_VAR 0 4
66515: PPUSH
66516: LD_VAR 0 5
66520: PPUSH
66521: CALL_OW 118
// end ;
66525: LD_VAR 0 3
66529: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66530: LD_INT 0
66532: PPUSH
66533: PPUSH
// result := false ;
66534: LD_ADDR_VAR 0 3
66538: PUSH
66539: LD_INT 0
66541: ST_TO_ADDR
// if not units then
66542: LD_VAR 0 2
66546: NOT
66547: IFFALSE 66551
// exit ;
66549: GO 66596
// for i in units do
66551: LD_ADDR_VAR 0 4
66555: PUSH
66556: LD_VAR 0 2
66560: PUSH
66561: FOR_IN
66562: IFFALSE 66594
// if See ( side , i ) then
66564: LD_VAR 0 1
66568: PPUSH
66569: LD_VAR 0 4
66573: PPUSH
66574: CALL_OW 292
66578: IFFALSE 66592
// begin result := true ;
66580: LD_ADDR_VAR 0 3
66584: PUSH
66585: LD_INT 1
66587: ST_TO_ADDR
// exit ;
66588: POP
66589: POP
66590: GO 66596
// end ;
66592: GO 66561
66594: POP
66595: POP
// end ;
66596: LD_VAR 0 3
66600: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66601: LD_INT 0
66603: PPUSH
66604: PPUSH
66605: PPUSH
66606: PPUSH
// if not unit or not points then
66607: LD_VAR 0 1
66611: NOT
66612: PUSH
66613: LD_VAR 0 2
66617: NOT
66618: OR
66619: IFFALSE 66623
// exit ;
66621: GO 66713
// dist := 99999 ;
66623: LD_ADDR_VAR 0 5
66627: PUSH
66628: LD_INT 99999
66630: ST_TO_ADDR
// for i in points do
66631: LD_ADDR_VAR 0 4
66635: PUSH
66636: LD_VAR 0 2
66640: PUSH
66641: FOR_IN
66642: IFFALSE 66711
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66644: LD_ADDR_VAR 0 6
66648: PUSH
66649: LD_VAR 0 1
66653: PPUSH
66654: LD_VAR 0 4
66658: PUSH
66659: LD_INT 1
66661: ARRAY
66662: PPUSH
66663: LD_VAR 0 4
66667: PUSH
66668: LD_INT 2
66670: ARRAY
66671: PPUSH
66672: CALL_OW 297
66676: ST_TO_ADDR
// if tmpDist < dist then
66677: LD_VAR 0 6
66681: PUSH
66682: LD_VAR 0 5
66686: LESS
66687: IFFALSE 66709
// begin result := i ;
66689: LD_ADDR_VAR 0 3
66693: PUSH
66694: LD_VAR 0 4
66698: ST_TO_ADDR
// dist := tmpDist ;
66699: LD_ADDR_VAR 0 5
66703: PUSH
66704: LD_VAR 0 6
66708: ST_TO_ADDR
// end ; end ;
66709: GO 66641
66711: POP
66712: POP
// end ;
66713: LD_VAR 0 3
66717: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66718: LD_INT 0
66720: PPUSH
// uc_side := side ;
66721: LD_ADDR_OWVAR 20
66725: PUSH
66726: LD_VAR 0 1
66730: ST_TO_ADDR
// uc_nation := 3 ;
66731: LD_ADDR_OWVAR 21
66735: PUSH
66736: LD_INT 3
66738: ST_TO_ADDR
// vc_chassis := 25 ;
66739: LD_ADDR_OWVAR 37
66743: PUSH
66744: LD_INT 25
66746: ST_TO_ADDR
// vc_engine := engine_siberite ;
66747: LD_ADDR_OWVAR 39
66751: PUSH
66752: LD_INT 3
66754: ST_TO_ADDR
// vc_control := control_computer ;
66755: LD_ADDR_OWVAR 38
66759: PUSH
66760: LD_INT 3
66762: ST_TO_ADDR
// vc_weapon := 59 ;
66763: LD_ADDR_OWVAR 40
66767: PUSH
66768: LD_INT 59
66770: ST_TO_ADDR
// result := CreateVehicle ;
66771: LD_ADDR_VAR 0 5
66775: PUSH
66776: CALL_OW 45
66780: ST_TO_ADDR
// SetDir ( result , d ) ;
66781: LD_VAR 0 5
66785: PPUSH
66786: LD_VAR 0 4
66790: PPUSH
66791: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66795: LD_VAR 0 5
66799: PPUSH
66800: LD_VAR 0 2
66804: PPUSH
66805: LD_VAR 0 3
66809: PPUSH
66810: LD_INT 0
66812: PPUSH
66813: CALL_OW 48
// end ;
66817: LD_VAR 0 5
66821: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66822: LD_INT 0
66824: PPUSH
66825: PPUSH
66826: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66827: LD_ADDR_VAR 0 2
66831: PUSH
66832: LD_INT 0
66834: PUSH
66835: LD_INT 0
66837: PUSH
66838: LD_INT 0
66840: PUSH
66841: LD_INT 0
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66850: LD_VAR 0 1
66854: NOT
66855: PUSH
66856: LD_VAR 0 1
66860: PPUSH
66861: CALL_OW 264
66865: PUSH
66866: LD_INT 12
66868: PUSH
66869: LD_INT 51
66871: PUSH
66872: LD_INT 32
66874: PUSH
66875: LD_INT 89
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: IN
66884: NOT
66885: OR
66886: IFFALSE 66890
// exit ;
66888: GO 66988
// for i := 1 to 3 do
66890: LD_ADDR_VAR 0 3
66894: PUSH
66895: DOUBLE
66896: LD_INT 1
66898: DEC
66899: ST_TO_ADDR
66900: LD_INT 3
66902: PUSH
66903: FOR_TO
66904: IFFALSE 66986
// begin tmp := GetCargo ( cargo , i ) ;
66906: LD_ADDR_VAR 0 4
66910: PUSH
66911: LD_VAR 0 1
66915: PPUSH
66916: LD_VAR 0 3
66920: PPUSH
66921: CALL_OW 289
66925: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66926: LD_ADDR_VAR 0 2
66930: PUSH
66931: LD_VAR 0 2
66935: PPUSH
66936: LD_VAR 0 3
66940: PPUSH
66941: LD_VAR 0 4
66945: PPUSH
66946: CALL_OW 1
66950: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66951: LD_ADDR_VAR 0 2
66955: PUSH
66956: LD_VAR 0 2
66960: PPUSH
66961: LD_INT 4
66963: PPUSH
66964: LD_VAR 0 2
66968: PUSH
66969: LD_INT 4
66971: ARRAY
66972: PUSH
66973: LD_VAR 0 4
66977: PLUS
66978: PPUSH
66979: CALL_OW 1
66983: ST_TO_ADDR
// end ;
66984: GO 66903
66986: POP
66987: POP
// end ;
66988: LD_VAR 0 2
66992: RET
// export function Length ( array ) ; begin
66993: LD_INT 0
66995: PPUSH
// result := array + 0 ;
66996: LD_ADDR_VAR 0 2
67000: PUSH
67001: LD_VAR 0 1
67005: PUSH
67006: LD_INT 0
67008: PLUS
67009: ST_TO_ADDR
// end ;
67010: LD_VAR 0 2
67014: RET
// export function PrepareArray ( array ) ; begin
67015: LD_INT 0
67017: PPUSH
// result := array diff 0 ;
67018: LD_ADDR_VAR 0 2
67022: PUSH
67023: LD_VAR 0 1
67027: PUSH
67028: LD_INT 0
67030: DIFF
67031: ST_TO_ADDR
// if not result [ 1 ] then
67032: LD_VAR 0 2
67036: PUSH
67037: LD_INT 1
67039: ARRAY
67040: NOT
67041: IFFALSE 67061
// result := Delete ( result , 1 ) ;
67043: LD_ADDR_VAR 0 2
67047: PUSH
67048: LD_VAR 0 2
67052: PPUSH
67053: LD_INT 1
67055: PPUSH
67056: CALL_OW 3
67060: ST_TO_ADDR
// end ;
67061: LD_VAR 0 2
67065: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
67066: LD_INT 0
67068: PPUSH
67069: PPUSH
67070: PPUSH
67071: PPUSH
// sibRocketRange := 25 ;
67072: LD_ADDR_VAR 0 6
67076: PUSH
67077: LD_INT 25
67079: ST_TO_ADDR
// result := false ;
67080: LD_ADDR_VAR 0 4
67084: PUSH
67085: LD_INT 0
67087: ST_TO_ADDR
// for i := 0 to 5 do
67088: LD_ADDR_VAR 0 5
67092: PUSH
67093: DOUBLE
67094: LD_INT 0
67096: DEC
67097: ST_TO_ADDR
67098: LD_INT 5
67100: PUSH
67101: FOR_TO
67102: IFFALSE 67169
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
67104: LD_VAR 0 1
67108: PPUSH
67109: LD_VAR 0 5
67113: PPUSH
67114: LD_VAR 0 6
67118: PPUSH
67119: CALL_OW 272
67123: PPUSH
67124: LD_VAR 0 2
67128: PPUSH
67129: LD_VAR 0 5
67133: PPUSH
67134: LD_VAR 0 6
67138: PPUSH
67139: CALL_OW 273
67143: PPUSH
67144: LD_VAR 0 3
67148: PPUSH
67149: CALL_OW 309
67153: IFFALSE 67167
// begin result := true ;
67155: LD_ADDR_VAR 0 4
67159: PUSH
67160: LD_INT 1
67162: ST_TO_ADDR
// exit ;
67163: POP
67164: POP
67165: GO 67171
// end ;
67167: GO 67101
67169: POP
67170: POP
// end ;
67171: LD_VAR 0 4
67175: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
67176: LD_INT 0
67178: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
67179: LD_VAR 0 1
67183: PPUSH
67184: LD_VAR 0 2
67188: PPUSH
67189: LD_INT 0
67191: PPUSH
67192: LD_INT 0
67194: PPUSH
67195: LD_INT 1
67197: PPUSH
67198: LD_INT 0
67200: PPUSH
67201: CALL_OW 587
// end ; end_of_file
67205: LD_VAR 0 3
67209: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67210: LD_VAR 0 1
67214: PPUSH
67215: LD_VAR 0 2
67219: PPUSH
67220: LD_VAR 0 3
67224: PPUSH
67225: LD_VAR 0 4
67229: PPUSH
67230: LD_VAR 0 5
67234: PPUSH
67235: LD_VAR 0 6
67239: PPUSH
67240: CALL 5921 0 6
// end ;
67244: PPOPN 6
67246: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
67247: LD_INT 0
67249: PPUSH
// begin if not units then
67250: LD_VAR 0 1
67254: NOT
67255: IFFALSE 67259
// exit ;
67257: GO 67259
// end ;
67259: PPOPN 7
67261: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
67262: CALL 5892 0 0
// end ; end_of_file
67266: PPOPN 1
67268: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67269: LD_VAR 0 1
67273: PUSH
67274: LD_INT 200
67276: DOUBLE
67277: GREATEREQUAL
67278: IFFALSE 67286
67280: LD_INT 299
67282: DOUBLE
67283: LESSEQUAL
67284: IFTRUE 67288
67286: GO 67320
67288: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67289: LD_VAR 0 1
67293: PPUSH
67294: LD_VAR 0 2
67298: PPUSH
67299: LD_VAR 0 3
67303: PPUSH
67304: LD_VAR 0 4
67308: PPUSH
67309: LD_VAR 0 5
67313: PPUSH
67314: CALL 21895 0 5
67318: GO 67397
67320: LD_INT 300
67322: DOUBLE
67323: GREATEREQUAL
67324: IFFALSE 67332
67326: LD_INT 399
67328: DOUBLE
67329: LESSEQUAL
67330: IFTRUE 67334
67332: GO 67396
67334: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67335: LD_VAR 0 1
67339: PPUSH
67340: LD_VAR 0 2
67344: PPUSH
67345: LD_VAR 0 3
67349: PPUSH
67350: LD_VAR 0 4
67354: PPUSH
67355: LD_VAR 0 5
67359: PPUSH
67360: LD_VAR 0 6
67364: PPUSH
67365: LD_VAR 0 7
67369: PPUSH
67370: LD_VAR 0 8
67374: PPUSH
67375: LD_VAR 0 9
67379: PPUSH
67380: LD_VAR 0 10
67384: PPUSH
67385: LD_VAR 0 11
67389: PPUSH
67390: CALL 18228 0 11
67394: GO 67397
67396: POP
// end ;
67397: PPOPN 11
67399: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67400: LD_VAR 0 1
67404: PPUSH
67405: LD_VAR 0 2
67409: PPUSH
67410: LD_VAR 0 3
67414: PPUSH
67415: LD_VAR 0 4
67419: PPUSH
67420: LD_VAR 0 5
67424: PPUSH
67425: CALL 21631 0 5
// end ;
67429: PPOPN 5
67431: END
