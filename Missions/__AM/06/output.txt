// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson , Mike ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export selectedPeople ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect := 0 ;
  15: LD_ADDR_EXP 19
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene := 1 ;
  23: LD_ADDR_EXP 20
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans := [ ] ;
  31: LD_ADDR_EXP 13
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans := [ ] ;
  38: LD_ADDR_EXP 14
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles := [ ] ;
  45: LD_ADDR_EXP 15
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 12
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// resources := [ ] ;
  59: LD_ADDR_EXP 22
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// mission_prefix := 06_ ;
  66: LD_ADDR_EXP 23
  70: PUSH
  71: LD_STRING 06_
  73: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  74: LD_ADDR_EXP 24
  78: PUSH
  79: LD_STRING 05_
  81: ST_TO_ADDR
// PrepareDeltaBase ;
  82: CALL 2403 0 0
// CreateNature ;
  86: CALL 170 0 0
// LoadVehicles ;
  90: CALL 1530 0 0
// PrepareHeroes ;
  94: CALL 299 0 0
// PrepareRandoms ;
  98: CALL 1795 0 0
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 102: LD_ADDR_EXP 21
 106: PUSH
 107: LD_INT 22
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 2
 119: PUSH
 120: LD_INT 30
 122: PUSH
 123: LD_INT 6
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 30
 132: PUSH
 133: LD_INT 7
 135: PUSH
 136: EMPTY
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 30
 142: PUSH
 143: LD_INT 8
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: PPUSH
 160: CALL_OW 69
 164: ST_TO_ADDR
// Action ;
 165: CALL 3317 0 0
// end ;
 169: END
// export function CreateNature ; var i ; begin
 170: LD_INT 0
 172: PPUSH
 173: PPUSH
// uc_side := 0 ;
 174: LD_ADDR_OWVAR 20
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// uc_nation := 0 ;
 182: LD_ADDR_OWVAR 21
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// for i = 1 to 4 do
 190: LD_ADDR_VAR 0 2
 194: PUSH
 195: DOUBLE
 196: LD_INT 1
 198: DEC
 199: ST_TO_ADDR
 200: LD_INT 4
 202: PUSH
 203: FOR_TO
 204: IFFALSE 292
// begin hc_gallery :=  ;
 206: LD_ADDR_OWVAR 33
 210: PUSH
 211: LD_STRING 
 213: ST_TO_ADDR
// hc_name :=  ;
 214: LD_ADDR_OWVAR 26
 218: PUSH
 219: LD_STRING 
 221: ST_TO_ADDR
// hc_agressivity := 0 ;
 222: LD_ADDR_OWVAR 35
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// hc_attr := [ rand ( 10 , 11 ) , rand ( 10 , 12 ) ] ;
 230: LD_ADDR_OWVAR 29
 234: PUSH
 235: LD_INT 10
 237: PPUSH
 238: LD_INT 11
 240: PPUSH
 241: CALL_OW 12
 245: PUSH
 246: LD_INT 10
 248: PPUSH
 249: LD_INT 12
 251: PPUSH
 252: CALL_OW 12
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: ST_TO_ADDR
// hc_class := class_apeman ;
 261: LD_ADDR_OWVAR 28
 265: PUSH
 266: LD_INT 12
 268: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 22 , 18 , 20 , false ) ;
 269: CALL_OW 44
 273: PPUSH
 274: LD_INT 22
 276: PPUSH
 277: LD_INT 18
 279: PPUSH
 280: LD_INT 20
 282: PPUSH
 283: LD_INT 0
 285: PPUSH
 286: CALL_OW 50
// end ;
 290: GO 203
 292: POP
 293: POP
// end ; end_of_file
 294: LD_VAR 0 1
 298: RET
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
 305: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 306: LD_ADDR_VAR 0 3
 310: PUSH
 311: LD_INT 22
 313: PUSH
 314: LD_INT 1
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 21
 323: PUSH
 324: LD_INT 3
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: LD_INT 30
 333: PUSH
 334: LD_INT 0
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PPUSH
 346: CALL_OW 69
 350: ST_TO_ADDR
// if tmp then
 351: LD_VAR 0 3
 355: IFFALSE 373
// SetBName ( tmp [ 1 ] , delta ) ;
 357: LD_VAR 0 3
 361: PUSH
 362: LD_INT 1
 364: ARRAY
 365: PPUSH
 366: LD_STRING delta
 368: PPUSH
 369: CALL_OW 500
// uc_side := 1 ;
 373: LD_ADDR_OWVAR 20
 377: PUSH
 378: LD_INT 1
 380: ST_TO_ADDR
// uc_nation := 1 ;
 381: LD_ADDR_OWVAR 21
 385: PUSH
 386: LD_INT 1
 388: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 389: LD_ADDR_EXP 1
 393: PUSH
 394: LD_STRING JMM
 396: PPUSH
 397: LD_INT 1
 399: PPUSH
 400: LD_EXP 24
 404: PPUSH
 405: CALL 27287 0 3
 409: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 410: LD_ADDR_EXP 17
 414: PUSH
 415: LD_STRING Harisson
 417: PPUSH
 418: LD_INT 0
 420: PPUSH
 421: LD_STRING 
 423: PPUSH
 424: CALL 27287 0 3
 428: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 429: LD_EXP 1
 433: PPUSH
 434: LD_VAR 0 3
 438: PUSH
 439: LD_INT 1
 441: ARRAY
 442: PPUSH
 443: CALL_OW 250
 447: PPUSH
 448: LD_VAR 0 3
 452: PUSH
 453: LD_INT 1
 455: ARRAY
 456: PPUSH
 457: CALL_OW 251
 461: PPUSH
 462: LD_INT 5
 464: PPUSH
 465: LD_INT 0
 467: PPUSH
 468: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 472: LD_EXP 1
 476: PPUSH
 477: LD_INT 1
 479: PPUSH
 480: CALL_OW 336
// Gladstone := PrepareUnitForce ( Gladstone , true , mission_prefix_prev ) ;
 484: LD_ADDR_EXP 2
 488: PUSH
 489: LD_STRING Gladstone
 491: PPUSH
 492: LD_INT 1
 494: PPUSH
 495: LD_EXP 24
 499: PPUSH
 500: CALL 27371 0 3
 504: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 505: LD_EXP 2
 509: PPUSH
 510: LD_VAR 0 3
 514: PUSH
 515: LD_INT 1
 517: ARRAY
 518: PPUSH
 519: CALL_OW 250
 523: PPUSH
 524: LD_VAR 0 3
 528: PUSH
 529: LD_INT 1
 531: ARRAY
 532: PPUSH
 533: CALL_OW 251
 537: PPUSH
 538: LD_INT 5
 540: PPUSH
 541: LD_INT 0
 543: PPUSH
 544: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 548: LD_EXP 2
 552: PPUSH
 553: LD_INT 4
 555: PPUSH
 556: CALL_OW 336
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
 560: LD_ADDR_EXP 3
 564: PUSH
 565: LD_STRING Denis
 567: PPUSH
 568: LD_INT 1
 570: PPUSH
 571: LD_EXP 24
 575: PPUSH
 576: CALL 27287 0 3
 580: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 581: LD_EXP 3
 585: PPUSH
 586: LD_VAR 0 3
 590: PUSH
 591: LD_INT 1
 593: ARRAY
 594: PPUSH
 595: CALL_OW 250
 599: PPUSH
 600: LD_VAR 0 3
 604: PUSH
 605: LD_INT 1
 607: ARRAY
 608: PPUSH
 609: CALL_OW 251
 613: PPUSH
 614: LD_INT 5
 616: PPUSH
 617: LD_INT 0
 619: PPUSH
 620: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 624: LD_EXP 3
 628: PPUSH
 629: LD_INT 4
 631: PPUSH
 632: CALL_OW 336
// Mike := PrepareUnit ( Mike , true , mission_prefix_prev ) ;
 636: LD_ADDR_EXP 10
 640: PUSH
 641: LD_STRING Mike
 643: PPUSH
 644: LD_INT 1
 646: PPUSH
 647: LD_EXP 24
 651: PPUSH
 652: CALL 27287 0 3
 656: ST_TO_ADDR
// PlaceUnitXYR ( Mike , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 657: LD_EXP 10
 661: PPUSH
 662: LD_VAR 0 3
 666: PUSH
 667: LD_INT 1
 669: ARRAY
 670: PPUSH
 671: CALL_OW 250
 675: PPUSH
 676: LD_VAR 0 3
 680: PUSH
 681: LD_INT 1
 683: ARRAY
 684: PPUSH
 685: CALL_OW 251
 689: PPUSH
 690: LD_INT 5
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 50
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 700: LD_STRING FrankInDelta
 702: PPUSH
 703: LD_INT 0
 705: PPUSH
 706: CALL_OW 30
 710: PUSH
 711: LD_INT 1
 713: EQUAL
 714: IFFALSE 792
// begin Frank := PrepareUnitForce ( Frank , true , mission_prefix_prev ) ;
 716: LD_ADDR_EXP 5
 720: PUSH
 721: LD_STRING Frank
 723: PPUSH
 724: LD_INT 1
 726: PPUSH
 727: LD_EXP 24
 731: PPUSH
 732: CALL 27371 0 3
 736: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 737: LD_EXP 5
 741: PPUSH
 742: LD_VAR 0 3
 746: PUSH
 747: LD_INT 1
 749: ARRAY
 750: PPUSH
 751: CALL_OW 250
 755: PPUSH
 756: LD_VAR 0 3
 760: PUSH
 761: LD_INT 1
 763: ARRAY
 764: PPUSH
 765: CALL_OW 251
 769: PPUSH
 770: LD_INT 5
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 780: LD_EXP 5
 784: PPUSH
 785: LD_INT 1
 787: PPUSH
 788: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 792: LD_STRING LisaInDelta
 794: PPUSH
 795: LD_INT 0
 797: PPUSH
 798: CALL_OW 30
 802: PUSH
 803: LD_INT 1
 805: EQUAL
 806: IFFALSE 884
// begin Lisa := PrepareUnitForce ( Lisa , true , mission_prefix_prev ) ;
 808: LD_ADDR_EXP 4
 812: PUSH
 813: LD_STRING Lisa
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: LD_EXP 24
 823: PPUSH
 824: CALL 27371 0 3
 828: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 829: LD_EXP 4
 833: PPUSH
 834: LD_VAR 0 3
 838: PUSH
 839: LD_INT 1
 841: ARRAY
 842: PPUSH
 843: CALL_OW 250
 847: PPUSH
 848: LD_VAR 0 3
 852: PUSH
 853: LD_INT 1
 855: ARRAY
 856: PPUSH
 857: CALL_OW 251
 861: PPUSH
 862: LD_INT 5
 864: PPUSH
 865: LD_INT 0
 867: PPUSH
 868: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 872: LD_EXP 4
 876: PPUSH
 877: LD_INT 1
 879: PPUSH
 880: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 884: LD_STRING BobbyInDelta
 886: PPUSH
 887: LD_INT 0
 889: PPUSH
 890: CALL_OW 30
 894: PUSH
 895: LD_INT 1
 897: EQUAL
 898: IFFALSE 976
// begin Bobby := PrepareUnitForce ( Bobby , true , mission_prefix_prev ) ;
 900: LD_ADDR_EXP 6
 904: PUSH
 905: LD_STRING Bobby
 907: PPUSH
 908: LD_INT 1
 910: PPUSH
 911: LD_EXP 24
 915: PPUSH
 916: CALL 27371 0 3
 920: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 921: LD_EXP 6
 925: PPUSH
 926: LD_VAR 0 3
 930: PUSH
 931: LD_INT 1
 933: ARRAY
 934: PPUSH
 935: CALL_OW 250
 939: PPUSH
 940: LD_VAR 0 3
 944: PUSH
 945: LD_INT 1
 947: ARRAY
 948: PPUSH
 949: CALL_OW 251
 953: PPUSH
 954: LD_INT 5
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 964: LD_EXP 6
 968: PPUSH
 969: LD_INT 1
 971: PPUSH
 972: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 976: LD_STRING CyrusInDelta
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL_OW 30
 986: PUSH
 987: LD_INT 1
 989: EQUAL
 990: IFFALSE 1068
// begin Cyrus := PrepareUnitForce ( Cyrus , true , mission_prefix_prev ) ;
 992: LD_ADDR_EXP 7
 996: PUSH
 997: LD_STRING Cyrus
 999: PPUSH
1000: LD_INT 1
1002: PPUSH
1003: LD_EXP 24
1007: PPUSH
1008: CALL 27371 0 3
1012: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1013: LD_EXP 7
1017: PPUSH
1018: LD_VAR 0 3
1022: PUSH
1023: LD_INT 1
1025: ARRAY
1026: PPUSH
1027: CALL_OW 250
1031: PPUSH
1032: LD_VAR 0 3
1036: PUSH
1037: LD_INT 1
1039: ARRAY
1040: PPUSH
1041: CALL_OW 251
1045: PPUSH
1046: LD_INT 5
1048: PPUSH
1049: LD_INT 0
1051: PPUSH
1052: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
1056: LD_EXP 7
1060: PPUSH
1061: LD_INT 1
1063: PPUSH
1064: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
1068: LD_STRING DonaldsonInDelta
1070: PPUSH
1071: LD_INT 0
1073: PPUSH
1074: CALL_OW 30
1078: PUSH
1079: LD_INT 1
1081: EQUAL
1082: IFFALSE 1160
// begin Donaldson := PrepareUnitForce ( Donaldson , true , mission_prefix_prev ) ;
1084: LD_ADDR_EXP 9
1088: PUSH
1089: LD_STRING Donaldson
1091: PPUSH
1092: LD_INT 1
1094: PPUSH
1095: LD_EXP 24
1099: PPUSH
1100: CALL 27371 0 3
1104: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1105: LD_EXP 9
1109: PPUSH
1110: LD_VAR 0 3
1114: PUSH
1115: LD_INT 1
1117: ARRAY
1118: PPUSH
1119: CALL_OW 250
1123: PPUSH
1124: LD_VAR 0 3
1128: PUSH
1129: LD_INT 1
1131: ARRAY
1132: PPUSH
1133: CALL_OW 251
1137: PPUSH
1138: LD_INT 5
1140: PPUSH
1141: LD_INT 0
1143: PPUSH
1144: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
1148: LD_EXP 9
1152: PPUSH
1153: LD_INT 1
1155: PPUSH
1156: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
1160: LD_STRING BrownInDelta
1162: PPUSH
1163: LD_INT 0
1165: PPUSH
1166: CALL_OW 30
1170: PUSH
1171: LD_INT 1
1173: EQUAL
1174: IFFALSE 1252
// begin Brown := PrepareUnitForce ( Brown , true , mission_prefix_prev ) ;
1176: LD_ADDR_EXP 8
1180: PUSH
1181: LD_STRING Brown
1183: PPUSH
1184: LD_INT 1
1186: PPUSH
1187: LD_EXP 24
1191: PPUSH
1192: CALL 27371 0 3
1196: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1197: LD_EXP 8
1201: PPUSH
1202: LD_VAR 0 3
1206: PUSH
1207: LD_INT 1
1209: ARRAY
1210: PPUSH
1211: CALL_OW 250
1215: PPUSH
1216: LD_VAR 0 3
1220: PUSH
1221: LD_INT 1
1223: ARRAY
1224: PPUSH
1225: CALL_OW 251
1229: PPUSH
1230: LD_INT 5
1232: PPUSH
1233: LD_INT 0
1235: PPUSH
1236: CALL_OW 50
// SetClass ( Brown , 2 ) ;
1240: LD_EXP 8
1244: PPUSH
1245: LD_INT 2
1247: PPUSH
1248: CALL_OW 336
// end ; others := CreateCharacterSet ( othersInDelta ) ;
1252: LD_ADDR_EXP 11
1256: PUSH
1257: LD_STRING othersInDelta
1259: PPUSH
1260: CALL_OW 31
1264: ST_TO_ADDR
// for i in others do
1265: LD_ADDR_VAR 0 2
1269: PUSH
1270: LD_EXP 11
1274: PUSH
1275: FOR_IN
1276: IFFALSE 1323
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1278: LD_VAR 0 2
1282: PPUSH
1283: LD_VAR 0 3
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: CALL_OW 250
1296: PPUSH
1297: LD_VAR 0 3
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 251
1310: PPUSH
1311: LD_INT 35
1313: PPUSH
1314: LD_INT 0
1316: PPUSH
1317: CALL_OW 50
1321: GO 1275
1323: POP
1324: POP
// apemans := CreateCharacterSet ( apeInDelta ) ;
1325: LD_ADDR_EXP 13
1329: PUSH
1330: LD_STRING apeInDelta
1332: PPUSH
1333: CALL_OW 31
1337: ST_TO_ADDR
// uc_nation := 0 ;
1338: LD_ADDR_OWVAR 21
1342: PUSH
1343: LD_INT 0
1345: ST_TO_ADDR
// if apemans > 5 then
1346: LD_EXP 13
1350: PUSH
1351: LD_INT 5
1353: GREATER
1354: IFFALSE 1449
// begin for i := 1 to 5 do
1356: LD_ADDR_VAR 0 2
1360: PUSH
1361: DOUBLE
1362: LD_INT 1
1364: DEC
1365: ST_TO_ADDR
1366: LD_INT 5
1368: PUSH
1369: FOR_TO
1370: IFFALSE 1445
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1372: LD_EXP 13
1376: PUSH
1377: LD_VAR 0 2
1381: ARRAY
1382: PPUSH
1383: LD_VAR 0 3
1387: PUSH
1388: LD_INT 1
1390: ARRAY
1391: PPUSH
1392: CALL_OW 250
1396: PPUSH
1397: LD_VAR 0 3
1401: PUSH
1402: LD_INT 1
1404: ARRAY
1405: PPUSH
1406: CALL_OW 251
1410: PPUSH
1411: LD_INT 50
1413: PPUSH
1414: LD_INT 0
1416: PPUSH
1417: CALL_OW 50
// yourApemans := yourApemans ^ apemans [ i ] ;
1421: LD_ADDR_EXP 14
1425: PUSH
1426: LD_EXP 14
1430: PUSH
1431: LD_EXP 13
1435: PUSH
1436: LD_VAR 0 2
1440: ARRAY
1441: ADD
1442: ST_TO_ADDR
// end ;
1443: GO 1369
1445: POP
1446: POP
// end else
1447: GO 1525
// begin for i in apemans do
1449: LD_ADDR_VAR 0 2
1453: PUSH
1454: LD_EXP 13
1458: PUSH
1459: FOR_IN
1460: IFFALSE 1523
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1462: LD_VAR 0 2
1466: PPUSH
1467: LD_VAR 0 3
1471: PUSH
1472: LD_INT 1
1474: ARRAY
1475: PPUSH
1476: CALL_OW 250
1480: PPUSH
1481: LD_VAR 0 3
1485: PUSH
1486: LD_INT 1
1488: ARRAY
1489: PPUSH
1490: CALL_OW 251
1494: PPUSH
1495: LD_INT 50
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: CALL_OW 50
// yourApemans := yourApemans ^ i ;
1505: LD_ADDR_EXP 14
1509: PUSH
1510: LD_EXP 14
1514: PUSH
1515: LD_VAR 0 2
1519: ADD
1520: ST_TO_ADDR
// end ;
1521: GO 1459
1523: POP
1524: POP
// end ; end ;
1525: LD_VAR 0 1
1529: RET
// export function LoadVehicles ; var i , j , veh , tmp , vehicles ; begin
1530: LD_INT 0
1532: PPUSH
1533: PPUSH
1534: PPUSH
1535: PPUSH
1536: PPUSH
1537: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1538: LD_ADDR_VAR 0 5
1542: PUSH
1543: LD_INT 22
1545: PUSH
1546: LD_INT 1
1548: PUSH
1549: EMPTY
1550: LIST
1551: LIST
1552: PUSH
1553: LD_INT 21
1555: PUSH
1556: LD_INT 3
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: PUSH
1563: LD_INT 30
1565: PUSH
1566: LD_INT 0
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 69
1582: ST_TO_ADDR
// uc_side := 1 ;
1583: LD_ADDR_OWVAR 20
1587: PUSH
1588: LD_INT 1
1590: ST_TO_ADDR
// vehicles := LoadVariable ( vehiclesInDelta , [ ] ) ;
1591: LD_ADDR_VAR 0 6
1595: PUSH
1596: LD_STRING vehiclesInDelta
1598: PPUSH
1599: EMPTY
1600: PPUSH
1601: CALL_OW 30
1605: ST_TO_ADDR
// for i := 1 to Count ( vehicles ) div 4 do
1606: LD_ADDR_VAR 0 2
1610: PUSH
1611: DOUBLE
1612: LD_INT 1
1614: DEC
1615: ST_TO_ADDR
1616: LD_VAR 0 6
1620: PPUSH
1621: CALL 29473 0 1
1625: PUSH
1626: LD_INT 4
1628: DIV
1629: PUSH
1630: FOR_TO
1631: IFFALSE 1788
// begin uc_nation := vehicles [ 1 ] ;
1633: LD_ADDR_OWVAR 21
1637: PUSH
1638: LD_VAR 0 6
1642: PUSH
1643: LD_INT 1
1645: ARRAY
1646: ST_TO_ADDR
// vc_chassis := vehicles [ 2 ] ;
1647: LD_ADDR_OWVAR 37
1651: PUSH
1652: LD_VAR 0 6
1656: PUSH
1657: LD_INT 2
1659: ARRAY
1660: ST_TO_ADDR
// vc_engine := vehicles [ 3 ] ;
1661: LD_ADDR_OWVAR 39
1665: PUSH
1666: LD_VAR 0 6
1670: PUSH
1671: LD_INT 3
1673: ARRAY
1674: ST_TO_ADDR
// vc_control := vehicles [ 4 ] ;
1675: LD_ADDR_OWVAR 38
1679: PUSH
1680: LD_VAR 0 6
1684: PUSH
1685: LD_INT 4
1687: ARRAY
1688: ST_TO_ADDR
// vc_weapon := vehicles [ 5 ] ;
1689: LD_ADDR_OWVAR 40
1693: PUSH
1694: LD_VAR 0 6
1698: PUSH
1699: LD_INT 5
1701: ARRAY
1702: ST_TO_ADDR
// veh := CreateVehicle ;
1703: LD_ADDR_VAR 0 4
1707: PUSH
1708: CALL_OW 45
1712: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1713: LD_VAR 0 4
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: LD_INT 5
1723: PPUSH
1724: CALL_OW 12
1728: PPUSH
1729: CALL_OW 233
// PlaceUnitArea ( veh , parkingArea , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 4
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// for j := 1 to 5 do
1748: LD_ADDR_VAR 0 3
1752: PUSH
1753: DOUBLE
1754: LD_INT 1
1756: DEC
1757: ST_TO_ADDR
1758: LD_INT 5
1760: PUSH
1761: FOR_TO
1762: IFFALSE 1784
// vehicles := Delete ( vehicles , 1 ) ;
1764: LD_ADDR_VAR 0 6
1768: PUSH
1769: LD_VAR 0 6
1773: PPUSH
1774: LD_INT 1
1776: PPUSH
1777: CALL_OW 3
1781: ST_TO_ADDR
1782: GO 1761
1784: POP
1785: POP
// end ;
1786: GO 1630
1788: POP
1789: POP
// end ;
1790: LD_VAR 0 1
1794: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1795: LD_INT 0
1797: PPUSH
1798: PPUSH
1799: PPUSH
1800: PPUSH
1801: PPUSH
// uc_side := 1 ;
1802: LD_ADDR_OWVAR 20
1806: PUSH
1807: LD_INT 1
1809: ST_TO_ADDR
// uc_nation := 1 ;
1810: LD_ADDR_OWVAR 21
1814: PUSH
1815: LD_INT 1
1817: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1818: LD_ADDR_VAR 0 4
1822: PUSH
1823: LD_INT 22
1825: PUSH
1826: LD_INT 1
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: LD_INT 21
1835: PUSH
1836: LD_INT 3
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 30
1845: PUSH
1846: LD_INT 0
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: PPUSH
1858: CALL_OW 69
1862: ST_TO_ADDR
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_nation , nation_american ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) ;
1863: LD_ADDR_EXP 16
1867: PUSH
1868: LD_INT 22
1870: PUSH
1871: LD_INT 1
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: LD_INT 23
1880: PUSH
1881: LD_INT 1
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PUSH
1888: LD_INT 25
1890: PUSH
1891: LD_INT 4
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PUSH
1898: LD_INT 26
1900: PUSH
1901: LD_INT 1
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: LIST
1912: LIST
1913: PUSH
1914: EMPTY
1915: LIST
1916: PPUSH
1917: CALL_OW 69
1921: PUSH
1922: LD_EXP 1
1926: PUSH
1927: LD_EXP 7
1931: PUSH
1932: LD_EXP 6
1936: PUSH
1937: LD_EXP 5
1941: PUSH
1942: LD_EXP 2
1946: PUSH
1947: LD_EXP 3
1951: PUSH
1952: LD_EXP 8
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: DIFF
1966: ST_TO_ADDR
// if not deltaDoctor then
1967: LD_EXP 16
1971: NOT
1972: IFFALSE 2134
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_nation , nation_american ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
1974: LD_ADDR_VAR 0 5
1978: PUSH
1979: LD_INT 22
1981: PUSH
1982: LD_INT 1
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: PUSH
1989: LD_INT 23
1991: PUSH
1992: LD_INT 1
1994: PUSH
1995: EMPTY
1996: LIST
1997: LIST
1998: PUSH
1999: LD_INT 26
2001: PUSH
2002: LD_INT 1
2004: PUSH
2005: EMPTY
2006: LIST
2007: LIST
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: LIST
2013: PUSH
2014: EMPTY
2015: LIST
2016: PPUSH
2017: CALL_OW 69
2021: PUSH
2022: LD_EXP 1
2026: PUSH
2027: LD_EXP 7
2031: PUSH
2032: LD_EXP 6
2036: PUSH
2037: LD_EXP 5
2041: PUSH
2042: LD_EXP 2
2046: PUSH
2047: LD_EXP 3
2051: PUSH
2052: LD_EXP 8
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: DIFF
2066: ST_TO_ADDR
// if filter then
2067: LD_VAR 0 5
2071: IFFALSE 2132
// for i in filter do
2073: LD_ADDR_VAR 0 2
2077: PUSH
2078: LD_VAR 0 5
2082: PUSH
2083: FOR_IN
2084: IFFALSE 2130
// if GetSkill ( i , 4 ) >= 4 then
2086: LD_VAR 0 2
2090: PPUSH
2091: LD_INT 4
2093: PPUSH
2094: CALL_OW 259
2098: PUSH
2099: LD_INT 4
2101: GREATEREQUAL
2102: IFFALSE 2128
// begin deltaDoctor := i ;
2104: LD_ADDR_EXP 16
2108: PUSH
2109: LD_VAR 0 2
2113: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
2114: LD_EXP 16
2118: PPUSH
2119: LD_INT 4
2121: PPUSH
2122: CALL_OW 336
// break ;
2126: GO 2130
// end ;
2128: GO 2083
2130: POP
2131: POP
// end else
2132: GO 2148
// deltaDoctor := deltaDoctor [ 1 ] ;
2134: LD_ADDR_EXP 16
2138: PUSH
2139: LD_EXP 16
2143: PUSH
2144: LD_INT 1
2146: ARRAY
2147: ST_TO_ADDR
// for i := 1 to 7 do
2148: LD_ADDR_VAR 0 2
2152: PUSH
2153: DOUBLE
2154: LD_INT 1
2156: DEC
2157: ST_TO_ADDR
2158: LD_INT 7
2160: PUSH
2161: FOR_TO
2162: IFFALSE 2291
// begin hc_gallery :=  ;
2164: LD_ADDR_OWVAR 33
2168: PUSH
2169: LD_STRING 
2171: ST_TO_ADDR
// hc_name :=  ;
2172: LD_ADDR_OWVAR 26
2176: PUSH
2177: LD_STRING 
2179: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ rand ( 1 , 4 ) ] , 4 ) ;
2180: LD_INT 0
2182: PPUSH
2183: LD_INT 1
2185: PUSH
2186: LD_INT 2
2188: PUSH
2189: LD_INT 3
2191: PUSH
2192: LD_INT 4
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 1
2203: PPUSH
2204: LD_INT 4
2206: PPUSH
2207: CALL_OW 12
2211: ARRAY
2212: PPUSH
2213: LD_INT 4
2215: PPUSH
2216: CALL_OW 380
// un := CreateHuman ;
2220: LD_ADDR_VAR 0 3
2224: PUSH
2225: CALL_OW 44
2229: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2230: LD_ADDR_EXP 12
2234: PUSH
2235: LD_EXP 12
2239: PUSH
2240: LD_VAR 0 3
2244: ADD
2245: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2246: LD_VAR 0 3
2250: PPUSH
2251: LD_VAR 0 4
2255: PUSH
2256: LD_INT 1
2258: ARRAY
2259: PPUSH
2260: CALL_OW 250
2264: PPUSH
2265: LD_VAR 0 4
2269: PUSH
2270: LD_INT 1
2272: ARRAY
2273: PPUSH
2274: CALL_OW 251
2278: PPUSH
2279: LD_INT 15
2281: PPUSH
2282: LD_INT 0
2284: PPUSH
2285: CALL_OW 50
// end ;
2289: GO 2161
2291: POP
2292: POP
// if deltaDoctor then
2293: LD_EXP 16
2297: IFFALSE 2301
// exit ;
2299: GO 2398
// hc_gallery := Dawkins ;
2301: LD_ADDR_OWVAR 33
2305: PUSH
2306: LD_STRING Dawkins
2308: ST_TO_ADDR
// hc_face_number := 1 ;
2309: LD_ADDR_OWVAR 34
2313: PUSH
2314: LD_INT 1
2316: ST_TO_ADDR
// hc_name := Dr. Adam Charles Dawkins ;
2317: LD_ADDR_OWVAR 26
2321: PUSH
2322: LD_STRING Dr. Adam Charles Dawkins
2324: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 5 ) ;
2325: LD_INT 1
2327: PPUSH
2328: LD_INT 4
2330: PPUSH
2331: LD_INT 5
2333: PPUSH
2334: CALL_OW 380
// deltaDoctor := CreateHuman ;
2338: LD_ADDR_EXP 16
2342: PUSH
2343: CALL_OW 44
2347: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2348: LD_EXP 16
2352: PPUSH
2353: LD_VAR 0 4
2357: PUSH
2358: LD_INT 1
2360: ARRAY
2361: PPUSH
2362: CALL_OW 250
2366: PPUSH
2367: LD_VAR 0 4
2371: PUSH
2372: LD_INT 1
2374: ARRAY
2375: PPUSH
2376: CALL_OW 251
2380: PPUSH
2381: LD_INT 5
2383: PPUSH
2384: LD_INT 0
2386: PPUSH
2387: CALL_OW 50
// ToLua ( enableBioCharacter(BIO_ADAM) ) ;
2391: LD_STRING enableBioCharacter(BIO_ADAM)
2393: PPUSH
2394: CALL_OW 559
// end ; end_of_file
2398: LD_VAR 0 1
2402: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2403: LD_INT 0
2405: PPUSH
2406: PPUSH
2407: PPUSH
2408: PPUSH
2409: PPUSH
2410: PPUSH
2411: PPUSH
// buildings := LoadVariable ( buildingsInDelta , [ ] ) ;
2412: LD_ADDR_VAR 0 5
2416: PUSH
2417: LD_STRING buildingsInDelta
2419: PPUSH
2420: EMPTY
2421: PPUSH
2422: CALL_OW 30
2426: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2427: LD_INT 68
2429: PPUSH
2430: LD_INT 40
2432: PPUSH
2433: LD_INT 1
2435: PPUSH
2436: CALL_OW 441
// uc_side := 1 ;
2440: LD_ADDR_OWVAR 20
2444: PUSH
2445: LD_INT 1
2447: ST_TO_ADDR
// uc_nation := 1 ;
2448: LD_ADDR_OWVAR 21
2452: PUSH
2453: LD_INT 1
2455: ST_TO_ADDR
// for i := 1 to buildings do
2456: LD_ADDR_VAR 0 2
2460: PUSH
2461: DOUBLE
2462: LD_INT 1
2464: DEC
2465: ST_TO_ADDR
2466: LD_VAR 0 5
2470: PUSH
2471: FOR_TO
2472: IFFALSE 2773
// begin InitBc ;
2474: CALL_OW 21
// bc_type := buildings [ i ] [ 1 ] ;
2478: LD_ADDR_OWVAR 42
2482: PUSH
2483: LD_VAR 0 5
2487: PUSH
2488: LD_VAR 0 2
2492: ARRAY
2493: PUSH
2494: LD_INT 1
2496: ARRAY
2497: ST_TO_ADDR
// bc_level := buildings [ i ] [ 2 ] ;
2498: LD_ADDR_OWVAR 43
2502: PUSH
2503: LD_VAR 0 5
2507: PUSH
2508: LD_VAR 0 2
2512: ARRAY
2513: PUSH
2514: LD_INT 2
2516: ARRAY
2517: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half , b_lab_full ] then
2518: LD_OWVAR 42
2522: PUSH
2523: LD_INT 6
2525: PUSH
2526: LD_INT 7
2528: PUSH
2529: LD_INT 8
2531: PUSH
2532: EMPTY
2533: LIST
2534: LIST
2535: LIST
2536: IN
2537: IFFALSE 2661
// begin bc_kind1 := b_lab_basic ;
2539: LD_ADDR_OWVAR 44
2543: PUSH
2544: LD_INT 9
2546: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2547: LD_ADDR_OWVAR 45
2551: PUSH
2552: LD_INT 9
2554: ST_TO_ADDR
// if buildings [ i ] [ 6 ] then
2555: LD_VAR 0 5
2559: PUSH
2560: LD_VAR 0 2
2564: ARRAY
2565: PUSH
2566: LD_INT 6
2568: ARRAY
2569: IFFALSE 2637
// begin bc_kind1 := buildings [ i ] [ 6 ] ;
2571: LD_ADDR_OWVAR 44
2575: PUSH
2576: LD_VAR 0 5
2580: PUSH
2581: LD_VAR 0 2
2585: ARRAY
2586: PUSH
2587: LD_INT 6
2589: ARRAY
2590: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2591: LD_ADDR_OWVAR 45
2595: PUSH
2596: LD_INT 9
2598: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2599: LD_VAR 0 5
2603: PUSH
2604: LD_VAR 0 2
2608: ARRAY
2609: PUSH
2610: LD_INT 7
2612: ARRAY
2613: IFFALSE 2635
// bc_kind2 := buildings [ i ] [ 7 ] ;
2615: LD_ADDR_OWVAR 45
2619: PUSH
2620: LD_VAR 0 5
2624: PUSH
2625: LD_VAR 0 2
2629: ARRAY
2630: PUSH
2631: LD_INT 7
2633: ARRAY
2634: ST_TO_ADDR
// end else
2635: GO 2661
// begin bc_type := b_lab ;
2637: LD_ADDR_OWVAR 42
2641: PUSH
2642: LD_INT 6
2644: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
2645: LD_ADDR_OWVAR 44
2649: PUSH
2650: LD_INT 9
2652: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2653: LD_ADDR_OWVAR 45
2657: PUSH
2658: LD_INT 9
2660: ST_TO_ADDR
// end ; end ; building := CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2661: LD_ADDR_VAR 0 4
2665: PUSH
2666: LD_VAR 0 5
2670: PUSH
2671: LD_VAR 0 2
2675: ARRAY
2676: PUSH
2677: LD_INT 3
2679: ARRAY
2680: PPUSH
2681: LD_VAR 0 5
2685: PUSH
2686: LD_VAR 0 2
2690: ARRAY
2691: PUSH
2692: LD_INT 4
2694: ARRAY
2695: PPUSH
2696: LD_VAR 0 5
2700: PUSH
2701: LD_VAR 0 2
2705: ARRAY
2706: PUSH
2707: LD_INT 5
2709: ARRAY
2710: PPUSH
2711: CALL_OW 47
2715: ST_TO_ADDR
// if GetBType ( building ) = b_bunker and buildings [ i ] [ 8 ] then
2716: LD_VAR 0 4
2720: PPUSH
2721: CALL_OW 266
2725: PUSH
2726: LD_INT 32
2728: EQUAL
2729: PUSH
2730: LD_VAR 0 5
2734: PUSH
2735: LD_VAR 0 2
2739: ARRAY
2740: PUSH
2741: LD_INT 8
2743: ARRAY
2744: AND
2745: IFFALSE 2771
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2747: LD_VAR 0 4
2751: PPUSH
2752: LD_VAR 0 5
2756: PUSH
2757: LD_VAR 0 2
2761: ARRAY
2762: PUSH
2763: LD_INT 8
2765: ARRAY
2766: PPUSH
2767: CALL_OW 431
// end ;
2771: GO 2471
2773: POP
2774: POP
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2775: LD_ADDR_VAR 0 6
2779: PUSH
2780: LD_INT 22
2782: PUSH
2783: LD_INT 1
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: PUSH
2790: LD_INT 2
2792: PUSH
2793: LD_INT 30
2795: PUSH
2796: LD_INT 6
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: PUSH
2803: LD_INT 30
2805: PUSH
2806: LD_INT 7
2808: PUSH
2809: EMPTY
2810: LIST
2811: LIST
2812: PUSH
2813: LD_INT 30
2815: PUSH
2816: LD_INT 8
2818: PUSH
2819: EMPTY
2820: LIST
2821: LIST
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: LIST
2827: LIST
2828: PUSH
2829: EMPTY
2830: LIST
2831: LIST
2832: PPUSH
2833: CALL_OW 69
2837: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2838: LD_ADDR_VAR 0 7
2842: PUSH
2843: LD_INT 22
2845: PUSH
2846: LD_INT 1
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: PUSH
2853: LD_INT 30
2855: PUSH
2856: LD_INT 0
2858: PUSH
2859: EMPTY
2860: LIST
2861: LIST
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PPUSH
2867: CALL_OW 69
2871: ST_TO_ADDR
// if lab and tmp then
2872: LD_VAR 0 6
2876: PUSH
2877: LD_VAR 0 7
2881: AND
2882: IFFALSE 2892
// baseCorrect := 1 ;
2884: LD_ADDR_EXP 19
2888: PUSH
2889: LD_INT 1
2891: ST_TO_ADDR
// if not baseCorrect then
2892: LD_EXP 19
2896: NOT
2897: IFFALSE 3312
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2899: LD_ADDR_VAR 0 2
2903: PUSH
2904: LD_INT 22
2906: PUSH
2907: LD_INT 1
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: PUSH
2914: LD_INT 21
2916: PUSH
2917: LD_INT 3
2919: PUSH
2920: EMPTY
2921: LIST
2922: LIST
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: PPUSH
2928: CALL_OW 69
2932: PUSH
2933: FOR_IN
2934: IFFALSE 2947
// RemoveUnit ( i ) ;
2936: LD_VAR 0 2
2940: PPUSH
2941: CALL_OW 64
2945: GO 2933
2947: POP
2948: POP
// uc_nation := 1 ;
2949: LD_ADDR_OWVAR 21
2953: PUSH
2954: LD_INT 1
2956: ST_TO_ADDR
// uc_side := 1 ;
2957: LD_ADDR_OWVAR 20
2961: PUSH
2962: LD_INT 1
2964: ST_TO_ADDR
// bc_level := 5 ;
2965: LD_ADDR_OWVAR 43
2969: PUSH
2970: LD_INT 5
2972: ST_TO_ADDR
// bc_type := b_depot ;
2973: LD_ADDR_OWVAR 42
2977: PUSH
2978: LD_INT 0
2980: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2981: LD_INT 50
2983: PPUSH
2984: LD_INT 22
2986: PPUSH
2987: LD_INT 0
2989: PPUSH
2990: CALL_OW 47
// bc_type = b_bunker ;
2994: LD_ADDR_OWVAR 42
2998: PUSH
2999: LD_INT 32
3001: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
3002: LD_ADDR_VAR 0 4
3006: PUSH
3007: LD_INT 68
3009: PPUSH
3010: LD_INT 24
3012: PPUSH
3013: LD_INT 4
3015: PPUSH
3016: CALL_OW 47
3020: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
3021: LD_VAR 0 4
3025: PPUSH
3026: LD_INT 4
3028: PUSH
3029: LD_INT 11
3031: PUSH
3032: EMPTY
3033: LIST
3034: LIST
3035: PUSH
3036: LD_INT 1
3038: PPUSH
3039: LD_INT 2
3041: PPUSH
3042: CALL_OW 12
3046: ARRAY
3047: PPUSH
3048: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
3052: LD_ADDR_VAR 0 4
3056: PUSH
3057: LD_INT 71
3059: PPUSH
3060: LD_INT 34
3062: PPUSH
3063: LD_INT 4
3065: PPUSH
3066: CALL_OW 47
3070: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
3071: LD_VAR 0 4
3075: PPUSH
3076: LD_INT 4
3078: PUSH
3079: LD_INT 11
3081: PUSH
3082: EMPTY
3083: LIST
3084: LIST
3085: PUSH
3086: LD_INT 1
3088: PPUSH
3089: LD_INT 2
3091: PPUSH
3092: CALL_OW 12
3096: ARRAY
3097: PPUSH
3098: CALL_OW 431
// bc_type := b_breastwork ;
3102: LD_ADDR_OWVAR 42
3106: PUSH
3107: LD_INT 31
3109: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
3110: LD_INT 51
3112: PPUSH
3113: LD_INT 7
3115: PPUSH
3116: LD_INT 3
3118: PPUSH
3119: CALL_OW 47
// bc_type := b_oil_mine ;
3123: LD_ADDR_OWVAR 42
3127: PUSH
3128: LD_INT 29
3130: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
3131: LD_INT 68
3133: PPUSH
3134: LD_INT 40
3136: PPUSH
3137: LD_INT 1
3139: PPUSH
3140: CALL_OW 47
// bc_type := b_factory ;
3144: LD_ADDR_OWVAR 42
3148: PUSH
3149: LD_INT 3
3151: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3152: LD_INT 38
3154: PPUSH
3155: LD_INT 20
3157: PPUSH
3158: LD_INT 2
3160: PPUSH
3161: CALL_OW 47
// bc_type := b_ext_noncombat ;
3165: LD_ADDR_OWVAR 42
3169: PUSH
3170: LD_INT 19
3172: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 24 , 2 ) ;
3173: LD_INT 38
3175: PPUSH
3176: LD_INT 24
3178: PPUSH
3179: LD_INT 2
3181: PPUSH
3182: CALL_OW 47
// bc_type := b_ext_radar ;
3186: LD_ADDR_OWVAR 42
3190: PUSH
3191: LD_INT 20
3193: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 35 , 20 , 1 ) ;
3194: LD_INT 35
3196: PPUSH
3197: LD_INT 20
3199: PPUSH
3200: LD_INT 1
3202: PPUSH
3203: CALL_OW 47
// bc_type := b_armoury ;
3207: LD_ADDR_OWVAR 42
3211: PUSH
3212: LD_INT 4
3214: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 33 , 28 , 1 ) ;
3215: LD_INT 33
3217: PPUSH
3218: LD_INT 28
3220: PPUSH
3221: LD_INT 1
3223: PPUSH
3224: CALL_OW 47
// bc_type := b_solar_power ;
3228: LD_ADDR_OWVAR 42
3232: PUSH
3233: LD_INT 27
3235: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3236: LD_INT 46
3238: PPUSH
3239: LD_INT 12
3241: PPUSH
3242: LD_INT 1
3244: PPUSH
3245: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3249: LD_INT 48
3251: PPUSH
3252: LD_INT 11
3254: PPUSH
3255: LD_INT 2
3257: PPUSH
3258: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 35 , 12 , 3 ) ;
3262: LD_INT 35
3264: PPUSH
3265: LD_INT 12
3267: PPUSH
3268: LD_INT 3
3270: PPUSH
3271: CALL_OW 47
// bc_type := b_lab_half ;
3275: LD_ADDR_OWVAR 42
3279: PUSH
3280: LD_INT 7
3282: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
3283: LD_ADDR_OWVAR 44
3287: PUSH
3288: LD_INT 15
3290: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
3291: LD_ADDR_OWVAR 45
3295: PUSH
3296: LD_INT 9
3298: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3299: LD_INT 42
3301: PPUSH
3302: LD_INT 15
3304: PPUSH
3305: LD_INT 2
3307: PPUSH
3308: CALL_OW 47
// end ; end ; end_of_file
3312: LD_VAR 0 1
3316: RET
// export function Action ; var i , j , tmp ; begin
3317: LD_INT 0
3319: PPUSH
3320: PPUSH
3321: PPUSH
3322: PPUSH
// InGameOn ;
3323: CALL_OW 8
// if lab then
3327: LD_EXP 21
3331: IFFALSE 3348
// CenterNowOnUnits ( lab [ 1 ] ) else
3333: LD_EXP 21
3337: PUSH
3338: LD_INT 1
3340: ARRAY
3341: PPUSH
3342: CALL_OW 87
3346: GO 3357
// CenterOnUnits ( JMM ) ;
3348: LD_EXP 1
3352: PPUSH
3353: CALL_OW 85
// if IsOK ( Denis ) then
3357: LD_EXP 3
3361: PPUSH
3362: CALL_OW 302
3366: IFFALSE 3394
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3368: LD_INT 6
3370: PPUSH
3371: LD_INT 1
3373: PPUSH
3374: LD_INT 2
3376: PPUSH
3377: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3381: LD_INT 20
3383: PPUSH
3384: LD_INT 1
3386: PPUSH
3387: LD_INT 1
3389: PPUSH
3390: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3394: LD_EXP 1
3398: PPUSH
3399: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3403: LD_EXP 1
3407: PPUSH
3408: LD_EXP 16
3412: PPUSH
3413: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3417: LD_INT 35
3419: PPUSH
3420: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3424: LD_EXP 16
3428: PPUSH
3429: LD_EXP 1
3433: PPUSH
3434: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3438: LD_EXP 1
3442: PPUSH
3443: LD_EXP 16
3447: PPUSH
3448: CALL_OW 296
3452: PUSH
3453: LD_INT 5
3455: LESS
3456: IFFALSE 3417
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3458: LD_EXP 16
3462: PPUSH
3463: LD_EXP 1
3467: PPUSH
3468: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3472: LD_EXP 1
3476: PPUSH
3477: LD_STRING D1-JMM-1
3479: PPUSH
3480: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3484: LD_EXP 16
3488: PPUSH
3489: LD_STRING D1-Sci-1
3491: PPUSH
3492: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3496: LD_EXP 1
3500: PUSH
3501: LD_EXP 16
3505: PUSH
3506: LD_EXP 3
3510: PUSH
3511: EMPTY
3512: LIST
3513: LIST
3514: LIST
3515: PPUSH
3516: LD_EXP 21
3520: PUSH
3521: LD_INT 1
3523: ARRAY
3524: PPUSH
3525: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
3529: LD_INT 35
3531: PPUSH
3532: CALL_OW 67
// until IsInUnit ( JMM ) and IsInUnit ( DeltaDoctor ) ;
3536: LD_EXP 1
3540: PPUSH
3541: CALL_OW 310
3545: PUSH
3546: LD_EXP 16
3550: PPUSH
3551: CALL_OW 310
3555: AND
3556: IFFALSE 3529
// CenterNowOnUnits ( lab [ 1 ] ) ;
3558: LD_EXP 21
3562: PUSH
3563: LD_INT 1
3565: ARRAY
3566: PPUSH
3567: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3571: LD_EXP 1
3575: PPUSH
3576: LD_STRING D1-JMM-2
3578: PPUSH
3579: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3583: LD_EXP 16
3587: PPUSH
3588: LD_STRING D1-Sci-2
3590: PPUSH
3591: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3595: LD_EXP 1
3599: PPUSH
3600: LD_STRING D1-JMM-3
3602: PPUSH
3603: CALL_OW 88
// if IsOK ( Denis ) then
3607: LD_EXP 3
3611: PPUSH
3612: CALL_OW 302
3616: IFFALSE 3632
// Say ( DeltaDoctor , D1-Sci-3 ) else
3618: LD_EXP 16
3622: PPUSH
3623: LD_STRING D1-Sci-3
3625: PPUSH
3626: CALL_OW 88
3630: GO 3644
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3632: LD_EXP 16
3636: PPUSH
3637: LD_STRING D1-Sci-3a
3639: PPUSH
3640: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3644: LD_EXP 1
3648: PPUSH
3649: LD_STRING D1-JMM-4
3651: PPUSH
3652: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3656: LD_ADDR_VAR 0 4
3660: PUSH
3661: LD_INT 22
3663: PUSH
3664: LD_INT 1
3666: PUSH
3667: EMPTY
3668: LIST
3669: LIST
3670: PUSH
3671: LD_INT 25
3673: PUSH
3674: LD_INT 4
3676: PUSH
3677: EMPTY
3678: LIST
3679: LIST
3680: PUSH
3681: LD_INT 3
3683: PUSH
3684: LD_INT 54
3686: PUSH
3687: EMPTY
3688: LIST
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: LIST
3698: PPUSH
3699: CALL_OW 69
3703: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3704: LD_ADDR_VAR 0 2
3708: PUSH
3709: LD_INT 22
3711: PUSH
3712: LD_INT 0
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: PPUSH
3719: CALL_OW 69
3723: PUSH
3724: FOR_IN
3725: IFFALSE 3775
// for j in tmp do
3727: LD_ADDR_VAR 0 3
3731: PUSH
3732: LD_VAR 0 4
3736: PUSH
3737: FOR_IN
3738: IFFALSE 3771
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3740: LD_VAR 0 3
3744: PPUSH
3745: LD_VAR 0 2
3749: PPUSH
3750: CALL_OW 250
3754: PPUSH
3755: LD_VAR 0 2
3759: PPUSH
3760: CALL_OW 251
3764: PPUSH
3765: CALL_OW 191
3769: GO 3737
3771: POP
3772: POP
3773: GO 3724
3775: POP
3776: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3777: LD_EXP 16
3781: PPUSH
3782: LD_STRING D1-Sci-4
3784: PPUSH
3785: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3789: LD_EXP 1
3793: PPUSH
3794: LD_STRING D1-JMM-5
3796: PPUSH
3797: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3801: LD_EXP 16
3805: PPUSH
3806: LD_STRING D1-Sci-5
3808: PPUSH
3809: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3813: LD_EXP 1
3817: PPUSH
3818: LD_STRING D1-JMM-6
3820: PPUSH
3821: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3825: LD_EXP 17
3829: PPUSH
3830: LD_STRING D1-Har-6
3832: PPUSH
3833: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3837: LD_EXP 1
3841: PPUSH
3842: LD_STRING D1-JMM-7
3844: PPUSH
3845: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3849: LD_EXP 17
3853: PPUSH
3854: LD_STRING D1-Har-7
3856: PPUSH
3857: CALL_OW 94
// if IsOK ( Denis ) then
3861: LD_EXP 3
3865: PPUSH
3866: CALL_OW 302
3870: IFFALSE 3884
// Say ( JMM , D1-JMM-8 ) ;
3872: LD_EXP 1
3876: PPUSH
3877: LD_STRING D1-JMM-8
3879: PPUSH
3880: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3884: LD_EXP 1
3888: PPUSH
3889: LD_STRING D1-JMM-8a
3891: PPUSH
3892: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3896: LD_EXP 17
3900: PPUSH
3901: LD_STRING D1-Har-8
3903: PPUSH
3904: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3908: LD_EXP 1
3912: PPUSH
3913: LD_STRING D1-JMM-9
3915: PPUSH
3916: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3920: LD_EXP 17
3924: PPUSH
3925: LD_STRING D1-Har-9
3927: PPUSH
3928: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3932: LD_EXP 1
3936: PPUSH
3937: LD_STRING D1-JMM-10
3939: PPUSH
3940: CALL_OW 88
// if IsOK ( Denis ) then
3944: LD_EXP 3
3948: PPUSH
3949: CALL_OW 302
3953: IFFALSE 3967
// Say ( JMM , D1-JMM-10a ) ;
3955: LD_EXP 1
3959: PPUSH
3960: LD_STRING D1-JMM-10a
3962: PPUSH
3963: CALL_OW 88
// SelectDeltaCharacters ;
3967: CALL 4451 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 150 ) ;
3971: LD_EXP 21
3975: PUSH
3976: LD_INT 1
3978: ARRAY
3979: PPUSH
3980: CALL_OW 274
3984: PPUSH
3985: LD_INT 1
3987: PPUSH
3988: LD_INT 150
3990: PPUSH
3991: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) then
3995: LD_INT 22
3997: PUSH
3998: LD_INT 1
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: PUSH
4005: LD_INT 30
4007: PUSH
4008: LD_INT 29
4010: PUSH
4011: EMPTY
4012: LIST
4013: LIST
4014: PUSH
4015: EMPTY
4016: LIST
4017: LIST
4018: PPUSH
4019: CALL_OW 69
4023: IFFALSE 4049
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
4025: LD_EXP 21
4029: PUSH
4030: LD_INT 1
4032: ARRAY
4033: PPUSH
4034: CALL_OW 274
4038: PPUSH
4039: LD_INT 2
4041: PPUSH
4042: LD_INT 300
4044: PPUSH
4045: CALL_OW 277
// InGameOff ;
4049: CALL_OW 9
// Query ( Q1 ) ;
4053: LD_STRING Q1
4055: PPUSH
4056: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
4060: LD_INT 3
4062: PPUSH
4063: LD_INT 1
4065: PPUSH
4066: CALL_OW 424
// if IsInUnit ( JMM ) then
4070: LD_EXP 1
4074: PPUSH
4075: CALL_OW 310
4079: IFFALSE 4090
// ComExitBuilding ( JMM ) ;
4081: LD_EXP 1
4085: PPUSH
4086: CALL_OW 122
// end ;
4090: LD_VAR 0 1
4094: RET
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
4095: LD_INT 3
4097: PPUSH
4098: LD_INT 22
4100: PUSH
4101: LD_INT 1
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PUSH
4108: LD_INT 21
4110: PUSH
4111: LD_INT 1
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: PPUSH
4122: CALL_OW 71
4126: PUSH
4127: LD_INT 0
4129: EQUAL
4130: IFFALSE 4448
4132: GO 4134
4134: DISABLE
4135: LD_INT 0
4137: PPUSH
4138: PPUSH
// begin SaveDeltaCharacters ;
4139: CALL 4823 0 0
// if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) then
4143: LD_INT 3
4145: PPUSH
4146: LD_INT 21
4148: PUSH
4149: LD_INT 2
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: PUSH
4156: LD_INT 3
4158: PUSH
4159: LD_INT 58
4161: PUSH
4162: EMPTY
4163: LIST
4164: PUSH
4165: EMPTY
4166: LIST
4167: LIST
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: PPUSH
4173: CALL_OW 70
4177: IFFALSE 4434
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
4179: LD_ADDR_VAR 0 1
4183: PUSH
4184: LD_INT 3
4186: PPUSH
4187: LD_INT 21
4189: PUSH
4190: LD_INT 2
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: PUSH
4197: LD_INT 3
4199: PUSH
4200: LD_INT 58
4202: PUSH
4203: EMPTY
4204: LIST
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PPUSH
4214: CALL_OW 70
4218: PUSH
4219: FOR_IN
4220: IFFALSE 4432
// begin cargoType := GetCargoType ( i ) ;
4222: LD_ADDR_VAR 0 2
4226: PUSH
4227: LD_VAR 0 1
4231: PPUSH
4232: CALL_OW 288
4236: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4237: LD_VAR 0 1
4241: PPUSH
4242: CALL_OW 264
4246: PUSH
4247: LD_INT 12
4249: EQUAL
4250: IFFALSE 4347
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] else
4252: LD_ADDR_EXP 15
4256: PUSH
4257: LD_EXP 15
4261: PUSH
4262: LD_VAR 0 1
4266: PPUSH
4267: CALL_OW 248
4271: PUSH
4272: LD_VAR 0 1
4276: PPUSH
4277: CALL_OW 265
4281: PUSH
4282: LD_VAR 0 1
4286: PPUSH
4287: CALL_OW 262
4291: PUSH
4292: LD_VAR 0 1
4296: PPUSH
4297: CALL_OW 263
4301: PUSH
4302: LD_VAR 0 1
4306: PPUSH
4307: CALL_OW 264
4311: PUSH
4312: LD_VAR 0 2
4316: PUSH
4317: LD_VAR 0 1
4321: PPUSH
4322: LD_VAR 0 2
4326: PPUSH
4327: CALL_OW 289
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: PUSH
4341: EMPTY
4342: LIST
4343: ADD
4344: ST_TO_ADDR
4345: GO 4418
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4347: LD_ADDR_EXP 15
4351: PUSH
4352: LD_EXP 15
4356: PUSH
4357: LD_VAR 0 1
4361: PPUSH
4362: CALL_OW 248
4366: PUSH
4367: LD_VAR 0 1
4371: PPUSH
4372: CALL_OW 265
4376: PUSH
4377: LD_VAR 0 1
4381: PPUSH
4382: CALL_OW 262
4386: PUSH
4387: LD_VAR 0 1
4391: PPUSH
4392: CALL_OW 263
4396: PUSH
4397: LD_VAR 0 1
4401: PPUSH
4402: CALL_OW 264
4406: PUSH
4407: EMPTY
4408: LIST
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: PUSH
4414: EMPTY
4415: LIST
4416: ADD
4417: ST_TO_ADDR
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4418: LD_EXP 15
4422: PPUSH
4423: LD_STRING 06_VehiclesIn06_1
4425: PPUSH
4426: CALL_OW 39
// end ;
4430: GO 4219
4432: POP
4433: POP
// end ; SaveCargos ;
4434: CALL 5694 0 0
// ChangeMap ( 6 , %_cont ) ;
4438: LD_INT 6
4440: PPUSH
4441: LD_STRING %_cont
4443: PPUSH
4444: CALL_OW 340
// end ; end_of_file
4448: PPOPN 2
4450: END
// export function SelectDeltaCharacters ; var i , yourPeople ; begin
4451: LD_INT 0
4453: PPUSH
4454: PPUSH
4455: PPUSH
// selectedPeople := [ ] ;
4456: LD_ADDR_EXP 18
4460: PUSH
4461: EMPTY
4462: ST_TO_ADDR
// yourPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4463: LD_ADDR_VAR 0 3
4467: PUSH
4468: LD_INT 22
4470: PUSH
4471: LD_INT 1
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: PUSH
4478: LD_INT 21
4480: PUSH
4481: LD_INT 1
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: PUSH
4488: LD_INT 2
4490: PUSH
4491: LD_INT 25
4493: PUSH
4494: LD_INT 1
4496: PUSH
4497: EMPTY
4498: LIST
4499: LIST
4500: PUSH
4501: LD_INT 25
4503: PUSH
4504: LD_INT 2
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: PUSH
4511: LD_INT 25
4513: PUSH
4514: LD_INT 3
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: PUSH
4521: LD_INT 25
4523: PUSH
4524: LD_INT 4
4526: PUSH
4527: EMPTY
4528: LIST
4529: LIST
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: LIST
4535: LIST
4536: LIST
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: PPUSH
4543: CALL_OW 69
4547: PUSH
4548: LD_EXP 1
4552: PUSH
4553: LD_EXP 16
4557: PUSH
4558: LD_EXP 3
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: LIST
4567: DIFF
4568: ST_TO_ADDR
// selectedPeople := CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4569: LD_ADDR_EXP 18
4573: PUSH
4574: LD_STRING text
4576: PPUSH
4577: LD_INT 5
4579: PPUSH
4580: LD_INT 5
4582: PPUSH
4583: LD_INT -5
4585: PUSH
4586: LD_EXP 1
4590: PUSH
4591: LD_INT -6
4593: PUSH
4594: LD_INT -2
4596: PUSH
4597: LD_INT -3
4599: PUSH
4600: LD_INT -5
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: LIST
4607: LIST
4608: LIST
4609: LIST
4610: PUSH
4611: LD_VAR 0 3
4615: ADD
4616: PUSH
4617: LD_INT -6
4619: PUSH
4620: LD_INT -4
4622: PUSH
4623: LD_EXP 3
4627: PUSH
4628: LD_EXP 16
4632: PUSH
4633: EMPTY
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: ADD
4639: PPUSH
4640: LD_INT 1
4642: PUSH
4643: LD_INT 3
4645: PUSH
4646: LD_INT 2
4648: PUSH
4649: LD_INT 1
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: PUSH
4656: LD_INT 4
4658: PUSH
4659: EMPTY
4660: LIST
4661: LIST
4662: LIST
4663: LIST
4664: PPUSH
4665: CALL_OW 42
4669: ST_TO_ADDR
// ComStop ( selectedPeople ) ;
4670: LD_EXP 18
4674: PPUSH
4675: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4679: LD_INT 22
4681: PUSH
4682: LD_INT 1
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: PUSH
4689: LD_INT 21
4691: PUSH
4692: LD_INT 1
4694: PUSH
4695: EMPTY
4696: LIST
4697: LIST
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PPUSH
4703: CALL_OW 69
4707: PPUSH
4708: LD_INT 4
4710: PPUSH
4711: CALL_OW 235
// for i in selectedPeople do
4715: LD_ADDR_VAR 0 2
4719: PUSH
4720: LD_EXP 18
4724: PUSH
4725: FOR_IN
4726: IFFALSE 4742
// SetSide ( i , 1 ) ;
4728: LD_VAR 0 2
4732: PPUSH
4733: LD_INT 1
4735: PPUSH
4736: CALL_OW 235
4740: GO 4725
4742: POP
4743: POP
// for i in yourApemans do
4744: LD_ADDR_VAR 0 2
4748: PUSH
4749: LD_EXP 14
4753: PUSH
4754: FOR_IN
4755: IFFALSE 4771
// SetSide ( i , 1 ) ;
4757: LD_VAR 0 2
4761: PPUSH
4762: LD_INT 1
4764: PPUSH
4765: CALL_OW 235
4769: GO 4754
4771: POP
4772: POP
// if Mike then
4773: LD_EXP 10
4777: IFFALSE 4791
// SetSide ( Mike , 1 ) ;
4779: LD_EXP 10
4783: PPUSH
4784: LD_INT 1
4786: PPUSH
4787: CALL_OW 235
// SetSide ( JMM , 1 ) ;
4791: LD_EXP 1
4795: PPUSH
4796: LD_INT 1
4798: PPUSH
4799: CALL_OW 235
// SetSkill ( yourApemans , 2 , 3 ) ;
4803: LD_EXP 14
4807: PPUSH
4808: LD_INT 2
4810: PPUSH
4811: LD_INT 3
4813: PPUSH
4814: CALL_OW 237
// end ;
4818: LD_VAR 0 1
4822: RET
// export function SaveDeltaCharacters ; begin
4823: LD_INT 0
4825: PPUSH
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4826: LD_EXP 1
4830: PPUSH
4831: LD_EXP 23
4835: PUSH
4836: LD_STRING JMM
4838: STR
4839: PPUSH
4840: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4844: LD_EXP 16
4848: PPUSH
4849: LD_STRING DeltaDoctor
4851: PPUSH
4852: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4856: LD_EXP 3
4860: PPUSH
4861: LD_EXP 23
4865: PUSH
4866: LD_STRING Denis
4868: STR
4869: PPUSH
4870: CALL_OW 38
// if Lisa in selectedPeople then
4874: LD_EXP 4
4878: PUSH
4879: LD_EXP 18
4883: IN
4884: IFFALSE 4929
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4886: LD_EXP 4
4890: PPUSH
4891: LD_EXP 23
4895: PUSH
4896: LD_STRING Lisa
4898: STR
4899: PPUSH
4900: CALL_OW 38
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
4904: LD_EXP 24
4908: PUSH
4909: LD_STRING Lisa
4911: STR
4912: PPUSH
4913: CALL_OW 40
// SaveVariable ( 1 , LisaIn06 ) ;
4917: LD_INT 1
4919: PPUSH
4920: LD_STRING LisaIn06
4922: PPUSH
4923: CALL_OW 39
// end else
4927: GO 4950
// if IsOk ( Lisa ) then
4929: LD_EXP 4
4933: PPUSH
4934: CALL_OW 302
4938: IFFALSE 4950
// SaveVariable ( 1 , LisaStayInDelta ) ;
4940: LD_INT 1
4942: PPUSH
4943: LD_STRING LisaStayInDelta
4945: PPUSH
4946: CALL_OW 39
// if Bobby in selectedPeople then
4950: LD_EXP 6
4954: PUSH
4955: LD_EXP 18
4959: IN
4960: IFFALSE 5005
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4962: LD_EXP 6
4966: PPUSH
4967: LD_EXP 23
4971: PUSH
4972: LD_STRING Bobby
4974: STR
4975: PPUSH
4976: CALL_OW 38
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
4980: LD_EXP 24
4984: PUSH
4985: LD_STRING Bobby
4987: STR
4988: PPUSH
4989: CALL_OW 40
// SaveVariable ( 1 , BobbyIn06 ) ;
4993: LD_INT 1
4995: PPUSH
4996: LD_STRING BobbyIn06
4998: PPUSH
4999: CALL_OW 39
// end else
5003: GO 5026
// if IsOk ( Bobby ) then
5005: LD_EXP 6
5009: PPUSH
5010: CALL_OW 302
5014: IFFALSE 5026
// SaveVariable ( 1 , BobbyStayInDelta ) ;
5016: LD_INT 1
5018: PPUSH
5019: LD_STRING BobbyStayInDelta
5021: PPUSH
5022: CALL_OW 39
// if Cyrus in selectedPeople then
5026: LD_EXP 7
5030: PUSH
5031: LD_EXP 18
5035: IN
5036: IFFALSE 5081
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5038: LD_EXP 7
5042: PPUSH
5043: LD_EXP 23
5047: PUSH
5048: LD_STRING Cyrus
5050: STR
5051: PPUSH
5052: CALL_OW 38
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
5056: LD_EXP 24
5060: PUSH
5061: LD_STRING Cyrus
5063: STR
5064: PPUSH
5065: CALL_OW 40
// SaveVariable ( 1 , CyrusIn06 ) ;
5069: LD_INT 1
5071: PPUSH
5072: LD_STRING CyrusIn06
5074: PPUSH
5075: CALL_OW 39
// end else
5079: GO 5102
// if IsOk ( Cyrus ) then
5081: LD_EXP 7
5085: PPUSH
5086: CALL_OW 302
5090: IFFALSE 5102
// SaveVariable ( 1 , CyrusStayInDelta ) ;
5092: LD_INT 1
5094: PPUSH
5095: LD_STRING CyrusStayInDelta
5097: PPUSH
5098: CALL_OW 39
// if Frank in selectedPeople then
5102: LD_EXP 5
5106: PUSH
5107: LD_EXP 18
5111: IN
5112: IFFALSE 5157
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5114: LD_EXP 5
5118: PPUSH
5119: LD_EXP 23
5123: PUSH
5124: LD_STRING Frank
5126: STR
5127: PPUSH
5128: CALL_OW 38
// DeleteCharacters ( mission_prefix_prev & Frank ) ;
5132: LD_EXP 24
5136: PUSH
5137: LD_STRING Frank
5139: STR
5140: PPUSH
5141: CALL_OW 40
// SaveVariable ( 1 , FrankIn06 ) ;
5145: LD_INT 1
5147: PPUSH
5148: LD_STRING FrankIn06
5150: PPUSH
5151: CALL_OW 39
// end else
5155: GO 5178
// if IsOk ( Frank ) then
5157: LD_EXP 5
5161: PPUSH
5162: CALL_OW 302
5166: IFFALSE 5178
// SaveVariable ( 1 , FrankStayInDelta ) ;
5168: LD_INT 1
5170: PPUSH
5171: LD_STRING FrankStayInDelta
5173: PPUSH
5174: CALL_OW 39
// if Brown in selectedPeople then
5178: LD_EXP 8
5182: PUSH
5183: LD_EXP 18
5187: IN
5188: IFFALSE 5233
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5190: LD_EXP 8
5194: PPUSH
5195: LD_EXP 23
5199: PUSH
5200: LD_STRING Brown
5202: STR
5203: PPUSH
5204: CALL_OW 38
// DeleteCharacters ( mission_prefix_prev & Brown ) ;
5208: LD_EXP 24
5212: PUSH
5213: LD_STRING Brown
5215: STR
5216: PPUSH
5217: CALL_OW 40
// SaveVariable ( 1 , BrownIn06 ) ;
5221: LD_INT 1
5223: PPUSH
5224: LD_STRING BrownIn06
5226: PPUSH
5227: CALL_OW 39
// end else
5231: GO 5254
// if IsOk ( Brown ) then
5233: LD_EXP 8
5237: PPUSH
5238: CALL_OW 302
5242: IFFALSE 5254
// SaveVariable ( 1 , BrownStayInDelta ) ;
5244: LD_INT 1
5246: PPUSH
5247: LD_STRING BrownStayInDelta
5249: PPUSH
5250: CALL_OW 39
// if Donaldson in selectedPeople then
5254: LD_EXP 9
5258: PUSH
5259: LD_EXP 18
5263: IN
5264: IFFALSE 5309
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5266: LD_EXP 9
5270: PPUSH
5271: LD_EXP 23
5275: PUSH
5276: LD_STRING Donaldson
5278: STR
5279: PPUSH
5280: CALL_OW 38
// DeleteCharacters ( mission_prefix_prev & Donaldson ) ;
5284: LD_EXP 24
5288: PUSH
5289: LD_STRING Donaldson
5291: STR
5292: PPUSH
5293: CALL_OW 40
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5297: LD_INT 1
5299: PPUSH
5300: LD_STRING DonaldsonIn06
5302: PPUSH
5303: CALL_OW 39
// end else
5307: GO 5330
// if IsOk ( Donaldson ) then
5309: LD_EXP 9
5313: PPUSH
5314: CALL_OW 302
5318: IFFALSE 5330
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5320: LD_INT 1
5322: PPUSH
5323: LD_STRING DonaldsonStayInDelta
5325: PPUSH
5326: CALL_OW 39
// if Gladstone in selectedPeople then
5330: LD_EXP 2
5334: PUSH
5335: LD_EXP 18
5339: IN
5340: IFFALSE 5385
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5342: LD_EXP 2
5346: PPUSH
5347: LD_EXP 23
5351: PUSH
5352: LD_STRING Gladstone
5354: STR
5355: PPUSH
5356: CALL_OW 38
// DeleteCharacters ( mission_prefix_prev & Gladstone ) ;
5360: LD_EXP 24
5364: PUSH
5365: LD_STRING Gladstone
5367: STR
5368: PPUSH
5369: CALL_OW 40
// SaveVariable ( 1 , GladstoneIn06 ) ;
5373: LD_INT 1
5375: PPUSH
5376: LD_STRING GladstoneIn06
5378: PPUSH
5379: CALL_OW 39
// end else
5383: GO 5406
// if IsOk ( Gladstone ) then
5385: LD_EXP 2
5389: PPUSH
5390: CALL_OW 302
5394: IFFALSE 5406
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5396: LD_INT 1
5398: PPUSH
5399: LD_STRING GladstoneStayInDelta
5401: PPUSH
5402: CALL_OW 39
// if Mike then
5406: LD_EXP 10
5410: IFFALSE 5430
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
5412: LD_EXP 10
5416: PPUSH
5417: LD_EXP 23
5421: PUSH
5422: LD_STRING Mike
5424: STR
5425: PPUSH
5426: CALL_OW 38
// selectedPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ;
5430: LD_ADDR_EXP 18
5434: PUSH
5435: LD_INT 22
5437: PUSH
5438: LD_INT 1
5440: PUSH
5441: EMPTY
5442: LIST
5443: LIST
5444: PUSH
5445: LD_INT 23
5447: PUSH
5448: LD_INT 1
5450: PUSH
5451: EMPTY
5452: LIST
5453: LIST
5454: PUSH
5455: LD_INT 21
5457: PUSH
5458: LD_INT 1
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: LIST
5469: PPUSH
5470: CALL_OW 69
5474: ST_TO_ADDR
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5475: LD_EXP 14
5479: PPUSH
5480: LD_STRING ApeIn06
5482: PPUSH
5483: CALL_OW 38
// SaveCharacters ( selectedPeople diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersIn06 ) ;
5487: LD_EXP 18
5491: PUSH
5492: LD_EXP 1
5496: PUSH
5497: LD_EXP 4
5501: PUSH
5502: LD_EXP 6
5506: PUSH
5507: LD_EXP 7
5511: PUSH
5512: LD_EXP 5
5516: PUSH
5517: LD_EXP 8
5521: PUSH
5522: LD_EXP 9
5526: PUSH
5527: LD_EXP 2
5531: PUSH
5532: LD_EXP 3
5536: PUSH
5537: EMPTY
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: LIST
5546: LIST
5547: DIFF
5548: PPUSH
5549: LD_STRING OthersIn06
5551: PPUSH
5552: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersStayInDelta ) ;
5556: LD_INT 22
5558: PUSH
5559: LD_INT 4
5561: PUSH
5562: EMPTY
5563: LIST
5564: LIST
5565: PUSH
5566: LD_INT 2
5568: PUSH
5569: LD_INT 25
5571: PUSH
5572: LD_INT 1
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: PUSH
5579: LD_INT 25
5581: PUSH
5582: LD_INT 2
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: PUSH
5589: LD_INT 25
5591: PUSH
5592: LD_INT 3
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PUSH
5599: LD_INT 25
5601: PUSH
5602: LD_INT 4
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: PPUSH
5620: CALL_OW 69
5624: PUSH
5625: LD_EXP 16
5629: PUSH
5630: LD_EXP 4
5634: PUSH
5635: LD_EXP 6
5639: PUSH
5640: LD_EXP 7
5644: PUSH
5645: LD_EXP 5
5649: PUSH
5650: LD_EXP 8
5654: PUSH
5655: LD_EXP 9
5659: PUSH
5660: LD_EXP 2
5664: PUSH
5665: LD_EXP 3
5669: PUSH
5670: EMPTY
5671: LIST
5672: LIST
5673: LIST
5674: LIST
5675: LIST
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: DIFF
5681: PPUSH
5682: LD_STRING OthersStayInDelta
5684: PPUSH
5685: CALL_OW 38
// end ;
5689: LD_VAR 0 1
5693: RET
// export function SaveCargos ; var i ; begin
5694: LD_INT 0
5696: PPUSH
5697: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
5698: LD_ADDR_VAR 0 2
5702: PUSH
5703: LD_INT 3
5705: PPUSH
5706: LD_INT 22
5708: PUSH
5709: LD_INT 1
5711: PUSH
5712: EMPTY
5713: LIST
5714: LIST
5715: PUSH
5716: LD_INT 34
5718: PUSH
5719: LD_INT 12
5721: PUSH
5722: EMPTY
5723: LIST
5724: LIST
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: PPUSH
5730: CALL_OW 70
5734: PUSH
5735: FOR_IN
5736: IFFALSE 5764
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
5738: LD_ADDR_EXP 22
5742: PUSH
5743: LD_EXP 22
5747: PUSH
5748: LD_VAR 0 2
5752: PPUSH
5753: CALL 68932 0 1
5757: PUSH
5758: EMPTY
5759: LIST
5760: ADD
5761: ST_TO_ADDR
5762: GO 5735
5764: POP
5765: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
5766: LD_EXP 22
5770: PPUSH
5771: LD_STRING 06_ResourcesInCargo06_1
5773: PPUSH
5774: CALL_OW 39
// end ; end_of_file
5778: LD_VAR 0 1
5782: RET
// on Command ( comandid ) do var i ;
5783: LD_INT 0
5785: PPUSH
// begin if comandid = 65 then
5786: LD_VAR 0 1
5790: PUSH
5791: LD_INT 65
5793: EQUAL
5794: IFFALSE 5835
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5796: LD_ADDR_VAR 0 2
5800: PUSH
5801: LD_INT 22
5803: PUSH
5804: LD_INT 1
5806: PUSH
5807: EMPTY
5808: LIST
5809: LIST
5810: PUSH
5811: EMPTY
5812: LIST
5813: PPUSH
5814: CALL_OW 69
5818: PUSH
5819: FOR_IN
5820: IFFALSE 5833
// ComStop ( i ) ;
5822: LD_VAR 0 2
5826: PPUSH
5827: CALL_OW 141
5831: GO 5819
5833: POP
5834: POP
// end ;
5835: PPOPN 2
5837: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5838: LD_INT 0
5840: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5841: LD_ADDR_VAR 0 3
5845: PUSH
5846: LD_INT 22
5848: PUSH
5849: LD_INT 1
5851: PUSH
5852: EMPTY
5853: LIST
5854: LIST
5855: PUSH
5856: LD_INT 21
5858: PUSH
5859: LD_INT 3
5861: PUSH
5862: EMPTY
5863: LIST
5864: LIST
5865: PUSH
5866: LD_INT 30
5868: PUSH
5869: LD_INT 0
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: PUSH
5876: EMPTY
5877: LIST
5878: LIST
5879: LIST
5880: PPUSH
5881: CALL_OW 69
5885: ST_TO_ADDR
// if not tmp then
5886: LD_VAR 0 3
5890: NOT
5891: IFFALSE 5895
// exit ;
5893: GO 5925
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5895: LD_VAR 0 1
5899: PPUSH
5900: LD_VAR 0 3
5904: PUSH
5905: LD_INT 1
5907: ARRAY
5908: PPUSH
5909: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5913: LD_VAR 0 1
5917: PPUSH
5918: LD_INT 4
5920: PPUSH
5921: CALL_OW 235
// end ;
5925: PPOPN 3
5927: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5928: LD_VAR 0 1
5932: PUSH
5933: LD_EXP 1
5937: EQUAL
5938: IFFALSE 5947
// YouLost ( JMM ) ;
5940: LD_STRING JMM
5942: PPUSH
5943: CALL_OW 104
// SOS_UnitDestroyed ( un ) ;
5947: LD_VAR 0 1
5951: PPUSH
5952: CALL 21923 0 1
// end ;
5956: PPOPN 1
5958: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5959: LD_VAR 0 1
5963: PPUSH
5964: LD_VAR 0 2
5968: PPUSH
5969: CALL 21981 0 2
// end ; end_of_file
5973: PPOPN 2
5975: END
// export globalGameSaveCounter ; every 0 0$1 do
5976: GO 5978
5978: DISABLE
// begin enable ;
5979: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5980: LD_STRING updateTimer(
5982: PUSH
5983: LD_OWVAR 1
5987: STR
5988: PUSH
5989: LD_STRING );
5991: STR
5992: PPUSH
5993: CALL_OW 559
// end ;
5997: END
// every 0 0$1 do
5998: GO 6000
6000: DISABLE
// begin globalGameSaveCounter := 0 ;
6001: LD_ADDR_EXP 25
6005: PUSH
6006: LD_INT 0
6008: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
6009: LD_STRING setGameSaveCounter(0)
6011: PPUSH
6012: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
6016: LD_STRING initStreamRollete();
6018: PPUSH
6019: CALL_OW 559
// InitStreamMode ;
6023: CALL 7366 0 0
// DefineStreamItems ( false ) ;
6027: LD_INT 0
6029: PPUSH
6030: CALL 7830 0 1
// end ;
6034: END
// export function SOS_MapStart ( ) ; begin
6035: LD_INT 0
6037: PPUSH
// if streamModeActive then
6038: LD_EXP 26
6042: IFFALSE 6051
// DefineStreamItems ( true ) ;
6044: LD_INT 1
6046: PPUSH
6047: CALL 7830 0 1
// UpdateLuaVariables ( ) ;
6051: CALL 6068 0 0
// UpdateFactoryWaypoints ( ) ;
6055: CALL 20832 0 0
// UpdateWarehouseGatheringPoints ( ) ;
6059: CALL 21084 0 0
// end ;
6063: LD_VAR 0 1
6067: RET
// function UpdateLuaVariables ( ) ; begin
6068: LD_INT 0
6070: PPUSH
// if globalGameSaveCounter then
6071: LD_EXP 25
6075: IFFALSE 6109
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
6077: LD_ADDR_EXP 25
6081: PUSH
6082: LD_EXP 25
6086: PPUSH
6087: CALL 66584 0 1
6091: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
6092: LD_STRING setGameSaveCounter(
6094: PUSH
6095: LD_EXP 25
6099: STR
6100: PUSH
6101: LD_STRING )
6103: STR
6104: PPUSH
6105: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
6109: LD_STRING setGameDifficulty(
6111: PUSH
6112: LD_OWVAR 67
6116: STR
6117: PUSH
6118: LD_STRING )
6120: STR
6121: PPUSH
6122: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
6126: LD_STRING displayDifficulty(
6128: PUSH
6129: LD_OWVAR 67
6133: STR
6134: PUSH
6135: LD_STRING )
6137: STR
6138: PPUSH
6139: CALL_OW 559
// end ;
6143: LD_VAR 0 1
6147: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
6148: LD_INT 0
6150: PPUSH
// if p2 = stream_mode then
6151: LD_VAR 0 2
6155: PUSH
6156: LD_INT 100
6158: EQUAL
6159: IFFALSE 7162
// begin if not StreamModeActive then
6161: LD_EXP 26
6165: NOT
6166: IFFALSE 6176
// StreamModeActive := true ;
6168: LD_ADDR_EXP 26
6172: PUSH
6173: LD_INT 1
6175: ST_TO_ADDR
// if p3 = 0 then
6176: LD_VAR 0 3
6180: PUSH
6181: LD_INT 0
6183: EQUAL
6184: IFFALSE 6190
// InitStreamMode ;
6186: CALL 7366 0 0
// if p3 = 1 then
6190: LD_VAR 0 3
6194: PUSH
6195: LD_INT 1
6197: EQUAL
6198: IFFALSE 6208
// sRocket := true ;
6200: LD_ADDR_EXP 31
6204: PUSH
6205: LD_INT 1
6207: ST_TO_ADDR
// if p3 = 2 then
6208: LD_VAR 0 3
6212: PUSH
6213: LD_INT 2
6215: EQUAL
6216: IFFALSE 6226
// sSpeed := true ;
6218: LD_ADDR_EXP 30
6222: PUSH
6223: LD_INT 1
6225: ST_TO_ADDR
// if p3 = 3 then
6226: LD_VAR 0 3
6230: PUSH
6231: LD_INT 3
6233: EQUAL
6234: IFFALSE 6244
// sEngine := true ;
6236: LD_ADDR_EXP 32
6240: PUSH
6241: LD_INT 1
6243: ST_TO_ADDR
// if p3 = 4 then
6244: LD_VAR 0 3
6248: PUSH
6249: LD_INT 4
6251: EQUAL
6252: IFFALSE 6262
// sSpec := true ;
6254: LD_ADDR_EXP 29
6258: PUSH
6259: LD_INT 1
6261: ST_TO_ADDR
// if p3 = 5 then
6262: LD_VAR 0 3
6266: PUSH
6267: LD_INT 5
6269: EQUAL
6270: IFFALSE 6280
// sLevel := true ;
6272: LD_ADDR_EXP 33
6276: PUSH
6277: LD_INT 1
6279: ST_TO_ADDR
// if p3 = 6 then
6280: LD_VAR 0 3
6284: PUSH
6285: LD_INT 6
6287: EQUAL
6288: IFFALSE 6298
// sArmoury := true ;
6290: LD_ADDR_EXP 34
6294: PUSH
6295: LD_INT 1
6297: ST_TO_ADDR
// if p3 = 7 then
6298: LD_VAR 0 3
6302: PUSH
6303: LD_INT 7
6305: EQUAL
6306: IFFALSE 6316
// sRadar := true ;
6308: LD_ADDR_EXP 35
6312: PUSH
6313: LD_INT 1
6315: ST_TO_ADDR
// if p3 = 8 then
6316: LD_VAR 0 3
6320: PUSH
6321: LD_INT 8
6323: EQUAL
6324: IFFALSE 6334
// sBunker := true ;
6326: LD_ADDR_EXP 36
6330: PUSH
6331: LD_INT 1
6333: ST_TO_ADDR
// if p3 = 9 then
6334: LD_VAR 0 3
6338: PUSH
6339: LD_INT 9
6341: EQUAL
6342: IFFALSE 6352
// sHack := true ;
6344: LD_ADDR_EXP 37
6348: PUSH
6349: LD_INT 1
6351: ST_TO_ADDR
// if p3 = 10 then
6352: LD_VAR 0 3
6356: PUSH
6357: LD_INT 10
6359: EQUAL
6360: IFFALSE 6370
// sFire := true ;
6362: LD_ADDR_EXP 38
6366: PUSH
6367: LD_INT 1
6369: ST_TO_ADDR
// if p3 = 11 then
6370: LD_VAR 0 3
6374: PUSH
6375: LD_INT 11
6377: EQUAL
6378: IFFALSE 6388
// sRefresh := true ;
6380: LD_ADDR_EXP 39
6384: PUSH
6385: LD_INT 1
6387: ST_TO_ADDR
// if p3 = 12 then
6388: LD_VAR 0 3
6392: PUSH
6393: LD_INT 12
6395: EQUAL
6396: IFFALSE 6406
// sExp := true ;
6398: LD_ADDR_EXP 40
6402: PUSH
6403: LD_INT 1
6405: ST_TO_ADDR
// if p3 = 13 then
6406: LD_VAR 0 3
6410: PUSH
6411: LD_INT 13
6413: EQUAL
6414: IFFALSE 6424
// sDepot := true ;
6416: LD_ADDR_EXP 41
6420: PUSH
6421: LD_INT 1
6423: ST_TO_ADDR
// if p3 = 14 then
6424: LD_VAR 0 3
6428: PUSH
6429: LD_INT 14
6431: EQUAL
6432: IFFALSE 6442
// sFlag := true ;
6434: LD_ADDR_EXP 42
6438: PUSH
6439: LD_INT 1
6441: ST_TO_ADDR
// if p3 = 15 then
6442: LD_VAR 0 3
6446: PUSH
6447: LD_INT 15
6449: EQUAL
6450: IFFALSE 6460
// sKamikadze := true ;
6452: LD_ADDR_EXP 50
6456: PUSH
6457: LD_INT 1
6459: ST_TO_ADDR
// if p3 = 16 then
6460: LD_VAR 0 3
6464: PUSH
6465: LD_INT 16
6467: EQUAL
6468: IFFALSE 6478
// sTroll := true ;
6470: LD_ADDR_EXP 51
6474: PUSH
6475: LD_INT 1
6477: ST_TO_ADDR
// if p3 = 17 then
6478: LD_VAR 0 3
6482: PUSH
6483: LD_INT 17
6485: EQUAL
6486: IFFALSE 6496
// sSlow := true ;
6488: LD_ADDR_EXP 52
6492: PUSH
6493: LD_INT 1
6495: ST_TO_ADDR
// if p3 = 18 then
6496: LD_VAR 0 3
6500: PUSH
6501: LD_INT 18
6503: EQUAL
6504: IFFALSE 6514
// sLack := true ;
6506: LD_ADDR_EXP 53
6510: PUSH
6511: LD_INT 1
6513: ST_TO_ADDR
// if p3 = 19 then
6514: LD_VAR 0 3
6518: PUSH
6519: LD_INT 19
6521: EQUAL
6522: IFFALSE 6532
// sTank := true ;
6524: LD_ADDR_EXP 55
6528: PUSH
6529: LD_INT 1
6531: ST_TO_ADDR
// if p3 = 20 then
6532: LD_VAR 0 3
6536: PUSH
6537: LD_INT 20
6539: EQUAL
6540: IFFALSE 6550
// sRemote := true ;
6542: LD_ADDR_EXP 56
6546: PUSH
6547: LD_INT 1
6549: ST_TO_ADDR
// if p3 = 21 then
6550: LD_VAR 0 3
6554: PUSH
6555: LD_INT 21
6557: EQUAL
6558: IFFALSE 6568
// sPowell := true ;
6560: LD_ADDR_EXP 57
6564: PUSH
6565: LD_INT 1
6567: ST_TO_ADDR
// if p3 = 22 then
6568: LD_VAR 0 3
6572: PUSH
6573: LD_INT 22
6575: EQUAL
6576: IFFALSE 6586
// sTeleport := true ;
6578: LD_ADDR_EXP 60
6582: PUSH
6583: LD_INT 1
6585: ST_TO_ADDR
// if p3 = 23 then
6586: LD_VAR 0 3
6590: PUSH
6591: LD_INT 23
6593: EQUAL
6594: IFFALSE 6604
// sOilTower := true ;
6596: LD_ADDR_EXP 62
6600: PUSH
6601: LD_INT 1
6603: ST_TO_ADDR
// if p3 = 24 then
6604: LD_VAR 0 3
6608: PUSH
6609: LD_INT 24
6611: EQUAL
6612: IFFALSE 6622
// sShovel := true ;
6614: LD_ADDR_EXP 63
6618: PUSH
6619: LD_INT 1
6621: ST_TO_ADDR
// if p3 = 25 then
6622: LD_VAR 0 3
6626: PUSH
6627: LD_INT 25
6629: EQUAL
6630: IFFALSE 6640
// sSheik := true ;
6632: LD_ADDR_EXP 64
6636: PUSH
6637: LD_INT 1
6639: ST_TO_ADDR
// if p3 = 26 then
6640: LD_VAR 0 3
6644: PUSH
6645: LD_INT 26
6647: EQUAL
6648: IFFALSE 6658
// sEarthquake := true ;
6650: LD_ADDR_EXP 66
6654: PUSH
6655: LD_INT 1
6657: ST_TO_ADDR
// if p3 = 27 then
6658: LD_VAR 0 3
6662: PUSH
6663: LD_INT 27
6665: EQUAL
6666: IFFALSE 6676
// sAI := true ;
6668: LD_ADDR_EXP 67
6672: PUSH
6673: LD_INT 1
6675: ST_TO_ADDR
// if p3 = 28 then
6676: LD_VAR 0 3
6680: PUSH
6681: LD_INT 28
6683: EQUAL
6684: IFFALSE 6694
// sCargo := true ;
6686: LD_ADDR_EXP 70
6690: PUSH
6691: LD_INT 1
6693: ST_TO_ADDR
// if p3 = 29 then
6694: LD_VAR 0 3
6698: PUSH
6699: LD_INT 29
6701: EQUAL
6702: IFFALSE 6712
// sDLaser := true ;
6704: LD_ADDR_EXP 71
6708: PUSH
6709: LD_INT 1
6711: ST_TO_ADDR
// if p3 = 30 then
6712: LD_VAR 0 3
6716: PUSH
6717: LD_INT 30
6719: EQUAL
6720: IFFALSE 6730
// sExchange := true ;
6722: LD_ADDR_EXP 72
6726: PUSH
6727: LD_INT 1
6729: ST_TO_ADDR
// if p3 = 31 then
6730: LD_VAR 0 3
6734: PUSH
6735: LD_INT 31
6737: EQUAL
6738: IFFALSE 6748
// sFac := true ;
6740: LD_ADDR_EXP 73
6744: PUSH
6745: LD_INT 1
6747: ST_TO_ADDR
// if p3 = 32 then
6748: LD_VAR 0 3
6752: PUSH
6753: LD_INT 32
6755: EQUAL
6756: IFFALSE 6766
// sPower := true ;
6758: LD_ADDR_EXP 74
6762: PUSH
6763: LD_INT 1
6765: ST_TO_ADDR
// if p3 = 33 then
6766: LD_VAR 0 3
6770: PUSH
6771: LD_INT 33
6773: EQUAL
6774: IFFALSE 6784
// sRandom := true ;
6776: LD_ADDR_EXP 75
6780: PUSH
6781: LD_INT 1
6783: ST_TO_ADDR
// if p3 = 34 then
6784: LD_VAR 0 3
6788: PUSH
6789: LD_INT 34
6791: EQUAL
6792: IFFALSE 6802
// sShield := true ;
6794: LD_ADDR_EXP 76
6798: PUSH
6799: LD_INT 1
6801: ST_TO_ADDR
// if p3 = 35 then
6802: LD_VAR 0 3
6806: PUSH
6807: LD_INT 35
6809: EQUAL
6810: IFFALSE 6820
// sTime := true ;
6812: LD_ADDR_EXP 77
6816: PUSH
6817: LD_INT 1
6819: ST_TO_ADDR
// if p3 = 36 then
6820: LD_VAR 0 3
6824: PUSH
6825: LD_INT 36
6827: EQUAL
6828: IFFALSE 6838
// sTools := true ;
6830: LD_ADDR_EXP 78
6834: PUSH
6835: LD_INT 1
6837: ST_TO_ADDR
// if p3 = 101 then
6838: LD_VAR 0 3
6842: PUSH
6843: LD_INT 101
6845: EQUAL
6846: IFFALSE 6856
// sSold := true ;
6848: LD_ADDR_EXP 43
6852: PUSH
6853: LD_INT 1
6855: ST_TO_ADDR
// if p3 = 102 then
6856: LD_VAR 0 3
6860: PUSH
6861: LD_INT 102
6863: EQUAL
6864: IFFALSE 6874
// sDiff := true ;
6866: LD_ADDR_EXP 44
6870: PUSH
6871: LD_INT 1
6873: ST_TO_ADDR
// if p3 = 103 then
6874: LD_VAR 0 3
6878: PUSH
6879: LD_INT 103
6881: EQUAL
6882: IFFALSE 6892
// sFog := true ;
6884: LD_ADDR_EXP 47
6888: PUSH
6889: LD_INT 1
6891: ST_TO_ADDR
// if p3 = 104 then
6892: LD_VAR 0 3
6896: PUSH
6897: LD_INT 104
6899: EQUAL
6900: IFFALSE 6910
// sReset := true ;
6902: LD_ADDR_EXP 48
6906: PUSH
6907: LD_INT 1
6909: ST_TO_ADDR
// if p3 = 105 then
6910: LD_VAR 0 3
6914: PUSH
6915: LD_INT 105
6917: EQUAL
6918: IFFALSE 6928
// sSun := true ;
6920: LD_ADDR_EXP 49
6924: PUSH
6925: LD_INT 1
6927: ST_TO_ADDR
// if p3 = 106 then
6928: LD_VAR 0 3
6932: PUSH
6933: LD_INT 106
6935: EQUAL
6936: IFFALSE 6946
// sTiger := true ;
6938: LD_ADDR_EXP 45
6942: PUSH
6943: LD_INT 1
6945: ST_TO_ADDR
// if p3 = 107 then
6946: LD_VAR 0 3
6950: PUSH
6951: LD_INT 107
6953: EQUAL
6954: IFFALSE 6964
// sBomb := true ;
6956: LD_ADDR_EXP 46
6960: PUSH
6961: LD_INT 1
6963: ST_TO_ADDR
// if p3 = 108 then
6964: LD_VAR 0 3
6968: PUSH
6969: LD_INT 108
6971: EQUAL
6972: IFFALSE 6982
// sWound := true ;
6974: LD_ADDR_EXP 54
6978: PUSH
6979: LD_INT 1
6981: ST_TO_ADDR
// if p3 = 109 then
6982: LD_VAR 0 3
6986: PUSH
6987: LD_INT 109
6989: EQUAL
6990: IFFALSE 7000
// sBetray := true ;
6992: LD_ADDR_EXP 58
6996: PUSH
6997: LD_INT 1
6999: ST_TO_ADDR
// if p3 = 110 then
7000: LD_VAR 0 3
7004: PUSH
7005: LD_INT 110
7007: EQUAL
7008: IFFALSE 7018
// sContamin := true ;
7010: LD_ADDR_EXP 59
7014: PUSH
7015: LD_INT 1
7017: ST_TO_ADDR
// if p3 = 111 then
7018: LD_VAR 0 3
7022: PUSH
7023: LD_INT 111
7025: EQUAL
7026: IFFALSE 7036
// sOil := true ;
7028: LD_ADDR_EXP 61
7032: PUSH
7033: LD_INT 1
7035: ST_TO_ADDR
// if p3 = 112 then
7036: LD_VAR 0 3
7040: PUSH
7041: LD_INT 112
7043: EQUAL
7044: IFFALSE 7054
// sStu := true ;
7046: LD_ADDR_EXP 65
7050: PUSH
7051: LD_INT 1
7053: ST_TO_ADDR
// if p3 = 113 then
7054: LD_VAR 0 3
7058: PUSH
7059: LD_INT 113
7061: EQUAL
7062: IFFALSE 7072
// sBazooka := true ;
7064: LD_ADDR_EXP 68
7068: PUSH
7069: LD_INT 1
7071: ST_TO_ADDR
// if p3 = 114 then
7072: LD_VAR 0 3
7076: PUSH
7077: LD_INT 114
7079: EQUAL
7080: IFFALSE 7090
// sMortar := true ;
7082: LD_ADDR_EXP 69
7086: PUSH
7087: LD_INT 1
7089: ST_TO_ADDR
// if p3 = 115 then
7090: LD_VAR 0 3
7094: PUSH
7095: LD_INT 115
7097: EQUAL
7098: IFFALSE 7108
// sRanger := true ;
7100: LD_ADDR_EXP 79
7104: PUSH
7105: LD_INT 1
7107: ST_TO_ADDR
// if p3 = 116 then
7108: LD_VAR 0 3
7112: PUSH
7113: LD_INT 116
7115: EQUAL
7116: IFFALSE 7126
// sComputer := true ;
7118: LD_ADDR_EXP 80
7122: PUSH
7123: LD_INT 1
7125: ST_TO_ADDR
// if p3 = 117 then
7126: LD_VAR 0 3
7130: PUSH
7131: LD_INT 117
7133: EQUAL
7134: IFFALSE 7144
// s30 := true ;
7136: LD_ADDR_EXP 81
7140: PUSH
7141: LD_INT 1
7143: ST_TO_ADDR
// if p3 = 118 then
7144: LD_VAR 0 3
7148: PUSH
7149: LD_INT 118
7151: EQUAL
7152: IFFALSE 7162
// s60 := true ;
7154: LD_ADDR_EXP 82
7158: PUSH
7159: LD_INT 1
7161: ST_TO_ADDR
// end ; if p2 = hack_mode then
7162: LD_VAR 0 2
7166: PUSH
7167: LD_INT 101
7169: EQUAL
7170: IFFALSE 7298
// begin case p3 of 1 :
7172: LD_VAR 0 3
7176: PUSH
7177: LD_INT 1
7179: DOUBLE
7180: EQUAL
7181: IFTRUE 7185
7183: GO 7192
7185: POP
// hHackUnlimitedResources ; 2 :
7186: CALL 19445 0 0
7190: GO 7298
7192: LD_INT 2
7194: DOUBLE
7195: EQUAL
7196: IFTRUE 7200
7198: GO 7207
7200: POP
// hHackSetLevel10 ; 3 :
7201: CALL 19578 0 0
7205: GO 7298
7207: LD_INT 3
7209: DOUBLE
7210: EQUAL
7211: IFTRUE 7215
7213: GO 7222
7215: POP
// hHackSetLevel10YourUnits ; 4 :
7216: CALL 19663 0 0
7220: GO 7298
7222: LD_INT 4
7224: DOUBLE
7225: EQUAL
7226: IFTRUE 7230
7228: GO 7237
7230: POP
// hHackInvincible ; 5 :
7231: CALL 20111 0 0
7235: GO 7298
7237: LD_INT 5
7239: DOUBLE
7240: EQUAL
7241: IFTRUE 7245
7243: GO 7252
7245: POP
// hHackInvisible ; 6 :
7246: CALL 20222 0 0
7250: GO 7298
7252: LD_INT 6
7254: DOUBLE
7255: EQUAL
7256: IFTRUE 7260
7258: GO 7267
7260: POP
// hHackChangeYourSide ; 7 :
7261: CALL 20279 0 0
7265: GO 7298
7267: LD_INT 7
7269: DOUBLE
7270: EQUAL
7271: IFTRUE 7275
7273: GO 7282
7275: POP
// hHackChangeUnitSide ; 8 :
7276: CALL 20321 0 0
7280: GO 7298
7282: LD_INT 8
7284: DOUBLE
7285: EQUAL
7286: IFTRUE 7290
7288: GO 7297
7290: POP
// hHackFog ; end ;
7291: CALL 20422 0 0
7295: GO 7298
7297: POP
// end ; if p2 = game_save_mode then
7298: LD_VAR 0 2
7302: PUSH
7303: LD_INT 102
7305: EQUAL
7306: IFFALSE 7361
// begin if p3 = 1 then
7308: LD_VAR 0 3
7312: PUSH
7313: LD_INT 1
7315: EQUAL
7316: IFFALSE 7328
// globalGameSaveCounter := p4 ;
7318: LD_ADDR_EXP 25
7322: PUSH
7323: LD_VAR 0 4
7327: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
7328: LD_VAR 0 3
7332: PUSH
7333: LD_INT 2
7335: EQUAL
7336: PUSH
7337: LD_EXP 25
7341: AND
7342: IFFALSE 7361
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7344: LD_STRING setGameSaveCounter(
7346: PUSH
7347: LD_EXP 25
7351: STR
7352: PUSH
7353: LD_STRING )
7355: STR
7356: PPUSH
7357: CALL_OW 559
// end ; end ;
7361: LD_VAR 0 7
7365: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
7366: LD_INT 0
7368: PPUSH
// streamModeActive := false ;
7369: LD_ADDR_EXP 26
7373: PUSH
7374: LD_INT 0
7376: ST_TO_ADDR
// normalCounter := 36 ;
7377: LD_ADDR_EXP 27
7381: PUSH
7382: LD_INT 36
7384: ST_TO_ADDR
// hardcoreCounter := 18 ;
7385: LD_ADDR_EXP 28
7389: PUSH
7390: LD_INT 18
7392: ST_TO_ADDR
// sRocket := false ;
7393: LD_ADDR_EXP 31
7397: PUSH
7398: LD_INT 0
7400: ST_TO_ADDR
// sSpeed := false ;
7401: LD_ADDR_EXP 30
7405: PUSH
7406: LD_INT 0
7408: ST_TO_ADDR
// sEngine := false ;
7409: LD_ADDR_EXP 32
7413: PUSH
7414: LD_INT 0
7416: ST_TO_ADDR
// sSpec := false ;
7417: LD_ADDR_EXP 29
7421: PUSH
7422: LD_INT 0
7424: ST_TO_ADDR
// sLevel := false ;
7425: LD_ADDR_EXP 33
7429: PUSH
7430: LD_INT 0
7432: ST_TO_ADDR
// sArmoury := false ;
7433: LD_ADDR_EXP 34
7437: PUSH
7438: LD_INT 0
7440: ST_TO_ADDR
// sRadar := false ;
7441: LD_ADDR_EXP 35
7445: PUSH
7446: LD_INT 0
7448: ST_TO_ADDR
// sBunker := false ;
7449: LD_ADDR_EXP 36
7453: PUSH
7454: LD_INT 0
7456: ST_TO_ADDR
// sHack := false ;
7457: LD_ADDR_EXP 37
7461: PUSH
7462: LD_INT 0
7464: ST_TO_ADDR
// sFire := false ;
7465: LD_ADDR_EXP 38
7469: PUSH
7470: LD_INT 0
7472: ST_TO_ADDR
// sRefresh := false ;
7473: LD_ADDR_EXP 39
7477: PUSH
7478: LD_INT 0
7480: ST_TO_ADDR
// sExp := false ;
7481: LD_ADDR_EXP 40
7485: PUSH
7486: LD_INT 0
7488: ST_TO_ADDR
// sDepot := false ;
7489: LD_ADDR_EXP 41
7493: PUSH
7494: LD_INT 0
7496: ST_TO_ADDR
// sFlag := false ;
7497: LD_ADDR_EXP 42
7501: PUSH
7502: LD_INT 0
7504: ST_TO_ADDR
// sKamikadze := false ;
7505: LD_ADDR_EXP 50
7509: PUSH
7510: LD_INT 0
7512: ST_TO_ADDR
// sTroll := false ;
7513: LD_ADDR_EXP 51
7517: PUSH
7518: LD_INT 0
7520: ST_TO_ADDR
// sSlow := false ;
7521: LD_ADDR_EXP 52
7525: PUSH
7526: LD_INT 0
7528: ST_TO_ADDR
// sLack := false ;
7529: LD_ADDR_EXP 53
7533: PUSH
7534: LD_INT 0
7536: ST_TO_ADDR
// sTank := false ;
7537: LD_ADDR_EXP 55
7541: PUSH
7542: LD_INT 0
7544: ST_TO_ADDR
// sRemote := false ;
7545: LD_ADDR_EXP 56
7549: PUSH
7550: LD_INT 0
7552: ST_TO_ADDR
// sPowell := false ;
7553: LD_ADDR_EXP 57
7557: PUSH
7558: LD_INT 0
7560: ST_TO_ADDR
// sTeleport := false ;
7561: LD_ADDR_EXP 60
7565: PUSH
7566: LD_INT 0
7568: ST_TO_ADDR
// sOilTower := false ;
7569: LD_ADDR_EXP 62
7573: PUSH
7574: LD_INT 0
7576: ST_TO_ADDR
// sShovel := false ;
7577: LD_ADDR_EXP 63
7581: PUSH
7582: LD_INT 0
7584: ST_TO_ADDR
// sSheik := false ;
7585: LD_ADDR_EXP 64
7589: PUSH
7590: LD_INT 0
7592: ST_TO_ADDR
// sEarthquake := false ;
7593: LD_ADDR_EXP 66
7597: PUSH
7598: LD_INT 0
7600: ST_TO_ADDR
// sAI := false ;
7601: LD_ADDR_EXP 67
7605: PUSH
7606: LD_INT 0
7608: ST_TO_ADDR
// sCargo := false ;
7609: LD_ADDR_EXP 70
7613: PUSH
7614: LD_INT 0
7616: ST_TO_ADDR
// sDLaser := false ;
7617: LD_ADDR_EXP 71
7621: PUSH
7622: LD_INT 0
7624: ST_TO_ADDR
// sExchange := false ;
7625: LD_ADDR_EXP 72
7629: PUSH
7630: LD_INT 0
7632: ST_TO_ADDR
// sFac := false ;
7633: LD_ADDR_EXP 73
7637: PUSH
7638: LD_INT 0
7640: ST_TO_ADDR
// sPower := false ;
7641: LD_ADDR_EXP 74
7645: PUSH
7646: LD_INT 0
7648: ST_TO_ADDR
// sRandom := false ;
7649: LD_ADDR_EXP 75
7653: PUSH
7654: LD_INT 0
7656: ST_TO_ADDR
// sShield := false ;
7657: LD_ADDR_EXP 76
7661: PUSH
7662: LD_INT 0
7664: ST_TO_ADDR
// sTime := false ;
7665: LD_ADDR_EXP 77
7669: PUSH
7670: LD_INT 0
7672: ST_TO_ADDR
// sTools := false ;
7673: LD_ADDR_EXP 78
7677: PUSH
7678: LD_INT 0
7680: ST_TO_ADDR
// sSold := false ;
7681: LD_ADDR_EXP 43
7685: PUSH
7686: LD_INT 0
7688: ST_TO_ADDR
// sDiff := false ;
7689: LD_ADDR_EXP 44
7693: PUSH
7694: LD_INT 0
7696: ST_TO_ADDR
// sFog := false ;
7697: LD_ADDR_EXP 47
7701: PUSH
7702: LD_INT 0
7704: ST_TO_ADDR
// sReset := false ;
7705: LD_ADDR_EXP 48
7709: PUSH
7710: LD_INT 0
7712: ST_TO_ADDR
// sSun := false ;
7713: LD_ADDR_EXP 49
7717: PUSH
7718: LD_INT 0
7720: ST_TO_ADDR
// sTiger := false ;
7721: LD_ADDR_EXP 45
7725: PUSH
7726: LD_INT 0
7728: ST_TO_ADDR
// sBomb := false ;
7729: LD_ADDR_EXP 46
7733: PUSH
7734: LD_INT 0
7736: ST_TO_ADDR
// sWound := false ;
7737: LD_ADDR_EXP 54
7741: PUSH
7742: LD_INT 0
7744: ST_TO_ADDR
// sBetray := false ;
7745: LD_ADDR_EXP 58
7749: PUSH
7750: LD_INT 0
7752: ST_TO_ADDR
// sContamin := false ;
7753: LD_ADDR_EXP 59
7757: PUSH
7758: LD_INT 0
7760: ST_TO_ADDR
// sOil := false ;
7761: LD_ADDR_EXP 61
7765: PUSH
7766: LD_INT 0
7768: ST_TO_ADDR
// sStu := false ;
7769: LD_ADDR_EXP 65
7773: PUSH
7774: LD_INT 0
7776: ST_TO_ADDR
// sBazooka := false ;
7777: LD_ADDR_EXP 68
7781: PUSH
7782: LD_INT 0
7784: ST_TO_ADDR
// sMortar := false ;
7785: LD_ADDR_EXP 69
7789: PUSH
7790: LD_INT 0
7792: ST_TO_ADDR
// sRanger := false ;
7793: LD_ADDR_EXP 79
7797: PUSH
7798: LD_INT 0
7800: ST_TO_ADDR
// sComputer := false ;
7801: LD_ADDR_EXP 80
7805: PUSH
7806: LD_INT 0
7808: ST_TO_ADDR
// s30 := false ;
7809: LD_ADDR_EXP 81
7813: PUSH
7814: LD_INT 0
7816: ST_TO_ADDR
// s60 := false ;
7817: LD_ADDR_EXP 82
7821: PUSH
7822: LD_INT 0
7824: ST_TO_ADDR
// end ;
7825: LD_VAR 0 1
7829: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7830: LD_INT 0
7832: PPUSH
7833: PPUSH
7834: PPUSH
7835: PPUSH
7836: PPUSH
7837: PPUSH
7838: PPUSH
// result := [ ] ;
7839: LD_ADDR_VAR 0 2
7843: PUSH
7844: EMPTY
7845: ST_TO_ADDR
// if campaign_id = 1 then
7846: LD_OWVAR 69
7850: PUSH
7851: LD_INT 1
7853: EQUAL
7854: IFFALSE 11020
// begin case mission_number of 1 :
7856: LD_OWVAR 70
7860: PUSH
7861: LD_INT 1
7863: DOUBLE
7864: EQUAL
7865: IFTRUE 7869
7867: GO 7945
7869: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7870: LD_ADDR_VAR 0 2
7874: PUSH
7875: LD_INT 2
7877: PUSH
7878: LD_INT 4
7880: PUSH
7881: LD_INT 11
7883: PUSH
7884: LD_INT 12
7886: PUSH
7887: LD_INT 15
7889: PUSH
7890: LD_INT 16
7892: PUSH
7893: LD_INT 22
7895: PUSH
7896: LD_INT 23
7898: PUSH
7899: LD_INT 26
7901: PUSH
7902: EMPTY
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: PUSH
7913: LD_INT 101
7915: PUSH
7916: LD_INT 102
7918: PUSH
7919: LD_INT 106
7921: PUSH
7922: LD_INT 116
7924: PUSH
7925: LD_INT 117
7927: PUSH
7928: LD_INT 118
7930: PUSH
7931: EMPTY
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: ST_TO_ADDR
7943: GO 11018
7945: LD_INT 2
7947: DOUBLE
7948: EQUAL
7949: IFTRUE 7953
7951: GO 8037
7953: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7954: LD_ADDR_VAR 0 2
7958: PUSH
7959: LD_INT 2
7961: PUSH
7962: LD_INT 4
7964: PUSH
7965: LD_INT 11
7967: PUSH
7968: LD_INT 12
7970: PUSH
7971: LD_INT 15
7973: PUSH
7974: LD_INT 16
7976: PUSH
7977: LD_INT 22
7979: PUSH
7980: LD_INT 23
7982: PUSH
7983: LD_INT 26
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: PUSH
7997: LD_INT 101
7999: PUSH
8000: LD_INT 102
8002: PUSH
8003: LD_INT 105
8005: PUSH
8006: LD_INT 106
8008: PUSH
8009: LD_INT 108
8011: PUSH
8012: LD_INT 116
8014: PUSH
8015: LD_INT 117
8017: PUSH
8018: LD_INT 118
8020: PUSH
8021: EMPTY
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: ST_TO_ADDR
8035: GO 11018
8037: LD_INT 3
8039: DOUBLE
8040: EQUAL
8041: IFTRUE 8045
8043: GO 8133
8045: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
8046: LD_ADDR_VAR 0 2
8050: PUSH
8051: LD_INT 2
8053: PUSH
8054: LD_INT 4
8056: PUSH
8057: LD_INT 5
8059: PUSH
8060: LD_INT 11
8062: PUSH
8063: LD_INT 12
8065: PUSH
8066: LD_INT 15
8068: PUSH
8069: LD_INT 16
8071: PUSH
8072: LD_INT 22
8074: PUSH
8075: LD_INT 26
8077: PUSH
8078: LD_INT 36
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: PUSH
8093: LD_INT 101
8095: PUSH
8096: LD_INT 102
8098: PUSH
8099: LD_INT 105
8101: PUSH
8102: LD_INT 106
8104: PUSH
8105: LD_INT 108
8107: PUSH
8108: LD_INT 116
8110: PUSH
8111: LD_INT 117
8113: PUSH
8114: LD_INT 118
8116: PUSH
8117: EMPTY
8118: LIST
8119: LIST
8120: LIST
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: ST_TO_ADDR
8131: GO 11018
8133: LD_INT 4
8135: DOUBLE
8136: EQUAL
8137: IFTRUE 8141
8139: GO 8237
8141: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
8142: LD_ADDR_VAR 0 2
8146: PUSH
8147: LD_INT 2
8149: PUSH
8150: LD_INT 4
8152: PUSH
8153: LD_INT 5
8155: PUSH
8156: LD_INT 8
8158: PUSH
8159: LD_INT 11
8161: PUSH
8162: LD_INT 12
8164: PUSH
8165: LD_INT 15
8167: PUSH
8168: LD_INT 16
8170: PUSH
8171: LD_INT 22
8173: PUSH
8174: LD_INT 23
8176: PUSH
8177: LD_INT 26
8179: PUSH
8180: LD_INT 36
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: PUSH
8197: LD_INT 101
8199: PUSH
8200: LD_INT 102
8202: PUSH
8203: LD_INT 105
8205: PUSH
8206: LD_INT 106
8208: PUSH
8209: LD_INT 108
8211: PUSH
8212: LD_INT 116
8214: PUSH
8215: LD_INT 117
8217: PUSH
8218: LD_INT 118
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: ST_TO_ADDR
8235: GO 11018
8237: LD_INT 5
8239: DOUBLE
8240: EQUAL
8241: IFTRUE 8245
8243: GO 8357
8245: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
8246: LD_ADDR_VAR 0 2
8250: PUSH
8251: LD_INT 2
8253: PUSH
8254: LD_INT 4
8256: PUSH
8257: LD_INT 5
8259: PUSH
8260: LD_INT 6
8262: PUSH
8263: LD_INT 8
8265: PUSH
8266: LD_INT 11
8268: PUSH
8269: LD_INT 12
8271: PUSH
8272: LD_INT 15
8274: PUSH
8275: LD_INT 16
8277: PUSH
8278: LD_INT 22
8280: PUSH
8281: LD_INT 23
8283: PUSH
8284: LD_INT 25
8286: PUSH
8287: LD_INT 26
8289: PUSH
8290: LD_INT 36
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: PUSH
8309: LD_INT 101
8311: PUSH
8312: LD_INT 102
8314: PUSH
8315: LD_INT 105
8317: PUSH
8318: LD_INT 106
8320: PUSH
8321: LD_INT 108
8323: PUSH
8324: LD_INT 109
8326: PUSH
8327: LD_INT 112
8329: PUSH
8330: LD_INT 116
8332: PUSH
8333: LD_INT 117
8335: PUSH
8336: LD_INT 118
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: ST_TO_ADDR
8355: GO 11018
8357: LD_INT 6
8359: DOUBLE
8360: EQUAL
8361: IFTRUE 8365
8363: GO 8497
8365: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
8366: LD_ADDR_VAR 0 2
8370: PUSH
8371: LD_INT 2
8373: PUSH
8374: LD_INT 4
8376: PUSH
8377: LD_INT 5
8379: PUSH
8380: LD_INT 6
8382: PUSH
8383: LD_INT 8
8385: PUSH
8386: LD_INT 11
8388: PUSH
8389: LD_INT 12
8391: PUSH
8392: LD_INT 15
8394: PUSH
8395: LD_INT 16
8397: PUSH
8398: LD_INT 20
8400: PUSH
8401: LD_INT 21
8403: PUSH
8404: LD_INT 22
8406: PUSH
8407: LD_INT 23
8409: PUSH
8410: LD_INT 25
8412: PUSH
8413: LD_INT 26
8415: PUSH
8416: LD_INT 30
8418: PUSH
8419: LD_INT 31
8421: PUSH
8422: LD_INT 32
8424: PUSH
8425: LD_INT 36
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: PUSH
8449: LD_INT 101
8451: PUSH
8452: LD_INT 102
8454: PUSH
8455: LD_INT 105
8457: PUSH
8458: LD_INT 106
8460: PUSH
8461: LD_INT 108
8463: PUSH
8464: LD_INT 109
8466: PUSH
8467: LD_INT 112
8469: PUSH
8470: LD_INT 116
8472: PUSH
8473: LD_INT 117
8475: PUSH
8476: LD_INT 118
8478: PUSH
8479: EMPTY
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: PUSH
8491: EMPTY
8492: LIST
8493: LIST
8494: ST_TO_ADDR
8495: GO 11018
8497: LD_INT 7
8499: DOUBLE
8500: EQUAL
8501: IFTRUE 8505
8503: GO 8617
8505: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8506: LD_ADDR_VAR 0 2
8510: PUSH
8511: LD_INT 2
8513: PUSH
8514: LD_INT 4
8516: PUSH
8517: LD_INT 5
8519: PUSH
8520: LD_INT 7
8522: PUSH
8523: LD_INT 11
8525: PUSH
8526: LD_INT 12
8528: PUSH
8529: LD_INT 15
8531: PUSH
8532: LD_INT 16
8534: PUSH
8535: LD_INT 20
8537: PUSH
8538: LD_INT 21
8540: PUSH
8541: LD_INT 22
8543: PUSH
8544: LD_INT 23
8546: PUSH
8547: LD_INT 25
8549: PUSH
8550: LD_INT 26
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: PUSH
8569: LD_INT 101
8571: PUSH
8572: LD_INT 102
8574: PUSH
8575: LD_INT 103
8577: PUSH
8578: LD_INT 105
8580: PUSH
8581: LD_INT 106
8583: PUSH
8584: LD_INT 108
8586: PUSH
8587: LD_INT 112
8589: PUSH
8590: LD_INT 116
8592: PUSH
8593: LD_INT 117
8595: PUSH
8596: LD_INT 118
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: LIST
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: LIST
8610: PUSH
8611: EMPTY
8612: LIST
8613: LIST
8614: ST_TO_ADDR
8615: GO 11018
8617: LD_INT 8
8619: DOUBLE
8620: EQUAL
8621: IFTRUE 8625
8623: GO 8765
8625: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8626: LD_ADDR_VAR 0 2
8630: PUSH
8631: LD_INT 2
8633: PUSH
8634: LD_INT 4
8636: PUSH
8637: LD_INT 5
8639: PUSH
8640: LD_INT 6
8642: PUSH
8643: LD_INT 7
8645: PUSH
8646: LD_INT 8
8648: PUSH
8649: LD_INT 11
8651: PUSH
8652: LD_INT 12
8654: PUSH
8655: LD_INT 15
8657: PUSH
8658: LD_INT 16
8660: PUSH
8661: LD_INT 20
8663: PUSH
8664: LD_INT 21
8666: PUSH
8667: LD_INT 22
8669: PUSH
8670: LD_INT 23
8672: PUSH
8673: LD_INT 25
8675: PUSH
8676: LD_INT 26
8678: PUSH
8679: LD_INT 30
8681: PUSH
8682: LD_INT 31
8684: PUSH
8685: LD_INT 32
8687: PUSH
8688: LD_INT 36
8690: PUSH
8691: EMPTY
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: PUSH
8713: LD_INT 101
8715: PUSH
8716: LD_INT 102
8718: PUSH
8719: LD_INT 103
8721: PUSH
8722: LD_INT 105
8724: PUSH
8725: LD_INT 106
8727: PUSH
8728: LD_INT 108
8730: PUSH
8731: LD_INT 109
8733: PUSH
8734: LD_INT 112
8736: PUSH
8737: LD_INT 116
8739: PUSH
8740: LD_INT 117
8742: PUSH
8743: LD_INT 118
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: PUSH
8759: EMPTY
8760: LIST
8761: LIST
8762: ST_TO_ADDR
8763: GO 11018
8765: LD_INT 9
8767: DOUBLE
8768: EQUAL
8769: IFTRUE 8773
8771: GO 8921
8773: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8774: LD_ADDR_VAR 0 2
8778: PUSH
8779: LD_INT 2
8781: PUSH
8782: LD_INT 4
8784: PUSH
8785: LD_INT 5
8787: PUSH
8788: LD_INT 6
8790: PUSH
8791: LD_INT 7
8793: PUSH
8794: LD_INT 8
8796: PUSH
8797: LD_INT 11
8799: PUSH
8800: LD_INT 12
8802: PUSH
8803: LD_INT 15
8805: PUSH
8806: LD_INT 16
8808: PUSH
8809: LD_INT 20
8811: PUSH
8812: LD_INT 21
8814: PUSH
8815: LD_INT 22
8817: PUSH
8818: LD_INT 23
8820: PUSH
8821: LD_INT 25
8823: PUSH
8824: LD_INT 26
8826: PUSH
8827: LD_INT 28
8829: PUSH
8830: LD_INT 30
8832: PUSH
8833: LD_INT 31
8835: PUSH
8836: LD_INT 32
8838: PUSH
8839: LD_INT 36
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: PUSH
8865: LD_INT 101
8867: PUSH
8868: LD_INT 102
8870: PUSH
8871: LD_INT 103
8873: PUSH
8874: LD_INT 105
8876: PUSH
8877: LD_INT 106
8879: PUSH
8880: LD_INT 108
8882: PUSH
8883: LD_INT 109
8885: PUSH
8886: LD_INT 112
8888: PUSH
8889: LD_INT 114
8891: PUSH
8892: LD_INT 116
8894: PUSH
8895: LD_INT 117
8897: PUSH
8898: LD_INT 118
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: ST_TO_ADDR
8919: GO 11018
8921: LD_INT 10
8923: DOUBLE
8924: EQUAL
8925: IFTRUE 8929
8927: GO 9125
8929: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8930: LD_ADDR_VAR 0 2
8934: PUSH
8935: LD_INT 2
8937: PUSH
8938: LD_INT 4
8940: PUSH
8941: LD_INT 5
8943: PUSH
8944: LD_INT 6
8946: PUSH
8947: LD_INT 7
8949: PUSH
8950: LD_INT 8
8952: PUSH
8953: LD_INT 9
8955: PUSH
8956: LD_INT 10
8958: PUSH
8959: LD_INT 11
8961: PUSH
8962: LD_INT 12
8964: PUSH
8965: LD_INT 13
8967: PUSH
8968: LD_INT 14
8970: PUSH
8971: LD_INT 15
8973: PUSH
8974: LD_INT 16
8976: PUSH
8977: LD_INT 17
8979: PUSH
8980: LD_INT 18
8982: PUSH
8983: LD_INT 19
8985: PUSH
8986: LD_INT 20
8988: PUSH
8989: LD_INT 21
8991: PUSH
8992: LD_INT 22
8994: PUSH
8995: LD_INT 23
8997: PUSH
8998: LD_INT 24
9000: PUSH
9001: LD_INT 25
9003: PUSH
9004: LD_INT 26
9006: PUSH
9007: LD_INT 28
9009: PUSH
9010: LD_INT 30
9012: PUSH
9013: LD_INT 31
9015: PUSH
9016: LD_INT 32
9018: PUSH
9019: LD_INT 36
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: PUSH
9053: LD_INT 101
9055: PUSH
9056: LD_INT 102
9058: PUSH
9059: LD_INT 103
9061: PUSH
9062: LD_INT 104
9064: PUSH
9065: LD_INT 105
9067: PUSH
9068: LD_INT 106
9070: PUSH
9071: LD_INT 107
9073: PUSH
9074: LD_INT 108
9076: PUSH
9077: LD_INT 109
9079: PUSH
9080: LD_INT 110
9082: PUSH
9083: LD_INT 111
9085: PUSH
9086: LD_INT 112
9088: PUSH
9089: LD_INT 114
9091: PUSH
9092: LD_INT 116
9094: PUSH
9095: LD_INT 117
9097: PUSH
9098: LD_INT 118
9100: PUSH
9101: EMPTY
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: ST_TO_ADDR
9123: GO 11018
9125: LD_INT 11
9127: DOUBLE
9128: EQUAL
9129: IFTRUE 9133
9131: GO 9337
9133: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
9134: LD_ADDR_VAR 0 2
9138: PUSH
9139: LD_INT 2
9141: PUSH
9142: LD_INT 3
9144: PUSH
9145: LD_INT 4
9147: PUSH
9148: LD_INT 5
9150: PUSH
9151: LD_INT 6
9153: PUSH
9154: LD_INT 7
9156: PUSH
9157: LD_INT 8
9159: PUSH
9160: LD_INT 9
9162: PUSH
9163: LD_INT 10
9165: PUSH
9166: LD_INT 11
9168: PUSH
9169: LD_INT 12
9171: PUSH
9172: LD_INT 13
9174: PUSH
9175: LD_INT 14
9177: PUSH
9178: LD_INT 15
9180: PUSH
9181: LD_INT 16
9183: PUSH
9184: LD_INT 17
9186: PUSH
9187: LD_INT 18
9189: PUSH
9190: LD_INT 19
9192: PUSH
9193: LD_INT 20
9195: PUSH
9196: LD_INT 21
9198: PUSH
9199: LD_INT 22
9201: PUSH
9202: LD_INT 23
9204: PUSH
9205: LD_INT 24
9207: PUSH
9208: LD_INT 25
9210: PUSH
9211: LD_INT 26
9213: PUSH
9214: LD_INT 28
9216: PUSH
9217: LD_INT 30
9219: PUSH
9220: LD_INT 31
9222: PUSH
9223: LD_INT 32
9225: PUSH
9226: LD_INT 34
9228: PUSH
9229: LD_INT 36
9231: PUSH
9232: EMPTY
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: PUSH
9265: LD_INT 101
9267: PUSH
9268: LD_INT 102
9270: PUSH
9271: LD_INT 103
9273: PUSH
9274: LD_INT 104
9276: PUSH
9277: LD_INT 105
9279: PUSH
9280: LD_INT 106
9282: PUSH
9283: LD_INT 107
9285: PUSH
9286: LD_INT 108
9288: PUSH
9289: LD_INT 109
9291: PUSH
9292: LD_INT 110
9294: PUSH
9295: LD_INT 111
9297: PUSH
9298: LD_INT 112
9300: PUSH
9301: LD_INT 114
9303: PUSH
9304: LD_INT 116
9306: PUSH
9307: LD_INT 117
9309: PUSH
9310: LD_INT 118
9312: PUSH
9313: EMPTY
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: ST_TO_ADDR
9335: GO 11018
9337: LD_INT 12
9339: DOUBLE
9340: EQUAL
9341: IFTRUE 9345
9343: GO 9565
9345: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
9346: LD_ADDR_VAR 0 2
9350: PUSH
9351: LD_INT 1
9353: PUSH
9354: LD_INT 2
9356: PUSH
9357: LD_INT 3
9359: PUSH
9360: LD_INT 4
9362: PUSH
9363: LD_INT 5
9365: PUSH
9366: LD_INT 6
9368: PUSH
9369: LD_INT 7
9371: PUSH
9372: LD_INT 8
9374: PUSH
9375: LD_INT 9
9377: PUSH
9378: LD_INT 10
9380: PUSH
9381: LD_INT 11
9383: PUSH
9384: LD_INT 12
9386: PUSH
9387: LD_INT 13
9389: PUSH
9390: LD_INT 14
9392: PUSH
9393: LD_INT 15
9395: PUSH
9396: LD_INT 16
9398: PUSH
9399: LD_INT 17
9401: PUSH
9402: LD_INT 18
9404: PUSH
9405: LD_INT 19
9407: PUSH
9408: LD_INT 20
9410: PUSH
9411: LD_INT 21
9413: PUSH
9414: LD_INT 22
9416: PUSH
9417: LD_INT 23
9419: PUSH
9420: LD_INT 24
9422: PUSH
9423: LD_INT 25
9425: PUSH
9426: LD_INT 26
9428: PUSH
9429: LD_INT 27
9431: PUSH
9432: LD_INT 28
9434: PUSH
9435: LD_INT 30
9437: PUSH
9438: LD_INT 31
9440: PUSH
9441: LD_INT 32
9443: PUSH
9444: LD_INT 33
9446: PUSH
9447: LD_INT 34
9449: PUSH
9450: LD_INT 36
9452: PUSH
9453: EMPTY
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: PUSH
9489: LD_INT 101
9491: PUSH
9492: LD_INT 102
9494: PUSH
9495: LD_INT 103
9497: PUSH
9498: LD_INT 104
9500: PUSH
9501: LD_INT 105
9503: PUSH
9504: LD_INT 106
9506: PUSH
9507: LD_INT 107
9509: PUSH
9510: LD_INT 108
9512: PUSH
9513: LD_INT 109
9515: PUSH
9516: LD_INT 110
9518: PUSH
9519: LD_INT 111
9521: PUSH
9522: LD_INT 112
9524: PUSH
9525: LD_INT 113
9527: PUSH
9528: LD_INT 114
9530: PUSH
9531: LD_INT 116
9533: PUSH
9534: LD_INT 117
9536: PUSH
9537: LD_INT 118
9539: PUSH
9540: EMPTY
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: ST_TO_ADDR
9563: GO 11018
9565: LD_INT 13
9567: DOUBLE
9568: EQUAL
9569: IFTRUE 9573
9571: GO 9781
9573: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9574: LD_ADDR_VAR 0 2
9578: PUSH
9579: LD_INT 1
9581: PUSH
9582: LD_INT 2
9584: PUSH
9585: LD_INT 3
9587: PUSH
9588: LD_INT 4
9590: PUSH
9591: LD_INT 5
9593: PUSH
9594: LD_INT 8
9596: PUSH
9597: LD_INT 9
9599: PUSH
9600: LD_INT 10
9602: PUSH
9603: LD_INT 11
9605: PUSH
9606: LD_INT 12
9608: PUSH
9609: LD_INT 14
9611: PUSH
9612: LD_INT 15
9614: PUSH
9615: LD_INT 16
9617: PUSH
9618: LD_INT 17
9620: PUSH
9621: LD_INT 18
9623: PUSH
9624: LD_INT 19
9626: PUSH
9627: LD_INT 20
9629: PUSH
9630: LD_INT 21
9632: PUSH
9633: LD_INT 22
9635: PUSH
9636: LD_INT 23
9638: PUSH
9639: LD_INT 24
9641: PUSH
9642: LD_INT 25
9644: PUSH
9645: LD_INT 26
9647: PUSH
9648: LD_INT 27
9650: PUSH
9651: LD_INT 28
9653: PUSH
9654: LD_INT 30
9656: PUSH
9657: LD_INT 31
9659: PUSH
9660: LD_INT 32
9662: PUSH
9663: LD_INT 33
9665: PUSH
9666: LD_INT 34
9668: PUSH
9669: LD_INT 36
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: PUSH
9705: LD_INT 101
9707: PUSH
9708: LD_INT 102
9710: PUSH
9711: LD_INT 103
9713: PUSH
9714: LD_INT 104
9716: PUSH
9717: LD_INT 105
9719: PUSH
9720: LD_INT 106
9722: PUSH
9723: LD_INT 107
9725: PUSH
9726: LD_INT 108
9728: PUSH
9729: LD_INT 109
9731: PUSH
9732: LD_INT 110
9734: PUSH
9735: LD_INT 111
9737: PUSH
9738: LD_INT 112
9740: PUSH
9741: LD_INT 113
9743: PUSH
9744: LD_INT 114
9746: PUSH
9747: LD_INT 116
9749: PUSH
9750: LD_INT 117
9752: PUSH
9753: LD_INT 118
9755: PUSH
9756: EMPTY
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: ST_TO_ADDR
9779: GO 11018
9781: LD_INT 14
9783: DOUBLE
9784: EQUAL
9785: IFTRUE 9789
9787: GO 10013
9789: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9790: LD_ADDR_VAR 0 2
9794: PUSH
9795: LD_INT 1
9797: PUSH
9798: LD_INT 2
9800: PUSH
9801: LD_INT 3
9803: PUSH
9804: LD_INT 4
9806: PUSH
9807: LD_INT 5
9809: PUSH
9810: LD_INT 6
9812: PUSH
9813: LD_INT 7
9815: PUSH
9816: LD_INT 8
9818: PUSH
9819: LD_INT 9
9821: PUSH
9822: LD_INT 10
9824: PUSH
9825: LD_INT 11
9827: PUSH
9828: LD_INT 12
9830: PUSH
9831: LD_INT 13
9833: PUSH
9834: LD_INT 14
9836: PUSH
9837: LD_INT 15
9839: PUSH
9840: LD_INT 16
9842: PUSH
9843: LD_INT 17
9845: PUSH
9846: LD_INT 18
9848: PUSH
9849: LD_INT 19
9851: PUSH
9852: LD_INT 20
9854: PUSH
9855: LD_INT 21
9857: PUSH
9858: LD_INT 22
9860: PUSH
9861: LD_INT 23
9863: PUSH
9864: LD_INT 24
9866: PUSH
9867: LD_INT 25
9869: PUSH
9870: LD_INT 26
9872: PUSH
9873: LD_INT 27
9875: PUSH
9876: LD_INT 28
9878: PUSH
9879: LD_INT 29
9881: PUSH
9882: LD_INT 30
9884: PUSH
9885: LD_INT 31
9887: PUSH
9888: LD_INT 32
9890: PUSH
9891: LD_INT 33
9893: PUSH
9894: LD_INT 34
9896: PUSH
9897: LD_INT 36
9899: PUSH
9900: EMPTY
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: PUSH
9937: LD_INT 101
9939: PUSH
9940: LD_INT 102
9942: PUSH
9943: LD_INT 103
9945: PUSH
9946: LD_INT 104
9948: PUSH
9949: LD_INT 105
9951: PUSH
9952: LD_INT 106
9954: PUSH
9955: LD_INT 107
9957: PUSH
9958: LD_INT 108
9960: PUSH
9961: LD_INT 109
9963: PUSH
9964: LD_INT 110
9966: PUSH
9967: LD_INT 111
9969: PUSH
9970: LD_INT 112
9972: PUSH
9973: LD_INT 113
9975: PUSH
9976: LD_INT 114
9978: PUSH
9979: LD_INT 116
9981: PUSH
9982: LD_INT 117
9984: PUSH
9985: LD_INT 118
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: ST_TO_ADDR
10011: GO 11018
10013: LD_INT 15
10015: DOUBLE
10016: EQUAL
10017: IFTRUE 10021
10019: GO 10245
10021: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
10022: LD_ADDR_VAR 0 2
10026: PUSH
10027: LD_INT 1
10029: PUSH
10030: LD_INT 2
10032: PUSH
10033: LD_INT 3
10035: PUSH
10036: LD_INT 4
10038: PUSH
10039: LD_INT 5
10041: PUSH
10042: LD_INT 6
10044: PUSH
10045: LD_INT 7
10047: PUSH
10048: LD_INT 8
10050: PUSH
10051: LD_INT 9
10053: PUSH
10054: LD_INT 10
10056: PUSH
10057: LD_INT 11
10059: PUSH
10060: LD_INT 12
10062: PUSH
10063: LD_INT 13
10065: PUSH
10066: LD_INT 14
10068: PUSH
10069: LD_INT 15
10071: PUSH
10072: LD_INT 16
10074: PUSH
10075: LD_INT 17
10077: PUSH
10078: LD_INT 18
10080: PUSH
10081: LD_INT 19
10083: PUSH
10084: LD_INT 20
10086: PUSH
10087: LD_INT 21
10089: PUSH
10090: LD_INT 22
10092: PUSH
10093: LD_INT 23
10095: PUSH
10096: LD_INT 24
10098: PUSH
10099: LD_INT 25
10101: PUSH
10102: LD_INT 26
10104: PUSH
10105: LD_INT 27
10107: PUSH
10108: LD_INT 28
10110: PUSH
10111: LD_INT 29
10113: PUSH
10114: LD_INT 30
10116: PUSH
10117: LD_INT 31
10119: PUSH
10120: LD_INT 32
10122: PUSH
10123: LD_INT 33
10125: PUSH
10126: LD_INT 34
10128: PUSH
10129: LD_INT 36
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: PUSH
10169: LD_INT 101
10171: PUSH
10172: LD_INT 102
10174: PUSH
10175: LD_INT 103
10177: PUSH
10178: LD_INT 104
10180: PUSH
10181: LD_INT 105
10183: PUSH
10184: LD_INT 106
10186: PUSH
10187: LD_INT 107
10189: PUSH
10190: LD_INT 108
10192: PUSH
10193: LD_INT 109
10195: PUSH
10196: LD_INT 110
10198: PUSH
10199: LD_INT 111
10201: PUSH
10202: LD_INT 112
10204: PUSH
10205: LD_INT 113
10207: PUSH
10208: LD_INT 114
10210: PUSH
10211: LD_INT 116
10213: PUSH
10214: LD_INT 117
10216: PUSH
10217: LD_INT 118
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: ST_TO_ADDR
10243: GO 11018
10245: LD_INT 16
10247: DOUBLE
10248: EQUAL
10249: IFTRUE 10253
10251: GO 10389
10253: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
10254: LD_ADDR_VAR 0 2
10258: PUSH
10259: LD_INT 2
10261: PUSH
10262: LD_INT 4
10264: PUSH
10265: LD_INT 5
10267: PUSH
10268: LD_INT 7
10270: PUSH
10271: LD_INT 11
10273: PUSH
10274: LD_INT 12
10276: PUSH
10277: LD_INT 15
10279: PUSH
10280: LD_INT 16
10282: PUSH
10283: LD_INT 20
10285: PUSH
10286: LD_INT 21
10288: PUSH
10289: LD_INT 22
10291: PUSH
10292: LD_INT 23
10294: PUSH
10295: LD_INT 25
10297: PUSH
10298: LD_INT 26
10300: PUSH
10301: LD_INT 30
10303: PUSH
10304: LD_INT 31
10306: PUSH
10307: LD_INT 32
10309: PUSH
10310: LD_INT 33
10312: PUSH
10313: LD_INT 34
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: PUSH
10337: LD_INT 101
10339: PUSH
10340: LD_INT 102
10342: PUSH
10343: LD_INT 103
10345: PUSH
10346: LD_INT 106
10348: PUSH
10349: LD_INT 108
10351: PUSH
10352: LD_INT 112
10354: PUSH
10355: LD_INT 113
10357: PUSH
10358: LD_INT 114
10360: PUSH
10361: LD_INT 116
10363: PUSH
10364: LD_INT 117
10366: PUSH
10367: LD_INT 118
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: ST_TO_ADDR
10387: GO 11018
10389: LD_INT 17
10391: DOUBLE
10392: EQUAL
10393: IFTRUE 10397
10395: GO 10621
10397: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
10398: LD_ADDR_VAR 0 2
10402: PUSH
10403: LD_INT 1
10405: PUSH
10406: LD_INT 2
10408: PUSH
10409: LD_INT 3
10411: PUSH
10412: LD_INT 4
10414: PUSH
10415: LD_INT 5
10417: PUSH
10418: LD_INT 6
10420: PUSH
10421: LD_INT 7
10423: PUSH
10424: LD_INT 8
10426: PUSH
10427: LD_INT 9
10429: PUSH
10430: LD_INT 10
10432: PUSH
10433: LD_INT 11
10435: PUSH
10436: LD_INT 12
10438: PUSH
10439: LD_INT 13
10441: PUSH
10442: LD_INT 14
10444: PUSH
10445: LD_INT 15
10447: PUSH
10448: LD_INT 16
10450: PUSH
10451: LD_INT 17
10453: PUSH
10454: LD_INT 18
10456: PUSH
10457: LD_INT 19
10459: PUSH
10460: LD_INT 20
10462: PUSH
10463: LD_INT 21
10465: PUSH
10466: LD_INT 22
10468: PUSH
10469: LD_INT 23
10471: PUSH
10472: LD_INT 24
10474: PUSH
10475: LD_INT 25
10477: PUSH
10478: LD_INT 26
10480: PUSH
10481: LD_INT 27
10483: PUSH
10484: LD_INT 28
10486: PUSH
10487: LD_INT 29
10489: PUSH
10490: LD_INT 30
10492: PUSH
10493: LD_INT 31
10495: PUSH
10496: LD_INT 32
10498: PUSH
10499: LD_INT 33
10501: PUSH
10502: LD_INT 34
10504: PUSH
10505: LD_INT 36
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: PUSH
10545: LD_INT 101
10547: PUSH
10548: LD_INT 102
10550: PUSH
10551: LD_INT 103
10553: PUSH
10554: LD_INT 104
10556: PUSH
10557: LD_INT 105
10559: PUSH
10560: LD_INT 106
10562: PUSH
10563: LD_INT 107
10565: PUSH
10566: LD_INT 108
10568: PUSH
10569: LD_INT 109
10571: PUSH
10572: LD_INT 110
10574: PUSH
10575: LD_INT 111
10577: PUSH
10578: LD_INT 112
10580: PUSH
10581: LD_INT 113
10583: PUSH
10584: LD_INT 114
10586: PUSH
10587: LD_INT 116
10589: PUSH
10590: LD_INT 117
10592: PUSH
10593: LD_INT 118
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: PUSH
10615: EMPTY
10616: LIST
10617: LIST
10618: ST_TO_ADDR
10619: GO 11018
10621: LD_INT 18
10623: DOUBLE
10624: EQUAL
10625: IFTRUE 10629
10627: GO 10777
10629: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10630: LD_ADDR_VAR 0 2
10634: PUSH
10635: LD_INT 2
10637: PUSH
10638: LD_INT 4
10640: PUSH
10641: LD_INT 5
10643: PUSH
10644: LD_INT 7
10646: PUSH
10647: LD_INT 11
10649: PUSH
10650: LD_INT 12
10652: PUSH
10653: LD_INT 15
10655: PUSH
10656: LD_INT 16
10658: PUSH
10659: LD_INT 20
10661: PUSH
10662: LD_INT 21
10664: PUSH
10665: LD_INT 22
10667: PUSH
10668: LD_INT 23
10670: PUSH
10671: LD_INT 25
10673: PUSH
10674: LD_INT 26
10676: PUSH
10677: LD_INT 30
10679: PUSH
10680: LD_INT 31
10682: PUSH
10683: LD_INT 32
10685: PUSH
10686: LD_INT 33
10688: PUSH
10689: LD_INT 34
10691: PUSH
10692: LD_INT 35
10694: PUSH
10695: LD_INT 36
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: PUSH
10721: LD_INT 101
10723: PUSH
10724: LD_INT 102
10726: PUSH
10727: LD_INT 103
10729: PUSH
10730: LD_INT 106
10732: PUSH
10733: LD_INT 108
10735: PUSH
10736: LD_INT 112
10738: PUSH
10739: LD_INT 113
10741: PUSH
10742: LD_INT 114
10744: PUSH
10745: LD_INT 115
10747: PUSH
10748: LD_INT 116
10750: PUSH
10751: LD_INT 117
10753: PUSH
10754: LD_INT 118
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: ST_TO_ADDR
10775: GO 11018
10777: LD_INT 19
10779: DOUBLE
10780: EQUAL
10781: IFTRUE 10785
10783: GO 11017
10785: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10786: LD_ADDR_VAR 0 2
10790: PUSH
10791: LD_INT 1
10793: PUSH
10794: LD_INT 2
10796: PUSH
10797: LD_INT 3
10799: PUSH
10800: LD_INT 4
10802: PUSH
10803: LD_INT 5
10805: PUSH
10806: LD_INT 6
10808: PUSH
10809: LD_INT 7
10811: PUSH
10812: LD_INT 8
10814: PUSH
10815: LD_INT 9
10817: PUSH
10818: LD_INT 10
10820: PUSH
10821: LD_INT 11
10823: PUSH
10824: LD_INT 12
10826: PUSH
10827: LD_INT 13
10829: PUSH
10830: LD_INT 14
10832: PUSH
10833: LD_INT 15
10835: PUSH
10836: LD_INT 16
10838: PUSH
10839: LD_INT 17
10841: PUSH
10842: LD_INT 18
10844: PUSH
10845: LD_INT 19
10847: PUSH
10848: LD_INT 20
10850: PUSH
10851: LD_INT 21
10853: PUSH
10854: LD_INT 22
10856: PUSH
10857: LD_INT 23
10859: PUSH
10860: LD_INT 24
10862: PUSH
10863: LD_INT 25
10865: PUSH
10866: LD_INT 26
10868: PUSH
10869: LD_INT 27
10871: PUSH
10872: LD_INT 28
10874: PUSH
10875: LD_INT 29
10877: PUSH
10878: LD_INT 30
10880: PUSH
10881: LD_INT 31
10883: PUSH
10884: LD_INT 32
10886: PUSH
10887: LD_INT 33
10889: PUSH
10890: LD_INT 34
10892: PUSH
10893: LD_INT 35
10895: PUSH
10896: LD_INT 36
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: PUSH
10937: LD_INT 101
10939: PUSH
10940: LD_INT 102
10942: PUSH
10943: LD_INT 103
10945: PUSH
10946: LD_INT 104
10948: PUSH
10949: LD_INT 105
10951: PUSH
10952: LD_INT 106
10954: PUSH
10955: LD_INT 107
10957: PUSH
10958: LD_INT 108
10960: PUSH
10961: LD_INT 109
10963: PUSH
10964: LD_INT 110
10966: PUSH
10967: LD_INT 111
10969: PUSH
10970: LD_INT 112
10972: PUSH
10973: LD_INT 113
10975: PUSH
10976: LD_INT 114
10978: PUSH
10979: LD_INT 115
10981: PUSH
10982: LD_INT 116
10984: PUSH
10985: LD_INT 117
10987: PUSH
10988: LD_INT 118
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: ST_TO_ADDR
11015: GO 11018
11017: POP
// end else
11018: GO 11249
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
11020: LD_ADDR_VAR 0 2
11024: PUSH
11025: LD_INT 1
11027: PUSH
11028: LD_INT 2
11030: PUSH
11031: LD_INT 3
11033: PUSH
11034: LD_INT 4
11036: PUSH
11037: LD_INT 5
11039: PUSH
11040: LD_INT 6
11042: PUSH
11043: LD_INT 7
11045: PUSH
11046: LD_INT 8
11048: PUSH
11049: LD_INT 9
11051: PUSH
11052: LD_INT 10
11054: PUSH
11055: LD_INT 11
11057: PUSH
11058: LD_INT 12
11060: PUSH
11061: LD_INT 13
11063: PUSH
11064: LD_INT 14
11066: PUSH
11067: LD_INT 15
11069: PUSH
11070: LD_INT 16
11072: PUSH
11073: LD_INT 17
11075: PUSH
11076: LD_INT 18
11078: PUSH
11079: LD_INT 19
11081: PUSH
11082: LD_INT 20
11084: PUSH
11085: LD_INT 21
11087: PUSH
11088: LD_INT 22
11090: PUSH
11091: LD_INT 23
11093: PUSH
11094: LD_INT 24
11096: PUSH
11097: LD_INT 25
11099: PUSH
11100: LD_INT 26
11102: PUSH
11103: LD_INT 27
11105: PUSH
11106: LD_INT 28
11108: PUSH
11109: LD_INT 29
11111: PUSH
11112: LD_INT 30
11114: PUSH
11115: LD_INT 31
11117: PUSH
11118: LD_INT 32
11120: PUSH
11121: LD_INT 33
11123: PUSH
11124: LD_INT 34
11126: PUSH
11127: LD_INT 35
11129: PUSH
11130: LD_INT 36
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: PUSH
11171: LD_INT 101
11173: PUSH
11174: LD_INT 102
11176: PUSH
11177: LD_INT 103
11179: PUSH
11180: LD_INT 104
11182: PUSH
11183: LD_INT 105
11185: PUSH
11186: LD_INT 106
11188: PUSH
11189: LD_INT 107
11191: PUSH
11192: LD_INT 108
11194: PUSH
11195: LD_INT 109
11197: PUSH
11198: LD_INT 110
11200: PUSH
11201: LD_INT 111
11203: PUSH
11204: LD_INT 112
11206: PUSH
11207: LD_INT 113
11209: PUSH
11210: LD_INT 114
11212: PUSH
11213: LD_INT 115
11215: PUSH
11216: LD_INT 116
11218: PUSH
11219: LD_INT 117
11221: PUSH
11222: LD_INT 118
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: ST_TO_ADDR
// if result then
11249: LD_VAR 0 2
11253: IFFALSE 12039
// begin normal :=  ;
11255: LD_ADDR_VAR 0 5
11259: PUSH
11260: LD_STRING 
11262: ST_TO_ADDR
// hardcore :=  ;
11263: LD_ADDR_VAR 0 6
11267: PUSH
11268: LD_STRING 
11270: ST_TO_ADDR
// active :=  ;
11271: LD_ADDR_VAR 0 7
11275: PUSH
11276: LD_STRING 
11278: ST_TO_ADDR
// for i = 1 to normalCounter do
11279: LD_ADDR_VAR 0 8
11283: PUSH
11284: DOUBLE
11285: LD_INT 1
11287: DEC
11288: ST_TO_ADDR
11289: LD_EXP 27
11293: PUSH
11294: FOR_TO
11295: IFFALSE 11396
// begin tmp := 0 ;
11297: LD_ADDR_VAR 0 3
11301: PUSH
11302: LD_STRING 0
11304: ST_TO_ADDR
// if result [ 1 ] then
11305: LD_VAR 0 2
11309: PUSH
11310: LD_INT 1
11312: ARRAY
11313: IFFALSE 11378
// if result [ 1 ] [ 1 ] = i then
11315: LD_VAR 0 2
11319: PUSH
11320: LD_INT 1
11322: ARRAY
11323: PUSH
11324: LD_INT 1
11326: ARRAY
11327: PUSH
11328: LD_VAR 0 8
11332: EQUAL
11333: IFFALSE 11378
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11335: LD_ADDR_VAR 0 2
11339: PUSH
11340: LD_VAR 0 2
11344: PPUSH
11345: LD_INT 1
11347: PPUSH
11348: LD_VAR 0 2
11352: PUSH
11353: LD_INT 1
11355: ARRAY
11356: PPUSH
11357: LD_INT 1
11359: PPUSH
11360: CALL_OW 3
11364: PPUSH
11365: CALL_OW 1
11369: ST_TO_ADDR
// tmp := 1 ;
11370: LD_ADDR_VAR 0 3
11374: PUSH
11375: LD_STRING 1
11377: ST_TO_ADDR
// end ; normal := normal & tmp ;
11378: LD_ADDR_VAR 0 5
11382: PUSH
11383: LD_VAR 0 5
11387: PUSH
11388: LD_VAR 0 3
11392: STR
11393: ST_TO_ADDR
// end ;
11394: GO 11294
11396: POP
11397: POP
// for i = 1 to hardcoreCounter do
11398: LD_ADDR_VAR 0 8
11402: PUSH
11403: DOUBLE
11404: LD_INT 1
11406: DEC
11407: ST_TO_ADDR
11408: LD_EXP 28
11412: PUSH
11413: FOR_TO
11414: IFFALSE 11519
// begin tmp := 0 ;
11416: LD_ADDR_VAR 0 3
11420: PUSH
11421: LD_STRING 0
11423: ST_TO_ADDR
// if result [ 2 ] then
11424: LD_VAR 0 2
11428: PUSH
11429: LD_INT 2
11431: ARRAY
11432: IFFALSE 11501
// if result [ 2 ] [ 1 ] = 100 + i then
11434: LD_VAR 0 2
11438: PUSH
11439: LD_INT 2
11441: ARRAY
11442: PUSH
11443: LD_INT 1
11445: ARRAY
11446: PUSH
11447: LD_INT 100
11449: PUSH
11450: LD_VAR 0 8
11454: PLUS
11455: EQUAL
11456: IFFALSE 11501
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11458: LD_ADDR_VAR 0 2
11462: PUSH
11463: LD_VAR 0 2
11467: PPUSH
11468: LD_INT 2
11470: PPUSH
11471: LD_VAR 0 2
11475: PUSH
11476: LD_INT 2
11478: ARRAY
11479: PPUSH
11480: LD_INT 1
11482: PPUSH
11483: CALL_OW 3
11487: PPUSH
11488: CALL_OW 1
11492: ST_TO_ADDR
// tmp := 1 ;
11493: LD_ADDR_VAR 0 3
11497: PUSH
11498: LD_STRING 1
11500: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11501: LD_ADDR_VAR 0 6
11505: PUSH
11506: LD_VAR 0 6
11510: PUSH
11511: LD_VAR 0 3
11515: STR
11516: ST_TO_ADDR
// end ;
11517: GO 11413
11519: POP
11520: POP
// if isGameLoad then
11521: LD_VAR 0 1
11525: IFFALSE 12000
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
11527: LD_ADDR_VAR 0 4
11531: PUSH
11532: LD_EXP 31
11536: PUSH
11537: LD_EXP 30
11541: PUSH
11542: LD_EXP 32
11546: PUSH
11547: LD_EXP 29
11551: PUSH
11552: LD_EXP 33
11556: PUSH
11557: LD_EXP 34
11561: PUSH
11562: LD_EXP 35
11566: PUSH
11567: LD_EXP 36
11571: PUSH
11572: LD_EXP 37
11576: PUSH
11577: LD_EXP 38
11581: PUSH
11582: LD_EXP 39
11586: PUSH
11587: LD_EXP 40
11591: PUSH
11592: LD_EXP 41
11596: PUSH
11597: LD_EXP 42
11601: PUSH
11602: LD_EXP 50
11606: PUSH
11607: LD_EXP 51
11611: PUSH
11612: LD_EXP 52
11616: PUSH
11617: LD_EXP 53
11621: PUSH
11622: LD_EXP 55
11626: PUSH
11627: LD_EXP 56
11631: PUSH
11632: LD_EXP 57
11636: PUSH
11637: LD_EXP 60
11641: PUSH
11642: LD_EXP 62
11646: PUSH
11647: LD_EXP 63
11651: PUSH
11652: LD_EXP 64
11656: PUSH
11657: LD_EXP 66
11661: PUSH
11662: LD_EXP 67
11666: PUSH
11667: LD_EXP 70
11671: PUSH
11672: LD_EXP 71
11676: PUSH
11677: LD_EXP 72
11681: PUSH
11682: LD_EXP 73
11686: PUSH
11687: LD_EXP 74
11691: PUSH
11692: LD_EXP 75
11696: PUSH
11697: LD_EXP 76
11701: PUSH
11702: LD_EXP 77
11706: PUSH
11707: LD_EXP 78
11711: PUSH
11712: LD_EXP 43
11716: PUSH
11717: LD_EXP 44
11721: PUSH
11722: LD_EXP 47
11726: PUSH
11727: LD_EXP 48
11731: PUSH
11732: LD_EXP 49
11736: PUSH
11737: LD_EXP 45
11741: PUSH
11742: LD_EXP 46
11746: PUSH
11747: LD_EXP 54
11751: PUSH
11752: LD_EXP 58
11756: PUSH
11757: LD_EXP 59
11761: PUSH
11762: LD_EXP 61
11766: PUSH
11767: LD_EXP 65
11771: PUSH
11772: LD_EXP 68
11776: PUSH
11777: LD_EXP 69
11781: PUSH
11782: LD_EXP 79
11786: PUSH
11787: LD_EXP 80
11791: PUSH
11792: LD_EXP 81
11796: PUSH
11797: LD_EXP 82
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: ST_TO_ADDR
// tmp :=  ;
11858: LD_ADDR_VAR 0 3
11862: PUSH
11863: LD_STRING 
11865: ST_TO_ADDR
// for i = 1 to normalCounter do
11866: LD_ADDR_VAR 0 8
11870: PUSH
11871: DOUBLE
11872: LD_INT 1
11874: DEC
11875: ST_TO_ADDR
11876: LD_EXP 27
11880: PUSH
11881: FOR_TO
11882: IFFALSE 11918
// begin if flags [ i ] then
11884: LD_VAR 0 4
11888: PUSH
11889: LD_VAR 0 8
11893: ARRAY
11894: IFFALSE 11916
// tmp := tmp & i & ; ;
11896: LD_ADDR_VAR 0 3
11900: PUSH
11901: LD_VAR 0 3
11905: PUSH
11906: LD_VAR 0 8
11910: STR
11911: PUSH
11912: LD_STRING ;
11914: STR
11915: ST_TO_ADDR
// end ;
11916: GO 11881
11918: POP
11919: POP
// for i = 1 to hardcoreCounter do
11920: LD_ADDR_VAR 0 8
11924: PUSH
11925: DOUBLE
11926: LD_INT 1
11928: DEC
11929: ST_TO_ADDR
11930: LD_EXP 28
11934: PUSH
11935: FOR_TO
11936: IFFALSE 11982
// begin if flags [ normalCounter + i ] then
11938: LD_VAR 0 4
11942: PUSH
11943: LD_EXP 27
11947: PUSH
11948: LD_VAR 0 8
11952: PLUS
11953: ARRAY
11954: IFFALSE 11980
// tmp := tmp & ( 100 + i ) & ; ;
11956: LD_ADDR_VAR 0 3
11960: PUSH
11961: LD_VAR 0 3
11965: PUSH
11966: LD_INT 100
11968: PUSH
11969: LD_VAR 0 8
11973: PLUS
11974: STR
11975: PUSH
11976: LD_STRING ;
11978: STR
11979: ST_TO_ADDR
// end ;
11980: GO 11935
11982: POP
11983: POP
// if tmp then
11984: LD_VAR 0 3
11988: IFFALSE 12000
// active := tmp ;
11990: LD_ADDR_VAR 0 7
11994: PUSH
11995: LD_VAR 0 3
11999: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
12000: LD_STRING getStreamItemsFromMission("
12002: PUSH
12003: LD_VAR 0 5
12007: STR
12008: PUSH
12009: LD_STRING ","
12011: STR
12012: PUSH
12013: LD_VAR 0 6
12017: STR
12018: PUSH
12019: LD_STRING ","
12021: STR
12022: PUSH
12023: LD_VAR 0 7
12027: STR
12028: PUSH
12029: LD_STRING ")
12031: STR
12032: PPUSH
12033: CALL_OW 559
// end else
12037: GO 12046
// ToLua ( getStreamItemsFromMission("","","") ) ;
12039: LD_STRING getStreamItemsFromMission("","","")
12041: PPUSH
12042: CALL_OW 559
// end ;
12046: LD_VAR 0 2
12050: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12051: LD_EXP 26
12055: PUSH
12056: LD_EXP 31
12060: AND
12061: IFFALSE 12185
12063: GO 12065
12065: DISABLE
12066: LD_INT 0
12068: PPUSH
12069: PPUSH
// begin enable ;
12070: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12071: LD_ADDR_VAR 0 2
12075: PUSH
12076: LD_INT 22
12078: PUSH
12079: LD_OWVAR 2
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: PUSH
12088: LD_INT 2
12090: PUSH
12091: LD_INT 34
12093: PUSH
12094: LD_INT 7
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: PUSH
12101: LD_INT 34
12103: PUSH
12104: LD_INT 45
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PUSH
12111: LD_INT 34
12113: PUSH
12114: LD_INT 28
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: LD_INT 34
12123: PUSH
12124: LD_INT 47
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PPUSH
12142: CALL_OW 69
12146: ST_TO_ADDR
// if not tmp then
12147: LD_VAR 0 2
12151: NOT
12152: IFFALSE 12156
// exit ;
12154: GO 12185
// for i in tmp do
12156: LD_ADDR_VAR 0 1
12160: PUSH
12161: LD_VAR 0 2
12165: PUSH
12166: FOR_IN
12167: IFFALSE 12183
// begin SetLives ( i , 0 ) ;
12169: LD_VAR 0 1
12173: PPUSH
12174: LD_INT 0
12176: PPUSH
12177: CALL_OW 234
// end ;
12181: GO 12166
12183: POP
12184: POP
// end ;
12185: PPOPN 2
12187: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12188: LD_EXP 26
12192: PUSH
12193: LD_EXP 32
12197: AND
12198: IFFALSE 12282
12200: GO 12202
12202: DISABLE
12203: LD_INT 0
12205: PPUSH
12206: PPUSH
// begin enable ;
12207: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12208: LD_ADDR_VAR 0 2
12212: PUSH
12213: LD_INT 22
12215: PUSH
12216: LD_OWVAR 2
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: PUSH
12225: LD_INT 32
12227: PUSH
12228: LD_INT 3
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: PPUSH
12239: CALL_OW 69
12243: ST_TO_ADDR
// if not tmp then
12244: LD_VAR 0 2
12248: NOT
12249: IFFALSE 12253
// exit ;
12251: GO 12282
// for i in tmp do
12253: LD_ADDR_VAR 0 1
12257: PUSH
12258: LD_VAR 0 2
12262: PUSH
12263: FOR_IN
12264: IFFALSE 12280
// begin SetLives ( i , 0 ) ;
12266: LD_VAR 0 1
12270: PPUSH
12271: LD_INT 0
12273: PPUSH
12274: CALL_OW 234
// end ;
12278: GO 12263
12280: POP
12281: POP
// end ;
12282: PPOPN 2
12284: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12285: LD_EXP 26
12289: PUSH
12290: LD_EXP 29
12294: AND
12295: IFFALSE 12388
12297: GO 12299
12299: DISABLE
12300: LD_INT 0
12302: PPUSH
// begin enable ;
12303: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12304: LD_ADDR_VAR 0 1
12308: PUSH
12309: LD_INT 22
12311: PUSH
12312: LD_OWVAR 2
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: PUSH
12321: LD_INT 2
12323: PUSH
12324: LD_INT 25
12326: PUSH
12327: LD_INT 5
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: LD_INT 25
12336: PUSH
12337: LD_INT 9
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PUSH
12344: LD_INT 25
12346: PUSH
12347: LD_INT 8
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: PPUSH
12364: CALL_OW 69
12368: PUSH
12369: FOR_IN
12370: IFFALSE 12386
// begin SetClass ( i , 1 ) ;
12372: LD_VAR 0 1
12376: PPUSH
12377: LD_INT 1
12379: PPUSH
12380: CALL_OW 336
// end ;
12384: GO 12369
12386: POP
12387: POP
// end ;
12388: PPOPN 1
12390: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12391: LD_EXP 26
12395: PUSH
12396: LD_EXP 30
12400: AND
12401: PUSH
12402: LD_OWVAR 65
12406: PUSH
12407: LD_INT 7
12409: LESS
12410: AND
12411: IFFALSE 12425
12413: GO 12415
12415: DISABLE
// begin enable ;
12416: ENABLE
// game_speed := 7 ;
12417: LD_ADDR_OWVAR 65
12421: PUSH
12422: LD_INT 7
12424: ST_TO_ADDR
// end ;
12425: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12426: LD_EXP 26
12430: PUSH
12431: LD_EXP 33
12435: AND
12436: IFFALSE 12638
12438: GO 12440
12440: DISABLE
12441: LD_INT 0
12443: PPUSH
12444: PPUSH
12445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12446: LD_ADDR_VAR 0 3
12450: PUSH
12451: LD_INT 81
12453: PUSH
12454: LD_OWVAR 2
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: PUSH
12463: LD_INT 21
12465: PUSH
12466: LD_INT 1
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: PPUSH
12477: CALL_OW 69
12481: ST_TO_ADDR
// if not tmp then
12482: LD_VAR 0 3
12486: NOT
12487: IFFALSE 12491
// exit ;
12489: GO 12638
// if tmp > 5 then
12491: LD_VAR 0 3
12495: PUSH
12496: LD_INT 5
12498: GREATER
12499: IFFALSE 12511
// k := 5 else
12501: LD_ADDR_VAR 0 2
12505: PUSH
12506: LD_INT 5
12508: ST_TO_ADDR
12509: GO 12521
// k := tmp ;
12511: LD_ADDR_VAR 0 2
12515: PUSH
12516: LD_VAR 0 3
12520: ST_TO_ADDR
// for i := 1 to k do
12521: LD_ADDR_VAR 0 1
12525: PUSH
12526: DOUBLE
12527: LD_INT 1
12529: DEC
12530: ST_TO_ADDR
12531: LD_VAR 0 2
12535: PUSH
12536: FOR_TO
12537: IFFALSE 12636
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12539: LD_VAR 0 3
12543: PUSH
12544: LD_VAR 0 1
12548: ARRAY
12549: PPUSH
12550: LD_VAR 0 1
12554: PUSH
12555: LD_INT 4
12557: MOD
12558: PUSH
12559: LD_INT 1
12561: PLUS
12562: PPUSH
12563: CALL_OW 259
12567: PUSH
12568: LD_INT 10
12570: LESS
12571: IFFALSE 12634
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12573: LD_VAR 0 3
12577: PUSH
12578: LD_VAR 0 1
12582: ARRAY
12583: PPUSH
12584: LD_VAR 0 1
12588: PUSH
12589: LD_INT 4
12591: MOD
12592: PUSH
12593: LD_INT 1
12595: PLUS
12596: PPUSH
12597: LD_VAR 0 3
12601: PUSH
12602: LD_VAR 0 1
12606: ARRAY
12607: PPUSH
12608: LD_VAR 0 1
12612: PUSH
12613: LD_INT 4
12615: MOD
12616: PUSH
12617: LD_INT 1
12619: PLUS
12620: PPUSH
12621: CALL_OW 259
12625: PUSH
12626: LD_INT 1
12628: PLUS
12629: PPUSH
12630: CALL_OW 237
12634: GO 12536
12636: POP
12637: POP
// end ;
12638: PPOPN 3
12640: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12641: LD_EXP 26
12645: PUSH
12646: LD_EXP 34
12650: AND
12651: IFFALSE 12671
12653: GO 12655
12655: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12656: LD_INT 4
12658: PPUSH
12659: LD_OWVAR 2
12663: PPUSH
12664: LD_INT 0
12666: PPUSH
12667: CALL_OW 324
12671: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12672: LD_EXP 26
12676: PUSH
12677: LD_EXP 63
12681: AND
12682: IFFALSE 12702
12684: GO 12686
12686: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12687: LD_INT 19
12689: PPUSH
12690: LD_OWVAR 2
12694: PPUSH
12695: LD_INT 0
12697: PPUSH
12698: CALL_OW 324
12702: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12703: LD_EXP 26
12707: PUSH
12708: LD_EXP 35
12712: AND
12713: IFFALSE 12815
12715: GO 12717
12717: DISABLE
12718: LD_INT 0
12720: PPUSH
12721: PPUSH
// begin enable ;
12722: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12723: LD_ADDR_VAR 0 2
12727: PUSH
12728: LD_INT 22
12730: PUSH
12731: LD_OWVAR 2
12735: PUSH
12736: EMPTY
12737: LIST
12738: LIST
12739: PUSH
12740: LD_INT 2
12742: PUSH
12743: LD_INT 34
12745: PUSH
12746: LD_INT 11
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PUSH
12753: LD_INT 34
12755: PUSH
12756: LD_INT 30
12758: PUSH
12759: EMPTY
12760: LIST
12761: LIST
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: LIST
12767: PUSH
12768: EMPTY
12769: LIST
12770: LIST
12771: PPUSH
12772: CALL_OW 69
12776: ST_TO_ADDR
// if not tmp then
12777: LD_VAR 0 2
12781: NOT
12782: IFFALSE 12786
// exit ;
12784: GO 12815
// for i in tmp do
12786: LD_ADDR_VAR 0 1
12790: PUSH
12791: LD_VAR 0 2
12795: PUSH
12796: FOR_IN
12797: IFFALSE 12813
// begin SetLives ( i , 0 ) ;
12799: LD_VAR 0 1
12803: PPUSH
12804: LD_INT 0
12806: PPUSH
12807: CALL_OW 234
// end ;
12811: GO 12796
12813: POP
12814: POP
// end ;
12815: PPOPN 2
12817: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12818: LD_EXP 26
12822: PUSH
12823: LD_EXP 36
12827: AND
12828: IFFALSE 12848
12830: GO 12832
12832: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12833: LD_INT 32
12835: PPUSH
12836: LD_OWVAR 2
12840: PPUSH
12841: LD_INT 0
12843: PPUSH
12844: CALL_OW 324
12848: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12849: LD_EXP 26
12853: PUSH
12854: LD_EXP 37
12858: AND
12859: IFFALSE 13040
12861: GO 12863
12863: DISABLE
12864: LD_INT 0
12866: PPUSH
12867: PPUSH
12868: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12869: LD_ADDR_VAR 0 2
12873: PUSH
12874: LD_INT 22
12876: PUSH
12877: LD_OWVAR 2
12881: PUSH
12882: EMPTY
12883: LIST
12884: LIST
12885: PUSH
12886: LD_INT 33
12888: PUSH
12889: LD_INT 3
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: PPUSH
12900: CALL_OW 69
12904: ST_TO_ADDR
// if not tmp then
12905: LD_VAR 0 2
12909: NOT
12910: IFFALSE 12914
// exit ;
12912: GO 13040
// side := 0 ;
12914: LD_ADDR_VAR 0 3
12918: PUSH
12919: LD_INT 0
12921: ST_TO_ADDR
// for i := 1 to 8 do
12922: LD_ADDR_VAR 0 1
12926: PUSH
12927: DOUBLE
12928: LD_INT 1
12930: DEC
12931: ST_TO_ADDR
12932: LD_INT 8
12934: PUSH
12935: FOR_TO
12936: IFFALSE 12984
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12938: LD_OWVAR 2
12942: PUSH
12943: LD_VAR 0 1
12947: NONEQUAL
12948: PUSH
12949: LD_OWVAR 2
12953: PPUSH
12954: LD_VAR 0 1
12958: PPUSH
12959: CALL_OW 81
12963: PUSH
12964: LD_INT 2
12966: EQUAL
12967: AND
12968: IFFALSE 12982
// begin side := i ;
12970: LD_ADDR_VAR 0 3
12974: PUSH
12975: LD_VAR 0 1
12979: ST_TO_ADDR
// break ;
12980: GO 12984
// end ;
12982: GO 12935
12984: POP
12985: POP
// if not side then
12986: LD_VAR 0 3
12990: NOT
12991: IFFALSE 12995
// exit ;
12993: GO 13040
// for i := 1 to tmp do
12995: LD_ADDR_VAR 0 1
12999: PUSH
13000: DOUBLE
13001: LD_INT 1
13003: DEC
13004: ST_TO_ADDR
13005: LD_VAR 0 2
13009: PUSH
13010: FOR_TO
13011: IFFALSE 13038
// if Prob ( 60 ) then
13013: LD_INT 60
13015: PPUSH
13016: CALL_OW 13
13020: IFFALSE 13036
// SetSide ( i , side ) ;
13022: LD_VAR 0 1
13026: PPUSH
13027: LD_VAR 0 3
13031: PPUSH
13032: CALL_OW 235
13036: GO 13010
13038: POP
13039: POP
// end ;
13040: PPOPN 3
13042: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13043: LD_EXP 26
13047: PUSH
13048: LD_EXP 39
13052: AND
13053: IFFALSE 13172
13055: GO 13057
13057: DISABLE
13058: LD_INT 0
13060: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13061: LD_ADDR_VAR 0 1
13065: PUSH
13066: LD_INT 22
13068: PUSH
13069: LD_OWVAR 2
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: PUSH
13078: LD_INT 21
13080: PUSH
13081: LD_INT 1
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PUSH
13088: LD_INT 3
13090: PUSH
13091: LD_INT 23
13093: PUSH
13094: LD_INT 0
13096: PUSH
13097: EMPTY
13098: LIST
13099: LIST
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: LIST
13109: PPUSH
13110: CALL_OW 69
13114: PUSH
13115: FOR_IN
13116: IFFALSE 13170
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13118: LD_VAR 0 1
13122: PPUSH
13123: CALL_OW 257
13127: PUSH
13128: LD_INT 1
13130: PUSH
13131: LD_INT 2
13133: PUSH
13134: LD_INT 3
13136: PUSH
13137: LD_INT 4
13139: PUSH
13140: EMPTY
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: IN
13146: IFFALSE 13168
// SetClass ( un , rand ( 1 , 4 ) ) ;
13148: LD_VAR 0 1
13152: PPUSH
13153: LD_INT 1
13155: PPUSH
13156: LD_INT 4
13158: PPUSH
13159: CALL_OW 12
13163: PPUSH
13164: CALL_OW 336
13168: GO 13115
13170: POP
13171: POP
// end ;
13172: PPOPN 1
13174: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13175: LD_EXP 26
13179: PUSH
13180: LD_EXP 38
13184: AND
13185: IFFALSE 13264
13187: GO 13189
13189: DISABLE
13190: LD_INT 0
13192: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13193: LD_ADDR_VAR 0 1
13197: PUSH
13198: LD_INT 22
13200: PUSH
13201: LD_OWVAR 2
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: PUSH
13210: LD_INT 21
13212: PUSH
13213: LD_INT 3
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: PPUSH
13224: CALL_OW 69
13228: ST_TO_ADDR
// if not tmp then
13229: LD_VAR 0 1
13233: NOT
13234: IFFALSE 13238
// exit ;
13236: GO 13264
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13238: LD_VAR 0 1
13242: PUSH
13243: LD_INT 1
13245: PPUSH
13246: LD_VAR 0 1
13250: PPUSH
13251: CALL_OW 12
13255: ARRAY
13256: PPUSH
13257: LD_INT 100
13259: PPUSH
13260: CALL_OW 234
// end ;
13264: PPOPN 1
13266: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13267: LD_EXP 26
13271: PUSH
13272: LD_EXP 40
13276: AND
13277: IFFALSE 13375
13279: GO 13281
13281: DISABLE
13282: LD_INT 0
13284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13285: LD_ADDR_VAR 0 1
13289: PUSH
13290: LD_INT 22
13292: PUSH
13293: LD_OWVAR 2
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PUSH
13302: LD_INT 21
13304: PUSH
13305: LD_INT 1
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: PPUSH
13316: CALL_OW 69
13320: ST_TO_ADDR
// if not tmp then
13321: LD_VAR 0 1
13325: NOT
13326: IFFALSE 13330
// exit ;
13328: GO 13375
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13330: LD_VAR 0 1
13334: PUSH
13335: LD_INT 1
13337: PPUSH
13338: LD_VAR 0 1
13342: PPUSH
13343: CALL_OW 12
13347: ARRAY
13348: PPUSH
13349: LD_INT 1
13351: PPUSH
13352: LD_INT 4
13354: PPUSH
13355: CALL_OW 12
13359: PPUSH
13360: LD_INT 3000
13362: PPUSH
13363: LD_INT 9000
13365: PPUSH
13366: CALL_OW 12
13370: PPUSH
13371: CALL_OW 492
// end ;
13375: PPOPN 1
13377: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13378: LD_EXP 26
13382: PUSH
13383: LD_EXP 41
13387: AND
13388: IFFALSE 13408
13390: GO 13392
13392: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13393: LD_INT 1
13395: PPUSH
13396: LD_OWVAR 2
13400: PPUSH
13401: LD_INT 0
13403: PPUSH
13404: CALL_OW 324
13408: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13409: LD_EXP 26
13413: PUSH
13414: LD_EXP 42
13418: AND
13419: IFFALSE 13502
13421: GO 13423
13423: DISABLE
13424: LD_INT 0
13426: PPUSH
13427: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13428: LD_ADDR_VAR 0 2
13432: PUSH
13433: LD_INT 22
13435: PUSH
13436: LD_OWVAR 2
13440: PUSH
13441: EMPTY
13442: LIST
13443: LIST
13444: PUSH
13445: LD_INT 21
13447: PUSH
13448: LD_INT 3
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: PPUSH
13459: CALL_OW 69
13463: ST_TO_ADDR
// if not tmp then
13464: LD_VAR 0 2
13468: NOT
13469: IFFALSE 13473
// exit ;
13471: GO 13502
// for i in tmp do
13473: LD_ADDR_VAR 0 1
13477: PUSH
13478: LD_VAR 0 2
13482: PUSH
13483: FOR_IN
13484: IFFALSE 13500
// SetBLevel ( i , 10 ) ;
13486: LD_VAR 0 1
13490: PPUSH
13491: LD_INT 10
13493: PPUSH
13494: CALL_OW 241
13498: GO 13483
13500: POP
13501: POP
// end ;
13502: PPOPN 2
13504: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13505: LD_EXP 26
13509: PUSH
13510: LD_EXP 43
13514: AND
13515: IFFALSE 13626
13517: GO 13519
13519: DISABLE
13520: LD_INT 0
13522: PPUSH
13523: PPUSH
13524: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13525: LD_ADDR_VAR 0 3
13529: PUSH
13530: LD_INT 22
13532: PUSH
13533: LD_OWVAR 2
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: PUSH
13542: LD_INT 25
13544: PUSH
13545: LD_INT 1
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: PPUSH
13556: CALL_OW 69
13560: ST_TO_ADDR
// if not tmp then
13561: LD_VAR 0 3
13565: NOT
13566: IFFALSE 13570
// exit ;
13568: GO 13626
// un := tmp [ rand ( 1 , tmp ) ] ;
13570: LD_ADDR_VAR 0 2
13574: PUSH
13575: LD_VAR 0 3
13579: PUSH
13580: LD_INT 1
13582: PPUSH
13583: LD_VAR 0 3
13587: PPUSH
13588: CALL_OW 12
13592: ARRAY
13593: ST_TO_ADDR
// if Crawls ( un ) then
13594: LD_VAR 0 2
13598: PPUSH
13599: CALL_OW 318
13603: IFFALSE 13614
// ComWalk ( un ) ;
13605: LD_VAR 0 2
13609: PPUSH
13610: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13614: LD_VAR 0 2
13618: PPUSH
13619: LD_INT 5
13621: PPUSH
13622: CALL_OW 336
// end ;
13626: PPOPN 3
13628: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13629: LD_EXP 26
13633: PUSH
13634: LD_EXP 44
13638: AND
13639: PUSH
13640: LD_OWVAR 67
13644: PUSH
13645: LD_INT 4
13647: LESS
13648: AND
13649: IFFALSE 13668
13651: GO 13653
13653: DISABLE
// begin Difficulty := Difficulty + 1 ;
13654: LD_ADDR_OWVAR 67
13658: PUSH
13659: LD_OWVAR 67
13663: PUSH
13664: LD_INT 1
13666: PLUS
13667: ST_TO_ADDR
// end ;
13668: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13669: LD_EXP 26
13673: PUSH
13674: LD_EXP 45
13678: AND
13679: IFFALSE 13782
13681: GO 13683
13683: DISABLE
13684: LD_INT 0
13686: PPUSH
// begin for i := 1 to 5 do
13687: LD_ADDR_VAR 0 1
13691: PUSH
13692: DOUBLE
13693: LD_INT 1
13695: DEC
13696: ST_TO_ADDR
13697: LD_INT 5
13699: PUSH
13700: FOR_TO
13701: IFFALSE 13780
// begin uc_nation := nation_nature ;
13703: LD_ADDR_OWVAR 21
13707: PUSH
13708: LD_INT 0
13710: ST_TO_ADDR
// uc_side := 0 ;
13711: LD_ADDR_OWVAR 20
13715: PUSH
13716: LD_INT 0
13718: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13719: LD_ADDR_OWVAR 29
13723: PUSH
13724: LD_INT 12
13726: PUSH
13727: LD_INT 12
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: ST_TO_ADDR
// hc_agressivity := 20 ;
13734: LD_ADDR_OWVAR 35
13738: PUSH
13739: LD_INT 20
13741: ST_TO_ADDR
// hc_class := class_tiger ;
13742: LD_ADDR_OWVAR 28
13746: PUSH
13747: LD_INT 14
13749: ST_TO_ADDR
// hc_gallery :=  ;
13750: LD_ADDR_OWVAR 33
13754: PUSH
13755: LD_STRING 
13757: ST_TO_ADDR
// hc_name :=  ;
13758: LD_ADDR_OWVAR 26
13762: PUSH
13763: LD_STRING 
13765: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13766: CALL_OW 44
13770: PPUSH
13771: LD_INT 0
13773: PPUSH
13774: CALL_OW 51
// end ;
13778: GO 13700
13780: POP
13781: POP
// end ;
13782: PPOPN 1
13784: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13785: LD_EXP 26
13789: PUSH
13790: LD_EXP 46
13794: AND
13795: IFFALSE 13804
13797: GO 13799
13799: DISABLE
// StreamSibBomb ;
13800: CALL 13805 0 0
13804: END
// export function StreamSibBomb ; var i , x , y ; begin
13805: LD_INT 0
13807: PPUSH
13808: PPUSH
13809: PPUSH
13810: PPUSH
// result := false ;
13811: LD_ADDR_VAR 0 1
13815: PUSH
13816: LD_INT 0
13818: ST_TO_ADDR
// for i := 1 to 16 do
13819: LD_ADDR_VAR 0 2
13823: PUSH
13824: DOUBLE
13825: LD_INT 1
13827: DEC
13828: ST_TO_ADDR
13829: LD_INT 16
13831: PUSH
13832: FOR_TO
13833: IFFALSE 14032
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13835: LD_ADDR_VAR 0 3
13839: PUSH
13840: LD_INT 10
13842: PUSH
13843: LD_INT 20
13845: PUSH
13846: LD_INT 30
13848: PUSH
13849: LD_INT 40
13851: PUSH
13852: LD_INT 50
13854: PUSH
13855: LD_INT 60
13857: PUSH
13858: LD_INT 70
13860: PUSH
13861: LD_INT 80
13863: PUSH
13864: LD_INT 90
13866: PUSH
13867: LD_INT 100
13869: PUSH
13870: LD_INT 110
13872: PUSH
13873: LD_INT 120
13875: PUSH
13876: LD_INT 130
13878: PUSH
13879: LD_INT 140
13881: PUSH
13882: LD_INT 150
13884: PUSH
13885: EMPTY
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: PUSH
13902: LD_INT 1
13904: PPUSH
13905: LD_INT 15
13907: PPUSH
13908: CALL_OW 12
13912: ARRAY
13913: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13914: LD_ADDR_VAR 0 4
13918: PUSH
13919: LD_INT 10
13921: PUSH
13922: LD_INT 20
13924: PUSH
13925: LD_INT 30
13927: PUSH
13928: LD_INT 40
13930: PUSH
13931: LD_INT 50
13933: PUSH
13934: LD_INT 60
13936: PUSH
13937: LD_INT 70
13939: PUSH
13940: LD_INT 80
13942: PUSH
13943: LD_INT 90
13945: PUSH
13946: LD_INT 100
13948: PUSH
13949: LD_INT 110
13951: PUSH
13952: LD_INT 120
13954: PUSH
13955: LD_INT 130
13957: PUSH
13958: LD_INT 140
13960: PUSH
13961: LD_INT 150
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: PUSH
13981: LD_INT 1
13983: PPUSH
13984: LD_INT 15
13986: PPUSH
13987: CALL_OW 12
13991: ARRAY
13992: ST_TO_ADDR
// if ValidHex ( x , y ) then
13993: LD_VAR 0 3
13997: PPUSH
13998: LD_VAR 0 4
14002: PPUSH
14003: CALL_OW 488
14007: IFFALSE 14030
// begin result := [ x , y ] ;
14009: LD_ADDR_VAR 0 1
14013: PUSH
14014: LD_VAR 0 3
14018: PUSH
14019: LD_VAR 0 4
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: ST_TO_ADDR
// break ;
14028: GO 14032
// end ; end ;
14030: GO 13832
14032: POP
14033: POP
// if result then
14034: LD_VAR 0 1
14038: IFFALSE 14098
// begin ToLua ( playSibBomb() ) ;
14040: LD_STRING playSibBomb()
14042: PPUSH
14043: CALL_OW 559
// wait ( 0 0$14 ) ;
14047: LD_INT 490
14049: PPUSH
14050: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14054: LD_VAR 0 1
14058: PUSH
14059: LD_INT 1
14061: ARRAY
14062: PPUSH
14063: LD_VAR 0 1
14067: PUSH
14068: LD_INT 2
14070: ARRAY
14071: PPUSH
14072: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14076: LD_VAR 0 1
14080: PUSH
14081: LD_INT 1
14083: ARRAY
14084: PPUSH
14085: LD_VAR 0 1
14089: PUSH
14090: LD_INT 2
14092: ARRAY
14093: PPUSH
14094: CALL_OW 429
// end ; end ;
14098: LD_VAR 0 1
14102: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14103: LD_EXP 26
14107: PUSH
14108: LD_EXP 48
14112: AND
14113: IFFALSE 14125
14115: GO 14117
14117: DISABLE
// YouLost (  ) ;
14118: LD_STRING 
14120: PPUSH
14121: CALL_OW 104
14125: END
// every 0 0$1 trigger StreamModeActive and sFog do
14126: LD_EXP 26
14130: PUSH
14131: LD_EXP 47
14135: AND
14136: IFFALSE 14150
14138: GO 14140
14140: DISABLE
// FogOff ( your_side ) ;
14141: LD_OWVAR 2
14145: PPUSH
14146: CALL_OW 344
14150: END
// every 0 0$1 trigger StreamModeActive and sSun do
14151: LD_EXP 26
14155: PUSH
14156: LD_EXP 49
14160: AND
14161: IFFALSE 14189
14163: GO 14165
14165: DISABLE
// begin solar_recharge_percent := 0 ;
14166: LD_ADDR_OWVAR 79
14170: PUSH
14171: LD_INT 0
14173: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14174: LD_INT 10500
14176: PPUSH
14177: CALL_OW 67
// solar_recharge_percent := 100 ;
14181: LD_ADDR_OWVAR 79
14185: PUSH
14186: LD_INT 100
14188: ST_TO_ADDR
// end ;
14189: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14190: LD_EXP 26
14194: PUSH
14195: LD_EXP 50
14199: AND
14200: IFFALSE 14439
14202: GO 14204
14204: DISABLE
14205: LD_INT 0
14207: PPUSH
14208: PPUSH
14209: PPUSH
// begin tmp := [ ] ;
14210: LD_ADDR_VAR 0 3
14214: PUSH
14215: EMPTY
14216: ST_TO_ADDR
// for i := 1 to 6 do
14217: LD_ADDR_VAR 0 1
14221: PUSH
14222: DOUBLE
14223: LD_INT 1
14225: DEC
14226: ST_TO_ADDR
14227: LD_INT 6
14229: PUSH
14230: FOR_TO
14231: IFFALSE 14336
// begin uc_nation := nation_nature ;
14233: LD_ADDR_OWVAR 21
14237: PUSH
14238: LD_INT 0
14240: ST_TO_ADDR
// uc_side := 0 ;
14241: LD_ADDR_OWVAR 20
14245: PUSH
14246: LD_INT 0
14248: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14249: LD_ADDR_OWVAR 29
14253: PUSH
14254: LD_INT 12
14256: PUSH
14257: LD_INT 12
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: ST_TO_ADDR
// hc_agressivity := 20 ;
14264: LD_ADDR_OWVAR 35
14268: PUSH
14269: LD_INT 20
14271: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14272: LD_ADDR_OWVAR 28
14276: PUSH
14277: LD_INT 17
14279: ST_TO_ADDR
// hc_gallery :=  ;
14280: LD_ADDR_OWVAR 33
14284: PUSH
14285: LD_STRING 
14287: ST_TO_ADDR
// hc_name :=  ;
14288: LD_ADDR_OWVAR 26
14292: PUSH
14293: LD_STRING 
14295: ST_TO_ADDR
// un := CreateHuman ;
14296: LD_ADDR_VAR 0 2
14300: PUSH
14301: CALL_OW 44
14305: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14306: LD_VAR 0 2
14310: PPUSH
14311: LD_INT 1
14313: PPUSH
14314: CALL_OW 51
// tmp := tmp ^ un ;
14318: LD_ADDR_VAR 0 3
14322: PUSH
14323: LD_VAR 0 3
14327: PUSH
14328: LD_VAR 0 2
14332: ADD
14333: ST_TO_ADDR
// end ;
14334: GO 14230
14336: POP
14337: POP
// repeat wait ( 0 0$1 ) ;
14338: LD_INT 35
14340: PPUSH
14341: CALL_OW 67
// for un in tmp do
14345: LD_ADDR_VAR 0 2
14349: PUSH
14350: LD_VAR 0 3
14354: PUSH
14355: FOR_IN
14356: IFFALSE 14430
// begin if IsDead ( un ) then
14358: LD_VAR 0 2
14362: PPUSH
14363: CALL_OW 301
14367: IFFALSE 14387
// begin tmp := tmp diff un ;
14369: LD_ADDR_VAR 0 3
14373: PUSH
14374: LD_VAR 0 3
14378: PUSH
14379: LD_VAR 0 2
14383: DIFF
14384: ST_TO_ADDR
// continue ;
14385: GO 14355
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14387: LD_VAR 0 2
14391: PPUSH
14392: LD_INT 3
14394: PUSH
14395: LD_INT 22
14397: PUSH
14398: LD_INT 0
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: PPUSH
14409: CALL_OW 69
14413: PPUSH
14414: LD_VAR 0 2
14418: PPUSH
14419: CALL_OW 74
14423: PPUSH
14424: CALL_OW 115
// end ;
14428: GO 14355
14430: POP
14431: POP
// until not tmp ;
14432: LD_VAR 0 3
14436: NOT
14437: IFFALSE 14338
// end ;
14439: PPOPN 3
14441: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14442: LD_EXP 26
14446: PUSH
14447: LD_EXP 51
14451: AND
14452: IFFALSE 14506
14454: GO 14456
14456: DISABLE
// begin ToLua ( displayTroll(); ) ;
14457: LD_STRING displayTroll();
14459: PPUSH
14460: CALL_OW 559
// wait ( 3 3$00 ) ;
14464: LD_INT 6300
14466: PPUSH
14467: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14471: LD_STRING hideTroll();
14473: PPUSH
14474: CALL_OW 559
// wait ( 1 1$00 ) ;
14478: LD_INT 2100
14480: PPUSH
14481: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14485: LD_STRING displayTroll();
14487: PPUSH
14488: CALL_OW 559
// wait ( 1 1$00 ) ;
14492: LD_INT 2100
14494: PPUSH
14495: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14499: LD_STRING hideTroll();
14501: PPUSH
14502: CALL_OW 559
// end ;
14506: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14507: LD_EXP 26
14511: PUSH
14512: LD_EXP 52
14516: AND
14517: IFFALSE 14580
14519: GO 14521
14521: DISABLE
14522: LD_INT 0
14524: PPUSH
// begin p := 0 ;
14525: LD_ADDR_VAR 0 1
14529: PUSH
14530: LD_INT 0
14532: ST_TO_ADDR
// repeat game_speed := 1 ;
14533: LD_ADDR_OWVAR 65
14537: PUSH
14538: LD_INT 1
14540: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14541: LD_INT 35
14543: PPUSH
14544: CALL_OW 67
// p := p + 1 ;
14548: LD_ADDR_VAR 0 1
14552: PUSH
14553: LD_VAR 0 1
14557: PUSH
14558: LD_INT 1
14560: PLUS
14561: ST_TO_ADDR
// until p >= 60 ;
14562: LD_VAR 0 1
14566: PUSH
14567: LD_INT 60
14569: GREATEREQUAL
14570: IFFALSE 14533
// game_speed := 4 ;
14572: LD_ADDR_OWVAR 65
14576: PUSH
14577: LD_INT 4
14579: ST_TO_ADDR
// end ;
14580: PPOPN 1
14582: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14583: LD_EXP 26
14587: PUSH
14588: LD_EXP 53
14592: AND
14593: IFFALSE 14739
14595: GO 14597
14597: DISABLE
14598: LD_INT 0
14600: PPUSH
14601: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14602: LD_ADDR_VAR 0 1
14606: PUSH
14607: LD_INT 22
14609: PUSH
14610: LD_OWVAR 2
14614: PUSH
14615: EMPTY
14616: LIST
14617: LIST
14618: PUSH
14619: LD_INT 2
14621: PUSH
14622: LD_INT 30
14624: PUSH
14625: LD_INT 0
14627: PUSH
14628: EMPTY
14629: LIST
14630: LIST
14631: PUSH
14632: LD_INT 30
14634: PUSH
14635: LD_INT 1
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: PUSH
14642: EMPTY
14643: LIST
14644: LIST
14645: LIST
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: PPUSH
14651: CALL_OW 69
14655: ST_TO_ADDR
// if not depot then
14656: LD_VAR 0 1
14660: NOT
14661: IFFALSE 14665
// exit ;
14663: GO 14739
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14665: LD_ADDR_VAR 0 2
14669: PUSH
14670: LD_VAR 0 1
14674: PUSH
14675: LD_INT 1
14677: PPUSH
14678: LD_VAR 0 1
14682: PPUSH
14683: CALL_OW 12
14687: ARRAY
14688: PPUSH
14689: CALL_OW 274
14693: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14694: LD_VAR 0 2
14698: PPUSH
14699: LD_INT 1
14701: PPUSH
14702: LD_INT 0
14704: PPUSH
14705: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14709: LD_VAR 0 2
14713: PPUSH
14714: LD_INT 2
14716: PPUSH
14717: LD_INT 0
14719: PPUSH
14720: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14724: LD_VAR 0 2
14728: PPUSH
14729: LD_INT 3
14731: PPUSH
14732: LD_INT 0
14734: PPUSH
14735: CALL_OW 277
// end ;
14739: PPOPN 2
14741: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14742: LD_EXP 26
14746: PUSH
14747: LD_EXP 54
14751: AND
14752: IFFALSE 14849
14754: GO 14756
14756: DISABLE
14757: LD_INT 0
14759: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14760: LD_ADDR_VAR 0 1
14764: PUSH
14765: LD_INT 22
14767: PUSH
14768: LD_OWVAR 2
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: PUSH
14777: LD_INT 21
14779: PUSH
14780: LD_INT 1
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: PUSH
14787: LD_INT 3
14789: PUSH
14790: LD_INT 23
14792: PUSH
14793: LD_INT 0
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: LIST
14808: PPUSH
14809: CALL_OW 69
14813: ST_TO_ADDR
// if not tmp then
14814: LD_VAR 0 1
14818: NOT
14819: IFFALSE 14823
// exit ;
14821: GO 14849
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14823: LD_VAR 0 1
14827: PUSH
14828: LD_INT 1
14830: PPUSH
14831: LD_VAR 0 1
14835: PPUSH
14836: CALL_OW 12
14840: ARRAY
14841: PPUSH
14842: LD_INT 200
14844: PPUSH
14845: CALL_OW 234
// end ;
14849: PPOPN 1
14851: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14852: LD_EXP 26
14856: PUSH
14857: LD_EXP 55
14861: AND
14862: IFFALSE 14941
14864: GO 14866
14866: DISABLE
14867: LD_INT 0
14869: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14870: LD_ADDR_VAR 0 1
14874: PUSH
14875: LD_INT 22
14877: PUSH
14878: LD_OWVAR 2
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: PUSH
14887: LD_INT 21
14889: PUSH
14890: LD_INT 2
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: PPUSH
14901: CALL_OW 69
14905: ST_TO_ADDR
// if not tmp then
14906: LD_VAR 0 1
14910: NOT
14911: IFFALSE 14915
// exit ;
14913: GO 14941
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14915: LD_VAR 0 1
14919: PUSH
14920: LD_INT 1
14922: PPUSH
14923: LD_VAR 0 1
14927: PPUSH
14928: CALL_OW 12
14932: ARRAY
14933: PPUSH
14934: LD_INT 60
14936: PPUSH
14937: CALL_OW 234
// end ;
14941: PPOPN 1
14943: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14944: LD_EXP 26
14948: PUSH
14949: LD_EXP 56
14953: AND
14954: IFFALSE 15053
14956: GO 14958
14958: DISABLE
14959: LD_INT 0
14961: PPUSH
14962: PPUSH
// begin enable ;
14963: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14964: LD_ADDR_VAR 0 1
14968: PUSH
14969: LD_INT 22
14971: PUSH
14972: LD_OWVAR 2
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: PUSH
14981: LD_INT 61
14983: PUSH
14984: EMPTY
14985: LIST
14986: PUSH
14987: LD_INT 33
14989: PUSH
14990: LD_INT 2
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: LIST
15001: PPUSH
15002: CALL_OW 69
15006: ST_TO_ADDR
// if not tmp then
15007: LD_VAR 0 1
15011: NOT
15012: IFFALSE 15016
// exit ;
15014: GO 15053
// for i in tmp do
15016: LD_ADDR_VAR 0 2
15020: PUSH
15021: LD_VAR 0 1
15025: PUSH
15026: FOR_IN
15027: IFFALSE 15051
// if IsControledBy ( i ) then
15029: LD_VAR 0 2
15033: PPUSH
15034: CALL_OW 312
15038: IFFALSE 15049
// ComUnlink ( i ) ;
15040: LD_VAR 0 2
15044: PPUSH
15045: CALL_OW 136
15049: GO 15026
15051: POP
15052: POP
// end ;
15053: PPOPN 2
15055: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15056: LD_EXP 26
15060: PUSH
15061: LD_EXP 57
15065: AND
15066: IFFALSE 15206
15068: GO 15070
15070: DISABLE
15071: LD_INT 0
15073: PPUSH
15074: PPUSH
// begin ToLua ( displayPowell(); ) ;
15075: LD_STRING displayPowell();
15077: PPUSH
15078: CALL_OW 559
// uc_side := 0 ;
15082: LD_ADDR_OWVAR 20
15086: PUSH
15087: LD_INT 0
15089: ST_TO_ADDR
// uc_nation := 2 ;
15090: LD_ADDR_OWVAR 21
15094: PUSH
15095: LD_INT 2
15097: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15098: LD_ADDR_OWVAR 37
15102: PUSH
15103: LD_INT 14
15105: ST_TO_ADDR
// vc_engine := engine_siberite ;
15106: LD_ADDR_OWVAR 39
15110: PUSH
15111: LD_INT 3
15113: ST_TO_ADDR
// vc_control := control_apeman ;
15114: LD_ADDR_OWVAR 38
15118: PUSH
15119: LD_INT 5
15121: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15122: LD_ADDR_OWVAR 40
15126: PUSH
15127: LD_INT 29
15129: ST_TO_ADDR
// un := CreateVehicle ;
15130: LD_ADDR_VAR 0 2
15134: PUSH
15135: CALL_OW 45
15139: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15140: LD_VAR 0 2
15144: PPUSH
15145: LD_INT 1
15147: PPUSH
15148: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15152: LD_INT 35
15154: PPUSH
15155: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15159: LD_VAR 0 2
15163: PPUSH
15164: LD_INT 22
15166: PUSH
15167: LD_OWVAR 2
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: PPUSH
15176: CALL_OW 69
15180: PPUSH
15181: LD_VAR 0 2
15185: PPUSH
15186: CALL_OW 74
15190: PPUSH
15191: CALL_OW 115
// until IsDead ( un ) ;
15195: LD_VAR 0 2
15199: PPUSH
15200: CALL_OW 301
15204: IFFALSE 15152
// end ;
15206: PPOPN 2
15208: END
// every 0 0$1 trigger StreamModeActive and sStu do
15209: LD_EXP 26
15213: PUSH
15214: LD_EXP 65
15218: AND
15219: IFFALSE 15235
15221: GO 15223
15223: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15224: LD_STRING displayStucuk();
15226: PPUSH
15227: CALL_OW 559
// ResetFog ;
15231: CALL_OW 335
// end ;
15235: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15236: LD_EXP 26
15240: PUSH
15241: LD_EXP 58
15245: AND
15246: IFFALSE 15387
15248: GO 15250
15250: DISABLE
15251: LD_INT 0
15253: PPUSH
15254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15255: LD_ADDR_VAR 0 2
15259: PUSH
15260: LD_INT 22
15262: PUSH
15263: LD_OWVAR 2
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: PUSH
15272: LD_INT 21
15274: PUSH
15275: LD_INT 1
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PPUSH
15286: CALL_OW 69
15290: ST_TO_ADDR
// if not tmp then
15291: LD_VAR 0 2
15295: NOT
15296: IFFALSE 15300
// exit ;
15298: GO 15387
// un := tmp [ rand ( 1 , tmp ) ] ;
15300: LD_ADDR_VAR 0 1
15304: PUSH
15305: LD_VAR 0 2
15309: PUSH
15310: LD_INT 1
15312: PPUSH
15313: LD_VAR 0 2
15317: PPUSH
15318: CALL_OW 12
15322: ARRAY
15323: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15324: LD_VAR 0 1
15328: PPUSH
15329: LD_INT 0
15331: PPUSH
15332: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15336: LD_VAR 0 1
15340: PPUSH
15341: LD_OWVAR 3
15345: PUSH
15346: LD_VAR 0 1
15350: DIFF
15351: PPUSH
15352: LD_VAR 0 1
15356: PPUSH
15357: CALL_OW 74
15361: PPUSH
15362: CALL_OW 115
// wait ( 0 0$20 ) ;
15366: LD_INT 700
15368: PPUSH
15369: CALL_OW 67
// SetSide ( un , your_side ) ;
15373: LD_VAR 0 1
15377: PPUSH
15378: LD_OWVAR 2
15382: PPUSH
15383: CALL_OW 235
// end ;
15387: PPOPN 2
15389: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15390: LD_EXP 26
15394: PUSH
15395: LD_EXP 59
15399: AND
15400: IFFALSE 15506
15402: GO 15404
15404: DISABLE
15405: LD_INT 0
15407: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15408: LD_ADDR_VAR 0 1
15412: PUSH
15413: LD_INT 22
15415: PUSH
15416: LD_OWVAR 2
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: PUSH
15425: LD_INT 2
15427: PUSH
15428: LD_INT 30
15430: PUSH
15431: LD_INT 0
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: PUSH
15438: LD_INT 30
15440: PUSH
15441: LD_INT 1
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: LIST
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: PPUSH
15457: CALL_OW 69
15461: ST_TO_ADDR
// if not depot then
15462: LD_VAR 0 1
15466: NOT
15467: IFFALSE 15471
// exit ;
15469: GO 15506
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15471: LD_VAR 0 1
15475: PUSH
15476: LD_INT 1
15478: ARRAY
15479: PPUSH
15480: CALL_OW 250
15484: PPUSH
15485: LD_VAR 0 1
15489: PUSH
15490: LD_INT 1
15492: ARRAY
15493: PPUSH
15494: CALL_OW 251
15498: PPUSH
15499: LD_INT 70
15501: PPUSH
15502: CALL_OW 495
// end ;
15506: PPOPN 1
15508: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15509: LD_EXP 26
15513: PUSH
15514: LD_EXP 60
15518: AND
15519: IFFALSE 15730
15521: GO 15523
15523: DISABLE
15524: LD_INT 0
15526: PPUSH
15527: PPUSH
15528: PPUSH
15529: PPUSH
15530: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15531: LD_ADDR_VAR 0 5
15535: PUSH
15536: LD_INT 22
15538: PUSH
15539: LD_OWVAR 2
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: PUSH
15548: LD_INT 21
15550: PUSH
15551: LD_INT 1
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PPUSH
15562: CALL_OW 69
15566: ST_TO_ADDR
// if not tmp then
15567: LD_VAR 0 5
15571: NOT
15572: IFFALSE 15576
// exit ;
15574: GO 15730
// for i in tmp do
15576: LD_ADDR_VAR 0 1
15580: PUSH
15581: LD_VAR 0 5
15585: PUSH
15586: FOR_IN
15587: IFFALSE 15728
// begin d := rand ( 0 , 5 ) ;
15589: LD_ADDR_VAR 0 4
15593: PUSH
15594: LD_INT 0
15596: PPUSH
15597: LD_INT 5
15599: PPUSH
15600: CALL_OW 12
15604: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15605: LD_ADDR_VAR 0 2
15609: PUSH
15610: LD_VAR 0 1
15614: PPUSH
15615: CALL_OW 250
15619: PPUSH
15620: LD_VAR 0 4
15624: PPUSH
15625: LD_INT 3
15627: PPUSH
15628: LD_INT 12
15630: PPUSH
15631: CALL_OW 12
15635: PPUSH
15636: CALL_OW 272
15640: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15641: LD_ADDR_VAR 0 3
15645: PUSH
15646: LD_VAR 0 1
15650: PPUSH
15651: CALL_OW 251
15655: PPUSH
15656: LD_VAR 0 4
15660: PPUSH
15661: LD_INT 3
15663: PPUSH
15664: LD_INT 12
15666: PPUSH
15667: CALL_OW 12
15671: PPUSH
15672: CALL_OW 273
15676: ST_TO_ADDR
// if ValidHex ( x , y ) then
15677: LD_VAR 0 2
15681: PPUSH
15682: LD_VAR 0 3
15686: PPUSH
15687: CALL_OW 488
15691: IFFALSE 15726
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15693: LD_VAR 0 1
15697: PPUSH
15698: LD_VAR 0 2
15702: PPUSH
15703: LD_VAR 0 3
15707: PPUSH
15708: LD_INT 3
15710: PPUSH
15711: LD_INT 6
15713: PPUSH
15714: CALL_OW 12
15718: PPUSH
15719: LD_INT 1
15721: PPUSH
15722: CALL_OW 483
// end ;
15726: GO 15586
15728: POP
15729: POP
// end ;
15730: PPOPN 5
15732: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15733: LD_EXP 26
15737: PUSH
15738: LD_EXP 61
15742: AND
15743: IFFALSE 15837
15745: GO 15747
15747: DISABLE
15748: LD_INT 0
15750: PPUSH
15751: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15752: LD_ADDR_VAR 0 2
15756: PUSH
15757: LD_INT 22
15759: PUSH
15760: LD_OWVAR 2
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PUSH
15769: LD_INT 32
15771: PUSH
15772: LD_INT 1
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: LD_INT 21
15781: PUSH
15782: LD_INT 2
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: LIST
15793: PPUSH
15794: CALL_OW 69
15798: ST_TO_ADDR
// if not tmp then
15799: LD_VAR 0 2
15803: NOT
15804: IFFALSE 15808
// exit ;
15806: GO 15837
// for i in tmp do
15808: LD_ADDR_VAR 0 1
15812: PUSH
15813: LD_VAR 0 2
15817: PUSH
15818: FOR_IN
15819: IFFALSE 15835
// SetFuel ( i , 0 ) ;
15821: LD_VAR 0 1
15825: PPUSH
15826: LD_INT 0
15828: PPUSH
15829: CALL_OW 240
15833: GO 15818
15835: POP
15836: POP
// end ;
15837: PPOPN 2
15839: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15840: LD_EXP 26
15844: PUSH
15845: LD_EXP 62
15849: AND
15850: IFFALSE 15916
15852: GO 15854
15854: DISABLE
15855: LD_INT 0
15857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15858: LD_ADDR_VAR 0 1
15862: PUSH
15863: LD_INT 22
15865: PUSH
15866: LD_OWVAR 2
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: PUSH
15875: LD_INT 30
15877: PUSH
15878: LD_INT 29
15880: PUSH
15881: EMPTY
15882: LIST
15883: LIST
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: PPUSH
15889: CALL_OW 69
15893: ST_TO_ADDR
// if not tmp then
15894: LD_VAR 0 1
15898: NOT
15899: IFFALSE 15903
// exit ;
15901: GO 15916
// DestroyUnit ( tmp [ 1 ] ) ;
15903: LD_VAR 0 1
15907: PUSH
15908: LD_INT 1
15910: ARRAY
15911: PPUSH
15912: CALL_OW 65
// end ;
15916: PPOPN 1
15918: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15919: LD_EXP 26
15923: PUSH
15924: LD_EXP 64
15928: AND
15929: IFFALSE 16058
15931: GO 15933
15933: DISABLE
15934: LD_INT 0
15936: PPUSH
// begin uc_side := 0 ;
15937: LD_ADDR_OWVAR 20
15941: PUSH
15942: LD_INT 0
15944: ST_TO_ADDR
// uc_nation := nation_arabian ;
15945: LD_ADDR_OWVAR 21
15949: PUSH
15950: LD_INT 2
15952: ST_TO_ADDR
// hc_gallery :=  ;
15953: LD_ADDR_OWVAR 33
15957: PUSH
15958: LD_STRING 
15960: ST_TO_ADDR
// hc_name :=  ;
15961: LD_ADDR_OWVAR 26
15965: PUSH
15966: LD_STRING 
15968: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15969: LD_INT 1
15971: PPUSH
15972: LD_INT 11
15974: PPUSH
15975: LD_INT 10
15977: PPUSH
15978: CALL_OW 380
// un := CreateHuman ;
15982: LD_ADDR_VAR 0 1
15986: PUSH
15987: CALL_OW 44
15991: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15992: LD_VAR 0 1
15996: PPUSH
15997: LD_INT 1
15999: PPUSH
16000: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16004: LD_INT 35
16006: PPUSH
16007: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16011: LD_VAR 0 1
16015: PPUSH
16016: LD_INT 22
16018: PUSH
16019: LD_OWVAR 2
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: PPUSH
16028: CALL_OW 69
16032: PPUSH
16033: LD_VAR 0 1
16037: PPUSH
16038: CALL_OW 74
16042: PPUSH
16043: CALL_OW 115
// until IsDead ( un ) ;
16047: LD_VAR 0 1
16051: PPUSH
16052: CALL_OW 301
16056: IFFALSE 16004
// end ;
16058: PPOPN 1
16060: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16061: LD_EXP 26
16065: PUSH
16066: LD_EXP 66
16070: AND
16071: IFFALSE 16083
16073: GO 16075
16075: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16076: LD_STRING earthquake(getX(game), 0, 32)
16078: PPUSH
16079: CALL_OW 559
16083: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16084: LD_EXP 26
16088: PUSH
16089: LD_EXP 67
16093: AND
16094: IFFALSE 16185
16096: GO 16098
16098: DISABLE
16099: LD_INT 0
16101: PPUSH
// begin enable ;
16102: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16103: LD_ADDR_VAR 0 1
16107: PUSH
16108: LD_INT 22
16110: PUSH
16111: LD_OWVAR 2
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: PUSH
16120: LD_INT 21
16122: PUSH
16123: LD_INT 2
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: PUSH
16130: LD_INT 33
16132: PUSH
16133: LD_INT 3
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: LIST
16144: PPUSH
16145: CALL_OW 69
16149: ST_TO_ADDR
// if not tmp then
16150: LD_VAR 0 1
16154: NOT
16155: IFFALSE 16159
// exit ;
16157: GO 16185
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16159: LD_VAR 0 1
16163: PUSH
16164: LD_INT 1
16166: PPUSH
16167: LD_VAR 0 1
16171: PPUSH
16172: CALL_OW 12
16176: ARRAY
16177: PPUSH
16178: LD_INT 1
16180: PPUSH
16181: CALL_OW 234
// end ;
16185: PPOPN 1
16187: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16188: LD_EXP 26
16192: PUSH
16193: LD_EXP 68
16197: AND
16198: IFFALSE 16339
16200: GO 16202
16202: DISABLE
16203: LD_INT 0
16205: PPUSH
16206: PPUSH
16207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16208: LD_ADDR_VAR 0 3
16212: PUSH
16213: LD_INT 22
16215: PUSH
16216: LD_OWVAR 2
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: PUSH
16225: LD_INT 25
16227: PUSH
16228: LD_INT 1
16230: PUSH
16231: EMPTY
16232: LIST
16233: LIST
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PPUSH
16239: CALL_OW 69
16243: ST_TO_ADDR
// if not tmp then
16244: LD_VAR 0 3
16248: NOT
16249: IFFALSE 16253
// exit ;
16251: GO 16339
// un := tmp [ rand ( 1 , tmp ) ] ;
16253: LD_ADDR_VAR 0 2
16257: PUSH
16258: LD_VAR 0 3
16262: PUSH
16263: LD_INT 1
16265: PPUSH
16266: LD_VAR 0 3
16270: PPUSH
16271: CALL_OW 12
16275: ARRAY
16276: ST_TO_ADDR
// if Crawls ( un ) then
16277: LD_VAR 0 2
16281: PPUSH
16282: CALL_OW 318
16286: IFFALSE 16297
// ComWalk ( un ) ;
16288: LD_VAR 0 2
16292: PPUSH
16293: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16297: LD_VAR 0 2
16301: PPUSH
16302: LD_INT 9
16304: PPUSH
16305: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16309: LD_INT 28
16311: PPUSH
16312: LD_OWVAR 2
16316: PPUSH
16317: LD_INT 2
16319: PPUSH
16320: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16324: LD_INT 29
16326: PPUSH
16327: LD_OWVAR 2
16331: PPUSH
16332: LD_INT 2
16334: PPUSH
16335: CALL_OW 322
// end ;
16339: PPOPN 3
16341: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16342: LD_EXP 26
16346: PUSH
16347: LD_EXP 69
16351: AND
16352: IFFALSE 16463
16354: GO 16356
16356: DISABLE
16357: LD_INT 0
16359: PPUSH
16360: PPUSH
16361: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16362: LD_ADDR_VAR 0 3
16366: PUSH
16367: LD_INT 22
16369: PUSH
16370: LD_OWVAR 2
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: PUSH
16379: LD_INT 25
16381: PUSH
16382: LD_INT 1
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PUSH
16389: EMPTY
16390: LIST
16391: LIST
16392: PPUSH
16393: CALL_OW 69
16397: ST_TO_ADDR
// if not tmp then
16398: LD_VAR 0 3
16402: NOT
16403: IFFALSE 16407
// exit ;
16405: GO 16463
// un := tmp [ rand ( 1 , tmp ) ] ;
16407: LD_ADDR_VAR 0 2
16411: PUSH
16412: LD_VAR 0 3
16416: PUSH
16417: LD_INT 1
16419: PPUSH
16420: LD_VAR 0 3
16424: PPUSH
16425: CALL_OW 12
16429: ARRAY
16430: ST_TO_ADDR
// if Crawls ( un ) then
16431: LD_VAR 0 2
16435: PPUSH
16436: CALL_OW 318
16440: IFFALSE 16451
// ComWalk ( un ) ;
16442: LD_VAR 0 2
16446: PPUSH
16447: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16451: LD_VAR 0 2
16455: PPUSH
16456: LD_INT 8
16458: PPUSH
16459: CALL_OW 336
// end ;
16463: PPOPN 3
16465: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16466: LD_EXP 26
16470: PUSH
16471: LD_EXP 70
16475: AND
16476: IFFALSE 16620
16478: GO 16480
16480: DISABLE
16481: LD_INT 0
16483: PPUSH
16484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16485: LD_ADDR_VAR 0 2
16489: PUSH
16490: LD_INT 22
16492: PUSH
16493: LD_OWVAR 2
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: PUSH
16502: LD_INT 21
16504: PUSH
16505: LD_INT 2
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PUSH
16512: LD_INT 2
16514: PUSH
16515: LD_INT 34
16517: PUSH
16518: LD_INT 12
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: PUSH
16525: LD_INT 34
16527: PUSH
16528: LD_INT 51
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PUSH
16535: LD_INT 34
16537: PUSH
16538: LD_INT 32
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: LIST
16555: PPUSH
16556: CALL_OW 69
16560: ST_TO_ADDR
// if not tmp then
16561: LD_VAR 0 2
16565: NOT
16566: IFFALSE 16570
// exit ;
16568: GO 16620
// for i in tmp do
16570: LD_ADDR_VAR 0 1
16574: PUSH
16575: LD_VAR 0 2
16579: PUSH
16580: FOR_IN
16581: IFFALSE 16618
// if GetCargo ( i , mat_artifact ) = 0 then
16583: LD_VAR 0 1
16587: PPUSH
16588: LD_INT 4
16590: PPUSH
16591: CALL_OW 289
16595: PUSH
16596: LD_INT 0
16598: EQUAL
16599: IFFALSE 16616
// SetCargo ( i , mat_siberit , 100 ) ;
16601: LD_VAR 0 1
16605: PPUSH
16606: LD_INT 3
16608: PPUSH
16609: LD_INT 100
16611: PPUSH
16612: CALL_OW 290
16616: GO 16580
16618: POP
16619: POP
// end ;
16620: PPOPN 2
16622: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16623: LD_EXP 26
16627: PUSH
16628: LD_EXP 71
16632: AND
16633: IFFALSE 16816
16635: GO 16637
16637: DISABLE
16638: LD_INT 0
16640: PPUSH
16641: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16642: LD_ADDR_VAR 0 2
16646: PUSH
16647: LD_INT 22
16649: PUSH
16650: LD_OWVAR 2
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: PPUSH
16659: CALL_OW 69
16663: ST_TO_ADDR
// if not tmp then
16664: LD_VAR 0 2
16668: NOT
16669: IFFALSE 16673
// exit ;
16671: GO 16816
// for i := 1 to 2 do
16673: LD_ADDR_VAR 0 1
16677: PUSH
16678: DOUBLE
16679: LD_INT 1
16681: DEC
16682: ST_TO_ADDR
16683: LD_INT 2
16685: PUSH
16686: FOR_TO
16687: IFFALSE 16814
// begin uc_side := your_side ;
16689: LD_ADDR_OWVAR 20
16693: PUSH
16694: LD_OWVAR 2
16698: ST_TO_ADDR
// uc_nation := nation_american ;
16699: LD_ADDR_OWVAR 21
16703: PUSH
16704: LD_INT 1
16706: ST_TO_ADDR
// vc_chassis := us_morphling ;
16707: LD_ADDR_OWVAR 37
16711: PUSH
16712: LD_INT 5
16714: ST_TO_ADDR
// vc_engine := engine_siberite ;
16715: LD_ADDR_OWVAR 39
16719: PUSH
16720: LD_INT 3
16722: ST_TO_ADDR
// vc_control := control_computer ;
16723: LD_ADDR_OWVAR 38
16727: PUSH
16728: LD_INT 3
16730: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16731: LD_ADDR_OWVAR 40
16735: PUSH
16736: LD_INT 10
16738: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16739: LD_VAR 0 2
16743: PUSH
16744: LD_INT 1
16746: ARRAY
16747: PPUSH
16748: CALL_OW 310
16752: NOT
16753: IFFALSE 16800
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16755: CALL_OW 45
16759: PPUSH
16760: LD_VAR 0 2
16764: PUSH
16765: LD_INT 1
16767: ARRAY
16768: PPUSH
16769: CALL_OW 250
16773: PPUSH
16774: LD_VAR 0 2
16778: PUSH
16779: LD_INT 1
16781: ARRAY
16782: PPUSH
16783: CALL_OW 251
16787: PPUSH
16788: LD_INT 12
16790: PPUSH
16791: LD_INT 1
16793: PPUSH
16794: CALL_OW 50
16798: GO 16812
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16800: CALL_OW 45
16804: PPUSH
16805: LD_INT 1
16807: PPUSH
16808: CALL_OW 51
// end ;
16812: GO 16686
16814: POP
16815: POP
// end ;
16816: PPOPN 2
16818: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16819: LD_EXP 26
16823: PUSH
16824: LD_EXP 72
16828: AND
16829: IFFALSE 17051
16831: GO 16833
16833: DISABLE
16834: LD_INT 0
16836: PPUSH
16837: PPUSH
16838: PPUSH
16839: PPUSH
16840: PPUSH
16841: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16842: LD_ADDR_VAR 0 6
16846: PUSH
16847: LD_INT 22
16849: PUSH
16850: LD_OWVAR 2
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: PUSH
16859: LD_INT 21
16861: PUSH
16862: LD_INT 1
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: PUSH
16869: LD_INT 3
16871: PUSH
16872: LD_INT 23
16874: PUSH
16875: LD_INT 0
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: LIST
16890: PPUSH
16891: CALL_OW 69
16895: ST_TO_ADDR
// if not tmp then
16896: LD_VAR 0 6
16900: NOT
16901: IFFALSE 16905
// exit ;
16903: GO 17051
// s1 := rand ( 1 , 4 ) ;
16905: LD_ADDR_VAR 0 2
16909: PUSH
16910: LD_INT 1
16912: PPUSH
16913: LD_INT 4
16915: PPUSH
16916: CALL_OW 12
16920: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16921: LD_ADDR_VAR 0 4
16925: PUSH
16926: LD_VAR 0 6
16930: PUSH
16931: LD_INT 1
16933: ARRAY
16934: PPUSH
16935: LD_VAR 0 2
16939: PPUSH
16940: CALL_OW 259
16944: ST_TO_ADDR
// if s1 = 1 then
16945: LD_VAR 0 2
16949: PUSH
16950: LD_INT 1
16952: EQUAL
16953: IFFALSE 16973
// s2 := rand ( 2 , 4 ) else
16955: LD_ADDR_VAR 0 3
16959: PUSH
16960: LD_INT 2
16962: PPUSH
16963: LD_INT 4
16965: PPUSH
16966: CALL_OW 12
16970: ST_TO_ADDR
16971: GO 16981
// s2 := 1 ;
16973: LD_ADDR_VAR 0 3
16977: PUSH
16978: LD_INT 1
16980: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16981: LD_ADDR_VAR 0 5
16985: PUSH
16986: LD_VAR 0 6
16990: PUSH
16991: LD_INT 1
16993: ARRAY
16994: PPUSH
16995: LD_VAR 0 3
16999: PPUSH
17000: CALL_OW 259
17004: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17005: LD_VAR 0 6
17009: PUSH
17010: LD_INT 1
17012: ARRAY
17013: PPUSH
17014: LD_VAR 0 2
17018: PPUSH
17019: LD_VAR 0 5
17023: PPUSH
17024: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17028: LD_VAR 0 6
17032: PUSH
17033: LD_INT 1
17035: ARRAY
17036: PPUSH
17037: LD_VAR 0 3
17041: PPUSH
17042: LD_VAR 0 4
17046: PPUSH
17047: CALL_OW 237
// end ;
17051: PPOPN 6
17053: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17054: LD_EXP 26
17058: PUSH
17059: LD_EXP 73
17063: AND
17064: IFFALSE 17143
17066: GO 17068
17068: DISABLE
17069: LD_INT 0
17071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17072: LD_ADDR_VAR 0 1
17076: PUSH
17077: LD_INT 22
17079: PUSH
17080: LD_OWVAR 2
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PUSH
17089: LD_INT 30
17091: PUSH
17092: LD_INT 3
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PPUSH
17103: CALL_OW 69
17107: ST_TO_ADDR
// if not tmp then
17108: LD_VAR 0 1
17112: NOT
17113: IFFALSE 17117
// exit ;
17115: GO 17143
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17117: LD_VAR 0 1
17121: PUSH
17122: LD_INT 1
17124: PPUSH
17125: LD_VAR 0 1
17129: PPUSH
17130: CALL_OW 12
17134: ARRAY
17135: PPUSH
17136: LD_INT 1
17138: PPUSH
17139: CALL_OW 234
// end ;
17143: PPOPN 1
17145: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17146: LD_EXP 26
17150: PUSH
17151: LD_EXP 74
17155: AND
17156: IFFALSE 17268
17158: GO 17160
17160: DISABLE
17161: LD_INT 0
17163: PPUSH
17164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17165: LD_ADDR_VAR 0 2
17169: PUSH
17170: LD_INT 22
17172: PUSH
17173: LD_OWVAR 2
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: LD_INT 2
17184: PUSH
17185: LD_INT 30
17187: PUSH
17188: LD_INT 27
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: PUSH
17195: LD_INT 30
17197: PUSH
17198: LD_INT 26
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: PUSH
17205: LD_INT 30
17207: PUSH
17208: LD_INT 28
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PPUSH
17225: CALL_OW 69
17229: ST_TO_ADDR
// if not tmp then
17230: LD_VAR 0 2
17234: NOT
17235: IFFALSE 17239
// exit ;
17237: GO 17268
// for i in tmp do
17239: LD_ADDR_VAR 0 1
17243: PUSH
17244: LD_VAR 0 2
17248: PUSH
17249: FOR_IN
17250: IFFALSE 17266
// SetLives ( i , 1 ) ;
17252: LD_VAR 0 1
17256: PPUSH
17257: LD_INT 1
17259: PPUSH
17260: CALL_OW 234
17264: GO 17249
17266: POP
17267: POP
// end ;
17268: PPOPN 2
17270: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17271: LD_EXP 26
17275: PUSH
17276: LD_EXP 75
17280: AND
17281: IFFALSE 17568
17283: GO 17285
17285: DISABLE
17286: LD_INT 0
17288: PPUSH
17289: PPUSH
17290: PPUSH
// begin i := rand ( 1 , 7 ) ;
17291: LD_ADDR_VAR 0 1
17295: PUSH
17296: LD_INT 1
17298: PPUSH
17299: LD_INT 7
17301: PPUSH
17302: CALL_OW 12
17306: ST_TO_ADDR
// case i of 1 :
17307: LD_VAR 0 1
17311: PUSH
17312: LD_INT 1
17314: DOUBLE
17315: EQUAL
17316: IFTRUE 17320
17318: GO 17330
17320: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17321: LD_STRING earthquake(getX(game), 0, 32)
17323: PPUSH
17324: CALL_OW 559
17328: GO 17568
17330: LD_INT 2
17332: DOUBLE
17333: EQUAL
17334: IFTRUE 17338
17336: GO 17352
17338: POP
// begin ToLua ( displayStucuk(); ) ;
17339: LD_STRING displayStucuk();
17341: PPUSH
17342: CALL_OW 559
// ResetFog ;
17346: CALL_OW 335
// end ; 3 :
17350: GO 17568
17352: LD_INT 3
17354: DOUBLE
17355: EQUAL
17356: IFTRUE 17360
17358: GO 17464
17360: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17361: LD_ADDR_VAR 0 2
17365: PUSH
17366: LD_INT 22
17368: PUSH
17369: LD_OWVAR 2
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: LD_INT 25
17380: PUSH
17381: LD_INT 1
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: PPUSH
17392: CALL_OW 69
17396: ST_TO_ADDR
// if not tmp then
17397: LD_VAR 0 2
17401: NOT
17402: IFFALSE 17406
// exit ;
17404: GO 17568
// un := tmp [ rand ( 1 , tmp ) ] ;
17406: LD_ADDR_VAR 0 3
17410: PUSH
17411: LD_VAR 0 2
17415: PUSH
17416: LD_INT 1
17418: PPUSH
17419: LD_VAR 0 2
17423: PPUSH
17424: CALL_OW 12
17428: ARRAY
17429: ST_TO_ADDR
// if Crawls ( un ) then
17430: LD_VAR 0 3
17434: PPUSH
17435: CALL_OW 318
17439: IFFALSE 17450
// ComWalk ( un ) ;
17441: LD_VAR 0 3
17445: PPUSH
17446: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17450: LD_VAR 0 3
17454: PPUSH
17455: LD_INT 8
17457: PPUSH
17458: CALL_OW 336
// end ; 4 :
17462: GO 17568
17464: LD_INT 4
17466: DOUBLE
17467: EQUAL
17468: IFTRUE 17472
17470: GO 17546
17472: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17473: LD_ADDR_VAR 0 2
17477: PUSH
17478: LD_INT 22
17480: PUSH
17481: LD_OWVAR 2
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PUSH
17490: LD_INT 30
17492: PUSH
17493: LD_INT 29
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PPUSH
17504: CALL_OW 69
17508: ST_TO_ADDR
// if not tmp then
17509: LD_VAR 0 2
17513: NOT
17514: IFFALSE 17518
// exit ;
17516: GO 17568
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17518: LD_VAR 0 2
17522: PUSH
17523: LD_INT 1
17525: ARRAY
17526: PPUSH
17527: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17531: LD_VAR 0 2
17535: PUSH
17536: LD_INT 1
17538: ARRAY
17539: PPUSH
17540: CALL_OW 65
// end ; 5 .. 7 :
17544: GO 17568
17546: LD_INT 5
17548: DOUBLE
17549: GREATEREQUAL
17550: IFFALSE 17558
17552: LD_INT 7
17554: DOUBLE
17555: LESSEQUAL
17556: IFTRUE 17560
17558: GO 17567
17560: POP
// StreamSibBomb ; end ;
17561: CALL 13805 0 0
17565: GO 17568
17567: POP
// end ;
17568: PPOPN 3
17570: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17571: LD_EXP 26
17575: PUSH
17576: LD_EXP 76
17580: AND
17581: IFFALSE 17737
17583: GO 17585
17585: DISABLE
17586: LD_INT 0
17588: PPUSH
17589: PPUSH
17590: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17591: LD_ADDR_VAR 0 2
17595: PUSH
17596: LD_INT 81
17598: PUSH
17599: LD_OWVAR 2
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 2
17610: PUSH
17611: LD_INT 21
17613: PUSH
17614: LD_INT 1
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: LD_INT 21
17623: PUSH
17624: LD_INT 2
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: LIST
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: PPUSH
17640: CALL_OW 69
17644: ST_TO_ADDR
// if not tmp then
17645: LD_VAR 0 2
17649: NOT
17650: IFFALSE 17654
// exit ;
17652: GO 17737
// p := 0 ;
17654: LD_ADDR_VAR 0 3
17658: PUSH
17659: LD_INT 0
17661: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17662: LD_INT 35
17664: PPUSH
17665: CALL_OW 67
// p := p + 1 ;
17669: LD_ADDR_VAR 0 3
17673: PUSH
17674: LD_VAR 0 3
17678: PUSH
17679: LD_INT 1
17681: PLUS
17682: ST_TO_ADDR
// for i in tmp do
17683: LD_ADDR_VAR 0 1
17687: PUSH
17688: LD_VAR 0 2
17692: PUSH
17693: FOR_IN
17694: IFFALSE 17725
// if GetLives ( i ) < 1000 then
17696: LD_VAR 0 1
17700: PPUSH
17701: CALL_OW 256
17705: PUSH
17706: LD_INT 1000
17708: LESS
17709: IFFALSE 17723
// SetLives ( i , 1000 ) ;
17711: LD_VAR 0 1
17715: PPUSH
17716: LD_INT 1000
17718: PPUSH
17719: CALL_OW 234
17723: GO 17693
17725: POP
17726: POP
// until p > 20 ;
17727: LD_VAR 0 3
17731: PUSH
17732: LD_INT 20
17734: GREATER
17735: IFFALSE 17662
// end ;
17737: PPOPN 3
17739: END
// every 0 0$1 trigger StreamModeActive and sTime do
17740: LD_EXP 26
17744: PUSH
17745: LD_EXP 77
17749: AND
17750: IFFALSE 17785
17752: GO 17754
17754: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17755: LD_INT 28
17757: PPUSH
17758: LD_OWVAR 2
17762: PPUSH
17763: LD_INT 2
17765: PPUSH
17766: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17770: LD_INT 30
17772: PPUSH
17773: LD_OWVAR 2
17777: PPUSH
17778: LD_INT 2
17780: PPUSH
17781: CALL_OW 322
// end ;
17785: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17786: LD_EXP 26
17790: PUSH
17791: LD_EXP 78
17795: AND
17796: IFFALSE 17917
17798: GO 17800
17800: DISABLE
17801: LD_INT 0
17803: PPUSH
17804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17805: LD_ADDR_VAR 0 2
17809: PUSH
17810: LD_INT 22
17812: PUSH
17813: LD_OWVAR 2
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PUSH
17822: LD_INT 21
17824: PUSH
17825: LD_INT 1
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PUSH
17832: LD_INT 3
17834: PUSH
17835: LD_INT 23
17837: PUSH
17838: LD_INT 0
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PUSH
17845: EMPTY
17846: LIST
17847: LIST
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: LIST
17853: PPUSH
17854: CALL_OW 69
17858: ST_TO_ADDR
// if not tmp then
17859: LD_VAR 0 2
17863: NOT
17864: IFFALSE 17868
// exit ;
17866: GO 17917
// for i in tmp do
17868: LD_ADDR_VAR 0 1
17872: PUSH
17873: LD_VAR 0 2
17877: PUSH
17878: FOR_IN
17879: IFFALSE 17915
// begin if Crawls ( i ) then
17881: LD_VAR 0 1
17885: PPUSH
17886: CALL_OW 318
17890: IFFALSE 17901
// ComWalk ( i ) ;
17892: LD_VAR 0 1
17896: PPUSH
17897: CALL_OW 138
// SetClass ( i , 2 ) ;
17901: LD_VAR 0 1
17905: PPUSH
17906: LD_INT 2
17908: PPUSH
17909: CALL_OW 336
// end ;
17913: GO 17878
17915: POP
17916: POP
// end ;
17917: PPOPN 2
17919: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17920: LD_EXP 26
17924: PUSH
17925: LD_EXP 79
17929: AND
17930: IFFALSE 18218
17932: GO 17934
17934: DISABLE
17935: LD_INT 0
17937: PPUSH
17938: PPUSH
17939: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17940: LD_OWVAR 2
17944: PPUSH
17945: LD_INT 9
17947: PPUSH
17948: LD_INT 1
17950: PPUSH
17951: LD_INT 1
17953: PPUSH
17954: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17958: LD_INT 9
17960: PPUSH
17961: LD_OWVAR 2
17965: PPUSH
17966: CALL_OW 343
// uc_side := 9 ;
17970: LD_ADDR_OWVAR 20
17974: PUSH
17975: LD_INT 9
17977: ST_TO_ADDR
// uc_nation := 2 ;
17978: LD_ADDR_OWVAR 21
17982: PUSH
17983: LD_INT 2
17985: ST_TO_ADDR
// hc_name := Dark Warrior ;
17986: LD_ADDR_OWVAR 26
17990: PUSH
17991: LD_STRING Dark Warrior
17993: ST_TO_ADDR
// hc_gallery :=  ;
17994: LD_ADDR_OWVAR 33
17998: PUSH
17999: LD_STRING 
18001: ST_TO_ADDR
// hc_noskilllimit := true ;
18002: LD_ADDR_OWVAR 76
18006: PUSH
18007: LD_INT 1
18009: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18010: LD_ADDR_OWVAR 31
18014: PUSH
18015: LD_INT 30
18017: PUSH
18018: LD_INT 30
18020: PUSH
18021: LD_INT 30
18023: PUSH
18024: LD_INT 30
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: ST_TO_ADDR
// un := CreateHuman ;
18033: LD_ADDR_VAR 0 3
18037: PUSH
18038: CALL_OW 44
18042: ST_TO_ADDR
// hc_noskilllimit := false ;
18043: LD_ADDR_OWVAR 76
18047: PUSH
18048: LD_INT 0
18050: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18051: LD_VAR 0 3
18055: PPUSH
18056: LD_INT 1
18058: PPUSH
18059: CALL_OW 51
// ToLua ( playRanger() ) ;
18063: LD_STRING playRanger()
18065: PPUSH
18066: CALL_OW 559
// p := 0 ;
18070: LD_ADDR_VAR 0 2
18074: PUSH
18075: LD_INT 0
18077: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18078: LD_INT 35
18080: PPUSH
18081: CALL_OW 67
// p := p + 1 ;
18085: LD_ADDR_VAR 0 2
18089: PUSH
18090: LD_VAR 0 2
18094: PUSH
18095: LD_INT 1
18097: PLUS
18098: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18099: LD_VAR 0 3
18103: PPUSH
18104: CALL_OW 256
18108: PUSH
18109: LD_INT 1000
18111: LESS
18112: IFFALSE 18126
// SetLives ( un , 1000 ) ;
18114: LD_VAR 0 3
18118: PPUSH
18119: LD_INT 1000
18121: PPUSH
18122: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18126: LD_VAR 0 3
18130: PPUSH
18131: LD_INT 81
18133: PUSH
18134: LD_OWVAR 2
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 91
18145: PUSH
18146: LD_VAR 0 3
18150: PUSH
18151: LD_INT 30
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: LIST
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PPUSH
18163: CALL_OW 69
18167: PPUSH
18168: LD_VAR 0 3
18172: PPUSH
18173: CALL_OW 74
18177: PPUSH
18178: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
18182: LD_VAR 0 2
18186: PUSH
18187: LD_INT 80
18189: GREATER
18190: PUSH
18191: LD_VAR 0 3
18195: PPUSH
18196: CALL_OW 301
18200: OR
18201: IFFALSE 18078
// if un then
18203: LD_VAR 0 3
18207: IFFALSE 18218
// RemoveUnit ( un ) ;
18209: LD_VAR 0 3
18213: PPUSH
18214: CALL_OW 64
// end ;
18218: PPOPN 3
18220: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
18221: LD_EXP 80
18225: IFFALSE 18341
18227: GO 18229
18229: DISABLE
18230: LD_INT 0
18232: PPUSH
18233: PPUSH
18234: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18235: LD_ADDR_VAR 0 2
18239: PUSH
18240: LD_INT 81
18242: PUSH
18243: LD_OWVAR 2
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: PUSH
18252: LD_INT 21
18254: PUSH
18255: LD_INT 1
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: PUSH
18262: EMPTY
18263: LIST
18264: LIST
18265: PPUSH
18266: CALL_OW 69
18270: ST_TO_ADDR
// ToLua ( playComputer() ) ;
18271: LD_STRING playComputer()
18273: PPUSH
18274: CALL_OW 559
// if not tmp then
18278: LD_VAR 0 2
18282: NOT
18283: IFFALSE 18287
// exit ;
18285: GO 18341
// for i in tmp do
18287: LD_ADDR_VAR 0 1
18291: PUSH
18292: LD_VAR 0 2
18296: PUSH
18297: FOR_IN
18298: IFFALSE 18339
// for j := 1 to 4 do
18300: LD_ADDR_VAR 0 3
18304: PUSH
18305: DOUBLE
18306: LD_INT 1
18308: DEC
18309: ST_TO_ADDR
18310: LD_INT 4
18312: PUSH
18313: FOR_TO
18314: IFFALSE 18335
// SetSkill ( i , j , 10 ) ;
18316: LD_VAR 0 1
18320: PPUSH
18321: LD_VAR 0 3
18325: PPUSH
18326: LD_INT 10
18328: PPUSH
18329: CALL_OW 237
18333: GO 18313
18335: POP
18336: POP
18337: GO 18297
18339: POP
18340: POP
// end ;
18341: PPOPN 3
18343: END
// every 0 0$1 trigger s30 do var i , tmp ;
18344: LD_EXP 81
18348: IFFALSE 18417
18350: GO 18352
18352: DISABLE
18353: LD_INT 0
18355: PPUSH
18356: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18357: LD_ADDR_VAR 0 2
18361: PUSH
18362: LD_INT 22
18364: PUSH
18365: LD_OWVAR 2
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PPUSH
18374: CALL_OW 69
18378: ST_TO_ADDR
// if not tmp then
18379: LD_VAR 0 2
18383: NOT
18384: IFFALSE 18388
// exit ;
18386: GO 18417
// for i in tmp do
18388: LD_ADDR_VAR 0 1
18392: PUSH
18393: LD_VAR 0 2
18397: PUSH
18398: FOR_IN
18399: IFFALSE 18415
// SetLives ( i , 300 ) ;
18401: LD_VAR 0 1
18405: PPUSH
18406: LD_INT 300
18408: PPUSH
18409: CALL_OW 234
18413: GO 18398
18415: POP
18416: POP
// end ;
18417: PPOPN 2
18419: END
// every 0 0$1 trigger s60 do var i , tmp ;
18420: LD_EXP 82
18424: IFFALSE 18493
18426: GO 18428
18428: DISABLE
18429: LD_INT 0
18431: PPUSH
18432: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18433: LD_ADDR_VAR 0 2
18437: PUSH
18438: LD_INT 22
18440: PUSH
18441: LD_OWVAR 2
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PPUSH
18450: CALL_OW 69
18454: ST_TO_ADDR
// if not tmp then
18455: LD_VAR 0 2
18459: NOT
18460: IFFALSE 18464
// exit ;
18462: GO 18493
// for i in tmp do
18464: LD_ADDR_VAR 0 1
18468: PUSH
18469: LD_VAR 0 2
18473: PUSH
18474: FOR_IN
18475: IFFALSE 18491
// SetLives ( i , 600 ) ;
18477: LD_VAR 0 1
18481: PPUSH
18482: LD_INT 600
18484: PPUSH
18485: CALL_OW 234
18489: GO 18474
18491: POP
18492: POP
// end ;
18493: PPOPN 2
18495: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18496: LD_INT 0
18498: PPUSH
// case cmd of 301 :
18499: LD_VAR 0 1
18503: PUSH
18504: LD_INT 301
18506: DOUBLE
18507: EQUAL
18508: IFTRUE 18512
18510: GO 18544
18512: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18513: LD_VAR 0 6
18517: PPUSH
18518: LD_VAR 0 7
18522: PPUSH
18523: LD_VAR 0 8
18527: PPUSH
18528: LD_VAR 0 4
18532: PPUSH
18533: LD_VAR 0 5
18537: PPUSH
18538: CALL 19753 0 5
18542: GO 18665
18544: LD_INT 302
18546: DOUBLE
18547: EQUAL
18548: IFTRUE 18552
18550: GO 18589
18552: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18553: LD_VAR 0 6
18557: PPUSH
18558: LD_VAR 0 7
18562: PPUSH
18563: LD_VAR 0 8
18567: PPUSH
18568: LD_VAR 0 9
18572: PPUSH
18573: LD_VAR 0 4
18577: PPUSH
18578: LD_VAR 0 5
18582: PPUSH
18583: CALL 19844 0 6
18587: GO 18665
18589: LD_INT 303
18591: DOUBLE
18592: EQUAL
18593: IFTRUE 18597
18595: GO 18634
18597: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18598: LD_VAR 0 6
18602: PPUSH
18603: LD_VAR 0 7
18607: PPUSH
18608: LD_VAR 0 8
18612: PPUSH
18613: LD_VAR 0 9
18617: PPUSH
18618: LD_VAR 0 4
18622: PPUSH
18623: LD_VAR 0 5
18627: PPUSH
18628: CALL 18670 0 6
18632: GO 18665
18634: LD_INT 304
18636: DOUBLE
18637: EQUAL
18638: IFTRUE 18642
18640: GO 18664
18642: POP
// hHackTeleport ( unit , x , y ) ; end ;
18643: LD_VAR 0 2
18647: PPUSH
18648: LD_VAR 0 4
18652: PPUSH
18653: LD_VAR 0 5
18657: PPUSH
18658: CALL 20437 0 3
18662: GO 18665
18664: POP
// end ;
18665: LD_VAR 0 12
18669: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18670: LD_INT 0
18672: PPUSH
18673: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18674: LD_VAR 0 1
18678: PUSH
18679: LD_INT 1
18681: LESS
18682: PUSH
18683: LD_VAR 0 1
18687: PUSH
18688: LD_INT 3
18690: GREATER
18691: OR
18692: PUSH
18693: LD_VAR 0 5
18697: PPUSH
18698: LD_VAR 0 6
18702: PPUSH
18703: CALL_OW 428
18707: OR
18708: IFFALSE 18712
// exit ;
18710: GO 19440
// uc_side := your_side ;
18712: LD_ADDR_OWVAR 20
18716: PUSH
18717: LD_OWVAR 2
18721: ST_TO_ADDR
// uc_nation := nation ;
18722: LD_ADDR_OWVAR 21
18726: PUSH
18727: LD_VAR 0 1
18731: ST_TO_ADDR
// bc_level = 1 ;
18732: LD_ADDR_OWVAR 43
18736: PUSH
18737: LD_INT 1
18739: ST_TO_ADDR
// case btype of 1 :
18740: LD_VAR 0 2
18744: PUSH
18745: LD_INT 1
18747: DOUBLE
18748: EQUAL
18749: IFTRUE 18753
18751: GO 18764
18753: POP
// bc_type := b_depot ; 2 :
18754: LD_ADDR_OWVAR 42
18758: PUSH
18759: LD_INT 0
18761: ST_TO_ADDR
18762: GO 19384
18764: LD_INT 2
18766: DOUBLE
18767: EQUAL
18768: IFTRUE 18772
18770: GO 18783
18772: POP
// bc_type := b_warehouse ; 3 :
18773: LD_ADDR_OWVAR 42
18777: PUSH
18778: LD_INT 1
18780: ST_TO_ADDR
18781: GO 19384
18783: LD_INT 3
18785: DOUBLE
18786: EQUAL
18787: IFTRUE 18791
18789: GO 18802
18791: POP
// bc_type := b_lab ; 4 .. 9 :
18792: LD_ADDR_OWVAR 42
18796: PUSH
18797: LD_INT 6
18799: ST_TO_ADDR
18800: GO 19384
18802: LD_INT 4
18804: DOUBLE
18805: GREATEREQUAL
18806: IFFALSE 18814
18808: LD_INT 9
18810: DOUBLE
18811: LESSEQUAL
18812: IFTRUE 18816
18814: GO 18876
18816: POP
// begin bc_type := b_lab_half ;
18817: LD_ADDR_OWVAR 42
18821: PUSH
18822: LD_INT 7
18824: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18825: LD_ADDR_OWVAR 44
18829: PUSH
18830: LD_INT 10
18832: PUSH
18833: LD_INT 11
18835: PUSH
18836: LD_INT 12
18838: PUSH
18839: LD_INT 15
18841: PUSH
18842: LD_INT 14
18844: PUSH
18845: LD_INT 13
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: PUSH
18856: LD_VAR 0 2
18860: PUSH
18861: LD_INT 3
18863: MINUS
18864: ARRAY
18865: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
18866: LD_ADDR_OWVAR 45
18870: PUSH
18871: LD_INT 9
18873: ST_TO_ADDR
// end ; 10 .. 13 :
18874: GO 19384
18876: LD_INT 10
18878: DOUBLE
18879: GREATEREQUAL
18880: IFFALSE 18888
18882: LD_INT 13
18884: DOUBLE
18885: LESSEQUAL
18886: IFTRUE 18890
18888: GO 18967
18890: POP
// begin bc_type := b_lab_full ;
18891: LD_ADDR_OWVAR 42
18895: PUSH
18896: LD_INT 8
18898: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18899: LD_ADDR_OWVAR 44
18903: PUSH
18904: LD_INT 10
18906: PUSH
18907: LD_INT 12
18909: PUSH
18910: LD_INT 14
18912: PUSH
18913: LD_INT 13
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: PUSH
18922: LD_VAR 0 2
18926: PUSH
18927: LD_INT 9
18929: MINUS
18930: ARRAY
18931: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18932: LD_ADDR_OWVAR 45
18936: PUSH
18937: LD_INT 11
18939: PUSH
18940: LD_INT 15
18942: PUSH
18943: LD_INT 12
18945: PUSH
18946: LD_INT 15
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: PUSH
18955: LD_VAR 0 2
18959: PUSH
18960: LD_INT 9
18962: MINUS
18963: ARRAY
18964: ST_TO_ADDR
// end ; 14 :
18965: GO 19384
18967: LD_INT 14
18969: DOUBLE
18970: EQUAL
18971: IFTRUE 18975
18973: GO 18986
18975: POP
// bc_type := b_workshop ; 15 :
18976: LD_ADDR_OWVAR 42
18980: PUSH
18981: LD_INT 2
18983: ST_TO_ADDR
18984: GO 19384
18986: LD_INT 15
18988: DOUBLE
18989: EQUAL
18990: IFTRUE 18994
18992: GO 19005
18994: POP
// bc_type := b_factory ; 16 :
18995: LD_ADDR_OWVAR 42
18999: PUSH
19000: LD_INT 3
19002: ST_TO_ADDR
19003: GO 19384
19005: LD_INT 16
19007: DOUBLE
19008: EQUAL
19009: IFTRUE 19013
19011: GO 19024
19013: POP
// bc_type := b_ext_gun ; 17 :
19014: LD_ADDR_OWVAR 42
19018: PUSH
19019: LD_INT 17
19021: ST_TO_ADDR
19022: GO 19384
19024: LD_INT 17
19026: DOUBLE
19027: EQUAL
19028: IFTRUE 19032
19030: GO 19060
19032: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19033: LD_ADDR_OWVAR 42
19037: PUSH
19038: LD_INT 19
19040: PUSH
19041: LD_INT 23
19043: PUSH
19044: LD_INT 19
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: LIST
19051: PUSH
19052: LD_VAR 0 1
19056: ARRAY
19057: ST_TO_ADDR
19058: GO 19384
19060: LD_INT 18
19062: DOUBLE
19063: EQUAL
19064: IFTRUE 19068
19066: GO 19079
19068: POP
// bc_type := b_ext_radar ; 19 :
19069: LD_ADDR_OWVAR 42
19073: PUSH
19074: LD_INT 20
19076: ST_TO_ADDR
19077: GO 19384
19079: LD_INT 19
19081: DOUBLE
19082: EQUAL
19083: IFTRUE 19087
19085: GO 19098
19087: POP
// bc_type := b_ext_radio ; 20 :
19088: LD_ADDR_OWVAR 42
19092: PUSH
19093: LD_INT 22
19095: ST_TO_ADDR
19096: GO 19384
19098: LD_INT 20
19100: DOUBLE
19101: EQUAL
19102: IFTRUE 19106
19104: GO 19117
19106: POP
// bc_type := b_ext_siberium ; 21 :
19107: LD_ADDR_OWVAR 42
19111: PUSH
19112: LD_INT 21
19114: ST_TO_ADDR
19115: GO 19384
19117: LD_INT 21
19119: DOUBLE
19120: EQUAL
19121: IFTRUE 19125
19123: GO 19136
19125: POP
// bc_type := b_ext_computer ; 22 :
19126: LD_ADDR_OWVAR 42
19130: PUSH
19131: LD_INT 24
19133: ST_TO_ADDR
19134: GO 19384
19136: LD_INT 22
19138: DOUBLE
19139: EQUAL
19140: IFTRUE 19144
19142: GO 19155
19144: POP
// bc_type := b_ext_track ; 23 :
19145: LD_ADDR_OWVAR 42
19149: PUSH
19150: LD_INT 16
19152: ST_TO_ADDR
19153: GO 19384
19155: LD_INT 23
19157: DOUBLE
19158: EQUAL
19159: IFTRUE 19163
19161: GO 19174
19163: POP
// bc_type := b_ext_laser ; 24 :
19164: LD_ADDR_OWVAR 42
19168: PUSH
19169: LD_INT 25
19171: ST_TO_ADDR
19172: GO 19384
19174: LD_INT 24
19176: DOUBLE
19177: EQUAL
19178: IFTRUE 19182
19180: GO 19193
19182: POP
// bc_type := b_control_tower ; 25 :
19183: LD_ADDR_OWVAR 42
19187: PUSH
19188: LD_INT 36
19190: ST_TO_ADDR
19191: GO 19384
19193: LD_INT 25
19195: DOUBLE
19196: EQUAL
19197: IFTRUE 19201
19199: GO 19212
19201: POP
// bc_type := b_breastwork ; 26 :
19202: LD_ADDR_OWVAR 42
19206: PUSH
19207: LD_INT 31
19209: ST_TO_ADDR
19210: GO 19384
19212: LD_INT 26
19214: DOUBLE
19215: EQUAL
19216: IFTRUE 19220
19218: GO 19231
19220: POP
// bc_type := b_bunker ; 27 :
19221: LD_ADDR_OWVAR 42
19225: PUSH
19226: LD_INT 32
19228: ST_TO_ADDR
19229: GO 19384
19231: LD_INT 27
19233: DOUBLE
19234: EQUAL
19235: IFTRUE 19239
19237: GO 19250
19239: POP
// bc_type := b_turret ; 28 :
19240: LD_ADDR_OWVAR 42
19244: PUSH
19245: LD_INT 33
19247: ST_TO_ADDR
19248: GO 19384
19250: LD_INT 28
19252: DOUBLE
19253: EQUAL
19254: IFTRUE 19258
19256: GO 19269
19258: POP
// bc_type := b_armoury ; 29 :
19259: LD_ADDR_OWVAR 42
19263: PUSH
19264: LD_INT 4
19266: ST_TO_ADDR
19267: GO 19384
19269: LD_INT 29
19271: DOUBLE
19272: EQUAL
19273: IFTRUE 19277
19275: GO 19288
19277: POP
// bc_type := b_barracks ; 30 :
19278: LD_ADDR_OWVAR 42
19282: PUSH
19283: LD_INT 5
19285: ST_TO_ADDR
19286: GO 19384
19288: LD_INT 30
19290: DOUBLE
19291: EQUAL
19292: IFTRUE 19296
19294: GO 19307
19296: POP
// bc_type := b_solar_power ; 31 :
19297: LD_ADDR_OWVAR 42
19301: PUSH
19302: LD_INT 27
19304: ST_TO_ADDR
19305: GO 19384
19307: LD_INT 31
19309: DOUBLE
19310: EQUAL
19311: IFTRUE 19315
19313: GO 19326
19315: POP
// bc_type := b_oil_power ; 32 :
19316: LD_ADDR_OWVAR 42
19320: PUSH
19321: LD_INT 26
19323: ST_TO_ADDR
19324: GO 19384
19326: LD_INT 32
19328: DOUBLE
19329: EQUAL
19330: IFTRUE 19334
19332: GO 19345
19334: POP
// bc_type := b_siberite_power ; 33 :
19335: LD_ADDR_OWVAR 42
19339: PUSH
19340: LD_INT 28
19342: ST_TO_ADDR
19343: GO 19384
19345: LD_INT 33
19347: DOUBLE
19348: EQUAL
19349: IFTRUE 19353
19351: GO 19364
19353: POP
// bc_type := b_oil_mine ; 34 :
19354: LD_ADDR_OWVAR 42
19358: PUSH
19359: LD_INT 29
19361: ST_TO_ADDR
19362: GO 19384
19364: LD_INT 34
19366: DOUBLE
19367: EQUAL
19368: IFTRUE 19372
19370: GO 19383
19372: POP
// bc_type := b_siberite_mine ; end ;
19373: LD_ADDR_OWVAR 42
19377: PUSH
19378: LD_INT 30
19380: ST_TO_ADDR
19381: GO 19384
19383: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19384: LD_ADDR_VAR 0 8
19388: PUSH
19389: LD_VAR 0 5
19393: PPUSH
19394: LD_VAR 0 6
19398: PPUSH
19399: LD_VAR 0 3
19403: PPUSH
19404: CALL_OW 47
19408: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19409: LD_OWVAR 42
19413: PUSH
19414: LD_INT 32
19416: PUSH
19417: LD_INT 33
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: IN
19424: IFFALSE 19440
// PlaceWeaponTurret ( b , weapon ) ;
19426: LD_VAR 0 8
19430: PPUSH
19431: LD_VAR 0 4
19435: PPUSH
19436: CALL_OW 431
// end ;
19440: LD_VAR 0 7
19444: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19445: LD_INT 0
19447: PPUSH
19448: PPUSH
19449: PPUSH
19450: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19451: LD_ADDR_VAR 0 4
19455: PUSH
19456: LD_INT 22
19458: PUSH
19459: LD_OWVAR 2
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 2
19470: PUSH
19471: LD_INT 30
19473: PUSH
19474: LD_INT 0
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: LD_INT 30
19483: PUSH
19484: LD_INT 1
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: LIST
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PPUSH
19500: CALL_OW 69
19504: ST_TO_ADDR
// if not tmp then
19505: LD_VAR 0 4
19509: NOT
19510: IFFALSE 19514
// exit ;
19512: GO 19573
// for i in tmp do
19514: LD_ADDR_VAR 0 2
19518: PUSH
19519: LD_VAR 0 4
19523: PUSH
19524: FOR_IN
19525: IFFALSE 19571
// for j = 1 to 3 do
19527: LD_ADDR_VAR 0 3
19531: PUSH
19532: DOUBLE
19533: LD_INT 1
19535: DEC
19536: ST_TO_ADDR
19537: LD_INT 3
19539: PUSH
19540: FOR_TO
19541: IFFALSE 19567
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19543: LD_VAR 0 2
19547: PPUSH
19548: CALL_OW 274
19552: PPUSH
19553: LD_VAR 0 3
19557: PPUSH
19558: LD_INT 99999
19560: PPUSH
19561: CALL_OW 277
19565: GO 19540
19567: POP
19568: POP
19569: GO 19524
19571: POP
19572: POP
// end ;
19573: LD_VAR 0 1
19577: RET
// export function hHackSetLevel10 ; var i , j ; begin
19578: LD_INT 0
19580: PPUSH
19581: PPUSH
19582: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19583: LD_ADDR_VAR 0 2
19587: PUSH
19588: LD_INT 21
19590: PUSH
19591: LD_INT 1
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PPUSH
19598: CALL_OW 69
19602: PUSH
19603: FOR_IN
19604: IFFALSE 19656
// if IsSelected ( i ) then
19606: LD_VAR 0 2
19610: PPUSH
19611: CALL_OW 306
19615: IFFALSE 19654
// begin for j := 1 to 4 do
19617: LD_ADDR_VAR 0 3
19621: PUSH
19622: DOUBLE
19623: LD_INT 1
19625: DEC
19626: ST_TO_ADDR
19627: LD_INT 4
19629: PUSH
19630: FOR_TO
19631: IFFALSE 19652
// SetSkill ( i , j , 10 ) ;
19633: LD_VAR 0 2
19637: PPUSH
19638: LD_VAR 0 3
19642: PPUSH
19643: LD_INT 10
19645: PPUSH
19646: CALL_OW 237
19650: GO 19630
19652: POP
19653: POP
// end ;
19654: GO 19603
19656: POP
19657: POP
// end ;
19658: LD_VAR 0 1
19662: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19663: LD_INT 0
19665: PPUSH
19666: PPUSH
19667: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19668: LD_ADDR_VAR 0 2
19672: PUSH
19673: LD_INT 22
19675: PUSH
19676: LD_OWVAR 2
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 21
19687: PUSH
19688: LD_INT 1
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: PPUSH
19699: CALL_OW 69
19703: PUSH
19704: FOR_IN
19705: IFFALSE 19746
// begin for j := 1 to 4 do
19707: LD_ADDR_VAR 0 3
19711: PUSH
19712: DOUBLE
19713: LD_INT 1
19715: DEC
19716: ST_TO_ADDR
19717: LD_INT 4
19719: PUSH
19720: FOR_TO
19721: IFFALSE 19742
// SetSkill ( i , j , 10 ) ;
19723: LD_VAR 0 2
19727: PPUSH
19728: LD_VAR 0 3
19732: PPUSH
19733: LD_INT 10
19735: PPUSH
19736: CALL_OW 237
19740: GO 19720
19742: POP
19743: POP
// end ;
19744: GO 19704
19746: POP
19747: POP
// end ;
19748: LD_VAR 0 1
19752: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19753: LD_INT 0
19755: PPUSH
// uc_side := your_side ;
19756: LD_ADDR_OWVAR 20
19760: PUSH
19761: LD_OWVAR 2
19765: ST_TO_ADDR
// uc_nation := nation ;
19766: LD_ADDR_OWVAR 21
19770: PUSH
19771: LD_VAR 0 1
19775: ST_TO_ADDR
// InitHc ;
19776: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19780: LD_INT 0
19782: PPUSH
19783: LD_VAR 0 2
19787: PPUSH
19788: LD_VAR 0 3
19792: PPUSH
19793: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19797: LD_VAR 0 4
19801: PPUSH
19802: LD_VAR 0 5
19806: PPUSH
19807: CALL_OW 428
19811: PUSH
19812: LD_INT 0
19814: EQUAL
19815: IFFALSE 19839
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19817: CALL_OW 44
19821: PPUSH
19822: LD_VAR 0 4
19826: PPUSH
19827: LD_VAR 0 5
19831: PPUSH
19832: LD_INT 1
19834: PPUSH
19835: CALL_OW 48
// end ;
19839: LD_VAR 0 6
19843: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19844: LD_INT 0
19846: PPUSH
19847: PPUSH
// uc_side := your_side ;
19848: LD_ADDR_OWVAR 20
19852: PUSH
19853: LD_OWVAR 2
19857: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19858: LD_VAR 0 1
19862: PUSH
19863: LD_INT 1
19865: PUSH
19866: LD_INT 2
19868: PUSH
19869: LD_INT 3
19871: PUSH
19872: LD_INT 4
19874: PUSH
19875: LD_INT 5
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: IN
19885: IFFALSE 19897
// uc_nation := nation_american else
19887: LD_ADDR_OWVAR 21
19891: PUSH
19892: LD_INT 1
19894: ST_TO_ADDR
19895: GO 19940
// if chassis in [ 11 , 12 , 13 , 14 ] then
19897: LD_VAR 0 1
19901: PUSH
19902: LD_INT 11
19904: PUSH
19905: LD_INT 12
19907: PUSH
19908: LD_INT 13
19910: PUSH
19911: LD_INT 14
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: IN
19920: IFFALSE 19932
// uc_nation := nation_arabian else
19922: LD_ADDR_OWVAR 21
19926: PUSH
19927: LD_INT 2
19929: ST_TO_ADDR
19930: GO 19940
// uc_nation := nation_russian ;
19932: LD_ADDR_OWVAR 21
19936: PUSH
19937: LD_INT 3
19939: ST_TO_ADDR
// vc_chassis := chassis ;
19940: LD_ADDR_OWVAR 37
19944: PUSH
19945: LD_VAR 0 1
19949: ST_TO_ADDR
// vc_engine := engine ;
19950: LD_ADDR_OWVAR 39
19954: PUSH
19955: LD_VAR 0 2
19959: ST_TO_ADDR
// vc_control := control ;
19960: LD_ADDR_OWVAR 38
19964: PUSH
19965: LD_VAR 0 3
19969: ST_TO_ADDR
// vc_weapon := weapon ;
19970: LD_ADDR_OWVAR 40
19974: PUSH
19975: LD_VAR 0 4
19979: ST_TO_ADDR
// un := CreateVehicle ;
19980: LD_ADDR_VAR 0 8
19984: PUSH
19985: CALL_OW 45
19989: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19990: LD_VAR 0 8
19994: PPUSH
19995: LD_INT 0
19997: PPUSH
19998: LD_INT 5
20000: PPUSH
20001: CALL_OW 12
20005: PPUSH
20006: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20010: LD_VAR 0 8
20014: PPUSH
20015: LD_VAR 0 5
20019: PPUSH
20020: LD_VAR 0 6
20024: PPUSH
20025: LD_INT 1
20027: PPUSH
20028: CALL_OW 48
// end ;
20032: LD_VAR 0 7
20036: RET
// export hInvincible ; every 1 do
20037: GO 20039
20039: DISABLE
// hInvincible := [ ] ;
20040: LD_ADDR_EXP 83
20044: PUSH
20045: EMPTY
20046: ST_TO_ADDR
20047: END
// every 10 do var i ;
20048: GO 20050
20050: DISABLE
20051: LD_INT 0
20053: PPUSH
// begin enable ;
20054: ENABLE
// if not hInvincible then
20055: LD_EXP 83
20059: NOT
20060: IFFALSE 20064
// exit ;
20062: GO 20108
// for i in hInvincible do
20064: LD_ADDR_VAR 0 1
20068: PUSH
20069: LD_EXP 83
20073: PUSH
20074: FOR_IN
20075: IFFALSE 20106
// if GetLives ( i ) < 1000 then
20077: LD_VAR 0 1
20081: PPUSH
20082: CALL_OW 256
20086: PUSH
20087: LD_INT 1000
20089: LESS
20090: IFFALSE 20104
// SetLives ( i , 1000 ) ;
20092: LD_VAR 0 1
20096: PPUSH
20097: LD_INT 1000
20099: PPUSH
20100: CALL_OW 234
20104: GO 20074
20106: POP
20107: POP
// end ;
20108: PPOPN 1
20110: END
// export function hHackInvincible ; var i ; begin
20111: LD_INT 0
20113: PPUSH
20114: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20115: LD_ADDR_VAR 0 2
20119: PUSH
20120: LD_INT 2
20122: PUSH
20123: LD_INT 21
20125: PUSH
20126: LD_INT 1
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: PUSH
20133: LD_INT 21
20135: PUSH
20136: LD_INT 2
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: LIST
20147: PPUSH
20148: CALL_OW 69
20152: PUSH
20153: FOR_IN
20154: IFFALSE 20215
// if IsSelected ( i ) then
20156: LD_VAR 0 2
20160: PPUSH
20161: CALL_OW 306
20165: IFFALSE 20213
// begin if i in hInvincible then
20167: LD_VAR 0 2
20171: PUSH
20172: LD_EXP 83
20176: IN
20177: IFFALSE 20197
// hInvincible := hInvincible diff i else
20179: LD_ADDR_EXP 83
20183: PUSH
20184: LD_EXP 83
20188: PUSH
20189: LD_VAR 0 2
20193: DIFF
20194: ST_TO_ADDR
20195: GO 20213
// hInvincible := hInvincible union i ;
20197: LD_ADDR_EXP 83
20201: PUSH
20202: LD_EXP 83
20206: PUSH
20207: LD_VAR 0 2
20211: UNION
20212: ST_TO_ADDR
// end ;
20213: GO 20153
20215: POP
20216: POP
// end ;
20217: LD_VAR 0 1
20221: RET
// export function hHackInvisible ; var i , j ; begin
20222: LD_INT 0
20224: PPUSH
20225: PPUSH
20226: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20227: LD_ADDR_VAR 0 2
20231: PUSH
20232: LD_INT 21
20234: PUSH
20235: LD_INT 1
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PPUSH
20242: CALL_OW 69
20246: PUSH
20247: FOR_IN
20248: IFFALSE 20272
// if IsSelected ( i ) then
20250: LD_VAR 0 2
20254: PPUSH
20255: CALL_OW 306
20259: IFFALSE 20270
// ComForceInvisible ( i ) ;
20261: LD_VAR 0 2
20265: PPUSH
20266: CALL_OW 496
20270: GO 20247
20272: POP
20273: POP
// end ;
20274: LD_VAR 0 1
20278: RET
// export function hHackChangeYourSide ; begin
20279: LD_INT 0
20281: PPUSH
// if your_side = 8 then
20282: LD_OWVAR 2
20286: PUSH
20287: LD_INT 8
20289: EQUAL
20290: IFFALSE 20302
// your_side := 0 else
20292: LD_ADDR_OWVAR 2
20296: PUSH
20297: LD_INT 0
20299: ST_TO_ADDR
20300: GO 20316
// your_side := your_side + 1 ;
20302: LD_ADDR_OWVAR 2
20306: PUSH
20307: LD_OWVAR 2
20311: PUSH
20312: LD_INT 1
20314: PLUS
20315: ST_TO_ADDR
// end ;
20316: LD_VAR 0 1
20320: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20321: LD_INT 0
20323: PPUSH
20324: PPUSH
20325: PPUSH
// for i in all_units do
20326: LD_ADDR_VAR 0 2
20330: PUSH
20331: LD_OWVAR 3
20335: PUSH
20336: FOR_IN
20337: IFFALSE 20415
// if IsSelected ( i ) then
20339: LD_VAR 0 2
20343: PPUSH
20344: CALL_OW 306
20348: IFFALSE 20413
// begin j := GetSide ( i ) ;
20350: LD_ADDR_VAR 0 3
20354: PUSH
20355: LD_VAR 0 2
20359: PPUSH
20360: CALL_OW 255
20364: ST_TO_ADDR
// if j = 8 then
20365: LD_VAR 0 3
20369: PUSH
20370: LD_INT 8
20372: EQUAL
20373: IFFALSE 20385
// j := 0 else
20375: LD_ADDR_VAR 0 3
20379: PUSH
20380: LD_INT 0
20382: ST_TO_ADDR
20383: GO 20399
// j := j + 1 ;
20385: LD_ADDR_VAR 0 3
20389: PUSH
20390: LD_VAR 0 3
20394: PUSH
20395: LD_INT 1
20397: PLUS
20398: ST_TO_ADDR
// SetSide ( i , j ) ;
20399: LD_VAR 0 2
20403: PPUSH
20404: LD_VAR 0 3
20408: PPUSH
20409: CALL_OW 235
// end ;
20413: GO 20336
20415: POP
20416: POP
// end ;
20417: LD_VAR 0 1
20421: RET
// export function hHackFog ; begin
20422: LD_INT 0
20424: PPUSH
// FogOff ( true ) ;
20425: LD_INT 1
20427: PPUSH
20428: CALL_OW 344
// end ;
20432: LD_VAR 0 1
20436: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20437: LD_INT 0
20439: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20440: LD_VAR 0 1
20444: PPUSH
20445: LD_VAR 0 2
20449: PPUSH
20450: LD_VAR 0 3
20454: PPUSH
20455: LD_INT 1
20457: PPUSH
20458: LD_INT 1
20460: PPUSH
20461: CALL_OW 483
// CenterOnXY ( x , y ) ;
20465: LD_VAR 0 2
20469: PPUSH
20470: LD_VAR 0 3
20474: PPUSH
20475: CALL_OW 84
// end ;
20479: LD_VAR 0 4
20483: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
20484: LD_INT 0
20486: PPUSH
20487: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
20488: LD_VAR 0 1
20492: NOT
20493: PUSH
20494: LD_VAR 0 2
20498: PPUSH
20499: LD_VAR 0 3
20503: PPUSH
20504: CALL_OW 488
20508: NOT
20509: OR
20510: PUSH
20511: LD_VAR 0 1
20515: PPUSH
20516: CALL_OW 266
20520: PUSH
20521: LD_INT 3
20523: NONEQUAL
20524: PUSH
20525: LD_VAR 0 1
20529: PPUSH
20530: CALL_OW 247
20534: PUSH
20535: LD_INT 1
20537: EQUAL
20538: NOT
20539: AND
20540: OR
20541: IFFALSE 20545
// exit ;
20543: GO 20827
// if GetType ( factory ) = unit_human then
20545: LD_VAR 0 1
20549: PPUSH
20550: CALL_OW 247
20554: PUSH
20555: LD_INT 1
20557: EQUAL
20558: IFFALSE 20575
// factory := IsInUnit ( factory ) ;
20560: LD_ADDR_VAR 0 1
20564: PUSH
20565: LD_VAR 0 1
20569: PPUSH
20570: CALL_OW 310
20574: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20575: LD_VAR 0 1
20579: PPUSH
20580: CALL_OW 266
20584: PUSH
20585: LD_INT 3
20587: NONEQUAL
20588: IFFALSE 20592
// exit ;
20590: GO 20827
// for i := 1 to Count ( factoryWaypoints ) do
20592: LD_ADDR_VAR 0 5
20596: PUSH
20597: DOUBLE
20598: LD_INT 1
20600: DEC
20601: ST_TO_ADDR
20602: LD_EXP 84
20606: PPUSH
20607: CALL 29473 0 1
20611: PUSH
20612: FOR_TO
20613: IFFALSE 20775
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
20615: LD_VAR 0 2
20619: PPUSH
20620: LD_VAR 0 3
20624: PPUSH
20625: CALL_OW 428
20629: PUSH
20630: LD_EXP 84
20634: PUSH
20635: LD_VAR 0 5
20639: ARRAY
20640: PUSH
20641: LD_INT 2
20643: ARRAY
20644: EQUAL
20645: IFFALSE 20677
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
20647: LD_ADDR_EXP 84
20651: PUSH
20652: LD_EXP 84
20656: PPUSH
20657: LD_VAR 0 5
20661: PPUSH
20662: CALL_OW 3
20666: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20667: CALL 20832 0 0
// exit ;
20671: POP
20672: POP
20673: GO 20827
// end else
20675: GO 20773
// if factory = factoryWaypoints [ i ] [ 2 ] then
20677: LD_VAR 0 1
20681: PUSH
20682: LD_EXP 84
20686: PUSH
20687: LD_VAR 0 5
20691: ARRAY
20692: PUSH
20693: LD_INT 2
20695: ARRAY
20696: EQUAL
20697: IFFALSE 20773
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
20699: LD_ADDR_EXP 84
20703: PUSH
20704: LD_EXP 84
20708: PPUSH
20709: LD_VAR 0 5
20713: PPUSH
20714: CALL_OW 3
20718: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
20719: LD_ADDR_EXP 84
20723: PUSH
20724: LD_EXP 84
20728: PPUSH
20729: LD_VAR 0 1
20733: PPUSH
20734: CALL_OW 255
20738: PUSH
20739: LD_VAR 0 1
20743: PUSH
20744: LD_VAR 0 2
20748: PUSH
20749: LD_VAR 0 3
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: PPUSH
20760: CALL 65223 0 2
20764: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20765: CALL 20832 0 0
// exit ;
20769: POP
20770: POP
20771: GO 20827
// end ; end ;
20773: GO 20612
20775: POP
20776: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
20777: LD_ADDR_EXP 84
20781: PUSH
20782: LD_EXP 84
20786: PPUSH
20787: LD_VAR 0 1
20791: PPUSH
20792: CALL_OW 255
20796: PUSH
20797: LD_VAR 0 1
20801: PUSH
20802: LD_VAR 0 2
20806: PUSH
20807: LD_VAR 0 3
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: PPUSH
20818: CALL 65223 0 2
20822: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20823: CALL 20832 0 0
// end ;
20827: LD_VAR 0 4
20831: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
20832: LD_INT 0
20834: PPUSH
20835: PPUSH
20836: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20837: LD_STRING resetFactoryWaypoint();
20839: PPUSH
20840: CALL_OW 559
// if factoryWaypoints then
20844: LD_EXP 84
20848: IFFALSE 20969
// begin list := factoryWaypoints ;
20850: LD_ADDR_VAR 0 3
20854: PUSH
20855: LD_EXP 84
20859: ST_TO_ADDR
// for i := 1 to list do
20860: LD_ADDR_VAR 0 2
20864: PUSH
20865: DOUBLE
20866: LD_INT 1
20868: DEC
20869: ST_TO_ADDR
20870: LD_VAR 0 3
20874: PUSH
20875: FOR_TO
20876: IFFALSE 20967
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20878: LD_STRING setFactoryWaypointXY(
20880: PUSH
20881: LD_VAR 0 3
20885: PUSH
20886: LD_VAR 0 2
20890: ARRAY
20891: PUSH
20892: LD_INT 1
20894: ARRAY
20895: STR
20896: PUSH
20897: LD_STRING ,
20899: STR
20900: PUSH
20901: LD_VAR 0 3
20905: PUSH
20906: LD_VAR 0 2
20910: ARRAY
20911: PUSH
20912: LD_INT 2
20914: ARRAY
20915: STR
20916: PUSH
20917: LD_STRING ,
20919: STR
20920: PUSH
20921: LD_VAR 0 3
20925: PUSH
20926: LD_VAR 0 2
20930: ARRAY
20931: PUSH
20932: LD_INT 3
20934: ARRAY
20935: STR
20936: PUSH
20937: LD_STRING ,
20939: STR
20940: PUSH
20941: LD_VAR 0 3
20945: PUSH
20946: LD_VAR 0 2
20950: ARRAY
20951: PUSH
20952: LD_INT 4
20954: ARRAY
20955: STR
20956: PUSH
20957: LD_STRING )
20959: STR
20960: PPUSH
20961: CALL_OW 559
20965: GO 20875
20967: POP
20968: POP
// end ; end ;
20969: LD_VAR 0 1
20973: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20974: LD_INT 0
20976: PPUSH
// if HexInfo ( x , y ) = warehouse then
20977: LD_VAR 0 2
20981: PPUSH
20982: LD_VAR 0 3
20986: PPUSH
20987: CALL_OW 428
20991: PUSH
20992: LD_VAR 0 1
20996: EQUAL
20997: IFFALSE 21024
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20999: LD_ADDR_EXP 86
21003: PUSH
21004: LD_EXP 86
21008: PPUSH
21009: LD_VAR 0 1
21013: PPUSH
21014: LD_INT 0
21016: PPUSH
21017: CALL_OW 1
21021: ST_TO_ADDR
21022: GO 21075
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
21024: LD_ADDR_EXP 86
21028: PUSH
21029: LD_EXP 86
21033: PPUSH
21034: LD_VAR 0 1
21038: PPUSH
21039: LD_VAR 0 1
21043: PPUSH
21044: CALL_OW 255
21048: PUSH
21049: LD_VAR 0 1
21053: PUSH
21054: LD_VAR 0 2
21058: PUSH
21059: LD_VAR 0 3
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: PPUSH
21070: CALL_OW 1
21074: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
21075: CALL 21084 0 0
// end ;
21079: LD_VAR 0 4
21083: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
21084: LD_INT 0
21086: PPUSH
21087: PPUSH
21088: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
21089: LD_STRING resetWarehouseGatheringPoints();
21091: PPUSH
21092: CALL_OW 559
// if warehouseGatheringPoints then
21096: LD_EXP 86
21100: IFFALSE 21226
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
21102: LD_ADDR_VAR 0 3
21106: PUSH
21107: LD_EXP 86
21111: PPUSH
21112: CALL 69125 0 1
21116: ST_TO_ADDR
// for i := 1 to list do
21117: LD_ADDR_VAR 0 2
21121: PUSH
21122: DOUBLE
21123: LD_INT 1
21125: DEC
21126: ST_TO_ADDR
21127: LD_VAR 0 3
21131: PUSH
21132: FOR_TO
21133: IFFALSE 21224
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21135: LD_STRING setWarehouseGatheringPointXY(
21137: PUSH
21138: LD_VAR 0 3
21142: PUSH
21143: LD_VAR 0 2
21147: ARRAY
21148: PUSH
21149: LD_INT 1
21151: ARRAY
21152: STR
21153: PUSH
21154: LD_STRING ,
21156: STR
21157: PUSH
21158: LD_VAR 0 3
21162: PUSH
21163: LD_VAR 0 2
21167: ARRAY
21168: PUSH
21169: LD_INT 2
21171: ARRAY
21172: STR
21173: PUSH
21174: LD_STRING ,
21176: STR
21177: PUSH
21178: LD_VAR 0 3
21182: PUSH
21183: LD_VAR 0 2
21187: ARRAY
21188: PUSH
21189: LD_INT 3
21191: ARRAY
21192: STR
21193: PUSH
21194: LD_STRING ,
21196: STR
21197: PUSH
21198: LD_VAR 0 3
21202: PUSH
21203: LD_VAR 0 2
21207: ARRAY
21208: PUSH
21209: LD_INT 4
21211: ARRAY
21212: STR
21213: PUSH
21214: LD_STRING )
21216: STR
21217: PPUSH
21218: CALL_OW 559
21222: GO 21132
21224: POP
21225: POP
// end ; end ;
21226: LD_VAR 0 1
21230: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
21231: LD_EXP 86
21235: IFFALSE 21920
21237: GO 21239
21239: DISABLE
21240: LD_INT 0
21242: PPUSH
21243: PPUSH
21244: PPUSH
21245: PPUSH
21246: PPUSH
21247: PPUSH
21248: PPUSH
21249: PPUSH
21250: PPUSH
// begin enable ;
21251: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
21252: LD_ADDR_VAR 0 3
21256: PUSH
21257: LD_EXP 86
21261: PPUSH
21262: CALL 69125 0 1
21266: ST_TO_ADDR
// if not list then
21267: LD_VAR 0 3
21271: NOT
21272: IFFALSE 21276
// exit ;
21274: GO 21920
// for i := 1 to list do
21276: LD_ADDR_VAR 0 1
21280: PUSH
21281: DOUBLE
21282: LD_INT 1
21284: DEC
21285: ST_TO_ADDR
21286: LD_VAR 0 3
21290: PUSH
21291: FOR_TO
21292: IFFALSE 21918
// begin depot := list [ i ] [ 2 ] ;
21294: LD_ADDR_VAR 0 8
21298: PUSH
21299: LD_VAR 0 3
21303: PUSH
21304: LD_VAR 0 1
21308: ARRAY
21309: PUSH
21310: LD_INT 2
21312: ARRAY
21313: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
21314: LD_ADDR_VAR 0 5
21318: PUSH
21319: LD_VAR 0 3
21323: PUSH
21324: LD_VAR 0 1
21328: ARRAY
21329: PUSH
21330: LD_INT 1
21332: ARRAY
21333: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
21334: LD_VAR 0 8
21338: PPUSH
21339: CALL_OW 301
21343: PUSH
21344: LD_VAR 0 5
21348: PUSH
21349: LD_VAR 0 8
21353: PPUSH
21354: CALL_OW 255
21358: NONEQUAL
21359: OR
21360: IFFALSE 21389
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
21362: LD_ADDR_EXP 86
21366: PUSH
21367: LD_EXP 86
21371: PPUSH
21372: LD_VAR 0 8
21376: PPUSH
21377: LD_INT 0
21379: PPUSH
21380: CALL_OW 1
21384: ST_TO_ADDR
// exit ;
21385: POP
21386: POP
21387: GO 21920
// end ; x := list [ i ] [ 3 ] ;
21389: LD_ADDR_VAR 0 6
21393: PUSH
21394: LD_VAR 0 3
21398: PUSH
21399: LD_VAR 0 1
21403: ARRAY
21404: PUSH
21405: LD_INT 3
21407: ARRAY
21408: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
21409: LD_ADDR_VAR 0 7
21413: PUSH
21414: LD_VAR 0 3
21418: PUSH
21419: LD_VAR 0 1
21423: ARRAY
21424: PUSH
21425: LD_INT 4
21427: ARRAY
21428: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
21429: LD_ADDR_VAR 0 9
21433: PUSH
21434: LD_VAR 0 6
21438: PPUSH
21439: LD_VAR 0 7
21443: PPUSH
21444: LD_INT 16
21446: PPUSH
21447: CALL 67709 0 3
21451: ST_TO_ADDR
// if not cratesNearbyPoint then
21452: LD_VAR 0 9
21456: NOT
21457: IFFALSE 21463
// exit ;
21459: POP
21460: POP
21461: GO 21920
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
21463: LD_ADDR_VAR 0 4
21467: PUSH
21468: LD_INT 22
21470: PUSH
21471: LD_VAR 0 5
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 3
21482: PUSH
21483: LD_INT 60
21485: PUSH
21486: EMPTY
21487: LIST
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PUSH
21493: LD_INT 91
21495: PUSH
21496: LD_VAR 0 8
21500: PUSH
21501: LD_INT 6
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 2
21511: PUSH
21512: LD_INT 25
21514: PUSH
21515: LD_INT 2
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PUSH
21522: LD_INT 25
21524: PUSH
21525: LD_INT 16
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: LIST
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: PPUSH
21543: CALL_OW 69
21547: PUSH
21548: LD_VAR 0 8
21552: PPUSH
21553: CALL_OW 313
21557: PPUSH
21558: LD_INT 3
21560: PUSH
21561: LD_INT 60
21563: PUSH
21564: EMPTY
21565: LIST
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: PUSH
21571: LD_INT 2
21573: PUSH
21574: LD_INT 25
21576: PUSH
21577: LD_INT 2
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: PUSH
21584: LD_INT 25
21586: PUSH
21587: LD_INT 16
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: LIST
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: PPUSH
21603: CALL_OW 72
21607: UNION
21608: ST_TO_ADDR
// if tmp then
21609: LD_VAR 0 4
21613: IFFALSE 21693
// begin tmp := ShrinkArray ( tmp , 3 ) ;
21615: LD_ADDR_VAR 0 4
21619: PUSH
21620: LD_VAR 0 4
21624: PPUSH
21625: LD_INT 3
21627: PPUSH
21628: CALL 65538 0 2
21632: ST_TO_ADDR
// for j in tmp do
21633: LD_ADDR_VAR 0 2
21637: PUSH
21638: LD_VAR 0 4
21642: PUSH
21643: FOR_IN
21644: IFFALSE 21687
// begin if IsInUnit ( j ) then
21646: LD_VAR 0 2
21650: PPUSH
21651: CALL_OW 310
21655: IFFALSE 21666
// ComExit ( j ) ;
21657: LD_VAR 0 2
21661: PPUSH
21662: CALL 65621 0 1
// AddComCollect ( j , x , y ) ;
21666: LD_VAR 0 2
21670: PPUSH
21671: LD_VAR 0 6
21675: PPUSH
21676: LD_VAR 0 7
21680: PPUSH
21681: CALL_OW 177
// end ;
21685: GO 21643
21687: POP
21688: POP
// exit ;
21689: POP
21690: POP
21691: GO 21920
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
21693: LD_ADDR_VAR 0 4
21697: PUSH
21698: LD_INT 22
21700: PUSH
21701: LD_VAR 0 5
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: PUSH
21710: LD_INT 91
21712: PUSH
21713: LD_VAR 0 8
21717: PUSH
21718: LD_INT 8
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: LIST
21725: PUSH
21726: LD_INT 2
21728: PUSH
21729: LD_INT 34
21731: PUSH
21732: LD_INT 12
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 34
21741: PUSH
21742: LD_INT 51
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: PUSH
21749: LD_INT 34
21751: PUSH
21752: LD_INT 32
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 34
21761: PUSH
21762: LD_INT 89
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: LIST
21780: PPUSH
21781: CALL_OW 69
21785: ST_TO_ADDR
// if tmp then
21786: LD_VAR 0 4
21790: IFFALSE 21916
// begin for j in tmp do
21792: LD_ADDR_VAR 0 2
21796: PUSH
21797: LD_VAR 0 4
21801: PUSH
21802: FOR_IN
21803: IFFALSE 21914
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
21805: LD_VAR 0 2
21809: PPUSH
21810: CALL_OW 262
21814: PUSH
21815: LD_INT 3
21817: EQUAL
21818: PUSH
21819: LD_VAR 0 2
21823: PPUSH
21824: CALL_OW 261
21828: PUSH
21829: LD_INT 20
21831: GREATER
21832: OR
21833: PUSH
21834: LD_VAR 0 2
21838: PPUSH
21839: CALL_OW 314
21843: NOT
21844: AND
21845: PUSH
21846: LD_VAR 0 2
21850: PPUSH
21851: CALL_OW 263
21855: PUSH
21856: LD_INT 1
21858: NONEQUAL
21859: PUSH
21860: LD_VAR 0 2
21864: PPUSH
21865: CALL_OW 311
21869: OR
21870: AND
21871: IFFALSE 21912
// begin ComCollect ( j , x , y ) ;
21873: LD_VAR 0 2
21877: PPUSH
21878: LD_VAR 0 6
21882: PPUSH
21883: LD_VAR 0 7
21887: PPUSH
21888: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
21892: LD_VAR 0 2
21896: PPUSH
21897: LD_VAR 0 8
21901: PPUSH
21902: CALL_OW 172
// exit ;
21906: POP
21907: POP
21908: POP
21909: POP
21910: GO 21920
// end ;
21912: GO 21802
21914: POP
21915: POP
// end ; end ;
21916: GO 21291
21918: POP
21919: POP
// end ; end_of_file
21920: PPOPN 9
21922: END
// export function SOS_UnitDestroyed ( un ) ; begin
21923: LD_INT 0
21925: PPUSH
// ComRadiation ( un ) ;
21926: LD_VAR 0 1
21930: PPUSH
21931: CALL 22992 0 1
// end ;
21935: LD_VAR 0 2
21939: RET
// export function SOS_UnitKamikazed ( un ) ; begin
21940: LD_INT 0
21942: PPUSH
// ComRadiation ( un ) ;
21943: LD_VAR 0 1
21947: PPUSH
21948: CALL 22992 0 1
// end ;
21952: LD_VAR 0 2
21956: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21957: LD_INT 0
21959: PPUSH
// end ;
21960: LD_VAR 0 4
21964: RET
// export function SOS_Command ( cmd ) ; begin
21965: LD_INT 0
21967: PPUSH
// end ;
21968: LD_VAR 0 2
21972: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21973: LD_INT 0
21975: PPUSH
// end ;
21976: LD_VAR 0 6
21980: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
21981: LD_INT 0
21983: PPUSH
21984: PPUSH
21985: PPUSH
21986: PPUSH
// if not vehicle or not factory then
21987: LD_VAR 0 1
21991: NOT
21992: PUSH
21993: LD_VAR 0 2
21997: NOT
21998: OR
21999: IFFALSE 22003
// exit ;
22001: GO 22583
// if not factoryWaypoints then
22003: LD_EXP 84
22007: NOT
22008: IFFALSE 22012
// exit ;
22010: GO 22583
// for i := 1 to Count ( factoryWaypoints ) do
22012: LD_ADDR_VAR 0 4
22016: PUSH
22017: DOUBLE
22018: LD_INT 1
22020: DEC
22021: ST_TO_ADDR
22022: LD_EXP 84
22026: PPUSH
22027: CALL 29473 0 1
22031: PUSH
22032: FOR_TO
22033: IFFALSE 22581
// if factoryWaypoints [ i ] [ 2 ] = factory then
22035: LD_EXP 84
22039: PUSH
22040: LD_VAR 0 4
22044: ARRAY
22045: PUSH
22046: LD_INT 2
22048: ARRAY
22049: PUSH
22050: LD_VAR 0 2
22054: EQUAL
22055: IFFALSE 22579
// begin if GetControl ( vehicle ) = control_manual then
22057: LD_VAR 0 1
22061: PPUSH
22062: CALL_OW 263
22066: PUSH
22067: LD_INT 1
22069: EQUAL
22070: IFFALSE 22432
// begin driver := IsDrivenBy ( vehicle ) ;
22072: LD_ADDR_VAR 0 5
22076: PUSH
22077: LD_VAR 0 1
22081: PPUSH
22082: CALL_OW 311
22086: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
22087: LD_VAR 0 5
22091: PUSH
22092: LD_EXP 85
22096: IN
22097: PUSH
22098: LD_VAR 0 1
22102: PUSH
22103: LD_EXP 85
22107: IN
22108: OR
22109: IFFALSE 22115
// exit ;
22111: POP
22112: POP
22113: GO 22583
// if not HasTask ( driver ) then
22115: LD_VAR 0 5
22119: PPUSH
22120: CALL_OW 314
22124: NOT
22125: IFFALSE 22430
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
22127: LD_ADDR_EXP 85
22131: PUSH
22132: LD_EXP 85
22136: PPUSH
22137: LD_VAR 0 5
22141: PPUSH
22142: CALL 65223 0 2
22146: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
22147: LD_ADDR_EXP 85
22151: PUSH
22152: LD_EXP 85
22156: PPUSH
22157: LD_VAR 0 1
22161: PPUSH
22162: CALL 65223 0 2
22166: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22167: LD_ADDR_VAR 0 6
22171: PUSH
22172: LD_EXP 84
22176: PUSH
22177: LD_VAR 0 4
22181: ARRAY
22182: PUSH
22183: LD_INT 3
22185: ARRAY
22186: PPUSH
22187: LD_EXP 84
22191: PUSH
22192: LD_VAR 0 4
22196: ARRAY
22197: PUSH
22198: LD_INT 4
22200: ARRAY
22201: PPUSH
22202: CALL_OW 428
22206: ST_TO_ADDR
// if hex then
22207: LD_VAR 0 6
22211: IFFALSE 22229
// ComMoveUnit ( driver , hex ) else
22213: LD_VAR 0 5
22217: PPUSH
22218: LD_VAR 0 6
22222: PPUSH
22223: CALL_OW 112
22227: GO 22313
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
22229: LD_VAR 0 1
22233: PPUSH
22234: LD_EXP 84
22238: PUSH
22239: LD_VAR 0 4
22243: ARRAY
22244: PUSH
22245: LD_INT 3
22247: ARRAY
22248: PPUSH
22249: LD_EXP 84
22253: PUSH
22254: LD_VAR 0 4
22258: ARRAY
22259: PUSH
22260: LD_INT 4
22262: ARRAY
22263: PPUSH
22264: CALL_OW 297
22268: PUSH
22269: LD_INT 0
22271: GREATER
22272: IFFALSE 22313
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22274: LD_VAR 0 5
22278: PPUSH
22279: LD_EXP 84
22283: PUSH
22284: LD_VAR 0 4
22288: ARRAY
22289: PUSH
22290: LD_INT 3
22292: ARRAY
22293: PPUSH
22294: LD_EXP 84
22298: PUSH
22299: LD_VAR 0 4
22303: ARRAY
22304: PUSH
22305: LD_INT 4
22307: ARRAY
22308: PPUSH
22309: CALL_OW 111
// AddComExitVehicle ( driver ) ;
22313: LD_VAR 0 5
22317: PPUSH
22318: CALL_OW 181
// if Multiplayer then
22322: LD_OWVAR 4
22326: IFFALSE 22375
// begin repeat wait ( 10 ) ;
22328: LD_INT 10
22330: PPUSH
22331: CALL_OW 67
// until not IsInUnit ( driver ) ;
22335: LD_VAR 0 5
22339: PPUSH
22340: CALL_OW 310
22344: NOT
22345: IFFALSE 22328
// if not HasTask ( driver ) then
22347: LD_VAR 0 5
22351: PPUSH
22352: CALL_OW 314
22356: NOT
22357: IFFALSE 22373
// ComEnterUnit ( driver , factory ) ;
22359: LD_VAR 0 5
22363: PPUSH
22364: LD_VAR 0 2
22368: PPUSH
22369: CALL_OW 120
// end else
22373: GO 22389
// AddComEnterUnit ( driver , factory ) ;
22375: LD_VAR 0 5
22379: PPUSH
22380: LD_VAR 0 2
22384: PPUSH
22385: CALL_OW 180
// wait ( 0 0$1 ) ;
22389: LD_INT 35
22391: PPUSH
22392: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
22396: LD_ADDR_EXP 85
22400: PUSH
22401: LD_EXP 85
22405: PUSH
22406: LD_VAR 0 5
22410: DIFF
22411: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
22412: LD_ADDR_EXP 85
22416: PUSH
22417: LD_EXP 85
22421: PUSH
22422: LD_VAR 0 1
22426: DIFF
22427: ST_TO_ADDR
// break ;
22428: GO 22581
// end ; end else
22430: GO 22579
// if GetControl ( vehicle ) = control_remote then
22432: LD_VAR 0 1
22436: PPUSH
22437: CALL_OW 263
22441: PUSH
22442: LD_INT 2
22444: EQUAL
22445: IFFALSE 22531
// begin wait ( 0 0$2 ) ;
22447: LD_INT 70
22449: PPUSH
22450: CALL_OW 67
// repeat wait ( 10 ) ;
22454: LD_INT 10
22456: PPUSH
22457: CALL_OW 67
// Connect ( vehicle ) ;
22461: LD_VAR 0 1
22465: PPUSH
22466: CALL 35679 0 1
// until IsControledBy ( vehicle ) ;
22470: LD_VAR 0 1
22474: PPUSH
22475: CALL_OW 312
22479: IFFALSE 22454
// wait ( 10 ) ;
22481: LD_INT 10
22483: PPUSH
22484: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22488: LD_VAR 0 1
22492: PPUSH
22493: LD_EXP 84
22497: PUSH
22498: LD_VAR 0 4
22502: ARRAY
22503: PUSH
22504: LD_INT 3
22506: ARRAY
22507: PPUSH
22508: LD_EXP 84
22512: PUSH
22513: LD_VAR 0 4
22517: ARRAY
22518: PUSH
22519: LD_INT 4
22521: ARRAY
22522: PPUSH
22523: CALL_OW 111
// break ;
22527: GO 22581
// end else
22529: GO 22579
// begin wait ( 0 0$3 ) ;
22531: LD_INT 105
22533: PPUSH
22534: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22538: LD_VAR 0 1
22542: PPUSH
22543: LD_EXP 84
22547: PUSH
22548: LD_VAR 0 4
22552: ARRAY
22553: PUSH
22554: LD_INT 3
22556: ARRAY
22557: PPUSH
22558: LD_EXP 84
22562: PUSH
22563: LD_VAR 0 4
22567: ARRAY
22568: PUSH
22569: LD_INT 4
22571: ARRAY
22572: PPUSH
22573: CALL_OW 111
// break ;
22577: GO 22581
// end ; end ;
22579: GO 22032
22581: POP
22582: POP
// end ;
22583: LD_VAR 0 3
22587: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22588: LD_INT 0
22590: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22591: LD_VAR 0 1
22595: PUSH
22596: LD_INT 250
22598: EQUAL
22599: PUSH
22600: LD_VAR 0 2
22604: PPUSH
22605: CALL_OW 264
22609: PUSH
22610: LD_INT 81
22612: EQUAL
22613: AND
22614: IFFALSE 22635
// MinerPlaceMine ( unit , x , y ) ;
22616: LD_VAR 0 2
22620: PPUSH
22621: LD_VAR 0 4
22625: PPUSH
22626: LD_VAR 0 5
22630: PPUSH
22631: CALL 25727 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22635: LD_VAR 0 1
22639: PUSH
22640: LD_INT 251
22642: EQUAL
22643: PUSH
22644: LD_VAR 0 2
22648: PPUSH
22649: CALL_OW 264
22653: PUSH
22654: LD_INT 81
22656: EQUAL
22657: AND
22658: IFFALSE 22679
// MinerDetonateMine ( unit , x , y ) ;
22660: LD_VAR 0 2
22664: PPUSH
22665: LD_VAR 0 4
22669: PPUSH
22670: LD_VAR 0 5
22674: PPUSH
22675: CALL 26002 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22679: LD_VAR 0 1
22683: PUSH
22684: LD_INT 252
22686: EQUAL
22687: PUSH
22688: LD_VAR 0 2
22692: PPUSH
22693: CALL_OW 264
22697: PUSH
22698: LD_INT 81
22700: EQUAL
22701: AND
22702: IFFALSE 22723
// MinerCreateMinefield ( unit , x , y ) ;
22704: LD_VAR 0 2
22708: PPUSH
22709: LD_VAR 0 4
22713: PPUSH
22714: LD_VAR 0 5
22718: PPUSH
22719: CALL 26419 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22723: LD_VAR 0 1
22727: PUSH
22728: LD_INT 253
22730: EQUAL
22731: PUSH
22732: LD_VAR 0 2
22736: PPUSH
22737: CALL_OW 257
22741: PUSH
22742: LD_INT 5
22744: EQUAL
22745: AND
22746: IFFALSE 22767
// ComBinocular ( unit , x , y ) ;
22748: LD_VAR 0 2
22752: PPUSH
22753: LD_VAR 0 4
22757: PPUSH
22758: LD_VAR 0 5
22762: PPUSH
22763: CALL 26788 0 3
// if selectedUnit then
22767: LD_VAR 0 3
22771: IFFALSE 22827
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22773: LD_VAR 0 1
22777: PUSH
22778: LD_INT 254
22780: EQUAL
22781: PUSH
22782: LD_VAR 0 2
22786: PPUSH
22787: CALL_OW 264
22791: PUSH
22792: LD_INT 99
22794: EQUAL
22795: AND
22796: PUSH
22797: LD_VAR 0 3
22801: PPUSH
22802: CALL_OW 263
22806: PUSH
22807: LD_INT 3
22809: EQUAL
22810: AND
22811: IFFALSE 22827
// HackDestroyVehicle ( unit , selectedUnit ) ;
22813: LD_VAR 0 2
22817: PPUSH
22818: LD_VAR 0 3
22822: PPUSH
22823: CALL 25091 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22827: LD_VAR 0 1
22831: PUSH
22832: LD_INT 255
22834: EQUAL
22835: PUSH
22836: LD_VAR 0 2
22840: PPUSH
22841: CALL_OW 264
22845: PUSH
22846: LD_INT 14
22848: PUSH
22849: LD_INT 53
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: IN
22856: AND
22857: PUSH
22858: LD_VAR 0 4
22862: PPUSH
22863: LD_VAR 0 5
22867: PPUSH
22868: CALL_OW 488
22872: AND
22873: IFFALSE 22897
// CutTreeXYR ( unit , x , y , 12 ) ;
22875: LD_VAR 0 2
22879: PPUSH
22880: LD_VAR 0 4
22884: PPUSH
22885: LD_VAR 0 5
22889: PPUSH
22890: LD_INT 12
22892: PPUSH
22893: CALL 23088 0 4
// if cmd = 256 then
22897: LD_VAR 0 1
22901: PUSH
22902: LD_INT 256
22904: EQUAL
22905: IFFALSE 22926
// SetFactoryWaypoint ( unit , x , y ) ;
22907: LD_VAR 0 2
22911: PPUSH
22912: LD_VAR 0 4
22916: PPUSH
22917: LD_VAR 0 5
22921: PPUSH
22922: CALL 20484 0 3
// if cmd = 257 then
22926: LD_VAR 0 1
22930: PUSH
22931: LD_INT 257
22933: EQUAL
22934: IFFALSE 22955
// SetWarehouseGatheringPoint ( unit , x , y ) ;
22936: LD_VAR 0 2
22940: PPUSH
22941: LD_VAR 0 4
22945: PPUSH
22946: LD_VAR 0 5
22950: PPUSH
22951: CALL 20974 0 3
// if cmd = 258 then
22955: LD_VAR 0 1
22959: PUSH
22960: LD_INT 258
22962: EQUAL
22963: IFFALSE 22987
// BurnTreeXYR ( unit , x , y , 8 ) ;
22965: LD_VAR 0 2
22969: PPUSH
22970: LD_VAR 0 4
22974: PPUSH
22975: LD_VAR 0 5
22979: PPUSH
22980: LD_INT 8
22982: PPUSH
22983: CALL 23482 0 4
// end ;
22987: LD_VAR 0 6
22991: RET
// export function ComRadiation ( un ) ; var eff ; begin
22992: LD_INT 0
22994: PPUSH
22995: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
22996: LD_VAR 0 1
23000: PPUSH
23001: CALL_OW 264
23005: PUSH
23006: LD_INT 91
23008: NONEQUAL
23009: IFFALSE 23013
// exit ;
23011: GO 23083
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23013: LD_INT 68
23015: PPUSH
23016: LD_VAR 0 1
23020: PPUSH
23021: CALL_OW 255
23025: PPUSH
23026: CALL_OW 321
23030: PUSH
23031: LD_INT 2
23033: EQUAL
23034: IFFALSE 23046
// eff := 50 else
23036: LD_ADDR_VAR 0 3
23040: PUSH
23041: LD_INT 50
23043: ST_TO_ADDR
23044: GO 23054
// eff := 25 ;
23046: LD_ADDR_VAR 0 3
23050: PUSH
23051: LD_INT 25
23053: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23054: LD_VAR 0 1
23058: PPUSH
23059: CALL_OW 250
23063: PPUSH
23064: LD_VAR 0 1
23068: PPUSH
23069: CALL_OW 251
23073: PPUSH
23074: LD_VAR 0 3
23078: PPUSH
23079: CALL_OW 495
// end ;
23083: LD_VAR 0 2
23087: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23088: LD_INT 0
23090: PPUSH
23091: PPUSH
23092: PPUSH
23093: PPUSH
23094: PPUSH
23095: PPUSH
23096: PPUSH
23097: PPUSH
23098: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
23099: LD_VAR 0 1
23103: PPUSH
23104: CALL_OW 302
23108: NOT
23109: PUSH
23110: LD_VAR 0 2
23114: PPUSH
23115: LD_VAR 0 3
23119: PPUSH
23120: CALL_OW 488
23124: NOT
23125: OR
23126: PUSH
23127: LD_VAR 0 4
23131: NOT
23132: OR
23133: IFFALSE 23137
// exit ;
23135: GO 23477
// list := [ ] ;
23137: LD_ADDR_VAR 0 13
23141: PUSH
23142: EMPTY
23143: ST_TO_ADDR
// if x - r < 0 then
23144: LD_VAR 0 2
23148: PUSH
23149: LD_VAR 0 4
23153: MINUS
23154: PUSH
23155: LD_INT 0
23157: LESS
23158: IFFALSE 23170
// min_x := 0 else
23160: LD_ADDR_VAR 0 7
23164: PUSH
23165: LD_INT 0
23167: ST_TO_ADDR
23168: GO 23186
// min_x := x - r ;
23170: LD_ADDR_VAR 0 7
23174: PUSH
23175: LD_VAR 0 2
23179: PUSH
23180: LD_VAR 0 4
23184: MINUS
23185: ST_TO_ADDR
// if y - r < 0 then
23186: LD_VAR 0 3
23190: PUSH
23191: LD_VAR 0 4
23195: MINUS
23196: PUSH
23197: LD_INT 0
23199: LESS
23200: IFFALSE 23212
// min_y := 0 else
23202: LD_ADDR_VAR 0 8
23206: PUSH
23207: LD_INT 0
23209: ST_TO_ADDR
23210: GO 23228
// min_y := y - r ;
23212: LD_ADDR_VAR 0 8
23216: PUSH
23217: LD_VAR 0 3
23221: PUSH
23222: LD_VAR 0 4
23226: MINUS
23227: ST_TO_ADDR
// max_x := x + r ;
23228: LD_ADDR_VAR 0 9
23232: PUSH
23233: LD_VAR 0 2
23237: PUSH
23238: LD_VAR 0 4
23242: PLUS
23243: ST_TO_ADDR
// max_y := y + r ;
23244: LD_ADDR_VAR 0 10
23248: PUSH
23249: LD_VAR 0 3
23253: PUSH
23254: LD_VAR 0 4
23258: PLUS
23259: ST_TO_ADDR
// for _x = min_x to max_x do
23260: LD_ADDR_VAR 0 11
23264: PUSH
23265: DOUBLE
23266: LD_VAR 0 7
23270: DEC
23271: ST_TO_ADDR
23272: LD_VAR 0 9
23276: PUSH
23277: FOR_TO
23278: IFFALSE 23395
// for _y = min_y to max_y do
23280: LD_ADDR_VAR 0 12
23284: PUSH
23285: DOUBLE
23286: LD_VAR 0 8
23290: DEC
23291: ST_TO_ADDR
23292: LD_VAR 0 10
23296: PUSH
23297: FOR_TO
23298: IFFALSE 23391
// begin if not ValidHex ( _x , _y ) then
23300: LD_VAR 0 11
23304: PPUSH
23305: LD_VAR 0 12
23309: PPUSH
23310: CALL_OW 488
23314: NOT
23315: IFFALSE 23319
// continue ;
23317: GO 23297
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23319: LD_VAR 0 11
23323: PPUSH
23324: LD_VAR 0 12
23328: PPUSH
23329: CALL_OW 351
23333: PUSH
23334: LD_VAR 0 11
23338: PPUSH
23339: LD_VAR 0 12
23343: PPUSH
23344: CALL_OW 554
23348: AND
23349: IFFALSE 23389
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23351: LD_ADDR_VAR 0 13
23355: PUSH
23356: LD_VAR 0 13
23360: PPUSH
23361: LD_VAR 0 13
23365: PUSH
23366: LD_INT 1
23368: PLUS
23369: PPUSH
23370: LD_VAR 0 11
23374: PUSH
23375: LD_VAR 0 12
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: PPUSH
23384: CALL_OW 2
23388: ST_TO_ADDR
// end ;
23389: GO 23297
23391: POP
23392: POP
23393: GO 23277
23395: POP
23396: POP
// if not list then
23397: LD_VAR 0 13
23401: NOT
23402: IFFALSE 23406
// exit ;
23404: GO 23477
// for i in list do
23406: LD_ADDR_VAR 0 6
23410: PUSH
23411: LD_VAR 0 13
23415: PUSH
23416: FOR_IN
23417: IFFALSE 23475
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23419: LD_VAR 0 1
23423: PPUSH
23424: LD_STRING M
23426: PUSH
23427: LD_VAR 0 6
23431: PUSH
23432: LD_INT 1
23434: ARRAY
23435: PUSH
23436: LD_VAR 0 6
23440: PUSH
23441: LD_INT 2
23443: ARRAY
23444: PUSH
23445: LD_INT 0
23447: PUSH
23448: LD_INT 0
23450: PUSH
23451: LD_INT 0
23453: PUSH
23454: LD_INT 0
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: PUSH
23466: EMPTY
23467: LIST
23468: PPUSH
23469: CALL_OW 447
23473: GO 23416
23475: POP
23476: POP
// end ;
23477: LD_VAR 0 5
23481: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
23482: LD_INT 0
23484: PPUSH
23485: PPUSH
23486: PPUSH
23487: PPUSH
23488: PPUSH
23489: PPUSH
23490: PPUSH
23491: PPUSH
23492: PPUSH
23493: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
23494: LD_VAR 0 1
23498: PPUSH
23499: CALL_OW 302
23503: NOT
23504: PUSH
23505: LD_VAR 0 2
23509: PPUSH
23510: LD_VAR 0 3
23514: PPUSH
23515: CALL_OW 488
23519: NOT
23520: OR
23521: PUSH
23522: LD_VAR 0 4
23526: NOT
23527: OR
23528: IFFALSE 23532
// exit ;
23530: GO 24045
// list := [ ] ;
23532: LD_ADDR_VAR 0 13
23536: PUSH
23537: EMPTY
23538: ST_TO_ADDR
// if x - r < 0 then
23539: LD_VAR 0 2
23543: PUSH
23544: LD_VAR 0 4
23548: MINUS
23549: PUSH
23550: LD_INT 0
23552: LESS
23553: IFFALSE 23565
// min_x := 0 else
23555: LD_ADDR_VAR 0 7
23559: PUSH
23560: LD_INT 0
23562: ST_TO_ADDR
23563: GO 23581
// min_x := x - r ;
23565: LD_ADDR_VAR 0 7
23569: PUSH
23570: LD_VAR 0 2
23574: PUSH
23575: LD_VAR 0 4
23579: MINUS
23580: ST_TO_ADDR
// if y - r < 0 then
23581: LD_VAR 0 3
23585: PUSH
23586: LD_VAR 0 4
23590: MINUS
23591: PUSH
23592: LD_INT 0
23594: LESS
23595: IFFALSE 23607
// min_y := 0 else
23597: LD_ADDR_VAR 0 8
23601: PUSH
23602: LD_INT 0
23604: ST_TO_ADDR
23605: GO 23623
// min_y := y - r ;
23607: LD_ADDR_VAR 0 8
23611: PUSH
23612: LD_VAR 0 3
23616: PUSH
23617: LD_VAR 0 4
23621: MINUS
23622: ST_TO_ADDR
// max_x := x + r ;
23623: LD_ADDR_VAR 0 9
23627: PUSH
23628: LD_VAR 0 2
23632: PUSH
23633: LD_VAR 0 4
23637: PLUS
23638: ST_TO_ADDR
// max_y := y + r ;
23639: LD_ADDR_VAR 0 10
23643: PUSH
23644: LD_VAR 0 3
23648: PUSH
23649: LD_VAR 0 4
23653: PLUS
23654: ST_TO_ADDR
// for _x = min_x to max_x do
23655: LD_ADDR_VAR 0 11
23659: PUSH
23660: DOUBLE
23661: LD_VAR 0 7
23665: DEC
23666: ST_TO_ADDR
23667: LD_VAR 0 9
23671: PUSH
23672: FOR_TO
23673: IFFALSE 23790
// for _y = min_y to max_y do
23675: LD_ADDR_VAR 0 12
23679: PUSH
23680: DOUBLE
23681: LD_VAR 0 8
23685: DEC
23686: ST_TO_ADDR
23687: LD_VAR 0 10
23691: PUSH
23692: FOR_TO
23693: IFFALSE 23786
// begin if not ValidHex ( _x , _y ) then
23695: LD_VAR 0 11
23699: PPUSH
23700: LD_VAR 0 12
23704: PPUSH
23705: CALL_OW 488
23709: NOT
23710: IFFALSE 23714
// continue ;
23712: GO 23692
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23714: LD_VAR 0 11
23718: PPUSH
23719: LD_VAR 0 12
23723: PPUSH
23724: CALL_OW 351
23728: PUSH
23729: LD_VAR 0 11
23733: PPUSH
23734: LD_VAR 0 12
23738: PPUSH
23739: CALL_OW 554
23743: AND
23744: IFFALSE 23784
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23746: LD_ADDR_VAR 0 13
23750: PUSH
23751: LD_VAR 0 13
23755: PPUSH
23756: LD_VAR 0 13
23760: PUSH
23761: LD_INT 1
23763: PLUS
23764: PPUSH
23765: LD_VAR 0 11
23769: PUSH
23770: LD_VAR 0 12
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PPUSH
23779: CALL_OW 2
23783: ST_TO_ADDR
// end ;
23784: GO 23692
23786: POP
23787: POP
23788: GO 23672
23790: POP
23791: POP
// if not list then
23792: LD_VAR 0 13
23796: NOT
23797: IFFALSE 23801
// exit ;
23799: GO 24045
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
23801: LD_ADDR_VAR 0 13
23805: PUSH
23806: LD_VAR 0 1
23810: PPUSH
23811: LD_VAR 0 13
23815: PPUSH
23816: LD_INT 1
23818: PPUSH
23819: LD_INT 1
23821: PPUSH
23822: CALL 32821 0 4
23826: ST_TO_ADDR
// ComStop ( flame ) ;
23827: LD_VAR 0 1
23831: PPUSH
23832: CALL_OW 141
// for i in list do
23836: LD_ADDR_VAR 0 6
23840: PUSH
23841: LD_VAR 0 13
23845: PUSH
23846: FOR_IN
23847: IFFALSE 23878
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
23849: LD_VAR 0 1
23853: PPUSH
23854: LD_VAR 0 6
23858: PUSH
23859: LD_INT 1
23861: ARRAY
23862: PPUSH
23863: LD_VAR 0 6
23867: PUSH
23868: LD_INT 2
23870: ARRAY
23871: PPUSH
23872: CALL_OW 176
23876: GO 23846
23878: POP
23879: POP
// repeat wait ( 0 0$1 ) ;
23880: LD_INT 35
23882: PPUSH
23883: CALL_OW 67
// task := GetTaskList ( flame ) ;
23887: LD_ADDR_VAR 0 14
23891: PUSH
23892: LD_VAR 0 1
23896: PPUSH
23897: CALL_OW 437
23901: ST_TO_ADDR
// if not task then
23902: LD_VAR 0 14
23906: NOT
23907: IFFALSE 23911
// exit ;
23909: GO 24045
// if task [ 1 ] [ 1 ] <> | then
23911: LD_VAR 0 14
23915: PUSH
23916: LD_INT 1
23918: ARRAY
23919: PUSH
23920: LD_INT 1
23922: ARRAY
23923: PUSH
23924: LD_STRING |
23926: NONEQUAL
23927: IFFALSE 23931
// exit ;
23929: GO 24045
// _x := task [ 1 ] [ 2 ] ;
23931: LD_ADDR_VAR 0 11
23935: PUSH
23936: LD_VAR 0 14
23940: PUSH
23941: LD_INT 1
23943: ARRAY
23944: PUSH
23945: LD_INT 2
23947: ARRAY
23948: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
23949: LD_ADDR_VAR 0 12
23953: PUSH
23954: LD_VAR 0 14
23958: PUSH
23959: LD_INT 1
23961: ARRAY
23962: PUSH
23963: LD_INT 3
23965: ARRAY
23966: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
23967: LD_VAR 0 11
23971: PPUSH
23972: LD_VAR 0 12
23976: PPUSH
23977: CALL_OW 351
23981: NOT
23982: PUSH
23983: LD_VAR 0 11
23987: PPUSH
23988: LD_VAR 0 12
23992: PPUSH
23993: CALL_OW 554
23997: NOT
23998: OR
23999: IFFALSE 24033
// begin task := Delete ( task , 1 ) ;
24001: LD_ADDR_VAR 0 14
24005: PUSH
24006: LD_VAR 0 14
24010: PPUSH
24011: LD_INT 1
24013: PPUSH
24014: CALL_OW 3
24018: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
24019: LD_VAR 0 1
24023: PPUSH
24024: LD_VAR 0 14
24028: PPUSH
24029: CALL_OW 446
// end ; until not HasTask ( flame ) ;
24033: LD_VAR 0 1
24037: PPUSH
24038: CALL_OW 314
24042: NOT
24043: IFFALSE 23880
// end ;
24045: LD_VAR 0 5
24049: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24050: LD_EXP 88
24054: NOT
24055: IFFALSE 24105
24057: GO 24059
24059: DISABLE
// begin initHack := true ;
24060: LD_ADDR_EXP 88
24064: PUSH
24065: LD_INT 1
24067: ST_TO_ADDR
// hackTanks := [ ] ;
24068: LD_ADDR_EXP 89
24072: PUSH
24073: EMPTY
24074: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24075: LD_ADDR_EXP 90
24079: PUSH
24080: EMPTY
24081: ST_TO_ADDR
// hackLimit := 3 ;
24082: LD_ADDR_EXP 91
24086: PUSH
24087: LD_INT 3
24089: ST_TO_ADDR
// hackDist := 12 ;
24090: LD_ADDR_EXP 92
24094: PUSH
24095: LD_INT 12
24097: ST_TO_ADDR
// hackCounter := [ ] ;
24098: LD_ADDR_EXP 93
24102: PUSH
24103: EMPTY
24104: ST_TO_ADDR
// end ;
24105: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24106: LD_EXP 88
24110: PUSH
24111: LD_INT 34
24113: PUSH
24114: LD_INT 99
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PPUSH
24121: CALL_OW 69
24125: AND
24126: IFFALSE 24379
24128: GO 24130
24130: DISABLE
24131: LD_INT 0
24133: PPUSH
24134: PPUSH
// begin enable ;
24135: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24136: LD_ADDR_VAR 0 1
24140: PUSH
24141: LD_INT 34
24143: PUSH
24144: LD_INT 99
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PPUSH
24151: CALL_OW 69
24155: PUSH
24156: FOR_IN
24157: IFFALSE 24377
// begin if not i in hackTanks then
24159: LD_VAR 0 1
24163: PUSH
24164: LD_EXP 89
24168: IN
24169: NOT
24170: IFFALSE 24253
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24172: LD_ADDR_EXP 89
24176: PUSH
24177: LD_EXP 89
24181: PPUSH
24182: LD_EXP 89
24186: PUSH
24187: LD_INT 1
24189: PLUS
24190: PPUSH
24191: LD_VAR 0 1
24195: PPUSH
24196: CALL_OW 1
24200: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24201: LD_ADDR_EXP 90
24205: PUSH
24206: LD_EXP 90
24210: PPUSH
24211: LD_EXP 90
24215: PUSH
24216: LD_INT 1
24218: PLUS
24219: PPUSH
24220: EMPTY
24221: PPUSH
24222: CALL_OW 1
24226: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24227: LD_ADDR_EXP 93
24231: PUSH
24232: LD_EXP 93
24236: PPUSH
24237: LD_EXP 93
24241: PUSH
24242: LD_INT 1
24244: PLUS
24245: PPUSH
24246: EMPTY
24247: PPUSH
24248: CALL_OW 1
24252: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24253: LD_VAR 0 1
24257: PPUSH
24258: CALL_OW 302
24262: NOT
24263: IFFALSE 24276
// begin HackUnlinkAll ( i ) ;
24265: LD_VAR 0 1
24269: PPUSH
24270: CALL 24382 0 1
// continue ;
24274: GO 24156
// end ; HackCheckCapturedStatus ( i ) ;
24276: LD_VAR 0 1
24280: PPUSH
24281: CALL 24825 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24285: LD_ADDR_VAR 0 2
24289: PUSH
24290: LD_INT 81
24292: PUSH
24293: LD_VAR 0 1
24297: PPUSH
24298: CALL_OW 255
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: LD_INT 33
24309: PUSH
24310: LD_INT 3
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: PUSH
24317: LD_INT 91
24319: PUSH
24320: LD_VAR 0 1
24324: PUSH
24325: LD_EXP 92
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 50
24337: PUSH
24338: EMPTY
24339: LIST
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: PPUSH
24347: CALL_OW 69
24351: ST_TO_ADDR
// if not tmp then
24352: LD_VAR 0 2
24356: NOT
24357: IFFALSE 24361
// continue ;
24359: GO 24156
// HackLink ( i , tmp ) ;
24361: LD_VAR 0 1
24365: PPUSH
24366: LD_VAR 0 2
24370: PPUSH
24371: CALL 24518 0 2
// end ;
24375: GO 24156
24377: POP
24378: POP
// end ;
24379: PPOPN 2
24381: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24382: LD_INT 0
24384: PPUSH
24385: PPUSH
24386: PPUSH
// if not hack in hackTanks then
24387: LD_VAR 0 1
24391: PUSH
24392: LD_EXP 89
24396: IN
24397: NOT
24398: IFFALSE 24402
// exit ;
24400: GO 24513
// index := GetElementIndex ( hackTanks , hack ) ;
24402: LD_ADDR_VAR 0 4
24406: PUSH
24407: LD_EXP 89
24411: PPUSH
24412: LD_VAR 0 1
24416: PPUSH
24417: CALL 32118 0 2
24421: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24422: LD_EXP 90
24426: PUSH
24427: LD_VAR 0 4
24431: ARRAY
24432: IFFALSE 24513
// begin for i in hackTanksCaptured [ index ] do
24434: LD_ADDR_VAR 0 3
24438: PUSH
24439: LD_EXP 90
24443: PUSH
24444: LD_VAR 0 4
24448: ARRAY
24449: PUSH
24450: FOR_IN
24451: IFFALSE 24477
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24453: LD_VAR 0 3
24457: PUSH
24458: LD_INT 1
24460: ARRAY
24461: PPUSH
24462: LD_VAR 0 3
24466: PUSH
24467: LD_INT 2
24469: ARRAY
24470: PPUSH
24471: CALL_OW 235
24475: GO 24450
24477: POP
24478: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24479: LD_ADDR_EXP 90
24483: PUSH
24484: LD_EXP 90
24488: PPUSH
24489: LD_VAR 0 4
24493: PPUSH
24494: EMPTY
24495: PPUSH
24496: CALL_OW 1
24500: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24501: LD_VAR 0 1
24505: PPUSH
24506: LD_INT 0
24508: PPUSH
24509: CALL_OW 505
// end ; end ;
24513: LD_VAR 0 2
24517: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24518: LD_INT 0
24520: PPUSH
24521: PPUSH
24522: PPUSH
// if not hack in hackTanks or not vehicles then
24523: LD_VAR 0 1
24527: PUSH
24528: LD_EXP 89
24532: IN
24533: NOT
24534: PUSH
24535: LD_VAR 0 2
24539: NOT
24540: OR
24541: IFFALSE 24545
// exit ;
24543: GO 24820
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24545: LD_ADDR_VAR 0 2
24549: PUSH
24550: LD_VAR 0 1
24554: PPUSH
24555: LD_VAR 0 2
24559: PPUSH
24560: LD_INT 1
24562: PPUSH
24563: LD_INT 1
24565: PPUSH
24566: CALL 32768 0 4
24570: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24571: LD_ADDR_VAR 0 5
24575: PUSH
24576: LD_EXP 89
24580: PPUSH
24581: LD_VAR 0 1
24585: PPUSH
24586: CALL 32118 0 2
24590: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24591: LD_EXP 90
24595: PUSH
24596: LD_VAR 0 5
24600: ARRAY
24601: PUSH
24602: LD_EXP 91
24606: LESS
24607: IFFALSE 24796
// begin for i := 1 to vehicles do
24609: LD_ADDR_VAR 0 4
24613: PUSH
24614: DOUBLE
24615: LD_INT 1
24617: DEC
24618: ST_TO_ADDR
24619: LD_VAR 0 2
24623: PUSH
24624: FOR_TO
24625: IFFALSE 24794
// begin if hackTanksCaptured [ index ] = hackLimit then
24627: LD_EXP 90
24631: PUSH
24632: LD_VAR 0 5
24636: ARRAY
24637: PUSH
24638: LD_EXP 91
24642: EQUAL
24643: IFFALSE 24647
// break ;
24645: GO 24794
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24647: LD_ADDR_EXP 93
24651: PUSH
24652: LD_EXP 93
24656: PPUSH
24657: LD_VAR 0 5
24661: PPUSH
24662: LD_EXP 93
24666: PUSH
24667: LD_VAR 0 5
24671: ARRAY
24672: PUSH
24673: LD_INT 1
24675: PLUS
24676: PPUSH
24677: CALL_OW 1
24681: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24682: LD_ADDR_EXP 90
24686: PUSH
24687: LD_EXP 90
24691: PPUSH
24692: LD_VAR 0 5
24696: PUSH
24697: LD_EXP 90
24701: PUSH
24702: LD_VAR 0 5
24706: ARRAY
24707: PUSH
24708: LD_INT 1
24710: PLUS
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: PPUSH
24716: LD_VAR 0 2
24720: PUSH
24721: LD_VAR 0 4
24725: ARRAY
24726: PUSH
24727: LD_VAR 0 2
24731: PUSH
24732: LD_VAR 0 4
24736: ARRAY
24737: PPUSH
24738: CALL_OW 255
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PPUSH
24747: CALL 32333 0 3
24751: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24752: LD_VAR 0 2
24756: PUSH
24757: LD_VAR 0 4
24761: ARRAY
24762: PPUSH
24763: LD_VAR 0 1
24767: PPUSH
24768: CALL_OW 255
24772: PPUSH
24773: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24777: LD_VAR 0 2
24781: PUSH
24782: LD_VAR 0 4
24786: ARRAY
24787: PPUSH
24788: CALL_OW 141
// end ;
24792: GO 24624
24794: POP
24795: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24796: LD_VAR 0 1
24800: PPUSH
24801: LD_EXP 90
24805: PUSH
24806: LD_VAR 0 5
24810: ARRAY
24811: PUSH
24812: LD_INT 0
24814: PLUS
24815: PPUSH
24816: CALL_OW 505
// end ;
24820: LD_VAR 0 3
24824: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24825: LD_INT 0
24827: PPUSH
24828: PPUSH
24829: PPUSH
24830: PPUSH
// if not hack in hackTanks then
24831: LD_VAR 0 1
24835: PUSH
24836: LD_EXP 89
24840: IN
24841: NOT
24842: IFFALSE 24846
// exit ;
24844: GO 25086
// index := GetElementIndex ( hackTanks , hack ) ;
24846: LD_ADDR_VAR 0 4
24850: PUSH
24851: LD_EXP 89
24855: PPUSH
24856: LD_VAR 0 1
24860: PPUSH
24861: CALL 32118 0 2
24865: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24866: LD_ADDR_VAR 0 3
24870: PUSH
24871: DOUBLE
24872: LD_EXP 90
24876: PUSH
24877: LD_VAR 0 4
24881: ARRAY
24882: INC
24883: ST_TO_ADDR
24884: LD_INT 1
24886: PUSH
24887: FOR_DOWNTO
24888: IFFALSE 25060
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24890: LD_ADDR_VAR 0 5
24894: PUSH
24895: LD_EXP 90
24899: PUSH
24900: LD_VAR 0 4
24904: ARRAY
24905: PUSH
24906: LD_VAR 0 3
24910: ARRAY
24911: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24912: LD_VAR 0 5
24916: PUSH
24917: LD_INT 1
24919: ARRAY
24920: PPUSH
24921: CALL_OW 302
24925: NOT
24926: PUSH
24927: LD_VAR 0 5
24931: PUSH
24932: LD_INT 1
24934: ARRAY
24935: PPUSH
24936: CALL_OW 255
24940: PUSH
24941: LD_VAR 0 1
24945: PPUSH
24946: CALL_OW 255
24950: NONEQUAL
24951: OR
24952: IFFALSE 25058
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24954: LD_VAR 0 5
24958: PUSH
24959: LD_INT 1
24961: ARRAY
24962: PPUSH
24963: CALL_OW 305
24967: PUSH
24968: LD_VAR 0 5
24972: PUSH
24973: LD_INT 1
24975: ARRAY
24976: PPUSH
24977: CALL_OW 255
24981: PUSH
24982: LD_VAR 0 1
24986: PPUSH
24987: CALL_OW 255
24991: EQUAL
24992: AND
24993: IFFALSE 25017
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24995: LD_VAR 0 5
24999: PUSH
25000: LD_INT 1
25002: ARRAY
25003: PPUSH
25004: LD_VAR 0 5
25008: PUSH
25009: LD_INT 2
25011: ARRAY
25012: PPUSH
25013: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25017: LD_ADDR_EXP 90
25021: PUSH
25022: LD_EXP 90
25026: PPUSH
25027: LD_VAR 0 4
25031: PPUSH
25032: LD_EXP 90
25036: PUSH
25037: LD_VAR 0 4
25041: ARRAY
25042: PPUSH
25043: LD_VAR 0 3
25047: PPUSH
25048: CALL_OW 3
25052: PPUSH
25053: CALL_OW 1
25057: ST_TO_ADDR
// end ; end ;
25058: GO 24887
25060: POP
25061: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25062: LD_VAR 0 1
25066: PPUSH
25067: LD_EXP 90
25071: PUSH
25072: LD_VAR 0 4
25076: ARRAY
25077: PUSH
25078: LD_INT 0
25080: PLUS
25081: PPUSH
25082: CALL_OW 505
// end ;
25086: LD_VAR 0 2
25090: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25091: LD_INT 0
25093: PPUSH
25094: PPUSH
25095: PPUSH
25096: PPUSH
// if not hack in hackTanks then
25097: LD_VAR 0 1
25101: PUSH
25102: LD_EXP 89
25106: IN
25107: NOT
25108: IFFALSE 25112
// exit ;
25110: GO 25197
// index := GetElementIndex ( hackTanks , hack ) ;
25112: LD_ADDR_VAR 0 5
25116: PUSH
25117: LD_EXP 89
25121: PPUSH
25122: LD_VAR 0 1
25126: PPUSH
25127: CALL 32118 0 2
25131: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25132: LD_ADDR_VAR 0 4
25136: PUSH
25137: DOUBLE
25138: LD_INT 1
25140: DEC
25141: ST_TO_ADDR
25142: LD_EXP 90
25146: PUSH
25147: LD_VAR 0 5
25151: ARRAY
25152: PUSH
25153: FOR_TO
25154: IFFALSE 25195
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25156: LD_EXP 90
25160: PUSH
25161: LD_VAR 0 5
25165: ARRAY
25166: PUSH
25167: LD_VAR 0 4
25171: ARRAY
25172: PUSH
25173: LD_INT 1
25175: ARRAY
25176: PUSH
25177: LD_VAR 0 2
25181: EQUAL
25182: IFFALSE 25193
// KillUnit ( vehicle ) ;
25184: LD_VAR 0 2
25188: PPUSH
25189: CALL_OW 66
25193: GO 25153
25195: POP
25196: POP
// end ;
25197: LD_VAR 0 3
25201: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25202: LD_EXP 94
25206: NOT
25207: IFFALSE 25242
25209: GO 25211
25211: DISABLE
// begin initMiner := true ;
25212: LD_ADDR_EXP 94
25216: PUSH
25217: LD_INT 1
25219: ST_TO_ADDR
// minersList := [ ] ;
25220: LD_ADDR_EXP 95
25224: PUSH
25225: EMPTY
25226: ST_TO_ADDR
// minerMinesList := [ ] ;
25227: LD_ADDR_EXP 96
25231: PUSH
25232: EMPTY
25233: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25234: LD_ADDR_EXP 97
25238: PUSH
25239: LD_INT 5
25241: ST_TO_ADDR
// end ;
25242: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25243: LD_EXP 94
25247: PUSH
25248: LD_INT 34
25250: PUSH
25251: LD_INT 81
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PPUSH
25258: CALL_OW 69
25262: AND
25263: IFFALSE 25724
25265: GO 25267
25267: DISABLE
25268: LD_INT 0
25270: PPUSH
25271: PPUSH
25272: PPUSH
25273: PPUSH
// begin enable ;
25274: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25275: LD_ADDR_VAR 0 1
25279: PUSH
25280: LD_INT 34
25282: PUSH
25283: LD_INT 81
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PPUSH
25290: CALL_OW 69
25294: PUSH
25295: FOR_IN
25296: IFFALSE 25368
// begin if not i in minersList then
25298: LD_VAR 0 1
25302: PUSH
25303: LD_EXP 95
25307: IN
25308: NOT
25309: IFFALSE 25366
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25311: LD_ADDR_EXP 95
25315: PUSH
25316: LD_EXP 95
25320: PPUSH
25321: LD_EXP 95
25325: PUSH
25326: LD_INT 1
25328: PLUS
25329: PPUSH
25330: LD_VAR 0 1
25334: PPUSH
25335: CALL_OW 1
25339: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25340: LD_ADDR_EXP 96
25344: PUSH
25345: LD_EXP 96
25349: PPUSH
25350: LD_EXP 96
25354: PUSH
25355: LD_INT 1
25357: PLUS
25358: PPUSH
25359: EMPTY
25360: PPUSH
25361: CALL_OW 1
25365: ST_TO_ADDR
// end end ;
25366: GO 25295
25368: POP
25369: POP
// for i := minerMinesList downto 1 do
25370: LD_ADDR_VAR 0 1
25374: PUSH
25375: DOUBLE
25376: LD_EXP 96
25380: INC
25381: ST_TO_ADDR
25382: LD_INT 1
25384: PUSH
25385: FOR_DOWNTO
25386: IFFALSE 25722
// begin if IsLive ( minersList [ i ] ) then
25388: LD_EXP 95
25392: PUSH
25393: LD_VAR 0 1
25397: ARRAY
25398: PPUSH
25399: CALL_OW 300
25403: IFFALSE 25431
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25405: LD_EXP 95
25409: PUSH
25410: LD_VAR 0 1
25414: ARRAY
25415: PPUSH
25416: LD_EXP 96
25420: PUSH
25421: LD_VAR 0 1
25425: ARRAY
25426: PPUSH
25427: CALL_OW 505
// if not minerMinesList [ i ] then
25431: LD_EXP 96
25435: PUSH
25436: LD_VAR 0 1
25440: ARRAY
25441: NOT
25442: IFFALSE 25446
// continue ;
25444: GO 25385
// for j := minerMinesList [ i ] downto 1 do
25446: LD_ADDR_VAR 0 2
25450: PUSH
25451: DOUBLE
25452: LD_EXP 96
25456: PUSH
25457: LD_VAR 0 1
25461: ARRAY
25462: INC
25463: ST_TO_ADDR
25464: LD_INT 1
25466: PUSH
25467: FOR_DOWNTO
25468: IFFALSE 25718
// begin side := GetSide ( minersList [ i ] ) ;
25470: LD_ADDR_VAR 0 3
25474: PUSH
25475: LD_EXP 95
25479: PUSH
25480: LD_VAR 0 1
25484: ARRAY
25485: PPUSH
25486: CALL_OW 255
25490: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25491: LD_ADDR_VAR 0 4
25495: PUSH
25496: LD_EXP 96
25500: PUSH
25501: LD_VAR 0 1
25505: ARRAY
25506: PUSH
25507: LD_VAR 0 2
25511: ARRAY
25512: PUSH
25513: LD_INT 1
25515: ARRAY
25516: PPUSH
25517: LD_EXP 96
25521: PUSH
25522: LD_VAR 0 1
25526: ARRAY
25527: PUSH
25528: LD_VAR 0 2
25532: ARRAY
25533: PUSH
25534: LD_INT 2
25536: ARRAY
25537: PPUSH
25538: CALL_OW 428
25542: ST_TO_ADDR
// if not tmp then
25543: LD_VAR 0 4
25547: NOT
25548: IFFALSE 25552
// continue ;
25550: GO 25467
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25552: LD_VAR 0 4
25556: PUSH
25557: LD_INT 81
25559: PUSH
25560: LD_VAR 0 3
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PPUSH
25569: CALL_OW 69
25573: IN
25574: PUSH
25575: LD_EXP 96
25579: PUSH
25580: LD_VAR 0 1
25584: ARRAY
25585: PUSH
25586: LD_VAR 0 2
25590: ARRAY
25591: PUSH
25592: LD_INT 1
25594: ARRAY
25595: PPUSH
25596: LD_EXP 96
25600: PUSH
25601: LD_VAR 0 1
25605: ARRAY
25606: PUSH
25607: LD_VAR 0 2
25611: ARRAY
25612: PUSH
25613: LD_INT 2
25615: ARRAY
25616: PPUSH
25617: CALL_OW 458
25621: AND
25622: IFFALSE 25716
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25624: LD_EXP 96
25628: PUSH
25629: LD_VAR 0 1
25633: ARRAY
25634: PUSH
25635: LD_VAR 0 2
25639: ARRAY
25640: PUSH
25641: LD_INT 1
25643: ARRAY
25644: PPUSH
25645: LD_EXP 96
25649: PUSH
25650: LD_VAR 0 1
25654: ARRAY
25655: PUSH
25656: LD_VAR 0 2
25660: ARRAY
25661: PUSH
25662: LD_INT 2
25664: ARRAY
25665: PPUSH
25666: LD_VAR 0 3
25670: PPUSH
25671: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25675: LD_ADDR_EXP 96
25679: PUSH
25680: LD_EXP 96
25684: PPUSH
25685: LD_VAR 0 1
25689: PPUSH
25690: LD_EXP 96
25694: PUSH
25695: LD_VAR 0 1
25699: ARRAY
25700: PPUSH
25701: LD_VAR 0 2
25705: PPUSH
25706: CALL_OW 3
25710: PPUSH
25711: CALL_OW 1
25715: ST_TO_ADDR
// end ; end ;
25716: GO 25467
25718: POP
25719: POP
// end ;
25720: GO 25385
25722: POP
25723: POP
// end ;
25724: PPOPN 4
25726: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25727: LD_INT 0
25729: PPUSH
25730: PPUSH
// result := false ;
25731: LD_ADDR_VAR 0 4
25735: PUSH
25736: LD_INT 0
25738: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25739: LD_VAR 0 1
25743: PPUSH
25744: CALL_OW 264
25748: PUSH
25749: LD_INT 81
25751: EQUAL
25752: NOT
25753: IFFALSE 25757
// exit ;
25755: GO 25997
// index := GetElementIndex ( minersList , unit ) ;
25757: LD_ADDR_VAR 0 5
25761: PUSH
25762: LD_EXP 95
25766: PPUSH
25767: LD_VAR 0 1
25771: PPUSH
25772: CALL 32118 0 2
25776: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25777: LD_EXP 96
25781: PUSH
25782: LD_VAR 0 5
25786: ARRAY
25787: PUSH
25788: LD_EXP 97
25792: GREATEREQUAL
25793: IFFALSE 25797
// exit ;
25795: GO 25997
// ComMoveXY ( unit , x , y ) ;
25797: LD_VAR 0 1
25801: PPUSH
25802: LD_VAR 0 2
25806: PPUSH
25807: LD_VAR 0 3
25811: PPUSH
25812: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25816: LD_INT 35
25818: PPUSH
25819: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25823: LD_VAR 0 1
25827: PPUSH
25828: LD_VAR 0 2
25832: PPUSH
25833: LD_VAR 0 3
25837: PPUSH
25838: CALL 64020 0 3
25842: NOT
25843: PUSH
25844: LD_VAR 0 1
25848: PPUSH
25849: CALL_OW 314
25853: AND
25854: IFFALSE 25858
// exit ;
25856: GO 25997
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25858: LD_VAR 0 2
25862: PPUSH
25863: LD_VAR 0 3
25867: PPUSH
25868: CALL_OW 428
25872: PUSH
25873: LD_VAR 0 1
25877: EQUAL
25878: PUSH
25879: LD_VAR 0 1
25883: PPUSH
25884: CALL_OW 314
25888: NOT
25889: AND
25890: IFFALSE 25816
// PlaySoundXY ( x , y , PlantMine ) ;
25892: LD_VAR 0 2
25896: PPUSH
25897: LD_VAR 0 3
25901: PPUSH
25902: LD_STRING PlantMine
25904: PPUSH
25905: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25909: LD_VAR 0 2
25913: PPUSH
25914: LD_VAR 0 3
25918: PPUSH
25919: LD_VAR 0 1
25923: PPUSH
25924: CALL_OW 255
25928: PPUSH
25929: LD_INT 0
25931: PPUSH
25932: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25936: LD_ADDR_EXP 96
25940: PUSH
25941: LD_EXP 96
25945: PPUSH
25946: LD_VAR 0 5
25950: PUSH
25951: LD_EXP 96
25955: PUSH
25956: LD_VAR 0 5
25960: ARRAY
25961: PUSH
25962: LD_INT 1
25964: PLUS
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PPUSH
25970: LD_VAR 0 2
25974: PUSH
25975: LD_VAR 0 3
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PPUSH
25984: CALL 32333 0 3
25988: ST_TO_ADDR
// result := true ;
25989: LD_ADDR_VAR 0 4
25993: PUSH
25994: LD_INT 1
25996: ST_TO_ADDR
// end ;
25997: LD_VAR 0 4
26001: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26002: LD_INT 0
26004: PPUSH
26005: PPUSH
26006: PPUSH
// if not unit in minersList then
26007: LD_VAR 0 1
26011: PUSH
26012: LD_EXP 95
26016: IN
26017: NOT
26018: IFFALSE 26022
// exit ;
26020: GO 26414
// index := GetElementIndex ( minersList , unit ) ;
26022: LD_ADDR_VAR 0 6
26026: PUSH
26027: LD_EXP 95
26031: PPUSH
26032: LD_VAR 0 1
26036: PPUSH
26037: CALL 32118 0 2
26041: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26042: LD_ADDR_VAR 0 5
26046: PUSH
26047: DOUBLE
26048: LD_EXP 96
26052: PUSH
26053: LD_VAR 0 6
26057: ARRAY
26058: INC
26059: ST_TO_ADDR
26060: LD_INT 1
26062: PUSH
26063: FOR_DOWNTO
26064: IFFALSE 26225
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26066: LD_EXP 96
26070: PUSH
26071: LD_VAR 0 6
26075: ARRAY
26076: PUSH
26077: LD_VAR 0 5
26081: ARRAY
26082: PUSH
26083: LD_INT 1
26085: ARRAY
26086: PUSH
26087: LD_VAR 0 2
26091: EQUAL
26092: PUSH
26093: LD_EXP 96
26097: PUSH
26098: LD_VAR 0 6
26102: ARRAY
26103: PUSH
26104: LD_VAR 0 5
26108: ARRAY
26109: PUSH
26110: LD_INT 2
26112: ARRAY
26113: PUSH
26114: LD_VAR 0 3
26118: EQUAL
26119: AND
26120: IFFALSE 26223
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26122: LD_EXP 96
26126: PUSH
26127: LD_VAR 0 6
26131: ARRAY
26132: PUSH
26133: LD_VAR 0 5
26137: ARRAY
26138: PUSH
26139: LD_INT 1
26141: ARRAY
26142: PPUSH
26143: LD_EXP 96
26147: PUSH
26148: LD_VAR 0 6
26152: ARRAY
26153: PUSH
26154: LD_VAR 0 5
26158: ARRAY
26159: PUSH
26160: LD_INT 2
26162: ARRAY
26163: PPUSH
26164: LD_VAR 0 1
26168: PPUSH
26169: CALL_OW 255
26173: PPUSH
26174: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26178: LD_ADDR_EXP 96
26182: PUSH
26183: LD_EXP 96
26187: PPUSH
26188: LD_VAR 0 6
26192: PPUSH
26193: LD_EXP 96
26197: PUSH
26198: LD_VAR 0 6
26202: ARRAY
26203: PPUSH
26204: LD_VAR 0 5
26208: PPUSH
26209: CALL_OW 3
26213: PPUSH
26214: CALL_OW 1
26218: ST_TO_ADDR
// exit ;
26219: POP
26220: POP
26221: GO 26414
// end ; end ;
26223: GO 26063
26225: POP
26226: POP
// for i := minerMinesList [ index ] downto 1 do
26227: LD_ADDR_VAR 0 5
26231: PUSH
26232: DOUBLE
26233: LD_EXP 96
26237: PUSH
26238: LD_VAR 0 6
26242: ARRAY
26243: INC
26244: ST_TO_ADDR
26245: LD_INT 1
26247: PUSH
26248: FOR_DOWNTO
26249: IFFALSE 26412
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26251: LD_EXP 96
26255: PUSH
26256: LD_VAR 0 6
26260: ARRAY
26261: PUSH
26262: LD_VAR 0 5
26266: ARRAY
26267: PUSH
26268: LD_INT 1
26270: ARRAY
26271: PPUSH
26272: LD_EXP 96
26276: PUSH
26277: LD_VAR 0 6
26281: ARRAY
26282: PUSH
26283: LD_VAR 0 5
26287: ARRAY
26288: PUSH
26289: LD_INT 2
26291: ARRAY
26292: PPUSH
26293: LD_VAR 0 2
26297: PPUSH
26298: LD_VAR 0 3
26302: PPUSH
26303: CALL_OW 298
26307: PUSH
26308: LD_INT 6
26310: LESS
26311: IFFALSE 26410
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26313: LD_EXP 96
26317: PUSH
26318: LD_VAR 0 6
26322: ARRAY
26323: PUSH
26324: LD_VAR 0 5
26328: ARRAY
26329: PUSH
26330: LD_INT 1
26332: ARRAY
26333: PPUSH
26334: LD_EXP 96
26338: PUSH
26339: LD_VAR 0 6
26343: ARRAY
26344: PUSH
26345: LD_VAR 0 5
26349: ARRAY
26350: PUSH
26351: LD_INT 2
26353: ARRAY
26354: PPUSH
26355: LD_VAR 0 1
26359: PPUSH
26360: CALL_OW 255
26364: PPUSH
26365: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26369: LD_ADDR_EXP 96
26373: PUSH
26374: LD_EXP 96
26378: PPUSH
26379: LD_VAR 0 6
26383: PPUSH
26384: LD_EXP 96
26388: PUSH
26389: LD_VAR 0 6
26393: ARRAY
26394: PPUSH
26395: LD_VAR 0 5
26399: PPUSH
26400: CALL_OW 3
26404: PPUSH
26405: CALL_OW 1
26409: ST_TO_ADDR
// end ; end ;
26410: GO 26248
26412: POP
26413: POP
// end ;
26414: LD_VAR 0 4
26418: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26419: LD_INT 0
26421: PPUSH
26422: PPUSH
26423: PPUSH
26424: PPUSH
26425: PPUSH
26426: PPUSH
26427: PPUSH
26428: PPUSH
26429: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26430: LD_VAR 0 1
26434: PPUSH
26435: CALL_OW 264
26439: PUSH
26440: LD_INT 81
26442: EQUAL
26443: NOT
26444: PUSH
26445: LD_VAR 0 1
26449: PUSH
26450: LD_EXP 95
26454: IN
26455: NOT
26456: OR
26457: IFFALSE 26461
// exit ;
26459: GO 26783
// index := GetElementIndex ( minersList , unit ) ;
26461: LD_ADDR_VAR 0 6
26465: PUSH
26466: LD_EXP 95
26470: PPUSH
26471: LD_VAR 0 1
26475: PPUSH
26476: CALL 32118 0 2
26480: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26481: LD_ADDR_VAR 0 8
26485: PUSH
26486: LD_EXP 97
26490: PUSH
26491: LD_EXP 96
26495: PUSH
26496: LD_VAR 0 6
26500: ARRAY
26501: MINUS
26502: ST_TO_ADDR
// if not minesFreeAmount then
26503: LD_VAR 0 8
26507: NOT
26508: IFFALSE 26512
// exit ;
26510: GO 26783
// tmp := [ ] ;
26512: LD_ADDR_VAR 0 7
26516: PUSH
26517: EMPTY
26518: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26519: LD_ADDR_VAR 0 5
26523: PUSH
26524: DOUBLE
26525: LD_INT 1
26527: DEC
26528: ST_TO_ADDR
26529: LD_VAR 0 8
26533: PUSH
26534: FOR_TO
26535: IFFALSE 26730
// begin _d := rand ( 0 , 5 ) ;
26537: LD_ADDR_VAR 0 11
26541: PUSH
26542: LD_INT 0
26544: PPUSH
26545: LD_INT 5
26547: PPUSH
26548: CALL_OW 12
26552: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26553: LD_ADDR_VAR 0 12
26557: PUSH
26558: LD_INT 2
26560: PPUSH
26561: LD_INT 6
26563: PPUSH
26564: CALL_OW 12
26568: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26569: LD_ADDR_VAR 0 9
26573: PUSH
26574: LD_VAR 0 2
26578: PPUSH
26579: LD_VAR 0 11
26583: PPUSH
26584: LD_VAR 0 12
26588: PPUSH
26589: CALL_OW 272
26593: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26594: LD_ADDR_VAR 0 10
26598: PUSH
26599: LD_VAR 0 3
26603: PPUSH
26604: LD_VAR 0 11
26608: PPUSH
26609: LD_VAR 0 12
26613: PPUSH
26614: CALL_OW 273
26618: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26619: LD_VAR 0 9
26623: PPUSH
26624: LD_VAR 0 10
26628: PPUSH
26629: CALL_OW 488
26633: PUSH
26634: LD_VAR 0 9
26638: PUSH
26639: LD_VAR 0 10
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_VAR 0 7
26652: IN
26653: NOT
26654: AND
26655: PUSH
26656: LD_VAR 0 9
26660: PPUSH
26661: LD_VAR 0 10
26665: PPUSH
26666: CALL_OW 458
26670: NOT
26671: AND
26672: IFFALSE 26714
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26674: LD_ADDR_VAR 0 7
26678: PUSH
26679: LD_VAR 0 7
26683: PPUSH
26684: LD_VAR 0 7
26688: PUSH
26689: LD_INT 1
26691: PLUS
26692: PPUSH
26693: LD_VAR 0 9
26697: PUSH
26698: LD_VAR 0 10
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PPUSH
26707: CALL_OW 1
26711: ST_TO_ADDR
26712: GO 26728
// i := i - 1 ;
26714: LD_ADDR_VAR 0 5
26718: PUSH
26719: LD_VAR 0 5
26723: PUSH
26724: LD_INT 1
26726: MINUS
26727: ST_TO_ADDR
// end ;
26728: GO 26534
26730: POP
26731: POP
// for i in tmp do
26732: LD_ADDR_VAR 0 5
26736: PUSH
26737: LD_VAR 0 7
26741: PUSH
26742: FOR_IN
26743: IFFALSE 26781
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26745: LD_VAR 0 1
26749: PPUSH
26750: LD_VAR 0 5
26754: PUSH
26755: LD_INT 1
26757: ARRAY
26758: PPUSH
26759: LD_VAR 0 5
26763: PUSH
26764: LD_INT 2
26766: ARRAY
26767: PPUSH
26768: CALL 25727 0 3
26772: NOT
26773: IFFALSE 26779
// exit ;
26775: POP
26776: POP
26777: GO 26783
26779: GO 26742
26781: POP
26782: POP
// end ;
26783: LD_VAR 0 4
26787: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
26788: LD_INT 0
26790: PPUSH
26791: PPUSH
26792: PPUSH
26793: PPUSH
26794: PPUSH
26795: PPUSH
26796: PPUSH
26797: PPUSH
26798: PPUSH
// if GetClass ( unit ) <> class_sniper then
26799: LD_VAR 0 1
26803: PPUSH
26804: CALL_OW 257
26808: PUSH
26809: LD_INT 5
26811: NONEQUAL
26812: IFFALSE 26816
// exit ;
26814: GO 27282
// dist := 8 ;
26816: LD_ADDR_VAR 0 5
26820: PUSH
26821: LD_INT 8
26823: ST_TO_ADDR
// viewRange := 12 ;
26824: LD_ADDR_VAR 0 8
26828: PUSH
26829: LD_INT 12
26831: ST_TO_ADDR
// side := GetSide ( unit ) ;
26832: LD_ADDR_VAR 0 6
26836: PUSH
26837: LD_VAR 0 1
26841: PPUSH
26842: CALL_OW 255
26846: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26847: LD_INT 61
26849: PPUSH
26850: LD_VAR 0 6
26854: PPUSH
26855: CALL_OW 321
26859: PUSH
26860: LD_INT 2
26862: EQUAL
26863: IFFALSE 26873
// viewRange := 16 ;
26865: LD_ADDR_VAR 0 8
26869: PUSH
26870: LD_INT 16
26872: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26873: LD_VAR 0 1
26877: PPUSH
26878: LD_VAR 0 2
26882: PPUSH
26883: LD_VAR 0 3
26887: PPUSH
26888: CALL_OW 297
26892: PUSH
26893: LD_VAR 0 5
26897: GREATER
26898: IFFALSE 26977
// begin ComMoveXY ( unit , x , y ) ;
26900: LD_VAR 0 1
26904: PPUSH
26905: LD_VAR 0 2
26909: PPUSH
26910: LD_VAR 0 3
26914: PPUSH
26915: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26919: LD_INT 35
26921: PPUSH
26922: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26926: LD_VAR 0 1
26930: PPUSH
26931: LD_VAR 0 2
26935: PPUSH
26936: LD_VAR 0 3
26940: PPUSH
26941: CALL 64020 0 3
26945: NOT
26946: IFFALSE 26950
// exit ;
26948: GO 27282
// until GetDistUnitXY ( unit , x , y ) < dist ;
26950: LD_VAR 0 1
26954: PPUSH
26955: LD_VAR 0 2
26959: PPUSH
26960: LD_VAR 0 3
26964: PPUSH
26965: CALL_OW 297
26969: PUSH
26970: LD_VAR 0 5
26974: LESS
26975: IFFALSE 26919
// end ; ComTurnXY ( unit , x , y ) ;
26977: LD_VAR 0 1
26981: PPUSH
26982: LD_VAR 0 2
26986: PPUSH
26987: LD_VAR 0 3
26991: PPUSH
26992: CALL_OW 118
// repeat if Multiplayer then
26996: LD_OWVAR 4
27000: IFFALSE 27011
// wait ( 35 ) else
27002: LD_INT 35
27004: PPUSH
27005: CALL_OW 67
27009: GO 27018
// wait ( 5 ) ;
27011: LD_INT 5
27013: PPUSH
27014: CALL_OW 67
// _d := GetDir ( unit ) ;
27018: LD_ADDR_VAR 0 11
27022: PUSH
27023: LD_VAR 0 1
27027: PPUSH
27028: CALL_OW 254
27032: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
27033: LD_ADDR_VAR 0 7
27037: PUSH
27038: LD_VAR 0 1
27042: PPUSH
27043: CALL_OW 250
27047: PPUSH
27048: LD_VAR 0 1
27052: PPUSH
27053: CALL_OW 251
27057: PPUSH
27058: LD_VAR 0 2
27062: PPUSH
27063: LD_VAR 0 3
27067: PPUSH
27068: CALL 66628 0 4
27072: ST_TO_ADDR
// until dir = _d ;
27073: LD_VAR 0 7
27077: PUSH
27078: LD_VAR 0 11
27082: EQUAL
27083: IFFALSE 26996
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
27085: LD_ADDR_VAR 0 9
27089: PUSH
27090: LD_VAR 0 1
27094: PPUSH
27095: CALL_OW 250
27099: PPUSH
27100: LD_VAR 0 7
27104: PPUSH
27105: LD_VAR 0 5
27109: PPUSH
27110: CALL_OW 272
27114: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
27115: LD_ADDR_VAR 0 10
27119: PUSH
27120: LD_VAR 0 1
27124: PPUSH
27125: CALL_OW 251
27129: PPUSH
27130: LD_VAR 0 7
27134: PPUSH
27135: LD_VAR 0 5
27139: PPUSH
27140: CALL_OW 273
27144: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27145: LD_VAR 0 9
27149: PPUSH
27150: LD_VAR 0 10
27154: PPUSH
27155: CALL_OW 488
27159: NOT
27160: IFFALSE 27164
// exit ;
27162: GO 27282
// ComAnimCustom ( unit , 1 ) ;
27164: LD_VAR 0 1
27168: PPUSH
27169: LD_INT 1
27171: PPUSH
27172: CALL_OW 592
// p := 0 ;
27176: LD_ADDR_VAR 0 12
27180: PUSH
27181: LD_INT 0
27183: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27184: LD_VAR 0 9
27188: PPUSH
27189: LD_VAR 0 10
27193: PPUSH
27194: LD_VAR 0 6
27198: PPUSH
27199: LD_VAR 0 8
27203: PPUSH
27204: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
27208: LD_INT 35
27210: PPUSH
27211: CALL_OW 67
// p := Inc ( p ) ;
27215: LD_ADDR_VAR 0 12
27219: PUSH
27220: LD_VAR 0 12
27224: PPUSH
27225: CALL 66584 0 1
27229: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
27230: LD_VAR 0 12
27234: PUSH
27235: LD_INT 3
27237: EQUAL
27238: PUSH
27239: LD_VAR 0 1
27243: PPUSH
27244: CALL_OW 302
27248: NOT
27249: OR
27250: PUSH
27251: LD_VAR 0 1
27255: PPUSH
27256: CALL_OW 301
27260: OR
27261: IFFALSE 27208
// RemoveSeeing ( _x , _y , side ) ;
27263: LD_VAR 0 9
27267: PPUSH
27268: LD_VAR 0 10
27272: PPUSH
27273: LD_VAR 0 6
27277: PPUSH
27278: CALL_OW 331
// end ; end_of_file
27282: LD_VAR 0 4
27286: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27287: LD_INT 0
27289: PPUSH
27290: PPUSH
// if exist_mode then
27291: LD_VAR 0 2
27295: IFFALSE 27341
// begin unit := CreateCharacter ( prefix & ident ) ;
27297: LD_ADDR_VAR 0 5
27301: PUSH
27302: LD_VAR 0 3
27306: PUSH
27307: LD_VAR 0 1
27311: STR
27312: PPUSH
27313: CALL_OW 34
27317: ST_TO_ADDR
// if unit then
27318: LD_VAR 0 5
27322: IFFALSE 27339
// DeleteCharacters ( prefix & ident ) ;
27324: LD_VAR 0 3
27328: PUSH
27329: LD_VAR 0 1
27333: STR
27334: PPUSH
27335: CALL_OW 40
// end else
27339: GO 27356
// unit := NewCharacter ( ident ) ;
27341: LD_ADDR_VAR 0 5
27345: PUSH
27346: LD_VAR 0 1
27350: PPUSH
27351: CALL_OW 25
27355: ST_TO_ADDR
// result := unit ;
27356: LD_ADDR_VAR 0 4
27360: PUSH
27361: LD_VAR 0 5
27365: ST_TO_ADDR
// end ;
27366: LD_VAR 0 4
27370: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
27371: LD_INT 0
27373: PPUSH
27374: PPUSH
// if exist_mode then
27375: LD_VAR 0 2
27379: IFFALSE 27404
// unit := CreateCharacter ( prefix & ident ) else
27381: LD_ADDR_VAR 0 5
27385: PUSH
27386: LD_VAR 0 3
27390: PUSH
27391: LD_VAR 0 1
27395: STR
27396: PPUSH
27397: CALL_OW 34
27401: ST_TO_ADDR
27402: GO 27419
// unit := NewCharacter ( ident ) ;
27404: LD_ADDR_VAR 0 5
27408: PUSH
27409: LD_VAR 0 1
27413: PPUSH
27414: CALL_OW 25
27418: ST_TO_ADDR
// result := unit ;
27419: LD_ADDR_VAR 0 4
27423: PUSH
27424: LD_VAR 0 5
27428: ST_TO_ADDR
// end ;
27429: LD_VAR 0 4
27433: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27434: LD_INT 0
27436: PPUSH
27437: PPUSH
// if not side or not nation then
27438: LD_VAR 0 1
27442: NOT
27443: PUSH
27444: LD_VAR 0 2
27448: NOT
27449: OR
27450: IFFALSE 27454
// exit ;
27452: GO 28222
// case nation of nation_american :
27454: LD_VAR 0 2
27458: PUSH
27459: LD_INT 1
27461: DOUBLE
27462: EQUAL
27463: IFTRUE 27467
27465: GO 27681
27467: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27468: LD_ADDR_VAR 0 4
27472: PUSH
27473: LD_INT 35
27475: PUSH
27476: LD_INT 45
27478: PUSH
27479: LD_INT 46
27481: PUSH
27482: LD_INT 47
27484: PUSH
27485: LD_INT 82
27487: PUSH
27488: LD_INT 83
27490: PUSH
27491: LD_INT 84
27493: PUSH
27494: LD_INT 85
27496: PUSH
27497: LD_INT 86
27499: PUSH
27500: LD_INT 1
27502: PUSH
27503: LD_INT 2
27505: PUSH
27506: LD_INT 6
27508: PUSH
27509: LD_INT 15
27511: PUSH
27512: LD_INT 16
27514: PUSH
27515: LD_INT 7
27517: PUSH
27518: LD_INT 12
27520: PUSH
27521: LD_INT 13
27523: PUSH
27524: LD_INT 10
27526: PUSH
27527: LD_INT 14
27529: PUSH
27530: LD_INT 20
27532: PUSH
27533: LD_INT 21
27535: PUSH
27536: LD_INT 22
27538: PUSH
27539: LD_INT 25
27541: PUSH
27542: LD_INT 32
27544: PUSH
27545: LD_INT 27
27547: PUSH
27548: LD_INT 36
27550: PUSH
27551: LD_INT 69
27553: PUSH
27554: LD_INT 39
27556: PUSH
27557: LD_INT 34
27559: PUSH
27560: LD_INT 40
27562: PUSH
27563: LD_INT 48
27565: PUSH
27566: LD_INT 49
27568: PUSH
27569: LD_INT 50
27571: PUSH
27572: LD_INT 51
27574: PUSH
27575: LD_INT 52
27577: PUSH
27578: LD_INT 53
27580: PUSH
27581: LD_INT 54
27583: PUSH
27584: LD_INT 55
27586: PUSH
27587: LD_INT 56
27589: PUSH
27590: LD_INT 57
27592: PUSH
27593: LD_INT 58
27595: PUSH
27596: LD_INT 59
27598: PUSH
27599: LD_INT 60
27601: PUSH
27602: LD_INT 61
27604: PUSH
27605: LD_INT 62
27607: PUSH
27608: LD_INT 80
27610: PUSH
27611: LD_INT 82
27613: PUSH
27614: LD_INT 83
27616: PUSH
27617: LD_INT 84
27619: PUSH
27620: LD_INT 85
27622: PUSH
27623: LD_INT 86
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: ST_TO_ADDR
27679: GO 28146
27681: LD_INT 2
27683: DOUBLE
27684: EQUAL
27685: IFTRUE 27689
27687: GO 27915
27689: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27690: LD_ADDR_VAR 0 4
27694: PUSH
27695: LD_INT 35
27697: PUSH
27698: LD_INT 45
27700: PUSH
27701: LD_INT 46
27703: PUSH
27704: LD_INT 47
27706: PUSH
27707: LD_INT 82
27709: PUSH
27710: LD_INT 83
27712: PUSH
27713: LD_INT 84
27715: PUSH
27716: LD_INT 85
27718: PUSH
27719: LD_INT 87
27721: PUSH
27722: LD_INT 70
27724: PUSH
27725: LD_INT 1
27727: PUSH
27728: LD_INT 11
27730: PUSH
27731: LD_INT 3
27733: PUSH
27734: LD_INT 4
27736: PUSH
27737: LD_INT 5
27739: PUSH
27740: LD_INT 6
27742: PUSH
27743: LD_INT 15
27745: PUSH
27746: LD_INT 18
27748: PUSH
27749: LD_INT 7
27751: PUSH
27752: LD_INT 17
27754: PUSH
27755: LD_INT 8
27757: PUSH
27758: LD_INT 20
27760: PUSH
27761: LD_INT 21
27763: PUSH
27764: LD_INT 22
27766: PUSH
27767: LD_INT 72
27769: PUSH
27770: LD_INT 26
27772: PUSH
27773: LD_INT 69
27775: PUSH
27776: LD_INT 39
27778: PUSH
27779: LD_INT 40
27781: PUSH
27782: LD_INT 41
27784: PUSH
27785: LD_INT 42
27787: PUSH
27788: LD_INT 43
27790: PUSH
27791: LD_INT 48
27793: PUSH
27794: LD_INT 49
27796: PUSH
27797: LD_INT 50
27799: PUSH
27800: LD_INT 51
27802: PUSH
27803: LD_INT 52
27805: PUSH
27806: LD_INT 53
27808: PUSH
27809: LD_INT 54
27811: PUSH
27812: LD_INT 55
27814: PUSH
27815: LD_INT 56
27817: PUSH
27818: LD_INT 60
27820: PUSH
27821: LD_INT 61
27823: PUSH
27824: LD_INT 62
27826: PUSH
27827: LD_INT 66
27829: PUSH
27830: LD_INT 67
27832: PUSH
27833: LD_INT 68
27835: PUSH
27836: LD_INT 81
27838: PUSH
27839: LD_INT 82
27841: PUSH
27842: LD_INT 83
27844: PUSH
27845: LD_INT 84
27847: PUSH
27848: LD_INT 85
27850: PUSH
27851: LD_INT 87
27853: PUSH
27854: LD_INT 88
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: ST_TO_ADDR
27913: GO 28146
27915: LD_INT 3
27917: DOUBLE
27918: EQUAL
27919: IFTRUE 27923
27921: GO 28145
27923: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27924: LD_ADDR_VAR 0 4
27928: PUSH
27929: LD_INT 46
27931: PUSH
27932: LD_INT 47
27934: PUSH
27935: LD_INT 1
27937: PUSH
27938: LD_INT 2
27940: PUSH
27941: LD_INT 82
27943: PUSH
27944: LD_INT 83
27946: PUSH
27947: LD_INT 84
27949: PUSH
27950: LD_INT 85
27952: PUSH
27953: LD_INT 86
27955: PUSH
27956: LD_INT 11
27958: PUSH
27959: LD_INT 9
27961: PUSH
27962: LD_INT 20
27964: PUSH
27965: LD_INT 19
27967: PUSH
27968: LD_INT 21
27970: PUSH
27971: LD_INT 24
27973: PUSH
27974: LD_INT 22
27976: PUSH
27977: LD_INT 25
27979: PUSH
27980: LD_INT 28
27982: PUSH
27983: LD_INT 29
27985: PUSH
27986: LD_INT 30
27988: PUSH
27989: LD_INT 31
27991: PUSH
27992: LD_INT 37
27994: PUSH
27995: LD_INT 38
27997: PUSH
27998: LD_INT 32
28000: PUSH
28001: LD_INT 27
28003: PUSH
28004: LD_INT 33
28006: PUSH
28007: LD_INT 69
28009: PUSH
28010: LD_INT 39
28012: PUSH
28013: LD_INT 34
28015: PUSH
28016: LD_INT 40
28018: PUSH
28019: LD_INT 71
28021: PUSH
28022: LD_INT 23
28024: PUSH
28025: LD_INT 44
28027: PUSH
28028: LD_INT 48
28030: PUSH
28031: LD_INT 49
28033: PUSH
28034: LD_INT 50
28036: PUSH
28037: LD_INT 51
28039: PUSH
28040: LD_INT 52
28042: PUSH
28043: LD_INT 53
28045: PUSH
28046: LD_INT 54
28048: PUSH
28049: LD_INT 55
28051: PUSH
28052: LD_INT 56
28054: PUSH
28055: LD_INT 57
28057: PUSH
28058: LD_INT 58
28060: PUSH
28061: LD_INT 59
28063: PUSH
28064: LD_INT 63
28066: PUSH
28067: LD_INT 64
28069: PUSH
28070: LD_INT 65
28072: PUSH
28073: LD_INT 82
28075: PUSH
28076: LD_INT 83
28078: PUSH
28079: LD_INT 84
28081: PUSH
28082: LD_INT 85
28084: PUSH
28085: LD_INT 86
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: ST_TO_ADDR
28143: GO 28146
28145: POP
// if state > - 1 and state < 3 then
28146: LD_VAR 0 3
28150: PUSH
28151: LD_INT 1
28153: NEG
28154: GREATER
28155: PUSH
28156: LD_VAR 0 3
28160: PUSH
28161: LD_INT 3
28163: LESS
28164: AND
28165: IFFALSE 28222
// for i in result do
28167: LD_ADDR_VAR 0 5
28171: PUSH
28172: LD_VAR 0 4
28176: PUSH
28177: FOR_IN
28178: IFFALSE 28220
// if GetTech ( i , side ) <> state then
28180: LD_VAR 0 5
28184: PPUSH
28185: LD_VAR 0 1
28189: PPUSH
28190: CALL_OW 321
28194: PUSH
28195: LD_VAR 0 3
28199: NONEQUAL
28200: IFFALSE 28218
// result := result diff i ;
28202: LD_ADDR_VAR 0 4
28206: PUSH
28207: LD_VAR 0 4
28211: PUSH
28212: LD_VAR 0 5
28216: DIFF
28217: ST_TO_ADDR
28218: GO 28177
28220: POP
28221: POP
// end ;
28222: LD_VAR 0 4
28226: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28227: LD_INT 0
28229: PPUSH
28230: PPUSH
28231: PPUSH
// result := true ;
28232: LD_ADDR_VAR 0 3
28236: PUSH
28237: LD_INT 1
28239: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28240: LD_ADDR_VAR 0 5
28244: PUSH
28245: LD_VAR 0 2
28249: PPUSH
28250: CALL_OW 480
28254: ST_TO_ADDR
// if not tmp then
28255: LD_VAR 0 5
28259: NOT
28260: IFFALSE 28264
// exit ;
28262: GO 28313
// for i in tmp do
28264: LD_ADDR_VAR 0 4
28268: PUSH
28269: LD_VAR 0 5
28273: PUSH
28274: FOR_IN
28275: IFFALSE 28311
// if GetTech ( i , side ) <> state_researched then
28277: LD_VAR 0 4
28281: PPUSH
28282: LD_VAR 0 1
28286: PPUSH
28287: CALL_OW 321
28291: PUSH
28292: LD_INT 2
28294: NONEQUAL
28295: IFFALSE 28309
// begin result := false ;
28297: LD_ADDR_VAR 0 3
28301: PUSH
28302: LD_INT 0
28304: ST_TO_ADDR
// exit ;
28305: POP
28306: POP
28307: GO 28313
// end ;
28309: GO 28274
28311: POP
28312: POP
// end ;
28313: LD_VAR 0 3
28317: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28318: LD_INT 0
28320: PPUSH
28321: PPUSH
28322: PPUSH
28323: PPUSH
28324: PPUSH
28325: PPUSH
28326: PPUSH
28327: PPUSH
28328: PPUSH
28329: PPUSH
28330: PPUSH
28331: PPUSH
28332: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28333: LD_VAR 0 1
28337: NOT
28338: PUSH
28339: LD_VAR 0 1
28343: PPUSH
28344: CALL_OW 257
28348: PUSH
28349: LD_INT 9
28351: NONEQUAL
28352: OR
28353: IFFALSE 28357
// exit ;
28355: GO 28930
// side := GetSide ( unit ) ;
28357: LD_ADDR_VAR 0 9
28361: PUSH
28362: LD_VAR 0 1
28366: PPUSH
28367: CALL_OW 255
28371: ST_TO_ADDR
// tech_space := tech_spacanom ;
28372: LD_ADDR_VAR 0 12
28376: PUSH
28377: LD_INT 29
28379: ST_TO_ADDR
// tech_time := tech_taurad ;
28380: LD_ADDR_VAR 0 13
28384: PUSH
28385: LD_INT 28
28387: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28388: LD_ADDR_VAR 0 11
28392: PUSH
28393: LD_VAR 0 1
28397: PPUSH
28398: CALL_OW 310
28402: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28403: LD_VAR 0 11
28407: PPUSH
28408: CALL_OW 247
28412: PUSH
28413: LD_INT 2
28415: EQUAL
28416: IFFALSE 28420
// exit ;
28418: GO 28930
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28420: LD_ADDR_VAR 0 8
28424: PUSH
28425: LD_INT 81
28427: PUSH
28428: LD_VAR 0 9
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 3
28439: PUSH
28440: LD_INT 21
28442: PUSH
28443: LD_INT 3
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PPUSH
28458: CALL_OW 69
28462: ST_TO_ADDR
// if not tmp then
28463: LD_VAR 0 8
28467: NOT
28468: IFFALSE 28472
// exit ;
28470: GO 28930
// if in_unit then
28472: LD_VAR 0 11
28476: IFFALSE 28500
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28478: LD_ADDR_VAR 0 10
28482: PUSH
28483: LD_VAR 0 8
28487: PPUSH
28488: LD_VAR 0 11
28492: PPUSH
28493: CALL_OW 74
28497: ST_TO_ADDR
28498: GO 28520
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28500: LD_ADDR_VAR 0 10
28504: PUSH
28505: LD_VAR 0 8
28509: PPUSH
28510: LD_VAR 0 1
28514: PPUSH
28515: CALL_OW 74
28519: ST_TO_ADDR
// if not enemy then
28520: LD_VAR 0 10
28524: NOT
28525: IFFALSE 28529
// exit ;
28527: GO 28930
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28529: LD_VAR 0 11
28533: PUSH
28534: LD_VAR 0 11
28538: PPUSH
28539: LD_VAR 0 10
28543: PPUSH
28544: CALL_OW 296
28548: PUSH
28549: LD_INT 13
28551: GREATER
28552: AND
28553: PUSH
28554: LD_VAR 0 1
28558: PPUSH
28559: LD_VAR 0 10
28563: PPUSH
28564: CALL_OW 296
28568: PUSH
28569: LD_INT 12
28571: GREATER
28572: OR
28573: IFFALSE 28577
// exit ;
28575: GO 28930
// missile := [ 1 ] ;
28577: LD_ADDR_VAR 0 14
28581: PUSH
28582: LD_INT 1
28584: PUSH
28585: EMPTY
28586: LIST
28587: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28588: LD_VAR 0 9
28592: PPUSH
28593: LD_VAR 0 12
28597: PPUSH
28598: CALL_OW 325
28602: IFFALSE 28631
// missile := Replace ( missile , missile + 1 , 2 ) ;
28604: LD_ADDR_VAR 0 14
28608: PUSH
28609: LD_VAR 0 14
28613: PPUSH
28614: LD_VAR 0 14
28618: PUSH
28619: LD_INT 1
28621: PLUS
28622: PPUSH
28623: LD_INT 2
28625: PPUSH
28626: CALL_OW 1
28630: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28631: LD_VAR 0 9
28635: PPUSH
28636: LD_VAR 0 13
28640: PPUSH
28641: CALL_OW 325
28645: PUSH
28646: LD_VAR 0 10
28650: PPUSH
28651: CALL_OW 255
28655: PPUSH
28656: LD_VAR 0 13
28660: PPUSH
28661: CALL_OW 325
28665: NOT
28666: AND
28667: IFFALSE 28696
// missile := Replace ( missile , missile + 1 , 3 ) ;
28669: LD_ADDR_VAR 0 14
28673: PUSH
28674: LD_VAR 0 14
28678: PPUSH
28679: LD_VAR 0 14
28683: PUSH
28684: LD_INT 1
28686: PLUS
28687: PPUSH
28688: LD_INT 3
28690: PPUSH
28691: CALL_OW 1
28695: ST_TO_ADDR
// if missile < 2 then
28696: LD_VAR 0 14
28700: PUSH
28701: LD_INT 2
28703: LESS
28704: IFFALSE 28708
// exit ;
28706: GO 28930
// x := GetX ( enemy ) ;
28708: LD_ADDR_VAR 0 4
28712: PUSH
28713: LD_VAR 0 10
28717: PPUSH
28718: CALL_OW 250
28722: ST_TO_ADDR
// y := GetY ( enemy ) ;
28723: LD_ADDR_VAR 0 5
28727: PUSH
28728: LD_VAR 0 10
28732: PPUSH
28733: CALL_OW 251
28737: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28738: LD_ADDR_VAR 0 6
28742: PUSH
28743: LD_VAR 0 4
28747: PUSH
28748: LD_INT 1
28750: NEG
28751: PPUSH
28752: LD_INT 1
28754: PPUSH
28755: CALL_OW 12
28759: PLUS
28760: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28761: LD_ADDR_VAR 0 7
28765: PUSH
28766: LD_VAR 0 5
28770: PUSH
28771: LD_INT 1
28773: NEG
28774: PPUSH
28775: LD_INT 1
28777: PPUSH
28778: CALL_OW 12
28782: PLUS
28783: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28784: LD_VAR 0 6
28788: PPUSH
28789: LD_VAR 0 7
28793: PPUSH
28794: CALL_OW 488
28798: NOT
28799: IFFALSE 28821
// begin _x := x ;
28801: LD_ADDR_VAR 0 6
28805: PUSH
28806: LD_VAR 0 4
28810: ST_TO_ADDR
// _y := y ;
28811: LD_ADDR_VAR 0 7
28815: PUSH
28816: LD_VAR 0 5
28820: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28821: LD_ADDR_VAR 0 3
28825: PUSH
28826: LD_INT 1
28828: PPUSH
28829: LD_VAR 0 14
28833: PPUSH
28834: CALL_OW 12
28838: ST_TO_ADDR
// case i of 1 :
28839: LD_VAR 0 3
28843: PUSH
28844: LD_INT 1
28846: DOUBLE
28847: EQUAL
28848: IFTRUE 28852
28850: GO 28869
28852: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28853: LD_VAR 0 1
28857: PPUSH
28858: LD_VAR 0 10
28862: PPUSH
28863: CALL_OW 115
28867: GO 28930
28869: LD_INT 2
28871: DOUBLE
28872: EQUAL
28873: IFTRUE 28877
28875: GO 28899
28877: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28878: LD_VAR 0 1
28882: PPUSH
28883: LD_VAR 0 6
28887: PPUSH
28888: LD_VAR 0 7
28892: PPUSH
28893: CALL_OW 153
28897: GO 28930
28899: LD_INT 3
28901: DOUBLE
28902: EQUAL
28903: IFTRUE 28907
28905: GO 28929
28907: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28908: LD_VAR 0 1
28912: PPUSH
28913: LD_VAR 0 6
28917: PPUSH
28918: LD_VAR 0 7
28922: PPUSH
28923: CALL_OW 154
28927: GO 28930
28929: POP
// end ;
28930: LD_VAR 0 2
28934: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28935: LD_INT 0
28937: PPUSH
28938: PPUSH
28939: PPUSH
28940: PPUSH
28941: PPUSH
28942: PPUSH
// if not unit or not building then
28943: LD_VAR 0 1
28947: NOT
28948: PUSH
28949: LD_VAR 0 2
28953: NOT
28954: OR
28955: IFFALSE 28959
// exit ;
28957: GO 29117
// x := GetX ( building ) ;
28959: LD_ADDR_VAR 0 5
28963: PUSH
28964: LD_VAR 0 2
28968: PPUSH
28969: CALL_OW 250
28973: ST_TO_ADDR
// y := GetY ( building ) ;
28974: LD_ADDR_VAR 0 6
28978: PUSH
28979: LD_VAR 0 2
28983: PPUSH
28984: CALL_OW 251
28988: ST_TO_ADDR
// for i := 0 to 5 do
28989: LD_ADDR_VAR 0 4
28993: PUSH
28994: DOUBLE
28995: LD_INT 0
28997: DEC
28998: ST_TO_ADDR
28999: LD_INT 5
29001: PUSH
29002: FOR_TO
29003: IFFALSE 29115
// begin _x := ShiftX ( x , i , 3 ) ;
29005: LD_ADDR_VAR 0 7
29009: PUSH
29010: LD_VAR 0 5
29014: PPUSH
29015: LD_VAR 0 4
29019: PPUSH
29020: LD_INT 3
29022: PPUSH
29023: CALL_OW 272
29027: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29028: LD_ADDR_VAR 0 8
29032: PUSH
29033: LD_VAR 0 6
29037: PPUSH
29038: LD_VAR 0 4
29042: PPUSH
29043: LD_INT 3
29045: PPUSH
29046: CALL_OW 273
29050: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29051: LD_VAR 0 7
29055: PPUSH
29056: LD_VAR 0 8
29060: PPUSH
29061: CALL_OW 488
29065: NOT
29066: IFFALSE 29070
// continue ;
29068: GO 29002
// if HexInfo ( _x , _y ) = 0 then
29070: LD_VAR 0 7
29074: PPUSH
29075: LD_VAR 0 8
29079: PPUSH
29080: CALL_OW 428
29084: PUSH
29085: LD_INT 0
29087: EQUAL
29088: IFFALSE 29113
// begin ComMoveXY ( unit , _x , _y ) ;
29090: LD_VAR 0 1
29094: PPUSH
29095: LD_VAR 0 7
29099: PPUSH
29100: LD_VAR 0 8
29104: PPUSH
29105: CALL_OW 111
// exit ;
29109: POP
29110: POP
29111: GO 29117
// end ; end ;
29113: GO 29002
29115: POP
29116: POP
// end ;
29117: LD_VAR 0 3
29121: RET
// export function ScanBase ( side , base_area ) ; begin
29122: LD_INT 0
29124: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29125: LD_ADDR_VAR 0 3
29129: PUSH
29130: LD_VAR 0 2
29134: PPUSH
29135: LD_INT 81
29137: PUSH
29138: LD_VAR 0 1
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PPUSH
29147: CALL_OW 70
29151: ST_TO_ADDR
// end ;
29152: LD_VAR 0 3
29156: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29157: LD_INT 0
29159: PPUSH
29160: PPUSH
29161: PPUSH
29162: PPUSH
// result := false ;
29163: LD_ADDR_VAR 0 2
29167: PUSH
29168: LD_INT 0
29170: ST_TO_ADDR
// side := GetSide ( unit ) ;
29171: LD_ADDR_VAR 0 3
29175: PUSH
29176: LD_VAR 0 1
29180: PPUSH
29181: CALL_OW 255
29185: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29186: LD_ADDR_VAR 0 4
29190: PUSH
29191: LD_VAR 0 1
29195: PPUSH
29196: CALL_OW 248
29200: ST_TO_ADDR
// case nat of 1 :
29201: LD_VAR 0 4
29205: PUSH
29206: LD_INT 1
29208: DOUBLE
29209: EQUAL
29210: IFTRUE 29214
29212: GO 29225
29214: POP
// tech := tech_lassight ; 2 :
29215: LD_ADDR_VAR 0 5
29219: PUSH
29220: LD_INT 12
29222: ST_TO_ADDR
29223: GO 29264
29225: LD_INT 2
29227: DOUBLE
29228: EQUAL
29229: IFTRUE 29233
29231: GO 29244
29233: POP
// tech := tech_mortar ; 3 :
29234: LD_ADDR_VAR 0 5
29238: PUSH
29239: LD_INT 41
29241: ST_TO_ADDR
29242: GO 29264
29244: LD_INT 3
29246: DOUBLE
29247: EQUAL
29248: IFTRUE 29252
29250: GO 29263
29252: POP
// tech := tech_bazooka ; end ;
29253: LD_ADDR_VAR 0 5
29257: PUSH
29258: LD_INT 44
29260: ST_TO_ADDR
29261: GO 29264
29263: POP
// if Researched ( side , tech ) then
29264: LD_VAR 0 3
29268: PPUSH
29269: LD_VAR 0 5
29273: PPUSH
29274: CALL_OW 325
29278: IFFALSE 29305
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29280: LD_ADDR_VAR 0 2
29284: PUSH
29285: LD_INT 5
29287: PUSH
29288: LD_INT 8
29290: PUSH
29291: LD_INT 9
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: LIST
29298: PUSH
29299: LD_VAR 0 4
29303: ARRAY
29304: ST_TO_ADDR
// end ;
29305: LD_VAR 0 2
29309: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29310: LD_INT 0
29312: PPUSH
29313: PPUSH
29314: PPUSH
// if not mines then
29315: LD_VAR 0 2
29319: NOT
29320: IFFALSE 29324
// exit ;
29322: GO 29468
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29324: LD_ADDR_VAR 0 5
29328: PUSH
29329: LD_INT 81
29331: PUSH
29332: LD_VAR 0 1
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 3
29343: PUSH
29344: LD_INT 21
29346: PUSH
29347: LD_INT 3
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PPUSH
29362: CALL_OW 69
29366: ST_TO_ADDR
// for i in mines do
29367: LD_ADDR_VAR 0 4
29371: PUSH
29372: LD_VAR 0 2
29376: PUSH
29377: FOR_IN
29378: IFFALSE 29466
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29380: LD_VAR 0 4
29384: PUSH
29385: LD_INT 1
29387: ARRAY
29388: PPUSH
29389: LD_VAR 0 4
29393: PUSH
29394: LD_INT 2
29396: ARRAY
29397: PPUSH
29398: CALL_OW 458
29402: NOT
29403: IFFALSE 29407
// continue ;
29405: GO 29377
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29407: LD_VAR 0 4
29411: PUSH
29412: LD_INT 1
29414: ARRAY
29415: PPUSH
29416: LD_VAR 0 4
29420: PUSH
29421: LD_INT 2
29423: ARRAY
29424: PPUSH
29425: CALL_OW 428
29429: PUSH
29430: LD_VAR 0 5
29434: IN
29435: IFFALSE 29464
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29437: LD_VAR 0 4
29441: PUSH
29442: LD_INT 1
29444: ARRAY
29445: PPUSH
29446: LD_VAR 0 4
29450: PUSH
29451: LD_INT 2
29453: ARRAY
29454: PPUSH
29455: LD_VAR 0 1
29459: PPUSH
29460: CALL_OW 456
// end ;
29464: GO 29377
29466: POP
29467: POP
// end ;
29468: LD_VAR 0 3
29472: RET
// export function Count ( array ) ; begin
29473: LD_INT 0
29475: PPUSH
// result := array + 0 ;
29476: LD_ADDR_VAR 0 2
29480: PUSH
29481: LD_VAR 0 1
29485: PUSH
29486: LD_INT 0
29488: PLUS
29489: ST_TO_ADDR
// end ;
29490: LD_VAR 0 2
29494: RET
// export function IsEmpty ( building ) ; begin
29495: LD_INT 0
29497: PPUSH
// if not building then
29498: LD_VAR 0 1
29502: NOT
29503: IFFALSE 29507
// exit ;
29505: GO 29550
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29507: LD_ADDR_VAR 0 2
29511: PUSH
29512: LD_VAR 0 1
29516: PUSH
29517: LD_INT 22
29519: PUSH
29520: LD_VAR 0 1
29524: PPUSH
29525: CALL_OW 255
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 58
29536: PUSH
29537: EMPTY
29538: LIST
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PPUSH
29544: CALL_OW 69
29548: IN
29549: ST_TO_ADDR
// end ;
29550: LD_VAR 0 2
29554: RET
// export function IsNotFull ( building ) ; var places ; begin
29555: LD_INT 0
29557: PPUSH
29558: PPUSH
// if not building then
29559: LD_VAR 0 1
29563: NOT
29564: IFFALSE 29568
// exit ;
29566: GO 29596
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
29568: LD_ADDR_VAR 0 2
29572: PUSH
29573: LD_VAR 0 1
29577: PPUSH
29578: LD_INT 3
29580: PUSH
29581: LD_INT 62
29583: PUSH
29584: EMPTY
29585: LIST
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PPUSH
29591: CALL_OW 72
29595: ST_TO_ADDR
// end ;
29596: LD_VAR 0 2
29600: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29601: LD_INT 0
29603: PPUSH
29604: PPUSH
29605: PPUSH
29606: PPUSH
// tmp := [ ] ;
29607: LD_ADDR_VAR 0 3
29611: PUSH
29612: EMPTY
29613: ST_TO_ADDR
// list := [ ] ;
29614: LD_ADDR_VAR 0 5
29618: PUSH
29619: EMPTY
29620: ST_TO_ADDR
// for i = 16 to 25 do
29621: LD_ADDR_VAR 0 4
29625: PUSH
29626: DOUBLE
29627: LD_INT 16
29629: DEC
29630: ST_TO_ADDR
29631: LD_INT 25
29633: PUSH
29634: FOR_TO
29635: IFFALSE 29708
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29637: LD_ADDR_VAR 0 3
29641: PUSH
29642: LD_VAR 0 3
29646: PUSH
29647: LD_INT 22
29649: PUSH
29650: LD_VAR 0 1
29654: PPUSH
29655: CALL_OW 255
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 91
29666: PUSH
29667: LD_VAR 0 1
29671: PUSH
29672: LD_INT 6
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 30
29682: PUSH
29683: LD_VAR 0 4
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: LIST
29696: PUSH
29697: EMPTY
29698: LIST
29699: PPUSH
29700: CALL_OW 69
29704: ADD
29705: ST_TO_ADDR
29706: GO 29634
29708: POP
29709: POP
// for i = 1 to tmp do
29710: LD_ADDR_VAR 0 4
29714: PUSH
29715: DOUBLE
29716: LD_INT 1
29718: DEC
29719: ST_TO_ADDR
29720: LD_VAR 0 3
29724: PUSH
29725: FOR_TO
29726: IFFALSE 29814
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29728: LD_ADDR_VAR 0 5
29732: PUSH
29733: LD_VAR 0 5
29737: PUSH
29738: LD_VAR 0 3
29742: PUSH
29743: LD_VAR 0 4
29747: ARRAY
29748: PPUSH
29749: CALL_OW 266
29753: PUSH
29754: LD_VAR 0 3
29758: PUSH
29759: LD_VAR 0 4
29763: ARRAY
29764: PPUSH
29765: CALL_OW 250
29769: PUSH
29770: LD_VAR 0 3
29774: PUSH
29775: LD_VAR 0 4
29779: ARRAY
29780: PPUSH
29781: CALL_OW 251
29785: PUSH
29786: LD_VAR 0 3
29790: PUSH
29791: LD_VAR 0 4
29795: ARRAY
29796: PPUSH
29797: CALL_OW 254
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: PUSH
29808: EMPTY
29809: LIST
29810: ADD
29811: ST_TO_ADDR
29812: GO 29725
29814: POP
29815: POP
// result := list ;
29816: LD_ADDR_VAR 0 2
29820: PUSH
29821: LD_VAR 0 5
29825: ST_TO_ADDR
// end ;
29826: LD_VAR 0 2
29830: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29831: LD_INT 0
29833: PPUSH
29834: PPUSH
29835: PPUSH
29836: PPUSH
29837: PPUSH
29838: PPUSH
29839: PPUSH
// if not factory then
29840: LD_VAR 0 1
29844: NOT
29845: IFFALSE 29849
// exit ;
29847: GO 30442
// if control = control_apeman then
29849: LD_VAR 0 4
29853: PUSH
29854: LD_INT 5
29856: EQUAL
29857: IFFALSE 29966
// begin tmp := UnitsInside ( factory ) ;
29859: LD_ADDR_VAR 0 8
29863: PUSH
29864: LD_VAR 0 1
29868: PPUSH
29869: CALL_OW 313
29873: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29874: LD_VAR 0 8
29878: PPUSH
29879: LD_INT 25
29881: PUSH
29882: LD_INT 12
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PPUSH
29889: CALL_OW 72
29893: NOT
29894: IFFALSE 29904
// control := control_manual ;
29896: LD_ADDR_VAR 0 4
29900: PUSH
29901: LD_INT 1
29903: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29904: LD_ADDR_VAR 0 8
29908: PUSH
29909: LD_VAR 0 1
29913: PPUSH
29914: CALL 29601 0 1
29918: ST_TO_ADDR
// if tmp then
29919: LD_VAR 0 8
29923: IFFALSE 29966
// begin for i in tmp do
29925: LD_ADDR_VAR 0 7
29929: PUSH
29930: LD_VAR 0 8
29934: PUSH
29935: FOR_IN
29936: IFFALSE 29964
// if i [ 1 ] = b_ext_radio then
29938: LD_VAR 0 7
29942: PUSH
29943: LD_INT 1
29945: ARRAY
29946: PUSH
29947: LD_INT 22
29949: EQUAL
29950: IFFALSE 29962
// begin control := control_remote ;
29952: LD_ADDR_VAR 0 4
29956: PUSH
29957: LD_INT 2
29959: ST_TO_ADDR
// break ;
29960: GO 29964
// end ;
29962: GO 29935
29964: POP
29965: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29966: LD_VAR 0 1
29970: PPUSH
29971: LD_VAR 0 2
29975: PPUSH
29976: LD_VAR 0 3
29980: PPUSH
29981: LD_VAR 0 4
29985: PPUSH
29986: LD_VAR 0 5
29990: PPUSH
29991: CALL_OW 448
29995: IFFALSE 30030
// begin result := [ chassis , engine , control , weapon ] ;
29997: LD_ADDR_VAR 0 6
30001: PUSH
30002: LD_VAR 0 2
30006: PUSH
30007: LD_VAR 0 3
30011: PUSH
30012: LD_VAR 0 4
30016: PUSH
30017: LD_VAR 0 5
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: ST_TO_ADDR
// exit ;
30028: GO 30442
// end ; _chassis := AvailableChassisList ( factory ) ;
30030: LD_ADDR_VAR 0 9
30034: PUSH
30035: LD_VAR 0 1
30039: PPUSH
30040: CALL_OW 475
30044: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30045: LD_ADDR_VAR 0 11
30049: PUSH
30050: LD_VAR 0 1
30054: PPUSH
30055: CALL_OW 476
30059: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30060: LD_ADDR_VAR 0 12
30064: PUSH
30065: LD_VAR 0 1
30069: PPUSH
30070: CALL_OW 477
30074: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30075: LD_ADDR_VAR 0 10
30079: PUSH
30080: LD_VAR 0 1
30084: PPUSH
30085: CALL_OW 478
30089: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30090: LD_VAR 0 9
30094: NOT
30095: PUSH
30096: LD_VAR 0 11
30100: NOT
30101: OR
30102: PUSH
30103: LD_VAR 0 12
30107: NOT
30108: OR
30109: PUSH
30110: LD_VAR 0 10
30114: NOT
30115: OR
30116: IFFALSE 30151
// begin result := [ chassis , engine , control , weapon ] ;
30118: LD_ADDR_VAR 0 6
30122: PUSH
30123: LD_VAR 0 2
30127: PUSH
30128: LD_VAR 0 3
30132: PUSH
30133: LD_VAR 0 4
30137: PUSH
30138: LD_VAR 0 5
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: ST_TO_ADDR
// exit ;
30149: GO 30442
// end ; if not chassis in _chassis then
30151: LD_VAR 0 2
30155: PUSH
30156: LD_VAR 0 9
30160: IN
30161: NOT
30162: IFFALSE 30188
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30164: LD_ADDR_VAR 0 2
30168: PUSH
30169: LD_VAR 0 9
30173: PUSH
30174: LD_INT 1
30176: PPUSH
30177: LD_VAR 0 9
30181: PPUSH
30182: CALL_OW 12
30186: ARRAY
30187: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30188: LD_VAR 0 2
30192: PPUSH
30193: LD_VAR 0 3
30197: PPUSH
30198: CALL 30447 0 2
30202: NOT
30203: IFFALSE 30262
// repeat engine := _engine [ 1 ] ;
30205: LD_ADDR_VAR 0 3
30209: PUSH
30210: LD_VAR 0 11
30214: PUSH
30215: LD_INT 1
30217: ARRAY
30218: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30219: LD_ADDR_VAR 0 11
30223: PUSH
30224: LD_VAR 0 11
30228: PPUSH
30229: LD_INT 1
30231: PPUSH
30232: CALL_OW 3
30236: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30237: LD_VAR 0 2
30241: PPUSH
30242: LD_VAR 0 3
30246: PPUSH
30247: CALL 30447 0 2
30251: PUSH
30252: LD_VAR 0 11
30256: PUSH
30257: EMPTY
30258: EQUAL
30259: OR
30260: IFFALSE 30205
// if not control in _control then
30262: LD_VAR 0 4
30266: PUSH
30267: LD_VAR 0 12
30271: IN
30272: NOT
30273: IFFALSE 30299
// control := _control [ rand ( 1 , _control ) ] ;
30275: LD_ADDR_VAR 0 4
30279: PUSH
30280: LD_VAR 0 12
30284: PUSH
30285: LD_INT 1
30287: PPUSH
30288: LD_VAR 0 12
30292: PPUSH
30293: CALL_OW 12
30297: ARRAY
30298: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30299: LD_VAR 0 2
30303: PPUSH
30304: LD_VAR 0 5
30308: PPUSH
30309: CALL 30667 0 2
30313: NOT
30314: IFFALSE 30373
// repeat weapon := _weapon [ 1 ] ;
30316: LD_ADDR_VAR 0 5
30320: PUSH
30321: LD_VAR 0 10
30325: PUSH
30326: LD_INT 1
30328: ARRAY
30329: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30330: LD_ADDR_VAR 0 10
30334: PUSH
30335: LD_VAR 0 10
30339: PPUSH
30340: LD_INT 1
30342: PPUSH
30343: CALL_OW 3
30347: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30348: LD_VAR 0 2
30352: PPUSH
30353: LD_VAR 0 5
30357: PPUSH
30358: CALL 30667 0 2
30362: PUSH
30363: LD_VAR 0 10
30367: PUSH
30368: EMPTY
30369: EQUAL
30370: OR
30371: IFFALSE 30316
// result := [ ] ;
30373: LD_ADDR_VAR 0 6
30377: PUSH
30378: EMPTY
30379: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30380: LD_VAR 0 1
30384: PPUSH
30385: LD_VAR 0 2
30389: PPUSH
30390: LD_VAR 0 3
30394: PPUSH
30395: LD_VAR 0 4
30399: PPUSH
30400: LD_VAR 0 5
30404: PPUSH
30405: CALL_OW 448
30409: IFFALSE 30442
// result := [ chassis , engine , control , weapon ] ;
30411: LD_ADDR_VAR 0 6
30415: PUSH
30416: LD_VAR 0 2
30420: PUSH
30421: LD_VAR 0 3
30425: PUSH
30426: LD_VAR 0 4
30430: PUSH
30431: LD_VAR 0 5
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: ST_TO_ADDR
// end ;
30442: LD_VAR 0 6
30446: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30447: LD_INT 0
30449: PPUSH
// if not chassis or not engine then
30450: LD_VAR 0 1
30454: NOT
30455: PUSH
30456: LD_VAR 0 2
30460: NOT
30461: OR
30462: IFFALSE 30466
// exit ;
30464: GO 30662
// case engine of engine_solar :
30466: LD_VAR 0 2
30470: PUSH
30471: LD_INT 2
30473: DOUBLE
30474: EQUAL
30475: IFTRUE 30479
30477: GO 30517
30479: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30480: LD_ADDR_VAR 0 3
30484: PUSH
30485: LD_INT 11
30487: PUSH
30488: LD_INT 12
30490: PUSH
30491: LD_INT 13
30493: PUSH
30494: LD_INT 14
30496: PUSH
30497: LD_INT 1
30499: PUSH
30500: LD_INT 2
30502: PUSH
30503: LD_INT 3
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: ST_TO_ADDR
30515: GO 30646
30517: LD_INT 1
30519: DOUBLE
30520: EQUAL
30521: IFTRUE 30525
30523: GO 30587
30525: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30526: LD_ADDR_VAR 0 3
30530: PUSH
30531: LD_INT 11
30533: PUSH
30534: LD_INT 12
30536: PUSH
30537: LD_INT 13
30539: PUSH
30540: LD_INT 14
30542: PUSH
30543: LD_INT 1
30545: PUSH
30546: LD_INT 2
30548: PUSH
30549: LD_INT 3
30551: PUSH
30552: LD_INT 4
30554: PUSH
30555: LD_INT 5
30557: PUSH
30558: LD_INT 21
30560: PUSH
30561: LD_INT 23
30563: PUSH
30564: LD_INT 22
30566: PUSH
30567: LD_INT 24
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: ST_TO_ADDR
30585: GO 30646
30587: LD_INT 3
30589: DOUBLE
30590: EQUAL
30591: IFTRUE 30595
30593: GO 30645
30595: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30596: LD_ADDR_VAR 0 3
30600: PUSH
30601: LD_INT 13
30603: PUSH
30604: LD_INT 14
30606: PUSH
30607: LD_INT 2
30609: PUSH
30610: LD_INT 3
30612: PUSH
30613: LD_INT 4
30615: PUSH
30616: LD_INT 5
30618: PUSH
30619: LD_INT 21
30621: PUSH
30622: LD_INT 22
30624: PUSH
30625: LD_INT 23
30627: PUSH
30628: LD_INT 24
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: ST_TO_ADDR
30643: GO 30646
30645: POP
// result := ( chassis in result ) ;
30646: LD_ADDR_VAR 0 3
30650: PUSH
30651: LD_VAR 0 1
30655: PUSH
30656: LD_VAR 0 3
30660: IN
30661: ST_TO_ADDR
// end ;
30662: LD_VAR 0 3
30666: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30667: LD_INT 0
30669: PPUSH
// if not chassis or not weapon then
30670: LD_VAR 0 1
30674: NOT
30675: PUSH
30676: LD_VAR 0 2
30680: NOT
30681: OR
30682: IFFALSE 30686
// exit ;
30684: GO 31746
// case weapon of us_machine_gun :
30686: LD_VAR 0 2
30690: PUSH
30691: LD_INT 2
30693: DOUBLE
30694: EQUAL
30695: IFTRUE 30699
30697: GO 30729
30699: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30700: LD_ADDR_VAR 0 3
30704: PUSH
30705: LD_INT 1
30707: PUSH
30708: LD_INT 2
30710: PUSH
30711: LD_INT 3
30713: PUSH
30714: LD_INT 4
30716: PUSH
30717: LD_INT 5
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: ST_TO_ADDR
30727: GO 31730
30729: LD_INT 3
30731: DOUBLE
30732: EQUAL
30733: IFTRUE 30737
30735: GO 30767
30737: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30738: LD_ADDR_VAR 0 3
30742: PUSH
30743: LD_INT 1
30745: PUSH
30746: LD_INT 2
30748: PUSH
30749: LD_INT 3
30751: PUSH
30752: LD_INT 4
30754: PUSH
30755: LD_INT 5
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: ST_TO_ADDR
30765: GO 31730
30767: LD_INT 11
30769: DOUBLE
30770: EQUAL
30771: IFTRUE 30775
30773: GO 30805
30775: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30776: LD_ADDR_VAR 0 3
30780: PUSH
30781: LD_INT 1
30783: PUSH
30784: LD_INT 2
30786: PUSH
30787: LD_INT 3
30789: PUSH
30790: LD_INT 4
30792: PUSH
30793: LD_INT 5
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: ST_TO_ADDR
30803: GO 31730
30805: LD_INT 4
30807: DOUBLE
30808: EQUAL
30809: IFTRUE 30813
30811: GO 30839
30813: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30814: LD_ADDR_VAR 0 3
30818: PUSH
30819: LD_INT 2
30821: PUSH
30822: LD_INT 3
30824: PUSH
30825: LD_INT 4
30827: PUSH
30828: LD_INT 5
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: ST_TO_ADDR
30837: GO 31730
30839: LD_INT 5
30841: DOUBLE
30842: EQUAL
30843: IFTRUE 30847
30845: GO 30873
30847: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30848: LD_ADDR_VAR 0 3
30852: PUSH
30853: LD_INT 2
30855: PUSH
30856: LD_INT 3
30858: PUSH
30859: LD_INT 4
30861: PUSH
30862: LD_INT 5
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: ST_TO_ADDR
30871: GO 31730
30873: LD_INT 9
30875: DOUBLE
30876: EQUAL
30877: IFTRUE 30881
30879: GO 30907
30881: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30882: LD_ADDR_VAR 0 3
30886: PUSH
30887: LD_INT 2
30889: PUSH
30890: LD_INT 3
30892: PUSH
30893: LD_INT 4
30895: PUSH
30896: LD_INT 5
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: ST_TO_ADDR
30905: GO 31730
30907: LD_INT 7
30909: DOUBLE
30910: EQUAL
30911: IFTRUE 30915
30913: GO 30941
30915: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30916: LD_ADDR_VAR 0 3
30920: PUSH
30921: LD_INT 2
30923: PUSH
30924: LD_INT 3
30926: PUSH
30927: LD_INT 4
30929: PUSH
30930: LD_INT 5
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: ST_TO_ADDR
30939: GO 31730
30941: LD_INT 12
30943: DOUBLE
30944: EQUAL
30945: IFTRUE 30949
30947: GO 30975
30949: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30950: LD_ADDR_VAR 0 3
30954: PUSH
30955: LD_INT 2
30957: PUSH
30958: LD_INT 3
30960: PUSH
30961: LD_INT 4
30963: PUSH
30964: LD_INT 5
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: ST_TO_ADDR
30973: GO 31730
30975: LD_INT 13
30977: DOUBLE
30978: EQUAL
30979: IFTRUE 30983
30981: GO 31009
30983: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30984: LD_ADDR_VAR 0 3
30988: PUSH
30989: LD_INT 2
30991: PUSH
30992: LD_INT 3
30994: PUSH
30995: LD_INT 4
30997: PUSH
30998: LD_INT 5
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: ST_TO_ADDR
31007: GO 31730
31009: LD_INT 14
31011: DOUBLE
31012: EQUAL
31013: IFTRUE 31017
31015: GO 31035
31017: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31018: LD_ADDR_VAR 0 3
31022: PUSH
31023: LD_INT 4
31025: PUSH
31026: LD_INT 5
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: ST_TO_ADDR
31033: GO 31730
31035: LD_INT 6
31037: DOUBLE
31038: EQUAL
31039: IFTRUE 31043
31041: GO 31061
31043: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31044: LD_ADDR_VAR 0 3
31048: PUSH
31049: LD_INT 4
31051: PUSH
31052: LD_INT 5
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: ST_TO_ADDR
31059: GO 31730
31061: LD_INT 10
31063: DOUBLE
31064: EQUAL
31065: IFTRUE 31069
31067: GO 31087
31069: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31070: LD_ADDR_VAR 0 3
31074: PUSH
31075: LD_INT 4
31077: PUSH
31078: LD_INT 5
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: ST_TO_ADDR
31085: GO 31730
31087: LD_INT 22
31089: DOUBLE
31090: EQUAL
31091: IFTRUE 31095
31093: GO 31121
31095: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31096: LD_ADDR_VAR 0 3
31100: PUSH
31101: LD_INT 11
31103: PUSH
31104: LD_INT 12
31106: PUSH
31107: LD_INT 13
31109: PUSH
31110: LD_INT 14
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: ST_TO_ADDR
31119: GO 31730
31121: LD_INT 23
31123: DOUBLE
31124: EQUAL
31125: IFTRUE 31129
31127: GO 31155
31129: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31130: LD_ADDR_VAR 0 3
31134: PUSH
31135: LD_INT 11
31137: PUSH
31138: LD_INT 12
31140: PUSH
31141: LD_INT 13
31143: PUSH
31144: LD_INT 14
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: ST_TO_ADDR
31153: GO 31730
31155: LD_INT 24
31157: DOUBLE
31158: EQUAL
31159: IFTRUE 31163
31161: GO 31189
31163: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31164: LD_ADDR_VAR 0 3
31168: PUSH
31169: LD_INT 11
31171: PUSH
31172: LD_INT 12
31174: PUSH
31175: LD_INT 13
31177: PUSH
31178: LD_INT 14
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: ST_TO_ADDR
31187: GO 31730
31189: LD_INT 30
31191: DOUBLE
31192: EQUAL
31193: IFTRUE 31197
31195: GO 31223
31197: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31198: LD_ADDR_VAR 0 3
31202: PUSH
31203: LD_INT 11
31205: PUSH
31206: LD_INT 12
31208: PUSH
31209: LD_INT 13
31211: PUSH
31212: LD_INT 14
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: ST_TO_ADDR
31221: GO 31730
31223: LD_INT 25
31225: DOUBLE
31226: EQUAL
31227: IFTRUE 31231
31229: GO 31249
31231: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31232: LD_ADDR_VAR 0 3
31236: PUSH
31237: LD_INT 13
31239: PUSH
31240: LD_INT 14
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: ST_TO_ADDR
31247: GO 31730
31249: LD_INT 27
31251: DOUBLE
31252: EQUAL
31253: IFTRUE 31257
31255: GO 31275
31257: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31258: LD_ADDR_VAR 0 3
31262: PUSH
31263: LD_INT 13
31265: PUSH
31266: LD_INT 14
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: ST_TO_ADDR
31273: GO 31730
31275: LD_INT 92
31277: DOUBLE
31278: EQUAL
31279: IFTRUE 31283
31281: GO 31309
31283: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31284: LD_ADDR_VAR 0 3
31288: PUSH
31289: LD_INT 11
31291: PUSH
31292: LD_INT 12
31294: PUSH
31295: LD_INT 13
31297: PUSH
31298: LD_INT 14
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: ST_TO_ADDR
31307: GO 31730
31309: LD_INT 28
31311: DOUBLE
31312: EQUAL
31313: IFTRUE 31317
31315: GO 31335
31317: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31318: LD_ADDR_VAR 0 3
31322: PUSH
31323: LD_INT 13
31325: PUSH
31326: LD_INT 14
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: ST_TO_ADDR
31333: GO 31730
31335: LD_INT 29
31337: DOUBLE
31338: EQUAL
31339: IFTRUE 31343
31341: GO 31361
31343: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31344: LD_ADDR_VAR 0 3
31348: PUSH
31349: LD_INT 13
31351: PUSH
31352: LD_INT 14
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: ST_TO_ADDR
31359: GO 31730
31361: LD_INT 31
31363: DOUBLE
31364: EQUAL
31365: IFTRUE 31369
31367: GO 31387
31369: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31370: LD_ADDR_VAR 0 3
31374: PUSH
31375: LD_INT 13
31377: PUSH
31378: LD_INT 14
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: ST_TO_ADDR
31385: GO 31730
31387: LD_INT 26
31389: DOUBLE
31390: EQUAL
31391: IFTRUE 31395
31393: GO 31413
31395: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31396: LD_ADDR_VAR 0 3
31400: PUSH
31401: LD_INT 13
31403: PUSH
31404: LD_INT 14
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: ST_TO_ADDR
31411: GO 31730
31413: LD_INT 42
31415: DOUBLE
31416: EQUAL
31417: IFTRUE 31421
31419: GO 31447
31421: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31422: LD_ADDR_VAR 0 3
31426: PUSH
31427: LD_INT 21
31429: PUSH
31430: LD_INT 22
31432: PUSH
31433: LD_INT 23
31435: PUSH
31436: LD_INT 24
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: ST_TO_ADDR
31445: GO 31730
31447: LD_INT 43
31449: DOUBLE
31450: EQUAL
31451: IFTRUE 31455
31453: GO 31481
31455: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31456: LD_ADDR_VAR 0 3
31460: PUSH
31461: LD_INT 21
31463: PUSH
31464: LD_INT 22
31466: PUSH
31467: LD_INT 23
31469: PUSH
31470: LD_INT 24
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: ST_TO_ADDR
31479: GO 31730
31481: LD_INT 44
31483: DOUBLE
31484: EQUAL
31485: IFTRUE 31489
31487: GO 31515
31489: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31490: LD_ADDR_VAR 0 3
31494: PUSH
31495: LD_INT 21
31497: PUSH
31498: LD_INT 22
31500: PUSH
31501: LD_INT 23
31503: PUSH
31504: LD_INT 24
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: ST_TO_ADDR
31513: GO 31730
31515: LD_INT 45
31517: DOUBLE
31518: EQUAL
31519: IFTRUE 31523
31521: GO 31549
31523: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31524: LD_ADDR_VAR 0 3
31528: PUSH
31529: LD_INT 21
31531: PUSH
31532: LD_INT 22
31534: PUSH
31535: LD_INT 23
31537: PUSH
31538: LD_INT 24
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: ST_TO_ADDR
31547: GO 31730
31549: LD_INT 49
31551: DOUBLE
31552: EQUAL
31553: IFTRUE 31557
31555: GO 31583
31557: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31558: LD_ADDR_VAR 0 3
31562: PUSH
31563: LD_INT 21
31565: PUSH
31566: LD_INT 22
31568: PUSH
31569: LD_INT 23
31571: PUSH
31572: LD_INT 24
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: ST_TO_ADDR
31581: GO 31730
31583: LD_INT 51
31585: DOUBLE
31586: EQUAL
31587: IFTRUE 31591
31589: GO 31617
31591: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31592: LD_ADDR_VAR 0 3
31596: PUSH
31597: LD_INT 21
31599: PUSH
31600: LD_INT 22
31602: PUSH
31603: LD_INT 23
31605: PUSH
31606: LD_INT 24
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: ST_TO_ADDR
31615: GO 31730
31617: LD_INT 52
31619: DOUBLE
31620: EQUAL
31621: IFTRUE 31625
31623: GO 31651
31625: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31626: LD_ADDR_VAR 0 3
31630: PUSH
31631: LD_INT 21
31633: PUSH
31634: LD_INT 22
31636: PUSH
31637: LD_INT 23
31639: PUSH
31640: LD_INT 24
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: ST_TO_ADDR
31649: GO 31730
31651: LD_INT 53
31653: DOUBLE
31654: EQUAL
31655: IFTRUE 31659
31657: GO 31677
31659: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31660: LD_ADDR_VAR 0 3
31664: PUSH
31665: LD_INT 23
31667: PUSH
31668: LD_INT 24
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: ST_TO_ADDR
31675: GO 31730
31677: LD_INT 46
31679: DOUBLE
31680: EQUAL
31681: IFTRUE 31685
31683: GO 31703
31685: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31686: LD_ADDR_VAR 0 3
31690: PUSH
31691: LD_INT 23
31693: PUSH
31694: LD_INT 24
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: ST_TO_ADDR
31701: GO 31730
31703: LD_INT 47
31705: DOUBLE
31706: EQUAL
31707: IFTRUE 31711
31709: GO 31729
31711: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31712: LD_ADDR_VAR 0 3
31716: PUSH
31717: LD_INT 23
31719: PUSH
31720: LD_INT 24
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: ST_TO_ADDR
31727: GO 31730
31729: POP
// result := ( chassis in result ) ;
31730: LD_ADDR_VAR 0 3
31734: PUSH
31735: LD_VAR 0 1
31739: PUSH
31740: LD_VAR 0 3
31744: IN
31745: ST_TO_ADDR
// end ;
31746: LD_VAR 0 3
31750: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31751: LD_INT 0
31753: PPUSH
31754: PPUSH
31755: PPUSH
31756: PPUSH
31757: PPUSH
31758: PPUSH
31759: PPUSH
// result := array ;
31760: LD_ADDR_VAR 0 5
31764: PUSH
31765: LD_VAR 0 1
31769: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31770: LD_VAR 0 1
31774: NOT
31775: PUSH
31776: LD_VAR 0 2
31780: NOT
31781: OR
31782: PUSH
31783: LD_VAR 0 3
31787: NOT
31788: OR
31789: PUSH
31790: LD_VAR 0 2
31794: PUSH
31795: LD_VAR 0 1
31799: GREATER
31800: OR
31801: PUSH
31802: LD_VAR 0 3
31806: PUSH
31807: LD_VAR 0 1
31811: GREATER
31812: OR
31813: IFFALSE 31817
// exit ;
31815: GO 32113
// if direction then
31817: LD_VAR 0 4
31821: IFFALSE 31885
// begin d := 1 ;
31823: LD_ADDR_VAR 0 9
31827: PUSH
31828: LD_INT 1
31830: ST_TO_ADDR
// if i_from > i_to then
31831: LD_VAR 0 2
31835: PUSH
31836: LD_VAR 0 3
31840: GREATER
31841: IFFALSE 31867
// length := ( array - i_from ) + i_to else
31843: LD_ADDR_VAR 0 11
31847: PUSH
31848: LD_VAR 0 1
31852: PUSH
31853: LD_VAR 0 2
31857: MINUS
31858: PUSH
31859: LD_VAR 0 3
31863: PLUS
31864: ST_TO_ADDR
31865: GO 31883
// length := i_to - i_from ;
31867: LD_ADDR_VAR 0 11
31871: PUSH
31872: LD_VAR 0 3
31876: PUSH
31877: LD_VAR 0 2
31881: MINUS
31882: ST_TO_ADDR
// end else
31883: GO 31946
// begin d := - 1 ;
31885: LD_ADDR_VAR 0 9
31889: PUSH
31890: LD_INT 1
31892: NEG
31893: ST_TO_ADDR
// if i_from > i_to then
31894: LD_VAR 0 2
31898: PUSH
31899: LD_VAR 0 3
31903: GREATER
31904: IFFALSE 31924
// length := i_from - i_to else
31906: LD_ADDR_VAR 0 11
31910: PUSH
31911: LD_VAR 0 2
31915: PUSH
31916: LD_VAR 0 3
31920: MINUS
31921: ST_TO_ADDR
31922: GO 31946
// length := ( array - i_to ) + i_from ;
31924: LD_ADDR_VAR 0 11
31928: PUSH
31929: LD_VAR 0 1
31933: PUSH
31934: LD_VAR 0 3
31938: MINUS
31939: PUSH
31940: LD_VAR 0 2
31944: PLUS
31945: ST_TO_ADDR
// end ; if not length then
31946: LD_VAR 0 11
31950: NOT
31951: IFFALSE 31955
// exit ;
31953: GO 32113
// tmp := array ;
31955: LD_ADDR_VAR 0 10
31959: PUSH
31960: LD_VAR 0 1
31964: ST_TO_ADDR
// for i = 1 to length do
31965: LD_ADDR_VAR 0 6
31969: PUSH
31970: DOUBLE
31971: LD_INT 1
31973: DEC
31974: ST_TO_ADDR
31975: LD_VAR 0 11
31979: PUSH
31980: FOR_TO
31981: IFFALSE 32101
// begin for j = 1 to array do
31983: LD_ADDR_VAR 0 7
31987: PUSH
31988: DOUBLE
31989: LD_INT 1
31991: DEC
31992: ST_TO_ADDR
31993: LD_VAR 0 1
31997: PUSH
31998: FOR_TO
31999: IFFALSE 32087
// begin k := j + d ;
32001: LD_ADDR_VAR 0 8
32005: PUSH
32006: LD_VAR 0 7
32010: PUSH
32011: LD_VAR 0 9
32015: PLUS
32016: ST_TO_ADDR
// if k > array then
32017: LD_VAR 0 8
32021: PUSH
32022: LD_VAR 0 1
32026: GREATER
32027: IFFALSE 32037
// k := 1 ;
32029: LD_ADDR_VAR 0 8
32033: PUSH
32034: LD_INT 1
32036: ST_TO_ADDR
// if not k then
32037: LD_VAR 0 8
32041: NOT
32042: IFFALSE 32054
// k := array ;
32044: LD_ADDR_VAR 0 8
32048: PUSH
32049: LD_VAR 0 1
32053: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32054: LD_ADDR_VAR 0 10
32058: PUSH
32059: LD_VAR 0 10
32063: PPUSH
32064: LD_VAR 0 8
32068: PPUSH
32069: LD_VAR 0 1
32073: PUSH
32074: LD_VAR 0 7
32078: ARRAY
32079: PPUSH
32080: CALL_OW 1
32084: ST_TO_ADDR
// end ;
32085: GO 31998
32087: POP
32088: POP
// array := tmp ;
32089: LD_ADDR_VAR 0 1
32093: PUSH
32094: LD_VAR 0 10
32098: ST_TO_ADDR
// end ;
32099: GO 31980
32101: POP
32102: POP
// result := array ;
32103: LD_ADDR_VAR 0 5
32107: PUSH
32108: LD_VAR 0 1
32112: ST_TO_ADDR
// end ;
32113: LD_VAR 0 5
32117: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32118: LD_INT 0
32120: PPUSH
32121: PPUSH
// result := 0 ;
32122: LD_ADDR_VAR 0 3
32126: PUSH
32127: LD_INT 0
32129: ST_TO_ADDR
// if not array or not value in array then
32130: LD_VAR 0 1
32134: NOT
32135: PUSH
32136: LD_VAR 0 2
32140: PUSH
32141: LD_VAR 0 1
32145: IN
32146: NOT
32147: OR
32148: IFFALSE 32152
// exit ;
32150: GO 32206
// for i = 1 to array do
32152: LD_ADDR_VAR 0 4
32156: PUSH
32157: DOUBLE
32158: LD_INT 1
32160: DEC
32161: ST_TO_ADDR
32162: LD_VAR 0 1
32166: PUSH
32167: FOR_TO
32168: IFFALSE 32204
// if value = array [ i ] then
32170: LD_VAR 0 2
32174: PUSH
32175: LD_VAR 0 1
32179: PUSH
32180: LD_VAR 0 4
32184: ARRAY
32185: EQUAL
32186: IFFALSE 32202
// begin result := i ;
32188: LD_ADDR_VAR 0 3
32192: PUSH
32193: LD_VAR 0 4
32197: ST_TO_ADDR
// exit ;
32198: POP
32199: POP
32200: GO 32206
// end ;
32202: GO 32167
32204: POP
32205: POP
// end ;
32206: LD_VAR 0 3
32210: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32211: LD_INT 0
32213: PPUSH
// vc_chassis := chassis ;
32214: LD_ADDR_OWVAR 37
32218: PUSH
32219: LD_VAR 0 1
32223: ST_TO_ADDR
// vc_engine := engine ;
32224: LD_ADDR_OWVAR 39
32228: PUSH
32229: LD_VAR 0 2
32233: ST_TO_ADDR
// vc_control := control ;
32234: LD_ADDR_OWVAR 38
32238: PUSH
32239: LD_VAR 0 3
32243: ST_TO_ADDR
// vc_weapon := weapon ;
32244: LD_ADDR_OWVAR 40
32248: PUSH
32249: LD_VAR 0 4
32253: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32254: LD_ADDR_OWVAR 41
32258: PUSH
32259: LD_VAR 0 5
32263: ST_TO_ADDR
// end ;
32264: LD_VAR 0 6
32268: RET
// export function WantPlant ( unit ) ; var task ; begin
32269: LD_INT 0
32271: PPUSH
32272: PPUSH
// result := false ;
32273: LD_ADDR_VAR 0 2
32277: PUSH
32278: LD_INT 0
32280: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32281: LD_ADDR_VAR 0 3
32285: PUSH
32286: LD_VAR 0 1
32290: PPUSH
32291: CALL_OW 437
32295: ST_TO_ADDR
// if task then
32296: LD_VAR 0 3
32300: IFFALSE 32328
// if task [ 1 ] [ 1 ] = p then
32302: LD_VAR 0 3
32306: PUSH
32307: LD_INT 1
32309: ARRAY
32310: PUSH
32311: LD_INT 1
32313: ARRAY
32314: PUSH
32315: LD_STRING p
32317: EQUAL
32318: IFFALSE 32328
// result := true ;
32320: LD_ADDR_VAR 0 2
32324: PUSH
32325: LD_INT 1
32327: ST_TO_ADDR
// end ;
32328: LD_VAR 0 2
32332: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32333: LD_INT 0
32335: PPUSH
32336: PPUSH
32337: PPUSH
32338: PPUSH
// if pos < 1 then
32339: LD_VAR 0 2
32343: PUSH
32344: LD_INT 1
32346: LESS
32347: IFFALSE 32351
// exit ;
32349: GO 32654
// if pos = 1 then
32351: LD_VAR 0 2
32355: PUSH
32356: LD_INT 1
32358: EQUAL
32359: IFFALSE 32392
// result := Replace ( arr , pos [ 1 ] , value ) else
32361: LD_ADDR_VAR 0 4
32365: PUSH
32366: LD_VAR 0 1
32370: PPUSH
32371: LD_VAR 0 2
32375: PUSH
32376: LD_INT 1
32378: ARRAY
32379: PPUSH
32380: LD_VAR 0 3
32384: PPUSH
32385: CALL_OW 1
32389: ST_TO_ADDR
32390: GO 32654
// begin tmp := arr ;
32392: LD_ADDR_VAR 0 6
32396: PUSH
32397: LD_VAR 0 1
32401: ST_TO_ADDR
// s_arr := [ tmp ] ;
32402: LD_ADDR_VAR 0 7
32406: PUSH
32407: LD_VAR 0 6
32411: PUSH
32412: EMPTY
32413: LIST
32414: ST_TO_ADDR
// for i = 1 to pos - 1 do
32415: LD_ADDR_VAR 0 5
32419: PUSH
32420: DOUBLE
32421: LD_INT 1
32423: DEC
32424: ST_TO_ADDR
32425: LD_VAR 0 2
32429: PUSH
32430: LD_INT 1
32432: MINUS
32433: PUSH
32434: FOR_TO
32435: IFFALSE 32480
// begin tmp := tmp [ pos [ i ] ] ;
32437: LD_ADDR_VAR 0 6
32441: PUSH
32442: LD_VAR 0 6
32446: PUSH
32447: LD_VAR 0 2
32451: PUSH
32452: LD_VAR 0 5
32456: ARRAY
32457: ARRAY
32458: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32459: LD_ADDR_VAR 0 7
32463: PUSH
32464: LD_VAR 0 7
32468: PUSH
32469: LD_VAR 0 6
32473: PUSH
32474: EMPTY
32475: LIST
32476: ADD
32477: ST_TO_ADDR
// end ;
32478: GO 32434
32480: POP
32481: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32482: LD_ADDR_VAR 0 6
32486: PUSH
32487: LD_VAR 0 6
32491: PPUSH
32492: LD_VAR 0 2
32496: PUSH
32497: LD_VAR 0 2
32501: ARRAY
32502: PPUSH
32503: LD_VAR 0 3
32507: PPUSH
32508: CALL_OW 1
32512: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32513: LD_ADDR_VAR 0 7
32517: PUSH
32518: LD_VAR 0 7
32522: PPUSH
32523: LD_VAR 0 7
32527: PPUSH
32528: LD_VAR 0 6
32532: PPUSH
32533: CALL_OW 1
32537: ST_TO_ADDR
// for i = s_arr downto 2 do
32538: LD_ADDR_VAR 0 5
32542: PUSH
32543: DOUBLE
32544: LD_VAR 0 7
32548: INC
32549: ST_TO_ADDR
32550: LD_INT 2
32552: PUSH
32553: FOR_DOWNTO
32554: IFFALSE 32638
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32556: LD_ADDR_VAR 0 6
32560: PUSH
32561: LD_VAR 0 7
32565: PUSH
32566: LD_VAR 0 5
32570: PUSH
32571: LD_INT 1
32573: MINUS
32574: ARRAY
32575: PPUSH
32576: LD_VAR 0 2
32580: PUSH
32581: LD_VAR 0 5
32585: PUSH
32586: LD_INT 1
32588: MINUS
32589: ARRAY
32590: PPUSH
32591: LD_VAR 0 7
32595: PUSH
32596: LD_VAR 0 5
32600: ARRAY
32601: PPUSH
32602: CALL_OW 1
32606: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32607: LD_ADDR_VAR 0 7
32611: PUSH
32612: LD_VAR 0 7
32616: PPUSH
32617: LD_VAR 0 5
32621: PUSH
32622: LD_INT 1
32624: MINUS
32625: PPUSH
32626: LD_VAR 0 6
32630: PPUSH
32631: CALL_OW 1
32635: ST_TO_ADDR
// end ;
32636: GO 32553
32638: POP
32639: POP
// result := s_arr [ 1 ] ;
32640: LD_ADDR_VAR 0 4
32644: PUSH
32645: LD_VAR 0 7
32649: PUSH
32650: LD_INT 1
32652: ARRAY
32653: ST_TO_ADDR
// end ; end ;
32654: LD_VAR 0 4
32658: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32659: LD_INT 0
32661: PPUSH
32662: PPUSH
// if not list then
32663: LD_VAR 0 1
32667: NOT
32668: IFFALSE 32672
// exit ;
32670: GO 32763
// i := list [ pos1 ] ;
32672: LD_ADDR_VAR 0 5
32676: PUSH
32677: LD_VAR 0 1
32681: PUSH
32682: LD_VAR 0 2
32686: ARRAY
32687: ST_TO_ADDR
// if not i then
32688: LD_VAR 0 5
32692: NOT
32693: IFFALSE 32697
// exit ;
32695: GO 32763
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32697: LD_ADDR_VAR 0 1
32701: PUSH
32702: LD_VAR 0 1
32706: PPUSH
32707: LD_VAR 0 2
32711: PPUSH
32712: LD_VAR 0 1
32716: PUSH
32717: LD_VAR 0 3
32721: ARRAY
32722: PPUSH
32723: CALL_OW 1
32727: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32728: LD_ADDR_VAR 0 1
32732: PUSH
32733: LD_VAR 0 1
32737: PPUSH
32738: LD_VAR 0 3
32742: PPUSH
32743: LD_VAR 0 5
32747: PPUSH
32748: CALL_OW 1
32752: ST_TO_ADDR
// result := list ;
32753: LD_ADDR_VAR 0 4
32757: PUSH
32758: LD_VAR 0 1
32762: ST_TO_ADDR
// end ;
32763: LD_VAR 0 4
32767: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32768: LD_INT 0
32770: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32771: LD_ADDR_VAR 0 5
32775: PUSH
32776: LD_VAR 0 1
32780: PPUSH
32781: CALL_OW 250
32785: PPUSH
32786: LD_VAR 0 1
32790: PPUSH
32791: CALL_OW 251
32795: PPUSH
32796: LD_VAR 0 2
32800: PPUSH
32801: LD_VAR 0 3
32805: PPUSH
32806: LD_VAR 0 4
32810: PPUSH
32811: CALL 33189 0 5
32815: ST_TO_ADDR
// end ;
32816: LD_VAR 0 5
32820: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
32821: LD_INT 0
32823: PPUSH
32824: PPUSH
32825: PPUSH
32826: PPUSH
// if not list or not unit then
32827: LD_VAR 0 2
32831: NOT
32832: PUSH
32833: LD_VAR 0 1
32837: NOT
32838: OR
32839: IFFALSE 32843
// exit ;
32841: GO 33184
// result := [ ] ;
32843: LD_ADDR_VAR 0 5
32847: PUSH
32848: EMPTY
32849: ST_TO_ADDR
// for i in list do
32850: LD_ADDR_VAR 0 6
32854: PUSH
32855: LD_VAR 0 2
32859: PUSH
32860: FOR_IN
32861: IFFALSE 33079
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
32863: LD_ADDR_VAR 0 8
32867: PUSH
32868: LD_VAR 0 1
32872: PPUSH
32873: LD_VAR 0 6
32877: PUSH
32878: LD_INT 1
32880: ARRAY
32881: PPUSH
32882: LD_VAR 0 6
32886: PUSH
32887: LD_INT 2
32889: ARRAY
32890: PPUSH
32891: CALL_OW 297
32895: ST_TO_ADDR
// if not Count ( result ) then
32896: LD_VAR 0 5
32900: PPUSH
32901: CALL 29473 0 1
32905: NOT
32906: IFFALSE 32939
// begin result := Join ( result , [ i , tmp ] ) ;
32908: LD_ADDR_VAR 0 5
32912: PUSH
32913: LD_VAR 0 5
32917: PPUSH
32918: LD_VAR 0 6
32922: PUSH
32923: LD_VAR 0 8
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PPUSH
32932: CALL 65223 0 2
32936: ST_TO_ADDR
// continue ;
32937: GO 32860
// end ; if result [ result ] [ 2 ] <= tmp then
32939: LD_VAR 0 5
32943: PUSH
32944: LD_VAR 0 5
32948: ARRAY
32949: PUSH
32950: LD_INT 2
32952: ARRAY
32953: PUSH
32954: LD_VAR 0 8
32958: LESSEQUAL
32959: IFFALSE 32992
// result := Join ( result , [ i , tmp ] ) else
32961: LD_ADDR_VAR 0 5
32965: PUSH
32966: LD_VAR 0 5
32970: PPUSH
32971: LD_VAR 0 6
32975: PUSH
32976: LD_VAR 0 8
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PPUSH
32985: CALL 65223 0 2
32989: ST_TO_ADDR
32990: GO 33077
// begin for j := 1 to Count ( result ) do
32992: LD_ADDR_VAR 0 7
32996: PUSH
32997: DOUBLE
32998: LD_INT 1
33000: DEC
33001: ST_TO_ADDR
33002: LD_VAR 0 5
33006: PPUSH
33007: CALL 29473 0 1
33011: PUSH
33012: FOR_TO
33013: IFFALSE 33075
// begin if tmp < result [ j ] [ 2 ] then
33015: LD_VAR 0 8
33019: PUSH
33020: LD_VAR 0 5
33024: PUSH
33025: LD_VAR 0 7
33029: ARRAY
33030: PUSH
33031: LD_INT 2
33033: ARRAY
33034: LESS
33035: IFFALSE 33073
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33037: LD_ADDR_VAR 0 5
33041: PUSH
33042: LD_VAR 0 5
33046: PPUSH
33047: LD_VAR 0 7
33051: PPUSH
33052: LD_VAR 0 6
33056: PUSH
33057: LD_VAR 0 8
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PPUSH
33066: CALL_OW 2
33070: ST_TO_ADDR
// break ;
33071: GO 33075
// end ; end ;
33073: GO 33012
33075: POP
33076: POP
// end ; end ;
33077: GO 32860
33079: POP
33080: POP
// if result and not asc then
33081: LD_VAR 0 5
33085: PUSH
33086: LD_VAR 0 3
33090: NOT
33091: AND
33092: IFFALSE 33109
// result := ReverseArray ( result ) ;
33094: LD_ADDR_VAR 0 5
33098: PUSH
33099: LD_VAR 0 5
33103: PPUSH
33104: CALL 60349 0 1
33108: ST_TO_ADDR
// tmp := [ ] ;
33109: LD_ADDR_VAR 0 8
33113: PUSH
33114: EMPTY
33115: ST_TO_ADDR
// if mode then
33116: LD_VAR 0 4
33120: IFFALSE 33184
// begin for i := 1 to result do
33122: LD_ADDR_VAR 0 6
33126: PUSH
33127: DOUBLE
33128: LD_INT 1
33130: DEC
33131: ST_TO_ADDR
33132: LD_VAR 0 5
33136: PUSH
33137: FOR_TO
33138: IFFALSE 33172
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
33140: LD_ADDR_VAR 0 8
33144: PUSH
33145: LD_VAR 0 8
33149: PPUSH
33150: LD_VAR 0 5
33154: PUSH
33155: LD_VAR 0 6
33159: ARRAY
33160: PUSH
33161: LD_INT 1
33163: ARRAY
33164: PPUSH
33165: CALL 65223 0 2
33169: ST_TO_ADDR
33170: GO 33137
33172: POP
33173: POP
// result := tmp ;
33174: LD_ADDR_VAR 0 5
33178: PUSH
33179: LD_VAR 0 8
33183: ST_TO_ADDR
// end ; end ;
33184: LD_VAR 0 5
33188: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33189: LD_INT 0
33191: PPUSH
33192: PPUSH
33193: PPUSH
33194: PPUSH
// if not list then
33195: LD_VAR 0 3
33199: NOT
33200: IFFALSE 33204
// exit ;
33202: GO 33592
// result := [ ] ;
33204: LD_ADDR_VAR 0 6
33208: PUSH
33209: EMPTY
33210: ST_TO_ADDR
// for i in list do
33211: LD_ADDR_VAR 0 7
33215: PUSH
33216: LD_VAR 0 3
33220: PUSH
33221: FOR_IN
33222: IFFALSE 33424
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33224: LD_ADDR_VAR 0 9
33228: PUSH
33229: LD_VAR 0 7
33233: PPUSH
33234: LD_VAR 0 1
33238: PPUSH
33239: LD_VAR 0 2
33243: PPUSH
33244: CALL_OW 297
33248: ST_TO_ADDR
// if not result then
33249: LD_VAR 0 6
33253: NOT
33254: IFFALSE 33280
// result := [ [ i , tmp ] ] else
33256: LD_ADDR_VAR 0 6
33260: PUSH
33261: LD_VAR 0 7
33265: PUSH
33266: LD_VAR 0 9
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: EMPTY
33276: LIST
33277: ST_TO_ADDR
33278: GO 33422
// begin if result [ result ] [ 2 ] <= tmp then
33280: LD_VAR 0 6
33284: PUSH
33285: LD_VAR 0 6
33289: ARRAY
33290: PUSH
33291: LD_INT 2
33293: ARRAY
33294: PUSH
33295: LD_VAR 0 9
33299: LESSEQUAL
33300: IFFALSE 33342
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33302: LD_ADDR_VAR 0 6
33306: PUSH
33307: LD_VAR 0 6
33311: PPUSH
33312: LD_VAR 0 6
33316: PUSH
33317: LD_INT 1
33319: PLUS
33320: PPUSH
33321: LD_VAR 0 7
33325: PUSH
33326: LD_VAR 0 9
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PPUSH
33335: CALL_OW 2
33339: ST_TO_ADDR
33340: GO 33422
// for j := 1 to result do
33342: LD_ADDR_VAR 0 8
33346: PUSH
33347: DOUBLE
33348: LD_INT 1
33350: DEC
33351: ST_TO_ADDR
33352: LD_VAR 0 6
33356: PUSH
33357: FOR_TO
33358: IFFALSE 33420
// begin if tmp < result [ j ] [ 2 ] then
33360: LD_VAR 0 9
33364: PUSH
33365: LD_VAR 0 6
33369: PUSH
33370: LD_VAR 0 8
33374: ARRAY
33375: PUSH
33376: LD_INT 2
33378: ARRAY
33379: LESS
33380: IFFALSE 33418
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33382: LD_ADDR_VAR 0 6
33386: PUSH
33387: LD_VAR 0 6
33391: PPUSH
33392: LD_VAR 0 8
33396: PPUSH
33397: LD_VAR 0 7
33401: PUSH
33402: LD_VAR 0 9
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PPUSH
33411: CALL_OW 2
33415: ST_TO_ADDR
// break ;
33416: GO 33420
// end ; end ;
33418: GO 33357
33420: POP
33421: POP
// end ; end ;
33422: GO 33221
33424: POP
33425: POP
// if result and not asc then
33426: LD_VAR 0 6
33430: PUSH
33431: LD_VAR 0 4
33435: NOT
33436: AND
33437: IFFALSE 33512
// begin tmp := result ;
33439: LD_ADDR_VAR 0 9
33443: PUSH
33444: LD_VAR 0 6
33448: ST_TO_ADDR
// for i = tmp downto 1 do
33449: LD_ADDR_VAR 0 7
33453: PUSH
33454: DOUBLE
33455: LD_VAR 0 9
33459: INC
33460: ST_TO_ADDR
33461: LD_INT 1
33463: PUSH
33464: FOR_DOWNTO
33465: IFFALSE 33510
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33467: LD_ADDR_VAR 0 6
33471: PUSH
33472: LD_VAR 0 6
33476: PPUSH
33477: LD_VAR 0 9
33481: PUSH
33482: LD_VAR 0 7
33486: MINUS
33487: PUSH
33488: LD_INT 1
33490: PLUS
33491: PPUSH
33492: LD_VAR 0 9
33496: PUSH
33497: LD_VAR 0 7
33501: ARRAY
33502: PPUSH
33503: CALL_OW 1
33507: ST_TO_ADDR
33508: GO 33464
33510: POP
33511: POP
// end ; tmp := [ ] ;
33512: LD_ADDR_VAR 0 9
33516: PUSH
33517: EMPTY
33518: ST_TO_ADDR
// if mode then
33519: LD_VAR 0 5
33523: IFFALSE 33592
// begin for i = 1 to result do
33525: LD_ADDR_VAR 0 7
33529: PUSH
33530: DOUBLE
33531: LD_INT 1
33533: DEC
33534: ST_TO_ADDR
33535: LD_VAR 0 6
33539: PUSH
33540: FOR_TO
33541: IFFALSE 33580
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33543: LD_ADDR_VAR 0 9
33547: PUSH
33548: LD_VAR 0 9
33552: PPUSH
33553: LD_VAR 0 7
33557: PPUSH
33558: LD_VAR 0 6
33562: PUSH
33563: LD_VAR 0 7
33567: ARRAY
33568: PUSH
33569: LD_INT 1
33571: ARRAY
33572: PPUSH
33573: CALL_OW 1
33577: ST_TO_ADDR
33578: GO 33540
33580: POP
33581: POP
// result := tmp ;
33582: LD_ADDR_VAR 0 6
33586: PUSH
33587: LD_VAR 0 9
33591: ST_TO_ADDR
// end ; end ;
33592: LD_VAR 0 6
33596: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33597: LD_INT 0
33599: PPUSH
33600: PPUSH
33601: PPUSH
33602: PPUSH
33603: PPUSH
33604: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33605: LD_ADDR_VAR 0 5
33609: PUSH
33610: LD_INT 0
33612: PUSH
33613: LD_INT 0
33615: PUSH
33616: LD_INT 0
33618: PUSH
33619: EMPTY
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: ST_TO_ADDR
// if not x or not y then
33627: LD_VAR 0 2
33631: NOT
33632: PUSH
33633: LD_VAR 0 3
33637: NOT
33638: OR
33639: IFFALSE 33643
// exit ;
33641: GO 35293
// if not range then
33643: LD_VAR 0 4
33647: NOT
33648: IFFALSE 33658
// range := 10 ;
33650: LD_ADDR_VAR 0 4
33654: PUSH
33655: LD_INT 10
33657: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33658: LD_ADDR_VAR 0 8
33662: PUSH
33663: LD_INT 81
33665: PUSH
33666: LD_VAR 0 1
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 92
33677: PUSH
33678: LD_VAR 0 2
33682: PUSH
33683: LD_VAR 0 3
33687: PUSH
33688: LD_VAR 0 4
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 3
33701: PUSH
33702: LD_INT 21
33704: PUSH
33705: LD_INT 3
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: LIST
33720: PPUSH
33721: CALL_OW 69
33725: ST_TO_ADDR
// if not tmp then
33726: LD_VAR 0 8
33730: NOT
33731: IFFALSE 33735
// exit ;
33733: GO 35293
// for i in tmp do
33735: LD_ADDR_VAR 0 6
33739: PUSH
33740: LD_VAR 0 8
33744: PUSH
33745: FOR_IN
33746: IFFALSE 35268
// begin points := [ 0 , 0 , 0 ] ;
33748: LD_ADDR_VAR 0 9
33752: PUSH
33753: LD_INT 0
33755: PUSH
33756: LD_INT 0
33758: PUSH
33759: LD_INT 0
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: LIST
33766: ST_TO_ADDR
// bpoints := 1 ;
33767: LD_ADDR_VAR 0 10
33771: PUSH
33772: LD_INT 1
33774: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33775: LD_VAR 0 6
33779: PPUSH
33780: CALL_OW 247
33784: PUSH
33785: LD_INT 1
33787: DOUBLE
33788: EQUAL
33789: IFTRUE 33793
33791: GO 34371
33793: POP
// begin if GetClass ( i ) = 1 then
33794: LD_VAR 0 6
33798: PPUSH
33799: CALL_OW 257
33803: PUSH
33804: LD_INT 1
33806: EQUAL
33807: IFFALSE 33828
// points := [ 10 , 5 , 3 ] ;
33809: LD_ADDR_VAR 0 9
33813: PUSH
33814: LD_INT 10
33816: PUSH
33817: LD_INT 5
33819: PUSH
33820: LD_INT 3
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: LIST
33827: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33828: LD_VAR 0 6
33832: PPUSH
33833: CALL_OW 257
33837: PUSH
33838: LD_INT 2
33840: PUSH
33841: LD_INT 3
33843: PUSH
33844: LD_INT 4
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: LIST
33851: IN
33852: IFFALSE 33873
// points := [ 3 , 2 , 1 ] ;
33854: LD_ADDR_VAR 0 9
33858: PUSH
33859: LD_INT 3
33861: PUSH
33862: LD_INT 2
33864: PUSH
33865: LD_INT 1
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: LIST
33872: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33873: LD_VAR 0 6
33877: PPUSH
33878: CALL_OW 257
33882: PUSH
33883: LD_INT 5
33885: EQUAL
33886: IFFALSE 33907
// points := [ 130 , 5 , 2 ] ;
33888: LD_ADDR_VAR 0 9
33892: PUSH
33893: LD_INT 130
33895: PUSH
33896: LD_INT 5
33898: PUSH
33899: LD_INT 2
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: LIST
33906: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33907: LD_VAR 0 6
33911: PPUSH
33912: CALL_OW 257
33916: PUSH
33917: LD_INT 8
33919: EQUAL
33920: IFFALSE 33941
// points := [ 35 , 35 , 30 ] ;
33922: LD_ADDR_VAR 0 9
33926: PUSH
33927: LD_INT 35
33929: PUSH
33930: LD_INT 35
33932: PUSH
33933: LD_INT 30
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: LIST
33940: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33941: LD_VAR 0 6
33945: PPUSH
33946: CALL_OW 257
33950: PUSH
33951: LD_INT 9
33953: EQUAL
33954: IFFALSE 33975
// points := [ 20 , 55 , 40 ] ;
33956: LD_ADDR_VAR 0 9
33960: PUSH
33961: LD_INT 20
33963: PUSH
33964: LD_INT 55
33966: PUSH
33967: LD_INT 40
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: LIST
33974: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33975: LD_VAR 0 6
33979: PPUSH
33980: CALL_OW 257
33984: PUSH
33985: LD_INT 12
33987: PUSH
33988: LD_INT 16
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: IN
33995: IFFALSE 34016
// points := [ 5 , 3 , 2 ] ;
33997: LD_ADDR_VAR 0 9
34001: PUSH
34002: LD_INT 5
34004: PUSH
34005: LD_INT 3
34007: PUSH
34008: LD_INT 2
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: LIST
34015: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34016: LD_VAR 0 6
34020: PPUSH
34021: CALL_OW 257
34025: PUSH
34026: LD_INT 17
34028: EQUAL
34029: IFFALSE 34050
// points := [ 100 , 50 , 75 ] ;
34031: LD_ADDR_VAR 0 9
34035: PUSH
34036: LD_INT 100
34038: PUSH
34039: LD_INT 50
34041: PUSH
34042: LD_INT 75
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: LIST
34049: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34050: LD_VAR 0 6
34054: PPUSH
34055: CALL_OW 257
34059: PUSH
34060: LD_INT 15
34062: EQUAL
34063: IFFALSE 34084
// points := [ 10 , 5 , 3 ] ;
34065: LD_ADDR_VAR 0 9
34069: PUSH
34070: LD_INT 10
34072: PUSH
34073: LD_INT 5
34075: PUSH
34076: LD_INT 3
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: LIST
34083: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34084: LD_VAR 0 6
34088: PPUSH
34089: CALL_OW 257
34093: PUSH
34094: LD_INT 14
34096: EQUAL
34097: IFFALSE 34118
// points := [ 10 , 0 , 0 ] ;
34099: LD_ADDR_VAR 0 9
34103: PUSH
34104: LD_INT 10
34106: PUSH
34107: LD_INT 0
34109: PUSH
34110: LD_INT 0
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: LIST
34117: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34118: LD_VAR 0 6
34122: PPUSH
34123: CALL_OW 257
34127: PUSH
34128: LD_INT 11
34130: EQUAL
34131: IFFALSE 34152
// points := [ 30 , 10 , 5 ] ;
34133: LD_ADDR_VAR 0 9
34137: PUSH
34138: LD_INT 30
34140: PUSH
34141: LD_INT 10
34143: PUSH
34144: LD_INT 5
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: LIST
34151: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34152: LD_VAR 0 1
34156: PPUSH
34157: LD_INT 5
34159: PPUSH
34160: CALL_OW 321
34164: PUSH
34165: LD_INT 2
34167: EQUAL
34168: IFFALSE 34185
// bpoints := bpoints * 1.8 ;
34170: LD_ADDR_VAR 0 10
34174: PUSH
34175: LD_VAR 0 10
34179: PUSH
34180: LD_REAL  1.80000000000000E+0000
34183: MUL
34184: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34185: LD_VAR 0 6
34189: PPUSH
34190: CALL_OW 257
34194: PUSH
34195: LD_INT 1
34197: PUSH
34198: LD_INT 2
34200: PUSH
34201: LD_INT 3
34203: PUSH
34204: LD_INT 4
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: IN
34213: PUSH
34214: LD_VAR 0 1
34218: PPUSH
34219: LD_INT 51
34221: PPUSH
34222: CALL_OW 321
34226: PUSH
34227: LD_INT 2
34229: EQUAL
34230: AND
34231: IFFALSE 34248
// bpoints := bpoints * 1.2 ;
34233: LD_ADDR_VAR 0 10
34237: PUSH
34238: LD_VAR 0 10
34242: PUSH
34243: LD_REAL  1.20000000000000E+0000
34246: MUL
34247: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34248: LD_VAR 0 6
34252: PPUSH
34253: CALL_OW 257
34257: PUSH
34258: LD_INT 5
34260: PUSH
34261: LD_INT 7
34263: PUSH
34264: LD_INT 9
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: LIST
34271: IN
34272: PUSH
34273: LD_VAR 0 1
34277: PPUSH
34278: LD_INT 52
34280: PPUSH
34281: CALL_OW 321
34285: PUSH
34286: LD_INT 2
34288: EQUAL
34289: AND
34290: IFFALSE 34307
// bpoints := bpoints * 1.5 ;
34292: LD_ADDR_VAR 0 10
34296: PUSH
34297: LD_VAR 0 10
34301: PUSH
34302: LD_REAL  1.50000000000000E+0000
34305: MUL
34306: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34307: LD_VAR 0 1
34311: PPUSH
34312: LD_INT 66
34314: PPUSH
34315: CALL_OW 321
34319: PUSH
34320: LD_INT 2
34322: EQUAL
34323: IFFALSE 34340
// bpoints := bpoints * 1.1 ;
34325: LD_ADDR_VAR 0 10
34329: PUSH
34330: LD_VAR 0 10
34334: PUSH
34335: LD_REAL  1.10000000000000E+0000
34338: MUL
34339: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34340: LD_ADDR_VAR 0 10
34344: PUSH
34345: LD_VAR 0 10
34349: PUSH
34350: LD_VAR 0 6
34354: PPUSH
34355: LD_INT 1
34357: PPUSH
34358: CALL_OW 259
34362: PUSH
34363: LD_REAL  1.15000000000000E+0000
34366: MUL
34367: MUL
34368: ST_TO_ADDR
// end ; unit_vehicle :
34369: GO 35197
34371: LD_INT 2
34373: DOUBLE
34374: EQUAL
34375: IFTRUE 34379
34377: GO 35185
34379: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34380: LD_VAR 0 6
34384: PPUSH
34385: CALL_OW 264
34389: PUSH
34390: LD_INT 2
34392: PUSH
34393: LD_INT 42
34395: PUSH
34396: LD_INT 24
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: LIST
34403: IN
34404: IFFALSE 34425
// points := [ 25 , 5 , 3 ] ;
34406: LD_ADDR_VAR 0 9
34410: PUSH
34411: LD_INT 25
34413: PUSH
34414: LD_INT 5
34416: PUSH
34417: LD_INT 3
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: LIST
34424: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34425: LD_VAR 0 6
34429: PPUSH
34430: CALL_OW 264
34434: PUSH
34435: LD_INT 4
34437: PUSH
34438: LD_INT 43
34440: PUSH
34441: LD_INT 25
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: LIST
34448: IN
34449: IFFALSE 34470
// points := [ 40 , 15 , 5 ] ;
34451: LD_ADDR_VAR 0 9
34455: PUSH
34456: LD_INT 40
34458: PUSH
34459: LD_INT 15
34461: PUSH
34462: LD_INT 5
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: LIST
34469: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34470: LD_VAR 0 6
34474: PPUSH
34475: CALL_OW 264
34479: PUSH
34480: LD_INT 3
34482: PUSH
34483: LD_INT 23
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: IN
34490: IFFALSE 34511
// points := [ 7 , 25 , 8 ] ;
34492: LD_ADDR_VAR 0 9
34496: PUSH
34497: LD_INT 7
34499: PUSH
34500: LD_INT 25
34502: PUSH
34503: LD_INT 8
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: LIST
34510: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34511: LD_VAR 0 6
34515: PPUSH
34516: CALL_OW 264
34520: PUSH
34521: LD_INT 5
34523: PUSH
34524: LD_INT 27
34526: PUSH
34527: LD_INT 44
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: LIST
34534: IN
34535: IFFALSE 34556
// points := [ 14 , 50 , 16 ] ;
34537: LD_ADDR_VAR 0 9
34541: PUSH
34542: LD_INT 14
34544: PUSH
34545: LD_INT 50
34547: PUSH
34548: LD_INT 16
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: LIST
34555: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34556: LD_VAR 0 6
34560: PPUSH
34561: CALL_OW 264
34565: PUSH
34566: LD_INT 6
34568: PUSH
34569: LD_INT 46
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: IN
34576: IFFALSE 34597
// points := [ 32 , 120 , 70 ] ;
34578: LD_ADDR_VAR 0 9
34582: PUSH
34583: LD_INT 32
34585: PUSH
34586: LD_INT 120
34588: PUSH
34589: LD_INT 70
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: LIST
34596: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34597: LD_VAR 0 6
34601: PPUSH
34602: CALL_OW 264
34606: PUSH
34607: LD_INT 7
34609: PUSH
34610: LD_INT 28
34612: PUSH
34613: LD_INT 45
34615: PUSH
34616: LD_INT 92
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: IN
34625: IFFALSE 34646
// points := [ 35 , 20 , 45 ] ;
34627: LD_ADDR_VAR 0 9
34631: PUSH
34632: LD_INT 35
34634: PUSH
34635: LD_INT 20
34637: PUSH
34638: LD_INT 45
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: LIST
34645: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34646: LD_VAR 0 6
34650: PPUSH
34651: CALL_OW 264
34655: PUSH
34656: LD_INT 47
34658: PUSH
34659: EMPTY
34660: LIST
34661: IN
34662: IFFALSE 34683
// points := [ 67 , 45 , 75 ] ;
34664: LD_ADDR_VAR 0 9
34668: PUSH
34669: LD_INT 67
34671: PUSH
34672: LD_INT 45
34674: PUSH
34675: LD_INT 75
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: LIST
34682: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34683: LD_VAR 0 6
34687: PPUSH
34688: CALL_OW 264
34692: PUSH
34693: LD_INT 26
34695: PUSH
34696: EMPTY
34697: LIST
34698: IN
34699: IFFALSE 34720
// points := [ 120 , 30 , 80 ] ;
34701: LD_ADDR_VAR 0 9
34705: PUSH
34706: LD_INT 120
34708: PUSH
34709: LD_INT 30
34711: PUSH
34712: LD_INT 80
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: LIST
34719: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34720: LD_VAR 0 6
34724: PPUSH
34725: CALL_OW 264
34729: PUSH
34730: LD_INT 22
34732: PUSH
34733: EMPTY
34734: LIST
34735: IN
34736: IFFALSE 34757
// points := [ 40 , 1 , 1 ] ;
34738: LD_ADDR_VAR 0 9
34742: PUSH
34743: LD_INT 40
34745: PUSH
34746: LD_INT 1
34748: PUSH
34749: LD_INT 1
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: LIST
34756: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34757: LD_VAR 0 6
34761: PPUSH
34762: CALL_OW 264
34766: PUSH
34767: LD_INT 29
34769: PUSH
34770: EMPTY
34771: LIST
34772: IN
34773: IFFALSE 34794
// points := [ 70 , 200 , 400 ] ;
34775: LD_ADDR_VAR 0 9
34779: PUSH
34780: LD_INT 70
34782: PUSH
34783: LD_INT 200
34785: PUSH
34786: LD_INT 400
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: LIST
34793: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34794: LD_VAR 0 6
34798: PPUSH
34799: CALL_OW 264
34803: PUSH
34804: LD_INT 14
34806: PUSH
34807: LD_INT 53
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: IN
34814: IFFALSE 34835
// points := [ 40 , 10 , 20 ] ;
34816: LD_ADDR_VAR 0 9
34820: PUSH
34821: LD_INT 40
34823: PUSH
34824: LD_INT 10
34826: PUSH
34827: LD_INT 20
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: LIST
34834: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34835: LD_VAR 0 6
34839: PPUSH
34840: CALL_OW 264
34844: PUSH
34845: LD_INT 9
34847: PUSH
34848: EMPTY
34849: LIST
34850: IN
34851: IFFALSE 34872
// points := [ 5 , 70 , 20 ] ;
34853: LD_ADDR_VAR 0 9
34857: PUSH
34858: LD_INT 5
34860: PUSH
34861: LD_INT 70
34863: PUSH
34864: LD_INT 20
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: LIST
34871: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34872: LD_VAR 0 6
34876: PPUSH
34877: CALL_OW 264
34881: PUSH
34882: LD_INT 10
34884: PUSH
34885: EMPTY
34886: LIST
34887: IN
34888: IFFALSE 34909
// points := [ 35 , 110 , 70 ] ;
34890: LD_ADDR_VAR 0 9
34894: PUSH
34895: LD_INT 35
34897: PUSH
34898: LD_INT 110
34900: PUSH
34901: LD_INT 70
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: LIST
34908: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34909: LD_VAR 0 6
34913: PPUSH
34914: CALL_OW 265
34918: PUSH
34919: LD_INT 25
34921: EQUAL
34922: IFFALSE 34943
// points := [ 80 , 65 , 100 ] ;
34924: LD_ADDR_VAR 0 9
34928: PUSH
34929: LD_INT 80
34931: PUSH
34932: LD_INT 65
34934: PUSH
34935: LD_INT 100
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: LIST
34942: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34943: LD_VAR 0 6
34947: PPUSH
34948: CALL_OW 263
34952: PUSH
34953: LD_INT 1
34955: EQUAL
34956: IFFALSE 34991
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34958: LD_ADDR_VAR 0 10
34962: PUSH
34963: LD_VAR 0 10
34967: PUSH
34968: LD_VAR 0 6
34972: PPUSH
34973: CALL_OW 311
34977: PPUSH
34978: LD_INT 3
34980: PPUSH
34981: CALL_OW 259
34985: PUSH
34986: LD_INT 4
34988: MUL
34989: MUL
34990: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34991: LD_VAR 0 6
34995: PPUSH
34996: CALL_OW 263
35000: PUSH
35001: LD_INT 2
35003: EQUAL
35004: IFFALSE 35055
// begin j := IsControledBy ( i ) ;
35006: LD_ADDR_VAR 0 7
35010: PUSH
35011: LD_VAR 0 6
35015: PPUSH
35016: CALL_OW 312
35020: ST_TO_ADDR
// if j then
35021: LD_VAR 0 7
35025: IFFALSE 35055
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35027: LD_ADDR_VAR 0 10
35031: PUSH
35032: LD_VAR 0 10
35036: PUSH
35037: LD_VAR 0 7
35041: PPUSH
35042: LD_INT 3
35044: PPUSH
35045: CALL_OW 259
35049: PUSH
35050: LD_INT 3
35052: MUL
35053: MUL
35054: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35055: LD_VAR 0 6
35059: PPUSH
35060: CALL_OW 264
35064: PUSH
35065: LD_INT 5
35067: PUSH
35068: LD_INT 6
35070: PUSH
35071: LD_INT 46
35073: PUSH
35074: LD_INT 44
35076: PUSH
35077: LD_INT 47
35079: PUSH
35080: LD_INT 45
35082: PUSH
35083: LD_INT 28
35085: PUSH
35086: LD_INT 7
35088: PUSH
35089: LD_INT 27
35091: PUSH
35092: LD_INT 29
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: IN
35107: PUSH
35108: LD_VAR 0 1
35112: PPUSH
35113: LD_INT 52
35115: PPUSH
35116: CALL_OW 321
35120: PUSH
35121: LD_INT 2
35123: EQUAL
35124: AND
35125: IFFALSE 35142
// bpoints := bpoints * 1.2 ;
35127: LD_ADDR_VAR 0 10
35131: PUSH
35132: LD_VAR 0 10
35136: PUSH
35137: LD_REAL  1.20000000000000E+0000
35140: MUL
35141: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35142: LD_VAR 0 6
35146: PPUSH
35147: CALL_OW 264
35151: PUSH
35152: LD_INT 6
35154: PUSH
35155: LD_INT 46
35157: PUSH
35158: LD_INT 47
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: LIST
35165: IN
35166: IFFALSE 35183
// bpoints := bpoints * 1.2 ;
35168: LD_ADDR_VAR 0 10
35172: PUSH
35173: LD_VAR 0 10
35177: PUSH
35178: LD_REAL  1.20000000000000E+0000
35181: MUL
35182: ST_TO_ADDR
// end ; unit_building :
35183: GO 35197
35185: LD_INT 3
35187: DOUBLE
35188: EQUAL
35189: IFTRUE 35193
35191: GO 35196
35193: POP
// ; end ;
35194: GO 35197
35196: POP
// for j = 1 to 3 do
35197: LD_ADDR_VAR 0 7
35201: PUSH
35202: DOUBLE
35203: LD_INT 1
35205: DEC
35206: ST_TO_ADDR
35207: LD_INT 3
35209: PUSH
35210: FOR_TO
35211: IFFALSE 35264
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35213: LD_ADDR_VAR 0 5
35217: PUSH
35218: LD_VAR 0 5
35222: PPUSH
35223: LD_VAR 0 7
35227: PPUSH
35228: LD_VAR 0 5
35232: PUSH
35233: LD_VAR 0 7
35237: ARRAY
35238: PUSH
35239: LD_VAR 0 9
35243: PUSH
35244: LD_VAR 0 7
35248: ARRAY
35249: PUSH
35250: LD_VAR 0 10
35254: MUL
35255: PLUS
35256: PPUSH
35257: CALL_OW 1
35261: ST_TO_ADDR
35262: GO 35210
35264: POP
35265: POP
// end ;
35266: GO 33745
35268: POP
35269: POP
// result := Replace ( result , 4 , tmp ) ;
35270: LD_ADDR_VAR 0 5
35274: PUSH
35275: LD_VAR 0 5
35279: PPUSH
35280: LD_INT 4
35282: PPUSH
35283: LD_VAR 0 8
35287: PPUSH
35288: CALL_OW 1
35292: ST_TO_ADDR
// end ;
35293: LD_VAR 0 5
35297: RET
// export function DangerAtRange ( unit , range ) ; begin
35298: LD_INT 0
35300: PPUSH
// if not unit then
35301: LD_VAR 0 1
35305: NOT
35306: IFFALSE 35310
// exit ;
35308: GO 35355
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35310: LD_ADDR_VAR 0 3
35314: PUSH
35315: LD_VAR 0 1
35319: PPUSH
35320: CALL_OW 255
35324: PPUSH
35325: LD_VAR 0 1
35329: PPUSH
35330: CALL_OW 250
35334: PPUSH
35335: LD_VAR 0 1
35339: PPUSH
35340: CALL_OW 251
35344: PPUSH
35345: LD_VAR 0 2
35349: PPUSH
35350: CALL 33597 0 4
35354: ST_TO_ADDR
// end ;
35355: LD_VAR 0 3
35359: RET
// export function DangerInArea ( side , area ) ; begin
35360: LD_INT 0
35362: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35363: LD_ADDR_VAR 0 3
35367: PUSH
35368: LD_VAR 0 2
35372: PPUSH
35373: LD_INT 81
35375: PUSH
35376: LD_VAR 0 1
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PPUSH
35385: CALL_OW 70
35389: ST_TO_ADDR
// end ;
35390: LD_VAR 0 3
35394: RET
// export function IsExtension ( b ) ; begin
35395: LD_INT 0
35397: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35398: LD_ADDR_VAR 0 2
35402: PUSH
35403: LD_VAR 0 1
35407: PUSH
35408: LD_INT 23
35410: PUSH
35411: LD_INT 20
35413: PUSH
35414: LD_INT 22
35416: PUSH
35417: LD_INT 17
35419: PUSH
35420: LD_INT 24
35422: PUSH
35423: LD_INT 21
35425: PUSH
35426: LD_INT 19
35428: PUSH
35429: LD_INT 16
35431: PUSH
35432: LD_INT 25
35434: PUSH
35435: LD_INT 18
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: LIST
35446: LIST
35447: LIST
35448: LIST
35449: IN
35450: ST_TO_ADDR
// end ;
35451: LD_VAR 0 2
35455: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35456: LD_INT 0
35458: PPUSH
35459: PPUSH
35460: PPUSH
// result := [ ] ;
35461: LD_ADDR_VAR 0 4
35465: PUSH
35466: EMPTY
35467: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35468: LD_ADDR_VAR 0 5
35472: PUSH
35473: LD_VAR 0 2
35477: PPUSH
35478: LD_INT 21
35480: PUSH
35481: LD_INT 3
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PPUSH
35488: CALL_OW 70
35492: ST_TO_ADDR
// if not tmp then
35493: LD_VAR 0 5
35497: NOT
35498: IFFALSE 35502
// exit ;
35500: GO 35566
// if checkLink then
35502: LD_VAR 0 3
35506: IFFALSE 35556
// begin for i in tmp do
35508: LD_ADDR_VAR 0 6
35512: PUSH
35513: LD_VAR 0 5
35517: PUSH
35518: FOR_IN
35519: IFFALSE 35554
// if GetBase ( i ) <> base then
35521: LD_VAR 0 6
35525: PPUSH
35526: CALL_OW 274
35530: PUSH
35531: LD_VAR 0 1
35535: NONEQUAL
35536: IFFALSE 35552
// ComLinkToBase ( base , i ) ;
35538: LD_VAR 0 1
35542: PPUSH
35543: LD_VAR 0 6
35547: PPUSH
35548: CALL_OW 169
35552: GO 35518
35554: POP
35555: POP
// end ; result := tmp ;
35556: LD_ADDR_VAR 0 4
35560: PUSH
35561: LD_VAR 0 5
35565: ST_TO_ADDR
// end ;
35566: LD_VAR 0 4
35570: RET
// export function ComComplete ( units , b ) ; var i ; begin
35571: LD_INT 0
35573: PPUSH
35574: PPUSH
// if not units then
35575: LD_VAR 0 1
35579: NOT
35580: IFFALSE 35584
// exit ;
35582: GO 35674
// for i in units do
35584: LD_ADDR_VAR 0 4
35588: PUSH
35589: LD_VAR 0 1
35593: PUSH
35594: FOR_IN
35595: IFFALSE 35672
// if BuildingStatus ( b ) = bs_build then
35597: LD_VAR 0 2
35601: PPUSH
35602: CALL_OW 461
35606: PUSH
35607: LD_INT 1
35609: EQUAL
35610: IFFALSE 35670
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35612: LD_VAR 0 4
35616: PPUSH
35617: LD_STRING h
35619: PUSH
35620: LD_VAR 0 2
35624: PPUSH
35625: CALL_OW 250
35629: PUSH
35630: LD_VAR 0 2
35634: PPUSH
35635: CALL_OW 251
35639: PUSH
35640: LD_VAR 0 2
35644: PUSH
35645: LD_INT 0
35647: PUSH
35648: LD_INT 0
35650: PUSH
35651: LD_INT 0
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: PUSH
35663: EMPTY
35664: LIST
35665: PPUSH
35666: CALL_OW 446
35670: GO 35594
35672: POP
35673: POP
// end ;
35674: LD_VAR 0 3
35678: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35679: LD_INT 0
35681: PPUSH
35682: PPUSH
35683: PPUSH
35684: PPUSH
35685: PPUSH
35686: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35687: LD_VAR 0 1
35691: NOT
35692: PUSH
35693: LD_VAR 0 1
35697: PPUSH
35698: CALL_OW 263
35702: PUSH
35703: LD_INT 2
35705: NONEQUAL
35706: OR
35707: IFFALSE 35711
// exit ;
35709: GO 36027
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35711: LD_ADDR_VAR 0 6
35715: PUSH
35716: LD_INT 22
35718: PUSH
35719: LD_VAR 0 1
35723: PPUSH
35724: CALL_OW 255
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 2
35735: PUSH
35736: LD_INT 30
35738: PUSH
35739: LD_INT 36
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PUSH
35746: LD_INT 34
35748: PUSH
35749: LD_INT 31
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: LIST
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PPUSH
35765: CALL_OW 69
35769: ST_TO_ADDR
// if not tmp then
35770: LD_VAR 0 6
35774: NOT
35775: IFFALSE 35779
// exit ;
35777: GO 36027
// result := [ ] ;
35779: LD_ADDR_VAR 0 2
35783: PUSH
35784: EMPTY
35785: ST_TO_ADDR
// for i in tmp do
35786: LD_ADDR_VAR 0 3
35790: PUSH
35791: LD_VAR 0 6
35795: PUSH
35796: FOR_IN
35797: IFFALSE 35868
// begin t := UnitsInside ( i ) ;
35799: LD_ADDR_VAR 0 4
35803: PUSH
35804: LD_VAR 0 3
35808: PPUSH
35809: CALL_OW 313
35813: ST_TO_ADDR
// if t then
35814: LD_VAR 0 4
35818: IFFALSE 35866
// for j in t do
35820: LD_ADDR_VAR 0 7
35824: PUSH
35825: LD_VAR 0 4
35829: PUSH
35830: FOR_IN
35831: IFFALSE 35864
// result := Replace ( result , result + 1 , j ) ;
35833: LD_ADDR_VAR 0 2
35837: PUSH
35838: LD_VAR 0 2
35842: PPUSH
35843: LD_VAR 0 2
35847: PUSH
35848: LD_INT 1
35850: PLUS
35851: PPUSH
35852: LD_VAR 0 7
35856: PPUSH
35857: CALL_OW 1
35861: ST_TO_ADDR
35862: GO 35830
35864: POP
35865: POP
// end ;
35866: GO 35796
35868: POP
35869: POP
// if not result then
35870: LD_VAR 0 2
35874: NOT
35875: IFFALSE 35879
// exit ;
35877: GO 36027
// mech := result [ 1 ] ;
35879: LD_ADDR_VAR 0 5
35883: PUSH
35884: LD_VAR 0 2
35888: PUSH
35889: LD_INT 1
35891: ARRAY
35892: ST_TO_ADDR
// if result > 1 then
35893: LD_VAR 0 2
35897: PUSH
35898: LD_INT 1
35900: GREATER
35901: IFFALSE 36013
// begin for i = 2 to result do
35903: LD_ADDR_VAR 0 3
35907: PUSH
35908: DOUBLE
35909: LD_INT 2
35911: DEC
35912: ST_TO_ADDR
35913: LD_VAR 0 2
35917: PUSH
35918: FOR_TO
35919: IFFALSE 36011
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35921: LD_ADDR_VAR 0 4
35925: PUSH
35926: LD_VAR 0 2
35930: PUSH
35931: LD_VAR 0 3
35935: ARRAY
35936: PPUSH
35937: LD_INT 3
35939: PPUSH
35940: CALL_OW 259
35944: PUSH
35945: LD_VAR 0 2
35949: PUSH
35950: LD_VAR 0 3
35954: ARRAY
35955: PPUSH
35956: CALL_OW 432
35960: MINUS
35961: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35962: LD_VAR 0 4
35966: PUSH
35967: LD_VAR 0 5
35971: PPUSH
35972: LD_INT 3
35974: PPUSH
35975: CALL_OW 259
35979: PUSH
35980: LD_VAR 0 5
35984: PPUSH
35985: CALL_OW 432
35989: MINUS
35990: GREATEREQUAL
35991: IFFALSE 36009
// mech := result [ i ] ;
35993: LD_ADDR_VAR 0 5
35997: PUSH
35998: LD_VAR 0 2
36002: PUSH
36003: LD_VAR 0 3
36007: ARRAY
36008: ST_TO_ADDR
// end ;
36009: GO 35918
36011: POP
36012: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36013: LD_VAR 0 1
36017: PPUSH
36018: LD_VAR 0 5
36022: PPUSH
36023: CALL_OW 135
// end ;
36027: LD_VAR 0 2
36031: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36032: LD_INT 0
36034: PPUSH
36035: PPUSH
36036: PPUSH
36037: PPUSH
36038: PPUSH
36039: PPUSH
36040: PPUSH
36041: PPUSH
36042: PPUSH
36043: PPUSH
36044: PPUSH
36045: PPUSH
36046: PPUSH
// result := [ ] ;
36047: LD_ADDR_VAR 0 7
36051: PUSH
36052: EMPTY
36053: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36054: LD_VAR 0 1
36058: PPUSH
36059: CALL_OW 266
36063: PUSH
36064: LD_INT 0
36066: PUSH
36067: LD_INT 1
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: IN
36074: NOT
36075: IFFALSE 36079
// exit ;
36077: GO 37713
// if name then
36079: LD_VAR 0 3
36083: IFFALSE 36099
// SetBName ( base_dep , name ) ;
36085: LD_VAR 0 1
36089: PPUSH
36090: LD_VAR 0 3
36094: PPUSH
36095: CALL_OW 500
// base := GetBase ( base_dep ) ;
36099: LD_ADDR_VAR 0 15
36103: PUSH
36104: LD_VAR 0 1
36108: PPUSH
36109: CALL_OW 274
36113: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36114: LD_ADDR_VAR 0 16
36118: PUSH
36119: LD_VAR 0 1
36123: PPUSH
36124: CALL_OW 255
36128: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36129: LD_ADDR_VAR 0 17
36133: PUSH
36134: LD_VAR 0 1
36138: PPUSH
36139: CALL_OW 248
36143: ST_TO_ADDR
// if sources then
36144: LD_VAR 0 5
36148: IFFALSE 36195
// for i = 1 to 3 do
36150: LD_ADDR_VAR 0 8
36154: PUSH
36155: DOUBLE
36156: LD_INT 1
36158: DEC
36159: ST_TO_ADDR
36160: LD_INT 3
36162: PUSH
36163: FOR_TO
36164: IFFALSE 36193
// AddResourceType ( base , i , sources [ i ] ) ;
36166: LD_VAR 0 15
36170: PPUSH
36171: LD_VAR 0 8
36175: PPUSH
36176: LD_VAR 0 5
36180: PUSH
36181: LD_VAR 0 8
36185: ARRAY
36186: PPUSH
36187: CALL_OW 276
36191: GO 36163
36193: POP
36194: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36195: LD_ADDR_VAR 0 18
36199: PUSH
36200: LD_VAR 0 15
36204: PPUSH
36205: LD_VAR 0 2
36209: PPUSH
36210: LD_INT 1
36212: PPUSH
36213: CALL 35456 0 3
36217: ST_TO_ADDR
// InitHc ;
36218: CALL_OW 19
// InitUc ;
36222: CALL_OW 18
// uc_side := side ;
36226: LD_ADDR_OWVAR 20
36230: PUSH
36231: LD_VAR 0 16
36235: ST_TO_ADDR
// uc_nation := nation ;
36236: LD_ADDR_OWVAR 21
36240: PUSH
36241: LD_VAR 0 17
36245: ST_TO_ADDR
// if buildings then
36246: LD_VAR 0 18
36250: IFFALSE 37572
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36252: LD_ADDR_VAR 0 19
36256: PUSH
36257: LD_VAR 0 18
36261: PPUSH
36262: LD_INT 2
36264: PUSH
36265: LD_INT 30
36267: PUSH
36268: LD_INT 29
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 30
36277: PUSH
36278: LD_INT 30
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: LIST
36289: PPUSH
36290: CALL_OW 72
36294: ST_TO_ADDR
// if tmp then
36295: LD_VAR 0 19
36299: IFFALSE 36347
// for i in tmp do
36301: LD_ADDR_VAR 0 8
36305: PUSH
36306: LD_VAR 0 19
36310: PUSH
36311: FOR_IN
36312: IFFALSE 36345
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36314: LD_VAR 0 8
36318: PPUSH
36319: CALL_OW 250
36323: PPUSH
36324: LD_VAR 0 8
36328: PPUSH
36329: CALL_OW 251
36333: PPUSH
36334: LD_VAR 0 16
36338: PPUSH
36339: CALL_OW 441
36343: GO 36311
36345: POP
36346: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36347: LD_VAR 0 18
36351: PPUSH
36352: LD_INT 2
36354: PUSH
36355: LD_INT 30
36357: PUSH
36358: LD_INT 32
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 30
36367: PUSH
36368: LD_INT 33
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: LIST
36379: PPUSH
36380: CALL_OW 72
36384: IFFALSE 36472
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36386: LD_ADDR_VAR 0 8
36390: PUSH
36391: LD_VAR 0 18
36395: PPUSH
36396: LD_INT 2
36398: PUSH
36399: LD_INT 30
36401: PUSH
36402: LD_INT 32
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 30
36411: PUSH
36412: LD_INT 33
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: LIST
36423: PPUSH
36424: CALL_OW 72
36428: PUSH
36429: FOR_IN
36430: IFFALSE 36470
// begin if not GetBWeapon ( i ) then
36432: LD_VAR 0 8
36436: PPUSH
36437: CALL_OW 269
36441: NOT
36442: IFFALSE 36468
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36444: LD_VAR 0 8
36448: PPUSH
36449: LD_VAR 0 8
36453: PPUSH
36454: LD_VAR 0 2
36458: PPUSH
36459: CALL 37718 0 2
36463: PPUSH
36464: CALL_OW 431
// end ;
36468: GO 36429
36470: POP
36471: POP
// end ; for i = 1 to personel do
36472: LD_ADDR_VAR 0 8
36476: PUSH
36477: DOUBLE
36478: LD_INT 1
36480: DEC
36481: ST_TO_ADDR
36482: LD_VAR 0 6
36486: PUSH
36487: FOR_TO
36488: IFFALSE 37552
// begin if i > 4 then
36490: LD_VAR 0 8
36494: PUSH
36495: LD_INT 4
36497: GREATER
36498: IFFALSE 36502
// break ;
36500: GO 37552
// case i of 1 :
36502: LD_VAR 0 8
36506: PUSH
36507: LD_INT 1
36509: DOUBLE
36510: EQUAL
36511: IFTRUE 36515
36513: GO 36595
36515: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36516: LD_ADDR_VAR 0 12
36520: PUSH
36521: LD_VAR 0 18
36525: PPUSH
36526: LD_INT 22
36528: PUSH
36529: LD_VAR 0 16
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 58
36540: PUSH
36541: EMPTY
36542: LIST
36543: PUSH
36544: LD_INT 2
36546: PUSH
36547: LD_INT 30
36549: PUSH
36550: LD_INT 32
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 30
36559: PUSH
36560: LD_INT 4
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 30
36569: PUSH
36570: LD_INT 5
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: LIST
36587: PPUSH
36588: CALL_OW 72
36592: ST_TO_ADDR
36593: GO 36817
36595: LD_INT 2
36597: DOUBLE
36598: EQUAL
36599: IFTRUE 36603
36601: GO 36665
36603: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36604: LD_ADDR_VAR 0 12
36608: PUSH
36609: LD_VAR 0 18
36613: PPUSH
36614: LD_INT 22
36616: PUSH
36617: LD_VAR 0 16
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 2
36628: PUSH
36629: LD_INT 30
36631: PUSH
36632: LD_INT 0
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 30
36641: PUSH
36642: LD_INT 1
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: LIST
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PPUSH
36658: CALL_OW 72
36662: ST_TO_ADDR
36663: GO 36817
36665: LD_INT 3
36667: DOUBLE
36668: EQUAL
36669: IFTRUE 36673
36671: GO 36735
36673: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36674: LD_ADDR_VAR 0 12
36678: PUSH
36679: LD_VAR 0 18
36683: PPUSH
36684: LD_INT 22
36686: PUSH
36687: LD_VAR 0 16
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 2
36698: PUSH
36699: LD_INT 30
36701: PUSH
36702: LD_INT 2
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 30
36711: PUSH
36712: LD_INT 3
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: LIST
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PPUSH
36728: CALL_OW 72
36732: ST_TO_ADDR
36733: GO 36817
36735: LD_INT 4
36737: DOUBLE
36738: EQUAL
36739: IFTRUE 36743
36741: GO 36816
36743: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36744: LD_ADDR_VAR 0 12
36748: PUSH
36749: LD_VAR 0 18
36753: PPUSH
36754: LD_INT 22
36756: PUSH
36757: LD_VAR 0 16
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: LD_INT 2
36768: PUSH
36769: LD_INT 30
36771: PUSH
36772: LD_INT 6
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: PUSH
36779: LD_INT 30
36781: PUSH
36782: LD_INT 7
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 30
36791: PUSH
36792: LD_INT 8
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PPUSH
36809: CALL_OW 72
36813: ST_TO_ADDR
36814: GO 36817
36816: POP
// if i = 1 then
36817: LD_VAR 0 8
36821: PUSH
36822: LD_INT 1
36824: EQUAL
36825: IFFALSE 36936
// begin tmp := [ ] ;
36827: LD_ADDR_VAR 0 19
36831: PUSH
36832: EMPTY
36833: ST_TO_ADDR
// for j in f do
36834: LD_ADDR_VAR 0 9
36838: PUSH
36839: LD_VAR 0 12
36843: PUSH
36844: FOR_IN
36845: IFFALSE 36918
// if GetBType ( j ) = b_bunker then
36847: LD_VAR 0 9
36851: PPUSH
36852: CALL_OW 266
36856: PUSH
36857: LD_INT 32
36859: EQUAL
36860: IFFALSE 36887
// tmp := Insert ( tmp , 1 , j ) else
36862: LD_ADDR_VAR 0 19
36866: PUSH
36867: LD_VAR 0 19
36871: PPUSH
36872: LD_INT 1
36874: PPUSH
36875: LD_VAR 0 9
36879: PPUSH
36880: CALL_OW 2
36884: ST_TO_ADDR
36885: GO 36916
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36887: LD_ADDR_VAR 0 19
36891: PUSH
36892: LD_VAR 0 19
36896: PPUSH
36897: LD_VAR 0 19
36901: PUSH
36902: LD_INT 1
36904: PLUS
36905: PPUSH
36906: LD_VAR 0 9
36910: PPUSH
36911: CALL_OW 2
36915: ST_TO_ADDR
36916: GO 36844
36918: POP
36919: POP
// if tmp then
36920: LD_VAR 0 19
36924: IFFALSE 36936
// f := tmp ;
36926: LD_ADDR_VAR 0 12
36930: PUSH
36931: LD_VAR 0 19
36935: ST_TO_ADDR
// end ; x := personel [ i ] ;
36936: LD_ADDR_VAR 0 13
36940: PUSH
36941: LD_VAR 0 6
36945: PUSH
36946: LD_VAR 0 8
36950: ARRAY
36951: ST_TO_ADDR
// if x = - 1 then
36952: LD_VAR 0 13
36956: PUSH
36957: LD_INT 1
36959: NEG
36960: EQUAL
36961: IFFALSE 37170
// begin for j in f do
36963: LD_ADDR_VAR 0 9
36967: PUSH
36968: LD_VAR 0 12
36972: PUSH
36973: FOR_IN
36974: IFFALSE 37166
// repeat InitHc ;
36976: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36980: LD_VAR 0 9
36984: PPUSH
36985: CALL_OW 266
36989: PUSH
36990: LD_INT 5
36992: EQUAL
36993: IFFALSE 37063
// begin if UnitsInside ( j ) < 3 then
36995: LD_VAR 0 9
36999: PPUSH
37000: CALL_OW 313
37004: PUSH
37005: LD_INT 3
37007: LESS
37008: IFFALSE 37044
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37010: LD_INT 0
37012: PPUSH
37013: LD_INT 5
37015: PUSH
37016: LD_INT 8
37018: PUSH
37019: LD_INT 9
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: LIST
37026: PUSH
37027: LD_VAR 0 17
37031: ARRAY
37032: PPUSH
37033: LD_VAR 0 4
37037: PPUSH
37038: CALL_OW 380
37042: GO 37061
// PrepareHuman ( false , i , skill ) ;
37044: LD_INT 0
37046: PPUSH
37047: LD_VAR 0 8
37051: PPUSH
37052: LD_VAR 0 4
37056: PPUSH
37057: CALL_OW 380
// end else
37061: GO 37080
// PrepareHuman ( false , i , skill ) ;
37063: LD_INT 0
37065: PPUSH
37066: LD_VAR 0 8
37070: PPUSH
37071: LD_VAR 0 4
37075: PPUSH
37076: CALL_OW 380
// un := CreateHuman ;
37080: LD_ADDR_VAR 0 14
37084: PUSH
37085: CALL_OW 44
37089: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37090: LD_ADDR_VAR 0 7
37094: PUSH
37095: LD_VAR 0 7
37099: PPUSH
37100: LD_INT 1
37102: PPUSH
37103: LD_VAR 0 14
37107: PPUSH
37108: CALL_OW 2
37112: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37113: LD_VAR 0 14
37117: PPUSH
37118: LD_VAR 0 9
37122: PPUSH
37123: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37127: LD_VAR 0 9
37131: PPUSH
37132: CALL_OW 313
37136: PUSH
37137: LD_INT 6
37139: EQUAL
37140: PUSH
37141: LD_VAR 0 9
37145: PPUSH
37146: CALL_OW 266
37150: PUSH
37151: LD_INT 32
37153: PUSH
37154: LD_INT 31
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: IN
37161: OR
37162: IFFALSE 36976
37164: GO 36973
37166: POP
37167: POP
// end else
37168: GO 37550
// for j = 1 to x do
37170: LD_ADDR_VAR 0 9
37174: PUSH
37175: DOUBLE
37176: LD_INT 1
37178: DEC
37179: ST_TO_ADDR
37180: LD_VAR 0 13
37184: PUSH
37185: FOR_TO
37186: IFFALSE 37548
// begin InitHc ;
37188: CALL_OW 19
// if not f then
37192: LD_VAR 0 12
37196: NOT
37197: IFFALSE 37286
// begin PrepareHuman ( false , i , skill ) ;
37199: LD_INT 0
37201: PPUSH
37202: LD_VAR 0 8
37206: PPUSH
37207: LD_VAR 0 4
37211: PPUSH
37212: CALL_OW 380
// un := CreateHuman ;
37216: LD_ADDR_VAR 0 14
37220: PUSH
37221: CALL_OW 44
37225: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37226: LD_ADDR_VAR 0 7
37230: PUSH
37231: LD_VAR 0 7
37235: PPUSH
37236: LD_INT 1
37238: PPUSH
37239: LD_VAR 0 14
37243: PPUSH
37244: CALL_OW 2
37248: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37249: LD_VAR 0 14
37253: PPUSH
37254: LD_VAR 0 1
37258: PPUSH
37259: CALL_OW 250
37263: PPUSH
37264: LD_VAR 0 1
37268: PPUSH
37269: CALL_OW 251
37273: PPUSH
37274: LD_INT 10
37276: PPUSH
37277: LD_INT 0
37279: PPUSH
37280: CALL_OW 50
// continue ;
37284: GO 37185
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37286: LD_VAR 0 12
37290: PUSH
37291: LD_INT 1
37293: ARRAY
37294: PPUSH
37295: CALL_OW 313
37299: PUSH
37300: LD_VAR 0 12
37304: PUSH
37305: LD_INT 1
37307: ARRAY
37308: PPUSH
37309: CALL_OW 266
37313: PUSH
37314: LD_INT 32
37316: PUSH
37317: LD_INT 31
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: IN
37324: AND
37325: PUSH
37326: LD_VAR 0 12
37330: PUSH
37331: LD_INT 1
37333: ARRAY
37334: PPUSH
37335: CALL_OW 313
37339: PUSH
37340: LD_INT 6
37342: EQUAL
37343: OR
37344: IFFALSE 37364
// f := Delete ( f , 1 ) ;
37346: LD_ADDR_VAR 0 12
37350: PUSH
37351: LD_VAR 0 12
37355: PPUSH
37356: LD_INT 1
37358: PPUSH
37359: CALL_OW 3
37363: ST_TO_ADDR
// if not f then
37364: LD_VAR 0 12
37368: NOT
37369: IFFALSE 37387
// begin x := x + 2 ;
37371: LD_ADDR_VAR 0 13
37375: PUSH
37376: LD_VAR 0 13
37380: PUSH
37381: LD_INT 2
37383: PLUS
37384: ST_TO_ADDR
// continue ;
37385: GO 37185
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37387: LD_VAR 0 12
37391: PUSH
37392: LD_INT 1
37394: ARRAY
37395: PPUSH
37396: CALL_OW 266
37400: PUSH
37401: LD_INT 5
37403: EQUAL
37404: IFFALSE 37478
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37406: LD_VAR 0 12
37410: PUSH
37411: LD_INT 1
37413: ARRAY
37414: PPUSH
37415: CALL_OW 313
37419: PUSH
37420: LD_INT 3
37422: LESS
37423: IFFALSE 37459
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37425: LD_INT 0
37427: PPUSH
37428: LD_INT 5
37430: PUSH
37431: LD_INT 8
37433: PUSH
37434: LD_INT 9
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: LIST
37441: PUSH
37442: LD_VAR 0 17
37446: ARRAY
37447: PPUSH
37448: LD_VAR 0 4
37452: PPUSH
37453: CALL_OW 380
37457: GO 37476
// PrepareHuman ( false , i , skill ) ;
37459: LD_INT 0
37461: PPUSH
37462: LD_VAR 0 8
37466: PPUSH
37467: LD_VAR 0 4
37471: PPUSH
37472: CALL_OW 380
// end else
37476: GO 37495
// PrepareHuman ( false , i , skill ) ;
37478: LD_INT 0
37480: PPUSH
37481: LD_VAR 0 8
37485: PPUSH
37486: LD_VAR 0 4
37490: PPUSH
37491: CALL_OW 380
// un := CreateHuman ;
37495: LD_ADDR_VAR 0 14
37499: PUSH
37500: CALL_OW 44
37504: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37505: LD_ADDR_VAR 0 7
37509: PUSH
37510: LD_VAR 0 7
37514: PPUSH
37515: LD_INT 1
37517: PPUSH
37518: LD_VAR 0 14
37522: PPUSH
37523: CALL_OW 2
37527: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37528: LD_VAR 0 14
37532: PPUSH
37533: LD_VAR 0 12
37537: PUSH
37538: LD_INT 1
37540: ARRAY
37541: PPUSH
37542: CALL_OW 52
// end ;
37546: GO 37185
37548: POP
37549: POP
// end ;
37550: GO 36487
37552: POP
37553: POP
// result := result ^ buildings ;
37554: LD_ADDR_VAR 0 7
37558: PUSH
37559: LD_VAR 0 7
37563: PUSH
37564: LD_VAR 0 18
37568: ADD
37569: ST_TO_ADDR
// end else
37570: GO 37713
// begin for i = 1 to personel do
37572: LD_ADDR_VAR 0 8
37576: PUSH
37577: DOUBLE
37578: LD_INT 1
37580: DEC
37581: ST_TO_ADDR
37582: LD_VAR 0 6
37586: PUSH
37587: FOR_TO
37588: IFFALSE 37711
// begin if i > 4 then
37590: LD_VAR 0 8
37594: PUSH
37595: LD_INT 4
37597: GREATER
37598: IFFALSE 37602
// break ;
37600: GO 37711
// x := personel [ i ] ;
37602: LD_ADDR_VAR 0 13
37606: PUSH
37607: LD_VAR 0 6
37611: PUSH
37612: LD_VAR 0 8
37616: ARRAY
37617: ST_TO_ADDR
// if x = - 1 then
37618: LD_VAR 0 13
37622: PUSH
37623: LD_INT 1
37625: NEG
37626: EQUAL
37627: IFFALSE 37631
// continue ;
37629: GO 37587
// PrepareHuman ( false , i , skill ) ;
37631: LD_INT 0
37633: PPUSH
37634: LD_VAR 0 8
37638: PPUSH
37639: LD_VAR 0 4
37643: PPUSH
37644: CALL_OW 380
// un := CreateHuman ;
37648: LD_ADDR_VAR 0 14
37652: PUSH
37653: CALL_OW 44
37657: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37658: LD_VAR 0 14
37662: PPUSH
37663: LD_VAR 0 1
37667: PPUSH
37668: CALL_OW 250
37672: PPUSH
37673: LD_VAR 0 1
37677: PPUSH
37678: CALL_OW 251
37682: PPUSH
37683: LD_INT 10
37685: PPUSH
37686: LD_INT 0
37688: PPUSH
37689: CALL_OW 50
// result := result ^ un ;
37693: LD_ADDR_VAR 0 7
37697: PUSH
37698: LD_VAR 0 7
37702: PUSH
37703: LD_VAR 0 14
37707: ADD
37708: ST_TO_ADDR
// end ;
37709: GO 37587
37711: POP
37712: POP
// end ; end ;
37713: LD_VAR 0 7
37717: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37718: LD_INT 0
37720: PPUSH
37721: PPUSH
37722: PPUSH
37723: PPUSH
37724: PPUSH
37725: PPUSH
37726: PPUSH
37727: PPUSH
37728: PPUSH
37729: PPUSH
37730: PPUSH
37731: PPUSH
37732: PPUSH
37733: PPUSH
37734: PPUSH
37735: PPUSH
// result := false ;
37736: LD_ADDR_VAR 0 3
37740: PUSH
37741: LD_INT 0
37743: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37744: LD_VAR 0 1
37748: NOT
37749: PUSH
37750: LD_VAR 0 1
37754: PPUSH
37755: CALL_OW 266
37759: PUSH
37760: LD_INT 32
37762: PUSH
37763: LD_INT 33
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: IN
37770: NOT
37771: OR
37772: IFFALSE 37776
// exit ;
37774: GO 38885
// nat := GetNation ( tower ) ;
37776: LD_ADDR_VAR 0 12
37780: PUSH
37781: LD_VAR 0 1
37785: PPUSH
37786: CALL_OW 248
37790: ST_TO_ADDR
// side := GetSide ( tower ) ;
37791: LD_ADDR_VAR 0 16
37795: PUSH
37796: LD_VAR 0 1
37800: PPUSH
37801: CALL_OW 255
37805: ST_TO_ADDR
// x := GetX ( tower ) ;
37806: LD_ADDR_VAR 0 10
37810: PUSH
37811: LD_VAR 0 1
37815: PPUSH
37816: CALL_OW 250
37820: ST_TO_ADDR
// y := GetY ( tower ) ;
37821: LD_ADDR_VAR 0 11
37825: PUSH
37826: LD_VAR 0 1
37830: PPUSH
37831: CALL_OW 251
37835: ST_TO_ADDR
// if not x or not y then
37836: LD_VAR 0 10
37840: NOT
37841: PUSH
37842: LD_VAR 0 11
37846: NOT
37847: OR
37848: IFFALSE 37852
// exit ;
37850: GO 38885
// weapon := 0 ;
37852: LD_ADDR_VAR 0 18
37856: PUSH
37857: LD_INT 0
37859: ST_TO_ADDR
// fac_list := [ ] ;
37860: LD_ADDR_VAR 0 17
37864: PUSH
37865: EMPTY
37866: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37867: LD_ADDR_VAR 0 6
37871: PUSH
37872: LD_VAR 0 1
37876: PPUSH
37877: CALL_OW 274
37881: PPUSH
37882: LD_VAR 0 2
37886: PPUSH
37887: LD_INT 0
37889: PPUSH
37890: CALL 35456 0 3
37894: PPUSH
37895: LD_INT 30
37897: PUSH
37898: LD_INT 3
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PPUSH
37905: CALL_OW 72
37909: ST_TO_ADDR
// if not factories then
37910: LD_VAR 0 6
37914: NOT
37915: IFFALSE 37919
// exit ;
37917: GO 38885
// for i in factories do
37919: LD_ADDR_VAR 0 8
37923: PUSH
37924: LD_VAR 0 6
37928: PUSH
37929: FOR_IN
37930: IFFALSE 37955
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37932: LD_ADDR_VAR 0 17
37936: PUSH
37937: LD_VAR 0 17
37941: PUSH
37942: LD_VAR 0 8
37946: PPUSH
37947: CALL_OW 478
37951: UNION
37952: ST_TO_ADDR
37953: GO 37929
37955: POP
37956: POP
// if not fac_list then
37957: LD_VAR 0 17
37961: NOT
37962: IFFALSE 37966
// exit ;
37964: GO 38885
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37966: LD_ADDR_VAR 0 5
37970: PUSH
37971: LD_INT 4
37973: PUSH
37974: LD_INT 5
37976: PUSH
37977: LD_INT 9
37979: PUSH
37980: LD_INT 10
37982: PUSH
37983: LD_INT 6
37985: PUSH
37986: LD_INT 7
37988: PUSH
37989: LD_INT 11
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: PUSH
38001: LD_INT 27
38003: PUSH
38004: LD_INT 28
38006: PUSH
38007: LD_INT 26
38009: PUSH
38010: LD_INT 30
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 43
38021: PUSH
38022: LD_INT 44
38024: PUSH
38025: LD_INT 46
38027: PUSH
38028: LD_INT 45
38030: PUSH
38031: LD_INT 47
38033: PUSH
38034: LD_INT 49
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: LIST
38049: PUSH
38050: LD_VAR 0 12
38054: ARRAY
38055: ST_TO_ADDR
// list := list isect fac_list ;
38056: LD_ADDR_VAR 0 5
38060: PUSH
38061: LD_VAR 0 5
38065: PUSH
38066: LD_VAR 0 17
38070: ISECT
38071: ST_TO_ADDR
// if not list then
38072: LD_VAR 0 5
38076: NOT
38077: IFFALSE 38081
// exit ;
38079: GO 38885
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38081: LD_VAR 0 12
38085: PUSH
38086: LD_INT 3
38088: EQUAL
38089: PUSH
38090: LD_INT 49
38092: PUSH
38093: LD_VAR 0 5
38097: IN
38098: AND
38099: PUSH
38100: LD_INT 31
38102: PPUSH
38103: LD_VAR 0 16
38107: PPUSH
38108: CALL_OW 321
38112: PUSH
38113: LD_INT 2
38115: EQUAL
38116: AND
38117: IFFALSE 38177
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38119: LD_INT 22
38121: PUSH
38122: LD_VAR 0 16
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 35
38133: PUSH
38134: LD_INT 49
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 91
38143: PUSH
38144: LD_VAR 0 1
38148: PUSH
38149: LD_INT 10
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: LIST
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: LIST
38161: PPUSH
38162: CALL_OW 69
38166: NOT
38167: IFFALSE 38177
// weapon := ru_time_lapser ;
38169: LD_ADDR_VAR 0 18
38173: PUSH
38174: LD_INT 49
38176: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38177: LD_VAR 0 12
38181: PUSH
38182: LD_INT 1
38184: PUSH
38185: LD_INT 2
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: IN
38192: PUSH
38193: LD_INT 11
38195: PUSH
38196: LD_VAR 0 5
38200: IN
38201: PUSH
38202: LD_INT 30
38204: PUSH
38205: LD_VAR 0 5
38209: IN
38210: OR
38211: AND
38212: PUSH
38213: LD_INT 6
38215: PPUSH
38216: LD_VAR 0 16
38220: PPUSH
38221: CALL_OW 321
38225: PUSH
38226: LD_INT 2
38228: EQUAL
38229: AND
38230: IFFALSE 38395
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38232: LD_INT 22
38234: PUSH
38235: LD_VAR 0 16
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 2
38246: PUSH
38247: LD_INT 35
38249: PUSH
38250: LD_INT 11
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 35
38259: PUSH
38260: LD_INT 30
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 91
38274: PUSH
38275: LD_VAR 0 1
38279: PUSH
38280: LD_INT 18
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: LIST
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: LIST
38292: PPUSH
38293: CALL_OW 69
38297: NOT
38298: PUSH
38299: LD_INT 22
38301: PUSH
38302: LD_VAR 0 16
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 2
38313: PUSH
38314: LD_INT 30
38316: PUSH
38317: LD_INT 32
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 30
38326: PUSH
38327: LD_INT 33
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 91
38341: PUSH
38342: LD_VAR 0 1
38346: PUSH
38347: LD_INT 12
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: LIST
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: LIST
38359: PUSH
38360: EMPTY
38361: LIST
38362: PPUSH
38363: CALL_OW 69
38367: PUSH
38368: LD_INT 2
38370: GREATER
38371: AND
38372: IFFALSE 38395
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38374: LD_ADDR_VAR 0 18
38378: PUSH
38379: LD_INT 11
38381: PUSH
38382: LD_INT 30
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_VAR 0 12
38393: ARRAY
38394: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38395: LD_VAR 0 18
38399: NOT
38400: PUSH
38401: LD_INT 40
38403: PPUSH
38404: LD_VAR 0 16
38408: PPUSH
38409: CALL_OW 321
38413: PUSH
38414: LD_INT 2
38416: EQUAL
38417: AND
38418: PUSH
38419: LD_INT 7
38421: PUSH
38422: LD_VAR 0 5
38426: IN
38427: PUSH
38428: LD_INT 28
38430: PUSH
38431: LD_VAR 0 5
38435: IN
38436: OR
38437: PUSH
38438: LD_INT 45
38440: PUSH
38441: LD_VAR 0 5
38445: IN
38446: OR
38447: AND
38448: IFFALSE 38702
// begin hex := GetHexInfo ( x , y ) ;
38450: LD_ADDR_VAR 0 4
38454: PUSH
38455: LD_VAR 0 10
38459: PPUSH
38460: LD_VAR 0 11
38464: PPUSH
38465: CALL_OW 546
38469: ST_TO_ADDR
// if hex [ 1 ] then
38470: LD_VAR 0 4
38474: PUSH
38475: LD_INT 1
38477: ARRAY
38478: IFFALSE 38482
// exit ;
38480: GO 38885
// height := hex [ 2 ] ;
38482: LD_ADDR_VAR 0 15
38486: PUSH
38487: LD_VAR 0 4
38491: PUSH
38492: LD_INT 2
38494: ARRAY
38495: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38496: LD_ADDR_VAR 0 14
38500: PUSH
38501: LD_INT 0
38503: PUSH
38504: LD_INT 2
38506: PUSH
38507: LD_INT 3
38509: PUSH
38510: LD_INT 5
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: ST_TO_ADDR
// for i in tmp do
38519: LD_ADDR_VAR 0 8
38523: PUSH
38524: LD_VAR 0 14
38528: PUSH
38529: FOR_IN
38530: IFFALSE 38700
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38532: LD_ADDR_VAR 0 9
38536: PUSH
38537: LD_VAR 0 10
38541: PPUSH
38542: LD_VAR 0 8
38546: PPUSH
38547: LD_INT 5
38549: PPUSH
38550: CALL_OW 272
38554: PUSH
38555: LD_VAR 0 11
38559: PPUSH
38560: LD_VAR 0 8
38564: PPUSH
38565: LD_INT 5
38567: PPUSH
38568: CALL_OW 273
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38577: LD_VAR 0 9
38581: PUSH
38582: LD_INT 1
38584: ARRAY
38585: PPUSH
38586: LD_VAR 0 9
38590: PUSH
38591: LD_INT 2
38593: ARRAY
38594: PPUSH
38595: CALL_OW 488
38599: IFFALSE 38698
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38601: LD_ADDR_VAR 0 4
38605: PUSH
38606: LD_VAR 0 9
38610: PUSH
38611: LD_INT 1
38613: ARRAY
38614: PPUSH
38615: LD_VAR 0 9
38619: PUSH
38620: LD_INT 2
38622: ARRAY
38623: PPUSH
38624: CALL_OW 546
38628: ST_TO_ADDR
// if hex [ 1 ] then
38629: LD_VAR 0 4
38633: PUSH
38634: LD_INT 1
38636: ARRAY
38637: IFFALSE 38641
// continue ;
38639: GO 38529
// h := hex [ 2 ] ;
38641: LD_ADDR_VAR 0 13
38645: PUSH
38646: LD_VAR 0 4
38650: PUSH
38651: LD_INT 2
38653: ARRAY
38654: ST_TO_ADDR
// if h + 7 < height then
38655: LD_VAR 0 13
38659: PUSH
38660: LD_INT 7
38662: PLUS
38663: PUSH
38664: LD_VAR 0 15
38668: LESS
38669: IFFALSE 38698
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38671: LD_ADDR_VAR 0 18
38675: PUSH
38676: LD_INT 7
38678: PUSH
38679: LD_INT 28
38681: PUSH
38682: LD_INT 45
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: LIST
38689: PUSH
38690: LD_VAR 0 12
38694: ARRAY
38695: ST_TO_ADDR
// break ;
38696: GO 38700
// end ; end ; end ;
38698: GO 38529
38700: POP
38701: POP
// end ; if not weapon then
38702: LD_VAR 0 18
38706: NOT
38707: IFFALSE 38767
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38709: LD_ADDR_VAR 0 5
38713: PUSH
38714: LD_VAR 0 5
38718: PUSH
38719: LD_INT 11
38721: PUSH
38722: LD_INT 30
38724: PUSH
38725: LD_INT 49
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: LIST
38732: DIFF
38733: ST_TO_ADDR
// if not list then
38734: LD_VAR 0 5
38738: NOT
38739: IFFALSE 38743
// exit ;
38741: GO 38885
// weapon := list [ rand ( 1 , list ) ] ;
38743: LD_ADDR_VAR 0 18
38747: PUSH
38748: LD_VAR 0 5
38752: PUSH
38753: LD_INT 1
38755: PPUSH
38756: LD_VAR 0 5
38760: PPUSH
38761: CALL_OW 12
38765: ARRAY
38766: ST_TO_ADDR
// end ; if weapon then
38767: LD_VAR 0 18
38771: IFFALSE 38885
// begin tmp := CostOfWeapon ( weapon ) ;
38773: LD_ADDR_VAR 0 14
38777: PUSH
38778: LD_VAR 0 18
38782: PPUSH
38783: CALL_OW 451
38787: ST_TO_ADDR
// j := GetBase ( tower ) ;
38788: LD_ADDR_VAR 0 9
38792: PUSH
38793: LD_VAR 0 1
38797: PPUSH
38798: CALL_OW 274
38802: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38803: LD_VAR 0 9
38807: PPUSH
38808: LD_INT 1
38810: PPUSH
38811: CALL_OW 275
38815: PUSH
38816: LD_VAR 0 14
38820: PUSH
38821: LD_INT 1
38823: ARRAY
38824: GREATEREQUAL
38825: PUSH
38826: LD_VAR 0 9
38830: PPUSH
38831: LD_INT 2
38833: PPUSH
38834: CALL_OW 275
38838: PUSH
38839: LD_VAR 0 14
38843: PUSH
38844: LD_INT 2
38846: ARRAY
38847: GREATEREQUAL
38848: AND
38849: PUSH
38850: LD_VAR 0 9
38854: PPUSH
38855: LD_INT 3
38857: PPUSH
38858: CALL_OW 275
38862: PUSH
38863: LD_VAR 0 14
38867: PUSH
38868: LD_INT 3
38870: ARRAY
38871: GREATEREQUAL
38872: AND
38873: IFFALSE 38885
// result := weapon ;
38875: LD_ADDR_VAR 0 3
38879: PUSH
38880: LD_VAR 0 18
38884: ST_TO_ADDR
// end ; end ;
38885: LD_VAR 0 3
38889: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38890: LD_INT 0
38892: PPUSH
38893: PPUSH
// result := true ;
38894: LD_ADDR_VAR 0 3
38898: PUSH
38899: LD_INT 1
38901: ST_TO_ADDR
// if array1 = array2 then
38902: LD_VAR 0 1
38906: PUSH
38907: LD_VAR 0 2
38911: EQUAL
38912: IFFALSE 38972
// begin for i = 1 to array1 do
38914: LD_ADDR_VAR 0 4
38918: PUSH
38919: DOUBLE
38920: LD_INT 1
38922: DEC
38923: ST_TO_ADDR
38924: LD_VAR 0 1
38928: PUSH
38929: FOR_TO
38930: IFFALSE 38968
// if array1 [ i ] <> array2 [ i ] then
38932: LD_VAR 0 1
38936: PUSH
38937: LD_VAR 0 4
38941: ARRAY
38942: PUSH
38943: LD_VAR 0 2
38947: PUSH
38948: LD_VAR 0 4
38952: ARRAY
38953: NONEQUAL
38954: IFFALSE 38966
// begin result := false ;
38956: LD_ADDR_VAR 0 3
38960: PUSH
38961: LD_INT 0
38963: ST_TO_ADDR
// break ;
38964: GO 38968
// end ;
38966: GO 38929
38968: POP
38969: POP
// end else
38970: GO 38980
// result := false ;
38972: LD_ADDR_VAR 0 3
38976: PUSH
38977: LD_INT 0
38979: ST_TO_ADDR
// end ;
38980: LD_VAR 0 3
38984: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38985: LD_INT 0
38987: PPUSH
38988: PPUSH
// if not array1 or not array2 then
38989: LD_VAR 0 1
38993: NOT
38994: PUSH
38995: LD_VAR 0 2
38999: NOT
39000: OR
39001: IFFALSE 39005
// exit ;
39003: GO 39069
// result := true ;
39005: LD_ADDR_VAR 0 3
39009: PUSH
39010: LD_INT 1
39012: ST_TO_ADDR
// for i = 1 to array1 do
39013: LD_ADDR_VAR 0 4
39017: PUSH
39018: DOUBLE
39019: LD_INT 1
39021: DEC
39022: ST_TO_ADDR
39023: LD_VAR 0 1
39027: PUSH
39028: FOR_TO
39029: IFFALSE 39067
// if array1 [ i ] <> array2 [ i ] then
39031: LD_VAR 0 1
39035: PUSH
39036: LD_VAR 0 4
39040: ARRAY
39041: PUSH
39042: LD_VAR 0 2
39046: PUSH
39047: LD_VAR 0 4
39051: ARRAY
39052: NONEQUAL
39053: IFFALSE 39065
// begin result := false ;
39055: LD_ADDR_VAR 0 3
39059: PUSH
39060: LD_INT 0
39062: ST_TO_ADDR
// break ;
39063: GO 39067
// end ;
39065: GO 39028
39067: POP
39068: POP
// end ;
39069: LD_VAR 0 3
39073: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39074: LD_INT 0
39076: PPUSH
39077: PPUSH
39078: PPUSH
// pom := GetBase ( fac ) ;
39079: LD_ADDR_VAR 0 5
39083: PUSH
39084: LD_VAR 0 1
39088: PPUSH
39089: CALL_OW 274
39093: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39094: LD_ADDR_VAR 0 4
39098: PUSH
39099: LD_VAR 0 2
39103: PUSH
39104: LD_INT 1
39106: ARRAY
39107: PPUSH
39108: LD_VAR 0 2
39112: PUSH
39113: LD_INT 2
39115: ARRAY
39116: PPUSH
39117: LD_VAR 0 2
39121: PUSH
39122: LD_INT 3
39124: ARRAY
39125: PPUSH
39126: LD_VAR 0 2
39130: PUSH
39131: LD_INT 4
39133: ARRAY
39134: PPUSH
39135: CALL_OW 449
39139: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39140: LD_ADDR_VAR 0 3
39144: PUSH
39145: LD_VAR 0 5
39149: PPUSH
39150: LD_INT 1
39152: PPUSH
39153: CALL_OW 275
39157: PUSH
39158: LD_VAR 0 4
39162: PUSH
39163: LD_INT 1
39165: ARRAY
39166: GREATEREQUAL
39167: PUSH
39168: LD_VAR 0 5
39172: PPUSH
39173: LD_INT 2
39175: PPUSH
39176: CALL_OW 275
39180: PUSH
39181: LD_VAR 0 4
39185: PUSH
39186: LD_INT 2
39188: ARRAY
39189: GREATEREQUAL
39190: AND
39191: PUSH
39192: LD_VAR 0 5
39196: PPUSH
39197: LD_INT 3
39199: PPUSH
39200: CALL_OW 275
39204: PUSH
39205: LD_VAR 0 4
39209: PUSH
39210: LD_INT 3
39212: ARRAY
39213: GREATEREQUAL
39214: AND
39215: ST_TO_ADDR
// end ;
39216: LD_VAR 0 3
39220: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39221: LD_INT 0
39223: PPUSH
39224: PPUSH
39225: PPUSH
39226: PPUSH
// pom := GetBase ( building ) ;
39227: LD_ADDR_VAR 0 3
39231: PUSH
39232: LD_VAR 0 1
39236: PPUSH
39237: CALL_OW 274
39241: ST_TO_ADDR
// if not pom then
39242: LD_VAR 0 3
39246: NOT
39247: IFFALSE 39251
// exit ;
39249: GO 39421
// btype := GetBType ( building ) ;
39251: LD_ADDR_VAR 0 5
39255: PUSH
39256: LD_VAR 0 1
39260: PPUSH
39261: CALL_OW 266
39265: ST_TO_ADDR
// if btype = b_armoury then
39266: LD_VAR 0 5
39270: PUSH
39271: LD_INT 4
39273: EQUAL
39274: IFFALSE 39284
// btype := b_barracks ;
39276: LD_ADDR_VAR 0 5
39280: PUSH
39281: LD_INT 5
39283: ST_TO_ADDR
// if btype = b_depot then
39284: LD_VAR 0 5
39288: PUSH
39289: LD_INT 0
39291: EQUAL
39292: IFFALSE 39302
// btype := b_warehouse ;
39294: LD_ADDR_VAR 0 5
39298: PUSH
39299: LD_INT 1
39301: ST_TO_ADDR
// if btype = b_workshop then
39302: LD_VAR 0 5
39306: PUSH
39307: LD_INT 2
39309: EQUAL
39310: IFFALSE 39320
// btype := b_factory ;
39312: LD_ADDR_VAR 0 5
39316: PUSH
39317: LD_INT 3
39319: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39320: LD_ADDR_VAR 0 4
39324: PUSH
39325: LD_VAR 0 5
39329: PPUSH
39330: LD_VAR 0 1
39334: PPUSH
39335: CALL_OW 248
39339: PPUSH
39340: CALL_OW 450
39344: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39345: LD_ADDR_VAR 0 2
39349: PUSH
39350: LD_VAR 0 3
39354: PPUSH
39355: LD_INT 1
39357: PPUSH
39358: CALL_OW 275
39362: PUSH
39363: LD_VAR 0 4
39367: PUSH
39368: LD_INT 1
39370: ARRAY
39371: GREATEREQUAL
39372: PUSH
39373: LD_VAR 0 3
39377: PPUSH
39378: LD_INT 2
39380: PPUSH
39381: CALL_OW 275
39385: PUSH
39386: LD_VAR 0 4
39390: PUSH
39391: LD_INT 2
39393: ARRAY
39394: GREATEREQUAL
39395: AND
39396: PUSH
39397: LD_VAR 0 3
39401: PPUSH
39402: LD_INT 3
39404: PPUSH
39405: CALL_OW 275
39409: PUSH
39410: LD_VAR 0 4
39414: PUSH
39415: LD_INT 3
39417: ARRAY
39418: GREATEREQUAL
39419: AND
39420: ST_TO_ADDR
// end ;
39421: LD_VAR 0 2
39425: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39426: LD_INT 0
39428: PPUSH
39429: PPUSH
39430: PPUSH
// pom := GetBase ( building ) ;
39431: LD_ADDR_VAR 0 4
39435: PUSH
39436: LD_VAR 0 1
39440: PPUSH
39441: CALL_OW 274
39445: ST_TO_ADDR
// if not pom then
39446: LD_VAR 0 4
39450: NOT
39451: IFFALSE 39455
// exit ;
39453: GO 39556
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39455: LD_ADDR_VAR 0 5
39459: PUSH
39460: LD_VAR 0 2
39464: PPUSH
39465: LD_VAR 0 1
39469: PPUSH
39470: CALL_OW 248
39474: PPUSH
39475: CALL_OW 450
39479: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39480: LD_ADDR_VAR 0 3
39484: PUSH
39485: LD_VAR 0 4
39489: PPUSH
39490: LD_INT 1
39492: PPUSH
39493: CALL_OW 275
39497: PUSH
39498: LD_VAR 0 5
39502: PUSH
39503: LD_INT 1
39505: ARRAY
39506: GREATEREQUAL
39507: PUSH
39508: LD_VAR 0 4
39512: PPUSH
39513: LD_INT 2
39515: PPUSH
39516: CALL_OW 275
39520: PUSH
39521: LD_VAR 0 5
39525: PUSH
39526: LD_INT 2
39528: ARRAY
39529: GREATEREQUAL
39530: AND
39531: PUSH
39532: LD_VAR 0 4
39536: PPUSH
39537: LD_INT 3
39539: PPUSH
39540: CALL_OW 275
39544: PUSH
39545: LD_VAR 0 5
39549: PUSH
39550: LD_INT 3
39552: ARRAY
39553: GREATEREQUAL
39554: AND
39555: ST_TO_ADDR
// end ;
39556: LD_VAR 0 3
39560: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39561: LD_INT 0
39563: PPUSH
39564: PPUSH
39565: PPUSH
39566: PPUSH
39567: PPUSH
39568: PPUSH
39569: PPUSH
39570: PPUSH
39571: PPUSH
39572: PPUSH
39573: PPUSH
// result := false ;
39574: LD_ADDR_VAR 0 8
39578: PUSH
39579: LD_INT 0
39581: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39582: LD_VAR 0 5
39586: NOT
39587: PUSH
39588: LD_VAR 0 1
39592: NOT
39593: OR
39594: PUSH
39595: LD_VAR 0 2
39599: NOT
39600: OR
39601: PUSH
39602: LD_VAR 0 3
39606: NOT
39607: OR
39608: IFFALSE 39612
// exit ;
39610: GO 40426
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39612: LD_ADDR_VAR 0 14
39616: PUSH
39617: LD_VAR 0 1
39621: PPUSH
39622: LD_VAR 0 2
39626: PPUSH
39627: LD_VAR 0 3
39631: PPUSH
39632: LD_VAR 0 4
39636: PPUSH
39637: LD_VAR 0 5
39641: PUSH
39642: LD_INT 1
39644: ARRAY
39645: PPUSH
39646: CALL_OW 248
39650: PPUSH
39651: LD_INT 0
39653: PPUSH
39654: CALL 41679 0 6
39658: ST_TO_ADDR
// if not hexes then
39659: LD_VAR 0 14
39663: NOT
39664: IFFALSE 39668
// exit ;
39666: GO 40426
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39668: LD_ADDR_VAR 0 17
39672: PUSH
39673: LD_VAR 0 5
39677: PPUSH
39678: LD_INT 22
39680: PUSH
39681: LD_VAR 0 13
39685: PPUSH
39686: CALL_OW 255
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 2
39697: PUSH
39698: LD_INT 30
39700: PUSH
39701: LD_INT 0
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 30
39710: PUSH
39711: LD_INT 1
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: LIST
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PPUSH
39727: CALL_OW 72
39731: ST_TO_ADDR
// for i = 1 to hexes do
39732: LD_ADDR_VAR 0 9
39736: PUSH
39737: DOUBLE
39738: LD_INT 1
39740: DEC
39741: ST_TO_ADDR
39742: LD_VAR 0 14
39746: PUSH
39747: FOR_TO
39748: IFFALSE 40424
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39750: LD_ADDR_VAR 0 13
39754: PUSH
39755: LD_VAR 0 14
39759: PUSH
39760: LD_VAR 0 9
39764: ARRAY
39765: PUSH
39766: LD_INT 1
39768: ARRAY
39769: PPUSH
39770: LD_VAR 0 14
39774: PUSH
39775: LD_VAR 0 9
39779: ARRAY
39780: PUSH
39781: LD_INT 2
39783: ARRAY
39784: PPUSH
39785: CALL_OW 428
39789: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39790: LD_VAR 0 14
39794: PUSH
39795: LD_VAR 0 9
39799: ARRAY
39800: PUSH
39801: LD_INT 1
39803: ARRAY
39804: PPUSH
39805: LD_VAR 0 14
39809: PUSH
39810: LD_VAR 0 9
39814: ARRAY
39815: PUSH
39816: LD_INT 2
39818: ARRAY
39819: PPUSH
39820: CALL_OW 351
39824: PUSH
39825: LD_VAR 0 14
39829: PUSH
39830: LD_VAR 0 9
39834: ARRAY
39835: PUSH
39836: LD_INT 1
39838: ARRAY
39839: PPUSH
39840: LD_VAR 0 14
39844: PUSH
39845: LD_VAR 0 9
39849: ARRAY
39850: PUSH
39851: LD_INT 2
39853: ARRAY
39854: PPUSH
39855: CALL_OW 488
39859: NOT
39860: OR
39861: PUSH
39862: LD_VAR 0 13
39866: PPUSH
39867: CALL_OW 247
39871: PUSH
39872: LD_INT 3
39874: EQUAL
39875: OR
39876: IFFALSE 39882
// exit ;
39878: POP
39879: POP
39880: GO 40426
// if not tmp then
39882: LD_VAR 0 13
39886: NOT
39887: IFFALSE 39891
// continue ;
39889: GO 39747
// result := true ;
39891: LD_ADDR_VAR 0 8
39895: PUSH
39896: LD_INT 1
39898: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39899: LD_VAR 0 6
39903: PUSH
39904: LD_VAR 0 13
39908: PPUSH
39909: CALL_OW 247
39913: PUSH
39914: LD_INT 2
39916: EQUAL
39917: AND
39918: PUSH
39919: LD_VAR 0 13
39923: PPUSH
39924: CALL_OW 263
39928: PUSH
39929: LD_INT 1
39931: EQUAL
39932: AND
39933: IFFALSE 40097
// begin if IsDrivenBy ( tmp ) then
39935: LD_VAR 0 13
39939: PPUSH
39940: CALL_OW 311
39944: IFFALSE 39948
// continue ;
39946: GO 39747
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39948: LD_VAR 0 6
39952: PPUSH
39953: LD_INT 3
39955: PUSH
39956: LD_INT 60
39958: PUSH
39959: EMPTY
39960: LIST
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 3
39968: PUSH
39969: LD_INT 55
39971: PUSH
39972: EMPTY
39973: LIST
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PPUSH
39983: CALL_OW 72
39987: IFFALSE 40095
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39989: LD_ADDR_VAR 0 18
39993: PUSH
39994: LD_VAR 0 6
39998: PPUSH
39999: LD_INT 3
40001: PUSH
40002: LD_INT 60
40004: PUSH
40005: EMPTY
40006: LIST
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 3
40014: PUSH
40015: LD_INT 55
40017: PUSH
40018: EMPTY
40019: LIST
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PPUSH
40029: CALL_OW 72
40033: PUSH
40034: LD_INT 1
40036: ARRAY
40037: ST_TO_ADDR
// if IsInUnit ( driver ) then
40038: LD_VAR 0 18
40042: PPUSH
40043: CALL_OW 310
40047: IFFALSE 40058
// ComExit ( driver ) ;
40049: LD_VAR 0 18
40053: PPUSH
40054: CALL 65621 0 1
// AddComEnterUnit ( driver , tmp ) ;
40058: LD_VAR 0 18
40062: PPUSH
40063: LD_VAR 0 13
40067: PPUSH
40068: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40072: LD_VAR 0 18
40076: PPUSH
40077: LD_VAR 0 7
40081: PPUSH
40082: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40086: LD_VAR 0 18
40090: PPUSH
40091: CALL_OW 181
// end ; continue ;
40095: GO 39747
// end ; if not cleaners or not tmp in cleaners then
40097: LD_VAR 0 6
40101: NOT
40102: PUSH
40103: LD_VAR 0 13
40107: PUSH
40108: LD_VAR 0 6
40112: IN
40113: NOT
40114: OR
40115: IFFALSE 40422
// begin if dep then
40117: LD_VAR 0 17
40121: IFFALSE 40257
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40123: LD_ADDR_VAR 0 16
40127: PUSH
40128: LD_VAR 0 17
40132: PUSH
40133: LD_INT 1
40135: ARRAY
40136: PPUSH
40137: CALL_OW 250
40141: PPUSH
40142: LD_VAR 0 17
40146: PUSH
40147: LD_INT 1
40149: ARRAY
40150: PPUSH
40151: CALL_OW 254
40155: PPUSH
40156: LD_INT 5
40158: PPUSH
40159: CALL_OW 272
40163: PUSH
40164: LD_VAR 0 17
40168: PUSH
40169: LD_INT 1
40171: ARRAY
40172: PPUSH
40173: CALL_OW 251
40177: PPUSH
40178: LD_VAR 0 17
40182: PUSH
40183: LD_INT 1
40185: ARRAY
40186: PPUSH
40187: CALL_OW 254
40191: PPUSH
40192: LD_INT 5
40194: PPUSH
40195: CALL_OW 273
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40204: LD_VAR 0 16
40208: PUSH
40209: LD_INT 1
40211: ARRAY
40212: PPUSH
40213: LD_VAR 0 16
40217: PUSH
40218: LD_INT 2
40220: ARRAY
40221: PPUSH
40222: CALL_OW 488
40226: IFFALSE 40257
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40228: LD_VAR 0 13
40232: PPUSH
40233: LD_VAR 0 16
40237: PUSH
40238: LD_INT 1
40240: ARRAY
40241: PPUSH
40242: LD_VAR 0 16
40246: PUSH
40247: LD_INT 2
40249: ARRAY
40250: PPUSH
40251: CALL_OW 111
// continue ;
40255: GO 39747
// end ; end ; r := GetDir ( tmp ) ;
40257: LD_ADDR_VAR 0 15
40261: PUSH
40262: LD_VAR 0 13
40266: PPUSH
40267: CALL_OW 254
40271: ST_TO_ADDR
// if r = 5 then
40272: LD_VAR 0 15
40276: PUSH
40277: LD_INT 5
40279: EQUAL
40280: IFFALSE 40290
// r := 0 ;
40282: LD_ADDR_VAR 0 15
40286: PUSH
40287: LD_INT 0
40289: ST_TO_ADDR
// for j = r to 5 do
40290: LD_ADDR_VAR 0 10
40294: PUSH
40295: DOUBLE
40296: LD_VAR 0 15
40300: DEC
40301: ST_TO_ADDR
40302: LD_INT 5
40304: PUSH
40305: FOR_TO
40306: IFFALSE 40420
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40308: LD_ADDR_VAR 0 11
40312: PUSH
40313: LD_VAR 0 13
40317: PPUSH
40318: CALL_OW 250
40322: PPUSH
40323: LD_VAR 0 10
40327: PPUSH
40328: LD_INT 2
40330: PPUSH
40331: CALL_OW 272
40335: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40336: LD_ADDR_VAR 0 12
40340: PUSH
40341: LD_VAR 0 13
40345: PPUSH
40346: CALL_OW 251
40350: PPUSH
40351: LD_VAR 0 10
40355: PPUSH
40356: LD_INT 2
40358: PPUSH
40359: CALL_OW 273
40363: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40364: LD_VAR 0 11
40368: PPUSH
40369: LD_VAR 0 12
40373: PPUSH
40374: CALL_OW 488
40378: PUSH
40379: LD_VAR 0 11
40383: PPUSH
40384: LD_VAR 0 12
40388: PPUSH
40389: CALL_OW 428
40393: NOT
40394: AND
40395: IFFALSE 40418
// begin ComMoveXY ( tmp , _x , _y ) ;
40397: LD_VAR 0 13
40401: PPUSH
40402: LD_VAR 0 11
40406: PPUSH
40407: LD_VAR 0 12
40411: PPUSH
40412: CALL_OW 111
// break ;
40416: GO 40420
// end ; end ;
40418: GO 40305
40420: POP
40421: POP
// end ; end ;
40422: GO 39747
40424: POP
40425: POP
// end ;
40426: LD_VAR 0 8
40430: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40431: LD_INT 0
40433: PPUSH
// result := true ;
40434: LD_ADDR_VAR 0 3
40438: PUSH
40439: LD_INT 1
40441: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40442: LD_VAR 0 2
40446: PUSH
40447: LD_INT 24
40449: DOUBLE
40450: EQUAL
40451: IFTRUE 40461
40453: LD_INT 33
40455: DOUBLE
40456: EQUAL
40457: IFTRUE 40461
40459: GO 40486
40461: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40462: LD_ADDR_VAR 0 3
40466: PUSH
40467: LD_INT 32
40469: PPUSH
40470: LD_VAR 0 1
40474: PPUSH
40475: CALL_OW 321
40479: PUSH
40480: LD_INT 2
40482: EQUAL
40483: ST_TO_ADDR
40484: GO 40802
40486: LD_INT 20
40488: DOUBLE
40489: EQUAL
40490: IFTRUE 40494
40492: GO 40519
40494: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40495: LD_ADDR_VAR 0 3
40499: PUSH
40500: LD_INT 6
40502: PPUSH
40503: LD_VAR 0 1
40507: PPUSH
40508: CALL_OW 321
40512: PUSH
40513: LD_INT 2
40515: EQUAL
40516: ST_TO_ADDR
40517: GO 40802
40519: LD_INT 22
40521: DOUBLE
40522: EQUAL
40523: IFTRUE 40533
40525: LD_INT 36
40527: DOUBLE
40528: EQUAL
40529: IFTRUE 40533
40531: GO 40558
40533: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40534: LD_ADDR_VAR 0 3
40538: PUSH
40539: LD_INT 15
40541: PPUSH
40542: LD_VAR 0 1
40546: PPUSH
40547: CALL_OW 321
40551: PUSH
40552: LD_INT 2
40554: EQUAL
40555: ST_TO_ADDR
40556: GO 40802
40558: LD_INT 30
40560: DOUBLE
40561: EQUAL
40562: IFTRUE 40566
40564: GO 40591
40566: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40567: LD_ADDR_VAR 0 3
40571: PUSH
40572: LD_INT 20
40574: PPUSH
40575: LD_VAR 0 1
40579: PPUSH
40580: CALL_OW 321
40584: PUSH
40585: LD_INT 2
40587: EQUAL
40588: ST_TO_ADDR
40589: GO 40802
40591: LD_INT 28
40593: DOUBLE
40594: EQUAL
40595: IFTRUE 40605
40597: LD_INT 21
40599: DOUBLE
40600: EQUAL
40601: IFTRUE 40605
40603: GO 40630
40605: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40606: LD_ADDR_VAR 0 3
40610: PUSH
40611: LD_INT 21
40613: PPUSH
40614: LD_VAR 0 1
40618: PPUSH
40619: CALL_OW 321
40623: PUSH
40624: LD_INT 2
40626: EQUAL
40627: ST_TO_ADDR
40628: GO 40802
40630: LD_INT 16
40632: DOUBLE
40633: EQUAL
40634: IFTRUE 40638
40636: GO 40663
40638: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40639: LD_ADDR_VAR 0 3
40643: PUSH
40644: LD_INT 84
40646: PPUSH
40647: LD_VAR 0 1
40651: PPUSH
40652: CALL_OW 321
40656: PUSH
40657: LD_INT 2
40659: EQUAL
40660: ST_TO_ADDR
40661: GO 40802
40663: LD_INT 19
40665: DOUBLE
40666: EQUAL
40667: IFTRUE 40677
40669: LD_INT 23
40671: DOUBLE
40672: EQUAL
40673: IFTRUE 40677
40675: GO 40702
40677: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40678: LD_ADDR_VAR 0 3
40682: PUSH
40683: LD_INT 83
40685: PPUSH
40686: LD_VAR 0 1
40690: PPUSH
40691: CALL_OW 321
40695: PUSH
40696: LD_INT 2
40698: EQUAL
40699: ST_TO_ADDR
40700: GO 40802
40702: LD_INT 17
40704: DOUBLE
40705: EQUAL
40706: IFTRUE 40710
40708: GO 40735
40710: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40711: LD_ADDR_VAR 0 3
40715: PUSH
40716: LD_INT 39
40718: PPUSH
40719: LD_VAR 0 1
40723: PPUSH
40724: CALL_OW 321
40728: PUSH
40729: LD_INT 2
40731: EQUAL
40732: ST_TO_ADDR
40733: GO 40802
40735: LD_INT 18
40737: DOUBLE
40738: EQUAL
40739: IFTRUE 40743
40741: GO 40768
40743: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40744: LD_ADDR_VAR 0 3
40748: PUSH
40749: LD_INT 40
40751: PPUSH
40752: LD_VAR 0 1
40756: PPUSH
40757: CALL_OW 321
40761: PUSH
40762: LD_INT 2
40764: EQUAL
40765: ST_TO_ADDR
40766: GO 40802
40768: LD_INT 27
40770: DOUBLE
40771: EQUAL
40772: IFTRUE 40776
40774: GO 40801
40776: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40777: LD_ADDR_VAR 0 3
40781: PUSH
40782: LD_INT 35
40784: PPUSH
40785: LD_VAR 0 1
40789: PPUSH
40790: CALL_OW 321
40794: PUSH
40795: LD_INT 2
40797: EQUAL
40798: ST_TO_ADDR
40799: GO 40802
40801: POP
// end ;
40802: LD_VAR 0 3
40806: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40807: LD_INT 0
40809: PPUSH
40810: PPUSH
40811: PPUSH
40812: PPUSH
40813: PPUSH
40814: PPUSH
40815: PPUSH
40816: PPUSH
40817: PPUSH
40818: PPUSH
40819: PPUSH
// result := false ;
40820: LD_ADDR_VAR 0 6
40824: PUSH
40825: LD_INT 0
40827: ST_TO_ADDR
// if btype = b_depot then
40828: LD_VAR 0 2
40832: PUSH
40833: LD_INT 0
40835: EQUAL
40836: IFFALSE 40848
// begin result := true ;
40838: LD_ADDR_VAR 0 6
40842: PUSH
40843: LD_INT 1
40845: ST_TO_ADDR
// exit ;
40846: GO 41674
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40848: LD_VAR 0 1
40852: NOT
40853: PUSH
40854: LD_VAR 0 1
40858: PPUSH
40859: CALL_OW 266
40863: PUSH
40864: LD_INT 0
40866: PUSH
40867: LD_INT 1
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: IN
40874: NOT
40875: OR
40876: PUSH
40877: LD_VAR 0 2
40881: NOT
40882: OR
40883: PUSH
40884: LD_VAR 0 5
40888: PUSH
40889: LD_INT 0
40891: PUSH
40892: LD_INT 1
40894: PUSH
40895: LD_INT 2
40897: PUSH
40898: LD_INT 3
40900: PUSH
40901: LD_INT 4
40903: PUSH
40904: LD_INT 5
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: IN
40915: NOT
40916: OR
40917: PUSH
40918: LD_VAR 0 3
40922: PPUSH
40923: LD_VAR 0 4
40927: PPUSH
40928: CALL_OW 488
40932: NOT
40933: OR
40934: IFFALSE 40938
// exit ;
40936: GO 41674
// side := GetSide ( depot ) ;
40938: LD_ADDR_VAR 0 9
40942: PUSH
40943: LD_VAR 0 1
40947: PPUSH
40948: CALL_OW 255
40952: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40953: LD_VAR 0 9
40957: PPUSH
40958: LD_VAR 0 2
40962: PPUSH
40963: CALL 40431 0 2
40967: NOT
40968: IFFALSE 40972
// exit ;
40970: GO 41674
// pom := GetBase ( depot ) ;
40972: LD_ADDR_VAR 0 10
40976: PUSH
40977: LD_VAR 0 1
40981: PPUSH
40982: CALL_OW 274
40986: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40987: LD_ADDR_VAR 0 11
40991: PUSH
40992: LD_VAR 0 2
40996: PPUSH
40997: LD_VAR 0 1
41001: PPUSH
41002: CALL_OW 248
41006: PPUSH
41007: CALL_OW 450
41011: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41012: LD_VAR 0 10
41016: PPUSH
41017: LD_INT 1
41019: PPUSH
41020: CALL_OW 275
41024: PUSH
41025: LD_VAR 0 11
41029: PUSH
41030: LD_INT 1
41032: ARRAY
41033: GREATEREQUAL
41034: PUSH
41035: LD_VAR 0 10
41039: PPUSH
41040: LD_INT 2
41042: PPUSH
41043: CALL_OW 275
41047: PUSH
41048: LD_VAR 0 11
41052: PUSH
41053: LD_INT 2
41055: ARRAY
41056: GREATEREQUAL
41057: AND
41058: PUSH
41059: LD_VAR 0 10
41063: PPUSH
41064: LD_INT 3
41066: PPUSH
41067: CALL_OW 275
41071: PUSH
41072: LD_VAR 0 11
41076: PUSH
41077: LD_INT 3
41079: ARRAY
41080: GREATEREQUAL
41081: AND
41082: NOT
41083: IFFALSE 41087
// exit ;
41085: GO 41674
// if GetBType ( depot ) = b_depot then
41087: LD_VAR 0 1
41091: PPUSH
41092: CALL_OW 266
41096: PUSH
41097: LD_INT 0
41099: EQUAL
41100: IFFALSE 41112
// dist := 28 else
41102: LD_ADDR_VAR 0 14
41106: PUSH
41107: LD_INT 28
41109: ST_TO_ADDR
41110: GO 41120
// dist := 36 ;
41112: LD_ADDR_VAR 0 14
41116: PUSH
41117: LD_INT 36
41119: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41120: LD_VAR 0 1
41124: PPUSH
41125: LD_VAR 0 3
41129: PPUSH
41130: LD_VAR 0 4
41134: PPUSH
41135: CALL_OW 297
41139: PUSH
41140: LD_VAR 0 14
41144: GREATER
41145: IFFALSE 41149
// exit ;
41147: GO 41674
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41149: LD_ADDR_VAR 0 12
41153: PUSH
41154: LD_VAR 0 2
41158: PPUSH
41159: LD_VAR 0 3
41163: PPUSH
41164: LD_VAR 0 4
41168: PPUSH
41169: LD_VAR 0 5
41173: PPUSH
41174: LD_VAR 0 1
41178: PPUSH
41179: CALL_OW 248
41183: PPUSH
41184: LD_INT 0
41186: PPUSH
41187: CALL 41679 0 6
41191: ST_TO_ADDR
// if not hexes then
41192: LD_VAR 0 12
41196: NOT
41197: IFFALSE 41201
// exit ;
41199: GO 41674
// hex := GetHexInfo ( x , y ) ;
41201: LD_ADDR_VAR 0 15
41205: PUSH
41206: LD_VAR 0 3
41210: PPUSH
41211: LD_VAR 0 4
41215: PPUSH
41216: CALL_OW 546
41220: ST_TO_ADDR
// if hex [ 1 ] then
41221: LD_VAR 0 15
41225: PUSH
41226: LD_INT 1
41228: ARRAY
41229: IFFALSE 41233
// exit ;
41231: GO 41674
// height := hex [ 2 ] ;
41233: LD_ADDR_VAR 0 13
41237: PUSH
41238: LD_VAR 0 15
41242: PUSH
41243: LD_INT 2
41245: ARRAY
41246: ST_TO_ADDR
// for i = 1 to hexes do
41247: LD_ADDR_VAR 0 7
41251: PUSH
41252: DOUBLE
41253: LD_INT 1
41255: DEC
41256: ST_TO_ADDR
41257: LD_VAR 0 12
41261: PUSH
41262: FOR_TO
41263: IFFALSE 41593
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41265: LD_VAR 0 12
41269: PUSH
41270: LD_VAR 0 7
41274: ARRAY
41275: PUSH
41276: LD_INT 1
41278: ARRAY
41279: PPUSH
41280: LD_VAR 0 12
41284: PUSH
41285: LD_VAR 0 7
41289: ARRAY
41290: PUSH
41291: LD_INT 2
41293: ARRAY
41294: PPUSH
41295: CALL_OW 488
41299: NOT
41300: PUSH
41301: LD_VAR 0 12
41305: PUSH
41306: LD_VAR 0 7
41310: ARRAY
41311: PUSH
41312: LD_INT 1
41314: ARRAY
41315: PPUSH
41316: LD_VAR 0 12
41320: PUSH
41321: LD_VAR 0 7
41325: ARRAY
41326: PUSH
41327: LD_INT 2
41329: ARRAY
41330: PPUSH
41331: CALL_OW 428
41335: PUSH
41336: LD_INT 0
41338: GREATER
41339: OR
41340: PUSH
41341: LD_VAR 0 12
41345: PUSH
41346: LD_VAR 0 7
41350: ARRAY
41351: PUSH
41352: LD_INT 1
41354: ARRAY
41355: PPUSH
41356: LD_VAR 0 12
41360: PUSH
41361: LD_VAR 0 7
41365: ARRAY
41366: PUSH
41367: LD_INT 2
41369: ARRAY
41370: PPUSH
41371: CALL_OW 351
41375: OR
41376: IFFALSE 41382
// exit ;
41378: POP
41379: POP
41380: GO 41674
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41382: LD_ADDR_VAR 0 8
41386: PUSH
41387: LD_VAR 0 12
41391: PUSH
41392: LD_VAR 0 7
41396: ARRAY
41397: PUSH
41398: LD_INT 1
41400: ARRAY
41401: PPUSH
41402: LD_VAR 0 12
41406: PUSH
41407: LD_VAR 0 7
41411: ARRAY
41412: PUSH
41413: LD_INT 2
41415: ARRAY
41416: PPUSH
41417: CALL_OW 546
41421: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41422: LD_VAR 0 8
41426: PUSH
41427: LD_INT 1
41429: ARRAY
41430: PUSH
41431: LD_VAR 0 8
41435: PUSH
41436: LD_INT 2
41438: ARRAY
41439: PUSH
41440: LD_VAR 0 13
41444: PUSH
41445: LD_INT 2
41447: PLUS
41448: GREATER
41449: OR
41450: PUSH
41451: LD_VAR 0 8
41455: PUSH
41456: LD_INT 2
41458: ARRAY
41459: PUSH
41460: LD_VAR 0 13
41464: PUSH
41465: LD_INT 2
41467: MINUS
41468: LESS
41469: OR
41470: PUSH
41471: LD_VAR 0 8
41475: PUSH
41476: LD_INT 3
41478: ARRAY
41479: PUSH
41480: LD_INT 0
41482: PUSH
41483: LD_INT 8
41485: PUSH
41486: LD_INT 9
41488: PUSH
41489: LD_INT 10
41491: PUSH
41492: LD_INT 11
41494: PUSH
41495: LD_INT 12
41497: PUSH
41498: LD_INT 13
41500: PUSH
41501: LD_INT 16
41503: PUSH
41504: LD_INT 17
41506: PUSH
41507: LD_INT 18
41509: PUSH
41510: LD_INT 19
41512: PUSH
41513: LD_INT 20
41515: PUSH
41516: LD_INT 21
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: IN
41534: NOT
41535: OR
41536: PUSH
41537: LD_VAR 0 8
41541: PUSH
41542: LD_INT 5
41544: ARRAY
41545: NOT
41546: OR
41547: PUSH
41548: LD_VAR 0 8
41552: PUSH
41553: LD_INT 6
41555: ARRAY
41556: PUSH
41557: LD_INT 1
41559: PUSH
41560: LD_INT 2
41562: PUSH
41563: LD_INT 7
41565: PUSH
41566: LD_INT 9
41568: PUSH
41569: LD_INT 10
41571: PUSH
41572: LD_INT 11
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: IN
41583: NOT
41584: OR
41585: IFFALSE 41591
// exit ;
41587: POP
41588: POP
41589: GO 41674
// end ;
41591: GO 41262
41593: POP
41594: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41595: LD_VAR 0 9
41599: PPUSH
41600: LD_VAR 0 3
41604: PPUSH
41605: LD_VAR 0 4
41609: PPUSH
41610: LD_INT 20
41612: PPUSH
41613: CALL 33597 0 4
41617: PUSH
41618: LD_INT 4
41620: ARRAY
41621: IFFALSE 41625
// exit ;
41623: GO 41674
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41625: LD_VAR 0 2
41629: PUSH
41630: LD_INT 29
41632: PUSH
41633: LD_INT 30
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: IN
41640: PUSH
41641: LD_VAR 0 3
41645: PPUSH
41646: LD_VAR 0 4
41650: PPUSH
41651: LD_VAR 0 9
41655: PPUSH
41656: CALL_OW 440
41660: NOT
41661: AND
41662: IFFALSE 41666
// exit ;
41664: GO 41674
// result := true ;
41666: LD_ADDR_VAR 0 6
41670: PUSH
41671: LD_INT 1
41673: ST_TO_ADDR
// end ;
41674: LD_VAR 0 6
41678: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41679: LD_INT 0
41681: PPUSH
41682: PPUSH
41683: PPUSH
41684: PPUSH
41685: PPUSH
41686: PPUSH
41687: PPUSH
41688: PPUSH
41689: PPUSH
41690: PPUSH
41691: PPUSH
41692: PPUSH
41693: PPUSH
41694: PPUSH
41695: PPUSH
41696: PPUSH
41697: PPUSH
41698: PPUSH
41699: PPUSH
41700: PPUSH
41701: PPUSH
41702: PPUSH
41703: PPUSH
41704: PPUSH
41705: PPUSH
41706: PPUSH
41707: PPUSH
41708: PPUSH
41709: PPUSH
41710: PPUSH
41711: PPUSH
41712: PPUSH
41713: PPUSH
41714: PPUSH
41715: PPUSH
41716: PPUSH
41717: PPUSH
41718: PPUSH
41719: PPUSH
41720: PPUSH
41721: PPUSH
41722: PPUSH
41723: PPUSH
41724: PPUSH
41725: PPUSH
41726: PPUSH
41727: PPUSH
41728: PPUSH
41729: PPUSH
41730: PPUSH
41731: PPUSH
41732: PPUSH
41733: PPUSH
41734: PPUSH
41735: PPUSH
41736: PPUSH
41737: PPUSH
41738: PPUSH
// result = [ ] ;
41739: LD_ADDR_VAR 0 7
41743: PUSH
41744: EMPTY
41745: ST_TO_ADDR
// temp_list = [ ] ;
41746: LD_ADDR_VAR 0 9
41750: PUSH
41751: EMPTY
41752: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41753: LD_VAR 0 4
41757: PUSH
41758: LD_INT 0
41760: PUSH
41761: LD_INT 1
41763: PUSH
41764: LD_INT 2
41766: PUSH
41767: LD_INT 3
41769: PUSH
41770: LD_INT 4
41772: PUSH
41773: LD_INT 5
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: IN
41784: NOT
41785: PUSH
41786: LD_VAR 0 1
41790: PUSH
41791: LD_INT 0
41793: PUSH
41794: LD_INT 1
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: IN
41801: PUSH
41802: LD_VAR 0 5
41806: PUSH
41807: LD_INT 1
41809: PUSH
41810: LD_INT 2
41812: PUSH
41813: LD_INT 3
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: LIST
41820: IN
41821: NOT
41822: AND
41823: OR
41824: IFFALSE 41828
// exit ;
41826: GO 60219
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41828: LD_VAR 0 1
41832: PUSH
41833: LD_INT 6
41835: PUSH
41836: LD_INT 7
41838: PUSH
41839: LD_INT 8
41841: PUSH
41842: LD_INT 13
41844: PUSH
41845: LD_INT 12
41847: PUSH
41848: LD_INT 15
41850: PUSH
41851: LD_INT 11
41853: PUSH
41854: LD_INT 14
41856: PUSH
41857: LD_INT 10
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: IN
41871: IFFALSE 41881
// btype = b_lab ;
41873: LD_ADDR_VAR 0 1
41877: PUSH
41878: LD_INT 6
41880: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41881: LD_VAR 0 6
41885: PUSH
41886: LD_INT 0
41888: PUSH
41889: LD_INT 1
41891: PUSH
41892: LD_INT 2
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: LIST
41899: IN
41900: NOT
41901: PUSH
41902: LD_VAR 0 1
41906: PUSH
41907: LD_INT 0
41909: PUSH
41910: LD_INT 1
41912: PUSH
41913: LD_INT 2
41915: PUSH
41916: LD_INT 3
41918: PUSH
41919: LD_INT 6
41921: PUSH
41922: LD_INT 36
41924: PUSH
41925: LD_INT 4
41927: PUSH
41928: LD_INT 5
41930: PUSH
41931: LD_INT 31
41933: PUSH
41934: LD_INT 32
41936: PUSH
41937: LD_INT 33
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: IN
41953: NOT
41954: PUSH
41955: LD_VAR 0 6
41959: PUSH
41960: LD_INT 1
41962: EQUAL
41963: AND
41964: OR
41965: PUSH
41966: LD_VAR 0 1
41970: PUSH
41971: LD_INT 2
41973: PUSH
41974: LD_INT 3
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: IN
41981: NOT
41982: PUSH
41983: LD_VAR 0 6
41987: PUSH
41988: LD_INT 2
41990: EQUAL
41991: AND
41992: OR
41993: IFFALSE 42003
// mode = 0 ;
41995: LD_ADDR_VAR 0 6
41999: PUSH
42000: LD_INT 0
42002: ST_TO_ADDR
// case mode of 0 :
42003: LD_VAR 0 6
42007: PUSH
42008: LD_INT 0
42010: DOUBLE
42011: EQUAL
42012: IFTRUE 42016
42014: GO 53469
42016: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42017: LD_ADDR_VAR 0 11
42021: PUSH
42022: LD_INT 0
42024: PUSH
42025: LD_INT 0
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: LD_INT 1
42037: NEG
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 1
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: LD_INT 1
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 0
42065: PUSH
42066: LD_INT 1
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 1
42075: NEG
42076: PUSH
42077: LD_INT 0
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 1
42086: NEG
42087: PUSH
42088: LD_INT 1
42090: NEG
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 1
42098: NEG
42099: PUSH
42100: LD_INT 2
42102: NEG
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 0
42110: PUSH
42111: LD_INT 2
42113: NEG
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 1
42121: PUSH
42122: LD_INT 1
42124: NEG
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 1
42132: PUSH
42133: LD_INT 2
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 0
42142: PUSH
42143: LD_INT 2
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 1
42152: NEG
42153: PUSH
42154: LD_INT 1
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 1
42163: PUSH
42164: LD_INT 3
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 0
42173: PUSH
42174: LD_INT 3
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 1
42183: NEG
42184: PUSH
42185: LD_INT 2
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42210: LD_ADDR_VAR 0 12
42214: PUSH
42215: LD_INT 0
42217: PUSH
42218: LD_INT 0
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 0
42227: PUSH
42228: LD_INT 1
42230: NEG
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 1
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 1
42248: PUSH
42249: LD_INT 1
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 0
42258: PUSH
42259: LD_INT 1
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 1
42268: NEG
42269: PUSH
42270: LD_INT 0
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 1
42279: NEG
42280: PUSH
42281: LD_INT 1
42283: NEG
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 1
42291: PUSH
42292: LD_INT 1
42294: NEG
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 2
42302: PUSH
42303: LD_INT 0
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 2
42312: PUSH
42313: LD_INT 1
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 1
42322: NEG
42323: PUSH
42324: LD_INT 1
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 2
42333: NEG
42334: PUSH
42335: LD_INT 0
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 2
42344: NEG
42345: PUSH
42346: LD_INT 1
42348: NEG
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 2
42356: NEG
42357: PUSH
42358: LD_INT 1
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 3
42367: NEG
42368: PUSH
42369: LD_INT 0
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 3
42378: NEG
42379: PUSH
42380: LD_INT 1
42382: NEG
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42406: LD_ADDR_VAR 0 13
42410: PUSH
42411: LD_INT 0
42413: PUSH
42414: LD_INT 0
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 0
42423: PUSH
42424: LD_INT 1
42426: NEG
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 1
42434: PUSH
42435: LD_INT 0
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 1
42444: PUSH
42445: LD_INT 1
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 0
42454: PUSH
42455: LD_INT 1
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 1
42464: NEG
42465: PUSH
42466: LD_INT 0
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 1
42475: NEG
42476: PUSH
42477: LD_INT 1
42479: NEG
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 1
42487: NEG
42488: PUSH
42489: LD_INT 2
42491: NEG
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 2
42499: PUSH
42500: LD_INT 1
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 2
42509: PUSH
42510: LD_INT 2
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 1
42519: PUSH
42520: LD_INT 2
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 2
42529: NEG
42530: PUSH
42531: LD_INT 1
42533: NEG
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 2
42541: NEG
42542: PUSH
42543: LD_INT 2
42545: NEG
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 2
42553: NEG
42554: PUSH
42555: LD_INT 3
42557: NEG
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 3
42565: NEG
42566: PUSH
42567: LD_INT 2
42569: NEG
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 3
42577: NEG
42578: PUSH
42579: LD_INT 3
42581: NEG
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42605: LD_ADDR_VAR 0 14
42609: PUSH
42610: LD_INT 0
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 0
42622: PUSH
42623: LD_INT 1
42625: NEG
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 1
42633: PUSH
42634: LD_INT 0
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 1
42643: PUSH
42644: LD_INT 1
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 0
42653: PUSH
42654: LD_INT 1
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 1
42663: NEG
42664: PUSH
42665: LD_INT 0
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 1
42674: NEG
42675: PUSH
42676: LD_INT 1
42678: NEG
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 1
42686: NEG
42687: PUSH
42688: LD_INT 2
42690: NEG
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 0
42698: PUSH
42699: LD_INT 2
42701: NEG
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 1
42709: PUSH
42710: LD_INT 1
42712: NEG
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 1
42720: PUSH
42721: LD_INT 2
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 0
42730: PUSH
42731: LD_INT 2
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 1
42740: NEG
42741: PUSH
42742: LD_INT 1
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 1
42751: NEG
42752: PUSH
42753: LD_INT 3
42755: NEG
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 0
42763: PUSH
42764: LD_INT 3
42766: NEG
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 1
42774: PUSH
42775: LD_INT 2
42777: NEG
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42801: LD_ADDR_VAR 0 15
42805: PUSH
42806: LD_INT 0
42808: PUSH
42809: LD_INT 0
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 0
42818: PUSH
42819: LD_INT 1
42821: NEG
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 1
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 1
42839: PUSH
42840: LD_INT 1
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 0
42849: PUSH
42850: LD_INT 1
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 1
42859: NEG
42860: PUSH
42861: LD_INT 0
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: LD_INT 1
42874: NEG
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 1
42882: PUSH
42883: LD_INT 1
42885: NEG
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 2
42893: PUSH
42894: LD_INT 0
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 2
42903: PUSH
42904: LD_INT 1
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 1
42913: NEG
42914: PUSH
42915: LD_INT 1
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 2
42924: NEG
42925: PUSH
42926: LD_INT 0
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 2
42935: NEG
42936: PUSH
42937: LD_INT 1
42939: NEG
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 2
42947: PUSH
42948: LD_INT 1
42950: NEG
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 3
42958: PUSH
42959: LD_INT 0
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 3
42968: PUSH
42969: LD_INT 1
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42994: LD_ADDR_VAR 0 16
42998: PUSH
42999: LD_INT 0
43001: PUSH
43002: LD_INT 0
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 0
43011: PUSH
43012: LD_INT 1
43014: NEG
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 1
43022: PUSH
43023: LD_INT 0
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 1
43032: PUSH
43033: LD_INT 1
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 0
43042: PUSH
43043: LD_INT 1
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 1
43052: NEG
43053: PUSH
43054: LD_INT 0
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 1
43063: NEG
43064: PUSH
43065: LD_INT 1
43067: NEG
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 1
43075: NEG
43076: PUSH
43077: LD_INT 2
43079: NEG
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 2
43087: PUSH
43088: LD_INT 1
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 2
43097: PUSH
43098: LD_INT 2
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 1
43107: PUSH
43108: LD_INT 2
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 2
43117: NEG
43118: PUSH
43119: LD_INT 1
43121: NEG
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 2
43129: NEG
43130: PUSH
43131: LD_INT 2
43133: NEG
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 3
43141: PUSH
43142: LD_INT 2
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 3
43151: PUSH
43152: LD_INT 3
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 2
43161: PUSH
43162: LD_INT 3
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43187: LD_ADDR_VAR 0 17
43191: PUSH
43192: LD_INT 0
43194: PUSH
43195: LD_INT 0
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 0
43204: PUSH
43205: LD_INT 1
43207: NEG
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 1
43215: PUSH
43216: LD_INT 0
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 1
43225: PUSH
43226: LD_INT 1
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 0
43235: PUSH
43236: LD_INT 1
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 1
43245: NEG
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 1
43256: NEG
43257: PUSH
43258: LD_INT 1
43260: NEG
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 1
43268: NEG
43269: PUSH
43270: LD_INT 2
43272: NEG
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 0
43280: PUSH
43281: LD_INT 2
43283: NEG
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 1
43291: PUSH
43292: LD_INT 1
43294: NEG
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 2
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 2
43312: PUSH
43313: LD_INT 1
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 2
43322: PUSH
43323: LD_INT 2
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 1
43332: PUSH
43333: LD_INT 2
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 0
43342: PUSH
43343: LD_INT 2
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 1
43352: NEG
43353: PUSH
43354: LD_INT 1
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 2
43363: NEG
43364: PUSH
43365: LD_INT 0
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 2
43374: NEG
43375: PUSH
43376: LD_INT 1
43378: NEG
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 2
43386: NEG
43387: PUSH
43388: LD_INT 2
43390: NEG
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43417: LD_ADDR_VAR 0 18
43421: PUSH
43422: LD_INT 0
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 0
43434: PUSH
43435: LD_INT 1
43437: NEG
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 1
43445: PUSH
43446: LD_INT 0
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 1
43455: PUSH
43456: LD_INT 1
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 0
43465: PUSH
43466: LD_INT 1
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 1
43475: NEG
43476: PUSH
43477: LD_INT 0
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 1
43486: NEG
43487: PUSH
43488: LD_INT 1
43490: NEG
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 1
43498: NEG
43499: PUSH
43500: LD_INT 2
43502: NEG
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 0
43510: PUSH
43511: LD_INT 2
43513: NEG
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 1
43521: PUSH
43522: LD_INT 1
43524: NEG
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 2
43532: PUSH
43533: LD_INT 0
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 2
43542: PUSH
43543: LD_INT 1
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 2
43552: PUSH
43553: LD_INT 2
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 1
43562: PUSH
43563: LD_INT 2
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 0
43572: PUSH
43573: LD_INT 2
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 1
43582: NEG
43583: PUSH
43584: LD_INT 1
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 2
43593: NEG
43594: PUSH
43595: LD_INT 0
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 2
43604: NEG
43605: PUSH
43606: LD_INT 1
43608: NEG
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 2
43616: NEG
43617: PUSH
43618: LD_INT 2
43620: NEG
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43647: LD_ADDR_VAR 0 19
43651: PUSH
43652: LD_INT 0
43654: PUSH
43655: LD_INT 0
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: LD_INT 1
43667: NEG
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 1
43675: PUSH
43676: LD_INT 0
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 1
43685: PUSH
43686: LD_INT 1
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 0
43695: PUSH
43696: LD_INT 1
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 1
43705: NEG
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 1
43716: NEG
43717: PUSH
43718: LD_INT 1
43720: NEG
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 1
43728: NEG
43729: PUSH
43730: LD_INT 2
43732: NEG
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 0
43740: PUSH
43741: LD_INT 2
43743: NEG
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 1
43751: PUSH
43752: LD_INT 1
43754: NEG
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 2
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 2
43772: PUSH
43773: LD_INT 1
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 2
43782: PUSH
43783: LD_INT 2
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 1
43792: PUSH
43793: LD_INT 2
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 0
43802: PUSH
43803: LD_INT 2
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 1
43812: NEG
43813: PUSH
43814: LD_INT 1
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 2
43823: NEG
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 2
43834: NEG
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 2
43846: NEG
43847: PUSH
43848: LD_INT 2
43850: NEG
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43877: LD_ADDR_VAR 0 20
43881: PUSH
43882: LD_INT 0
43884: PUSH
43885: LD_INT 0
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 0
43894: PUSH
43895: LD_INT 1
43897: NEG
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 1
43905: PUSH
43906: LD_INT 0
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 1
43915: PUSH
43916: LD_INT 1
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 0
43925: PUSH
43926: LD_INT 1
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 1
43935: NEG
43936: PUSH
43937: LD_INT 0
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 1
43946: NEG
43947: PUSH
43948: LD_INT 1
43950: NEG
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 1
43958: NEG
43959: PUSH
43960: LD_INT 2
43962: NEG
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 0
43970: PUSH
43971: LD_INT 2
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 1
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 2
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 2
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 2
44012: PUSH
44013: LD_INT 2
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 1
44022: PUSH
44023: LD_INT 2
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: LD_INT 2
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 1
44042: NEG
44043: PUSH
44044: LD_INT 1
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 2
44053: NEG
44054: PUSH
44055: LD_INT 0
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 2
44064: NEG
44065: PUSH
44066: LD_INT 1
44068: NEG
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 2
44076: NEG
44077: PUSH
44078: LD_INT 2
44080: NEG
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44107: LD_ADDR_VAR 0 21
44111: PUSH
44112: LD_INT 0
44114: PUSH
44115: LD_INT 0
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 0
44124: PUSH
44125: LD_INT 1
44127: NEG
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 1
44135: PUSH
44136: LD_INT 0
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 1
44145: PUSH
44146: LD_INT 1
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 0
44155: PUSH
44156: LD_INT 1
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 1
44165: NEG
44166: PUSH
44167: LD_INT 0
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 1
44176: NEG
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 1
44188: NEG
44189: PUSH
44190: LD_INT 2
44192: NEG
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 0
44200: PUSH
44201: LD_INT 2
44203: NEG
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 1
44211: PUSH
44212: LD_INT 1
44214: NEG
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 2
44222: PUSH
44223: LD_INT 0
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 2
44232: PUSH
44233: LD_INT 1
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 2
44242: PUSH
44243: LD_INT 2
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 1
44252: PUSH
44253: LD_INT 2
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 0
44262: PUSH
44263: LD_INT 2
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 1
44272: NEG
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 2
44283: NEG
44284: PUSH
44285: LD_INT 0
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 2
44294: NEG
44295: PUSH
44296: LD_INT 1
44298: NEG
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 2
44306: NEG
44307: PUSH
44308: LD_INT 2
44310: NEG
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44337: LD_ADDR_VAR 0 22
44341: PUSH
44342: LD_INT 0
44344: PUSH
44345: LD_INT 0
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 0
44354: PUSH
44355: LD_INT 1
44357: NEG
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 1
44365: PUSH
44366: LD_INT 0
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: LD_INT 1
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 0
44385: PUSH
44386: LD_INT 1
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 1
44395: NEG
44396: PUSH
44397: LD_INT 0
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 1
44406: NEG
44407: PUSH
44408: LD_INT 1
44410: NEG
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 1
44418: NEG
44419: PUSH
44420: LD_INT 2
44422: NEG
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 0
44430: PUSH
44431: LD_INT 2
44433: NEG
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 1
44441: PUSH
44442: LD_INT 1
44444: NEG
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 2
44452: PUSH
44453: LD_INT 0
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 2
44462: PUSH
44463: LD_INT 1
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 2
44472: PUSH
44473: LD_INT 2
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 1
44482: PUSH
44483: LD_INT 2
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 0
44492: PUSH
44493: LD_INT 2
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 1
44502: NEG
44503: PUSH
44504: LD_INT 1
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 2
44513: NEG
44514: PUSH
44515: LD_INT 0
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 2
44524: NEG
44525: PUSH
44526: LD_INT 1
44528: NEG
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 2
44536: NEG
44537: PUSH
44538: LD_INT 2
44540: NEG
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44567: LD_ADDR_VAR 0 23
44571: PUSH
44572: LD_INT 0
44574: PUSH
44575: LD_INT 0
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 0
44584: PUSH
44585: LD_INT 1
44587: NEG
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 1
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 1
44605: PUSH
44606: LD_INT 1
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 0
44615: PUSH
44616: LD_INT 1
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 1
44625: NEG
44626: PUSH
44627: LD_INT 0
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 1
44636: NEG
44637: PUSH
44638: LD_INT 1
44640: NEG
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 1
44648: NEG
44649: PUSH
44650: LD_INT 2
44652: NEG
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 0
44660: PUSH
44661: LD_INT 2
44663: NEG
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 1
44671: PUSH
44672: LD_INT 1
44674: NEG
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 2
44682: PUSH
44683: LD_INT 0
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 2
44692: PUSH
44693: LD_INT 1
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 2
44702: PUSH
44703: LD_INT 2
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 1
44712: PUSH
44713: LD_INT 2
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 0
44722: PUSH
44723: LD_INT 2
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 1
44732: NEG
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 2
44743: NEG
44744: PUSH
44745: LD_INT 0
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 2
44754: NEG
44755: PUSH
44756: LD_INT 1
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 2
44766: NEG
44767: PUSH
44768: LD_INT 2
44770: NEG
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 2
44778: NEG
44779: PUSH
44780: LD_INT 3
44782: NEG
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 1
44790: NEG
44791: PUSH
44792: LD_INT 3
44794: NEG
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 1
44802: PUSH
44803: LD_INT 2
44805: NEG
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 2
44813: PUSH
44814: LD_INT 1
44816: NEG
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44847: LD_ADDR_VAR 0 24
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 0
44864: PUSH
44865: LD_INT 1
44867: NEG
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 1
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: LD_INT 1
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 0
44895: PUSH
44896: LD_INT 1
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 1
44905: NEG
44906: PUSH
44907: LD_INT 0
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 1
44916: NEG
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 1
44928: NEG
44929: PUSH
44930: LD_INT 2
44932: NEG
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 0
44940: PUSH
44941: LD_INT 2
44943: NEG
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 1
44951: PUSH
44952: LD_INT 1
44954: NEG
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 2
44962: PUSH
44963: LD_INT 0
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 2
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 2
44982: PUSH
44983: LD_INT 2
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 1
44992: PUSH
44993: LD_INT 2
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 0
45002: PUSH
45003: LD_INT 2
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 1
45012: NEG
45013: PUSH
45014: LD_INT 1
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 2
45023: NEG
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 2
45034: NEG
45035: PUSH
45036: LD_INT 1
45038: NEG
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 2
45046: NEG
45047: PUSH
45048: LD_INT 2
45050: NEG
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 1
45058: PUSH
45059: LD_INT 2
45061: NEG
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 2
45069: PUSH
45070: LD_INT 1
45072: NEG
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 3
45080: PUSH
45081: LD_INT 1
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 3
45090: PUSH
45091: LD_INT 2
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45123: LD_ADDR_VAR 0 25
45127: PUSH
45128: LD_INT 0
45130: PUSH
45131: LD_INT 0
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 0
45140: PUSH
45141: LD_INT 1
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 1
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 1
45161: PUSH
45162: LD_INT 1
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: LD_INT 1
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 1
45181: NEG
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 1
45192: NEG
45193: PUSH
45194: LD_INT 1
45196: NEG
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 1
45204: NEG
45205: PUSH
45206: LD_INT 2
45208: NEG
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 0
45216: PUSH
45217: LD_INT 2
45219: NEG
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 1
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 2
45238: PUSH
45239: LD_INT 0
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 2
45248: PUSH
45249: LD_INT 1
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 2
45258: PUSH
45259: LD_INT 2
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 1
45268: PUSH
45269: LD_INT 2
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 0
45278: PUSH
45279: LD_INT 2
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 1
45288: NEG
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 2
45299: NEG
45300: PUSH
45301: LD_INT 0
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 2
45310: NEG
45311: PUSH
45312: LD_INT 1
45314: NEG
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 2
45322: NEG
45323: PUSH
45324: LD_INT 2
45326: NEG
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 3
45334: PUSH
45335: LD_INT 1
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 3
45344: PUSH
45345: LD_INT 2
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 2
45354: PUSH
45355: LD_INT 3
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 1
45364: PUSH
45365: LD_INT 3
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45397: LD_ADDR_VAR 0 26
45401: PUSH
45402: LD_INT 0
45404: PUSH
45405: LD_INT 0
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 0
45414: PUSH
45415: LD_INT 1
45417: NEG
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: LD_INT 0
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 1
45435: PUSH
45436: LD_INT 1
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 0
45445: PUSH
45446: LD_INT 1
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 1
45455: NEG
45456: PUSH
45457: LD_INT 0
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 1
45466: NEG
45467: PUSH
45468: LD_INT 1
45470: NEG
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 1
45478: NEG
45479: PUSH
45480: LD_INT 2
45482: NEG
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 0
45490: PUSH
45491: LD_INT 2
45493: NEG
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 1
45501: PUSH
45502: LD_INT 1
45504: NEG
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 2
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 2
45522: PUSH
45523: LD_INT 1
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 2
45532: PUSH
45533: LD_INT 2
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 1
45542: PUSH
45543: LD_INT 2
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 0
45552: PUSH
45553: LD_INT 2
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: NEG
45563: PUSH
45564: LD_INT 1
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 2
45573: NEG
45574: PUSH
45575: LD_INT 0
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 2
45584: NEG
45585: PUSH
45586: LD_INT 1
45588: NEG
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 2
45596: NEG
45597: PUSH
45598: LD_INT 2
45600: NEG
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 2
45608: PUSH
45609: LD_INT 3
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 1
45618: PUSH
45619: LD_INT 3
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 1
45628: NEG
45629: PUSH
45630: LD_INT 2
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 2
45639: NEG
45640: PUSH
45641: LD_INT 1
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45673: LD_ADDR_VAR 0 27
45677: PUSH
45678: LD_INT 0
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 0
45690: PUSH
45691: LD_INT 1
45693: NEG
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 1
45701: PUSH
45702: LD_INT 0
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 1
45711: PUSH
45712: LD_INT 1
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 0
45721: PUSH
45722: LD_INT 1
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 1
45731: NEG
45732: PUSH
45733: LD_INT 0
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 1
45742: NEG
45743: PUSH
45744: LD_INT 1
45746: NEG
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 1
45754: NEG
45755: PUSH
45756: LD_INT 2
45758: NEG
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 0
45766: PUSH
45767: LD_INT 2
45769: NEG
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: PUSH
45778: LD_INT 1
45780: NEG
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 2
45788: PUSH
45789: LD_INT 0
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 2
45798: PUSH
45799: LD_INT 1
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 2
45808: PUSH
45809: LD_INT 2
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 1
45818: PUSH
45819: LD_INT 2
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 0
45828: PUSH
45829: LD_INT 2
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 1
45838: NEG
45839: PUSH
45840: LD_INT 1
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 2
45849: NEG
45850: PUSH
45851: LD_INT 0
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 2
45860: NEG
45861: PUSH
45862: LD_INT 1
45864: NEG
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 2
45872: NEG
45873: PUSH
45874: LD_INT 2
45876: NEG
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: NEG
45885: PUSH
45886: LD_INT 2
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 2
45895: NEG
45896: PUSH
45897: LD_INT 1
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 3
45906: NEG
45907: PUSH
45908: LD_INT 1
45910: NEG
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 3
45918: NEG
45919: PUSH
45920: LD_INT 2
45922: NEG
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45953: LD_ADDR_VAR 0 28
45957: PUSH
45958: LD_INT 0
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: LD_INT 0
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: LD_INT 1
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: LD_INT 1
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 1
46011: NEG
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 1
46022: NEG
46023: PUSH
46024: LD_INT 1
46026: NEG
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 1
46034: NEG
46035: PUSH
46036: LD_INT 2
46038: NEG
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: LD_INT 2
46049: NEG
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 1
46057: PUSH
46058: LD_INT 1
46060: NEG
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 2
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 2
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 2
46088: PUSH
46089: LD_INT 2
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: PUSH
46099: LD_INT 2
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 0
46108: PUSH
46109: LD_INT 2
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 1
46118: NEG
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 2
46129: NEG
46130: PUSH
46131: LD_INT 0
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 2
46140: NEG
46141: PUSH
46142: LD_INT 1
46144: NEG
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 2
46152: NEG
46153: PUSH
46154: LD_INT 2
46156: NEG
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 2
46164: NEG
46165: PUSH
46166: LD_INT 3
46168: NEG
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 1
46176: NEG
46177: PUSH
46178: LD_INT 3
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 3
46188: NEG
46189: PUSH
46190: LD_INT 1
46192: NEG
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 3
46200: NEG
46201: PUSH
46202: LD_INT 2
46204: NEG
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46235: LD_ADDR_VAR 0 29
46239: PUSH
46240: LD_INT 0
46242: PUSH
46243: LD_INT 0
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 0
46252: PUSH
46253: LD_INT 1
46255: NEG
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 1
46263: PUSH
46264: LD_INT 0
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 1
46273: PUSH
46274: LD_INT 1
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: LD_INT 1
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 1
46293: NEG
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 1
46304: NEG
46305: PUSH
46306: LD_INT 1
46308: NEG
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 1
46316: NEG
46317: PUSH
46318: LD_INT 2
46320: NEG
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 0
46328: PUSH
46329: LD_INT 2
46331: NEG
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 1
46339: PUSH
46340: LD_INT 1
46342: NEG
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 2
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 2
46360: PUSH
46361: LD_INT 1
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 1
46370: PUSH
46371: LD_INT 2
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: LD_INT 2
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 1
46390: NEG
46391: PUSH
46392: LD_INT 1
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 2
46401: NEG
46402: PUSH
46403: LD_INT 1
46405: NEG
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 2
46413: NEG
46414: PUSH
46415: LD_INT 2
46417: NEG
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 2
46425: NEG
46426: PUSH
46427: LD_INT 3
46429: NEG
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 2
46437: PUSH
46438: LD_INT 1
46440: NEG
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 3
46448: PUSH
46449: LD_INT 1
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 1
46458: PUSH
46459: LD_INT 3
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 1
46468: NEG
46469: PUSH
46470: LD_INT 2
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 3
46479: NEG
46480: PUSH
46481: LD_INT 2
46483: NEG
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46514: LD_ADDR_VAR 0 30
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: LD_INT 0
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 0
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 1
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 1
46552: PUSH
46553: LD_INT 1
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 0
46562: PUSH
46563: LD_INT 1
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 1
46572: NEG
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 1
46583: NEG
46584: PUSH
46585: LD_INT 1
46587: NEG
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 1
46595: NEG
46596: PUSH
46597: LD_INT 2
46599: NEG
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 0
46607: PUSH
46608: LD_INT 2
46610: NEG
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 1
46618: PUSH
46619: LD_INT 1
46621: NEG
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 2
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 2
46639: PUSH
46640: LD_INT 1
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 2
46649: PUSH
46650: LD_INT 2
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: LD_INT 2
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 1
46669: NEG
46670: PUSH
46671: LD_INT 1
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 2
46680: NEG
46681: PUSH
46682: LD_INT 0
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 2
46691: NEG
46692: PUSH
46693: LD_INT 1
46695: NEG
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 1
46703: NEG
46704: PUSH
46705: LD_INT 3
46707: NEG
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 1
46715: PUSH
46716: LD_INT 2
46718: NEG
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 3
46726: PUSH
46727: LD_INT 2
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 2
46736: PUSH
46737: LD_INT 3
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 2
46746: NEG
46747: PUSH
46748: LD_INT 1
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 3
46757: NEG
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46792: LD_ADDR_VAR 0 31
46796: PUSH
46797: LD_INT 0
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: LD_INT 1
46812: NEG
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 1
46820: PUSH
46821: LD_INT 0
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 1
46830: PUSH
46831: LD_INT 1
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 1
46850: NEG
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 1
46861: NEG
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 1
46873: NEG
46874: PUSH
46875: LD_INT 2
46877: NEG
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 1
46885: PUSH
46886: LD_INT 1
46888: NEG
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 2
46896: PUSH
46897: LD_INT 0
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 2
46906: PUSH
46907: LD_INT 1
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 2
46916: PUSH
46917: LD_INT 2
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 1
46926: PUSH
46927: LD_INT 2
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 0
46936: PUSH
46937: LD_INT 2
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 1
46946: NEG
46947: PUSH
46948: LD_INT 1
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 2
46957: NEG
46958: PUSH
46959: LD_INT 1
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 2
46969: NEG
46970: PUSH
46971: LD_INT 2
46973: NEG
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 2
46981: NEG
46982: PUSH
46983: LD_INT 3
46985: NEG
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 2
46993: PUSH
46994: LD_INT 1
46996: NEG
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 3
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: PUSH
47015: LD_INT 3
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 1
47024: NEG
47025: PUSH
47026: LD_INT 2
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 3
47035: NEG
47036: PUSH
47037: LD_INT 2
47039: NEG
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47070: LD_ADDR_VAR 0 32
47074: PUSH
47075: LD_INT 0
47077: PUSH
47078: LD_INT 0
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 0
47087: PUSH
47088: LD_INT 1
47090: NEG
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 1
47098: PUSH
47099: LD_INT 0
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 1
47108: PUSH
47109: LD_INT 1
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 0
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 1
47128: NEG
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: LD_INT 1
47143: NEG
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 1
47151: NEG
47152: PUSH
47153: LD_INT 2
47155: NEG
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 0
47163: PUSH
47164: LD_INT 2
47166: NEG
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: PUSH
47175: LD_INT 1
47177: NEG
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 2
47185: PUSH
47186: LD_INT 1
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 2
47195: PUSH
47196: LD_INT 2
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 1
47205: PUSH
47206: LD_INT 2
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 0
47215: PUSH
47216: LD_INT 2
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 1
47225: NEG
47226: PUSH
47227: LD_INT 1
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 2
47236: NEG
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 2
47247: NEG
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 1
47259: NEG
47260: PUSH
47261: LD_INT 3
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: LD_INT 2
47274: NEG
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 3
47282: PUSH
47283: LD_INT 2
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 2
47292: PUSH
47293: LD_INT 3
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 2
47302: NEG
47303: PUSH
47304: LD_INT 1
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 3
47313: NEG
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47348: LD_ADDR_VAR 0 33
47352: PUSH
47353: LD_INT 0
47355: PUSH
47356: LD_INT 0
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 0
47365: PUSH
47366: LD_INT 1
47368: NEG
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: LD_INT 0
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 1
47386: PUSH
47387: LD_INT 1
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: LD_INT 1
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 1
47406: NEG
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 1
47417: NEG
47418: PUSH
47419: LD_INT 1
47421: NEG
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 1
47429: NEG
47430: PUSH
47431: LD_INT 2
47433: NEG
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: LD_INT 1
47444: NEG
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 2
47452: PUSH
47453: LD_INT 0
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 2
47462: PUSH
47463: LD_INT 1
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 1
47472: PUSH
47473: LD_INT 2
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 0
47482: PUSH
47483: LD_INT 2
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 1
47492: NEG
47493: PUSH
47494: LD_INT 1
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 2
47503: NEG
47504: PUSH
47505: LD_INT 0
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 2
47514: NEG
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 2
47526: NEG
47527: PUSH
47528: LD_INT 2
47530: NEG
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 2
47538: NEG
47539: PUSH
47540: LD_INT 3
47542: NEG
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 2
47550: PUSH
47551: LD_INT 1
47553: NEG
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 3
47561: PUSH
47562: LD_INT 1
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 1
47571: PUSH
47572: LD_INT 3
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 1
47581: NEG
47582: PUSH
47583: LD_INT 2
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 3
47592: NEG
47593: PUSH
47594: LD_INT 2
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47627: LD_ADDR_VAR 0 34
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: LD_INT 1
47647: NEG
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 1
47655: PUSH
47656: LD_INT 0
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 1
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 0
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 1
47685: NEG
47686: PUSH
47687: LD_INT 0
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 1
47696: NEG
47697: PUSH
47698: LD_INT 1
47700: NEG
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: LD_INT 2
47712: NEG
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: LD_INT 2
47723: NEG
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 1
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 2
47742: PUSH
47743: LD_INT 1
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 2
47752: PUSH
47753: LD_INT 2
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 1
47762: PUSH
47763: LD_INT 2
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 1
47772: NEG
47773: PUSH
47774: LD_INT 1
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 2
47783: NEG
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 2
47794: NEG
47795: PUSH
47796: LD_INT 1
47798: NEG
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 2
47806: NEG
47807: PUSH
47808: LD_INT 2
47810: NEG
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 1
47818: NEG
47819: PUSH
47820: LD_INT 3
47822: NEG
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 1
47830: PUSH
47831: LD_INT 2
47833: NEG
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 3
47841: PUSH
47842: LD_INT 2
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 2
47851: PUSH
47852: LD_INT 3
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 2
47861: NEG
47862: PUSH
47863: LD_INT 1
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 3
47872: NEG
47873: PUSH
47874: LD_INT 1
47876: NEG
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47907: LD_ADDR_VAR 0 35
47911: PUSH
47912: LD_INT 0
47914: PUSH
47915: LD_INT 0
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 0
47924: PUSH
47925: LD_INT 1
47927: NEG
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: LD_INT 0
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 1
47945: PUSH
47946: LD_INT 1
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 0
47955: PUSH
47956: LD_INT 1
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 1
47965: NEG
47966: PUSH
47967: LD_INT 0
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: NEG
47977: PUSH
47978: LD_INT 1
47980: NEG
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 2
47988: PUSH
47989: LD_INT 1
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 2
47998: NEG
47999: PUSH
48000: LD_INT 1
48002: NEG
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48019: LD_ADDR_VAR 0 36
48023: PUSH
48024: LD_INT 0
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 0
48036: PUSH
48037: LD_INT 1
48039: NEG
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 1
48047: PUSH
48048: LD_INT 0
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 1
48057: PUSH
48058: LD_INT 1
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 0
48067: PUSH
48068: LD_INT 1
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 1
48077: NEG
48078: PUSH
48079: LD_INT 0
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 1
48088: NEG
48089: PUSH
48090: LD_INT 1
48092: NEG
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 1
48100: NEG
48101: PUSH
48102: LD_INT 2
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 1
48112: PUSH
48113: LD_INT 2
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48131: LD_ADDR_VAR 0 37
48135: PUSH
48136: LD_INT 0
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 1
48159: PUSH
48160: LD_INT 0
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 1
48169: PUSH
48170: LD_INT 1
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: LD_INT 1
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 1
48189: NEG
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 1
48200: NEG
48201: PUSH
48202: LD_INT 1
48204: NEG
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 1
48212: PUSH
48213: LD_INT 1
48215: NEG
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 1
48223: NEG
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48243: LD_ADDR_VAR 0 38
48247: PUSH
48248: LD_INT 0
48250: PUSH
48251: LD_INT 0
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 0
48260: PUSH
48261: LD_INT 1
48263: NEG
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 1
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 1
48281: PUSH
48282: LD_INT 1
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 0
48291: PUSH
48292: LD_INT 1
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 1
48301: NEG
48302: PUSH
48303: LD_INT 0
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 1
48312: NEG
48313: PUSH
48314: LD_INT 1
48316: NEG
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 2
48324: PUSH
48325: LD_INT 1
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 2
48334: NEG
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48355: LD_ADDR_VAR 0 39
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: LD_INT 0
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 0
48372: PUSH
48373: LD_INT 1
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 1
48383: PUSH
48384: LD_INT 0
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 0
48403: PUSH
48404: LD_INT 1
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 1
48413: NEG
48414: PUSH
48415: LD_INT 0
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 1
48424: NEG
48425: PUSH
48426: LD_INT 1
48428: NEG
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 1
48436: NEG
48437: PUSH
48438: LD_INT 2
48440: NEG
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 1
48448: PUSH
48449: LD_INT 2
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48467: LD_ADDR_VAR 0 40
48471: PUSH
48472: LD_INT 0
48474: PUSH
48475: LD_INT 0
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 0
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 1
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 1
48505: PUSH
48506: LD_INT 1
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 0
48515: PUSH
48516: LD_INT 1
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 1
48525: NEG
48526: PUSH
48527: LD_INT 0
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: LD_INT 1
48540: NEG
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: LD_INT 1
48551: NEG
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 1
48559: NEG
48560: PUSH
48561: LD_INT 1
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48579: LD_ADDR_VAR 0 41
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: LD_INT 0
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 0
48596: PUSH
48597: LD_INT 1
48599: NEG
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 1
48607: PUSH
48608: LD_INT 0
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 1
48617: PUSH
48618: LD_INT 1
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 1
48637: NEG
48638: PUSH
48639: LD_INT 0
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: NEG
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 1
48660: NEG
48661: PUSH
48662: LD_INT 2
48664: NEG
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 1
48672: PUSH
48673: LD_INT 1
48675: NEG
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 2
48683: PUSH
48684: LD_INT 0
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 2
48693: PUSH
48694: LD_INT 1
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 2
48703: PUSH
48704: LD_INT 2
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: LD_INT 2
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 1
48723: NEG
48724: PUSH
48725: LD_INT 1
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 2
48734: NEG
48735: PUSH
48736: LD_INT 0
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 2
48745: NEG
48746: PUSH
48747: LD_INT 1
48749: NEG
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 2
48757: NEG
48758: PUSH
48759: LD_INT 2
48761: NEG
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 2
48769: NEG
48770: PUSH
48771: LD_INT 3
48773: NEG
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 2
48781: PUSH
48782: LD_INT 1
48784: NEG
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 3
48792: PUSH
48793: LD_INT 0
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 3
48802: PUSH
48803: LD_INT 1
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 3
48812: PUSH
48813: LD_INT 2
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 3
48822: PUSH
48823: LD_INT 3
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 2
48832: PUSH
48833: LD_INT 3
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 2
48842: NEG
48843: PUSH
48844: LD_INT 1
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 3
48853: NEG
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 3
48864: NEG
48865: PUSH
48866: LD_INT 1
48868: NEG
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 3
48876: NEG
48877: PUSH
48878: LD_INT 2
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 3
48888: NEG
48889: PUSH
48890: LD_INT 3
48892: NEG
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48929: LD_ADDR_VAR 0 42
48933: PUSH
48934: LD_INT 0
48936: PUSH
48937: LD_INT 0
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 0
48946: PUSH
48947: LD_INT 1
48949: NEG
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 1
48957: PUSH
48958: LD_INT 0
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 1
48967: PUSH
48968: LD_INT 1
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 0
48977: PUSH
48978: LD_INT 1
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 1
48987: NEG
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 1
48998: NEG
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 1
49010: NEG
49011: PUSH
49012: LD_INT 2
49014: NEG
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 0
49022: PUSH
49023: LD_INT 2
49025: NEG
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 1
49033: PUSH
49034: LD_INT 1
49036: NEG
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 2
49044: PUSH
49045: LD_INT 1
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 2
49054: PUSH
49055: LD_INT 2
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 1
49064: PUSH
49065: LD_INT 2
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: LD_INT 2
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 1
49084: NEG
49085: PUSH
49086: LD_INT 1
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 2
49095: NEG
49096: PUSH
49097: LD_INT 1
49099: NEG
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 2
49107: NEG
49108: PUSH
49109: LD_INT 2
49111: NEG
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 2
49119: NEG
49120: PUSH
49121: LD_INT 3
49123: NEG
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 1
49131: NEG
49132: PUSH
49133: LD_INT 3
49135: NEG
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 0
49143: PUSH
49144: LD_INT 3
49146: NEG
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 1
49154: PUSH
49155: LD_INT 2
49157: NEG
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 3
49165: PUSH
49166: LD_INT 2
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 3
49175: PUSH
49176: LD_INT 3
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 2
49185: PUSH
49186: LD_INT 3
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 1
49195: PUSH
49196: LD_INT 3
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 0
49205: PUSH
49206: LD_INT 3
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 1
49215: NEG
49216: PUSH
49217: LD_INT 2
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 3
49226: NEG
49227: PUSH
49228: LD_INT 2
49230: NEG
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 3
49238: NEG
49239: PUSH
49240: LD_INT 3
49242: NEG
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49279: LD_ADDR_VAR 0 43
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: LD_INT 0
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: LD_INT 1
49299: NEG
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 1
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: LD_INT 1
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: LD_INT 0
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 1
49348: NEG
49349: PUSH
49350: LD_INT 1
49352: NEG
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 1
49360: NEG
49361: PUSH
49362: LD_INT 2
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 0
49372: PUSH
49373: LD_INT 2
49375: NEG
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 1
49383: PUSH
49384: LD_INT 1
49386: NEG
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 2
49394: PUSH
49395: LD_INT 0
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 2
49404: PUSH
49405: LD_INT 1
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: LD_INT 2
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 0
49424: PUSH
49425: LD_INT 2
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 1
49434: NEG
49435: PUSH
49436: LD_INT 1
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 2
49445: NEG
49446: PUSH
49447: LD_INT 0
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 2
49456: NEG
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 1
49468: NEG
49469: PUSH
49470: LD_INT 3
49472: NEG
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 0
49480: PUSH
49481: LD_INT 3
49483: NEG
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: LD_INT 2
49494: NEG
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 2
49502: PUSH
49503: LD_INT 1
49505: NEG
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 3
49513: PUSH
49514: LD_INT 0
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 3
49523: PUSH
49524: LD_INT 1
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 1
49533: PUSH
49534: LD_INT 3
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 0
49543: PUSH
49544: LD_INT 3
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 1
49553: NEG
49554: PUSH
49555: LD_INT 2
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 2
49564: NEG
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 3
49575: NEG
49576: PUSH
49577: LD_INT 0
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 3
49586: NEG
49587: PUSH
49588: LD_INT 1
49590: NEG
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49627: LD_ADDR_VAR 0 44
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: LD_INT 1
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: PUSH
49656: LD_INT 0
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 1
49665: PUSH
49666: LD_INT 1
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 0
49675: PUSH
49676: LD_INT 1
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 1
49685: NEG
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 1
49696: NEG
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 1
49708: NEG
49709: PUSH
49710: LD_INT 2
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: LD_INT 1
49723: NEG
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 2
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 2
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 2
49751: PUSH
49752: LD_INT 2
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: LD_INT 2
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 1
49771: NEG
49772: PUSH
49773: LD_INT 1
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 2
49782: NEG
49783: PUSH
49784: LD_INT 0
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 2
49793: NEG
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 2
49805: NEG
49806: PUSH
49807: LD_INT 2
49809: NEG
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 2
49817: NEG
49818: PUSH
49819: LD_INT 3
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 2
49829: PUSH
49830: LD_INT 1
49832: NEG
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 3
49840: PUSH
49841: LD_INT 0
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 3
49850: PUSH
49851: LD_INT 1
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 3
49860: PUSH
49861: LD_INT 2
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 3
49870: PUSH
49871: LD_INT 3
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 2
49880: PUSH
49881: LD_INT 3
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 2
49890: NEG
49891: PUSH
49892: LD_INT 1
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 3
49901: NEG
49902: PUSH
49903: LD_INT 0
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 3
49912: NEG
49913: PUSH
49914: LD_INT 1
49916: NEG
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 3
49924: NEG
49925: PUSH
49926: LD_INT 2
49928: NEG
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 3
49936: NEG
49937: PUSH
49938: LD_INT 3
49940: NEG
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49977: LD_ADDR_VAR 0 45
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 0
49994: PUSH
49995: LD_INT 1
49997: NEG
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 1
50005: PUSH
50006: LD_INT 0
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 1
50015: PUSH
50016: LD_INT 1
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 0
50025: PUSH
50026: LD_INT 1
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 1
50035: NEG
50036: PUSH
50037: LD_INT 0
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 1
50046: NEG
50047: PUSH
50048: LD_INT 1
50050: NEG
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 1
50058: NEG
50059: PUSH
50060: LD_INT 2
50062: NEG
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: LD_INT 2
50073: NEG
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 1
50081: PUSH
50082: LD_INT 1
50084: NEG
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 2
50092: PUSH
50093: LD_INT 1
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 2
50102: PUSH
50103: LD_INT 2
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 1
50112: PUSH
50113: LD_INT 2
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: LD_INT 2
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: PUSH
50134: LD_INT 1
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 2
50143: NEG
50144: PUSH
50145: LD_INT 1
50147: NEG
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 2
50155: NEG
50156: PUSH
50157: LD_INT 2
50159: NEG
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 2
50167: NEG
50168: PUSH
50169: LD_INT 3
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 1
50179: NEG
50180: PUSH
50181: LD_INT 3
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 0
50191: PUSH
50192: LD_INT 3
50194: NEG
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 1
50202: PUSH
50203: LD_INT 2
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 3
50213: PUSH
50214: LD_INT 2
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 3
50223: PUSH
50224: LD_INT 3
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 2
50233: PUSH
50234: LD_INT 3
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 1
50243: PUSH
50244: LD_INT 3
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: LD_INT 3
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 1
50263: NEG
50264: PUSH
50265: LD_INT 2
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 3
50274: NEG
50275: PUSH
50276: LD_INT 2
50278: NEG
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 3
50286: NEG
50287: PUSH
50288: LD_INT 3
50290: NEG
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50327: LD_ADDR_VAR 0 46
50331: PUSH
50332: LD_INT 0
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: LD_INT 1
50347: NEG
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 1
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 1
50365: PUSH
50366: LD_INT 1
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 0
50375: PUSH
50376: LD_INT 1
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: LD_INT 0
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 1
50396: NEG
50397: PUSH
50398: LD_INT 1
50400: NEG
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 1
50408: NEG
50409: PUSH
50410: LD_INT 2
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: LD_INT 2
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: PUSH
50432: LD_INT 1
50434: NEG
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 2
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 2
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: PUSH
50463: LD_INT 2
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: LD_INT 2
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 1
50482: NEG
50483: PUSH
50484: LD_INT 1
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 2
50493: NEG
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 2
50504: NEG
50505: PUSH
50506: LD_INT 1
50508: NEG
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 1
50516: NEG
50517: PUSH
50518: LD_INT 3
50520: NEG
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 0
50528: PUSH
50529: LD_INT 3
50531: NEG
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 1
50539: PUSH
50540: LD_INT 2
50542: NEG
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 2
50550: PUSH
50551: LD_INT 1
50553: NEG
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 3
50561: PUSH
50562: LD_INT 0
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 3
50571: PUSH
50572: LD_INT 1
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: LD_INT 3
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 0
50591: PUSH
50592: LD_INT 3
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 1
50601: NEG
50602: PUSH
50603: LD_INT 2
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 2
50612: NEG
50613: PUSH
50614: LD_INT 1
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 3
50623: NEG
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 3
50634: NEG
50635: PUSH
50636: LD_INT 1
50638: NEG
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50675: LD_ADDR_VAR 0 47
50679: PUSH
50680: LD_INT 0
50682: PUSH
50683: LD_INT 0
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 0
50692: PUSH
50693: LD_INT 1
50695: NEG
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 1
50703: PUSH
50704: LD_INT 0
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 1
50713: PUSH
50714: LD_INT 1
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 0
50723: PUSH
50724: LD_INT 1
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 1
50733: NEG
50734: PUSH
50735: LD_INT 0
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 1
50744: NEG
50745: PUSH
50746: LD_INT 1
50748: NEG
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 1
50756: NEG
50757: PUSH
50758: LD_INT 2
50760: NEG
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 0
50768: PUSH
50769: LD_INT 2
50771: NEG
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 1
50779: PUSH
50780: LD_INT 1
50782: NEG
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 2
50790: NEG
50791: PUSH
50792: LD_INT 1
50794: NEG
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 2
50802: NEG
50803: PUSH
50804: LD_INT 2
50806: NEG
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50826: LD_ADDR_VAR 0 48
50830: PUSH
50831: LD_INT 0
50833: PUSH
50834: LD_INT 0
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 0
50843: PUSH
50844: LD_INT 1
50846: NEG
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 1
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 0
50874: PUSH
50875: LD_INT 1
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 1
50884: NEG
50885: PUSH
50886: LD_INT 0
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 1
50895: NEG
50896: PUSH
50897: LD_INT 1
50899: NEG
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 1
50907: NEG
50908: PUSH
50909: LD_INT 2
50911: NEG
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 0
50919: PUSH
50920: LD_INT 2
50922: NEG
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 1
50930: PUSH
50931: LD_INT 1
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 2
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 2
50951: PUSH
50952: LD_INT 1
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50973: LD_ADDR_VAR 0 49
50977: PUSH
50978: LD_INT 0
50980: PUSH
50981: LD_INT 0
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: LD_INT 1
50993: NEG
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 1
51001: PUSH
51002: LD_INT 0
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 1
51011: PUSH
51012: LD_INT 1
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 0
51021: PUSH
51022: LD_INT 1
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 1
51031: NEG
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 1
51042: NEG
51043: PUSH
51044: LD_INT 1
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 1
51054: PUSH
51055: LD_INT 1
51057: NEG
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 2
51065: PUSH
51066: LD_INT 0
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 2
51075: PUSH
51076: LD_INT 1
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 2
51085: PUSH
51086: LD_INT 2
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 1
51095: PUSH
51096: LD_INT 2
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51117: LD_ADDR_VAR 0 50
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: LD_INT 0
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: LD_INT 1
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 1
51145: PUSH
51146: LD_INT 0
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 1
51155: PUSH
51156: LD_INT 1
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 0
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 1
51175: NEG
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 1
51186: NEG
51187: PUSH
51188: LD_INT 1
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 2
51198: PUSH
51199: LD_INT 1
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 2
51208: PUSH
51209: LD_INT 2
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 1
51218: PUSH
51219: LD_INT 2
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: LD_INT 2
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: NEG
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51261: LD_ADDR_VAR 0 51
51265: PUSH
51266: LD_INT 0
51268: PUSH
51269: LD_INT 0
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 0
51278: PUSH
51279: LD_INT 1
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 1
51289: PUSH
51290: LD_INT 0
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 1
51299: PUSH
51300: LD_INT 1
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: LD_INT 1
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 1
51319: NEG
51320: PUSH
51321: LD_INT 0
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 1
51330: NEG
51331: PUSH
51332: LD_INT 1
51334: NEG
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 1
51342: PUSH
51343: LD_INT 2
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 0
51352: PUSH
51353: LD_INT 2
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 1
51362: NEG
51363: PUSH
51364: LD_INT 1
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 2
51373: NEG
51374: PUSH
51375: LD_INT 0
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 2
51384: NEG
51385: PUSH
51386: LD_INT 1
51388: NEG
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51408: LD_ADDR_VAR 0 52
51412: PUSH
51413: LD_INT 0
51415: PUSH
51416: LD_INT 0
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 0
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 1
51436: PUSH
51437: LD_INT 0
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 1
51446: PUSH
51447: LD_INT 1
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 0
51456: PUSH
51457: LD_INT 1
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 1
51466: NEG
51467: PUSH
51468: LD_INT 0
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: LD_INT 1
51481: NEG
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 1
51489: NEG
51490: PUSH
51491: LD_INT 2
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 1
51501: NEG
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 2
51512: NEG
51513: PUSH
51514: LD_INT 0
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 2
51523: NEG
51524: PUSH
51525: LD_INT 1
51527: NEG
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 2
51535: NEG
51536: PUSH
51537: LD_INT 2
51539: NEG
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51559: LD_ADDR_VAR 0 53
51563: PUSH
51564: LD_INT 0
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 0
51576: PUSH
51577: LD_INT 1
51579: NEG
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: LD_INT 0
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: LD_INT 1
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: LD_INT 1
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 1
51617: NEG
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: NEG
51629: PUSH
51630: LD_INT 1
51632: NEG
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 1
51640: NEG
51641: PUSH
51642: LD_INT 2
51644: NEG
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 0
51652: PUSH
51653: LD_INT 2
51655: NEG
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 1
51663: PUSH
51664: LD_INT 1
51666: NEG
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 2
51674: PUSH
51675: LD_INT 0
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 2
51684: PUSH
51685: LD_INT 1
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 2
51694: PUSH
51695: LD_INT 2
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 1
51704: PUSH
51705: LD_INT 2
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: LD_INT 2
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 1
51724: NEG
51725: PUSH
51726: LD_INT 1
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 2
51735: NEG
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 2
51746: NEG
51747: PUSH
51748: LD_INT 1
51750: NEG
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 2
51758: NEG
51759: PUSH
51760: LD_INT 2
51762: NEG
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51789: LD_ADDR_VAR 0 54
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 0
51806: PUSH
51807: LD_INT 1
51809: NEG
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 1
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 1
51827: PUSH
51828: LD_INT 1
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 0
51837: PUSH
51838: LD_INT 1
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 1
51847: NEG
51848: PUSH
51849: LD_INT 0
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 1
51858: NEG
51859: PUSH
51860: LD_INT 1
51862: NEG
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 1
51870: NEG
51871: PUSH
51872: LD_INT 2
51874: NEG
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: LD_INT 2
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 1
51893: PUSH
51894: LD_INT 1
51896: NEG
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 2
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 2
51914: PUSH
51915: LD_INT 1
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 2
51924: PUSH
51925: LD_INT 2
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 1
51934: PUSH
51935: LD_INT 2
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 0
51944: PUSH
51945: LD_INT 2
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 1
51954: NEG
51955: PUSH
51956: LD_INT 1
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 2
51965: NEG
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 2
51976: NEG
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 2
51988: NEG
51989: PUSH
51990: LD_INT 2
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52019: LD_ADDR_VAR 0 55
52023: PUSH
52024: LD_INT 0
52026: PUSH
52027: LD_INT 0
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 0
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 1
52047: PUSH
52048: LD_INT 0
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 1
52057: PUSH
52058: LD_INT 1
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 0
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 1
52077: NEG
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 1
52088: NEG
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 1
52100: NEG
52101: PUSH
52102: LD_INT 2
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: LD_INT 2
52115: NEG
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 1
52123: PUSH
52124: LD_INT 1
52126: NEG
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 2
52134: PUSH
52135: LD_INT 0
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 2
52144: PUSH
52145: LD_INT 1
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 2
52154: PUSH
52155: LD_INT 2
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 1
52164: PUSH
52165: LD_INT 2
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: LD_INT 2
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: LD_INT 1
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 2
52195: NEG
52196: PUSH
52197: LD_INT 0
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 2
52206: NEG
52207: PUSH
52208: LD_INT 1
52210: NEG
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 2
52218: NEG
52219: PUSH
52220: LD_INT 2
52222: NEG
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52249: LD_ADDR_VAR 0 56
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: LD_INT 0
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 0
52266: PUSH
52267: LD_INT 1
52269: NEG
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: LD_INT 0
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 1
52287: PUSH
52288: LD_INT 1
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 0
52297: PUSH
52298: LD_INT 1
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: LD_INT 0
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 1
52318: NEG
52319: PUSH
52320: LD_INT 1
52322: NEG
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 1
52330: NEG
52331: PUSH
52332: LD_INT 2
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: LD_INT 2
52345: NEG
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 1
52353: PUSH
52354: LD_INT 1
52356: NEG
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 2
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 2
52374: PUSH
52375: LD_INT 1
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 2
52384: PUSH
52385: LD_INT 2
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 1
52394: PUSH
52395: LD_INT 2
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 0
52404: PUSH
52405: LD_INT 2
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 1
52414: NEG
52415: PUSH
52416: LD_INT 1
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 2
52425: NEG
52426: PUSH
52427: LD_INT 0
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 2
52436: NEG
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 2
52448: NEG
52449: PUSH
52450: LD_INT 2
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52479: LD_ADDR_VAR 0 57
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: LD_INT 0
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 0
52496: PUSH
52497: LD_INT 1
52499: NEG
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: LD_INT 0
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 1
52517: PUSH
52518: LD_INT 1
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: LD_INT 1
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 1
52537: NEG
52538: PUSH
52539: LD_INT 0
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: LD_INT 1
52552: NEG
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 1
52560: NEG
52561: PUSH
52562: LD_INT 2
52564: NEG
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: LD_INT 2
52575: NEG
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 1
52583: PUSH
52584: LD_INT 1
52586: NEG
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 2
52594: PUSH
52595: LD_INT 0
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 2
52604: PUSH
52605: LD_INT 1
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 2
52614: PUSH
52615: LD_INT 2
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 1
52624: PUSH
52625: LD_INT 2
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: LD_INT 2
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 1
52644: NEG
52645: PUSH
52646: LD_INT 1
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 2
52655: NEG
52656: PUSH
52657: LD_INT 0
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 2
52666: NEG
52667: PUSH
52668: LD_INT 1
52670: NEG
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 2
52678: NEG
52679: PUSH
52680: LD_INT 2
52682: NEG
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52709: LD_ADDR_VAR 0 58
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: LD_INT 0
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 0
52726: PUSH
52727: LD_INT 1
52729: NEG
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 1
52747: PUSH
52748: LD_INT 1
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: LD_INT 1
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: NEG
52768: PUSH
52769: LD_INT 0
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 1
52778: NEG
52779: PUSH
52780: LD_INT 1
52782: NEG
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: NEG
52791: PUSH
52792: LD_INT 2
52794: NEG
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 0
52802: PUSH
52803: LD_INT 2
52805: NEG
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 1
52813: PUSH
52814: LD_INT 1
52816: NEG
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 2
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 2
52834: PUSH
52835: LD_INT 1
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 2
52844: PUSH
52845: LD_INT 2
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 1
52854: PUSH
52855: LD_INT 2
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 0
52864: PUSH
52865: LD_INT 2
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: NEG
52875: PUSH
52876: LD_INT 1
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 2
52885: NEG
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 2
52896: NEG
52897: PUSH
52898: LD_INT 1
52900: NEG
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 2
52908: NEG
52909: PUSH
52910: LD_INT 2
52912: NEG
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52939: LD_ADDR_VAR 0 59
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: LD_INT 0
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 0
52956: PUSH
52957: LD_INT 1
52959: NEG
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 1
52967: PUSH
52968: LD_INT 0
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: LD_INT 1
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 1
52997: NEG
52998: PUSH
52999: LD_INT 0
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 1
53008: NEG
53009: PUSH
53010: LD_INT 1
53012: NEG
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53027: LD_ADDR_VAR 0 60
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: LD_INT 0
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 0
53044: PUSH
53045: LD_INT 1
53047: NEG
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 1
53055: PUSH
53056: LD_INT 0
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 1
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 0
53075: PUSH
53076: LD_INT 1
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 1
53085: NEG
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 1
53096: NEG
53097: PUSH
53098: LD_INT 1
53100: NEG
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53115: LD_ADDR_VAR 0 61
53119: PUSH
53120: LD_INT 0
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 0
53132: PUSH
53133: LD_INT 1
53135: NEG
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 1
53143: PUSH
53144: LD_INT 0
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 1
53153: PUSH
53154: LD_INT 1
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 0
53163: PUSH
53164: LD_INT 1
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: PUSH
53175: LD_INT 0
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 1
53184: NEG
53185: PUSH
53186: LD_INT 1
53188: NEG
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53203: LD_ADDR_VAR 0 62
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: LD_INT 0
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 0
53220: PUSH
53221: LD_INT 1
53223: NEG
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 1
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 1
53241: PUSH
53242: LD_INT 1
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 0
53251: PUSH
53252: LD_INT 1
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 1
53261: NEG
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 1
53272: NEG
53273: PUSH
53274: LD_INT 1
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53291: LD_ADDR_VAR 0 63
53295: PUSH
53296: LD_INT 0
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 0
53308: PUSH
53309: LD_INT 1
53311: NEG
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 1
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 1
53329: PUSH
53330: LD_INT 1
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: LD_INT 1
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 1
53349: NEG
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 1
53360: NEG
53361: PUSH
53362: LD_INT 1
53364: NEG
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53379: LD_ADDR_VAR 0 64
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 0
53396: PUSH
53397: LD_INT 1
53399: NEG
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 1
53417: PUSH
53418: LD_INT 1
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: LD_INT 1
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: NEG
53438: PUSH
53439: LD_INT 0
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 1
53448: NEG
53449: PUSH
53450: LD_INT 1
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: ST_TO_ADDR
// end ; 1 :
53467: GO 59364
53469: LD_INT 1
53471: DOUBLE
53472: EQUAL
53473: IFTRUE 53477
53475: GO 56100
53477: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53478: LD_ADDR_VAR 0 11
53482: PUSH
53483: LD_INT 1
53485: NEG
53486: PUSH
53487: LD_INT 3
53489: NEG
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: LD_INT 3
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: PUSH
53509: LD_INT 2
53511: NEG
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: LIST
53521: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53522: LD_ADDR_VAR 0 12
53526: PUSH
53527: LD_INT 2
53529: PUSH
53530: LD_INT 1
53532: NEG
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 3
53540: PUSH
53541: LD_INT 0
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 3
53550: PUSH
53551: LD_INT 1
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: LIST
53562: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53563: LD_ADDR_VAR 0 13
53567: PUSH
53568: LD_INT 3
53570: PUSH
53571: LD_INT 2
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 3
53580: PUSH
53581: LD_INT 3
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 2
53590: PUSH
53591: LD_INT 3
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: LIST
53602: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53603: LD_ADDR_VAR 0 14
53607: PUSH
53608: LD_INT 1
53610: PUSH
53611: LD_INT 3
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: LD_INT 3
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 1
53630: NEG
53631: PUSH
53632: LD_INT 2
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: LIST
53643: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53644: LD_ADDR_VAR 0 15
53648: PUSH
53649: LD_INT 2
53651: NEG
53652: PUSH
53653: LD_INT 1
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 3
53662: NEG
53663: PUSH
53664: LD_INT 0
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 3
53673: NEG
53674: PUSH
53675: LD_INT 1
53677: NEG
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: LIST
53687: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53688: LD_ADDR_VAR 0 16
53692: PUSH
53693: LD_INT 2
53695: NEG
53696: PUSH
53697: LD_INT 3
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 3
53707: NEG
53708: PUSH
53709: LD_INT 2
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 3
53719: NEG
53720: PUSH
53721: LD_INT 3
53723: NEG
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: LIST
53733: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53734: LD_ADDR_VAR 0 17
53738: PUSH
53739: LD_INT 1
53741: NEG
53742: PUSH
53743: LD_INT 3
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 0
53753: PUSH
53754: LD_INT 3
53756: NEG
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 1
53764: PUSH
53765: LD_INT 2
53767: NEG
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: LIST
53777: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53778: LD_ADDR_VAR 0 18
53782: PUSH
53783: LD_INT 2
53785: PUSH
53786: LD_INT 1
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 3
53796: PUSH
53797: LD_INT 0
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 3
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: LIST
53818: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53819: LD_ADDR_VAR 0 19
53823: PUSH
53824: LD_INT 3
53826: PUSH
53827: LD_INT 2
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 3
53836: PUSH
53837: LD_INT 3
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 2
53846: PUSH
53847: LD_INT 3
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: LIST
53858: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53859: LD_ADDR_VAR 0 20
53863: PUSH
53864: LD_INT 1
53866: PUSH
53867: LD_INT 3
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: LD_INT 3
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 1
53886: NEG
53887: PUSH
53888: LD_INT 2
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: LIST
53899: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53900: LD_ADDR_VAR 0 21
53904: PUSH
53905: LD_INT 2
53907: NEG
53908: PUSH
53909: LD_INT 1
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 3
53918: NEG
53919: PUSH
53920: LD_INT 0
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 3
53929: NEG
53930: PUSH
53931: LD_INT 1
53933: NEG
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: LIST
53943: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53944: LD_ADDR_VAR 0 22
53948: PUSH
53949: LD_INT 2
53951: NEG
53952: PUSH
53953: LD_INT 3
53955: NEG
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 3
53963: NEG
53964: PUSH
53965: LD_INT 2
53967: NEG
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 3
53975: NEG
53976: PUSH
53977: LD_INT 3
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: LIST
53989: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53990: LD_ADDR_VAR 0 23
53994: PUSH
53995: LD_INT 0
53997: PUSH
53998: LD_INT 3
54000: NEG
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 1
54008: NEG
54009: PUSH
54010: LD_INT 4
54012: NEG
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 1
54020: PUSH
54021: LD_INT 3
54023: NEG
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: LIST
54033: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54034: LD_ADDR_VAR 0 24
54038: PUSH
54039: LD_INT 3
54041: PUSH
54042: LD_INT 0
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 3
54051: PUSH
54052: LD_INT 1
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 4
54062: PUSH
54063: LD_INT 1
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: LIST
54074: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54075: LD_ADDR_VAR 0 25
54079: PUSH
54080: LD_INT 3
54082: PUSH
54083: LD_INT 3
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 4
54092: PUSH
54093: LD_INT 3
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 3
54102: PUSH
54103: LD_INT 4
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: LIST
54114: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54115: LD_ADDR_VAR 0 26
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: LD_INT 3
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: PUSH
54133: LD_INT 4
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 1
54142: NEG
54143: PUSH
54144: LD_INT 3
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: LIST
54155: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54156: LD_ADDR_VAR 0 27
54160: PUSH
54161: LD_INT 3
54163: NEG
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 3
54174: NEG
54175: PUSH
54176: LD_INT 1
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 4
54185: NEG
54186: PUSH
54187: LD_INT 1
54189: NEG
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: LIST
54199: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54200: LD_ADDR_VAR 0 28
54204: PUSH
54205: LD_INT 3
54207: NEG
54208: PUSH
54209: LD_INT 3
54211: NEG
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 3
54219: NEG
54220: PUSH
54221: LD_INT 4
54223: NEG
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 4
54231: NEG
54232: PUSH
54233: LD_INT 3
54235: NEG
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: LIST
54245: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54246: LD_ADDR_VAR 0 29
54250: PUSH
54251: LD_INT 1
54253: NEG
54254: PUSH
54255: LD_INT 3
54257: NEG
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: LD_INT 3
54268: NEG
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 1
54276: PUSH
54277: LD_INT 2
54279: NEG
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: LD_INT 4
54291: NEG
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 0
54299: PUSH
54300: LD_INT 4
54302: NEG
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 1
54310: PUSH
54311: LD_INT 3
54313: NEG
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 1
54321: NEG
54322: PUSH
54323: LD_INT 5
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 0
54333: PUSH
54334: LD_INT 5
54336: NEG
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 1
54344: PUSH
54345: LD_INT 4
54347: NEG
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 1
54355: NEG
54356: PUSH
54357: LD_INT 6
54359: NEG
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: LD_INT 6
54370: NEG
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: PUSH
54379: LD_INT 5
54381: NEG
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54401: LD_ADDR_VAR 0 30
54405: PUSH
54406: LD_INT 2
54408: PUSH
54409: LD_INT 1
54411: NEG
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 3
54419: PUSH
54420: LD_INT 0
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 3
54429: PUSH
54430: LD_INT 1
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 3
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 4
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 4
54460: PUSH
54461: LD_INT 1
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 4
54470: PUSH
54471: LD_INT 1
54473: NEG
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 5
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 5
54491: PUSH
54492: LD_INT 1
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 5
54501: PUSH
54502: LD_INT 1
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 6
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 6
54522: PUSH
54523: LD_INT 1
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54544: LD_ADDR_VAR 0 31
54548: PUSH
54549: LD_INT 3
54551: PUSH
54552: LD_INT 2
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 3
54561: PUSH
54562: LD_INT 3
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 2
54571: PUSH
54572: LD_INT 3
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 4
54581: PUSH
54582: LD_INT 3
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 4
54591: PUSH
54592: LD_INT 4
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 3
54601: PUSH
54602: LD_INT 4
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 5
54611: PUSH
54612: LD_INT 4
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 5
54621: PUSH
54622: LD_INT 5
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 4
54631: PUSH
54632: LD_INT 5
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 6
54641: PUSH
54642: LD_INT 5
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 6
54651: PUSH
54652: LD_INT 6
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 5
54661: PUSH
54662: LD_INT 6
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54683: LD_ADDR_VAR 0 32
54687: PUSH
54688: LD_INT 1
54690: PUSH
54691: LD_INT 3
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 0
54700: PUSH
54701: LD_INT 3
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 1
54710: NEG
54711: PUSH
54712: LD_INT 2
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 1
54721: PUSH
54722: LD_INT 4
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 0
54731: PUSH
54732: LD_INT 4
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 1
54741: NEG
54742: PUSH
54743: LD_INT 3
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 1
54752: PUSH
54753: LD_INT 5
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 0
54762: PUSH
54763: LD_INT 5
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: LD_INT 4
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 1
54783: PUSH
54784: LD_INT 6
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 0
54793: PUSH
54794: LD_INT 6
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 1
54803: NEG
54804: PUSH
54805: LD_INT 5
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54826: LD_ADDR_VAR 0 33
54830: PUSH
54831: LD_INT 2
54833: NEG
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 3
54844: NEG
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 3
54855: NEG
54856: PUSH
54857: LD_INT 1
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 3
54867: NEG
54868: PUSH
54869: LD_INT 1
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 4
54878: NEG
54879: PUSH
54880: LD_INT 0
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 4
54889: NEG
54890: PUSH
54891: LD_INT 1
54893: NEG
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 4
54901: NEG
54902: PUSH
54903: LD_INT 1
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 5
54912: NEG
54913: PUSH
54914: LD_INT 0
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 5
54923: NEG
54924: PUSH
54925: LD_INT 1
54927: NEG
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 5
54935: NEG
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 6
54946: NEG
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 6
54957: NEG
54958: PUSH
54959: LD_INT 1
54961: NEG
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54981: LD_ADDR_VAR 0 34
54985: PUSH
54986: LD_INT 2
54988: NEG
54989: PUSH
54990: LD_INT 3
54992: NEG
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 3
55000: NEG
55001: PUSH
55002: LD_INT 2
55004: NEG
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 3
55012: NEG
55013: PUSH
55014: LD_INT 3
55016: NEG
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 3
55024: NEG
55025: PUSH
55026: LD_INT 4
55028: NEG
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 4
55036: NEG
55037: PUSH
55038: LD_INT 3
55040: NEG
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 4
55048: NEG
55049: PUSH
55050: LD_INT 4
55052: NEG
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 4
55060: NEG
55061: PUSH
55062: LD_INT 5
55064: NEG
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 5
55072: NEG
55073: PUSH
55074: LD_INT 4
55076: NEG
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 5
55084: NEG
55085: PUSH
55086: LD_INT 5
55088: NEG
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 5
55096: NEG
55097: PUSH
55098: LD_INT 6
55100: NEG
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 6
55108: NEG
55109: PUSH
55110: LD_INT 5
55112: NEG
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 6
55120: NEG
55121: PUSH
55122: LD_INT 6
55124: NEG
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55144: LD_ADDR_VAR 0 41
55148: PUSH
55149: LD_INT 0
55151: PUSH
55152: LD_INT 2
55154: NEG
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 1
55162: NEG
55163: PUSH
55164: LD_INT 3
55166: NEG
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: PUSH
55175: LD_INT 2
55177: NEG
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: LIST
55187: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55188: LD_ADDR_VAR 0 42
55192: PUSH
55193: LD_INT 2
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 2
55205: PUSH
55206: LD_INT 1
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 3
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: LIST
55228: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55229: LD_ADDR_VAR 0 43
55233: PUSH
55234: LD_INT 2
55236: PUSH
55237: LD_INT 2
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 3
55246: PUSH
55247: LD_INT 2
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 2
55256: PUSH
55257: LD_INT 3
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: LIST
55268: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55269: LD_ADDR_VAR 0 44
55273: PUSH
55274: LD_INT 0
55276: PUSH
55277: LD_INT 2
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 1
55286: PUSH
55287: LD_INT 3
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 1
55296: NEG
55297: PUSH
55298: LD_INT 2
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: LIST
55309: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55310: LD_ADDR_VAR 0 45
55314: PUSH
55315: LD_INT 2
55317: NEG
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 2
55328: NEG
55329: PUSH
55330: LD_INT 1
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 3
55339: NEG
55340: PUSH
55341: LD_INT 1
55343: NEG
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: LIST
55353: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55354: LD_ADDR_VAR 0 46
55358: PUSH
55359: LD_INT 2
55361: NEG
55362: PUSH
55363: LD_INT 2
55365: NEG
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 2
55373: NEG
55374: PUSH
55375: LD_INT 3
55377: NEG
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 3
55385: NEG
55386: PUSH
55387: LD_INT 2
55389: NEG
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: LIST
55399: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55400: LD_ADDR_VAR 0 47
55404: PUSH
55405: LD_INT 2
55407: NEG
55408: PUSH
55409: LD_INT 3
55411: NEG
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 1
55419: NEG
55420: PUSH
55421: LD_INT 3
55423: NEG
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55433: LD_ADDR_VAR 0 48
55437: PUSH
55438: LD_INT 1
55440: PUSH
55441: LD_INT 2
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 2
55451: PUSH
55452: LD_INT 1
55454: NEG
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55464: LD_ADDR_VAR 0 49
55468: PUSH
55469: LD_INT 3
55471: PUSH
55472: LD_INT 1
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 3
55481: PUSH
55482: LD_INT 2
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55493: LD_ADDR_VAR 0 50
55497: PUSH
55498: LD_INT 2
55500: PUSH
55501: LD_INT 3
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 1
55510: PUSH
55511: LD_INT 3
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55522: LD_ADDR_VAR 0 51
55526: PUSH
55527: LD_INT 1
55529: NEG
55530: PUSH
55531: LD_INT 2
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 2
55540: NEG
55541: PUSH
55542: LD_INT 1
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55553: LD_ADDR_VAR 0 52
55557: PUSH
55558: LD_INT 3
55560: NEG
55561: PUSH
55562: LD_INT 1
55564: NEG
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 3
55572: NEG
55573: PUSH
55574: LD_INT 2
55576: NEG
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55586: LD_ADDR_VAR 0 53
55590: PUSH
55591: LD_INT 1
55593: NEG
55594: PUSH
55595: LD_INT 3
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 0
55605: PUSH
55606: LD_INT 3
55608: NEG
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 1
55616: PUSH
55617: LD_INT 2
55619: NEG
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: LIST
55629: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55630: LD_ADDR_VAR 0 54
55634: PUSH
55635: LD_INT 2
55637: PUSH
55638: LD_INT 1
55640: NEG
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 3
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 3
55658: PUSH
55659: LD_INT 1
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: LIST
55670: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55671: LD_ADDR_VAR 0 55
55675: PUSH
55676: LD_INT 3
55678: PUSH
55679: LD_INT 2
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 3
55688: PUSH
55689: LD_INT 3
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 2
55698: PUSH
55699: LD_INT 3
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: LIST
55710: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55711: LD_ADDR_VAR 0 56
55715: PUSH
55716: LD_INT 1
55718: PUSH
55719: LD_INT 3
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 0
55728: PUSH
55729: LD_INT 3
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 1
55738: NEG
55739: PUSH
55740: LD_INT 2
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: LIST
55751: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55752: LD_ADDR_VAR 0 57
55756: PUSH
55757: LD_INT 2
55759: NEG
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 3
55770: NEG
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 3
55781: NEG
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: LIST
55795: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55796: LD_ADDR_VAR 0 58
55800: PUSH
55801: LD_INT 2
55803: NEG
55804: PUSH
55805: LD_INT 3
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 3
55815: NEG
55816: PUSH
55817: LD_INT 2
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 3
55827: NEG
55828: PUSH
55829: LD_INT 3
55831: NEG
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: LIST
55841: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55842: LD_ADDR_VAR 0 59
55846: PUSH
55847: LD_INT 1
55849: NEG
55850: PUSH
55851: LD_INT 2
55853: NEG
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 0
55861: PUSH
55862: LD_INT 2
55864: NEG
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 1
55872: PUSH
55873: LD_INT 1
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: LIST
55885: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55886: LD_ADDR_VAR 0 60
55890: PUSH
55891: LD_INT 1
55893: PUSH
55894: LD_INT 1
55896: NEG
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 2
55904: PUSH
55905: LD_INT 0
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 2
55914: PUSH
55915: LD_INT 1
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: LIST
55926: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55927: LD_ADDR_VAR 0 61
55931: PUSH
55932: LD_INT 2
55934: PUSH
55935: LD_INT 1
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 2
55944: PUSH
55945: LD_INT 2
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 1
55954: PUSH
55955: LD_INT 2
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: LIST
55966: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55967: LD_ADDR_VAR 0 62
55971: PUSH
55972: LD_INT 1
55974: PUSH
55975: LD_INT 2
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: LD_INT 2
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 1
55994: NEG
55995: PUSH
55996: LD_INT 1
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: LIST
56007: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56008: LD_ADDR_VAR 0 63
56012: PUSH
56013: LD_INT 1
56015: NEG
56016: PUSH
56017: LD_INT 1
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 2
56026: NEG
56027: PUSH
56028: LD_INT 0
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 2
56037: NEG
56038: PUSH
56039: LD_INT 1
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: LIST
56051: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56052: LD_ADDR_VAR 0 64
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: LD_INT 2
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 2
56071: NEG
56072: PUSH
56073: LD_INT 1
56075: NEG
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 2
56083: NEG
56084: PUSH
56085: LD_INT 2
56087: NEG
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: LIST
56097: ST_TO_ADDR
// end ; 2 :
56098: GO 59364
56100: LD_INT 2
56102: DOUBLE
56103: EQUAL
56104: IFTRUE 56108
56106: GO 59363
56108: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56109: LD_ADDR_VAR 0 29
56113: PUSH
56114: LD_INT 4
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 4
56126: PUSH
56127: LD_INT 1
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 5
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 5
56147: PUSH
56148: LD_INT 1
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 4
56157: PUSH
56158: LD_INT 1
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 3
56167: PUSH
56168: LD_INT 0
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 3
56177: PUSH
56178: LD_INT 1
56180: NEG
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 3
56188: PUSH
56189: LD_INT 2
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 5
56199: PUSH
56200: LD_INT 2
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 3
56209: PUSH
56210: LD_INT 3
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 3
56219: PUSH
56220: LD_INT 2
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 4
56229: PUSH
56230: LD_INT 3
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 4
56239: PUSH
56240: LD_INT 4
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 3
56249: PUSH
56250: LD_INT 4
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 2
56259: PUSH
56260: LD_INT 3
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 2
56269: PUSH
56270: LD_INT 2
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 4
56279: PUSH
56280: LD_INT 2
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 2
56289: PUSH
56290: LD_INT 4
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: LD_INT 4
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: LD_INT 3
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 1
56319: PUSH
56320: LD_INT 4
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 1
56329: PUSH
56330: LD_INT 5
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 0
56339: PUSH
56340: LD_INT 5
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 1
56349: NEG
56350: PUSH
56351: LD_INT 4
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 1
56360: NEG
56361: PUSH
56362: LD_INT 3
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 2
56371: PUSH
56372: LD_INT 5
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 2
56381: NEG
56382: PUSH
56383: LD_INT 3
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 3
56392: NEG
56393: PUSH
56394: LD_INT 0
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 3
56403: NEG
56404: PUSH
56405: LD_INT 1
56407: NEG
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 2
56415: NEG
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 2
56426: NEG
56427: PUSH
56428: LD_INT 1
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 3
56437: NEG
56438: PUSH
56439: LD_INT 1
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 4
56448: NEG
56449: PUSH
56450: LD_INT 0
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 4
56459: NEG
56460: PUSH
56461: LD_INT 1
56463: NEG
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 4
56471: NEG
56472: PUSH
56473: LD_INT 2
56475: NEG
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 2
56483: NEG
56484: PUSH
56485: LD_INT 2
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 4
56494: NEG
56495: PUSH
56496: LD_INT 4
56498: NEG
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 4
56506: NEG
56507: PUSH
56508: LD_INT 5
56510: NEG
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 3
56518: NEG
56519: PUSH
56520: LD_INT 4
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 3
56530: NEG
56531: PUSH
56532: LD_INT 3
56534: NEG
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 4
56542: NEG
56543: PUSH
56544: LD_INT 3
56546: NEG
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 5
56554: NEG
56555: PUSH
56556: LD_INT 4
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 5
56566: NEG
56567: PUSH
56568: LD_INT 5
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 3
56578: NEG
56579: PUSH
56580: LD_INT 5
56582: NEG
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 5
56590: NEG
56591: PUSH
56592: LD_INT 3
56594: NEG
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56647: LD_ADDR_VAR 0 30
56651: PUSH
56652: LD_INT 4
56654: PUSH
56655: LD_INT 4
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 4
56664: PUSH
56665: LD_INT 3
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 5
56674: PUSH
56675: LD_INT 4
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 5
56684: PUSH
56685: LD_INT 5
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 4
56694: PUSH
56695: LD_INT 5
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 3
56704: PUSH
56705: LD_INT 4
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 3
56714: PUSH
56715: LD_INT 3
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 5
56724: PUSH
56725: LD_INT 3
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 3
56734: PUSH
56735: LD_INT 5
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: LD_INT 3
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 0
56754: PUSH
56755: LD_INT 2
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 1
56764: PUSH
56765: LD_INT 3
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 1
56774: PUSH
56775: LD_INT 4
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 0
56784: PUSH
56785: LD_INT 4
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 1
56794: NEG
56795: PUSH
56796: LD_INT 3
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 1
56805: NEG
56806: PUSH
56807: LD_INT 2
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 2
56816: PUSH
56817: LD_INT 4
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 2
56826: NEG
56827: PUSH
56828: LD_INT 2
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 4
56837: NEG
56838: PUSH
56839: LD_INT 0
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 4
56848: NEG
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 3
56860: NEG
56861: PUSH
56862: LD_INT 0
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 3
56871: NEG
56872: PUSH
56873: LD_INT 1
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 4
56882: NEG
56883: PUSH
56884: LD_INT 1
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 5
56893: NEG
56894: PUSH
56895: LD_INT 0
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 5
56904: NEG
56905: PUSH
56906: LD_INT 1
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 5
56916: NEG
56917: PUSH
56918: LD_INT 2
56920: NEG
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 3
56928: NEG
56929: PUSH
56930: LD_INT 2
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 3
56939: NEG
56940: PUSH
56941: LD_INT 3
56943: NEG
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 3
56951: NEG
56952: PUSH
56953: LD_INT 4
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 2
56963: NEG
56964: PUSH
56965: LD_INT 3
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 2
56975: NEG
56976: PUSH
56977: LD_INT 2
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 3
56987: NEG
56988: PUSH
56989: LD_INT 2
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 4
56999: NEG
57000: PUSH
57001: LD_INT 3
57003: NEG
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 4
57011: NEG
57012: PUSH
57013: LD_INT 4
57015: NEG
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 2
57023: NEG
57024: PUSH
57025: LD_INT 4
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 4
57035: NEG
57036: PUSH
57037: LD_INT 2
57039: NEG
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 0
57047: PUSH
57048: LD_INT 4
57050: NEG
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 0
57058: PUSH
57059: LD_INT 5
57061: NEG
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 1
57069: PUSH
57070: LD_INT 4
57072: NEG
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 1
57080: PUSH
57081: LD_INT 3
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: LD_INT 3
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 1
57102: NEG
57103: PUSH
57104: LD_INT 4
57106: NEG
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 1
57114: NEG
57115: PUSH
57116: LD_INT 5
57118: NEG
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 2
57126: PUSH
57127: LD_INT 3
57129: NEG
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 2
57137: NEG
57138: PUSH
57139: LD_INT 5
57141: NEG
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57194: LD_ADDR_VAR 0 31
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: LD_INT 4
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 0
57211: PUSH
57212: LD_INT 3
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 1
57221: PUSH
57222: LD_INT 4
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 1
57231: PUSH
57232: LD_INT 5
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 0
57241: PUSH
57242: LD_INT 5
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 1
57251: NEG
57252: PUSH
57253: LD_INT 4
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 1
57262: NEG
57263: PUSH
57264: LD_INT 3
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 2
57273: PUSH
57274: LD_INT 5
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 2
57283: NEG
57284: PUSH
57285: LD_INT 3
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 3
57294: NEG
57295: PUSH
57296: LD_INT 0
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 3
57305: NEG
57306: PUSH
57307: LD_INT 1
57309: NEG
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 2
57317: NEG
57318: PUSH
57319: LD_INT 0
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 2
57328: NEG
57329: PUSH
57330: LD_INT 1
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 3
57339: NEG
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 4
57350: NEG
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 4
57361: NEG
57362: PUSH
57363: LD_INT 1
57365: NEG
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 4
57373: NEG
57374: PUSH
57375: LD_INT 2
57377: NEG
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 2
57385: NEG
57386: PUSH
57387: LD_INT 2
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 4
57396: NEG
57397: PUSH
57398: LD_INT 4
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 4
57408: NEG
57409: PUSH
57410: LD_INT 5
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 3
57420: NEG
57421: PUSH
57422: LD_INT 4
57424: NEG
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 3
57432: NEG
57433: PUSH
57434: LD_INT 3
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 4
57444: NEG
57445: PUSH
57446: LD_INT 3
57448: NEG
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 5
57456: NEG
57457: PUSH
57458: LD_INT 4
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 5
57468: NEG
57469: PUSH
57470: LD_INT 5
57472: NEG
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 3
57480: NEG
57481: PUSH
57482: LD_INT 5
57484: NEG
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 5
57492: NEG
57493: PUSH
57494: LD_INT 3
57496: NEG
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 0
57504: PUSH
57505: LD_INT 3
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: LD_INT 4
57518: NEG
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 1
57526: PUSH
57527: LD_INT 3
57529: NEG
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 1
57537: PUSH
57538: LD_INT 2
57540: NEG
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 0
57548: PUSH
57549: LD_INT 2
57551: NEG
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 1
57559: NEG
57560: PUSH
57561: LD_INT 3
57563: NEG
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 1
57571: NEG
57572: PUSH
57573: LD_INT 4
57575: NEG
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 2
57583: PUSH
57584: LD_INT 2
57586: NEG
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 2
57594: NEG
57595: PUSH
57596: LD_INT 4
57598: NEG
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 4
57606: PUSH
57607: LD_INT 0
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 4
57616: PUSH
57617: LD_INT 1
57619: NEG
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 5
57627: PUSH
57628: LD_INT 0
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 5
57637: PUSH
57638: LD_INT 1
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 4
57647: PUSH
57648: LD_INT 1
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 3
57657: PUSH
57658: LD_INT 0
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 3
57667: PUSH
57668: LD_INT 1
57670: NEG
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 3
57678: PUSH
57679: LD_INT 2
57681: NEG
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 5
57689: PUSH
57690: LD_INT 2
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57744: LD_ADDR_VAR 0 32
57748: PUSH
57749: LD_INT 4
57751: NEG
57752: PUSH
57753: LD_INT 0
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 4
57762: NEG
57763: PUSH
57764: LD_INT 1
57766: NEG
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 3
57774: NEG
57775: PUSH
57776: LD_INT 0
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 3
57785: NEG
57786: PUSH
57787: LD_INT 1
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 4
57796: NEG
57797: PUSH
57798: LD_INT 1
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 5
57807: NEG
57808: PUSH
57809: LD_INT 0
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 5
57818: NEG
57819: PUSH
57820: LD_INT 1
57822: NEG
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 5
57830: NEG
57831: PUSH
57832: LD_INT 2
57834: NEG
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 3
57842: NEG
57843: PUSH
57844: LD_INT 2
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 3
57853: NEG
57854: PUSH
57855: LD_INT 3
57857: NEG
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 3
57865: NEG
57866: PUSH
57867: LD_INT 4
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 2
57877: NEG
57878: PUSH
57879: LD_INT 3
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 2
57889: NEG
57890: PUSH
57891: LD_INT 2
57893: NEG
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 3
57901: NEG
57902: PUSH
57903: LD_INT 2
57905: NEG
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 4
57913: NEG
57914: PUSH
57915: LD_INT 3
57917: NEG
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 4
57925: NEG
57926: PUSH
57927: LD_INT 4
57929: NEG
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 2
57937: NEG
57938: PUSH
57939: LD_INT 4
57941: NEG
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 4
57949: NEG
57950: PUSH
57951: LD_INT 2
57953: NEG
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 0
57961: PUSH
57962: LD_INT 4
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 0
57972: PUSH
57973: LD_INT 5
57975: NEG
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 1
57983: PUSH
57984: LD_INT 4
57986: NEG
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 1
57994: PUSH
57995: LD_INT 3
57997: NEG
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 0
58005: PUSH
58006: LD_INT 3
58008: NEG
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 1
58016: NEG
58017: PUSH
58018: LD_INT 4
58020: NEG
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 1
58028: NEG
58029: PUSH
58030: LD_INT 5
58032: NEG
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 2
58040: PUSH
58041: LD_INT 3
58043: NEG
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 2
58051: NEG
58052: PUSH
58053: LD_INT 5
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 3
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 3
58073: PUSH
58074: LD_INT 1
58076: NEG
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 4
58084: PUSH
58085: LD_INT 0
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 4
58094: PUSH
58095: LD_INT 1
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 3
58104: PUSH
58105: LD_INT 1
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 2
58114: PUSH
58115: LD_INT 0
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 2
58124: PUSH
58125: LD_INT 1
58127: NEG
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 2
58135: PUSH
58136: LD_INT 2
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 4
58146: PUSH
58147: LD_INT 2
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 4
58156: PUSH
58157: LD_INT 4
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 4
58166: PUSH
58167: LD_INT 3
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 5
58176: PUSH
58177: LD_INT 4
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 5
58186: PUSH
58187: LD_INT 5
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 4
58196: PUSH
58197: LD_INT 5
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 3
58206: PUSH
58207: LD_INT 4
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 3
58216: PUSH
58217: LD_INT 3
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 5
58226: PUSH
58227: LD_INT 3
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 3
58236: PUSH
58237: LD_INT 5
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58291: LD_ADDR_VAR 0 33
58295: PUSH
58296: LD_INT 4
58298: NEG
58299: PUSH
58300: LD_INT 4
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 4
58310: NEG
58311: PUSH
58312: LD_INT 5
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 3
58322: NEG
58323: PUSH
58324: LD_INT 4
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 3
58334: NEG
58335: PUSH
58336: LD_INT 3
58338: NEG
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 4
58346: NEG
58347: PUSH
58348: LD_INT 3
58350: NEG
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 5
58358: NEG
58359: PUSH
58360: LD_INT 4
58362: NEG
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 5
58370: NEG
58371: PUSH
58372: LD_INT 5
58374: NEG
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 3
58382: NEG
58383: PUSH
58384: LD_INT 5
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 5
58394: NEG
58395: PUSH
58396: LD_INT 3
58398: NEG
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 0
58406: PUSH
58407: LD_INT 3
58409: NEG
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 0
58417: PUSH
58418: LD_INT 4
58420: NEG
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 1
58428: PUSH
58429: LD_INT 3
58431: NEG
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 1
58439: PUSH
58440: LD_INT 2
58442: NEG
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 0
58450: PUSH
58451: LD_INT 2
58453: NEG
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 1
58461: NEG
58462: PUSH
58463: LD_INT 3
58465: NEG
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: NEG
58474: PUSH
58475: LD_INT 4
58477: NEG
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 2
58485: PUSH
58486: LD_INT 2
58488: NEG
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 2
58496: NEG
58497: PUSH
58498: LD_INT 4
58500: NEG
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 4
58508: PUSH
58509: LD_INT 0
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 4
58518: PUSH
58519: LD_INT 1
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 5
58529: PUSH
58530: LD_INT 0
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 5
58539: PUSH
58540: LD_INT 1
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 4
58549: PUSH
58550: LD_INT 1
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 3
58559: PUSH
58560: LD_INT 0
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 3
58569: PUSH
58570: LD_INT 1
58572: NEG
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 3
58580: PUSH
58581: LD_INT 2
58583: NEG
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 5
58591: PUSH
58592: LD_INT 2
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 3
58601: PUSH
58602: LD_INT 3
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 3
58611: PUSH
58612: LD_INT 2
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 4
58621: PUSH
58622: LD_INT 3
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 4
58631: PUSH
58632: LD_INT 4
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 3
58641: PUSH
58642: LD_INT 4
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 2
58651: PUSH
58652: LD_INT 3
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 2
58661: PUSH
58662: LD_INT 2
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 4
58671: PUSH
58672: LD_INT 2
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 2
58681: PUSH
58682: LD_INT 4
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: LD_INT 4
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 0
58701: PUSH
58702: LD_INT 3
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 1
58711: PUSH
58712: LD_INT 4
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 1
58721: PUSH
58722: LD_INT 5
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 0
58731: PUSH
58732: LD_INT 5
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 1
58741: NEG
58742: PUSH
58743: LD_INT 4
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 1
58752: NEG
58753: PUSH
58754: LD_INT 3
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 2
58763: PUSH
58764: LD_INT 5
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 2
58773: NEG
58774: PUSH
58775: LD_INT 3
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58829: LD_ADDR_VAR 0 34
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: LD_INT 4
58839: NEG
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 0
58847: PUSH
58848: LD_INT 5
58850: NEG
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 1
58858: PUSH
58859: LD_INT 4
58861: NEG
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 1
58869: PUSH
58870: LD_INT 3
58872: NEG
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 0
58880: PUSH
58881: LD_INT 3
58883: NEG
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 1
58891: NEG
58892: PUSH
58893: LD_INT 4
58895: NEG
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 1
58903: NEG
58904: PUSH
58905: LD_INT 5
58907: NEG
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 2
58915: PUSH
58916: LD_INT 3
58918: NEG
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 2
58926: NEG
58927: PUSH
58928: LD_INT 5
58930: NEG
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 3
58938: PUSH
58939: LD_INT 0
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 3
58948: PUSH
58949: LD_INT 1
58951: NEG
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 4
58959: PUSH
58960: LD_INT 0
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 4
58969: PUSH
58970: LD_INT 1
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 3
58979: PUSH
58980: LD_INT 1
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 2
58989: PUSH
58990: LD_INT 0
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 2
58999: PUSH
59000: LD_INT 1
59002: NEG
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 2
59010: PUSH
59011: LD_INT 2
59013: NEG
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 4
59021: PUSH
59022: LD_INT 2
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 4
59031: PUSH
59032: LD_INT 4
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 4
59041: PUSH
59042: LD_INT 3
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 5
59051: PUSH
59052: LD_INT 4
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 5
59061: PUSH
59062: LD_INT 5
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 4
59071: PUSH
59072: LD_INT 5
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 3
59081: PUSH
59082: LD_INT 4
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 3
59091: PUSH
59092: LD_INT 3
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 5
59101: PUSH
59102: LD_INT 3
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 3
59111: PUSH
59112: LD_INT 5
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 0
59121: PUSH
59122: LD_INT 3
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 0
59131: PUSH
59132: LD_INT 2
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 1
59141: PUSH
59142: LD_INT 3
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 1
59151: PUSH
59152: LD_INT 4
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 0
59161: PUSH
59162: LD_INT 4
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 1
59171: NEG
59172: PUSH
59173: LD_INT 3
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 1
59182: NEG
59183: PUSH
59184: LD_INT 2
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 2
59193: PUSH
59194: LD_INT 4
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 2
59203: NEG
59204: PUSH
59205: LD_INT 2
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 4
59214: NEG
59215: PUSH
59216: LD_INT 0
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 4
59225: NEG
59226: PUSH
59227: LD_INT 1
59229: NEG
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 3
59237: NEG
59238: PUSH
59239: LD_INT 0
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 3
59248: NEG
59249: PUSH
59250: LD_INT 1
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 4
59259: NEG
59260: PUSH
59261: LD_INT 1
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 5
59270: NEG
59271: PUSH
59272: LD_INT 0
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 5
59281: NEG
59282: PUSH
59283: LD_INT 1
59285: NEG
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 5
59293: NEG
59294: PUSH
59295: LD_INT 2
59297: NEG
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 3
59305: NEG
59306: PUSH
59307: LD_INT 2
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: ST_TO_ADDR
// end ; end ;
59361: GO 59364
59363: POP
// case btype of b_depot , b_warehouse :
59364: LD_VAR 0 1
59368: PUSH
59369: LD_INT 0
59371: DOUBLE
59372: EQUAL
59373: IFTRUE 59383
59375: LD_INT 1
59377: DOUBLE
59378: EQUAL
59379: IFTRUE 59383
59381: GO 59584
59383: POP
// case nation of nation_american :
59384: LD_VAR 0 5
59388: PUSH
59389: LD_INT 1
59391: DOUBLE
59392: EQUAL
59393: IFTRUE 59397
59395: GO 59453
59397: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59398: LD_ADDR_VAR 0 9
59402: PUSH
59403: LD_VAR 0 11
59407: PUSH
59408: LD_VAR 0 12
59412: PUSH
59413: LD_VAR 0 13
59417: PUSH
59418: LD_VAR 0 14
59422: PUSH
59423: LD_VAR 0 15
59427: PUSH
59428: LD_VAR 0 16
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: PUSH
59441: LD_VAR 0 4
59445: PUSH
59446: LD_INT 1
59448: PLUS
59449: ARRAY
59450: ST_TO_ADDR
59451: GO 59582
59453: LD_INT 2
59455: DOUBLE
59456: EQUAL
59457: IFTRUE 59461
59459: GO 59517
59461: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59462: LD_ADDR_VAR 0 9
59466: PUSH
59467: LD_VAR 0 17
59471: PUSH
59472: LD_VAR 0 18
59476: PUSH
59477: LD_VAR 0 19
59481: PUSH
59482: LD_VAR 0 20
59486: PUSH
59487: LD_VAR 0 21
59491: PUSH
59492: LD_VAR 0 22
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: PUSH
59505: LD_VAR 0 4
59509: PUSH
59510: LD_INT 1
59512: PLUS
59513: ARRAY
59514: ST_TO_ADDR
59515: GO 59582
59517: LD_INT 3
59519: DOUBLE
59520: EQUAL
59521: IFTRUE 59525
59523: GO 59581
59525: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59526: LD_ADDR_VAR 0 9
59530: PUSH
59531: LD_VAR 0 23
59535: PUSH
59536: LD_VAR 0 24
59540: PUSH
59541: LD_VAR 0 25
59545: PUSH
59546: LD_VAR 0 26
59550: PUSH
59551: LD_VAR 0 27
59555: PUSH
59556: LD_VAR 0 28
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: PUSH
59569: LD_VAR 0 4
59573: PUSH
59574: LD_INT 1
59576: PLUS
59577: ARRAY
59578: ST_TO_ADDR
59579: GO 59582
59581: POP
59582: GO 60137
59584: LD_INT 2
59586: DOUBLE
59587: EQUAL
59588: IFTRUE 59598
59590: LD_INT 3
59592: DOUBLE
59593: EQUAL
59594: IFTRUE 59598
59596: GO 59654
59598: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59599: LD_ADDR_VAR 0 9
59603: PUSH
59604: LD_VAR 0 29
59608: PUSH
59609: LD_VAR 0 30
59613: PUSH
59614: LD_VAR 0 31
59618: PUSH
59619: LD_VAR 0 32
59623: PUSH
59624: LD_VAR 0 33
59628: PUSH
59629: LD_VAR 0 34
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: PUSH
59642: LD_VAR 0 4
59646: PUSH
59647: LD_INT 1
59649: PLUS
59650: ARRAY
59651: ST_TO_ADDR
59652: GO 60137
59654: LD_INT 16
59656: DOUBLE
59657: EQUAL
59658: IFTRUE 59716
59660: LD_INT 17
59662: DOUBLE
59663: EQUAL
59664: IFTRUE 59716
59666: LD_INT 18
59668: DOUBLE
59669: EQUAL
59670: IFTRUE 59716
59672: LD_INT 19
59674: DOUBLE
59675: EQUAL
59676: IFTRUE 59716
59678: LD_INT 22
59680: DOUBLE
59681: EQUAL
59682: IFTRUE 59716
59684: LD_INT 20
59686: DOUBLE
59687: EQUAL
59688: IFTRUE 59716
59690: LD_INT 21
59692: DOUBLE
59693: EQUAL
59694: IFTRUE 59716
59696: LD_INT 23
59698: DOUBLE
59699: EQUAL
59700: IFTRUE 59716
59702: LD_INT 24
59704: DOUBLE
59705: EQUAL
59706: IFTRUE 59716
59708: LD_INT 25
59710: DOUBLE
59711: EQUAL
59712: IFTRUE 59716
59714: GO 59772
59716: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59717: LD_ADDR_VAR 0 9
59721: PUSH
59722: LD_VAR 0 35
59726: PUSH
59727: LD_VAR 0 36
59731: PUSH
59732: LD_VAR 0 37
59736: PUSH
59737: LD_VAR 0 38
59741: PUSH
59742: LD_VAR 0 39
59746: PUSH
59747: LD_VAR 0 40
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: PUSH
59760: LD_VAR 0 4
59764: PUSH
59765: LD_INT 1
59767: PLUS
59768: ARRAY
59769: ST_TO_ADDR
59770: GO 60137
59772: LD_INT 6
59774: DOUBLE
59775: EQUAL
59776: IFTRUE 59828
59778: LD_INT 7
59780: DOUBLE
59781: EQUAL
59782: IFTRUE 59828
59784: LD_INT 8
59786: DOUBLE
59787: EQUAL
59788: IFTRUE 59828
59790: LD_INT 13
59792: DOUBLE
59793: EQUAL
59794: IFTRUE 59828
59796: LD_INT 12
59798: DOUBLE
59799: EQUAL
59800: IFTRUE 59828
59802: LD_INT 15
59804: DOUBLE
59805: EQUAL
59806: IFTRUE 59828
59808: LD_INT 11
59810: DOUBLE
59811: EQUAL
59812: IFTRUE 59828
59814: LD_INT 14
59816: DOUBLE
59817: EQUAL
59818: IFTRUE 59828
59820: LD_INT 10
59822: DOUBLE
59823: EQUAL
59824: IFTRUE 59828
59826: GO 59884
59828: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59829: LD_ADDR_VAR 0 9
59833: PUSH
59834: LD_VAR 0 41
59838: PUSH
59839: LD_VAR 0 42
59843: PUSH
59844: LD_VAR 0 43
59848: PUSH
59849: LD_VAR 0 44
59853: PUSH
59854: LD_VAR 0 45
59858: PUSH
59859: LD_VAR 0 46
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: PUSH
59872: LD_VAR 0 4
59876: PUSH
59877: LD_INT 1
59879: PLUS
59880: ARRAY
59881: ST_TO_ADDR
59882: GO 60137
59884: LD_INT 36
59886: DOUBLE
59887: EQUAL
59888: IFTRUE 59892
59890: GO 59948
59892: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59893: LD_ADDR_VAR 0 9
59897: PUSH
59898: LD_VAR 0 47
59902: PUSH
59903: LD_VAR 0 48
59907: PUSH
59908: LD_VAR 0 49
59912: PUSH
59913: LD_VAR 0 50
59917: PUSH
59918: LD_VAR 0 51
59922: PUSH
59923: LD_VAR 0 52
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: PUSH
59936: LD_VAR 0 4
59940: PUSH
59941: LD_INT 1
59943: PLUS
59944: ARRAY
59945: ST_TO_ADDR
59946: GO 60137
59948: LD_INT 4
59950: DOUBLE
59951: EQUAL
59952: IFTRUE 59974
59954: LD_INT 5
59956: DOUBLE
59957: EQUAL
59958: IFTRUE 59974
59960: LD_INT 34
59962: DOUBLE
59963: EQUAL
59964: IFTRUE 59974
59966: LD_INT 37
59968: DOUBLE
59969: EQUAL
59970: IFTRUE 59974
59972: GO 60030
59974: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59975: LD_ADDR_VAR 0 9
59979: PUSH
59980: LD_VAR 0 53
59984: PUSH
59985: LD_VAR 0 54
59989: PUSH
59990: LD_VAR 0 55
59994: PUSH
59995: LD_VAR 0 56
59999: PUSH
60000: LD_VAR 0 57
60004: PUSH
60005: LD_VAR 0 58
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: PUSH
60018: LD_VAR 0 4
60022: PUSH
60023: LD_INT 1
60025: PLUS
60026: ARRAY
60027: ST_TO_ADDR
60028: GO 60137
60030: LD_INT 31
60032: DOUBLE
60033: EQUAL
60034: IFTRUE 60080
60036: LD_INT 32
60038: DOUBLE
60039: EQUAL
60040: IFTRUE 60080
60042: LD_INT 33
60044: DOUBLE
60045: EQUAL
60046: IFTRUE 60080
60048: LD_INT 27
60050: DOUBLE
60051: EQUAL
60052: IFTRUE 60080
60054: LD_INT 26
60056: DOUBLE
60057: EQUAL
60058: IFTRUE 60080
60060: LD_INT 28
60062: DOUBLE
60063: EQUAL
60064: IFTRUE 60080
60066: LD_INT 29
60068: DOUBLE
60069: EQUAL
60070: IFTRUE 60080
60072: LD_INT 30
60074: DOUBLE
60075: EQUAL
60076: IFTRUE 60080
60078: GO 60136
60080: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60081: LD_ADDR_VAR 0 9
60085: PUSH
60086: LD_VAR 0 59
60090: PUSH
60091: LD_VAR 0 60
60095: PUSH
60096: LD_VAR 0 61
60100: PUSH
60101: LD_VAR 0 62
60105: PUSH
60106: LD_VAR 0 63
60110: PUSH
60111: LD_VAR 0 64
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: PUSH
60124: LD_VAR 0 4
60128: PUSH
60129: LD_INT 1
60131: PLUS
60132: ARRAY
60133: ST_TO_ADDR
60134: GO 60137
60136: POP
// temp_list2 = [ ] ;
60137: LD_ADDR_VAR 0 10
60141: PUSH
60142: EMPTY
60143: ST_TO_ADDR
// for i in temp_list do
60144: LD_ADDR_VAR 0 8
60148: PUSH
60149: LD_VAR 0 9
60153: PUSH
60154: FOR_IN
60155: IFFALSE 60207
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60157: LD_ADDR_VAR 0 10
60161: PUSH
60162: LD_VAR 0 10
60166: PUSH
60167: LD_VAR 0 8
60171: PUSH
60172: LD_INT 1
60174: ARRAY
60175: PUSH
60176: LD_VAR 0 2
60180: PLUS
60181: PUSH
60182: LD_VAR 0 8
60186: PUSH
60187: LD_INT 2
60189: ARRAY
60190: PUSH
60191: LD_VAR 0 3
60195: PLUS
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: EMPTY
60202: LIST
60203: ADD
60204: ST_TO_ADDR
60205: GO 60154
60207: POP
60208: POP
// result = temp_list2 ;
60209: LD_ADDR_VAR 0 7
60213: PUSH
60214: LD_VAR 0 10
60218: ST_TO_ADDR
// end ;
60219: LD_VAR 0 7
60223: RET
// export function EnemyInRange ( unit , dist ) ; begin
60224: LD_INT 0
60226: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60227: LD_ADDR_VAR 0 3
60231: PUSH
60232: LD_VAR 0 1
60236: PPUSH
60237: CALL_OW 255
60241: PPUSH
60242: LD_VAR 0 1
60246: PPUSH
60247: CALL_OW 250
60251: PPUSH
60252: LD_VAR 0 1
60256: PPUSH
60257: CALL_OW 251
60261: PPUSH
60262: LD_VAR 0 2
60266: PPUSH
60267: CALL 33597 0 4
60271: PUSH
60272: LD_INT 4
60274: ARRAY
60275: ST_TO_ADDR
// end ;
60276: LD_VAR 0 3
60280: RET
// export function PlayerSeeMe ( unit ) ; begin
60281: LD_INT 0
60283: PPUSH
// result := See ( your_side , unit ) ;
60284: LD_ADDR_VAR 0 2
60288: PUSH
60289: LD_OWVAR 2
60293: PPUSH
60294: LD_VAR 0 1
60298: PPUSH
60299: CALL_OW 292
60303: ST_TO_ADDR
// end ;
60304: LD_VAR 0 2
60308: RET
// export function ReverseDir ( unit ) ; begin
60309: LD_INT 0
60311: PPUSH
// if not unit then
60312: LD_VAR 0 1
60316: NOT
60317: IFFALSE 60321
// exit ;
60319: GO 60344
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60321: LD_ADDR_VAR 0 2
60325: PUSH
60326: LD_VAR 0 1
60330: PPUSH
60331: CALL_OW 254
60335: PUSH
60336: LD_INT 3
60338: PLUS
60339: PUSH
60340: LD_INT 6
60342: MOD
60343: ST_TO_ADDR
// end ;
60344: LD_VAR 0 2
60348: RET
// export function ReverseArray ( array ) ; var i ; begin
60349: LD_INT 0
60351: PPUSH
60352: PPUSH
// if not array then
60353: LD_VAR 0 1
60357: NOT
60358: IFFALSE 60362
// exit ;
60360: GO 60417
// result := [ ] ;
60362: LD_ADDR_VAR 0 2
60366: PUSH
60367: EMPTY
60368: ST_TO_ADDR
// for i := array downto 1 do
60369: LD_ADDR_VAR 0 3
60373: PUSH
60374: DOUBLE
60375: LD_VAR 0 1
60379: INC
60380: ST_TO_ADDR
60381: LD_INT 1
60383: PUSH
60384: FOR_DOWNTO
60385: IFFALSE 60415
// result := Join ( result , array [ i ] ) ;
60387: LD_ADDR_VAR 0 2
60391: PUSH
60392: LD_VAR 0 2
60396: PPUSH
60397: LD_VAR 0 1
60401: PUSH
60402: LD_VAR 0 3
60406: ARRAY
60407: PPUSH
60408: CALL 65223 0 2
60412: ST_TO_ADDR
60413: GO 60384
60415: POP
60416: POP
// end ;
60417: LD_VAR 0 2
60421: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
60422: LD_INT 0
60424: PPUSH
60425: PPUSH
60426: PPUSH
60427: PPUSH
60428: PPUSH
60429: PPUSH
// if not unit or not hexes then
60430: LD_VAR 0 1
60434: NOT
60435: PUSH
60436: LD_VAR 0 2
60440: NOT
60441: OR
60442: IFFALSE 60446
// exit ;
60444: GO 60569
// dist := 9999 ;
60446: LD_ADDR_VAR 0 5
60450: PUSH
60451: LD_INT 9999
60453: ST_TO_ADDR
// for i = 1 to hexes do
60454: LD_ADDR_VAR 0 4
60458: PUSH
60459: DOUBLE
60460: LD_INT 1
60462: DEC
60463: ST_TO_ADDR
60464: LD_VAR 0 2
60468: PUSH
60469: FOR_TO
60470: IFFALSE 60557
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60472: LD_ADDR_VAR 0 6
60476: PUSH
60477: LD_VAR 0 1
60481: PPUSH
60482: LD_VAR 0 2
60486: PUSH
60487: LD_VAR 0 4
60491: ARRAY
60492: PUSH
60493: LD_INT 1
60495: ARRAY
60496: PPUSH
60497: LD_VAR 0 2
60501: PUSH
60502: LD_VAR 0 4
60506: ARRAY
60507: PUSH
60508: LD_INT 2
60510: ARRAY
60511: PPUSH
60512: CALL_OW 297
60516: ST_TO_ADDR
// if tdist < dist then
60517: LD_VAR 0 6
60521: PUSH
60522: LD_VAR 0 5
60526: LESS
60527: IFFALSE 60555
// begin hex := hexes [ i ] ;
60529: LD_ADDR_VAR 0 8
60533: PUSH
60534: LD_VAR 0 2
60538: PUSH
60539: LD_VAR 0 4
60543: ARRAY
60544: ST_TO_ADDR
// dist := tdist ;
60545: LD_ADDR_VAR 0 5
60549: PUSH
60550: LD_VAR 0 6
60554: ST_TO_ADDR
// end ; end ;
60555: GO 60469
60557: POP
60558: POP
// result := hex ;
60559: LD_ADDR_VAR 0 3
60563: PUSH
60564: LD_VAR 0 8
60568: ST_TO_ADDR
// end ;
60569: LD_VAR 0 3
60573: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60574: LD_INT 0
60576: PPUSH
60577: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60578: LD_VAR 0 1
60582: NOT
60583: PUSH
60584: LD_VAR 0 1
60588: PUSH
60589: LD_INT 21
60591: PUSH
60592: LD_INT 2
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 23
60601: PUSH
60602: LD_INT 2
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PPUSH
60613: CALL_OW 69
60617: IN
60618: NOT
60619: OR
60620: IFFALSE 60624
// exit ;
60622: GO 60671
// for i = 1 to 3 do
60624: LD_ADDR_VAR 0 3
60628: PUSH
60629: DOUBLE
60630: LD_INT 1
60632: DEC
60633: ST_TO_ADDR
60634: LD_INT 3
60636: PUSH
60637: FOR_TO
60638: IFFALSE 60669
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60640: LD_VAR 0 1
60644: PPUSH
60645: CALL_OW 250
60649: PPUSH
60650: LD_VAR 0 1
60654: PPUSH
60655: CALL_OW 251
60659: PPUSH
60660: LD_INT 1
60662: PPUSH
60663: CALL_OW 453
60667: GO 60637
60669: POP
60670: POP
// end ;
60671: LD_VAR 0 2
60675: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60676: LD_INT 0
60678: PPUSH
60679: PPUSH
60680: PPUSH
60681: PPUSH
60682: PPUSH
60683: PPUSH
// if not unit or not enemy_unit then
60684: LD_VAR 0 1
60688: NOT
60689: PUSH
60690: LD_VAR 0 2
60694: NOT
60695: OR
60696: IFFALSE 60700
// exit ;
60698: GO 61167
// if GetLives ( i ) < 250 then
60700: LD_VAR 0 4
60704: PPUSH
60705: CALL_OW 256
60709: PUSH
60710: LD_INT 250
60712: LESS
60713: IFFALSE 60726
// begin ComAutodestruct ( i ) ;
60715: LD_VAR 0 4
60719: PPUSH
60720: CALL 60574 0 1
// exit ;
60724: GO 61167
// end ; x := GetX ( enemy_unit ) ;
60726: LD_ADDR_VAR 0 7
60730: PUSH
60731: LD_VAR 0 2
60735: PPUSH
60736: CALL_OW 250
60740: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60741: LD_ADDR_VAR 0 8
60745: PUSH
60746: LD_VAR 0 2
60750: PPUSH
60751: CALL_OW 251
60755: ST_TO_ADDR
// if not x or not y then
60756: LD_VAR 0 7
60760: NOT
60761: PUSH
60762: LD_VAR 0 8
60766: NOT
60767: OR
60768: IFFALSE 60772
// exit ;
60770: GO 61167
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60772: LD_ADDR_VAR 0 6
60776: PUSH
60777: LD_VAR 0 7
60781: PPUSH
60782: LD_INT 0
60784: PPUSH
60785: LD_INT 4
60787: PPUSH
60788: CALL_OW 272
60792: PUSH
60793: LD_VAR 0 8
60797: PPUSH
60798: LD_INT 0
60800: PPUSH
60801: LD_INT 4
60803: PPUSH
60804: CALL_OW 273
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_VAR 0 7
60817: PPUSH
60818: LD_INT 1
60820: PPUSH
60821: LD_INT 4
60823: PPUSH
60824: CALL_OW 272
60828: PUSH
60829: LD_VAR 0 8
60833: PPUSH
60834: LD_INT 1
60836: PPUSH
60837: LD_INT 4
60839: PPUSH
60840: CALL_OW 273
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_VAR 0 7
60853: PPUSH
60854: LD_INT 2
60856: PPUSH
60857: LD_INT 4
60859: PPUSH
60860: CALL_OW 272
60864: PUSH
60865: LD_VAR 0 8
60869: PPUSH
60870: LD_INT 2
60872: PPUSH
60873: LD_INT 4
60875: PPUSH
60876: CALL_OW 273
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_VAR 0 7
60889: PPUSH
60890: LD_INT 3
60892: PPUSH
60893: LD_INT 4
60895: PPUSH
60896: CALL_OW 272
60900: PUSH
60901: LD_VAR 0 8
60905: PPUSH
60906: LD_INT 3
60908: PPUSH
60909: LD_INT 4
60911: PPUSH
60912: CALL_OW 273
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_VAR 0 7
60925: PPUSH
60926: LD_INT 4
60928: PPUSH
60929: LD_INT 4
60931: PPUSH
60932: CALL_OW 272
60936: PUSH
60937: LD_VAR 0 8
60941: PPUSH
60942: LD_INT 4
60944: PPUSH
60945: LD_INT 4
60947: PPUSH
60948: CALL_OW 273
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_VAR 0 7
60961: PPUSH
60962: LD_INT 5
60964: PPUSH
60965: LD_INT 4
60967: PPUSH
60968: CALL_OW 272
60972: PUSH
60973: LD_VAR 0 8
60977: PPUSH
60978: LD_INT 5
60980: PPUSH
60981: LD_INT 4
60983: PPUSH
60984: CALL_OW 273
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: ST_TO_ADDR
// for i = tmp downto 1 do
61001: LD_ADDR_VAR 0 4
61005: PUSH
61006: DOUBLE
61007: LD_VAR 0 6
61011: INC
61012: ST_TO_ADDR
61013: LD_INT 1
61015: PUSH
61016: FOR_DOWNTO
61017: IFFALSE 61118
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61019: LD_VAR 0 6
61023: PUSH
61024: LD_VAR 0 4
61028: ARRAY
61029: PUSH
61030: LD_INT 1
61032: ARRAY
61033: PPUSH
61034: LD_VAR 0 6
61038: PUSH
61039: LD_VAR 0 4
61043: ARRAY
61044: PUSH
61045: LD_INT 2
61047: ARRAY
61048: PPUSH
61049: CALL_OW 488
61053: NOT
61054: PUSH
61055: LD_VAR 0 6
61059: PUSH
61060: LD_VAR 0 4
61064: ARRAY
61065: PUSH
61066: LD_INT 1
61068: ARRAY
61069: PPUSH
61070: LD_VAR 0 6
61074: PUSH
61075: LD_VAR 0 4
61079: ARRAY
61080: PUSH
61081: LD_INT 2
61083: ARRAY
61084: PPUSH
61085: CALL_OW 428
61089: PUSH
61090: LD_INT 0
61092: NONEQUAL
61093: OR
61094: IFFALSE 61116
// tmp := Delete ( tmp , i ) ;
61096: LD_ADDR_VAR 0 6
61100: PUSH
61101: LD_VAR 0 6
61105: PPUSH
61106: LD_VAR 0 4
61110: PPUSH
61111: CALL_OW 3
61115: ST_TO_ADDR
61116: GO 61016
61118: POP
61119: POP
// j := GetClosestHex ( unit , tmp ) ;
61120: LD_ADDR_VAR 0 5
61124: PUSH
61125: LD_VAR 0 1
61129: PPUSH
61130: LD_VAR 0 6
61134: PPUSH
61135: CALL 60422 0 2
61139: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61140: LD_VAR 0 1
61144: PPUSH
61145: LD_VAR 0 5
61149: PUSH
61150: LD_INT 1
61152: ARRAY
61153: PPUSH
61154: LD_VAR 0 5
61158: PUSH
61159: LD_INT 2
61161: ARRAY
61162: PPUSH
61163: CALL_OW 111
// end ;
61167: LD_VAR 0 3
61171: RET
// export function PrepareApemanSoldier ( ) ; begin
61172: LD_INT 0
61174: PPUSH
// uc_nation := 0 ;
61175: LD_ADDR_OWVAR 21
61179: PUSH
61180: LD_INT 0
61182: ST_TO_ADDR
// hc_sex := sex_male ;
61183: LD_ADDR_OWVAR 27
61187: PUSH
61188: LD_INT 1
61190: ST_TO_ADDR
// hc_name :=  ;
61191: LD_ADDR_OWVAR 26
61195: PUSH
61196: LD_STRING 
61198: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
61199: LD_ADDR_OWVAR 28
61203: PUSH
61204: LD_INT 15
61206: ST_TO_ADDR
// hc_gallery :=  ;
61207: LD_ADDR_OWVAR 33
61211: PUSH
61212: LD_STRING 
61214: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61215: LD_ADDR_OWVAR 31
61219: PUSH
61220: LD_INT 0
61222: PPUSH
61223: LD_INT 3
61225: PPUSH
61226: CALL_OW 12
61230: PUSH
61231: LD_INT 0
61233: PPUSH
61234: LD_INT 3
61236: PPUSH
61237: CALL_OW 12
61241: PUSH
61242: LD_INT 0
61244: PUSH
61245: LD_INT 0
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61254: LD_ADDR_OWVAR 29
61258: PUSH
61259: LD_INT 12
61261: PUSH
61262: LD_INT 12
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: ST_TO_ADDR
// end ;
61269: LD_VAR 0 1
61273: RET
// export function PrepareApemanEngineer ( ) ; begin
61274: LD_INT 0
61276: PPUSH
// uc_nation := 0 ;
61277: LD_ADDR_OWVAR 21
61281: PUSH
61282: LD_INT 0
61284: ST_TO_ADDR
// hc_sex := sex_male ;
61285: LD_ADDR_OWVAR 27
61289: PUSH
61290: LD_INT 1
61292: ST_TO_ADDR
// hc_name :=  ;
61293: LD_ADDR_OWVAR 26
61297: PUSH
61298: LD_STRING 
61300: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
61301: LD_ADDR_OWVAR 28
61305: PUSH
61306: LD_INT 16
61308: ST_TO_ADDR
// hc_gallery :=  ;
61309: LD_ADDR_OWVAR 33
61313: PUSH
61314: LD_STRING 
61316: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61317: LD_ADDR_OWVAR 31
61321: PUSH
61322: LD_INT 0
61324: PPUSH
61325: LD_INT 3
61327: PPUSH
61328: CALL_OW 12
61332: PUSH
61333: LD_INT 0
61335: PPUSH
61336: LD_INT 3
61338: PPUSH
61339: CALL_OW 12
61343: PUSH
61344: LD_INT 0
61346: PUSH
61347: LD_INT 0
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61356: LD_ADDR_OWVAR 29
61360: PUSH
61361: LD_INT 12
61363: PUSH
61364: LD_INT 12
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: ST_TO_ADDR
// end ;
61371: LD_VAR 0 1
61375: RET
// export function PrepareApeman ( agressivity ) ; begin
61376: LD_INT 0
61378: PPUSH
// uc_side := 0 ;
61379: LD_ADDR_OWVAR 20
61383: PUSH
61384: LD_INT 0
61386: ST_TO_ADDR
// uc_nation := 0 ;
61387: LD_ADDR_OWVAR 21
61391: PUSH
61392: LD_INT 0
61394: ST_TO_ADDR
// hc_sex := sex_male ;
61395: LD_ADDR_OWVAR 27
61399: PUSH
61400: LD_INT 1
61402: ST_TO_ADDR
// hc_class := class_apeman ;
61403: LD_ADDR_OWVAR 28
61407: PUSH
61408: LD_INT 12
61410: ST_TO_ADDR
// hc_gallery :=  ;
61411: LD_ADDR_OWVAR 33
61415: PUSH
61416: LD_STRING 
61418: ST_TO_ADDR
// hc_name :=  ;
61419: LD_ADDR_OWVAR 26
61423: PUSH
61424: LD_STRING 
61426: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61427: LD_ADDR_OWVAR 29
61431: PUSH
61432: LD_INT 12
61434: PUSH
61435: LD_INT 12
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: ST_TO_ADDR
// if agressivity = 0 then
61442: LD_VAR 0 1
61446: PUSH
61447: LD_INT 0
61449: EQUAL
61450: IFFALSE 61462
// hc_agressivity := 0 else
61452: LD_ADDR_OWVAR 35
61456: PUSH
61457: LD_INT 0
61459: ST_TO_ADDR
61460: GO 61483
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61462: LD_ADDR_OWVAR 35
61466: PUSH
61467: LD_VAR 0 1
61471: NEG
61472: PPUSH
61473: LD_VAR 0 1
61477: PPUSH
61478: CALL_OW 12
61482: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61483: LD_ADDR_OWVAR 31
61487: PUSH
61488: LD_INT 0
61490: PPUSH
61491: LD_INT 3
61493: PPUSH
61494: CALL_OW 12
61498: PUSH
61499: LD_INT 0
61501: PPUSH
61502: LD_INT 3
61504: PPUSH
61505: CALL_OW 12
61509: PUSH
61510: LD_INT 0
61512: PUSH
61513: LD_INT 0
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: ST_TO_ADDR
// end ;
61522: LD_VAR 0 2
61526: RET
// export function PrepareTiger ( agressivity ) ; begin
61527: LD_INT 0
61529: PPUSH
// uc_side := 0 ;
61530: LD_ADDR_OWVAR 20
61534: PUSH
61535: LD_INT 0
61537: ST_TO_ADDR
// uc_nation := 0 ;
61538: LD_ADDR_OWVAR 21
61542: PUSH
61543: LD_INT 0
61545: ST_TO_ADDR
// InitHc ;
61546: CALL_OW 19
// hc_class := class_tiger ;
61550: LD_ADDR_OWVAR 28
61554: PUSH
61555: LD_INT 14
61557: ST_TO_ADDR
// hc_gallery :=  ;
61558: LD_ADDR_OWVAR 33
61562: PUSH
61563: LD_STRING 
61565: ST_TO_ADDR
// hc_name :=  ;
61566: LD_ADDR_OWVAR 26
61570: PUSH
61571: LD_STRING 
61573: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61574: LD_ADDR_OWVAR 35
61578: PUSH
61579: LD_VAR 0 1
61583: NEG
61584: PPUSH
61585: LD_VAR 0 1
61589: PPUSH
61590: CALL_OW 12
61594: ST_TO_ADDR
// end ;
61595: LD_VAR 0 2
61599: RET
// export function PrepareEnchidna ( ) ; begin
61600: LD_INT 0
61602: PPUSH
// uc_side := 0 ;
61603: LD_ADDR_OWVAR 20
61607: PUSH
61608: LD_INT 0
61610: ST_TO_ADDR
// uc_nation := 0 ;
61611: LD_ADDR_OWVAR 21
61615: PUSH
61616: LD_INT 0
61618: ST_TO_ADDR
// InitHc ;
61619: CALL_OW 19
// hc_class := class_baggie ;
61623: LD_ADDR_OWVAR 28
61627: PUSH
61628: LD_INT 13
61630: ST_TO_ADDR
// hc_gallery :=  ;
61631: LD_ADDR_OWVAR 33
61635: PUSH
61636: LD_STRING 
61638: ST_TO_ADDR
// hc_name :=  ;
61639: LD_ADDR_OWVAR 26
61643: PUSH
61644: LD_STRING 
61646: ST_TO_ADDR
// end ;
61647: LD_VAR 0 1
61651: RET
// export function PrepareFrog ( ) ; begin
61652: LD_INT 0
61654: PPUSH
// uc_side := 0 ;
61655: LD_ADDR_OWVAR 20
61659: PUSH
61660: LD_INT 0
61662: ST_TO_ADDR
// uc_nation := 0 ;
61663: LD_ADDR_OWVAR 21
61667: PUSH
61668: LD_INT 0
61670: ST_TO_ADDR
// InitHc ;
61671: CALL_OW 19
// hc_class := class_frog ;
61675: LD_ADDR_OWVAR 28
61679: PUSH
61680: LD_INT 19
61682: ST_TO_ADDR
// hc_gallery :=  ;
61683: LD_ADDR_OWVAR 33
61687: PUSH
61688: LD_STRING 
61690: ST_TO_ADDR
// hc_name :=  ;
61691: LD_ADDR_OWVAR 26
61695: PUSH
61696: LD_STRING 
61698: ST_TO_ADDR
// end ;
61699: LD_VAR 0 1
61703: RET
// export function PrepareFish ( ) ; begin
61704: LD_INT 0
61706: PPUSH
// uc_side := 0 ;
61707: LD_ADDR_OWVAR 20
61711: PUSH
61712: LD_INT 0
61714: ST_TO_ADDR
// uc_nation := 0 ;
61715: LD_ADDR_OWVAR 21
61719: PUSH
61720: LD_INT 0
61722: ST_TO_ADDR
// InitHc ;
61723: CALL_OW 19
// hc_class := class_fish ;
61727: LD_ADDR_OWVAR 28
61731: PUSH
61732: LD_INT 20
61734: ST_TO_ADDR
// hc_gallery :=  ;
61735: LD_ADDR_OWVAR 33
61739: PUSH
61740: LD_STRING 
61742: ST_TO_ADDR
// hc_name :=  ;
61743: LD_ADDR_OWVAR 26
61747: PUSH
61748: LD_STRING 
61750: ST_TO_ADDR
// end ;
61751: LD_VAR 0 1
61755: RET
// export function PrepareBird ( ) ; begin
61756: LD_INT 0
61758: PPUSH
// uc_side := 0 ;
61759: LD_ADDR_OWVAR 20
61763: PUSH
61764: LD_INT 0
61766: ST_TO_ADDR
// uc_nation := 0 ;
61767: LD_ADDR_OWVAR 21
61771: PUSH
61772: LD_INT 0
61774: ST_TO_ADDR
// InitHc ;
61775: CALL_OW 19
// hc_class := class_phororhacos ;
61779: LD_ADDR_OWVAR 28
61783: PUSH
61784: LD_INT 18
61786: ST_TO_ADDR
// hc_gallery :=  ;
61787: LD_ADDR_OWVAR 33
61791: PUSH
61792: LD_STRING 
61794: ST_TO_ADDR
// hc_name :=  ;
61795: LD_ADDR_OWVAR 26
61799: PUSH
61800: LD_STRING 
61802: ST_TO_ADDR
// end ;
61803: LD_VAR 0 1
61807: RET
// export function PrepareHorse ( ) ; begin
61808: LD_INT 0
61810: PPUSH
// uc_side := 0 ;
61811: LD_ADDR_OWVAR 20
61815: PUSH
61816: LD_INT 0
61818: ST_TO_ADDR
// uc_nation := 0 ;
61819: LD_ADDR_OWVAR 21
61823: PUSH
61824: LD_INT 0
61826: ST_TO_ADDR
// InitHc ;
61827: CALL_OW 19
// hc_class := class_horse ;
61831: LD_ADDR_OWVAR 28
61835: PUSH
61836: LD_INT 21
61838: ST_TO_ADDR
// hc_gallery :=  ;
61839: LD_ADDR_OWVAR 33
61843: PUSH
61844: LD_STRING 
61846: ST_TO_ADDR
// hc_name :=  ;
61847: LD_ADDR_OWVAR 26
61851: PUSH
61852: LD_STRING 
61854: ST_TO_ADDR
// end ;
61855: LD_VAR 0 1
61859: RET
// export function PrepareMastodont ( ) ; begin
61860: LD_INT 0
61862: PPUSH
// uc_side := 0 ;
61863: LD_ADDR_OWVAR 20
61867: PUSH
61868: LD_INT 0
61870: ST_TO_ADDR
// uc_nation := 0 ;
61871: LD_ADDR_OWVAR 21
61875: PUSH
61876: LD_INT 0
61878: ST_TO_ADDR
// vc_chassis := class_mastodont ;
61879: LD_ADDR_OWVAR 37
61883: PUSH
61884: LD_INT 31
61886: ST_TO_ADDR
// vc_control := control_rider ;
61887: LD_ADDR_OWVAR 38
61891: PUSH
61892: LD_INT 4
61894: ST_TO_ADDR
// end ;
61895: LD_VAR 0 1
61899: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61900: LD_INT 0
61902: PPUSH
61903: PPUSH
61904: PPUSH
// uc_side = 0 ;
61905: LD_ADDR_OWVAR 20
61909: PUSH
61910: LD_INT 0
61912: ST_TO_ADDR
// uc_nation = 0 ;
61913: LD_ADDR_OWVAR 21
61917: PUSH
61918: LD_INT 0
61920: ST_TO_ADDR
// InitHc_All ( ) ;
61921: CALL_OW 584
// InitVc ;
61925: CALL_OW 20
// if mastodonts then
61929: LD_VAR 0 6
61933: IFFALSE 62000
// for i = 1 to mastodonts do
61935: LD_ADDR_VAR 0 11
61939: PUSH
61940: DOUBLE
61941: LD_INT 1
61943: DEC
61944: ST_TO_ADDR
61945: LD_VAR 0 6
61949: PUSH
61950: FOR_TO
61951: IFFALSE 61998
// begin vc_chassis := 31 ;
61953: LD_ADDR_OWVAR 37
61957: PUSH
61958: LD_INT 31
61960: ST_TO_ADDR
// vc_control := control_rider ;
61961: LD_ADDR_OWVAR 38
61965: PUSH
61966: LD_INT 4
61968: ST_TO_ADDR
// animal := CreateVehicle ;
61969: LD_ADDR_VAR 0 12
61973: PUSH
61974: CALL_OW 45
61978: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61979: LD_VAR 0 12
61983: PPUSH
61984: LD_VAR 0 8
61988: PPUSH
61989: LD_INT 0
61991: PPUSH
61992: CALL 64128 0 3
// end ;
61996: GO 61950
61998: POP
61999: POP
// if horses then
62000: LD_VAR 0 5
62004: IFFALSE 62071
// for i = 1 to horses do
62006: LD_ADDR_VAR 0 11
62010: PUSH
62011: DOUBLE
62012: LD_INT 1
62014: DEC
62015: ST_TO_ADDR
62016: LD_VAR 0 5
62020: PUSH
62021: FOR_TO
62022: IFFALSE 62069
// begin hc_class := 21 ;
62024: LD_ADDR_OWVAR 28
62028: PUSH
62029: LD_INT 21
62031: ST_TO_ADDR
// hc_gallery :=  ;
62032: LD_ADDR_OWVAR 33
62036: PUSH
62037: LD_STRING 
62039: ST_TO_ADDR
// animal := CreateHuman ;
62040: LD_ADDR_VAR 0 12
62044: PUSH
62045: CALL_OW 44
62049: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62050: LD_VAR 0 12
62054: PPUSH
62055: LD_VAR 0 8
62059: PPUSH
62060: LD_INT 0
62062: PPUSH
62063: CALL 64128 0 3
// end ;
62067: GO 62021
62069: POP
62070: POP
// if birds then
62071: LD_VAR 0 1
62075: IFFALSE 62142
// for i = 1 to birds do
62077: LD_ADDR_VAR 0 11
62081: PUSH
62082: DOUBLE
62083: LD_INT 1
62085: DEC
62086: ST_TO_ADDR
62087: LD_VAR 0 1
62091: PUSH
62092: FOR_TO
62093: IFFALSE 62140
// begin hc_class := 18 ;
62095: LD_ADDR_OWVAR 28
62099: PUSH
62100: LD_INT 18
62102: ST_TO_ADDR
// hc_gallery =  ;
62103: LD_ADDR_OWVAR 33
62107: PUSH
62108: LD_STRING 
62110: ST_TO_ADDR
// animal := CreateHuman ;
62111: LD_ADDR_VAR 0 12
62115: PUSH
62116: CALL_OW 44
62120: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62121: LD_VAR 0 12
62125: PPUSH
62126: LD_VAR 0 8
62130: PPUSH
62131: LD_INT 0
62133: PPUSH
62134: CALL 64128 0 3
// end ;
62138: GO 62092
62140: POP
62141: POP
// if tigers then
62142: LD_VAR 0 2
62146: IFFALSE 62230
// for i = 1 to tigers do
62148: LD_ADDR_VAR 0 11
62152: PUSH
62153: DOUBLE
62154: LD_INT 1
62156: DEC
62157: ST_TO_ADDR
62158: LD_VAR 0 2
62162: PUSH
62163: FOR_TO
62164: IFFALSE 62228
// begin hc_class = class_tiger ;
62166: LD_ADDR_OWVAR 28
62170: PUSH
62171: LD_INT 14
62173: ST_TO_ADDR
// hc_gallery =  ;
62174: LD_ADDR_OWVAR 33
62178: PUSH
62179: LD_STRING 
62181: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62182: LD_ADDR_OWVAR 35
62186: PUSH
62187: LD_INT 7
62189: NEG
62190: PPUSH
62191: LD_INT 7
62193: PPUSH
62194: CALL_OW 12
62198: ST_TO_ADDR
// animal := CreateHuman ;
62199: LD_ADDR_VAR 0 12
62203: PUSH
62204: CALL_OW 44
62208: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62209: LD_VAR 0 12
62213: PPUSH
62214: LD_VAR 0 8
62218: PPUSH
62219: LD_INT 0
62221: PPUSH
62222: CALL 64128 0 3
// end ;
62226: GO 62163
62228: POP
62229: POP
// if apemans then
62230: LD_VAR 0 3
62234: IFFALSE 62357
// for i = 1 to apemans do
62236: LD_ADDR_VAR 0 11
62240: PUSH
62241: DOUBLE
62242: LD_INT 1
62244: DEC
62245: ST_TO_ADDR
62246: LD_VAR 0 3
62250: PUSH
62251: FOR_TO
62252: IFFALSE 62355
// begin hc_class = class_apeman ;
62254: LD_ADDR_OWVAR 28
62258: PUSH
62259: LD_INT 12
62261: ST_TO_ADDR
// hc_gallery =  ;
62262: LD_ADDR_OWVAR 33
62266: PUSH
62267: LD_STRING 
62269: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62270: LD_ADDR_OWVAR 35
62274: PUSH
62275: LD_INT 2
62277: NEG
62278: PPUSH
62279: LD_INT 2
62281: PPUSH
62282: CALL_OW 12
62286: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62287: LD_ADDR_OWVAR 31
62291: PUSH
62292: LD_INT 1
62294: PPUSH
62295: LD_INT 3
62297: PPUSH
62298: CALL_OW 12
62302: PUSH
62303: LD_INT 1
62305: PPUSH
62306: LD_INT 3
62308: PPUSH
62309: CALL_OW 12
62313: PUSH
62314: LD_INT 0
62316: PUSH
62317: LD_INT 0
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: ST_TO_ADDR
// animal := CreateHuman ;
62326: LD_ADDR_VAR 0 12
62330: PUSH
62331: CALL_OW 44
62335: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62336: LD_VAR 0 12
62340: PPUSH
62341: LD_VAR 0 8
62345: PPUSH
62346: LD_INT 0
62348: PPUSH
62349: CALL 64128 0 3
// end ;
62353: GO 62251
62355: POP
62356: POP
// if enchidnas then
62357: LD_VAR 0 4
62361: IFFALSE 62428
// for i = 1 to enchidnas do
62363: LD_ADDR_VAR 0 11
62367: PUSH
62368: DOUBLE
62369: LD_INT 1
62371: DEC
62372: ST_TO_ADDR
62373: LD_VAR 0 4
62377: PUSH
62378: FOR_TO
62379: IFFALSE 62426
// begin hc_class = 13 ;
62381: LD_ADDR_OWVAR 28
62385: PUSH
62386: LD_INT 13
62388: ST_TO_ADDR
// hc_gallery =  ;
62389: LD_ADDR_OWVAR 33
62393: PUSH
62394: LD_STRING 
62396: ST_TO_ADDR
// animal := CreateHuman ;
62397: LD_ADDR_VAR 0 12
62401: PUSH
62402: CALL_OW 44
62406: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62407: LD_VAR 0 12
62411: PPUSH
62412: LD_VAR 0 8
62416: PPUSH
62417: LD_INT 0
62419: PPUSH
62420: CALL 64128 0 3
// end ;
62424: GO 62378
62426: POP
62427: POP
// if fishes then
62428: LD_VAR 0 7
62432: IFFALSE 62499
// for i = 1 to fishes do
62434: LD_ADDR_VAR 0 11
62438: PUSH
62439: DOUBLE
62440: LD_INT 1
62442: DEC
62443: ST_TO_ADDR
62444: LD_VAR 0 7
62448: PUSH
62449: FOR_TO
62450: IFFALSE 62497
// begin hc_class = 20 ;
62452: LD_ADDR_OWVAR 28
62456: PUSH
62457: LD_INT 20
62459: ST_TO_ADDR
// hc_gallery =  ;
62460: LD_ADDR_OWVAR 33
62464: PUSH
62465: LD_STRING 
62467: ST_TO_ADDR
// animal := CreateHuman ;
62468: LD_ADDR_VAR 0 12
62472: PUSH
62473: CALL_OW 44
62477: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62478: LD_VAR 0 12
62482: PPUSH
62483: LD_VAR 0 9
62487: PPUSH
62488: LD_INT 0
62490: PPUSH
62491: CALL 64128 0 3
// end ;
62495: GO 62449
62497: POP
62498: POP
// end ;
62499: LD_VAR 0 10
62503: RET
// export function WantHeal ( sci , unit ) ; begin
62504: LD_INT 0
62506: PPUSH
// if GetTaskList ( sci ) > 0 then
62507: LD_VAR 0 1
62511: PPUSH
62512: CALL_OW 437
62516: PUSH
62517: LD_INT 0
62519: GREATER
62520: IFFALSE 62590
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62522: LD_VAR 0 1
62526: PPUSH
62527: CALL_OW 437
62531: PUSH
62532: LD_INT 1
62534: ARRAY
62535: PUSH
62536: LD_INT 1
62538: ARRAY
62539: PUSH
62540: LD_STRING l
62542: EQUAL
62543: PUSH
62544: LD_VAR 0 1
62548: PPUSH
62549: CALL_OW 437
62553: PUSH
62554: LD_INT 1
62556: ARRAY
62557: PUSH
62558: LD_INT 4
62560: ARRAY
62561: PUSH
62562: LD_VAR 0 2
62566: EQUAL
62567: AND
62568: IFFALSE 62580
// result := true else
62570: LD_ADDR_VAR 0 3
62574: PUSH
62575: LD_INT 1
62577: ST_TO_ADDR
62578: GO 62588
// result := false ;
62580: LD_ADDR_VAR 0 3
62584: PUSH
62585: LD_INT 0
62587: ST_TO_ADDR
// end else
62588: GO 62598
// result := false ;
62590: LD_ADDR_VAR 0 3
62594: PUSH
62595: LD_INT 0
62597: ST_TO_ADDR
// end ;
62598: LD_VAR 0 3
62602: RET
// export function HealTarget ( sci ) ; begin
62603: LD_INT 0
62605: PPUSH
// if not sci then
62606: LD_VAR 0 1
62610: NOT
62611: IFFALSE 62615
// exit ;
62613: GO 62680
// result := 0 ;
62615: LD_ADDR_VAR 0 2
62619: PUSH
62620: LD_INT 0
62622: ST_TO_ADDR
// if GetTaskList ( sci ) then
62623: LD_VAR 0 1
62627: PPUSH
62628: CALL_OW 437
62632: IFFALSE 62680
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62634: LD_VAR 0 1
62638: PPUSH
62639: CALL_OW 437
62643: PUSH
62644: LD_INT 1
62646: ARRAY
62647: PUSH
62648: LD_INT 1
62650: ARRAY
62651: PUSH
62652: LD_STRING l
62654: EQUAL
62655: IFFALSE 62680
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62657: LD_ADDR_VAR 0 2
62661: PUSH
62662: LD_VAR 0 1
62666: PPUSH
62667: CALL_OW 437
62671: PUSH
62672: LD_INT 1
62674: ARRAY
62675: PUSH
62676: LD_INT 4
62678: ARRAY
62679: ST_TO_ADDR
// end ;
62680: LD_VAR 0 2
62684: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62685: LD_INT 0
62687: PPUSH
62688: PPUSH
62689: PPUSH
62690: PPUSH
// if not base_units then
62691: LD_VAR 0 1
62695: NOT
62696: IFFALSE 62700
// exit ;
62698: GO 62787
// result := false ;
62700: LD_ADDR_VAR 0 2
62704: PUSH
62705: LD_INT 0
62707: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62708: LD_ADDR_VAR 0 5
62712: PUSH
62713: LD_VAR 0 1
62717: PPUSH
62718: LD_INT 21
62720: PUSH
62721: LD_INT 3
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PPUSH
62728: CALL_OW 72
62732: ST_TO_ADDR
// if not tmp then
62733: LD_VAR 0 5
62737: NOT
62738: IFFALSE 62742
// exit ;
62740: GO 62787
// for i in tmp do
62742: LD_ADDR_VAR 0 3
62746: PUSH
62747: LD_VAR 0 5
62751: PUSH
62752: FOR_IN
62753: IFFALSE 62785
// begin result := EnemyInRange ( i , 22 ) ;
62755: LD_ADDR_VAR 0 2
62759: PUSH
62760: LD_VAR 0 3
62764: PPUSH
62765: LD_INT 22
62767: PPUSH
62768: CALL 60224 0 2
62772: ST_TO_ADDR
// if result then
62773: LD_VAR 0 2
62777: IFFALSE 62783
// exit ;
62779: POP
62780: POP
62781: GO 62787
// end ;
62783: GO 62752
62785: POP
62786: POP
// end ;
62787: LD_VAR 0 2
62791: RET
// export function FilterByTag ( units , tag ) ; begin
62792: LD_INT 0
62794: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
62795: LD_ADDR_VAR 0 3
62799: PUSH
62800: LD_VAR 0 1
62804: PPUSH
62805: LD_INT 120
62807: PUSH
62808: LD_VAR 0 2
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PPUSH
62817: CALL_OW 72
62821: ST_TO_ADDR
// end ;
62822: LD_VAR 0 3
62826: RET
// export function IsDriver ( un ) ; begin
62827: LD_INT 0
62829: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62830: LD_ADDR_VAR 0 2
62834: PUSH
62835: LD_VAR 0 1
62839: PUSH
62840: LD_INT 55
62842: PUSH
62843: EMPTY
62844: LIST
62845: PPUSH
62846: CALL_OW 69
62850: IN
62851: ST_TO_ADDR
// end ;
62852: LD_VAR 0 2
62856: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62857: LD_INT 0
62859: PPUSH
62860: PPUSH
// list := [ ] ;
62861: LD_ADDR_VAR 0 5
62865: PUSH
62866: EMPTY
62867: ST_TO_ADDR
// case d of 0 :
62868: LD_VAR 0 3
62872: PUSH
62873: LD_INT 0
62875: DOUBLE
62876: EQUAL
62877: IFTRUE 62881
62879: GO 63014
62881: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62882: LD_ADDR_VAR 0 5
62886: PUSH
62887: LD_VAR 0 1
62891: PUSH
62892: LD_INT 4
62894: MINUS
62895: PUSH
62896: LD_VAR 0 2
62900: PUSH
62901: LD_INT 4
62903: MINUS
62904: PUSH
62905: LD_INT 2
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: LIST
62912: PUSH
62913: LD_VAR 0 1
62917: PUSH
62918: LD_INT 3
62920: MINUS
62921: PUSH
62922: LD_VAR 0 2
62926: PUSH
62927: LD_INT 1
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: LIST
62934: PUSH
62935: LD_VAR 0 1
62939: PUSH
62940: LD_INT 4
62942: PLUS
62943: PUSH
62944: LD_VAR 0 2
62948: PUSH
62949: LD_INT 4
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: LIST
62956: PUSH
62957: LD_VAR 0 1
62961: PUSH
62962: LD_INT 3
62964: PLUS
62965: PUSH
62966: LD_VAR 0 2
62970: PUSH
62971: LD_INT 3
62973: PLUS
62974: PUSH
62975: LD_INT 5
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: LIST
62982: PUSH
62983: LD_VAR 0 1
62987: PUSH
62988: LD_VAR 0 2
62992: PUSH
62993: LD_INT 4
62995: PLUS
62996: PUSH
62997: LD_INT 0
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: LIST
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: ST_TO_ADDR
// end ; 1 :
63012: GO 63712
63014: LD_INT 1
63016: DOUBLE
63017: EQUAL
63018: IFTRUE 63022
63020: GO 63155
63022: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63023: LD_ADDR_VAR 0 5
63027: PUSH
63028: LD_VAR 0 1
63032: PUSH
63033: LD_VAR 0 2
63037: PUSH
63038: LD_INT 4
63040: MINUS
63041: PUSH
63042: LD_INT 3
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: LIST
63049: PUSH
63050: LD_VAR 0 1
63054: PUSH
63055: LD_INT 3
63057: MINUS
63058: PUSH
63059: LD_VAR 0 2
63063: PUSH
63064: LD_INT 3
63066: MINUS
63067: PUSH
63068: LD_INT 2
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: LIST
63075: PUSH
63076: LD_VAR 0 1
63080: PUSH
63081: LD_INT 4
63083: MINUS
63084: PUSH
63085: LD_VAR 0 2
63089: PUSH
63090: LD_INT 1
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: LIST
63097: PUSH
63098: LD_VAR 0 1
63102: PUSH
63103: LD_VAR 0 2
63107: PUSH
63108: LD_INT 3
63110: PLUS
63111: PUSH
63112: LD_INT 0
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: LIST
63119: PUSH
63120: LD_VAR 0 1
63124: PUSH
63125: LD_INT 4
63127: PLUS
63128: PUSH
63129: LD_VAR 0 2
63133: PUSH
63134: LD_INT 4
63136: PLUS
63137: PUSH
63138: LD_INT 5
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: LIST
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: ST_TO_ADDR
// end ; 2 :
63153: GO 63712
63155: LD_INT 2
63157: DOUBLE
63158: EQUAL
63159: IFTRUE 63163
63161: GO 63292
63163: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63164: LD_ADDR_VAR 0 5
63168: PUSH
63169: LD_VAR 0 1
63173: PUSH
63174: LD_VAR 0 2
63178: PUSH
63179: LD_INT 3
63181: MINUS
63182: PUSH
63183: LD_INT 3
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: LIST
63190: PUSH
63191: LD_VAR 0 1
63195: PUSH
63196: LD_INT 4
63198: PLUS
63199: PUSH
63200: LD_VAR 0 2
63204: PUSH
63205: LD_INT 4
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: LIST
63212: PUSH
63213: LD_VAR 0 1
63217: PUSH
63218: LD_VAR 0 2
63222: PUSH
63223: LD_INT 4
63225: PLUS
63226: PUSH
63227: LD_INT 0
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: LIST
63234: PUSH
63235: LD_VAR 0 1
63239: PUSH
63240: LD_INT 3
63242: MINUS
63243: PUSH
63244: LD_VAR 0 2
63248: PUSH
63249: LD_INT 1
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: LIST
63256: PUSH
63257: LD_VAR 0 1
63261: PUSH
63262: LD_INT 4
63264: MINUS
63265: PUSH
63266: LD_VAR 0 2
63270: PUSH
63271: LD_INT 4
63273: MINUS
63274: PUSH
63275: LD_INT 2
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: LIST
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: ST_TO_ADDR
// end ; 3 :
63290: GO 63712
63292: LD_INT 3
63294: DOUBLE
63295: EQUAL
63296: IFTRUE 63300
63298: GO 63433
63300: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63301: LD_ADDR_VAR 0 5
63305: PUSH
63306: LD_VAR 0 1
63310: PUSH
63311: LD_INT 3
63313: PLUS
63314: PUSH
63315: LD_VAR 0 2
63319: PUSH
63320: LD_INT 4
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: LIST
63327: PUSH
63328: LD_VAR 0 1
63332: PUSH
63333: LD_INT 4
63335: PLUS
63336: PUSH
63337: LD_VAR 0 2
63341: PUSH
63342: LD_INT 4
63344: PLUS
63345: PUSH
63346: LD_INT 5
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: LIST
63353: PUSH
63354: LD_VAR 0 1
63358: PUSH
63359: LD_INT 4
63361: MINUS
63362: PUSH
63363: LD_VAR 0 2
63367: PUSH
63368: LD_INT 1
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: LIST
63375: PUSH
63376: LD_VAR 0 1
63380: PUSH
63381: LD_VAR 0 2
63385: PUSH
63386: LD_INT 4
63388: MINUS
63389: PUSH
63390: LD_INT 3
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: LIST
63397: PUSH
63398: LD_VAR 0 1
63402: PUSH
63403: LD_INT 3
63405: MINUS
63406: PUSH
63407: LD_VAR 0 2
63411: PUSH
63412: LD_INT 3
63414: MINUS
63415: PUSH
63416: LD_INT 2
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: LIST
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: ST_TO_ADDR
// end ; 4 :
63431: GO 63712
63433: LD_INT 4
63435: DOUBLE
63436: EQUAL
63437: IFTRUE 63441
63439: GO 63574
63441: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63442: LD_ADDR_VAR 0 5
63446: PUSH
63447: LD_VAR 0 1
63451: PUSH
63452: LD_VAR 0 2
63456: PUSH
63457: LD_INT 4
63459: PLUS
63460: PUSH
63461: LD_INT 0
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: LIST
63468: PUSH
63469: LD_VAR 0 1
63473: PUSH
63474: LD_INT 3
63476: PLUS
63477: PUSH
63478: LD_VAR 0 2
63482: PUSH
63483: LD_INT 3
63485: PLUS
63486: PUSH
63487: LD_INT 5
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: LIST
63494: PUSH
63495: LD_VAR 0 1
63499: PUSH
63500: LD_INT 4
63502: PLUS
63503: PUSH
63504: LD_VAR 0 2
63508: PUSH
63509: LD_INT 4
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: LIST
63516: PUSH
63517: LD_VAR 0 1
63521: PUSH
63522: LD_VAR 0 2
63526: PUSH
63527: LD_INT 3
63529: MINUS
63530: PUSH
63531: LD_INT 3
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: LIST
63538: PUSH
63539: LD_VAR 0 1
63543: PUSH
63544: LD_INT 4
63546: MINUS
63547: PUSH
63548: LD_VAR 0 2
63552: PUSH
63553: LD_INT 4
63555: MINUS
63556: PUSH
63557: LD_INT 2
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: LIST
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: ST_TO_ADDR
// end ; 5 :
63572: GO 63712
63574: LD_INT 5
63576: DOUBLE
63577: EQUAL
63578: IFTRUE 63582
63580: GO 63711
63582: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63583: LD_ADDR_VAR 0 5
63587: PUSH
63588: LD_VAR 0 1
63592: PUSH
63593: LD_INT 4
63595: MINUS
63596: PUSH
63597: LD_VAR 0 2
63601: PUSH
63602: LD_INT 1
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: LIST
63609: PUSH
63610: LD_VAR 0 1
63614: PUSH
63615: LD_VAR 0 2
63619: PUSH
63620: LD_INT 4
63622: MINUS
63623: PUSH
63624: LD_INT 3
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: LIST
63631: PUSH
63632: LD_VAR 0 1
63636: PUSH
63637: LD_INT 4
63639: PLUS
63640: PUSH
63641: LD_VAR 0 2
63645: PUSH
63646: LD_INT 4
63648: PLUS
63649: PUSH
63650: LD_INT 5
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: LIST
63657: PUSH
63658: LD_VAR 0 1
63662: PUSH
63663: LD_INT 3
63665: PLUS
63666: PUSH
63667: LD_VAR 0 2
63671: PUSH
63672: LD_INT 4
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: LIST
63679: PUSH
63680: LD_VAR 0 1
63684: PUSH
63685: LD_VAR 0 2
63689: PUSH
63690: LD_INT 3
63692: PLUS
63693: PUSH
63694: LD_INT 0
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: LIST
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: ST_TO_ADDR
// end ; end ;
63709: GO 63712
63711: POP
// result := list ;
63712: LD_ADDR_VAR 0 4
63716: PUSH
63717: LD_VAR 0 5
63721: ST_TO_ADDR
// end ;
63722: LD_VAR 0 4
63726: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63727: LD_INT 0
63729: PPUSH
63730: PPUSH
63731: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63732: LD_VAR 0 1
63736: NOT
63737: PUSH
63738: LD_VAR 0 2
63742: PUSH
63743: LD_INT 1
63745: PUSH
63746: LD_INT 2
63748: PUSH
63749: LD_INT 3
63751: PUSH
63752: LD_INT 4
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: IN
63761: NOT
63762: OR
63763: IFFALSE 63767
// exit ;
63765: GO 63850
// tmp := [ ] ;
63767: LD_ADDR_VAR 0 5
63771: PUSH
63772: EMPTY
63773: ST_TO_ADDR
// for i in units do
63774: LD_ADDR_VAR 0 4
63778: PUSH
63779: LD_VAR 0 1
63783: PUSH
63784: FOR_IN
63785: IFFALSE 63819
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
63787: LD_ADDR_VAR 0 5
63791: PUSH
63792: LD_VAR 0 5
63796: PPUSH
63797: LD_VAR 0 4
63801: PPUSH
63802: LD_VAR 0 2
63806: PPUSH
63807: CALL_OW 259
63811: PPUSH
63812: CALL 65223 0 2
63816: ST_TO_ADDR
63817: GO 63784
63819: POP
63820: POP
// if not tmp then
63821: LD_VAR 0 5
63825: NOT
63826: IFFALSE 63830
// exit ;
63828: GO 63850
// result := SortListByListDesc ( units , tmp ) ;
63830: LD_ADDR_VAR 0 3
63834: PUSH
63835: LD_VAR 0 1
63839: PPUSH
63840: LD_VAR 0 5
63844: PPUSH
63845: CALL_OW 77
63849: ST_TO_ADDR
// end ;
63850: LD_VAR 0 3
63854: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63855: LD_INT 0
63857: PPUSH
63858: PPUSH
63859: PPUSH
// result := false ;
63860: LD_ADDR_VAR 0 3
63864: PUSH
63865: LD_INT 0
63867: ST_TO_ADDR
// if not building then
63868: LD_VAR 0 2
63872: NOT
63873: IFFALSE 63877
// exit ;
63875: GO 64015
// x := GetX ( building ) ;
63877: LD_ADDR_VAR 0 4
63881: PUSH
63882: LD_VAR 0 2
63886: PPUSH
63887: CALL_OW 250
63891: ST_TO_ADDR
// y := GetY ( building ) ;
63892: LD_ADDR_VAR 0 5
63896: PUSH
63897: LD_VAR 0 2
63901: PPUSH
63902: CALL_OW 251
63906: ST_TO_ADDR
// if not x or not y then
63907: LD_VAR 0 4
63911: NOT
63912: PUSH
63913: LD_VAR 0 5
63917: NOT
63918: OR
63919: IFFALSE 63923
// exit ;
63921: GO 64015
// if GetTaskList ( unit ) then
63923: LD_VAR 0 1
63927: PPUSH
63928: CALL_OW 437
63932: IFFALSE 64015
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63934: LD_STRING e
63936: PUSH
63937: LD_VAR 0 1
63941: PPUSH
63942: CALL_OW 437
63946: PUSH
63947: LD_INT 1
63949: ARRAY
63950: PUSH
63951: LD_INT 1
63953: ARRAY
63954: EQUAL
63955: PUSH
63956: LD_VAR 0 4
63960: PUSH
63961: LD_VAR 0 1
63965: PPUSH
63966: CALL_OW 437
63970: PUSH
63971: LD_INT 1
63973: ARRAY
63974: PUSH
63975: LD_INT 2
63977: ARRAY
63978: EQUAL
63979: AND
63980: PUSH
63981: LD_VAR 0 5
63985: PUSH
63986: LD_VAR 0 1
63990: PPUSH
63991: CALL_OW 437
63995: PUSH
63996: LD_INT 1
63998: ARRAY
63999: PUSH
64000: LD_INT 3
64002: ARRAY
64003: EQUAL
64004: AND
64005: IFFALSE 64015
// result := true end ;
64007: LD_ADDR_VAR 0 3
64011: PUSH
64012: LD_INT 1
64014: ST_TO_ADDR
// end ;
64015: LD_VAR 0 3
64019: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64020: LD_INT 0
64022: PPUSH
// result := false ;
64023: LD_ADDR_VAR 0 4
64027: PUSH
64028: LD_INT 0
64030: ST_TO_ADDR
// if GetTaskList ( unit ) then
64031: LD_VAR 0 1
64035: PPUSH
64036: CALL_OW 437
64040: IFFALSE 64123
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64042: LD_STRING M
64044: PUSH
64045: LD_VAR 0 1
64049: PPUSH
64050: CALL_OW 437
64054: PUSH
64055: LD_INT 1
64057: ARRAY
64058: PUSH
64059: LD_INT 1
64061: ARRAY
64062: EQUAL
64063: PUSH
64064: LD_VAR 0 2
64068: PUSH
64069: LD_VAR 0 1
64073: PPUSH
64074: CALL_OW 437
64078: PUSH
64079: LD_INT 1
64081: ARRAY
64082: PUSH
64083: LD_INT 2
64085: ARRAY
64086: EQUAL
64087: AND
64088: PUSH
64089: LD_VAR 0 3
64093: PUSH
64094: LD_VAR 0 1
64098: PPUSH
64099: CALL_OW 437
64103: PUSH
64104: LD_INT 1
64106: ARRAY
64107: PUSH
64108: LD_INT 3
64110: ARRAY
64111: EQUAL
64112: AND
64113: IFFALSE 64123
// result := true ;
64115: LD_ADDR_VAR 0 4
64119: PUSH
64120: LD_INT 1
64122: ST_TO_ADDR
// end ; end ;
64123: LD_VAR 0 4
64127: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64128: LD_INT 0
64130: PPUSH
64131: PPUSH
64132: PPUSH
64133: PPUSH
// if not unit or not area then
64134: LD_VAR 0 1
64138: NOT
64139: PUSH
64140: LD_VAR 0 2
64144: NOT
64145: OR
64146: IFFALSE 64150
// exit ;
64148: GO 64326
// tmp := AreaToList ( area , i ) ;
64150: LD_ADDR_VAR 0 6
64154: PUSH
64155: LD_VAR 0 2
64159: PPUSH
64160: LD_VAR 0 5
64164: PPUSH
64165: CALL_OW 517
64169: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64170: LD_ADDR_VAR 0 5
64174: PUSH
64175: DOUBLE
64176: LD_INT 1
64178: DEC
64179: ST_TO_ADDR
64180: LD_VAR 0 6
64184: PUSH
64185: LD_INT 1
64187: ARRAY
64188: PUSH
64189: FOR_TO
64190: IFFALSE 64324
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64192: LD_ADDR_VAR 0 7
64196: PUSH
64197: LD_VAR 0 6
64201: PUSH
64202: LD_INT 1
64204: ARRAY
64205: PUSH
64206: LD_VAR 0 5
64210: ARRAY
64211: PUSH
64212: LD_VAR 0 6
64216: PUSH
64217: LD_INT 2
64219: ARRAY
64220: PUSH
64221: LD_VAR 0 5
64225: ARRAY
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
64231: LD_INT 92
64233: PUSH
64234: LD_VAR 0 7
64238: PUSH
64239: LD_INT 1
64241: ARRAY
64242: PUSH
64243: LD_VAR 0 7
64247: PUSH
64248: LD_INT 2
64250: ARRAY
64251: PUSH
64252: LD_INT 2
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: LIST
64259: LIST
64260: PPUSH
64261: CALL_OW 69
64265: PUSH
64266: LD_INT 0
64268: EQUAL
64269: IFFALSE 64322
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64271: LD_VAR 0 1
64275: PPUSH
64276: LD_VAR 0 7
64280: PUSH
64281: LD_INT 1
64283: ARRAY
64284: PPUSH
64285: LD_VAR 0 7
64289: PUSH
64290: LD_INT 2
64292: ARRAY
64293: PPUSH
64294: LD_VAR 0 3
64298: PPUSH
64299: CALL_OW 48
// result := IsPlaced ( unit ) ;
64303: LD_ADDR_VAR 0 4
64307: PUSH
64308: LD_VAR 0 1
64312: PPUSH
64313: CALL_OW 305
64317: ST_TO_ADDR
// exit ;
64318: POP
64319: POP
64320: GO 64326
// end ; end ;
64322: GO 64189
64324: POP
64325: POP
// end ;
64326: LD_VAR 0 4
64330: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64331: LD_INT 0
64333: PPUSH
64334: PPUSH
64335: PPUSH
// if not side or side > 8 then
64336: LD_VAR 0 1
64340: NOT
64341: PUSH
64342: LD_VAR 0 1
64346: PUSH
64347: LD_INT 8
64349: GREATER
64350: OR
64351: IFFALSE 64355
// exit ;
64353: GO 64542
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64355: LD_ADDR_VAR 0 4
64359: PUSH
64360: LD_INT 22
64362: PUSH
64363: LD_VAR 0 1
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 21
64374: PUSH
64375: LD_INT 3
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PPUSH
64386: CALL_OW 69
64390: ST_TO_ADDR
// if not tmp then
64391: LD_VAR 0 4
64395: NOT
64396: IFFALSE 64400
// exit ;
64398: GO 64542
// enable_addtolog := true ;
64400: LD_ADDR_OWVAR 81
64404: PUSH
64405: LD_INT 1
64407: ST_TO_ADDR
// AddToLog ( [ ) ;
64408: LD_STRING [
64410: PPUSH
64411: CALL_OW 561
// for i in tmp do
64415: LD_ADDR_VAR 0 3
64419: PUSH
64420: LD_VAR 0 4
64424: PUSH
64425: FOR_IN
64426: IFFALSE 64533
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64428: LD_STRING [
64430: PUSH
64431: LD_VAR 0 3
64435: PPUSH
64436: CALL_OW 266
64440: STR
64441: PUSH
64442: LD_STRING , 
64444: STR
64445: PUSH
64446: LD_VAR 0 3
64450: PPUSH
64451: CALL_OW 250
64455: STR
64456: PUSH
64457: LD_STRING , 
64459: STR
64460: PUSH
64461: LD_VAR 0 3
64465: PPUSH
64466: CALL_OW 251
64470: STR
64471: PUSH
64472: LD_STRING , 
64474: STR
64475: PUSH
64476: LD_VAR 0 3
64480: PPUSH
64481: CALL_OW 254
64485: STR
64486: PUSH
64487: LD_STRING , 
64489: STR
64490: PUSH
64491: LD_VAR 0 3
64495: PPUSH
64496: LD_INT 1
64498: PPUSH
64499: CALL_OW 268
64503: STR
64504: PUSH
64505: LD_STRING , 
64507: STR
64508: PUSH
64509: LD_VAR 0 3
64513: PPUSH
64514: LD_INT 2
64516: PPUSH
64517: CALL_OW 268
64521: STR
64522: PUSH
64523: LD_STRING ],
64525: STR
64526: PPUSH
64527: CALL_OW 561
// end ;
64531: GO 64425
64533: POP
64534: POP
// AddToLog ( ]; ) ;
64535: LD_STRING ];
64537: PPUSH
64538: CALL_OW 561
// end ;
64542: LD_VAR 0 2
64546: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64547: LD_INT 0
64549: PPUSH
64550: PPUSH
64551: PPUSH
64552: PPUSH
64553: PPUSH
// if not area or not rate or not max then
64554: LD_VAR 0 1
64558: NOT
64559: PUSH
64560: LD_VAR 0 2
64564: NOT
64565: OR
64566: PUSH
64567: LD_VAR 0 4
64571: NOT
64572: OR
64573: IFFALSE 64577
// exit ;
64575: GO 64766
// while 1 do
64577: LD_INT 1
64579: IFFALSE 64766
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64581: LD_ADDR_VAR 0 9
64585: PUSH
64586: LD_VAR 0 1
64590: PPUSH
64591: LD_INT 1
64593: PPUSH
64594: CALL_OW 287
64598: PUSH
64599: LD_INT 10
64601: MUL
64602: ST_TO_ADDR
// r := rate / 10 ;
64603: LD_ADDR_VAR 0 7
64607: PUSH
64608: LD_VAR 0 2
64612: PUSH
64613: LD_INT 10
64615: DIVREAL
64616: ST_TO_ADDR
// time := 1 1$00 ;
64617: LD_ADDR_VAR 0 8
64621: PUSH
64622: LD_INT 2100
64624: ST_TO_ADDR
// if amount < min then
64625: LD_VAR 0 9
64629: PUSH
64630: LD_VAR 0 3
64634: LESS
64635: IFFALSE 64653
// r := r * 2 else
64637: LD_ADDR_VAR 0 7
64641: PUSH
64642: LD_VAR 0 7
64646: PUSH
64647: LD_INT 2
64649: MUL
64650: ST_TO_ADDR
64651: GO 64679
// if amount > max then
64653: LD_VAR 0 9
64657: PUSH
64658: LD_VAR 0 4
64662: GREATER
64663: IFFALSE 64679
// r := r / 2 ;
64665: LD_ADDR_VAR 0 7
64669: PUSH
64670: LD_VAR 0 7
64674: PUSH
64675: LD_INT 2
64677: DIVREAL
64678: ST_TO_ADDR
// time := time / r ;
64679: LD_ADDR_VAR 0 8
64683: PUSH
64684: LD_VAR 0 8
64688: PUSH
64689: LD_VAR 0 7
64693: DIVREAL
64694: ST_TO_ADDR
// if time < 0 then
64695: LD_VAR 0 8
64699: PUSH
64700: LD_INT 0
64702: LESS
64703: IFFALSE 64720
// time := time * - 1 ;
64705: LD_ADDR_VAR 0 8
64709: PUSH
64710: LD_VAR 0 8
64714: PUSH
64715: LD_INT 1
64717: NEG
64718: MUL
64719: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64720: LD_VAR 0 8
64724: PUSH
64725: LD_INT 35
64727: PPUSH
64728: LD_INT 875
64730: PPUSH
64731: CALL_OW 12
64735: PLUS
64736: PPUSH
64737: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64741: LD_INT 1
64743: PPUSH
64744: LD_INT 5
64746: PPUSH
64747: CALL_OW 12
64751: PPUSH
64752: LD_VAR 0 1
64756: PPUSH
64757: LD_INT 1
64759: PPUSH
64760: CALL_OW 55
// end ;
64764: GO 64577
// end ;
64766: LD_VAR 0 5
64770: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64771: LD_INT 0
64773: PPUSH
64774: PPUSH
64775: PPUSH
64776: PPUSH
64777: PPUSH
64778: PPUSH
64779: PPUSH
64780: PPUSH
// if not turrets or not factories then
64781: LD_VAR 0 1
64785: NOT
64786: PUSH
64787: LD_VAR 0 2
64791: NOT
64792: OR
64793: IFFALSE 64797
// exit ;
64795: GO 65104
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64797: LD_ADDR_VAR 0 10
64801: PUSH
64802: LD_INT 5
64804: PUSH
64805: LD_INT 6
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 2
64814: PUSH
64815: LD_INT 4
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: LD_INT 3
64824: PUSH
64825: LD_INT 5
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 24
64839: PUSH
64840: LD_INT 25
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 23
64849: PUSH
64850: LD_INT 27
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 42
64863: PUSH
64864: LD_INT 43
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 44
64873: PUSH
64874: LD_INT 46
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 45
64883: PUSH
64884: LD_INT 47
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: LIST
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: LIST
64900: ST_TO_ADDR
// result := [ ] ;
64901: LD_ADDR_VAR 0 3
64905: PUSH
64906: EMPTY
64907: ST_TO_ADDR
// for i in turrets do
64908: LD_ADDR_VAR 0 4
64912: PUSH
64913: LD_VAR 0 1
64917: PUSH
64918: FOR_IN
64919: IFFALSE 65102
// begin nat := GetNation ( i ) ;
64921: LD_ADDR_VAR 0 7
64925: PUSH
64926: LD_VAR 0 4
64930: PPUSH
64931: CALL_OW 248
64935: ST_TO_ADDR
// weapon := 0 ;
64936: LD_ADDR_VAR 0 8
64940: PUSH
64941: LD_INT 0
64943: ST_TO_ADDR
// if not nat then
64944: LD_VAR 0 7
64948: NOT
64949: IFFALSE 64953
// continue ;
64951: GO 64918
// for j in list [ nat ] do
64953: LD_ADDR_VAR 0 5
64957: PUSH
64958: LD_VAR 0 10
64962: PUSH
64963: LD_VAR 0 7
64967: ARRAY
64968: PUSH
64969: FOR_IN
64970: IFFALSE 65011
// if GetBWeapon ( i ) = j [ 1 ] then
64972: LD_VAR 0 4
64976: PPUSH
64977: CALL_OW 269
64981: PUSH
64982: LD_VAR 0 5
64986: PUSH
64987: LD_INT 1
64989: ARRAY
64990: EQUAL
64991: IFFALSE 65009
// begin weapon := j [ 2 ] ;
64993: LD_ADDR_VAR 0 8
64997: PUSH
64998: LD_VAR 0 5
65002: PUSH
65003: LD_INT 2
65005: ARRAY
65006: ST_TO_ADDR
// break ;
65007: GO 65011
// end ;
65009: GO 64969
65011: POP
65012: POP
// if not weapon then
65013: LD_VAR 0 8
65017: NOT
65018: IFFALSE 65022
// continue ;
65020: GO 64918
// for k in factories do
65022: LD_ADDR_VAR 0 6
65026: PUSH
65027: LD_VAR 0 2
65031: PUSH
65032: FOR_IN
65033: IFFALSE 65098
// begin weapons := AvailableWeaponList ( k ) ;
65035: LD_ADDR_VAR 0 9
65039: PUSH
65040: LD_VAR 0 6
65044: PPUSH
65045: CALL_OW 478
65049: ST_TO_ADDR
// if not weapons then
65050: LD_VAR 0 9
65054: NOT
65055: IFFALSE 65059
// continue ;
65057: GO 65032
// if weapon in weapons then
65059: LD_VAR 0 8
65063: PUSH
65064: LD_VAR 0 9
65068: IN
65069: IFFALSE 65096
// begin result := [ i , weapon ] ;
65071: LD_ADDR_VAR 0 3
65075: PUSH
65076: LD_VAR 0 4
65080: PUSH
65081: LD_VAR 0 8
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: ST_TO_ADDR
// exit ;
65090: POP
65091: POP
65092: POP
65093: POP
65094: GO 65104
// end ; end ;
65096: GO 65032
65098: POP
65099: POP
// end ;
65100: GO 64918
65102: POP
65103: POP
// end ;
65104: LD_VAR 0 3
65108: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65109: LD_INT 0
65111: PPUSH
// if not side or side > 8 then
65112: LD_VAR 0 3
65116: NOT
65117: PUSH
65118: LD_VAR 0 3
65122: PUSH
65123: LD_INT 8
65125: GREATER
65126: OR
65127: IFFALSE 65131
// exit ;
65129: GO 65190
// if not range then
65131: LD_VAR 0 4
65135: NOT
65136: IFFALSE 65147
// range := - 12 ;
65138: LD_ADDR_VAR 0 4
65142: PUSH
65143: LD_INT 12
65145: NEG
65146: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65147: LD_VAR 0 1
65151: PPUSH
65152: LD_VAR 0 2
65156: PPUSH
65157: LD_VAR 0 3
65161: PPUSH
65162: LD_VAR 0 4
65166: PPUSH
65167: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65171: LD_VAR 0 1
65175: PPUSH
65176: LD_VAR 0 2
65180: PPUSH
65181: LD_VAR 0 3
65185: PPUSH
65186: CALL_OW 331
// end ;
65190: LD_VAR 0 5
65194: RET
// export function Video ( mode ) ; begin
65195: LD_INT 0
65197: PPUSH
// ingame_video = mode ;
65198: LD_ADDR_OWVAR 52
65202: PUSH
65203: LD_VAR 0 1
65207: ST_TO_ADDR
// interface_hidden = mode ;
65208: LD_ADDR_OWVAR 54
65212: PUSH
65213: LD_VAR 0 1
65217: ST_TO_ADDR
// end ;
65218: LD_VAR 0 2
65222: RET
// export function Join ( array , element ) ; begin
65223: LD_INT 0
65225: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65226: LD_ADDR_VAR 0 3
65230: PUSH
65231: LD_VAR 0 1
65235: PPUSH
65236: LD_VAR 0 1
65240: PUSH
65241: LD_INT 1
65243: PLUS
65244: PPUSH
65245: LD_VAR 0 2
65249: PPUSH
65250: CALL_OW 1
65254: ST_TO_ADDR
// end ;
65255: LD_VAR 0 3
65259: RET
// export function JoinUnion ( array , element ) ; begin
65260: LD_INT 0
65262: PPUSH
// result := array union element ;
65263: LD_ADDR_VAR 0 3
65267: PUSH
65268: LD_VAR 0 1
65272: PUSH
65273: LD_VAR 0 2
65277: UNION
65278: ST_TO_ADDR
// end ;
65279: LD_VAR 0 3
65283: RET
// export function GetBehemoths ( side ) ; begin
65284: LD_INT 0
65286: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
65287: LD_ADDR_VAR 0 2
65291: PUSH
65292: LD_INT 22
65294: PUSH
65295: LD_VAR 0 1
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 31
65306: PUSH
65307: LD_INT 25
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PPUSH
65318: CALL_OW 69
65322: ST_TO_ADDR
// end ;
65323: LD_VAR 0 2
65327: RET
// export function Shuffle ( array ) ; var i , index ; begin
65328: LD_INT 0
65330: PPUSH
65331: PPUSH
65332: PPUSH
// result := [ ] ;
65333: LD_ADDR_VAR 0 2
65337: PUSH
65338: EMPTY
65339: ST_TO_ADDR
// if not array then
65340: LD_VAR 0 1
65344: NOT
65345: IFFALSE 65349
// exit ;
65347: GO 65448
// Randomize ;
65349: CALL_OW 10
// for i = array downto 1 do
65353: LD_ADDR_VAR 0 3
65357: PUSH
65358: DOUBLE
65359: LD_VAR 0 1
65363: INC
65364: ST_TO_ADDR
65365: LD_INT 1
65367: PUSH
65368: FOR_DOWNTO
65369: IFFALSE 65446
// begin index := rand ( 1 , array ) ;
65371: LD_ADDR_VAR 0 4
65375: PUSH
65376: LD_INT 1
65378: PPUSH
65379: LD_VAR 0 1
65383: PPUSH
65384: CALL_OW 12
65388: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65389: LD_ADDR_VAR 0 2
65393: PUSH
65394: LD_VAR 0 2
65398: PPUSH
65399: LD_VAR 0 2
65403: PUSH
65404: LD_INT 1
65406: PLUS
65407: PPUSH
65408: LD_VAR 0 1
65412: PUSH
65413: LD_VAR 0 4
65417: ARRAY
65418: PPUSH
65419: CALL_OW 2
65423: ST_TO_ADDR
// array := Delete ( array , index ) ;
65424: LD_ADDR_VAR 0 1
65428: PUSH
65429: LD_VAR 0 1
65433: PPUSH
65434: LD_VAR 0 4
65438: PPUSH
65439: CALL_OW 3
65443: ST_TO_ADDR
// end ;
65444: GO 65368
65446: POP
65447: POP
// end ;
65448: LD_VAR 0 2
65452: RET
// export function GetBaseMaterials ( base ) ; begin
65453: LD_INT 0
65455: PPUSH
// result := [ 0 , 0 , 0 ] ;
65456: LD_ADDR_VAR 0 2
65460: PUSH
65461: LD_INT 0
65463: PUSH
65464: LD_INT 0
65466: PUSH
65467: LD_INT 0
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: LIST
65474: ST_TO_ADDR
// if not base then
65475: LD_VAR 0 1
65479: NOT
65480: IFFALSE 65484
// exit ;
65482: GO 65533
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65484: LD_ADDR_VAR 0 2
65488: PUSH
65489: LD_VAR 0 1
65493: PPUSH
65494: LD_INT 1
65496: PPUSH
65497: CALL_OW 275
65501: PUSH
65502: LD_VAR 0 1
65506: PPUSH
65507: LD_INT 2
65509: PPUSH
65510: CALL_OW 275
65514: PUSH
65515: LD_VAR 0 1
65519: PPUSH
65520: LD_INT 3
65522: PPUSH
65523: CALL_OW 275
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: LIST
65532: ST_TO_ADDR
// end ;
65533: LD_VAR 0 2
65537: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65538: LD_INT 0
65540: PPUSH
65541: PPUSH
// result := array ;
65542: LD_ADDR_VAR 0 3
65546: PUSH
65547: LD_VAR 0 1
65551: ST_TO_ADDR
// if size >= result then
65552: LD_VAR 0 2
65556: PUSH
65557: LD_VAR 0 3
65561: GREATEREQUAL
65562: IFFALSE 65566
// exit ;
65564: GO 65616
// if size then
65566: LD_VAR 0 2
65570: IFFALSE 65616
// for i := array downto size do
65572: LD_ADDR_VAR 0 4
65576: PUSH
65577: DOUBLE
65578: LD_VAR 0 1
65582: INC
65583: ST_TO_ADDR
65584: LD_VAR 0 2
65588: PUSH
65589: FOR_DOWNTO
65590: IFFALSE 65614
// result := Delete ( result , result ) ;
65592: LD_ADDR_VAR 0 3
65596: PUSH
65597: LD_VAR 0 3
65601: PPUSH
65602: LD_VAR 0 3
65606: PPUSH
65607: CALL_OW 3
65611: ST_TO_ADDR
65612: GO 65589
65614: POP
65615: POP
// end ;
65616: LD_VAR 0 3
65620: RET
// export function ComExit ( unit ) ; var tmp ; begin
65621: LD_INT 0
65623: PPUSH
65624: PPUSH
// if not IsInUnit ( unit ) then
65625: LD_VAR 0 1
65629: PPUSH
65630: CALL_OW 310
65634: NOT
65635: IFFALSE 65639
// exit ;
65637: GO 65699
// tmp := IsInUnit ( unit ) ;
65639: LD_ADDR_VAR 0 3
65643: PUSH
65644: LD_VAR 0 1
65648: PPUSH
65649: CALL_OW 310
65653: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65654: LD_VAR 0 3
65658: PPUSH
65659: CALL_OW 247
65663: PUSH
65664: LD_INT 2
65666: EQUAL
65667: IFFALSE 65680
// ComExitVehicle ( unit ) else
65669: LD_VAR 0 1
65673: PPUSH
65674: CALL_OW 121
65678: GO 65689
// ComExitBuilding ( unit ) ;
65680: LD_VAR 0 1
65684: PPUSH
65685: CALL_OW 122
// result := tmp ;
65689: LD_ADDR_VAR 0 2
65693: PUSH
65694: LD_VAR 0 3
65698: ST_TO_ADDR
// end ;
65699: LD_VAR 0 2
65703: RET
// export function ComExitAll ( units ) ; var i ; begin
65704: LD_INT 0
65706: PPUSH
65707: PPUSH
// if not units then
65708: LD_VAR 0 1
65712: NOT
65713: IFFALSE 65717
// exit ;
65715: GO 65743
// for i in units do
65717: LD_ADDR_VAR 0 3
65721: PUSH
65722: LD_VAR 0 1
65726: PUSH
65727: FOR_IN
65728: IFFALSE 65741
// ComExit ( i ) ;
65730: LD_VAR 0 3
65734: PPUSH
65735: CALL 65621 0 1
65739: GO 65727
65741: POP
65742: POP
// end ;
65743: LD_VAR 0 2
65747: RET
// export function ResetHc ; begin
65748: LD_INT 0
65750: PPUSH
// InitHc ;
65751: CALL_OW 19
// hc_importance := 0 ;
65755: LD_ADDR_OWVAR 32
65759: PUSH
65760: LD_INT 0
65762: ST_TO_ADDR
// end ;
65763: LD_VAR 0 1
65767: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65768: LD_INT 0
65770: PPUSH
65771: PPUSH
65772: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65773: LD_ADDR_VAR 0 6
65777: PUSH
65778: LD_VAR 0 1
65782: PUSH
65783: LD_VAR 0 3
65787: PLUS
65788: PUSH
65789: LD_INT 2
65791: DIV
65792: ST_TO_ADDR
// if _x < 0 then
65793: LD_VAR 0 6
65797: PUSH
65798: LD_INT 0
65800: LESS
65801: IFFALSE 65818
// _x := _x * - 1 ;
65803: LD_ADDR_VAR 0 6
65807: PUSH
65808: LD_VAR 0 6
65812: PUSH
65813: LD_INT 1
65815: NEG
65816: MUL
65817: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65818: LD_ADDR_VAR 0 7
65822: PUSH
65823: LD_VAR 0 2
65827: PUSH
65828: LD_VAR 0 4
65832: PLUS
65833: PUSH
65834: LD_INT 2
65836: DIV
65837: ST_TO_ADDR
// if _y < 0 then
65838: LD_VAR 0 7
65842: PUSH
65843: LD_INT 0
65845: LESS
65846: IFFALSE 65863
// _y := _y * - 1 ;
65848: LD_ADDR_VAR 0 7
65852: PUSH
65853: LD_VAR 0 7
65857: PUSH
65858: LD_INT 1
65860: NEG
65861: MUL
65862: ST_TO_ADDR
// result := [ _x , _y ] ;
65863: LD_ADDR_VAR 0 5
65867: PUSH
65868: LD_VAR 0 6
65872: PUSH
65873: LD_VAR 0 7
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: ST_TO_ADDR
// end ;
65882: LD_VAR 0 5
65886: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65887: LD_INT 0
65889: PPUSH
65890: PPUSH
65891: PPUSH
65892: PPUSH
// task := GetTaskList ( unit ) ;
65893: LD_ADDR_VAR 0 7
65897: PUSH
65898: LD_VAR 0 1
65902: PPUSH
65903: CALL_OW 437
65907: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65908: LD_VAR 0 7
65912: NOT
65913: PUSH
65914: LD_VAR 0 1
65918: PPUSH
65919: LD_VAR 0 2
65923: PPUSH
65924: CALL_OW 308
65928: NOT
65929: AND
65930: IFFALSE 65934
// exit ;
65932: GO 66052
// if IsInArea ( unit , area ) then
65934: LD_VAR 0 1
65938: PPUSH
65939: LD_VAR 0 2
65943: PPUSH
65944: CALL_OW 308
65948: IFFALSE 65966
// begin ComMoveToArea ( unit , goAway ) ;
65950: LD_VAR 0 1
65954: PPUSH
65955: LD_VAR 0 3
65959: PPUSH
65960: CALL_OW 113
// exit ;
65964: GO 66052
// end ; if task [ 1 ] [ 1 ] <> M then
65966: LD_VAR 0 7
65970: PUSH
65971: LD_INT 1
65973: ARRAY
65974: PUSH
65975: LD_INT 1
65977: ARRAY
65978: PUSH
65979: LD_STRING M
65981: NONEQUAL
65982: IFFALSE 65986
// exit ;
65984: GO 66052
// x := task [ 1 ] [ 2 ] ;
65986: LD_ADDR_VAR 0 5
65990: PUSH
65991: LD_VAR 0 7
65995: PUSH
65996: LD_INT 1
65998: ARRAY
65999: PUSH
66000: LD_INT 2
66002: ARRAY
66003: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66004: LD_ADDR_VAR 0 6
66008: PUSH
66009: LD_VAR 0 7
66013: PUSH
66014: LD_INT 1
66016: ARRAY
66017: PUSH
66018: LD_INT 3
66020: ARRAY
66021: ST_TO_ADDR
// if InArea ( x , y , area ) then
66022: LD_VAR 0 5
66026: PPUSH
66027: LD_VAR 0 6
66031: PPUSH
66032: LD_VAR 0 2
66036: PPUSH
66037: CALL_OW 309
66041: IFFALSE 66052
// ComStop ( unit ) ;
66043: LD_VAR 0 1
66047: PPUSH
66048: CALL_OW 141
// end ;
66052: LD_VAR 0 4
66056: RET
// export function Abs ( value ) ; begin
66057: LD_INT 0
66059: PPUSH
// result := value ;
66060: LD_ADDR_VAR 0 2
66064: PUSH
66065: LD_VAR 0 1
66069: ST_TO_ADDR
// if value < 0 then
66070: LD_VAR 0 1
66074: PUSH
66075: LD_INT 0
66077: LESS
66078: IFFALSE 66095
// result := value * - 1 ;
66080: LD_ADDR_VAR 0 2
66084: PUSH
66085: LD_VAR 0 1
66089: PUSH
66090: LD_INT 1
66092: NEG
66093: MUL
66094: ST_TO_ADDR
// end ;
66095: LD_VAR 0 2
66099: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66100: LD_INT 0
66102: PPUSH
66103: PPUSH
66104: PPUSH
66105: PPUSH
66106: PPUSH
66107: PPUSH
66108: PPUSH
66109: PPUSH
// if not unit or not building then
66110: LD_VAR 0 1
66114: NOT
66115: PUSH
66116: LD_VAR 0 2
66120: NOT
66121: OR
66122: IFFALSE 66126
// exit ;
66124: GO 66352
// x := GetX ( building ) ;
66126: LD_ADDR_VAR 0 4
66130: PUSH
66131: LD_VAR 0 2
66135: PPUSH
66136: CALL_OW 250
66140: ST_TO_ADDR
// y := GetY ( building ) ;
66141: LD_ADDR_VAR 0 6
66145: PUSH
66146: LD_VAR 0 2
66150: PPUSH
66151: CALL_OW 251
66155: ST_TO_ADDR
// d := GetDir ( building ) ;
66156: LD_ADDR_VAR 0 8
66160: PUSH
66161: LD_VAR 0 2
66165: PPUSH
66166: CALL_OW 254
66170: ST_TO_ADDR
// r := 4 ;
66171: LD_ADDR_VAR 0 9
66175: PUSH
66176: LD_INT 4
66178: ST_TO_ADDR
// for i := 1 to 5 do
66179: LD_ADDR_VAR 0 10
66183: PUSH
66184: DOUBLE
66185: LD_INT 1
66187: DEC
66188: ST_TO_ADDR
66189: LD_INT 5
66191: PUSH
66192: FOR_TO
66193: IFFALSE 66350
// begin _x := ShiftX ( x , d , r + i ) ;
66195: LD_ADDR_VAR 0 5
66199: PUSH
66200: LD_VAR 0 4
66204: PPUSH
66205: LD_VAR 0 8
66209: PPUSH
66210: LD_VAR 0 9
66214: PUSH
66215: LD_VAR 0 10
66219: PLUS
66220: PPUSH
66221: CALL_OW 272
66225: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66226: LD_ADDR_VAR 0 7
66230: PUSH
66231: LD_VAR 0 6
66235: PPUSH
66236: LD_VAR 0 8
66240: PPUSH
66241: LD_VAR 0 9
66245: PUSH
66246: LD_VAR 0 10
66250: PLUS
66251: PPUSH
66252: CALL_OW 273
66256: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66257: LD_VAR 0 5
66261: PPUSH
66262: LD_VAR 0 7
66266: PPUSH
66267: CALL_OW 488
66271: PUSH
66272: LD_VAR 0 5
66276: PPUSH
66277: LD_VAR 0 7
66281: PPUSH
66282: CALL_OW 428
66286: PPUSH
66287: CALL_OW 247
66291: PUSH
66292: LD_INT 3
66294: PUSH
66295: LD_INT 2
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: IN
66302: NOT
66303: AND
66304: IFFALSE 66348
// begin ComMoveXY ( unit , _x , _y ) ;
66306: LD_VAR 0 1
66310: PPUSH
66311: LD_VAR 0 5
66315: PPUSH
66316: LD_VAR 0 7
66320: PPUSH
66321: CALL_OW 111
// result := [ _x , _y ] ;
66325: LD_ADDR_VAR 0 3
66329: PUSH
66330: LD_VAR 0 5
66334: PUSH
66335: LD_VAR 0 7
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: ST_TO_ADDR
// exit ;
66344: POP
66345: POP
66346: GO 66352
// end ; end ;
66348: GO 66192
66350: POP
66351: POP
// end ;
66352: LD_VAR 0 3
66356: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66357: LD_INT 0
66359: PPUSH
66360: PPUSH
66361: PPUSH
// result := 0 ;
66362: LD_ADDR_VAR 0 3
66366: PUSH
66367: LD_INT 0
66369: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66370: LD_VAR 0 1
66374: PUSH
66375: LD_INT 0
66377: LESS
66378: PUSH
66379: LD_VAR 0 1
66383: PUSH
66384: LD_INT 8
66386: GREATER
66387: OR
66388: PUSH
66389: LD_VAR 0 2
66393: PUSH
66394: LD_INT 0
66396: LESS
66397: OR
66398: PUSH
66399: LD_VAR 0 2
66403: PUSH
66404: LD_INT 8
66406: GREATER
66407: OR
66408: IFFALSE 66412
// exit ;
66410: GO 66487
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66412: LD_ADDR_VAR 0 4
66416: PUSH
66417: LD_INT 22
66419: PUSH
66420: LD_VAR 0 2
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PPUSH
66429: CALL_OW 69
66433: PUSH
66434: FOR_IN
66435: IFFALSE 66485
// begin un := UnitShoot ( i ) ;
66437: LD_ADDR_VAR 0 5
66441: PUSH
66442: LD_VAR 0 4
66446: PPUSH
66447: CALL_OW 504
66451: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66452: LD_VAR 0 5
66456: PPUSH
66457: CALL_OW 255
66461: PUSH
66462: LD_VAR 0 1
66466: EQUAL
66467: IFFALSE 66483
// begin result := un ;
66469: LD_ADDR_VAR 0 3
66473: PUSH
66474: LD_VAR 0 5
66478: ST_TO_ADDR
// exit ;
66479: POP
66480: POP
66481: GO 66487
// end ; end ;
66483: GO 66434
66485: POP
66486: POP
// end ;
66487: LD_VAR 0 3
66491: RET
// export function GetCargoBay ( units ) ; begin
66492: LD_INT 0
66494: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66495: LD_ADDR_VAR 0 2
66499: PUSH
66500: LD_VAR 0 1
66504: PPUSH
66505: LD_INT 2
66507: PUSH
66508: LD_INT 34
66510: PUSH
66511: LD_INT 12
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 34
66520: PUSH
66521: LD_INT 51
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_INT 34
66530: PUSH
66531: LD_INT 32
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: LD_INT 34
66540: PUSH
66541: LD_INT 89
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: LIST
66552: LIST
66553: LIST
66554: PPUSH
66555: CALL_OW 72
66559: ST_TO_ADDR
// end ;
66560: LD_VAR 0 2
66564: RET
// export function Negate ( value ) ; begin
66565: LD_INT 0
66567: PPUSH
// result := not value ;
66568: LD_ADDR_VAR 0 2
66572: PUSH
66573: LD_VAR 0 1
66577: NOT
66578: ST_TO_ADDR
// end ;
66579: LD_VAR 0 2
66583: RET
// export function Inc ( value ) ; begin
66584: LD_INT 0
66586: PPUSH
// result := value + 1 ;
66587: LD_ADDR_VAR 0 2
66591: PUSH
66592: LD_VAR 0 1
66596: PUSH
66597: LD_INT 1
66599: PLUS
66600: ST_TO_ADDR
// end ;
66601: LD_VAR 0 2
66605: RET
// export function Dec ( value ) ; begin
66606: LD_INT 0
66608: PPUSH
// result := value - 1 ;
66609: LD_ADDR_VAR 0 2
66613: PUSH
66614: LD_VAR 0 1
66618: PUSH
66619: LD_INT 1
66621: MINUS
66622: ST_TO_ADDR
// end ;
66623: LD_VAR 0 2
66627: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66628: LD_INT 0
66630: PPUSH
66631: PPUSH
66632: PPUSH
66633: PPUSH
66634: PPUSH
66635: PPUSH
66636: PPUSH
66637: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66638: LD_VAR 0 1
66642: PPUSH
66643: LD_VAR 0 2
66647: PPUSH
66648: CALL_OW 488
66652: NOT
66653: PUSH
66654: LD_VAR 0 3
66658: PPUSH
66659: LD_VAR 0 4
66663: PPUSH
66664: CALL_OW 488
66668: NOT
66669: OR
66670: IFFALSE 66683
// begin result := - 1 ;
66672: LD_ADDR_VAR 0 5
66676: PUSH
66677: LD_INT 1
66679: NEG
66680: ST_TO_ADDR
// exit ;
66681: GO 66918
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66683: LD_ADDR_VAR 0 12
66687: PUSH
66688: LD_VAR 0 1
66692: PPUSH
66693: LD_VAR 0 2
66697: PPUSH
66698: LD_VAR 0 3
66702: PPUSH
66703: LD_VAR 0 4
66707: PPUSH
66708: CALL 65768 0 4
66712: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66713: LD_ADDR_VAR 0 11
66717: PUSH
66718: LD_VAR 0 1
66722: PPUSH
66723: LD_VAR 0 2
66727: PPUSH
66728: LD_VAR 0 12
66732: PUSH
66733: LD_INT 1
66735: ARRAY
66736: PPUSH
66737: LD_VAR 0 12
66741: PUSH
66742: LD_INT 2
66744: ARRAY
66745: PPUSH
66746: CALL_OW 298
66750: ST_TO_ADDR
// distance := 9999 ;
66751: LD_ADDR_VAR 0 10
66755: PUSH
66756: LD_INT 9999
66758: ST_TO_ADDR
// for i := 0 to 5 do
66759: LD_ADDR_VAR 0 6
66763: PUSH
66764: DOUBLE
66765: LD_INT 0
66767: DEC
66768: ST_TO_ADDR
66769: LD_INT 5
66771: PUSH
66772: FOR_TO
66773: IFFALSE 66916
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66775: LD_ADDR_VAR 0 7
66779: PUSH
66780: LD_VAR 0 1
66784: PPUSH
66785: LD_VAR 0 6
66789: PPUSH
66790: LD_VAR 0 11
66794: PPUSH
66795: CALL_OW 272
66799: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66800: LD_ADDR_VAR 0 8
66804: PUSH
66805: LD_VAR 0 2
66809: PPUSH
66810: LD_VAR 0 6
66814: PPUSH
66815: LD_VAR 0 11
66819: PPUSH
66820: CALL_OW 273
66824: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66825: LD_VAR 0 7
66829: PPUSH
66830: LD_VAR 0 8
66834: PPUSH
66835: CALL_OW 488
66839: NOT
66840: IFFALSE 66844
// continue ;
66842: GO 66772
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66844: LD_ADDR_VAR 0 9
66848: PUSH
66849: LD_VAR 0 12
66853: PUSH
66854: LD_INT 1
66856: ARRAY
66857: PPUSH
66858: LD_VAR 0 12
66862: PUSH
66863: LD_INT 2
66865: ARRAY
66866: PPUSH
66867: LD_VAR 0 7
66871: PPUSH
66872: LD_VAR 0 8
66876: PPUSH
66877: CALL_OW 298
66881: ST_TO_ADDR
// if tmp < distance then
66882: LD_VAR 0 9
66886: PUSH
66887: LD_VAR 0 10
66891: LESS
66892: IFFALSE 66914
// begin result := i ;
66894: LD_ADDR_VAR 0 5
66898: PUSH
66899: LD_VAR 0 6
66903: ST_TO_ADDR
// distance := tmp ;
66904: LD_ADDR_VAR 0 10
66908: PUSH
66909: LD_VAR 0 9
66913: ST_TO_ADDR
// end ; end ;
66914: GO 66772
66916: POP
66917: POP
// end ;
66918: LD_VAR 0 5
66922: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66923: LD_INT 0
66925: PPUSH
66926: PPUSH
// if not driver or not IsInUnit ( driver ) then
66927: LD_VAR 0 1
66931: NOT
66932: PUSH
66933: LD_VAR 0 1
66937: PPUSH
66938: CALL_OW 310
66942: NOT
66943: OR
66944: IFFALSE 66948
// exit ;
66946: GO 67038
// vehicle := IsInUnit ( driver ) ;
66948: LD_ADDR_VAR 0 3
66952: PUSH
66953: LD_VAR 0 1
66957: PPUSH
66958: CALL_OW 310
66962: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66963: LD_VAR 0 1
66967: PPUSH
66968: LD_STRING \
66970: PUSH
66971: LD_INT 0
66973: PUSH
66974: LD_INT 0
66976: PUSH
66977: LD_INT 0
66979: PUSH
66980: LD_INT 0
66982: PUSH
66983: LD_INT 0
66985: PUSH
66986: LD_INT 0
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: LIST
66993: LIST
66994: LIST
66995: LIST
66996: LIST
66997: PUSH
66998: LD_STRING E
67000: PUSH
67001: LD_INT 0
67003: PUSH
67004: LD_INT 0
67006: PUSH
67007: LD_VAR 0 3
67011: PUSH
67012: LD_INT 0
67014: PUSH
67015: LD_INT 0
67017: PUSH
67018: LD_INT 0
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: LIST
67025: LIST
67026: LIST
67027: LIST
67028: LIST
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: PPUSH
67034: CALL_OW 446
// end ;
67038: LD_VAR 0 2
67042: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67043: LD_INT 0
67045: PPUSH
67046: PPUSH
// if not driver or not IsInUnit ( driver ) then
67047: LD_VAR 0 1
67051: NOT
67052: PUSH
67053: LD_VAR 0 1
67057: PPUSH
67058: CALL_OW 310
67062: NOT
67063: OR
67064: IFFALSE 67068
// exit ;
67066: GO 67158
// vehicle := IsInUnit ( driver ) ;
67068: LD_ADDR_VAR 0 3
67072: PUSH
67073: LD_VAR 0 1
67077: PPUSH
67078: CALL_OW 310
67082: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67083: LD_VAR 0 1
67087: PPUSH
67088: LD_STRING \
67090: PUSH
67091: LD_INT 0
67093: PUSH
67094: LD_INT 0
67096: PUSH
67097: LD_INT 0
67099: PUSH
67100: LD_INT 0
67102: PUSH
67103: LD_INT 0
67105: PUSH
67106: LD_INT 0
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: LIST
67113: LIST
67114: LIST
67115: LIST
67116: LIST
67117: PUSH
67118: LD_STRING E
67120: PUSH
67121: LD_INT 0
67123: PUSH
67124: LD_INT 0
67126: PUSH
67127: LD_VAR 0 3
67131: PUSH
67132: LD_INT 0
67134: PUSH
67135: LD_INT 0
67137: PUSH
67138: LD_INT 0
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: LIST
67145: LIST
67146: LIST
67147: LIST
67148: LIST
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PPUSH
67154: CALL_OW 447
// end ;
67158: LD_VAR 0 2
67162: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67163: LD_INT 0
67165: PPUSH
67166: PPUSH
67167: PPUSH
// tmp := [ ] ;
67168: LD_ADDR_VAR 0 5
67172: PUSH
67173: EMPTY
67174: ST_TO_ADDR
// for i in units do
67175: LD_ADDR_VAR 0 4
67179: PUSH
67180: LD_VAR 0 1
67184: PUSH
67185: FOR_IN
67186: IFFALSE 67224
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67188: LD_ADDR_VAR 0 5
67192: PUSH
67193: LD_VAR 0 5
67197: PPUSH
67198: LD_VAR 0 5
67202: PUSH
67203: LD_INT 1
67205: PLUS
67206: PPUSH
67207: LD_VAR 0 4
67211: PPUSH
67212: CALL_OW 256
67216: PPUSH
67217: CALL_OW 2
67221: ST_TO_ADDR
67222: GO 67185
67224: POP
67225: POP
// if not tmp then
67226: LD_VAR 0 5
67230: NOT
67231: IFFALSE 67235
// exit ;
67233: GO 67283
// if asc then
67235: LD_VAR 0 2
67239: IFFALSE 67263
// result := SortListByListAsc ( units , tmp ) else
67241: LD_ADDR_VAR 0 3
67245: PUSH
67246: LD_VAR 0 1
67250: PPUSH
67251: LD_VAR 0 5
67255: PPUSH
67256: CALL_OW 76
67260: ST_TO_ADDR
67261: GO 67283
// result := SortListByListDesc ( units , tmp ) ;
67263: LD_ADDR_VAR 0 3
67267: PUSH
67268: LD_VAR 0 1
67272: PPUSH
67273: LD_VAR 0 5
67277: PPUSH
67278: CALL_OW 77
67282: ST_TO_ADDR
// end ;
67283: LD_VAR 0 3
67287: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67288: LD_INT 0
67290: PPUSH
67291: PPUSH
// task := GetTaskList ( mech ) ;
67292: LD_ADDR_VAR 0 4
67296: PUSH
67297: LD_VAR 0 1
67301: PPUSH
67302: CALL_OW 437
67306: ST_TO_ADDR
// if not task then
67307: LD_VAR 0 4
67311: NOT
67312: IFFALSE 67316
// exit ;
67314: GO 67358
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67316: LD_ADDR_VAR 0 3
67320: PUSH
67321: LD_VAR 0 4
67325: PUSH
67326: LD_INT 1
67328: ARRAY
67329: PUSH
67330: LD_INT 1
67332: ARRAY
67333: PUSH
67334: LD_STRING r
67336: EQUAL
67337: PUSH
67338: LD_VAR 0 4
67342: PUSH
67343: LD_INT 1
67345: ARRAY
67346: PUSH
67347: LD_INT 4
67349: ARRAY
67350: PUSH
67351: LD_VAR 0 2
67355: EQUAL
67356: AND
67357: ST_TO_ADDR
// end ;
67358: LD_VAR 0 3
67362: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67363: LD_INT 0
67365: PPUSH
// SetDir ( unit , d ) ;
67366: LD_VAR 0 1
67370: PPUSH
67371: LD_VAR 0 4
67375: PPUSH
67376: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
67380: LD_ADDR_VAR 0 6
67384: PUSH
67385: LD_VAR 0 1
67389: PPUSH
67390: LD_VAR 0 2
67394: PPUSH
67395: LD_VAR 0 3
67399: PPUSH
67400: LD_VAR 0 5
67404: PPUSH
67405: CALL_OW 48
67409: ST_TO_ADDR
// end ;
67410: LD_VAR 0 6
67414: RET
// export function ToNaturalNumber ( number ) ; begin
67415: LD_INT 0
67417: PPUSH
// result := number div 1 ;
67418: LD_ADDR_VAR 0 2
67422: PUSH
67423: LD_VAR 0 1
67427: PUSH
67428: LD_INT 1
67430: DIV
67431: ST_TO_ADDR
// if number < 0 then
67432: LD_VAR 0 1
67436: PUSH
67437: LD_INT 0
67439: LESS
67440: IFFALSE 67450
// result := 0 ;
67442: LD_ADDR_VAR 0 2
67446: PUSH
67447: LD_INT 0
67449: ST_TO_ADDR
// end ;
67450: LD_VAR 0 2
67454: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
67455: LD_INT 0
67457: PPUSH
67458: PPUSH
67459: PPUSH
// if not buildings then
67460: LD_VAR 0 1
67464: NOT
67465: IFFALSE 67469
// exit ;
67467: GO 67584
// tmp := [ ] ;
67469: LD_ADDR_VAR 0 5
67473: PUSH
67474: EMPTY
67475: ST_TO_ADDR
// for b in buildings do
67476: LD_ADDR_VAR 0 4
67480: PUSH
67481: LD_VAR 0 1
67485: PUSH
67486: FOR_IN
67487: IFFALSE 67525
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
67489: LD_ADDR_VAR 0 5
67493: PUSH
67494: LD_VAR 0 5
67498: PPUSH
67499: LD_VAR 0 5
67503: PUSH
67504: LD_INT 1
67506: PLUS
67507: PPUSH
67508: LD_VAR 0 4
67512: PPUSH
67513: CALL_OW 266
67517: PPUSH
67518: CALL_OW 1
67522: ST_TO_ADDR
67523: GO 67486
67525: POP
67526: POP
// if not tmp then
67527: LD_VAR 0 5
67531: NOT
67532: IFFALSE 67536
// exit ;
67534: GO 67584
// if asc then
67536: LD_VAR 0 2
67540: IFFALSE 67564
// result := SortListByListAsc ( buildings , tmp ) else
67542: LD_ADDR_VAR 0 3
67546: PUSH
67547: LD_VAR 0 1
67551: PPUSH
67552: LD_VAR 0 5
67556: PPUSH
67557: CALL_OW 76
67561: ST_TO_ADDR
67562: GO 67584
// result := SortListByListDesc ( buildings , tmp ) ;
67564: LD_ADDR_VAR 0 3
67568: PUSH
67569: LD_VAR 0 1
67573: PPUSH
67574: LD_VAR 0 5
67578: PPUSH
67579: CALL_OW 77
67583: ST_TO_ADDR
// end ;
67584: LD_VAR 0 3
67588: RET
// export function SortByClass ( units , class ) ; var un ; begin
67589: LD_INT 0
67591: PPUSH
67592: PPUSH
// if not units or not class then
67593: LD_VAR 0 1
67597: NOT
67598: PUSH
67599: LD_VAR 0 2
67603: NOT
67604: OR
67605: IFFALSE 67609
// exit ;
67607: GO 67704
// result := [ ] ;
67609: LD_ADDR_VAR 0 3
67613: PUSH
67614: EMPTY
67615: ST_TO_ADDR
// for un in units do
67616: LD_ADDR_VAR 0 4
67620: PUSH
67621: LD_VAR 0 1
67625: PUSH
67626: FOR_IN
67627: IFFALSE 67702
// if GetClass ( un ) = class then
67629: LD_VAR 0 4
67633: PPUSH
67634: CALL_OW 257
67638: PUSH
67639: LD_VAR 0 2
67643: EQUAL
67644: IFFALSE 67671
// result := Insert ( result , 1 , un ) else
67646: LD_ADDR_VAR 0 3
67650: PUSH
67651: LD_VAR 0 3
67655: PPUSH
67656: LD_INT 1
67658: PPUSH
67659: LD_VAR 0 4
67663: PPUSH
67664: CALL_OW 2
67668: ST_TO_ADDR
67669: GO 67700
// result := Replace ( result , result + 1 , un ) ;
67671: LD_ADDR_VAR 0 3
67675: PUSH
67676: LD_VAR 0 3
67680: PPUSH
67681: LD_VAR 0 3
67685: PUSH
67686: LD_INT 1
67688: PLUS
67689: PPUSH
67690: LD_VAR 0 4
67694: PPUSH
67695: CALL_OW 1
67699: ST_TO_ADDR
67700: GO 67626
67702: POP
67703: POP
// end ;
67704: LD_VAR 0 3
67708: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67709: LD_INT 0
67711: PPUSH
67712: PPUSH
67713: PPUSH
67714: PPUSH
67715: PPUSH
67716: PPUSH
67717: PPUSH
// result := [ ] ;
67718: LD_ADDR_VAR 0 4
67722: PUSH
67723: EMPTY
67724: ST_TO_ADDR
// if x - r < 0 then
67725: LD_VAR 0 1
67729: PUSH
67730: LD_VAR 0 3
67734: MINUS
67735: PUSH
67736: LD_INT 0
67738: LESS
67739: IFFALSE 67751
// min_x := 0 else
67741: LD_ADDR_VAR 0 8
67745: PUSH
67746: LD_INT 0
67748: ST_TO_ADDR
67749: GO 67767
// min_x := x - r ;
67751: LD_ADDR_VAR 0 8
67755: PUSH
67756: LD_VAR 0 1
67760: PUSH
67761: LD_VAR 0 3
67765: MINUS
67766: ST_TO_ADDR
// if y - r < 0 then
67767: LD_VAR 0 2
67771: PUSH
67772: LD_VAR 0 3
67776: MINUS
67777: PUSH
67778: LD_INT 0
67780: LESS
67781: IFFALSE 67793
// min_y := 0 else
67783: LD_ADDR_VAR 0 7
67787: PUSH
67788: LD_INT 0
67790: ST_TO_ADDR
67791: GO 67809
// min_y := y - r ;
67793: LD_ADDR_VAR 0 7
67797: PUSH
67798: LD_VAR 0 2
67802: PUSH
67803: LD_VAR 0 3
67807: MINUS
67808: ST_TO_ADDR
// max_x := x + r ;
67809: LD_ADDR_VAR 0 9
67813: PUSH
67814: LD_VAR 0 1
67818: PUSH
67819: LD_VAR 0 3
67823: PLUS
67824: ST_TO_ADDR
// max_y := y + r ;
67825: LD_ADDR_VAR 0 10
67829: PUSH
67830: LD_VAR 0 2
67834: PUSH
67835: LD_VAR 0 3
67839: PLUS
67840: ST_TO_ADDR
// for _x = min_x to max_x do
67841: LD_ADDR_VAR 0 5
67845: PUSH
67846: DOUBLE
67847: LD_VAR 0 8
67851: DEC
67852: ST_TO_ADDR
67853: LD_VAR 0 9
67857: PUSH
67858: FOR_TO
67859: IFFALSE 67960
// for _y = min_y to max_y do
67861: LD_ADDR_VAR 0 6
67865: PUSH
67866: DOUBLE
67867: LD_VAR 0 7
67871: DEC
67872: ST_TO_ADDR
67873: LD_VAR 0 10
67877: PUSH
67878: FOR_TO
67879: IFFALSE 67956
// begin if not ValidHex ( _x , _y ) then
67881: LD_VAR 0 5
67885: PPUSH
67886: LD_VAR 0 6
67890: PPUSH
67891: CALL_OW 488
67895: NOT
67896: IFFALSE 67900
// continue ;
67898: GO 67878
// if GetResourceTypeXY ( _x , _y ) then
67900: LD_VAR 0 5
67904: PPUSH
67905: LD_VAR 0 6
67909: PPUSH
67910: CALL_OW 283
67914: IFFALSE 67954
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67916: LD_ADDR_VAR 0 4
67920: PUSH
67921: LD_VAR 0 4
67925: PPUSH
67926: LD_VAR 0 4
67930: PUSH
67931: LD_INT 1
67933: PLUS
67934: PPUSH
67935: LD_VAR 0 5
67939: PUSH
67940: LD_VAR 0 6
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: PPUSH
67949: CALL_OW 1
67953: ST_TO_ADDR
// end ;
67954: GO 67878
67956: POP
67957: POP
67958: GO 67858
67960: POP
67961: POP
// end ;
67962: LD_VAR 0 4
67966: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67967: LD_INT 0
67969: PPUSH
67970: PPUSH
67971: PPUSH
67972: PPUSH
67973: PPUSH
67974: PPUSH
67975: PPUSH
67976: PPUSH
// if not units then
67977: LD_VAR 0 1
67981: NOT
67982: IFFALSE 67986
// exit ;
67984: GO 68514
// result := UnitFilter ( units , [ f_ok ] ) ;
67986: LD_ADDR_VAR 0 3
67990: PUSH
67991: LD_VAR 0 1
67995: PPUSH
67996: LD_INT 50
67998: PUSH
67999: EMPTY
68000: LIST
68001: PPUSH
68002: CALL_OW 72
68006: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68007: LD_ADDR_VAR 0 8
68011: PUSH
68012: LD_VAR 0 1
68016: PUSH
68017: LD_INT 1
68019: ARRAY
68020: PPUSH
68021: CALL_OW 255
68025: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68026: LD_ADDR_VAR 0 10
68030: PUSH
68031: LD_INT 29
68033: PUSH
68034: LD_INT 91
68036: PUSH
68037: LD_INT 49
68039: PUSH
68040: EMPTY
68041: LIST
68042: LIST
68043: LIST
68044: ST_TO_ADDR
// if not result then
68045: LD_VAR 0 3
68049: NOT
68050: IFFALSE 68054
// exit ;
68052: GO 68514
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68054: LD_ADDR_VAR 0 5
68058: PUSH
68059: LD_INT 81
68061: PUSH
68062: LD_VAR 0 8
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PPUSH
68071: CALL_OW 69
68075: ST_TO_ADDR
// for i in result do
68076: LD_ADDR_VAR 0 4
68080: PUSH
68081: LD_VAR 0 3
68085: PUSH
68086: FOR_IN
68087: IFFALSE 68512
// begin tag := GetTag ( i ) + 1 ;
68089: LD_ADDR_VAR 0 9
68093: PUSH
68094: LD_VAR 0 4
68098: PPUSH
68099: CALL_OW 110
68103: PUSH
68104: LD_INT 1
68106: PLUS
68107: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
68108: LD_ADDR_VAR 0 7
68112: PUSH
68113: LD_VAR 0 4
68117: PPUSH
68118: CALL_OW 250
68122: PPUSH
68123: LD_VAR 0 4
68127: PPUSH
68128: CALL_OW 251
68132: PPUSH
68133: LD_INT 4
68135: PPUSH
68136: CALL 67709 0 3
68140: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
68141: LD_VAR 0 4
68145: PPUSH
68146: CALL_OW 247
68150: PUSH
68151: LD_INT 2
68153: EQUAL
68154: PUSH
68155: LD_VAR 0 7
68159: PUSH
68160: LD_INT 2
68162: GREATER
68163: AND
68164: PUSH
68165: LD_VAR 0 4
68169: PPUSH
68170: CALL_OW 264
68174: PUSH
68175: LD_VAR 0 10
68179: IN
68180: NOT
68181: AND
68182: IFFALSE 68221
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68184: LD_VAR 0 4
68188: PPUSH
68189: LD_VAR 0 7
68193: PUSH
68194: LD_INT 1
68196: ARRAY
68197: PUSH
68198: LD_INT 1
68200: ARRAY
68201: PPUSH
68202: LD_VAR 0 7
68206: PUSH
68207: LD_INT 1
68209: ARRAY
68210: PUSH
68211: LD_INT 2
68213: ARRAY
68214: PPUSH
68215: CALL_OW 116
68219: GO 68510
// if path > tag then
68221: LD_VAR 0 2
68225: PUSH
68226: LD_VAR 0 9
68230: GREATER
68231: IFFALSE 68439
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
68233: LD_ADDR_VAR 0 6
68237: PUSH
68238: LD_VAR 0 5
68242: PPUSH
68243: LD_INT 91
68245: PUSH
68246: LD_VAR 0 4
68250: PUSH
68251: LD_INT 8
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: LIST
68258: PPUSH
68259: CALL_OW 72
68263: ST_TO_ADDR
// if nearEnemy then
68264: LD_VAR 0 6
68268: IFFALSE 68337
// begin if GetWeapon ( i ) = ru_time_lapser then
68270: LD_VAR 0 4
68274: PPUSH
68275: CALL_OW 264
68279: PUSH
68280: LD_INT 49
68282: EQUAL
68283: IFFALSE 68311
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68285: LD_VAR 0 4
68289: PPUSH
68290: LD_VAR 0 6
68294: PPUSH
68295: LD_VAR 0 4
68299: PPUSH
68300: CALL_OW 74
68304: PPUSH
68305: CALL_OW 112
68309: GO 68335
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
68311: LD_VAR 0 4
68315: PPUSH
68316: LD_VAR 0 6
68320: PPUSH
68321: LD_VAR 0 4
68325: PPUSH
68326: CALL_OW 74
68330: PPUSH
68331: CALL 69585 0 2
// end else
68335: GO 68437
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68337: LD_VAR 0 4
68341: PPUSH
68342: LD_VAR 0 2
68346: PUSH
68347: LD_VAR 0 9
68351: ARRAY
68352: PUSH
68353: LD_INT 1
68355: ARRAY
68356: PPUSH
68357: LD_VAR 0 2
68361: PUSH
68362: LD_VAR 0 9
68366: ARRAY
68367: PUSH
68368: LD_INT 2
68370: ARRAY
68371: PPUSH
68372: CALL_OW 297
68376: PUSH
68377: LD_INT 6
68379: GREATER
68380: IFFALSE 68423
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68382: LD_VAR 0 4
68386: PPUSH
68387: LD_VAR 0 2
68391: PUSH
68392: LD_VAR 0 9
68396: ARRAY
68397: PUSH
68398: LD_INT 1
68400: ARRAY
68401: PPUSH
68402: LD_VAR 0 2
68406: PUSH
68407: LD_VAR 0 9
68411: ARRAY
68412: PUSH
68413: LD_INT 2
68415: ARRAY
68416: PPUSH
68417: CALL_OW 114
68421: GO 68437
// SetTag ( i , tag ) ;
68423: LD_VAR 0 4
68427: PPUSH
68428: LD_VAR 0 9
68432: PPUSH
68433: CALL_OW 109
// end else
68437: GO 68510
// if enemy then
68439: LD_VAR 0 5
68443: IFFALSE 68510
// begin if GetWeapon ( i ) = ru_time_lapser then
68445: LD_VAR 0 4
68449: PPUSH
68450: CALL_OW 264
68454: PUSH
68455: LD_INT 49
68457: EQUAL
68458: IFFALSE 68486
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68460: LD_VAR 0 4
68464: PPUSH
68465: LD_VAR 0 5
68469: PPUSH
68470: LD_VAR 0 4
68474: PPUSH
68475: CALL_OW 74
68479: PPUSH
68480: CALL_OW 112
68484: GO 68510
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68486: LD_VAR 0 4
68490: PPUSH
68491: LD_VAR 0 5
68495: PPUSH
68496: LD_VAR 0 4
68500: PPUSH
68501: CALL_OW 74
68505: PPUSH
68506: CALL 69585 0 2
// end ; end ;
68510: GO 68086
68512: POP
68513: POP
// end ;
68514: LD_VAR 0 3
68518: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68519: LD_INT 0
68521: PPUSH
68522: PPUSH
68523: PPUSH
// if not unit or IsInUnit ( unit ) then
68524: LD_VAR 0 1
68528: NOT
68529: PUSH
68530: LD_VAR 0 1
68534: PPUSH
68535: CALL_OW 310
68539: OR
68540: IFFALSE 68544
// exit ;
68542: GO 68635
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68544: LD_ADDR_VAR 0 4
68548: PUSH
68549: LD_VAR 0 1
68553: PPUSH
68554: CALL_OW 250
68558: PPUSH
68559: LD_VAR 0 2
68563: PPUSH
68564: LD_INT 1
68566: PPUSH
68567: CALL_OW 272
68571: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68572: LD_ADDR_VAR 0 5
68576: PUSH
68577: LD_VAR 0 1
68581: PPUSH
68582: CALL_OW 251
68586: PPUSH
68587: LD_VAR 0 2
68591: PPUSH
68592: LD_INT 1
68594: PPUSH
68595: CALL_OW 273
68599: ST_TO_ADDR
// if ValidHex ( x , y ) then
68600: LD_VAR 0 4
68604: PPUSH
68605: LD_VAR 0 5
68609: PPUSH
68610: CALL_OW 488
68614: IFFALSE 68635
// ComTurnXY ( unit , x , y ) ;
68616: LD_VAR 0 1
68620: PPUSH
68621: LD_VAR 0 4
68625: PPUSH
68626: LD_VAR 0 5
68630: PPUSH
68631: CALL_OW 118
// end ;
68635: LD_VAR 0 3
68639: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68640: LD_INT 0
68642: PPUSH
68643: PPUSH
// result := false ;
68644: LD_ADDR_VAR 0 3
68648: PUSH
68649: LD_INT 0
68651: ST_TO_ADDR
// if not units then
68652: LD_VAR 0 2
68656: NOT
68657: IFFALSE 68661
// exit ;
68659: GO 68706
// for i in units do
68661: LD_ADDR_VAR 0 4
68665: PUSH
68666: LD_VAR 0 2
68670: PUSH
68671: FOR_IN
68672: IFFALSE 68704
// if See ( side , i ) then
68674: LD_VAR 0 1
68678: PPUSH
68679: LD_VAR 0 4
68683: PPUSH
68684: CALL_OW 292
68688: IFFALSE 68702
// begin result := true ;
68690: LD_ADDR_VAR 0 3
68694: PUSH
68695: LD_INT 1
68697: ST_TO_ADDR
// exit ;
68698: POP
68699: POP
68700: GO 68706
// end ;
68702: GO 68671
68704: POP
68705: POP
// end ;
68706: LD_VAR 0 3
68710: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68711: LD_INT 0
68713: PPUSH
68714: PPUSH
68715: PPUSH
68716: PPUSH
// if not unit or not points then
68717: LD_VAR 0 1
68721: NOT
68722: PUSH
68723: LD_VAR 0 2
68727: NOT
68728: OR
68729: IFFALSE 68733
// exit ;
68731: GO 68823
// dist := 99999 ;
68733: LD_ADDR_VAR 0 5
68737: PUSH
68738: LD_INT 99999
68740: ST_TO_ADDR
// for i in points do
68741: LD_ADDR_VAR 0 4
68745: PUSH
68746: LD_VAR 0 2
68750: PUSH
68751: FOR_IN
68752: IFFALSE 68821
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68754: LD_ADDR_VAR 0 6
68758: PUSH
68759: LD_VAR 0 1
68763: PPUSH
68764: LD_VAR 0 4
68768: PUSH
68769: LD_INT 1
68771: ARRAY
68772: PPUSH
68773: LD_VAR 0 4
68777: PUSH
68778: LD_INT 2
68780: ARRAY
68781: PPUSH
68782: CALL_OW 297
68786: ST_TO_ADDR
// if tmpDist < dist then
68787: LD_VAR 0 6
68791: PUSH
68792: LD_VAR 0 5
68796: LESS
68797: IFFALSE 68819
// begin result := i ;
68799: LD_ADDR_VAR 0 3
68803: PUSH
68804: LD_VAR 0 4
68808: ST_TO_ADDR
// dist := tmpDist ;
68809: LD_ADDR_VAR 0 5
68813: PUSH
68814: LD_VAR 0 6
68818: ST_TO_ADDR
// end ; end ;
68819: GO 68751
68821: POP
68822: POP
// end ;
68823: LD_VAR 0 3
68827: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
68828: LD_INT 0
68830: PPUSH
// uc_side := side ;
68831: LD_ADDR_OWVAR 20
68835: PUSH
68836: LD_VAR 0 1
68840: ST_TO_ADDR
// uc_nation := 3 ;
68841: LD_ADDR_OWVAR 21
68845: PUSH
68846: LD_INT 3
68848: ST_TO_ADDR
// vc_chassis := 25 ;
68849: LD_ADDR_OWVAR 37
68853: PUSH
68854: LD_INT 25
68856: ST_TO_ADDR
// vc_engine := engine_siberite ;
68857: LD_ADDR_OWVAR 39
68861: PUSH
68862: LD_INT 3
68864: ST_TO_ADDR
// vc_control := control_computer ;
68865: LD_ADDR_OWVAR 38
68869: PUSH
68870: LD_INT 3
68872: ST_TO_ADDR
// vc_weapon := 59 ;
68873: LD_ADDR_OWVAR 40
68877: PUSH
68878: LD_INT 59
68880: ST_TO_ADDR
// result := CreateVehicle ;
68881: LD_ADDR_VAR 0 5
68885: PUSH
68886: CALL_OW 45
68890: ST_TO_ADDR
// SetDir ( result , d ) ;
68891: LD_VAR 0 5
68895: PPUSH
68896: LD_VAR 0 4
68900: PPUSH
68901: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68905: LD_VAR 0 5
68909: PPUSH
68910: LD_VAR 0 2
68914: PPUSH
68915: LD_VAR 0 3
68919: PPUSH
68920: LD_INT 0
68922: PPUSH
68923: CALL_OW 48
// end ;
68927: LD_VAR 0 5
68931: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
68932: LD_INT 0
68934: PPUSH
68935: PPUSH
68936: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
68937: LD_ADDR_VAR 0 2
68941: PUSH
68942: LD_INT 0
68944: PUSH
68945: LD_INT 0
68947: PUSH
68948: LD_INT 0
68950: PUSH
68951: LD_INT 0
68953: PUSH
68954: EMPTY
68955: LIST
68956: LIST
68957: LIST
68958: LIST
68959: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
68960: LD_VAR 0 1
68964: NOT
68965: PUSH
68966: LD_VAR 0 1
68970: PPUSH
68971: CALL_OW 264
68975: PUSH
68976: LD_INT 12
68978: PUSH
68979: LD_INT 51
68981: PUSH
68982: LD_INT 32
68984: PUSH
68985: LD_INT 89
68987: PUSH
68988: EMPTY
68989: LIST
68990: LIST
68991: LIST
68992: LIST
68993: IN
68994: NOT
68995: OR
68996: IFFALSE 69000
// exit ;
68998: GO 69098
// for i := 1 to 3 do
69000: LD_ADDR_VAR 0 3
69004: PUSH
69005: DOUBLE
69006: LD_INT 1
69008: DEC
69009: ST_TO_ADDR
69010: LD_INT 3
69012: PUSH
69013: FOR_TO
69014: IFFALSE 69096
// begin tmp := GetCargo ( cargo , i ) ;
69016: LD_ADDR_VAR 0 4
69020: PUSH
69021: LD_VAR 0 1
69025: PPUSH
69026: LD_VAR 0 3
69030: PPUSH
69031: CALL_OW 289
69035: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69036: LD_ADDR_VAR 0 2
69040: PUSH
69041: LD_VAR 0 2
69045: PPUSH
69046: LD_VAR 0 3
69050: PPUSH
69051: LD_VAR 0 4
69055: PPUSH
69056: CALL_OW 1
69060: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69061: LD_ADDR_VAR 0 2
69065: PUSH
69066: LD_VAR 0 2
69070: PPUSH
69071: LD_INT 4
69073: PPUSH
69074: LD_VAR 0 2
69078: PUSH
69079: LD_INT 4
69081: ARRAY
69082: PUSH
69083: LD_VAR 0 4
69087: PLUS
69088: PPUSH
69089: CALL_OW 1
69093: ST_TO_ADDR
// end ;
69094: GO 69013
69096: POP
69097: POP
// end ;
69098: LD_VAR 0 2
69102: RET
// export function Length ( array ) ; begin
69103: LD_INT 0
69105: PPUSH
// result := array + 0 ;
69106: LD_ADDR_VAR 0 2
69110: PUSH
69111: LD_VAR 0 1
69115: PUSH
69116: LD_INT 0
69118: PLUS
69119: ST_TO_ADDR
// end ;
69120: LD_VAR 0 2
69124: RET
// export function PrepareArray ( array ) ; begin
69125: LD_INT 0
69127: PPUSH
// result := array diff 0 ;
69128: LD_ADDR_VAR 0 2
69132: PUSH
69133: LD_VAR 0 1
69137: PUSH
69138: LD_INT 0
69140: DIFF
69141: ST_TO_ADDR
// if not result [ 1 ] then
69142: LD_VAR 0 2
69146: PUSH
69147: LD_INT 1
69149: ARRAY
69150: NOT
69151: IFFALSE 69171
// result := Delete ( result , 1 ) ;
69153: LD_ADDR_VAR 0 2
69157: PUSH
69158: LD_VAR 0 2
69162: PPUSH
69163: LD_INT 1
69165: PPUSH
69166: CALL_OW 3
69170: ST_TO_ADDR
// end ;
69171: LD_VAR 0 2
69175: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
69176: LD_INT 0
69178: PPUSH
69179: PPUSH
69180: PPUSH
69181: PPUSH
// sibRocketRange := 25 ;
69182: LD_ADDR_VAR 0 6
69186: PUSH
69187: LD_INT 25
69189: ST_TO_ADDR
// result := false ;
69190: LD_ADDR_VAR 0 4
69194: PUSH
69195: LD_INT 0
69197: ST_TO_ADDR
// for i := 0 to 5 do
69198: LD_ADDR_VAR 0 5
69202: PUSH
69203: DOUBLE
69204: LD_INT 0
69206: DEC
69207: ST_TO_ADDR
69208: LD_INT 5
69210: PUSH
69211: FOR_TO
69212: IFFALSE 69279
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
69214: LD_VAR 0 1
69218: PPUSH
69219: LD_VAR 0 5
69223: PPUSH
69224: LD_VAR 0 6
69228: PPUSH
69229: CALL_OW 272
69233: PPUSH
69234: LD_VAR 0 2
69238: PPUSH
69239: LD_VAR 0 5
69243: PPUSH
69244: LD_VAR 0 6
69248: PPUSH
69249: CALL_OW 273
69253: PPUSH
69254: LD_VAR 0 3
69258: PPUSH
69259: CALL_OW 309
69263: IFFALSE 69277
// begin result := true ;
69265: LD_ADDR_VAR 0 4
69269: PUSH
69270: LD_INT 1
69272: ST_TO_ADDR
// exit ;
69273: POP
69274: POP
69275: GO 69281
// end ;
69277: GO 69211
69279: POP
69280: POP
// end ;
69281: LD_VAR 0 4
69285: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
69286: LD_INT 0
69288: PPUSH
69289: PPUSH
69290: PPUSH
// if btype = b_depot then
69291: LD_VAR 0 2
69295: PUSH
69296: LD_INT 0
69298: EQUAL
69299: IFFALSE 69311
// begin result := true ;
69301: LD_ADDR_VAR 0 3
69305: PUSH
69306: LD_INT 1
69308: ST_TO_ADDR
// exit ;
69309: GO 69427
// end ; pom := GetBase ( depot ) ;
69311: LD_ADDR_VAR 0 4
69315: PUSH
69316: LD_VAR 0 1
69320: PPUSH
69321: CALL_OW 274
69325: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
69326: LD_ADDR_VAR 0 5
69330: PUSH
69331: LD_VAR 0 2
69335: PPUSH
69336: LD_VAR 0 1
69340: PPUSH
69341: CALL_OW 248
69345: PPUSH
69346: CALL_OW 450
69350: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
69351: LD_ADDR_VAR 0 3
69355: PUSH
69356: LD_VAR 0 4
69360: PPUSH
69361: LD_INT 1
69363: PPUSH
69364: CALL_OW 275
69368: PUSH
69369: LD_VAR 0 5
69373: PUSH
69374: LD_INT 1
69376: ARRAY
69377: GREATEREQUAL
69378: PUSH
69379: LD_VAR 0 4
69383: PPUSH
69384: LD_INT 2
69386: PPUSH
69387: CALL_OW 275
69391: PUSH
69392: LD_VAR 0 5
69396: PUSH
69397: LD_INT 2
69399: ARRAY
69400: GREATEREQUAL
69401: AND
69402: PUSH
69403: LD_VAR 0 4
69407: PPUSH
69408: LD_INT 3
69410: PPUSH
69411: CALL_OW 275
69415: PUSH
69416: LD_VAR 0 5
69420: PUSH
69421: LD_INT 3
69423: ARRAY
69424: GREATEREQUAL
69425: AND
69426: ST_TO_ADDR
// end ;
69427: LD_VAR 0 3
69431: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
69432: LD_INT 0
69434: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
69435: LD_VAR 0 1
69439: PPUSH
69440: LD_VAR 0 2
69444: PPUSH
69445: LD_INT 0
69447: PPUSH
69448: LD_INT 0
69450: PPUSH
69451: LD_INT 1
69453: PPUSH
69454: LD_INT 0
69456: PPUSH
69457: CALL_OW 587
// end ;
69461: LD_VAR 0 3
69465: RET
// export function CenterOnNow ( unit ) ; begin
69466: LD_INT 0
69468: PPUSH
// result := IsInUnit ( unit ) ;
69469: LD_ADDR_VAR 0 2
69473: PUSH
69474: LD_VAR 0 1
69478: PPUSH
69479: CALL_OW 310
69483: ST_TO_ADDR
// if not result then
69484: LD_VAR 0 2
69488: NOT
69489: IFFALSE 69501
// result := unit ;
69491: LD_ADDR_VAR 0 2
69495: PUSH
69496: LD_VAR 0 1
69500: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
69501: LD_VAR 0 1
69505: PPUSH
69506: CALL_OW 87
// end ;
69510: LD_VAR 0 2
69514: RET
// export function ComMoveHex ( unit , hex ) ; begin
69515: LD_INT 0
69517: PPUSH
// if not hex then
69518: LD_VAR 0 2
69522: NOT
69523: IFFALSE 69527
// exit ;
69525: GO 69580
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
69527: LD_VAR 0 2
69531: PUSH
69532: LD_INT 1
69534: ARRAY
69535: PPUSH
69536: LD_VAR 0 2
69540: PUSH
69541: LD_INT 2
69543: ARRAY
69544: PPUSH
69545: CALL_OW 428
69549: IFFALSE 69553
// exit ;
69551: GO 69580
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
69553: LD_VAR 0 1
69557: PPUSH
69558: LD_VAR 0 2
69562: PUSH
69563: LD_INT 1
69565: ARRAY
69566: PPUSH
69567: LD_VAR 0 2
69571: PUSH
69572: LD_INT 2
69574: ARRAY
69575: PPUSH
69576: CALL_OW 111
// end ;
69580: LD_VAR 0 3
69584: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
69585: LD_INT 0
69587: PPUSH
69588: PPUSH
69589: PPUSH
// if not unit or not enemy then
69590: LD_VAR 0 1
69594: NOT
69595: PUSH
69596: LD_VAR 0 2
69600: NOT
69601: OR
69602: IFFALSE 69606
// exit ;
69604: GO 69730
// x := GetX ( enemy ) ;
69606: LD_ADDR_VAR 0 4
69610: PUSH
69611: LD_VAR 0 2
69615: PPUSH
69616: CALL_OW 250
69620: ST_TO_ADDR
// y := GetY ( enemy ) ;
69621: LD_ADDR_VAR 0 5
69625: PUSH
69626: LD_VAR 0 2
69630: PPUSH
69631: CALL_OW 251
69635: ST_TO_ADDR
// if ValidHex ( x , y ) then
69636: LD_VAR 0 4
69640: PPUSH
69641: LD_VAR 0 5
69645: PPUSH
69646: CALL_OW 488
69650: IFFALSE 69730
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
69652: LD_VAR 0 2
69656: PPUSH
69657: CALL_OW 247
69661: PUSH
69662: LD_INT 3
69664: PUSH
69665: LD_INT 2
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: IN
69672: PUSH
69673: LD_VAR 0 1
69677: PPUSH
69678: CALL_OW 255
69682: PPUSH
69683: LD_VAR 0 2
69687: PPUSH
69688: CALL_OW 292
69692: OR
69693: IFFALSE 69711
// ComAttackUnit ( unit , enemy ) else
69695: LD_VAR 0 1
69699: PPUSH
69700: LD_VAR 0 2
69704: PPUSH
69705: CALL_OW 115
69709: GO 69730
// ComAgressiveMove ( unit , x , y ) ;
69711: LD_VAR 0 1
69715: PPUSH
69716: LD_VAR 0 4
69720: PPUSH
69721: LD_VAR 0 5
69725: PPUSH
69726: CALL_OW 114
// end ;
69730: LD_VAR 0 3
69734: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
69735: LD_INT 0
69737: PPUSH
69738: PPUSH
69739: PPUSH
// list := AreaToList ( area , 0 ) ;
69740: LD_ADDR_VAR 0 5
69744: PUSH
69745: LD_VAR 0 1
69749: PPUSH
69750: LD_INT 0
69752: PPUSH
69753: CALL_OW 517
69757: ST_TO_ADDR
// if not list then
69758: LD_VAR 0 5
69762: NOT
69763: IFFALSE 69767
// exit ;
69765: GO 69897
// if all then
69767: LD_VAR 0 2
69771: IFFALSE 69859
// begin for i := 1 to list [ 1 ] do
69773: LD_ADDR_VAR 0 4
69777: PUSH
69778: DOUBLE
69779: LD_INT 1
69781: DEC
69782: ST_TO_ADDR
69783: LD_VAR 0 5
69787: PUSH
69788: LD_INT 1
69790: ARRAY
69791: PUSH
69792: FOR_TO
69793: IFFALSE 69855
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
69795: LD_ADDR_VAR 0 3
69799: PUSH
69800: LD_VAR 0 3
69804: PPUSH
69805: LD_VAR 0 3
69809: PUSH
69810: LD_INT 1
69812: PLUS
69813: PPUSH
69814: LD_VAR 0 5
69818: PUSH
69819: LD_INT 1
69821: ARRAY
69822: PUSH
69823: LD_VAR 0 4
69827: ARRAY
69828: PUSH
69829: LD_VAR 0 5
69833: PUSH
69834: LD_INT 2
69836: ARRAY
69837: PUSH
69838: LD_VAR 0 4
69842: ARRAY
69843: PUSH
69844: EMPTY
69845: LIST
69846: LIST
69847: PPUSH
69848: CALL_OW 1
69852: ST_TO_ADDR
69853: GO 69792
69855: POP
69856: POP
// exit ;
69857: GO 69897
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
69859: LD_ADDR_VAR 0 3
69863: PUSH
69864: LD_VAR 0 5
69868: PUSH
69869: LD_INT 1
69871: ARRAY
69872: PUSH
69873: LD_INT 1
69875: ARRAY
69876: PUSH
69877: LD_VAR 0 5
69881: PUSH
69882: LD_INT 2
69884: ARRAY
69885: PUSH
69886: LD_INT 1
69888: ARRAY
69889: PUSH
69890: EMPTY
69891: LIST
69892: LIST
69893: PUSH
69894: EMPTY
69895: LIST
69896: ST_TO_ADDR
// end ;
69897: LD_VAR 0 3
69901: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
69902: LD_INT 0
69904: PPUSH
69905: PPUSH
// list := AreaToList ( area , 0 ) ;
69906: LD_ADDR_VAR 0 4
69910: PUSH
69911: LD_VAR 0 1
69915: PPUSH
69916: LD_INT 0
69918: PPUSH
69919: CALL_OW 517
69923: ST_TO_ADDR
// if not list then
69924: LD_VAR 0 4
69928: NOT
69929: IFFALSE 69933
// exit ;
69931: GO 69974
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
69933: LD_ADDR_VAR 0 3
69937: PUSH
69938: LD_VAR 0 4
69942: PUSH
69943: LD_INT 1
69945: ARRAY
69946: PUSH
69947: LD_INT 1
69949: ARRAY
69950: PUSH
69951: LD_VAR 0 4
69955: PUSH
69956: LD_INT 2
69958: ARRAY
69959: PUSH
69960: LD_INT 1
69962: ARRAY
69963: PUSH
69964: LD_VAR 0 2
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: LIST
69973: ST_TO_ADDR
// end ;
69974: LD_VAR 0 3
69978: RET
// export function First ( array ) ; begin
69979: LD_INT 0
69981: PPUSH
// if not array then
69982: LD_VAR 0 1
69986: NOT
69987: IFFALSE 69991
// exit ;
69989: GO 70005
// result := array [ 1 ] ;
69991: LD_ADDR_VAR 0 2
69995: PUSH
69996: LD_VAR 0 1
70000: PUSH
70001: LD_INT 1
70003: ARRAY
70004: ST_TO_ADDR
// end ;
70005: LD_VAR 0 2
70009: RET
// export function Last ( array ) ; begin
70010: LD_INT 0
70012: PPUSH
// if not array then
70013: LD_VAR 0 1
70017: NOT
70018: IFFALSE 70022
// exit ;
70020: GO 70038
// result := array [ array ] ;
70022: LD_ADDR_VAR 0 2
70026: PUSH
70027: LD_VAR 0 1
70031: PUSH
70032: LD_VAR 0 1
70036: ARRAY
70037: ST_TO_ADDR
// end ;
70038: LD_VAR 0 2
70042: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
70043: LD_INT 0
70045: PPUSH
70046: PPUSH
// result := [ ] ;
70047: LD_ADDR_VAR 0 5
70051: PUSH
70052: EMPTY
70053: ST_TO_ADDR
// if not array then
70054: LD_VAR 0 1
70058: NOT
70059: IFFALSE 70063
// exit ;
70061: GO 70175
// for i := 1 to array do
70063: LD_ADDR_VAR 0 6
70067: PUSH
70068: DOUBLE
70069: LD_INT 1
70071: DEC
70072: ST_TO_ADDR
70073: LD_VAR 0 1
70077: PUSH
70078: FOR_TO
70079: IFFALSE 70173
// if array [ i ] [ index ] = value then
70081: LD_VAR 0 1
70085: PUSH
70086: LD_VAR 0 6
70090: ARRAY
70091: PUSH
70092: LD_VAR 0 2
70096: ARRAY
70097: PUSH
70098: LD_VAR 0 3
70102: EQUAL
70103: IFFALSE 70171
// begin if indexColumn then
70105: LD_VAR 0 4
70109: IFFALSE 70145
// result := Join ( result , array [ i ] [ indexColumn ] ) else
70111: LD_ADDR_VAR 0 5
70115: PUSH
70116: LD_VAR 0 5
70120: PPUSH
70121: LD_VAR 0 1
70125: PUSH
70126: LD_VAR 0 6
70130: ARRAY
70131: PUSH
70132: LD_VAR 0 4
70136: ARRAY
70137: PPUSH
70138: CALL 65223 0 2
70142: ST_TO_ADDR
70143: GO 70171
// result := Join ( result , array [ i ] ) ;
70145: LD_ADDR_VAR 0 5
70149: PUSH
70150: LD_VAR 0 5
70154: PPUSH
70155: LD_VAR 0 1
70159: PUSH
70160: LD_VAR 0 6
70164: ARRAY
70165: PPUSH
70166: CALL 65223 0 2
70170: ST_TO_ADDR
// end ;
70171: GO 70078
70173: POP
70174: POP
// end ;
70175: LD_VAR 0 5
70179: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
70180: LD_INT 0
70182: PPUSH
// if not vehicles or not parkingPoint then
70183: LD_VAR 0 1
70187: NOT
70188: PUSH
70189: LD_VAR 0 2
70193: NOT
70194: OR
70195: IFFALSE 70199
// exit ;
70197: GO 70297
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
70199: LD_ADDR_VAR 0 1
70203: PUSH
70204: LD_VAR 0 1
70208: PPUSH
70209: LD_INT 50
70211: PUSH
70212: EMPTY
70213: LIST
70214: PUSH
70215: LD_INT 3
70217: PUSH
70218: LD_INT 92
70220: PUSH
70221: LD_VAR 0 2
70225: PUSH
70226: LD_INT 1
70228: ARRAY
70229: PUSH
70230: LD_VAR 0 2
70234: PUSH
70235: LD_INT 2
70237: ARRAY
70238: PUSH
70239: LD_INT 8
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: LIST
70246: LIST
70247: PUSH
70248: EMPTY
70249: LIST
70250: LIST
70251: PUSH
70252: EMPTY
70253: LIST
70254: LIST
70255: PPUSH
70256: CALL_OW 72
70260: ST_TO_ADDR
// if not vehicles then
70261: LD_VAR 0 1
70265: NOT
70266: IFFALSE 70270
// exit ;
70268: GO 70297
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
70270: LD_VAR 0 1
70274: PPUSH
70275: LD_VAR 0 2
70279: PUSH
70280: LD_INT 1
70282: ARRAY
70283: PPUSH
70284: LD_VAR 0 2
70288: PUSH
70289: LD_INT 2
70291: ARRAY
70292: PPUSH
70293: CALL_OW 111
// end ;
70297: LD_VAR 0 3
70301: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
70302: LD_INT 0
70304: PPUSH
70305: PPUSH
70306: PPUSH
// if not side or not area then
70307: LD_VAR 0 1
70311: NOT
70312: PUSH
70313: LD_VAR 0 2
70317: NOT
70318: OR
70319: IFFALSE 70323
// exit ;
70321: GO 70442
// tmp := AreaToList ( area , 0 ) ;
70323: LD_ADDR_VAR 0 5
70327: PUSH
70328: LD_VAR 0 2
70332: PPUSH
70333: LD_INT 0
70335: PPUSH
70336: CALL_OW 517
70340: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
70341: LD_ADDR_VAR 0 4
70345: PUSH
70346: DOUBLE
70347: LD_INT 1
70349: DEC
70350: ST_TO_ADDR
70351: LD_VAR 0 5
70355: PUSH
70356: LD_INT 1
70358: ARRAY
70359: PUSH
70360: FOR_TO
70361: IFFALSE 70440
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
70363: LD_VAR 0 5
70367: PUSH
70368: LD_INT 1
70370: ARRAY
70371: PUSH
70372: LD_VAR 0 4
70376: ARRAY
70377: PPUSH
70378: LD_VAR 0 5
70382: PUSH
70383: LD_INT 2
70385: ARRAY
70386: PUSH
70387: LD_VAR 0 4
70391: ARRAY
70392: PPUSH
70393: CALL_OW 351
70397: IFFALSE 70438
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
70399: LD_VAR 0 5
70403: PUSH
70404: LD_INT 1
70406: ARRAY
70407: PUSH
70408: LD_VAR 0 4
70412: ARRAY
70413: PPUSH
70414: LD_VAR 0 5
70418: PUSH
70419: LD_INT 2
70421: ARRAY
70422: PUSH
70423: LD_VAR 0 4
70427: ARRAY
70428: PPUSH
70429: LD_VAR 0 1
70433: PPUSH
70434: CALL_OW 244
// end ;
70438: GO 70360
70440: POP
70441: POP
// end ; end_of_file
70442: LD_VAR 0 3
70446: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70447: LD_VAR 0 1
70451: PPUSH
70452: LD_VAR 0 2
70456: PPUSH
70457: LD_VAR 0 3
70461: PPUSH
70462: LD_VAR 0 4
70466: PPUSH
70467: LD_VAR 0 5
70471: PPUSH
70472: LD_VAR 0 6
70476: PPUSH
70477: CALL 6148 0 6
// end ;
70481: PPOPN 6
70483: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
70484: LD_INT 0
70486: PPUSH
// begin if not units then
70487: LD_VAR 0 1
70491: NOT
70492: IFFALSE 70496
// exit ;
70494: GO 70496
// end ;
70496: PPOPN 7
70498: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70499: CALL 6035 0 0
// end ; end_of_file
70503: PPOPN 1
70505: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70506: LD_VAR 0 1
70510: PUSH
70511: LD_INT 200
70513: DOUBLE
70514: GREATEREQUAL
70515: IFFALSE 70523
70517: LD_INT 299
70519: DOUBLE
70520: LESSEQUAL
70521: IFTRUE 70525
70523: GO 70557
70525: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70526: LD_VAR 0 1
70530: PPUSH
70531: LD_VAR 0 2
70535: PPUSH
70536: LD_VAR 0 3
70540: PPUSH
70541: LD_VAR 0 4
70545: PPUSH
70546: LD_VAR 0 5
70550: PPUSH
70551: CALL 22588 0 5
70555: GO 70634
70557: LD_INT 300
70559: DOUBLE
70560: GREATEREQUAL
70561: IFFALSE 70569
70563: LD_INT 399
70565: DOUBLE
70566: LESSEQUAL
70567: IFTRUE 70571
70569: GO 70633
70571: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70572: LD_VAR 0 1
70576: PPUSH
70577: LD_VAR 0 2
70581: PPUSH
70582: LD_VAR 0 3
70586: PPUSH
70587: LD_VAR 0 4
70591: PPUSH
70592: LD_VAR 0 5
70596: PPUSH
70597: LD_VAR 0 6
70601: PPUSH
70602: LD_VAR 0 7
70606: PPUSH
70607: LD_VAR 0 8
70611: PPUSH
70612: LD_VAR 0 9
70616: PPUSH
70617: LD_VAR 0 10
70621: PPUSH
70622: LD_VAR 0 11
70626: PPUSH
70627: CALL 18496 0 11
70631: GO 70634
70633: POP
// end ;
70634: PPOPN 11
70636: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70637: LD_VAR 0 1
70641: PPUSH
70642: LD_VAR 0 2
70646: PPUSH
70647: LD_VAR 0 3
70651: PPUSH
70652: LD_VAR 0 4
70656: PPUSH
70657: LD_VAR 0 5
70661: PPUSH
70662: CALL 21973 0 5
// end ;
70666: PPOPN 5
70668: END
