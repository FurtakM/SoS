// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export selectedPeople ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect = 0 ;
  15: LD_ADDR_EXP 18
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene = 1 ;
  23: LD_ADDR_EXP 19
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans = [ ] ;
  31: LD_ADDR_EXP 12
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans = [ ] ;
  38: LD_ADDR_EXP 13
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles = [ ] ;
  45: LD_ADDR_EXP 14
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 11
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// resources = [ ] ;
  59: LD_ADDR_EXP 21
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// mission_prefix := 06_ ;
  66: LD_ADDR_EXP 22
  70: PUSH
  71: LD_STRING 06_
  73: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  74: LD_ADDR_EXP 23
  78: PUSH
  79: LD_STRING 05_
  81: ST_TO_ADDR
// CreateNature ;
  82: CALL 166 0 0
// PrepareDeltaBase ;
  86: CALL 2408 0 0
// LoadVehicles ;
  90: CALL 1448 0 0
// PrepareHeroes ;
  94: CALL 287 0 0
// PrepareRandoms ;
  98: CALL 1749 0 0
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 102: LD_ADDR_EXP 20
 106: PUSH
 107: LD_INT 22
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 2
 119: PUSH
 120: LD_INT 30
 122: PUSH
 123: LD_INT 6
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 30
 132: PUSH
 133: LD_INT 7
 135: PUSH
 136: EMPTY
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 30
 142: PUSH
 143: LD_INT 8
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: PPUSH
 160: CALL_OW 69
 164: ST_TO_ADDR
// end ;
 165: END
// export function CreateNature ; var i ; begin
 166: LD_INT 0
 168: PPUSH
 169: PPUSH
// uc_side := 0 ;
 170: LD_ADDR_OWVAR 20
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// uc_nation := 0 ;
 178: LD_ADDR_OWVAR 21
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// for i = 1 to 4 do
 186: LD_ADDR_VAR 0 2
 190: PUSH
 191: DOUBLE
 192: LD_INT 1
 194: DEC
 195: ST_TO_ADDR
 196: LD_INT 4
 198: PUSH
 199: FOR_TO
 200: IFFALSE 280
// begin hc_gallery :=  ;
 202: LD_ADDR_OWVAR 33
 206: PUSH
 207: LD_STRING 
 209: ST_TO_ADDR
// hc_name :=  ;
 210: LD_ADDR_OWVAR 26
 214: PUSH
 215: LD_STRING 
 217: ST_TO_ADDR
// hc_attr := [ rand ( 10 , 11 ) , rand ( 10 , 12 ) ] ;
 218: LD_ADDR_OWVAR 29
 222: PUSH
 223: LD_INT 10
 225: PPUSH
 226: LD_INT 11
 228: PPUSH
 229: CALL_OW 12
 233: PUSH
 234: LD_INT 10
 236: PPUSH
 237: LD_INT 12
 239: PPUSH
 240: CALL_OW 12
 244: PUSH
 245: EMPTY
 246: LIST
 247: LIST
 248: ST_TO_ADDR
// hc_class := class_apeman ;
 249: LD_ADDR_OWVAR 28
 253: PUSH
 254: LD_INT 12
 256: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 22 , 18 , 20 , false ) ;
 257: CALL_OW 44
 261: PPUSH
 262: LD_INT 22
 264: PPUSH
 265: LD_INT 18
 267: PPUSH
 268: LD_INT 20
 270: PPUSH
 271: LD_INT 0
 273: PPUSH
 274: CALL_OW 50
// end ;
 278: GO 199
 280: POP
 281: POP
// end ; end_of_file
 282: LD_VAR 0 1
 286: RET
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 287: LD_INT 0
 289: PPUSH
 290: PPUSH
 291: PPUSH
 292: PPUSH
 293: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 294: LD_ADDR_VAR 0 3
 298: PUSH
 299: LD_INT 22
 301: PUSH
 302: LD_INT 1
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: PUSH
 309: LD_INT 21
 311: PUSH
 312: LD_INT 3
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: PUSH
 319: LD_INT 30
 321: PUSH
 322: LD_INT 0
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: LIST
 333: PPUSH
 334: CALL_OW 69
 338: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , delta ) ;
 339: LD_VAR 0 3
 343: PUSH
 344: LD_INT 1
 346: ARRAY
 347: PPUSH
 348: LD_STRING delta
 350: PPUSH
 351: CALL_OW 500
// uc_side = 1 ;
 355: LD_ADDR_OWVAR 20
 359: PUSH
 360: LD_INT 1
 362: ST_TO_ADDR
// uc_nation = 1 ;
 363: LD_ADDR_OWVAR 21
 367: PUSH
 368: LD_INT 1
 370: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 371: LD_ADDR_EXP 1
 375: PUSH
 376: LD_STRING JMM
 378: PPUSH
 379: LD_INT 1
 381: PPUSH
 382: LD_EXP 23
 386: PPUSH
 387: CALL 24975 0 3
 391: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ,  ) ;
 392: LD_ADDR_EXP 16
 396: PUSH
 397: LD_STRING Harisson
 399: PPUSH
 400: LD_INT 0
 402: PPUSH
 403: LD_STRING 
 405: PPUSH
 406: CALL 24975 0 3
 410: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 411: LD_EXP 1
 415: PPUSH
 416: LD_VAR 0 3
 420: PUSH
 421: LD_INT 1
 423: ARRAY
 424: PPUSH
 425: CALL_OW 250
 429: PPUSH
 430: LD_VAR 0 3
 434: PUSH
 435: LD_INT 1
 437: ARRAY
 438: PPUSH
 439: CALL_OW 251
 443: PPUSH
 444: LD_INT 5
 446: PPUSH
 447: LD_INT 0
 449: PPUSH
 450: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 454: LD_EXP 1
 458: PPUSH
 459: LD_INT 1
 461: PPUSH
 462: CALL_OW 336
// Gladstone = PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
 466: LD_ADDR_EXP 2
 470: PUSH
 471: LD_STRING Gladstone
 473: PPUSH
 474: LD_INT 1
 476: PPUSH
 477: LD_EXP 23
 481: PPUSH
 482: CALL 24975 0 3
 486: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 487: LD_EXP 2
 491: PPUSH
 492: LD_VAR 0 3
 496: PUSH
 497: LD_INT 1
 499: ARRAY
 500: PPUSH
 501: CALL_OW 250
 505: PPUSH
 506: LD_VAR 0 3
 510: PUSH
 511: LD_INT 1
 513: ARRAY
 514: PPUSH
 515: CALL_OW 251
 519: PPUSH
 520: LD_INT 5
 522: PPUSH
 523: LD_INT 0
 525: PPUSH
 526: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 530: LD_EXP 2
 534: PPUSH
 535: LD_INT 4
 537: PPUSH
 538: CALL_OW 336
// Denis = PrepareUnit ( Denis , true , mission_prefix_prev ) ;
 542: LD_ADDR_EXP 3
 546: PUSH
 547: LD_STRING Denis
 549: PPUSH
 550: LD_INT 1
 552: PPUSH
 553: LD_EXP 23
 557: PPUSH
 558: CALL 24975 0 3
 562: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 563: LD_EXP 3
 567: PPUSH
 568: LD_VAR 0 3
 572: PUSH
 573: LD_INT 1
 575: ARRAY
 576: PPUSH
 577: CALL_OW 250
 581: PPUSH
 582: LD_VAR 0 3
 586: PUSH
 587: LD_INT 1
 589: ARRAY
 590: PPUSH
 591: CALL_OW 251
 595: PPUSH
 596: LD_INT 5
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 606: LD_EXP 3
 610: PPUSH
 611: LD_INT 4
 613: PPUSH
 614: CALL_OW 336
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 618: LD_STRING FrankInDelta
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 30
 628: PUSH
 629: LD_INT 1
 631: EQUAL
 632: IFFALSE 710
// begin Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 634: LD_ADDR_EXP 5
 638: PUSH
 639: LD_STRING Frank
 641: PPUSH
 642: LD_INT 1
 644: PPUSH
 645: LD_EXP 23
 649: PPUSH
 650: CALL 24975 0 3
 654: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 655: LD_EXP 5
 659: PPUSH
 660: LD_VAR 0 3
 664: PUSH
 665: LD_INT 1
 667: ARRAY
 668: PPUSH
 669: CALL_OW 250
 673: PPUSH
 674: LD_VAR 0 3
 678: PUSH
 679: LD_INT 1
 681: ARRAY
 682: PPUSH
 683: CALL_OW 251
 687: PPUSH
 688: LD_INT 5
 690: PPUSH
 691: LD_INT 0
 693: PPUSH
 694: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 698: LD_EXP 5
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 710: LD_STRING LisaInDelta
 712: PPUSH
 713: LD_INT 0
 715: PPUSH
 716: CALL_OW 30
 720: PUSH
 721: LD_INT 1
 723: EQUAL
 724: IFFALSE 802
// begin Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 726: LD_ADDR_EXP 4
 730: PUSH
 731: LD_STRING Lisa
 733: PPUSH
 734: LD_INT 1
 736: PPUSH
 737: LD_EXP 23
 741: PPUSH
 742: CALL 24975 0 3
 746: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 747: LD_EXP 4
 751: PPUSH
 752: LD_VAR 0 3
 756: PUSH
 757: LD_INT 1
 759: ARRAY
 760: PPUSH
 761: CALL_OW 250
 765: PPUSH
 766: LD_VAR 0 3
 770: PUSH
 771: LD_INT 1
 773: ARRAY
 774: PPUSH
 775: CALL_OW 251
 779: PPUSH
 780: LD_INT 5
 782: PPUSH
 783: LD_INT 0
 785: PPUSH
 786: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 790: LD_EXP 4
 794: PPUSH
 795: LD_INT 1
 797: PPUSH
 798: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 802: LD_STRING BobbyInDelta
 804: PPUSH
 805: LD_INT 0
 807: PPUSH
 808: CALL_OW 30
 812: PUSH
 813: LD_INT 1
 815: EQUAL
 816: IFFALSE 894
// begin Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 818: LD_ADDR_EXP 6
 822: PUSH
 823: LD_STRING Bobby
 825: PPUSH
 826: LD_INT 1
 828: PPUSH
 829: LD_EXP 23
 833: PPUSH
 834: CALL 24975 0 3
 838: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 839: LD_EXP 6
 843: PPUSH
 844: LD_VAR 0 3
 848: PUSH
 849: LD_INT 1
 851: ARRAY
 852: PPUSH
 853: CALL_OW 250
 857: PPUSH
 858: LD_VAR 0 3
 862: PUSH
 863: LD_INT 1
 865: ARRAY
 866: PPUSH
 867: CALL_OW 251
 871: PPUSH
 872: LD_INT 5
 874: PPUSH
 875: LD_INT 0
 877: PPUSH
 878: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 882: LD_EXP 6
 886: PPUSH
 887: LD_INT 1
 889: PPUSH
 890: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 894: LD_STRING CyrusInDelta
 896: PPUSH
 897: LD_INT 0
 899: PPUSH
 900: CALL_OW 30
 904: PUSH
 905: LD_INT 1
 907: EQUAL
 908: IFFALSE 986
// begin Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 7
 914: PUSH
 915: LD_STRING Cyrus
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 23
 925: PPUSH
 926: CALL 24975 0 3
 930: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 931: LD_EXP 7
 935: PPUSH
 936: LD_VAR 0 3
 940: PUSH
 941: LD_INT 1
 943: ARRAY
 944: PPUSH
 945: CALL_OW 250
 949: PPUSH
 950: LD_VAR 0 3
 954: PUSH
 955: LD_INT 1
 957: ARRAY
 958: PPUSH
 959: CALL_OW 251
 963: PPUSH
 964: LD_INT 5
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
 974: LD_EXP 7
 978: PPUSH
 979: LD_INT 1
 981: PPUSH
 982: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
 986: LD_STRING DonaldsonInDelta
 988: PPUSH
 989: LD_INT 0
 991: PPUSH
 992: CALL_OW 30
 996: PUSH
 997: LD_INT 1
 999: EQUAL
1000: IFFALSE 1078
// begin Donaldson = PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
1002: LD_ADDR_EXP 9
1006: PUSH
1007: LD_STRING Donaldson
1009: PPUSH
1010: LD_INT 1
1012: PPUSH
1013: LD_EXP 23
1017: PPUSH
1018: CALL 24975 0 3
1022: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1023: LD_EXP 9
1027: PPUSH
1028: LD_VAR 0 3
1032: PUSH
1033: LD_INT 1
1035: ARRAY
1036: PPUSH
1037: CALL_OW 250
1041: PPUSH
1042: LD_VAR 0 3
1046: PUSH
1047: LD_INT 1
1049: ARRAY
1050: PPUSH
1051: CALL_OW 251
1055: PPUSH
1056: LD_INT 5
1058: PPUSH
1059: LD_INT 0
1061: PPUSH
1062: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
1066: LD_EXP 9
1070: PPUSH
1071: LD_INT 1
1073: PPUSH
1074: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
1078: LD_STRING BrownInDelta
1080: PPUSH
1081: LD_INT 0
1083: PPUSH
1084: CALL_OW 30
1088: PUSH
1089: LD_INT 1
1091: EQUAL
1092: IFFALSE 1170
// begin Brown = PrepareUnit ( Brown , true , mission_prefix_prev ) ;
1094: LD_ADDR_EXP 8
1098: PUSH
1099: LD_STRING Brown
1101: PPUSH
1102: LD_INT 1
1104: PPUSH
1105: LD_EXP 23
1109: PPUSH
1110: CALL 24975 0 3
1114: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1115: LD_EXP 8
1119: PPUSH
1120: LD_VAR 0 3
1124: PUSH
1125: LD_INT 1
1127: ARRAY
1128: PPUSH
1129: CALL_OW 250
1133: PPUSH
1134: LD_VAR 0 3
1138: PUSH
1139: LD_INT 1
1141: ARRAY
1142: PPUSH
1143: CALL_OW 251
1147: PPUSH
1148: LD_INT 5
1150: PPUSH
1151: LD_INT 0
1153: PPUSH
1154: CALL_OW 50
// SetClass ( Brown , 2 ) ;
1158: LD_EXP 8
1162: PPUSH
1163: LD_INT 2
1165: PPUSH
1166: CALL_OW 336
// end ; others = CreateCharacterSet ( othersInDelta ) ;
1170: LD_ADDR_EXP 10
1174: PUSH
1175: LD_STRING othersInDelta
1177: PPUSH
1178: CALL_OW 31
1182: ST_TO_ADDR
// for i in others do
1183: LD_ADDR_VAR 0 2
1187: PUSH
1188: LD_EXP 10
1192: PUSH
1193: FOR_IN
1194: IFFALSE 1241
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1196: LD_VAR 0 2
1200: PPUSH
1201: LD_VAR 0 3
1205: PUSH
1206: LD_INT 1
1208: ARRAY
1209: PPUSH
1210: CALL_OW 250
1214: PPUSH
1215: LD_VAR 0 3
1219: PUSH
1220: LD_INT 1
1222: ARRAY
1223: PPUSH
1224: CALL_OW 251
1228: PPUSH
1229: LD_INT 35
1231: PPUSH
1232: LD_INT 0
1234: PPUSH
1235: CALL_OW 50
1239: GO 1193
1241: POP
1242: POP
// apemans = CreateCharacterSet ( apeInDelta ) ;
1243: LD_ADDR_EXP 12
1247: PUSH
1248: LD_STRING apeInDelta
1250: PPUSH
1251: CALL_OW 31
1255: ST_TO_ADDR
// uc_nation = 0 ;
1256: LD_ADDR_OWVAR 21
1260: PUSH
1261: LD_INT 0
1263: ST_TO_ADDR
// if apemans > 5 then
1264: LD_EXP 12
1268: PUSH
1269: LD_INT 5
1271: GREATER
1272: IFFALSE 1367
// begin for i := 1 to 5 do
1274: LD_ADDR_VAR 0 2
1278: PUSH
1279: DOUBLE
1280: LD_INT 1
1282: DEC
1283: ST_TO_ADDR
1284: LD_INT 5
1286: PUSH
1287: FOR_TO
1288: IFFALSE 1363
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1290: LD_EXP 12
1294: PUSH
1295: LD_VAR 0 2
1299: ARRAY
1300: PPUSH
1301: LD_VAR 0 3
1305: PUSH
1306: LD_INT 1
1308: ARRAY
1309: PPUSH
1310: CALL_OW 250
1314: PPUSH
1315: LD_VAR 0 3
1319: PUSH
1320: LD_INT 1
1322: ARRAY
1323: PPUSH
1324: CALL_OW 251
1328: PPUSH
1329: LD_INT 50
1331: PPUSH
1332: LD_INT 0
1334: PPUSH
1335: CALL_OW 50
// yourApemans = yourApemans ^ apemans [ i ] ;
1339: LD_ADDR_EXP 13
1343: PUSH
1344: LD_EXP 13
1348: PUSH
1349: LD_EXP 12
1353: PUSH
1354: LD_VAR 0 2
1358: ARRAY
1359: ADD
1360: ST_TO_ADDR
// end ;
1361: GO 1287
1363: POP
1364: POP
// end else
1365: GO 1443
// begin for i in apemans do
1367: LD_ADDR_VAR 0 2
1371: PUSH
1372: LD_EXP 12
1376: PUSH
1377: FOR_IN
1378: IFFALSE 1441
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1380: LD_VAR 0 2
1384: PPUSH
1385: LD_VAR 0 3
1389: PUSH
1390: LD_INT 1
1392: ARRAY
1393: PPUSH
1394: CALL_OW 250
1398: PPUSH
1399: LD_VAR 0 3
1403: PUSH
1404: LD_INT 1
1406: ARRAY
1407: PPUSH
1408: CALL_OW 251
1412: PPUSH
1413: LD_INT 50
1415: PPUSH
1416: LD_INT 0
1418: PPUSH
1419: CALL_OW 50
// yourApemans = yourApemans ^ i ;
1423: LD_ADDR_EXP 13
1427: PUSH
1428: LD_EXP 13
1432: PUSH
1433: LD_VAR 0 2
1437: ADD
1438: ST_TO_ADDR
// end ;
1439: GO 1377
1441: POP
1442: POP
// end ; end ;
1443: LD_VAR 0 1
1447: RET
// export function LoadVehicles ; var i , veh , tmp , vehicles ; begin
1448: LD_INT 0
1450: PPUSH
1451: PPUSH
1452: PPUSH
1453: PPUSH
1454: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1455: LD_ADDR_VAR 0 4
1459: PUSH
1460: LD_INT 22
1462: PUSH
1463: LD_INT 1
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PUSH
1470: LD_INT 21
1472: PUSH
1473: LD_INT 3
1475: PUSH
1476: EMPTY
1477: LIST
1478: LIST
1479: PUSH
1480: LD_INT 30
1482: PUSH
1483: LD_INT 0
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: LIST
1494: PPUSH
1495: CALL_OW 69
1499: ST_TO_ADDR
// uc_side = 1 ;
1500: LD_ADDR_OWVAR 20
1504: PUSH
1505: LD_INT 1
1507: ST_TO_ADDR
// vehicles = LoadVariable ( vehiclesInDelta , [ ] ) ;
1508: LD_ADDR_VAR 0 5
1512: PUSH
1513: LD_STRING vehiclesInDelta
1515: PPUSH
1516: EMPTY
1517: PPUSH
1518: CALL_OW 30
1522: ST_TO_ADDR
// for i = 1 to vehicles do
1523: LD_ADDR_VAR 0 2
1527: PUSH
1528: DOUBLE
1529: LD_INT 1
1531: DEC
1532: ST_TO_ADDR
1533: LD_VAR 0 5
1537: PUSH
1538: FOR_TO
1539: IFFALSE 1742
// begin if vehicles [ i + 4 ] = 11 or vehicles [ i ] = 3 then
1541: LD_VAR 0 5
1545: PUSH
1546: LD_VAR 0 2
1550: PUSH
1551: LD_INT 4
1553: PLUS
1554: ARRAY
1555: PUSH
1556: LD_INT 11
1558: EQUAL
1559: PUSH
1560: LD_VAR 0 5
1564: PUSH
1565: LD_VAR 0 2
1569: ARRAY
1570: PUSH
1571: LD_INT 3
1573: EQUAL
1574: OR
1575: IFFALSE 1726
// begin uc_nation = vehicles [ i ] ;
1577: LD_ADDR_OWVAR 21
1581: PUSH
1582: LD_VAR 0 5
1586: PUSH
1587: LD_VAR 0 2
1591: ARRAY
1592: ST_TO_ADDR
// vc_chassis = vehicles [ i + 1 ] ;
1593: LD_ADDR_OWVAR 37
1597: PUSH
1598: LD_VAR 0 5
1602: PUSH
1603: LD_VAR 0 2
1607: PUSH
1608: LD_INT 1
1610: PLUS
1611: ARRAY
1612: ST_TO_ADDR
// vc_engine = vehicles [ i + 2 ] ;
1613: LD_ADDR_OWVAR 39
1617: PUSH
1618: LD_VAR 0 5
1622: PUSH
1623: LD_VAR 0 2
1627: PUSH
1628: LD_INT 2
1630: PLUS
1631: ARRAY
1632: ST_TO_ADDR
// vc_control = vehicles [ i + 3 ] ;
1633: LD_ADDR_OWVAR 38
1637: PUSH
1638: LD_VAR 0 5
1642: PUSH
1643: LD_VAR 0 2
1647: PUSH
1648: LD_INT 3
1650: PLUS
1651: ARRAY
1652: ST_TO_ADDR
// vc_weapon = vehicles [ i + 4 ] ;
1653: LD_ADDR_OWVAR 40
1657: PUSH
1658: LD_VAR 0 5
1662: PUSH
1663: LD_VAR 0 2
1667: PUSH
1668: LD_INT 4
1670: PLUS
1671: ARRAY
1672: ST_TO_ADDR
// veh = CreateVehicle ;
1673: LD_ADDR_VAR 0 3
1677: PUSH
1678: CALL_OW 45
1682: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 40 , false ) ;
1683: LD_VAR 0 3
1687: PPUSH
1688: LD_VAR 0 4
1692: PUSH
1693: LD_INT 1
1695: ARRAY
1696: PPUSH
1697: CALL_OW 250
1701: PPUSH
1702: LD_VAR 0 4
1706: PUSH
1707: LD_INT 1
1709: ARRAY
1710: PPUSH
1711: CALL_OW 251
1715: PPUSH
1716: LD_INT 40
1718: PPUSH
1719: LD_INT 0
1721: PPUSH
1722: CALL_OW 50
// end ; i = i + 4 ;
1726: LD_ADDR_VAR 0 2
1730: PUSH
1731: LD_VAR 0 2
1735: PUSH
1736: LD_INT 4
1738: PLUS
1739: ST_TO_ADDR
// end ;
1740: GO 1538
1742: POP
1743: POP
// end ;
1744: LD_VAR 0 1
1748: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1749: LD_INT 0
1751: PPUSH
1752: PPUSH
1753: PPUSH
1754: PPUSH
1755: PPUSH
// uc_side = 1 ;
1756: LD_ADDR_OWVAR 20
1760: PUSH
1761: LD_INT 1
1763: ST_TO_ADDR
// uc_nation = 1 ;
1764: LD_ADDR_OWVAR 21
1768: PUSH
1769: LD_INT 1
1771: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1772: LD_ADDR_VAR 0 4
1776: PUSH
1777: LD_INT 22
1779: PUSH
1780: LD_INT 1
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: PUSH
1787: LD_INT 21
1789: PUSH
1790: LD_INT 3
1792: PUSH
1793: EMPTY
1794: LIST
1795: LIST
1796: PUSH
1797: LD_INT 30
1799: PUSH
1800: LD_INT 0
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: LIST
1811: PPUSH
1812: CALL_OW 69
1816: ST_TO_ADDR
// if FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] then
1817: LD_INT 22
1819: PUSH
1820: LD_INT 1
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PUSH
1827: LD_INT 25
1829: PUSH
1830: LD_INT 4
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 26
1839: PUSH
1840: LD_INT 1
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: LIST
1851: PUSH
1852: EMPTY
1853: LIST
1854: PPUSH
1855: CALL_OW 69
1859: PUSH
1860: LD_EXP 1
1864: PUSH
1865: LD_EXP 7
1869: PUSH
1870: LD_EXP 6
1874: PUSH
1875: LD_EXP 5
1879: PUSH
1880: LD_EXP 2
1884: PUSH
1885: LD_EXP 3
1889: PUSH
1890: LD_EXP 8
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: DIFF
1904: IFFALSE 2005
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) [ 1 ] else
1906: LD_ADDR_EXP 15
1910: PUSH
1911: LD_INT 22
1913: PUSH
1914: LD_INT 1
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PUSH
1921: LD_INT 25
1923: PUSH
1924: LD_INT 4
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PUSH
1931: LD_INT 26
1933: PUSH
1934: LD_INT 1
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: LIST
1945: PUSH
1946: EMPTY
1947: LIST
1948: PPUSH
1949: CALL_OW 69
1953: PUSH
1954: LD_EXP 1
1958: PUSH
1959: LD_EXP 7
1963: PUSH
1964: LD_EXP 6
1968: PUSH
1969: LD_EXP 5
1973: PUSH
1974: LD_EXP 2
1978: PUSH
1979: LD_EXP 3
1983: PUSH
1984: LD_EXP 8
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: DIFF
1998: PUSH
1999: LD_INT 1
2001: ARRAY
2002: ST_TO_ADDR
2003: GO 2152
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
2005: LD_ADDR_VAR 0 5
2009: PUSH
2010: LD_INT 22
2012: PUSH
2013: LD_INT 1
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 26
2022: PUSH
2023: LD_INT 1
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PUSH
2034: EMPTY
2035: LIST
2036: PPUSH
2037: CALL_OW 69
2041: PUSH
2042: LD_EXP 1
2046: PUSH
2047: LD_EXP 7
2051: PUSH
2052: LD_EXP 6
2056: PUSH
2057: LD_EXP 5
2061: PUSH
2062: LD_EXP 2
2066: PUSH
2067: LD_EXP 3
2071: PUSH
2072: LD_EXP 8
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: DIFF
2086: ST_TO_ADDR
// if filter then
2087: LD_VAR 0 5
2091: IFFALSE 2152
// for i in filter do
2093: LD_ADDR_VAR 0 2
2097: PUSH
2098: LD_VAR 0 5
2102: PUSH
2103: FOR_IN
2104: IFFALSE 2150
// if GetSkill ( i , 4 ) >= 4 then
2106: LD_VAR 0 2
2110: PPUSH
2111: LD_INT 4
2113: PPUSH
2114: CALL_OW 259
2118: PUSH
2119: LD_INT 4
2121: GREATEREQUAL
2122: IFFALSE 2148
// begin deltaDoctor := i ;
2124: LD_ADDR_EXP 15
2128: PUSH
2129: LD_VAR 0 2
2133: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
2134: LD_EXP 15
2138: PPUSH
2139: LD_INT 4
2141: PPUSH
2142: CALL_OW 336
// break ;
2146: GO 2150
// end ;
2148: GO 2103
2150: POP
2151: POP
// end ; for i = 1 to 7 do
2152: LD_ADDR_VAR 0 2
2156: PUSH
2157: DOUBLE
2158: LD_INT 1
2160: DEC
2161: ST_TO_ADDR
2162: LD_INT 7
2164: PUSH
2165: FOR_TO
2166: IFFALSE 2303
// begin hc_gallery =  ;
2168: LD_ADDR_OWVAR 33
2172: PUSH
2173: LD_STRING 
2175: ST_TO_ADDR
// hc_name =  ;
2176: LD_ADDR_OWVAR 26
2180: PUSH
2181: LD_STRING 
2183: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) ) ;
2184: LD_INT 0
2186: PPUSH
2187: LD_INT 1
2189: PUSH
2190: LD_INT 2
2192: PUSH
2193: LD_INT 3
2195: PUSH
2196: LD_INT 4
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: PUSH
2205: LD_INT 1
2207: PPUSH
2208: LD_INT 4
2210: PPUSH
2211: CALL_OW 12
2215: ARRAY
2216: PPUSH
2217: LD_INT 3
2219: PPUSH
2220: LD_INT 5
2222: PPUSH
2223: CALL_OW 12
2227: PPUSH
2228: CALL_OW 380
// un = CreateHuman ;
2232: LD_ADDR_VAR 0 3
2236: PUSH
2237: CALL_OW 44
2241: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2242: LD_ADDR_EXP 11
2246: PUSH
2247: LD_EXP 11
2251: PUSH
2252: LD_VAR 0 3
2256: ADD
2257: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2258: LD_VAR 0 3
2262: PPUSH
2263: LD_VAR 0 4
2267: PUSH
2268: LD_INT 1
2270: ARRAY
2271: PPUSH
2272: CALL_OW 250
2276: PPUSH
2277: LD_VAR 0 4
2281: PUSH
2282: LD_INT 1
2284: ARRAY
2285: PPUSH
2286: CALL_OW 251
2290: PPUSH
2291: LD_INT 15
2293: PPUSH
2294: LD_INT 0
2296: PPUSH
2297: CALL_OW 50
// end ;
2301: GO 2165
2303: POP
2304: POP
// if deltaDoctor then
2305: LD_EXP 15
2309: IFFALSE 2313
// exit ;
2311: GO 2403
// hc_gallery = Dawkins ;
2313: LD_ADDR_OWVAR 33
2317: PUSH
2318: LD_STRING Dawkins
2320: ST_TO_ADDR
// hc_face_number := 1 ;
2321: LD_ADDR_OWVAR 34
2325: PUSH
2326: LD_INT 1
2328: ST_TO_ADDR
// hc_name = Dr. Adam Charles Dawkins ;
2329: LD_ADDR_OWVAR 26
2333: PUSH
2334: LD_STRING Dr. Adam Charles Dawkins
2336: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 6 ) ;
2337: LD_INT 1
2339: PPUSH
2340: LD_INT 4
2342: PPUSH
2343: LD_INT 6
2345: PPUSH
2346: CALL_OW 380
// deltaDoctor = CreateHuman ;
2350: LD_ADDR_EXP 15
2354: PUSH
2355: CALL_OW 44
2359: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2360: LD_EXP 15
2364: PPUSH
2365: LD_VAR 0 4
2369: PUSH
2370: LD_INT 1
2372: ARRAY
2373: PPUSH
2374: CALL_OW 250
2378: PPUSH
2379: LD_VAR 0 4
2383: PUSH
2384: LD_INT 1
2386: ARRAY
2387: PPUSH
2388: CALL_OW 251
2392: PPUSH
2393: LD_INT 5
2395: PPUSH
2396: LD_INT 0
2398: PPUSH
2399: CALL_OW 50
// end ; end_of_file
2403: LD_VAR 0 1
2407: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2408: LD_INT 0
2410: PPUSH
2411: PPUSH
2412: PPUSH
2413: PPUSH
2414: PPUSH
2415: PPUSH
2416: PPUSH
// buildings = LoadVariable ( buildingsInDelta , [ ] ) ;
2417: LD_ADDR_VAR 0 5
2421: PUSH
2422: LD_STRING buildingsInDelta
2424: PPUSH
2425: EMPTY
2426: PPUSH
2427: CALL_OW 30
2431: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2432: LD_INT 68
2434: PPUSH
2435: LD_INT 40
2437: PPUSH
2438: LD_INT 1
2440: PPUSH
2441: CALL_OW 441
// uc_side = 1 ;
2445: LD_ADDR_OWVAR 20
2449: PUSH
2450: LD_INT 1
2452: ST_TO_ADDR
// uc_nation = 1 ;
2453: LD_ADDR_OWVAR 21
2457: PUSH
2458: LD_INT 1
2460: ST_TO_ADDR
// for i = 1 to buildings do
2461: LD_ADDR_VAR 0 2
2465: PUSH
2466: DOUBLE
2467: LD_INT 1
2469: DEC
2470: ST_TO_ADDR
2471: LD_VAR 0 5
2475: PUSH
2476: FOR_TO
2477: IFFALSE 2775
// begin bc_type = buildings [ i ] [ 1 ] ;
2479: LD_ADDR_OWVAR 42
2483: PUSH
2484: LD_VAR 0 5
2488: PUSH
2489: LD_VAR 0 2
2493: ARRAY
2494: PUSH
2495: LD_INT 1
2497: ARRAY
2498: ST_TO_ADDR
// bc_level = buildings [ i ] [ 2 ] ;
2499: LD_ADDR_OWVAR 43
2503: PUSH
2504: LD_VAR 0 5
2508: PUSH
2509: LD_VAR 0 2
2513: ARRAY
2514: PUSH
2515: LD_INT 2
2517: ARRAY
2518: ST_TO_ADDR
// if bc_type = b_lab then
2519: LD_OWVAR 42
2523: PUSH
2524: LD_INT 6
2526: EQUAL
2527: IFFALSE 2545
// begin bc_kind1 = b_lab_basic ;
2529: LD_ADDR_OWVAR 44
2533: PUSH
2534: LD_INT 9
2536: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2537: LD_ADDR_OWVAR 45
2541: PUSH
2542: LD_INT 9
2544: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
2545: LD_OWVAR 42
2549: PUSH
2550: LD_INT 7
2552: EQUAL
2553: PUSH
2554: LD_OWVAR 42
2558: PUSH
2559: LD_INT 8
2561: EQUAL
2562: OR
2563: IFFALSE 2679
// begin if buildings [ i ] [ 6 ] then
2565: LD_VAR 0 5
2569: PUSH
2570: LD_VAR 0 2
2574: ARRAY
2575: PUSH
2576: LD_INT 6
2578: ARRAY
2579: IFFALSE 2601
// bc_kind1 = buildings [ i ] [ 6 ] ;
2581: LD_ADDR_OWVAR 44
2585: PUSH
2586: LD_VAR 0 5
2590: PUSH
2591: LD_VAR 0 2
2595: ARRAY
2596: PUSH
2597: LD_INT 6
2599: ARRAY
2600: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2601: LD_VAR 0 5
2605: PUSH
2606: LD_VAR 0 2
2610: ARRAY
2611: PUSH
2612: LD_INT 7
2614: ARRAY
2615: IFFALSE 2637
// bc_kind2 = buildings [ i ] [ 7 ] ;
2617: LD_ADDR_OWVAR 45
2621: PUSH
2622: LD_VAR 0 5
2626: PUSH
2627: LD_VAR 0 2
2631: ARRAY
2632: PUSH
2633: LD_INT 7
2635: ARRAY
2636: ST_TO_ADDR
// if not buildings [ i ] [ 6 ] and not buildings [ i ] [ 7 ] then
2637: LD_VAR 0 5
2641: PUSH
2642: LD_VAR 0 2
2646: ARRAY
2647: PUSH
2648: LD_INT 6
2650: ARRAY
2651: NOT
2652: PUSH
2653: LD_VAR 0 5
2657: PUSH
2658: LD_VAR 0 2
2662: ARRAY
2663: PUSH
2664: LD_INT 7
2666: ARRAY
2667: NOT
2668: AND
2669: IFFALSE 2679
// bc_type := b_lab ;
2671: LD_ADDR_OWVAR 42
2675: PUSH
2676: LD_INT 6
2678: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2679: LD_ADDR_VAR 0 4
2683: PUSH
2684: LD_VAR 0 5
2688: PUSH
2689: LD_VAR 0 2
2693: ARRAY
2694: PUSH
2695: LD_INT 3
2697: ARRAY
2698: PPUSH
2699: LD_VAR 0 5
2703: PUSH
2704: LD_VAR 0 2
2708: ARRAY
2709: PUSH
2710: LD_INT 4
2712: ARRAY
2713: PPUSH
2714: LD_VAR 0 5
2718: PUSH
2719: LD_VAR 0 2
2723: ARRAY
2724: PUSH
2725: LD_INT 5
2727: ARRAY
2728: PPUSH
2729: CALL_OW 47
2733: ST_TO_ADDR
// if GetBType ( building ) = b_bunker then
2734: LD_VAR 0 4
2738: PPUSH
2739: CALL_OW 266
2743: PUSH
2744: LD_INT 32
2746: EQUAL
2747: IFFALSE 2773
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2749: LD_VAR 0 4
2753: PPUSH
2754: LD_VAR 0 5
2758: PUSH
2759: LD_VAR 0 2
2763: ARRAY
2764: PUSH
2765: LD_INT 8
2767: ARRAY
2768: PPUSH
2769: CALL_OW 431
// end ;
2773: GO 2476
2775: POP
2776: POP
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2777: LD_ADDR_VAR 0 6
2781: PUSH
2782: LD_INT 22
2784: PUSH
2785: LD_INT 1
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: LD_INT 2
2794: PUSH
2795: LD_INT 30
2797: PUSH
2798: LD_INT 6
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: PUSH
2805: LD_INT 30
2807: PUSH
2808: LD_INT 7
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: PUSH
2815: LD_INT 30
2817: PUSH
2818: LD_INT 8
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: LIST
2829: LIST
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PPUSH
2835: CALL_OW 69
2839: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2840: LD_ADDR_VAR 0 7
2844: PUSH
2845: LD_INT 22
2847: PUSH
2848: LD_INT 1
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: LD_INT 30
2857: PUSH
2858: LD_INT 0
2860: PUSH
2861: EMPTY
2862: LIST
2863: LIST
2864: PUSH
2865: EMPTY
2866: LIST
2867: LIST
2868: PPUSH
2869: CALL_OW 69
2873: ST_TO_ADDR
// if lab > 0 and tmp > 0 then
2874: LD_VAR 0 6
2878: PUSH
2879: LD_INT 0
2881: GREATER
2882: PUSH
2883: LD_VAR 0 7
2887: PUSH
2888: LD_INT 0
2890: GREATER
2891: AND
2892: IFFALSE 2902
// baseCorrect = 1 ;
2894: LD_ADDR_EXP 18
2898: PUSH
2899: LD_INT 1
2901: ST_TO_ADDR
// if baseCorrect = 0 then
2902: LD_EXP 18
2906: PUSH
2907: LD_INT 0
2909: EQUAL
2910: IFFALSE 3283
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2912: LD_ADDR_VAR 0 2
2916: PUSH
2917: LD_INT 22
2919: PUSH
2920: LD_INT 1
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: PUSH
2927: LD_INT 21
2929: PUSH
2930: LD_INT 3
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: PPUSH
2941: CALL_OW 69
2945: PUSH
2946: FOR_IN
2947: IFFALSE 2960
// RemoveUnit ( i ) ;
2949: LD_VAR 0 2
2953: PPUSH
2954: CALL_OW 64
2958: GO 2946
2960: POP
2961: POP
// uc_nation = 1 ;
2962: LD_ADDR_OWVAR 21
2966: PUSH
2967: LD_INT 1
2969: ST_TO_ADDR
// uc_side = 1 ;
2970: LD_ADDR_OWVAR 20
2974: PUSH
2975: LD_INT 1
2977: ST_TO_ADDR
// bc_level = 5 ;
2978: LD_ADDR_OWVAR 43
2982: PUSH
2983: LD_INT 5
2985: ST_TO_ADDR
// bc_type = b_depot ;
2986: LD_ADDR_OWVAR 42
2990: PUSH
2991: LD_INT 0
2993: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2994: LD_INT 50
2996: PPUSH
2997: LD_INT 22
2999: PPUSH
3000: LD_INT 0
3002: PPUSH
3003: CALL_OW 47
// bc_type = b_bunker ;
3007: LD_ADDR_OWVAR 42
3011: PUSH
3012: LD_INT 32
3014: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
3015: LD_ADDR_VAR 0 4
3019: PUSH
3020: LD_INT 68
3022: PPUSH
3023: LD_INT 24
3025: PPUSH
3026: LD_INT 4
3028: PPUSH
3029: CALL_OW 47
3033: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
3034: LD_VAR 0 4
3038: PPUSH
3039: LD_INT 4
3041: PUSH
3042: LD_INT 11
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PUSH
3049: LD_INT 1
3051: PPUSH
3052: LD_INT 2
3054: PPUSH
3055: CALL_OW 12
3059: ARRAY
3060: PPUSH
3061: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
3065: LD_ADDR_VAR 0 4
3069: PUSH
3070: LD_INT 71
3072: PPUSH
3073: LD_INT 34
3075: PPUSH
3076: LD_INT 4
3078: PPUSH
3079: CALL_OW 47
3083: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
3084: LD_VAR 0 4
3088: PPUSH
3089: LD_INT 4
3091: PUSH
3092: LD_INT 11
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PUSH
3099: LD_INT 1
3101: PPUSH
3102: LD_INT 2
3104: PPUSH
3105: CALL_OW 12
3109: ARRAY
3110: PPUSH
3111: CALL_OW 431
// bc_type = 31 ;
3115: LD_ADDR_OWVAR 42
3119: PUSH
3120: LD_INT 31
3122: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
3123: LD_INT 51
3125: PPUSH
3126: LD_INT 7
3128: PPUSH
3129: LD_INT 3
3131: PPUSH
3132: CALL_OW 47
// bc_type = b_oil_mine ;
3136: LD_ADDR_OWVAR 42
3140: PUSH
3141: LD_INT 29
3143: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
3144: LD_INT 68
3146: PPUSH
3147: LD_INT 40
3149: PPUSH
3150: LD_INT 1
3152: PPUSH
3153: CALL_OW 47
// bc_type = b_workshop ;
3157: LD_ADDR_OWVAR 42
3161: PUSH
3162: LD_INT 2
3164: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3165: LD_INT 38
3167: PPUSH
3168: LD_INT 20
3170: PPUSH
3171: LD_INT 2
3173: PPUSH
3174: CALL_OW 47
// bc_type = b_armoury ;
3178: LD_ADDR_OWVAR 42
3182: PUSH
3183: LD_INT 4
3185: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3186: LD_INT 38
3188: PPUSH
3189: LD_INT 20
3191: PPUSH
3192: LD_INT 2
3194: PPUSH
3195: CALL_OW 47
// bc_type = b_solar_power ;
3199: LD_ADDR_OWVAR 42
3203: PUSH
3204: LD_INT 27
3206: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3207: LD_INT 46
3209: PPUSH
3210: LD_INT 12
3212: PPUSH
3213: LD_INT 1
3215: PPUSH
3216: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3220: LD_INT 48
3222: PPUSH
3223: LD_INT 11
3225: PPUSH
3226: LD_INT 2
3228: PPUSH
3229: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 49 , 11 , 3 ) ;
3233: LD_INT 49
3235: PPUSH
3236: LD_INT 11
3238: PPUSH
3239: LD_INT 3
3241: PPUSH
3242: CALL_OW 47
// bc_type = b_lab_half ;
3246: LD_ADDR_OWVAR 42
3250: PUSH
3251: LD_INT 7
3253: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
3254: LD_ADDR_OWVAR 44
3258: PUSH
3259: LD_INT 15
3261: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
3262: LD_ADDR_OWVAR 45
3266: PUSH
3267: LD_INT 9
3269: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3270: LD_INT 42
3272: PPUSH
3273: LD_INT 15
3275: PPUSH
3276: LD_INT 2
3278: PPUSH
3279: CALL_OW 47
// end ; end ; end_of_file
3283: LD_VAR 0 1
3287: RET
// every 1 do var i , j , tmp ;
3288: GO 3290
3290: DISABLE
3291: LD_INT 0
3293: PPUSH
3294: PPUSH
3295: PPUSH
// begin InGameOn ;
3296: CALL_OW 8
// CenterNowOnUnits ( lab [ 1 ] ) ;
3300: LD_EXP 20
3304: PUSH
3305: LD_INT 1
3307: ARRAY
3308: PPUSH
3309: CALL_OW 87
// if IsOK ( Denis ) then
3313: LD_EXP 3
3317: PPUSH
3318: CALL_OW 302
3322: IFFALSE 3350
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3324: LD_INT 6
3326: PPUSH
3327: LD_INT 1
3329: PPUSH
3330: LD_INT 2
3332: PPUSH
3333: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3337: LD_INT 20
3339: PPUSH
3340: LD_INT 1
3342: PPUSH
3343: LD_INT 1
3345: PPUSH
3346: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3350: LD_EXP 1
3354: PPUSH
3355: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3359: LD_EXP 1
3363: PPUSH
3364: LD_EXP 15
3368: PPUSH
3369: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3373: LD_INT 35
3375: PPUSH
3376: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3380: LD_EXP 15
3384: PPUSH
3385: LD_EXP 1
3389: PPUSH
3390: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3394: LD_EXP 1
3398: PPUSH
3399: LD_EXP 15
3403: PPUSH
3404: CALL_OW 296
3408: PUSH
3409: LD_INT 5
3411: LESS
3412: IFFALSE 3373
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3414: LD_EXP 15
3418: PPUSH
3419: LD_EXP 1
3423: PPUSH
3424: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3428: LD_EXP 1
3432: PPUSH
3433: LD_STRING D1-JMM-1
3435: PPUSH
3436: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3440: LD_EXP 15
3444: PPUSH
3445: LD_STRING D1-Sci-1
3447: PPUSH
3448: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3452: LD_EXP 1
3456: PUSH
3457: LD_EXP 15
3461: PUSH
3462: LD_EXP 3
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: LIST
3471: PPUSH
3472: LD_EXP 20
3476: PUSH
3477: LD_INT 1
3479: ARRAY
3480: PPUSH
3481: CALL_OW 120
// end ;
3485: PPOPN 3
3487: END
// every 0 0$2 trigger IsInUnit ( JMM ) = lab [ 1 ] and IsInUnit ( DeltaDoctor ) = lab [ 1 ] do var i , j , tmp ;
3488: LD_EXP 1
3492: PPUSH
3493: CALL_OW 310
3497: PUSH
3498: LD_EXP 20
3502: PUSH
3503: LD_INT 1
3505: ARRAY
3506: EQUAL
3507: PUSH
3508: LD_EXP 15
3512: PPUSH
3513: CALL_OW 310
3517: PUSH
3518: LD_EXP 20
3522: PUSH
3523: LD_INT 1
3525: ARRAY
3526: EQUAL
3527: AND
3528: IFFALSE 4074
3530: GO 3532
3532: DISABLE
3533: LD_INT 0
3535: PPUSH
3536: PPUSH
3537: PPUSH
// begin CenterNowOnUnits ( lab [ 1 ] ) ;
3538: LD_EXP 20
3542: PUSH
3543: LD_INT 1
3545: ARRAY
3546: PPUSH
3547: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3551: LD_EXP 1
3555: PPUSH
3556: LD_STRING D1-JMM-2
3558: PPUSH
3559: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3563: LD_EXP 15
3567: PPUSH
3568: LD_STRING D1-Sci-2
3570: PPUSH
3571: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3575: LD_EXP 1
3579: PPUSH
3580: LD_STRING D1-JMM-3
3582: PPUSH
3583: CALL_OW 88
// if IsOK ( Denis ) then
3587: LD_EXP 3
3591: PPUSH
3592: CALL_OW 302
3596: IFFALSE 3612
// Say ( DeltaDoctor , D1-Sci-3 ) else
3598: LD_EXP 15
3602: PPUSH
3603: LD_STRING D1-Sci-3
3605: PPUSH
3606: CALL_OW 88
3610: GO 3624
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3612: LD_EXP 15
3616: PPUSH
3617: LD_STRING D1-Sci-3a
3619: PPUSH
3620: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3624: LD_EXP 1
3628: PPUSH
3629: LD_STRING D1-JMM-4
3631: PPUSH
3632: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3636: LD_ADDR_VAR 0 3
3640: PUSH
3641: LD_INT 22
3643: PUSH
3644: LD_INT 1
3646: PUSH
3647: EMPTY
3648: LIST
3649: LIST
3650: PUSH
3651: LD_INT 25
3653: PUSH
3654: LD_INT 4
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: PUSH
3661: LD_INT 3
3663: PUSH
3664: LD_INT 54
3666: PUSH
3667: EMPTY
3668: LIST
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: LIST
3678: PPUSH
3679: CALL_OW 69
3683: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3684: LD_ADDR_VAR 0 1
3688: PUSH
3689: LD_INT 22
3691: PUSH
3692: LD_INT 0
3694: PUSH
3695: EMPTY
3696: LIST
3697: LIST
3698: PPUSH
3699: CALL_OW 69
3703: PUSH
3704: FOR_IN
3705: IFFALSE 3755
// for j in tmp do
3707: LD_ADDR_VAR 0 2
3711: PUSH
3712: LD_VAR 0 3
3716: PUSH
3717: FOR_IN
3718: IFFALSE 3751
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3720: LD_VAR 0 2
3724: PPUSH
3725: LD_VAR 0 1
3729: PPUSH
3730: CALL_OW 250
3734: PPUSH
3735: LD_VAR 0 1
3739: PPUSH
3740: CALL_OW 251
3744: PPUSH
3745: CALL_OW 191
3749: GO 3717
3751: POP
3752: POP
3753: GO 3704
3755: POP
3756: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3757: LD_EXP 15
3761: PPUSH
3762: LD_STRING D1-Sci-4
3764: PPUSH
3765: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3769: LD_EXP 1
3773: PPUSH
3774: LD_STRING D1-JMM-5
3776: PPUSH
3777: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3781: LD_EXP 15
3785: PPUSH
3786: LD_STRING D1-Sci-5
3788: PPUSH
3789: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3793: LD_EXP 1
3797: PPUSH
3798: LD_STRING D1-JMM-6
3800: PPUSH
3801: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3805: LD_EXP 16
3809: PPUSH
3810: LD_STRING D1-Har-6
3812: PPUSH
3813: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3817: LD_EXP 1
3821: PPUSH
3822: LD_STRING D1-JMM-7
3824: PPUSH
3825: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3829: LD_EXP 16
3833: PPUSH
3834: LD_STRING D1-Har-7
3836: PPUSH
3837: CALL_OW 94
// if IsOK ( Denis ) then
3841: LD_EXP 3
3845: PPUSH
3846: CALL_OW 302
3850: IFFALSE 3864
// Say ( JMM , D1-JMM-8 ) ;
3852: LD_EXP 1
3856: PPUSH
3857: LD_STRING D1-JMM-8
3859: PPUSH
3860: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3864: LD_EXP 1
3868: PPUSH
3869: LD_STRING D1-JMM-8a
3871: PPUSH
3872: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3876: LD_EXP 16
3880: PPUSH
3881: LD_STRING D1-Har-8
3883: PPUSH
3884: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3888: LD_EXP 1
3892: PPUSH
3893: LD_STRING D1-JMM-9
3895: PPUSH
3896: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3900: LD_EXP 16
3904: PPUSH
3905: LD_STRING D1-Har-9
3907: PPUSH
3908: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3912: LD_EXP 1
3916: PPUSH
3917: LD_STRING D1-JMM-10
3919: PPUSH
3920: CALL_OW 88
// if IsOK ( Denis ) then
3924: LD_EXP 3
3928: PPUSH
3929: CALL_OW 302
3933: IFFALSE 3947
// Say ( JMM , D1-JMM-10a ) ;
3935: LD_EXP 1
3939: PPUSH
3940: LD_STRING D1-JMM-10a
3942: PPUSH
3943: CALL_OW 88
// SelectDeltaCharacters ;
3947: CALL 4433 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 150 ) ;
3951: LD_EXP 20
3955: PUSH
3956: LD_INT 1
3958: ARRAY
3959: PPUSH
3960: CALL_OW 274
3964: PPUSH
3965: LD_INT 1
3967: PPUSH
3968: LD_INT 150
3970: PPUSH
3971: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) > 0 then
3975: LD_INT 22
3977: PUSH
3978: LD_INT 1
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: PUSH
3985: LD_INT 30
3987: PUSH
3988: LD_INT 29
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PUSH
3995: EMPTY
3996: LIST
3997: LIST
3998: PPUSH
3999: CALL_OW 69
4003: PUSH
4004: LD_INT 0
4006: GREATER
4007: IFFALSE 4033
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
4009: LD_EXP 20
4013: PUSH
4014: LD_INT 1
4016: ARRAY
4017: PPUSH
4018: CALL_OW 274
4022: PPUSH
4023: LD_INT 2
4025: PPUSH
4026: LD_INT 300
4028: PPUSH
4029: CALL_OW 277
// InGameOff ;
4033: CALL_OW 9
// Query ( Q1 ) ;
4037: LD_STRING Q1
4039: PPUSH
4040: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
4044: LD_INT 3
4046: PPUSH
4047: LD_INT 1
4049: PPUSH
4050: CALL_OW 424
// if IsInUnit ( JMM ) then
4054: LD_EXP 1
4058: PPUSH
4059: CALL_OW 310
4063: IFFALSE 4074
// ComExitBuilding ( JMM ) ;
4065: LD_EXP 1
4069: PPUSH
4070: CALL_OW 122
// end ;
4074: PPOPN 3
4076: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
4077: LD_INT 3
4079: PPUSH
4080: LD_INT 22
4082: PUSH
4083: LD_INT 1
4085: PUSH
4086: EMPTY
4087: LIST
4088: LIST
4089: PUSH
4090: LD_INT 21
4092: PUSH
4093: LD_INT 1
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: PPUSH
4104: CALL_OW 71
4108: PUSH
4109: LD_INT 0
4111: EQUAL
4112: IFFALSE 4430
4114: GO 4116
4116: DISABLE
4117: LD_INT 0
4119: PPUSH
4120: PPUSH
// begin SaveDeltaCharacters ;
4121: CALL 4787 0 0
// if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) then
4125: LD_INT 3
4127: PPUSH
4128: LD_INT 21
4130: PUSH
4131: LD_INT 2
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: PUSH
4138: LD_INT 3
4140: PUSH
4141: LD_INT 58
4143: PUSH
4144: EMPTY
4145: LIST
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: PPUSH
4155: CALL_OW 70
4159: IFFALSE 4416
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
4161: LD_ADDR_VAR 0 1
4165: PUSH
4166: LD_INT 3
4168: PPUSH
4169: LD_INT 21
4171: PUSH
4172: LD_INT 2
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PUSH
4179: LD_INT 3
4181: PUSH
4182: LD_INT 58
4184: PUSH
4185: EMPTY
4186: LIST
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: PPUSH
4196: CALL_OW 70
4200: PUSH
4201: FOR_IN
4202: IFFALSE 4414
// begin cargoType = GetCargoType ( i ) ;
4204: LD_ADDR_VAR 0 2
4208: PUSH
4209: LD_VAR 0 1
4213: PPUSH
4214: CALL_OW 288
4218: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4219: LD_VAR 0 1
4223: PPUSH
4224: CALL_OW 264
4228: PUSH
4229: LD_INT 12
4231: EQUAL
4232: IFFALSE 4329
// yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] else
4234: LD_ADDR_EXP 14
4238: PUSH
4239: LD_EXP 14
4243: PUSH
4244: LD_VAR 0 1
4248: PPUSH
4249: CALL_OW 248
4253: PUSH
4254: LD_VAR 0 1
4258: PPUSH
4259: CALL_OW 265
4263: PUSH
4264: LD_VAR 0 1
4268: PPUSH
4269: CALL_OW 262
4273: PUSH
4274: LD_VAR 0 1
4278: PPUSH
4279: CALL_OW 263
4283: PUSH
4284: LD_VAR 0 1
4288: PPUSH
4289: CALL_OW 264
4293: PUSH
4294: LD_VAR 0 2
4298: PUSH
4299: LD_VAR 0 1
4303: PPUSH
4304: LD_VAR 0 2
4308: PPUSH
4309: CALL_OW 289
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: PUSH
4323: EMPTY
4324: LIST
4325: ADD
4326: ST_TO_ADDR
4327: GO 4400
// yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4329: LD_ADDR_EXP 14
4333: PUSH
4334: LD_EXP 14
4338: PUSH
4339: LD_VAR 0 1
4343: PPUSH
4344: CALL_OW 248
4348: PUSH
4349: LD_VAR 0 1
4353: PPUSH
4354: CALL_OW 265
4358: PUSH
4359: LD_VAR 0 1
4363: PPUSH
4364: CALL_OW 262
4368: PUSH
4369: LD_VAR 0 1
4373: PPUSH
4374: CALL_OW 263
4378: PUSH
4379: LD_VAR 0 1
4383: PPUSH
4384: CALL_OW 264
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: PUSH
4396: EMPTY
4397: LIST
4398: ADD
4399: ST_TO_ADDR
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4400: LD_EXP 14
4404: PPUSH
4405: LD_STRING 06_VehiclesIn06_1
4407: PPUSH
4408: CALL_OW 39
// end ;
4412: GO 4201
4414: POP
4415: POP
// end ; SaveCargos ;
4416: CALL 5543 0 0
// ChangeMap ( 6 , %_cont ) ;
4420: LD_INT 6
4422: PPUSH
4423: LD_STRING %_cont
4425: PPUSH
4426: CALL_OW 340
// end ; end_of_file
4430: PPOPN 2
4432: END
// export function SelectDeltaCharacters ; var i , yourPeople ; begin
4433: LD_INT 0
4435: PPUSH
4436: PPUSH
4437: PPUSH
// selectedPeople := [ ] ;
4438: LD_ADDR_EXP 17
4442: PUSH
4443: EMPTY
4444: ST_TO_ADDR
// yourPeople = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4445: LD_ADDR_VAR 0 3
4449: PUSH
4450: LD_INT 22
4452: PUSH
4453: LD_INT 1
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PUSH
4460: LD_INT 21
4462: PUSH
4463: LD_INT 1
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PUSH
4470: LD_INT 2
4472: PUSH
4473: LD_INT 25
4475: PUSH
4476: LD_INT 1
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: LD_INT 25
4485: PUSH
4486: LD_INT 2
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: LD_INT 25
4495: PUSH
4496: LD_INT 3
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 25
4505: PUSH
4506: LD_INT 4
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: LIST
4524: PPUSH
4525: CALL_OW 69
4529: PUSH
4530: LD_EXP 1
4534: PUSH
4535: LD_EXP 15
4539: PUSH
4540: LD_EXP 3
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: LIST
4549: DIFF
4550: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4551: LD_ADDR_EXP 17
4555: PUSH
4556: LD_STRING text
4558: PPUSH
4559: LD_INT 5
4561: PPUSH
4562: LD_INT 5
4564: PPUSH
4565: LD_INT -5
4567: PUSH
4568: LD_EXP 1
4572: PUSH
4573: LD_INT -6
4575: PUSH
4576: LD_INT -2
4578: PUSH
4579: LD_INT -3
4581: PUSH
4582: LD_INT -5
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: PUSH
4593: LD_VAR 0 3
4597: ADD
4598: PUSH
4599: LD_INT -6
4601: PUSH
4602: LD_INT -4
4604: PUSH
4605: LD_EXP 3
4609: PUSH
4610: LD_EXP 15
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: ADD
4621: PPUSH
4622: LD_INT 1
4624: PUSH
4625: LD_INT 3
4627: PUSH
4628: LD_INT 2
4630: PUSH
4631: LD_INT 1
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: PUSH
4638: LD_INT 4
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: PPUSH
4647: CALL_OW 42
4651: ST_TO_ADDR
// ComStop ( selectedPeople ) ;
4652: LD_EXP 17
4656: PPUSH
4657: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4661: LD_INT 22
4663: PUSH
4664: LD_INT 1
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: LD_INT 21
4673: PUSH
4674: LD_INT 1
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: PPUSH
4685: CALL_OW 69
4689: PPUSH
4690: LD_INT 4
4692: PPUSH
4693: CALL_OW 235
// for i in selectedPeople do
4697: LD_ADDR_VAR 0 2
4701: PUSH
4702: LD_EXP 17
4706: PUSH
4707: FOR_IN
4708: IFFALSE 4724
// SetSide ( i , 1 ) ;
4710: LD_VAR 0 2
4714: PPUSH
4715: LD_INT 1
4717: PPUSH
4718: CALL_OW 235
4722: GO 4707
4724: POP
4725: POP
// for i in yourApemans do
4726: LD_ADDR_VAR 0 2
4730: PUSH
4731: LD_EXP 13
4735: PUSH
4736: FOR_IN
4737: IFFALSE 4753
// SetSide ( i , 1 ) ;
4739: LD_VAR 0 2
4743: PPUSH
4744: LD_INT 1
4746: PPUSH
4747: CALL_OW 235
4751: GO 4736
4753: POP
4754: POP
// SetSide ( JMM , 1 ) ;
4755: LD_EXP 1
4759: PPUSH
4760: LD_INT 1
4762: PPUSH
4763: CALL_OW 235
// SetSkill ( yourApemans , 2 , 5 ) ;
4767: LD_EXP 13
4771: PPUSH
4772: LD_INT 2
4774: PPUSH
4775: LD_INT 5
4777: PPUSH
4778: CALL_OW 237
// end ;
4782: LD_VAR 0 1
4786: RET
// export function SaveDeltaCharacters ; begin
4787: LD_INT 0
4789: PPUSH
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4790: LD_EXP 1
4794: PPUSH
4795: LD_EXP 22
4799: PUSH
4800: LD_STRING JMM
4802: STR
4803: PPUSH
4804: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4808: LD_EXP 15
4812: PPUSH
4813: LD_STRING DeltaDoctor
4815: PPUSH
4816: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4820: LD_EXP 3
4824: PPUSH
4825: LD_EXP 22
4829: PUSH
4830: LD_STRING Denis
4832: STR
4833: PPUSH
4834: CALL_OW 38
// if Lisa in selectedPeople then
4838: LD_EXP 4
4842: PUSH
4843: LD_EXP 17
4847: IN
4848: IFFALSE 4880
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4850: LD_EXP 4
4854: PPUSH
4855: LD_EXP 22
4859: PUSH
4860: LD_STRING Lisa
4862: STR
4863: PPUSH
4864: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4868: LD_INT 1
4870: PPUSH
4871: LD_STRING LisaIn06
4873: PPUSH
4874: CALL_OW 39
// end else
4878: GO 4901
// if IsOk ( Lisa ) then
4880: LD_EXP 4
4884: PPUSH
4885: CALL_OW 302
4889: IFFALSE 4901
// SaveVariable ( 1 , LisaStayInDelta ) ;
4891: LD_INT 1
4893: PPUSH
4894: LD_STRING LisaStayInDelta
4896: PPUSH
4897: CALL_OW 39
// if Bobby in selectedPeople then
4901: LD_EXP 6
4905: PUSH
4906: LD_EXP 17
4910: IN
4911: IFFALSE 4943
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4913: LD_EXP 6
4917: PPUSH
4918: LD_EXP 22
4922: PUSH
4923: LD_STRING Bobby
4925: STR
4926: PPUSH
4927: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4931: LD_INT 1
4933: PPUSH
4934: LD_STRING BobbyIn06
4936: PPUSH
4937: CALL_OW 39
// end else
4941: GO 4964
// if IsOk ( Bobby ) then
4943: LD_EXP 6
4947: PPUSH
4948: CALL_OW 302
4952: IFFALSE 4964
// SaveVariable ( 1 , BobbyStayInDelta ) ;
4954: LD_INT 1
4956: PPUSH
4957: LD_STRING BobbyStayInDelta
4959: PPUSH
4960: CALL_OW 39
// if Cyrus in selectedPeople then
4964: LD_EXP 7
4968: PUSH
4969: LD_EXP 17
4973: IN
4974: IFFALSE 5006
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4976: LD_EXP 7
4980: PPUSH
4981: LD_EXP 22
4985: PUSH
4986: LD_STRING Cyrus
4988: STR
4989: PPUSH
4990: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
4994: LD_INT 1
4996: PPUSH
4997: LD_STRING CyrusIn06
4999: PPUSH
5000: CALL_OW 39
// end else
5004: GO 5027
// if IsOk ( Cyrus ) then
5006: LD_EXP 7
5010: PPUSH
5011: CALL_OW 302
5015: IFFALSE 5027
// SaveVariable ( 1 , CyrusStayInDelta ) ;
5017: LD_INT 1
5019: PPUSH
5020: LD_STRING CyrusStayInDelta
5022: PPUSH
5023: CALL_OW 39
// if Frank in selectedPeople then
5027: LD_EXP 5
5031: PUSH
5032: LD_EXP 17
5036: IN
5037: IFFALSE 5069
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5039: LD_EXP 5
5043: PPUSH
5044: LD_EXP 22
5048: PUSH
5049: LD_STRING Frank
5051: STR
5052: PPUSH
5053: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
5057: LD_INT 1
5059: PPUSH
5060: LD_STRING FrankIn06
5062: PPUSH
5063: CALL_OW 39
// end else
5067: GO 5090
// if IsOk ( Frank ) then
5069: LD_EXP 5
5073: PPUSH
5074: CALL_OW 302
5078: IFFALSE 5090
// SaveVariable ( 1 , FrankStayInDelta ) ;
5080: LD_INT 1
5082: PPUSH
5083: LD_STRING FrankStayInDelta
5085: PPUSH
5086: CALL_OW 39
// if Brown in selectedPeople then
5090: LD_EXP 8
5094: PUSH
5095: LD_EXP 17
5099: IN
5100: IFFALSE 5132
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5102: LD_EXP 8
5106: PPUSH
5107: LD_EXP 22
5111: PUSH
5112: LD_STRING Brown
5114: STR
5115: PPUSH
5116: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
5120: LD_INT 1
5122: PPUSH
5123: LD_STRING BrownIn06
5125: PPUSH
5126: CALL_OW 39
// end else
5130: GO 5153
// if IsOk ( Brown ) then
5132: LD_EXP 8
5136: PPUSH
5137: CALL_OW 302
5141: IFFALSE 5153
// SaveVariable ( 1 , BrownStayInDelta ) ;
5143: LD_INT 1
5145: PPUSH
5146: LD_STRING BrownStayInDelta
5148: PPUSH
5149: CALL_OW 39
// if Donaldson in selectedPeople then
5153: LD_EXP 9
5157: PUSH
5158: LD_EXP 17
5162: IN
5163: IFFALSE 5195
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5165: LD_EXP 9
5169: PPUSH
5170: LD_EXP 22
5174: PUSH
5175: LD_STRING Donaldson
5177: STR
5178: PPUSH
5179: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5183: LD_INT 1
5185: PPUSH
5186: LD_STRING DonaldsonIn06
5188: PPUSH
5189: CALL_OW 39
// end else
5193: GO 5216
// if IsOk ( Donaldson ) then
5195: LD_EXP 9
5199: PPUSH
5200: CALL_OW 302
5204: IFFALSE 5216
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5206: LD_INT 1
5208: PPUSH
5209: LD_STRING DonaldsonStayInDelta
5211: PPUSH
5212: CALL_OW 39
// if Gladstone in selectedPeople then
5216: LD_EXP 2
5220: PUSH
5221: LD_EXP 17
5225: IN
5226: IFFALSE 5258
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5228: LD_EXP 2
5232: PPUSH
5233: LD_EXP 22
5237: PUSH
5238: LD_STRING Gladstone
5240: STR
5241: PPUSH
5242: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
5246: LD_INT 1
5248: PPUSH
5249: LD_STRING GladstoneIn06
5251: PPUSH
5252: CALL_OW 39
// end else
5256: GO 5279
// if IsOk ( Gladstone ) then
5258: LD_EXP 2
5262: PPUSH
5263: CALL_OW 302
5267: IFFALSE 5279
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5269: LD_INT 1
5271: PPUSH
5272: LD_STRING GladstoneStayInDelta
5274: PPUSH
5275: CALL_OW 39
// selectedPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ;
5279: LD_ADDR_EXP 17
5283: PUSH
5284: LD_INT 22
5286: PUSH
5287: LD_INT 1
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: PUSH
5294: LD_INT 23
5296: PUSH
5297: LD_INT 1
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: PUSH
5304: LD_INT 21
5306: PUSH
5307: LD_INT 1
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: PUSH
5314: EMPTY
5315: LIST
5316: LIST
5317: LIST
5318: PPUSH
5319: CALL_OW 69
5323: ST_TO_ADDR
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5324: LD_EXP 13
5328: PPUSH
5329: LD_STRING ApeIn06
5331: PPUSH
5332: CALL_OW 38
// SaveCharacters ( selectedPeople diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersIn06 ) ;
5336: LD_EXP 17
5340: PUSH
5341: LD_EXP 1
5345: PUSH
5346: LD_EXP 4
5350: PUSH
5351: LD_EXP 6
5355: PUSH
5356: LD_EXP 7
5360: PUSH
5361: LD_EXP 5
5365: PUSH
5366: LD_EXP 8
5370: PUSH
5371: LD_EXP 9
5375: PUSH
5376: LD_EXP 2
5380: PUSH
5381: LD_EXP 3
5385: PUSH
5386: EMPTY
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: DIFF
5397: PPUSH
5398: LD_STRING OthersIn06
5400: PPUSH
5401: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersStayInDelta ) ;
5405: LD_INT 22
5407: PUSH
5408: LD_INT 4
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: PUSH
5415: LD_INT 2
5417: PUSH
5418: LD_INT 25
5420: PUSH
5421: LD_INT 1
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: PUSH
5428: LD_INT 25
5430: PUSH
5431: LD_INT 2
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: PUSH
5438: LD_INT 25
5440: PUSH
5441: LD_INT 3
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: PUSH
5448: LD_INT 25
5450: PUSH
5451: LD_INT 4
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PPUSH
5469: CALL_OW 69
5473: PUSH
5474: LD_EXP 15
5478: PUSH
5479: LD_EXP 4
5483: PUSH
5484: LD_EXP 6
5488: PUSH
5489: LD_EXP 7
5493: PUSH
5494: LD_EXP 5
5498: PUSH
5499: LD_EXP 8
5503: PUSH
5504: LD_EXP 9
5508: PUSH
5509: LD_EXP 2
5513: PUSH
5514: LD_EXP 3
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: DIFF
5530: PPUSH
5531: LD_STRING OthersStayInDelta
5533: PPUSH
5534: CALL_OW 38
// end ;
5538: LD_VAR 0 1
5542: RET
// export function SaveCargos ; var i ; begin
5543: LD_INT 0
5545: PPUSH
5546: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
5547: LD_ADDR_VAR 0 2
5551: PUSH
5552: LD_INT 3
5554: PPUSH
5555: LD_INT 22
5557: PUSH
5558: LD_INT 1
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PUSH
5565: LD_INT 34
5567: PUSH
5568: LD_INT 12
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: PPUSH
5579: CALL_OW 70
5583: PUSH
5584: FOR_IN
5585: IFFALSE 5613
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
5587: LD_ADDR_EXP 21
5591: PUSH
5592: LD_EXP 21
5596: PUSH
5597: LD_VAR 0 2
5601: PPUSH
5602: CALL 65200 0 1
5606: PUSH
5607: EMPTY
5608: LIST
5609: ADD
5610: ST_TO_ADDR
5611: GO 5584
5613: POP
5614: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
5615: LD_EXP 21
5619: PPUSH
5620: LD_STRING 06_ResourcesInCargo06_1
5622: PPUSH
5623: CALL_OW 39
// end ; end_of_file
5627: LD_VAR 0 1
5631: RET
// on Command ( comandid ) do var i ;
5632: LD_INT 0
5634: PPUSH
// begin if comandid = 65 then
5635: LD_VAR 0 1
5639: PUSH
5640: LD_INT 65
5642: EQUAL
5643: IFFALSE 5684
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5645: LD_ADDR_VAR 0 2
5649: PUSH
5650: LD_INT 22
5652: PUSH
5653: LD_INT 1
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: PUSH
5660: EMPTY
5661: LIST
5662: PPUSH
5663: CALL_OW 69
5667: PUSH
5668: FOR_IN
5669: IFFALSE 5682
// ComStop ( i ) ;
5671: LD_VAR 0 2
5675: PPUSH
5676: CALL_OW 141
5680: GO 5668
5682: POP
5683: POP
// end ;
5684: PPOPN 2
5686: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5687: LD_INT 0
5689: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5690: LD_ADDR_VAR 0 3
5694: PUSH
5695: LD_INT 22
5697: PUSH
5698: LD_INT 1
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: PUSH
5705: LD_INT 21
5707: PUSH
5708: LD_INT 3
5710: PUSH
5711: EMPTY
5712: LIST
5713: LIST
5714: PUSH
5715: LD_INT 30
5717: PUSH
5718: LD_INT 0
5720: PUSH
5721: EMPTY
5722: LIST
5723: LIST
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: LIST
5729: PPUSH
5730: CALL_OW 69
5734: ST_TO_ADDR
// if not tmp then
5735: LD_VAR 0 3
5739: NOT
5740: IFFALSE 5744
// exit ;
5742: GO 5774
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5744: LD_VAR 0 1
5748: PPUSH
5749: LD_VAR 0 3
5753: PUSH
5754: LD_INT 1
5756: ARRAY
5757: PPUSH
5758: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5762: LD_VAR 0 1
5766: PPUSH
5767: LD_INT 4
5769: PPUSH
5770: CALL_OW 235
// end ;
5774: PPOPN 3
5776: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5777: LD_VAR 0 1
5781: PUSH
5782: LD_EXP 1
5786: EQUAL
5787: IFFALSE 5796
// YouLost ( JMM ) ;
5789: LD_STRING JMM
5791: PPUSH
5792: CALL_OW 104
// SOS_UnitDestroyed ( un ) ;
5796: LD_VAR 0 1
5800: PPUSH
5801: CALL 20159 0 1
// end ;
5805: PPOPN 1
5807: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5808: LD_VAR 0 1
5812: PPUSH
5813: LD_VAR 0 2
5817: PPUSH
5818: CALL 20281 0 2
// end ; end_of_file
5822: PPOPN 2
5824: END
// every 0 0$1 do
5825: GO 5827
5827: DISABLE
// begin enable ;
5828: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5829: LD_STRING updateTimer(
5831: PUSH
5832: LD_OWVAR 1
5836: STR
5837: PUSH
5838: LD_STRING );
5840: STR
5841: PPUSH
5842: CALL_OW 559
// end ;
5846: END
// export function SOS_MapStart ( ) ; begin
5847: LD_INT 0
5849: PPUSH
// if streamModeActive then
5850: LD_EXP 24
5854: IFFALSE 5863
// DefineStreamItems ( true ) ;
5856: LD_INT 1
5858: PPUSH
5859: CALL 7513 0 1
// UpdateFactoryWaypoints ( ) ;
5863: CALL 21097 0 0
// end ;
5867: LD_VAR 0 1
5871: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5872: LD_INT 0
5874: PPUSH
// if p2 = 100 then
5875: LD_VAR 0 2
5879: PUSH
5880: LD_INT 100
5882: EQUAL
5883: IFFALSE 6886
// begin if not StreamModeActive then
5885: LD_EXP 24
5889: NOT
5890: IFFALSE 5900
// StreamModeActive := true ;
5892: LD_ADDR_EXP 24
5896: PUSH
5897: LD_INT 1
5899: ST_TO_ADDR
// if p3 = 0 then
5900: LD_VAR 0 3
5904: PUSH
5905: LD_INT 0
5907: EQUAL
5908: IFFALSE 5914
// InitStreamMode ;
5910: CALL 7049 0 0
// if p3 = 1 then
5914: LD_VAR 0 3
5918: PUSH
5919: LD_INT 1
5921: EQUAL
5922: IFFALSE 5932
// sRocket := true ;
5924: LD_ADDR_EXP 29
5928: PUSH
5929: LD_INT 1
5931: ST_TO_ADDR
// if p3 = 2 then
5932: LD_VAR 0 3
5936: PUSH
5937: LD_INT 2
5939: EQUAL
5940: IFFALSE 5950
// sSpeed := true ;
5942: LD_ADDR_EXP 28
5946: PUSH
5947: LD_INT 1
5949: ST_TO_ADDR
// if p3 = 3 then
5950: LD_VAR 0 3
5954: PUSH
5955: LD_INT 3
5957: EQUAL
5958: IFFALSE 5968
// sEngine := true ;
5960: LD_ADDR_EXP 30
5964: PUSH
5965: LD_INT 1
5967: ST_TO_ADDR
// if p3 = 4 then
5968: LD_VAR 0 3
5972: PUSH
5973: LD_INT 4
5975: EQUAL
5976: IFFALSE 5986
// sSpec := true ;
5978: LD_ADDR_EXP 27
5982: PUSH
5983: LD_INT 1
5985: ST_TO_ADDR
// if p3 = 5 then
5986: LD_VAR 0 3
5990: PUSH
5991: LD_INT 5
5993: EQUAL
5994: IFFALSE 6004
// sLevel := true ;
5996: LD_ADDR_EXP 31
6000: PUSH
6001: LD_INT 1
6003: ST_TO_ADDR
// if p3 = 6 then
6004: LD_VAR 0 3
6008: PUSH
6009: LD_INT 6
6011: EQUAL
6012: IFFALSE 6022
// sArmoury := true ;
6014: LD_ADDR_EXP 32
6018: PUSH
6019: LD_INT 1
6021: ST_TO_ADDR
// if p3 = 7 then
6022: LD_VAR 0 3
6026: PUSH
6027: LD_INT 7
6029: EQUAL
6030: IFFALSE 6040
// sRadar := true ;
6032: LD_ADDR_EXP 33
6036: PUSH
6037: LD_INT 1
6039: ST_TO_ADDR
// if p3 = 8 then
6040: LD_VAR 0 3
6044: PUSH
6045: LD_INT 8
6047: EQUAL
6048: IFFALSE 6058
// sBunker := true ;
6050: LD_ADDR_EXP 34
6054: PUSH
6055: LD_INT 1
6057: ST_TO_ADDR
// if p3 = 9 then
6058: LD_VAR 0 3
6062: PUSH
6063: LD_INT 9
6065: EQUAL
6066: IFFALSE 6076
// sHack := true ;
6068: LD_ADDR_EXP 35
6072: PUSH
6073: LD_INT 1
6075: ST_TO_ADDR
// if p3 = 10 then
6076: LD_VAR 0 3
6080: PUSH
6081: LD_INT 10
6083: EQUAL
6084: IFFALSE 6094
// sFire := true ;
6086: LD_ADDR_EXP 36
6090: PUSH
6091: LD_INT 1
6093: ST_TO_ADDR
// if p3 = 11 then
6094: LD_VAR 0 3
6098: PUSH
6099: LD_INT 11
6101: EQUAL
6102: IFFALSE 6112
// sRefresh := true ;
6104: LD_ADDR_EXP 37
6108: PUSH
6109: LD_INT 1
6111: ST_TO_ADDR
// if p3 = 12 then
6112: LD_VAR 0 3
6116: PUSH
6117: LD_INT 12
6119: EQUAL
6120: IFFALSE 6130
// sExp := true ;
6122: LD_ADDR_EXP 38
6126: PUSH
6127: LD_INT 1
6129: ST_TO_ADDR
// if p3 = 13 then
6130: LD_VAR 0 3
6134: PUSH
6135: LD_INT 13
6137: EQUAL
6138: IFFALSE 6148
// sDepot := true ;
6140: LD_ADDR_EXP 39
6144: PUSH
6145: LD_INT 1
6147: ST_TO_ADDR
// if p3 = 14 then
6148: LD_VAR 0 3
6152: PUSH
6153: LD_INT 14
6155: EQUAL
6156: IFFALSE 6166
// sFlag := true ;
6158: LD_ADDR_EXP 40
6162: PUSH
6163: LD_INT 1
6165: ST_TO_ADDR
// if p3 = 15 then
6166: LD_VAR 0 3
6170: PUSH
6171: LD_INT 15
6173: EQUAL
6174: IFFALSE 6184
// sKamikadze := true ;
6176: LD_ADDR_EXP 48
6180: PUSH
6181: LD_INT 1
6183: ST_TO_ADDR
// if p3 = 16 then
6184: LD_VAR 0 3
6188: PUSH
6189: LD_INT 16
6191: EQUAL
6192: IFFALSE 6202
// sTroll := true ;
6194: LD_ADDR_EXP 49
6198: PUSH
6199: LD_INT 1
6201: ST_TO_ADDR
// if p3 = 17 then
6202: LD_VAR 0 3
6206: PUSH
6207: LD_INT 17
6209: EQUAL
6210: IFFALSE 6220
// sSlow := true ;
6212: LD_ADDR_EXP 50
6216: PUSH
6217: LD_INT 1
6219: ST_TO_ADDR
// if p3 = 18 then
6220: LD_VAR 0 3
6224: PUSH
6225: LD_INT 18
6227: EQUAL
6228: IFFALSE 6238
// sLack := true ;
6230: LD_ADDR_EXP 51
6234: PUSH
6235: LD_INT 1
6237: ST_TO_ADDR
// if p3 = 19 then
6238: LD_VAR 0 3
6242: PUSH
6243: LD_INT 19
6245: EQUAL
6246: IFFALSE 6256
// sTank := true ;
6248: LD_ADDR_EXP 53
6252: PUSH
6253: LD_INT 1
6255: ST_TO_ADDR
// if p3 = 20 then
6256: LD_VAR 0 3
6260: PUSH
6261: LD_INT 20
6263: EQUAL
6264: IFFALSE 6274
// sRemote := true ;
6266: LD_ADDR_EXP 54
6270: PUSH
6271: LD_INT 1
6273: ST_TO_ADDR
// if p3 = 21 then
6274: LD_VAR 0 3
6278: PUSH
6279: LD_INT 21
6281: EQUAL
6282: IFFALSE 6292
// sPowell := true ;
6284: LD_ADDR_EXP 55
6288: PUSH
6289: LD_INT 1
6291: ST_TO_ADDR
// if p3 = 22 then
6292: LD_VAR 0 3
6296: PUSH
6297: LD_INT 22
6299: EQUAL
6300: IFFALSE 6310
// sTeleport := true ;
6302: LD_ADDR_EXP 58
6306: PUSH
6307: LD_INT 1
6309: ST_TO_ADDR
// if p3 = 23 then
6310: LD_VAR 0 3
6314: PUSH
6315: LD_INT 23
6317: EQUAL
6318: IFFALSE 6328
// sOilTower := true ;
6320: LD_ADDR_EXP 60
6324: PUSH
6325: LD_INT 1
6327: ST_TO_ADDR
// if p3 = 24 then
6328: LD_VAR 0 3
6332: PUSH
6333: LD_INT 24
6335: EQUAL
6336: IFFALSE 6346
// sShovel := true ;
6338: LD_ADDR_EXP 61
6342: PUSH
6343: LD_INT 1
6345: ST_TO_ADDR
// if p3 = 25 then
6346: LD_VAR 0 3
6350: PUSH
6351: LD_INT 25
6353: EQUAL
6354: IFFALSE 6364
// sSheik := true ;
6356: LD_ADDR_EXP 62
6360: PUSH
6361: LD_INT 1
6363: ST_TO_ADDR
// if p3 = 26 then
6364: LD_VAR 0 3
6368: PUSH
6369: LD_INT 26
6371: EQUAL
6372: IFFALSE 6382
// sEarthquake := true ;
6374: LD_ADDR_EXP 64
6378: PUSH
6379: LD_INT 1
6381: ST_TO_ADDR
// if p3 = 27 then
6382: LD_VAR 0 3
6386: PUSH
6387: LD_INT 27
6389: EQUAL
6390: IFFALSE 6400
// sAI := true ;
6392: LD_ADDR_EXP 65
6396: PUSH
6397: LD_INT 1
6399: ST_TO_ADDR
// if p3 = 28 then
6400: LD_VAR 0 3
6404: PUSH
6405: LD_INT 28
6407: EQUAL
6408: IFFALSE 6418
// sCargo := true ;
6410: LD_ADDR_EXP 68
6414: PUSH
6415: LD_INT 1
6417: ST_TO_ADDR
// if p3 = 29 then
6418: LD_VAR 0 3
6422: PUSH
6423: LD_INT 29
6425: EQUAL
6426: IFFALSE 6436
// sDLaser := true ;
6428: LD_ADDR_EXP 69
6432: PUSH
6433: LD_INT 1
6435: ST_TO_ADDR
// if p3 = 30 then
6436: LD_VAR 0 3
6440: PUSH
6441: LD_INT 30
6443: EQUAL
6444: IFFALSE 6454
// sExchange := true ;
6446: LD_ADDR_EXP 70
6450: PUSH
6451: LD_INT 1
6453: ST_TO_ADDR
// if p3 = 31 then
6454: LD_VAR 0 3
6458: PUSH
6459: LD_INT 31
6461: EQUAL
6462: IFFALSE 6472
// sFac := true ;
6464: LD_ADDR_EXP 71
6468: PUSH
6469: LD_INT 1
6471: ST_TO_ADDR
// if p3 = 32 then
6472: LD_VAR 0 3
6476: PUSH
6477: LD_INT 32
6479: EQUAL
6480: IFFALSE 6490
// sPower := true ;
6482: LD_ADDR_EXP 72
6486: PUSH
6487: LD_INT 1
6489: ST_TO_ADDR
// if p3 = 33 then
6490: LD_VAR 0 3
6494: PUSH
6495: LD_INT 33
6497: EQUAL
6498: IFFALSE 6508
// sRandom := true ;
6500: LD_ADDR_EXP 73
6504: PUSH
6505: LD_INT 1
6507: ST_TO_ADDR
// if p3 = 34 then
6508: LD_VAR 0 3
6512: PUSH
6513: LD_INT 34
6515: EQUAL
6516: IFFALSE 6526
// sShield := true ;
6518: LD_ADDR_EXP 74
6522: PUSH
6523: LD_INT 1
6525: ST_TO_ADDR
// if p3 = 35 then
6526: LD_VAR 0 3
6530: PUSH
6531: LD_INT 35
6533: EQUAL
6534: IFFALSE 6544
// sTime := true ;
6536: LD_ADDR_EXP 75
6540: PUSH
6541: LD_INT 1
6543: ST_TO_ADDR
// if p3 = 36 then
6544: LD_VAR 0 3
6548: PUSH
6549: LD_INT 36
6551: EQUAL
6552: IFFALSE 6562
// sTools := true ;
6554: LD_ADDR_EXP 76
6558: PUSH
6559: LD_INT 1
6561: ST_TO_ADDR
// if p3 = 101 then
6562: LD_VAR 0 3
6566: PUSH
6567: LD_INT 101
6569: EQUAL
6570: IFFALSE 6580
// sSold := true ;
6572: LD_ADDR_EXP 41
6576: PUSH
6577: LD_INT 1
6579: ST_TO_ADDR
// if p3 = 102 then
6580: LD_VAR 0 3
6584: PUSH
6585: LD_INT 102
6587: EQUAL
6588: IFFALSE 6598
// sDiff := true ;
6590: LD_ADDR_EXP 42
6594: PUSH
6595: LD_INT 1
6597: ST_TO_ADDR
// if p3 = 103 then
6598: LD_VAR 0 3
6602: PUSH
6603: LD_INT 103
6605: EQUAL
6606: IFFALSE 6616
// sFog := true ;
6608: LD_ADDR_EXP 45
6612: PUSH
6613: LD_INT 1
6615: ST_TO_ADDR
// if p3 = 104 then
6616: LD_VAR 0 3
6620: PUSH
6621: LD_INT 104
6623: EQUAL
6624: IFFALSE 6634
// sReset := true ;
6626: LD_ADDR_EXP 46
6630: PUSH
6631: LD_INT 1
6633: ST_TO_ADDR
// if p3 = 105 then
6634: LD_VAR 0 3
6638: PUSH
6639: LD_INT 105
6641: EQUAL
6642: IFFALSE 6652
// sSun := true ;
6644: LD_ADDR_EXP 47
6648: PUSH
6649: LD_INT 1
6651: ST_TO_ADDR
// if p3 = 106 then
6652: LD_VAR 0 3
6656: PUSH
6657: LD_INT 106
6659: EQUAL
6660: IFFALSE 6670
// sTiger := true ;
6662: LD_ADDR_EXP 43
6666: PUSH
6667: LD_INT 1
6669: ST_TO_ADDR
// if p3 = 107 then
6670: LD_VAR 0 3
6674: PUSH
6675: LD_INT 107
6677: EQUAL
6678: IFFALSE 6688
// sBomb := true ;
6680: LD_ADDR_EXP 44
6684: PUSH
6685: LD_INT 1
6687: ST_TO_ADDR
// if p3 = 108 then
6688: LD_VAR 0 3
6692: PUSH
6693: LD_INT 108
6695: EQUAL
6696: IFFALSE 6706
// sWound := true ;
6698: LD_ADDR_EXP 52
6702: PUSH
6703: LD_INT 1
6705: ST_TO_ADDR
// if p3 = 109 then
6706: LD_VAR 0 3
6710: PUSH
6711: LD_INT 109
6713: EQUAL
6714: IFFALSE 6724
// sBetray := true ;
6716: LD_ADDR_EXP 56
6720: PUSH
6721: LD_INT 1
6723: ST_TO_ADDR
// if p3 = 110 then
6724: LD_VAR 0 3
6728: PUSH
6729: LD_INT 110
6731: EQUAL
6732: IFFALSE 6742
// sContamin := true ;
6734: LD_ADDR_EXP 57
6738: PUSH
6739: LD_INT 1
6741: ST_TO_ADDR
// if p3 = 111 then
6742: LD_VAR 0 3
6746: PUSH
6747: LD_INT 111
6749: EQUAL
6750: IFFALSE 6760
// sOil := true ;
6752: LD_ADDR_EXP 59
6756: PUSH
6757: LD_INT 1
6759: ST_TO_ADDR
// if p3 = 112 then
6760: LD_VAR 0 3
6764: PUSH
6765: LD_INT 112
6767: EQUAL
6768: IFFALSE 6778
// sStu := true ;
6770: LD_ADDR_EXP 63
6774: PUSH
6775: LD_INT 1
6777: ST_TO_ADDR
// if p3 = 113 then
6778: LD_VAR 0 3
6782: PUSH
6783: LD_INT 113
6785: EQUAL
6786: IFFALSE 6796
// sBazooka := true ;
6788: LD_ADDR_EXP 66
6792: PUSH
6793: LD_INT 1
6795: ST_TO_ADDR
// if p3 = 114 then
6796: LD_VAR 0 3
6800: PUSH
6801: LD_INT 114
6803: EQUAL
6804: IFFALSE 6814
// sMortar := true ;
6806: LD_ADDR_EXP 67
6810: PUSH
6811: LD_INT 1
6813: ST_TO_ADDR
// if p3 = 115 then
6814: LD_VAR 0 3
6818: PUSH
6819: LD_INT 115
6821: EQUAL
6822: IFFALSE 6832
// sRanger := true ;
6824: LD_ADDR_EXP 77
6828: PUSH
6829: LD_INT 1
6831: ST_TO_ADDR
// if p3 = 116 then
6832: LD_VAR 0 3
6836: PUSH
6837: LD_INT 116
6839: EQUAL
6840: IFFALSE 6850
// sComputer := true ;
6842: LD_ADDR_EXP 78
6846: PUSH
6847: LD_INT 1
6849: ST_TO_ADDR
// if p3 = 117 then
6850: LD_VAR 0 3
6854: PUSH
6855: LD_INT 117
6857: EQUAL
6858: IFFALSE 6868
// s30 := true ;
6860: LD_ADDR_EXP 79
6864: PUSH
6865: LD_INT 1
6867: ST_TO_ADDR
// if p3 = 118 then
6868: LD_VAR 0 3
6872: PUSH
6873: LD_INT 118
6875: EQUAL
6876: IFFALSE 6886
// s60 := true ;
6878: LD_ADDR_EXP 80
6882: PUSH
6883: LD_INT 1
6885: ST_TO_ADDR
// end ; if p2 = 101 then
6886: LD_VAR 0 2
6890: PUSH
6891: LD_INT 101
6893: EQUAL
6894: IFFALSE 7022
// begin case p3 of 1 :
6896: LD_VAR 0 3
6900: PUSH
6901: LD_INT 1
6903: DOUBLE
6904: EQUAL
6905: IFTRUE 6909
6907: GO 6916
6909: POP
// hHackUnlimitedResources ; 2 :
6910: CALL 19120 0 0
6914: GO 7022
6916: LD_INT 2
6918: DOUBLE
6919: EQUAL
6920: IFTRUE 6924
6922: GO 6931
6924: POP
// hHackSetLevel10 ; 3 :
6925: CALL 19253 0 0
6929: GO 7022
6931: LD_INT 3
6933: DOUBLE
6934: EQUAL
6935: IFTRUE 6939
6937: GO 6946
6939: POP
// hHackSetLevel10YourUnits ; 4 :
6940: CALL 19338 0 0
6944: GO 7022
6946: LD_INT 4
6948: DOUBLE
6949: EQUAL
6950: IFTRUE 6954
6952: GO 6961
6954: POP
// hHackInvincible ; 5 :
6955: CALL 19786 0 0
6959: GO 7022
6961: LD_INT 5
6963: DOUBLE
6964: EQUAL
6965: IFTRUE 6969
6967: GO 6976
6969: POP
// hHackInvisible ; 6 :
6970: CALL 19897 0 0
6974: GO 7022
6976: LD_INT 6
6978: DOUBLE
6979: EQUAL
6980: IFTRUE 6984
6982: GO 6991
6984: POP
// hHackChangeYourSide ; 7 :
6985: CALL 19954 0 0
6989: GO 7022
6991: LD_INT 7
6993: DOUBLE
6994: EQUAL
6995: IFTRUE 6999
6997: GO 7006
6999: POP
// hHackChangeUnitSide ; 8 :
7000: CALL 19996 0 0
7004: GO 7022
7006: LD_INT 8
7008: DOUBLE
7009: EQUAL
7010: IFTRUE 7014
7012: GO 7021
7014: POP
// hHackFog ; end ;
7015: CALL 20097 0 0
7019: GO 7022
7021: POP
// end ; end ;
7022: LD_VAR 0 7
7026: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
7027: GO 7029
7029: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7030: LD_STRING initStreamRollete();
7032: PPUSH
7033: CALL_OW 559
// InitStreamMode ;
7037: CALL 7049 0 0
// DefineStreamItems ( false ) ;
7041: LD_INT 0
7043: PPUSH
7044: CALL 7513 0 1
// end ;
7048: END
// function InitStreamMode ; begin
7049: LD_INT 0
7051: PPUSH
// streamModeActive := false ;
7052: LD_ADDR_EXP 24
7056: PUSH
7057: LD_INT 0
7059: ST_TO_ADDR
// normalCounter := 36 ;
7060: LD_ADDR_EXP 25
7064: PUSH
7065: LD_INT 36
7067: ST_TO_ADDR
// hardcoreCounter := 18 ;
7068: LD_ADDR_EXP 26
7072: PUSH
7073: LD_INT 18
7075: ST_TO_ADDR
// sRocket := false ;
7076: LD_ADDR_EXP 29
7080: PUSH
7081: LD_INT 0
7083: ST_TO_ADDR
// sSpeed := false ;
7084: LD_ADDR_EXP 28
7088: PUSH
7089: LD_INT 0
7091: ST_TO_ADDR
// sEngine := false ;
7092: LD_ADDR_EXP 30
7096: PUSH
7097: LD_INT 0
7099: ST_TO_ADDR
// sSpec := false ;
7100: LD_ADDR_EXP 27
7104: PUSH
7105: LD_INT 0
7107: ST_TO_ADDR
// sLevel := false ;
7108: LD_ADDR_EXP 31
7112: PUSH
7113: LD_INT 0
7115: ST_TO_ADDR
// sArmoury := false ;
7116: LD_ADDR_EXP 32
7120: PUSH
7121: LD_INT 0
7123: ST_TO_ADDR
// sRadar := false ;
7124: LD_ADDR_EXP 33
7128: PUSH
7129: LD_INT 0
7131: ST_TO_ADDR
// sBunker := false ;
7132: LD_ADDR_EXP 34
7136: PUSH
7137: LD_INT 0
7139: ST_TO_ADDR
// sHack := false ;
7140: LD_ADDR_EXP 35
7144: PUSH
7145: LD_INT 0
7147: ST_TO_ADDR
// sFire := false ;
7148: LD_ADDR_EXP 36
7152: PUSH
7153: LD_INT 0
7155: ST_TO_ADDR
// sRefresh := false ;
7156: LD_ADDR_EXP 37
7160: PUSH
7161: LD_INT 0
7163: ST_TO_ADDR
// sExp := false ;
7164: LD_ADDR_EXP 38
7168: PUSH
7169: LD_INT 0
7171: ST_TO_ADDR
// sDepot := false ;
7172: LD_ADDR_EXP 39
7176: PUSH
7177: LD_INT 0
7179: ST_TO_ADDR
// sFlag := false ;
7180: LD_ADDR_EXP 40
7184: PUSH
7185: LD_INT 0
7187: ST_TO_ADDR
// sKamikadze := false ;
7188: LD_ADDR_EXP 48
7192: PUSH
7193: LD_INT 0
7195: ST_TO_ADDR
// sTroll := false ;
7196: LD_ADDR_EXP 49
7200: PUSH
7201: LD_INT 0
7203: ST_TO_ADDR
// sSlow := false ;
7204: LD_ADDR_EXP 50
7208: PUSH
7209: LD_INT 0
7211: ST_TO_ADDR
// sLack := false ;
7212: LD_ADDR_EXP 51
7216: PUSH
7217: LD_INT 0
7219: ST_TO_ADDR
// sTank := false ;
7220: LD_ADDR_EXP 53
7224: PUSH
7225: LD_INT 0
7227: ST_TO_ADDR
// sRemote := false ;
7228: LD_ADDR_EXP 54
7232: PUSH
7233: LD_INT 0
7235: ST_TO_ADDR
// sPowell := false ;
7236: LD_ADDR_EXP 55
7240: PUSH
7241: LD_INT 0
7243: ST_TO_ADDR
// sTeleport := false ;
7244: LD_ADDR_EXP 58
7248: PUSH
7249: LD_INT 0
7251: ST_TO_ADDR
// sOilTower := false ;
7252: LD_ADDR_EXP 60
7256: PUSH
7257: LD_INT 0
7259: ST_TO_ADDR
// sShovel := false ;
7260: LD_ADDR_EXP 61
7264: PUSH
7265: LD_INT 0
7267: ST_TO_ADDR
// sSheik := false ;
7268: LD_ADDR_EXP 62
7272: PUSH
7273: LD_INT 0
7275: ST_TO_ADDR
// sEarthquake := false ;
7276: LD_ADDR_EXP 64
7280: PUSH
7281: LD_INT 0
7283: ST_TO_ADDR
// sAI := false ;
7284: LD_ADDR_EXP 65
7288: PUSH
7289: LD_INT 0
7291: ST_TO_ADDR
// sCargo := false ;
7292: LD_ADDR_EXP 68
7296: PUSH
7297: LD_INT 0
7299: ST_TO_ADDR
// sDLaser := false ;
7300: LD_ADDR_EXP 69
7304: PUSH
7305: LD_INT 0
7307: ST_TO_ADDR
// sExchange := false ;
7308: LD_ADDR_EXP 70
7312: PUSH
7313: LD_INT 0
7315: ST_TO_ADDR
// sFac := false ;
7316: LD_ADDR_EXP 71
7320: PUSH
7321: LD_INT 0
7323: ST_TO_ADDR
// sPower := false ;
7324: LD_ADDR_EXP 72
7328: PUSH
7329: LD_INT 0
7331: ST_TO_ADDR
// sRandom := false ;
7332: LD_ADDR_EXP 73
7336: PUSH
7337: LD_INT 0
7339: ST_TO_ADDR
// sShield := false ;
7340: LD_ADDR_EXP 74
7344: PUSH
7345: LD_INT 0
7347: ST_TO_ADDR
// sTime := false ;
7348: LD_ADDR_EXP 75
7352: PUSH
7353: LD_INT 0
7355: ST_TO_ADDR
// sTools := false ;
7356: LD_ADDR_EXP 76
7360: PUSH
7361: LD_INT 0
7363: ST_TO_ADDR
// sSold := false ;
7364: LD_ADDR_EXP 41
7368: PUSH
7369: LD_INT 0
7371: ST_TO_ADDR
// sDiff := false ;
7372: LD_ADDR_EXP 42
7376: PUSH
7377: LD_INT 0
7379: ST_TO_ADDR
// sFog := false ;
7380: LD_ADDR_EXP 45
7384: PUSH
7385: LD_INT 0
7387: ST_TO_ADDR
// sReset := false ;
7388: LD_ADDR_EXP 46
7392: PUSH
7393: LD_INT 0
7395: ST_TO_ADDR
// sSun := false ;
7396: LD_ADDR_EXP 47
7400: PUSH
7401: LD_INT 0
7403: ST_TO_ADDR
// sTiger := false ;
7404: LD_ADDR_EXP 43
7408: PUSH
7409: LD_INT 0
7411: ST_TO_ADDR
// sBomb := false ;
7412: LD_ADDR_EXP 44
7416: PUSH
7417: LD_INT 0
7419: ST_TO_ADDR
// sWound := false ;
7420: LD_ADDR_EXP 52
7424: PUSH
7425: LD_INT 0
7427: ST_TO_ADDR
// sBetray := false ;
7428: LD_ADDR_EXP 56
7432: PUSH
7433: LD_INT 0
7435: ST_TO_ADDR
// sContamin := false ;
7436: LD_ADDR_EXP 57
7440: PUSH
7441: LD_INT 0
7443: ST_TO_ADDR
// sOil := false ;
7444: LD_ADDR_EXP 59
7448: PUSH
7449: LD_INT 0
7451: ST_TO_ADDR
// sStu := false ;
7452: LD_ADDR_EXP 63
7456: PUSH
7457: LD_INT 0
7459: ST_TO_ADDR
// sBazooka := false ;
7460: LD_ADDR_EXP 66
7464: PUSH
7465: LD_INT 0
7467: ST_TO_ADDR
// sMortar := false ;
7468: LD_ADDR_EXP 67
7472: PUSH
7473: LD_INT 0
7475: ST_TO_ADDR
// sRanger := false ;
7476: LD_ADDR_EXP 77
7480: PUSH
7481: LD_INT 0
7483: ST_TO_ADDR
// sComputer := false ;
7484: LD_ADDR_EXP 78
7488: PUSH
7489: LD_INT 0
7491: ST_TO_ADDR
// s30 := false ;
7492: LD_ADDR_EXP 79
7496: PUSH
7497: LD_INT 0
7499: ST_TO_ADDR
// s60 := false ;
7500: LD_ADDR_EXP 80
7504: PUSH
7505: LD_INT 0
7507: ST_TO_ADDR
// end ;
7508: LD_VAR 0 1
7512: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7513: LD_INT 0
7515: PPUSH
7516: PPUSH
7517: PPUSH
7518: PPUSH
7519: PPUSH
7520: PPUSH
7521: PPUSH
// result := [ ] ;
7522: LD_ADDR_VAR 0 2
7526: PUSH
7527: EMPTY
7528: ST_TO_ADDR
// if campaign_id = 1 then
7529: LD_OWVAR 69
7533: PUSH
7534: LD_INT 1
7536: EQUAL
7537: IFFALSE 10703
// begin case mission_number of 1 :
7539: LD_OWVAR 70
7543: PUSH
7544: LD_INT 1
7546: DOUBLE
7547: EQUAL
7548: IFTRUE 7552
7550: GO 7628
7552: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7553: LD_ADDR_VAR 0 2
7557: PUSH
7558: LD_INT 2
7560: PUSH
7561: LD_INT 4
7563: PUSH
7564: LD_INT 11
7566: PUSH
7567: LD_INT 12
7569: PUSH
7570: LD_INT 15
7572: PUSH
7573: LD_INT 16
7575: PUSH
7576: LD_INT 22
7578: PUSH
7579: LD_INT 23
7581: PUSH
7582: LD_INT 26
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: PUSH
7596: LD_INT 101
7598: PUSH
7599: LD_INT 102
7601: PUSH
7602: LD_INT 106
7604: PUSH
7605: LD_INT 116
7607: PUSH
7608: LD_INT 117
7610: PUSH
7611: LD_INT 118
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: ST_TO_ADDR
7626: GO 10701
7628: LD_INT 2
7630: DOUBLE
7631: EQUAL
7632: IFTRUE 7636
7634: GO 7720
7636: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7637: LD_ADDR_VAR 0 2
7641: PUSH
7642: LD_INT 2
7644: PUSH
7645: LD_INT 4
7647: PUSH
7648: LD_INT 11
7650: PUSH
7651: LD_INT 12
7653: PUSH
7654: LD_INT 15
7656: PUSH
7657: LD_INT 16
7659: PUSH
7660: LD_INT 22
7662: PUSH
7663: LD_INT 23
7665: PUSH
7666: LD_INT 26
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: PUSH
7680: LD_INT 101
7682: PUSH
7683: LD_INT 102
7685: PUSH
7686: LD_INT 105
7688: PUSH
7689: LD_INT 106
7691: PUSH
7692: LD_INT 108
7694: PUSH
7695: LD_INT 116
7697: PUSH
7698: LD_INT 117
7700: PUSH
7701: LD_INT 118
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: ST_TO_ADDR
7718: GO 10701
7720: LD_INT 3
7722: DOUBLE
7723: EQUAL
7724: IFTRUE 7728
7726: GO 7816
7728: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7729: LD_ADDR_VAR 0 2
7733: PUSH
7734: LD_INT 2
7736: PUSH
7737: LD_INT 4
7739: PUSH
7740: LD_INT 5
7742: PUSH
7743: LD_INT 11
7745: PUSH
7746: LD_INT 12
7748: PUSH
7749: LD_INT 15
7751: PUSH
7752: LD_INT 16
7754: PUSH
7755: LD_INT 22
7757: PUSH
7758: LD_INT 26
7760: PUSH
7761: LD_INT 36
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: PUSH
7776: LD_INT 101
7778: PUSH
7779: LD_INT 102
7781: PUSH
7782: LD_INT 105
7784: PUSH
7785: LD_INT 106
7787: PUSH
7788: LD_INT 108
7790: PUSH
7791: LD_INT 116
7793: PUSH
7794: LD_INT 117
7796: PUSH
7797: LD_INT 118
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: ST_TO_ADDR
7814: GO 10701
7816: LD_INT 4
7818: DOUBLE
7819: EQUAL
7820: IFTRUE 7824
7822: GO 7920
7824: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7825: LD_ADDR_VAR 0 2
7829: PUSH
7830: LD_INT 2
7832: PUSH
7833: LD_INT 4
7835: PUSH
7836: LD_INT 5
7838: PUSH
7839: LD_INT 8
7841: PUSH
7842: LD_INT 11
7844: PUSH
7845: LD_INT 12
7847: PUSH
7848: LD_INT 15
7850: PUSH
7851: LD_INT 16
7853: PUSH
7854: LD_INT 22
7856: PUSH
7857: LD_INT 23
7859: PUSH
7860: LD_INT 26
7862: PUSH
7863: LD_INT 36
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: PUSH
7880: LD_INT 101
7882: PUSH
7883: LD_INT 102
7885: PUSH
7886: LD_INT 105
7888: PUSH
7889: LD_INT 106
7891: PUSH
7892: LD_INT 108
7894: PUSH
7895: LD_INT 116
7897: PUSH
7898: LD_INT 117
7900: PUSH
7901: LD_INT 118
7903: PUSH
7904: EMPTY
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: ST_TO_ADDR
7918: GO 10701
7920: LD_INT 5
7922: DOUBLE
7923: EQUAL
7924: IFTRUE 7928
7926: GO 8040
7928: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7929: LD_ADDR_VAR 0 2
7933: PUSH
7934: LD_INT 2
7936: PUSH
7937: LD_INT 4
7939: PUSH
7940: LD_INT 5
7942: PUSH
7943: LD_INT 6
7945: PUSH
7946: LD_INT 8
7948: PUSH
7949: LD_INT 11
7951: PUSH
7952: LD_INT 12
7954: PUSH
7955: LD_INT 15
7957: PUSH
7958: LD_INT 16
7960: PUSH
7961: LD_INT 22
7963: PUSH
7964: LD_INT 23
7966: PUSH
7967: LD_INT 25
7969: PUSH
7970: LD_INT 26
7972: PUSH
7973: LD_INT 36
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: LIST
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: PUSH
7992: LD_INT 101
7994: PUSH
7995: LD_INT 102
7997: PUSH
7998: LD_INT 105
8000: PUSH
8001: LD_INT 106
8003: PUSH
8004: LD_INT 108
8006: PUSH
8007: LD_INT 109
8009: PUSH
8010: LD_INT 112
8012: PUSH
8013: LD_INT 116
8015: PUSH
8016: LD_INT 117
8018: PUSH
8019: LD_INT 118
8021: PUSH
8022: EMPTY
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: ST_TO_ADDR
8038: GO 10701
8040: LD_INT 6
8042: DOUBLE
8043: EQUAL
8044: IFTRUE 8048
8046: GO 8180
8048: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
8049: LD_ADDR_VAR 0 2
8053: PUSH
8054: LD_INT 2
8056: PUSH
8057: LD_INT 4
8059: PUSH
8060: LD_INT 5
8062: PUSH
8063: LD_INT 6
8065: PUSH
8066: LD_INT 8
8068: PUSH
8069: LD_INT 11
8071: PUSH
8072: LD_INT 12
8074: PUSH
8075: LD_INT 15
8077: PUSH
8078: LD_INT 16
8080: PUSH
8081: LD_INT 20
8083: PUSH
8084: LD_INT 21
8086: PUSH
8087: LD_INT 22
8089: PUSH
8090: LD_INT 23
8092: PUSH
8093: LD_INT 25
8095: PUSH
8096: LD_INT 26
8098: PUSH
8099: LD_INT 30
8101: PUSH
8102: LD_INT 31
8104: PUSH
8105: LD_INT 32
8107: PUSH
8108: LD_INT 36
8110: PUSH
8111: EMPTY
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: LIST
8129: LIST
8130: LIST
8131: PUSH
8132: LD_INT 101
8134: PUSH
8135: LD_INT 102
8137: PUSH
8138: LD_INT 105
8140: PUSH
8141: LD_INT 106
8143: PUSH
8144: LD_INT 108
8146: PUSH
8147: LD_INT 109
8149: PUSH
8150: LD_INT 112
8152: PUSH
8153: LD_INT 116
8155: PUSH
8156: LD_INT 117
8158: PUSH
8159: LD_INT 118
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: PUSH
8174: EMPTY
8175: LIST
8176: LIST
8177: ST_TO_ADDR
8178: GO 10701
8180: LD_INT 7
8182: DOUBLE
8183: EQUAL
8184: IFTRUE 8188
8186: GO 8300
8188: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8189: LD_ADDR_VAR 0 2
8193: PUSH
8194: LD_INT 2
8196: PUSH
8197: LD_INT 4
8199: PUSH
8200: LD_INT 5
8202: PUSH
8203: LD_INT 7
8205: PUSH
8206: LD_INT 11
8208: PUSH
8209: LD_INT 12
8211: PUSH
8212: LD_INT 15
8214: PUSH
8215: LD_INT 16
8217: PUSH
8218: LD_INT 20
8220: PUSH
8221: LD_INT 21
8223: PUSH
8224: LD_INT 22
8226: PUSH
8227: LD_INT 23
8229: PUSH
8230: LD_INT 25
8232: PUSH
8233: LD_INT 26
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: PUSH
8252: LD_INT 101
8254: PUSH
8255: LD_INT 102
8257: PUSH
8258: LD_INT 103
8260: PUSH
8261: LD_INT 105
8263: PUSH
8264: LD_INT 106
8266: PUSH
8267: LD_INT 108
8269: PUSH
8270: LD_INT 112
8272: PUSH
8273: LD_INT 116
8275: PUSH
8276: LD_INT 117
8278: PUSH
8279: LD_INT 118
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: ST_TO_ADDR
8298: GO 10701
8300: LD_INT 8
8302: DOUBLE
8303: EQUAL
8304: IFTRUE 8308
8306: GO 8448
8308: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8309: LD_ADDR_VAR 0 2
8313: PUSH
8314: LD_INT 2
8316: PUSH
8317: LD_INT 4
8319: PUSH
8320: LD_INT 5
8322: PUSH
8323: LD_INT 6
8325: PUSH
8326: LD_INT 7
8328: PUSH
8329: LD_INT 8
8331: PUSH
8332: LD_INT 11
8334: PUSH
8335: LD_INT 12
8337: PUSH
8338: LD_INT 15
8340: PUSH
8341: LD_INT 16
8343: PUSH
8344: LD_INT 20
8346: PUSH
8347: LD_INT 21
8349: PUSH
8350: LD_INT 22
8352: PUSH
8353: LD_INT 23
8355: PUSH
8356: LD_INT 25
8358: PUSH
8359: LD_INT 26
8361: PUSH
8362: LD_INT 30
8364: PUSH
8365: LD_INT 31
8367: PUSH
8368: LD_INT 32
8370: PUSH
8371: LD_INT 36
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: LIST
8394: LIST
8395: PUSH
8396: LD_INT 101
8398: PUSH
8399: LD_INT 102
8401: PUSH
8402: LD_INT 103
8404: PUSH
8405: LD_INT 105
8407: PUSH
8408: LD_INT 106
8410: PUSH
8411: LD_INT 108
8413: PUSH
8414: LD_INT 109
8416: PUSH
8417: LD_INT 112
8419: PUSH
8420: LD_INT 116
8422: PUSH
8423: LD_INT 117
8425: PUSH
8426: LD_INT 118
8428: PUSH
8429: EMPTY
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: ST_TO_ADDR
8446: GO 10701
8448: LD_INT 9
8450: DOUBLE
8451: EQUAL
8452: IFTRUE 8456
8454: GO 8604
8456: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8457: LD_ADDR_VAR 0 2
8461: PUSH
8462: LD_INT 2
8464: PUSH
8465: LD_INT 4
8467: PUSH
8468: LD_INT 5
8470: PUSH
8471: LD_INT 6
8473: PUSH
8474: LD_INT 7
8476: PUSH
8477: LD_INT 8
8479: PUSH
8480: LD_INT 11
8482: PUSH
8483: LD_INT 12
8485: PUSH
8486: LD_INT 15
8488: PUSH
8489: LD_INT 16
8491: PUSH
8492: LD_INT 20
8494: PUSH
8495: LD_INT 21
8497: PUSH
8498: LD_INT 22
8500: PUSH
8501: LD_INT 23
8503: PUSH
8504: LD_INT 25
8506: PUSH
8507: LD_INT 26
8509: PUSH
8510: LD_INT 28
8512: PUSH
8513: LD_INT 30
8515: PUSH
8516: LD_INT 31
8518: PUSH
8519: LD_INT 32
8521: PUSH
8522: LD_INT 36
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: PUSH
8548: LD_INT 101
8550: PUSH
8551: LD_INT 102
8553: PUSH
8554: LD_INT 103
8556: PUSH
8557: LD_INT 105
8559: PUSH
8560: LD_INT 106
8562: PUSH
8563: LD_INT 108
8565: PUSH
8566: LD_INT 109
8568: PUSH
8569: LD_INT 112
8571: PUSH
8572: LD_INT 114
8574: PUSH
8575: LD_INT 116
8577: PUSH
8578: LD_INT 117
8580: PUSH
8581: LD_INT 118
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: PUSH
8598: EMPTY
8599: LIST
8600: LIST
8601: ST_TO_ADDR
8602: GO 10701
8604: LD_INT 10
8606: DOUBLE
8607: EQUAL
8608: IFTRUE 8612
8610: GO 8808
8612: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8613: LD_ADDR_VAR 0 2
8617: PUSH
8618: LD_INT 2
8620: PUSH
8621: LD_INT 4
8623: PUSH
8624: LD_INT 5
8626: PUSH
8627: LD_INT 6
8629: PUSH
8630: LD_INT 7
8632: PUSH
8633: LD_INT 8
8635: PUSH
8636: LD_INT 9
8638: PUSH
8639: LD_INT 10
8641: PUSH
8642: LD_INT 11
8644: PUSH
8645: LD_INT 12
8647: PUSH
8648: LD_INT 13
8650: PUSH
8651: LD_INT 14
8653: PUSH
8654: LD_INT 15
8656: PUSH
8657: LD_INT 16
8659: PUSH
8660: LD_INT 17
8662: PUSH
8663: LD_INT 18
8665: PUSH
8666: LD_INT 19
8668: PUSH
8669: LD_INT 20
8671: PUSH
8672: LD_INT 21
8674: PUSH
8675: LD_INT 22
8677: PUSH
8678: LD_INT 23
8680: PUSH
8681: LD_INT 24
8683: PUSH
8684: LD_INT 25
8686: PUSH
8687: LD_INT 26
8689: PUSH
8690: LD_INT 28
8692: PUSH
8693: LD_INT 30
8695: PUSH
8696: LD_INT 31
8698: PUSH
8699: LD_INT 32
8701: PUSH
8702: LD_INT 36
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: PUSH
8736: LD_INT 101
8738: PUSH
8739: LD_INT 102
8741: PUSH
8742: LD_INT 103
8744: PUSH
8745: LD_INT 104
8747: PUSH
8748: LD_INT 105
8750: PUSH
8751: LD_INT 106
8753: PUSH
8754: LD_INT 107
8756: PUSH
8757: LD_INT 108
8759: PUSH
8760: LD_INT 109
8762: PUSH
8763: LD_INT 110
8765: PUSH
8766: LD_INT 111
8768: PUSH
8769: LD_INT 112
8771: PUSH
8772: LD_INT 114
8774: PUSH
8775: LD_INT 116
8777: PUSH
8778: LD_INT 117
8780: PUSH
8781: LD_INT 118
8783: PUSH
8784: EMPTY
8785: LIST
8786: LIST
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: LIST
8800: LIST
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: ST_TO_ADDR
8806: GO 10701
8808: LD_INT 11
8810: DOUBLE
8811: EQUAL
8812: IFTRUE 8816
8814: GO 9020
8816: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8817: LD_ADDR_VAR 0 2
8821: PUSH
8822: LD_INT 2
8824: PUSH
8825: LD_INT 3
8827: PUSH
8828: LD_INT 4
8830: PUSH
8831: LD_INT 5
8833: PUSH
8834: LD_INT 6
8836: PUSH
8837: LD_INT 7
8839: PUSH
8840: LD_INT 8
8842: PUSH
8843: LD_INT 9
8845: PUSH
8846: LD_INT 10
8848: PUSH
8849: LD_INT 11
8851: PUSH
8852: LD_INT 12
8854: PUSH
8855: LD_INT 13
8857: PUSH
8858: LD_INT 14
8860: PUSH
8861: LD_INT 15
8863: PUSH
8864: LD_INT 16
8866: PUSH
8867: LD_INT 17
8869: PUSH
8870: LD_INT 18
8872: PUSH
8873: LD_INT 19
8875: PUSH
8876: LD_INT 20
8878: PUSH
8879: LD_INT 21
8881: PUSH
8882: LD_INT 22
8884: PUSH
8885: LD_INT 23
8887: PUSH
8888: LD_INT 24
8890: PUSH
8891: LD_INT 25
8893: PUSH
8894: LD_INT 26
8896: PUSH
8897: LD_INT 28
8899: PUSH
8900: LD_INT 30
8902: PUSH
8903: LD_INT 31
8905: PUSH
8906: LD_INT 32
8908: PUSH
8909: LD_INT 34
8911: PUSH
8912: LD_INT 36
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: PUSH
8948: LD_INT 101
8950: PUSH
8951: LD_INT 102
8953: PUSH
8954: LD_INT 103
8956: PUSH
8957: LD_INT 104
8959: PUSH
8960: LD_INT 105
8962: PUSH
8963: LD_INT 106
8965: PUSH
8966: LD_INT 107
8968: PUSH
8969: LD_INT 108
8971: PUSH
8972: LD_INT 109
8974: PUSH
8975: LD_INT 110
8977: PUSH
8978: LD_INT 111
8980: PUSH
8981: LD_INT 112
8983: PUSH
8984: LD_INT 114
8986: PUSH
8987: LD_INT 116
8989: PUSH
8990: LD_INT 117
8992: PUSH
8993: LD_INT 118
8995: PUSH
8996: EMPTY
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: PUSH
9014: EMPTY
9015: LIST
9016: LIST
9017: ST_TO_ADDR
9018: GO 10701
9020: LD_INT 12
9022: DOUBLE
9023: EQUAL
9024: IFTRUE 9028
9026: GO 9248
9028: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
9029: LD_ADDR_VAR 0 2
9033: PUSH
9034: LD_INT 1
9036: PUSH
9037: LD_INT 2
9039: PUSH
9040: LD_INT 3
9042: PUSH
9043: LD_INT 4
9045: PUSH
9046: LD_INT 5
9048: PUSH
9049: LD_INT 6
9051: PUSH
9052: LD_INT 7
9054: PUSH
9055: LD_INT 8
9057: PUSH
9058: LD_INT 9
9060: PUSH
9061: LD_INT 10
9063: PUSH
9064: LD_INT 11
9066: PUSH
9067: LD_INT 12
9069: PUSH
9070: LD_INT 13
9072: PUSH
9073: LD_INT 14
9075: PUSH
9076: LD_INT 15
9078: PUSH
9079: LD_INT 16
9081: PUSH
9082: LD_INT 17
9084: PUSH
9085: LD_INT 18
9087: PUSH
9088: LD_INT 19
9090: PUSH
9091: LD_INT 20
9093: PUSH
9094: LD_INT 21
9096: PUSH
9097: LD_INT 22
9099: PUSH
9100: LD_INT 23
9102: PUSH
9103: LD_INT 24
9105: PUSH
9106: LD_INT 25
9108: PUSH
9109: LD_INT 26
9111: PUSH
9112: LD_INT 27
9114: PUSH
9115: LD_INT 28
9117: PUSH
9118: LD_INT 30
9120: PUSH
9121: LD_INT 31
9123: PUSH
9124: LD_INT 32
9126: PUSH
9127: LD_INT 33
9129: PUSH
9130: LD_INT 34
9132: PUSH
9133: LD_INT 36
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: PUSH
9172: LD_INT 101
9174: PUSH
9175: LD_INT 102
9177: PUSH
9178: LD_INT 103
9180: PUSH
9181: LD_INT 104
9183: PUSH
9184: LD_INT 105
9186: PUSH
9187: LD_INT 106
9189: PUSH
9190: LD_INT 107
9192: PUSH
9193: LD_INT 108
9195: PUSH
9196: LD_INT 109
9198: PUSH
9199: LD_INT 110
9201: PUSH
9202: LD_INT 111
9204: PUSH
9205: LD_INT 112
9207: PUSH
9208: LD_INT 113
9210: PUSH
9211: LD_INT 114
9213: PUSH
9214: LD_INT 116
9216: PUSH
9217: LD_INT 117
9219: PUSH
9220: LD_INT 118
9222: PUSH
9223: EMPTY
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: PUSH
9242: EMPTY
9243: LIST
9244: LIST
9245: ST_TO_ADDR
9246: GO 10701
9248: LD_INT 13
9250: DOUBLE
9251: EQUAL
9252: IFTRUE 9256
9254: GO 9464
9256: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9257: LD_ADDR_VAR 0 2
9261: PUSH
9262: LD_INT 1
9264: PUSH
9265: LD_INT 2
9267: PUSH
9268: LD_INT 3
9270: PUSH
9271: LD_INT 4
9273: PUSH
9274: LD_INT 5
9276: PUSH
9277: LD_INT 8
9279: PUSH
9280: LD_INT 9
9282: PUSH
9283: LD_INT 10
9285: PUSH
9286: LD_INT 11
9288: PUSH
9289: LD_INT 12
9291: PUSH
9292: LD_INT 14
9294: PUSH
9295: LD_INT 15
9297: PUSH
9298: LD_INT 16
9300: PUSH
9301: LD_INT 17
9303: PUSH
9304: LD_INT 18
9306: PUSH
9307: LD_INT 19
9309: PUSH
9310: LD_INT 20
9312: PUSH
9313: LD_INT 21
9315: PUSH
9316: LD_INT 22
9318: PUSH
9319: LD_INT 23
9321: PUSH
9322: LD_INT 24
9324: PUSH
9325: LD_INT 25
9327: PUSH
9328: LD_INT 26
9330: PUSH
9331: LD_INT 27
9333: PUSH
9334: LD_INT 28
9336: PUSH
9337: LD_INT 30
9339: PUSH
9340: LD_INT 31
9342: PUSH
9343: LD_INT 32
9345: PUSH
9346: LD_INT 33
9348: PUSH
9349: LD_INT 34
9351: PUSH
9352: LD_INT 36
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: PUSH
9388: LD_INT 101
9390: PUSH
9391: LD_INT 102
9393: PUSH
9394: LD_INT 103
9396: PUSH
9397: LD_INT 104
9399: PUSH
9400: LD_INT 105
9402: PUSH
9403: LD_INT 106
9405: PUSH
9406: LD_INT 107
9408: PUSH
9409: LD_INT 108
9411: PUSH
9412: LD_INT 109
9414: PUSH
9415: LD_INT 110
9417: PUSH
9418: LD_INT 111
9420: PUSH
9421: LD_INT 112
9423: PUSH
9424: LD_INT 113
9426: PUSH
9427: LD_INT 114
9429: PUSH
9430: LD_INT 116
9432: PUSH
9433: LD_INT 117
9435: PUSH
9436: LD_INT 118
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: ST_TO_ADDR
9462: GO 10701
9464: LD_INT 14
9466: DOUBLE
9467: EQUAL
9468: IFTRUE 9472
9470: GO 9696
9472: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9473: LD_ADDR_VAR 0 2
9477: PUSH
9478: LD_INT 1
9480: PUSH
9481: LD_INT 2
9483: PUSH
9484: LD_INT 3
9486: PUSH
9487: LD_INT 4
9489: PUSH
9490: LD_INT 5
9492: PUSH
9493: LD_INT 6
9495: PUSH
9496: LD_INT 7
9498: PUSH
9499: LD_INT 8
9501: PUSH
9502: LD_INT 9
9504: PUSH
9505: LD_INT 10
9507: PUSH
9508: LD_INT 11
9510: PUSH
9511: LD_INT 12
9513: PUSH
9514: LD_INT 13
9516: PUSH
9517: LD_INT 14
9519: PUSH
9520: LD_INT 15
9522: PUSH
9523: LD_INT 16
9525: PUSH
9526: LD_INT 17
9528: PUSH
9529: LD_INT 18
9531: PUSH
9532: LD_INT 19
9534: PUSH
9535: LD_INT 20
9537: PUSH
9538: LD_INT 21
9540: PUSH
9541: LD_INT 22
9543: PUSH
9544: LD_INT 23
9546: PUSH
9547: LD_INT 24
9549: PUSH
9550: LD_INT 25
9552: PUSH
9553: LD_INT 26
9555: PUSH
9556: LD_INT 27
9558: PUSH
9559: LD_INT 28
9561: PUSH
9562: LD_INT 29
9564: PUSH
9565: LD_INT 30
9567: PUSH
9568: LD_INT 31
9570: PUSH
9571: LD_INT 32
9573: PUSH
9574: LD_INT 33
9576: PUSH
9577: LD_INT 34
9579: PUSH
9580: LD_INT 36
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: PUSH
9620: LD_INT 101
9622: PUSH
9623: LD_INT 102
9625: PUSH
9626: LD_INT 103
9628: PUSH
9629: LD_INT 104
9631: PUSH
9632: LD_INT 105
9634: PUSH
9635: LD_INT 106
9637: PUSH
9638: LD_INT 107
9640: PUSH
9641: LD_INT 108
9643: PUSH
9644: LD_INT 109
9646: PUSH
9647: LD_INT 110
9649: PUSH
9650: LD_INT 111
9652: PUSH
9653: LD_INT 112
9655: PUSH
9656: LD_INT 113
9658: PUSH
9659: LD_INT 114
9661: PUSH
9662: LD_INT 116
9664: PUSH
9665: LD_INT 117
9667: PUSH
9668: LD_INT 118
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: ST_TO_ADDR
9694: GO 10701
9696: LD_INT 15
9698: DOUBLE
9699: EQUAL
9700: IFTRUE 9704
9702: GO 9928
9704: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9705: LD_ADDR_VAR 0 2
9709: PUSH
9710: LD_INT 1
9712: PUSH
9713: LD_INT 2
9715: PUSH
9716: LD_INT 3
9718: PUSH
9719: LD_INT 4
9721: PUSH
9722: LD_INT 5
9724: PUSH
9725: LD_INT 6
9727: PUSH
9728: LD_INT 7
9730: PUSH
9731: LD_INT 8
9733: PUSH
9734: LD_INT 9
9736: PUSH
9737: LD_INT 10
9739: PUSH
9740: LD_INT 11
9742: PUSH
9743: LD_INT 12
9745: PUSH
9746: LD_INT 13
9748: PUSH
9749: LD_INT 14
9751: PUSH
9752: LD_INT 15
9754: PUSH
9755: LD_INT 16
9757: PUSH
9758: LD_INT 17
9760: PUSH
9761: LD_INT 18
9763: PUSH
9764: LD_INT 19
9766: PUSH
9767: LD_INT 20
9769: PUSH
9770: LD_INT 21
9772: PUSH
9773: LD_INT 22
9775: PUSH
9776: LD_INT 23
9778: PUSH
9779: LD_INT 24
9781: PUSH
9782: LD_INT 25
9784: PUSH
9785: LD_INT 26
9787: PUSH
9788: LD_INT 27
9790: PUSH
9791: LD_INT 28
9793: PUSH
9794: LD_INT 29
9796: PUSH
9797: LD_INT 30
9799: PUSH
9800: LD_INT 31
9802: PUSH
9803: LD_INT 32
9805: PUSH
9806: LD_INT 33
9808: PUSH
9809: LD_INT 34
9811: PUSH
9812: LD_INT 36
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: PUSH
9852: LD_INT 101
9854: PUSH
9855: LD_INT 102
9857: PUSH
9858: LD_INT 103
9860: PUSH
9861: LD_INT 104
9863: PUSH
9864: LD_INT 105
9866: PUSH
9867: LD_INT 106
9869: PUSH
9870: LD_INT 107
9872: PUSH
9873: LD_INT 108
9875: PUSH
9876: LD_INT 109
9878: PUSH
9879: LD_INT 110
9881: PUSH
9882: LD_INT 111
9884: PUSH
9885: LD_INT 112
9887: PUSH
9888: LD_INT 113
9890: PUSH
9891: LD_INT 114
9893: PUSH
9894: LD_INT 116
9896: PUSH
9897: LD_INT 117
9899: PUSH
9900: LD_INT 118
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: ST_TO_ADDR
9926: GO 10701
9928: LD_INT 16
9930: DOUBLE
9931: EQUAL
9932: IFTRUE 9936
9934: GO 10072
9936: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9937: LD_ADDR_VAR 0 2
9941: PUSH
9942: LD_INT 2
9944: PUSH
9945: LD_INT 4
9947: PUSH
9948: LD_INT 5
9950: PUSH
9951: LD_INT 7
9953: PUSH
9954: LD_INT 11
9956: PUSH
9957: LD_INT 12
9959: PUSH
9960: LD_INT 15
9962: PUSH
9963: LD_INT 16
9965: PUSH
9966: LD_INT 20
9968: PUSH
9969: LD_INT 21
9971: PUSH
9972: LD_INT 22
9974: PUSH
9975: LD_INT 23
9977: PUSH
9978: LD_INT 25
9980: PUSH
9981: LD_INT 26
9983: PUSH
9984: LD_INT 30
9986: PUSH
9987: LD_INT 31
9989: PUSH
9990: LD_INT 32
9992: PUSH
9993: LD_INT 33
9995: PUSH
9996: LD_INT 34
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: PUSH
10020: LD_INT 101
10022: PUSH
10023: LD_INT 102
10025: PUSH
10026: LD_INT 103
10028: PUSH
10029: LD_INT 106
10031: PUSH
10032: LD_INT 108
10034: PUSH
10035: LD_INT 112
10037: PUSH
10038: LD_INT 113
10040: PUSH
10041: LD_INT 114
10043: PUSH
10044: LD_INT 116
10046: PUSH
10047: LD_INT 117
10049: PUSH
10050: LD_INT 118
10052: PUSH
10053: EMPTY
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: ST_TO_ADDR
10070: GO 10701
10072: LD_INT 17
10074: DOUBLE
10075: EQUAL
10076: IFTRUE 10080
10078: GO 10304
10080: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
10081: LD_ADDR_VAR 0 2
10085: PUSH
10086: LD_INT 1
10088: PUSH
10089: LD_INT 2
10091: PUSH
10092: LD_INT 3
10094: PUSH
10095: LD_INT 4
10097: PUSH
10098: LD_INT 5
10100: PUSH
10101: LD_INT 6
10103: PUSH
10104: LD_INT 7
10106: PUSH
10107: LD_INT 8
10109: PUSH
10110: LD_INT 9
10112: PUSH
10113: LD_INT 10
10115: PUSH
10116: LD_INT 11
10118: PUSH
10119: LD_INT 12
10121: PUSH
10122: LD_INT 13
10124: PUSH
10125: LD_INT 14
10127: PUSH
10128: LD_INT 15
10130: PUSH
10131: LD_INT 16
10133: PUSH
10134: LD_INT 17
10136: PUSH
10137: LD_INT 18
10139: PUSH
10140: LD_INT 19
10142: PUSH
10143: LD_INT 20
10145: PUSH
10146: LD_INT 21
10148: PUSH
10149: LD_INT 22
10151: PUSH
10152: LD_INT 23
10154: PUSH
10155: LD_INT 24
10157: PUSH
10158: LD_INT 25
10160: PUSH
10161: LD_INT 26
10163: PUSH
10164: LD_INT 27
10166: PUSH
10167: LD_INT 28
10169: PUSH
10170: LD_INT 29
10172: PUSH
10173: LD_INT 30
10175: PUSH
10176: LD_INT 31
10178: PUSH
10179: LD_INT 32
10181: PUSH
10182: LD_INT 33
10184: PUSH
10185: LD_INT 34
10187: PUSH
10188: LD_INT 36
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: PUSH
10228: LD_INT 101
10230: PUSH
10231: LD_INT 102
10233: PUSH
10234: LD_INT 103
10236: PUSH
10237: LD_INT 104
10239: PUSH
10240: LD_INT 105
10242: PUSH
10243: LD_INT 106
10245: PUSH
10246: LD_INT 107
10248: PUSH
10249: LD_INT 108
10251: PUSH
10252: LD_INT 109
10254: PUSH
10255: LD_INT 110
10257: PUSH
10258: LD_INT 111
10260: PUSH
10261: LD_INT 112
10263: PUSH
10264: LD_INT 113
10266: PUSH
10267: LD_INT 114
10269: PUSH
10270: LD_INT 116
10272: PUSH
10273: LD_INT 117
10275: PUSH
10276: LD_INT 118
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: ST_TO_ADDR
10302: GO 10701
10304: LD_INT 18
10306: DOUBLE
10307: EQUAL
10308: IFTRUE 10312
10310: GO 10460
10312: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10313: LD_ADDR_VAR 0 2
10317: PUSH
10318: LD_INT 2
10320: PUSH
10321: LD_INT 4
10323: PUSH
10324: LD_INT 5
10326: PUSH
10327: LD_INT 7
10329: PUSH
10330: LD_INT 11
10332: PUSH
10333: LD_INT 12
10335: PUSH
10336: LD_INT 15
10338: PUSH
10339: LD_INT 16
10341: PUSH
10342: LD_INT 20
10344: PUSH
10345: LD_INT 21
10347: PUSH
10348: LD_INT 22
10350: PUSH
10351: LD_INT 23
10353: PUSH
10354: LD_INT 25
10356: PUSH
10357: LD_INT 26
10359: PUSH
10360: LD_INT 30
10362: PUSH
10363: LD_INT 31
10365: PUSH
10366: LD_INT 32
10368: PUSH
10369: LD_INT 33
10371: PUSH
10372: LD_INT 34
10374: PUSH
10375: LD_INT 35
10377: PUSH
10378: LD_INT 36
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: PUSH
10404: LD_INT 101
10406: PUSH
10407: LD_INT 102
10409: PUSH
10410: LD_INT 103
10412: PUSH
10413: LD_INT 106
10415: PUSH
10416: LD_INT 108
10418: PUSH
10419: LD_INT 112
10421: PUSH
10422: LD_INT 113
10424: PUSH
10425: LD_INT 114
10427: PUSH
10428: LD_INT 115
10430: PUSH
10431: LD_INT 116
10433: PUSH
10434: LD_INT 117
10436: PUSH
10437: LD_INT 118
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: ST_TO_ADDR
10458: GO 10701
10460: LD_INT 19
10462: DOUBLE
10463: EQUAL
10464: IFTRUE 10468
10466: GO 10700
10468: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10469: LD_ADDR_VAR 0 2
10473: PUSH
10474: LD_INT 1
10476: PUSH
10477: LD_INT 2
10479: PUSH
10480: LD_INT 3
10482: PUSH
10483: LD_INT 4
10485: PUSH
10486: LD_INT 5
10488: PUSH
10489: LD_INT 6
10491: PUSH
10492: LD_INT 7
10494: PUSH
10495: LD_INT 8
10497: PUSH
10498: LD_INT 9
10500: PUSH
10501: LD_INT 10
10503: PUSH
10504: LD_INT 11
10506: PUSH
10507: LD_INT 12
10509: PUSH
10510: LD_INT 13
10512: PUSH
10513: LD_INT 14
10515: PUSH
10516: LD_INT 15
10518: PUSH
10519: LD_INT 16
10521: PUSH
10522: LD_INT 17
10524: PUSH
10525: LD_INT 18
10527: PUSH
10528: LD_INT 19
10530: PUSH
10531: LD_INT 20
10533: PUSH
10534: LD_INT 21
10536: PUSH
10537: LD_INT 22
10539: PUSH
10540: LD_INT 23
10542: PUSH
10543: LD_INT 24
10545: PUSH
10546: LD_INT 25
10548: PUSH
10549: LD_INT 26
10551: PUSH
10552: LD_INT 27
10554: PUSH
10555: LD_INT 28
10557: PUSH
10558: LD_INT 29
10560: PUSH
10561: LD_INT 30
10563: PUSH
10564: LD_INT 31
10566: PUSH
10567: LD_INT 32
10569: PUSH
10570: LD_INT 33
10572: PUSH
10573: LD_INT 34
10575: PUSH
10576: LD_INT 35
10578: PUSH
10579: LD_INT 36
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: PUSH
10620: LD_INT 101
10622: PUSH
10623: LD_INT 102
10625: PUSH
10626: LD_INT 103
10628: PUSH
10629: LD_INT 104
10631: PUSH
10632: LD_INT 105
10634: PUSH
10635: LD_INT 106
10637: PUSH
10638: LD_INT 107
10640: PUSH
10641: LD_INT 108
10643: PUSH
10644: LD_INT 109
10646: PUSH
10647: LD_INT 110
10649: PUSH
10650: LD_INT 111
10652: PUSH
10653: LD_INT 112
10655: PUSH
10656: LD_INT 113
10658: PUSH
10659: LD_INT 114
10661: PUSH
10662: LD_INT 115
10664: PUSH
10665: LD_INT 116
10667: PUSH
10668: LD_INT 117
10670: PUSH
10671: LD_INT 118
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: ST_TO_ADDR
10698: GO 10701
10700: POP
// end else
10701: GO 10932
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10703: LD_ADDR_VAR 0 2
10707: PUSH
10708: LD_INT 1
10710: PUSH
10711: LD_INT 2
10713: PUSH
10714: LD_INT 3
10716: PUSH
10717: LD_INT 4
10719: PUSH
10720: LD_INT 5
10722: PUSH
10723: LD_INT 6
10725: PUSH
10726: LD_INT 7
10728: PUSH
10729: LD_INT 8
10731: PUSH
10732: LD_INT 9
10734: PUSH
10735: LD_INT 10
10737: PUSH
10738: LD_INT 11
10740: PUSH
10741: LD_INT 12
10743: PUSH
10744: LD_INT 13
10746: PUSH
10747: LD_INT 14
10749: PUSH
10750: LD_INT 15
10752: PUSH
10753: LD_INT 16
10755: PUSH
10756: LD_INT 17
10758: PUSH
10759: LD_INT 18
10761: PUSH
10762: LD_INT 19
10764: PUSH
10765: LD_INT 20
10767: PUSH
10768: LD_INT 21
10770: PUSH
10771: LD_INT 22
10773: PUSH
10774: LD_INT 23
10776: PUSH
10777: LD_INT 24
10779: PUSH
10780: LD_INT 25
10782: PUSH
10783: LD_INT 26
10785: PUSH
10786: LD_INT 27
10788: PUSH
10789: LD_INT 28
10791: PUSH
10792: LD_INT 29
10794: PUSH
10795: LD_INT 30
10797: PUSH
10798: LD_INT 31
10800: PUSH
10801: LD_INT 32
10803: PUSH
10804: LD_INT 33
10806: PUSH
10807: LD_INT 34
10809: PUSH
10810: LD_INT 35
10812: PUSH
10813: LD_INT 36
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: PUSH
10854: LD_INT 101
10856: PUSH
10857: LD_INT 102
10859: PUSH
10860: LD_INT 103
10862: PUSH
10863: LD_INT 104
10865: PUSH
10866: LD_INT 105
10868: PUSH
10869: LD_INT 106
10871: PUSH
10872: LD_INT 107
10874: PUSH
10875: LD_INT 108
10877: PUSH
10878: LD_INT 109
10880: PUSH
10881: LD_INT 110
10883: PUSH
10884: LD_INT 111
10886: PUSH
10887: LD_INT 112
10889: PUSH
10890: LD_INT 113
10892: PUSH
10893: LD_INT 114
10895: PUSH
10896: LD_INT 115
10898: PUSH
10899: LD_INT 116
10901: PUSH
10902: LD_INT 117
10904: PUSH
10905: LD_INT 118
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: ST_TO_ADDR
// if result then
10932: LD_VAR 0 2
10936: IFFALSE 11722
// begin normal :=  ;
10938: LD_ADDR_VAR 0 5
10942: PUSH
10943: LD_STRING 
10945: ST_TO_ADDR
// hardcore :=  ;
10946: LD_ADDR_VAR 0 6
10950: PUSH
10951: LD_STRING 
10953: ST_TO_ADDR
// active :=  ;
10954: LD_ADDR_VAR 0 7
10958: PUSH
10959: LD_STRING 
10961: ST_TO_ADDR
// for i = 1 to normalCounter do
10962: LD_ADDR_VAR 0 8
10966: PUSH
10967: DOUBLE
10968: LD_INT 1
10970: DEC
10971: ST_TO_ADDR
10972: LD_EXP 25
10976: PUSH
10977: FOR_TO
10978: IFFALSE 11079
// begin tmp := 0 ;
10980: LD_ADDR_VAR 0 3
10984: PUSH
10985: LD_STRING 0
10987: ST_TO_ADDR
// if result [ 1 ] then
10988: LD_VAR 0 2
10992: PUSH
10993: LD_INT 1
10995: ARRAY
10996: IFFALSE 11061
// if result [ 1 ] [ 1 ] = i then
10998: LD_VAR 0 2
11002: PUSH
11003: LD_INT 1
11005: ARRAY
11006: PUSH
11007: LD_INT 1
11009: ARRAY
11010: PUSH
11011: LD_VAR 0 8
11015: EQUAL
11016: IFFALSE 11061
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11018: LD_ADDR_VAR 0 2
11022: PUSH
11023: LD_VAR 0 2
11027: PPUSH
11028: LD_INT 1
11030: PPUSH
11031: LD_VAR 0 2
11035: PUSH
11036: LD_INT 1
11038: ARRAY
11039: PPUSH
11040: LD_INT 1
11042: PPUSH
11043: CALL_OW 3
11047: PPUSH
11048: CALL_OW 1
11052: ST_TO_ADDR
// tmp := 1 ;
11053: LD_ADDR_VAR 0 3
11057: PUSH
11058: LD_STRING 1
11060: ST_TO_ADDR
// end ; normal := normal & tmp ;
11061: LD_ADDR_VAR 0 5
11065: PUSH
11066: LD_VAR 0 5
11070: PUSH
11071: LD_VAR 0 3
11075: STR
11076: ST_TO_ADDR
// end ;
11077: GO 10977
11079: POP
11080: POP
// for i = 1 to hardcoreCounter do
11081: LD_ADDR_VAR 0 8
11085: PUSH
11086: DOUBLE
11087: LD_INT 1
11089: DEC
11090: ST_TO_ADDR
11091: LD_EXP 26
11095: PUSH
11096: FOR_TO
11097: IFFALSE 11202
// begin tmp := 0 ;
11099: LD_ADDR_VAR 0 3
11103: PUSH
11104: LD_STRING 0
11106: ST_TO_ADDR
// if result [ 2 ] then
11107: LD_VAR 0 2
11111: PUSH
11112: LD_INT 2
11114: ARRAY
11115: IFFALSE 11184
// if result [ 2 ] [ 1 ] = 100 + i then
11117: LD_VAR 0 2
11121: PUSH
11122: LD_INT 2
11124: ARRAY
11125: PUSH
11126: LD_INT 1
11128: ARRAY
11129: PUSH
11130: LD_INT 100
11132: PUSH
11133: LD_VAR 0 8
11137: PLUS
11138: EQUAL
11139: IFFALSE 11184
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11141: LD_ADDR_VAR 0 2
11145: PUSH
11146: LD_VAR 0 2
11150: PPUSH
11151: LD_INT 2
11153: PPUSH
11154: LD_VAR 0 2
11158: PUSH
11159: LD_INT 2
11161: ARRAY
11162: PPUSH
11163: LD_INT 1
11165: PPUSH
11166: CALL_OW 3
11170: PPUSH
11171: CALL_OW 1
11175: ST_TO_ADDR
// tmp := 1 ;
11176: LD_ADDR_VAR 0 3
11180: PUSH
11181: LD_STRING 1
11183: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11184: LD_ADDR_VAR 0 6
11188: PUSH
11189: LD_VAR 0 6
11193: PUSH
11194: LD_VAR 0 3
11198: STR
11199: ST_TO_ADDR
// end ;
11200: GO 11096
11202: POP
11203: POP
// if isGameLoad then
11204: LD_VAR 0 1
11208: IFFALSE 11683
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
11210: LD_ADDR_VAR 0 4
11214: PUSH
11215: LD_EXP 29
11219: PUSH
11220: LD_EXP 28
11224: PUSH
11225: LD_EXP 30
11229: PUSH
11230: LD_EXP 27
11234: PUSH
11235: LD_EXP 31
11239: PUSH
11240: LD_EXP 32
11244: PUSH
11245: LD_EXP 33
11249: PUSH
11250: LD_EXP 34
11254: PUSH
11255: LD_EXP 35
11259: PUSH
11260: LD_EXP 36
11264: PUSH
11265: LD_EXP 37
11269: PUSH
11270: LD_EXP 38
11274: PUSH
11275: LD_EXP 39
11279: PUSH
11280: LD_EXP 40
11284: PUSH
11285: LD_EXP 48
11289: PUSH
11290: LD_EXP 49
11294: PUSH
11295: LD_EXP 50
11299: PUSH
11300: LD_EXP 51
11304: PUSH
11305: LD_EXP 53
11309: PUSH
11310: LD_EXP 54
11314: PUSH
11315: LD_EXP 55
11319: PUSH
11320: LD_EXP 58
11324: PUSH
11325: LD_EXP 60
11329: PUSH
11330: LD_EXP 61
11334: PUSH
11335: LD_EXP 62
11339: PUSH
11340: LD_EXP 64
11344: PUSH
11345: LD_EXP 65
11349: PUSH
11350: LD_EXP 68
11354: PUSH
11355: LD_EXP 69
11359: PUSH
11360: LD_EXP 70
11364: PUSH
11365: LD_EXP 71
11369: PUSH
11370: LD_EXP 72
11374: PUSH
11375: LD_EXP 73
11379: PUSH
11380: LD_EXP 74
11384: PUSH
11385: LD_EXP 75
11389: PUSH
11390: LD_EXP 76
11394: PUSH
11395: LD_EXP 41
11399: PUSH
11400: LD_EXP 42
11404: PUSH
11405: LD_EXP 45
11409: PUSH
11410: LD_EXP 46
11414: PUSH
11415: LD_EXP 47
11419: PUSH
11420: LD_EXP 43
11424: PUSH
11425: LD_EXP 44
11429: PUSH
11430: LD_EXP 52
11434: PUSH
11435: LD_EXP 56
11439: PUSH
11440: LD_EXP 57
11444: PUSH
11445: LD_EXP 59
11449: PUSH
11450: LD_EXP 63
11454: PUSH
11455: LD_EXP 66
11459: PUSH
11460: LD_EXP 67
11464: PUSH
11465: LD_EXP 77
11469: PUSH
11470: LD_EXP 78
11474: PUSH
11475: LD_EXP 79
11479: PUSH
11480: LD_EXP 80
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: ST_TO_ADDR
// tmp :=  ;
11541: LD_ADDR_VAR 0 3
11545: PUSH
11546: LD_STRING 
11548: ST_TO_ADDR
// for i = 1 to normalCounter do
11549: LD_ADDR_VAR 0 8
11553: PUSH
11554: DOUBLE
11555: LD_INT 1
11557: DEC
11558: ST_TO_ADDR
11559: LD_EXP 25
11563: PUSH
11564: FOR_TO
11565: IFFALSE 11601
// begin if flags [ i ] then
11567: LD_VAR 0 4
11571: PUSH
11572: LD_VAR 0 8
11576: ARRAY
11577: IFFALSE 11599
// tmp := tmp & i & ; ;
11579: LD_ADDR_VAR 0 3
11583: PUSH
11584: LD_VAR 0 3
11588: PUSH
11589: LD_VAR 0 8
11593: STR
11594: PUSH
11595: LD_STRING ;
11597: STR
11598: ST_TO_ADDR
// end ;
11599: GO 11564
11601: POP
11602: POP
// for i = 1 to hardcoreCounter do
11603: LD_ADDR_VAR 0 8
11607: PUSH
11608: DOUBLE
11609: LD_INT 1
11611: DEC
11612: ST_TO_ADDR
11613: LD_EXP 26
11617: PUSH
11618: FOR_TO
11619: IFFALSE 11665
// begin if flags [ normalCounter + i ] then
11621: LD_VAR 0 4
11625: PUSH
11626: LD_EXP 25
11630: PUSH
11631: LD_VAR 0 8
11635: PLUS
11636: ARRAY
11637: IFFALSE 11663
// tmp := tmp & ( 100 + i ) & ; ;
11639: LD_ADDR_VAR 0 3
11643: PUSH
11644: LD_VAR 0 3
11648: PUSH
11649: LD_INT 100
11651: PUSH
11652: LD_VAR 0 8
11656: PLUS
11657: STR
11658: PUSH
11659: LD_STRING ;
11661: STR
11662: ST_TO_ADDR
// end ;
11663: GO 11618
11665: POP
11666: POP
// if tmp then
11667: LD_VAR 0 3
11671: IFFALSE 11683
// active := tmp ;
11673: LD_ADDR_VAR 0 7
11677: PUSH
11678: LD_VAR 0 3
11682: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11683: LD_STRING getStreamItemsFromMission("
11685: PUSH
11686: LD_VAR 0 5
11690: STR
11691: PUSH
11692: LD_STRING ","
11694: STR
11695: PUSH
11696: LD_VAR 0 6
11700: STR
11701: PUSH
11702: LD_STRING ","
11704: STR
11705: PUSH
11706: LD_VAR 0 7
11710: STR
11711: PUSH
11712: LD_STRING ")
11714: STR
11715: PPUSH
11716: CALL_OW 559
// end else
11720: GO 11729
// ToLua ( getStreamItemsFromMission("","","") ) ;
11722: LD_STRING getStreamItemsFromMission("","","")
11724: PPUSH
11725: CALL_OW 559
// end ;
11729: LD_VAR 0 2
11733: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11734: LD_EXP 24
11738: PUSH
11739: LD_EXP 29
11743: AND
11744: IFFALSE 11868
11746: GO 11748
11748: DISABLE
11749: LD_INT 0
11751: PPUSH
11752: PPUSH
// begin enable ;
11753: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11754: LD_ADDR_VAR 0 2
11758: PUSH
11759: LD_INT 22
11761: PUSH
11762: LD_OWVAR 2
11766: PUSH
11767: EMPTY
11768: LIST
11769: LIST
11770: PUSH
11771: LD_INT 2
11773: PUSH
11774: LD_INT 34
11776: PUSH
11777: LD_INT 7
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PUSH
11784: LD_INT 34
11786: PUSH
11787: LD_INT 45
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: PUSH
11794: LD_INT 34
11796: PUSH
11797: LD_INT 28
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: PUSH
11804: LD_INT 34
11806: PUSH
11807: LD_INT 47
11809: PUSH
11810: EMPTY
11811: LIST
11812: LIST
11813: PUSH
11814: EMPTY
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: PPUSH
11825: CALL_OW 69
11829: ST_TO_ADDR
// if not tmp then
11830: LD_VAR 0 2
11834: NOT
11835: IFFALSE 11839
// exit ;
11837: GO 11868
// for i in tmp do
11839: LD_ADDR_VAR 0 1
11843: PUSH
11844: LD_VAR 0 2
11848: PUSH
11849: FOR_IN
11850: IFFALSE 11866
// begin SetLives ( i , 0 ) ;
11852: LD_VAR 0 1
11856: PPUSH
11857: LD_INT 0
11859: PPUSH
11860: CALL_OW 234
// end ;
11864: GO 11849
11866: POP
11867: POP
// end ;
11868: PPOPN 2
11870: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11871: LD_EXP 24
11875: PUSH
11876: LD_EXP 30
11880: AND
11881: IFFALSE 11965
11883: GO 11885
11885: DISABLE
11886: LD_INT 0
11888: PPUSH
11889: PPUSH
// begin enable ;
11890: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11891: LD_ADDR_VAR 0 2
11895: PUSH
11896: LD_INT 22
11898: PUSH
11899: LD_OWVAR 2
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: PUSH
11908: LD_INT 32
11910: PUSH
11911: LD_INT 3
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: PPUSH
11922: CALL_OW 69
11926: ST_TO_ADDR
// if not tmp then
11927: LD_VAR 0 2
11931: NOT
11932: IFFALSE 11936
// exit ;
11934: GO 11965
// for i in tmp do
11936: LD_ADDR_VAR 0 1
11940: PUSH
11941: LD_VAR 0 2
11945: PUSH
11946: FOR_IN
11947: IFFALSE 11963
// begin SetLives ( i , 0 ) ;
11949: LD_VAR 0 1
11953: PPUSH
11954: LD_INT 0
11956: PPUSH
11957: CALL_OW 234
// end ;
11961: GO 11946
11963: POP
11964: POP
// end ;
11965: PPOPN 2
11967: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11968: LD_EXP 24
11972: PUSH
11973: LD_EXP 27
11977: AND
11978: IFFALSE 12071
11980: GO 11982
11982: DISABLE
11983: LD_INT 0
11985: PPUSH
// begin enable ;
11986: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11987: LD_ADDR_VAR 0 1
11991: PUSH
11992: LD_INT 22
11994: PUSH
11995: LD_OWVAR 2
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: PUSH
12004: LD_INT 2
12006: PUSH
12007: LD_INT 25
12009: PUSH
12010: LD_INT 5
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: PUSH
12017: LD_INT 25
12019: PUSH
12020: LD_INT 9
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: PUSH
12027: LD_INT 25
12029: PUSH
12030: LD_INT 8
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: PPUSH
12047: CALL_OW 69
12051: PUSH
12052: FOR_IN
12053: IFFALSE 12069
// begin SetClass ( i , 1 ) ;
12055: LD_VAR 0 1
12059: PPUSH
12060: LD_INT 1
12062: PPUSH
12063: CALL_OW 336
// end ;
12067: GO 12052
12069: POP
12070: POP
// end ;
12071: PPOPN 1
12073: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12074: LD_EXP 24
12078: PUSH
12079: LD_EXP 28
12083: AND
12084: PUSH
12085: LD_OWVAR 65
12089: PUSH
12090: LD_INT 7
12092: LESS
12093: AND
12094: IFFALSE 12108
12096: GO 12098
12098: DISABLE
// begin enable ;
12099: ENABLE
// game_speed := 7 ;
12100: LD_ADDR_OWVAR 65
12104: PUSH
12105: LD_INT 7
12107: ST_TO_ADDR
// end ;
12108: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12109: LD_EXP 24
12113: PUSH
12114: LD_EXP 31
12118: AND
12119: IFFALSE 12321
12121: GO 12123
12123: DISABLE
12124: LD_INT 0
12126: PPUSH
12127: PPUSH
12128: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12129: LD_ADDR_VAR 0 3
12133: PUSH
12134: LD_INT 81
12136: PUSH
12137: LD_OWVAR 2
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: PUSH
12146: LD_INT 21
12148: PUSH
12149: LD_INT 1
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PPUSH
12160: CALL_OW 69
12164: ST_TO_ADDR
// if not tmp then
12165: LD_VAR 0 3
12169: NOT
12170: IFFALSE 12174
// exit ;
12172: GO 12321
// if tmp > 5 then
12174: LD_VAR 0 3
12178: PUSH
12179: LD_INT 5
12181: GREATER
12182: IFFALSE 12194
// k := 5 else
12184: LD_ADDR_VAR 0 2
12188: PUSH
12189: LD_INT 5
12191: ST_TO_ADDR
12192: GO 12204
// k := tmp ;
12194: LD_ADDR_VAR 0 2
12198: PUSH
12199: LD_VAR 0 3
12203: ST_TO_ADDR
// for i := 1 to k do
12204: LD_ADDR_VAR 0 1
12208: PUSH
12209: DOUBLE
12210: LD_INT 1
12212: DEC
12213: ST_TO_ADDR
12214: LD_VAR 0 2
12218: PUSH
12219: FOR_TO
12220: IFFALSE 12319
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12222: LD_VAR 0 3
12226: PUSH
12227: LD_VAR 0 1
12231: ARRAY
12232: PPUSH
12233: LD_VAR 0 1
12237: PUSH
12238: LD_INT 4
12240: MOD
12241: PUSH
12242: LD_INT 1
12244: PLUS
12245: PPUSH
12246: CALL_OW 259
12250: PUSH
12251: LD_INT 10
12253: LESS
12254: IFFALSE 12317
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12256: LD_VAR 0 3
12260: PUSH
12261: LD_VAR 0 1
12265: ARRAY
12266: PPUSH
12267: LD_VAR 0 1
12271: PUSH
12272: LD_INT 4
12274: MOD
12275: PUSH
12276: LD_INT 1
12278: PLUS
12279: PPUSH
12280: LD_VAR 0 3
12284: PUSH
12285: LD_VAR 0 1
12289: ARRAY
12290: PPUSH
12291: LD_VAR 0 1
12295: PUSH
12296: LD_INT 4
12298: MOD
12299: PUSH
12300: LD_INT 1
12302: PLUS
12303: PPUSH
12304: CALL_OW 259
12308: PUSH
12309: LD_INT 1
12311: PLUS
12312: PPUSH
12313: CALL_OW 237
12317: GO 12219
12319: POP
12320: POP
// end ;
12321: PPOPN 3
12323: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12324: LD_EXP 24
12328: PUSH
12329: LD_EXP 32
12333: AND
12334: IFFALSE 12354
12336: GO 12338
12338: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12339: LD_INT 4
12341: PPUSH
12342: LD_OWVAR 2
12346: PPUSH
12347: LD_INT 0
12349: PPUSH
12350: CALL_OW 324
12354: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12355: LD_EXP 24
12359: PUSH
12360: LD_EXP 61
12364: AND
12365: IFFALSE 12385
12367: GO 12369
12369: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12370: LD_INT 19
12372: PPUSH
12373: LD_OWVAR 2
12377: PPUSH
12378: LD_INT 0
12380: PPUSH
12381: CALL_OW 324
12385: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12386: LD_EXP 24
12390: PUSH
12391: LD_EXP 33
12395: AND
12396: IFFALSE 12498
12398: GO 12400
12400: DISABLE
12401: LD_INT 0
12403: PPUSH
12404: PPUSH
// begin enable ;
12405: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12406: LD_ADDR_VAR 0 2
12410: PUSH
12411: LD_INT 22
12413: PUSH
12414: LD_OWVAR 2
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PUSH
12423: LD_INT 2
12425: PUSH
12426: LD_INT 34
12428: PUSH
12429: LD_INT 11
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: PUSH
12436: LD_INT 34
12438: PUSH
12439: LD_INT 30
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: LIST
12450: PUSH
12451: EMPTY
12452: LIST
12453: LIST
12454: PPUSH
12455: CALL_OW 69
12459: ST_TO_ADDR
// if not tmp then
12460: LD_VAR 0 2
12464: NOT
12465: IFFALSE 12469
// exit ;
12467: GO 12498
// for i in tmp do
12469: LD_ADDR_VAR 0 1
12473: PUSH
12474: LD_VAR 0 2
12478: PUSH
12479: FOR_IN
12480: IFFALSE 12496
// begin SetLives ( i , 0 ) ;
12482: LD_VAR 0 1
12486: PPUSH
12487: LD_INT 0
12489: PPUSH
12490: CALL_OW 234
// end ;
12494: GO 12479
12496: POP
12497: POP
// end ;
12498: PPOPN 2
12500: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12501: LD_EXP 24
12505: PUSH
12506: LD_EXP 34
12510: AND
12511: IFFALSE 12531
12513: GO 12515
12515: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12516: LD_INT 32
12518: PPUSH
12519: LD_OWVAR 2
12523: PPUSH
12524: LD_INT 0
12526: PPUSH
12527: CALL_OW 324
12531: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12532: LD_EXP 24
12536: PUSH
12537: LD_EXP 35
12541: AND
12542: IFFALSE 12723
12544: GO 12546
12546: DISABLE
12547: LD_INT 0
12549: PPUSH
12550: PPUSH
12551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12552: LD_ADDR_VAR 0 2
12556: PUSH
12557: LD_INT 22
12559: PUSH
12560: LD_OWVAR 2
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: PUSH
12569: LD_INT 33
12571: PUSH
12572: LD_INT 3
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: PPUSH
12583: CALL_OW 69
12587: ST_TO_ADDR
// if not tmp then
12588: LD_VAR 0 2
12592: NOT
12593: IFFALSE 12597
// exit ;
12595: GO 12723
// side := 0 ;
12597: LD_ADDR_VAR 0 3
12601: PUSH
12602: LD_INT 0
12604: ST_TO_ADDR
// for i := 1 to 8 do
12605: LD_ADDR_VAR 0 1
12609: PUSH
12610: DOUBLE
12611: LD_INT 1
12613: DEC
12614: ST_TO_ADDR
12615: LD_INT 8
12617: PUSH
12618: FOR_TO
12619: IFFALSE 12667
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12621: LD_OWVAR 2
12625: PUSH
12626: LD_VAR 0 1
12630: NONEQUAL
12631: PUSH
12632: LD_OWVAR 2
12636: PPUSH
12637: LD_VAR 0 1
12641: PPUSH
12642: CALL_OW 81
12646: PUSH
12647: LD_INT 2
12649: EQUAL
12650: AND
12651: IFFALSE 12665
// begin side := i ;
12653: LD_ADDR_VAR 0 3
12657: PUSH
12658: LD_VAR 0 1
12662: ST_TO_ADDR
// break ;
12663: GO 12667
// end ;
12665: GO 12618
12667: POP
12668: POP
// if not side then
12669: LD_VAR 0 3
12673: NOT
12674: IFFALSE 12678
// exit ;
12676: GO 12723
// for i := 1 to tmp do
12678: LD_ADDR_VAR 0 1
12682: PUSH
12683: DOUBLE
12684: LD_INT 1
12686: DEC
12687: ST_TO_ADDR
12688: LD_VAR 0 2
12692: PUSH
12693: FOR_TO
12694: IFFALSE 12721
// if Prob ( 60 ) then
12696: LD_INT 60
12698: PPUSH
12699: CALL_OW 13
12703: IFFALSE 12719
// SetSide ( i , side ) ;
12705: LD_VAR 0 1
12709: PPUSH
12710: LD_VAR 0 3
12714: PPUSH
12715: CALL_OW 235
12719: GO 12693
12721: POP
12722: POP
// end ;
12723: PPOPN 3
12725: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12726: LD_EXP 24
12730: PUSH
12731: LD_EXP 37
12735: AND
12736: IFFALSE 12855
12738: GO 12740
12740: DISABLE
12741: LD_INT 0
12743: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12744: LD_ADDR_VAR 0 1
12748: PUSH
12749: LD_INT 22
12751: PUSH
12752: LD_OWVAR 2
12756: PUSH
12757: EMPTY
12758: LIST
12759: LIST
12760: PUSH
12761: LD_INT 21
12763: PUSH
12764: LD_INT 1
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: PUSH
12771: LD_INT 3
12773: PUSH
12774: LD_INT 23
12776: PUSH
12777: LD_INT 0
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: PUSH
12784: EMPTY
12785: LIST
12786: LIST
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: LIST
12792: PPUSH
12793: CALL_OW 69
12797: PUSH
12798: FOR_IN
12799: IFFALSE 12853
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12801: LD_VAR 0 1
12805: PPUSH
12806: CALL_OW 257
12810: PUSH
12811: LD_INT 1
12813: PUSH
12814: LD_INT 2
12816: PUSH
12817: LD_INT 3
12819: PUSH
12820: LD_INT 4
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: IN
12829: IFFALSE 12851
// SetClass ( un , rand ( 1 , 4 ) ) ;
12831: LD_VAR 0 1
12835: PPUSH
12836: LD_INT 1
12838: PPUSH
12839: LD_INT 4
12841: PPUSH
12842: CALL_OW 12
12846: PPUSH
12847: CALL_OW 336
12851: GO 12798
12853: POP
12854: POP
// end ;
12855: PPOPN 1
12857: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12858: LD_EXP 24
12862: PUSH
12863: LD_EXP 36
12867: AND
12868: IFFALSE 12947
12870: GO 12872
12872: DISABLE
12873: LD_INT 0
12875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12876: LD_ADDR_VAR 0 1
12880: PUSH
12881: LD_INT 22
12883: PUSH
12884: LD_OWVAR 2
12888: PUSH
12889: EMPTY
12890: LIST
12891: LIST
12892: PUSH
12893: LD_INT 21
12895: PUSH
12896: LD_INT 3
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: PPUSH
12907: CALL_OW 69
12911: ST_TO_ADDR
// if not tmp then
12912: LD_VAR 0 1
12916: NOT
12917: IFFALSE 12921
// exit ;
12919: GO 12947
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12921: LD_VAR 0 1
12925: PUSH
12926: LD_INT 1
12928: PPUSH
12929: LD_VAR 0 1
12933: PPUSH
12934: CALL_OW 12
12938: ARRAY
12939: PPUSH
12940: LD_INT 100
12942: PPUSH
12943: CALL_OW 234
// end ;
12947: PPOPN 1
12949: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12950: LD_EXP 24
12954: PUSH
12955: LD_EXP 38
12959: AND
12960: IFFALSE 13058
12962: GO 12964
12964: DISABLE
12965: LD_INT 0
12967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12968: LD_ADDR_VAR 0 1
12972: PUSH
12973: LD_INT 22
12975: PUSH
12976: LD_OWVAR 2
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: PUSH
12985: LD_INT 21
12987: PUSH
12988: LD_INT 1
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: PPUSH
12999: CALL_OW 69
13003: ST_TO_ADDR
// if not tmp then
13004: LD_VAR 0 1
13008: NOT
13009: IFFALSE 13013
// exit ;
13011: GO 13058
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13013: LD_VAR 0 1
13017: PUSH
13018: LD_INT 1
13020: PPUSH
13021: LD_VAR 0 1
13025: PPUSH
13026: CALL_OW 12
13030: ARRAY
13031: PPUSH
13032: LD_INT 1
13034: PPUSH
13035: LD_INT 4
13037: PPUSH
13038: CALL_OW 12
13042: PPUSH
13043: LD_INT 3000
13045: PPUSH
13046: LD_INT 9000
13048: PPUSH
13049: CALL_OW 12
13053: PPUSH
13054: CALL_OW 492
// end ;
13058: PPOPN 1
13060: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13061: LD_EXP 24
13065: PUSH
13066: LD_EXP 39
13070: AND
13071: IFFALSE 13091
13073: GO 13075
13075: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13076: LD_INT 1
13078: PPUSH
13079: LD_OWVAR 2
13083: PPUSH
13084: LD_INT 0
13086: PPUSH
13087: CALL_OW 324
13091: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13092: LD_EXP 24
13096: PUSH
13097: LD_EXP 40
13101: AND
13102: IFFALSE 13185
13104: GO 13106
13106: DISABLE
13107: LD_INT 0
13109: PPUSH
13110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13111: LD_ADDR_VAR 0 2
13115: PUSH
13116: LD_INT 22
13118: PUSH
13119: LD_OWVAR 2
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: PUSH
13128: LD_INT 21
13130: PUSH
13131: LD_INT 3
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: PPUSH
13142: CALL_OW 69
13146: ST_TO_ADDR
// if not tmp then
13147: LD_VAR 0 2
13151: NOT
13152: IFFALSE 13156
// exit ;
13154: GO 13185
// for i in tmp do
13156: LD_ADDR_VAR 0 1
13160: PUSH
13161: LD_VAR 0 2
13165: PUSH
13166: FOR_IN
13167: IFFALSE 13183
// SetBLevel ( i , 10 ) ;
13169: LD_VAR 0 1
13173: PPUSH
13174: LD_INT 10
13176: PPUSH
13177: CALL_OW 241
13181: GO 13166
13183: POP
13184: POP
// end ;
13185: PPOPN 2
13187: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13188: LD_EXP 24
13192: PUSH
13193: LD_EXP 41
13197: AND
13198: IFFALSE 13309
13200: GO 13202
13202: DISABLE
13203: LD_INT 0
13205: PPUSH
13206: PPUSH
13207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13208: LD_ADDR_VAR 0 3
13212: PUSH
13213: LD_INT 22
13215: PUSH
13216: LD_OWVAR 2
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: PUSH
13225: LD_INT 25
13227: PUSH
13228: LD_INT 1
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: PUSH
13235: EMPTY
13236: LIST
13237: LIST
13238: PPUSH
13239: CALL_OW 69
13243: ST_TO_ADDR
// if not tmp then
13244: LD_VAR 0 3
13248: NOT
13249: IFFALSE 13253
// exit ;
13251: GO 13309
// un := tmp [ rand ( 1 , tmp ) ] ;
13253: LD_ADDR_VAR 0 2
13257: PUSH
13258: LD_VAR 0 3
13262: PUSH
13263: LD_INT 1
13265: PPUSH
13266: LD_VAR 0 3
13270: PPUSH
13271: CALL_OW 12
13275: ARRAY
13276: ST_TO_ADDR
// if Crawls ( un ) then
13277: LD_VAR 0 2
13281: PPUSH
13282: CALL_OW 318
13286: IFFALSE 13297
// ComWalk ( un ) ;
13288: LD_VAR 0 2
13292: PPUSH
13293: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13297: LD_VAR 0 2
13301: PPUSH
13302: LD_INT 5
13304: PPUSH
13305: CALL_OW 336
// end ;
13309: PPOPN 3
13311: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13312: LD_EXP 24
13316: PUSH
13317: LD_EXP 42
13321: AND
13322: PUSH
13323: LD_OWVAR 67
13327: PUSH
13328: LD_INT 4
13330: LESS
13331: AND
13332: IFFALSE 13351
13334: GO 13336
13336: DISABLE
// begin Difficulty := Difficulty + 1 ;
13337: LD_ADDR_OWVAR 67
13341: PUSH
13342: LD_OWVAR 67
13346: PUSH
13347: LD_INT 1
13349: PLUS
13350: ST_TO_ADDR
// end ;
13351: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13352: LD_EXP 24
13356: PUSH
13357: LD_EXP 43
13361: AND
13362: IFFALSE 13465
13364: GO 13366
13366: DISABLE
13367: LD_INT 0
13369: PPUSH
// begin for i := 1 to 5 do
13370: LD_ADDR_VAR 0 1
13374: PUSH
13375: DOUBLE
13376: LD_INT 1
13378: DEC
13379: ST_TO_ADDR
13380: LD_INT 5
13382: PUSH
13383: FOR_TO
13384: IFFALSE 13463
// begin uc_nation := nation_nature ;
13386: LD_ADDR_OWVAR 21
13390: PUSH
13391: LD_INT 0
13393: ST_TO_ADDR
// uc_side := 0 ;
13394: LD_ADDR_OWVAR 20
13398: PUSH
13399: LD_INT 0
13401: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13402: LD_ADDR_OWVAR 29
13406: PUSH
13407: LD_INT 12
13409: PUSH
13410: LD_INT 12
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: ST_TO_ADDR
// hc_agressivity := 20 ;
13417: LD_ADDR_OWVAR 35
13421: PUSH
13422: LD_INT 20
13424: ST_TO_ADDR
// hc_class := class_tiger ;
13425: LD_ADDR_OWVAR 28
13429: PUSH
13430: LD_INT 14
13432: ST_TO_ADDR
// hc_gallery :=  ;
13433: LD_ADDR_OWVAR 33
13437: PUSH
13438: LD_STRING 
13440: ST_TO_ADDR
// hc_name :=  ;
13441: LD_ADDR_OWVAR 26
13445: PUSH
13446: LD_STRING 
13448: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13449: CALL_OW 44
13453: PPUSH
13454: LD_INT 0
13456: PPUSH
13457: CALL_OW 51
// end ;
13461: GO 13383
13463: POP
13464: POP
// end ;
13465: PPOPN 1
13467: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13468: LD_EXP 24
13472: PUSH
13473: LD_EXP 44
13477: AND
13478: IFFALSE 13487
13480: GO 13482
13482: DISABLE
// StreamSibBomb ;
13483: CALL 13488 0 0
13487: END
// export function StreamSibBomb ; var i , x , y ; begin
13488: LD_INT 0
13490: PPUSH
13491: PPUSH
13492: PPUSH
13493: PPUSH
// result := false ;
13494: LD_ADDR_VAR 0 1
13498: PUSH
13499: LD_INT 0
13501: ST_TO_ADDR
// for i := 1 to 16 do
13502: LD_ADDR_VAR 0 2
13506: PUSH
13507: DOUBLE
13508: LD_INT 1
13510: DEC
13511: ST_TO_ADDR
13512: LD_INT 16
13514: PUSH
13515: FOR_TO
13516: IFFALSE 13715
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13518: LD_ADDR_VAR 0 3
13522: PUSH
13523: LD_INT 10
13525: PUSH
13526: LD_INT 20
13528: PUSH
13529: LD_INT 30
13531: PUSH
13532: LD_INT 40
13534: PUSH
13535: LD_INT 50
13537: PUSH
13538: LD_INT 60
13540: PUSH
13541: LD_INT 70
13543: PUSH
13544: LD_INT 80
13546: PUSH
13547: LD_INT 90
13549: PUSH
13550: LD_INT 100
13552: PUSH
13553: LD_INT 110
13555: PUSH
13556: LD_INT 120
13558: PUSH
13559: LD_INT 130
13561: PUSH
13562: LD_INT 140
13564: PUSH
13565: LD_INT 150
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: PUSH
13585: LD_INT 1
13587: PPUSH
13588: LD_INT 15
13590: PPUSH
13591: CALL_OW 12
13595: ARRAY
13596: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13597: LD_ADDR_VAR 0 4
13601: PUSH
13602: LD_INT 10
13604: PUSH
13605: LD_INT 20
13607: PUSH
13608: LD_INT 30
13610: PUSH
13611: LD_INT 40
13613: PUSH
13614: LD_INT 50
13616: PUSH
13617: LD_INT 60
13619: PUSH
13620: LD_INT 70
13622: PUSH
13623: LD_INT 80
13625: PUSH
13626: LD_INT 90
13628: PUSH
13629: LD_INT 100
13631: PUSH
13632: LD_INT 110
13634: PUSH
13635: LD_INT 120
13637: PUSH
13638: LD_INT 130
13640: PUSH
13641: LD_INT 140
13643: PUSH
13644: LD_INT 150
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: PUSH
13664: LD_INT 1
13666: PPUSH
13667: LD_INT 15
13669: PPUSH
13670: CALL_OW 12
13674: ARRAY
13675: ST_TO_ADDR
// if ValidHex ( x , y ) then
13676: LD_VAR 0 3
13680: PPUSH
13681: LD_VAR 0 4
13685: PPUSH
13686: CALL_OW 488
13690: IFFALSE 13713
// begin result := [ x , y ] ;
13692: LD_ADDR_VAR 0 1
13696: PUSH
13697: LD_VAR 0 3
13701: PUSH
13702: LD_VAR 0 4
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: ST_TO_ADDR
// break ;
13711: GO 13715
// end ; end ;
13713: GO 13515
13715: POP
13716: POP
// if result then
13717: LD_VAR 0 1
13721: IFFALSE 13781
// begin ToLua ( playSibBomb() ) ;
13723: LD_STRING playSibBomb()
13725: PPUSH
13726: CALL_OW 559
// wait ( 0 0$14 ) ;
13730: LD_INT 490
13732: PPUSH
13733: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13737: LD_VAR 0 1
13741: PUSH
13742: LD_INT 1
13744: ARRAY
13745: PPUSH
13746: LD_VAR 0 1
13750: PUSH
13751: LD_INT 2
13753: ARRAY
13754: PPUSH
13755: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13759: LD_VAR 0 1
13763: PUSH
13764: LD_INT 1
13766: ARRAY
13767: PPUSH
13768: LD_VAR 0 1
13772: PUSH
13773: LD_INT 2
13775: ARRAY
13776: PPUSH
13777: CALL_OW 429
// end ; end ;
13781: LD_VAR 0 1
13785: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13786: LD_EXP 24
13790: PUSH
13791: LD_EXP 46
13795: AND
13796: IFFALSE 13808
13798: GO 13800
13800: DISABLE
// YouLost (  ) ;
13801: LD_STRING 
13803: PPUSH
13804: CALL_OW 104
13808: END
// every 0 0$1 trigger StreamModeActive and sFog do
13809: LD_EXP 24
13813: PUSH
13814: LD_EXP 45
13818: AND
13819: IFFALSE 13833
13821: GO 13823
13823: DISABLE
// FogOff ( your_side ) ;
13824: LD_OWVAR 2
13828: PPUSH
13829: CALL_OW 344
13833: END
// every 0 0$1 trigger StreamModeActive and sSun do
13834: LD_EXP 24
13838: PUSH
13839: LD_EXP 47
13843: AND
13844: IFFALSE 13872
13846: GO 13848
13848: DISABLE
// begin solar_recharge_percent := 0 ;
13849: LD_ADDR_OWVAR 79
13853: PUSH
13854: LD_INT 0
13856: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13857: LD_INT 10500
13859: PPUSH
13860: CALL_OW 67
// solar_recharge_percent := 100 ;
13864: LD_ADDR_OWVAR 79
13868: PUSH
13869: LD_INT 100
13871: ST_TO_ADDR
// end ;
13872: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13873: LD_EXP 24
13877: PUSH
13878: LD_EXP 48
13882: AND
13883: IFFALSE 14122
13885: GO 13887
13887: DISABLE
13888: LD_INT 0
13890: PPUSH
13891: PPUSH
13892: PPUSH
// begin tmp := [ ] ;
13893: LD_ADDR_VAR 0 3
13897: PUSH
13898: EMPTY
13899: ST_TO_ADDR
// for i := 1 to 6 do
13900: LD_ADDR_VAR 0 1
13904: PUSH
13905: DOUBLE
13906: LD_INT 1
13908: DEC
13909: ST_TO_ADDR
13910: LD_INT 6
13912: PUSH
13913: FOR_TO
13914: IFFALSE 14019
// begin uc_nation := nation_nature ;
13916: LD_ADDR_OWVAR 21
13920: PUSH
13921: LD_INT 0
13923: ST_TO_ADDR
// uc_side := 0 ;
13924: LD_ADDR_OWVAR 20
13928: PUSH
13929: LD_INT 0
13931: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13932: LD_ADDR_OWVAR 29
13936: PUSH
13937: LD_INT 12
13939: PUSH
13940: LD_INT 12
13942: PUSH
13943: EMPTY
13944: LIST
13945: LIST
13946: ST_TO_ADDR
// hc_agressivity := 20 ;
13947: LD_ADDR_OWVAR 35
13951: PUSH
13952: LD_INT 20
13954: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13955: LD_ADDR_OWVAR 28
13959: PUSH
13960: LD_INT 17
13962: ST_TO_ADDR
// hc_gallery :=  ;
13963: LD_ADDR_OWVAR 33
13967: PUSH
13968: LD_STRING 
13970: ST_TO_ADDR
// hc_name :=  ;
13971: LD_ADDR_OWVAR 26
13975: PUSH
13976: LD_STRING 
13978: ST_TO_ADDR
// un := CreateHuman ;
13979: LD_ADDR_VAR 0 2
13983: PUSH
13984: CALL_OW 44
13988: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13989: LD_VAR 0 2
13993: PPUSH
13994: LD_INT 1
13996: PPUSH
13997: CALL_OW 51
// tmp := tmp ^ un ;
14001: LD_ADDR_VAR 0 3
14005: PUSH
14006: LD_VAR 0 3
14010: PUSH
14011: LD_VAR 0 2
14015: ADD
14016: ST_TO_ADDR
// end ;
14017: GO 13913
14019: POP
14020: POP
// repeat wait ( 0 0$1 ) ;
14021: LD_INT 35
14023: PPUSH
14024: CALL_OW 67
// for un in tmp do
14028: LD_ADDR_VAR 0 2
14032: PUSH
14033: LD_VAR 0 3
14037: PUSH
14038: FOR_IN
14039: IFFALSE 14113
// begin if IsDead ( un ) then
14041: LD_VAR 0 2
14045: PPUSH
14046: CALL_OW 301
14050: IFFALSE 14070
// begin tmp := tmp diff un ;
14052: LD_ADDR_VAR 0 3
14056: PUSH
14057: LD_VAR 0 3
14061: PUSH
14062: LD_VAR 0 2
14066: DIFF
14067: ST_TO_ADDR
// continue ;
14068: GO 14038
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14070: LD_VAR 0 2
14074: PPUSH
14075: LD_INT 3
14077: PUSH
14078: LD_INT 22
14080: PUSH
14081: LD_INT 0
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: PPUSH
14092: CALL_OW 69
14096: PPUSH
14097: LD_VAR 0 2
14101: PPUSH
14102: CALL_OW 74
14106: PPUSH
14107: CALL_OW 115
// end ;
14111: GO 14038
14113: POP
14114: POP
// until not tmp ;
14115: LD_VAR 0 3
14119: NOT
14120: IFFALSE 14021
// end ;
14122: PPOPN 3
14124: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14125: LD_EXP 24
14129: PUSH
14130: LD_EXP 49
14134: AND
14135: IFFALSE 14189
14137: GO 14139
14139: DISABLE
// begin ToLua ( displayTroll(); ) ;
14140: LD_STRING displayTroll();
14142: PPUSH
14143: CALL_OW 559
// wait ( 3 3$00 ) ;
14147: LD_INT 6300
14149: PPUSH
14150: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14154: LD_STRING hideTroll();
14156: PPUSH
14157: CALL_OW 559
// wait ( 1 1$00 ) ;
14161: LD_INT 2100
14163: PPUSH
14164: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14168: LD_STRING displayTroll();
14170: PPUSH
14171: CALL_OW 559
// wait ( 1 1$00 ) ;
14175: LD_INT 2100
14177: PPUSH
14178: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14182: LD_STRING hideTroll();
14184: PPUSH
14185: CALL_OW 559
// end ;
14189: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14190: LD_EXP 24
14194: PUSH
14195: LD_EXP 50
14199: AND
14200: IFFALSE 14263
14202: GO 14204
14204: DISABLE
14205: LD_INT 0
14207: PPUSH
// begin p := 0 ;
14208: LD_ADDR_VAR 0 1
14212: PUSH
14213: LD_INT 0
14215: ST_TO_ADDR
// repeat game_speed := 1 ;
14216: LD_ADDR_OWVAR 65
14220: PUSH
14221: LD_INT 1
14223: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14224: LD_INT 35
14226: PPUSH
14227: CALL_OW 67
// p := p + 1 ;
14231: LD_ADDR_VAR 0 1
14235: PUSH
14236: LD_VAR 0 1
14240: PUSH
14241: LD_INT 1
14243: PLUS
14244: ST_TO_ADDR
// until p >= 60 ;
14245: LD_VAR 0 1
14249: PUSH
14250: LD_INT 60
14252: GREATEREQUAL
14253: IFFALSE 14216
// game_speed := 4 ;
14255: LD_ADDR_OWVAR 65
14259: PUSH
14260: LD_INT 4
14262: ST_TO_ADDR
// end ;
14263: PPOPN 1
14265: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14266: LD_EXP 24
14270: PUSH
14271: LD_EXP 51
14275: AND
14276: IFFALSE 14422
14278: GO 14280
14280: DISABLE
14281: LD_INT 0
14283: PPUSH
14284: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14285: LD_ADDR_VAR 0 1
14289: PUSH
14290: LD_INT 22
14292: PUSH
14293: LD_OWVAR 2
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PUSH
14302: LD_INT 2
14304: PUSH
14305: LD_INT 30
14307: PUSH
14308: LD_INT 0
14310: PUSH
14311: EMPTY
14312: LIST
14313: LIST
14314: PUSH
14315: LD_INT 30
14317: PUSH
14318: LD_INT 1
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: LIST
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: PPUSH
14334: CALL_OW 69
14338: ST_TO_ADDR
// if not depot then
14339: LD_VAR 0 1
14343: NOT
14344: IFFALSE 14348
// exit ;
14346: GO 14422
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14348: LD_ADDR_VAR 0 2
14352: PUSH
14353: LD_VAR 0 1
14357: PUSH
14358: LD_INT 1
14360: PPUSH
14361: LD_VAR 0 1
14365: PPUSH
14366: CALL_OW 12
14370: ARRAY
14371: PPUSH
14372: CALL_OW 274
14376: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14377: LD_VAR 0 2
14381: PPUSH
14382: LD_INT 1
14384: PPUSH
14385: LD_INT 0
14387: PPUSH
14388: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14392: LD_VAR 0 2
14396: PPUSH
14397: LD_INT 2
14399: PPUSH
14400: LD_INT 0
14402: PPUSH
14403: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14407: LD_VAR 0 2
14411: PPUSH
14412: LD_INT 3
14414: PPUSH
14415: LD_INT 0
14417: PPUSH
14418: CALL_OW 277
// end ;
14422: PPOPN 2
14424: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14425: LD_EXP 24
14429: PUSH
14430: LD_EXP 52
14434: AND
14435: IFFALSE 14532
14437: GO 14439
14439: DISABLE
14440: LD_INT 0
14442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14443: LD_ADDR_VAR 0 1
14447: PUSH
14448: LD_INT 22
14450: PUSH
14451: LD_OWVAR 2
14455: PUSH
14456: EMPTY
14457: LIST
14458: LIST
14459: PUSH
14460: LD_INT 21
14462: PUSH
14463: LD_INT 1
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: PUSH
14470: LD_INT 3
14472: PUSH
14473: LD_INT 23
14475: PUSH
14476: LD_INT 0
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: PUSH
14483: EMPTY
14484: LIST
14485: LIST
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: LIST
14491: PPUSH
14492: CALL_OW 69
14496: ST_TO_ADDR
// if not tmp then
14497: LD_VAR 0 1
14501: NOT
14502: IFFALSE 14506
// exit ;
14504: GO 14532
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14506: LD_VAR 0 1
14510: PUSH
14511: LD_INT 1
14513: PPUSH
14514: LD_VAR 0 1
14518: PPUSH
14519: CALL_OW 12
14523: ARRAY
14524: PPUSH
14525: LD_INT 200
14527: PPUSH
14528: CALL_OW 234
// end ;
14532: PPOPN 1
14534: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14535: LD_EXP 24
14539: PUSH
14540: LD_EXP 53
14544: AND
14545: IFFALSE 14624
14547: GO 14549
14549: DISABLE
14550: LD_INT 0
14552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14553: LD_ADDR_VAR 0 1
14557: PUSH
14558: LD_INT 22
14560: PUSH
14561: LD_OWVAR 2
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: PUSH
14570: LD_INT 21
14572: PUSH
14573: LD_INT 2
14575: PUSH
14576: EMPTY
14577: LIST
14578: LIST
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: PPUSH
14584: CALL_OW 69
14588: ST_TO_ADDR
// if not tmp then
14589: LD_VAR 0 1
14593: NOT
14594: IFFALSE 14598
// exit ;
14596: GO 14624
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14598: LD_VAR 0 1
14602: PUSH
14603: LD_INT 1
14605: PPUSH
14606: LD_VAR 0 1
14610: PPUSH
14611: CALL_OW 12
14615: ARRAY
14616: PPUSH
14617: LD_INT 60
14619: PPUSH
14620: CALL_OW 234
// end ;
14624: PPOPN 1
14626: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14627: LD_EXP 24
14631: PUSH
14632: LD_EXP 54
14636: AND
14637: IFFALSE 14736
14639: GO 14641
14641: DISABLE
14642: LD_INT 0
14644: PPUSH
14645: PPUSH
// begin enable ;
14646: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14647: LD_ADDR_VAR 0 1
14651: PUSH
14652: LD_INT 22
14654: PUSH
14655: LD_OWVAR 2
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: PUSH
14664: LD_INT 61
14666: PUSH
14667: EMPTY
14668: LIST
14669: PUSH
14670: LD_INT 33
14672: PUSH
14673: LD_INT 2
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: LIST
14684: PPUSH
14685: CALL_OW 69
14689: ST_TO_ADDR
// if not tmp then
14690: LD_VAR 0 1
14694: NOT
14695: IFFALSE 14699
// exit ;
14697: GO 14736
// for i in tmp do
14699: LD_ADDR_VAR 0 2
14703: PUSH
14704: LD_VAR 0 1
14708: PUSH
14709: FOR_IN
14710: IFFALSE 14734
// if IsControledBy ( i ) then
14712: LD_VAR 0 2
14716: PPUSH
14717: CALL_OW 312
14721: IFFALSE 14732
// ComUnlink ( i ) ;
14723: LD_VAR 0 2
14727: PPUSH
14728: CALL_OW 136
14732: GO 14709
14734: POP
14735: POP
// end ;
14736: PPOPN 2
14738: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14739: LD_EXP 24
14743: PUSH
14744: LD_EXP 55
14748: AND
14749: IFFALSE 14889
14751: GO 14753
14753: DISABLE
14754: LD_INT 0
14756: PPUSH
14757: PPUSH
// begin ToLua ( displayPowell(); ) ;
14758: LD_STRING displayPowell();
14760: PPUSH
14761: CALL_OW 559
// uc_side := 0 ;
14765: LD_ADDR_OWVAR 20
14769: PUSH
14770: LD_INT 0
14772: ST_TO_ADDR
// uc_nation := 2 ;
14773: LD_ADDR_OWVAR 21
14777: PUSH
14778: LD_INT 2
14780: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14781: LD_ADDR_OWVAR 37
14785: PUSH
14786: LD_INT 14
14788: ST_TO_ADDR
// vc_engine := engine_siberite ;
14789: LD_ADDR_OWVAR 39
14793: PUSH
14794: LD_INT 3
14796: ST_TO_ADDR
// vc_control := control_apeman ;
14797: LD_ADDR_OWVAR 38
14801: PUSH
14802: LD_INT 5
14804: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14805: LD_ADDR_OWVAR 40
14809: PUSH
14810: LD_INT 29
14812: ST_TO_ADDR
// un := CreateVehicle ;
14813: LD_ADDR_VAR 0 2
14817: PUSH
14818: CALL_OW 45
14822: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14823: LD_VAR 0 2
14827: PPUSH
14828: LD_INT 1
14830: PPUSH
14831: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14835: LD_INT 35
14837: PPUSH
14838: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14842: LD_VAR 0 2
14846: PPUSH
14847: LD_INT 22
14849: PUSH
14850: LD_OWVAR 2
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PPUSH
14859: CALL_OW 69
14863: PPUSH
14864: LD_VAR 0 2
14868: PPUSH
14869: CALL_OW 74
14873: PPUSH
14874: CALL_OW 115
// until IsDead ( un ) ;
14878: LD_VAR 0 2
14882: PPUSH
14883: CALL_OW 301
14887: IFFALSE 14835
// end ;
14889: PPOPN 2
14891: END
// every 0 0$1 trigger StreamModeActive and sStu do
14892: LD_EXP 24
14896: PUSH
14897: LD_EXP 63
14901: AND
14902: IFFALSE 14918
14904: GO 14906
14906: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14907: LD_STRING displayStucuk();
14909: PPUSH
14910: CALL_OW 559
// ResetFog ;
14914: CALL_OW 335
// end ;
14918: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14919: LD_EXP 24
14923: PUSH
14924: LD_EXP 56
14928: AND
14929: IFFALSE 15070
14931: GO 14933
14933: DISABLE
14934: LD_INT 0
14936: PPUSH
14937: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14938: LD_ADDR_VAR 0 2
14942: PUSH
14943: LD_INT 22
14945: PUSH
14946: LD_OWVAR 2
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PUSH
14955: LD_INT 21
14957: PUSH
14958: LD_INT 1
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PUSH
14965: EMPTY
14966: LIST
14967: LIST
14968: PPUSH
14969: CALL_OW 69
14973: ST_TO_ADDR
// if not tmp then
14974: LD_VAR 0 2
14978: NOT
14979: IFFALSE 14983
// exit ;
14981: GO 15070
// un := tmp [ rand ( 1 , tmp ) ] ;
14983: LD_ADDR_VAR 0 1
14987: PUSH
14988: LD_VAR 0 2
14992: PUSH
14993: LD_INT 1
14995: PPUSH
14996: LD_VAR 0 2
15000: PPUSH
15001: CALL_OW 12
15005: ARRAY
15006: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15007: LD_VAR 0 1
15011: PPUSH
15012: LD_INT 0
15014: PPUSH
15015: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15019: LD_VAR 0 1
15023: PPUSH
15024: LD_OWVAR 3
15028: PUSH
15029: LD_VAR 0 1
15033: DIFF
15034: PPUSH
15035: LD_VAR 0 1
15039: PPUSH
15040: CALL_OW 74
15044: PPUSH
15045: CALL_OW 115
// wait ( 0 0$20 ) ;
15049: LD_INT 700
15051: PPUSH
15052: CALL_OW 67
// SetSide ( un , your_side ) ;
15056: LD_VAR 0 1
15060: PPUSH
15061: LD_OWVAR 2
15065: PPUSH
15066: CALL_OW 235
// end ;
15070: PPOPN 2
15072: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15073: LD_EXP 24
15077: PUSH
15078: LD_EXP 57
15082: AND
15083: IFFALSE 15189
15085: GO 15087
15087: DISABLE
15088: LD_INT 0
15090: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15091: LD_ADDR_VAR 0 1
15095: PUSH
15096: LD_INT 22
15098: PUSH
15099: LD_OWVAR 2
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: PUSH
15108: LD_INT 2
15110: PUSH
15111: LD_INT 30
15113: PUSH
15114: LD_INT 0
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: PUSH
15121: LD_INT 30
15123: PUSH
15124: LD_INT 1
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: LIST
15135: PUSH
15136: EMPTY
15137: LIST
15138: LIST
15139: PPUSH
15140: CALL_OW 69
15144: ST_TO_ADDR
// if not depot then
15145: LD_VAR 0 1
15149: NOT
15150: IFFALSE 15154
// exit ;
15152: GO 15189
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15154: LD_VAR 0 1
15158: PUSH
15159: LD_INT 1
15161: ARRAY
15162: PPUSH
15163: CALL_OW 250
15167: PPUSH
15168: LD_VAR 0 1
15172: PUSH
15173: LD_INT 1
15175: ARRAY
15176: PPUSH
15177: CALL_OW 251
15181: PPUSH
15182: LD_INT 70
15184: PPUSH
15185: CALL_OW 495
// end ;
15189: PPOPN 1
15191: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15192: LD_EXP 24
15196: PUSH
15197: LD_EXP 58
15201: AND
15202: IFFALSE 15413
15204: GO 15206
15206: DISABLE
15207: LD_INT 0
15209: PPUSH
15210: PPUSH
15211: PPUSH
15212: PPUSH
15213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15214: LD_ADDR_VAR 0 5
15218: PUSH
15219: LD_INT 22
15221: PUSH
15222: LD_OWVAR 2
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: PUSH
15231: LD_INT 21
15233: PUSH
15234: LD_INT 1
15236: PUSH
15237: EMPTY
15238: LIST
15239: LIST
15240: PUSH
15241: EMPTY
15242: LIST
15243: LIST
15244: PPUSH
15245: CALL_OW 69
15249: ST_TO_ADDR
// if not tmp then
15250: LD_VAR 0 5
15254: NOT
15255: IFFALSE 15259
// exit ;
15257: GO 15413
// for i in tmp do
15259: LD_ADDR_VAR 0 1
15263: PUSH
15264: LD_VAR 0 5
15268: PUSH
15269: FOR_IN
15270: IFFALSE 15411
// begin d := rand ( 0 , 5 ) ;
15272: LD_ADDR_VAR 0 4
15276: PUSH
15277: LD_INT 0
15279: PPUSH
15280: LD_INT 5
15282: PPUSH
15283: CALL_OW 12
15287: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15288: LD_ADDR_VAR 0 2
15292: PUSH
15293: LD_VAR 0 1
15297: PPUSH
15298: CALL_OW 250
15302: PPUSH
15303: LD_VAR 0 4
15307: PPUSH
15308: LD_INT 3
15310: PPUSH
15311: LD_INT 12
15313: PPUSH
15314: CALL_OW 12
15318: PPUSH
15319: CALL_OW 272
15323: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15324: LD_ADDR_VAR 0 3
15328: PUSH
15329: LD_VAR 0 1
15333: PPUSH
15334: CALL_OW 251
15338: PPUSH
15339: LD_VAR 0 4
15343: PPUSH
15344: LD_INT 3
15346: PPUSH
15347: LD_INT 12
15349: PPUSH
15350: CALL_OW 12
15354: PPUSH
15355: CALL_OW 273
15359: ST_TO_ADDR
// if ValidHex ( x , y ) then
15360: LD_VAR 0 2
15364: PPUSH
15365: LD_VAR 0 3
15369: PPUSH
15370: CALL_OW 488
15374: IFFALSE 15409
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15376: LD_VAR 0 1
15380: PPUSH
15381: LD_VAR 0 2
15385: PPUSH
15386: LD_VAR 0 3
15390: PPUSH
15391: LD_INT 3
15393: PPUSH
15394: LD_INT 6
15396: PPUSH
15397: CALL_OW 12
15401: PPUSH
15402: LD_INT 1
15404: PPUSH
15405: CALL_OW 483
// end ;
15409: GO 15269
15411: POP
15412: POP
// end ;
15413: PPOPN 5
15415: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15416: LD_EXP 24
15420: PUSH
15421: LD_EXP 59
15425: AND
15426: IFFALSE 15520
15428: GO 15430
15430: DISABLE
15431: LD_INT 0
15433: PPUSH
15434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15435: LD_ADDR_VAR 0 2
15439: PUSH
15440: LD_INT 22
15442: PUSH
15443: LD_OWVAR 2
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: PUSH
15452: LD_INT 32
15454: PUSH
15455: LD_INT 1
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PUSH
15462: LD_INT 21
15464: PUSH
15465: LD_INT 2
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: LIST
15476: PPUSH
15477: CALL_OW 69
15481: ST_TO_ADDR
// if not tmp then
15482: LD_VAR 0 2
15486: NOT
15487: IFFALSE 15491
// exit ;
15489: GO 15520
// for i in tmp do
15491: LD_ADDR_VAR 0 1
15495: PUSH
15496: LD_VAR 0 2
15500: PUSH
15501: FOR_IN
15502: IFFALSE 15518
// SetFuel ( i , 0 ) ;
15504: LD_VAR 0 1
15508: PPUSH
15509: LD_INT 0
15511: PPUSH
15512: CALL_OW 240
15516: GO 15501
15518: POP
15519: POP
// end ;
15520: PPOPN 2
15522: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15523: LD_EXP 24
15527: PUSH
15528: LD_EXP 60
15532: AND
15533: IFFALSE 15599
15535: GO 15537
15537: DISABLE
15538: LD_INT 0
15540: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15541: LD_ADDR_VAR 0 1
15545: PUSH
15546: LD_INT 22
15548: PUSH
15549: LD_OWVAR 2
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: PUSH
15558: LD_INT 30
15560: PUSH
15561: LD_INT 29
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: PPUSH
15572: CALL_OW 69
15576: ST_TO_ADDR
// if not tmp then
15577: LD_VAR 0 1
15581: NOT
15582: IFFALSE 15586
// exit ;
15584: GO 15599
// DestroyUnit ( tmp [ 1 ] ) ;
15586: LD_VAR 0 1
15590: PUSH
15591: LD_INT 1
15593: ARRAY
15594: PPUSH
15595: CALL_OW 65
// end ;
15599: PPOPN 1
15601: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15602: LD_EXP 24
15606: PUSH
15607: LD_EXP 62
15611: AND
15612: IFFALSE 15741
15614: GO 15616
15616: DISABLE
15617: LD_INT 0
15619: PPUSH
// begin uc_side := 0 ;
15620: LD_ADDR_OWVAR 20
15624: PUSH
15625: LD_INT 0
15627: ST_TO_ADDR
// uc_nation := nation_arabian ;
15628: LD_ADDR_OWVAR 21
15632: PUSH
15633: LD_INT 2
15635: ST_TO_ADDR
// hc_gallery :=  ;
15636: LD_ADDR_OWVAR 33
15640: PUSH
15641: LD_STRING 
15643: ST_TO_ADDR
// hc_name :=  ;
15644: LD_ADDR_OWVAR 26
15648: PUSH
15649: LD_STRING 
15651: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15652: LD_INT 1
15654: PPUSH
15655: LD_INT 11
15657: PPUSH
15658: LD_INT 10
15660: PPUSH
15661: CALL_OW 380
// un := CreateHuman ;
15665: LD_ADDR_VAR 0 1
15669: PUSH
15670: CALL_OW 44
15674: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15675: LD_VAR 0 1
15679: PPUSH
15680: LD_INT 1
15682: PPUSH
15683: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15687: LD_INT 35
15689: PPUSH
15690: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15694: LD_VAR 0 1
15698: PPUSH
15699: LD_INT 22
15701: PUSH
15702: LD_OWVAR 2
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PPUSH
15711: CALL_OW 69
15715: PPUSH
15716: LD_VAR 0 1
15720: PPUSH
15721: CALL_OW 74
15725: PPUSH
15726: CALL_OW 115
// until IsDead ( un ) ;
15730: LD_VAR 0 1
15734: PPUSH
15735: CALL_OW 301
15739: IFFALSE 15687
// end ;
15741: PPOPN 1
15743: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15744: LD_EXP 24
15748: PUSH
15749: LD_EXP 64
15753: AND
15754: IFFALSE 15766
15756: GO 15758
15758: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15759: LD_STRING earthquake(getX(game), 0, 32)
15761: PPUSH
15762: CALL_OW 559
15766: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15767: LD_EXP 24
15771: PUSH
15772: LD_EXP 65
15776: AND
15777: IFFALSE 15868
15779: GO 15781
15781: DISABLE
15782: LD_INT 0
15784: PPUSH
// begin enable ;
15785: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15786: LD_ADDR_VAR 0 1
15790: PUSH
15791: LD_INT 22
15793: PUSH
15794: LD_OWVAR 2
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: PUSH
15803: LD_INT 21
15805: PUSH
15806: LD_INT 2
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: PUSH
15813: LD_INT 33
15815: PUSH
15816: LD_INT 3
15818: PUSH
15819: EMPTY
15820: LIST
15821: LIST
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: LIST
15827: PPUSH
15828: CALL_OW 69
15832: ST_TO_ADDR
// if not tmp then
15833: LD_VAR 0 1
15837: NOT
15838: IFFALSE 15842
// exit ;
15840: GO 15868
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15842: LD_VAR 0 1
15846: PUSH
15847: LD_INT 1
15849: PPUSH
15850: LD_VAR 0 1
15854: PPUSH
15855: CALL_OW 12
15859: ARRAY
15860: PPUSH
15861: LD_INT 1
15863: PPUSH
15864: CALL_OW 234
// end ;
15868: PPOPN 1
15870: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15871: LD_EXP 24
15875: PUSH
15876: LD_EXP 66
15880: AND
15881: IFFALSE 16022
15883: GO 15885
15885: DISABLE
15886: LD_INT 0
15888: PPUSH
15889: PPUSH
15890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15891: LD_ADDR_VAR 0 3
15895: PUSH
15896: LD_INT 22
15898: PUSH
15899: LD_OWVAR 2
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PUSH
15908: LD_INT 25
15910: PUSH
15911: LD_INT 1
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: PPUSH
15922: CALL_OW 69
15926: ST_TO_ADDR
// if not tmp then
15927: LD_VAR 0 3
15931: NOT
15932: IFFALSE 15936
// exit ;
15934: GO 16022
// un := tmp [ rand ( 1 , tmp ) ] ;
15936: LD_ADDR_VAR 0 2
15940: PUSH
15941: LD_VAR 0 3
15945: PUSH
15946: LD_INT 1
15948: PPUSH
15949: LD_VAR 0 3
15953: PPUSH
15954: CALL_OW 12
15958: ARRAY
15959: ST_TO_ADDR
// if Crawls ( un ) then
15960: LD_VAR 0 2
15964: PPUSH
15965: CALL_OW 318
15969: IFFALSE 15980
// ComWalk ( un ) ;
15971: LD_VAR 0 2
15975: PPUSH
15976: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15980: LD_VAR 0 2
15984: PPUSH
15985: LD_INT 9
15987: PPUSH
15988: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15992: LD_INT 28
15994: PPUSH
15995: LD_OWVAR 2
15999: PPUSH
16000: LD_INT 2
16002: PPUSH
16003: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16007: LD_INT 29
16009: PPUSH
16010: LD_OWVAR 2
16014: PPUSH
16015: LD_INT 2
16017: PPUSH
16018: CALL_OW 322
// end ;
16022: PPOPN 3
16024: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16025: LD_EXP 24
16029: PUSH
16030: LD_EXP 67
16034: AND
16035: IFFALSE 16146
16037: GO 16039
16039: DISABLE
16040: LD_INT 0
16042: PPUSH
16043: PPUSH
16044: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16045: LD_ADDR_VAR 0 3
16049: PUSH
16050: LD_INT 22
16052: PUSH
16053: LD_OWVAR 2
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: PUSH
16062: LD_INT 25
16064: PUSH
16065: LD_INT 1
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PPUSH
16076: CALL_OW 69
16080: ST_TO_ADDR
// if not tmp then
16081: LD_VAR 0 3
16085: NOT
16086: IFFALSE 16090
// exit ;
16088: GO 16146
// un := tmp [ rand ( 1 , tmp ) ] ;
16090: LD_ADDR_VAR 0 2
16094: PUSH
16095: LD_VAR 0 3
16099: PUSH
16100: LD_INT 1
16102: PPUSH
16103: LD_VAR 0 3
16107: PPUSH
16108: CALL_OW 12
16112: ARRAY
16113: ST_TO_ADDR
// if Crawls ( un ) then
16114: LD_VAR 0 2
16118: PPUSH
16119: CALL_OW 318
16123: IFFALSE 16134
// ComWalk ( un ) ;
16125: LD_VAR 0 2
16129: PPUSH
16130: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16134: LD_VAR 0 2
16138: PPUSH
16139: LD_INT 8
16141: PPUSH
16142: CALL_OW 336
// end ;
16146: PPOPN 3
16148: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16149: LD_EXP 24
16153: PUSH
16154: LD_EXP 68
16158: AND
16159: IFFALSE 16303
16161: GO 16163
16163: DISABLE
16164: LD_INT 0
16166: PPUSH
16167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16168: LD_ADDR_VAR 0 2
16172: PUSH
16173: LD_INT 22
16175: PUSH
16176: LD_OWVAR 2
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: LD_INT 21
16187: PUSH
16188: LD_INT 2
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PUSH
16195: LD_INT 2
16197: PUSH
16198: LD_INT 34
16200: PUSH
16201: LD_INT 12
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PUSH
16208: LD_INT 34
16210: PUSH
16211: LD_INT 51
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: LD_INT 34
16220: PUSH
16221: LD_INT 32
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: LIST
16238: PPUSH
16239: CALL_OW 69
16243: ST_TO_ADDR
// if not tmp then
16244: LD_VAR 0 2
16248: NOT
16249: IFFALSE 16253
// exit ;
16251: GO 16303
// for i in tmp do
16253: LD_ADDR_VAR 0 1
16257: PUSH
16258: LD_VAR 0 2
16262: PUSH
16263: FOR_IN
16264: IFFALSE 16301
// if GetCargo ( i , mat_artifact ) = 0 then
16266: LD_VAR 0 1
16270: PPUSH
16271: LD_INT 4
16273: PPUSH
16274: CALL_OW 289
16278: PUSH
16279: LD_INT 0
16281: EQUAL
16282: IFFALSE 16299
// SetCargo ( i , mat_siberit , 100 ) ;
16284: LD_VAR 0 1
16288: PPUSH
16289: LD_INT 3
16291: PPUSH
16292: LD_INT 100
16294: PPUSH
16295: CALL_OW 290
16299: GO 16263
16301: POP
16302: POP
// end ;
16303: PPOPN 2
16305: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16306: LD_EXP 24
16310: PUSH
16311: LD_EXP 69
16315: AND
16316: IFFALSE 16499
16318: GO 16320
16320: DISABLE
16321: LD_INT 0
16323: PPUSH
16324: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16325: LD_ADDR_VAR 0 2
16329: PUSH
16330: LD_INT 22
16332: PUSH
16333: LD_OWVAR 2
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: PPUSH
16342: CALL_OW 69
16346: ST_TO_ADDR
// if not tmp then
16347: LD_VAR 0 2
16351: NOT
16352: IFFALSE 16356
// exit ;
16354: GO 16499
// for i := 1 to 2 do
16356: LD_ADDR_VAR 0 1
16360: PUSH
16361: DOUBLE
16362: LD_INT 1
16364: DEC
16365: ST_TO_ADDR
16366: LD_INT 2
16368: PUSH
16369: FOR_TO
16370: IFFALSE 16497
// begin uc_side := your_side ;
16372: LD_ADDR_OWVAR 20
16376: PUSH
16377: LD_OWVAR 2
16381: ST_TO_ADDR
// uc_nation := nation_american ;
16382: LD_ADDR_OWVAR 21
16386: PUSH
16387: LD_INT 1
16389: ST_TO_ADDR
// vc_chassis := us_morphling ;
16390: LD_ADDR_OWVAR 37
16394: PUSH
16395: LD_INT 5
16397: ST_TO_ADDR
// vc_engine := engine_siberite ;
16398: LD_ADDR_OWVAR 39
16402: PUSH
16403: LD_INT 3
16405: ST_TO_ADDR
// vc_control := control_computer ;
16406: LD_ADDR_OWVAR 38
16410: PUSH
16411: LD_INT 3
16413: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16414: LD_ADDR_OWVAR 40
16418: PUSH
16419: LD_INT 10
16421: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16422: LD_VAR 0 2
16426: PUSH
16427: LD_INT 1
16429: ARRAY
16430: PPUSH
16431: CALL_OW 310
16435: NOT
16436: IFFALSE 16483
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16438: CALL_OW 45
16442: PPUSH
16443: LD_VAR 0 2
16447: PUSH
16448: LD_INT 1
16450: ARRAY
16451: PPUSH
16452: CALL_OW 250
16456: PPUSH
16457: LD_VAR 0 2
16461: PUSH
16462: LD_INT 1
16464: ARRAY
16465: PPUSH
16466: CALL_OW 251
16470: PPUSH
16471: LD_INT 12
16473: PPUSH
16474: LD_INT 1
16476: PPUSH
16477: CALL_OW 50
16481: GO 16495
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16483: CALL_OW 45
16487: PPUSH
16488: LD_INT 1
16490: PPUSH
16491: CALL_OW 51
// end ;
16495: GO 16369
16497: POP
16498: POP
// end ;
16499: PPOPN 2
16501: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16502: LD_EXP 24
16506: PUSH
16507: LD_EXP 70
16511: AND
16512: IFFALSE 16734
16514: GO 16516
16516: DISABLE
16517: LD_INT 0
16519: PPUSH
16520: PPUSH
16521: PPUSH
16522: PPUSH
16523: PPUSH
16524: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16525: LD_ADDR_VAR 0 6
16529: PUSH
16530: LD_INT 22
16532: PUSH
16533: LD_OWVAR 2
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: LD_INT 21
16544: PUSH
16545: LD_INT 1
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: PUSH
16552: LD_INT 3
16554: PUSH
16555: LD_INT 23
16557: PUSH
16558: LD_INT 0
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: LIST
16573: PPUSH
16574: CALL_OW 69
16578: ST_TO_ADDR
// if not tmp then
16579: LD_VAR 0 6
16583: NOT
16584: IFFALSE 16588
// exit ;
16586: GO 16734
// s1 := rand ( 1 , 4 ) ;
16588: LD_ADDR_VAR 0 2
16592: PUSH
16593: LD_INT 1
16595: PPUSH
16596: LD_INT 4
16598: PPUSH
16599: CALL_OW 12
16603: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16604: LD_ADDR_VAR 0 4
16608: PUSH
16609: LD_VAR 0 6
16613: PUSH
16614: LD_INT 1
16616: ARRAY
16617: PPUSH
16618: LD_VAR 0 2
16622: PPUSH
16623: CALL_OW 259
16627: ST_TO_ADDR
// if s1 = 1 then
16628: LD_VAR 0 2
16632: PUSH
16633: LD_INT 1
16635: EQUAL
16636: IFFALSE 16656
// s2 := rand ( 2 , 4 ) else
16638: LD_ADDR_VAR 0 3
16642: PUSH
16643: LD_INT 2
16645: PPUSH
16646: LD_INT 4
16648: PPUSH
16649: CALL_OW 12
16653: ST_TO_ADDR
16654: GO 16664
// s2 := 1 ;
16656: LD_ADDR_VAR 0 3
16660: PUSH
16661: LD_INT 1
16663: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16664: LD_ADDR_VAR 0 5
16668: PUSH
16669: LD_VAR 0 6
16673: PUSH
16674: LD_INT 1
16676: ARRAY
16677: PPUSH
16678: LD_VAR 0 3
16682: PPUSH
16683: CALL_OW 259
16687: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16688: LD_VAR 0 6
16692: PUSH
16693: LD_INT 1
16695: ARRAY
16696: PPUSH
16697: LD_VAR 0 2
16701: PPUSH
16702: LD_VAR 0 5
16706: PPUSH
16707: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16711: LD_VAR 0 6
16715: PUSH
16716: LD_INT 1
16718: ARRAY
16719: PPUSH
16720: LD_VAR 0 3
16724: PPUSH
16725: LD_VAR 0 4
16729: PPUSH
16730: CALL_OW 237
// end ;
16734: PPOPN 6
16736: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16737: LD_EXP 24
16741: PUSH
16742: LD_EXP 71
16746: AND
16747: IFFALSE 16826
16749: GO 16751
16751: DISABLE
16752: LD_INT 0
16754: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16755: LD_ADDR_VAR 0 1
16759: PUSH
16760: LD_INT 22
16762: PUSH
16763: LD_OWVAR 2
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: PUSH
16772: LD_INT 30
16774: PUSH
16775: LD_INT 3
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PPUSH
16786: CALL_OW 69
16790: ST_TO_ADDR
// if not tmp then
16791: LD_VAR 0 1
16795: NOT
16796: IFFALSE 16800
// exit ;
16798: GO 16826
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16800: LD_VAR 0 1
16804: PUSH
16805: LD_INT 1
16807: PPUSH
16808: LD_VAR 0 1
16812: PPUSH
16813: CALL_OW 12
16817: ARRAY
16818: PPUSH
16819: LD_INT 1
16821: PPUSH
16822: CALL_OW 234
// end ;
16826: PPOPN 1
16828: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16829: LD_EXP 24
16833: PUSH
16834: LD_EXP 72
16838: AND
16839: IFFALSE 16951
16841: GO 16843
16843: DISABLE
16844: LD_INT 0
16846: PPUSH
16847: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16848: LD_ADDR_VAR 0 2
16852: PUSH
16853: LD_INT 22
16855: PUSH
16856: LD_OWVAR 2
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: PUSH
16865: LD_INT 2
16867: PUSH
16868: LD_INT 30
16870: PUSH
16871: LD_INT 27
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: PUSH
16878: LD_INT 30
16880: PUSH
16881: LD_INT 26
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: PUSH
16888: LD_INT 30
16890: PUSH
16891: LD_INT 28
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PPUSH
16908: CALL_OW 69
16912: ST_TO_ADDR
// if not tmp then
16913: LD_VAR 0 2
16917: NOT
16918: IFFALSE 16922
// exit ;
16920: GO 16951
// for i in tmp do
16922: LD_ADDR_VAR 0 1
16926: PUSH
16927: LD_VAR 0 2
16931: PUSH
16932: FOR_IN
16933: IFFALSE 16949
// SetLives ( i , 1 ) ;
16935: LD_VAR 0 1
16939: PPUSH
16940: LD_INT 1
16942: PPUSH
16943: CALL_OW 234
16947: GO 16932
16949: POP
16950: POP
// end ;
16951: PPOPN 2
16953: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16954: LD_EXP 24
16958: PUSH
16959: LD_EXP 73
16963: AND
16964: IFFALSE 17251
16966: GO 16968
16968: DISABLE
16969: LD_INT 0
16971: PPUSH
16972: PPUSH
16973: PPUSH
// begin i := rand ( 1 , 7 ) ;
16974: LD_ADDR_VAR 0 1
16978: PUSH
16979: LD_INT 1
16981: PPUSH
16982: LD_INT 7
16984: PPUSH
16985: CALL_OW 12
16989: ST_TO_ADDR
// case i of 1 :
16990: LD_VAR 0 1
16994: PUSH
16995: LD_INT 1
16997: DOUBLE
16998: EQUAL
16999: IFTRUE 17003
17001: GO 17013
17003: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17004: LD_STRING earthquake(getX(game), 0, 32)
17006: PPUSH
17007: CALL_OW 559
17011: GO 17251
17013: LD_INT 2
17015: DOUBLE
17016: EQUAL
17017: IFTRUE 17021
17019: GO 17035
17021: POP
// begin ToLua ( displayStucuk(); ) ;
17022: LD_STRING displayStucuk();
17024: PPUSH
17025: CALL_OW 559
// ResetFog ;
17029: CALL_OW 335
// end ; 3 :
17033: GO 17251
17035: LD_INT 3
17037: DOUBLE
17038: EQUAL
17039: IFTRUE 17043
17041: GO 17147
17043: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17044: LD_ADDR_VAR 0 2
17048: PUSH
17049: LD_INT 22
17051: PUSH
17052: LD_OWVAR 2
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: PUSH
17061: LD_INT 25
17063: PUSH
17064: LD_INT 1
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: PPUSH
17075: CALL_OW 69
17079: ST_TO_ADDR
// if not tmp then
17080: LD_VAR 0 2
17084: NOT
17085: IFFALSE 17089
// exit ;
17087: GO 17251
// un := tmp [ rand ( 1 , tmp ) ] ;
17089: LD_ADDR_VAR 0 3
17093: PUSH
17094: LD_VAR 0 2
17098: PUSH
17099: LD_INT 1
17101: PPUSH
17102: LD_VAR 0 2
17106: PPUSH
17107: CALL_OW 12
17111: ARRAY
17112: ST_TO_ADDR
// if Crawls ( un ) then
17113: LD_VAR 0 3
17117: PPUSH
17118: CALL_OW 318
17122: IFFALSE 17133
// ComWalk ( un ) ;
17124: LD_VAR 0 3
17128: PPUSH
17129: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17133: LD_VAR 0 3
17137: PPUSH
17138: LD_INT 8
17140: PPUSH
17141: CALL_OW 336
// end ; 4 :
17145: GO 17251
17147: LD_INT 4
17149: DOUBLE
17150: EQUAL
17151: IFTRUE 17155
17153: GO 17229
17155: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17156: LD_ADDR_VAR 0 2
17160: PUSH
17161: LD_INT 22
17163: PUSH
17164: LD_OWVAR 2
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: PUSH
17173: LD_INT 30
17175: PUSH
17176: LD_INT 29
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PPUSH
17187: CALL_OW 69
17191: ST_TO_ADDR
// if not tmp then
17192: LD_VAR 0 2
17196: NOT
17197: IFFALSE 17201
// exit ;
17199: GO 17251
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17201: LD_VAR 0 2
17205: PUSH
17206: LD_INT 1
17208: ARRAY
17209: PPUSH
17210: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17214: LD_VAR 0 2
17218: PUSH
17219: LD_INT 1
17221: ARRAY
17222: PPUSH
17223: CALL_OW 65
// end ; 5 .. 7 :
17227: GO 17251
17229: LD_INT 5
17231: DOUBLE
17232: GREATEREQUAL
17233: IFFALSE 17241
17235: LD_INT 7
17237: DOUBLE
17238: LESSEQUAL
17239: IFTRUE 17243
17241: GO 17250
17243: POP
// StreamSibBomb ; end ;
17244: CALL 13488 0 0
17248: GO 17251
17250: POP
// end ;
17251: PPOPN 3
17253: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17254: LD_EXP 24
17258: PUSH
17259: LD_EXP 74
17263: AND
17264: IFFALSE 17420
17266: GO 17268
17268: DISABLE
17269: LD_INT 0
17271: PPUSH
17272: PPUSH
17273: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17274: LD_ADDR_VAR 0 2
17278: PUSH
17279: LD_INT 81
17281: PUSH
17282: LD_OWVAR 2
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: PUSH
17291: LD_INT 2
17293: PUSH
17294: LD_INT 21
17296: PUSH
17297: LD_INT 1
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: PUSH
17304: LD_INT 21
17306: PUSH
17307: LD_INT 2
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: LIST
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: PPUSH
17323: CALL_OW 69
17327: ST_TO_ADDR
// if not tmp then
17328: LD_VAR 0 2
17332: NOT
17333: IFFALSE 17337
// exit ;
17335: GO 17420
// p := 0 ;
17337: LD_ADDR_VAR 0 3
17341: PUSH
17342: LD_INT 0
17344: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17345: LD_INT 35
17347: PPUSH
17348: CALL_OW 67
// p := p + 1 ;
17352: LD_ADDR_VAR 0 3
17356: PUSH
17357: LD_VAR 0 3
17361: PUSH
17362: LD_INT 1
17364: PLUS
17365: ST_TO_ADDR
// for i in tmp do
17366: LD_ADDR_VAR 0 1
17370: PUSH
17371: LD_VAR 0 2
17375: PUSH
17376: FOR_IN
17377: IFFALSE 17408
// if GetLives ( i ) < 1000 then
17379: LD_VAR 0 1
17383: PPUSH
17384: CALL_OW 256
17388: PUSH
17389: LD_INT 1000
17391: LESS
17392: IFFALSE 17406
// SetLives ( i , 1000 ) ;
17394: LD_VAR 0 1
17398: PPUSH
17399: LD_INT 1000
17401: PPUSH
17402: CALL_OW 234
17406: GO 17376
17408: POP
17409: POP
// until p > 20 ;
17410: LD_VAR 0 3
17414: PUSH
17415: LD_INT 20
17417: GREATER
17418: IFFALSE 17345
// end ;
17420: PPOPN 3
17422: END
// every 0 0$1 trigger StreamModeActive and sTime do
17423: LD_EXP 24
17427: PUSH
17428: LD_EXP 75
17432: AND
17433: IFFALSE 17468
17435: GO 17437
17437: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17438: LD_INT 28
17440: PPUSH
17441: LD_OWVAR 2
17445: PPUSH
17446: LD_INT 2
17448: PPUSH
17449: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17453: LD_INT 30
17455: PPUSH
17456: LD_OWVAR 2
17460: PPUSH
17461: LD_INT 2
17463: PPUSH
17464: CALL_OW 322
// end ;
17468: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17469: LD_EXP 24
17473: PUSH
17474: LD_EXP 76
17478: AND
17479: IFFALSE 17600
17481: GO 17483
17483: DISABLE
17484: LD_INT 0
17486: PPUSH
17487: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17488: LD_ADDR_VAR 0 2
17492: PUSH
17493: LD_INT 22
17495: PUSH
17496: LD_OWVAR 2
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: PUSH
17505: LD_INT 21
17507: PUSH
17508: LD_INT 1
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: PUSH
17515: LD_INT 3
17517: PUSH
17518: LD_INT 23
17520: PUSH
17521: LD_INT 0
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: LIST
17536: PPUSH
17537: CALL_OW 69
17541: ST_TO_ADDR
// if not tmp then
17542: LD_VAR 0 2
17546: NOT
17547: IFFALSE 17551
// exit ;
17549: GO 17600
// for i in tmp do
17551: LD_ADDR_VAR 0 1
17555: PUSH
17556: LD_VAR 0 2
17560: PUSH
17561: FOR_IN
17562: IFFALSE 17598
// begin if Crawls ( i ) then
17564: LD_VAR 0 1
17568: PPUSH
17569: CALL_OW 318
17573: IFFALSE 17584
// ComWalk ( i ) ;
17575: LD_VAR 0 1
17579: PPUSH
17580: CALL_OW 138
// SetClass ( i , 2 ) ;
17584: LD_VAR 0 1
17588: PPUSH
17589: LD_INT 2
17591: PPUSH
17592: CALL_OW 336
// end ;
17596: GO 17561
17598: POP
17599: POP
// end ;
17600: PPOPN 2
17602: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17603: LD_EXP 24
17607: PUSH
17608: LD_EXP 77
17612: AND
17613: IFFALSE 17901
17615: GO 17617
17617: DISABLE
17618: LD_INT 0
17620: PPUSH
17621: PPUSH
17622: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17623: LD_OWVAR 2
17627: PPUSH
17628: LD_INT 9
17630: PPUSH
17631: LD_INT 1
17633: PPUSH
17634: LD_INT 1
17636: PPUSH
17637: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17641: LD_INT 9
17643: PPUSH
17644: LD_OWVAR 2
17648: PPUSH
17649: CALL_OW 343
// uc_side := 9 ;
17653: LD_ADDR_OWVAR 20
17657: PUSH
17658: LD_INT 9
17660: ST_TO_ADDR
// uc_nation := 2 ;
17661: LD_ADDR_OWVAR 21
17665: PUSH
17666: LD_INT 2
17668: ST_TO_ADDR
// hc_name := Dark Warrior ;
17669: LD_ADDR_OWVAR 26
17673: PUSH
17674: LD_STRING Dark Warrior
17676: ST_TO_ADDR
// hc_gallery :=  ;
17677: LD_ADDR_OWVAR 33
17681: PUSH
17682: LD_STRING 
17684: ST_TO_ADDR
// hc_noskilllimit := true ;
17685: LD_ADDR_OWVAR 76
17689: PUSH
17690: LD_INT 1
17692: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17693: LD_ADDR_OWVAR 31
17697: PUSH
17698: LD_INT 30
17700: PUSH
17701: LD_INT 30
17703: PUSH
17704: LD_INT 30
17706: PUSH
17707: LD_INT 30
17709: PUSH
17710: EMPTY
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: ST_TO_ADDR
// un := CreateHuman ;
17716: LD_ADDR_VAR 0 3
17720: PUSH
17721: CALL_OW 44
17725: ST_TO_ADDR
// hc_noskilllimit := false ;
17726: LD_ADDR_OWVAR 76
17730: PUSH
17731: LD_INT 0
17733: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17734: LD_VAR 0 3
17738: PPUSH
17739: LD_INT 1
17741: PPUSH
17742: CALL_OW 51
// ToLua ( playRanger() ) ;
17746: LD_STRING playRanger()
17748: PPUSH
17749: CALL_OW 559
// p := 0 ;
17753: LD_ADDR_VAR 0 2
17757: PUSH
17758: LD_INT 0
17760: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17761: LD_INT 35
17763: PPUSH
17764: CALL_OW 67
// p := p + 1 ;
17768: LD_ADDR_VAR 0 2
17772: PUSH
17773: LD_VAR 0 2
17777: PUSH
17778: LD_INT 1
17780: PLUS
17781: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17782: LD_VAR 0 3
17786: PPUSH
17787: CALL_OW 256
17791: PUSH
17792: LD_INT 1000
17794: LESS
17795: IFFALSE 17809
// SetLives ( un , 1000 ) ;
17797: LD_VAR 0 3
17801: PPUSH
17802: LD_INT 1000
17804: PPUSH
17805: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17809: LD_VAR 0 3
17813: PPUSH
17814: LD_INT 81
17816: PUSH
17817: LD_OWVAR 2
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: PUSH
17826: LD_INT 91
17828: PUSH
17829: LD_VAR 0 3
17833: PUSH
17834: LD_INT 30
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: LIST
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: PPUSH
17846: CALL_OW 69
17850: PPUSH
17851: LD_VAR 0 3
17855: PPUSH
17856: CALL_OW 74
17860: PPUSH
17861: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17865: LD_VAR 0 2
17869: PUSH
17870: LD_INT 80
17872: GREATER
17873: PUSH
17874: LD_VAR 0 3
17878: PPUSH
17879: CALL_OW 301
17883: OR
17884: IFFALSE 17761
// if un then
17886: LD_VAR 0 3
17890: IFFALSE 17901
// RemoveUnit ( un ) ;
17892: LD_VAR 0 3
17896: PPUSH
17897: CALL_OW 64
// end ;
17901: PPOPN 3
17903: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17904: LD_EXP 78
17908: IFFALSE 18024
17910: GO 17912
17912: DISABLE
17913: LD_INT 0
17915: PPUSH
17916: PPUSH
17917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17918: LD_ADDR_VAR 0 2
17922: PUSH
17923: LD_INT 81
17925: PUSH
17926: LD_OWVAR 2
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: PUSH
17935: LD_INT 21
17937: PUSH
17938: LD_INT 1
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PPUSH
17949: CALL_OW 69
17953: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17954: LD_STRING playComputer()
17956: PPUSH
17957: CALL_OW 559
// if not tmp then
17961: LD_VAR 0 2
17965: NOT
17966: IFFALSE 17970
// exit ;
17968: GO 18024
// for i in tmp do
17970: LD_ADDR_VAR 0 1
17974: PUSH
17975: LD_VAR 0 2
17979: PUSH
17980: FOR_IN
17981: IFFALSE 18022
// for j := 1 to 4 do
17983: LD_ADDR_VAR 0 3
17987: PUSH
17988: DOUBLE
17989: LD_INT 1
17991: DEC
17992: ST_TO_ADDR
17993: LD_INT 4
17995: PUSH
17996: FOR_TO
17997: IFFALSE 18018
// SetSkill ( i , j , 10 ) ;
17999: LD_VAR 0 1
18003: PPUSH
18004: LD_VAR 0 3
18008: PPUSH
18009: LD_INT 10
18011: PPUSH
18012: CALL_OW 237
18016: GO 17996
18018: POP
18019: POP
18020: GO 17980
18022: POP
18023: POP
// end ;
18024: PPOPN 3
18026: END
// every 0 0$1 trigger s30 do var i , tmp ;
18027: LD_EXP 79
18031: IFFALSE 18100
18033: GO 18035
18035: DISABLE
18036: LD_INT 0
18038: PPUSH
18039: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18040: LD_ADDR_VAR 0 2
18044: PUSH
18045: LD_INT 22
18047: PUSH
18048: LD_OWVAR 2
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PPUSH
18057: CALL_OW 69
18061: ST_TO_ADDR
// if not tmp then
18062: LD_VAR 0 2
18066: NOT
18067: IFFALSE 18071
// exit ;
18069: GO 18100
// for i in tmp do
18071: LD_ADDR_VAR 0 1
18075: PUSH
18076: LD_VAR 0 2
18080: PUSH
18081: FOR_IN
18082: IFFALSE 18098
// SetLives ( i , 300 ) ;
18084: LD_VAR 0 1
18088: PPUSH
18089: LD_INT 300
18091: PPUSH
18092: CALL_OW 234
18096: GO 18081
18098: POP
18099: POP
// end ;
18100: PPOPN 2
18102: END
// every 0 0$1 trigger s60 do var i , tmp ;
18103: LD_EXP 80
18107: IFFALSE 18176
18109: GO 18111
18111: DISABLE
18112: LD_INT 0
18114: PPUSH
18115: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18116: LD_ADDR_VAR 0 2
18120: PUSH
18121: LD_INT 22
18123: PUSH
18124: LD_OWVAR 2
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PPUSH
18133: CALL_OW 69
18137: ST_TO_ADDR
// if not tmp then
18138: LD_VAR 0 2
18142: NOT
18143: IFFALSE 18147
// exit ;
18145: GO 18176
// for i in tmp do
18147: LD_ADDR_VAR 0 1
18151: PUSH
18152: LD_VAR 0 2
18156: PUSH
18157: FOR_IN
18158: IFFALSE 18174
// SetLives ( i , 600 ) ;
18160: LD_VAR 0 1
18164: PPUSH
18165: LD_INT 600
18167: PPUSH
18168: CALL_OW 234
18172: GO 18157
18174: POP
18175: POP
// end ;
18176: PPOPN 2
18178: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18179: LD_INT 0
18181: PPUSH
// case cmd of 301 :
18182: LD_VAR 0 1
18186: PUSH
18187: LD_INT 301
18189: DOUBLE
18190: EQUAL
18191: IFTRUE 18195
18193: GO 18227
18195: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18196: LD_VAR 0 6
18200: PPUSH
18201: LD_VAR 0 7
18205: PPUSH
18206: LD_VAR 0 8
18210: PPUSH
18211: LD_VAR 0 4
18215: PPUSH
18216: LD_VAR 0 5
18220: PPUSH
18221: CALL 19428 0 5
18225: GO 18348
18227: LD_INT 302
18229: DOUBLE
18230: EQUAL
18231: IFTRUE 18235
18233: GO 18272
18235: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18236: LD_VAR 0 6
18240: PPUSH
18241: LD_VAR 0 7
18245: PPUSH
18246: LD_VAR 0 8
18250: PPUSH
18251: LD_VAR 0 9
18255: PPUSH
18256: LD_VAR 0 4
18260: PPUSH
18261: LD_VAR 0 5
18265: PPUSH
18266: CALL 19519 0 6
18270: GO 18348
18272: LD_INT 303
18274: DOUBLE
18275: EQUAL
18276: IFTRUE 18280
18278: GO 18317
18280: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18281: LD_VAR 0 6
18285: PPUSH
18286: LD_VAR 0 7
18290: PPUSH
18291: LD_VAR 0 8
18295: PPUSH
18296: LD_VAR 0 9
18300: PPUSH
18301: LD_VAR 0 4
18305: PPUSH
18306: LD_VAR 0 5
18310: PPUSH
18311: CALL 18353 0 6
18315: GO 18348
18317: LD_INT 304
18319: DOUBLE
18320: EQUAL
18321: IFTRUE 18325
18323: GO 18347
18325: POP
// hHackTeleport ( unit , x , y ) ; end ;
18326: LD_VAR 0 2
18330: PPUSH
18331: LD_VAR 0 4
18335: PPUSH
18336: LD_VAR 0 5
18340: PPUSH
18341: CALL 20112 0 3
18345: GO 18348
18347: POP
// end ;
18348: LD_VAR 0 12
18352: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18353: LD_INT 0
18355: PPUSH
18356: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18357: LD_VAR 0 1
18361: PUSH
18362: LD_INT 1
18364: LESS
18365: PUSH
18366: LD_VAR 0 1
18370: PUSH
18371: LD_INT 3
18373: GREATER
18374: OR
18375: PUSH
18376: LD_VAR 0 5
18380: PPUSH
18381: LD_VAR 0 6
18385: PPUSH
18386: CALL_OW 428
18390: OR
18391: IFFALSE 18395
// exit ;
18393: GO 19115
// uc_side := your_side ;
18395: LD_ADDR_OWVAR 20
18399: PUSH
18400: LD_OWVAR 2
18404: ST_TO_ADDR
// uc_nation := nation ;
18405: LD_ADDR_OWVAR 21
18409: PUSH
18410: LD_VAR 0 1
18414: ST_TO_ADDR
// bc_level = 1 ;
18415: LD_ADDR_OWVAR 43
18419: PUSH
18420: LD_INT 1
18422: ST_TO_ADDR
// case btype of 1 :
18423: LD_VAR 0 2
18427: PUSH
18428: LD_INT 1
18430: DOUBLE
18431: EQUAL
18432: IFTRUE 18436
18434: GO 18447
18436: POP
// bc_type := b_depot ; 2 :
18437: LD_ADDR_OWVAR 42
18441: PUSH
18442: LD_INT 0
18444: ST_TO_ADDR
18445: GO 19059
18447: LD_INT 2
18449: DOUBLE
18450: EQUAL
18451: IFTRUE 18455
18453: GO 18466
18455: POP
// bc_type := b_warehouse ; 3 :
18456: LD_ADDR_OWVAR 42
18460: PUSH
18461: LD_INT 1
18463: ST_TO_ADDR
18464: GO 19059
18466: LD_INT 3
18468: DOUBLE
18469: EQUAL
18470: IFTRUE 18474
18472: GO 18485
18474: POP
// bc_type := b_lab ; 4 .. 9 :
18475: LD_ADDR_OWVAR 42
18479: PUSH
18480: LD_INT 6
18482: ST_TO_ADDR
18483: GO 19059
18485: LD_INT 4
18487: DOUBLE
18488: GREATEREQUAL
18489: IFFALSE 18497
18491: LD_INT 9
18493: DOUBLE
18494: LESSEQUAL
18495: IFTRUE 18499
18497: GO 18551
18499: POP
// begin bc_type := b_lab_half ;
18500: LD_ADDR_OWVAR 42
18504: PUSH
18505: LD_INT 7
18507: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18508: LD_ADDR_OWVAR 44
18512: PUSH
18513: LD_INT 10
18515: PUSH
18516: LD_INT 11
18518: PUSH
18519: LD_INT 12
18521: PUSH
18522: LD_INT 15
18524: PUSH
18525: LD_INT 14
18527: PUSH
18528: LD_INT 13
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: PUSH
18539: LD_VAR 0 2
18543: PUSH
18544: LD_INT 3
18546: MINUS
18547: ARRAY
18548: ST_TO_ADDR
// end ; 10 .. 13 :
18549: GO 19059
18551: LD_INT 10
18553: DOUBLE
18554: GREATEREQUAL
18555: IFFALSE 18563
18557: LD_INT 13
18559: DOUBLE
18560: LESSEQUAL
18561: IFTRUE 18565
18563: GO 18642
18565: POP
// begin bc_type := b_lab_full ;
18566: LD_ADDR_OWVAR 42
18570: PUSH
18571: LD_INT 8
18573: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18574: LD_ADDR_OWVAR 44
18578: PUSH
18579: LD_INT 10
18581: PUSH
18582: LD_INT 12
18584: PUSH
18585: LD_INT 14
18587: PUSH
18588: LD_INT 13
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: PUSH
18597: LD_VAR 0 2
18601: PUSH
18602: LD_INT 9
18604: MINUS
18605: ARRAY
18606: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18607: LD_ADDR_OWVAR 45
18611: PUSH
18612: LD_INT 11
18614: PUSH
18615: LD_INT 15
18617: PUSH
18618: LD_INT 12
18620: PUSH
18621: LD_INT 15
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: PUSH
18630: LD_VAR 0 2
18634: PUSH
18635: LD_INT 9
18637: MINUS
18638: ARRAY
18639: ST_TO_ADDR
// end ; 14 :
18640: GO 19059
18642: LD_INT 14
18644: DOUBLE
18645: EQUAL
18646: IFTRUE 18650
18648: GO 18661
18650: POP
// bc_type := b_workshop ; 15 :
18651: LD_ADDR_OWVAR 42
18655: PUSH
18656: LD_INT 2
18658: ST_TO_ADDR
18659: GO 19059
18661: LD_INT 15
18663: DOUBLE
18664: EQUAL
18665: IFTRUE 18669
18667: GO 18680
18669: POP
// bc_type := b_factory ; 16 :
18670: LD_ADDR_OWVAR 42
18674: PUSH
18675: LD_INT 3
18677: ST_TO_ADDR
18678: GO 19059
18680: LD_INT 16
18682: DOUBLE
18683: EQUAL
18684: IFTRUE 18688
18686: GO 18699
18688: POP
// bc_type := b_ext_gun ; 17 :
18689: LD_ADDR_OWVAR 42
18693: PUSH
18694: LD_INT 17
18696: ST_TO_ADDR
18697: GO 19059
18699: LD_INT 17
18701: DOUBLE
18702: EQUAL
18703: IFTRUE 18707
18705: GO 18735
18707: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18708: LD_ADDR_OWVAR 42
18712: PUSH
18713: LD_INT 19
18715: PUSH
18716: LD_INT 23
18718: PUSH
18719: LD_INT 19
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: LIST
18726: PUSH
18727: LD_VAR 0 1
18731: ARRAY
18732: ST_TO_ADDR
18733: GO 19059
18735: LD_INT 18
18737: DOUBLE
18738: EQUAL
18739: IFTRUE 18743
18741: GO 18754
18743: POP
// bc_type := b_ext_radar ; 19 :
18744: LD_ADDR_OWVAR 42
18748: PUSH
18749: LD_INT 20
18751: ST_TO_ADDR
18752: GO 19059
18754: LD_INT 19
18756: DOUBLE
18757: EQUAL
18758: IFTRUE 18762
18760: GO 18773
18762: POP
// bc_type := b_ext_radio ; 20 :
18763: LD_ADDR_OWVAR 42
18767: PUSH
18768: LD_INT 22
18770: ST_TO_ADDR
18771: GO 19059
18773: LD_INT 20
18775: DOUBLE
18776: EQUAL
18777: IFTRUE 18781
18779: GO 18792
18781: POP
// bc_type := b_ext_siberium ; 21 :
18782: LD_ADDR_OWVAR 42
18786: PUSH
18787: LD_INT 21
18789: ST_TO_ADDR
18790: GO 19059
18792: LD_INT 21
18794: DOUBLE
18795: EQUAL
18796: IFTRUE 18800
18798: GO 18811
18800: POP
// bc_type := b_ext_computer ; 22 :
18801: LD_ADDR_OWVAR 42
18805: PUSH
18806: LD_INT 24
18808: ST_TO_ADDR
18809: GO 19059
18811: LD_INT 22
18813: DOUBLE
18814: EQUAL
18815: IFTRUE 18819
18817: GO 18830
18819: POP
// bc_type := b_ext_track ; 23 :
18820: LD_ADDR_OWVAR 42
18824: PUSH
18825: LD_INT 16
18827: ST_TO_ADDR
18828: GO 19059
18830: LD_INT 23
18832: DOUBLE
18833: EQUAL
18834: IFTRUE 18838
18836: GO 18849
18838: POP
// bc_type := b_ext_laser ; 24 :
18839: LD_ADDR_OWVAR 42
18843: PUSH
18844: LD_INT 25
18846: ST_TO_ADDR
18847: GO 19059
18849: LD_INT 24
18851: DOUBLE
18852: EQUAL
18853: IFTRUE 18857
18855: GO 18868
18857: POP
// bc_type := b_control_tower ; 25 :
18858: LD_ADDR_OWVAR 42
18862: PUSH
18863: LD_INT 36
18865: ST_TO_ADDR
18866: GO 19059
18868: LD_INT 25
18870: DOUBLE
18871: EQUAL
18872: IFTRUE 18876
18874: GO 18887
18876: POP
// bc_type := b_breastwork ; 26 :
18877: LD_ADDR_OWVAR 42
18881: PUSH
18882: LD_INT 31
18884: ST_TO_ADDR
18885: GO 19059
18887: LD_INT 26
18889: DOUBLE
18890: EQUAL
18891: IFTRUE 18895
18893: GO 18906
18895: POP
// bc_type := b_bunker ; 27 :
18896: LD_ADDR_OWVAR 42
18900: PUSH
18901: LD_INT 32
18903: ST_TO_ADDR
18904: GO 19059
18906: LD_INT 27
18908: DOUBLE
18909: EQUAL
18910: IFTRUE 18914
18912: GO 18925
18914: POP
// bc_type := b_turret ; 28 :
18915: LD_ADDR_OWVAR 42
18919: PUSH
18920: LD_INT 33
18922: ST_TO_ADDR
18923: GO 19059
18925: LD_INT 28
18927: DOUBLE
18928: EQUAL
18929: IFTRUE 18933
18931: GO 18944
18933: POP
// bc_type := b_armoury ; 29 :
18934: LD_ADDR_OWVAR 42
18938: PUSH
18939: LD_INT 4
18941: ST_TO_ADDR
18942: GO 19059
18944: LD_INT 29
18946: DOUBLE
18947: EQUAL
18948: IFTRUE 18952
18950: GO 18963
18952: POP
// bc_type := b_barracks ; 30 :
18953: LD_ADDR_OWVAR 42
18957: PUSH
18958: LD_INT 5
18960: ST_TO_ADDR
18961: GO 19059
18963: LD_INT 30
18965: DOUBLE
18966: EQUAL
18967: IFTRUE 18971
18969: GO 18982
18971: POP
// bc_type := b_solar_power ; 31 :
18972: LD_ADDR_OWVAR 42
18976: PUSH
18977: LD_INT 27
18979: ST_TO_ADDR
18980: GO 19059
18982: LD_INT 31
18984: DOUBLE
18985: EQUAL
18986: IFTRUE 18990
18988: GO 19001
18990: POP
// bc_type := b_oil_power ; 32 :
18991: LD_ADDR_OWVAR 42
18995: PUSH
18996: LD_INT 26
18998: ST_TO_ADDR
18999: GO 19059
19001: LD_INT 32
19003: DOUBLE
19004: EQUAL
19005: IFTRUE 19009
19007: GO 19020
19009: POP
// bc_type := b_siberite_power ; 33 :
19010: LD_ADDR_OWVAR 42
19014: PUSH
19015: LD_INT 28
19017: ST_TO_ADDR
19018: GO 19059
19020: LD_INT 33
19022: DOUBLE
19023: EQUAL
19024: IFTRUE 19028
19026: GO 19039
19028: POP
// bc_type := b_oil_mine ; 34 :
19029: LD_ADDR_OWVAR 42
19033: PUSH
19034: LD_INT 29
19036: ST_TO_ADDR
19037: GO 19059
19039: LD_INT 34
19041: DOUBLE
19042: EQUAL
19043: IFTRUE 19047
19045: GO 19058
19047: POP
// bc_type := b_siberite_mine ; end ;
19048: LD_ADDR_OWVAR 42
19052: PUSH
19053: LD_INT 30
19055: ST_TO_ADDR
19056: GO 19059
19058: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19059: LD_ADDR_VAR 0 8
19063: PUSH
19064: LD_VAR 0 5
19068: PPUSH
19069: LD_VAR 0 6
19073: PPUSH
19074: LD_VAR 0 3
19078: PPUSH
19079: CALL_OW 47
19083: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19084: LD_OWVAR 42
19088: PUSH
19089: LD_INT 32
19091: PUSH
19092: LD_INT 33
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: IN
19099: IFFALSE 19115
// PlaceWeaponTurret ( b , weapon ) ;
19101: LD_VAR 0 8
19105: PPUSH
19106: LD_VAR 0 4
19110: PPUSH
19111: CALL_OW 431
// end ;
19115: LD_VAR 0 7
19119: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19120: LD_INT 0
19122: PPUSH
19123: PPUSH
19124: PPUSH
19125: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19126: LD_ADDR_VAR 0 4
19130: PUSH
19131: LD_INT 22
19133: PUSH
19134: LD_OWVAR 2
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_INT 2
19145: PUSH
19146: LD_INT 30
19148: PUSH
19149: LD_INT 0
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 30
19158: PUSH
19159: LD_INT 1
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: LIST
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PPUSH
19175: CALL_OW 69
19179: ST_TO_ADDR
// if not tmp then
19180: LD_VAR 0 4
19184: NOT
19185: IFFALSE 19189
// exit ;
19187: GO 19248
// for i in tmp do
19189: LD_ADDR_VAR 0 2
19193: PUSH
19194: LD_VAR 0 4
19198: PUSH
19199: FOR_IN
19200: IFFALSE 19246
// for j = 1 to 3 do
19202: LD_ADDR_VAR 0 3
19206: PUSH
19207: DOUBLE
19208: LD_INT 1
19210: DEC
19211: ST_TO_ADDR
19212: LD_INT 3
19214: PUSH
19215: FOR_TO
19216: IFFALSE 19242
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19218: LD_VAR 0 2
19222: PPUSH
19223: CALL_OW 274
19227: PPUSH
19228: LD_VAR 0 3
19232: PPUSH
19233: LD_INT 99999
19235: PPUSH
19236: CALL_OW 277
19240: GO 19215
19242: POP
19243: POP
19244: GO 19199
19246: POP
19247: POP
// end ;
19248: LD_VAR 0 1
19252: RET
// export function hHackSetLevel10 ; var i , j ; begin
19253: LD_INT 0
19255: PPUSH
19256: PPUSH
19257: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19258: LD_ADDR_VAR 0 2
19262: PUSH
19263: LD_INT 21
19265: PUSH
19266: LD_INT 1
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PPUSH
19273: CALL_OW 69
19277: PUSH
19278: FOR_IN
19279: IFFALSE 19331
// if IsSelected ( i ) then
19281: LD_VAR 0 2
19285: PPUSH
19286: CALL_OW 306
19290: IFFALSE 19329
// begin for j := 1 to 4 do
19292: LD_ADDR_VAR 0 3
19296: PUSH
19297: DOUBLE
19298: LD_INT 1
19300: DEC
19301: ST_TO_ADDR
19302: LD_INT 4
19304: PUSH
19305: FOR_TO
19306: IFFALSE 19327
// SetSkill ( i , j , 10 ) ;
19308: LD_VAR 0 2
19312: PPUSH
19313: LD_VAR 0 3
19317: PPUSH
19318: LD_INT 10
19320: PPUSH
19321: CALL_OW 237
19325: GO 19305
19327: POP
19328: POP
// end ;
19329: GO 19278
19331: POP
19332: POP
// end ;
19333: LD_VAR 0 1
19337: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19338: LD_INT 0
19340: PPUSH
19341: PPUSH
19342: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19343: LD_ADDR_VAR 0 2
19347: PUSH
19348: LD_INT 22
19350: PUSH
19351: LD_OWVAR 2
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: PUSH
19360: LD_INT 21
19362: PUSH
19363: LD_INT 1
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PPUSH
19374: CALL_OW 69
19378: PUSH
19379: FOR_IN
19380: IFFALSE 19421
// begin for j := 1 to 4 do
19382: LD_ADDR_VAR 0 3
19386: PUSH
19387: DOUBLE
19388: LD_INT 1
19390: DEC
19391: ST_TO_ADDR
19392: LD_INT 4
19394: PUSH
19395: FOR_TO
19396: IFFALSE 19417
// SetSkill ( i , j , 10 ) ;
19398: LD_VAR 0 2
19402: PPUSH
19403: LD_VAR 0 3
19407: PPUSH
19408: LD_INT 10
19410: PPUSH
19411: CALL_OW 237
19415: GO 19395
19417: POP
19418: POP
// end ;
19419: GO 19379
19421: POP
19422: POP
// end ;
19423: LD_VAR 0 1
19427: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19428: LD_INT 0
19430: PPUSH
// uc_side := your_side ;
19431: LD_ADDR_OWVAR 20
19435: PUSH
19436: LD_OWVAR 2
19440: ST_TO_ADDR
// uc_nation := nation ;
19441: LD_ADDR_OWVAR 21
19445: PUSH
19446: LD_VAR 0 1
19450: ST_TO_ADDR
// InitHc ;
19451: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19455: LD_INT 0
19457: PPUSH
19458: LD_VAR 0 2
19462: PPUSH
19463: LD_VAR 0 3
19467: PPUSH
19468: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19472: LD_VAR 0 4
19476: PPUSH
19477: LD_VAR 0 5
19481: PPUSH
19482: CALL_OW 428
19486: PUSH
19487: LD_INT 0
19489: EQUAL
19490: IFFALSE 19514
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19492: CALL_OW 44
19496: PPUSH
19497: LD_VAR 0 4
19501: PPUSH
19502: LD_VAR 0 5
19506: PPUSH
19507: LD_INT 1
19509: PPUSH
19510: CALL_OW 48
// end ;
19514: LD_VAR 0 6
19518: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19519: LD_INT 0
19521: PPUSH
19522: PPUSH
// uc_side := your_side ;
19523: LD_ADDR_OWVAR 20
19527: PUSH
19528: LD_OWVAR 2
19532: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19533: LD_VAR 0 1
19537: PUSH
19538: LD_INT 1
19540: PUSH
19541: LD_INT 2
19543: PUSH
19544: LD_INT 3
19546: PUSH
19547: LD_INT 4
19549: PUSH
19550: LD_INT 5
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: IN
19560: IFFALSE 19572
// uc_nation := nation_american else
19562: LD_ADDR_OWVAR 21
19566: PUSH
19567: LD_INT 1
19569: ST_TO_ADDR
19570: GO 19615
// if chassis in [ 11 , 12 , 13 , 14 ] then
19572: LD_VAR 0 1
19576: PUSH
19577: LD_INT 11
19579: PUSH
19580: LD_INT 12
19582: PUSH
19583: LD_INT 13
19585: PUSH
19586: LD_INT 14
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: IN
19595: IFFALSE 19607
// uc_nation := nation_arabian else
19597: LD_ADDR_OWVAR 21
19601: PUSH
19602: LD_INT 2
19604: ST_TO_ADDR
19605: GO 19615
// uc_nation := nation_russian ;
19607: LD_ADDR_OWVAR 21
19611: PUSH
19612: LD_INT 3
19614: ST_TO_ADDR
// vc_chassis := chassis ;
19615: LD_ADDR_OWVAR 37
19619: PUSH
19620: LD_VAR 0 1
19624: ST_TO_ADDR
// vc_engine := engine ;
19625: LD_ADDR_OWVAR 39
19629: PUSH
19630: LD_VAR 0 2
19634: ST_TO_ADDR
// vc_control := control ;
19635: LD_ADDR_OWVAR 38
19639: PUSH
19640: LD_VAR 0 3
19644: ST_TO_ADDR
// vc_weapon := weapon ;
19645: LD_ADDR_OWVAR 40
19649: PUSH
19650: LD_VAR 0 4
19654: ST_TO_ADDR
// un := CreateVehicle ;
19655: LD_ADDR_VAR 0 8
19659: PUSH
19660: CALL_OW 45
19664: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19665: LD_VAR 0 8
19669: PPUSH
19670: LD_INT 0
19672: PPUSH
19673: LD_INT 5
19675: PPUSH
19676: CALL_OW 12
19680: PPUSH
19681: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19685: LD_VAR 0 8
19689: PPUSH
19690: LD_VAR 0 5
19694: PPUSH
19695: LD_VAR 0 6
19699: PPUSH
19700: LD_INT 1
19702: PPUSH
19703: CALL_OW 48
// end ;
19707: LD_VAR 0 7
19711: RET
// export hInvincible ; every 1 do
19712: GO 19714
19714: DISABLE
// hInvincible := [ ] ;
19715: LD_ADDR_EXP 81
19719: PUSH
19720: EMPTY
19721: ST_TO_ADDR
19722: END
// every 10 do var i ;
19723: GO 19725
19725: DISABLE
19726: LD_INT 0
19728: PPUSH
// begin enable ;
19729: ENABLE
// if not hInvincible then
19730: LD_EXP 81
19734: NOT
19735: IFFALSE 19739
// exit ;
19737: GO 19783
// for i in hInvincible do
19739: LD_ADDR_VAR 0 1
19743: PUSH
19744: LD_EXP 81
19748: PUSH
19749: FOR_IN
19750: IFFALSE 19781
// if GetLives ( i ) < 1000 then
19752: LD_VAR 0 1
19756: PPUSH
19757: CALL_OW 256
19761: PUSH
19762: LD_INT 1000
19764: LESS
19765: IFFALSE 19779
// SetLives ( i , 1000 ) ;
19767: LD_VAR 0 1
19771: PPUSH
19772: LD_INT 1000
19774: PPUSH
19775: CALL_OW 234
19779: GO 19749
19781: POP
19782: POP
// end ;
19783: PPOPN 1
19785: END
// export function hHackInvincible ; var i ; begin
19786: LD_INT 0
19788: PPUSH
19789: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19790: LD_ADDR_VAR 0 2
19794: PUSH
19795: LD_INT 2
19797: PUSH
19798: LD_INT 21
19800: PUSH
19801: LD_INT 1
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 21
19810: PUSH
19811: LD_INT 2
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: LIST
19822: PPUSH
19823: CALL_OW 69
19827: PUSH
19828: FOR_IN
19829: IFFALSE 19890
// if IsSelected ( i ) then
19831: LD_VAR 0 2
19835: PPUSH
19836: CALL_OW 306
19840: IFFALSE 19888
// begin if i in hInvincible then
19842: LD_VAR 0 2
19846: PUSH
19847: LD_EXP 81
19851: IN
19852: IFFALSE 19872
// hInvincible := hInvincible diff i else
19854: LD_ADDR_EXP 81
19858: PUSH
19859: LD_EXP 81
19863: PUSH
19864: LD_VAR 0 2
19868: DIFF
19869: ST_TO_ADDR
19870: GO 19888
// hInvincible := hInvincible union i ;
19872: LD_ADDR_EXP 81
19876: PUSH
19877: LD_EXP 81
19881: PUSH
19882: LD_VAR 0 2
19886: UNION
19887: ST_TO_ADDR
// end ;
19888: GO 19828
19890: POP
19891: POP
// end ;
19892: LD_VAR 0 1
19896: RET
// export function hHackInvisible ; var i , j ; begin
19897: LD_INT 0
19899: PPUSH
19900: PPUSH
19901: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19902: LD_ADDR_VAR 0 2
19906: PUSH
19907: LD_INT 21
19909: PUSH
19910: LD_INT 1
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PPUSH
19917: CALL_OW 69
19921: PUSH
19922: FOR_IN
19923: IFFALSE 19947
// if IsSelected ( i ) then
19925: LD_VAR 0 2
19929: PPUSH
19930: CALL_OW 306
19934: IFFALSE 19945
// ComForceInvisible ( i ) ;
19936: LD_VAR 0 2
19940: PPUSH
19941: CALL_OW 496
19945: GO 19922
19947: POP
19948: POP
// end ;
19949: LD_VAR 0 1
19953: RET
// export function hHackChangeYourSide ; begin
19954: LD_INT 0
19956: PPUSH
// if your_side = 8 then
19957: LD_OWVAR 2
19961: PUSH
19962: LD_INT 8
19964: EQUAL
19965: IFFALSE 19977
// your_side := 0 else
19967: LD_ADDR_OWVAR 2
19971: PUSH
19972: LD_INT 0
19974: ST_TO_ADDR
19975: GO 19991
// your_side := your_side + 1 ;
19977: LD_ADDR_OWVAR 2
19981: PUSH
19982: LD_OWVAR 2
19986: PUSH
19987: LD_INT 1
19989: PLUS
19990: ST_TO_ADDR
// end ;
19991: LD_VAR 0 1
19995: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19996: LD_INT 0
19998: PPUSH
19999: PPUSH
20000: PPUSH
// for i in all_units do
20001: LD_ADDR_VAR 0 2
20005: PUSH
20006: LD_OWVAR 3
20010: PUSH
20011: FOR_IN
20012: IFFALSE 20090
// if IsSelected ( i ) then
20014: LD_VAR 0 2
20018: PPUSH
20019: CALL_OW 306
20023: IFFALSE 20088
// begin j := GetSide ( i ) ;
20025: LD_ADDR_VAR 0 3
20029: PUSH
20030: LD_VAR 0 2
20034: PPUSH
20035: CALL_OW 255
20039: ST_TO_ADDR
// if j = 8 then
20040: LD_VAR 0 3
20044: PUSH
20045: LD_INT 8
20047: EQUAL
20048: IFFALSE 20060
// j := 0 else
20050: LD_ADDR_VAR 0 3
20054: PUSH
20055: LD_INT 0
20057: ST_TO_ADDR
20058: GO 20074
// j := j + 1 ;
20060: LD_ADDR_VAR 0 3
20064: PUSH
20065: LD_VAR 0 3
20069: PUSH
20070: LD_INT 1
20072: PLUS
20073: ST_TO_ADDR
// SetSide ( i , j ) ;
20074: LD_VAR 0 2
20078: PPUSH
20079: LD_VAR 0 3
20083: PPUSH
20084: CALL_OW 235
// end ;
20088: GO 20011
20090: POP
20091: POP
// end ;
20092: LD_VAR 0 1
20096: RET
// export function hHackFog ; begin
20097: LD_INT 0
20099: PPUSH
// FogOff ( true ) ;
20100: LD_INT 1
20102: PPUSH
20103: CALL_OW 344
// end ;
20107: LD_VAR 0 1
20111: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20112: LD_INT 0
20114: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20115: LD_VAR 0 1
20119: PPUSH
20120: LD_VAR 0 2
20124: PPUSH
20125: LD_VAR 0 3
20129: PPUSH
20130: LD_INT 1
20132: PPUSH
20133: LD_INT 1
20135: PPUSH
20136: CALL_OW 483
// CenterOnXY ( x , y ) ;
20140: LD_VAR 0 2
20144: PPUSH
20145: LD_VAR 0 3
20149: PPUSH
20150: CALL_OW 84
// end ; end_of_file
20154: LD_VAR 0 4
20158: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20159: LD_INT 0
20161: PPUSH
20162: PPUSH
20163: PPUSH
20164: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20165: LD_VAR 0 1
20169: PPUSH
20170: CALL_OW 264
20174: PUSH
20175: LD_EXP 97
20179: EQUAL
20180: IFFALSE 20252
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20182: LD_INT 68
20184: PPUSH
20185: LD_VAR 0 1
20189: PPUSH
20190: CALL_OW 255
20194: PPUSH
20195: CALL_OW 321
20199: PUSH
20200: LD_INT 2
20202: EQUAL
20203: IFFALSE 20215
// eff := 70 else
20205: LD_ADDR_VAR 0 4
20209: PUSH
20210: LD_INT 70
20212: ST_TO_ADDR
20213: GO 20223
// eff := 30 ;
20215: LD_ADDR_VAR 0 4
20219: PUSH
20220: LD_INT 30
20222: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20223: LD_VAR 0 1
20227: PPUSH
20228: CALL_OW 250
20232: PPUSH
20233: LD_VAR 0 1
20237: PPUSH
20238: CALL_OW 251
20242: PPUSH
20243: LD_VAR 0 4
20247: PPUSH
20248: CALL_OW 495
// end ; end ;
20252: LD_VAR 0 2
20256: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20257: LD_INT 0
20259: PPUSH
// end ;
20260: LD_VAR 0 4
20264: RET
// export function SOS_Command ( cmd ) ; begin
20265: LD_INT 0
20267: PPUSH
// end ;
20268: LD_VAR 0 2
20272: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20273: LD_INT 0
20275: PPUSH
// end ;
20276: LD_VAR 0 6
20280: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20281: LD_INT 0
20283: PPUSH
20284: PPUSH
// if not vehicle or not factory then
20285: LD_VAR 0 1
20289: NOT
20290: PUSH
20291: LD_VAR 0 2
20295: NOT
20296: OR
20297: IFFALSE 20301
// exit ;
20299: GO 20532
// if factoryWaypoints >= factory then
20301: LD_EXP 82
20305: PUSH
20306: LD_VAR 0 2
20310: GREATEREQUAL
20311: IFFALSE 20532
// if factoryWaypoints [ factory ] then
20313: LD_EXP 82
20317: PUSH
20318: LD_VAR 0 2
20322: ARRAY
20323: IFFALSE 20532
// begin if GetControl ( vehicle ) = control_manual then
20325: LD_VAR 0 1
20329: PPUSH
20330: CALL_OW 263
20334: PUSH
20335: LD_INT 1
20337: EQUAL
20338: IFFALSE 20419
// begin driver := IsDrivenBy ( vehicle ) ;
20340: LD_ADDR_VAR 0 4
20344: PUSH
20345: LD_VAR 0 1
20349: PPUSH
20350: CALL_OW 311
20354: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20355: LD_VAR 0 4
20359: PPUSH
20360: LD_EXP 82
20364: PUSH
20365: LD_VAR 0 2
20369: ARRAY
20370: PUSH
20371: LD_INT 3
20373: ARRAY
20374: PPUSH
20375: LD_EXP 82
20379: PUSH
20380: LD_VAR 0 2
20384: ARRAY
20385: PUSH
20386: LD_INT 4
20388: ARRAY
20389: PPUSH
20390: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20394: LD_VAR 0 4
20398: PPUSH
20399: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
20403: LD_VAR 0 4
20407: PPUSH
20408: LD_VAR 0 2
20412: PPUSH
20413: CALL_OW 180
// end else
20417: GO 20532
// if GetControl ( vehicle ) = control_remote then
20419: LD_VAR 0 1
20423: PPUSH
20424: CALL_OW 263
20428: PUSH
20429: LD_INT 2
20431: EQUAL
20432: IFFALSE 20493
// begin wait ( 0 0$2 ) ;
20434: LD_INT 70
20436: PPUSH
20437: CALL_OW 67
// if Connect ( vehicle ) then
20441: LD_VAR 0 1
20445: PPUSH
20446: CALL 32932 0 1
20450: IFFALSE 20491
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20452: LD_VAR 0 1
20456: PPUSH
20457: LD_EXP 82
20461: PUSH
20462: LD_VAR 0 2
20466: ARRAY
20467: PUSH
20468: LD_INT 3
20470: ARRAY
20471: PPUSH
20472: LD_EXP 82
20476: PUSH
20477: LD_VAR 0 2
20481: ARRAY
20482: PUSH
20483: LD_INT 4
20485: ARRAY
20486: PPUSH
20487: CALL_OW 171
// end else
20491: GO 20532
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20493: LD_VAR 0 1
20497: PPUSH
20498: LD_EXP 82
20502: PUSH
20503: LD_VAR 0 2
20507: ARRAY
20508: PUSH
20509: LD_INT 3
20511: ARRAY
20512: PPUSH
20513: LD_EXP 82
20517: PUSH
20518: LD_VAR 0 2
20522: ARRAY
20523: PUSH
20524: LD_INT 4
20526: ARRAY
20527: PPUSH
20528: CALL_OW 171
// end ; end ;
20532: LD_VAR 0 3
20536: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20537: LD_INT 0
20539: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20540: LD_VAR 0 1
20544: PUSH
20545: LD_INT 250
20547: EQUAL
20548: PUSH
20549: LD_VAR 0 2
20553: PPUSH
20554: CALL_OW 264
20558: PUSH
20559: LD_EXP 100
20563: EQUAL
20564: AND
20565: IFFALSE 20586
// MinerPlaceMine ( unit , x , y ) ;
20567: LD_VAR 0 2
20571: PPUSH
20572: LD_VAR 0 4
20576: PPUSH
20577: LD_VAR 0 5
20581: PPUSH
20582: CALL 23314 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20586: LD_VAR 0 1
20590: PUSH
20591: LD_INT 251
20593: EQUAL
20594: PUSH
20595: LD_VAR 0 2
20599: PPUSH
20600: CALL_OW 264
20604: PUSH
20605: LD_EXP 100
20609: EQUAL
20610: AND
20611: IFFALSE 20632
// MinerDetonateMine ( unit , x , y ) ;
20613: LD_VAR 0 2
20617: PPUSH
20618: LD_VAR 0 4
20622: PPUSH
20623: LD_VAR 0 5
20627: PPUSH
20628: CALL 23591 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20632: LD_VAR 0 1
20636: PUSH
20637: LD_INT 252
20639: EQUAL
20640: PUSH
20641: LD_VAR 0 2
20645: PPUSH
20646: CALL_OW 264
20650: PUSH
20651: LD_EXP 100
20655: EQUAL
20656: AND
20657: IFFALSE 20678
// MinerCreateMinefield ( unit , x , y ) ;
20659: LD_VAR 0 2
20663: PPUSH
20664: LD_VAR 0 4
20668: PPUSH
20669: LD_VAR 0 5
20673: PPUSH
20674: CALL 24008 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20678: LD_VAR 0 1
20682: PUSH
20683: LD_INT 253
20685: EQUAL
20686: PUSH
20687: LD_VAR 0 2
20691: PPUSH
20692: CALL_OW 257
20696: PUSH
20697: LD_INT 5
20699: EQUAL
20700: AND
20701: IFFALSE 20722
// ComBinocular ( unit , x , y ) ;
20703: LD_VAR 0 2
20707: PPUSH
20708: LD_VAR 0 4
20712: PPUSH
20713: LD_VAR 0 5
20717: PPUSH
20718: CALL 24379 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20722: LD_VAR 0 1
20726: PUSH
20727: LD_INT 254
20729: EQUAL
20730: PUSH
20731: LD_VAR 0 2
20735: PPUSH
20736: CALL_OW 264
20740: PUSH
20741: LD_EXP 95
20745: EQUAL
20746: AND
20747: PUSH
20748: LD_VAR 0 3
20752: PPUSH
20753: CALL_OW 263
20757: PUSH
20758: LD_INT 3
20760: EQUAL
20761: AND
20762: IFFALSE 20778
// HackDestroyVehicle ( unit , selectedUnit ) ;
20764: LD_VAR 0 2
20768: PPUSH
20769: LD_VAR 0 3
20773: PPUSH
20774: CALL 22674 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20778: LD_VAR 0 1
20782: PUSH
20783: LD_INT 255
20785: EQUAL
20786: PUSH
20787: LD_VAR 0 2
20791: PPUSH
20792: CALL_OW 264
20796: PUSH
20797: LD_INT 14
20799: PUSH
20800: LD_INT 53
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: IN
20807: AND
20808: PUSH
20809: LD_VAR 0 4
20813: PPUSH
20814: LD_VAR 0 5
20818: PPUSH
20819: CALL_OW 488
20823: AND
20824: IFFALSE 20848
// CutTreeXYR ( unit , x , y , 12 ) ;
20826: LD_VAR 0 2
20830: PPUSH
20831: LD_VAR 0 4
20835: PPUSH
20836: LD_VAR 0 5
20840: PPUSH
20841: LD_INT 12
20843: PPUSH
20844: CALL 21240 0 4
// if cmd = 256 then
20848: LD_VAR 0 1
20852: PUSH
20853: LD_INT 256
20855: EQUAL
20856: IFFALSE 20877
// SetFactoryWaypoint ( unit , x , y ) ;
20858: LD_VAR 0 2
20862: PPUSH
20863: LD_VAR 0 4
20867: PPUSH
20868: LD_VAR 0 5
20872: PPUSH
20873: CALL 20882 0 3
// end ;
20877: LD_VAR 0 6
20881: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
20882: LD_INT 0
20884: PPUSH
20885: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
20886: LD_VAR 0 1
20890: NOT
20891: PUSH
20892: LD_VAR 0 2
20896: PPUSH
20897: LD_VAR 0 3
20901: PPUSH
20902: CALL_OW 488
20906: NOT
20907: OR
20908: PUSH
20909: LD_VAR 0 1
20913: PPUSH
20914: CALL_OW 266
20918: PUSH
20919: LD_INT 3
20921: NONEQUAL
20922: PUSH
20923: LD_VAR 0 1
20927: PPUSH
20928: CALL_OW 247
20932: PUSH
20933: LD_INT 1
20935: EQUAL
20936: NOT
20937: AND
20938: OR
20939: IFFALSE 20943
// exit ;
20941: GO 21092
// if GetType ( factory ) = unit_human then
20943: LD_VAR 0 1
20947: PPUSH
20948: CALL_OW 247
20952: PUSH
20953: LD_INT 1
20955: EQUAL
20956: IFFALSE 20973
// factory := IsInUnit ( factory ) ;
20958: LD_ADDR_VAR 0 1
20962: PUSH
20963: LD_VAR 0 1
20967: PPUSH
20968: CALL_OW 310
20972: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20973: LD_VAR 0 1
20977: PPUSH
20978: CALL_OW 266
20982: PUSH
20983: LD_INT 3
20985: NONEQUAL
20986: IFFALSE 20990
// exit ;
20988: GO 21092
// if HexInfo ( x , y ) = factory then
20990: LD_VAR 0 2
20994: PPUSH
20995: LD_VAR 0 3
20999: PPUSH
21000: CALL_OW 428
21004: PUSH
21005: LD_VAR 0 1
21009: EQUAL
21010: IFFALSE 21037
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
21012: LD_ADDR_EXP 82
21016: PUSH
21017: LD_EXP 82
21021: PPUSH
21022: LD_VAR 0 1
21026: PPUSH
21027: LD_INT 0
21029: PPUSH
21030: CALL_OW 1
21034: ST_TO_ADDR
21035: GO 21088
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
21037: LD_ADDR_EXP 82
21041: PUSH
21042: LD_EXP 82
21046: PPUSH
21047: LD_VAR 0 1
21051: PPUSH
21052: LD_VAR 0 1
21056: PPUSH
21057: CALL_OW 255
21061: PUSH
21062: LD_VAR 0 1
21066: PUSH
21067: LD_VAR 0 2
21071: PUSH
21072: LD_VAR 0 3
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: PPUSH
21083: CALL_OW 1
21087: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21088: CALL 21097 0 0
// end ;
21092: LD_VAR 0 4
21096: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
21097: LD_INT 0
21099: PPUSH
21100: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21101: LD_STRING resetFactoryWaypoint();
21103: PPUSH
21104: CALL_OW 559
// if factoryWaypoints then
21108: LD_EXP 82
21112: IFFALSE 21235
// begin for i := 1 to factoryWaypoints do
21114: LD_ADDR_VAR 0 2
21118: PUSH
21119: DOUBLE
21120: LD_INT 1
21122: DEC
21123: ST_TO_ADDR
21124: LD_EXP 82
21128: PUSH
21129: FOR_TO
21130: IFFALSE 21233
// if factoryWaypoints [ i ] then
21132: LD_EXP 82
21136: PUSH
21137: LD_VAR 0 2
21141: ARRAY
21142: IFFALSE 21231
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
21144: LD_STRING setFactoryWaypointXY(
21146: PUSH
21147: LD_EXP 82
21151: PUSH
21152: LD_VAR 0 2
21156: ARRAY
21157: PUSH
21158: LD_INT 1
21160: ARRAY
21161: STR
21162: PUSH
21163: LD_STRING ,
21165: STR
21166: PUSH
21167: LD_EXP 82
21171: PUSH
21172: LD_VAR 0 2
21176: ARRAY
21177: PUSH
21178: LD_INT 2
21180: ARRAY
21181: STR
21182: PUSH
21183: LD_STRING ,
21185: STR
21186: PUSH
21187: LD_EXP 82
21191: PUSH
21192: LD_VAR 0 2
21196: ARRAY
21197: PUSH
21198: LD_INT 3
21200: ARRAY
21201: STR
21202: PUSH
21203: LD_STRING ,
21205: STR
21206: PUSH
21207: LD_EXP 82
21211: PUSH
21212: LD_VAR 0 2
21216: ARRAY
21217: PUSH
21218: LD_INT 4
21220: ARRAY
21221: STR
21222: PUSH
21223: LD_STRING )
21225: STR
21226: PPUSH
21227: CALL_OW 559
21231: GO 21129
21233: POP
21234: POP
// end ; end ;
21235: LD_VAR 0 1
21239: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21240: LD_INT 0
21242: PPUSH
21243: PPUSH
21244: PPUSH
21245: PPUSH
21246: PPUSH
21247: PPUSH
21248: PPUSH
21249: PPUSH
21250: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21251: LD_VAR 0 1
21255: NOT
21256: PUSH
21257: LD_VAR 0 2
21261: PPUSH
21262: LD_VAR 0 3
21266: PPUSH
21267: CALL_OW 488
21271: NOT
21272: OR
21273: PUSH
21274: LD_VAR 0 4
21278: NOT
21279: OR
21280: IFFALSE 21284
// exit ;
21282: GO 21624
// list := [ ] ;
21284: LD_ADDR_VAR 0 13
21288: PUSH
21289: EMPTY
21290: ST_TO_ADDR
// if x - r < 0 then
21291: LD_VAR 0 2
21295: PUSH
21296: LD_VAR 0 4
21300: MINUS
21301: PUSH
21302: LD_INT 0
21304: LESS
21305: IFFALSE 21317
// min_x := 0 else
21307: LD_ADDR_VAR 0 7
21311: PUSH
21312: LD_INT 0
21314: ST_TO_ADDR
21315: GO 21333
// min_x := x - r ;
21317: LD_ADDR_VAR 0 7
21321: PUSH
21322: LD_VAR 0 2
21326: PUSH
21327: LD_VAR 0 4
21331: MINUS
21332: ST_TO_ADDR
// if y - r < 0 then
21333: LD_VAR 0 3
21337: PUSH
21338: LD_VAR 0 4
21342: MINUS
21343: PUSH
21344: LD_INT 0
21346: LESS
21347: IFFALSE 21359
// min_y := 0 else
21349: LD_ADDR_VAR 0 8
21353: PUSH
21354: LD_INT 0
21356: ST_TO_ADDR
21357: GO 21375
// min_y := y - r ;
21359: LD_ADDR_VAR 0 8
21363: PUSH
21364: LD_VAR 0 3
21368: PUSH
21369: LD_VAR 0 4
21373: MINUS
21374: ST_TO_ADDR
// max_x := x + r ;
21375: LD_ADDR_VAR 0 9
21379: PUSH
21380: LD_VAR 0 2
21384: PUSH
21385: LD_VAR 0 4
21389: PLUS
21390: ST_TO_ADDR
// max_y := y + r ;
21391: LD_ADDR_VAR 0 10
21395: PUSH
21396: LD_VAR 0 3
21400: PUSH
21401: LD_VAR 0 4
21405: PLUS
21406: ST_TO_ADDR
// for _x = min_x to max_x do
21407: LD_ADDR_VAR 0 11
21411: PUSH
21412: DOUBLE
21413: LD_VAR 0 7
21417: DEC
21418: ST_TO_ADDR
21419: LD_VAR 0 9
21423: PUSH
21424: FOR_TO
21425: IFFALSE 21542
// for _y = min_y to max_y do
21427: LD_ADDR_VAR 0 12
21431: PUSH
21432: DOUBLE
21433: LD_VAR 0 8
21437: DEC
21438: ST_TO_ADDR
21439: LD_VAR 0 10
21443: PUSH
21444: FOR_TO
21445: IFFALSE 21538
// begin if not ValidHex ( _x , _y ) then
21447: LD_VAR 0 11
21451: PPUSH
21452: LD_VAR 0 12
21456: PPUSH
21457: CALL_OW 488
21461: NOT
21462: IFFALSE 21466
// continue ;
21464: GO 21444
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21466: LD_VAR 0 11
21470: PPUSH
21471: LD_VAR 0 12
21475: PPUSH
21476: CALL_OW 351
21480: PUSH
21481: LD_VAR 0 11
21485: PPUSH
21486: LD_VAR 0 12
21490: PPUSH
21491: CALL_OW 554
21495: AND
21496: IFFALSE 21536
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21498: LD_ADDR_VAR 0 13
21502: PUSH
21503: LD_VAR 0 13
21507: PPUSH
21508: LD_VAR 0 13
21512: PUSH
21513: LD_INT 1
21515: PLUS
21516: PPUSH
21517: LD_VAR 0 11
21521: PUSH
21522: LD_VAR 0 12
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PPUSH
21531: CALL_OW 2
21535: ST_TO_ADDR
// end ;
21536: GO 21444
21538: POP
21539: POP
21540: GO 21424
21542: POP
21543: POP
// if not list then
21544: LD_VAR 0 13
21548: NOT
21549: IFFALSE 21553
// exit ;
21551: GO 21624
// for i in list do
21553: LD_ADDR_VAR 0 6
21557: PUSH
21558: LD_VAR 0 13
21562: PUSH
21563: FOR_IN
21564: IFFALSE 21622
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21566: LD_VAR 0 1
21570: PPUSH
21571: LD_STRING M
21573: PUSH
21574: LD_VAR 0 6
21578: PUSH
21579: LD_INT 1
21581: ARRAY
21582: PUSH
21583: LD_VAR 0 6
21587: PUSH
21588: LD_INT 2
21590: ARRAY
21591: PUSH
21592: LD_INT 0
21594: PUSH
21595: LD_INT 0
21597: PUSH
21598: LD_INT 0
21600: PUSH
21601: LD_INT 0
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: PUSH
21613: EMPTY
21614: LIST
21615: PPUSH
21616: CALL_OW 447
21620: GO 21563
21622: POP
21623: POP
// end ;
21624: LD_VAR 0 5
21628: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21629: LD_EXP 83
21633: NOT
21634: IFFALSE 21684
21636: GO 21638
21638: DISABLE
// begin initHack := true ;
21639: LD_ADDR_EXP 83
21643: PUSH
21644: LD_INT 1
21646: ST_TO_ADDR
// hackTanks := [ ] ;
21647: LD_ADDR_EXP 84
21651: PUSH
21652: EMPTY
21653: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21654: LD_ADDR_EXP 85
21658: PUSH
21659: EMPTY
21660: ST_TO_ADDR
// hackLimit := 3 ;
21661: LD_ADDR_EXP 86
21665: PUSH
21666: LD_INT 3
21668: ST_TO_ADDR
// hackDist := 12 ;
21669: LD_ADDR_EXP 87
21673: PUSH
21674: LD_INT 12
21676: ST_TO_ADDR
// hackCounter := [ ] ;
21677: LD_ADDR_EXP 88
21681: PUSH
21682: EMPTY
21683: ST_TO_ADDR
// end ;
21684: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21685: LD_EXP 83
21689: PUSH
21690: LD_INT 34
21692: PUSH
21693: LD_EXP 95
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PPUSH
21702: CALL_OW 69
21706: AND
21707: IFFALSE 21962
21709: GO 21711
21711: DISABLE
21712: LD_INT 0
21714: PPUSH
21715: PPUSH
// begin enable ;
21716: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21717: LD_ADDR_VAR 0 1
21721: PUSH
21722: LD_INT 34
21724: PUSH
21725: LD_EXP 95
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PPUSH
21734: CALL_OW 69
21738: PUSH
21739: FOR_IN
21740: IFFALSE 21960
// begin if not i in hackTanks then
21742: LD_VAR 0 1
21746: PUSH
21747: LD_EXP 84
21751: IN
21752: NOT
21753: IFFALSE 21836
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21755: LD_ADDR_EXP 84
21759: PUSH
21760: LD_EXP 84
21764: PPUSH
21765: LD_EXP 84
21769: PUSH
21770: LD_INT 1
21772: PLUS
21773: PPUSH
21774: LD_VAR 0 1
21778: PPUSH
21779: CALL_OW 1
21783: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21784: LD_ADDR_EXP 85
21788: PUSH
21789: LD_EXP 85
21793: PPUSH
21794: LD_EXP 85
21798: PUSH
21799: LD_INT 1
21801: PLUS
21802: PPUSH
21803: EMPTY
21804: PPUSH
21805: CALL_OW 1
21809: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21810: LD_ADDR_EXP 88
21814: PUSH
21815: LD_EXP 88
21819: PPUSH
21820: LD_EXP 88
21824: PUSH
21825: LD_INT 1
21827: PLUS
21828: PPUSH
21829: EMPTY
21830: PPUSH
21831: CALL_OW 1
21835: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21836: LD_VAR 0 1
21840: PPUSH
21841: CALL_OW 302
21845: NOT
21846: IFFALSE 21859
// begin HackUnlinkAll ( i ) ;
21848: LD_VAR 0 1
21852: PPUSH
21853: CALL 21965 0 1
// continue ;
21857: GO 21739
// end ; HackCheckCapturedStatus ( i ) ;
21859: LD_VAR 0 1
21863: PPUSH
21864: CALL 22408 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21868: LD_ADDR_VAR 0 2
21872: PUSH
21873: LD_INT 81
21875: PUSH
21876: LD_VAR 0 1
21880: PPUSH
21881: CALL_OW 255
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 33
21892: PUSH
21893: LD_INT 3
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: LD_INT 91
21902: PUSH
21903: LD_VAR 0 1
21907: PUSH
21908: LD_EXP 87
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: LIST
21917: PUSH
21918: LD_INT 50
21920: PUSH
21921: EMPTY
21922: LIST
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: PPUSH
21930: CALL_OW 69
21934: ST_TO_ADDR
// if not tmp then
21935: LD_VAR 0 2
21939: NOT
21940: IFFALSE 21944
// continue ;
21942: GO 21739
// HackLink ( i , tmp ) ;
21944: LD_VAR 0 1
21948: PPUSH
21949: LD_VAR 0 2
21953: PPUSH
21954: CALL 22101 0 2
// end ;
21958: GO 21739
21960: POP
21961: POP
// end ;
21962: PPOPN 2
21964: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21965: LD_INT 0
21967: PPUSH
21968: PPUSH
21969: PPUSH
// if not hack in hackTanks then
21970: LD_VAR 0 1
21974: PUSH
21975: LD_EXP 84
21979: IN
21980: NOT
21981: IFFALSE 21985
// exit ;
21983: GO 22096
// index := GetElementIndex ( hackTanks , hack ) ;
21985: LD_ADDR_VAR 0 4
21989: PUSH
21990: LD_EXP 84
21994: PPUSH
21995: LD_VAR 0 1
21999: PPUSH
22000: CALL 29746 0 2
22004: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22005: LD_EXP 85
22009: PUSH
22010: LD_VAR 0 4
22014: ARRAY
22015: IFFALSE 22096
// begin for i in hackTanksCaptured [ index ] do
22017: LD_ADDR_VAR 0 3
22021: PUSH
22022: LD_EXP 85
22026: PUSH
22027: LD_VAR 0 4
22031: ARRAY
22032: PUSH
22033: FOR_IN
22034: IFFALSE 22060
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22036: LD_VAR 0 3
22040: PUSH
22041: LD_INT 1
22043: ARRAY
22044: PPUSH
22045: LD_VAR 0 3
22049: PUSH
22050: LD_INT 2
22052: ARRAY
22053: PPUSH
22054: CALL_OW 235
22058: GO 22033
22060: POP
22061: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22062: LD_ADDR_EXP 85
22066: PUSH
22067: LD_EXP 85
22071: PPUSH
22072: LD_VAR 0 4
22076: PPUSH
22077: EMPTY
22078: PPUSH
22079: CALL_OW 1
22083: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22084: LD_VAR 0 1
22088: PPUSH
22089: LD_INT 0
22091: PPUSH
22092: CALL_OW 505
// end ; end ;
22096: LD_VAR 0 2
22100: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22101: LD_INT 0
22103: PPUSH
22104: PPUSH
22105: PPUSH
// if not hack in hackTanks or not vehicles then
22106: LD_VAR 0 1
22110: PUSH
22111: LD_EXP 84
22115: IN
22116: NOT
22117: PUSH
22118: LD_VAR 0 2
22122: NOT
22123: OR
22124: IFFALSE 22128
// exit ;
22126: GO 22403
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22128: LD_ADDR_VAR 0 2
22132: PUSH
22133: LD_VAR 0 1
22137: PPUSH
22138: LD_VAR 0 2
22142: PPUSH
22143: LD_INT 1
22145: PPUSH
22146: LD_INT 1
22148: PPUSH
22149: CALL 30396 0 4
22153: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22154: LD_ADDR_VAR 0 5
22158: PUSH
22159: LD_EXP 84
22163: PPUSH
22164: LD_VAR 0 1
22168: PPUSH
22169: CALL 29746 0 2
22173: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22174: LD_EXP 85
22178: PUSH
22179: LD_VAR 0 5
22183: ARRAY
22184: PUSH
22185: LD_EXP 86
22189: LESS
22190: IFFALSE 22379
// begin for i := 1 to vehicles do
22192: LD_ADDR_VAR 0 4
22196: PUSH
22197: DOUBLE
22198: LD_INT 1
22200: DEC
22201: ST_TO_ADDR
22202: LD_VAR 0 2
22206: PUSH
22207: FOR_TO
22208: IFFALSE 22377
// begin if hackTanksCaptured [ index ] = hackLimit then
22210: LD_EXP 85
22214: PUSH
22215: LD_VAR 0 5
22219: ARRAY
22220: PUSH
22221: LD_EXP 86
22225: EQUAL
22226: IFFALSE 22230
// break ;
22228: GO 22377
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22230: LD_ADDR_EXP 88
22234: PUSH
22235: LD_EXP 88
22239: PPUSH
22240: LD_VAR 0 5
22244: PPUSH
22245: LD_EXP 88
22249: PUSH
22250: LD_VAR 0 5
22254: ARRAY
22255: PUSH
22256: LD_INT 1
22258: PLUS
22259: PPUSH
22260: CALL_OW 1
22264: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22265: LD_ADDR_EXP 85
22269: PUSH
22270: LD_EXP 85
22274: PPUSH
22275: LD_VAR 0 5
22279: PUSH
22280: LD_EXP 85
22284: PUSH
22285: LD_VAR 0 5
22289: ARRAY
22290: PUSH
22291: LD_INT 1
22293: PLUS
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PPUSH
22299: LD_VAR 0 2
22303: PUSH
22304: LD_VAR 0 4
22308: ARRAY
22309: PUSH
22310: LD_VAR 0 2
22314: PUSH
22315: LD_VAR 0 4
22319: ARRAY
22320: PPUSH
22321: CALL_OW 255
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PPUSH
22330: CALL 29961 0 3
22334: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22335: LD_VAR 0 2
22339: PUSH
22340: LD_VAR 0 4
22344: ARRAY
22345: PPUSH
22346: LD_VAR 0 1
22350: PPUSH
22351: CALL_OW 255
22355: PPUSH
22356: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22360: LD_VAR 0 2
22364: PUSH
22365: LD_VAR 0 4
22369: ARRAY
22370: PPUSH
22371: CALL_OW 141
// end ;
22375: GO 22207
22377: POP
22378: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22379: LD_VAR 0 1
22383: PPUSH
22384: LD_EXP 85
22388: PUSH
22389: LD_VAR 0 5
22393: ARRAY
22394: PUSH
22395: LD_INT 0
22397: PLUS
22398: PPUSH
22399: CALL_OW 505
// end ;
22403: LD_VAR 0 3
22407: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22408: LD_INT 0
22410: PPUSH
22411: PPUSH
22412: PPUSH
22413: PPUSH
// if not hack in hackTanks then
22414: LD_VAR 0 1
22418: PUSH
22419: LD_EXP 84
22423: IN
22424: NOT
22425: IFFALSE 22429
// exit ;
22427: GO 22669
// index := GetElementIndex ( hackTanks , hack ) ;
22429: LD_ADDR_VAR 0 4
22433: PUSH
22434: LD_EXP 84
22438: PPUSH
22439: LD_VAR 0 1
22443: PPUSH
22444: CALL 29746 0 2
22448: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22449: LD_ADDR_VAR 0 3
22453: PUSH
22454: DOUBLE
22455: LD_EXP 85
22459: PUSH
22460: LD_VAR 0 4
22464: ARRAY
22465: INC
22466: ST_TO_ADDR
22467: LD_INT 1
22469: PUSH
22470: FOR_DOWNTO
22471: IFFALSE 22643
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22473: LD_ADDR_VAR 0 5
22477: PUSH
22478: LD_EXP 85
22482: PUSH
22483: LD_VAR 0 4
22487: ARRAY
22488: PUSH
22489: LD_VAR 0 3
22493: ARRAY
22494: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22495: LD_VAR 0 5
22499: PUSH
22500: LD_INT 1
22502: ARRAY
22503: PPUSH
22504: CALL_OW 302
22508: NOT
22509: PUSH
22510: LD_VAR 0 5
22514: PUSH
22515: LD_INT 1
22517: ARRAY
22518: PPUSH
22519: CALL_OW 255
22523: PUSH
22524: LD_VAR 0 1
22528: PPUSH
22529: CALL_OW 255
22533: NONEQUAL
22534: OR
22535: IFFALSE 22641
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22537: LD_VAR 0 5
22541: PUSH
22542: LD_INT 1
22544: ARRAY
22545: PPUSH
22546: CALL_OW 305
22550: PUSH
22551: LD_VAR 0 5
22555: PUSH
22556: LD_INT 1
22558: ARRAY
22559: PPUSH
22560: CALL_OW 255
22564: PUSH
22565: LD_VAR 0 1
22569: PPUSH
22570: CALL_OW 255
22574: EQUAL
22575: AND
22576: IFFALSE 22600
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22578: LD_VAR 0 5
22582: PUSH
22583: LD_INT 1
22585: ARRAY
22586: PPUSH
22587: LD_VAR 0 5
22591: PUSH
22592: LD_INT 2
22594: ARRAY
22595: PPUSH
22596: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22600: LD_ADDR_EXP 85
22604: PUSH
22605: LD_EXP 85
22609: PPUSH
22610: LD_VAR 0 4
22614: PPUSH
22615: LD_EXP 85
22619: PUSH
22620: LD_VAR 0 4
22624: ARRAY
22625: PPUSH
22626: LD_VAR 0 3
22630: PPUSH
22631: CALL_OW 3
22635: PPUSH
22636: CALL_OW 1
22640: ST_TO_ADDR
// end ; end ;
22641: GO 22470
22643: POP
22644: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22645: LD_VAR 0 1
22649: PPUSH
22650: LD_EXP 85
22654: PUSH
22655: LD_VAR 0 4
22659: ARRAY
22660: PUSH
22661: LD_INT 0
22663: PLUS
22664: PPUSH
22665: CALL_OW 505
// end ;
22669: LD_VAR 0 2
22673: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22674: LD_INT 0
22676: PPUSH
22677: PPUSH
22678: PPUSH
22679: PPUSH
// if not hack in hackTanks then
22680: LD_VAR 0 1
22684: PUSH
22685: LD_EXP 84
22689: IN
22690: NOT
22691: IFFALSE 22695
// exit ;
22693: GO 22780
// index := GetElementIndex ( hackTanks , hack ) ;
22695: LD_ADDR_VAR 0 5
22699: PUSH
22700: LD_EXP 84
22704: PPUSH
22705: LD_VAR 0 1
22709: PPUSH
22710: CALL 29746 0 2
22714: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22715: LD_ADDR_VAR 0 4
22719: PUSH
22720: DOUBLE
22721: LD_INT 1
22723: DEC
22724: ST_TO_ADDR
22725: LD_EXP 85
22729: PUSH
22730: LD_VAR 0 5
22734: ARRAY
22735: PUSH
22736: FOR_TO
22737: IFFALSE 22778
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22739: LD_EXP 85
22743: PUSH
22744: LD_VAR 0 5
22748: ARRAY
22749: PUSH
22750: LD_VAR 0 4
22754: ARRAY
22755: PUSH
22756: LD_INT 1
22758: ARRAY
22759: PUSH
22760: LD_VAR 0 2
22764: EQUAL
22765: IFFALSE 22776
// KillUnit ( vehicle ) ;
22767: LD_VAR 0 2
22771: PPUSH
22772: CALL_OW 66
22776: GO 22736
22778: POP
22779: POP
// end ;
22780: LD_VAR 0 3
22784: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22785: LD_EXP 89
22789: NOT
22790: IFFALSE 22825
22792: GO 22794
22794: DISABLE
// begin initMiner := true ;
22795: LD_ADDR_EXP 89
22799: PUSH
22800: LD_INT 1
22802: ST_TO_ADDR
// minersList := [ ] ;
22803: LD_ADDR_EXP 90
22807: PUSH
22808: EMPTY
22809: ST_TO_ADDR
// minerMinesList := [ ] ;
22810: LD_ADDR_EXP 91
22814: PUSH
22815: EMPTY
22816: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22817: LD_ADDR_EXP 92
22821: PUSH
22822: LD_INT 5
22824: ST_TO_ADDR
// end ;
22825: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22826: LD_EXP 89
22830: PUSH
22831: LD_INT 34
22833: PUSH
22834: LD_EXP 100
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PPUSH
22843: CALL_OW 69
22847: AND
22848: IFFALSE 23311
22850: GO 22852
22852: DISABLE
22853: LD_INT 0
22855: PPUSH
22856: PPUSH
22857: PPUSH
22858: PPUSH
// begin enable ;
22859: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22860: LD_ADDR_VAR 0 1
22864: PUSH
22865: LD_INT 34
22867: PUSH
22868: LD_EXP 100
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: PPUSH
22877: CALL_OW 69
22881: PUSH
22882: FOR_IN
22883: IFFALSE 22955
// begin if not i in minersList then
22885: LD_VAR 0 1
22889: PUSH
22890: LD_EXP 90
22894: IN
22895: NOT
22896: IFFALSE 22953
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22898: LD_ADDR_EXP 90
22902: PUSH
22903: LD_EXP 90
22907: PPUSH
22908: LD_EXP 90
22912: PUSH
22913: LD_INT 1
22915: PLUS
22916: PPUSH
22917: LD_VAR 0 1
22921: PPUSH
22922: CALL_OW 1
22926: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22927: LD_ADDR_EXP 91
22931: PUSH
22932: LD_EXP 91
22936: PPUSH
22937: LD_EXP 91
22941: PUSH
22942: LD_INT 1
22944: PLUS
22945: PPUSH
22946: EMPTY
22947: PPUSH
22948: CALL_OW 1
22952: ST_TO_ADDR
// end end ;
22953: GO 22882
22955: POP
22956: POP
// for i := minerMinesList downto 1 do
22957: LD_ADDR_VAR 0 1
22961: PUSH
22962: DOUBLE
22963: LD_EXP 91
22967: INC
22968: ST_TO_ADDR
22969: LD_INT 1
22971: PUSH
22972: FOR_DOWNTO
22973: IFFALSE 23309
// begin if IsLive ( minersList [ i ] ) then
22975: LD_EXP 90
22979: PUSH
22980: LD_VAR 0 1
22984: ARRAY
22985: PPUSH
22986: CALL_OW 300
22990: IFFALSE 23018
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22992: LD_EXP 90
22996: PUSH
22997: LD_VAR 0 1
23001: ARRAY
23002: PPUSH
23003: LD_EXP 91
23007: PUSH
23008: LD_VAR 0 1
23012: ARRAY
23013: PPUSH
23014: CALL_OW 505
// if not minerMinesList [ i ] then
23018: LD_EXP 91
23022: PUSH
23023: LD_VAR 0 1
23027: ARRAY
23028: NOT
23029: IFFALSE 23033
// continue ;
23031: GO 22972
// for j := minerMinesList [ i ] downto 1 do
23033: LD_ADDR_VAR 0 2
23037: PUSH
23038: DOUBLE
23039: LD_EXP 91
23043: PUSH
23044: LD_VAR 0 1
23048: ARRAY
23049: INC
23050: ST_TO_ADDR
23051: LD_INT 1
23053: PUSH
23054: FOR_DOWNTO
23055: IFFALSE 23305
// begin side := GetSide ( minersList [ i ] ) ;
23057: LD_ADDR_VAR 0 3
23061: PUSH
23062: LD_EXP 90
23066: PUSH
23067: LD_VAR 0 1
23071: ARRAY
23072: PPUSH
23073: CALL_OW 255
23077: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23078: LD_ADDR_VAR 0 4
23082: PUSH
23083: LD_EXP 91
23087: PUSH
23088: LD_VAR 0 1
23092: ARRAY
23093: PUSH
23094: LD_VAR 0 2
23098: ARRAY
23099: PUSH
23100: LD_INT 1
23102: ARRAY
23103: PPUSH
23104: LD_EXP 91
23108: PUSH
23109: LD_VAR 0 1
23113: ARRAY
23114: PUSH
23115: LD_VAR 0 2
23119: ARRAY
23120: PUSH
23121: LD_INT 2
23123: ARRAY
23124: PPUSH
23125: CALL_OW 428
23129: ST_TO_ADDR
// if not tmp then
23130: LD_VAR 0 4
23134: NOT
23135: IFFALSE 23139
// continue ;
23137: GO 23054
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23139: LD_VAR 0 4
23143: PUSH
23144: LD_INT 81
23146: PUSH
23147: LD_VAR 0 3
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: PPUSH
23156: CALL_OW 69
23160: IN
23161: PUSH
23162: LD_EXP 91
23166: PUSH
23167: LD_VAR 0 1
23171: ARRAY
23172: PUSH
23173: LD_VAR 0 2
23177: ARRAY
23178: PUSH
23179: LD_INT 1
23181: ARRAY
23182: PPUSH
23183: LD_EXP 91
23187: PUSH
23188: LD_VAR 0 1
23192: ARRAY
23193: PUSH
23194: LD_VAR 0 2
23198: ARRAY
23199: PUSH
23200: LD_INT 2
23202: ARRAY
23203: PPUSH
23204: CALL_OW 458
23208: AND
23209: IFFALSE 23303
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23211: LD_EXP 91
23215: PUSH
23216: LD_VAR 0 1
23220: ARRAY
23221: PUSH
23222: LD_VAR 0 2
23226: ARRAY
23227: PUSH
23228: LD_INT 1
23230: ARRAY
23231: PPUSH
23232: LD_EXP 91
23236: PUSH
23237: LD_VAR 0 1
23241: ARRAY
23242: PUSH
23243: LD_VAR 0 2
23247: ARRAY
23248: PUSH
23249: LD_INT 2
23251: ARRAY
23252: PPUSH
23253: LD_VAR 0 3
23257: PPUSH
23258: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23262: LD_ADDR_EXP 91
23266: PUSH
23267: LD_EXP 91
23271: PPUSH
23272: LD_VAR 0 1
23276: PPUSH
23277: LD_EXP 91
23281: PUSH
23282: LD_VAR 0 1
23286: ARRAY
23287: PPUSH
23288: LD_VAR 0 2
23292: PPUSH
23293: CALL_OW 3
23297: PPUSH
23298: CALL_OW 1
23302: ST_TO_ADDR
// end ; end ;
23303: GO 23054
23305: POP
23306: POP
// end ;
23307: GO 22972
23309: POP
23310: POP
// end ;
23311: PPOPN 4
23313: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23314: LD_INT 0
23316: PPUSH
23317: PPUSH
// result := false ;
23318: LD_ADDR_VAR 0 4
23322: PUSH
23323: LD_INT 0
23325: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23326: LD_VAR 0 1
23330: PPUSH
23331: CALL_OW 264
23335: PUSH
23336: LD_EXP 100
23340: EQUAL
23341: NOT
23342: IFFALSE 23346
// exit ;
23344: GO 23586
// index := GetElementIndex ( minersList , unit ) ;
23346: LD_ADDR_VAR 0 5
23350: PUSH
23351: LD_EXP 90
23355: PPUSH
23356: LD_VAR 0 1
23360: PPUSH
23361: CALL 29746 0 2
23365: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23366: LD_EXP 91
23370: PUSH
23371: LD_VAR 0 5
23375: ARRAY
23376: PUSH
23377: LD_EXP 92
23381: GREATEREQUAL
23382: IFFALSE 23386
// exit ;
23384: GO 23586
// ComMoveXY ( unit , x , y ) ;
23386: LD_VAR 0 1
23390: PPUSH
23391: LD_VAR 0 2
23395: PPUSH
23396: LD_VAR 0 3
23400: PPUSH
23401: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23405: LD_INT 35
23407: PPUSH
23408: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23412: LD_VAR 0 1
23416: PPUSH
23417: LD_VAR 0 2
23421: PPUSH
23422: LD_VAR 0 3
23426: PPUSH
23427: CALL 60465 0 3
23431: NOT
23432: PUSH
23433: LD_VAR 0 1
23437: PPUSH
23438: CALL_OW 314
23442: AND
23443: IFFALSE 23447
// exit ;
23445: GO 23586
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23447: LD_VAR 0 2
23451: PPUSH
23452: LD_VAR 0 3
23456: PPUSH
23457: CALL_OW 428
23461: PUSH
23462: LD_VAR 0 1
23466: EQUAL
23467: PUSH
23468: LD_VAR 0 1
23472: PPUSH
23473: CALL_OW 314
23477: NOT
23478: AND
23479: IFFALSE 23405
// PlaySoundXY ( x , y , PlantMine ) ;
23481: LD_VAR 0 2
23485: PPUSH
23486: LD_VAR 0 3
23490: PPUSH
23491: LD_STRING PlantMine
23493: PPUSH
23494: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23498: LD_VAR 0 2
23502: PPUSH
23503: LD_VAR 0 3
23507: PPUSH
23508: LD_VAR 0 1
23512: PPUSH
23513: CALL_OW 255
23517: PPUSH
23518: LD_INT 0
23520: PPUSH
23521: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23525: LD_ADDR_EXP 91
23529: PUSH
23530: LD_EXP 91
23534: PPUSH
23535: LD_VAR 0 5
23539: PUSH
23540: LD_EXP 91
23544: PUSH
23545: LD_VAR 0 5
23549: ARRAY
23550: PUSH
23551: LD_INT 1
23553: PLUS
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PPUSH
23559: LD_VAR 0 2
23563: PUSH
23564: LD_VAR 0 3
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: PPUSH
23573: CALL 29961 0 3
23577: ST_TO_ADDR
// result := true ;
23578: LD_ADDR_VAR 0 4
23582: PUSH
23583: LD_INT 1
23585: ST_TO_ADDR
// end ;
23586: LD_VAR 0 4
23590: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23591: LD_INT 0
23593: PPUSH
23594: PPUSH
23595: PPUSH
// if not unit in minersList then
23596: LD_VAR 0 1
23600: PUSH
23601: LD_EXP 90
23605: IN
23606: NOT
23607: IFFALSE 23611
// exit ;
23609: GO 24003
// index := GetElementIndex ( minersList , unit ) ;
23611: LD_ADDR_VAR 0 6
23615: PUSH
23616: LD_EXP 90
23620: PPUSH
23621: LD_VAR 0 1
23625: PPUSH
23626: CALL 29746 0 2
23630: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23631: LD_ADDR_VAR 0 5
23635: PUSH
23636: DOUBLE
23637: LD_EXP 91
23641: PUSH
23642: LD_VAR 0 6
23646: ARRAY
23647: INC
23648: ST_TO_ADDR
23649: LD_INT 1
23651: PUSH
23652: FOR_DOWNTO
23653: IFFALSE 23814
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23655: LD_EXP 91
23659: PUSH
23660: LD_VAR 0 6
23664: ARRAY
23665: PUSH
23666: LD_VAR 0 5
23670: ARRAY
23671: PUSH
23672: LD_INT 1
23674: ARRAY
23675: PUSH
23676: LD_VAR 0 2
23680: EQUAL
23681: PUSH
23682: LD_EXP 91
23686: PUSH
23687: LD_VAR 0 6
23691: ARRAY
23692: PUSH
23693: LD_VAR 0 5
23697: ARRAY
23698: PUSH
23699: LD_INT 2
23701: ARRAY
23702: PUSH
23703: LD_VAR 0 3
23707: EQUAL
23708: AND
23709: IFFALSE 23812
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23711: LD_EXP 91
23715: PUSH
23716: LD_VAR 0 6
23720: ARRAY
23721: PUSH
23722: LD_VAR 0 5
23726: ARRAY
23727: PUSH
23728: LD_INT 1
23730: ARRAY
23731: PPUSH
23732: LD_EXP 91
23736: PUSH
23737: LD_VAR 0 6
23741: ARRAY
23742: PUSH
23743: LD_VAR 0 5
23747: ARRAY
23748: PUSH
23749: LD_INT 2
23751: ARRAY
23752: PPUSH
23753: LD_VAR 0 1
23757: PPUSH
23758: CALL_OW 255
23762: PPUSH
23763: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23767: LD_ADDR_EXP 91
23771: PUSH
23772: LD_EXP 91
23776: PPUSH
23777: LD_VAR 0 6
23781: PPUSH
23782: LD_EXP 91
23786: PUSH
23787: LD_VAR 0 6
23791: ARRAY
23792: PPUSH
23793: LD_VAR 0 5
23797: PPUSH
23798: CALL_OW 3
23802: PPUSH
23803: CALL_OW 1
23807: ST_TO_ADDR
// exit ;
23808: POP
23809: POP
23810: GO 24003
// end ; end ;
23812: GO 23652
23814: POP
23815: POP
// for i := minerMinesList [ index ] downto 1 do
23816: LD_ADDR_VAR 0 5
23820: PUSH
23821: DOUBLE
23822: LD_EXP 91
23826: PUSH
23827: LD_VAR 0 6
23831: ARRAY
23832: INC
23833: ST_TO_ADDR
23834: LD_INT 1
23836: PUSH
23837: FOR_DOWNTO
23838: IFFALSE 24001
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23840: LD_EXP 91
23844: PUSH
23845: LD_VAR 0 6
23849: ARRAY
23850: PUSH
23851: LD_VAR 0 5
23855: ARRAY
23856: PUSH
23857: LD_INT 1
23859: ARRAY
23860: PPUSH
23861: LD_EXP 91
23865: PUSH
23866: LD_VAR 0 6
23870: ARRAY
23871: PUSH
23872: LD_VAR 0 5
23876: ARRAY
23877: PUSH
23878: LD_INT 2
23880: ARRAY
23881: PPUSH
23882: LD_VAR 0 2
23886: PPUSH
23887: LD_VAR 0 3
23891: PPUSH
23892: CALL_OW 298
23896: PUSH
23897: LD_INT 6
23899: LESS
23900: IFFALSE 23999
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23902: LD_EXP 91
23906: PUSH
23907: LD_VAR 0 6
23911: ARRAY
23912: PUSH
23913: LD_VAR 0 5
23917: ARRAY
23918: PUSH
23919: LD_INT 1
23921: ARRAY
23922: PPUSH
23923: LD_EXP 91
23927: PUSH
23928: LD_VAR 0 6
23932: ARRAY
23933: PUSH
23934: LD_VAR 0 5
23938: ARRAY
23939: PUSH
23940: LD_INT 2
23942: ARRAY
23943: PPUSH
23944: LD_VAR 0 1
23948: PPUSH
23949: CALL_OW 255
23953: PPUSH
23954: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23958: LD_ADDR_EXP 91
23962: PUSH
23963: LD_EXP 91
23967: PPUSH
23968: LD_VAR 0 6
23972: PPUSH
23973: LD_EXP 91
23977: PUSH
23978: LD_VAR 0 6
23982: ARRAY
23983: PPUSH
23984: LD_VAR 0 5
23988: PPUSH
23989: CALL_OW 3
23993: PPUSH
23994: CALL_OW 1
23998: ST_TO_ADDR
// end ; end ;
23999: GO 23837
24001: POP
24002: POP
// end ;
24003: LD_VAR 0 4
24007: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24008: LD_INT 0
24010: PPUSH
24011: PPUSH
24012: PPUSH
24013: PPUSH
24014: PPUSH
24015: PPUSH
24016: PPUSH
24017: PPUSH
24018: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24019: LD_VAR 0 1
24023: PPUSH
24024: CALL_OW 264
24028: PUSH
24029: LD_EXP 100
24033: EQUAL
24034: NOT
24035: PUSH
24036: LD_VAR 0 1
24040: PUSH
24041: LD_EXP 90
24045: IN
24046: NOT
24047: OR
24048: IFFALSE 24052
// exit ;
24050: GO 24374
// index := GetElementIndex ( minersList , unit ) ;
24052: LD_ADDR_VAR 0 6
24056: PUSH
24057: LD_EXP 90
24061: PPUSH
24062: LD_VAR 0 1
24066: PPUSH
24067: CALL 29746 0 2
24071: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24072: LD_ADDR_VAR 0 8
24076: PUSH
24077: LD_EXP 92
24081: PUSH
24082: LD_EXP 91
24086: PUSH
24087: LD_VAR 0 6
24091: ARRAY
24092: MINUS
24093: ST_TO_ADDR
// if not minesFreeAmount then
24094: LD_VAR 0 8
24098: NOT
24099: IFFALSE 24103
// exit ;
24101: GO 24374
// tmp := [ ] ;
24103: LD_ADDR_VAR 0 7
24107: PUSH
24108: EMPTY
24109: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24110: LD_ADDR_VAR 0 5
24114: PUSH
24115: DOUBLE
24116: LD_INT 1
24118: DEC
24119: ST_TO_ADDR
24120: LD_VAR 0 8
24124: PUSH
24125: FOR_TO
24126: IFFALSE 24321
// begin _d := rand ( 0 , 5 ) ;
24128: LD_ADDR_VAR 0 11
24132: PUSH
24133: LD_INT 0
24135: PPUSH
24136: LD_INT 5
24138: PPUSH
24139: CALL_OW 12
24143: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24144: LD_ADDR_VAR 0 12
24148: PUSH
24149: LD_INT 2
24151: PPUSH
24152: LD_INT 6
24154: PPUSH
24155: CALL_OW 12
24159: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24160: LD_ADDR_VAR 0 9
24164: PUSH
24165: LD_VAR 0 2
24169: PPUSH
24170: LD_VAR 0 11
24174: PPUSH
24175: LD_VAR 0 12
24179: PPUSH
24180: CALL_OW 272
24184: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24185: LD_ADDR_VAR 0 10
24189: PUSH
24190: LD_VAR 0 3
24194: PPUSH
24195: LD_VAR 0 11
24199: PPUSH
24200: LD_VAR 0 12
24204: PPUSH
24205: CALL_OW 273
24209: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24210: LD_VAR 0 9
24214: PPUSH
24215: LD_VAR 0 10
24219: PPUSH
24220: CALL_OW 488
24224: PUSH
24225: LD_VAR 0 9
24229: PUSH
24230: LD_VAR 0 10
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: LD_VAR 0 7
24243: IN
24244: NOT
24245: AND
24246: PUSH
24247: LD_VAR 0 9
24251: PPUSH
24252: LD_VAR 0 10
24256: PPUSH
24257: CALL_OW 458
24261: NOT
24262: AND
24263: IFFALSE 24305
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24265: LD_ADDR_VAR 0 7
24269: PUSH
24270: LD_VAR 0 7
24274: PPUSH
24275: LD_VAR 0 7
24279: PUSH
24280: LD_INT 1
24282: PLUS
24283: PPUSH
24284: LD_VAR 0 9
24288: PUSH
24289: LD_VAR 0 10
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PPUSH
24298: CALL_OW 1
24302: ST_TO_ADDR
24303: GO 24319
// i := i - 1 ;
24305: LD_ADDR_VAR 0 5
24309: PUSH
24310: LD_VAR 0 5
24314: PUSH
24315: LD_INT 1
24317: MINUS
24318: ST_TO_ADDR
// end ;
24319: GO 24125
24321: POP
24322: POP
// for i in tmp do
24323: LD_ADDR_VAR 0 5
24327: PUSH
24328: LD_VAR 0 7
24332: PUSH
24333: FOR_IN
24334: IFFALSE 24372
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24336: LD_VAR 0 1
24340: PPUSH
24341: LD_VAR 0 5
24345: PUSH
24346: LD_INT 1
24348: ARRAY
24349: PPUSH
24350: LD_VAR 0 5
24354: PUSH
24355: LD_INT 2
24357: ARRAY
24358: PPUSH
24359: CALL 23314 0 3
24363: NOT
24364: IFFALSE 24370
// exit ;
24366: POP
24367: POP
24368: GO 24374
24370: GO 24333
24372: POP
24373: POP
// end ;
24374: LD_VAR 0 4
24378: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24379: LD_INT 0
24381: PPUSH
24382: PPUSH
24383: PPUSH
24384: PPUSH
24385: PPUSH
24386: PPUSH
24387: PPUSH
// if not GetClass ( unit ) = class_sniper then
24388: LD_VAR 0 1
24392: PPUSH
24393: CALL_OW 257
24397: PUSH
24398: LD_INT 5
24400: EQUAL
24401: NOT
24402: IFFALSE 24406
// exit ;
24404: GO 24794
// dist := 8 ;
24406: LD_ADDR_VAR 0 5
24410: PUSH
24411: LD_INT 8
24413: ST_TO_ADDR
// viewRange := 12 ;
24414: LD_ADDR_VAR 0 7
24418: PUSH
24419: LD_INT 12
24421: ST_TO_ADDR
// side := GetSide ( unit ) ;
24422: LD_ADDR_VAR 0 6
24426: PUSH
24427: LD_VAR 0 1
24431: PPUSH
24432: CALL_OW 255
24436: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24437: LD_INT 61
24439: PPUSH
24440: LD_VAR 0 6
24444: PPUSH
24445: CALL_OW 321
24449: PUSH
24450: LD_INT 2
24452: EQUAL
24453: IFFALSE 24463
// viewRange := 16 ;
24455: LD_ADDR_VAR 0 7
24459: PUSH
24460: LD_INT 16
24462: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24463: LD_VAR 0 1
24467: PPUSH
24468: LD_VAR 0 2
24472: PPUSH
24473: LD_VAR 0 3
24477: PPUSH
24478: CALL_OW 297
24482: PUSH
24483: LD_VAR 0 5
24487: GREATER
24488: IFFALSE 24567
// begin ComMoveXY ( unit , x , y ) ;
24490: LD_VAR 0 1
24494: PPUSH
24495: LD_VAR 0 2
24499: PPUSH
24500: LD_VAR 0 3
24504: PPUSH
24505: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24509: LD_INT 35
24511: PPUSH
24512: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24516: LD_VAR 0 1
24520: PPUSH
24521: LD_VAR 0 2
24525: PPUSH
24526: LD_VAR 0 3
24530: PPUSH
24531: CALL 60465 0 3
24535: NOT
24536: IFFALSE 24540
// exit ;
24538: GO 24794
// until GetDistUnitXY ( unit , x , y ) < dist ;
24540: LD_VAR 0 1
24544: PPUSH
24545: LD_VAR 0 2
24549: PPUSH
24550: LD_VAR 0 3
24554: PPUSH
24555: CALL_OW 297
24559: PUSH
24560: LD_VAR 0 5
24564: LESS
24565: IFFALSE 24509
// end ; ComTurnXY ( unit , x , y ) ;
24567: LD_VAR 0 1
24571: PPUSH
24572: LD_VAR 0 2
24576: PPUSH
24577: LD_VAR 0 3
24581: PPUSH
24582: CALL_OW 118
// wait ( 5 ) ;
24586: LD_INT 5
24588: PPUSH
24589: CALL_OW 67
// _d := GetDir ( unit ) ;
24593: LD_ADDR_VAR 0 10
24597: PUSH
24598: LD_VAR 0 1
24602: PPUSH
24603: CALL_OW 254
24607: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24608: LD_ADDR_VAR 0 8
24612: PUSH
24613: LD_VAR 0 1
24617: PPUSH
24618: CALL_OW 250
24622: PPUSH
24623: LD_VAR 0 10
24627: PPUSH
24628: LD_VAR 0 5
24632: PPUSH
24633: CALL_OW 272
24637: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24638: LD_ADDR_VAR 0 9
24642: PUSH
24643: LD_VAR 0 1
24647: PPUSH
24648: CALL_OW 251
24652: PPUSH
24653: LD_VAR 0 10
24657: PPUSH
24658: LD_VAR 0 5
24662: PPUSH
24663: CALL_OW 273
24667: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24668: LD_VAR 0 8
24672: PPUSH
24673: LD_VAR 0 9
24677: PPUSH
24678: CALL_OW 488
24682: NOT
24683: IFFALSE 24687
// exit ;
24685: GO 24794
// ComAnimCustom ( unit , 1 ) ;
24687: LD_VAR 0 1
24691: PPUSH
24692: LD_INT 1
24694: PPUSH
24695: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24699: LD_VAR 0 8
24703: PPUSH
24704: LD_VAR 0 9
24708: PPUSH
24709: LD_VAR 0 6
24713: PPUSH
24714: LD_VAR 0 7
24718: PPUSH
24719: CALL_OW 330
// repeat wait ( 1 ) ;
24723: LD_INT 1
24725: PPUSH
24726: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24730: LD_VAR 0 1
24734: PPUSH
24735: CALL_OW 316
24739: PUSH
24740: LD_VAR 0 1
24744: PPUSH
24745: CALL_OW 314
24749: OR
24750: PUSH
24751: LD_VAR 0 1
24755: PPUSH
24756: CALL_OW 302
24760: NOT
24761: OR
24762: PUSH
24763: LD_VAR 0 1
24767: PPUSH
24768: CALL_OW 301
24772: OR
24773: IFFALSE 24723
// RemoveSeeing ( _x , _y , side ) ;
24775: LD_VAR 0 8
24779: PPUSH
24780: LD_VAR 0 9
24784: PPUSH
24785: LD_VAR 0 6
24789: PPUSH
24790: CALL_OW 331
// end ; end_of_file
24794: LD_VAR 0 4
24798: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
24799: LD_INT 0
24801: PPUSH
// ar_miner := 81 ;
24802: LD_ADDR_EXP 100
24806: PUSH
24807: LD_INT 81
24809: ST_TO_ADDR
// ar_crane := 88 ;
24810: LD_ADDR_EXP 99
24814: PUSH
24815: LD_INT 88
24817: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24818: LD_ADDR_EXP 94
24822: PUSH
24823: LD_INT 89
24825: ST_TO_ADDR
// us_hack := 99 ;
24826: LD_ADDR_EXP 95
24830: PUSH
24831: LD_INT 99
24833: ST_TO_ADDR
// us_artillery := 97 ;
24834: LD_ADDR_EXP 96
24838: PUSH
24839: LD_INT 97
24841: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24842: LD_ADDR_EXP 97
24846: PUSH
24847: LD_INT 91
24849: ST_TO_ADDR
// ar_mortar := 92 ;
24850: LD_ADDR_EXP 98
24854: PUSH
24855: LD_INT 92
24857: ST_TO_ADDR
// ru_flamethrower := 93 ;
24858: LD_ADDR_EXP 101
24862: PUSH
24863: LD_INT 93
24865: ST_TO_ADDR
// ru_radar := 98 ;
24866: LD_ADDR_EXP 93
24870: PUSH
24871: LD_INT 98
24873: ST_TO_ADDR
// tech_Artillery := 80 ;
24874: LD_ADDR_EXP 102
24878: PUSH
24879: LD_INT 80
24881: ST_TO_ADDR
// tech_RadMat := 81 ;
24882: LD_ADDR_EXP 103
24886: PUSH
24887: LD_INT 81
24889: ST_TO_ADDR
// tech_BasicTools := 82 ;
24890: LD_ADDR_EXP 104
24894: PUSH
24895: LD_INT 82
24897: ST_TO_ADDR
// tech_Cargo := 83 ;
24898: LD_ADDR_EXP 105
24902: PUSH
24903: LD_INT 83
24905: ST_TO_ADDR
// tech_Track := 84 ;
24906: LD_ADDR_EXP 106
24910: PUSH
24911: LD_INT 84
24913: ST_TO_ADDR
// tech_Crane := 85 ;
24914: LD_ADDR_EXP 107
24918: PUSH
24919: LD_INT 85
24921: ST_TO_ADDR
// tech_Bulldozer := 86 ;
24922: LD_ADDR_EXP 108
24926: PUSH
24927: LD_INT 86
24929: ST_TO_ADDR
// tech_Hovercraft := 87 ;
24930: LD_ADDR_EXP 109
24934: PUSH
24935: LD_INT 87
24937: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
24938: LD_ADDR_EXP 110
24942: PUSH
24943: LD_INT 88
24945: ST_TO_ADDR
// class_mastodont := 31 ;
24946: LD_ADDR_EXP 111
24950: PUSH
24951: LD_INT 31
24953: ST_TO_ADDR
// class_horse := 21 ;
24954: LD_ADDR_EXP 112
24958: PUSH
24959: LD_INT 21
24961: ST_TO_ADDR
// end ;
24962: LD_VAR 0 1
24966: RET
// every 1 do
24967: GO 24969
24969: DISABLE
// InitGlobalVariables ; end_of_file
24970: CALL 24799 0 0
24974: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24975: LD_INT 0
24977: PPUSH
24978: PPUSH
// if exist_mode then
24979: LD_VAR 0 2
24983: IFFALSE 25008
// unit := CreateCharacter ( prefix & ident ) else
24985: LD_ADDR_VAR 0 5
24989: PUSH
24990: LD_VAR 0 3
24994: PUSH
24995: LD_VAR 0 1
24999: STR
25000: PPUSH
25001: CALL_OW 34
25005: ST_TO_ADDR
25006: GO 25023
// unit := NewCharacter ( ident ) ;
25008: LD_ADDR_VAR 0 5
25012: PUSH
25013: LD_VAR 0 1
25017: PPUSH
25018: CALL_OW 25
25022: ST_TO_ADDR
// result := unit ;
25023: LD_ADDR_VAR 0 4
25027: PUSH
25028: LD_VAR 0 5
25032: ST_TO_ADDR
// end ;
25033: LD_VAR 0 4
25037: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25038: LD_INT 0
25040: PPUSH
25041: PPUSH
// if not side or not nation then
25042: LD_VAR 0 1
25046: NOT
25047: PUSH
25048: LD_VAR 0 2
25052: NOT
25053: OR
25054: IFFALSE 25058
// exit ;
25056: GO 25826
// case nation of nation_american :
25058: LD_VAR 0 2
25062: PUSH
25063: LD_INT 1
25065: DOUBLE
25066: EQUAL
25067: IFTRUE 25071
25069: GO 25285
25071: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25072: LD_ADDR_VAR 0 4
25076: PUSH
25077: LD_INT 35
25079: PUSH
25080: LD_INT 45
25082: PUSH
25083: LD_INT 46
25085: PUSH
25086: LD_INT 47
25088: PUSH
25089: LD_INT 82
25091: PUSH
25092: LD_INT 83
25094: PUSH
25095: LD_INT 84
25097: PUSH
25098: LD_INT 85
25100: PUSH
25101: LD_INT 86
25103: PUSH
25104: LD_INT 1
25106: PUSH
25107: LD_INT 2
25109: PUSH
25110: LD_INT 6
25112: PUSH
25113: LD_INT 15
25115: PUSH
25116: LD_INT 16
25118: PUSH
25119: LD_INT 7
25121: PUSH
25122: LD_INT 12
25124: PUSH
25125: LD_INT 13
25127: PUSH
25128: LD_INT 10
25130: PUSH
25131: LD_INT 14
25133: PUSH
25134: LD_INT 20
25136: PUSH
25137: LD_INT 21
25139: PUSH
25140: LD_INT 22
25142: PUSH
25143: LD_INT 25
25145: PUSH
25146: LD_INT 32
25148: PUSH
25149: LD_INT 27
25151: PUSH
25152: LD_INT 36
25154: PUSH
25155: LD_INT 69
25157: PUSH
25158: LD_INT 39
25160: PUSH
25161: LD_INT 34
25163: PUSH
25164: LD_INT 40
25166: PUSH
25167: LD_INT 48
25169: PUSH
25170: LD_INT 49
25172: PUSH
25173: LD_INT 50
25175: PUSH
25176: LD_INT 51
25178: PUSH
25179: LD_INT 52
25181: PUSH
25182: LD_INT 53
25184: PUSH
25185: LD_INT 54
25187: PUSH
25188: LD_INT 55
25190: PUSH
25191: LD_INT 56
25193: PUSH
25194: LD_INT 57
25196: PUSH
25197: LD_INT 58
25199: PUSH
25200: LD_INT 59
25202: PUSH
25203: LD_INT 60
25205: PUSH
25206: LD_INT 61
25208: PUSH
25209: LD_INT 62
25211: PUSH
25212: LD_INT 80
25214: PUSH
25215: LD_INT 82
25217: PUSH
25218: LD_INT 83
25220: PUSH
25221: LD_INT 84
25223: PUSH
25224: LD_INT 85
25226: PUSH
25227: LD_INT 86
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: ST_TO_ADDR
25283: GO 25750
25285: LD_INT 2
25287: DOUBLE
25288: EQUAL
25289: IFTRUE 25293
25291: GO 25519
25293: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25294: LD_ADDR_VAR 0 4
25298: PUSH
25299: LD_INT 35
25301: PUSH
25302: LD_INT 45
25304: PUSH
25305: LD_INT 46
25307: PUSH
25308: LD_INT 47
25310: PUSH
25311: LD_INT 82
25313: PUSH
25314: LD_INT 83
25316: PUSH
25317: LD_INT 84
25319: PUSH
25320: LD_INT 85
25322: PUSH
25323: LD_INT 87
25325: PUSH
25326: LD_INT 70
25328: PUSH
25329: LD_INT 1
25331: PUSH
25332: LD_INT 11
25334: PUSH
25335: LD_INT 3
25337: PUSH
25338: LD_INT 4
25340: PUSH
25341: LD_INT 5
25343: PUSH
25344: LD_INT 6
25346: PUSH
25347: LD_INT 15
25349: PUSH
25350: LD_INT 18
25352: PUSH
25353: LD_INT 7
25355: PUSH
25356: LD_INT 17
25358: PUSH
25359: LD_INT 8
25361: PUSH
25362: LD_INT 20
25364: PUSH
25365: LD_INT 21
25367: PUSH
25368: LD_INT 22
25370: PUSH
25371: LD_INT 72
25373: PUSH
25374: LD_INT 26
25376: PUSH
25377: LD_INT 69
25379: PUSH
25380: LD_INT 39
25382: PUSH
25383: LD_INT 40
25385: PUSH
25386: LD_INT 41
25388: PUSH
25389: LD_INT 42
25391: PUSH
25392: LD_INT 43
25394: PUSH
25395: LD_INT 48
25397: PUSH
25398: LD_INT 49
25400: PUSH
25401: LD_INT 50
25403: PUSH
25404: LD_INT 51
25406: PUSH
25407: LD_INT 52
25409: PUSH
25410: LD_INT 53
25412: PUSH
25413: LD_INT 54
25415: PUSH
25416: LD_INT 55
25418: PUSH
25419: LD_INT 56
25421: PUSH
25422: LD_INT 60
25424: PUSH
25425: LD_INT 61
25427: PUSH
25428: LD_INT 62
25430: PUSH
25431: LD_INT 66
25433: PUSH
25434: LD_INT 67
25436: PUSH
25437: LD_INT 68
25439: PUSH
25440: LD_INT 81
25442: PUSH
25443: LD_INT 82
25445: PUSH
25446: LD_INT 83
25448: PUSH
25449: LD_INT 84
25451: PUSH
25452: LD_INT 85
25454: PUSH
25455: LD_INT 87
25457: PUSH
25458: LD_INT 88
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: ST_TO_ADDR
25517: GO 25750
25519: LD_INT 3
25521: DOUBLE
25522: EQUAL
25523: IFTRUE 25527
25525: GO 25749
25527: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25528: LD_ADDR_VAR 0 4
25532: PUSH
25533: LD_INT 46
25535: PUSH
25536: LD_INT 47
25538: PUSH
25539: LD_INT 1
25541: PUSH
25542: LD_INT 2
25544: PUSH
25545: LD_INT 82
25547: PUSH
25548: LD_INT 83
25550: PUSH
25551: LD_INT 84
25553: PUSH
25554: LD_INT 85
25556: PUSH
25557: LD_INT 86
25559: PUSH
25560: LD_INT 11
25562: PUSH
25563: LD_INT 9
25565: PUSH
25566: LD_INT 20
25568: PUSH
25569: LD_INT 19
25571: PUSH
25572: LD_INT 21
25574: PUSH
25575: LD_INT 24
25577: PUSH
25578: LD_INT 22
25580: PUSH
25581: LD_INT 25
25583: PUSH
25584: LD_INT 28
25586: PUSH
25587: LD_INT 29
25589: PUSH
25590: LD_INT 30
25592: PUSH
25593: LD_INT 31
25595: PUSH
25596: LD_INT 37
25598: PUSH
25599: LD_INT 38
25601: PUSH
25602: LD_INT 32
25604: PUSH
25605: LD_INT 27
25607: PUSH
25608: LD_INT 33
25610: PUSH
25611: LD_INT 69
25613: PUSH
25614: LD_INT 39
25616: PUSH
25617: LD_INT 34
25619: PUSH
25620: LD_INT 40
25622: PUSH
25623: LD_INT 71
25625: PUSH
25626: LD_INT 23
25628: PUSH
25629: LD_INT 44
25631: PUSH
25632: LD_INT 48
25634: PUSH
25635: LD_INT 49
25637: PUSH
25638: LD_INT 50
25640: PUSH
25641: LD_INT 51
25643: PUSH
25644: LD_INT 52
25646: PUSH
25647: LD_INT 53
25649: PUSH
25650: LD_INT 54
25652: PUSH
25653: LD_INT 55
25655: PUSH
25656: LD_INT 56
25658: PUSH
25659: LD_INT 57
25661: PUSH
25662: LD_INT 58
25664: PUSH
25665: LD_INT 59
25667: PUSH
25668: LD_INT 63
25670: PUSH
25671: LD_INT 64
25673: PUSH
25674: LD_INT 65
25676: PUSH
25677: LD_INT 82
25679: PUSH
25680: LD_INT 83
25682: PUSH
25683: LD_INT 84
25685: PUSH
25686: LD_INT 85
25688: PUSH
25689: LD_INT 86
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: ST_TO_ADDR
25747: GO 25750
25749: POP
// if state > - 1 and state < 3 then
25750: LD_VAR 0 3
25754: PUSH
25755: LD_INT 1
25757: NEG
25758: GREATER
25759: PUSH
25760: LD_VAR 0 3
25764: PUSH
25765: LD_INT 3
25767: LESS
25768: AND
25769: IFFALSE 25826
// for i in result do
25771: LD_ADDR_VAR 0 5
25775: PUSH
25776: LD_VAR 0 4
25780: PUSH
25781: FOR_IN
25782: IFFALSE 25824
// if GetTech ( i , side ) <> state then
25784: LD_VAR 0 5
25788: PPUSH
25789: LD_VAR 0 1
25793: PPUSH
25794: CALL_OW 321
25798: PUSH
25799: LD_VAR 0 3
25803: NONEQUAL
25804: IFFALSE 25822
// result := result diff i ;
25806: LD_ADDR_VAR 0 4
25810: PUSH
25811: LD_VAR 0 4
25815: PUSH
25816: LD_VAR 0 5
25820: DIFF
25821: ST_TO_ADDR
25822: GO 25781
25824: POP
25825: POP
// end ;
25826: LD_VAR 0 4
25830: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25831: LD_INT 0
25833: PPUSH
25834: PPUSH
25835: PPUSH
// result := true ;
25836: LD_ADDR_VAR 0 3
25840: PUSH
25841: LD_INT 1
25843: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25844: LD_ADDR_VAR 0 5
25848: PUSH
25849: LD_VAR 0 2
25853: PPUSH
25854: CALL_OW 480
25858: ST_TO_ADDR
// if not tmp then
25859: LD_VAR 0 5
25863: NOT
25864: IFFALSE 25868
// exit ;
25866: GO 25917
// for i in tmp do
25868: LD_ADDR_VAR 0 4
25872: PUSH
25873: LD_VAR 0 5
25877: PUSH
25878: FOR_IN
25879: IFFALSE 25915
// if GetTech ( i , side ) <> state_researched then
25881: LD_VAR 0 4
25885: PPUSH
25886: LD_VAR 0 1
25890: PPUSH
25891: CALL_OW 321
25895: PUSH
25896: LD_INT 2
25898: NONEQUAL
25899: IFFALSE 25913
// begin result := false ;
25901: LD_ADDR_VAR 0 3
25905: PUSH
25906: LD_INT 0
25908: ST_TO_ADDR
// exit ;
25909: POP
25910: POP
25911: GO 25917
// end ;
25913: GO 25878
25915: POP
25916: POP
// end ;
25917: LD_VAR 0 3
25921: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25922: LD_INT 0
25924: PPUSH
25925: PPUSH
25926: PPUSH
25927: PPUSH
25928: PPUSH
25929: PPUSH
25930: PPUSH
25931: PPUSH
25932: PPUSH
25933: PPUSH
25934: PPUSH
25935: PPUSH
25936: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25937: LD_VAR 0 1
25941: NOT
25942: PUSH
25943: LD_VAR 0 1
25947: PPUSH
25948: CALL_OW 257
25952: PUSH
25953: LD_INT 9
25955: NONEQUAL
25956: OR
25957: IFFALSE 25961
// exit ;
25959: GO 26534
// side := GetSide ( unit ) ;
25961: LD_ADDR_VAR 0 9
25965: PUSH
25966: LD_VAR 0 1
25970: PPUSH
25971: CALL_OW 255
25975: ST_TO_ADDR
// tech_space := tech_spacanom ;
25976: LD_ADDR_VAR 0 12
25980: PUSH
25981: LD_INT 29
25983: ST_TO_ADDR
// tech_time := tech_taurad ;
25984: LD_ADDR_VAR 0 13
25988: PUSH
25989: LD_INT 28
25991: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25992: LD_ADDR_VAR 0 11
25996: PUSH
25997: LD_VAR 0 1
26001: PPUSH
26002: CALL_OW 310
26006: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26007: LD_VAR 0 11
26011: PPUSH
26012: CALL_OW 247
26016: PUSH
26017: LD_INT 2
26019: EQUAL
26020: IFFALSE 26024
// exit ;
26022: GO 26534
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26024: LD_ADDR_VAR 0 8
26028: PUSH
26029: LD_INT 81
26031: PUSH
26032: LD_VAR 0 9
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 3
26043: PUSH
26044: LD_INT 21
26046: PUSH
26047: LD_INT 3
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PPUSH
26062: CALL_OW 69
26066: ST_TO_ADDR
// if not tmp then
26067: LD_VAR 0 8
26071: NOT
26072: IFFALSE 26076
// exit ;
26074: GO 26534
// if in_unit then
26076: LD_VAR 0 11
26080: IFFALSE 26104
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26082: LD_ADDR_VAR 0 10
26086: PUSH
26087: LD_VAR 0 8
26091: PPUSH
26092: LD_VAR 0 11
26096: PPUSH
26097: CALL_OW 74
26101: ST_TO_ADDR
26102: GO 26124
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26104: LD_ADDR_VAR 0 10
26108: PUSH
26109: LD_VAR 0 8
26113: PPUSH
26114: LD_VAR 0 1
26118: PPUSH
26119: CALL_OW 74
26123: ST_TO_ADDR
// if not enemy then
26124: LD_VAR 0 10
26128: NOT
26129: IFFALSE 26133
// exit ;
26131: GO 26534
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26133: LD_VAR 0 11
26137: PUSH
26138: LD_VAR 0 11
26142: PPUSH
26143: LD_VAR 0 10
26147: PPUSH
26148: CALL_OW 296
26152: PUSH
26153: LD_INT 13
26155: GREATER
26156: AND
26157: PUSH
26158: LD_VAR 0 1
26162: PPUSH
26163: LD_VAR 0 10
26167: PPUSH
26168: CALL_OW 296
26172: PUSH
26173: LD_INT 12
26175: GREATER
26176: OR
26177: IFFALSE 26181
// exit ;
26179: GO 26534
// missile := [ 1 ] ;
26181: LD_ADDR_VAR 0 14
26185: PUSH
26186: LD_INT 1
26188: PUSH
26189: EMPTY
26190: LIST
26191: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26192: LD_VAR 0 9
26196: PPUSH
26197: LD_VAR 0 12
26201: PPUSH
26202: CALL_OW 325
26206: IFFALSE 26235
// missile := Replace ( missile , missile + 1 , 2 ) ;
26208: LD_ADDR_VAR 0 14
26212: PUSH
26213: LD_VAR 0 14
26217: PPUSH
26218: LD_VAR 0 14
26222: PUSH
26223: LD_INT 1
26225: PLUS
26226: PPUSH
26227: LD_INT 2
26229: PPUSH
26230: CALL_OW 1
26234: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26235: LD_VAR 0 9
26239: PPUSH
26240: LD_VAR 0 13
26244: PPUSH
26245: CALL_OW 325
26249: PUSH
26250: LD_VAR 0 10
26254: PPUSH
26255: CALL_OW 255
26259: PPUSH
26260: LD_VAR 0 13
26264: PPUSH
26265: CALL_OW 325
26269: NOT
26270: AND
26271: IFFALSE 26300
// missile := Replace ( missile , missile + 1 , 3 ) ;
26273: LD_ADDR_VAR 0 14
26277: PUSH
26278: LD_VAR 0 14
26282: PPUSH
26283: LD_VAR 0 14
26287: PUSH
26288: LD_INT 1
26290: PLUS
26291: PPUSH
26292: LD_INT 3
26294: PPUSH
26295: CALL_OW 1
26299: ST_TO_ADDR
// if missile < 2 then
26300: LD_VAR 0 14
26304: PUSH
26305: LD_INT 2
26307: LESS
26308: IFFALSE 26312
// exit ;
26310: GO 26534
// x := GetX ( enemy ) ;
26312: LD_ADDR_VAR 0 4
26316: PUSH
26317: LD_VAR 0 10
26321: PPUSH
26322: CALL_OW 250
26326: ST_TO_ADDR
// y := GetY ( enemy ) ;
26327: LD_ADDR_VAR 0 5
26331: PUSH
26332: LD_VAR 0 10
26336: PPUSH
26337: CALL_OW 251
26341: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26342: LD_ADDR_VAR 0 6
26346: PUSH
26347: LD_VAR 0 4
26351: PUSH
26352: LD_INT 1
26354: NEG
26355: PPUSH
26356: LD_INT 1
26358: PPUSH
26359: CALL_OW 12
26363: PLUS
26364: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26365: LD_ADDR_VAR 0 7
26369: PUSH
26370: LD_VAR 0 5
26374: PUSH
26375: LD_INT 1
26377: NEG
26378: PPUSH
26379: LD_INT 1
26381: PPUSH
26382: CALL_OW 12
26386: PLUS
26387: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26388: LD_VAR 0 6
26392: PPUSH
26393: LD_VAR 0 7
26397: PPUSH
26398: CALL_OW 488
26402: NOT
26403: IFFALSE 26425
// begin _x := x ;
26405: LD_ADDR_VAR 0 6
26409: PUSH
26410: LD_VAR 0 4
26414: ST_TO_ADDR
// _y := y ;
26415: LD_ADDR_VAR 0 7
26419: PUSH
26420: LD_VAR 0 5
26424: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26425: LD_ADDR_VAR 0 3
26429: PUSH
26430: LD_INT 1
26432: PPUSH
26433: LD_VAR 0 14
26437: PPUSH
26438: CALL_OW 12
26442: ST_TO_ADDR
// case i of 1 :
26443: LD_VAR 0 3
26447: PUSH
26448: LD_INT 1
26450: DOUBLE
26451: EQUAL
26452: IFTRUE 26456
26454: GO 26473
26456: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26457: LD_VAR 0 1
26461: PPUSH
26462: LD_VAR 0 10
26466: PPUSH
26467: CALL_OW 115
26471: GO 26534
26473: LD_INT 2
26475: DOUBLE
26476: EQUAL
26477: IFTRUE 26481
26479: GO 26503
26481: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26482: LD_VAR 0 1
26486: PPUSH
26487: LD_VAR 0 6
26491: PPUSH
26492: LD_VAR 0 7
26496: PPUSH
26497: CALL_OW 153
26501: GO 26534
26503: LD_INT 3
26505: DOUBLE
26506: EQUAL
26507: IFTRUE 26511
26509: GO 26533
26511: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26512: LD_VAR 0 1
26516: PPUSH
26517: LD_VAR 0 6
26521: PPUSH
26522: LD_VAR 0 7
26526: PPUSH
26527: CALL_OW 154
26531: GO 26534
26533: POP
// end ;
26534: LD_VAR 0 2
26538: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26539: LD_INT 0
26541: PPUSH
26542: PPUSH
26543: PPUSH
26544: PPUSH
26545: PPUSH
26546: PPUSH
// if not unit or not building then
26547: LD_VAR 0 1
26551: NOT
26552: PUSH
26553: LD_VAR 0 2
26557: NOT
26558: OR
26559: IFFALSE 26563
// exit ;
26561: GO 26721
// x := GetX ( building ) ;
26563: LD_ADDR_VAR 0 5
26567: PUSH
26568: LD_VAR 0 2
26572: PPUSH
26573: CALL_OW 250
26577: ST_TO_ADDR
// y := GetY ( building ) ;
26578: LD_ADDR_VAR 0 6
26582: PUSH
26583: LD_VAR 0 2
26587: PPUSH
26588: CALL_OW 251
26592: ST_TO_ADDR
// for i = 0 to 5 do
26593: LD_ADDR_VAR 0 4
26597: PUSH
26598: DOUBLE
26599: LD_INT 0
26601: DEC
26602: ST_TO_ADDR
26603: LD_INT 5
26605: PUSH
26606: FOR_TO
26607: IFFALSE 26719
// begin _x := ShiftX ( x , i , 3 ) ;
26609: LD_ADDR_VAR 0 7
26613: PUSH
26614: LD_VAR 0 5
26618: PPUSH
26619: LD_VAR 0 4
26623: PPUSH
26624: LD_INT 3
26626: PPUSH
26627: CALL_OW 272
26631: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26632: LD_ADDR_VAR 0 8
26636: PUSH
26637: LD_VAR 0 6
26641: PPUSH
26642: LD_VAR 0 4
26646: PPUSH
26647: LD_INT 3
26649: PPUSH
26650: CALL_OW 273
26654: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26655: LD_VAR 0 7
26659: PPUSH
26660: LD_VAR 0 8
26664: PPUSH
26665: CALL_OW 488
26669: NOT
26670: IFFALSE 26674
// continue ;
26672: GO 26606
// if HexInfo ( _x , _y ) = 0 then
26674: LD_VAR 0 7
26678: PPUSH
26679: LD_VAR 0 8
26683: PPUSH
26684: CALL_OW 428
26688: PUSH
26689: LD_INT 0
26691: EQUAL
26692: IFFALSE 26717
// begin ComMoveXY ( unit , _x , _y ) ;
26694: LD_VAR 0 1
26698: PPUSH
26699: LD_VAR 0 7
26703: PPUSH
26704: LD_VAR 0 8
26708: PPUSH
26709: CALL_OW 111
// exit ;
26713: POP
26714: POP
26715: GO 26721
// end ; end ;
26717: GO 26606
26719: POP
26720: POP
// end ;
26721: LD_VAR 0 3
26725: RET
// export function ScanBase ( side , base_area ) ; begin
26726: LD_INT 0
26728: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26729: LD_ADDR_VAR 0 3
26733: PUSH
26734: LD_VAR 0 2
26738: PPUSH
26739: LD_INT 81
26741: PUSH
26742: LD_VAR 0 1
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PPUSH
26751: CALL_OW 70
26755: ST_TO_ADDR
// end ;
26756: LD_VAR 0 3
26760: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26761: LD_INT 0
26763: PPUSH
26764: PPUSH
26765: PPUSH
26766: PPUSH
// result := false ;
26767: LD_ADDR_VAR 0 2
26771: PUSH
26772: LD_INT 0
26774: ST_TO_ADDR
// side := GetSide ( unit ) ;
26775: LD_ADDR_VAR 0 3
26779: PUSH
26780: LD_VAR 0 1
26784: PPUSH
26785: CALL_OW 255
26789: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26790: LD_ADDR_VAR 0 4
26794: PUSH
26795: LD_VAR 0 1
26799: PPUSH
26800: CALL_OW 248
26804: ST_TO_ADDR
// case nat of 1 :
26805: LD_VAR 0 4
26809: PUSH
26810: LD_INT 1
26812: DOUBLE
26813: EQUAL
26814: IFTRUE 26818
26816: GO 26829
26818: POP
// tech := tech_lassight ; 2 :
26819: LD_ADDR_VAR 0 5
26823: PUSH
26824: LD_INT 12
26826: ST_TO_ADDR
26827: GO 26868
26829: LD_INT 2
26831: DOUBLE
26832: EQUAL
26833: IFTRUE 26837
26835: GO 26848
26837: POP
// tech := tech_mortar ; 3 :
26838: LD_ADDR_VAR 0 5
26842: PUSH
26843: LD_INT 41
26845: ST_TO_ADDR
26846: GO 26868
26848: LD_INT 3
26850: DOUBLE
26851: EQUAL
26852: IFTRUE 26856
26854: GO 26867
26856: POP
// tech := tech_bazooka ; end ;
26857: LD_ADDR_VAR 0 5
26861: PUSH
26862: LD_INT 44
26864: ST_TO_ADDR
26865: GO 26868
26867: POP
// if Researched ( side , tech ) then
26868: LD_VAR 0 3
26872: PPUSH
26873: LD_VAR 0 5
26877: PPUSH
26878: CALL_OW 325
26882: IFFALSE 26909
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26884: LD_ADDR_VAR 0 2
26888: PUSH
26889: LD_INT 5
26891: PUSH
26892: LD_INT 8
26894: PUSH
26895: LD_INT 9
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: LIST
26902: PUSH
26903: LD_VAR 0 4
26907: ARRAY
26908: ST_TO_ADDR
// end ;
26909: LD_VAR 0 2
26913: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26914: LD_INT 0
26916: PPUSH
26917: PPUSH
26918: PPUSH
// if not mines then
26919: LD_VAR 0 2
26923: NOT
26924: IFFALSE 26928
// exit ;
26926: GO 27072
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26928: LD_ADDR_VAR 0 5
26932: PUSH
26933: LD_INT 81
26935: PUSH
26936: LD_VAR 0 1
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: LD_INT 3
26947: PUSH
26948: LD_INT 21
26950: PUSH
26951: LD_INT 3
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PPUSH
26966: CALL_OW 69
26970: ST_TO_ADDR
// for i in mines do
26971: LD_ADDR_VAR 0 4
26975: PUSH
26976: LD_VAR 0 2
26980: PUSH
26981: FOR_IN
26982: IFFALSE 27070
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26984: LD_VAR 0 4
26988: PUSH
26989: LD_INT 1
26991: ARRAY
26992: PPUSH
26993: LD_VAR 0 4
26997: PUSH
26998: LD_INT 2
27000: ARRAY
27001: PPUSH
27002: CALL_OW 458
27006: NOT
27007: IFFALSE 27011
// continue ;
27009: GO 26981
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27011: LD_VAR 0 4
27015: PUSH
27016: LD_INT 1
27018: ARRAY
27019: PPUSH
27020: LD_VAR 0 4
27024: PUSH
27025: LD_INT 2
27027: ARRAY
27028: PPUSH
27029: CALL_OW 428
27033: PUSH
27034: LD_VAR 0 5
27038: IN
27039: IFFALSE 27068
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27041: LD_VAR 0 4
27045: PUSH
27046: LD_INT 1
27048: ARRAY
27049: PPUSH
27050: LD_VAR 0 4
27054: PUSH
27055: LD_INT 2
27057: ARRAY
27058: PPUSH
27059: LD_VAR 0 1
27063: PPUSH
27064: CALL_OW 456
// end ;
27068: GO 26981
27070: POP
27071: POP
// end ;
27072: LD_VAR 0 3
27076: RET
// export function Count ( array ) ; var i ; begin
27077: LD_INT 0
27079: PPUSH
27080: PPUSH
// result := 0 ;
27081: LD_ADDR_VAR 0 2
27085: PUSH
27086: LD_INT 0
27088: ST_TO_ADDR
// for i in array do
27089: LD_ADDR_VAR 0 3
27093: PUSH
27094: LD_VAR 0 1
27098: PUSH
27099: FOR_IN
27100: IFFALSE 27124
// if i then
27102: LD_VAR 0 3
27106: IFFALSE 27122
// result := result + 1 ;
27108: LD_ADDR_VAR 0 2
27112: PUSH
27113: LD_VAR 0 2
27117: PUSH
27118: LD_INT 1
27120: PLUS
27121: ST_TO_ADDR
27122: GO 27099
27124: POP
27125: POP
// end ;
27126: LD_VAR 0 2
27130: RET
// export function IsEmpty ( building ) ; begin
27131: LD_INT 0
27133: PPUSH
// if not building then
27134: LD_VAR 0 1
27138: NOT
27139: IFFALSE 27143
// exit ;
27141: GO 27186
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27143: LD_ADDR_VAR 0 2
27147: PUSH
27148: LD_VAR 0 1
27152: PUSH
27153: LD_INT 22
27155: PUSH
27156: LD_VAR 0 1
27160: PPUSH
27161: CALL_OW 255
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: LD_INT 58
27172: PUSH
27173: EMPTY
27174: LIST
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PPUSH
27180: CALL_OW 69
27184: IN
27185: ST_TO_ADDR
// end ;
27186: LD_VAR 0 2
27190: RET
// export function IsNotFull ( building ) ; begin
27191: LD_INT 0
27193: PPUSH
// if not building then
27194: LD_VAR 0 1
27198: NOT
27199: IFFALSE 27203
// exit ;
27201: GO 27222
// result := UnitsInside ( building ) < 6 ;
27203: LD_ADDR_VAR 0 2
27207: PUSH
27208: LD_VAR 0 1
27212: PPUSH
27213: CALL_OW 313
27217: PUSH
27218: LD_INT 6
27220: LESS
27221: ST_TO_ADDR
// end ;
27222: LD_VAR 0 2
27226: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27227: LD_INT 0
27229: PPUSH
27230: PPUSH
27231: PPUSH
27232: PPUSH
// tmp := [ ] ;
27233: LD_ADDR_VAR 0 3
27237: PUSH
27238: EMPTY
27239: ST_TO_ADDR
// list := [ ] ;
27240: LD_ADDR_VAR 0 5
27244: PUSH
27245: EMPTY
27246: ST_TO_ADDR
// for i = 16 to 25 do
27247: LD_ADDR_VAR 0 4
27251: PUSH
27252: DOUBLE
27253: LD_INT 16
27255: DEC
27256: ST_TO_ADDR
27257: LD_INT 25
27259: PUSH
27260: FOR_TO
27261: IFFALSE 27334
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27263: LD_ADDR_VAR 0 3
27267: PUSH
27268: LD_VAR 0 3
27272: PUSH
27273: LD_INT 22
27275: PUSH
27276: LD_VAR 0 1
27280: PPUSH
27281: CALL_OW 255
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 91
27292: PUSH
27293: LD_VAR 0 1
27297: PUSH
27298: LD_INT 6
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 30
27308: PUSH
27309: LD_VAR 0 4
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: LIST
27322: PUSH
27323: EMPTY
27324: LIST
27325: PPUSH
27326: CALL_OW 69
27330: ADD
27331: ST_TO_ADDR
27332: GO 27260
27334: POP
27335: POP
// for i = 1 to tmp do
27336: LD_ADDR_VAR 0 4
27340: PUSH
27341: DOUBLE
27342: LD_INT 1
27344: DEC
27345: ST_TO_ADDR
27346: LD_VAR 0 3
27350: PUSH
27351: FOR_TO
27352: IFFALSE 27440
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27354: LD_ADDR_VAR 0 5
27358: PUSH
27359: LD_VAR 0 5
27363: PUSH
27364: LD_VAR 0 3
27368: PUSH
27369: LD_VAR 0 4
27373: ARRAY
27374: PPUSH
27375: CALL_OW 266
27379: PUSH
27380: LD_VAR 0 3
27384: PUSH
27385: LD_VAR 0 4
27389: ARRAY
27390: PPUSH
27391: CALL_OW 250
27395: PUSH
27396: LD_VAR 0 3
27400: PUSH
27401: LD_VAR 0 4
27405: ARRAY
27406: PPUSH
27407: CALL_OW 251
27411: PUSH
27412: LD_VAR 0 3
27416: PUSH
27417: LD_VAR 0 4
27421: ARRAY
27422: PPUSH
27423: CALL_OW 254
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: PUSH
27434: EMPTY
27435: LIST
27436: ADD
27437: ST_TO_ADDR
27438: GO 27351
27440: POP
27441: POP
// result := list ;
27442: LD_ADDR_VAR 0 2
27446: PUSH
27447: LD_VAR 0 5
27451: ST_TO_ADDR
// end ;
27452: LD_VAR 0 2
27456: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27457: LD_INT 0
27459: PPUSH
27460: PPUSH
27461: PPUSH
27462: PPUSH
27463: PPUSH
27464: PPUSH
27465: PPUSH
// if not factory then
27466: LD_VAR 0 1
27470: NOT
27471: IFFALSE 27475
// exit ;
27473: GO 28068
// if control = control_apeman then
27475: LD_VAR 0 4
27479: PUSH
27480: LD_INT 5
27482: EQUAL
27483: IFFALSE 27592
// begin tmp := UnitsInside ( factory ) ;
27485: LD_ADDR_VAR 0 8
27489: PUSH
27490: LD_VAR 0 1
27494: PPUSH
27495: CALL_OW 313
27499: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27500: LD_VAR 0 8
27504: PPUSH
27505: LD_INT 25
27507: PUSH
27508: LD_INT 12
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PPUSH
27515: CALL_OW 72
27519: NOT
27520: IFFALSE 27530
// control := control_manual ;
27522: LD_ADDR_VAR 0 4
27526: PUSH
27527: LD_INT 1
27529: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27530: LD_ADDR_VAR 0 8
27534: PUSH
27535: LD_VAR 0 1
27539: PPUSH
27540: CALL 27227 0 1
27544: ST_TO_ADDR
// if tmp then
27545: LD_VAR 0 8
27549: IFFALSE 27592
// begin for i in tmp do
27551: LD_ADDR_VAR 0 7
27555: PUSH
27556: LD_VAR 0 8
27560: PUSH
27561: FOR_IN
27562: IFFALSE 27590
// if i [ 1 ] = b_ext_radio then
27564: LD_VAR 0 7
27568: PUSH
27569: LD_INT 1
27571: ARRAY
27572: PUSH
27573: LD_INT 22
27575: EQUAL
27576: IFFALSE 27588
// begin control := control_remote ;
27578: LD_ADDR_VAR 0 4
27582: PUSH
27583: LD_INT 2
27585: ST_TO_ADDR
// break ;
27586: GO 27590
// end ;
27588: GO 27561
27590: POP
27591: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27592: LD_VAR 0 1
27596: PPUSH
27597: LD_VAR 0 2
27601: PPUSH
27602: LD_VAR 0 3
27606: PPUSH
27607: LD_VAR 0 4
27611: PPUSH
27612: LD_VAR 0 5
27616: PPUSH
27617: CALL_OW 448
27621: IFFALSE 27656
// begin result := [ chassis , engine , control , weapon ] ;
27623: LD_ADDR_VAR 0 6
27627: PUSH
27628: LD_VAR 0 2
27632: PUSH
27633: LD_VAR 0 3
27637: PUSH
27638: LD_VAR 0 4
27642: PUSH
27643: LD_VAR 0 5
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: ST_TO_ADDR
// exit ;
27654: GO 28068
// end ; _chassis := AvailableChassisList ( factory ) ;
27656: LD_ADDR_VAR 0 9
27660: PUSH
27661: LD_VAR 0 1
27665: PPUSH
27666: CALL_OW 475
27670: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27671: LD_ADDR_VAR 0 11
27675: PUSH
27676: LD_VAR 0 1
27680: PPUSH
27681: CALL_OW 476
27685: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27686: LD_ADDR_VAR 0 12
27690: PUSH
27691: LD_VAR 0 1
27695: PPUSH
27696: CALL_OW 477
27700: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27701: LD_ADDR_VAR 0 10
27705: PUSH
27706: LD_VAR 0 1
27710: PPUSH
27711: CALL_OW 478
27715: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27716: LD_VAR 0 9
27720: NOT
27721: PUSH
27722: LD_VAR 0 11
27726: NOT
27727: OR
27728: PUSH
27729: LD_VAR 0 12
27733: NOT
27734: OR
27735: PUSH
27736: LD_VAR 0 10
27740: NOT
27741: OR
27742: IFFALSE 27777
// begin result := [ chassis , engine , control , weapon ] ;
27744: LD_ADDR_VAR 0 6
27748: PUSH
27749: LD_VAR 0 2
27753: PUSH
27754: LD_VAR 0 3
27758: PUSH
27759: LD_VAR 0 4
27763: PUSH
27764: LD_VAR 0 5
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: ST_TO_ADDR
// exit ;
27775: GO 28068
// end ; if not chassis in _chassis then
27777: LD_VAR 0 2
27781: PUSH
27782: LD_VAR 0 9
27786: IN
27787: NOT
27788: IFFALSE 27814
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27790: LD_ADDR_VAR 0 2
27794: PUSH
27795: LD_VAR 0 9
27799: PUSH
27800: LD_INT 1
27802: PPUSH
27803: LD_VAR 0 9
27807: PPUSH
27808: CALL_OW 12
27812: ARRAY
27813: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27814: LD_VAR 0 2
27818: PPUSH
27819: LD_VAR 0 3
27823: PPUSH
27824: CALL 28073 0 2
27828: NOT
27829: IFFALSE 27888
// repeat engine := _engine [ 1 ] ;
27831: LD_ADDR_VAR 0 3
27835: PUSH
27836: LD_VAR 0 11
27840: PUSH
27841: LD_INT 1
27843: ARRAY
27844: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27845: LD_ADDR_VAR 0 11
27849: PUSH
27850: LD_VAR 0 11
27854: PPUSH
27855: LD_INT 1
27857: PPUSH
27858: CALL_OW 3
27862: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27863: LD_VAR 0 2
27867: PPUSH
27868: LD_VAR 0 3
27872: PPUSH
27873: CALL 28073 0 2
27877: PUSH
27878: LD_VAR 0 11
27882: PUSH
27883: EMPTY
27884: EQUAL
27885: OR
27886: IFFALSE 27831
// if not control in _control then
27888: LD_VAR 0 4
27892: PUSH
27893: LD_VAR 0 12
27897: IN
27898: NOT
27899: IFFALSE 27925
// control := _control [ rand ( 1 , _control ) ] ;
27901: LD_ADDR_VAR 0 4
27905: PUSH
27906: LD_VAR 0 12
27910: PUSH
27911: LD_INT 1
27913: PPUSH
27914: LD_VAR 0 12
27918: PPUSH
27919: CALL_OW 12
27923: ARRAY
27924: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27925: LD_VAR 0 2
27929: PPUSH
27930: LD_VAR 0 5
27934: PPUSH
27935: CALL 28293 0 2
27939: NOT
27940: IFFALSE 27999
// repeat weapon := _weapon [ 1 ] ;
27942: LD_ADDR_VAR 0 5
27946: PUSH
27947: LD_VAR 0 10
27951: PUSH
27952: LD_INT 1
27954: ARRAY
27955: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27956: LD_ADDR_VAR 0 10
27960: PUSH
27961: LD_VAR 0 10
27965: PPUSH
27966: LD_INT 1
27968: PPUSH
27969: CALL_OW 3
27973: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27974: LD_VAR 0 2
27978: PPUSH
27979: LD_VAR 0 5
27983: PPUSH
27984: CALL 28293 0 2
27988: PUSH
27989: LD_VAR 0 10
27993: PUSH
27994: EMPTY
27995: EQUAL
27996: OR
27997: IFFALSE 27942
// result := [ ] ;
27999: LD_ADDR_VAR 0 6
28003: PUSH
28004: EMPTY
28005: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28006: LD_VAR 0 1
28010: PPUSH
28011: LD_VAR 0 2
28015: PPUSH
28016: LD_VAR 0 3
28020: PPUSH
28021: LD_VAR 0 4
28025: PPUSH
28026: LD_VAR 0 5
28030: PPUSH
28031: CALL_OW 448
28035: IFFALSE 28068
// result := [ chassis , engine , control , weapon ] ;
28037: LD_ADDR_VAR 0 6
28041: PUSH
28042: LD_VAR 0 2
28046: PUSH
28047: LD_VAR 0 3
28051: PUSH
28052: LD_VAR 0 4
28056: PUSH
28057: LD_VAR 0 5
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: ST_TO_ADDR
// end ;
28068: LD_VAR 0 6
28072: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28073: LD_INT 0
28075: PPUSH
// if not chassis or not engine then
28076: LD_VAR 0 1
28080: NOT
28081: PUSH
28082: LD_VAR 0 2
28086: NOT
28087: OR
28088: IFFALSE 28092
// exit ;
28090: GO 28288
// case engine of engine_solar :
28092: LD_VAR 0 2
28096: PUSH
28097: LD_INT 2
28099: DOUBLE
28100: EQUAL
28101: IFTRUE 28105
28103: GO 28143
28105: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28106: LD_ADDR_VAR 0 3
28110: PUSH
28111: LD_INT 11
28113: PUSH
28114: LD_INT 12
28116: PUSH
28117: LD_INT 13
28119: PUSH
28120: LD_INT 14
28122: PUSH
28123: LD_INT 1
28125: PUSH
28126: LD_INT 2
28128: PUSH
28129: LD_INT 3
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: ST_TO_ADDR
28141: GO 28272
28143: LD_INT 1
28145: DOUBLE
28146: EQUAL
28147: IFTRUE 28151
28149: GO 28213
28151: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28152: LD_ADDR_VAR 0 3
28156: PUSH
28157: LD_INT 11
28159: PUSH
28160: LD_INT 12
28162: PUSH
28163: LD_INT 13
28165: PUSH
28166: LD_INT 14
28168: PUSH
28169: LD_INT 1
28171: PUSH
28172: LD_INT 2
28174: PUSH
28175: LD_INT 3
28177: PUSH
28178: LD_INT 4
28180: PUSH
28181: LD_INT 5
28183: PUSH
28184: LD_INT 21
28186: PUSH
28187: LD_INT 23
28189: PUSH
28190: LD_INT 22
28192: PUSH
28193: LD_INT 24
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: LIST
28209: LIST
28210: ST_TO_ADDR
28211: GO 28272
28213: LD_INT 3
28215: DOUBLE
28216: EQUAL
28217: IFTRUE 28221
28219: GO 28271
28221: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28222: LD_ADDR_VAR 0 3
28226: PUSH
28227: LD_INT 13
28229: PUSH
28230: LD_INT 14
28232: PUSH
28233: LD_INT 2
28235: PUSH
28236: LD_INT 3
28238: PUSH
28239: LD_INT 4
28241: PUSH
28242: LD_INT 5
28244: PUSH
28245: LD_INT 21
28247: PUSH
28248: LD_INT 22
28250: PUSH
28251: LD_INT 23
28253: PUSH
28254: LD_INT 24
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: ST_TO_ADDR
28269: GO 28272
28271: POP
// result := ( chassis in result ) ;
28272: LD_ADDR_VAR 0 3
28276: PUSH
28277: LD_VAR 0 1
28281: PUSH
28282: LD_VAR 0 3
28286: IN
28287: ST_TO_ADDR
// end ;
28288: LD_VAR 0 3
28292: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28293: LD_INT 0
28295: PPUSH
// if not chassis or not weapon then
28296: LD_VAR 0 1
28300: NOT
28301: PUSH
28302: LD_VAR 0 2
28306: NOT
28307: OR
28308: IFFALSE 28312
// exit ;
28310: GO 29374
// case weapon of us_machine_gun :
28312: LD_VAR 0 2
28316: PUSH
28317: LD_INT 2
28319: DOUBLE
28320: EQUAL
28321: IFTRUE 28325
28323: GO 28355
28325: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28326: LD_ADDR_VAR 0 3
28330: PUSH
28331: LD_INT 1
28333: PUSH
28334: LD_INT 2
28336: PUSH
28337: LD_INT 3
28339: PUSH
28340: LD_INT 4
28342: PUSH
28343: LD_INT 5
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: ST_TO_ADDR
28353: GO 29358
28355: LD_INT 3
28357: DOUBLE
28358: EQUAL
28359: IFTRUE 28363
28361: GO 28393
28363: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28364: LD_ADDR_VAR 0 3
28368: PUSH
28369: LD_INT 1
28371: PUSH
28372: LD_INT 2
28374: PUSH
28375: LD_INT 3
28377: PUSH
28378: LD_INT 4
28380: PUSH
28381: LD_INT 5
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: ST_TO_ADDR
28391: GO 29358
28393: LD_INT 11
28395: DOUBLE
28396: EQUAL
28397: IFTRUE 28401
28399: GO 28431
28401: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28402: LD_ADDR_VAR 0 3
28406: PUSH
28407: LD_INT 1
28409: PUSH
28410: LD_INT 2
28412: PUSH
28413: LD_INT 3
28415: PUSH
28416: LD_INT 4
28418: PUSH
28419: LD_INT 5
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: LIST
28426: LIST
28427: LIST
28428: ST_TO_ADDR
28429: GO 29358
28431: LD_INT 4
28433: DOUBLE
28434: EQUAL
28435: IFTRUE 28439
28437: GO 28465
28439: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28440: LD_ADDR_VAR 0 3
28444: PUSH
28445: LD_INT 2
28447: PUSH
28448: LD_INT 3
28450: PUSH
28451: LD_INT 4
28453: PUSH
28454: LD_INT 5
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: ST_TO_ADDR
28463: GO 29358
28465: LD_INT 5
28467: DOUBLE
28468: EQUAL
28469: IFTRUE 28473
28471: GO 28499
28473: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28474: LD_ADDR_VAR 0 3
28478: PUSH
28479: LD_INT 2
28481: PUSH
28482: LD_INT 3
28484: PUSH
28485: LD_INT 4
28487: PUSH
28488: LD_INT 5
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: ST_TO_ADDR
28497: GO 29358
28499: LD_INT 9
28501: DOUBLE
28502: EQUAL
28503: IFTRUE 28507
28505: GO 28533
28507: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28508: LD_ADDR_VAR 0 3
28512: PUSH
28513: LD_INT 2
28515: PUSH
28516: LD_INT 3
28518: PUSH
28519: LD_INT 4
28521: PUSH
28522: LD_INT 5
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: ST_TO_ADDR
28531: GO 29358
28533: LD_INT 7
28535: DOUBLE
28536: EQUAL
28537: IFTRUE 28541
28539: GO 28567
28541: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28542: LD_ADDR_VAR 0 3
28546: PUSH
28547: LD_INT 2
28549: PUSH
28550: LD_INT 3
28552: PUSH
28553: LD_INT 4
28555: PUSH
28556: LD_INT 5
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: ST_TO_ADDR
28565: GO 29358
28567: LD_INT 12
28569: DOUBLE
28570: EQUAL
28571: IFTRUE 28575
28573: GO 28601
28575: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28576: LD_ADDR_VAR 0 3
28580: PUSH
28581: LD_INT 2
28583: PUSH
28584: LD_INT 3
28586: PUSH
28587: LD_INT 4
28589: PUSH
28590: LD_INT 5
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: ST_TO_ADDR
28599: GO 29358
28601: LD_INT 13
28603: DOUBLE
28604: EQUAL
28605: IFTRUE 28609
28607: GO 28635
28609: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28610: LD_ADDR_VAR 0 3
28614: PUSH
28615: LD_INT 2
28617: PUSH
28618: LD_INT 3
28620: PUSH
28621: LD_INT 4
28623: PUSH
28624: LD_INT 5
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: ST_TO_ADDR
28633: GO 29358
28635: LD_INT 14
28637: DOUBLE
28638: EQUAL
28639: IFTRUE 28643
28641: GO 28661
28643: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28644: LD_ADDR_VAR 0 3
28648: PUSH
28649: LD_INT 4
28651: PUSH
28652: LD_INT 5
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: ST_TO_ADDR
28659: GO 29358
28661: LD_INT 6
28663: DOUBLE
28664: EQUAL
28665: IFTRUE 28669
28667: GO 28687
28669: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28670: LD_ADDR_VAR 0 3
28674: PUSH
28675: LD_INT 4
28677: PUSH
28678: LD_INT 5
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: ST_TO_ADDR
28685: GO 29358
28687: LD_INT 10
28689: DOUBLE
28690: EQUAL
28691: IFTRUE 28695
28693: GO 28713
28695: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28696: LD_ADDR_VAR 0 3
28700: PUSH
28701: LD_INT 4
28703: PUSH
28704: LD_INT 5
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: ST_TO_ADDR
28711: GO 29358
28713: LD_INT 22
28715: DOUBLE
28716: EQUAL
28717: IFTRUE 28721
28719: GO 28747
28721: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28722: LD_ADDR_VAR 0 3
28726: PUSH
28727: LD_INT 11
28729: PUSH
28730: LD_INT 12
28732: PUSH
28733: LD_INT 13
28735: PUSH
28736: LD_INT 14
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: ST_TO_ADDR
28745: GO 29358
28747: LD_INT 23
28749: DOUBLE
28750: EQUAL
28751: IFTRUE 28755
28753: GO 28781
28755: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28756: LD_ADDR_VAR 0 3
28760: PUSH
28761: LD_INT 11
28763: PUSH
28764: LD_INT 12
28766: PUSH
28767: LD_INT 13
28769: PUSH
28770: LD_INT 14
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: ST_TO_ADDR
28779: GO 29358
28781: LD_INT 24
28783: DOUBLE
28784: EQUAL
28785: IFTRUE 28789
28787: GO 28815
28789: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28790: LD_ADDR_VAR 0 3
28794: PUSH
28795: LD_INT 11
28797: PUSH
28798: LD_INT 12
28800: PUSH
28801: LD_INT 13
28803: PUSH
28804: LD_INT 14
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: ST_TO_ADDR
28813: GO 29358
28815: LD_INT 30
28817: DOUBLE
28818: EQUAL
28819: IFTRUE 28823
28821: GO 28849
28823: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28824: LD_ADDR_VAR 0 3
28828: PUSH
28829: LD_INT 11
28831: PUSH
28832: LD_INT 12
28834: PUSH
28835: LD_INT 13
28837: PUSH
28838: LD_INT 14
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: ST_TO_ADDR
28847: GO 29358
28849: LD_INT 25
28851: DOUBLE
28852: EQUAL
28853: IFTRUE 28857
28855: GO 28875
28857: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28858: LD_ADDR_VAR 0 3
28862: PUSH
28863: LD_INT 13
28865: PUSH
28866: LD_INT 14
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: ST_TO_ADDR
28873: GO 29358
28875: LD_INT 27
28877: DOUBLE
28878: EQUAL
28879: IFTRUE 28883
28881: GO 28901
28883: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28884: LD_ADDR_VAR 0 3
28888: PUSH
28889: LD_INT 13
28891: PUSH
28892: LD_INT 14
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: ST_TO_ADDR
28899: GO 29358
28901: LD_EXP 98
28905: DOUBLE
28906: EQUAL
28907: IFTRUE 28911
28909: GO 28937
28911: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28912: LD_ADDR_VAR 0 3
28916: PUSH
28917: LD_INT 11
28919: PUSH
28920: LD_INT 12
28922: PUSH
28923: LD_INT 13
28925: PUSH
28926: LD_INT 14
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: ST_TO_ADDR
28935: GO 29358
28937: LD_INT 28
28939: DOUBLE
28940: EQUAL
28941: IFTRUE 28945
28943: GO 28963
28945: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28946: LD_ADDR_VAR 0 3
28950: PUSH
28951: LD_INT 13
28953: PUSH
28954: LD_INT 14
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: ST_TO_ADDR
28961: GO 29358
28963: LD_INT 29
28965: DOUBLE
28966: EQUAL
28967: IFTRUE 28971
28969: GO 28989
28971: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28972: LD_ADDR_VAR 0 3
28976: PUSH
28977: LD_INT 13
28979: PUSH
28980: LD_INT 14
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: ST_TO_ADDR
28987: GO 29358
28989: LD_INT 31
28991: DOUBLE
28992: EQUAL
28993: IFTRUE 28997
28995: GO 29015
28997: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28998: LD_ADDR_VAR 0 3
29002: PUSH
29003: LD_INT 13
29005: PUSH
29006: LD_INT 14
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: ST_TO_ADDR
29013: GO 29358
29015: LD_INT 26
29017: DOUBLE
29018: EQUAL
29019: IFTRUE 29023
29021: GO 29041
29023: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29024: LD_ADDR_VAR 0 3
29028: PUSH
29029: LD_INT 13
29031: PUSH
29032: LD_INT 14
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: ST_TO_ADDR
29039: GO 29358
29041: LD_INT 42
29043: DOUBLE
29044: EQUAL
29045: IFTRUE 29049
29047: GO 29075
29049: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29050: LD_ADDR_VAR 0 3
29054: PUSH
29055: LD_INT 21
29057: PUSH
29058: LD_INT 22
29060: PUSH
29061: LD_INT 23
29063: PUSH
29064: LD_INT 24
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: ST_TO_ADDR
29073: GO 29358
29075: LD_INT 43
29077: DOUBLE
29078: EQUAL
29079: IFTRUE 29083
29081: GO 29109
29083: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29084: LD_ADDR_VAR 0 3
29088: PUSH
29089: LD_INT 21
29091: PUSH
29092: LD_INT 22
29094: PUSH
29095: LD_INT 23
29097: PUSH
29098: LD_INT 24
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: ST_TO_ADDR
29107: GO 29358
29109: LD_INT 44
29111: DOUBLE
29112: EQUAL
29113: IFTRUE 29117
29115: GO 29143
29117: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29118: LD_ADDR_VAR 0 3
29122: PUSH
29123: LD_INT 21
29125: PUSH
29126: LD_INT 22
29128: PUSH
29129: LD_INT 23
29131: PUSH
29132: LD_INT 24
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: ST_TO_ADDR
29141: GO 29358
29143: LD_INT 45
29145: DOUBLE
29146: EQUAL
29147: IFTRUE 29151
29149: GO 29177
29151: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29152: LD_ADDR_VAR 0 3
29156: PUSH
29157: LD_INT 21
29159: PUSH
29160: LD_INT 22
29162: PUSH
29163: LD_INT 23
29165: PUSH
29166: LD_INT 24
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: ST_TO_ADDR
29175: GO 29358
29177: LD_INT 49
29179: DOUBLE
29180: EQUAL
29181: IFTRUE 29185
29183: GO 29211
29185: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29186: LD_ADDR_VAR 0 3
29190: PUSH
29191: LD_INT 21
29193: PUSH
29194: LD_INT 22
29196: PUSH
29197: LD_INT 23
29199: PUSH
29200: LD_INT 24
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: ST_TO_ADDR
29209: GO 29358
29211: LD_INT 51
29213: DOUBLE
29214: EQUAL
29215: IFTRUE 29219
29217: GO 29245
29219: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29220: LD_ADDR_VAR 0 3
29224: PUSH
29225: LD_INT 21
29227: PUSH
29228: LD_INT 22
29230: PUSH
29231: LD_INT 23
29233: PUSH
29234: LD_INT 24
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: LIST
29241: LIST
29242: ST_TO_ADDR
29243: GO 29358
29245: LD_INT 52
29247: DOUBLE
29248: EQUAL
29249: IFTRUE 29253
29251: GO 29279
29253: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29254: LD_ADDR_VAR 0 3
29258: PUSH
29259: LD_INT 21
29261: PUSH
29262: LD_INT 22
29264: PUSH
29265: LD_INT 23
29267: PUSH
29268: LD_INT 24
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: ST_TO_ADDR
29277: GO 29358
29279: LD_INT 53
29281: DOUBLE
29282: EQUAL
29283: IFTRUE 29287
29285: GO 29305
29287: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29288: LD_ADDR_VAR 0 3
29292: PUSH
29293: LD_INT 23
29295: PUSH
29296: LD_INT 24
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: ST_TO_ADDR
29303: GO 29358
29305: LD_INT 46
29307: DOUBLE
29308: EQUAL
29309: IFTRUE 29313
29311: GO 29331
29313: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29314: LD_ADDR_VAR 0 3
29318: PUSH
29319: LD_INT 23
29321: PUSH
29322: LD_INT 24
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: ST_TO_ADDR
29329: GO 29358
29331: LD_INT 47
29333: DOUBLE
29334: EQUAL
29335: IFTRUE 29339
29337: GO 29357
29339: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29340: LD_ADDR_VAR 0 3
29344: PUSH
29345: LD_INT 23
29347: PUSH
29348: LD_INT 24
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: ST_TO_ADDR
29355: GO 29358
29357: POP
// result := ( chassis in result ) ;
29358: LD_ADDR_VAR 0 3
29362: PUSH
29363: LD_VAR 0 1
29367: PUSH
29368: LD_VAR 0 3
29372: IN
29373: ST_TO_ADDR
// end ;
29374: LD_VAR 0 3
29378: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29379: LD_INT 0
29381: PPUSH
29382: PPUSH
29383: PPUSH
29384: PPUSH
29385: PPUSH
29386: PPUSH
29387: PPUSH
// result := array ;
29388: LD_ADDR_VAR 0 5
29392: PUSH
29393: LD_VAR 0 1
29397: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29398: LD_VAR 0 1
29402: NOT
29403: PUSH
29404: LD_VAR 0 2
29408: NOT
29409: OR
29410: PUSH
29411: LD_VAR 0 3
29415: NOT
29416: OR
29417: PUSH
29418: LD_VAR 0 2
29422: PUSH
29423: LD_VAR 0 1
29427: GREATER
29428: OR
29429: PUSH
29430: LD_VAR 0 3
29434: PUSH
29435: LD_VAR 0 1
29439: GREATER
29440: OR
29441: IFFALSE 29445
// exit ;
29443: GO 29741
// if direction then
29445: LD_VAR 0 4
29449: IFFALSE 29513
// begin d := 1 ;
29451: LD_ADDR_VAR 0 9
29455: PUSH
29456: LD_INT 1
29458: ST_TO_ADDR
// if i_from > i_to then
29459: LD_VAR 0 2
29463: PUSH
29464: LD_VAR 0 3
29468: GREATER
29469: IFFALSE 29495
// length := ( array - i_from ) + i_to else
29471: LD_ADDR_VAR 0 11
29475: PUSH
29476: LD_VAR 0 1
29480: PUSH
29481: LD_VAR 0 2
29485: MINUS
29486: PUSH
29487: LD_VAR 0 3
29491: PLUS
29492: ST_TO_ADDR
29493: GO 29511
// length := i_to - i_from ;
29495: LD_ADDR_VAR 0 11
29499: PUSH
29500: LD_VAR 0 3
29504: PUSH
29505: LD_VAR 0 2
29509: MINUS
29510: ST_TO_ADDR
// end else
29511: GO 29574
// begin d := - 1 ;
29513: LD_ADDR_VAR 0 9
29517: PUSH
29518: LD_INT 1
29520: NEG
29521: ST_TO_ADDR
// if i_from > i_to then
29522: LD_VAR 0 2
29526: PUSH
29527: LD_VAR 0 3
29531: GREATER
29532: IFFALSE 29552
// length := i_from - i_to else
29534: LD_ADDR_VAR 0 11
29538: PUSH
29539: LD_VAR 0 2
29543: PUSH
29544: LD_VAR 0 3
29548: MINUS
29549: ST_TO_ADDR
29550: GO 29574
// length := ( array - i_to ) + i_from ;
29552: LD_ADDR_VAR 0 11
29556: PUSH
29557: LD_VAR 0 1
29561: PUSH
29562: LD_VAR 0 3
29566: MINUS
29567: PUSH
29568: LD_VAR 0 2
29572: PLUS
29573: ST_TO_ADDR
// end ; if not length then
29574: LD_VAR 0 11
29578: NOT
29579: IFFALSE 29583
// exit ;
29581: GO 29741
// tmp := array ;
29583: LD_ADDR_VAR 0 10
29587: PUSH
29588: LD_VAR 0 1
29592: ST_TO_ADDR
// for i = 1 to length do
29593: LD_ADDR_VAR 0 6
29597: PUSH
29598: DOUBLE
29599: LD_INT 1
29601: DEC
29602: ST_TO_ADDR
29603: LD_VAR 0 11
29607: PUSH
29608: FOR_TO
29609: IFFALSE 29729
// begin for j = 1 to array do
29611: LD_ADDR_VAR 0 7
29615: PUSH
29616: DOUBLE
29617: LD_INT 1
29619: DEC
29620: ST_TO_ADDR
29621: LD_VAR 0 1
29625: PUSH
29626: FOR_TO
29627: IFFALSE 29715
// begin k := j + d ;
29629: LD_ADDR_VAR 0 8
29633: PUSH
29634: LD_VAR 0 7
29638: PUSH
29639: LD_VAR 0 9
29643: PLUS
29644: ST_TO_ADDR
// if k > array then
29645: LD_VAR 0 8
29649: PUSH
29650: LD_VAR 0 1
29654: GREATER
29655: IFFALSE 29665
// k := 1 ;
29657: LD_ADDR_VAR 0 8
29661: PUSH
29662: LD_INT 1
29664: ST_TO_ADDR
// if not k then
29665: LD_VAR 0 8
29669: NOT
29670: IFFALSE 29682
// k := array ;
29672: LD_ADDR_VAR 0 8
29676: PUSH
29677: LD_VAR 0 1
29681: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29682: LD_ADDR_VAR 0 10
29686: PUSH
29687: LD_VAR 0 10
29691: PPUSH
29692: LD_VAR 0 8
29696: PPUSH
29697: LD_VAR 0 1
29701: PUSH
29702: LD_VAR 0 7
29706: ARRAY
29707: PPUSH
29708: CALL_OW 1
29712: ST_TO_ADDR
// end ;
29713: GO 29626
29715: POP
29716: POP
// array := tmp ;
29717: LD_ADDR_VAR 0 1
29721: PUSH
29722: LD_VAR 0 10
29726: ST_TO_ADDR
// end ;
29727: GO 29608
29729: POP
29730: POP
// result := array ;
29731: LD_ADDR_VAR 0 5
29735: PUSH
29736: LD_VAR 0 1
29740: ST_TO_ADDR
// end ;
29741: LD_VAR 0 5
29745: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29746: LD_INT 0
29748: PPUSH
29749: PPUSH
// result := 0 ;
29750: LD_ADDR_VAR 0 3
29754: PUSH
29755: LD_INT 0
29757: ST_TO_ADDR
// if not array or not value in array then
29758: LD_VAR 0 1
29762: NOT
29763: PUSH
29764: LD_VAR 0 2
29768: PUSH
29769: LD_VAR 0 1
29773: IN
29774: NOT
29775: OR
29776: IFFALSE 29780
// exit ;
29778: GO 29834
// for i = 1 to array do
29780: LD_ADDR_VAR 0 4
29784: PUSH
29785: DOUBLE
29786: LD_INT 1
29788: DEC
29789: ST_TO_ADDR
29790: LD_VAR 0 1
29794: PUSH
29795: FOR_TO
29796: IFFALSE 29832
// if value = array [ i ] then
29798: LD_VAR 0 2
29802: PUSH
29803: LD_VAR 0 1
29807: PUSH
29808: LD_VAR 0 4
29812: ARRAY
29813: EQUAL
29814: IFFALSE 29830
// begin result := i ;
29816: LD_ADDR_VAR 0 3
29820: PUSH
29821: LD_VAR 0 4
29825: ST_TO_ADDR
// exit ;
29826: POP
29827: POP
29828: GO 29834
// end ;
29830: GO 29795
29832: POP
29833: POP
// end ;
29834: LD_VAR 0 3
29838: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29839: LD_INT 0
29841: PPUSH
// vc_chassis := chassis ;
29842: LD_ADDR_OWVAR 37
29846: PUSH
29847: LD_VAR 0 1
29851: ST_TO_ADDR
// vc_engine := engine ;
29852: LD_ADDR_OWVAR 39
29856: PUSH
29857: LD_VAR 0 2
29861: ST_TO_ADDR
// vc_control := control ;
29862: LD_ADDR_OWVAR 38
29866: PUSH
29867: LD_VAR 0 3
29871: ST_TO_ADDR
// vc_weapon := weapon ;
29872: LD_ADDR_OWVAR 40
29876: PUSH
29877: LD_VAR 0 4
29881: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29882: LD_ADDR_OWVAR 41
29886: PUSH
29887: LD_VAR 0 5
29891: ST_TO_ADDR
// end ;
29892: LD_VAR 0 6
29896: RET
// export function WantPlant ( unit ) ; var task ; begin
29897: LD_INT 0
29899: PPUSH
29900: PPUSH
// result := false ;
29901: LD_ADDR_VAR 0 2
29905: PUSH
29906: LD_INT 0
29908: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29909: LD_ADDR_VAR 0 3
29913: PUSH
29914: LD_VAR 0 1
29918: PPUSH
29919: CALL_OW 437
29923: ST_TO_ADDR
// if task then
29924: LD_VAR 0 3
29928: IFFALSE 29956
// if task [ 1 ] [ 1 ] = p then
29930: LD_VAR 0 3
29934: PUSH
29935: LD_INT 1
29937: ARRAY
29938: PUSH
29939: LD_INT 1
29941: ARRAY
29942: PUSH
29943: LD_STRING p
29945: EQUAL
29946: IFFALSE 29956
// result := true ;
29948: LD_ADDR_VAR 0 2
29952: PUSH
29953: LD_INT 1
29955: ST_TO_ADDR
// end ;
29956: LD_VAR 0 2
29960: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29961: LD_INT 0
29963: PPUSH
29964: PPUSH
29965: PPUSH
29966: PPUSH
// if pos < 1 then
29967: LD_VAR 0 2
29971: PUSH
29972: LD_INT 1
29974: LESS
29975: IFFALSE 29979
// exit ;
29977: GO 30282
// if pos = 1 then
29979: LD_VAR 0 2
29983: PUSH
29984: LD_INT 1
29986: EQUAL
29987: IFFALSE 30020
// result := Replace ( arr , pos [ 1 ] , value ) else
29989: LD_ADDR_VAR 0 4
29993: PUSH
29994: LD_VAR 0 1
29998: PPUSH
29999: LD_VAR 0 2
30003: PUSH
30004: LD_INT 1
30006: ARRAY
30007: PPUSH
30008: LD_VAR 0 3
30012: PPUSH
30013: CALL_OW 1
30017: ST_TO_ADDR
30018: GO 30282
// begin tmp := arr ;
30020: LD_ADDR_VAR 0 6
30024: PUSH
30025: LD_VAR 0 1
30029: ST_TO_ADDR
// s_arr := [ tmp ] ;
30030: LD_ADDR_VAR 0 7
30034: PUSH
30035: LD_VAR 0 6
30039: PUSH
30040: EMPTY
30041: LIST
30042: ST_TO_ADDR
// for i = 1 to pos - 1 do
30043: LD_ADDR_VAR 0 5
30047: PUSH
30048: DOUBLE
30049: LD_INT 1
30051: DEC
30052: ST_TO_ADDR
30053: LD_VAR 0 2
30057: PUSH
30058: LD_INT 1
30060: MINUS
30061: PUSH
30062: FOR_TO
30063: IFFALSE 30108
// begin tmp := tmp [ pos [ i ] ] ;
30065: LD_ADDR_VAR 0 6
30069: PUSH
30070: LD_VAR 0 6
30074: PUSH
30075: LD_VAR 0 2
30079: PUSH
30080: LD_VAR 0 5
30084: ARRAY
30085: ARRAY
30086: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30087: LD_ADDR_VAR 0 7
30091: PUSH
30092: LD_VAR 0 7
30096: PUSH
30097: LD_VAR 0 6
30101: PUSH
30102: EMPTY
30103: LIST
30104: ADD
30105: ST_TO_ADDR
// end ;
30106: GO 30062
30108: POP
30109: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30110: LD_ADDR_VAR 0 6
30114: PUSH
30115: LD_VAR 0 6
30119: PPUSH
30120: LD_VAR 0 2
30124: PUSH
30125: LD_VAR 0 2
30129: ARRAY
30130: PPUSH
30131: LD_VAR 0 3
30135: PPUSH
30136: CALL_OW 1
30140: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30141: LD_ADDR_VAR 0 7
30145: PUSH
30146: LD_VAR 0 7
30150: PPUSH
30151: LD_VAR 0 7
30155: PPUSH
30156: LD_VAR 0 6
30160: PPUSH
30161: CALL_OW 1
30165: ST_TO_ADDR
// for i = s_arr downto 2 do
30166: LD_ADDR_VAR 0 5
30170: PUSH
30171: DOUBLE
30172: LD_VAR 0 7
30176: INC
30177: ST_TO_ADDR
30178: LD_INT 2
30180: PUSH
30181: FOR_DOWNTO
30182: IFFALSE 30266
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30184: LD_ADDR_VAR 0 6
30188: PUSH
30189: LD_VAR 0 7
30193: PUSH
30194: LD_VAR 0 5
30198: PUSH
30199: LD_INT 1
30201: MINUS
30202: ARRAY
30203: PPUSH
30204: LD_VAR 0 2
30208: PUSH
30209: LD_VAR 0 5
30213: PUSH
30214: LD_INT 1
30216: MINUS
30217: ARRAY
30218: PPUSH
30219: LD_VAR 0 7
30223: PUSH
30224: LD_VAR 0 5
30228: ARRAY
30229: PPUSH
30230: CALL_OW 1
30234: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30235: LD_ADDR_VAR 0 7
30239: PUSH
30240: LD_VAR 0 7
30244: PPUSH
30245: LD_VAR 0 5
30249: PUSH
30250: LD_INT 1
30252: MINUS
30253: PPUSH
30254: LD_VAR 0 6
30258: PPUSH
30259: CALL_OW 1
30263: ST_TO_ADDR
// end ;
30264: GO 30181
30266: POP
30267: POP
// result := s_arr [ 1 ] ;
30268: LD_ADDR_VAR 0 4
30272: PUSH
30273: LD_VAR 0 7
30277: PUSH
30278: LD_INT 1
30280: ARRAY
30281: ST_TO_ADDR
// end ; end ;
30282: LD_VAR 0 4
30286: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30287: LD_INT 0
30289: PPUSH
30290: PPUSH
// if not list then
30291: LD_VAR 0 1
30295: NOT
30296: IFFALSE 30300
// exit ;
30298: GO 30391
// i := list [ pos1 ] ;
30300: LD_ADDR_VAR 0 5
30304: PUSH
30305: LD_VAR 0 1
30309: PUSH
30310: LD_VAR 0 2
30314: ARRAY
30315: ST_TO_ADDR
// if not i then
30316: LD_VAR 0 5
30320: NOT
30321: IFFALSE 30325
// exit ;
30323: GO 30391
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30325: LD_ADDR_VAR 0 1
30329: PUSH
30330: LD_VAR 0 1
30334: PPUSH
30335: LD_VAR 0 2
30339: PPUSH
30340: LD_VAR 0 1
30344: PUSH
30345: LD_VAR 0 3
30349: ARRAY
30350: PPUSH
30351: CALL_OW 1
30355: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30356: LD_ADDR_VAR 0 1
30360: PUSH
30361: LD_VAR 0 1
30365: PPUSH
30366: LD_VAR 0 3
30370: PPUSH
30371: LD_VAR 0 5
30375: PPUSH
30376: CALL_OW 1
30380: ST_TO_ADDR
// result := list ;
30381: LD_ADDR_VAR 0 4
30385: PUSH
30386: LD_VAR 0 1
30390: ST_TO_ADDR
// end ;
30391: LD_VAR 0 4
30395: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30396: LD_INT 0
30398: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30399: LD_ADDR_VAR 0 5
30403: PUSH
30404: LD_VAR 0 1
30408: PPUSH
30409: CALL_OW 250
30413: PPUSH
30414: LD_VAR 0 1
30418: PPUSH
30419: CALL_OW 251
30423: PPUSH
30424: LD_VAR 0 2
30428: PPUSH
30429: LD_VAR 0 3
30433: PPUSH
30434: LD_VAR 0 4
30438: PPUSH
30439: CALL 30449 0 5
30443: ST_TO_ADDR
// end ;
30444: LD_VAR 0 5
30448: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30449: LD_INT 0
30451: PPUSH
30452: PPUSH
30453: PPUSH
30454: PPUSH
// if not list then
30455: LD_VAR 0 3
30459: NOT
30460: IFFALSE 30464
// exit ;
30462: GO 30852
// result := [ ] ;
30464: LD_ADDR_VAR 0 6
30468: PUSH
30469: EMPTY
30470: ST_TO_ADDR
// for i in list do
30471: LD_ADDR_VAR 0 7
30475: PUSH
30476: LD_VAR 0 3
30480: PUSH
30481: FOR_IN
30482: IFFALSE 30684
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30484: LD_ADDR_VAR 0 9
30488: PUSH
30489: LD_VAR 0 7
30493: PPUSH
30494: LD_VAR 0 1
30498: PPUSH
30499: LD_VAR 0 2
30503: PPUSH
30504: CALL_OW 297
30508: ST_TO_ADDR
// if not result then
30509: LD_VAR 0 6
30513: NOT
30514: IFFALSE 30540
// result := [ [ i , tmp ] ] else
30516: LD_ADDR_VAR 0 6
30520: PUSH
30521: LD_VAR 0 7
30525: PUSH
30526: LD_VAR 0 9
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: EMPTY
30536: LIST
30537: ST_TO_ADDR
30538: GO 30682
// begin if result [ result ] [ 2 ] < tmp then
30540: LD_VAR 0 6
30544: PUSH
30545: LD_VAR 0 6
30549: ARRAY
30550: PUSH
30551: LD_INT 2
30553: ARRAY
30554: PUSH
30555: LD_VAR 0 9
30559: LESS
30560: IFFALSE 30602
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30562: LD_ADDR_VAR 0 6
30566: PUSH
30567: LD_VAR 0 6
30571: PPUSH
30572: LD_VAR 0 6
30576: PUSH
30577: LD_INT 1
30579: PLUS
30580: PPUSH
30581: LD_VAR 0 7
30585: PUSH
30586: LD_VAR 0 9
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PPUSH
30595: CALL_OW 2
30599: ST_TO_ADDR
30600: GO 30682
// for j = 1 to result do
30602: LD_ADDR_VAR 0 8
30606: PUSH
30607: DOUBLE
30608: LD_INT 1
30610: DEC
30611: ST_TO_ADDR
30612: LD_VAR 0 6
30616: PUSH
30617: FOR_TO
30618: IFFALSE 30680
// begin if tmp < result [ j ] [ 2 ] then
30620: LD_VAR 0 9
30624: PUSH
30625: LD_VAR 0 6
30629: PUSH
30630: LD_VAR 0 8
30634: ARRAY
30635: PUSH
30636: LD_INT 2
30638: ARRAY
30639: LESS
30640: IFFALSE 30678
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30642: LD_ADDR_VAR 0 6
30646: PUSH
30647: LD_VAR 0 6
30651: PPUSH
30652: LD_VAR 0 8
30656: PPUSH
30657: LD_VAR 0 7
30661: PUSH
30662: LD_VAR 0 9
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PPUSH
30671: CALL_OW 2
30675: ST_TO_ADDR
// break ;
30676: GO 30680
// end ; end ;
30678: GO 30617
30680: POP
30681: POP
// end ; end ;
30682: GO 30481
30684: POP
30685: POP
// if result and not asc then
30686: LD_VAR 0 6
30690: PUSH
30691: LD_VAR 0 4
30695: NOT
30696: AND
30697: IFFALSE 30772
// begin tmp := result ;
30699: LD_ADDR_VAR 0 9
30703: PUSH
30704: LD_VAR 0 6
30708: ST_TO_ADDR
// for i = tmp downto 1 do
30709: LD_ADDR_VAR 0 7
30713: PUSH
30714: DOUBLE
30715: LD_VAR 0 9
30719: INC
30720: ST_TO_ADDR
30721: LD_INT 1
30723: PUSH
30724: FOR_DOWNTO
30725: IFFALSE 30770
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30727: LD_ADDR_VAR 0 6
30731: PUSH
30732: LD_VAR 0 6
30736: PPUSH
30737: LD_VAR 0 9
30741: PUSH
30742: LD_VAR 0 7
30746: MINUS
30747: PUSH
30748: LD_INT 1
30750: PLUS
30751: PPUSH
30752: LD_VAR 0 9
30756: PUSH
30757: LD_VAR 0 7
30761: ARRAY
30762: PPUSH
30763: CALL_OW 1
30767: ST_TO_ADDR
30768: GO 30724
30770: POP
30771: POP
// end ; tmp := [ ] ;
30772: LD_ADDR_VAR 0 9
30776: PUSH
30777: EMPTY
30778: ST_TO_ADDR
// if mode then
30779: LD_VAR 0 5
30783: IFFALSE 30852
// begin for i = 1 to result do
30785: LD_ADDR_VAR 0 7
30789: PUSH
30790: DOUBLE
30791: LD_INT 1
30793: DEC
30794: ST_TO_ADDR
30795: LD_VAR 0 6
30799: PUSH
30800: FOR_TO
30801: IFFALSE 30840
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30803: LD_ADDR_VAR 0 9
30807: PUSH
30808: LD_VAR 0 9
30812: PPUSH
30813: LD_VAR 0 7
30817: PPUSH
30818: LD_VAR 0 6
30822: PUSH
30823: LD_VAR 0 7
30827: ARRAY
30828: PUSH
30829: LD_INT 1
30831: ARRAY
30832: PPUSH
30833: CALL_OW 1
30837: ST_TO_ADDR
30838: GO 30800
30840: POP
30841: POP
// result := tmp ;
30842: LD_ADDR_VAR 0 6
30846: PUSH
30847: LD_VAR 0 9
30851: ST_TO_ADDR
// end ; end ;
30852: LD_VAR 0 6
30856: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30857: LD_INT 0
30859: PPUSH
30860: PPUSH
30861: PPUSH
30862: PPUSH
30863: PPUSH
30864: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30865: LD_ADDR_VAR 0 5
30869: PUSH
30870: LD_INT 0
30872: PUSH
30873: LD_INT 0
30875: PUSH
30876: LD_INT 0
30878: PUSH
30879: EMPTY
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: ST_TO_ADDR
// if not x or not y then
30887: LD_VAR 0 2
30891: NOT
30892: PUSH
30893: LD_VAR 0 3
30897: NOT
30898: OR
30899: IFFALSE 30903
// exit ;
30901: GO 32555
// if not range then
30903: LD_VAR 0 4
30907: NOT
30908: IFFALSE 30918
// range := 10 ;
30910: LD_ADDR_VAR 0 4
30914: PUSH
30915: LD_INT 10
30917: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30918: LD_ADDR_VAR 0 8
30922: PUSH
30923: LD_INT 81
30925: PUSH
30926: LD_VAR 0 1
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: LD_INT 92
30937: PUSH
30938: LD_VAR 0 2
30942: PUSH
30943: LD_VAR 0 3
30947: PUSH
30948: LD_VAR 0 4
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 3
30961: PUSH
30962: LD_INT 21
30964: PUSH
30965: LD_INT 3
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: LIST
30980: PPUSH
30981: CALL_OW 69
30985: ST_TO_ADDR
// if not tmp then
30986: LD_VAR 0 8
30990: NOT
30991: IFFALSE 30995
// exit ;
30993: GO 32555
// for i in tmp do
30995: LD_ADDR_VAR 0 6
30999: PUSH
31000: LD_VAR 0 8
31004: PUSH
31005: FOR_IN
31006: IFFALSE 32530
// begin points := [ 0 , 0 , 0 ] ;
31008: LD_ADDR_VAR 0 9
31012: PUSH
31013: LD_INT 0
31015: PUSH
31016: LD_INT 0
31018: PUSH
31019: LD_INT 0
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: LIST
31026: ST_TO_ADDR
// bpoints := 1 ;
31027: LD_ADDR_VAR 0 10
31031: PUSH
31032: LD_INT 1
31034: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31035: LD_VAR 0 6
31039: PPUSH
31040: CALL_OW 247
31044: PUSH
31045: LD_INT 1
31047: DOUBLE
31048: EQUAL
31049: IFTRUE 31053
31051: GO 31631
31053: POP
// begin if GetClass ( i ) = 1 then
31054: LD_VAR 0 6
31058: PPUSH
31059: CALL_OW 257
31063: PUSH
31064: LD_INT 1
31066: EQUAL
31067: IFFALSE 31088
// points := [ 10 , 5 , 3 ] ;
31069: LD_ADDR_VAR 0 9
31073: PUSH
31074: LD_INT 10
31076: PUSH
31077: LD_INT 5
31079: PUSH
31080: LD_INT 3
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: LIST
31087: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31088: LD_VAR 0 6
31092: PPUSH
31093: CALL_OW 257
31097: PUSH
31098: LD_INT 2
31100: PUSH
31101: LD_INT 3
31103: PUSH
31104: LD_INT 4
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: LIST
31111: IN
31112: IFFALSE 31133
// points := [ 3 , 2 , 1 ] ;
31114: LD_ADDR_VAR 0 9
31118: PUSH
31119: LD_INT 3
31121: PUSH
31122: LD_INT 2
31124: PUSH
31125: LD_INT 1
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: LIST
31132: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31133: LD_VAR 0 6
31137: PPUSH
31138: CALL_OW 257
31142: PUSH
31143: LD_INT 5
31145: EQUAL
31146: IFFALSE 31167
// points := [ 130 , 5 , 2 ] ;
31148: LD_ADDR_VAR 0 9
31152: PUSH
31153: LD_INT 130
31155: PUSH
31156: LD_INT 5
31158: PUSH
31159: LD_INT 2
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: LIST
31166: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31167: LD_VAR 0 6
31171: PPUSH
31172: CALL_OW 257
31176: PUSH
31177: LD_INT 8
31179: EQUAL
31180: IFFALSE 31201
// points := [ 35 , 35 , 30 ] ;
31182: LD_ADDR_VAR 0 9
31186: PUSH
31187: LD_INT 35
31189: PUSH
31190: LD_INT 35
31192: PUSH
31193: LD_INT 30
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: LIST
31200: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31201: LD_VAR 0 6
31205: PPUSH
31206: CALL_OW 257
31210: PUSH
31211: LD_INT 9
31213: EQUAL
31214: IFFALSE 31235
// points := [ 20 , 55 , 40 ] ;
31216: LD_ADDR_VAR 0 9
31220: PUSH
31221: LD_INT 20
31223: PUSH
31224: LD_INT 55
31226: PUSH
31227: LD_INT 40
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: LIST
31234: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31235: LD_VAR 0 6
31239: PPUSH
31240: CALL_OW 257
31244: PUSH
31245: LD_INT 12
31247: PUSH
31248: LD_INT 16
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: IN
31255: IFFALSE 31276
// points := [ 5 , 3 , 2 ] ;
31257: LD_ADDR_VAR 0 9
31261: PUSH
31262: LD_INT 5
31264: PUSH
31265: LD_INT 3
31267: PUSH
31268: LD_INT 2
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: LIST
31275: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31276: LD_VAR 0 6
31280: PPUSH
31281: CALL_OW 257
31285: PUSH
31286: LD_INT 17
31288: EQUAL
31289: IFFALSE 31310
// points := [ 100 , 50 , 75 ] ;
31291: LD_ADDR_VAR 0 9
31295: PUSH
31296: LD_INT 100
31298: PUSH
31299: LD_INT 50
31301: PUSH
31302: LD_INT 75
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: LIST
31309: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31310: LD_VAR 0 6
31314: PPUSH
31315: CALL_OW 257
31319: PUSH
31320: LD_INT 15
31322: EQUAL
31323: IFFALSE 31344
// points := [ 10 , 5 , 3 ] ;
31325: LD_ADDR_VAR 0 9
31329: PUSH
31330: LD_INT 10
31332: PUSH
31333: LD_INT 5
31335: PUSH
31336: LD_INT 3
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: LIST
31343: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31344: LD_VAR 0 6
31348: PPUSH
31349: CALL_OW 257
31353: PUSH
31354: LD_INT 14
31356: EQUAL
31357: IFFALSE 31378
// points := [ 10 , 0 , 0 ] ;
31359: LD_ADDR_VAR 0 9
31363: PUSH
31364: LD_INT 10
31366: PUSH
31367: LD_INT 0
31369: PUSH
31370: LD_INT 0
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: LIST
31377: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31378: LD_VAR 0 6
31382: PPUSH
31383: CALL_OW 257
31387: PUSH
31388: LD_INT 11
31390: EQUAL
31391: IFFALSE 31412
// points := [ 30 , 10 , 5 ] ;
31393: LD_ADDR_VAR 0 9
31397: PUSH
31398: LD_INT 30
31400: PUSH
31401: LD_INT 10
31403: PUSH
31404: LD_INT 5
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: LIST
31411: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31412: LD_VAR 0 1
31416: PPUSH
31417: LD_INT 5
31419: PPUSH
31420: CALL_OW 321
31424: PUSH
31425: LD_INT 2
31427: EQUAL
31428: IFFALSE 31445
// bpoints := bpoints * 1.8 ;
31430: LD_ADDR_VAR 0 10
31434: PUSH
31435: LD_VAR 0 10
31439: PUSH
31440: LD_REAL  1.80000000000000E+0000
31443: MUL
31444: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31445: LD_VAR 0 6
31449: PPUSH
31450: CALL_OW 257
31454: PUSH
31455: LD_INT 1
31457: PUSH
31458: LD_INT 2
31460: PUSH
31461: LD_INT 3
31463: PUSH
31464: LD_INT 4
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: IN
31473: PUSH
31474: LD_VAR 0 1
31478: PPUSH
31479: LD_INT 51
31481: PPUSH
31482: CALL_OW 321
31486: PUSH
31487: LD_INT 2
31489: EQUAL
31490: AND
31491: IFFALSE 31508
// bpoints := bpoints * 1.2 ;
31493: LD_ADDR_VAR 0 10
31497: PUSH
31498: LD_VAR 0 10
31502: PUSH
31503: LD_REAL  1.20000000000000E+0000
31506: MUL
31507: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31508: LD_VAR 0 6
31512: PPUSH
31513: CALL_OW 257
31517: PUSH
31518: LD_INT 5
31520: PUSH
31521: LD_INT 7
31523: PUSH
31524: LD_INT 9
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: LIST
31531: IN
31532: PUSH
31533: LD_VAR 0 1
31537: PPUSH
31538: LD_INT 52
31540: PPUSH
31541: CALL_OW 321
31545: PUSH
31546: LD_INT 2
31548: EQUAL
31549: AND
31550: IFFALSE 31567
// bpoints := bpoints * 1.5 ;
31552: LD_ADDR_VAR 0 10
31556: PUSH
31557: LD_VAR 0 10
31561: PUSH
31562: LD_REAL  1.50000000000000E+0000
31565: MUL
31566: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31567: LD_VAR 0 1
31571: PPUSH
31572: LD_INT 66
31574: PPUSH
31575: CALL_OW 321
31579: PUSH
31580: LD_INT 2
31582: EQUAL
31583: IFFALSE 31600
// bpoints := bpoints * 1.1 ;
31585: LD_ADDR_VAR 0 10
31589: PUSH
31590: LD_VAR 0 10
31594: PUSH
31595: LD_REAL  1.10000000000000E+0000
31598: MUL
31599: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31600: LD_ADDR_VAR 0 10
31604: PUSH
31605: LD_VAR 0 10
31609: PUSH
31610: LD_VAR 0 6
31614: PPUSH
31615: LD_INT 1
31617: PPUSH
31618: CALL_OW 259
31622: PUSH
31623: LD_REAL  1.15000000000000E+0000
31626: MUL
31627: MUL
31628: ST_TO_ADDR
// end ; unit_vehicle :
31629: GO 32459
31631: LD_INT 2
31633: DOUBLE
31634: EQUAL
31635: IFTRUE 31639
31637: GO 32447
31639: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31640: LD_VAR 0 6
31644: PPUSH
31645: CALL_OW 264
31649: PUSH
31650: LD_INT 2
31652: PUSH
31653: LD_INT 42
31655: PUSH
31656: LD_INT 24
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: LIST
31663: IN
31664: IFFALSE 31685
// points := [ 25 , 5 , 3 ] ;
31666: LD_ADDR_VAR 0 9
31670: PUSH
31671: LD_INT 25
31673: PUSH
31674: LD_INT 5
31676: PUSH
31677: LD_INT 3
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: LIST
31684: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31685: LD_VAR 0 6
31689: PPUSH
31690: CALL_OW 264
31694: PUSH
31695: LD_INT 4
31697: PUSH
31698: LD_INT 43
31700: PUSH
31701: LD_INT 25
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: LIST
31708: IN
31709: IFFALSE 31730
// points := [ 40 , 15 , 5 ] ;
31711: LD_ADDR_VAR 0 9
31715: PUSH
31716: LD_INT 40
31718: PUSH
31719: LD_INT 15
31721: PUSH
31722: LD_INT 5
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: LIST
31729: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31730: LD_VAR 0 6
31734: PPUSH
31735: CALL_OW 264
31739: PUSH
31740: LD_INT 3
31742: PUSH
31743: LD_INT 23
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: IN
31750: IFFALSE 31771
// points := [ 7 , 25 , 8 ] ;
31752: LD_ADDR_VAR 0 9
31756: PUSH
31757: LD_INT 7
31759: PUSH
31760: LD_INT 25
31762: PUSH
31763: LD_INT 8
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: LIST
31770: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31771: LD_VAR 0 6
31775: PPUSH
31776: CALL_OW 264
31780: PUSH
31781: LD_INT 5
31783: PUSH
31784: LD_INT 27
31786: PUSH
31787: LD_INT 44
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: LIST
31794: IN
31795: IFFALSE 31816
// points := [ 14 , 50 , 16 ] ;
31797: LD_ADDR_VAR 0 9
31801: PUSH
31802: LD_INT 14
31804: PUSH
31805: LD_INT 50
31807: PUSH
31808: LD_INT 16
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: LIST
31815: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31816: LD_VAR 0 6
31820: PPUSH
31821: CALL_OW 264
31825: PUSH
31826: LD_INT 6
31828: PUSH
31829: LD_INT 46
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: IN
31836: IFFALSE 31857
// points := [ 32 , 120 , 70 ] ;
31838: LD_ADDR_VAR 0 9
31842: PUSH
31843: LD_INT 32
31845: PUSH
31846: LD_INT 120
31848: PUSH
31849: LD_INT 70
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: LIST
31856: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31857: LD_VAR 0 6
31861: PPUSH
31862: CALL_OW 264
31866: PUSH
31867: LD_INT 7
31869: PUSH
31870: LD_INT 28
31872: PUSH
31873: LD_INT 45
31875: PUSH
31876: LD_EXP 98
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: IN
31887: IFFALSE 31908
// points := [ 35 , 20 , 45 ] ;
31889: LD_ADDR_VAR 0 9
31893: PUSH
31894: LD_INT 35
31896: PUSH
31897: LD_INT 20
31899: PUSH
31900: LD_INT 45
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: LIST
31907: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31908: LD_VAR 0 6
31912: PPUSH
31913: CALL_OW 264
31917: PUSH
31918: LD_INT 47
31920: PUSH
31921: EMPTY
31922: LIST
31923: IN
31924: IFFALSE 31945
// points := [ 67 , 45 , 75 ] ;
31926: LD_ADDR_VAR 0 9
31930: PUSH
31931: LD_INT 67
31933: PUSH
31934: LD_INT 45
31936: PUSH
31937: LD_INT 75
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: LIST
31944: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31945: LD_VAR 0 6
31949: PPUSH
31950: CALL_OW 264
31954: PUSH
31955: LD_INT 26
31957: PUSH
31958: EMPTY
31959: LIST
31960: IN
31961: IFFALSE 31982
// points := [ 120 , 30 , 80 ] ;
31963: LD_ADDR_VAR 0 9
31967: PUSH
31968: LD_INT 120
31970: PUSH
31971: LD_INT 30
31973: PUSH
31974: LD_INT 80
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: LIST
31981: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31982: LD_VAR 0 6
31986: PPUSH
31987: CALL_OW 264
31991: PUSH
31992: LD_INT 22
31994: PUSH
31995: EMPTY
31996: LIST
31997: IN
31998: IFFALSE 32019
// points := [ 40 , 1 , 1 ] ;
32000: LD_ADDR_VAR 0 9
32004: PUSH
32005: LD_INT 40
32007: PUSH
32008: LD_INT 1
32010: PUSH
32011: LD_INT 1
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: LIST
32018: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32019: LD_VAR 0 6
32023: PPUSH
32024: CALL_OW 264
32028: PUSH
32029: LD_INT 29
32031: PUSH
32032: EMPTY
32033: LIST
32034: IN
32035: IFFALSE 32056
// points := [ 70 , 200 , 400 ] ;
32037: LD_ADDR_VAR 0 9
32041: PUSH
32042: LD_INT 70
32044: PUSH
32045: LD_INT 200
32047: PUSH
32048: LD_INT 400
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: LIST
32055: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32056: LD_VAR 0 6
32060: PPUSH
32061: CALL_OW 264
32065: PUSH
32066: LD_INT 14
32068: PUSH
32069: LD_INT 53
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: IN
32076: IFFALSE 32097
// points := [ 40 , 10 , 20 ] ;
32078: LD_ADDR_VAR 0 9
32082: PUSH
32083: LD_INT 40
32085: PUSH
32086: LD_INT 10
32088: PUSH
32089: LD_INT 20
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: LIST
32096: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32097: LD_VAR 0 6
32101: PPUSH
32102: CALL_OW 264
32106: PUSH
32107: LD_INT 9
32109: PUSH
32110: EMPTY
32111: LIST
32112: IN
32113: IFFALSE 32134
// points := [ 5 , 70 , 20 ] ;
32115: LD_ADDR_VAR 0 9
32119: PUSH
32120: LD_INT 5
32122: PUSH
32123: LD_INT 70
32125: PUSH
32126: LD_INT 20
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: LIST
32133: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32134: LD_VAR 0 6
32138: PPUSH
32139: CALL_OW 264
32143: PUSH
32144: LD_INT 10
32146: PUSH
32147: EMPTY
32148: LIST
32149: IN
32150: IFFALSE 32171
// points := [ 35 , 110 , 70 ] ;
32152: LD_ADDR_VAR 0 9
32156: PUSH
32157: LD_INT 35
32159: PUSH
32160: LD_INT 110
32162: PUSH
32163: LD_INT 70
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: LIST
32170: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32171: LD_VAR 0 6
32175: PPUSH
32176: CALL_OW 265
32180: PUSH
32181: LD_INT 25
32183: EQUAL
32184: IFFALSE 32205
// points := [ 80 , 65 , 100 ] ;
32186: LD_ADDR_VAR 0 9
32190: PUSH
32191: LD_INT 80
32193: PUSH
32194: LD_INT 65
32196: PUSH
32197: LD_INT 100
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: LIST
32204: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32205: LD_VAR 0 6
32209: PPUSH
32210: CALL_OW 263
32214: PUSH
32215: LD_INT 1
32217: EQUAL
32218: IFFALSE 32253
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32220: LD_ADDR_VAR 0 10
32224: PUSH
32225: LD_VAR 0 10
32229: PUSH
32230: LD_VAR 0 6
32234: PPUSH
32235: CALL_OW 311
32239: PPUSH
32240: LD_INT 3
32242: PPUSH
32243: CALL_OW 259
32247: PUSH
32248: LD_INT 4
32250: MUL
32251: MUL
32252: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32253: LD_VAR 0 6
32257: PPUSH
32258: CALL_OW 263
32262: PUSH
32263: LD_INT 2
32265: EQUAL
32266: IFFALSE 32317
// begin j := IsControledBy ( i ) ;
32268: LD_ADDR_VAR 0 7
32272: PUSH
32273: LD_VAR 0 6
32277: PPUSH
32278: CALL_OW 312
32282: ST_TO_ADDR
// if j then
32283: LD_VAR 0 7
32287: IFFALSE 32317
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32289: LD_ADDR_VAR 0 10
32293: PUSH
32294: LD_VAR 0 10
32298: PUSH
32299: LD_VAR 0 7
32303: PPUSH
32304: LD_INT 3
32306: PPUSH
32307: CALL_OW 259
32311: PUSH
32312: LD_INT 3
32314: MUL
32315: MUL
32316: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32317: LD_VAR 0 6
32321: PPUSH
32322: CALL_OW 264
32326: PUSH
32327: LD_INT 5
32329: PUSH
32330: LD_INT 6
32332: PUSH
32333: LD_INT 46
32335: PUSH
32336: LD_INT 44
32338: PUSH
32339: LD_INT 47
32341: PUSH
32342: LD_INT 45
32344: PUSH
32345: LD_INT 28
32347: PUSH
32348: LD_INT 7
32350: PUSH
32351: LD_INT 27
32353: PUSH
32354: LD_INT 29
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: IN
32369: PUSH
32370: LD_VAR 0 1
32374: PPUSH
32375: LD_INT 52
32377: PPUSH
32378: CALL_OW 321
32382: PUSH
32383: LD_INT 2
32385: EQUAL
32386: AND
32387: IFFALSE 32404
// bpoints := bpoints * 1.2 ;
32389: LD_ADDR_VAR 0 10
32393: PUSH
32394: LD_VAR 0 10
32398: PUSH
32399: LD_REAL  1.20000000000000E+0000
32402: MUL
32403: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32404: LD_VAR 0 6
32408: PPUSH
32409: CALL_OW 264
32413: PUSH
32414: LD_INT 6
32416: PUSH
32417: LD_INT 46
32419: PUSH
32420: LD_INT 47
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: LIST
32427: IN
32428: IFFALSE 32445
// bpoints := bpoints * 1.2 ;
32430: LD_ADDR_VAR 0 10
32434: PUSH
32435: LD_VAR 0 10
32439: PUSH
32440: LD_REAL  1.20000000000000E+0000
32443: MUL
32444: ST_TO_ADDR
// end ; unit_building :
32445: GO 32459
32447: LD_INT 3
32449: DOUBLE
32450: EQUAL
32451: IFTRUE 32455
32453: GO 32458
32455: POP
// ; end ;
32456: GO 32459
32458: POP
// for j = 1 to 3 do
32459: LD_ADDR_VAR 0 7
32463: PUSH
32464: DOUBLE
32465: LD_INT 1
32467: DEC
32468: ST_TO_ADDR
32469: LD_INT 3
32471: PUSH
32472: FOR_TO
32473: IFFALSE 32526
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32475: LD_ADDR_VAR 0 5
32479: PUSH
32480: LD_VAR 0 5
32484: PPUSH
32485: LD_VAR 0 7
32489: PPUSH
32490: LD_VAR 0 5
32494: PUSH
32495: LD_VAR 0 7
32499: ARRAY
32500: PUSH
32501: LD_VAR 0 9
32505: PUSH
32506: LD_VAR 0 7
32510: ARRAY
32511: PUSH
32512: LD_VAR 0 10
32516: MUL
32517: PLUS
32518: PPUSH
32519: CALL_OW 1
32523: ST_TO_ADDR
32524: GO 32472
32526: POP
32527: POP
// end ;
32528: GO 31005
32530: POP
32531: POP
// result := Replace ( result , 4 , tmp ) ;
32532: LD_ADDR_VAR 0 5
32536: PUSH
32537: LD_VAR 0 5
32541: PPUSH
32542: LD_INT 4
32544: PPUSH
32545: LD_VAR 0 8
32549: PPUSH
32550: CALL_OW 1
32554: ST_TO_ADDR
// end ;
32555: LD_VAR 0 5
32559: RET
// export function DangerAtRange ( unit , range ) ; begin
32560: LD_INT 0
32562: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32563: LD_ADDR_VAR 0 3
32567: PUSH
32568: LD_VAR 0 1
32572: PPUSH
32573: CALL_OW 255
32577: PPUSH
32578: LD_VAR 0 1
32582: PPUSH
32583: CALL_OW 250
32587: PPUSH
32588: LD_VAR 0 1
32592: PPUSH
32593: CALL_OW 251
32597: PPUSH
32598: LD_VAR 0 2
32602: PPUSH
32603: CALL 30857 0 4
32607: ST_TO_ADDR
// end ;
32608: LD_VAR 0 3
32612: RET
// export function DangerInArea ( side , area ) ; begin
32613: LD_INT 0
32615: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32616: LD_ADDR_VAR 0 3
32620: PUSH
32621: LD_VAR 0 2
32625: PPUSH
32626: LD_INT 81
32628: PUSH
32629: LD_VAR 0 1
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PPUSH
32638: CALL_OW 70
32642: ST_TO_ADDR
// end ;
32643: LD_VAR 0 3
32647: RET
// export function IsExtension ( b ) ; begin
32648: LD_INT 0
32650: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32651: LD_ADDR_VAR 0 2
32655: PUSH
32656: LD_VAR 0 1
32660: PUSH
32661: LD_INT 23
32663: PUSH
32664: LD_INT 20
32666: PUSH
32667: LD_INT 22
32669: PUSH
32670: LD_INT 17
32672: PUSH
32673: LD_INT 24
32675: PUSH
32676: LD_INT 21
32678: PUSH
32679: LD_INT 19
32681: PUSH
32682: LD_INT 16
32684: PUSH
32685: LD_INT 25
32687: PUSH
32688: LD_INT 18
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: IN
32703: ST_TO_ADDR
// end ;
32704: LD_VAR 0 2
32708: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32709: LD_INT 0
32711: PPUSH
32712: PPUSH
32713: PPUSH
// result := [ ] ;
32714: LD_ADDR_VAR 0 4
32718: PUSH
32719: EMPTY
32720: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32721: LD_ADDR_VAR 0 5
32725: PUSH
32726: LD_VAR 0 2
32730: PPUSH
32731: LD_INT 21
32733: PUSH
32734: LD_INT 3
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PPUSH
32741: CALL_OW 70
32745: ST_TO_ADDR
// if not tmp then
32746: LD_VAR 0 5
32750: NOT
32751: IFFALSE 32755
// exit ;
32753: GO 32819
// if checkLink then
32755: LD_VAR 0 3
32759: IFFALSE 32809
// begin for i in tmp do
32761: LD_ADDR_VAR 0 6
32765: PUSH
32766: LD_VAR 0 5
32770: PUSH
32771: FOR_IN
32772: IFFALSE 32807
// if GetBase ( i ) <> base then
32774: LD_VAR 0 6
32778: PPUSH
32779: CALL_OW 274
32783: PUSH
32784: LD_VAR 0 1
32788: NONEQUAL
32789: IFFALSE 32805
// ComLinkToBase ( base , i ) ;
32791: LD_VAR 0 1
32795: PPUSH
32796: LD_VAR 0 6
32800: PPUSH
32801: CALL_OW 169
32805: GO 32771
32807: POP
32808: POP
// end ; result := tmp ;
32809: LD_ADDR_VAR 0 4
32813: PUSH
32814: LD_VAR 0 5
32818: ST_TO_ADDR
// end ;
32819: LD_VAR 0 4
32823: RET
// export function ComComplete ( units , b ) ; var i ; begin
32824: LD_INT 0
32826: PPUSH
32827: PPUSH
// if not units then
32828: LD_VAR 0 1
32832: NOT
32833: IFFALSE 32837
// exit ;
32835: GO 32927
// for i in units do
32837: LD_ADDR_VAR 0 4
32841: PUSH
32842: LD_VAR 0 1
32846: PUSH
32847: FOR_IN
32848: IFFALSE 32925
// if BuildingStatus ( b ) = bs_build then
32850: LD_VAR 0 2
32854: PPUSH
32855: CALL_OW 461
32859: PUSH
32860: LD_INT 1
32862: EQUAL
32863: IFFALSE 32923
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32865: LD_VAR 0 4
32869: PPUSH
32870: LD_STRING h
32872: PUSH
32873: LD_VAR 0 2
32877: PPUSH
32878: CALL_OW 250
32882: PUSH
32883: LD_VAR 0 2
32887: PPUSH
32888: CALL_OW 251
32892: PUSH
32893: LD_VAR 0 2
32897: PUSH
32898: LD_INT 0
32900: PUSH
32901: LD_INT 0
32903: PUSH
32904: LD_INT 0
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: PUSH
32916: EMPTY
32917: LIST
32918: PPUSH
32919: CALL_OW 446
32923: GO 32847
32925: POP
32926: POP
// end ;
32927: LD_VAR 0 3
32931: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32932: LD_INT 0
32934: PPUSH
32935: PPUSH
32936: PPUSH
32937: PPUSH
32938: PPUSH
32939: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32940: LD_VAR 0 1
32944: NOT
32945: PUSH
32946: LD_VAR 0 1
32950: PPUSH
32951: CALL_OW 263
32955: PUSH
32956: LD_INT 2
32958: NONEQUAL
32959: OR
32960: IFFALSE 32964
// exit ;
32962: GO 33280
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32964: LD_ADDR_VAR 0 6
32968: PUSH
32969: LD_INT 22
32971: PUSH
32972: LD_VAR 0 1
32976: PPUSH
32977: CALL_OW 255
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 2
32988: PUSH
32989: LD_INT 30
32991: PUSH
32992: LD_INT 36
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 34
33001: PUSH
33002: LD_INT 31
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: LIST
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PPUSH
33018: CALL_OW 69
33022: ST_TO_ADDR
// if not tmp then
33023: LD_VAR 0 6
33027: NOT
33028: IFFALSE 33032
// exit ;
33030: GO 33280
// result := [ ] ;
33032: LD_ADDR_VAR 0 2
33036: PUSH
33037: EMPTY
33038: ST_TO_ADDR
// for i in tmp do
33039: LD_ADDR_VAR 0 3
33043: PUSH
33044: LD_VAR 0 6
33048: PUSH
33049: FOR_IN
33050: IFFALSE 33121
// begin t := UnitsInside ( i ) ;
33052: LD_ADDR_VAR 0 4
33056: PUSH
33057: LD_VAR 0 3
33061: PPUSH
33062: CALL_OW 313
33066: ST_TO_ADDR
// if t then
33067: LD_VAR 0 4
33071: IFFALSE 33119
// for j in t do
33073: LD_ADDR_VAR 0 7
33077: PUSH
33078: LD_VAR 0 4
33082: PUSH
33083: FOR_IN
33084: IFFALSE 33117
// result := Replace ( result , result + 1 , j ) ;
33086: LD_ADDR_VAR 0 2
33090: PUSH
33091: LD_VAR 0 2
33095: PPUSH
33096: LD_VAR 0 2
33100: PUSH
33101: LD_INT 1
33103: PLUS
33104: PPUSH
33105: LD_VAR 0 7
33109: PPUSH
33110: CALL_OW 1
33114: ST_TO_ADDR
33115: GO 33083
33117: POP
33118: POP
// end ;
33119: GO 33049
33121: POP
33122: POP
// if not result then
33123: LD_VAR 0 2
33127: NOT
33128: IFFALSE 33132
// exit ;
33130: GO 33280
// mech := result [ 1 ] ;
33132: LD_ADDR_VAR 0 5
33136: PUSH
33137: LD_VAR 0 2
33141: PUSH
33142: LD_INT 1
33144: ARRAY
33145: ST_TO_ADDR
// if result > 1 then
33146: LD_VAR 0 2
33150: PUSH
33151: LD_INT 1
33153: GREATER
33154: IFFALSE 33266
// begin for i = 2 to result do
33156: LD_ADDR_VAR 0 3
33160: PUSH
33161: DOUBLE
33162: LD_INT 2
33164: DEC
33165: ST_TO_ADDR
33166: LD_VAR 0 2
33170: PUSH
33171: FOR_TO
33172: IFFALSE 33264
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33174: LD_ADDR_VAR 0 4
33178: PUSH
33179: LD_VAR 0 2
33183: PUSH
33184: LD_VAR 0 3
33188: ARRAY
33189: PPUSH
33190: LD_INT 3
33192: PPUSH
33193: CALL_OW 259
33197: PUSH
33198: LD_VAR 0 2
33202: PUSH
33203: LD_VAR 0 3
33207: ARRAY
33208: PPUSH
33209: CALL_OW 432
33213: MINUS
33214: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33215: LD_VAR 0 4
33219: PUSH
33220: LD_VAR 0 5
33224: PPUSH
33225: LD_INT 3
33227: PPUSH
33228: CALL_OW 259
33232: PUSH
33233: LD_VAR 0 5
33237: PPUSH
33238: CALL_OW 432
33242: MINUS
33243: GREATEREQUAL
33244: IFFALSE 33262
// mech := result [ i ] ;
33246: LD_ADDR_VAR 0 5
33250: PUSH
33251: LD_VAR 0 2
33255: PUSH
33256: LD_VAR 0 3
33260: ARRAY
33261: ST_TO_ADDR
// end ;
33262: GO 33171
33264: POP
33265: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33266: LD_VAR 0 1
33270: PPUSH
33271: LD_VAR 0 5
33275: PPUSH
33276: CALL_OW 135
// end ;
33280: LD_VAR 0 2
33284: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33285: LD_INT 0
33287: PPUSH
33288: PPUSH
33289: PPUSH
33290: PPUSH
33291: PPUSH
33292: PPUSH
33293: PPUSH
33294: PPUSH
33295: PPUSH
33296: PPUSH
33297: PPUSH
33298: PPUSH
33299: PPUSH
// result := [ ] ;
33300: LD_ADDR_VAR 0 7
33304: PUSH
33305: EMPTY
33306: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33307: LD_VAR 0 1
33311: PPUSH
33312: CALL_OW 266
33316: PUSH
33317: LD_INT 0
33319: PUSH
33320: LD_INT 1
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: IN
33327: NOT
33328: IFFALSE 33332
// exit ;
33330: GO 34966
// if name then
33332: LD_VAR 0 3
33336: IFFALSE 33352
// SetBName ( base_dep , name ) ;
33338: LD_VAR 0 1
33342: PPUSH
33343: LD_VAR 0 3
33347: PPUSH
33348: CALL_OW 500
// base := GetBase ( base_dep ) ;
33352: LD_ADDR_VAR 0 15
33356: PUSH
33357: LD_VAR 0 1
33361: PPUSH
33362: CALL_OW 274
33366: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33367: LD_ADDR_VAR 0 16
33371: PUSH
33372: LD_VAR 0 1
33376: PPUSH
33377: CALL_OW 255
33381: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33382: LD_ADDR_VAR 0 17
33386: PUSH
33387: LD_VAR 0 1
33391: PPUSH
33392: CALL_OW 248
33396: ST_TO_ADDR
// if sources then
33397: LD_VAR 0 5
33401: IFFALSE 33448
// for i = 1 to 3 do
33403: LD_ADDR_VAR 0 8
33407: PUSH
33408: DOUBLE
33409: LD_INT 1
33411: DEC
33412: ST_TO_ADDR
33413: LD_INT 3
33415: PUSH
33416: FOR_TO
33417: IFFALSE 33446
// AddResourceType ( base , i , sources [ i ] ) ;
33419: LD_VAR 0 15
33423: PPUSH
33424: LD_VAR 0 8
33428: PPUSH
33429: LD_VAR 0 5
33433: PUSH
33434: LD_VAR 0 8
33438: ARRAY
33439: PPUSH
33440: CALL_OW 276
33444: GO 33416
33446: POP
33447: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33448: LD_ADDR_VAR 0 18
33452: PUSH
33453: LD_VAR 0 15
33457: PPUSH
33458: LD_VAR 0 2
33462: PPUSH
33463: LD_INT 1
33465: PPUSH
33466: CALL 32709 0 3
33470: ST_TO_ADDR
// InitHc ;
33471: CALL_OW 19
// InitUc ;
33475: CALL_OW 18
// uc_side := side ;
33479: LD_ADDR_OWVAR 20
33483: PUSH
33484: LD_VAR 0 16
33488: ST_TO_ADDR
// uc_nation := nation ;
33489: LD_ADDR_OWVAR 21
33493: PUSH
33494: LD_VAR 0 17
33498: ST_TO_ADDR
// if buildings then
33499: LD_VAR 0 18
33503: IFFALSE 34825
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33505: LD_ADDR_VAR 0 19
33509: PUSH
33510: LD_VAR 0 18
33514: PPUSH
33515: LD_INT 2
33517: PUSH
33518: LD_INT 30
33520: PUSH
33521: LD_INT 29
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 30
33530: PUSH
33531: LD_INT 30
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: LIST
33542: PPUSH
33543: CALL_OW 72
33547: ST_TO_ADDR
// if tmp then
33548: LD_VAR 0 19
33552: IFFALSE 33600
// for i in tmp do
33554: LD_ADDR_VAR 0 8
33558: PUSH
33559: LD_VAR 0 19
33563: PUSH
33564: FOR_IN
33565: IFFALSE 33598
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33567: LD_VAR 0 8
33571: PPUSH
33572: CALL_OW 250
33576: PPUSH
33577: LD_VAR 0 8
33581: PPUSH
33582: CALL_OW 251
33586: PPUSH
33587: LD_VAR 0 16
33591: PPUSH
33592: CALL_OW 441
33596: GO 33564
33598: POP
33599: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33600: LD_VAR 0 18
33604: PPUSH
33605: LD_INT 2
33607: PUSH
33608: LD_INT 30
33610: PUSH
33611: LD_INT 32
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 30
33620: PUSH
33621: LD_INT 33
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: LIST
33632: PPUSH
33633: CALL_OW 72
33637: IFFALSE 33725
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33639: LD_ADDR_VAR 0 8
33643: PUSH
33644: LD_VAR 0 18
33648: PPUSH
33649: LD_INT 2
33651: PUSH
33652: LD_INT 30
33654: PUSH
33655: LD_INT 32
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 30
33664: PUSH
33665: LD_INT 33
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: LIST
33676: PPUSH
33677: CALL_OW 72
33681: PUSH
33682: FOR_IN
33683: IFFALSE 33723
// begin if not GetBWeapon ( i ) then
33685: LD_VAR 0 8
33689: PPUSH
33690: CALL_OW 269
33694: NOT
33695: IFFALSE 33721
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33697: LD_VAR 0 8
33701: PPUSH
33702: LD_VAR 0 8
33706: PPUSH
33707: LD_VAR 0 2
33711: PPUSH
33712: CALL 34971 0 2
33716: PPUSH
33717: CALL_OW 431
// end ;
33721: GO 33682
33723: POP
33724: POP
// end ; for i = 1 to personel do
33725: LD_ADDR_VAR 0 8
33729: PUSH
33730: DOUBLE
33731: LD_INT 1
33733: DEC
33734: ST_TO_ADDR
33735: LD_VAR 0 6
33739: PUSH
33740: FOR_TO
33741: IFFALSE 34805
// begin if i > 4 then
33743: LD_VAR 0 8
33747: PUSH
33748: LD_INT 4
33750: GREATER
33751: IFFALSE 33755
// break ;
33753: GO 34805
// case i of 1 :
33755: LD_VAR 0 8
33759: PUSH
33760: LD_INT 1
33762: DOUBLE
33763: EQUAL
33764: IFTRUE 33768
33766: GO 33848
33768: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33769: LD_ADDR_VAR 0 12
33773: PUSH
33774: LD_VAR 0 18
33778: PPUSH
33779: LD_INT 22
33781: PUSH
33782: LD_VAR 0 16
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 58
33793: PUSH
33794: EMPTY
33795: LIST
33796: PUSH
33797: LD_INT 2
33799: PUSH
33800: LD_INT 30
33802: PUSH
33803: LD_INT 32
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 30
33812: PUSH
33813: LD_INT 4
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 30
33822: PUSH
33823: LD_INT 5
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: LIST
33840: PPUSH
33841: CALL_OW 72
33845: ST_TO_ADDR
33846: GO 34070
33848: LD_INT 2
33850: DOUBLE
33851: EQUAL
33852: IFTRUE 33856
33854: GO 33918
33856: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33857: LD_ADDR_VAR 0 12
33861: PUSH
33862: LD_VAR 0 18
33866: PPUSH
33867: LD_INT 22
33869: PUSH
33870: LD_VAR 0 16
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 2
33881: PUSH
33882: LD_INT 30
33884: PUSH
33885: LD_INT 0
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 30
33894: PUSH
33895: LD_INT 1
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: LIST
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PPUSH
33911: CALL_OW 72
33915: ST_TO_ADDR
33916: GO 34070
33918: LD_INT 3
33920: DOUBLE
33921: EQUAL
33922: IFTRUE 33926
33924: GO 33988
33926: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33927: LD_ADDR_VAR 0 12
33931: PUSH
33932: LD_VAR 0 18
33936: PPUSH
33937: LD_INT 22
33939: PUSH
33940: LD_VAR 0 16
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 2
33951: PUSH
33952: LD_INT 30
33954: PUSH
33955: LD_INT 2
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 30
33964: PUSH
33965: LD_INT 3
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: LIST
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PPUSH
33981: CALL_OW 72
33985: ST_TO_ADDR
33986: GO 34070
33988: LD_INT 4
33990: DOUBLE
33991: EQUAL
33992: IFTRUE 33996
33994: GO 34069
33996: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33997: LD_ADDR_VAR 0 12
34001: PUSH
34002: LD_VAR 0 18
34006: PPUSH
34007: LD_INT 22
34009: PUSH
34010: LD_VAR 0 16
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 2
34021: PUSH
34022: LD_INT 30
34024: PUSH
34025: LD_INT 6
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 30
34034: PUSH
34035: LD_INT 7
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 30
34044: PUSH
34045: LD_INT 8
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PPUSH
34062: CALL_OW 72
34066: ST_TO_ADDR
34067: GO 34070
34069: POP
// if i = 1 then
34070: LD_VAR 0 8
34074: PUSH
34075: LD_INT 1
34077: EQUAL
34078: IFFALSE 34189
// begin tmp := [ ] ;
34080: LD_ADDR_VAR 0 19
34084: PUSH
34085: EMPTY
34086: ST_TO_ADDR
// for j in f do
34087: LD_ADDR_VAR 0 9
34091: PUSH
34092: LD_VAR 0 12
34096: PUSH
34097: FOR_IN
34098: IFFALSE 34171
// if GetBType ( j ) = b_bunker then
34100: LD_VAR 0 9
34104: PPUSH
34105: CALL_OW 266
34109: PUSH
34110: LD_INT 32
34112: EQUAL
34113: IFFALSE 34140
// tmp := Insert ( tmp , 1 , j ) else
34115: LD_ADDR_VAR 0 19
34119: PUSH
34120: LD_VAR 0 19
34124: PPUSH
34125: LD_INT 1
34127: PPUSH
34128: LD_VAR 0 9
34132: PPUSH
34133: CALL_OW 2
34137: ST_TO_ADDR
34138: GO 34169
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34140: LD_ADDR_VAR 0 19
34144: PUSH
34145: LD_VAR 0 19
34149: PPUSH
34150: LD_VAR 0 19
34154: PUSH
34155: LD_INT 1
34157: PLUS
34158: PPUSH
34159: LD_VAR 0 9
34163: PPUSH
34164: CALL_OW 2
34168: ST_TO_ADDR
34169: GO 34097
34171: POP
34172: POP
// if tmp then
34173: LD_VAR 0 19
34177: IFFALSE 34189
// f := tmp ;
34179: LD_ADDR_VAR 0 12
34183: PUSH
34184: LD_VAR 0 19
34188: ST_TO_ADDR
// end ; x := personel [ i ] ;
34189: LD_ADDR_VAR 0 13
34193: PUSH
34194: LD_VAR 0 6
34198: PUSH
34199: LD_VAR 0 8
34203: ARRAY
34204: ST_TO_ADDR
// if x = - 1 then
34205: LD_VAR 0 13
34209: PUSH
34210: LD_INT 1
34212: NEG
34213: EQUAL
34214: IFFALSE 34423
// begin for j in f do
34216: LD_ADDR_VAR 0 9
34220: PUSH
34221: LD_VAR 0 12
34225: PUSH
34226: FOR_IN
34227: IFFALSE 34419
// repeat InitHc ;
34229: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34233: LD_VAR 0 9
34237: PPUSH
34238: CALL_OW 266
34242: PUSH
34243: LD_INT 5
34245: EQUAL
34246: IFFALSE 34316
// begin if UnitsInside ( j ) < 3 then
34248: LD_VAR 0 9
34252: PPUSH
34253: CALL_OW 313
34257: PUSH
34258: LD_INT 3
34260: LESS
34261: IFFALSE 34297
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34263: LD_INT 0
34265: PPUSH
34266: LD_INT 5
34268: PUSH
34269: LD_INT 8
34271: PUSH
34272: LD_INT 9
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: LIST
34279: PUSH
34280: LD_VAR 0 17
34284: ARRAY
34285: PPUSH
34286: LD_VAR 0 4
34290: PPUSH
34291: CALL_OW 380
34295: GO 34314
// PrepareHuman ( false , i , skill ) ;
34297: LD_INT 0
34299: PPUSH
34300: LD_VAR 0 8
34304: PPUSH
34305: LD_VAR 0 4
34309: PPUSH
34310: CALL_OW 380
// end else
34314: GO 34333
// PrepareHuman ( false , i , skill ) ;
34316: LD_INT 0
34318: PPUSH
34319: LD_VAR 0 8
34323: PPUSH
34324: LD_VAR 0 4
34328: PPUSH
34329: CALL_OW 380
// un := CreateHuman ;
34333: LD_ADDR_VAR 0 14
34337: PUSH
34338: CALL_OW 44
34342: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34343: LD_ADDR_VAR 0 7
34347: PUSH
34348: LD_VAR 0 7
34352: PPUSH
34353: LD_INT 1
34355: PPUSH
34356: LD_VAR 0 14
34360: PPUSH
34361: CALL_OW 2
34365: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34366: LD_VAR 0 14
34370: PPUSH
34371: LD_VAR 0 9
34375: PPUSH
34376: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34380: LD_VAR 0 9
34384: PPUSH
34385: CALL_OW 313
34389: PUSH
34390: LD_INT 6
34392: EQUAL
34393: PUSH
34394: LD_VAR 0 9
34398: PPUSH
34399: CALL_OW 266
34403: PUSH
34404: LD_INT 32
34406: PUSH
34407: LD_INT 31
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: IN
34414: OR
34415: IFFALSE 34229
34417: GO 34226
34419: POP
34420: POP
// end else
34421: GO 34803
// for j = 1 to x do
34423: LD_ADDR_VAR 0 9
34427: PUSH
34428: DOUBLE
34429: LD_INT 1
34431: DEC
34432: ST_TO_ADDR
34433: LD_VAR 0 13
34437: PUSH
34438: FOR_TO
34439: IFFALSE 34801
// begin InitHc ;
34441: CALL_OW 19
// if not f then
34445: LD_VAR 0 12
34449: NOT
34450: IFFALSE 34539
// begin PrepareHuman ( false , i , skill ) ;
34452: LD_INT 0
34454: PPUSH
34455: LD_VAR 0 8
34459: PPUSH
34460: LD_VAR 0 4
34464: PPUSH
34465: CALL_OW 380
// un := CreateHuman ;
34469: LD_ADDR_VAR 0 14
34473: PUSH
34474: CALL_OW 44
34478: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34479: LD_ADDR_VAR 0 7
34483: PUSH
34484: LD_VAR 0 7
34488: PPUSH
34489: LD_INT 1
34491: PPUSH
34492: LD_VAR 0 14
34496: PPUSH
34497: CALL_OW 2
34501: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34502: LD_VAR 0 14
34506: PPUSH
34507: LD_VAR 0 1
34511: PPUSH
34512: CALL_OW 250
34516: PPUSH
34517: LD_VAR 0 1
34521: PPUSH
34522: CALL_OW 251
34526: PPUSH
34527: LD_INT 10
34529: PPUSH
34530: LD_INT 0
34532: PPUSH
34533: CALL_OW 50
// continue ;
34537: GO 34438
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34539: LD_VAR 0 12
34543: PUSH
34544: LD_INT 1
34546: ARRAY
34547: PPUSH
34548: CALL_OW 313
34552: PUSH
34553: LD_VAR 0 12
34557: PUSH
34558: LD_INT 1
34560: ARRAY
34561: PPUSH
34562: CALL_OW 266
34566: PUSH
34567: LD_INT 32
34569: PUSH
34570: LD_INT 31
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: IN
34577: AND
34578: PUSH
34579: LD_VAR 0 12
34583: PUSH
34584: LD_INT 1
34586: ARRAY
34587: PPUSH
34588: CALL_OW 313
34592: PUSH
34593: LD_INT 6
34595: EQUAL
34596: OR
34597: IFFALSE 34617
// f := Delete ( f , 1 ) ;
34599: LD_ADDR_VAR 0 12
34603: PUSH
34604: LD_VAR 0 12
34608: PPUSH
34609: LD_INT 1
34611: PPUSH
34612: CALL_OW 3
34616: ST_TO_ADDR
// if not f then
34617: LD_VAR 0 12
34621: NOT
34622: IFFALSE 34640
// begin x := x + 2 ;
34624: LD_ADDR_VAR 0 13
34628: PUSH
34629: LD_VAR 0 13
34633: PUSH
34634: LD_INT 2
34636: PLUS
34637: ST_TO_ADDR
// continue ;
34638: GO 34438
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34640: LD_VAR 0 12
34644: PUSH
34645: LD_INT 1
34647: ARRAY
34648: PPUSH
34649: CALL_OW 266
34653: PUSH
34654: LD_INT 5
34656: EQUAL
34657: IFFALSE 34731
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34659: LD_VAR 0 12
34663: PUSH
34664: LD_INT 1
34666: ARRAY
34667: PPUSH
34668: CALL_OW 313
34672: PUSH
34673: LD_INT 3
34675: LESS
34676: IFFALSE 34712
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34678: LD_INT 0
34680: PPUSH
34681: LD_INT 5
34683: PUSH
34684: LD_INT 8
34686: PUSH
34687: LD_INT 9
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: LIST
34694: PUSH
34695: LD_VAR 0 17
34699: ARRAY
34700: PPUSH
34701: LD_VAR 0 4
34705: PPUSH
34706: CALL_OW 380
34710: GO 34729
// PrepareHuman ( false , i , skill ) ;
34712: LD_INT 0
34714: PPUSH
34715: LD_VAR 0 8
34719: PPUSH
34720: LD_VAR 0 4
34724: PPUSH
34725: CALL_OW 380
// end else
34729: GO 34748
// PrepareHuman ( false , i , skill ) ;
34731: LD_INT 0
34733: PPUSH
34734: LD_VAR 0 8
34738: PPUSH
34739: LD_VAR 0 4
34743: PPUSH
34744: CALL_OW 380
// un := CreateHuman ;
34748: LD_ADDR_VAR 0 14
34752: PUSH
34753: CALL_OW 44
34757: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34758: LD_ADDR_VAR 0 7
34762: PUSH
34763: LD_VAR 0 7
34767: PPUSH
34768: LD_INT 1
34770: PPUSH
34771: LD_VAR 0 14
34775: PPUSH
34776: CALL_OW 2
34780: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34781: LD_VAR 0 14
34785: PPUSH
34786: LD_VAR 0 12
34790: PUSH
34791: LD_INT 1
34793: ARRAY
34794: PPUSH
34795: CALL_OW 52
// end ;
34799: GO 34438
34801: POP
34802: POP
// end ;
34803: GO 33740
34805: POP
34806: POP
// result := result ^ buildings ;
34807: LD_ADDR_VAR 0 7
34811: PUSH
34812: LD_VAR 0 7
34816: PUSH
34817: LD_VAR 0 18
34821: ADD
34822: ST_TO_ADDR
// end else
34823: GO 34966
// begin for i = 1 to personel do
34825: LD_ADDR_VAR 0 8
34829: PUSH
34830: DOUBLE
34831: LD_INT 1
34833: DEC
34834: ST_TO_ADDR
34835: LD_VAR 0 6
34839: PUSH
34840: FOR_TO
34841: IFFALSE 34964
// begin if i > 4 then
34843: LD_VAR 0 8
34847: PUSH
34848: LD_INT 4
34850: GREATER
34851: IFFALSE 34855
// break ;
34853: GO 34964
// x := personel [ i ] ;
34855: LD_ADDR_VAR 0 13
34859: PUSH
34860: LD_VAR 0 6
34864: PUSH
34865: LD_VAR 0 8
34869: ARRAY
34870: ST_TO_ADDR
// if x = - 1 then
34871: LD_VAR 0 13
34875: PUSH
34876: LD_INT 1
34878: NEG
34879: EQUAL
34880: IFFALSE 34884
// continue ;
34882: GO 34840
// PrepareHuman ( false , i , skill ) ;
34884: LD_INT 0
34886: PPUSH
34887: LD_VAR 0 8
34891: PPUSH
34892: LD_VAR 0 4
34896: PPUSH
34897: CALL_OW 380
// un := CreateHuman ;
34901: LD_ADDR_VAR 0 14
34905: PUSH
34906: CALL_OW 44
34910: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34911: LD_VAR 0 14
34915: PPUSH
34916: LD_VAR 0 1
34920: PPUSH
34921: CALL_OW 250
34925: PPUSH
34926: LD_VAR 0 1
34930: PPUSH
34931: CALL_OW 251
34935: PPUSH
34936: LD_INT 10
34938: PPUSH
34939: LD_INT 0
34941: PPUSH
34942: CALL_OW 50
// result := result ^ un ;
34946: LD_ADDR_VAR 0 7
34950: PUSH
34951: LD_VAR 0 7
34955: PUSH
34956: LD_VAR 0 14
34960: ADD
34961: ST_TO_ADDR
// end ;
34962: GO 34840
34964: POP
34965: POP
// end ; end ;
34966: LD_VAR 0 7
34970: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34971: LD_INT 0
34973: PPUSH
34974: PPUSH
34975: PPUSH
34976: PPUSH
34977: PPUSH
34978: PPUSH
34979: PPUSH
34980: PPUSH
34981: PPUSH
34982: PPUSH
34983: PPUSH
34984: PPUSH
34985: PPUSH
34986: PPUSH
34987: PPUSH
34988: PPUSH
// result := false ;
34989: LD_ADDR_VAR 0 3
34993: PUSH
34994: LD_INT 0
34996: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34997: LD_VAR 0 1
35001: NOT
35002: PUSH
35003: LD_VAR 0 1
35007: PPUSH
35008: CALL_OW 266
35012: PUSH
35013: LD_INT 32
35015: PUSH
35016: LD_INT 33
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: IN
35023: NOT
35024: OR
35025: IFFALSE 35029
// exit ;
35027: GO 36138
// nat := GetNation ( tower ) ;
35029: LD_ADDR_VAR 0 12
35033: PUSH
35034: LD_VAR 0 1
35038: PPUSH
35039: CALL_OW 248
35043: ST_TO_ADDR
// side := GetSide ( tower ) ;
35044: LD_ADDR_VAR 0 16
35048: PUSH
35049: LD_VAR 0 1
35053: PPUSH
35054: CALL_OW 255
35058: ST_TO_ADDR
// x := GetX ( tower ) ;
35059: LD_ADDR_VAR 0 10
35063: PUSH
35064: LD_VAR 0 1
35068: PPUSH
35069: CALL_OW 250
35073: ST_TO_ADDR
// y := GetY ( tower ) ;
35074: LD_ADDR_VAR 0 11
35078: PUSH
35079: LD_VAR 0 1
35083: PPUSH
35084: CALL_OW 251
35088: ST_TO_ADDR
// if not x or not y then
35089: LD_VAR 0 10
35093: NOT
35094: PUSH
35095: LD_VAR 0 11
35099: NOT
35100: OR
35101: IFFALSE 35105
// exit ;
35103: GO 36138
// weapon := 0 ;
35105: LD_ADDR_VAR 0 18
35109: PUSH
35110: LD_INT 0
35112: ST_TO_ADDR
// fac_list := [ ] ;
35113: LD_ADDR_VAR 0 17
35117: PUSH
35118: EMPTY
35119: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35120: LD_ADDR_VAR 0 6
35124: PUSH
35125: LD_VAR 0 1
35129: PPUSH
35130: CALL_OW 274
35134: PPUSH
35135: LD_VAR 0 2
35139: PPUSH
35140: LD_INT 0
35142: PPUSH
35143: CALL 32709 0 3
35147: PPUSH
35148: LD_INT 30
35150: PUSH
35151: LD_INT 3
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PPUSH
35158: CALL_OW 72
35162: ST_TO_ADDR
// if not factories then
35163: LD_VAR 0 6
35167: NOT
35168: IFFALSE 35172
// exit ;
35170: GO 36138
// for i in factories do
35172: LD_ADDR_VAR 0 8
35176: PUSH
35177: LD_VAR 0 6
35181: PUSH
35182: FOR_IN
35183: IFFALSE 35208
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35185: LD_ADDR_VAR 0 17
35189: PUSH
35190: LD_VAR 0 17
35194: PUSH
35195: LD_VAR 0 8
35199: PPUSH
35200: CALL_OW 478
35204: UNION
35205: ST_TO_ADDR
35206: GO 35182
35208: POP
35209: POP
// if not fac_list then
35210: LD_VAR 0 17
35214: NOT
35215: IFFALSE 35219
// exit ;
35217: GO 36138
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35219: LD_ADDR_VAR 0 5
35223: PUSH
35224: LD_INT 4
35226: PUSH
35227: LD_INT 5
35229: PUSH
35230: LD_INT 9
35232: PUSH
35233: LD_INT 10
35235: PUSH
35236: LD_INT 6
35238: PUSH
35239: LD_INT 7
35241: PUSH
35242: LD_INT 11
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 27
35256: PUSH
35257: LD_INT 28
35259: PUSH
35260: LD_INT 26
35262: PUSH
35263: LD_INT 30
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 43
35274: PUSH
35275: LD_INT 44
35277: PUSH
35278: LD_INT 46
35280: PUSH
35281: LD_INT 45
35283: PUSH
35284: LD_INT 47
35286: PUSH
35287: LD_INT 49
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: LIST
35302: PUSH
35303: LD_VAR 0 12
35307: ARRAY
35308: ST_TO_ADDR
// list := list isect fac_list ;
35309: LD_ADDR_VAR 0 5
35313: PUSH
35314: LD_VAR 0 5
35318: PUSH
35319: LD_VAR 0 17
35323: ISECT
35324: ST_TO_ADDR
// if not list then
35325: LD_VAR 0 5
35329: NOT
35330: IFFALSE 35334
// exit ;
35332: GO 36138
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35334: LD_VAR 0 12
35338: PUSH
35339: LD_INT 3
35341: EQUAL
35342: PUSH
35343: LD_INT 49
35345: PUSH
35346: LD_VAR 0 5
35350: IN
35351: AND
35352: PUSH
35353: LD_INT 31
35355: PPUSH
35356: LD_VAR 0 16
35360: PPUSH
35361: CALL_OW 321
35365: PUSH
35366: LD_INT 2
35368: EQUAL
35369: AND
35370: IFFALSE 35430
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35372: LD_INT 22
35374: PUSH
35375: LD_VAR 0 16
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 35
35386: PUSH
35387: LD_INT 49
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 91
35396: PUSH
35397: LD_VAR 0 1
35401: PUSH
35402: LD_INT 10
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: LIST
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: LIST
35414: PPUSH
35415: CALL_OW 69
35419: NOT
35420: IFFALSE 35430
// weapon := ru_time_lapser ;
35422: LD_ADDR_VAR 0 18
35426: PUSH
35427: LD_INT 49
35429: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35430: LD_VAR 0 12
35434: PUSH
35435: LD_INT 1
35437: PUSH
35438: LD_INT 2
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: IN
35445: PUSH
35446: LD_INT 11
35448: PUSH
35449: LD_VAR 0 5
35453: IN
35454: PUSH
35455: LD_INT 30
35457: PUSH
35458: LD_VAR 0 5
35462: IN
35463: OR
35464: AND
35465: PUSH
35466: LD_INT 6
35468: PPUSH
35469: LD_VAR 0 16
35473: PPUSH
35474: CALL_OW 321
35478: PUSH
35479: LD_INT 2
35481: EQUAL
35482: AND
35483: IFFALSE 35648
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35485: LD_INT 22
35487: PUSH
35488: LD_VAR 0 16
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 2
35499: PUSH
35500: LD_INT 35
35502: PUSH
35503: LD_INT 11
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 35
35512: PUSH
35513: LD_INT 30
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 91
35527: PUSH
35528: LD_VAR 0 1
35532: PUSH
35533: LD_INT 18
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: LIST
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: LIST
35545: PPUSH
35546: CALL_OW 69
35550: NOT
35551: PUSH
35552: LD_INT 22
35554: PUSH
35555: LD_VAR 0 16
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 2
35566: PUSH
35567: LD_INT 30
35569: PUSH
35570: LD_INT 32
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: LD_INT 30
35579: PUSH
35580: LD_INT 33
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 91
35594: PUSH
35595: LD_VAR 0 1
35599: PUSH
35600: LD_INT 12
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: LIST
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: LIST
35612: PUSH
35613: EMPTY
35614: LIST
35615: PPUSH
35616: CALL_OW 69
35620: PUSH
35621: LD_INT 2
35623: GREATER
35624: AND
35625: IFFALSE 35648
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35627: LD_ADDR_VAR 0 18
35631: PUSH
35632: LD_INT 11
35634: PUSH
35635: LD_INT 30
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_VAR 0 12
35646: ARRAY
35647: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35648: LD_VAR 0 18
35652: NOT
35653: PUSH
35654: LD_INT 40
35656: PPUSH
35657: LD_VAR 0 16
35661: PPUSH
35662: CALL_OW 321
35666: PUSH
35667: LD_INT 2
35669: EQUAL
35670: AND
35671: PUSH
35672: LD_INT 7
35674: PUSH
35675: LD_VAR 0 5
35679: IN
35680: PUSH
35681: LD_INT 28
35683: PUSH
35684: LD_VAR 0 5
35688: IN
35689: OR
35690: PUSH
35691: LD_INT 45
35693: PUSH
35694: LD_VAR 0 5
35698: IN
35699: OR
35700: AND
35701: IFFALSE 35955
// begin hex := GetHexInfo ( x , y ) ;
35703: LD_ADDR_VAR 0 4
35707: PUSH
35708: LD_VAR 0 10
35712: PPUSH
35713: LD_VAR 0 11
35717: PPUSH
35718: CALL_OW 546
35722: ST_TO_ADDR
// if hex [ 1 ] then
35723: LD_VAR 0 4
35727: PUSH
35728: LD_INT 1
35730: ARRAY
35731: IFFALSE 35735
// exit ;
35733: GO 36138
// height := hex [ 2 ] ;
35735: LD_ADDR_VAR 0 15
35739: PUSH
35740: LD_VAR 0 4
35744: PUSH
35745: LD_INT 2
35747: ARRAY
35748: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35749: LD_ADDR_VAR 0 14
35753: PUSH
35754: LD_INT 0
35756: PUSH
35757: LD_INT 2
35759: PUSH
35760: LD_INT 3
35762: PUSH
35763: LD_INT 5
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: ST_TO_ADDR
// for i in tmp do
35772: LD_ADDR_VAR 0 8
35776: PUSH
35777: LD_VAR 0 14
35781: PUSH
35782: FOR_IN
35783: IFFALSE 35953
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35785: LD_ADDR_VAR 0 9
35789: PUSH
35790: LD_VAR 0 10
35794: PPUSH
35795: LD_VAR 0 8
35799: PPUSH
35800: LD_INT 5
35802: PPUSH
35803: CALL_OW 272
35807: PUSH
35808: LD_VAR 0 11
35812: PPUSH
35813: LD_VAR 0 8
35817: PPUSH
35818: LD_INT 5
35820: PPUSH
35821: CALL_OW 273
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35830: LD_VAR 0 9
35834: PUSH
35835: LD_INT 1
35837: ARRAY
35838: PPUSH
35839: LD_VAR 0 9
35843: PUSH
35844: LD_INT 2
35846: ARRAY
35847: PPUSH
35848: CALL_OW 488
35852: IFFALSE 35951
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35854: LD_ADDR_VAR 0 4
35858: PUSH
35859: LD_VAR 0 9
35863: PUSH
35864: LD_INT 1
35866: ARRAY
35867: PPUSH
35868: LD_VAR 0 9
35872: PUSH
35873: LD_INT 2
35875: ARRAY
35876: PPUSH
35877: CALL_OW 546
35881: ST_TO_ADDR
// if hex [ 1 ] then
35882: LD_VAR 0 4
35886: PUSH
35887: LD_INT 1
35889: ARRAY
35890: IFFALSE 35894
// continue ;
35892: GO 35782
// h := hex [ 2 ] ;
35894: LD_ADDR_VAR 0 13
35898: PUSH
35899: LD_VAR 0 4
35903: PUSH
35904: LD_INT 2
35906: ARRAY
35907: ST_TO_ADDR
// if h + 7 < height then
35908: LD_VAR 0 13
35912: PUSH
35913: LD_INT 7
35915: PLUS
35916: PUSH
35917: LD_VAR 0 15
35921: LESS
35922: IFFALSE 35951
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35924: LD_ADDR_VAR 0 18
35928: PUSH
35929: LD_INT 7
35931: PUSH
35932: LD_INT 28
35934: PUSH
35935: LD_INT 45
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: LIST
35942: PUSH
35943: LD_VAR 0 12
35947: ARRAY
35948: ST_TO_ADDR
// break ;
35949: GO 35953
// end ; end ; end ;
35951: GO 35782
35953: POP
35954: POP
// end ; if not weapon then
35955: LD_VAR 0 18
35959: NOT
35960: IFFALSE 36020
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35962: LD_ADDR_VAR 0 5
35966: PUSH
35967: LD_VAR 0 5
35971: PUSH
35972: LD_INT 11
35974: PUSH
35975: LD_INT 30
35977: PUSH
35978: LD_INT 49
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: LIST
35985: DIFF
35986: ST_TO_ADDR
// if not list then
35987: LD_VAR 0 5
35991: NOT
35992: IFFALSE 35996
// exit ;
35994: GO 36138
// weapon := list [ rand ( 1 , list ) ] ;
35996: LD_ADDR_VAR 0 18
36000: PUSH
36001: LD_VAR 0 5
36005: PUSH
36006: LD_INT 1
36008: PPUSH
36009: LD_VAR 0 5
36013: PPUSH
36014: CALL_OW 12
36018: ARRAY
36019: ST_TO_ADDR
// end ; if weapon then
36020: LD_VAR 0 18
36024: IFFALSE 36138
// begin tmp := CostOfWeapon ( weapon ) ;
36026: LD_ADDR_VAR 0 14
36030: PUSH
36031: LD_VAR 0 18
36035: PPUSH
36036: CALL_OW 451
36040: ST_TO_ADDR
// j := GetBase ( tower ) ;
36041: LD_ADDR_VAR 0 9
36045: PUSH
36046: LD_VAR 0 1
36050: PPUSH
36051: CALL_OW 274
36055: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36056: LD_VAR 0 9
36060: PPUSH
36061: LD_INT 1
36063: PPUSH
36064: CALL_OW 275
36068: PUSH
36069: LD_VAR 0 14
36073: PUSH
36074: LD_INT 1
36076: ARRAY
36077: GREATEREQUAL
36078: PUSH
36079: LD_VAR 0 9
36083: PPUSH
36084: LD_INT 2
36086: PPUSH
36087: CALL_OW 275
36091: PUSH
36092: LD_VAR 0 14
36096: PUSH
36097: LD_INT 2
36099: ARRAY
36100: GREATEREQUAL
36101: AND
36102: PUSH
36103: LD_VAR 0 9
36107: PPUSH
36108: LD_INT 3
36110: PPUSH
36111: CALL_OW 275
36115: PUSH
36116: LD_VAR 0 14
36120: PUSH
36121: LD_INT 3
36123: ARRAY
36124: GREATEREQUAL
36125: AND
36126: IFFALSE 36138
// result := weapon ;
36128: LD_ADDR_VAR 0 3
36132: PUSH
36133: LD_VAR 0 18
36137: ST_TO_ADDR
// end ; end ;
36138: LD_VAR 0 3
36142: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36143: LD_INT 0
36145: PPUSH
36146: PPUSH
// result := true ;
36147: LD_ADDR_VAR 0 3
36151: PUSH
36152: LD_INT 1
36154: ST_TO_ADDR
// if array1 = array2 then
36155: LD_VAR 0 1
36159: PUSH
36160: LD_VAR 0 2
36164: EQUAL
36165: IFFALSE 36225
// begin for i = 1 to array1 do
36167: LD_ADDR_VAR 0 4
36171: PUSH
36172: DOUBLE
36173: LD_INT 1
36175: DEC
36176: ST_TO_ADDR
36177: LD_VAR 0 1
36181: PUSH
36182: FOR_TO
36183: IFFALSE 36221
// if array1 [ i ] <> array2 [ i ] then
36185: LD_VAR 0 1
36189: PUSH
36190: LD_VAR 0 4
36194: ARRAY
36195: PUSH
36196: LD_VAR 0 2
36200: PUSH
36201: LD_VAR 0 4
36205: ARRAY
36206: NONEQUAL
36207: IFFALSE 36219
// begin result := false ;
36209: LD_ADDR_VAR 0 3
36213: PUSH
36214: LD_INT 0
36216: ST_TO_ADDR
// break ;
36217: GO 36221
// end ;
36219: GO 36182
36221: POP
36222: POP
// end else
36223: GO 36233
// result := false ;
36225: LD_ADDR_VAR 0 3
36229: PUSH
36230: LD_INT 0
36232: ST_TO_ADDR
// end ;
36233: LD_VAR 0 3
36237: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36238: LD_INT 0
36240: PPUSH
36241: PPUSH
// if not array1 or not array2 then
36242: LD_VAR 0 1
36246: NOT
36247: PUSH
36248: LD_VAR 0 2
36252: NOT
36253: OR
36254: IFFALSE 36258
// exit ;
36256: GO 36322
// result := true ;
36258: LD_ADDR_VAR 0 3
36262: PUSH
36263: LD_INT 1
36265: ST_TO_ADDR
// for i = 1 to array1 do
36266: LD_ADDR_VAR 0 4
36270: PUSH
36271: DOUBLE
36272: LD_INT 1
36274: DEC
36275: ST_TO_ADDR
36276: LD_VAR 0 1
36280: PUSH
36281: FOR_TO
36282: IFFALSE 36320
// if array1 [ i ] <> array2 [ i ] then
36284: LD_VAR 0 1
36288: PUSH
36289: LD_VAR 0 4
36293: ARRAY
36294: PUSH
36295: LD_VAR 0 2
36299: PUSH
36300: LD_VAR 0 4
36304: ARRAY
36305: NONEQUAL
36306: IFFALSE 36318
// begin result := false ;
36308: LD_ADDR_VAR 0 3
36312: PUSH
36313: LD_INT 0
36315: ST_TO_ADDR
// break ;
36316: GO 36320
// end ;
36318: GO 36281
36320: POP
36321: POP
// end ;
36322: LD_VAR 0 3
36326: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36327: LD_INT 0
36329: PPUSH
36330: PPUSH
36331: PPUSH
// pom := GetBase ( fac ) ;
36332: LD_ADDR_VAR 0 5
36336: PUSH
36337: LD_VAR 0 1
36341: PPUSH
36342: CALL_OW 274
36346: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36347: LD_ADDR_VAR 0 4
36351: PUSH
36352: LD_VAR 0 2
36356: PUSH
36357: LD_INT 1
36359: ARRAY
36360: PPUSH
36361: LD_VAR 0 2
36365: PUSH
36366: LD_INT 2
36368: ARRAY
36369: PPUSH
36370: LD_VAR 0 2
36374: PUSH
36375: LD_INT 3
36377: ARRAY
36378: PPUSH
36379: LD_VAR 0 2
36383: PUSH
36384: LD_INT 4
36386: ARRAY
36387: PPUSH
36388: CALL_OW 449
36392: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36393: LD_ADDR_VAR 0 3
36397: PUSH
36398: LD_VAR 0 5
36402: PPUSH
36403: LD_INT 1
36405: PPUSH
36406: CALL_OW 275
36410: PUSH
36411: LD_VAR 0 4
36415: PUSH
36416: LD_INT 1
36418: ARRAY
36419: GREATEREQUAL
36420: PUSH
36421: LD_VAR 0 5
36425: PPUSH
36426: LD_INT 2
36428: PPUSH
36429: CALL_OW 275
36433: PUSH
36434: LD_VAR 0 4
36438: PUSH
36439: LD_INT 2
36441: ARRAY
36442: GREATEREQUAL
36443: AND
36444: PUSH
36445: LD_VAR 0 5
36449: PPUSH
36450: LD_INT 3
36452: PPUSH
36453: CALL_OW 275
36457: PUSH
36458: LD_VAR 0 4
36462: PUSH
36463: LD_INT 3
36465: ARRAY
36466: GREATEREQUAL
36467: AND
36468: ST_TO_ADDR
// end ;
36469: LD_VAR 0 3
36473: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36474: LD_INT 0
36476: PPUSH
36477: PPUSH
36478: PPUSH
36479: PPUSH
// pom := GetBase ( building ) ;
36480: LD_ADDR_VAR 0 3
36484: PUSH
36485: LD_VAR 0 1
36489: PPUSH
36490: CALL_OW 274
36494: ST_TO_ADDR
// if not pom then
36495: LD_VAR 0 3
36499: NOT
36500: IFFALSE 36504
// exit ;
36502: GO 36674
// btype := GetBType ( building ) ;
36504: LD_ADDR_VAR 0 5
36508: PUSH
36509: LD_VAR 0 1
36513: PPUSH
36514: CALL_OW 266
36518: ST_TO_ADDR
// if btype = b_armoury then
36519: LD_VAR 0 5
36523: PUSH
36524: LD_INT 4
36526: EQUAL
36527: IFFALSE 36537
// btype := b_barracks ;
36529: LD_ADDR_VAR 0 5
36533: PUSH
36534: LD_INT 5
36536: ST_TO_ADDR
// if btype = b_depot then
36537: LD_VAR 0 5
36541: PUSH
36542: LD_INT 0
36544: EQUAL
36545: IFFALSE 36555
// btype := b_warehouse ;
36547: LD_ADDR_VAR 0 5
36551: PUSH
36552: LD_INT 1
36554: ST_TO_ADDR
// if btype = b_workshop then
36555: LD_VAR 0 5
36559: PUSH
36560: LD_INT 2
36562: EQUAL
36563: IFFALSE 36573
// btype := b_factory ;
36565: LD_ADDR_VAR 0 5
36569: PUSH
36570: LD_INT 3
36572: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36573: LD_ADDR_VAR 0 4
36577: PUSH
36578: LD_VAR 0 5
36582: PPUSH
36583: LD_VAR 0 1
36587: PPUSH
36588: CALL_OW 248
36592: PPUSH
36593: CALL_OW 450
36597: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36598: LD_ADDR_VAR 0 2
36602: PUSH
36603: LD_VAR 0 3
36607: PPUSH
36608: LD_INT 1
36610: PPUSH
36611: CALL_OW 275
36615: PUSH
36616: LD_VAR 0 4
36620: PUSH
36621: LD_INT 1
36623: ARRAY
36624: GREATEREQUAL
36625: PUSH
36626: LD_VAR 0 3
36630: PPUSH
36631: LD_INT 2
36633: PPUSH
36634: CALL_OW 275
36638: PUSH
36639: LD_VAR 0 4
36643: PUSH
36644: LD_INT 2
36646: ARRAY
36647: GREATEREQUAL
36648: AND
36649: PUSH
36650: LD_VAR 0 3
36654: PPUSH
36655: LD_INT 3
36657: PPUSH
36658: CALL_OW 275
36662: PUSH
36663: LD_VAR 0 4
36667: PUSH
36668: LD_INT 3
36670: ARRAY
36671: GREATEREQUAL
36672: AND
36673: ST_TO_ADDR
// end ;
36674: LD_VAR 0 2
36678: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36679: LD_INT 0
36681: PPUSH
36682: PPUSH
36683: PPUSH
// pom := GetBase ( building ) ;
36684: LD_ADDR_VAR 0 4
36688: PUSH
36689: LD_VAR 0 1
36693: PPUSH
36694: CALL_OW 274
36698: ST_TO_ADDR
// if not pom then
36699: LD_VAR 0 4
36703: NOT
36704: IFFALSE 36708
// exit ;
36706: GO 36809
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36708: LD_ADDR_VAR 0 5
36712: PUSH
36713: LD_VAR 0 2
36717: PPUSH
36718: LD_VAR 0 1
36722: PPUSH
36723: CALL_OW 248
36727: PPUSH
36728: CALL_OW 450
36732: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36733: LD_ADDR_VAR 0 3
36737: PUSH
36738: LD_VAR 0 4
36742: PPUSH
36743: LD_INT 1
36745: PPUSH
36746: CALL_OW 275
36750: PUSH
36751: LD_VAR 0 5
36755: PUSH
36756: LD_INT 1
36758: ARRAY
36759: GREATEREQUAL
36760: PUSH
36761: LD_VAR 0 4
36765: PPUSH
36766: LD_INT 2
36768: PPUSH
36769: CALL_OW 275
36773: PUSH
36774: LD_VAR 0 5
36778: PUSH
36779: LD_INT 2
36781: ARRAY
36782: GREATEREQUAL
36783: AND
36784: PUSH
36785: LD_VAR 0 4
36789: PPUSH
36790: LD_INT 3
36792: PPUSH
36793: CALL_OW 275
36797: PUSH
36798: LD_VAR 0 5
36802: PUSH
36803: LD_INT 3
36805: ARRAY
36806: GREATEREQUAL
36807: AND
36808: ST_TO_ADDR
// end ;
36809: LD_VAR 0 3
36813: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36814: LD_INT 0
36816: PPUSH
36817: PPUSH
36818: PPUSH
36819: PPUSH
36820: PPUSH
36821: PPUSH
36822: PPUSH
36823: PPUSH
36824: PPUSH
36825: PPUSH
36826: PPUSH
// result := false ;
36827: LD_ADDR_VAR 0 8
36831: PUSH
36832: LD_INT 0
36834: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36835: LD_VAR 0 5
36839: NOT
36840: PUSH
36841: LD_VAR 0 1
36845: NOT
36846: OR
36847: PUSH
36848: LD_VAR 0 2
36852: NOT
36853: OR
36854: PUSH
36855: LD_VAR 0 3
36859: NOT
36860: OR
36861: IFFALSE 36865
// exit ;
36863: GO 37679
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36865: LD_ADDR_VAR 0 14
36869: PUSH
36870: LD_VAR 0 1
36874: PPUSH
36875: LD_VAR 0 2
36879: PPUSH
36880: LD_VAR 0 3
36884: PPUSH
36885: LD_VAR 0 4
36889: PPUSH
36890: LD_VAR 0 5
36894: PUSH
36895: LD_INT 1
36897: ARRAY
36898: PPUSH
36899: CALL_OW 248
36903: PPUSH
36904: LD_INT 0
36906: PPUSH
36907: CALL 38916 0 6
36911: ST_TO_ADDR
// if not hexes then
36912: LD_VAR 0 14
36916: NOT
36917: IFFALSE 36921
// exit ;
36919: GO 37679
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36921: LD_ADDR_VAR 0 17
36925: PUSH
36926: LD_VAR 0 5
36930: PPUSH
36931: LD_INT 22
36933: PUSH
36934: LD_VAR 0 13
36938: PPUSH
36939: CALL_OW 255
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 2
36950: PUSH
36951: LD_INT 30
36953: PUSH
36954: LD_INT 0
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 30
36963: PUSH
36964: LD_INT 1
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: LIST
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PPUSH
36980: CALL_OW 72
36984: ST_TO_ADDR
// for i = 1 to hexes do
36985: LD_ADDR_VAR 0 9
36989: PUSH
36990: DOUBLE
36991: LD_INT 1
36993: DEC
36994: ST_TO_ADDR
36995: LD_VAR 0 14
36999: PUSH
37000: FOR_TO
37001: IFFALSE 37677
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37003: LD_ADDR_VAR 0 13
37007: PUSH
37008: LD_VAR 0 14
37012: PUSH
37013: LD_VAR 0 9
37017: ARRAY
37018: PUSH
37019: LD_INT 1
37021: ARRAY
37022: PPUSH
37023: LD_VAR 0 14
37027: PUSH
37028: LD_VAR 0 9
37032: ARRAY
37033: PUSH
37034: LD_INT 2
37036: ARRAY
37037: PPUSH
37038: CALL_OW 428
37042: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37043: LD_VAR 0 14
37047: PUSH
37048: LD_VAR 0 9
37052: ARRAY
37053: PUSH
37054: LD_INT 1
37056: ARRAY
37057: PPUSH
37058: LD_VAR 0 14
37062: PUSH
37063: LD_VAR 0 9
37067: ARRAY
37068: PUSH
37069: LD_INT 2
37071: ARRAY
37072: PPUSH
37073: CALL_OW 351
37077: PUSH
37078: LD_VAR 0 14
37082: PUSH
37083: LD_VAR 0 9
37087: ARRAY
37088: PUSH
37089: LD_INT 1
37091: ARRAY
37092: PPUSH
37093: LD_VAR 0 14
37097: PUSH
37098: LD_VAR 0 9
37102: ARRAY
37103: PUSH
37104: LD_INT 2
37106: ARRAY
37107: PPUSH
37108: CALL_OW 488
37112: NOT
37113: OR
37114: PUSH
37115: LD_VAR 0 13
37119: PPUSH
37120: CALL_OW 247
37124: PUSH
37125: LD_INT 3
37127: EQUAL
37128: OR
37129: IFFALSE 37135
// exit ;
37131: POP
37132: POP
37133: GO 37679
// if not tmp then
37135: LD_VAR 0 13
37139: NOT
37140: IFFALSE 37144
// continue ;
37142: GO 37000
// result := true ;
37144: LD_ADDR_VAR 0 8
37148: PUSH
37149: LD_INT 1
37151: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37152: LD_VAR 0 6
37156: PUSH
37157: LD_VAR 0 13
37161: PPUSH
37162: CALL_OW 247
37166: PUSH
37167: LD_INT 2
37169: EQUAL
37170: AND
37171: PUSH
37172: LD_VAR 0 13
37176: PPUSH
37177: CALL_OW 263
37181: PUSH
37182: LD_INT 1
37184: EQUAL
37185: AND
37186: IFFALSE 37350
// begin if IsDrivenBy ( tmp ) then
37188: LD_VAR 0 13
37192: PPUSH
37193: CALL_OW 311
37197: IFFALSE 37201
// continue ;
37199: GO 37000
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37201: LD_VAR 0 6
37205: PPUSH
37206: LD_INT 3
37208: PUSH
37209: LD_INT 60
37211: PUSH
37212: EMPTY
37213: LIST
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 3
37221: PUSH
37222: LD_INT 55
37224: PUSH
37225: EMPTY
37226: LIST
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PPUSH
37236: CALL_OW 72
37240: IFFALSE 37348
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37242: LD_ADDR_VAR 0 18
37246: PUSH
37247: LD_VAR 0 6
37251: PPUSH
37252: LD_INT 3
37254: PUSH
37255: LD_INT 60
37257: PUSH
37258: EMPTY
37259: LIST
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 3
37267: PUSH
37268: LD_INT 55
37270: PUSH
37271: EMPTY
37272: LIST
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PPUSH
37282: CALL_OW 72
37286: PUSH
37287: LD_INT 1
37289: ARRAY
37290: ST_TO_ADDR
// if IsInUnit ( driver ) then
37291: LD_VAR 0 18
37295: PPUSH
37296: CALL_OW 310
37300: IFFALSE 37311
// ComExit ( driver ) ;
37302: LD_VAR 0 18
37306: PPUSH
37307: CALL 62044 0 1
// AddComEnterUnit ( driver , tmp ) ;
37311: LD_VAR 0 18
37315: PPUSH
37316: LD_VAR 0 13
37320: PPUSH
37321: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37325: LD_VAR 0 18
37329: PPUSH
37330: LD_VAR 0 7
37334: PPUSH
37335: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37339: LD_VAR 0 18
37343: PPUSH
37344: CALL_OW 181
// end ; continue ;
37348: GO 37000
// end ; if not cleaners or not tmp in cleaners then
37350: LD_VAR 0 6
37354: NOT
37355: PUSH
37356: LD_VAR 0 13
37360: PUSH
37361: LD_VAR 0 6
37365: IN
37366: NOT
37367: OR
37368: IFFALSE 37675
// begin if dep then
37370: LD_VAR 0 17
37374: IFFALSE 37510
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37376: LD_ADDR_VAR 0 16
37380: PUSH
37381: LD_VAR 0 17
37385: PUSH
37386: LD_INT 1
37388: ARRAY
37389: PPUSH
37390: CALL_OW 250
37394: PPUSH
37395: LD_VAR 0 17
37399: PUSH
37400: LD_INT 1
37402: ARRAY
37403: PPUSH
37404: CALL_OW 254
37408: PPUSH
37409: LD_INT 5
37411: PPUSH
37412: CALL_OW 272
37416: PUSH
37417: LD_VAR 0 17
37421: PUSH
37422: LD_INT 1
37424: ARRAY
37425: PPUSH
37426: CALL_OW 251
37430: PPUSH
37431: LD_VAR 0 17
37435: PUSH
37436: LD_INT 1
37438: ARRAY
37439: PPUSH
37440: CALL_OW 254
37444: PPUSH
37445: LD_INT 5
37447: PPUSH
37448: CALL_OW 273
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37457: LD_VAR 0 16
37461: PUSH
37462: LD_INT 1
37464: ARRAY
37465: PPUSH
37466: LD_VAR 0 16
37470: PUSH
37471: LD_INT 2
37473: ARRAY
37474: PPUSH
37475: CALL_OW 488
37479: IFFALSE 37510
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37481: LD_VAR 0 13
37485: PPUSH
37486: LD_VAR 0 16
37490: PUSH
37491: LD_INT 1
37493: ARRAY
37494: PPUSH
37495: LD_VAR 0 16
37499: PUSH
37500: LD_INT 2
37502: ARRAY
37503: PPUSH
37504: CALL_OW 111
// continue ;
37508: GO 37000
// end ; end ; r := GetDir ( tmp ) ;
37510: LD_ADDR_VAR 0 15
37514: PUSH
37515: LD_VAR 0 13
37519: PPUSH
37520: CALL_OW 254
37524: ST_TO_ADDR
// if r = 5 then
37525: LD_VAR 0 15
37529: PUSH
37530: LD_INT 5
37532: EQUAL
37533: IFFALSE 37543
// r := 0 ;
37535: LD_ADDR_VAR 0 15
37539: PUSH
37540: LD_INT 0
37542: ST_TO_ADDR
// for j = r to 5 do
37543: LD_ADDR_VAR 0 10
37547: PUSH
37548: DOUBLE
37549: LD_VAR 0 15
37553: DEC
37554: ST_TO_ADDR
37555: LD_INT 5
37557: PUSH
37558: FOR_TO
37559: IFFALSE 37673
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37561: LD_ADDR_VAR 0 11
37565: PUSH
37566: LD_VAR 0 13
37570: PPUSH
37571: CALL_OW 250
37575: PPUSH
37576: LD_VAR 0 10
37580: PPUSH
37581: LD_INT 2
37583: PPUSH
37584: CALL_OW 272
37588: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37589: LD_ADDR_VAR 0 12
37593: PUSH
37594: LD_VAR 0 13
37598: PPUSH
37599: CALL_OW 251
37603: PPUSH
37604: LD_VAR 0 10
37608: PPUSH
37609: LD_INT 2
37611: PPUSH
37612: CALL_OW 273
37616: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37617: LD_VAR 0 11
37621: PPUSH
37622: LD_VAR 0 12
37626: PPUSH
37627: CALL_OW 488
37631: PUSH
37632: LD_VAR 0 11
37636: PPUSH
37637: LD_VAR 0 12
37641: PPUSH
37642: CALL_OW 428
37646: NOT
37647: AND
37648: IFFALSE 37671
// begin ComMoveXY ( tmp , _x , _y ) ;
37650: LD_VAR 0 13
37654: PPUSH
37655: LD_VAR 0 11
37659: PPUSH
37660: LD_VAR 0 12
37664: PPUSH
37665: CALL_OW 111
// break ;
37669: GO 37673
// end ; end ;
37671: GO 37558
37673: POP
37674: POP
// end ; end ;
37675: GO 37000
37677: POP
37678: POP
// end ;
37679: LD_VAR 0 8
37683: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37684: LD_INT 0
37686: PPUSH
// result := true ;
37687: LD_ADDR_VAR 0 3
37691: PUSH
37692: LD_INT 1
37694: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37695: LD_VAR 0 2
37699: PUSH
37700: LD_INT 24
37702: DOUBLE
37703: EQUAL
37704: IFTRUE 37714
37706: LD_INT 33
37708: DOUBLE
37709: EQUAL
37710: IFTRUE 37714
37712: GO 37739
37714: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37715: LD_ADDR_VAR 0 3
37719: PUSH
37720: LD_INT 32
37722: PPUSH
37723: LD_VAR 0 1
37727: PPUSH
37728: CALL_OW 321
37732: PUSH
37733: LD_INT 2
37735: EQUAL
37736: ST_TO_ADDR
37737: GO 38059
37739: LD_INT 20
37741: DOUBLE
37742: EQUAL
37743: IFTRUE 37747
37745: GO 37772
37747: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37748: LD_ADDR_VAR 0 3
37752: PUSH
37753: LD_INT 6
37755: PPUSH
37756: LD_VAR 0 1
37760: PPUSH
37761: CALL_OW 321
37765: PUSH
37766: LD_INT 2
37768: EQUAL
37769: ST_TO_ADDR
37770: GO 38059
37772: LD_INT 22
37774: DOUBLE
37775: EQUAL
37776: IFTRUE 37786
37778: LD_INT 36
37780: DOUBLE
37781: EQUAL
37782: IFTRUE 37786
37784: GO 37811
37786: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37787: LD_ADDR_VAR 0 3
37791: PUSH
37792: LD_INT 15
37794: PPUSH
37795: LD_VAR 0 1
37799: PPUSH
37800: CALL_OW 321
37804: PUSH
37805: LD_INT 2
37807: EQUAL
37808: ST_TO_ADDR
37809: GO 38059
37811: LD_INT 30
37813: DOUBLE
37814: EQUAL
37815: IFTRUE 37819
37817: GO 37844
37819: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37820: LD_ADDR_VAR 0 3
37824: PUSH
37825: LD_INT 20
37827: PPUSH
37828: LD_VAR 0 1
37832: PPUSH
37833: CALL_OW 321
37837: PUSH
37838: LD_INT 2
37840: EQUAL
37841: ST_TO_ADDR
37842: GO 38059
37844: LD_INT 28
37846: DOUBLE
37847: EQUAL
37848: IFTRUE 37858
37850: LD_INT 21
37852: DOUBLE
37853: EQUAL
37854: IFTRUE 37858
37856: GO 37883
37858: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37859: LD_ADDR_VAR 0 3
37863: PUSH
37864: LD_INT 21
37866: PPUSH
37867: LD_VAR 0 1
37871: PPUSH
37872: CALL_OW 321
37876: PUSH
37877: LD_INT 2
37879: EQUAL
37880: ST_TO_ADDR
37881: GO 38059
37883: LD_INT 16
37885: DOUBLE
37886: EQUAL
37887: IFTRUE 37891
37889: GO 37918
37891: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37892: LD_ADDR_VAR 0 3
37896: PUSH
37897: LD_EXP 106
37901: PPUSH
37902: LD_VAR 0 1
37906: PPUSH
37907: CALL_OW 321
37911: PUSH
37912: LD_INT 2
37914: EQUAL
37915: ST_TO_ADDR
37916: GO 38059
37918: LD_INT 19
37920: DOUBLE
37921: EQUAL
37922: IFTRUE 37932
37924: LD_INT 23
37926: DOUBLE
37927: EQUAL
37928: IFTRUE 37932
37930: GO 37959
37932: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37933: LD_ADDR_VAR 0 3
37937: PUSH
37938: LD_EXP 105
37942: PPUSH
37943: LD_VAR 0 1
37947: PPUSH
37948: CALL_OW 321
37952: PUSH
37953: LD_INT 2
37955: EQUAL
37956: ST_TO_ADDR
37957: GO 38059
37959: LD_INT 17
37961: DOUBLE
37962: EQUAL
37963: IFTRUE 37967
37965: GO 37992
37967: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37968: LD_ADDR_VAR 0 3
37972: PUSH
37973: LD_INT 39
37975: PPUSH
37976: LD_VAR 0 1
37980: PPUSH
37981: CALL_OW 321
37985: PUSH
37986: LD_INT 2
37988: EQUAL
37989: ST_TO_ADDR
37990: GO 38059
37992: LD_INT 18
37994: DOUBLE
37995: EQUAL
37996: IFTRUE 38000
37998: GO 38025
38000: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38001: LD_ADDR_VAR 0 3
38005: PUSH
38006: LD_INT 40
38008: PPUSH
38009: LD_VAR 0 1
38013: PPUSH
38014: CALL_OW 321
38018: PUSH
38019: LD_INT 2
38021: EQUAL
38022: ST_TO_ADDR
38023: GO 38059
38025: LD_INT 27
38027: DOUBLE
38028: EQUAL
38029: IFTRUE 38033
38031: GO 38058
38033: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38034: LD_ADDR_VAR 0 3
38038: PUSH
38039: LD_INT 35
38041: PPUSH
38042: LD_VAR 0 1
38046: PPUSH
38047: CALL_OW 321
38051: PUSH
38052: LD_INT 2
38054: EQUAL
38055: ST_TO_ADDR
38056: GO 38059
38058: POP
// end ;
38059: LD_VAR 0 3
38063: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38064: LD_INT 0
38066: PPUSH
38067: PPUSH
38068: PPUSH
38069: PPUSH
38070: PPUSH
38071: PPUSH
38072: PPUSH
38073: PPUSH
38074: PPUSH
38075: PPUSH
38076: PPUSH
// result := false ;
38077: LD_ADDR_VAR 0 6
38081: PUSH
38082: LD_INT 0
38084: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38085: LD_VAR 0 1
38089: NOT
38090: PUSH
38091: LD_VAR 0 1
38095: PPUSH
38096: CALL_OW 266
38100: PUSH
38101: LD_INT 0
38103: PUSH
38104: LD_INT 1
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: IN
38111: NOT
38112: OR
38113: PUSH
38114: LD_VAR 0 2
38118: NOT
38119: OR
38120: PUSH
38121: LD_VAR 0 5
38125: PUSH
38126: LD_INT 0
38128: PUSH
38129: LD_INT 1
38131: PUSH
38132: LD_INT 2
38134: PUSH
38135: LD_INT 3
38137: PUSH
38138: LD_INT 4
38140: PUSH
38141: LD_INT 5
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: IN
38152: NOT
38153: OR
38154: PUSH
38155: LD_VAR 0 3
38159: PPUSH
38160: LD_VAR 0 4
38164: PPUSH
38165: CALL_OW 488
38169: NOT
38170: OR
38171: IFFALSE 38175
// exit ;
38173: GO 38911
// side := GetSide ( depot ) ;
38175: LD_ADDR_VAR 0 9
38179: PUSH
38180: LD_VAR 0 1
38184: PPUSH
38185: CALL_OW 255
38189: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38190: LD_VAR 0 9
38194: PPUSH
38195: LD_VAR 0 2
38199: PPUSH
38200: CALL 37684 0 2
38204: NOT
38205: IFFALSE 38209
// exit ;
38207: GO 38911
// pom := GetBase ( depot ) ;
38209: LD_ADDR_VAR 0 10
38213: PUSH
38214: LD_VAR 0 1
38218: PPUSH
38219: CALL_OW 274
38223: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38224: LD_ADDR_VAR 0 11
38228: PUSH
38229: LD_VAR 0 2
38233: PPUSH
38234: LD_VAR 0 1
38238: PPUSH
38239: CALL_OW 248
38243: PPUSH
38244: CALL_OW 450
38248: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38249: LD_VAR 0 10
38253: PPUSH
38254: LD_INT 1
38256: PPUSH
38257: CALL_OW 275
38261: PUSH
38262: LD_VAR 0 11
38266: PUSH
38267: LD_INT 1
38269: ARRAY
38270: GREATEREQUAL
38271: PUSH
38272: LD_VAR 0 10
38276: PPUSH
38277: LD_INT 2
38279: PPUSH
38280: CALL_OW 275
38284: PUSH
38285: LD_VAR 0 11
38289: PUSH
38290: LD_INT 2
38292: ARRAY
38293: GREATEREQUAL
38294: AND
38295: PUSH
38296: LD_VAR 0 10
38300: PPUSH
38301: LD_INT 3
38303: PPUSH
38304: CALL_OW 275
38308: PUSH
38309: LD_VAR 0 11
38313: PUSH
38314: LD_INT 3
38316: ARRAY
38317: GREATEREQUAL
38318: AND
38319: NOT
38320: IFFALSE 38324
// exit ;
38322: GO 38911
// if GetBType ( depot ) = b_depot then
38324: LD_VAR 0 1
38328: PPUSH
38329: CALL_OW 266
38333: PUSH
38334: LD_INT 0
38336: EQUAL
38337: IFFALSE 38349
// dist := 28 else
38339: LD_ADDR_VAR 0 14
38343: PUSH
38344: LD_INT 28
38346: ST_TO_ADDR
38347: GO 38357
// dist := 36 ;
38349: LD_ADDR_VAR 0 14
38353: PUSH
38354: LD_INT 36
38356: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38357: LD_VAR 0 1
38361: PPUSH
38362: LD_VAR 0 3
38366: PPUSH
38367: LD_VAR 0 4
38371: PPUSH
38372: CALL_OW 297
38376: PUSH
38377: LD_VAR 0 14
38381: GREATER
38382: IFFALSE 38386
// exit ;
38384: GO 38911
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38386: LD_ADDR_VAR 0 12
38390: PUSH
38391: LD_VAR 0 2
38395: PPUSH
38396: LD_VAR 0 3
38400: PPUSH
38401: LD_VAR 0 4
38405: PPUSH
38406: LD_VAR 0 5
38410: PPUSH
38411: LD_VAR 0 1
38415: PPUSH
38416: CALL_OW 248
38420: PPUSH
38421: LD_INT 0
38423: PPUSH
38424: CALL 38916 0 6
38428: ST_TO_ADDR
// if not hexes then
38429: LD_VAR 0 12
38433: NOT
38434: IFFALSE 38438
// exit ;
38436: GO 38911
// hex := GetHexInfo ( x , y ) ;
38438: LD_ADDR_VAR 0 15
38442: PUSH
38443: LD_VAR 0 3
38447: PPUSH
38448: LD_VAR 0 4
38452: PPUSH
38453: CALL_OW 546
38457: ST_TO_ADDR
// if hex [ 1 ] then
38458: LD_VAR 0 15
38462: PUSH
38463: LD_INT 1
38465: ARRAY
38466: IFFALSE 38470
// exit ;
38468: GO 38911
// height := hex [ 2 ] ;
38470: LD_ADDR_VAR 0 13
38474: PUSH
38475: LD_VAR 0 15
38479: PUSH
38480: LD_INT 2
38482: ARRAY
38483: ST_TO_ADDR
// for i = 1 to hexes do
38484: LD_ADDR_VAR 0 7
38488: PUSH
38489: DOUBLE
38490: LD_INT 1
38492: DEC
38493: ST_TO_ADDR
38494: LD_VAR 0 12
38498: PUSH
38499: FOR_TO
38500: IFFALSE 38830
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38502: LD_VAR 0 12
38506: PUSH
38507: LD_VAR 0 7
38511: ARRAY
38512: PUSH
38513: LD_INT 1
38515: ARRAY
38516: PPUSH
38517: LD_VAR 0 12
38521: PUSH
38522: LD_VAR 0 7
38526: ARRAY
38527: PUSH
38528: LD_INT 2
38530: ARRAY
38531: PPUSH
38532: CALL_OW 488
38536: NOT
38537: PUSH
38538: LD_VAR 0 12
38542: PUSH
38543: LD_VAR 0 7
38547: ARRAY
38548: PUSH
38549: LD_INT 1
38551: ARRAY
38552: PPUSH
38553: LD_VAR 0 12
38557: PUSH
38558: LD_VAR 0 7
38562: ARRAY
38563: PUSH
38564: LD_INT 2
38566: ARRAY
38567: PPUSH
38568: CALL_OW 428
38572: PUSH
38573: LD_INT 0
38575: GREATER
38576: OR
38577: PUSH
38578: LD_VAR 0 12
38582: PUSH
38583: LD_VAR 0 7
38587: ARRAY
38588: PUSH
38589: LD_INT 1
38591: ARRAY
38592: PPUSH
38593: LD_VAR 0 12
38597: PUSH
38598: LD_VAR 0 7
38602: ARRAY
38603: PUSH
38604: LD_INT 2
38606: ARRAY
38607: PPUSH
38608: CALL_OW 351
38612: OR
38613: IFFALSE 38619
// exit ;
38615: POP
38616: POP
38617: GO 38911
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38619: LD_ADDR_VAR 0 8
38623: PUSH
38624: LD_VAR 0 12
38628: PUSH
38629: LD_VAR 0 7
38633: ARRAY
38634: PUSH
38635: LD_INT 1
38637: ARRAY
38638: PPUSH
38639: LD_VAR 0 12
38643: PUSH
38644: LD_VAR 0 7
38648: ARRAY
38649: PUSH
38650: LD_INT 2
38652: ARRAY
38653: PPUSH
38654: CALL_OW 546
38658: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38659: LD_VAR 0 8
38663: PUSH
38664: LD_INT 1
38666: ARRAY
38667: PUSH
38668: LD_VAR 0 8
38672: PUSH
38673: LD_INT 2
38675: ARRAY
38676: PUSH
38677: LD_VAR 0 13
38681: PUSH
38682: LD_INT 2
38684: PLUS
38685: GREATER
38686: OR
38687: PUSH
38688: LD_VAR 0 8
38692: PUSH
38693: LD_INT 2
38695: ARRAY
38696: PUSH
38697: LD_VAR 0 13
38701: PUSH
38702: LD_INT 2
38704: MINUS
38705: LESS
38706: OR
38707: PUSH
38708: LD_VAR 0 8
38712: PUSH
38713: LD_INT 3
38715: ARRAY
38716: PUSH
38717: LD_INT 0
38719: PUSH
38720: LD_INT 8
38722: PUSH
38723: LD_INT 9
38725: PUSH
38726: LD_INT 10
38728: PUSH
38729: LD_INT 11
38731: PUSH
38732: LD_INT 12
38734: PUSH
38735: LD_INT 13
38737: PUSH
38738: LD_INT 16
38740: PUSH
38741: LD_INT 17
38743: PUSH
38744: LD_INT 18
38746: PUSH
38747: LD_INT 19
38749: PUSH
38750: LD_INT 20
38752: PUSH
38753: LD_INT 21
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: IN
38771: NOT
38772: OR
38773: PUSH
38774: LD_VAR 0 8
38778: PUSH
38779: LD_INT 5
38781: ARRAY
38782: NOT
38783: OR
38784: PUSH
38785: LD_VAR 0 8
38789: PUSH
38790: LD_INT 6
38792: ARRAY
38793: PUSH
38794: LD_INT 1
38796: PUSH
38797: LD_INT 2
38799: PUSH
38800: LD_INT 7
38802: PUSH
38803: LD_INT 9
38805: PUSH
38806: LD_INT 10
38808: PUSH
38809: LD_INT 11
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: IN
38820: NOT
38821: OR
38822: IFFALSE 38828
// exit ;
38824: POP
38825: POP
38826: GO 38911
// end ;
38828: GO 38499
38830: POP
38831: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38832: LD_VAR 0 9
38836: PPUSH
38837: LD_VAR 0 3
38841: PPUSH
38842: LD_VAR 0 4
38846: PPUSH
38847: LD_INT 20
38849: PPUSH
38850: CALL 30857 0 4
38854: PUSH
38855: LD_INT 4
38857: ARRAY
38858: IFFALSE 38862
// exit ;
38860: GO 38911
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38862: LD_VAR 0 2
38866: PUSH
38867: LD_INT 29
38869: PUSH
38870: LD_INT 30
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: IN
38877: PUSH
38878: LD_VAR 0 3
38882: PPUSH
38883: LD_VAR 0 4
38887: PPUSH
38888: LD_VAR 0 9
38892: PPUSH
38893: CALL_OW 440
38897: NOT
38898: AND
38899: IFFALSE 38903
// exit ;
38901: GO 38911
// result := true ;
38903: LD_ADDR_VAR 0 6
38907: PUSH
38908: LD_INT 1
38910: ST_TO_ADDR
// end ;
38911: LD_VAR 0 6
38915: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38916: LD_INT 0
38918: PPUSH
38919: PPUSH
38920: PPUSH
38921: PPUSH
38922: PPUSH
38923: PPUSH
38924: PPUSH
38925: PPUSH
38926: PPUSH
38927: PPUSH
38928: PPUSH
38929: PPUSH
38930: PPUSH
38931: PPUSH
38932: PPUSH
38933: PPUSH
38934: PPUSH
38935: PPUSH
38936: PPUSH
38937: PPUSH
38938: PPUSH
38939: PPUSH
38940: PPUSH
38941: PPUSH
38942: PPUSH
38943: PPUSH
38944: PPUSH
38945: PPUSH
38946: PPUSH
38947: PPUSH
38948: PPUSH
38949: PPUSH
38950: PPUSH
38951: PPUSH
38952: PPUSH
38953: PPUSH
38954: PPUSH
38955: PPUSH
38956: PPUSH
38957: PPUSH
38958: PPUSH
38959: PPUSH
38960: PPUSH
38961: PPUSH
38962: PPUSH
38963: PPUSH
38964: PPUSH
38965: PPUSH
38966: PPUSH
38967: PPUSH
38968: PPUSH
38969: PPUSH
38970: PPUSH
38971: PPUSH
38972: PPUSH
38973: PPUSH
38974: PPUSH
38975: PPUSH
// result = [ ] ;
38976: LD_ADDR_VAR 0 7
38980: PUSH
38981: EMPTY
38982: ST_TO_ADDR
// temp_list = [ ] ;
38983: LD_ADDR_VAR 0 9
38987: PUSH
38988: EMPTY
38989: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38990: LD_VAR 0 4
38994: PUSH
38995: LD_INT 0
38997: PUSH
38998: LD_INT 1
39000: PUSH
39001: LD_INT 2
39003: PUSH
39004: LD_INT 3
39006: PUSH
39007: LD_INT 4
39009: PUSH
39010: LD_INT 5
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: IN
39021: NOT
39022: PUSH
39023: LD_VAR 0 1
39027: PUSH
39028: LD_INT 0
39030: PUSH
39031: LD_INT 1
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: IN
39038: PUSH
39039: LD_VAR 0 5
39043: PUSH
39044: LD_INT 1
39046: PUSH
39047: LD_INT 2
39049: PUSH
39050: LD_INT 3
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: LIST
39057: IN
39058: NOT
39059: AND
39060: OR
39061: IFFALSE 39065
// exit ;
39063: GO 57456
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39065: LD_VAR 0 1
39069: PUSH
39070: LD_INT 6
39072: PUSH
39073: LD_INT 7
39075: PUSH
39076: LD_INT 8
39078: PUSH
39079: LD_INT 13
39081: PUSH
39082: LD_INT 12
39084: PUSH
39085: LD_INT 15
39087: PUSH
39088: LD_INT 11
39090: PUSH
39091: LD_INT 14
39093: PUSH
39094: LD_INT 10
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: IN
39108: IFFALSE 39118
// btype = b_lab ;
39110: LD_ADDR_VAR 0 1
39114: PUSH
39115: LD_INT 6
39117: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39118: LD_VAR 0 6
39122: PUSH
39123: LD_INT 0
39125: PUSH
39126: LD_INT 1
39128: PUSH
39129: LD_INT 2
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: LIST
39136: IN
39137: NOT
39138: PUSH
39139: LD_VAR 0 1
39143: PUSH
39144: LD_INT 0
39146: PUSH
39147: LD_INT 1
39149: PUSH
39150: LD_INT 2
39152: PUSH
39153: LD_INT 3
39155: PUSH
39156: LD_INT 6
39158: PUSH
39159: LD_INT 36
39161: PUSH
39162: LD_INT 4
39164: PUSH
39165: LD_INT 5
39167: PUSH
39168: LD_INT 31
39170: PUSH
39171: LD_INT 32
39173: PUSH
39174: LD_INT 33
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: IN
39190: NOT
39191: PUSH
39192: LD_VAR 0 6
39196: PUSH
39197: LD_INT 1
39199: EQUAL
39200: AND
39201: OR
39202: PUSH
39203: LD_VAR 0 1
39207: PUSH
39208: LD_INT 2
39210: PUSH
39211: LD_INT 3
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: IN
39218: NOT
39219: PUSH
39220: LD_VAR 0 6
39224: PUSH
39225: LD_INT 2
39227: EQUAL
39228: AND
39229: OR
39230: IFFALSE 39240
// mode = 0 ;
39232: LD_ADDR_VAR 0 6
39236: PUSH
39237: LD_INT 0
39239: ST_TO_ADDR
// case mode of 0 :
39240: LD_VAR 0 6
39244: PUSH
39245: LD_INT 0
39247: DOUBLE
39248: EQUAL
39249: IFTRUE 39253
39251: GO 50706
39253: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39254: LD_ADDR_VAR 0 11
39258: PUSH
39259: LD_INT 0
39261: PUSH
39262: LD_INT 0
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 0
39271: PUSH
39272: LD_INT 1
39274: NEG
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 1
39282: PUSH
39283: LD_INT 0
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 1
39292: PUSH
39293: LD_INT 1
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 0
39302: PUSH
39303: LD_INT 1
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 1
39312: NEG
39313: PUSH
39314: LD_INT 0
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 1
39323: NEG
39324: PUSH
39325: LD_INT 1
39327: NEG
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 1
39335: NEG
39336: PUSH
39337: LD_INT 2
39339: NEG
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 0
39347: PUSH
39348: LD_INT 2
39350: NEG
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 1
39358: PUSH
39359: LD_INT 1
39361: NEG
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 1
39369: PUSH
39370: LD_INT 2
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 0
39379: PUSH
39380: LD_INT 2
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 1
39389: NEG
39390: PUSH
39391: LD_INT 1
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 1
39400: PUSH
39401: LD_INT 3
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 0
39410: PUSH
39411: LD_INT 3
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 1
39420: NEG
39421: PUSH
39422: LD_INT 2
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39447: LD_ADDR_VAR 0 12
39451: PUSH
39452: LD_INT 0
39454: PUSH
39455: LD_INT 0
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 0
39464: PUSH
39465: LD_INT 1
39467: NEG
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 1
39475: PUSH
39476: LD_INT 0
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 1
39485: PUSH
39486: LD_INT 1
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 0
39495: PUSH
39496: LD_INT 1
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 1
39505: NEG
39506: PUSH
39507: LD_INT 0
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 1
39516: NEG
39517: PUSH
39518: LD_INT 1
39520: NEG
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 1
39528: PUSH
39529: LD_INT 1
39531: NEG
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 2
39539: PUSH
39540: LD_INT 0
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 2
39549: PUSH
39550: LD_INT 1
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 1
39559: NEG
39560: PUSH
39561: LD_INT 1
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: LD_INT 2
39570: NEG
39571: PUSH
39572: LD_INT 0
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 2
39581: NEG
39582: PUSH
39583: LD_INT 1
39585: NEG
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 2
39593: NEG
39594: PUSH
39595: LD_INT 1
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 3
39604: NEG
39605: PUSH
39606: LD_INT 0
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 3
39615: NEG
39616: PUSH
39617: LD_INT 1
39619: NEG
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39643: LD_ADDR_VAR 0 13
39647: PUSH
39648: LD_INT 0
39650: PUSH
39651: LD_INT 0
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 0
39660: PUSH
39661: LD_INT 1
39663: NEG
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 1
39671: PUSH
39672: LD_INT 0
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 1
39681: PUSH
39682: LD_INT 1
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 0
39691: PUSH
39692: LD_INT 1
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 1
39701: NEG
39702: PUSH
39703: LD_INT 0
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 1
39712: NEG
39713: PUSH
39714: LD_INT 1
39716: NEG
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 1
39724: NEG
39725: PUSH
39726: LD_INT 2
39728: NEG
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 2
39736: PUSH
39737: LD_INT 1
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 2
39746: PUSH
39747: LD_INT 2
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 1
39756: PUSH
39757: LD_INT 2
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 2
39766: NEG
39767: PUSH
39768: LD_INT 1
39770: NEG
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 2
39778: NEG
39779: PUSH
39780: LD_INT 2
39782: NEG
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 2
39790: NEG
39791: PUSH
39792: LD_INT 3
39794: NEG
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 3
39802: NEG
39803: PUSH
39804: LD_INT 2
39806: NEG
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 3
39814: NEG
39815: PUSH
39816: LD_INT 3
39818: NEG
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39842: LD_ADDR_VAR 0 14
39846: PUSH
39847: LD_INT 0
39849: PUSH
39850: LD_INT 0
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 0
39859: PUSH
39860: LD_INT 1
39862: NEG
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 1
39870: PUSH
39871: LD_INT 0
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 1
39880: PUSH
39881: LD_INT 1
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 0
39890: PUSH
39891: LD_INT 1
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 1
39900: NEG
39901: PUSH
39902: LD_INT 0
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 1
39911: NEG
39912: PUSH
39913: LD_INT 1
39915: NEG
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 1
39923: NEG
39924: PUSH
39925: LD_INT 2
39927: NEG
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 0
39935: PUSH
39936: LD_INT 2
39938: NEG
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 1
39946: PUSH
39947: LD_INT 1
39949: NEG
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 1
39957: PUSH
39958: LD_INT 2
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 0
39967: PUSH
39968: LD_INT 2
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 1
39977: NEG
39978: PUSH
39979: LD_INT 1
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 1
39988: NEG
39989: PUSH
39990: LD_INT 3
39992: NEG
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 0
40000: PUSH
40001: LD_INT 3
40003: NEG
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 1
40011: PUSH
40012: LD_INT 2
40014: NEG
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40038: LD_ADDR_VAR 0 15
40042: PUSH
40043: LD_INT 0
40045: PUSH
40046: LD_INT 0
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 0
40055: PUSH
40056: LD_INT 1
40058: NEG
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 1
40066: PUSH
40067: LD_INT 0
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 1
40076: PUSH
40077: LD_INT 1
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 0
40086: PUSH
40087: LD_INT 1
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 1
40096: NEG
40097: PUSH
40098: LD_INT 0
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 1
40107: NEG
40108: PUSH
40109: LD_INT 1
40111: NEG
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 1
40119: PUSH
40120: LD_INT 1
40122: NEG
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 2
40130: PUSH
40131: LD_INT 0
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 2
40140: PUSH
40141: LD_INT 1
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 1
40150: NEG
40151: PUSH
40152: LD_INT 1
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 2
40161: NEG
40162: PUSH
40163: LD_INT 0
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 2
40172: NEG
40173: PUSH
40174: LD_INT 1
40176: NEG
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 2
40184: PUSH
40185: LD_INT 1
40187: NEG
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 3
40195: PUSH
40196: LD_INT 0
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 3
40205: PUSH
40206: LD_INT 1
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40231: LD_ADDR_VAR 0 16
40235: PUSH
40236: LD_INT 0
40238: PUSH
40239: LD_INT 0
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 0
40248: PUSH
40249: LD_INT 1
40251: NEG
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 1
40259: PUSH
40260: LD_INT 0
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 1
40269: PUSH
40270: LD_INT 1
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 0
40279: PUSH
40280: LD_INT 1
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 1
40289: NEG
40290: PUSH
40291: LD_INT 0
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: LD_INT 1
40300: NEG
40301: PUSH
40302: LD_INT 1
40304: NEG
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 1
40312: NEG
40313: PUSH
40314: LD_INT 2
40316: NEG
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 2
40324: PUSH
40325: LD_INT 1
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 2
40334: PUSH
40335: LD_INT 2
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 1
40344: PUSH
40345: LD_INT 2
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 2
40354: NEG
40355: PUSH
40356: LD_INT 1
40358: NEG
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 2
40366: NEG
40367: PUSH
40368: LD_INT 2
40370: NEG
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 3
40378: PUSH
40379: LD_INT 2
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 3
40388: PUSH
40389: LD_INT 3
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 2
40398: PUSH
40399: LD_INT 3
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40424: LD_ADDR_VAR 0 17
40428: PUSH
40429: LD_INT 0
40431: PUSH
40432: LD_INT 0
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: LD_INT 1
40444: NEG
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 1
40452: PUSH
40453: LD_INT 0
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 1
40462: PUSH
40463: LD_INT 1
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 0
40472: PUSH
40473: LD_INT 1
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 1
40482: NEG
40483: PUSH
40484: LD_INT 0
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 1
40493: NEG
40494: PUSH
40495: LD_INT 1
40497: NEG
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 1
40505: NEG
40506: PUSH
40507: LD_INT 2
40509: NEG
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 0
40517: PUSH
40518: LD_INT 2
40520: NEG
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 1
40528: PUSH
40529: LD_INT 1
40531: NEG
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 2
40539: PUSH
40540: LD_INT 0
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 2
40549: PUSH
40550: LD_INT 1
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 2
40559: PUSH
40560: LD_INT 2
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 1
40569: PUSH
40570: LD_INT 2
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 0
40579: PUSH
40580: LD_INT 2
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 1
40589: NEG
40590: PUSH
40591: LD_INT 1
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 2
40600: NEG
40601: PUSH
40602: LD_INT 0
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 2
40611: NEG
40612: PUSH
40613: LD_INT 1
40615: NEG
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 2
40623: NEG
40624: PUSH
40625: LD_INT 2
40627: NEG
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40654: LD_ADDR_VAR 0 18
40658: PUSH
40659: LD_INT 0
40661: PUSH
40662: LD_INT 0
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 0
40671: PUSH
40672: LD_INT 1
40674: NEG
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 1
40682: PUSH
40683: LD_INT 0
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 1
40692: PUSH
40693: LD_INT 1
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 0
40702: PUSH
40703: LD_INT 1
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 1
40712: NEG
40713: PUSH
40714: LD_INT 0
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 1
40723: NEG
40724: PUSH
40725: LD_INT 1
40727: NEG
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 1
40735: NEG
40736: PUSH
40737: LD_INT 2
40739: NEG
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 0
40747: PUSH
40748: LD_INT 2
40750: NEG
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 1
40758: PUSH
40759: LD_INT 1
40761: NEG
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 2
40769: PUSH
40770: LD_INT 0
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 2
40779: PUSH
40780: LD_INT 1
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 2
40789: PUSH
40790: LD_INT 2
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 1
40799: PUSH
40800: LD_INT 2
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 0
40809: PUSH
40810: LD_INT 2
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 1
40819: NEG
40820: PUSH
40821: LD_INT 1
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 2
40830: NEG
40831: PUSH
40832: LD_INT 0
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 2
40841: NEG
40842: PUSH
40843: LD_INT 1
40845: NEG
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 2
40853: NEG
40854: PUSH
40855: LD_INT 2
40857: NEG
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40884: LD_ADDR_VAR 0 19
40888: PUSH
40889: LD_INT 0
40891: PUSH
40892: LD_INT 0
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 0
40901: PUSH
40902: LD_INT 1
40904: NEG
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 1
40912: PUSH
40913: LD_INT 0
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 1
40922: PUSH
40923: LD_INT 1
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: LD_INT 1
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 1
40942: NEG
40943: PUSH
40944: LD_INT 0
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 1
40953: NEG
40954: PUSH
40955: LD_INT 1
40957: NEG
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 1
40965: NEG
40966: PUSH
40967: LD_INT 2
40969: NEG
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 0
40977: PUSH
40978: LD_INT 2
40980: NEG
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 1
40988: PUSH
40989: LD_INT 1
40991: NEG
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 2
40999: PUSH
41000: LD_INT 0
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 2
41009: PUSH
41010: LD_INT 1
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 2
41019: PUSH
41020: LD_INT 2
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 1
41029: PUSH
41030: LD_INT 2
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 0
41039: PUSH
41040: LD_INT 2
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 1
41049: NEG
41050: PUSH
41051: LD_INT 1
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 2
41060: NEG
41061: PUSH
41062: LD_INT 0
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 2
41071: NEG
41072: PUSH
41073: LD_INT 1
41075: NEG
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 2
41083: NEG
41084: PUSH
41085: LD_INT 2
41087: NEG
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41114: LD_ADDR_VAR 0 20
41118: PUSH
41119: LD_INT 0
41121: PUSH
41122: LD_INT 0
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 0
41131: PUSH
41132: LD_INT 1
41134: NEG
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 1
41142: PUSH
41143: LD_INT 0
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 1
41152: PUSH
41153: LD_INT 1
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 0
41162: PUSH
41163: LD_INT 1
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 1
41172: NEG
41173: PUSH
41174: LD_INT 0
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 1
41183: NEG
41184: PUSH
41185: LD_INT 1
41187: NEG
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 1
41195: NEG
41196: PUSH
41197: LD_INT 2
41199: NEG
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 0
41207: PUSH
41208: LD_INT 2
41210: NEG
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 1
41218: PUSH
41219: LD_INT 1
41221: NEG
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 2
41229: PUSH
41230: LD_INT 0
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 2
41239: PUSH
41240: LD_INT 1
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 2
41249: PUSH
41250: LD_INT 2
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 1
41259: PUSH
41260: LD_INT 2
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 0
41269: PUSH
41270: LD_INT 2
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 1
41279: NEG
41280: PUSH
41281: LD_INT 1
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 2
41290: NEG
41291: PUSH
41292: LD_INT 0
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 2
41301: NEG
41302: PUSH
41303: LD_INT 1
41305: NEG
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 2
41313: NEG
41314: PUSH
41315: LD_INT 2
41317: NEG
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41344: LD_ADDR_VAR 0 21
41348: PUSH
41349: LD_INT 0
41351: PUSH
41352: LD_INT 0
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 0
41361: PUSH
41362: LD_INT 1
41364: NEG
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 1
41372: PUSH
41373: LD_INT 0
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 1
41382: PUSH
41383: LD_INT 1
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 0
41392: PUSH
41393: LD_INT 1
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 1
41402: NEG
41403: PUSH
41404: LD_INT 0
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 1
41413: NEG
41414: PUSH
41415: LD_INT 1
41417: NEG
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 1
41425: NEG
41426: PUSH
41427: LD_INT 2
41429: NEG
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 0
41437: PUSH
41438: LD_INT 2
41440: NEG
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 1
41448: PUSH
41449: LD_INT 1
41451: NEG
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 2
41459: PUSH
41460: LD_INT 0
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 2
41469: PUSH
41470: LD_INT 1
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 2
41479: PUSH
41480: LD_INT 2
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 1
41489: PUSH
41490: LD_INT 2
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 0
41499: PUSH
41500: LD_INT 2
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 1
41509: NEG
41510: PUSH
41511: LD_INT 1
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 2
41520: NEG
41521: PUSH
41522: LD_INT 0
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 2
41531: NEG
41532: PUSH
41533: LD_INT 1
41535: NEG
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 2
41543: NEG
41544: PUSH
41545: LD_INT 2
41547: NEG
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41574: LD_ADDR_VAR 0 22
41578: PUSH
41579: LD_INT 0
41581: PUSH
41582: LD_INT 0
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 0
41591: PUSH
41592: LD_INT 1
41594: NEG
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 1
41602: PUSH
41603: LD_INT 0
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 1
41612: PUSH
41613: LD_INT 1
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 0
41622: PUSH
41623: LD_INT 1
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 1
41632: NEG
41633: PUSH
41634: LD_INT 0
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 1
41643: NEG
41644: PUSH
41645: LD_INT 1
41647: NEG
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 1
41655: NEG
41656: PUSH
41657: LD_INT 2
41659: NEG
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 0
41667: PUSH
41668: LD_INT 2
41670: NEG
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 1
41678: PUSH
41679: LD_INT 1
41681: NEG
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 2
41689: PUSH
41690: LD_INT 0
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 2
41699: PUSH
41700: LD_INT 1
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 2
41709: PUSH
41710: LD_INT 2
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 1
41719: PUSH
41720: LD_INT 2
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 0
41729: PUSH
41730: LD_INT 2
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 1
41739: NEG
41740: PUSH
41741: LD_INT 1
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 2
41750: NEG
41751: PUSH
41752: LD_INT 0
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 2
41761: NEG
41762: PUSH
41763: LD_INT 1
41765: NEG
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 2
41773: NEG
41774: PUSH
41775: LD_INT 2
41777: NEG
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41804: LD_ADDR_VAR 0 23
41808: PUSH
41809: LD_INT 0
41811: PUSH
41812: LD_INT 0
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 0
41821: PUSH
41822: LD_INT 1
41824: NEG
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 1
41832: PUSH
41833: LD_INT 0
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 1
41842: PUSH
41843: LD_INT 1
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: LD_INT 1
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 1
41862: NEG
41863: PUSH
41864: LD_INT 0
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 1
41873: NEG
41874: PUSH
41875: LD_INT 1
41877: NEG
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 1
41885: NEG
41886: PUSH
41887: LD_INT 2
41889: NEG
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 0
41897: PUSH
41898: LD_INT 2
41900: NEG
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 1
41908: PUSH
41909: LD_INT 1
41911: NEG
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 2
41919: PUSH
41920: LD_INT 0
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 2
41929: PUSH
41930: LD_INT 1
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 2
41939: PUSH
41940: LD_INT 2
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 1
41949: PUSH
41950: LD_INT 2
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 0
41959: PUSH
41960: LD_INT 2
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 1
41969: NEG
41970: PUSH
41971: LD_INT 1
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 2
41980: NEG
41981: PUSH
41982: LD_INT 0
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 2
41991: NEG
41992: PUSH
41993: LD_INT 1
41995: NEG
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 2
42003: NEG
42004: PUSH
42005: LD_INT 2
42007: NEG
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 2
42015: NEG
42016: PUSH
42017: LD_INT 3
42019: NEG
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 1
42027: NEG
42028: PUSH
42029: LD_INT 3
42031: NEG
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 1
42039: PUSH
42040: LD_INT 2
42042: NEG
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 2
42050: PUSH
42051: LD_INT 1
42053: NEG
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42084: LD_ADDR_VAR 0 24
42088: PUSH
42089: LD_INT 0
42091: PUSH
42092: LD_INT 0
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 0
42101: PUSH
42102: LD_INT 1
42104: NEG
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 1
42112: PUSH
42113: LD_INT 0
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 1
42122: PUSH
42123: LD_INT 1
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 0
42132: PUSH
42133: LD_INT 1
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 1
42142: NEG
42143: PUSH
42144: LD_INT 0
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 1
42153: NEG
42154: PUSH
42155: LD_INT 1
42157: NEG
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 1
42165: NEG
42166: PUSH
42167: LD_INT 2
42169: NEG
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 0
42177: PUSH
42178: LD_INT 2
42180: NEG
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 1
42188: PUSH
42189: LD_INT 1
42191: NEG
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 2
42199: PUSH
42200: LD_INT 0
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 2
42209: PUSH
42210: LD_INT 1
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 2
42219: PUSH
42220: LD_INT 2
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 1
42229: PUSH
42230: LD_INT 2
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: LD_INT 2
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 1
42249: NEG
42250: PUSH
42251: LD_INT 1
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 2
42260: NEG
42261: PUSH
42262: LD_INT 0
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 2
42271: NEG
42272: PUSH
42273: LD_INT 1
42275: NEG
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 2
42283: NEG
42284: PUSH
42285: LD_INT 2
42287: NEG
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 1
42295: PUSH
42296: LD_INT 2
42298: NEG
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 2
42306: PUSH
42307: LD_INT 1
42309: NEG
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 3
42317: PUSH
42318: LD_INT 1
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 3
42327: PUSH
42328: LD_INT 2
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42360: LD_ADDR_VAR 0 25
42364: PUSH
42365: LD_INT 0
42367: PUSH
42368: LD_INT 0
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 0
42377: PUSH
42378: LD_INT 1
42380: NEG
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 1
42388: PUSH
42389: LD_INT 0
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 1
42398: PUSH
42399: LD_INT 1
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 0
42408: PUSH
42409: LD_INT 1
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 1
42418: NEG
42419: PUSH
42420: LD_INT 0
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 1
42429: NEG
42430: PUSH
42431: LD_INT 1
42433: NEG
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 1
42441: NEG
42442: PUSH
42443: LD_INT 2
42445: NEG
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 0
42453: PUSH
42454: LD_INT 2
42456: NEG
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 1
42464: PUSH
42465: LD_INT 1
42467: NEG
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 2
42475: PUSH
42476: LD_INT 0
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 2
42485: PUSH
42486: LD_INT 1
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 2
42495: PUSH
42496: LD_INT 2
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 1
42505: PUSH
42506: LD_INT 2
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: LD_INT 2
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 1
42525: NEG
42526: PUSH
42527: LD_INT 1
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 2
42536: NEG
42537: PUSH
42538: LD_INT 0
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 2
42547: NEG
42548: PUSH
42549: LD_INT 1
42551: NEG
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 2
42559: NEG
42560: PUSH
42561: LD_INT 2
42563: NEG
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 3
42571: PUSH
42572: LD_INT 1
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 3
42581: PUSH
42582: LD_INT 2
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 2
42591: PUSH
42592: LD_INT 3
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 1
42601: PUSH
42602: LD_INT 3
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42634: LD_ADDR_VAR 0 26
42638: PUSH
42639: LD_INT 0
42641: PUSH
42642: LD_INT 0
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 0
42651: PUSH
42652: LD_INT 1
42654: NEG
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 1
42662: PUSH
42663: LD_INT 0
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 1
42672: PUSH
42673: LD_INT 1
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 0
42682: PUSH
42683: LD_INT 1
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 1
42692: NEG
42693: PUSH
42694: LD_INT 0
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 1
42703: NEG
42704: PUSH
42705: LD_INT 1
42707: NEG
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 1
42715: NEG
42716: PUSH
42717: LD_INT 2
42719: NEG
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 0
42727: PUSH
42728: LD_INT 2
42730: NEG
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 1
42738: PUSH
42739: LD_INT 1
42741: NEG
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 2
42749: PUSH
42750: LD_INT 0
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 2
42759: PUSH
42760: LD_INT 1
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 2
42769: PUSH
42770: LD_INT 2
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 1
42779: PUSH
42780: LD_INT 2
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 0
42789: PUSH
42790: LD_INT 2
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 1
42799: NEG
42800: PUSH
42801: LD_INT 1
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 2
42810: NEG
42811: PUSH
42812: LD_INT 0
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 2
42821: NEG
42822: PUSH
42823: LD_INT 1
42825: NEG
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 2
42833: NEG
42834: PUSH
42835: LD_INT 2
42837: NEG
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 2
42845: PUSH
42846: LD_INT 3
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 1
42855: PUSH
42856: LD_INT 3
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 1
42865: NEG
42866: PUSH
42867: LD_INT 2
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 2
42876: NEG
42877: PUSH
42878: LD_INT 1
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42910: LD_ADDR_VAR 0 27
42914: PUSH
42915: LD_INT 0
42917: PUSH
42918: LD_INT 0
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 0
42927: PUSH
42928: LD_INT 1
42930: NEG
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 1
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 1
42948: PUSH
42949: LD_INT 1
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 0
42958: PUSH
42959: LD_INT 1
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 1
42968: NEG
42969: PUSH
42970: LD_INT 0
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 1
42979: NEG
42980: PUSH
42981: LD_INT 1
42983: NEG
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 1
42991: NEG
42992: PUSH
42993: LD_INT 2
42995: NEG
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 0
43003: PUSH
43004: LD_INT 2
43006: NEG
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 1
43014: PUSH
43015: LD_INT 1
43017: NEG
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 2
43025: PUSH
43026: LD_INT 0
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 2
43035: PUSH
43036: LD_INT 1
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 2
43045: PUSH
43046: LD_INT 2
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 1
43055: PUSH
43056: LD_INT 2
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 0
43065: PUSH
43066: LD_INT 2
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 1
43075: NEG
43076: PUSH
43077: LD_INT 1
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 2
43086: NEG
43087: PUSH
43088: LD_INT 0
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 2
43097: NEG
43098: PUSH
43099: LD_INT 1
43101: NEG
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 2
43109: NEG
43110: PUSH
43111: LD_INT 2
43113: NEG
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 1
43121: NEG
43122: PUSH
43123: LD_INT 2
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 2
43132: NEG
43133: PUSH
43134: LD_INT 1
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 3
43143: NEG
43144: PUSH
43145: LD_INT 1
43147: NEG
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 3
43155: NEG
43156: PUSH
43157: LD_INT 2
43159: NEG
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43190: LD_ADDR_VAR 0 28
43194: PUSH
43195: LD_INT 0
43197: PUSH
43198: LD_INT 0
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 0
43207: PUSH
43208: LD_INT 1
43210: NEG
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 1
43218: PUSH
43219: LD_INT 0
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 1
43228: PUSH
43229: LD_INT 1
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 0
43238: PUSH
43239: LD_INT 1
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 1
43248: NEG
43249: PUSH
43250: LD_INT 0
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 1
43259: NEG
43260: PUSH
43261: LD_INT 1
43263: NEG
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 1
43271: NEG
43272: PUSH
43273: LD_INT 2
43275: NEG
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 0
43283: PUSH
43284: LD_INT 2
43286: NEG
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 1
43294: PUSH
43295: LD_INT 1
43297: NEG
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 2
43305: PUSH
43306: LD_INT 0
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 2
43315: PUSH
43316: LD_INT 1
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 2
43325: PUSH
43326: LD_INT 2
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 1
43335: PUSH
43336: LD_INT 2
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 0
43345: PUSH
43346: LD_INT 2
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 1
43355: NEG
43356: PUSH
43357: LD_INT 1
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 2
43366: NEG
43367: PUSH
43368: LD_INT 0
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 2
43377: NEG
43378: PUSH
43379: LD_INT 1
43381: NEG
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 2
43389: NEG
43390: PUSH
43391: LD_INT 2
43393: NEG
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 2
43401: NEG
43402: PUSH
43403: LD_INT 3
43405: NEG
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 1
43413: NEG
43414: PUSH
43415: LD_INT 3
43417: NEG
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 3
43425: NEG
43426: PUSH
43427: LD_INT 1
43429: NEG
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 3
43437: NEG
43438: PUSH
43439: LD_INT 2
43441: NEG
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43472: LD_ADDR_VAR 0 29
43476: PUSH
43477: LD_INT 0
43479: PUSH
43480: LD_INT 0
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 0
43489: PUSH
43490: LD_INT 1
43492: NEG
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 1
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 1
43510: PUSH
43511: LD_INT 1
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 0
43520: PUSH
43521: LD_INT 1
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 1
43530: NEG
43531: PUSH
43532: LD_INT 0
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 1
43541: NEG
43542: PUSH
43543: LD_INT 1
43545: NEG
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 1
43553: NEG
43554: PUSH
43555: LD_INT 2
43557: NEG
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 0
43565: PUSH
43566: LD_INT 2
43568: NEG
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 1
43576: PUSH
43577: LD_INT 1
43579: NEG
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 2
43587: PUSH
43588: LD_INT 0
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 2
43597: PUSH
43598: LD_INT 1
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 1
43607: PUSH
43608: LD_INT 2
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 0
43617: PUSH
43618: LD_INT 2
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 1
43627: NEG
43628: PUSH
43629: LD_INT 1
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 2
43638: NEG
43639: PUSH
43640: LD_INT 1
43642: NEG
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 2
43650: NEG
43651: PUSH
43652: LD_INT 2
43654: NEG
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 2
43662: NEG
43663: PUSH
43664: LD_INT 3
43666: NEG
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 2
43674: PUSH
43675: LD_INT 1
43677: NEG
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 3
43685: PUSH
43686: LD_INT 1
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 1
43695: PUSH
43696: LD_INT 3
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 1
43705: NEG
43706: PUSH
43707: LD_INT 2
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 3
43716: NEG
43717: PUSH
43718: LD_INT 2
43720: NEG
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43751: LD_ADDR_VAR 0 30
43755: PUSH
43756: LD_INT 0
43758: PUSH
43759: LD_INT 0
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: LD_INT 1
43771: NEG
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 1
43779: PUSH
43780: LD_INT 0
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 1
43789: PUSH
43790: LD_INT 1
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: LD_INT 1
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 1
43809: NEG
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 1
43820: NEG
43821: PUSH
43822: LD_INT 1
43824: NEG
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 1
43832: NEG
43833: PUSH
43834: LD_INT 2
43836: NEG
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 0
43844: PUSH
43845: LD_INT 2
43847: NEG
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 1
43855: PUSH
43856: LD_INT 1
43858: NEG
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 2
43866: PUSH
43867: LD_INT 0
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 2
43876: PUSH
43877: LD_INT 1
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 2
43886: PUSH
43887: LD_INT 2
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: LD_INT 2
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 1
43906: NEG
43907: PUSH
43908: LD_INT 1
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 2
43917: NEG
43918: PUSH
43919: LD_INT 0
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 2
43928: NEG
43929: PUSH
43930: LD_INT 1
43932: NEG
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 1
43940: NEG
43941: PUSH
43942: LD_INT 3
43944: NEG
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 1
43952: PUSH
43953: LD_INT 2
43955: NEG
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 3
43963: PUSH
43964: LD_INT 2
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 2
43973: PUSH
43974: LD_INT 3
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 2
43983: NEG
43984: PUSH
43985: LD_INT 1
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 3
43994: NEG
43995: PUSH
43996: LD_INT 1
43998: NEG
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44029: LD_ADDR_VAR 0 31
44033: PUSH
44034: LD_INT 0
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 0
44046: PUSH
44047: LD_INT 1
44049: NEG
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 1
44057: PUSH
44058: LD_INT 0
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 1
44067: PUSH
44068: LD_INT 1
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 0
44077: PUSH
44078: LD_INT 1
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 1
44087: NEG
44088: PUSH
44089: LD_INT 0
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 1
44098: NEG
44099: PUSH
44100: LD_INT 1
44102: NEG
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 1
44110: NEG
44111: PUSH
44112: LD_INT 2
44114: NEG
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 1
44122: PUSH
44123: LD_INT 1
44125: NEG
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 2
44133: PUSH
44134: LD_INT 0
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 2
44143: PUSH
44144: LD_INT 1
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 2
44153: PUSH
44154: LD_INT 2
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 1
44163: PUSH
44164: LD_INT 2
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 0
44173: PUSH
44174: LD_INT 2
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 1
44183: NEG
44184: PUSH
44185: LD_INT 1
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 2
44194: NEG
44195: PUSH
44196: LD_INT 1
44198: NEG
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 2
44206: NEG
44207: PUSH
44208: LD_INT 2
44210: NEG
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 2
44218: NEG
44219: PUSH
44220: LD_INT 3
44222: NEG
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 2
44230: PUSH
44231: LD_INT 1
44233: NEG
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 3
44241: PUSH
44242: LD_INT 1
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 1
44251: PUSH
44252: LD_INT 3
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 1
44261: NEG
44262: PUSH
44263: LD_INT 2
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 3
44272: NEG
44273: PUSH
44274: LD_INT 2
44276: NEG
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44307: LD_ADDR_VAR 0 32
44311: PUSH
44312: LD_INT 0
44314: PUSH
44315: LD_INT 0
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 0
44324: PUSH
44325: LD_INT 1
44327: NEG
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 1
44335: PUSH
44336: LD_INT 0
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 1
44345: PUSH
44346: LD_INT 1
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 0
44355: PUSH
44356: LD_INT 1
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 1
44365: NEG
44366: PUSH
44367: LD_INT 0
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 1
44376: NEG
44377: PUSH
44378: LD_INT 1
44380: NEG
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 1
44388: NEG
44389: PUSH
44390: LD_INT 2
44392: NEG
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 0
44400: PUSH
44401: LD_INT 2
44403: NEG
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 1
44411: PUSH
44412: LD_INT 1
44414: NEG
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 2
44422: PUSH
44423: LD_INT 1
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 2
44432: PUSH
44433: LD_INT 2
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 1
44442: PUSH
44443: LD_INT 2
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 0
44452: PUSH
44453: LD_INT 2
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 1
44462: NEG
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 2
44473: NEG
44474: PUSH
44475: LD_INT 0
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 2
44484: NEG
44485: PUSH
44486: LD_INT 1
44488: NEG
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 1
44496: NEG
44497: PUSH
44498: LD_INT 3
44500: NEG
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 1
44508: PUSH
44509: LD_INT 2
44511: NEG
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 3
44519: PUSH
44520: LD_INT 2
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 2
44529: PUSH
44530: LD_INT 3
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 2
44539: NEG
44540: PUSH
44541: LD_INT 1
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 3
44550: NEG
44551: PUSH
44552: LD_INT 1
44554: NEG
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44585: LD_ADDR_VAR 0 33
44589: PUSH
44590: LD_INT 0
44592: PUSH
44593: LD_INT 0
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 0
44602: PUSH
44603: LD_INT 1
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 1
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 1
44623: PUSH
44624: LD_INT 1
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 0
44633: PUSH
44634: LD_INT 1
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 1
44643: NEG
44644: PUSH
44645: LD_INT 0
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 1
44654: NEG
44655: PUSH
44656: LD_INT 1
44658: NEG
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 1
44666: NEG
44667: PUSH
44668: LD_INT 2
44670: NEG
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 1
44678: PUSH
44679: LD_INT 1
44681: NEG
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 2
44689: PUSH
44690: LD_INT 0
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 2
44699: PUSH
44700: LD_INT 1
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 1
44709: PUSH
44710: LD_INT 2
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 0
44719: PUSH
44720: LD_INT 2
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 1
44729: NEG
44730: PUSH
44731: LD_INT 1
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 2
44740: NEG
44741: PUSH
44742: LD_INT 0
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 2
44751: NEG
44752: PUSH
44753: LD_INT 1
44755: NEG
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 2
44763: NEG
44764: PUSH
44765: LD_INT 2
44767: NEG
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 2
44775: NEG
44776: PUSH
44777: LD_INT 3
44779: NEG
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 2
44787: PUSH
44788: LD_INT 1
44790: NEG
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 3
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 1
44808: PUSH
44809: LD_INT 3
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: NEG
44819: PUSH
44820: LD_INT 2
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 3
44829: NEG
44830: PUSH
44831: LD_INT 2
44833: NEG
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44864: LD_ADDR_VAR 0 34
44868: PUSH
44869: LD_INT 0
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 0
44881: PUSH
44882: LD_INT 1
44884: NEG
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 1
44892: PUSH
44893: LD_INT 0
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 1
44902: PUSH
44903: LD_INT 1
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 0
44912: PUSH
44913: LD_INT 1
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 1
44922: NEG
44923: PUSH
44924: LD_INT 0
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 1
44933: NEG
44934: PUSH
44935: LD_INT 1
44937: NEG
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: NEG
44946: PUSH
44947: LD_INT 2
44949: NEG
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 0
44957: PUSH
44958: LD_INT 2
44960: NEG
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 1
44968: PUSH
44969: LD_INT 1
44971: NEG
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 2
44979: PUSH
44980: LD_INT 1
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 2
44989: PUSH
44990: LD_INT 2
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 1
44999: PUSH
45000: LD_INT 2
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 1
45009: NEG
45010: PUSH
45011: LD_INT 1
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 2
45020: NEG
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 2
45031: NEG
45032: PUSH
45033: LD_INT 1
45035: NEG
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 2
45043: NEG
45044: PUSH
45045: LD_INT 2
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: NEG
45056: PUSH
45057: LD_INT 3
45059: NEG
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 1
45067: PUSH
45068: LD_INT 2
45070: NEG
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 3
45078: PUSH
45079: LD_INT 2
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 2
45088: PUSH
45089: LD_INT 3
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 2
45098: NEG
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 3
45109: NEG
45110: PUSH
45111: LD_INT 1
45113: NEG
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45144: LD_ADDR_VAR 0 35
45148: PUSH
45149: LD_INT 0
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 0
45161: PUSH
45162: LD_INT 1
45164: NEG
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 1
45172: PUSH
45173: LD_INT 0
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 1
45182: PUSH
45183: LD_INT 1
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 0
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 1
45202: NEG
45203: PUSH
45204: LD_INT 0
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 1
45213: NEG
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 2
45225: PUSH
45226: LD_INT 1
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 2
45235: NEG
45236: PUSH
45237: LD_INT 1
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45256: LD_ADDR_VAR 0 36
45260: PUSH
45261: LD_INT 0
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 1
45284: PUSH
45285: LD_INT 0
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: LD_INT 1
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 0
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 1
45314: NEG
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 1
45325: NEG
45326: PUSH
45327: LD_INT 1
45329: NEG
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 1
45337: NEG
45338: PUSH
45339: LD_INT 2
45341: NEG
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: LD_INT 2
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45368: LD_ADDR_VAR 0 37
45372: PUSH
45373: LD_INT 0
45375: PUSH
45376: LD_INT 0
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 0
45385: PUSH
45386: LD_INT 1
45388: NEG
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 1
45396: PUSH
45397: LD_INT 0
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 1
45406: PUSH
45407: LD_INT 1
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: LD_INT 1
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 1
45426: NEG
45427: PUSH
45428: LD_INT 0
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 1
45437: NEG
45438: PUSH
45439: LD_INT 1
45441: NEG
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 1
45449: PUSH
45450: LD_INT 1
45452: NEG
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 1
45460: NEG
45461: PUSH
45462: LD_INT 1
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45480: LD_ADDR_VAR 0 38
45484: PUSH
45485: LD_INT 0
45487: PUSH
45488: LD_INT 0
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 0
45497: PUSH
45498: LD_INT 1
45500: NEG
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 1
45508: PUSH
45509: LD_INT 0
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 1
45518: PUSH
45519: LD_INT 1
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 0
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 1
45538: NEG
45539: PUSH
45540: LD_INT 0
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 1
45549: NEG
45550: PUSH
45551: LD_INT 1
45553: NEG
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 2
45571: NEG
45572: PUSH
45573: LD_INT 1
45575: NEG
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45592: LD_ADDR_VAR 0 39
45596: PUSH
45597: LD_INT 0
45599: PUSH
45600: LD_INT 0
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 0
45609: PUSH
45610: LD_INT 1
45612: NEG
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 1
45620: PUSH
45621: LD_INT 0
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 1
45630: PUSH
45631: LD_INT 1
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: LD_INT 1
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 1
45650: NEG
45651: PUSH
45652: LD_INT 0
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 1
45661: NEG
45662: PUSH
45663: LD_INT 1
45665: NEG
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 1
45673: NEG
45674: PUSH
45675: LD_INT 2
45677: NEG
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 1
45685: PUSH
45686: LD_INT 2
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45704: LD_ADDR_VAR 0 40
45708: PUSH
45709: LD_INT 0
45711: PUSH
45712: LD_INT 0
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 0
45721: PUSH
45722: LD_INT 1
45724: NEG
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 1
45732: PUSH
45733: LD_INT 0
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 1
45742: PUSH
45743: LD_INT 1
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 0
45752: PUSH
45753: LD_INT 1
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 1
45762: NEG
45763: PUSH
45764: LD_INT 0
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 1
45773: NEG
45774: PUSH
45775: LD_INT 1
45777: NEG
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 1
45785: PUSH
45786: LD_INT 1
45788: NEG
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: LD_INT 1
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45816: LD_ADDR_VAR 0 41
45820: PUSH
45821: LD_INT 0
45823: PUSH
45824: LD_INT 0
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: LD_INT 1
45836: NEG
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 1
45844: PUSH
45845: LD_INT 0
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 1
45854: PUSH
45855: LD_INT 1
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 0
45864: PUSH
45865: LD_INT 1
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 1
45874: NEG
45875: PUSH
45876: LD_INT 0
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 1
45885: NEG
45886: PUSH
45887: LD_INT 1
45889: NEG
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 1
45897: NEG
45898: PUSH
45899: LD_INT 2
45901: NEG
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 1
45909: PUSH
45910: LD_INT 1
45912: NEG
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 2
45920: PUSH
45921: LD_INT 0
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 2
45930: PUSH
45931: LD_INT 1
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 2
45940: PUSH
45941: LD_INT 2
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 1
45950: PUSH
45951: LD_INT 2
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 1
45960: NEG
45961: PUSH
45962: LD_INT 1
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 2
45971: NEG
45972: PUSH
45973: LD_INT 0
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 2
45982: NEG
45983: PUSH
45984: LD_INT 1
45986: NEG
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 2
45994: NEG
45995: PUSH
45996: LD_INT 2
45998: NEG
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 2
46006: NEG
46007: PUSH
46008: LD_INT 3
46010: NEG
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 2
46018: PUSH
46019: LD_INT 1
46021: NEG
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 3
46029: PUSH
46030: LD_INT 0
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 3
46039: PUSH
46040: LD_INT 1
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 3
46049: PUSH
46050: LD_INT 2
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 3
46059: PUSH
46060: LD_INT 3
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 2
46069: PUSH
46070: LD_INT 3
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 2
46079: NEG
46080: PUSH
46081: LD_INT 1
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 3
46090: NEG
46091: PUSH
46092: LD_INT 0
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 3
46101: NEG
46102: PUSH
46103: LD_INT 1
46105: NEG
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 3
46113: NEG
46114: PUSH
46115: LD_INT 2
46117: NEG
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 3
46125: NEG
46126: PUSH
46127: LD_INT 3
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46166: LD_ADDR_VAR 0 42
46170: PUSH
46171: LD_INT 0
46173: PUSH
46174: LD_INT 0
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: LD_INT 1
46186: NEG
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 1
46194: PUSH
46195: LD_INT 0
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 1
46204: PUSH
46205: LD_INT 1
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 1
46224: NEG
46225: PUSH
46226: LD_INT 0
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 1
46235: NEG
46236: PUSH
46237: LD_INT 1
46239: NEG
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: NEG
46248: PUSH
46249: LD_INT 2
46251: NEG
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: LD_INT 2
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 1
46270: PUSH
46271: LD_INT 1
46273: NEG
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 2
46281: PUSH
46282: LD_INT 1
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 2
46291: PUSH
46292: LD_INT 2
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 1
46301: PUSH
46302: LD_INT 2
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: LD_INT 2
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 1
46321: NEG
46322: PUSH
46323: LD_INT 1
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 2
46332: NEG
46333: PUSH
46334: LD_INT 1
46336: NEG
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 2
46344: NEG
46345: PUSH
46346: LD_INT 2
46348: NEG
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 2
46356: NEG
46357: PUSH
46358: LD_INT 3
46360: NEG
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: LD_INT 3
46372: NEG
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: LD_INT 3
46383: NEG
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 1
46391: PUSH
46392: LD_INT 2
46394: NEG
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 3
46402: PUSH
46403: LD_INT 2
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 3
46412: PUSH
46413: LD_INT 3
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 2
46422: PUSH
46423: LD_INT 3
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 1
46432: PUSH
46433: LD_INT 3
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 0
46442: PUSH
46443: LD_INT 3
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 1
46452: NEG
46453: PUSH
46454: LD_INT 2
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 3
46463: NEG
46464: PUSH
46465: LD_INT 2
46467: NEG
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 3
46475: NEG
46476: PUSH
46477: LD_INT 3
46479: NEG
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46516: LD_ADDR_VAR 0 43
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: LD_INT 0
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 0
46533: PUSH
46534: LD_INT 1
46536: NEG
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 1
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 1
46554: PUSH
46555: LD_INT 1
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 0
46564: PUSH
46565: LD_INT 1
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 1
46574: NEG
46575: PUSH
46576: LD_INT 0
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 1
46585: NEG
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: NEG
46598: PUSH
46599: LD_INT 2
46601: NEG
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: LD_INT 2
46612: NEG
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: LD_INT 1
46623: NEG
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 2
46631: PUSH
46632: LD_INT 0
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 2
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 1
46651: PUSH
46652: LD_INT 2
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 0
46661: PUSH
46662: LD_INT 2
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 1
46671: NEG
46672: PUSH
46673: LD_INT 1
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 2
46682: NEG
46683: PUSH
46684: LD_INT 0
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 2
46693: NEG
46694: PUSH
46695: LD_INT 1
46697: NEG
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 1
46705: NEG
46706: PUSH
46707: LD_INT 3
46709: NEG
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: LD_INT 3
46720: NEG
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 1
46728: PUSH
46729: LD_INT 2
46731: NEG
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 2
46739: PUSH
46740: LD_INT 1
46742: NEG
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 3
46750: PUSH
46751: LD_INT 0
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 3
46760: PUSH
46761: LD_INT 1
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 1
46770: PUSH
46771: LD_INT 3
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: LD_INT 3
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: LD_INT 2
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 2
46801: NEG
46802: PUSH
46803: LD_INT 1
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 3
46812: NEG
46813: PUSH
46814: LD_INT 0
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 3
46823: NEG
46824: PUSH
46825: LD_INT 1
46827: NEG
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46864: LD_ADDR_VAR 0 44
46868: PUSH
46869: LD_INT 0
46871: PUSH
46872: LD_INT 0
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 0
46881: PUSH
46882: LD_INT 1
46884: NEG
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 1
46892: PUSH
46893: LD_INT 0
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 1
46902: PUSH
46903: LD_INT 1
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 1
46922: NEG
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 1
46933: NEG
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 1
46945: NEG
46946: PUSH
46947: LD_INT 2
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 1
46957: PUSH
46958: LD_INT 1
46960: NEG
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 2
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 2
46978: PUSH
46979: LD_INT 1
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 2
46988: PUSH
46989: LD_INT 2
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 1
46998: PUSH
46999: LD_INT 2
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 1
47008: NEG
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 2
47019: NEG
47020: PUSH
47021: LD_INT 0
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 2
47030: NEG
47031: PUSH
47032: LD_INT 1
47034: NEG
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 2
47042: NEG
47043: PUSH
47044: LD_INT 2
47046: NEG
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 2
47054: NEG
47055: PUSH
47056: LD_INT 3
47058: NEG
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 2
47066: PUSH
47067: LD_INT 1
47069: NEG
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 3
47077: PUSH
47078: LD_INT 0
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 3
47087: PUSH
47088: LD_INT 1
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 3
47097: PUSH
47098: LD_INT 2
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 3
47107: PUSH
47108: LD_INT 3
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 2
47117: PUSH
47118: LD_INT 3
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 2
47127: NEG
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 3
47138: NEG
47139: PUSH
47140: LD_INT 0
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 3
47149: NEG
47150: PUSH
47151: LD_INT 1
47153: NEG
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 3
47161: NEG
47162: PUSH
47163: LD_INT 2
47165: NEG
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 3
47173: NEG
47174: PUSH
47175: LD_INT 3
47177: NEG
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47214: LD_ADDR_VAR 0 45
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: LD_INT 0
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 0
47231: PUSH
47232: LD_INT 1
47234: NEG
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 1
47242: PUSH
47243: LD_INT 0
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 1
47252: PUSH
47253: LD_INT 1
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 0
47262: PUSH
47263: LD_INT 1
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 1
47272: NEG
47273: PUSH
47274: LD_INT 0
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 1
47283: NEG
47284: PUSH
47285: LD_INT 1
47287: NEG
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 1
47295: NEG
47296: PUSH
47297: LD_INT 2
47299: NEG
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: LD_INT 2
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 1
47318: PUSH
47319: LD_INT 1
47321: NEG
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 2
47329: PUSH
47330: LD_INT 1
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 2
47339: PUSH
47340: LD_INT 2
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 1
47349: PUSH
47350: LD_INT 2
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: LD_INT 2
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 1
47369: NEG
47370: PUSH
47371: LD_INT 1
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 2
47380: NEG
47381: PUSH
47382: LD_INT 1
47384: NEG
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 2
47392: NEG
47393: PUSH
47394: LD_INT 2
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 2
47404: NEG
47405: PUSH
47406: LD_INT 3
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 1
47416: NEG
47417: PUSH
47418: LD_INT 3
47420: NEG
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: LD_INT 3
47431: NEG
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 1
47439: PUSH
47440: LD_INT 2
47442: NEG
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 3
47450: PUSH
47451: LD_INT 2
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 3
47460: PUSH
47461: LD_INT 3
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 2
47470: PUSH
47471: LD_INT 3
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 1
47480: PUSH
47481: LD_INT 3
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: LD_INT 3
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 1
47500: NEG
47501: PUSH
47502: LD_INT 2
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 3
47511: NEG
47512: PUSH
47513: LD_INT 2
47515: NEG
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 3
47523: NEG
47524: PUSH
47525: LD_INT 3
47527: NEG
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47564: LD_ADDR_VAR 0 46
47568: PUSH
47569: LD_INT 0
47571: PUSH
47572: LD_INT 0
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 0
47581: PUSH
47582: LD_INT 1
47584: NEG
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 1
47592: PUSH
47593: LD_INT 0
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: LD_INT 1
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 0
47612: PUSH
47613: LD_INT 1
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 1
47622: NEG
47623: PUSH
47624: LD_INT 0
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 1
47633: NEG
47634: PUSH
47635: LD_INT 1
47637: NEG
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 1
47645: NEG
47646: PUSH
47647: LD_INT 2
47649: NEG
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: LD_INT 2
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: LD_INT 1
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 2
47679: PUSH
47680: LD_INT 0
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 2
47689: PUSH
47690: LD_INT 1
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 1
47699: PUSH
47700: LD_INT 2
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 0
47709: PUSH
47710: LD_INT 2
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 1
47719: NEG
47720: PUSH
47721: LD_INT 1
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 2
47730: NEG
47731: PUSH
47732: LD_INT 0
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 2
47741: NEG
47742: PUSH
47743: LD_INT 1
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 1
47753: NEG
47754: PUSH
47755: LD_INT 3
47757: NEG
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 0
47765: PUSH
47766: LD_INT 3
47768: NEG
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 1
47776: PUSH
47777: LD_INT 2
47779: NEG
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 2
47787: PUSH
47788: LD_INT 1
47790: NEG
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 3
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 3
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 1
47818: PUSH
47819: LD_INT 3
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 0
47828: PUSH
47829: LD_INT 3
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 1
47838: NEG
47839: PUSH
47840: LD_INT 2
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 2
47849: NEG
47850: PUSH
47851: LD_INT 1
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 3
47860: NEG
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 3
47871: NEG
47872: PUSH
47873: LD_INT 1
47875: NEG
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47912: LD_ADDR_VAR 0 47
47916: PUSH
47917: LD_INT 0
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 0
47929: PUSH
47930: LD_INT 1
47932: NEG
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 1
47940: PUSH
47941: LD_INT 0
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 1
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: LD_INT 1
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 1
47970: NEG
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 1
47981: NEG
47982: PUSH
47983: LD_INT 1
47985: NEG
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 1
47993: NEG
47994: PUSH
47995: LD_INT 2
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: LD_INT 2
48008: NEG
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 1
48016: PUSH
48017: LD_INT 1
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 2
48027: NEG
48028: PUSH
48029: LD_INT 1
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 2
48039: NEG
48040: PUSH
48041: LD_INT 2
48043: NEG
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48063: LD_ADDR_VAR 0 48
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: LD_INT 1
48083: NEG
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 1
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 1
48101: PUSH
48102: LD_INT 1
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 1
48121: NEG
48122: PUSH
48123: LD_INT 0
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 1
48132: NEG
48133: PUSH
48134: LD_INT 1
48136: NEG
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 1
48144: NEG
48145: PUSH
48146: LD_INT 2
48148: NEG
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 0
48156: PUSH
48157: LD_INT 2
48159: NEG
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: LD_INT 1
48170: NEG
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 2
48178: PUSH
48179: LD_INT 0
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 2
48188: PUSH
48189: LD_INT 1
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48210: LD_ADDR_VAR 0 49
48214: PUSH
48215: LD_INT 0
48217: PUSH
48218: LD_INT 0
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 0
48227: PUSH
48228: LD_INT 1
48230: NEG
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: LD_INT 0
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 1
48248: PUSH
48249: LD_INT 1
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 0
48258: PUSH
48259: LD_INT 1
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 1
48268: NEG
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 1
48279: NEG
48280: PUSH
48281: LD_INT 1
48283: NEG
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 1
48291: PUSH
48292: LD_INT 1
48294: NEG
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 2
48302: PUSH
48303: LD_INT 0
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 2
48312: PUSH
48313: LD_INT 1
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 2
48322: PUSH
48323: LD_INT 2
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 1
48332: PUSH
48333: LD_INT 2
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48354: LD_ADDR_VAR 0 50
48358: PUSH
48359: LD_INT 0
48361: PUSH
48362: LD_INT 0
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 0
48371: PUSH
48372: LD_INT 1
48374: NEG
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 1
48382: PUSH
48383: LD_INT 0
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 1
48392: PUSH
48393: LD_INT 1
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: LD_INT 1
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 1
48412: NEG
48413: PUSH
48414: LD_INT 0
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 1
48423: NEG
48424: PUSH
48425: LD_INT 1
48427: NEG
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 2
48435: PUSH
48436: LD_INT 1
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 2
48445: PUSH
48446: LD_INT 2
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 1
48455: PUSH
48456: LD_INT 2
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 0
48465: PUSH
48466: LD_INT 2
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 1
48475: NEG
48476: PUSH
48477: LD_INT 1
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48498: LD_ADDR_VAR 0 51
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: LD_INT 0
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 0
48515: PUSH
48516: LD_INT 1
48518: NEG
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 1
48526: PUSH
48527: LD_INT 0
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: LD_INT 1
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 0
48546: PUSH
48547: LD_INT 1
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 1
48556: NEG
48557: PUSH
48558: LD_INT 0
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 1
48567: NEG
48568: PUSH
48569: LD_INT 1
48571: NEG
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 1
48579: PUSH
48580: LD_INT 2
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 0
48589: PUSH
48590: LD_INT 2
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 1
48599: NEG
48600: PUSH
48601: LD_INT 1
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 2
48610: NEG
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 2
48621: NEG
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48645: LD_ADDR_VAR 0 52
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: LD_INT 0
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 0
48662: PUSH
48663: LD_INT 1
48665: NEG
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 1
48673: PUSH
48674: LD_INT 0
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 1
48683: PUSH
48684: LD_INT 1
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 0
48693: PUSH
48694: LD_INT 1
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 1
48703: NEG
48704: PUSH
48705: LD_INT 0
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 1
48714: NEG
48715: PUSH
48716: LD_INT 1
48718: NEG
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 1
48726: NEG
48727: PUSH
48728: LD_INT 2
48730: NEG
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 1
48738: NEG
48739: PUSH
48740: LD_INT 1
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 2
48749: NEG
48750: PUSH
48751: LD_INT 0
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 2
48760: NEG
48761: PUSH
48762: LD_INT 1
48764: NEG
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 2
48772: NEG
48773: PUSH
48774: LD_INT 2
48776: NEG
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48796: LD_ADDR_VAR 0 53
48800: PUSH
48801: LD_INT 0
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 0
48813: PUSH
48814: LD_INT 1
48816: NEG
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: LD_INT 0
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 1
48834: PUSH
48835: LD_INT 1
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: LD_INT 1
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 1
48854: NEG
48855: PUSH
48856: LD_INT 0
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 1
48865: NEG
48866: PUSH
48867: LD_INT 1
48869: NEG
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 1
48877: NEG
48878: PUSH
48879: LD_INT 2
48881: NEG
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 0
48889: PUSH
48890: LD_INT 2
48892: NEG
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 1
48900: PUSH
48901: LD_INT 1
48903: NEG
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 2
48911: PUSH
48912: LD_INT 0
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 2
48921: PUSH
48922: LD_INT 1
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 2
48931: PUSH
48932: LD_INT 2
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: LD_INT 2
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 0
48951: PUSH
48952: LD_INT 2
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 1
48961: NEG
48962: PUSH
48963: LD_INT 1
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 2
48972: NEG
48973: PUSH
48974: LD_INT 0
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 2
48983: NEG
48984: PUSH
48985: LD_INT 1
48987: NEG
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 2
48995: NEG
48996: PUSH
48997: LD_INT 2
48999: NEG
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49026: LD_ADDR_VAR 0 54
49030: PUSH
49031: LD_INT 0
49033: PUSH
49034: LD_INT 0
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 0
49043: PUSH
49044: LD_INT 1
49046: NEG
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: LD_INT 0
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 1
49064: PUSH
49065: LD_INT 1
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: LD_INT 1
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 1
49084: NEG
49085: PUSH
49086: LD_INT 0
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 1
49095: NEG
49096: PUSH
49097: LD_INT 1
49099: NEG
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 1
49107: NEG
49108: PUSH
49109: LD_INT 2
49111: NEG
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 0
49119: PUSH
49120: LD_INT 2
49122: NEG
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 1
49130: PUSH
49131: LD_INT 1
49133: NEG
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 2
49141: PUSH
49142: LD_INT 0
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 2
49151: PUSH
49152: LD_INT 1
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 2
49161: PUSH
49162: LD_INT 2
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: LD_INT 2
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: LD_INT 2
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 1
49191: NEG
49192: PUSH
49193: LD_INT 1
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 2
49202: NEG
49203: PUSH
49204: LD_INT 0
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 2
49213: NEG
49214: PUSH
49215: LD_INT 1
49217: NEG
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 2
49225: NEG
49226: PUSH
49227: LD_INT 2
49229: NEG
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49256: LD_ADDR_VAR 0 55
49260: PUSH
49261: LD_INT 0
49263: PUSH
49264: LD_INT 0
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: LD_INT 1
49276: NEG
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: LD_INT 0
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 1
49294: PUSH
49295: LD_INT 1
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 0
49304: PUSH
49305: LD_INT 1
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 1
49314: NEG
49315: PUSH
49316: LD_INT 0
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 1
49325: NEG
49326: PUSH
49327: LD_INT 1
49329: NEG
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: LD_INT 2
49341: NEG
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 0
49349: PUSH
49350: LD_INT 2
49352: NEG
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 1
49360: PUSH
49361: LD_INT 1
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 2
49371: PUSH
49372: LD_INT 0
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 2
49381: PUSH
49382: LD_INT 1
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 2
49391: PUSH
49392: LD_INT 2
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: LD_INT 2
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 0
49411: PUSH
49412: LD_INT 2
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 1
49421: NEG
49422: PUSH
49423: LD_INT 1
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 2
49432: NEG
49433: PUSH
49434: LD_INT 0
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 2
49443: NEG
49444: PUSH
49445: LD_INT 1
49447: NEG
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 2
49455: NEG
49456: PUSH
49457: LD_INT 2
49459: NEG
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49486: LD_ADDR_VAR 0 56
49490: PUSH
49491: LD_INT 0
49493: PUSH
49494: LD_INT 0
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 0
49503: PUSH
49504: LD_INT 1
49506: NEG
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 1
49514: PUSH
49515: LD_INT 0
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 1
49524: PUSH
49525: LD_INT 1
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: LD_INT 1
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 1
49544: NEG
49545: PUSH
49546: LD_INT 0
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 1
49555: NEG
49556: PUSH
49557: LD_INT 1
49559: NEG
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 1
49567: NEG
49568: PUSH
49569: LD_INT 2
49571: NEG
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 0
49579: PUSH
49580: LD_INT 2
49582: NEG
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 1
49590: PUSH
49591: LD_INT 1
49593: NEG
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 2
49601: PUSH
49602: LD_INT 0
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 2
49611: PUSH
49612: LD_INT 1
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 2
49621: PUSH
49622: LD_INT 2
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: LD_INT 2
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 0
49641: PUSH
49642: LD_INT 2
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 1
49651: NEG
49652: PUSH
49653: LD_INT 1
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 2
49662: NEG
49663: PUSH
49664: LD_INT 0
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 2
49673: NEG
49674: PUSH
49675: LD_INT 1
49677: NEG
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 2
49685: NEG
49686: PUSH
49687: LD_INT 2
49689: NEG
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49716: LD_ADDR_VAR 0 57
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 0
49733: PUSH
49734: LD_INT 1
49736: NEG
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: PUSH
49755: LD_INT 1
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 0
49764: PUSH
49765: LD_INT 1
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 1
49774: NEG
49775: PUSH
49776: LD_INT 0
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 1
49785: NEG
49786: PUSH
49787: LD_INT 1
49789: NEG
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: LD_INT 2
49801: NEG
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 0
49809: PUSH
49810: LD_INT 2
49812: NEG
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 1
49820: PUSH
49821: LD_INT 1
49823: NEG
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 2
49831: PUSH
49832: LD_INT 0
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 2
49841: PUSH
49842: LD_INT 1
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 2
49851: PUSH
49852: LD_INT 2
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 1
49861: PUSH
49862: LD_INT 2
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 0
49871: PUSH
49872: LD_INT 2
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 1
49881: NEG
49882: PUSH
49883: LD_INT 1
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 2
49892: NEG
49893: PUSH
49894: LD_INT 0
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 2
49903: NEG
49904: PUSH
49905: LD_INT 1
49907: NEG
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 2
49915: NEG
49916: PUSH
49917: LD_INT 2
49919: NEG
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49946: LD_ADDR_VAR 0 58
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 0
49963: PUSH
49964: LD_INT 1
49966: NEG
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 1
49974: PUSH
49975: LD_INT 0
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 1
49984: PUSH
49985: LD_INT 1
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 0
49994: PUSH
49995: LD_INT 1
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 1
50004: NEG
50005: PUSH
50006: LD_INT 0
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 1
50015: NEG
50016: PUSH
50017: LD_INT 1
50019: NEG
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: LD_INT 2
50031: NEG
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 0
50039: PUSH
50040: LD_INT 2
50042: NEG
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 1
50050: PUSH
50051: LD_INT 1
50053: NEG
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 2
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 2
50071: PUSH
50072: LD_INT 1
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 2
50081: PUSH
50082: LD_INT 2
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: LD_INT 2
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: LD_INT 2
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 1
50111: NEG
50112: PUSH
50113: LD_INT 1
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 2
50122: NEG
50123: PUSH
50124: LD_INT 0
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 2
50133: NEG
50134: PUSH
50135: LD_INT 1
50137: NEG
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 2
50145: NEG
50146: PUSH
50147: LD_INT 2
50149: NEG
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50176: LD_ADDR_VAR 0 59
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: LD_INT 0
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 0
50193: PUSH
50194: LD_INT 1
50196: NEG
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 1
50204: PUSH
50205: LD_INT 0
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 1
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 0
50224: PUSH
50225: LD_INT 1
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 1
50234: NEG
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 1
50245: NEG
50246: PUSH
50247: LD_INT 1
50249: NEG
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50264: LD_ADDR_VAR 0 60
50268: PUSH
50269: LD_INT 0
50271: PUSH
50272: LD_INT 0
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 0
50281: PUSH
50282: LD_INT 1
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 1
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 1
50302: PUSH
50303: LD_INT 1
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: LD_INT 1
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 1
50322: NEG
50323: PUSH
50324: LD_INT 0
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 1
50333: NEG
50334: PUSH
50335: LD_INT 1
50337: NEG
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50352: LD_ADDR_VAR 0 61
50356: PUSH
50357: LD_INT 0
50359: PUSH
50360: LD_INT 0
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 0
50369: PUSH
50370: LD_INT 1
50372: NEG
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 1
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 1
50390: PUSH
50391: LD_INT 1
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 0
50400: PUSH
50401: LD_INT 1
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 1
50410: NEG
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 1
50421: NEG
50422: PUSH
50423: LD_INT 1
50425: NEG
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50440: LD_ADDR_VAR 0 62
50444: PUSH
50445: LD_INT 0
50447: PUSH
50448: LD_INT 0
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 0
50457: PUSH
50458: LD_INT 1
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 1
50468: PUSH
50469: LD_INT 0
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 1
50478: PUSH
50479: LD_INT 1
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: LD_INT 1
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 1
50498: NEG
50499: PUSH
50500: LD_INT 0
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 1
50509: NEG
50510: PUSH
50511: LD_INT 1
50513: NEG
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50528: LD_ADDR_VAR 0 63
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 0
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 1
50556: PUSH
50557: LD_INT 0
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 1
50566: PUSH
50567: LD_INT 1
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 0
50576: PUSH
50577: LD_INT 1
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 1
50586: NEG
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 1
50597: NEG
50598: PUSH
50599: LD_INT 1
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50616: LD_ADDR_VAR 0 64
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: LD_INT 0
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 0
50633: PUSH
50634: LD_INT 1
50636: NEG
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: LD_INT 0
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 1
50654: PUSH
50655: LD_INT 1
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 0
50664: PUSH
50665: LD_INT 1
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 1
50674: NEG
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 1
50685: NEG
50686: PUSH
50687: LD_INT 1
50689: NEG
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: ST_TO_ADDR
// end ; 1 :
50704: GO 56601
50706: LD_INT 1
50708: DOUBLE
50709: EQUAL
50710: IFTRUE 50714
50712: GO 53337
50714: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50715: LD_ADDR_VAR 0 11
50719: PUSH
50720: LD_INT 1
50722: NEG
50723: PUSH
50724: LD_INT 3
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: LD_INT 3
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: LD_INT 2
50748: NEG
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: LIST
50758: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50759: LD_ADDR_VAR 0 12
50763: PUSH
50764: LD_INT 2
50766: PUSH
50767: LD_INT 1
50769: NEG
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 3
50777: PUSH
50778: LD_INT 0
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 3
50787: PUSH
50788: LD_INT 1
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: LIST
50799: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50800: LD_ADDR_VAR 0 13
50804: PUSH
50805: LD_INT 3
50807: PUSH
50808: LD_INT 2
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 3
50817: PUSH
50818: LD_INT 3
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 2
50827: PUSH
50828: LD_INT 3
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: LIST
50839: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50840: LD_ADDR_VAR 0 14
50844: PUSH
50845: LD_INT 1
50847: PUSH
50848: LD_INT 3
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: LD_INT 3
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: LD_INT 2
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: LIST
50880: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50881: LD_ADDR_VAR 0 15
50885: PUSH
50886: LD_INT 2
50888: NEG
50889: PUSH
50890: LD_INT 1
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 3
50899: NEG
50900: PUSH
50901: LD_INT 0
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 3
50910: NEG
50911: PUSH
50912: LD_INT 1
50914: NEG
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: LIST
50924: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50925: LD_ADDR_VAR 0 16
50929: PUSH
50930: LD_INT 2
50932: NEG
50933: PUSH
50934: LD_INT 3
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 3
50944: NEG
50945: PUSH
50946: LD_INT 2
50948: NEG
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 3
50956: NEG
50957: PUSH
50958: LD_INT 3
50960: NEG
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: LIST
50970: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50971: LD_ADDR_VAR 0 17
50975: PUSH
50976: LD_INT 1
50978: NEG
50979: PUSH
50980: LD_INT 3
50982: NEG
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: LD_INT 3
50993: NEG
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 1
51001: PUSH
51002: LD_INT 2
51004: NEG
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: LIST
51014: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51015: LD_ADDR_VAR 0 18
51019: PUSH
51020: LD_INT 2
51022: PUSH
51023: LD_INT 1
51025: NEG
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 3
51033: PUSH
51034: LD_INT 0
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 3
51043: PUSH
51044: LD_INT 1
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: LIST
51055: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51056: LD_ADDR_VAR 0 19
51060: PUSH
51061: LD_INT 3
51063: PUSH
51064: LD_INT 2
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 3
51073: PUSH
51074: LD_INT 3
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 2
51083: PUSH
51084: LD_INT 3
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: LIST
51095: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51096: LD_ADDR_VAR 0 20
51100: PUSH
51101: LD_INT 1
51103: PUSH
51104: LD_INT 3
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 0
51113: PUSH
51114: LD_INT 3
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 1
51123: NEG
51124: PUSH
51125: LD_INT 2
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: LIST
51136: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51137: LD_ADDR_VAR 0 21
51141: PUSH
51142: LD_INT 2
51144: NEG
51145: PUSH
51146: LD_INT 1
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 3
51155: NEG
51156: PUSH
51157: LD_INT 0
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 3
51166: NEG
51167: PUSH
51168: LD_INT 1
51170: NEG
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: LIST
51180: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51181: LD_ADDR_VAR 0 22
51185: PUSH
51186: LD_INT 2
51188: NEG
51189: PUSH
51190: LD_INT 3
51192: NEG
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 3
51200: NEG
51201: PUSH
51202: LD_INT 2
51204: NEG
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 3
51212: NEG
51213: PUSH
51214: LD_INT 3
51216: NEG
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: LIST
51226: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51227: LD_ADDR_VAR 0 23
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: LD_INT 3
51237: NEG
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 1
51245: NEG
51246: PUSH
51247: LD_INT 4
51249: NEG
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 1
51257: PUSH
51258: LD_INT 3
51260: NEG
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: LIST
51270: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51271: LD_ADDR_VAR 0 24
51275: PUSH
51276: LD_INT 3
51278: PUSH
51279: LD_INT 0
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 3
51288: PUSH
51289: LD_INT 1
51291: NEG
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 4
51299: PUSH
51300: LD_INT 1
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: LIST
51311: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51312: LD_ADDR_VAR 0 25
51316: PUSH
51317: LD_INT 3
51319: PUSH
51320: LD_INT 3
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 4
51329: PUSH
51330: LD_INT 3
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 3
51339: PUSH
51340: LD_INT 4
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: LIST
51351: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51352: LD_ADDR_VAR 0 26
51356: PUSH
51357: LD_INT 0
51359: PUSH
51360: LD_INT 3
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 1
51369: PUSH
51370: LD_INT 4
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 1
51379: NEG
51380: PUSH
51381: LD_INT 3
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: LIST
51392: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51393: LD_ADDR_VAR 0 27
51397: PUSH
51398: LD_INT 3
51400: NEG
51401: PUSH
51402: LD_INT 0
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 3
51411: NEG
51412: PUSH
51413: LD_INT 1
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 4
51422: NEG
51423: PUSH
51424: LD_INT 1
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: LIST
51436: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51437: LD_ADDR_VAR 0 28
51441: PUSH
51442: LD_INT 3
51444: NEG
51445: PUSH
51446: LD_INT 3
51448: NEG
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 3
51456: NEG
51457: PUSH
51458: LD_INT 4
51460: NEG
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 4
51468: NEG
51469: PUSH
51470: LD_INT 3
51472: NEG
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: LIST
51482: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51483: LD_ADDR_VAR 0 29
51487: PUSH
51488: LD_INT 1
51490: NEG
51491: PUSH
51492: LD_INT 3
51494: NEG
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 0
51502: PUSH
51503: LD_INT 3
51505: NEG
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 1
51513: PUSH
51514: LD_INT 2
51516: NEG
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 1
51524: NEG
51525: PUSH
51526: LD_INT 4
51528: NEG
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: LD_INT 4
51539: NEG
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 1
51547: PUSH
51548: LD_INT 3
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 1
51558: NEG
51559: PUSH
51560: LD_INT 5
51562: NEG
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 0
51570: PUSH
51571: LD_INT 5
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 1
51581: PUSH
51582: LD_INT 4
51584: NEG
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 1
51592: NEG
51593: PUSH
51594: LD_INT 6
51596: NEG
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: LD_INT 6
51607: NEG
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 1
51615: PUSH
51616: LD_INT 5
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51638: LD_ADDR_VAR 0 30
51642: PUSH
51643: LD_INT 2
51645: PUSH
51646: LD_INT 1
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 3
51656: PUSH
51657: LD_INT 0
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 3
51666: PUSH
51667: LD_INT 1
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 3
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 4
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 4
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 4
51707: PUSH
51708: LD_INT 1
51710: NEG
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 5
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 5
51728: PUSH
51729: LD_INT 1
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 5
51738: PUSH
51739: LD_INT 1
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 6
51749: PUSH
51750: LD_INT 0
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 6
51759: PUSH
51760: LD_INT 1
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51781: LD_ADDR_VAR 0 31
51785: PUSH
51786: LD_INT 3
51788: PUSH
51789: LD_INT 2
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 3
51798: PUSH
51799: LD_INT 3
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 2
51808: PUSH
51809: LD_INT 3
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 4
51818: PUSH
51819: LD_INT 3
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 4
51828: PUSH
51829: LD_INT 4
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 3
51838: PUSH
51839: LD_INT 4
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 5
51848: PUSH
51849: LD_INT 4
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 5
51858: PUSH
51859: LD_INT 5
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 4
51868: PUSH
51869: LD_INT 5
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 6
51878: PUSH
51879: LD_INT 5
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 6
51888: PUSH
51889: LD_INT 6
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 5
51898: PUSH
51899: LD_INT 6
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51920: LD_ADDR_VAR 0 32
51924: PUSH
51925: LD_INT 1
51927: PUSH
51928: LD_INT 3
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 0
51937: PUSH
51938: LD_INT 3
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 1
51947: NEG
51948: PUSH
51949: LD_INT 2
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 1
51958: PUSH
51959: LD_INT 4
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 0
51968: PUSH
51969: LD_INT 4
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 1
51978: NEG
51979: PUSH
51980: LD_INT 3
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 1
51989: PUSH
51990: LD_INT 5
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 0
51999: PUSH
52000: LD_INT 5
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 1
52009: NEG
52010: PUSH
52011: LD_INT 4
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 1
52020: PUSH
52021: LD_INT 6
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: LD_INT 6
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 1
52040: NEG
52041: PUSH
52042: LD_INT 5
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52063: LD_ADDR_VAR 0 33
52067: PUSH
52068: LD_INT 2
52070: NEG
52071: PUSH
52072: LD_INT 1
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 3
52081: NEG
52082: PUSH
52083: LD_INT 0
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 3
52092: NEG
52093: PUSH
52094: LD_INT 1
52096: NEG
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 3
52104: NEG
52105: PUSH
52106: LD_INT 1
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 4
52115: NEG
52116: PUSH
52117: LD_INT 0
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 4
52126: NEG
52127: PUSH
52128: LD_INT 1
52130: NEG
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 4
52138: NEG
52139: PUSH
52140: LD_INT 1
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 5
52149: NEG
52150: PUSH
52151: LD_INT 0
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 5
52160: NEG
52161: PUSH
52162: LD_INT 1
52164: NEG
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 5
52172: NEG
52173: PUSH
52174: LD_INT 1
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 6
52183: NEG
52184: PUSH
52185: LD_INT 0
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 6
52194: NEG
52195: PUSH
52196: LD_INT 1
52198: NEG
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52218: LD_ADDR_VAR 0 34
52222: PUSH
52223: LD_INT 2
52225: NEG
52226: PUSH
52227: LD_INT 3
52229: NEG
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 3
52237: NEG
52238: PUSH
52239: LD_INT 2
52241: NEG
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 3
52249: NEG
52250: PUSH
52251: LD_INT 3
52253: NEG
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 3
52261: NEG
52262: PUSH
52263: LD_INT 4
52265: NEG
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 4
52273: NEG
52274: PUSH
52275: LD_INT 3
52277: NEG
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 4
52285: NEG
52286: PUSH
52287: LD_INT 4
52289: NEG
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 4
52297: NEG
52298: PUSH
52299: LD_INT 5
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 5
52309: NEG
52310: PUSH
52311: LD_INT 4
52313: NEG
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 5
52321: NEG
52322: PUSH
52323: LD_INT 5
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 5
52333: NEG
52334: PUSH
52335: LD_INT 6
52337: NEG
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 6
52345: NEG
52346: PUSH
52347: LD_INT 5
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 6
52357: NEG
52358: PUSH
52359: LD_INT 6
52361: NEG
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52381: LD_ADDR_VAR 0 41
52385: PUSH
52386: LD_INT 0
52388: PUSH
52389: LD_INT 2
52391: NEG
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 1
52399: NEG
52400: PUSH
52401: LD_INT 3
52403: NEG
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 1
52411: PUSH
52412: LD_INT 2
52414: NEG
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: LIST
52424: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52425: LD_ADDR_VAR 0 42
52429: PUSH
52430: LD_INT 2
52432: PUSH
52433: LD_INT 0
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 2
52442: PUSH
52443: LD_INT 1
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 3
52453: PUSH
52454: LD_INT 1
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: LIST
52465: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52466: LD_ADDR_VAR 0 43
52470: PUSH
52471: LD_INT 2
52473: PUSH
52474: LD_INT 2
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 3
52483: PUSH
52484: LD_INT 2
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 2
52493: PUSH
52494: LD_INT 3
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: LIST
52505: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52506: LD_ADDR_VAR 0 44
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: LD_INT 2
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 1
52523: PUSH
52524: LD_INT 3
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 1
52533: NEG
52534: PUSH
52535: LD_INT 2
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: LIST
52546: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52547: LD_ADDR_VAR 0 45
52551: PUSH
52552: LD_INT 2
52554: NEG
52555: PUSH
52556: LD_INT 0
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 2
52565: NEG
52566: PUSH
52567: LD_INT 1
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 3
52576: NEG
52577: PUSH
52578: LD_INT 1
52580: NEG
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: LIST
52590: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52591: LD_ADDR_VAR 0 46
52595: PUSH
52596: LD_INT 2
52598: NEG
52599: PUSH
52600: LD_INT 2
52602: NEG
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 2
52610: NEG
52611: PUSH
52612: LD_INT 3
52614: NEG
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 3
52622: NEG
52623: PUSH
52624: LD_INT 2
52626: NEG
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: LIST
52636: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52637: LD_ADDR_VAR 0 47
52641: PUSH
52642: LD_INT 2
52644: NEG
52645: PUSH
52646: LD_INT 3
52648: NEG
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 1
52656: NEG
52657: PUSH
52658: LD_INT 3
52660: NEG
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52670: LD_ADDR_VAR 0 48
52674: PUSH
52675: LD_INT 1
52677: PUSH
52678: LD_INT 2
52680: NEG
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 2
52688: PUSH
52689: LD_INT 1
52691: NEG
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52701: LD_ADDR_VAR 0 49
52705: PUSH
52706: LD_INT 3
52708: PUSH
52709: LD_INT 1
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 3
52718: PUSH
52719: LD_INT 2
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52730: LD_ADDR_VAR 0 50
52734: PUSH
52735: LD_INT 2
52737: PUSH
52738: LD_INT 3
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 1
52747: PUSH
52748: LD_INT 3
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52759: LD_ADDR_VAR 0 51
52763: PUSH
52764: LD_INT 1
52766: NEG
52767: PUSH
52768: LD_INT 2
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 2
52777: NEG
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52790: LD_ADDR_VAR 0 52
52794: PUSH
52795: LD_INT 3
52797: NEG
52798: PUSH
52799: LD_INT 1
52801: NEG
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 3
52809: NEG
52810: PUSH
52811: LD_INT 2
52813: NEG
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52823: LD_ADDR_VAR 0 53
52827: PUSH
52828: LD_INT 1
52830: NEG
52831: PUSH
52832: LD_INT 3
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: LD_INT 3
52845: NEG
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 1
52853: PUSH
52854: LD_INT 2
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: LIST
52866: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52867: LD_ADDR_VAR 0 54
52871: PUSH
52872: LD_INT 2
52874: PUSH
52875: LD_INT 1
52877: NEG
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 3
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 3
52895: PUSH
52896: LD_INT 1
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: LIST
52907: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52908: LD_ADDR_VAR 0 55
52912: PUSH
52913: LD_INT 3
52915: PUSH
52916: LD_INT 2
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 3
52925: PUSH
52926: LD_INT 3
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 2
52935: PUSH
52936: LD_INT 3
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: LIST
52947: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52948: LD_ADDR_VAR 0 56
52952: PUSH
52953: LD_INT 1
52955: PUSH
52956: LD_INT 3
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: LD_INT 3
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 1
52975: NEG
52976: PUSH
52977: LD_INT 2
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: LIST
52988: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52989: LD_ADDR_VAR 0 57
52993: PUSH
52994: LD_INT 2
52996: NEG
52997: PUSH
52998: LD_INT 1
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 3
53007: NEG
53008: PUSH
53009: LD_INT 0
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 3
53018: NEG
53019: PUSH
53020: LD_INT 1
53022: NEG
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: LIST
53032: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53033: LD_ADDR_VAR 0 58
53037: PUSH
53038: LD_INT 2
53040: NEG
53041: PUSH
53042: LD_INT 3
53044: NEG
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 3
53052: NEG
53053: PUSH
53054: LD_INT 2
53056: NEG
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 3
53064: NEG
53065: PUSH
53066: LD_INT 3
53068: NEG
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: LIST
53078: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53079: LD_ADDR_VAR 0 59
53083: PUSH
53084: LD_INT 1
53086: NEG
53087: PUSH
53088: LD_INT 2
53090: NEG
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: LD_INT 2
53101: NEG
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 1
53109: PUSH
53110: LD_INT 1
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: LIST
53122: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53123: LD_ADDR_VAR 0 60
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: LD_INT 1
53133: NEG
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 2
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 2
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: LIST
53163: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53164: LD_ADDR_VAR 0 61
53168: PUSH
53169: LD_INT 2
53171: PUSH
53172: LD_INT 1
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 2
53181: PUSH
53182: LD_INT 2
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 1
53191: PUSH
53192: LD_INT 2
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: LIST
53203: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53204: LD_ADDR_VAR 0 62
53208: PUSH
53209: LD_INT 1
53211: PUSH
53212: LD_INT 2
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: LD_INT 2
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 1
53231: NEG
53232: PUSH
53233: LD_INT 1
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: LIST
53244: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53245: LD_ADDR_VAR 0 63
53249: PUSH
53250: LD_INT 1
53252: NEG
53253: PUSH
53254: LD_INT 1
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 2
53263: NEG
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 2
53274: NEG
53275: PUSH
53276: LD_INT 1
53278: NEG
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: LIST
53288: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53289: LD_ADDR_VAR 0 64
53293: PUSH
53294: LD_INT 1
53296: NEG
53297: PUSH
53298: LD_INT 2
53300: NEG
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 2
53308: NEG
53309: PUSH
53310: LD_INT 1
53312: NEG
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 2
53320: NEG
53321: PUSH
53322: LD_INT 2
53324: NEG
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: LIST
53334: ST_TO_ADDR
// end ; 2 :
53335: GO 56601
53337: LD_INT 2
53339: DOUBLE
53340: EQUAL
53341: IFTRUE 53345
53343: GO 56600
53345: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53346: LD_ADDR_VAR 0 29
53350: PUSH
53351: LD_INT 4
53353: PUSH
53354: LD_INT 0
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 4
53363: PUSH
53364: LD_INT 1
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 5
53374: PUSH
53375: LD_INT 0
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 5
53384: PUSH
53385: LD_INT 1
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 4
53394: PUSH
53395: LD_INT 1
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 3
53404: PUSH
53405: LD_INT 0
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 3
53414: PUSH
53415: LD_INT 1
53417: NEG
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 3
53425: PUSH
53426: LD_INT 2
53428: NEG
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 5
53436: PUSH
53437: LD_INT 2
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 3
53446: PUSH
53447: LD_INT 3
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 3
53456: PUSH
53457: LD_INT 2
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 4
53466: PUSH
53467: LD_INT 3
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 4
53476: PUSH
53477: LD_INT 4
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 3
53486: PUSH
53487: LD_INT 4
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 2
53496: PUSH
53497: LD_INT 3
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 2
53506: PUSH
53507: LD_INT 2
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 4
53516: PUSH
53517: LD_INT 2
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 2
53526: PUSH
53527: LD_INT 4
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: LD_INT 4
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 0
53546: PUSH
53547: LD_INT 3
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 1
53556: PUSH
53557: LD_INT 4
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 1
53566: PUSH
53567: LD_INT 5
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 0
53576: PUSH
53577: LD_INT 5
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 1
53586: NEG
53587: PUSH
53588: LD_INT 4
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 1
53597: NEG
53598: PUSH
53599: LD_INT 3
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 2
53608: PUSH
53609: LD_INT 5
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 2
53618: NEG
53619: PUSH
53620: LD_INT 3
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 3
53629: NEG
53630: PUSH
53631: LD_INT 0
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 3
53640: NEG
53641: PUSH
53642: LD_INT 1
53644: NEG
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 2
53652: NEG
53653: PUSH
53654: LD_INT 0
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 2
53663: NEG
53664: PUSH
53665: LD_INT 1
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 3
53674: NEG
53675: PUSH
53676: LD_INT 1
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 4
53685: NEG
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 4
53696: NEG
53697: PUSH
53698: LD_INT 1
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 4
53708: NEG
53709: PUSH
53710: LD_INT 2
53712: NEG
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 2
53720: NEG
53721: PUSH
53722: LD_INT 2
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 4
53731: NEG
53732: PUSH
53733: LD_INT 4
53735: NEG
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 4
53743: NEG
53744: PUSH
53745: LD_INT 5
53747: NEG
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 3
53755: NEG
53756: PUSH
53757: LD_INT 4
53759: NEG
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 3
53767: NEG
53768: PUSH
53769: LD_INT 3
53771: NEG
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 4
53779: NEG
53780: PUSH
53781: LD_INT 3
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 5
53791: NEG
53792: PUSH
53793: LD_INT 4
53795: NEG
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 5
53803: NEG
53804: PUSH
53805: LD_INT 5
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 3
53815: NEG
53816: PUSH
53817: LD_INT 5
53819: NEG
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 5
53827: NEG
53828: PUSH
53829: LD_INT 3
53831: NEG
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53884: LD_ADDR_VAR 0 30
53888: PUSH
53889: LD_INT 4
53891: PUSH
53892: LD_INT 4
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 4
53901: PUSH
53902: LD_INT 3
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 5
53911: PUSH
53912: LD_INT 4
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 5
53921: PUSH
53922: LD_INT 5
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 4
53931: PUSH
53932: LD_INT 5
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 3
53941: PUSH
53942: LD_INT 4
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 3
53951: PUSH
53952: LD_INT 3
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 5
53961: PUSH
53962: LD_INT 3
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 3
53971: PUSH
53972: LD_INT 5
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 0
53981: PUSH
53982: LD_INT 3
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: LD_INT 2
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 1
54001: PUSH
54002: LD_INT 3
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 1
54011: PUSH
54012: LD_INT 4
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 0
54021: PUSH
54022: LD_INT 4
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: LD_INT 3
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 1
54042: NEG
54043: PUSH
54044: LD_INT 2
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 2
54053: PUSH
54054: LD_INT 4
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 2
54063: NEG
54064: PUSH
54065: LD_INT 2
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 4
54074: NEG
54075: PUSH
54076: LD_INT 0
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 4
54085: NEG
54086: PUSH
54087: LD_INT 1
54089: NEG
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 3
54097: NEG
54098: PUSH
54099: LD_INT 0
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 3
54108: NEG
54109: PUSH
54110: LD_INT 1
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 4
54119: NEG
54120: PUSH
54121: LD_INT 1
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 5
54130: NEG
54131: PUSH
54132: LD_INT 0
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 5
54141: NEG
54142: PUSH
54143: LD_INT 1
54145: NEG
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 5
54153: NEG
54154: PUSH
54155: LD_INT 2
54157: NEG
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 3
54165: NEG
54166: PUSH
54167: LD_INT 2
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 3
54176: NEG
54177: PUSH
54178: LD_INT 3
54180: NEG
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 3
54188: NEG
54189: PUSH
54190: LD_INT 4
54192: NEG
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 2
54200: NEG
54201: PUSH
54202: LD_INT 3
54204: NEG
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 2
54212: NEG
54213: PUSH
54214: LD_INT 2
54216: NEG
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 3
54224: NEG
54225: PUSH
54226: LD_INT 2
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 4
54236: NEG
54237: PUSH
54238: LD_INT 3
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 4
54248: NEG
54249: PUSH
54250: LD_INT 4
54252: NEG
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 2
54260: NEG
54261: PUSH
54262: LD_INT 4
54264: NEG
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 4
54272: NEG
54273: PUSH
54274: LD_INT 2
54276: NEG
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 0
54284: PUSH
54285: LD_INT 4
54287: NEG
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: LD_INT 5
54298: NEG
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 1
54306: PUSH
54307: LD_INT 4
54309: NEG
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: LD_INT 3
54320: NEG
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 0
54328: PUSH
54329: LD_INT 3
54331: NEG
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 1
54339: NEG
54340: PUSH
54341: LD_INT 4
54343: NEG
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 1
54351: NEG
54352: PUSH
54353: LD_INT 5
54355: NEG
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 2
54363: PUSH
54364: LD_INT 3
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 2
54374: NEG
54375: PUSH
54376: LD_INT 5
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54431: LD_ADDR_VAR 0 31
54435: PUSH
54436: LD_INT 0
54438: PUSH
54439: LD_INT 4
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: LD_INT 3
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: LD_INT 4
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 1
54468: PUSH
54469: LD_INT 5
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: LD_INT 5
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 1
54488: NEG
54489: PUSH
54490: LD_INT 4
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 1
54499: NEG
54500: PUSH
54501: LD_INT 3
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 2
54510: PUSH
54511: LD_INT 5
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 2
54520: NEG
54521: PUSH
54522: LD_INT 3
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 3
54531: NEG
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 3
54542: NEG
54543: PUSH
54544: LD_INT 1
54546: NEG
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 2
54554: NEG
54555: PUSH
54556: LD_INT 0
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 2
54565: NEG
54566: PUSH
54567: LD_INT 1
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 3
54576: NEG
54577: PUSH
54578: LD_INT 1
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 4
54587: NEG
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 4
54598: NEG
54599: PUSH
54600: LD_INT 1
54602: NEG
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 4
54610: NEG
54611: PUSH
54612: LD_INT 2
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 2
54622: NEG
54623: PUSH
54624: LD_INT 2
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 4
54633: NEG
54634: PUSH
54635: LD_INT 4
54637: NEG
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 4
54645: NEG
54646: PUSH
54647: LD_INT 5
54649: NEG
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 3
54657: NEG
54658: PUSH
54659: LD_INT 4
54661: NEG
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 3
54669: NEG
54670: PUSH
54671: LD_INT 3
54673: NEG
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 4
54681: NEG
54682: PUSH
54683: LD_INT 3
54685: NEG
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 5
54693: NEG
54694: PUSH
54695: LD_INT 4
54697: NEG
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 5
54705: NEG
54706: PUSH
54707: LD_INT 5
54709: NEG
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 3
54717: NEG
54718: PUSH
54719: LD_INT 5
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 5
54729: NEG
54730: PUSH
54731: LD_INT 3
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 0
54741: PUSH
54742: LD_INT 3
54744: NEG
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 0
54752: PUSH
54753: LD_INT 4
54755: NEG
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 1
54763: PUSH
54764: LD_INT 3
54766: NEG
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 1
54774: PUSH
54775: LD_INT 2
54777: NEG
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 0
54785: PUSH
54786: LD_INT 2
54788: NEG
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 1
54796: NEG
54797: PUSH
54798: LD_INT 3
54800: NEG
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 1
54808: NEG
54809: PUSH
54810: LD_INT 4
54812: NEG
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 2
54820: PUSH
54821: LD_INT 2
54823: NEG
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 2
54831: NEG
54832: PUSH
54833: LD_INT 4
54835: NEG
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 4
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 4
54853: PUSH
54854: LD_INT 1
54856: NEG
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 5
54864: PUSH
54865: LD_INT 0
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 5
54874: PUSH
54875: LD_INT 1
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 4
54884: PUSH
54885: LD_INT 1
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 3
54894: PUSH
54895: LD_INT 0
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 3
54904: PUSH
54905: LD_INT 1
54907: NEG
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 3
54915: PUSH
54916: LD_INT 2
54918: NEG
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 5
54926: PUSH
54927: LD_INT 2
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54981: LD_ADDR_VAR 0 32
54985: PUSH
54986: LD_INT 4
54988: NEG
54989: PUSH
54990: LD_INT 0
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 4
54999: NEG
55000: PUSH
55001: LD_INT 1
55003: NEG
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 3
55011: NEG
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 3
55022: NEG
55023: PUSH
55024: LD_INT 1
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 4
55033: NEG
55034: PUSH
55035: LD_INT 1
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 5
55044: NEG
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 5
55055: NEG
55056: PUSH
55057: LD_INT 1
55059: NEG
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 5
55067: NEG
55068: PUSH
55069: LD_INT 2
55071: NEG
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 3
55079: NEG
55080: PUSH
55081: LD_INT 2
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 3
55090: NEG
55091: PUSH
55092: LD_INT 3
55094: NEG
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 3
55102: NEG
55103: PUSH
55104: LD_INT 4
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 2
55114: NEG
55115: PUSH
55116: LD_INT 3
55118: NEG
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 2
55126: NEG
55127: PUSH
55128: LD_INT 2
55130: NEG
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 3
55138: NEG
55139: PUSH
55140: LD_INT 2
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 4
55150: NEG
55151: PUSH
55152: LD_INT 3
55154: NEG
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 4
55162: NEG
55163: PUSH
55164: LD_INT 4
55166: NEG
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 2
55174: NEG
55175: PUSH
55176: LD_INT 4
55178: NEG
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 4
55186: NEG
55187: PUSH
55188: LD_INT 2
55190: NEG
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: LD_INT 4
55201: NEG
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: LD_INT 5
55212: NEG
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 1
55220: PUSH
55221: LD_INT 4
55223: NEG
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 1
55231: PUSH
55232: LD_INT 3
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: LD_INT 3
55245: NEG
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 1
55253: NEG
55254: PUSH
55255: LD_INT 4
55257: NEG
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 1
55265: NEG
55266: PUSH
55267: LD_INT 5
55269: NEG
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 2
55277: PUSH
55278: LD_INT 3
55280: NEG
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 2
55288: NEG
55289: PUSH
55290: LD_INT 5
55292: NEG
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 3
55300: PUSH
55301: LD_INT 0
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 3
55310: PUSH
55311: LD_INT 1
55313: NEG
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 4
55321: PUSH
55322: LD_INT 0
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 4
55331: PUSH
55332: LD_INT 1
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 3
55341: PUSH
55342: LD_INT 1
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 2
55351: PUSH
55352: LD_INT 0
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 2
55361: PUSH
55362: LD_INT 1
55364: NEG
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 2
55372: PUSH
55373: LD_INT 2
55375: NEG
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 4
55383: PUSH
55384: LD_INT 2
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 4
55393: PUSH
55394: LD_INT 4
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 4
55403: PUSH
55404: LD_INT 3
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 5
55413: PUSH
55414: LD_INT 4
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 5
55423: PUSH
55424: LD_INT 5
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 4
55433: PUSH
55434: LD_INT 5
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 3
55443: PUSH
55444: LD_INT 4
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 3
55453: PUSH
55454: LD_INT 3
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 5
55463: PUSH
55464: LD_INT 3
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 3
55473: PUSH
55474: LD_INT 5
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55528: LD_ADDR_VAR 0 33
55532: PUSH
55533: LD_INT 4
55535: NEG
55536: PUSH
55537: LD_INT 4
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 4
55547: NEG
55548: PUSH
55549: LD_INT 5
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 3
55559: NEG
55560: PUSH
55561: LD_INT 4
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 3
55571: NEG
55572: PUSH
55573: LD_INT 3
55575: NEG
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 4
55583: NEG
55584: PUSH
55585: LD_INT 3
55587: NEG
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 5
55595: NEG
55596: PUSH
55597: LD_INT 4
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 5
55607: NEG
55608: PUSH
55609: LD_INT 5
55611: NEG
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 3
55619: NEG
55620: PUSH
55621: LD_INT 5
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 5
55631: NEG
55632: PUSH
55633: LD_INT 3
55635: NEG
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 0
55643: PUSH
55644: LD_INT 3
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 0
55654: PUSH
55655: LD_INT 4
55657: NEG
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 1
55665: PUSH
55666: LD_INT 3
55668: NEG
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 1
55676: PUSH
55677: LD_INT 2
55679: NEG
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 0
55687: PUSH
55688: LD_INT 2
55690: NEG
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 1
55698: NEG
55699: PUSH
55700: LD_INT 3
55702: NEG
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 1
55710: NEG
55711: PUSH
55712: LD_INT 4
55714: NEG
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 2
55722: PUSH
55723: LD_INT 2
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 2
55733: NEG
55734: PUSH
55735: LD_INT 4
55737: NEG
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 4
55745: PUSH
55746: LD_INT 0
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 4
55755: PUSH
55756: LD_INT 1
55758: NEG
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 5
55766: PUSH
55767: LD_INT 0
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 5
55776: PUSH
55777: LD_INT 1
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 4
55786: PUSH
55787: LD_INT 1
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 3
55796: PUSH
55797: LD_INT 0
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 3
55806: PUSH
55807: LD_INT 1
55809: NEG
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 3
55817: PUSH
55818: LD_INT 2
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 5
55828: PUSH
55829: LD_INT 2
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 3
55838: PUSH
55839: LD_INT 3
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 3
55848: PUSH
55849: LD_INT 2
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 4
55858: PUSH
55859: LD_INT 3
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 4
55868: PUSH
55869: LD_INT 4
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 3
55878: PUSH
55879: LD_INT 4
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 2
55888: PUSH
55889: LD_INT 3
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 2
55898: PUSH
55899: LD_INT 2
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 4
55908: PUSH
55909: LD_INT 2
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 2
55918: PUSH
55919: LD_INT 4
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 0
55928: PUSH
55929: LD_INT 4
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: LD_INT 3
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 1
55948: PUSH
55949: LD_INT 4
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 1
55958: PUSH
55959: LD_INT 5
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: LD_INT 5
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 1
55978: NEG
55979: PUSH
55980: LD_INT 4
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 1
55989: NEG
55990: PUSH
55991: LD_INT 3
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 2
56000: PUSH
56001: LD_INT 5
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 2
56010: NEG
56011: PUSH
56012: LD_INT 3
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56066: LD_ADDR_VAR 0 34
56070: PUSH
56071: LD_INT 0
56073: PUSH
56074: LD_INT 4
56076: NEG
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 0
56084: PUSH
56085: LD_INT 5
56087: NEG
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 1
56095: PUSH
56096: LD_INT 4
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 1
56106: PUSH
56107: LD_INT 3
56109: NEG
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: LD_INT 3
56120: NEG
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: NEG
56129: PUSH
56130: LD_INT 4
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 1
56140: NEG
56141: PUSH
56142: LD_INT 5
56144: NEG
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 2
56152: PUSH
56153: LD_INT 3
56155: NEG
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 2
56163: NEG
56164: PUSH
56165: LD_INT 5
56167: NEG
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 3
56175: PUSH
56176: LD_INT 0
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 3
56185: PUSH
56186: LD_INT 1
56188: NEG
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 4
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 4
56206: PUSH
56207: LD_INT 1
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 3
56216: PUSH
56217: LD_INT 1
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 2
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 2
56236: PUSH
56237: LD_INT 1
56239: NEG
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 2
56247: PUSH
56248: LD_INT 2
56250: NEG
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 4
56258: PUSH
56259: LD_INT 2
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 4
56268: PUSH
56269: LD_INT 4
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 4
56278: PUSH
56279: LD_INT 3
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 5
56288: PUSH
56289: LD_INT 4
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 5
56298: PUSH
56299: LD_INT 5
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 4
56308: PUSH
56309: LD_INT 5
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 3
56318: PUSH
56319: LD_INT 4
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 3
56328: PUSH
56329: LD_INT 3
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 5
56338: PUSH
56339: LD_INT 3
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 3
56348: PUSH
56349: LD_INT 5
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 0
56358: PUSH
56359: LD_INT 3
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: LD_INT 2
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 1
56378: PUSH
56379: LD_INT 3
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 1
56388: PUSH
56389: LD_INT 4
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 0
56398: PUSH
56399: LD_INT 4
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 1
56408: NEG
56409: PUSH
56410: LD_INT 3
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 1
56419: NEG
56420: PUSH
56421: LD_INT 2
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 2
56430: PUSH
56431: LD_INT 4
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 2
56440: NEG
56441: PUSH
56442: LD_INT 2
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 4
56451: NEG
56452: PUSH
56453: LD_INT 0
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 4
56462: NEG
56463: PUSH
56464: LD_INT 1
56466: NEG
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 3
56474: NEG
56475: PUSH
56476: LD_INT 0
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 3
56485: NEG
56486: PUSH
56487: LD_INT 1
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 4
56496: NEG
56497: PUSH
56498: LD_INT 1
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 5
56507: NEG
56508: PUSH
56509: LD_INT 0
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 5
56518: NEG
56519: PUSH
56520: LD_INT 1
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 5
56530: NEG
56531: PUSH
56532: LD_INT 2
56534: NEG
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 3
56542: NEG
56543: PUSH
56544: LD_INT 2
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: ST_TO_ADDR
// end ; end ;
56598: GO 56601
56600: POP
// case btype of b_depot , b_warehouse :
56601: LD_VAR 0 1
56605: PUSH
56606: LD_INT 0
56608: DOUBLE
56609: EQUAL
56610: IFTRUE 56620
56612: LD_INT 1
56614: DOUBLE
56615: EQUAL
56616: IFTRUE 56620
56618: GO 56821
56620: POP
// case nation of nation_american :
56621: LD_VAR 0 5
56625: PUSH
56626: LD_INT 1
56628: DOUBLE
56629: EQUAL
56630: IFTRUE 56634
56632: GO 56690
56634: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56635: LD_ADDR_VAR 0 9
56639: PUSH
56640: LD_VAR 0 11
56644: PUSH
56645: LD_VAR 0 12
56649: PUSH
56650: LD_VAR 0 13
56654: PUSH
56655: LD_VAR 0 14
56659: PUSH
56660: LD_VAR 0 15
56664: PUSH
56665: LD_VAR 0 16
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: PUSH
56678: LD_VAR 0 4
56682: PUSH
56683: LD_INT 1
56685: PLUS
56686: ARRAY
56687: ST_TO_ADDR
56688: GO 56819
56690: LD_INT 2
56692: DOUBLE
56693: EQUAL
56694: IFTRUE 56698
56696: GO 56754
56698: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56699: LD_ADDR_VAR 0 9
56703: PUSH
56704: LD_VAR 0 17
56708: PUSH
56709: LD_VAR 0 18
56713: PUSH
56714: LD_VAR 0 19
56718: PUSH
56719: LD_VAR 0 20
56723: PUSH
56724: LD_VAR 0 21
56728: PUSH
56729: LD_VAR 0 22
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: PUSH
56742: LD_VAR 0 4
56746: PUSH
56747: LD_INT 1
56749: PLUS
56750: ARRAY
56751: ST_TO_ADDR
56752: GO 56819
56754: LD_INT 3
56756: DOUBLE
56757: EQUAL
56758: IFTRUE 56762
56760: GO 56818
56762: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56763: LD_ADDR_VAR 0 9
56767: PUSH
56768: LD_VAR 0 23
56772: PUSH
56773: LD_VAR 0 24
56777: PUSH
56778: LD_VAR 0 25
56782: PUSH
56783: LD_VAR 0 26
56787: PUSH
56788: LD_VAR 0 27
56792: PUSH
56793: LD_VAR 0 28
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: PUSH
56806: LD_VAR 0 4
56810: PUSH
56811: LD_INT 1
56813: PLUS
56814: ARRAY
56815: ST_TO_ADDR
56816: GO 56819
56818: POP
56819: GO 57374
56821: LD_INT 2
56823: DOUBLE
56824: EQUAL
56825: IFTRUE 56835
56827: LD_INT 3
56829: DOUBLE
56830: EQUAL
56831: IFTRUE 56835
56833: GO 56891
56835: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56836: LD_ADDR_VAR 0 9
56840: PUSH
56841: LD_VAR 0 29
56845: PUSH
56846: LD_VAR 0 30
56850: PUSH
56851: LD_VAR 0 31
56855: PUSH
56856: LD_VAR 0 32
56860: PUSH
56861: LD_VAR 0 33
56865: PUSH
56866: LD_VAR 0 34
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: PUSH
56879: LD_VAR 0 4
56883: PUSH
56884: LD_INT 1
56886: PLUS
56887: ARRAY
56888: ST_TO_ADDR
56889: GO 57374
56891: LD_INT 16
56893: DOUBLE
56894: EQUAL
56895: IFTRUE 56953
56897: LD_INT 17
56899: DOUBLE
56900: EQUAL
56901: IFTRUE 56953
56903: LD_INT 18
56905: DOUBLE
56906: EQUAL
56907: IFTRUE 56953
56909: LD_INT 19
56911: DOUBLE
56912: EQUAL
56913: IFTRUE 56953
56915: LD_INT 22
56917: DOUBLE
56918: EQUAL
56919: IFTRUE 56953
56921: LD_INT 20
56923: DOUBLE
56924: EQUAL
56925: IFTRUE 56953
56927: LD_INT 21
56929: DOUBLE
56930: EQUAL
56931: IFTRUE 56953
56933: LD_INT 23
56935: DOUBLE
56936: EQUAL
56937: IFTRUE 56953
56939: LD_INT 24
56941: DOUBLE
56942: EQUAL
56943: IFTRUE 56953
56945: LD_INT 25
56947: DOUBLE
56948: EQUAL
56949: IFTRUE 56953
56951: GO 57009
56953: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56954: LD_ADDR_VAR 0 9
56958: PUSH
56959: LD_VAR 0 35
56963: PUSH
56964: LD_VAR 0 36
56968: PUSH
56969: LD_VAR 0 37
56973: PUSH
56974: LD_VAR 0 38
56978: PUSH
56979: LD_VAR 0 39
56983: PUSH
56984: LD_VAR 0 40
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: PUSH
56997: LD_VAR 0 4
57001: PUSH
57002: LD_INT 1
57004: PLUS
57005: ARRAY
57006: ST_TO_ADDR
57007: GO 57374
57009: LD_INT 6
57011: DOUBLE
57012: EQUAL
57013: IFTRUE 57065
57015: LD_INT 7
57017: DOUBLE
57018: EQUAL
57019: IFTRUE 57065
57021: LD_INT 8
57023: DOUBLE
57024: EQUAL
57025: IFTRUE 57065
57027: LD_INT 13
57029: DOUBLE
57030: EQUAL
57031: IFTRUE 57065
57033: LD_INT 12
57035: DOUBLE
57036: EQUAL
57037: IFTRUE 57065
57039: LD_INT 15
57041: DOUBLE
57042: EQUAL
57043: IFTRUE 57065
57045: LD_INT 11
57047: DOUBLE
57048: EQUAL
57049: IFTRUE 57065
57051: LD_INT 14
57053: DOUBLE
57054: EQUAL
57055: IFTRUE 57065
57057: LD_INT 10
57059: DOUBLE
57060: EQUAL
57061: IFTRUE 57065
57063: GO 57121
57065: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57066: LD_ADDR_VAR 0 9
57070: PUSH
57071: LD_VAR 0 41
57075: PUSH
57076: LD_VAR 0 42
57080: PUSH
57081: LD_VAR 0 43
57085: PUSH
57086: LD_VAR 0 44
57090: PUSH
57091: LD_VAR 0 45
57095: PUSH
57096: LD_VAR 0 46
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: PUSH
57109: LD_VAR 0 4
57113: PUSH
57114: LD_INT 1
57116: PLUS
57117: ARRAY
57118: ST_TO_ADDR
57119: GO 57374
57121: LD_INT 36
57123: DOUBLE
57124: EQUAL
57125: IFTRUE 57129
57127: GO 57185
57129: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57130: LD_ADDR_VAR 0 9
57134: PUSH
57135: LD_VAR 0 47
57139: PUSH
57140: LD_VAR 0 48
57144: PUSH
57145: LD_VAR 0 49
57149: PUSH
57150: LD_VAR 0 50
57154: PUSH
57155: LD_VAR 0 51
57159: PUSH
57160: LD_VAR 0 52
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: PUSH
57173: LD_VAR 0 4
57177: PUSH
57178: LD_INT 1
57180: PLUS
57181: ARRAY
57182: ST_TO_ADDR
57183: GO 57374
57185: LD_INT 4
57187: DOUBLE
57188: EQUAL
57189: IFTRUE 57211
57191: LD_INT 5
57193: DOUBLE
57194: EQUAL
57195: IFTRUE 57211
57197: LD_INT 34
57199: DOUBLE
57200: EQUAL
57201: IFTRUE 57211
57203: LD_INT 37
57205: DOUBLE
57206: EQUAL
57207: IFTRUE 57211
57209: GO 57267
57211: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57212: LD_ADDR_VAR 0 9
57216: PUSH
57217: LD_VAR 0 53
57221: PUSH
57222: LD_VAR 0 54
57226: PUSH
57227: LD_VAR 0 55
57231: PUSH
57232: LD_VAR 0 56
57236: PUSH
57237: LD_VAR 0 57
57241: PUSH
57242: LD_VAR 0 58
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: PUSH
57255: LD_VAR 0 4
57259: PUSH
57260: LD_INT 1
57262: PLUS
57263: ARRAY
57264: ST_TO_ADDR
57265: GO 57374
57267: LD_INT 31
57269: DOUBLE
57270: EQUAL
57271: IFTRUE 57317
57273: LD_INT 32
57275: DOUBLE
57276: EQUAL
57277: IFTRUE 57317
57279: LD_INT 33
57281: DOUBLE
57282: EQUAL
57283: IFTRUE 57317
57285: LD_INT 27
57287: DOUBLE
57288: EQUAL
57289: IFTRUE 57317
57291: LD_INT 26
57293: DOUBLE
57294: EQUAL
57295: IFTRUE 57317
57297: LD_INT 28
57299: DOUBLE
57300: EQUAL
57301: IFTRUE 57317
57303: LD_INT 29
57305: DOUBLE
57306: EQUAL
57307: IFTRUE 57317
57309: LD_INT 30
57311: DOUBLE
57312: EQUAL
57313: IFTRUE 57317
57315: GO 57373
57317: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57318: LD_ADDR_VAR 0 9
57322: PUSH
57323: LD_VAR 0 59
57327: PUSH
57328: LD_VAR 0 60
57332: PUSH
57333: LD_VAR 0 61
57337: PUSH
57338: LD_VAR 0 62
57342: PUSH
57343: LD_VAR 0 63
57347: PUSH
57348: LD_VAR 0 64
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: PUSH
57361: LD_VAR 0 4
57365: PUSH
57366: LD_INT 1
57368: PLUS
57369: ARRAY
57370: ST_TO_ADDR
57371: GO 57374
57373: POP
// temp_list2 = [ ] ;
57374: LD_ADDR_VAR 0 10
57378: PUSH
57379: EMPTY
57380: ST_TO_ADDR
// for i in temp_list do
57381: LD_ADDR_VAR 0 8
57385: PUSH
57386: LD_VAR 0 9
57390: PUSH
57391: FOR_IN
57392: IFFALSE 57444
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57394: LD_ADDR_VAR 0 10
57398: PUSH
57399: LD_VAR 0 10
57403: PUSH
57404: LD_VAR 0 8
57408: PUSH
57409: LD_INT 1
57411: ARRAY
57412: PUSH
57413: LD_VAR 0 2
57417: PLUS
57418: PUSH
57419: LD_VAR 0 8
57423: PUSH
57424: LD_INT 2
57426: ARRAY
57427: PUSH
57428: LD_VAR 0 3
57432: PLUS
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: EMPTY
57439: LIST
57440: ADD
57441: ST_TO_ADDR
57442: GO 57391
57444: POP
57445: POP
// result = temp_list2 ;
57446: LD_ADDR_VAR 0 7
57450: PUSH
57451: LD_VAR 0 10
57455: ST_TO_ADDR
// end ;
57456: LD_VAR 0 7
57460: RET
// export function EnemyInRange ( unit , dist ) ; begin
57461: LD_INT 0
57463: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57464: LD_ADDR_VAR 0 3
57468: PUSH
57469: LD_VAR 0 1
57473: PPUSH
57474: CALL_OW 255
57478: PPUSH
57479: LD_VAR 0 1
57483: PPUSH
57484: CALL_OW 250
57488: PPUSH
57489: LD_VAR 0 1
57493: PPUSH
57494: CALL_OW 251
57498: PPUSH
57499: LD_VAR 0 2
57503: PPUSH
57504: CALL 30857 0 4
57508: PUSH
57509: LD_INT 4
57511: ARRAY
57512: ST_TO_ADDR
// end ;
57513: LD_VAR 0 3
57517: RET
// export function PlayerSeeMe ( unit ) ; begin
57518: LD_INT 0
57520: PPUSH
// result := See ( your_side , unit ) ;
57521: LD_ADDR_VAR 0 2
57525: PUSH
57526: LD_OWVAR 2
57530: PPUSH
57531: LD_VAR 0 1
57535: PPUSH
57536: CALL_OW 292
57540: ST_TO_ADDR
// end ;
57541: LD_VAR 0 2
57545: RET
// export function ReverseDir ( unit ) ; begin
57546: LD_INT 0
57548: PPUSH
// if not unit then
57549: LD_VAR 0 1
57553: NOT
57554: IFFALSE 57558
// exit ;
57556: GO 57581
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57558: LD_ADDR_VAR 0 2
57562: PUSH
57563: LD_VAR 0 1
57567: PPUSH
57568: CALL_OW 254
57572: PUSH
57573: LD_INT 3
57575: PLUS
57576: PUSH
57577: LD_INT 6
57579: MOD
57580: ST_TO_ADDR
// end ;
57581: LD_VAR 0 2
57585: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57586: LD_INT 0
57588: PPUSH
57589: PPUSH
57590: PPUSH
57591: PPUSH
57592: PPUSH
// if not hexes then
57593: LD_VAR 0 2
57597: NOT
57598: IFFALSE 57602
// exit ;
57600: GO 57750
// dist := 9999 ;
57602: LD_ADDR_VAR 0 5
57606: PUSH
57607: LD_INT 9999
57609: ST_TO_ADDR
// for i = 1 to hexes do
57610: LD_ADDR_VAR 0 4
57614: PUSH
57615: DOUBLE
57616: LD_INT 1
57618: DEC
57619: ST_TO_ADDR
57620: LD_VAR 0 2
57624: PUSH
57625: FOR_TO
57626: IFFALSE 57738
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57628: LD_VAR 0 1
57632: PPUSH
57633: LD_VAR 0 2
57637: PUSH
57638: LD_VAR 0 4
57642: ARRAY
57643: PUSH
57644: LD_INT 1
57646: ARRAY
57647: PPUSH
57648: LD_VAR 0 2
57652: PUSH
57653: LD_VAR 0 4
57657: ARRAY
57658: PUSH
57659: LD_INT 2
57661: ARRAY
57662: PPUSH
57663: CALL_OW 297
57667: PUSH
57668: LD_VAR 0 5
57672: LESS
57673: IFFALSE 57736
// begin hex := hexes [ i ] ;
57675: LD_ADDR_VAR 0 7
57679: PUSH
57680: LD_VAR 0 2
57684: PUSH
57685: LD_VAR 0 4
57689: ARRAY
57690: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57691: LD_ADDR_VAR 0 5
57695: PUSH
57696: LD_VAR 0 1
57700: PPUSH
57701: LD_VAR 0 2
57705: PUSH
57706: LD_VAR 0 4
57710: ARRAY
57711: PUSH
57712: LD_INT 1
57714: ARRAY
57715: PPUSH
57716: LD_VAR 0 2
57720: PUSH
57721: LD_VAR 0 4
57725: ARRAY
57726: PUSH
57727: LD_INT 2
57729: ARRAY
57730: PPUSH
57731: CALL_OW 297
57735: ST_TO_ADDR
// end ; end ;
57736: GO 57625
57738: POP
57739: POP
// result := hex ;
57740: LD_ADDR_VAR 0 3
57744: PUSH
57745: LD_VAR 0 7
57749: ST_TO_ADDR
// end ;
57750: LD_VAR 0 3
57754: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57755: LD_INT 0
57757: PPUSH
57758: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57759: LD_VAR 0 1
57763: NOT
57764: PUSH
57765: LD_VAR 0 1
57769: PUSH
57770: LD_INT 21
57772: PUSH
57773: LD_INT 2
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 23
57782: PUSH
57783: LD_INT 2
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PPUSH
57794: CALL_OW 69
57798: IN
57799: NOT
57800: OR
57801: IFFALSE 57805
// exit ;
57803: GO 57852
// for i = 1 to 3 do
57805: LD_ADDR_VAR 0 3
57809: PUSH
57810: DOUBLE
57811: LD_INT 1
57813: DEC
57814: ST_TO_ADDR
57815: LD_INT 3
57817: PUSH
57818: FOR_TO
57819: IFFALSE 57850
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57821: LD_VAR 0 1
57825: PPUSH
57826: CALL_OW 250
57830: PPUSH
57831: LD_VAR 0 1
57835: PPUSH
57836: CALL_OW 251
57840: PPUSH
57841: LD_INT 1
57843: PPUSH
57844: CALL_OW 453
57848: GO 57818
57850: POP
57851: POP
// end ;
57852: LD_VAR 0 2
57856: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57857: LD_INT 0
57859: PPUSH
57860: PPUSH
57861: PPUSH
57862: PPUSH
57863: PPUSH
57864: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57865: LD_VAR 0 1
57869: NOT
57870: PUSH
57871: LD_VAR 0 2
57875: NOT
57876: OR
57877: PUSH
57878: LD_VAR 0 1
57882: PPUSH
57883: CALL_OW 314
57887: OR
57888: IFFALSE 57892
// exit ;
57890: GO 58333
// x := GetX ( enemy_unit ) ;
57892: LD_ADDR_VAR 0 7
57896: PUSH
57897: LD_VAR 0 2
57901: PPUSH
57902: CALL_OW 250
57906: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57907: LD_ADDR_VAR 0 8
57911: PUSH
57912: LD_VAR 0 2
57916: PPUSH
57917: CALL_OW 251
57921: ST_TO_ADDR
// if not x or not y then
57922: LD_VAR 0 7
57926: NOT
57927: PUSH
57928: LD_VAR 0 8
57932: NOT
57933: OR
57934: IFFALSE 57938
// exit ;
57936: GO 58333
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57938: LD_ADDR_VAR 0 6
57942: PUSH
57943: LD_VAR 0 7
57947: PPUSH
57948: LD_INT 0
57950: PPUSH
57951: LD_INT 4
57953: PPUSH
57954: CALL_OW 272
57958: PUSH
57959: LD_VAR 0 8
57963: PPUSH
57964: LD_INT 0
57966: PPUSH
57967: LD_INT 4
57969: PPUSH
57970: CALL_OW 273
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_VAR 0 7
57983: PPUSH
57984: LD_INT 1
57986: PPUSH
57987: LD_INT 4
57989: PPUSH
57990: CALL_OW 272
57994: PUSH
57995: LD_VAR 0 8
57999: PPUSH
58000: LD_INT 1
58002: PPUSH
58003: LD_INT 4
58005: PPUSH
58006: CALL_OW 273
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_VAR 0 7
58019: PPUSH
58020: LD_INT 2
58022: PPUSH
58023: LD_INT 4
58025: PPUSH
58026: CALL_OW 272
58030: PUSH
58031: LD_VAR 0 8
58035: PPUSH
58036: LD_INT 2
58038: PPUSH
58039: LD_INT 4
58041: PPUSH
58042: CALL_OW 273
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_VAR 0 7
58055: PPUSH
58056: LD_INT 3
58058: PPUSH
58059: LD_INT 4
58061: PPUSH
58062: CALL_OW 272
58066: PUSH
58067: LD_VAR 0 8
58071: PPUSH
58072: LD_INT 3
58074: PPUSH
58075: LD_INT 4
58077: PPUSH
58078: CALL_OW 273
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_VAR 0 7
58091: PPUSH
58092: LD_INT 4
58094: PPUSH
58095: LD_INT 4
58097: PPUSH
58098: CALL_OW 272
58102: PUSH
58103: LD_VAR 0 8
58107: PPUSH
58108: LD_INT 4
58110: PPUSH
58111: LD_INT 4
58113: PPUSH
58114: CALL_OW 273
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_VAR 0 7
58127: PPUSH
58128: LD_INT 5
58130: PPUSH
58131: LD_INT 4
58133: PPUSH
58134: CALL_OW 272
58138: PUSH
58139: LD_VAR 0 8
58143: PPUSH
58144: LD_INT 5
58146: PPUSH
58147: LD_INT 4
58149: PPUSH
58150: CALL_OW 273
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: ST_TO_ADDR
// for i = tmp downto 1 do
58167: LD_ADDR_VAR 0 4
58171: PUSH
58172: DOUBLE
58173: LD_VAR 0 6
58177: INC
58178: ST_TO_ADDR
58179: LD_INT 1
58181: PUSH
58182: FOR_DOWNTO
58183: IFFALSE 58284
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58185: LD_VAR 0 6
58189: PUSH
58190: LD_VAR 0 4
58194: ARRAY
58195: PUSH
58196: LD_INT 1
58198: ARRAY
58199: PPUSH
58200: LD_VAR 0 6
58204: PUSH
58205: LD_VAR 0 4
58209: ARRAY
58210: PUSH
58211: LD_INT 2
58213: ARRAY
58214: PPUSH
58215: CALL_OW 488
58219: NOT
58220: PUSH
58221: LD_VAR 0 6
58225: PUSH
58226: LD_VAR 0 4
58230: ARRAY
58231: PUSH
58232: LD_INT 1
58234: ARRAY
58235: PPUSH
58236: LD_VAR 0 6
58240: PUSH
58241: LD_VAR 0 4
58245: ARRAY
58246: PUSH
58247: LD_INT 2
58249: ARRAY
58250: PPUSH
58251: CALL_OW 428
58255: PUSH
58256: LD_INT 0
58258: NONEQUAL
58259: OR
58260: IFFALSE 58282
// tmp := Delete ( tmp , i ) ;
58262: LD_ADDR_VAR 0 6
58266: PUSH
58267: LD_VAR 0 6
58271: PPUSH
58272: LD_VAR 0 4
58276: PPUSH
58277: CALL_OW 3
58281: ST_TO_ADDR
58282: GO 58182
58284: POP
58285: POP
// j := GetClosestHex ( unit , tmp ) ;
58286: LD_ADDR_VAR 0 5
58290: PUSH
58291: LD_VAR 0 1
58295: PPUSH
58296: LD_VAR 0 6
58300: PPUSH
58301: CALL 57586 0 2
58305: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58306: LD_VAR 0 1
58310: PPUSH
58311: LD_VAR 0 5
58315: PUSH
58316: LD_INT 1
58318: ARRAY
58319: PPUSH
58320: LD_VAR 0 5
58324: PUSH
58325: LD_INT 2
58327: ARRAY
58328: PPUSH
58329: CALL_OW 111
// end ;
58333: LD_VAR 0 3
58337: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58338: LD_INT 0
58340: PPUSH
58341: PPUSH
58342: PPUSH
// uc_side = 0 ;
58343: LD_ADDR_OWVAR 20
58347: PUSH
58348: LD_INT 0
58350: ST_TO_ADDR
// uc_nation = 0 ;
58351: LD_ADDR_OWVAR 21
58355: PUSH
58356: LD_INT 0
58358: ST_TO_ADDR
// InitHc_All ( ) ;
58359: CALL_OW 584
// InitVc ;
58363: CALL_OW 20
// if mastodonts then
58367: LD_VAR 0 6
58371: IFFALSE 58438
// for i = 1 to mastodonts do
58373: LD_ADDR_VAR 0 11
58377: PUSH
58378: DOUBLE
58379: LD_INT 1
58381: DEC
58382: ST_TO_ADDR
58383: LD_VAR 0 6
58387: PUSH
58388: FOR_TO
58389: IFFALSE 58436
// begin vc_chassis := 31 ;
58391: LD_ADDR_OWVAR 37
58395: PUSH
58396: LD_INT 31
58398: ST_TO_ADDR
// vc_control := control_rider ;
58399: LD_ADDR_OWVAR 38
58403: PUSH
58404: LD_INT 4
58406: ST_TO_ADDR
// animal := CreateVehicle ;
58407: LD_ADDR_VAR 0 12
58411: PUSH
58412: CALL_OW 45
58416: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58417: LD_VAR 0 12
58421: PPUSH
58422: LD_VAR 0 8
58426: PPUSH
58427: LD_INT 0
58429: PPUSH
58430: CALL 60573 0 3
// end ;
58434: GO 58388
58436: POP
58437: POP
// if horses then
58438: LD_VAR 0 5
58442: IFFALSE 58509
// for i = 1 to horses do
58444: LD_ADDR_VAR 0 11
58448: PUSH
58449: DOUBLE
58450: LD_INT 1
58452: DEC
58453: ST_TO_ADDR
58454: LD_VAR 0 5
58458: PUSH
58459: FOR_TO
58460: IFFALSE 58507
// begin hc_class := 21 ;
58462: LD_ADDR_OWVAR 28
58466: PUSH
58467: LD_INT 21
58469: ST_TO_ADDR
// hc_gallery :=  ;
58470: LD_ADDR_OWVAR 33
58474: PUSH
58475: LD_STRING 
58477: ST_TO_ADDR
// animal := CreateHuman ;
58478: LD_ADDR_VAR 0 12
58482: PUSH
58483: CALL_OW 44
58487: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58488: LD_VAR 0 12
58492: PPUSH
58493: LD_VAR 0 8
58497: PPUSH
58498: LD_INT 0
58500: PPUSH
58501: CALL 60573 0 3
// end ;
58505: GO 58459
58507: POP
58508: POP
// if birds then
58509: LD_VAR 0 1
58513: IFFALSE 58580
// for i = 1 to birds do
58515: LD_ADDR_VAR 0 11
58519: PUSH
58520: DOUBLE
58521: LD_INT 1
58523: DEC
58524: ST_TO_ADDR
58525: LD_VAR 0 1
58529: PUSH
58530: FOR_TO
58531: IFFALSE 58578
// begin hc_class = 18 ;
58533: LD_ADDR_OWVAR 28
58537: PUSH
58538: LD_INT 18
58540: ST_TO_ADDR
// hc_gallery =  ;
58541: LD_ADDR_OWVAR 33
58545: PUSH
58546: LD_STRING 
58548: ST_TO_ADDR
// animal := CreateHuman ;
58549: LD_ADDR_VAR 0 12
58553: PUSH
58554: CALL_OW 44
58558: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58559: LD_VAR 0 12
58563: PPUSH
58564: LD_VAR 0 8
58568: PPUSH
58569: LD_INT 0
58571: PPUSH
58572: CALL 60573 0 3
// end ;
58576: GO 58530
58578: POP
58579: POP
// if tigers then
58580: LD_VAR 0 2
58584: IFFALSE 58668
// for i = 1 to tigers do
58586: LD_ADDR_VAR 0 11
58590: PUSH
58591: DOUBLE
58592: LD_INT 1
58594: DEC
58595: ST_TO_ADDR
58596: LD_VAR 0 2
58600: PUSH
58601: FOR_TO
58602: IFFALSE 58666
// begin hc_class = class_tiger ;
58604: LD_ADDR_OWVAR 28
58608: PUSH
58609: LD_INT 14
58611: ST_TO_ADDR
// hc_gallery =  ;
58612: LD_ADDR_OWVAR 33
58616: PUSH
58617: LD_STRING 
58619: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58620: LD_ADDR_OWVAR 35
58624: PUSH
58625: LD_INT 7
58627: NEG
58628: PPUSH
58629: LD_INT 7
58631: PPUSH
58632: CALL_OW 12
58636: ST_TO_ADDR
// animal := CreateHuman ;
58637: LD_ADDR_VAR 0 12
58641: PUSH
58642: CALL_OW 44
58646: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58647: LD_VAR 0 12
58651: PPUSH
58652: LD_VAR 0 8
58656: PPUSH
58657: LD_INT 0
58659: PPUSH
58660: CALL 60573 0 3
// end ;
58664: GO 58601
58666: POP
58667: POP
// if apemans then
58668: LD_VAR 0 3
58672: IFFALSE 58795
// for i = 1 to apemans do
58674: LD_ADDR_VAR 0 11
58678: PUSH
58679: DOUBLE
58680: LD_INT 1
58682: DEC
58683: ST_TO_ADDR
58684: LD_VAR 0 3
58688: PUSH
58689: FOR_TO
58690: IFFALSE 58793
// begin hc_class = class_apeman ;
58692: LD_ADDR_OWVAR 28
58696: PUSH
58697: LD_INT 12
58699: ST_TO_ADDR
// hc_gallery =  ;
58700: LD_ADDR_OWVAR 33
58704: PUSH
58705: LD_STRING 
58707: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58708: LD_ADDR_OWVAR 35
58712: PUSH
58713: LD_INT 2
58715: NEG
58716: PPUSH
58717: LD_INT 2
58719: PPUSH
58720: CALL_OW 12
58724: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58725: LD_ADDR_OWVAR 31
58729: PUSH
58730: LD_INT 1
58732: PPUSH
58733: LD_INT 3
58735: PPUSH
58736: CALL_OW 12
58740: PUSH
58741: LD_INT 1
58743: PPUSH
58744: LD_INT 3
58746: PPUSH
58747: CALL_OW 12
58751: PUSH
58752: LD_INT 0
58754: PUSH
58755: LD_INT 0
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: ST_TO_ADDR
// animal := CreateHuman ;
58764: LD_ADDR_VAR 0 12
58768: PUSH
58769: CALL_OW 44
58773: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58774: LD_VAR 0 12
58778: PPUSH
58779: LD_VAR 0 8
58783: PPUSH
58784: LD_INT 0
58786: PPUSH
58787: CALL 60573 0 3
// end ;
58791: GO 58689
58793: POP
58794: POP
// if enchidnas then
58795: LD_VAR 0 4
58799: IFFALSE 58866
// for i = 1 to enchidnas do
58801: LD_ADDR_VAR 0 11
58805: PUSH
58806: DOUBLE
58807: LD_INT 1
58809: DEC
58810: ST_TO_ADDR
58811: LD_VAR 0 4
58815: PUSH
58816: FOR_TO
58817: IFFALSE 58864
// begin hc_class = 13 ;
58819: LD_ADDR_OWVAR 28
58823: PUSH
58824: LD_INT 13
58826: ST_TO_ADDR
// hc_gallery =  ;
58827: LD_ADDR_OWVAR 33
58831: PUSH
58832: LD_STRING 
58834: ST_TO_ADDR
// animal := CreateHuman ;
58835: LD_ADDR_VAR 0 12
58839: PUSH
58840: CALL_OW 44
58844: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58845: LD_VAR 0 12
58849: PPUSH
58850: LD_VAR 0 8
58854: PPUSH
58855: LD_INT 0
58857: PPUSH
58858: CALL 60573 0 3
// end ;
58862: GO 58816
58864: POP
58865: POP
// if fishes then
58866: LD_VAR 0 7
58870: IFFALSE 58937
// for i = 1 to fishes do
58872: LD_ADDR_VAR 0 11
58876: PUSH
58877: DOUBLE
58878: LD_INT 1
58880: DEC
58881: ST_TO_ADDR
58882: LD_VAR 0 7
58886: PUSH
58887: FOR_TO
58888: IFFALSE 58935
// begin hc_class = 20 ;
58890: LD_ADDR_OWVAR 28
58894: PUSH
58895: LD_INT 20
58897: ST_TO_ADDR
// hc_gallery =  ;
58898: LD_ADDR_OWVAR 33
58902: PUSH
58903: LD_STRING 
58905: ST_TO_ADDR
// animal := CreateHuman ;
58906: LD_ADDR_VAR 0 12
58910: PUSH
58911: CALL_OW 44
58915: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58916: LD_VAR 0 12
58920: PPUSH
58921: LD_VAR 0 9
58925: PPUSH
58926: LD_INT 0
58928: PPUSH
58929: CALL 60573 0 3
// end ;
58933: GO 58887
58935: POP
58936: POP
// end ;
58937: LD_VAR 0 10
58941: RET
// export function WantHeal ( sci , unit ) ; begin
58942: LD_INT 0
58944: PPUSH
// if GetTaskList ( sci ) > 0 then
58945: LD_VAR 0 1
58949: PPUSH
58950: CALL_OW 437
58954: PUSH
58955: LD_INT 0
58957: GREATER
58958: IFFALSE 59028
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58960: LD_VAR 0 1
58964: PPUSH
58965: CALL_OW 437
58969: PUSH
58970: LD_INT 1
58972: ARRAY
58973: PUSH
58974: LD_INT 1
58976: ARRAY
58977: PUSH
58978: LD_STRING l
58980: EQUAL
58981: PUSH
58982: LD_VAR 0 1
58986: PPUSH
58987: CALL_OW 437
58991: PUSH
58992: LD_INT 1
58994: ARRAY
58995: PUSH
58996: LD_INT 4
58998: ARRAY
58999: PUSH
59000: LD_VAR 0 2
59004: EQUAL
59005: AND
59006: IFFALSE 59018
// result := true else
59008: LD_ADDR_VAR 0 3
59012: PUSH
59013: LD_INT 1
59015: ST_TO_ADDR
59016: GO 59026
// result := false ;
59018: LD_ADDR_VAR 0 3
59022: PUSH
59023: LD_INT 0
59025: ST_TO_ADDR
// end else
59026: GO 59036
// result := false ;
59028: LD_ADDR_VAR 0 3
59032: PUSH
59033: LD_INT 0
59035: ST_TO_ADDR
// end ;
59036: LD_VAR 0 3
59040: RET
// export function HealTarget ( sci ) ; begin
59041: LD_INT 0
59043: PPUSH
// if not sci then
59044: LD_VAR 0 1
59048: NOT
59049: IFFALSE 59053
// exit ;
59051: GO 59118
// result := 0 ;
59053: LD_ADDR_VAR 0 2
59057: PUSH
59058: LD_INT 0
59060: ST_TO_ADDR
// if GetTaskList ( sci ) then
59061: LD_VAR 0 1
59065: PPUSH
59066: CALL_OW 437
59070: IFFALSE 59118
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59072: LD_VAR 0 1
59076: PPUSH
59077: CALL_OW 437
59081: PUSH
59082: LD_INT 1
59084: ARRAY
59085: PUSH
59086: LD_INT 1
59088: ARRAY
59089: PUSH
59090: LD_STRING l
59092: EQUAL
59093: IFFALSE 59118
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59095: LD_ADDR_VAR 0 2
59099: PUSH
59100: LD_VAR 0 1
59104: PPUSH
59105: CALL_OW 437
59109: PUSH
59110: LD_INT 1
59112: ARRAY
59113: PUSH
59114: LD_INT 4
59116: ARRAY
59117: ST_TO_ADDR
// end ;
59118: LD_VAR 0 2
59122: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59123: LD_INT 0
59125: PPUSH
59126: PPUSH
59127: PPUSH
59128: PPUSH
// if not base_units then
59129: LD_VAR 0 1
59133: NOT
59134: IFFALSE 59138
// exit ;
59136: GO 59225
// result := false ;
59138: LD_ADDR_VAR 0 2
59142: PUSH
59143: LD_INT 0
59145: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59146: LD_ADDR_VAR 0 5
59150: PUSH
59151: LD_VAR 0 1
59155: PPUSH
59156: LD_INT 21
59158: PUSH
59159: LD_INT 3
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PPUSH
59166: CALL_OW 72
59170: ST_TO_ADDR
// if not tmp then
59171: LD_VAR 0 5
59175: NOT
59176: IFFALSE 59180
// exit ;
59178: GO 59225
// for i in tmp do
59180: LD_ADDR_VAR 0 3
59184: PUSH
59185: LD_VAR 0 5
59189: PUSH
59190: FOR_IN
59191: IFFALSE 59223
// begin result := EnemyInRange ( i , 22 ) ;
59193: LD_ADDR_VAR 0 2
59197: PUSH
59198: LD_VAR 0 3
59202: PPUSH
59203: LD_INT 22
59205: PPUSH
59206: CALL 57461 0 2
59210: ST_TO_ADDR
// if result then
59211: LD_VAR 0 2
59215: IFFALSE 59221
// exit ;
59217: POP
59218: POP
59219: GO 59225
// end ;
59221: GO 59190
59223: POP
59224: POP
// end ;
59225: LD_VAR 0 2
59229: RET
// export function FilterByTag ( units , tag ) ; begin
59230: LD_INT 0
59232: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59233: LD_ADDR_VAR 0 3
59237: PUSH
59238: LD_VAR 0 1
59242: PPUSH
59243: LD_INT 120
59245: PUSH
59246: LD_VAR 0 2
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PPUSH
59255: CALL_OW 72
59259: ST_TO_ADDR
// end ;
59260: LD_VAR 0 3
59264: RET
// export function IsDriver ( un ) ; begin
59265: LD_INT 0
59267: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59268: LD_ADDR_VAR 0 2
59272: PUSH
59273: LD_VAR 0 1
59277: PUSH
59278: LD_INT 55
59280: PUSH
59281: EMPTY
59282: LIST
59283: PPUSH
59284: CALL_OW 69
59288: IN
59289: ST_TO_ADDR
// end ;
59290: LD_VAR 0 2
59294: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59295: LD_INT 0
59297: PPUSH
59298: PPUSH
// list := [ ] ;
59299: LD_ADDR_VAR 0 5
59303: PUSH
59304: EMPTY
59305: ST_TO_ADDR
// case d of 0 :
59306: LD_VAR 0 3
59310: PUSH
59311: LD_INT 0
59313: DOUBLE
59314: EQUAL
59315: IFTRUE 59319
59317: GO 59452
59319: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59320: LD_ADDR_VAR 0 5
59324: PUSH
59325: LD_VAR 0 1
59329: PUSH
59330: LD_INT 4
59332: MINUS
59333: PUSH
59334: LD_VAR 0 2
59338: PUSH
59339: LD_INT 4
59341: MINUS
59342: PUSH
59343: LD_INT 2
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: LIST
59350: PUSH
59351: LD_VAR 0 1
59355: PUSH
59356: LD_INT 3
59358: MINUS
59359: PUSH
59360: LD_VAR 0 2
59364: PUSH
59365: LD_INT 1
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: LIST
59372: PUSH
59373: LD_VAR 0 1
59377: PUSH
59378: LD_INT 4
59380: PLUS
59381: PUSH
59382: LD_VAR 0 2
59386: PUSH
59387: LD_INT 4
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: LIST
59394: PUSH
59395: LD_VAR 0 1
59399: PUSH
59400: LD_INT 3
59402: PLUS
59403: PUSH
59404: LD_VAR 0 2
59408: PUSH
59409: LD_INT 3
59411: PLUS
59412: PUSH
59413: LD_INT 5
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: LIST
59420: PUSH
59421: LD_VAR 0 1
59425: PUSH
59426: LD_VAR 0 2
59430: PUSH
59431: LD_INT 4
59433: PLUS
59434: PUSH
59435: LD_INT 0
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: LIST
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: ST_TO_ADDR
// end ; 1 :
59450: GO 60150
59452: LD_INT 1
59454: DOUBLE
59455: EQUAL
59456: IFTRUE 59460
59458: GO 59593
59460: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59461: LD_ADDR_VAR 0 5
59465: PUSH
59466: LD_VAR 0 1
59470: PUSH
59471: LD_VAR 0 2
59475: PUSH
59476: LD_INT 4
59478: MINUS
59479: PUSH
59480: LD_INT 3
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: LIST
59487: PUSH
59488: LD_VAR 0 1
59492: PUSH
59493: LD_INT 3
59495: MINUS
59496: PUSH
59497: LD_VAR 0 2
59501: PUSH
59502: LD_INT 3
59504: MINUS
59505: PUSH
59506: LD_INT 2
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: LIST
59513: PUSH
59514: LD_VAR 0 1
59518: PUSH
59519: LD_INT 4
59521: MINUS
59522: PUSH
59523: LD_VAR 0 2
59527: PUSH
59528: LD_INT 1
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: LIST
59535: PUSH
59536: LD_VAR 0 1
59540: PUSH
59541: LD_VAR 0 2
59545: PUSH
59546: LD_INT 3
59548: PLUS
59549: PUSH
59550: LD_INT 0
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: LIST
59557: PUSH
59558: LD_VAR 0 1
59562: PUSH
59563: LD_INT 4
59565: PLUS
59566: PUSH
59567: LD_VAR 0 2
59571: PUSH
59572: LD_INT 4
59574: PLUS
59575: PUSH
59576: LD_INT 5
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: LIST
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: ST_TO_ADDR
// end ; 2 :
59591: GO 60150
59593: LD_INT 2
59595: DOUBLE
59596: EQUAL
59597: IFTRUE 59601
59599: GO 59730
59601: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59602: LD_ADDR_VAR 0 5
59606: PUSH
59607: LD_VAR 0 1
59611: PUSH
59612: LD_VAR 0 2
59616: PUSH
59617: LD_INT 3
59619: MINUS
59620: PUSH
59621: LD_INT 3
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: LIST
59628: PUSH
59629: LD_VAR 0 1
59633: PUSH
59634: LD_INT 4
59636: PLUS
59637: PUSH
59638: LD_VAR 0 2
59642: PUSH
59643: LD_INT 4
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: LIST
59650: PUSH
59651: LD_VAR 0 1
59655: PUSH
59656: LD_VAR 0 2
59660: PUSH
59661: LD_INT 4
59663: PLUS
59664: PUSH
59665: LD_INT 0
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: LIST
59672: PUSH
59673: LD_VAR 0 1
59677: PUSH
59678: LD_INT 3
59680: MINUS
59681: PUSH
59682: LD_VAR 0 2
59686: PUSH
59687: LD_INT 1
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: LIST
59694: PUSH
59695: LD_VAR 0 1
59699: PUSH
59700: LD_INT 4
59702: MINUS
59703: PUSH
59704: LD_VAR 0 2
59708: PUSH
59709: LD_INT 4
59711: MINUS
59712: PUSH
59713: LD_INT 2
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: LIST
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: ST_TO_ADDR
// end ; 3 :
59728: GO 60150
59730: LD_INT 3
59732: DOUBLE
59733: EQUAL
59734: IFTRUE 59738
59736: GO 59871
59738: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59739: LD_ADDR_VAR 0 5
59743: PUSH
59744: LD_VAR 0 1
59748: PUSH
59749: LD_INT 3
59751: PLUS
59752: PUSH
59753: LD_VAR 0 2
59757: PUSH
59758: LD_INT 4
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: LIST
59765: PUSH
59766: LD_VAR 0 1
59770: PUSH
59771: LD_INT 4
59773: PLUS
59774: PUSH
59775: LD_VAR 0 2
59779: PUSH
59780: LD_INT 4
59782: PLUS
59783: PUSH
59784: LD_INT 5
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: LIST
59791: PUSH
59792: LD_VAR 0 1
59796: PUSH
59797: LD_INT 4
59799: MINUS
59800: PUSH
59801: LD_VAR 0 2
59805: PUSH
59806: LD_INT 1
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: LIST
59813: PUSH
59814: LD_VAR 0 1
59818: PUSH
59819: LD_VAR 0 2
59823: PUSH
59824: LD_INT 4
59826: MINUS
59827: PUSH
59828: LD_INT 3
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: LIST
59835: PUSH
59836: LD_VAR 0 1
59840: PUSH
59841: LD_INT 3
59843: MINUS
59844: PUSH
59845: LD_VAR 0 2
59849: PUSH
59850: LD_INT 3
59852: MINUS
59853: PUSH
59854: LD_INT 2
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: LIST
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: ST_TO_ADDR
// end ; 4 :
59869: GO 60150
59871: LD_INT 4
59873: DOUBLE
59874: EQUAL
59875: IFTRUE 59879
59877: GO 60012
59879: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59880: LD_ADDR_VAR 0 5
59884: PUSH
59885: LD_VAR 0 1
59889: PUSH
59890: LD_VAR 0 2
59894: PUSH
59895: LD_INT 4
59897: PLUS
59898: PUSH
59899: LD_INT 0
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: LIST
59906: PUSH
59907: LD_VAR 0 1
59911: PUSH
59912: LD_INT 3
59914: PLUS
59915: PUSH
59916: LD_VAR 0 2
59920: PUSH
59921: LD_INT 3
59923: PLUS
59924: PUSH
59925: LD_INT 5
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: LIST
59932: PUSH
59933: LD_VAR 0 1
59937: PUSH
59938: LD_INT 4
59940: PLUS
59941: PUSH
59942: LD_VAR 0 2
59946: PUSH
59947: LD_INT 4
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: LIST
59954: PUSH
59955: LD_VAR 0 1
59959: PUSH
59960: LD_VAR 0 2
59964: PUSH
59965: LD_INT 3
59967: MINUS
59968: PUSH
59969: LD_INT 3
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: LIST
59976: PUSH
59977: LD_VAR 0 1
59981: PUSH
59982: LD_INT 4
59984: MINUS
59985: PUSH
59986: LD_VAR 0 2
59990: PUSH
59991: LD_INT 4
59993: MINUS
59994: PUSH
59995: LD_INT 2
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: LIST
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: ST_TO_ADDR
// end ; 5 :
60010: GO 60150
60012: LD_INT 5
60014: DOUBLE
60015: EQUAL
60016: IFTRUE 60020
60018: GO 60149
60020: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60021: LD_ADDR_VAR 0 5
60025: PUSH
60026: LD_VAR 0 1
60030: PUSH
60031: LD_INT 4
60033: MINUS
60034: PUSH
60035: LD_VAR 0 2
60039: PUSH
60040: LD_INT 1
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: LIST
60047: PUSH
60048: LD_VAR 0 1
60052: PUSH
60053: LD_VAR 0 2
60057: PUSH
60058: LD_INT 4
60060: MINUS
60061: PUSH
60062: LD_INT 3
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: LIST
60069: PUSH
60070: LD_VAR 0 1
60074: PUSH
60075: LD_INT 4
60077: PLUS
60078: PUSH
60079: LD_VAR 0 2
60083: PUSH
60084: LD_INT 4
60086: PLUS
60087: PUSH
60088: LD_INT 5
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: LIST
60095: PUSH
60096: LD_VAR 0 1
60100: PUSH
60101: LD_INT 3
60103: PLUS
60104: PUSH
60105: LD_VAR 0 2
60109: PUSH
60110: LD_INT 4
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: LIST
60117: PUSH
60118: LD_VAR 0 1
60122: PUSH
60123: LD_VAR 0 2
60127: PUSH
60128: LD_INT 3
60130: PLUS
60131: PUSH
60132: LD_INT 0
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: LIST
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: ST_TO_ADDR
// end ; end ;
60147: GO 60150
60149: POP
// result := list ;
60150: LD_ADDR_VAR 0 4
60154: PUSH
60155: LD_VAR 0 5
60159: ST_TO_ADDR
// end ;
60160: LD_VAR 0 4
60164: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60165: LD_INT 0
60167: PPUSH
60168: PPUSH
60169: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60170: LD_VAR 0 1
60174: NOT
60175: PUSH
60176: LD_VAR 0 2
60180: PUSH
60181: LD_INT 1
60183: PUSH
60184: LD_INT 2
60186: PUSH
60187: LD_INT 3
60189: PUSH
60190: LD_INT 4
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: IN
60199: NOT
60200: OR
60201: IFFALSE 60205
// exit ;
60203: GO 60297
// tmp := [ ] ;
60205: LD_ADDR_VAR 0 5
60209: PUSH
60210: EMPTY
60211: ST_TO_ADDR
// for i in units do
60212: LD_ADDR_VAR 0 4
60216: PUSH
60217: LD_VAR 0 1
60221: PUSH
60222: FOR_IN
60223: IFFALSE 60266
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60225: LD_ADDR_VAR 0 5
60229: PUSH
60230: LD_VAR 0 5
60234: PPUSH
60235: LD_VAR 0 5
60239: PUSH
60240: LD_INT 1
60242: PLUS
60243: PPUSH
60244: LD_VAR 0 4
60248: PPUSH
60249: LD_VAR 0 2
60253: PPUSH
60254: CALL_OW 259
60258: PPUSH
60259: CALL_OW 2
60263: ST_TO_ADDR
60264: GO 60222
60266: POP
60267: POP
// if not tmp then
60268: LD_VAR 0 5
60272: NOT
60273: IFFALSE 60277
// exit ;
60275: GO 60297
// result := SortListByListDesc ( units , tmp ) ;
60277: LD_ADDR_VAR 0 3
60281: PUSH
60282: LD_VAR 0 1
60286: PPUSH
60287: LD_VAR 0 5
60291: PPUSH
60292: CALL_OW 77
60296: ST_TO_ADDR
// end ;
60297: LD_VAR 0 3
60301: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60302: LD_INT 0
60304: PPUSH
60305: PPUSH
60306: PPUSH
// result := false ;
60307: LD_ADDR_VAR 0 3
60311: PUSH
60312: LD_INT 0
60314: ST_TO_ADDR
// x := GetX ( building ) ;
60315: LD_ADDR_VAR 0 4
60319: PUSH
60320: LD_VAR 0 2
60324: PPUSH
60325: CALL_OW 250
60329: ST_TO_ADDR
// y := GetY ( building ) ;
60330: LD_ADDR_VAR 0 5
60334: PUSH
60335: LD_VAR 0 2
60339: PPUSH
60340: CALL_OW 251
60344: ST_TO_ADDR
// if not building or not x or not y then
60345: LD_VAR 0 2
60349: NOT
60350: PUSH
60351: LD_VAR 0 4
60355: NOT
60356: OR
60357: PUSH
60358: LD_VAR 0 5
60362: NOT
60363: OR
60364: IFFALSE 60368
// exit ;
60366: GO 60460
// if GetTaskList ( unit ) then
60368: LD_VAR 0 1
60372: PPUSH
60373: CALL_OW 437
60377: IFFALSE 60460
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60379: LD_STRING e
60381: PUSH
60382: LD_VAR 0 1
60386: PPUSH
60387: CALL_OW 437
60391: PUSH
60392: LD_INT 1
60394: ARRAY
60395: PUSH
60396: LD_INT 1
60398: ARRAY
60399: EQUAL
60400: PUSH
60401: LD_VAR 0 4
60405: PUSH
60406: LD_VAR 0 1
60410: PPUSH
60411: CALL_OW 437
60415: PUSH
60416: LD_INT 1
60418: ARRAY
60419: PUSH
60420: LD_INT 2
60422: ARRAY
60423: EQUAL
60424: AND
60425: PUSH
60426: LD_VAR 0 5
60430: PUSH
60431: LD_VAR 0 1
60435: PPUSH
60436: CALL_OW 437
60440: PUSH
60441: LD_INT 1
60443: ARRAY
60444: PUSH
60445: LD_INT 3
60447: ARRAY
60448: EQUAL
60449: AND
60450: IFFALSE 60460
// result := true end ;
60452: LD_ADDR_VAR 0 3
60456: PUSH
60457: LD_INT 1
60459: ST_TO_ADDR
// end ;
60460: LD_VAR 0 3
60464: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60465: LD_INT 0
60467: PPUSH
// result := false ;
60468: LD_ADDR_VAR 0 4
60472: PUSH
60473: LD_INT 0
60475: ST_TO_ADDR
// if GetTaskList ( unit ) then
60476: LD_VAR 0 1
60480: PPUSH
60481: CALL_OW 437
60485: IFFALSE 60568
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60487: LD_STRING M
60489: PUSH
60490: LD_VAR 0 1
60494: PPUSH
60495: CALL_OW 437
60499: PUSH
60500: LD_INT 1
60502: ARRAY
60503: PUSH
60504: LD_INT 1
60506: ARRAY
60507: EQUAL
60508: PUSH
60509: LD_VAR 0 2
60513: PUSH
60514: LD_VAR 0 1
60518: PPUSH
60519: CALL_OW 437
60523: PUSH
60524: LD_INT 1
60526: ARRAY
60527: PUSH
60528: LD_INT 2
60530: ARRAY
60531: EQUAL
60532: AND
60533: PUSH
60534: LD_VAR 0 3
60538: PUSH
60539: LD_VAR 0 1
60543: PPUSH
60544: CALL_OW 437
60548: PUSH
60549: LD_INT 1
60551: ARRAY
60552: PUSH
60553: LD_INT 3
60555: ARRAY
60556: EQUAL
60557: AND
60558: IFFALSE 60568
// result := true ;
60560: LD_ADDR_VAR 0 4
60564: PUSH
60565: LD_INT 1
60567: ST_TO_ADDR
// end ; end ;
60568: LD_VAR 0 4
60572: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60573: LD_INT 0
60575: PPUSH
60576: PPUSH
60577: PPUSH
60578: PPUSH
// if not unit or not area then
60579: LD_VAR 0 1
60583: NOT
60584: PUSH
60585: LD_VAR 0 2
60589: NOT
60590: OR
60591: IFFALSE 60595
// exit ;
60593: GO 60759
// tmp := AreaToList ( area , i ) ;
60595: LD_ADDR_VAR 0 6
60599: PUSH
60600: LD_VAR 0 2
60604: PPUSH
60605: LD_VAR 0 5
60609: PPUSH
60610: CALL_OW 517
60614: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60615: LD_ADDR_VAR 0 5
60619: PUSH
60620: DOUBLE
60621: LD_INT 1
60623: DEC
60624: ST_TO_ADDR
60625: LD_VAR 0 6
60629: PUSH
60630: LD_INT 1
60632: ARRAY
60633: PUSH
60634: FOR_TO
60635: IFFALSE 60757
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60637: LD_ADDR_VAR 0 7
60641: PUSH
60642: LD_VAR 0 6
60646: PUSH
60647: LD_INT 1
60649: ARRAY
60650: PUSH
60651: LD_VAR 0 5
60655: ARRAY
60656: PUSH
60657: LD_VAR 0 6
60661: PUSH
60662: LD_INT 2
60664: ARRAY
60665: PUSH
60666: LD_VAR 0 5
60670: ARRAY
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60676: LD_VAR 0 7
60680: PUSH
60681: LD_INT 1
60683: ARRAY
60684: PPUSH
60685: LD_VAR 0 7
60689: PUSH
60690: LD_INT 2
60692: ARRAY
60693: PPUSH
60694: CALL_OW 428
60698: PUSH
60699: LD_INT 0
60701: EQUAL
60702: IFFALSE 60755
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60704: LD_VAR 0 1
60708: PPUSH
60709: LD_VAR 0 7
60713: PUSH
60714: LD_INT 1
60716: ARRAY
60717: PPUSH
60718: LD_VAR 0 7
60722: PUSH
60723: LD_INT 2
60725: ARRAY
60726: PPUSH
60727: LD_VAR 0 3
60731: PPUSH
60732: CALL_OW 48
// result := IsPlaced ( unit ) ;
60736: LD_ADDR_VAR 0 4
60740: PUSH
60741: LD_VAR 0 1
60745: PPUSH
60746: CALL_OW 305
60750: ST_TO_ADDR
// exit ;
60751: POP
60752: POP
60753: GO 60759
// end ; end ;
60755: GO 60634
60757: POP
60758: POP
// end ;
60759: LD_VAR 0 4
60763: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60764: LD_INT 0
60766: PPUSH
60767: PPUSH
60768: PPUSH
// if not side or side > 8 then
60769: LD_VAR 0 1
60773: NOT
60774: PUSH
60775: LD_VAR 0 1
60779: PUSH
60780: LD_INT 8
60782: GREATER
60783: OR
60784: IFFALSE 60788
// exit ;
60786: GO 60975
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60788: LD_ADDR_VAR 0 4
60792: PUSH
60793: LD_INT 22
60795: PUSH
60796: LD_VAR 0 1
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 21
60807: PUSH
60808: LD_INT 3
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PPUSH
60819: CALL_OW 69
60823: ST_TO_ADDR
// if not tmp then
60824: LD_VAR 0 4
60828: NOT
60829: IFFALSE 60833
// exit ;
60831: GO 60975
// enable_addtolog := true ;
60833: LD_ADDR_OWVAR 81
60837: PUSH
60838: LD_INT 1
60840: ST_TO_ADDR
// AddToLog ( [ ) ;
60841: LD_STRING [
60843: PPUSH
60844: CALL_OW 561
// for i in tmp do
60848: LD_ADDR_VAR 0 3
60852: PUSH
60853: LD_VAR 0 4
60857: PUSH
60858: FOR_IN
60859: IFFALSE 60966
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60861: LD_STRING [
60863: PUSH
60864: LD_VAR 0 3
60868: PPUSH
60869: CALL_OW 266
60873: STR
60874: PUSH
60875: LD_STRING , 
60877: STR
60878: PUSH
60879: LD_VAR 0 3
60883: PPUSH
60884: CALL_OW 250
60888: STR
60889: PUSH
60890: LD_STRING , 
60892: STR
60893: PUSH
60894: LD_VAR 0 3
60898: PPUSH
60899: CALL_OW 251
60903: STR
60904: PUSH
60905: LD_STRING , 
60907: STR
60908: PUSH
60909: LD_VAR 0 3
60913: PPUSH
60914: CALL_OW 254
60918: STR
60919: PUSH
60920: LD_STRING , 
60922: STR
60923: PUSH
60924: LD_VAR 0 3
60928: PPUSH
60929: LD_INT 1
60931: PPUSH
60932: CALL_OW 268
60936: STR
60937: PUSH
60938: LD_STRING , 
60940: STR
60941: PUSH
60942: LD_VAR 0 3
60946: PPUSH
60947: LD_INT 2
60949: PPUSH
60950: CALL_OW 268
60954: STR
60955: PUSH
60956: LD_STRING ],
60958: STR
60959: PPUSH
60960: CALL_OW 561
// end ;
60964: GO 60858
60966: POP
60967: POP
// AddToLog ( ]; ) ;
60968: LD_STRING ];
60970: PPUSH
60971: CALL_OW 561
// end ;
60975: LD_VAR 0 2
60979: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60980: LD_INT 0
60982: PPUSH
60983: PPUSH
60984: PPUSH
60985: PPUSH
60986: PPUSH
// if not area or not rate or not max then
60987: LD_VAR 0 1
60991: NOT
60992: PUSH
60993: LD_VAR 0 2
60997: NOT
60998: OR
60999: PUSH
61000: LD_VAR 0 4
61004: NOT
61005: OR
61006: IFFALSE 61010
// exit ;
61008: GO 61199
// while 1 do
61010: LD_INT 1
61012: IFFALSE 61199
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61014: LD_ADDR_VAR 0 9
61018: PUSH
61019: LD_VAR 0 1
61023: PPUSH
61024: LD_INT 1
61026: PPUSH
61027: CALL_OW 287
61031: PUSH
61032: LD_INT 10
61034: MUL
61035: ST_TO_ADDR
// r := rate / 10 ;
61036: LD_ADDR_VAR 0 7
61040: PUSH
61041: LD_VAR 0 2
61045: PUSH
61046: LD_INT 10
61048: DIVREAL
61049: ST_TO_ADDR
// time := 1 1$00 ;
61050: LD_ADDR_VAR 0 8
61054: PUSH
61055: LD_INT 2100
61057: ST_TO_ADDR
// if amount < min then
61058: LD_VAR 0 9
61062: PUSH
61063: LD_VAR 0 3
61067: LESS
61068: IFFALSE 61086
// r := r * 2 else
61070: LD_ADDR_VAR 0 7
61074: PUSH
61075: LD_VAR 0 7
61079: PUSH
61080: LD_INT 2
61082: MUL
61083: ST_TO_ADDR
61084: GO 61112
// if amount > max then
61086: LD_VAR 0 9
61090: PUSH
61091: LD_VAR 0 4
61095: GREATER
61096: IFFALSE 61112
// r := r / 2 ;
61098: LD_ADDR_VAR 0 7
61102: PUSH
61103: LD_VAR 0 7
61107: PUSH
61108: LD_INT 2
61110: DIVREAL
61111: ST_TO_ADDR
// time := time / r ;
61112: LD_ADDR_VAR 0 8
61116: PUSH
61117: LD_VAR 0 8
61121: PUSH
61122: LD_VAR 0 7
61126: DIVREAL
61127: ST_TO_ADDR
// if time < 0 then
61128: LD_VAR 0 8
61132: PUSH
61133: LD_INT 0
61135: LESS
61136: IFFALSE 61153
// time := time * - 1 ;
61138: LD_ADDR_VAR 0 8
61142: PUSH
61143: LD_VAR 0 8
61147: PUSH
61148: LD_INT 1
61150: NEG
61151: MUL
61152: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61153: LD_VAR 0 8
61157: PUSH
61158: LD_INT 35
61160: PPUSH
61161: LD_INT 875
61163: PPUSH
61164: CALL_OW 12
61168: PLUS
61169: PPUSH
61170: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61174: LD_INT 1
61176: PPUSH
61177: LD_INT 5
61179: PPUSH
61180: CALL_OW 12
61184: PPUSH
61185: LD_VAR 0 1
61189: PPUSH
61190: LD_INT 1
61192: PPUSH
61193: CALL_OW 55
// end ;
61197: GO 61010
// end ;
61199: LD_VAR 0 5
61203: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61204: LD_INT 0
61206: PPUSH
61207: PPUSH
61208: PPUSH
61209: PPUSH
61210: PPUSH
61211: PPUSH
61212: PPUSH
61213: PPUSH
// if not turrets or not factories then
61214: LD_VAR 0 1
61218: NOT
61219: PUSH
61220: LD_VAR 0 2
61224: NOT
61225: OR
61226: IFFALSE 61230
// exit ;
61228: GO 61537
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61230: LD_ADDR_VAR 0 10
61234: PUSH
61235: LD_INT 5
61237: PUSH
61238: LD_INT 6
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 2
61247: PUSH
61248: LD_INT 4
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 3
61257: PUSH
61258: LD_INT 5
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 24
61272: PUSH
61273: LD_INT 25
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 23
61282: PUSH
61283: LD_INT 27
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 42
61296: PUSH
61297: LD_INT 43
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 44
61306: PUSH
61307: LD_INT 46
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 45
61316: PUSH
61317: LD_INT 47
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: LIST
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: LIST
61333: ST_TO_ADDR
// result := [ ] ;
61334: LD_ADDR_VAR 0 3
61338: PUSH
61339: EMPTY
61340: ST_TO_ADDR
// for i in turrets do
61341: LD_ADDR_VAR 0 4
61345: PUSH
61346: LD_VAR 0 1
61350: PUSH
61351: FOR_IN
61352: IFFALSE 61535
// begin nat := GetNation ( i ) ;
61354: LD_ADDR_VAR 0 7
61358: PUSH
61359: LD_VAR 0 4
61363: PPUSH
61364: CALL_OW 248
61368: ST_TO_ADDR
// weapon := 0 ;
61369: LD_ADDR_VAR 0 8
61373: PUSH
61374: LD_INT 0
61376: ST_TO_ADDR
// if not nat then
61377: LD_VAR 0 7
61381: NOT
61382: IFFALSE 61386
// continue ;
61384: GO 61351
// for j in list [ nat ] do
61386: LD_ADDR_VAR 0 5
61390: PUSH
61391: LD_VAR 0 10
61395: PUSH
61396: LD_VAR 0 7
61400: ARRAY
61401: PUSH
61402: FOR_IN
61403: IFFALSE 61444
// if GetBWeapon ( i ) = j [ 1 ] then
61405: LD_VAR 0 4
61409: PPUSH
61410: CALL_OW 269
61414: PUSH
61415: LD_VAR 0 5
61419: PUSH
61420: LD_INT 1
61422: ARRAY
61423: EQUAL
61424: IFFALSE 61442
// begin weapon := j [ 2 ] ;
61426: LD_ADDR_VAR 0 8
61430: PUSH
61431: LD_VAR 0 5
61435: PUSH
61436: LD_INT 2
61438: ARRAY
61439: ST_TO_ADDR
// break ;
61440: GO 61444
// end ;
61442: GO 61402
61444: POP
61445: POP
// if not weapon then
61446: LD_VAR 0 8
61450: NOT
61451: IFFALSE 61455
// continue ;
61453: GO 61351
// for k in factories do
61455: LD_ADDR_VAR 0 6
61459: PUSH
61460: LD_VAR 0 2
61464: PUSH
61465: FOR_IN
61466: IFFALSE 61531
// begin weapons := AvailableWeaponList ( k ) ;
61468: LD_ADDR_VAR 0 9
61472: PUSH
61473: LD_VAR 0 6
61477: PPUSH
61478: CALL_OW 478
61482: ST_TO_ADDR
// if not weapons then
61483: LD_VAR 0 9
61487: NOT
61488: IFFALSE 61492
// continue ;
61490: GO 61465
// if weapon in weapons then
61492: LD_VAR 0 8
61496: PUSH
61497: LD_VAR 0 9
61501: IN
61502: IFFALSE 61529
// begin result := [ i , weapon ] ;
61504: LD_ADDR_VAR 0 3
61508: PUSH
61509: LD_VAR 0 4
61513: PUSH
61514: LD_VAR 0 8
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: ST_TO_ADDR
// exit ;
61523: POP
61524: POP
61525: POP
61526: POP
61527: GO 61537
// end ; end ;
61529: GO 61465
61531: POP
61532: POP
// end ;
61533: GO 61351
61535: POP
61536: POP
// end ;
61537: LD_VAR 0 3
61541: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61542: LD_INT 0
61544: PPUSH
// if not side or side > 8 then
61545: LD_VAR 0 3
61549: NOT
61550: PUSH
61551: LD_VAR 0 3
61555: PUSH
61556: LD_INT 8
61558: GREATER
61559: OR
61560: IFFALSE 61564
// exit ;
61562: GO 61623
// if not range then
61564: LD_VAR 0 4
61568: NOT
61569: IFFALSE 61580
// range := - 12 ;
61571: LD_ADDR_VAR 0 4
61575: PUSH
61576: LD_INT 12
61578: NEG
61579: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61580: LD_VAR 0 1
61584: PPUSH
61585: LD_VAR 0 2
61589: PPUSH
61590: LD_VAR 0 3
61594: PPUSH
61595: LD_VAR 0 4
61599: PPUSH
61600: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61604: LD_VAR 0 1
61608: PPUSH
61609: LD_VAR 0 2
61613: PPUSH
61614: LD_VAR 0 3
61618: PPUSH
61619: CALL_OW 331
// end ;
61623: LD_VAR 0 5
61627: RET
// export function Video ( mode ) ; begin
61628: LD_INT 0
61630: PPUSH
// ingame_video = mode ;
61631: LD_ADDR_OWVAR 52
61635: PUSH
61636: LD_VAR 0 1
61640: ST_TO_ADDR
// interface_hidden = mode ;
61641: LD_ADDR_OWVAR 54
61645: PUSH
61646: LD_VAR 0 1
61650: ST_TO_ADDR
// end ;
61651: LD_VAR 0 2
61655: RET
// export function Join ( array , element ) ; begin
61656: LD_INT 0
61658: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61659: LD_ADDR_VAR 0 3
61663: PUSH
61664: LD_VAR 0 1
61668: PPUSH
61669: LD_VAR 0 1
61673: PUSH
61674: LD_INT 1
61676: PLUS
61677: PPUSH
61678: LD_VAR 0 2
61682: PPUSH
61683: CALL_OW 1
61687: ST_TO_ADDR
// end ;
61688: LD_VAR 0 3
61692: RET
// export function JoinUnion ( array , element ) ; begin
61693: LD_INT 0
61695: PPUSH
// result := array union element ;
61696: LD_ADDR_VAR 0 3
61700: PUSH
61701: LD_VAR 0 1
61705: PUSH
61706: LD_VAR 0 2
61710: UNION
61711: ST_TO_ADDR
// end ;
61712: LD_VAR 0 3
61716: RET
// export function GetBehemoths ( side ) ; begin
61717: LD_INT 0
61719: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61720: LD_ADDR_VAR 0 2
61724: PUSH
61725: LD_INT 22
61727: PUSH
61728: LD_VAR 0 1
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 31
61739: PUSH
61740: LD_INT 25
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PPUSH
61751: CALL_OW 69
61755: ST_TO_ADDR
// end ;
61756: LD_VAR 0 2
61760: RET
// export function Shuffle ( array ) ; var i , index ; begin
61761: LD_INT 0
61763: PPUSH
61764: PPUSH
61765: PPUSH
// result := [ ] ;
61766: LD_ADDR_VAR 0 2
61770: PUSH
61771: EMPTY
61772: ST_TO_ADDR
// if not array then
61773: LD_VAR 0 1
61777: NOT
61778: IFFALSE 61782
// exit ;
61780: GO 61881
// Randomize ;
61782: CALL_OW 10
// for i = array downto 1 do
61786: LD_ADDR_VAR 0 3
61790: PUSH
61791: DOUBLE
61792: LD_VAR 0 1
61796: INC
61797: ST_TO_ADDR
61798: LD_INT 1
61800: PUSH
61801: FOR_DOWNTO
61802: IFFALSE 61879
// begin index := rand ( 1 , array ) ;
61804: LD_ADDR_VAR 0 4
61808: PUSH
61809: LD_INT 1
61811: PPUSH
61812: LD_VAR 0 1
61816: PPUSH
61817: CALL_OW 12
61821: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61822: LD_ADDR_VAR 0 2
61826: PUSH
61827: LD_VAR 0 2
61831: PPUSH
61832: LD_VAR 0 2
61836: PUSH
61837: LD_INT 1
61839: PLUS
61840: PPUSH
61841: LD_VAR 0 1
61845: PUSH
61846: LD_VAR 0 4
61850: ARRAY
61851: PPUSH
61852: CALL_OW 2
61856: ST_TO_ADDR
// array := Delete ( array , index ) ;
61857: LD_ADDR_VAR 0 1
61861: PUSH
61862: LD_VAR 0 1
61866: PPUSH
61867: LD_VAR 0 4
61871: PPUSH
61872: CALL_OW 3
61876: ST_TO_ADDR
// end ;
61877: GO 61801
61879: POP
61880: POP
// end ;
61881: LD_VAR 0 2
61885: RET
// export function GetBaseMaterials ( base ) ; begin
61886: LD_INT 0
61888: PPUSH
// result := [ 0 , 0 , 0 ] ;
61889: LD_ADDR_VAR 0 2
61893: PUSH
61894: LD_INT 0
61896: PUSH
61897: LD_INT 0
61899: PUSH
61900: LD_INT 0
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: LIST
61907: ST_TO_ADDR
// if not base then
61908: LD_VAR 0 1
61912: NOT
61913: IFFALSE 61917
// exit ;
61915: GO 61966
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61917: LD_ADDR_VAR 0 2
61921: PUSH
61922: LD_VAR 0 1
61926: PPUSH
61927: LD_INT 1
61929: PPUSH
61930: CALL_OW 275
61934: PUSH
61935: LD_VAR 0 1
61939: PPUSH
61940: LD_INT 2
61942: PPUSH
61943: CALL_OW 275
61947: PUSH
61948: LD_VAR 0 1
61952: PPUSH
61953: LD_INT 3
61955: PPUSH
61956: CALL_OW 275
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: LIST
61965: ST_TO_ADDR
// end ;
61966: LD_VAR 0 2
61970: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61971: LD_INT 0
61973: PPUSH
61974: PPUSH
// result := array ;
61975: LD_ADDR_VAR 0 3
61979: PUSH
61980: LD_VAR 0 1
61984: ST_TO_ADDR
// if size > 0 then
61985: LD_VAR 0 2
61989: PUSH
61990: LD_INT 0
61992: GREATER
61993: IFFALSE 62039
// for i := array downto size do
61995: LD_ADDR_VAR 0 4
61999: PUSH
62000: DOUBLE
62001: LD_VAR 0 1
62005: INC
62006: ST_TO_ADDR
62007: LD_VAR 0 2
62011: PUSH
62012: FOR_DOWNTO
62013: IFFALSE 62037
// result := Delete ( result , result ) ;
62015: LD_ADDR_VAR 0 3
62019: PUSH
62020: LD_VAR 0 3
62024: PPUSH
62025: LD_VAR 0 3
62029: PPUSH
62030: CALL_OW 3
62034: ST_TO_ADDR
62035: GO 62012
62037: POP
62038: POP
// end ;
62039: LD_VAR 0 3
62043: RET
// export function ComExit ( unit ) ; var tmp ; begin
62044: LD_INT 0
62046: PPUSH
62047: PPUSH
// if not IsInUnit ( unit ) then
62048: LD_VAR 0 1
62052: PPUSH
62053: CALL_OW 310
62057: NOT
62058: IFFALSE 62062
// exit ;
62060: GO 62122
// tmp := IsInUnit ( unit ) ;
62062: LD_ADDR_VAR 0 3
62066: PUSH
62067: LD_VAR 0 1
62071: PPUSH
62072: CALL_OW 310
62076: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62077: LD_VAR 0 3
62081: PPUSH
62082: CALL_OW 247
62086: PUSH
62087: LD_INT 2
62089: EQUAL
62090: IFFALSE 62103
// ComExitVehicle ( unit ) else
62092: LD_VAR 0 1
62096: PPUSH
62097: CALL_OW 121
62101: GO 62112
// ComExitBuilding ( unit ) ;
62103: LD_VAR 0 1
62107: PPUSH
62108: CALL_OW 122
// result := tmp ;
62112: LD_ADDR_VAR 0 2
62116: PUSH
62117: LD_VAR 0 3
62121: ST_TO_ADDR
// end ;
62122: LD_VAR 0 2
62126: RET
// export function ComExitAll ( units ) ; var i ; begin
62127: LD_INT 0
62129: PPUSH
62130: PPUSH
// if not units then
62131: LD_VAR 0 1
62135: NOT
62136: IFFALSE 62140
// exit ;
62138: GO 62166
// for i in units do
62140: LD_ADDR_VAR 0 3
62144: PUSH
62145: LD_VAR 0 1
62149: PUSH
62150: FOR_IN
62151: IFFALSE 62164
// ComExit ( i ) ;
62153: LD_VAR 0 3
62157: PPUSH
62158: CALL 62044 0 1
62162: GO 62150
62164: POP
62165: POP
// end ;
62166: LD_VAR 0 2
62170: RET
// export function ResetHc ; begin
62171: LD_INT 0
62173: PPUSH
// InitHc ;
62174: CALL_OW 19
// hc_importance := 0 ;
62178: LD_ADDR_OWVAR 32
62182: PUSH
62183: LD_INT 0
62185: ST_TO_ADDR
// end ;
62186: LD_VAR 0 1
62190: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62191: LD_INT 0
62193: PPUSH
62194: PPUSH
62195: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62196: LD_ADDR_VAR 0 6
62200: PUSH
62201: LD_VAR 0 1
62205: PUSH
62206: LD_VAR 0 3
62210: PLUS
62211: PUSH
62212: LD_INT 2
62214: DIV
62215: ST_TO_ADDR
// if _x < 0 then
62216: LD_VAR 0 6
62220: PUSH
62221: LD_INT 0
62223: LESS
62224: IFFALSE 62241
// _x := _x * - 1 ;
62226: LD_ADDR_VAR 0 6
62230: PUSH
62231: LD_VAR 0 6
62235: PUSH
62236: LD_INT 1
62238: NEG
62239: MUL
62240: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62241: LD_ADDR_VAR 0 7
62245: PUSH
62246: LD_VAR 0 2
62250: PUSH
62251: LD_VAR 0 4
62255: PLUS
62256: PUSH
62257: LD_INT 2
62259: DIV
62260: ST_TO_ADDR
// if _y < 0 then
62261: LD_VAR 0 7
62265: PUSH
62266: LD_INT 0
62268: LESS
62269: IFFALSE 62286
// _y := _y * - 1 ;
62271: LD_ADDR_VAR 0 7
62275: PUSH
62276: LD_VAR 0 7
62280: PUSH
62281: LD_INT 1
62283: NEG
62284: MUL
62285: ST_TO_ADDR
// result := [ _x , _y ] ;
62286: LD_ADDR_VAR 0 5
62290: PUSH
62291: LD_VAR 0 6
62295: PUSH
62296: LD_VAR 0 7
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: ST_TO_ADDR
// end ;
62305: LD_VAR 0 5
62309: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62310: LD_INT 0
62312: PPUSH
62313: PPUSH
62314: PPUSH
62315: PPUSH
// task := GetTaskList ( unit ) ;
62316: LD_ADDR_VAR 0 7
62320: PUSH
62321: LD_VAR 0 1
62325: PPUSH
62326: CALL_OW 437
62330: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62331: LD_VAR 0 7
62335: NOT
62336: PUSH
62337: LD_VAR 0 1
62341: PPUSH
62342: LD_VAR 0 2
62346: PPUSH
62347: CALL_OW 308
62351: NOT
62352: AND
62353: IFFALSE 62357
// exit ;
62355: GO 62475
// if IsInArea ( unit , area ) then
62357: LD_VAR 0 1
62361: PPUSH
62362: LD_VAR 0 2
62366: PPUSH
62367: CALL_OW 308
62371: IFFALSE 62389
// begin ComMoveToArea ( unit , goAway ) ;
62373: LD_VAR 0 1
62377: PPUSH
62378: LD_VAR 0 3
62382: PPUSH
62383: CALL_OW 113
// exit ;
62387: GO 62475
// end ; if task [ 1 ] [ 1 ] <> M then
62389: LD_VAR 0 7
62393: PUSH
62394: LD_INT 1
62396: ARRAY
62397: PUSH
62398: LD_INT 1
62400: ARRAY
62401: PUSH
62402: LD_STRING M
62404: NONEQUAL
62405: IFFALSE 62409
// exit ;
62407: GO 62475
// x := task [ 1 ] [ 2 ] ;
62409: LD_ADDR_VAR 0 5
62413: PUSH
62414: LD_VAR 0 7
62418: PUSH
62419: LD_INT 1
62421: ARRAY
62422: PUSH
62423: LD_INT 2
62425: ARRAY
62426: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62427: LD_ADDR_VAR 0 6
62431: PUSH
62432: LD_VAR 0 7
62436: PUSH
62437: LD_INT 1
62439: ARRAY
62440: PUSH
62441: LD_INT 3
62443: ARRAY
62444: ST_TO_ADDR
// if InArea ( x , y , area ) then
62445: LD_VAR 0 5
62449: PPUSH
62450: LD_VAR 0 6
62454: PPUSH
62455: LD_VAR 0 2
62459: PPUSH
62460: CALL_OW 309
62464: IFFALSE 62475
// ComStop ( unit ) ;
62466: LD_VAR 0 1
62470: PPUSH
62471: CALL_OW 141
// end ;
62475: LD_VAR 0 4
62479: RET
// export function Abs ( value ) ; begin
62480: LD_INT 0
62482: PPUSH
// result := value ;
62483: LD_ADDR_VAR 0 2
62487: PUSH
62488: LD_VAR 0 1
62492: ST_TO_ADDR
// if value < 0 then
62493: LD_VAR 0 1
62497: PUSH
62498: LD_INT 0
62500: LESS
62501: IFFALSE 62518
// result := value * - 1 ;
62503: LD_ADDR_VAR 0 2
62507: PUSH
62508: LD_VAR 0 1
62512: PUSH
62513: LD_INT 1
62515: NEG
62516: MUL
62517: ST_TO_ADDR
// end ;
62518: LD_VAR 0 2
62522: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62523: LD_INT 0
62525: PPUSH
62526: PPUSH
62527: PPUSH
62528: PPUSH
62529: PPUSH
62530: PPUSH
62531: PPUSH
62532: PPUSH
// if not unit or not building then
62533: LD_VAR 0 1
62537: NOT
62538: PUSH
62539: LD_VAR 0 2
62543: NOT
62544: OR
62545: IFFALSE 62549
// exit ;
62547: GO 62775
// x := GetX ( building ) ;
62549: LD_ADDR_VAR 0 4
62553: PUSH
62554: LD_VAR 0 2
62558: PPUSH
62559: CALL_OW 250
62563: ST_TO_ADDR
// y := GetY ( building ) ;
62564: LD_ADDR_VAR 0 6
62568: PUSH
62569: LD_VAR 0 2
62573: PPUSH
62574: CALL_OW 251
62578: ST_TO_ADDR
// d := GetDir ( building ) ;
62579: LD_ADDR_VAR 0 8
62583: PUSH
62584: LD_VAR 0 2
62588: PPUSH
62589: CALL_OW 254
62593: ST_TO_ADDR
// r := 4 ;
62594: LD_ADDR_VAR 0 9
62598: PUSH
62599: LD_INT 4
62601: ST_TO_ADDR
// for i := 1 to 5 do
62602: LD_ADDR_VAR 0 10
62606: PUSH
62607: DOUBLE
62608: LD_INT 1
62610: DEC
62611: ST_TO_ADDR
62612: LD_INT 5
62614: PUSH
62615: FOR_TO
62616: IFFALSE 62773
// begin _x := ShiftX ( x , d , r + i ) ;
62618: LD_ADDR_VAR 0 5
62622: PUSH
62623: LD_VAR 0 4
62627: PPUSH
62628: LD_VAR 0 8
62632: PPUSH
62633: LD_VAR 0 9
62637: PUSH
62638: LD_VAR 0 10
62642: PLUS
62643: PPUSH
62644: CALL_OW 272
62648: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62649: LD_ADDR_VAR 0 7
62653: PUSH
62654: LD_VAR 0 6
62658: PPUSH
62659: LD_VAR 0 8
62663: PPUSH
62664: LD_VAR 0 9
62668: PUSH
62669: LD_VAR 0 10
62673: PLUS
62674: PPUSH
62675: CALL_OW 273
62679: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62680: LD_VAR 0 5
62684: PPUSH
62685: LD_VAR 0 7
62689: PPUSH
62690: CALL_OW 488
62694: PUSH
62695: LD_VAR 0 5
62699: PPUSH
62700: LD_VAR 0 7
62704: PPUSH
62705: CALL_OW 428
62709: PPUSH
62710: CALL_OW 247
62714: PUSH
62715: LD_INT 3
62717: PUSH
62718: LD_INT 2
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: IN
62725: NOT
62726: AND
62727: IFFALSE 62771
// begin ComMoveXY ( unit , _x , _y ) ;
62729: LD_VAR 0 1
62733: PPUSH
62734: LD_VAR 0 5
62738: PPUSH
62739: LD_VAR 0 7
62743: PPUSH
62744: CALL_OW 111
// result := [ _x , _y ] ;
62748: LD_ADDR_VAR 0 3
62752: PUSH
62753: LD_VAR 0 5
62757: PUSH
62758: LD_VAR 0 7
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: ST_TO_ADDR
// exit ;
62767: POP
62768: POP
62769: GO 62775
// end ; end ;
62771: GO 62615
62773: POP
62774: POP
// end ;
62775: LD_VAR 0 3
62779: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62780: LD_INT 0
62782: PPUSH
62783: PPUSH
62784: PPUSH
// result := 0 ;
62785: LD_ADDR_VAR 0 3
62789: PUSH
62790: LD_INT 0
62792: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62793: LD_VAR 0 1
62797: PUSH
62798: LD_INT 0
62800: LESS
62801: PUSH
62802: LD_VAR 0 1
62806: PUSH
62807: LD_INT 8
62809: GREATER
62810: OR
62811: PUSH
62812: LD_VAR 0 2
62816: PUSH
62817: LD_INT 0
62819: LESS
62820: OR
62821: PUSH
62822: LD_VAR 0 2
62826: PUSH
62827: LD_INT 8
62829: GREATER
62830: OR
62831: IFFALSE 62835
// exit ;
62833: GO 62910
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62835: LD_ADDR_VAR 0 4
62839: PUSH
62840: LD_INT 22
62842: PUSH
62843: LD_VAR 0 2
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PPUSH
62852: CALL_OW 69
62856: PUSH
62857: FOR_IN
62858: IFFALSE 62908
// begin un := UnitShoot ( i ) ;
62860: LD_ADDR_VAR 0 5
62864: PUSH
62865: LD_VAR 0 4
62869: PPUSH
62870: CALL_OW 504
62874: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62875: LD_VAR 0 5
62879: PPUSH
62880: CALL_OW 255
62884: PUSH
62885: LD_VAR 0 1
62889: EQUAL
62890: IFFALSE 62906
// begin result := un ;
62892: LD_ADDR_VAR 0 3
62896: PUSH
62897: LD_VAR 0 5
62901: ST_TO_ADDR
// exit ;
62902: POP
62903: POP
62904: GO 62910
// end ; end ;
62906: GO 62857
62908: POP
62909: POP
// end ;
62910: LD_VAR 0 3
62914: RET
// export function GetCargoBay ( units ) ; begin
62915: LD_INT 0
62917: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62918: LD_ADDR_VAR 0 2
62922: PUSH
62923: LD_VAR 0 1
62927: PPUSH
62928: LD_INT 2
62930: PUSH
62931: LD_INT 34
62933: PUSH
62934: LD_INT 12
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 34
62943: PUSH
62944: LD_INT 51
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 34
62953: PUSH
62954: LD_INT 32
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 34
62963: PUSH
62964: LD_EXP 94
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: PPUSH
62980: CALL_OW 72
62984: ST_TO_ADDR
// end ;
62985: LD_VAR 0 2
62989: RET
// export function Negate ( value ) ; begin
62990: LD_INT 0
62992: PPUSH
// result := not value ;
62993: LD_ADDR_VAR 0 2
62997: PUSH
62998: LD_VAR 0 1
63002: NOT
63003: ST_TO_ADDR
// end ;
63004: LD_VAR 0 2
63008: RET
// export function Inc ( value ) ; begin
63009: LD_INT 0
63011: PPUSH
// result := value + 1 ;
63012: LD_ADDR_VAR 0 2
63016: PUSH
63017: LD_VAR 0 1
63021: PUSH
63022: LD_INT 1
63024: PLUS
63025: ST_TO_ADDR
// end ;
63026: LD_VAR 0 2
63030: RET
// export function Dec ( value ) ; begin
63031: LD_INT 0
63033: PPUSH
// result := value - 1 ;
63034: LD_ADDR_VAR 0 2
63038: PUSH
63039: LD_VAR 0 1
63043: PUSH
63044: LD_INT 1
63046: MINUS
63047: ST_TO_ADDR
// end ;
63048: LD_VAR 0 2
63052: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63053: LD_INT 0
63055: PPUSH
63056: PPUSH
63057: PPUSH
63058: PPUSH
63059: PPUSH
63060: PPUSH
63061: PPUSH
63062: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63063: LD_VAR 0 1
63067: PPUSH
63068: LD_VAR 0 2
63072: PPUSH
63073: CALL_OW 488
63077: NOT
63078: PUSH
63079: LD_VAR 0 3
63083: PPUSH
63084: LD_VAR 0 4
63088: PPUSH
63089: CALL_OW 488
63093: NOT
63094: OR
63095: IFFALSE 63108
// begin result := - 1 ;
63097: LD_ADDR_VAR 0 5
63101: PUSH
63102: LD_INT 1
63104: NEG
63105: ST_TO_ADDR
// exit ;
63106: GO 63343
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63108: LD_ADDR_VAR 0 12
63112: PUSH
63113: LD_VAR 0 1
63117: PPUSH
63118: LD_VAR 0 2
63122: PPUSH
63123: LD_VAR 0 3
63127: PPUSH
63128: LD_VAR 0 4
63132: PPUSH
63133: CALL 62191 0 4
63137: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63138: LD_ADDR_VAR 0 11
63142: PUSH
63143: LD_VAR 0 1
63147: PPUSH
63148: LD_VAR 0 2
63152: PPUSH
63153: LD_VAR 0 12
63157: PUSH
63158: LD_INT 1
63160: ARRAY
63161: PPUSH
63162: LD_VAR 0 12
63166: PUSH
63167: LD_INT 2
63169: ARRAY
63170: PPUSH
63171: CALL_OW 298
63175: ST_TO_ADDR
// distance := 9999 ;
63176: LD_ADDR_VAR 0 10
63180: PUSH
63181: LD_INT 9999
63183: ST_TO_ADDR
// for i := 0 to 5 do
63184: LD_ADDR_VAR 0 6
63188: PUSH
63189: DOUBLE
63190: LD_INT 0
63192: DEC
63193: ST_TO_ADDR
63194: LD_INT 5
63196: PUSH
63197: FOR_TO
63198: IFFALSE 63341
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63200: LD_ADDR_VAR 0 7
63204: PUSH
63205: LD_VAR 0 1
63209: PPUSH
63210: LD_VAR 0 6
63214: PPUSH
63215: LD_VAR 0 11
63219: PPUSH
63220: CALL_OW 272
63224: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63225: LD_ADDR_VAR 0 8
63229: PUSH
63230: LD_VAR 0 2
63234: PPUSH
63235: LD_VAR 0 6
63239: PPUSH
63240: LD_VAR 0 11
63244: PPUSH
63245: CALL_OW 273
63249: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63250: LD_VAR 0 7
63254: PPUSH
63255: LD_VAR 0 8
63259: PPUSH
63260: CALL_OW 488
63264: NOT
63265: IFFALSE 63269
// continue ;
63267: GO 63197
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63269: LD_ADDR_VAR 0 9
63273: PUSH
63274: LD_VAR 0 12
63278: PUSH
63279: LD_INT 1
63281: ARRAY
63282: PPUSH
63283: LD_VAR 0 12
63287: PUSH
63288: LD_INT 2
63290: ARRAY
63291: PPUSH
63292: LD_VAR 0 7
63296: PPUSH
63297: LD_VAR 0 8
63301: PPUSH
63302: CALL_OW 298
63306: ST_TO_ADDR
// if tmp < distance then
63307: LD_VAR 0 9
63311: PUSH
63312: LD_VAR 0 10
63316: LESS
63317: IFFALSE 63339
// begin result := i ;
63319: LD_ADDR_VAR 0 5
63323: PUSH
63324: LD_VAR 0 6
63328: ST_TO_ADDR
// distance := tmp ;
63329: LD_ADDR_VAR 0 10
63333: PUSH
63334: LD_VAR 0 9
63338: ST_TO_ADDR
// end ; end ;
63339: GO 63197
63341: POP
63342: POP
// end ;
63343: LD_VAR 0 5
63347: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63348: LD_INT 0
63350: PPUSH
63351: PPUSH
// if not driver or not IsInUnit ( driver ) then
63352: LD_VAR 0 1
63356: NOT
63357: PUSH
63358: LD_VAR 0 1
63362: PPUSH
63363: CALL_OW 310
63367: NOT
63368: OR
63369: IFFALSE 63373
// exit ;
63371: GO 63463
// vehicle := IsInUnit ( driver ) ;
63373: LD_ADDR_VAR 0 3
63377: PUSH
63378: LD_VAR 0 1
63382: PPUSH
63383: CALL_OW 310
63387: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63388: LD_VAR 0 1
63392: PPUSH
63393: LD_STRING \
63395: PUSH
63396: LD_INT 0
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: LD_INT 0
63404: PUSH
63405: LD_INT 0
63407: PUSH
63408: LD_INT 0
63410: PUSH
63411: LD_INT 0
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: PUSH
63423: LD_STRING E
63425: PUSH
63426: LD_INT 0
63428: PUSH
63429: LD_INT 0
63431: PUSH
63432: LD_VAR 0 3
63436: PUSH
63437: LD_INT 0
63439: PUSH
63440: LD_INT 0
63442: PUSH
63443: LD_INT 0
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PPUSH
63459: CALL_OW 446
// end ;
63463: LD_VAR 0 2
63467: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63468: LD_INT 0
63470: PPUSH
63471: PPUSH
// if not driver or not IsInUnit ( driver ) then
63472: LD_VAR 0 1
63476: NOT
63477: PUSH
63478: LD_VAR 0 1
63482: PPUSH
63483: CALL_OW 310
63487: NOT
63488: OR
63489: IFFALSE 63493
// exit ;
63491: GO 63583
// vehicle := IsInUnit ( driver ) ;
63493: LD_ADDR_VAR 0 3
63497: PUSH
63498: LD_VAR 0 1
63502: PPUSH
63503: CALL_OW 310
63507: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63508: LD_VAR 0 1
63512: PPUSH
63513: LD_STRING \
63515: PUSH
63516: LD_INT 0
63518: PUSH
63519: LD_INT 0
63521: PUSH
63522: LD_INT 0
63524: PUSH
63525: LD_INT 0
63527: PUSH
63528: LD_INT 0
63530: PUSH
63531: LD_INT 0
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: PUSH
63543: LD_STRING E
63545: PUSH
63546: LD_INT 0
63548: PUSH
63549: LD_INT 0
63551: PUSH
63552: LD_VAR 0 3
63556: PUSH
63557: LD_INT 0
63559: PUSH
63560: LD_INT 0
63562: PUSH
63563: LD_INT 0
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PPUSH
63579: CALL_OW 447
// end ;
63583: LD_VAR 0 2
63587: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63588: LD_INT 0
63590: PPUSH
63591: PPUSH
63592: PPUSH
// tmp := [ ] ;
63593: LD_ADDR_VAR 0 5
63597: PUSH
63598: EMPTY
63599: ST_TO_ADDR
// for i in units do
63600: LD_ADDR_VAR 0 4
63604: PUSH
63605: LD_VAR 0 1
63609: PUSH
63610: FOR_IN
63611: IFFALSE 63649
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63613: LD_ADDR_VAR 0 5
63617: PUSH
63618: LD_VAR 0 5
63622: PPUSH
63623: LD_VAR 0 5
63627: PUSH
63628: LD_INT 1
63630: PLUS
63631: PPUSH
63632: LD_VAR 0 4
63636: PPUSH
63637: CALL_OW 256
63641: PPUSH
63642: CALL_OW 2
63646: ST_TO_ADDR
63647: GO 63610
63649: POP
63650: POP
// if not tmp then
63651: LD_VAR 0 5
63655: NOT
63656: IFFALSE 63660
// exit ;
63658: GO 63708
// if asc then
63660: LD_VAR 0 2
63664: IFFALSE 63688
// result := SortListByListAsc ( units , tmp ) else
63666: LD_ADDR_VAR 0 3
63670: PUSH
63671: LD_VAR 0 1
63675: PPUSH
63676: LD_VAR 0 5
63680: PPUSH
63681: CALL_OW 76
63685: ST_TO_ADDR
63686: GO 63708
// result := SortListByListDesc ( units , tmp ) ;
63688: LD_ADDR_VAR 0 3
63692: PUSH
63693: LD_VAR 0 1
63697: PPUSH
63698: LD_VAR 0 5
63702: PPUSH
63703: CALL_OW 77
63707: ST_TO_ADDR
// end ;
63708: LD_VAR 0 3
63712: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63713: LD_INT 0
63715: PPUSH
63716: PPUSH
// task := GetTaskList ( mech ) ;
63717: LD_ADDR_VAR 0 4
63721: PUSH
63722: LD_VAR 0 1
63726: PPUSH
63727: CALL_OW 437
63731: ST_TO_ADDR
// if not task then
63732: LD_VAR 0 4
63736: NOT
63737: IFFALSE 63741
// exit ;
63739: GO 63783
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63741: LD_ADDR_VAR 0 3
63745: PUSH
63746: LD_VAR 0 4
63750: PUSH
63751: LD_INT 1
63753: ARRAY
63754: PUSH
63755: LD_INT 1
63757: ARRAY
63758: PUSH
63759: LD_STRING r
63761: EQUAL
63762: PUSH
63763: LD_VAR 0 4
63767: PUSH
63768: LD_INT 1
63770: ARRAY
63771: PUSH
63772: LD_INT 4
63774: ARRAY
63775: PUSH
63776: LD_VAR 0 2
63780: EQUAL
63781: AND
63782: ST_TO_ADDR
// end ;
63783: LD_VAR 0 3
63787: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63788: LD_INT 0
63790: PPUSH
// SetDir ( unit , d ) ;
63791: LD_VAR 0 1
63795: PPUSH
63796: LD_VAR 0 4
63800: PPUSH
63801: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63805: LD_VAR 0 1
63809: PPUSH
63810: LD_VAR 0 2
63814: PPUSH
63815: LD_VAR 0 3
63819: PPUSH
63820: LD_VAR 0 5
63824: PPUSH
63825: CALL_OW 48
// end ;
63829: LD_VAR 0 6
63833: RET
// export function ToNaturalNumber ( number ) ; begin
63834: LD_INT 0
63836: PPUSH
// result := number div 1 ;
63837: LD_ADDR_VAR 0 2
63841: PUSH
63842: LD_VAR 0 1
63846: PUSH
63847: LD_INT 1
63849: DIV
63850: ST_TO_ADDR
// if number < 0 then
63851: LD_VAR 0 1
63855: PUSH
63856: LD_INT 0
63858: LESS
63859: IFFALSE 63869
// result := 0 ;
63861: LD_ADDR_VAR 0 2
63865: PUSH
63866: LD_INT 0
63868: ST_TO_ADDR
// end ;
63869: LD_VAR 0 2
63873: RET
// export function SortByClass ( units , class ) ; var un ; begin
63874: LD_INT 0
63876: PPUSH
63877: PPUSH
// if not units or not class then
63878: LD_VAR 0 1
63882: NOT
63883: PUSH
63884: LD_VAR 0 2
63888: NOT
63889: OR
63890: IFFALSE 63894
// exit ;
63892: GO 63989
// result := [ ] ;
63894: LD_ADDR_VAR 0 3
63898: PUSH
63899: EMPTY
63900: ST_TO_ADDR
// for un in units do
63901: LD_ADDR_VAR 0 4
63905: PUSH
63906: LD_VAR 0 1
63910: PUSH
63911: FOR_IN
63912: IFFALSE 63987
// if GetClass ( un ) = class then
63914: LD_VAR 0 4
63918: PPUSH
63919: CALL_OW 257
63923: PUSH
63924: LD_VAR 0 2
63928: EQUAL
63929: IFFALSE 63956
// result := Insert ( result , 1 , un ) else
63931: LD_ADDR_VAR 0 3
63935: PUSH
63936: LD_VAR 0 3
63940: PPUSH
63941: LD_INT 1
63943: PPUSH
63944: LD_VAR 0 4
63948: PPUSH
63949: CALL_OW 2
63953: ST_TO_ADDR
63954: GO 63985
// result := Replace ( result , result + 1 , un ) ;
63956: LD_ADDR_VAR 0 3
63960: PUSH
63961: LD_VAR 0 3
63965: PPUSH
63966: LD_VAR 0 3
63970: PUSH
63971: LD_INT 1
63973: PLUS
63974: PPUSH
63975: LD_VAR 0 4
63979: PPUSH
63980: CALL_OW 1
63984: ST_TO_ADDR
63985: GO 63911
63987: POP
63988: POP
// end ;
63989: LD_VAR 0 3
63993: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
63994: LD_INT 0
63996: PPUSH
63997: PPUSH
63998: PPUSH
63999: PPUSH
64000: PPUSH
64001: PPUSH
64002: PPUSH
// result := [ ] ;
64003: LD_ADDR_VAR 0 4
64007: PUSH
64008: EMPTY
64009: ST_TO_ADDR
// if x - r < 0 then
64010: LD_VAR 0 1
64014: PUSH
64015: LD_VAR 0 3
64019: MINUS
64020: PUSH
64021: LD_INT 0
64023: LESS
64024: IFFALSE 64036
// min_x := 0 else
64026: LD_ADDR_VAR 0 8
64030: PUSH
64031: LD_INT 0
64033: ST_TO_ADDR
64034: GO 64052
// min_x := x - r ;
64036: LD_ADDR_VAR 0 8
64040: PUSH
64041: LD_VAR 0 1
64045: PUSH
64046: LD_VAR 0 3
64050: MINUS
64051: ST_TO_ADDR
// if y - r < 0 then
64052: LD_VAR 0 2
64056: PUSH
64057: LD_VAR 0 3
64061: MINUS
64062: PUSH
64063: LD_INT 0
64065: LESS
64066: IFFALSE 64078
// min_y := 0 else
64068: LD_ADDR_VAR 0 7
64072: PUSH
64073: LD_INT 0
64075: ST_TO_ADDR
64076: GO 64094
// min_y := y - r ;
64078: LD_ADDR_VAR 0 7
64082: PUSH
64083: LD_VAR 0 2
64087: PUSH
64088: LD_VAR 0 3
64092: MINUS
64093: ST_TO_ADDR
// max_x := x + r ;
64094: LD_ADDR_VAR 0 9
64098: PUSH
64099: LD_VAR 0 1
64103: PUSH
64104: LD_VAR 0 3
64108: PLUS
64109: ST_TO_ADDR
// max_y := y + r ;
64110: LD_ADDR_VAR 0 10
64114: PUSH
64115: LD_VAR 0 2
64119: PUSH
64120: LD_VAR 0 3
64124: PLUS
64125: ST_TO_ADDR
// for _x = min_x to max_x do
64126: LD_ADDR_VAR 0 5
64130: PUSH
64131: DOUBLE
64132: LD_VAR 0 8
64136: DEC
64137: ST_TO_ADDR
64138: LD_VAR 0 9
64142: PUSH
64143: FOR_TO
64144: IFFALSE 64245
// for _y = min_y to max_y do
64146: LD_ADDR_VAR 0 6
64150: PUSH
64151: DOUBLE
64152: LD_VAR 0 7
64156: DEC
64157: ST_TO_ADDR
64158: LD_VAR 0 10
64162: PUSH
64163: FOR_TO
64164: IFFALSE 64241
// begin if not ValidHex ( _x , _y ) then
64166: LD_VAR 0 5
64170: PPUSH
64171: LD_VAR 0 6
64175: PPUSH
64176: CALL_OW 488
64180: NOT
64181: IFFALSE 64185
// continue ;
64183: GO 64163
// if GetResourceTypeXY ( _x , _y ) then
64185: LD_VAR 0 5
64189: PPUSH
64190: LD_VAR 0 6
64194: PPUSH
64195: CALL_OW 283
64199: IFFALSE 64239
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64201: LD_ADDR_VAR 0 4
64205: PUSH
64206: LD_VAR 0 4
64210: PPUSH
64211: LD_VAR 0 4
64215: PUSH
64216: LD_INT 1
64218: PLUS
64219: PPUSH
64220: LD_VAR 0 5
64224: PUSH
64225: LD_VAR 0 6
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PPUSH
64234: CALL_OW 1
64238: ST_TO_ADDR
// end ;
64239: GO 64163
64241: POP
64242: POP
64243: GO 64143
64245: POP
64246: POP
// end ;
64247: LD_VAR 0 4
64251: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64252: LD_INT 0
64254: PPUSH
64255: PPUSH
64256: PPUSH
64257: PPUSH
64258: PPUSH
64259: PPUSH
64260: PPUSH
64261: PPUSH
// if not units then
64262: LD_VAR 0 1
64266: NOT
64267: IFFALSE 64271
// exit ;
64269: GO 64782
// result := UnitFilter ( units , [ f_ok ] ) ;
64271: LD_ADDR_VAR 0 3
64275: PUSH
64276: LD_VAR 0 1
64280: PPUSH
64281: LD_INT 50
64283: PUSH
64284: EMPTY
64285: LIST
64286: PPUSH
64287: CALL_OW 72
64291: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64292: LD_ADDR_VAR 0 8
64296: PUSH
64297: LD_VAR 0 1
64301: PUSH
64302: LD_INT 1
64304: ARRAY
64305: PPUSH
64306: CALL_OW 255
64310: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
64311: LD_ADDR_VAR 0 10
64315: PUSH
64316: LD_INT 29
64318: PUSH
64319: LD_EXP 97
64323: PUSH
64324: LD_INT 49
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: LIST
64331: ST_TO_ADDR
// if not result then
64332: LD_VAR 0 3
64336: NOT
64337: IFFALSE 64341
// exit ;
64339: GO 64782
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64341: LD_ADDR_VAR 0 5
64345: PUSH
64346: LD_INT 81
64348: PUSH
64349: LD_VAR 0 8
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PPUSH
64358: CALL_OW 69
64362: ST_TO_ADDR
// for i in result do
64363: LD_ADDR_VAR 0 4
64367: PUSH
64368: LD_VAR 0 3
64372: PUSH
64373: FOR_IN
64374: IFFALSE 64780
// begin tag := GetTag ( i ) + 1 ;
64376: LD_ADDR_VAR 0 9
64380: PUSH
64381: LD_VAR 0 4
64385: PPUSH
64386: CALL_OW 110
64390: PUSH
64391: LD_INT 1
64393: PLUS
64394: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
64395: LD_ADDR_VAR 0 7
64399: PUSH
64400: LD_VAR 0 4
64404: PPUSH
64405: CALL_OW 250
64409: PPUSH
64410: LD_VAR 0 4
64414: PPUSH
64415: CALL_OW 251
64419: PPUSH
64420: LD_INT 6
64422: PPUSH
64423: CALL 63994 0 3
64427: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
64428: LD_VAR 0 7
64432: PUSH
64433: LD_VAR 0 4
64437: PPUSH
64438: CALL_OW 264
64442: PUSH
64443: LD_VAR 0 10
64447: IN
64448: NOT
64449: AND
64450: IFFALSE 64489
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64452: LD_VAR 0 4
64456: PPUSH
64457: LD_VAR 0 7
64461: PUSH
64462: LD_INT 1
64464: ARRAY
64465: PUSH
64466: LD_INT 1
64468: ARRAY
64469: PPUSH
64470: LD_VAR 0 7
64474: PUSH
64475: LD_INT 1
64477: ARRAY
64478: PUSH
64479: LD_INT 2
64481: ARRAY
64482: PPUSH
64483: CALL_OW 116
64487: GO 64778
// if path > tag then
64489: LD_VAR 0 2
64493: PUSH
64494: LD_VAR 0 9
64498: GREATER
64499: IFFALSE 64707
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
64501: LD_ADDR_VAR 0 6
64505: PUSH
64506: LD_VAR 0 5
64510: PPUSH
64511: LD_INT 91
64513: PUSH
64514: LD_VAR 0 4
64518: PUSH
64519: LD_INT 12
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: LIST
64526: PPUSH
64527: CALL_OW 72
64531: ST_TO_ADDR
// if nearEnemy then
64532: LD_VAR 0 6
64536: IFFALSE 64605
// begin if GetWeapon ( i ) = ru_time_lapser then
64538: LD_VAR 0 4
64542: PPUSH
64543: CALL_OW 264
64547: PUSH
64548: LD_INT 49
64550: EQUAL
64551: IFFALSE 64579
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
64553: LD_VAR 0 4
64557: PPUSH
64558: LD_VAR 0 6
64562: PPUSH
64563: LD_VAR 0 4
64567: PPUSH
64568: CALL_OW 74
64572: PPUSH
64573: CALL_OW 112
64577: GO 64603
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
64579: LD_VAR 0 4
64583: PPUSH
64584: LD_VAR 0 6
64588: PPUSH
64589: LD_VAR 0 4
64593: PPUSH
64594: CALL_OW 74
64598: PPUSH
64599: CALL_OW 115
// end else
64603: GO 64705
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64605: LD_VAR 0 4
64609: PPUSH
64610: LD_VAR 0 2
64614: PUSH
64615: LD_VAR 0 9
64619: ARRAY
64620: PUSH
64621: LD_INT 1
64623: ARRAY
64624: PPUSH
64625: LD_VAR 0 2
64629: PUSH
64630: LD_VAR 0 9
64634: ARRAY
64635: PUSH
64636: LD_INT 2
64638: ARRAY
64639: PPUSH
64640: CALL_OW 297
64644: PUSH
64645: LD_INT 6
64647: GREATER
64648: IFFALSE 64691
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64650: LD_VAR 0 4
64654: PPUSH
64655: LD_VAR 0 2
64659: PUSH
64660: LD_VAR 0 9
64664: ARRAY
64665: PUSH
64666: LD_INT 1
64668: ARRAY
64669: PPUSH
64670: LD_VAR 0 2
64674: PUSH
64675: LD_VAR 0 9
64679: ARRAY
64680: PUSH
64681: LD_INT 2
64683: ARRAY
64684: PPUSH
64685: CALL_OW 114
64689: GO 64705
// SetTag ( i , tag ) ;
64691: LD_VAR 0 4
64695: PPUSH
64696: LD_VAR 0 9
64700: PPUSH
64701: CALL_OW 109
// end else
64705: GO 64778
// if enemy then
64707: LD_VAR 0 5
64711: IFFALSE 64778
// begin if GetWeapon ( i ) = ru_time_lapser then
64713: LD_VAR 0 4
64717: PPUSH
64718: CALL_OW 264
64722: PUSH
64723: LD_INT 49
64725: EQUAL
64726: IFFALSE 64754
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
64728: LD_VAR 0 4
64732: PPUSH
64733: LD_VAR 0 5
64737: PPUSH
64738: LD_VAR 0 4
64742: PPUSH
64743: CALL_OW 74
64747: PPUSH
64748: CALL_OW 112
64752: GO 64778
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64754: LD_VAR 0 4
64758: PPUSH
64759: LD_VAR 0 5
64763: PPUSH
64764: LD_VAR 0 4
64768: PPUSH
64769: CALL_OW 74
64773: PPUSH
64774: CALL_OW 115
// end ; end ;
64778: GO 64373
64780: POP
64781: POP
// end ;
64782: LD_VAR 0 3
64786: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
64787: LD_INT 0
64789: PPUSH
64790: PPUSH
64791: PPUSH
// if not unit or IsInUnit ( unit ) then
64792: LD_VAR 0 1
64796: NOT
64797: PUSH
64798: LD_VAR 0 1
64802: PPUSH
64803: CALL_OW 310
64807: OR
64808: IFFALSE 64812
// exit ;
64810: GO 64903
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
64812: LD_ADDR_VAR 0 4
64816: PUSH
64817: LD_VAR 0 1
64821: PPUSH
64822: CALL_OW 250
64826: PPUSH
64827: LD_VAR 0 2
64831: PPUSH
64832: LD_INT 1
64834: PPUSH
64835: CALL_OW 272
64839: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
64840: LD_ADDR_VAR 0 5
64844: PUSH
64845: LD_VAR 0 1
64849: PPUSH
64850: CALL_OW 251
64854: PPUSH
64855: LD_VAR 0 2
64859: PPUSH
64860: LD_INT 1
64862: PPUSH
64863: CALL_OW 273
64867: ST_TO_ADDR
// if ValidHex ( x , y ) then
64868: LD_VAR 0 4
64872: PPUSH
64873: LD_VAR 0 5
64877: PPUSH
64878: CALL_OW 488
64882: IFFALSE 64903
// ComTurnXY ( unit , x , y ) ;
64884: LD_VAR 0 1
64888: PPUSH
64889: LD_VAR 0 4
64893: PPUSH
64894: LD_VAR 0 5
64898: PPUSH
64899: CALL_OW 118
// end ;
64903: LD_VAR 0 3
64907: RET
// export function SeeUnits ( side , units ) ; var i ; begin
64908: LD_INT 0
64910: PPUSH
64911: PPUSH
// result := false ;
64912: LD_ADDR_VAR 0 3
64916: PUSH
64917: LD_INT 0
64919: ST_TO_ADDR
// if not units then
64920: LD_VAR 0 2
64924: NOT
64925: IFFALSE 64929
// exit ;
64927: GO 64974
// for i in units do
64929: LD_ADDR_VAR 0 4
64933: PUSH
64934: LD_VAR 0 2
64938: PUSH
64939: FOR_IN
64940: IFFALSE 64972
// if See ( side , i ) then
64942: LD_VAR 0 1
64946: PPUSH
64947: LD_VAR 0 4
64951: PPUSH
64952: CALL_OW 292
64956: IFFALSE 64970
// begin result := true ;
64958: LD_ADDR_VAR 0 3
64962: PUSH
64963: LD_INT 1
64965: ST_TO_ADDR
// exit ;
64966: POP
64967: POP
64968: GO 64974
// end ;
64970: GO 64939
64972: POP
64973: POP
// end ;
64974: LD_VAR 0 3
64978: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
64979: LD_INT 0
64981: PPUSH
64982: PPUSH
64983: PPUSH
64984: PPUSH
// if not unit or not points then
64985: LD_VAR 0 1
64989: NOT
64990: PUSH
64991: LD_VAR 0 2
64995: NOT
64996: OR
64997: IFFALSE 65001
// exit ;
64999: GO 65091
// dist := 99999 ;
65001: LD_ADDR_VAR 0 5
65005: PUSH
65006: LD_INT 99999
65008: ST_TO_ADDR
// for i in points do
65009: LD_ADDR_VAR 0 4
65013: PUSH
65014: LD_VAR 0 2
65018: PUSH
65019: FOR_IN
65020: IFFALSE 65089
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65022: LD_ADDR_VAR 0 6
65026: PUSH
65027: LD_VAR 0 1
65031: PPUSH
65032: LD_VAR 0 4
65036: PUSH
65037: LD_INT 1
65039: ARRAY
65040: PPUSH
65041: LD_VAR 0 4
65045: PUSH
65046: LD_INT 2
65048: ARRAY
65049: PPUSH
65050: CALL_OW 297
65054: ST_TO_ADDR
// if tmpDist < dist then
65055: LD_VAR 0 6
65059: PUSH
65060: LD_VAR 0 5
65064: LESS
65065: IFFALSE 65087
// begin result := i ;
65067: LD_ADDR_VAR 0 3
65071: PUSH
65072: LD_VAR 0 4
65076: ST_TO_ADDR
// dist := tmpDist ;
65077: LD_ADDR_VAR 0 5
65081: PUSH
65082: LD_VAR 0 6
65086: ST_TO_ADDR
// end ; end ;
65087: GO 65019
65089: POP
65090: POP
// end ;
65091: LD_VAR 0 3
65095: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
65096: LD_INT 0
65098: PPUSH
// uc_side := side ;
65099: LD_ADDR_OWVAR 20
65103: PUSH
65104: LD_VAR 0 1
65108: ST_TO_ADDR
// uc_nation := 3 ;
65109: LD_ADDR_OWVAR 21
65113: PUSH
65114: LD_INT 3
65116: ST_TO_ADDR
// vc_chassis := 25 ;
65117: LD_ADDR_OWVAR 37
65121: PUSH
65122: LD_INT 25
65124: ST_TO_ADDR
// vc_engine := engine_siberite ;
65125: LD_ADDR_OWVAR 39
65129: PUSH
65130: LD_INT 3
65132: ST_TO_ADDR
// vc_control := control_computer ;
65133: LD_ADDR_OWVAR 38
65137: PUSH
65138: LD_INT 3
65140: ST_TO_ADDR
// vc_weapon := 59 ;
65141: LD_ADDR_OWVAR 40
65145: PUSH
65146: LD_INT 59
65148: ST_TO_ADDR
// result := CreateVehicle ;
65149: LD_ADDR_VAR 0 5
65153: PUSH
65154: CALL_OW 45
65158: ST_TO_ADDR
// SetDir ( result , d ) ;
65159: LD_VAR 0 5
65163: PPUSH
65164: LD_VAR 0 4
65168: PPUSH
65169: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
65173: LD_VAR 0 5
65177: PPUSH
65178: LD_VAR 0 2
65182: PPUSH
65183: LD_VAR 0 3
65187: PPUSH
65188: LD_INT 0
65190: PPUSH
65191: CALL_OW 48
// end ;
65195: LD_VAR 0 5
65199: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
65200: LD_INT 0
65202: PPUSH
65203: PPUSH
65204: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
65205: LD_ADDR_VAR 0 2
65209: PUSH
65210: LD_INT 0
65212: PUSH
65213: LD_INT 0
65215: PUSH
65216: LD_INT 0
65218: PUSH
65219: LD_INT 0
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
65228: LD_VAR 0 1
65232: NOT
65233: PUSH
65234: LD_VAR 0 1
65238: PPUSH
65239: CALL_OW 264
65243: PUSH
65244: LD_INT 12
65246: PUSH
65247: LD_INT 51
65249: PUSH
65250: LD_INT 32
65252: PUSH
65253: LD_EXP 94
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: LIST
65262: LIST
65263: IN
65264: NOT
65265: OR
65266: IFFALSE 65270
// exit ;
65268: GO 65368
// for i := 1 to 3 do
65270: LD_ADDR_VAR 0 3
65274: PUSH
65275: DOUBLE
65276: LD_INT 1
65278: DEC
65279: ST_TO_ADDR
65280: LD_INT 3
65282: PUSH
65283: FOR_TO
65284: IFFALSE 65366
// begin tmp := GetCargo ( cargo , i ) ;
65286: LD_ADDR_VAR 0 4
65290: PUSH
65291: LD_VAR 0 1
65295: PPUSH
65296: LD_VAR 0 3
65300: PPUSH
65301: CALL_OW 289
65305: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
65306: LD_ADDR_VAR 0 2
65310: PUSH
65311: LD_VAR 0 2
65315: PPUSH
65316: LD_VAR 0 3
65320: PPUSH
65321: LD_VAR 0 4
65325: PPUSH
65326: CALL_OW 1
65330: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
65331: LD_ADDR_VAR 0 2
65335: PUSH
65336: LD_VAR 0 2
65340: PPUSH
65341: LD_INT 4
65343: PPUSH
65344: LD_VAR 0 2
65348: PUSH
65349: LD_INT 4
65351: ARRAY
65352: PUSH
65353: LD_VAR 0 4
65357: PLUS
65358: PPUSH
65359: CALL_OW 1
65363: ST_TO_ADDR
// end ;
65364: GO 65283
65366: POP
65367: POP
// end ; end_of_file
65368: LD_VAR 0 2
65372: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65373: LD_VAR 0 1
65377: PPUSH
65378: LD_VAR 0 2
65382: PPUSH
65383: LD_VAR 0 3
65387: PPUSH
65388: LD_VAR 0 4
65392: PPUSH
65393: LD_VAR 0 5
65397: PPUSH
65398: LD_VAR 0 6
65402: PPUSH
65403: CALL 5872 0 6
// end ;
65407: PPOPN 6
65409: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
65410: LD_INT 0
65412: PPUSH
// begin if not units then
65413: LD_VAR 0 1
65417: NOT
65418: IFFALSE 65422
// exit ;
65420: GO 65510
// if p1 = 1 then
65422: LD_VAR 0 2
65426: PUSH
65427: LD_INT 1
65429: EQUAL
65430: IFFALSE 65510
// begin if p2 = 1 then
65432: LD_VAR 0 3
65436: PUSH
65437: LD_INT 1
65439: EQUAL
65440: IFFALSE 65471
// begin for i in units do
65442: LD_ADDR_VAR 0 7
65446: PUSH
65447: LD_VAR 0 1
65451: PUSH
65452: FOR_IN
65453: IFFALSE 65469
// begin SetUnitAttackType ( i , 3 ) ;
65455: LD_VAR 0 7
65459: PPUSH
65460: LD_INT 3
65462: PPUSH
65463: CALL_OW 603
// end ;
65467: GO 65452
65469: POP
65470: POP
// end ; if p2 = 2 then
65471: LD_VAR 0 3
65475: PUSH
65476: LD_INT 2
65478: EQUAL
65479: IFFALSE 65510
// begin for i in units do
65481: LD_ADDR_VAR 0 7
65485: PUSH
65486: LD_VAR 0 1
65490: PUSH
65491: FOR_IN
65492: IFFALSE 65508
// begin SetUnitAttackType ( i , 1 ) ;
65494: LD_VAR 0 7
65498: PPUSH
65499: LD_INT 1
65501: PPUSH
65502: CALL_OW 603
// end ;
65506: GO 65491
65508: POP
65509: POP
// end ; end ; end ;
65510: PPOPN 7
65512: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
65513: CALL 5847 0 0
// end ; end_of_file
65517: PPOPN 1
65519: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65520: LD_VAR 0 1
65524: PUSH
65525: LD_INT 200
65527: DOUBLE
65528: GREATEREQUAL
65529: IFFALSE 65537
65531: LD_INT 299
65533: DOUBLE
65534: LESSEQUAL
65535: IFTRUE 65539
65537: GO 65571
65539: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
65540: LD_VAR 0 1
65544: PPUSH
65545: LD_VAR 0 2
65549: PPUSH
65550: LD_VAR 0 3
65554: PPUSH
65555: LD_VAR 0 4
65559: PPUSH
65560: LD_VAR 0 5
65564: PPUSH
65565: CALL 20537 0 5
65569: GO 65648
65571: LD_INT 300
65573: DOUBLE
65574: GREATEREQUAL
65575: IFFALSE 65583
65577: LD_INT 399
65579: DOUBLE
65580: LESSEQUAL
65581: IFTRUE 65585
65583: GO 65647
65585: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
65586: LD_VAR 0 1
65590: PPUSH
65591: LD_VAR 0 2
65595: PPUSH
65596: LD_VAR 0 3
65600: PPUSH
65601: LD_VAR 0 4
65605: PPUSH
65606: LD_VAR 0 5
65610: PPUSH
65611: LD_VAR 0 6
65615: PPUSH
65616: LD_VAR 0 7
65620: PPUSH
65621: LD_VAR 0 8
65625: PPUSH
65626: LD_VAR 0 9
65630: PPUSH
65631: LD_VAR 0 10
65635: PPUSH
65636: LD_VAR 0 11
65640: PPUSH
65641: CALL 18179 0 11
65645: GO 65648
65647: POP
// end ;
65648: PPOPN 11
65650: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65651: LD_VAR 0 1
65655: PPUSH
65656: LD_VAR 0 2
65660: PPUSH
65661: LD_VAR 0 3
65665: PPUSH
65666: LD_VAR 0 4
65670: PPUSH
65671: LD_VAR 0 5
65675: PPUSH
65676: CALL 20273 0 5
// end ;
65680: PPOPN 5
65682: END
