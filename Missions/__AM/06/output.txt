// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson , Mike ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export selectedPeople ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect := 0 ;
  15: LD_ADDR_EXP 19
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene := 1 ;
  23: LD_ADDR_EXP 20
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans := [ ] ;
  31: LD_ADDR_EXP 13
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans := [ ] ;
  38: LD_ADDR_EXP 14
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles := [ ] ;
  45: LD_ADDR_EXP 15
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 12
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// resources := [ ] ;
  59: LD_ADDR_EXP 22
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// mission_prefix := 06_ ;
  66: LD_ADDR_EXP 23
  70: PUSH
  71: LD_STRING 06_
  73: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  74: LD_ADDR_EXP 24
  78: PUSH
  79: LD_STRING 05_
  81: ST_TO_ADDR
// PrepareDeltaBase ;
  82: CALL 2310 0 0
// CreateNature ;
  86: CALL 170 0 0
// LoadVehicles ;
  90: CALL 1458 0 0
// PrepareHeroes ;
  94: CALL 291 0 0
// PrepareRandoms ;
  98: CALL 1723 0 0
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 102: LD_ADDR_EXP 21
 106: PUSH
 107: LD_INT 22
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 2
 119: PUSH
 120: LD_INT 30
 122: PUSH
 123: LD_INT 6
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 30
 132: PUSH
 133: LD_INT 7
 135: PUSH
 136: EMPTY
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 30
 142: PUSH
 143: LD_INT 8
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: PPUSH
 160: CALL_OW 69
 164: ST_TO_ADDR
// Action ;
 165: CALL 3238 0 0
// end ;
 169: END
// export function CreateNature ; var i ; begin
 170: LD_INT 0
 172: PPUSH
 173: PPUSH
// uc_side := 0 ;
 174: LD_ADDR_OWVAR 20
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// uc_nation := 0 ;
 182: LD_ADDR_OWVAR 21
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// for i = 1 to 4 do
 190: LD_ADDR_VAR 0 2
 194: PUSH
 195: DOUBLE
 196: LD_INT 1
 198: DEC
 199: ST_TO_ADDR
 200: LD_INT 4
 202: PUSH
 203: FOR_TO
 204: IFFALSE 284
// begin hc_gallery :=  ;
 206: LD_ADDR_OWVAR 33
 210: PUSH
 211: LD_STRING 
 213: ST_TO_ADDR
// hc_name :=  ;
 214: LD_ADDR_OWVAR 26
 218: PUSH
 219: LD_STRING 
 221: ST_TO_ADDR
// hc_attr := [ rand ( 10 , 11 ) , rand ( 10 , 12 ) ] ;
 222: LD_ADDR_OWVAR 29
 226: PUSH
 227: LD_INT 10
 229: PPUSH
 230: LD_INT 11
 232: PPUSH
 233: CALL_OW 12
 237: PUSH
 238: LD_INT 10
 240: PPUSH
 241: LD_INT 12
 243: PPUSH
 244: CALL_OW 12
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: ST_TO_ADDR
// hc_class := class_apeman ;
 253: LD_ADDR_OWVAR 28
 257: PUSH
 258: LD_INT 12
 260: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 22 , 18 , 20 , false ) ;
 261: CALL_OW 44
 265: PPUSH
 266: LD_INT 22
 268: PPUSH
 269: LD_INT 18
 271: PPUSH
 272: LD_INT 20
 274: PPUSH
 275: LD_INT 0
 277: PPUSH
 278: CALL_OW 50
// end ;
 282: GO 203
 284: POP
 285: POP
// end ; end_of_file
 286: LD_VAR 0 1
 290: RET
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 291: LD_INT 0
 293: PPUSH
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 298: LD_ADDR_VAR 0 3
 302: PUSH
 303: LD_INT 22
 305: PUSH
 306: LD_INT 1
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: PUSH
 313: LD_INT 21
 315: PUSH
 316: LD_INT 3
 318: PUSH
 319: EMPTY
 320: LIST
 321: LIST
 322: PUSH
 323: LD_INT 30
 325: PUSH
 326: LD_INT 0
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: PUSH
 333: EMPTY
 334: LIST
 335: LIST
 336: LIST
 337: PPUSH
 338: CALL_OW 69
 342: ST_TO_ADDR
// if tmp then
 343: LD_VAR 0 3
 347: IFFALSE 365
// SetBName ( tmp [ 1 ] , delta ) ;
 349: LD_VAR 0 3
 353: PUSH
 354: LD_INT 1
 356: ARRAY
 357: PPUSH
 358: LD_STRING delta
 360: PPUSH
 361: CALL_OW 500
// uc_side := 1 ;
 365: LD_ADDR_OWVAR 20
 369: PUSH
 370: LD_INT 1
 372: ST_TO_ADDR
// uc_nation := 1 ;
 373: LD_ADDR_OWVAR 21
 377: PUSH
 378: LD_INT 1
 380: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 381: LD_ADDR_EXP 1
 385: PUSH
 386: LD_STRING JMM
 388: PPUSH
 389: LD_INT 1
 391: PPUSH
 392: LD_EXP 24
 396: PPUSH
 397: CALL 25744 0 3
 401: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 402: LD_ADDR_EXP 17
 406: PUSH
 407: LD_STRING Harisson
 409: PPUSH
 410: LD_INT 0
 412: PPUSH
 413: LD_STRING 
 415: PPUSH
 416: CALL 25744 0 3
 420: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 421: LD_EXP 1
 425: PPUSH
 426: LD_VAR 0 3
 430: PUSH
 431: LD_INT 1
 433: ARRAY
 434: PPUSH
 435: CALL_OW 250
 439: PPUSH
 440: LD_VAR 0 3
 444: PUSH
 445: LD_INT 1
 447: ARRAY
 448: PPUSH
 449: CALL_OW 251
 453: PPUSH
 454: LD_INT 5
 456: PPUSH
 457: LD_INT 0
 459: PPUSH
 460: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 464: LD_EXP 1
 468: PPUSH
 469: LD_INT 1
 471: PPUSH
 472: CALL_OW 336
// Gladstone := PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
 476: LD_ADDR_EXP 2
 480: PUSH
 481: LD_STRING Gladstone
 483: PPUSH
 484: LD_INT 1
 486: PPUSH
 487: LD_EXP 24
 491: PPUSH
 492: CALL 25744 0 3
 496: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 497: LD_EXP 2
 501: PPUSH
 502: LD_VAR 0 3
 506: PUSH
 507: LD_INT 1
 509: ARRAY
 510: PPUSH
 511: CALL_OW 250
 515: PPUSH
 516: LD_VAR 0 3
 520: PUSH
 521: LD_INT 1
 523: ARRAY
 524: PPUSH
 525: CALL_OW 251
 529: PPUSH
 530: LD_INT 5
 532: PPUSH
 533: LD_INT 0
 535: PPUSH
 536: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 540: LD_EXP 2
 544: PPUSH
 545: LD_INT 4
 547: PPUSH
 548: CALL_OW 336
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
 552: LD_ADDR_EXP 3
 556: PUSH
 557: LD_STRING Denis
 559: PPUSH
 560: LD_INT 1
 562: PPUSH
 563: LD_EXP 24
 567: PPUSH
 568: CALL 25744 0 3
 572: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 573: LD_EXP 3
 577: PPUSH
 578: LD_VAR 0 3
 582: PUSH
 583: LD_INT 1
 585: ARRAY
 586: PPUSH
 587: CALL_OW 250
 591: PPUSH
 592: LD_VAR 0 3
 596: PUSH
 597: LD_INT 1
 599: ARRAY
 600: PPUSH
 601: CALL_OW 251
 605: PPUSH
 606: LD_INT 5
 608: PPUSH
 609: LD_INT 0
 611: PPUSH
 612: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 616: LD_EXP 3
 620: PPUSH
 621: LD_INT 4
 623: PPUSH
 624: CALL_OW 336
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 628: LD_STRING FrankInDelta
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: CALL_OW 30
 638: PUSH
 639: LD_INT 1
 641: EQUAL
 642: IFFALSE 720
// begin Frank := PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 644: LD_ADDR_EXP 5
 648: PUSH
 649: LD_STRING Frank
 651: PPUSH
 652: LD_INT 1
 654: PPUSH
 655: LD_EXP 24
 659: PPUSH
 660: CALL 25744 0 3
 664: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 665: LD_EXP 5
 669: PPUSH
 670: LD_VAR 0 3
 674: PUSH
 675: LD_INT 1
 677: ARRAY
 678: PPUSH
 679: CALL_OW 250
 683: PPUSH
 684: LD_VAR 0 3
 688: PUSH
 689: LD_INT 1
 691: ARRAY
 692: PPUSH
 693: CALL_OW 251
 697: PPUSH
 698: LD_INT 5
 700: PPUSH
 701: LD_INT 0
 703: PPUSH
 704: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 708: LD_EXP 5
 712: PPUSH
 713: LD_INT 1
 715: PPUSH
 716: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 720: LD_STRING LisaInDelta
 722: PPUSH
 723: LD_INT 0
 725: PPUSH
 726: CALL_OW 30
 730: PUSH
 731: LD_INT 1
 733: EQUAL
 734: IFFALSE 812
// begin Lisa := PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 736: LD_ADDR_EXP 4
 740: PUSH
 741: LD_STRING Lisa
 743: PPUSH
 744: LD_INT 1
 746: PPUSH
 747: LD_EXP 24
 751: PPUSH
 752: CALL 25744 0 3
 756: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 757: LD_EXP 4
 761: PPUSH
 762: LD_VAR 0 3
 766: PUSH
 767: LD_INT 1
 769: ARRAY
 770: PPUSH
 771: CALL_OW 250
 775: PPUSH
 776: LD_VAR 0 3
 780: PUSH
 781: LD_INT 1
 783: ARRAY
 784: PPUSH
 785: CALL_OW 251
 789: PPUSH
 790: LD_INT 5
 792: PPUSH
 793: LD_INT 0
 795: PPUSH
 796: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 800: LD_EXP 4
 804: PPUSH
 805: LD_INT 1
 807: PPUSH
 808: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 812: LD_STRING BobbyInDelta
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: CALL_OW 30
 822: PUSH
 823: LD_INT 1
 825: EQUAL
 826: IFFALSE 904
// begin Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 828: LD_ADDR_EXP 6
 832: PUSH
 833: LD_STRING Bobby
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: LD_EXP 24
 843: PPUSH
 844: CALL 25744 0 3
 848: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 849: LD_EXP 6
 853: PPUSH
 854: LD_VAR 0 3
 858: PUSH
 859: LD_INT 1
 861: ARRAY
 862: PPUSH
 863: CALL_OW 250
 867: PPUSH
 868: LD_VAR 0 3
 872: PUSH
 873: LD_INT 1
 875: ARRAY
 876: PPUSH
 877: CALL_OW 251
 881: PPUSH
 882: LD_INT 5
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 892: LD_EXP 6
 896: PPUSH
 897: LD_INT 1
 899: PPUSH
 900: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 904: LD_STRING CyrusInDelta
 906: PPUSH
 907: LD_INT 0
 909: PPUSH
 910: CALL_OW 30
 914: PUSH
 915: LD_INT 1
 917: EQUAL
 918: IFFALSE 996
// begin Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 920: LD_ADDR_EXP 7
 924: PUSH
 925: LD_STRING Cyrus
 927: PPUSH
 928: LD_INT 1
 930: PPUSH
 931: LD_EXP 24
 935: PPUSH
 936: CALL 25744 0 3
 940: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 941: LD_EXP 7
 945: PPUSH
 946: LD_VAR 0 3
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: PPUSH
 955: CALL_OW 250
 959: PPUSH
 960: LD_VAR 0 3
 964: PUSH
 965: LD_INT 1
 967: ARRAY
 968: PPUSH
 969: CALL_OW 251
 973: PPUSH
 974: LD_INT 5
 976: PPUSH
 977: LD_INT 0
 979: PPUSH
 980: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
 984: LD_EXP 7
 988: PPUSH
 989: LD_INT 1
 991: PPUSH
 992: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
 996: LD_STRING DonaldsonInDelta
 998: PPUSH
 999: LD_INT 0
1001: PPUSH
1002: CALL_OW 30
1006: PUSH
1007: LD_INT 1
1009: EQUAL
1010: IFFALSE 1088
// begin Donaldson := PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
1012: LD_ADDR_EXP 9
1016: PUSH
1017: LD_STRING Donaldson
1019: PPUSH
1020: LD_INT 1
1022: PPUSH
1023: LD_EXP 24
1027: PPUSH
1028: CALL 25744 0 3
1032: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1033: LD_EXP 9
1037: PPUSH
1038: LD_VAR 0 3
1042: PUSH
1043: LD_INT 1
1045: ARRAY
1046: PPUSH
1047: CALL_OW 250
1051: PPUSH
1052: LD_VAR 0 3
1056: PUSH
1057: LD_INT 1
1059: ARRAY
1060: PPUSH
1061: CALL_OW 251
1065: PPUSH
1066: LD_INT 5
1068: PPUSH
1069: LD_INT 0
1071: PPUSH
1072: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
1076: LD_EXP 9
1080: PPUSH
1081: LD_INT 1
1083: PPUSH
1084: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
1088: LD_STRING BrownInDelta
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: CALL_OW 30
1098: PUSH
1099: LD_INT 1
1101: EQUAL
1102: IFFALSE 1180
// begin Brown := PrepareUnit ( Brown , true , mission_prefix_prev ) ;
1104: LD_ADDR_EXP 8
1108: PUSH
1109: LD_STRING Brown
1111: PPUSH
1112: LD_INT 1
1114: PPUSH
1115: LD_EXP 24
1119: PPUSH
1120: CALL 25744 0 3
1124: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1125: LD_EXP 8
1129: PPUSH
1130: LD_VAR 0 3
1134: PUSH
1135: LD_INT 1
1137: ARRAY
1138: PPUSH
1139: CALL_OW 250
1143: PPUSH
1144: LD_VAR 0 3
1148: PUSH
1149: LD_INT 1
1151: ARRAY
1152: PPUSH
1153: CALL_OW 251
1157: PPUSH
1158: LD_INT 5
1160: PPUSH
1161: LD_INT 0
1163: PPUSH
1164: CALL_OW 50
// SetClass ( Brown , 2 ) ;
1168: LD_EXP 8
1172: PPUSH
1173: LD_INT 2
1175: PPUSH
1176: CALL_OW 336
// end ; others := CreateCharacterSet ( othersInDelta ) ;
1180: LD_ADDR_EXP 11
1184: PUSH
1185: LD_STRING othersInDelta
1187: PPUSH
1188: CALL_OW 31
1192: ST_TO_ADDR
// for i in others do
1193: LD_ADDR_VAR 0 2
1197: PUSH
1198: LD_EXP 11
1202: PUSH
1203: FOR_IN
1204: IFFALSE 1251
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1206: LD_VAR 0 2
1210: PPUSH
1211: LD_VAR 0 3
1215: PUSH
1216: LD_INT 1
1218: ARRAY
1219: PPUSH
1220: CALL_OW 250
1224: PPUSH
1225: LD_VAR 0 3
1229: PUSH
1230: LD_INT 1
1232: ARRAY
1233: PPUSH
1234: CALL_OW 251
1238: PPUSH
1239: LD_INT 35
1241: PPUSH
1242: LD_INT 0
1244: PPUSH
1245: CALL_OW 50
1249: GO 1203
1251: POP
1252: POP
// apemans := CreateCharacterSet ( apeInDelta ) ;
1253: LD_ADDR_EXP 13
1257: PUSH
1258: LD_STRING apeInDelta
1260: PPUSH
1261: CALL_OW 31
1265: ST_TO_ADDR
// uc_nation := 0 ;
1266: LD_ADDR_OWVAR 21
1270: PUSH
1271: LD_INT 0
1273: ST_TO_ADDR
// if apemans > 5 then
1274: LD_EXP 13
1278: PUSH
1279: LD_INT 5
1281: GREATER
1282: IFFALSE 1377
// begin for i := 1 to 5 do
1284: LD_ADDR_VAR 0 2
1288: PUSH
1289: DOUBLE
1290: LD_INT 1
1292: DEC
1293: ST_TO_ADDR
1294: LD_INT 5
1296: PUSH
1297: FOR_TO
1298: IFFALSE 1373
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1300: LD_EXP 13
1304: PUSH
1305: LD_VAR 0 2
1309: ARRAY
1310: PPUSH
1311: LD_VAR 0 3
1315: PUSH
1316: LD_INT 1
1318: ARRAY
1319: PPUSH
1320: CALL_OW 250
1324: PPUSH
1325: LD_VAR 0 3
1329: PUSH
1330: LD_INT 1
1332: ARRAY
1333: PPUSH
1334: CALL_OW 251
1338: PPUSH
1339: LD_INT 50
1341: PPUSH
1342: LD_INT 0
1344: PPUSH
1345: CALL_OW 50
// yourApemans := yourApemans ^ apemans [ i ] ;
1349: LD_ADDR_EXP 14
1353: PUSH
1354: LD_EXP 14
1358: PUSH
1359: LD_EXP 13
1363: PUSH
1364: LD_VAR 0 2
1368: ARRAY
1369: ADD
1370: ST_TO_ADDR
// end ;
1371: GO 1297
1373: POP
1374: POP
// end else
1375: GO 1453
// begin for i in apemans do
1377: LD_ADDR_VAR 0 2
1381: PUSH
1382: LD_EXP 13
1386: PUSH
1387: FOR_IN
1388: IFFALSE 1451
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1390: LD_VAR 0 2
1394: PPUSH
1395: LD_VAR 0 3
1399: PUSH
1400: LD_INT 1
1402: ARRAY
1403: PPUSH
1404: CALL_OW 250
1408: PPUSH
1409: LD_VAR 0 3
1413: PUSH
1414: LD_INT 1
1416: ARRAY
1417: PPUSH
1418: CALL_OW 251
1422: PPUSH
1423: LD_INT 50
1425: PPUSH
1426: LD_INT 0
1428: PPUSH
1429: CALL_OW 50
// yourApemans := yourApemans ^ i ;
1433: LD_ADDR_EXP 14
1437: PUSH
1438: LD_EXP 14
1442: PUSH
1443: LD_VAR 0 2
1447: ADD
1448: ST_TO_ADDR
// end ;
1449: GO 1387
1451: POP
1452: POP
// end ; end ;
1453: LD_VAR 0 1
1457: RET
// export function LoadVehicles ; var i , j , veh , tmp , vehicles ; begin
1458: LD_INT 0
1460: PPUSH
1461: PPUSH
1462: PPUSH
1463: PPUSH
1464: PPUSH
1465: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1466: LD_ADDR_VAR 0 5
1470: PUSH
1471: LD_INT 22
1473: PUSH
1474: LD_INT 1
1476: PUSH
1477: EMPTY
1478: LIST
1479: LIST
1480: PUSH
1481: LD_INT 21
1483: PUSH
1484: LD_INT 3
1486: PUSH
1487: EMPTY
1488: LIST
1489: LIST
1490: PUSH
1491: LD_INT 30
1493: PUSH
1494: LD_INT 0
1496: PUSH
1497: EMPTY
1498: LIST
1499: LIST
1500: PUSH
1501: EMPTY
1502: LIST
1503: LIST
1504: LIST
1505: PPUSH
1506: CALL_OW 69
1510: ST_TO_ADDR
// uc_side := 1 ;
1511: LD_ADDR_OWVAR 20
1515: PUSH
1516: LD_INT 1
1518: ST_TO_ADDR
// vehicles := LoadVariable ( vehiclesInDelta , [ ] ) ;
1519: LD_ADDR_VAR 0 6
1523: PUSH
1524: LD_STRING vehiclesInDelta
1526: PPUSH
1527: EMPTY
1528: PPUSH
1529: CALL_OW 30
1533: ST_TO_ADDR
// for i := 1 to Count ( vehicles ) div 4 do
1534: LD_ADDR_VAR 0 2
1538: PUSH
1539: DOUBLE
1540: LD_INT 1
1542: DEC
1543: ST_TO_ADDR
1544: LD_VAR 0 6
1548: PPUSH
1549: CALL 27846 0 1
1553: PUSH
1554: LD_INT 4
1556: DIV
1557: PUSH
1558: FOR_TO
1559: IFFALSE 1716
// begin uc_nation := vehicles [ 1 ] ;
1561: LD_ADDR_OWVAR 21
1565: PUSH
1566: LD_VAR 0 6
1570: PUSH
1571: LD_INT 1
1573: ARRAY
1574: ST_TO_ADDR
// vc_chassis := vehicles [ 2 ] ;
1575: LD_ADDR_OWVAR 37
1579: PUSH
1580: LD_VAR 0 6
1584: PUSH
1585: LD_INT 2
1587: ARRAY
1588: ST_TO_ADDR
// vc_engine := vehicles [ 3 ] ;
1589: LD_ADDR_OWVAR 39
1593: PUSH
1594: LD_VAR 0 6
1598: PUSH
1599: LD_INT 3
1601: ARRAY
1602: ST_TO_ADDR
// vc_control := vehicles [ 4 ] ;
1603: LD_ADDR_OWVAR 38
1607: PUSH
1608: LD_VAR 0 6
1612: PUSH
1613: LD_INT 4
1615: ARRAY
1616: ST_TO_ADDR
// vc_weapon := vehicles [ 5 ] ;
1617: LD_ADDR_OWVAR 40
1621: PUSH
1622: LD_VAR 0 6
1626: PUSH
1627: LD_INT 5
1629: ARRAY
1630: ST_TO_ADDR
// veh := CreateVehicle ;
1631: LD_ADDR_VAR 0 4
1635: PUSH
1636: CALL_OW 45
1640: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1641: LD_VAR 0 4
1645: PPUSH
1646: LD_INT 0
1648: PPUSH
1649: LD_INT 5
1651: PPUSH
1652: CALL_OW 12
1656: PPUSH
1657: CALL_OW 233
// PlaceUnitArea ( veh , parkingArea , false ) ;
1661: LD_VAR 0 4
1665: PPUSH
1666: LD_INT 4
1668: PPUSH
1669: LD_INT 0
1671: PPUSH
1672: CALL_OW 49
// for j := 1 to 5 do
1676: LD_ADDR_VAR 0 3
1680: PUSH
1681: DOUBLE
1682: LD_INT 1
1684: DEC
1685: ST_TO_ADDR
1686: LD_INT 5
1688: PUSH
1689: FOR_TO
1690: IFFALSE 1712
// vehicles := Delete ( vehicles , 1 ) ;
1692: LD_ADDR_VAR 0 6
1696: PUSH
1697: LD_VAR 0 6
1701: PPUSH
1702: LD_INT 1
1704: PPUSH
1705: CALL_OW 3
1709: ST_TO_ADDR
1710: GO 1689
1712: POP
1713: POP
// end ;
1714: GO 1558
1716: POP
1717: POP
// end ;
1718: LD_VAR 0 1
1722: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1723: LD_INT 0
1725: PPUSH
1726: PPUSH
1727: PPUSH
1728: PPUSH
1729: PPUSH
// uc_side := 1 ;
1730: LD_ADDR_OWVAR 20
1734: PUSH
1735: LD_INT 1
1737: ST_TO_ADDR
// uc_nation := 1 ;
1738: LD_ADDR_OWVAR 21
1742: PUSH
1743: LD_INT 1
1745: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1746: LD_ADDR_VAR 0 4
1750: PUSH
1751: LD_INT 22
1753: PUSH
1754: LD_INT 1
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: PUSH
1761: LD_INT 21
1763: PUSH
1764: LD_INT 3
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: PUSH
1771: LD_INT 30
1773: PUSH
1774: LD_INT 0
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: PUSH
1781: EMPTY
1782: LIST
1783: LIST
1784: LIST
1785: PPUSH
1786: CALL_OW 69
1790: ST_TO_ADDR
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) ;
1791: LD_ADDR_EXP 16
1795: PUSH
1796: LD_INT 22
1798: PUSH
1799: LD_INT 1
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: LD_INT 25
1808: PUSH
1809: LD_INT 4
1811: PUSH
1812: EMPTY
1813: LIST
1814: LIST
1815: PUSH
1816: LD_INT 26
1818: PUSH
1819: LD_INT 1
1821: PUSH
1822: EMPTY
1823: LIST
1824: LIST
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: LIST
1830: PUSH
1831: EMPTY
1832: LIST
1833: PPUSH
1834: CALL_OW 69
1838: PUSH
1839: LD_EXP 1
1843: PUSH
1844: LD_EXP 7
1848: PUSH
1849: LD_EXP 6
1853: PUSH
1854: LD_EXP 5
1858: PUSH
1859: LD_EXP 2
1863: PUSH
1864: LD_EXP 3
1868: PUSH
1869: LD_EXP 8
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: LIST
1882: DIFF
1883: ST_TO_ADDR
// if not deltaDoctor then
1884: LD_EXP 16
1888: NOT
1889: IFFALSE 2040
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
1891: LD_ADDR_VAR 0 5
1895: PUSH
1896: LD_INT 22
1898: PUSH
1899: LD_INT 1
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 26
1908: PUSH
1909: LD_INT 1
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: PUSH
1920: EMPTY
1921: LIST
1922: PPUSH
1923: CALL_OW 69
1927: PUSH
1928: LD_EXP 1
1932: PUSH
1933: LD_EXP 7
1937: PUSH
1938: LD_EXP 6
1942: PUSH
1943: LD_EXP 5
1947: PUSH
1948: LD_EXP 2
1952: PUSH
1953: LD_EXP 3
1957: PUSH
1958: LD_EXP 8
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: DIFF
1972: ST_TO_ADDR
// if filter then
1973: LD_VAR 0 5
1977: IFFALSE 2038
// for i in filter do
1979: LD_ADDR_VAR 0 2
1983: PUSH
1984: LD_VAR 0 5
1988: PUSH
1989: FOR_IN
1990: IFFALSE 2036
// if GetSkill ( i , 4 ) >= 4 then
1992: LD_VAR 0 2
1996: PPUSH
1997: LD_INT 4
1999: PPUSH
2000: CALL_OW 259
2004: PUSH
2005: LD_INT 4
2007: GREATEREQUAL
2008: IFFALSE 2034
// begin deltaDoctor := i ;
2010: LD_ADDR_EXP 16
2014: PUSH
2015: LD_VAR 0 2
2019: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
2020: LD_EXP 16
2024: PPUSH
2025: LD_INT 4
2027: PPUSH
2028: CALL_OW 336
// break ;
2032: GO 2036
// end ;
2034: GO 1989
2036: POP
2037: POP
// end else
2038: GO 2054
// deltaDoctor := deltaDoctor [ 1 ] ;
2040: LD_ADDR_EXP 16
2044: PUSH
2045: LD_EXP 16
2049: PUSH
2050: LD_INT 1
2052: ARRAY
2053: ST_TO_ADDR
// for i := 1 to 7 do
2054: LD_ADDR_VAR 0 2
2058: PUSH
2059: DOUBLE
2060: LD_INT 1
2062: DEC
2063: ST_TO_ADDR
2064: LD_INT 7
2066: PUSH
2067: FOR_TO
2068: IFFALSE 2205
// begin hc_gallery :=  ;
2070: LD_ADDR_OWVAR 33
2074: PUSH
2075: LD_STRING 
2077: ST_TO_ADDR
// hc_name :=  ;
2078: LD_ADDR_OWVAR 26
2082: PUSH
2083: LD_STRING 
2085: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) ) ;
2086: LD_INT 0
2088: PPUSH
2089: LD_INT 1
2091: PUSH
2092: LD_INT 2
2094: PUSH
2095: LD_INT 3
2097: PUSH
2098: LD_INT 4
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: PUSH
2107: LD_INT 1
2109: PPUSH
2110: LD_INT 4
2112: PPUSH
2113: CALL_OW 12
2117: ARRAY
2118: PPUSH
2119: LD_INT 3
2121: PPUSH
2122: LD_INT 5
2124: PPUSH
2125: CALL_OW 12
2129: PPUSH
2130: CALL_OW 380
// un := CreateHuman ;
2134: LD_ADDR_VAR 0 3
2138: PUSH
2139: CALL_OW 44
2143: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2144: LD_ADDR_EXP 12
2148: PUSH
2149: LD_EXP 12
2153: PUSH
2154: LD_VAR 0 3
2158: ADD
2159: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2160: LD_VAR 0 3
2164: PPUSH
2165: LD_VAR 0 4
2169: PUSH
2170: LD_INT 1
2172: ARRAY
2173: PPUSH
2174: CALL_OW 250
2178: PPUSH
2179: LD_VAR 0 4
2183: PUSH
2184: LD_INT 1
2186: ARRAY
2187: PPUSH
2188: CALL_OW 251
2192: PPUSH
2193: LD_INT 15
2195: PPUSH
2196: LD_INT 0
2198: PPUSH
2199: CALL_OW 50
// end ;
2203: GO 2067
2205: POP
2206: POP
// if deltaDoctor then
2207: LD_EXP 16
2211: IFFALSE 2215
// exit ;
2213: GO 2305
// hc_gallery := Dawkins ;
2215: LD_ADDR_OWVAR 33
2219: PUSH
2220: LD_STRING Dawkins
2222: ST_TO_ADDR
// hc_face_number := 1 ;
2223: LD_ADDR_OWVAR 34
2227: PUSH
2228: LD_INT 1
2230: ST_TO_ADDR
// hc_name := Dr. Adam Charles Dawkins ;
2231: LD_ADDR_OWVAR 26
2235: PUSH
2236: LD_STRING Dr. Adam Charles Dawkins
2238: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 5 ) ;
2239: LD_INT 1
2241: PPUSH
2242: LD_INT 4
2244: PPUSH
2245: LD_INT 5
2247: PPUSH
2248: CALL_OW 380
// deltaDoctor := CreateHuman ;
2252: LD_ADDR_EXP 16
2256: PUSH
2257: CALL_OW 44
2261: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2262: LD_EXP 16
2266: PPUSH
2267: LD_VAR 0 4
2271: PUSH
2272: LD_INT 1
2274: ARRAY
2275: PPUSH
2276: CALL_OW 250
2280: PPUSH
2281: LD_VAR 0 4
2285: PUSH
2286: LD_INT 1
2288: ARRAY
2289: PPUSH
2290: CALL_OW 251
2294: PPUSH
2295: LD_INT 5
2297: PPUSH
2298: LD_INT 0
2300: PPUSH
2301: CALL_OW 50
// end ; end_of_file
2305: LD_VAR 0 1
2309: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2310: LD_INT 0
2312: PPUSH
2313: PPUSH
2314: PPUSH
2315: PPUSH
2316: PPUSH
2317: PPUSH
2318: PPUSH
// buildings := LoadVariable ( buildingsInDelta , [ ] ) ;
2319: LD_ADDR_VAR 0 5
2323: PUSH
2324: LD_STRING buildingsInDelta
2326: PPUSH
2327: EMPTY
2328: PPUSH
2329: CALL_OW 30
2333: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2334: LD_INT 68
2336: PPUSH
2337: LD_INT 40
2339: PPUSH
2340: LD_INT 1
2342: PPUSH
2343: CALL_OW 441
// uc_side := 1 ;
2347: LD_ADDR_OWVAR 20
2351: PUSH
2352: LD_INT 1
2354: ST_TO_ADDR
// uc_nation := 1 ;
2355: LD_ADDR_OWVAR 21
2359: PUSH
2360: LD_INT 1
2362: ST_TO_ADDR
// for i := 1 to buildings do
2363: LD_ADDR_VAR 0 2
2367: PUSH
2368: DOUBLE
2369: LD_INT 1
2371: DEC
2372: ST_TO_ADDR
2373: LD_VAR 0 5
2377: PUSH
2378: FOR_TO
2379: IFFALSE 2694
// begin bc_type := buildings [ i ] [ 1 ] ;
2381: LD_ADDR_OWVAR 42
2385: PUSH
2386: LD_VAR 0 5
2390: PUSH
2391: LD_VAR 0 2
2395: ARRAY
2396: PUSH
2397: LD_INT 1
2399: ARRAY
2400: ST_TO_ADDR
// bc_level := buildings [ i ] [ 2 ] ;
2401: LD_ADDR_OWVAR 43
2405: PUSH
2406: LD_VAR 0 5
2410: PUSH
2411: LD_VAR 0 2
2415: ARRAY
2416: PUSH
2417: LD_INT 2
2419: ARRAY
2420: ST_TO_ADDR
// bc_kind1 := - 1 ;
2421: LD_ADDR_OWVAR 44
2425: PUSH
2426: LD_INT 1
2428: NEG
2429: ST_TO_ADDR
// bc_kind2 := - 1 ;
2430: LD_ADDR_OWVAR 45
2434: PUSH
2435: LD_INT 1
2437: NEG
2438: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half , b_lab_full ] then
2439: LD_OWVAR 42
2443: PUSH
2444: LD_INT 6
2446: PUSH
2447: LD_INT 7
2449: PUSH
2450: LD_INT 8
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: LIST
2457: IN
2458: IFFALSE 2582
// begin bc_kind1 := b_lab_basic ;
2460: LD_ADDR_OWVAR 44
2464: PUSH
2465: LD_INT 9
2467: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2468: LD_ADDR_OWVAR 45
2472: PUSH
2473: LD_INT 9
2475: ST_TO_ADDR
// if buildings [ i ] [ 6 ] then
2476: LD_VAR 0 5
2480: PUSH
2481: LD_VAR 0 2
2485: ARRAY
2486: PUSH
2487: LD_INT 6
2489: ARRAY
2490: IFFALSE 2558
// begin bc_kind1 := buildings [ i ] [ 6 ] ;
2492: LD_ADDR_OWVAR 44
2496: PUSH
2497: LD_VAR 0 5
2501: PUSH
2502: LD_VAR 0 2
2506: ARRAY
2507: PUSH
2508: LD_INT 6
2510: ARRAY
2511: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2512: LD_ADDR_OWVAR 45
2516: PUSH
2517: LD_INT 9
2519: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2520: LD_VAR 0 5
2524: PUSH
2525: LD_VAR 0 2
2529: ARRAY
2530: PUSH
2531: LD_INT 7
2533: ARRAY
2534: IFFALSE 2556
// bc_kind2 := buildings [ i ] [ 7 ] ;
2536: LD_ADDR_OWVAR 45
2540: PUSH
2541: LD_VAR 0 5
2545: PUSH
2546: LD_VAR 0 2
2550: ARRAY
2551: PUSH
2552: LD_INT 7
2554: ARRAY
2555: ST_TO_ADDR
// end else
2556: GO 2582
// begin bc_type := b_lab ;
2558: LD_ADDR_OWVAR 42
2562: PUSH
2563: LD_INT 6
2565: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
2566: LD_ADDR_OWVAR 44
2570: PUSH
2571: LD_INT 9
2573: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2574: LD_ADDR_OWVAR 45
2578: PUSH
2579: LD_INT 9
2581: ST_TO_ADDR
// end ; end ; building := CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2582: LD_ADDR_VAR 0 4
2586: PUSH
2587: LD_VAR 0 5
2591: PUSH
2592: LD_VAR 0 2
2596: ARRAY
2597: PUSH
2598: LD_INT 3
2600: ARRAY
2601: PPUSH
2602: LD_VAR 0 5
2606: PUSH
2607: LD_VAR 0 2
2611: ARRAY
2612: PUSH
2613: LD_INT 4
2615: ARRAY
2616: PPUSH
2617: LD_VAR 0 5
2621: PUSH
2622: LD_VAR 0 2
2626: ARRAY
2627: PUSH
2628: LD_INT 5
2630: ARRAY
2631: PPUSH
2632: CALL_OW 47
2636: ST_TO_ADDR
// if GetBType ( building ) = b_bunker and buildings [ i ] [ 8 ] then
2637: LD_VAR 0 4
2641: PPUSH
2642: CALL_OW 266
2646: PUSH
2647: LD_INT 32
2649: EQUAL
2650: PUSH
2651: LD_VAR 0 5
2655: PUSH
2656: LD_VAR 0 2
2660: ARRAY
2661: PUSH
2662: LD_INT 8
2664: ARRAY
2665: AND
2666: IFFALSE 2692
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2668: LD_VAR 0 4
2672: PPUSH
2673: LD_VAR 0 5
2677: PUSH
2678: LD_VAR 0 2
2682: ARRAY
2683: PUSH
2684: LD_INT 8
2686: ARRAY
2687: PPUSH
2688: CALL_OW 431
// end ;
2692: GO 2378
2694: POP
2695: POP
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2696: LD_ADDR_VAR 0 6
2700: PUSH
2701: LD_INT 22
2703: PUSH
2704: LD_INT 1
2706: PUSH
2707: EMPTY
2708: LIST
2709: LIST
2710: PUSH
2711: LD_INT 2
2713: PUSH
2714: LD_INT 30
2716: PUSH
2717: LD_INT 6
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: PUSH
2724: LD_INT 30
2726: PUSH
2727: LD_INT 7
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PUSH
2734: LD_INT 30
2736: PUSH
2737: LD_INT 8
2739: PUSH
2740: EMPTY
2741: LIST
2742: LIST
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: LIST
2748: LIST
2749: PUSH
2750: EMPTY
2751: LIST
2752: LIST
2753: PPUSH
2754: CALL_OW 69
2758: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2759: LD_ADDR_VAR 0 7
2763: PUSH
2764: LD_INT 22
2766: PUSH
2767: LD_INT 1
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 30
2776: PUSH
2777: LD_INT 0
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PPUSH
2788: CALL_OW 69
2792: ST_TO_ADDR
// if lab and tmp then
2793: LD_VAR 0 6
2797: PUSH
2798: LD_VAR 0 7
2802: AND
2803: IFFALSE 2813
// baseCorrect := 1 ;
2805: LD_ADDR_EXP 19
2809: PUSH
2810: LD_INT 1
2812: ST_TO_ADDR
// if not baseCorrect then
2813: LD_EXP 19
2817: NOT
2818: IFFALSE 3233
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2820: LD_ADDR_VAR 0 2
2824: PUSH
2825: LD_INT 22
2827: PUSH
2828: LD_INT 1
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PUSH
2835: LD_INT 21
2837: PUSH
2838: LD_INT 3
2840: PUSH
2841: EMPTY
2842: LIST
2843: LIST
2844: PUSH
2845: EMPTY
2846: LIST
2847: LIST
2848: PPUSH
2849: CALL_OW 69
2853: PUSH
2854: FOR_IN
2855: IFFALSE 2868
// RemoveUnit ( i ) ;
2857: LD_VAR 0 2
2861: PPUSH
2862: CALL_OW 64
2866: GO 2854
2868: POP
2869: POP
// uc_nation := 1 ;
2870: LD_ADDR_OWVAR 21
2874: PUSH
2875: LD_INT 1
2877: ST_TO_ADDR
// uc_side := 1 ;
2878: LD_ADDR_OWVAR 20
2882: PUSH
2883: LD_INT 1
2885: ST_TO_ADDR
// bc_level := 5 ;
2886: LD_ADDR_OWVAR 43
2890: PUSH
2891: LD_INT 5
2893: ST_TO_ADDR
// bc_type := b_depot ;
2894: LD_ADDR_OWVAR 42
2898: PUSH
2899: LD_INT 0
2901: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2902: LD_INT 50
2904: PPUSH
2905: LD_INT 22
2907: PPUSH
2908: LD_INT 0
2910: PPUSH
2911: CALL_OW 47
// bc_type = b_bunker ;
2915: LD_ADDR_OWVAR 42
2919: PUSH
2920: LD_INT 32
2922: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
2923: LD_ADDR_VAR 0 4
2927: PUSH
2928: LD_INT 68
2930: PPUSH
2931: LD_INT 24
2933: PPUSH
2934: LD_INT 4
2936: PPUSH
2937: CALL_OW 47
2941: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
2942: LD_VAR 0 4
2946: PPUSH
2947: LD_INT 4
2949: PUSH
2950: LD_INT 11
2952: PUSH
2953: EMPTY
2954: LIST
2955: LIST
2956: PUSH
2957: LD_INT 1
2959: PPUSH
2960: LD_INT 2
2962: PPUSH
2963: CALL_OW 12
2967: ARRAY
2968: PPUSH
2969: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
2973: LD_ADDR_VAR 0 4
2977: PUSH
2978: LD_INT 71
2980: PPUSH
2981: LD_INT 34
2983: PPUSH
2984: LD_INT 4
2986: PPUSH
2987: CALL_OW 47
2991: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
2992: LD_VAR 0 4
2996: PPUSH
2997: LD_INT 4
2999: PUSH
3000: LD_INT 11
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: PUSH
3007: LD_INT 1
3009: PPUSH
3010: LD_INT 2
3012: PPUSH
3013: CALL_OW 12
3017: ARRAY
3018: PPUSH
3019: CALL_OW 431
// bc_type := b_breastwork ;
3023: LD_ADDR_OWVAR 42
3027: PUSH
3028: LD_INT 31
3030: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
3031: LD_INT 51
3033: PPUSH
3034: LD_INT 7
3036: PPUSH
3037: LD_INT 3
3039: PPUSH
3040: CALL_OW 47
// bc_type := b_oil_mine ;
3044: LD_ADDR_OWVAR 42
3048: PUSH
3049: LD_INT 29
3051: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
3052: LD_INT 68
3054: PPUSH
3055: LD_INT 40
3057: PPUSH
3058: LD_INT 1
3060: PPUSH
3061: CALL_OW 47
// bc_type := b_factory ;
3065: LD_ADDR_OWVAR 42
3069: PUSH
3070: LD_INT 3
3072: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3073: LD_INT 38
3075: PPUSH
3076: LD_INT 20
3078: PPUSH
3079: LD_INT 2
3081: PPUSH
3082: CALL_OW 47
// bc_type := b_ext_noncombat ;
3086: LD_ADDR_OWVAR 42
3090: PUSH
3091: LD_INT 19
3093: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 24 , 2 ) ;
3094: LD_INT 38
3096: PPUSH
3097: LD_INT 24
3099: PPUSH
3100: LD_INT 2
3102: PPUSH
3103: CALL_OW 47
// bc_type := b_ext_radar ;
3107: LD_ADDR_OWVAR 42
3111: PUSH
3112: LD_INT 20
3114: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 35 , 20 , 1 ) ;
3115: LD_INT 35
3117: PPUSH
3118: LD_INT 20
3120: PPUSH
3121: LD_INT 1
3123: PPUSH
3124: CALL_OW 47
// bc_type := b_armoury ;
3128: LD_ADDR_OWVAR 42
3132: PUSH
3133: LD_INT 4
3135: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 33 , 28 , 1 ) ;
3136: LD_INT 33
3138: PPUSH
3139: LD_INT 28
3141: PPUSH
3142: LD_INT 1
3144: PPUSH
3145: CALL_OW 47
// bc_type := b_solar_power ;
3149: LD_ADDR_OWVAR 42
3153: PUSH
3154: LD_INT 27
3156: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3157: LD_INT 46
3159: PPUSH
3160: LD_INT 12
3162: PPUSH
3163: LD_INT 1
3165: PPUSH
3166: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3170: LD_INT 48
3172: PPUSH
3173: LD_INT 11
3175: PPUSH
3176: LD_INT 2
3178: PPUSH
3179: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 35 , 12 , 3 ) ;
3183: LD_INT 35
3185: PPUSH
3186: LD_INT 12
3188: PPUSH
3189: LD_INT 3
3191: PPUSH
3192: CALL_OW 47
// bc_type := b_lab_half ;
3196: LD_ADDR_OWVAR 42
3200: PUSH
3201: LD_INT 7
3203: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
3204: LD_ADDR_OWVAR 44
3208: PUSH
3209: LD_INT 15
3211: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
3212: LD_ADDR_OWVAR 45
3216: PUSH
3217: LD_INT 9
3219: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3220: LD_INT 42
3222: PPUSH
3223: LD_INT 15
3225: PPUSH
3226: LD_INT 2
3228: PPUSH
3229: CALL_OW 47
// end ; end ; end_of_file
3233: LD_VAR 0 1
3237: RET
// export function Action ; var i , j , tmp ; begin
3238: LD_INT 0
3240: PPUSH
3241: PPUSH
3242: PPUSH
3243: PPUSH
// InGameOn ;
3244: CALL_OW 8
// if lab then
3248: LD_EXP 21
3252: IFFALSE 3269
// CenterNowOnUnits ( lab [ 1 ] ) else
3254: LD_EXP 21
3258: PUSH
3259: LD_INT 1
3261: ARRAY
3262: PPUSH
3263: CALL_OW 87
3267: GO 3278
// CenterOnUnits ( JMM ) ;
3269: LD_EXP 1
3273: PPUSH
3274: CALL_OW 85
// if IsOK ( Denis ) then
3278: LD_EXP 3
3282: PPUSH
3283: CALL_OW 302
3287: IFFALSE 3315
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3289: LD_INT 6
3291: PPUSH
3292: LD_INT 1
3294: PPUSH
3295: LD_INT 2
3297: PPUSH
3298: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3302: LD_INT 20
3304: PPUSH
3305: LD_INT 1
3307: PPUSH
3308: LD_INT 1
3310: PPUSH
3311: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3315: LD_EXP 1
3319: PPUSH
3320: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3324: LD_EXP 1
3328: PPUSH
3329: LD_EXP 16
3333: PPUSH
3334: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3338: LD_INT 35
3340: PPUSH
3341: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3345: LD_EXP 16
3349: PPUSH
3350: LD_EXP 1
3354: PPUSH
3355: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3359: LD_EXP 1
3363: PPUSH
3364: LD_EXP 16
3368: PPUSH
3369: CALL_OW 296
3373: PUSH
3374: LD_INT 5
3376: LESS
3377: IFFALSE 3338
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3379: LD_EXP 16
3383: PPUSH
3384: LD_EXP 1
3388: PPUSH
3389: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3393: LD_EXP 1
3397: PPUSH
3398: LD_STRING D1-JMM-1
3400: PPUSH
3401: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3405: LD_EXP 16
3409: PPUSH
3410: LD_STRING D1-Sci-1
3412: PPUSH
3413: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3417: LD_EXP 1
3421: PUSH
3422: LD_EXP 16
3426: PUSH
3427: LD_EXP 3
3431: PUSH
3432: EMPTY
3433: LIST
3434: LIST
3435: LIST
3436: PPUSH
3437: LD_EXP 21
3441: PUSH
3442: LD_INT 1
3444: ARRAY
3445: PPUSH
3446: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
3450: LD_INT 35
3452: PPUSH
3453: CALL_OW 67
// until IsInUnit ( JMM ) and IsInUnit ( DeltaDoctor ) ;
3457: LD_EXP 1
3461: PPUSH
3462: CALL_OW 310
3466: PUSH
3467: LD_EXP 16
3471: PPUSH
3472: CALL_OW 310
3476: AND
3477: IFFALSE 3450
// CenterNowOnUnits ( lab [ 1 ] ) ;
3479: LD_EXP 21
3483: PUSH
3484: LD_INT 1
3486: ARRAY
3487: PPUSH
3488: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3492: LD_EXP 1
3496: PPUSH
3497: LD_STRING D1-JMM-2
3499: PPUSH
3500: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3504: LD_EXP 16
3508: PPUSH
3509: LD_STRING D1-Sci-2
3511: PPUSH
3512: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3516: LD_EXP 1
3520: PPUSH
3521: LD_STRING D1-JMM-3
3523: PPUSH
3524: CALL_OW 88
// if IsOK ( Denis ) then
3528: LD_EXP 3
3532: PPUSH
3533: CALL_OW 302
3537: IFFALSE 3553
// Say ( DeltaDoctor , D1-Sci-3 ) else
3539: LD_EXP 16
3543: PPUSH
3544: LD_STRING D1-Sci-3
3546: PPUSH
3547: CALL_OW 88
3551: GO 3565
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3553: LD_EXP 16
3557: PPUSH
3558: LD_STRING D1-Sci-3a
3560: PPUSH
3561: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3565: LD_EXP 1
3569: PPUSH
3570: LD_STRING D1-JMM-4
3572: PPUSH
3573: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3577: LD_ADDR_VAR 0 4
3581: PUSH
3582: LD_INT 22
3584: PUSH
3585: LD_INT 1
3587: PUSH
3588: EMPTY
3589: LIST
3590: LIST
3591: PUSH
3592: LD_INT 25
3594: PUSH
3595: LD_INT 4
3597: PUSH
3598: EMPTY
3599: LIST
3600: LIST
3601: PUSH
3602: LD_INT 3
3604: PUSH
3605: LD_INT 54
3607: PUSH
3608: EMPTY
3609: LIST
3610: PUSH
3611: EMPTY
3612: LIST
3613: LIST
3614: PUSH
3615: EMPTY
3616: LIST
3617: LIST
3618: LIST
3619: PPUSH
3620: CALL_OW 69
3624: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3625: LD_ADDR_VAR 0 2
3629: PUSH
3630: LD_INT 22
3632: PUSH
3633: LD_INT 0
3635: PUSH
3636: EMPTY
3637: LIST
3638: LIST
3639: PPUSH
3640: CALL_OW 69
3644: PUSH
3645: FOR_IN
3646: IFFALSE 3696
// for j in tmp do
3648: LD_ADDR_VAR 0 3
3652: PUSH
3653: LD_VAR 0 4
3657: PUSH
3658: FOR_IN
3659: IFFALSE 3692
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3661: LD_VAR 0 3
3665: PPUSH
3666: LD_VAR 0 2
3670: PPUSH
3671: CALL_OW 250
3675: PPUSH
3676: LD_VAR 0 2
3680: PPUSH
3681: CALL_OW 251
3685: PPUSH
3686: CALL_OW 191
3690: GO 3658
3692: POP
3693: POP
3694: GO 3645
3696: POP
3697: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3698: LD_EXP 16
3702: PPUSH
3703: LD_STRING D1-Sci-4
3705: PPUSH
3706: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3710: LD_EXP 1
3714: PPUSH
3715: LD_STRING D1-JMM-5
3717: PPUSH
3718: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3722: LD_EXP 16
3726: PPUSH
3727: LD_STRING D1-Sci-5
3729: PPUSH
3730: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3734: LD_EXP 1
3738: PPUSH
3739: LD_STRING D1-JMM-6
3741: PPUSH
3742: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3746: LD_EXP 17
3750: PPUSH
3751: LD_STRING D1-Har-6
3753: PPUSH
3754: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3758: LD_EXP 1
3762: PPUSH
3763: LD_STRING D1-JMM-7
3765: PPUSH
3766: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3770: LD_EXP 17
3774: PPUSH
3775: LD_STRING D1-Har-7
3777: PPUSH
3778: CALL_OW 94
// if IsOK ( Denis ) then
3782: LD_EXP 3
3786: PPUSH
3787: CALL_OW 302
3791: IFFALSE 3805
// Say ( JMM , D1-JMM-8 ) ;
3793: LD_EXP 1
3797: PPUSH
3798: LD_STRING D1-JMM-8
3800: PPUSH
3801: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3805: LD_EXP 1
3809: PPUSH
3810: LD_STRING D1-JMM-8a
3812: PPUSH
3813: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3817: LD_EXP 17
3821: PPUSH
3822: LD_STRING D1-Har-8
3824: PPUSH
3825: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3829: LD_EXP 1
3833: PPUSH
3834: LD_STRING D1-JMM-9
3836: PPUSH
3837: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3841: LD_EXP 17
3845: PPUSH
3846: LD_STRING D1-Har-9
3848: PPUSH
3849: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3853: LD_EXP 1
3857: PPUSH
3858: LD_STRING D1-JMM-10
3860: PPUSH
3861: CALL_OW 88
// if IsOK ( Denis ) then
3865: LD_EXP 3
3869: PPUSH
3870: CALL_OW 302
3874: IFFALSE 3888
// Say ( JMM , D1-JMM-10a ) ;
3876: LD_EXP 1
3880: PPUSH
3881: LD_STRING D1-JMM-10a
3883: PPUSH
3884: CALL_OW 88
// SelectDeltaCharacters ;
3888: CALL 4372 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 150 ) ;
3892: LD_EXP 21
3896: PUSH
3897: LD_INT 1
3899: ARRAY
3900: PPUSH
3901: CALL_OW 274
3905: PPUSH
3906: LD_INT 1
3908: PPUSH
3909: LD_INT 150
3911: PPUSH
3912: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) then
3916: LD_INT 22
3918: PUSH
3919: LD_INT 1
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: PUSH
3926: LD_INT 30
3928: PUSH
3929: LD_INT 29
3931: PUSH
3932: EMPTY
3933: LIST
3934: LIST
3935: PUSH
3936: EMPTY
3937: LIST
3938: LIST
3939: PPUSH
3940: CALL_OW 69
3944: IFFALSE 3970
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
3946: LD_EXP 21
3950: PUSH
3951: LD_INT 1
3953: ARRAY
3954: PPUSH
3955: CALL_OW 274
3959: PPUSH
3960: LD_INT 2
3962: PPUSH
3963: LD_INT 300
3965: PPUSH
3966: CALL_OW 277
// InGameOff ;
3970: CALL_OW 9
// Query ( Q1 ) ;
3974: LD_STRING Q1
3976: PPUSH
3977: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
3981: LD_INT 3
3983: PPUSH
3984: LD_INT 1
3986: PPUSH
3987: CALL_OW 424
// if IsInUnit ( JMM ) then
3991: LD_EXP 1
3995: PPUSH
3996: CALL_OW 310
4000: IFFALSE 4011
// ComExitBuilding ( JMM ) ;
4002: LD_EXP 1
4006: PPUSH
4007: CALL_OW 122
// end ;
4011: LD_VAR 0 1
4015: RET
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
4016: LD_INT 3
4018: PPUSH
4019: LD_INT 22
4021: PUSH
4022: LD_INT 1
4024: PUSH
4025: EMPTY
4026: LIST
4027: LIST
4028: PUSH
4029: LD_INT 21
4031: PUSH
4032: LD_INT 1
4034: PUSH
4035: EMPTY
4036: LIST
4037: LIST
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: PPUSH
4043: CALL_OW 71
4047: PUSH
4048: LD_INT 0
4050: EQUAL
4051: IFFALSE 4369
4053: GO 4055
4055: DISABLE
4056: LD_INT 0
4058: PPUSH
4059: PPUSH
// begin SaveDeltaCharacters ;
4060: CALL 4744 0 0
// if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) then
4064: LD_INT 3
4066: PPUSH
4067: LD_INT 21
4069: PUSH
4070: LD_INT 2
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: PUSH
4077: LD_INT 3
4079: PUSH
4080: LD_INT 58
4082: PUSH
4083: EMPTY
4084: LIST
4085: PUSH
4086: EMPTY
4087: LIST
4088: LIST
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: PPUSH
4094: CALL_OW 70
4098: IFFALSE 4355
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
4100: LD_ADDR_VAR 0 1
4104: PUSH
4105: LD_INT 3
4107: PPUSH
4108: LD_INT 21
4110: PUSH
4111: LD_INT 2
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: PUSH
4118: LD_INT 3
4120: PUSH
4121: LD_INT 58
4123: PUSH
4124: EMPTY
4125: LIST
4126: PUSH
4127: EMPTY
4128: LIST
4129: LIST
4130: PUSH
4131: EMPTY
4132: LIST
4133: LIST
4134: PPUSH
4135: CALL_OW 70
4139: PUSH
4140: FOR_IN
4141: IFFALSE 4353
// begin cargoType := GetCargoType ( i ) ;
4143: LD_ADDR_VAR 0 2
4147: PUSH
4148: LD_VAR 0 1
4152: PPUSH
4153: CALL_OW 288
4157: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4158: LD_VAR 0 1
4162: PPUSH
4163: CALL_OW 264
4167: PUSH
4168: LD_INT 12
4170: EQUAL
4171: IFFALSE 4268
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] else
4173: LD_ADDR_EXP 15
4177: PUSH
4178: LD_EXP 15
4182: PUSH
4183: LD_VAR 0 1
4187: PPUSH
4188: CALL_OW 248
4192: PUSH
4193: LD_VAR 0 1
4197: PPUSH
4198: CALL_OW 265
4202: PUSH
4203: LD_VAR 0 1
4207: PPUSH
4208: CALL_OW 262
4212: PUSH
4213: LD_VAR 0 1
4217: PPUSH
4218: CALL_OW 263
4222: PUSH
4223: LD_VAR 0 1
4227: PPUSH
4228: CALL_OW 264
4232: PUSH
4233: LD_VAR 0 2
4237: PUSH
4238: LD_VAR 0 1
4242: PPUSH
4243: LD_VAR 0 2
4247: PPUSH
4248: CALL_OW 289
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: PUSH
4262: EMPTY
4263: LIST
4264: ADD
4265: ST_TO_ADDR
4266: GO 4339
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4268: LD_ADDR_EXP 15
4272: PUSH
4273: LD_EXP 15
4277: PUSH
4278: LD_VAR 0 1
4282: PPUSH
4283: CALL_OW 248
4287: PUSH
4288: LD_VAR 0 1
4292: PPUSH
4293: CALL_OW 265
4297: PUSH
4298: LD_VAR 0 1
4302: PPUSH
4303: CALL_OW 262
4307: PUSH
4308: LD_VAR 0 1
4312: PPUSH
4313: CALL_OW 263
4317: PUSH
4318: LD_VAR 0 1
4322: PPUSH
4323: CALL_OW 264
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: LIST
4334: PUSH
4335: EMPTY
4336: LIST
4337: ADD
4338: ST_TO_ADDR
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4339: LD_EXP 15
4343: PPUSH
4344: LD_STRING 06_VehiclesIn06_1
4346: PPUSH
4347: CALL_OW 39
// end ;
4351: GO 4140
4353: POP
4354: POP
// end ; SaveCargos ;
4355: CALL 5524 0 0
// ChangeMap ( 6 , %_cont ) ;
4359: LD_INT 6
4361: PPUSH
4362: LD_STRING %_cont
4364: PPUSH
4365: CALL_OW 340
// end ; end_of_file
4369: PPOPN 2
4371: END
// export function SelectDeltaCharacters ; var i , yourPeople ; begin
4372: LD_INT 0
4374: PPUSH
4375: PPUSH
4376: PPUSH
// selectedPeople := [ ] ;
4377: LD_ADDR_EXP 18
4381: PUSH
4382: EMPTY
4383: ST_TO_ADDR
// yourPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4384: LD_ADDR_VAR 0 3
4388: PUSH
4389: LD_INT 22
4391: PUSH
4392: LD_INT 1
4394: PUSH
4395: EMPTY
4396: LIST
4397: LIST
4398: PUSH
4399: LD_INT 21
4401: PUSH
4402: LD_INT 1
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: PUSH
4409: LD_INT 2
4411: PUSH
4412: LD_INT 25
4414: PUSH
4415: LD_INT 1
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: PUSH
4422: LD_INT 25
4424: PUSH
4425: LD_INT 2
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: PUSH
4432: LD_INT 25
4434: PUSH
4435: LD_INT 3
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: PUSH
4442: LD_INT 25
4444: PUSH
4445: LD_INT 4
4447: PUSH
4448: EMPTY
4449: LIST
4450: LIST
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: LIST
4456: LIST
4457: LIST
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: LIST
4463: PPUSH
4464: CALL_OW 69
4468: PUSH
4469: LD_EXP 1
4473: PUSH
4474: LD_EXP 16
4478: PUSH
4479: LD_EXP 3
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: LIST
4488: DIFF
4489: ST_TO_ADDR
// selectedPeople := CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4490: LD_ADDR_EXP 18
4494: PUSH
4495: LD_STRING text
4497: PPUSH
4498: LD_INT 5
4500: PPUSH
4501: LD_INT 5
4503: PPUSH
4504: LD_INT -5
4506: PUSH
4507: LD_EXP 1
4511: PUSH
4512: LD_INT -6
4514: PUSH
4515: LD_INT -2
4517: PUSH
4518: LD_INT -3
4520: PUSH
4521: LD_INT -5
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: LIST
4531: PUSH
4532: LD_VAR 0 3
4536: ADD
4537: PUSH
4538: LD_INT -6
4540: PUSH
4541: LD_INT -4
4543: PUSH
4544: LD_EXP 3
4548: PUSH
4549: LD_EXP 16
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: LIST
4558: LIST
4559: ADD
4560: PPUSH
4561: LD_INT 1
4563: PUSH
4564: LD_INT 3
4566: PUSH
4567: LD_INT 2
4569: PUSH
4570: LD_INT 1
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: PUSH
4577: LD_INT 4
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: PPUSH
4586: CALL_OW 42
4590: ST_TO_ADDR
// ComStop ( selectedPeople ) ;
4591: LD_EXP 18
4595: PPUSH
4596: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4600: LD_INT 22
4602: PUSH
4603: LD_INT 1
4605: PUSH
4606: EMPTY
4607: LIST
4608: LIST
4609: PUSH
4610: LD_INT 21
4612: PUSH
4613: LD_INT 1
4615: PUSH
4616: EMPTY
4617: LIST
4618: LIST
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: PPUSH
4624: CALL_OW 69
4628: PPUSH
4629: LD_INT 4
4631: PPUSH
4632: CALL_OW 235
// for i in selectedPeople do
4636: LD_ADDR_VAR 0 2
4640: PUSH
4641: LD_EXP 18
4645: PUSH
4646: FOR_IN
4647: IFFALSE 4663
// SetSide ( i , 1 ) ;
4649: LD_VAR 0 2
4653: PPUSH
4654: LD_INT 1
4656: PPUSH
4657: CALL_OW 235
4661: GO 4646
4663: POP
4664: POP
// for i in yourApemans do
4665: LD_ADDR_VAR 0 2
4669: PUSH
4670: LD_EXP 14
4674: PUSH
4675: FOR_IN
4676: IFFALSE 4692
// SetSide ( i , 1 ) ;
4678: LD_VAR 0 2
4682: PPUSH
4683: LD_INT 1
4685: PPUSH
4686: CALL_OW 235
4690: GO 4675
4692: POP
4693: POP
// if Mike then
4694: LD_EXP 10
4698: IFFALSE 4712
// SetSide ( Mike , 1 ) ;
4700: LD_EXP 10
4704: PPUSH
4705: LD_INT 1
4707: PPUSH
4708: CALL_OW 235
// SetSide ( JMM , 1 ) ;
4712: LD_EXP 1
4716: PPUSH
4717: LD_INT 1
4719: PPUSH
4720: CALL_OW 235
// SetSkill ( yourApemans , 2 , 3 ) ;
4724: LD_EXP 14
4728: PPUSH
4729: LD_INT 2
4731: PPUSH
4732: LD_INT 3
4734: PPUSH
4735: CALL_OW 237
// end ;
4739: LD_VAR 0 1
4743: RET
// export function SaveDeltaCharacters ; begin
4744: LD_INT 0
4746: PPUSH
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4747: LD_EXP 1
4751: PPUSH
4752: LD_EXP 23
4756: PUSH
4757: LD_STRING JMM
4759: STR
4760: PPUSH
4761: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4765: LD_EXP 16
4769: PPUSH
4770: LD_STRING DeltaDoctor
4772: PPUSH
4773: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4777: LD_EXP 3
4781: PPUSH
4782: LD_EXP 23
4786: PUSH
4787: LD_STRING Denis
4789: STR
4790: PPUSH
4791: CALL_OW 38
// if Lisa in selectedPeople then
4795: LD_EXP 4
4799: PUSH
4800: LD_EXP 18
4804: IN
4805: IFFALSE 4837
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4807: LD_EXP 4
4811: PPUSH
4812: LD_EXP 23
4816: PUSH
4817: LD_STRING Lisa
4819: STR
4820: PPUSH
4821: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4825: LD_INT 1
4827: PPUSH
4828: LD_STRING LisaIn06
4830: PPUSH
4831: CALL_OW 39
// end else
4835: GO 4858
// if IsOk ( Lisa ) then
4837: LD_EXP 4
4841: PPUSH
4842: CALL_OW 302
4846: IFFALSE 4858
// SaveVariable ( 1 , LisaStayInDelta ) ;
4848: LD_INT 1
4850: PPUSH
4851: LD_STRING LisaStayInDelta
4853: PPUSH
4854: CALL_OW 39
// if Bobby in selectedPeople then
4858: LD_EXP 6
4862: PUSH
4863: LD_EXP 18
4867: IN
4868: IFFALSE 4900
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4870: LD_EXP 6
4874: PPUSH
4875: LD_EXP 23
4879: PUSH
4880: LD_STRING Bobby
4882: STR
4883: PPUSH
4884: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4888: LD_INT 1
4890: PPUSH
4891: LD_STRING BobbyIn06
4893: PPUSH
4894: CALL_OW 39
// end else
4898: GO 4921
// if IsOk ( Bobby ) then
4900: LD_EXP 6
4904: PPUSH
4905: CALL_OW 302
4909: IFFALSE 4921
// SaveVariable ( 1 , BobbyStayInDelta ) ;
4911: LD_INT 1
4913: PPUSH
4914: LD_STRING BobbyStayInDelta
4916: PPUSH
4917: CALL_OW 39
// if Cyrus in selectedPeople then
4921: LD_EXP 7
4925: PUSH
4926: LD_EXP 18
4930: IN
4931: IFFALSE 4963
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4933: LD_EXP 7
4937: PPUSH
4938: LD_EXP 23
4942: PUSH
4943: LD_STRING Cyrus
4945: STR
4946: PPUSH
4947: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
4951: LD_INT 1
4953: PPUSH
4954: LD_STRING CyrusIn06
4956: PPUSH
4957: CALL_OW 39
// end else
4961: GO 4984
// if IsOk ( Cyrus ) then
4963: LD_EXP 7
4967: PPUSH
4968: CALL_OW 302
4972: IFFALSE 4984
// SaveVariable ( 1 , CyrusStayInDelta ) ;
4974: LD_INT 1
4976: PPUSH
4977: LD_STRING CyrusStayInDelta
4979: PPUSH
4980: CALL_OW 39
// if Frank in selectedPeople then
4984: LD_EXP 5
4988: PUSH
4989: LD_EXP 18
4993: IN
4994: IFFALSE 5026
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
4996: LD_EXP 5
5000: PPUSH
5001: LD_EXP 23
5005: PUSH
5006: LD_STRING Frank
5008: STR
5009: PPUSH
5010: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
5014: LD_INT 1
5016: PPUSH
5017: LD_STRING FrankIn06
5019: PPUSH
5020: CALL_OW 39
// end else
5024: GO 5047
// if IsOk ( Frank ) then
5026: LD_EXP 5
5030: PPUSH
5031: CALL_OW 302
5035: IFFALSE 5047
// SaveVariable ( 1 , FrankStayInDelta ) ;
5037: LD_INT 1
5039: PPUSH
5040: LD_STRING FrankStayInDelta
5042: PPUSH
5043: CALL_OW 39
// if Brown in selectedPeople then
5047: LD_EXP 8
5051: PUSH
5052: LD_EXP 18
5056: IN
5057: IFFALSE 5089
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5059: LD_EXP 8
5063: PPUSH
5064: LD_EXP 23
5068: PUSH
5069: LD_STRING Brown
5071: STR
5072: PPUSH
5073: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
5077: LD_INT 1
5079: PPUSH
5080: LD_STRING BrownIn06
5082: PPUSH
5083: CALL_OW 39
// end else
5087: GO 5110
// if IsOk ( Brown ) then
5089: LD_EXP 8
5093: PPUSH
5094: CALL_OW 302
5098: IFFALSE 5110
// SaveVariable ( 1 , BrownStayInDelta ) ;
5100: LD_INT 1
5102: PPUSH
5103: LD_STRING BrownStayInDelta
5105: PPUSH
5106: CALL_OW 39
// if Donaldson in selectedPeople then
5110: LD_EXP 9
5114: PUSH
5115: LD_EXP 18
5119: IN
5120: IFFALSE 5152
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5122: LD_EXP 9
5126: PPUSH
5127: LD_EXP 23
5131: PUSH
5132: LD_STRING Donaldson
5134: STR
5135: PPUSH
5136: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5140: LD_INT 1
5142: PPUSH
5143: LD_STRING DonaldsonIn06
5145: PPUSH
5146: CALL_OW 39
// end else
5150: GO 5173
// if IsOk ( Donaldson ) then
5152: LD_EXP 9
5156: PPUSH
5157: CALL_OW 302
5161: IFFALSE 5173
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5163: LD_INT 1
5165: PPUSH
5166: LD_STRING DonaldsonStayInDelta
5168: PPUSH
5169: CALL_OW 39
// if Gladstone in selectedPeople then
5173: LD_EXP 2
5177: PUSH
5178: LD_EXP 18
5182: IN
5183: IFFALSE 5215
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5185: LD_EXP 2
5189: PPUSH
5190: LD_EXP 23
5194: PUSH
5195: LD_STRING Gladstone
5197: STR
5198: PPUSH
5199: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
5203: LD_INT 1
5205: PPUSH
5206: LD_STRING GladstoneIn06
5208: PPUSH
5209: CALL_OW 39
// end else
5213: GO 5236
// if IsOk ( Gladstone ) then
5215: LD_EXP 2
5219: PPUSH
5220: CALL_OW 302
5224: IFFALSE 5236
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5226: LD_INT 1
5228: PPUSH
5229: LD_STRING GladstoneStayInDelta
5231: PPUSH
5232: CALL_OW 39
// if Mike then
5236: LD_EXP 10
5240: IFFALSE 5260
// SaveCharacters ( Mike , mission_prefix & _Mike ) ;
5242: LD_EXP 10
5246: PPUSH
5247: LD_EXP 23
5251: PUSH
5252: LD_STRING _Mike
5254: STR
5255: PPUSH
5256: CALL_OW 38
// selectedPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ;
5260: LD_ADDR_EXP 18
5264: PUSH
5265: LD_INT 22
5267: PUSH
5268: LD_INT 1
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: PUSH
5275: LD_INT 23
5277: PUSH
5278: LD_INT 1
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: PUSH
5285: LD_INT 21
5287: PUSH
5288: LD_INT 1
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: LIST
5299: PPUSH
5300: CALL_OW 69
5304: ST_TO_ADDR
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5305: LD_EXP 14
5309: PPUSH
5310: LD_STRING ApeIn06
5312: PPUSH
5313: CALL_OW 38
// SaveCharacters ( selectedPeople diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersIn06 ) ;
5317: LD_EXP 18
5321: PUSH
5322: LD_EXP 1
5326: PUSH
5327: LD_EXP 4
5331: PUSH
5332: LD_EXP 6
5336: PUSH
5337: LD_EXP 7
5341: PUSH
5342: LD_EXP 5
5346: PUSH
5347: LD_EXP 8
5351: PUSH
5352: LD_EXP 9
5356: PUSH
5357: LD_EXP 2
5361: PUSH
5362: LD_EXP 3
5366: PUSH
5367: EMPTY
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: DIFF
5378: PPUSH
5379: LD_STRING OthersIn06
5381: PPUSH
5382: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersStayInDelta ) ;
5386: LD_INT 22
5388: PUSH
5389: LD_INT 4
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: PUSH
5396: LD_INT 2
5398: PUSH
5399: LD_INT 25
5401: PUSH
5402: LD_INT 1
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: PUSH
5409: LD_INT 25
5411: PUSH
5412: LD_INT 2
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: PUSH
5419: LD_INT 25
5421: PUSH
5422: LD_INT 3
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: PUSH
5429: LD_INT 25
5431: PUSH
5432: LD_INT 4
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: LIST
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: PPUSH
5450: CALL_OW 69
5454: PUSH
5455: LD_EXP 16
5459: PUSH
5460: LD_EXP 4
5464: PUSH
5465: LD_EXP 6
5469: PUSH
5470: LD_EXP 7
5474: PUSH
5475: LD_EXP 5
5479: PUSH
5480: LD_EXP 8
5484: PUSH
5485: LD_EXP 9
5489: PUSH
5490: LD_EXP 2
5494: PUSH
5495: LD_EXP 3
5499: PUSH
5500: EMPTY
5501: LIST
5502: LIST
5503: LIST
5504: LIST
5505: LIST
5506: LIST
5507: LIST
5508: LIST
5509: LIST
5510: DIFF
5511: PPUSH
5512: LD_STRING OthersStayInDelta
5514: PPUSH
5515: CALL_OW 38
// end ;
5519: LD_VAR 0 1
5523: RET
// export function SaveCargos ; var i ; begin
5524: LD_INT 0
5526: PPUSH
5527: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
5528: LD_ADDR_VAR 0 2
5532: PUSH
5533: LD_INT 3
5535: PPUSH
5536: LD_INT 22
5538: PUSH
5539: LD_INT 1
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: PUSH
5546: LD_INT 34
5548: PUSH
5549: LD_INT 12
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: PUSH
5556: EMPTY
5557: LIST
5558: LIST
5559: PPUSH
5560: CALL_OW 70
5564: PUSH
5565: FOR_IN
5566: IFFALSE 5594
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
5568: LD_ADDR_EXP 22
5572: PUSH
5573: LD_EXP 22
5577: PUSH
5578: LD_VAR 0 2
5582: PPUSH
5583: CALL 66758 0 1
5587: PUSH
5588: EMPTY
5589: LIST
5590: ADD
5591: ST_TO_ADDR
5592: GO 5565
5594: POP
5595: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
5596: LD_EXP 22
5600: PPUSH
5601: LD_STRING 06_ResourcesInCargo06_1
5603: PPUSH
5604: CALL_OW 39
// end ; end_of_file
5608: LD_VAR 0 1
5612: RET
// on Command ( comandid ) do var i ;
5613: LD_INT 0
5615: PPUSH
// begin if comandid = 65 then
5616: LD_VAR 0 1
5620: PUSH
5621: LD_INT 65
5623: EQUAL
5624: IFFALSE 5665
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5626: LD_ADDR_VAR 0 2
5630: PUSH
5631: LD_INT 22
5633: PUSH
5634: LD_INT 1
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: PUSH
5641: EMPTY
5642: LIST
5643: PPUSH
5644: CALL_OW 69
5648: PUSH
5649: FOR_IN
5650: IFFALSE 5663
// ComStop ( i ) ;
5652: LD_VAR 0 2
5656: PPUSH
5657: CALL_OW 141
5661: GO 5649
5663: POP
5664: POP
// end ;
5665: PPOPN 2
5667: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5668: LD_INT 0
5670: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5671: LD_ADDR_VAR 0 3
5675: PUSH
5676: LD_INT 22
5678: PUSH
5679: LD_INT 1
5681: PUSH
5682: EMPTY
5683: LIST
5684: LIST
5685: PUSH
5686: LD_INT 21
5688: PUSH
5689: LD_INT 3
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: PUSH
5696: LD_INT 30
5698: PUSH
5699: LD_INT 0
5701: PUSH
5702: EMPTY
5703: LIST
5704: LIST
5705: PUSH
5706: EMPTY
5707: LIST
5708: LIST
5709: LIST
5710: PPUSH
5711: CALL_OW 69
5715: ST_TO_ADDR
// if not tmp then
5716: LD_VAR 0 3
5720: NOT
5721: IFFALSE 5725
// exit ;
5723: GO 5755
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5725: LD_VAR 0 1
5729: PPUSH
5730: LD_VAR 0 3
5734: PUSH
5735: LD_INT 1
5737: ARRAY
5738: PPUSH
5739: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5743: LD_VAR 0 1
5747: PPUSH
5748: LD_INT 4
5750: PPUSH
5751: CALL_OW 235
// end ;
5755: PPOPN 3
5757: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5758: LD_VAR 0 1
5762: PUSH
5763: LD_EXP 1
5767: EQUAL
5768: IFFALSE 5777
// YouLost ( JMM ) ;
5770: LD_STRING JMM
5772: PPUSH
5773: CALL_OW 104
// SOS_UnitDestroyed ( un ) ;
5777: LD_VAR 0 1
5781: PPUSH
5782: CALL 21455 0 1
// end ;
5786: PPOPN 1
5788: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5789: LD_VAR 0 1
5793: PPUSH
5794: LD_VAR 0 2
5798: PPUSH
5799: CALL 21575 0 2
// end ; end_of_file
5803: PPOPN 2
5805: END
// every 0 0$1 do
5806: GO 5808
5808: DISABLE
// begin enable ;
5809: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5810: LD_STRING updateTimer(
5812: PUSH
5813: LD_OWVAR 1
5817: STR
5818: PUSH
5819: LD_STRING );
5821: STR
5822: PPUSH
5823: CALL_OW 559
// end ;
5827: END
// export function SOS_MapStart ( ) ; begin
5828: LD_INT 0
5830: PPUSH
// if streamModeActive then
5831: LD_EXP 25
5835: IFFALSE 5844
// DefineStreamItems ( true ) ;
5837: LD_INT 1
5839: PPUSH
5840: CALL 7498 0 1
// UpdateFactoryWaypoints ( ) ;
5844: CALL 20359 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5848: CALL 20616 0 0
// end ;
5852: LD_VAR 0 1
5856: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5857: LD_INT 0
5859: PPUSH
// if p2 = hack_mode then
5860: LD_VAR 0 2
5864: PUSH
5865: LD_INT 100
5867: EQUAL
5868: IFFALSE 6871
// begin if not StreamModeActive then
5870: LD_EXP 25
5874: NOT
5875: IFFALSE 5885
// StreamModeActive := true ;
5877: LD_ADDR_EXP 25
5881: PUSH
5882: LD_INT 1
5884: ST_TO_ADDR
// if p3 = 0 then
5885: LD_VAR 0 3
5889: PUSH
5890: LD_INT 0
5892: EQUAL
5893: IFFALSE 5899
// InitStreamMode ;
5895: CALL 7034 0 0
// if p3 = 1 then
5899: LD_VAR 0 3
5903: PUSH
5904: LD_INT 1
5906: EQUAL
5907: IFFALSE 5917
// sRocket := true ;
5909: LD_ADDR_EXP 30
5913: PUSH
5914: LD_INT 1
5916: ST_TO_ADDR
// if p3 = 2 then
5917: LD_VAR 0 3
5921: PUSH
5922: LD_INT 2
5924: EQUAL
5925: IFFALSE 5935
// sSpeed := true ;
5927: LD_ADDR_EXP 29
5931: PUSH
5932: LD_INT 1
5934: ST_TO_ADDR
// if p3 = 3 then
5935: LD_VAR 0 3
5939: PUSH
5940: LD_INT 3
5942: EQUAL
5943: IFFALSE 5953
// sEngine := true ;
5945: LD_ADDR_EXP 31
5949: PUSH
5950: LD_INT 1
5952: ST_TO_ADDR
// if p3 = 4 then
5953: LD_VAR 0 3
5957: PUSH
5958: LD_INT 4
5960: EQUAL
5961: IFFALSE 5971
// sSpec := true ;
5963: LD_ADDR_EXP 28
5967: PUSH
5968: LD_INT 1
5970: ST_TO_ADDR
// if p3 = 5 then
5971: LD_VAR 0 3
5975: PUSH
5976: LD_INT 5
5978: EQUAL
5979: IFFALSE 5989
// sLevel := true ;
5981: LD_ADDR_EXP 32
5985: PUSH
5986: LD_INT 1
5988: ST_TO_ADDR
// if p3 = 6 then
5989: LD_VAR 0 3
5993: PUSH
5994: LD_INT 6
5996: EQUAL
5997: IFFALSE 6007
// sArmoury := true ;
5999: LD_ADDR_EXP 33
6003: PUSH
6004: LD_INT 1
6006: ST_TO_ADDR
// if p3 = 7 then
6007: LD_VAR 0 3
6011: PUSH
6012: LD_INT 7
6014: EQUAL
6015: IFFALSE 6025
// sRadar := true ;
6017: LD_ADDR_EXP 34
6021: PUSH
6022: LD_INT 1
6024: ST_TO_ADDR
// if p3 = 8 then
6025: LD_VAR 0 3
6029: PUSH
6030: LD_INT 8
6032: EQUAL
6033: IFFALSE 6043
// sBunker := true ;
6035: LD_ADDR_EXP 35
6039: PUSH
6040: LD_INT 1
6042: ST_TO_ADDR
// if p3 = 9 then
6043: LD_VAR 0 3
6047: PUSH
6048: LD_INT 9
6050: EQUAL
6051: IFFALSE 6061
// sHack := true ;
6053: LD_ADDR_EXP 36
6057: PUSH
6058: LD_INT 1
6060: ST_TO_ADDR
// if p3 = 10 then
6061: LD_VAR 0 3
6065: PUSH
6066: LD_INT 10
6068: EQUAL
6069: IFFALSE 6079
// sFire := true ;
6071: LD_ADDR_EXP 37
6075: PUSH
6076: LD_INT 1
6078: ST_TO_ADDR
// if p3 = 11 then
6079: LD_VAR 0 3
6083: PUSH
6084: LD_INT 11
6086: EQUAL
6087: IFFALSE 6097
// sRefresh := true ;
6089: LD_ADDR_EXP 38
6093: PUSH
6094: LD_INT 1
6096: ST_TO_ADDR
// if p3 = 12 then
6097: LD_VAR 0 3
6101: PUSH
6102: LD_INT 12
6104: EQUAL
6105: IFFALSE 6115
// sExp := true ;
6107: LD_ADDR_EXP 39
6111: PUSH
6112: LD_INT 1
6114: ST_TO_ADDR
// if p3 = 13 then
6115: LD_VAR 0 3
6119: PUSH
6120: LD_INT 13
6122: EQUAL
6123: IFFALSE 6133
// sDepot := true ;
6125: LD_ADDR_EXP 40
6129: PUSH
6130: LD_INT 1
6132: ST_TO_ADDR
// if p3 = 14 then
6133: LD_VAR 0 3
6137: PUSH
6138: LD_INT 14
6140: EQUAL
6141: IFFALSE 6151
// sFlag := true ;
6143: LD_ADDR_EXP 41
6147: PUSH
6148: LD_INT 1
6150: ST_TO_ADDR
// if p3 = 15 then
6151: LD_VAR 0 3
6155: PUSH
6156: LD_INT 15
6158: EQUAL
6159: IFFALSE 6169
// sKamikadze := true ;
6161: LD_ADDR_EXP 49
6165: PUSH
6166: LD_INT 1
6168: ST_TO_ADDR
// if p3 = 16 then
6169: LD_VAR 0 3
6173: PUSH
6174: LD_INT 16
6176: EQUAL
6177: IFFALSE 6187
// sTroll := true ;
6179: LD_ADDR_EXP 50
6183: PUSH
6184: LD_INT 1
6186: ST_TO_ADDR
// if p3 = 17 then
6187: LD_VAR 0 3
6191: PUSH
6192: LD_INT 17
6194: EQUAL
6195: IFFALSE 6205
// sSlow := true ;
6197: LD_ADDR_EXP 51
6201: PUSH
6202: LD_INT 1
6204: ST_TO_ADDR
// if p3 = 18 then
6205: LD_VAR 0 3
6209: PUSH
6210: LD_INT 18
6212: EQUAL
6213: IFFALSE 6223
// sLack := true ;
6215: LD_ADDR_EXP 52
6219: PUSH
6220: LD_INT 1
6222: ST_TO_ADDR
// if p3 = 19 then
6223: LD_VAR 0 3
6227: PUSH
6228: LD_INT 19
6230: EQUAL
6231: IFFALSE 6241
// sTank := true ;
6233: LD_ADDR_EXP 54
6237: PUSH
6238: LD_INT 1
6240: ST_TO_ADDR
// if p3 = 20 then
6241: LD_VAR 0 3
6245: PUSH
6246: LD_INT 20
6248: EQUAL
6249: IFFALSE 6259
// sRemote := true ;
6251: LD_ADDR_EXP 55
6255: PUSH
6256: LD_INT 1
6258: ST_TO_ADDR
// if p3 = 21 then
6259: LD_VAR 0 3
6263: PUSH
6264: LD_INT 21
6266: EQUAL
6267: IFFALSE 6277
// sPowell := true ;
6269: LD_ADDR_EXP 56
6273: PUSH
6274: LD_INT 1
6276: ST_TO_ADDR
// if p3 = 22 then
6277: LD_VAR 0 3
6281: PUSH
6282: LD_INT 22
6284: EQUAL
6285: IFFALSE 6295
// sTeleport := true ;
6287: LD_ADDR_EXP 59
6291: PUSH
6292: LD_INT 1
6294: ST_TO_ADDR
// if p3 = 23 then
6295: LD_VAR 0 3
6299: PUSH
6300: LD_INT 23
6302: EQUAL
6303: IFFALSE 6313
// sOilTower := true ;
6305: LD_ADDR_EXP 61
6309: PUSH
6310: LD_INT 1
6312: ST_TO_ADDR
// if p3 = 24 then
6313: LD_VAR 0 3
6317: PUSH
6318: LD_INT 24
6320: EQUAL
6321: IFFALSE 6331
// sShovel := true ;
6323: LD_ADDR_EXP 62
6327: PUSH
6328: LD_INT 1
6330: ST_TO_ADDR
// if p3 = 25 then
6331: LD_VAR 0 3
6335: PUSH
6336: LD_INT 25
6338: EQUAL
6339: IFFALSE 6349
// sSheik := true ;
6341: LD_ADDR_EXP 63
6345: PUSH
6346: LD_INT 1
6348: ST_TO_ADDR
// if p3 = 26 then
6349: LD_VAR 0 3
6353: PUSH
6354: LD_INT 26
6356: EQUAL
6357: IFFALSE 6367
// sEarthquake := true ;
6359: LD_ADDR_EXP 65
6363: PUSH
6364: LD_INT 1
6366: ST_TO_ADDR
// if p3 = 27 then
6367: LD_VAR 0 3
6371: PUSH
6372: LD_INT 27
6374: EQUAL
6375: IFFALSE 6385
// sAI := true ;
6377: LD_ADDR_EXP 66
6381: PUSH
6382: LD_INT 1
6384: ST_TO_ADDR
// if p3 = 28 then
6385: LD_VAR 0 3
6389: PUSH
6390: LD_INT 28
6392: EQUAL
6393: IFFALSE 6403
// sCargo := true ;
6395: LD_ADDR_EXP 69
6399: PUSH
6400: LD_INT 1
6402: ST_TO_ADDR
// if p3 = 29 then
6403: LD_VAR 0 3
6407: PUSH
6408: LD_INT 29
6410: EQUAL
6411: IFFALSE 6421
// sDLaser := true ;
6413: LD_ADDR_EXP 70
6417: PUSH
6418: LD_INT 1
6420: ST_TO_ADDR
// if p3 = 30 then
6421: LD_VAR 0 3
6425: PUSH
6426: LD_INT 30
6428: EQUAL
6429: IFFALSE 6439
// sExchange := true ;
6431: LD_ADDR_EXP 71
6435: PUSH
6436: LD_INT 1
6438: ST_TO_ADDR
// if p3 = 31 then
6439: LD_VAR 0 3
6443: PUSH
6444: LD_INT 31
6446: EQUAL
6447: IFFALSE 6457
// sFac := true ;
6449: LD_ADDR_EXP 72
6453: PUSH
6454: LD_INT 1
6456: ST_TO_ADDR
// if p3 = 32 then
6457: LD_VAR 0 3
6461: PUSH
6462: LD_INT 32
6464: EQUAL
6465: IFFALSE 6475
// sPower := true ;
6467: LD_ADDR_EXP 73
6471: PUSH
6472: LD_INT 1
6474: ST_TO_ADDR
// if p3 = 33 then
6475: LD_VAR 0 3
6479: PUSH
6480: LD_INT 33
6482: EQUAL
6483: IFFALSE 6493
// sRandom := true ;
6485: LD_ADDR_EXP 74
6489: PUSH
6490: LD_INT 1
6492: ST_TO_ADDR
// if p3 = 34 then
6493: LD_VAR 0 3
6497: PUSH
6498: LD_INT 34
6500: EQUAL
6501: IFFALSE 6511
// sShield := true ;
6503: LD_ADDR_EXP 75
6507: PUSH
6508: LD_INT 1
6510: ST_TO_ADDR
// if p3 = 35 then
6511: LD_VAR 0 3
6515: PUSH
6516: LD_INT 35
6518: EQUAL
6519: IFFALSE 6529
// sTime := true ;
6521: LD_ADDR_EXP 76
6525: PUSH
6526: LD_INT 1
6528: ST_TO_ADDR
// if p3 = 36 then
6529: LD_VAR 0 3
6533: PUSH
6534: LD_INT 36
6536: EQUAL
6537: IFFALSE 6547
// sTools := true ;
6539: LD_ADDR_EXP 77
6543: PUSH
6544: LD_INT 1
6546: ST_TO_ADDR
// if p3 = 101 then
6547: LD_VAR 0 3
6551: PUSH
6552: LD_INT 101
6554: EQUAL
6555: IFFALSE 6565
// sSold := true ;
6557: LD_ADDR_EXP 42
6561: PUSH
6562: LD_INT 1
6564: ST_TO_ADDR
// if p3 = 102 then
6565: LD_VAR 0 3
6569: PUSH
6570: LD_INT 102
6572: EQUAL
6573: IFFALSE 6583
// sDiff := true ;
6575: LD_ADDR_EXP 43
6579: PUSH
6580: LD_INT 1
6582: ST_TO_ADDR
// if p3 = 103 then
6583: LD_VAR 0 3
6587: PUSH
6588: LD_INT 103
6590: EQUAL
6591: IFFALSE 6601
// sFog := true ;
6593: LD_ADDR_EXP 46
6597: PUSH
6598: LD_INT 1
6600: ST_TO_ADDR
// if p3 = 104 then
6601: LD_VAR 0 3
6605: PUSH
6606: LD_INT 104
6608: EQUAL
6609: IFFALSE 6619
// sReset := true ;
6611: LD_ADDR_EXP 47
6615: PUSH
6616: LD_INT 1
6618: ST_TO_ADDR
// if p3 = 105 then
6619: LD_VAR 0 3
6623: PUSH
6624: LD_INT 105
6626: EQUAL
6627: IFFALSE 6637
// sSun := true ;
6629: LD_ADDR_EXP 48
6633: PUSH
6634: LD_INT 1
6636: ST_TO_ADDR
// if p3 = 106 then
6637: LD_VAR 0 3
6641: PUSH
6642: LD_INT 106
6644: EQUAL
6645: IFFALSE 6655
// sTiger := true ;
6647: LD_ADDR_EXP 44
6651: PUSH
6652: LD_INT 1
6654: ST_TO_ADDR
// if p3 = 107 then
6655: LD_VAR 0 3
6659: PUSH
6660: LD_INT 107
6662: EQUAL
6663: IFFALSE 6673
// sBomb := true ;
6665: LD_ADDR_EXP 45
6669: PUSH
6670: LD_INT 1
6672: ST_TO_ADDR
// if p3 = 108 then
6673: LD_VAR 0 3
6677: PUSH
6678: LD_INT 108
6680: EQUAL
6681: IFFALSE 6691
// sWound := true ;
6683: LD_ADDR_EXP 53
6687: PUSH
6688: LD_INT 1
6690: ST_TO_ADDR
// if p3 = 109 then
6691: LD_VAR 0 3
6695: PUSH
6696: LD_INT 109
6698: EQUAL
6699: IFFALSE 6709
// sBetray := true ;
6701: LD_ADDR_EXP 57
6705: PUSH
6706: LD_INT 1
6708: ST_TO_ADDR
// if p3 = 110 then
6709: LD_VAR 0 3
6713: PUSH
6714: LD_INT 110
6716: EQUAL
6717: IFFALSE 6727
// sContamin := true ;
6719: LD_ADDR_EXP 58
6723: PUSH
6724: LD_INT 1
6726: ST_TO_ADDR
// if p3 = 111 then
6727: LD_VAR 0 3
6731: PUSH
6732: LD_INT 111
6734: EQUAL
6735: IFFALSE 6745
// sOil := true ;
6737: LD_ADDR_EXP 60
6741: PUSH
6742: LD_INT 1
6744: ST_TO_ADDR
// if p3 = 112 then
6745: LD_VAR 0 3
6749: PUSH
6750: LD_INT 112
6752: EQUAL
6753: IFFALSE 6763
// sStu := true ;
6755: LD_ADDR_EXP 64
6759: PUSH
6760: LD_INT 1
6762: ST_TO_ADDR
// if p3 = 113 then
6763: LD_VAR 0 3
6767: PUSH
6768: LD_INT 113
6770: EQUAL
6771: IFFALSE 6781
// sBazooka := true ;
6773: LD_ADDR_EXP 67
6777: PUSH
6778: LD_INT 1
6780: ST_TO_ADDR
// if p3 = 114 then
6781: LD_VAR 0 3
6785: PUSH
6786: LD_INT 114
6788: EQUAL
6789: IFFALSE 6799
// sMortar := true ;
6791: LD_ADDR_EXP 68
6795: PUSH
6796: LD_INT 1
6798: ST_TO_ADDR
// if p3 = 115 then
6799: LD_VAR 0 3
6803: PUSH
6804: LD_INT 115
6806: EQUAL
6807: IFFALSE 6817
// sRanger := true ;
6809: LD_ADDR_EXP 78
6813: PUSH
6814: LD_INT 1
6816: ST_TO_ADDR
// if p3 = 116 then
6817: LD_VAR 0 3
6821: PUSH
6822: LD_INT 116
6824: EQUAL
6825: IFFALSE 6835
// sComputer := true ;
6827: LD_ADDR_EXP 79
6831: PUSH
6832: LD_INT 1
6834: ST_TO_ADDR
// if p3 = 117 then
6835: LD_VAR 0 3
6839: PUSH
6840: LD_INT 117
6842: EQUAL
6843: IFFALSE 6853
// s30 := true ;
6845: LD_ADDR_EXP 80
6849: PUSH
6850: LD_INT 1
6852: ST_TO_ADDR
// if p3 = 118 then
6853: LD_VAR 0 3
6857: PUSH
6858: LD_INT 118
6860: EQUAL
6861: IFFALSE 6871
// s60 := true ;
6863: LD_ADDR_EXP 81
6867: PUSH
6868: LD_INT 1
6870: ST_TO_ADDR
// end ; if p2 = stream_mode then
6871: LD_VAR 0 2
6875: PUSH
6876: LD_INT 101
6878: EQUAL
6879: IFFALSE 7007
// begin case p3 of 1 :
6881: LD_VAR 0 3
6885: PUSH
6886: LD_INT 1
6888: DOUBLE
6889: EQUAL
6890: IFTRUE 6894
6892: GO 6901
6894: POP
// hHackUnlimitedResources ; 2 :
6895: CALL 19105 0 0
6899: GO 7007
6901: LD_INT 2
6903: DOUBLE
6904: EQUAL
6905: IFTRUE 6909
6907: GO 6916
6909: POP
// hHackSetLevel10 ; 3 :
6910: CALL 19238 0 0
6914: GO 7007
6916: LD_INT 3
6918: DOUBLE
6919: EQUAL
6920: IFTRUE 6924
6922: GO 6931
6924: POP
// hHackSetLevel10YourUnits ; 4 :
6925: CALL 19323 0 0
6929: GO 7007
6931: LD_INT 4
6933: DOUBLE
6934: EQUAL
6935: IFTRUE 6939
6937: GO 6946
6939: POP
// hHackInvincible ; 5 :
6940: CALL 19771 0 0
6944: GO 7007
6946: LD_INT 5
6948: DOUBLE
6949: EQUAL
6950: IFTRUE 6954
6952: GO 6961
6954: POP
// hHackInvisible ; 6 :
6955: CALL 19882 0 0
6959: GO 7007
6961: LD_INT 6
6963: DOUBLE
6964: EQUAL
6965: IFTRUE 6969
6967: GO 6976
6969: POP
// hHackChangeYourSide ; 7 :
6970: CALL 19939 0 0
6974: GO 7007
6976: LD_INT 7
6978: DOUBLE
6979: EQUAL
6980: IFTRUE 6984
6982: GO 6991
6984: POP
// hHackChangeUnitSide ; 8 :
6985: CALL 19981 0 0
6989: GO 7007
6991: LD_INT 8
6993: DOUBLE
6994: EQUAL
6995: IFTRUE 6999
6997: GO 7006
6999: POP
// hHackFog ; end ;
7000: CALL 20082 0 0
7004: GO 7007
7006: POP
// end ; end ;
7007: LD_VAR 0 7
7011: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
7012: GO 7014
7014: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7015: LD_STRING initStreamRollete();
7017: PPUSH
7018: CALL_OW 559
// InitStreamMode ;
7022: CALL 7034 0 0
// DefineStreamItems ( false ) ;
7026: LD_INT 0
7028: PPUSH
7029: CALL 7498 0 1
// end ;
7033: END
// function InitStreamMode ; begin
7034: LD_INT 0
7036: PPUSH
// streamModeActive := false ;
7037: LD_ADDR_EXP 25
7041: PUSH
7042: LD_INT 0
7044: ST_TO_ADDR
// normalCounter := 36 ;
7045: LD_ADDR_EXP 26
7049: PUSH
7050: LD_INT 36
7052: ST_TO_ADDR
// hardcoreCounter := 18 ;
7053: LD_ADDR_EXP 27
7057: PUSH
7058: LD_INT 18
7060: ST_TO_ADDR
// sRocket := false ;
7061: LD_ADDR_EXP 30
7065: PUSH
7066: LD_INT 0
7068: ST_TO_ADDR
// sSpeed := false ;
7069: LD_ADDR_EXP 29
7073: PUSH
7074: LD_INT 0
7076: ST_TO_ADDR
// sEngine := false ;
7077: LD_ADDR_EXP 31
7081: PUSH
7082: LD_INT 0
7084: ST_TO_ADDR
// sSpec := false ;
7085: LD_ADDR_EXP 28
7089: PUSH
7090: LD_INT 0
7092: ST_TO_ADDR
// sLevel := false ;
7093: LD_ADDR_EXP 32
7097: PUSH
7098: LD_INT 0
7100: ST_TO_ADDR
// sArmoury := false ;
7101: LD_ADDR_EXP 33
7105: PUSH
7106: LD_INT 0
7108: ST_TO_ADDR
// sRadar := false ;
7109: LD_ADDR_EXP 34
7113: PUSH
7114: LD_INT 0
7116: ST_TO_ADDR
// sBunker := false ;
7117: LD_ADDR_EXP 35
7121: PUSH
7122: LD_INT 0
7124: ST_TO_ADDR
// sHack := false ;
7125: LD_ADDR_EXP 36
7129: PUSH
7130: LD_INT 0
7132: ST_TO_ADDR
// sFire := false ;
7133: LD_ADDR_EXP 37
7137: PUSH
7138: LD_INT 0
7140: ST_TO_ADDR
// sRefresh := false ;
7141: LD_ADDR_EXP 38
7145: PUSH
7146: LD_INT 0
7148: ST_TO_ADDR
// sExp := false ;
7149: LD_ADDR_EXP 39
7153: PUSH
7154: LD_INT 0
7156: ST_TO_ADDR
// sDepot := false ;
7157: LD_ADDR_EXP 40
7161: PUSH
7162: LD_INT 0
7164: ST_TO_ADDR
// sFlag := false ;
7165: LD_ADDR_EXP 41
7169: PUSH
7170: LD_INT 0
7172: ST_TO_ADDR
// sKamikadze := false ;
7173: LD_ADDR_EXP 49
7177: PUSH
7178: LD_INT 0
7180: ST_TO_ADDR
// sTroll := false ;
7181: LD_ADDR_EXP 50
7185: PUSH
7186: LD_INT 0
7188: ST_TO_ADDR
// sSlow := false ;
7189: LD_ADDR_EXP 51
7193: PUSH
7194: LD_INT 0
7196: ST_TO_ADDR
// sLack := false ;
7197: LD_ADDR_EXP 52
7201: PUSH
7202: LD_INT 0
7204: ST_TO_ADDR
// sTank := false ;
7205: LD_ADDR_EXP 54
7209: PUSH
7210: LD_INT 0
7212: ST_TO_ADDR
// sRemote := false ;
7213: LD_ADDR_EXP 55
7217: PUSH
7218: LD_INT 0
7220: ST_TO_ADDR
// sPowell := false ;
7221: LD_ADDR_EXP 56
7225: PUSH
7226: LD_INT 0
7228: ST_TO_ADDR
// sTeleport := false ;
7229: LD_ADDR_EXP 59
7233: PUSH
7234: LD_INT 0
7236: ST_TO_ADDR
// sOilTower := false ;
7237: LD_ADDR_EXP 61
7241: PUSH
7242: LD_INT 0
7244: ST_TO_ADDR
// sShovel := false ;
7245: LD_ADDR_EXP 62
7249: PUSH
7250: LD_INT 0
7252: ST_TO_ADDR
// sSheik := false ;
7253: LD_ADDR_EXP 63
7257: PUSH
7258: LD_INT 0
7260: ST_TO_ADDR
// sEarthquake := false ;
7261: LD_ADDR_EXP 65
7265: PUSH
7266: LD_INT 0
7268: ST_TO_ADDR
// sAI := false ;
7269: LD_ADDR_EXP 66
7273: PUSH
7274: LD_INT 0
7276: ST_TO_ADDR
// sCargo := false ;
7277: LD_ADDR_EXP 69
7281: PUSH
7282: LD_INT 0
7284: ST_TO_ADDR
// sDLaser := false ;
7285: LD_ADDR_EXP 70
7289: PUSH
7290: LD_INT 0
7292: ST_TO_ADDR
// sExchange := false ;
7293: LD_ADDR_EXP 71
7297: PUSH
7298: LD_INT 0
7300: ST_TO_ADDR
// sFac := false ;
7301: LD_ADDR_EXP 72
7305: PUSH
7306: LD_INT 0
7308: ST_TO_ADDR
// sPower := false ;
7309: LD_ADDR_EXP 73
7313: PUSH
7314: LD_INT 0
7316: ST_TO_ADDR
// sRandom := false ;
7317: LD_ADDR_EXP 74
7321: PUSH
7322: LD_INT 0
7324: ST_TO_ADDR
// sShield := false ;
7325: LD_ADDR_EXP 75
7329: PUSH
7330: LD_INT 0
7332: ST_TO_ADDR
// sTime := false ;
7333: LD_ADDR_EXP 76
7337: PUSH
7338: LD_INT 0
7340: ST_TO_ADDR
// sTools := false ;
7341: LD_ADDR_EXP 77
7345: PUSH
7346: LD_INT 0
7348: ST_TO_ADDR
// sSold := false ;
7349: LD_ADDR_EXP 42
7353: PUSH
7354: LD_INT 0
7356: ST_TO_ADDR
// sDiff := false ;
7357: LD_ADDR_EXP 43
7361: PUSH
7362: LD_INT 0
7364: ST_TO_ADDR
// sFog := false ;
7365: LD_ADDR_EXP 46
7369: PUSH
7370: LD_INT 0
7372: ST_TO_ADDR
// sReset := false ;
7373: LD_ADDR_EXP 47
7377: PUSH
7378: LD_INT 0
7380: ST_TO_ADDR
// sSun := false ;
7381: LD_ADDR_EXP 48
7385: PUSH
7386: LD_INT 0
7388: ST_TO_ADDR
// sTiger := false ;
7389: LD_ADDR_EXP 44
7393: PUSH
7394: LD_INT 0
7396: ST_TO_ADDR
// sBomb := false ;
7397: LD_ADDR_EXP 45
7401: PUSH
7402: LD_INT 0
7404: ST_TO_ADDR
// sWound := false ;
7405: LD_ADDR_EXP 53
7409: PUSH
7410: LD_INT 0
7412: ST_TO_ADDR
// sBetray := false ;
7413: LD_ADDR_EXP 57
7417: PUSH
7418: LD_INT 0
7420: ST_TO_ADDR
// sContamin := false ;
7421: LD_ADDR_EXP 58
7425: PUSH
7426: LD_INT 0
7428: ST_TO_ADDR
// sOil := false ;
7429: LD_ADDR_EXP 60
7433: PUSH
7434: LD_INT 0
7436: ST_TO_ADDR
// sStu := false ;
7437: LD_ADDR_EXP 64
7441: PUSH
7442: LD_INT 0
7444: ST_TO_ADDR
// sBazooka := false ;
7445: LD_ADDR_EXP 67
7449: PUSH
7450: LD_INT 0
7452: ST_TO_ADDR
// sMortar := false ;
7453: LD_ADDR_EXP 68
7457: PUSH
7458: LD_INT 0
7460: ST_TO_ADDR
// sRanger := false ;
7461: LD_ADDR_EXP 78
7465: PUSH
7466: LD_INT 0
7468: ST_TO_ADDR
// sComputer := false ;
7469: LD_ADDR_EXP 79
7473: PUSH
7474: LD_INT 0
7476: ST_TO_ADDR
// s30 := false ;
7477: LD_ADDR_EXP 80
7481: PUSH
7482: LD_INT 0
7484: ST_TO_ADDR
// s60 := false ;
7485: LD_ADDR_EXP 81
7489: PUSH
7490: LD_INT 0
7492: ST_TO_ADDR
// end ;
7493: LD_VAR 0 1
7497: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7498: LD_INT 0
7500: PPUSH
7501: PPUSH
7502: PPUSH
7503: PPUSH
7504: PPUSH
7505: PPUSH
7506: PPUSH
// result := [ ] ;
7507: LD_ADDR_VAR 0 2
7511: PUSH
7512: EMPTY
7513: ST_TO_ADDR
// if campaign_id = 1 then
7514: LD_OWVAR 69
7518: PUSH
7519: LD_INT 1
7521: EQUAL
7522: IFFALSE 10688
// begin case mission_number of 1 :
7524: LD_OWVAR 70
7528: PUSH
7529: LD_INT 1
7531: DOUBLE
7532: EQUAL
7533: IFTRUE 7537
7535: GO 7613
7537: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7538: LD_ADDR_VAR 0 2
7542: PUSH
7543: LD_INT 2
7545: PUSH
7546: LD_INT 4
7548: PUSH
7549: LD_INT 11
7551: PUSH
7552: LD_INT 12
7554: PUSH
7555: LD_INT 15
7557: PUSH
7558: LD_INT 16
7560: PUSH
7561: LD_INT 22
7563: PUSH
7564: LD_INT 23
7566: PUSH
7567: LD_INT 26
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: PUSH
7581: LD_INT 101
7583: PUSH
7584: LD_INT 102
7586: PUSH
7587: LD_INT 106
7589: PUSH
7590: LD_INT 116
7592: PUSH
7593: LD_INT 117
7595: PUSH
7596: LD_INT 118
7598: PUSH
7599: EMPTY
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: ST_TO_ADDR
7611: GO 10686
7613: LD_INT 2
7615: DOUBLE
7616: EQUAL
7617: IFTRUE 7621
7619: GO 7705
7621: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7622: LD_ADDR_VAR 0 2
7626: PUSH
7627: LD_INT 2
7629: PUSH
7630: LD_INT 4
7632: PUSH
7633: LD_INT 11
7635: PUSH
7636: LD_INT 12
7638: PUSH
7639: LD_INT 15
7641: PUSH
7642: LD_INT 16
7644: PUSH
7645: LD_INT 22
7647: PUSH
7648: LD_INT 23
7650: PUSH
7651: LD_INT 26
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: LIST
7663: LIST
7664: PUSH
7665: LD_INT 101
7667: PUSH
7668: LD_INT 102
7670: PUSH
7671: LD_INT 105
7673: PUSH
7674: LD_INT 106
7676: PUSH
7677: LD_INT 108
7679: PUSH
7680: LD_INT 116
7682: PUSH
7683: LD_INT 117
7685: PUSH
7686: LD_INT 118
7688: PUSH
7689: EMPTY
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: LIST
7698: PUSH
7699: EMPTY
7700: LIST
7701: LIST
7702: ST_TO_ADDR
7703: GO 10686
7705: LD_INT 3
7707: DOUBLE
7708: EQUAL
7709: IFTRUE 7713
7711: GO 7801
7713: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7714: LD_ADDR_VAR 0 2
7718: PUSH
7719: LD_INT 2
7721: PUSH
7722: LD_INT 4
7724: PUSH
7725: LD_INT 5
7727: PUSH
7728: LD_INT 11
7730: PUSH
7731: LD_INT 12
7733: PUSH
7734: LD_INT 15
7736: PUSH
7737: LD_INT 16
7739: PUSH
7740: LD_INT 22
7742: PUSH
7743: LD_INT 26
7745: PUSH
7746: LD_INT 36
7748: PUSH
7749: EMPTY
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: PUSH
7761: LD_INT 101
7763: PUSH
7764: LD_INT 102
7766: PUSH
7767: LD_INT 105
7769: PUSH
7770: LD_INT 106
7772: PUSH
7773: LD_INT 108
7775: PUSH
7776: LD_INT 116
7778: PUSH
7779: LD_INT 117
7781: PUSH
7782: LD_INT 118
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: ST_TO_ADDR
7799: GO 10686
7801: LD_INT 4
7803: DOUBLE
7804: EQUAL
7805: IFTRUE 7809
7807: GO 7905
7809: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7810: LD_ADDR_VAR 0 2
7814: PUSH
7815: LD_INT 2
7817: PUSH
7818: LD_INT 4
7820: PUSH
7821: LD_INT 5
7823: PUSH
7824: LD_INT 8
7826: PUSH
7827: LD_INT 11
7829: PUSH
7830: LD_INT 12
7832: PUSH
7833: LD_INT 15
7835: PUSH
7836: LD_INT 16
7838: PUSH
7839: LD_INT 22
7841: PUSH
7842: LD_INT 23
7844: PUSH
7845: LD_INT 26
7847: PUSH
7848: LD_INT 36
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: PUSH
7865: LD_INT 101
7867: PUSH
7868: LD_INT 102
7870: PUSH
7871: LD_INT 105
7873: PUSH
7874: LD_INT 106
7876: PUSH
7877: LD_INT 108
7879: PUSH
7880: LD_INT 116
7882: PUSH
7883: LD_INT 117
7885: PUSH
7886: LD_INT 118
7888: PUSH
7889: EMPTY
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: ST_TO_ADDR
7903: GO 10686
7905: LD_INT 5
7907: DOUBLE
7908: EQUAL
7909: IFTRUE 7913
7911: GO 8025
7913: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7914: LD_ADDR_VAR 0 2
7918: PUSH
7919: LD_INT 2
7921: PUSH
7922: LD_INT 4
7924: PUSH
7925: LD_INT 5
7927: PUSH
7928: LD_INT 6
7930: PUSH
7931: LD_INT 8
7933: PUSH
7934: LD_INT 11
7936: PUSH
7937: LD_INT 12
7939: PUSH
7940: LD_INT 15
7942: PUSH
7943: LD_INT 16
7945: PUSH
7946: LD_INT 22
7948: PUSH
7949: LD_INT 23
7951: PUSH
7952: LD_INT 25
7954: PUSH
7955: LD_INT 26
7957: PUSH
7958: LD_INT 36
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: LIST
7973: LIST
7974: LIST
7975: LIST
7976: PUSH
7977: LD_INT 101
7979: PUSH
7980: LD_INT 102
7982: PUSH
7983: LD_INT 105
7985: PUSH
7986: LD_INT 106
7988: PUSH
7989: LD_INT 108
7991: PUSH
7992: LD_INT 109
7994: PUSH
7995: LD_INT 112
7997: PUSH
7998: LD_INT 116
8000: PUSH
8001: LD_INT 117
8003: PUSH
8004: LD_INT 118
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: ST_TO_ADDR
8023: GO 10686
8025: LD_INT 6
8027: DOUBLE
8028: EQUAL
8029: IFTRUE 8033
8031: GO 8165
8033: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
8034: LD_ADDR_VAR 0 2
8038: PUSH
8039: LD_INT 2
8041: PUSH
8042: LD_INT 4
8044: PUSH
8045: LD_INT 5
8047: PUSH
8048: LD_INT 6
8050: PUSH
8051: LD_INT 8
8053: PUSH
8054: LD_INT 11
8056: PUSH
8057: LD_INT 12
8059: PUSH
8060: LD_INT 15
8062: PUSH
8063: LD_INT 16
8065: PUSH
8066: LD_INT 20
8068: PUSH
8069: LD_INT 21
8071: PUSH
8072: LD_INT 22
8074: PUSH
8075: LD_INT 23
8077: PUSH
8078: LD_INT 25
8080: PUSH
8081: LD_INT 26
8083: PUSH
8084: LD_INT 30
8086: PUSH
8087: LD_INT 31
8089: PUSH
8090: LD_INT 32
8092: PUSH
8093: LD_INT 36
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: PUSH
8117: LD_INT 101
8119: PUSH
8120: LD_INT 102
8122: PUSH
8123: LD_INT 105
8125: PUSH
8126: LD_INT 106
8128: PUSH
8129: LD_INT 108
8131: PUSH
8132: LD_INT 109
8134: PUSH
8135: LD_INT 112
8137: PUSH
8138: LD_INT 116
8140: PUSH
8141: LD_INT 117
8143: PUSH
8144: LD_INT 118
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: ST_TO_ADDR
8163: GO 10686
8165: LD_INT 7
8167: DOUBLE
8168: EQUAL
8169: IFTRUE 8173
8171: GO 8285
8173: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8174: LD_ADDR_VAR 0 2
8178: PUSH
8179: LD_INT 2
8181: PUSH
8182: LD_INT 4
8184: PUSH
8185: LD_INT 5
8187: PUSH
8188: LD_INT 7
8190: PUSH
8191: LD_INT 11
8193: PUSH
8194: LD_INT 12
8196: PUSH
8197: LD_INT 15
8199: PUSH
8200: LD_INT 16
8202: PUSH
8203: LD_INT 20
8205: PUSH
8206: LD_INT 21
8208: PUSH
8209: LD_INT 22
8211: PUSH
8212: LD_INT 23
8214: PUSH
8215: LD_INT 25
8217: PUSH
8218: LD_INT 26
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: PUSH
8237: LD_INT 101
8239: PUSH
8240: LD_INT 102
8242: PUSH
8243: LD_INT 103
8245: PUSH
8246: LD_INT 105
8248: PUSH
8249: LD_INT 106
8251: PUSH
8252: LD_INT 108
8254: PUSH
8255: LD_INT 112
8257: PUSH
8258: LD_INT 116
8260: PUSH
8261: LD_INT 117
8263: PUSH
8264: LD_INT 118
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: ST_TO_ADDR
8283: GO 10686
8285: LD_INT 8
8287: DOUBLE
8288: EQUAL
8289: IFTRUE 8293
8291: GO 8433
8293: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8294: LD_ADDR_VAR 0 2
8298: PUSH
8299: LD_INT 2
8301: PUSH
8302: LD_INT 4
8304: PUSH
8305: LD_INT 5
8307: PUSH
8308: LD_INT 6
8310: PUSH
8311: LD_INT 7
8313: PUSH
8314: LD_INT 8
8316: PUSH
8317: LD_INT 11
8319: PUSH
8320: LD_INT 12
8322: PUSH
8323: LD_INT 15
8325: PUSH
8326: LD_INT 16
8328: PUSH
8329: LD_INT 20
8331: PUSH
8332: LD_INT 21
8334: PUSH
8335: LD_INT 22
8337: PUSH
8338: LD_INT 23
8340: PUSH
8341: LD_INT 25
8343: PUSH
8344: LD_INT 26
8346: PUSH
8347: LD_INT 30
8349: PUSH
8350: LD_INT 31
8352: PUSH
8353: LD_INT 32
8355: PUSH
8356: LD_INT 36
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: PUSH
8381: LD_INT 101
8383: PUSH
8384: LD_INT 102
8386: PUSH
8387: LD_INT 103
8389: PUSH
8390: LD_INT 105
8392: PUSH
8393: LD_INT 106
8395: PUSH
8396: LD_INT 108
8398: PUSH
8399: LD_INT 109
8401: PUSH
8402: LD_INT 112
8404: PUSH
8405: LD_INT 116
8407: PUSH
8408: LD_INT 117
8410: PUSH
8411: LD_INT 118
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: LIST
8418: LIST
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: LIST
8424: LIST
8425: LIST
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: ST_TO_ADDR
8431: GO 10686
8433: LD_INT 9
8435: DOUBLE
8436: EQUAL
8437: IFTRUE 8441
8439: GO 8589
8441: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8442: LD_ADDR_VAR 0 2
8446: PUSH
8447: LD_INT 2
8449: PUSH
8450: LD_INT 4
8452: PUSH
8453: LD_INT 5
8455: PUSH
8456: LD_INT 6
8458: PUSH
8459: LD_INT 7
8461: PUSH
8462: LD_INT 8
8464: PUSH
8465: LD_INT 11
8467: PUSH
8468: LD_INT 12
8470: PUSH
8471: LD_INT 15
8473: PUSH
8474: LD_INT 16
8476: PUSH
8477: LD_INT 20
8479: PUSH
8480: LD_INT 21
8482: PUSH
8483: LD_INT 22
8485: PUSH
8486: LD_INT 23
8488: PUSH
8489: LD_INT 25
8491: PUSH
8492: LD_INT 26
8494: PUSH
8495: LD_INT 28
8497: PUSH
8498: LD_INT 30
8500: PUSH
8501: LD_INT 31
8503: PUSH
8504: LD_INT 32
8506: PUSH
8507: LD_INT 36
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 101
8535: PUSH
8536: LD_INT 102
8538: PUSH
8539: LD_INT 103
8541: PUSH
8542: LD_INT 105
8544: PUSH
8545: LD_INT 106
8547: PUSH
8548: LD_INT 108
8550: PUSH
8551: LD_INT 109
8553: PUSH
8554: LD_INT 112
8556: PUSH
8557: LD_INT 114
8559: PUSH
8560: LD_INT 116
8562: PUSH
8563: LD_INT 117
8565: PUSH
8566: LD_INT 118
8568: PUSH
8569: EMPTY
8570: LIST
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: ST_TO_ADDR
8587: GO 10686
8589: LD_INT 10
8591: DOUBLE
8592: EQUAL
8593: IFTRUE 8597
8595: GO 8793
8597: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8598: LD_ADDR_VAR 0 2
8602: PUSH
8603: LD_INT 2
8605: PUSH
8606: LD_INT 4
8608: PUSH
8609: LD_INT 5
8611: PUSH
8612: LD_INT 6
8614: PUSH
8615: LD_INT 7
8617: PUSH
8618: LD_INT 8
8620: PUSH
8621: LD_INT 9
8623: PUSH
8624: LD_INT 10
8626: PUSH
8627: LD_INT 11
8629: PUSH
8630: LD_INT 12
8632: PUSH
8633: LD_INT 13
8635: PUSH
8636: LD_INT 14
8638: PUSH
8639: LD_INT 15
8641: PUSH
8642: LD_INT 16
8644: PUSH
8645: LD_INT 17
8647: PUSH
8648: LD_INT 18
8650: PUSH
8651: LD_INT 19
8653: PUSH
8654: LD_INT 20
8656: PUSH
8657: LD_INT 21
8659: PUSH
8660: LD_INT 22
8662: PUSH
8663: LD_INT 23
8665: PUSH
8666: LD_INT 24
8668: PUSH
8669: LD_INT 25
8671: PUSH
8672: LD_INT 26
8674: PUSH
8675: LD_INT 28
8677: PUSH
8678: LD_INT 30
8680: PUSH
8681: LD_INT 31
8683: PUSH
8684: LD_INT 32
8686: PUSH
8687: LD_INT 36
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: PUSH
8721: LD_INT 101
8723: PUSH
8724: LD_INT 102
8726: PUSH
8727: LD_INT 103
8729: PUSH
8730: LD_INT 104
8732: PUSH
8733: LD_INT 105
8735: PUSH
8736: LD_INT 106
8738: PUSH
8739: LD_INT 107
8741: PUSH
8742: LD_INT 108
8744: PUSH
8745: LD_INT 109
8747: PUSH
8748: LD_INT 110
8750: PUSH
8751: LD_INT 111
8753: PUSH
8754: LD_INT 112
8756: PUSH
8757: LD_INT 114
8759: PUSH
8760: LD_INT 116
8762: PUSH
8763: LD_INT 117
8765: PUSH
8766: LD_INT 118
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: LIST
8782: LIST
8783: LIST
8784: LIST
8785: LIST
8786: PUSH
8787: EMPTY
8788: LIST
8789: LIST
8790: ST_TO_ADDR
8791: GO 10686
8793: LD_INT 11
8795: DOUBLE
8796: EQUAL
8797: IFTRUE 8801
8799: GO 9005
8801: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8802: LD_ADDR_VAR 0 2
8806: PUSH
8807: LD_INT 2
8809: PUSH
8810: LD_INT 3
8812: PUSH
8813: LD_INT 4
8815: PUSH
8816: LD_INT 5
8818: PUSH
8819: LD_INT 6
8821: PUSH
8822: LD_INT 7
8824: PUSH
8825: LD_INT 8
8827: PUSH
8828: LD_INT 9
8830: PUSH
8831: LD_INT 10
8833: PUSH
8834: LD_INT 11
8836: PUSH
8837: LD_INT 12
8839: PUSH
8840: LD_INT 13
8842: PUSH
8843: LD_INT 14
8845: PUSH
8846: LD_INT 15
8848: PUSH
8849: LD_INT 16
8851: PUSH
8852: LD_INT 17
8854: PUSH
8855: LD_INT 18
8857: PUSH
8858: LD_INT 19
8860: PUSH
8861: LD_INT 20
8863: PUSH
8864: LD_INT 21
8866: PUSH
8867: LD_INT 22
8869: PUSH
8870: LD_INT 23
8872: PUSH
8873: LD_INT 24
8875: PUSH
8876: LD_INT 25
8878: PUSH
8879: LD_INT 26
8881: PUSH
8882: LD_INT 28
8884: PUSH
8885: LD_INT 30
8887: PUSH
8888: LD_INT 31
8890: PUSH
8891: LD_INT 32
8893: PUSH
8894: LD_INT 34
8896: PUSH
8897: LD_INT 36
8899: PUSH
8900: EMPTY
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: PUSH
8933: LD_INT 101
8935: PUSH
8936: LD_INT 102
8938: PUSH
8939: LD_INT 103
8941: PUSH
8942: LD_INT 104
8944: PUSH
8945: LD_INT 105
8947: PUSH
8948: LD_INT 106
8950: PUSH
8951: LD_INT 107
8953: PUSH
8954: LD_INT 108
8956: PUSH
8957: LD_INT 109
8959: PUSH
8960: LD_INT 110
8962: PUSH
8963: LD_INT 111
8965: PUSH
8966: LD_INT 112
8968: PUSH
8969: LD_INT 114
8971: PUSH
8972: LD_INT 116
8974: PUSH
8975: LD_INT 117
8977: PUSH
8978: LD_INT 118
8980: PUSH
8981: EMPTY
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: PUSH
8999: EMPTY
9000: LIST
9001: LIST
9002: ST_TO_ADDR
9003: GO 10686
9005: LD_INT 12
9007: DOUBLE
9008: EQUAL
9009: IFTRUE 9013
9011: GO 9233
9013: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
9014: LD_ADDR_VAR 0 2
9018: PUSH
9019: LD_INT 1
9021: PUSH
9022: LD_INT 2
9024: PUSH
9025: LD_INT 3
9027: PUSH
9028: LD_INT 4
9030: PUSH
9031: LD_INT 5
9033: PUSH
9034: LD_INT 6
9036: PUSH
9037: LD_INT 7
9039: PUSH
9040: LD_INT 8
9042: PUSH
9043: LD_INT 9
9045: PUSH
9046: LD_INT 10
9048: PUSH
9049: LD_INT 11
9051: PUSH
9052: LD_INT 12
9054: PUSH
9055: LD_INT 13
9057: PUSH
9058: LD_INT 14
9060: PUSH
9061: LD_INT 15
9063: PUSH
9064: LD_INT 16
9066: PUSH
9067: LD_INT 17
9069: PUSH
9070: LD_INT 18
9072: PUSH
9073: LD_INT 19
9075: PUSH
9076: LD_INT 20
9078: PUSH
9079: LD_INT 21
9081: PUSH
9082: LD_INT 22
9084: PUSH
9085: LD_INT 23
9087: PUSH
9088: LD_INT 24
9090: PUSH
9091: LD_INT 25
9093: PUSH
9094: LD_INT 26
9096: PUSH
9097: LD_INT 27
9099: PUSH
9100: LD_INT 28
9102: PUSH
9103: LD_INT 30
9105: PUSH
9106: LD_INT 31
9108: PUSH
9109: LD_INT 32
9111: PUSH
9112: LD_INT 33
9114: PUSH
9115: LD_INT 34
9117: PUSH
9118: LD_INT 36
9120: PUSH
9121: EMPTY
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: PUSH
9157: LD_INT 101
9159: PUSH
9160: LD_INT 102
9162: PUSH
9163: LD_INT 103
9165: PUSH
9166: LD_INT 104
9168: PUSH
9169: LD_INT 105
9171: PUSH
9172: LD_INT 106
9174: PUSH
9175: LD_INT 107
9177: PUSH
9178: LD_INT 108
9180: PUSH
9181: LD_INT 109
9183: PUSH
9184: LD_INT 110
9186: PUSH
9187: LD_INT 111
9189: PUSH
9190: LD_INT 112
9192: PUSH
9193: LD_INT 113
9195: PUSH
9196: LD_INT 114
9198: PUSH
9199: LD_INT 116
9201: PUSH
9202: LD_INT 117
9204: PUSH
9205: LD_INT 118
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: ST_TO_ADDR
9231: GO 10686
9233: LD_INT 13
9235: DOUBLE
9236: EQUAL
9237: IFTRUE 9241
9239: GO 9449
9241: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9242: LD_ADDR_VAR 0 2
9246: PUSH
9247: LD_INT 1
9249: PUSH
9250: LD_INT 2
9252: PUSH
9253: LD_INT 3
9255: PUSH
9256: LD_INT 4
9258: PUSH
9259: LD_INT 5
9261: PUSH
9262: LD_INT 8
9264: PUSH
9265: LD_INT 9
9267: PUSH
9268: LD_INT 10
9270: PUSH
9271: LD_INT 11
9273: PUSH
9274: LD_INT 12
9276: PUSH
9277: LD_INT 14
9279: PUSH
9280: LD_INT 15
9282: PUSH
9283: LD_INT 16
9285: PUSH
9286: LD_INT 17
9288: PUSH
9289: LD_INT 18
9291: PUSH
9292: LD_INT 19
9294: PUSH
9295: LD_INT 20
9297: PUSH
9298: LD_INT 21
9300: PUSH
9301: LD_INT 22
9303: PUSH
9304: LD_INT 23
9306: PUSH
9307: LD_INT 24
9309: PUSH
9310: LD_INT 25
9312: PUSH
9313: LD_INT 26
9315: PUSH
9316: LD_INT 27
9318: PUSH
9319: LD_INT 28
9321: PUSH
9322: LD_INT 30
9324: PUSH
9325: LD_INT 31
9327: PUSH
9328: LD_INT 32
9330: PUSH
9331: LD_INT 33
9333: PUSH
9334: LD_INT 34
9336: PUSH
9337: LD_INT 36
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: PUSH
9373: LD_INT 101
9375: PUSH
9376: LD_INT 102
9378: PUSH
9379: LD_INT 103
9381: PUSH
9382: LD_INT 104
9384: PUSH
9385: LD_INT 105
9387: PUSH
9388: LD_INT 106
9390: PUSH
9391: LD_INT 107
9393: PUSH
9394: LD_INT 108
9396: PUSH
9397: LD_INT 109
9399: PUSH
9400: LD_INT 110
9402: PUSH
9403: LD_INT 111
9405: PUSH
9406: LD_INT 112
9408: PUSH
9409: LD_INT 113
9411: PUSH
9412: LD_INT 114
9414: PUSH
9415: LD_INT 116
9417: PUSH
9418: LD_INT 117
9420: PUSH
9421: LD_INT 118
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: ST_TO_ADDR
9447: GO 10686
9449: LD_INT 14
9451: DOUBLE
9452: EQUAL
9453: IFTRUE 9457
9455: GO 9681
9457: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9458: LD_ADDR_VAR 0 2
9462: PUSH
9463: LD_INT 1
9465: PUSH
9466: LD_INT 2
9468: PUSH
9469: LD_INT 3
9471: PUSH
9472: LD_INT 4
9474: PUSH
9475: LD_INT 5
9477: PUSH
9478: LD_INT 6
9480: PUSH
9481: LD_INT 7
9483: PUSH
9484: LD_INT 8
9486: PUSH
9487: LD_INT 9
9489: PUSH
9490: LD_INT 10
9492: PUSH
9493: LD_INT 11
9495: PUSH
9496: LD_INT 12
9498: PUSH
9499: LD_INT 13
9501: PUSH
9502: LD_INT 14
9504: PUSH
9505: LD_INT 15
9507: PUSH
9508: LD_INT 16
9510: PUSH
9511: LD_INT 17
9513: PUSH
9514: LD_INT 18
9516: PUSH
9517: LD_INT 19
9519: PUSH
9520: LD_INT 20
9522: PUSH
9523: LD_INT 21
9525: PUSH
9526: LD_INT 22
9528: PUSH
9529: LD_INT 23
9531: PUSH
9532: LD_INT 24
9534: PUSH
9535: LD_INT 25
9537: PUSH
9538: LD_INT 26
9540: PUSH
9541: LD_INT 27
9543: PUSH
9544: LD_INT 28
9546: PUSH
9547: LD_INT 29
9549: PUSH
9550: LD_INT 30
9552: PUSH
9553: LD_INT 31
9555: PUSH
9556: LD_INT 32
9558: PUSH
9559: LD_INT 33
9561: PUSH
9562: LD_INT 34
9564: PUSH
9565: LD_INT 36
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: PUSH
9605: LD_INT 101
9607: PUSH
9608: LD_INT 102
9610: PUSH
9611: LD_INT 103
9613: PUSH
9614: LD_INT 104
9616: PUSH
9617: LD_INT 105
9619: PUSH
9620: LD_INT 106
9622: PUSH
9623: LD_INT 107
9625: PUSH
9626: LD_INT 108
9628: PUSH
9629: LD_INT 109
9631: PUSH
9632: LD_INT 110
9634: PUSH
9635: LD_INT 111
9637: PUSH
9638: LD_INT 112
9640: PUSH
9641: LD_INT 113
9643: PUSH
9644: LD_INT 114
9646: PUSH
9647: LD_INT 116
9649: PUSH
9650: LD_INT 117
9652: PUSH
9653: LD_INT 118
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: PUSH
9675: EMPTY
9676: LIST
9677: LIST
9678: ST_TO_ADDR
9679: GO 10686
9681: LD_INT 15
9683: DOUBLE
9684: EQUAL
9685: IFTRUE 9689
9687: GO 9913
9689: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9690: LD_ADDR_VAR 0 2
9694: PUSH
9695: LD_INT 1
9697: PUSH
9698: LD_INT 2
9700: PUSH
9701: LD_INT 3
9703: PUSH
9704: LD_INT 4
9706: PUSH
9707: LD_INT 5
9709: PUSH
9710: LD_INT 6
9712: PUSH
9713: LD_INT 7
9715: PUSH
9716: LD_INT 8
9718: PUSH
9719: LD_INT 9
9721: PUSH
9722: LD_INT 10
9724: PUSH
9725: LD_INT 11
9727: PUSH
9728: LD_INT 12
9730: PUSH
9731: LD_INT 13
9733: PUSH
9734: LD_INT 14
9736: PUSH
9737: LD_INT 15
9739: PUSH
9740: LD_INT 16
9742: PUSH
9743: LD_INT 17
9745: PUSH
9746: LD_INT 18
9748: PUSH
9749: LD_INT 19
9751: PUSH
9752: LD_INT 20
9754: PUSH
9755: LD_INT 21
9757: PUSH
9758: LD_INT 22
9760: PUSH
9761: LD_INT 23
9763: PUSH
9764: LD_INT 24
9766: PUSH
9767: LD_INT 25
9769: PUSH
9770: LD_INT 26
9772: PUSH
9773: LD_INT 27
9775: PUSH
9776: LD_INT 28
9778: PUSH
9779: LD_INT 29
9781: PUSH
9782: LD_INT 30
9784: PUSH
9785: LD_INT 31
9787: PUSH
9788: LD_INT 32
9790: PUSH
9791: LD_INT 33
9793: PUSH
9794: LD_INT 34
9796: PUSH
9797: LD_INT 36
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: PUSH
9837: LD_INT 101
9839: PUSH
9840: LD_INT 102
9842: PUSH
9843: LD_INT 103
9845: PUSH
9846: LD_INT 104
9848: PUSH
9849: LD_INT 105
9851: PUSH
9852: LD_INT 106
9854: PUSH
9855: LD_INT 107
9857: PUSH
9858: LD_INT 108
9860: PUSH
9861: LD_INT 109
9863: PUSH
9864: LD_INT 110
9866: PUSH
9867: LD_INT 111
9869: PUSH
9870: LD_INT 112
9872: PUSH
9873: LD_INT 113
9875: PUSH
9876: LD_INT 114
9878: PUSH
9879: LD_INT 116
9881: PUSH
9882: LD_INT 117
9884: PUSH
9885: LD_INT 118
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: ST_TO_ADDR
9911: GO 10686
9913: LD_INT 16
9915: DOUBLE
9916: EQUAL
9917: IFTRUE 9921
9919: GO 10057
9921: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9922: LD_ADDR_VAR 0 2
9926: PUSH
9927: LD_INT 2
9929: PUSH
9930: LD_INT 4
9932: PUSH
9933: LD_INT 5
9935: PUSH
9936: LD_INT 7
9938: PUSH
9939: LD_INT 11
9941: PUSH
9942: LD_INT 12
9944: PUSH
9945: LD_INT 15
9947: PUSH
9948: LD_INT 16
9950: PUSH
9951: LD_INT 20
9953: PUSH
9954: LD_INT 21
9956: PUSH
9957: LD_INT 22
9959: PUSH
9960: LD_INT 23
9962: PUSH
9963: LD_INT 25
9965: PUSH
9966: LD_INT 26
9968: PUSH
9969: LD_INT 30
9971: PUSH
9972: LD_INT 31
9974: PUSH
9975: LD_INT 32
9977: PUSH
9978: LD_INT 33
9980: PUSH
9981: LD_INT 34
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: PUSH
10005: LD_INT 101
10007: PUSH
10008: LD_INT 102
10010: PUSH
10011: LD_INT 103
10013: PUSH
10014: LD_INT 106
10016: PUSH
10017: LD_INT 108
10019: PUSH
10020: LD_INT 112
10022: PUSH
10023: LD_INT 113
10025: PUSH
10026: LD_INT 114
10028: PUSH
10029: LD_INT 116
10031: PUSH
10032: LD_INT 117
10034: PUSH
10035: LD_INT 118
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: ST_TO_ADDR
10055: GO 10686
10057: LD_INT 17
10059: DOUBLE
10060: EQUAL
10061: IFTRUE 10065
10063: GO 10289
10065: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
10066: LD_ADDR_VAR 0 2
10070: PUSH
10071: LD_INT 1
10073: PUSH
10074: LD_INT 2
10076: PUSH
10077: LD_INT 3
10079: PUSH
10080: LD_INT 4
10082: PUSH
10083: LD_INT 5
10085: PUSH
10086: LD_INT 6
10088: PUSH
10089: LD_INT 7
10091: PUSH
10092: LD_INT 8
10094: PUSH
10095: LD_INT 9
10097: PUSH
10098: LD_INT 10
10100: PUSH
10101: LD_INT 11
10103: PUSH
10104: LD_INT 12
10106: PUSH
10107: LD_INT 13
10109: PUSH
10110: LD_INT 14
10112: PUSH
10113: LD_INT 15
10115: PUSH
10116: LD_INT 16
10118: PUSH
10119: LD_INT 17
10121: PUSH
10122: LD_INT 18
10124: PUSH
10125: LD_INT 19
10127: PUSH
10128: LD_INT 20
10130: PUSH
10131: LD_INT 21
10133: PUSH
10134: LD_INT 22
10136: PUSH
10137: LD_INT 23
10139: PUSH
10140: LD_INT 24
10142: PUSH
10143: LD_INT 25
10145: PUSH
10146: LD_INT 26
10148: PUSH
10149: LD_INT 27
10151: PUSH
10152: LD_INT 28
10154: PUSH
10155: LD_INT 29
10157: PUSH
10158: LD_INT 30
10160: PUSH
10161: LD_INT 31
10163: PUSH
10164: LD_INT 32
10166: PUSH
10167: LD_INT 33
10169: PUSH
10170: LD_INT 34
10172: PUSH
10173: LD_INT 36
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: PUSH
10213: LD_INT 101
10215: PUSH
10216: LD_INT 102
10218: PUSH
10219: LD_INT 103
10221: PUSH
10222: LD_INT 104
10224: PUSH
10225: LD_INT 105
10227: PUSH
10228: LD_INT 106
10230: PUSH
10231: LD_INT 107
10233: PUSH
10234: LD_INT 108
10236: PUSH
10237: LD_INT 109
10239: PUSH
10240: LD_INT 110
10242: PUSH
10243: LD_INT 111
10245: PUSH
10246: LD_INT 112
10248: PUSH
10249: LD_INT 113
10251: PUSH
10252: LD_INT 114
10254: PUSH
10255: LD_INT 116
10257: PUSH
10258: LD_INT 117
10260: PUSH
10261: LD_INT 118
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: ST_TO_ADDR
10287: GO 10686
10289: LD_INT 18
10291: DOUBLE
10292: EQUAL
10293: IFTRUE 10297
10295: GO 10445
10297: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10298: LD_ADDR_VAR 0 2
10302: PUSH
10303: LD_INT 2
10305: PUSH
10306: LD_INT 4
10308: PUSH
10309: LD_INT 5
10311: PUSH
10312: LD_INT 7
10314: PUSH
10315: LD_INT 11
10317: PUSH
10318: LD_INT 12
10320: PUSH
10321: LD_INT 15
10323: PUSH
10324: LD_INT 16
10326: PUSH
10327: LD_INT 20
10329: PUSH
10330: LD_INT 21
10332: PUSH
10333: LD_INT 22
10335: PUSH
10336: LD_INT 23
10338: PUSH
10339: LD_INT 25
10341: PUSH
10342: LD_INT 26
10344: PUSH
10345: LD_INT 30
10347: PUSH
10348: LD_INT 31
10350: PUSH
10351: LD_INT 32
10353: PUSH
10354: LD_INT 33
10356: PUSH
10357: LD_INT 34
10359: PUSH
10360: LD_INT 35
10362: PUSH
10363: LD_INT 36
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: PUSH
10389: LD_INT 101
10391: PUSH
10392: LD_INT 102
10394: PUSH
10395: LD_INT 103
10397: PUSH
10398: LD_INT 106
10400: PUSH
10401: LD_INT 108
10403: PUSH
10404: LD_INT 112
10406: PUSH
10407: LD_INT 113
10409: PUSH
10410: LD_INT 114
10412: PUSH
10413: LD_INT 115
10415: PUSH
10416: LD_INT 116
10418: PUSH
10419: LD_INT 117
10421: PUSH
10422: LD_INT 118
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: PUSH
10439: EMPTY
10440: LIST
10441: LIST
10442: ST_TO_ADDR
10443: GO 10686
10445: LD_INT 19
10447: DOUBLE
10448: EQUAL
10449: IFTRUE 10453
10451: GO 10685
10453: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10454: LD_ADDR_VAR 0 2
10458: PUSH
10459: LD_INT 1
10461: PUSH
10462: LD_INT 2
10464: PUSH
10465: LD_INT 3
10467: PUSH
10468: LD_INT 4
10470: PUSH
10471: LD_INT 5
10473: PUSH
10474: LD_INT 6
10476: PUSH
10477: LD_INT 7
10479: PUSH
10480: LD_INT 8
10482: PUSH
10483: LD_INT 9
10485: PUSH
10486: LD_INT 10
10488: PUSH
10489: LD_INT 11
10491: PUSH
10492: LD_INT 12
10494: PUSH
10495: LD_INT 13
10497: PUSH
10498: LD_INT 14
10500: PUSH
10501: LD_INT 15
10503: PUSH
10504: LD_INT 16
10506: PUSH
10507: LD_INT 17
10509: PUSH
10510: LD_INT 18
10512: PUSH
10513: LD_INT 19
10515: PUSH
10516: LD_INT 20
10518: PUSH
10519: LD_INT 21
10521: PUSH
10522: LD_INT 22
10524: PUSH
10525: LD_INT 23
10527: PUSH
10528: LD_INT 24
10530: PUSH
10531: LD_INT 25
10533: PUSH
10534: LD_INT 26
10536: PUSH
10537: LD_INT 27
10539: PUSH
10540: LD_INT 28
10542: PUSH
10543: LD_INT 29
10545: PUSH
10546: LD_INT 30
10548: PUSH
10549: LD_INT 31
10551: PUSH
10552: LD_INT 32
10554: PUSH
10555: LD_INT 33
10557: PUSH
10558: LD_INT 34
10560: PUSH
10561: LD_INT 35
10563: PUSH
10564: LD_INT 36
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: PUSH
10605: LD_INT 101
10607: PUSH
10608: LD_INT 102
10610: PUSH
10611: LD_INT 103
10613: PUSH
10614: LD_INT 104
10616: PUSH
10617: LD_INT 105
10619: PUSH
10620: LD_INT 106
10622: PUSH
10623: LD_INT 107
10625: PUSH
10626: LD_INT 108
10628: PUSH
10629: LD_INT 109
10631: PUSH
10632: LD_INT 110
10634: PUSH
10635: LD_INT 111
10637: PUSH
10638: LD_INT 112
10640: PUSH
10641: LD_INT 113
10643: PUSH
10644: LD_INT 114
10646: PUSH
10647: LD_INT 115
10649: PUSH
10650: LD_INT 116
10652: PUSH
10653: LD_INT 117
10655: PUSH
10656: LD_INT 118
10658: PUSH
10659: EMPTY
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: ST_TO_ADDR
10683: GO 10686
10685: POP
// end else
10686: GO 10917
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10688: LD_ADDR_VAR 0 2
10692: PUSH
10693: LD_INT 1
10695: PUSH
10696: LD_INT 2
10698: PUSH
10699: LD_INT 3
10701: PUSH
10702: LD_INT 4
10704: PUSH
10705: LD_INT 5
10707: PUSH
10708: LD_INT 6
10710: PUSH
10711: LD_INT 7
10713: PUSH
10714: LD_INT 8
10716: PUSH
10717: LD_INT 9
10719: PUSH
10720: LD_INT 10
10722: PUSH
10723: LD_INT 11
10725: PUSH
10726: LD_INT 12
10728: PUSH
10729: LD_INT 13
10731: PUSH
10732: LD_INT 14
10734: PUSH
10735: LD_INT 15
10737: PUSH
10738: LD_INT 16
10740: PUSH
10741: LD_INT 17
10743: PUSH
10744: LD_INT 18
10746: PUSH
10747: LD_INT 19
10749: PUSH
10750: LD_INT 20
10752: PUSH
10753: LD_INT 21
10755: PUSH
10756: LD_INT 22
10758: PUSH
10759: LD_INT 23
10761: PUSH
10762: LD_INT 24
10764: PUSH
10765: LD_INT 25
10767: PUSH
10768: LD_INT 26
10770: PUSH
10771: LD_INT 27
10773: PUSH
10774: LD_INT 28
10776: PUSH
10777: LD_INT 29
10779: PUSH
10780: LD_INT 30
10782: PUSH
10783: LD_INT 31
10785: PUSH
10786: LD_INT 32
10788: PUSH
10789: LD_INT 33
10791: PUSH
10792: LD_INT 34
10794: PUSH
10795: LD_INT 35
10797: PUSH
10798: LD_INT 36
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: PUSH
10839: LD_INT 101
10841: PUSH
10842: LD_INT 102
10844: PUSH
10845: LD_INT 103
10847: PUSH
10848: LD_INT 104
10850: PUSH
10851: LD_INT 105
10853: PUSH
10854: LD_INT 106
10856: PUSH
10857: LD_INT 107
10859: PUSH
10860: LD_INT 108
10862: PUSH
10863: LD_INT 109
10865: PUSH
10866: LD_INT 110
10868: PUSH
10869: LD_INT 111
10871: PUSH
10872: LD_INT 112
10874: PUSH
10875: LD_INT 113
10877: PUSH
10878: LD_INT 114
10880: PUSH
10881: LD_INT 115
10883: PUSH
10884: LD_INT 116
10886: PUSH
10887: LD_INT 117
10889: PUSH
10890: LD_INT 118
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: ST_TO_ADDR
// if result then
10917: LD_VAR 0 2
10921: IFFALSE 11707
// begin normal :=  ;
10923: LD_ADDR_VAR 0 5
10927: PUSH
10928: LD_STRING 
10930: ST_TO_ADDR
// hardcore :=  ;
10931: LD_ADDR_VAR 0 6
10935: PUSH
10936: LD_STRING 
10938: ST_TO_ADDR
// active :=  ;
10939: LD_ADDR_VAR 0 7
10943: PUSH
10944: LD_STRING 
10946: ST_TO_ADDR
// for i = 1 to normalCounter do
10947: LD_ADDR_VAR 0 8
10951: PUSH
10952: DOUBLE
10953: LD_INT 1
10955: DEC
10956: ST_TO_ADDR
10957: LD_EXP 26
10961: PUSH
10962: FOR_TO
10963: IFFALSE 11064
// begin tmp := 0 ;
10965: LD_ADDR_VAR 0 3
10969: PUSH
10970: LD_STRING 0
10972: ST_TO_ADDR
// if result [ 1 ] then
10973: LD_VAR 0 2
10977: PUSH
10978: LD_INT 1
10980: ARRAY
10981: IFFALSE 11046
// if result [ 1 ] [ 1 ] = i then
10983: LD_VAR 0 2
10987: PUSH
10988: LD_INT 1
10990: ARRAY
10991: PUSH
10992: LD_INT 1
10994: ARRAY
10995: PUSH
10996: LD_VAR 0 8
11000: EQUAL
11001: IFFALSE 11046
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11003: LD_ADDR_VAR 0 2
11007: PUSH
11008: LD_VAR 0 2
11012: PPUSH
11013: LD_INT 1
11015: PPUSH
11016: LD_VAR 0 2
11020: PUSH
11021: LD_INT 1
11023: ARRAY
11024: PPUSH
11025: LD_INT 1
11027: PPUSH
11028: CALL_OW 3
11032: PPUSH
11033: CALL_OW 1
11037: ST_TO_ADDR
// tmp := 1 ;
11038: LD_ADDR_VAR 0 3
11042: PUSH
11043: LD_STRING 1
11045: ST_TO_ADDR
// end ; normal := normal & tmp ;
11046: LD_ADDR_VAR 0 5
11050: PUSH
11051: LD_VAR 0 5
11055: PUSH
11056: LD_VAR 0 3
11060: STR
11061: ST_TO_ADDR
// end ;
11062: GO 10962
11064: POP
11065: POP
// for i = 1 to hardcoreCounter do
11066: LD_ADDR_VAR 0 8
11070: PUSH
11071: DOUBLE
11072: LD_INT 1
11074: DEC
11075: ST_TO_ADDR
11076: LD_EXP 27
11080: PUSH
11081: FOR_TO
11082: IFFALSE 11187
// begin tmp := 0 ;
11084: LD_ADDR_VAR 0 3
11088: PUSH
11089: LD_STRING 0
11091: ST_TO_ADDR
// if result [ 2 ] then
11092: LD_VAR 0 2
11096: PUSH
11097: LD_INT 2
11099: ARRAY
11100: IFFALSE 11169
// if result [ 2 ] [ 1 ] = 100 + i then
11102: LD_VAR 0 2
11106: PUSH
11107: LD_INT 2
11109: ARRAY
11110: PUSH
11111: LD_INT 1
11113: ARRAY
11114: PUSH
11115: LD_INT 100
11117: PUSH
11118: LD_VAR 0 8
11122: PLUS
11123: EQUAL
11124: IFFALSE 11169
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11126: LD_ADDR_VAR 0 2
11130: PUSH
11131: LD_VAR 0 2
11135: PPUSH
11136: LD_INT 2
11138: PPUSH
11139: LD_VAR 0 2
11143: PUSH
11144: LD_INT 2
11146: ARRAY
11147: PPUSH
11148: LD_INT 1
11150: PPUSH
11151: CALL_OW 3
11155: PPUSH
11156: CALL_OW 1
11160: ST_TO_ADDR
// tmp := 1 ;
11161: LD_ADDR_VAR 0 3
11165: PUSH
11166: LD_STRING 1
11168: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11169: LD_ADDR_VAR 0 6
11173: PUSH
11174: LD_VAR 0 6
11178: PUSH
11179: LD_VAR 0 3
11183: STR
11184: ST_TO_ADDR
// end ;
11185: GO 11081
11187: POP
11188: POP
// if isGameLoad then
11189: LD_VAR 0 1
11193: IFFALSE 11668
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
11195: LD_ADDR_VAR 0 4
11199: PUSH
11200: LD_EXP 30
11204: PUSH
11205: LD_EXP 29
11209: PUSH
11210: LD_EXP 31
11214: PUSH
11215: LD_EXP 28
11219: PUSH
11220: LD_EXP 32
11224: PUSH
11225: LD_EXP 33
11229: PUSH
11230: LD_EXP 34
11234: PUSH
11235: LD_EXP 35
11239: PUSH
11240: LD_EXP 36
11244: PUSH
11245: LD_EXP 37
11249: PUSH
11250: LD_EXP 38
11254: PUSH
11255: LD_EXP 39
11259: PUSH
11260: LD_EXP 40
11264: PUSH
11265: LD_EXP 41
11269: PUSH
11270: LD_EXP 49
11274: PUSH
11275: LD_EXP 50
11279: PUSH
11280: LD_EXP 51
11284: PUSH
11285: LD_EXP 52
11289: PUSH
11290: LD_EXP 54
11294: PUSH
11295: LD_EXP 55
11299: PUSH
11300: LD_EXP 56
11304: PUSH
11305: LD_EXP 59
11309: PUSH
11310: LD_EXP 61
11314: PUSH
11315: LD_EXP 62
11319: PUSH
11320: LD_EXP 63
11324: PUSH
11325: LD_EXP 65
11329: PUSH
11330: LD_EXP 66
11334: PUSH
11335: LD_EXP 69
11339: PUSH
11340: LD_EXP 70
11344: PUSH
11345: LD_EXP 71
11349: PUSH
11350: LD_EXP 72
11354: PUSH
11355: LD_EXP 73
11359: PUSH
11360: LD_EXP 74
11364: PUSH
11365: LD_EXP 75
11369: PUSH
11370: LD_EXP 76
11374: PUSH
11375: LD_EXP 77
11379: PUSH
11380: LD_EXP 42
11384: PUSH
11385: LD_EXP 43
11389: PUSH
11390: LD_EXP 46
11394: PUSH
11395: LD_EXP 47
11399: PUSH
11400: LD_EXP 48
11404: PUSH
11405: LD_EXP 44
11409: PUSH
11410: LD_EXP 45
11414: PUSH
11415: LD_EXP 53
11419: PUSH
11420: LD_EXP 57
11424: PUSH
11425: LD_EXP 58
11429: PUSH
11430: LD_EXP 60
11434: PUSH
11435: LD_EXP 64
11439: PUSH
11440: LD_EXP 67
11444: PUSH
11445: LD_EXP 68
11449: PUSH
11450: LD_EXP 78
11454: PUSH
11455: LD_EXP 79
11459: PUSH
11460: LD_EXP 80
11464: PUSH
11465: LD_EXP 81
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: ST_TO_ADDR
// tmp :=  ;
11526: LD_ADDR_VAR 0 3
11530: PUSH
11531: LD_STRING 
11533: ST_TO_ADDR
// for i = 1 to normalCounter do
11534: LD_ADDR_VAR 0 8
11538: PUSH
11539: DOUBLE
11540: LD_INT 1
11542: DEC
11543: ST_TO_ADDR
11544: LD_EXP 26
11548: PUSH
11549: FOR_TO
11550: IFFALSE 11586
// begin if flags [ i ] then
11552: LD_VAR 0 4
11556: PUSH
11557: LD_VAR 0 8
11561: ARRAY
11562: IFFALSE 11584
// tmp := tmp & i & ; ;
11564: LD_ADDR_VAR 0 3
11568: PUSH
11569: LD_VAR 0 3
11573: PUSH
11574: LD_VAR 0 8
11578: STR
11579: PUSH
11580: LD_STRING ;
11582: STR
11583: ST_TO_ADDR
// end ;
11584: GO 11549
11586: POP
11587: POP
// for i = 1 to hardcoreCounter do
11588: LD_ADDR_VAR 0 8
11592: PUSH
11593: DOUBLE
11594: LD_INT 1
11596: DEC
11597: ST_TO_ADDR
11598: LD_EXP 27
11602: PUSH
11603: FOR_TO
11604: IFFALSE 11650
// begin if flags [ normalCounter + i ] then
11606: LD_VAR 0 4
11610: PUSH
11611: LD_EXP 26
11615: PUSH
11616: LD_VAR 0 8
11620: PLUS
11621: ARRAY
11622: IFFALSE 11648
// tmp := tmp & ( 100 + i ) & ; ;
11624: LD_ADDR_VAR 0 3
11628: PUSH
11629: LD_VAR 0 3
11633: PUSH
11634: LD_INT 100
11636: PUSH
11637: LD_VAR 0 8
11641: PLUS
11642: STR
11643: PUSH
11644: LD_STRING ;
11646: STR
11647: ST_TO_ADDR
// end ;
11648: GO 11603
11650: POP
11651: POP
// if tmp then
11652: LD_VAR 0 3
11656: IFFALSE 11668
// active := tmp ;
11658: LD_ADDR_VAR 0 7
11662: PUSH
11663: LD_VAR 0 3
11667: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11668: LD_STRING getStreamItemsFromMission("
11670: PUSH
11671: LD_VAR 0 5
11675: STR
11676: PUSH
11677: LD_STRING ","
11679: STR
11680: PUSH
11681: LD_VAR 0 6
11685: STR
11686: PUSH
11687: LD_STRING ","
11689: STR
11690: PUSH
11691: LD_VAR 0 7
11695: STR
11696: PUSH
11697: LD_STRING ")
11699: STR
11700: PPUSH
11701: CALL_OW 559
// end else
11705: GO 11714
// ToLua ( getStreamItemsFromMission("","","") ) ;
11707: LD_STRING getStreamItemsFromMission("","","")
11709: PPUSH
11710: CALL_OW 559
// end ;
11714: LD_VAR 0 2
11718: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11719: LD_EXP 25
11723: PUSH
11724: LD_EXP 30
11728: AND
11729: IFFALSE 11853
11731: GO 11733
11733: DISABLE
11734: LD_INT 0
11736: PPUSH
11737: PPUSH
// begin enable ;
11738: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11739: LD_ADDR_VAR 0 2
11743: PUSH
11744: LD_INT 22
11746: PUSH
11747: LD_OWVAR 2
11751: PUSH
11752: EMPTY
11753: LIST
11754: LIST
11755: PUSH
11756: LD_INT 2
11758: PUSH
11759: LD_INT 34
11761: PUSH
11762: LD_INT 7
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: PUSH
11769: LD_INT 34
11771: PUSH
11772: LD_INT 45
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: PUSH
11779: LD_INT 34
11781: PUSH
11782: LD_INT 28
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PUSH
11789: LD_INT 34
11791: PUSH
11792: LD_INT 47
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: PUSH
11799: EMPTY
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: PPUSH
11810: CALL_OW 69
11814: ST_TO_ADDR
// if not tmp then
11815: LD_VAR 0 2
11819: NOT
11820: IFFALSE 11824
// exit ;
11822: GO 11853
// for i in tmp do
11824: LD_ADDR_VAR 0 1
11828: PUSH
11829: LD_VAR 0 2
11833: PUSH
11834: FOR_IN
11835: IFFALSE 11851
// begin SetLives ( i , 0 ) ;
11837: LD_VAR 0 1
11841: PPUSH
11842: LD_INT 0
11844: PPUSH
11845: CALL_OW 234
// end ;
11849: GO 11834
11851: POP
11852: POP
// end ;
11853: PPOPN 2
11855: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11856: LD_EXP 25
11860: PUSH
11861: LD_EXP 31
11865: AND
11866: IFFALSE 11950
11868: GO 11870
11870: DISABLE
11871: LD_INT 0
11873: PPUSH
11874: PPUSH
// begin enable ;
11875: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11876: LD_ADDR_VAR 0 2
11880: PUSH
11881: LD_INT 22
11883: PUSH
11884: LD_OWVAR 2
11888: PUSH
11889: EMPTY
11890: LIST
11891: LIST
11892: PUSH
11893: LD_INT 32
11895: PUSH
11896: LD_INT 3
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PPUSH
11907: CALL_OW 69
11911: ST_TO_ADDR
// if not tmp then
11912: LD_VAR 0 2
11916: NOT
11917: IFFALSE 11921
// exit ;
11919: GO 11950
// for i in tmp do
11921: LD_ADDR_VAR 0 1
11925: PUSH
11926: LD_VAR 0 2
11930: PUSH
11931: FOR_IN
11932: IFFALSE 11948
// begin SetLives ( i , 0 ) ;
11934: LD_VAR 0 1
11938: PPUSH
11939: LD_INT 0
11941: PPUSH
11942: CALL_OW 234
// end ;
11946: GO 11931
11948: POP
11949: POP
// end ;
11950: PPOPN 2
11952: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11953: LD_EXP 25
11957: PUSH
11958: LD_EXP 28
11962: AND
11963: IFFALSE 12056
11965: GO 11967
11967: DISABLE
11968: LD_INT 0
11970: PPUSH
// begin enable ;
11971: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11972: LD_ADDR_VAR 0 1
11976: PUSH
11977: LD_INT 22
11979: PUSH
11980: LD_OWVAR 2
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: LD_INT 2
11991: PUSH
11992: LD_INT 25
11994: PUSH
11995: LD_INT 5
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: PUSH
12002: LD_INT 25
12004: PUSH
12005: LD_INT 9
12007: PUSH
12008: EMPTY
12009: LIST
12010: LIST
12011: PUSH
12012: LD_INT 25
12014: PUSH
12015: LD_INT 8
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: PPUSH
12032: CALL_OW 69
12036: PUSH
12037: FOR_IN
12038: IFFALSE 12054
// begin SetClass ( i , 1 ) ;
12040: LD_VAR 0 1
12044: PPUSH
12045: LD_INT 1
12047: PPUSH
12048: CALL_OW 336
// end ;
12052: GO 12037
12054: POP
12055: POP
// end ;
12056: PPOPN 1
12058: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12059: LD_EXP 25
12063: PUSH
12064: LD_EXP 29
12068: AND
12069: PUSH
12070: LD_OWVAR 65
12074: PUSH
12075: LD_INT 7
12077: LESS
12078: AND
12079: IFFALSE 12093
12081: GO 12083
12083: DISABLE
// begin enable ;
12084: ENABLE
// game_speed := 7 ;
12085: LD_ADDR_OWVAR 65
12089: PUSH
12090: LD_INT 7
12092: ST_TO_ADDR
// end ;
12093: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12094: LD_EXP 25
12098: PUSH
12099: LD_EXP 32
12103: AND
12104: IFFALSE 12306
12106: GO 12108
12108: DISABLE
12109: LD_INT 0
12111: PPUSH
12112: PPUSH
12113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12114: LD_ADDR_VAR 0 3
12118: PUSH
12119: LD_INT 81
12121: PUSH
12122: LD_OWVAR 2
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: PUSH
12131: LD_INT 21
12133: PUSH
12134: LD_INT 1
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: PPUSH
12145: CALL_OW 69
12149: ST_TO_ADDR
// if not tmp then
12150: LD_VAR 0 3
12154: NOT
12155: IFFALSE 12159
// exit ;
12157: GO 12306
// if tmp > 5 then
12159: LD_VAR 0 3
12163: PUSH
12164: LD_INT 5
12166: GREATER
12167: IFFALSE 12179
// k := 5 else
12169: LD_ADDR_VAR 0 2
12173: PUSH
12174: LD_INT 5
12176: ST_TO_ADDR
12177: GO 12189
// k := tmp ;
12179: LD_ADDR_VAR 0 2
12183: PUSH
12184: LD_VAR 0 3
12188: ST_TO_ADDR
// for i := 1 to k do
12189: LD_ADDR_VAR 0 1
12193: PUSH
12194: DOUBLE
12195: LD_INT 1
12197: DEC
12198: ST_TO_ADDR
12199: LD_VAR 0 2
12203: PUSH
12204: FOR_TO
12205: IFFALSE 12304
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12207: LD_VAR 0 3
12211: PUSH
12212: LD_VAR 0 1
12216: ARRAY
12217: PPUSH
12218: LD_VAR 0 1
12222: PUSH
12223: LD_INT 4
12225: MOD
12226: PUSH
12227: LD_INT 1
12229: PLUS
12230: PPUSH
12231: CALL_OW 259
12235: PUSH
12236: LD_INT 10
12238: LESS
12239: IFFALSE 12302
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12241: LD_VAR 0 3
12245: PUSH
12246: LD_VAR 0 1
12250: ARRAY
12251: PPUSH
12252: LD_VAR 0 1
12256: PUSH
12257: LD_INT 4
12259: MOD
12260: PUSH
12261: LD_INT 1
12263: PLUS
12264: PPUSH
12265: LD_VAR 0 3
12269: PUSH
12270: LD_VAR 0 1
12274: ARRAY
12275: PPUSH
12276: LD_VAR 0 1
12280: PUSH
12281: LD_INT 4
12283: MOD
12284: PUSH
12285: LD_INT 1
12287: PLUS
12288: PPUSH
12289: CALL_OW 259
12293: PUSH
12294: LD_INT 1
12296: PLUS
12297: PPUSH
12298: CALL_OW 237
12302: GO 12204
12304: POP
12305: POP
// end ;
12306: PPOPN 3
12308: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12309: LD_EXP 25
12313: PUSH
12314: LD_EXP 33
12318: AND
12319: IFFALSE 12339
12321: GO 12323
12323: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12324: LD_INT 4
12326: PPUSH
12327: LD_OWVAR 2
12331: PPUSH
12332: LD_INT 0
12334: PPUSH
12335: CALL_OW 324
12339: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12340: LD_EXP 25
12344: PUSH
12345: LD_EXP 62
12349: AND
12350: IFFALSE 12370
12352: GO 12354
12354: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12355: LD_INT 19
12357: PPUSH
12358: LD_OWVAR 2
12362: PPUSH
12363: LD_INT 0
12365: PPUSH
12366: CALL_OW 324
12370: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12371: LD_EXP 25
12375: PUSH
12376: LD_EXP 34
12380: AND
12381: IFFALSE 12483
12383: GO 12385
12385: DISABLE
12386: LD_INT 0
12388: PPUSH
12389: PPUSH
// begin enable ;
12390: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12391: LD_ADDR_VAR 0 2
12395: PUSH
12396: LD_INT 22
12398: PUSH
12399: LD_OWVAR 2
12403: PUSH
12404: EMPTY
12405: LIST
12406: LIST
12407: PUSH
12408: LD_INT 2
12410: PUSH
12411: LD_INT 34
12413: PUSH
12414: LD_INT 11
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: PUSH
12421: LD_INT 34
12423: PUSH
12424: LD_INT 30
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: PUSH
12431: EMPTY
12432: LIST
12433: LIST
12434: LIST
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: PPUSH
12440: CALL_OW 69
12444: ST_TO_ADDR
// if not tmp then
12445: LD_VAR 0 2
12449: NOT
12450: IFFALSE 12454
// exit ;
12452: GO 12483
// for i in tmp do
12454: LD_ADDR_VAR 0 1
12458: PUSH
12459: LD_VAR 0 2
12463: PUSH
12464: FOR_IN
12465: IFFALSE 12481
// begin SetLives ( i , 0 ) ;
12467: LD_VAR 0 1
12471: PPUSH
12472: LD_INT 0
12474: PPUSH
12475: CALL_OW 234
// end ;
12479: GO 12464
12481: POP
12482: POP
// end ;
12483: PPOPN 2
12485: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12486: LD_EXP 25
12490: PUSH
12491: LD_EXP 35
12495: AND
12496: IFFALSE 12516
12498: GO 12500
12500: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12501: LD_INT 32
12503: PPUSH
12504: LD_OWVAR 2
12508: PPUSH
12509: LD_INT 0
12511: PPUSH
12512: CALL_OW 324
12516: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12517: LD_EXP 25
12521: PUSH
12522: LD_EXP 36
12526: AND
12527: IFFALSE 12708
12529: GO 12531
12531: DISABLE
12532: LD_INT 0
12534: PPUSH
12535: PPUSH
12536: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12537: LD_ADDR_VAR 0 2
12541: PUSH
12542: LD_INT 22
12544: PUSH
12545: LD_OWVAR 2
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: PUSH
12554: LD_INT 33
12556: PUSH
12557: LD_INT 3
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: PPUSH
12568: CALL_OW 69
12572: ST_TO_ADDR
// if not tmp then
12573: LD_VAR 0 2
12577: NOT
12578: IFFALSE 12582
// exit ;
12580: GO 12708
// side := 0 ;
12582: LD_ADDR_VAR 0 3
12586: PUSH
12587: LD_INT 0
12589: ST_TO_ADDR
// for i := 1 to 8 do
12590: LD_ADDR_VAR 0 1
12594: PUSH
12595: DOUBLE
12596: LD_INT 1
12598: DEC
12599: ST_TO_ADDR
12600: LD_INT 8
12602: PUSH
12603: FOR_TO
12604: IFFALSE 12652
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12606: LD_OWVAR 2
12610: PUSH
12611: LD_VAR 0 1
12615: NONEQUAL
12616: PUSH
12617: LD_OWVAR 2
12621: PPUSH
12622: LD_VAR 0 1
12626: PPUSH
12627: CALL_OW 81
12631: PUSH
12632: LD_INT 2
12634: EQUAL
12635: AND
12636: IFFALSE 12650
// begin side := i ;
12638: LD_ADDR_VAR 0 3
12642: PUSH
12643: LD_VAR 0 1
12647: ST_TO_ADDR
// break ;
12648: GO 12652
// end ;
12650: GO 12603
12652: POP
12653: POP
// if not side then
12654: LD_VAR 0 3
12658: NOT
12659: IFFALSE 12663
// exit ;
12661: GO 12708
// for i := 1 to tmp do
12663: LD_ADDR_VAR 0 1
12667: PUSH
12668: DOUBLE
12669: LD_INT 1
12671: DEC
12672: ST_TO_ADDR
12673: LD_VAR 0 2
12677: PUSH
12678: FOR_TO
12679: IFFALSE 12706
// if Prob ( 60 ) then
12681: LD_INT 60
12683: PPUSH
12684: CALL_OW 13
12688: IFFALSE 12704
// SetSide ( i , side ) ;
12690: LD_VAR 0 1
12694: PPUSH
12695: LD_VAR 0 3
12699: PPUSH
12700: CALL_OW 235
12704: GO 12678
12706: POP
12707: POP
// end ;
12708: PPOPN 3
12710: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12711: LD_EXP 25
12715: PUSH
12716: LD_EXP 38
12720: AND
12721: IFFALSE 12840
12723: GO 12725
12725: DISABLE
12726: LD_INT 0
12728: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12729: LD_ADDR_VAR 0 1
12733: PUSH
12734: LD_INT 22
12736: PUSH
12737: LD_OWVAR 2
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: PUSH
12746: LD_INT 21
12748: PUSH
12749: LD_INT 1
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: PUSH
12756: LD_INT 3
12758: PUSH
12759: LD_INT 23
12761: PUSH
12762: LD_INT 0
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: LIST
12777: PPUSH
12778: CALL_OW 69
12782: PUSH
12783: FOR_IN
12784: IFFALSE 12838
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12786: LD_VAR 0 1
12790: PPUSH
12791: CALL_OW 257
12795: PUSH
12796: LD_INT 1
12798: PUSH
12799: LD_INT 2
12801: PUSH
12802: LD_INT 3
12804: PUSH
12805: LD_INT 4
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: IN
12814: IFFALSE 12836
// SetClass ( un , rand ( 1 , 4 ) ) ;
12816: LD_VAR 0 1
12820: PPUSH
12821: LD_INT 1
12823: PPUSH
12824: LD_INT 4
12826: PPUSH
12827: CALL_OW 12
12831: PPUSH
12832: CALL_OW 336
12836: GO 12783
12838: POP
12839: POP
// end ;
12840: PPOPN 1
12842: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12843: LD_EXP 25
12847: PUSH
12848: LD_EXP 37
12852: AND
12853: IFFALSE 12932
12855: GO 12857
12857: DISABLE
12858: LD_INT 0
12860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12861: LD_ADDR_VAR 0 1
12865: PUSH
12866: LD_INT 22
12868: PUSH
12869: LD_OWVAR 2
12873: PUSH
12874: EMPTY
12875: LIST
12876: LIST
12877: PUSH
12878: LD_INT 21
12880: PUSH
12881: LD_INT 3
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: PPUSH
12892: CALL_OW 69
12896: ST_TO_ADDR
// if not tmp then
12897: LD_VAR 0 1
12901: NOT
12902: IFFALSE 12906
// exit ;
12904: GO 12932
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12906: LD_VAR 0 1
12910: PUSH
12911: LD_INT 1
12913: PPUSH
12914: LD_VAR 0 1
12918: PPUSH
12919: CALL_OW 12
12923: ARRAY
12924: PPUSH
12925: LD_INT 100
12927: PPUSH
12928: CALL_OW 234
// end ;
12932: PPOPN 1
12934: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12935: LD_EXP 25
12939: PUSH
12940: LD_EXP 39
12944: AND
12945: IFFALSE 13043
12947: GO 12949
12949: DISABLE
12950: LD_INT 0
12952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12953: LD_ADDR_VAR 0 1
12957: PUSH
12958: LD_INT 22
12960: PUSH
12961: LD_OWVAR 2
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: PUSH
12970: LD_INT 21
12972: PUSH
12973: LD_INT 1
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: PPUSH
12984: CALL_OW 69
12988: ST_TO_ADDR
// if not tmp then
12989: LD_VAR 0 1
12993: NOT
12994: IFFALSE 12998
// exit ;
12996: GO 13043
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12998: LD_VAR 0 1
13002: PUSH
13003: LD_INT 1
13005: PPUSH
13006: LD_VAR 0 1
13010: PPUSH
13011: CALL_OW 12
13015: ARRAY
13016: PPUSH
13017: LD_INT 1
13019: PPUSH
13020: LD_INT 4
13022: PPUSH
13023: CALL_OW 12
13027: PPUSH
13028: LD_INT 3000
13030: PPUSH
13031: LD_INT 9000
13033: PPUSH
13034: CALL_OW 12
13038: PPUSH
13039: CALL_OW 492
// end ;
13043: PPOPN 1
13045: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13046: LD_EXP 25
13050: PUSH
13051: LD_EXP 40
13055: AND
13056: IFFALSE 13076
13058: GO 13060
13060: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13061: LD_INT 1
13063: PPUSH
13064: LD_OWVAR 2
13068: PPUSH
13069: LD_INT 0
13071: PPUSH
13072: CALL_OW 324
13076: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13077: LD_EXP 25
13081: PUSH
13082: LD_EXP 41
13086: AND
13087: IFFALSE 13170
13089: GO 13091
13091: DISABLE
13092: LD_INT 0
13094: PPUSH
13095: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13096: LD_ADDR_VAR 0 2
13100: PUSH
13101: LD_INT 22
13103: PUSH
13104: LD_OWVAR 2
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: PUSH
13113: LD_INT 21
13115: PUSH
13116: LD_INT 3
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: PPUSH
13127: CALL_OW 69
13131: ST_TO_ADDR
// if not tmp then
13132: LD_VAR 0 2
13136: NOT
13137: IFFALSE 13141
// exit ;
13139: GO 13170
// for i in tmp do
13141: LD_ADDR_VAR 0 1
13145: PUSH
13146: LD_VAR 0 2
13150: PUSH
13151: FOR_IN
13152: IFFALSE 13168
// SetBLevel ( i , 10 ) ;
13154: LD_VAR 0 1
13158: PPUSH
13159: LD_INT 10
13161: PPUSH
13162: CALL_OW 241
13166: GO 13151
13168: POP
13169: POP
// end ;
13170: PPOPN 2
13172: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13173: LD_EXP 25
13177: PUSH
13178: LD_EXP 42
13182: AND
13183: IFFALSE 13294
13185: GO 13187
13187: DISABLE
13188: LD_INT 0
13190: PPUSH
13191: PPUSH
13192: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13193: LD_ADDR_VAR 0 3
13197: PUSH
13198: LD_INT 22
13200: PUSH
13201: LD_OWVAR 2
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: PUSH
13210: LD_INT 25
13212: PUSH
13213: LD_INT 1
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: PPUSH
13224: CALL_OW 69
13228: ST_TO_ADDR
// if not tmp then
13229: LD_VAR 0 3
13233: NOT
13234: IFFALSE 13238
// exit ;
13236: GO 13294
// un := tmp [ rand ( 1 , tmp ) ] ;
13238: LD_ADDR_VAR 0 2
13242: PUSH
13243: LD_VAR 0 3
13247: PUSH
13248: LD_INT 1
13250: PPUSH
13251: LD_VAR 0 3
13255: PPUSH
13256: CALL_OW 12
13260: ARRAY
13261: ST_TO_ADDR
// if Crawls ( un ) then
13262: LD_VAR 0 2
13266: PPUSH
13267: CALL_OW 318
13271: IFFALSE 13282
// ComWalk ( un ) ;
13273: LD_VAR 0 2
13277: PPUSH
13278: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13282: LD_VAR 0 2
13286: PPUSH
13287: LD_INT 5
13289: PPUSH
13290: CALL_OW 336
// end ;
13294: PPOPN 3
13296: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13297: LD_EXP 25
13301: PUSH
13302: LD_EXP 43
13306: AND
13307: PUSH
13308: LD_OWVAR 67
13312: PUSH
13313: LD_INT 4
13315: LESS
13316: AND
13317: IFFALSE 13336
13319: GO 13321
13321: DISABLE
// begin Difficulty := Difficulty + 1 ;
13322: LD_ADDR_OWVAR 67
13326: PUSH
13327: LD_OWVAR 67
13331: PUSH
13332: LD_INT 1
13334: PLUS
13335: ST_TO_ADDR
// end ;
13336: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13337: LD_EXP 25
13341: PUSH
13342: LD_EXP 44
13346: AND
13347: IFFALSE 13450
13349: GO 13351
13351: DISABLE
13352: LD_INT 0
13354: PPUSH
// begin for i := 1 to 5 do
13355: LD_ADDR_VAR 0 1
13359: PUSH
13360: DOUBLE
13361: LD_INT 1
13363: DEC
13364: ST_TO_ADDR
13365: LD_INT 5
13367: PUSH
13368: FOR_TO
13369: IFFALSE 13448
// begin uc_nation := nation_nature ;
13371: LD_ADDR_OWVAR 21
13375: PUSH
13376: LD_INT 0
13378: ST_TO_ADDR
// uc_side := 0 ;
13379: LD_ADDR_OWVAR 20
13383: PUSH
13384: LD_INT 0
13386: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13387: LD_ADDR_OWVAR 29
13391: PUSH
13392: LD_INT 12
13394: PUSH
13395: LD_INT 12
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: ST_TO_ADDR
// hc_agressivity := 20 ;
13402: LD_ADDR_OWVAR 35
13406: PUSH
13407: LD_INT 20
13409: ST_TO_ADDR
// hc_class := class_tiger ;
13410: LD_ADDR_OWVAR 28
13414: PUSH
13415: LD_INT 14
13417: ST_TO_ADDR
// hc_gallery :=  ;
13418: LD_ADDR_OWVAR 33
13422: PUSH
13423: LD_STRING 
13425: ST_TO_ADDR
// hc_name :=  ;
13426: LD_ADDR_OWVAR 26
13430: PUSH
13431: LD_STRING 
13433: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13434: CALL_OW 44
13438: PPUSH
13439: LD_INT 0
13441: PPUSH
13442: CALL_OW 51
// end ;
13446: GO 13368
13448: POP
13449: POP
// end ;
13450: PPOPN 1
13452: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13453: LD_EXP 25
13457: PUSH
13458: LD_EXP 45
13462: AND
13463: IFFALSE 13472
13465: GO 13467
13467: DISABLE
// StreamSibBomb ;
13468: CALL 13473 0 0
13472: END
// export function StreamSibBomb ; var i , x , y ; begin
13473: LD_INT 0
13475: PPUSH
13476: PPUSH
13477: PPUSH
13478: PPUSH
// result := false ;
13479: LD_ADDR_VAR 0 1
13483: PUSH
13484: LD_INT 0
13486: ST_TO_ADDR
// for i := 1 to 16 do
13487: LD_ADDR_VAR 0 2
13491: PUSH
13492: DOUBLE
13493: LD_INT 1
13495: DEC
13496: ST_TO_ADDR
13497: LD_INT 16
13499: PUSH
13500: FOR_TO
13501: IFFALSE 13700
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13503: LD_ADDR_VAR 0 3
13507: PUSH
13508: LD_INT 10
13510: PUSH
13511: LD_INT 20
13513: PUSH
13514: LD_INT 30
13516: PUSH
13517: LD_INT 40
13519: PUSH
13520: LD_INT 50
13522: PUSH
13523: LD_INT 60
13525: PUSH
13526: LD_INT 70
13528: PUSH
13529: LD_INT 80
13531: PUSH
13532: LD_INT 90
13534: PUSH
13535: LD_INT 100
13537: PUSH
13538: LD_INT 110
13540: PUSH
13541: LD_INT 120
13543: PUSH
13544: LD_INT 130
13546: PUSH
13547: LD_INT 140
13549: PUSH
13550: LD_INT 150
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 1
13572: PPUSH
13573: LD_INT 15
13575: PPUSH
13576: CALL_OW 12
13580: ARRAY
13581: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13582: LD_ADDR_VAR 0 4
13586: PUSH
13587: LD_INT 10
13589: PUSH
13590: LD_INT 20
13592: PUSH
13593: LD_INT 30
13595: PUSH
13596: LD_INT 40
13598: PUSH
13599: LD_INT 50
13601: PUSH
13602: LD_INT 60
13604: PUSH
13605: LD_INT 70
13607: PUSH
13608: LD_INT 80
13610: PUSH
13611: LD_INT 90
13613: PUSH
13614: LD_INT 100
13616: PUSH
13617: LD_INT 110
13619: PUSH
13620: LD_INT 120
13622: PUSH
13623: LD_INT 130
13625: PUSH
13626: LD_INT 140
13628: PUSH
13629: LD_INT 150
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: PUSH
13649: LD_INT 1
13651: PPUSH
13652: LD_INT 15
13654: PPUSH
13655: CALL_OW 12
13659: ARRAY
13660: ST_TO_ADDR
// if ValidHex ( x , y ) then
13661: LD_VAR 0 3
13665: PPUSH
13666: LD_VAR 0 4
13670: PPUSH
13671: CALL_OW 488
13675: IFFALSE 13698
// begin result := [ x , y ] ;
13677: LD_ADDR_VAR 0 1
13681: PUSH
13682: LD_VAR 0 3
13686: PUSH
13687: LD_VAR 0 4
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: ST_TO_ADDR
// break ;
13696: GO 13700
// end ; end ;
13698: GO 13500
13700: POP
13701: POP
// if result then
13702: LD_VAR 0 1
13706: IFFALSE 13766
// begin ToLua ( playSibBomb() ) ;
13708: LD_STRING playSibBomb()
13710: PPUSH
13711: CALL_OW 559
// wait ( 0 0$14 ) ;
13715: LD_INT 490
13717: PPUSH
13718: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13722: LD_VAR 0 1
13726: PUSH
13727: LD_INT 1
13729: ARRAY
13730: PPUSH
13731: LD_VAR 0 1
13735: PUSH
13736: LD_INT 2
13738: ARRAY
13739: PPUSH
13740: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13744: LD_VAR 0 1
13748: PUSH
13749: LD_INT 1
13751: ARRAY
13752: PPUSH
13753: LD_VAR 0 1
13757: PUSH
13758: LD_INT 2
13760: ARRAY
13761: PPUSH
13762: CALL_OW 429
// end ; end ;
13766: LD_VAR 0 1
13770: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13771: LD_EXP 25
13775: PUSH
13776: LD_EXP 47
13780: AND
13781: IFFALSE 13793
13783: GO 13785
13785: DISABLE
// YouLost (  ) ;
13786: LD_STRING 
13788: PPUSH
13789: CALL_OW 104
13793: END
// every 0 0$1 trigger StreamModeActive and sFog do
13794: LD_EXP 25
13798: PUSH
13799: LD_EXP 46
13803: AND
13804: IFFALSE 13818
13806: GO 13808
13808: DISABLE
// FogOff ( your_side ) ;
13809: LD_OWVAR 2
13813: PPUSH
13814: CALL_OW 344
13818: END
// every 0 0$1 trigger StreamModeActive and sSun do
13819: LD_EXP 25
13823: PUSH
13824: LD_EXP 48
13828: AND
13829: IFFALSE 13857
13831: GO 13833
13833: DISABLE
// begin solar_recharge_percent := 0 ;
13834: LD_ADDR_OWVAR 79
13838: PUSH
13839: LD_INT 0
13841: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13842: LD_INT 10500
13844: PPUSH
13845: CALL_OW 67
// solar_recharge_percent := 100 ;
13849: LD_ADDR_OWVAR 79
13853: PUSH
13854: LD_INT 100
13856: ST_TO_ADDR
// end ;
13857: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13858: LD_EXP 25
13862: PUSH
13863: LD_EXP 49
13867: AND
13868: IFFALSE 14107
13870: GO 13872
13872: DISABLE
13873: LD_INT 0
13875: PPUSH
13876: PPUSH
13877: PPUSH
// begin tmp := [ ] ;
13878: LD_ADDR_VAR 0 3
13882: PUSH
13883: EMPTY
13884: ST_TO_ADDR
// for i := 1 to 6 do
13885: LD_ADDR_VAR 0 1
13889: PUSH
13890: DOUBLE
13891: LD_INT 1
13893: DEC
13894: ST_TO_ADDR
13895: LD_INT 6
13897: PUSH
13898: FOR_TO
13899: IFFALSE 14004
// begin uc_nation := nation_nature ;
13901: LD_ADDR_OWVAR 21
13905: PUSH
13906: LD_INT 0
13908: ST_TO_ADDR
// uc_side := 0 ;
13909: LD_ADDR_OWVAR 20
13913: PUSH
13914: LD_INT 0
13916: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13917: LD_ADDR_OWVAR 29
13921: PUSH
13922: LD_INT 12
13924: PUSH
13925: LD_INT 12
13927: PUSH
13928: EMPTY
13929: LIST
13930: LIST
13931: ST_TO_ADDR
// hc_agressivity := 20 ;
13932: LD_ADDR_OWVAR 35
13936: PUSH
13937: LD_INT 20
13939: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13940: LD_ADDR_OWVAR 28
13944: PUSH
13945: LD_INT 17
13947: ST_TO_ADDR
// hc_gallery :=  ;
13948: LD_ADDR_OWVAR 33
13952: PUSH
13953: LD_STRING 
13955: ST_TO_ADDR
// hc_name :=  ;
13956: LD_ADDR_OWVAR 26
13960: PUSH
13961: LD_STRING 
13963: ST_TO_ADDR
// un := CreateHuman ;
13964: LD_ADDR_VAR 0 2
13968: PUSH
13969: CALL_OW 44
13973: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13974: LD_VAR 0 2
13978: PPUSH
13979: LD_INT 1
13981: PPUSH
13982: CALL_OW 51
// tmp := tmp ^ un ;
13986: LD_ADDR_VAR 0 3
13990: PUSH
13991: LD_VAR 0 3
13995: PUSH
13996: LD_VAR 0 2
14000: ADD
14001: ST_TO_ADDR
// end ;
14002: GO 13898
14004: POP
14005: POP
// repeat wait ( 0 0$1 ) ;
14006: LD_INT 35
14008: PPUSH
14009: CALL_OW 67
// for un in tmp do
14013: LD_ADDR_VAR 0 2
14017: PUSH
14018: LD_VAR 0 3
14022: PUSH
14023: FOR_IN
14024: IFFALSE 14098
// begin if IsDead ( un ) then
14026: LD_VAR 0 2
14030: PPUSH
14031: CALL_OW 301
14035: IFFALSE 14055
// begin tmp := tmp diff un ;
14037: LD_ADDR_VAR 0 3
14041: PUSH
14042: LD_VAR 0 3
14046: PUSH
14047: LD_VAR 0 2
14051: DIFF
14052: ST_TO_ADDR
// continue ;
14053: GO 14023
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14055: LD_VAR 0 2
14059: PPUSH
14060: LD_INT 3
14062: PUSH
14063: LD_INT 22
14065: PUSH
14066: LD_INT 0
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: PPUSH
14077: CALL_OW 69
14081: PPUSH
14082: LD_VAR 0 2
14086: PPUSH
14087: CALL_OW 74
14091: PPUSH
14092: CALL_OW 115
// end ;
14096: GO 14023
14098: POP
14099: POP
// until not tmp ;
14100: LD_VAR 0 3
14104: NOT
14105: IFFALSE 14006
// end ;
14107: PPOPN 3
14109: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14110: LD_EXP 25
14114: PUSH
14115: LD_EXP 50
14119: AND
14120: IFFALSE 14174
14122: GO 14124
14124: DISABLE
// begin ToLua ( displayTroll(); ) ;
14125: LD_STRING displayTroll();
14127: PPUSH
14128: CALL_OW 559
// wait ( 3 3$00 ) ;
14132: LD_INT 6300
14134: PPUSH
14135: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14139: LD_STRING hideTroll();
14141: PPUSH
14142: CALL_OW 559
// wait ( 1 1$00 ) ;
14146: LD_INT 2100
14148: PPUSH
14149: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14153: LD_STRING displayTroll();
14155: PPUSH
14156: CALL_OW 559
// wait ( 1 1$00 ) ;
14160: LD_INT 2100
14162: PPUSH
14163: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14167: LD_STRING hideTroll();
14169: PPUSH
14170: CALL_OW 559
// end ;
14174: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14175: LD_EXP 25
14179: PUSH
14180: LD_EXP 51
14184: AND
14185: IFFALSE 14248
14187: GO 14189
14189: DISABLE
14190: LD_INT 0
14192: PPUSH
// begin p := 0 ;
14193: LD_ADDR_VAR 0 1
14197: PUSH
14198: LD_INT 0
14200: ST_TO_ADDR
// repeat game_speed := 1 ;
14201: LD_ADDR_OWVAR 65
14205: PUSH
14206: LD_INT 1
14208: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14209: LD_INT 35
14211: PPUSH
14212: CALL_OW 67
// p := p + 1 ;
14216: LD_ADDR_VAR 0 1
14220: PUSH
14221: LD_VAR 0 1
14225: PUSH
14226: LD_INT 1
14228: PLUS
14229: ST_TO_ADDR
// until p >= 60 ;
14230: LD_VAR 0 1
14234: PUSH
14235: LD_INT 60
14237: GREATEREQUAL
14238: IFFALSE 14201
// game_speed := 4 ;
14240: LD_ADDR_OWVAR 65
14244: PUSH
14245: LD_INT 4
14247: ST_TO_ADDR
// end ;
14248: PPOPN 1
14250: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14251: LD_EXP 25
14255: PUSH
14256: LD_EXP 52
14260: AND
14261: IFFALSE 14407
14263: GO 14265
14265: DISABLE
14266: LD_INT 0
14268: PPUSH
14269: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14270: LD_ADDR_VAR 0 1
14274: PUSH
14275: LD_INT 22
14277: PUSH
14278: LD_OWVAR 2
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: PUSH
14287: LD_INT 2
14289: PUSH
14290: LD_INT 30
14292: PUSH
14293: LD_INT 0
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: PUSH
14300: LD_INT 30
14302: PUSH
14303: LD_INT 1
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: LIST
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PPUSH
14319: CALL_OW 69
14323: ST_TO_ADDR
// if not depot then
14324: LD_VAR 0 1
14328: NOT
14329: IFFALSE 14333
// exit ;
14331: GO 14407
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14333: LD_ADDR_VAR 0 2
14337: PUSH
14338: LD_VAR 0 1
14342: PUSH
14343: LD_INT 1
14345: PPUSH
14346: LD_VAR 0 1
14350: PPUSH
14351: CALL_OW 12
14355: ARRAY
14356: PPUSH
14357: CALL_OW 274
14361: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14362: LD_VAR 0 2
14366: PPUSH
14367: LD_INT 1
14369: PPUSH
14370: LD_INT 0
14372: PPUSH
14373: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14377: LD_VAR 0 2
14381: PPUSH
14382: LD_INT 2
14384: PPUSH
14385: LD_INT 0
14387: PPUSH
14388: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14392: LD_VAR 0 2
14396: PPUSH
14397: LD_INT 3
14399: PPUSH
14400: LD_INT 0
14402: PPUSH
14403: CALL_OW 277
// end ;
14407: PPOPN 2
14409: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14410: LD_EXP 25
14414: PUSH
14415: LD_EXP 53
14419: AND
14420: IFFALSE 14517
14422: GO 14424
14424: DISABLE
14425: LD_INT 0
14427: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14428: LD_ADDR_VAR 0 1
14432: PUSH
14433: LD_INT 22
14435: PUSH
14436: LD_OWVAR 2
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: PUSH
14445: LD_INT 21
14447: PUSH
14448: LD_INT 1
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: LD_INT 3
14457: PUSH
14458: LD_INT 23
14460: PUSH
14461: LD_INT 0
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: LIST
14476: PPUSH
14477: CALL_OW 69
14481: ST_TO_ADDR
// if not tmp then
14482: LD_VAR 0 1
14486: NOT
14487: IFFALSE 14491
// exit ;
14489: GO 14517
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14491: LD_VAR 0 1
14495: PUSH
14496: LD_INT 1
14498: PPUSH
14499: LD_VAR 0 1
14503: PPUSH
14504: CALL_OW 12
14508: ARRAY
14509: PPUSH
14510: LD_INT 200
14512: PPUSH
14513: CALL_OW 234
// end ;
14517: PPOPN 1
14519: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14520: LD_EXP 25
14524: PUSH
14525: LD_EXP 54
14529: AND
14530: IFFALSE 14609
14532: GO 14534
14534: DISABLE
14535: LD_INT 0
14537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14538: LD_ADDR_VAR 0 1
14542: PUSH
14543: LD_INT 22
14545: PUSH
14546: LD_OWVAR 2
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: PUSH
14555: LD_INT 21
14557: PUSH
14558: LD_INT 2
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: PPUSH
14569: CALL_OW 69
14573: ST_TO_ADDR
// if not tmp then
14574: LD_VAR 0 1
14578: NOT
14579: IFFALSE 14583
// exit ;
14581: GO 14609
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14583: LD_VAR 0 1
14587: PUSH
14588: LD_INT 1
14590: PPUSH
14591: LD_VAR 0 1
14595: PPUSH
14596: CALL_OW 12
14600: ARRAY
14601: PPUSH
14602: LD_INT 60
14604: PPUSH
14605: CALL_OW 234
// end ;
14609: PPOPN 1
14611: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14612: LD_EXP 25
14616: PUSH
14617: LD_EXP 55
14621: AND
14622: IFFALSE 14721
14624: GO 14626
14626: DISABLE
14627: LD_INT 0
14629: PPUSH
14630: PPUSH
// begin enable ;
14631: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14632: LD_ADDR_VAR 0 1
14636: PUSH
14637: LD_INT 22
14639: PUSH
14640: LD_OWVAR 2
14644: PUSH
14645: EMPTY
14646: LIST
14647: LIST
14648: PUSH
14649: LD_INT 61
14651: PUSH
14652: EMPTY
14653: LIST
14654: PUSH
14655: LD_INT 33
14657: PUSH
14658: LD_INT 2
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: LIST
14669: PPUSH
14670: CALL_OW 69
14674: ST_TO_ADDR
// if not tmp then
14675: LD_VAR 0 1
14679: NOT
14680: IFFALSE 14684
// exit ;
14682: GO 14721
// for i in tmp do
14684: LD_ADDR_VAR 0 2
14688: PUSH
14689: LD_VAR 0 1
14693: PUSH
14694: FOR_IN
14695: IFFALSE 14719
// if IsControledBy ( i ) then
14697: LD_VAR 0 2
14701: PPUSH
14702: CALL_OW 312
14706: IFFALSE 14717
// ComUnlink ( i ) ;
14708: LD_VAR 0 2
14712: PPUSH
14713: CALL_OW 136
14717: GO 14694
14719: POP
14720: POP
// end ;
14721: PPOPN 2
14723: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14724: LD_EXP 25
14728: PUSH
14729: LD_EXP 56
14733: AND
14734: IFFALSE 14874
14736: GO 14738
14738: DISABLE
14739: LD_INT 0
14741: PPUSH
14742: PPUSH
// begin ToLua ( displayPowell(); ) ;
14743: LD_STRING displayPowell();
14745: PPUSH
14746: CALL_OW 559
// uc_side := 0 ;
14750: LD_ADDR_OWVAR 20
14754: PUSH
14755: LD_INT 0
14757: ST_TO_ADDR
// uc_nation := 2 ;
14758: LD_ADDR_OWVAR 21
14762: PUSH
14763: LD_INT 2
14765: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14766: LD_ADDR_OWVAR 37
14770: PUSH
14771: LD_INT 14
14773: ST_TO_ADDR
// vc_engine := engine_siberite ;
14774: LD_ADDR_OWVAR 39
14778: PUSH
14779: LD_INT 3
14781: ST_TO_ADDR
// vc_control := control_apeman ;
14782: LD_ADDR_OWVAR 38
14786: PUSH
14787: LD_INT 5
14789: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14790: LD_ADDR_OWVAR 40
14794: PUSH
14795: LD_INT 29
14797: ST_TO_ADDR
// un := CreateVehicle ;
14798: LD_ADDR_VAR 0 2
14802: PUSH
14803: CALL_OW 45
14807: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14808: LD_VAR 0 2
14812: PPUSH
14813: LD_INT 1
14815: PPUSH
14816: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14820: LD_INT 35
14822: PPUSH
14823: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14827: LD_VAR 0 2
14831: PPUSH
14832: LD_INT 22
14834: PUSH
14835: LD_OWVAR 2
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PPUSH
14844: CALL_OW 69
14848: PPUSH
14849: LD_VAR 0 2
14853: PPUSH
14854: CALL_OW 74
14858: PPUSH
14859: CALL_OW 115
// until IsDead ( un ) ;
14863: LD_VAR 0 2
14867: PPUSH
14868: CALL_OW 301
14872: IFFALSE 14820
// end ;
14874: PPOPN 2
14876: END
// every 0 0$1 trigger StreamModeActive and sStu do
14877: LD_EXP 25
14881: PUSH
14882: LD_EXP 64
14886: AND
14887: IFFALSE 14903
14889: GO 14891
14891: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14892: LD_STRING displayStucuk();
14894: PPUSH
14895: CALL_OW 559
// ResetFog ;
14899: CALL_OW 335
// end ;
14903: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14904: LD_EXP 25
14908: PUSH
14909: LD_EXP 57
14913: AND
14914: IFFALSE 15055
14916: GO 14918
14918: DISABLE
14919: LD_INT 0
14921: PPUSH
14922: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14923: LD_ADDR_VAR 0 2
14927: PUSH
14928: LD_INT 22
14930: PUSH
14931: LD_OWVAR 2
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: PUSH
14940: LD_INT 21
14942: PUSH
14943: LD_INT 1
14945: PUSH
14946: EMPTY
14947: LIST
14948: LIST
14949: PUSH
14950: EMPTY
14951: LIST
14952: LIST
14953: PPUSH
14954: CALL_OW 69
14958: ST_TO_ADDR
// if not tmp then
14959: LD_VAR 0 2
14963: NOT
14964: IFFALSE 14968
// exit ;
14966: GO 15055
// un := tmp [ rand ( 1 , tmp ) ] ;
14968: LD_ADDR_VAR 0 1
14972: PUSH
14973: LD_VAR 0 2
14977: PUSH
14978: LD_INT 1
14980: PPUSH
14981: LD_VAR 0 2
14985: PPUSH
14986: CALL_OW 12
14990: ARRAY
14991: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14992: LD_VAR 0 1
14996: PPUSH
14997: LD_INT 0
14999: PPUSH
15000: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15004: LD_VAR 0 1
15008: PPUSH
15009: LD_OWVAR 3
15013: PUSH
15014: LD_VAR 0 1
15018: DIFF
15019: PPUSH
15020: LD_VAR 0 1
15024: PPUSH
15025: CALL_OW 74
15029: PPUSH
15030: CALL_OW 115
// wait ( 0 0$20 ) ;
15034: LD_INT 700
15036: PPUSH
15037: CALL_OW 67
// SetSide ( un , your_side ) ;
15041: LD_VAR 0 1
15045: PPUSH
15046: LD_OWVAR 2
15050: PPUSH
15051: CALL_OW 235
// end ;
15055: PPOPN 2
15057: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15058: LD_EXP 25
15062: PUSH
15063: LD_EXP 58
15067: AND
15068: IFFALSE 15174
15070: GO 15072
15072: DISABLE
15073: LD_INT 0
15075: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15076: LD_ADDR_VAR 0 1
15080: PUSH
15081: LD_INT 22
15083: PUSH
15084: LD_OWVAR 2
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: LD_INT 2
15095: PUSH
15096: LD_INT 30
15098: PUSH
15099: LD_INT 0
15101: PUSH
15102: EMPTY
15103: LIST
15104: LIST
15105: PUSH
15106: LD_INT 30
15108: PUSH
15109: LD_INT 1
15111: PUSH
15112: EMPTY
15113: LIST
15114: LIST
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: LIST
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: PPUSH
15125: CALL_OW 69
15129: ST_TO_ADDR
// if not depot then
15130: LD_VAR 0 1
15134: NOT
15135: IFFALSE 15139
// exit ;
15137: GO 15174
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15139: LD_VAR 0 1
15143: PUSH
15144: LD_INT 1
15146: ARRAY
15147: PPUSH
15148: CALL_OW 250
15152: PPUSH
15153: LD_VAR 0 1
15157: PUSH
15158: LD_INT 1
15160: ARRAY
15161: PPUSH
15162: CALL_OW 251
15166: PPUSH
15167: LD_INT 70
15169: PPUSH
15170: CALL_OW 495
// end ;
15174: PPOPN 1
15176: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15177: LD_EXP 25
15181: PUSH
15182: LD_EXP 59
15186: AND
15187: IFFALSE 15398
15189: GO 15191
15191: DISABLE
15192: LD_INT 0
15194: PPUSH
15195: PPUSH
15196: PPUSH
15197: PPUSH
15198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15199: LD_ADDR_VAR 0 5
15203: PUSH
15204: LD_INT 22
15206: PUSH
15207: LD_OWVAR 2
15211: PUSH
15212: EMPTY
15213: LIST
15214: LIST
15215: PUSH
15216: LD_INT 21
15218: PUSH
15219: LD_INT 1
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PUSH
15226: EMPTY
15227: LIST
15228: LIST
15229: PPUSH
15230: CALL_OW 69
15234: ST_TO_ADDR
// if not tmp then
15235: LD_VAR 0 5
15239: NOT
15240: IFFALSE 15244
// exit ;
15242: GO 15398
// for i in tmp do
15244: LD_ADDR_VAR 0 1
15248: PUSH
15249: LD_VAR 0 5
15253: PUSH
15254: FOR_IN
15255: IFFALSE 15396
// begin d := rand ( 0 , 5 ) ;
15257: LD_ADDR_VAR 0 4
15261: PUSH
15262: LD_INT 0
15264: PPUSH
15265: LD_INT 5
15267: PPUSH
15268: CALL_OW 12
15272: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15273: LD_ADDR_VAR 0 2
15277: PUSH
15278: LD_VAR 0 1
15282: PPUSH
15283: CALL_OW 250
15287: PPUSH
15288: LD_VAR 0 4
15292: PPUSH
15293: LD_INT 3
15295: PPUSH
15296: LD_INT 12
15298: PPUSH
15299: CALL_OW 12
15303: PPUSH
15304: CALL_OW 272
15308: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15309: LD_ADDR_VAR 0 3
15313: PUSH
15314: LD_VAR 0 1
15318: PPUSH
15319: CALL_OW 251
15323: PPUSH
15324: LD_VAR 0 4
15328: PPUSH
15329: LD_INT 3
15331: PPUSH
15332: LD_INT 12
15334: PPUSH
15335: CALL_OW 12
15339: PPUSH
15340: CALL_OW 273
15344: ST_TO_ADDR
// if ValidHex ( x , y ) then
15345: LD_VAR 0 2
15349: PPUSH
15350: LD_VAR 0 3
15354: PPUSH
15355: CALL_OW 488
15359: IFFALSE 15394
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15361: LD_VAR 0 1
15365: PPUSH
15366: LD_VAR 0 2
15370: PPUSH
15371: LD_VAR 0 3
15375: PPUSH
15376: LD_INT 3
15378: PPUSH
15379: LD_INT 6
15381: PPUSH
15382: CALL_OW 12
15386: PPUSH
15387: LD_INT 1
15389: PPUSH
15390: CALL_OW 483
// end ;
15394: GO 15254
15396: POP
15397: POP
// end ;
15398: PPOPN 5
15400: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15401: LD_EXP 25
15405: PUSH
15406: LD_EXP 60
15410: AND
15411: IFFALSE 15505
15413: GO 15415
15415: DISABLE
15416: LD_INT 0
15418: PPUSH
15419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15420: LD_ADDR_VAR 0 2
15424: PUSH
15425: LD_INT 22
15427: PUSH
15428: LD_OWVAR 2
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: PUSH
15437: LD_INT 32
15439: PUSH
15440: LD_INT 1
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: PUSH
15447: LD_INT 21
15449: PUSH
15450: LD_INT 2
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: PUSH
15457: EMPTY
15458: LIST
15459: LIST
15460: LIST
15461: PPUSH
15462: CALL_OW 69
15466: ST_TO_ADDR
// if not tmp then
15467: LD_VAR 0 2
15471: NOT
15472: IFFALSE 15476
// exit ;
15474: GO 15505
// for i in tmp do
15476: LD_ADDR_VAR 0 1
15480: PUSH
15481: LD_VAR 0 2
15485: PUSH
15486: FOR_IN
15487: IFFALSE 15503
// SetFuel ( i , 0 ) ;
15489: LD_VAR 0 1
15493: PPUSH
15494: LD_INT 0
15496: PPUSH
15497: CALL_OW 240
15501: GO 15486
15503: POP
15504: POP
// end ;
15505: PPOPN 2
15507: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15508: LD_EXP 25
15512: PUSH
15513: LD_EXP 61
15517: AND
15518: IFFALSE 15584
15520: GO 15522
15522: DISABLE
15523: LD_INT 0
15525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15526: LD_ADDR_VAR 0 1
15530: PUSH
15531: LD_INT 22
15533: PUSH
15534: LD_OWVAR 2
15538: PUSH
15539: EMPTY
15540: LIST
15541: LIST
15542: PUSH
15543: LD_INT 30
15545: PUSH
15546: LD_INT 29
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: PPUSH
15557: CALL_OW 69
15561: ST_TO_ADDR
// if not tmp then
15562: LD_VAR 0 1
15566: NOT
15567: IFFALSE 15571
// exit ;
15569: GO 15584
// DestroyUnit ( tmp [ 1 ] ) ;
15571: LD_VAR 0 1
15575: PUSH
15576: LD_INT 1
15578: ARRAY
15579: PPUSH
15580: CALL_OW 65
// end ;
15584: PPOPN 1
15586: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15587: LD_EXP 25
15591: PUSH
15592: LD_EXP 63
15596: AND
15597: IFFALSE 15726
15599: GO 15601
15601: DISABLE
15602: LD_INT 0
15604: PPUSH
// begin uc_side := 0 ;
15605: LD_ADDR_OWVAR 20
15609: PUSH
15610: LD_INT 0
15612: ST_TO_ADDR
// uc_nation := nation_arabian ;
15613: LD_ADDR_OWVAR 21
15617: PUSH
15618: LD_INT 2
15620: ST_TO_ADDR
// hc_gallery :=  ;
15621: LD_ADDR_OWVAR 33
15625: PUSH
15626: LD_STRING 
15628: ST_TO_ADDR
// hc_name :=  ;
15629: LD_ADDR_OWVAR 26
15633: PUSH
15634: LD_STRING 
15636: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15637: LD_INT 1
15639: PPUSH
15640: LD_INT 11
15642: PPUSH
15643: LD_INT 10
15645: PPUSH
15646: CALL_OW 380
// un := CreateHuman ;
15650: LD_ADDR_VAR 0 1
15654: PUSH
15655: CALL_OW 44
15659: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15660: LD_VAR 0 1
15664: PPUSH
15665: LD_INT 1
15667: PPUSH
15668: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15672: LD_INT 35
15674: PPUSH
15675: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15679: LD_VAR 0 1
15683: PPUSH
15684: LD_INT 22
15686: PUSH
15687: LD_OWVAR 2
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: PPUSH
15696: CALL_OW 69
15700: PPUSH
15701: LD_VAR 0 1
15705: PPUSH
15706: CALL_OW 74
15710: PPUSH
15711: CALL_OW 115
// until IsDead ( un ) ;
15715: LD_VAR 0 1
15719: PPUSH
15720: CALL_OW 301
15724: IFFALSE 15672
// end ;
15726: PPOPN 1
15728: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15729: LD_EXP 25
15733: PUSH
15734: LD_EXP 65
15738: AND
15739: IFFALSE 15751
15741: GO 15743
15743: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15744: LD_STRING earthquake(getX(game), 0, 32)
15746: PPUSH
15747: CALL_OW 559
15751: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15752: LD_EXP 25
15756: PUSH
15757: LD_EXP 66
15761: AND
15762: IFFALSE 15853
15764: GO 15766
15766: DISABLE
15767: LD_INT 0
15769: PPUSH
// begin enable ;
15770: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15771: LD_ADDR_VAR 0 1
15775: PUSH
15776: LD_INT 22
15778: PUSH
15779: LD_OWVAR 2
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: PUSH
15788: LD_INT 21
15790: PUSH
15791: LD_INT 2
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: PUSH
15798: LD_INT 33
15800: PUSH
15801: LD_INT 3
15803: PUSH
15804: EMPTY
15805: LIST
15806: LIST
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: LIST
15812: PPUSH
15813: CALL_OW 69
15817: ST_TO_ADDR
// if not tmp then
15818: LD_VAR 0 1
15822: NOT
15823: IFFALSE 15827
// exit ;
15825: GO 15853
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15827: LD_VAR 0 1
15831: PUSH
15832: LD_INT 1
15834: PPUSH
15835: LD_VAR 0 1
15839: PPUSH
15840: CALL_OW 12
15844: ARRAY
15845: PPUSH
15846: LD_INT 1
15848: PPUSH
15849: CALL_OW 234
// end ;
15853: PPOPN 1
15855: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15856: LD_EXP 25
15860: PUSH
15861: LD_EXP 67
15865: AND
15866: IFFALSE 16007
15868: GO 15870
15870: DISABLE
15871: LD_INT 0
15873: PPUSH
15874: PPUSH
15875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15876: LD_ADDR_VAR 0 3
15880: PUSH
15881: LD_INT 22
15883: PUSH
15884: LD_OWVAR 2
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: PUSH
15893: LD_INT 25
15895: PUSH
15896: LD_INT 1
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: PPUSH
15907: CALL_OW 69
15911: ST_TO_ADDR
// if not tmp then
15912: LD_VAR 0 3
15916: NOT
15917: IFFALSE 15921
// exit ;
15919: GO 16007
// un := tmp [ rand ( 1 , tmp ) ] ;
15921: LD_ADDR_VAR 0 2
15925: PUSH
15926: LD_VAR 0 3
15930: PUSH
15931: LD_INT 1
15933: PPUSH
15934: LD_VAR 0 3
15938: PPUSH
15939: CALL_OW 12
15943: ARRAY
15944: ST_TO_ADDR
// if Crawls ( un ) then
15945: LD_VAR 0 2
15949: PPUSH
15950: CALL_OW 318
15954: IFFALSE 15965
// ComWalk ( un ) ;
15956: LD_VAR 0 2
15960: PPUSH
15961: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15965: LD_VAR 0 2
15969: PPUSH
15970: LD_INT 9
15972: PPUSH
15973: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15977: LD_INT 28
15979: PPUSH
15980: LD_OWVAR 2
15984: PPUSH
15985: LD_INT 2
15987: PPUSH
15988: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15992: LD_INT 29
15994: PPUSH
15995: LD_OWVAR 2
15999: PPUSH
16000: LD_INT 2
16002: PPUSH
16003: CALL_OW 322
// end ;
16007: PPOPN 3
16009: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16010: LD_EXP 25
16014: PUSH
16015: LD_EXP 68
16019: AND
16020: IFFALSE 16131
16022: GO 16024
16024: DISABLE
16025: LD_INT 0
16027: PPUSH
16028: PPUSH
16029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16030: LD_ADDR_VAR 0 3
16034: PUSH
16035: LD_INT 22
16037: PUSH
16038: LD_OWVAR 2
16042: PUSH
16043: EMPTY
16044: LIST
16045: LIST
16046: PUSH
16047: LD_INT 25
16049: PUSH
16050: LD_INT 1
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: PPUSH
16061: CALL_OW 69
16065: ST_TO_ADDR
// if not tmp then
16066: LD_VAR 0 3
16070: NOT
16071: IFFALSE 16075
// exit ;
16073: GO 16131
// un := tmp [ rand ( 1 , tmp ) ] ;
16075: LD_ADDR_VAR 0 2
16079: PUSH
16080: LD_VAR 0 3
16084: PUSH
16085: LD_INT 1
16087: PPUSH
16088: LD_VAR 0 3
16092: PPUSH
16093: CALL_OW 12
16097: ARRAY
16098: ST_TO_ADDR
// if Crawls ( un ) then
16099: LD_VAR 0 2
16103: PPUSH
16104: CALL_OW 318
16108: IFFALSE 16119
// ComWalk ( un ) ;
16110: LD_VAR 0 2
16114: PPUSH
16115: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16119: LD_VAR 0 2
16123: PPUSH
16124: LD_INT 8
16126: PPUSH
16127: CALL_OW 336
// end ;
16131: PPOPN 3
16133: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16134: LD_EXP 25
16138: PUSH
16139: LD_EXP 69
16143: AND
16144: IFFALSE 16288
16146: GO 16148
16148: DISABLE
16149: LD_INT 0
16151: PPUSH
16152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16153: LD_ADDR_VAR 0 2
16157: PUSH
16158: LD_INT 22
16160: PUSH
16161: LD_OWVAR 2
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: PUSH
16170: LD_INT 21
16172: PUSH
16173: LD_INT 2
16175: PUSH
16176: EMPTY
16177: LIST
16178: LIST
16179: PUSH
16180: LD_INT 2
16182: PUSH
16183: LD_INT 34
16185: PUSH
16186: LD_INT 12
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: PUSH
16193: LD_INT 34
16195: PUSH
16196: LD_INT 51
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: PUSH
16203: LD_INT 34
16205: PUSH
16206: LD_INT 32
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: LIST
16223: PPUSH
16224: CALL_OW 69
16228: ST_TO_ADDR
// if not tmp then
16229: LD_VAR 0 2
16233: NOT
16234: IFFALSE 16238
// exit ;
16236: GO 16288
// for i in tmp do
16238: LD_ADDR_VAR 0 1
16242: PUSH
16243: LD_VAR 0 2
16247: PUSH
16248: FOR_IN
16249: IFFALSE 16286
// if GetCargo ( i , mat_artifact ) = 0 then
16251: LD_VAR 0 1
16255: PPUSH
16256: LD_INT 4
16258: PPUSH
16259: CALL_OW 289
16263: PUSH
16264: LD_INT 0
16266: EQUAL
16267: IFFALSE 16284
// SetCargo ( i , mat_siberit , 100 ) ;
16269: LD_VAR 0 1
16273: PPUSH
16274: LD_INT 3
16276: PPUSH
16277: LD_INT 100
16279: PPUSH
16280: CALL_OW 290
16284: GO 16248
16286: POP
16287: POP
// end ;
16288: PPOPN 2
16290: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16291: LD_EXP 25
16295: PUSH
16296: LD_EXP 70
16300: AND
16301: IFFALSE 16484
16303: GO 16305
16305: DISABLE
16306: LD_INT 0
16308: PPUSH
16309: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16310: LD_ADDR_VAR 0 2
16314: PUSH
16315: LD_INT 22
16317: PUSH
16318: LD_OWVAR 2
16322: PUSH
16323: EMPTY
16324: LIST
16325: LIST
16326: PPUSH
16327: CALL_OW 69
16331: ST_TO_ADDR
// if not tmp then
16332: LD_VAR 0 2
16336: NOT
16337: IFFALSE 16341
// exit ;
16339: GO 16484
// for i := 1 to 2 do
16341: LD_ADDR_VAR 0 1
16345: PUSH
16346: DOUBLE
16347: LD_INT 1
16349: DEC
16350: ST_TO_ADDR
16351: LD_INT 2
16353: PUSH
16354: FOR_TO
16355: IFFALSE 16482
// begin uc_side := your_side ;
16357: LD_ADDR_OWVAR 20
16361: PUSH
16362: LD_OWVAR 2
16366: ST_TO_ADDR
// uc_nation := nation_american ;
16367: LD_ADDR_OWVAR 21
16371: PUSH
16372: LD_INT 1
16374: ST_TO_ADDR
// vc_chassis := us_morphling ;
16375: LD_ADDR_OWVAR 37
16379: PUSH
16380: LD_INT 5
16382: ST_TO_ADDR
// vc_engine := engine_siberite ;
16383: LD_ADDR_OWVAR 39
16387: PUSH
16388: LD_INT 3
16390: ST_TO_ADDR
// vc_control := control_computer ;
16391: LD_ADDR_OWVAR 38
16395: PUSH
16396: LD_INT 3
16398: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16399: LD_ADDR_OWVAR 40
16403: PUSH
16404: LD_INT 10
16406: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16407: LD_VAR 0 2
16411: PUSH
16412: LD_INT 1
16414: ARRAY
16415: PPUSH
16416: CALL_OW 310
16420: NOT
16421: IFFALSE 16468
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16423: CALL_OW 45
16427: PPUSH
16428: LD_VAR 0 2
16432: PUSH
16433: LD_INT 1
16435: ARRAY
16436: PPUSH
16437: CALL_OW 250
16441: PPUSH
16442: LD_VAR 0 2
16446: PUSH
16447: LD_INT 1
16449: ARRAY
16450: PPUSH
16451: CALL_OW 251
16455: PPUSH
16456: LD_INT 12
16458: PPUSH
16459: LD_INT 1
16461: PPUSH
16462: CALL_OW 50
16466: GO 16480
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16468: CALL_OW 45
16472: PPUSH
16473: LD_INT 1
16475: PPUSH
16476: CALL_OW 51
// end ;
16480: GO 16354
16482: POP
16483: POP
// end ;
16484: PPOPN 2
16486: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16487: LD_EXP 25
16491: PUSH
16492: LD_EXP 71
16496: AND
16497: IFFALSE 16719
16499: GO 16501
16501: DISABLE
16502: LD_INT 0
16504: PPUSH
16505: PPUSH
16506: PPUSH
16507: PPUSH
16508: PPUSH
16509: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16510: LD_ADDR_VAR 0 6
16514: PUSH
16515: LD_INT 22
16517: PUSH
16518: LD_OWVAR 2
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: PUSH
16527: LD_INT 21
16529: PUSH
16530: LD_INT 1
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PUSH
16537: LD_INT 3
16539: PUSH
16540: LD_INT 23
16542: PUSH
16543: LD_INT 0
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: PUSH
16554: EMPTY
16555: LIST
16556: LIST
16557: LIST
16558: PPUSH
16559: CALL_OW 69
16563: ST_TO_ADDR
// if not tmp then
16564: LD_VAR 0 6
16568: NOT
16569: IFFALSE 16573
// exit ;
16571: GO 16719
// s1 := rand ( 1 , 4 ) ;
16573: LD_ADDR_VAR 0 2
16577: PUSH
16578: LD_INT 1
16580: PPUSH
16581: LD_INT 4
16583: PPUSH
16584: CALL_OW 12
16588: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16589: LD_ADDR_VAR 0 4
16593: PUSH
16594: LD_VAR 0 6
16598: PUSH
16599: LD_INT 1
16601: ARRAY
16602: PPUSH
16603: LD_VAR 0 2
16607: PPUSH
16608: CALL_OW 259
16612: ST_TO_ADDR
// if s1 = 1 then
16613: LD_VAR 0 2
16617: PUSH
16618: LD_INT 1
16620: EQUAL
16621: IFFALSE 16641
// s2 := rand ( 2 , 4 ) else
16623: LD_ADDR_VAR 0 3
16627: PUSH
16628: LD_INT 2
16630: PPUSH
16631: LD_INT 4
16633: PPUSH
16634: CALL_OW 12
16638: ST_TO_ADDR
16639: GO 16649
// s2 := 1 ;
16641: LD_ADDR_VAR 0 3
16645: PUSH
16646: LD_INT 1
16648: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16649: LD_ADDR_VAR 0 5
16653: PUSH
16654: LD_VAR 0 6
16658: PUSH
16659: LD_INT 1
16661: ARRAY
16662: PPUSH
16663: LD_VAR 0 3
16667: PPUSH
16668: CALL_OW 259
16672: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16673: LD_VAR 0 6
16677: PUSH
16678: LD_INT 1
16680: ARRAY
16681: PPUSH
16682: LD_VAR 0 2
16686: PPUSH
16687: LD_VAR 0 5
16691: PPUSH
16692: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16696: LD_VAR 0 6
16700: PUSH
16701: LD_INT 1
16703: ARRAY
16704: PPUSH
16705: LD_VAR 0 3
16709: PPUSH
16710: LD_VAR 0 4
16714: PPUSH
16715: CALL_OW 237
// end ;
16719: PPOPN 6
16721: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16722: LD_EXP 25
16726: PUSH
16727: LD_EXP 72
16731: AND
16732: IFFALSE 16811
16734: GO 16736
16736: DISABLE
16737: LD_INT 0
16739: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16740: LD_ADDR_VAR 0 1
16744: PUSH
16745: LD_INT 22
16747: PUSH
16748: LD_OWVAR 2
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: PUSH
16757: LD_INT 30
16759: PUSH
16760: LD_INT 3
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: PPUSH
16771: CALL_OW 69
16775: ST_TO_ADDR
// if not tmp then
16776: LD_VAR 0 1
16780: NOT
16781: IFFALSE 16785
// exit ;
16783: GO 16811
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16785: LD_VAR 0 1
16789: PUSH
16790: LD_INT 1
16792: PPUSH
16793: LD_VAR 0 1
16797: PPUSH
16798: CALL_OW 12
16802: ARRAY
16803: PPUSH
16804: LD_INT 1
16806: PPUSH
16807: CALL_OW 234
// end ;
16811: PPOPN 1
16813: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16814: LD_EXP 25
16818: PUSH
16819: LD_EXP 73
16823: AND
16824: IFFALSE 16936
16826: GO 16828
16828: DISABLE
16829: LD_INT 0
16831: PPUSH
16832: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16833: LD_ADDR_VAR 0 2
16837: PUSH
16838: LD_INT 22
16840: PUSH
16841: LD_OWVAR 2
16845: PUSH
16846: EMPTY
16847: LIST
16848: LIST
16849: PUSH
16850: LD_INT 2
16852: PUSH
16853: LD_INT 30
16855: PUSH
16856: LD_INT 27
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: PUSH
16863: LD_INT 30
16865: PUSH
16866: LD_INT 26
16868: PUSH
16869: EMPTY
16870: LIST
16871: LIST
16872: PUSH
16873: LD_INT 30
16875: PUSH
16876: LD_INT 28
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: PPUSH
16893: CALL_OW 69
16897: ST_TO_ADDR
// if not tmp then
16898: LD_VAR 0 2
16902: NOT
16903: IFFALSE 16907
// exit ;
16905: GO 16936
// for i in tmp do
16907: LD_ADDR_VAR 0 1
16911: PUSH
16912: LD_VAR 0 2
16916: PUSH
16917: FOR_IN
16918: IFFALSE 16934
// SetLives ( i , 1 ) ;
16920: LD_VAR 0 1
16924: PPUSH
16925: LD_INT 1
16927: PPUSH
16928: CALL_OW 234
16932: GO 16917
16934: POP
16935: POP
// end ;
16936: PPOPN 2
16938: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16939: LD_EXP 25
16943: PUSH
16944: LD_EXP 74
16948: AND
16949: IFFALSE 17236
16951: GO 16953
16953: DISABLE
16954: LD_INT 0
16956: PPUSH
16957: PPUSH
16958: PPUSH
// begin i := rand ( 1 , 7 ) ;
16959: LD_ADDR_VAR 0 1
16963: PUSH
16964: LD_INT 1
16966: PPUSH
16967: LD_INT 7
16969: PPUSH
16970: CALL_OW 12
16974: ST_TO_ADDR
// case i of 1 :
16975: LD_VAR 0 1
16979: PUSH
16980: LD_INT 1
16982: DOUBLE
16983: EQUAL
16984: IFTRUE 16988
16986: GO 16998
16988: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16989: LD_STRING earthquake(getX(game), 0, 32)
16991: PPUSH
16992: CALL_OW 559
16996: GO 17236
16998: LD_INT 2
17000: DOUBLE
17001: EQUAL
17002: IFTRUE 17006
17004: GO 17020
17006: POP
// begin ToLua ( displayStucuk(); ) ;
17007: LD_STRING displayStucuk();
17009: PPUSH
17010: CALL_OW 559
// ResetFog ;
17014: CALL_OW 335
// end ; 3 :
17018: GO 17236
17020: LD_INT 3
17022: DOUBLE
17023: EQUAL
17024: IFTRUE 17028
17026: GO 17132
17028: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17029: LD_ADDR_VAR 0 2
17033: PUSH
17034: LD_INT 22
17036: PUSH
17037: LD_OWVAR 2
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: PUSH
17046: LD_INT 25
17048: PUSH
17049: LD_INT 1
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PPUSH
17060: CALL_OW 69
17064: ST_TO_ADDR
// if not tmp then
17065: LD_VAR 0 2
17069: NOT
17070: IFFALSE 17074
// exit ;
17072: GO 17236
// un := tmp [ rand ( 1 , tmp ) ] ;
17074: LD_ADDR_VAR 0 3
17078: PUSH
17079: LD_VAR 0 2
17083: PUSH
17084: LD_INT 1
17086: PPUSH
17087: LD_VAR 0 2
17091: PPUSH
17092: CALL_OW 12
17096: ARRAY
17097: ST_TO_ADDR
// if Crawls ( un ) then
17098: LD_VAR 0 3
17102: PPUSH
17103: CALL_OW 318
17107: IFFALSE 17118
// ComWalk ( un ) ;
17109: LD_VAR 0 3
17113: PPUSH
17114: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17118: LD_VAR 0 3
17122: PPUSH
17123: LD_INT 8
17125: PPUSH
17126: CALL_OW 336
// end ; 4 :
17130: GO 17236
17132: LD_INT 4
17134: DOUBLE
17135: EQUAL
17136: IFTRUE 17140
17138: GO 17214
17140: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17141: LD_ADDR_VAR 0 2
17145: PUSH
17146: LD_INT 22
17148: PUSH
17149: LD_OWVAR 2
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: PUSH
17158: LD_INT 30
17160: PUSH
17161: LD_INT 29
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PPUSH
17172: CALL_OW 69
17176: ST_TO_ADDR
// if not tmp then
17177: LD_VAR 0 2
17181: NOT
17182: IFFALSE 17186
// exit ;
17184: GO 17236
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17186: LD_VAR 0 2
17190: PUSH
17191: LD_INT 1
17193: ARRAY
17194: PPUSH
17195: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17199: LD_VAR 0 2
17203: PUSH
17204: LD_INT 1
17206: ARRAY
17207: PPUSH
17208: CALL_OW 65
// end ; 5 .. 7 :
17212: GO 17236
17214: LD_INT 5
17216: DOUBLE
17217: GREATEREQUAL
17218: IFFALSE 17226
17220: LD_INT 7
17222: DOUBLE
17223: LESSEQUAL
17224: IFTRUE 17228
17226: GO 17235
17228: POP
// StreamSibBomb ; end ;
17229: CALL 13473 0 0
17233: GO 17236
17235: POP
// end ;
17236: PPOPN 3
17238: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17239: LD_EXP 25
17243: PUSH
17244: LD_EXP 75
17248: AND
17249: IFFALSE 17405
17251: GO 17253
17253: DISABLE
17254: LD_INT 0
17256: PPUSH
17257: PPUSH
17258: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17259: LD_ADDR_VAR 0 2
17263: PUSH
17264: LD_INT 81
17266: PUSH
17267: LD_OWVAR 2
17271: PUSH
17272: EMPTY
17273: LIST
17274: LIST
17275: PUSH
17276: LD_INT 2
17278: PUSH
17279: LD_INT 21
17281: PUSH
17282: LD_INT 1
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: PUSH
17289: LD_INT 21
17291: PUSH
17292: LD_INT 2
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: LIST
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PPUSH
17308: CALL_OW 69
17312: ST_TO_ADDR
// if not tmp then
17313: LD_VAR 0 2
17317: NOT
17318: IFFALSE 17322
// exit ;
17320: GO 17405
// p := 0 ;
17322: LD_ADDR_VAR 0 3
17326: PUSH
17327: LD_INT 0
17329: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17330: LD_INT 35
17332: PPUSH
17333: CALL_OW 67
// p := p + 1 ;
17337: LD_ADDR_VAR 0 3
17341: PUSH
17342: LD_VAR 0 3
17346: PUSH
17347: LD_INT 1
17349: PLUS
17350: ST_TO_ADDR
// for i in tmp do
17351: LD_ADDR_VAR 0 1
17355: PUSH
17356: LD_VAR 0 2
17360: PUSH
17361: FOR_IN
17362: IFFALSE 17393
// if GetLives ( i ) < 1000 then
17364: LD_VAR 0 1
17368: PPUSH
17369: CALL_OW 256
17373: PUSH
17374: LD_INT 1000
17376: LESS
17377: IFFALSE 17391
// SetLives ( i , 1000 ) ;
17379: LD_VAR 0 1
17383: PPUSH
17384: LD_INT 1000
17386: PPUSH
17387: CALL_OW 234
17391: GO 17361
17393: POP
17394: POP
// until p > 20 ;
17395: LD_VAR 0 3
17399: PUSH
17400: LD_INT 20
17402: GREATER
17403: IFFALSE 17330
// end ;
17405: PPOPN 3
17407: END
// every 0 0$1 trigger StreamModeActive and sTime do
17408: LD_EXP 25
17412: PUSH
17413: LD_EXP 76
17417: AND
17418: IFFALSE 17453
17420: GO 17422
17422: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17423: LD_INT 28
17425: PPUSH
17426: LD_OWVAR 2
17430: PPUSH
17431: LD_INT 2
17433: PPUSH
17434: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17438: LD_INT 30
17440: PPUSH
17441: LD_OWVAR 2
17445: PPUSH
17446: LD_INT 2
17448: PPUSH
17449: CALL_OW 322
// end ;
17453: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17454: LD_EXP 25
17458: PUSH
17459: LD_EXP 77
17463: AND
17464: IFFALSE 17585
17466: GO 17468
17468: DISABLE
17469: LD_INT 0
17471: PPUSH
17472: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17473: LD_ADDR_VAR 0 2
17477: PUSH
17478: LD_INT 22
17480: PUSH
17481: LD_OWVAR 2
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PUSH
17490: LD_INT 21
17492: PUSH
17493: LD_INT 1
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PUSH
17500: LD_INT 3
17502: PUSH
17503: LD_INT 23
17505: PUSH
17506: LD_INT 0
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: LIST
17521: PPUSH
17522: CALL_OW 69
17526: ST_TO_ADDR
// if not tmp then
17527: LD_VAR 0 2
17531: NOT
17532: IFFALSE 17536
// exit ;
17534: GO 17585
// for i in tmp do
17536: LD_ADDR_VAR 0 1
17540: PUSH
17541: LD_VAR 0 2
17545: PUSH
17546: FOR_IN
17547: IFFALSE 17583
// begin if Crawls ( i ) then
17549: LD_VAR 0 1
17553: PPUSH
17554: CALL_OW 318
17558: IFFALSE 17569
// ComWalk ( i ) ;
17560: LD_VAR 0 1
17564: PPUSH
17565: CALL_OW 138
// SetClass ( i , 2 ) ;
17569: LD_VAR 0 1
17573: PPUSH
17574: LD_INT 2
17576: PPUSH
17577: CALL_OW 336
// end ;
17581: GO 17546
17583: POP
17584: POP
// end ;
17585: PPOPN 2
17587: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17588: LD_EXP 25
17592: PUSH
17593: LD_EXP 78
17597: AND
17598: IFFALSE 17886
17600: GO 17602
17602: DISABLE
17603: LD_INT 0
17605: PPUSH
17606: PPUSH
17607: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17608: LD_OWVAR 2
17612: PPUSH
17613: LD_INT 9
17615: PPUSH
17616: LD_INT 1
17618: PPUSH
17619: LD_INT 1
17621: PPUSH
17622: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17626: LD_INT 9
17628: PPUSH
17629: LD_OWVAR 2
17633: PPUSH
17634: CALL_OW 343
// uc_side := 9 ;
17638: LD_ADDR_OWVAR 20
17642: PUSH
17643: LD_INT 9
17645: ST_TO_ADDR
// uc_nation := 2 ;
17646: LD_ADDR_OWVAR 21
17650: PUSH
17651: LD_INT 2
17653: ST_TO_ADDR
// hc_name := Dark Warrior ;
17654: LD_ADDR_OWVAR 26
17658: PUSH
17659: LD_STRING Dark Warrior
17661: ST_TO_ADDR
// hc_gallery :=  ;
17662: LD_ADDR_OWVAR 33
17666: PUSH
17667: LD_STRING 
17669: ST_TO_ADDR
// hc_noskilllimit := true ;
17670: LD_ADDR_OWVAR 76
17674: PUSH
17675: LD_INT 1
17677: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17678: LD_ADDR_OWVAR 31
17682: PUSH
17683: LD_INT 30
17685: PUSH
17686: LD_INT 30
17688: PUSH
17689: LD_INT 30
17691: PUSH
17692: LD_INT 30
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: ST_TO_ADDR
// un := CreateHuman ;
17701: LD_ADDR_VAR 0 3
17705: PUSH
17706: CALL_OW 44
17710: ST_TO_ADDR
// hc_noskilllimit := false ;
17711: LD_ADDR_OWVAR 76
17715: PUSH
17716: LD_INT 0
17718: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17719: LD_VAR 0 3
17723: PPUSH
17724: LD_INT 1
17726: PPUSH
17727: CALL_OW 51
// ToLua ( playRanger() ) ;
17731: LD_STRING playRanger()
17733: PPUSH
17734: CALL_OW 559
// p := 0 ;
17738: LD_ADDR_VAR 0 2
17742: PUSH
17743: LD_INT 0
17745: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17746: LD_INT 35
17748: PPUSH
17749: CALL_OW 67
// p := p + 1 ;
17753: LD_ADDR_VAR 0 2
17757: PUSH
17758: LD_VAR 0 2
17762: PUSH
17763: LD_INT 1
17765: PLUS
17766: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17767: LD_VAR 0 3
17771: PPUSH
17772: CALL_OW 256
17776: PUSH
17777: LD_INT 1000
17779: LESS
17780: IFFALSE 17794
// SetLives ( un , 1000 ) ;
17782: LD_VAR 0 3
17786: PPUSH
17787: LD_INT 1000
17789: PPUSH
17790: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17794: LD_VAR 0 3
17798: PPUSH
17799: LD_INT 81
17801: PUSH
17802: LD_OWVAR 2
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: LD_INT 91
17813: PUSH
17814: LD_VAR 0 3
17818: PUSH
17819: LD_INT 30
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: LIST
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PPUSH
17831: CALL_OW 69
17835: PPUSH
17836: LD_VAR 0 3
17840: PPUSH
17841: CALL_OW 74
17845: PPUSH
17846: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17850: LD_VAR 0 2
17854: PUSH
17855: LD_INT 80
17857: GREATER
17858: PUSH
17859: LD_VAR 0 3
17863: PPUSH
17864: CALL_OW 301
17868: OR
17869: IFFALSE 17746
// if un then
17871: LD_VAR 0 3
17875: IFFALSE 17886
// RemoveUnit ( un ) ;
17877: LD_VAR 0 3
17881: PPUSH
17882: CALL_OW 64
// end ;
17886: PPOPN 3
17888: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17889: LD_EXP 79
17893: IFFALSE 18009
17895: GO 17897
17897: DISABLE
17898: LD_INT 0
17900: PPUSH
17901: PPUSH
17902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17903: LD_ADDR_VAR 0 2
17907: PUSH
17908: LD_INT 81
17910: PUSH
17911: LD_OWVAR 2
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: LD_INT 21
17922: PUSH
17923: LD_INT 1
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PPUSH
17934: CALL_OW 69
17938: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17939: LD_STRING playComputer()
17941: PPUSH
17942: CALL_OW 559
// if not tmp then
17946: LD_VAR 0 2
17950: NOT
17951: IFFALSE 17955
// exit ;
17953: GO 18009
// for i in tmp do
17955: LD_ADDR_VAR 0 1
17959: PUSH
17960: LD_VAR 0 2
17964: PUSH
17965: FOR_IN
17966: IFFALSE 18007
// for j := 1 to 4 do
17968: LD_ADDR_VAR 0 3
17972: PUSH
17973: DOUBLE
17974: LD_INT 1
17976: DEC
17977: ST_TO_ADDR
17978: LD_INT 4
17980: PUSH
17981: FOR_TO
17982: IFFALSE 18003
// SetSkill ( i , j , 10 ) ;
17984: LD_VAR 0 1
17988: PPUSH
17989: LD_VAR 0 3
17993: PPUSH
17994: LD_INT 10
17996: PPUSH
17997: CALL_OW 237
18001: GO 17981
18003: POP
18004: POP
18005: GO 17965
18007: POP
18008: POP
// end ;
18009: PPOPN 3
18011: END
// every 0 0$1 trigger s30 do var i , tmp ;
18012: LD_EXP 80
18016: IFFALSE 18085
18018: GO 18020
18020: DISABLE
18021: LD_INT 0
18023: PPUSH
18024: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18025: LD_ADDR_VAR 0 2
18029: PUSH
18030: LD_INT 22
18032: PUSH
18033: LD_OWVAR 2
18037: PUSH
18038: EMPTY
18039: LIST
18040: LIST
18041: PPUSH
18042: CALL_OW 69
18046: ST_TO_ADDR
// if not tmp then
18047: LD_VAR 0 2
18051: NOT
18052: IFFALSE 18056
// exit ;
18054: GO 18085
// for i in tmp do
18056: LD_ADDR_VAR 0 1
18060: PUSH
18061: LD_VAR 0 2
18065: PUSH
18066: FOR_IN
18067: IFFALSE 18083
// SetLives ( i , 300 ) ;
18069: LD_VAR 0 1
18073: PPUSH
18074: LD_INT 300
18076: PPUSH
18077: CALL_OW 234
18081: GO 18066
18083: POP
18084: POP
// end ;
18085: PPOPN 2
18087: END
// every 0 0$1 trigger s60 do var i , tmp ;
18088: LD_EXP 81
18092: IFFALSE 18161
18094: GO 18096
18096: DISABLE
18097: LD_INT 0
18099: PPUSH
18100: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18101: LD_ADDR_VAR 0 2
18105: PUSH
18106: LD_INT 22
18108: PUSH
18109: LD_OWVAR 2
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PPUSH
18118: CALL_OW 69
18122: ST_TO_ADDR
// if not tmp then
18123: LD_VAR 0 2
18127: NOT
18128: IFFALSE 18132
// exit ;
18130: GO 18161
// for i in tmp do
18132: LD_ADDR_VAR 0 1
18136: PUSH
18137: LD_VAR 0 2
18141: PUSH
18142: FOR_IN
18143: IFFALSE 18159
// SetLives ( i , 600 ) ;
18145: LD_VAR 0 1
18149: PPUSH
18150: LD_INT 600
18152: PPUSH
18153: CALL_OW 234
18157: GO 18142
18159: POP
18160: POP
// end ;
18161: PPOPN 2
18163: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18164: LD_INT 0
18166: PPUSH
// case cmd of 301 :
18167: LD_VAR 0 1
18171: PUSH
18172: LD_INT 301
18174: DOUBLE
18175: EQUAL
18176: IFTRUE 18180
18178: GO 18212
18180: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18181: LD_VAR 0 6
18185: PPUSH
18186: LD_VAR 0 7
18190: PPUSH
18191: LD_VAR 0 8
18195: PPUSH
18196: LD_VAR 0 4
18200: PPUSH
18201: LD_VAR 0 5
18205: PPUSH
18206: CALL 19413 0 5
18210: GO 18333
18212: LD_INT 302
18214: DOUBLE
18215: EQUAL
18216: IFTRUE 18220
18218: GO 18257
18220: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18221: LD_VAR 0 6
18225: PPUSH
18226: LD_VAR 0 7
18230: PPUSH
18231: LD_VAR 0 8
18235: PPUSH
18236: LD_VAR 0 9
18240: PPUSH
18241: LD_VAR 0 4
18245: PPUSH
18246: LD_VAR 0 5
18250: PPUSH
18251: CALL 19504 0 6
18255: GO 18333
18257: LD_INT 303
18259: DOUBLE
18260: EQUAL
18261: IFTRUE 18265
18263: GO 18302
18265: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18266: LD_VAR 0 6
18270: PPUSH
18271: LD_VAR 0 7
18275: PPUSH
18276: LD_VAR 0 8
18280: PPUSH
18281: LD_VAR 0 9
18285: PPUSH
18286: LD_VAR 0 4
18290: PPUSH
18291: LD_VAR 0 5
18295: PPUSH
18296: CALL 18338 0 6
18300: GO 18333
18302: LD_INT 304
18304: DOUBLE
18305: EQUAL
18306: IFTRUE 18310
18308: GO 18332
18310: POP
// hHackTeleport ( unit , x , y ) ; end ;
18311: LD_VAR 0 2
18315: PPUSH
18316: LD_VAR 0 4
18320: PPUSH
18321: LD_VAR 0 5
18325: PPUSH
18326: CALL 20097 0 3
18330: GO 18333
18332: POP
// end ;
18333: LD_VAR 0 12
18337: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18338: LD_INT 0
18340: PPUSH
18341: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18342: LD_VAR 0 1
18346: PUSH
18347: LD_INT 1
18349: LESS
18350: PUSH
18351: LD_VAR 0 1
18355: PUSH
18356: LD_INT 3
18358: GREATER
18359: OR
18360: PUSH
18361: LD_VAR 0 5
18365: PPUSH
18366: LD_VAR 0 6
18370: PPUSH
18371: CALL_OW 428
18375: OR
18376: IFFALSE 18380
// exit ;
18378: GO 19100
// uc_side := your_side ;
18380: LD_ADDR_OWVAR 20
18384: PUSH
18385: LD_OWVAR 2
18389: ST_TO_ADDR
// uc_nation := nation ;
18390: LD_ADDR_OWVAR 21
18394: PUSH
18395: LD_VAR 0 1
18399: ST_TO_ADDR
// bc_level = 1 ;
18400: LD_ADDR_OWVAR 43
18404: PUSH
18405: LD_INT 1
18407: ST_TO_ADDR
// case btype of 1 :
18408: LD_VAR 0 2
18412: PUSH
18413: LD_INT 1
18415: DOUBLE
18416: EQUAL
18417: IFTRUE 18421
18419: GO 18432
18421: POP
// bc_type := b_depot ; 2 :
18422: LD_ADDR_OWVAR 42
18426: PUSH
18427: LD_INT 0
18429: ST_TO_ADDR
18430: GO 19044
18432: LD_INT 2
18434: DOUBLE
18435: EQUAL
18436: IFTRUE 18440
18438: GO 18451
18440: POP
// bc_type := b_warehouse ; 3 :
18441: LD_ADDR_OWVAR 42
18445: PUSH
18446: LD_INT 1
18448: ST_TO_ADDR
18449: GO 19044
18451: LD_INT 3
18453: DOUBLE
18454: EQUAL
18455: IFTRUE 18459
18457: GO 18470
18459: POP
// bc_type := b_lab ; 4 .. 9 :
18460: LD_ADDR_OWVAR 42
18464: PUSH
18465: LD_INT 6
18467: ST_TO_ADDR
18468: GO 19044
18470: LD_INT 4
18472: DOUBLE
18473: GREATEREQUAL
18474: IFFALSE 18482
18476: LD_INT 9
18478: DOUBLE
18479: LESSEQUAL
18480: IFTRUE 18484
18482: GO 18536
18484: POP
// begin bc_type := b_lab_half ;
18485: LD_ADDR_OWVAR 42
18489: PUSH
18490: LD_INT 7
18492: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18493: LD_ADDR_OWVAR 44
18497: PUSH
18498: LD_INT 10
18500: PUSH
18501: LD_INT 11
18503: PUSH
18504: LD_INT 12
18506: PUSH
18507: LD_INT 15
18509: PUSH
18510: LD_INT 14
18512: PUSH
18513: LD_INT 13
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: PUSH
18524: LD_VAR 0 2
18528: PUSH
18529: LD_INT 3
18531: MINUS
18532: ARRAY
18533: ST_TO_ADDR
// end ; 10 .. 13 :
18534: GO 19044
18536: LD_INT 10
18538: DOUBLE
18539: GREATEREQUAL
18540: IFFALSE 18548
18542: LD_INT 13
18544: DOUBLE
18545: LESSEQUAL
18546: IFTRUE 18550
18548: GO 18627
18550: POP
// begin bc_type := b_lab_full ;
18551: LD_ADDR_OWVAR 42
18555: PUSH
18556: LD_INT 8
18558: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18559: LD_ADDR_OWVAR 44
18563: PUSH
18564: LD_INT 10
18566: PUSH
18567: LD_INT 12
18569: PUSH
18570: LD_INT 14
18572: PUSH
18573: LD_INT 13
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: PUSH
18582: LD_VAR 0 2
18586: PUSH
18587: LD_INT 9
18589: MINUS
18590: ARRAY
18591: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18592: LD_ADDR_OWVAR 45
18596: PUSH
18597: LD_INT 11
18599: PUSH
18600: LD_INT 15
18602: PUSH
18603: LD_INT 12
18605: PUSH
18606: LD_INT 15
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: PUSH
18615: LD_VAR 0 2
18619: PUSH
18620: LD_INT 9
18622: MINUS
18623: ARRAY
18624: ST_TO_ADDR
// end ; 14 :
18625: GO 19044
18627: LD_INT 14
18629: DOUBLE
18630: EQUAL
18631: IFTRUE 18635
18633: GO 18646
18635: POP
// bc_type := b_workshop ; 15 :
18636: LD_ADDR_OWVAR 42
18640: PUSH
18641: LD_INT 2
18643: ST_TO_ADDR
18644: GO 19044
18646: LD_INT 15
18648: DOUBLE
18649: EQUAL
18650: IFTRUE 18654
18652: GO 18665
18654: POP
// bc_type := b_factory ; 16 :
18655: LD_ADDR_OWVAR 42
18659: PUSH
18660: LD_INT 3
18662: ST_TO_ADDR
18663: GO 19044
18665: LD_INT 16
18667: DOUBLE
18668: EQUAL
18669: IFTRUE 18673
18671: GO 18684
18673: POP
// bc_type := b_ext_gun ; 17 :
18674: LD_ADDR_OWVAR 42
18678: PUSH
18679: LD_INT 17
18681: ST_TO_ADDR
18682: GO 19044
18684: LD_INT 17
18686: DOUBLE
18687: EQUAL
18688: IFTRUE 18692
18690: GO 18720
18692: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18693: LD_ADDR_OWVAR 42
18697: PUSH
18698: LD_INT 19
18700: PUSH
18701: LD_INT 23
18703: PUSH
18704: LD_INT 19
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: LIST
18711: PUSH
18712: LD_VAR 0 1
18716: ARRAY
18717: ST_TO_ADDR
18718: GO 19044
18720: LD_INT 18
18722: DOUBLE
18723: EQUAL
18724: IFTRUE 18728
18726: GO 18739
18728: POP
// bc_type := b_ext_radar ; 19 :
18729: LD_ADDR_OWVAR 42
18733: PUSH
18734: LD_INT 20
18736: ST_TO_ADDR
18737: GO 19044
18739: LD_INT 19
18741: DOUBLE
18742: EQUAL
18743: IFTRUE 18747
18745: GO 18758
18747: POP
// bc_type := b_ext_radio ; 20 :
18748: LD_ADDR_OWVAR 42
18752: PUSH
18753: LD_INT 22
18755: ST_TO_ADDR
18756: GO 19044
18758: LD_INT 20
18760: DOUBLE
18761: EQUAL
18762: IFTRUE 18766
18764: GO 18777
18766: POP
// bc_type := b_ext_siberium ; 21 :
18767: LD_ADDR_OWVAR 42
18771: PUSH
18772: LD_INT 21
18774: ST_TO_ADDR
18775: GO 19044
18777: LD_INT 21
18779: DOUBLE
18780: EQUAL
18781: IFTRUE 18785
18783: GO 18796
18785: POP
// bc_type := b_ext_computer ; 22 :
18786: LD_ADDR_OWVAR 42
18790: PUSH
18791: LD_INT 24
18793: ST_TO_ADDR
18794: GO 19044
18796: LD_INT 22
18798: DOUBLE
18799: EQUAL
18800: IFTRUE 18804
18802: GO 18815
18804: POP
// bc_type := b_ext_track ; 23 :
18805: LD_ADDR_OWVAR 42
18809: PUSH
18810: LD_INT 16
18812: ST_TO_ADDR
18813: GO 19044
18815: LD_INT 23
18817: DOUBLE
18818: EQUAL
18819: IFTRUE 18823
18821: GO 18834
18823: POP
// bc_type := b_ext_laser ; 24 :
18824: LD_ADDR_OWVAR 42
18828: PUSH
18829: LD_INT 25
18831: ST_TO_ADDR
18832: GO 19044
18834: LD_INT 24
18836: DOUBLE
18837: EQUAL
18838: IFTRUE 18842
18840: GO 18853
18842: POP
// bc_type := b_control_tower ; 25 :
18843: LD_ADDR_OWVAR 42
18847: PUSH
18848: LD_INT 36
18850: ST_TO_ADDR
18851: GO 19044
18853: LD_INT 25
18855: DOUBLE
18856: EQUAL
18857: IFTRUE 18861
18859: GO 18872
18861: POP
// bc_type := b_breastwork ; 26 :
18862: LD_ADDR_OWVAR 42
18866: PUSH
18867: LD_INT 31
18869: ST_TO_ADDR
18870: GO 19044
18872: LD_INT 26
18874: DOUBLE
18875: EQUAL
18876: IFTRUE 18880
18878: GO 18891
18880: POP
// bc_type := b_bunker ; 27 :
18881: LD_ADDR_OWVAR 42
18885: PUSH
18886: LD_INT 32
18888: ST_TO_ADDR
18889: GO 19044
18891: LD_INT 27
18893: DOUBLE
18894: EQUAL
18895: IFTRUE 18899
18897: GO 18910
18899: POP
// bc_type := b_turret ; 28 :
18900: LD_ADDR_OWVAR 42
18904: PUSH
18905: LD_INT 33
18907: ST_TO_ADDR
18908: GO 19044
18910: LD_INT 28
18912: DOUBLE
18913: EQUAL
18914: IFTRUE 18918
18916: GO 18929
18918: POP
// bc_type := b_armoury ; 29 :
18919: LD_ADDR_OWVAR 42
18923: PUSH
18924: LD_INT 4
18926: ST_TO_ADDR
18927: GO 19044
18929: LD_INT 29
18931: DOUBLE
18932: EQUAL
18933: IFTRUE 18937
18935: GO 18948
18937: POP
// bc_type := b_barracks ; 30 :
18938: LD_ADDR_OWVAR 42
18942: PUSH
18943: LD_INT 5
18945: ST_TO_ADDR
18946: GO 19044
18948: LD_INT 30
18950: DOUBLE
18951: EQUAL
18952: IFTRUE 18956
18954: GO 18967
18956: POP
// bc_type := b_solar_power ; 31 :
18957: LD_ADDR_OWVAR 42
18961: PUSH
18962: LD_INT 27
18964: ST_TO_ADDR
18965: GO 19044
18967: LD_INT 31
18969: DOUBLE
18970: EQUAL
18971: IFTRUE 18975
18973: GO 18986
18975: POP
// bc_type := b_oil_power ; 32 :
18976: LD_ADDR_OWVAR 42
18980: PUSH
18981: LD_INT 26
18983: ST_TO_ADDR
18984: GO 19044
18986: LD_INT 32
18988: DOUBLE
18989: EQUAL
18990: IFTRUE 18994
18992: GO 19005
18994: POP
// bc_type := b_siberite_power ; 33 :
18995: LD_ADDR_OWVAR 42
18999: PUSH
19000: LD_INT 28
19002: ST_TO_ADDR
19003: GO 19044
19005: LD_INT 33
19007: DOUBLE
19008: EQUAL
19009: IFTRUE 19013
19011: GO 19024
19013: POP
// bc_type := b_oil_mine ; 34 :
19014: LD_ADDR_OWVAR 42
19018: PUSH
19019: LD_INT 29
19021: ST_TO_ADDR
19022: GO 19044
19024: LD_INT 34
19026: DOUBLE
19027: EQUAL
19028: IFTRUE 19032
19030: GO 19043
19032: POP
// bc_type := b_siberite_mine ; end ;
19033: LD_ADDR_OWVAR 42
19037: PUSH
19038: LD_INT 30
19040: ST_TO_ADDR
19041: GO 19044
19043: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19044: LD_ADDR_VAR 0 8
19048: PUSH
19049: LD_VAR 0 5
19053: PPUSH
19054: LD_VAR 0 6
19058: PPUSH
19059: LD_VAR 0 3
19063: PPUSH
19064: CALL_OW 47
19068: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19069: LD_OWVAR 42
19073: PUSH
19074: LD_INT 32
19076: PUSH
19077: LD_INT 33
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: IN
19084: IFFALSE 19100
// PlaceWeaponTurret ( b , weapon ) ;
19086: LD_VAR 0 8
19090: PPUSH
19091: LD_VAR 0 4
19095: PPUSH
19096: CALL_OW 431
// end ;
19100: LD_VAR 0 7
19104: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19105: LD_INT 0
19107: PPUSH
19108: PPUSH
19109: PPUSH
19110: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19111: LD_ADDR_VAR 0 4
19115: PUSH
19116: LD_INT 22
19118: PUSH
19119: LD_OWVAR 2
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 2
19130: PUSH
19131: LD_INT 30
19133: PUSH
19134: LD_INT 0
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 30
19143: PUSH
19144: LD_INT 1
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: LIST
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PPUSH
19160: CALL_OW 69
19164: ST_TO_ADDR
// if not tmp then
19165: LD_VAR 0 4
19169: NOT
19170: IFFALSE 19174
// exit ;
19172: GO 19233
// for i in tmp do
19174: LD_ADDR_VAR 0 2
19178: PUSH
19179: LD_VAR 0 4
19183: PUSH
19184: FOR_IN
19185: IFFALSE 19231
// for j = 1 to 3 do
19187: LD_ADDR_VAR 0 3
19191: PUSH
19192: DOUBLE
19193: LD_INT 1
19195: DEC
19196: ST_TO_ADDR
19197: LD_INT 3
19199: PUSH
19200: FOR_TO
19201: IFFALSE 19227
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19203: LD_VAR 0 2
19207: PPUSH
19208: CALL_OW 274
19212: PPUSH
19213: LD_VAR 0 3
19217: PPUSH
19218: LD_INT 99999
19220: PPUSH
19221: CALL_OW 277
19225: GO 19200
19227: POP
19228: POP
19229: GO 19184
19231: POP
19232: POP
// end ;
19233: LD_VAR 0 1
19237: RET
// export function hHackSetLevel10 ; var i , j ; begin
19238: LD_INT 0
19240: PPUSH
19241: PPUSH
19242: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19243: LD_ADDR_VAR 0 2
19247: PUSH
19248: LD_INT 21
19250: PUSH
19251: LD_INT 1
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PPUSH
19258: CALL_OW 69
19262: PUSH
19263: FOR_IN
19264: IFFALSE 19316
// if IsSelected ( i ) then
19266: LD_VAR 0 2
19270: PPUSH
19271: CALL_OW 306
19275: IFFALSE 19314
// begin for j := 1 to 4 do
19277: LD_ADDR_VAR 0 3
19281: PUSH
19282: DOUBLE
19283: LD_INT 1
19285: DEC
19286: ST_TO_ADDR
19287: LD_INT 4
19289: PUSH
19290: FOR_TO
19291: IFFALSE 19312
// SetSkill ( i , j , 10 ) ;
19293: LD_VAR 0 2
19297: PPUSH
19298: LD_VAR 0 3
19302: PPUSH
19303: LD_INT 10
19305: PPUSH
19306: CALL_OW 237
19310: GO 19290
19312: POP
19313: POP
// end ;
19314: GO 19263
19316: POP
19317: POP
// end ;
19318: LD_VAR 0 1
19322: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19323: LD_INT 0
19325: PPUSH
19326: PPUSH
19327: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19328: LD_ADDR_VAR 0 2
19332: PUSH
19333: LD_INT 22
19335: PUSH
19336: LD_OWVAR 2
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: PUSH
19345: LD_INT 21
19347: PUSH
19348: LD_INT 1
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: PPUSH
19359: CALL_OW 69
19363: PUSH
19364: FOR_IN
19365: IFFALSE 19406
// begin for j := 1 to 4 do
19367: LD_ADDR_VAR 0 3
19371: PUSH
19372: DOUBLE
19373: LD_INT 1
19375: DEC
19376: ST_TO_ADDR
19377: LD_INT 4
19379: PUSH
19380: FOR_TO
19381: IFFALSE 19402
// SetSkill ( i , j , 10 ) ;
19383: LD_VAR 0 2
19387: PPUSH
19388: LD_VAR 0 3
19392: PPUSH
19393: LD_INT 10
19395: PPUSH
19396: CALL_OW 237
19400: GO 19380
19402: POP
19403: POP
// end ;
19404: GO 19364
19406: POP
19407: POP
// end ;
19408: LD_VAR 0 1
19412: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19413: LD_INT 0
19415: PPUSH
// uc_side := your_side ;
19416: LD_ADDR_OWVAR 20
19420: PUSH
19421: LD_OWVAR 2
19425: ST_TO_ADDR
// uc_nation := nation ;
19426: LD_ADDR_OWVAR 21
19430: PUSH
19431: LD_VAR 0 1
19435: ST_TO_ADDR
// InitHc ;
19436: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19440: LD_INT 0
19442: PPUSH
19443: LD_VAR 0 2
19447: PPUSH
19448: LD_VAR 0 3
19452: PPUSH
19453: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19457: LD_VAR 0 4
19461: PPUSH
19462: LD_VAR 0 5
19466: PPUSH
19467: CALL_OW 428
19471: PUSH
19472: LD_INT 0
19474: EQUAL
19475: IFFALSE 19499
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19477: CALL_OW 44
19481: PPUSH
19482: LD_VAR 0 4
19486: PPUSH
19487: LD_VAR 0 5
19491: PPUSH
19492: LD_INT 1
19494: PPUSH
19495: CALL_OW 48
// end ;
19499: LD_VAR 0 6
19503: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19504: LD_INT 0
19506: PPUSH
19507: PPUSH
// uc_side := your_side ;
19508: LD_ADDR_OWVAR 20
19512: PUSH
19513: LD_OWVAR 2
19517: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19518: LD_VAR 0 1
19522: PUSH
19523: LD_INT 1
19525: PUSH
19526: LD_INT 2
19528: PUSH
19529: LD_INT 3
19531: PUSH
19532: LD_INT 4
19534: PUSH
19535: LD_INT 5
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: IN
19545: IFFALSE 19557
// uc_nation := nation_american else
19547: LD_ADDR_OWVAR 21
19551: PUSH
19552: LD_INT 1
19554: ST_TO_ADDR
19555: GO 19600
// if chassis in [ 11 , 12 , 13 , 14 ] then
19557: LD_VAR 0 1
19561: PUSH
19562: LD_INT 11
19564: PUSH
19565: LD_INT 12
19567: PUSH
19568: LD_INT 13
19570: PUSH
19571: LD_INT 14
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: IN
19580: IFFALSE 19592
// uc_nation := nation_arabian else
19582: LD_ADDR_OWVAR 21
19586: PUSH
19587: LD_INT 2
19589: ST_TO_ADDR
19590: GO 19600
// uc_nation := nation_russian ;
19592: LD_ADDR_OWVAR 21
19596: PUSH
19597: LD_INT 3
19599: ST_TO_ADDR
// vc_chassis := chassis ;
19600: LD_ADDR_OWVAR 37
19604: PUSH
19605: LD_VAR 0 1
19609: ST_TO_ADDR
// vc_engine := engine ;
19610: LD_ADDR_OWVAR 39
19614: PUSH
19615: LD_VAR 0 2
19619: ST_TO_ADDR
// vc_control := control ;
19620: LD_ADDR_OWVAR 38
19624: PUSH
19625: LD_VAR 0 3
19629: ST_TO_ADDR
// vc_weapon := weapon ;
19630: LD_ADDR_OWVAR 40
19634: PUSH
19635: LD_VAR 0 4
19639: ST_TO_ADDR
// un := CreateVehicle ;
19640: LD_ADDR_VAR 0 8
19644: PUSH
19645: CALL_OW 45
19649: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19650: LD_VAR 0 8
19654: PPUSH
19655: LD_INT 0
19657: PPUSH
19658: LD_INT 5
19660: PPUSH
19661: CALL_OW 12
19665: PPUSH
19666: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19670: LD_VAR 0 8
19674: PPUSH
19675: LD_VAR 0 5
19679: PPUSH
19680: LD_VAR 0 6
19684: PPUSH
19685: LD_INT 1
19687: PPUSH
19688: CALL_OW 48
// end ;
19692: LD_VAR 0 7
19696: RET
// export hInvincible ; every 1 do
19697: GO 19699
19699: DISABLE
// hInvincible := [ ] ;
19700: LD_ADDR_EXP 82
19704: PUSH
19705: EMPTY
19706: ST_TO_ADDR
19707: END
// every 10 do var i ;
19708: GO 19710
19710: DISABLE
19711: LD_INT 0
19713: PPUSH
// begin enable ;
19714: ENABLE
// if not hInvincible then
19715: LD_EXP 82
19719: NOT
19720: IFFALSE 19724
// exit ;
19722: GO 19768
// for i in hInvincible do
19724: LD_ADDR_VAR 0 1
19728: PUSH
19729: LD_EXP 82
19733: PUSH
19734: FOR_IN
19735: IFFALSE 19766
// if GetLives ( i ) < 1000 then
19737: LD_VAR 0 1
19741: PPUSH
19742: CALL_OW 256
19746: PUSH
19747: LD_INT 1000
19749: LESS
19750: IFFALSE 19764
// SetLives ( i , 1000 ) ;
19752: LD_VAR 0 1
19756: PPUSH
19757: LD_INT 1000
19759: PPUSH
19760: CALL_OW 234
19764: GO 19734
19766: POP
19767: POP
// end ;
19768: PPOPN 1
19770: END
// export function hHackInvincible ; var i ; begin
19771: LD_INT 0
19773: PPUSH
19774: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19775: LD_ADDR_VAR 0 2
19779: PUSH
19780: LD_INT 2
19782: PUSH
19783: LD_INT 21
19785: PUSH
19786: LD_INT 1
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: PUSH
19793: LD_INT 21
19795: PUSH
19796: LD_INT 2
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: LIST
19807: PPUSH
19808: CALL_OW 69
19812: PUSH
19813: FOR_IN
19814: IFFALSE 19875
// if IsSelected ( i ) then
19816: LD_VAR 0 2
19820: PPUSH
19821: CALL_OW 306
19825: IFFALSE 19873
// begin if i in hInvincible then
19827: LD_VAR 0 2
19831: PUSH
19832: LD_EXP 82
19836: IN
19837: IFFALSE 19857
// hInvincible := hInvincible diff i else
19839: LD_ADDR_EXP 82
19843: PUSH
19844: LD_EXP 82
19848: PUSH
19849: LD_VAR 0 2
19853: DIFF
19854: ST_TO_ADDR
19855: GO 19873
// hInvincible := hInvincible union i ;
19857: LD_ADDR_EXP 82
19861: PUSH
19862: LD_EXP 82
19866: PUSH
19867: LD_VAR 0 2
19871: UNION
19872: ST_TO_ADDR
// end ;
19873: GO 19813
19875: POP
19876: POP
// end ;
19877: LD_VAR 0 1
19881: RET
// export function hHackInvisible ; var i , j ; begin
19882: LD_INT 0
19884: PPUSH
19885: PPUSH
19886: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19887: LD_ADDR_VAR 0 2
19891: PUSH
19892: LD_INT 21
19894: PUSH
19895: LD_INT 1
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PPUSH
19902: CALL_OW 69
19906: PUSH
19907: FOR_IN
19908: IFFALSE 19932
// if IsSelected ( i ) then
19910: LD_VAR 0 2
19914: PPUSH
19915: CALL_OW 306
19919: IFFALSE 19930
// ComForceInvisible ( i ) ;
19921: LD_VAR 0 2
19925: PPUSH
19926: CALL_OW 496
19930: GO 19907
19932: POP
19933: POP
// end ;
19934: LD_VAR 0 1
19938: RET
// export function hHackChangeYourSide ; begin
19939: LD_INT 0
19941: PPUSH
// if your_side = 8 then
19942: LD_OWVAR 2
19946: PUSH
19947: LD_INT 8
19949: EQUAL
19950: IFFALSE 19962
// your_side := 0 else
19952: LD_ADDR_OWVAR 2
19956: PUSH
19957: LD_INT 0
19959: ST_TO_ADDR
19960: GO 19976
// your_side := your_side + 1 ;
19962: LD_ADDR_OWVAR 2
19966: PUSH
19967: LD_OWVAR 2
19971: PUSH
19972: LD_INT 1
19974: PLUS
19975: ST_TO_ADDR
// end ;
19976: LD_VAR 0 1
19980: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19981: LD_INT 0
19983: PPUSH
19984: PPUSH
19985: PPUSH
// for i in all_units do
19986: LD_ADDR_VAR 0 2
19990: PUSH
19991: LD_OWVAR 3
19995: PUSH
19996: FOR_IN
19997: IFFALSE 20075
// if IsSelected ( i ) then
19999: LD_VAR 0 2
20003: PPUSH
20004: CALL_OW 306
20008: IFFALSE 20073
// begin j := GetSide ( i ) ;
20010: LD_ADDR_VAR 0 3
20014: PUSH
20015: LD_VAR 0 2
20019: PPUSH
20020: CALL_OW 255
20024: ST_TO_ADDR
// if j = 8 then
20025: LD_VAR 0 3
20029: PUSH
20030: LD_INT 8
20032: EQUAL
20033: IFFALSE 20045
// j := 0 else
20035: LD_ADDR_VAR 0 3
20039: PUSH
20040: LD_INT 0
20042: ST_TO_ADDR
20043: GO 20059
// j := j + 1 ;
20045: LD_ADDR_VAR 0 3
20049: PUSH
20050: LD_VAR 0 3
20054: PUSH
20055: LD_INT 1
20057: PLUS
20058: ST_TO_ADDR
// SetSide ( i , j ) ;
20059: LD_VAR 0 2
20063: PPUSH
20064: LD_VAR 0 3
20068: PPUSH
20069: CALL_OW 235
// end ;
20073: GO 19996
20075: POP
20076: POP
// end ;
20077: LD_VAR 0 1
20081: RET
// export function hHackFog ; begin
20082: LD_INT 0
20084: PPUSH
// FogOff ( true ) ;
20085: LD_INT 1
20087: PPUSH
20088: CALL_OW 344
// end ;
20092: LD_VAR 0 1
20096: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20097: LD_INT 0
20099: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20100: LD_VAR 0 1
20104: PPUSH
20105: LD_VAR 0 2
20109: PPUSH
20110: LD_VAR 0 3
20114: PPUSH
20115: LD_INT 1
20117: PPUSH
20118: LD_INT 1
20120: PPUSH
20121: CALL_OW 483
// CenterOnXY ( x , y ) ;
20125: LD_VAR 0 2
20129: PPUSH
20130: LD_VAR 0 3
20134: PPUSH
20135: CALL_OW 84
// end ;
20139: LD_VAR 0 4
20143: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
20144: LD_INT 0
20146: PPUSH
20147: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
20148: LD_VAR 0 1
20152: NOT
20153: PUSH
20154: LD_VAR 0 2
20158: PPUSH
20159: LD_VAR 0 3
20163: PPUSH
20164: CALL_OW 488
20168: NOT
20169: OR
20170: PUSH
20171: LD_VAR 0 1
20175: PPUSH
20176: CALL_OW 266
20180: PUSH
20181: LD_INT 3
20183: NONEQUAL
20184: PUSH
20185: LD_VAR 0 1
20189: PPUSH
20190: CALL_OW 247
20194: PUSH
20195: LD_INT 1
20197: EQUAL
20198: NOT
20199: AND
20200: OR
20201: IFFALSE 20205
// exit ;
20203: GO 20354
// if GetType ( factory ) = unit_human then
20205: LD_VAR 0 1
20209: PPUSH
20210: CALL_OW 247
20214: PUSH
20215: LD_INT 1
20217: EQUAL
20218: IFFALSE 20235
// factory := IsInUnit ( factory ) ;
20220: LD_ADDR_VAR 0 1
20224: PUSH
20225: LD_VAR 0 1
20229: PPUSH
20230: CALL_OW 310
20234: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20235: LD_VAR 0 1
20239: PPUSH
20240: CALL_OW 266
20244: PUSH
20245: LD_INT 3
20247: NONEQUAL
20248: IFFALSE 20252
// exit ;
20250: GO 20354
// if HexInfo ( x , y ) = factory then
20252: LD_VAR 0 2
20256: PPUSH
20257: LD_VAR 0 3
20261: PPUSH
20262: CALL_OW 428
20266: PUSH
20267: LD_VAR 0 1
20271: EQUAL
20272: IFFALSE 20299
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20274: LD_ADDR_EXP 83
20278: PUSH
20279: LD_EXP 83
20283: PPUSH
20284: LD_VAR 0 1
20288: PPUSH
20289: LD_INT 0
20291: PPUSH
20292: CALL_OW 1
20296: ST_TO_ADDR
20297: GO 20350
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
20299: LD_ADDR_EXP 83
20303: PUSH
20304: LD_EXP 83
20308: PPUSH
20309: LD_VAR 0 1
20313: PPUSH
20314: LD_VAR 0 1
20318: PPUSH
20319: CALL_OW 255
20323: PUSH
20324: LD_VAR 0 1
20328: PUSH
20329: LD_VAR 0 2
20333: PUSH
20334: LD_VAR 0 3
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: PPUSH
20345: CALL_OW 1
20349: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20350: CALL 20359 0 0
// end ;
20354: LD_VAR 0 4
20358: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
20359: LD_INT 0
20361: PPUSH
20362: PPUSH
20363: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20364: LD_STRING resetFactoryWaypoint();
20366: PPUSH
20367: CALL_OW 559
// if factoryWaypoints then
20371: LD_EXP 83
20375: IFFALSE 20501
// begin list := PrepareArray ( factoryWaypoints ) ;
20377: LD_ADDR_VAR 0 3
20381: PUSH
20382: LD_EXP 83
20386: PPUSH
20387: CALL 66951 0 1
20391: ST_TO_ADDR
// for i := 1 to list do
20392: LD_ADDR_VAR 0 2
20396: PUSH
20397: DOUBLE
20398: LD_INT 1
20400: DEC
20401: ST_TO_ADDR
20402: LD_VAR 0 3
20406: PUSH
20407: FOR_TO
20408: IFFALSE 20499
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20410: LD_STRING setFactoryWaypointXY(
20412: PUSH
20413: LD_VAR 0 3
20417: PUSH
20418: LD_VAR 0 2
20422: ARRAY
20423: PUSH
20424: LD_INT 1
20426: ARRAY
20427: STR
20428: PUSH
20429: LD_STRING ,
20431: STR
20432: PUSH
20433: LD_VAR 0 3
20437: PUSH
20438: LD_VAR 0 2
20442: ARRAY
20443: PUSH
20444: LD_INT 2
20446: ARRAY
20447: STR
20448: PUSH
20449: LD_STRING ,
20451: STR
20452: PUSH
20453: LD_VAR 0 3
20457: PUSH
20458: LD_VAR 0 2
20462: ARRAY
20463: PUSH
20464: LD_INT 3
20466: ARRAY
20467: STR
20468: PUSH
20469: LD_STRING ,
20471: STR
20472: PUSH
20473: LD_VAR 0 3
20477: PUSH
20478: LD_VAR 0 2
20482: ARRAY
20483: PUSH
20484: LD_INT 4
20486: ARRAY
20487: STR
20488: PUSH
20489: LD_STRING )
20491: STR
20492: PPUSH
20493: CALL_OW 559
20497: GO 20407
20499: POP
20500: POP
// end ; end ;
20501: LD_VAR 0 1
20505: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20506: LD_INT 0
20508: PPUSH
// if HexInfo ( x , y ) = warehouse then
20509: LD_VAR 0 2
20513: PPUSH
20514: LD_VAR 0 3
20518: PPUSH
20519: CALL_OW 428
20523: PUSH
20524: LD_VAR 0 1
20528: EQUAL
20529: IFFALSE 20556
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20531: LD_ADDR_EXP 84
20535: PUSH
20536: LD_EXP 84
20540: PPUSH
20541: LD_VAR 0 1
20545: PPUSH
20546: LD_INT 0
20548: PPUSH
20549: CALL_OW 1
20553: ST_TO_ADDR
20554: GO 20607
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20556: LD_ADDR_EXP 84
20560: PUSH
20561: LD_EXP 84
20565: PPUSH
20566: LD_VAR 0 1
20570: PPUSH
20571: LD_VAR 0 1
20575: PPUSH
20576: CALL_OW 255
20580: PUSH
20581: LD_VAR 0 1
20585: PUSH
20586: LD_VAR 0 2
20590: PUSH
20591: LD_VAR 0 3
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: PPUSH
20602: CALL_OW 1
20606: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20607: CALL 20616 0 0
// end ;
20611: LD_VAR 0 4
20615: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
20616: LD_INT 0
20618: PPUSH
20619: PPUSH
20620: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
20621: LD_STRING resetWarehouseGatheringPoints();
20623: PPUSH
20624: CALL_OW 559
// if warehouseGatheringPoints then
20628: LD_EXP 84
20632: IFFALSE 20758
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
20634: LD_ADDR_VAR 0 3
20638: PUSH
20639: LD_EXP 84
20643: PPUSH
20644: CALL 66951 0 1
20648: ST_TO_ADDR
// for i := 1 to list do
20649: LD_ADDR_VAR 0 2
20653: PUSH
20654: DOUBLE
20655: LD_INT 1
20657: DEC
20658: ST_TO_ADDR
20659: LD_VAR 0 3
20663: PUSH
20664: FOR_TO
20665: IFFALSE 20756
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20667: LD_STRING setWarehouseGatheringPointXY(
20669: PUSH
20670: LD_VAR 0 3
20674: PUSH
20675: LD_VAR 0 2
20679: ARRAY
20680: PUSH
20681: LD_INT 1
20683: ARRAY
20684: STR
20685: PUSH
20686: LD_STRING ,
20688: STR
20689: PUSH
20690: LD_VAR 0 3
20694: PUSH
20695: LD_VAR 0 2
20699: ARRAY
20700: PUSH
20701: LD_INT 2
20703: ARRAY
20704: STR
20705: PUSH
20706: LD_STRING ,
20708: STR
20709: PUSH
20710: LD_VAR 0 3
20714: PUSH
20715: LD_VAR 0 2
20719: ARRAY
20720: PUSH
20721: LD_INT 3
20723: ARRAY
20724: STR
20725: PUSH
20726: LD_STRING ,
20728: STR
20729: PUSH
20730: LD_VAR 0 3
20734: PUSH
20735: LD_VAR 0 2
20739: ARRAY
20740: PUSH
20741: LD_INT 4
20743: ARRAY
20744: STR
20745: PUSH
20746: LD_STRING )
20748: STR
20749: PPUSH
20750: CALL_OW 559
20754: GO 20664
20756: POP
20757: POP
// end ; end ;
20758: LD_VAR 0 1
20762: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20763: LD_EXP 84
20767: IFFALSE 21452
20769: GO 20771
20771: DISABLE
20772: LD_INT 0
20774: PPUSH
20775: PPUSH
20776: PPUSH
20777: PPUSH
20778: PPUSH
20779: PPUSH
20780: PPUSH
20781: PPUSH
20782: PPUSH
// begin enable ;
20783: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
20784: LD_ADDR_VAR 0 3
20788: PUSH
20789: LD_EXP 84
20793: PPUSH
20794: CALL 66951 0 1
20798: ST_TO_ADDR
// if not list then
20799: LD_VAR 0 3
20803: NOT
20804: IFFALSE 20808
// exit ;
20806: GO 21452
// for i := 1 to list do
20808: LD_ADDR_VAR 0 1
20812: PUSH
20813: DOUBLE
20814: LD_INT 1
20816: DEC
20817: ST_TO_ADDR
20818: LD_VAR 0 3
20822: PUSH
20823: FOR_TO
20824: IFFALSE 21450
// begin depot := list [ i ] [ 2 ] ;
20826: LD_ADDR_VAR 0 8
20830: PUSH
20831: LD_VAR 0 3
20835: PUSH
20836: LD_VAR 0 1
20840: ARRAY
20841: PUSH
20842: LD_INT 2
20844: ARRAY
20845: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
20846: LD_ADDR_VAR 0 5
20850: PUSH
20851: LD_VAR 0 3
20855: PUSH
20856: LD_VAR 0 1
20860: ARRAY
20861: PUSH
20862: LD_INT 1
20864: ARRAY
20865: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
20866: LD_VAR 0 8
20870: PPUSH
20871: CALL_OW 301
20875: PUSH
20876: LD_VAR 0 5
20880: PUSH
20881: LD_VAR 0 8
20885: PPUSH
20886: CALL_OW 255
20890: NONEQUAL
20891: OR
20892: IFFALSE 20921
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
20894: LD_ADDR_EXP 84
20898: PUSH
20899: LD_EXP 84
20903: PPUSH
20904: LD_VAR 0 8
20908: PPUSH
20909: LD_INT 0
20911: PPUSH
20912: CALL_OW 1
20916: ST_TO_ADDR
// exit ;
20917: POP
20918: POP
20919: GO 21452
// end ; x := list [ i ] [ 3 ] ;
20921: LD_ADDR_VAR 0 6
20925: PUSH
20926: LD_VAR 0 3
20930: PUSH
20931: LD_VAR 0 1
20935: ARRAY
20936: PUSH
20937: LD_INT 3
20939: ARRAY
20940: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
20941: LD_ADDR_VAR 0 7
20945: PUSH
20946: LD_VAR 0 3
20950: PUSH
20951: LD_VAR 0 1
20955: ARRAY
20956: PUSH
20957: LD_INT 4
20959: ARRAY
20960: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
20961: LD_ADDR_VAR 0 9
20965: PUSH
20966: LD_VAR 0 6
20970: PPUSH
20971: LD_VAR 0 7
20975: PPUSH
20976: LD_INT 16
20978: PPUSH
20979: CALL 65539 0 3
20983: ST_TO_ADDR
// if not cratesNearbyPoint then
20984: LD_VAR 0 9
20988: NOT
20989: IFFALSE 20995
// exit ;
20991: POP
20992: POP
20993: GO 21452
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
20995: LD_ADDR_VAR 0 4
20999: PUSH
21000: LD_INT 22
21002: PUSH
21003: LD_VAR 0 5
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PUSH
21012: LD_INT 3
21014: PUSH
21015: LD_INT 60
21017: PUSH
21018: EMPTY
21019: LIST
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: PUSH
21025: LD_INT 91
21027: PUSH
21028: LD_VAR 0 8
21032: PUSH
21033: LD_INT 6
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 2
21043: PUSH
21044: LD_INT 25
21046: PUSH
21047: LD_INT 2
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: LD_INT 25
21056: PUSH
21057: LD_INT 16
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: LIST
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: PPUSH
21075: CALL_OW 69
21079: PUSH
21080: LD_VAR 0 8
21084: PPUSH
21085: CALL_OW 313
21089: PPUSH
21090: LD_INT 3
21092: PUSH
21093: LD_INT 60
21095: PUSH
21096: EMPTY
21097: LIST
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: LD_INT 2
21105: PUSH
21106: LD_INT 25
21108: PUSH
21109: LD_INT 2
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PUSH
21116: LD_INT 25
21118: PUSH
21119: LD_INT 16
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: LIST
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PPUSH
21135: CALL_OW 72
21139: UNION
21140: ST_TO_ADDR
// if tmp then
21141: LD_VAR 0 4
21145: IFFALSE 21225
// begin tmp := ShrinkArray ( tmp , 3 ) ;
21147: LD_ADDR_VAR 0 4
21151: PUSH
21152: LD_VAR 0 4
21156: PPUSH
21157: LD_INT 3
21159: PPUSH
21160: CALL 63508 0 2
21164: ST_TO_ADDR
// for j in tmp do
21165: LD_ADDR_VAR 0 2
21169: PUSH
21170: LD_VAR 0 4
21174: PUSH
21175: FOR_IN
21176: IFFALSE 21219
// begin if IsInUnit ( j ) then
21178: LD_VAR 0 2
21182: PPUSH
21183: CALL_OW 310
21187: IFFALSE 21198
// ComExit ( j ) ;
21189: LD_VAR 0 2
21193: PPUSH
21194: CALL 63591 0 1
// AddComCollect ( j , x , y ) ;
21198: LD_VAR 0 2
21202: PPUSH
21203: LD_VAR 0 6
21207: PPUSH
21208: LD_VAR 0 7
21212: PPUSH
21213: CALL_OW 177
// end ;
21217: GO 21175
21219: POP
21220: POP
// exit ;
21221: POP
21222: POP
21223: GO 21452
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
21225: LD_ADDR_VAR 0 4
21229: PUSH
21230: LD_INT 22
21232: PUSH
21233: LD_VAR 0 5
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PUSH
21242: LD_INT 91
21244: PUSH
21245: LD_VAR 0 8
21249: PUSH
21250: LD_INT 8
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 2
21260: PUSH
21261: LD_INT 34
21263: PUSH
21264: LD_INT 12
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: LD_INT 34
21273: PUSH
21274: LD_INT 51
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: PUSH
21281: LD_INT 34
21283: PUSH
21284: LD_INT 32
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PUSH
21291: LD_INT 34
21293: PUSH
21294: LD_INT 89
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: LIST
21312: PPUSH
21313: CALL_OW 69
21317: ST_TO_ADDR
// if tmp then
21318: LD_VAR 0 4
21322: IFFALSE 21448
// begin for j in tmp do
21324: LD_ADDR_VAR 0 2
21328: PUSH
21329: LD_VAR 0 4
21333: PUSH
21334: FOR_IN
21335: IFFALSE 21446
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
21337: LD_VAR 0 2
21341: PPUSH
21342: CALL_OW 262
21346: PUSH
21347: LD_INT 3
21349: EQUAL
21350: PUSH
21351: LD_VAR 0 2
21355: PPUSH
21356: CALL_OW 261
21360: PUSH
21361: LD_INT 20
21363: GREATER
21364: OR
21365: PUSH
21366: LD_VAR 0 2
21370: PPUSH
21371: CALL_OW 314
21375: NOT
21376: AND
21377: PUSH
21378: LD_VAR 0 2
21382: PPUSH
21383: CALL_OW 263
21387: PUSH
21388: LD_INT 1
21390: NONEQUAL
21391: PUSH
21392: LD_VAR 0 2
21396: PPUSH
21397: CALL_OW 311
21401: OR
21402: AND
21403: IFFALSE 21444
// begin ComCollect ( j , x , y ) ;
21405: LD_VAR 0 2
21409: PPUSH
21410: LD_VAR 0 6
21414: PPUSH
21415: LD_VAR 0 7
21419: PPUSH
21420: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
21424: LD_VAR 0 2
21428: PPUSH
21429: LD_VAR 0 8
21433: PPUSH
21434: CALL_OW 172
// exit ;
21438: POP
21439: POP
21440: POP
21441: POP
21442: GO 21452
// end ;
21444: GO 21334
21446: POP
21447: POP
// end ; end ;
21448: GO 20823
21450: POP
21451: POP
// end ; end_of_file
21452: PPOPN 9
21454: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21455: LD_INT 0
21457: PPUSH
21458: PPUSH
21459: PPUSH
21460: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21461: LD_VAR 0 1
21465: PPUSH
21466: CALL_OW 264
21470: PUSH
21471: LD_INT 91
21473: EQUAL
21474: IFFALSE 21546
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21476: LD_INT 68
21478: PPUSH
21479: LD_VAR 0 1
21483: PPUSH
21484: CALL_OW 255
21488: PPUSH
21489: CALL_OW 321
21493: PUSH
21494: LD_INT 2
21496: EQUAL
21497: IFFALSE 21509
// eff := 70 else
21499: LD_ADDR_VAR 0 4
21503: PUSH
21504: LD_INT 70
21506: ST_TO_ADDR
21507: GO 21517
// eff := 30 ;
21509: LD_ADDR_VAR 0 4
21513: PUSH
21514: LD_INT 30
21516: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21517: LD_VAR 0 1
21521: PPUSH
21522: CALL_OW 250
21526: PPUSH
21527: LD_VAR 0 1
21531: PPUSH
21532: CALL_OW 251
21536: PPUSH
21537: LD_VAR 0 4
21541: PPUSH
21542: CALL_OW 495
// end ; end ;
21546: LD_VAR 0 2
21550: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21551: LD_INT 0
21553: PPUSH
// end ;
21554: LD_VAR 0 4
21558: RET
// export function SOS_Command ( cmd ) ; begin
21559: LD_INT 0
21561: PPUSH
// end ;
21562: LD_VAR 0 2
21566: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21567: LD_INT 0
21569: PPUSH
// end ;
21570: LD_VAR 0 6
21574: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
21575: LD_INT 0
21577: PPUSH
21578: PPUSH
// if not vehicle or not factory then
21579: LD_VAR 0 1
21583: NOT
21584: PUSH
21585: LD_VAR 0 2
21589: NOT
21590: OR
21591: IFFALSE 21595
// exit ;
21593: GO 21826
// if factoryWaypoints >= factory then
21595: LD_EXP 83
21599: PUSH
21600: LD_VAR 0 2
21604: GREATEREQUAL
21605: IFFALSE 21826
// if factoryWaypoints [ factory ] then
21607: LD_EXP 83
21611: PUSH
21612: LD_VAR 0 2
21616: ARRAY
21617: IFFALSE 21826
// begin if GetControl ( vehicle ) = control_manual then
21619: LD_VAR 0 1
21623: PPUSH
21624: CALL_OW 263
21628: PUSH
21629: LD_INT 1
21631: EQUAL
21632: IFFALSE 21713
// begin driver := IsDrivenBy ( vehicle ) ;
21634: LD_ADDR_VAR 0 4
21638: PUSH
21639: LD_VAR 0 1
21643: PPUSH
21644: CALL_OW 311
21648: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21649: LD_VAR 0 4
21653: PPUSH
21654: LD_EXP 83
21658: PUSH
21659: LD_VAR 0 2
21663: ARRAY
21664: PUSH
21665: LD_INT 3
21667: ARRAY
21668: PPUSH
21669: LD_EXP 83
21673: PUSH
21674: LD_VAR 0 2
21678: ARRAY
21679: PUSH
21680: LD_INT 4
21682: ARRAY
21683: PPUSH
21684: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21688: LD_VAR 0 4
21692: PPUSH
21693: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21697: LD_VAR 0 4
21701: PPUSH
21702: LD_VAR 0 2
21706: PPUSH
21707: CALL_OW 180
// end else
21711: GO 21826
// if GetControl ( vehicle ) = control_remote then
21713: LD_VAR 0 1
21717: PPUSH
21718: CALL_OW 263
21722: PUSH
21723: LD_INT 2
21725: EQUAL
21726: IFFALSE 21787
// begin wait ( 0 0$2 ) ;
21728: LD_INT 70
21730: PPUSH
21731: CALL_OW 67
// if Connect ( vehicle ) then
21735: LD_VAR 0 1
21739: PPUSH
21740: CALL 33850 0 1
21744: IFFALSE 21785
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21746: LD_VAR 0 1
21750: PPUSH
21751: LD_EXP 83
21755: PUSH
21756: LD_VAR 0 2
21760: ARRAY
21761: PUSH
21762: LD_INT 3
21764: ARRAY
21765: PPUSH
21766: LD_EXP 83
21770: PUSH
21771: LD_VAR 0 2
21775: ARRAY
21776: PUSH
21777: LD_INT 4
21779: ARRAY
21780: PPUSH
21781: CALL_OW 171
// end else
21785: GO 21826
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21787: LD_VAR 0 1
21791: PPUSH
21792: LD_EXP 83
21796: PUSH
21797: LD_VAR 0 2
21801: ARRAY
21802: PUSH
21803: LD_INT 3
21805: ARRAY
21806: PPUSH
21807: LD_EXP 83
21811: PUSH
21812: LD_VAR 0 2
21816: ARRAY
21817: PUSH
21818: LD_INT 4
21820: ARRAY
21821: PPUSH
21822: CALL_OW 171
// end ; end ;
21826: LD_VAR 0 3
21830: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21831: LD_INT 0
21833: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21834: LD_VAR 0 1
21838: PUSH
21839: LD_INT 250
21841: EQUAL
21842: PUSH
21843: LD_VAR 0 2
21847: PPUSH
21848: CALL_OW 264
21852: PUSH
21853: LD_INT 81
21855: EQUAL
21856: AND
21857: IFFALSE 21878
// MinerPlaceMine ( unit , x , y ) ;
21859: LD_VAR 0 2
21863: PPUSH
21864: LD_VAR 0 4
21868: PPUSH
21869: LD_VAR 0 5
21873: PPUSH
21874: CALL 24263 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21878: LD_VAR 0 1
21882: PUSH
21883: LD_INT 251
21885: EQUAL
21886: PUSH
21887: LD_VAR 0 2
21891: PPUSH
21892: CALL_OW 264
21896: PUSH
21897: LD_INT 81
21899: EQUAL
21900: AND
21901: IFFALSE 21922
// MinerDetonateMine ( unit , x , y ) ;
21903: LD_VAR 0 2
21907: PPUSH
21908: LD_VAR 0 4
21912: PPUSH
21913: LD_VAR 0 5
21917: PPUSH
21918: CALL 24538 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21922: LD_VAR 0 1
21926: PUSH
21927: LD_INT 252
21929: EQUAL
21930: PUSH
21931: LD_VAR 0 2
21935: PPUSH
21936: CALL_OW 264
21940: PUSH
21941: LD_INT 81
21943: EQUAL
21944: AND
21945: IFFALSE 21966
// MinerCreateMinefield ( unit , x , y ) ;
21947: LD_VAR 0 2
21951: PPUSH
21952: LD_VAR 0 4
21956: PPUSH
21957: LD_VAR 0 5
21961: PPUSH
21962: CALL 24955 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21966: LD_VAR 0 1
21970: PUSH
21971: LD_INT 253
21973: EQUAL
21974: PUSH
21975: LD_VAR 0 2
21979: PPUSH
21980: CALL_OW 257
21984: PUSH
21985: LD_INT 5
21987: EQUAL
21988: AND
21989: IFFALSE 22010
// ComBinocular ( unit , x , y ) ;
21991: LD_VAR 0 2
21995: PPUSH
21996: LD_VAR 0 4
22000: PPUSH
22001: LD_VAR 0 5
22005: PPUSH
22006: CALL 25324 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22010: LD_VAR 0 1
22014: PUSH
22015: LD_INT 254
22017: EQUAL
22018: PUSH
22019: LD_VAR 0 2
22023: PPUSH
22024: CALL_OW 264
22028: PUSH
22029: LD_INT 99
22031: EQUAL
22032: AND
22033: PUSH
22034: LD_VAR 0 3
22038: PPUSH
22039: CALL_OW 263
22043: PUSH
22044: LD_INT 3
22046: EQUAL
22047: AND
22048: IFFALSE 22064
// HackDestroyVehicle ( unit , selectedUnit ) ;
22050: LD_VAR 0 2
22054: PPUSH
22055: LD_VAR 0 3
22059: PPUSH
22060: CALL 23627 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22064: LD_VAR 0 1
22068: PUSH
22069: LD_INT 255
22071: EQUAL
22072: PUSH
22073: LD_VAR 0 2
22077: PPUSH
22078: CALL_OW 264
22082: PUSH
22083: LD_INT 14
22085: PUSH
22086: LD_INT 53
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: IN
22093: AND
22094: PUSH
22095: LD_VAR 0 4
22099: PPUSH
22100: LD_VAR 0 5
22104: PPUSH
22105: CALL_OW 488
22109: AND
22110: IFFALSE 22134
// CutTreeXYR ( unit , x , y , 12 ) ;
22112: LD_VAR 0 2
22116: PPUSH
22117: LD_VAR 0 4
22121: PPUSH
22122: LD_VAR 0 5
22126: PPUSH
22127: LD_INT 12
22129: PPUSH
22130: CALL 22197 0 4
// if cmd = 256 then
22134: LD_VAR 0 1
22138: PUSH
22139: LD_INT 256
22141: EQUAL
22142: IFFALSE 22163
// SetFactoryWaypoint ( unit , x , y ) ;
22144: LD_VAR 0 2
22148: PPUSH
22149: LD_VAR 0 4
22153: PPUSH
22154: LD_VAR 0 5
22158: PPUSH
22159: CALL 20144 0 3
// if cmd = 257 then
22163: LD_VAR 0 1
22167: PUSH
22168: LD_INT 257
22170: EQUAL
22171: IFFALSE 22192
// SetWarehouseGatheringPoint ( unit , x , y ) ;
22173: LD_VAR 0 2
22177: PPUSH
22178: LD_VAR 0 4
22182: PPUSH
22183: LD_VAR 0 5
22187: PPUSH
22188: CALL 20506 0 3
// end ;
22192: LD_VAR 0 6
22196: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22197: LD_INT 0
22199: PPUSH
22200: PPUSH
22201: PPUSH
22202: PPUSH
22203: PPUSH
22204: PPUSH
22205: PPUSH
22206: PPUSH
22207: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22208: LD_VAR 0 1
22212: NOT
22213: PUSH
22214: LD_VAR 0 2
22218: PPUSH
22219: LD_VAR 0 3
22223: PPUSH
22224: CALL_OW 488
22228: NOT
22229: OR
22230: PUSH
22231: LD_VAR 0 4
22235: NOT
22236: OR
22237: IFFALSE 22241
// exit ;
22239: GO 22581
// list := [ ] ;
22241: LD_ADDR_VAR 0 13
22245: PUSH
22246: EMPTY
22247: ST_TO_ADDR
// if x - r < 0 then
22248: LD_VAR 0 2
22252: PUSH
22253: LD_VAR 0 4
22257: MINUS
22258: PUSH
22259: LD_INT 0
22261: LESS
22262: IFFALSE 22274
// min_x := 0 else
22264: LD_ADDR_VAR 0 7
22268: PUSH
22269: LD_INT 0
22271: ST_TO_ADDR
22272: GO 22290
// min_x := x - r ;
22274: LD_ADDR_VAR 0 7
22278: PUSH
22279: LD_VAR 0 2
22283: PUSH
22284: LD_VAR 0 4
22288: MINUS
22289: ST_TO_ADDR
// if y - r < 0 then
22290: LD_VAR 0 3
22294: PUSH
22295: LD_VAR 0 4
22299: MINUS
22300: PUSH
22301: LD_INT 0
22303: LESS
22304: IFFALSE 22316
// min_y := 0 else
22306: LD_ADDR_VAR 0 8
22310: PUSH
22311: LD_INT 0
22313: ST_TO_ADDR
22314: GO 22332
// min_y := y - r ;
22316: LD_ADDR_VAR 0 8
22320: PUSH
22321: LD_VAR 0 3
22325: PUSH
22326: LD_VAR 0 4
22330: MINUS
22331: ST_TO_ADDR
// max_x := x + r ;
22332: LD_ADDR_VAR 0 9
22336: PUSH
22337: LD_VAR 0 2
22341: PUSH
22342: LD_VAR 0 4
22346: PLUS
22347: ST_TO_ADDR
// max_y := y + r ;
22348: LD_ADDR_VAR 0 10
22352: PUSH
22353: LD_VAR 0 3
22357: PUSH
22358: LD_VAR 0 4
22362: PLUS
22363: ST_TO_ADDR
// for _x = min_x to max_x do
22364: LD_ADDR_VAR 0 11
22368: PUSH
22369: DOUBLE
22370: LD_VAR 0 7
22374: DEC
22375: ST_TO_ADDR
22376: LD_VAR 0 9
22380: PUSH
22381: FOR_TO
22382: IFFALSE 22499
// for _y = min_y to max_y do
22384: LD_ADDR_VAR 0 12
22388: PUSH
22389: DOUBLE
22390: LD_VAR 0 8
22394: DEC
22395: ST_TO_ADDR
22396: LD_VAR 0 10
22400: PUSH
22401: FOR_TO
22402: IFFALSE 22495
// begin if not ValidHex ( _x , _y ) then
22404: LD_VAR 0 11
22408: PPUSH
22409: LD_VAR 0 12
22413: PPUSH
22414: CALL_OW 488
22418: NOT
22419: IFFALSE 22423
// continue ;
22421: GO 22401
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22423: LD_VAR 0 11
22427: PPUSH
22428: LD_VAR 0 12
22432: PPUSH
22433: CALL_OW 351
22437: PUSH
22438: LD_VAR 0 11
22442: PPUSH
22443: LD_VAR 0 12
22447: PPUSH
22448: CALL_OW 554
22452: AND
22453: IFFALSE 22493
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22455: LD_ADDR_VAR 0 13
22459: PUSH
22460: LD_VAR 0 13
22464: PPUSH
22465: LD_VAR 0 13
22469: PUSH
22470: LD_INT 1
22472: PLUS
22473: PPUSH
22474: LD_VAR 0 11
22478: PUSH
22479: LD_VAR 0 12
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: PPUSH
22488: CALL_OW 2
22492: ST_TO_ADDR
// end ;
22493: GO 22401
22495: POP
22496: POP
22497: GO 22381
22499: POP
22500: POP
// if not list then
22501: LD_VAR 0 13
22505: NOT
22506: IFFALSE 22510
// exit ;
22508: GO 22581
// for i in list do
22510: LD_ADDR_VAR 0 6
22514: PUSH
22515: LD_VAR 0 13
22519: PUSH
22520: FOR_IN
22521: IFFALSE 22579
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22523: LD_VAR 0 1
22527: PPUSH
22528: LD_STRING M
22530: PUSH
22531: LD_VAR 0 6
22535: PUSH
22536: LD_INT 1
22538: ARRAY
22539: PUSH
22540: LD_VAR 0 6
22544: PUSH
22545: LD_INT 2
22547: ARRAY
22548: PUSH
22549: LD_INT 0
22551: PUSH
22552: LD_INT 0
22554: PUSH
22555: LD_INT 0
22557: PUSH
22558: LD_INT 0
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: PUSH
22570: EMPTY
22571: LIST
22572: PPUSH
22573: CALL_OW 447
22577: GO 22520
22579: POP
22580: POP
// end ;
22581: LD_VAR 0 5
22585: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22586: LD_EXP 86
22590: NOT
22591: IFFALSE 22641
22593: GO 22595
22595: DISABLE
// begin initHack := true ;
22596: LD_ADDR_EXP 86
22600: PUSH
22601: LD_INT 1
22603: ST_TO_ADDR
// hackTanks := [ ] ;
22604: LD_ADDR_EXP 87
22608: PUSH
22609: EMPTY
22610: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22611: LD_ADDR_EXP 88
22615: PUSH
22616: EMPTY
22617: ST_TO_ADDR
// hackLimit := 3 ;
22618: LD_ADDR_EXP 89
22622: PUSH
22623: LD_INT 3
22625: ST_TO_ADDR
// hackDist := 12 ;
22626: LD_ADDR_EXP 90
22630: PUSH
22631: LD_INT 12
22633: ST_TO_ADDR
// hackCounter := [ ] ;
22634: LD_ADDR_EXP 91
22638: PUSH
22639: EMPTY
22640: ST_TO_ADDR
// end ;
22641: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22642: LD_EXP 86
22646: PUSH
22647: LD_INT 34
22649: PUSH
22650: LD_INT 99
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PPUSH
22657: CALL_OW 69
22661: AND
22662: IFFALSE 22915
22664: GO 22666
22666: DISABLE
22667: LD_INT 0
22669: PPUSH
22670: PPUSH
// begin enable ;
22671: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22672: LD_ADDR_VAR 0 1
22676: PUSH
22677: LD_INT 34
22679: PUSH
22680: LD_INT 99
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PPUSH
22687: CALL_OW 69
22691: PUSH
22692: FOR_IN
22693: IFFALSE 22913
// begin if not i in hackTanks then
22695: LD_VAR 0 1
22699: PUSH
22700: LD_EXP 87
22704: IN
22705: NOT
22706: IFFALSE 22789
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22708: LD_ADDR_EXP 87
22712: PUSH
22713: LD_EXP 87
22717: PPUSH
22718: LD_EXP 87
22722: PUSH
22723: LD_INT 1
22725: PLUS
22726: PPUSH
22727: LD_VAR 0 1
22731: PPUSH
22732: CALL_OW 1
22736: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22737: LD_ADDR_EXP 88
22741: PUSH
22742: LD_EXP 88
22746: PPUSH
22747: LD_EXP 88
22751: PUSH
22752: LD_INT 1
22754: PLUS
22755: PPUSH
22756: EMPTY
22757: PPUSH
22758: CALL_OW 1
22762: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22763: LD_ADDR_EXP 91
22767: PUSH
22768: LD_EXP 91
22772: PPUSH
22773: LD_EXP 91
22777: PUSH
22778: LD_INT 1
22780: PLUS
22781: PPUSH
22782: EMPTY
22783: PPUSH
22784: CALL_OW 1
22788: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22789: LD_VAR 0 1
22793: PPUSH
22794: CALL_OW 302
22798: NOT
22799: IFFALSE 22812
// begin HackUnlinkAll ( i ) ;
22801: LD_VAR 0 1
22805: PPUSH
22806: CALL 22918 0 1
// continue ;
22810: GO 22692
// end ; HackCheckCapturedStatus ( i ) ;
22812: LD_VAR 0 1
22816: PPUSH
22817: CALL 23361 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22821: LD_ADDR_VAR 0 2
22825: PUSH
22826: LD_INT 81
22828: PUSH
22829: LD_VAR 0 1
22833: PPUSH
22834: CALL_OW 255
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: LD_INT 33
22845: PUSH
22846: LD_INT 3
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PUSH
22853: LD_INT 91
22855: PUSH
22856: LD_VAR 0 1
22860: PUSH
22861: LD_EXP 90
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: LIST
22870: PUSH
22871: LD_INT 50
22873: PUSH
22874: EMPTY
22875: LIST
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: PPUSH
22883: CALL_OW 69
22887: ST_TO_ADDR
// if not tmp then
22888: LD_VAR 0 2
22892: NOT
22893: IFFALSE 22897
// continue ;
22895: GO 22692
// HackLink ( i , tmp ) ;
22897: LD_VAR 0 1
22901: PPUSH
22902: LD_VAR 0 2
22906: PPUSH
22907: CALL 23054 0 2
// end ;
22911: GO 22692
22913: POP
22914: POP
// end ;
22915: PPOPN 2
22917: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22918: LD_INT 0
22920: PPUSH
22921: PPUSH
22922: PPUSH
// if not hack in hackTanks then
22923: LD_VAR 0 1
22927: PUSH
22928: LD_EXP 87
22932: IN
22933: NOT
22934: IFFALSE 22938
// exit ;
22936: GO 23049
// index := GetElementIndex ( hackTanks , hack ) ;
22938: LD_ADDR_VAR 0 4
22942: PUSH
22943: LD_EXP 87
22947: PPUSH
22948: LD_VAR 0 1
22952: PPUSH
22953: CALL 30666 0 2
22957: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22958: LD_EXP 88
22962: PUSH
22963: LD_VAR 0 4
22967: ARRAY
22968: IFFALSE 23049
// begin for i in hackTanksCaptured [ index ] do
22970: LD_ADDR_VAR 0 3
22974: PUSH
22975: LD_EXP 88
22979: PUSH
22980: LD_VAR 0 4
22984: ARRAY
22985: PUSH
22986: FOR_IN
22987: IFFALSE 23013
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22989: LD_VAR 0 3
22993: PUSH
22994: LD_INT 1
22996: ARRAY
22997: PPUSH
22998: LD_VAR 0 3
23002: PUSH
23003: LD_INT 2
23005: ARRAY
23006: PPUSH
23007: CALL_OW 235
23011: GO 22986
23013: POP
23014: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23015: LD_ADDR_EXP 88
23019: PUSH
23020: LD_EXP 88
23024: PPUSH
23025: LD_VAR 0 4
23029: PPUSH
23030: EMPTY
23031: PPUSH
23032: CALL_OW 1
23036: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23037: LD_VAR 0 1
23041: PPUSH
23042: LD_INT 0
23044: PPUSH
23045: CALL_OW 505
// end ; end ;
23049: LD_VAR 0 2
23053: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23054: LD_INT 0
23056: PPUSH
23057: PPUSH
23058: PPUSH
// if not hack in hackTanks or not vehicles then
23059: LD_VAR 0 1
23063: PUSH
23064: LD_EXP 87
23068: IN
23069: NOT
23070: PUSH
23071: LD_VAR 0 2
23075: NOT
23076: OR
23077: IFFALSE 23081
// exit ;
23079: GO 23356
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23081: LD_ADDR_VAR 0 2
23085: PUSH
23086: LD_VAR 0 1
23090: PPUSH
23091: LD_VAR 0 2
23095: PPUSH
23096: LD_INT 1
23098: PPUSH
23099: LD_INT 1
23101: PPUSH
23102: CALL 31316 0 4
23106: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23107: LD_ADDR_VAR 0 5
23111: PUSH
23112: LD_EXP 87
23116: PPUSH
23117: LD_VAR 0 1
23121: PPUSH
23122: CALL 30666 0 2
23126: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23127: LD_EXP 88
23131: PUSH
23132: LD_VAR 0 5
23136: ARRAY
23137: PUSH
23138: LD_EXP 89
23142: LESS
23143: IFFALSE 23332
// begin for i := 1 to vehicles do
23145: LD_ADDR_VAR 0 4
23149: PUSH
23150: DOUBLE
23151: LD_INT 1
23153: DEC
23154: ST_TO_ADDR
23155: LD_VAR 0 2
23159: PUSH
23160: FOR_TO
23161: IFFALSE 23330
// begin if hackTanksCaptured [ index ] = hackLimit then
23163: LD_EXP 88
23167: PUSH
23168: LD_VAR 0 5
23172: ARRAY
23173: PUSH
23174: LD_EXP 89
23178: EQUAL
23179: IFFALSE 23183
// break ;
23181: GO 23330
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23183: LD_ADDR_EXP 91
23187: PUSH
23188: LD_EXP 91
23192: PPUSH
23193: LD_VAR 0 5
23197: PPUSH
23198: LD_EXP 91
23202: PUSH
23203: LD_VAR 0 5
23207: ARRAY
23208: PUSH
23209: LD_INT 1
23211: PLUS
23212: PPUSH
23213: CALL_OW 1
23217: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23218: LD_ADDR_EXP 88
23222: PUSH
23223: LD_EXP 88
23227: PPUSH
23228: LD_VAR 0 5
23232: PUSH
23233: LD_EXP 88
23237: PUSH
23238: LD_VAR 0 5
23242: ARRAY
23243: PUSH
23244: LD_INT 1
23246: PLUS
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: PPUSH
23252: LD_VAR 0 2
23256: PUSH
23257: LD_VAR 0 4
23261: ARRAY
23262: PUSH
23263: LD_VAR 0 2
23267: PUSH
23268: LD_VAR 0 4
23272: ARRAY
23273: PPUSH
23274: CALL_OW 255
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PPUSH
23283: CALL 30881 0 3
23287: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23288: LD_VAR 0 2
23292: PUSH
23293: LD_VAR 0 4
23297: ARRAY
23298: PPUSH
23299: LD_VAR 0 1
23303: PPUSH
23304: CALL_OW 255
23308: PPUSH
23309: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23313: LD_VAR 0 2
23317: PUSH
23318: LD_VAR 0 4
23322: ARRAY
23323: PPUSH
23324: CALL_OW 141
// end ;
23328: GO 23160
23330: POP
23331: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23332: LD_VAR 0 1
23336: PPUSH
23337: LD_EXP 88
23341: PUSH
23342: LD_VAR 0 5
23346: ARRAY
23347: PUSH
23348: LD_INT 0
23350: PLUS
23351: PPUSH
23352: CALL_OW 505
// end ;
23356: LD_VAR 0 3
23360: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23361: LD_INT 0
23363: PPUSH
23364: PPUSH
23365: PPUSH
23366: PPUSH
// if not hack in hackTanks then
23367: LD_VAR 0 1
23371: PUSH
23372: LD_EXP 87
23376: IN
23377: NOT
23378: IFFALSE 23382
// exit ;
23380: GO 23622
// index := GetElementIndex ( hackTanks , hack ) ;
23382: LD_ADDR_VAR 0 4
23386: PUSH
23387: LD_EXP 87
23391: PPUSH
23392: LD_VAR 0 1
23396: PPUSH
23397: CALL 30666 0 2
23401: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23402: LD_ADDR_VAR 0 3
23406: PUSH
23407: DOUBLE
23408: LD_EXP 88
23412: PUSH
23413: LD_VAR 0 4
23417: ARRAY
23418: INC
23419: ST_TO_ADDR
23420: LD_INT 1
23422: PUSH
23423: FOR_DOWNTO
23424: IFFALSE 23596
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23426: LD_ADDR_VAR 0 5
23430: PUSH
23431: LD_EXP 88
23435: PUSH
23436: LD_VAR 0 4
23440: ARRAY
23441: PUSH
23442: LD_VAR 0 3
23446: ARRAY
23447: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23448: LD_VAR 0 5
23452: PUSH
23453: LD_INT 1
23455: ARRAY
23456: PPUSH
23457: CALL_OW 302
23461: NOT
23462: PUSH
23463: LD_VAR 0 5
23467: PUSH
23468: LD_INT 1
23470: ARRAY
23471: PPUSH
23472: CALL_OW 255
23476: PUSH
23477: LD_VAR 0 1
23481: PPUSH
23482: CALL_OW 255
23486: NONEQUAL
23487: OR
23488: IFFALSE 23594
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23490: LD_VAR 0 5
23494: PUSH
23495: LD_INT 1
23497: ARRAY
23498: PPUSH
23499: CALL_OW 305
23503: PUSH
23504: LD_VAR 0 5
23508: PUSH
23509: LD_INT 1
23511: ARRAY
23512: PPUSH
23513: CALL_OW 255
23517: PUSH
23518: LD_VAR 0 1
23522: PPUSH
23523: CALL_OW 255
23527: EQUAL
23528: AND
23529: IFFALSE 23553
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23531: LD_VAR 0 5
23535: PUSH
23536: LD_INT 1
23538: ARRAY
23539: PPUSH
23540: LD_VAR 0 5
23544: PUSH
23545: LD_INT 2
23547: ARRAY
23548: PPUSH
23549: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23553: LD_ADDR_EXP 88
23557: PUSH
23558: LD_EXP 88
23562: PPUSH
23563: LD_VAR 0 4
23567: PPUSH
23568: LD_EXP 88
23572: PUSH
23573: LD_VAR 0 4
23577: ARRAY
23578: PPUSH
23579: LD_VAR 0 3
23583: PPUSH
23584: CALL_OW 3
23588: PPUSH
23589: CALL_OW 1
23593: ST_TO_ADDR
// end ; end ;
23594: GO 23423
23596: POP
23597: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23598: LD_VAR 0 1
23602: PPUSH
23603: LD_EXP 88
23607: PUSH
23608: LD_VAR 0 4
23612: ARRAY
23613: PUSH
23614: LD_INT 0
23616: PLUS
23617: PPUSH
23618: CALL_OW 505
// end ;
23622: LD_VAR 0 2
23626: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23627: LD_INT 0
23629: PPUSH
23630: PPUSH
23631: PPUSH
23632: PPUSH
// if not hack in hackTanks then
23633: LD_VAR 0 1
23637: PUSH
23638: LD_EXP 87
23642: IN
23643: NOT
23644: IFFALSE 23648
// exit ;
23646: GO 23733
// index := GetElementIndex ( hackTanks , hack ) ;
23648: LD_ADDR_VAR 0 5
23652: PUSH
23653: LD_EXP 87
23657: PPUSH
23658: LD_VAR 0 1
23662: PPUSH
23663: CALL 30666 0 2
23667: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23668: LD_ADDR_VAR 0 4
23672: PUSH
23673: DOUBLE
23674: LD_INT 1
23676: DEC
23677: ST_TO_ADDR
23678: LD_EXP 88
23682: PUSH
23683: LD_VAR 0 5
23687: ARRAY
23688: PUSH
23689: FOR_TO
23690: IFFALSE 23731
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23692: LD_EXP 88
23696: PUSH
23697: LD_VAR 0 5
23701: ARRAY
23702: PUSH
23703: LD_VAR 0 4
23707: ARRAY
23708: PUSH
23709: LD_INT 1
23711: ARRAY
23712: PUSH
23713: LD_VAR 0 2
23717: EQUAL
23718: IFFALSE 23729
// KillUnit ( vehicle ) ;
23720: LD_VAR 0 2
23724: PPUSH
23725: CALL_OW 66
23729: GO 23689
23731: POP
23732: POP
// end ;
23733: LD_VAR 0 3
23737: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23738: LD_EXP 92
23742: NOT
23743: IFFALSE 23778
23745: GO 23747
23747: DISABLE
// begin initMiner := true ;
23748: LD_ADDR_EXP 92
23752: PUSH
23753: LD_INT 1
23755: ST_TO_ADDR
// minersList := [ ] ;
23756: LD_ADDR_EXP 93
23760: PUSH
23761: EMPTY
23762: ST_TO_ADDR
// minerMinesList := [ ] ;
23763: LD_ADDR_EXP 94
23767: PUSH
23768: EMPTY
23769: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23770: LD_ADDR_EXP 95
23774: PUSH
23775: LD_INT 5
23777: ST_TO_ADDR
// end ;
23778: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23779: LD_EXP 92
23783: PUSH
23784: LD_INT 34
23786: PUSH
23787: LD_INT 81
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PPUSH
23794: CALL_OW 69
23798: AND
23799: IFFALSE 24260
23801: GO 23803
23803: DISABLE
23804: LD_INT 0
23806: PPUSH
23807: PPUSH
23808: PPUSH
23809: PPUSH
// begin enable ;
23810: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23811: LD_ADDR_VAR 0 1
23815: PUSH
23816: LD_INT 34
23818: PUSH
23819: LD_INT 81
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PPUSH
23826: CALL_OW 69
23830: PUSH
23831: FOR_IN
23832: IFFALSE 23904
// begin if not i in minersList then
23834: LD_VAR 0 1
23838: PUSH
23839: LD_EXP 93
23843: IN
23844: NOT
23845: IFFALSE 23902
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23847: LD_ADDR_EXP 93
23851: PUSH
23852: LD_EXP 93
23856: PPUSH
23857: LD_EXP 93
23861: PUSH
23862: LD_INT 1
23864: PLUS
23865: PPUSH
23866: LD_VAR 0 1
23870: PPUSH
23871: CALL_OW 1
23875: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23876: LD_ADDR_EXP 94
23880: PUSH
23881: LD_EXP 94
23885: PPUSH
23886: LD_EXP 94
23890: PUSH
23891: LD_INT 1
23893: PLUS
23894: PPUSH
23895: EMPTY
23896: PPUSH
23897: CALL_OW 1
23901: ST_TO_ADDR
// end end ;
23902: GO 23831
23904: POP
23905: POP
// for i := minerMinesList downto 1 do
23906: LD_ADDR_VAR 0 1
23910: PUSH
23911: DOUBLE
23912: LD_EXP 94
23916: INC
23917: ST_TO_ADDR
23918: LD_INT 1
23920: PUSH
23921: FOR_DOWNTO
23922: IFFALSE 24258
// begin if IsLive ( minersList [ i ] ) then
23924: LD_EXP 93
23928: PUSH
23929: LD_VAR 0 1
23933: ARRAY
23934: PPUSH
23935: CALL_OW 300
23939: IFFALSE 23967
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23941: LD_EXP 93
23945: PUSH
23946: LD_VAR 0 1
23950: ARRAY
23951: PPUSH
23952: LD_EXP 94
23956: PUSH
23957: LD_VAR 0 1
23961: ARRAY
23962: PPUSH
23963: CALL_OW 505
// if not minerMinesList [ i ] then
23967: LD_EXP 94
23971: PUSH
23972: LD_VAR 0 1
23976: ARRAY
23977: NOT
23978: IFFALSE 23982
// continue ;
23980: GO 23921
// for j := minerMinesList [ i ] downto 1 do
23982: LD_ADDR_VAR 0 2
23986: PUSH
23987: DOUBLE
23988: LD_EXP 94
23992: PUSH
23993: LD_VAR 0 1
23997: ARRAY
23998: INC
23999: ST_TO_ADDR
24000: LD_INT 1
24002: PUSH
24003: FOR_DOWNTO
24004: IFFALSE 24254
// begin side := GetSide ( minersList [ i ] ) ;
24006: LD_ADDR_VAR 0 3
24010: PUSH
24011: LD_EXP 93
24015: PUSH
24016: LD_VAR 0 1
24020: ARRAY
24021: PPUSH
24022: CALL_OW 255
24026: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24027: LD_ADDR_VAR 0 4
24031: PUSH
24032: LD_EXP 94
24036: PUSH
24037: LD_VAR 0 1
24041: ARRAY
24042: PUSH
24043: LD_VAR 0 2
24047: ARRAY
24048: PUSH
24049: LD_INT 1
24051: ARRAY
24052: PPUSH
24053: LD_EXP 94
24057: PUSH
24058: LD_VAR 0 1
24062: ARRAY
24063: PUSH
24064: LD_VAR 0 2
24068: ARRAY
24069: PUSH
24070: LD_INT 2
24072: ARRAY
24073: PPUSH
24074: CALL_OW 428
24078: ST_TO_ADDR
// if not tmp then
24079: LD_VAR 0 4
24083: NOT
24084: IFFALSE 24088
// continue ;
24086: GO 24003
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24088: LD_VAR 0 4
24092: PUSH
24093: LD_INT 81
24095: PUSH
24096: LD_VAR 0 3
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PPUSH
24105: CALL_OW 69
24109: IN
24110: PUSH
24111: LD_EXP 94
24115: PUSH
24116: LD_VAR 0 1
24120: ARRAY
24121: PUSH
24122: LD_VAR 0 2
24126: ARRAY
24127: PUSH
24128: LD_INT 1
24130: ARRAY
24131: PPUSH
24132: LD_EXP 94
24136: PUSH
24137: LD_VAR 0 1
24141: ARRAY
24142: PUSH
24143: LD_VAR 0 2
24147: ARRAY
24148: PUSH
24149: LD_INT 2
24151: ARRAY
24152: PPUSH
24153: CALL_OW 458
24157: AND
24158: IFFALSE 24252
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24160: LD_EXP 94
24164: PUSH
24165: LD_VAR 0 1
24169: ARRAY
24170: PUSH
24171: LD_VAR 0 2
24175: ARRAY
24176: PUSH
24177: LD_INT 1
24179: ARRAY
24180: PPUSH
24181: LD_EXP 94
24185: PUSH
24186: LD_VAR 0 1
24190: ARRAY
24191: PUSH
24192: LD_VAR 0 2
24196: ARRAY
24197: PUSH
24198: LD_INT 2
24200: ARRAY
24201: PPUSH
24202: LD_VAR 0 3
24206: PPUSH
24207: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24211: LD_ADDR_EXP 94
24215: PUSH
24216: LD_EXP 94
24220: PPUSH
24221: LD_VAR 0 1
24225: PPUSH
24226: LD_EXP 94
24230: PUSH
24231: LD_VAR 0 1
24235: ARRAY
24236: PPUSH
24237: LD_VAR 0 2
24241: PPUSH
24242: CALL_OW 3
24246: PPUSH
24247: CALL_OW 1
24251: ST_TO_ADDR
// end ; end ;
24252: GO 24003
24254: POP
24255: POP
// end ;
24256: GO 23921
24258: POP
24259: POP
// end ;
24260: PPOPN 4
24262: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24263: LD_INT 0
24265: PPUSH
24266: PPUSH
// result := false ;
24267: LD_ADDR_VAR 0 4
24271: PUSH
24272: LD_INT 0
24274: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24275: LD_VAR 0 1
24279: PPUSH
24280: CALL_OW 264
24284: PUSH
24285: LD_INT 81
24287: EQUAL
24288: NOT
24289: IFFALSE 24293
// exit ;
24291: GO 24533
// index := GetElementIndex ( minersList , unit ) ;
24293: LD_ADDR_VAR 0 5
24297: PUSH
24298: LD_EXP 93
24302: PPUSH
24303: LD_VAR 0 1
24307: PPUSH
24308: CALL 30666 0 2
24312: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24313: LD_EXP 94
24317: PUSH
24318: LD_VAR 0 5
24322: ARRAY
24323: PUSH
24324: LD_EXP 95
24328: GREATEREQUAL
24329: IFFALSE 24333
// exit ;
24331: GO 24533
// ComMoveXY ( unit , x , y ) ;
24333: LD_VAR 0 1
24337: PPUSH
24338: LD_VAR 0 2
24342: PPUSH
24343: LD_VAR 0 3
24347: PPUSH
24348: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24352: LD_INT 35
24354: PPUSH
24355: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24359: LD_VAR 0 1
24363: PPUSH
24364: LD_VAR 0 2
24368: PPUSH
24369: LD_VAR 0 3
24373: PPUSH
24374: CALL 62002 0 3
24378: NOT
24379: PUSH
24380: LD_VAR 0 1
24384: PPUSH
24385: CALL_OW 314
24389: AND
24390: IFFALSE 24394
// exit ;
24392: GO 24533
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24394: LD_VAR 0 2
24398: PPUSH
24399: LD_VAR 0 3
24403: PPUSH
24404: CALL_OW 428
24408: PUSH
24409: LD_VAR 0 1
24413: EQUAL
24414: PUSH
24415: LD_VAR 0 1
24419: PPUSH
24420: CALL_OW 314
24424: NOT
24425: AND
24426: IFFALSE 24352
// PlaySoundXY ( x , y , PlantMine ) ;
24428: LD_VAR 0 2
24432: PPUSH
24433: LD_VAR 0 3
24437: PPUSH
24438: LD_STRING PlantMine
24440: PPUSH
24441: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24445: LD_VAR 0 2
24449: PPUSH
24450: LD_VAR 0 3
24454: PPUSH
24455: LD_VAR 0 1
24459: PPUSH
24460: CALL_OW 255
24464: PPUSH
24465: LD_INT 0
24467: PPUSH
24468: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24472: LD_ADDR_EXP 94
24476: PUSH
24477: LD_EXP 94
24481: PPUSH
24482: LD_VAR 0 5
24486: PUSH
24487: LD_EXP 94
24491: PUSH
24492: LD_VAR 0 5
24496: ARRAY
24497: PUSH
24498: LD_INT 1
24500: PLUS
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PPUSH
24506: LD_VAR 0 2
24510: PUSH
24511: LD_VAR 0 3
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PPUSH
24520: CALL 30881 0 3
24524: ST_TO_ADDR
// result := true ;
24525: LD_ADDR_VAR 0 4
24529: PUSH
24530: LD_INT 1
24532: ST_TO_ADDR
// end ;
24533: LD_VAR 0 4
24537: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24538: LD_INT 0
24540: PPUSH
24541: PPUSH
24542: PPUSH
// if not unit in minersList then
24543: LD_VAR 0 1
24547: PUSH
24548: LD_EXP 93
24552: IN
24553: NOT
24554: IFFALSE 24558
// exit ;
24556: GO 24950
// index := GetElementIndex ( minersList , unit ) ;
24558: LD_ADDR_VAR 0 6
24562: PUSH
24563: LD_EXP 93
24567: PPUSH
24568: LD_VAR 0 1
24572: PPUSH
24573: CALL 30666 0 2
24577: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24578: LD_ADDR_VAR 0 5
24582: PUSH
24583: DOUBLE
24584: LD_EXP 94
24588: PUSH
24589: LD_VAR 0 6
24593: ARRAY
24594: INC
24595: ST_TO_ADDR
24596: LD_INT 1
24598: PUSH
24599: FOR_DOWNTO
24600: IFFALSE 24761
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24602: LD_EXP 94
24606: PUSH
24607: LD_VAR 0 6
24611: ARRAY
24612: PUSH
24613: LD_VAR 0 5
24617: ARRAY
24618: PUSH
24619: LD_INT 1
24621: ARRAY
24622: PUSH
24623: LD_VAR 0 2
24627: EQUAL
24628: PUSH
24629: LD_EXP 94
24633: PUSH
24634: LD_VAR 0 6
24638: ARRAY
24639: PUSH
24640: LD_VAR 0 5
24644: ARRAY
24645: PUSH
24646: LD_INT 2
24648: ARRAY
24649: PUSH
24650: LD_VAR 0 3
24654: EQUAL
24655: AND
24656: IFFALSE 24759
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24658: LD_EXP 94
24662: PUSH
24663: LD_VAR 0 6
24667: ARRAY
24668: PUSH
24669: LD_VAR 0 5
24673: ARRAY
24674: PUSH
24675: LD_INT 1
24677: ARRAY
24678: PPUSH
24679: LD_EXP 94
24683: PUSH
24684: LD_VAR 0 6
24688: ARRAY
24689: PUSH
24690: LD_VAR 0 5
24694: ARRAY
24695: PUSH
24696: LD_INT 2
24698: ARRAY
24699: PPUSH
24700: LD_VAR 0 1
24704: PPUSH
24705: CALL_OW 255
24709: PPUSH
24710: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24714: LD_ADDR_EXP 94
24718: PUSH
24719: LD_EXP 94
24723: PPUSH
24724: LD_VAR 0 6
24728: PPUSH
24729: LD_EXP 94
24733: PUSH
24734: LD_VAR 0 6
24738: ARRAY
24739: PPUSH
24740: LD_VAR 0 5
24744: PPUSH
24745: CALL_OW 3
24749: PPUSH
24750: CALL_OW 1
24754: ST_TO_ADDR
// exit ;
24755: POP
24756: POP
24757: GO 24950
// end ; end ;
24759: GO 24599
24761: POP
24762: POP
// for i := minerMinesList [ index ] downto 1 do
24763: LD_ADDR_VAR 0 5
24767: PUSH
24768: DOUBLE
24769: LD_EXP 94
24773: PUSH
24774: LD_VAR 0 6
24778: ARRAY
24779: INC
24780: ST_TO_ADDR
24781: LD_INT 1
24783: PUSH
24784: FOR_DOWNTO
24785: IFFALSE 24948
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24787: LD_EXP 94
24791: PUSH
24792: LD_VAR 0 6
24796: ARRAY
24797: PUSH
24798: LD_VAR 0 5
24802: ARRAY
24803: PUSH
24804: LD_INT 1
24806: ARRAY
24807: PPUSH
24808: LD_EXP 94
24812: PUSH
24813: LD_VAR 0 6
24817: ARRAY
24818: PUSH
24819: LD_VAR 0 5
24823: ARRAY
24824: PUSH
24825: LD_INT 2
24827: ARRAY
24828: PPUSH
24829: LD_VAR 0 2
24833: PPUSH
24834: LD_VAR 0 3
24838: PPUSH
24839: CALL_OW 298
24843: PUSH
24844: LD_INT 6
24846: LESS
24847: IFFALSE 24946
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24849: LD_EXP 94
24853: PUSH
24854: LD_VAR 0 6
24858: ARRAY
24859: PUSH
24860: LD_VAR 0 5
24864: ARRAY
24865: PUSH
24866: LD_INT 1
24868: ARRAY
24869: PPUSH
24870: LD_EXP 94
24874: PUSH
24875: LD_VAR 0 6
24879: ARRAY
24880: PUSH
24881: LD_VAR 0 5
24885: ARRAY
24886: PUSH
24887: LD_INT 2
24889: ARRAY
24890: PPUSH
24891: LD_VAR 0 1
24895: PPUSH
24896: CALL_OW 255
24900: PPUSH
24901: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24905: LD_ADDR_EXP 94
24909: PUSH
24910: LD_EXP 94
24914: PPUSH
24915: LD_VAR 0 6
24919: PPUSH
24920: LD_EXP 94
24924: PUSH
24925: LD_VAR 0 6
24929: ARRAY
24930: PPUSH
24931: LD_VAR 0 5
24935: PPUSH
24936: CALL_OW 3
24940: PPUSH
24941: CALL_OW 1
24945: ST_TO_ADDR
// end ; end ;
24946: GO 24784
24948: POP
24949: POP
// end ;
24950: LD_VAR 0 4
24954: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24955: LD_INT 0
24957: PPUSH
24958: PPUSH
24959: PPUSH
24960: PPUSH
24961: PPUSH
24962: PPUSH
24963: PPUSH
24964: PPUSH
24965: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24966: LD_VAR 0 1
24970: PPUSH
24971: CALL_OW 264
24975: PUSH
24976: LD_INT 81
24978: EQUAL
24979: NOT
24980: PUSH
24981: LD_VAR 0 1
24985: PUSH
24986: LD_EXP 93
24990: IN
24991: NOT
24992: OR
24993: IFFALSE 24997
// exit ;
24995: GO 25319
// index := GetElementIndex ( minersList , unit ) ;
24997: LD_ADDR_VAR 0 6
25001: PUSH
25002: LD_EXP 93
25006: PPUSH
25007: LD_VAR 0 1
25011: PPUSH
25012: CALL 30666 0 2
25016: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25017: LD_ADDR_VAR 0 8
25021: PUSH
25022: LD_EXP 95
25026: PUSH
25027: LD_EXP 94
25031: PUSH
25032: LD_VAR 0 6
25036: ARRAY
25037: MINUS
25038: ST_TO_ADDR
// if not minesFreeAmount then
25039: LD_VAR 0 8
25043: NOT
25044: IFFALSE 25048
// exit ;
25046: GO 25319
// tmp := [ ] ;
25048: LD_ADDR_VAR 0 7
25052: PUSH
25053: EMPTY
25054: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25055: LD_ADDR_VAR 0 5
25059: PUSH
25060: DOUBLE
25061: LD_INT 1
25063: DEC
25064: ST_TO_ADDR
25065: LD_VAR 0 8
25069: PUSH
25070: FOR_TO
25071: IFFALSE 25266
// begin _d := rand ( 0 , 5 ) ;
25073: LD_ADDR_VAR 0 11
25077: PUSH
25078: LD_INT 0
25080: PPUSH
25081: LD_INT 5
25083: PPUSH
25084: CALL_OW 12
25088: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25089: LD_ADDR_VAR 0 12
25093: PUSH
25094: LD_INT 2
25096: PPUSH
25097: LD_INT 6
25099: PPUSH
25100: CALL_OW 12
25104: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25105: LD_ADDR_VAR 0 9
25109: PUSH
25110: LD_VAR 0 2
25114: PPUSH
25115: LD_VAR 0 11
25119: PPUSH
25120: LD_VAR 0 12
25124: PPUSH
25125: CALL_OW 272
25129: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25130: LD_ADDR_VAR 0 10
25134: PUSH
25135: LD_VAR 0 3
25139: PPUSH
25140: LD_VAR 0 11
25144: PPUSH
25145: LD_VAR 0 12
25149: PPUSH
25150: CALL_OW 273
25154: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25155: LD_VAR 0 9
25159: PPUSH
25160: LD_VAR 0 10
25164: PPUSH
25165: CALL_OW 488
25169: PUSH
25170: LD_VAR 0 9
25174: PUSH
25175: LD_VAR 0 10
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_VAR 0 7
25188: IN
25189: NOT
25190: AND
25191: PUSH
25192: LD_VAR 0 9
25196: PPUSH
25197: LD_VAR 0 10
25201: PPUSH
25202: CALL_OW 458
25206: NOT
25207: AND
25208: IFFALSE 25250
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25210: LD_ADDR_VAR 0 7
25214: PUSH
25215: LD_VAR 0 7
25219: PPUSH
25220: LD_VAR 0 7
25224: PUSH
25225: LD_INT 1
25227: PLUS
25228: PPUSH
25229: LD_VAR 0 9
25233: PUSH
25234: LD_VAR 0 10
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PPUSH
25243: CALL_OW 1
25247: ST_TO_ADDR
25248: GO 25264
// i := i - 1 ;
25250: LD_ADDR_VAR 0 5
25254: PUSH
25255: LD_VAR 0 5
25259: PUSH
25260: LD_INT 1
25262: MINUS
25263: ST_TO_ADDR
// end ;
25264: GO 25070
25266: POP
25267: POP
// for i in tmp do
25268: LD_ADDR_VAR 0 5
25272: PUSH
25273: LD_VAR 0 7
25277: PUSH
25278: FOR_IN
25279: IFFALSE 25317
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25281: LD_VAR 0 1
25285: PPUSH
25286: LD_VAR 0 5
25290: PUSH
25291: LD_INT 1
25293: ARRAY
25294: PPUSH
25295: LD_VAR 0 5
25299: PUSH
25300: LD_INT 2
25302: ARRAY
25303: PPUSH
25304: CALL 24263 0 3
25308: NOT
25309: IFFALSE 25315
// exit ;
25311: POP
25312: POP
25313: GO 25319
25315: GO 25278
25317: POP
25318: POP
// end ;
25319: LD_VAR 0 4
25323: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25324: LD_INT 0
25326: PPUSH
25327: PPUSH
25328: PPUSH
25329: PPUSH
25330: PPUSH
25331: PPUSH
25332: PPUSH
// if not GetClass ( unit ) = class_sniper then
25333: LD_VAR 0 1
25337: PPUSH
25338: CALL_OW 257
25342: PUSH
25343: LD_INT 5
25345: EQUAL
25346: NOT
25347: IFFALSE 25351
// exit ;
25349: GO 25739
// dist := 8 ;
25351: LD_ADDR_VAR 0 5
25355: PUSH
25356: LD_INT 8
25358: ST_TO_ADDR
// viewRange := 12 ;
25359: LD_ADDR_VAR 0 7
25363: PUSH
25364: LD_INT 12
25366: ST_TO_ADDR
// side := GetSide ( unit ) ;
25367: LD_ADDR_VAR 0 6
25371: PUSH
25372: LD_VAR 0 1
25376: PPUSH
25377: CALL_OW 255
25381: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25382: LD_INT 61
25384: PPUSH
25385: LD_VAR 0 6
25389: PPUSH
25390: CALL_OW 321
25394: PUSH
25395: LD_INT 2
25397: EQUAL
25398: IFFALSE 25408
// viewRange := 16 ;
25400: LD_ADDR_VAR 0 7
25404: PUSH
25405: LD_INT 16
25407: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25408: LD_VAR 0 1
25412: PPUSH
25413: LD_VAR 0 2
25417: PPUSH
25418: LD_VAR 0 3
25422: PPUSH
25423: CALL_OW 297
25427: PUSH
25428: LD_VAR 0 5
25432: GREATER
25433: IFFALSE 25512
// begin ComMoveXY ( unit , x , y ) ;
25435: LD_VAR 0 1
25439: PPUSH
25440: LD_VAR 0 2
25444: PPUSH
25445: LD_VAR 0 3
25449: PPUSH
25450: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25454: LD_INT 35
25456: PPUSH
25457: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25461: LD_VAR 0 1
25465: PPUSH
25466: LD_VAR 0 2
25470: PPUSH
25471: LD_VAR 0 3
25475: PPUSH
25476: CALL 62002 0 3
25480: NOT
25481: IFFALSE 25485
// exit ;
25483: GO 25739
// until GetDistUnitXY ( unit , x , y ) < dist ;
25485: LD_VAR 0 1
25489: PPUSH
25490: LD_VAR 0 2
25494: PPUSH
25495: LD_VAR 0 3
25499: PPUSH
25500: CALL_OW 297
25504: PUSH
25505: LD_VAR 0 5
25509: LESS
25510: IFFALSE 25454
// end ; ComTurnXY ( unit , x , y ) ;
25512: LD_VAR 0 1
25516: PPUSH
25517: LD_VAR 0 2
25521: PPUSH
25522: LD_VAR 0 3
25526: PPUSH
25527: CALL_OW 118
// wait ( 5 ) ;
25531: LD_INT 5
25533: PPUSH
25534: CALL_OW 67
// _d := GetDir ( unit ) ;
25538: LD_ADDR_VAR 0 10
25542: PUSH
25543: LD_VAR 0 1
25547: PPUSH
25548: CALL_OW 254
25552: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25553: LD_ADDR_VAR 0 8
25557: PUSH
25558: LD_VAR 0 1
25562: PPUSH
25563: CALL_OW 250
25567: PPUSH
25568: LD_VAR 0 10
25572: PPUSH
25573: LD_VAR 0 5
25577: PPUSH
25578: CALL_OW 272
25582: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25583: LD_ADDR_VAR 0 9
25587: PUSH
25588: LD_VAR 0 1
25592: PPUSH
25593: CALL_OW 251
25597: PPUSH
25598: LD_VAR 0 10
25602: PPUSH
25603: LD_VAR 0 5
25607: PPUSH
25608: CALL_OW 273
25612: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25613: LD_VAR 0 8
25617: PPUSH
25618: LD_VAR 0 9
25622: PPUSH
25623: CALL_OW 488
25627: NOT
25628: IFFALSE 25632
// exit ;
25630: GO 25739
// ComAnimCustom ( unit , 1 ) ;
25632: LD_VAR 0 1
25636: PPUSH
25637: LD_INT 1
25639: PPUSH
25640: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25644: LD_VAR 0 8
25648: PPUSH
25649: LD_VAR 0 9
25653: PPUSH
25654: LD_VAR 0 6
25658: PPUSH
25659: LD_VAR 0 7
25663: PPUSH
25664: CALL_OW 330
// repeat wait ( 1 ) ;
25668: LD_INT 1
25670: PPUSH
25671: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25675: LD_VAR 0 1
25679: PPUSH
25680: CALL_OW 316
25684: PUSH
25685: LD_VAR 0 1
25689: PPUSH
25690: CALL_OW 314
25694: OR
25695: PUSH
25696: LD_VAR 0 1
25700: PPUSH
25701: CALL_OW 302
25705: NOT
25706: OR
25707: PUSH
25708: LD_VAR 0 1
25712: PPUSH
25713: CALL_OW 301
25717: OR
25718: IFFALSE 25668
// RemoveSeeing ( _x , _y , side ) ;
25720: LD_VAR 0 8
25724: PPUSH
25725: LD_VAR 0 9
25729: PPUSH
25730: LD_VAR 0 6
25734: PPUSH
25735: CALL_OW 331
// end ; end_of_file
25739: LD_VAR 0 4
25743: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25744: LD_INT 0
25746: PPUSH
25747: PPUSH
// if exist_mode then
25748: LD_VAR 0 2
25752: IFFALSE 25777
// unit := CreateCharacter ( prefix & ident ) else
25754: LD_ADDR_VAR 0 5
25758: PUSH
25759: LD_VAR 0 3
25763: PUSH
25764: LD_VAR 0 1
25768: STR
25769: PPUSH
25770: CALL_OW 34
25774: ST_TO_ADDR
25775: GO 25792
// unit := NewCharacter ( ident ) ;
25777: LD_ADDR_VAR 0 5
25781: PUSH
25782: LD_VAR 0 1
25786: PPUSH
25787: CALL_OW 25
25791: ST_TO_ADDR
// result := unit ;
25792: LD_ADDR_VAR 0 4
25796: PUSH
25797: LD_VAR 0 5
25801: ST_TO_ADDR
// end ;
25802: LD_VAR 0 4
25806: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25807: LD_INT 0
25809: PPUSH
25810: PPUSH
// if not side or not nation then
25811: LD_VAR 0 1
25815: NOT
25816: PUSH
25817: LD_VAR 0 2
25821: NOT
25822: OR
25823: IFFALSE 25827
// exit ;
25825: GO 26595
// case nation of nation_american :
25827: LD_VAR 0 2
25831: PUSH
25832: LD_INT 1
25834: DOUBLE
25835: EQUAL
25836: IFTRUE 25840
25838: GO 26054
25840: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25841: LD_ADDR_VAR 0 4
25845: PUSH
25846: LD_INT 35
25848: PUSH
25849: LD_INT 45
25851: PUSH
25852: LD_INT 46
25854: PUSH
25855: LD_INT 47
25857: PUSH
25858: LD_INT 82
25860: PUSH
25861: LD_INT 83
25863: PUSH
25864: LD_INT 84
25866: PUSH
25867: LD_INT 85
25869: PUSH
25870: LD_INT 86
25872: PUSH
25873: LD_INT 1
25875: PUSH
25876: LD_INT 2
25878: PUSH
25879: LD_INT 6
25881: PUSH
25882: LD_INT 15
25884: PUSH
25885: LD_INT 16
25887: PUSH
25888: LD_INT 7
25890: PUSH
25891: LD_INT 12
25893: PUSH
25894: LD_INT 13
25896: PUSH
25897: LD_INT 10
25899: PUSH
25900: LD_INT 14
25902: PUSH
25903: LD_INT 20
25905: PUSH
25906: LD_INT 21
25908: PUSH
25909: LD_INT 22
25911: PUSH
25912: LD_INT 25
25914: PUSH
25915: LD_INT 32
25917: PUSH
25918: LD_INT 27
25920: PUSH
25921: LD_INT 36
25923: PUSH
25924: LD_INT 69
25926: PUSH
25927: LD_INT 39
25929: PUSH
25930: LD_INT 34
25932: PUSH
25933: LD_INT 40
25935: PUSH
25936: LD_INT 48
25938: PUSH
25939: LD_INT 49
25941: PUSH
25942: LD_INT 50
25944: PUSH
25945: LD_INT 51
25947: PUSH
25948: LD_INT 52
25950: PUSH
25951: LD_INT 53
25953: PUSH
25954: LD_INT 54
25956: PUSH
25957: LD_INT 55
25959: PUSH
25960: LD_INT 56
25962: PUSH
25963: LD_INT 57
25965: PUSH
25966: LD_INT 58
25968: PUSH
25969: LD_INT 59
25971: PUSH
25972: LD_INT 60
25974: PUSH
25975: LD_INT 61
25977: PUSH
25978: LD_INT 62
25980: PUSH
25981: LD_INT 80
25983: PUSH
25984: LD_INT 82
25986: PUSH
25987: LD_INT 83
25989: PUSH
25990: LD_INT 84
25992: PUSH
25993: LD_INT 85
25995: PUSH
25996: LD_INT 86
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: ST_TO_ADDR
26052: GO 26519
26054: LD_INT 2
26056: DOUBLE
26057: EQUAL
26058: IFTRUE 26062
26060: GO 26288
26062: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26063: LD_ADDR_VAR 0 4
26067: PUSH
26068: LD_INT 35
26070: PUSH
26071: LD_INT 45
26073: PUSH
26074: LD_INT 46
26076: PUSH
26077: LD_INT 47
26079: PUSH
26080: LD_INT 82
26082: PUSH
26083: LD_INT 83
26085: PUSH
26086: LD_INT 84
26088: PUSH
26089: LD_INT 85
26091: PUSH
26092: LD_INT 87
26094: PUSH
26095: LD_INT 70
26097: PUSH
26098: LD_INT 1
26100: PUSH
26101: LD_INT 11
26103: PUSH
26104: LD_INT 3
26106: PUSH
26107: LD_INT 4
26109: PUSH
26110: LD_INT 5
26112: PUSH
26113: LD_INT 6
26115: PUSH
26116: LD_INT 15
26118: PUSH
26119: LD_INT 18
26121: PUSH
26122: LD_INT 7
26124: PUSH
26125: LD_INT 17
26127: PUSH
26128: LD_INT 8
26130: PUSH
26131: LD_INT 20
26133: PUSH
26134: LD_INT 21
26136: PUSH
26137: LD_INT 22
26139: PUSH
26140: LD_INT 72
26142: PUSH
26143: LD_INT 26
26145: PUSH
26146: LD_INT 69
26148: PUSH
26149: LD_INT 39
26151: PUSH
26152: LD_INT 40
26154: PUSH
26155: LD_INT 41
26157: PUSH
26158: LD_INT 42
26160: PUSH
26161: LD_INT 43
26163: PUSH
26164: LD_INT 48
26166: PUSH
26167: LD_INT 49
26169: PUSH
26170: LD_INT 50
26172: PUSH
26173: LD_INT 51
26175: PUSH
26176: LD_INT 52
26178: PUSH
26179: LD_INT 53
26181: PUSH
26182: LD_INT 54
26184: PUSH
26185: LD_INT 55
26187: PUSH
26188: LD_INT 56
26190: PUSH
26191: LD_INT 60
26193: PUSH
26194: LD_INT 61
26196: PUSH
26197: LD_INT 62
26199: PUSH
26200: LD_INT 66
26202: PUSH
26203: LD_INT 67
26205: PUSH
26206: LD_INT 68
26208: PUSH
26209: LD_INT 81
26211: PUSH
26212: LD_INT 82
26214: PUSH
26215: LD_INT 83
26217: PUSH
26218: LD_INT 84
26220: PUSH
26221: LD_INT 85
26223: PUSH
26224: LD_INT 87
26226: PUSH
26227: LD_INT 88
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: ST_TO_ADDR
26286: GO 26519
26288: LD_INT 3
26290: DOUBLE
26291: EQUAL
26292: IFTRUE 26296
26294: GO 26518
26296: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26297: LD_ADDR_VAR 0 4
26301: PUSH
26302: LD_INT 46
26304: PUSH
26305: LD_INT 47
26307: PUSH
26308: LD_INT 1
26310: PUSH
26311: LD_INT 2
26313: PUSH
26314: LD_INT 82
26316: PUSH
26317: LD_INT 83
26319: PUSH
26320: LD_INT 84
26322: PUSH
26323: LD_INT 85
26325: PUSH
26326: LD_INT 86
26328: PUSH
26329: LD_INT 11
26331: PUSH
26332: LD_INT 9
26334: PUSH
26335: LD_INT 20
26337: PUSH
26338: LD_INT 19
26340: PUSH
26341: LD_INT 21
26343: PUSH
26344: LD_INT 24
26346: PUSH
26347: LD_INT 22
26349: PUSH
26350: LD_INT 25
26352: PUSH
26353: LD_INT 28
26355: PUSH
26356: LD_INT 29
26358: PUSH
26359: LD_INT 30
26361: PUSH
26362: LD_INT 31
26364: PUSH
26365: LD_INT 37
26367: PUSH
26368: LD_INT 38
26370: PUSH
26371: LD_INT 32
26373: PUSH
26374: LD_INT 27
26376: PUSH
26377: LD_INT 33
26379: PUSH
26380: LD_INT 69
26382: PUSH
26383: LD_INT 39
26385: PUSH
26386: LD_INT 34
26388: PUSH
26389: LD_INT 40
26391: PUSH
26392: LD_INT 71
26394: PUSH
26395: LD_INT 23
26397: PUSH
26398: LD_INT 44
26400: PUSH
26401: LD_INT 48
26403: PUSH
26404: LD_INT 49
26406: PUSH
26407: LD_INT 50
26409: PUSH
26410: LD_INT 51
26412: PUSH
26413: LD_INT 52
26415: PUSH
26416: LD_INT 53
26418: PUSH
26419: LD_INT 54
26421: PUSH
26422: LD_INT 55
26424: PUSH
26425: LD_INT 56
26427: PUSH
26428: LD_INT 57
26430: PUSH
26431: LD_INT 58
26433: PUSH
26434: LD_INT 59
26436: PUSH
26437: LD_INT 63
26439: PUSH
26440: LD_INT 64
26442: PUSH
26443: LD_INT 65
26445: PUSH
26446: LD_INT 82
26448: PUSH
26449: LD_INT 83
26451: PUSH
26452: LD_INT 84
26454: PUSH
26455: LD_INT 85
26457: PUSH
26458: LD_INT 86
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: ST_TO_ADDR
26516: GO 26519
26518: POP
// if state > - 1 and state < 3 then
26519: LD_VAR 0 3
26523: PUSH
26524: LD_INT 1
26526: NEG
26527: GREATER
26528: PUSH
26529: LD_VAR 0 3
26533: PUSH
26534: LD_INT 3
26536: LESS
26537: AND
26538: IFFALSE 26595
// for i in result do
26540: LD_ADDR_VAR 0 5
26544: PUSH
26545: LD_VAR 0 4
26549: PUSH
26550: FOR_IN
26551: IFFALSE 26593
// if GetTech ( i , side ) <> state then
26553: LD_VAR 0 5
26557: PPUSH
26558: LD_VAR 0 1
26562: PPUSH
26563: CALL_OW 321
26567: PUSH
26568: LD_VAR 0 3
26572: NONEQUAL
26573: IFFALSE 26591
// result := result diff i ;
26575: LD_ADDR_VAR 0 4
26579: PUSH
26580: LD_VAR 0 4
26584: PUSH
26585: LD_VAR 0 5
26589: DIFF
26590: ST_TO_ADDR
26591: GO 26550
26593: POP
26594: POP
// end ;
26595: LD_VAR 0 4
26599: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26600: LD_INT 0
26602: PPUSH
26603: PPUSH
26604: PPUSH
// result := true ;
26605: LD_ADDR_VAR 0 3
26609: PUSH
26610: LD_INT 1
26612: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26613: LD_ADDR_VAR 0 5
26617: PUSH
26618: LD_VAR 0 2
26622: PPUSH
26623: CALL_OW 480
26627: ST_TO_ADDR
// if not tmp then
26628: LD_VAR 0 5
26632: NOT
26633: IFFALSE 26637
// exit ;
26635: GO 26686
// for i in tmp do
26637: LD_ADDR_VAR 0 4
26641: PUSH
26642: LD_VAR 0 5
26646: PUSH
26647: FOR_IN
26648: IFFALSE 26684
// if GetTech ( i , side ) <> state_researched then
26650: LD_VAR 0 4
26654: PPUSH
26655: LD_VAR 0 1
26659: PPUSH
26660: CALL_OW 321
26664: PUSH
26665: LD_INT 2
26667: NONEQUAL
26668: IFFALSE 26682
// begin result := false ;
26670: LD_ADDR_VAR 0 3
26674: PUSH
26675: LD_INT 0
26677: ST_TO_ADDR
// exit ;
26678: POP
26679: POP
26680: GO 26686
// end ;
26682: GO 26647
26684: POP
26685: POP
// end ;
26686: LD_VAR 0 3
26690: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26691: LD_INT 0
26693: PPUSH
26694: PPUSH
26695: PPUSH
26696: PPUSH
26697: PPUSH
26698: PPUSH
26699: PPUSH
26700: PPUSH
26701: PPUSH
26702: PPUSH
26703: PPUSH
26704: PPUSH
26705: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26706: LD_VAR 0 1
26710: NOT
26711: PUSH
26712: LD_VAR 0 1
26716: PPUSH
26717: CALL_OW 257
26721: PUSH
26722: LD_INT 9
26724: NONEQUAL
26725: OR
26726: IFFALSE 26730
// exit ;
26728: GO 27303
// side := GetSide ( unit ) ;
26730: LD_ADDR_VAR 0 9
26734: PUSH
26735: LD_VAR 0 1
26739: PPUSH
26740: CALL_OW 255
26744: ST_TO_ADDR
// tech_space := tech_spacanom ;
26745: LD_ADDR_VAR 0 12
26749: PUSH
26750: LD_INT 29
26752: ST_TO_ADDR
// tech_time := tech_taurad ;
26753: LD_ADDR_VAR 0 13
26757: PUSH
26758: LD_INT 28
26760: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26761: LD_ADDR_VAR 0 11
26765: PUSH
26766: LD_VAR 0 1
26770: PPUSH
26771: CALL_OW 310
26775: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26776: LD_VAR 0 11
26780: PPUSH
26781: CALL_OW 247
26785: PUSH
26786: LD_INT 2
26788: EQUAL
26789: IFFALSE 26793
// exit ;
26791: GO 27303
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26793: LD_ADDR_VAR 0 8
26797: PUSH
26798: LD_INT 81
26800: PUSH
26801: LD_VAR 0 9
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 3
26812: PUSH
26813: LD_INT 21
26815: PUSH
26816: LD_INT 3
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PPUSH
26831: CALL_OW 69
26835: ST_TO_ADDR
// if not tmp then
26836: LD_VAR 0 8
26840: NOT
26841: IFFALSE 26845
// exit ;
26843: GO 27303
// if in_unit then
26845: LD_VAR 0 11
26849: IFFALSE 26873
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26851: LD_ADDR_VAR 0 10
26855: PUSH
26856: LD_VAR 0 8
26860: PPUSH
26861: LD_VAR 0 11
26865: PPUSH
26866: CALL_OW 74
26870: ST_TO_ADDR
26871: GO 26893
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26873: LD_ADDR_VAR 0 10
26877: PUSH
26878: LD_VAR 0 8
26882: PPUSH
26883: LD_VAR 0 1
26887: PPUSH
26888: CALL_OW 74
26892: ST_TO_ADDR
// if not enemy then
26893: LD_VAR 0 10
26897: NOT
26898: IFFALSE 26902
// exit ;
26900: GO 27303
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26902: LD_VAR 0 11
26906: PUSH
26907: LD_VAR 0 11
26911: PPUSH
26912: LD_VAR 0 10
26916: PPUSH
26917: CALL_OW 296
26921: PUSH
26922: LD_INT 13
26924: GREATER
26925: AND
26926: PUSH
26927: LD_VAR 0 1
26931: PPUSH
26932: LD_VAR 0 10
26936: PPUSH
26937: CALL_OW 296
26941: PUSH
26942: LD_INT 12
26944: GREATER
26945: OR
26946: IFFALSE 26950
// exit ;
26948: GO 27303
// missile := [ 1 ] ;
26950: LD_ADDR_VAR 0 14
26954: PUSH
26955: LD_INT 1
26957: PUSH
26958: EMPTY
26959: LIST
26960: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26961: LD_VAR 0 9
26965: PPUSH
26966: LD_VAR 0 12
26970: PPUSH
26971: CALL_OW 325
26975: IFFALSE 27004
// missile := Replace ( missile , missile + 1 , 2 ) ;
26977: LD_ADDR_VAR 0 14
26981: PUSH
26982: LD_VAR 0 14
26986: PPUSH
26987: LD_VAR 0 14
26991: PUSH
26992: LD_INT 1
26994: PLUS
26995: PPUSH
26996: LD_INT 2
26998: PPUSH
26999: CALL_OW 1
27003: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27004: LD_VAR 0 9
27008: PPUSH
27009: LD_VAR 0 13
27013: PPUSH
27014: CALL_OW 325
27018: PUSH
27019: LD_VAR 0 10
27023: PPUSH
27024: CALL_OW 255
27028: PPUSH
27029: LD_VAR 0 13
27033: PPUSH
27034: CALL_OW 325
27038: NOT
27039: AND
27040: IFFALSE 27069
// missile := Replace ( missile , missile + 1 , 3 ) ;
27042: LD_ADDR_VAR 0 14
27046: PUSH
27047: LD_VAR 0 14
27051: PPUSH
27052: LD_VAR 0 14
27056: PUSH
27057: LD_INT 1
27059: PLUS
27060: PPUSH
27061: LD_INT 3
27063: PPUSH
27064: CALL_OW 1
27068: ST_TO_ADDR
// if missile < 2 then
27069: LD_VAR 0 14
27073: PUSH
27074: LD_INT 2
27076: LESS
27077: IFFALSE 27081
// exit ;
27079: GO 27303
// x := GetX ( enemy ) ;
27081: LD_ADDR_VAR 0 4
27085: PUSH
27086: LD_VAR 0 10
27090: PPUSH
27091: CALL_OW 250
27095: ST_TO_ADDR
// y := GetY ( enemy ) ;
27096: LD_ADDR_VAR 0 5
27100: PUSH
27101: LD_VAR 0 10
27105: PPUSH
27106: CALL_OW 251
27110: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27111: LD_ADDR_VAR 0 6
27115: PUSH
27116: LD_VAR 0 4
27120: PUSH
27121: LD_INT 1
27123: NEG
27124: PPUSH
27125: LD_INT 1
27127: PPUSH
27128: CALL_OW 12
27132: PLUS
27133: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27134: LD_ADDR_VAR 0 7
27138: PUSH
27139: LD_VAR 0 5
27143: PUSH
27144: LD_INT 1
27146: NEG
27147: PPUSH
27148: LD_INT 1
27150: PPUSH
27151: CALL_OW 12
27155: PLUS
27156: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27157: LD_VAR 0 6
27161: PPUSH
27162: LD_VAR 0 7
27166: PPUSH
27167: CALL_OW 488
27171: NOT
27172: IFFALSE 27194
// begin _x := x ;
27174: LD_ADDR_VAR 0 6
27178: PUSH
27179: LD_VAR 0 4
27183: ST_TO_ADDR
// _y := y ;
27184: LD_ADDR_VAR 0 7
27188: PUSH
27189: LD_VAR 0 5
27193: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27194: LD_ADDR_VAR 0 3
27198: PUSH
27199: LD_INT 1
27201: PPUSH
27202: LD_VAR 0 14
27206: PPUSH
27207: CALL_OW 12
27211: ST_TO_ADDR
// case i of 1 :
27212: LD_VAR 0 3
27216: PUSH
27217: LD_INT 1
27219: DOUBLE
27220: EQUAL
27221: IFTRUE 27225
27223: GO 27242
27225: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27226: LD_VAR 0 1
27230: PPUSH
27231: LD_VAR 0 10
27235: PPUSH
27236: CALL_OW 115
27240: GO 27303
27242: LD_INT 2
27244: DOUBLE
27245: EQUAL
27246: IFTRUE 27250
27248: GO 27272
27250: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27251: LD_VAR 0 1
27255: PPUSH
27256: LD_VAR 0 6
27260: PPUSH
27261: LD_VAR 0 7
27265: PPUSH
27266: CALL_OW 153
27270: GO 27303
27272: LD_INT 3
27274: DOUBLE
27275: EQUAL
27276: IFTRUE 27280
27278: GO 27302
27280: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27281: LD_VAR 0 1
27285: PPUSH
27286: LD_VAR 0 6
27290: PPUSH
27291: LD_VAR 0 7
27295: PPUSH
27296: CALL_OW 154
27300: GO 27303
27302: POP
// end ;
27303: LD_VAR 0 2
27307: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27308: LD_INT 0
27310: PPUSH
27311: PPUSH
27312: PPUSH
27313: PPUSH
27314: PPUSH
27315: PPUSH
// if not unit or not building then
27316: LD_VAR 0 1
27320: NOT
27321: PUSH
27322: LD_VAR 0 2
27326: NOT
27327: OR
27328: IFFALSE 27332
// exit ;
27330: GO 27490
// x := GetX ( building ) ;
27332: LD_ADDR_VAR 0 5
27336: PUSH
27337: LD_VAR 0 2
27341: PPUSH
27342: CALL_OW 250
27346: ST_TO_ADDR
// y := GetY ( building ) ;
27347: LD_ADDR_VAR 0 6
27351: PUSH
27352: LD_VAR 0 2
27356: PPUSH
27357: CALL_OW 251
27361: ST_TO_ADDR
// for i = 0 to 5 do
27362: LD_ADDR_VAR 0 4
27366: PUSH
27367: DOUBLE
27368: LD_INT 0
27370: DEC
27371: ST_TO_ADDR
27372: LD_INT 5
27374: PUSH
27375: FOR_TO
27376: IFFALSE 27488
// begin _x := ShiftX ( x , i , 3 ) ;
27378: LD_ADDR_VAR 0 7
27382: PUSH
27383: LD_VAR 0 5
27387: PPUSH
27388: LD_VAR 0 4
27392: PPUSH
27393: LD_INT 3
27395: PPUSH
27396: CALL_OW 272
27400: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27401: LD_ADDR_VAR 0 8
27405: PUSH
27406: LD_VAR 0 6
27410: PPUSH
27411: LD_VAR 0 4
27415: PPUSH
27416: LD_INT 3
27418: PPUSH
27419: CALL_OW 273
27423: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27424: LD_VAR 0 7
27428: PPUSH
27429: LD_VAR 0 8
27433: PPUSH
27434: CALL_OW 488
27438: NOT
27439: IFFALSE 27443
// continue ;
27441: GO 27375
// if HexInfo ( _x , _y ) = 0 then
27443: LD_VAR 0 7
27447: PPUSH
27448: LD_VAR 0 8
27452: PPUSH
27453: CALL_OW 428
27457: PUSH
27458: LD_INT 0
27460: EQUAL
27461: IFFALSE 27486
// begin ComMoveXY ( unit , _x , _y ) ;
27463: LD_VAR 0 1
27467: PPUSH
27468: LD_VAR 0 7
27472: PPUSH
27473: LD_VAR 0 8
27477: PPUSH
27478: CALL_OW 111
// exit ;
27482: POP
27483: POP
27484: GO 27490
// end ; end ;
27486: GO 27375
27488: POP
27489: POP
// end ;
27490: LD_VAR 0 3
27494: RET
// export function ScanBase ( side , base_area ) ; begin
27495: LD_INT 0
27497: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27498: LD_ADDR_VAR 0 3
27502: PUSH
27503: LD_VAR 0 2
27507: PPUSH
27508: LD_INT 81
27510: PUSH
27511: LD_VAR 0 1
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PPUSH
27520: CALL_OW 70
27524: ST_TO_ADDR
// end ;
27525: LD_VAR 0 3
27529: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27530: LD_INT 0
27532: PPUSH
27533: PPUSH
27534: PPUSH
27535: PPUSH
// result := false ;
27536: LD_ADDR_VAR 0 2
27540: PUSH
27541: LD_INT 0
27543: ST_TO_ADDR
// side := GetSide ( unit ) ;
27544: LD_ADDR_VAR 0 3
27548: PUSH
27549: LD_VAR 0 1
27553: PPUSH
27554: CALL_OW 255
27558: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27559: LD_ADDR_VAR 0 4
27563: PUSH
27564: LD_VAR 0 1
27568: PPUSH
27569: CALL_OW 248
27573: ST_TO_ADDR
// case nat of 1 :
27574: LD_VAR 0 4
27578: PUSH
27579: LD_INT 1
27581: DOUBLE
27582: EQUAL
27583: IFTRUE 27587
27585: GO 27598
27587: POP
// tech := tech_lassight ; 2 :
27588: LD_ADDR_VAR 0 5
27592: PUSH
27593: LD_INT 12
27595: ST_TO_ADDR
27596: GO 27637
27598: LD_INT 2
27600: DOUBLE
27601: EQUAL
27602: IFTRUE 27606
27604: GO 27617
27606: POP
// tech := tech_mortar ; 3 :
27607: LD_ADDR_VAR 0 5
27611: PUSH
27612: LD_INT 41
27614: ST_TO_ADDR
27615: GO 27637
27617: LD_INT 3
27619: DOUBLE
27620: EQUAL
27621: IFTRUE 27625
27623: GO 27636
27625: POP
// tech := tech_bazooka ; end ;
27626: LD_ADDR_VAR 0 5
27630: PUSH
27631: LD_INT 44
27633: ST_TO_ADDR
27634: GO 27637
27636: POP
// if Researched ( side , tech ) then
27637: LD_VAR 0 3
27641: PPUSH
27642: LD_VAR 0 5
27646: PPUSH
27647: CALL_OW 325
27651: IFFALSE 27678
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27653: LD_ADDR_VAR 0 2
27657: PUSH
27658: LD_INT 5
27660: PUSH
27661: LD_INT 8
27663: PUSH
27664: LD_INT 9
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: LIST
27671: PUSH
27672: LD_VAR 0 4
27676: ARRAY
27677: ST_TO_ADDR
// end ;
27678: LD_VAR 0 2
27682: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27683: LD_INT 0
27685: PPUSH
27686: PPUSH
27687: PPUSH
// if not mines then
27688: LD_VAR 0 2
27692: NOT
27693: IFFALSE 27697
// exit ;
27695: GO 27841
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27697: LD_ADDR_VAR 0 5
27701: PUSH
27702: LD_INT 81
27704: PUSH
27705: LD_VAR 0 1
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: LD_INT 3
27716: PUSH
27717: LD_INT 21
27719: PUSH
27720: LD_INT 3
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PPUSH
27735: CALL_OW 69
27739: ST_TO_ADDR
// for i in mines do
27740: LD_ADDR_VAR 0 4
27744: PUSH
27745: LD_VAR 0 2
27749: PUSH
27750: FOR_IN
27751: IFFALSE 27839
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27753: LD_VAR 0 4
27757: PUSH
27758: LD_INT 1
27760: ARRAY
27761: PPUSH
27762: LD_VAR 0 4
27766: PUSH
27767: LD_INT 2
27769: ARRAY
27770: PPUSH
27771: CALL_OW 458
27775: NOT
27776: IFFALSE 27780
// continue ;
27778: GO 27750
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27780: LD_VAR 0 4
27784: PUSH
27785: LD_INT 1
27787: ARRAY
27788: PPUSH
27789: LD_VAR 0 4
27793: PUSH
27794: LD_INT 2
27796: ARRAY
27797: PPUSH
27798: CALL_OW 428
27802: PUSH
27803: LD_VAR 0 5
27807: IN
27808: IFFALSE 27837
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27810: LD_VAR 0 4
27814: PUSH
27815: LD_INT 1
27817: ARRAY
27818: PPUSH
27819: LD_VAR 0 4
27823: PUSH
27824: LD_INT 2
27826: ARRAY
27827: PPUSH
27828: LD_VAR 0 1
27832: PPUSH
27833: CALL_OW 456
// end ;
27837: GO 27750
27839: POP
27840: POP
// end ;
27841: LD_VAR 0 3
27845: RET
// export function Count ( array ) ; var i ; begin
27846: LD_INT 0
27848: PPUSH
27849: PPUSH
// result := 0 ;
27850: LD_ADDR_VAR 0 2
27854: PUSH
27855: LD_INT 0
27857: ST_TO_ADDR
// for i in array do
27858: LD_ADDR_VAR 0 3
27862: PUSH
27863: LD_VAR 0 1
27867: PUSH
27868: FOR_IN
27869: IFFALSE 27893
// if i then
27871: LD_VAR 0 3
27875: IFFALSE 27891
// result := result + 1 ;
27877: LD_ADDR_VAR 0 2
27881: PUSH
27882: LD_VAR 0 2
27886: PUSH
27887: LD_INT 1
27889: PLUS
27890: ST_TO_ADDR
27891: GO 27868
27893: POP
27894: POP
// end ;
27895: LD_VAR 0 2
27899: RET
// export function IsEmpty ( building ) ; begin
27900: LD_INT 0
27902: PPUSH
// if not building then
27903: LD_VAR 0 1
27907: NOT
27908: IFFALSE 27912
// exit ;
27910: GO 27955
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27912: LD_ADDR_VAR 0 2
27916: PUSH
27917: LD_VAR 0 1
27921: PUSH
27922: LD_INT 22
27924: PUSH
27925: LD_VAR 0 1
27929: PPUSH
27930: CALL_OW 255
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PUSH
27939: LD_INT 58
27941: PUSH
27942: EMPTY
27943: LIST
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PPUSH
27949: CALL_OW 69
27953: IN
27954: ST_TO_ADDR
// end ;
27955: LD_VAR 0 2
27959: RET
// export function IsNotFull ( building ) ; var places ; begin
27960: LD_INT 0
27962: PPUSH
27963: PPUSH
// if not building then
27964: LD_VAR 0 1
27968: NOT
27969: IFFALSE 27973
// exit ;
27971: GO 28144
// result := false ;
27973: LD_ADDR_VAR 0 2
27977: PUSH
27978: LD_INT 0
27980: ST_TO_ADDR
// places := 0 ;
27981: LD_ADDR_VAR 0 3
27985: PUSH
27986: LD_INT 0
27988: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
27989: LD_VAR 0 1
27993: PPUSH
27994: CALL_OW 266
27998: PUSH
27999: LD_INT 0
28001: DOUBLE
28002: EQUAL
28003: IFTRUE 28061
28005: LD_INT 1
28007: DOUBLE
28008: EQUAL
28009: IFTRUE 28061
28011: LD_INT 6
28013: DOUBLE
28014: EQUAL
28015: IFTRUE 28061
28017: LD_INT 7
28019: DOUBLE
28020: EQUAL
28021: IFTRUE 28061
28023: LD_INT 8
28025: DOUBLE
28026: EQUAL
28027: IFTRUE 28061
28029: LD_INT 4
28031: DOUBLE
28032: EQUAL
28033: IFTRUE 28061
28035: LD_INT 5
28037: DOUBLE
28038: EQUAL
28039: IFTRUE 28061
28041: LD_INT 2
28043: DOUBLE
28044: EQUAL
28045: IFTRUE 28061
28047: LD_INT 3
28049: DOUBLE
28050: EQUAL
28051: IFTRUE 28061
28053: LD_INT 35
28055: DOUBLE
28056: EQUAL
28057: IFTRUE 28061
28059: GO 28072
28061: POP
// places := 6 ; b_bunker , b_breastwork :
28062: LD_ADDR_VAR 0 3
28066: PUSH
28067: LD_INT 6
28069: ST_TO_ADDR
28070: GO 28117
28072: LD_INT 32
28074: DOUBLE
28075: EQUAL
28076: IFTRUE 28086
28078: LD_INT 31
28080: DOUBLE
28081: EQUAL
28082: IFTRUE 28086
28084: GO 28097
28086: POP
// places := 1 ; b_control_tower :
28087: LD_ADDR_VAR 0 3
28091: PUSH
28092: LD_INT 1
28094: ST_TO_ADDR
28095: GO 28117
28097: LD_INT 36
28099: DOUBLE
28100: EQUAL
28101: IFTRUE 28105
28103: GO 28116
28105: POP
// places := 3 ; end ;
28106: LD_ADDR_VAR 0 3
28110: PUSH
28111: LD_INT 3
28113: ST_TO_ADDR
28114: GO 28117
28116: POP
// if places then
28117: LD_VAR 0 3
28121: IFFALSE 28144
// result := UnitsInside ( building ) < places ;
28123: LD_ADDR_VAR 0 2
28127: PUSH
28128: LD_VAR 0 1
28132: PPUSH
28133: CALL_OW 313
28137: PUSH
28138: LD_VAR 0 3
28142: LESS
28143: ST_TO_ADDR
// end ;
28144: LD_VAR 0 2
28148: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28149: LD_INT 0
28151: PPUSH
28152: PPUSH
28153: PPUSH
28154: PPUSH
// tmp := [ ] ;
28155: LD_ADDR_VAR 0 3
28159: PUSH
28160: EMPTY
28161: ST_TO_ADDR
// list := [ ] ;
28162: LD_ADDR_VAR 0 5
28166: PUSH
28167: EMPTY
28168: ST_TO_ADDR
// for i = 16 to 25 do
28169: LD_ADDR_VAR 0 4
28173: PUSH
28174: DOUBLE
28175: LD_INT 16
28177: DEC
28178: ST_TO_ADDR
28179: LD_INT 25
28181: PUSH
28182: FOR_TO
28183: IFFALSE 28256
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28185: LD_ADDR_VAR 0 3
28189: PUSH
28190: LD_VAR 0 3
28194: PUSH
28195: LD_INT 22
28197: PUSH
28198: LD_VAR 0 1
28202: PPUSH
28203: CALL_OW 255
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PUSH
28212: LD_INT 91
28214: PUSH
28215: LD_VAR 0 1
28219: PUSH
28220: LD_INT 6
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: LIST
28227: PUSH
28228: LD_INT 30
28230: PUSH
28231: LD_VAR 0 4
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: LIST
28244: PUSH
28245: EMPTY
28246: LIST
28247: PPUSH
28248: CALL_OW 69
28252: ADD
28253: ST_TO_ADDR
28254: GO 28182
28256: POP
28257: POP
// for i = 1 to tmp do
28258: LD_ADDR_VAR 0 4
28262: PUSH
28263: DOUBLE
28264: LD_INT 1
28266: DEC
28267: ST_TO_ADDR
28268: LD_VAR 0 3
28272: PUSH
28273: FOR_TO
28274: IFFALSE 28362
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28276: LD_ADDR_VAR 0 5
28280: PUSH
28281: LD_VAR 0 5
28285: PUSH
28286: LD_VAR 0 3
28290: PUSH
28291: LD_VAR 0 4
28295: ARRAY
28296: PPUSH
28297: CALL_OW 266
28301: PUSH
28302: LD_VAR 0 3
28306: PUSH
28307: LD_VAR 0 4
28311: ARRAY
28312: PPUSH
28313: CALL_OW 250
28317: PUSH
28318: LD_VAR 0 3
28322: PUSH
28323: LD_VAR 0 4
28327: ARRAY
28328: PPUSH
28329: CALL_OW 251
28333: PUSH
28334: LD_VAR 0 3
28338: PUSH
28339: LD_VAR 0 4
28343: ARRAY
28344: PPUSH
28345: CALL_OW 254
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: PUSH
28356: EMPTY
28357: LIST
28358: ADD
28359: ST_TO_ADDR
28360: GO 28273
28362: POP
28363: POP
// result := list ;
28364: LD_ADDR_VAR 0 2
28368: PUSH
28369: LD_VAR 0 5
28373: ST_TO_ADDR
// end ;
28374: LD_VAR 0 2
28378: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28379: LD_INT 0
28381: PPUSH
28382: PPUSH
28383: PPUSH
28384: PPUSH
28385: PPUSH
28386: PPUSH
28387: PPUSH
// if not factory then
28388: LD_VAR 0 1
28392: NOT
28393: IFFALSE 28397
// exit ;
28395: GO 28990
// if control = control_apeman then
28397: LD_VAR 0 4
28401: PUSH
28402: LD_INT 5
28404: EQUAL
28405: IFFALSE 28514
// begin tmp := UnitsInside ( factory ) ;
28407: LD_ADDR_VAR 0 8
28411: PUSH
28412: LD_VAR 0 1
28416: PPUSH
28417: CALL_OW 313
28421: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28422: LD_VAR 0 8
28426: PPUSH
28427: LD_INT 25
28429: PUSH
28430: LD_INT 12
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PPUSH
28437: CALL_OW 72
28441: NOT
28442: IFFALSE 28452
// control := control_manual ;
28444: LD_ADDR_VAR 0 4
28448: PUSH
28449: LD_INT 1
28451: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28452: LD_ADDR_VAR 0 8
28456: PUSH
28457: LD_VAR 0 1
28461: PPUSH
28462: CALL 28149 0 1
28466: ST_TO_ADDR
// if tmp then
28467: LD_VAR 0 8
28471: IFFALSE 28514
// begin for i in tmp do
28473: LD_ADDR_VAR 0 7
28477: PUSH
28478: LD_VAR 0 8
28482: PUSH
28483: FOR_IN
28484: IFFALSE 28512
// if i [ 1 ] = b_ext_radio then
28486: LD_VAR 0 7
28490: PUSH
28491: LD_INT 1
28493: ARRAY
28494: PUSH
28495: LD_INT 22
28497: EQUAL
28498: IFFALSE 28510
// begin control := control_remote ;
28500: LD_ADDR_VAR 0 4
28504: PUSH
28505: LD_INT 2
28507: ST_TO_ADDR
// break ;
28508: GO 28512
// end ;
28510: GO 28483
28512: POP
28513: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28514: LD_VAR 0 1
28518: PPUSH
28519: LD_VAR 0 2
28523: PPUSH
28524: LD_VAR 0 3
28528: PPUSH
28529: LD_VAR 0 4
28533: PPUSH
28534: LD_VAR 0 5
28538: PPUSH
28539: CALL_OW 448
28543: IFFALSE 28578
// begin result := [ chassis , engine , control , weapon ] ;
28545: LD_ADDR_VAR 0 6
28549: PUSH
28550: LD_VAR 0 2
28554: PUSH
28555: LD_VAR 0 3
28559: PUSH
28560: LD_VAR 0 4
28564: PUSH
28565: LD_VAR 0 5
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: ST_TO_ADDR
// exit ;
28576: GO 28990
// end ; _chassis := AvailableChassisList ( factory ) ;
28578: LD_ADDR_VAR 0 9
28582: PUSH
28583: LD_VAR 0 1
28587: PPUSH
28588: CALL_OW 475
28592: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28593: LD_ADDR_VAR 0 11
28597: PUSH
28598: LD_VAR 0 1
28602: PPUSH
28603: CALL_OW 476
28607: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28608: LD_ADDR_VAR 0 12
28612: PUSH
28613: LD_VAR 0 1
28617: PPUSH
28618: CALL_OW 477
28622: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28623: LD_ADDR_VAR 0 10
28627: PUSH
28628: LD_VAR 0 1
28632: PPUSH
28633: CALL_OW 478
28637: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28638: LD_VAR 0 9
28642: NOT
28643: PUSH
28644: LD_VAR 0 11
28648: NOT
28649: OR
28650: PUSH
28651: LD_VAR 0 12
28655: NOT
28656: OR
28657: PUSH
28658: LD_VAR 0 10
28662: NOT
28663: OR
28664: IFFALSE 28699
// begin result := [ chassis , engine , control , weapon ] ;
28666: LD_ADDR_VAR 0 6
28670: PUSH
28671: LD_VAR 0 2
28675: PUSH
28676: LD_VAR 0 3
28680: PUSH
28681: LD_VAR 0 4
28685: PUSH
28686: LD_VAR 0 5
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: LIST
28695: LIST
28696: ST_TO_ADDR
// exit ;
28697: GO 28990
// end ; if not chassis in _chassis then
28699: LD_VAR 0 2
28703: PUSH
28704: LD_VAR 0 9
28708: IN
28709: NOT
28710: IFFALSE 28736
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28712: LD_ADDR_VAR 0 2
28716: PUSH
28717: LD_VAR 0 9
28721: PUSH
28722: LD_INT 1
28724: PPUSH
28725: LD_VAR 0 9
28729: PPUSH
28730: CALL_OW 12
28734: ARRAY
28735: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28736: LD_VAR 0 2
28740: PPUSH
28741: LD_VAR 0 3
28745: PPUSH
28746: CALL 28995 0 2
28750: NOT
28751: IFFALSE 28810
// repeat engine := _engine [ 1 ] ;
28753: LD_ADDR_VAR 0 3
28757: PUSH
28758: LD_VAR 0 11
28762: PUSH
28763: LD_INT 1
28765: ARRAY
28766: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28767: LD_ADDR_VAR 0 11
28771: PUSH
28772: LD_VAR 0 11
28776: PPUSH
28777: LD_INT 1
28779: PPUSH
28780: CALL_OW 3
28784: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28785: LD_VAR 0 2
28789: PPUSH
28790: LD_VAR 0 3
28794: PPUSH
28795: CALL 28995 0 2
28799: PUSH
28800: LD_VAR 0 11
28804: PUSH
28805: EMPTY
28806: EQUAL
28807: OR
28808: IFFALSE 28753
// if not control in _control then
28810: LD_VAR 0 4
28814: PUSH
28815: LD_VAR 0 12
28819: IN
28820: NOT
28821: IFFALSE 28847
// control := _control [ rand ( 1 , _control ) ] ;
28823: LD_ADDR_VAR 0 4
28827: PUSH
28828: LD_VAR 0 12
28832: PUSH
28833: LD_INT 1
28835: PPUSH
28836: LD_VAR 0 12
28840: PPUSH
28841: CALL_OW 12
28845: ARRAY
28846: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28847: LD_VAR 0 2
28851: PPUSH
28852: LD_VAR 0 5
28856: PPUSH
28857: CALL 29215 0 2
28861: NOT
28862: IFFALSE 28921
// repeat weapon := _weapon [ 1 ] ;
28864: LD_ADDR_VAR 0 5
28868: PUSH
28869: LD_VAR 0 10
28873: PUSH
28874: LD_INT 1
28876: ARRAY
28877: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28878: LD_ADDR_VAR 0 10
28882: PUSH
28883: LD_VAR 0 10
28887: PPUSH
28888: LD_INT 1
28890: PPUSH
28891: CALL_OW 3
28895: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28896: LD_VAR 0 2
28900: PPUSH
28901: LD_VAR 0 5
28905: PPUSH
28906: CALL 29215 0 2
28910: PUSH
28911: LD_VAR 0 10
28915: PUSH
28916: EMPTY
28917: EQUAL
28918: OR
28919: IFFALSE 28864
// result := [ ] ;
28921: LD_ADDR_VAR 0 6
28925: PUSH
28926: EMPTY
28927: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28928: LD_VAR 0 1
28932: PPUSH
28933: LD_VAR 0 2
28937: PPUSH
28938: LD_VAR 0 3
28942: PPUSH
28943: LD_VAR 0 4
28947: PPUSH
28948: LD_VAR 0 5
28952: PPUSH
28953: CALL_OW 448
28957: IFFALSE 28990
// result := [ chassis , engine , control , weapon ] ;
28959: LD_ADDR_VAR 0 6
28963: PUSH
28964: LD_VAR 0 2
28968: PUSH
28969: LD_VAR 0 3
28973: PUSH
28974: LD_VAR 0 4
28978: PUSH
28979: LD_VAR 0 5
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: ST_TO_ADDR
// end ;
28990: LD_VAR 0 6
28994: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28995: LD_INT 0
28997: PPUSH
// if not chassis or not engine then
28998: LD_VAR 0 1
29002: NOT
29003: PUSH
29004: LD_VAR 0 2
29008: NOT
29009: OR
29010: IFFALSE 29014
// exit ;
29012: GO 29210
// case engine of engine_solar :
29014: LD_VAR 0 2
29018: PUSH
29019: LD_INT 2
29021: DOUBLE
29022: EQUAL
29023: IFTRUE 29027
29025: GO 29065
29027: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29028: LD_ADDR_VAR 0 3
29032: PUSH
29033: LD_INT 11
29035: PUSH
29036: LD_INT 12
29038: PUSH
29039: LD_INT 13
29041: PUSH
29042: LD_INT 14
29044: PUSH
29045: LD_INT 1
29047: PUSH
29048: LD_INT 2
29050: PUSH
29051: LD_INT 3
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: ST_TO_ADDR
29063: GO 29194
29065: LD_INT 1
29067: DOUBLE
29068: EQUAL
29069: IFTRUE 29073
29071: GO 29135
29073: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29074: LD_ADDR_VAR 0 3
29078: PUSH
29079: LD_INT 11
29081: PUSH
29082: LD_INT 12
29084: PUSH
29085: LD_INT 13
29087: PUSH
29088: LD_INT 14
29090: PUSH
29091: LD_INT 1
29093: PUSH
29094: LD_INT 2
29096: PUSH
29097: LD_INT 3
29099: PUSH
29100: LD_INT 4
29102: PUSH
29103: LD_INT 5
29105: PUSH
29106: LD_INT 21
29108: PUSH
29109: LD_INT 23
29111: PUSH
29112: LD_INT 22
29114: PUSH
29115: LD_INT 24
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: ST_TO_ADDR
29133: GO 29194
29135: LD_INT 3
29137: DOUBLE
29138: EQUAL
29139: IFTRUE 29143
29141: GO 29193
29143: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29144: LD_ADDR_VAR 0 3
29148: PUSH
29149: LD_INT 13
29151: PUSH
29152: LD_INT 14
29154: PUSH
29155: LD_INT 2
29157: PUSH
29158: LD_INT 3
29160: PUSH
29161: LD_INT 4
29163: PUSH
29164: LD_INT 5
29166: PUSH
29167: LD_INT 21
29169: PUSH
29170: LD_INT 22
29172: PUSH
29173: LD_INT 23
29175: PUSH
29176: LD_INT 24
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: ST_TO_ADDR
29191: GO 29194
29193: POP
// result := ( chassis in result ) ;
29194: LD_ADDR_VAR 0 3
29198: PUSH
29199: LD_VAR 0 1
29203: PUSH
29204: LD_VAR 0 3
29208: IN
29209: ST_TO_ADDR
// end ;
29210: LD_VAR 0 3
29214: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29215: LD_INT 0
29217: PPUSH
// if not chassis or not weapon then
29218: LD_VAR 0 1
29222: NOT
29223: PUSH
29224: LD_VAR 0 2
29228: NOT
29229: OR
29230: IFFALSE 29234
// exit ;
29232: GO 30294
// case weapon of us_machine_gun :
29234: LD_VAR 0 2
29238: PUSH
29239: LD_INT 2
29241: DOUBLE
29242: EQUAL
29243: IFTRUE 29247
29245: GO 29277
29247: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29248: LD_ADDR_VAR 0 3
29252: PUSH
29253: LD_INT 1
29255: PUSH
29256: LD_INT 2
29258: PUSH
29259: LD_INT 3
29261: PUSH
29262: LD_INT 4
29264: PUSH
29265: LD_INT 5
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: ST_TO_ADDR
29275: GO 30278
29277: LD_INT 3
29279: DOUBLE
29280: EQUAL
29281: IFTRUE 29285
29283: GO 29315
29285: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29286: LD_ADDR_VAR 0 3
29290: PUSH
29291: LD_INT 1
29293: PUSH
29294: LD_INT 2
29296: PUSH
29297: LD_INT 3
29299: PUSH
29300: LD_INT 4
29302: PUSH
29303: LD_INT 5
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: ST_TO_ADDR
29313: GO 30278
29315: LD_INT 11
29317: DOUBLE
29318: EQUAL
29319: IFTRUE 29323
29321: GO 29353
29323: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29324: LD_ADDR_VAR 0 3
29328: PUSH
29329: LD_INT 1
29331: PUSH
29332: LD_INT 2
29334: PUSH
29335: LD_INT 3
29337: PUSH
29338: LD_INT 4
29340: PUSH
29341: LD_INT 5
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: ST_TO_ADDR
29351: GO 30278
29353: LD_INT 4
29355: DOUBLE
29356: EQUAL
29357: IFTRUE 29361
29359: GO 29387
29361: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29362: LD_ADDR_VAR 0 3
29366: PUSH
29367: LD_INT 2
29369: PUSH
29370: LD_INT 3
29372: PUSH
29373: LD_INT 4
29375: PUSH
29376: LD_INT 5
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: ST_TO_ADDR
29385: GO 30278
29387: LD_INT 5
29389: DOUBLE
29390: EQUAL
29391: IFTRUE 29395
29393: GO 29421
29395: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29396: LD_ADDR_VAR 0 3
29400: PUSH
29401: LD_INT 2
29403: PUSH
29404: LD_INT 3
29406: PUSH
29407: LD_INT 4
29409: PUSH
29410: LD_INT 5
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: ST_TO_ADDR
29419: GO 30278
29421: LD_INT 9
29423: DOUBLE
29424: EQUAL
29425: IFTRUE 29429
29427: GO 29455
29429: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29430: LD_ADDR_VAR 0 3
29434: PUSH
29435: LD_INT 2
29437: PUSH
29438: LD_INT 3
29440: PUSH
29441: LD_INT 4
29443: PUSH
29444: LD_INT 5
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: ST_TO_ADDR
29453: GO 30278
29455: LD_INT 7
29457: DOUBLE
29458: EQUAL
29459: IFTRUE 29463
29461: GO 29489
29463: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29464: LD_ADDR_VAR 0 3
29468: PUSH
29469: LD_INT 2
29471: PUSH
29472: LD_INT 3
29474: PUSH
29475: LD_INT 4
29477: PUSH
29478: LD_INT 5
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: ST_TO_ADDR
29487: GO 30278
29489: LD_INT 12
29491: DOUBLE
29492: EQUAL
29493: IFTRUE 29497
29495: GO 29523
29497: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29498: LD_ADDR_VAR 0 3
29502: PUSH
29503: LD_INT 2
29505: PUSH
29506: LD_INT 3
29508: PUSH
29509: LD_INT 4
29511: PUSH
29512: LD_INT 5
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: ST_TO_ADDR
29521: GO 30278
29523: LD_INT 13
29525: DOUBLE
29526: EQUAL
29527: IFTRUE 29531
29529: GO 29557
29531: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29532: LD_ADDR_VAR 0 3
29536: PUSH
29537: LD_INT 2
29539: PUSH
29540: LD_INT 3
29542: PUSH
29543: LD_INT 4
29545: PUSH
29546: LD_INT 5
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: ST_TO_ADDR
29555: GO 30278
29557: LD_INT 14
29559: DOUBLE
29560: EQUAL
29561: IFTRUE 29565
29563: GO 29583
29565: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29566: LD_ADDR_VAR 0 3
29570: PUSH
29571: LD_INT 4
29573: PUSH
29574: LD_INT 5
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: ST_TO_ADDR
29581: GO 30278
29583: LD_INT 6
29585: DOUBLE
29586: EQUAL
29587: IFTRUE 29591
29589: GO 29609
29591: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29592: LD_ADDR_VAR 0 3
29596: PUSH
29597: LD_INT 4
29599: PUSH
29600: LD_INT 5
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: ST_TO_ADDR
29607: GO 30278
29609: LD_INT 10
29611: DOUBLE
29612: EQUAL
29613: IFTRUE 29617
29615: GO 29635
29617: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29618: LD_ADDR_VAR 0 3
29622: PUSH
29623: LD_INT 4
29625: PUSH
29626: LD_INT 5
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: ST_TO_ADDR
29633: GO 30278
29635: LD_INT 22
29637: DOUBLE
29638: EQUAL
29639: IFTRUE 29643
29641: GO 29669
29643: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29644: LD_ADDR_VAR 0 3
29648: PUSH
29649: LD_INT 11
29651: PUSH
29652: LD_INT 12
29654: PUSH
29655: LD_INT 13
29657: PUSH
29658: LD_INT 14
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: ST_TO_ADDR
29667: GO 30278
29669: LD_INT 23
29671: DOUBLE
29672: EQUAL
29673: IFTRUE 29677
29675: GO 29703
29677: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29678: LD_ADDR_VAR 0 3
29682: PUSH
29683: LD_INT 11
29685: PUSH
29686: LD_INT 12
29688: PUSH
29689: LD_INT 13
29691: PUSH
29692: LD_INT 14
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: LIST
29699: LIST
29700: ST_TO_ADDR
29701: GO 30278
29703: LD_INT 24
29705: DOUBLE
29706: EQUAL
29707: IFTRUE 29711
29709: GO 29737
29711: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29712: LD_ADDR_VAR 0 3
29716: PUSH
29717: LD_INT 11
29719: PUSH
29720: LD_INT 12
29722: PUSH
29723: LD_INT 13
29725: PUSH
29726: LD_INT 14
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: LIST
29733: LIST
29734: ST_TO_ADDR
29735: GO 30278
29737: LD_INT 30
29739: DOUBLE
29740: EQUAL
29741: IFTRUE 29745
29743: GO 29771
29745: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29746: LD_ADDR_VAR 0 3
29750: PUSH
29751: LD_INT 11
29753: PUSH
29754: LD_INT 12
29756: PUSH
29757: LD_INT 13
29759: PUSH
29760: LD_INT 14
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: LIST
29767: LIST
29768: ST_TO_ADDR
29769: GO 30278
29771: LD_INT 25
29773: DOUBLE
29774: EQUAL
29775: IFTRUE 29779
29777: GO 29797
29779: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29780: LD_ADDR_VAR 0 3
29784: PUSH
29785: LD_INT 13
29787: PUSH
29788: LD_INT 14
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: ST_TO_ADDR
29795: GO 30278
29797: LD_INT 27
29799: DOUBLE
29800: EQUAL
29801: IFTRUE 29805
29803: GO 29823
29805: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29806: LD_ADDR_VAR 0 3
29810: PUSH
29811: LD_INT 13
29813: PUSH
29814: LD_INT 14
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: ST_TO_ADDR
29821: GO 30278
29823: LD_INT 92
29825: DOUBLE
29826: EQUAL
29827: IFTRUE 29831
29829: GO 29857
29831: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29832: LD_ADDR_VAR 0 3
29836: PUSH
29837: LD_INT 11
29839: PUSH
29840: LD_INT 12
29842: PUSH
29843: LD_INT 13
29845: PUSH
29846: LD_INT 14
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: ST_TO_ADDR
29855: GO 30278
29857: LD_INT 28
29859: DOUBLE
29860: EQUAL
29861: IFTRUE 29865
29863: GO 29883
29865: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29866: LD_ADDR_VAR 0 3
29870: PUSH
29871: LD_INT 13
29873: PUSH
29874: LD_INT 14
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: ST_TO_ADDR
29881: GO 30278
29883: LD_INT 29
29885: DOUBLE
29886: EQUAL
29887: IFTRUE 29891
29889: GO 29909
29891: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29892: LD_ADDR_VAR 0 3
29896: PUSH
29897: LD_INT 13
29899: PUSH
29900: LD_INT 14
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: ST_TO_ADDR
29907: GO 30278
29909: LD_INT 31
29911: DOUBLE
29912: EQUAL
29913: IFTRUE 29917
29915: GO 29935
29917: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29918: LD_ADDR_VAR 0 3
29922: PUSH
29923: LD_INT 13
29925: PUSH
29926: LD_INT 14
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: ST_TO_ADDR
29933: GO 30278
29935: LD_INT 26
29937: DOUBLE
29938: EQUAL
29939: IFTRUE 29943
29941: GO 29961
29943: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29944: LD_ADDR_VAR 0 3
29948: PUSH
29949: LD_INT 13
29951: PUSH
29952: LD_INT 14
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: ST_TO_ADDR
29959: GO 30278
29961: LD_INT 42
29963: DOUBLE
29964: EQUAL
29965: IFTRUE 29969
29967: GO 29995
29969: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29970: LD_ADDR_VAR 0 3
29974: PUSH
29975: LD_INT 21
29977: PUSH
29978: LD_INT 22
29980: PUSH
29981: LD_INT 23
29983: PUSH
29984: LD_INT 24
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: ST_TO_ADDR
29993: GO 30278
29995: LD_INT 43
29997: DOUBLE
29998: EQUAL
29999: IFTRUE 30003
30001: GO 30029
30003: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30004: LD_ADDR_VAR 0 3
30008: PUSH
30009: LD_INT 21
30011: PUSH
30012: LD_INT 22
30014: PUSH
30015: LD_INT 23
30017: PUSH
30018: LD_INT 24
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: ST_TO_ADDR
30027: GO 30278
30029: LD_INT 44
30031: DOUBLE
30032: EQUAL
30033: IFTRUE 30037
30035: GO 30063
30037: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30038: LD_ADDR_VAR 0 3
30042: PUSH
30043: LD_INT 21
30045: PUSH
30046: LD_INT 22
30048: PUSH
30049: LD_INT 23
30051: PUSH
30052: LD_INT 24
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: ST_TO_ADDR
30061: GO 30278
30063: LD_INT 45
30065: DOUBLE
30066: EQUAL
30067: IFTRUE 30071
30069: GO 30097
30071: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30072: LD_ADDR_VAR 0 3
30076: PUSH
30077: LD_INT 21
30079: PUSH
30080: LD_INT 22
30082: PUSH
30083: LD_INT 23
30085: PUSH
30086: LD_INT 24
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: ST_TO_ADDR
30095: GO 30278
30097: LD_INT 49
30099: DOUBLE
30100: EQUAL
30101: IFTRUE 30105
30103: GO 30131
30105: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30106: LD_ADDR_VAR 0 3
30110: PUSH
30111: LD_INT 21
30113: PUSH
30114: LD_INT 22
30116: PUSH
30117: LD_INT 23
30119: PUSH
30120: LD_INT 24
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: ST_TO_ADDR
30129: GO 30278
30131: LD_INT 51
30133: DOUBLE
30134: EQUAL
30135: IFTRUE 30139
30137: GO 30165
30139: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30140: LD_ADDR_VAR 0 3
30144: PUSH
30145: LD_INT 21
30147: PUSH
30148: LD_INT 22
30150: PUSH
30151: LD_INT 23
30153: PUSH
30154: LD_INT 24
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: ST_TO_ADDR
30163: GO 30278
30165: LD_INT 52
30167: DOUBLE
30168: EQUAL
30169: IFTRUE 30173
30171: GO 30199
30173: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30174: LD_ADDR_VAR 0 3
30178: PUSH
30179: LD_INT 21
30181: PUSH
30182: LD_INT 22
30184: PUSH
30185: LD_INT 23
30187: PUSH
30188: LD_INT 24
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: ST_TO_ADDR
30197: GO 30278
30199: LD_INT 53
30201: DOUBLE
30202: EQUAL
30203: IFTRUE 30207
30205: GO 30225
30207: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30208: LD_ADDR_VAR 0 3
30212: PUSH
30213: LD_INT 23
30215: PUSH
30216: LD_INT 24
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: ST_TO_ADDR
30223: GO 30278
30225: LD_INT 46
30227: DOUBLE
30228: EQUAL
30229: IFTRUE 30233
30231: GO 30251
30233: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30234: LD_ADDR_VAR 0 3
30238: PUSH
30239: LD_INT 23
30241: PUSH
30242: LD_INT 24
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: ST_TO_ADDR
30249: GO 30278
30251: LD_INT 47
30253: DOUBLE
30254: EQUAL
30255: IFTRUE 30259
30257: GO 30277
30259: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30260: LD_ADDR_VAR 0 3
30264: PUSH
30265: LD_INT 23
30267: PUSH
30268: LD_INT 24
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: ST_TO_ADDR
30275: GO 30278
30277: POP
// result := ( chassis in result ) ;
30278: LD_ADDR_VAR 0 3
30282: PUSH
30283: LD_VAR 0 1
30287: PUSH
30288: LD_VAR 0 3
30292: IN
30293: ST_TO_ADDR
// end ;
30294: LD_VAR 0 3
30298: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30299: LD_INT 0
30301: PPUSH
30302: PPUSH
30303: PPUSH
30304: PPUSH
30305: PPUSH
30306: PPUSH
30307: PPUSH
// result := array ;
30308: LD_ADDR_VAR 0 5
30312: PUSH
30313: LD_VAR 0 1
30317: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30318: LD_VAR 0 1
30322: NOT
30323: PUSH
30324: LD_VAR 0 2
30328: NOT
30329: OR
30330: PUSH
30331: LD_VAR 0 3
30335: NOT
30336: OR
30337: PUSH
30338: LD_VAR 0 2
30342: PUSH
30343: LD_VAR 0 1
30347: GREATER
30348: OR
30349: PUSH
30350: LD_VAR 0 3
30354: PUSH
30355: LD_VAR 0 1
30359: GREATER
30360: OR
30361: IFFALSE 30365
// exit ;
30363: GO 30661
// if direction then
30365: LD_VAR 0 4
30369: IFFALSE 30433
// begin d := 1 ;
30371: LD_ADDR_VAR 0 9
30375: PUSH
30376: LD_INT 1
30378: ST_TO_ADDR
// if i_from > i_to then
30379: LD_VAR 0 2
30383: PUSH
30384: LD_VAR 0 3
30388: GREATER
30389: IFFALSE 30415
// length := ( array - i_from ) + i_to else
30391: LD_ADDR_VAR 0 11
30395: PUSH
30396: LD_VAR 0 1
30400: PUSH
30401: LD_VAR 0 2
30405: MINUS
30406: PUSH
30407: LD_VAR 0 3
30411: PLUS
30412: ST_TO_ADDR
30413: GO 30431
// length := i_to - i_from ;
30415: LD_ADDR_VAR 0 11
30419: PUSH
30420: LD_VAR 0 3
30424: PUSH
30425: LD_VAR 0 2
30429: MINUS
30430: ST_TO_ADDR
// end else
30431: GO 30494
// begin d := - 1 ;
30433: LD_ADDR_VAR 0 9
30437: PUSH
30438: LD_INT 1
30440: NEG
30441: ST_TO_ADDR
// if i_from > i_to then
30442: LD_VAR 0 2
30446: PUSH
30447: LD_VAR 0 3
30451: GREATER
30452: IFFALSE 30472
// length := i_from - i_to else
30454: LD_ADDR_VAR 0 11
30458: PUSH
30459: LD_VAR 0 2
30463: PUSH
30464: LD_VAR 0 3
30468: MINUS
30469: ST_TO_ADDR
30470: GO 30494
// length := ( array - i_to ) + i_from ;
30472: LD_ADDR_VAR 0 11
30476: PUSH
30477: LD_VAR 0 1
30481: PUSH
30482: LD_VAR 0 3
30486: MINUS
30487: PUSH
30488: LD_VAR 0 2
30492: PLUS
30493: ST_TO_ADDR
// end ; if not length then
30494: LD_VAR 0 11
30498: NOT
30499: IFFALSE 30503
// exit ;
30501: GO 30661
// tmp := array ;
30503: LD_ADDR_VAR 0 10
30507: PUSH
30508: LD_VAR 0 1
30512: ST_TO_ADDR
// for i = 1 to length do
30513: LD_ADDR_VAR 0 6
30517: PUSH
30518: DOUBLE
30519: LD_INT 1
30521: DEC
30522: ST_TO_ADDR
30523: LD_VAR 0 11
30527: PUSH
30528: FOR_TO
30529: IFFALSE 30649
// begin for j = 1 to array do
30531: LD_ADDR_VAR 0 7
30535: PUSH
30536: DOUBLE
30537: LD_INT 1
30539: DEC
30540: ST_TO_ADDR
30541: LD_VAR 0 1
30545: PUSH
30546: FOR_TO
30547: IFFALSE 30635
// begin k := j + d ;
30549: LD_ADDR_VAR 0 8
30553: PUSH
30554: LD_VAR 0 7
30558: PUSH
30559: LD_VAR 0 9
30563: PLUS
30564: ST_TO_ADDR
// if k > array then
30565: LD_VAR 0 8
30569: PUSH
30570: LD_VAR 0 1
30574: GREATER
30575: IFFALSE 30585
// k := 1 ;
30577: LD_ADDR_VAR 0 8
30581: PUSH
30582: LD_INT 1
30584: ST_TO_ADDR
// if not k then
30585: LD_VAR 0 8
30589: NOT
30590: IFFALSE 30602
// k := array ;
30592: LD_ADDR_VAR 0 8
30596: PUSH
30597: LD_VAR 0 1
30601: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30602: LD_ADDR_VAR 0 10
30606: PUSH
30607: LD_VAR 0 10
30611: PPUSH
30612: LD_VAR 0 8
30616: PPUSH
30617: LD_VAR 0 1
30621: PUSH
30622: LD_VAR 0 7
30626: ARRAY
30627: PPUSH
30628: CALL_OW 1
30632: ST_TO_ADDR
// end ;
30633: GO 30546
30635: POP
30636: POP
// array := tmp ;
30637: LD_ADDR_VAR 0 1
30641: PUSH
30642: LD_VAR 0 10
30646: ST_TO_ADDR
// end ;
30647: GO 30528
30649: POP
30650: POP
// result := array ;
30651: LD_ADDR_VAR 0 5
30655: PUSH
30656: LD_VAR 0 1
30660: ST_TO_ADDR
// end ;
30661: LD_VAR 0 5
30665: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30666: LD_INT 0
30668: PPUSH
30669: PPUSH
// result := 0 ;
30670: LD_ADDR_VAR 0 3
30674: PUSH
30675: LD_INT 0
30677: ST_TO_ADDR
// if not array or not value in array then
30678: LD_VAR 0 1
30682: NOT
30683: PUSH
30684: LD_VAR 0 2
30688: PUSH
30689: LD_VAR 0 1
30693: IN
30694: NOT
30695: OR
30696: IFFALSE 30700
// exit ;
30698: GO 30754
// for i = 1 to array do
30700: LD_ADDR_VAR 0 4
30704: PUSH
30705: DOUBLE
30706: LD_INT 1
30708: DEC
30709: ST_TO_ADDR
30710: LD_VAR 0 1
30714: PUSH
30715: FOR_TO
30716: IFFALSE 30752
// if value = array [ i ] then
30718: LD_VAR 0 2
30722: PUSH
30723: LD_VAR 0 1
30727: PUSH
30728: LD_VAR 0 4
30732: ARRAY
30733: EQUAL
30734: IFFALSE 30750
// begin result := i ;
30736: LD_ADDR_VAR 0 3
30740: PUSH
30741: LD_VAR 0 4
30745: ST_TO_ADDR
// exit ;
30746: POP
30747: POP
30748: GO 30754
// end ;
30750: GO 30715
30752: POP
30753: POP
// end ;
30754: LD_VAR 0 3
30758: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30759: LD_INT 0
30761: PPUSH
// vc_chassis := chassis ;
30762: LD_ADDR_OWVAR 37
30766: PUSH
30767: LD_VAR 0 1
30771: ST_TO_ADDR
// vc_engine := engine ;
30772: LD_ADDR_OWVAR 39
30776: PUSH
30777: LD_VAR 0 2
30781: ST_TO_ADDR
// vc_control := control ;
30782: LD_ADDR_OWVAR 38
30786: PUSH
30787: LD_VAR 0 3
30791: ST_TO_ADDR
// vc_weapon := weapon ;
30792: LD_ADDR_OWVAR 40
30796: PUSH
30797: LD_VAR 0 4
30801: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30802: LD_ADDR_OWVAR 41
30806: PUSH
30807: LD_VAR 0 5
30811: ST_TO_ADDR
// end ;
30812: LD_VAR 0 6
30816: RET
// export function WantPlant ( unit ) ; var task ; begin
30817: LD_INT 0
30819: PPUSH
30820: PPUSH
// result := false ;
30821: LD_ADDR_VAR 0 2
30825: PUSH
30826: LD_INT 0
30828: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30829: LD_ADDR_VAR 0 3
30833: PUSH
30834: LD_VAR 0 1
30838: PPUSH
30839: CALL_OW 437
30843: ST_TO_ADDR
// if task then
30844: LD_VAR 0 3
30848: IFFALSE 30876
// if task [ 1 ] [ 1 ] = p then
30850: LD_VAR 0 3
30854: PUSH
30855: LD_INT 1
30857: ARRAY
30858: PUSH
30859: LD_INT 1
30861: ARRAY
30862: PUSH
30863: LD_STRING p
30865: EQUAL
30866: IFFALSE 30876
// result := true ;
30868: LD_ADDR_VAR 0 2
30872: PUSH
30873: LD_INT 1
30875: ST_TO_ADDR
// end ;
30876: LD_VAR 0 2
30880: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30881: LD_INT 0
30883: PPUSH
30884: PPUSH
30885: PPUSH
30886: PPUSH
// if pos < 1 then
30887: LD_VAR 0 2
30891: PUSH
30892: LD_INT 1
30894: LESS
30895: IFFALSE 30899
// exit ;
30897: GO 31202
// if pos = 1 then
30899: LD_VAR 0 2
30903: PUSH
30904: LD_INT 1
30906: EQUAL
30907: IFFALSE 30940
// result := Replace ( arr , pos [ 1 ] , value ) else
30909: LD_ADDR_VAR 0 4
30913: PUSH
30914: LD_VAR 0 1
30918: PPUSH
30919: LD_VAR 0 2
30923: PUSH
30924: LD_INT 1
30926: ARRAY
30927: PPUSH
30928: LD_VAR 0 3
30932: PPUSH
30933: CALL_OW 1
30937: ST_TO_ADDR
30938: GO 31202
// begin tmp := arr ;
30940: LD_ADDR_VAR 0 6
30944: PUSH
30945: LD_VAR 0 1
30949: ST_TO_ADDR
// s_arr := [ tmp ] ;
30950: LD_ADDR_VAR 0 7
30954: PUSH
30955: LD_VAR 0 6
30959: PUSH
30960: EMPTY
30961: LIST
30962: ST_TO_ADDR
// for i = 1 to pos - 1 do
30963: LD_ADDR_VAR 0 5
30967: PUSH
30968: DOUBLE
30969: LD_INT 1
30971: DEC
30972: ST_TO_ADDR
30973: LD_VAR 0 2
30977: PUSH
30978: LD_INT 1
30980: MINUS
30981: PUSH
30982: FOR_TO
30983: IFFALSE 31028
// begin tmp := tmp [ pos [ i ] ] ;
30985: LD_ADDR_VAR 0 6
30989: PUSH
30990: LD_VAR 0 6
30994: PUSH
30995: LD_VAR 0 2
30999: PUSH
31000: LD_VAR 0 5
31004: ARRAY
31005: ARRAY
31006: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31007: LD_ADDR_VAR 0 7
31011: PUSH
31012: LD_VAR 0 7
31016: PUSH
31017: LD_VAR 0 6
31021: PUSH
31022: EMPTY
31023: LIST
31024: ADD
31025: ST_TO_ADDR
// end ;
31026: GO 30982
31028: POP
31029: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31030: LD_ADDR_VAR 0 6
31034: PUSH
31035: LD_VAR 0 6
31039: PPUSH
31040: LD_VAR 0 2
31044: PUSH
31045: LD_VAR 0 2
31049: ARRAY
31050: PPUSH
31051: LD_VAR 0 3
31055: PPUSH
31056: CALL_OW 1
31060: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31061: LD_ADDR_VAR 0 7
31065: PUSH
31066: LD_VAR 0 7
31070: PPUSH
31071: LD_VAR 0 7
31075: PPUSH
31076: LD_VAR 0 6
31080: PPUSH
31081: CALL_OW 1
31085: ST_TO_ADDR
// for i = s_arr downto 2 do
31086: LD_ADDR_VAR 0 5
31090: PUSH
31091: DOUBLE
31092: LD_VAR 0 7
31096: INC
31097: ST_TO_ADDR
31098: LD_INT 2
31100: PUSH
31101: FOR_DOWNTO
31102: IFFALSE 31186
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31104: LD_ADDR_VAR 0 6
31108: PUSH
31109: LD_VAR 0 7
31113: PUSH
31114: LD_VAR 0 5
31118: PUSH
31119: LD_INT 1
31121: MINUS
31122: ARRAY
31123: PPUSH
31124: LD_VAR 0 2
31128: PUSH
31129: LD_VAR 0 5
31133: PUSH
31134: LD_INT 1
31136: MINUS
31137: ARRAY
31138: PPUSH
31139: LD_VAR 0 7
31143: PUSH
31144: LD_VAR 0 5
31148: ARRAY
31149: PPUSH
31150: CALL_OW 1
31154: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31155: LD_ADDR_VAR 0 7
31159: PUSH
31160: LD_VAR 0 7
31164: PPUSH
31165: LD_VAR 0 5
31169: PUSH
31170: LD_INT 1
31172: MINUS
31173: PPUSH
31174: LD_VAR 0 6
31178: PPUSH
31179: CALL_OW 1
31183: ST_TO_ADDR
// end ;
31184: GO 31101
31186: POP
31187: POP
// result := s_arr [ 1 ] ;
31188: LD_ADDR_VAR 0 4
31192: PUSH
31193: LD_VAR 0 7
31197: PUSH
31198: LD_INT 1
31200: ARRAY
31201: ST_TO_ADDR
// end ; end ;
31202: LD_VAR 0 4
31206: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31207: LD_INT 0
31209: PPUSH
31210: PPUSH
// if not list then
31211: LD_VAR 0 1
31215: NOT
31216: IFFALSE 31220
// exit ;
31218: GO 31311
// i := list [ pos1 ] ;
31220: LD_ADDR_VAR 0 5
31224: PUSH
31225: LD_VAR 0 1
31229: PUSH
31230: LD_VAR 0 2
31234: ARRAY
31235: ST_TO_ADDR
// if not i then
31236: LD_VAR 0 5
31240: NOT
31241: IFFALSE 31245
// exit ;
31243: GO 31311
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31245: LD_ADDR_VAR 0 1
31249: PUSH
31250: LD_VAR 0 1
31254: PPUSH
31255: LD_VAR 0 2
31259: PPUSH
31260: LD_VAR 0 1
31264: PUSH
31265: LD_VAR 0 3
31269: ARRAY
31270: PPUSH
31271: CALL_OW 1
31275: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31276: LD_ADDR_VAR 0 1
31280: PUSH
31281: LD_VAR 0 1
31285: PPUSH
31286: LD_VAR 0 3
31290: PPUSH
31291: LD_VAR 0 5
31295: PPUSH
31296: CALL_OW 1
31300: ST_TO_ADDR
// result := list ;
31301: LD_ADDR_VAR 0 4
31305: PUSH
31306: LD_VAR 0 1
31310: ST_TO_ADDR
// end ;
31311: LD_VAR 0 4
31315: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31316: LD_INT 0
31318: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31319: LD_ADDR_VAR 0 5
31323: PUSH
31324: LD_VAR 0 1
31328: PPUSH
31329: CALL_OW 250
31333: PPUSH
31334: LD_VAR 0 1
31338: PPUSH
31339: CALL_OW 251
31343: PPUSH
31344: LD_VAR 0 2
31348: PPUSH
31349: LD_VAR 0 3
31353: PPUSH
31354: LD_VAR 0 4
31358: PPUSH
31359: CALL 31369 0 5
31363: ST_TO_ADDR
// end ;
31364: LD_VAR 0 5
31368: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31369: LD_INT 0
31371: PPUSH
31372: PPUSH
31373: PPUSH
31374: PPUSH
// if not list then
31375: LD_VAR 0 3
31379: NOT
31380: IFFALSE 31384
// exit ;
31382: GO 31772
// result := [ ] ;
31384: LD_ADDR_VAR 0 6
31388: PUSH
31389: EMPTY
31390: ST_TO_ADDR
// for i in list do
31391: LD_ADDR_VAR 0 7
31395: PUSH
31396: LD_VAR 0 3
31400: PUSH
31401: FOR_IN
31402: IFFALSE 31604
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31404: LD_ADDR_VAR 0 9
31408: PUSH
31409: LD_VAR 0 7
31413: PPUSH
31414: LD_VAR 0 1
31418: PPUSH
31419: LD_VAR 0 2
31423: PPUSH
31424: CALL_OW 297
31428: ST_TO_ADDR
// if not result then
31429: LD_VAR 0 6
31433: NOT
31434: IFFALSE 31460
// result := [ [ i , tmp ] ] else
31436: LD_ADDR_VAR 0 6
31440: PUSH
31441: LD_VAR 0 7
31445: PUSH
31446: LD_VAR 0 9
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: EMPTY
31456: LIST
31457: ST_TO_ADDR
31458: GO 31602
// begin if result [ result ] [ 2 ] < tmp then
31460: LD_VAR 0 6
31464: PUSH
31465: LD_VAR 0 6
31469: ARRAY
31470: PUSH
31471: LD_INT 2
31473: ARRAY
31474: PUSH
31475: LD_VAR 0 9
31479: LESS
31480: IFFALSE 31522
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31482: LD_ADDR_VAR 0 6
31486: PUSH
31487: LD_VAR 0 6
31491: PPUSH
31492: LD_VAR 0 6
31496: PUSH
31497: LD_INT 1
31499: PLUS
31500: PPUSH
31501: LD_VAR 0 7
31505: PUSH
31506: LD_VAR 0 9
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PPUSH
31515: CALL_OW 2
31519: ST_TO_ADDR
31520: GO 31602
// for j = 1 to result do
31522: LD_ADDR_VAR 0 8
31526: PUSH
31527: DOUBLE
31528: LD_INT 1
31530: DEC
31531: ST_TO_ADDR
31532: LD_VAR 0 6
31536: PUSH
31537: FOR_TO
31538: IFFALSE 31600
// begin if tmp < result [ j ] [ 2 ] then
31540: LD_VAR 0 9
31544: PUSH
31545: LD_VAR 0 6
31549: PUSH
31550: LD_VAR 0 8
31554: ARRAY
31555: PUSH
31556: LD_INT 2
31558: ARRAY
31559: LESS
31560: IFFALSE 31598
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31562: LD_ADDR_VAR 0 6
31566: PUSH
31567: LD_VAR 0 6
31571: PPUSH
31572: LD_VAR 0 8
31576: PPUSH
31577: LD_VAR 0 7
31581: PUSH
31582: LD_VAR 0 9
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PPUSH
31591: CALL_OW 2
31595: ST_TO_ADDR
// break ;
31596: GO 31600
// end ; end ;
31598: GO 31537
31600: POP
31601: POP
// end ; end ;
31602: GO 31401
31604: POP
31605: POP
// if result and not asc then
31606: LD_VAR 0 6
31610: PUSH
31611: LD_VAR 0 4
31615: NOT
31616: AND
31617: IFFALSE 31692
// begin tmp := result ;
31619: LD_ADDR_VAR 0 9
31623: PUSH
31624: LD_VAR 0 6
31628: ST_TO_ADDR
// for i = tmp downto 1 do
31629: LD_ADDR_VAR 0 7
31633: PUSH
31634: DOUBLE
31635: LD_VAR 0 9
31639: INC
31640: ST_TO_ADDR
31641: LD_INT 1
31643: PUSH
31644: FOR_DOWNTO
31645: IFFALSE 31690
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31647: LD_ADDR_VAR 0 6
31651: PUSH
31652: LD_VAR 0 6
31656: PPUSH
31657: LD_VAR 0 9
31661: PUSH
31662: LD_VAR 0 7
31666: MINUS
31667: PUSH
31668: LD_INT 1
31670: PLUS
31671: PPUSH
31672: LD_VAR 0 9
31676: PUSH
31677: LD_VAR 0 7
31681: ARRAY
31682: PPUSH
31683: CALL_OW 1
31687: ST_TO_ADDR
31688: GO 31644
31690: POP
31691: POP
// end ; tmp := [ ] ;
31692: LD_ADDR_VAR 0 9
31696: PUSH
31697: EMPTY
31698: ST_TO_ADDR
// if mode then
31699: LD_VAR 0 5
31703: IFFALSE 31772
// begin for i = 1 to result do
31705: LD_ADDR_VAR 0 7
31709: PUSH
31710: DOUBLE
31711: LD_INT 1
31713: DEC
31714: ST_TO_ADDR
31715: LD_VAR 0 6
31719: PUSH
31720: FOR_TO
31721: IFFALSE 31760
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31723: LD_ADDR_VAR 0 9
31727: PUSH
31728: LD_VAR 0 9
31732: PPUSH
31733: LD_VAR 0 7
31737: PPUSH
31738: LD_VAR 0 6
31742: PUSH
31743: LD_VAR 0 7
31747: ARRAY
31748: PUSH
31749: LD_INT 1
31751: ARRAY
31752: PPUSH
31753: CALL_OW 1
31757: ST_TO_ADDR
31758: GO 31720
31760: POP
31761: POP
// result := tmp ;
31762: LD_ADDR_VAR 0 6
31766: PUSH
31767: LD_VAR 0 9
31771: ST_TO_ADDR
// end ; end ;
31772: LD_VAR 0 6
31776: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31777: LD_INT 0
31779: PPUSH
31780: PPUSH
31781: PPUSH
31782: PPUSH
31783: PPUSH
31784: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31785: LD_ADDR_VAR 0 5
31789: PUSH
31790: LD_INT 0
31792: PUSH
31793: LD_INT 0
31795: PUSH
31796: LD_INT 0
31798: PUSH
31799: EMPTY
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: ST_TO_ADDR
// if not x or not y then
31807: LD_VAR 0 2
31811: NOT
31812: PUSH
31813: LD_VAR 0 3
31817: NOT
31818: OR
31819: IFFALSE 31823
// exit ;
31821: GO 33473
// if not range then
31823: LD_VAR 0 4
31827: NOT
31828: IFFALSE 31838
// range := 10 ;
31830: LD_ADDR_VAR 0 4
31834: PUSH
31835: LD_INT 10
31837: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31838: LD_ADDR_VAR 0 8
31842: PUSH
31843: LD_INT 81
31845: PUSH
31846: LD_VAR 0 1
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 92
31857: PUSH
31858: LD_VAR 0 2
31862: PUSH
31863: LD_VAR 0 3
31867: PUSH
31868: LD_VAR 0 4
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 3
31881: PUSH
31882: LD_INT 21
31884: PUSH
31885: LD_INT 3
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: LIST
31900: PPUSH
31901: CALL_OW 69
31905: ST_TO_ADDR
// if not tmp then
31906: LD_VAR 0 8
31910: NOT
31911: IFFALSE 31915
// exit ;
31913: GO 33473
// for i in tmp do
31915: LD_ADDR_VAR 0 6
31919: PUSH
31920: LD_VAR 0 8
31924: PUSH
31925: FOR_IN
31926: IFFALSE 33448
// begin points := [ 0 , 0 , 0 ] ;
31928: LD_ADDR_VAR 0 9
31932: PUSH
31933: LD_INT 0
31935: PUSH
31936: LD_INT 0
31938: PUSH
31939: LD_INT 0
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: LIST
31946: ST_TO_ADDR
// bpoints := 1 ;
31947: LD_ADDR_VAR 0 10
31951: PUSH
31952: LD_INT 1
31954: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31955: LD_VAR 0 6
31959: PPUSH
31960: CALL_OW 247
31964: PUSH
31965: LD_INT 1
31967: DOUBLE
31968: EQUAL
31969: IFTRUE 31973
31971: GO 32551
31973: POP
// begin if GetClass ( i ) = 1 then
31974: LD_VAR 0 6
31978: PPUSH
31979: CALL_OW 257
31983: PUSH
31984: LD_INT 1
31986: EQUAL
31987: IFFALSE 32008
// points := [ 10 , 5 , 3 ] ;
31989: LD_ADDR_VAR 0 9
31993: PUSH
31994: LD_INT 10
31996: PUSH
31997: LD_INT 5
31999: PUSH
32000: LD_INT 3
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: LIST
32007: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32008: LD_VAR 0 6
32012: PPUSH
32013: CALL_OW 257
32017: PUSH
32018: LD_INT 2
32020: PUSH
32021: LD_INT 3
32023: PUSH
32024: LD_INT 4
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: LIST
32031: IN
32032: IFFALSE 32053
// points := [ 3 , 2 , 1 ] ;
32034: LD_ADDR_VAR 0 9
32038: PUSH
32039: LD_INT 3
32041: PUSH
32042: LD_INT 2
32044: PUSH
32045: LD_INT 1
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: LIST
32052: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32053: LD_VAR 0 6
32057: PPUSH
32058: CALL_OW 257
32062: PUSH
32063: LD_INT 5
32065: EQUAL
32066: IFFALSE 32087
// points := [ 130 , 5 , 2 ] ;
32068: LD_ADDR_VAR 0 9
32072: PUSH
32073: LD_INT 130
32075: PUSH
32076: LD_INT 5
32078: PUSH
32079: LD_INT 2
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: LIST
32086: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32087: LD_VAR 0 6
32091: PPUSH
32092: CALL_OW 257
32096: PUSH
32097: LD_INT 8
32099: EQUAL
32100: IFFALSE 32121
// points := [ 35 , 35 , 30 ] ;
32102: LD_ADDR_VAR 0 9
32106: PUSH
32107: LD_INT 35
32109: PUSH
32110: LD_INT 35
32112: PUSH
32113: LD_INT 30
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: LIST
32120: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32121: LD_VAR 0 6
32125: PPUSH
32126: CALL_OW 257
32130: PUSH
32131: LD_INT 9
32133: EQUAL
32134: IFFALSE 32155
// points := [ 20 , 55 , 40 ] ;
32136: LD_ADDR_VAR 0 9
32140: PUSH
32141: LD_INT 20
32143: PUSH
32144: LD_INT 55
32146: PUSH
32147: LD_INT 40
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: LIST
32154: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32155: LD_VAR 0 6
32159: PPUSH
32160: CALL_OW 257
32164: PUSH
32165: LD_INT 12
32167: PUSH
32168: LD_INT 16
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: IN
32175: IFFALSE 32196
// points := [ 5 , 3 , 2 ] ;
32177: LD_ADDR_VAR 0 9
32181: PUSH
32182: LD_INT 5
32184: PUSH
32185: LD_INT 3
32187: PUSH
32188: LD_INT 2
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: LIST
32195: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32196: LD_VAR 0 6
32200: PPUSH
32201: CALL_OW 257
32205: PUSH
32206: LD_INT 17
32208: EQUAL
32209: IFFALSE 32230
// points := [ 100 , 50 , 75 ] ;
32211: LD_ADDR_VAR 0 9
32215: PUSH
32216: LD_INT 100
32218: PUSH
32219: LD_INT 50
32221: PUSH
32222: LD_INT 75
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: LIST
32229: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32230: LD_VAR 0 6
32234: PPUSH
32235: CALL_OW 257
32239: PUSH
32240: LD_INT 15
32242: EQUAL
32243: IFFALSE 32264
// points := [ 10 , 5 , 3 ] ;
32245: LD_ADDR_VAR 0 9
32249: PUSH
32250: LD_INT 10
32252: PUSH
32253: LD_INT 5
32255: PUSH
32256: LD_INT 3
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: LIST
32263: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32264: LD_VAR 0 6
32268: PPUSH
32269: CALL_OW 257
32273: PUSH
32274: LD_INT 14
32276: EQUAL
32277: IFFALSE 32298
// points := [ 10 , 0 , 0 ] ;
32279: LD_ADDR_VAR 0 9
32283: PUSH
32284: LD_INT 10
32286: PUSH
32287: LD_INT 0
32289: PUSH
32290: LD_INT 0
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: LIST
32297: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32298: LD_VAR 0 6
32302: PPUSH
32303: CALL_OW 257
32307: PUSH
32308: LD_INT 11
32310: EQUAL
32311: IFFALSE 32332
// points := [ 30 , 10 , 5 ] ;
32313: LD_ADDR_VAR 0 9
32317: PUSH
32318: LD_INT 30
32320: PUSH
32321: LD_INT 10
32323: PUSH
32324: LD_INT 5
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: LIST
32331: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32332: LD_VAR 0 1
32336: PPUSH
32337: LD_INT 5
32339: PPUSH
32340: CALL_OW 321
32344: PUSH
32345: LD_INT 2
32347: EQUAL
32348: IFFALSE 32365
// bpoints := bpoints * 1.8 ;
32350: LD_ADDR_VAR 0 10
32354: PUSH
32355: LD_VAR 0 10
32359: PUSH
32360: LD_REAL  1.80000000000000E+0000
32363: MUL
32364: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32365: LD_VAR 0 6
32369: PPUSH
32370: CALL_OW 257
32374: PUSH
32375: LD_INT 1
32377: PUSH
32378: LD_INT 2
32380: PUSH
32381: LD_INT 3
32383: PUSH
32384: LD_INT 4
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: IN
32393: PUSH
32394: LD_VAR 0 1
32398: PPUSH
32399: LD_INT 51
32401: PPUSH
32402: CALL_OW 321
32406: PUSH
32407: LD_INT 2
32409: EQUAL
32410: AND
32411: IFFALSE 32428
// bpoints := bpoints * 1.2 ;
32413: LD_ADDR_VAR 0 10
32417: PUSH
32418: LD_VAR 0 10
32422: PUSH
32423: LD_REAL  1.20000000000000E+0000
32426: MUL
32427: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32428: LD_VAR 0 6
32432: PPUSH
32433: CALL_OW 257
32437: PUSH
32438: LD_INT 5
32440: PUSH
32441: LD_INT 7
32443: PUSH
32444: LD_INT 9
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: LIST
32451: IN
32452: PUSH
32453: LD_VAR 0 1
32457: PPUSH
32458: LD_INT 52
32460: PPUSH
32461: CALL_OW 321
32465: PUSH
32466: LD_INT 2
32468: EQUAL
32469: AND
32470: IFFALSE 32487
// bpoints := bpoints * 1.5 ;
32472: LD_ADDR_VAR 0 10
32476: PUSH
32477: LD_VAR 0 10
32481: PUSH
32482: LD_REAL  1.50000000000000E+0000
32485: MUL
32486: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32487: LD_VAR 0 1
32491: PPUSH
32492: LD_INT 66
32494: PPUSH
32495: CALL_OW 321
32499: PUSH
32500: LD_INT 2
32502: EQUAL
32503: IFFALSE 32520
// bpoints := bpoints * 1.1 ;
32505: LD_ADDR_VAR 0 10
32509: PUSH
32510: LD_VAR 0 10
32514: PUSH
32515: LD_REAL  1.10000000000000E+0000
32518: MUL
32519: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32520: LD_ADDR_VAR 0 10
32524: PUSH
32525: LD_VAR 0 10
32529: PUSH
32530: LD_VAR 0 6
32534: PPUSH
32535: LD_INT 1
32537: PPUSH
32538: CALL_OW 259
32542: PUSH
32543: LD_REAL  1.15000000000000E+0000
32546: MUL
32547: MUL
32548: ST_TO_ADDR
// end ; unit_vehicle :
32549: GO 33377
32551: LD_INT 2
32553: DOUBLE
32554: EQUAL
32555: IFTRUE 32559
32557: GO 33365
32559: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32560: LD_VAR 0 6
32564: PPUSH
32565: CALL_OW 264
32569: PUSH
32570: LD_INT 2
32572: PUSH
32573: LD_INT 42
32575: PUSH
32576: LD_INT 24
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: LIST
32583: IN
32584: IFFALSE 32605
// points := [ 25 , 5 , 3 ] ;
32586: LD_ADDR_VAR 0 9
32590: PUSH
32591: LD_INT 25
32593: PUSH
32594: LD_INT 5
32596: PUSH
32597: LD_INT 3
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: LIST
32604: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32605: LD_VAR 0 6
32609: PPUSH
32610: CALL_OW 264
32614: PUSH
32615: LD_INT 4
32617: PUSH
32618: LD_INT 43
32620: PUSH
32621: LD_INT 25
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: LIST
32628: IN
32629: IFFALSE 32650
// points := [ 40 , 15 , 5 ] ;
32631: LD_ADDR_VAR 0 9
32635: PUSH
32636: LD_INT 40
32638: PUSH
32639: LD_INT 15
32641: PUSH
32642: LD_INT 5
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: LIST
32649: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32650: LD_VAR 0 6
32654: PPUSH
32655: CALL_OW 264
32659: PUSH
32660: LD_INT 3
32662: PUSH
32663: LD_INT 23
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: IN
32670: IFFALSE 32691
// points := [ 7 , 25 , 8 ] ;
32672: LD_ADDR_VAR 0 9
32676: PUSH
32677: LD_INT 7
32679: PUSH
32680: LD_INT 25
32682: PUSH
32683: LD_INT 8
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: LIST
32690: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32691: LD_VAR 0 6
32695: PPUSH
32696: CALL_OW 264
32700: PUSH
32701: LD_INT 5
32703: PUSH
32704: LD_INT 27
32706: PUSH
32707: LD_INT 44
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: LIST
32714: IN
32715: IFFALSE 32736
// points := [ 14 , 50 , 16 ] ;
32717: LD_ADDR_VAR 0 9
32721: PUSH
32722: LD_INT 14
32724: PUSH
32725: LD_INT 50
32727: PUSH
32728: LD_INT 16
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: LIST
32735: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32736: LD_VAR 0 6
32740: PPUSH
32741: CALL_OW 264
32745: PUSH
32746: LD_INT 6
32748: PUSH
32749: LD_INT 46
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: IN
32756: IFFALSE 32777
// points := [ 32 , 120 , 70 ] ;
32758: LD_ADDR_VAR 0 9
32762: PUSH
32763: LD_INT 32
32765: PUSH
32766: LD_INT 120
32768: PUSH
32769: LD_INT 70
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: LIST
32776: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32777: LD_VAR 0 6
32781: PPUSH
32782: CALL_OW 264
32786: PUSH
32787: LD_INT 7
32789: PUSH
32790: LD_INT 28
32792: PUSH
32793: LD_INT 45
32795: PUSH
32796: LD_INT 92
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: IN
32805: IFFALSE 32826
// points := [ 35 , 20 , 45 ] ;
32807: LD_ADDR_VAR 0 9
32811: PUSH
32812: LD_INT 35
32814: PUSH
32815: LD_INT 20
32817: PUSH
32818: LD_INT 45
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: LIST
32825: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32826: LD_VAR 0 6
32830: PPUSH
32831: CALL_OW 264
32835: PUSH
32836: LD_INT 47
32838: PUSH
32839: EMPTY
32840: LIST
32841: IN
32842: IFFALSE 32863
// points := [ 67 , 45 , 75 ] ;
32844: LD_ADDR_VAR 0 9
32848: PUSH
32849: LD_INT 67
32851: PUSH
32852: LD_INT 45
32854: PUSH
32855: LD_INT 75
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: LIST
32862: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32863: LD_VAR 0 6
32867: PPUSH
32868: CALL_OW 264
32872: PUSH
32873: LD_INT 26
32875: PUSH
32876: EMPTY
32877: LIST
32878: IN
32879: IFFALSE 32900
// points := [ 120 , 30 , 80 ] ;
32881: LD_ADDR_VAR 0 9
32885: PUSH
32886: LD_INT 120
32888: PUSH
32889: LD_INT 30
32891: PUSH
32892: LD_INT 80
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: LIST
32899: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32900: LD_VAR 0 6
32904: PPUSH
32905: CALL_OW 264
32909: PUSH
32910: LD_INT 22
32912: PUSH
32913: EMPTY
32914: LIST
32915: IN
32916: IFFALSE 32937
// points := [ 40 , 1 , 1 ] ;
32918: LD_ADDR_VAR 0 9
32922: PUSH
32923: LD_INT 40
32925: PUSH
32926: LD_INT 1
32928: PUSH
32929: LD_INT 1
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: LIST
32936: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32937: LD_VAR 0 6
32941: PPUSH
32942: CALL_OW 264
32946: PUSH
32947: LD_INT 29
32949: PUSH
32950: EMPTY
32951: LIST
32952: IN
32953: IFFALSE 32974
// points := [ 70 , 200 , 400 ] ;
32955: LD_ADDR_VAR 0 9
32959: PUSH
32960: LD_INT 70
32962: PUSH
32963: LD_INT 200
32965: PUSH
32966: LD_INT 400
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: LIST
32973: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32974: LD_VAR 0 6
32978: PPUSH
32979: CALL_OW 264
32983: PUSH
32984: LD_INT 14
32986: PUSH
32987: LD_INT 53
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: IN
32994: IFFALSE 33015
// points := [ 40 , 10 , 20 ] ;
32996: LD_ADDR_VAR 0 9
33000: PUSH
33001: LD_INT 40
33003: PUSH
33004: LD_INT 10
33006: PUSH
33007: LD_INT 20
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: LIST
33014: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33015: LD_VAR 0 6
33019: PPUSH
33020: CALL_OW 264
33024: PUSH
33025: LD_INT 9
33027: PUSH
33028: EMPTY
33029: LIST
33030: IN
33031: IFFALSE 33052
// points := [ 5 , 70 , 20 ] ;
33033: LD_ADDR_VAR 0 9
33037: PUSH
33038: LD_INT 5
33040: PUSH
33041: LD_INT 70
33043: PUSH
33044: LD_INT 20
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: LIST
33051: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33052: LD_VAR 0 6
33056: PPUSH
33057: CALL_OW 264
33061: PUSH
33062: LD_INT 10
33064: PUSH
33065: EMPTY
33066: LIST
33067: IN
33068: IFFALSE 33089
// points := [ 35 , 110 , 70 ] ;
33070: LD_ADDR_VAR 0 9
33074: PUSH
33075: LD_INT 35
33077: PUSH
33078: LD_INT 110
33080: PUSH
33081: LD_INT 70
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: LIST
33088: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33089: LD_VAR 0 6
33093: PPUSH
33094: CALL_OW 265
33098: PUSH
33099: LD_INT 25
33101: EQUAL
33102: IFFALSE 33123
// points := [ 80 , 65 , 100 ] ;
33104: LD_ADDR_VAR 0 9
33108: PUSH
33109: LD_INT 80
33111: PUSH
33112: LD_INT 65
33114: PUSH
33115: LD_INT 100
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: LIST
33122: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33123: LD_VAR 0 6
33127: PPUSH
33128: CALL_OW 263
33132: PUSH
33133: LD_INT 1
33135: EQUAL
33136: IFFALSE 33171
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33138: LD_ADDR_VAR 0 10
33142: PUSH
33143: LD_VAR 0 10
33147: PUSH
33148: LD_VAR 0 6
33152: PPUSH
33153: CALL_OW 311
33157: PPUSH
33158: LD_INT 3
33160: PPUSH
33161: CALL_OW 259
33165: PUSH
33166: LD_INT 4
33168: MUL
33169: MUL
33170: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33171: LD_VAR 0 6
33175: PPUSH
33176: CALL_OW 263
33180: PUSH
33181: LD_INT 2
33183: EQUAL
33184: IFFALSE 33235
// begin j := IsControledBy ( i ) ;
33186: LD_ADDR_VAR 0 7
33190: PUSH
33191: LD_VAR 0 6
33195: PPUSH
33196: CALL_OW 312
33200: ST_TO_ADDR
// if j then
33201: LD_VAR 0 7
33205: IFFALSE 33235
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33207: LD_ADDR_VAR 0 10
33211: PUSH
33212: LD_VAR 0 10
33216: PUSH
33217: LD_VAR 0 7
33221: PPUSH
33222: LD_INT 3
33224: PPUSH
33225: CALL_OW 259
33229: PUSH
33230: LD_INT 3
33232: MUL
33233: MUL
33234: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33235: LD_VAR 0 6
33239: PPUSH
33240: CALL_OW 264
33244: PUSH
33245: LD_INT 5
33247: PUSH
33248: LD_INT 6
33250: PUSH
33251: LD_INT 46
33253: PUSH
33254: LD_INT 44
33256: PUSH
33257: LD_INT 47
33259: PUSH
33260: LD_INT 45
33262: PUSH
33263: LD_INT 28
33265: PUSH
33266: LD_INT 7
33268: PUSH
33269: LD_INT 27
33271: PUSH
33272: LD_INT 29
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: IN
33287: PUSH
33288: LD_VAR 0 1
33292: PPUSH
33293: LD_INT 52
33295: PPUSH
33296: CALL_OW 321
33300: PUSH
33301: LD_INT 2
33303: EQUAL
33304: AND
33305: IFFALSE 33322
// bpoints := bpoints * 1.2 ;
33307: LD_ADDR_VAR 0 10
33311: PUSH
33312: LD_VAR 0 10
33316: PUSH
33317: LD_REAL  1.20000000000000E+0000
33320: MUL
33321: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33322: LD_VAR 0 6
33326: PPUSH
33327: CALL_OW 264
33331: PUSH
33332: LD_INT 6
33334: PUSH
33335: LD_INT 46
33337: PUSH
33338: LD_INT 47
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: LIST
33345: IN
33346: IFFALSE 33363
// bpoints := bpoints * 1.2 ;
33348: LD_ADDR_VAR 0 10
33352: PUSH
33353: LD_VAR 0 10
33357: PUSH
33358: LD_REAL  1.20000000000000E+0000
33361: MUL
33362: ST_TO_ADDR
// end ; unit_building :
33363: GO 33377
33365: LD_INT 3
33367: DOUBLE
33368: EQUAL
33369: IFTRUE 33373
33371: GO 33376
33373: POP
// ; end ;
33374: GO 33377
33376: POP
// for j = 1 to 3 do
33377: LD_ADDR_VAR 0 7
33381: PUSH
33382: DOUBLE
33383: LD_INT 1
33385: DEC
33386: ST_TO_ADDR
33387: LD_INT 3
33389: PUSH
33390: FOR_TO
33391: IFFALSE 33444
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33393: LD_ADDR_VAR 0 5
33397: PUSH
33398: LD_VAR 0 5
33402: PPUSH
33403: LD_VAR 0 7
33407: PPUSH
33408: LD_VAR 0 5
33412: PUSH
33413: LD_VAR 0 7
33417: ARRAY
33418: PUSH
33419: LD_VAR 0 9
33423: PUSH
33424: LD_VAR 0 7
33428: ARRAY
33429: PUSH
33430: LD_VAR 0 10
33434: MUL
33435: PLUS
33436: PPUSH
33437: CALL_OW 1
33441: ST_TO_ADDR
33442: GO 33390
33444: POP
33445: POP
// end ;
33446: GO 31925
33448: POP
33449: POP
// result := Replace ( result , 4 , tmp ) ;
33450: LD_ADDR_VAR 0 5
33454: PUSH
33455: LD_VAR 0 5
33459: PPUSH
33460: LD_INT 4
33462: PPUSH
33463: LD_VAR 0 8
33467: PPUSH
33468: CALL_OW 1
33472: ST_TO_ADDR
// end ;
33473: LD_VAR 0 5
33477: RET
// export function DangerAtRange ( unit , range ) ; begin
33478: LD_INT 0
33480: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33481: LD_ADDR_VAR 0 3
33485: PUSH
33486: LD_VAR 0 1
33490: PPUSH
33491: CALL_OW 255
33495: PPUSH
33496: LD_VAR 0 1
33500: PPUSH
33501: CALL_OW 250
33505: PPUSH
33506: LD_VAR 0 1
33510: PPUSH
33511: CALL_OW 251
33515: PPUSH
33516: LD_VAR 0 2
33520: PPUSH
33521: CALL 31777 0 4
33525: ST_TO_ADDR
// end ;
33526: LD_VAR 0 3
33530: RET
// export function DangerInArea ( side , area ) ; begin
33531: LD_INT 0
33533: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33534: LD_ADDR_VAR 0 3
33538: PUSH
33539: LD_VAR 0 2
33543: PPUSH
33544: LD_INT 81
33546: PUSH
33547: LD_VAR 0 1
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PPUSH
33556: CALL_OW 70
33560: ST_TO_ADDR
// end ;
33561: LD_VAR 0 3
33565: RET
// export function IsExtension ( b ) ; begin
33566: LD_INT 0
33568: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33569: LD_ADDR_VAR 0 2
33573: PUSH
33574: LD_VAR 0 1
33578: PUSH
33579: LD_INT 23
33581: PUSH
33582: LD_INT 20
33584: PUSH
33585: LD_INT 22
33587: PUSH
33588: LD_INT 17
33590: PUSH
33591: LD_INT 24
33593: PUSH
33594: LD_INT 21
33596: PUSH
33597: LD_INT 19
33599: PUSH
33600: LD_INT 16
33602: PUSH
33603: LD_INT 25
33605: PUSH
33606: LD_INT 18
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: IN
33621: ST_TO_ADDR
// end ;
33622: LD_VAR 0 2
33626: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33627: LD_INT 0
33629: PPUSH
33630: PPUSH
33631: PPUSH
// result := [ ] ;
33632: LD_ADDR_VAR 0 4
33636: PUSH
33637: EMPTY
33638: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33639: LD_ADDR_VAR 0 5
33643: PUSH
33644: LD_VAR 0 2
33648: PPUSH
33649: LD_INT 21
33651: PUSH
33652: LD_INT 3
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PPUSH
33659: CALL_OW 70
33663: ST_TO_ADDR
// if not tmp then
33664: LD_VAR 0 5
33668: NOT
33669: IFFALSE 33673
// exit ;
33671: GO 33737
// if checkLink then
33673: LD_VAR 0 3
33677: IFFALSE 33727
// begin for i in tmp do
33679: LD_ADDR_VAR 0 6
33683: PUSH
33684: LD_VAR 0 5
33688: PUSH
33689: FOR_IN
33690: IFFALSE 33725
// if GetBase ( i ) <> base then
33692: LD_VAR 0 6
33696: PPUSH
33697: CALL_OW 274
33701: PUSH
33702: LD_VAR 0 1
33706: NONEQUAL
33707: IFFALSE 33723
// ComLinkToBase ( base , i ) ;
33709: LD_VAR 0 1
33713: PPUSH
33714: LD_VAR 0 6
33718: PPUSH
33719: CALL_OW 169
33723: GO 33689
33725: POP
33726: POP
// end ; result := tmp ;
33727: LD_ADDR_VAR 0 4
33731: PUSH
33732: LD_VAR 0 5
33736: ST_TO_ADDR
// end ;
33737: LD_VAR 0 4
33741: RET
// export function ComComplete ( units , b ) ; var i ; begin
33742: LD_INT 0
33744: PPUSH
33745: PPUSH
// if not units then
33746: LD_VAR 0 1
33750: NOT
33751: IFFALSE 33755
// exit ;
33753: GO 33845
// for i in units do
33755: LD_ADDR_VAR 0 4
33759: PUSH
33760: LD_VAR 0 1
33764: PUSH
33765: FOR_IN
33766: IFFALSE 33843
// if BuildingStatus ( b ) = bs_build then
33768: LD_VAR 0 2
33772: PPUSH
33773: CALL_OW 461
33777: PUSH
33778: LD_INT 1
33780: EQUAL
33781: IFFALSE 33841
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33783: LD_VAR 0 4
33787: PPUSH
33788: LD_STRING h
33790: PUSH
33791: LD_VAR 0 2
33795: PPUSH
33796: CALL_OW 250
33800: PUSH
33801: LD_VAR 0 2
33805: PPUSH
33806: CALL_OW 251
33810: PUSH
33811: LD_VAR 0 2
33815: PUSH
33816: LD_INT 0
33818: PUSH
33819: LD_INT 0
33821: PUSH
33822: LD_INT 0
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: PUSH
33834: EMPTY
33835: LIST
33836: PPUSH
33837: CALL_OW 446
33841: GO 33765
33843: POP
33844: POP
// end ;
33845: LD_VAR 0 3
33849: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33850: LD_INT 0
33852: PPUSH
33853: PPUSH
33854: PPUSH
33855: PPUSH
33856: PPUSH
33857: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33858: LD_VAR 0 1
33862: NOT
33863: PUSH
33864: LD_VAR 0 1
33868: PPUSH
33869: CALL_OW 263
33873: PUSH
33874: LD_INT 2
33876: NONEQUAL
33877: OR
33878: IFFALSE 33882
// exit ;
33880: GO 34198
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33882: LD_ADDR_VAR 0 6
33886: PUSH
33887: LD_INT 22
33889: PUSH
33890: LD_VAR 0 1
33894: PPUSH
33895: CALL_OW 255
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 2
33906: PUSH
33907: LD_INT 30
33909: PUSH
33910: LD_INT 36
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 34
33919: PUSH
33920: LD_INT 31
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: LIST
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PPUSH
33936: CALL_OW 69
33940: ST_TO_ADDR
// if not tmp then
33941: LD_VAR 0 6
33945: NOT
33946: IFFALSE 33950
// exit ;
33948: GO 34198
// result := [ ] ;
33950: LD_ADDR_VAR 0 2
33954: PUSH
33955: EMPTY
33956: ST_TO_ADDR
// for i in tmp do
33957: LD_ADDR_VAR 0 3
33961: PUSH
33962: LD_VAR 0 6
33966: PUSH
33967: FOR_IN
33968: IFFALSE 34039
// begin t := UnitsInside ( i ) ;
33970: LD_ADDR_VAR 0 4
33974: PUSH
33975: LD_VAR 0 3
33979: PPUSH
33980: CALL_OW 313
33984: ST_TO_ADDR
// if t then
33985: LD_VAR 0 4
33989: IFFALSE 34037
// for j in t do
33991: LD_ADDR_VAR 0 7
33995: PUSH
33996: LD_VAR 0 4
34000: PUSH
34001: FOR_IN
34002: IFFALSE 34035
// result := Replace ( result , result + 1 , j ) ;
34004: LD_ADDR_VAR 0 2
34008: PUSH
34009: LD_VAR 0 2
34013: PPUSH
34014: LD_VAR 0 2
34018: PUSH
34019: LD_INT 1
34021: PLUS
34022: PPUSH
34023: LD_VAR 0 7
34027: PPUSH
34028: CALL_OW 1
34032: ST_TO_ADDR
34033: GO 34001
34035: POP
34036: POP
// end ;
34037: GO 33967
34039: POP
34040: POP
// if not result then
34041: LD_VAR 0 2
34045: NOT
34046: IFFALSE 34050
// exit ;
34048: GO 34198
// mech := result [ 1 ] ;
34050: LD_ADDR_VAR 0 5
34054: PUSH
34055: LD_VAR 0 2
34059: PUSH
34060: LD_INT 1
34062: ARRAY
34063: ST_TO_ADDR
// if result > 1 then
34064: LD_VAR 0 2
34068: PUSH
34069: LD_INT 1
34071: GREATER
34072: IFFALSE 34184
// begin for i = 2 to result do
34074: LD_ADDR_VAR 0 3
34078: PUSH
34079: DOUBLE
34080: LD_INT 2
34082: DEC
34083: ST_TO_ADDR
34084: LD_VAR 0 2
34088: PUSH
34089: FOR_TO
34090: IFFALSE 34182
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34092: LD_ADDR_VAR 0 4
34096: PUSH
34097: LD_VAR 0 2
34101: PUSH
34102: LD_VAR 0 3
34106: ARRAY
34107: PPUSH
34108: LD_INT 3
34110: PPUSH
34111: CALL_OW 259
34115: PUSH
34116: LD_VAR 0 2
34120: PUSH
34121: LD_VAR 0 3
34125: ARRAY
34126: PPUSH
34127: CALL_OW 432
34131: MINUS
34132: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34133: LD_VAR 0 4
34137: PUSH
34138: LD_VAR 0 5
34142: PPUSH
34143: LD_INT 3
34145: PPUSH
34146: CALL_OW 259
34150: PUSH
34151: LD_VAR 0 5
34155: PPUSH
34156: CALL_OW 432
34160: MINUS
34161: GREATEREQUAL
34162: IFFALSE 34180
// mech := result [ i ] ;
34164: LD_ADDR_VAR 0 5
34168: PUSH
34169: LD_VAR 0 2
34173: PUSH
34174: LD_VAR 0 3
34178: ARRAY
34179: ST_TO_ADDR
// end ;
34180: GO 34089
34182: POP
34183: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34184: LD_VAR 0 1
34188: PPUSH
34189: LD_VAR 0 5
34193: PPUSH
34194: CALL_OW 135
// end ;
34198: LD_VAR 0 2
34202: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34203: LD_INT 0
34205: PPUSH
34206: PPUSH
34207: PPUSH
34208: PPUSH
34209: PPUSH
34210: PPUSH
34211: PPUSH
34212: PPUSH
34213: PPUSH
34214: PPUSH
34215: PPUSH
34216: PPUSH
34217: PPUSH
// result := [ ] ;
34218: LD_ADDR_VAR 0 7
34222: PUSH
34223: EMPTY
34224: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34225: LD_VAR 0 1
34229: PPUSH
34230: CALL_OW 266
34234: PUSH
34235: LD_INT 0
34237: PUSH
34238: LD_INT 1
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: IN
34245: NOT
34246: IFFALSE 34250
// exit ;
34248: GO 35884
// if name then
34250: LD_VAR 0 3
34254: IFFALSE 34270
// SetBName ( base_dep , name ) ;
34256: LD_VAR 0 1
34260: PPUSH
34261: LD_VAR 0 3
34265: PPUSH
34266: CALL_OW 500
// base := GetBase ( base_dep ) ;
34270: LD_ADDR_VAR 0 15
34274: PUSH
34275: LD_VAR 0 1
34279: PPUSH
34280: CALL_OW 274
34284: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34285: LD_ADDR_VAR 0 16
34289: PUSH
34290: LD_VAR 0 1
34294: PPUSH
34295: CALL_OW 255
34299: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34300: LD_ADDR_VAR 0 17
34304: PUSH
34305: LD_VAR 0 1
34309: PPUSH
34310: CALL_OW 248
34314: ST_TO_ADDR
// if sources then
34315: LD_VAR 0 5
34319: IFFALSE 34366
// for i = 1 to 3 do
34321: LD_ADDR_VAR 0 8
34325: PUSH
34326: DOUBLE
34327: LD_INT 1
34329: DEC
34330: ST_TO_ADDR
34331: LD_INT 3
34333: PUSH
34334: FOR_TO
34335: IFFALSE 34364
// AddResourceType ( base , i , sources [ i ] ) ;
34337: LD_VAR 0 15
34341: PPUSH
34342: LD_VAR 0 8
34346: PPUSH
34347: LD_VAR 0 5
34351: PUSH
34352: LD_VAR 0 8
34356: ARRAY
34357: PPUSH
34358: CALL_OW 276
34362: GO 34334
34364: POP
34365: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34366: LD_ADDR_VAR 0 18
34370: PUSH
34371: LD_VAR 0 15
34375: PPUSH
34376: LD_VAR 0 2
34380: PPUSH
34381: LD_INT 1
34383: PPUSH
34384: CALL 33627 0 3
34388: ST_TO_ADDR
// InitHc ;
34389: CALL_OW 19
// InitUc ;
34393: CALL_OW 18
// uc_side := side ;
34397: LD_ADDR_OWVAR 20
34401: PUSH
34402: LD_VAR 0 16
34406: ST_TO_ADDR
// uc_nation := nation ;
34407: LD_ADDR_OWVAR 21
34411: PUSH
34412: LD_VAR 0 17
34416: ST_TO_ADDR
// if buildings then
34417: LD_VAR 0 18
34421: IFFALSE 35743
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34423: LD_ADDR_VAR 0 19
34427: PUSH
34428: LD_VAR 0 18
34432: PPUSH
34433: LD_INT 2
34435: PUSH
34436: LD_INT 30
34438: PUSH
34439: LD_INT 29
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 30
34448: PUSH
34449: LD_INT 30
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: LIST
34460: PPUSH
34461: CALL_OW 72
34465: ST_TO_ADDR
// if tmp then
34466: LD_VAR 0 19
34470: IFFALSE 34518
// for i in tmp do
34472: LD_ADDR_VAR 0 8
34476: PUSH
34477: LD_VAR 0 19
34481: PUSH
34482: FOR_IN
34483: IFFALSE 34516
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34485: LD_VAR 0 8
34489: PPUSH
34490: CALL_OW 250
34494: PPUSH
34495: LD_VAR 0 8
34499: PPUSH
34500: CALL_OW 251
34504: PPUSH
34505: LD_VAR 0 16
34509: PPUSH
34510: CALL_OW 441
34514: GO 34482
34516: POP
34517: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34518: LD_VAR 0 18
34522: PPUSH
34523: LD_INT 2
34525: PUSH
34526: LD_INT 30
34528: PUSH
34529: LD_INT 32
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: LD_INT 30
34538: PUSH
34539: LD_INT 33
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: LIST
34550: PPUSH
34551: CALL_OW 72
34555: IFFALSE 34643
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34557: LD_ADDR_VAR 0 8
34561: PUSH
34562: LD_VAR 0 18
34566: PPUSH
34567: LD_INT 2
34569: PUSH
34570: LD_INT 30
34572: PUSH
34573: LD_INT 32
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 30
34582: PUSH
34583: LD_INT 33
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: LIST
34594: PPUSH
34595: CALL_OW 72
34599: PUSH
34600: FOR_IN
34601: IFFALSE 34641
// begin if not GetBWeapon ( i ) then
34603: LD_VAR 0 8
34607: PPUSH
34608: CALL_OW 269
34612: NOT
34613: IFFALSE 34639
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34615: LD_VAR 0 8
34619: PPUSH
34620: LD_VAR 0 8
34624: PPUSH
34625: LD_VAR 0 2
34629: PPUSH
34630: CALL 35889 0 2
34634: PPUSH
34635: CALL_OW 431
// end ;
34639: GO 34600
34641: POP
34642: POP
// end ; for i = 1 to personel do
34643: LD_ADDR_VAR 0 8
34647: PUSH
34648: DOUBLE
34649: LD_INT 1
34651: DEC
34652: ST_TO_ADDR
34653: LD_VAR 0 6
34657: PUSH
34658: FOR_TO
34659: IFFALSE 35723
// begin if i > 4 then
34661: LD_VAR 0 8
34665: PUSH
34666: LD_INT 4
34668: GREATER
34669: IFFALSE 34673
// break ;
34671: GO 35723
// case i of 1 :
34673: LD_VAR 0 8
34677: PUSH
34678: LD_INT 1
34680: DOUBLE
34681: EQUAL
34682: IFTRUE 34686
34684: GO 34766
34686: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34687: LD_ADDR_VAR 0 12
34691: PUSH
34692: LD_VAR 0 18
34696: PPUSH
34697: LD_INT 22
34699: PUSH
34700: LD_VAR 0 16
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: LD_INT 58
34711: PUSH
34712: EMPTY
34713: LIST
34714: PUSH
34715: LD_INT 2
34717: PUSH
34718: LD_INT 30
34720: PUSH
34721: LD_INT 32
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 30
34730: PUSH
34731: LD_INT 4
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 30
34740: PUSH
34741: LD_INT 5
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: LIST
34758: PPUSH
34759: CALL_OW 72
34763: ST_TO_ADDR
34764: GO 34988
34766: LD_INT 2
34768: DOUBLE
34769: EQUAL
34770: IFTRUE 34774
34772: GO 34836
34774: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34775: LD_ADDR_VAR 0 12
34779: PUSH
34780: LD_VAR 0 18
34784: PPUSH
34785: LD_INT 22
34787: PUSH
34788: LD_VAR 0 16
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 2
34799: PUSH
34800: LD_INT 30
34802: PUSH
34803: LD_INT 0
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 30
34812: PUSH
34813: LD_INT 1
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: LIST
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PPUSH
34829: CALL_OW 72
34833: ST_TO_ADDR
34834: GO 34988
34836: LD_INT 3
34838: DOUBLE
34839: EQUAL
34840: IFTRUE 34844
34842: GO 34906
34844: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34845: LD_ADDR_VAR 0 12
34849: PUSH
34850: LD_VAR 0 18
34854: PPUSH
34855: LD_INT 22
34857: PUSH
34858: LD_VAR 0 16
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 2
34869: PUSH
34870: LD_INT 30
34872: PUSH
34873: LD_INT 2
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: PUSH
34880: LD_INT 30
34882: PUSH
34883: LD_INT 3
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: LIST
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PPUSH
34899: CALL_OW 72
34903: ST_TO_ADDR
34904: GO 34988
34906: LD_INT 4
34908: DOUBLE
34909: EQUAL
34910: IFTRUE 34914
34912: GO 34987
34914: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34915: LD_ADDR_VAR 0 12
34919: PUSH
34920: LD_VAR 0 18
34924: PPUSH
34925: LD_INT 22
34927: PUSH
34928: LD_VAR 0 16
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 2
34939: PUSH
34940: LD_INT 30
34942: PUSH
34943: LD_INT 6
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 30
34952: PUSH
34953: LD_INT 7
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 30
34962: PUSH
34963: LD_INT 8
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PPUSH
34980: CALL_OW 72
34984: ST_TO_ADDR
34985: GO 34988
34987: POP
// if i = 1 then
34988: LD_VAR 0 8
34992: PUSH
34993: LD_INT 1
34995: EQUAL
34996: IFFALSE 35107
// begin tmp := [ ] ;
34998: LD_ADDR_VAR 0 19
35002: PUSH
35003: EMPTY
35004: ST_TO_ADDR
// for j in f do
35005: LD_ADDR_VAR 0 9
35009: PUSH
35010: LD_VAR 0 12
35014: PUSH
35015: FOR_IN
35016: IFFALSE 35089
// if GetBType ( j ) = b_bunker then
35018: LD_VAR 0 9
35022: PPUSH
35023: CALL_OW 266
35027: PUSH
35028: LD_INT 32
35030: EQUAL
35031: IFFALSE 35058
// tmp := Insert ( tmp , 1 , j ) else
35033: LD_ADDR_VAR 0 19
35037: PUSH
35038: LD_VAR 0 19
35042: PPUSH
35043: LD_INT 1
35045: PPUSH
35046: LD_VAR 0 9
35050: PPUSH
35051: CALL_OW 2
35055: ST_TO_ADDR
35056: GO 35087
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35058: LD_ADDR_VAR 0 19
35062: PUSH
35063: LD_VAR 0 19
35067: PPUSH
35068: LD_VAR 0 19
35072: PUSH
35073: LD_INT 1
35075: PLUS
35076: PPUSH
35077: LD_VAR 0 9
35081: PPUSH
35082: CALL_OW 2
35086: ST_TO_ADDR
35087: GO 35015
35089: POP
35090: POP
// if tmp then
35091: LD_VAR 0 19
35095: IFFALSE 35107
// f := tmp ;
35097: LD_ADDR_VAR 0 12
35101: PUSH
35102: LD_VAR 0 19
35106: ST_TO_ADDR
// end ; x := personel [ i ] ;
35107: LD_ADDR_VAR 0 13
35111: PUSH
35112: LD_VAR 0 6
35116: PUSH
35117: LD_VAR 0 8
35121: ARRAY
35122: ST_TO_ADDR
// if x = - 1 then
35123: LD_VAR 0 13
35127: PUSH
35128: LD_INT 1
35130: NEG
35131: EQUAL
35132: IFFALSE 35341
// begin for j in f do
35134: LD_ADDR_VAR 0 9
35138: PUSH
35139: LD_VAR 0 12
35143: PUSH
35144: FOR_IN
35145: IFFALSE 35337
// repeat InitHc ;
35147: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35151: LD_VAR 0 9
35155: PPUSH
35156: CALL_OW 266
35160: PUSH
35161: LD_INT 5
35163: EQUAL
35164: IFFALSE 35234
// begin if UnitsInside ( j ) < 3 then
35166: LD_VAR 0 9
35170: PPUSH
35171: CALL_OW 313
35175: PUSH
35176: LD_INT 3
35178: LESS
35179: IFFALSE 35215
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35181: LD_INT 0
35183: PPUSH
35184: LD_INT 5
35186: PUSH
35187: LD_INT 8
35189: PUSH
35190: LD_INT 9
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: LIST
35197: PUSH
35198: LD_VAR 0 17
35202: ARRAY
35203: PPUSH
35204: LD_VAR 0 4
35208: PPUSH
35209: CALL_OW 380
35213: GO 35232
// PrepareHuman ( false , i , skill ) ;
35215: LD_INT 0
35217: PPUSH
35218: LD_VAR 0 8
35222: PPUSH
35223: LD_VAR 0 4
35227: PPUSH
35228: CALL_OW 380
// end else
35232: GO 35251
// PrepareHuman ( false , i , skill ) ;
35234: LD_INT 0
35236: PPUSH
35237: LD_VAR 0 8
35241: PPUSH
35242: LD_VAR 0 4
35246: PPUSH
35247: CALL_OW 380
// un := CreateHuman ;
35251: LD_ADDR_VAR 0 14
35255: PUSH
35256: CALL_OW 44
35260: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35261: LD_ADDR_VAR 0 7
35265: PUSH
35266: LD_VAR 0 7
35270: PPUSH
35271: LD_INT 1
35273: PPUSH
35274: LD_VAR 0 14
35278: PPUSH
35279: CALL_OW 2
35283: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35284: LD_VAR 0 14
35288: PPUSH
35289: LD_VAR 0 9
35293: PPUSH
35294: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35298: LD_VAR 0 9
35302: PPUSH
35303: CALL_OW 313
35307: PUSH
35308: LD_INT 6
35310: EQUAL
35311: PUSH
35312: LD_VAR 0 9
35316: PPUSH
35317: CALL_OW 266
35321: PUSH
35322: LD_INT 32
35324: PUSH
35325: LD_INT 31
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: IN
35332: OR
35333: IFFALSE 35147
35335: GO 35144
35337: POP
35338: POP
// end else
35339: GO 35721
// for j = 1 to x do
35341: LD_ADDR_VAR 0 9
35345: PUSH
35346: DOUBLE
35347: LD_INT 1
35349: DEC
35350: ST_TO_ADDR
35351: LD_VAR 0 13
35355: PUSH
35356: FOR_TO
35357: IFFALSE 35719
// begin InitHc ;
35359: CALL_OW 19
// if not f then
35363: LD_VAR 0 12
35367: NOT
35368: IFFALSE 35457
// begin PrepareHuman ( false , i , skill ) ;
35370: LD_INT 0
35372: PPUSH
35373: LD_VAR 0 8
35377: PPUSH
35378: LD_VAR 0 4
35382: PPUSH
35383: CALL_OW 380
// un := CreateHuman ;
35387: LD_ADDR_VAR 0 14
35391: PUSH
35392: CALL_OW 44
35396: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35397: LD_ADDR_VAR 0 7
35401: PUSH
35402: LD_VAR 0 7
35406: PPUSH
35407: LD_INT 1
35409: PPUSH
35410: LD_VAR 0 14
35414: PPUSH
35415: CALL_OW 2
35419: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35420: LD_VAR 0 14
35424: PPUSH
35425: LD_VAR 0 1
35429: PPUSH
35430: CALL_OW 250
35434: PPUSH
35435: LD_VAR 0 1
35439: PPUSH
35440: CALL_OW 251
35444: PPUSH
35445: LD_INT 10
35447: PPUSH
35448: LD_INT 0
35450: PPUSH
35451: CALL_OW 50
// continue ;
35455: GO 35356
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35457: LD_VAR 0 12
35461: PUSH
35462: LD_INT 1
35464: ARRAY
35465: PPUSH
35466: CALL_OW 313
35470: PUSH
35471: LD_VAR 0 12
35475: PUSH
35476: LD_INT 1
35478: ARRAY
35479: PPUSH
35480: CALL_OW 266
35484: PUSH
35485: LD_INT 32
35487: PUSH
35488: LD_INT 31
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: IN
35495: AND
35496: PUSH
35497: LD_VAR 0 12
35501: PUSH
35502: LD_INT 1
35504: ARRAY
35505: PPUSH
35506: CALL_OW 313
35510: PUSH
35511: LD_INT 6
35513: EQUAL
35514: OR
35515: IFFALSE 35535
// f := Delete ( f , 1 ) ;
35517: LD_ADDR_VAR 0 12
35521: PUSH
35522: LD_VAR 0 12
35526: PPUSH
35527: LD_INT 1
35529: PPUSH
35530: CALL_OW 3
35534: ST_TO_ADDR
// if not f then
35535: LD_VAR 0 12
35539: NOT
35540: IFFALSE 35558
// begin x := x + 2 ;
35542: LD_ADDR_VAR 0 13
35546: PUSH
35547: LD_VAR 0 13
35551: PUSH
35552: LD_INT 2
35554: PLUS
35555: ST_TO_ADDR
// continue ;
35556: GO 35356
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35558: LD_VAR 0 12
35562: PUSH
35563: LD_INT 1
35565: ARRAY
35566: PPUSH
35567: CALL_OW 266
35571: PUSH
35572: LD_INT 5
35574: EQUAL
35575: IFFALSE 35649
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35577: LD_VAR 0 12
35581: PUSH
35582: LD_INT 1
35584: ARRAY
35585: PPUSH
35586: CALL_OW 313
35590: PUSH
35591: LD_INT 3
35593: LESS
35594: IFFALSE 35630
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35596: LD_INT 0
35598: PPUSH
35599: LD_INT 5
35601: PUSH
35602: LD_INT 8
35604: PUSH
35605: LD_INT 9
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: LIST
35612: PUSH
35613: LD_VAR 0 17
35617: ARRAY
35618: PPUSH
35619: LD_VAR 0 4
35623: PPUSH
35624: CALL_OW 380
35628: GO 35647
// PrepareHuman ( false , i , skill ) ;
35630: LD_INT 0
35632: PPUSH
35633: LD_VAR 0 8
35637: PPUSH
35638: LD_VAR 0 4
35642: PPUSH
35643: CALL_OW 380
// end else
35647: GO 35666
// PrepareHuman ( false , i , skill ) ;
35649: LD_INT 0
35651: PPUSH
35652: LD_VAR 0 8
35656: PPUSH
35657: LD_VAR 0 4
35661: PPUSH
35662: CALL_OW 380
// un := CreateHuman ;
35666: LD_ADDR_VAR 0 14
35670: PUSH
35671: CALL_OW 44
35675: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35676: LD_ADDR_VAR 0 7
35680: PUSH
35681: LD_VAR 0 7
35685: PPUSH
35686: LD_INT 1
35688: PPUSH
35689: LD_VAR 0 14
35693: PPUSH
35694: CALL_OW 2
35698: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35699: LD_VAR 0 14
35703: PPUSH
35704: LD_VAR 0 12
35708: PUSH
35709: LD_INT 1
35711: ARRAY
35712: PPUSH
35713: CALL_OW 52
// end ;
35717: GO 35356
35719: POP
35720: POP
// end ;
35721: GO 34658
35723: POP
35724: POP
// result := result ^ buildings ;
35725: LD_ADDR_VAR 0 7
35729: PUSH
35730: LD_VAR 0 7
35734: PUSH
35735: LD_VAR 0 18
35739: ADD
35740: ST_TO_ADDR
// end else
35741: GO 35884
// begin for i = 1 to personel do
35743: LD_ADDR_VAR 0 8
35747: PUSH
35748: DOUBLE
35749: LD_INT 1
35751: DEC
35752: ST_TO_ADDR
35753: LD_VAR 0 6
35757: PUSH
35758: FOR_TO
35759: IFFALSE 35882
// begin if i > 4 then
35761: LD_VAR 0 8
35765: PUSH
35766: LD_INT 4
35768: GREATER
35769: IFFALSE 35773
// break ;
35771: GO 35882
// x := personel [ i ] ;
35773: LD_ADDR_VAR 0 13
35777: PUSH
35778: LD_VAR 0 6
35782: PUSH
35783: LD_VAR 0 8
35787: ARRAY
35788: ST_TO_ADDR
// if x = - 1 then
35789: LD_VAR 0 13
35793: PUSH
35794: LD_INT 1
35796: NEG
35797: EQUAL
35798: IFFALSE 35802
// continue ;
35800: GO 35758
// PrepareHuman ( false , i , skill ) ;
35802: LD_INT 0
35804: PPUSH
35805: LD_VAR 0 8
35809: PPUSH
35810: LD_VAR 0 4
35814: PPUSH
35815: CALL_OW 380
// un := CreateHuman ;
35819: LD_ADDR_VAR 0 14
35823: PUSH
35824: CALL_OW 44
35828: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35829: LD_VAR 0 14
35833: PPUSH
35834: LD_VAR 0 1
35838: PPUSH
35839: CALL_OW 250
35843: PPUSH
35844: LD_VAR 0 1
35848: PPUSH
35849: CALL_OW 251
35853: PPUSH
35854: LD_INT 10
35856: PPUSH
35857: LD_INT 0
35859: PPUSH
35860: CALL_OW 50
// result := result ^ un ;
35864: LD_ADDR_VAR 0 7
35868: PUSH
35869: LD_VAR 0 7
35873: PUSH
35874: LD_VAR 0 14
35878: ADD
35879: ST_TO_ADDR
// end ;
35880: GO 35758
35882: POP
35883: POP
// end ; end ;
35884: LD_VAR 0 7
35888: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35889: LD_INT 0
35891: PPUSH
35892: PPUSH
35893: PPUSH
35894: PPUSH
35895: PPUSH
35896: PPUSH
35897: PPUSH
35898: PPUSH
35899: PPUSH
35900: PPUSH
35901: PPUSH
35902: PPUSH
35903: PPUSH
35904: PPUSH
35905: PPUSH
35906: PPUSH
// result := false ;
35907: LD_ADDR_VAR 0 3
35911: PUSH
35912: LD_INT 0
35914: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35915: LD_VAR 0 1
35919: NOT
35920: PUSH
35921: LD_VAR 0 1
35925: PPUSH
35926: CALL_OW 266
35930: PUSH
35931: LD_INT 32
35933: PUSH
35934: LD_INT 33
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: IN
35941: NOT
35942: OR
35943: IFFALSE 35947
// exit ;
35945: GO 37056
// nat := GetNation ( tower ) ;
35947: LD_ADDR_VAR 0 12
35951: PUSH
35952: LD_VAR 0 1
35956: PPUSH
35957: CALL_OW 248
35961: ST_TO_ADDR
// side := GetSide ( tower ) ;
35962: LD_ADDR_VAR 0 16
35966: PUSH
35967: LD_VAR 0 1
35971: PPUSH
35972: CALL_OW 255
35976: ST_TO_ADDR
// x := GetX ( tower ) ;
35977: LD_ADDR_VAR 0 10
35981: PUSH
35982: LD_VAR 0 1
35986: PPUSH
35987: CALL_OW 250
35991: ST_TO_ADDR
// y := GetY ( tower ) ;
35992: LD_ADDR_VAR 0 11
35996: PUSH
35997: LD_VAR 0 1
36001: PPUSH
36002: CALL_OW 251
36006: ST_TO_ADDR
// if not x or not y then
36007: LD_VAR 0 10
36011: NOT
36012: PUSH
36013: LD_VAR 0 11
36017: NOT
36018: OR
36019: IFFALSE 36023
// exit ;
36021: GO 37056
// weapon := 0 ;
36023: LD_ADDR_VAR 0 18
36027: PUSH
36028: LD_INT 0
36030: ST_TO_ADDR
// fac_list := [ ] ;
36031: LD_ADDR_VAR 0 17
36035: PUSH
36036: EMPTY
36037: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36038: LD_ADDR_VAR 0 6
36042: PUSH
36043: LD_VAR 0 1
36047: PPUSH
36048: CALL_OW 274
36052: PPUSH
36053: LD_VAR 0 2
36057: PPUSH
36058: LD_INT 0
36060: PPUSH
36061: CALL 33627 0 3
36065: PPUSH
36066: LD_INT 30
36068: PUSH
36069: LD_INT 3
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PPUSH
36076: CALL_OW 72
36080: ST_TO_ADDR
// if not factories then
36081: LD_VAR 0 6
36085: NOT
36086: IFFALSE 36090
// exit ;
36088: GO 37056
// for i in factories do
36090: LD_ADDR_VAR 0 8
36094: PUSH
36095: LD_VAR 0 6
36099: PUSH
36100: FOR_IN
36101: IFFALSE 36126
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36103: LD_ADDR_VAR 0 17
36107: PUSH
36108: LD_VAR 0 17
36112: PUSH
36113: LD_VAR 0 8
36117: PPUSH
36118: CALL_OW 478
36122: UNION
36123: ST_TO_ADDR
36124: GO 36100
36126: POP
36127: POP
// if not fac_list then
36128: LD_VAR 0 17
36132: NOT
36133: IFFALSE 36137
// exit ;
36135: GO 37056
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36137: LD_ADDR_VAR 0 5
36141: PUSH
36142: LD_INT 4
36144: PUSH
36145: LD_INT 5
36147: PUSH
36148: LD_INT 9
36150: PUSH
36151: LD_INT 10
36153: PUSH
36154: LD_INT 6
36156: PUSH
36157: LD_INT 7
36159: PUSH
36160: LD_INT 11
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 27
36174: PUSH
36175: LD_INT 28
36177: PUSH
36178: LD_INT 26
36180: PUSH
36181: LD_INT 30
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 43
36192: PUSH
36193: LD_INT 44
36195: PUSH
36196: LD_INT 46
36198: PUSH
36199: LD_INT 45
36201: PUSH
36202: LD_INT 47
36204: PUSH
36205: LD_INT 49
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: LIST
36220: PUSH
36221: LD_VAR 0 12
36225: ARRAY
36226: ST_TO_ADDR
// list := list isect fac_list ;
36227: LD_ADDR_VAR 0 5
36231: PUSH
36232: LD_VAR 0 5
36236: PUSH
36237: LD_VAR 0 17
36241: ISECT
36242: ST_TO_ADDR
// if not list then
36243: LD_VAR 0 5
36247: NOT
36248: IFFALSE 36252
// exit ;
36250: GO 37056
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36252: LD_VAR 0 12
36256: PUSH
36257: LD_INT 3
36259: EQUAL
36260: PUSH
36261: LD_INT 49
36263: PUSH
36264: LD_VAR 0 5
36268: IN
36269: AND
36270: PUSH
36271: LD_INT 31
36273: PPUSH
36274: LD_VAR 0 16
36278: PPUSH
36279: CALL_OW 321
36283: PUSH
36284: LD_INT 2
36286: EQUAL
36287: AND
36288: IFFALSE 36348
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36290: LD_INT 22
36292: PUSH
36293: LD_VAR 0 16
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 35
36304: PUSH
36305: LD_INT 49
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 91
36314: PUSH
36315: LD_VAR 0 1
36319: PUSH
36320: LD_INT 10
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: LIST
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: LIST
36332: PPUSH
36333: CALL_OW 69
36337: NOT
36338: IFFALSE 36348
// weapon := ru_time_lapser ;
36340: LD_ADDR_VAR 0 18
36344: PUSH
36345: LD_INT 49
36347: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36348: LD_VAR 0 12
36352: PUSH
36353: LD_INT 1
36355: PUSH
36356: LD_INT 2
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: IN
36363: PUSH
36364: LD_INT 11
36366: PUSH
36367: LD_VAR 0 5
36371: IN
36372: PUSH
36373: LD_INT 30
36375: PUSH
36376: LD_VAR 0 5
36380: IN
36381: OR
36382: AND
36383: PUSH
36384: LD_INT 6
36386: PPUSH
36387: LD_VAR 0 16
36391: PPUSH
36392: CALL_OW 321
36396: PUSH
36397: LD_INT 2
36399: EQUAL
36400: AND
36401: IFFALSE 36566
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36403: LD_INT 22
36405: PUSH
36406: LD_VAR 0 16
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: PUSH
36415: LD_INT 2
36417: PUSH
36418: LD_INT 35
36420: PUSH
36421: LD_INT 11
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: LD_INT 35
36430: PUSH
36431: LD_INT 30
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 91
36445: PUSH
36446: LD_VAR 0 1
36450: PUSH
36451: LD_INT 18
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: LIST
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: LIST
36463: PPUSH
36464: CALL_OW 69
36468: NOT
36469: PUSH
36470: LD_INT 22
36472: PUSH
36473: LD_VAR 0 16
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 2
36484: PUSH
36485: LD_INT 30
36487: PUSH
36488: LD_INT 32
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 30
36497: PUSH
36498: LD_INT 33
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 91
36512: PUSH
36513: LD_VAR 0 1
36517: PUSH
36518: LD_INT 12
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: LIST
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: LIST
36530: PUSH
36531: EMPTY
36532: LIST
36533: PPUSH
36534: CALL_OW 69
36538: PUSH
36539: LD_INT 2
36541: GREATER
36542: AND
36543: IFFALSE 36566
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36545: LD_ADDR_VAR 0 18
36549: PUSH
36550: LD_INT 11
36552: PUSH
36553: LD_INT 30
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_VAR 0 12
36564: ARRAY
36565: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36566: LD_VAR 0 18
36570: NOT
36571: PUSH
36572: LD_INT 40
36574: PPUSH
36575: LD_VAR 0 16
36579: PPUSH
36580: CALL_OW 321
36584: PUSH
36585: LD_INT 2
36587: EQUAL
36588: AND
36589: PUSH
36590: LD_INT 7
36592: PUSH
36593: LD_VAR 0 5
36597: IN
36598: PUSH
36599: LD_INT 28
36601: PUSH
36602: LD_VAR 0 5
36606: IN
36607: OR
36608: PUSH
36609: LD_INT 45
36611: PUSH
36612: LD_VAR 0 5
36616: IN
36617: OR
36618: AND
36619: IFFALSE 36873
// begin hex := GetHexInfo ( x , y ) ;
36621: LD_ADDR_VAR 0 4
36625: PUSH
36626: LD_VAR 0 10
36630: PPUSH
36631: LD_VAR 0 11
36635: PPUSH
36636: CALL_OW 546
36640: ST_TO_ADDR
// if hex [ 1 ] then
36641: LD_VAR 0 4
36645: PUSH
36646: LD_INT 1
36648: ARRAY
36649: IFFALSE 36653
// exit ;
36651: GO 37056
// height := hex [ 2 ] ;
36653: LD_ADDR_VAR 0 15
36657: PUSH
36658: LD_VAR 0 4
36662: PUSH
36663: LD_INT 2
36665: ARRAY
36666: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36667: LD_ADDR_VAR 0 14
36671: PUSH
36672: LD_INT 0
36674: PUSH
36675: LD_INT 2
36677: PUSH
36678: LD_INT 3
36680: PUSH
36681: LD_INT 5
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: ST_TO_ADDR
// for i in tmp do
36690: LD_ADDR_VAR 0 8
36694: PUSH
36695: LD_VAR 0 14
36699: PUSH
36700: FOR_IN
36701: IFFALSE 36871
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36703: LD_ADDR_VAR 0 9
36707: PUSH
36708: LD_VAR 0 10
36712: PPUSH
36713: LD_VAR 0 8
36717: PPUSH
36718: LD_INT 5
36720: PPUSH
36721: CALL_OW 272
36725: PUSH
36726: LD_VAR 0 11
36730: PPUSH
36731: LD_VAR 0 8
36735: PPUSH
36736: LD_INT 5
36738: PPUSH
36739: CALL_OW 273
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36748: LD_VAR 0 9
36752: PUSH
36753: LD_INT 1
36755: ARRAY
36756: PPUSH
36757: LD_VAR 0 9
36761: PUSH
36762: LD_INT 2
36764: ARRAY
36765: PPUSH
36766: CALL_OW 488
36770: IFFALSE 36869
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36772: LD_ADDR_VAR 0 4
36776: PUSH
36777: LD_VAR 0 9
36781: PUSH
36782: LD_INT 1
36784: ARRAY
36785: PPUSH
36786: LD_VAR 0 9
36790: PUSH
36791: LD_INT 2
36793: ARRAY
36794: PPUSH
36795: CALL_OW 546
36799: ST_TO_ADDR
// if hex [ 1 ] then
36800: LD_VAR 0 4
36804: PUSH
36805: LD_INT 1
36807: ARRAY
36808: IFFALSE 36812
// continue ;
36810: GO 36700
// h := hex [ 2 ] ;
36812: LD_ADDR_VAR 0 13
36816: PUSH
36817: LD_VAR 0 4
36821: PUSH
36822: LD_INT 2
36824: ARRAY
36825: ST_TO_ADDR
// if h + 7 < height then
36826: LD_VAR 0 13
36830: PUSH
36831: LD_INT 7
36833: PLUS
36834: PUSH
36835: LD_VAR 0 15
36839: LESS
36840: IFFALSE 36869
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36842: LD_ADDR_VAR 0 18
36846: PUSH
36847: LD_INT 7
36849: PUSH
36850: LD_INT 28
36852: PUSH
36853: LD_INT 45
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: LIST
36860: PUSH
36861: LD_VAR 0 12
36865: ARRAY
36866: ST_TO_ADDR
// break ;
36867: GO 36871
// end ; end ; end ;
36869: GO 36700
36871: POP
36872: POP
// end ; if not weapon then
36873: LD_VAR 0 18
36877: NOT
36878: IFFALSE 36938
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36880: LD_ADDR_VAR 0 5
36884: PUSH
36885: LD_VAR 0 5
36889: PUSH
36890: LD_INT 11
36892: PUSH
36893: LD_INT 30
36895: PUSH
36896: LD_INT 49
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: LIST
36903: DIFF
36904: ST_TO_ADDR
// if not list then
36905: LD_VAR 0 5
36909: NOT
36910: IFFALSE 36914
// exit ;
36912: GO 37056
// weapon := list [ rand ( 1 , list ) ] ;
36914: LD_ADDR_VAR 0 18
36918: PUSH
36919: LD_VAR 0 5
36923: PUSH
36924: LD_INT 1
36926: PPUSH
36927: LD_VAR 0 5
36931: PPUSH
36932: CALL_OW 12
36936: ARRAY
36937: ST_TO_ADDR
// end ; if weapon then
36938: LD_VAR 0 18
36942: IFFALSE 37056
// begin tmp := CostOfWeapon ( weapon ) ;
36944: LD_ADDR_VAR 0 14
36948: PUSH
36949: LD_VAR 0 18
36953: PPUSH
36954: CALL_OW 451
36958: ST_TO_ADDR
// j := GetBase ( tower ) ;
36959: LD_ADDR_VAR 0 9
36963: PUSH
36964: LD_VAR 0 1
36968: PPUSH
36969: CALL_OW 274
36973: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36974: LD_VAR 0 9
36978: PPUSH
36979: LD_INT 1
36981: PPUSH
36982: CALL_OW 275
36986: PUSH
36987: LD_VAR 0 14
36991: PUSH
36992: LD_INT 1
36994: ARRAY
36995: GREATEREQUAL
36996: PUSH
36997: LD_VAR 0 9
37001: PPUSH
37002: LD_INT 2
37004: PPUSH
37005: CALL_OW 275
37009: PUSH
37010: LD_VAR 0 14
37014: PUSH
37015: LD_INT 2
37017: ARRAY
37018: GREATEREQUAL
37019: AND
37020: PUSH
37021: LD_VAR 0 9
37025: PPUSH
37026: LD_INT 3
37028: PPUSH
37029: CALL_OW 275
37033: PUSH
37034: LD_VAR 0 14
37038: PUSH
37039: LD_INT 3
37041: ARRAY
37042: GREATEREQUAL
37043: AND
37044: IFFALSE 37056
// result := weapon ;
37046: LD_ADDR_VAR 0 3
37050: PUSH
37051: LD_VAR 0 18
37055: ST_TO_ADDR
// end ; end ;
37056: LD_VAR 0 3
37060: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37061: LD_INT 0
37063: PPUSH
37064: PPUSH
// result := true ;
37065: LD_ADDR_VAR 0 3
37069: PUSH
37070: LD_INT 1
37072: ST_TO_ADDR
// if array1 = array2 then
37073: LD_VAR 0 1
37077: PUSH
37078: LD_VAR 0 2
37082: EQUAL
37083: IFFALSE 37143
// begin for i = 1 to array1 do
37085: LD_ADDR_VAR 0 4
37089: PUSH
37090: DOUBLE
37091: LD_INT 1
37093: DEC
37094: ST_TO_ADDR
37095: LD_VAR 0 1
37099: PUSH
37100: FOR_TO
37101: IFFALSE 37139
// if array1 [ i ] <> array2 [ i ] then
37103: LD_VAR 0 1
37107: PUSH
37108: LD_VAR 0 4
37112: ARRAY
37113: PUSH
37114: LD_VAR 0 2
37118: PUSH
37119: LD_VAR 0 4
37123: ARRAY
37124: NONEQUAL
37125: IFFALSE 37137
// begin result := false ;
37127: LD_ADDR_VAR 0 3
37131: PUSH
37132: LD_INT 0
37134: ST_TO_ADDR
// break ;
37135: GO 37139
// end ;
37137: GO 37100
37139: POP
37140: POP
// end else
37141: GO 37151
// result := false ;
37143: LD_ADDR_VAR 0 3
37147: PUSH
37148: LD_INT 0
37150: ST_TO_ADDR
// end ;
37151: LD_VAR 0 3
37155: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37156: LD_INT 0
37158: PPUSH
37159: PPUSH
// if not array1 or not array2 then
37160: LD_VAR 0 1
37164: NOT
37165: PUSH
37166: LD_VAR 0 2
37170: NOT
37171: OR
37172: IFFALSE 37176
// exit ;
37174: GO 37240
// result := true ;
37176: LD_ADDR_VAR 0 3
37180: PUSH
37181: LD_INT 1
37183: ST_TO_ADDR
// for i = 1 to array1 do
37184: LD_ADDR_VAR 0 4
37188: PUSH
37189: DOUBLE
37190: LD_INT 1
37192: DEC
37193: ST_TO_ADDR
37194: LD_VAR 0 1
37198: PUSH
37199: FOR_TO
37200: IFFALSE 37238
// if array1 [ i ] <> array2 [ i ] then
37202: LD_VAR 0 1
37206: PUSH
37207: LD_VAR 0 4
37211: ARRAY
37212: PUSH
37213: LD_VAR 0 2
37217: PUSH
37218: LD_VAR 0 4
37222: ARRAY
37223: NONEQUAL
37224: IFFALSE 37236
// begin result := false ;
37226: LD_ADDR_VAR 0 3
37230: PUSH
37231: LD_INT 0
37233: ST_TO_ADDR
// break ;
37234: GO 37238
// end ;
37236: GO 37199
37238: POP
37239: POP
// end ;
37240: LD_VAR 0 3
37244: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37245: LD_INT 0
37247: PPUSH
37248: PPUSH
37249: PPUSH
// pom := GetBase ( fac ) ;
37250: LD_ADDR_VAR 0 5
37254: PUSH
37255: LD_VAR 0 1
37259: PPUSH
37260: CALL_OW 274
37264: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37265: LD_ADDR_VAR 0 4
37269: PUSH
37270: LD_VAR 0 2
37274: PUSH
37275: LD_INT 1
37277: ARRAY
37278: PPUSH
37279: LD_VAR 0 2
37283: PUSH
37284: LD_INT 2
37286: ARRAY
37287: PPUSH
37288: LD_VAR 0 2
37292: PUSH
37293: LD_INT 3
37295: ARRAY
37296: PPUSH
37297: LD_VAR 0 2
37301: PUSH
37302: LD_INT 4
37304: ARRAY
37305: PPUSH
37306: CALL_OW 449
37310: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37311: LD_ADDR_VAR 0 3
37315: PUSH
37316: LD_VAR 0 5
37320: PPUSH
37321: LD_INT 1
37323: PPUSH
37324: CALL_OW 275
37328: PUSH
37329: LD_VAR 0 4
37333: PUSH
37334: LD_INT 1
37336: ARRAY
37337: GREATEREQUAL
37338: PUSH
37339: LD_VAR 0 5
37343: PPUSH
37344: LD_INT 2
37346: PPUSH
37347: CALL_OW 275
37351: PUSH
37352: LD_VAR 0 4
37356: PUSH
37357: LD_INT 2
37359: ARRAY
37360: GREATEREQUAL
37361: AND
37362: PUSH
37363: LD_VAR 0 5
37367: PPUSH
37368: LD_INT 3
37370: PPUSH
37371: CALL_OW 275
37375: PUSH
37376: LD_VAR 0 4
37380: PUSH
37381: LD_INT 3
37383: ARRAY
37384: GREATEREQUAL
37385: AND
37386: ST_TO_ADDR
// end ;
37387: LD_VAR 0 3
37391: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37392: LD_INT 0
37394: PPUSH
37395: PPUSH
37396: PPUSH
37397: PPUSH
// pom := GetBase ( building ) ;
37398: LD_ADDR_VAR 0 3
37402: PUSH
37403: LD_VAR 0 1
37407: PPUSH
37408: CALL_OW 274
37412: ST_TO_ADDR
// if not pom then
37413: LD_VAR 0 3
37417: NOT
37418: IFFALSE 37422
// exit ;
37420: GO 37592
// btype := GetBType ( building ) ;
37422: LD_ADDR_VAR 0 5
37426: PUSH
37427: LD_VAR 0 1
37431: PPUSH
37432: CALL_OW 266
37436: ST_TO_ADDR
// if btype = b_armoury then
37437: LD_VAR 0 5
37441: PUSH
37442: LD_INT 4
37444: EQUAL
37445: IFFALSE 37455
// btype := b_barracks ;
37447: LD_ADDR_VAR 0 5
37451: PUSH
37452: LD_INT 5
37454: ST_TO_ADDR
// if btype = b_depot then
37455: LD_VAR 0 5
37459: PUSH
37460: LD_INT 0
37462: EQUAL
37463: IFFALSE 37473
// btype := b_warehouse ;
37465: LD_ADDR_VAR 0 5
37469: PUSH
37470: LD_INT 1
37472: ST_TO_ADDR
// if btype = b_workshop then
37473: LD_VAR 0 5
37477: PUSH
37478: LD_INT 2
37480: EQUAL
37481: IFFALSE 37491
// btype := b_factory ;
37483: LD_ADDR_VAR 0 5
37487: PUSH
37488: LD_INT 3
37490: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37491: LD_ADDR_VAR 0 4
37495: PUSH
37496: LD_VAR 0 5
37500: PPUSH
37501: LD_VAR 0 1
37505: PPUSH
37506: CALL_OW 248
37510: PPUSH
37511: CALL_OW 450
37515: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37516: LD_ADDR_VAR 0 2
37520: PUSH
37521: LD_VAR 0 3
37525: PPUSH
37526: LD_INT 1
37528: PPUSH
37529: CALL_OW 275
37533: PUSH
37534: LD_VAR 0 4
37538: PUSH
37539: LD_INT 1
37541: ARRAY
37542: GREATEREQUAL
37543: PUSH
37544: LD_VAR 0 3
37548: PPUSH
37549: LD_INT 2
37551: PPUSH
37552: CALL_OW 275
37556: PUSH
37557: LD_VAR 0 4
37561: PUSH
37562: LD_INT 2
37564: ARRAY
37565: GREATEREQUAL
37566: AND
37567: PUSH
37568: LD_VAR 0 3
37572: PPUSH
37573: LD_INT 3
37575: PPUSH
37576: CALL_OW 275
37580: PUSH
37581: LD_VAR 0 4
37585: PUSH
37586: LD_INT 3
37588: ARRAY
37589: GREATEREQUAL
37590: AND
37591: ST_TO_ADDR
// end ;
37592: LD_VAR 0 2
37596: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37597: LD_INT 0
37599: PPUSH
37600: PPUSH
37601: PPUSH
// pom := GetBase ( building ) ;
37602: LD_ADDR_VAR 0 4
37606: PUSH
37607: LD_VAR 0 1
37611: PPUSH
37612: CALL_OW 274
37616: ST_TO_ADDR
// if not pom then
37617: LD_VAR 0 4
37621: NOT
37622: IFFALSE 37626
// exit ;
37624: GO 37727
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37626: LD_ADDR_VAR 0 5
37630: PUSH
37631: LD_VAR 0 2
37635: PPUSH
37636: LD_VAR 0 1
37640: PPUSH
37641: CALL_OW 248
37645: PPUSH
37646: CALL_OW 450
37650: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37651: LD_ADDR_VAR 0 3
37655: PUSH
37656: LD_VAR 0 4
37660: PPUSH
37661: LD_INT 1
37663: PPUSH
37664: CALL_OW 275
37668: PUSH
37669: LD_VAR 0 5
37673: PUSH
37674: LD_INT 1
37676: ARRAY
37677: GREATEREQUAL
37678: PUSH
37679: LD_VAR 0 4
37683: PPUSH
37684: LD_INT 2
37686: PPUSH
37687: CALL_OW 275
37691: PUSH
37692: LD_VAR 0 5
37696: PUSH
37697: LD_INT 2
37699: ARRAY
37700: GREATEREQUAL
37701: AND
37702: PUSH
37703: LD_VAR 0 4
37707: PPUSH
37708: LD_INT 3
37710: PPUSH
37711: CALL_OW 275
37715: PUSH
37716: LD_VAR 0 5
37720: PUSH
37721: LD_INT 3
37723: ARRAY
37724: GREATEREQUAL
37725: AND
37726: ST_TO_ADDR
// end ;
37727: LD_VAR 0 3
37731: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37732: LD_INT 0
37734: PPUSH
37735: PPUSH
37736: PPUSH
37737: PPUSH
37738: PPUSH
37739: PPUSH
37740: PPUSH
37741: PPUSH
37742: PPUSH
37743: PPUSH
37744: PPUSH
// result := false ;
37745: LD_ADDR_VAR 0 8
37749: PUSH
37750: LD_INT 0
37752: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37753: LD_VAR 0 5
37757: NOT
37758: PUSH
37759: LD_VAR 0 1
37763: NOT
37764: OR
37765: PUSH
37766: LD_VAR 0 2
37770: NOT
37771: OR
37772: PUSH
37773: LD_VAR 0 3
37777: NOT
37778: OR
37779: IFFALSE 37783
// exit ;
37781: GO 38597
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37783: LD_ADDR_VAR 0 14
37787: PUSH
37788: LD_VAR 0 1
37792: PPUSH
37793: LD_VAR 0 2
37797: PPUSH
37798: LD_VAR 0 3
37802: PPUSH
37803: LD_VAR 0 4
37807: PPUSH
37808: LD_VAR 0 5
37812: PUSH
37813: LD_INT 1
37815: ARRAY
37816: PPUSH
37817: CALL_OW 248
37821: PPUSH
37822: LD_INT 0
37824: PPUSH
37825: CALL 39830 0 6
37829: ST_TO_ADDR
// if not hexes then
37830: LD_VAR 0 14
37834: NOT
37835: IFFALSE 37839
// exit ;
37837: GO 38597
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37839: LD_ADDR_VAR 0 17
37843: PUSH
37844: LD_VAR 0 5
37848: PPUSH
37849: LD_INT 22
37851: PUSH
37852: LD_VAR 0 13
37856: PPUSH
37857: CALL_OW 255
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 2
37868: PUSH
37869: LD_INT 30
37871: PUSH
37872: LD_INT 0
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 30
37881: PUSH
37882: LD_INT 1
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: LIST
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PPUSH
37898: CALL_OW 72
37902: ST_TO_ADDR
// for i = 1 to hexes do
37903: LD_ADDR_VAR 0 9
37907: PUSH
37908: DOUBLE
37909: LD_INT 1
37911: DEC
37912: ST_TO_ADDR
37913: LD_VAR 0 14
37917: PUSH
37918: FOR_TO
37919: IFFALSE 38595
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37921: LD_ADDR_VAR 0 13
37925: PUSH
37926: LD_VAR 0 14
37930: PUSH
37931: LD_VAR 0 9
37935: ARRAY
37936: PUSH
37937: LD_INT 1
37939: ARRAY
37940: PPUSH
37941: LD_VAR 0 14
37945: PUSH
37946: LD_VAR 0 9
37950: ARRAY
37951: PUSH
37952: LD_INT 2
37954: ARRAY
37955: PPUSH
37956: CALL_OW 428
37960: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37961: LD_VAR 0 14
37965: PUSH
37966: LD_VAR 0 9
37970: ARRAY
37971: PUSH
37972: LD_INT 1
37974: ARRAY
37975: PPUSH
37976: LD_VAR 0 14
37980: PUSH
37981: LD_VAR 0 9
37985: ARRAY
37986: PUSH
37987: LD_INT 2
37989: ARRAY
37990: PPUSH
37991: CALL_OW 351
37995: PUSH
37996: LD_VAR 0 14
38000: PUSH
38001: LD_VAR 0 9
38005: ARRAY
38006: PUSH
38007: LD_INT 1
38009: ARRAY
38010: PPUSH
38011: LD_VAR 0 14
38015: PUSH
38016: LD_VAR 0 9
38020: ARRAY
38021: PUSH
38022: LD_INT 2
38024: ARRAY
38025: PPUSH
38026: CALL_OW 488
38030: NOT
38031: OR
38032: PUSH
38033: LD_VAR 0 13
38037: PPUSH
38038: CALL_OW 247
38042: PUSH
38043: LD_INT 3
38045: EQUAL
38046: OR
38047: IFFALSE 38053
// exit ;
38049: POP
38050: POP
38051: GO 38597
// if not tmp then
38053: LD_VAR 0 13
38057: NOT
38058: IFFALSE 38062
// continue ;
38060: GO 37918
// result := true ;
38062: LD_ADDR_VAR 0 8
38066: PUSH
38067: LD_INT 1
38069: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38070: LD_VAR 0 6
38074: PUSH
38075: LD_VAR 0 13
38079: PPUSH
38080: CALL_OW 247
38084: PUSH
38085: LD_INT 2
38087: EQUAL
38088: AND
38089: PUSH
38090: LD_VAR 0 13
38094: PPUSH
38095: CALL_OW 263
38099: PUSH
38100: LD_INT 1
38102: EQUAL
38103: AND
38104: IFFALSE 38268
// begin if IsDrivenBy ( tmp ) then
38106: LD_VAR 0 13
38110: PPUSH
38111: CALL_OW 311
38115: IFFALSE 38119
// continue ;
38117: GO 37918
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38119: LD_VAR 0 6
38123: PPUSH
38124: LD_INT 3
38126: PUSH
38127: LD_INT 60
38129: PUSH
38130: EMPTY
38131: LIST
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 3
38139: PUSH
38140: LD_INT 55
38142: PUSH
38143: EMPTY
38144: LIST
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PPUSH
38154: CALL_OW 72
38158: IFFALSE 38266
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38160: LD_ADDR_VAR 0 18
38164: PUSH
38165: LD_VAR 0 6
38169: PPUSH
38170: LD_INT 3
38172: PUSH
38173: LD_INT 60
38175: PUSH
38176: EMPTY
38177: LIST
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: LD_INT 3
38185: PUSH
38186: LD_INT 55
38188: PUSH
38189: EMPTY
38190: LIST
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PPUSH
38200: CALL_OW 72
38204: PUSH
38205: LD_INT 1
38207: ARRAY
38208: ST_TO_ADDR
// if IsInUnit ( driver ) then
38209: LD_VAR 0 18
38213: PPUSH
38214: CALL_OW 310
38218: IFFALSE 38229
// ComExit ( driver ) ;
38220: LD_VAR 0 18
38224: PPUSH
38225: CALL 63591 0 1
// AddComEnterUnit ( driver , tmp ) ;
38229: LD_VAR 0 18
38233: PPUSH
38234: LD_VAR 0 13
38238: PPUSH
38239: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38243: LD_VAR 0 18
38247: PPUSH
38248: LD_VAR 0 7
38252: PPUSH
38253: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38257: LD_VAR 0 18
38261: PPUSH
38262: CALL_OW 181
// end ; continue ;
38266: GO 37918
// end ; if not cleaners or not tmp in cleaners then
38268: LD_VAR 0 6
38272: NOT
38273: PUSH
38274: LD_VAR 0 13
38278: PUSH
38279: LD_VAR 0 6
38283: IN
38284: NOT
38285: OR
38286: IFFALSE 38593
// begin if dep then
38288: LD_VAR 0 17
38292: IFFALSE 38428
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38294: LD_ADDR_VAR 0 16
38298: PUSH
38299: LD_VAR 0 17
38303: PUSH
38304: LD_INT 1
38306: ARRAY
38307: PPUSH
38308: CALL_OW 250
38312: PPUSH
38313: LD_VAR 0 17
38317: PUSH
38318: LD_INT 1
38320: ARRAY
38321: PPUSH
38322: CALL_OW 254
38326: PPUSH
38327: LD_INT 5
38329: PPUSH
38330: CALL_OW 272
38334: PUSH
38335: LD_VAR 0 17
38339: PUSH
38340: LD_INT 1
38342: ARRAY
38343: PPUSH
38344: CALL_OW 251
38348: PPUSH
38349: LD_VAR 0 17
38353: PUSH
38354: LD_INT 1
38356: ARRAY
38357: PPUSH
38358: CALL_OW 254
38362: PPUSH
38363: LD_INT 5
38365: PPUSH
38366: CALL_OW 273
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38375: LD_VAR 0 16
38379: PUSH
38380: LD_INT 1
38382: ARRAY
38383: PPUSH
38384: LD_VAR 0 16
38388: PUSH
38389: LD_INT 2
38391: ARRAY
38392: PPUSH
38393: CALL_OW 488
38397: IFFALSE 38428
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38399: LD_VAR 0 13
38403: PPUSH
38404: LD_VAR 0 16
38408: PUSH
38409: LD_INT 1
38411: ARRAY
38412: PPUSH
38413: LD_VAR 0 16
38417: PUSH
38418: LD_INT 2
38420: ARRAY
38421: PPUSH
38422: CALL_OW 111
// continue ;
38426: GO 37918
// end ; end ; r := GetDir ( tmp ) ;
38428: LD_ADDR_VAR 0 15
38432: PUSH
38433: LD_VAR 0 13
38437: PPUSH
38438: CALL_OW 254
38442: ST_TO_ADDR
// if r = 5 then
38443: LD_VAR 0 15
38447: PUSH
38448: LD_INT 5
38450: EQUAL
38451: IFFALSE 38461
// r := 0 ;
38453: LD_ADDR_VAR 0 15
38457: PUSH
38458: LD_INT 0
38460: ST_TO_ADDR
// for j = r to 5 do
38461: LD_ADDR_VAR 0 10
38465: PUSH
38466: DOUBLE
38467: LD_VAR 0 15
38471: DEC
38472: ST_TO_ADDR
38473: LD_INT 5
38475: PUSH
38476: FOR_TO
38477: IFFALSE 38591
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38479: LD_ADDR_VAR 0 11
38483: PUSH
38484: LD_VAR 0 13
38488: PPUSH
38489: CALL_OW 250
38493: PPUSH
38494: LD_VAR 0 10
38498: PPUSH
38499: LD_INT 2
38501: PPUSH
38502: CALL_OW 272
38506: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38507: LD_ADDR_VAR 0 12
38511: PUSH
38512: LD_VAR 0 13
38516: PPUSH
38517: CALL_OW 251
38521: PPUSH
38522: LD_VAR 0 10
38526: PPUSH
38527: LD_INT 2
38529: PPUSH
38530: CALL_OW 273
38534: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38535: LD_VAR 0 11
38539: PPUSH
38540: LD_VAR 0 12
38544: PPUSH
38545: CALL_OW 488
38549: PUSH
38550: LD_VAR 0 11
38554: PPUSH
38555: LD_VAR 0 12
38559: PPUSH
38560: CALL_OW 428
38564: NOT
38565: AND
38566: IFFALSE 38589
// begin ComMoveXY ( tmp , _x , _y ) ;
38568: LD_VAR 0 13
38572: PPUSH
38573: LD_VAR 0 11
38577: PPUSH
38578: LD_VAR 0 12
38582: PPUSH
38583: CALL_OW 111
// break ;
38587: GO 38591
// end ; end ;
38589: GO 38476
38591: POP
38592: POP
// end ; end ;
38593: GO 37918
38595: POP
38596: POP
// end ;
38597: LD_VAR 0 8
38601: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38602: LD_INT 0
38604: PPUSH
// result := true ;
38605: LD_ADDR_VAR 0 3
38609: PUSH
38610: LD_INT 1
38612: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38613: LD_VAR 0 2
38617: PUSH
38618: LD_INT 24
38620: DOUBLE
38621: EQUAL
38622: IFTRUE 38632
38624: LD_INT 33
38626: DOUBLE
38627: EQUAL
38628: IFTRUE 38632
38630: GO 38657
38632: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38633: LD_ADDR_VAR 0 3
38637: PUSH
38638: LD_INT 32
38640: PPUSH
38641: LD_VAR 0 1
38645: PPUSH
38646: CALL_OW 321
38650: PUSH
38651: LD_INT 2
38653: EQUAL
38654: ST_TO_ADDR
38655: GO 38973
38657: LD_INT 20
38659: DOUBLE
38660: EQUAL
38661: IFTRUE 38665
38663: GO 38690
38665: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38666: LD_ADDR_VAR 0 3
38670: PUSH
38671: LD_INT 6
38673: PPUSH
38674: LD_VAR 0 1
38678: PPUSH
38679: CALL_OW 321
38683: PUSH
38684: LD_INT 2
38686: EQUAL
38687: ST_TO_ADDR
38688: GO 38973
38690: LD_INT 22
38692: DOUBLE
38693: EQUAL
38694: IFTRUE 38704
38696: LD_INT 36
38698: DOUBLE
38699: EQUAL
38700: IFTRUE 38704
38702: GO 38729
38704: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38705: LD_ADDR_VAR 0 3
38709: PUSH
38710: LD_INT 15
38712: PPUSH
38713: LD_VAR 0 1
38717: PPUSH
38718: CALL_OW 321
38722: PUSH
38723: LD_INT 2
38725: EQUAL
38726: ST_TO_ADDR
38727: GO 38973
38729: LD_INT 30
38731: DOUBLE
38732: EQUAL
38733: IFTRUE 38737
38735: GO 38762
38737: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38738: LD_ADDR_VAR 0 3
38742: PUSH
38743: LD_INT 20
38745: PPUSH
38746: LD_VAR 0 1
38750: PPUSH
38751: CALL_OW 321
38755: PUSH
38756: LD_INT 2
38758: EQUAL
38759: ST_TO_ADDR
38760: GO 38973
38762: LD_INT 28
38764: DOUBLE
38765: EQUAL
38766: IFTRUE 38776
38768: LD_INT 21
38770: DOUBLE
38771: EQUAL
38772: IFTRUE 38776
38774: GO 38801
38776: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38777: LD_ADDR_VAR 0 3
38781: PUSH
38782: LD_INT 21
38784: PPUSH
38785: LD_VAR 0 1
38789: PPUSH
38790: CALL_OW 321
38794: PUSH
38795: LD_INT 2
38797: EQUAL
38798: ST_TO_ADDR
38799: GO 38973
38801: LD_INT 16
38803: DOUBLE
38804: EQUAL
38805: IFTRUE 38809
38807: GO 38834
38809: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38810: LD_ADDR_VAR 0 3
38814: PUSH
38815: LD_INT 84
38817: PPUSH
38818: LD_VAR 0 1
38822: PPUSH
38823: CALL_OW 321
38827: PUSH
38828: LD_INT 2
38830: EQUAL
38831: ST_TO_ADDR
38832: GO 38973
38834: LD_INT 19
38836: DOUBLE
38837: EQUAL
38838: IFTRUE 38848
38840: LD_INT 23
38842: DOUBLE
38843: EQUAL
38844: IFTRUE 38848
38846: GO 38873
38848: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38849: LD_ADDR_VAR 0 3
38853: PUSH
38854: LD_INT 83
38856: PPUSH
38857: LD_VAR 0 1
38861: PPUSH
38862: CALL_OW 321
38866: PUSH
38867: LD_INT 2
38869: EQUAL
38870: ST_TO_ADDR
38871: GO 38973
38873: LD_INT 17
38875: DOUBLE
38876: EQUAL
38877: IFTRUE 38881
38879: GO 38906
38881: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38882: LD_ADDR_VAR 0 3
38886: PUSH
38887: LD_INT 39
38889: PPUSH
38890: LD_VAR 0 1
38894: PPUSH
38895: CALL_OW 321
38899: PUSH
38900: LD_INT 2
38902: EQUAL
38903: ST_TO_ADDR
38904: GO 38973
38906: LD_INT 18
38908: DOUBLE
38909: EQUAL
38910: IFTRUE 38914
38912: GO 38939
38914: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38915: LD_ADDR_VAR 0 3
38919: PUSH
38920: LD_INT 40
38922: PPUSH
38923: LD_VAR 0 1
38927: PPUSH
38928: CALL_OW 321
38932: PUSH
38933: LD_INT 2
38935: EQUAL
38936: ST_TO_ADDR
38937: GO 38973
38939: LD_INT 27
38941: DOUBLE
38942: EQUAL
38943: IFTRUE 38947
38945: GO 38972
38947: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38948: LD_ADDR_VAR 0 3
38952: PUSH
38953: LD_INT 35
38955: PPUSH
38956: LD_VAR 0 1
38960: PPUSH
38961: CALL_OW 321
38965: PUSH
38966: LD_INT 2
38968: EQUAL
38969: ST_TO_ADDR
38970: GO 38973
38972: POP
// end ;
38973: LD_VAR 0 3
38977: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38978: LD_INT 0
38980: PPUSH
38981: PPUSH
38982: PPUSH
38983: PPUSH
38984: PPUSH
38985: PPUSH
38986: PPUSH
38987: PPUSH
38988: PPUSH
38989: PPUSH
38990: PPUSH
// result := false ;
38991: LD_ADDR_VAR 0 6
38995: PUSH
38996: LD_INT 0
38998: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38999: LD_VAR 0 1
39003: NOT
39004: PUSH
39005: LD_VAR 0 1
39009: PPUSH
39010: CALL_OW 266
39014: PUSH
39015: LD_INT 0
39017: PUSH
39018: LD_INT 1
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: IN
39025: NOT
39026: OR
39027: PUSH
39028: LD_VAR 0 2
39032: NOT
39033: OR
39034: PUSH
39035: LD_VAR 0 5
39039: PUSH
39040: LD_INT 0
39042: PUSH
39043: LD_INT 1
39045: PUSH
39046: LD_INT 2
39048: PUSH
39049: LD_INT 3
39051: PUSH
39052: LD_INT 4
39054: PUSH
39055: LD_INT 5
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: IN
39066: NOT
39067: OR
39068: PUSH
39069: LD_VAR 0 3
39073: PPUSH
39074: LD_VAR 0 4
39078: PPUSH
39079: CALL_OW 488
39083: NOT
39084: OR
39085: IFFALSE 39089
// exit ;
39087: GO 39825
// side := GetSide ( depot ) ;
39089: LD_ADDR_VAR 0 9
39093: PUSH
39094: LD_VAR 0 1
39098: PPUSH
39099: CALL_OW 255
39103: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39104: LD_VAR 0 9
39108: PPUSH
39109: LD_VAR 0 2
39113: PPUSH
39114: CALL 38602 0 2
39118: NOT
39119: IFFALSE 39123
// exit ;
39121: GO 39825
// pom := GetBase ( depot ) ;
39123: LD_ADDR_VAR 0 10
39127: PUSH
39128: LD_VAR 0 1
39132: PPUSH
39133: CALL_OW 274
39137: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39138: LD_ADDR_VAR 0 11
39142: PUSH
39143: LD_VAR 0 2
39147: PPUSH
39148: LD_VAR 0 1
39152: PPUSH
39153: CALL_OW 248
39157: PPUSH
39158: CALL_OW 450
39162: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39163: LD_VAR 0 10
39167: PPUSH
39168: LD_INT 1
39170: PPUSH
39171: CALL_OW 275
39175: PUSH
39176: LD_VAR 0 11
39180: PUSH
39181: LD_INT 1
39183: ARRAY
39184: GREATEREQUAL
39185: PUSH
39186: LD_VAR 0 10
39190: PPUSH
39191: LD_INT 2
39193: PPUSH
39194: CALL_OW 275
39198: PUSH
39199: LD_VAR 0 11
39203: PUSH
39204: LD_INT 2
39206: ARRAY
39207: GREATEREQUAL
39208: AND
39209: PUSH
39210: LD_VAR 0 10
39214: PPUSH
39215: LD_INT 3
39217: PPUSH
39218: CALL_OW 275
39222: PUSH
39223: LD_VAR 0 11
39227: PUSH
39228: LD_INT 3
39230: ARRAY
39231: GREATEREQUAL
39232: AND
39233: NOT
39234: IFFALSE 39238
// exit ;
39236: GO 39825
// if GetBType ( depot ) = b_depot then
39238: LD_VAR 0 1
39242: PPUSH
39243: CALL_OW 266
39247: PUSH
39248: LD_INT 0
39250: EQUAL
39251: IFFALSE 39263
// dist := 28 else
39253: LD_ADDR_VAR 0 14
39257: PUSH
39258: LD_INT 28
39260: ST_TO_ADDR
39261: GO 39271
// dist := 36 ;
39263: LD_ADDR_VAR 0 14
39267: PUSH
39268: LD_INT 36
39270: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39271: LD_VAR 0 1
39275: PPUSH
39276: LD_VAR 0 3
39280: PPUSH
39281: LD_VAR 0 4
39285: PPUSH
39286: CALL_OW 297
39290: PUSH
39291: LD_VAR 0 14
39295: GREATER
39296: IFFALSE 39300
// exit ;
39298: GO 39825
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39300: LD_ADDR_VAR 0 12
39304: PUSH
39305: LD_VAR 0 2
39309: PPUSH
39310: LD_VAR 0 3
39314: PPUSH
39315: LD_VAR 0 4
39319: PPUSH
39320: LD_VAR 0 5
39324: PPUSH
39325: LD_VAR 0 1
39329: PPUSH
39330: CALL_OW 248
39334: PPUSH
39335: LD_INT 0
39337: PPUSH
39338: CALL 39830 0 6
39342: ST_TO_ADDR
// if not hexes then
39343: LD_VAR 0 12
39347: NOT
39348: IFFALSE 39352
// exit ;
39350: GO 39825
// hex := GetHexInfo ( x , y ) ;
39352: LD_ADDR_VAR 0 15
39356: PUSH
39357: LD_VAR 0 3
39361: PPUSH
39362: LD_VAR 0 4
39366: PPUSH
39367: CALL_OW 546
39371: ST_TO_ADDR
// if hex [ 1 ] then
39372: LD_VAR 0 15
39376: PUSH
39377: LD_INT 1
39379: ARRAY
39380: IFFALSE 39384
// exit ;
39382: GO 39825
// height := hex [ 2 ] ;
39384: LD_ADDR_VAR 0 13
39388: PUSH
39389: LD_VAR 0 15
39393: PUSH
39394: LD_INT 2
39396: ARRAY
39397: ST_TO_ADDR
// for i = 1 to hexes do
39398: LD_ADDR_VAR 0 7
39402: PUSH
39403: DOUBLE
39404: LD_INT 1
39406: DEC
39407: ST_TO_ADDR
39408: LD_VAR 0 12
39412: PUSH
39413: FOR_TO
39414: IFFALSE 39744
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39416: LD_VAR 0 12
39420: PUSH
39421: LD_VAR 0 7
39425: ARRAY
39426: PUSH
39427: LD_INT 1
39429: ARRAY
39430: PPUSH
39431: LD_VAR 0 12
39435: PUSH
39436: LD_VAR 0 7
39440: ARRAY
39441: PUSH
39442: LD_INT 2
39444: ARRAY
39445: PPUSH
39446: CALL_OW 488
39450: NOT
39451: PUSH
39452: LD_VAR 0 12
39456: PUSH
39457: LD_VAR 0 7
39461: ARRAY
39462: PUSH
39463: LD_INT 1
39465: ARRAY
39466: PPUSH
39467: LD_VAR 0 12
39471: PUSH
39472: LD_VAR 0 7
39476: ARRAY
39477: PUSH
39478: LD_INT 2
39480: ARRAY
39481: PPUSH
39482: CALL_OW 428
39486: PUSH
39487: LD_INT 0
39489: GREATER
39490: OR
39491: PUSH
39492: LD_VAR 0 12
39496: PUSH
39497: LD_VAR 0 7
39501: ARRAY
39502: PUSH
39503: LD_INT 1
39505: ARRAY
39506: PPUSH
39507: LD_VAR 0 12
39511: PUSH
39512: LD_VAR 0 7
39516: ARRAY
39517: PUSH
39518: LD_INT 2
39520: ARRAY
39521: PPUSH
39522: CALL_OW 351
39526: OR
39527: IFFALSE 39533
// exit ;
39529: POP
39530: POP
39531: GO 39825
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39533: LD_ADDR_VAR 0 8
39537: PUSH
39538: LD_VAR 0 12
39542: PUSH
39543: LD_VAR 0 7
39547: ARRAY
39548: PUSH
39549: LD_INT 1
39551: ARRAY
39552: PPUSH
39553: LD_VAR 0 12
39557: PUSH
39558: LD_VAR 0 7
39562: ARRAY
39563: PUSH
39564: LD_INT 2
39566: ARRAY
39567: PPUSH
39568: CALL_OW 546
39572: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39573: LD_VAR 0 8
39577: PUSH
39578: LD_INT 1
39580: ARRAY
39581: PUSH
39582: LD_VAR 0 8
39586: PUSH
39587: LD_INT 2
39589: ARRAY
39590: PUSH
39591: LD_VAR 0 13
39595: PUSH
39596: LD_INT 2
39598: PLUS
39599: GREATER
39600: OR
39601: PUSH
39602: LD_VAR 0 8
39606: PUSH
39607: LD_INT 2
39609: ARRAY
39610: PUSH
39611: LD_VAR 0 13
39615: PUSH
39616: LD_INT 2
39618: MINUS
39619: LESS
39620: OR
39621: PUSH
39622: LD_VAR 0 8
39626: PUSH
39627: LD_INT 3
39629: ARRAY
39630: PUSH
39631: LD_INT 0
39633: PUSH
39634: LD_INT 8
39636: PUSH
39637: LD_INT 9
39639: PUSH
39640: LD_INT 10
39642: PUSH
39643: LD_INT 11
39645: PUSH
39646: LD_INT 12
39648: PUSH
39649: LD_INT 13
39651: PUSH
39652: LD_INT 16
39654: PUSH
39655: LD_INT 17
39657: PUSH
39658: LD_INT 18
39660: PUSH
39661: LD_INT 19
39663: PUSH
39664: LD_INT 20
39666: PUSH
39667: LD_INT 21
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: IN
39685: NOT
39686: OR
39687: PUSH
39688: LD_VAR 0 8
39692: PUSH
39693: LD_INT 5
39695: ARRAY
39696: NOT
39697: OR
39698: PUSH
39699: LD_VAR 0 8
39703: PUSH
39704: LD_INT 6
39706: ARRAY
39707: PUSH
39708: LD_INT 1
39710: PUSH
39711: LD_INT 2
39713: PUSH
39714: LD_INT 7
39716: PUSH
39717: LD_INT 9
39719: PUSH
39720: LD_INT 10
39722: PUSH
39723: LD_INT 11
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: IN
39734: NOT
39735: OR
39736: IFFALSE 39742
// exit ;
39738: POP
39739: POP
39740: GO 39825
// end ;
39742: GO 39413
39744: POP
39745: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39746: LD_VAR 0 9
39750: PPUSH
39751: LD_VAR 0 3
39755: PPUSH
39756: LD_VAR 0 4
39760: PPUSH
39761: LD_INT 20
39763: PPUSH
39764: CALL 31777 0 4
39768: PUSH
39769: LD_INT 4
39771: ARRAY
39772: IFFALSE 39776
// exit ;
39774: GO 39825
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39776: LD_VAR 0 2
39780: PUSH
39781: LD_INT 29
39783: PUSH
39784: LD_INT 30
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: IN
39791: PUSH
39792: LD_VAR 0 3
39796: PPUSH
39797: LD_VAR 0 4
39801: PPUSH
39802: LD_VAR 0 9
39806: PPUSH
39807: CALL_OW 440
39811: NOT
39812: AND
39813: IFFALSE 39817
// exit ;
39815: GO 39825
// result := true ;
39817: LD_ADDR_VAR 0 6
39821: PUSH
39822: LD_INT 1
39824: ST_TO_ADDR
// end ;
39825: LD_VAR 0 6
39829: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39830: LD_INT 0
39832: PPUSH
39833: PPUSH
39834: PPUSH
39835: PPUSH
39836: PPUSH
39837: PPUSH
39838: PPUSH
39839: PPUSH
39840: PPUSH
39841: PPUSH
39842: PPUSH
39843: PPUSH
39844: PPUSH
39845: PPUSH
39846: PPUSH
39847: PPUSH
39848: PPUSH
39849: PPUSH
39850: PPUSH
39851: PPUSH
39852: PPUSH
39853: PPUSH
39854: PPUSH
39855: PPUSH
39856: PPUSH
39857: PPUSH
39858: PPUSH
39859: PPUSH
39860: PPUSH
39861: PPUSH
39862: PPUSH
39863: PPUSH
39864: PPUSH
39865: PPUSH
39866: PPUSH
39867: PPUSH
39868: PPUSH
39869: PPUSH
39870: PPUSH
39871: PPUSH
39872: PPUSH
39873: PPUSH
39874: PPUSH
39875: PPUSH
39876: PPUSH
39877: PPUSH
39878: PPUSH
39879: PPUSH
39880: PPUSH
39881: PPUSH
39882: PPUSH
39883: PPUSH
39884: PPUSH
39885: PPUSH
39886: PPUSH
39887: PPUSH
39888: PPUSH
39889: PPUSH
// result = [ ] ;
39890: LD_ADDR_VAR 0 7
39894: PUSH
39895: EMPTY
39896: ST_TO_ADDR
// temp_list = [ ] ;
39897: LD_ADDR_VAR 0 9
39901: PUSH
39902: EMPTY
39903: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39904: LD_VAR 0 4
39908: PUSH
39909: LD_INT 0
39911: PUSH
39912: LD_INT 1
39914: PUSH
39915: LD_INT 2
39917: PUSH
39918: LD_INT 3
39920: PUSH
39921: LD_INT 4
39923: PUSH
39924: LD_INT 5
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: IN
39935: NOT
39936: PUSH
39937: LD_VAR 0 1
39941: PUSH
39942: LD_INT 0
39944: PUSH
39945: LD_INT 1
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: IN
39952: PUSH
39953: LD_VAR 0 5
39957: PUSH
39958: LD_INT 1
39960: PUSH
39961: LD_INT 2
39963: PUSH
39964: LD_INT 3
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: LIST
39971: IN
39972: NOT
39973: AND
39974: OR
39975: IFFALSE 39979
// exit ;
39977: GO 58370
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39979: LD_VAR 0 1
39983: PUSH
39984: LD_INT 6
39986: PUSH
39987: LD_INT 7
39989: PUSH
39990: LD_INT 8
39992: PUSH
39993: LD_INT 13
39995: PUSH
39996: LD_INT 12
39998: PUSH
39999: LD_INT 15
40001: PUSH
40002: LD_INT 11
40004: PUSH
40005: LD_INT 14
40007: PUSH
40008: LD_INT 10
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: IN
40022: IFFALSE 40032
// btype = b_lab ;
40024: LD_ADDR_VAR 0 1
40028: PUSH
40029: LD_INT 6
40031: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40032: LD_VAR 0 6
40036: PUSH
40037: LD_INT 0
40039: PUSH
40040: LD_INT 1
40042: PUSH
40043: LD_INT 2
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: LIST
40050: IN
40051: NOT
40052: PUSH
40053: LD_VAR 0 1
40057: PUSH
40058: LD_INT 0
40060: PUSH
40061: LD_INT 1
40063: PUSH
40064: LD_INT 2
40066: PUSH
40067: LD_INT 3
40069: PUSH
40070: LD_INT 6
40072: PUSH
40073: LD_INT 36
40075: PUSH
40076: LD_INT 4
40078: PUSH
40079: LD_INT 5
40081: PUSH
40082: LD_INT 31
40084: PUSH
40085: LD_INT 32
40087: PUSH
40088: LD_INT 33
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: IN
40104: NOT
40105: PUSH
40106: LD_VAR 0 6
40110: PUSH
40111: LD_INT 1
40113: EQUAL
40114: AND
40115: OR
40116: PUSH
40117: LD_VAR 0 1
40121: PUSH
40122: LD_INT 2
40124: PUSH
40125: LD_INT 3
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: IN
40132: NOT
40133: PUSH
40134: LD_VAR 0 6
40138: PUSH
40139: LD_INT 2
40141: EQUAL
40142: AND
40143: OR
40144: IFFALSE 40154
// mode = 0 ;
40146: LD_ADDR_VAR 0 6
40150: PUSH
40151: LD_INT 0
40153: ST_TO_ADDR
// case mode of 0 :
40154: LD_VAR 0 6
40158: PUSH
40159: LD_INT 0
40161: DOUBLE
40162: EQUAL
40163: IFTRUE 40167
40165: GO 51620
40167: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40168: LD_ADDR_VAR 0 11
40172: PUSH
40173: LD_INT 0
40175: PUSH
40176: LD_INT 0
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 0
40185: PUSH
40186: LD_INT 1
40188: NEG
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 1
40196: PUSH
40197: LD_INT 0
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 1
40206: PUSH
40207: LD_INT 1
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 0
40216: PUSH
40217: LD_INT 1
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 1
40226: NEG
40227: PUSH
40228: LD_INT 0
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 1
40237: NEG
40238: PUSH
40239: LD_INT 1
40241: NEG
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 1
40249: NEG
40250: PUSH
40251: LD_INT 2
40253: NEG
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 0
40261: PUSH
40262: LD_INT 2
40264: NEG
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 1
40272: PUSH
40273: LD_INT 1
40275: NEG
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 1
40283: PUSH
40284: LD_INT 2
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 0
40293: PUSH
40294: LD_INT 2
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 1
40303: NEG
40304: PUSH
40305: LD_INT 1
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 1
40314: PUSH
40315: LD_INT 3
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 0
40324: PUSH
40325: LD_INT 3
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 1
40334: NEG
40335: PUSH
40336: LD_INT 2
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40361: LD_ADDR_VAR 0 12
40365: PUSH
40366: LD_INT 0
40368: PUSH
40369: LD_INT 0
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 0
40378: PUSH
40379: LD_INT 1
40381: NEG
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 1
40389: PUSH
40390: LD_INT 0
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 1
40399: PUSH
40400: LD_INT 1
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 0
40409: PUSH
40410: LD_INT 1
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 1
40419: NEG
40420: PUSH
40421: LD_INT 0
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 1
40430: NEG
40431: PUSH
40432: LD_INT 1
40434: NEG
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 1
40442: PUSH
40443: LD_INT 1
40445: NEG
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 2
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 2
40463: PUSH
40464: LD_INT 1
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 1
40473: NEG
40474: PUSH
40475: LD_INT 1
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: LD_INT 2
40484: NEG
40485: PUSH
40486: LD_INT 0
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 2
40495: NEG
40496: PUSH
40497: LD_INT 1
40499: NEG
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 2
40507: NEG
40508: PUSH
40509: LD_INT 1
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 3
40518: NEG
40519: PUSH
40520: LD_INT 0
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 3
40529: NEG
40530: PUSH
40531: LD_INT 1
40533: NEG
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40557: LD_ADDR_VAR 0 13
40561: PUSH
40562: LD_INT 0
40564: PUSH
40565: LD_INT 0
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 0
40574: PUSH
40575: LD_INT 1
40577: NEG
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 1
40585: PUSH
40586: LD_INT 0
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 1
40595: PUSH
40596: LD_INT 1
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: LD_INT 0
40605: PUSH
40606: LD_INT 1
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 1
40615: NEG
40616: PUSH
40617: LD_INT 0
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 1
40626: NEG
40627: PUSH
40628: LD_INT 1
40630: NEG
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 1
40638: NEG
40639: PUSH
40640: LD_INT 2
40642: NEG
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 2
40650: PUSH
40651: LD_INT 1
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 2
40660: PUSH
40661: LD_INT 2
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 1
40670: PUSH
40671: LD_INT 2
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 2
40680: NEG
40681: PUSH
40682: LD_INT 1
40684: NEG
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 2
40692: NEG
40693: PUSH
40694: LD_INT 2
40696: NEG
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 2
40704: NEG
40705: PUSH
40706: LD_INT 3
40708: NEG
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 3
40716: NEG
40717: PUSH
40718: LD_INT 2
40720: NEG
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 3
40728: NEG
40729: PUSH
40730: LD_INT 3
40732: NEG
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40756: LD_ADDR_VAR 0 14
40760: PUSH
40761: LD_INT 0
40763: PUSH
40764: LD_INT 0
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 0
40773: PUSH
40774: LD_INT 1
40776: NEG
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 1
40784: PUSH
40785: LD_INT 0
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 1
40794: PUSH
40795: LD_INT 1
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 0
40804: PUSH
40805: LD_INT 1
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 1
40814: NEG
40815: PUSH
40816: LD_INT 0
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 1
40825: NEG
40826: PUSH
40827: LD_INT 1
40829: NEG
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 1
40837: NEG
40838: PUSH
40839: LD_INT 2
40841: NEG
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 0
40849: PUSH
40850: LD_INT 2
40852: NEG
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 1
40860: PUSH
40861: LD_INT 1
40863: NEG
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 1
40871: PUSH
40872: LD_INT 2
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 0
40881: PUSH
40882: LD_INT 2
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 1
40891: NEG
40892: PUSH
40893: LD_INT 1
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 1
40902: NEG
40903: PUSH
40904: LD_INT 3
40906: NEG
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 0
40914: PUSH
40915: LD_INT 3
40917: NEG
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 1
40925: PUSH
40926: LD_INT 2
40928: NEG
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40952: LD_ADDR_VAR 0 15
40956: PUSH
40957: LD_INT 0
40959: PUSH
40960: LD_INT 0
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 0
40969: PUSH
40970: LD_INT 1
40972: NEG
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 1
40980: PUSH
40981: LD_INT 0
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 1
40990: PUSH
40991: LD_INT 1
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 0
41000: PUSH
41001: LD_INT 1
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 1
41010: NEG
41011: PUSH
41012: LD_INT 0
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 1
41021: NEG
41022: PUSH
41023: LD_INT 1
41025: NEG
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 1
41033: PUSH
41034: LD_INT 1
41036: NEG
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 2
41044: PUSH
41045: LD_INT 0
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 2
41054: PUSH
41055: LD_INT 1
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 1
41064: NEG
41065: PUSH
41066: LD_INT 1
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 2
41075: NEG
41076: PUSH
41077: LD_INT 0
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 2
41086: NEG
41087: PUSH
41088: LD_INT 1
41090: NEG
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 2
41098: PUSH
41099: LD_INT 1
41101: NEG
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 3
41109: PUSH
41110: LD_INT 0
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 3
41119: PUSH
41120: LD_INT 1
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41145: LD_ADDR_VAR 0 16
41149: PUSH
41150: LD_INT 0
41152: PUSH
41153: LD_INT 0
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 0
41162: PUSH
41163: LD_INT 1
41165: NEG
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 1
41173: PUSH
41174: LD_INT 0
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 1
41183: PUSH
41184: LD_INT 1
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 0
41193: PUSH
41194: LD_INT 1
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 1
41203: NEG
41204: PUSH
41205: LD_INT 0
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 1
41214: NEG
41215: PUSH
41216: LD_INT 1
41218: NEG
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 1
41226: NEG
41227: PUSH
41228: LD_INT 2
41230: NEG
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 2
41238: PUSH
41239: LD_INT 1
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 2
41248: PUSH
41249: LD_INT 2
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 1
41258: PUSH
41259: LD_INT 2
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 2
41268: NEG
41269: PUSH
41270: LD_INT 1
41272: NEG
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 2
41280: NEG
41281: PUSH
41282: LD_INT 2
41284: NEG
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 3
41292: PUSH
41293: LD_INT 2
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 3
41302: PUSH
41303: LD_INT 3
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 2
41312: PUSH
41313: LD_INT 3
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41338: LD_ADDR_VAR 0 17
41342: PUSH
41343: LD_INT 0
41345: PUSH
41346: LD_INT 0
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 0
41355: PUSH
41356: LD_INT 1
41358: NEG
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 1
41366: PUSH
41367: LD_INT 0
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 1
41376: PUSH
41377: LD_INT 1
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 0
41386: PUSH
41387: LD_INT 1
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 1
41396: NEG
41397: PUSH
41398: LD_INT 0
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 1
41407: NEG
41408: PUSH
41409: LD_INT 1
41411: NEG
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 1
41419: NEG
41420: PUSH
41421: LD_INT 2
41423: NEG
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 0
41431: PUSH
41432: LD_INT 2
41434: NEG
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 1
41442: PUSH
41443: LD_INT 1
41445: NEG
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 2
41453: PUSH
41454: LD_INT 0
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 2
41463: PUSH
41464: LD_INT 1
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 2
41473: PUSH
41474: LD_INT 2
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 1
41483: PUSH
41484: LD_INT 2
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 0
41493: PUSH
41494: LD_INT 2
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 1
41503: NEG
41504: PUSH
41505: LD_INT 1
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 2
41514: NEG
41515: PUSH
41516: LD_INT 0
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 2
41525: NEG
41526: PUSH
41527: LD_INT 1
41529: NEG
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 2
41537: NEG
41538: PUSH
41539: LD_INT 2
41541: NEG
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41568: LD_ADDR_VAR 0 18
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: LD_INT 0
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 0
41585: PUSH
41586: LD_INT 1
41588: NEG
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 1
41596: PUSH
41597: LD_INT 0
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 1
41606: PUSH
41607: LD_INT 1
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 0
41616: PUSH
41617: LD_INT 1
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 1
41626: NEG
41627: PUSH
41628: LD_INT 0
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 1
41637: NEG
41638: PUSH
41639: LD_INT 1
41641: NEG
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 1
41649: NEG
41650: PUSH
41651: LD_INT 2
41653: NEG
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 0
41661: PUSH
41662: LD_INT 2
41664: NEG
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 1
41672: PUSH
41673: LD_INT 1
41675: NEG
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 2
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 2
41693: PUSH
41694: LD_INT 1
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 2
41703: PUSH
41704: LD_INT 2
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 1
41713: PUSH
41714: LD_INT 2
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 0
41723: PUSH
41724: LD_INT 2
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 1
41733: NEG
41734: PUSH
41735: LD_INT 1
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 2
41744: NEG
41745: PUSH
41746: LD_INT 0
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 2
41755: NEG
41756: PUSH
41757: LD_INT 1
41759: NEG
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 2
41767: NEG
41768: PUSH
41769: LD_INT 2
41771: NEG
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41798: LD_ADDR_VAR 0 19
41802: PUSH
41803: LD_INT 0
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 0
41815: PUSH
41816: LD_INT 1
41818: NEG
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 1
41826: PUSH
41827: LD_INT 0
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 1
41836: PUSH
41837: LD_INT 1
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 0
41846: PUSH
41847: LD_INT 1
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 1
41856: NEG
41857: PUSH
41858: LD_INT 0
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 1
41867: NEG
41868: PUSH
41869: LD_INT 1
41871: NEG
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 1
41879: NEG
41880: PUSH
41881: LD_INT 2
41883: NEG
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 0
41891: PUSH
41892: LD_INT 2
41894: NEG
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 1
41902: PUSH
41903: LD_INT 1
41905: NEG
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 2
41913: PUSH
41914: LD_INT 0
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 2
41923: PUSH
41924: LD_INT 1
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 2
41933: PUSH
41934: LD_INT 2
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 1
41943: PUSH
41944: LD_INT 2
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 0
41953: PUSH
41954: LD_INT 2
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 1
41963: NEG
41964: PUSH
41965: LD_INT 1
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 2
41974: NEG
41975: PUSH
41976: LD_INT 0
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 2
41985: NEG
41986: PUSH
41987: LD_INT 1
41989: NEG
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 2
41997: NEG
41998: PUSH
41999: LD_INT 2
42001: NEG
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42028: LD_ADDR_VAR 0 20
42032: PUSH
42033: LD_INT 0
42035: PUSH
42036: LD_INT 0
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 0
42045: PUSH
42046: LD_INT 1
42048: NEG
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 1
42056: PUSH
42057: LD_INT 0
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 1
42066: PUSH
42067: LD_INT 1
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 0
42076: PUSH
42077: LD_INT 1
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 1
42086: NEG
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 1
42097: NEG
42098: PUSH
42099: LD_INT 1
42101: NEG
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 1
42109: NEG
42110: PUSH
42111: LD_INT 2
42113: NEG
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: LD_INT 2
42124: NEG
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 1
42132: PUSH
42133: LD_INT 1
42135: NEG
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 2
42143: PUSH
42144: LD_INT 0
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 2
42153: PUSH
42154: LD_INT 1
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 2
42163: PUSH
42164: LD_INT 2
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 1
42173: PUSH
42174: LD_INT 2
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 0
42183: PUSH
42184: LD_INT 2
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 1
42193: NEG
42194: PUSH
42195: LD_INT 1
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 2
42204: NEG
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 2
42215: NEG
42216: PUSH
42217: LD_INT 1
42219: NEG
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 2
42227: NEG
42228: PUSH
42229: LD_INT 2
42231: NEG
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42258: LD_ADDR_VAR 0 21
42262: PUSH
42263: LD_INT 0
42265: PUSH
42266: LD_INT 0
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 0
42275: PUSH
42276: LD_INT 1
42278: NEG
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 1
42286: PUSH
42287: LD_INT 0
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 1
42296: PUSH
42297: LD_INT 1
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 0
42306: PUSH
42307: LD_INT 1
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 1
42316: NEG
42317: PUSH
42318: LD_INT 0
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 1
42327: NEG
42328: PUSH
42329: LD_INT 1
42331: NEG
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: LD_INT 2
42343: NEG
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: LD_INT 2
42354: NEG
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: LD_INT 1
42365: NEG
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 2
42373: PUSH
42374: LD_INT 0
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 2
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 2
42393: PUSH
42394: LD_INT 2
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 1
42403: PUSH
42404: LD_INT 2
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 0
42413: PUSH
42414: LD_INT 2
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 1
42423: NEG
42424: PUSH
42425: LD_INT 1
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 2
42434: NEG
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 2
42445: NEG
42446: PUSH
42447: LD_INT 1
42449: NEG
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 2
42457: NEG
42458: PUSH
42459: LD_INT 2
42461: NEG
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42488: LD_ADDR_VAR 0 22
42492: PUSH
42493: LD_INT 0
42495: PUSH
42496: LD_INT 0
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 0
42505: PUSH
42506: LD_INT 1
42508: NEG
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 1
42516: PUSH
42517: LD_INT 0
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 1
42526: PUSH
42527: LD_INT 1
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 0
42536: PUSH
42537: LD_INT 1
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 1
42546: NEG
42547: PUSH
42548: LD_INT 0
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 1
42557: NEG
42558: PUSH
42559: LD_INT 1
42561: NEG
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 1
42569: NEG
42570: PUSH
42571: LD_INT 2
42573: NEG
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 0
42581: PUSH
42582: LD_INT 2
42584: NEG
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 1
42592: PUSH
42593: LD_INT 1
42595: NEG
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 2
42603: PUSH
42604: LD_INT 0
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 2
42613: PUSH
42614: LD_INT 1
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 2
42623: PUSH
42624: LD_INT 2
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 1
42633: PUSH
42634: LD_INT 2
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 0
42643: PUSH
42644: LD_INT 2
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 1
42653: NEG
42654: PUSH
42655: LD_INT 1
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 2
42664: NEG
42665: PUSH
42666: LD_INT 0
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 2
42675: NEG
42676: PUSH
42677: LD_INT 1
42679: NEG
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 2
42687: NEG
42688: PUSH
42689: LD_INT 2
42691: NEG
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42718: LD_ADDR_VAR 0 23
42722: PUSH
42723: LD_INT 0
42725: PUSH
42726: LD_INT 0
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 0
42735: PUSH
42736: LD_INT 1
42738: NEG
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 1
42746: PUSH
42747: LD_INT 0
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 1
42756: PUSH
42757: LD_INT 1
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 0
42766: PUSH
42767: LD_INT 1
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 1
42776: NEG
42777: PUSH
42778: LD_INT 0
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 1
42787: NEG
42788: PUSH
42789: LD_INT 1
42791: NEG
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 1
42799: NEG
42800: PUSH
42801: LD_INT 2
42803: NEG
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 0
42811: PUSH
42812: LD_INT 2
42814: NEG
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 1
42822: PUSH
42823: LD_INT 1
42825: NEG
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 2
42833: PUSH
42834: LD_INT 0
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 2
42843: PUSH
42844: LD_INT 1
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 2
42853: PUSH
42854: LD_INT 2
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 1
42863: PUSH
42864: LD_INT 2
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 0
42873: PUSH
42874: LD_INT 2
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 1
42883: NEG
42884: PUSH
42885: LD_INT 1
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 2
42894: NEG
42895: PUSH
42896: LD_INT 0
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 2
42905: NEG
42906: PUSH
42907: LD_INT 1
42909: NEG
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 2
42917: NEG
42918: PUSH
42919: LD_INT 2
42921: NEG
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 2
42929: NEG
42930: PUSH
42931: LD_INT 3
42933: NEG
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 1
42941: NEG
42942: PUSH
42943: LD_INT 3
42945: NEG
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 1
42953: PUSH
42954: LD_INT 2
42956: NEG
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 2
42964: PUSH
42965: LD_INT 1
42967: NEG
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42998: LD_ADDR_VAR 0 24
43002: PUSH
43003: LD_INT 0
43005: PUSH
43006: LD_INT 0
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: LD_INT 1
43018: NEG
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 1
43026: PUSH
43027: LD_INT 0
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 1
43036: PUSH
43037: LD_INT 1
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 0
43046: PUSH
43047: LD_INT 1
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 1
43056: NEG
43057: PUSH
43058: LD_INT 0
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 1
43067: NEG
43068: PUSH
43069: LD_INT 1
43071: NEG
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 1
43079: NEG
43080: PUSH
43081: LD_INT 2
43083: NEG
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: LD_INT 2
43094: NEG
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 1
43102: PUSH
43103: LD_INT 1
43105: NEG
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 2
43113: PUSH
43114: LD_INT 0
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 2
43123: PUSH
43124: LD_INT 1
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 2
43133: PUSH
43134: LD_INT 2
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 1
43143: PUSH
43144: LD_INT 2
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 0
43153: PUSH
43154: LD_INT 2
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 1
43163: NEG
43164: PUSH
43165: LD_INT 1
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 2
43174: NEG
43175: PUSH
43176: LD_INT 0
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 2
43185: NEG
43186: PUSH
43187: LD_INT 1
43189: NEG
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 2
43197: NEG
43198: PUSH
43199: LD_INT 2
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 1
43209: PUSH
43210: LD_INT 2
43212: NEG
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 2
43220: PUSH
43221: LD_INT 1
43223: NEG
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 3
43231: PUSH
43232: LD_INT 1
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 3
43241: PUSH
43242: LD_INT 2
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43274: LD_ADDR_VAR 0 25
43278: PUSH
43279: LD_INT 0
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 0
43291: PUSH
43292: LD_INT 1
43294: NEG
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 1
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 1
43312: PUSH
43313: LD_INT 1
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 0
43322: PUSH
43323: LD_INT 1
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 1
43332: NEG
43333: PUSH
43334: LD_INT 0
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 1
43343: NEG
43344: PUSH
43345: LD_INT 1
43347: NEG
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 1
43355: NEG
43356: PUSH
43357: LD_INT 2
43359: NEG
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 0
43367: PUSH
43368: LD_INT 2
43370: NEG
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 1
43378: PUSH
43379: LD_INT 1
43381: NEG
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 2
43389: PUSH
43390: LD_INT 0
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 2
43399: PUSH
43400: LD_INT 1
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 2
43409: PUSH
43410: LD_INT 2
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 1
43419: PUSH
43420: LD_INT 2
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: LD_INT 2
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 1
43439: NEG
43440: PUSH
43441: LD_INT 1
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 2
43450: NEG
43451: PUSH
43452: LD_INT 0
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 2
43461: NEG
43462: PUSH
43463: LD_INT 1
43465: NEG
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 2
43473: NEG
43474: PUSH
43475: LD_INT 2
43477: NEG
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 3
43485: PUSH
43486: LD_INT 1
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 3
43495: PUSH
43496: LD_INT 2
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 2
43505: PUSH
43506: LD_INT 3
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 1
43515: PUSH
43516: LD_INT 3
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43548: LD_ADDR_VAR 0 26
43552: PUSH
43553: LD_INT 0
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 0
43565: PUSH
43566: LD_INT 1
43568: NEG
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 1
43576: PUSH
43577: LD_INT 0
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 1
43586: PUSH
43587: LD_INT 1
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 0
43596: PUSH
43597: LD_INT 1
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 1
43606: NEG
43607: PUSH
43608: LD_INT 0
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 1
43617: NEG
43618: PUSH
43619: LD_INT 1
43621: NEG
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 1
43629: NEG
43630: PUSH
43631: LD_INT 2
43633: NEG
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 0
43641: PUSH
43642: LD_INT 2
43644: NEG
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 1
43652: PUSH
43653: LD_INT 1
43655: NEG
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 2
43663: PUSH
43664: LD_INT 0
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 2
43673: PUSH
43674: LD_INT 1
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 2
43683: PUSH
43684: LD_INT 2
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 1
43693: PUSH
43694: LD_INT 2
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 0
43703: PUSH
43704: LD_INT 2
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 1
43713: NEG
43714: PUSH
43715: LD_INT 1
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 2
43724: NEG
43725: PUSH
43726: LD_INT 0
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 2
43735: NEG
43736: PUSH
43737: LD_INT 1
43739: NEG
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 2
43747: NEG
43748: PUSH
43749: LD_INT 2
43751: NEG
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 2
43759: PUSH
43760: LD_INT 3
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 1
43769: PUSH
43770: LD_INT 3
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 1
43779: NEG
43780: PUSH
43781: LD_INT 2
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 2
43790: NEG
43791: PUSH
43792: LD_INT 1
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43824: LD_ADDR_VAR 0 27
43828: PUSH
43829: LD_INT 0
43831: PUSH
43832: LD_INT 0
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 0
43841: PUSH
43842: LD_INT 1
43844: NEG
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 1
43852: PUSH
43853: LD_INT 0
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 1
43862: PUSH
43863: LD_INT 1
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 0
43872: PUSH
43873: LD_INT 1
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 1
43882: NEG
43883: PUSH
43884: LD_INT 0
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 1
43893: NEG
43894: PUSH
43895: LD_INT 1
43897: NEG
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 1
43905: NEG
43906: PUSH
43907: LD_INT 2
43909: NEG
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 0
43917: PUSH
43918: LD_INT 2
43920: NEG
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 1
43928: PUSH
43929: LD_INT 1
43931: NEG
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 2
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 2
43949: PUSH
43950: LD_INT 1
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 2
43959: PUSH
43960: LD_INT 2
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 1
43969: PUSH
43970: LD_INT 2
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 0
43979: PUSH
43980: LD_INT 2
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 1
43989: NEG
43990: PUSH
43991: LD_INT 1
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 2
44000: NEG
44001: PUSH
44002: LD_INT 0
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 2
44011: NEG
44012: PUSH
44013: LD_INT 1
44015: NEG
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 2
44023: NEG
44024: PUSH
44025: LD_INT 2
44027: NEG
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 1
44035: NEG
44036: PUSH
44037: LD_INT 2
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 2
44046: NEG
44047: PUSH
44048: LD_INT 1
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 3
44057: NEG
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 3
44069: NEG
44070: PUSH
44071: LD_INT 2
44073: NEG
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44104: LD_ADDR_VAR 0 28
44108: PUSH
44109: LD_INT 0
44111: PUSH
44112: LD_INT 0
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 0
44121: PUSH
44122: LD_INT 1
44124: NEG
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 1
44132: PUSH
44133: LD_INT 0
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 1
44142: PUSH
44143: LD_INT 1
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 0
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 1
44162: NEG
44163: PUSH
44164: LD_INT 0
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 1
44173: NEG
44174: PUSH
44175: LD_INT 1
44177: NEG
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 1
44185: NEG
44186: PUSH
44187: LD_INT 2
44189: NEG
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: LD_INT 2
44200: NEG
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 1
44208: PUSH
44209: LD_INT 1
44211: NEG
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 2
44219: PUSH
44220: LD_INT 0
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 2
44229: PUSH
44230: LD_INT 1
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 2
44239: PUSH
44240: LD_INT 2
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 1
44249: PUSH
44250: LD_INT 2
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 0
44259: PUSH
44260: LD_INT 2
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 1
44269: NEG
44270: PUSH
44271: LD_INT 1
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 2
44280: NEG
44281: PUSH
44282: LD_INT 0
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 2
44291: NEG
44292: PUSH
44293: LD_INT 1
44295: NEG
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 2
44303: NEG
44304: PUSH
44305: LD_INT 2
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 2
44315: NEG
44316: PUSH
44317: LD_INT 3
44319: NEG
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 1
44327: NEG
44328: PUSH
44329: LD_INT 3
44331: NEG
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 3
44339: NEG
44340: PUSH
44341: LD_INT 1
44343: NEG
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 3
44351: NEG
44352: PUSH
44353: LD_INT 2
44355: NEG
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44386: LD_ADDR_VAR 0 29
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: LD_INT 0
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 0
44403: PUSH
44404: LD_INT 1
44406: NEG
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 1
44414: PUSH
44415: LD_INT 0
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 1
44424: PUSH
44425: LD_INT 1
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 0
44434: PUSH
44435: LD_INT 1
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 1
44444: NEG
44445: PUSH
44446: LD_INT 0
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 1
44455: NEG
44456: PUSH
44457: LD_INT 1
44459: NEG
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 1
44467: NEG
44468: PUSH
44469: LD_INT 2
44471: NEG
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 0
44479: PUSH
44480: LD_INT 2
44482: NEG
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 1
44490: PUSH
44491: LD_INT 1
44493: NEG
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 2
44501: PUSH
44502: LD_INT 0
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 2
44511: PUSH
44512: LD_INT 1
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 1
44521: PUSH
44522: LD_INT 2
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 0
44531: PUSH
44532: LD_INT 2
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 1
44541: NEG
44542: PUSH
44543: LD_INT 1
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 2
44552: NEG
44553: PUSH
44554: LD_INT 1
44556: NEG
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 2
44564: NEG
44565: PUSH
44566: LD_INT 2
44568: NEG
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 2
44576: NEG
44577: PUSH
44578: LD_INT 3
44580: NEG
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 2
44588: PUSH
44589: LD_INT 1
44591: NEG
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 3
44599: PUSH
44600: LD_INT 1
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 1
44609: PUSH
44610: LD_INT 3
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 1
44619: NEG
44620: PUSH
44621: LD_INT 2
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 3
44630: NEG
44631: PUSH
44632: LD_INT 2
44634: NEG
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44665: LD_ADDR_VAR 0 30
44669: PUSH
44670: LD_INT 0
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 0
44682: PUSH
44683: LD_INT 1
44685: NEG
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 1
44693: PUSH
44694: LD_INT 0
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 1
44703: PUSH
44704: LD_INT 1
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 0
44713: PUSH
44714: LD_INT 1
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 1
44723: NEG
44724: PUSH
44725: LD_INT 0
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 1
44734: NEG
44735: PUSH
44736: LD_INT 1
44738: NEG
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 1
44746: NEG
44747: PUSH
44748: LD_INT 2
44750: NEG
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 0
44758: PUSH
44759: LD_INT 2
44761: NEG
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 1
44769: PUSH
44770: LD_INT 1
44772: NEG
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 2
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 2
44790: PUSH
44791: LD_INT 1
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 2
44800: PUSH
44801: LD_INT 2
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 1
44810: PUSH
44811: LD_INT 2
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 1
44820: NEG
44821: PUSH
44822: LD_INT 1
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 2
44831: NEG
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 2
44842: NEG
44843: PUSH
44844: LD_INT 1
44846: NEG
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 1
44854: NEG
44855: PUSH
44856: LD_INT 3
44858: NEG
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 1
44866: PUSH
44867: LD_INT 2
44869: NEG
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 3
44877: PUSH
44878: LD_INT 2
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 2
44887: PUSH
44888: LD_INT 3
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 2
44897: NEG
44898: PUSH
44899: LD_INT 1
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 3
44908: NEG
44909: PUSH
44910: LD_INT 1
44912: NEG
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44943: LD_ADDR_VAR 0 31
44947: PUSH
44948: LD_INT 0
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 0
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 1
44971: PUSH
44972: LD_INT 0
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 1
44981: PUSH
44982: LD_INT 1
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 0
44991: PUSH
44992: LD_INT 1
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 1
45001: NEG
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 1
45012: NEG
45013: PUSH
45014: LD_INT 1
45016: NEG
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 1
45024: NEG
45025: PUSH
45026: LD_INT 2
45028: NEG
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 1
45036: PUSH
45037: LD_INT 1
45039: NEG
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 2
45047: PUSH
45048: LD_INT 0
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 2
45057: PUSH
45058: LD_INT 1
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 2
45067: PUSH
45068: LD_INT 2
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 1
45077: PUSH
45078: LD_INT 2
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: LD_INT 2
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 1
45097: NEG
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 2
45108: NEG
45109: PUSH
45110: LD_INT 1
45112: NEG
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 2
45120: NEG
45121: PUSH
45122: LD_INT 2
45124: NEG
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 2
45132: NEG
45133: PUSH
45134: LD_INT 3
45136: NEG
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 2
45144: PUSH
45145: LD_INT 1
45147: NEG
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 3
45155: PUSH
45156: LD_INT 1
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 1
45165: PUSH
45166: LD_INT 3
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 1
45175: NEG
45176: PUSH
45177: LD_INT 2
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 3
45186: NEG
45187: PUSH
45188: LD_INT 2
45190: NEG
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45221: LD_ADDR_VAR 0 32
45225: PUSH
45226: LD_INT 0
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 0
45238: PUSH
45239: LD_INT 1
45241: NEG
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 1
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 1
45259: PUSH
45260: LD_INT 1
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 0
45269: PUSH
45270: LD_INT 1
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 1
45279: NEG
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 1
45290: NEG
45291: PUSH
45292: LD_INT 1
45294: NEG
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 1
45302: NEG
45303: PUSH
45304: LD_INT 2
45306: NEG
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: LD_INT 2
45317: NEG
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 1
45325: PUSH
45326: LD_INT 1
45328: NEG
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 2
45336: PUSH
45337: LD_INT 1
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 2
45346: PUSH
45347: LD_INT 2
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 1
45356: PUSH
45357: LD_INT 2
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 0
45366: PUSH
45367: LD_INT 2
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 1
45376: NEG
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 2
45387: NEG
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 2
45398: NEG
45399: PUSH
45400: LD_INT 1
45402: NEG
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 1
45410: NEG
45411: PUSH
45412: LD_INT 3
45414: NEG
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 1
45422: PUSH
45423: LD_INT 2
45425: NEG
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 3
45433: PUSH
45434: LD_INT 2
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 2
45443: PUSH
45444: LD_INT 3
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 2
45453: NEG
45454: PUSH
45455: LD_INT 1
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 3
45464: NEG
45465: PUSH
45466: LD_INT 1
45468: NEG
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45499: LD_ADDR_VAR 0 33
45503: PUSH
45504: LD_INT 0
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: LD_INT 1
45519: NEG
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: LD_INT 1
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 0
45547: PUSH
45548: LD_INT 1
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 1
45557: NEG
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 1
45568: NEG
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 1
45580: NEG
45581: PUSH
45582: LD_INT 2
45584: NEG
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 1
45592: PUSH
45593: LD_INT 1
45595: NEG
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 2
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 2
45613: PUSH
45614: LD_INT 1
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 1
45623: PUSH
45624: LD_INT 2
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 0
45633: PUSH
45634: LD_INT 2
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 1
45643: NEG
45644: PUSH
45645: LD_INT 1
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 2
45654: NEG
45655: PUSH
45656: LD_INT 0
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 2
45665: NEG
45666: PUSH
45667: LD_INT 1
45669: NEG
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 2
45677: NEG
45678: PUSH
45679: LD_INT 2
45681: NEG
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 2
45689: NEG
45690: PUSH
45691: LD_INT 3
45693: NEG
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 2
45701: PUSH
45702: LD_INT 1
45704: NEG
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 3
45712: PUSH
45713: LD_INT 1
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: LD_INT 3
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 1
45732: NEG
45733: PUSH
45734: LD_INT 2
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 3
45743: NEG
45744: PUSH
45745: LD_INT 2
45747: NEG
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45778: LD_ADDR_VAR 0 34
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: LD_INT 0
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: LD_INT 1
45798: NEG
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 1
45816: PUSH
45817: LD_INT 1
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 0
45826: PUSH
45827: LD_INT 1
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 1
45836: NEG
45837: PUSH
45838: LD_INT 0
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: LD_INT 1
45851: NEG
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 1
45859: NEG
45860: PUSH
45861: LD_INT 2
45863: NEG
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 0
45871: PUSH
45872: LD_INT 2
45874: NEG
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 1
45882: PUSH
45883: LD_INT 1
45885: NEG
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 2
45893: PUSH
45894: LD_INT 1
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 2
45903: PUSH
45904: LD_INT 2
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 1
45913: PUSH
45914: LD_INT 2
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 1
45923: NEG
45924: PUSH
45925: LD_INT 1
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 2
45934: NEG
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 2
45945: NEG
45946: PUSH
45947: LD_INT 1
45949: NEG
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 2
45957: NEG
45958: PUSH
45959: LD_INT 2
45961: NEG
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 1
45969: NEG
45970: PUSH
45971: LD_INT 3
45973: NEG
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: LD_INT 2
45984: NEG
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 3
45992: PUSH
45993: LD_INT 2
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 2
46002: PUSH
46003: LD_INT 3
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 2
46012: NEG
46013: PUSH
46014: LD_INT 1
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 3
46023: NEG
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46058: LD_ADDR_VAR 0 35
46062: PUSH
46063: LD_INT 0
46065: PUSH
46066: LD_INT 0
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: LD_INT 1
46078: NEG
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 1
46086: PUSH
46087: LD_INT 0
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 1
46096: PUSH
46097: LD_INT 1
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: LD_INT 1
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 1
46116: NEG
46117: PUSH
46118: LD_INT 0
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 1
46127: NEG
46128: PUSH
46129: LD_INT 1
46131: NEG
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 2
46139: PUSH
46140: LD_INT 1
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 2
46149: NEG
46150: PUSH
46151: LD_INT 1
46153: NEG
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46170: LD_ADDR_VAR 0 36
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 0
46187: PUSH
46188: LD_INT 1
46190: NEG
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 1
46198: PUSH
46199: LD_INT 0
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 1
46208: PUSH
46209: LD_INT 1
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 0
46218: PUSH
46219: LD_INT 1
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 1
46228: NEG
46229: PUSH
46230: LD_INT 0
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 1
46239: NEG
46240: PUSH
46241: LD_INT 1
46243: NEG
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 1
46251: NEG
46252: PUSH
46253: LD_INT 2
46255: NEG
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 1
46263: PUSH
46264: LD_INT 2
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46282: LD_ADDR_VAR 0 37
46286: PUSH
46287: LD_INT 0
46289: PUSH
46290: LD_INT 0
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 0
46299: PUSH
46300: LD_INT 1
46302: NEG
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 1
46310: PUSH
46311: LD_INT 0
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 1
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 0
46330: PUSH
46331: LD_INT 1
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 1
46340: NEG
46341: PUSH
46342: LD_INT 0
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 1
46351: NEG
46352: PUSH
46353: LD_INT 1
46355: NEG
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 1
46363: PUSH
46364: LD_INT 1
46366: NEG
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 1
46374: NEG
46375: PUSH
46376: LD_INT 1
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46394: LD_ADDR_VAR 0 38
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 0
46411: PUSH
46412: LD_INT 1
46414: NEG
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: PUSH
46423: LD_INT 0
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 1
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 0
46442: PUSH
46443: LD_INT 1
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 1
46452: NEG
46453: PUSH
46454: LD_INT 0
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 1
46463: NEG
46464: PUSH
46465: LD_INT 1
46467: NEG
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 2
46475: PUSH
46476: LD_INT 1
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 2
46485: NEG
46486: PUSH
46487: LD_INT 1
46489: NEG
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46506: LD_ADDR_VAR 0 39
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: LD_INT 1
46526: NEG
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 1
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 1
46544: PUSH
46545: LD_INT 1
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 0
46554: PUSH
46555: LD_INT 1
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 1
46564: NEG
46565: PUSH
46566: LD_INT 0
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 1
46575: NEG
46576: PUSH
46577: LD_INT 1
46579: NEG
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 1
46587: NEG
46588: PUSH
46589: LD_INT 2
46591: NEG
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 1
46599: PUSH
46600: LD_INT 2
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46618: LD_ADDR_VAR 0 40
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: LD_INT 1
46638: NEG
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 1
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: LD_INT 1
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 1
46676: NEG
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 1
46687: NEG
46688: PUSH
46689: LD_INT 1
46691: NEG
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: LD_INT 1
46702: NEG
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 1
46710: NEG
46711: PUSH
46712: LD_INT 1
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46730: LD_ADDR_VAR 0 41
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: LD_INT 1
46750: NEG
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 1
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: LD_INT 1
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: NEG
46789: PUSH
46790: LD_INT 0
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 1
46799: NEG
46800: PUSH
46801: LD_INT 1
46803: NEG
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 1
46811: NEG
46812: PUSH
46813: LD_INT 2
46815: NEG
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: PUSH
46824: LD_INT 1
46826: NEG
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 2
46834: PUSH
46835: LD_INT 0
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 2
46844: PUSH
46845: LD_INT 1
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 2
46854: PUSH
46855: LD_INT 2
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 1
46864: PUSH
46865: LD_INT 2
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 1
46874: NEG
46875: PUSH
46876: LD_INT 1
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 2
46885: NEG
46886: PUSH
46887: LD_INT 0
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 2
46896: NEG
46897: PUSH
46898: LD_INT 1
46900: NEG
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 2
46908: NEG
46909: PUSH
46910: LD_INT 2
46912: NEG
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 2
46920: NEG
46921: PUSH
46922: LD_INT 3
46924: NEG
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 2
46932: PUSH
46933: LD_INT 1
46935: NEG
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 3
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 3
46953: PUSH
46954: LD_INT 1
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 3
46963: PUSH
46964: LD_INT 2
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 3
46973: PUSH
46974: LD_INT 3
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 2
46983: PUSH
46984: LD_INT 3
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 2
46993: NEG
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 3
47004: NEG
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 3
47015: NEG
47016: PUSH
47017: LD_INT 1
47019: NEG
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 3
47027: NEG
47028: PUSH
47029: LD_INT 2
47031: NEG
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 3
47039: NEG
47040: PUSH
47041: LD_INT 3
47043: NEG
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47080: LD_ADDR_VAR 0 42
47084: PUSH
47085: LD_INT 0
47087: PUSH
47088: LD_INT 0
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: LD_INT 1
47100: NEG
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 1
47108: PUSH
47109: LD_INT 0
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 1
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 1
47138: NEG
47139: PUSH
47140: LD_INT 0
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 1
47149: NEG
47150: PUSH
47151: LD_INT 1
47153: NEG
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 1
47161: NEG
47162: PUSH
47163: LD_INT 2
47165: NEG
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 0
47173: PUSH
47174: LD_INT 2
47176: NEG
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 1
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 2
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 2
47205: PUSH
47206: LD_INT 2
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: LD_INT 2
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: LD_INT 2
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 1
47235: NEG
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 2
47246: NEG
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 2
47258: NEG
47259: PUSH
47260: LD_INT 2
47262: NEG
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 2
47270: NEG
47271: PUSH
47272: LD_INT 3
47274: NEG
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 1
47282: NEG
47283: PUSH
47284: LD_INT 3
47286: NEG
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: LD_INT 3
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 1
47305: PUSH
47306: LD_INT 2
47308: NEG
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 3
47316: PUSH
47317: LD_INT 2
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 3
47326: PUSH
47327: LD_INT 3
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 2
47336: PUSH
47337: LD_INT 3
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: PUSH
47347: LD_INT 3
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 0
47356: PUSH
47357: LD_INT 3
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: LD_INT 2
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 3
47377: NEG
47378: PUSH
47379: LD_INT 2
47381: NEG
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 3
47389: NEG
47390: PUSH
47391: LD_INT 3
47393: NEG
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47430: LD_ADDR_VAR 0 43
47434: PUSH
47435: LD_INT 0
47437: PUSH
47438: LD_INT 0
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: LD_INT 1
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 1
47458: PUSH
47459: LD_INT 0
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 1
47468: PUSH
47469: LD_INT 1
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: LD_INT 1
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: PUSH
47501: LD_INT 1
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: NEG
47512: PUSH
47513: LD_INT 2
47515: NEG
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: LD_INT 2
47526: NEG
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 1
47534: PUSH
47535: LD_INT 1
47537: NEG
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 2
47545: PUSH
47546: LD_INT 0
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 2
47555: PUSH
47556: LD_INT 1
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: LD_INT 2
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 0
47575: PUSH
47576: LD_INT 2
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 1
47585: NEG
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 2
47596: NEG
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 2
47607: NEG
47608: PUSH
47609: LD_INT 1
47611: NEG
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 1
47619: NEG
47620: PUSH
47621: LD_INT 3
47623: NEG
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 0
47631: PUSH
47632: LD_INT 3
47634: NEG
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: LD_INT 2
47645: NEG
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 2
47653: PUSH
47654: LD_INT 1
47656: NEG
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 3
47664: PUSH
47665: LD_INT 0
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 3
47674: PUSH
47675: LD_INT 1
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 1
47684: PUSH
47685: LD_INT 3
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 0
47694: PUSH
47695: LD_INT 3
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 1
47704: NEG
47705: PUSH
47706: LD_INT 2
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 2
47715: NEG
47716: PUSH
47717: LD_INT 1
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 3
47726: NEG
47727: PUSH
47728: LD_INT 0
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 3
47737: NEG
47738: PUSH
47739: LD_INT 1
47741: NEG
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47778: LD_ADDR_VAR 0 44
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: LD_INT 0
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 0
47795: PUSH
47796: LD_INT 1
47798: NEG
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 1
47806: PUSH
47807: LD_INT 0
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 1
47816: PUSH
47817: LD_INT 1
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 0
47826: PUSH
47827: LD_INT 1
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 1
47836: NEG
47837: PUSH
47838: LD_INT 0
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 1
47847: NEG
47848: PUSH
47849: LD_INT 1
47851: NEG
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 1
47859: NEG
47860: PUSH
47861: LD_INT 2
47863: NEG
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 1
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 2
47882: PUSH
47883: LD_INT 0
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 2
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 2
47902: PUSH
47903: LD_INT 2
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 1
47912: PUSH
47913: LD_INT 2
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 1
47922: NEG
47923: PUSH
47924: LD_INT 1
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 2
47933: NEG
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 2
47944: NEG
47945: PUSH
47946: LD_INT 1
47948: NEG
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 2
47956: NEG
47957: PUSH
47958: LD_INT 2
47960: NEG
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 2
47968: NEG
47969: PUSH
47970: LD_INT 3
47972: NEG
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 2
47980: PUSH
47981: LD_INT 1
47983: NEG
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 3
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 3
48001: PUSH
48002: LD_INT 1
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 3
48011: PUSH
48012: LD_INT 2
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 3
48021: PUSH
48022: LD_INT 3
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 2
48031: PUSH
48032: LD_INT 3
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 2
48041: NEG
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 3
48052: NEG
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 3
48063: NEG
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 3
48075: NEG
48076: PUSH
48077: LD_INT 2
48079: NEG
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 3
48087: NEG
48088: PUSH
48089: LD_INT 3
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48128: LD_ADDR_VAR 0 45
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: LD_INT 0
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 0
48145: PUSH
48146: LD_INT 1
48148: NEG
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 1
48156: PUSH
48157: LD_INT 0
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 1
48166: PUSH
48167: LD_INT 1
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 0
48176: PUSH
48177: LD_INT 1
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 1
48186: NEG
48187: PUSH
48188: LD_INT 0
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 1
48197: NEG
48198: PUSH
48199: LD_INT 1
48201: NEG
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 1
48209: NEG
48210: PUSH
48211: LD_INT 2
48213: NEG
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 0
48221: PUSH
48222: LD_INT 2
48224: NEG
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 1
48232: PUSH
48233: LD_INT 1
48235: NEG
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 2
48243: PUSH
48244: LD_INT 1
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 2
48253: PUSH
48254: LD_INT 2
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: LD_INT 2
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 0
48273: PUSH
48274: LD_INT 2
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 1
48283: NEG
48284: PUSH
48285: LD_INT 1
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 2
48294: NEG
48295: PUSH
48296: LD_INT 1
48298: NEG
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 2
48306: NEG
48307: PUSH
48308: LD_INT 2
48310: NEG
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 2
48318: NEG
48319: PUSH
48320: LD_INT 3
48322: NEG
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 1
48330: NEG
48331: PUSH
48332: LD_INT 3
48334: NEG
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 0
48342: PUSH
48343: LD_INT 3
48345: NEG
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: LD_INT 2
48356: NEG
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 3
48364: PUSH
48365: LD_INT 2
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 3
48374: PUSH
48375: LD_INT 3
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 2
48384: PUSH
48385: LD_INT 3
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 1
48394: PUSH
48395: LD_INT 3
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: LD_INT 3
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 1
48414: NEG
48415: PUSH
48416: LD_INT 2
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 3
48425: NEG
48426: PUSH
48427: LD_INT 2
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 3
48437: NEG
48438: PUSH
48439: LD_INT 3
48441: NEG
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48478: LD_ADDR_VAR 0 46
48482: PUSH
48483: LD_INT 0
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 0
48495: PUSH
48496: LD_INT 1
48498: NEG
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 1
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 1
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 0
48526: PUSH
48527: LD_INT 1
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: LD_INT 0
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: LD_INT 1
48551: NEG
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 1
48559: NEG
48560: PUSH
48561: LD_INT 2
48563: NEG
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 0
48571: PUSH
48572: LD_INT 2
48574: NEG
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 1
48582: PUSH
48583: LD_INT 1
48585: NEG
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 2
48593: PUSH
48594: LD_INT 0
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 2
48603: PUSH
48604: LD_INT 1
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: LD_INT 2
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 0
48623: PUSH
48624: LD_INT 2
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 1
48633: NEG
48634: PUSH
48635: LD_INT 1
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 2
48644: NEG
48645: PUSH
48646: LD_INT 0
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 2
48655: NEG
48656: PUSH
48657: LD_INT 1
48659: NEG
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 1
48667: NEG
48668: PUSH
48669: LD_INT 3
48671: NEG
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 0
48679: PUSH
48680: LD_INT 3
48682: NEG
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 1
48690: PUSH
48691: LD_INT 2
48693: NEG
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 2
48701: PUSH
48702: LD_INT 1
48704: NEG
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 3
48712: PUSH
48713: LD_INT 0
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 3
48722: PUSH
48723: LD_INT 1
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 1
48732: PUSH
48733: LD_INT 3
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: LD_INT 3
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 1
48752: NEG
48753: PUSH
48754: LD_INT 2
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 2
48763: NEG
48764: PUSH
48765: LD_INT 1
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 3
48774: NEG
48775: PUSH
48776: LD_INT 0
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 3
48785: NEG
48786: PUSH
48787: LD_INT 1
48789: NEG
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48826: LD_ADDR_VAR 0 47
48830: PUSH
48831: LD_INT 0
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: LD_INT 1
48846: NEG
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 1
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 1
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 0
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 1
48884: NEG
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 1
48895: NEG
48896: PUSH
48897: LD_INT 1
48899: NEG
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: LD_INT 2
48911: NEG
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 0
48919: PUSH
48920: LD_INT 2
48922: NEG
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 1
48930: PUSH
48931: LD_INT 1
48933: NEG
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 2
48941: NEG
48942: PUSH
48943: LD_INT 1
48945: NEG
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 2
48953: NEG
48954: PUSH
48955: LD_INT 2
48957: NEG
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48977: LD_ADDR_VAR 0 48
48981: PUSH
48982: LD_INT 0
48984: PUSH
48985: LD_INT 0
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: LD_INT 1
48997: NEG
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 1
49005: PUSH
49006: LD_INT 0
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 1
49015: PUSH
49016: LD_INT 1
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 0
49025: PUSH
49026: LD_INT 1
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 1
49035: NEG
49036: PUSH
49037: LD_INT 0
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 1
49046: NEG
49047: PUSH
49048: LD_INT 1
49050: NEG
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 1
49058: NEG
49059: PUSH
49060: LD_INT 2
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 0
49070: PUSH
49071: LD_INT 2
49073: NEG
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 1
49081: PUSH
49082: LD_INT 1
49084: NEG
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 2
49092: PUSH
49093: LD_INT 0
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 2
49102: PUSH
49103: LD_INT 1
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49124: LD_ADDR_VAR 0 49
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 0
49141: PUSH
49142: LD_INT 1
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: PUSH
49153: LD_INT 0
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 1
49162: PUSH
49163: LD_INT 1
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 0
49172: PUSH
49173: LD_INT 1
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 1
49182: NEG
49183: PUSH
49184: LD_INT 0
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 1
49193: NEG
49194: PUSH
49195: LD_INT 1
49197: NEG
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 1
49205: PUSH
49206: LD_INT 1
49208: NEG
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 2
49216: PUSH
49217: LD_INT 0
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 2
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 2
49236: PUSH
49237: LD_INT 2
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: PUSH
49247: LD_INT 2
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49268: LD_ADDR_VAR 0 50
49272: PUSH
49273: LD_INT 0
49275: PUSH
49276: LD_INT 0
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 0
49285: PUSH
49286: LD_INT 1
49288: NEG
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 1
49296: PUSH
49297: LD_INT 0
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 1
49306: PUSH
49307: LD_INT 1
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 0
49316: PUSH
49317: LD_INT 1
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 1
49326: NEG
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: LD_INT 1
49341: NEG
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 2
49349: PUSH
49350: LD_INT 1
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 2
49359: PUSH
49360: LD_INT 2
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 1
49369: PUSH
49370: LD_INT 2
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 0
49379: PUSH
49380: LD_INT 2
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 1
49389: NEG
49390: PUSH
49391: LD_INT 1
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49412: LD_ADDR_VAR 0 51
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 0
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 1
49440: PUSH
49441: LD_INT 0
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 1
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 0
49460: PUSH
49461: LD_INT 1
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: LD_INT 0
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 1
49481: NEG
49482: PUSH
49483: LD_INT 1
49485: NEG
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 1
49493: PUSH
49494: LD_INT 2
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 0
49503: PUSH
49504: LD_INT 2
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 1
49513: NEG
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 2
49524: NEG
49525: PUSH
49526: LD_INT 0
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 2
49535: NEG
49536: PUSH
49537: LD_INT 1
49539: NEG
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49559: LD_ADDR_VAR 0 52
49563: PUSH
49564: LD_INT 0
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: LD_INT 1
49579: NEG
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 1
49587: PUSH
49588: LD_INT 0
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: PUSH
49598: LD_INT 1
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: LD_INT 1
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 1
49617: NEG
49618: PUSH
49619: LD_INT 0
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 1
49628: NEG
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 1
49640: NEG
49641: PUSH
49642: LD_INT 2
49644: NEG
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 1
49652: NEG
49653: PUSH
49654: LD_INT 1
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 2
49663: NEG
49664: PUSH
49665: LD_INT 0
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 2
49674: NEG
49675: PUSH
49676: LD_INT 1
49678: NEG
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 2
49686: NEG
49687: PUSH
49688: LD_INT 2
49690: NEG
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49710: LD_ADDR_VAR 0 53
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 0
49727: PUSH
49728: LD_INT 1
49730: NEG
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 1
49738: PUSH
49739: LD_INT 0
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 1
49748: PUSH
49749: LD_INT 1
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 1
49768: NEG
49769: PUSH
49770: LD_INT 0
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 1
49779: NEG
49780: PUSH
49781: LD_INT 1
49783: NEG
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 1
49791: NEG
49792: PUSH
49793: LD_INT 2
49795: NEG
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 0
49803: PUSH
49804: LD_INT 2
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 1
49814: PUSH
49815: LD_INT 1
49817: NEG
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 2
49825: PUSH
49826: LD_INT 0
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 2
49835: PUSH
49836: LD_INT 1
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 2
49845: PUSH
49846: LD_INT 2
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 1
49855: PUSH
49856: LD_INT 2
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 0
49865: PUSH
49866: LD_INT 2
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 1
49875: NEG
49876: PUSH
49877: LD_INT 1
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 2
49886: NEG
49887: PUSH
49888: LD_INT 0
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 2
49897: NEG
49898: PUSH
49899: LD_INT 1
49901: NEG
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 2
49909: NEG
49910: PUSH
49911: LD_INT 2
49913: NEG
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49940: LD_ADDR_VAR 0 54
49944: PUSH
49945: LD_INT 0
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 0
49957: PUSH
49958: LD_INT 1
49960: NEG
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 1
49968: PUSH
49969: LD_INT 0
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 1
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 0
49988: PUSH
49989: LD_INT 1
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 1
49998: NEG
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 1
50009: NEG
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 1
50021: NEG
50022: PUSH
50023: LD_INT 2
50025: NEG
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: LD_INT 2
50036: NEG
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: PUSH
50045: LD_INT 1
50047: NEG
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 2
50055: PUSH
50056: LD_INT 0
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 2
50065: PUSH
50066: LD_INT 1
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 2
50075: PUSH
50076: LD_INT 2
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 1
50085: PUSH
50086: LD_INT 2
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: LD_INT 2
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: LD_INT 1
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 2
50116: NEG
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 2
50127: NEG
50128: PUSH
50129: LD_INT 1
50131: NEG
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 2
50139: NEG
50140: PUSH
50141: LD_INT 2
50143: NEG
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50170: LD_ADDR_VAR 0 55
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: LD_INT 0
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 0
50187: PUSH
50188: LD_INT 1
50190: NEG
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 1
50198: PUSH
50199: LD_INT 0
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: LD_INT 1
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: LD_INT 1
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 1
50228: NEG
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: LD_INT 1
50243: NEG
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 1
50251: NEG
50252: PUSH
50253: LD_INT 2
50255: NEG
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: LD_INT 2
50266: NEG
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 2
50285: PUSH
50286: LD_INT 0
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 2
50295: PUSH
50296: LD_INT 1
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 2
50305: PUSH
50306: LD_INT 2
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 1
50315: PUSH
50316: LD_INT 2
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 0
50325: PUSH
50326: LD_INT 2
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 1
50335: NEG
50336: PUSH
50337: LD_INT 1
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 2
50346: NEG
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 2
50357: NEG
50358: PUSH
50359: LD_INT 1
50361: NEG
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 2
50369: NEG
50370: PUSH
50371: LD_INT 2
50373: NEG
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50400: LD_ADDR_VAR 0 56
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 0
50417: PUSH
50418: LD_INT 1
50420: NEG
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 1
50428: PUSH
50429: LD_INT 0
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: LD_INT 1
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: LD_INT 1
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 1
50458: NEG
50459: PUSH
50460: LD_INT 0
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: LD_INT 1
50473: NEG
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 1
50481: NEG
50482: PUSH
50483: LD_INT 2
50485: NEG
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 0
50493: PUSH
50494: LD_INT 2
50496: NEG
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 1
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 2
50515: PUSH
50516: LD_INT 0
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 2
50525: PUSH
50526: LD_INT 1
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 2
50535: PUSH
50536: LD_INT 2
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: LD_INT 2
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 0
50555: PUSH
50556: LD_INT 2
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 1
50565: NEG
50566: PUSH
50567: LD_INT 1
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 2
50576: NEG
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 2
50587: NEG
50588: PUSH
50589: LD_INT 1
50591: NEG
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 2
50599: NEG
50600: PUSH
50601: LD_INT 2
50603: NEG
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50630: LD_ADDR_VAR 0 57
50634: PUSH
50635: LD_INT 0
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 0
50647: PUSH
50648: LD_INT 1
50650: NEG
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 1
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: LD_INT 1
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: LD_INT 1
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 1
50688: NEG
50689: PUSH
50690: LD_INT 0
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 1
50699: NEG
50700: PUSH
50701: LD_INT 1
50703: NEG
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 1
50711: NEG
50712: PUSH
50713: LD_INT 2
50715: NEG
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 0
50723: PUSH
50724: LD_INT 2
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 1
50734: PUSH
50735: LD_INT 1
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 2
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 2
50755: PUSH
50756: LD_INT 1
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 2
50765: PUSH
50766: LD_INT 2
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 1
50775: PUSH
50776: LD_INT 2
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 0
50785: PUSH
50786: LD_INT 2
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 1
50795: NEG
50796: PUSH
50797: LD_INT 1
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 2
50806: NEG
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 2
50817: NEG
50818: PUSH
50819: LD_INT 1
50821: NEG
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 2
50829: NEG
50830: PUSH
50831: LD_INT 2
50833: NEG
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50860: LD_ADDR_VAR 0 58
50864: PUSH
50865: LD_INT 0
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: LD_INT 1
50880: NEG
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 1
50888: PUSH
50889: LD_INT 0
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: LD_INT 1
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 1
50929: NEG
50930: PUSH
50931: LD_INT 1
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 1
50941: NEG
50942: PUSH
50943: LD_INT 2
50945: NEG
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 0
50953: PUSH
50954: LD_INT 2
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 1
50964: PUSH
50965: LD_INT 1
50967: NEG
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 2
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 2
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 2
50995: PUSH
50996: LD_INT 2
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 1
51005: PUSH
51006: LD_INT 2
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 0
51015: PUSH
51016: LD_INT 2
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 1
51025: NEG
51026: PUSH
51027: LD_INT 1
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 2
51036: NEG
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 2
51047: NEG
51048: PUSH
51049: LD_INT 1
51051: NEG
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 2
51059: NEG
51060: PUSH
51061: LD_INT 2
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51090: LD_ADDR_VAR 0 59
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: LD_INT 1
51110: NEG
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: LD_INT 1
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: LD_INT 0
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 1
51159: NEG
51160: PUSH
51161: LD_INT 1
51163: NEG
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51178: LD_ADDR_VAR 0 60
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: PUSH
51207: LD_INT 0
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 1
51216: PUSH
51217: LD_INT 1
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 0
51226: PUSH
51227: LD_INT 1
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 1
51236: NEG
51237: PUSH
51238: LD_INT 0
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 1
51247: NEG
51248: PUSH
51249: LD_INT 1
51251: NEG
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51266: LD_ADDR_VAR 0 61
51270: PUSH
51271: LD_INT 0
51273: PUSH
51274: LD_INT 0
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 0
51283: PUSH
51284: LD_INT 1
51286: NEG
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 1
51294: PUSH
51295: LD_INT 0
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 1
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 0
51314: PUSH
51315: LD_INT 1
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 1
51324: NEG
51325: PUSH
51326: LD_INT 0
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 1
51335: NEG
51336: PUSH
51337: LD_INT 1
51339: NEG
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51354: LD_ADDR_VAR 0 62
51358: PUSH
51359: LD_INT 0
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: LD_INT 1
51374: NEG
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 1
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 1
51392: PUSH
51393: LD_INT 1
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 0
51402: PUSH
51403: LD_INT 1
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 1
51412: NEG
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 1
51423: NEG
51424: PUSH
51425: LD_INT 1
51427: NEG
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51442: LD_ADDR_VAR 0 63
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 0
51459: PUSH
51460: LD_INT 1
51462: NEG
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 1
51470: PUSH
51471: LD_INT 0
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 1
51480: PUSH
51481: LD_INT 1
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: LD_INT 1
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 1
51500: NEG
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 1
51511: NEG
51512: PUSH
51513: LD_INT 1
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51530: LD_ADDR_VAR 0 64
51534: PUSH
51535: LD_INT 0
51537: PUSH
51538: LD_INT 0
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 0
51547: PUSH
51548: LD_INT 1
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 1
51558: PUSH
51559: LD_INT 0
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: PUSH
51569: LD_INT 1
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 0
51578: PUSH
51579: LD_INT 1
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 1
51588: NEG
51589: PUSH
51590: LD_INT 0
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 1
51599: NEG
51600: PUSH
51601: LD_INT 1
51603: NEG
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: ST_TO_ADDR
// end ; 1 :
51618: GO 57515
51620: LD_INT 1
51622: DOUBLE
51623: EQUAL
51624: IFTRUE 51628
51626: GO 54251
51628: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51629: LD_ADDR_VAR 0 11
51633: PUSH
51634: LD_INT 1
51636: NEG
51637: PUSH
51638: LD_INT 3
51640: NEG
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: LD_INT 3
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 1
51659: PUSH
51660: LD_INT 2
51662: NEG
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: LIST
51672: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51673: LD_ADDR_VAR 0 12
51677: PUSH
51678: LD_INT 2
51680: PUSH
51681: LD_INT 1
51683: NEG
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 3
51691: PUSH
51692: LD_INT 0
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 3
51701: PUSH
51702: LD_INT 1
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: LIST
51713: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51714: LD_ADDR_VAR 0 13
51718: PUSH
51719: LD_INT 3
51721: PUSH
51722: LD_INT 2
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 3
51731: PUSH
51732: LD_INT 3
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 2
51741: PUSH
51742: LD_INT 3
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: LIST
51753: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51754: LD_ADDR_VAR 0 14
51758: PUSH
51759: LD_INT 1
51761: PUSH
51762: LD_INT 3
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: LD_INT 3
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 1
51781: NEG
51782: PUSH
51783: LD_INT 2
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: LIST
51794: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51795: LD_ADDR_VAR 0 15
51799: PUSH
51800: LD_INT 2
51802: NEG
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 3
51813: NEG
51814: PUSH
51815: LD_INT 0
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 3
51824: NEG
51825: PUSH
51826: LD_INT 1
51828: NEG
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: LIST
51838: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51839: LD_ADDR_VAR 0 16
51843: PUSH
51844: LD_INT 2
51846: NEG
51847: PUSH
51848: LD_INT 3
51850: NEG
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 3
51858: NEG
51859: PUSH
51860: LD_INT 2
51862: NEG
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 3
51870: NEG
51871: PUSH
51872: LD_INT 3
51874: NEG
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: LIST
51884: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51885: LD_ADDR_VAR 0 17
51889: PUSH
51890: LD_INT 1
51892: NEG
51893: PUSH
51894: LD_INT 3
51896: NEG
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 0
51904: PUSH
51905: LD_INT 3
51907: NEG
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 1
51915: PUSH
51916: LD_INT 2
51918: NEG
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: LIST
51928: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51929: LD_ADDR_VAR 0 18
51933: PUSH
51934: LD_INT 2
51936: PUSH
51937: LD_INT 1
51939: NEG
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 3
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 3
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: LIST
51969: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51970: LD_ADDR_VAR 0 19
51974: PUSH
51975: LD_INT 3
51977: PUSH
51978: LD_INT 2
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 3
51987: PUSH
51988: LD_INT 3
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 2
51997: PUSH
51998: LD_INT 3
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: LIST
52009: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52010: LD_ADDR_VAR 0 20
52014: PUSH
52015: LD_INT 1
52017: PUSH
52018: LD_INT 3
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 0
52027: PUSH
52028: LD_INT 3
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 1
52037: NEG
52038: PUSH
52039: LD_INT 2
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: LIST
52050: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52051: LD_ADDR_VAR 0 21
52055: PUSH
52056: LD_INT 2
52058: NEG
52059: PUSH
52060: LD_INT 1
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 3
52069: NEG
52070: PUSH
52071: LD_INT 0
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 3
52080: NEG
52081: PUSH
52082: LD_INT 1
52084: NEG
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: LIST
52094: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52095: LD_ADDR_VAR 0 22
52099: PUSH
52100: LD_INT 2
52102: NEG
52103: PUSH
52104: LD_INT 3
52106: NEG
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 3
52114: NEG
52115: PUSH
52116: LD_INT 2
52118: NEG
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 3
52126: NEG
52127: PUSH
52128: LD_INT 3
52130: NEG
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: LIST
52140: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52141: LD_ADDR_VAR 0 23
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: LD_INT 3
52151: NEG
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 1
52159: NEG
52160: PUSH
52161: LD_INT 4
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 1
52171: PUSH
52172: LD_INT 3
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: LIST
52184: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52185: LD_ADDR_VAR 0 24
52189: PUSH
52190: LD_INT 3
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 3
52202: PUSH
52203: LD_INT 1
52205: NEG
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 4
52213: PUSH
52214: LD_INT 1
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: LIST
52225: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52226: LD_ADDR_VAR 0 25
52230: PUSH
52231: LD_INT 3
52233: PUSH
52234: LD_INT 3
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 4
52243: PUSH
52244: LD_INT 3
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 3
52253: PUSH
52254: LD_INT 4
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: LIST
52265: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52266: LD_ADDR_VAR 0 26
52270: PUSH
52271: LD_INT 0
52273: PUSH
52274: LD_INT 3
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 1
52283: PUSH
52284: LD_INT 4
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 1
52293: NEG
52294: PUSH
52295: LD_INT 3
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: LIST
52306: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52307: LD_ADDR_VAR 0 27
52311: PUSH
52312: LD_INT 3
52314: NEG
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 3
52325: NEG
52326: PUSH
52327: LD_INT 1
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 4
52336: NEG
52337: PUSH
52338: LD_INT 1
52340: NEG
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: LIST
52350: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52351: LD_ADDR_VAR 0 28
52355: PUSH
52356: LD_INT 3
52358: NEG
52359: PUSH
52360: LD_INT 3
52362: NEG
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 3
52370: NEG
52371: PUSH
52372: LD_INT 4
52374: NEG
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 4
52382: NEG
52383: PUSH
52384: LD_INT 3
52386: NEG
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: LIST
52396: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52397: LD_ADDR_VAR 0 29
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: LD_INT 3
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 0
52416: PUSH
52417: LD_INT 3
52419: NEG
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 1
52427: PUSH
52428: LD_INT 2
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 1
52438: NEG
52439: PUSH
52440: LD_INT 4
52442: NEG
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 0
52450: PUSH
52451: LD_INT 4
52453: NEG
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 1
52461: PUSH
52462: LD_INT 3
52464: NEG
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: LD_INT 5
52476: NEG
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: LD_INT 5
52487: NEG
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 1
52495: PUSH
52496: LD_INT 4
52498: NEG
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 1
52506: NEG
52507: PUSH
52508: LD_INT 6
52510: NEG
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 0
52518: PUSH
52519: LD_INT 6
52521: NEG
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 1
52529: PUSH
52530: LD_INT 5
52532: NEG
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52552: LD_ADDR_VAR 0 30
52556: PUSH
52557: LD_INT 2
52559: PUSH
52560: LD_INT 1
52562: NEG
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 3
52570: PUSH
52571: LD_INT 0
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 3
52580: PUSH
52581: LD_INT 1
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 3
52590: PUSH
52591: LD_INT 1
52593: NEG
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 4
52601: PUSH
52602: LD_INT 0
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 4
52611: PUSH
52612: LD_INT 1
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 4
52621: PUSH
52622: LD_INT 1
52624: NEG
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 5
52632: PUSH
52633: LD_INT 0
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 5
52642: PUSH
52643: LD_INT 1
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 5
52652: PUSH
52653: LD_INT 1
52655: NEG
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 6
52663: PUSH
52664: LD_INT 0
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 6
52673: PUSH
52674: LD_INT 1
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52695: LD_ADDR_VAR 0 31
52699: PUSH
52700: LD_INT 3
52702: PUSH
52703: LD_INT 2
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 3
52712: PUSH
52713: LD_INT 3
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 2
52722: PUSH
52723: LD_INT 3
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 4
52732: PUSH
52733: LD_INT 3
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 4
52742: PUSH
52743: LD_INT 4
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 3
52752: PUSH
52753: LD_INT 4
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 5
52762: PUSH
52763: LD_INT 4
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 5
52772: PUSH
52773: LD_INT 5
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 4
52782: PUSH
52783: LD_INT 5
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 6
52792: PUSH
52793: LD_INT 5
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 6
52802: PUSH
52803: LD_INT 6
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 5
52812: PUSH
52813: LD_INT 6
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52834: LD_ADDR_VAR 0 32
52838: PUSH
52839: LD_INT 1
52841: PUSH
52842: LD_INT 3
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 0
52851: PUSH
52852: LD_INT 3
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 1
52861: NEG
52862: PUSH
52863: LD_INT 2
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 1
52872: PUSH
52873: LD_INT 4
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 0
52882: PUSH
52883: LD_INT 4
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 1
52892: NEG
52893: PUSH
52894: LD_INT 3
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 1
52903: PUSH
52904: LD_INT 5
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: LD_INT 5
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 1
52923: NEG
52924: PUSH
52925: LD_INT 4
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 1
52934: PUSH
52935: LD_INT 6
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: LD_INT 6
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 1
52954: NEG
52955: PUSH
52956: LD_INT 5
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52977: LD_ADDR_VAR 0 33
52981: PUSH
52982: LD_INT 2
52984: NEG
52985: PUSH
52986: LD_INT 1
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 3
52995: NEG
52996: PUSH
52997: LD_INT 0
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 3
53006: NEG
53007: PUSH
53008: LD_INT 1
53010: NEG
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 3
53018: NEG
53019: PUSH
53020: LD_INT 1
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 4
53029: NEG
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 4
53040: NEG
53041: PUSH
53042: LD_INT 1
53044: NEG
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 4
53052: NEG
53053: PUSH
53054: LD_INT 1
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 5
53063: NEG
53064: PUSH
53065: LD_INT 0
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 5
53074: NEG
53075: PUSH
53076: LD_INT 1
53078: NEG
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 5
53086: NEG
53087: PUSH
53088: LD_INT 1
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 6
53097: NEG
53098: PUSH
53099: LD_INT 0
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 6
53108: NEG
53109: PUSH
53110: LD_INT 1
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53132: LD_ADDR_VAR 0 34
53136: PUSH
53137: LD_INT 2
53139: NEG
53140: PUSH
53141: LD_INT 3
53143: NEG
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 3
53151: NEG
53152: PUSH
53153: LD_INT 2
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 3
53163: NEG
53164: PUSH
53165: LD_INT 3
53167: NEG
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 3
53175: NEG
53176: PUSH
53177: LD_INT 4
53179: NEG
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 4
53187: NEG
53188: PUSH
53189: LD_INT 3
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 4
53199: NEG
53200: PUSH
53201: LD_INT 4
53203: NEG
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 4
53211: NEG
53212: PUSH
53213: LD_INT 5
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 5
53223: NEG
53224: PUSH
53225: LD_INT 4
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 5
53235: NEG
53236: PUSH
53237: LD_INT 5
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 5
53247: NEG
53248: PUSH
53249: LD_INT 6
53251: NEG
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 6
53259: NEG
53260: PUSH
53261: LD_INT 5
53263: NEG
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 6
53271: NEG
53272: PUSH
53273: LD_INT 6
53275: NEG
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53295: LD_ADDR_VAR 0 41
53299: PUSH
53300: LD_INT 0
53302: PUSH
53303: LD_INT 2
53305: NEG
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 1
53313: NEG
53314: PUSH
53315: LD_INT 3
53317: NEG
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 1
53325: PUSH
53326: LD_INT 2
53328: NEG
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: LIST
53338: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53339: LD_ADDR_VAR 0 42
53343: PUSH
53344: LD_INT 2
53346: PUSH
53347: LD_INT 0
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 2
53356: PUSH
53357: LD_INT 1
53359: NEG
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 3
53367: PUSH
53368: LD_INT 1
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: LIST
53379: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53380: LD_ADDR_VAR 0 43
53384: PUSH
53385: LD_INT 2
53387: PUSH
53388: LD_INT 2
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 3
53397: PUSH
53398: LD_INT 2
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 2
53407: PUSH
53408: LD_INT 3
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: LIST
53419: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53420: LD_ADDR_VAR 0 44
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: LD_INT 2
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: LD_INT 3
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 1
53447: NEG
53448: PUSH
53449: LD_INT 2
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: LIST
53460: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53461: LD_ADDR_VAR 0 45
53465: PUSH
53466: LD_INT 2
53468: NEG
53469: PUSH
53470: LD_INT 0
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 2
53479: NEG
53480: PUSH
53481: LD_INT 1
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 3
53490: NEG
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: LIST
53504: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53505: LD_ADDR_VAR 0 46
53509: PUSH
53510: LD_INT 2
53512: NEG
53513: PUSH
53514: LD_INT 2
53516: NEG
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 2
53524: NEG
53525: PUSH
53526: LD_INT 3
53528: NEG
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 3
53536: NEG
53537: PUSH
53538: LD_INT 2
53540: NEG
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: LIST
53550: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53551: LD_ADDR_VAR 0 47
53555: PUSH
53556: LD_INT 2
53558: NEG
53559: PUSH
53560: LD_INT 3
53562: NEG
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: NEG
53571: PUSH
53572: LD_INT 3
53574: NEG
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53584: LD_ADDR_VAR 0 48
53588: PUSH
53589: LD_INT 1
53591: PUSH
53592: LD_INT 2
53594: NEG
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 2
53602: PUSH
53603: LD_INT 1
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53615: LD_ADDR_VAR 0 49
53619: PUSH
53620: LD_INT 3
53622: PUSH
53623: LD_INT 1
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 3
53632: PUSH
53633: LD_INT 2
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53644: LD_ADDR_VAR 0 50
53648: PUSH
53649: LD_INT 2
53651: PUSH
53652: LD_INT 3
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 1
53661: PUSH
53662: LD_INT 3
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53673: LD_ADDR_VAR 0 51
53677: PUSH
53678: LD_INT 1
53680: NEG
53681: PUSH
53682: LD_INT 2
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 2
53691: NEG
53692: PUSH
53693: LD_INT 1
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53704: LD_ADDR_VAR 0 52
53708: PUSH
53709: LD_INT 3
53711: NEG
53712: PUSH
53713: LD_INT 1
53715: NEG
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 3
53723: NEG
53724: PUSH
53725: LD_INT 2
53727: NEG
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53737: LD_ADDR_VAR 0 53
53741: PUSH
53742: LD_INT 1
53744: NEG
53745: PUSH
53746: LD_INT 3
53748: NEG
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: LD_INT 3
53759: NEG
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 1
53767: PUSH
53768: LD_INT 2
53770: NEG
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: LIST
53780: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53781: LD_ADDR_VAR 0 54
53785: PUSH
53786: LD_INT 2
53788: PUSH
53789: LD_INT 1
53791: NEG
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 3
53799: PUSH
53800: LD_INT 0
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 3
53809: PUSH
53810: LD_INT 1
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: LIST
53821: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53822: LD_ADDR_VAR 0 55
53826: PUSH
53827: LD_INT 3
53829: PUSH
53830: LD_INT 2
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 3
53839: PUSH
53840: LD_INT 3
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 2
53849: PUSH
53850: LD_INT 3
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: LIST
53861: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53862: LD_ADDR_VAR 0 56
53866: PUSH
53867: LD_INT 1
53869: PUSH
53870: LD_INT 3
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: LD_INT 3
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 1
53889: NEG
53890: PUSH
53891: LD_INT 2
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: LIST
53902: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53903: LD_ADDR_VAR 0 57
53907: PUSH
53908: LD_INT 2
53910: NEG
53911: PUSH
53912: LD_INT 1
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 3
53921: NEG
53922: PUSH
53923: LD_INT 0
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 3
53932: NEG
53933: PUSH
53934: LD_INT 1
53936: NEG
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: LIST
53946: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53947: LD_ADDR_VAR 0 58
53951: PUSH
53952: LD_INT 2
53954: NEG
53955: PUSH
53956: LD_INT 3
53958: NEG
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 3
53966: NEG
53967: PUSH
53968: LD_INT 2
53970: NEG
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 3
53978: NEG
53979: PUSH
53980: LD_INT 3
53982: NEG
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: LIST
53992: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53993: LD_ADDR_VAR 0 59
53997: PUSH
53998: LD_INT 1
54000: NEG
54001: PUSH
54002: LD_INT 2
54004: NEG
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 0
54012: PUSH
54013: LD_INT 2
54015: NEG
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 1
54023: PUSH
54024: LD_INT 1
54026: NEG
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: LIST
54036: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54037: LD_ADDR_VAR 0 60
54041: PUSH
54042: LD_INT 1
54044: PUSH
54045: LD_INT 1
54047: NEG
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 2
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 2
54065: PUSH
54066: LD_INT 1
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: LIST
54077: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54078: LD_ADDR_VAR 0 61
54082: PUSH
54083: LD_INT 2
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 2
54095: PUSH
54096: LD_INT 2
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 1
54105: PUSH
54106: LD_INT 2
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: LIST
54117: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54118: LD_ADDR_VAR 0 62
54122: PUSH
54123: LD_INT 1
54125: PUSH
54126: LD_INT 2
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 0
54135: PUSH
54136: LD_INT 2
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 1
54145: NEG
54146: PUSH
54147: LD_INT 1
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: LIST
54158: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54159: LD_ADDR_VAR 0 63
54163: PUSH
54164: LD_INT 1
54166: NEG
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 2
54177: NEG
54178: PUSH
54179: LD_INT 0
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 2
54188: NEG
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: LIST
54202: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54203: LD_ADDR_VAR 0 64
54207: PUSH
54208: LD_INT 1
54210: NEG
54211: PUSH
54212: LD_INT 2
54214: NEG
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 2
54222: NEG
54223: PUSH
54224: LD_INT 1
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 2
54234: NEG
54235: PUSH
54236: LD_INT 2
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: LIST
54248: ST_TO_ADDR
// end ; 2 :
54249: GO 57515
54251: LD_INT 2
54253: DOUBLE
54254: EQUAL
54255: IFTRUE 54259
54257: GO 57514
54259: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54260: LD_ADDR_VAR 0 29
54264: PUSH
54265: LD_INT 4
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 4
54277: PUSH
54278: LD_INT 1
54280: NEG
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 5
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 5
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 4
54308: PUSH
54309: LD_INT 1
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 3
54318: PUSH
54319: LD_INT 0
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 3
54328: PUSH
54329: LD_INT 1
54331: NEG
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 3
54339: PUSH
54340: LD_INT 2
54342: NEG
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 5
54350: PUSH
54351: LD_INT 2
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 3
54360: PUSH
54361: LD_INT 3
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 3
54370: PUSH
54371: LD_INT 2
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 4
54380: PUSH
54381: LD_INT 3
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 4
54390: PUSH
54391: LD_INT 4
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 3
54400: PUSH
54401: LD_INT 4
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 2
54410: PUSH
54411: LD_INT 3
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 2
54420: PUSH
54421: LD_INT 2
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 4
54430: PUSH
54431: LD_INT 2
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 2
54440: PUSH
54441: LD_INT 4
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: LD_INT 4
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 0
54460: PUSH
54461: LD_INT 3
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 1
54470: PUSH
54471: LD_INT 4
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 1
54480: PUSH
54481: LD_INT 5
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 0
54490: PUSH
54491: LD_INT 5
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 1
54500: NEG
54501: PUSH
54502: LD_INT 4
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 1
54511: NEG
54512: PUSH
54513: LD_INT 3
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 2
54522: PUSH
54523: LD_INT 5
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 2
54532: NEG
54533: PUSH
54534: LD_INT 3
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 3
54543: NEG
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 3
54554: NEG
54555: PUSH
54556: LD_INT 1
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 2
54566: NEG
54567: PUSH
54568: LD_INT 0
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 2
54577: NEG
54578: PUSH
54579: LD_INT 1
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 3
54588: NEG
54589: PUSH
54590: LD_INT 1
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 4
54599: NEG
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 4
54610: NEG
54611: PUSH
54612: LD_INT 1
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 4
54622: NEG
54623: PUSH
54624: LD_INT 2
54626: NEG
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 2
54634: NEG
54635: PUSH
54636: LD_INT 2
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 4
54645: NEG
54646: PUSH
54647: LD_INT 4
54649: NEG
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 4
54657: NEG
54658: PUSH
54659: LD_INT 5
54661: NEG
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 3
54669: NEG
54670: PUSH
54671: LD_INT 4
54673: NEG
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 3
54681: NEG
54682: PUSH
54683: LD_INT 3
54685: NEG
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 4
54693: NEG
54694: PUSH
54695: LD_INT 3
54697: NEG
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 5
54705: NEG
54706: PUSH
54707: LD_INT 4
54709: NEG
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 5
54717: NEG
54718: PUSH
54719: LD_INT 5
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 3
54729: NEG
54730: PUSH
54731: LD_INT 5
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 5
54741: NEG
54742: PUSH
54743: LD_INT 3
54745: NEG
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54798: LD_ADDR_VAR 0 30
54802: PUSH
54803: LD_INT 4
54805: PUSH
54806: LD_INT 4
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 4
54815: PUSH
54816: LD_INT 3
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 5
54825: PUSH
54826: LD_INT 4
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 5
54835: PUSH
54836: LD_INT 5
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 4
54845: PUSH
54846: LD_INT 5
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 3
54855: PUSH
54856: LD_INT 4
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 3
54865: PUSH
54866: LD_INT 3
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 5
54875: PUSH
54876: LD_INT 3
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 3
54885: PUSH
54886: LD_INT 5
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: LD_INT 3
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 0
54905: PUSH
54906: LD_INT 2
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 1
54915: PUSH
54916: LD_INT 3
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 1
54925: PUSH
54926: LD_INT 4
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 0
54935: PUSH
54936: LD_INT 4
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 1
54945: NEG
54946: PUSH
54947: LD_INT 3
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 1
54956: NEG
54957: PUSH
54958: LD_INT 2
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 2
54967: PUSH
54968: LD_INT 4
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 2
54977: NEG
54978: PUSH
54979: LD_INT 2
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 4
54988: NEG
54989: PUSH
54990: LD_INT 0
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 4
54999: NEG
55000: PUSH
55001: LD_INT 1
55003: NEG
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 3
55011: NEG
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 3
55022: NEG
55023: PUSH
55024: LD_INT 1
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 4
55033: NEG
55034: PUSH
55035: LD_INT 1
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 5
55044: NEG
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 5
55055: NEG
55056: PUSH
55057: LD_INT 1
55059: NEG
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 5
55067: NEG
55068: PUSH
55069: LD_INT 2
55071: NEG
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 3
55079: NEG
55080: PUSH
55081: LD_INT 2
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 3
55090: NEG
55091: PUSH
55092: LD_INT 3
55094: NEG
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 3
55102: NEG
55103: PUSH
55104: LD_INT 4
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 2
55114: NEG
55115: PUSH
55116: LD_INT 3
55118: NEG
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 2
55126: NEG
55127: PUSH
55128: LD_INT 2
55130: NEG
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 3
55138: NEG
55139: PUSH
55140: LD_INT 2
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 4
55150: NEG
55151: PUSH
55152: LD_INT 3
55154: NEG
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 4
55162: NEG
55163: PUSH
55164: LD_INT 4
55166: NEG
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 2
55174: NEG
55175: PUSH
55176: LD_INT 4
55178: NEG
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 4
55186: NEG
55187: PUSH
55188: LD_INT 2
55190: NEG
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: LD_INT 4
55201: NEG
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: LD_INT 5
55212: NEG
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 1
55220: PUSH
55221: LD_INT 4
55223: NEG
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 1
55231: PUSH
55232: LD_INT 3
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: LD_INT 3
55245: NEG
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 1
55253: NEG
55254: PUSH
55255: LD_INT 4
55257: NEG
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 1
55265: NEG
55266: PUSH
55267: LD_INT 5
55269: NEG
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 2
55277: PUSH
55278: LD_INT 3
55280: NEG
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 2
55288: NEG
55289: PUSH
55290: LD_INT 5
55292: NEG
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55345: LD_ADDR_VAR 0 31
55349: PUSH
55350: LD_INT 0
55352: PUSH
55353: LD_INT 4
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: LD_INT 3
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 1
55372: PUSH
55373: LD_INT 4
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 1
55382: PUSH
55383: LD_INT 5
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: LD_INT 5
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 1
55402: NEG
55403: PUSH
55404: LD_INT 4
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: NEG
55414: PUSH
55415: LD_INT 3
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 2
55424: PUSH
55425: LD_INT 5
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 2
55434: NEG
55435: PUSH
55436: LD_INT 3
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 3
55445: NEG
55446: PUSH
55447: LD_INT 0
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 3
55456: NEG
55457: PUSH
55458: LD_INT 1
55460: NEG
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 2
55468: NEG
55469: PUSH
55470: LD_INT 0
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 2
55479: NEG
55480: PUSH
55481: LD_INT 1
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 3
55490: NEG
55491: PUSH
55492: LD_INT 1
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 4
55501: NEG
55502: PUSH
55503: LD_INT 0
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 4
55512: NEG
55513: PUSH
55514: LD_INT 1
55516: NEG
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 4
55524: NEG
55525: PUSH
55526: LD_INT 2
55528: NEG
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 2
55536: NEG
55537: PUSH
55538: LD_INT 2
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 4
55547: NEG
55548: PUSH
55549: LD_INT 4
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 4
55559: NEG
55560: PUSH
55561: LD_INT 5
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 3
55571: NEG
55572: PUSH
55573: LD_INT 4
55575: NEG
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 3
55583: NEG
55584: PUSH
55585: LD_INT 3
55587: NEG
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 4
55595: NEG
55596: PUSH
55597: LD_INT 3
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 5
55607: NEG
55608: PUSH
55609: LD_INT 4
55611: NEG
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 5
55619: NEG
55620: PUSH
55621: LD_INT 5
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 3
55631: NEG
55632: PUSH
55633: LD_INT 5
55635: NEG
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 5
55643: NEG
55644: PUSH
55645: LD_INT 3
55647: NEG
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 0
55655: PUSH
55656: LD_INT 3
55658: NEG
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: LD_INT 4
55669: NEG
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 1
55677: PUSH
55678: LD_INT 3
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 1
55688: PUSH
55689: LD_INT 2
55691: NEG
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 0
55699: PUSH
55700: LD_INT 2
55702: NEG
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 1
55710: NEG
55711: PUSH
55712: LD_INT 3
55714: NEG
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 1
55722: NEG
55723: PUSH
55724: LD_INT 4
55726: NEG
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 2
55734: PUSH
55735: LD_INT 2
55737: NEG
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 2
55745: NEG
55746: PUSH
55747: LD_INT 4
55749: NEG
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 4
55757: PUSH
55758: LD_INT 0
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 4
55767: PUSH
55768: LD_INT 1
55770: NEG
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 5
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 5
55788: PUSH
55789: LD_INT 1
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 4
55798: PUSH
55799: LD_INT 1
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 3
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 3
55818: PUSH
55819: LD_INT 1
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 3
55829: PUSH
55830: LD_INT 2
55832: NEG
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 5
55840: PUSH
55841: LD_INT 2
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55895: LD_ADDR_VAR 0 32
55899: PUSH
55900: LD_INT 4
55902: NEG
55903: PUSH
55904: LD_INT 0
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 4
55913: NEG
55914: PUSH
55915: LD_INT 1
55917: NEG
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 3
55925: NEG
55926: PUSH
55927: LD_INT 0
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 3
55936: NEG
55937: PUSH
55938: LD_INT 1
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 4
55947: NEG
55948: PUSH
55949: LD_INT 1
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 5
55958: NEG
55959: PUSH
55960: LD_INT 0
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 5
55969: NEG
55970: PUSH
55971: LD_INT 1
55973: NEG
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 5
55981: NEG
55982: PUSH
55983: LD_INT 2
55985: NEG
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 3
55993: NEG
55994: PUSH
55995: LD_INT 2
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 3
56004: NEG
56005: PUSH
56006: LD_INT 3
56008: NEG
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 3
56016: NEG
56017: PUSH
56018: LD_INT 4
56020: NEG
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 2
56028: NEG
56029: PUSH
56030: LD_INT 3
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 2
56040: NEG
56041: PUSH
56042: LD_INT 2
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 3
56052: NEG
56053: PUSH
56054: LD_INT 2
56056: NEG
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 4
56064: NEG
56065: PUSH
56066: LD_INT 3
56068: NEG
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 4
56076: NEG
56077: PUSH
56078: LD_INT 4
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 2
56088: NEG
56089: PUSH
56090: LD_INT 4
56092: NEG
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 4
56100: NEG
56101: PUSH
56102: LD_INT 2
56104: NEG
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: LD_INT 4
56115: NEG
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: LD_INT 5
56126: NEG
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 1
56134: PUSH
56135: LD_INT 4
56137: NEG
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 1
56145: PUSH
56146: LD_INT 3
56148: NEG
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 0
56156: PUSH
56157: LD_INT 3
56159: NEG
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 1
56167: NEG
56168: PUSH
56169: LD_INT 4
56171: NEG
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 1
56179: NEG
56180: PUSH
56181: LD_INT 5
56183: NEG
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 2
56191: PUSH
56192: LD_INT 3
56194: NEG
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 2
56202: NEG
56203: PUSH
56204: LD_INT 5
56206: NEG
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 3
56214: PUSH
56215: LD_INT 0
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 3
56224: PUSH
56225: LD_INT 1
56227: NEG
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 4
56235: PUSH
56236: LD_INT 0
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 4
56245: PUSH
56246: LD_INT 1
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 3
56255: PUSH
56256: LD_INT 1
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 2
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 2
56275: PUSH
56276: LD_INT 1
56278: NEG
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 2
56286: PUSH
56287: LD_INT 2
56289: NEG
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 4
56297: PUSH
56298: LD_INT 2
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 4
56307: PUSH
56308: LD_INT 4
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 4
56317: PUSH
56318: LD_INT 3
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 5
56327: PUSH
56328: LD_INT 4
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 5
56337: PUSH
56338: LD_INT 5
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 4
56347: PUSH
56348: LD_INT 5
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 3
56357: PUSH
56358: LD_INT 4
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 3
56367: PUSH
56368: LD_INT 3
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 5
56377: PUSH
56378: LD_INT 3
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 3
56387: PUSH
56388: LD_INT 5
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56442: LD_ADDR_VAR 0 33
56446: PUSH
56447: LD_INT 4
56449: NEG
56450: PUSH
56451: LD_INT 4
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 4
56461: NEG
56462: PUSH
56463: LD_INT 5
56465: NEG
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 3
56473: NEG
56474: PUSH
56475: LD_INT 4
56477: NEG
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 3
56485: NEG
56486: PUSH
56487: LD_INT 3
56489: NEG
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 4
56497: NEG
56498: PUSH
56499: LD_INT 3
56501: NEG
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 5
56509: NEG
56510: PUSH
56511: LD_INT 4
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 5
56521: NEG
56522: PUSH
56523: LD_INT 5
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 3
56533: NEG
56534: PUSH
56535: LD_INT 5
56537: NEG
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 5
56545: NEG
56546: PUSH
56547: LD_INT 3
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 0
56557: PUSH
56558: LD_INT 3
56560: NEG
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 0
56568: PUSH
56569: LD_INT 4
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 1
56579: PUSH
56580: LD_INT 3
56582: NEG
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 1
56590: PUSH
56591: LD_INT 2
56593: NEG
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 0
56601: PUSH
56602: LD_INT 2
56604: NEG
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 1
56612: NEG
56613: PUSH
56614: LD_INT 3
56616: NEG
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 1
56624: NEG
56625: PUSH
56626: LD_INT 4
56628: NEG
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 2
56636: PUSH
56637: LD_INT 2
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 2
56647: NEG
56648: PUSH
56649: LD_INT 4
56651: NEG
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 4
56659: PUSH
56660: LD_INT 0
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 4
56669: PUSH
56670: LD_INT 1
56672: NEG
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 5
56680: PUSH
56681: LD_INT 0
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 5
56690: PUSH
56691: LD_INT 1
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 4
56700: PUSH
56701: LD_INT 1
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 3
56710: PUSH
56711: LD_INT 0
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 3
56720: PUSH
56721: LD_INT 1
56723: NEG
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 3
56731: PUSH
56732: LD_INT 2
56734: NEG
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 5
56742: PUSH
56743: LD_INT 2
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 3
56752: PUSH
56753: LD_INT 3
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 3
56762: PUSH
56763: LD_INT 2
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 4
56772: PUSH
56773: LD_INT 3
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 4
56782: PUSH
56783: LD_INT 4
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 3
56792: PUSH
56793: LD_INT 4
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 2
56802: PUSH
56803: LD_INT 3
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 2
56812: PUSH
56813: LD_INT 2
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 4
56822: PUSH
56823: LD_INT 2
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 2
56832: PUSH
56833: LD_INT 4
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: LD_INT 4
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: LD_INT 3
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 1
56862: PUSH
56863: LD_INT 4
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: PUSH
56873: LD_INT 5
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 0
56882: PUSH
56883: LD_INT 5
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 1
56892: NEG
56893: PUSH
56894: LD_INT 4
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 1
56903: NEG
56904: PUSH
56905: LD_INT 3
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 2
56914: PUSH
56915: LD_INT 5
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 2
56924: NEG
56925: PUSH
56926: LD_INT 3
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56980: LD_ADDR_VAR 0 34
56984: PUSH
56985: LD_INT 0
56987: PUSH
56988: LD_INT 4
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 0
56998: PUSH
56999: LD_INT 5
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 1
57009: PUSH
57010: LD_INT 4
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 1
57020: PUSH
57021: LD_INT 3
57023: NEG
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 0
57031: PUSH
57032: LD_INT 3
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 1
57042: NEG
57043: PUSH
57044: LD_INT 4
57046: NEG
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 1
57054: NEG
57055: PUSH
57056: LD_INT 5
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 2
57066: PUSH
57067: LD_INT 3
57069: NEG
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 2
57077: NEG
57078: PUSH
57079: LD_INT 5
57081: NEG
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 3
57089: PUSH
57090: LD_INT 0
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 3
57099: PUSH
57100: LD_INT 1
57102: NEG
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 4
57110: PUSH
57111: LD_INT 0
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 4
57120: PUSH
57121: LD_INT 1
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 3
57130: PUSH
57131: LD_INT 1
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 2
57140: PUSH
57141: LD_INT 0
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 2
57150: PUSH
57151: LD_INT 1
57153: NEG
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 2
57161: PUSH
57162: LD_INT 2
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 4
57172: PUSH
57173: LD_INT 2
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 4
57182: PUSH
57183: LD_INT 4
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 4
57192: PUSH
57193: LD_INT 3
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 5
57202: PUSH
57203: LD_INT 4
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 5
57212: PUSH
57213: LD_INT 5
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 4
57222: PUSH
57223: LD_INT 5
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 3
57232: PUSH
57233: LD_INT 4
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 3
57242: PUSH
57243: LD_INT 3
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 5
57252: PUSH
57253: LD_INT 3
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 3
57262: PUSH
57263: LD_INT 5
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 0
57272: PUSH
57273: LD_INT 3
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 0
57282: PUSH
57283: LD_INT 2
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 1
57292: PUSH
57293: LD_INT 3
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 1
57302: PUSH
57303: LD_INT 4
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 0
57312: PUSH
57313: LD_INT 4
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 1
57322: NEG
57323: PUSH
57324: LD_INT 3
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 1
57333: NEG
57334: PUSH
57335: LD_INT 2
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 2
57344: PUSH
57345: LD_INT 4
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 2
57354: NEG
57355: PUSH
57356: LD_INT 2
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 4
57365: NEG
57366: PUSH
57367: LD_INT 0
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 4
57376: NEG
57377: PUSH
57378: LD_INT 1
57380: NEG
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 3
57388: NEG
57389: PUSH
57390: LD_INT 0
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 3
57399: NEG
57400: PUSH
57401: LD_INT 1
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 4
57410: NEG
57411: PUSH
57412: LD_INT 1
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 5
57421: NEG
57422: PUSH
57423: LD_INT 0
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 5
57432: NEG
57433: PUSH
57434: LD_INT 1
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 5
57444: NEG
57445: PUSH
57446: LD_INT 2
57448: NEG
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 3
57456: NEG
57457: PUSH
57458: LD_INT 2
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: ST_TO_ADDR
// end ; end ;
57512: GO 57515
57514: POP
// case btype of b_depot , b_warehouse :
57515: LD_VAR 0 1
57519: PUSH
57520: LD_INT 0
57522: DOUBLE
57523: EQUAL
57524: IFTRUE 57534
57526: LD_INT 1
57528: DOUBLE
57529: EQUAL
57530: IFTRUE 57534
57532: GO 57735
57534: POP
// case nation of nation_american :
57535: LD_VAR 0 5
57539: PUSH
57540: LD_INT 1
57542: DOUBLE
57543: EQUAL
57544: IFTRUE 57548
57546: GO 57604
57548: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57549: LD_ADDR_VAR 0 9
57553: PUSH
57554: LD_VAR 0 11
57558: PUSH
57559: LD_VAR 0 12
57563: PUSH
57564: LD_VAR 0 13
57568: PUSH
57569: LD_VAR 0 14
57573: PUSH
57574: LD_VAR 0 15
57578: PUSH
57579: LD_VAR 0 16
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: PUSH
57592: LD_VAR 0 4
57596: PUSH
57597: LD_INT 1
57599: PLUS
57600: ARRAY
57601: ST_TO_ADDR
57602: GO 57733
57604: LD_INT 2
57606: DOUBLE
57607: EQUAL
57608: IFTRUE 57612
57610: GO 57668
57612: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57613: LD_ADDR_VAR 0 9
57617: PUSH
57618: LD_VAR 0 17
57622: PUSH
57623: LD_VAR 0 18
57627: PUSH
57628: LD_VAR 0 19
57632: PUSH
57633: LD_VAR 0 20
57637: PUSH
57638: LD_VAR 0 21
57642: PUSH
57643: LD_VAR 0 22
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: PUSH
57656: LD_VAR 0 4
57660: PUSH
57661: LD_INT 1
57663: PLUS
57664: ARRAY
57665: ST_TO_ADDR
57666: GO 57733
57668: LD_INT 3
57670: DOUBLE
57671: EQUAL
57672: IFTRUE 57676
57674: GO 57732
57676: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57677: LD_ADDR_VAR 0 9
57681: PUSH
57682: LD_VAR 0 23
57686: PUSH
57687: LD_VAR 0 24
57691: PUSH
57692: LD_VAR 0 25
57696: PUSH
57697: LD_VAR 0 26
57701: PUSH
57702: LD_VAR 0 27
57706: PUSH
57707: LD_VAR 0 28
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: PUSH
57720: LD_VAR 0 4
57724: PUSH
57725: LD_INT 1
57727: PLUS
57728: ARRAY
57729: ST_TO_ADDR
57730: GO 57733
57732: POP
57733: GO 58288
57735: LD_INT 2
57737: DOUBLE
57738: EQUAL
57739: IFTRUE 57749
57741: LD_INT 3
57743: DOUBLE
57744: EQUAL
57745: IFTRUE 57749
57747: GO 57805
57749: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57750: LD_ADDR_VAR 0 9
57754: PUSH
57755: LD_VAR 0 29
57759: PUSH
57760: LD_VAR 0 30
57764: PUSH
57765: LD_VAR 0 31
57769: PUSH
57770: LD_VAR 0 32
57774: PUSH
57775: LD_VAR 0 33
57779: PUSH
57780: LD_VAR 0 34
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: PUSH
57793: LD_VAR 0 4
57797: PUSH
57798: LD_INT 1
57800: PLUS
57801: ARRAY
57802: ST_TO_ADDR
57803: GO 58288
57805: LD_INT 16
57807: DOUBLE
57808: EQUAL
57809: IFTRUE 57867
57811: LD_INT 17
57813: DOUBLE
57814: EQUAL
57815: IFTRUE 57867
57817: LD_INT 18
57819: DOUBLE
57820: EQUAL
57821: IFTRUE 57867
57823: LD_INT 19
57825: DOUBLE
57826: EQUAL
57827: IFTRUE 57867
57829: LD_INT 22
57831: DOUBLE
57832: EQUAL
57833: IFTRUE 57867
57835: LD_INT 20
57837: DOUBLE
57838: EQUAL
57839: IFTRUE 57867
57841: LD_INT 21
57843: DOUBLE
57844: EQUAL
57845: IFTRUE 57867
57847: LD_INT 23
57849: DOUBLE
57850: EQUAL
57851: IFTRUE 57867
57853: LD_INT 24
57855: DOUBLE
57856: EQUAL
57857: IFTRUE 57867
57859: LD_INT 25
57861: DOUBLE
57862: EQUAL
57863: IFTRUE 57867
57865: GO 57923
57867: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57868: LD_ADDR_VAR 0 9
57872: PUSH
57873: LD_VAR 0 35
57877: PUSH
57878: LD_VAR 0 36
57882: PUSH
57883: LD_VAR 0 37
57887: PUSH
57888: LD_VAR 0 38
57892: PUSH
57893: LD_VAR 0 39
57897: PUSH
57898: LD_VAR 0 40
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: PUSH
57911: LD_VAR 0 4
57915: PUSH
57916: LD_INT 1
57918: PLUS
57919: ARRAY
57920: ST_TO_ADDR
57921: GO 58288
57923: LD_INT 6
57925: DOUBLE
57926: EQUAL
57927: IFTRUE 57979
57929: LD_INT 7
57931: DOUBLE
57932: EQUAL
57933: IFTRUE 57979
57935: LD_INT 8
57937: DOUBLE
57938: EQUAL
57939: IFTRUE 57979
57941: LD_INT 13
57943: DOUBLE
57944: EQUAL
57945: IFTRUE 57979
57947: LD_INT 12
57949: DOUBLE
57950: EQUAL
57951: IFTRUE 57979
57953: LD_INT 15
57955: DOUBLE
57956: EQUAL
57957: IFTRUE 57979
57959: LD_INT 11
57961: DOUBLE
57962: EQUAL
57963: IFTRUE 57979
57965: LD_INT 14
57967: DOUBLE
57968: EQUAL
57969: IFTRUE 57979
57971: LD_INT 10
57973: DOUBLE
57974: EQUAL
57975: IFTRUE 57979
57977: GO 58035
57979: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57980: LD_ADDR_VAR 0 9
57984: PUSH
57985: LD_VAR 0 41
57989: PUSH
57990: LD_VAR 0 42
57994: PUSH
57995: LD_VAR 0 43
57999: PUSH
58000: LD_VAR 0 44
58004: PUSH
58005: LD_VAR 0 45
58009: PUSH
58010: LD_VAR 0 46
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: PUSH
58023: LD_VAR 0 4
58027: PUSH
58028: LD_INT 1
58030: PLUS
58031: ARRAY
58032: ST_TO_ADDR
58033: GO 58288
58035: LD_INT 36
58037: DOUBLE
58038: EQUAL
58039: IFTRUE 58043
58041: GO 58099
58043: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58044: LD_ADDR_VAR 0 9
58048: PUSH
58049: LD_VAR 0 47
58053: PUSH
58054: LD_VAR 0 48
58058: PUSH
58059: LD_VAR 0 49
58063: PUSH
58064: LD_VAR 0 50
58068: PUSH
58069: LD_VAR 0 51
58073: PUSH
58074: LD_VAR 0 52
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: PUSH
58087: LD_VAR 0 4
58091: PUSH
58092: LD_INT 1
58094: PLUS
58095: ARRAY
58096: ST_TO_ADDR
58097: GO 58288
58099: LD_INT 4
58101: DOUBLE
58102: EQUAL
58103: IFTRUE 58125
58105: LD_INT 5
58107: DOUBLE
58108: EQUAL
58109: IFTRUE 58125
58111: LD_INT 34
58113: DOUBLE
58114: EQUAL
58115: IFTRUE 58125
58117: LD_INT 37
58119: DOUBLE
58120: EQUAL
58121: IFTRUE 58125
58123: GO 58181
58125: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58126: LD_ADDR_VAR 0 9
58130: PUSH
58131: LD_VAR 0 53
58135: PUSH
58136: LD_VAR 0 54
58140: PUSH
58141: LD_VAR 0 55
58145: PUSH
58146: LD_VAR 0 56
58150: PUSH
58151: LD_VAR 0 57
58155: PUSH
58156: LD_VAR 0 58
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: PUSH
58169: LD_VAR 0 4
58173: PUSH
58174: LD_INT 1
58176: PLUS
58177: ARRAY
58178: ST_TO_ADDR
58179: GO 58288
58181: LD_INT 31
58183: DOUBLE
58184: EQUAL
58185: IFTRUE 58231
58187: LD_INT 32
58189: DOUBLE
58190: EQUAL
58191: IFTRUE 58231
58193: LD_INT 33
58195: DOUBLE
58196: EQUAL
58197: IFTRUE 58231
58199: LD_INT 27
58201: DOUBLE
58202: EQUAL
58203: IFTRUE 58231
58205: LD_INT 26
58207: DOUBLE
58208: EQUAL
58209: IFTRUE 58231
58211: LD_INT 28
58213: DOUBLE
58214: EQUAL
58215: IFTRUE 58231
58217: LD_INT 29
58219: DOUBLE
58220: EQUAL
58221: IFTRUE 58231
58223: LD_INT 30
58225: DOUBLE
58226: EQUAL
58227: IFTRUE 58231
58229: GO 58287
58231: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58232: LD_ADDR_VAR 0 9
58236: PUSH
58237: LD_VAR 0 59
58241: PUSH
58242: LD_VAR 0 60
58246: PUSH
58247: LD_VAR 0 61
58251: PUSH
58252: LD_VAR 0 62
58256: PUSH
58257: LD_VAR 0 63
58261: PUSH
58262: LD_VAR 0 64
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: PUSH
58275: LD_VAR 0 4
58279: PUSH
58280: LD_INT 1
58282: PLUS
58283: ARRAY
58284: ST_TO_ADDR
58285: GO 58288
58287: POP
// temp_list2 = [ ] ;
58288: LD_ADDR_VAR 0 10
58292: PUSH
58293: EMPTY
58294: ST_TO_ADDR
// for i in temp_list do
58295: LD_ADDR_VAR 0 8
58299: PUSH
58300: LD_VAR 0 9
58304: PUSH
58305: FOR_IN
58306: IFFALSE 58358
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58308: LD_ADDR_VAR 0 10
58312: PUSH
58313: LD_VAR 0 10
58317: PUSH
58318: LD_VAR 0 8
58322: PUSH
58323: LD_INT 1
58325: ARRAY
58326: PUSH
58327: LD_VAR 0 2
58331: PLUS
58332: PUSH
58333: LD_VAR 0 8
58337: PUSH
58338: LD_INT 2
58340: ARRAY
58341: PUSH
58342: LD_VAR 0 3
58346: PLUS
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: EMPTY
58353: LIST
58354: ADD
58355: ST_TO_ADDR
58356: GO 58305
58358: POP
58359: POP
// result = temp_list2 ;
58360: LD_ADDR_VAR 0 7
58364: PUSH
58365: LD_VAR 0 10
58369: ST_TO_ADDR
// end ;
58370: LD_VAR 0 7
58374: RET
// export function EnemyInRange ( unit , dist ) ; begin
58375: LD_INT 0
58377: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58378: LD_ADDR_VAR 0 3
58382: PUSH
58383: LD_VAR 0 1
58387: PPUSH
58388: CALL_OW 255
58392: PPUSH
58393: LD_VAR 0 1
58397: PPUSH
58398: CALL_OW 250
58402: PPUSH
58403: LD_VAR 0 1
58407: PPUSH
58408: CALL_OW 251
58412: PPUSH
58413: LD_VAR 0 2
58417: PPUSH
58418: CALL 31777 0 4
58422: PUSH
58423: LD_INT 4
58425: ARRAY
58426: ST_TO_ADDR
// end ;
58427: LD_VAR 0 3
58431: RET
// export function PlayerSeeMe ( unit ) ; begin
58432: LD_INT 0
58434: PPUSH
// result := See ( your_side , unit ) ;
58435: LD_ADDR_VAR 0 2
58439: PUSH
58440: LD_OWVAR 2
58444: PPUSH
58445: LD_VAR 0 1
58449: PPUSH
58450: CALL_OW 292
58454: ST_TO_ADDR
// end ;
58455: LD_VAR 0 2
58459: RET
// export function ReverseDir ( unit ) ; begin
58460: LD_INT 0
58462: PPUSH
// if not unit then
58463: LD_VAR 0 1
58467: NOT
58468: IFFALSE 58472
// exit ;
58470: GO 58495
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58472: LD_ADDR_VAR 0 2
58476: PUSH
58477: LD_VAR 0 1
58481: PPUSH
58482: CALL_OW 254
58486: PUSH
58487: LD_INT 3
58489: PLUS
58490: PUSH
58491: LD_INT 6
58493: MOD
58494: ST_TO_ADDR
// end ;
58495: LD_VAR 0 2
58499: RET
// export function ReverseArray ( array ) ; var i ; begin
58500: LD_INT 0
58502: PPUSH
58503: PPUSH
// if not array then
58504: LD_VAR 0 1
58508: NOT
58509: IFFALSE 58513
// exit ;
58511: GO 58568
// result := [ ] ;
58513: LD_ADDR_VAR 0 2
58517: PUSH
58518: EMPTY
58519: ST_TO_ADDR
// for i := array downto 1 do
58520: LD_ADDR_VAR 0 3
58524: PUSH
58525: DOUBLE
58526: LD_VAR 0 1
58530: INC
58531: ST_TO_ADDR
58532: LD_INT 1
58534: PUSH
58535: FOR_DOWNTO
58536: IFFALSE 58566
// result := Join ( result , array [ i ] ) ;
58538: LD_ADDR_VAR 0 2
58542: PUSH
58543: LD_VAR 0 2
58547: PPUSH
58548: LD_VAR 0 1
58552: PUSH
58553: LD_VAR 0 3
58557: ARRAY
58558: PPUSH
58559: CALL 63193 0 2
58563: ST_TO_ADDR
58564: GO 58535
58566: POP
58567: POP
// end ;
58568: LD_VAR 0 2
58572: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
58573: LD_INT 0
58575: PPUSH
58576: PPUSH
58577: PPUSH
58578: PPUSH
58579: PPUSH
58580: PPUSH
// if not unit or not hexes then
58581: LD_VAR 0 1
58585: NOT
58586: PUSH
58587: LD_VAR 0 2
58591: NOT
58592: OR
58593: IFFALSE 58597
// exit ;
58595: GO 58720
// dist := 9999 ;
58597: LD_ADDR_VAR 0 5
58601: PUSH
58602: LD_INT 9999
58604: ST_TO_ADDR
// for i = 1 to hexes do
58605: LD_ADDR_VAR 0 4
58609: PUSH
58610: DOUBLE
58611: LD_INT 1
58613: DEC
58614: ST_TO_ADDR
58615: LD_VAR 0 2
58619: PUSH
58620: FOR_TO
58621: IFFALSE 58708
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58623: LD_ADDR_VAR 0 6
58627: PUSH
58628: LD_VAR 0 1
58632: PPUSH
58633: LD_VAR 0 2
58637: PUSH
58638: LD_VAR 0 4
58642: ARRAY
58643: PUSH
58644: LD_INT 1
58646: ARRAY
58647: PPUSH
58648: LD_VAR 0 2
58652: PUSH
58653: LD_VAR 0 4
58657: ARRAY
58658: PUSH
58659: LD_INT 2
58661: ARRAY
58662: PPUSH
58663: CALL_OW 297
58667: ST_TO_ADDR
// if tdist < dist then
58668: LD_VAR 0 6
58672: PUSH
58673: LD_VAR 0 5
58677: LESS
58678: IFFALSE 58706
// begin hex := hexes [ i ] ;
58680: LD_ADDR_VAR 0 8
58684: PUSH
58685: LD_VAR 0 2
58689: PUSH
58690: LD_VAR 0 4
58694: ARRAY
58695: ST_TO_ADDR
// dist := tdist ;
58696: LD_ADDR_VAR 0 5
58700: PUSH
58701: LD_VAR 0 6
58705: ST_TO_ADDR
// end ; end ;
58706: GO 58620
58708: POP
58709: POP
// result := hex ;
58710: LD_ADDR_VAR 0 3
58714: PUSH
58715: LD_VAR 0 8
58719: ST_TO_ADDR
// end ;
58720: LD_VAR 0 3
58724: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58725: LD_INT 0
58727: PPUSH
58728: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58729: LD_VAR 0 1
58733: NOT
58734: PUSH
58735: LD_VAR 0 1
58739: PUSH
58740: LD_INT 21
58742: PUSH
58743: LD_INT 2
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 23
58752: PUSH
58753: LD_INT 2
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PPUSH
58764: CALL_OW 69
58768: IN
58769: NOT
58770: OR
58771: IFFALSE 58775
// exit ;
58773: GO 58822
// for i = 1 to 3 do
58775: LD_ADDR_VAR 0 3
58779: PUSH
58780: DOUBLE
58781: LD_INT 1
58783: DEC
58784: ST_TO_ADDR
58785: LD_INT 3
58787: PUSH
58788: FOR_TO
58789: IFFALSE 58820
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58791: LD_VAR 0 1
58795: PPUSH
58796: CALL_OW 250
58800: PPUSH
58801: LD_VAR 0 1
58805: PPUSH
58806: CALL_OW 251
58810: PPUSH
58811: LD_INT 1
58813: PPUSH
58814: CALL_OW 453
58818: GO 58788
58820: POP
58821: POP
// end ;
58822: LD_VAR 0 2
58826: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58827: LD_INT 0
58829: PPUSH
58830: PPUSH
58831: PPUSH
58832: PPUSH
58833: PPUSH
58834: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58835: LD_VAR 0 1
58839: NOT
58840: PUSH
58841: LD_VAR 0 2
58845: NOT
58846: OR
58847: PUSH
58848: LD_VAR 0 1
58852: PPUSH
58853: CALL_OW 314
58857: OR
58858: IFFALSE 58862
// exit ;
58860: GO 59303
// x := GetX ( enemy_unit ) ;
58862: LD_ADDR_VAR 0 7
58866: PUSH
58867: LD_VAR 0 2
58871: PPUSH
58872: CALL_OW 250
58876: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58877: LD_ADDR_VAR 0 8
58881: PUSH
58882: LD_VAR 0 2
58886: PPUSH
58887: CALL_OW 251
58891: ST_TO_ADDR
// if not x or not y then
58892: LD_VAR 0 7
58896: NOT
58897: PUSH
58898: LD_VAR 0 8
58902: NOT
58903: OR
58904: IFFALSE 58908
// exit ;
58906: GO 59303
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58908: LD_ADDR_VAR 0 6
58912: PUSH
58913: LD_VAR 0 7
58917: PPUSH
58918: LD_INT 0
58920: PPUSH
58921: LD_INT 4
58923: PPUSH
58924: CALL_OW 272
58928: PUSH
58929: LD_VAR 0 8
58933: PPUSH
58934: LD_INT 0
58936: PPUSH
58937: LD_INT 4
58939: PPUSH
58940: CALL_OW 273
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_VAR 0 7
58953: PPUSH
58954: LD_INT 1
58956: PPUSH
58957: LD_INT 4
58959: PPUSH
58960: CALL_OW 272
58964: PUSH
58965: LD_VAR 0 8
58969: PPUSH
58970: LD_INT 1
58972: PPUSH
58973: LD_INT 4
58975: PPUSH
58976: CALL_OW 273
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_VAR 0 7
58989: PPUSH
58990: LD_INT 2
58992: PPUSH
58993: LD_INT 4
58995: PPUSH
58996: CALL_OW 272
59000: PUSH
59001: LD_VAR 0 8
59005: PPUSH
59006: LD_INT 2
59008: PPUSH
59009: LD_INT 4
59011: PPUSH
59012: CALL_OW 273
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_VAR 0 7
59025: PPUSH
59026: LD_INT 3
59028: PPUSH
59029: LD_INT 4
59031: PPUSH
59032: CALL_OW 272
59036: PUSH
59037: LD_VAR 0 8
59041: PPUSH
59042: LD_INT 3
59044: PPUSH
59045: LD_INT 4
59047: PPUSH
59048: CALL_OW 273
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_VAR 0 7
59061: PPUSH
59062: LD_INT 4
59064: PPUSH
59065: LD_INT 4
59067: PPUSH
59068: CALL_OW 272
59072: PUSH
59073: LD_VAR 0 8
59077: PPUSH
59078: LD_INT 4
59080: PPUSH
59081: LD_INT 4
59083: PPUSH
59084: CALL_OW 273
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_VAR 0 7
59097: PPUSH
59098: LD_INT 5
59100: PPUSH
59101: LD_INT 4
59103: PPUSH
59104: CALL_OW 272
59108: PUSH
59109: LD_VAR 0 8
59113: PPUSH
59114: LD_INT 5
59116: PPUSH
59117: LD_INT 4
59119: PPUSH
59120: CALL_OW 273
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: ST_TO_ADDR
// for i = tmp downto 1 do
59137: LD_ADDR_VAR 0 4
59141: PUSH
59142: DOUBLE
59143: LD_VAR 0 6
59147: INC
59148: ST_TO_ADDR
59149: LD_INT 1
59151: PUSH
59152: FOR_DOWNTO
59153: IFFALSE 59254
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59155: LD_VAR 0 6
59159: PUSH
59160: LD_VAR 0 4
59164: ARRAY
59165: PUSH
59166: LD_INT 1
59168: ARRAY
59169: PPUSH
59170: LD_VAR 0 6
59174: PUSH
59175: LD_VAR 0 4
59179: ARRAY
59180: PUSH
59181: LD_INT 2
59183: ARRAY
59184: PPUSH
59185: CALL_OW 488
59189: NOT
59190: PUSH
59191: LD_VAR 0 6
59195: PUSH
59196: LD_VAR 0 4
59200: ARRAY
59201: PUSH
59202: LD_INT 1
59204: ARRAY
59205: PPUSH
59206: LD_VAR 0 6
59210: PUSH
59211: LD_VAR 0 4
59215: ARRAY
59216: PUSH
59217: LD_INT 2
59219: ARRAY
59220: PPUSH
59221: CALL_OW 428
59225: PUSH
59226: LD_INT 0
59228: NONEQUAL
59229: OR
59230: IFFALSE 59252
// tmp := Delete ( tmp , i ) ;
59232: LD_ADDR_VAR 0 6
59236: PUSH
59237: LD_VAR 0 6
59241: PPUSH
59242: LD_VAR 0 4
59246: PPUSH
59247: CALL_OW 3
59251: ST_TO_ADDR
59252: GO 59152
59254: POP
59255: POP
// j := GetClosestHex ( unit , tmp ) ;
59256: LD_ADDR_VAR 0 5
59260: PUSH
59261: LD_VAR 0 1
59265: PPUSH
59266: LD_VAR 0 6
59270: PPUSH
59271: CALL 58573 0 2
59275: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59276: LD_VAR 0 1
59280: PPUSH
59281: LD_VAR 0 5
59285: PUSH
59286: LD_INT 1
59288: ARRAY
59289: PPUSH
59290: LD_VAR 0 5
59294: PUSH
59295: LD_INT 2
59297: ARRAY
59298: PPUSH
59299: CALL_OW 111
// end ;
59303: LD_VAR 0 3
59307: RET
// export function PrepareApemanSoldier ( ) ; begin
59308: LD_INT 0
59310: PPUSH
// uc_nation := 0 ;
59311: LD_ADDR_OWVAR 21
59315: PUSH
59316: LD_INT 0
59318: ST_TO_ADDR
// hc_sex := sex_male ;
59319: LD_ADDR_OWVAR 27
59323: PUSH
59324: LD_INT 1
59326: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
59327: LD_ADDR_OWVAR 28
59331: PUSH
59332: LD_INT 15
59334: ST_TO_ADDR
// hc_gallery :=  ;
59335: LD_ADDR_OWVAR 33
59339: PUSH
59340: LD_STRING 
59342: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59343: LD_ADDR_OWVAR 31
59347: PUSH
59348: LD_INT 0
59350: PPUSH
59351: LD_INT 3
59353: PPUSH
59354: CALL_OW 12
59358: PUSH
59359: LD_INT 0
59361: PPUSH
59362: LD_INT 3
59364: PPUSH
59365: CALL_OW 12
59369: PUSH
59370: LD_INT 0
59372: PUSH
59373: LD_INT 0
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: ST_TO_ADDR
// end ;
59382: LD_VAR 0 1
59386: RET
// export function PrepareApemanEngineer ( ) ; begin
59387: LD_INT 0
59389: PPUSH
// uc_nation := 0 ;
59390: LD_ADDR_OWVAR 21
59394: PUSH
59395: LD_INT 0
59397: ST_TO_ADDR
// hc_sex := sex_male ;
59398: LD_ADDR_OWVAR 27
59402: PUSH
59403: LD_INT 1
59405: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
59406: LD_ADDR_OWVAR 28
59410: PUSH
59411: LD_INT 16
59413: ST_TO_ADDR
// hc_gallery :=  ;
59414: LD_ADDR_OWVAR 33
59418: PUSH
59419: LD_STRING 
59421: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59422: LD_ADDR_OWVAR 31
59426: PUSH
59427: LD_INT 0
59429: PPUSH
59430: LD_INT 3
59432: PPUSH
59433: CALL_OW 12
59437: PUSH
59438: LD_INT 0
59440: PPUSH
59441: LD_INT 3
59443: PPUSH
59444: CALL_OW 12
59448: PUSH
59449: LD_INT 0
59451: PUSH
59452: LD_INT 0
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: ST_TO_ADDR
// end ;
59461: LD_VAR 0 1
59465: RET
// export function PrepareApeman ( agressivity ) ; begin
59466: LD_INT 0
59468: PPUSH
// uc_side := 0 ;
59469: LD_ADDR_OWVAR 20
59473: PUSH
59474: LD_INT 0
59476: ST_TO_ADDR
// uc_nation := 0 ;
59477: LD_ADDR_OWVAR 21
59481: PUSH
59482: LD_INT 0
59484: ST_TO_ADDR
// hc_sex := sex_male ;
59485: LD_ADDR_OWVAR 27
59489: PUSH
59490: LD_INT 1
59492: ST_TO_ADDR
// hc_class := class_apeman ;
59493: LD_ADDR_OWVAR 28
59497: PUSH
59498: LD_INT 12
59500: ST_TO_ADDR
// hc_gallery :=  ;
59501: LD_ADDR_OWVAR 33
59505: PUSH
59506: LD_STRING 
59508: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59509: LD_ADDR_OWVAR 35
59513: PUSH
59514: LD_VAR 0 1
59518: NEG
59519: PPUSH
59520: LD_VAR 0 1
59524: PPUSH
59525: CALL_OW 12
59529: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59530: LD_ADDR_OWVAR 31
59534: PUSH
59535: LD_INT 0
59537: PPUSH
59538: LD_INT 3
59540: PPUSH
59541: CALL_OW 12
59545: PUSH
59546: LD_INT 0
59548: PPUSH
59549: LD_INT 3
59551: PPUSH
59552: CALL_OW 12
59556: PUSH
59557: LD_INT 0
59559: PUSH
59560: LD_INT 0
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: ST_TO_ADDR
// end ;
59569: LD_VAR 0 2
59573: RET
// export function PrepareTiger ( agressivity ) ; begin
59574: LD_INT 0
59576: PPUSH
// uc_side := 0 ;
59577: LD_ADDR_OWVAR 20
59581: PUSH
59582: LD_INT 0
59584: ST_TO_ADDR
// uc_nation := 0 ;
59585: LD_ADDR_OWVAR 21
59589: PUSH
59590: LD_INT 0
59592: ST_TO_ADDR
// hc_class := class_tiger ;
59593: LD_ADDR_OWVAR 28
59597: PUSH
59598: LD_INT 14
59600: ST_TO_ADDR
// hc_gallery :=  ;
59601: LD_ADDR_OWVAR 33
59605: PUSH
59606: LD_STRING 
59608: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59609: LD_ADDR_OWVAR 35
59613: PUSH
59614: LD_VAR 0 1
59618: NEG
59619: PPUSH
59620: LD_VAR 0 1
59624: PPUSH
59625: CALL_OW 12
59629: ST_TO_ADDR
// end ;
59630: LD_VAR 0 2
59634: RET
// export function PrepareEnchidna ( ) ; begin
59635: LD_INT 0
59637: PPUSH
// uc_side := 0 ;
59638: LD_ADDR_OWVAR 20
59642: PUSH
59643: LD_INT 0
59645: ST_TO_ADDR
// uc_nation := 0 ;
59646: LD_ADDR_OWVAR 21
59650: PUSH
59651: LD_INT 0
59653: ST_TO_ADDR
// hc_class := class_baggie ;
59654: LD_ADDR_OWVAR 28
59658: PUSH
59659: LD_INT 13
59661: ST_TO_ADDR
// hc_gallery :=  ;
59662: LD_ADDR_OWVAR 33
59666: PUSH
59667: LD_STRING 
59669: ST_TO_ADDR
// end ;
59670: LD_VAR 0 1
59674: RET
// export function PrepareFrog ( ) ; begin
59675: LD_INT 0
59677: PPUSH
// uc_side := 0 ;
59678: LD_ADDR_OWVAR 20
59682: PUSH
59683: LD_INT 0
59685: ST_TO_ADDR
// uc_nation := 0 ;
59686: LD_ADDR_OWVAR 21
59690: PUSH
59691: LD_INT 0
59693: ST_TO_ADDR
// hc_class := class_frog ;
59694: LD_ADDR_OWVAR 28
59698: PUSH
59699: LD_INT 19
59701: ST_TO_ADDR
// hc_gallery :=  ;
59702: LD_ADDR_OWVAR 33
59706: PUSH
59707: LD_STRING 
59709: ST_TO_ADDR
// end ;
59710: LD_VAR 0 1
59714: RET
// export function PrepareFish ( ) ; begin
59715: LD_INT 0
59717: PPUSH
// uc_side := 0 ;
59718: LD_ADDR_OWVAR 20
59722: PUSH
59723: LD_INT 0
59725: ST_TO_ADDR
// uc_nation := 0 ;
59726: LD_ADDR_OWVAR 21
59730: PUSH
59731: LD_INT 0
59733: ST_TO_ADDR
// hc_class := class_fish ;
59734: LD_ADDR_OWVAR 28
59738: PUSH
59739: LD_INT 20
59741: ST_TO_ADDR
// hc_gallery :=  ;
59742: LD_ADDR_OWVAR 33
59746: PUSH
59747: LD_STRING 
59749: ST_TO_ADDR
// end ;
59750: LD_VAR 0 1
59754: RET
// export function PrepareBird ( ) ; begin
59755: LD_INT 0
59757: PPUSH
// uc_side := 0 ;
59758: LD_ADDR_OWVAR 20
59762: PUSH
59763: LD_INT 0
59765: ST_TO_ADDR
// uc_nation := 0 ;
59766: LD_ADDR_OWVAR 21
59770: PUSH
59771: LD_INT 0
59773: ST_TO_ADDR
// hc_class := class_phororhacos ;
59774: LD_ADDR_OWVAR 28
59778: PUSH
59779: LD_INT 18
59781: ST_TO_ADDR
// hc_gallery :=  ;
59782: LD_ADDR_OWVAR 33
59786: PUSH
59787: LD_STRING 
59789: ST_TO_ADDR
// end ;
59790: LD_VAR 0 1
59794: RET
// export function PrepareHorse ( ) ; begin
59795: LD_INT 0
59797: PPUSH
// uc_side := 0 ;
59798: LD_ADDR_OWVAR 20
59802: PUSH
59803: LD_INT 0
59805: ST_TO_ADDR
// uc_nation := 0 ;
59806: LD_ADDR_OWVAR 21
59810: PUSH
59811: LD_INT 0
59813: ST_TO_ADDR
// hc_class := class_horse ;
59814: LD_ADDR_OWVAR 28
59818: PUSH
59819: LD_INT 21
59821: ST_TO_ADDR
// hc_gallery :=  ;
59822: LD_ADDR_OWVAR 33
59826: PUSH
59827: LD_STRING 
59829: ST_TO_ADDR
// end ;
59830: LD_VAR 0 1
59834: RET
// export function PrepareMastodont ( ) ; begin
59835: LD_INT 0
59837: PPUSH
// uc_side := 0 ;
59838: LD_ADDR_OWVAR 20
59842: PUSH
59843: LD_INT 0
59845: ST_TO_ADDR
// uc_nation := 0 ;
59846: LD_ADDR_OWVAR 21
59850: PUSH
59851: LD_INT 0
59853: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59854: LD_ADDR_OWVAR 37
59858: PUSH
59859: LD_INT 31
59861: ST_TO_ADDR
// vc_control := control_rider ;
59862: LD_ADDR_OWVAR 38
59866: PUSH
59867: LD_INT 4
59869: ST_TO_ADDR
// end ;
59870: LD_VAR 0 1
59874: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59875: LD_INT 0
59877: PPUSH
59878: PPUSH
59879: PPUSH
// uc_side = 0 ;
59880: LD_ADDR_OWVAR 20
59884: PUSH
59885: LD_INT 0
59887: ST_TO_ADDR
// uc_nation = 0 ;
59888: LD_ADDR_OWVAR 21
59892: PUSH
59893: LD_INT 0
59895: ST_TO_ADDR
// InitHc_All ( ) ;
59896: CALL_OW 584
// InitVc ;
59900: CALL_OW 20
// if mastodonts then
59904: LD_VAR 0 6
59908: IFFALSE 59975
// for i = 1 to mastodonts do
59910: LD_ADDR_VAR 0 11
59914: PUSH
59915: DOUBLE
59916: LD_INT 1
59918: DEC
59919: ST_TO_ADDR
59920: LD_VAR 0 6
59924: PUSH
59925: FOR_TO
59926: IFFALSE 59973
// begin vc_chassis := 31 ;
59928: LD_ADDR_OWVAR 37
59932: PUSH
59933: LD_INT 31
59935: ST_TO_ADDR
// vc_control := control_rider ;
59936: LD_ADDR_OWVAR 38
59940: PUSH
59941: LD_INT 4
59943: ST_TO_ADDR
// animal := CreateVehicle ;
59944: LD_ADDR_VAR 0 12
59948: PUSH
59949: CALL_OW 45
59953: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59954: LD_VAR 0 12
59958: PPUSH
59959: LD_VAR 0 8
59963: PPUSH
59964: LD_INT 0
59966: PPUSH
59967: CALL 62110 0 3
// end ;
59971: GO 59925
59973: POP
59974: POP
// if horses then
59975: LD_VAR 0 5
59979: IFFALSE 60046
// for i = 1 to horses do
59981: LD_ADDR_VAR 0 11
59985: PUSH
59986: DOUBLE
59987: LD_INT 1
59989: DEC
59990: ST_TO_ADDR
59991: LD_VAR 0 5
59995: PUSH
59996: FOR_TO
59997: IFFALSE 60044
// begin hc_class := 21 ;
59999: LD_ADDR_OWVAR 28
60003: PUSH
60004: LD_INT 21
60006: ST_TO_ADDR
// hc_gallery :=  ;
60007: LD_ADDR_OWVAR 33
60011: PUSH
60012: LD_STRING 
60014: ST_TO_ADDR
// animal := CreateHuman ;
60015: LD_ADDR_VAR 0 12
60019: PUSH
60020: CALL_OW 44
60024: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60025: LD_VAR 0 12
60029: PPUSH
60030: LD_VAR 0 8
60034: PPUSH
60035: LD_INT 0
60037: PPUSH
60038: CALL 62110 0 3
// end ;
60042: GO 59996
60044: POP
60045: POP
// if birds then
60046: LD_VAR 0 1
60050: IFFALSE 60117
// for i = 1 to birds do
60052: LD_ADDR_VAR 0 11
60056: PUSH
60057: DOUBLE
60058: LD_INT 1
60060: DEC
60061: ST_TO_ADDR
60062: LD_VAR 0 1
60066: PUSH
60067: FOR_TO
60068: IFFALSE 60115
// begin hc_class = 18 ;
60070: LD_ADDR_OWVAR 28
60074: PUSH
60075: LD_INT 18
60077: ST_TO_ADDR
// hc_gallery =  ;
60078: LD_ADDR_OWVAR 33
60082: PUSH
60083: LD_STRING 
60085: ST_TO_ADDR
// animal := CreateHuman ;
60086: LD_ADDR_VAR 0 12
60090: PUSH
60091: CALL_OW 44
60095: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60096: LD_VAR 0 12
60100: PPUSH
60101: LD_VAR 0 8
60105: PPUSH
60106: LD_INT 0
60108: PPUSH
60109: CALL 62110 0 3
// end ;
60113: GO 60067
60115: POP
60116: POP
// if tigers then
60117: LD_VAR 0 2
60121: IFFALSE 60205
// for i = 1 to tigers do
60123: LD_ADDR_VAR 0 11
60127: PUSH
60128: DOUBLE
60129: LD_INT 1
60131: DEC
60132: ST_TO_ADDR
60133: LD_VAR 0 2
60137: PUSH
60138: FOR_TO
60139: IFFALSE 60203
// begin hc_class = class_tiger ;
60141: LD_ADDR_OWVAR 28
60145: PUSH
60146: LD_INT 14
60148: ST_TO_ADDR
// hc_gallery =  ;
60149: LD_ADDR_OWVAR 33
60153: PUSH
60154: LD_STRING 
60156: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60157: LD_ADDR_OWVAR 35
60161: PUSH
60162: LD_INT 7
60164: NEG
60165: PPUSH
60166: LD_INT 7
60168: PPUSH
60169: CALL_OW 12
60173: ST_TO_ADDR
// animal := CreateHuman ;
60174: LD_ADDR_VAR 0 12
60178: PUSH
60179: CALL_OW 44
60183: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60184: LD_VAR 0 12
60188: PPUSH
60189: LD_VAR 0 8
60193: PPUSH
60194: LD_INT 0
60196: PPUSH
60197: CALL 62110 0 3
// end ;
60201: GO 60138
60203: POP
60204: POP
// if apemans then
60205: LD_VAR 0 3
60209: IFFALSE 60332
// for i = 1 to apemans do
60211: LD_ADDR_VAR 0 11
60215: PUSH
60216: DOUBLE
60217: LD_INT 1
60219: DEC
60220: ST_TO_ADDR
60221: LD_VAR 0 3
60225: PUSH
60226: FOR_TO
60227: IFFALSE 60330
// begin hc_class = class_apeman ;
60229: LD_ADDR_OWVAR 28
60233: PUSH
60234: LD_INT 12
60236: ST_TO_ADDR
// hc_gallery =  ;
60237: LD_ADDR_OWVAR 33
60241: PUSH
60242: LD_STRING 
60244: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60245: LD_ADDR_OWVAR 35
60249: PUSH
60250: LD_INT 2
60252: NEG
60253: PPUSH
60254: LD_INT 2
60256: PPUSH
60257: CALL_OW 12
60261: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60262: LD_ADDR_OWVAR 31
60266: PUSH
60267: LD_INT 1
60269: PPUSH
60270: LD_INT 3
60272: PPUSH
60273: CALL_OW 12
60277: PUSH
60278: LD_INT 1
60280: PPUSH
60281: LD_INT 3
60283: PPUSH
60284: CALL_OW 12
60288: PUSH
60289: LD_INT 0
60291: PUSH
60292: LD_INT 0
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: ST_TO_ADDR
// animal := CreateHuman ;
60301: LD_ADDR_VAR 0 12
60305: PUSH
60306: CALL_OW 44
60310: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60311: LD_VAR 0 12
60315: PPUSH
60316: LD_VAR 0 8
60320: PPUSH
60321: LD_INT 0
60323: PPUSH
60324: CALL 62110 0 3
// end ;
60328: GO 60226
60330: POP
60331: POP
// if enchidnas then
60332: LD_VAR 0 4
60336: IFFALSE 60403
// for i = 1 to enchidnas do
60338: LD_ADDR_VAR 0 11
60342: PUSH
60343: DOUBLE
60344: LD_INT 1
60346: DEC
60347: ST_TO_ADDR
60348: LD_VAR 0 4
60352: PUSH
60353: FOR_TO
60354: IFFALSE 60401
// begin hc_class = 13 ;
60356: LD_ADDR_OWVAR 28
60360: PUSH
60361: LD_INT 13
60363: ST_TO_ADDR
// hc_gallery =  ;
60364: LD_ADDR_OWVAR 33
60368: PUSH
60369: LD_STRING 
60371: ST_TO_ADDR
// animal := CreateHuman ;
60372: LD_ADDR_VAR 0 12
60376: PUSH
60377: CALL_OW 44
60381: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60382: LD_VAR 0 12
60386: PPUSH
60387: LD_VAR 0 8
60391: PPUSH
60392: LD_INT 0
60394: PPUSH
60395: CALL 62110 0 3
// end ;
60399: GO 60353
60401: POP
60402: POP
// if fishes then
60403: LD_VAR 0 7
60407: IFFALSE 60474
// for i = 1 to fishes do
60409: LD_ADDR_VAR 0 11
60413: PUSH
60414: DOUBLE
60415: LD_INT 1
60417: DEC
60418: ST_TO_ADDR
60419: LD_VAR 0 7
60423: PUSH
60424: FOR_TO
60425: IFFALSE 60472
// begin hc_class = 20 ;
60427: LD_ADDR_OWVAR 28
60431: PUSH
60432: LD_INT 20
60434: ST_TO_ADDR
// hc_gallery =  ;
60435: LD_ADDR_OWVAR 33
60439: PUSH
60440: LD_STRING 
60442: ST_TO_ADDR
// animal := CreateHuman ;
60443: LD_ADDR_VAR 0 12
60447: PUSH
60448: CALL_OW 44
60452: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60453: LD_VAR 0 12
60457: PPUSH
60458: LD_VAR 0 9
60462: PPUSH
60463: LD_INT 0
60465: PPUSH
60466: CALL 62110 0 3
// end ;
60470: GO 60424
60472: POP
60473: POP
// end ;
60474: LD_VAR 0 10
60478: RET
// export function WantHeal ( sci , unit ) ; begin
60479: LD_INT 0
60481: PPUSH
// if GetTaskList ( sci ) > 0 then
60482: LD_VAR 0 1
60486: PPUSH
60487: CALL_OW 437
60491: PUSH
60492: LD_INT 0
60494: GREATER
60495: IFFALSE 60565
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60497: LD_VAR 0 1
60501: PPUSH
60502: CALL_OW 437
60506: PUSH
60507: LD_INT 1
60509: ARRAY
60510: PUSH
60511: LD_INT 1
60513: ARRAY
60514: PUSH
60515: LD_STRING l
60517: EQUAL
60518: PUSH
60519: LD_VAR 0 1
60523: PPUSH
60524: CALL_OW 437
60528: PUSH
60529: LD_INT 1
60531: ARRAY
60532: PUSH
60533: LD_INT 4
60535: ARRAY
60536: PUSH
60537: LD_VAR 0 2
60541: EQUAL
60542: AND
60543: IFFALSE 60555
// result := true else
60545: LD_ADDR_VAR 0 3
60549: PUSH
60550: LD_INT 1
60552: ST_TO_ADDR
60553: GO 60563
// result := false ;
60555: LD_ADDR_VAR 0 3
60559: PUSH
60560: LD_INT 0
60562: ST_TO_ADDR
// end else
60563: GO 60573
// result := false ;
60565: LD_ADDR_VAR 0 3
60569: PUSH
60570: LD_INT 0
60572: ST_TO_ADDR
// end ;
60573: LD_VAR 0 3
60577: RET
// export function HealTarget ( sci ) ; begin
60578: LD_INT 0
60580: PPUSH
// if not sci then
60581: LD_VAR 0 1
60585: NOT
60586: IFFALSE 60590
// exit ;
60588: GO 60655
// result := 0 ;
60590: LD_ADDR_VAR 0 2
60594: PUSH
60595: LD_INT 0
60597: ST_TO_ADDR
// if GetTaskList ( sci ) then
60598: LD_VAR 0 1
60602: PPUSH
60603: CALL_OW 437
60607: IFFALSE 60655
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60609: LD_VAR 0 1
60613: PPUSH
60614: CALL_OW 437
60618: PUSH
60619: LD_INT 1
60621: ARRAY
60622: PUSH
60623: LD_INT 1
60625: ARRAY
60626: PUSH
60627: LD_STRING l
60629: EQUAL
60630: IFFALSE 60655
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60632: LD_ADDR_VAR 0 2
60636: PUSH
60637: LD_VAR 0 1
60641: PPUSH
60642: CALL_OW 437
60646: PUSH
60647: LD_INT 1
60649: ARRAY
60650: PUSH
60651: LD_INT 4
60653: ARRAY
60654: ST_TO_ADDR
// end ;
60655: LD_VAR 0 2
60659: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60660: LD_INT 0
60662: PPUSH
60663: PPUSH
60664: PPUSH
60665: PPUSH
// if not base_units then
60666: LD_VAR 0 1
60670: NOT
60671: IFFALSE 60675
// exit ;
60673: GO 60762
// result := false ;
60675: LD_ADDR_VAR 0 2
60679: PUSH
60680: LD_INT 0
60682: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60683: LD_ADDR_VAR 0 5
60687: PUSH
60688: LD_VAR 0 1
60692: PPUSH
60693: LD_INT 21
60695: PUSH
60696: LD_INT 3
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PPUSH
60703: CALL_OW 72
60707: ST_TO_ADDR
// if not tmp then
60708: LD_VAR 0 5
60712: NOT
60713: IFFALSE 60717
// exit ;
60715: GO 60762
// for i in tmp do
60717: LD_ADDR_VAR 0 3
60721: PUSH
60722: LD_VAR 0 5
60726: PUSH
60727: FOR_IN
60728: IFFALSE 60760
// begin result := EnemyInRange ( i , 22 ) ;
60730: LD_ADDR_VAR 0 2
60734: PUSH
60735: LD_VAR 0 3
60739: PPUSH
60740: LD_INT 22
60742: PPUSH
60743: CALL 58375 0 2
60747: ST_TO_ADDR
// if result then
60748: LD_VAR 0 2
60752: IFFALSE 60758
// exit ;
60754: POP
60755: POP
60756: GO 60762
// end ;
60758: GO 60727
60760: POP
60761: POP
// end ;
60762: LD_VAR 0 2
60766: RET
// export function FilterByTag ( units , tag ) ; begin
60767: LD_INT 0
60769: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60770: LD_ADDR_VAR 0 3
60774: PUSH
60775: LD_VAR 0 1
60779: PPUSH
60780: LD_INT 120
60782: PUSH
60783: LD_VAR 0 2
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PPUSH
60792: CALL_OW 72
60796: ST_TO_ADDR
// end ;
60797: LD_VAR 0 3
60801: RET
// export function IsDriver ( un ) ; begin
60802: LD_INT 0
60804: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60805: LD_ADDR_VAR 0 2
60809: PUSH
60810: LD_VAR 0 1
60814: PUSH
60815: LD_INT 55
60817: PUSH
60818: EMPTY
60819: LIST
60820: PPUSH
60821: CALL_OW 69
60825: IN
60826: ST_TO_ADDR
// end ;
60827: LD_VAR 0 2
60831: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60832: LD_INT 0
60834: PPUSH
60835: PPUSH
// list := [ ] ;
60836: LD_ADDR_VAR 0 5
60840: PUSH
60841: EMPTY
60842: ST_TO_ADDR
// case d of 0 :
60843: LD_VAR 0 3
60847: PUSH
60848: LD_INT 0
60850: DOUBLE
60851: EQUAL
60852: IFTRUE 60856
60854: GO 60989
60856: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60857: LD_ADDR_VAR 0 5
60861: PUSH
60862: LD_VAR 0 1
60866: PUSH
60867: LD_INT 4
60869: MINUS
60870: PUSH
60871: LD_VAR 0 2
60875: PUSH
60876: LD_INT 4
60878: MINUS
60879: PUSH
60880: LD_INT 2
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: LIST
60887: PUSH
60888: LD_VAR 0 1
60892: PUSH
60893: LD_INT 3
60895: MINUS
60896: PUSH
60897: LD_VAR 0 2
60901: PUSH
60902: LD_INT 1
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: LIST
60909: PUSH
60910: LD_VAR 0 1
60914: PUSH
60915: LD_INT 4
60917: PLUS
60918: PUSH
60919: LD_VAR 0 2
60923: PUSH
60924: LD_INT 4
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: LIST
60931: PUSH
60932: LD_VAR 0 1
60936: PUSH
60937: LD_INT 3
60939: PLUS
60940: PUSH
60941: LD_VAR 0 2
60945: PUSH
60946: LD_INT 3
60948: PLUS
60949: PUSH
60950: LD_INT 5
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: LIST
60957: PUSH
60958: LD_VAR 0 1
60962: PUSH
60963: LD_VAR 0 2
60967: PUSH
60968: LD_INT 4
60970: PLUS
60971: PUSH
60972: LD_INT 0
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: LIST
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: ST_TO_ADDR
// end ; 1 :
60987: GO 61687
60989: LD_INT 1
60991: DOUBLE
60992: EQUAL
60993: IFTRUE 60997
60995: GO 61130
60997: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60998: LD_ADDR_VAR 0 5
61002: PUSH
61003: LD_VAR 0 1
61007: PUSH
61008: LD_VAR 0 2
61012: PUSH
61013: LD_INT 4
61015: MINUS
61016: PUSH
61017: LD_INT 3
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: LIST
61024: PUSH
61025: LD_VAR 0 1
61029: PUSH
61030: LD_INT 3
61032: MINUS
61033: PUSH
61034: LD_VAR 0 2
61038: PUSH
61039: LD_INT 3
61041: MINUS
61042: PUSH
61043: LD_INT 2
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: LIST
61050: PUSH
61051: LD_VAR 0 1
61055: PUSH
61056: LD_INT 4
61058: MINUS
61059: PUSH
61060: LD_VAR 0 2
61064: PUSH
61065: LD_INT 1
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: LIST
61072: PUSH
61073: LD_VAR 0 1
61077: PUSH
61078: LD_VAR 0 2
61082: PUSH
61083: LD_INT 3
61085: PLUS
61086: PUSH
61087: LD_INT 0
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: LIST
61094: PUSH
61095: LD_VAR 0 1
61099: PUSH
61100: LD_INT 4
61102: PLUS
61103: PUSH
61104: LD_VAR 0 2
61108: PUSH
61109: LD_INT 4
61111: PLUS
61112: PUSH
61113: LD_INT 5
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: LIST
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: ST_TO_ADDR
// end ; 2 :
61128: GO 61687
61130: LD_INT 2
61132: DOUBLE
61133: EQUAL
61134: IFTRUE 61138
61136: GO 61267
61138: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61139: LD_ADDR_VAR 0 5
61143: PUSH
61144: LD_VAR 0 1
61148: PUSH
61149: LD_VAR 0 2
61153: PUSH
61154: LD_INT 3
61156: MINUS
61157: PUSH
61158: LD_INT 3
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: LIST
61165: PUSH
61166: LD_VAR 0 1
61170: PUSH
61171: LD_INT 4
61173: PLUS
61174: PUSH
61175: LD_VAR 0 2
61179: PUSH
61180: LD_INT 4
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: LIST
61187: PUSH
61188: LD_VAR 0 1
61192: PUSH
61193: LD_VAR 0 2
61197: PUSH
61198: LD_INT 4
61200: PLUS
61201: PUSH
61202: LD_INT 0
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: LIST
61209: PUSH
61210: LD_VAR 0 1
61214: PUSH
61215: LD_INT 3
61217: MINUS
61218: PUSH
61219: LD_VAR 0 2
61223: PUSH
61224: LD_INT 1
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: LIST
61231: PUSH
61232: LD_VAR 0 1
61236: PUSH
61237: LD_INT 4
61239: MINUS
61240: PUSH
61241: LD_VAR 0 2
61245: PUSH
61246: LD_INT 4
61248: MINUS
61249: PUSH
61250: LD_INT 2
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: LIST
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: ST_TO_ADDR
// end ; 3 :
61265: GO 61687
61267: LD_INT 3
61269: DOUBLE
61270: EQUAL
61271: IFTRUE 61275
61273: GO 61408
61275: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61276: LD_ADDR_VAR 0 5
61280: PUSH
61281: LD_VAR 0 1
61285: PUSH
61286: LD_INT 3
61288: PLUS
61289: PUSH
61290: LD_VAR 0 2
61294: PUSH
61295: LD_INT 4
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: LIST
61302: PUSH
61303: LD_VAR 0 1
61307: PUSH
61308: LD_INT 4
61310: PLUS
61311: PUSH
61312: LD_VAR 0 2
61316: PUSH
61317: LD_INT 4
61319: PLUS
61320: PUSH
61321: LD_INT 5
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: LIST
61328: PUSH
61329: LD_VAR 0 1
61333: PUSH
61334: LD_INT 4
61336: MINUS
61337: PUSH
61338: LD_VAR 0 2
61342: PUSH
61343: LD_INT 1
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: LIST
61350: PUSH
61351: LD_VAR 0 1
61355: PUSH
61356: LD_VAR 0 2
61360: PUSH
61361: LD_INT 4
61363: MINUS
61364: PUSH
61365: LD_INT 3
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: LIST
61372: PUSH
61373: LD_VAR 0 1
61377: PUSH
61378: LD_INT 3
61380: MINUS
61381: PUSH
61382: LD_VAR 0 2
61386: PUSH
61387: LD_INT 3
61389: MINUS
61390: PUSH
61391: LD_INT 2
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: LIST
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: ST_TO_ADDR
// end ; 4 :
61406: GO 61687
61408: LD_INT 4
61410: DOUBLE
61411: EQUAL
61412: IFTRUE 61416
61414: GO 61549
61416: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61417: LD_ADDR_VAR 0 5
61421: PUSH
61422: LD_VAR 0 1
61426: PUSH
61427: LD_VAR 0 2
61431: PUSH
61432: LD_INT 4
61434: PLUS
61435: PUSH
61436: LD_INT 0
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: LIST
61443: PUSH
61444: LD_VAR 0 1
61448: PUSH
61449: LD_INT 3
61451: PLUS
61452: PUSH
61453: LD_VAR 0 2
61457: PUSH
61458: LD_INT 3
61460: PLUS
61461: PUSH
61462: LD_INT 5
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: LIST
61469: PUSH
61470: LD_VAR 0 1
61474: PUSH
61475: LD_INT 4
61477: PLUS
61478: PUSH
61479: LD_VAR 0 2
61483: PUSH
61484: LD_INT 4
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: LIST
61491: PUSH
61492: LD_VAR 0 1
61496: PUSH
61497: LD_VAR 0 2
61501: PUSH
61502: LD_INT 3
61504: MINUS
61505: PUSH
61506: LD_INT 3
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: LIST
61513: PUSH
61514: LD_VAR 0 1
61518: PUSH
61519: LD_INT 4
61521: MINUS
61522: PUSH
61523: LD_VAR 0 2
61527: PUSH
61528: LD_INT 4
61530: MINUS
61531: PUSH
61532: LD_INT 2
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: LIST
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: ST_TO_ADDR
// end ; 5 :
61547: GO 61687
61549: LD_INT 5
61551: DOUBLE
61552: EQUAL
61553: IFTRUE 61557
61555: GO 61686
61557: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61558: LD_ADDR_VAR 0 5
61562: PUSH
61563: LD_VAR 0 1
61567: PUSH
61568: LD_INT 4
61570: MINUS
61571: PUSH
61572: LD_VAR 0 2
61576: PUSH
61577: LD_INT 1
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: LIST
61584: PUSH
61585: LD_VAR 0 1
61589: PUSH
61590: LD_VAR 0 2
61594: PUSH
61595: LD_INT 4
61597: MINUS
61598: PUSH
61599: LD_INT 3
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: LIST
61606: PUSH
61607: LD_VAR 0 1
61611: PUSH
61612: LD_INT 4
61614: PLUS
61615: PUSH
61616: LD_VAR 0 2
61620: PUSH
61621: LD_INT 4
61623: PLUS
61624: PUSH
61625: LD_INT 5
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: LIST
61632: PUSH
61633: LD_VAR 0 1
61637: PUSH
61638: LD_INT 3
61640: PLUS
61641: PUSH
61642: LD_VAR 0 2
61646: PUSH
61647: LD_INT 4
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: LIST
61654: PUSH
61655: LD_VAR 0 1
61659: PUSH
61660: LD_VAR 0 2
61664: PUSH
61665: LD_INT 3
61667: PLUS
61668: PUSH
61669: LD_INT 0
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: LIST
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: ST_TO_ADDR
// end ; end ;
61684: GO 61687
61686: POP
// result := list ;
61687: LD_ADDR_VAR 0 4
61691: PUSH
61692: LD_VAR 0 5
61696: ST_TO_ADDR
// end ;
61697: LD_VAR 0 4
61701: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61702: LD_INT 0
61704: PPUSH
61705: PPUSH
61706: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61707: LD_VAR 0 1
61711: NOT
61712: PUSH
61713: LD_VAR 0 2
61717: PUSH
61718: LD_INT 1
61720: PUSH
61721: LD_INT 2
61723: PUSH
61724: LD_INT 3
61726: PUSH
61727: LD_INT 4
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: IN
61736: NOT
61737: OR
61738: IFFALSE 61742
// exit ;
61740: GO 61834
// tmp := [ ] ;
61742: LD_ADDR_VAR 0 5
61746: PUSH
61747: EMPTY
61748: ST_TO_ADDR
// for i in units do
61749: LD_ADDR_VAR 0 4
61753: PUSH
61754: LD_VAR 0 1
61758: PUSH
61759: FOR_IN
61760: IFFALSE 61803
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61762: LD_ADDR_VAR 0 5
61766: PUSH
61767: LD_VAR 0 5
61771: PPUSH
61772: LD_VAR 0 5
61776: PUSH
61777: LD_INT 1
61779: PLUS
61780: PPUSH
61781: LD_VAR 0 4
61785: PPUSH
61786: LD_VAR 0 2
61790: PPUSH
61791: CALL_OW 259
61795: PPUSH
61796: CALL_OW 2
61800: ST_TO_ADDR
61801: GO 61759
61803: POP
61804: POP
// if not tmp then
61805: LD_VAR 0 5
61809: NOT
61810: IFFALSE 61814
// exit ;
61812: GO 61834
// result := SortListByListDesc ( units , tmp ) ;
61814: LD_ADDR_VAR 0 3
61818: PUSH
61819: LD_VAR 0 1
61823: PPUSH
61824: LD_VAR 0 5
61828: PPUSH
61829: CALL_OW 77
61833: ST_TO_ADDR
// end ;
61834: LD_VAR 0 3
61838: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61839: LD_INT 0
61841: PPUSH
61842: PPUSH
61843: PPUSH
// result := false ;
61844: LD_ADDR_VAR 0 3
61848: PUSH
61849: LD_INT 0
61851: ST_TO_ADDR
// x := GetX ( building ) ;
61852: LD_ADDR_VAR 0 4
61856: PUSH
61857: LD_VAR 0 2
61861: PPUSH
61862: CALL_OW 250
61866: ST_TO_ADDR
// y := GetY ( building ) ;
61867: LD_ADDR_VAR 0 5
61871: PUSH
61872: LD_VAR 0 2
61876: PPUSH
61877: CALL_OW 251
61881: ST_TO_ADDR
// if not building or not x or not y then
61882: LD_VAR 0 2
61886: NOT
61887: PUSH
61888: LD_VAR 0 4
61892: NOT
61893: OR
61894: PUSH
61895: LD_VAR 0 5
61899: NOT
61900: OR
61901: IFFALSE 61905
// exit ;
61903: GO 61997
// if GetTaskList ( unit ) then
61905: LD_VAR 0 1
61909: PPUSH
61910: CALL_OW 437
61914: IFFALSE 61997
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61916: LD_STRING e
61918: PUSH
61919: LD_VAR 0 1
61923: PPUSH
61924: CALL_OW 437
61928: PUSH
61929: LD_INT 1
61931: ARRAY
61932: PUSH
61933: LD_INT 1
61935: ARRAY
61936: EQUAL
61937: PUSH
61938: LD_VAR 0 4
61942: PUSH
61943: LD_VAR 0 1
61947: PPUSH
61948: CALL_OW 437
61952: PUSH
61953: LD_INT 1
61955: ARRAY
61956: PUSH
61957: LD_INT 2
61959: ARRAY
61960: EQUAL
61961: AND
61962: PUSH
61963: LD_VAR 0 5
61967: PUSH
61968: LD_VAR 0 1
61972: PPUSH
61973: CALL_OW 437
61977: PUSH
61978: LD_INT 1
61980: ARRAY
61981: PUSH
61982: LD_INT 3
61984: ARRAY
61985: EQUAL
61986: AND
61987: IFFALSE 61997
// result := true end ;
61989: LD_ADDR_VAR 0 3
61993: PUSH
61994: LD_INT 1
61996: ST_TO_ADDR
// end ;
61997: LD_VAR 0 3
62001: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62002: LD_INT 0
62004: PPUSH
// result := false ;
62005: LD_ADDR_VAR 0 4
62009: PUSH
62010: LD_INT 0
62012: ST_TO_ADDR
// if GetTaskList ( unit ) then
62013: LD_VAR 0 1
62017: PPUSH
62018: CALL_OW 437
62022: IFFALSE 62105
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62024: LD_STRING M
62026: PUSH
62027: LD_VAR 0 1
62031: PPUSH
62032: CALL_OW 437
62036: PUSH
62037: LD_INT 1
62039: ARRAY
62040: PUSH
62041: LD_INT 1
62043: ARRAY
62044: EQUAL
62045: PUSH
62046: LD_VAR 0 2
62050: PUSH
62051: LD_VAR 0 1
62055: PPUSH
62056: CALL_OW 437
62060: PUSH
62061: LD_INT 1
62063: ARRAY
62064: PUSH
62065: LD_INT 2
62067: ARRAY
62068: EQUAL
62069: AND
62070: PUSH
62071: LD_VAR 0 3
62075: PUSH
62076: LD_VAR 0 1
62080: PPUSH
62081: CALL_OW 437
62085: PUSH
62086: LD_INT 1
62088: ARRAY
62089: PUSH
62090: LD_INT 3
62092: ARRAY
62093: EQUAL
62094: AND
62095: IFFALSE 62105
// result := true ;
62097: LD_ADDR_VAR 0 4
62101: PUSH
62102: LD_INT 1
62104: ST_TO_ADDR
// end ; end ;
62105: LD_VAR 0 4
62109: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62110: LD_INT 0
62112: PPUSH
62113: PPUSH
62114: PPUSH
62115: PPUSH
// if not unit or not area then
62116: LD_VAR 0 1
62120: NOT
62121: PUSH
62122: LD_VAR 0 2
62126: NOT
62127: OR
62128: IFFALSE 62132
// exit ;
62130: GO 62296
// tmp := AreaToList ( area , i ) ;
62132: LD_ADDR_VAR 0 6
62136: PUSH
62137: LD_VAR 0 2
62141: PPUSH
62142: LD_VAR 0 5
62146: PPUSH
62147: CALL_OW 517
62151: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62152: LD_ADDR_VAR 0 5
62156: PUSH
62157: DOUBLE
62158: LD_INT 1
62160: DEC
62161: ST_TO_ADDR
62162: LD_VAR 0 6
62166: PUSH
62167: LD_INT 1
62169: ARRAY
62170: PUSH
62171: FOR_TO
62172: IFFALSE 62294
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62174: LD_ADDR_VAR 0 7
62178: PUSH
62179: LD_VAR 0 6
62183: PUSH
62184: LD_INT 1
62186: ARRAY
62187: PUSH
62188: LD_VAR 0 5
62192: ARRAY
62193: PUSH
62194: LD_VAR 0 6
62198: PUSH
62199: LD_INT 2
62201: ARRAY
62202: PUSH
62203: LD_VAR 0 5
62207: ARRAY
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62213: LD_VAR 0 7
62217: PUSH
62218: LD_INT 1
62220: ARRAY
62221: PPUSH
62222: LD_VAR 0 7
62226: PUSH
62227: LD_INT 2
62229: ARRAY
62230: PPUSH
62231: CALL_OW 428
62235: PUSH
62236: LD_INT 0
62238: EQUAL
62239: IFFALSE 62292
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62241: LD_VAR 0 1
62245: PPUSH
62246: LD_VAR 0 7
62250: PUSH
62251: LD_INT 1
62253: ARRAY
62254: PPUSH
62255: LD_VAR 0 7
62259: PUSH
62260: LD_INT 2
62262: ARRAY
62263: PPUSH
62264: LD_VAR 0 3
62268: PPUSH
62269: CALL_OW 48
// result := IsPlaced ( unit ) ;
62273: LD_ADDR_VAR 0 4
62277: PUSH
62278: LD_VAR 0 1
62282: PPUSH
62283: CALL_OW 305
62287: ST_TO_ADDR
// exit ;
62288: POP
62289: POP
62290: GO 62296
// end ; end ;
62292: GO 62171
62294: POP
62295: POP
// end ;
62296: LD_VAR 0 4
62300: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62301: LD_INT 0
62303: PPUSH
62304: PPUSH
62305: PPUSH
// if not side or side > 8 then
62306: LD_VAR 0 1
62310: NOT
62311: PUSH
62312: LD_VAR 0 1
62316: PUSH
62317: LD_INT 8
62319: GREATER
62320: OR
62321: IFFALSE 62325
// exit ;
62323: GO 62512
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62325: LD_ADDR_VAR 0 4
62329: PUSH
62330: LD_INT 22
62332: PUSH
62333: LD_VAR 0 1
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 21
62344: PUSH
62345: LD_INT 3
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PPUSH
62356: CALL_OW 69
62360: ST_TO_ADDR
// if not tmp then
62361: LD_VAR 0 4
62365: NOT
62366: IFFALSE 62370
// exit ;
62368: GO 62512
// enable_addtolog := true ;
62370: LD_ADDR_OWVAR 81
62374: PUSH
62375: LD_INT 1
62377: ST_TO_ADDR
// AddToLog ( [ ) ;
62378: LD_STRING [
62380: PPUSH
62381: CALL_OW 561
// for i in tmp do
62385: LD_ADDR_VAR 0 3
62389: PUSH
62390: LD_VAR 0 4
62394: PUSH
62395: FOR_IN
62396: IFFALSE 62503
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62398: LD_STRING [
62400: PUSH
62401: LD_VAR 0 3
62405: PPUSH
62406: CALL_OW 266
62410: STR
62411: PUSH
62412: LD_STRING , 
62414: STR
62415: PUSH
62416: LD_VAR 0 3
62420: PPUSH
62421: CALL_OW 250
62425: STR
62426: PUSH
62427: LD_STRING , 
62429: STR
62430: PUSH
62431: LD_VAR 0 3
62435: PPUSH
62436: CALL_OW 251
62440: STR
62441: PUSH
62442: LD_STRING , 
62444: STR
62445: PUSH
62446: LD_VAR 0 3
62450: PPUSH
62451: CALL_OW 254
62455: STR
62456: PUSH
62457: LD_STRING , 
62459: STR
62460: PUSH
62461: LD_VAR 0 3
62465: PPUSH
62466: LD_INT 1
62468: PPUSH
62469: CALL_OW 268
62473: STR
62474: PUSH
62475: LD_STRING , 
62477: STR
62478: PUSH
62479: LD_VAR 0 3
62483: PPUSH
62484: LD_INT 2
62486: PPUSH
62487: CALL_OW 268
62491: STR
62492: PUSH
62493: LD_STRING ],
62495: STR
62496: PPUSH
62497: CALL_OW 561
// end ;
62501: GO 62395
62503: POP
62504: POP
// AddToLog ( ]; ) ;
62505: LD_STRING ];
62507: PPUSH
62508: CALL_OW 561
// end ;
62512: LD_VAR 0 2
62516: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62517: LD_INT 0
62519: PPUSH
62520: PPUSH
62521: PPUSH
62522: PPUSH
62523: PPUSH
// if not area or not rate or not max then
62524: LD_VAR 0 1
62528: NOT
62529: PUSH
62530: LD_VAR 0 2
62534: NOT
62535: OR
62536: PUSH
62537: LD_VAR 0 4
62541: NOT
62542: OR
62543: IFFALSE 62547
// exit ;
62545: GO 62736
// while 1 do
62547: LD_INT 1
62549: IFFALSE 62736
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62551: LD_ADDR_VAR 0 9
62555: PUSH
62556: LD_VAR 0 1
62560: PPUSH
62561: LD_INT 1
62563: PPUSH
62564: CALL_OW 287
62568: PUSH
62569: LD_INT 10
62571: MUL
62572: ST_TO_ADDR
// r := rate / 10 ;
62573: LD_ADDR_VAR 0 7
62577: PUSH
62578: LD_VAR 0 2
62582: PUSH
62583: LD_INT 10
62585: DIVREAL
62586: ST_TO_ADDR
// time := 1 1$00 ;
62587: LD_ADDR_VAR 0 8
62591: PUSH
62592: LD_INT 2100
62594: ST_TO_ADDR
// if amount < min then
62595: LD_VAR 0 9
62599: PUSH
62600: LD_VAR 0 3
62604: LESS
62605: IFFALSE 62623
// r := r * 2 else
62607: LD_ADDR_VAR 0 7
62611: PUSH
62612: LD_VAR 0 7
62616: PUSH
62617: LD_INT 2
62619: MUL
62620: ST_TO_ADDR
62621: GO 62649
// if amount > max then
62623: LD_VAR 0 9
62627: PUSH
62628: LD_VAR 0 4
62632: GREATER
62633: IFFALSE 62649
// r := r / 2 ;
62635: LD_ADDR_VAR 0 7
62639: PUSH
62640: LD_VAR 0 7
62644: PUSH
62645: LD_INT 2
62647: DIVREAL
62648: ST_TO_ADDR
// time := time / r ;
62649: LD_ADDR_VAR 0 8
62653: PUSH
62654: LD_VAR 0 8
62658: PUSH
62659: LD_VAR 0 7
62663: DIVREAL
62664: ST_TO_ADDR
// if time < 0 then
62665: LD_VAR 0 8
62669: PUSH
62670: LD_INT 0
62672: LESS
62673: IFFALSE 62690
// time := time * - 1 ;
62675: LD_ADDR_VAR 0 8
62679: PUSH
62680: LD_VAR 0 8
62684: PUSH
62685: LD_INT 1
62687: NEG
62688: MUL
62689: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62690: LD_VAR 0 8
62694: PUSH
62695: LD_INT 35
62697: PPUSH
62698: LD_INT 875
62700: PPUSH
62701: CALL_OW 12
62705: PLUS
62706: PPUSH
62707: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62711: LD_INT 1
62713: PPUSH
62714: LD_INT 5
62716: PPUSH
62717: CALL_OW 12
62721: PPUSH
62722: LD_VAR 0 1
62726: PPUSH
62727: LD_INT 1
62729: PPUSH
62730: CALL_OW 55
// end ;
62734: GO 62547
// end ;
62736: LD_VAR 0 5
62740: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62741: LD_INT 0
62743: PPUSH
62744: PPUSH
62745: PPUSH
62746: PPUSH
62747: PPUSH
62748: PPUSH
62749: PPUSH
62750: PPUSH
// if not turrets or not factories then
62751: LD_VAR 0 1
62755: NOT
62756: PUSH
62757: LD_VAR 0 2
62761: NOT
62762: OR
62763: IFFALSE 62767
// exit ;
62765: GO 63074
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62767: LD_ADDR_VAR 0 10
62771: PUSH
62772: LD_INT 5
62774: PUSH
62775: LD_INT 6
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 2
62784: PUSH
62785: LD_INT 4
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 3
62794: PUSH
62795: LD_INT 5
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 24
62809: PUSH
62810: LD_INT 25
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 23
62819: PUSH
62820: LD_INT 27
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 42
62833: PUSH
62834: LD_INT 43
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 44
62843: PUSH
62844: LD_INT 46
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 45
62853: PUSH
62854: LD_INT 47
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: LIST
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: LIST
62870: ST_TO_ADDR
// result := [ ] ;
62871: LD_ADDR_VAR 0 3
62875: PUSH
62876: EMPTY
62877: ST_TO_ADDR
// for i in turrets do
62878: LD_ADDR_VAR 0 4
62882: PUSH
62883: LD_VAR 0 1
62887: PUSH
62888: FOR_IN
62889: IFFALSE 63072
// begin nat := GetNation ( i ) ;
62891: LD_ADDR_VAR 0 7
62895: PUSH
62896: LD_VAR 0 4
62900: PPUSH
62901: CALL_OW 248
62905: ST_TO_ADDR
// weapon := 0 ;
62906: LD_ADDR_VAR 0 8
62910: PUSH
62911: LD_INT 0
62913: ST_TO_ADDR
// if not nat then
62914: LD_VAR 0 7
62918: NOT
62919: IFFALSE 62923
// continue ;
62921: GO 62888
// for j in list [ nat ] do
62923: LD_ADDR_VAR 0 5
62927: PUSH
62928: LD_VAR 0 10
62932: PUSH
62933: LD_VAR 0 7
62937: ARRAY
62938: PUSH
62939: FOR_IN
62940: IFFALSE 62981
// if GetBWeapon ( i ) = j [ 1 ] then
62942: LD_VAR 0 4
62946: PPUSH
62947: CALL_OW 269
62951: PUSH
62952: LD_VAR 0 5
62956: PUSH
62957: LD_INT 1
62959: ARRAY
62960: EQUAL
62961: IFFALSE 62979
// begin weapon := j [ 2 ] ;
62963: LD_ADDR_VAR 0 8
62967: PUSH
62968: LD_VAR 0 5
62972: PUSH
62973: LD_INT 2
62975: ARRAY
62976: ST_TO_ADDR
// break ;
62977: GO 62981
// end ;
62979: GO 62939
62981: POP
62982: POP
// if not weapon then
62983: LD_VAR 0 8
62987: NOT
62988: IFFALSE 62992
// continue ;
62990: GO 62888
// for k in factories do
62992: LD_ADDR_VAR 0 6
62996: PUSH
62997: LD_VAR 0 2
63001: PUSH
63002: FOR_IN
63003: IFFALSE 63068
// begin weapons := AvailableWeaponList ( k ) ;
63005: LD_ADDR_VAR 0 9
63009: PUSH
63010: LD_VAR 0 6
63014: PPUSH
63015: CALL_OW 478
63019: ST_TO_ADDR
// if not weapons then
63020: LD_VAR 0 9
63024: NOT
63025: IFFALSE 63029
// continue ;
63027: GO 63002
// if weapon in weapons then
63029: LD_VAR 0 8
63033: PUSH
63034: LD_VAR 0 9
63038: IN
63039: IFFALSE 63066
// begin result := [ i , weapon ] ;
63041: LD_ADDR_VAR 0 3
63045: PUSH
63046: LD_VAR 0 4
63050: PUSH
63051: LD_VAR 0 8
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: ST_TO_ADDR
// exit ;
63060: POP
63061: POP
63062: POP
63063: POP
63064: GO 63074
// end ; end ;
63066: GO 63002
63068: POP
63069: POP
// end ;
63070: GO 62888
63072: POP
63073: POP
// end ;
63074: LD_VAR 0 3
63078: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63079: LD_INT 0
63081: PPUSH
// if not side or side > 8 then
63082: LD_VAR 0 3
63086: NOT
63087: PUSH
63088: LD_VAR 0 3
63092: PUSH
63093: LD_INT 8
63095: GREATER
63096: OR
63097: IFFALSE 63101
// exit ;
63099: GO 63160
// if not range then
63101: LD_VAR 0 4
63105: NOT
63106: IFFALSE 63117
// range := - 12 ;
63108: LD_ADDR_VAR 0 4
63112: PUSH
63113: LD_INT 12
63115: NEG
63116: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63117: LD_VAR 0 1
63121: PPUSH
63122: LD_VAR 0 2
63126: PPUSH
63127: LD_VAR 0 3
63131: PPUSH
63132: LD_VAR 0 4
63136: PPUSH
63137: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63141: LD_VAR 0 1
63145: PPUSH
63146: LD_VAR 0 2
63150: PPUSH
63151: LD_VAR 0 3
63155: PPUSH
63156: CALL_OW 331
// end ;
63160: LD_VAR 0 5
63164: RET
// export function Video ( mode ) ; begin
63165: LD_INT 0
63167: PPUSH
// ingame_video = mode ;
63168: LD_ADDR_OWVAR 52
63172: PUSH
63173: LD_VAR 0 1
63177: ST_TO_ADDR
// interface_hidden = mode ;
63178: LD_ADDR_OWVAR 54
63182: PUSH
63183: LD_VAR 0 1
63187: ST_TO_ADDR
// end ;
63188: LD_VAR 0 2
63192: RET
// export function Join ( array , element ) ; begin
63193: LD_INT 0
63195: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63196: LD_ADDR_VAR 0 3
63200: PUSH
63201: LD_VAR 0 1
63205: PPUSH
63206: LD_VAR 0 1
63210: PUSH
63211: LD_INT 1
63213: PLUS
63214: PPUSH
63215: LD_VAR 0 2
63219: PPUSH
63220: CALL_OW 1
63224: ST_TO_ADDR
// end ;
63225: LD_VAR 0 3
63229: RET
// export function JoinUnion ( array , element ) ; begin
63230: LD_INT 0
63232: PPUSH
// result := array union element ;
63233: LD_ADDR_VAR 0 3
63237: PUSH
63238: LD_VAR 0 1
63242: PUSH
63243: LD_VAR 0 2
63247: UNION
63248: ST_TO_ADDR
// end ;
63249: LD_VAR 0 3
63253: RET
// export function GetBehemoths ( side ) ; begin
63254: LD_INT 0
63256: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
63257: LD_ADDR_VAR 0 2
63261: PUSH
63262: LD_INT 22
63264: PUSH
63265: LD_VAR 0 1
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 31
63276: PUSH
63277: LD_INT 25
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PPUSH
63288: CALL_OW 69
63292: ST_TO_ADDR
// end ;
63293: LD_VAR 0 2
63297: RET
// export function Shuffle ( array ) ; var i , index ; begin
63298: LD_INT 0
63300: PPUSH
63301: PPUSH
63302: PPUSH
// result := [ ] ;
63303: LD_ADDR_VAR 0 2
63307: PUSH
63308: EMPTY
63309: ST_TO_ADDR
// if not array then
63310: LD_VAR 0 1
63314: NOT
63315: IFFALSE 63319
// exit ;
63317: GO 63418
// Randomize ;
63319: CALL_OW 10
// for i = array downto 1 do
63323: LD_ADDR_VAR 0 3
63327: PUSH
63328: DOUBLE
63329: LD_VAR 0 1
63333: INC
63334: ST_TO_ADDR
63335: LD_INT 1
63337: PUSH
63338: FOR_DOWNTO
63339: IFFALSE 63416
// begin index := rand ( 1 , array ) ;
63341: LD_ADDR_VAR 0 4
63345: PUSH
63346: LD_INT 1
63348: PPUSH
63349: LD_VAR 0 1
63353: PPUSH
63354: CALL_OW 12
63358: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63359: LD_ADDR_VAR 0 2
63363: PUSH
63364: LD_VAR 0 2
63368: PPUSH
63369: LD_VAR 0 2
63373: PUSH
63374: LD_INT 1
63376: PLUS
63377: PPUSH
63378: LD_VAR 0 1
63382: PUSH
63383: LD_VAR 0 4
63387: ARRAY
63388: PPUSH
63389: CALL_OW 2
63393: ST_TO_ADDR
// array := Delete ( array , index ) ;
63394: LD_ADDR_VAR 0 1
63398: PUSH
63399: LD_VAR 0 1
63403: PPUSH
63404: LD_VAR 0 4
63408: PPUSH
63409: CALL_OW 3
63413: ST_TO_ADDR
// end ;
63414: GO 63338
63416: POP
63417: POP
// end ;
63418: LD_VAR 0 2
63422: RET
// export function GetBaseMaterials ( base ) ; begin
63423: LD_INT 0
63425: PPUSH
// result := [ 0 , 0 , 0 ] ;
63426: LD_ADDR_VAR 0 2
63430: PUSH
63431: LD_INT 0
63433: PUSH
63434: LD_INT 0
63436: PUSH
63437: LD_INT 0
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: LIST
63444: ST_TO_ADDR
// if not base then
63445: LD_VAR 0 1
63449: NOT
63450: IFFALSE 63454
// exit ;
63452: GO 63503
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63454: LD_ADDR_VAR 0 2
63458: PUSH
63459: LD_VAR 0 1
63463: PPUSH
63464: LD_INT 1
63466: PPUSH
63467: CALL_OW 275
63471: PUSH
63472: LD_VAR 0 1
63476: PPUSH
63477: LD_INT 2
63479: PPUSH
63480: CALL_OW 275
63484: PUSH
63485: LD_VAR 0 1
63489: PPUSH
63490: LD_INT 3
63492: PPUSH
63493: CALL_OW 275
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: LIST
63502: ST_TO_ADDR
// end ;
63503: LD_VAR 0 2
63507: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63508: LD_INT 0
63510: PPUSH
63511: PPUSH
// result := array ;
63512: LD_ADDR_VAR 0 3
63516: PUSH
63517: LD_VAR 0 1
63521: ST_TO_ADDR
// if size >= result then
63522: LD_VAR 0 2
63526: PUSH
63527: LD_VAR 0 3
63531: GREATEREQUAL
63532: IFFALSE 63536
// exit ;
63534: GO 63586
// if size then
63536: LD_VAR 0 2
63540: IFFALSE 63586
// for i := array downto size do
63542: LD_ADDR_VAR 0 4
63546: PUSH
63547: DOUBLE
63548: LD_VAR 0 1
63552: INC
63553: ST_TO_ADDR
63554: LD_VAR 0 2
63558: PUSH
63559: FOR_DOWNTO
63560: IFFALSE 63584
// result := Delete ( result , result ) ;
63562: LD_ADDR_VAR 0 3
63566: PUSH
63567: LD_VAR 0 3
63571: PPUSH
63572: LD_VAR 0 3
63576: PPUSH
63577: CALL_OW 3
63581: ST_TO_ADDR
63582: GO 63559
63584: POP
63585: POP
// end ;
63586: LD_VAR 0 3
63590: RET
// export function ComExit ( unit ) ; var tmp ; begin
63591: LD_INT 0
63593: PPUSH
63594: PPUSH
// if not IsInUnit ( unit ) then
63595: LD_VAR 0 1
63599: PPUSH
63600: CALL_OW 310
63604: NOT
63605: IFFALSE 63609
// exit ;
63607: GO 63669
// tmp := IsInUnit ( unit ) ;
63609: LD_ADDR_VAR 0 3
63613: PUSH
63614: LD_VAR 0 1
63618: PPUSH
63619: CALL_OW 310
63623: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63624: LD_VAR 0 3
63628: PPUSH
63629: CALL_OW 247
63633: PUSH
63634: LD_INT 2
63636: EQUAL
63637: IFFALSE 63650
// ComExitVehicle ( unit ) else
63639: LD_VAR 0 1
63643: PPUSH
63644: CALL_OW 121
63648: GO 63659
// ComExitBuilding ( unit ) ;
63650: LD_VAR 0 1
63654: PPUSH
63655: CALL_OW 122
// result := tmp ;
63659: LD_ADDR_VAR 0 2
63663: PUSH
63664: LD_VAR 0 3
63668: ST_TO_ADDR
// end ;
63669: LD_VAR 0 2
63673: RET
// export function ComExitAll ( units ) ; var i ; begin
63674: LD_INT 0
63676: PPUSH
63677: PPUSH
// if not units then
63678: LD_VAR 0 1
63682: NOT
63683: IFFALSE 63687
// exit ;
63685: GO 63713
// for i in units do
63687: LD_ADDR_VAR 0 3
63691: PUSH
63692: LD_VAR 0 1
63696: PUSH
63697: FOR_IN
63698: IFFALSE 63711
// ComExit ( i ) ;
63700: LD_VAR 0 3
63704: PPUSH
63705: CALL 63591 0 1
63709: GO 63697
63711: POP
63712: POP
// end ;
63713: LD_VAR 0 2
63717: RET
// export function ResetHc ; begin
63718: LD_INT 0
63720: PPUSH
// InitHc ;
63721: CALL_OW 19
// hc_importance := 0 ;
63725: LD_ADDR_OWVAR 32
63729: PUSH
63730: LD_INT 0
63732: ST_TO_ADDR
// end ;
63733: LD_VAR 0 1
63737: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63738: LD_INT 0
63740: PPUSH
63741: PPUSH
63742: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63743: LD_ADDR_VAR 0 6
63747: PUSH
63748: LD_VAR 0 1
63752: PUSH
63753: LD_VAR 0 3
63757: PLUS
63758: PUSH
63759: LD_INT 2
63761: DIV
63762: ST_TO_ADDR
// if _x < 0 then
63763: LD_VAR 0 6
63767: PUSH
63768: LD_INT 0
63770: LESS
63771: IFFALSE 63788
// _x := _x * - 1 ;
63773: LD_ADDR_VAR 0 6
63777: PUSH
63778: LD_VAR 0 6
63782: PUSH
63783: LD_INT 1
63785: NEG
63786: MUL
63787: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63788: LD_ADDR_VAR 0 7
63792: PUSH
63793: LD_VAR 0 2
63797: PUSH
63798: LD_VAR 0 4
63802: PLUS
63803: PUSH
63804: LD_INT 2
63806: DIV
63807: ST_TO_ADDR
// if _y < 0 then
63808: LD_VAR 0 7
63812: PUSH
63813: LD_INT 0
63815: LESS
63816: IFFALSE 63833
// _y := _y * - 1 ;
63818: LD_ADDR_VAR 0 7
63822: PUSH
63823: LD_VAR 0 7
63827: PUSH
63828: LD_INT 1
63830: NEG
63831: MUL
63832: ST_TO_ADDR
// result := [ _x , _y ] ;
63833: LD_ADDR_VAR 0 5
63837: PUSH
63838: LD_VAR 0 6
63842: PUSH
63843: LD_VAR 0 7
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: ST_TO_ADDR
// end ;
63852: LD_VAR 0 5
63856: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63857: LD_INT 0
63859: PPUSH
63860: PPUSH
63861: PPUSH
63862: PPUSH
// task := GetTaskList ( unit ) ;
63863: LD_ADDR_VAR 0 7
63867: PUSH
63868: LD_VAR 0 1
63872: PPUSH
63873: CALL_OW 437
63877: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63878: LD_VAR 0 7
63882: NOT
63883: PUSH
63884: LD_VAR 0 1
63888: PPUSH
63889: LD_VAR 0 2
63893: PPUSH
63894: CALL_OW 308
63898: NOT
63899: AND
63900: IFFALSE 63904
// exit ;
63902: GO 64022
// if IsInArea ( unit , area ) then
63904: LD_VAR 0 1
63908: PPUSH
63909: LD_VAR 0 2
63913: PPUSH
63914: CALL_OW 308
63918: IFFALSE 63936
// begin ComMoveToArea ( unit , goAway ) ;
63920: LD_VAR 0 1
63924: PPUSH
63925: LD_VAR 0 3
63929: PPUSH
63930: CALL_OW 113
// exit ;
63934: GO 64022
// end ; if task [ 1 ] [ 1 ] <> M then
63936: LD_VAR 0 7
63940: PUSH
63941: LD_INT 1
63943: ARRAY
63944: PUSH
63945: LD_INT 1
63947: ARRAY
63948: PUSH
63949: LD_STRING M
63951: NONEQUAL
63952: IFFALSE 63956
// exit ;
63954: GO 64022
// x := task [ 1 ] [ 2 ] ;
63956: LD_ADDR_VAR 0 5
63960: PUSH
63961: LD_VAR 0 7
63965: PUSH
63966: LD_INT 1
63968: ARRAY
63969: PUSH
63970: LD_INT 2
63972: ARRAY
63973: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63974: LD_ADDR_VAR 0 6
63978: PUSH
63979: LD_VAR 0 7
63983: PUSH
63984: LD_INT 1
63986: ARRAY
63987: PUSH
63988: LD_INT 3
63990: ARRAY
63991: ST_TO_ADDR
// if InArea ( x , y , area ) then
63992: LD_VAR 0 5
63996: PPUSH
63997: LD_VAR 0 6
64001: PPUSH
64002: LD_VAR 0 2
64006: PPUSH
64007: CALL_OW 309
64011: IFFALSE 64022
// ComStop ( unit ) ;
64013: LD_VAR 0 1
64017: PPUSH
64018: CALL_OW 141
// end ;
64022: LD_VAR 0 4
64026: RET
// export function Abs ( value ) ; begin
64027: LD_INT 0
64029: PPUSH
// result := value ;
64030: LD_ADDR_VAR 0 2
64034: PUSH
64035: LD_VAR 0 1
64039: ST_TO_ADDR
// if value < 0 then
64040: LD_VAR 0 1
64044: PUSH
64045: LD_INT 0
64047: LESS
64048: IFFALSE 64065
// result := value * - 1 ;
64050: LD_ADDR_VAR 0 2
64054: PUSH
64055: LD_VAR 0 1
64059: PUSH
64060: LD_INT 1
64062: NEG
64063: MUL
64064: ST_TO_ADDR
// end ;
64065: LD_VAR 0 2
64069: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64070: LD_INT 0
64072: PPUSH
64073: PPUSH
64074: PPUSH
64075: PPUSH
64076: PPUSH
64077: PPUSH
64078: PPUSH
64079: PPUSH
// if not unit or not building then
64080: LD_VAR 0 1
64084: NOT
64085: PUSH
64086: LD_VAR 0 2
64090: NOT
64091: OR
64092: IFFALSE 64096
// exit ;
64094: GO 64322
// x := GetX ( building ) ;
64096: LD_ADDR_VAR 0 4
64100: PUSH
64101: LD_VAR 0 2
64105: PPUSH
64106: CALL_OW 250
64110: ST_TO_ADDR
// y := GetY ( building ) ;
64111: LD_ADDR_VAR 0 6
64115: PUSH
64116: LD_VAR 0 2
64120: PPUSH
64121: CALL_OW 251
64125: ST_TO_ADDR
// d := GetDir ( building ) ;
64126: LD_ADDR_VAR 0 8
64130: PUSH
64131: LD_VAR 0 2
64135: PPUSH
64136: CALL_OW 254
64140: ST_TO_ADDR
// r := 4 ;
64141: LD_ADDR_VAR 0 9
64145: PUSH
64146: LD_INT 4
64148: ST_TO_ADDR
// for i := 1 to 5 do
64149: LD_ADDR_VAR 0 10
64153: PUSH
64154: DOUBLE
64155: LD_INT 1
64157: DEC
64158: ST_TO_ADDR
64159: LD_INT 5
64161: PUSH
64162: FOR_TO
64163: IFFALSE 64320
// begin _x := ShiftX ( x , d , r + i ) ;
64165: LD_ADDR_VAR 0 5
64169: PUSH
64170: LD_VAR 0 4
64174: PPUSH
64175: LD_VAR 0 8
64179: PPUSH
64180: LD_VAR 0 9
64184: PUSH
64185: LD_VAR 0 10
64189: PLUS
64190: PPUSH
64191: CALL_OW 272
64195: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64196: LD_ADDR_VAR 0 7
64200: PUSH
64201: LD_VAR 0 6
64205: PPUSH
64206: LD_VAR 0 8
64210: PPUSH
64211: LD_VAR 0 9
64215: PUSH
64216: LD_VAR 0 10
64220: PLUS
64221: PPUSH
64222: CALL_OW 273
64226: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64227: LD_VAR 0 5
64231: PPUSH
64232: LD_VAR 0 7
64236: PPUSH
64237: CALL_OW 488
64241: PUSH
64242: LD_VAR 0 5
64246: PPUSH
64247: LD_VAR 0 7
64251: PPUSH
64252: CALL_OW 428
64256: PPUSH
64257: CALL_OW 247
64261: PUSH
64262: LD_INT 3
64264: PUSH
64265: LD_INT 2
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: IN
64272: NOT
64273: AND
64274: IFFALSE 64318
// begin ComMoveXY ( unit , _x , _y ) ;
64276: LD_VAR 0 1
64280: PPUSH
64281: LD_VAR 0 5
64285: PPUSH
64286: LD_VAR 0 7
64290: PPUSH
64291: CALL_OW 111
// result := [ _x , _y ] ;
64295: LD_ADDR_VAR 0 3
64299: PUSH
64300: LD_VAR 0 5
64304: PUSH
64305: LD_VAR 0 7
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: ST_TO_ADDR
// exit ;
64314: POP
64315: POP
64316: GO 64322
// end ; end ;
64318: GO 64162
64320: POP
64321: POP
// end ;
64322: LD_VAR 0 3
64326: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64327: LD_INT 0
64329: PPUSH
64330: PPUSH
64331: PPUSH
// result := 0 ;
64332: LD_ADDR_VAR 0 3
64336: PUSH
64337: LD_INT 0
64339: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64340: LD_VAR 0 1
64344: PUSH
64345: LD_INT 0
64347: LESS
64348: PUSH
64349: LD_VAR 0 1
64353: PUSH
64354: LD_INT 8
64356: GREATER
64357: OR
64358: PUSH
64359: LD_VAR 0 2
64363: PUSH
64364: LD_INT 0
64366: LESS
64367: OR
64368: PUSH
64369: LD_VAR 0 2
64373: PUSH
64374: LD_INT 8
64376: GREATER
64377: OR
64378: IFFALSE 64382
// exit ;
64380: GO 64457
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64382: LD_ADDR_VAR 0 4
64386: PUSH
64387: LD_INT 22
64389: PUSH
64390: LD_VAR 0 2
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PPUSH
64399: CALL_OW 69
64403: PUSH
64404: FOR_IN
64405: IFFALSE 64455
// begin un := UnitShoot ( i ) ;
64407: LD_ADDR_VAR 0 5
64411: PUSH
64412: LD_VAR 0 4
64416: PPUSH
64417: CALL_OW 504
64421: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64422: LD_VAR 0 5
64426: PPUSH
64427: CALL_OW 255
64431: PUSH
64432: LD_VAR 0 1
64436: EQUAL
64437: IFFALSE 64453
// begin result := un ;
64439: LD_ADDR_VAR 0 3
64443: PUSH
64444: LD_VAR 0 5
64448: ST_TO_ADDR
// exit ;
64449: POP
64450: POP
64451: GO 64457
// end ; end ;
64453: GO 64404
64455: POP
64456: POP
// end ;
64457: LD_VAR 0 3
64461: RET
// export function GetCargoBay ( units ) ; begin
64462: LD_INT 0
64464: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64465: LD_ADDR_VAR 0 2
64469: PUSH
64470: LD_VAR 0 1
64474: PPUSH
64475: LD_INT 2
64477: PUSH
64478: LD_INT 34
64480: PUSH
64481: LD_INT 12
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 34
64490: PUSH
64491: LD_INT 51
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 34
64500: PUSH
64501: LD_INT 32
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 34
64510: PUSH
64511: LD_INT 89
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: PPUSH
64525: CALL_OW 72
64529: ST_TO_ADDR
// end ;
64530: LD_VAR 0 2
64534: RET
// export function Negate ( value ) ; begin
64535: LD_INT 0
64537: PPUSH
// result := not value ;
64538: LD_ADDR_VAR 0 2
64542: PUSH
64543: LD_VAR 0 1
64547: NOT
64548: ST_TO_ADDR
// end ;
64549: LD_VAR 0 2
64553: RET
// export function Inc ( value ) ; begin
64554: LD_INT 0
64556: PPUSH
// result := value + 1 ;
64557: LD_ADDR_VAR 0 2
64561: PUSH
64562: LD_VAR 0 1
64566: PUSH
64567: LD_INT 1
64569: PLUS
64570: ST_TO_ADDR
// end ;
64571: LD_VAR 0 2
64575: RET
// export function Dec ( value ) ; begin
64576: LD_INT 0
64578: PPUSH
// result := value - 1 ;
64579: LD_ADDR_VAR 0 2
64583: PUSH
64584: LD_VAR 0 1
64588: PUSH
64589: LD_INT 1
64591: MINUS
64592: ST_TO_ADDR
// end ;
64593: LD_VAR 0 2
64597: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64598: LD_INT 0
64600: PPUSH
64601: PPUSH
64602: PPUSH
64603: PPUSH
64604: PPUSH
64605: PPUSH
64606: PPUSH
64607: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64608: LD_VAR 0 1
64612: PPUSH
64613: LD_VAR 0 2
64617: PPUSH
64618: CALL_OW 488
64622: NOT
64623: PUSH
64624: LD_VAR 0 3
64628: PPUSH
64629: LD_VAR 0 4
64633: PPUSH
64634: CALL_OW 488
64638: NOT
64639: OR
64640: IFFALSE 64653
// begin result := - 1 ;
64642: LD_ADDR_VAR 0 5
64646: PUSH
64647: LD_INT 1
64649: NEG
64650: ST_TO_ADDR
// exit ;
64651: GO 64888
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64653: LD_ADDR_VAR 0 12
64657: PUSH
64658: LD_VAR 0 1
64662: PPUSH
64663: LD_VAR 0 2
64667: PPUSH
64668: LD_VAR 0 3
64672: PPUSH
64673: LD_VAR 0 4
64677: PPUSH
64678: CALL 63738 0 4
64682: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64683: LD_ADDR_VAR 0 11
64687: PUSH
64688: LD_VAR 0 1
64692: PPUSH
64693: LD_VAR 0 2
64697: PPUSH
64698: LD_VAR 0 12
64702: PUSH
64703: LD_INT 1
64705: ARRAY
64706: PPUSH
64707: LD_VAR 0 12
64711: PUSH
64712: LD_INT 2
64714: ARRAY
64715: PPUSH
64716: CALL_OW 298
64720: ST_TO_ADDR
// distance := 9999 ;
64721: LD_ADDR_VAR 0 10
64725: PUSH
64726: LD_INT 9999
64728: ST_TO_ADDR
// for i := 0 to 5 do
64729: LD_ADDR_VAR 0 6
64733: PUSH
64734: DOUBLE
64735: LD_INT 0
64737: DEC
64738: ST_TO_ADDR
64739: LD_INT 5
64741: PUSH
64742: FOR_TO
64743: IFFALSE 64886
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64745: LD_ADDR_VAR 0 7
64749: PUSH
64750: LD_VAR 0 1
64754: PPUSH
64755: LD_VAR 0 6
64759: PPUSH
64760: LD_VAR 0 11
64764: PPUSH
64765: CALL_OW 272
64769: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64770: LD_ADDR_VAR 0 8
64774: PUSH
64775: LD_VAR 0 2
64779: PPUSH
64780: LD_VAR 0 6
64784: PPUSH
64785: LD_VAR 0 11
64789: PPUSH
64790: CALL_OW 273
64794: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64795: LD_VAR 0 7
64799: PPUSH
64800: LD_VAR 0 8
64804: PPUSH
64805: CALL_OW 488
64809: NOT
64810: IFFALSE 64814
// continue ;
64812: GO 64742
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64814: LD_ADDR_VAR 0 9
64818: PUSH
64819: LD_VAR 0 12
64823: PUSH
64824: LD_INT 1
64826: ARRAY
64827: PPUSH
64828: LD_VAR 0 12
64832: PUSH
64833: LD_INT 2
64835: ARRAY
64836: PPUSH
64837: LD_VAR 0 7
64841: PPUSH
64842: LD_VAR 0 8
64846: PPUSH
64847: CALL_OW 298
64851: ST_TO_ADDR
// if tmp < distance then
64852: LD_VAR 0 9
64856: PUSH
64857: LD_VAR 0 10
64861: LESS
64862: IFFALSE 64884
// begin result := i ;
64864: LD_ADDR_VAR 0 5
64868: PUSH
64869: LD_VAR 0 6
64873: ST_TO_ADDR
// distance := tmp ;
64874: LD_ADDR_VAR 0 10
64878: PUSH
64879: LD_VAR 0 9
64883: ST_TO_ADDR
// end ; end ;
64884: GO 64742
64886: POP
64887: POP
// end ;
64888: LD_VAR 0 5
64892: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64893: LD_INT 0
64895: PPUSH
64896: PPUSH
// if not driver or not IsInUnit ( driver ) then
64897: LD_VAR 0 1
64901: NOT
64902: PUSH
64903: LD_VAR 0 1
64907: PPUSH
64908: CALL_OW 310
64912: NOT
64913: OR
64914: IFFALSE 64918
// exit ;
64916: GO 65008
// vehicle := IsInUnit ( driver ) ;
64918: LD_ADDR_VAR 0 3
64922: PUSH
64923: LD_VAR 0 1
64927: PPUSH
64928: CALL_OW 310
64932: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64933: LD_VAR 0 1
64937: PPUSH
64938: LD_STRING \
64940: PUSH
64941: LD_INT 0
64943: PUSH
64944: LD_INT 0
64946: PUSH
64947: LD_INT 0
64949: PUSH
64950: LD_INT 0
64952: PUSH
64953: LD_INT 0
64955: PUSH
64956: LD_INT 0
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: PUSH
64968: LD_STRING E
64970: PUSH
64971: LD_INT 0
64973: PUSH
64974: LD_INT 0
64976: PUSH
64977: LD_VAR 0 3
64981: PUSH
64982: LD_INT 0
64984: PUSH
64985: LD_INT 0
64987: PUSH
64988: LD_INT 0
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PPUSH
65004: CALL_OW 446
// end ;
65008: LD_VAR 0 2
65012: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65013: LD_INT 0
65015: PPUSH
65016: PPUSH
// if not driver or not IsInUnit ( driver ) then
65017: LD_VAR 0 1
65021: NOT
65022: PUSH
65023: LD_VAR 0 1
65027: PPUSH
65028: CALL_OW 310
65032: NOT
65033: OR
65034: IFFALSE 65038
// exit ;
65036: GO 65128
// vehicle := IsInUnit ( driver ) ;
65038: LD_ADDR_VAR 0 3
65042: PUSH
65043: LD_VAR 0 1
65047: PPUSH
65048: CALL_OW 310
65052: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65053: LD_VAR 0 1
65057: PPUSH
65058: LD_STRING \
65060: PUSH
65061: LD_INT 0
65063: PUSH
65064: LD_INT 0
65066: PUSH
65067: LD_INT 0
65069: PUSH
65070: LD_INT 0
65072: PUSH
65073: LD_INT 0
65075: PUSH
65076: LD_INT 0
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: PUSH
65088: LD_STRING E
65090: PUSH
65091: LD_INT 0
65093: PUSH
65094: LD_INT 0
65096: PUSH
65097: LD_VAR 0 3
65101: PUSH
65102: LD_INT 0
65104: PUSH
65105: LD_INT 0
65107: PUSH
65108: LD_INT 0
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: LIST
65115: LIST
65116: LIST
65117: LIST
65118: LIST
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: PPUSH
65124: CALL_OW 447
// end ;
65128: LD_VAR 0 2
65132: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65133: LD_INT 0
65135: PPUSH
65136: PPUSH
65137: PPUSH
// tmp := [ ] ;
65138: LD_ADDR_VAR 0 5
65142: PUSH
65143: EMPTY
65144: ST_TO_ADDR
// for i in units do
65145: LD_ADDR_VAR 0 4
65149: PUSH
65150: LD_VAR 0 1
65154: PUSH
65155: FOR_IN
65156: IFFALSE 65194
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65158: LD_ADDR_VAR 0 5
65162: PUSH
65163: LD_VAR 0 5
65167: PPUSH
65168: LD_VAR 0 5
65172: PUSH
65173: LD_INT 1
65175: PLUS
65176: PPUSH
65177: LD_VAR 0 4
65181: PPUSH
65182: CALL_OW 256
65186: PPUSH
65187: CALL_OW 2
65191: ST_TO_ADDR
65192: GO 65155
65194: POP
65195: POP
// if not tmp then
65196: LD_VAR 0 5
65200: NOT
65201: IFFALSE 65205
// exit ;
65203: GO 65253
// if asc then
65205: LD_VAR 0 2
65209: IFFALSE 65233
// result := SortListByListAsc ( units , tmp ) else
65211: LD_ADDR_VAR 0 3
65215: PUSH
65216: LD_VAR 0 1
65220: PPUSH
65221: LD_VAR 0 5
65225: PPUSH
65226: CALL_OW 76
65230: ST_TO_ADDR
65231: GO 65253
// result := SortListByListDesc ( units , tmp ) ;
65233: LD_ADDR_VAR 0 3
65237: PUSH
65238: LD_VAR 0 1
65242: PPUSH
65243: LD_VAR 0 5
65247: PPUSH
65248: CALL_OW 77
65252: ST_TO_ADDR
// end ;
65253: LD_VAR 0 3
65257: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65258: LD_INT 0
65260: PPUSH
65261: PPUSH
// task := GetTaskList ( mech ) ;
65262: LD_ADDR_VAR 0 4
65266: PUSH
65267: LD_VAR 0 1
65271: PPUSH
65272: CALL_OW 437
65276: ST_TO_ADDR
// if not task then
65277: LD_VAR 0 4
65281: NOT
65282: IFFALSE 65286
// exit ;
65284: GO 65328
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65286: LD_ADDR_VAR 0 3
65290: PUSH
65291: LD_VAR 0 4
65295: PUSH
65296: LD_INT 1
65298: ARRAY
65299: PUSH
65300: LD_INT 1
65302: ARRAY
65303: PUSH
65304: LD_STRING r
65306: EQUAL
65307: PUSH
65308: LD_VAR 0 4
65312: PUSH
65313: LD_INT 1
65315: ARRAY
65316: PUSH
65317: LD_INT 4
65319: ARRAY
65320: PUSH
65321: LD_VAR 0 2
65325: EQUAL
65326: AND
65327: ST_TO_ADDR
// end ;
65328: LD_VAR 0 3
65332: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65333: LD_INT 0
65335: PPUSH
// SetDir ( unit , d ) ;
65336: LD_VAR 0 1
65340: PPUSH
65341: LD_VAR 0 4
65345: PPUSH
65346: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65350: LD_VAR 0 1
65354: PPUSH
65355: LD_VAR 0 2
65359: PPUSH
65360: LD_VAR 0 3
65364: PPUSH
65365: LD_VAR 0 5
65369: PPUSH
65370: CALL_OW 48
// end ;
65374: LD_VAR 0 6
65378: RET
// export function ToNaturalNumber ( number ) ; begin
65379: LD_INT 0
65381: PPUSH
// result := number div 1 ;
65382: LD_ADDR_VAR 0 2
65386: PUSH
65387: LD_VAR 0 1
65391: PUSH
65392: LD_INT 1
65394: DIV
65395: ST_TO_ADDR
// if number < 0 then
65396: LD_VAR 0 1
65400: PUSH
65401: LD_INT 0
65403: LESS
65404: IFFALSE 65414
// result := 0 ;
65406: LD_ADDR_VAR 0 2
65410: PUSH
65411: LD_INT 0
65413: ST_TO_ADDR
// end ;
65414: LD_VAR 0 2
65418: RET
// export function SortByClass ( units , class ) ; var un ; begin
65419: LD_INT 0
65421: PPUSH
65422: PPUSH
// if not units or not class then
65423: LD_VAR 0 1
65427: NOT
65428: PUSH
65429: LD_VAR 0 2
65433: NOT
65434: OR
65435: IFFALSE 65439
// exit ;
65437: GO 65534
// result := [ ] ;
65439: LD_ADDR_VAR 0 3
65443: PUSH
65444: EMPTY
65445: ST_TO_ADDR
// for un in units do
65446: LD_ADDR_VAR 0 4
65450: PUSH
65451: LD_VAR 0 1
65455: PUSH
65456: FOR_IN
65457: IFFALSE 65532
// if GetClass ( un ) = class then
65459: LD_VAR 0 4
65463: PPUSH
65464: CALL_OW 257
65468: PUSH
65469: LD_VAR 0 2
65473: EQUAL
65474: IFFALSE 65501
// result := Insert ( result , 1 , un ) else
65476: LD_ADDR_VAR 0 3
65480: PUSH
65481: LD_VAR 0 3
65485: PPUSH
65486: LD_INT 1
65488: PPUSH
65489: LD_VAR 0 4
65493: PPUSH
65494: CALL_OW 2
65498: ST_TO_ADDR
65499: GO 65530
// result := Replace ( result , result + 1 , un ) ;
65501: LD_ADDR_VAR 0 3
65505: PUSH
65506: LD_VAR 0 3
65510: PPUSH
65511: LD_VAR 0 3
65515: PUSH
65516: LD_INT 1
65518: PLUS
65519: PPUSH
65520: LD_VAR 0 4
65524: PPUSH
65525: CALL_OW 1
65529: ST_TO_ADDR
65530: GO 65456
65532: POP
65533: POP
// end ;
65534: LD_VAR 0 3
65538: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65539: LD_INT 0
65541: PPUSH
65542: PPUSH
65543: PPUSH
65544: PPUSH
65545: PPUSH
65546: PPUSH
65547: PPUSH
// result := [ ] ;
65548: LD_ADDR_VAR 0 4
65552: PUSH
65553: EMPTY
65554: ST_TO_ADDR
// if x - r < 0 then
65555: LD_VAR 0 1
65559: PUSH
65560: LD_VAR 0 3
65564: MINUS
65565: PUSH
65566: LD_INT 0
65568: LESS
65569: IFFALSE 65581
// min_x := 0 else
65571: LD_ADDR_VAR 0 8
65575: PUSH
65576: LD_INT 0
65578: ST_TO_ADDR
65579: GO 65597
// min_x := x - r ;
65581: LD_ADDR_VAR 0 8
65585: PUSH
65586: LD_VAR 0 1
65590: PUSH
65591: LD_VAR 0 3
65595: MINUS
65596: ST_TO_ADDR
// if y - r < 0 then
65597: LD_VAR 0 2
65601: PUSH
65602: LD_VAR 0 3
65606: MINUS
65607: PUSH
65608: LD_INT 0
65610: LESS
65611: IFFALSE 65623
// min_y := 0 else
65613: LD_ADDR_VAR 0 7
65617: PUSH
65618: LD_INT 0
65620: ST_TO_ADDR
65621: GO 65639
// min_y := y - r ;
65623: LD_ADDR_VAR 0 7
65627: PUSH
65628: LD_VAR 0 2
65632: PUSH
65633: LD_VAR 0 3
65637: MINUS
65638: ST_TO_ADDR
// max_x := x + r ;
65639: LD_ADDR_VAR 0 9
65643: PUSH
65644: LD_VAR 0 1
65648: PUSH
65649: LD_VAR 0 3
65653: PLUS
65654: ST_TO_ADDR
// max_y := y + r ;
65655: LD_ADDR_VAR 0 10
65659: PUSH
65660: LD_VAR 0 2
65664: PUSH
65665: LD_VAR 0 3
65669: PLUS
65670: ST_TO_ADDR
// for _x = min_x to max_x do
65671: LD_ADDR_VAR 0 5
65675: PUSH
65676: DOUBLE
65677: LD_VAR 0 8
65681: DEC
65682: ST_TO_ADDR
65683: LD_VAR 0 9
65687: PUSH
65688: FOR_TO
65689: IFFALSE 65790
// for _y = min_y to max_y do
65691: LD_ADDR_VAR 0 6
65695: PUSH
65696: DOUBLE
65697: LD_VAR 0 7
65701: DEC
65702: ST_TO_ADDR
65703: LD_VAR 0 10
65707: PUSH
65708: FOR_TO
65709: IFFALSE 65786
// begin if not ValidHex ( _x , _y ) then
65711: LD_VAR 0 5
65715: PPUSH
65716: LD_VAR 0 6
65720: PPUSH
65721: CALL_OW 488
65725: NOT
65726: IFFALSE 65730
// continue ;
65728: GO 65708
// if GetResourceTypeXY ( _x , _y ) then
65730: LD_VAR 0 5
65734: PPUSH
65735: LD_VAR 0 6
65739: PPUSH
65740: CALL_OW 283
65744: IFFALSE 65784
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65746: LD_ADDR_VAR 0 4
65750: PUSH
65751: LD_VAR 0 4
65755: PPUSH
65756: LD_VAR 0 4
65760: PUSH
65761: LD_INT 1
65763: PLUS
65764: PPUSH
65765: LD_VAR 0 5
65769: PUSH
65770: LD_VAR 0 6
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PPUSH
65779: CALL_OW 1
65783: ST_TO_ADDR
// end ;
65784: GO 65708
65786: POP
65787: POP
65788: GO 65688
65790: POP
65791: POP
// end ;
65792: LD_VAR 0 4
65796: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65797: LD_INT 0
65799: PPUSH
65800: PPUSH
65801: PPUSH
65802: PPUSH
65803: PPUSH
65804: PPUSH
65805: PPUSH
65806: PPUSH
// if not units then
65807: LD_VAR 0 1
65811: NOT
65812: IFFALSE 65816
// exit ;
65814: GO 66340
// result := UnitFilter ( units , [ f_ok ] ) ;
65816: LD_ADDR_VAR 0 3
65820: PUSH
65821: LD_VAR 0 1
65825: PPUSH
65826: LD_INT 50
65828: PUSH
65829: EMPTY
65830: LIST
65831: PPUSH
65832: CALL_OW 72
65836: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65837: LD_ADDR_VAR 0 8
65841: PUSH
65842: LD_VAR 0 1
65846: PUSH
65847: LD_INT 1
65849: ARRAY
65850: PPUSH
65851: CALL_OW 255
65855: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65856: LD_ADDR_VAR 0 10
65860: PUSH
65861: LD_INT 29
65863: PUSH
65864: LD_INT 91
65866: PUSH
65867: LD_INT 49
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: LIST
65874: ST_TO_ADDR
// if not result then
65875: LD_VAR 0 3
65879: NOT
65880: IFFALSE 65884
// exit ;
65882: GO 66340
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65884: LD_ADDR_VAR 0 5
65888: PUSH
65889: LD_INT 81
65891: PUSH
65892: LD_VAR 0 8
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PPUSH
65901: CALL_OW 69
65905: ST_TO_ADDR
// for i in result do
65906: LD_ADDR_VAR 0 4
65910: PUSH
65911: LD_VAR 0 3
65915: PUSH
65916: FOR_IN
65917: IFFALSE 66338
// begin tag := GetTag ( i ) + 1 ;
65919: LD_ADDR_VAR 0 9
65923: PUSH
65924: LD_VAR 0 4
65928: PPUSH
65929: CALL_OW 110
65933: PUSH
65934: LD_INT 1
65936: PLUS
65937: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65938: LD_ADDR_VAR 0 7
65942: PUSH
65943: LD_VAR 0 4
65947: PPUSH
65948: CALL_OW 250
65952: PPUSH
65953: LD_VAR 0 4
65957: PPUSH
65958: CALL_OW 251
65962: PPUSH
65963: LD_INT 6
65965: PPUSH
65966: CALL 65539 0 3
65970: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65971: LD_VAR 0 4
65975: PPUSH
65976: CALL_OW 247
65980: PUSH
65981: LD_INT 2
65983: EQUAL
65984: PUSH
65985: LD_VAR 0 7
65989: AND
65990: PUSH
65991: LD_VAR 0 4
65995: PPUSH
65996: CALL_OW 264
66000: PUSH
66001: LD_VAR 0 10
66005: IN
66006: NOT
66007: AND
66008: IFFALSE 66047
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66010: LD_VAR 0 4
66014: PPUSH
66015: LD_VAR 0 7
66019: PUSH
66020: LD_INT 1
66022: ARRAY
66023: PUSH
66024: LD_INT 1
66026: ARRAY
66027: PPUSH
66028: LD_VAR 0 7
66032: PUSH
66033: LD_INT 1
66035: ARRAY
66036: PUSH
66037: LD_INT 2
66039: ARRAY
66040: PPUSH
66041: CALL_OW 116
66045: GO 66336
// if path > tag then
66047: LD_VAR 0 2
66051: PUSH
66052: LD_VAR 0 9
66056: GREATER
66057: IFFALSE 66265
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
66059: LD_ADDR_VAR 0 6
66063: PUSH
66064: LD_VAR 0 5
66068: PPUSH
66069: LD_INT 91
66071: PUSH
66072: LD_VAR 0 4
66076: PUSH
66077: LD_INT 8
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: LIST
66084: PPUSH
66085: CALL_OW 72
66089: ST_TO_ADDR
// if nearEnemy then
66090: LD_VAR 0 6
66094: IFFALSE 66163
// begin if GetWeapon ( i ) = ru_time_lapser then
66096: LD_VAR 0 4
66100: PPUSH
66101: CALL_OW 264
66105: PUSH
66106: LD_INT 49
66108: EQUAL
66109: IFFALSE 66137
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
66111: LD_VAR 0 4
66115: PPUSH
66116: LD_VAR 0 6
66120: PPUSH
66121: LD_VAR 0 4
66125: PPUSH
66126: CALL_OW 74
66130: PPUSH
66131: CALL_OW 112
66135: GO 66161
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
66137: LD_VAR 0 4
66141: PPUSH
66142: LD_VAR 0 6
66146: PPUSH
66147: LD_VAR 0 4
66151: PPUSH
66152: CALL_OW 74
66156: PPUSH
66157: CALL_OW 115
// end else
66161: GO 66263
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66163: LD_VAR 0 4
66167: PPUSH
66168: LD_VAR 0 2
66172: PUSH
66173: LD_VAR 0 9
66177: ARRAY
66178: PUSH
66179: LD_INT 1
66181: ARRAY
66182: PPUSH
66183: LD_VAR 0 2
66187: PUSH
66188: LD_VAR 0 9
66192: ARRAY
66193: PUSH
66194: LD_INT 2
66196: ARRAY
66197: PPUSH
66198: CALL_OW 297
66202: PUSH
66203: LD_INT 6
66205: GREATER
66206: IFFALSE 66249
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66208: LD_VAR 0 4
66212: PPUSH
66213: LD_VAR 0 2
66217: PUSH
66218: LD_VAR 0 9
66222: ARRAY
66223: PUSH
66224: LD_INT 1
66226: ARRAY
66227: PPUSH
66228: LD_VAR 0 2
66232: PUSH
66233: LD_VAR 0 9
66237: ARRAY
66238: PUSH
66239: LD_INT 2
66241: ARRAY
66242: PPUSH
66243: CALL_OW 114
66247: GO 66263
// SetTag ( i , tag ) ;
66249: LD_VAR 0 4
66253: PPUSH
66254: LD_VAR 0 9
66258: PPUSH
66259: CALL_OW 109
// end else
66263: GO 66336
// if enemy then
66265: LD_VAR 0 5
66269: IFFALSE 66336
// begin if GetWeapon ( i ) = ru_time_lapser then
66271: LD_VAR 0 4
66275: PPUSH
66276: CALL_OW 264
66280: PUSH
66281: LD_INT 49
66283: EQUAL
66284: IFFALSE 66312
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66286: LD_VAR 0 4
66290: PPUSH
66291: LD_VAR 0 5
66295: PPUSH
66296: LD_VAR 0 4
66300: PPUSH
66301: CALL_OW 74
66305: PPUSH
66306: CALL_OW 112
66310: GO 66336
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66312: LD_VAR 0 4
66316: PPUSH
66317: LD_VAR 0 5
66321: PPUSH
66322: LD_VAR 0 4
66326: PPUSH
66327: CALL_OW 74
66331: PPUSH
66332: CALL_OW 115
// end ; end ;
66336: GO 65916
66338: POP
66339: POP
// end ;
66340: LD_VAR 0 3
66344: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66345: LD_INT 0
66347: PPUSH
66348: PPUSH
66349: PPUSH
// if not unit or IsInUnit ( unit ) then
66350: LD_VAR 0 1
66354: NOT
66355: PUSH
66356: LD_VAR 0 1
66360: PPUSH
66361: CALL_OW 310
66365: OR
66366: IFFALSE 66370
// exit ;
66368: GO 66461
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66370: LD_ADDR_VAR 0 4
66374: PUSH
66375: LD_VAR 0 1
66379: PPUSH
66380: CALL_OW 250
66384: PPUSH
66385: LD_VAR 0 2
66389: PPUSH
66390: LD_INT 1
66392: PPUSH
66393: CALL_OW 272
66397: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66398: LD_ADDR_VAR 0 5
66402: PUSH
66403: LD_VAR 0 1
66407: PPUSH
66408: CALL_OW 251
66412: PPUSH
66413: LD_VAR 0 2
66417: PPUSH
66418: LD_INT 1
66420: PPUSH
66421: CALL_OW 273
66425: ST_TO_ADDR
// if ValidHex ( x , y ) then
66426: LD_VAR 0 4
66430: PPUSH
66431: LD_VAR 0 5
66435: PPUSH
66436: CALL_OW 488
66440: IFFALSE 66461
// ComTurnXY ( unit , x , y ) ;
66442: LD_VAR 0 1
66446: PPUSH
66447: LD_VAR 0 4
66451: PPUSH
66452: LD_VAR 0 5
66456: PPUSH
66457: CALL_OW 118
// end ;
66461: LD_VAR 0 3
66465: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66466: LD_INT 0
66468: PPUSH
66469: PPUSH
// result := false ;
66470: LD_ADDR_VAR 0 3
66474: PUSH
66475: LD_INT 0
66477: ST_TO_ADDR
// if not units then
66478: LD_VAR 0 2
66482: NOT
66483: IFFALSE 66487
// exit ;
66485: GO 66532
// for i in units do
66487: LD_ADDR_VAR 0 4
66491: PUSH
66492: LD_VAR 0 2
66496: PUSH
66497: FOR_IN
66498: IFFALSE 66530
// if See ( side , i ) then
66500: LD_VAR 0 1
66504: PPUSH
66505: LD_VAR 0 4
66509: PPUSH
66510: CALL_OW 292
66514: IFFALSE 66528
// begin result := true ;
66516: LD_ADDR_VAR 0 3
66520: PUSH
66521: LD_INT 1
66523: ST_TO_ADDR
// exit ;
66524: POP
66525: POP
66526: GO 66532
// end ;
66528: GO 66497
66530: POP
66531: POP
// end ;
66532: LD_VAR 0 3
66536: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66537: LD_INT 0
66539: PPUSH
66540: PPUSH
66541: PPUSH
66542: PPUSH
// if not unit or not points then
66543: LD_VAR 0 1
66547: NOT
66548: PUSH
66549: LD_VAR 0 2
66553: NOT
66554: OR
66555: IFFALSE 66559
// exit ;
66557: GO 66649
// dist := 99999 ;
66559: LD_ADDR_VAR 0 5
66563: PUSH
66564: LD_INT 99999
66566: ST_TO_ADDR
// for i in points do
66567: LD_ADDR_VAR 0 4
66571: PUSH
66572: LD_VAR 0 2
66576: PUSH
66577: FOR_IN
66578: IFFALSE 66647
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66580: LD_ADDR_VAR 0 6
66584: PUSH
66585: LD_VAR 0 1
66589: PPUSH
66590: LD_VAR 0 4
66594: PUSH
66595: LD_INT 1
66597: ARRAY
66598: PPUSH
66599: LD_VAR 0 4
66603: PUSH
66604: LD_INT 2
66606: ARRAY
66607: PPUSH
66608: CALL_OW 297
66612: ST_TO_ADDR
// if tmpDist < dist then
66613: LD_VAR 0 6
66617: PUSH
66618: LD_VAR 0 5
66622: LESS
66623: IFFALSE 66645
// begin result := i ;
66625: LD_ADDR_VAR 0 3
66629: PUSH
66630: LD_VAR 0 4
66634: ST_TO_ADDR
// dist := tmpDist ;
66635: LD_ADDR_VAR 0 5
66639: PUSH
66640: LD_VAR 0 6
66644: ST_TO_ADDR
// end ; end ;
66645: GO 66577
66647: POP
66648: POP
// end ;
66649: LD_VAR 0 3
66653: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66654: LD_INT 0
66656: PPUSH
// uc_side := side ;
66657: LD_ADDR_OWVAR 20
66661: PUSH
66662: LD_VAR 0 1
66666: ST_TO_ADDR
// uc_nation := 3 ;
66667: LD_ADDR_OWVAR 21
66671: PUSH
66672: LD_INT 3
66674: ST_TO_ADDR
// vc_chassis := 25 ;
66675: LD_ADDR_OWVAR 37
66679: PUSH
66680: LD_INT 25
66682: ST_TO_ADDR
// vc_engine := engine_siberite ;
66683: LD_ADDR_OWVAR 39
66687: PUSH
66688: LD_INT 3
66690: ST_TO_ADDR
// vc_control := control_computer ;
66691: LD_ADDR_OWVAR 38
66695: PUSH
66696: LD_INT 3
66698: ST_TO_ADDR
// vc_weapon := 59 ;
66699: LD_ADDR_OWVAR 40
66703: PUSH
66704: LD_INT 59
66706: ST_TO_ADDR
// result := CreateVehicle ;
66707: LD_ADDR_VAR 0 5
66711: PUSH
66712: CALL_OW 45
66716: ST_TO_ADDR
// SetDir ( result , d ) ;
66717: LD_VAR 0 5
66721: PPUSH
66722: LD_VAR 0 4
66726: PPUSH
66727: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66731: LD_VAR 0 5
66735: PPUSH
66736: LD_VAR 0 2
66740: PPUSH
66741: LD_VAR 0 3
66745: PPUSH
66746: LD_INT 0
66748: PPUSH
66749: CALL_OW 48
// end ;
66753: LD_VAR 0 5
66757: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66758: LD_INT 0
66760: PPUSH
66761: PPUSH
66762: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66763: LD_ADDR_VAR 0 2
66767: PUSH
66768: LD_INT 0
66770: PUSH
66771: LD_INT 0
66773: PUSH
66774: LD_INT 0
66776: PUSH
66777: LD_INT 0
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66786: LD_VAR 0 1
66790: NOT
66791: PUSH
66792: LD_VAR 0 1
66796: PPUSH
66797: CALL_OW 264
66801: PUSH
66802: LD_INT 12
66804: PUSH
66805: LD_INT 51
66807: PUSH
66808: LD_INT 32
66810: PUSH
66811: LD_INT 89
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: LIST
66818: LIST
66819: IN
66820: NOT
66821: OR
66822: IFFALSE 66826
// exit ;
66824: GO 66924
// for i := 1 to 3 do
66826: LD_ADDR_VAR 0 3
66830: PUSH
66831: DOUBLE
66832: LD_INT 1
66834: DEC
66835: ST_TO_ADDR
66836: LD_INT 3
66838: PUSH
66839: FOR_TO
66840: IFFALSE 66922
// begin tmp := GetCargo ( cargo , i ) ;
66842: LD_ADDR_VAR 0 4
66846: PUSH
66847: LD_VAR 0 1
66851: PPUSH
66852: LD_VAR 0 3
66856: PPUSH
66857: CALL_OW 289
66861: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66862: LD_ADDR_VAR 0 2
66866: PUSH
66867: LD_VAR 0 2
66871: PPUSH
66872: LD_VAR 0 3
66876: PPUSH
66877: LD_VAR 0 4
66881: PPUSH
66882: CALL_OW 1
66886: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66887: LD_ADDR_VAR 0 2
66891: PUSH
66892: LD_VAR 0 2
66896: PPUSH
66897: LD_INT 4
66899: PPUSH
66900: LD_VAR 0 2
66904: PUSH
66905: LD_INT 4
66907: ARRAY
66908: PUSH
66909: LD_VAR 0 4
66913: PLUS
66914: PPUSH
66915: CALL_OW 1
66919: ST_TO_ADDR
// end ;
66920: GO 66839
66922: POP
66923: POP
// end ;
66924: LD_VAR 0 2
66928: RET
// export function Length ( array ) ; begin
66929: LD_INT 0
66931: PPUSH
// result := array + 0 ;
66932: LD_ADDR_VAR 0 2
66936: PUSH
66937: LD_VAR 0 1
66941: PUSH
66942: LD_INT 0
66944: PLUS
66945: ST_TO_ADDR
// end ;
66946: LD_VAR 0 2
66950: RET
// export function PrepareArray ( array ) ; begin
66951: LD_INT 0
66953: PPUSH
// result := array diff 0 ;
66954: LD_ADDR_VAR 0 2
66958: PUSH
66959: LD_VAR 0 1
66963: PUSH
66964: LD_INT 0
66966: DIFF
66967: ST_TO_ADDR
// if not result [ 1 ] then
66968: LD_VAR 0 2
66972: PUSH
66973: LD_INT 1
66975: ARRAY
66976: NOT
66977: IFFALSE 66997
// result := Delete ( result , 1 ) ;
66979: LD_ADDR_VAR 0 2
66983: PUSH
66984: LD_VAR 0 2
66988: PPUSH
66989: LD_INT 1
66991: PPUSH
66992: CALL_OW 3
66996: ST_TO_ADDR
// end ;
66997: LD_VAR 0 2
67001: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
67002: LD_INT 0
67004: PPUSH
67005: PPUSH
67006: PPUSH
67007: PPUSH
// sibRocketRange := 25 ;
67008: LD_ADDR_VAR 0 6
67012: PUSH
67013: LD_INT 25
67015: ST_TO_ADDR
// result := false ;
67016: LD_ADDR_VAR 0 4
67020: PUSH
67021: LD_INT 0
67023: ST_TO_ADDR
// for i := 0 to 5 do
67024: LD_ADDR_VAR 0 5
67028: PUSH
67029: DOUBLE
67030: LD_INT 0
67032: DEC
67033: ST_TO_ADDR
67034: LD_INT 5
67036: PUSH
67037: FOR_TO
67038: IFFALSE 67105
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
67040: LD_VAR 0 1
67044: PPUSH
67045: LD_VAR 0 5
67049: PPUSH
67050: LD_VAR 0 6
67054: PPUSH
67055: CALL_OW 272
67059: PPUSH
67060: LD_VAR 0 2
67064: PPUSH
67065: LD_VAR 0 5
67069: PPUSH
67070: LD_VAR 0 6
67074: PPUSH
67075: CALL_OW 273
67079: PPUSH
67080: LD_VAR 0 3
67084: PPUSH
67085: CALL_OW 309
67089: IFFALSE 67103
// begin result := true ;
67091: LD_ADDR_VAR 0 4
67095: PUSH
67096: LD_INT 1
67098: ST_TO_ADDR
// exit ;
67099: POP
67100: POP
67101: GO 67107
// end ;
67103: GO 67037
67105: POP
67106: POP
// end ;
67107: LD_VAR 0 4
67111: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
67112: LD_INT 0
67114: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
67115: LD_VAR 0 1
67119: PPUSH
67120: LD_VAR 0 2
67124: PPUSH
67125: LD_INT 0
67127: PPUSH
67128: LD_INT 0
67130: PPUSH
67131: LD_INT 1
67133: PPUSH
67134: LD_INT 0
67136: PPUSH
67137: CALL_OW 587
// end ; end_of_file
67141: LD_VAR 0 3
67145: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67146: LD_VAR 0 1
67150: PPUSH
67151: LD_VAR 0 2
67155: PPUSH
67156: LD_VAR 0 3
67160: PPUSH
67161: LD_VAR 0 4
67165: PPUSH
67166: LD_VAR 0 5
67170: PPUSH
67171: LD_VAR 0 6
67175: PPUSH
67176: CALL 5857 0 6
// end ;
67180: PPOPN 6
67182: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
67183: LD_INT 0
67185: PPUSH
// begin if not units then
67186: LD_VAR 0 1
67190: NOT
67191: IFFALSE 67195
// exit ;
67193: GO 67195
// end ;
67195: PPOPN 7
67197: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
67198: CALL 5828 0 0
// end ; end_of_file
67202: PPOPN 1
67204: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67205: LD_VAR 0 1
67209: PUSH
67210: LD_INT 200
67212: DOUBLE
67213: GREATEREQUAL
67214: IFFALSE 67222
67216: LD_INT 299
67218: DOUBLE
67219: LESSEQUAL
67220: IFTRUE 67224
67222: GO 67256
67224: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67225: LD_VAR 0 1
67229: PPUSH
67230: LD_VAR 0 2
67234: PPUSH
67235: LD_VAR 0 3
67239: PPUSH
67240: LD_VAR 0 4
67244: PPUSH
67245: LD_VAR 0 5
67249: PPUSH
67250: CALL 21831 0 5
67254: GO 67333
67256: LD_INT 300
67258: DOUBLE
67259: GREATEREQUAL
67260: IFFALSE 67268
67262: LD_INT 399
67264: DOUBLE
67265: LESSEQUAL
67266: IFTRUE 67270
67268: GO 67332
67270: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67271: LD_VAR 0 1
67275: PPUSH
67276: LD_VAR 0 2
67280: PPUSH
67281: LD_VAR 0 3
67285: PPUSH
67286: LD_VAR 0 4
67290: PPUSH
67291: LD_VAR 0 5
67295: PPUSH
67296: LD_VAR 0 6
67300: PPUSH
67301: LD_VAR 0 7
67305: PPUSH
67306: LD_VAR 0 8
67310: PPUSH
67311: LD_VAR 0 9
67315: PPUSH
67316: LD_VAR 0 10
67320: PPUSH
67321: LD_VAR 0 11
67325: PPUSH
67326: CALL 18164 0 11
67330: GO 67333
67332: POP
// end ;
67333: PPOPN 11
67335: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67336: LD_VAR 0 1
67340: PPUSH
67341: LD_VAR 0 2
67345: PPUSH
67346: LD_VAR 0 3
67350: PPUSH
67351: LD_VAR 0 4
67355: PPUSH
67356: LD_VAR 0 5
67360: PPUSH
67361: CALL 21567 0 5
// end ;
67365: PPOPN 5
67367: END
