// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson , Mike ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export selectedPeople ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect := 0 ;
  15: LD_ADDR_EXP 19
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene := 1 ;
  23: LD_ADDR_EXP 20
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans := [ ] ;
  31: LD_ADDR_EXP 13
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans := [ ] ;
  38: LD_ADDR_EXP 14
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles := [ ] ;
  45: LD_ADDR_EXP 15
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 12
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// resources := [ ] ;
  59: LD_ADDR_EXP 22
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// mission_prefix := 06_ ;
  66: LD_ADDR_EXP 23
  70: PUSH
  71: LD_STRING 06_
  73: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  74: LD_ADDR_EXP 24
  78: PUSH
  79: LD_STRING 05_
  81: ST_TO_ADDR
// PrepareDeltaBase ;
  82: CALL 2411 0 0
// CreateNature ;
  86: CALL 170 0 0
// LoadVehicles ;
  90: CALL 1530 0 0
// PrepareHeroes ;
  94: CALL 299 0 0
// PrepareRandoms ;
  98: CALL 1795 0 0
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 102: LD_ADDR_EXP 21
 106: PUSH
 107: LD_INT 22
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 2
 119: PUSH
 120: LD_INT 30
 122: PUSH
 123: LD_INT 6
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 30
 132: PUSH
 133: LD_INT 7
 135: PUSH
 136: EMPTY
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 30
 142: PUSH
 143: LD_INT 8
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: PPUSH
 160: CALL_OW 69
 164: ST_TO_ADDR
// Action ;
 165: CALL 3325 0 0
// end ;
 169: END
// export function CreateNature ; var i ; begin
 170: LD_INT 0
 172: PPUSH
 173: PPUSH
// uc_side := 0 ;
 174: LD_ADDR_OWVAR 20
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// uc_nation := 0 ;
 182: LD_ADDR_OWVAR 21
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// for i = 1 to 4 do
 190: LD_ADDR_VAR 0 2
 194: PUSH
 195: DOUBLE
 196: LD_INT 1
 198: DEC
 199: ST_TO_ADDR
 200: LD_INT 4
 202: PUSH
 203: FOR_TO
 204: IFFALSE 292
// begin hc_gallery :=  ;
 206: LD_ADDR_OWVAR 33
 210: PUSH
 211: LD_STRING 
 213: ST_TO_ADDR
// hc_name :=  ;
 214: LD_ADDR_OWVAR 26
 218: PUSH
 219: LD_STRING 
 221: ST_TO_ADDR
// hc_agressivity := 0 ;
 222: LD_ADDR_OWVAR 35
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// hc_attr := [ rand ( 10 , 11 ) , rand ( 10 , 12 ) ] ;
 230: LD_ADDR_OWVAR 29
 234: PUSH
 235: LD_INT 10
 237: PPUSH
 238: LD_INT 11
 240: PPUSH
 241: CALL_OW 12
 245: PUSH
 246: LD_INT 10
 248: PPUSH
 249: LD_INT 12
 251: PPUSH
 252: CALL_OW 12
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: ST_TO_ADDR
// hc_class := class_apeman ;
 261: LD_ADDR_OWVAR 28
 265: PUSH
 266: LD_INT 12
 268: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 22 , 18 , 20 , false ) ;
 269: CALL_OW 44
 273: PPUSH
 274: LD_INT 22
 276: PPUSH
 277: LD_INT 18
 279: PPUSH
 280: LD_INT 20
 282: PPUSH
 283: LD_INT 0
 285: PPUSH
 286: CALL_OW 50
// end ;
 290: GO 203
 292: POP
 293: POP
// end ; end_of_file
 294: LD_VAR 0 1
 298: RET
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
 305: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 306: LD_ADDR_VAR 0 3
 310: PUSH
 311: LD_INT 22
 313: PUSH
 314: LD_INT 1
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 21
 323: PUSH
 324: LD_INT 3
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: LD_INT 30
 333: PUSH
 334: LD_INT 0
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PPUSH
 346: CALL_OW 69
 350: ST_TO_ADDR
// if tmp then
 351: LD_VAR 0 3
 355: IFFALSE 373
// SetBName ( tmp [ 1 ] , delta ) ;
 357: LD_VAR 0 3
 361: PUSH
 362: LD_INT 1
 364: ARRAY
 365: PPUSH
 366: LD_STRING delta
 368: PPUSH
 369: CALL_OW 500
// uc_side := 1 ;
 373: LD_ADDR_OWVAR 20
 377: PUSH
 378: LD_INT 1
 380: ST_TO_ADDR
// uc_nation := 1 ;
 381: LD_ADDR_OWVAR 21
 385: PUSH
 386: LD_INT 1
 388: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 389: LD_ADDR_EXP 1
 393: PUSH
 394: LD_STRING JMM
 396: PPUSH
 397: LD_INT 1
 399: PPUSH
 400: LD_EXP 24
 404: PPUSH
 405: CALL 26606 0 3
 409: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 410: LD_ADDR_EXP 17
 414: PUSH
 415: LD_STRING Harisson
 417: PPUSH
 418: LD_INT 0
 420: PPUSH
 421: LD_STRING 
 423: PPUSH
 424: CALL 26606 0 3
 428: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 429: LD_EXP 1
 433: PPUSH
 434: LD_VAR 0 3
 438: PUSH
 439: LD_INT 1
 441: ARRAY
 442: PPUSH
 443: CALL_OW 250
 447: PPUSH
 448: LD_VAR 0 3
 452: PUSH
 453: LD_INT 1
 455: ARRAY
 456: PPUSH
 457: CALL_OW 251
 461: PPUSH
 462: LD_INT 5
 464: PPUSH
 465: LD_INT 0
 467: PPUSH
 468: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 472: LD_EXP 1
 476: PPUSH
 477: LD_INT 1
 479: PPUSH
 480: CALL_OW 336
// Gladstone := PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
 484: LD_ADDR_EXP 2
 488: PUSH
 489: LD_STRING Gladstone
 491: PPUSH
 492: LD_INT 1
 494: PPUSH
 495: LD_EXP 24
 499: PPUSH
 500: CALL 26606 0 3
 504: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 505: LD_EXP 2
 509: PPUSH
 510: LD_VAR 0 3
 514: PUSH
 515: LD_INT 1
 517: ARRAY
 518: PPUSH
 519: CALL_OW 250
 523: PPUSH
 524: LD_VAR 0 3
 528: PUSH
 529: LD_INT 1
 531: ARRAY
 532: PPUSH
 533: CALL_OW 251
 537: PPUSH
 538: LD_INT 5
 540: PPUSH
 541: LD_INT 0
 543: PPUSH
 544: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 548: LD_EXP 2
 552: PPUSH
 553: LD_INT 4
 555: PPUSH
 556: CALL_OW 336
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
 560: LD_ADDR_EXP 3
 564: PUSH
 565: LD_STRING Denis
 567: PPUSH
 568: LD_INT 1
 570: PPUSH
 571: LD_EXP 24
 575: PPUSH
 576: CALL 26606 0 3
 580: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 581: LD_EXP 3
 585: PPUSH
 586: LD_VAR 0 3
 590: PUSH
 591: LD_INT 1
 593: ARRAY
 594: PPUSH
 595: CALL_OW 250
 599: PPUSH
 600: LD_VAR 0 3
 604: PUSH
 605: LD_INT 1
 607: ARRAY
 608: PPUSH
 609: CALL_OW 251
 613: PPUSH
 614: LD_INT 5
 616: PPUSH
 617: LD_INT 0
 619: PPUSH
 620: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 624: LD_EXP 3
 628: PPUSH
 629: LD_INT 4
 631: PPUSH
 632: CALL_OW 336
// Mike := PrepareUnit ( Mike , true , mission_prefix_prev ) ;
 636: LD_ADDR_EXP 10
 640: PUSH
 641: LD_STRING Mike
 643: PPUSH
 644: LD_INT 1
 646: PPUSH
 647: LD_EXP 24
 651: PPUSH
 652: CALL 26606 0 3
 656: ST_TO_ADDR
// PlaceUnitXYR ( Mike , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 657: LD_EXP 10
 661: PPUSH
 662: LD_VAR 0 3
 666: PUSH
 667: LD_INT 1
 669: ARRAY
 670: PPUSH
 671: CALL_OW 250
 675: PPUSH
 676: LD_VAR 0 3
 680: PUSH
 681: LD_INT 1
 683: ARRAY
 684: PPUSH
 685: CALL_OW 251
 689: PPUSH
 690: LD_INT 5
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 50
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 700: LD_STRING FrankInDelta
 702: PPUSH
 703: LD_INT 0
 705: PPUSH
 706: CALL_OW 30
 710: PUSH
 711: LD_INT 1
 713: EQUAL
 714: IFFALSE 792
// begin Frank := PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 716: LD_ADDR_EXP 5
 720: PUSH
 721: LD_STRING Frank
 723: PPUSH
 724: LD_INT 1
 726: PPUSH
 727: LD_EXP 24
 731: PPUSH
 732: CALL 26606 0 3
 736: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 737: LD_EXP 5
 741: PPUSH
 742: LD_VAR 0 3
 746: PUSH
 747: LD_INT 1
 749: ARRAY
 750: PPUSH
 751: CALL_OW 250
 755: PPUSH
 756: LD_VAR 0 3
 760: PUSH
 761: LD_INT 1
 763: ARRAY
 764: PPUSH
 765: CALL_OW 251
 769: PPUSH
 770: LD_INT 5
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 780: LD_EXP 5
 784: PPUSH
 785: LD_INT 1
 787: PPUSH
 788: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 792: LD_STRING LisaInDelta
 794: PPUSH
 795: LD_INT 0
 797: PPUSH
 798: CALL_OW 30
 802: PUSH
 803: LD_INT 1
 805: EQUAL
 806: IFFALSE 884
// begin Lisa := PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 808: LD_ADDR_EXP 4
 812: PUSH
 813: LD_STRING Lisa
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: LD_EXP 24
 823: PPUSH
 824: CALL 26606 0 3
 828: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 829: LD_EXP 4
 833: PPUSH
 834: LD_VAR 0 3
 838: PUSH
 839: LD_INT 1
 841: ARRAY
 842: PPUSH
 843: CALL_OW 250
 847: PPUSH
 848: LD_VAR 0 3
 852: PUSH
 853: LD_INT 1
 855: ARRAY
 856: PPUSH
 857: CALL_OW 251
 861: PPUSH
 862: LD_INT 5
 864: PPUSH
 865: LD_INT 0
 867: PPUSH
 868: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 872: LD_EXP 4
 876: PPUSH
 877: LD_INT 1
 879: PPUSH
 880: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 884: LD_STRING BobbyInDelta
 886: PPUSH
 887: LD_INT 0
 889: PPUSH
 890: CALL_OW 30
 894: PUSH
 895: LD_INT 1
 897: EQUAL
 898: IFFALSE 976
// begin Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 900: LD_ADDR_EXP 6
 904: PUSH
 905: LD_STRING Bobby
 907: PPUSH
 908: LD_INT 1
 910: PPUSH
 911: LD_EXP 24
 915: PPUSH
 916: CALL 26606 0 3
 920: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 921: LD_EXP 6
 925: PPUSH
 926: LD_VAR 0 3
 930: PUSH
 931: LD_INT 1
 933: ARRAY
 934: PPUSH
 935: CALL_OW 250
 939: PPUSH
 940: LD_VAR 0 3
 944: PUSH
 945: LD_INT 1
 947: ARRAY
 948: PPUSH
 949: CALL_OW 251
 953: PPUSH
 954: LD_INT 5
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 964: LD_EXP 6
 968: PPUSH
 969: LD_INT 1
 971: PPUSH
 972: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 976: LD_STRING CyrusInDelta
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL_OW 30
 986: PUSH
 987: LD_INT 1
 989: EQUAL
 990: IFFALSE 1068
// begin Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 992: LD_ADDR_EXP 7
 996: PUSH
 997: LD_STRING Cyrus
 999: PPUSH
1000: LD_INT 1
1002: PPUSH
1003: LD_EXP 24
1007: PPUSH
1008: CALL 26606 0 3
1012: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1013: LD_EXP 7
1017: PPUSH
1018: LD_VAR 0 3
1022: PUSH
1023: LD_INT 1
1025: ARRAY
1026: PPUSH
1027: CALL_OW 250
1031: PPUSH
1032: LD_VAR 0 3
1036: PUSH
1037: LD_INT 1
1039: ARRAY
1040: PPUSH
1041: CALL_OW 251
1045: PPUSH
1046: LD_INT 5
1048: PPUSH
1049: LD_INT 0
1051: PPUSH
1052: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
1056: LD_EXP 7
1060: PPUSH
1061: LD_INT 1
1063: PPUSH
1064: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
1068: LD_STRING DonaldsonInDelta
1070: PPUSH
1071: LD_INT 0
1073: PPUSH
1074: CALL_OW 30
1078: PUSH
1079: LD_INT 1
1081: EQUAL
1082: IFFALSE 1160
// begin Donaldson := PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
1084: LD_ADDR_EXP 9
1088: PUSH
1089: LD_STRING Donaldson
1091: PPUSH
1092: LD_INT 1
1094: PPUSH
1095: LD_EXP 24
1099: PPUSH
1100: CALL 26606 0 3
1104: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1105: LD_EXP 9
1109: PPUSH
1110: LD_VAR 0 3
1114: PUSH
1115: LD_INT 1
1117: ARRAY
1118: PPUSH
1119: CALL_OW 250
1123: PPUSH
1124: LD_VAR 0 3
1128: PUSH
1129: LD_INT 1
1131: ARRAY
1132: PPUSH
1133: CALL_OW 251
1137: PPUSH
1138: LD_INT 5
1140: PPUSH
1141: LD_INT 0
1143: PPUSH
1144: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
1148: LD_EXP 9
1152: PPUSH
1153: LD_INT 1
1155: PPUSH
1156: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
1160: LD_STRING BrownInDelta
1162: PPUSH
1163: LD_INT 0
1165: PPUSH
1166: CALL_OW 30
1170: PUSH
1171: LD_INT 1
1173: EQUAL
1174: IFFALSE 1252
// begin Brown := PrepareUnit ( Brown , true , mission_prefix_prev ) ;
1176: LD_ADDR_EXP 8
1180: PUSH
1181: LD_STRING Brown
1183: PPUSH
1184: LD_INT 1
1186: PPUSH
1187: LD_EXP 24
1191: PPUSH
1192: CALL 26606 0 3
1196: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1197: LD_EXP 8
1201: PPUSH
1202: LD_VAR 0 3
1206: PUSH
1207: LD_INT 1
1209: ARRAY
1210: PPUSH
1211: CALL_OW 250
1215: PPUSH
1216: LD_VAR 0 3
1220: PUSH
1221: LD_INT 1
1223: ARRAY
1224: PPUSH
1225: CALL_OW 251
1229: PPUSH
1230: LD_INT 5
1232: PPUSH
1233: LD_INT 0
1235: PPUSH
1236: CALL_OW 50
// SetClass ( Brown , 2 ) ;
1240: LD_EXP 8
1244: PPUSH
1245: LD_INT 2
1247: PPUSH
1248: CALL_OW 336
// end ; others := CreateCharacterSet ( othersInDelta ) ;
1252: LD_ADDR_EXP 11
1256: PUSH
1257: LD_STRING othersInDelta
1259: PPUSH
1260: CALL_OW 31
1264: ST_TO_ADDR
// for i in others do
1265: LD_ADDR_VAR 0 2
1269: PUSH
1270: LD_EXP 11
1274: PUSH
1275: FOR_IN
1276: IFFALSE 1323
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1278: LD_VAR 0 2
1282: PPUSH
1283: LD_VAR 0 3
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: CALL_OW 250
1296: PPUSH
1297: LD_VAR 0 3
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 251
1310: PPUSH
1311: LD_INT 35
1313: PPUSH
1314: LD_INT 0
1316: PPUSH
1317: CALL_OW 50
1321: GO 1275
1323: POP
1324: POP
// apemans := CreateCharacterSet ( apeInDelta ) ;
1325: LD_ADDR_EXP 13
1329: PUSH
1330: LD_STRING apeInDelta
1332: PPUSH
1333: CALL_OW 31
1337: ST_TO_ADDR
// uc_nation := 0 ;
1338: LD_ADDR_OWVAR 21
1342: PUSH
1343: LD_INT 0
1345: ST_TO_ADDR
// if apemans > 5 then
1346: LD_EXP 13
1350: PUSH
1351: LD_INT 5
1353: GREATER
1354: IFFALSE 1449
// begin for i := 1 to 5 do
1356: LD_ADDR_VAR 0 2
1360: PUSH
1361: DOUBLE
1362: LD_INT 1
1364: DEC
1365: ST_TO_ADDR
1366: LD_INT 5
1368: PUSH
1369: FOR_TO
1370: IFFALSE 1445
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1372: LD_EXP 13
1376: PUSH
1377: LD_VAR 0 2
1381: ARRAY
1382: PPUSH
1383: LD_VAR 0 3
1387: PUSH
1388: LD_INT 1
1390: ARRAY
1391: PPUSH
1392: CALL_OW 250
1396: PPUSH
1397: LD_VAR 0 3
1401: PUSH
1402: LD_INT 1
1404: ARRAY
1405: PPUSH
1406: CALL_OW 251
1410: PPUSH
1411: LD_INT 50
1413: PPUSH
1414: LD_INT 0
1416: PPUSH
1417: CALL_OW 50
// yourApemans := yourApemans ^ apemans [ i ] ;
1421: LD_ADDR_EXP 14
1425: PUSH
1426: LD_EXP 14
1430: PUSH
1431: LD_EXP 13
1435: PUSH
1436: LD_VAR 0 2
1440: ARRAY
1441: ADD
1442: ST_TO_ADDR
// end ;
1443: GO 1369
1445: POP
1446: POP
// end else
1447: GO 1525
// begin for i in apemans do
1449: LD_ADDR_VAR 0 2
1453: PUSH
1454: LD_EXP 13
1458: PUSH
1459: FOR_IN
1460: IFFALSE 1523
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1462: LD_VAR 0 2
1466: PPUSH
1467: LD_VAR 0 3
1471: PUSH
1472: LD_INT 1
1474: ARRAY
1475: PPUSH
1476: CALL_OW 250
1480: PPUSH
1481: LD_VAR 0 3
1485: PUSH
1486: LD_INT 1
1488: ARRAY
1489: PPUSH
1490: CALL_OW 251
1494: PPUSH
1495: LD_INT 50
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: CALL_OW 50
// yourApemans := yourApemans ^ i ;
1505: LD_ADDR_EXP 14
1509: PUSH
1510: LD_EXP 14
1514: PUSH
1515: LD_VAR 0 2
1519: ADD
1520: ST_TO_ADDR
// end ;
1521: GO 1459
1523: POP
1524: POP
// end ; end ;
1525: LD_VAR 0 1
1529: RET
// export function LoadVehicles ; var i , j , veh , tmp , vehicles ; begin
1530: LD_INT 0
1532: PPUSH
1533: PPUSH
1534: PPUSH
1535: PPUSH
1536: PPUSH
1537: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1538: LD_ADDR_VAR 0 5
1542: PUSH
1543: LD_INT 22
1545: PUSH
1546: LD_INT 1
1548: PUSH
1549: EMPTY
1550: LIST
1551: LIST
1552: PUSH
1553: LD_INT 21
1555: PUSH
1556: LD_INT 3
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: PUSH
1563: LD_INT 30
1565: PUSH
1566: LD_INT 0
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 69
1582: ST_TO_ADDR
// uc_side := 1 ;
1583: LD_ADDR_OWVAR 20
1587: PUSH
1588: LD_INT 1
1590: ST_TO_ADDR
// vehicles := LoadVariable ( vehiclesInDelta , [ ] ) ;
1591: LD_ADDR_VAR 0 6
1595: PUSH
1596: LD_STRING vehiclesInDelta
1598: PPUSH
1599: EMPTY
1600: PPUSH
1601: CALL_OW 30
1605: ST_TO_ADDR
// for i := 1 to Count ( vehicles ) div 4 do
1606: LD_ADDR_VAR 0 2
1610: PUSH
1611: DOUBLE
1612: LD_INT 1
1614: DEC
1615: ST_TO_ADDR
1616: LD_VAR 0 6
1620: PPUSH
1621: CALL 28708 0 1
1625: PUSH
1626: LD_INT 4
1628: DIV
1629: PUSH
1630: FOR_TO
1631: IFFALSE 1788
// begin uc_nation := vehicles [ 1 ] ;
1633: LD_ADDR_OWVAR 21
1637: PUSH
1638: LD_VAR 0 6
1642: PUSH
1643: LD_INT 1
1645: ARRAY
1646: ST_TO_ADDR
// vc_chassis := vehicles [ 2 ] ;
1647: LD_ADDR_OWVAR 37
1651: PUSH
1652: LD_VAR 0 6
1656: PUSH
1657: LD_INT 2
1659: ARRAY
1660: ST_TO_ADDR
// vc_engine := vehicles [ 3 ] ;
1661: LD_ADDR_OWVAR 39
1665: PUSH
1666: LD_VAR 0 6
1670: PUSH
1671: LD_INT 3
1673: ARRAY
1674: ST_TO_ADDR
// vc_control := vehicles [ 4 ] ;
1675: LD_ADDR_OWVAR 38
1679: PUSH
1680: LD_VAR 0 6
1684: PUSH
1685: LD_INT 4
1687: ARRAY
1688: ST_TO_ADDR
// vc_weapon := vehicles [ 5 ] ;
1689: LD_ADDR_OWVAR 40
1693: PUSH
1694: LD_VAR 0 6
1698: PUSH
1699: LD_INT 5
1701: ARRAY
1702: ST_TO_ADDR
// veh := CreateVehicle ;
1703: LD_ADDR_VAR 0 4
1707: PUSH
1708: CALL_OW 45
1712: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1713: LD_VAR 0 4
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: LD_INT 5
1723: PPUSH
1724: CALL_OW 12
1728: PPUSH
1729: CALL_OW 233
// PlaceUnitArea ( veh , parkingArea , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 4
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// for j := 1 to 5 do
1748: LD_ADDR_VAR 0 3
1752: PUSH
1753: DOUBLE
1754: LD_INT 1
1756: DEC
1757: ST_TO_ADDR
1758: LD_INT 5
1760: PUSH
1761: FOR_TO
1762: IFFALSE 1784
// vehicles := Delete ( vehicles , 1 ) ;
1764: LD_ADDR_VAR 0 6
1768: PUSH
1769: LD_VAR 0 6
1773: PPUSH
1774: LD_INT 1
1776: PPUSH
1777: CALL_OW 3
1781: ST_TO_ADDR
1782: GO 1761
1784: POP
1785: POP
// end ;
1786: GO 1630
1788: POP
1789: POP
// end ;
1790: LD_VAR 0 1
1794: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1795: LD_INT 0
1797: PPUSH
1798: PPUSH
1799: PPUSH
1800: PPUSH
1801: PPUSH
// uc_side := 1 ;
1802: LD_ADDR_OWVAR 20
1806: PUSH
1807: LD_INT 1
1809: ST_TO_ADDR
// uc_nation := 1 ;
1810: LD_ADDR_OWVAR 21
1814: PUSH
1815: LD_INT 1
1817: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1818: LD_ADDR_VAR 0 4
1822: PUSH
1823: LD_INT 22
1825: PUSH
1826: LD_INT 1
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: LD_INT 21
1835: PUSH
1836: LD_INT 3
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 30
1845: PUSH
1846: LD_INT 0
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: PPUSH
1858: CALL_OW 69
1862: ST_TO_ADDR
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_nation , nation_american ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) ;
1863: LD_ADDR_EXP 16
1867: PUSH
1868: LD_INT 22
1870: PUSH
1871: LD_INT 1
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: LD_INT 23
1880: PUSH
1881: LD_INT 1
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PUSH
1888: LD_INT 25
1890: PUSH
1891: LD_INT 4
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PUSH
1898: LD_INT 26
1900: PUSH
1901: LD_INT 1
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: LIST
1912: LIST
1913: PUSH
1914: EMPTY
1915: LIST
1916: PPUSH
1917: CALL_OW 69
1921: PUSH
1922: LD_EXP 1
1926: PUSH
1927: LD_EXP 7
1931: PUSH
1932: LD_EXP 6
1936: PUSH
1937: LD_EXP 5
1941: PUSH
1942: LD_EXP 2
1946: PUSH
1947: LD_EXP 3
1951: PUSH
1952: LD_EXP 8
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: DIFF
1966: ST_TO_ADDR
// if not deltaDoctor then
1967: LD_EXP 16
1971: NOT
1972: IFFALSE 2134
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_nation , nation_american ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
1974: LD_ADDR_VAR 0 5
1978: PUSH
1979: LD_INT 22
1981: PUSH
1982: LD_INT 1
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: PUSH
1989: LD_INT 23
1991: PUSH
1992: LD_INT 1
1994: PUSH
1995: EMPTY
1996: LIST
1997: LIST
1998: PUSH
1999: LD_INT 26
2001: PUSH
2002: LD_INT 1
2004: PUSH
2005: EMPTY
2006: LIST
2007: LIST
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: LIST
2013: PUSH
2014: EMPTY
2015: LIST
2016: PPUSH
2017: CALL_OW 69
2021: PUSH
2022: LD_EXP 1
2026: PUSH
2027: LD_EXP 7
2031: PUSH
2032: LD_EXP 6
2036: PUSH
2037: LD_EXP 5
2041: PUSH
2042: LD_EXP 2
2046: PUSH
2047: LD_EXP 3
2051: PUSH
2052: LD_EXP 8
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: DIFF
2066: ST_TO_ADDR
// if filter then
2067: LD_VAR 0 5
2071: IFFALSE 2132
// for i in filter do
2073: LD_ADDR_VAR 0 2
2077: PUSH
2078: LD_VAR 0 5
2082: PUSH
2083: FOR_IN
2084: IFFALSE 2130
// if GetSkill ( i , 4 ) >= 4 then
2086: LD_VAR 0 2
2090: PPUSH
2091: LD_INT 4
2093: PPUSH
2094: CALL_OW 259
2098: PUSH
2099: LD_INT 4
2101: GREATEREQUAL
2102: IFFALSE 2128
// begin deltaDoctor := i ;
2104: LD_ADDR_EXP 16
2108: PUSH
2109: LD_VAR 0 2
2113: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
2114: LD_EXP 16
2118: PPUSH
2119: LD_INT 4
2121: PPUSH
2122: CALL_OW 336
// break ;
2126: GO 2130
// end ;
2128: GO 2083
2130: POP
2131: POP
// end else
2132: GO 2148
// deltaDoctor := deltaDoctor [ 1 ] ;
2134: LD_ADDR_EXP 16
2138: PUSH
2139: LD_EXP 16
2143: PUSH
2144: LD_INT 1
2146: ARRAY
2147: ST_TO_ADDR
// for i := 1 to 7 do
2148: LD_ADDR_VAR 0 2
2152: PUSH
2153: DOUBLE
2154: LD_INT 1
2156: DEC
2157: ST_TO_ADDR
2158: LD_INT 7
2160: PUSH
2161: FOR_TO
2162: IFFALSE 2299
// begin hc_gallery :=  ;
2164: LD_ADDR_OWVAR 33
2168: PUSH
2169: LD_STRING 
2171: ST_TO_ADDR
// hc_name :=  ;
2172: LD_ADDR_OWVAR 26
2176: PUSH
2177: LD_STRING 
2179: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) ) ;
2180: LD_INT 0
2182: PPUSH
2183: LD_INT 1
2185: PUSH
2186: LD_INT 2
2188: PUSH
2189: LD_INT 3
2191: PUSH
2192: LD_INT 4
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 1
2203: PPUSH
2204: LD_INT 4
2206: PPUSH
2207: CALL_OW 12
2211: ARRAY
2212: PPUSH
2213: LD_INT 3
2215: PPUSH
2216: LD_INT 5
2218: PPUSH
2219: CALL_OW 12
2223: PPUSH
2224: CALL_OW 380
// un := CreateHuman ;
2228: LD_ADDR_VAR 0 3
2232: PUSH
2233: CALL_OW 44
2237: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2238: LD_ADDR_EXP 12
2242: PUSH
2243: LD_EXP 12
2247: PUSH
2248: LD_VAR 0 3
2252: ADD
2253: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2254: LD_VAR 0 3
2258: PPUSH
2259: LD_VAR 0 4
2263: PUSH
2264: LD_INT 1
2266: ARRAY
2267: PPUSH
2268: CALL_OW 250
2272: PPUSH
2273: LD_VAR 0 4
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: PPUSH
2282: CALL_OW 251
2286: PPUSH
2287: LD_INT 15
2289: PPUSH
2290: LD_INT 0
2292: PPUSH
2293: CALL_OW 50
// end ;
2297: GO 2161
2299: POP
2300: POP
// if deltaDoctor then
2301: LD_EXP 16
2305: IFFALSE 2309
// exit ;
2307: GO 2406
// hc_gallery := Dawkins ;
2309: LD_ADDR_OWVAR 33
2313: PUSH
2314: LD_STRING Dawkins
2316: ST_TO_ADDR
// hc_face_number := 1 ;
2317: LD_ADDR_OWVAR 34
2321: PUSH
2322: LD_INT 1
2324: ST_TO_ADDR
// hc_name := Dr. Adam Charles Dawkins ;
2325: LD_ADDR_OWVAR 26
2329: PUSH
2330: LD_STRING Dr. Adam Charles Dawkins
2332: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 5 ) ;
2333: LD_INT 1
2335: PPUSH
2336: LD_INT 4
2338: PPUSH
2339: LD_INT 5
2341: PPUSH
2342: CALL_OW 380
// deltaDoctor := CreateHuman ;
2346: LD_ADDR_EXP 16
2350: PUSH
2351: CALL_OW 44
2355: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2356: LD_EXP 16
2360: PPUSH
2361: LD_VAR 0 4
2365: PUSH
2366: LD_INT 1
2368: ARRAY
2369: PPUSH
2370: CALL_OW 250
2374: PPUSH
2375: LD_VAR 0 4
2379: PUSH
2380: LD_INT 1
2382: ARRAY
2383: PPUSH
2384: CALL_OW 251
2388: PPUSH
2389: LD_INT 5
2391: PPUSH
2392: LD_INT 0
2394: PPUSH
2395: CALL_OW 50
// ToLua ( enableBioCharacter(BIO_ADAM) ) ;
2399: LD_STRING enableBioCharacter(BIO_ADAM)
2401: PPUSH
2402: CALL_OW 559
// end ; end_of_file
2406: LD_VAR 0 1
2410: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2411: LD_INT 0
2413: PPUSH
2414: PPUSH
2415: PPUSH
2416: PPUSH
2417: PPUSH
2418: PPUSH
2419: PPUSH
// buildings := LoadVariable ( buildingsInDelta , [ ] ) ;
2420: LD_ADDR_VAR 0 5
2424: PUSH
2425: LD_STRING buildingsInDelta
2427: PPUSH
2428: EMPTY
2429: PPUSH
2430: CALL_OW 30
2434: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2435: LD_INT 68
2437: PPUSH
2438: LD_INT 40
2440: PPUSH
2441: LD_INT 1
2443: PPUSH
2444: CALL_OW 441
// uc_side := 1 ;
2448: LD_ADDR_OWVAR 20
2452: PUSH
2453: LD_INT 1
2455: ST_TO_ADDR
// uc_nation := 1 ;
2456: LD_ADDR_OWVAR 21
2460: PUSH
2461: LD_INT 1
2463: ST_TO_ADDR
// for i := 1 to buildings do
2464: LD_ADDR_VAR 0 2
2468: PUSH
2469: DOUBLE
2470: LD_INT 1
2472: DEC
2473: ST_TO_ADDR
2474: LD_VAR 0 5
2478: PUSH
2479: FOR_TO
2480: IFFALSE 2781
// begin InitBc ;
2482: CALL_OW 21
// bc_type := buildings [ i ] [ 1 ] ;
2486: LD_ADDR_OWVAR 42
2490: PUSH
2491: LD_VAR 0 5
2495: PUSH
2496: LD_VAR 0 2
2500: ARRAY
2501: PUSH
2502: LD_INT 1
2504: ARRAY
2505: ST_TO_ADDR
// bc_level := buildings [ i ] [ 2 ] ;
2506: LD_ADDR_OWVAR 43
2510: PUSH
2511: LD_VAR 0 5
2515: PUSH
2516: LD_VAR 0 2
2520: ARRAY
2521: PUSH
2522: LD_INT 2
2524: ARRAY
2525: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half , b_lab_full ] then
2526: LD_OWVAR 42
2530: PUSH
2531: LD_INT 6
2533: PUSH
2534: LD_INT 7
2536: PUSH
2537: LD_INT 8
2539: PUSH
2540: EMPTY
2541: LIST
2542: LIST
2543: LIST
2544: IN
2545: IFFALSE 2669
// begin bc_kind1 := b_lab_basic ;
2547: LD_ADDR_OWVAR 44
2551: PUSH
2552: LD_INT 9
2554: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2555: LD_ADDR_OWVAR 45
2559: PUSH
2560: LD_INT 9
2562: ST_TO_ADDR
// if buildings [ i ] [ 6 ] then
2563: LD_VAR 0 5
2567: PUSH
2568: LD_VAR 0 2
2572: ARRAY
2573: PUSH
2574: LD_INT 6
2576: ARRAY
2577: IFFALSE 2645
// begin bc_kind1 := buildings [ i ] [ 6 ] ;
2579: LD_ADDR_OWVAR 44
2583: PUSH
2584: LD_VAR 0 5
2588: PUSH
2589: LD_VAR 0 2
2593: ARRAY
2594: PUSH
2595: LD_INT 6
2597: ARRAY
2598: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2599: LD_ADDR_OWVAR 45
2603: PUSH
2604: LD_INT 9
2606: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2607: LD_VAR 0 5
2611: PUSH
2612: LD_VAR 0 2
2616: ARRAY
2617: PUSH
2618: LD_INT 7
2620: ARRAY
2621: IFFALSE 2643
// bc_kind2 := buildings [ i ] [ 7 ] ;
2623: LD_ADDR_OWVAR 45
2627: PUSH
2628: LD_VAR 0 5
2632: PUSH
2633: LD_VAR 0 2
2637: ARRAY
2638: PUSH
2639: LD_INT 7
2641: ARRAY
2642: ST_TO_ADDR
// end else
2643: GO 2669
// begin bc_type := b_lab ;
2645: LD_ADDR_OWVAR 42
2649: PUSH
2650: LD_INT 6
2652: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
2653: LD_ADDR_OWVAR 44
2657: PUSH
2658: LD_INT 9
2660: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2661: LD_ADDR_OWVAR 45
2665: PUSH
2666: LD_INT 9
2668: ST_TO_ADDR
// end ; end ; building := CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2669: LD_ADDR_VAR 0 4
2673: PUSH
2674: LD_VAR 0 5
2678: PUSH
2679: LD_VAR 0 2
2683: ARRAY
2684: PUSH
2685: LD_INT 3
2687: ARRAY
2688: PPUSH
2689: LD_VAR 0 5
2693: PUSH
2694: LD_VAR 0 2
2698: ARRAY
2699: PUSH
2700: LD_INT 4
2702: ARRAY
2703: PPUSH
2704: LD_VAR 0 5
2708: PUSH
2709: LD_VAR 0 2
2713: ARRAY
2714: PUSH
2715: LD_INT 5
2717: ARRAY
2718: PPUSH
2719: CALL_OW 47
2723: ST_TO_ADDR
// if GetBType ( building ) = b_bunker and buildings [ i ] [ 8 ] then
2724: LD_VAR 0 4
2728: PPUSH
2729: CALL_OW 266
2733: PUSH
2734: LD_INT 32
2736: EQUAL
2737: PUSH
2738: LD_VAR 0 5
2742: PUSH
2743: LD_VAR 0 2
2747: ARRAY
2748: PUSH
2749: LD_INT 8
2751: ARRAY
2752: AND
2753: IFFALSE 2779
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2755: LD_VAR 0 4
2759: PPUSH
2760: LD_VAR 0 5
2764: PUSH
2765: LD_VAR 0 2
2769: ARRAY
2770: PUSH
2771: LD_INT 8
2773: ARRAY
2774: PPUSH
2775: CALL_OW 431
// end ;
2779: GO 2479
2781: POP
2782: POP
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2783: LD_ADDR_VAR 0 6
2787: PUSH
2788: LD_INT 22
2790: PUSH
2791: LD_INT 1
2793: PUSH
2794: EMPTY
2795: LIST
2796: LIST
2797: PUSH
2798: LD_INT 2
2800: PUSH
2801: LD_INT 30
2803: PUSH
2804: LD_INT 6
2806: PUSH
2807: EMPTY
2808: LIST
2809: LIST
2810: PUSH
2811: LD_INT 30
2813: PUSH
2814: LD_INT 7
2816: PUSH
2817: EMPTY
2818: LIST
2819: LIST
2820: PUSH
2821: LD_INT 30
2823: PUSH
2824: LD_INT 8
2826: PUSH
2827: EMPTY
2828: LIST
2829: LIST
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PPUSH
2841: CALL_OW 69
2845: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2846: LD_ADDR_VAR 0 7
2850: PUSH
2851: LD_INT 22
2853: PUSH
2854: LD_INT 1
2856: PUSH
2857: EMPTY
2858: LIST
2859: LIST
2860: PUSH
2861: LD_INT 30
2863: PUSH
2864: LD_INT 0
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: PUSH
2871: EMPTY
2872: LIST
2873: LIST
2874: PPUSH
2875: CALL_OW 69
2879: ST_TO_ADDR
// if lab and tmp then
2880: LD_VAR 0 6
2884: PUSH
2885: LD_VAR 0 7
2889: AND
2890: IFFALSE 2900
// baseCorrect := 1 ;
2892: LD_ADDR_EXP 19
2896: PUSH
2897: LD_INT 1
2899: ST_TO_ADDR
// if not baseCorrect then
2900: LD_EXP 19
2904: NOT
2905: IFFALSE 3320
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2907: LD_ADDR_VAR 0 2
2911: PUSH
2912: LD_INT 22
2914: PUSH
2915: LD_INT 1
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: PUSH
2922: LD_INT 21
2924: PUSH
2925: LD_INT 3
2927: PUSH
2928: EMPTY
2929: LIST
2930: LIST
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: PPUSH
2936: CALL_OW 69
2940: PUSH
2941: FOR_IN
2942: IFFALSE 2955
// RemoveUnit ( i ) ;
2944: LD_VAR 0 2
2948: PPUSH
2949: CALL_OW 64
2953: GO 2941
2955: POP
2956: POP
// uc_nation := 1 ;
2957: LD_ADDR_OWVAR 21
2961: PUSH
2962: LD_INT 1
2964: ST_TO_ADDR
// uc_side := 1 ;
2965: LD_ADDR_OWVAR 20
2969: PUSH
2970: LD_INT 1
2972: ST_TO_ADDR
// bc_level := 5 ;
2973: LD_ADDR_OWVAR 43
2977: PUSH
2978: LD_INT 5
2980: ST_TO_ADDR
// bc_type := b_depot ;
2981: LD_ADDR_OWVAR 42
2985: PUSH
2986: LD_INT 0
2988: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2989: LD_INT 50
2991: PPUSH
2992: LD_INT 22
2994: PPUSH
2995: LD_INT 0
2997: PPUSH
2998: CALL_OW 47
// bc_type = b_bunker ;
3002: LD_ADDR_OWVAR 42
3006: PUSH
3007: LD_INT 32
3009: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
3010: LD_ADDR_VAR 0 4
3014: PUSH
3015: LD_INT 68
3017: PPUSH
3018: LD_INT 24
3020: PPUSH
3021: LD_INT 4
3023: PPUSH
3024: CALL_OW 47
3028: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
3029: LD_VAR 0 4
3033: PPUSH
3034: LD_INT 4
3036: PUSH
3037: LD_INT 11
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: PUSH
3044: LD_INT 1
3046: PPUSH
3047: LD_INT 2
3049: PPUSH
3050: CALL_OW 12
3054: ARRAY
3055: PPUSH
3056: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
3060: LD_ADDR_VAR 0 4
3064: PUSH
3065: LD_INT 71
3067: PPUSH
3068: LD_INT 34
3070: PPUSH
3071: LD_INT 4
3073: PPUSH
3074: CALL_OW 47
3078: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
3079: LD_VAR 0 4
3083: PPUSH
3084: LD_INT 4
3086: PUSH
3087: LD_INT 11
3089: PUSH
3090: EMPTY
3091: LIST
3092: LIST
3093: PUSH
3094: LD_INT 1
3096: PPUSH
3097: LD_INT 2
3099: PPUSH
3100: CALL_OW 12
3104: ARRAY
3105: PPUSH
3106: CALL_OW 431
// bc_type := b_breastwork ;
3110: LD_ADDR_OWVAR 42
3114: PUSH
3115: LD_INT 31
3117: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
3118: LD_INT 51
3120: PPUSH
3121: LD_INT 7
3123: PPUSH
3124: LD_INT 3
3126: PPUSH
3127: CALL_OW 47
// bc_type := b_oil_mine ;
3131: LD_ADDR_OWVAR 42
3135: PUSH
3136: LD_INT 29
3138: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
3139: LD_INT 68
3141: PPUSH
3142: LD_INT 40
3144: PPUSH
3145: LD_INT 1
3147: PPUSH
3148: CALL_OW 47
// bc_type := b_factory ;
3152: LD_ADDR_OWVAR 42
3156: PUSH
3157: LD_INT 3
3159: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3160: LD_INT 38
3162: PPUSH
3163: LD_INT 20
3165: PPUSH
3166: LD_INT 2
3168: PPUSH
3169: CALL_OW 47
// bc_type := b_ext_noncombat ;
3173: LD_ADDR_OWVAR 42
3177: PUSH
3178: LD_INT 19
3180: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 24 , 2 ) ;
3181: LD_INT 38
3183: PPUSH
3184: LD_INT 24
3186: PPUSH
3187: LD_INT 2
3189: PPUSH
3190: CALL_OW 47
// bc_type := b_ext_radar ;
3194: LD_ADDR_OWVAR 42
3198: PUSH
3199: LD_INT 20
3201: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 35 , 20 , 1 ) ;
3202: LD_INT 35
3204: PPUSH
3205: LD_INT 20
3207: PPUSH
3208: LD_INT 1
3210: PPUSH
3211: CALL_OW 47
// bc_type := b_armoury ;
3215: LD_ADDR_OWVAR 42
3219: PUSH
3220: LD_INT 4
3222: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 33 , 28 , 1 ) ;
3223: LD_INT 33
3225: PPUSH
3226: LD_INT 28
3228: PPUSH
3229: LD_INT 1
3231: PPUSH
3232: CALL_OW 47
// bc_type := b_solar_power ;
3236: LD_ADDR_OWVAR 42
3240: PUSH
3241: LD_INT 27
3243: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3244: LD_INT 46
3246: PPUSH
3247: LD_INT 12
3249: PPUSH
3250: LD_INT 1
3252: PPUSH
3253: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3257: LD_INT 48
3259: PPUSH
3260: LD_INT 11
3262: PPUSH
3263: LD_INT 2
3265: PPUSH
3266: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 35 , 12 , 3 ) ;
3270: LD_INT 35
3272: PPUSH
3273: LD_INT 12
3275: PPUSH
3276: LD_INT 3
3278: PPUSH
3279: CALL_OW 47
// bc_type := b_lab_half ;
3283: LD_ADDR_OWVAR 42
3287: PUSH
3288: LD_INT 7
3290: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
3291: LD_ADDR_OWVAR 44
3295: PUSH
3296: LD_INT 15
3298: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
3299: LD_ADDR_OWVAR 45
3303: PUSH
3304: LD_INT 9
3306: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3307: LD_INT 42
3309: PPUSH
3310: LD_INT 15
3312: PPUSH
3313: LD_INT 2
3315: PPUSH
3316: CALL_OW 47
// end ; end ; end_of_file
3320: LD_VAR 0 1
3324: RET
// export function Action ; var i , j , tmp ; begin
3325: LD_INT 0
3327: PPUSH
3328: PPUSH
3329: PPUSH
3330: PPUSH
// InGameOn ;
3331: CALL_OW 8
// if lab then
3335: LD_EXP 21
3339: IFFALSE 3356
// CenterNowOnUnits ( lab [ 1 ] ) else
3341: LD_EXP 21
3345: PUSH
3346: LD_INT 1
3348: ARRAY
3349: PPUSH
3350: CALL_OW 87
3354: GO 3365
// CenterOnUnits ( JMM ) ;
3356: LD_EXP 1
3360: PPUSH
3361: CALL_OW 85
// if IsOK ( Denis ) then
3365: LD_EXP 3
3369: PPUSH
3370: CALL_OW 302
3374: IFFALSE 3402
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3376: LD_INT 6
3378: PPUSH
3379: LD_INT 1
3381: PPUSH
3382: LD_INT 2
3384: PPUSH
3385: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3389: LD_INT 20
3391: PPUSH
3392: LD_INT 1
3394: PPUSH
3395: LD_INT 1
3397: PPUSH
3398: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3402: LD_EXP 1
3406: PPUSH
3407: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3411: LD_EXP 1
3415: PPUSH
3416: LD_EXP 16
3420: PPUSH
3421: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3425: LD_INT 35
3427: PPUSH
3428: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3432: LD_EXP 16
3436: PPUSH
3437: LD_EXP 1
3441: PPUSH
3442: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3446: LD_EXP 1
3450: PPUSH
3451: LD_EXP 16
3455: PPUSH
3456: CALL_OW 296
3460: PUSH
3461: LD_INT 5
3463: LESS
3464: IFFALSE 3425
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3466: LD_EXP 16
3470: PPUSH
3471: LD_EXP 1
3475: PPUSH
3476: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3480: LD_EXP 1
3484: PPUSH
3485: LD_STRING D1-JMM-1
3487: PPUSH
3488: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3492: LD_EXP 16
3496: PPUSH
3497: LD_STRING D1-Sci-1
3499: PPUSH
3500: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3504: LD_EXP 1
3508: PUSH
3509: LD_EXP 16
3513: PUSH
3514: LD_EXP 3
3518: PUSH
3519: EMPTY
3520: LIST
3521: LIST
3522: LIST
3523: PPUSH
3524: LD_EXP 21
3528: PUSH
3529: LD_INT 1
3531: ARRAY
3532: PPUSH
3533: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
3537: LD_INT 35
3539: PPUSH
3540: CALL_OW 67
// until IsInUnit ( JMM ) and IsInUnit ( DeltaDoctor ) ;
3544: LD_EXP 1
3548: PPUSH
3549: CALL_OW 310
3553: PUSH
3554: LD_EXP 16
3558: PPUSH
3559: CALL_OW 310
3563: AND
3564: IFFALSE 3537
// CenterNowOnUnits ( lab [ 1 ] ) ;
3566: LD_EXP 21
3570: PUSH
3571: LD_INT 1
3573: ARRAY
3574: PPUSH
3575: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3579: LD_EXP 1
3583: PPUSH
3584: LD_STRING D1-JMM-2
3586: PPUSH
3587: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3591: LD_EXP 16
3595: PPUSH
3596: LD_STRING D1-Sci-2
3598: PPUSH
3599: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3603: LD_EXP 1
3607: PPUSH
3608: LD_STRING D1-JMM-3
3610: PPUSH
3611: CALL_OW 88
// if IsOK ( Denis ) then
3615: LD_EXP 3
3619: PPUSH
3620: CALL_OW 302
3624: IFFALSE 3640
// Say ( DeltaDoctor , D1-Sci-3 ) else
3626: LD_EXP 16
3630: PPUSH
3631: LD_STRING D1-Sci-3
3633: PPUSH
3634: CALL_OW 88
3638: GO 3652
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3640: LD_EXP 16
3644: PPUSH
3645: LD_STRING D1-Sci-3a
3647: PPUSH
3648: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3652: LD_EXP 1
3656: PPUSH
3657: LD_STRING D1-JMM-4
3659: PPUSH
3660: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3664: LD_ADDR_VAR 0 4
3668: PUSH
3669: LD_INT 22
3671: PUSH
3672: LD_INT 1
3674: PUSH
3675: EMPTY
3676: LIST
3677: LIST
3678: PUSH
3679: LD_INT 25
3681: PUSH
3682: LD_INT 4
3684: PUSH
3685: EMPTY
3686: LIST
3687: LIST
3688: PUSH
3689: LD_INT 3
3691: PUSH
3692: LD_INT 54
3694: PUSH
3695: EMPTY
3696: LIST
3697: PUSH
3698: EMPTY
3699: LIST
3700: LIST
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: LIST
3706: PPUSH
3707: CALL_OW 69
3711: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3712: LD_ADDR_VAR 0 2
3716: PUSH
3717: LD_INT 22
3719: PUSH
3720: LD_INT 0
3722: PUSH
3723: EMPTY
3724: LIST
3725: LIST
3726: PPUSH
3727: CALL_OW 69
3731: PUSH
3732: FOR_IN
3733: IFFALSE 3783
// for j in tmp do
3735: LD_ADDR_VAR 0 3
3739: PUSH
3740: LD_VAR 0 4
3744: PUSH
3745: FOR_IN
3746: IFFALSE 3779
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3748: LD_VAR 0 3
3752: PPUSH
3753: LD_VAR 0 2
3757: PPUSH
3758: CALL_OW 250
3762: PPUSH
3763: LD_VAR 0 2
3767: PPUSH
3768: CALL_OW 251
3772: PPUSH
3773: CALL_OW 191
3777: GO 3745
3779: POP
3780: POP
3781: GO 3732
3783: POP
3784: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3785: LD_EXP 16
3789: PPUSH
3790: LD_STRING D1-Sci-4
3792: PPUSH
3793: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3797: LD_EXP 1
3801: PPUSH
3802: LD_STRING D1-JMM-5
3804: PPUSH
3805: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3809: LD_EXP 16
3813: PPUSH
3814: LD_STRING D1-Sci-5
3816: PPUSH
3817: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3821: LD_EXP 1
3825: PPUSH
3826: LD_STRING D1-JMM-6
3828: PPUSH
3829: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3833: LD_EXP 17
3837: PPUSH
3838: LD_STRING D1-Har-6
3840: PPUSH
3841: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3845: LD_EXP 1
3849: PPUSH
3850: LD_STRING D1-JMM-7
3852: PPUSH
3853: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3857: LD_EXP 17
3861: PPUSH
3862: LD_STRING D1-Har-7
3864: PPUSH
3865: CALL_OW 94
// if IsOK ( Denis ) then
3869: LD_EXP 3
3873: PPUSH
3874: CALL_OW 302
3878: IFFALSE 3892
// Say ( JMM , D1-JMM-8 ) ;
3880: LD_EXP 1
3884: PPUSH
3885: LD_STRING D1-JMM-8
3887: PPUSH
3888: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3892: LD_EXP 1
3896: PPUSH
3897: LD_STRING D1-JMM-8a
3899: PPUSH
3900: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3904: LD_EXP 17
3908: PPUSH
3909: LD_STRING D1-Har-8
3911: PPUSH
3912: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3916: LD_EXP 1
3920: PPUSH
3921: LD_STRING D1-JMM-9
3923: PPUSH
3924: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3928: LD_EXP 17
3932: PPUSH
3933: LD_STRING D1-Har-9
3935: PPUSH
3936: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3940: LD_EXP 1
3944: PPUSH
3945: LD_STRING D1-JMM-10
3947: PPUSH
3948: CALL_OW 88
// if IsOK ( Denis ) then
3952: LD_EXP 3
3956: PPUSH
3957: CALL_OW 302
3961: IFFALSE 3975
// Say ( JMM , D1-JMM-10a ) ;
3963: LD_EXP 1
3967: PPUSH
3968: LD_STRING D1-JMM-10a
3970: PPUSH
3971: CALL_OW 88
// SelectDeltaCharacters ;
3975: CALL 4459 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 150 ) ;
3979: LD_EXP 21
3983: PUSH
3984: LD_INT 1
3986: ARRAY
3987: PPUSH
3988: CALL_OW 274
3992: PPUSH
3993: LD_INT 1
3995: PPUSH
3996: LD_INT 150
3998: PPUSH
3999: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) then
4003: LD_INT 22
4005: PUSH
4006: LD_INT 1
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: PUSH
4013: LD_INT 30
4015: PUSH
4016: LD_INT 29
4018: PUSH
4019: EMPTY
4020: LIST
4021: LIST
4022: PUSH
4023: EMPTY
4024: LIST
4025: LIST
4026: PPUSH
4027: CALL_OW 69
4031: IFFALSE 4057
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
4033: LD_EXP 21
4037: PUSH
4038: LD_INT 1
4040: ARRAY
4041: PPUSH
4042: CALL_OW 274
4046: PPUSH
4047: LD_INT 2
4049: PPUSH
4050: LD_INT 300
4052: PPUSH
4053: CALL_OW 277
// InGameOff ;
4057: CALL_OW 9
// Query ( Q1 ) ;
4061: LD_STRING Q1
4063: PPUSH
4064: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
4068: LD_INT 3
4070: PPUSH
4071: LD_INT 1
4073: PPUSH
4074: CALL_OW 424
// if IsInUnit ( JMM ) then
4078: LD_EXP 1
4082: PPUSH
4083: CALL_OW 310
4087: IFFALSE 4098
// ComExitBuilding ( JMM ) ;
4089: LD_EXP 1
4093: PPUSH
4094: CALL_OW 122
// end ;
4098: LD_VAR 0 1
4102: RET
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
4103: LD_INT 3
4105: PPUSH
4106: LD_INT 22
4108: PUSH
4109: LD_INT 1
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PUSH
4116: LD_INT 21
4118: PUSH
4119: LD_INT 1
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: PPUSH
4130: CALL_OW 71
4134: PUSH
4135: LD_INT 0
4137: EQUAL
4138: IFFALSE 4456
4140: GO 4142
4142: DISABLE
4143: LD_INT 0
4145: PPUSH
4146: PPUSH
// begin SaveDeltaCharacters ;
4147: CALL 4831 0 0
// if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) then
4151: LD_INT 3
4153: PPUSH
4154: LD_INT 21
4156: PUSH
4157: LD_INT 2
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: PUSH
4164: LD_INT 3
4166: PUSH
4167: LD_INT 58
4169: PUSH
4170: EMPTY
4171: LIST
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: PUSH
4177: EMPTY
4178: LIST
4179: LIST
4180: PPUSH
4181: CALL_OW 70
4185: IFFALSE 4442
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
4187: LD_ADDR_VAR 0 1
4191: PUSH
4192: LD_INT 3
4194: PPUSH
4195: LD_INT 21
4197: PUSH
4198: LD_INT 2
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: PUSH
4205: LD_INT 3
4207: PUSH
4208: LD_INT 58
4210: PUSH
4211: EMPTY
4212: LIST
4213: PUSH
4214: EMPTY
4215: LIST
4216: LIST
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: PPUSH
4222: CALL_OW 70
4226: PUSH
4227: FOR_IN
4228: IFFALSE 4440
// begin cargoType := GetCargoType ( i ) ;
4230: LD_ADDR_VAR 0 2
4234: PUSH
4235: LD_VAR 0 1
4239: PPUSH
4240: CALL_OW 288
4244: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4245: LD_VAR 0 1
4249: PPUSH
4250: CALL_OW 264
4254: PUSH
4255: LD_INT 12
4257: EQUAL
4258: IFFALSE 4355
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] else
4260: LD_ADDR_EXP 15
4264: PUSH
4265: LD_EXP 15
4269: PUSH
4270: LD_VAR 0 1
4274: PPUSH
4275: CALL_OW 248
4279: PUSH
4280: LD_VAR 0 1
4284: PPUSH
4285: CALL_OW 265
4289: PUSH
4290: LD_VAR 0 1
4294: PPUSH
4295: CALL_OW 262
4299: PUSH
4300: LD_VAR 0 1
4304: PPUSH
4305: CALL_OW 263
4309: PUSH
4310: LD_VAR 0 1
4314: PPUSH
4315: CALL_OW 264
4319: PUSH
4320: LD_VAR 0 2
4324: PUSH
4325: LD_VAR 0 1
4329: PPUSH
4330: LD_VAR 0 2
4334: PPUSH
4335: CALL_OW 289
4339: PUSH
4340: EMPTY
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: PUSH
4349: EMPTY
4350: LIST
4351: ADD
4352: ST_TO_ADDR
4353: GO 4426
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4355: LD_ADDR_EXP 15
4359: PUSH
4360: LD_EXP 15
4364: PUSH
4365: LD_VAR 0 1
4369: PPUSH
4370: CALL_OW 248
4374: PUSH
4375: LD_VAR 0 1
4379: PPUSH
4380: CALL_OW 265
4384: PUSH
4385: LD_VAR 0 1
4389: PPUSH
4390: CALL_OW 262
4394: PUSH
4395: LD_VAR 0 1
4399: PPUSH
4400: CALL_OW 263
4404: PUSH
4405: LD_VAR 0 1
4409: PPUSH
4410: CALL_OW 264
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: PUSH
4422: EMPTY
4423: LIST
4424: ADD
4425: ST_TO_ADDR
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4426: LD_EXP 15
4430: PPUSH
4431: LD_STRING 06_VehiclesIn06_1
4433: PPUSH
4434: CALL_OW 39
// end ;
4438: GO 4227
4440: POP
4441: POP
// end ; SaveCargos ;
4442: CALL 5611 0 0
// ChangeMap ( 6 , %_cont ) ;
4446: LD_INT 6
4448: PPUSH
4449: LD_STRING %_cont
4451: PPUSH
4452: CALL_OW 340
// end ; end_of_file
4456: PPOPN 2
4458: END
// export function SelectDeltaCharacters ; var i , yourPeople ; begin
4459: LD_INT 0
4461: PPUSH
4462: PPUSH
4463: PPUSH
// selectedPeople := [ ] ;
4464: LD_ADDR_EXP 18
4468: PUSH
4469: EMPTY
4470: ST_TO_ADDR
// yourPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4471: LD_ADDR_VAR 0 3
4475: PUSH
4476: LD_INT 22
4478: PUSH
4479: LD_INT 1
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: LD_INT 21
4488: PUSH
4489: LD_INT 1
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 2
4498: PUSH
4499: LD_INT 25
4501: PUSH
4502: LD_INT 1
4504: PUSH
4505: EMPTY
4506: LIST
4507: LIST
4508: PUSH
4509: LD_INT 25
4511: PUSH
4512: LD_INT 2
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: PUSH
4519: LD_INT 25
4521: PUSH
4522: LD_INT 3
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: PUSH
4529: LD_INT 25
4531: PUSH
4532: LD_INT 4
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: PUSH
4546: EMPTY
4547: LIST
4548: LIST
4549: LIST
4550: PPUSH
4551: CALL_OW 69
4555: PUSH
4556: LD_EXP 1
4560: PUSH
4561: LD_EXP 16
4565: PUSH
4566: LD_EXP 3
4570: PUSH
4571: EMPTY
4572: LIST
4573: LIST
4574: LIST
4575: DIFF
4576: ST_TO_ADDR
// selectedPeople := CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4577: LD_ADDR_EXP 18
4581: PUSH
4582: LD_STRING text
4584: PPUSH
4585: LD_INT 5
4587: PPUSH
4588: LD_INT 5
4590: PPUSH
4591: LD_INT -5
4593: PUSH
4594: LD_EXP 1
4598: PUSH
4599: LD_INT -6
4601: PUSH
4602: LD_INT -2
4604: PUSH
4605: LD_INT -3
4607: PUSH
4608: LD_INT -5
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: PUSH
4619: LD_VAR 0 3
4623: ADD
4624: PUSH
4625: LD_INT -6
4627: PUSH
4628: LD_INT -4
4630: PUSH
4631: LD_EXP 3
4635: PUSH
4636: LD_EXP 16
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: ADD
4647: PPUSH
4648: LD_INT 1
4650: PUSH
4651: LD_INT 3
4653: PUSH
4654: LD_INT 2
4656: PUSH
4657: LD_INT 1
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: PUSH
4664: LD_INT 4
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: PPUSH
4673: CALL_OW 42
4677: ST_TO_ADDR
// ComStop ( selectedPeople ) ;
4678: LD_EXP 18
4682: PPUSH
4683: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4687: LD_INT 22
4689: PUSH
4690: LD_INT 1
4692: PUSH
4693: EMPTY
4694: LIST
4695: LIST
4696: PUSH
4697: LD_INT 21
4699: PUSH
4700: LD_INT 1
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: PUSH
4707: EMPTY
4708: LIST
4709: LIST
4710: PPUSH
4711: CALL_OW 69
4715: PPUSH
4716: LD_INT 4
4718: PPUSH
4719: CALL_OW 235
// for i in selectedPeople do
4723: LD_ADDR_VAR 0 2
4727: PUSH
4728: LD_EXP 18
4732: PUSH
4733: FOR_IN
4734: IFFALSE 4750
// SetSide ( i , 1 ) ;
4736: LD_VAR 0 2
4740: PPUSH
4741: LD_INT 1
4743: PPUSH
4744: CALL_OW 235
4748: GO 4733
4750: POP
4751: POP
// for i in yourApemans do
4752: LD_ADDR_VAR 0 2
4756: PUSH
4757: LD_EXP 14
4761: PUSH
4762: FOR_IN
4763: IFFALSE 4779
// SetSide ( i , 1 ) ;
4765: LD_VAR 0 2
4769: PPUSH
4770: LD_INT 1
4772: PPUSH
4773: CALL_OW 235
4777: GO 4762
4779: POP
4780: POP
// if Mike then
4781: LD_EXP 10
4785: IFFALSE 4799
// SetSide ( Mike , 1 ) ;
4787: LD_EXP 10
4791: PPUSH
4792: LD_INT 1
4794: PPUSH
4795: CALL_OW 235
// SetSide ( JMM , 1 ) ;
4799: LD_EXP 1
4803: PPUSH
4804: LD_INT 1
4806: PPUSH
4807: CALL_OW 235
// SetSkill ( yourApemans , 2 , 3 ) ;
4811: LD_EXP 14
4815: PPUSH
4816: LD_INT 2
4818: PPUSH
4819: LD_INT 3
4821: PPUSH
4822: CALL_OW 237
// end ;
4826: LD_VAR 0 1
4830: RET
// export function SaveDeltaCharacters ; begin
4831: LD_INT 0
4833: PPUSH
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4834: LD_EXP 1
4838: PPUSH
4839: LD_EXP 23
4843: PUSH
4844: LD_STRING JMM
4846: STR
4847: PPUSH
4848: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4852: LD_EXP 16
4856: PPUSH
4857: LD_STRING DeltaDoctor
4859: PPUSH
4860: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4864: LD_EXP 3
4868: PPUSH
4869: LD_EXP 23
4873: PUSH
4874: LD_STRING Denis
4876: STR
4877: PPUSH
4878: CALL_OW 38
// if Lisa in selectedPeople then
4882: LD_EXP 4
4886: PUSH
4887: LD_EXP 18
4891: IN
4892: IFFALSE 4924
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4894: LD_EXP 4
4898: PPUSH
4899: LD_EXP 23
4903: PUSH
4904: LD_STRING Lisa
4906: STR
4907: PPUSH
4908: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4912: LD_INT 1
4914: PPUSH
4915: LD_STRING LisaIn06
4917: PPUSH
4918: CALL_OW 39
// end else
4922: GO 4945
// if IsOk ( Lisa ) then
4924: LD_EXP 4
4928: PPUSH
4929: CALL_OW 302
4933: IFFALSE 4945
// SaveVariable ( 1 , LisaStayInDelta ) ;
4935: LD_INT 1
4937: PPUSH
4938: LD_STRING LisaStayInDelta
4940: PPUSH
4941: CALL_OW 39
// if Bobby in selectedPeople then
4945: LD_EXP 6
4949: PUSH
4950: LD_EXP 18
4954: IN
4955: IFFALSE 4987
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4957: LD_EXP 6
4961: PPUSH
4962: LD_EXP 23
4966: PUSH
4967: LD_STRING Bobby
4969: STR
4970: PPUSH
4971: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4975: LD_INT 1
4977: PPUSH
4978: LD_STRING BobbyIn06
4980: PPUSH
4981: CALL_OW 39
// end else
4985: GO 5008
// if IsOk ( Bobby ) then
4987: LD_EXP 6
4991: PPUSH
4992: CALL_OW 302
4996: IFFALSE 5008
// SaveVariable ( 1 , BobbyStayInDelta ) ;
4998: LD_INT 1
5000: PPUSH
5001: LD_STRING BobbyStayInDelta
5003: PPUSH
5004: CALL_OW 39
// if Cyrus in selectedPeople then
5008: LD_EXP 7
5012: PUSH
5013: LD_EXP 18
5017: IN
5018: IFFALSE 5050
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5020: LD_EXP 7
5024: PPUSH
5025: LD_EXP 23
5029: PUSH
5030: LD_STRING Cyrus
5032: STR
5033: PPUSH
5034: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
5038: LD_INT 1
5040: PPUSH
5041: LD_STRING CyrusIn06
5043: PPUSH
5044: CALL_OW 39
// end else
5048: GO 5071
// if IsOk ( Cyrus ) then
5050: LD_EXP 7
5054: PPUSH
5055: CALL_OW 302
5059: IFFALSE 5071
// SaveVariable ( 1 , CyrusStayInDelta ) ;
5061: LD_INT 1
5063: PPUSH
5064: LD_STRING CyrusStayInDelta
5066: PPUSH
5067: CALL_OW 39
// if Frank in selectedPeople then
5071: LD_EXP 5
5075: PUSH
5076: LD_EXP 18
5080: IN
5081: IFFALSE 5113
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5083: LD_EXP 5
5087: PPUSH
5088: LD_EXP 23
5092: PUSH
5093: LD_STRING Frank
5095: STR
5096: PPUSH
5097: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
5101: LD_INT 1
5103: PPUSH
5104: LD_STRING FrankIn06
5106: PPUSH
5107: CALL_OW 39
// end else
5111: GO 5134
// if IsOk ( Frank ) then
5113: LD_EXP 5
5117: PPUSH
5118: CALL_OW 302
5122: IFFALSE 5134
// SaveVariable ( 1 , FrankStayInDelta ) ;
5124: LD_INT 1
5126: PPUSH
5127: LD_STRING FrankStayInDelta
5129: PPUSH
5130: CALL_OW 39
// if Brown in selectedPeople then
5134: LD_EXP 8
5138: PUSH
5139: LD_EXP 18
5143: IN
5144: IFFALSE 5176
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5146: LD_EXP 8
5150: PPUSH
5151: LD_EXP 23
5155: PUSH
5156: LD_STRING Brown
5158: STR
5159: PPUSH
5160: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
5164: LD_INT 1
5166: PPUSH
5167: LD_STRING BrownIn06
5169: PPUSH
5170: CALL_OW 39
// end else
5174: GO 5197
// if IsOk ( Brown ) then
5176: LD_EXP 8
5180: PPUSH
5181: CALL_OW 302
5185: IFFALSE 5197
// SaveVariable ( 1 , BrownStayInDelta ) ;
5187: LD_INT 1
5189: PPUSH
5190: LD_STRING BrownStayInDelta
5192: PPUSH
5193: CALL_OW 39
// if Donaldson in selectedPeople then
5197: LD_EXP 9
5201: PUSH
5202: LD_EXP 18
5206: IN
5207: IFFALSE 5239
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5209: LD_EXP 9
5213: PPUSH
5214: LD_EXP 23
5218: PUSH
5219: LD_STRING Donaldson
5221: STR
5222: PPUSH
5223: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5227: LD_INT 1
5229: PPUSH
5230: LD_STRING DonaldsonIn06
5232: PPUSH
5233: CALL_OW 39
// end else
5237: GO 5260
// if IsOk ( Donaldson ) then
5239: LD_EXP 9
5243: PPUSH
5244: CALL_OW 302
5248: IFFALSE 5260
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5250: LD_INT 1
5252: PPUSH
5253: LD_STRING DonaldsonStayInDelta
5255: PPUSH
5256: CALL_OW 39
// if Gladstone in selectedPeople then
5260: LD_EXP 2
5264: PUSH
5265: LD_EXP 18
5269: IN
5270: IFFALSE 5302
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5272: LD_EXP 2
5276: PPUSH
5277: LD_EXP 23
5281: PUSH
5282: LD_STRING Gladstone
5284: STR
5285: PPUSH
5286: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
5290: LD_INT 1
5292: PPUSH
5293: LD_STRING GladstoneIn06
5295: PPUSH
5296: CALL_OW 39
// end else
5300: GO 5323
// if IsOk ( Gladstone ) then
5302: LD_EXP 2
5306: PPUSH
5307: CALL_OW 302
5311: IFFALSE 5323
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5313: LD_INT 1
5315: PPUSH
5316: LD_STRING GladstoneStayInDelta
5318: PPUSH
5319: CALL_OW 39
// if Mike then
5323: LD_EXP 10
5327: IFFALSE 5347
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
5329: LD_EXP 10
5333: PPUSH
5334: LD_EXP 23
5338: PUSH
5339: LD_STRING Mike
5341: STR
5342: PPUSH
5343: CALL_OW 38
// selectedPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ;
5347: LD_ADDR_EXP 18
5351: PUSH
5352: LD_INT 22
5354: PUSH
5355: LD_INT 1
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: PUSH
5362: LD_INT 23
5364: PUSH
5365: LD_INT 1
5367: PUSH
5368: EMPTY
5369: LIST
5370: LIST
5371: PUSH
5372: LD_INT 21
5374: PUSH
5375: LD_INT 1
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: PUSH
5382: EMPTY
5383: LIST
5384: LIST
5385: LIST
5386: PPUSH
5387: CALL_OW 69
5391: ST_TO_ADDR
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5392: LD_EXP 14
5396: PPUSH
5397: LD_STRING ApeIn06
5399: PPUSH
5400: CALL_OW 38
// SaveCharacters ( selectedPeople diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersIn06 ) ;
5404: LD_EXP 18
5408: PUSH
5409: LD_EXP 1
5413: PUSH
5414: LD_EXP 4
5418: PUSH
5419: LD_EXP 6
5423: PUSH
5424: LD_EXP 7
5428: PUSH
5429: LD_EXP 5
5433: PUSH
5434: LD_EXP 8
5438: PUSH
5439: LD_EXP 9
5443: PUSH
5444: LD_EXP 2
5448: PUSH
5449: LD_EXP 3
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: DIFF
5465: PPUSH
5466: LD_STRING OthersIn06
5468: PPUSH
5469: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersStayInDelta ) ;
5473: LD_INT 22
5475: PUSH
5476: LD_INT 4
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: PUSH
5483: LD_INT 2
5485: PUSH
5486: LD_INT 25
5488: PUSH
5489: LD_INT 1
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: PUSH
5496: LD_INT 25
5498: PUSH
5499: LD_INT 2
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: PUSH
5506: LD_INT 25
5508: PUSH
5509: LD_INT 3
5511: PUSH
5512: EMPTY
5513: LIST
5514: LIST
5515: PUSH
5516: LD_INT 25
5518: PUSH
5519: LD_INT 4
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: PUSH
5526: EMPTY
5527: LIST
5528: LIST
5529: LIST
5530: LIST
5531: LIST
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PPUSH
5537: CALL_OW 69
5541: PUSH
5542: LD_EXP 16
5546: PUSH
5547: LD_EXP 4
5551: PUSH
5552: LD_EXP 6
5556: PUSH
5557: LD_EXP 7
5561: PUSH
5562: LD_EXP 5
5566: PUSH
5567: LD_EXP 8
5571: PUSH
5572: LD_EXP 9
5576: PUSH
5577: LD_EXP 2
5581: PUSH
5582: LD_EXP 3
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: LIST
5593: LIST
5594: LIST
5595: LIST
5596: LIST
5597: DIFF
5598: PPUSH
5599: LD_STRING OthersStayInDelta
5601: PPUSH
5602: CALL_OW 38
// end ;
5606: LD_VAR 0 1
5610: RET
// export function SaveCargos ; var i ; begin
5611: LD_INT 0
5613: PPUSH
5614: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
5615: LD_ADDR_VAR 0 2
5619: PUSH
5620: LD_INT 3
5622: PPUSH
5623: LD_INT 22
5625: PUSH
5626: LD_INT 1
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PUSH
5633: LD_INT 34
5635: PUSH
5636: LD_INT 12
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PUSH
5643: EMPTY
5644: LIST
5645: LIST
5646: PPUSH
5647: CALL_OW 70
5651: PUSH
5652: FOR_IN
5653: IFFALSE 5681
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
5655: LD_ADDR_EXP 22
5659: PUSH
5660: LD_EXP 22
5664: PUSH
5665: LD_VAR 0 2
5669: PPUSH
5670: CALL 67862 0 1
5674: PUSH
5675: EMPTY
5676: LIST
5677: ADD
5678: ST_TO_ADDR
5679: GO 5652
5681: POP
5682: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
5683: LD_EXP 22
5687: PPUSH
5688: LD_STRING 06_ResourcesInCargo06_1
5690: PPUSH
5691: CALL_OW 39
// end ; end_of_file
5695: LD_VAR 0 1
5699: RET
// on Command ( comandid ) do var i ;
5700: LD_INT 0
5702: PPUSH
// begin if comandid = 65 then
5703: LD_VAR 0 1
5707: PUSH
5708: LD_INT 65
5710: EQUAL
5711: IFFALSE 5752
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5713: LD_ADDR_VAR 0 2
5717: PUSH
5718: LD_INT 22
5720: PUSH
5721: LD_INT 1
5723: PUSH
5724: EMPTY
5725: LIST
5726: LIST
5727: PUSH
5728: EMPTY
5729: LIST
5730: PPUSH
5731: CALL_OW 69
5735: PUSH
5736: FOR_IN
5737: IFFALSE 5750
// ComStop ( i ) ;
5739: LD_VAR 0 2
5743: PPUSH
5744: CALL_OW 141
5748: GO 5736
5750: POP
5751: POP
// end ;
5752: PPOPN 2
5754: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5755: LD_INT 0
5757: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5758: LD_ADDR_VAR 0 3
5762: PUSH
5763: LD_INT 22
5765: PUSH
5766: LD_INT 1
5768: PUSH
5769: EMPTY
5770: LIST
5771: LIST
5772: PUSH
5773: LD_INT 21
5775: PUSH
5776: LD_INT 3
5778: PUSH
5779: EMPTY
5780: LIST
5781: LIST
5782: PUSH
5783: LD_INT 30
5785: PUSH
5786: LD_INT 0
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: PUSH
5793: EMPTY
5794: LIST
5795: LIST
5796: LIST
5797: PPUSH
5798: CALL_OW 69
5802: ST_TO_ADDR
// if not tmp then
5803: LD_VAR 0 3
5807: NOT
5808: IFFALSE 5812
// exit ;
5810: GO 5842
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5812: LD_VAR 0 1
5816: PPUSH
5817: LD_VAR 0 3
5821: PUSH
5822: LD_INT 1
5824: ARRAY
5825: PPUSH
5826: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5830: LD_VAR 0 1
5834: PPUSH
5835: LD_INT 4
5837: PPUSH
5838: CALL_OW 235
// end ;
5842: PPOPN 3
5844: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5845: LD_VAR 0 1
5849: PUSH
5850: LD_EXP 1
5854: EQUAL
5855: IFFALSE 5864
// YouLost ( JMM ) ;
5857: LD_STRING JMM
5859: PPUSH
5860: CALL_OW 104
// SOS_UnitDestroyed ( un ) ;
5864: LD_VAR 0 1
5868: PPUSH
5869: CALL 21712 0 1
// end ;
5873: PPOPN 1
5875: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5876: LD_VAR 0 1
5880: PPUSH
5881: LD_VAR 0 2
5885: PPUSH
5886: CALL 21832 0 2
// end ; end_of_file
5890: PPOPN 2
5892: END
// export globalGameSaveCounter ; every 0 0$1 do
5893: GO 5895
5895: DISABLE
// begin enable ;
5896: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5897: LD_STRING updateTimer(
5899: PUSH
5900: LD_OWVAR 1
5904: STR
5905: PUSH
5906: LD_STRING );
5908: STR
5909: PPUSH
5910: CALL_OW 559
// end ;
5914: END
// every 0 0$1 do
5915: GO 5917
5917: DISABLE
// begin globalGameSaveCounter := 0 ;
5918: LD_ADDR_EXP 25
5922: PUSH
5923: LD_INT 0
5925: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
5926: LD_STRING setGameSaveCounter(0)
5928: PPUSH
5929: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
5933: LD_STRING initStreamRollete();
5935: PPUSH
5936: CALL_OW 559
// InitStreamMode ;
5940: CALL 7283 0 0
// DefineStreamItems ( false ) ;
5944: LD_INT 0
5946: PPUSH
5947: CALL 7747 0 1
// end ;
5951: END
// export function SOS_MapStart ( ) ; begin
5952: LD_INT 0
5954: PPUSH
// if streamModeActive then
5955: LD_EXP 26
5959: IFFALSE 5968
// DefineStreamItems ( true ) ;
5961: LD_INT 1
5963: PPUSH
5964: CALL 7747 0 1
// UpdateLuaVariables ( ) ;
5968: CALL 5985 0 0
// UpdateFactoryWaypoints ( ) ;
5972: CALL 20616 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5976: CALL 20873 0 0
// end ;
5980: LD_VAR 0 1
5984: RET
// function UpdateLuaVariables ( ) ; begin
5985: LD_INT 0
5987: PPUSH
// if globalGameSaveCounter then
5988: LD_EXP 25
5992: IFFALSE 6026
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
5994: LD_ADDR_EXP 25
5998: PUSH
5999: LD_EXP 25
6003: PPUSH
6004: CALL 65658 0 1
6008: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
6009: LD_STRING setGameSaveCounter(
6011: PUSH
6012: LD_EXP 25
6016: STR
6017: PUSH
6018: LD_STRING )
6020: STR
6021: PPUSH
6022: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
6026: LD_STRING setGameDifficulty(
6028: PUSH
6029: LD_OWVAR 67
6033: STR
6034: PUSH
6035: LD_STRING )
6037: STR
6038: PPUSH
6039: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
6043: LD_STRING displayDifficulty(
6045: PUSH
6046: LD_OWVAR 67
6050: STR
6051: PUSH
6052: LD_STRING )
6054: STR
6055: PPUSH
6056: CALL_OW 559
// end ;
6060: LD_VAR 0 1
6064: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
6065: LD_INT 0
6067: PPUSH
// if p2 = stream_mode then
6068: LD_VAR 0 2
6072: PUSH
6073: LD_INT 100
6075: EQUAL
6076: IFFALSE 7079
// begin if not StreamModeActive then
6078: LD_EXP 26
6082: NOT
6083: IFFALSE 6093
// StreamModeActive := true ;
6085: LD_ADDR_EXP 26
6089: PUSH
6090: LD_INT 1
6092: ST_TO_ADDR
// if p3 = 0 then
6093: LD_VAR 0 3
6097: PUSH
6098: LD_INT 0
6100: EQUAL
6101: IFFALSE 6107
// InitStreamMode ;
6103: CALL 7283 0 0
// if p3 = 1 then
6107: LD_VAR 0 3
6111: PUSH
6112: LD_INT 1
6114: EQUAL
6115: IFFALSE 6125
// sRocket := true ;
6117: LD_ADDR_EXP 31
6121: PUSH
6122: LD_INT 1
6124: ST_TO_ADDR
// if p3 = 2 then
6125: LD_VAR 0 3
6129: PUSH
6130: LD_INT 2
6132: EQUAL
6133: IFFALSE 6143
// sSpeed := true ;
6135: LD_ADDR_EXP 30
6139: PUSH
6140: LD_INT 1
6142: ST_TO_ADDR
// if p3 = 3 then
6143: LD_VAR 0 3
6147: PUSH
6148: LD_INT 3
6150: EQUAL
6151: IFFALSE 6161
// sEngine := true ;
6153: LD_ADDR_EXP 32
6157: PUSH
6158: LD_INT 1
6160: ST_TO_ADDR
// if p3 = 4 then
6161: LD_VAR 0 3
6165: PUSH
6166: LD_INT 4
6168: EQUAL
6169: IFFALSE 6179
// sSpec := true ;
6171: LD_ADDR_EXP 29
6175: PUSH
6176: LD_INT 1
6178: ST_TO_ADDR
// if p3 = 5 then
6179: LD_VAR 0 3
6183: PUSH
6184: LD_INT 5
6186: EQUAL
6187: IFFALSE 6197
// sLevel := true ;
6189: LD_ADDR_EXP 33
6193: PUSH
6194: LD_INT 1
6196: ST_TO_ADDR
// if p3 = 6 then
6197: LD_VAR 0 3
6201: PUSH
6202: LD_INT 6
6204: EQUAL
6205: IFFALSE 6215
// sArmoury := true ;
6207: LD_ADDR_EXP 34
6211: PUSH
6212: LD_INT 1
6214: ST_TO_ADDR
// if p3 = 7 then
6215: LD_VAR 0 3
6219: PUSH
6220: LD_INT 7
6222: EQUAL
6223: IFFALSE 6233
// sRadar := true ;
6225: LD_ADDR_EXP 35
6229: PUSH
6230: LD_INT 1
6232: ST_TO_ADDR
// if p3 = 8 then
6233: LD_VAR 0 3
6237: PUSH
6238: LD_INT 8
6240: EQUAL
6241: IFFALSE 6251
// sBunker := true ;
6243: LD_ADDR_EXP 36
6247: PUSH
6248: LD_INT 1
6250: ST_TO_ADDR
// if p3 = 9 then
6251: LD_VAR 0 3
6255: PUSH
6256: LD_INT 9
6258: EQUAL
6259: IFFALSE 6269
// sHack := true ;
6261: LD_ADDR_EXP 37
6265: PUSH
6266: LD_INT 1
6268: ST_TO_ADDR
// if p3 = 10 then
6269: LD_VAR 0 3
6273: PUSH
6274: LD_INT 10
6276: EQUAL
6277: IFFALSE 6287
// sFire := true ;
6279: LD_ADDR_EXP 38
6283: PUSH
6284: LD_INT 1
6286: ST_TO_ADDR
// if p3 = 11 then
6287: LD_VAR 0 3
6291: PUSH
6292: LD_INT 11
6294: EQUAL
6295: IFFALSE 6305
// sRefresh := true ;
6297: LD_ADDR_EXP 39
6301: PUSH
6302: LD_INT 1
6304: ST_TO_ADDR
// if p3 = 12 then
6305: LD_VAR 0 3
6309: PUSH
6310: LD_INT 12
6312: EQUAL
6313: IFFALSE 6323
// sExp := true ;
6315: LD_ADDR_EXP 40
6319: PUSH
6320: LD_INT 1
6322: ST_TO_ADDR
// if p3 = 13 then
6323: LD_VAR 0 3
6327: PUSH
6328: LD_INT 13
6330: EQUAL
6331: IFFALSE 6341
// sDepot := true ;
6333: LD_ADDR_EXP 41
6337: PUSH
6338: LD_INT 1
6340: ST_TO_ADDR
// if p3 = 14 then
6341: LD_VAR 0 3
6345: PUSH
6346: LD_INT 14
6348: EQUAL
6349: IFFALSE 6359
// sFlag := true ;
6351: LD_ADDR_EXP 42
6355: PUSH
6356: LD_INT 1
6358: ST_TO_ADDR
// if p3 = 15 then
6359: LD_VAR 0 3
6363: PUSH
6364: LD_INT 15
6366: EQUAL
6367: IFFALSE 6377
// sKamikadze := true ;
6369: LD_ADDR_EXP 50
6373: PUSH
6374: LD_INT 1
6376: ST_TO_ADDR
// if p3 = 16 then
6377: LD_VAR 0 3
6381: PUSH
6382: LD_INT 16
6384: EQUAL
6385: IFFALSE 6395
// sTroll := true ;
6387: LD_ADDR_EXP 51
6391: PUSH
6392: LD_INT 1
6394: ST_TO_ADDR
// if p3 = 17 then
6395: LD_VAR 0 3
6399: PUSH
6400: LD_INT 17
6402: EQUAL
6403: IFFALSE 6413
// sSlow := true ;
6405: LD_ADDR_EXP 52
6409: PUSH
6410: LD_INT 1
6412: ST_TO_ADDR
// if p3 = 18 then
6413: LD_VAR 0 3
6417: PUSH
6418: LD_INT 18
6420: EQUAL
6421: IFFALSE 6431
// sLack := true ;
6423: LD_ADDR_EXP 53
6427: PUSH
6428: LD_INT 1
6430: ST_TO_ADDR
// if p3 = 19 then
6431: LD_VAR 0 3
6435: PUSH
6436: LD_INT 19
6438: EQUAL
6439: IFFALSE 6449
// sTank := true ;
6441: LD_ADDR_EXP 55
6445: PUSH
6446: LD_INT 1
6448: ST_TO_ADDR
// if p3 = 20 then
6449: LD_VAR 0 3
6453: PUSH
6454: LD_INT 20
6456: EQUAL
6457: IFFALSE 6467
// sRemote := true ;
6459: LD_ADDR_EXP 56
6463: PUSH
6464: LD_INT 1
6466: ST_TO_ADDR
// if p3 = 21 then
6467: LD_VAR 0 3
6471: PUSH
6472: LD_INT 21
6474: EQUAL
6475: IFFALSE 6485
// sPowell := true ;
6477: LD_ADDR_EXP 57
6481: PUSH
6482: LD_INT 1
6484: ST_TO_ADDR
// if p3 = 22 then
6485: LD_VAR 0 3
6489: PUSH
6490: LD_INT 22
6492: EQUAL
6493: IFFALSE 6503
// sTeleport := true ;
6495: LD_ADDR_EXP 60
6499: PUSH
6500: LD_INT 1
6502: ST_TO_ADDR
// if p3 = 23 then
6503: LD_VAR 0 3
6507: PUSH
6508: LD_INT 23
6510: EQUAL
6511: IFFALSE 6521
// sOilTower := true ;
6513: LD_ADDR_EXP 62
6517: PUSH
6518: LD_INT 1
6520: ST_TO_ADDR
// if p3 = 24 then
6521: LD_VAR 0 3
6525: PUSH
6526: LD_INT 24
6528: EQUAL
6529: IFFALSE 6539
// sShovel := true ;
6531: LD_ADDR_EXP 63
6535: PUSH
6536: LD_INT 1
6538: ST_TO_ADDR
// if p3 = 25 then
6539: LD_VAR 0 3
6543: PUSH
6544: LD_INT 25
6546: EQUAL
6547: IFFALSE 6557
// sSheik := true ;
6549: LD_ADDR_EXP 64
6553: PUSH
6554: LD_INT 1
6556: ST_TO_ADDR
// if p3 = 26 then
6557: LD_VAR 0 3
6561: PUSH
6562: LD_INT 26
6564: EQUAL
6565: IFFALSE 6575
// sEarthquake := true ;
6567: LD_ADDR_EXP 66
6571: PUSH
6572: LD_INT 1
6574: ST_TO_ADDR
// if p3 = 27 then
6575: LD_VAR 0 3
6579: PUSH
6580: LD_INT 27
6582: EQUAL
6583: IFFALSE 6593
// sAI := true ;
6585: LD_ADDR_EXP 67
6589: PUSH
6590: LD_INT 1
6592: ST_TO_ADDR
// if p3 = 28 then
6593: LD_VAR 0 3
6597: PUSH
6598: LD_INT 28
6600: EQUAL
6601: IFFALSE 6611
// sCargo := true ;
6603: LD_ADDR_EXP 70
6607: PUSH
6608: LD_INT 1
6610: ST_TO_ADDR
// if p3 = 29 then
6611: LD_VAR 0 3
6615: PUSH
6616: LD_INT 29
6618: EQUAL
6619: IFFALSE 6629
// sDLaser := true ;
6621: LD_ADDR_EXP 71
6625: PUSH
6626: LD_INT 1
6628: ST_TO_ADDR
// if p3 = 30 then
6629: LD_VAR 0 3
6633: PUSH
6634: LD_INT 30
6636: EQUAL
6637: IFFALSE 6647
// sExchange := true ;
6639: LD_ADDR_EXP 72
6643: PUSH
6644: LD_INT 1
6646: ST_TO_ADDR
// if p3 = 31 then
6647: LD_VAR 0 3
6651: PUSH
6652: LD_INT 31
6654: EQUAL
6655: IFFALSE 6665
// sFac := true ;
6657: LD_ADDR_EXP 73
6661: PUSH
6662: LD_INT 1
6664: ST_TO_ADDR
// if p3 = 32 then
6665: LD_VAR 0 3
6669: PUSH
6670: LD_INT 32
6672: EQUAL
6673: IFFALSE 6683
// sPower := true ;
6675: LD_ADDR_EXP 74
6679: PUSH
6680: LD_INT 1
6682: ST_TO_ADDR
// if p3 = 33 then
6683: LD_VAR 0 3
6687: PUSH
6688: LD_INT 33
6690: EQUAL
6691: IFFALSE 6701
// sRandom := true ;
6693: LD_ADDR_EXP 75
6697: PUSH
6698: LD_INT 1
6700: ST_TO_ADDR
// if p3 = 34 then
6701: LD_VAR 0 3
6705: PUSH
6706: LD_INT 34
6708: EQUAL
6709: IFFALSE 6719
// sShield := true ;
6711: LD_ADDR_EXP 76
6715: PUSH
6716: LD_INT 1
6718: ST_TO_ADDR
// if p3 = 35 then
6719: LD_VAR 0 3
6723: PUSH
6724: LD_INT 35
6726: EQUAL
6727: IFFALSE 6737
// sTime := true ;
6729: LD_ADDR_EXP 77
6733: PUSH
6734: LD_INT 1
6736: ST_TO_ADDR
// if p3 = 36 then
6737: LD_VAR 0 3
6741: PUSH
6742: LD_INT 36
6744: EQUAL
6745: IFFALSE 6755
// sTools := true ;
6747: LD_ADDR_EXP 78
6751: PUSH
6752: LD_INT 1
6754: ST_TO_ADDR
// if p3 = 101 then
6755: LD_VAR 0 3
6759: PUSH
6760: LD_INT 101
6762: EQUAL
6763: IFFALSE 6773
// sSold := true ;
6765: LD_ADDR_EXP 43
6769: PUSH
6770: LD_INT 1
6772: ST_TO_ADDR
// if p3 = 102 then
6773: LD_VAR 0 3
6777: PUSH
6778: LD_INT 102
6780: EQUAL
6781: IFFALSE 6791
// sDiff := true ;
6783: LD_ADDR_EXP 44
6787: PUSH
6788: LD_INT 1
6790: ST_TO_ADDR
// if p3 = 103 then
6791: LD_VAR 0 3
6795: PUSH
6796: LD_INT 103
6798: EQUAL
6799: IFFALSE 6809
// sFog := true ;
6801: LD_ADDR_EXP 47
6805: PUSH
6806: LD_INT 1
6808: ST_TO_ADDR
// if p3 = 104 then
6809: LD_VAR 0 3
6813: PUSH
6814: LD_INT 104
6816: EQUAL
6817: IFFALSE 6827
// sReset := true ;
6819: LD_ADDR_EXP 48
6823: PUSH
6824: LD_INT 1
6826: ST_TO_ADDR
// if p3 = 105 then
6827: LD_VAR 0 3
6831: PUSH
6832: LD_INT 105
6834: EQUAL
6835: IFFALSE 6845
// sSun := true ;
6837: LD_ADDR_EXP 49
6841: PUSH
6842: LD_INT 1
6844: ST_TO_ADDR
// if p3 = 106 then
6845: LD_VAR 0 3
6849: PUSH
6850: LD_INT 106
6852: EQUAL
6853: IFFALSE 6863
// sTiger := true ;
6855: LD_ADDR_EXP 45
6859: PUSH
6860: LD_INT 1
6862: ST_TO_ADDR
// if p3 = 107 then
6863: LD_VAR 0 3
6867: PUSH
6868: LD_INT 107
6870: EQUAL
6871: IFFALSE 6881
// sBomb := true ;
6873: LD_ADDR_EXP 46
6877: PUSH
6878: LD_INT 1
6880: ST_TO_ADDR
// if p3 = 108 then
6881: LD_VAR 0 3
6885: PUSH
6886: LD_INT 108
6888: EQUAL
6889: IFFALSE 6899
// sWound := true ;
6891: LD_ADDR_EXP 54
6895: PUSH
6896: LD_INT 1
6898: ST_TO_ADDR
// if p3 = 109 then
6899: LD_VAR 0 3
6903: PUSH
6904: LD_INT 109
6906: EQUAL
6907: IFFALSE 6917
// sBetray := true ;
6909: LD_ADDR_EXP 58
6913: PUSH
6914: LD_INT 1
6916: ST_TO_ADDR
// if p3 = 110 then
6917: LD_VAR 0 3
6921: PUSH
6922: LD_INT 110
6924: EQUAL
6925: IFFALSE 6935
// sContamin := true ;
6927: LD_ADDR_EXP 59
6931: PUSH
6932: LD_INT 1
6934: ST_TO_ADDR
// if p3 = 111 then
6935: LD_VAR 0 3
6939: PUSH
6940: LD_INT 111
6942: EQUAL
6943: IFFALSE 6953
// sOil := true ;
6945: LD_ADDR_EXP 61
6949: PUSH
6950: LD_INT 1
6952: ST_TO_ADDR
// if p3 = 112 then
6953: LD_VAR 0 3
6957: PUSH
6958: LD_INT 112
6960: EQUAL
6961: IFFALSE 6971
// sStu := true ;
6963: LD_ADDR_EXP 65
6967: PUSH
6968: LD_INT 1
6970: ST_TO_ADDR
// if p3 = 113 then
6971: LD_VAR 0 3
6975: PUSH
6976: LD_INT 113
6978: EQUAL
6979: IFFALSE 6989
// sBazooka := true ;
6981: LD_ADDR_EXP 68
6985: PUSH
6986: LD_INT 1
6988: ST_TO_ADDR
// if p3 = 114 then
6989: LD_VAR 0 3
6993: PUSH
6994: LD_INT 114
6996: EQUAL
6997: IFFALSE 7007
// sMortar := true ;
6999: LD_ADDR_EXP 69
7003: PUSH
7004: LD_INT 1
7006: ST_TO_ADDR
// if p3 = 115 then
7007: LD_VAR 0 3
7011: PUSH
7012: LD_INT 115
7014: EQUAL
7015: IFFALSE 7025
// sRanger := true ;
7017: LD_ADDR_EXP 79
7021: PUSH
7022: LD_INT 1
7024: ST_TO_ADDR
// if p3 = 116 then
7025: LD_VAR 0 3
7029: PUSH
7030: LD_INT 116
7032: EQUAL
7033: IFFALSE 7043
// sComputer := true ;
7035: LD_ADDR_EXP 80
7039: PUSH
7040: LD_INT 1
7042: ST_TO_ADDR
// if p3 = 117 then
7043: LD_VAR 0 3
7047: PUSH
7048: LD_INT 117
7050: EQUAL
7051: IFFALSE 7061
// s30 := true ;
7053: LD_ADDR_EXP 81
7057: PUSH
7058: LD_INT 1
7060: ST_TO_ADDR
// if p3 = 118 then
7061: LD_VAR 0 3
7065: PUSH
7066: LD_INT 118
7068: EQUAL
7069: IFFALSE 7079
// s60 := true ;
7071: LD_ADDR_EXP 82
7075: PUSH
7076: LD_INT 1
7078: ST_TO_ADDR
// end ; if p2 = hack_mode then
7079: LD_VAR 0 2
7083: PUSH
7084: LD_INT 101
7086: EQUAL
7087: IFFALSE 7215
// begin case p3 of 1 :
7089: LD_VAR 0 3
7093: PUSH
7094: LD_INT 1
7096: DOUBLE
7097: EQUAL
7098: IFTRUE 7102
7100: GO 7109
7102: POP
// hHackUnlimitedResources ; 2 :
7103: CALL 19362 0 0
7107: GO 7215
7109: LD_INT 2
7111: DOUBLE
7112: EQUAL
7113: IFTRUE 7117
7115: GO 7124
7117: POP
// hHackSetLevel10 ; 3 :
7118: CALL 19495 0 0
7122: GO 7215
7124: LD_INT 3
7126: DOUBLE
7127: EQUAL
7128: IFTRUE 7132
7130: GO 7139
7132: POP
// hHackSetLevel10YourUnits ; 4 :
7133: CALL 19580 0 0
7137: GO 7215
7139: LD_INT 4
7141: DOUBLE
7142: EQUAL
7143: IFTRUE 7147
7145: GO 7154
7147: POP
// hHackInvincible ; 5 :
7148: CALL 20028 0 0
7152: GO 7215
7154: LD_INT 5
7156: DOUBLE
7157: EQUAL
7158: IFTRUE 7162
7160: GO 7169
7162: POP
// hHackInvisible ; 6 :
7163: CALL 20139 0 0
7167: GO 7215
7169: LD_INT 6
7171: DOUBLE
7172: EQUAL
7173: IFTRUE 7177
7175: GO 7184
7177: POP
// hHackChangeYourSide ; 7 :
7178: CALL 20196 0 0
7182: GO 7215
7184: LD_INT 7
7186: DOUBLE
7187: EQUAL
7188: IFTRUE 7192
7190: GO 7199
7192: POP
// hHackChangeUnitSide ; 8 :
7193: CALL 20238 0 0
7197: GO 7215
7199: LD_INT 8
7201: DOUBLE
7202: EQUAL
7203: IFTRUE 7207
7205: GO 7214
7207: POP
// hHackFog ; end ;
7208: CALL 20339 0 0
7212: GO 7215
7214: POP
// end ; if p2 = game_save_mode then
7215: LD_VAR 0 2
7219: PUSH
7220: LD_INT 102
7222: EQUAL
7223: IFFALSE 7278
// begin if p3 = 1 then
7225: LD_VAR 0 3
7229: PUSH
7230: LD_INT 1
7232: EQUAL
7233: IFFALSE 7245
// globalGameSaveCounter := p4 ;
7235: LD_ADDR_EXP 25
7239: PUSH
7240: LD_VAR 0 4
7244: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
7245: LD_VAR 0 3
7249: PUSH
7250: LD_INT 2
7252: EQUAL
7253: PUSH
7254: LD_EXP 25
7258: AND
7259: IFFALSE 7278
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7261: LD_STRING setGameSaveCounter(
7263: PUSH
7264: LD_EXP 25
7268: STR
7269: PUSH
7270: LD_STRING )
7272: STR
7273: PPUSH
7274: CALL_OW 559
// end ; end ;
7278: LD_VAR 0 7
7282: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
7283: LD_INT 0
7285: PPUSH
// streamModeActive := false ;
7286: LD_ADDR_EXP 26
7290: PUSH
7291: LD_INT 0
7293: ST_TO_ADDR
// normalCounter := 36 ;
7294: LD_ADDR_EXP 27
7298: PUSH
7299: LD_INT 36
7301: ST_TO_ADDR
// hardcoreCounter := 18 ;
7302: LD_ADDR_EXP 28
7306: PUSH
7307: LD_INT 18
7309: ST_TO_ADDR
// sRocket := false ;
7310: LD_ADDR_EXP 31
7314: PUSH
7315: LD_INT 0
7317: ST_TO_ADDR
// sSpeed := false ;
7318: LD_ADDR_EXP 30
7322: PUSH
7323: LD_INT 0
7325: ST_TO_ADDR
// sEngine := false ;
7326: LD_ADDR_EXP 32
7330: PUSH
7331: LD_INT 0
7333: ST_TO_ADDR
// sSpec := false ;
7334: LD_ADDR_EXP 29
7338: PUSH
7339: LD_INT 0
7341: ST_TO_ADDR
// sLevel := false ;
7342: LD_ADDR_EXP 33
7346: PUSH
7347: LD_INT 0
7349: ST_TO_ADDR
// sArmoury := false ;
7350: LD_ADDR_EXP 34
7354: PUSH
7355: LD_INT 0
7357: ST_TO_ADDR
// sRadar := false ;
7358: LD_ADDR_EXP 35
7362: PUSH
7363: LD_INT 0
7365: ST_TO_ADDR
// sBunker := false ;
7366: LD_ADDR_EXP 36
7370: PUSH
7371: LD_INT 0
7373: ST_TO_ADDR
// sHack := false ;
7374: LD_ADDR_EXP 37
7378: PUSH
7379: LD_INT 0
7381: ST_TO_ADDR
// sFire := false ;
7382: LD_ADDR_EXP 38
7386: PUSH
7387: LD_INT 0
7389: ST_TO_ADDR
// sRefresh := false ;
7390: LD_ADDR_EXP 39
7394: PUSH
7395: LD_INT 0
7397: ST_TO_ADDR
// sExp := false ;
7398: LD_ADDR_EXP 40
7402: PUSH
7403: LD_INT 0
7405: ST_TO_ADDR
// sDepot := false ;
7406: LD_ADDR_EXP 41
7410: PUSH
7411: LD_INT 0
7413: ST_TO_ADDR
// sFlag := false ;
7414: LD_ADDR_EXP 42
7418: PUSH
7419: LD_INT 0
7421: ST_TO_ADDR
// sKamikadze := false ;
7422: LD_ADDR_EXP 50
7426: PUSH
7427: LD_INT 0
7429: ST_TO_ADDR
// sTroll := false ;
7430: LD_ADDR_EXP 51
7434: PUSH
7435: LD_INT 0
7437: ST_TO_ADDR
// sSlow := false ;
7438: LD_ADDR_EXP 52
7442: PUSH
7443: LD_INT 0
7445: ST_TO_ADDR
// sLack := false ;
7446: LD_ADDR_EXP 53
7450: PUSH
7451: LD_INT 0
7453: ST_TO_ADDR
// sTank := false ;
7454: LD_ADDR_EXP 55
7458: PUSH
7459: LD_INT 0
7461: ST_TO_ADDR
// sRemote := false ;
7462: LD_ADDR_EXP 56
7466: PUSH
7467: LD_INT 0
7469: ST_TO_ADDR
// sPowell := false ;
7470: LD_ADDR_EXP 57
7474: PUSH
7475: LD_INT 0
7477: ST_TO_ADDR
// sTeleport := false ;
7478: LD_ADDR_EXP 60
7482: PUSH
7483: LD_INT 0
7485: ST_TO_ADDR
// sOilTower := false ;
7486: LD_ADDR_EXP 62
7490: PUSH
7491: LD_INT 0
7493: ST_TO_ADDR
// sShovel := false ;
7494: LD_ADDR_EXP 63
7498: PUSH
7499: LD_INT 0
7501: ST_TO_ADDR
// sSheik := false ;
7502: LD_ADDR_EXP 64
7506: PUSH
7507: LD_INT 0
7509: ST_TO_ADDR
// sEarthquake := false ;
7510: LD_ADDR_EXP 66
7514: PUSH
7515: LD_INT 0
7517: ST_TO_ADDR
// sAI := false ;
7518: LD_ADDR_EXP 67
7522: PUSH
7523: LD_INT 0
7525: ST_TO_ADDR
// sCargo := false ;
7526: LD_ADDR_EXP 70
7530: PUSH
7531: LD_INT 0
7533: ST_TO_ADDR
// sDLaser := false ;
7534: LD_ADDR_EXP 71
7538: PUSH
7539: LD_INT 0
7541: ST_TO_ADDR
// sExchange := false ;
7542: LD_ADDR_EXP 72
7546: PUSH
7547: LD_INT 0
7549: ST_TO_ADDR
// sFac := false ;
7550: LD_ADDR_EXP 73
7554: PUSH
7555: LD_INT 0
7557: ST_TO_ADDR
// sPower := false ;
7558: LD_ADDR_EXP 74
7562: PUSH
7563: LD_INT 0
7565: ST_TO_ADDR
// sRandom := false ;
7566: LD_ADDR_EXP 75
7570: PUSH
7571: LD_INT 0
7573: ST_TO_ADDR
// sShield := false ;
7574: LD_ADDR_EXP 76
7578: PUSH
7579: LD_INT 0
7581: ST_TO_ADDR
// sTime := false ;
7582: LD_ADDR_EXP 77
7586: PUSH
7587: LD_INT 0
7589: ST_TO_ADDR
// sTools := false ;
7590: LD_ADDR_EXP 78
7594: PUSH
7595: LD_INT 0
7597: ST_TO_ADDR
// sSold := false ;
7598: LD_ADDR_EXP 43
7602: PUSH
7603: LD_INT 0
7605: ST_TO_ADDR
// sDiff := false ;
7606: LD_ADDR_EXP 44
7610: PUSH
7611: LD_INT 0
7613: ST_TO_ADDR
// sFog := false ;
7614: LD_ADDR_EXP 47
7618: PUSH
7619: LD_INT 0
7621: ST_TO_ADDR
// sReset := false ;
7622: LD_ADDR_EXP 48
7626: PUSH
7627: LD_INT 0
7629: ST_TO_ADDR
// sSun := false ;
7630: LD_ADDR_EXP 49
7634: PUSH
7635: LD_INT 0
7637: ST_TO_ADDR
// sTiger := false ;
7638: LD_ADDR_EXP 45
7642: PUSH
7643: LD_INT 0
7645: ST_TO_ADDR
// sBomb := false ;
7646: LD_ADDR_EXP 46
7650: PUSH
7651: LD_INT 0
7653: ST_TO_ADDR
// sWound := false ;
7654: LD_ADDR_EXP 54
7658: PUSH
7659: LD_INT 0
7661: ST_TO_ADDR
// sBetray := false ;
7662: LD_ADDR_EXP 58
7666: PUSH
7667: LD_INT 0
7669: ST_TO_ADDR
// sContamin := false ;
7670: LD_ADDR_EXP 59
7674: PUSH
7675: LD_INT 0
7677: ST_TO_ADDR
// sOil := false ;
7678: LD_ADDR_EXP 61
7682: PUSH
7683: LD_INT 0
7685: ST_TO_ADDR
// sStu := false ;
7686: LD_ADDR_EXP 65
7690: PUSH
7691: LD_INT 0
7693: ST_TO_ADDR
// sBazooka := false ;
7694: LD_ADDR_EXP 68
7698: PUSH
7699: LD_INT 0
7701: ST_TO_ADDR
// sMortar := false ;
7702: LD_ADDR_EXP 69
7706: PUSH
7707: LD_INT 0
7709: ST_TO_ADDR
// sRanger := false ;
7710: LD_ADDR_EXP 79
7714: PUSH
7715: LD_INT 0
7717: ST_TO_ADDR
// sComputer := false ;
7718: LD_ADDR_EXP 80
7722: PUSH
7723: LD_INT 0
7725: ST_TO_ADDR
// s30 := false ;
7726: LD_ADDR_EXP 81
7730: PUSH
7731: LD_INT 0
7733: ST_TO_ADDR
// s60 := false ;
7734: LD_ADDR_EXP 82
7738: PUSH
7739: LD_INT 0
7741: ST_TO_ADDR
// end ;
7742: LD_VAR 0 1
7746: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7747: LD_INT 0
7749: PPUSH
7750: PPUSH
7751: PPUSH
7752: PPUSH
7753: PPUSH
7754: PPUSH
7755: PPUSH
// result := [ ] ;
7756: LD_ADDR_VAR 0 2
7760: PUSH
7761: EMPTY
7762: ST_TO_ADDR
// if campaign_id = 1 then
7763: LD_OWVAR 69
7767: PUSH
7768: LD_INT 1
7770: EQUAL
7771: IFFALSE 10937
// begin case mission_number of 1 :
7773: LD_OWVAR 70
7777: PUSH
7778: LD_INT 1
7780: DOUBLE
7781: EQUAL
7782: IFTRUE 7786
7784: GO 7862
7786: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7787: LD_ADDR_VAR 0 2
7791: PUSH
7792: LD_INT 2
7794: PUSH
7795: LD_INT 4
7797: PUSH
7798: LD_INT 11
7800: PUSH
7801: LD_INT 12
7803: PUSH
7804: LD_INT 15
7806: PUSH
7807: LD_INT 16
7809: PUSH
7810: LD_INT 22
7812: PUSH
7813: LD_INT 23
7815: PUSH
7816: LD_INT 26
7818: PUSH
7819: EMPTY
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: PUSH
7830: LD_INT 101
7832: PUSH
7833: LD_INT 102
7835: PUSH
7836: LD_INT 106
7838: PUSH
7839: LD_INT 116
7841: PUSH
7842: LD_INT 117
7844: PUSH
7845: LD_INT 118
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: PUSH
7856: EMPTY
7857: LIST
7858: LIST
7859: ST_TO_ADDR
7860: GO 10935
7862: LD_INT 2
7864: DOUBLE
7865: EQUAL
7866: IFTRUE 7870
7868: GO 7954
7870: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7871: LD_ADDR_VAR 0 2
7875: PUSH
7876: LD_INT 2
7878: PUSH
7879: LD_INT 4
7881: PUSH
7882: LD_INT 11
7884: PUSH
7885: LD_INT 12
7887: PUSH
7888: LD_INT 15
7890: PUSH
7891: LD_INT 16
7893: PUSH
7894: LD_INT 22
7896: PUSH
7897: LD_INT 23
7899: PUSH
7900: LD_INT 26
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: PUSH
7914: LD_INT 101
7916: PUSH
7917: LD_INT 102
7919: PUSH
7920: LD_INT 105
7922: PUSH
7923: LD_INT 106
7925: PUSH
7926: LD_INT 108
7928: PUSH
7929: LD_INT 116
7931: PUSH
7932: LD_INT 117
7934: PUSH
7935: LD_INT 118
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: ST_TO_ADDR
7952: GO 10935
7954: LD_INT 3
7956: DOUBLE
7957: EQUAL
7958: IFTRUE 7962
7960: GO 8050
7962: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7963: LD_ADDR_VAR 0 2
7967: PUSH
7968: LD_INT 2
7970: PUSH
7971: LD_INT 4
7973: PUSH
7974: LD_INT 5
7976: PUSH
7977: LD_INT 11
7979: PUSH
7980: LD_INT 12
7982: PUSH
7983: LD_INT 15
7985: PUSH
7986: LD_INT 16
7988: PUSH
7989: LD_INT 22
7991: PUSH
7992: LD_INT 26
7994: PUSH
7995: LD_INT 36
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: PUSH
8010: LD_INT 101
8012: PUSH
8013: LD_INT 102
8015: PUSH
8016: LD_INT 105
8018: PUSH
8019: LD_INT 106
8021: PUSH
8022: LD_INT 108
8024: PUSH
8025: LD_INT 116
8027: PUSH
8028: LD_INT 117
8030: PUSH
8031: LD_INT 118
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: ST_TO_ADDR
8048: GO 10935
8050: LD_INT 4
8052: DOUBLE
8053: EQUAL
8054: IFTRUE 8058
8056: GO 8154
8058: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
8059: LD_ADDR_VAR 0 2
8063: PUSH
8064: LD_INT 2
8066: PUSH
8067: LD_INT 4
8069: PUSH
8070: LD_INT 5
8072: PUSH
8073: LD_INT 8
8075: PUSH
8076: LD_INT 11
8078: PUSH
8079: LD_INT 12
8081: PUSH
8082: LD_INT 15
8084: PUSH
8085: LD_INT 16
8087: PUSH
8088: LD_INT 22
8090: PUSH
8091: LD_INT 23
8093: PUSH
8094: LD_INT 26
8096: PUSH
8097: LD_INT 36
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: PUSH
8114: LD_INT 101
8116: PUSH
8117: LD_INT 102
8119: PUSH
8120: LD_INT 105
8122: PUSH
8123: LD_INT 106
8125: PUSH
8126: LD_INT 108
8128: PUSH
8129: LD_INT 116
8131: PUSH
8132: LD_INT 117
8134: PUSH
8135: LD_INT 118
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: ST_TO_ADDR
8152: GO 10935
8154: LD_INT 5
8156: DOUBLE
8157: EQUAL
8158: IFTRUE 8162
8160: GO 8274
8162: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
8163: LD_ADDR_VAR 0 2
8167: PUSH
8168: LD_INT 2
8170: PUSH
8171: LD_INT 4
8173: PUSH
8174: LD_INT 5
8176: PUSH
8177: LD_INT 6
8179: PUSH
8180: LD_INT 8
8182: PUSH
8183: LD_INT 11
8185: PUSH
8186: LD_INT 12
8188: PUSH
8189: LD_INT 15
8191: PUSH
8192: LD_INT 16
8194: PUSH
8195: LD_INT 22
8197: PUSH
8198: LD_INT 23
8200: PUSH
8201: LD_INT 25
8203: PUSH
8204: LD_INT 26
8206: PUSH
8207: LD_INT 36
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: PUSH
8226: LD_INT 101
8228: PUSH
8229: LD_INT 102
8231: PUSH
8232: LD_INT 105
8234: PUSH
8235: LD_INT 106
8237: PUSH
8238: LD_INT 108
8240: PUSH
8241: LD_INT 109
8243: PUSH
8244: LD_INT 112
8246: PUSH
8247: LD_INT 116
8249: PUSH
8250: LD_INT 117
8252: PUSH
8253: LD_INT 118
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: ST_TO_ADDR
8272: GO 10935
8274: LD_INT 6
8276: DOUBLE
8277: EQUAL
8278: IFTRUE 8282
8280: GO 8414
8282: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
8283: LD_ADDR_VAR 0 2
8287: PUSH
8288: LD_INT 2
8290: PUSH
8291: LD_INT 4
8293: PUSH
8294: LD_INT 5
8296: PUSH
8297: LD_INT 6
8299: PUSH
8300: LD_INT 8
8302: PUSH
8303: LD_INT 11
8305: PUSH
8306: LD_INT 12
8308: PUSH
8309: LD_INT 15
8311: PUSH
8312: LD_INT 16
8314: PUSH
8315: LD_INT 20
8317: PUSH
8318: LD_INT 21
8320: PUSH
8321: LD_INT 22
8323: PUSH
8324: LD_INT 23
8326: PUSH
8327: LD_INT 25
8329: PUSH
8330: LD_INT 26
8332: PUSH
8333: LD_INT 30
8335: PUSH
8336: LD_INT 31
8338: PUSH
8339: LD_INT 32
8341: PUSH
8342: LD_INT 36
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: PUSH
8366: LD_INT 101
8368: PUSH
8369: LD_INT 102
8371: PUSH
8372: LD_INT 105
8374: PUSH
8375: LD_INT 106
8377: PUSH
8378: LD_INT 108
8380: PUSH
8381: LD_INT 109
8383: PUSH
8384: LD_INT 112
8386: PUSH
8387: LD_INT 116
8389: PUSH
8390: LD_INT 117
8392: PUSH
8393: LD_INT 118
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: PUSH
8408: EMPTY
8409: LIST
8410: LIST
8411: ST_TO_ADDR
8412: GO 10935
8414: LD_INT 7
8416: DOUBLE
8417: EQUAL
8418: IFTRUE 8422
8420: GO 8534
8422: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8423: LD_ADDR_VAR 0 2
8427: PUSH
8428: LD_INT 2
8430: PUSH
8431: LD_INT 4
8433: PUSH
8434: LD_INT 5
8436: PUSH
8437: LD_INT 7
8439: PUSH
8440: LD_INT 11
8442: PUSH
8443: LD_INT 12
8445: PUSH
8446: LD_INT 15
8448: PUSH
8449: LD_INT 16
8451: PUSH
8452: LD_INT 20
8454: PUSH
8455: LD_INT 21
8457: PUSH
8458: LD_INT 22
8460: PUSH
8461: LD_INT 23
8463: PUSH
8464: LD_INT 25
8466: PUSH
8467: LD_INT 26
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: PUSH
8486: LD_INT 101
8488: PUSH
8489: LD_INT 102
8491: PUSH
8492: LD_INT 103
8494: PUSH
8495: LD_INT 105
8497: PUSH
8498: LD_INT 106
8500: PUSH
8501: LD_INT 108
8503: PUSH
8504: LD_INT 112
8506: PUSH
8507: LD_INT 116
8509: PUSH
8510: LD_INT 117
8512: PUSH
8513: LD_INT 118
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: PUSH
8528: EMPTY
8529: LIST
8530: LIST
8531: ST_TO_ADDR
8532: GO 10935
8534: LD_INT 8
8536: DOUBLE
8537: EQUAL
8538: IFTRUE 8542
8540: GO 8682
8542: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8543: LD_ADDR_VAR 0 2
8547: PUSH
8548: LD_INT 2
8550: PUSH
8551: LD_INT 4
8553: PUSH
8554: LD_INT 5
8556: PUSH
8557: LD_INT 6
8559: PUSH
8560: LD_INT 7
8562: PUSH
8563: LD_INT 8
8565: PUSH
8566: LD_INT 11
8568: PUSH
8569: LD_INT 12
8571: PUSH
8572: LD_INT 15
8574: PUSH
8575: LD_INT 16
8577: PUSH
8578: LD_INT 20
8580: PUSH
8581: LD_INT 21
8583: PUSH
8584: LD_INT 22
8586: PUSH
8587: LD_INT 23
8589: PUSH
8590: LD_INT 25
8592: PUSH
8593: LD_INT 26
8595: PUSH
8596: LD_INT 30
8598: PUSH
8599: LD_INT 31
8601: PUSH
8602: LD_INT 32
8604: PUSH
8605: LD_INT 36
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: PUSH
8630: LD_INT 101
8632: PUSH
8633: LD_INT 102
8635: PUSH
8636: LD_INT 103
8638: PUSH
8639: LD_INT 105
8641: PUSH
8642: LD_INT 106
8644: PUSH
8645: LD_INT 108
8647: PUSH
8648: LD_INT 109
8650: PUSH
8651: LD_INT 112
8653: PUSH
8654: LD_INT 116
8656: PUSH
8657: LD_INT 117
8659: PUSH
8660: LD_INT 118
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: ST_TO_ADDR
8680: GO 10935
8682: LD_INT 9
8684: DOUBLE
8685: EQUAL
8686: IFTRUE 8690
8688: GO 8838
8690: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8691: LD_ADDR_VAR 0 2
8695: PUSH
8696: LD_INT 2
8698: PUSH
8699: LD_INT 4
8701: PUSH
8702: LD_INT 5
8704: PUSH
8705: LD_INT 6
8707: PUSH
8708: LD_INT 7
8710: PUSH
8711: LD_INT 8
8713: PUSH
8714: LD_INT 11
8716: PUSH
8717: LD_INT 12
8719: PUSH
8720: LD_INT 15
8722: PUSH
8723: LD_INT 16
8725: PUSH
8726: LD_INT 20
8728: PUSH
8729: LD_INT 21
8731: PUSH
8732: LD_INT 22
8734: PUSH
8735: LD_INT 23
8737: PUSH
8738: LD_INT 25
8740: PUSH
8741: LD_INT 26
8743: PUSH
8744: LD_INT 28
8746: PUSH
8747: LD_INT 30
8749: PUSH
8750: LD_INT 31
8752: PUSH
8753: LD_INT 32
8755: PUSH
8756: LD_INT 36
8758: PUSH
8759: EMPTY
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: PUSH
8782: LD_INT 101
8784: PUSH
8785: LD_INT 102
8787: PUSH
8788: LD_INT 103
8790: PUSH
8791: LD_INT 105
8793: PUSH
8794: LD_INT 106
8796: PUSH
8797: LD_INT 108
8799: PUSH
8800: LD_INT 109
8802: PUSH
8803: LD_INT 112
8805: PUSH
8806: LD_INT 114
8808: PUSH
8809: LD_INT 116
8811: PUSH
8812: LD_INT 117
8814: PUSH
8815: LD_INT 118
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: PUSH
8832: EMPTY
8833: LIST
8834: LIST
8835: ST_TO_ADDR
8836: GO 10935
8838: LD_INT 10
8840: DOUBLE
8841: EQUAL
8842: IFTRUE 8846
8844: GO 9042
8846: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8847: LD_ADDR_VAR 0 2
8851: PUSH
8852: LD_INT 2
8854: PUSH
8855: LD_INT 4
8857: PUSH
8858: LD_INT 5
8860: PUSH
8861: LD_INT 6
8863: PUSH
8864: LD_INT 7
8866: PUSH
8867: LD_INT 8
8869: PUSH
8870: LD_INT 9
8872: PUSH
8873: LD_INT 10
8875: PUSH
8876: LD_INT 11
8878: PUSH
8879: LD_INT 12
8881: PUSH
8882: LD_INT 13
8884: PUSH
8885: LD_INT 14
8887: PUSH
8888: LD_INT 15
8890: PUSH
8891: LD_INT 16
8893: PUSH
8894: LD_INT 17
8896: PUSH
8897: LD_INT 18
8899: PUSH
8900: LD_INT 19
8902: PUSH
8903: LD_INT 20
8905: PUSH
8906: LD_INT 21
8908: PUSH
8909: LD_INT 22
8911: PUSH
8912: LD_INT 23
8914: PUSH
8915: LD_INT 24
8917: PUSH
8918: LD_INT 25
8920: PUSH
8921: LD_INT 26
8923: PUSH
8924: LD_INT 28
8926: PUSH
8927: LD_INT 30
8929: PUSH
8930: LD_INT 31
8932: PUSH
8933: LD_INT 32
8935: PUSH
8936: LD_INT 36
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: PUSH
8970: LD_INT 101
8972: PUSH
8973: LD_INT 102
8975: PUSH
8976: LD_INT 103
8978: PUSH
8979: LD_INT 104
8981: PUSH
8982: LD_INT 105
8984: PUSH
8985: LD_INT 106
8987: PUSH
8988: LD_INT 107
8990: PUSH
8991: LD_INT 108
8993: PUSH
8994: LD_INT 109
8996: PUSH
8997: LD_INT 110
8999: PUSH
9000: LD_INT 111
9002: PUSH
9003: LD_INT 112
9005: PUSH
9006: LD_INT 114
9008: PUSH
9009: LD_INT 116
9011: PUSH
9012: LD_INT 117
9014: PUSH
9015: LD_INT 118
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: ST_TO_ADDR
9040: GO 10935
9042: LD_INT 11
9044: DOUBLE
9045: EQUAL
9046: IFTRUE 9050
9048: GO 9254
9050: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
9051: LD_ADDR_VAR 0 2
9055: PUSH
9056: LD_INT 2
9058: PUSH
9059: LD_INT 3
9061: PUSH
9062: LD_INT 4
9064: PUSH
9065: LD_INT 5
9067: PUSH
9068: LD_INT 6
9070: PUSH
9071: LD_INT 7
9073: PUSH
9074: LD_INT 8
9076: PUSH
9077: LD_INT 9
9079: PUSH
9080: LD_INT 10
9082: PUSH
9083: LD_INT 11
9085: PUSH
9086: LD_INT 12
9088: PUSH
9089: LD_INT 13
9091: PUSH
9092: LD_INT 14
9094: PUSH
9095: LD_INT 15
9097: PUSH
9098: LD_INT 16
9100: PUSH
9101: LD_INT 17
9103: PUSH
9104: LD_INT 18
9106: PUSH
9107: LD_INT 19
9109: PUSH
9110: LD_INT 20
9112: PUSH
9113: LD_INT 21
9115: PUSH
9116: LD_INT 22
9118: PUSH
9119: LD_INT 23
9121: PUSH
9122: LD_INT 24
9124: PUSH
9125: LD_INT 25
9127: PUSH
9128: LD_INT 26
9130: PUSH
9131: LD_INT 28
9133: PUSH
9134: LD_INT 30
9136: PUSH
9137: LD_INT 31
9139: PUSH
9140: LD_INT 32
9142: PUSH
9143: LD_INT 34
9145: PUSH
9146: LD_INT 36
9148: PUSH
9149: EMPTY
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: PUSH
9182: LD_INT 101
9184: PUSH
9185: LD_INT 102
9187: PUSH
9188: LD_INT 103
9190: PUSH
9191: LD_INT 104
9193: PUSH
9194: LD_INT 105
9196: PUSH
9197: LD_INT 106
9199: PUSH
9200: LD_INT 107
9202: PUSH
9203: LD_INT 108
9205: PUSH
9206: LD_INT 109
9208: PUSH
9209: LD_INT 110
9211: PUSH
9212: LD_INT 111
9214: PUSH
9215: LD_INT 112
9217: PUSH
9218: LD_INT 114
9220: PUSH
9221: LD_INT 116
9223: PUSH
9224: LD_INT 117
9226: PUSH
9227: LD_INT 118
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: ST_TO_ADDR
9252: GO 10935
9254: LD_INT 12
9256: DOUBLE
9257: EQUAL
9258: IFTRUE 9262
9260: GO 9482
9262: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
9263: LD_ADDR_VAR 0 2
9267: PUSH
9268: LD_INT 1
9270: PUSH
9271: LD_INT 2
9273: PUSH
9274: LD_INT 3
9276: PUSH
9277: LD_INT 4
9279: PUSH
9280: LD_INT 5
9282: PUSH
9283: LD_INT 6
9285: PUSH
9286: LD_INT 7
9288: PUSH
9289: LD_INT 8
9291: PUSH
9292: LD_INT 9
9294: PUSH
9295: LD_INT 10
9297: PUSH
9298: LD_INT 11
9300: PUSH
9301: LD_INT 12
9303: PUSH
9304: LD_INT 13
9306: PUSH
9307: LD_INT 14
9309: PUSH
9310: LD_INT 15
9312: PUSH
9313: LD_INT 16
9315: PUSH
9316: LD_INT 17
9318: PUSH
9319: LD_INT 18
9321: PUSH
9322: LD_INT 19
9324: PUSH
9325: LD_INT 20
9327: PUSH
9328: LD_INT 21
9330: PUSH
9331: LD_INT 22
9333: PUSH
9334: LD_INT 23
9336: PUSH
9337: LD_INT 24
9339: PUSH
9340: LD_INT 25
9342: PUSH
9343: LD_INT 26
9345: PUSH
9346: LD_INT 27
9348: PUSH
9349: LD_INT 28
9351: PUSH
9352: LD_INT 30
9354: PUSH
9355: LD_INT 31
9357: PUSH
9358: LD_INT 32
9360: PUSH
9361: LD_INT 33
9363: PUSH
9364: LD_INT 34
9366: PUSH
9367: LD_INT 36
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: PUSH
9406: LD_INT 101
9408: PUSH
9409: LD_INT 102
9411: PUSH
9412: LD_INT 103
9414: PUSH
9415: LD_INT 104
9417: PUSH
9418: LD_INT 105
9420: PUSH
9421: LD_INT 106
9423: PUSH
9424: LD_INT 107
9426: PUSH
9427: LD_INT 108
9429: PUSH
9430: LD_INT 109
9432: PUSH
9433: LD_INT 110
9435: PUSH
9436: LD_INT 111
9438: PUSH
9439: LD_INT 112
9441: PUSH
9442: LD_INT 113
9444: PUSH
9445: LD_INT 114
9447: PUSH
9448: LD_INT 116
9450: PUSH
9451: LD_INT 117
9453: PUSH
9454: LD_INT 118
9456: PUSH
9457: EMPTY
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: ST_TO_ADDR
9480: GO 10935
9482: LD_INT 13
9484: DOUBLE
9485: EQUAL
9486: IFTRUE 9490
9488: GO 9698
9490: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9491: LD_ADDR_VAR 0 2
9495: PUSH
9496: LD_INT 1
9498: PUSH
9499: LD_INT 2
9501: PUSH
9502: LD_INT 3
9504: PUSH
9505: LD_INT 4
9507: PUSH
9508: LD_INT 5
9510: PUSH
9511: LD_INT 8
9513: PUSH
9514: LD_INT 9
9516: PUSH
9517: LD_INT 10
9519: PUSH
9520: LD_INT 11
9522: PUSH
9523: LD_INT 12
9525: PUSH
9526: LD_INT 14
9528: PUSH
9529: LD_INT 15
9531: PUSH
9532: LD_INT 16
9534: PUSH
9535: LD_INT 17
9537: PUSH
9538: LD_INT 18
9540: PUSH
9541: LD_INT 19
9543: PUSH
9544: LD_INT 20
9546: PUSH
9547: LD_INT 21
9549: PUSH
9550: LD_INT 22
9552: PUSH
9553: LD_INT 23
9555: PUSH
9556: LD_INT 24
9558: PUSH
9559: LD_INT 25
9561: PUSH
9562: LD_INT 26
9564: PUSH
9565: LD_INT 27
9567: PUSH
9568: LD_INT 28
9570: PUSH
9571: LD_INT 30
9573: PUSH
9574: LD_INT 31
9576: PUSH
9577: LD_INT 32
9579: PUSH
9580: LD_INT 33
9582: PUSH
9583: LD_INT 34
9585: PUSH
9586: LD_INT 36
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: PUSH
9622: LD_INT 101
9624: PUSH
9625: LD_INT 102
9627: PUSH
9628: LD_INT 103
9630: PUSH
9631: LD_INT 104
9633: PUSH
9634: LD_INT 105
9636: PUSH
9637: LD_INT 106
9639: PUSH
9640: LD_INT 107
9642: PUSH
9643: LD_INT 108
9645: PUSH
9646: LD_INT 109
9648: PUSH
9649: LD_INT 110
9651: PUSH
9652: LD_INT 111
9654: PUSH
9655: LD_INT 112
9657: PUSH
9658: LD_INT 113
9660: PUSH
9661: LD_INT 114
9663: PUSH
9664: LD_INT 116
9666: PUSH
9667: LD_INT 117
9669: PUSH
9670: LD_INT 118
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: ST_TO_ADDR
9696: GO 10935
9698: LD_INT 14
9700: DOUBLE
9701: EQUAL
9702: IFTRUE 9706
9704: GO 9930
9706: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9707: LD_ADDR_VAR 0 2
9711: PUSH
9712: LD_INT 1
9714: PUSH
9715: LD_INT 2
9717: PUSH
9718: LD_INT 3
9720: PUSH
9721: LD_INT 4
9723: PUSH
9724: LD_INT 5
9726: PUSH
9727: LD_INT 6
9729: PUSH
9730: LD_INT 7
9732: PUSH
9733: LD_INT 8
9735: PUSH
9736: LD_INT 9
9738: PUSH
9739: LD_INT 10
9741: PUSH
9742: LD_INT 11
9744: PUSH
9745: LD_INT 12
9747: PUSH
9748: LD_INT 13
9750: PUSH
9751: LD_INT 14
9753: PUSH
9754: LD_INT 15
9756: PUSH
9757: LD_INT 16
9759: PUSH
9760: LD_INT 17
9762: PUSH
9763: LD_INT 18
9765: PUSH
9766: LD_INT 19
9768: PUSH
9769: LD_INT 20
9771: PUSH
9772: LD_INT 21
9774: PUSH
9775: LD_INT 22
9777: PUSH
9778: LD_INT 23
9780: PUSH
9781: LD_INT 24
9783: PUSH
9784: LD_INT 25
9786: PUSH
9787: LD_INT 26
9789: PUSH
9790: LD_INT 27
9792: PUSH
9793: LD_INT 28
9795: PUSH
9796: LD_INT 29
9798: PUSH
9799: LD_INT 30
9801: PUSH
9802: LD_INT 31
9804: PUSH
9805: LD_INT 32
9807: PUSH
9808: LD_INT 33
9810: PUSH
9811: LD_INT 34
9813: PUSH
9814: LD_INT 36
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: PUSH
9854: LD_INT 101
9856: PUSH
9857: LD_INT 102
9859: PUSH
9860: LD_INT 103
9862: PUSH
9863: LD_INT 104
9865: PUSH
9866: LD_INT 105
9868: PUSH
9869: LD_INT 106
9871: PUSH
9872: LD_INT 107
9874: PUSH
9875: LD_INT 108
9877: PUSH
9878: LD_INT 109
9880: PUSH
9881: LD_INT 110
9883: PUSH
9884: LD_INT 111
9886: PUSH
9887: LD_INT 112
9889: PUSH
9890: LD_INT 113
9892: PUSH
9893: LD_INT 114
9895: PUSH
9896: LD_INT 116
9898: PUSH
9899: LD_INT 117
9901: PUSH
9902: LD_INT 118
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: ST_TO_ADDR
9928: GO 10935
9930: LD_INT 15
9932: DOUBLE
9933: EQUAL
9934: IFTRUE 9938
9936: GO 10162
9938: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9939: LD_ADDR_VAR 0 2
9943: PUSH
9944: LD_INT 1
9946: PUSH
9947: LD_INT 2
9949: PUSH
9950: LD_INT 3
9952: PUSH
9953: LD_INT 4
9955: PUSH
9956: LD_INT 5
9958: PUSH
9959: LD_INT 6
9961: PUSH
9962: LD_INT 7
9964: PUSH
9965: LD_INT 8
9967: PUSH
9968: LD_INT 9
9970: PUSH
9971: LD_INT 10
9973: PUSH
9974: LD_INT 11
9976: PUSH
9977: LD_INT 12
9979: PUSH
9980: LD_INT 13
9982: PUSH
9983: LD_INT 14
9985: PUSH
9986: LD_INT 15
9988: PUSH
9989: LD_INT 16
9991: PUSH
9992: LD_INT 17
9994: PUSH
9995: LD_INT 18
9997: PUSH
9998: LD_INT 19
10000: PUSH
10001: LD_INT 20
10003: PUSH
10004: LD_INT 21
10006: PUSH
10007: LD_INT 22
10009: PUSH
10010: LD_INT 23
10012: PUSH
10013: LD_INT 24
10015: PUSH
10016: LD_INT 25
10018: PUSH
10019: LD_INT 26
10021: PUSH
10022: LD_INT 27
10024: PUSH
10025: LD_INT 28
10027: PUSH
10028: LD_INT 29
10030: PUSH
10031: LD_INT 30
10033: PUSH
10034: LD_INT 31
10036: PUSH
10037: LD_INT 32
10039: PUSH
10040: LD_INT 33
10042: PUSH
10043: LD_INT 34
10045: PUSH
10046: LD_INT 36
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: LIST
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: PUSH
10086: LD_INT 101
10088: PUSH
10089: LD_INT 102
10091: PUSH
10092: LD_INT 103
10094: PUSH
10095: LD_INT 104
10097: PUSH
10098: LD_INT 105
10100: PUSH
10101: LD_INT 106
10103: PUSH
10104: LD_INT 107
10106: PUSH
10107: LD_INT 108
10109: PUSH
10110: LD_INT 109
10112: PUSH
10113: LD_INT 110
10115: PUSH
10116: LD_INT 111
10118: PUSH
10119: LD_INT 112
10121: PUSH
10122: LD_INT 113
10124: PUSH
10125: LD_INT 114
10127: PUSH
10128: LD_INT 116
10130: PUSH
10131: LD_INT 117
10133: PUSH
10134: LD_INT 118
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: PUSH
10156: EMPTY
10157: LIST
10158: LIST
10159: ST_TO_ADDR
10160: GO 10935
10162: LD_INT 16
10164: DOUBLE
10165: EQUAL
10166: IFTRUE 10170
10168: GO 10306
10170: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
10171: LD_ADDR_VAR 0 2
10175: PUSH
10176: LD_INT 2
10178: PUSH
10179: LD_INT 4
10181: PUSH
10182: LD_INT 5
10184: PUSH
10185: LD_INT 7
10187: PUSH
10188: LD_INT 11
10190: PUSH
10191: LD_INT 12
10193: PUSH
10194: LD_INT 15
10196: PUSH
10197: LD_INT 16
10199: PUSH
10200: LD_INT 20
10202: PUSH
10203: LD_INT 21
10205: PUSH
10206: LD_INT 22
10208: PUSH
10209: LD_INT 23
10211: PUSH
10212: LD_INT 25
10214: PUSH
10215: LD_INT 26
10217: PUSH
10218: LD_INT 30
10220: PUSH
10221: LD_INT 31
10223: PUSH
10224: LD_INT 32
10226: PUSH
10227: LD_INT 33
10229: PUSH
10230: LD_INT 34
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: PUSH
10254: LD_INT 101
10256: PUSH
10257: LD_INT 102
10259: PUSH
10260: LD_INT 103
10262: PUSH
10263: LD_INT 106
10265: PUSH
10266: LD_INT 108
10268: PUSH
10269: LD_INT 112
10271: PUSH
10272: LD_INT 113
10274: PUSH
10275: LD_INT 114
10277: PUSH
10278: LD_INT 116
10280: PUSH
10281: LD_INT 117
10283: PUSH
10284: LD_INT 118
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: PUSH
10300: EMPTY
10301: LIST
10302: LIST
10303: ST_TO_ADDR
10304: GO 10935
10306: LD_INT 17
10308: DOUBLE
10309: EQUAL
10310: IFTRUE 10314
10312: GO 10538
10314: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
10315: LD_ADDR_VAR 0 2
10319: PUSH
10320: LD_INT 1
10322: PUSH
10323: LD_INT 2
10325: PUSH
10326: LD_INT 3
10328: PUSH
10329: LD_INT 4
10331: PUSH
10332: LD_INT 5
10334: PUSH
10335: LD_INT 6
10337: PUSH
10338: LD_INT 7
10340: PUSH
10341: LD_INT 8
10343: PUSH
10344: LD_INT 9
10346: PUSH
10347: LD_INT 10
10349: PUSH
10350: LD_INT 11
10352: PUSH
10353: LD_INT 12
10355: PUSH
10356: LD_INT 13
10358: PUSH
10359: LD_INT 14
10361: PUSH
10362: LD_INT 15
10364: PUSH
10365: LD_INT 16
10367: PUSH
10368: LD_INT 17
10370: PUSH
10371: LD_INT 18
10373: PUSH
10374: LD_INT 19
10376: PUSH
10377: LD_INT 20
10379: PUSH
10380: LD_INT 21
10382: PUSH
10383: LD_INT 22
10385: PUSH
10386: LD_INT 23
10388: PUSH
10389: LD_INT 24
10391: PUSH
10392: LD_INT 25
10394: PUSH
10395: LD_INT 26
10397: PUSH
10398: LD_INT 27
10400: PUSH
10401: LD_INT 28
10403: PUSH
10404: LD_INT 29
10406: PUSH
10407: LD_INT 30
10409: PUSH
10410: LD_INT 31
10412: PUSH
10413: LD_INT 32
10415: PUSH
10416: LD_INT 33
10418: PUSH
10419: LD_INT 34
10421: PUSH
10422: LD_INT 36
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: PUSH
10462: LD_INT 101
10464: PUSH
10465: LD_INT 102
10467: PUSH
10468: LD_INT 103
10470: PUSH
10471: LD_INT 104
10473: PUSH
10474: LD_INT 105
10476: PUSH
10477: LD_INT 106
10479: PUSH
10480: LD_INT 107
10482: PUSH
10483: LD_INT 108
10485: PUSH
10486: LD_INT 109
10488: PUSH
10489: LD_INT 110
10491: PUSH
10492: LD_INT 111
10494: PUSH
10495: LD_INT 112
10497: PUSH
10498: LD_INT 113
10500: PUSH
10501: LD_INT 114
10503: PUSH
10504: LD_INT 116
10506: PUSH
10507: LD_INT 117
10509: PUSH
10510: LD_INT 118
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: ST_TO_ADDR
10536: GO 10935
10538: LD_INT 18
10540: DOUBLE
10541: EQUAL
10542: IFTRUE 10546
10544: GO 10694
10546: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10547: LD_ADDR_VAR 0 2
10551: PUSH
10552: LD_INT 2
10554: PUSH
10555: LD_INT 4
10557: PUSH
10558: LD_INT 5
10560: PUSH
10561: LD_INT 7
10563: PUSH
10564: LD_INT 11
10566: PUSH
10567: LD_INT 12
10569: PUSH
10570: LD_INT 15
10572: PUSH
10573: LD_INT 16
10575: PUSH
10576: LD_INT 20
10578: PUSH
10579: LD_INT 21
10581: PUSH
10582: LD_INT 22
10584: PUSH
10585: LD_INT 23
10587: PUSH
10588: LD_INT 25
10590: PUSH
10591: LD_INT 26
10593: PUSH
10594: LD_INT 30
10596: PUSH
10597: LD_INT 31
10599: PUSH
10600: LD_INT 32
10602: PUSH
10603: LD_INT 33
10605: PUSH
10606: LD_INT 34
10608: PUSH
10609: LD_INT 35
10611: PUSH
10612: LD_INT 36
10614: PUSH
10615: EMPTY
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: PUSH
10638: LD_INT 101
10640: PUSH
10641: LD_INT 102
10643: PUSH
10644: LD_INT 103
10646: PUSH
10647: LD_INT 106
10649: PUSH
10650: LD_INT 108
10652: PUSH
10653: LD_INT 112
10655: PUSH
10656: LD_INT 113
10658: PUSH
10659: LD_INT 114
10661: PUSH
10662: LD_INT 115
10664: PUSH
10665: LD_INT 116
10667: PUSH
10668: LD_INT 117
10670: PUSH
10671: LD_INT 118
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: ST_TO_ADDR
10692: GO 10935
10694: LD_INT 19
10696: DOUBLE
10697: EQUAL
10698: IFTRUE 10702
10700: GO 10934
10702: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10703: LD_ADDR_VAR 0 2
10707: PUSH
10708: LD_INT 1
10710: PUSH
10711: LD_INT 2
10713: PUSH
10714: LD_INT 3
10716: PUSH
10717: LD_INT 4
10719: PUSH
10720: LD_INT 5
10722: PUSH
10723: LD_INT 6
10725: PUSH
10726: LD_INT 7
10728: PUSH
10729: LD_INT 8
10731: PUSH
10732: LD_INT 9
10734: PUSH
10735: LD_INT 10
10737: PUSH
10738: LD_INT 11
10740: PUSH
10741: LD_INT 12
10743: PUSH
10744: LD_INT 13
10746: PUSH
10747: LD_INT 14
10749: PUSH
10750: LD_INT 15
10752: PUSH
10753: LD_INT 16
10755: PUSH
10756: LD_INT 17
10758: PUSH
10759: LD_INT 18
10761: PUSH
10762: LD_INT 19
10764: PUSH
10765: LD_INT 20
10767: PUSH
10768: LD_INT 21
10770: PUSH
10771: LD_INT 22
10773: PUSH
10774: LD_INT 23
10776: PUSH
10777: LD_INT 24
10779: PUSH
10780: LD_INT 25
10782: PUSH
10783: LD_INT 26
10785: PUSH
10786: LD_INT 27
10788: PUSH
10789: LD_INT 28
10791: PUSH
10792: LD_INT 29
10794: PUSH
10795: LD_INT 30
10797: PUSH
10798: LD_INT 31
10800: PUSH
10801: LD_INT 32
10803: PUSH
10804: LD_INT 33
10806: PUSH
10807: LD_INT 34
10809: PUSH
10810: LD_INT 35
10812: PUSH
10813: LD_INT 36
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: PUSH
10854: LD_INT 101
10856: PUSH
10857: LD_INT 102
10859: PUSH
10860: LD_INT 103
10862: PUSH
10863: LD_INT 104
10865: PUSH
10866: LD_INT 105
10868: PUSH
10869: LD_INT 106
10871: PUSH
10872: LD_INT 107
10874: PUSH
10875: LD_INT 108
10877: PUSH
10878: LD_INT 109
10880: PUSH
10881: LD_INT 110
10883: PUSH
10884: LD_INT 111
10886: PUSH
10887: LD_INT 112
10889: PUSH
10890: LD_INT 113
10892: PUSH
10893: LD_INT 114
10895: PUSH
10896: LD_INT 115
10898: PUSH
10899: LD_INT 116
10901: PUSH
10902: LD_INT 117
10904: PUSH
10905: LD_INT 118
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: ST_TO_ADDR
10932: GO 10935
10934: POP
// end else
10935: GO 11166
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10937: LD_ADDR_VAR 0 2
10941: PUSH
10942: LD_INT 1
10944: PUSH
10945: LD_INT 2
10947: PUSH
10948: LD_INT 3
10950: PUSH
10951: LD_INT 4
10953: PUSH
10954: LD_INT 5
10956: PUSH
10957: LD_INT 6
10959: PUSH
10960: LD_INT 7
10962: PUSH
10963: LD_INT 8
10965: PUSH
10966: LD_INT 9
10968: PUSH
10969: LD_INT 10
10971: PUSH
10972: LD_INT 11
10974: PUSH
10975: LD_INT 12
10977: PUSH
10978: LD_INT 13
10980: PUSH
10981: LD_INT 14
10983: PUSH
10984: LD_INT 15
10986: PUSH
10987: LD_INT 16
10989: PUSH
10990: LD_INT 17
10992: PUSH
10993: LD_INT 18
10995: PUSH
10996: LD_INT 19
10998: PUSH
10999: LD_INT 20
11001: PUSH
11002: LD_INT 21
11004: PUSH
11005: LD_INT 22
11007: PUSH
11008: LD_INT 23
11010: PUSH
11011: LD_INT 24
11013: PUSH
11014: LD_INT 25
11016: PUSH
11017: LD_INT 26
11019: PUSH
11020: LD_INT 27
11022: PUSH
11023: LD_INT 28
11025: PUSH
11026: LD_INT 29
11028: PUSH
11029: LD_INT 30
11031: PUSH
11032: LD_INT 31
11034: PUSH
11035: LD_INT 32
11037: PUSH
11038: LD_INT 33
11040: PUSH
11041: LD_INT 34
11043: PUSH
11044: LD_INT 35
11046: PUSH
11047: LD_INT 36
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: PUSH
11088: LD_INT 101
11090: PUSH
11091: LD_INT 102
11093: PUSH
11094: LD_INT 103
11096: PUSH
11097: LD_INT 104
11099: PUSH
11100: LD_INT 105
11102: PUSH
11103: LD_INT 106
11105: PUSH
11106: LD_INT 107
11108: PUSH
11109: LD_INT 108
11111: PUSH
11112: LD_INT 109
11114: PUSH
11115: LD_INT 110
11117: PUSH
11118: LD_INT 111
11120: PUSH
11121: LD_INT 112
11123: PUSH
11124: LD_INT 113
11126: PUSH
11127: LD_INT 114
11129: PUSH
11130: LD_INT 115
11132: PUSH
11133: LD_INT 116
11135: PUSH
11136: LD_INT 117
11138: PUSH
11139: LD_INT 118
11141: PUSH
11142: EMPTY
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: ST_TO_ADDR
// if result then
11166: LD_VAR 0 2
11170: IFFALSE 11956
// begin normal :=  ;
11172: LD_ADDR_VAR 0 5
11176: PUSH
11177: LD_STRING 
11179: ST_TO_ADDR
// hardcore :=  ;
11180: LD_ADDR_VAR 0 6
11184: PUSH
11185: LD_STRING 
11187: ST_TO_ADDR
// active :=  ;
11188: LD_ADDR_VAR 0 7
11192: PUSH
11193: LD_STRING 
11195: ST_TO_ADDR
// for i = 1 to normalCounter do
11196: LD_ADDR_VAR 0 8
11200: PUSH
11201: DOUBLE
11202: LD_INT 1
11204: DEC
11205: ST_TO_ADDR
11206: LD_EXP 27
11210: PUSH
11211: FOR_TO
11212: IFFALSE 11313
// begin tmp := 0 ;
11214: LD_ADDR_VAR 0 3
11218: PUSH
11219: LD_STRING 0
11221: ST_TO_ADDR
// if result [ 1 ] then
11222: LD_VAR 0 2
11226: PUSH
11227: LD_INT 1
11229: ARRAY
11230: IFFALSE 11295
// if result [ 1 ] [ 1 ] = i then
11232: LD_VAR 0 2
11236: PUSH
11237: LD_INT 1
11239: ARRAY
11240: PUSH
11241: LD_INT 1
11243: ARRAY
11244: PUSH
11245: LD_VAR 0 8
11249: EQUAL
11250: IFFALSE 11295
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11252: LD_ADDR_VAR 0 2
11256: PUSH
11257: LD_VAR 0 2
11261: PPUSH
11262: LD_INT 1
11264: PPUSH
11265: LD_VAR 0 2
11269: PUSH
11270: LD_INT 1
11272: ARRAY
11273: PPUSH
11274: LD_INT 1
11276: PPUSH
11277: CALL_OW 3
11281: PPUSH
11282: CALL_OW 1
11286: ST_TO_ADDR
// tmp := 1 ;
11287: LD_ADDR_VAR 0 3
11291: PUSH
11292: LD_STRING 1
11294: ST_TO_ADDR
// end ; normal := normal & tmp ;
11295: LD_ADDR_VAR 0 5
11299: PUSH
11300: LD_VAR 0 5
11304: PUSH
11305: LD_VAR 0 3
11309: STR
11310: ST_TO_ADDR
// end ;
11311: GO 11211
11313: POP
11314: POP
// for i = 1 to hardcoreCounter do
11315: LD_ADDR_VAR 0 8
11319: PUSH
11320: DOUBLE
11321: LD_INT 1
11323: DEC
11324: ST_TO_ADDR
11325: LD_EXP 28
11329: PUSH
11330: FOR_TO
11331: IFFALSE 11436
// begin tmp := 0 ;
11333: LD_ADDR_VAR 0 3
11337: PUSH
11338: LD_STRING 0
11340: ST_TO_ADDR
// if result [ 2 ] then
11341: LD_VAR 0 2
11345: PUSH
11346: LD_INT 2
11348: ARRAY
11349: IFFALSE 11418
// if result [ 2 ] [ 1 ] = 100 + i then
11351: LD_VAR 0 2
11355: PUSH
11356: LD_INT 2
11358: ARRAY
11359: PUSH
11360: LD_INT 1
11362: ARRAY
11363: PUSH
11364: LD_INT 100
11366: PUSH
11367: LD_VAR 0 8
11371: PLUS
11372: EQUAL
11373: IFFALSE 11418
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11375: LD_ADDR_VAR 0 2
11379: PUSH
11380: LD_VAR 0 2
11384: PPUSH
11385: LD_INT 2
11387: PPUSH
11388: LD_VAR 0 2
11392: PUSH
11393: LD_INT 2
11395: ARRAY
11396: PPUSH
11397: LD_INT 1
11399: PPUSH
11400: CALL_OW 3
11404: PPUSH
11405: CALL_OW 1
11409: ST_TO_ADDR
// tmp := 1 ;
11410: LD_ADDR_VAR 0 3
11414: PUSH
11415: LD_STRING 1
11417: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11418: LD_ADDR_VAR 0 6
11422: PUSH
11423: LD_VAR 0 6
11427: PUSH
11428: LD_VAR 0 3
11432: STR
11433: ST_TO_ADDR
// end ;
11434: GO 11330
11436: POP
11437: POP
// if isGameLoad then
11438: LD_VAR 0 1
11442: IFFALSE 11917
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
11444: LD_ADDR_VAR 0 4
11448: PUSH
11449: LD_EXP 31
11453: PUSH
11454: LD_EXP 30
11458: PUSH
11459: LD_EXP 32
11463: PUSH
11464: LD_EXP 29
11468: PUSH
11469: LD_EXP 33
11473: PUSH
11474: LD_EXP 34
11478: PUSH
11479: LD_EXP 35
11483: PUSH
11484: LD_EXP 36
11488: PUSH
11489: LD_EXP 37
11493: PUSH
11494: LD_EXP 38
11498: PUSH
11499: LD_EXP 39
11503: PUSH
11504: LD_EXP 40
11508: PUSH
11509: LD_EXP 41
11513: PUSH
11514: LD_EXP 42
11518: PUSH
11519: LD_EXP 50
11523: PUSH
11524: LD_EXP 51
11528: PUSH
11529: LD_EXP 52
11533: PUSH
11534: LD_EXP 53
11538: PUSH
11539: LD_EXP 55
11543: PUSH
11544: LD_EXP 56
11548: PUSH
11549: LD_EXP 57
11553: PUSH
11554: LD_EXP 60
11558: PUSH
11559: LD_EXP 62
11563: PUSH
11564: LD_EXP 63
11568: PUSH
11569: LD_EXP 64
11573: PUSH
11574: LD_EXP 66
11578: PUSH
11579: LD_EXP 67
11583: PUSH
11584: LD_EXP 70
11588: PUSH
11589: LD_EXP 71
11593: PUSH
11594: LD_EXP 72
11598: PUSH
11599: LD_EXP 73
11603: PUSH
11604: LD_EXP 74
11608: PUSH
11609: LD_EXP 75
11613: PUSH
11614: LD_EXP 76
11618: PUSH
11619: LD_EXP 77
11623: PUSH
11624: LD_EXP 78
11628: PUSH
11629: LD_EXP 43
11633: PUSH
11634: LD_EXP 44
11638: PUSH
11639: LD_EXP 47
11643: PUSH
11644: LD_EXP 48
11648: PUSH
11649: LD_EXP 49
11653: PUSH
11654: LD_EXP 45
11658: PUSH
11659: LD_EXP 46
11663: PUSH
11664: LD_EXP 54
11668: PUSH
11669: LD_EXP 58
11673: PUSH
11674: LD_EXP 59
11678: PUSH
11679: LD_EXP 61
11683: PUSH
11684: LD_EXP 65
11688: PUSH
11689: LD_EXP 68
11693: PUSH
11694: LD_EXP 69
11698: PUSH
11699: LD_EXP 79
11703: PUSH
11704: LD_EXP 80
11708: PUSH
11709: LD_EXP 81
11713: PUSH
11714: LD_EXP 82
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: ST_TO_ADDR
// tmp :=  ;
11775: LD_ADDR_VAR 0 3
11779: PUSH
11780: LD_STRING 
11782: ST_TO_ADDR
// for i = 1 to normalCounter do
11783: LD_ADDR_VAR 0 8
11787: PUSH
11788: DOUBLE
11789: LD_INT 1
11791: DEC
11792: ST_TO_ADDR
11793: LD_EXP 27
11797: PUSH
11798: FOR_TO
11799: IFFALSE 11835
// begin if flags [ i ] then
11801: LD_VAR 0 4
11805: PUSH
11806: LD_VAR 0 8
11810: ARRAY
11811: IFFALSE 11833
// tmp := tmp & i & ; ;
11813: LD_ADDR_VAR 0 3
11817: PUSH
11818: LD_VAR 0 3
11822: PUSH
11823: LD_VAR 0 8
11827: STR
11828: PUSH
11829: LD_STRING ;
11831: STR
11832: ST_TO_ADDR
// end ;
11833: GO 11798
11835: POP
11836: POP
// for i = 1 to hardcoreCounter do
11837: LD_ADDR_VAR 0 8
11841: PUSH
11842: DOUBLE
11843: LD_INT 1
11845: DEC
11846: ST_TO_ADDR
11847: LD_EXP 28
11851: PUSH
11852: FOR_TO
11853: IFFALSE 11899
// begin if flags [ normalCounter + i ] then
11855: LD_VAR 0 4
11859: PUSH
11860: LD_EXP 27
11864: PUSH
11865: LD_VAR 0 8
11869: PLUS
11870: ARRAY
11871: IFFALSE 11897
// tmp := tmp & ( 100 + i ) & ; ;
11873: LD_ADDR_VAR 0 3
11877: PUSH
11878: LD_VAR 0 3
11882: PUSH
11883: LD_INT 100
11885: PUSH
11886: LD_VAR 0 8
11890: PLUS
11891: STR
11892: PUSH
11893: LD_STRING ;
11895: STR
11896: ST_TO_ADDR
// end ;
11897: GO 11852
11899: POP
11900: POP
// if tmp then
11901: LD_VAR 0 3
11905: IFFALSE 11917
// active := tmp ;
11907: LD_ADDR_VAR 0 7
11911: PUSH
11912: LD_VAR 0 3
11916: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11917: LD_STRING getStreamItemsFromMission("
11919: PUSH
11920: LD_VAR 0 5
11924: STR
11925: PUSH
11926: LD_STRING ","
11928: STR
11929: PUSH
11930: LD_VAR 0 6
11934: STR
11935: PUSH
11936: LD_STRING ","
11938: STR
11939: PUSH
11940: LD_VAR 0 7
11944: STR
11945: PUSH
11946: LD_STRING ")
11948: STR
11949: PPUSH
11950: CALL_OW 559
// end else
11954: GO 11963
// ToLua ( getStreamItemsFromMission("","","") ) ;
11956: LD_STRING getStreamItemsFromMission("","","")
11958: PPUSH
11959: CALL_OW 559
// end ;
11963: LD_VAR 0 2
11967: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11968: LD_EXP 26
11972: PUSH
11973: LD_EXP 31
11977: AND
11978: IFFALSE 12102
11980: GO 11982
11982: DISABLE
11983: LD_INT 0
11985: PPUSH
11986: PPUSH
// begin enable ;
11987: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11988: LD_ADDR_VAR 0 2
11992: PUSH
11993: LD_INT 22
11995: PUSH
11996: LD_OWVAR 2
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: PUSH
12005: LD_INT 2
12007: PUSH
12008: LD_INT 34
12010: PUSH
12011: LD_INT 7
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: PUSH
12018: LD_INT 34
12020: PUSH
12021: LD_INT 45
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: PUSH
12028: LD_INT 34
12030: PUSH
12031: LD_INT 28
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: PUSH
12038: LD_INT 34
12040: PUSH
12041: LD_INT 47
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: PUSH
12055: EMPTY
12056: LIST
12057: LIST
12058: PPUSH
12059: CALL_OW 69
12063: ST_TO_ADDR
// if not tmp then
12064: LD_VAR 0 2
12068: NOT
12069: IFFALSE 12073
// exit ;
12071: GO 12102
// for i in tmp do
12073: LD_ADDR_VAR 0 1
12077: PUSH
12078: LD_VAR 0 2
12082: PUSH
12083: FOR_IN
12084: IFFALSE 12100
// begin SetLives ( i , 0 ) ;
12086: LD_VAR 0 1
12090: PPUSH
12091: LD_INT 0
12093: PPUSH
12094: CALL_OW 234
// end ;
12098: GO 12083
12100: POP
12101: POP
// end ;
12102: PPOPN 2
12104: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12105: LD_EXP 26
12109: PUSH
12110: LD_EXP 32
12114: AND
12115: IFFALSE 12199
12117: GO 12119
12119: DISABLE
12120: LD_INT 0
12122: PPUSH
12123: PPUSH
// begin enable ;
12124: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12125: LD_ADDR_VAR 0 2
12129: PUSH
12130: LD_INT 22
12132: PUSH
12133: LD_OWVAR 2
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PUSH
12142: LD_INT 32
12144: PUSH
12145: LD_INT 3
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: PPUSH
12156: CALL_OW 69
12160: ST_TO_ADDR
// if not tmp then
12161: LD_VAR 0 2
12165: NOT
12166: IFFALSE 12170
// exit ;
12168: GO 12199
// for i in tmp do
12170: LD_ADDR_VAR 0 1
12174: PUSH
12175: LD_VAR 0 2
12179: PUSH
12180: FOR_IN
12181: IFFALSE 12197
// begin SetLives ( i , 0 ) ;
12183: LD_VAR 0 1
12187: PPUSH
12188: LD_INT 0
12190: PPUSH
12191: CALL_OW 234
// end ;
12195: GO 12180
12197: POP
12198: POP
// end ;
12199: PPOPN 2
12201: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12202: LD_EXP 26
12206: PUSH
12207: LD_EXP 29
12211: AND
12212: IFFALSE 12305
12214: GO 12216
12216: DISABLE
12217: LD_INT 0
12219: PPUSH
// begin enable ;
12220: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12221: LD_ADDR_VAR 0 1
12225: PUSH
12226: LD_INT 22
12228: PUSH
12229: LD_OWVAR 2
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: PUSH
12238: LD_INT 2
12240: PUSH
12241: LD_INT 25
12243: PUSH
12244: LD_INT 5
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PUSH
12251: LD_INT 25
12253: PUSH
12254: LD_INT 9
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PUSH
12261: LD_INT 25
12263: PUSH
12264: LD_INT 8
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: PPUSH
12281: CALL_OW 69
12285: PUSH
12286: FOR_IN
12287: IFFALSE 12303
// begin SetClass ( i , 1 ) ;
12289: LD_VAR 0 1
12293: PPUSH
12294: LD_INT 1
12296: PPUSH
12297: CALL_OW 336
// end ;
12301: GO 12286
12303: POP
12304: POP
// end ;
12305: PPOPN 1
12307: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12308: LD_EXP 26
12312: PUSH
12313: LD_EXP 30
12317: AND
12318: PUSH
12319: LD_OWVAR 65
12323: PUSH
12324: LD_INT 7
12326: LESS
12327: AND
12328: IFFALSE 12342
12330: GO 12332
12332: DISABLE
// begin enable ;
12333: ENABLE
// game_speed := 7 ;
12334: LD_ADDR_OWVAR 65
12338: PUSH
12339: LD_INT 7
12341: ST_TO_ADDR
// end ;
12342: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12343: LD_EXP 26
12347: PUSH
12348: LD_EXP 33
12352: AND
12353: IFFALSE 12555
12355: GO 12357
12357: DISABLE
12358: LD_INT 0
12360: PPUSH
12361: PPUSH
12362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12363: LD_ADDR_VAR 0 3
12367: PUSH
12368: LD_INT 81
12370: PUSH
12371: LD_OWVAR 2
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: PUSH
12380: LD_INT 21
12382: PUSH
12383: LD_INT 1
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: PPUSH
12394: CALL_OW 69
12398: ST_TO_ADDR
// if not tmp then
12399: LD_VAR 0 3
12403: NOT
12404: IFFALSE 12408
// exit ;
12406: GO 12555
// if tmp > 5 then
12408: LD_VAR 0 3
12412: PUSH
12413: LD_INT 5
12415: GREATER
12416: IFFALSE 12428
// k := 5 else
12418: LD_ADDR_VAR 0 2
12422: PUSH
12423: LD_INT 5
12425: ST_TO_ADDR
12426: GO 12438
// k := tmp ;
12428: LD_ADDR_VAR 0 2
12432: PUSH
12433: LD_VAR 0 3
12437: ST_TO_ADDR
// for i := 1 to k do
12438: LD_ADDR_VAR 0 1
12442: PUSH
12443: DOUBLE
12444: LD_INT 1
12446: DEC
12447: ST_TO_ADDR
12448: LD_VAR 0 2
12452: PUSH
12453: FOR_TO
12454: IFFALSE 12553
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12456: LD_VAR 0 3
12460: PUSH
12461: LD_VAR 0 1
12465: ARRAY
12466: PPUSH
12467: LD_VAR 0 1
12471: PUSH
12472: LD_INT 4
12474: MOD
12475: PUSH
12476: LD_INT 1
12478: PLUS
12479: PPUSH
12480: CALL_OW 259
12484: PUSH
12485: LD_INT 10
12487: LESS
12488: IFFALSE 12551
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12490: LD_VAR 0 3
12494: PUSH
12495: LD_VAR 0 1
12499: ARRAY
12500: PPUSH
12501: LD_VAR 0 1
12505: PUSH
12506: LD_INT 4
12508: MOD
12509: PUSH
12510: LD_INT 1
12512: PLUS
12513: PPUSH
12514: LD_VAR 0 3
12518: PUSH
12519: LD_VAR 0 1
12523: ARRAY
12524: PPUSH
12525: LD_VAR 0 1
12529: PUSH
12530: LD_INT 4
12532: MOD
12533: PUSH
12534: LD_INT 1
12536: PLUS
12537: PPUSH
12538: CALL_OW 259
12542: PUSH
12543: LD_INT 1
12545: PLUS
12546: PPUSH
12547: CALL_OW 237
12551: GO 12453
12553: POP
12554: POP
// end ;
12555: PPOPN 3
12557: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12558: LD_EXP 26
12562: PUSH
12563: LD_EXP 34
12567: AND
12568: IFFALSE 12588
12570: GO 12572
12572: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12573: LD_INT 4
12575: PPUSH
12576: LD_OWVAR 2
12580: PPUSH
12581: LD_INT 0
12583: PPUSH
12584: CALL_OW 324
12588: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12589: LD_EXP 26
12593: PUSH
12594: LD_EXP 63
12598: AND
12599: IFFALSE 12619
12601: GO 12603
12603: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12604: LD_INT 19
12606: PPUSH
12607: LD_OWVAR 2
12611: PPUSH
12612: LD_INT 0
12614: PPUSH
12615: CALL_OW 324
12619: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12620: LD_EXP 26
12624: PUSH
12625: LD_EXP 35
12629: AND
12630: IFFALSE 12732
12632: GO 12634
12634: DISABLE
12635: LD_INT 0
12637: PPUSH
12638: PPUSH
// begin enable ;
12639: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12640: LD_ADDR_VAR 0 2
12644: PUSH
12645: LD_INT 22
12647: PUSH
12648: LD_OWVAR 2
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PUSH
12657: LD_INT 2
12659: PUSH
12660: LD_INT 34
12662: PUSH
12663: LD_INT 11
12665: PUSH
12666: EMPTY
12667: LIST
12668: LIST
12669: PUSH
12670: LD_INT 34
12672: PUSH
12673: LD_INT 30
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: LIST
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: PPUSH
12689: CALL_OW 69
12693: ST_TO_ADDR
// if not tmp then
12694: LD_VAR 0 2
12698: NOT
12699: IFFALSE 12703
// exit ;
12701: GO 12732
// for i in tmp do
12703: LD_ADDR_VAR 0 1
12707: PUSH
12708: LD_VAR 0 2
12712: PUSH
12713: FOR_IN
12714: IFFALSE 12730
// begin SetLives ( i , 0 ) ;
12716: LD_VAR 0 1
12720: PPUSH
12721: LD_INT 0
12723: PPUSH
12724: CALL_OW 234
// end ;
12728: GO 12713
12730: POP
12731: POP
// end ;
12732: PPOPN 2
12734: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12735: LD_EXP 26
12739: PUSH
12740: LD_EXP 36
12744: AND
12745: IFFALSE 12765
12747: GO 12749
12749: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12750: LD_INT 32
12752: PPUSH
12753: LD_OWVAR 2
12757: PPUSH
12758: LD_INT 0
12760: PPUSH
12761: CALL_OW 324
12765: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12766: LD_EXP 26
12770: PUSH
12771: LD_EXP 37
12775: AND
12776: IFFALSE 12957
12778: GO 12780
12780: DISABLE
12781: LD_INT 0
12783: PPUSH
12784: PPUSH
12785: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12786: LD_ADDR_VAR 0 2
12790: PUSH
12791: LD_INT 22
12793: PUSH
12794: LD_OWVAR 2
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: PUSH
12803: LD_INT 33
12805: PUSH
12806: LD_INT 3
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: PPUSH
12817: CALL_OW 69
12821: ST_TO_ADDR
// if not tmp then
12822: LD_VAR 0 2
12826: NOT
12827: IFFALSE 12831
// exit ;
12829: GO 12957
// side := 0 ;
12831: LD_ADDR_VAR 0 3
12835: PUSH
12836: LD_INT 0
12838: ST_TO_ADDR
// for i := 1 to 8 do
12839: LD_ADDR_VAR 0 1
12843: PUSH
12844: DOUBLE
12845: LD_INT 1
12847: DEC
12848: ST_TO_ADDR
12849: LD_INT 8
12851: PUSH
12852: FOR_TO
12853: IFFALSE 12901
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12855: LD_OWVAR 2
12859: PUSH
12860: LD_VAR 0 1
12864: NONEQUAL
12865: PUSH
12866: LD_OWVAR 2
12870: PPUSH
12871: LD_VAR 0 1
12875: PPUSH
12876: CALL_OW 81
12880: PUSH
12881: LD_INT 2
12883: EQUAL
12884: AND
12885: IFFALSE 12899
// begin side := i ;
12887: LD_ADDR_VAR 0 3
12891: PUSH
12892: LD_VAR 0 1
12896: ST_TO_ADDR
// break ;
12897: GO 12901
// end ;
12899: GO 12852
12901: POP
12902: POP
// if not side then
12903: LD_VAR 0 3
12907: NOT
12908: IFFALSE 12912
// exit ;
12910: GO 12957
// for i := 1 to tmp do
12912: LD_ADDR_VAR 0 1
12916: PUSH
12917: DOUBLE
12918: LD_INT 1
12920: DEC
12921: ST_TO_ADDR
12922: LD_VAR 0 2
12926: PUSH
12927: FOR_TO
12928: IFFALSE 12955
// if Prob ( 60 ) then
12930: LD_INT 60
12932: PPUSH
12933: CALL_OW 13
12937: IFFALSE 12953
// SetSide ( i , side ) ;
12939: LD_VAR 0 1
12943: PPUSH
12944: LD_VAR 0 3
12948: PPUSH
12949: CALL_OW 235
12953: GO 12927
12955: POP
12956: POP
// end ;
12957: PPOPN 3
12959: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12960: LD_EXP 26
12964: PUSH
12965: LD_EXP 39
12969: AND
12970: IFFALSE 13089
12972: GO 12974
12974: DISABLE
12975: LD_INT 0
12977: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12978: LD_ADDR_VAR 0 1
12982: PUSH
12983: LD_INT 22
12985: PUSH
12986: LD_OWVAR 2
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: PUSH
12995: LD_INT 21
12997: PUSH
12998: LD_INT 1
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: PUSH
13005: LD_INT 3
13007: PUSH
13008: LD_INT 23
13010: PUSH
13011: LD_INT 0
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: LIST
13026: PPUSH
13027: CALL_OW 69
13031: PUSH
13032: FOR_IN
13033: IFFALSE 13087
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13035: LD_VAR 0 1
13039: PPUSH
13040: CALL_OW 257
13044: PUSH
13045: LD_INT 1
13047: PUSH
13048: LD_INT 2
13050: PUSH
13051: LD_INT 3
13053: PUSH
13054: LD_INT 4
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: IN
13063: IFFALSE 13085
// SetClass ( un , rand ( 1 , 4 ) ) ;
13065: LD_VAR 0 1
13069: PPUSH
13070: LD_INT 1
13072: PPUSH
13073: LD_INT 4
13075: PPUSH
13076: CALL_OW 12
13080: PPUSH
13081: CALL_OW 336
13085: GO 13032
13087: POP
13088: POP
// end ;
13089: PPOPN 1
13091: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13092: LD_EXP 26
13096: PUSH
13097: LD_EXP 38
13101: AND
13102: IFFALSE 13181
13104: GO 13106
13106: DISABLE
13107: LD_INT 0
13109: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13110: LD_ADDR_VAR 0 1
13114: PUSH
13115: LD_INT 22
13117: PUSH
13118: LD_OWVAR 2
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: PUSH
13127: LD_INT 21
13129: PUSH
13130: LD_INT 3
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: PPUSH
13141: CALL_OW 69
13145: ST_TO_ADDR
// if not tmp then
13146: LD_VAR 0 1
13150: NOT
13151: IFFALSE 13155
// exit ;
13153: GO 13181
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13155: LD_VAR 0 1
13159: PUSH
13160: LD_INT 1
13162: PPUSH
13163: LD_VAR 0 1
13167: PPUSH
13168: CALL_OW 12
13172: ARRAY
13173: PPUSH
13174: LD_INT 100
13176: PPUSH
13177: CALL_OW 234
// end ;
13181: PPOPN 1
13183: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13184: LD_EXP 26
13188: PUSH
13189: LD_EXP 40
13193: AND
13194: IFFALSE 13292
13196: GO 13198
13198: DISABLE
13199: LD_INT 0
13201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13202: LD_ADDR_VAR 0 1
13206: PUSH
13207: LD_INT 22
13209: PUSH
13210: LD_OWVAR 2
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: PUSH
13219: LD_INT 21
13221: PUSH
13222: LD_INT 1
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: PPUSH
13233: CALL_OW 69
13237: ST_TO_ADDR
// if not tmp then
13238: LD_VAR 0 1
13242: NOT
13243: IFFALSE 13247
// exit ;
13245: GO 13292
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13247: LD_VAR 0 1
13251: PUSH
13252: LD_INT 1
13254: PPUSH
13255: LD_VAR 0 1
13259: PPUSH
13260: CALL_OW 12
13264: ARRAY
13265: PPUSH
13266: LD_INT 1
13268: PPUSH
13269: LD_INT 4
13271: PPUSH
13272: CALL_OW 12
13276: PPUSH
13277: LD_INT 3000
13279: PPUSH
13280: LD_INT 9000
13282: PPUSH
13283: CALL_OW 12
13287: PPUSH
13288: CALL_OW 492
// end ;
13292: PPOPN 1
13294: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13295: LD_EXP 26
13299: PUSH
13300: LD_EXP 41
13304: AND
13305: IFFALSE 13325
13307: GO 13309
13309: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13310: LD_INT 1
13312: PPUSH
13313: LD_OWVAR 2
13317: PPUSH
13318: LD_INT 0
13320: PPUSH
13321: CALL_OW 324
13325: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13326: LD_EXP 26
13330: PUSH
13331: LD_EXP 42
13335: AND
13336: IFFALSE 13419
13338: GO 13340
13340: DISABLE
13341: LD_INT 0
13343: PPUSH
13344: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13345: LD_ADDR_VAR 0 2
13349: PUSH
13350: LD_INT 22
13352: PUSH
13353: LD_OWVAR 2
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PUSH
13362: LD_INT 21
13364: PUSH
13365: LD_INT 3
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PPUSH
13376: CALL_OW 69
13380: ST_TO_ADDR
// if not tmp then
13381: LD_VAR 0 2
13385: NOT
13386: IFFALSE 13390
// exit ;
13388: GO 13419
// for i in tmp do
13390: LD_ADDR_VAR 0 1
13394: PUSH
13395: LD_VAR 0 2
13399: PUSH
13400: FOR_IN
13401: IFFALSE 13417
// SetBLevel ( i , 10 ) ;
13403: LD_VAR 0 1
13407: PPUSH
13408: LD_INT 10
13410: PPUSH
13411: CALL_OW 241
13415: GO 13400
13417: POP
13418: POP
// end ;
13419: PPOPN 2
13421: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13422: LD_EXP 26
13426: PUSH
13427: LD_EXP 43
13431: AND
13432: IFFALSE 13543
13434: GO 13436
13436: DISABLE
13437: LD_INT 0
13439: PPUSH
13440: PPUSH
13441: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13442: LD_ADDR_VAR 0 3
13446: PUSH
13447: LD_INT 22
13449: PUSH
13450: LD_OWVAR 2
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: PUSH
13459: LD_INT 25
13461: PUSH
13462: LD_INT 1
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: PPUSH
13473: CALL_OW 69
13477: ST_TO_ADDR
// if not tmp then
13478: LD_VAR 0 3
13482: NOT
13483: IFFALSE 13487
// exit ;
13485: GO 13543
// un := tmp [ rand ( 1 , tmp ) ] ;
13487: LD_ADDR_VAR 0 2
13491: PUSH
13492: LD_VAR 0 3
13496: PUSH
13497: LD_INT 1
13499: PPUSH
13500: LD_VAR 0 3
13504: PPUSH
13505: CALL_OW 12
13509: ARRAY
13510: ST_TO_ADDR
// if Crawls ( un ) then
13511: LD_VAR 0 2
13515: PPUSH
13516: CALL_OW 318
13520: IFFALSE 13531
// ComWalk ( un ) ;
13522: LD_VAR 0 2
13526: PPUSH
13527: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13531: LD_VAR 0 2
13535: PPUSH
13536: LD_INT 5
13538: PPUSH
13539: CALL_OW 336
// end ;
13543: PPOPN 3
13545: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13546: LD_EXP 26
13550: PUSH
13551: LD_EXP 44
13555: AND
13556: PUSH
13557: LD_OWVAR 67
13561: PUSH
13562: LD_INT 4
13564: LESS
13565: AND
13566: IFFALSE 13585
13568: GO 13570
13570: DISABLE
// begin Difficulty := Difficulty + 1 ;
13571: LD_ADDR_OWVAR 67
13575: PUSH
13576: LD_OWVAR 67
13580: PUSH
13581: LD_INT 1
13583: PLUS
13584: ST_TO_ADDR
// end ;
13585: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13586: LD_EXP 26
13590: PUSH
13591: LD_EXP 45
13595: AND
13596: IFFALSE 13699
13598: GO 13600
13600: DISABLE
13601: LD_INT 0
13603: PPUSH
// begin for i := 1 to 5 do
13604: LD_ADDR_VAR 0 1
13608: PUSH
13609: DOUBLE
13610: LD_INT 1
13612: DEC
13613: ST_TO_ADDR
13614: LD_INT 5
13616: PUSH
13617: FOR_TO
13618: IFFALSE 13697
// begin uc_nation := nation_nature ;
13620: LD_ADDR_OWVAR 21
13624: PUSH
13625: LD_INT 0
13627: ST_TO_ADDR
// uc_side := 0 ;
13628: LD_ADDR_OWVAR 20
13632: PUSH
13633: LD_INT 0
13635: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13636: LD_ADDR_OWVAR 29
13640: PUSH
13641: LD_INT 12
13643: PUSH
13644: LD_INT 12
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: ST_TO_ADDR
// hc_agressivity := 20 ;
13651: LD_ADDR_OWVAR 35
13655: PUSH
13656: LD_INT 20
13658: ST_TO_ADDR
// hc_class := class_tiger ;
13659: LD_ADDR_OWVAR 28
13663: PUSH
13664: LD_INT 14
13666: ST_TO_ADDR
// hc_gallery :=  ;
13667: LD_ADDR_OWVAR 33
13671: PUSH
13672: LD_STRING 
13674: ST_TO_ADDR
// hc_name :=  ;
13675: LD_ADDR_OWVAR 26
13679: PUSH
13680: LD_STRING 
13682: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13683: CALL_OW 44
13687: PPUSH
13688: LD_INT 0
13690: PPUSH
13691: CALL_OW 51
// end ;
13695: GO 13617
13697: POP
13698: POP
// end ;
13699: PPOPN 1
13701: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13702: LD_EXP 26
13706: PUSH
13707: LD_EXP 46
13711: AND
13712: IFFALSE 13721
13714: GO 13716
13716: DISABLE
// StreamSibBomb ;
13717: CALL 13722 0 0
13721: END
// export function StreamSibBomb ; var i , x , y ; begin
13722: LD_INT 0
13724: PPUSH
13725: PPUSH
13726: PPUSH
13727: PPUSH
// result := false ;
13728: LD_ADDR_VAR 0 1
13732: PUSH
13733: LD_INT 0
13735: ST_TO_ADDR
// for i := 1 to 16 do
13736: LD_ADDR_VAR 0 2
13740: PUSH
13741: DOUBLE
13742: LD_INT 1
13744: DEC
13745: ST_TO_ADDR
13746: LD_INT 16
13748: PUSH
13749: FOR_TO
13750: IFFALSE 13949
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13752: LD_ADDR_VAR 0 3
13756: PUSH
13757: LD_INT 10
13759: PUSH
13760: LD_INT 20
13762: PUSH
13763: LD_INT 30
13765: PUSH
13766: LD_INT 40
13768: PUSH
13769: LD_INT 50
13771: PUSH
13772: LD_INT 60
13774: PUSH
13775: LD_INT 70
13777: PUSH
13778: LD_INT 80
13780: PUSH
13781: LD_INT 90
13783: PUSH
13784: LD_INT 100
13786: PUSH
13787: LD_INT 110
13789: PUSH
13790: LD_INT 120
13792: PUSH
13793: LD_INT 130
13795: PUSH
13796: LD_INT 140
13798: PUSH
13799: LD_INT 150
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: PUSH
13819: LD_INT 1
13821: PPUSH
13822: LD_INT 15
13824: PPUSH
13825: CALL_OW 12
13829: ARRAY
13830: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13831: LD_ADDR_VAR 0 4
13835: PUSH
13836: LD_INT 10
13838: PUSH
13839: LD_INT 20
13841: PUSH
13842: LD_INT 30
13844: PUSH
13845: LD_INT 40
13847: PUSH
13848: LD_INT 50
13850: PUSH
13851: LD_INT 60
13853: PUSH
13854: LD_INT 70
13856: PUSH
13857: LD_INT 80
13859: PUSH
13860: LD_INT 90
13862: PUSH
13863: LD_INT 100
13865: PUSH
13866: LD_INT 110
13868: PUSH
13869: LD_INT 120
13871: PUSH
13872: LD_INT 130
13874: PUSH
13875: LD_INT 140
13877: PUSH
13878: LD_INT 150
13880: PUSH
13881: EMPTY
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: PUSH
13898: LD_INT 1
13900: PPUSH
13901: LD_INT 15
13903: PPUSH
13904: CALL_OW 12
13908: ARRAY
13909: ST_TO_ADDR
// if ValidHex ( x , y ) then
13910: LD_VAR 0 3
13914: PPUSH
13915: LD_VAR 0 4
13919: PPUSH
13920: CALL_OW 488
13924: IFFALSE 13947
// begin result := [ x , y ] ;
13926: LD_ADDR_VAR 0 1
13930: PUSH
13931: LD_VAR 0 3
13935: PUSH
13936: LD_VAR 0 4
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: ST_TO_ADDR
// break ;
13945: GO 13949
// end ; end ;
13947: GO 13749
13949: POP
13950: POP
// if result then
13951: LD_VAR 0 1
13955: IFFALSE 14015
// begin ToLua ( playSibBomb() ) ;
13957: LD_STRING playSibBomb()
13959: PPUSH
13960: CALL_OW 559
// wait ( 0 0$14 ) ;
13964: LD_INT 490
13966: PPUSH
13967: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13971: LD_VAR 0 1
13975: PUSH
13976: LD_INT 1
13978: ARRAY
13979: PPUSH
13980: LD_VAR 0 1
13984: PUSH
13985: LD_INT 2
13987: ARRAY
13988: PPUSH
13989: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13993: LD_VAR 0 1
13997: PUSH
13998: LD_INT 1
14000: ARRAY
14001: PPUSH
14002: LD_VAR 0 1
14006: PUSH
14007: LD_INT 2
14009: ARRAY
14010: PPUSH
14011: CALL_OW 429
// end ; end ;
14015: LD_VAR 0 1
14019: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14020: LD_EXP 26
14024: PUSH
14025: LD_EXP 48
14029: AND
14030: IFFALSE 14042
14032: GO 14034
14034: DISABLE
// YouLost (  ) ;
14035: LD_STRING 
14037: PPUSH
14038: CALL_OW 104
14042: END
// every 0 0$1 trigger StreamModeActive and sFog do
14043: LD_EXP 26
14047: PUSH
14048: LD_EXP 47
14052: AND
14053: IFFALSE 14067
14055: GO 14057
14057: DISABLE
// FogOff ( your_side ) ;
14058: LD_OWVAR 2
14062: PPUSH
14063: CALL_OW 344
14067: END
// every 0 0$1 trigger StreamModeActive and sSun do
14068: LD_EXP 26
14072: PUSH
14073: LD_EXP 49
14077: AND
14078: IFFALSE 14106
14080: GO 14082
14082: DISABLE
// begin solar_recharge_percent := 0 ;
14083: LD_ADDR_OWVAR 79
14087: PUSH
14088: LD_INT 0
14090: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14091: LD_INT 10500
14093: PPUSH
14094: CALL_OW 67
// solar_recharge_percent := 100 ;
14098: LD_ADDR_OWVAR 79
14102: PUSH
14103: LD_INT 100
14105: ST_TO_ADDR
// end ;
14106: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14107: LD_EXP 26
14111: PUSH
14112: LD_EXP 50
14116: AND
14117: IFFALSE 14356
14119: GO 14121
14121: DISABLE
14122: LD_INT 0
14124: PPUSH
14125: PPUSH
14126: PPUSH
// begin tmp := [ ] ;
14127: LD_ADDR_VAR 0 3
14131: PUSH
14132: EMPTY
14133: ST_TO_ADDR
// for i := 1 to 6 do
14134: LD_ADDR_VAR 0 1
14138: PUSH
14139: DOUBLE
14140: LD_INT 1
14142: DEC
14143: ST_TO_ADDR
14144: LD_INT 6
14146: PUSH
14147: FOR_TO
14148: IFFALSE 14253
// begin uc_nation := nation_nature ;
14150: LD_ADDR_OWVAR 21
14154: PUSH
14155: LD_INT 0
14157: ST_TO_ADDR
// uc_side := 0 ;
14158: LD_ADDR_OWVAR 20
14162: PUSH
14163: LD_INT 0
14165: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14166: LD_ADDR_OWVAR 29
14170: PUSH
14171: LD_INT 12
14173: PUSH
14174: LD_INT 12
14176: PUSH
14177: EMPTY
14178: LIST
14179: LIST
14180: ST_TO_ADDR
// hc_agressivity := 20 ;
14181: LD_ADDR_OWVAR 35
14185: PUSH
14186: LD_INT 20
14188: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14189: LD_ADDR_OWVAR 28
14193: PUSH
14194: LD_INT 17
14196: ST_TO_ADDR
// hc_gallery :=  ;
14197: LD_ADDR_OWVAR 33
14201: PUSH
14202: LD_STRING 
14204: ST_TO_ADDR
// hc_name :=  ;
14205: LD_ADDR_OWVAR 26
14209: PUSH
14210: LD_STRING 
14212: ST_TO_ADDR
// un := CreateHuman ;
14213: LD_ADDR_VAR 0 2
14217: PUSH
14218: CALL_OW 44
14222: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14223: LD_VAR 0 2
14227: PPUSH
14228: LD_INT 1
14230: PPUSH
14231: CALL_OW 51
// tmp := tmp ^ un ;
14235: LD_ADDR_VAR 0 3
14239: PUSH
14240: LD_VAR 0 3
14244: PUSH
14245: LD_VAR 0 2
14249: ADD
14250: ST_TO_ADDR
// end ;
14251: GO 14147
14253: POP
14254: POP
// repeat wait ( 0 0$1 ) ;
14255: LD_INT 35
14257: PPUSH
14258: CALL_OW 67
// for un in tmp do
14262: LD_ADDR_VAR 0 2
14266: PUSH
14267: LD_VAR 0 3
14271: PUSH
14272: FOR_IN
14273: IFFALSE 14347
// begin if IsDead ( un ) then
14275: LD_VAR 0 2
14279: PPUSH
14280: CALL_OW 301
14284: IFFALSE 14304
// begin tmp := tmp diff un ;
14286: LD_ADDR_VAR 0 3
14290: PUSH
14291: LD_VAR 0 3
14295: PUSH
14296: LD_VAR 0 2
14300: DIFF
14301: ST_TO_ADDR
// continue ;
14302: GO 14272
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14304: LD_VAR 0 2
14308: PPUSH
14309: LD_INT 3
14311: PUSH
14312: LD_INT 22
14314: PUSH
14315: LD_INT 0
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: PPUSH
14326: CALL_OW 69
14330: PPUSH
14331: LD_VAR 0 2
14335: PPUSH
14336: CALL_OW 74
14340: PPUSH
14341: CALL_OW 115
// end ;
14345: GO 14272
14347: POP
14348: POP
// until not tmp ;
14349: LD_VAR 0 3
14353: NOT
14354: IFFALSE 14255
// end ;
14356: PPOPN 3
14358: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14359: LD_EXP 26
14363: PUSH
14364: LD_EXP 51
14368: AND
14369: IFFALSE 14423
14371: GO 14373
14373: DISABLE
// begin ToLua ( displayTroll(); ) ;
14374: LD_STRING displayTroll();
14376: PPUSH
14377: CALL_OW 559
// wait ( 3 3$00 ) ;
14381: LD_INT 6300
14383: PPUSH
14384: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14388: LD_STRING hideTroll();
14390: PPUSH
14391: CALL_OW 559
// wait ( 1 1$00 ) ;
14395: LD_INT 2100
14397: PPUSH
14398: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14402: LD_STRING displayTroll();
14404: PPUSH
14405: CALL_OW 559
// wait ( 1 1$00 ) ;
14409: LD_INT 2100
14411: PPUSH
14412: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14416: LD_STRING hideTroll();
14418: PPUSH
14419: CALL_OW 559
// end ;
14423: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14424: LD_EXP 26
14428: PUSH
14429: LD_EXP 52
14433: AND
14434: IFFALSE 14497
14436: GO 14438
14438: DISABLE
14439: LD_INT 0
14441: PPUSH
// begin p := 0 ;
14442: LD_ADDR_VAR 0 1
14446: PUSH
14447: LD_INT 0
14449: ST_TO_ADDR
// repeat game_speed := 1 ;
14450: LD_ADDR_OWVAR 65
14454: PUSH
14455: LD_INT 1
14457: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14458: LD_INT 35
14460: PPUSH
14461: CALL_OW 67
// p := p + 1 ;
14465: LD_ADDR_VAR 0 1
14469: PUSH
14470: LD_VAR 0 1
14474: PUSH
14475: LD_INT 1
14477: PLUS
14478: ST_TO_ADDR
// until p >= 60 ;
14479: LD_VAR 0 1
14483: PUSH
14484: LD_INT 60
14486: GREATEREQUAL
14487: IFFALSE 14450
// game_speed := 4 ;
14489: LD_ADDR_OWVAR 65
14493: PUSH
14494: LD_INT 4
14496: ST_TO_ADDR
// end ;
14497: PPOPN 1
14499: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14500: LD_EXP 26
14504: PUSH
14505: LD_EXP 53
14509: AND
14510: IFFALSE 14656
14512: GO 14514
14514: DISABLE
14515: LD_INT 0
14517: PPUSH
14518: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14519: LD_ADDR_VAR 0 1
14523: PUSH
14524: LD_INT 22
14526: PUSH
14527: LD_OWVAR 2
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: PUSH
14536: LD_INT 2
14538: PUSH
14539: LD_INT 30
14541: PUSH
14542: LD_INT 0
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: PUSH
14549: LD_INT 30
14551: PUSH
14552: LD_INT 1
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: LIST
14563: PUSH
14564: EMPTY
14565: LIST
14566: LIST
14567: PPUSH
14568: CALL_OW 69
14572: ST_TO_ADDR
// if not depot then
14573: LD_VAR 0 1
14577: NOT
14578: IFFALSE 14582
// exit ;
14580: GO 14656
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14582: LD_ADDR_VAR 0 2
14586: PUSH
14587: LD_VAR 0 1
14591: PUSH
14592: LD_INT 1
14594: PPUSH
14595: LD_VAR 0 1
14599: PPUSH
14600: CALL_OW 12
14604: ARRAY
14605: PPUSH
14606: CALL_OW 274
14610: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14611: LD_VAR 0 2
14615: PPUSH
14616: LD_INT 1
14618: PPUSH
14619: LD_INT 0
14621: PPUSH
14622: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14626: LD_VAR 0 2
14630: PPUSH
14631: LD_INT 2
14633: PPUSH
14634: LD_INT 0
14636: PPUSH
14637: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14641: LD_VAR 0 2
14645: PPUSH
14646: LD_INT 3
14648: PPUSH
14649: LD_INT 0
14651: PPUSH
14652: CALL_OW 277
// end ;
14656: PPOPN 2
14658: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14659: LD_EXP 26
14663: PUSH
14664: LD_EXP 54
14668: AND
14669: IFFALSE 14766
14671: GO 14673
14673: DISABLE
14674: LD_INT 0
14676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14677: LD_ADDR_VAR 0 1
14681: PUSH
14682: LD_INT 22
14684: PUSH
14685: LD_OWVAR 2
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PUSH
14694: LD_INT 21
14696: PUSH
14697: LD_INT 1
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: PUSH
14704: LD_INT 3
14706: PUSH
14707: LD_INT 23
14709: PUSH
14710: LD_INT 0
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: LIST
14725: PPUSH
14726: CALL_OW 69
14730: ST_TO_ADDR
// if not tmp then
14731: LD_VAR 0 1
14735: NOT
14736: IFFALSE 14740
// exit ;
14738: GO 14766
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14740: LD_VAR 0 1
14744: PUSH
14745: LD_INT 1
14747: PPUSH
14748: LD_VAR 0 1
14752: PPUSH
14753: CALL_OW 12
14757: ARRAY
14758: PPUSH
14759: LD_INT 200
14761: PPUSH
14762: CALL_OW 234
// end ;
14766: PPOPN 1
14768: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14769: LD_EXP 26
14773: PUSH
14774: LD_EXP 55
14778: AND
14779: IFFALSE 14858
14781: GO 14783
14783: DISABLE
14784: LD_INT 0
14786: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14787: LD_ADDR_VAR 0 1
14791: PUSH
14792: LD_INT 22
14794: PUSH
14795: LD_OWVAR 2
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: PUSH
14804: LD_INT 21
14806: PUSH
14807: LD_INT 2
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: PPUSH
14818: CALL_OW 69
14822: ST_TO_ADDR
// if not tmp then
14823: LD_VAR 0 1
14827: NOT
14828: IFFALSE 14832
// exit ;
14830: GO 14858
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14832: LD_VAR 0 1
14836: PUSH
14837: LD_INT 1
14839: PPUSH
14840: LD_VAR 0 1
14844: PPUSH
14845: CALL_OW 12
14849: ARRAY
14850: PPUSH
14851: LD_INT 60
14853: PPUSH
14854: CALL_OW 234
// end ;
14858: PPOPN 1
14860: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14861: LD_EXP 26
14865: PUSH
14866: LD_EXP 56
14870: AND
14871: IFFALSE 14970
14873: GO 14875
14875: DISABLE
14876: LD_INT 0
14878: PPUSH
14879: PPUSH
// begin enable ;
14880: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14881: LD_ADDR_VAR 0 1
14885: PUSH
14886: LD_INT 22
14888: PUSH
14889: LD_OWVAR 2
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: PUSH
14898: LD_INT 61
14900: PUSH
14901: EMPTY
14902: LIST
14903: PUSH
14904: LD_INT 33
14906: PUSH
14907: LD_INT 2
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: PUSH
14914: EMPTY
14915: LIST
14916: LIST
14917: LIST
14918: PPUSH
14919: CALL_OW 69
14923: ST_TO_ADDR
// if not tmp then
14924: LD_VAR 0 1
14928: NOT
14929: IFFALSE 14933
// exit ;
14931: GO 14970
// for i in tmp do
14933: LD_ADDR_VAR 0 2
14937: PUSH
14938: LD_VAR 0 1
14942: PUSH
14943: FOR_IN
14944: IFFALSE 14968
// if IsControledBy ( i ) then
14946: LD_VAR 0 2
14950: PPUSH
14951: CALL_OW 312
14955: IFFALSE 14966
// ComUnlink ( i ) ;
14957: LD_VAR 0 2
14961: PPUSH
14962: CALL_OW 136
14966: GO 14943
14968: POP
14969: POP
// end ;
14970: PPOPN 2
14972: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14973: LD_EXP 26
14977: PUSH
14978: LD_EXP 57
14982: AND
14983: IFFALSE 15123
14985: GO 14987
14987: DISABLE
14988: LD_INT 0
14990: PPUSH
14991: PPUSH
// begin ToLua ( displayPowell(); ) ;
14992: LD_STRING displayPowell();
14994: PPUSH
14995: CALL_OW 559
// uc_side := 0 ;
14999: LD_ADDR_OWVAR 20
15003: PUSH
15004: LD_INT 0
15006: ST_TO_ADDR
// uc_nation := 2 ;
15007: LD_ADDR_OWVAR 21
15011: PUSH
15012: LD_INT 2
15014: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15015: LD_ADDR_OWVAR 37
15019: PUSH
15020: LD_INT 14
15022: ST_TO_ADDR
// vc_engine := engine_siberite ;
15023: LD_ADDR_OWVAR 39
15027: PUSH
15028: LD_INT 3
15030: ST_TO_ADDR
// vc_control := control_apeman ;
15031: LD_ADDR_OWVAR 38
15035: PUSH
15036: LD_INT 5
15038: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15039: LD_ADDR_OWVAR 40
15043: PUSH
15044: LD_INT 29
15046: ST_TO_ADDR
// un := CreateVehicle ;
15047: LD_ADDR_VAR 0 2
15051: PUSH
15052: CALL_OW 45
15056: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15057: LD_VAR 0 2
15061: PPUSH
15062: LD_INT 1
15064: PPUSH
15065: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15069: LD_INT 35
15071: PPUSH
15072: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15076: LD_VAR 0 2
15080: PPUSH
15081: LD_INT 22
15083: PUSH
15084: LD_OWVAR 2
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PPUSH
15093: CALL_OW 69
15097: PPUSH
15098: LD_VAR 0 2
15102: PPUSH
15103: CALL_OW 74
15107: PPUSH
15108: CALL_OW 115
// until IsDead ( un ) ;
15112: LD_VAR 0 2
15116: PPUSH
15117: CALL_OW 301
15121: IFFALSE 15069
// end ;
15123: PPOPN 2
15125: END
// every 0 0$1 trigger StreamModeActive and sStu do
15126: LD_EXP 26
15130: PUSH
15131: LD_EXP 65
15135: AND
15136: IFFALSE 15152
15138: GO 15140
15140: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15141: LD_STRING displayStucuk();
15143: PPUSH
15144: CALL_OW 559
// ResetFog ;
15148: CALL_OW 335
// end ;
15152: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15153: LD_EXP 26
15157: PUSH
15158: LD_EXP 58
15162: AND
15163: IFFALSE 15304
15165: GO 15167
15167: DISABLE
15168: LD_INT 0
15170: PPUSH
15171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15172: LD_ADDR_VAR 0 2
15176: PUSH
15177: LD_INT 22
15179: PUSH
15180: LD_OWVAR 2
15184: PUSH
15185: EMPTY
15186: LIST
15187: LIST
15188: PUSH
15189: LD_INT 21
15191: PUSH
15192: LD_INT 1
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: PPUSH
15203: CALL_OW 69
15207: ST_TO_ADDR
// if not tmp then
15208: LD_VAR 0 2
15212: NOT
15213: IFFALSE 15217
// exit ;
15215: GO 15304
// un := tmp [ rand ( 1 , tmp ) ] ;
15217: LD_ADDR_VAR 0 1
15221: PUSH
15222: LD_VAR 0 2
15226: PUSH
15227: LD_INT 1
15229: PPUSH
15230: LD_VAR 0 2
15234: PPUSH
15235: CALL_OW 12
15239: ARRAY
15240: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15241: LD_VAR 0 1
15245: PPUSH
15246: LD_INT 0
15248: PPUSH
15249: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15253: LD_VAR 0 1
15257: PPUSH
15258: LD_OWVAR 3
15262: PUSH
15263: LD_VAR 0 1
15267: DIFF
15268: PPUSH
15269: LD_VAR 0 1
15273: PPUSH
15274: CALL_OW 74
15278: PPUSH
15279: CALL_OW 115
// wait ( 0 0$20 ) ;
15283: LD_INT 700
15285: PPUSH
15286: CALL_OW 67
// SetSide ( un , your_side ) ;
15290: LD_VAR 0 1
15294: PPUSH
15295: LD_OWVAR 2
15299: PPUSH
15300: CALL_OW 235
// end ;
15304: PPOPN 2
15306: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15307: LD_EXP 26
15311: PUSH
15312: LD_EXP 59
15316: AND
15317: IFFALSE 15423
15319: GO 15321
15321: DISABLE
15322: LD_INT 0
15324: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15325: LD_ADDR_VAR 0 1
15329: PUSH
15330: LD_INT 22
15332: PUSH
15333: LD_OWVAR 2
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PUSH
15342: LD_INT 2
15344: PUSH
15345: LD_INT 30
15347: PUSH
15348: LD_INT 0
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: PUSH
15355: LD_INT 30
15357: PUSH
15358: LD_INT 1
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: PUSH
15365: EMPTY
15366: LIST
15367: LIST
15368: LIST
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: PPUSH
15374: CALL_OW 69
15378: ST_TO_ADDR
// if not depot then
15379: LD_VAR 0 1
15383: NOT
15384: IFFALSE 15388
// exit ;
15386: GO 15423
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15388: LD_VAR 0 1
15392: PUSH
15393: LD_INT 1
15395: ARRAY
15396: PPUSH
15397: CALL_OW 250
15401: PPUSH
15402: LD_VAR 0 1
15406: PUSH
15407: LD_INT 1
15409: ARRAY
15410: PPUSH
15411: CALL_OW 251
15415: PPUSH
15416: LD_INT 70
15418: PPUSH
15419: CALL_OW 495
// end ;
15423: PPOPN 1
15425: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15426: LD_EXP 26
15430: PUSH
15431: LD_EXP 60
15435: AND
15436: IFFALSE 15647
15438: GO 15440
15440: DISABLE
15441: LD_INT 0
15443: PPUSH
15444: PPUSH
15445: PPUSH
15446: PPUSH
15447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15448: LD_ADDR_VAR 0 5
15452: PUSH
15453: LD_INT 22
15455: PUSH
15456: LD_OWVAR 2
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: PUSH
15465: LD_INT 21
15467: PUSH
15468: LD_INT 1
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: PPUSH
15479: CALL_OW 69
15483: ST_TO_ADDR
// if not tmp then
15484: LD_VAR 0 5
15488: NOT
15489: IFFALSE 15493
// exit ;
15491: GO 15647
// for i in tmp do
15493: LD_ADDR_VAR 0 1
15497: PUSH
15498: LD_VAR 0 5
15502: PUSH
15503: FOR_IN
15504: IFFALSE 15645
// begin d := rand ( 0 , 5 ) ;
15506: LD_ADDR_VAR 0 4
15510: PUSH
15511: LD_INT 0
15513: PPUSH
15514: LD_INT 5
15516: PPUSH
15517: CALL_OW 12
15521: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15522: LD_ADDR_VAR 0 2
15526: PUSH
15527: LD_VAR 0 1
15531: PPUSH
15532: CALL_OW 250
15536: PPUSH
15537: LD_VAR 0 4
15541: PPUSH
15542: LD_INT 3
15544: PPUSH
15545: LD_INT 12
15547: PPUSH
15548: CALL_OW 12
15552: PPUSH
15553: CALL_OW 272
15557: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15558: LD_ADDR_VAR 0 3
15562: PUSH
15563: LD_VAR 0 1
15567: PPUSH
15568: CALL_OW 251
15572: PPUSH
15573: LD_VAR 0 4
15577: PPUSH
15578: LD_INT 3
15580: PPUSH
15581: LD_INT 12
15583: PPUSH
15584: CALL_OW 12
15588: PPUSH
15589: CALL_OW 273
15593: ST_TO_ADDR
// if ValidHex ( x , y ) then
15594: LD_VAR 0 2
15598: PPUSH
15599: LD_VAR 0 3
15603: PPUSH
15604: CALL_OW 488
15608: IFFALSE 15643
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15610: LD_VAR 0 1
15614: PPUSH
15615: LD_VAR 0 2
15619: PPUSH
15620: LD_VAR 0 3
15624: PPUSH
15625: LD_INT 3
15627: PPUSH
15628: LD_INT 6
15630: PPUSH
15631: CALL_OW 12
15635: PPUSH
15636: LD_INT 1
15638: PPUSH
15639: CALL_OW 483
// end ;
15643: GO 15503
15645: POP
15646: POP
// end ;
15647: PPOPN 5
15649: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15650: LD_EXP 26
15654: PUSH
15655: LD_EXP 61
15659: AND
15660: IFFALSE 15754
15662: GO 15664
15664: DISABLE
15665: LD_INT 0
15667: PPUSH
15668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15669: LD_ADDR_VAR 0 2
15673: PUSH
15674: LD_INT 22
15676: PUSH
15677: LD_OWVAR 2
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: PUSH
15686: LD_INT 32
15688: PUSH
15689: LD_INT 1
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: PUSH
15696: LD_INT 21
15698: PUSH
15699: LD_INT 2
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: LIST
15710: PPUSH
15711: CALL_OW 69
15715: ST_TO_ADDR
// if not tmp then
15716: LD_VAR 0 2
15720: NOT
15721: IFFALSE 15725
// exit ;
15723: GO 15754
// for i in tmp do
15725: LD_ADDR_VAR 0 1
15729: PUSH
15730: LD_VAR 0 2
15734: PUSH
15735: FOR_IN
15736: IFFALSE 15752
// SetFuel ( i , 0 ) ;
15738: LD_VAR 0 1
15742: PPUSH
15743: LD_INT 0
15745: PPUSH
15746: CALL_OW 240
15750: GO 15735
15752: POP
15753: POP
// end ;
15754: PPOPN 2
15756: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15757: LD_EXP 26
15761: PUSH
15762: LD_EXP 62
15766: AND
15767: IFFALSE 15833
15769: GO 15771
15771: DISABLE
15772: LD_INT 0
15774: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15775: LD_ADDR_VAR 0 1
15779: PUSH
15780: LD_INT 22
15782: PUSH
15783: LD_OWVAR 2
15787: PUSH
15788: EMPTY
15789: LIST
15790: LIST
15791: PUSH
15792: LD_INT 30
15794: PUSH
15795: LD_INT 29
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PPUSH
15806: CALL_OW 69
15810: ST_TO_ADDR
// if not tmp then
15811: LD_VAR 0 1
15815: NOT
15816: IFFALSE 15820
// exit ;
15818: GO 15833
// DestroyUnit ( tmp [ 1 ] ) ;
15820: LD_VAR 0 1
15824: PUSH
15825: LD_INT 1
15827: ARRAY
15828: PPUSH
15829: CALL_OW 65
// end ;
15833: PPOPN 1
15835: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15836: LD_EXP 26
15840: PUSH
15841: LD_EXP 64
15845: AND
15846: IFFALSE 15975
15848: GO 15850
15850: DISABLE
15851: LD_INT 0
15853: PPUSH
// begin uc_side := 0 ;
15854: LD_ADDR_OWVAR 20
15858: PUSH
15859: LD_INT 0
15861: ST_TO_ADDR
// uc_nation := nation_arabian ;
15862: LD_ADDR_OWVAR 21
15866: PUSH
15867: LD_INT 2
15869: ST_TO_ADDR
// hc_gallery :=  ;
15870: LD_ADDR_OWVAR 33
15874: PUSH
15875: LD_STRING 
15877: ST_TO_ADDR
// hc_name :=  ;
15878: LD_ADDR_OWVAR 26
15882: PUSH
15883: LD_STRING 
15885: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15886: LD_INT 1
15888: PPUSH
15889: LD_INT 11
15891: PPUSH
15892: LD_INT 10
15894: PPUSH
15895: CALL_OW 380
// un := CreateHuman ;
15899: LD_ADDR_VAR 0 1
15903: PUSH
15904: CALL_OW 44
15908: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15909: LD_VAR 0 1
15913: PPUSH
15914: LD_INT 1
15916: PPUSH
15917: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15921: LD_INT 35
15923: PPUSH
15924: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15928: LD_VAR 0 1
15932: PPUSH
15933: LD_INT 22
15935: PUSH
15936: LD_OWVAR 2
15940: PUSH
15941: EMPTY
15942: LIST
15943: LIST
15944: PPUSH
15945: CALL_OW 69
15949: PPUSH
15950: LD_VAR 0 1
15954: PPUSH
15955: CALL_OW 74
15959: PPUSH
15960: CALL_OW 115
// until IsDead ( un ) ;
15964: LD_VAR 0 1
15968: PPUSH
15969: CALL_OW 301
15973: IFFALSE 15921
// end ;
15975: PPOPN 1
15977: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15978: LD_EXP 26
15982: PUSH
15983: LD_EXP 66
15987: AND
15988: IFFALSE 16000
15990: GO 15992
15992: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15993: LD_STRING earthquake(getX(game), 0, 32)
15995: PPUSH
15996: CALL_OW 559
16000: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16001: LD_EXP 26
16005: PUSH
16006: LD_EXP 67
16010: AND
16011: IFFALSE 16102
16013: GO 16015
16015: DISABLE
16016: LD_INT 0
16018: PPUSH
// begin enable ;
16019: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16020: LD_ADDR_VAR 0 1
16024: PUSH
16025: LD_INT 22
16027: PUSH
16028: LD_OWVAR 2
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: PUSH
16037: LD_INT 21
16039: PUSH
16040: LD_INT 2
16042: PUSH
16043: EMPTY
16044: LIST
16045: LIST
16046: PUSH
16047: LD_INT 33
16049: PUSH
16050: LD_INT 3
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: LIST
16061: PPUSH
16062: CALL_OW 69
16066: ST_TO_ADDR
// if not tmp then
16067: LD_VAR 0 1
16071: NOT
16072: IFFALSE 16076
// exit ;
16074: GO 16102
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16076: LD_VAR 0 1
16080: PUSH
16081: LD_INT 1
16083: PPUSH
16084: LD_VAR 0 1
16088: PPUSH
16089: CALL_OW 12
16093: ARRAY
16094: PPUSH
16095: LD_INT 1
16097: PPUSH
16098: CALL_OW 234
// end ;
16102: PPOPN 1
16104: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16105: LD_EXP 26
16109: PUSH
16110: LD_EXP 68
16114: AND
16115: IFFALSE 16256
16117: GO 16119
16119: DISABLE
16120: LD_INT 0
16122: PPUSH
16123: PPUSH
16124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16125: LD_ADDR_VAR 0 3
16129: PUSH
16130: LD_INT 22
16132: PUSH
16133: LD_OWVAR 2
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: PUSH
16142: LD_INT 25
16144: PUSH
16145: LD_INT 1
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PPUSH
16156: CALL_OW 69
16160: ST_TO_ADDR
// if not tmp then
16161: LD_VAR 0 3
16165: NOT
16166: IFFALSE 16170
// exit ;
16168: GO 16256
// un := tmp [ rand ( 1 , tmp ) ] ;
16170: LD_ADDR_VAR 0 2
16174: PUSH
16175: LD_VAR 0 3
16179: PUSH
16180: LD_INT 1
16182: PPUSH
16183: LD_VAR 0 3
16187: PPUSH
16188: CALL_OW 12
16192: ARRAY
16193: ST_TO_ADDR
// if Crawls ( un ) then
16194: LD_VAR 0 2
16198: PPUSH
16199: CALL_OW 318
16203: IFFALSE 16214
// ComWalk ( un ) ;
16205: LD_VAR 0 2
16209: PPUSH
16210: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16214: LD_VAR 0 2
16218: PPUSH
16219: LD_INT 9
16221: PPUSH
16222: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16226: LD_INT 28
16228: PPUSH
16229: LD_OWVAR 2
16233: PPUSH
16234: LD_INT 2
16236: PPUSH
16237: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16241: LD_INT 29
16243: PPUSH
16244: LD_OWVAR 2
16248: PPUSH
16249: LD_INT 2
16251: PPUSH
16252: CALL_OW 322
// end ;
16256: PPOPN 3
16258: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16259: LD_EXP 26
16263: PUSH
16264: LD_EXP 69
16268: AND
16269: IFFALSE 16380
16271: GO 16273
16273: DISABLE
16274: LD_INT 0
16276: PPUSH
16277: PPUSH
16278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16279: LD_ADDR_VAR 0 3
16283: PUSH
16284: LD_INT 22
16286: PUSH
16287: LD_OWVAR 2
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PUSH
16296: LD_INT 25
16298: PUSH
16299: LD_INT 1
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PPUSH
16310: CALL_OW 69
16314: ST_TO_ADDR
// if not tmp then
16315: LD_VAR 0 3
16319: NOT
16320: IFFALSE 16324
// exit ;
16322: GO 16380
// un := tmp [ rand ( 1 , tmp ) ] ;
16324: LD_ADDR_VAR 0 2
16328: PUSH
16329: LD_VAR 0 3
16333: PUSH
16334: LD_INT 1
16336: PPUSH
16337: LD_VAR 0 3
16341: PPUSH
16342: CALL_OW 12
16346: ARRAY
16347: ST_TO_ADDR
// if Crawls ( un ) then
16348: LD_VAR 0 2
16352: PPUSH
16353: CALL_OW 318
16357: IFFALSE 16368
// ComWalk ( un ) ;
16359: LD_VAR 0 2
16363: PPUSH
16364: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16368: LD_VAR 0 2
16372: PPUSH
16373: LD_INT 8
16375: PPUSH
16376: CALL_OW 336
// end ;
16380: PPOPN 3
16382: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16383: LD_EXP 26
16387: PUSH
16388: LD_EXP 70
16392: AND
16393: IFFALSE 16537
16395: GO 16397
16397: DISABLE
16398: LD_INT 0
16400: PPUSH
16401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16402: LD_ADDR_VAR 0 2
16406: PUSH
16407: LD_INT 22
16409: PUSH
16410: LD_OWVAR 2
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: PUSH
16419: LD_INT 21
16421: PUSH
16422: LD_INT 2
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: PUSH
16429: LD_INT 2
16431: PUSH
16432: LD_INT 34
16434: PUSH
16435: LD_INT 12
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: PUSH
16442: LD_INT 34
16444: PUSH
16445: LD_INT 51
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: LD_INT 34
16454: PUSH
16455: LD_INT 32
16457: PUSH
16458: EMPTY
16459: LIST
16460: LIST
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: LIST
16472: PPUSH
16473: CALL_OW 69
16477: ST_TO_ADDR
// if not tmp then
16478: LD_VAR 0 2
16482: NOT
16483: IFFALSE 16487
// exit ;
16485: GO 16537
// for i in tmp do
16487: LD_ADDR_VAR 0 1
16491: PUSH
16492: LD_VAR 0 2
16496: PUSH
16497: FOR_IN
16498: IFFALSE 16535
// if GetCargo ( i , mat_artifact ) = 0 then
16500: LD_VAR 0 1
16504: PPUSH
16505: LD_INT 4
16507: PPUSH
16508: CALL_OW 289
16512: PUSH
16513: LD_INT 0
16515: EQUAL
16516: IFFALSE 16533
// SetCargo ( i , mat_siberit , 100 ) ;
16518: LD_VAR 0 1
16522: PPUSH
16523: LD_INT 3
16525: PPUSH
16526: LD_INT 100
16528: PPUSH
16529: CALL_OW 290
16533: GO 16497
16535: POP
16536: POP
// end ;
16537: PPOPN 2
16539: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16540: LD_EXP 26
16544: PUSH
16545: LD_EXP 71
16549: AND
16550: IFFALSE 16733
16552: GO 16554
16554: DISABLE
16555: LD_INT 0
16557: PPUSH
16558: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16559: LD_ADDR_VAR 0 2
16563: PUSH
16564: LD_INT 22
16566: PUSH
16567: LD_OWVAR 2
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PPUSH
16576: CALL_OW 69
16580: ST_TO_ADDR
// if not tmp then
16581: LD_VAR 0 2
16585: NOT
16586: IFFALSE 16590
// exit ;
16588: GO 16733
// for i := 1 to 2 do
16590: LD_ADDR_VAR 0 1
16594: PUSH
16595: DOUBLE
16596: LD_INT 1
16598: DEC
16599: ST_TO_ADDR
16600: LD_INT 2
16602: PUSH
16603: FOR_TO
16604: IFFALSE 16731
// begin uc_side := your_side ;
16606: LD_ADDR_OWVAR 20
16610: PUSH
16611: LD_OWVAR 2
16615: ST_TO_ADDR
// uc_nation := nation_american ;
16616: LD_ADDR_OWVAR 21
16620: PUSH
16621: LD_INT 1
16623: ST_TO_ADDR
// vc_chassis := us_morphling ;
16624: LD_ADDR_OWVAR 37
16628: PUSH
16629: LD_INT 5
16631: ST_TO_ADDR
// vc_engine := engine_siberite ;
16632: LD_ADDR_OWVAR 39
16636: PUSH
16637: LD_INT 3
16639: ST_TO_ADDR
// vc_control := control_computer ;
16640: LD_ADDR_OWVAR 38
16644: PUSH
16645: LD_INT 3
16647: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16648: LD_ADDR_OWVAR 40
16652: PUSH
16653: LD_INT 10
16655: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16656: LD_VAR 0 2
16660: PUSH
16661: LD_INT 1
16663: ARRAY
16664: PPUSH
16665: CALL_OW 310
16669: NOT
16670: IFFALSE 16717
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16672: CALL_OW 45
16676: PPUSH
16677: LD_VAR 0 2
16681: PUSH
16682: LD_INT 1
16684: ARRAY
16685: PPUSH
16686: CALL_OW 250
16690: PPUSH
16691: LD_VAR 0 2
16695: PUSH
16696: LD_INT 1
16698: ARRAY
16699: PPUSH
16700: CALL_OW 251
16704: PPUSH
16705: LD_INT 12
16707: PPUSH
16708: LD_INT 1
16710: PPUSH
16711: CALL_OW 50
16715: GO 16729
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16717: CALL_OW 45
16721: PPUSH
16722: LD_INT 1
16724: PPUSH
16725: CALL_OW 51
// end ;
16729: GO 16603
16731: POP
16732: POP
// end ;
16733: PPOPN 2
16735: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16736: LD_EXP 26
16740: PUSH
16741: LD_EXP 72
16745: AND
16746: IFFALSE 16968
16748: GO 16750
16750: DISABLE
16751: LD_INT 0
16753: PPUSH
16754: PPUSH
16755: PPUSH
16756: PPUSH
16757: PPUSH
16758: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16759: LD_ADDR_VAR 0 6
16763: PUSH
16764: LD_INT 22
16766: PUSH
16767: LD_OWVAR 2
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: PUSH
16776: LD_INT 21
16778: PUSH
16779: LD_INT 1
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PUSH
16786: LD_INT 3
16788: PUSH
16789: LD_INT 23
16791: PUSH
16792: LD_INT 0
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: LIST
16807: PPUSH
16808: CALL_OW 69
16812: ST_TO_ADDR
// if not tmp then
16813: LD_VAR 0 6
16817: NOT
16818: IFFALSE 16822
// exit ;
16820: GO 16968
// s1 := rand ( 1 , 4 ) ;
16822: LD_ADDR_VAR 0 2
16826: PUSH
16827: LD_INT 1
16829: PPUSH
16830: LD_INT 4
16832: PPUSH
16833: CALL_OW 12
16837: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16838: LD_ADDR_VAR 0 4
16842: PUSH
16843: LD_VAR 0 6
16847: PUSH
16848: LD_INT 1
16850: ARRAY
16851: PPUSH
16852: LD_VAR 0 2
16856: PPUSH
16857: CALL_OW 259
16861: ST_TO_ADDR
// if s1 = 1 then
16862: LD_VAR 0 2
16866: PUSH
16867: LD_INT 1
16869: EQUAL
16870: IFFALSE 16890
// s2 := rand ( 2 , 4 ) else
16872: LD_ADDR_VAR 0 3
16876: PUSH
16877: LD_INT 2
16879: PPUSH
16880: LD_INT 4
16882: PPUSH
16883: CALL_OW 12
16887: ST_TO_ADDR
16888: GO 16898
// s2 := 1 ;
16890: LD_ADDR_VAR 0 3
16894: PUSH
16895: LD_INT 1
16897: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16898: LD_ADDR_VAR 0 5
16902: PUSH
16903: LD_VAR 0 6
16907: PUSH
16908: LD_INT 1
16910: ARRAY
16911: PPUSH
16912: LD_VAR 0 3
16916: PPUSH
16917: CALL_OW 259
16921: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16922: LD_VAR 0 6
16926: PUSH
16927: LD_INT 1
16929: ARRAY
16930: PPUSH
16931: LD_VAR 0 2
16935: PPUSH
16936: LD_VAR 0 5
16940: PPUSH
16941: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16945: LD_VAR 0 6
16949: PUSH
16950: LD_INT 1
16952: ARRAY
16953: PPUSH
16954: LD_VAR 0 3
16958: PPUSH
16959: LD_VAR 0 4
16963: PPUSH
16964: CALL_OW 237
// end ;
16968: PPOPN 6
16970: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16971: LD_EXP 26
16975: PUSH
16976: LD_EXP 73
16980: AND
16981: IFFALSE 17060
16983: GO 16985
16985: DISABLE
16986: LD_INT 0
16988: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16989: LD_ADDR_VAR 0 1
16993: PUSH
16994: LD_INT 22
16996: PUSH
16997: LD_OWVAR 2
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: PUSH
17006: LD_INT 30
17008: PUSH
17009: LD_INT 3
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PPUSH
17020: CALL_OW 69
17024: ST_TO_ADDR
// if not tmp then
17025: LD_VAR 0 1
17029: NOT
17030: IFFALSE 17034
// exit ;
17032: GO 17060
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17034: LD_VAR 0 1
17038: PUSH
17039: LD_INT 1
17041: PPUSH
17042: LD_VAR 0 1
17046: PPUSH
17047: CALL_OW 12
17051: ARRAY
17052: PPUSH
17053: LD_INT 1
17055: PPUSH
17056: CALL_OW 234
// end ;
17060: PPOPN 1
17062: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17063: LD_EXP 26
17067: PUSH
17068: LD_EXP 74
17072: AND
17073: IFFALSE 17185
17075: GO 17077
17077: DISABLE
17078: LD_INT 0
17080: PPUSH
17081: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17082: LD_ADDR_VAR 0 2
17086: PUSH
17087: LD_INT 22
17089: PUSH
17090: LD_OWVAR 2
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PUSH
17099: LD_INT 2
17101: PUSH
17102: LD_INT 30
17104: PUSH
17105: LD_INT 27
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PUSH
17112: LD_INT 30
17114: PUSH
17115: LD_INT 26
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: PUSH
17122: LD_INT 30
17124: PUSH
17125: LD_INT 28
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: PPUSH
17142: CALL_OW 69
17146: ST_TO_ADDR
// if not tmp then
17147: LD_VAR 0 2
17151: NOT
17152: IFFALSE 17156
// exit ;
17154: GO 17185
// for i in tmp do
17156: LD_ADDR_VAR 0 1
17160: PUSH
17161: LD_VAR 0 2
17165: PUSH
17166: FOR_IN
17167: IFFALSE 17183
// SetLives ( i , 1 ) ;
17169: LD_VAR 0 1
17173: PPUSH
17174: LD_INT 1
17176: PPUSH
17177: CALL_OW 234
17181: GO 17166
17183: POP
17184: POP
// end ;
17185: PPOPN 2
17187: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17188: LD_EXP 26
17192: PUSH
17193: LD_EXP 75
17197: AND
17198: IFFALSE 17485
17200: GO 17202
17202: DISABLE
17203: LD_INT 0
17205: PPUSH
17206: PPUSH
17207: PPUSH
// begin i := rand ( 1 , 7 ) ;
17208: LD_ADDR_VAR 0 1
17212: PUSH
17213: LD_INT 1
17215: PPUSH
17216: LD_INT 7
17218: PPUSH
17219: CALL_OW 12
17223: ST_TO_ADDR
// case i of 1 :
17224: LD_VAR 0 1
17228: PUSH
17229: LD_INT 1
17231: DOUBLE
17232: EQUAL
17233: IFTRUE 17237
17235: GO 17247
17237: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17238: LD_STRING earthquake(getX(game), 0, 32)
17240: PPUSH
17241: CALL_OW 559
17245: GO 17485
17247: LD_INT 2
17249: DOUBLE
17250: EQUAL
17251: IFTRUE 17255
17253: GO 17269
17255: POP
// begin ToLua ( displayStucuk(); ) ;
17256: LD_STRING displayStucuk();
17258: PPUSH
17259: CALL_OW 559
// ResetFog ;
17263: CALL_OW 335
// end ; 3 :
17267: GO 17485
17269: LD_INT 3
17271: DOUBLE
17272: EQUAL
17273: IFTRUE 17277
17275: GO 17381
17277: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17278: LD_ADDR_VAR 0 2
17282: PUSH
17283: LD_INT 22
17285: PUSH
17286: LD_OWVAR 2
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PUSH
17295: LD_INT 25
17297: PUSH
17298: LD_INT 1
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: PPUSH
17309: CALL_OW 69
17313: ST_TO_ADDR
// if not tmp then
17314: LD_VAR 0 2
17318: NOT
17319: IFFALSE 17323
// exit ;
17321: GO 17485
// un := tmp [ rand ( 1 , tmp ) ] ;
17323: LD_ADDR_VAR 0 3
17327: PUSH
17328: LD_VAR 0 2
17332: PUSH
17333: LD_INT 1
17335: PPUSH
17336: LD_VAR 0 2
17340: PPUSH
17341: CALL_OW 12
17345: ARRAY
17346: ST_TO_ADDR
// if Crawls ( un ) then
17347: LD_VAR 0 3
17351: PPUSH
17352: CALL_OW 318
17356: IFFALSE 17367
// ComWalk ( un ) ;
17358: LD_VAR 0 3
17362: PPUSH
17363: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17367: LD_VAR 0 3
17371: PPUSH
17372: LD_INT 8
17374: PPUSH
17375: CALL_OW 336
// end ; 4 :
17379: GO 17485
17381: LD_INT 4
17383: DOUBLE
17384: EQUAL
17385: IFTRUE 17389
17387: GO 17463
17389: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17390: LD_ADDR_VAR 0 2
17394: PUSH
17395: LD_INT 22
17397: PUSH
17398: LD_OWVAR 2
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 30
17409: PUSH
17410: LD_INT 29
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: PPUSH
17421: CALL_OW 69
17425: ST_TO_ADDR
// if not tmp then
17426: LD_VAR 0 2
17430: NOT
17431: IFFALSE 17435
// exit ;
17433: GO 17485
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17435: LD_VAR 0 2
17439: PUSH
17440: LD_INT 1
17442: ARRAY
17443: PPUSH
17444: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17448: LD_VAR 0 2
17452: PUSH
17453: LD_INT 1
17455: ARRAY
17456: PPUSH
17457: CALL_OW 65
// end ; 5 .. 7 :
17461: GO 17485
17463: LD_INT 5
17465: DOUBLE
17466: GREATEREQUAL
17467: IFFALSE 17475
17469: LD_INT 7
17471: DOUBLE
17472: LESSEQUAL
17473: IFTRUE 17477
17475: GO 17484
17477: POP
// StreamSibBomb ; end ;
17478: CALL 13722 0 0
17482: GO 17485
17484: POP
// end ;
17485: PPOPN 3
17487: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17488: LD_EXP 26
17492: PUSH
17493: LD_EXP 76
17497: AND
17498: IFFALSE 17654
17500: GO 17502
17502: DISABLE
17503: LD_INT 0
17505: PPUSH
17506: PPUSH
17507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17508: LD_ADDR_VAR 0 2
17512: PUSH
17513: LD_INT 81
17515: PUSH
17516: LD_OWVAR 2
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 2
17527: PUSH
17528: LD_INT 21
17530: PUSH
17531: LD_INT 1
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 21
17540: PUSH
17541: LD_INT 2
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: LIST
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PPUSH
17557: CALL_OW 69
17561: ST_TO_ADDR
// if not tmp then
17562: LD_VAR 0 2
17566: NOT
17567: IFFALSE 17571
// exit ;
17569: GO 17654
// p := 0 ;
17571: LD_ADDR_VAR 0 3
17575: PUSH
17576: LD_INT 0
17578: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17579: LD_INT 35
17581: PPUSH
17582: CALL_OW 67
// p := p + 1 ;
17586: LD_ADDR_VAR 0 3
17590: PUSH
17591: LD_VAR 0 3
17595: PUSH
17596: LD_INT 1
17598: PLUS
17599: ST_TO_ADDR
// for i in tmp do
17600: LD_ADDR_VAR 0 1
17604: PUSH
17605: LD_VAR 0 2
17609: PUSH
17610: FOR_IN
17611: IFFALSE 17642
// if GetLives ( i ) < 1000 then
17613: LD_VAR 0 1
17617: PPUSH
17618: CALL_OW 256
17622: PUSH
17623: LD_INT 1000
17625: LESS
17626: IFFALSE 17640
// SetLives ( i , 1000 ) ;
17628: LD_VAR 0 1
17632: PPUSH
17633: LD_INT 1000
17635: PPUSH
17636: CALL_OW 234
17640: GO 17610
17642: POP
17643: POP
// until p > 20 ;
17644: LD_VAR 0 3
17648: PUSH
17649: LD_INT 20
17651: GREATER
17652: IFFALSE 17579
// end ;
17654: PPOPN 3
17656: END
// every 0 0$1 trigger StreamModeActive and sTime do
17657: LD_EXP 26
17661: PUSH
17662: LD_EXP 77
17666: AND
17667: IFFALSE 17702
17669: GO 17671
17671: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17672: LD_INT 28
17674: PPUSH
17675: LD_OWVAR 2
17679: PPUSH
17680: LD_INT 2
17682: PPUSH
17683: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17687: LD_INT 30
17689: PPUSH
17690: LD_OWVAR 2
17694: PPUSH
17695: LD_INT 2
17697: PPUSH
17698: CALL_OW 322
// end ;
17702: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17703: LD_EXP 26
17707: PUSH
17708: LD_EXP 78
17712: AND
17713: IFFALSE 17834
17715: GO 17717
17717: DISABLE
17718: LD_INT 0
17720: PPUSH
17721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17722: LD_ADDR_VAR 0 2
17726: PUSH
17727: LD_INT 22
17729: PUSH
17730: LD_OWVAR 2
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: PUSH
17739: LD_INT 21
17741: PUSH
17742: LD_INT 1
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PUSH
17749: LD_INT 3
17751: PUSH
17752: LD_INT 23
17754: PUSH
17755: LD_INT 0
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: LIST
17770: PPUSH
17771: CALL_OW 69
17775: ST_TO_ADDR
// if not tmp then
17776: LD_VAR 0 2
17780: NOT
17781: IFFALSE 17785
// exit ;
17783: GO 17834
// for i in tmp do
17785: LD_ADDR_VAR 0 1
17789: PUSH
17790: LD_VAR 0 2
17794: PUSH
17795: FOR_IN
17796: IFFALSE 17832
// begin if Crawls ( i ) then
17798: LD_VAR 0 1
17802: PPUSH
17803: CALL_OW 318
17807: IFFALSE 17818
// ComWalk ( i ) ;
17809: LD_VAR 0 1
17813: PPUSH
17814: CALL_OW 138
// SetClass ( i , 2 ) ;
17818: LD_VAR 0 1
17822: PPUSH
17823: LD_INT 2
17825: PPUSH
17826: CALL_OW 336
// end ;
17830: GO 17795
17832: POP
17833: POP
// end ;
17834: PPOPN 2
17836: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17837: LD_EXP 26
17841: PUSH
17842: LD_EXP 79
17846: AND
17847: IFFALSE 18135
17849: GO 17851
17851: DISABLE
17852: LD_INT 0
17854: PPUSH
17855: PPUSH
17856: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17857: LD_OWVAR 2
17861: PPUSH
17862: LD_INT 9
17864: PPUSH
17865: LD_INT 1
17867: PPUSH
17868: LD_INT 1
17870: PPUSH
17871: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17875: LD_INT 9
17877: PPUSH
17878: LD_OWVAR 2
17882: PPUSH
17883: CALL_OW 343
// uc_side := 9 ;
17887: LD_ADDR_OWVAR 20
17891: PUSH
17892: LD_INT 9
17894: ST_TO_ADDR
// uc_nation := 2 ;
17895: LD_ADDR_OWVAR 21
17899: PUSH
17900: LD_INT 2
17902: ST_TO_ADDR
// hc_name := Dark Warrior ;
17903: LD_ADDR_OWVAR 26
17907: PUSH
17908: LD_STRING Dark Warrior
17910: ST_TO_ADDR
// hc_gallery :=  ;
17911: LD_ADDR_OWVAR 33
17915: PUSH
17916: LD_STRING 
17918: ST_TO_ADDR
// hc_noskilllimit := true ;
17919: LD_ADDR_OWVAR 76
17923: PUSH
17924: LD_INT 1
17926: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17927: LD_ADDR_OWVAR 31
17931: PUSH
17932: LD_INT 30
17934: PUSH
17935: LD_INT 30
17937: PUSH
17938: LD_INT 30
17940: PUSH
17941: LD_INT 30
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: ST_TO_ADDR
// un := CreateHuman ;
17950: LD_ADDR_VAR 0 3
17954: PUSH
17955: CALL_OW 44
17959: ST_TO_ADDR
// hc_noskilllimit := false ;
17960: LD_ADDR_OWVAR 76
17964: PUSH
17965: LD_INT 0
17967: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17968: LD_VAR 0 3
17972: PPUSH
17973: LD_INT 1
17975: PPUSH
17976: CALL_OW 51
// ToLua ( playRanger() ) ;
17980: LD_STRING playRanger()
17982: PPUSH
17983: CALL_OW 559
// p := 0 ;
17987: LD_ADDR_VAR 0 2
17991: PUSH
17992: LD_INT 0
17994: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17995: LD_INT 35
17997: PPUSH
17998: CALL_OW 67
// p := p + 1 ;
18002: LD_ADDR_VAR 0 2
18006: PUSH
18007: LD_VAR 0 2
18011: PUSH
18012: LD_INT 1
18014: PLUS
18015: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18016: LD_VAR 0 3
18020: PPUSH
18021: CALL_OW 256
18025: PUSH
18026: LD_INT 1000
18028: LESS
18029: IFFALSE 18043
// SetLives ( un , 1000 ) ;
18031: LD_VAR 0 3
18035: PPUSH
18036: LD_INT 1000
18038: PPUSH
18039: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18043: LD_VAR 0 3
18047: PPUSH
18048: LD_INT 81
18050: PUSH
18051: LD_OWVAR 2
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 91
18062: PUSH
18063: LD_VAR 0 3
18067: PUSH
18068: LD_INT 30
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: LIST
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PPUSH
18080: CALL_OW 69
18084: PPUSH
18085: LD_VAR 0 3
18089: PPUSH
18090: CALL_OW 74
18094: PPUSH
18095: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
18099: LD_VAR 0 2
18103: PUSH
18104: LD_INT 80
18106: GREATER
18107: PUSH
18108: LD_VAR 0 3
18112: PPUSH
18113: CALL_OW 301
18117: OR
18118: IFFALSE 17995
// if un then
18120: LD_VAR 0 3
18124: IFFALSE 18135
// RemoveUnit ( un ) ;
18126: LD_VAR 0 3
18130: PPUSH
18131: CALL_OW 64
// end ;
18135: PPOPN 3
18137: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
18138: LD_EXP 80
18142: IFFALSE 18258
18144: GO 18146
18146: DISABLE
18147: LD_INT 0
18149: PPUSH
18150: PPUSH
18151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18152: LD_ADDR_VAR 0 2
18156: PUSH
18157: LD_INT 81
18159: PUSH
18160: LD_OWVAR 2
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: PUSH
18169: LD_INT 21
18171: PUSH
18172: LD_INT 1
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PPUSH
18183: CALL_OW 69
18187: ST_TO_ADDR
// ToLua ( playComputer() ) ;
18188: LD_STRING playComputer()
18190: PPUSH
18191: CALL_OW 559
// if not tmp then
18195: LD_VAR 0 2
18199: NOT
18200: IFFALSE 18204
// exit ;
18202: GO 18258
// for i in tmp do
18204: LD_ADDR_VAR 0 1
18208: PUSH
18209: LD_VAR 0 2
18213: PUSH
18214: FOR_IN
18215: IFFALSE 18256
// for j := 1 to 4 do
18217: LD_ADDR_VAR 0 3
18221: PUSH
18222: DOUBLE
18223: LD_INT 1
18225: DEC
18226: ST_TO_ADDR
18227: LD_INT 4
18229: PUSH
18230: FOR_TO
18231: IFFALSE 18252
// SetSkill ( i , j , 10 ) ;
18233: LD_VAR 0 1
18237: PPUSH
18238: LD_VAR 0 3
18242: PPUSH
18243: LD_INT 10
18245: PPUSH
18246: CALL_OW 237
18250: GO 18230
18252: POP
18253: POP
18254: GO 18214
18256: POP
18257: POP
// end ;
18258: PPOPN 3
18260: END
// every 0 0$1 trigger s30 do var i , tmp ;
18261: LD_EXP 81
18265: IFFALSE 18334
18267: GO 18269
18269: DISABLE
18270: LD_INT 0
18272: PPUSH
18273: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18274: LD_ADDR_VAR 0 2
18278: PUSH
18279: LD_INT 22
18281: PUSH
18282: LD_OWVAR 2
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PPUSH
18291: CALL_OW 69
18295: ST_TO_ADDR
// if not tmp then
18296: LD_VAR 0 2
18300: NOT
18301: IFFALSE 18305
// exit ;
18303: GO 18334
// for i in tmp do
18305: LD_ADDR_VAR 0 1
18309: PUSH
18310: LD_VAR 0 2
18314: PUSH
18315: FOR_IN
18316: IFFALSE 18332
// SetLives ( i , 300 ) ;
18318: LD_VAR 0 1
18322: PPUSH
18323: LD_INT 300
18325: PPUSH
18326: CALL_OW 234
18330: GO 18315
18332: POP
18333: POP
// end ;
18334: PPOPN 2
18336: END
// every 0 0$1 trigger s60 do var i , tmp ;
18337: LD_EXP 82
18341: IFFALSE 18410
18343: GO 18345
18345: DISABLE
18346: LD_INT 0
18348: PPUSH
18349: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18350: LD_ADDR_VAR 0 2
18354: PUSH
18355: LD_INT 22
18357: PUSH
18358: LD_OWVAR 2
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PPUSH
18367: CALL_OW 69
18371: ST_TO_ADDR
// if not tmp then
18372: LD_VAR 0 2
18376: NOT
18377: IFFALSE 18381
// exit ;
18379: GO 18410
// for i in tmp do
18381: LD_ADDR_VAR 0 1
18385: PUSH
18386: LD_VAR 0 2
18390: PUSH
18391: FOR_IN
18392: IFFALSE 18408
// SetLives ( i , 600 ) ;
18394: LD_VAR 0 1
18398: PPUSH
18399: LD_INT 600
18401: PPUSH
18402: CALL_OW 234
18406: GO 18391
18408: POP
18409: POP
// end ;
18410: PPOPN 2
18412: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18413: LD_INT 0
18415: PPUSH
// case cmd of 301 :
18416: LD_VAR 0 1
18420: PUSH
18421: LD_INT 301
18423: DOUBLE
18424: EQUAL
18425: IFTRUE 18429
18427: GO 18461
18429: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18430: LD_VAR 0 6
18434: PPUSH
18435: LD_VAR 0 7
18439: PPUSH
18440: LD_VAR 0 8
18444: PPUSH
18445: LD_VAR 0 4
18449: PPUSH
18450: LD_VAR 0 5
18454: PPUSH
18455: CALL 19670 0 5
18459: GO 18582
18461: LD_INT 302
18463: DOUBLE
18464: EQUAL
18465: IFTRUE 18469
18467: GO 18506
18469: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18470: LD_VAR 0 6
18474: PPUSH
18475: LD_VAR 0 7
18479: PPUSH
18480: LD_VAR 0 8
18484: PPUSH
18485: LD_VAR 0 9
18489: PPUSH
18490: LD_VAR 0 4
18494: PPUSH
18495: LD_VAR 0 5
18499: PPUSH
18500: CALL 19761 0 6
18504: GO 18582
18506: LD_INT 303
18508: DOUBLE
18509: EQUAL
18510: IFTRUE 18514
18512: GO 18551
18514: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18515: LD_VAR 0 6
18519: PPUSH
18520: LD_VAR 0 7
18524: PPUSH
18525: LD_VAR 0 8
18529: PPUSH
18530: LD_VAR 0 9
18534: PPUSH
18535: LD_VAR 0 4
18539: PPUSH
18540: LD_VAR 0 5
18544: PPUSH
18545: CALL 18587 0 6
18549: GO 18582
18551: LD_INT 304
18553: DOUBLE
18554: EQUAL
18555: IFTRUE 18559
18557: GO 18581
18559: POP
// hHackTeleport ( unit , x , y ) ; end ;
18560: LD_VAR 0 2
18564: PPUSH
18565: LD_VAR 0 4
18569: PPUSH
18570: LD_VAR 0 5
18574: PPUSH
18575: CALL 20354 0 3
18579: GO 18582
18581: POP
// end ;
18582: LD_VAR 0 12
18586: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18587: LD_INT 0
18589: PPUSH
18590: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18591: LD_VAR 0 1
18595: PUSH
18596: LD_INT 1
18598: LESS
18599: PUSH
18600: LD_VAR 0 1
18604: PUSH
18605: LD_INT 3
18607: GREATER
18608: OR
18609: PUSH
18610: LD_VAR 0 5
18614: PPUSH
18615: LD_VAR 0 6
18619: PPUSH
18620: CALL_OW 428
18624: OR
18625: IFFALSE 18629
// exit ;
18627: GO 19357
// uc_side := your_side ;
18629: LD_ADDR_OWVAR 20
18633: PUSH
18634: LD_OWVAR 2
18638: ST_TO_ADDR
// uc_nation := nation ;
18639: LD_ADDR_OWVAR 21
18643: PUSH
18644: LD_VAR 0 1
18648: ST_TO_ADDR
// bc_level = 1 ;
18649: LD_ADDR_OWVAR 43
18653: PUSH
18654: LD_INT 1
18656: ST_TO_ADDR
// case btype of 1 :
18657: LD_VAR 0 2
18661: PUSH
18662: LD_INT 1
18664: DOUBLE
18665: EQUAL
18666: IFTRUE 18670
18668: GO 18681
18670: POP
// bc_type := b_depot ; 2 :
18671: LD_ADDR_OWVAR 42
18675: PUSH
18676: LD_INT 0
18678: ST_TO_ADDR
18679: GO 19301
18681: LD_INT 2
18683: DOUBLE
18684: EQUAL
18685: IFTRUE 18689
18687: GO 18700
18689: POP
// bc_type := b_warehouse ; 3 :
18690: LD_ADDR_OWVAR 42
18694: PUSH
18695: LD_INT 1
18697: ST_TO_ADDR
18698: GO 19301
18700: LD_INT 3
18702: DOUBLE
18703: EQUAL
18704: IFTRUE 18708
18706: GO 18719
18708: POP
// bc_type := b_lab ; 4 .. 9 :
18709: LD_ADDR_OWVAR 42
18713: PUSH
18714: LD_INT 6
18716: ST_TO_ADDR
18717: GO 19301
18719: LD_INT 4
18721: DOUBLE
18722: GREATEREQUAL
18723: IFFALSE 18731
18725: LD_INT 9
18727: DOUBLE
18728: LESSEQUAL
18729: IFTRUE 18733
18731: GO 18793
18733: POP
// begin bc_type := b_lab_half ;
18734: LD_ADDR_OWVAR 42
18738: PUSH
18739: LD_INT 7
18741: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18742: LD_ADDR_OWVAR 44
18746: PUSH
18747: LD_INT 10
18749: PUSH
18750: LD_INT 11
18752: PUSH
18753: LD_INT 12
18755: PUSH
18756: LD_INT 15
18758: PUSH
18759: LD_INT 14
18761: PUSH
18762: LD_INT 13
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: PUSH
18773: LD_VAR 0 2
18777: PUSH
18778: LD_INT 3
18780: MINUS
18781: ARRAY
18782: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
18783: LD_ADDR_OWVAR 45
18787: PUSH
18788: LD_INT 9
18790: ST_TO_ADDR
// end ; 10 .. 13 :
18791: GO 19301
18793: LD_INT 10
18795: DOUBLE
18796: GREATEREQUAL
18797: IFFALSE 18805
18799: LD_INT 13
18801: DOUBLE
18802: LESSEQUAL
18803: IFTRUE 18807
18805: GO 18884
18807: POP
// begin bc_type := b_lab_full ;
18808: LD_ADDR_OWVAR 42
18812: PUSH
18813: LD_INT 8
18815: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18816: LD_ADDR_OWVAR 44
18820: PUSH
18821: LD_INT 10
18823: PUSH
18824: LD_INT 12
18826: PUSH
18827: LD_INT 14
18829: PUSH
18830: LD_INT 13
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: LIST
18837: LIST
18838: PUSH
18839: LD_VAR 0 2
18843: PUSH
18844: LD_INT 9
18846: MINUS
18847: ARRAY
18848: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18849: LD_ADDR_OWVAR 45
18853: PUSH
18854: LD_INT 11
18856: PUSH
18857: LD_INT 15
18859: PUSH
18860: LD_INT 12
18862: PUSH
18863: LD_INT 15
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: PUSH
18872: LD_VAR 0 2
18876: PUSH
18877: LD_INT 9
18879: MINUS
18880: ARRAY
18881: ST_TO_ADDR
// end ; 14 :
18882: GO 19301
18884: LD_INT 14
18886: DOUBLE
18887: EQUAL
18888: IFTRUE 18892
18890: GO 18903
18892: POP
// bc_type := b_workshop ; 15 :
18893: LD_ADDR_OWVAR 42
18897: PUSH
18898: LD_INT 2
18900: ST_TO_ADDR
18901: GO 19301
18903: LD_INT 15
18905: DOUBLE
18906: EQUAL
18907: IFTRUE 18911
18909: GO 18922
18911: POP
// bc_type := b_factory ; 16 :
18912: LD_ADDR_OWVAR 42
18916: PUSH
18917: LD_INT 3
18919: ST_TO_ADDR
18920: GO 19301
18922: LD_INT 16
18924: DOUBLE
18925: EQUAL
18926: IFTRUE 18930
18928: GO 18941
18930: POP
// bc_type := b_ext_gun ; 17 :
18931: LD_ADDR_OWVAR 42
18935: PUSH
18936: LD_INT 17
18938: ST_TO_ADDR
18939: GO 19301
18941: LD_INT 17
18943: DOUBLE
18944: EQUAL
18945: IFTRUE 18949
18947: GO 18977
18949: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18950: LD_ADDR_OWVAR 42
18954: PUSH
18955: LD_INT 19
18957: PUSH
18958: LD_INT 23
18960: PUSH
18961: LD_INT 19
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: LIST
18968: PUSH
18969: LD_VAR 0 1
18973: ARRAY
18974: ST_TO_ADDR
18975: GO 19301
18977: LD_INT 18
18979: DOUBLE
18980: EQUAL
18981: IFTRUE 18985
18983: GO 18996
18985: POP
// bc_type := b_ext_radar ; 19 :
18986: LD_ADDR_OWVAR 42
18990: PUSH
18991: LD_INT 20
18993: ST_TO_ADDR
18994: GO 19301
18996: LD_INT 19
18998: DOUBLE
18999: EQUAL
19000: IFTRUE 19004
19002: GO 19015
19004: POP
// bc_type := b_ext_radio ; 20 :
19005: LD_ADDR_OWVAR 42
19009: PUSH
19010: LD_INT 22
19012: ST_TO_ADDR
19013: GO 19301
19015: LD_INT 20
19017: DOUBLE
19018: EQUAL
19019: IFTRUE 19023
19021: GO 19034
19023: POP
// bc_type := b_ext_siberium ; 21 :
19024: LD_ADDR_OWVAR 42
19028: PUSH
19029: LD_INT 21
19031: ST_TO_ADDR
19032: GO 19301
19034: LD_INT 21
19036: DOUBLE
19037: EQUAL
19038: IFTRUE 19042
19040: GO 19053
19042: POP
// bc_type := b_ext_computer ; 22 :
19043: LD_ADDR_OWVAR 42
19047: PUSH
19048: LD_INT 24
19050: ST_TO_ADDR
19051: GO 19301
19053: LD_INT 22
19055: DOUBLE
19056: EQUAL
19057: IFTRUE 19061
19059: GO 19072
19061: POP
// bc_type := b_ext_track ; 23 :
19062: LD_ADDR_OWVAR 42
19066: PUSH
19067: LD_INT 16
19069: ST_TO_ADDR
19070: GO 19301
19072: LD_INT 23
19074: DOUBLE
19075: EQUAL
19076: IFTRUE 19080
19078: GO 19091
19080: POP
// bc_type := b_ext_laser ; 24 :
19081: LD_ADDR_OWVAR 42
19085: PUSH
19086: LD_INT 25
19088: ST_TO_ADDR
19089: GO 19301
19091: LD_INT 24
19093: DOUBLE
19094: EQUAL
19095: IFTRUE 19099
19097: GO 19110
19099: POP
// bc_type := b_control_tower ; 25 :
19100: LD_ADDR_OWVAR 42
19104: PUSH
19105: LD_INT 36
19107: ST_TO_ADDR
19108: GO 19301
19110: LD_INT 25
19112: DOUBLE
19113: EQUAL
19114: IFTRUE 19118
19116: GO 19129
19118: POP
// bc_type := b_breastwork ; 26 :
19119: LD_ADDR_OWVAR 42
19123: PUSH
19124: LD_INT 31
19126: ST_TO_ADDR
19127: GO 19301
19129: LD_INT 26
19131: DOUBLE
19132: EQUAL
19133: IFTRUE 19137
19135: GO 19148
19137: POP
// bc_type := b_bunker ; 27 :
19138: LD_ADDR_OWVAR 42
19142: PUSH
19143: LD_INT 32
19145: ST_TO_ADDR
19146: GO 19301
19148: LD_INT 27
19150: DOUBLE
19151: EQUAL
19152: IFTRUE 19156
19154: GO 19167
19156: POP
// bc_type := b_turret ; 28 :
19157: LD_ADDR_OWVAR 42
19161: PUSH
19162: LD_INT 33
19164: ST_TO_ADDR
19165: GO 19301
19167: LD_INT 28
19169: DOUBLE
19170: EQUAL
19171: IFTRUE 19175
19173: GO 19186
19175: POP
// bc_type := b_armoury ; 29 :
19176: LD_ADDR_OWVAR 42
19180: PUSH
19181: LD_INT 4
19183: ST_TO_ADDR
19184: GO 19301
19186: LD_INT 29
19188: DOUBLE
19189: EQUAL
19190: IFTRUE 19194
19192: GO 19205
19194: POP
// bc_type := b_barracks ; 30 :
19195: LD_ADDR_OWVAR 42
19199: PUSH
19200: LD_INT 5
19202: ST_TO_ADDR
19203: GO 19301
19205: LD_INT 30
19207: DOUBLE
19208: EQUAL
19209: IFTRUE 19213
19211: GO 19224
19213: POP
// bc_type := b_solar_power ; 31 :
19214: LD_ADDR_OWVAR 42
19218: PUSH
19219: LD_INT 27
19221: ST_TO_ADDR
19222: GO 19301
19224: LD_INT 31
19226: DOUBLE
19227: EQUAL
19228: IFTRUE 19232
19230: GO 19243
19232: POP
// bc_type := b_oil_power ; 32 :
19233: LD_ADDR_OWVAR 42
19237: PUSH
19238: LD_INT 26
19240: ST_TO_ADDR
19241: GO 19301
19243: LD_INT 32
19245: DOUBLE
19246: EQUAL
19247: IFTRUE 19251
19249: GO 19262
19251: POP
// bc_type := b_siberite_power ; 33 :
19252: LD_ADDR_OWVAR 42
19256: PUSH
19257: LD_INT 28
19259: ST_TO_ADDR
19260: GO 19301
19262: LD_INT 33
19264: DOUBLE
19265: EQUAL
19266: IFTRUE 19270
19268: GO 19281
19270: POP
// bc_type := b_oil_mine ; 34 :
19271: LD_ADDR_OWVAR 42
19275: PUSH
19276: LD_INT 29
19278: ST_TO_ADDR
19279: GO 19301
19281: LD_INT 34
19283: DOUBLE
19284: EQUAL
19285: IFTRUE 19289
19287: GO 19300
19289: POP
// bc_type := b_siberite_mine ; end ;
19290: LD_ADDR_OWVAR 42
19294: PUSH
19295: LD_INT 30
19297: ST_TO_ADDR
19298: GO 19301
19300: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19301: LD_ADDR_VAR 0 8
19305: PUSH
19306: LD_VAR 0 5
19310: PPUSH
19311: LD_VAR 0 6
19315: PPUSH
19316: LD_VAR 0 3
19320: PPUSH
19321: CALL_OW 47
19325: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19326: LD_OWVAR 42
19330: PUSH
19331: LD_INT 32
19333: PUSH
19334: LD_INT 33
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: IN
19341: IFFALSE 19357
// PlaceWeaponTurret ( b , weapon ) ;
19343: LD_VAR 0 8
19347: PPUSH
19348: LD_VAR 0 4
19352: PPUSH
19353: CALL_OW 431
// end ;
19357: LD_VAR 0 7
19361: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19362: LD_INT 0
19364: PPUSH
19365: PPUSH
19366: PPUSH
19367: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19368: LD_ADDR_VAR 0 4
19372: PUSH
19373: LD_INT 22
19375: PUSH
19376: LD_OWVAR 2
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: PUSH
19385: LD_INT 2
19387: PUSH
19388: LD_INT 30
19390: PUSH
19391: LD_INT 0
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PUSH
19398: LD_INT 30
19400: PUSH
19401: LD_INT 1
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: LIST
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PPUSH
19417: CALL_OW 69
19421: ST_TO_ADDR
// if not tmp then
19422: LD_VAR 0 4
19426: NOT
19427: IFFALSE 19431
// exit ;
19429: GO 19490
// for i in tmp do
19431: LD_ADDR_VAR 0 2
19435: PUSH
19436: LD_VAR 0 4
19440: PUSH
19441: FOR_IN
19442: IFFALSE 19488
// for j = 1 to 3 do
19444: LD_ADDR_VAR 0 3
19448: PUSH
19449: DOUBLE
19450: LD_INT 1
19452: DEC
19453: ST_TO_ADDR
19454: LD_INT 3
19456: PUSH
19457: FOR_TO
19458: IFFALSE 19484
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19460: LD_VAR 0 2
19464: PPUSH
19465: CALL_OW 274
19469: PPUSH
19470: LD_VAR 0 3
19474: PPUSH
19475: LD_INT 99999
19477: PPUSH
19478: CALL_OW 277
19482: GO 19457
19484: POP
19485: POP
19486: GO 19441
19488: POP
19489: POP
// end ;
19490: LD_VAR 0 1
19494: RET
// export function hHackSetLevel10 ; var i , j ; begin
19495: LD_INT 0
19497: PPUSH
19498: PPUSH
19499: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19500: LD_ADDR_VAR 0 2
19504: PUSH
19505: LD_INT 21
19507: PUSH
19508: LD_INT 1
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PPUSH
19515: CALL_OW 69
19519: PUSH
19520: FOR_IN
19521: IFFALSE 19573
// if IsSelected ( i ) then
19523: LD_VAR 0 2
19527: PPUSH
19528: CALL_OW 306
19532: IFFALSE 19571
// begin for j := 1 to 4 do
19534: LD_ADDR_VAR 0 3
19538: PUSH
19539: DOUBLE
19540: LD_INT 1
19542: DEC
19543: ST_TO_ADDR
19544: LD_INT 4
19546: PUSH
19547: FOR_TO
19548: IFFALSE 19569
// SetSkill ( i , j , 10 ) ;
19550: LD_VAR 0 2
19554: PPUSH
19555: LD_VAR 0 3
19559: PPUSH
19560: LD_INT 10
19562: PPUSH
19563: CALL_OW 237
19567: GO 19547
19569: POP
19570: POP
// end ;
19571: GO 19520
19573: POP
19574: POP
// end ;
19575: LD_VAR 0 1
19579: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19580: LD_INT 0
19582: PPUSH
19583: PPUSH
19584: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19585: LD_ADDR_VAR 0 2
19589: PUSH
19590: LD_INT 22
19592: PUSH
19593: LD_OWVAR 2
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: LD_INT 21
19604: PUSH
19605: LD_INT 1
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PPUSH
19616: CALL_OW 69
19620: PUSH
19621: FOR_IN
19622: IFFALSE 19663
// begin for j := 1 to 4 do
19624: LD_ADDR_VAR 0 3
19628: PUSH
19629: DOUBLE
19630: LD_INT 1
19632: DEC
19633: ST_TO_ADDR
19634: LD_INT 4
19636: PUSH
19637: FOR_TO
19638: IFFALSE 19659
// SetSkill ( i , j , 10 ) ;
19640: LD_VAR 0 2
19644: PPUSH
19645: LD_VAR 0 3
19649: PPUSH
19650: LD_INT 10
19652: PPUSH
19653: CALL_OW 237
19657: GO 19637
19659: POP
19660: POP
// end ;
19661: GO 19621
19663: POP
19664: POP
// end ;
19665: LD_VAR 0 1
19669: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19670: LD_INT 0
19672: PPUSH
// uc_side := your_side ;
19673: LD_ADDR_OWVAR 20
19677: PUSH
19678: LD_OWVAR 2
19682: ST_TO_ADDR
// uc_nation := nation ;
19683: LD_ADDR_OWVAR 21
19687: PUSH
19688: LD_VAR 0 1
19692: ST_TO_ADDR
// InitHc ;
19693: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19697: LD_INT 0
19699: PPUSH
19700: LD_VAR 0 2
19704: PPUSH
19705: LD_VAR 0 3
19709: PPUSH
19710: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19714: LD_VAR 0 4
19718: PPUSH
19719: LD_VAR 0 5
19723: PPUSH
19724: CALL_OW 428
19728: PUSH
19729: LD_INT 0
19731: EQUAL
19732: IFFALSE 19756
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19734: CALL_OW 44
19738: PPUSH
19739: LD_VAR 0 4
19743: PPUSH
19744: LD_VAR 0 5
19748: PPUSH
19749: LD_INT 1
19751: PPUSH
19752: CALL_OW 48
// end ;
19756: LD_VAR 0 6
19760: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19761: LD_INT 0
19763: PPUSH
19764: PPUSH
// uc_side := your_side ;
19765: LD_ADDR_OWVAR 20
19769: PUSH
19770: LD_OWVAR 2
19774: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19775: LD_VAR 0 1
19779: PUSH
19780: LD_INT 1
19782: PUSH
19783: LD_INT 2
19785: PUSH
19786: LD_INT 3
19788: PUSH
19789: LD_INT 4
19791: PUSH
19792: LD_INT 5
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: IN
19802: IFFALSE 19814
// uc_nation := nation_american else
19804: LD_ADDR_OWVAR 21
19808: PUSH
19809: LD_INT 1
19811: ST_TO_ADDR
19812: GO 19857
// if chassis in [ 11 , 12 , 13 , 14 ] then
19814: LD_VAR 0 1
19818: PUSH
19819: LD_INT 11
19821: PUSH
19822: LD_INT 12
19824: PUSH
19825: LD_INT 13
19827: PUSH
19828: LD_INT 14
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: IN
19837: IFFALSE 19849
// uc_nation := nation_arabian else
19839: LD_ADDR_OWVAR 21
19843: PUSH
19844: LD_INT 2
19846: ST_TO_ADDR
19847: GO 19857
// uc_nation := nation_russian ;
19849: LD_ADDR_OWVAR 21
19853: PUSH
19854: LD_INT 3
19856: ST_TO_ADDR
// vc_chassis := chassis ;
19857: LD_ADDR_OWVAR 37
19861: PUSH
19862: LD_VAR 0 1
19866: ST_TO_ADDR
// vc_engine := engine ;
19867: LD_ADDR_OWVAR 39
19871: PUSH
19872: LD_VAR 0 2
19876: ST_TO_ADDR
// vc_control := control ;
19877: LD_ADDR_OWVAR 38
19881: PUSH
19882: LD_VAR 0 3
19886: ST_TO_ADDR
// vc_weapon := weapon ;
19887: LD_ADDR_OWVAR 40
19891: PUSH
19892: LD_VAR 0 4
19896: ST_TO_ADDR
// un := CreateVehicle ;
19897: LD_ADDR_VAR 0 8
19901: PUSH
19902: CALL_OW 45
19906: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19907: LD_VAR 0 8
19911: PPUSH
19912: LD_INT 0
19914: PPUSH
19915: LD_INT 5
19917: PPUSH
19918: CALL_OW 12
19922: PPUSH
19923: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19927: LD_VAR 0 8
19931: PPUSH
19932: LD_VAR 0 5
19936: PPUSH
19937: LD_VAR 0 6
19941: PPUSH
19942: LD_INT 1
19944: PPUSH
19945: CALL_OW 48
// end ;
19949: LD_VAR 0 7
19953: RET
// export hInvincible ; every 1 do
19954: GO 19956
19956: DISABLE
// hInvincible := [ ] ;
19957: LD_ADDR_EXP 83
19961: PUSH
19962: EMPTY
19963: ST_TO_ADDR
19964: END
// every 10 do var i ;
19965: GO 19967
19967: DISABLE
19968: LD_INT 0
19970: PPUSH
// begin enable ;
19971: ENABLE
// if not hInvincible then
19972: LD_EXP 83
19976: NOT
19977: IFFALSE 19981
// exit ;
19979: GO 20025
// for i in hInvincible do
19981: LD_ADDR_VAR 0 1
19985: PUSH
19986: LD_EXP 83
19990: PUSH
19991: FOR_IN
19992: IFFALSE 20023
// if GetLives ( i ) < 1000 then
19994: LD_VAR 0 1
19998: PPUSH
19999: CALL_OW 256
20003: PUSH
20004: LD_INT 1000
20006: LESS
20007: IFFALSE 20021
// SetLives ( i , 1000 ) ;
20009: LD_VAR 0 1
20013: PPUSH
20014: LD_INT 1000
20016: PPUSH
20017: CALL_OW 234
20021: GO 19991
20023: POP
20024: POP
// end ;
20025: PPOPN 1
20027: END
// export function hHackInvincible ; var i ; begin
20028: LD_INT 0
20030: PPUSH
20031: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20032: LD_ADDR_VAR 0 2
20036: PUSH
20037: LD_INT 2
20039: PUSH
20040: LD_INT 21
20042: PUSH
20043: LD_INT 1
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: PUSH
20050: LD_INT 21
20052: PUSH
20053: LD_INT 2
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: LIST
20064: PPUSH
20065: CALL_OW 69
20069: PUSH
20070: FOR_IN
20071: IFFALSE 20132
// if IsSelected ( i ) then
20073: LD_VAR 0 2
20077: PPUSH
20078: CALL_OW 306
20082: IFFALSE 20130
// begin if i in hInvincible then
20084: LD_VAR 0 2
20088: PUSH
20089: LD_EXP 83
20093: IN
20094: IFFALSE 20114
// hInvincible := hInvincible diff i else
20096: LD_ADDR_EXP 83
20100: PUSH
20101: LD_EXP 83
20105: PUSH
20106: LD_VAR 0 2
20110: DIFF
20111: ST_TO_ADDR
20112: GO 20130
// hInvincible := hInvincible union i ;
20114: LD_ADDR_EXP 83
20118: PUSH
20119: LD_EXP 83
20123: PUSH
20124: LD_VAR 0 2
20128: UNION
20129: ST_TO_ADDR
// end ;
20130: GO 20070
20132: POP
20133: POP
// end ;
20134: LD_VAR 0 1
20138: RET
// export function hHackInvisible ; var i , j ; begin
20139: LD_INT 0
20141: PPUSH
20142: PPUSH
20143: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20144: LD_ADDR_VAR 0 2
20148: PUSH
20149: LD_INT 21
20151: PUSH
20152: LD_INT 1
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: PPUSH
20159: CALL_OW 69
20163: PUSH
20164: FOR_IN
20165: IFFALSE 20189
// if IsSelected ( i ) then
20167: LD_VAR 0 2
20171: PPUSH
20172: CALL_OW 306
20176: IFFALSE 20187
// ComForceInvisible ( i ) ;
20178: LD_VAR 0 2
20182: PPUSH
20183: CALL_OW 496
20187: GO 20164
20189: POP
20190: POP
// end ;
20191: LD_VAR 0 1
20195: RET
// export function hHackChangeYourSide ; begin
20196: LD_INT 0
20198: PPUSH
// if your_side = 8 then
20199: LD_OWVAR 2
20203: PUSH
20204: LD_INT 8
20206: EQUAL
20207: IFFALSE 20219
// your_side := 0 else
20209: LD_ADDR_OWVAR 2
20213: PUSH
20214: LD_INT 0
20216: ST_TO_ADDR
20217: GO 20233
// your_side := your_side + 1 ;
20219: LD_ADDR_OWVAR 2
20223: PUSH
20224: LD_OWVAR 2
20228: PUSH
20229: LD_INT 1
20231: PLUS
20232: ST_TO_ADDR
// end ;
20233: LD_VAR 0 1
20237: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20238: LD_INT 0
20240: PPUSH
20241: PPUSH
20242: PPUSH
// for i in all_units do
20243: LD_ADDR_VAR 0 2
20247: PUSH
20248: LD_OWVAR 3
20252: PUSH
20253: FOR_IN
20254: IFFALSE 20332
// if IsSelected ( i ) then
20256: LD_VAR 0 2
20260: PPUSH
20261: CALL_OW 306
20265: IFFALSE 20330
// begin j := GetSide ( i ) ;
20267: LD_ADDR_VAR 0 3
20271: PUSH
20272: LD_VAR 0 2
20276: PPUSH
20277: CALL_OW 255
20281: ST_TO_ADDR
// if j = 8 then
20282: LD_VAR 0 3
20286: PUSH
20287: LD_INT 8
20289: EQUAL
20290: IFFALSE 20302
// j := 0 else
20292: LD_ADDR_VAR 0 3
20296: PUSH
20297: LD_INT 0
20299: ST_TO_ADDR
20300: GO 20316
// j := j + 1 ;
20302: LD_ADDR_VAR 0 3
20306: PUSH
20307: LD_VAR 0 3
20311: PUSH
20312: LD_INT 1
20314: PLUS
20315: ST_TO_ADDR
// SetSide ( i , j ) ;
20316: LD_VAR 0 2
20320: PPUSH
20321: LD_VAR 0 3
20325: PPUSH
20326: CALL_OW 235
// end ;
20330: GO 20253
20332: POP
20333: POP
// end ;
20334: LD_VAR 0 1
20338: RET
// export function hHackFog ; begin
20339: LD_INT 0
20341: PPUSH
// FogOff ( true ) ;
20342: LD_INT 1
20344: PPUSH
20345: CALL_OW 344
// end ;
20349: LD_VAR 0 1
20353: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20354: LD_INT 0
20356: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20357: LD_VAR 0 1
20361: PPUSH
20362: LD_VAR 0 2
20366: PPUSH
20367: LD_VAR 0 3
20371: PPUSH
20372: LD_INT 1
20374: PPUSH
20375: LD_INT 1
20377: PPUSH
20378: CALL_OW 483
// CenterOnXY ( x , y ) ;
20382: LD_VAR 0 2
20386: PPUSH
20387: LD_VAR 0 3
20391: PPUSH
20392: CALL_OW 84
// end ;
20396: LD_VAR 0 4
20400: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
20401: LD_INT 0
20403: PPUSH
20404: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
20405: LD_VAR 0 1
20409: NOT
20410: PUSH
20411: LD_VAR 0 2
20415: PPUSH
20416: LD_VAR 0 3
20420: PPUSH
20421: CALL_OW 488
20425: NOT
20426: OR
20427: PUSH
20428: LD_VAR 0 1
20432: PPUSH
20433: CALL_OW 266
20437: PUSH
20438: LD_INT 3
20440: NONEQUAL
20441: PUSH
20442: LD_VAR 0 1
20446: PPUSH
20447: CALL_OW 247
20451: PUSH
20452: LD_INT 1
20454: EQUAL
20455: NOT
20456: AND
20457: OR
20458: IFFALSE 20462
// exit ;
20460: GO 20611
// if GetType ( factory ) = unit_human then
20462: LD_VAR 0 1
20466: PPUSH
20467: CALL_OW 247
20471: PUSH
20472: LD_INT 1
20474: EQUAL
20475: IFFALSE 20492
// factory := IsInUnit ( factory ) ;
20477: LD_ADDR_VAR 0 1
20481: PUSH
20482: LD_VAR 0 1
20486: PPUSH
20487: CALL_OW 310
20491: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20492: LD_VAR 0 1
20496: PPUSH
20497: CALL_OW 266
20501: PUSH
20502: LD_INT 3
20504: NONEQUAL
20505: IFFALSE 20509
// exit ;
20507: GO 20611
// if HexInfo ( x , y ) = factory then
20509: LD_VAR 0 2
20513: PPUSH
20514: LD_VAR 0 3
20518: PPUSH
20519: CALL_OW 428
20523: PUSH
20524: LD_VAR 0 1
20528: EQUAL
20529: IFFALSE 20556
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20531: LD_ADDR_EXP 84
20535: PUSH
20536: LD_EXP 84
20540: PPUSH
20541: LD_VAR 0 1
20545: PPUSH
20546: LD_INT 0
20548: PPUSH
20549: CALL_OW 1
20553: ST_TO_ADDR
20554: GO 20607
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
20556: LD_ADDR_EXP 84
20560: PUSH
20561: LD_EXP 84
20565: PPUSH
20566: LD_VAR 0 1
20570: PPUSH
20571: LD_VAR 0 1
20575: PPUSH
20576: CALL_OW 255
20580: PUSH
20581: LD_VAR 0 1
20585: PUSH
20586: LD_VAR 0 2
20590: PUSH
20591: LD_VAR 0 3
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: PPUSH
20602: CALL_OW 1
20606: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20607: CALL 20616 0 0
// end ;
20611: LD_VAR 0 4
20615: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
20616: LD_INT 0
20618: PPUSH
20619: PPUSH
20620: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20621: LD_STRING resetFactoryWaypoint();
20623: PPUSH
20624: CALL_OW 559
// if factoryWaypoints then
20628: LD_EXP 84
20632: IFFALSE 20758
// begin list := PrepareArray ( factoryWaypoints ) ;
20634: LD_ADDR_VAR 0 3
20638: PUSH
20639: LD_EXP 84
20643: PPUSH
20644: CALL 68055 0 1
20648: ST_TO_ADDR
// for i := 1 to list do
20649: LD_ADDR_VAR 0 2
20653: PUSH
20654: DOUBLE
20655: LD_INT 1
20657: DEC
20658: ST_TO_ADDR
20659: LD_VAR 0 3
20663: PUSH
20664: FOR_TO
20665: IFFALSE 20756
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20667: LD_STRING setFactoryWaypointXY(
20669: PUSH
20670: LD_VAR 0 3
20674: PUSH
20675: LD_VAR 0 2
20679: ARRAY
20680: PUSH
20681: LD_INT 1
20683: ARRAY
20684: STR
20685: PUSH
20686: LD_STRING ,
20688: STR
20689: PUSH
20690: LD_VAR 0 3
20694: PUSH
20695: LD_VAR 0 2
20699: ARRAY
20700: PUSH
20701: LD_INT 2
20703: ARRAY
20704: STR
20705: PUSH
20706: LD_STRING ,
20708: STR
20709: PUSH
20710: LD_VAR 0 3
20714: PUSH
20715: LD_VAR 0 2
20719: ARRAY
20720: PUSH
20721: LD_INT 3
20723: ARRAY
20724: STR
20725: PUSH
20726: LD_STRING ,
20728: STR
20729: PUSH
20730: LD_VAR 0 3
20734: PUSH
20735: LD_VAR 0 2
20739: ARRAY
20740: PUSH
20741: LD_INT 4
20743: ARRAY
20744: STR
20745: PUSH
20746: LD_STRING )
20748: STR
20749: PPUSH
20750: CALL_OW 559
20754: GO 20664
20756: POP
20757: POP
// end ; end ;
20758: LD_VAR 0 1
20762: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20763: LD_INT 0
20765: PPUSH
// if HexInfo ( x , y ) = warehouse then
20766: LD_VAR 0 2
20770: PPUSH
20771: LD_VAR 0 3
20775: PPUSH
20776: CALL_OW 428
20780: PUSH
20781: LD_VAR 0 1
20785: EQUAL
20786: IFFALSE 20813
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20788: LD_ADDR_EXP 85
20792: PUSH
20793: LD_EXP 85
20797: PPUSH
20798: LD_VAR 0 1
20802: PPUSH
20803: LD_INT 0
20805: PPUSH
20806: CALL_OW 1
20810: ST_TO_ADDR
20811: GO 20864
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20813: LD_ADDR_EXP 85
20817: PUSH
20818: LD_EXP 85
20822: PPUSH
20823: LD_VAR 0 1
20827: PPUSH
20828: LD_VAR 0 1
20832: PPUSH
20833: CALL_OW 255
20837: PUSH
20838: LD_VAR 0 1
20842: PUSH
20843: LD_VAR 0 2
20847: PUSH
20848: LD_VAR 0 3
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: PPUSH
20859: CALL_OW 1
20863: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20864: CALL 20873 0 0
// end ;
20868: LD_VAR 0 4
20872: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
20873: LD_INT 0
20875: PPUSH
20876: PPUSH
20877: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
20878: LD_STRING resetWarehouseGatheringPoints();
20880: PPUSH
20881: CALL_OW 559
// if warehouseGatheringPoints then
20885: LD_EXP 85
20889: IFFALSE 21015
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
20891: LD_ADDR_VAR 0 3
20895: PUSH
20896: LD_EXP 85
20900: PPUSH
20901: CALL 68055 0 1
20905: ST_TO_ADDR
// for i := 1 to list do
20906: LD_ADDR_VAR 0 2
20910: PUSH
20911: DOUBLE
20912: LD_INT 1
20914: DEC
20915: ST_TO_ADDR
20916: LD_VAR 0 3
20920: PUSH
20921: FOR_TO
20922: IFFALSE 21013
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20924: LD_STRING setWarehouseGatheringPointXY(
20926: PUSH
20927: LD_VAR 0 3
20931: PUSH
20932: LD_VAR 0 2
20936: ARRAY
20937: PUSH
20938: LD_INT 1
20940: ARRAY
20941: STR
20942: PUSH
20943: LD_STRING ,
20945: STR
20946: PUSH
20947: LD_VAR 0 3
20951: PUSH
20952: LD_VAR 0 2
20956: ARRAY
20957: PUSH
20958: LD_INT 2
20960: ARRAY
20961: STR
20962: PUSH
20963: LD_STRING ,
20965: STR
20966: PUSH
20967: LD_VAR 0 3
20971: PUSH
20972: LD_VAR 0 2
20976: ARRAY
20977: PUSH
20978: LD_INT 3
20980: ARRAY
20981: STR
20982: PUSH
20983: LD_STRING ,
20985: STR
20986: PUSH
20987: LD_VAR 0 3
20991: PUSH
20992: LD_VAR 0 2
20996: ARRAY
20997: PUSH
20998: LD_INT 4
21000: ARRAY
21001: STR
21002: PUSH
21003: LD_STRING )
21005: STR
21006: PPUSH
21007: CALL_OW 559
21011: GO 20921
21013: POP
21014: POP
// end ; end ;
21015: LD_VAR 0 1
21019: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
21020: LD_EXP 85
21024: IFFALSE 21709
21026: GO 21028
21028: DISABLE
21029: LD_INT 0
21031: PPUSH
21032: PPUSH
21033: PPUSH
21034: PPUSH
21035: PPUSH
21036: PPUSH
21037: PPUSH
21038: PPUSH
21039: PPUSH
// begin enable ;
21040: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
21041: LD_ADDR_VAR 0 3
21045: PUSH
21046: LD_EXP 85
21050: PPUSH
21051: CALL 68055 0 1
21055: ST_TO_ADDR
// if not list then
21056: LD_VAR 0 3
21060: NOT
21061: IFFALSE 21065
// exit ;
21063: GO 21709
// for i := 1 to list do
21065: LD_ADDR_VAR 0 1
21069: PUSH
21070: DOUBLE
21071: LD_INT 1
21073: DEC
21074: ST_TO_ADDR
21075: LD_VAR 0 3
21079: PUSH
21080: FOR_TO
21081: IFFALSE 21707
// begin depot := list [ i ] [ 2 ] ;
21083: LD_ADDR_VAR 0 8
21087: PUSH
21088: LD_VAR 0 3
21092: PUSH
21093: LD_VAR 0 1
21097: ARRAY
21098: PUSH
21099: LD_INT 2
21101: ARRAY
21102: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
21103: LD_ADDR_VAR 0 5
21107: PUSH
21108: LD_VAR 0 3
21112: PUSH
21113: LD_VAR 0 1
21117: ARRAY
21118: PUSH
21119: LD_INT 1
21121: ARRAY
21122: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
21123: LD_VAR 0 8
21127: PPUSH
21128: CALL_OW 301
21132: PUSH
21133: LD_VAR 0 5
21137: PUSH
21138: LD_VAR 0 8
21142: PPUSH
21143: CALL_OW 255
21147: NONEQUAL
21148: OR
21149: IFFALSE 21178
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
21151: LD_ADDR_EXP 85
21155: PUSH
21156: LD_EXP 85
21160: PPUSH
21161: LD_VAR 0 8
21165: PPUSH
21166: LD_INT 0
21168: PPUSH
21169: CALL_OW 1
21173: ST_TO_ADDR
// exit ;
21174: POP
21175: POP
21176: GO 21709
// end ; x := list [ i ] [ 3 ] ;
21178: LD_ADDR_VAR 0 6
21182: PUSH
21183: LD_VAR 0 3
21187: PUSH
21188: LD_VAR 0 1
21192: ARRAY
21193: PUSH
21194: LD_INT 3
21196: ARRAY
21197: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
21198: LD_ADDR_VAR 0 7
21202: PUSH
21203: LD_VAR 0 3
21207: PUSH
21208: LD_VAR 0 1
21212: ARRAY
21213: PUSH
21214: LD_INT 4
21216: ARRAY
21217: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
21218: LD_ADDR_VAR 0 9
21222: PUSH
21223: LD_VAR 0 6
21227: PPUSH
21228: LD_VAR 0 7
21232: PPUSH
21233: LD_INT 16
21235: PPUSH
21236: CALL 66643 0 3
21240: ST_TO_ADDR
// if not cratesNearbyPoint then
21241: LD_VAR 0 9
21245: NOT
21246: IFFALSE 21252
// exit ;
21248: POP
21249: POP
21250: GO 21709
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
21252: LD_ADDR_VAR 0 4
21256: PUSH
21257: LD_INT 22
21259: PUSH
21260: LD_VAR 0 5
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PUSH
21269: LD_INT 3
21271: PUSH
21272: LD_INT 60
21274: PUSH
21275: EMPTY
21276: LIST
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 91
21284: PUSH
21285: LD_VAR 0 8
21289: PUSH
21290: LD_INT 6
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: LIST
21297: PUSH
21298: LD_INT 2
21300: PUSH
21301: LD_INT 25
21303: PUSH
21304: LD_INT 2
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: LD_INT 25
21313: PUSH
21314: LD_INT 16
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: LIST
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: PPUSH
21332: CALL_OW 69
21336: PUSH
21337: LD_VAR 0 8
21341: PPUSH
21342: CALL_OW 313
21346: PPUSH
21347: LD_INT 3
21349: PUSH
21350: LD_INT 60
21352: PUSH
21353: EMPTY
21354: LIST
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PUSH
21360: LD_INT 2
21362: PUSH
21363: LD_INT 25
21365: PUSH
21366: LD_INT 2
21368: PUSH
21369: EMPTY
21370: LIST
21371: LIST
21372: PUSH
21373: LD_INT 25
21375: PUSH
21376: LD_INT 16
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: LIST
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PPUSH
21392: CALL_OW 72
21396: UNION
21397: ST_TO_ADDR
// if tmp then
21398: LD_VAR 0 4
21402: IFFALSE 21482
// begin tmp := ShrinkArray ( tmp , 3 ) ;
21404: LD_ADDR_VAR 0 4
21408: PUSH
21409: LD_VAR 0 4
21413: PPUSH
21414: LD_INT 3
21416: PPUSH
21417: CALL 64612 0 2
21421: ST_TO_ADDR
// for j in tmp do
21422: LD_ADDR_VAR 0 2
21426: PUSH
21427: LD_VAR 0 4
21431: PUSH
21432: FOR_IN
21433: IFFALSE 21476
// begin if IsInUnit ( j ) then
21435: LD_VAR 0 2
21439: PPUSH
21440: CALL_OW 310
21444: IFFALSE 21455
// ComExit ( j ) ;
21446: LD_VAR 0 2
21450: PPUSH
21451: CALL 64695 0 1
// AddComCollect ( j , x , y ) ;
21455: LD_VAR 0 2
21459: PPUSH
21460: LD_VAR 0 6
21464: PPUSH
21465: LD_VAR 0 7
21469: PPUSH
21470: CALL_OW 177
// end ;
21474: GO 21432
21476: POP
21477: POP
// exit ;
21478: POP
21479: POP
21480: GO 21709
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
21482: LD_ADDR_VAR 0 4
21486: PUSH
21487: LD_INT 22
21489: PUSH
21490: LD_VAR 0 5
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 91
21501: PUSH
21502: LD_VAR 0 8
21506: PUSH
21507: LD_INT 8
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 2
21517: PUSH
21518: LD_INT 34
21520: PUSH
21521: LD_INT 12
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: PUSH
21528: LD_INT 34
21530: PUSH
21531: LD_INT 51
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PUSH
21538: LD_INT 34
21540: PUSH
21541: LD_INT 32
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PUSH
21548: LD_INT 34
21550: PUSH
21551: LD_INT 89
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: LIST
21569: PPUSH
21570: CALL_OW 69
21574: ST_TO_ADDR
// if tmp then
21575: LD_VAR 0 4
21579: IFFALSE 21705
// begin for j in tmp do
21581: LD_ADDR_VAR 0 2
21585: PUSH
21586: LD_VAR 0 4
21590: PUSH
21591: FOR_IN
21592: IFFALSE 21703
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
21594: LD_VAR 0 2
21598: PPUSH
21599: CALL_OW 262
21603: PUSH
21604: LD_INT 3
21606: EQUAL
21607: PUSH
21608: LD_VAR 0 2
21612: PPUSH
21613: CALL_OW 261
21617: PUSH
21618: LD_INT 20
21620: GREATER
21621: OR
21622: PUSH
21623: LD_VAR 0 2
21627: PPUSH
21628: CALL_OW 314
21632: NOT
21633: AND
21634: PUSH
21635: LD_VAR 0 2
21639: PPUSH
21640: CALL_OW 263
21644: PUSH
21645: LD_INT 1
21647: NONEQUAL
21648: PUSH
21649: LD_VAR 0 2
21653: PPUSH
21654: CALL_OW 311
21658: OR
21659: AND
21660: IFFALSE 21701
// begin ComCollect ( j , x , y ) ;
21662: LD_VAR 0 2
21666: PPUSH
21667: LD_VAR 0 6
21671: PPUSH
21672: LD_VAR 0 7
21676: PPUSH
21677: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
21681: LD_VAR 0 2
21685: PPUSH
21686: LD_VAR 0 8
21690: PPUSH
21691: CALL_OW 172
// exit ;
21695: POP
21696: POP
21697: POP
21698: POP
21699: GO 21709
// end ;
21701: GO 21591
21703: POP
21704: POP
// end ; end ;
21705: GO 21080
21707: POP
21708: POP
// end ; end_of_file
21709: PPOPN 9
21711: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21712: LD_INT 0
21714: PPUSH
21715: PPUSH
21716: PPUSH
21717: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21718: LD_VAR 0 1
21722: PPUSH
21723: CALL_OW 264
21727: PUSH
21728: LD_INT 91
21730: EQUAL
21731: IFFALSE 21803
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21733: LD_INT 68
21735: PPUSH
21736: LD_VAR 0 1
21740: PPUSH
21741: CALL_OW 255
21745: PPUSH
21746: CALL_OW 321
21750: PUSH
21751: LD_INT 2
21753: EQUAL
21754: IFFALSE 21766
// eff := 70 else
21756: LD_ADDR_VAR 0 4
21760: PUSH
21761: LD_INT 70
21763: ST_TO_ADDR
21764: GO 21774
// eff := 30 ;
21766: LD_ADDR_VAR 0 4
21770: PUSH
21771: LD_INT 30
21773: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21774: LD_VAR 0 1
21778: PPUSH
21779: CALL_OW 250
21783: PPUSH
21784: LD_VAR 0 1
21788: PPUSH
21789: CALL_OW 251
21793: PPUSH
21794: LD_VAR 0 4
21798: PPUSH
21799: CALL_OW 495
// end ; end ;
21803: LD_VAR 0 2
21807: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21808: LD_INT 0
21810: PPUSH
// end ;
21811: LD_VAR 0 4
21815: RET
// export function SOS_Command ( cmd ) ; begin
21816: LD_INT 0
21818: PPUSH
// end ;
21819: LD_VAR 0 2
21823: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21824: LD_INT 0
21826: PPUSH
// end ;
21827: LD_VAR 0 6
21831: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
21832: LD_INT 0
21834: PPUSH
21835: PPUSH
// if not vehicle or not factory then
21836: LD_VAR 0 1
21840: NOT
21841: PUSH
21842: LD_VAR 0 2
21846: NOT
21847: OR
21848: IFFALSE 21852
// exit ;
21850: GO 22083
// if factoryWaypoints >= factory then
21852: LD_EXP 84
21856: PUSH
21857: LD_VAR 0 2
21861: GREATEREQUAL
21862: IFFALSE 22083
// if factoryWaypoints [ factory ] then
21864: LD_EXP 84
21868: PUSH
21869: LD_VAR 0 2
21873: ARRAY
21874: IFFALSE 22083
// begin if GetControl ( vehicle ) = control_manual then
21876: LD_VAR 0 1
21880: PPUSH
21881: CALL_OW 263
21885: PUSH
21886: LD_INT 1
21888: EQUAL
21889: IFFALSE 21970
// begin driver := IsDrivenBy ( vehicle ) ;
21891: LD_ADDR_VAR 0 4
21895: PUSH
21896: LD_VAR 0 1
21900: PPUSH
21901: CALL_OW 311
21905: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21906: LD_VAR 0 4
21910: PPUSH
21911: LD_EXP 84
21915: PUSH
21916: LD_VAR 0 2
21920: ARRAY
21921: PUSH
21922: LD_INT 3
21924: ARRAY
21925: PPUSH
21926: LD_EXP 84
21930: PUSH
21931: LD_VAR 0 2
21935: ARRAY
21936: PUSH
21937: LD_INT 4
21939: ARRAY
21940: PPUSH
21941: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21945: LD_VAR 0 4
21949: PPUSH
21950: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21954: LD_VAR 0 4
21958: PPUSH
21959: LD_VAR 0 2
21963: PPUSH
21964: CALL_OW 180
// end else
21968: GO 22083
// if GetControl ( vehicle ) = control_remote then
21970: LD_VAR 0 1
21974: PPUSH
21975: CALL_OW 263
21979: PUSH
21980: LD_INT 2
21982: EQUAL
21983: IFFALSE 22044
// begin wait ( 0 0$2 ) ;
21985: LD_INT 70
21987: PPUSH
21988: CALL_OW 67
// if Connect ( vehicle ) then
21992: LD_VAR 0 1
21996: PPUSH
21997: CALL 34914 0 1
22001: IFFALSE 22042
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22003: LD_VAR 0 1
22007: PPUSH
22008: LD_EXP 84
22012: PUSH
22013: LD_VAR 0 2
22017: ARRAY
22018: PUSH
22019: LD_INT 3
22021: ARRAY
22022: PPUSH
22023: LD_EXP 84
22027: PUSH
22028: LD_VAR 0 2
22032: ARRAY
22033: PUSH
22034: LD_INT 4
22036: ARRAY
22037: PPUSH
22038: CALL_OW 171
// end else
22042: GO 22083
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22044: LD_VAR 0 1
22048: PPUSH
22049: LD_EXP 84
22053: PUSH
22054: LD_VAR 0 2
22058: ARRAY
22059: PUSH
22060: LD_INT 3
22062: ARRAY
22063: PPUSH
22064: LD_EXP 84
22068: PUSH
22069: LD_VAR 0 2
22073: ARRAY
22074: PUSH
22075: LD_INT 4
22077: ARRAY
22078: PPUSH
22079: CALL_OW 171
// end ; end ;
22083: LD_VAR 0 3
22087: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22088: LD_INT 0
22090: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22091: LD_VAR 0 1
22095: PUSH
22096: LD_INT 250
22098: EQUAL
22099: PUSH
22100: LD_VAR 0 2
22104: PPUSH
22105: CALL_OW 264
22109: PUSH
22110: LD_INT 81
22112: EQUAL
22113: AND
22114: IFFALSE 22135
// MinerPlaceMine ( unit , x , y ) ;
22116: LD_VAR 0 2
22120: PPUSH
22121: LD_VAR 0 4
22125: PPUSH
22126: LD_VAR 0 5
22130: PPUSH
22131: CALL 25125 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22135: LD_VAR 0 1
22139: PUSH
22140: LD_INT 251
22142: EQUAL
22143: PUSH
22144: LD_VAR 0 2
22148: PPUSH
22149: CALL_OW 264
22153: PUSH
22154: LD_INT 81
22156: EQUAL
22157: AND
22158: IFFALSE 22179
// MinerDetonateMine ( unit , x , y ) ;
22160: LD_VAR 0 2
22164: PPUSH
22165: LD_VAR 0 4
22169: PPUSH
22170: LD_VAR 0 5
22174: PPUSH
22175: CALL 25400 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22179: LD_VAR 0 1
22183: PUSH
22184: LD_INT 252
22186: EQUAL
22187: PUSH
22188: LD_VAR 0 2
22192: PPUSH
22193: CALL_OW 264
22197: PUSH
22198: LD_INT 81
22200: EQUAL
22201: AND
22202: IFFALSE 22223
// MinerCreateMinefield ( unit , x , y ) ;
22204: LD_VAR 0 2
22208: PPUSH
22209: LD_VAR 0 4
22213: PPUSH
22214: LD_VAR 0 5
22218: PPUSH
22219: CALL 25817 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22223: LD_VAR 0 1
22227: PUSH
22228: LD_INT 253
22230: EQUAL
22231: PUSH
22232: LD_VAR 0 2
22236: PPUSH
22237: CALL_OW 257
22241: PUSH
22242: LD_INT 5
22244: EQUAL
22245: AND
22246: IFFALSE 22267
// ComBinocular ( unit , x , y ) ;
22248: LD_VAR 0 2
22252: PPUSH
22253: LD_VAR 0 4
22257: PPUSH
22258: LD_VAR 0 5
22262: PPUSH
22263: CALL 26186 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22267: LD_VAR 0 1
22271: PUSH
22272: LD_INT 254
22274: EQUAL
22275: PUSH
22276: LD_VAR 0 2
22280: PPUSH
22281: CALL_OW 264
22285: PUSH
22286: LD_INT 99
22288: EQUAL
22289: AND
22290: PUSH
22291: LD_VAR 0 3
22295: PPUSH
22296: CALL_OW 263
22300: PUSH
22301: LD_INT 3
22303: EQUAL
22304: AND
22305: IFFALSE 22321
// HackDestroyVehicle ( unit , selectedUnit ) ;
22307: LD_VAR 0 2
22311: PPUSH
22312: LD_VAR 0 3
22316: PPUSH
22317: CALL 24489 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22321: LD_VAR 0 1
22325: PUSH
22326: LD_INT 255
22328: EQUAL
22329: PUSH
22330: LD_VAR 0 2
22334: PPUSH
22335: CALL_OW 264
22339: PUSH
22340: LD_INT 14
22342: PUSH
22343: LD_INT 53
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: IN
22350: AND
22351: PUSH
22352: LD_VAR 0 4
22356: PPUSH
22357: LD_VAR 0 5
22361: PPUSH
22362: CALL_OW 488
22366: AND
22367: IFFALSE 22391
// CutTreeXYR ( unit , x , y , 12 ) ;
22369: LD_VAR 0 2
22373: PPUSH
22374: LD_VAR 0 4
22378: PPUSH
22379: LD_VAR 0 5
22383: PPUSH
22384: LD_INT 12
22386: PPUSH
22387: CALL 22486 0 4
// if cmd = 256 then
22391: LD_VAR 0 1
22395: PUSH
22396: LD_INT 256
22398: EQUAL
22399: IFFALSE 22420
// SetFactoryWaypoint ( unit , x , y ) ;
22401: LD_VAR 0 2
22405: PPUSH
22406: LD_VAR 0 4
22410: PPUSH
22411: LD_VAR 0 5
22415: PPUSH
22416: CALL 20401 0 3
// if cmd = 257 then
22420: LD_VAR 0 1
22424: PUSH
22425: LD_INT 257
22427: EQUAL
22428: IFFALSE 22449
// SetWarehouseGatheringPoint ( unit , x , y ) ;
22430: LD_VAR 0 2
22434: PPUSH
22435: LD_VAR 0 4
22439: PPUSH
22440: LD_VAR 0 5
22444: PPUSH
22445: CALL 20763 0 3
// if cmd = 258 then
22449: LD_VAR 0 1
22453: PUSH
22454: LD_INT 258
22456: EQUAL
22457: IFFALSE 22481
// BurnTreeXYR ( unit , x , y , 8 ) ;
22459: LD_VAR 0 2
22463: PPUSH
22464: LD_VAR 0 4
22468: PPUSH
22469: LD_VAR 0 5
22473: PPUSH
22474: LD_INT 8
22476: PPUSH
22477: CALL 22880 0 4
// end ;
22481: LD_VAR 0 6
22485: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22486: LD_INT 0
22488: PPUSH
22489: PPUSH
22490: PPUSH
22491: PPUSH
22492: PPUSH
22493: PPUSH
22494: PPUSH
22495: PPUSH
22496: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
22497: LD_VAR 0 1
22501: PPUSH
22502: CALL_OW 302
22506: NOT
22507: PUSH
22508: LD_VAR 0 2
22512: PPUSH
22513: LD_VAR 0 3
22517: PPUSH
22518: CALL_OW 488
22522: NOT
22523: OR
22524: PUSH
22525: LD_VAR 0 4
22529: NOT
22530: OR
22531: IFFALSE 22535
// exit ;
22533: GO 22875
// list := [ ] ;
22535: LD_ADDR_VAR 0 13
22539: PUSH
22540: EMPTY
22541: ST_TO_ADDR
// if x - r < 0 then
22542: LD_VAR 0 2
22546: PUSH
22547: LD_VAR 0 4
22551: MINUS
22552: PUSH
22553: LD_INT 0
22555: LESS
22556: IFFALSE 22568
// min_x := 0 else
22558: LD_ADDR_VAR 0 7
22562: PUSH
22563: LD_INT 0
22565: ST_TO_ADDR
22566: GO 22584
// min_x := x - r ;
22568: LD_ADDR_VAR 0 7
22572: PUSH
22573: LD_VAR 0 2
22577: PUSH
22578: LD_VAR 0 4
22582: MINUS
22583: ST_TO_ADDR
// if y - r < 0 then
22584: LD_VAR 0 3
22588: PUSH
22589: LD_VAR 0 4
22593: MINUS
22594: PUSH
22595: LD_INT 0
22597: LESS
22598: IFFALSE 22610
// min_y := 0 else
22600: LD_ADDR_VAR 0 8
22604: PUSH
22605: LD_INT 0
22607: ST_TO_ADDR
22608: GO 22626
// min_y := y - r ;
22610: LD_ADDR_VAR 0 8
22614: PUSH
22615: LD_VAR 0 3
22619: PUSH
22620: LD_VAR 0 4
22624: MINUS
22625: ST_TO_ADDR
// max_x := x + r ;
22626: LD_ADDR_VAR 0 9
22630: PUSH
22631: LD_VAR 0 2
22635: PUSH
22636: LD_VAR 0 4
22640: PLUS
22641: ST_TO_ADDR
// max_y := y + r ;
22642: LD_ADDR_VAR 0 10
22646: PUSH
22647: LD_VAR 0 3
22651: PUSH
22652: LD_VAR 0 4
22656: PLUS
22657: ST_TO_ADDR
// for _x = min_x to max_x do
22658: LD_ADDR_VAR 0 11
22662: PUSH
22663: DOUBLE
22664: LD_VAR 0 7
22668: DEC
22669: ST_TO_ADDR
22670: LD_VAR 0 9
22674: PUSH
22675: FOR_TO
22676: IFFALSE 22793
// for _y = min_y to max_y do
22678: LD_ADDR_VAR 0 12
22682: PUSH
22683: DOUBLE
22684: LD_VAR 0 8
22688: DEC
22689: ST_TO_ADDR
22690: LD_VAR 0 10
22694: PUSH
22695: FOR_TO
22696: IFFALSE 22789
// begin if not ValidHex ( _x , _y ) then
22698: LD_VAR 0 11
22702: PPUSH
22703: LD_VAR 0 12
22707: PPUSH
22708: CALL_OW 488
22712: NOT
22713: IFFALSE 22717
// continue ;
22715: GO 22695
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22717: LD_VAR 0 11
22721: PPUSH
22722: LD_VAR 0 12
22726: PPUSH
22727: CALL_OW 351
22731: PUSH
22732: LD_VAR 0 11
22736: PPUSH
22737: LD_VAR 0 12
22741: PPUSH
22742: CALL_OW 554
22746: AND
22747: IFFALSE 22787
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22749: LD_ADDR_VAR 0 13
22753: PUSH
22754: LD_VAR 0 13
22758: PPUSH
22759: LD_VAR 0 13
22763: PUSH
22764: LD_INT 1
22766: PLUS
22767: PPUSH
22768: LD_VAR 0 11
22772: PUSH
22773: LD_VAR 0 12
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PPUSH
22782: CALL_OW 2
22786: ST_TO_ADDR
// end ;
22787: GO 22695
22789: POP
22790: POP
22791: GO 22675
22793: POP
22794: POP
// if not list then
22795: LD_VAR 0 13
22799: NOT
22800: IFFALSE 22804
// exit ;
22802: GO 22875
// for i in list do
22804: LD_ADDR_VAR 0 6
22808: PUSH
22809: LD_VAR 0 13
22813: PUSH
22814: FOR_IN
22815: IFFALSE 22873
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22817: LD_VAR 0 1
22821: PPUSH
22822: LD_STRING M
22824: PUSH
22825: LD_VAR 0 6
22829: PUSH
22830: LD_INT 1
22832: ARRAY
22833: PUSH
22834: LD_VAR 0 6
22838: PUSH
22839: LD_INT 2
22841: ARRAY
22842: PUSH
22843: LD_INT 0
22845: PUSH
22846: LD_INT 0
22848: PUSH
22849: LD_INT 0
22851: PUSH
22852: LD_INT 0
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: PUSH
22864: EMPTY
22865: LIST
22866: PPUSH
22867: CALL_OW 447
22871: GO 22814
22873: POP
22874: POP
// end ;
22875: LD_VAR 0 5
22879: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
22880: LD_INT 0
22882: PPUSH
22883: PPUSH
22884: PPUSH
22885: PPUSH
22886: PPUSH
22887: PPUSH
22888: PPUSH
22889: PPUSH
22890: PPUSH
22891: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
22892: LD_VAR 0 1
22896: PPUSH
22897: CALL_OW 302
22901: NOT
22902: PUSH
22903: LD_VAR 0 2
22907: PPUSH
22908: LD_VAR 0 3
22912: PPUSH
22913: CALL_OW 488
22917: NOT
22918: OR
22919: PUSH
22920: LD_VAR 0 4
22924: NOT
22925: OR
22926: IFFALSE 22930
// exit ;
22928: GO 23443
// list := [ ] ;
22930: LD_ADDR_VAR 0 13
22934: PUSH
22935: EMPTY
22936: ST_TO_ADDR
// if x - r < 0 then
22937: LD_VAR 0 2
22941: PUSH
22942: LD_VAR 0 4
22946: MINUS
22947: PUSH
22948: LD_INT 0
22950: LESS
22951: IFFALSE 22963
// min_x := 0 else
22953: LD_ADDR_VAR 0 7
22957: PUSH
22958: LD_INT 0
22960: ST_TO_ADDR
22961: GO 22979
// min_x := x - r ;
22963: LD_ADDR_VAR 0 7
22967: PUSH
22968: LD_VAR 0 2
22972: PUSH
22973: LD_VAR 0 4
22977: MINUS
22978: ST_TO_ADDR
// if y - r < 0 then
22979: LD_VAR 0 3
22983: PUSH
22984: LD_VAR 0 4
22988: MINUS
22989: PUSH
22990: LD_INT 0
22992: LESS
22993: IFFALSE 23005
// min_y := 0 else
22995: LD_ADDR_VAR 0 8
22999: PUSH
23000: LD_INT 0
23002: ST_TO_ADDR
23003: GO 23021
// min_y := y - r ;
23005: LD_ADDR_VAR 0 8
23009: PUSH
23010: LD_VAR 0 3
23014: PUSH
23015: LD_VAR 0 4
23019: MINUS
23020: ST_TO_ADDR
// max_x := x + r ;
23021: LD_ADDR_VAR 0 9
23025: PUSH
23026: LD_VAR 0 2
23030: PUSH
23031: LD_VAR 0 4
23035: PLUS
23036: ST_TO_ADDR
// max_y := y + r ;
23037: LD_ADDR_VAR 0 10
23041: PUSH
23042: LD_VAR 0 3
23046: PUSH
23047: LD_VAR 0 4
23051: PLUS
23052: ST_TO_ADDR
// for _x = min_x to max_x do
23053: LD_ADDR_VAR 0 11
23057: PUSH
23058: DOUBLE
23059: LD_VAR 0 7
23063: DEC
23064: ST_TO_ADDR
23065: LD_VAR 0 9
23069: PUSH
23070: FOR_TO
23071: IFFALSE 23188
// for _y = min_y to max_y do
23073: LD_ADDR_VAR 0 12
23077: PUSH
23078: DOUBLE
23079: LD_VAR 0 8
23083: DEC
23084: ST_TO_ADDR
23085: LD_VAR 0 10
23089: PUSH
23090: FOR_TO
23091: IFFALSE 23184
// begin if not ValidHex ( _x , _y ) then
23093: LD_VAR 0 11
23097: PPUSH
23098: LD_VAR 0 12
23102: PPUSH
23103: CALL_OW 488
23107: NOT
23108: IFFALSE 23112
// continue ;
23110: GO 23090
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23112: LD_VAR 0 11
23116: PPUSH
23117: LD_VAR 0 12
23121: PPUSH
23122: CALL_OW 351
23126: PUSH
23127: LD_VAR 0 11
23131: PPUSH
23132: LD_VAR 0 12
23136: PPUSH
23137: CALL_OW 554
23141: AND
23142: IFFALSE 23182
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23144: LD_ADDR_VAR 0 13
23148: PUSH
23149: LD_VAR 0 13
23153: PPUSH
23154: LD_VAR 0 13
23158: PUSH
23159: LD_INT 1
23161: PLUS
23162: PPUSH
23163: LD_VAR 0 11
23167: PUSH
23168: LD_VAR 0 12
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PPUSH
23177: CALL_OW 2
23181: ST_TO_ADDR
// end ;
23182: GO 23090
23184: POP
23185: POP
23186: GO 23070
23188: POP
23189: POP
// if not list then
23190: LD_VAR 0 13
23194: NOT
23195: IFFALSE 23199
// exit ;
23197: GO 23443
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
23199: LD_ADDR_VAR 0 13
23203: PUSH
23204: LD_VAR 0 1
23208: PPUSH
23209: LD_VAR 0 13
23213: PPUSH
23214: LD_INT 1
23216: PPUSH
23217: LD_INT 1
23219: PPUSH
23220: CALL 32056 0 4
23224: ST_TO_ADDR
// ComStop ( flame ) ;
23225: LD_VAR 0 1
23229: PPUSH
23230: CALL_OW 141
// for i in list do
23234: LD_ADDR_VAR 0 6
23238: PUSH
23239: LD_VAR 0 13
23243: PUSH
23244: FOR_IN
23245: IFFALSE 23276
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
23247: LD_VAR 0 1
23251: PPUSH
23252: LD_VAR 0 6
23256: PUSH
23257: LD_INT 1
23259: ARRAY
23260: PPUSH
23261: LD_VAR 0 6
23265: PUSH
23266: LD_INT 2
23268: ARRAY
23269: PPUSH
23270: CALL_OW 176
23274: GO 23244
23276: POP
23277: POP
// repeat wait ( 0 0$1 ) ;
23278: LD_INT 35
23280: PPUSH
23281: CALL_OW 67
// task := GetTaskList ( flame ) ;
23285: LD_ADDR_VAR 0 14
23289: PUSH
23290: LD_VAR 0 1
23294: PPUSH
23295: CALL_OW 437
23299: ST_TO_ADDR
// if not task then
23300: LD_VAR 0 14
23304: NOT
23305: IFFALSE 23309
// exit ;
23307: GO 23443
// if task [ 1 ] [ 1 ] <> | then
23309: LD_VAR 0 14
23313: PUSH
23314: LD_INT 1
23316: ARRAY
23317: PUSH
23318: LD_INT 1
23320: ARRAY
23321: PUSH
23322: LD_STRING |
23324: NONEQUAL
23325: IFFALSE 23329
// exit ;
23327: GO 23443
// _x := task [ 1 ] [ 2 ] ;
23329: LD_ADDR_VAR 0 11
23333: PUSH
23334: LD_VAR 0 14
23338: PUSH
23339: LD_INT 1
23341: ARRAY
23342: PUSH
23343: LD_INT 2
23345: ARRAY
23346: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
23347: LD_ADDR_VAR 0 12
23351: PUSH
23352: LD_VAR 0 14
23356: PUSH
23357: LD_INT 1
23359: ARRAY
23360: PUSH
23361: LD_INT 3
23363: ARRAY
23364: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
23365: LD_VAR 0 11
23369: PPUSH
23370: LD_VAR 0 12
23374: PPUSH
23375: CALL_OW 351
23379: NOT
23380: PUSH
23381: LD_VAR 0 11
23385: PPUSH
23386: LD_VAR 0 12
23390: PPUSH
23391: CALL_OW 554
23395: NOT
23396: OR
23397: IFFALSE 23431
// begin task := Delete ( task , 1 ) ;
23399: LD_ADDR_VAR 0 14
23403: PUSH
23404: LD_VAR 0 14
23408: PPUSH
23409: LD_INT 1
23411: PPUSH
23412: CALL_OW 3
23416: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
23417: LD_VAR 0 1
23421: PPUSH
23422: LD_VAR 0 14
23426: PPUSH
23427: CALL_OW 446
// end ; until not HasTask ( flame ) ;
23431: LD_VAR 0 1
23435: PPUSH
23436: CALL_OW 314
23440: NOT
23441: IFFALSE 23278
// end ;
23443: LD_VAR 0 5
23447: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23448: LD_EXP 87
23452: NOT
23453: IFFALSE 23503
23455: GO 23457
23457: DISABLE
// begin initHack := true ;
23458: LD_ADDR_EXP 87
23462: PUSH
23463: LD_INT 1
23465: ST_TO_ADDR
// hackTanks := [ ] ;
23466: LD_ADDR_EXP 88
23470: PUSH
23471: EMPTY
23472: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23473: LD_ADDR_EXP 89
23477: PUSH
23478: EMPTY
23479: ST_TO_ADDR
// hackLimit := 3 ;
23480: LD_ADDR_EXP 90
23484: PUSH
23485: LD_INT 3
23487: ST_TO_ADDR
// hackDist := 12 ;
23488: LD_ADDR_EXP 91
23492: PUSH
23493: LD_INT 12
23495: ST_TO_ADDR
// hackCounter := [ ] ;
23496: LD_ADDR_EXP 92
23500: PUSH
23501: EMPTY
23502: ST_TO_ADDR
// end ;
23503: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23504: LD_EXP 87
23508: PUSH
23509: LD_INT 34
23511: PUSH
23512: LD_INT 99
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PPUSH
23519: CALL_OW 69
23523: AND
23524: IFFALSE 23777
23526: GO 23528
23528: DISABLE
23529: LD_INT 0
23531: PPUSH
23532: PPUSH
// begin enable ;
23533: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23534: LD_ADDR_VAR 0 1
23538: PUSH
23539: LD_INT 34
23541: PUSH
23542: LD_INT 99
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: PPUSH
23549: CALL_OW 69
23553: PUSH
23554: FOR_IN
23555: IFFALSE 23775
// begin if not i in hackTanks then
23557: LD_VAR 0 1
23561: PUSH
23562: LD_EXP 88
23566: IN
23567: NOT
23568: IFFALSE 23651
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23570: LD_ADDR_EXP 88
23574: PUSH
23575: LD_EXP 88
23579: PPUSH
23580: LD_EXP 88
23584: PUSH
23585: LD_INT 1
23587: PLUS
23588: PPUSH
23589: LD_VAR 0 1
23593: PPUSH
23594: CALL_OW 1
23598: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23599: LD_ADDR_EXP 89
23603: PUSH
23604: LD_EXP 89
23608: PPUSH
23609: LD_EXP 89
23613: PUSH
23614: LD_INT 1
23616: PLUS
23617: PPUSH
23618: EMPTY
23619: PPUSH
23620: CALL_OW 1
23624: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23625: LD_ADDR_EXP 92
23629: PUSH
23630: LD_EXP 92
23634: PPUSH
23635: LD_EXP 92
23639: PUSH
23640: LD_INT 1
23642: PLUS
23643: PPUSH
23644: EMPTY
23645: PPUSH
23646: CALL_OW 1
23650: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23651: LD_VAR 0 1
23655: PPUSH
23656: CALL_OW 302
23660: NOT
23661: IFFALSE 23674
// begin HackUnlinkAll ( i ) ;
23663: LD_VAR 0 1
23667: PPUSH
23668: CALL 23780 0 1
// continue ;
23672: GO 23554
// end ; HackCheckCapturedStatus ( i ) ;
23674: LD_VAR 0 1
23678: PPUSH
23679: CALL 24223 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23683: LD_ADDR_VAR 0 2
23687: PUSH
23688: LD_INT 81
23690: PUSH
23691: LD_VAR 0 1
23695: PPUSH
23696: CALL_OW 255
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: LD_INT 33
23707: PUSH
23708: LD_INT 3
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: LD_INT 91
23717: PUSH
23718: LD_VAR 0 1
23722: PUSH
23723: LD_EXP 91
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: LIST
23732: PUSH
23733: LD_INT 50
23735: PUSH
23736: EMPTY
23737: LIST
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: PPUSH
23745: CALL_OW 69
23749: ST_TO_ADDR
// if not tmp then
23750: LD_VAR 0 2
23754: NOT
23755: IFFALSE 23759
// continue ;
23757: GO 23554
// HackLink ( i , tmp ) ;
23759: LD_VAR 0 1
23763: PPUSH
23764: LD_VAR 0 2
23768: PPUSH
23769: CALL 23916 0 2
// end ;
23773: GO 23554
23775: POP
23776: POP
// end ;
23777: PPOPN 2
23779: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23780: LD_INT 0
23782: PPUSH
23783: PPUSH
23784: PPUSH
// if not hack in hackTanks then
23785: LD_VAR 0 1
23789: PUSH
23790: LD_EXP 88
23794: IN
23795: NOT
23796: IFFALSE 23800
// exit ;
23798: GO 23911
// index := GetElementIndex ( hackTanks , hack ) ;
23800: LD_ADDR_VAR 0 4
23804: PUSH
23805: LD_EXP 88
23809: PPUSH
23810: LD_VAR 0 1
23814: PPUSH
23815: CALL 31353 0 2
23819: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23820: LD_EXP 89
23824: PUSH
23825: LD_VAR 0 4
23829: ARRAY
23830: IFFALSE 23911
// begin for i in hackTanksCaptured [ index ] do
23832: LD_ADDR_VAR 0 3
23836: PUSH
23837: LD_EXP 89
23841: PUSH
23842: LD_VAR 0 4
23846: ARRAY
23847: PUSH
23848: FOR_IN
23849: IFFALSE 23875
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23851: LD_VAR 0 3
23855: PUSH
23856: LD_INT 1
23858: ARRAY
23859: PPUSH
23860: LD_VAR 0 3
23864: PUSH
23865: LD_INT 2
23867: ARRAY
23868: PPUSH
23869: CALL_OW 235
23873: GO 23848
23875: POP
23876: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23877: LD_ADDR_EXP 89
23881: PUSH
23882: LD_EXP 89
23886: PPUSH
23887: LD_VAR 0 4
23891: PPUSH
23892: EMPTY
23893: PPUSH
23894: CALL_OW 1
23898: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23899: LD_VAR 0 1
23903: PPUSH
23904: LD_INT 0
23906: PPUSH
23907: CALL_OW 505
// end ; end ;
23911: LD_VAR 0 2
23915: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23916: LD_INT 0
23918: PPUSH
23919: PPUSH
23920: PPUSH
// if not hack in hackTanks or not vehicles then
23921: LD_VAR 0 1
23925: PUSH
23926: LD_EXP 88
23930: IN
23931: NOT
23932: PUSH
23933: LD_VAR 0 2
23937: NOT
23938: OR
23939: IFFALSE 23943
// exit ;
23941: GO 24218
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23943: LD_ADDR_VAR 0 2
23947: PUSH
23948: LD_VAR 0 1
23952: PPUSH
23953: LD_VAR 0 2
23957: PPUSH
23958: LD_INT 1
23960: PPUSH
23961: LD_INT 1
23963: PPUSH
23964: CALL 32003 0 4
23968: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23969: LD_ADDR_VAR 0 5
23973: PUSH
23974: LD_EXP 88
23978: PPUSH
23979: LD_VAR 0 1
23983: PPUSH
23984: CALL 31353 0 2
23988: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23989: LD_EXP 89
23993: PUSH
23994: LD_VAR 0 5
23998: ARRAY
23999: PUSH
24000: LD_EXP 90
24004: LESS
24005: IFFALSE 24194
// begin for i := 1 to vehicles do
24007: LD_ADDR_VAR 0 4
24011: PUSH
24012: DOUBLE
24013: LD_INT 1
24015: DEC
24016: ST_TO_ADDR
24017: LD_VAR 0 2
24021: PUSH
24022: FOR_TO
24023: IFFALSE 24192
// begin if hackTanksCaptured [ index ] = hackLimit then
24025: LD_EXP 89
24029: PUSH
24030: LD_VAR 0 5
24034: ARRAY
24035: PUSH
24036: LD_EXP 90
24040: EQUAL
24041: IFFALSE 24045
// break ;
24043: GO 24192
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24045: LD_ADDR_EXP 92
24049: PUSH
24050: LD_EXP 92
24054: PPUSH
24055: LD_VAR 0 5
24059: PPUSH
24060: LD_EXP 92
24064: PUSH
24065: LD_VAR 0 5
24069: ARRAY
24070: PUSH
24071: LD_INT 1
24073: PLUS
24074: PPUSH
24075: CALL_OW 1
24079: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24080: LD_ADDR_EXP 89
24084: PUSH
24085: LD_EXP 89
24089: PPUSH
24090: LD_VAR 0 5
24094: PUSH
24095: LD_EXP 89
24099: PUSH
24100: LD_VAR 0 5
24104: ARRAY
24105: PUSH
24106: LD_INT 1
24108: PLUS
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PPUSH
24114: LD_VAR 0 2
24118: PUSH
24119: LD_VAR 0 4
24123: ARRAY
24124: PUSH
24125: LD_VAR 0 2
24129: PUSH
24130: LD_VAR 0 4
24134: ARRAY
24135: PPUSH
24136: CALL_OW 255
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PPUSH
24145: CALL 31568 0 3
24149: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24150: LD_VAR 0 2
24154: PUSH
24155: LD_VAR 0 4
24159: ARRAY
24160: PPUSH
24161: LD_VAR 0 1
24165: PPUSH
24166: CALL_OW 255
24170: PPUSH
24171: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24175: LD_VAR 0 2
24179: PUSH
24180: LD_VAR 0 4
24184: ARRAY
24185: PPUSH
24186: CALL_OW 141
// end ;
24190: GO 24022
24192: POP
24193: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24194: LD_VAR 0 1
24198: PPUSH
24199: LD_EXP 89
24203: PUSH
24204: LD_VAR 0 5
24208: ARRAY
24209: PUSH
24210: LD_INT 0
24212: PLUS
24213: PPUSH
24214: CALL_OW 505
// end ;
24218: LD_VAR 0 3
24222: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24223: LD_INT 0
24225: PPUSH
24226: PPUSH
24227: PPUSH
24228: PPUSH
// if not hack in hackTanks then
24229: LD_VAR 0 1
24233: PUSH
24234: LD_EXP 88
24238: IN
24239: NOT
24240: IFFALSE 24244
// exit ;
24242: GO 24484
// index := GetElementIndex ( hackTanks , hack ) ;
24244: LD_ADDR_VAR 0 4
24248: PUSH
24249: LD_EXP 88
24253: PPUSH
24254: LD_VAR 0 1
24258: PPUSH
24259: CALL 31353 0 2
24263: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24264: LD_ADDR_VAR 0 3
24268: PUSH
24269: DOUBLE
24270: LD_EXP 89
24274: PUSH
24275: LD_VAR 0 4
24279: ARRAY
24280: INC
24281: ST_TO_ADDR
24282: LD_INT 1
24284: PUSH
24285: FOR_DOWNTO
24286: IFFALSE 24458
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24288: LD_ADDR_VAR 0 5
24292: PUSH
24293: LD_EXP 89
24297: PUSH
24298: LD_VAR 0 4
24302: ARRAY
24303: PUSH
24304: LD_VAR 0 3
24308: ARRAY
24309: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24310: LD_VAR 0 5
24314: PUSH
24315: LD_INT 1
24317: ARRAY
24318: PPUSH
24319: CALL_OW 302
24323: NOT
24324: PUSH
24325: LD_VAR 0 5
24329: PUSH
24330: LD_INT 1
24332: ARRAY
24333: PPUSH
24334: CALL_OW 255
24338: PUSH
24339: LD_VAR 0 1
24343: PPUSH
24344: CALL_OW 255
24348: NONEQUAL
24349: OR
24350: IFFALSE 24456
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24352: LD_VAR 0 5
24356: PUSH
24357: LD_INT 1
24359: ARRAY
24360: PPUSH
24361: CALL_OW 305
24365: PUSH
24366: LD_VAR 0 5
24370: PUSH
24371: LD_INT 1
24373: ARRAY
24374: PPUSH
24375: CALL_OW 255
24379: PUSH
24380: LD_VAR 0 1
24384: PPUSH
24385: CALL_OW 255
24389: EQUAL
24390: AND
24391: IFFALSE 24415
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24393: LD_VAR 0 5
24397: PUSH
24398: LD_INT 1
24400: ARRAY
24401: PPUSH
24402: LD_VAR 0 5
24406: PUSH
24407: LD_INT 2
24409: ARRAY
24410: PPUSH
24411: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24415: LD_ADDR_EXP 89
24419: PUSH
24420: LD_EXP 89
24424: PPUSH
24425: LD_VAR 0 4
24429: PPUSH
24430: LD_EXP 89
24434: PUSH
24435: LD_VAR 0 4
24439: ARRAY
24440: PPUSH
24441: LD_VAR 0 3
24445: PPUSH
24446: CALL_OW 3
24450: PPUSH
24451: CALL_OW 1
24455: ST_TO_ADDR
// end ; end ;
24456: GO 24285
24458: POP
24459: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24460: LD_VAR 0 1
24464: PPUSH
24465: LD_EXP 89
24469: PUSH
24470: LD_VAR 0 4
24474: ARRAY
24475: PUSH
24476: LD_INT 0
24478: PLUS
24479: PPUSH
24480: CALL_OW 505
// end ;
24484: LD_VAR 0 2
24488: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24489: LD_INT 0
24491: PPUSH
24492: PPUSH
24493: PPUSH
24494: PPUSH
// if not hack in hackTanks then
24495: LD_VAR 0 1
24499: PUSH
24500: LD_EXP 88
24504: IN
24505: NOT
24506: IFFALSE 24510
// exit ;
24508: GO 24595
// index := GetElementIndex ( hackTanks , hack ) ;
24510: LD_ADDR_VAR 0 5
24514: PUSH
24515: LD_EXP 88
24519: PPUSH
24520: LD_VAR 0 1
24524: PPUSH
24525: CALL 31353 0 2
24529: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24530: LD_ADDR_VAR 0 4
24534: PUSH
24535: DOUBLE
24536: LD_INT 1
24538: DEC
24539: ST_TO_ADDR
24540: LD_EXP 89
24544: PUSH
24545: LD_VAR 0 5
24549: ARRAY
24550: PUSH
24551: FOR_TO
24552: IFFALSE 24593
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24554: LD_EXP 89
24558: PUSH
24559: LD_VAR 0 5
24563: ARRAY
24564: PUSH
24565: LD_VAR 0 4
24569: ARRAY
24570: PUSH
24571: LD_INT 1
24573: ARRAY
24574: PUSH
24575: LD_VAR 0 2
24579: EQUAL
24580: IFFALSE 24591
// KillUnit ( vehicle ) ;
24582: LD_VAR 0 2
24586: PPUSH
24587: CALL_OW 66
24591: GO 24551
24593: POP
24594: POP
// end ;
24595: LD_VAR 0 3
24599: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24600: LD_EXP 93
24604: NOT
24605: IFFALSE 24640
24607: GO 24609
24609: DISABLE
// begin initMiner := true ;
24610: LD_ADDR_EXP 93
24614: PUSH
24615: LD_INT 1
24617: ST_TO_ADDR
// minersList := [ ] ;
24618: LD_ADDR_EXP 94
24622: PUSH
24623: EMPTY
24624: ST_TO_ADDR
// minerMinesList := [ ] ;
24625: LD_ADDR_EXP 95
24629: PUSH
24630: EMPTY
24631: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24632: LD_ADDR_EXP 96
24636: PUSH
24637: LD_INT 5
24639: ST_TO_ADDR
// end ;
24640: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24641: LD_EXP 93
24645: PUSH
24646: LD_INT 34
24648: PUSH
24649: LD_INT 81
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PPUSH
24656: CALL_OW 69
24660: AND
24661: IFFALSE 25122
24663: GO 24665
24665: DISABLE
24666: LD_INT 0
24668: PPUSH
24669: PPUSH
24670: PPUSH
24671: PPUSH
// begin enable ;
24672: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24673: LD_ADDR_VAR 0 1
24677: PUSH
24678: LD_INT 34
24680: PUSH
24681: LD_INT 81
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PPUSH
24688: CALL_OW 69
24692: PUSH
24693: FOR_IN
24694: IFFALSE 24766
// begin if not i in minersList then
24696: LD_VAR 0 1
24700: PUSH
24701: LD_EXP 94
24705: IN
24706: NOT
24707: IFFALSE 24764
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24709: LD_ADDR_EXP 94
24713: PUSH
24714: LD_EXP 94
24718: PPUSH
24719: LD_EXP 94
24723: PUSH
24724: LD_INT 1
24726: PLUS
24727: PPUSH
24728: LD_VAR 0 1
24732: PPUSH
24733: CALL_OW 1
24737: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24738: LD_ADDR_EXP 95
24742: PUSH
24743: LD_EXP 95
24747: PPUSH
24748: LD_EXP 95
24752: PUSH
24753: LD_INT 1
24755: PLUS
24756: PPUSH
24757: EMPTY
24758: PPUSH
24759: CALL_OW 1
24763: ST_TO_ADDR
// end end ;
24764: GO 24693
24766: POP
24767: POP
// for i := minerMinesList downto 1 do
24768: LD_ADDR_VAR 0 1
24772: PUSH
24773: DOUBLE
24774: LD_EXP 95
24778: INC
24779: ST_TO_ADDR
24780: LD_INT 1
24782: PUSH
24783: FOR_DOWNTO
24784: IFFALSE 25120
// begin if IsLive ( minersList [ i ] ) then
24786: LD_EXP 94
24790: PUSH
24791: LD_VAR 0 1
24795: ARRAY
24796: PPUSH
24797: CALL_OW 300
24801: IFFALSE 24829
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24803: LD_EXP 94
24807: PUSH
24808: LD_VAR 0 1
24812: ARRAY
24813: PPUSH
24814: LD_EXP 95
24818: PUSH
24819: LD_VAR 0 1
24823: ARRAY
24824: PPUSH
24825: CALL_OW 505
// if not minerMinesList [ i ] then
24829: LD_EXP 95
24833: PUSH
24834: LD_VAR 0 1
24838: ARRAY
24839: NOT
24840: IFFALSE 24844
// continue ;
24842: GO 24783
// for j := minerMinesList [ i ] downto 1 do
24844: LD_ADDR_VAR 0 2
24848: PUSH
24849: DOUBLE
24850: LD_EXP 95
24854: PUSH
24855: LD_VAR 0 1
24859: ARRAY
24860: INC
24861: ST_TO_ADDR
24862: LD_INT 1
24864: PUSH
24865: FOR_DOWNTO
24866: IFFALSE 25116
// begin side := GetSide ( minersList [ i ] ) ;
24868: LD_ADDR_VAR 0 3
24872: PUSH
24873: LD_EXP 94
24877: PUSH
24878: LD_VAR 0 1
24882: ARRAY
24883: PPUSH
24884: CALL_OW 255
24888: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24889: LD_ADDR_VAR 0 4
24893: PUSH
24894: LD_EXP 95
24898: PUSH
24899: LD_VAR 0 1
24903: ARRAY
24904: PUSH
24905: LD_VAR 0 2
24909: ARRAY
24910: PUSH
24911: LD_INT 1
24913: ARRAY
24914: PPUSH
24915: LD_EXP 95
24919: PUSH
24920: LD_VAR 0 1
24924: ARRAY
24925: PUSH
24926: LD_VAR 0 2
24930: ARRAY
24931: PUSH
24932: LD_INT 2
24934: ARRAY
24935: PPUSH
24936: CALL_OW 428
24940: ST_TO_ADDR
// if not tmp then
24941: LD_VAR 0 4
24945: NOT
24946: IFFALSE 24950
// continue ;
24948: GO 24865
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24950: LD_VAR 0 4
24954: PUSH
24955: LD_INT 81
24957: PUSH
24958: LD_VAR 0 3
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PPUSH
24967: CALL_OW 69
24971: IN
24972: PUSH
24973: LD_EXP 95
24977: PUSH
24978: LD_VAR 0 1
24982: ARRAY
24983: PUSH
24984: LD_VAR 0 2
24988: ARRAY
24989: PUSH
24990: LD_INT 1
24992: ARRAY
24993: PPUSH
24994: LD_EXP 95
24998: PUSH
24999: LD_VAR 0 1
25003: ARRAY
25004: PUSH
25005: LD_VAR 0 2
25009: ARRAY
25010: PUSH
25011: LD_INT 2
25013: ARRAY
25014: PPUSH
25015: CALL_OW 458
25019: AND
25020: IFFALSE 25114
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25022: LD_EXP 95
25026: PUSH
25027: LD_VAR 0 1
25031: ARRAY
25032: PUSH
25033: LD_VAR 0 2
25037: ARRAY
25038: PUSH
25039: LD_INT 1
25041: ARRAY
25042: PPUSH
25043: LD_EXP 95
25047: PUSH
25048: LD_VAR 0 1
25052: ARRAY
25053: PUSH
25054: LD_VAR 0 2
25058: ARRAY
25059: PUSH
25060: LD_INT 2
25062: ARRAY
25063: PPUSH
25064: LD_VAR 0 3
25068: PPUSH
25069: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25073: LD_ADDR_EXP 95
25077: PUSH
25078: LD_EXP 95
25082: PPUSH
25083: LD_VAR 0 1
25087: PPUSH
25088: LD_EXP 95
25092: PUSH
25093: LD_VAR 0 1
25097: ARRAY
25098: PPUSH
25099: LD_VAR 0 2
25103: PPUSH
25104: CALL_OW 3
25108: PPUSH
25109: CALL_OW 1
25113: ST_TO_ADDR
// end ; end ;
25114: GO 24865
25116: POP
25117: POP
// end ;
25118: GO 24783
25120: POP
25121: POP
// end ;
25122: PPOPN 4
25124: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25125: LD_INT 0
25127: PPUSH
25128: PPUSH
// result := false ;
25129: LD_ADDR_VAR 0 4
25133: PUSH
25134: LD_INT 0
25136: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25137: LD_VAR 0 1
25141: PPUSH
25142: CALL_OW 264
25146: PUSH
25147: LD_INT 81
25149: EQUAL
25150: NOT
25151: IFFALSE 25155
// exit ;
25153: GO 25395
// index := GetElementIndex ( minersList , unit ) ;
25155: LD_ADDR_VAR 0 5
25159: PUSH
25160: LD_EXP 94
25164: PPUSH
25165: LD_VAR 0 1
25169: PPUSH
25170: CALL 31353 0 2
25174: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25175: LD_EXP 95
25179: PUSH
25180: LD_VAR 0 5
25184: ARRAY
25185: PUSH
25186: LD_EXP 96
25190: GREATEREQUAL
25191: IFFALSE 25195
// exit ;
25193: GO 25395
// ComMoveXY ( unit , x , y ) ;
25195: LD_VAR 0 1
25199: PPUSH
25200: LD_VAR 0 2
25204: PPUSH
25205: LD_VAR 0 3
25209: PPUSH
25210: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25214: LD_INT 35
25216: PPUSH
25217: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25221: LD_VAR 0 1
25225: PPUSH
25226: LD_VAR 0 2
25230: PPUSH
25231: LD_VAR 0 3
25235: PPUSH
25236: CALL 63094 0 3
25240: NOT
25241: PUSH
25242: LD_VAR 0 1
25246: PPUSH
25247: CALL_OW 314
25251: AND
25252: IFFALSE 25256
// exit ;
25254: GO 25395
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25256: LD_VAR 0 2
25260: PPUSH
25261: LD_VAR 0 3
25265: PPUSH
25266: CALL_OW 428
25270: PUSH
25271: LD_VAR 0 1
25275: EQUAL
25276: PUSH
25277: LD_VAR 0 1
25281: PPUSH
25282: CALL_OW 314
25286: NOT
25287: AND
25288: IFFALSE 25214
// PlaySoundXY ( x , y , PlantMine ) ;
25290: LD_VAR 0 2
25294: PPUSH
25295: LD_VAR 0 3
25299: PPUSH
25300: LD_STRING PlantMine
25302: PPUSH
25303: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25307: LD_VAR 0 2
25311: PPUSH
25312: LD_VAR 0 3
25316: PPUSH
25317: LD_VAR 0 1
25321: PPUSH
25322: CALL_OW 255
25326: PPUSH
25327: LD_INT 0
25329: PPUSH
25330: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25334: LD_ADDR_EXP 95
25338: PUSH
25339: LD_EXP 95
25343: PPUSH
25344: LD_VAR 0 5
25348: PUSH
25349: LD_EXP 95
25353: PUSH
25354: LD_VAR 0 5
25358: ARRAY
25359: PUSH
25360: LD_INT 1
25362: PLUS
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PPUSH
25368: LD_VAR 0 2
25372: PUSH
25373: LD_VAR 0 3
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PPUSH
25382: CALL 31568 0 3
25386: ST_TO_ADDR
// result := true ;
25387: LD_ADDR_VAR 0 4
25391: PUSH
25392: LD_INT 1
25394: ST_TO_ADDR
// end ;
25395: LD_VAR 0 4
25399: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25400: LD_INT 0
25402: PPUSH
25403: PPUSH
25404: PPUSH
// if not unit in minersList then
25405: LD_VAR 0 1
25409: PUSH
25410: LD_EXP 94
25414: IN
25415: NOT
25416: IFFALSE 25420
// exit ;
25418: GO 25812
// index := GetElementIndex ( minersList , unit ) ;
25420: LD_ADDR_VAR 0 6
25424: PUSH
25425: LD_EXP 94
25429: PPUSH
25430: LD_VAR 0 1
25434: PPUSH
25435: CALL 31353 0 2
25439: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25440: LD_ADDR_VAR 0 5
25444: PUSH
25445: DOUBLE
25446: LD_EXP 95
25450: PUSH
25451: LD_VAR 0 6
25455: ARRAY
25456: INC
25457: ST_TO_ADDR
25458: LD_INT 1
25460: PUSH
25461: FOR_DOWNTO
25462: IFFALSE 25623
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25464: LD_EXP 95
25468: PUSH
25469: LD_VAR 0 6
25473: ARRAY
25474: PUSH
25475: LD_VAR 0 5
25479: ARRAY
25480: PUSH
25481: LD_INT 1
25483: ARRAY
25484: PUSH
25485: LD_VAR 0 2
25489: EQUAL
25490: PUSH
25491: LD_EXP 95
25495: PUSH
25496: LD_VAR 0 6
25500: ARRAY
25501: PUSH
25502: LD_VAR 0 5
25506: ARRAY
25507: PUSH
25508: LD_INT 2
25510: ARRAY
25511: PUSH
25512: LD_VAR 0 3
25516: EQUAL
25517: AND
25518: IFFALSE 25621
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25520: LD_EXP 95
25524: PUSH
25525: LD_VAR 0 6
25529: ARRAY
25530: PUSH
25531: LD_VAR 0 5
25535: ARRAY
25536: PUSH
25537: LD_INT 1
25539: ARRAY
25540: PPUSH
25541: LD_EXP 95
25545: PUSH
25546: LD_VAR 0 6
25550: ARRAY
25551: PUSH
25552: LD_VAR 0 5
25556: ARRAY
25557: PUSH
25558: LD_INT 2
25560: ARRAY
25561: PPUSH
25562: LD_VAR 0 1
25566: PPUSH
25567: CALL_OW 255
25571: PPUSH
25572: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25576: LD_ADDR_EXP 95
25580: PUSH
25581: LD_EXP 95
25585: PPUSH
25586: LD_VAR 0 6
25590: PPUSH
25591: LD_EXP 95
25595: PUSH
25596: LD_VAR 0 6
25600: ARRAY
25601: PPUSH
25602: LD_VAR 0 5
25606: PPUSH
25607: CALL_OW 3
25611: PPUSH
25612: CALL_OW 1
25616: ST_TO_ADDR
// exit ;
25617: POP
25618: POP
25619: GO 25812
// end ; end ;
25621: GO 25461
25623: POP
25624: POP
// for i := minerMinesList [ index ] downto 1 do
25625: LD_ADDR_VAR 0 5
25629: PUSH
25630: DOUBLE
25631: LD_EXP 95
25635: PUSH
25636: LD_VAR 0 6
25640: ARRAY
25641: INC
25642: ST_TO_ADDR
25643: LD_INT 1
25645: PUSH
25646: FOR_DOWNTO
25647: IFFALSE 25810
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25649: LD_EXP 95
25653: PUSH
25654: LD_VAR 0 6
25658: ARRAY
25659: PUSH
25660: LD_VAR 0 5
25664: ARRAY
25665: PUSH
25666: LD_INT 1
25668: ARRAY
25669: PPUSH
25670: LD_EXP 95
25674: PUSH
25675: LD_VAR 0 6
25679: ARRAY
25680: PUSH
25681: LD_VAR 0 5
25685: ARRAY
25686: PUSH
25687: LD_INT 2
25689: ARRAY
25690: PPUSH
25691: LD_VAR 0 2
25695: PPUSH
25696: LD_VAR 0 3
25700: PPUSH
25701: CALL_OW 298
25705: PUSH
25706: LD_INT 6
25708: LESS
25709: IFFALSE 25808
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25711: LD_EXP 95
25715: PUSH
25716: LD_VAR 0 6
25720: ARRAY
25721: PUSH
25722: LD_VAR 0 5
25726: ARRAY
25727: PUSH
25728: LD_INT 1
25730: ARRAY
25731: PPUSH
25732: LD_EXP 95
25736: PUSH
25737: LD_VAR 0 6
25741: ARRAY
25742: PUSH
25743: LD_VAR 0 5
25747: ARRAY
25748: PUSH
25749: LD_INT 2
25751: ARRAY
25752: PPUSH
25753: LD_VAR 0 1
25757: PPUSH
25758: CALL_OW 255
25762: PPUSH
25763: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25767: LD_ADDR_EXP 95
25771: PUSH
25772: LD_EXP 95
25776: PPUSH
25777: LD_VAR 0 6
25781: PPUSH
25782: LD_EXP 95
25786: PUSH
25787: LD_VAR 0 6
25791: ARRAY
25792: PPUSH
25793: LD_VAR 0 5
25797: PPUSH
25798: CALL_OW 3
25802: PPUSH
25803: CALL_OW 1
25807: ST_TO_ADDR
// end ; end ;
25808: GO 25646
25810: POP
25811: POP
// end ;
25812: LD_VAR 0 4
25816: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25817: LD_INT 0
25819: PPUSH
25820: PPUSH
25821: PPUSH
25822: PPUSH
25823: PPUSH
25824: PPUSH
25825: PPUSH
25826: PPUSH
25827: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25828: LD_VAR 0 1
25832: PPUSH
25833: CALL_OW 264
25837: PUSH
25838: LD_INT 81
25840: EQUAL
25841: NOT
25842: PUSH
25843: LD_VAR 0 1
25847: PUSH
25848: LD_EXP 94
25852: IN
25853: NOT
25854: OR
25855: IFFALSE 25859
// exit ;
25857: GO 26181
// index := GetElementIndex ( minersList , unit ) ;
25859: LD_ADDR_VAR 0 6
25863: PUSH
25864: LD_EXP 94
25868: PPUSH
25869: LD_VAR 0 1
25873: PPUSH
25874: CALL 31353 0 2
25878: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25879: LD_ADDR_VAR 0 8
25883: PUSH
25884: LD_EXP 96
25888: PUSH
25889: LD_EXP 95
25893: PUSH
25894: LD_VAR 0 6
25898: ARRAY
25899: MINUS
25900: ST_TO_ADDR
// if not minesFreeAmount then
25901: LD_VAR 0 8
25905: NOT
25906: IFFALSE 25910
// exit ;
25908: GO 26181
// tmp := [ ] ;
25910: LD_ADDR_VAR 0 7
25914: PUSH
25915: EMPTY
25916: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25917: LD_ADDR_VAR 0 5
25921: PUSH
25922: DOUBLE
25923: LD_INT 1
25925: DEC
25926: ST_TO_ADDR
25927: LD_VAR 0 8
25931: PUSH
25932: FOR_TO
25933: IFFALSE 26128
// begin _d := rand ( 0 , 5 ) ;
25935: LD_ADDR_VAR 0 11
25939: PUSH
25940: LD_INT 0
25942: PPUSH
25943: LD_INT 5
25945: PPUSH
25946: CALL_OW 12
25950: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25951: LD_ADDR_VAR 0 12
25955: PUSH
25956: LD_INT 2
25958: PPUSH
25959: LD_INT 6
25961: PPUSH
25962: CALL_OW 12
25966: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25967: LD_ADDR_VAR 0 9
25971: PUSH
25972: LD_VAR 0 2
25976: PPUSH
25977: LD_VAR 0 11
25981: PPUSH
25982: LD_VAR 0 12
25986: PPUSH
25987: CALL_OW 272
25991: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25992: LD_ADDR_VAR 0 10
25996: PUSH
25997: LD_VAR 0 3
26001: PPUSH
26002: LD_VAR 0 11
26006: PPUSH
26007: LD_VAR 0 12
26011: PPUSH
26012: CALL_OW 273
26016: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26017: LD_VAR 0 9
26021: PPUSH
26022: LD_VAR 0 10
26026: PPUSH
26027: CALL_OW 488
26031: PUSH
26032: LD_VAR 0 9
26036: PUSH
26037: LD_VAR 0 10
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_VAR 0 7
26050: IN
26051: NOT
26052: AND
26053: PUSH
26054: LD_VAR 0 9
26058: PPUSH
26059: LD_VAR 0 10
26063: PPUSH
26064: CALL_OW 458
26068: NOT
26069: AND
26070: IFFALSE 26112
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26072: LD_ADDR_VAR 0 7
26076: PUSH
26077: LD_VAR 0 7
26081: PPUSH
26082: LD_VAR 0 7
26086: PUSH
26087: LD_INT 1
26089: PLUS
26090: PPUSH
26091: LD_VAR 0 9
26095: PUSH
26096: LD_VAR 0 10
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PPUSH
26105: CALL_OW 1
26109: ST_TO_ADDR
26110: GO 26126
// i := i - 1 ;
26112: LD_ADDR_VAR 0 5
26116: PUSH
26117: LD_VAR 0 5
26121: PUSH
26122: LD_INT 1
26124: MINUS
26125: ST_TO_ADDR
// end ;
26126: GO 25932
26128: POP
26129: POP
// for i in tmp do
26130: LD_ADDR_VAR 0 5
26134: PUSH
26135: LD_VAR 0 7
26139: PUSH
26140: FOR_IN
26141: IFFALSE 26179
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26143: LD_VAR 0 1
26147: PPUSH
26148: LD_VAR 0 5
26152: PUSH
26153: LD_INT 1
26155: ARRAY
26156: PPUSH
26157: LD_VAR 0 5
26161: PUSH
26162: LD_INT 2
26164: ARRAY
26165: PPUSH
26166: CALL 25125 0 3
26170: NOT
26171: IFFALSE 26177
// exit ;
26173: POP
26174: POP
26175: GO 26181
26177: GO 26140
26179: POP
26180: POP
// end ;
26181: LD_VAR 0 4
26185: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26186: LD_INT 0
26188: PPUSH
26189: PPUSH
26190: PPUSH
26191: PPUSH
26192: PPUSH
26193: PPUSH
26194: PPUSH
// if not GetClass ( unit ) = class_sniper then
26195: LD_VAR 0 1
26199: PPUSH
26200: CALL_OW 257
26204: PUSH
26205: LD_INT 5
26207: EQUAL
26208: NOT
26209: IFFALSE 26213
// exit ;
26211: GO 26601
// dist := 8 ;
26213: LD_ADDR_VAR 0 5
26217: PUSH
26218: LD_INT 8
26220: ST_TO_ADDR
// viewRange := 12 ;
26221: LD_ADDR_VAR 0 7
26225: PUSH
26226: LD_INT 12
26228: ST_TO_ADDR
// side := GetSide ( unit ) ;
26229: LD_ADDR_VAR 0 6
26233: PUSH
26234: LD_VAR 0 1
26238: PPUSH
26239: CALL_OW 255
26243: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26244: LD_INT 61
26246: PPUSH
26247: LD_VAR 0 6
26251: PPUSH
26252: CALL_OW 321
26256: PUSH
26257: LD_INT 2
26259: EQUAL
26260: IFFALSE 26270
// viewRange := 16 ;
26262: LD_ADDR_VAR 0 7
26266: PUSH
26267: LD_INT 16
26269: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26270: LD_VAR 0 1
26274: PPUSH
26275: LD_VAR 0 2
26279: PPUSH
26280: LD_VAR 0 3
26284: PPUSH
26285: CALL_OW 297
26289: PUSH
26290: LD_VAR 0 5
26294: GREATER
26295: IFFALSE 26374
// begin ComMoveXY ( unit , x , y ) ;
26297: LD_VAR 0 1
26301: PPUSH
26302: LD_VAR 0 2
26306: PPUSH
26307: LD_VAR 0 3
26311: PPUSH
26312: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26316: LD_INT 35
26318: PPUSH
26319: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26323: LD_VAR 0 1
26327: PPUSH
26328: LD_VAR 0 2
26332: PPUSH
26333: LD_VAR 0 3
26337: PPUSH
26338: CALL 63094 0 3
26342: NOT
26343: IFFALSE 26347
// exit ;
26345: GO 26601
// until GetDistUnitXY ( unit , x , y ) < dist ;
26347: LD_VAR 0 1
26351: PPUSH
26352: LD_VAR 0 2
26356: PPUSH
26357: LD_VAR 0 3
26361: PPUSH
26362: CALL_OW 297
26366: PUSH
26367: LD_VAR 0 5
26371: LESS
26372: IFFALSE 26316
// end ; ComTurnXY ( unit , x , y ) ;
26374: LD_VAR 0 1
26378: PPUSH
26379: LD_VAR 0 2
26383: PPUSH
26384: LD_VAR 0 3
26388: PPUSH
26389: CALL_OW 118
// wait ( 5 ) ;
26393: LD_INT 5
26395: PPUSH
26396: CALL_OW 67
// _d := GetDir ( unit ) ;
26400: LD_ADDR_VAR 0 10
26404: PUSH
26405: LD_VAR 0 1
26409: PPUSH
26410: CALL_OW 254
26414: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26415: LD_ADDR_VAR 0 8
26419: PUSH
26420: LD_VAR 0 1
26424: PPUSH
26425: CALL_OW 250
26429: PPUSH
26430: LD_VAR 0 10
26434: PPUSH
26435: LD_VAR 0 5
26439: PPUSH
26440: CALL_OW 272
26444: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26445: LD_ADDR_VAR 0 9
26449: PUSH
26450: LD_VAR 0 1
26454: PPUSH
26455: CALL_OW 251
26459: PPUSH
26460: LD_VAR 0 10
26464: PPUSH
26465: LD_VAR 0 5
26469: PPUSH
26470: CALL_OW 273
26474: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26475: LD_VAR 0 8
26479: PPUSH
26480: LD_VAR 0 9
26484: PPUSH
26485: CALL_OW 488
26489: NOT
26490: IFFALSE 26494
// exit ;
26492: GO 26601
// ComAnimCustom ( unit , 1 ) ;
26494: LD_VAR 0 1
26498: PPUSH
26499: LD_INT 1
26501: PPUSH
26502: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26506: LD_VAR 0 8
26510: PPUSH
26511: LD_VAR 0 9
26515: PPUSH
26516: LD_VAR 0 6
26520: PPUSH
26521: LD_VAR 0 7
26525: PPUSH
26526: CALL_OW 330
// repeat wait ( 1 ) ;
26530: LD_INT 1
26532: PPUSH
26533: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26537: LD_VAR 0 1
26541: PPUSH
26542: CALL_OW 316
26546: PUSH
26547: LD_VAR 0 1
26551: PPUSH
26552: CALL_OW 314
26556: OR
26557: PUSH
26558: LD_VAR 0 1
26562: PPUSH
26563: CALL_OW 302
26567: NOT
26568: OR
26569: PUSH
26570: LD_VAR 0 1
26574: PPUSH
26575: CALL_OW 301
26579: OR
26580: IFFALSE 26530
// RemoveSeeing ( _x , _y , side ) ;
26582: LD_VAR 0 8
26586: PPUSH
26587: LD_VAR 0 9
26591: PPUSH
26592: LD_VAR 0 6
26596: PPUSH
26597: CALL_OW 331
// end ; end_of_file
26601: LD_VAR 0 4
26605: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26606: LD_INT 0
26608: PPUSH
26609: PPUSH
// if exist_mode then
26610: LD_VAR 0 2
26614: IFFALSE 26639
// unit := CreateCharacter ( prefix & ident ) else
26616: LD_ADDR_VAR 0 5
26620: PUSH
26621: LD_VAR 0 3
26625: PUSH
26626: LD_VAR 0 1
26630: STR
26631: PPUSH
26632: CALL_OW 34
26636: ST_TO_ADDR
26637: GO 26654
// unit := NewCharacter ( ident ) ;
26639: LD_ADDR_VAR 0 5
26643: PUSH
26644: LD_VAR 0 1
26648: PPUSH
26649: CALL_OW 25
26653: ST_TO_ADDR
// result := unit ;
26654: LD_ADDR_VAR 0 4
26658: PUSH
26659: LD_VAR 0 5
26663: ST_TO_ADDR
// end ;
26664: LD_VAR 0 4
26668: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26669: LD_INT 0
26671: PPUSH
26672: PPUSH
// if not side or not nation then
26673: LD_VAR 0 1
26677: NOT
26678: PUSH
26679: LD_VAR 0 2
26683: NOT
26684: OR
26685: IFFALSE 26689
// exit ;
26687: GO 27457
// case nation of nation_american :
26689: LD_VAR 0 2
26693: PUSH
26694: LD_INT 1
26696: DOUBLE
26697: EQUAL
26698: IFTRUE 26702
26700: GO 26916
26702: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26703: LD_ADDR_VAR 0 4
26707: PUSH
26708: LD_INT 35
26710: PUSH
26711: LD_INT 45
26713: PUSH
26714: LD_INT 46
26716: PUSH
26717: LD_INT 47
26719: PUSH
26720: LD_INT 82
26722: PUSH
26723: LD_INT 83
26725: PUSH
26726: LD_INT 84
26728: PUSH
26729: LD_INT 85
26731: PUSH
26732: LD_INT 86
26734: PUSH
26735: LD_INT 1
26737: PUSH
26738: LD_INT 2
26740: PUSH
26741: LD_INT 6
26743: PUSH
26744: LD_INT 15
26746: PUSH
26747: LD_INT 16
26749: PUSH
26750: LD_INT 7
26752: PUSH
26753: LD_INT 12
26755: PUSH
26756: LD_INT 13
26758: PUSH
26759: LD_INT 10
26761: PUSH
26762: LD_INT 14
26764: PUSH
26765: LD_INT 20
26767: PUSH
26768: LD_INT 21
26770: PUSH
26771: LD_INT 22
26773: PUSH
26774: LD_INT 25
26776: PUSH
26777: LD_INT 32
26779: PUSH
26780: LD_INT 27
26782: PUSH
26783: LD_INT 36
26785: PUSH
26786: LD_INT 69
26788: PUSH
26789: LD_INT 39
26791: PUSH
26792: LD_INT 34
26794: PUSH
26795: LD_INT 40
26797: PUSH
26798: LD_INT 48
26800: PUSH
26801: LD_INT 49
26803: PUSH
26804: LD_INT 50
26806: PUSH
26807: LD_INT 51
26809: PUSH
26810: LD_INT 52
26812: PUSH
26813: LD_INT 53
26815: PUSH
26816: LD_INT 54
26818: PUSH
26819: LD_INT 55
26821: PUSH
26822: LD_INT 56
26824: PUSH
26825: LD_INT 57
26827: PUSH
26828: LD_INT 58
26830: PUSH
26831: LD_INT 59
26833: PUSH
26834: LD_INT 60
26836: PUSH
26837: LD_INT 61
26839: PUSH
26840: LD_INT 62
26842: PUSH
26843: LD_INT 80
26845: PUSH
26846: LD_INT 82
26848: PUSH
26849: LD_INT 83
26851: PUSH
26852: LD_INT 84
26854: PUSH
26855: LD_INT 85
26857: PUSH
26858: LD_INT 86
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: ST_TO_ADDR
26914: GO 27381
26916: LD_INT 2
26918: DOUBLE
26919: EQUAL
26920: IFTRUE 26924
26922: GO 27150
26924: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26925: LD_ADDR_VAR 0 4
26929: PUSH
26930: LD_INT 35
26932: PUSH
26933: LD_INT 45
26935: PUSH
26936: LD_INT 46
26938: PUSH
26939: LD_INT 47
26941: PUSH
26942: LD_INT 82
26944: PUSH
26945: LD_INT 83
26947: PUSH
26948: LD_INT 84
26950: PUSH
26951: LD_INT 85
26953: PUSH
26954: LD_INT 87
26956: PUSH
26957: LD_INT 70
26959: PUSH
26960: LD_INT 1
26962: PUSH
26963: LD_INT 11
26965: PUSH
26966: LD_INT 3
26968: PUSH
26969: LD_INT 4
26971: PUSH
26972: LD_INT 5
26974: PUSH
26975: LD_INT 6
26977: PUSH
26978: LD_INT 15
26980: PUSH
26981: LD_INT 18
26983: PUSH
26984: LD_INT 7
26986: PUSH
26987: LD_INT 17
26989: PUSH
26990: LD_INT 8
26992: PUSH
26993: LD_INT 20
26995: PUSH
26996: LD_INT 21
26998: PUSH
26999: LD_INT 22
27001: PUSH
27002: LD_INT 72
27004: PUSH
27005: LD_INT 26
27007: PUSH
27008: LD_INT 69
27010: PUSH
27011: LD_INT 39
27013: PUSH
27014: LD_INT 40
27016: PUSH
27017: LD_INT 41
27019: PUSH
27020: LD_INT 42
27022: PUSH
27023: LD_INT 43
27025: PUSH
27026: LD_INT 48
27028: PUSH
27029: LD_INT 49
27031: PUSH
27032: LD_INT 50
27034: PUSH
27035: LD_INT 51
27037: PUSH
27038: LD_INT 52
27040: PUSH
27041: LD_INT 53
27043: PUSH
27044: LD_INT 54
27046: PUSH
27047: LD_INT 55
27049: PUSH
27050: LD_INT 56
27052: PUSH
27053: LD_INT 60
27055: PUSH
27056: LD_INT 61
27058: PUSH
27059: LD_INT 62
27061: PUSH
27062: LD_INT 66
27064: PUSH
27065: LD_INT 67
27067: PUSH
27068: LD_INT 68
27070: PUSH
27071: LD_INT 81
27073: PUSH
27074: LD_INT 82
27076: PUSH
27077: LD_INT 83
27079: PUSH
27080: LD_INT 84
27082: PUSH
27083: LD_INT 85
27085: PUSH
27086: LD_INT 87
27088: PUSH
27089: LD_INT 88
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: ST_TO_ADDR
27148: GO 27381
27150: LD_INT 3
27152: DOUBLE
27153: EQUAL
27154: IFTRUE 27158
27156: GO 27380
27158: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27159: LD_ADDR_VAR 0 4
27163: PUSH
27164: LD_INT 46
27166: PUSH
27167: LD_INT 47
27169: PUSH
27170: LD_INT 1
27172: PUSH
27173: LD_INT 2
27175: PUSH
27176: LD_INT 82
27178: PUSH
27179: LD_INT 83
27181: PUSH
27182: LD_INT 84
27184: PUSH
27185: LD_INT 85
27187: PUSH
27188: LD_INT 86
27190: PUSH
27191: LD_INT 11
27193: PUSH
27194: LD_INT 9
27196: PUSH
27197: LD_INT 20
27199: PUSH
27200: LD_INT 19
27202: PUSH
27203: LD_INT 21
27205: PUSH
27206: LD_INT 24
27208: PUSH
27209: LD_INT 22
27211: PUSH
27212: LD_INT 25
27214: PUSH
27215: LD_INT 28
27217: PUSH
27218: LD_INT 29
27220: PUSH
27221: LD_INT 30
27223: PUSH
27224: LD_INT 31
27226: PUSH
27227: LD_INT 37
27229: PUSH
27230: LD_INT 38
27232: PUSH
27233: LD_INT 32
27235: PUSH
27236: LD_INT 27
27238: PUSH
27239: LD_INT 33
27241: PUSH
27242: LD_INT 69
27244: PUSH
27245: LD_INT 39
27247: PUSH
27248: LD_INT 34
27250: PUSH
27251: LD_INT 40
27253: PUSH
27254: LD_INT 71
27256: PUSH
27257: LD_INT 23
27259: PUSH
27260: LD_INT 44
27262: PUSH
27263: LD_INT 48
27265: PUSH
27266: LD_INT 49
27268: PUSH
27269: LD_INT 50
27271: PUSH
27272: LD_INT 51
27274: PUSH
27275: LD_INT 52
27277: PUSH
27278: LD_INT 53
27280: PUSH
27281: LD_INT 54
27283: PUSH
27284: LD_INT 55
27286: PUSH
27287: LD_INT 56
27289: PUSH
27290: LD_INT 57
27292: PUSH
27293: LD_INT 58
27295: PUSH
27296: LD_INT 59
27298: PUSH
27299: LD_INT 63
27301: PUSH
27302: LD_INT 64
27304: PUSH
27305: LD_INT 65
27307: PUSH
27308: LD_INT 82
27310: PUSH
27311: LD_INT 83
27313: PUSH
27314: LD_INT 84
27316: PUSH
27317: LD_INT 85
27319: PUSH
27320: LD_INT 86
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: ST_TO_ADDR
27378: GO 27381
27380: POP
// if state > - 1 and state < 3 then
27381: LD_VAR 0 3
27385: PUSH
27386: LD_INT 1
27388: NEG
27389: GREATER
27390: PUSH
27391: LD_VAR 0 3
27395: PUSH
27396: LD_INT 3
27398: LESS
27399: AND
27400: IFFALSE 27457
// for i in result do
27402: LD_ADDR_VAR 0 5
27406: PUSH
27407: LD_VAR 0 4
27411: PUSH
27412: FOR_IN
27413: IFFALSE 27455
// if GetTech ( i , side ) <> state then
27415: LD_VAR 0 5
27419: PPUSH
27420: LD_VAR 0 1
27424: PPUSH
27425: CALL_OW 321
27429: PUSH
27430: LD_VAR 0 3
27434: NONEQUAL
27435: IFFALSE 27453
// result := result diff i ;
27437: LD_ADDR_VAR 0 4
27441: PUSH
27442: LD_VAR 0 4
27446: PUSH
27447: LD_VAR 0 5
27451: DIFF
27452: ST_TO_ADDR
27453: GO 27412
27455: POP
27456: POP
// end ;
27457: LD_VAR 0 4
27461: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27462: LD_INT 0
27464: PPUSH
27465: PPUSH
27466: PPUSH
// result := true ;
27467: LD_ADDR_VAR 0 3
27471: PUSH
27472: LD_INT 1
27474: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27475: LD_ADDR_VAR 0 5
27479: PUSH
27480: LD_VAR 0 2
27484: PPUSH
27485: CALL_OW 480
27489: ST_TO_ADDR
// if not tmp then
27490: LD_VAR 0 5
27494: NOT
27495: IFFALSE 27499
// exit ;
27497: GO 27548
// for i in tmp do
27499: LD_ADDR_VAR 0 4
27503: PUSH
27504: LD_VAR 0 5
27508: PUSH
27509: FOR_IN
27510: IFFALSE 27546
// if GetTech ( i , side ) <> state_researched then
27512: LD_VAR 0 4
27516: PPUSH
27517: LD_VAR 0 1
27521: PPUSH
27522: CALL_OW 321
27526: PUSH
27527: LD_INT 2
27529: NONEQUAL
27530: IFFALSE 27544
// begin result := false ;
27532: LD_ADDR_VAR 0 3
27536: PUSH
27537: LD_INT 0
27539: ST_TO_ADDR
// exit ;
27540: POP
27541: POP
27542: GO 27548
// end ;
27544: GO 27509
27546: POP
27547: POP
// end ;
27548: LD_VAR 0 3
27552: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27553: LD_INT 0
27555: PPUSH
27556: PPUSH
27557: PPUSH
27558: PPUSH
27559: PPUSH
27560: PPUSH
27561: PPUSH
27562: PPUSH
27563: PPUSH
27564: PPUSH
27565: PPUSH
27566: PPUSH
27567: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27568: LD_VAR 0 1
27572: NOT
27573: PUSH
27574: LD_VAR 0 1
27578: PPUSH
27579: CALL_OW 257
27583: PUSH
27584: LD_INT 9
27586: NONEQUAL
27587: OR
27588: IFFALSE 27592
// exit ;
27590: GO 28165
// side := GetSide ( unit ) ;
27592: LD_ADDR_VAR 0 9
27596: PUSH
27597: LD_VAR 0 1
27601: PPUSH
27602: CALL_OW 255
27606: ST_TO_ADDR
// tech_space := tech_spacanom ;
27607: LD_ADDR_VAR 0 12
27611: PUSH
27612: LD_INT 29
27614: ST_TO_ADDR
// tech_time := tech_taurad ;
27615: LD_ADDR_VAR 0 13
27619: PUSH
27620: LD_INT 28
27622: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27623: LD_ADDR_VAR 0 11
27627: PUSH
27628: LD_VAR 0 1
27632: PPUSH
27633: CALL_OW 310
27637: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27638: LD_VAR 0 11
27642: PPUSH
27643: CALL_OW 247
27647: PUSH
27648: LD_INT 2
27650: EQUAL
27651: IFFALSE 27655
// exit ;
27653: GO 28165
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27655: LD_ADDR_VAR 0 8
27659: PUSH
27660: LD_INT 81
27662: PUSH
27663: LD_VAR 0 9
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 3
27674: PUSH
27675: LD_INT 21
27677: PUSH
27678: LD_INT 3
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PPUSH
27693: CALL_OW 69
27697: ST_TO_ADDR
// if not tmp then
27698: LD_VAR 0 8
27702: NOT
27703: IFFALSE 27707
// exit ;
27705: GO 28165
// if in_unit then
27707: LD_VAR 0 11
27711: IFFALSE 27735
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27713: LD_ADDR_VAR 0 10
27717: PUSH
27718: LD_VAR 0 8
27722: PPUSH
27723: LD_VAR 0 11
27727: PPUSH
27728: CALL_OW 74
27732: ST_TO_ADDR
27733: GO 27755
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27735: LD_ADDR_VAR 0 10
27739: PUSH
27740: LD_VAR 0 8
27744: PPUSH
27745: LD_VAR 0 1
27749: PPUSH
27750: CALL_OW 74
27754: ST_TO_ADDR
// if not enemy then
27755: LD_VAR 0 10
27759: NOT
27760: IFFALSE 27764
// exit ;
27762: GO 28165
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27764: LD_VAR 0 11
27768: PUSH
27769: LD_VAR 0 11
27773: PPUSH
27774: LD_VAR 0 10
27778: PPUSH
27779: CALL_OW 296
27783: PUSH
27784: LD_INT 13
27786: GREATER
27787: AND
27788: PUSH
27789: LD_VAR 0 1
27793: PPUSH
27794: LD_VAR 0 10
27798: PPUSH
27799: CALL_OW 296
27803: PUSH
27804: LD_INT 12
27806: GREATER
27807: OR
27808: IFFALSE 27812
// exit ;
27810: GO 28165
// missile := [ 1 ] ;
27812: LD_ADDR_VAR 0 14
27816: PUSH
27817: LD_INT 1
27819: PUSH
27820: EMPTY
27821: LIST
27822: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27823: LD_VAR 0 9
27827: PPUSH
27828: LD_VAR 0 12
27832: PPUSH
27833: CALL_OW 325
27837: IFFALSE 27866
// missile := Replace ( missile , missile + 1 , 2 ) ;
27839: LD_ADDR_VAR 0 14
27843: PUSH
27844: LD_VAR 0 14
27848: PPUSH
27849: LD_VAR 0 14
27853: PUSH
27854: LD_INT 1
27856: PLUS
27857: PPUSH
27858: LD_INT 2
27860: PPUSH
27861: CALL_OW 1
27865: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27866: LD_VAR 0 9
27870: PPUSH
27871: LD_VAR 0 13
27875: PPUSH
27876: CALL_OW 325
27880: PUSH
27881: LD_VAR 0 10
27885: PPUSH
27886: CALL_OW 255
27890: PPUSH
27891: LD_VAR 0 13
27895: PPUSH
27896: CALL_OW 325
27900: NOT
27901: AND
27902: IFFALSE 27931
// missile := Replace ( missile , missile + 1 , 3 ) ;
27904: LD_ADDR_VAR 0 14
27908: PUSH
27909: LD_VAR 0 14
27913: PPUSH
27914: LD_VAR 0 14
27918: PUSH
27919: LD_INT 1
27921: PLUS
27922: PPUSH
27923: LD_INT 3
27925: PPUSH
27926: CALL_OW 1
27930: ST_TO_ADDR
// if missile < 2 then
27931: LD_VAR 0 14
27935: PUSH
27936: LD_INT 2
27938: LESS
27939: IFFALSE 27943
// exit ;
27941: GO 28165
// x := GetX ( enemy ) ;
27943: LD_ADDR_VAR 0 4
27947: PUSH
27948: LD_VAR 0 10
27952: PPUSH
27953: CALL_OW 250
27957: ST_TO_ADDR
// y := GetY ( enemy ) ;
27958: LD_ADDR_VAR 0 5
27962: PUSH
27963: LD_VAR 0 10
27967: PPUSH
27968: CALL_OW 251
27972: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27973: LD_ADDR_VAR 0 6
27977: PUSH
27978: LD_VAR 0 4
27982: PUSH
27983: LD_INT 1
27985: NEG
27986: PPUSH
27987: LD_INT 1
27989: PPUSH
27990: CALL_OW 12
27994: PLUS
27995: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27996: LD_ADDR_VAR 0 7
28000: PUSH
28001: LD_VAR 0 5
28005: PUSH
28006: LD_INT 1
28008: NEG
28009: PPUSH
28010: LD_INT 1
28012: PPUSH
28013: CALL_OW 12
28017: PLUS
28018: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28019: LD_VAR 0 6
28023: PPUSH
28024: LD_VAR 0 7
28028: PPUSH
28029: CALL_OW 488
28033: NOT
28034: IFFALSE 28056
// begin _x := x ;
28036: LD_ADDR_VAR 0 6
28040: PUSH
28041: LD_VAR 0 4
28045: ST_TO_ADDR
// _y := y ;
28046: LD_ADDR_VAR 0 7
28050: PUSH
28051: LD_VAR 0 5
28055: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28056: LD_ADDR_VAR 0 3
28060: PUSH
28061: LD_INT 1
28063: PPUSH
28064: LD_VAR 0 14
28068: PPUSH
28069: CALL_OW 12
28073: ST_TO_ADDR
// case i of 1 :
28074: LD_VAR 0 3
28078: PUSH
28079: LD_INT 1
28081: DOUBLE
28082: EQUAL
28083: IFTRUE 28087
28085: GO 28104
28087: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28088: LD_VAR 0 1
28092: PPUSH
28093: LD_VAR 0 10
28097: PPUSH
28098: CALL_OW 115
28102: GO 28165
28104: LD_INT 2
28106: DOUBLE
28107: EQUAL
28108: IFTRUE 28112
28110: GO 28134
28112: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28113: LD_VAR 0 1
28117: PPUSH
28118: LD_VAR 0 6
28122: PPUSH
28123: LD_VAR 0 7
28127: PPUSH
28128: CALL_OW 153
28132: GO 28165
28134: LD_INT 3
28136: DOUBLE
28137: EQUAL
28138: IFTRUE 28142
28140: GO 28164
28142: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28143: LD_VAR 0 1
28147: PPUSH
28148: LD_VAR 0 6
28152: PPUSH
28153: LD_VAR 0 7
28157: PPUSH
28158: CALL_OW 154
28162: GO 28165
28164: POP
// end ;
28165: LD_VAR 0 2
28169: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28170: LD_INT 0
28172: PPUSH
28173: PPUSH
28174: PPUSH
28175: PPUSH
28176: PPUSH
28177: PPUSH
// if not unit or not building then
28178: LD_VAR 0 1
28182: NOT
28183: PUSH
28184: LD_VAR 0 2
28188: NOT
28189: OR
28190: IFFALSE 28194
// exit ;
28192: GO 28352
// x := GetX ( building ) ;
28194: LD_ADDR_VAR 0 5
28198: PUSH
28199: LD_VAR 0 2
28203: PPUSH
28204: CALL_OW 250
28208: ST_TO_ADDR
// y := GetY ( building ) ;
28209: LD_ADDR_VAR 0 6
28213: PUSH
28214: LD_VAR 0 2
28218: PPUSH
28219: CALL_OW 251
28223: ST_TO_ADDR
// for i = 0 to 5 do
28224: LD_ADDR_VAR 0 4
28228: PUSH
28229: DOUBLE
28230: LD_INT 0
28232: DEC
28233: ST_TO_ADDR
28234: LD_INT 5
28236: PUSH
28237: FOR_TO
28238: IFFALSE 28350
// begin _x := ShiftX ( x , i , 3 ) ;
28240: LD_ADDR_VAR 0 7
28244: PUSH
28245: LD_VAR 0 5
28249: PPUSH
28250: LD_VAR 0 4
28254: PPUSH
28255: LD_INT 3
28257: PPUSH
28258: CALL_OW 272
28262: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28263: LD_ADDR_VAR 0 8
28267: PUSH
28268: LD_VAR 0 6
28272: PPUSH
28273: LD_VAR 0 4
28277: PPUSH
28278: LD_INT 3
28280: PPUSH
28281: CALL_OW 273
28285: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28286: LD_VAR 0 7
28290: PPUSH
28291: LD_VAR 0 8
28295: PPUSH
28296: CALL_OW 488
28300: NOT
28301: IFFALSE 28305
// continue ;
28303: GO 28237
// if HexInfo ( _x , _y ) = 0 then
28305: LD_VAR 0 7
28309: PPUSH
28310: LD_VAR 0 8
28314: PPUSH
28315: CALL_OW 428
28319: PUSH
28320: LD_INT 0
28322: EQUAL
28323: IFFALSE 28348
// begin ComMoveXY ( unit , _x , _y ) ;
28325: LD_VAR 0 1
28329: PPUSH
28330: LD_VAR 0 7
28334: PPUSH
28335: LD_VAR 0 8
28339: PPUSH
28340: CALL_OW 111
// exit ;
28344: POP
28345: POP
28346: GO 28352
// end ; end ;
28348: GO 28237
28350: POP
28351: POP
// end ;
28352: LD_VAR 0 3
28356: RET
// export function ScanBase ( side , base_area ) ; begin
28357: LD_INT 0
28359: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28360: LD_ADDR_VAR 0 3
28364: PUSH
28365: LD_VAR 0 2
28369: PPUSH
28370: LD_INT 81
28372: PUSH
28373: LD_VAR 0 1
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PPUSH
28382: CALL_OW 70
28386: ST_TO_ADDR
// end ;
28387: LD_VAR 0 3
28391: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28392: LD_INT 0
28394: PPUSH
28395: PPUSH
28396: PPUSH
28397: PPUSH
// result := false ;
28398: LD_ADDR_VAR 0 2
28402: PUSH
28403: LD_INT 0
28405: ST_TO_ADDR
// side := GetSide ( unit ) ;
28406: LD_ADDR_VAR 0 3
28410: PUSH
28411: LD_VAR 0 1
28415: PPUSH
28416: CALL_OW 255
28420: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28421: LD_ADDR_VAR 0 4
28425: PUSH
28426: LD_VAR 0 1
28430: PPUSH
28431: CALL_OW 248
28435: ST_TO_ADDR
// case nat of 1 :
28436: LD_VAR 0 4
28440: PUSH
28441: LD_INT 1
28443: DOUBLE
28444: EQUAL
28445: IFTRUE 28449
28447: GO 28460
28449: POP
// tech := tech_lassight ; 2 :
28450: LD_ADDR_VAR 0 5
28454: PUSH
28455: LD_INT 12
28457: ST_TO_ADDR
28458: GO 28499
28460: LD_INT 2
28462: DOUBLE
28463: EQUAL
28464: IFTRUE 28468
28466: GO 28479
28468: POP
// tech := tech_mortar ; 3 :
28469: LD_ADDR_VAR 0 5
28473: PUSH
28474: LD_INT 41
28476: ST_TO_ADDR
28477: GO 28499
28479: LD_INT 3
28481: DOUBLE
28482: EQUAL
28483: IFTRUE 28487
28485: GO 28498
28487: POP
// tech := tech_bazooka ; end ;
28488: LD_ADDR_VAR 0 5
28492: PUSH
28493: LD_INT 44
28495: ST_TO_ADDR
28496: GO 28499
28498: POP
// if Researched ( side , tech ) then
28499: LD_VAR 0 3
28503: PPUSH
28504: LD_VAR 0 5
28508: PPUSH
28509: CALL_OW 325
28513: IFFALSE 28540
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28515: LD_ADDR_VAR 0 2
28519: PUSH
28520: LD_INT 5
28522: PUSH
28523: LD_INT 8
28525: PUSH
28526: LD_INT 9
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: LIST
28533: PUSH
28534: LD_VAR 0 4
28538: ARRAY
28539: ST_TO_ADDR
// end ;
28540: LD_VAR 0 2
28544: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28545: LD_INT 0
28547: PPUSH
28548: PPUSH
28549: PPUSH
// if not mines then
28550: LD_VAR 0 2
28554: NOT
28555: IFFALSE 28559
// exit ;
28557: GO 28703
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28559: LD_ADDR_VAR 0 5
28563: PUSH
28564: LD_INT 81
28566: PUSH
28567: LD_VAR 0 1
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: LD_INT 3
28578: PUSH
28579: LD_INT 21
28581: PUSH
28582: LD_INT 3
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PPUSH
28597: CALL_OW 69
28601: ST_TO_ADDR
// for i in mines do
28602: LD_ADDR_VAR 0 4
28606: PUSH
28607: LD_VAR 0 2
28611: PUSH
28612: FOR_IN
28613: IFFALSE 28701
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28615: LD_VAR 0 4
28619: PUSH
28620: LD_INT 1
28622: ARRAY
28623: PPUSH
28624: LD_VAR 0 4
28628: PUSH
28629: LD_INT 2
28631: ARRAY
28632: PPUSH
28633: CALL_OW 458
28637: NOT
28638: IFFALSE 28642
// continue ;
28640: GO 28612
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28642: LD_VAR 0 4
28646: PUSH
28647: LD_INT 1
28649: ARRAY
28650: PPUSH
28651: LD_VAR 0 4
28655: PUSH
28656: LD_INT 2
28658: ARRAY
28659: PPUSH
28660: CALL_OW 428
28664: PUSH
28665: LD_VAR 0 5
28669: IN
28670: IFFALSE 28699
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28672: LD_VAR 0 4
28676: PUSH
28677: LD_INT 1
28679: ARRAY
28680: PPUSH
28681: LD_VAR 0 4
28685: PUSH
28686: LD_INT 2
28688: ARRAY
28689: PPUSH
28690: LD_VAR 0 1
28694: PPUSH
28695: CALL_OW 456
// end ;
28699: GO 28612
28701: POP
28702: POP
// end ;
28703: LD_VAR 0 3
28707: RET
// export function Count ( array ) ; begin
28708: LD_INT 0
28710: PPUSH
// result := array + 0 ;
28711: LD_ADDR_VAR 0 2
28715: PUSH
28716: LD_VAR 0 1
28720: PUSH
28721: LD_INT 0
28723: PLUS
28724: ST_TO_ADDR
// end ;
28725: LD_VAR 0 2
28729: RET
// export function IsEmpty ( building ) ; begin
28730: LD_INT 0
28732: PPUSH
// if not building then
28733: LD_VAR 0 1
28737: NOT
28738: IFFALSE 28742
// exit ;
28740: GO 28785
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28742: LD_ADDR_VAR 0 2
28746: PUSH
28747: LD_VAR 0 1
28751: PUSH
28752: LD_INT 22
28754: PUSH
28755: LD_VAR 0 1
28759: PPUSH
28760: CALL_OW 255
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 58
28771: PUSH
28772: EMPTY
28773: LIST
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PPUSH
28779: CALL_OW 69
28783: IN
28784: ST_TO_ADDR
// end ;
28785: LD_VAR 0 2
28789: RET
// export function IsNotFull ( building ) ; var places ; begin
28790: LD_INT 0
28792: PPUSH
28793: PPUSH
// if not building then
28794: LD_VAR 0 1
28798: NOT
28799: IFFALSE 28803
// exit ;
28801: GO 28831
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
28803: LD_ADDR_VAR 0 2
28807: PUSH
28808: LD_VAR 0 1
28812: PPUSH
28813: LD_INT 3
28815: PUSH
28816: LD_INT 62
28818: PUSH
28819: EMPTY
28820: LIST
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PPUSH
28826: CALL_OW 72
28830: ST_TO_ADDR
// end ;
28831: LD_VAR 0 2
28835: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28836: LD_INT 0
28838: PPUSH
28839: PPUSH
28840: PPUSH
28841: PPUSH
// tmp := [ ] ;
28842: LD_ADDR_VAR 0 3
28846: PUSH
28847: EMPTY
28848: ST_TO_ADDR
// list := [ ] ;
28849: LD_ADDR_VAR 0 5
28853: PUSH
28854: EMPTY
28855: ST_TO_ADDR
// for i = 16 to 25 do
28856: LD_ADDR_VAR 0 4
28860: PUSH
28861: DOUBLE
28862: LD_INT 16
28864: DEC
28865: ST_TO_ADDR
28866: LD_INT 25
28868: PUSH
28869: FOR_TO
28870: IFFALSE 28943
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28872: LD_ADDR_VAR 0 3
28876: PUSH
28877: LD_VAR 0 3
28881: PUSH
28882: LD_INT 22
28884: PUSH
28885: LD_VAR 0 1
28889: PPUSH
28890: CALL_OW 255
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 91
28901: PUSH
28902: LD_VAR 0 1
28906: PUSH
28907: LD_INT 6
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 30
28917: PUSH
28918: LD_VAR 0 4
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: LIST
28931: PUSH
28932: EMPTY
28933: LIST
28934: PPUSH
28935: CALL_OW 69
28939: ADD
28940: ST_TO_ADDR
28941: GO 28869
28943: POP
28944: POP
// for i = 1 to tmp do
28945: LD_ADDR_VAR 0 4
28949: PUSH
28950: DOUBLE
28951: LD_INT 1
28953: DEC
28954: ST_TO_ADDR
28955: LD_VAR 0 3
28959: PUSH
28960: FOR_TO
28961: IFFALSE 29049
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28963: LD_ADDR_VAR 0 5
28967: PUSH
28968: LD_VAR 0 5
28972: PUSH
28973: LD_VAR 0 3
28977: PUSH
28978: LD_VAR 0 4
28982: ARRAY
28983: PPUSH
28984: CALL_OW 266
28988: PUSH
28989: LD_VAR 0 3
28993: PUSH
28994: LD_VAR 0 4
28998: ARRAY
28999: PPUSH
29000: CALL_OW 250
29004: PUSH
29005: LD_VAR 0 3
29009: PUSH
29010: LD_VAR 0 4
29014: ARRAY
29015: PPUSH
29016: CALL_OW 251
29020: PUSH
29021: LD_VAR 0 3
29025: PUSH
29026: LD_VAR 0 4
29030: ARRAY
29031: PPUSH
29032: CALL_OW 254
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: PUSH
29043: EMPTY
29044: LIST
29045: ADD
29046: ST_TO_ADDR
29047: GO 28960
29049: POP
29050: POP
// result := list ;
29051: LD_ADDR_VAR 0 2
29055: PUSH
29056: LD_VAR 0 5
29060: ST_TO_ADDR
// end ;
29061: LD_VAR 0 2
29065: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29066: LD_INT 0
29068: PPUSH
29069: PPUSH
29070: PPUSH
29071: PPUSH
29072: PPUSH
29073: PPUSH
29074: PPUSH
// if not factory then
29075: LD_VAR 0 1
29079: NOT
29080: IFFALSE 29084
// exit ;
29082: GO 29677
// if control = control_apeman then
29084: LD_VAR 0 4
29088: PUSH
29089: LD_INT 5
29091: EQUAL
29092: IFFALSE 29201
// begin tmp := UnitsInside ( factory ) ;
29094: LD_ADDR_VAR 0 8
29098: PUSH
29099: LD_VAR 0 1
29103: PPUSH
29104: CALL_OW 313
29108: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29109: LD_VAR 0 8
29113: PPUSH
29114: LD_INT 25
29116: PUSH
29117: LD_INT 12
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PPUSH
29124: CALL_OW 72
29128: NOT
29129: IFFALSE 29139
// control := control_manual ;
29131: LD_ADDR_VAR 0 4
29135: PUSH
29136: LD_INT 1
29138: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29139: LD_ADDR_VAR 0 8
29143: PUSH
29144: LD_VAR 0 1
29148: PPUSH
29149: CALL 28836 0 1
29153: ST_TO_ADDR
// if tmp then
29154: LD_VAR 0 8
29158: IFFALSE 29201
// begin for i in tmp do
29160: LD_ADDR_VAR 0 7
29164: PUSH
29165: LD_VAR 0 8
29169: PUSH
29170: FOR_IN
29171: IFFALSE 29199
// if i [ 1 ] = b_ext_radio then
29173: LD_VAR 0 7
29177: PUSH
29178: LD_INT 1
29180: ARRAY
29181: PUSH
29182: LD_INT 22
29184: EQUAL
29185: IFFALSE 29197
// begin control := control_remote ;
29187: LD_ADDR_VAR 0 4
29191: PUSH
29192: LD_INT 2
29194: ST_TO_ADDR
// break ;
29195: GO 29199
// end ;
29197: GO 29170
29199: POP
29200: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29201: LD_VAR 0 1
29205: PPUSH
29206: LD_VAR 0 2
29210: PPUSH
29211: LD_VAR 0 3
29215: PPUSH
29216: LD_VAR 0 4
29220: PPUSH
29221: LD_VAR 0 5
29225: PPUSH
29226: CALL_OW 448
29230: IFFALSE 29265
// begin result := [ chassis , engine , control , weapon ] ;
29232: LD_ADDR_VAR 0 6
29236: PUSH
29237: LD_VAR 0 2
29241: PUSH
29242: LD_VAR 0 3
29246: PUSH
29247: LD_VAR 0 4
29251: PUSH
29252: LD_VAR 0 5
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: ST_TO_ADDR
// exit ;
29263: GO 29677
// end ; _chassis := AvailableChassisList ( factory ) ;
29265: LD_ADDR_VAR 0 9
29269: PUSH
29270: LD_VAR 0 1
29274: PPUSH
29275: CALL_OW 475
29279: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29280: LD_ADDR_VAR 0 11
29284: PUSH
29285: LD_VAR 0 1
29289: PPUSH
29290: CALL_OW 476
29294: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29295: LD_ADDR_VAR 0 12
29299: PUSH
29300: LD_VAR 0 1
29304: PPUSH
29305: CALL_OW 477
29309: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29310: LD_ADDR_VAR 0 10
29314: PUSH
29315: LD_VAR 0 1
29319: PPUSH
29320: CALL_OW 478
29324: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29325: LD_VAR 0 9
29329: NOT
29330: PUSH
29331: LD_VAR 0 11
29335: NOT
29336: OR
29337: PUSH
29338: LD_VAR 0 12
29342: NOT
29343: OR
29344: PUSH
29345: LD_VAR 0 10
29349: NOT
29350: OR
29351: IFFALSE 29386
// begin result := [ chassis , engine , control , weapon ] ;
29353: LD_ADDR_VAR 0 6
29357: PUSH
29358: LD_VAR 0 2
29362: PUSH
29363: LD_VAR 0 3
29367: PUSH
29368: LD_VAR 0 4
29372: PUSH
29373: LD_VAR 0 5
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: ST_TO_ADDR
// exit ;
29384: GO 29677
// end ; if not chassis in _chassis then
29386: LD_VAR 0 2
29390: PUSH
29391: LD_VAR 0 9
29395: IN
29396: NOT
29397: IFFALSE 29423
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29399: LD_ADDR_VAR 0 2
29403: PUSH
29404: LD_VAR 0 9
29408: PUSH
29409: LD_INT 1
29411: PPUSH
29412: LD_VAR 0 9
29416: PPUSH
29417: CALL_OW 12
29421: ARRAY
29422: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29423: LD_VAR 0 2
29427: PPUSH
29428: LD_VAR 0 3
29432: PPUSH
29433: CALL 29682 0 2
29437: NOT
29438: IFFALSE 29497
// repeat engine := _engine [ 1 ] ;
29440: LD_ADDR_VAR 0 3
29444: PUSH
29445: LD_VAR 0 11
29449: PUSH
29450: LD_INT 1
29452: ARRAY
29453: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29454: LD_ADDR_VAR 0 11
29458: PUSH
29459: LD_VAR 0 11
29463: PPUSH
29464: LD_INT 1
29466: PPUSH
29467: CALL_OW 3
29471: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29472: LD_VAR 0 2
29476: PPUSH
29477: LD_VAR 0 3
29481: PPUSH
29482: CALL 29682 0 2
29486: PUSH
29487: LD_VAR 0 11
29491: PUSH
29492: EMPTY
29493: EQUAL
29494: OR
29495: IFFALSE 29440
// if not control in _control then
29497: LD_VAR 0 4
29501: PUSH
29502: LD_VAR 0 12
29506: IN
29507: NOT
29508: IFFALSE 29534
// control := _control [ rand ( 1 , _control ) ] ;
29510: LD_ADDR_VAR 0 4
29514: PUSH
29515: LD_VAR 0 12
29519: PUSH
29520: LD_INT 1
29522: PPUSH
29523: LD_VAR 0 12
29527: PPUSH
29528: CALL_OW 12
29532: ARRAY
29533: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29534: LD_VAR 0 2
29538: PPUSH
29539: LD_VAR 0 5
29543: PPUSH
29544: CALL 29902 0 2
29548: NOT
29549: IFFALSE 29608
// repeat weapon := _weapon [ 1 ] ;
29551: LD_ADDR_VAR 0 5
29555: PUSH
29556: LD_VAR 0 10
29560: PUSH
29561: LD_INT 1
29563: ARRAY
29564: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29565: LD_ADDR_VAR 0 10
29569: PUSH
29570: LD_VAR 0 10
29574: PPUSH
29575: LD_INT 1
29577: PPUSH
29578: CALL_OW 3
29582: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29583: LD_VAR 0 2
29587: PPUSH
29588: LD_VAR 0 5
29592: PPUSH
29593: CALL 29902 0 2
29597: PUSH
29598: LD_VAR 0 10
29602: PUSH
29603: EMPTY
29604: EQUAL
29605: OR
29606: IFFALSE 29551
// result := [ ] ;
29608: LD_ADDR_VAR 0 6
29612: PUSH
29613: EMPTY
29614: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29615: LD_VAR 0 1
29619: PPUSH
29620: LD_VAR 0 2
29624: PPUSH
29625: LD_VAR 0 3
29629: PPUSH
29630: LD_VAR 0 4
29634: PPUSH
29635: LD_VAR 0 5
29639: PPUSH
29640: CALL_OW 448
29644: IFFALSE 29677
// result := [ chassis , engine , control , weapon ] ;
29646: LD_ADDR_VAR 0 6
29650: PUSH
29651: LD_VAR 0 2
29655: PUSH
29656: LD_VAR 0 3
29660: PUSH
29661: LD_VAR 0 4
29665: PUSH
29666: LD_VAR 0 5
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: ST_TO_ADDR
// end ;
29677: LD_VAR 0 6
29681: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29682: LD_INT 0
29684: PPUSH
// if not chassis or not engine then
29685: LD_VAR 0 1
29689: NOT
29690: PUSH
29691: LD_VAR 0 2
29695: NOT
29696: OR
29697: IFFALSE 29701
// exit ;
29699: GO 29897
// case engine of engine_solar :
29701: LD_VAR 0 2
29705: PUSH
29706: LD_INT 2
29708: DOUBLE
29709: EQUAL
29710: IFTRUE 29714
29712: GO 29752
29714: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29715: LD_ADDR_VAR 0 3
29719: PUSH
29720: LD_INT 11
29722: PUSH
29723: LD_INT 12
29725: PUSH
29726: LD_INT 13
29728: PUSH
29729: LD_INT 14
29731: PUSH
29732: LD_INT 1
29734: PUSH
29735: LD_INT 2
29737: PUSH
29738: LD_INT 3
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: ST_TO_ADDR
29750: GO 29881
29752: LD_INT 1
29754: DOUBLE
29755: EQUAL
29756: IFTRUE 29760
29758: GO 29822
29760: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29761: LD_ADDR_VAR 0 3
29765: PUSH
29766: LD_INT 11
29768: PUSH
29769: LD_INT 12
29771: PUSH
29772: LD_INT 13
29774: PUSH
29775: LD_INT 14
29777: PUSH
29778: LD_INT 1
29780: PUSH
29781: LD_INT 2
29783: PUSH
29784: LD_INT 3
29786: PUSH
29787: LD_INT 4
29789: PUSH
29790: LD_INT 5
29792: PUSH
29793: LD_INT 21
29795: PUSH
29796: LD_INT 23
29798: PUSH
29799: LD_INT 22
29801: PUSH
29802: LD_INT 24
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: ST_TO_ADDR
29820: GO 29881
29822: LD_INT 3
29824: DOUBLE
29825: EQUAL
29826: IFTRUE 29830
29828: GO 29880
29830: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29831: LD_ADDR_VAR 0 3
29835: PUSH
29836: LD_INT 13
29838: PUSH
29839: LD_INT 14
29841: PUSH
29842: LD_INT 2
29844: PUSH
29845: LD_INT 3
29847: PUSH
29848: LD_INT 4
29850: PUSH
29851: LD_INT 5
29853: PUSH
29854: LD_INT 21
29856: PUSH
29857: LD_INT 22
29859: PUSH
29860: LD_INT 23
29862: PUSH
29863: LD_INT 24
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: ST_TO_ADDR
29878: GO 29881
29880: POP
// result := ( chassis in result ) ;
29881: LD_ADDR_VAR 0 3
29885: PUSH
29886: LD_VAR 0 1
29890: PUSH
29891: LD_VAR 0 3
29895: IN
29896: ST_TO_ADDR
// end ;
29897: LD_VAR 0 3
29901: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29902: LD_INT 0
29904: PPUSH
// if not chassis or not weapon then
29905: LD_VAR 0 1
29909: NOT
29910: PUSH
29911: LD_VAR 0 2
29915: NOT
29916: OR
29917: IFFALSE 29921
// exit ;
29919: GO 30981
// case weapon of us_machine_gun :
29921: LD_VAR 0 2
29925: PUSH
29926: LD_INT 2
29928: DOUBLE
29929: EQUAL
29930: IFTRUE 29934
29932: GO 29964
29934: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29935: LD_ADDR_VAR 0 3
29939: PUSH
29940: LD_INT 1
29942: PUSH
29943: LD_INT 2
29945: PUSH
29946: LD_INT 3
29948: PUSH
29949: LD_INT 4
29951: PUSH
29952: LD_INT 5
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: ST_TO_ADDR
29962: GO 30965
29964: LD_INT 3
29966: DOUBLE
29967: EQUAL
29968: IFTRUE 29972
29970: GO 30002
29972: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29973: LD_ADDR_VAR 0 3
29977: PUSH
29978: LD_INT 1
29980: PUSH
29981: LD_INT 2
29983: PUSH
29984: LD_INT 3
29986: PUSH
29987: LD_INT 4
29989: PUSH
29990: LD_INT 5
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: ST_TO_ADDR
30000: GO 30965
30002: LD_INT 11
30004: DOUBLE
30005: EQUAL
30006: IFTRUE 30010
30008: GO 30040
30010: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30011: LD_ADDR_VAR 0 3
30015: PUSH
30016: LD_INT 1
30018: PUSH
30019: LD_INT 2
30021: PUSH
30022: LD_INT 3
30024: PUSH
30025: LD_INT 4
30027: PUSH
30028: LD_INT 5
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: ST_TO_ADDR
30038: GO 30965
30040: LD_INT 4
30042: DOUBLE
30043: EQUAL
30044: IFTRUE 30048
30046: GO 30074
30048: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30049: LD_ADDR_VAR 0 3
30053: PUSH
30054: LD_INT 2
30056: PUSH
30057: LD_INT 3
30059: PUSH
30060: LD_INT 4
30062: PUSH
30063: LD_INT 5
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: ST_TO_ADDR
30072: GO 30965
30074: LD_INT 5
30076: DOUBLE
30077: EQUAL
30078: IFTRUE 30082
30080: GO 30108
30082: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30083: LD_ADDR_VAR 0 3
30087: PUSH
30088: LD_INT 2
30090: PUSH
30091: LD_INT 3
30093: PUSH
30094: LD_INT 4
30096: PUSH
30097: LD_INT 5
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: ST_TO_ADDR
30106: GO 30965
30108: LD_INT 9
30110: DOUBLE
30111: EQUAL
30112: IFTRUE 30116
30114: GO 30142
30116: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30117: LD_ADDR_VAR 0 3
30121: PUSH
30122: LD_INT 2
30124: PUSH
30125: LD_INT 3
30127: PUSH
30128: LD_INT 4
30130: PUSH
30131: LD_INT 5
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: ST_TO_ADDR
30140: GO 30965
30142: LD_INT 7
30144: DOUBLE
30145: EQUAL
30146: IFTRUE 30150
30148: GO 30176
30150: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30151: LD_ADDR_VAR 0 3
30155: PUSH
30156: LD_INT 2
30158: PUSH
30159: LD_INT 3
30161: PUSH
30162: LD_INT 4
30164: PUSH
30165: LD_INT 5
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: ST_TO_ADDR
30174: GO 30965
30176: LD_INT 12
30178: DOUBLE
30179: EQUAL
30180: IFTRUE 30184
30182: GO 30210
30184: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30185: LD_ADDR_VAR 0 3
30189: PUSH
30190: LD_INT 2
30192: PUSH
30193: LD_INT 3
30195: PUSH
30196: LD_INT 4
30198: PUSH
30199: LD_INT 5
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: ST_TO_ADDR
30208: GO 30965
30210: LD_INT 13
30212: DOUBLE
30213: EQUAL
30214: IFTRUE 30218
30216: GO 30244
30218: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30219: LD_ADDR_VAR 0 3
30223: PUSH
30224: LD_INT 2
30226: PUSH
30227: LD_INT 3
30229: PUSH
30230: LD_INT 4
30232: PUSH
30233: LD_INT 5
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: ST_TO_ADDR
30242: GO 30965
30244: LD_INT 14
30246: DOUBLE
30247: EQUAL
30248: IFTRUE 30252
30250: GO 30270
30252: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30253: LD_ADDR_VAR 0 3
30257: PUSH
30258: LD_INT 4
30260: PUSH
30261: LD_INT 5
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: ST_TO_ADDR
30268: GO 30965
30270: LD_INT 6
30272: DOUBLE
30273: EQUAL
30274: IFTRUE 30278
30276: GO 30296
30278: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30279: LD_ADDR_VAR 0 3
30283: PUSH
30284: LD_INT 4
30286: PUSH
30287: LD_INT 5
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: ST_TO_ADDR
30294: GO 30965
30296: LD_INT 10
30298: DOUBLE
30299: EQUAL
30300: IFTRUE 30304
30302: GO 30322
30304: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30305: LD_ADDR_VAR 0 3
30309: PUSH
30310: LD_INT 4
30312: PUSH
30313: LD_INT 5
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: ST_TO_ADDR
30320: GO 30965
30322: LD_INT 22
30324: DOUBLE
30325: EQUAL
30326: IFTRUE 30330
30328: GO 30356
30330: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30331: LD_ADDR_VAR 0 3
30335: PUSH
30336: LD_INT 11
30338: PUSH
30339: LD_INT 12
30341: PUSH
30342: LD_INT 13
30344: PUSH
30345: LD_INT 14
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: ST_TO_ADDR
30354: GO 30965
30356: LD_INT 23
30358: DOUBLE
30359: EQUAL
30360: IFTRUE 30364
30362: GO 30390
30364: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30365: LD_ADDR_VAR 0 3
30369: PUSH
30370: LD_INT 11
30372: PUSH
30373: LD_INT 12
30375: PUSH
30376: LD_INT 13
30378: PUSH
30379: LD_INT 14
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: ST_TO_ADDR
30388: GO 30965
30390: LD_INT 24
30392: DOUBLE
30393: EQUAL
30394: IFTRUE 30398
30396: GO 30424
30398: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30399: LD_ADDR_VAR 0 3
30403: PUSH
30404: LD_INT 11
30406: PUSH
30407: LD_INT 12
30409: PUSH
30410: LD_INT 13
30412: PUSH
30413: LD_INT 14
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: ST_TO_ADDR
30422: GO 30965
30424: LD_INT 30
30426: DOUBLE
30427: EQUAL
30428: IFTRUE 30432
30430: GO 30458
30432: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30433: LD_ADDR_VAR 0 3
30437: PUSH
30438: LD_INT 11
30440: PUSH
30441: LD_INT 12
30443: PUSH
30444: LD_INT 13
30446: PUSH
30447: LD_INT 14
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: ST_TO_ADDR
30456: GO 30965
30458: LD_INT 25
30460: DOUBLE
30461: EQUAL
30462: IFTRUE 30466
30464: GO 30484
30466: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30467: LD_ADDR_VAR 0 3
30471: PUSH
30472: LD_INT 13
30474: PUSH
30475: LD_INT 14
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: ST_TO_ADDR
30482: GO 30965
30484: LD_INT 27
30486: DOUBLE
30487: EQUAL
30488: IFTRUE 30492
30490: GO 30510
30492: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30493: LD_ADDR_VAR 0 3
30497: PUSH
30498: LD_INT 13
30500: PUSH
30501: LD_INT 14
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: ST_TO_ADDR
30508: GO 30965
30510: LD_INT 92
30512: DOUBLE
30513: EQUAL
30514: IFTRUE 30518
30516: GO 30544
30518: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30519: LD_ADDR_VAR 0 3
30523: PUSH
30524: LD_INT 11
30526: PUSH
30527: LD_INT 12
30529: PUSH
30530: LD_INT 13
30532: PUSH
30533: LD_INT 14
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: ST_TO_ADDR
30542: GO 30965
30544: LD_INT 28
30546: DOUBLE
30547: EQUAL
30548: IFTRUE 30552
30550: GO 30570
30552: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30553: LD_ADDR_VAR 0 3
30557: PUSH
30558: LD_INT 13
30560: PUSH
30561: LD_INT 14
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: ST_TO_ADDR
30568: GO 30965
30570: LD_INT 29
30572: DOUBLE
30573: EQUAL
30574: IFTRUE 30578
30576: GO 30596
30578: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30579: LD_ADDR_VAR 0 3
30583: PUSH
30584: LD_INT 13
30586: PUSH
30587: LD_INT 14
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: ST_TO_ADDR
30594: GO 30965
30596: LD_INT 31
30598: DOUBLE
30599: EQUAL
30600: IFTRUE 30604
30602: GO 30622
30604: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30605: LD_ADDR_VAR 0 3
30609: PUSH
30610: LD_INT 13
30612: PUSH
30613: LD_INT 14
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: ST_TO_ADDR
30620: GO 30965
30622: LD_INT 26
30624: DOUBLE
30625: EQUAL
30626: IFTRUE 30630
30628: GO 30648
30630: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30631: LD_ADDR_VAR 0 3
30635: PUSH
30636: LD_INT 13
30638: PUSH
30639: LD_INT 14
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: ST_TO_ADDR
30646: GO 30965
30648: LD_INT 42
30650: DOUBLE
30651: EQUAL
30652: IFTRUE 30656
30654: GO 30682
30656: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30657: LD_ADDR_VAR 0 3
30661: PUSH
30662: LD_INT 21
30664: PUSH
30665: LD_INT 22
30667: PUSH
30668: LD_INT 23
30670: PUSH
30671: LD_INT 24
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: ST_TO_ADDR
30680: GO 30965
30682: LD_INT 43
30684: DOUBLE
30685: EQUAL
30686: IFTRUE 30690
30688: GO 30716
30690: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30691: LD_ADDR_VAR 0 3
30695: PUSH
30696: LD_INT 21
30698: PUSH
30699: LD_INT 22
30701: PUSH
30702: LD_INT 23
30704: PUSH
30705: LD_INT 24
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: ST_TO_ADDR
30714: GO 30965
30716: LD_INT 44
30718: DOUBLE
30719: EQUAL
30720: IFTRUE 30724
30722: GO 30750
30724: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30725: LD_ADDR_VAR 0 3
30729: PUSH
30730: LD_INT 21
30732: PUSH
30733: LD_INT 22
30735: PUSH
30736: LD_INT 23
30738: PUSH
30739: LD_INT 24
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: ST_TO_ADDR
30748: GO 30965
30750: LD_INT 45
30752: DOUBLE
30753: EQUAL
30754: IFTRUE 30758
30756: GO 30784
30758: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30759: LD_ADDR_VAR 0 3
30763: PUSH
30764: LD_INT 21
30766: PUSH
30767: LD_INT 22
30769: PUSH
30770: LD_INT 23
30772: PUSH
30773: LD_INT 24
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: ST_TO_ADDR
30782: GO 30965
30784: LD_INT 49
30786: DOUBLE
30787: EQUAL
30788: IFTRUE 30792
30790: GO 30818
30792: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30793: LD_ADDR_VAR 0 3
30797: PUSH
30798: LD_INT 21
30800: PUSH
30801: LD_INT 22
30803: PUSH
30804: LD_INT 23
30806: PUSH
30807: LD_INT 24
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: ST_TO_ADDR
30816: GO 30965
30818: LD_INT 51
30820: DOUBLE
30821: EQUAL
30822: IFTRUE 30826
30824: GO 30852
30826: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30827: LD_ADDR_VAR 0 3
30831: PUSH
30832: LD_INT 21
30834: PUSH
30835: LD_INT 22
30837: PUSH
30838: LD_INT 23
30840: PUSH
30841: LD_INT 24
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: ST_TO_ADDR
30850: GO 30965
30852: LD_INT 52
30854: DOUBLE
30855: EQUAL
30856: IFTRUE 30860
30858: GO 30886
30860: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30861: LD_ADDR_VAR 0 3
30865: PUSH
30866: LD_INT 21
30868: PUSH
30869: LD_INT 22
30871: PUSH
30872: LD_INT 23
30874: PUSH
30875: LD_INT 24
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: ST_TO_ADDR
30884: GO 30965
30886: LD_INT 53
30888: DOUBLE
30889: EQUAL
30890: IFTRUE 30894
30892: GO 30912
30894: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30895: LD_ADDR_VAR 0 3
30899: PUSH
30900: LD_INT 23
30902: PUSH
30903: LD_INT 24
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: ST_TO_ADDR
30910: GO 30965
30912: LD_INT 46
30914: DOUBLE
30915: EQUAL
30916: IFTRUE 30920
30918: GO 30938
30920: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30921: LD_ADDR_VAR 0 3
30925: PUSH
30926: LD_INT 23
30928: PUSH
30929: LD_INT 24
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: ST_TO_ADDR
30936: GO 30965
30938: LD_INT 47
30940: DOUBLE
30941: EQUAL
30942: IFTRUE 30946
30944: GO 30964
30946: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30947: LD_ADDR_VAR 0 3
30951: PUSH
30952: LD_INT 23
30954: PUSH
30955: LD_INT 24
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: ST_TO_ADDR
30962: GO 30965
30964: POP
// result := ( chassis in result ) ;
30965: LD_ADDR_VAR 0 3
30969: PUSH
30970: LD_VAR 0 1
30974: PUSH
30975: LD_VAR 0 3
30979: IN
30980: ST_TO_ADDR
// end ;
30981: LD_VAR 0 3
30985: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30986: LD_INT 0
30988: PPUSH
30989: PPUSH
30990: PPUSH
30991: PPUSH
30992: PPUSH
30993: PPUSH
30994: PPUSH
// result := array ;
30995: LD_ADDR_VAR 0 5
30999: PUSH
31000: LD_VAR 0 1
31004: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31005: LD_VAR 0 1
31009: NOT
31010: PUSH
31011: LD_VAR 0 2
31015: NOT
31016: OR
31017: PUSH
31018: LD_VAR 0 3
31022: NOT
31023: OR
31024: PUSH
31025: LD_VAR 0 2
31029: PUSH
31030: LD_VAR 0 1
31034: GREATER
31035: OR
31036: PUSH
31037: LD_VAR 0 3
31041: PUSH
31042: LD_VAR 0 1
31046: GREATER
31047: OR
31048: IFFALSE 31052
// exit ;
31050: GO 31348
// if direction then
31052: LD_VAR 0 4
31056: IFFALSE 31120
// begin d := 1 ;
31058: LD_ADDR_VAR 0 9
31062: PUSH
31063: LD_INT 1
31065: ST_TO_ADDR
// if i_from > i_to then
31066: LD_VAR 0 2
31070: PUSH
31071: LD_VAR 0 3
31075: GREATER
31076: IFFALSE 31102
// length := ( array - i_from ) + i_to else
31078: LD_ADDR_VAR 0 11
31082: PUSH
31083: LD_VAR 0 1
31087: PUSH
31088: LD_VAR 0 2
31092: MINUS
31093: PUSH
31094: LD_VAR 0 3
31098: PLUS
31099: ST_TO_ADDR
31100: GO 31118
// length := i_to - i_from ;
31102: LD_ADDR_VAR 0 11
31106: PUSH
31107: LD_VAR 0 3
31111: PUSH
31112: LD_VAR 0 2
31116: MINUS
31117: ST_TO_ADDR
// end else
31118: GO 31181
// begin d := - 1 ;
31120: LD_ADDR_VAR 0 9
31124: PUSH
31125: LD_INT 1
31127: NEG
31128: ST_TO_ADDR
// if i_from > i_to then
31129: LD_VAR 0 2
31133: PUSH
31134: LD_VAR 0 3
31138: GREATER
31139: IFFALSE 31159
// length := i_from - i_to else
31141: LD_ADDR_VAR 0 11
31145: PUSH
31146: LD_VAR 0 2
31150: PUSH
31151: LD_VAR 0 3
31155: MINUS
31156: ST_TO_ADDR
31157: GO 31181
// length := ( array - i_to ) + i_from ;
31159: LD_ADDR_VAR 0 11
31163: PUSH
31164: LD_VAR 0 1
31168: PUSH
31169: LD_VAR 0 3
31173: MINUS
31174: PUSH
31175: LD_VAR 0 2
31179: PLUS
31180: ST_TO_ADDR
// end ; if not length then
31181: LD_VAR 0 11
31185: NOT
31186: IFFALSE 31190
// exit ;
31188: GO 31348
// tmp := array ;
31190: LD_ADDR_VAR 0 10
31194: PUSH
31195: LD_VAR 0 1
31199: ST_TO_ADDR
// for i = 1 to length do
31200: LD_ADDR_VAR 0 6
31204: PUSH
31205: DOUBLE
31206: LD_INT 1
31208: DEC
31209: ST_TO_ADDR
31210: LD_VAR 0 11
31214: PUSH
31215: FOR_TO
31216: IFFALSE 31336
// begin for j = 1 to array do
31218: LD_ADDR_VAR 0 7
31222: PUSH
31223: DOUBLE
31224: LD_INT 1
31226: DEC
31227: ST_TO_ADDR
31228: LD_VAR 0 1
31232: PUSH
31233: FOR_TO
31234: IFFALSE 31322
// begin k := j + d ;
31236: LD_ADDR_VAR 0 8
31240: PUSH
31241: LD_VAR 0 7
31245: PUSH
31246: LD_VAR 0 9
31250: PLUS
31251: ST_TO_ADDR
// if k > array then
31252: LD_VAR 0 8
31256: PUSH
31257: LD_VAR 0 1
31261: GREATER
31262: IFFALSE 31272
// k := 1 ;
31264: LD_ADDR_VAR 0 8
31268: PUSH
31269: LD_INT 1
31271: ST_TO_ADDR
// if not k then
31272: LD_VAR 0 8
31276: NOT
31277: IFFALSE 31289
// k := array ;
31279: LD_ADDR_VAR 0 8
31283: PUSH
31284: LD_VAR 0 1
31288: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31289: LD_ADDR_VAR 0 10
31293: PUSH
31294: LD_VAR 0 10
31298: PPUSH
31299: LD_VAR 0 8
31303: PPUSH
31304: LD_VAR 0 1
31308: PUSH
31309: LD_VAR 0 7
31313: ARRAY
31314: PPUSH
31315: CALL_OW 1
31319: ST_TO_ADDR
// end ;
31320: GO 31233
31322: POP
31323: POP
// array := tmp ;
31324: LD_ADDR_VAR 0 1
31328: PUSH
31329: LD_VAR 0 10
31333: ST_TO_ADDR
// end ;
31334: GO 31215
31336: POP
31337: POP
// result := array ;
31338: LD_ADDR_VAR 0 5
31342: PUSH
31343: LD_VAR 0 1
31347: ST_TO_ADDR
// end ;
31348: LD_VAR 0 5
31352: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31353: LD_INT 0
31355: PPUSH
31356: PPUSH
// result := 0 ;
31357: LD_ADDR_VAR 0 3
31361: PUSH
31362: LD_INT 0
31364: ST_TO_ADDR
// if not array or not value in array then
31365: LD_VAR 0 1
31369: NOT
31370: PUSH
31371: LD_VAR 0 2
31375: PUSH
31376: LD_VAR 0 1
31380: IN
31381: NOT
31382: OR
31383: IFFALSE 31387
// exit ;
31385: GO 31441
// for i = 1 to array do
31387: LD_ADDR_VAR 0 4
31391: PUSH
31392: DOUBLE
31393: LD_INT 1
31395: DEC
31396: ST_TO_ADDR
31397: LD_VAR 0 1
31401: PUSH
31402: FOR_TO
31403: IFFALSE 31439
// if value = array [ i ] then
31405: LD_VAR 0 2
31409: PUSH
31410: LD_VAR 0 1
31414: PUSH
31415: LD_VAR 0 4
31419: ARRAY
31420: EQUAL
31421: IFFALSE 31437
// begin result := i ;
31423: LD_ADDR_VAR 0 3
31427: PUSH
31428: LD_VAR 0 4
31432: ST_TO_ADDR
// exit ;
31433: POP
31434: POP
31435: GO 31441
// end ;
31437: GO 31402
31439: POP
31440: POP
// end ;
31441: LD_VAR 0 3
31445: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31446: LD_INT 0
31448: PPUSH
// vc_chassis := chassis ;
31449: LD_ADDR_OWVAR 37
31453: PUSH
31454: LD_VAR 0 1
31458: ST_TO_ADDR
// vc_engine := engine ;
31459: LD_ADDR_OWVAR 39
31463: PUSH
31464: LD_VAR 0 2
31468: ST_TO_ADDR
// vc_control := control ;
31469: LD_ADDR_OWVAR 38
31473: PUSH
31474: LD_VAR 0 3
31478: ST_TO_ADDR
// vc_weapon := weapon ;
31479: LD_ADDR_OWVAR 40
31483: PUSH
31484: LD_VAR 0 4
31488: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31489: LD_ADDR_OWVAR 41
31493: PUSH
31494: LD_VAR 0 5
31498: ST_TO_ADDR
// end ;
31499: LD_VAR 0 6
31503: RET
// export function WantPlant ( unit ) ; var task ; begin
31504: LD_INT 0
31506: PPUSH
31507: PPUSH
// result := false ;
31508: LD_ADDR_VAR 0 2
31512: PUSH
31513: LD_INT 0
31515: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31516: LD_ADDR_VAR 0 3
31520: PUSH
31521: LD_VAR 0 1
31525: PPUSH
31526: CALL_OW 437
31530: ST_TO_ADDR
// if task then
31531: LD_VAR 0 3
31535: IFFALSE 31563
// if task [ 1 ] [ 1 ] = p then
31537: LD_VAR 0 3
31541: PUSH
31542: LD_INT 1
31544: ARRAY
31545: PUSH
31546: LD_INT 1
31548: ARRAY
31549: PUSH
31550: LD_STRING p
31552: EQUAL
31553: IFFALSE 31563
// result := true ;
31555: LD_ADDR_VAR 0 2
31559: PUSH
31560: LD_INT 1
31562: ST_TO_ADDR
// end ;
31563: LD_VAR 0 2
31567: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31568: LD_INT 0
31570: PPUSH
31571: PPUSH
31572: PPUSH
31573: PPUSH
// if pos < 1 then
31574: LD_VAR 0 2
31578: PUSH
31579: LD_INT 1
31581: LESS
31582: IFFALSE 31586
// exit ;
31584: GO 31889
// if pos = 1 then
31586: LD_VAR 0 2
31590: PUSH
31591: LD_INT 1
31593: EQUAL
31594: IFFALSE 31627
// result := Replace ( arr , pos [ 1 ] , value ) else
31596: LD_ADDR_VAR 0 4
31600: PUSH
31601: LD_VAR 0 1
31605: PPUSH
31606: LD_VAR 0 2
31610: PUSH
31611: LD_INT 1
31613: ARRAY
31614: PPUSH
31615: LD_VAR 0 3
31619: PPUSH
31620: CALL_OW 1
31624: ST_TO_ADDR
31625: GO 31889
// begin tmp := arr ;
31627: LD_ADDR_VAR 0 6
31631: PUSH
31632: LD_VAR 0 1
31636: ST_TO_ADDR
// s_arr := [ tmp ] ;
31637: LD_ADDR_VAR 0 7
31641: PUSH
31642: LD_VAR 0 6
31646: PUSH
31647: EMPTY
31648: LIST
31649: ST_TO_ADDR
// for i = 1 to pos - 1 do
31650: LD_ADDR_VAR 0 5
31654: PUSH
31655: DOUBLE
31656: LD_INT 1
31658: DEC
31659: ST_TO_ADDR
31660: LD_VAR 0 2
31664: PUSH
31665: LD_INT 1
31667: MINUS
31668: PUSH
31669: FOR_TO
31670: IFFALSE 31715
// begin tmp := tmp [ pos [ i ] ] ;
31672: LD_ADDR_VAR 0 6
31676: PUSH
31677: LD_VAR 0 6
31681: PUSH
31682: LD_VAR 0 2
31686: PUSH
31687: LD_VAR 0 5
31691: ARRAY
31692: ARRAY
31693: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31694: LD_ADDR_VAR 0 7
31698: PUSH
31699: LD_VAR 0 7
31703: PUSH
31704: LD_VAR 0 6
31708: PUSH
31709: EMPTY
31710: LIST
31711: ADD
31712: ST_TO_ADDR
// end ;
31713: GO 31669
31715: POP
31716: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31717: LD_ADDR_VAR 0 6
31721: PUSH
31722: LD_VAR 0 6
31726: PPUSH
31727: LD_VAR 0 2
31731: PUSH
31732: LD_VAR 0 2
31736: ARRAY
31737: PPUSH
31738: LD_VAR 0 3
31742: PPUSH
31743: CALL_OW 1
31747: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31748: LD_ADDR_VAR 0 7
31752: PUSH
31753: LD_VAR 0 7
31757: PPUSH
31758: LD_VAR 0 7
31762: PPUSH
31763: LD_VAR 0 6
31767: PPUSH
31768: CALL_OW 1
31772: ST_TO_ADDR
// for i = s_arr downto 2 do
31773: LD_ADDR_VAR 0 5
31777: PUSH
31778: DOUBLE
31779: LD_VAR 0 7
31783: INC
31784: ST_TO_ADDR
31785: LD_INT 2
31787: PUSH
31788: FOR_DOWNTO
31789: IFFALSE 31873
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31791: LD_ADDR_VAR 0 6
31795: PUSH
31796: LD_VAR 0 7
31800: PUSH
31801: LD_VAR 0 5
31805: PUSH
31806: LD_INT 1
31808: MINUS
31809: ARRAY
31810: PPUSH
31811: LD_VAR 0 2
31815: PUSH
31816: LD_VAR 0 5
31820: PUSH
31821: LD_INT 1
31823: MINUS
31824: ARRAY
31825: PPUSH
31826: LD_VAR 0 7
31830: PUSH
31831: LD_VAR 0 5
31835: ARRAY
31836: PPUSH
31837: CALL_OW 1
31841: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31842: LD_ADDR_VAR 0 7
31846: PUSH
31847: LD_VAR 0 7
31851: PPUSH
31852: LD_VAR 0 5
31856: PUSH
31857: LD_INT 1
31859: MINUS
31860: PPUSH
31861: LD_VAR 0 6
31865: PPUSH
31866: CALL_OW 1
31870: ST_TO_ADDR
// end ;
31871: GO 31788
31873: POP
31874: POP
// result := s_arr [ 1 ] ;
31875: LD_ADDR_VAR 0 4
31879: PUSH
31880: LD_VAR 0 7
31884: PUSH
31885: LD_INT 1
31887: ARRAY
31888: ST_TO_ADDR
// end ; end ;
31889: LD_VAR 0 4
31893: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31894: LD_INT 0
31896: PPUSH
31897: PPUSH
// if not list then
31898: LD_VAR 0 1
31902: NOT
31903: IFFALSE 31907
// exit ;
31905: GO 31998
// i := list [ pos1 ] ;
31907: LD_ADDR_VAR 0 5
31911: PUSH
31912: LD_VAR 0 1
31916: PUSH
31917: LD_VAR 0 2
31921: ARRAY
31922: ST_TO_ADDR
// if not i then
31923: LD_VAR 0 5
31927: NOT
31928: IFFALSE 31932
// exit ;
31930: GO 31998
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31932: LD_ADDR_VAR 0 1
31936: PUSH
31937: LD_VAR 0 1
31941: PPUSH
31942: LD_VAR 0 2
31946: PPUSH
31947: LD_VAR 0 1
31951: PUSH
31952: LD_VAR 0 3
31956: ARRAY
31957: PPUSH
31958: CALL_OW 1
31962: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31963: LD_ADDR_VAR 0 1
31967: PUSH
31968: LD_VAR 0 1
31972: PPUSH
31973: LD_VAR 0 3
31977: PPUSH
31978: LD_VAR 0 5
31982: PPUSH
31983: CALL_OW 1
31987: ST_TO_ADDR
// result := list ;
31988: LD_ADDR_VAR 0 4
31992: PUSH
31993: LD_VAR 0 1
31997: ST_TO_ADDR
// end ;
31998: LD_VAR 0 4
32002: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32003: LD_INT 0
32005: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32006: LD_ADDR_VAR 0 5
32010: PUSH
32011: LD_VAR 0 1
32015: PPUSH
32016: CALL_OW 250
32020: PPUSH
32021: LD_VAR 0 1
32025: PPUSH
32026: CALL_OW 251
32030: PPUSH
32031: LD_VAR 0 2
32035: PPUSH
32036: LD_VAR 0 3
32040: PPUSH
32041: LD_VAR 0 4
32045: PPUSH
32046: CALL 32424 0 5
32050: ST_TO_ADDR
// end ;
32051: LD_VAR 0 5
32055: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
32056: LD_INT 0
32058: PPUSH
32059: PPUSH
32060: PPUSH
32061: PPUSH
// if not list or not unit then
32062: LD_VAR 0 2
32066: NOT
32067: PUSH
32068: LD_VAR 0 1
32072: NOT
32073: OR
32074: IFFALSE 32078
// exit ;
32076: GO 32419
// result := [ ] ;
32078: LD_ADDR_VAR 0 5
32082: PUSH
32083: EMPTY
32084: ST_TO_ADDR
// for i in list do
32085: LD_ADDR_VAR 0 6
32089: PUSH
32090: LD_VAR 0 2
32094: PUSH
32095: FOR_IN
32096: IFFALSE 32314
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
32098: LD_ADDR_VAR 0 8
32102: PUSH
32103: LD_VAR 0 1
32107: PPUSH
32108: LD_VAR 0 6
32112: PUSH
32113: LD_INT 1
32115: ARRAY
32116: PPUSH
32117: LD_VAR 0 6
32121: PUSH
32122: LD_INT 2
32124: ARRAY
32125: PPUSH
32126: CALL_OW 297
32130: ST_TO_ADDR
// if not Count ( result ) then
32131: LD_VAR 0 5
32135: PPUSH
32136: CALL 28708 0 1
32140: NOT
32141: IFFALSE 32174
// begin result := Join ( result , [ i , tmp ] ) ;
32143: LD_ADDR_VAR 0 5
32147: PUSH
32148: LD_VAR 0 5
32152: PPUSH
32153: LD_VAR 0 6
32157: PUSH
32158: LD_VAR 0 8
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PPUSH
32167: CALL 64297 0 2
32171: ST_TO_ADDR
// continue ;
32172: GO 32095
// end ; if result [ result ] [ 2 ] <= tmp then
32174: LD_VAR 0 5
32178: PUSH
32179: LD_VAR 0 5
32183: ARRAY
32184: PUSH
32185: LD_INT 2
32187: ARRAY
32188: PUSH
32189: LD_VAR 0 8
32193: LESSEQUAL
32194: IFFALSE 32227
// result := Join ( result , [ i , tmp ] ) else
32196: LD_ADDR_VAR 0 5
32200: PUSH
32201: LD_VAR 0 5
32205: PPUSH
32206: LD_VAR 0 6
32210: PUSH
32211: LD_VAR 0 8
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PPUSH
32220: CALL 64297 0 2
32224: ST_TO_ADDR
32225: GO 32312
// begin for j := 1 to Count ( result ) do
32227: LD_ADDR_VAR 0 7
32231: PUSH
32232: DOUBLE
32233: LD_INT 1
32235: DEC
32236: ST_TO_ADDR
32237: LD_VAR 0 5
32241: PPUSH
32242: CALL 28708 0 1
32246: PUSH
32247: FOR_TO
32248: IFFALSE 32310
// begin if tmp < result [ j ] [ 2 ] then
32250: LD_VAR 0 8
32254: PUSH
32255: LD_VAR 0 5
32259: PUSH
32260: LD_VAR 0 7
32264: ARRAY
32265: PUSH
32266: LD_INT 2
32268: ARRAY
32269: LESS
32270: IFFALSE 32308
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32272: LD_ADDR_VAR 0 5
32276: PUSH
32277: LD_VAR 0 5
32281: PPUSH
32282: LD_VAR 0 7
32286: PPUSH
32287: LD_VAR 0 6
32291: PUSH
32292: LD_VAR 0 8
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PPUSH
32301: CALL_OW 2
32305: ST_TO_ADDR
// break ;
32306: GO 32310
// end ; end ;
32308: GO 32247
32310: POP
32311: POP
// end ; end ;
32312: GO 32095
32314: POP
32315: POP
// if result and not asc then
32316: LD_VAR 0 5
32320: PUSH
32321: LD_VAR 0 3
32325: NOT
32326: AND
32327: IFFALSE 32344
// result := ReverseArray ( result ) ;
32329: LD_ADDR_VAR 0 5
32333: PUSH
32334: LD_VAR 0 5
32338: PPUSH
32339: CALL 59584 0 1
32343: ST_TO_ADDR
// tmp := [ ] ;
32344: LD_ADDR_VAR 0 8
32348: PUSH
32349: EMPTY
32350: ST_TO_ADDR
// if mode then
32351: LD_VAR 0 4
32355: IFFALSE 32419
// begin for i := 1 to result do
32357: LD_ADDR_VAR 0 6
32361: PUSH
32362: DOUBLE
32363: LD_INT 1
32365: DEC
32366: ST_TO_ADDR
32367: LD_VAR 0 5
32371: PUSH
32372: FOR_TO
32373: IFFALSE 32407
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
32375: LD_ADDR_VAR 0 8
32379: PUSH
32380: LD_VAR 0 8
32384: PPUSH
32385: LD_VAR 0 5
32389: PUSH
32390: LD_VAR 0 6
32394: ARRAY
32395: PUSH
32396: LD_INT 1
32398: ARRAY
32399: PPUSH
32400: CALL 64297 0 2
32404: ST_TO_ADDR
32405: GO 32372
32407: POP
32408: POP
// result := tmp ;
32409: LD_ADDR_VAR 0 5
32413: PUSH
32414: LD_VAR 0 8
32418: ST_TO_ADDR
// end ; end ;
32419: LD_VAR 0 5
32423: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32424: LD_INT 0
32426: PPUSH
32427: PPUSH
32428: PPUSH
32429: PPUSH
// if not list then
32430: LD_VAR 0 3
32434: NOT
32435: IFFALSE 32439
// exit ;
32437: GO 32827
// result := [ ] ;
32439: LD_ADDR_VAR 0 6
32443: PUSH
32444: EMPTY
32445: ST_TO_ADDR
// for i in list do
32446: LD_ADDR_VAR 0 7
32450: PUSH
32451: LD_VAR 0 3
32455: PUSH
32456: FOR_IN
32457: IFFALSE 32659
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32459: LD_ADDR_VAR 0 9
32463: PUSH
32464: LD_VAR 0 7
32468: PPUSH
32469: LD_VAR 0 1
32473: PPUSH
32474: LD_VAR 0 2
32478: PPUSH
32479: CALL_OW 297
32483: ST_TO_ADDR
// if not result then
32484: LD_VAR 0 6
32488: NOT
32489: IFFALSE 32515
// result := [ [ i , tmp ] ] else
32491: LD_ADDR_VAR 0 6
32495: PUSH
32496: LD_VAR 0 7
32500: PUSH
32501: LD_VAR 0 9
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: EMPTY
32511: LIST
32512: ST_TO_ADDR
32513: GO 32657
// begin if result [ result ] [ 2 ] < tmp then
32515: LD_VAR 0 6
32519: PUSH
32520: LD_VAR 0 6
32524: ARRAY
32525: PUSH
32526: LD_INT 2
32528: ARRAY
32529: PUSH
32530: LD_VAR 0 9
32534: LESS
32535: IFFALSE 32577
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32537: LD_ADDR_VAR 0 6
32541: PUSH
32542: LD_VAR 0 6
32546: PPUSH
32547: LD_VAR 0 6
32551: PUSH
32552: LD_INT 1
32554: PLUS
32555: PPUSH
32556: LD_VAR 0 7
32560: PUSH
32561: LD_VAR 0 9
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PPUSH
32570: CALL_OW 2
32574: ST_TO_ADDR
32575: GO 32657
// for j = 1 to result do
32577: LD_ADDR_VAR 0 8
32581: PUSH
32582: DOUBLE
32583: LD_INT 1
32585: DEC
32586: ST_TO_ADDR
32587: LD_VAR 0 6
32591: PUSH
32592: FOR_TO
32593: IFFALSE 32655
// begin if tmp < result [ j ] [ 2 ] then
32595: LD_VAR 0 9
32599: PUSH
32600: LD_VAR 0 6
32604: PUSH
32605: LD_VAR 0 8
32609: ARRAY
32610: PUSH
32611: LD_INT 2
32613: ARRAY
32614: LESS
32615: IFFALSE 32653
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32617: LD_ADDR_VAR 0 6
32621: PUSH
32622: LD_VAR 0 6
32626: PPUSH
32627: LD_VAR 0 8
32631: PPUSH
32632: LD_VAR 0 7
32636: PUSH
32637: LD_VAR 0 9
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PPUSH
32646: CALL_OW 2
32650: ST_TO_ADDR
// break ;
32651: GO 32655
// end ; end ;
32653: GO 32592
32655: POP
32656: POP
// end ; end ;
32657: GO 32456
32659: POP
32660: POP
// if result and not asc then
32661: LD_VAR 0 6
32665: PUSH
32666: LD_VAR 0 4
32670: NOT
32671: AND
32672: IFFALSE 32747
// begin tmp := result ;
32674: LD_ADDR_VAR 0 9
32678: PUSH
32679: LD_VAR 0 6
32683: ST_TO_ADDR
// for i = tmp downto 1 do
32684: LD_ADDR_VAR 0 7
32688: PUSH
32689: DOUBLE
32690: LD_VAR 0 9
32694: INC
32695: ST_TO_ADDR
32696: LD_INT 1
32698: PUSH
32699: FOR_DOWNTO
32700: IFFALSE 32745
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32702: LD_ADDR_VAR 0 6
32706: PUSH
32707: LD_VAR 0 6
32711: PPUSH
32712: LD_VAR 0 9
32716: PUSH
32717: LD_VAR 0 7
32721: MINUS
32722: PUSH
32723: LD_INT 1
32725: PLUS
32726: PPUSH
32727: LD_VAR 0 9
32731: PUSH
32732: LD_VAR 0 7
32736: ARRAY
32737: PPUSH
32738: CALL_OW 1
32742: ST_TO_ADDR
32743: GO 32699
32745: POP
32746: POP
// end ; tmp := [ ] ;
32747: LD_ADDR_VAR 0 9
32751: PUSH
32752: EMPTY
32753: ST_TO_ADDR
// if mode then
32754: LD_VAR 0 5
32758: IFFALSE 32827
// begin for i = 1 to result do
32760: LD_ADDR_VAR 0 7
32764: PUSH
32765: DOUBLE
32766: LD_INT 1
32768: DEC
32769: ST_TO_ADDR
32770: LD_VAR 0 6
32774: PUSH
32775: FOR_TO
32776: IFFALSE 32815
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32778: LD_ADDR_VAR 0 9
32782: PUSH
32783: LD_VAR 0 9
32787: PPUSH
32788: LD_VAR 0 7
32792: PPUSH
32793: LD_VAR 0 6
32797: PUSH
32798: LD_VAR 0 7
32802: ARRAY
32803: PUSH
32804: LD_INT 1
32806: ARRAY
32807: PPUSH
32808: CALL_OW 1
32812: ST_TO_ADDR
32813: GO 32775
32815: POP
32816: POP
// result := tmp ;
32817: LD_ADDR_VAR 0 6
32821: PUSH
32822: LD_VAR 0 9
32826: ST_TO_ADDR
// end ; end ;
32827: LD_VAR 0 6
32831: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32832: LD_INT 0
32834: PPUSH
32835: PPUSH
32836: PPUSH
32837: PPUSH
32838: PPUSH
32839: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32840: LD_ADDR_VAR 0 5
32844: PUSH
32845: LD_INT 0
32847: PUSH
32848: LD_INT 0
32850: PUSH
32851: LD_INT 0
32853: PUSH
32854: EMPTY
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: ST_TO_ADDR
// if not x or not y then
32862: LD_VAR 0 2
32866: NOT
32867: PUSH
32868: LD_VAR 0 3
32872: NOT
32873: OR
32874: IFFALSE 32878
// exit ;
32876: GO 34528
// if not range then
32878: LD_VAR 0 4
32882: NOT
32883: IFFALSE 32893
// range := 10 ;
32885: LD_ADDR_VAR 0 4
32889: PUSH
32890: LD_INT 10
32892: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32893: LD_ADDR_VAR 0 8
32897: PUSH
32898: LD_INT 81
32900: PUSH
32901: LD_VAR 0 1
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 92
32912: PUSH
32913: LD_VAR 0 2
32917: PUSH
32918: LD_VAR 0 3
32922: PUSH
32923: LD_VAR 0 4
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 3
32936: PUSH
32937: LD_INT 21
32939: PUSH
32940: LD_INT 3
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: LIST
32955: PPUSH
32956: CALL_OW 69
32960: ST_TO_ADDR
// if not tmp then
32961: LD_VAR 0 8
32965: NOT
32966: IFFALSE 32970
// exit ;
32968: GO 34528
// for i in tmp do
32970: LD_ADDR_VAR 0 6
32974: PUSH
32975: LD_VAR 0 8
32979: PUSH
32980: FOR_IN
32981: IFFALSE 34503
// begin points := [ 0 , 0 , 0 ] ;
32983: LD_ADDR_VAR 0 9
32987: PUSH
32988: LD_INT 0
32990: PUSH
32991: LD_INT 0
32993: PUSH
32994: LD_INT 0
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: LIST
33001: ST_TO_ADDR
// bpoints := 1 ;
33002: LD_ADDR_VAR 0 10
33006: PUSH
33007: LD_INT 1
33009: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33010: LD_VAR 0 6
33014: PPUSH
33015: CALL_OW 247
33019: PUSH
33020: LD_INT 1
33022: DOUBLE
33023: EQUAL
33024: IFTRUE 33028
33026: GO 33606
33028: POP
// begin if GetClass ( i ) = 1 then
33029: LD_VAR 0 6
33033: PPUSH
33034: CALL_OW 257
33038: PUSH
33039: LD_INT 1
33041: EQUAL
33042: IFFALSE 33063
// points := [ 10 , 5 , 3 ] ;
33044: LD_ADDR_VAR 0 9
33048: PUSH
33049: LD_INT 10
33051: PUSH
33052: LD_INT 5
33054: PUSH
33055: LD_INT 3
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: LIST
33062: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33063: LD_VAR 0 6
33067: PPUSH
33068: CALL_OW 257
33072: PUSH
33073: LD_INT 2
33075: PUSH
33076: LD_INT 3
33078: PUSH
33079: LD_INT 4
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: LIST
33086: IN
33087: IFFALSE 33108
// points := [ 3 , 2 , 1 ] ;
33089: LD_ADDR_VAR 0 9
33093: PUSH
33094: LD_INT 3
33096: PUSH
33097: LD_INT 2
33099: PUSH
33100: LD_INT 1
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: LIST
33107: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33108: LD_VAR 0 6
33112: PPUSH
33113: CALL_OW 257
33117: PUSH
33118: LD_INT 5
33120: EQUAL
33121: IFFALSE 33142
// points := [ 130 , 5 , 2 ] ;
33123: LD_ADDR_VAR 0 9
33127: PUSH
33128: LD_INT 130
33130: PUSH
33131: LD_INT 5
33133: PUSH
33134: LD_INT 2
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: LIST
33141: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33142: LD_VAR 0 6
33146: PPUSH
33147: CALL_OW 257
33151: PUSH
33152: LD_INT 8
33154: EQUAL
33155: IFFALSE 33176
// points := [ 35 , 35 , 30 ] ;
33157: LD_ADDR_VAR 0 9
33161: PUSH
33162: LD_INT 35
33164: PUSH
33165: LD_INT 35
33167: PUSH
33168: LD_INT 30
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: LIST
33175: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33176: LD_VAR 0 6
33180: PPUSH
33181: CALL_OW 257
33185: PUSH
33186: LD_INT 9
33188: EQUAL
33189: IFFALSE 33210
// points := [ 20 , 55 , 40 ] ;
33191: LD_ADDR_VAR 0 9
33195: PUSH
33196: LD_INT 20
33198: PUSH
33199: LD_INT 55
33201: PUSH
33202: LD_INT 40
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: LIST
33209: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33210: LD_VAR 0 6
33214: PPUSH
33215: CALL_OW 257
33219: PUSH
33220: LD_INT 12
33222: PUSH
33223: LD_INT 16
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: IN
33230: IFFALSE 33251
// points := [ 5 , 3 , 2 ] ;
33232: LD_ADDR_VAR 0 9
33236: PUSH
33237: LD_INT 5
33239: PUSH
33240: LD_INT 3
33242: PUSH
33243: LD_INT 2
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: LIST
33250: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33251: LD_VAR 0 6
33255: PPUSH
33256: CALL_OW 257
33260: PUSH
33261: LD_INT 17
33263: EQUAL
33264: IFFALSE 33285
// points := [ 100 , 50 , 75 ] ;
33266: LD_ADDR_VAR 0 9
33270: PUSH
33271: LD_INT 100
33273: PUSH
33274: LD_INT 50
33276: PUSH
33277: LD_INT 75
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: LIST
33284: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33285: LD_VAR 0 6
33289: PPUSH
33290: CALL_OW 257
33294: PUSH
33295: LD_INT 15
33297: EQUAL
33298: IFFALSE 33319
// points := [ 10 , 5 , 3 ] ;
33300: LD_ADDR_VAR 0 9
33304: PUSH
33305: LD_INT 10
33307: PUSH
33308: LD_INT 5
33310: PUSH
33311: LD_INT 3
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: LIST
33318: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33319: LD_VAR 0 6
33323: PPUSH
33324: CALL_OW 257
33328: PUSH
33329: LD_INT 14
33331: EQUAL
33332: IFFALSE 33353
// points := [ 10 , 0 , 0 ] ;
33334: LD_ADDR_VAR 0 9
33338: PUSH
33339: LD_INT 10
33341: PUSH
33342: LD_INT 0
33344: PUSH
33345: LD_INT 0
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: LIST
33352: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33353: LD_VAR 0 6
33357: PPUSH
33358: CALL_OW 257
33362: PUSH
33363: LD_INT 11
33365: EQUAL
33366: IFFALSE 33387
// points := [ 30 , 10 , 5 ] ;
33368: LD_ADDR_VAR 0 9
33372: PUSH
33373: LD_INT 30
33375: PUSH
33376: LD_INT 10
33378: PUSH
33379: LD_INT 5
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: LIST
33386: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33387: LD_VAR 0 1
33391: PPUSH
33392: LD_INT 5
33394: PPUSH
33395: CALL_OW 321
33399: PUSH
33400: LD_INT 2
33402: EQUAL
33403: IFFALSE 33420
// bpoints := bpoints * 1.8 ;
33405: LD_ADDR_VAR 0 10
33409: PUSH
33410: LD_VAR 0 10
33414: PUSH
33415: LD_REAL  1.80000000000000E+0000
33418: MUL
33419: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33420: LD_VAR 0 6
33424: PPUSH
33425: CALL_OW 257
33429: PUSH
33430: LD_INT 1
33432: PUSH
33433: LD_INT 2
33435: PUSH
33436: LD_INT 3
33438: PUSH
33439: LD_INT 4
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: IN
33448: PUSH
33449: LD_VAR 0 1
33453: PPUSH
33454: LD_INT 51
33456: PPUSH
33457: CALL_OW 321
33461: PUSH
33462: LD_INT 2
33464: EQUAL
33465: AND
33466: IFFALSE 33483
// bpoints := bpoints * 1.2 ;
33468: LD_ADDR_VAR 0 10
33472: PUSH
33473: LD_VAR 0 10
33477: PUSH
33478: LD_REAL  1.20000000000000E+0000
33481: MUL
33482: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33483: LD_VAR 0 6
33487: PPUSH
33488: CALL_OW 257
33492: PUSH
33493: LD_INT 5
33495: PUSH
33496: LD_INT 7
33498: PUSH
33499: LD_INT 9
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: LIST
33506: IN
33507: PUSH
33508: LD_VAR 0 1
33512: PPUSH
33513: LD_INT 52
33515: PPUSH
33516: CALL_OW 321
33520: PUSH
33521: LD_INT 2
33523: EQUAL
33524: AND
33525: IFFALSE 33542
// bpoints := bpoints * 1.5 ;
33527: LD_ADDR_VAR 0 10
33531: PUSH
33532: LD_VAR 0 10
33536: PUSH
33537: LD_REAL  1.50000000000000E+0000
33540: MUL
33541: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33542: LD_VAR 0 1
33546: PPUSH
33547: LD_INT 66
33549: PPUSH
33550: CALL_OW 321
33554: PUSH
33555: LD_INT 2
33557: EQUAL
33558: IFFALSE 33575
// bpoints := bpoints * 1.1 ;
33560: LD_ADDR_VAR 0 10
33564: PUSH
33565: LD_VAR 0 10
33569: PUSH
33570: LD_REAL  1.10000000000000E+0000
33573: MUL
33574: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33575: LD_ADDR_VAR 0 10
33579: PUSH
33580: LD_VAR 0 10
33584: PUSH
33585: LD_VAR 0 6
33589: PPUSH
33590: LD_INT 1
33592: PPUSH
33593: CALL_OW 259
33597: PUSH
33598: LD_REAL  1.15000000000000E+0000
33601: MUL
33602: MUL
33603: ST_TO_ADDR
// end ; unit_vehicle :
33604: GO 34432
33606: LD_INT 2
33608: DOUBLE
33609: EQUAL
33610: IFTRUE 33614
33612: GO 34420
33614: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33615: LD_VAR 0 6
33619: PPUSH
33620: CALL_OW 264
33624: PUSH
33625: LD_INT 2
33627: PUSH
33628: LD_INT 42
33630: PUSH
33631: LD_INT 24
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: LIST
33638: IN
33639: IFFALSE 33660
// points := [ 25 , 5 , 3 ] ;
33641: LD_ADDR_VAR 0 9
33645: PUSH
33646: LD_INT 25
33648: PUSH
33649: LD_INT 5
33651: PUSH
33652: LD_INT 3
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: LIST
33659: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33660: LD_VAR 0 6
33664: PPUSH
33665: CALL_OW 264
33669: PUSH
33670: LD_INT 4
33672: PUSH
33673: LD_INT 43
33675: PUSH
33676: LD_INT 25
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: LIST
33683: IN
33684: IFFALSE 33705
// points := [ 40 , 15 , 5 ] ;
33686: LD_ADDR_VAR 0 9
33690: PUSH
33691: LD_INT 40
33693: PUSH
33694: LD_INT 15
33696: PUSH
33697: LD_INT 5
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: LIST
33704: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33705: LD_VAR 0 6
33709: PPUSH
33710: CALL_OW 264
33714: PUSH
33715: LD_INT 3
33717: PUSH
33718: LD_INT 23
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: IN
33725: IFFALSE 33746
// points := [ 7 , 25 , 8 ] ;
33727: LD_ADDR_VAR 0 9
33731: PUSH
33732: LD_INT 7
33734: PUSH
33735: LD_INT 25
33737: PUSH
33738: LD_INT 8
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: LIST
33745: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33746: LD_VAR 0 6
33750: PPUSH
33751: CALL_OW 264
33755: PUSH
33756: LD_INT 5
33758: PUSH
33759: LD_INT 27
33761: PUSH
33762: LD_INT 44
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: LIST
33769: IN
33770: IFFALSE 33791
// points := [ 14 , 50 , 16 ] ;
33772: LD_ADDR_VAR 0 9
33776: PUSH
33777: LD_INT 14
33779: PUSH
33780: LD_INT 50
33782: PUSH
33783: LD_INT 16
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: LIST
33790: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33791: LD_VAR 0 6
33795: PPUSH
33796: CALL_OW 264
33800: PUSH
33801: LD_INT 6
33803: PUSH
33804: LD_INT 46
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: IN
33811: IFFALSE 33832
// points := [ 32 , 120 , 70 ] ;
33813: LD_ADDR_VAR 0 9
33817: PUSH
33818: LD_INT 32
33820: PUSH
33821: LD_INT 120
33823: PUSH
33824: LD_INT 70
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: LIST
33831: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33832: LD_VAR 0 6
33836: PPUSH
33837: CALL_OW 264
33841: PUSH
33842: LD_INT 7
33844: PUSH
33845: LD_INT 28
33847: PUSH
33848: LD_INT 45
33850: PUSH
33851: LD_INT 92
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: IN
33860: IFFALSE 33881
// points := [ 35 , 20 , 45 ] ;
33862: LD_ADDR_VAR 0 9
33866: PUSH
33867: LD_INT 35
33869: PUSH
33870: LD_INT 20
33872: PUSH
33873: LD_INT 45
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: LIST
33880: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33881: LD_VAR 0 6
33885: PPUSH
33886: CALL_OW 264
33890: PUSH
33891: LD_INT 47
33893: PUSH
33894: EMPTY
33895: LIST
33896: IN
33897: IFFALSE 33918
// points := [ 67 , 45 , 75 ] ;
33899: LD_ADDR_VAR 0 9
33903: PUSH
33904: LD_INT 67
33906: PUSH
33907: LD_INT 45
33909: PUSH
33910: LD_INT 75
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: LIST
33917: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33918: LD_VAR 0 6
33922: PPUSH
33923: CALL_OW 264
33927: PUSH
33928: LD_INT 26
33930: PUSH
33931: EMPTY
33932: LIST
33933: IN
33934: IFFALSE 33955
// points := [ 120 , 30 , 80 ] ;
33936: LD_ADDR_VAR 0 9
33940: PUSH
33941: LD_INT 120
33943: PUSH
33944: LD_INT 30
33946: PUSH
33947: LD_INT 80
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: LIST
33954: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33955: LD_VAR 0 6
33959: PPUSH
33960: CALL_OW 264
33964: PUSH
33965: LD_INT 22
33967: PUSH
33968: EMPTY
33969: LIST
33970: IN
33971: IFFALSE 33992
// points := [ 40 , 1 , 1 ] ;
33973: LD_ADDR_VAR 0 9
33977: PUSH
33978: LD_INT 40
33980: PUSH
33981: LD_INT 1
33983: PUSH
33984: LD_INT 1
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: LIST
33991: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33992: LD_VAR 0 6
33996: PPUSH
33997: CALL_OW 264
34001: PUSH
34002: LD_INT 29
34004: PUSH
34005: EMPTY
34006: LIST
34007: IN
34008: IFFALSE 34029
// points := [ 70 , 200 , 400 ] ;
34010: LD_ADDR_VAR 0 9
34014: PUSH
34015: LD_INT 70
34017: PUSH
34018: LD_INT 200
34020: PUSH
34021: LD_INT 400
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: LIST
34028: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34029: LD_VAR 0 6
34033: PPUSH
34034: CALL_OW 264
34038: PUSH
34039: LD_INT 14
34041: PUSH
34042: LD_INT 53
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: IN
34049: IFFALSE 34070
// points := [ 40 , 10 , 20 ] ;
34051: LD_ADDR_VAR 0 9
34055: PUSH
34056: LD_INT 40
34058: PUSH
34059: LD_INT 10
34061: PUSH
34062: LD_INT 20
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: LIST
34069: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34070: LD_VAR 0 6
34074: PPUSH
34075: CALL_OW 264
34079: PUSH
34080: LD_INT 9
34082: PUSH
34083: EMPTY
34084: LIST
34085: IN
34086: IFFALSE 34107
// points := [ 5 , 70 , 20 ] ;
34088: LD_ADDR_VAR 0 9
34092: PUSH
34093: LD_INT 5
34095: PUSH
34096: LD_INT 70
34098: PUSH
34099: LD_INT 20
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: LIST
34106: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34107: LD_VAR 0 6
34111: PPUSH
34112: CALL_OW 264
34116: PUSH
34117: LD_INT 10
34119: PUSH
34120: EMPTY
34121: LIST
34122: IN
34123: IFFALSE 34144
// points := [ 35 , 110 , 70 ] ;
34125: LD_ADDR_VAR 0 9
34129: PUSH
34130: LD_INT 35
34132: PUSH
34133: LD_INT 110
34135: PUSH
34136: LD_INT 70
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: LIST
34143: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34144: LD_VAR 0 6
34148: PPUSH
34149: CALL_OW 265
34153: PUSH
34154: LD_INT 25
34156: EQUAL
34157: IFFALSE 34178
// points := [ 80 , 65 , 100 ] ;
34159: LD_ADDR_VAR 0 9
34163: PUSH
34164: LD_INT 80
34166: PUSH
34167: LD_INT 65
34169: PUSH
34170: LD_INT 100
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: LIST
34177: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34178: LD_VAR 0 6
34182: PPUSH
34183: CALL_OW 263
34187: PUSH
34188: LD_INT 1
34190: EQUAL
34191: IFFALSE 34226
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34193: LD_ADDR_VAR 0 10
34197: PUSH
34198: LD_VAR 0 10
34202: PUSH
34203: LD_VAR 0 6
34207: PPUSH
34208: CALL_OW 311
34212: PPUSH
34213: LD_INT 3
34215: PPUSH
34216: CALL_OW 259
34220: PUSH
34221: LD_INT 4
34223: MUL
34224: MUL
34225: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34226: LD_VAR 0 6
34230: PPUSH
34231: CALL_OW 263
34235: PUSH
34236: LD_INT 2
34238: EQUAL
34239: IFFALSE 34290
// begin j := IsControledBy ( i ) ;
34241: LD_ADDR_VAR 0 7
34245: PUSH
34246: LD_VAR 0 6
34250: PPUSH
34251: CALL_OW 312
34255: ST_TO_ADDR
// if j then
34256: LD_VAR 0 7
34260: IFFALSE 34290
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34262: LD_ADDR_VAR 0 10
34266: PUSH
34267: LD_VAR 0 10
34271: PUSH
34272: LD_VAR 0 7
34276: PPUSH
34277: LD_INT 3
34279: PPUSH
34280: CALL_OW 259
34284: PUSH
34285: LD_INT 3
34287: MUL
34288: MUL
34289: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34290: LD_VAR 0 6
34294: PPUSH
34295: CALL_OW 264
34299: PUSH
34300: LD_INT 5
34302: PUSH
34303: LD_INT 6
34305: PUSH
34306: LD_INT 46
34308: PUSH
34309: LD_INT 44
34311: PUSH
34312: LD_INT 47
34314: PUSH
34315: LD_INT 45
34317: PUSH
34318: LD_INT 28
34320: PUSH
34321: LD_INT 7
34323: PUSH
34324: LD_INT 27
34326: PUSH
34327: LD_INT 29
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: IN
34342: PUSH
34343: LD_VAR 0 1
34347: PPUSH
34348: LD_INT 52
34350: PPUSH
34351: CALL_OW 321
34355: PUSH
34356: LD_INT 2
34358: EQUAL
34359: AND
34360: IFFALSE 34377
// bpoints := bpoints * 1.2 ;
34362: LD_ADDR_VAR 0 10
34366: PUSH
34367: LD_VAR 0 10
34371: PUSH
34372: LD_REAL  1.20000000000000E+0000
34375: MUL
34376: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34377: LD_VAR 0 6
34381: PPUSH
34382: CALL_OW 264
34386: PUSH
34387: LD_INT 6
34389: PUSH
34390: LD_INT 46
34392: PUSH
34393: LD_INT 47
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: LIST
34400: IN
34401: IFFALSE 34418
// bpoints := bpoints * 1.2 ;
34403: LD_ADDR_VAR 0 10
34407: PUSH
34408: LD_VAR 0 10
34412: PUSH
34413: LD_REAL  1.20000000000000E+0000
34416: MUL
34417: ST_TO_ADDR
// end ; unit_building :
34418: GO 34432
34420: LD_INT 3
34422: DOUBLE
34423: EQUAL
34424: IFTRUE 34428
34426: GO 34431
34428: POP
// ; end ;
34429: GO 34432
34431: POP
// for j = 1 to 3 do
34432: LD_ADDR_VAR 0 7
34436: PUSH
34437: DOUBLE
34438: LD_INT 1
34440: DEC
34441: ST_TO_ADDR
34442: LD_INT 3
34444: PUSH
34445: FOR_TO
34446: IFFALSE 34499
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34448: LD_ADDR_VAR 0 5
34452: PUSH
34453: LD_VAR 0 5
34457: PPUSH
34458: LD_VAR 0 7
34462: PPUSH
34463: LD_VAR 0 5
34467: PUSH
34468: LD_VAR 0 7
34472: ARRAY
34473: PUSH
34474: LD_VAR 0 9
34478: PUSH
34479: LD_VAR 0 7
34483: ARRAY
34484: PUSH
34485: LD_VAR 0 10
34489: MUL
34490: PLUS
34491: PPUSH
34492: CALL_OW 1
34496: ST_TO_ADDR
34497: GO 34445
34499: POP
34500: POP
// end ;
34501: GO 32980
34503: POP
34504: POP
// result := Replace ( result , 4 , tmp ) ;
34505: LD_ADDR_VAR 0 5
34509: PUSH
34510: LD_VAR 0 5
34514: PPUSH
34515: LD_INT 4
34517: PPUSH
34518: LD_VAR 0 8
34522: PPUSH
34523: CALL_OW 1
34527: ST_TO_ADDR
// end ;
34528: LD_VAR 0 5
34532: RET
// export function DangerAtRange ( unit , range ) ; begin
34533: LD_INT 0
34535: PPUSH
// if not unit then
34536: LD_VAR 0 1
34540: NOT
34541: IFFALSE 34545
// exit ;
34543: GO 34590
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34545: LD_ADDR_VAR 0 3
34549: PUSH
34550: LD_VAR 0 1
34554: PPUSH
34555: CALL_OW 255
34559: PPUSH
34560: LD_VAR 0 1
34564: PPUSH
34565: CALL_OW 250
34569: PPUSH
34570: LD_VAR 0 1
34574: PPUSH
34575: CALL_OW 251
34579: PPUSH
34580: LD_VAR 0 2
34584: PPUSH
34585: CALL 32832 0 4
34589: ST_TO_ADDR
// end ;
34590: LD_VAR 0 3
34594: RET
// export function DangerInArea ( side , area ) ; begin
34595: LD_INT 0
34597: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34598: LD_ADDR_VAR 0 3
34602: PUSH
34603: LD_VAR 0 2
34607: PPUSH
34608: LD_INT 81
34610: PUSH
34611: LD_VAR 0 1
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PPUSH
34620: CALL_OW 70
34624: ST_TO_ADDR
// end ;
34625: LD_VAR 0 3
34629: RET
// export function IsExtension ( b ) ; begin
34630: LD_INT 0
34632: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34633: LD_ADDR_VAR 0 2
34637: PUSH
34638: LD_VAR 0 1
34642: PUSH
34643: LD_INT 23
34645: PUSH
34646: LD_INT 20
34648: PUSH
34649: LD_INT 22
34651: PUSH
34652: LD_INT 17
34654: PUSH
34655: LD_INT 24
34657: PUSH
34658: LD_INT 21
34660: PUSH
34661: LD_INT 19
34663: PUSH
34664: LD_INT 16
34666: PUSH
34667: LD_INT 25
34669: PUSH
34670: LD_INT 18
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: IN
34685: ST_TO_ADDR
// end ;
34686: LD_VAR 0 2
34690: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34691: LD_INT 0
34693: PPUSH
34694: PPUSH
34695: PPUSH
// result := [ ] ;
34696: LD_ADDR_VAR 0 4
34700: PUSH
34701: EMPTY
34702: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34703: LD_ADDR_VAR 0 5
34707: PUSH
34708: LD_VAR 0 2
34712: PPUSH
34713: LD_INT 21
34715: PUSH
34716: LD_INT 3
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PPUSH
34723: CALL_OW 70
34727: ST_TO_ADDR
// if not tmp then
34728: LD_VAR 0 5
34732: NOT
34733: IFFALSE 34737
// exit ;
34735: GO 34801
// if checkLink then
34737: LD_VAR 0 3
34741: IFFALSE 34791
// begin for i in tmp do
34743: LD_ADDR_VAR 0 6
34747: PUSH
34748: LD_VAR 0 5
34752: PUSH
34753: FOR_IN
34754: IFFALSE 34789
// if GetBase ( i ) <> base then
34756: LD_VAR 0 6
34760: PPUSH
34761: CALL_OW 274
34765: PUSH
34766: LD_VAR 0 1
34770: NONEQUAL
34771: IFFALSE 34787
// ComLinkToBase ( base , i ) ;
34773: LD_VAR 0 1
34777: PPUSH
34778: LD_VAR 0 6
34782: PPUSH
34783: CALL_OW 169
34787: GO 34753
34789: POP
34790: POP
// end ; result := tmp ;
34791: LD_ADDR_VAR 0 4
34795: PUSH
34796: LD_VAR 0 5
34800: ST_TO_ADDR
// end ;
34801: LD_VAR 0 4
34805: RET
// export function ComComplete ( units , b ) ; var i ; begin
34806: LD_INT 0
34808: PPUSH
34809: PPUSH
// if not units then
34810: LD_VAR 0 1
34814: NOT
34815: IFFALSE 34819
// exit ;
34817: GO 34909
// for i in units do
34819: LD_ADDR_VAR 0 4
34823: PUSH
34824: LD_VAR 0 1
34828: PUSH
34829: FOR_IN
34830: IFFALSE 34907
// if BuildingStatus ( b ) = bs_build then
34832: LD_VAR 0 2
34836: PPUSH
34837: CALL_OW 461
34841: PUSH
34842: LD_INT 1
34844: EQUAL
34845: IFFALSE 34905
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34847: LD_VAR 0 4
34851: PPUSH
34852: LD_STRING h
34854: PUSH
34855: LD_VAR 0 2
34859: PPUSH
34860: CALL_OW 250
34864: PUSH
34865: LD_VAR 0 2
34869: PPUSH
34870: CALL_OW 251
34874: PUSH
34875: LD_VAR 0 2
34879: PUSH
34880: LD_INT 0
34882: PUSH
34883: LD_INT 0
34885: PUSH
34886: LD_INT 0
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: PUSH
34898: EMPTY
34899: LIST
34900: PPUSH
34901: CALL_OW 446
34905: GO 34829
34907: POP
34908: POP
// end ;
34909: LD_VAR 0 3
34913: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34914: LD_INT 0
34916: PPUSH
34917: PPUSH
34918: PPUSH
34919: PPUSH
34920: PPUSH
34921: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34922: LD_VAR 0 1
34926: NOT
34927: PUSH
34928: LD_VAR 0 1
34932: PPUSH
34933: CALL_OW 263
34937: PUSH
34938: LD_INT 2
34940: NONEQUAL
34941: OR
34942: IFFALSE 34946
// exit ;
34944: GO 35262
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34946: LD_ADDR_VAR 0 6
34950: PUSH
34951: LD_INT 22
34953: PUSH
34954: LD_VAR 0 1
34958: PPUSH
34959: CALL_OW 255
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 2
34970: PUSH
34971: LD_INT 30
34973: PUSH
34974: LD_INT 36
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 34
34983: PUSH
34984: LD_INT 31
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: LIST
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PPUSH
35000: CALL_OW 69
35004: ST_TO_ADDR
// if not tmp then
35005: LD_VAR 0 6
35009: NOT
35010: IFFALSE 35014
// exit ;
35012: GO 35262
// result := [ ] ;
35014: LD_ADDR_VAR 0 2
35018: PUSH
35019: EMPTY
35020: ST_TO_ADDR
// for i in tmp do
35021: LD_ADDR_VAR 0 3
35025: PUSH
35026: LD_VAR 0 6
35030: PUSH
35031: FOR_IN
35032: IFFALSE 35103
// begin t := UnitsInside ( i ) ;
35034: LD_ADDR_VAR 0 4
35038: PUSH
35039: LD_VAR 0 3
35043: PPUSH
35044: CALL_OW 313
35048: ST_TO_ADDR
// if t then
35049: LD_VAR 0 4
35053: IFFALSE 35101
// for j in t do
35055: LD_ADDR_VAR 0 7
35059: PUSH
35060: LD_VAR 0 4
35064: PUSH
35065: FOR_IN
35066: IFFALSE 35099
// result := Replace ( result , result + 1 , j ) ;
35068: LD_ADDR_VAR 0 2
35072: PUSH
35073: LD_VAR 0 2
35077: PPUSH
35078: LD_VAR 0 2
35082: PUSH
35083: LD_INT 1
35085: PLUS
35086: PPUSH
35087: LD_VAR 0 7
35091: PPUSH
35092: CALL_OW 1
35096: ST_TO_ADDR
35097: GO 35065
35099: POP
35100: POP
// end ;
35101: GO 35031
35103: POP
35104: POP
// if not result then
35105: LD_VAR 0 2
35109: NOT
35110: IFFALSE 35114
// exit ;
35112: GO 35262
// mech := result [ 1 ] ;
35114: LD_ADDR_VAR 0 5
35118: PUSH
35119: LD_VAR 0 2
35123: PUSH
35124: LD_INT 1
35126: ARRAY
35127: ST_TO_ADDR
// if result > 1 then
35128: LD_VAR 0 2
35132: PUSH
35133: LD_INT 1
35135: GREATER
35136: IFFALSE 35248
// begin for i = 2 to result do
35138: LD_ADDR_VAR 0 3
35142: PUSH
35143: DOUBLE
35144: LD_INT 2
35146: DEC
35147: ST_TO_ADDR
35148: LD_VAR 0 2
35152: PUSH
35153: FOR_TO
35154: IFFALSE 35246
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35156: LD_ADDR_VAR 0 4
35160: PUSH
35161: LD_VAR 0 2
35165: PUSH
35166: LD_VAR 0 3
35170: ARRAY
35171: PPUSH
35172: LD_INT 3
35174: PPUSH
35175: CALL_OW 259
35179: PUSH
35180: LD_VAR 0 2
35184: PUSH
35185: LD_VAR 0 3
35189: ARRAY
35190: PPUSH
35191: CALL_OW 432
35195: MINUS
35196: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35197: LD_VAR 0 4
35201: PUSH
35202: LD_VAR 0 5
35206: PPUSH
35207: LD_INT 3
35209: PPUSH
35210: CALL_OW 259
35214: PUSH
35215: LD_VAR 0 5
35219: PPUSH
35220: CALL_OW 432
35224: MINUS
35225: GREATEREQUAL
35226: IFFALSE 35244
// mech := result [ i ] ;
35228: LD_ADDR_VAR 0 5
35232: PUSH
35233: LD_VAR 0 2
35237: PUSH
35238: LD_VAR 0 3
35242: ARRAY
35243: ST_TO_ADDR
// end ;
35244: GO 35153
35246: POP
35247: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35248: LD_VAR 0 1
35252: PPUSH
35253: LD_VAR 0 5
35257: PPUSH
35258: CALL_OW 135
// end ;
35262: LD_VAR 0 2
35266: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35267: LD_INT 0
35269: PPUSH
35270: PPUSH
35271: PPUSH
35272: PPUSH
35273: PPUSH
35274: PPUSH
35275: PPUSH
35276: PPUSH
35277: PPUSH
35278: PPUSH
35279: PPUSH
35280: PPUSH
35281: PPUSH
// result := [ ] ;
35282: LD_ADDR_VAR 0 7
35286: PUSH
35287: EMPTY
35288: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35289: LD_VAR 0 1
35293: PPUSH
35294: CALL_OW 266
35298: PUSH
35299: LD_INT 0
35301: PUSH
35302: LD_INT 1
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: IN
35309: NOT
35310: IFFALSE 35314
// exit ;
35312: GO 36948
// if name then
35314: LD_VAR 0 3
35318: IFFALSE 35334
// SetBName ( base_dep , name ) ;
35320: LD_VAR 0 1
35324: PPUSH
35325: LD_VAR 0 3
35329: PPUSH
35330: CALL_OW 500
// base := GetBase ( base_dep ) ;
35334: LD_ADDR_VAR 0 15
35338: PUSH
35339: LD_VAR 0 1
35343: PPUSH
35344: CALL_OW 274
35348: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35349: LD_ADDR_VAR 0 16
35353: PUSH
35354: LD_VAR 0 1
35358: PPUSH
35359: CALL_OW 255
35363: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35364: LD_ADDR_VAR 0 17
35368: PUSH
35369: LD_VAR 0 1
35373: PPUSH
35374: CALL_OW 248
35378: ST_TO_ADDR
// if sources then
35379: LD_VAR 0 5
35383: IFFALSE 35430
// for i = 1 to 3 do
35385: LD_ADDR_VAR 0 8
35389: PUSH
35390: DOUBLE
35391: LD_INT 1
35393: DEC
35394: ST_TO_ADDR
35395: LD_INT 3
35397: PUSH
35398: FOR_TO
35399: IFFALSE 35428
// AddResourceType ( base , i , sources [ i ] ) ;
35401: LD_VAR 0 15
35405: PPUSH
35406: LD_VAR 0 8
35410: PPUSH
35411: LD_VAR 0 5
35415: PUSH
35416: LD_VAR 0 8
35420: ARRAY
35421: PPUSH
35422: CALL_OW 276
35426: GO 35398
35428: POP
35429: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35430: LD_ADDR_VAR 0 18
35434: PUSH
35435: LD_VAR 0 15
35439: PPUSH
35440: LD_VAR 0 2
35444: PPUSH
35445: LD_INT 1
35447: PPUSH
35448: CALL 34691 0 3
35452: ST_TO_ADDR
// InitHc ;
35453: CALL_OW 19
// InitUc ;
35457: CALL_OW 18
// uc_side := side ;
35461: LD_ADDR_OWVAR 20
35465: PUSH
35466: LD_VAR 0 16
35470: ST_TO_ADDR
// uc_nation := nation ;
35471: LD_ADDR_OWVAR 21
35475: PUSH
35476: LD_VAR 0 17
35480: ST_TO_ADDR
// if buildings then
35481: LD_VAR 0 18
35485: IFFALSE 36807
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35487: LD_ADDR_VAR 0 19
35491: PUSH
35492: LD_VAR 0 18
35496: PPUSH
35497: LD_INT 2
35499: PUSH
35500: LD_INT 30
35502: PUSH
35503: LD_INT 29
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 30
35512: PUSH
35513: LD_INT 30
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: LIST
35524: PPUSH
35525: CALL_OW 72
35529: ST_TO_ADDR
// if tmp then
35530: LD_VAR 0 19
35534: IFFALSE 35582
// for i in tmp do
35536: LD_ADDR_VAR 0 8
35540: PUSH
35541: LD_VAR 0 19
35545: PUSH
35546: FOR_IN
35547: IFFALSE 35580
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35549: LD_VAR 0 8
35553: PPUSH
35554: CALL_OW 250
35558: PPUSH
35559: LD_VAR 0 8
35563: PPUSH
35564: CALL_OW 251
35568: PPUSH
35569: LD_VAR 0 16
35573: PPUSH
35574: CALL_OW 441
35578: GO 35546
35580: POP
35581: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35582: LD_VAR 0 18
35586: PPUSH
35587: LD_INT 2
35589: PUSH
35590: LD_INT 30
35592: PUSH
35593: LD_INT 32
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 30
35602: PUSH
35603: LD_INT 33
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: LIST
35614: PPUSH
35615: CALL_OW 72
35619: IFFALSE 35707
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35621: LD_ADDR_VAR 0 8
35625: PUSH
35626: LD_VAR 0 18
35630: PPUSH
35631: LD_INT 2
35633: PUSH
35634: LD_INT 30
35636: PUSH
35637: LD_INT 32
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PUSH
35644: LD_INT 30
35646: PUSH
35647: LD_INT 33
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: LIST
35658: PPUSH
35659: CALL_OW 72
35663: PUSH
35664: FOR_IN
35665: IFFALSE 35705
// begin if not GetBWeapon ( i ) then
35667: LD_VAR 0 8
35671: PPUSH
35672: CALL_OW 269
35676: NOT
35677: IFFALSE 35703
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35679: LD_VAR 0 8
35683: PPUSH
35684: LD_VAR 0 8
35688: PPUSH
35689: LD_VAR 0 2
35693: PPUSH
35694: CALL 36953 0 2
35698: PPUSH
35699: CALL_OW 431
// end ;
35703: GO 35664
35705: POP
35706: POP
// end ; for i = 1 to personel do
35707: LD_ADDR_VAR 0 8
35711: PUSH
35712: DOUBLE
35713: LD_INT 1
35715: DEC
35716: ST_TO_ADDR
35717: LD_VAR 0 6
35721: PUSH
35722: FOR_TO
35723: IFFALSE 36787
// begin if i > 4 then
35725: LD_VAR 0 8
35729: PUSH
35730: LD_INT 4
35732: GREATER
35733: IFFALSE 35737
// break ;
35735: GO 36787
// case i of 1 :
35737: LD_VAR 0 8
35741: PUSH
35742: LD_INT 1
35744: DOUBLE
35745: EQUAL
35746: IFTRUE 35750
35748: GO 35830
35750: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35751: LD_ADDR_VAR 0 12
35755: PUSH
35756: LD_VAR 0 18
35760: PPUSH
35761: LD_INT 22
35763: PUSH
35764: LD_VAR 0 16
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 58
35775: PUSH
35776: EMPTY
35777: LIST
35778: PUSH
35779: LD_INT 2
35781: PUSH
35782: LD_INT 30
35784: PUSH
35785: LD_INT 32
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: LD_INT 30
35794: PUSH
35795: LD_INT 4
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 30
35804: PUSH
35805: LD_INT 5
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: LIST
35822: PPUSH
35823: CALL_OW 72
35827: ST_TO_ADDR
35828: GO 36052
35830: LD_INT 2
35832: DOUBLE
35833: EQUAL
35834: IFTRUE 35838
35836: GO 35900
35838: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35839: LD_ADDR_VAR 0 12
35843: PUSH
35844: LD_VAR 0 18
35848: PPUSH
35849: LD_INT 22
35851: PUSH
35852: LD_VAR 0 16
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 2
35863: PUSH
35864: LD_INT 30
35866: PUSH
35867: LD_INT 0
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 30
35876: PUSH
35877: LD_INT 1
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: LIST
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PPUSH
35893: CALL_OW 72
35897: ST_TO_ADDR
35898: GO 36052
35900: LD_INT 3
35902: DOUBLE
35903: EQUAL
35904: IFTRUE 35908
35906: GO 35970
35908: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35909: LD_ADDR_VAR 0 12
35913: PUSH
35914: LD_VAR 0 18
35918: PPUSH
35919: LD_INT 22
35921: PUSH
35922: LD_VAR 0 16
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: LD_INT 2
35933: PUSH
35934: LD_INT 30
35936: PUSH
35937: LD_INT 2
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: LD_INT 30
35946: PUSH
35947: LD_INT 3
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: LIST
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PPUSH
35963: CALL_OW 72
35967: ST_TO_ADDR
35968: GO 36052
35970: LD_INT 4
35972: DOUBLE
35973: EQUAL
35974: IFTRUE 35978
35976: GO 36051
35978: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35979: LD_ADDR_VAR 0 12
35983: PUSH
35984: LD_VAR 0 18
35988: PPUSH
35989: LD_INT 22
35991: PUSH
35992: LD_VAR 0 16
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: PUSH
36001: LD_INT 2
36003: PUSH
36004: LD_INT 30
36006: PUSH
36007: LD_INT 6
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 30
36016: PUSH
36017: LD_INT 7
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: LD_INT 30
36026: PUSH
36027: LD_INT 8
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PPUSH
36044: CALL_OW 72
36048: ST_TO_ADDR
36049: GO 36052
36051: POP
// if i = 1 then
36052: LD_VAR 0 8
36056: PUSH
36057: LD_INT 1
36059: EQUAL
36060: IFFALSE 36171
// begin tmp := [ ] ;
36062: LD_ADDR_VAR 0 19
36066: PUSH
36067: EMPTY
36068: ST_TO_ADDR
// for j in f do
36069: LD_ADDR_VAR 0 9
36073: PUSH
36074: LD_VAR 0 12
36078: PUSH
36079: FOR_IN
36080: IFFALSE 36153
// if GetBType ( j ) = b_bunker then
36082: LD_VAR 0 9
36086: PPUSH
36087: CALL_OW 266
36091: PUSH
36092: LD_INT 32
36094: EQUAL
36095: IFFALSE 36122
// tmp := Insert ( tmp , 1 , j ) else
36097: LD_ADDR_VAR 0 19
36101: PUSH
36102: LD_VAR 0 19
36106: PPUSH
36107: LD_INT 1
36109: PPUSH
36110: LD_VAR 0 9
36114: PPUSH
36115: CALL_OW 2
36119: ST_TO_ADDR
36120: GO 36151
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36122: LD_ADDR_VAR 0 19
36126: PUSH
36127: LD_VAR 0 19
36131: PPUSH
36132: LD_VAR 0 19
36136: PUSH
36137: LD_INT 1
36139: PLUS
36140: PPUSH
36141: LD_VAR 0 9
36145: PPUSH
36146: CALL_OW 2
36150: ST_TO_ADDR
36151: GO 36079
36153: POP
36154: POP
// if tmp then
36155: LD_VAR 0 19
36159: IFFALSE 36171
// f := tmp ;
36161: LD_ADDR_VAR 0 12
36165: PUSH
36166: LD_VAR 0 19
36170: ST_TO_ADDR
// end ; x := personel [ i ] ;
36171: LD_ADDR_VAR 0 13
36175: PUSH
36176: LD_VAR 0 6
36180: PUSH
36181: LD_VAR 0 8
36185: ARRAY
36186: ST_TO_ADDR
// if x = - 1 then
36187: LD_VAR 0 13
36191: PUSH
36192: LD_INT 1
36194: NEG
36195: EQUAL
36196: IFFALSE 36405
// begin for j in f do
36198: LD_ADDR_VAR 0 9
36202: PUSH
36203: LD_VAR 0 12
36207: PUSH
36208: FOR_IN
36209: IFFALSE 36401
// repeat InitHc ;
36211: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36215: LD_VAR 0 9
36219: PPUSH
36220: CALL_OW 266
36224: PUSH
36225: LD_INT 5
36227: EQUAL
36228: IFFALSE 36298
// begin if UnitsInside ( j ) < 3 then
36230: LD_VAR 0 9
36234: PPUSH
36235: CALL_OW 313
36239: PUSH
36240: LD_INT 3
36242: LESS
36243: IFFALSE 36279
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36245: LD_INT 0
36247: PPUSH
36248: LD_INT 5
36250: PUSH
36251: LD_INT 8
36253: PUSH
36254: LD_INT 9
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: LIST
36261: PUSH
36262: LD_VAR 0 17
36266: ARRAY
36267: PPUSH
36268: LD_VAR 0 4
36272: PPUSH
36273: CALL_OW 380
36277: GO 36296
// PrepareHuman ( false , i , skill ) ;
36279: LD_INT 0
36281: PPUSH
36282: LD_VAR 0 8
36286: PPUSH
36287: LD_VAR 0 4
36291: PPUSH
36292: CALL_OW 380
// end else
36296: GO 36315
// PrepareHuman ( false , i , skill ) ;
36298: LD_INT 0
36300: PPUSH
36301: LD_VAR 0 8
36305: PPUSH
36306: LD_VAR 0 4
36310: PPUSH
36311: CALL_OW 380
// un := CreateHuman ;
36315: LD_ADDR_VAR 0 14
36319: PUSH
36320: CALL_OW 44
36324: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36325: LD_ADDR_VAR 0 7
36329: PUSH
36330: LD_VAR 0 7
36334: PPUSH
36335: LD_INT 1
36337: PPUSH
36338: LD_VAR 0 14
36342: PPUSH
36343: CALL_OW 2
36347: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36348: LD_VAR 0 14
36352: PPUSH
36353: LD_VAR 0 9
36357: PPUSH
36358: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36362: LD_VAR 0 9
36366: PPUSH
36367: CALL_OW 313
36371: PUSH
36372: LD_INT 6
36374: EQUAL
36375: PUSH
36376: LD_VAR 0 9
36380: PPUSH
36381: CALL_OW 266
36385: PUSH
36386: LD_INT 32
36388: PUSH
36389: LD_INT 31
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: IN
36396: OR
36397: IFFALSE 36211
36399: GO 36208
36401: POP
36402: POP
// end else
36403: GO 36785
// for j = 1 to x do
36405: LD_ADDR_VAR 0 9
36409: PUSH
36410: DOUBLE
36411: LD_INT 1
36413: DEC
36414: ST_TO_ADDR
36415: LD_VAR 0 13
36419: PUSH
36420: FOR_TO
36421: IFFALSE 36783
// begin InitHc ;
36423: CALL_OW 19
// if not f then
36427: LD_VAR 0 12
36431: NOT
36432: IFFALSE 36521
// begin PrepareHuman ( false , i , skill ) ;
36434: LD_INT 0
36436: PPUSH
36437: LD_VAR 0 8
36441: PPUSH
36442: LD_VAR 0 4
36446: PPUSH
36447: CALL_OW 380
// un := CreateHuman ;
36451: LD_ADDR_VAR 0 14
36455: PUSH
36456: CALL_OW 44
36460: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36461: LD_ADDR_VAR 0 7
36465: PUSH
36466: LD_VAR 0 7
36470: PPUSH
36471: LD_INT 1
36473: PPUSH
36474: LD_VAR 0 14
36478: PPUSH
36479: CALL_OW 2
36483: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36484: LD_VAR 0 14
36488: PPUSH
36489: LD_VAR 0 1
36493: PPUSH
36494: CALL_OW 250
36498: PPUSH
36499: LD_VAR 0 1
36503: PPUSH
36504: CALL_OW 251
36508: PPUSH
36509: LD_INT 10
36511: PPUSH
36512: LD_INT 0
36514: PPUSH
36515: CALL_OW 50
// continue ;
36519: GO 36420
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36521: LD_VAR 0 12
36525: PUSH
36526: LD_INT 1
36528: ARRAY
36529: PPUSH
36530: CALL_OW 313
36534: PUSH
36535: LD_VAR 0 12
36539: PUSH
36540: LD_INT 1
36542: ARRAY
36543: PPUSH
36544: CALL_OW 266
36548: PUSH
36549: LD_INT 32
36551: PUSH
36552: LD_INT 31
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: IN
36559: AND
36560: PUSH
36561: LD_VAR 0 12
36565: PUSH
36566: LD_INT 1
36568: ARRAY
36569: PPUSH
36570: CALL_OW 313
36574: PUSH
36575: LD_INT 6
36577: EQUAL
36578: OR
36579: IFFALSE 36599
// f := Delete ( f , 1 ) ;
36581: LD_ADDR_VAR 0 12
36585: PUSH
36586: LD_VAR 0 12
36590: PPUSH
36591: LD_INT 1
36593: PPUSH
36594: CALL_OW 3
36598: ST_TO_ADDR
// if not f then
36599: LD_VAR 0 12
36603: NOT
36604: IFFALSE 36622
// begin x := x + 2 ;
36606: LD_ADDR_VAR 0 13
36610: PUSH
36611: LD_VAR 0 13
36615: PUSH
36616: LD_INT 2
36618: PLUS
36619: ST_TO_ADDR
// continue ;
36620: GO 36420
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36622: LD_VAR 0 12
36626: PUSH
36627: LD_INT 1
36629: ARRAY
36630: PPUSH
36631: CALL_OW 266
36635: PUSH
36636: LD_INT 5
36638: EQUAL
36639: IFFALSE 36713
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36641: LD_VAR 0 12
36645: PUSH
36646: LD_INT 1
36648: ARRAY
36649: PPUSH
36650: CALL_OW 313
36654: PUSH
36655: LD_INT 3
36657: LESS
36658: IFFALSE 36694
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36660: LD_INT 0
36662: PPUSH
36663: LD_INT 5
36665: PUSH
36666: LD_INT 8
36668: PUSH
36669: LD_INT 9
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: LIST
36676: PUSH
36677: LD_VAR 0 17
36681: ARRAY
36682: PPUSH
36683: LD_VAR 0 4
36687: PPUSH
36688: CALL_OW 380
36692: GO 36711
// PrepareHuman ( false , i , skill ) ;
36694: LD_INT 0
36696: PPUSH
36697: LD_VAR 0 8
36701: PPUSH
36702: LD_VAR 0 4
36706: PPUSH
36707: CALL_OW 380
// end else
36711: GO 36730
// PrepareHuman ( false , i , skill ) ;
36713: LD_INT 0
36715: PPUSH
36716: LD_VAR 0 8
36720: PPUSH
36721: LD_VAR 0 4
36725: PPUSH
36726: CALL_OW 380
// un := CreateHuman ;
36730: LD_ADDR_VAR 0 14
36734: PUSH
36735: CALL_OW 44
36739: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36740: LD_ADDR_VAR 0 7
36744: PUSH
36745: LD_VAR 0 7
36749: PPUSH
36750: LD_INT 1
36752: PPUSH
36753: LD_VAR 0 14
36757: PPUSH
36758: CALL_OW 2
36762: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36763: LD_VAR 0 14
36767: PPUSH
36768: LD_VAR 0 12
36772: PUSH
36773: LD_INT 1
36775: ARRAY
36776: PPUSH
36777: CALL_OW 52
// end ;
36781: GO 36420
36783: POP
36784: POP
// end ;
36785: GO 35722
36787: POP
36788: POP
// result := result ^ buildings ;
36789: LD_ADDR_VAR 0 7
36793: PUSH
36794: LD_VAR 0 7
36798: PUSH
36799: LD_VAR 0 18
36803: ADD
36804: ST_TO_ADDR
// end else
36805: GO 36948
// begin for i = 1 to personel do
36807: LD_ADDR_VAR 0 8
36811: PUSH
36812: DOUBLE
36813: LD_INT 1
36815: DEC
36816: ST_TO_ADDR
36817: LD_VAR 0 6
36821: PUSH
36822: FOR_TO
36823: IFFALSE 36946
// begin if i > 4 then
36825: LD_VAR 0 8
36829: PUSH
36830: LD_INT 4
36832: GREATER
36833: IFFALSE 36837
// break ;
36835: GO 36946
// x := personel [ i ] ;
36837: LD_ADDR_VAR 0 13
36841: PUSH
36842: LD_VAR 0 6
36846: PUSH
36847: LD_VAR 0 8
36851: ARRAY
36852: ST_TO_ADDR
// if x = - 1 then
36853: LD_VAR 0 13
36857: PUSH
36858: LD_INT 1
36860: NEG
36861: EQUAL
36862: IFFALSE 36866
// continue ;
36864: GO 36822
// PrepareHuman ( false , i , skill ) ;
36866: LD_INT 0
36868: PPUSH
36869: LD_VAR 0 8
36873: PPUSH
36874: LD_VAR 0 4
36878: PPUSH
36879: CALL_OW 380
// un := CreateHuman ;
36883: LD_ADDR_VAR 0 14
36887: PUSH
36888: CALL_OW 44
36892: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36893: LD_VAR 0 14
36897: PPUSH
36898: LD_VAR 0 1
36902: PPUSH
36903: CALL_OW 250
36907: PPUSH
36908: LD_VAR 0 1
36912: PPUSH
36913: CALL_OW 251
36917: PPUSH
36918: LD_INT 10
36920: PPUSH
36921: LD_INT 0
36923: PPUSH
36924: CALL_OW 50
// result := result ^ un ;
36928: LD_ADDR_VAR 0 7
36932: PUSH
36933: LD_VAR 0 7
36937: PUSH
36938: LD_VAR 0 14
36942: ADD
36943: ST_TO_ADDR
// end ;
36944: GO 36822
36946: POP
36947: POP
// end ; end ;
36948: LD_VAR 0 7
36952: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36953: LD_INT 0
36955: PPUSH
36956: PPUSH
36957: PPUSH
36958: PPUSH
36959: PPUSH
36960: PPUSH
36961: PPUSH
36962: PPUSH
36963: PPUSH
36964: PPUSH
36965: PPUSH
36966: PPUSH
36967: PPUSH
36968: PPUSH
36969: PPUSH
36970: PPUSH
// result := false ;
36971: LD_ADDR_VAR 0 3
36975: PUSH
36976: LD_INT 0
36978: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36979: LD_VAR 0 1
36983: NOT
36984: PUSH
36985: LD_VAR 0 1
36989: PPUSH
36990: CALL_OW 266
36994: PUSH
36995: LD_INT 32
36997: PUSH
36998: LD_INT 33
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: IN
37005: NOT
37006: OR
37007: IFFALSE 37011
// exit ;
37009: GO 38120
// nat := GetNation ( tower ) ;
37011: LD_ADDR_VAR 0 12
37015: PUSH
37016: LD_VAR 0 1
37020: PPUSH
37021: CALL_OW 248
37025: ST_TO_ADDR
// side := GetSide ( tower ) ;
37026: LD_ADDR_VAR 0 16
37030: PUSH
37031: LD_VAR 0 1
37035: PPUSH
37036: CALL_OW 255
37040: ST_TO_ADDR
// x := GetX ( tower ) ;
37041: LD_ADDR_VAR 0 10
37045: PUSH
37046: LD_VAR 0 1
37050: PPUSH
37051: CALL_OW 250
37055: ST_TO_ADDR
// y := GetY ( tower ) ;
37056: LD_ADDR_VAR 0 11
37060: PUSH
37061: LD_VAR 0 1
37065: PPUSH
37066: CALL_OW 251
37070: ST_TO_ADDR
// if not x or not y then
37071: LD_VAR 0 10
37075: NOT
37076: PUSH
37077: LD_VAR 0 11
37081: NOT
37082: OR
37083: IFFALSE 37087
// exit ;
37085: GO 38120
// weapon := 0 ;
37087: LD_ADDR_VAR 0 18
37091: PUSH
37092: LD_INT 0
37094: ST_TO_ADDR
// fac_list := [ ] ;
37095: LD_ADDR_VAR 0 17
37099: PUSH
37100: EMPTY
37101: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37102: LD_ADDR_VAR 0 6
37106: PUSH
37107: LD_VAR 0 1
37111: PPUSH
37112: CALL_OW 274
37116: PPUSH
37117: LD_VAR 0 2
37121: PPUSH
37122: LD_INT 0
37124: PPUSH
37125: CALL 34691 0 3
37129: PPUSH
37130: LD_INT 30
37132: PUSH
37133: LD_INT 3
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PPUSH
37140: CALL_OW 72
37144: ST_TO_ADDR
// if not factories then
37145: LD_VAR 0 6
37149: NOT
37150: IFFALSE 37154
// exit ;
37152: GO 38120
// for i in factories do
37154: LD_ADDR_VAR 0 8
37158: PUSH
37159: LD_VAR 0 6
37163: PUSH
37164: FOR_IN
37165: IFFALSE 37190
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37167: LD_ADDR_VAR 0 17
37171: PUSH
37172: LD_VAR 0 17
37176: PUSH
37177: LD_VAR 0 8
37181: PPUSH
37182: CALL_OW 478
37186: UNION
37187: ST_TO_ADDR
37188: GO 37164
37190: POP
37191: POP
// if not fac_list then
37192: LD_VAR 0 17
37196: NOT
37197: IFFALSE 37201
// exit ;
37199: GO 38120
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37201: LD_ADDR_VAR 0 5
37205: PUSH
37206: LD_INT 4
37208: PUSH
37209: LD_INT 5
37211: PUSH
37212: LD_INT 9
37214: PUSH
37215: LD_INT 10
37217: PUSH
37218: LD_INT 6
37220: PUSH
37221: LD_INT 7
37223: PUSH
37224: LD_INT 11
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 27
37238: PUSH
37239: LD_INT 28
37241: PUSH
37242: LD_INT 26
37244: PUSH
37245: LD_INT 30
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 43
37256: PUSH
37257: LD_INT 44
37259: PUSH
37260: LD_INT 46
37262: PUSH
37263: LD_INT 45
37265: PUSH
37266: LD_INT 47
37268: PUSH
37269: LD_INT 49
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: LIST
37284: PUSH
37285: LD_VAR 0 12
37289: ARRAY
37290: ST_TO_ADDR
// list := list isect fac_list ;
37291: LD_ADDR_VAR 0 5
37295: PUSH
37296: LD_VAR 0 5
37300: PUSH
37301: LD_VAR 0 17
37305: ISECT
37306: ST_TO_ADDR
// if not list then
37307: LD_VAR 0 5
37311: NOT
37312: IFFALSE 37316
// exit ;
37314: GO 38120
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37316: LD_VAR 0 12
37320: PUSH
37321: LD_INT 3
37323: EQUAL
37324: PUSH
37325: LD_INT 49
37327: PUSH
37328: LD_VAR 0 5
37332: IN
37333: AND
37334: PUSH
37335: LD_INT 31
37337: PPUSH
37338: LD_VAR 0 16
37342: PPUSH
37343: CALL_OW 321
37347: PUSH
37348: LD_INT 2
37350: EQUAL
37351: AND
37352: IFFALSE 37412
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37354: LD_INT 22
37356: PUSH
37357: LD_VAR 0 16
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: LD_INT 35
37368: PUSH
37369: LD_INT 49
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 91
37378: PUSH
37379: LD_VAR 0 1
37383: PUSH
37384: LD_INT 10
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: LIST
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: LIST
37396: PPUSH
37397: CALL_OW 69
37401: NOT
37402: IFFALSE 37412
// weapon := ru_time_lapser ;
37404: LD_ADDR_VAR 0 18
37408: PUSH
37409: LD_INT 49
37411: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37412: LD_VAR 0 12
37416: PUSH
37417: LD_INT 1
37419: PUSH
37420: LD_INT 2
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: IN
37427: PUSH
37428: LD_INT 11
37430: PUSH
37431: LD_VAR 0 5
37435: IN
37436: PUSH
37437: LD_INT 30
37439: PUSH
37440: LD_VAR 0 5
37444: IN
37445: OR
37446: AND
37447: PUSH
37448: LD_INT 6
37450: PPUSH
37451: LD_VAR 0 16
37455: PPUSH
37456: CALL_OW 321
37460: PUSH
37461: LD_INT 2
37463: EQUAL
37464: AND
37465: IFFALSE 37630
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37467: LD_INT 22
37469: PUSH
37470: LD_VAR 0 16
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: LD_INT 2
37481: PUSH
37482: LD_INT 35
37484: PUSH
37485: LD_INT 11
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 35
37494: PUSH
37495: LD_INT 30
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 91
37509: PUSH
37510: LD_VAR 0 1
37514: PUSH
37515: LD_INT 18
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: LIST
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: LIST
37527: PPUSH
37528: CALL_OW 69
37532: NOT
37533: PUSH
37534: LD_INT 22
37536: PUSH
37537: LD_VAR 0 16
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 2
37548: PUSH
37549: LD_INT 30
37551: PUSH
37552: LD_INT 32
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 30
37561: PUSH
37562: LD_INT 33
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 91
37576: PUSH
37577: LD_VAR 0 1
37581: PUSH
37582: LD_INT 12
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: LIST
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: LIST
37594: PUSH
37595: EMPTY
37596: LIST
37597: PPUSH
37598: CALL_OW 69
37602: PUSH
37603: LD_INT 2
37605: GREATER
37606: AND
37607: IFFALSE 37630
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37609: LD_ADDR_VAR 0 18
37613: PUSH
37614: LD_INT 11
37616: PUSH
37617: LD_INT 30
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_VAR 0 12
37628: ARRAY
37629: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37630: LD_VAR 0 18
37634: NOT
37635: PUSH
37636: LD_INT 40
37638: PPUSH
37639: LD_VAR 0 16
37643: PPUSH
37644: CALL_OW 321
37648: PUSH
37649: LD_INT 2
37651: EQUAL
37652: AND
37653: PUSH
37654: LD_INT 7
37656: PUSH
37657: LD_VAR 0 5
37661: IN
37662: PUSH
37663: LD_INT 28
37665: PUSH
37666: LD_VAR 0 5
37670: IN
37671: OR
37672: PUSH
37673: LD_INT 45
37675: PUSH
37676: LD_VAR 0 5
37680: IN
37681: OR
37682: AND
37683: IFFALSE 37937
// begin hex := GetHexInfo ( x , y ) ;
37685: LD_ADDR_VAR 0 4
37689: PUSH
37690: LD_VAR 0 10
37694: PPUSH
37695: LD_VAR 0 11
37699: PPUSH
37700: CALL_OW 546
37704: ST_TO_ADDR
// if hex [ 1 ] then
37705: LD_VAR 0 4
37709: PUSH
37710: LD_INT 1
37712: ARRAY
37713: IFFALSE 37717
// exit ;
37715: GO 38120
// height := hex [ 2 ] ;
37717: LD_ADDR_VAR 0 15
37721: PUSH
37722: LD_VAR 0 4
37726: PUSH
37727: LD_INT 2
37729: ARRAY
37730: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37731: LD_ADDR_VAR 0 14
37735: PUSH
37736: LD_INT 0
37738: PUSH
37739: LD_INT 2
37741: PUSH
37742: LD_INT 3
37744: PUSH
37745: LD_INT 5
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: ST_TO_ADDR
// for i in tmp do
37754: LD_ADDR_VAR 0 8
37758: PUSH
37759: LD_VAR 0 14
37763: PUSH
37764: FOR_IN
37765: IFFALSE 37935
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37767: LD_ADDR_VAR 0 9
37771: PUSH
37772: LD_VAR 0 10
37776: PPUSH
37777: LD_VAR 0 8
37781: PPUSH
37782: LD_INT 5
37784: PPUSH
37785: CALL_OW 272
37789: PUSH
37790: LD_VAR 0 11
37794: PPUSH
37795: LD_VAR 0 8
37799: PPUSH
37800: LD_INT 5
37802: PPUSH
37803: CALL_OW 273
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37812: LD_VAR 0 9
37816: PUSH
37817: LD_INT 1
37819: ARRAY
37820: PPUSH
37821: LD_VAR 0 9
37825: PUSH
37826: LD_INT 2
37828: ARRAY
37829: PPUSH
37830: CALL_OW 488
37834: IFFALSE 37933
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37836: LD_ADDR_VAR 0 4
37840: PUSH
37841: LD_VAR 0 9
37845: PUSH
37846: LD_INT 1
37848: ARRAY
37849: PPUSH
37850: LD_VAR 0 9
37854: PUSH
37855: LD_INT 2
37857: ARRAY
37858: PPUSH
37859: CALL_OW 546
37863: ST_TO_ADDR
// if hex [ 1 ] then
37864: LD_VAR 0 4
37868: PUSH
37869: LD_INT 1
37871: ARRAY
37872: IFFALSE 37876
// continue ;
37874: GO 37764
// h := hex [ 2 ] ;
37876: LD_ADDR_VAR 0 13
37880: PUSH
37881: LD_VAR 0 4
37885: PUSH
37886: LD_INT 2
37888: ARRAY
37889: ST_TO_ADDR
// if h + 7 < height then
37890: LD_VAR 0 13
37894: PUSH
37895: LD_INT 7
37897: PLUS
37898: PUSH
37899: LD_VAR 0 15
37903: LESS
37904: IFFALSE 37933
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37906: LD_ADDR_VAR 0 18
37910: PUSH
37911: LD_INT 7
37913: PUSH
37914: LD_INT 28
37916: PUSH
37917: LD_INT 45
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: LIST
37924: PUSH
37925: LD_VAR 0 12
37929: ARRAY
37930: ST_TO_ADDR
// break ;
37931: GO 37935
// end ; end ; end ;
37933: GO 37764
37935: POP
37936: POP
// end ; if not weapon then
37937: LD_VAR 0 18
37941: NOT
37942: IFFALSE 38002
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37944: LD_ADDR_VAR 0 5
37948: PUSH
37949: LD_VAR 0 5
37953: PUSH
37954: LD_INT 11
37956: PUSH
37957: LD_INT 30
37959: PUSH
37960: LD_INT 49
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: LIST
37967: DIFF
37968: ST_TO_ADDR
// if not list then
37969: LD_VAR 0 5
37973: NOT
37974: IFFALSE 37978
// exit ;
37976: GO 38120
// weapon := list [ rand ( 1 , list ) ] ;
37978: LD_ADDR_VAR 0 18
37982: PUSH
37983: LD_VAR 0 5
37987: PUSH
37988: LD_INT 1
37990: PPUSH
37991: LD_VAR 0 5
37995: PPUSH
37996: CALL_OW 12
38000: ARRAY
38001: ST_TO_ADDR
// end ; if weapon then
38002: LD_VAR 0 18
38006: IFFALSE 38120
// begin tmp := CostOfWeapon ( weapon ) ;
38008: LD_ADDR_VAR 0 14
38012: PUSH
38013: LD_VAR 0 18
38017: PPUSH
38018: CALL_OW 451
38022: ST_TO_ADDR
// j := GetBase ( tower ) ;
38023: LD_ADDR_VAR 0 9
38027: PUSH
38028: LD_VAR 0 1
38032: PPUSH
38033: CALL_OW 274
38037: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38038: LD_VAR 0 9
38042: PPUSH
38043: LD_INT 1
38045: PPUSH
38046: CALL_OW 275
38050: PUSH
38051: LD_VAR 0 14
38055: PUSH
38056: LD_INT 1
38058: ARRAY
38059: GREATEREQUAL
38060: PUSH
38061: LD_VAR 0 9
38065: PPUSH
38066: LD_INT 2
38068: PPUSH
38069: CALL_OW 275
38073: PUSH
38074: LD_VAR 0 14
38078: PUSH
38079: LD_INT 2
38081: ARRAY
38082: GREATEREQUAL
38083: AND
38084: PUSH
38085: LD_VAR 0 9
38089: PPUSH
38090: LD_INT 3
38092: PPUSH
38093: CALL_OW 275
38097: PUSH
38098: LD_VAR 0 14
38102: PUSH
38103: LD_INT 3
38105: ARRAY
38106: GREATEREQUAL
38107: AND
38108: IFFALSE 38120
// result := weapon ;
38110: LD_ADDR_VAR 0 3
38114: PUSH
38115: LD_VAR 0 18
38119: ST_TO_ADDR
// end ; end ;
38120: LD_VAR 0 3
38124: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38125: LD_INT 0
38127: PPUSH
38128: PPUSH
// result := true ;
38129: LD_ADDR_VAR 0 3
38133: PUSH
38134: LD_INT 1
38136: ST_TO_ADDR
// if array1 = array2 then
38137: LD_VAR 0 1
38141: PUSH
38142: LD_VAR 0 2
38146: EQUAL
38147: IFFALSE 38207
// begin for i = 1 to array1 do
38149: LD_ADDR_VAR 0 4
38153: PUSH
38154: DOUBLE
38155: LD_INT 1
38157: DEC
38158: ST_TO_ADDR
38159: LD_VAR 0 1
38163: PUSH
38164: FOR_TO
38165: IFFALSE 38203
// if array1 [ i ] <> array2 [ i ] then
38167: LD_VAR 0 1
38171: PUSH
38172: LD_VAR 0 4
38176: ARRAY
38177: PUSH
38178: LD_VAR 0 2
38182: PUSH
38183: LD_VAR 0 4
38187: ARRAY
38188: NONEQUAL
38189: IFFALSE 38201
// begin result := false ;
38191: LD_ADDR_VAR 0 3
38195: PUSH
38196: LD_INT 0
38198: ST_TO_ADDR
// break ;
38199: GO 38203
// end ;
38201: GO 38164
38203: POP
38204: POP
// end else
38205: GO 38215
// result := false ;
38207: LD_ADDR_VAR 0 3
38211: PUSH
38212: LD_INT 0
38214: ST_TO_ADDR
// end ;
38215: LD_VAR 0 3
38219: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38220: LD_INT 0
38222: PPUSH
38223: PPUSH
// if not array1 or not array2 then
38224: LD_VAR 0 1
38228: NOT
38229: PUSH
38230: LD_VAR 0 2
38234: NOT
38235: OR
38236: IFFALSE 38240
// exit ;
38238: GO 38304
// result := true ;
38240: LD_ADDR_VAR 0 3
38244: PUSH
38245: LD_INT 1
38247: ST_TO_ADDR
// for i = 1 to array1 do
38248: LD_ADDR_VAR 0 4
38252: PUSH
38253: DOUBLE
38254: LD_INT 1
38256: DEC
38257: ST_TO_ADDR
38258: LD_VAR 0 1
38262: PUSH
38263: FOR_TO
38264: IFFALSE 38302
// if array1 [ i ] <> array2 [ i ] then
38266: LD_VAR 0 1
38270: PUSH
38271: LD_VAR 0 4
38275: ARRAY
38276: PUSH
38277: LD_VAR 0 2
38281: PUSH
38282: LD_VAR 0 4
38286: ARRAY
38287: NONEQUAL
38288: IFFALSE 38300
// begin result := false ;
38290: LD_ADDR_VAR 0 3
38294: PUSH
38295: LD_INT 0
38297: ST_TO_ADDR
// break ;
38298: GO 38302
// end ;
38300: GO 38263
38302: POP
38303: POP
// end ;
38304: LD_VAR 0 3
38308: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38309: LD_INT 0
38311: PPUSH
38312: PPUSH
38313: PPUSH
// pom := GetBase ( fac ) ;
38314: LD_ADDR_VAR 0 5
38318: PUSH
38319: LD_VAR 0 1
38323: PPUSH
38324: CALL_OW 274
38328: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38329: LD_ADDR_VAR 0 4
38333: PUSH
38334: LD_VAR 0 2
38338: PUSH
38339: LD_INT 1
38341: ARRAY
38342: PPUSH
38343: LD_VAR 0 2
38347: PUSH
38348: LD_INT 2
38350: ARRAY
38351: PPUSH
38352: LD_VAR 0 2
38356: PUSH
38357: LD_INT 3
38359: ARRAY
38360: PPUSH
38361: LD_VAR 0 2
38365: PUSH
38366: LD_INT 4
38368: ARRAY
38369: PPUSH
38370: CALL_OW 449
38374: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38375: LD_ADDR_VAR 0 3
38379: PUSH
38380: LD_VAR 0 5
38384: PPUSH
38385: LD_INT 1
38387: PPUSH
38388: CALL_OW 275
38392: PUSH
38393: LD_VAR 0 4
38397: PUSH
38398: LD_INT 1
38400: ARRAY
38401: GREATEREQUAL
38402: PUSH
38403: LD_VAR 0 5
38407: PPUSH
38408: LD_INT 2
38410: PPUSH
38411: CALL_OW 275
38415: PUSH
38416: LD_VAR 0 4
38420: PUSH
38421: LD_INT 2
38423: ARRAY
38424: GREATEREQUAL
38425: AND
38426: PUSH
38427: LD_VAR 0 5
38431: PPUSH
38432: LD_INT 3
38434: PPUSH
38435: CALL_OW 275
38439: PUSH
38440: LD_VAR 0 4
38444: PUSH
38445: LD_INT 3
38447: ARRAY
38448: GREATEREQUAL
38449: AND
38450: ST_TO_ADDR
// end ;
38451: LD_VAR 0 3
38455: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38456: LD_INT 0
38458: PPUSH
38459: PPUSH
38460: PPUSH
38461: PPUSH
// pom := GetBase ( building ) ;
38462: LD_ADDR_VAR 0 3
38466: PUSH
38467: LD_VAR 0 1
38471: PPUSH
38472: CALL_OW 274
38476: ST_TO_ADDR
// if not pom then
38477: LD_VAR 0 3
38481: NOT
38482: IFFALSE 38486
// exit ;
38484: GO 38656
// btype := GetBType ( building ) ;
38486: LD_ADDR_VAR 0 5
38490: PUSH
38491: LD_VAR 0 1
38495: PPUSH
38496: CALL_OW 266
38500: ST_TO_ADDR
// if btype = b_armoury then
38501: LD_VAR 0 5
38505: PUSH
38506: LD_INT 4
38508: EQUAL
38509: IFFALSE 38519
// btype := b_barracks ;
38511: LD_ADDR_VAR 0 5
38515: PUSH
38516: LD_INT 5
38518: ST_TO_ADDR
// if btype = b_depot then
38519: LD_VAR 0 5
38523: PUSH
38524: LD_INT 0
38526: EQUAL
38527: IFFALSE 38537
// btype := b_warehouse ;
38529: LD_ADDR_VAR 0 5
38533: PUSH
38534: LD_INT 1
38536: ST_TO_ADDR
// if btype = b_workshop then
38537: LD_VAR 0 5
38541: PUSH
38542: LD_INT 2
38544: EQUAL
38545: IFFALSE 38555
// btype := b_factory ;
38547: LD_ADDR_VAR 0 5
38551: PUSH
38552: LD_INT 3
38554: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38555: LD_ADDR_VAR 0 4
38559: PUSH
38560: LD_VAR 0 5
38564: PPUSH
38565: LD_VAR 0 1
38569: PPUSH
38570: CALL_OW 248
38574: PPUSH
38575: CALL_OW 450
38579: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38580: LD_ADDR_VAR 0 2
38584: PUSH
38585: LD_VAR 0 3
38589: PPUSH
38590: LD_INT 1
38592: PPUSH
38593: CALL_OW 275
38597: PUSH
38598: LD_VAR 0 4
38602: PUSH
38603: LD_INT 1
38605: ARRAY
38606: GREATEREQUAL
38607: PUSH
38608: LD_VAR 0 3
38612: PPUSH
38613: LD_INT 2
38615: PPUSH
38616: CALL_OW 275
38620: PUSH
38621: LD_VAR 0 4
38625: PUSH
38626: LD_INT 2
38628: ARRAY
38629: GREATEREQUAL
38630: AND
38631: PUSH
38632: LD_VAR 0 3
38636: PPUSH
38637: LD_INT 3
38639: PPUSH
38640: CALL_OW 275
38644: PUSH
38645: LD_VAR 0 4
38649: PUSH
38650: LD_INT 3
38652: ARRAY
38653: GREATEREQUAL
38654: AND
38655: ST_TO_ADDR
// end ;
38656: LD_VAR 0 2
38660: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38661: LD_INT 0
38663: PPUSH
38664: PPUSH
38665: PPUSH
// pom := GetBase ( building ) ;
38666: LD_ADDR_VAR 0 4
38670: PUSH
38671: LD_VAR 0 1
38675: PPUSH
38676: CALL_OW 274
38680: ST_TO_ADDR
// if not pom then
38681: LD_VAR 0 4
38685: NOT
38686: IFFALSE 38690
// exit ;
38688: GO 38791
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38690: LD_ADDR_VAR 0 5
38694: PUSH
38695: LD_VAR 0 2
38699: PPUSH
38700: LD_VAR 0 1
38704: PPUSH
38705: CALL_OW 248
38709: PPUSH
38710: CALL_OW 450
38714: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38715: LD_ADDR_VAR 0 3
38719: PUSH
38720: LD_VAR 0 4
38724: PPUSH
38725: LD_INT 1
38727: PPUSH
38728: CALL_OW 275
38732: PUSH
38733: LD_VAR 0 5
38737: PUSH
38738: LD_INT 1
38740: ARRAY
38741: GREATEREQUAL
38742: PUSH
38743: LD_VAR 0 4
38747: PPUSH
38748: LD_INT 2
38750: PPUSH
38751: CALL_OW 275
38755: PUSH
38756: LD_VAR 0 5
38760: PUSH
38761: LD_INT 2
38763: ARRAY
38764: GREATEREQUAL
38765: AND
38766: PUSH
38767: LD_VAR 0 4
38771: PPUSH
38772: LD_INT 3
38774: PPUSH
38775: CALL_OW 275
38779: PUSH
38780: LD_VAR 0 5
38784: PUSH
38785: LD_INT 3
38787: ARRAY
38788: GREATEREQUAL
38789: AND
38790: ST_TO_ADDR
// end ;
38791: LD_VAR 0 3
38795: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38796: LD_INT 0
38798: PPUSH
38799: PPUSH
38800: PPUSH
38801: PPUSH
38802: PPUSH
38803: PPUSH
38804: PPUSH
38805: PPUSH
38806: PPUSH
38807: PPUSH
38808: PPUSH
// result := false ;
38809: LD_ADDR_VAR 0 8
38813: PUSH
38814: LD_INT 0
38816: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38817: LD_VAR 0 5
38821: NOT
38822: PUSH
38823: LD_VAR 0 1
38827: NOT
38828: OR
38829: PUSH
38830: LD_VAR 0 2
38834: NOT
38835: OR
38836: PUSH
38837: LD_VAR 0 3
38841: NOT
38842: OR
38843: IFFALSE 38847
// exit ;
38845: GO 39661
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38847: LD_ADDR_VAR 0 14
38851: PUSH
38852: LD_VAR 0 1
38856: PPUSH
38857: LD_VAR 0 2
38861: PPUSH
38862: LD_VAR 0 3
38866: PPUSH
38867: LD_VAR 0 4
38871: PPUSH
38872: LD_VAR 0 5
38876: PUSH
38877: LD_INT 1
38879: ARRAY
38880: PPUSH
38881: CALL_OW 248
38885: PPUSH
38886: LD_INT 0
38888: PPUSH
38889: CALL 40914 0 6
38893: ST_TO_ADDR
// if not hexes then
38894: LD_VAR 0 14
38898: NOT
38899: IFFALSE 38903
// exit ;
38901: GO 39661
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38903: LD_ADDR_VAR 0 17
38907: PUSH
38908: LD_VAR 0 5
38912: PPUSH
38913: LD_INT 22
38915: PUSH
38916: LD_VAR 0 13
38920: PPUSH
38921: CALL_OW 255
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 2
38932: PUSH
38933: LD_INT 30
38935: PUSH
38936: LD_INT 0
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 30
38945: PUSH
38946: LD_INT 1
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: LIST
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PPUSH
38962: CALL_OW 72
38966: ST_TO_ADDR
// for i = 1 to hexes do
38967: LD_ADDR_VAR 0 9
38971: PUSH
38972: DOUBLE
38973: LD_INT 1
38975: DEC
38976: ST_TO_ADDR
38977: LD_VAR 0 14
38981: PUSH
38982: FOR_TO
38983: IFFALSE 39659
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38985: LD_ADDR_VAR 0 13
38989: PUSH
38990: LD_VAR 0 14
38994: PUSH
38995: LD_VAR 0 9
38999: ARRAY
39000: PUSH
39001: LD_INT 1
39003: ARRAY
39004: PPUSH
39005: LD_VAR 0 14
39009: PUSH
39010: LD_VAR 0 9
39014: ARRAY
39015: PUSH
39016: LD_INT 2
39018: ARRAY
39019: PPUSH
39020: CALL_OW 428
39024: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39025: LD_VAR 0 14
39029: PUSH
39030: LD_VAR 0 9
39034: ARRAY
39035: PUSH
39036: LD_INT 1
39038: ARRAY
39039: PPUSH
39040: LD_VAR 0 14
39044: PUSH
39045: LD_VAR 0 9
39049: ARRAY
39050: PUSH
39051: LD_INT 2
39053: ARRAY
39054: PPUSH
39055: CALL_OW 351
39059: PUSH
39060: LD_VAR 0 14
39064: PUSH
39065: LD_VAR 0 9
39069: ARRAY
39070: PUSH
39071: LD_INT 1
39073: ARRAY
39074: PPUSH
39075: LD_VAR 0 14
39079: PUSH
39080: LD_VAR 0 9
39084: ARRAY
39085: PUSH
39086: LD_INT 2
39088: ARRAY
39089: PPUSH
39090: CALL_OW 488
39094: NOT
39095: OR
39096: PUSH
39097: LD_VAR 0 13
39101: PPUSH
39102: CALL_OW 247
39106: PUSH
39107: LD_INT 3
39109: EQUAL
39110: OR
39111: IFFALSE 39117
// exit ;
39113: POP
39114: POP
39115: GO 39661
// if not tmp then
39117: LD_VAR 0 13
39121: NOT
39122: IFFALSE 39126
// continue ;
39124: GO 38982
// result := true ;
39126: LD_ADDR_VAR 0 8
39130: PUSH
39131: LD_INT 1
39133: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39134: LD_VAR 0 6
39138: PUSH
39139: LD_VAR 0 13
39143: PPUSH
39144: CALL_OW 247
39148: PUSH
39149: LD_INT 2
39151: EQUAL
39152: AND
39153: PUSH
39154: LD_VAR 0 13
39158: PPUSH
39159: CALL_OW 263
39163: PUSH
39164: LD_INT 1
39166: EQUAL
39167: AND
39168: IFFALSE 39332
// begin if IsDrivenBy ( tmp ) then
39170: LD_VAR 0 13
39174: PPUSH
39175: CALL_OW 311
39179: IFFALSE 39183
// continue ;
39181: GO 38982
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39183: LD_VAR 0 6
39187: PPUSH
39188: LD_INT 3
39190: PUSH
39191: LD_INT 60
39193: PUSH
39194: EMPTY
39195: LIST
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 3
39203: PUSH
39204: LD_INT 55
39206: PUSH
39207: EMPTY
39208: LIST
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PPUSH
39218: CALL_OW 72
39222: IFFALSE 39330
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39224: LD_ADDR_VAR 0 18
39228: PUSH
39229: LD_VAR 0 6
39233: PPUSH
39234: LD_INT 3
39236: PUSH
39237: LD_INT 60
39239: PUSH
39240: EMPTY
39241: LIST
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 3
39249: PUSH
39250: LD_INT 55
39252: PUSH
39253: EMPTY
39254: LIST
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PPUSH
39264: CALL_OW 72
39268: PUSH
39269: LD_INT 1
39271: ARRAY
39272: ST_TO_ADDR
// if IsInUnit ( driver ) then
39273: LD_VAR 0 18
39277: PPUSH
39278: CALL_OW 310
39282: IFFALSE 39293
// ComExit ( driver ) ;
39284: LD_VAR 0 18
39288: PPUSH
39289: CALL 64695 0 1
// AddComEnterUnit ( driver , tmp ) ;
39293: LD_VAR 0 18
39297: PPUSH
39298: LD_VAR 0 13
39302: PPUSH
39303: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39307: LD_VAR 0 18
39311: PPUSH
39312: LD_VAR 0 7
39316: PPUSH
39317: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39321: LD_VAR 0 18
39325: PPUSH
39326: CALL_OW 181
// end ; continue ;
39330: GO 38982
// end ; if not cleaners or not tmp in cleaners then
39332: LD_VAR 0 6
39336: NOT
39337: PUSH
39338: LD_VAR 0 13
39342: PUSH
39343: LD_VAR 0 6
39347: IN
39348: NOT
39349: OR
39350: IFFALSE 39657
// begin if dep then
39352: LD_VAR 0 17
39356: IFFALSE 39492
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39358: LD_ADDR_VAR 0 16
39362: PUSH
39363: LD_VAR 0 17
39367: PUSH
39368: LD_INT 1
39370: ARRAY
39371: PPUSH
39372: CALL_OW 250
39376: PPUSH
39377: LD_VAR 0 17
39381: PUSH
39382: LD_INT 1
39384: ARRAY
39385: PPUSH
39386: CALL_OW 254
39390: PPUSH
39391: LD_INT 5
39393: PPUSH
39394: CALL_OW 272
39398: PUSH
39399: LD_VAR 0 17
39403: PUSH
39404: LD_INT 1
39406: ARRAY
39407: PPUSH
39408: CALL_OW 251
39412: PPUSH
39413: LD_VAR 0 17
39417: PUSH
39418: LD_INT 1
39420: ARRAY
39421: PPUSH
39422: CALL_OW 254
39426: PPUSH
39427: LD_INT 5
39429: PPUSH
39430: CALL_OW 273
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39439: LD_VAR 0 16
39443: PUSH
39444: LD_INT 1
39446: ARRAY
39447: PPUSH
39448: LD_VAR 0 16
39452: PUSH
39453: LD_INT 2
39455: ARRAY
39456: PPUSH
39457: CALL_OW 488
39461: IFFALSE 39492
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39463: LD_VAR 0 13
39467: PPUSH
39468: LD_VAR 0 16
39472: PUSH
39473: LD_INT 1
39475: ARRAY
39476: PPUSH
39477: LD_VAR 0 16
39481: PUSH
39482: LD_INT 2
39484: ARRAY
39485: PPUSH
39486: CALL_OW 111
// continue ;
39490: GO 38982
// end ; end ; r := GetDir ( tmp ) ;
39492: LD_ADDR_VAR 0 15
39496: PUSH
39497: LD_VAR 0 13
39501: PPUSH
39502: CALL_OW 254
39506: ST_TO_ADDR
// if r = 5 then
39507: LD_VAR 0 15
39511: PUSH
39512: LD_INT 5
39514: EQUAL
39515: IFFALSE 39525
// r := 0 ;
39517: LD_ADDR_VAR 0 15
39521: PUSH
39522: LD_INT 0
39524: ST_TO_ADDR
// for j = r to 5 do
39525: LD_ADDR_VAR 0 10
39529: PUSH
39530: DOUBLE
39531: LD_VAR 0 15
39535: DEC
39536: ST_TO_ADDR
39537: LD_INT 5
39539: PUSH
39540: FOR_TO
39541: IFFALSE 39655
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39543: LD_ADDR_VAR 0 11
39547: PUSH
39548: LD_VAR 0 13
39552: PPUSH
39553: CALL_OW 250
39557: PPUSH
39558: LD_VAR 0 10
39562: PPUSH
39563: LD_INT 2
39565: PPUSH
39566: CALL_OW 272
39570: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39571: LD_ADDR_VAR 0 12
39575: PUSH
39576: LD_VAR 0 13
39580: PPUSH
39581: CALL_OW 251
39585: PPUSH
39586: LD_VAR 0 10
39590: PPUSH
39591: LD_INT 2
39593: PPUSH
39594: CALL_OW 273
39598: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39599: LD_VAR 0 11
39603: PPUSH
39604: LD_VAR 0 12
39608: PPUSH
39609: CALL_OW 488
39613: PUSH
39614: LD_VAR 0 11
39618: PPUSH
39619: LD_VAR 0 12
39623: PPUSH
39624: CALL_OW 428
39628: NOT
39629: AND
39630: IFFALSE 39653
// begin ComMoveXY ( tmp , _x , _y ) ;
39632: LD_VAR 0 13
39636: PPUSH
39637: LD_VAR 0 11
39641: PPUSH
39642: LD_VAR 0 12
39646: PPUSH
39647: CALL_OW 111
// break ;
39651: GO 39655
// end ; end ;
39653: GO 39540
39655: POP
39656: POP
// end ; end ;
39657: GO 38982
39659: POP
39660: POP
// end ;
39661: LD_VAR 0 8
39665: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39666: LD_INT 0
39668: PPUSH
// result := true ;
39669: LD_ADDR_VAR 0 3
39673: PUSH
39674: LD_INT 1
39676: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39677: LD_VAR 0 2
39681: PUSH
39682: LD_INT 24
39684: DOUBLE
39685: EQUAL
39686: IFTRUE 39696
39688: LD_INT 33
39690: DOUBLE
39691: EQUAL
39692: IFTRUE 39696
39694: GO 39721
39696: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39697: LD_ADDR_VAR 0 3
39701: PUSH
39702: LD_INT 32
39704: PPUSH
39705: LD_VAR 0 1
39709: PPUSH
39710: CALL_OW 321
39714: PUSH
39715: LD_INT 2
39717: EQUAL
39718: ST_TO_ADDR
39719: GO 40037
39721: LD_INT 20
39723: DOUBLE
39724: EQUAL
39725: IFTRUE 39729
39727: GO 39754
39729: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39730: LD_ADDR_VAR 0 3
39734: PUSH
39735: LD_INT 6
39737: PPUSH
39738: LD_VAR 0 1
39742: PPUSH
39743: CALL_OW 321
39747: PUSH
39748: LD_INT 2
39750: EQUAL
39751: ST_TO_ADDR
39752: GO 40037
39754: LD_INT 22
39756: DOUBLE
39757: EQUAL
39758: IFTRUE 39768
39760: LD_INT 36
39762: DOUBLE
39763: EQUAL
39764: IFTRUE 39768
39766: GO 39793
39768: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39769: LD_ADDR_VAR 0 3
39773: PUSH
39774: LD_INT 15
39776: PPUSH
39777: LD_VAR 0 1
39781: PPUSH
39782: CALL_OW 321
39786: PUSH
39787: LD_INT 2
39789: EQUAL
39790: ST_TO_ADDR
39791: GO 40037
39793: LD_INT 30
39795: DOUBLE
39796: EQUAL
39797: IFTRUE 39801
39799: GO 39826
39801: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39802: LD_ADDR_VAR 0 3
39806: PUSH
39807: LD_INT 20
39809: PPUSH
39810: LD_VAR 0 1
39814: PPUSH
39815: CALL_OW 321
39819: PUSH
39820: LD_INT 2
39822: EQUAL
39823: ST_TO_ADDR
39824: GO 40037
39826: LD_INT 28
39828: DOUBLE
39829: EQUAL
39830: IFTRUE 39840
39832: LD_INT 21
39834: DOUBLE
39835: EQUAL
39836: IFTRUE 39840
39838: GO 39865
39840: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39841: LD_ADDR_VAR 0 3
39845: PUSH
39846: LD_INT 21
39848: PPUSH
39849: LD_VAR 0 1
39853: PPUSH
39854: CALL_OW 321
39858: PUSH
39859: LD_INT 2
39861: EQUAL
39862: ST_TO_ADDR
39863: GO 40037
39865: LD_INT 16
39867: DOUBLE
39868: EQUAL
39869: IFTRUE 39873
39871: GO 39898
39873: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39874: LD_ADDR_VAR 0 3
39878: PUSH
39879: LD_INT 84
39881: PPUSH
39882: LD_VAR 0 1
39886: PPUSH
39887: CALL_OW 321
39891: PUSH
39892: LD_INT 2
39894: EQUAL
39895: ST_TO_ADDR
39896: GO 40037
39898: LD_INT 19
39900: DOUBLE
39901: EQUAL
39902: IFTRUE 39912
39904: LD_INT 23
39906: DOUBLE
39907: EQUAL
39908: IFTRUE 39912
39910: GO 39937
39912: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39913: LD_ADDR_VAR 0 3
39917: PUSH
39918: LD_INT 83
39920: PPUSH
39921: LD_VAR 0 1
39925: PPUSH
39926: CALL_OW 321
39930: PUSH
39931: LD_INT 2
39933: EQUAL
39934: ST_TO_ADDR
39935: GO 40037
39937: LD_INT 17
39939: DOUBLE
39940: EQUAL
39941: IFTRUE 39945
39943: GO 39970
39945: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39946: LD_ADDR_VAR 0 3
39950: PUSH
39951: LD_INT 39
39953: PPUSH
39954: LD_VAR 0 1
39958: PPUSH
39959: CALL_OW 321
39963: PUSH
39964: LD_INT 2
39966: EQUAL
39967: ST_TO_ADDR
39968: GO 40037
39970: LD_INT 18
39972: DOUBLE
39973: EQUAL
39974: IFTRUE 39978
39976: GO 40003
39978: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39979: LD_ADDR_VAR 0 3
39983: PUSH
39984: LD_INT 40
39986: PPUSH
39987: LD_VAR 0 1
39991: PPUSH
39992: CALL_OW 321
39996: PUSH
39997: LD_INT 2
39999: EQUAL
40000: ST_TO_ADDR
40001: GO 40037
40003: LD_INT 27
40005: DOUBLE
40006: EQUAL
40007: IFTRUE 40011
40009: GO 40036
40011: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40012: LD_ADDR_VAR 0 3
40016: PUSH
40017: LD_INT 35
40019: PPUSH
40020: LD_VAR 0 1
40024: PPUSH
40025: CALL_OW 321
40029: PUSH
40030: LD_INT 2
40032: EQUAL
40033: ST_TO_ADDR
40034: GO 40037
40036: POP
// end ;
40037: LD_VAR 0 3
40041: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40042: LD_INT 0
40044: PPUSH
40045: PPUSH
40046: PPUSH
40047: PPUSH
40048: PPUSH
40049: PPUSH
40050: PPUSH
40051: PPUSH
40052: PPUSH
40053: PPUSH
40054: PPUSH
// result := false ;
40055: LD_ADDR_VAR 0 6
40059: PUSH
40060: LD_INT 0
40062: ST_TO_ADDR
// if btype = b_depot then
40063: LD_VAR 0 2
40067: PUSH
40068: LD_INT 0
40070: EQUAL
40071: IFFALSE 40083
// begin result := true ;
40073: LD_ADDR_VAR 0 6
40077: PUSH
40078: LD_INT 1
40080: ST_TO_ADDR
// exit ;
40081: GO 40909
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40083: LD_VAR 0 1
40087: NOT
40088: PUSH
40089: LD_VAR 0 1
40093: PPUSH
40094: CALL_OW 266
40098: PUSH
40099: LD_INT 0
40101: PUSH
40102: LD_INT 1
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: IN
40109: NOT
40110: OR
40111: PUSH
40112: LD_VAR 0 2
40116: NOT
40117: OR
40118: PUSH
40119: LD_VAR 0 5
40123: PUSH
40124: LD_INT 0
40126: PUSH
40127: LD_INT 1
40129: PUSH
40130: LD_INT 2
40132: PUSH
40133: LD_INT 3
40135: PUSH
40136: LD_INT 4
40138: PUSH
40139: LD_INT 5
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: IN
40150: NOT
40151: OR
40152: PUSH
40153: LD_VAR 0 3
40157: PPUSH
40158: LD_VAR 0 4
40162: PPUSH
40163: CALL_OW 488
40167: NOT
40168: OR
40169: IFFALSE 40173
// exit ;
40171: GO 40909
// side := GetSide ( depot ) ;
40173: LD_ADDR_VAR 0 9
40177: PUSH
40178: LD_VAR 0 1
40182: PPUSH
40183: CALL_OW 255
40187: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40188: LD_VAR 0 9
40192: PPUSH
40193: LD_VAR 0 2
40197: PPUSH
40198: CALL 39666 0 2
40202: NOT
40203: IFFALSE 40207
// exit ;
40205: GO 40909
// pom := GetBase ( depot ) ;
40207: LD_ADDR_VAR 0 10
40211: PUSH
40212: LD_VAR 0 1
40216: PPUSH
40217: CALL_OW 274
40221: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40222: LD_ADDR_VAR 0 11
40226: PUSH
40227: LD_VAR 0 2
40231: PPUSH
40232: LD_VAR 0 1
40236: PPUSH
40237: CALL_OW 248
40241: PPUSH
40242: CALL_OW 450
40246: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40247: LD_VAR 0 10
40251: PPUSH
40252: LD_INT 1
40254: PPUSH
40255: CALL_OW 275
40259: PUSH
40260: LD_VAR 0 11
40264: PUSH
40265: LD_INT 1
40267: ARRAY
40268: GREATEREQUAL
40269: PUSH
40270: LD_VAR 0 10
40274: PPUSH
40275: LD_INT 2
40277: PPUSH
40278: CALL_OW 275
40282: PUSH
40283: LD_VAR 0 11
40287: PUSH
40288: LD_INT 2
40290: ARRAY
40291: GREATEREQUAL
40292: AND
40293: PUSH
40294: LD_VAR 0 10
40298: PPUSH
40299: LD_INT 3
40301: PPUSH
40302: CALL_OW 275
40306: PUSH
40307: LD_VAR 0 11
40311: PUSH
40312: LD_INT 3
40314: ARRAY
40315: GREATEREQUAL
40316: AND
40317: NOT
40318: IFFALSE 40322
// exit ;
40320: GO 40909
// if GetBType ( depot ) = b_depot then
40322: LD_VAR 0 1
40326: PPUSH
40327: CALL_OW 266
40331: PUSH
40332: LD_INT 0
40334: EQUAL
40335: IFFALSE 40347
// dist := 28 else
40337: LD_ADDR_VAR 0 14
40341: PUSH
40342: LD_INT 28
40344: ST_TO_ADDR
40345: GO 40355
// dist := 36 ;
40347: LD_ADDR_VAR 0 14
40351: PUSH
40352: LD_INT 36
40354: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40355: LD_VAR 0 1
40359: PPUSH
40360: LD_VAR 0 3
40364: PPUSH
40365: LD_VAR 0 4
40369: PPUSH
40370: CALL_OW 297
40374: PUSH
40375: LD_VAR 0 14
40379: GREATER
40380: IFFALSE 40384
// exit ;
40382: GO 40909
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40384: LD_ADDR_VAR 0 12
40388: PUSH
40389: LD_VAR 0 2
40393: PPUSH
40394: LD_VAR 0 3
40398: PPUSH
40399: LD_VAR 0 4
40403: PPUSH
40404: LD_VAR 0 5
40408: PPUSH
40409: LD_VAR 0 1
40413: PPUSH
40414: CALL_OW 248
40418: PPUSH
40419: LD_INT 0
40421: PPUSH
40422: CALL 40914 0 6
40426: ST_TO_ADDR
// if not hexes then
40427: LD_VAR 0 12
40431: NOT
40432: IFFALSE 40436
// exit ;
40434: GO 40909
// hex := GetHexInfo ( x , y ) ;
40436: LD_ADDR_VAR 0 15
40440: PUSH
40441: LD_VAR 0 3
40445: PPUSH
40446: LD_VAR 0 4
40450: PPUSH
40451: CALL_OW 546
40455: ST_TO_ADDR
// if hex [ 1 ] then
40456: LD_VAR 0 15
40460: PUSH
40461: LD_INT 1
40463: ARRAY
40464: IFFALSE 40468
// exit ;
40466: GO 40909
// height := hex [ 2 ] ;
40468: LD_ADDR_VAR 0 13
40472: PUSH
40473: LD_VAR 0 15
40477: PUSH
40478: LD_INT 2
40480: ARRAY
40481: ST_TO_ADDR
// for i = 1 to hexes do
40482: LD_ADDR_VAR 0 7
40486: PUSH
40487: DOUBLE
40488: LD_INT 1
40490: DEC
40491: ST_TO_ADDR
40492: LD_VAR 0 12
40496: PUSH
40497: FOR_TO
40498: IFFALSE 40828
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40500: LD_VAR 0 12
40504: PUSH
40505: LD_VAR 0 7
40509: ARRAY
40510: PUSH
40511: LD_INT 1
40513: ARRAY
40514: PPUSH
40515: LD_VAR 0 12
40519: PUSH
40520: LD_VAR 0 7
40524: ARRAY
40525: PUSH
40526: LD_INT 2
40528: ARRAY
40529: PPUSH
40530: CALL_OW 488
40534: NOT
40535: PUSH
40536: LD_VAR 0 12
40540: PUSH
40541: LD_VAR 0 7
40545: ARRAY
40546: PUSH
40547: LD_INT 1
40549: ARRAY
40550: PPUSH
40551: LD_VAR 0 12
40555: PUSH
40556: LD_VAR 0 7
40560: ARRAY
40561: PUSH
40562: LD_INT 2
40564: ARRAY
40565: PPUSH
40566: CALL_OW 428
40570: PUSH
40571: LD_INT 0
40573: GREATER
40574: OR
40575: PUSH
40576: LD_VAR 0 12
40580: PUSH
40581: LD_VAR 0 7
40585: ARRAY
40586: PUSH
40587: LD_INT 1
40589: ARRAY
40590: PPUSH
40591: LD_VAR 0 12
40595: PUSH
40596: LD_VAR 0 7
40600: ARRAY
40601: PUSH
40602: LD_INT 2
40604: ARRAY
40605: PPUSH
40606: CALL_OW 351
40610: OR
40611: IFFALSE 40617
// exit ;
40613: POP
40614: POP
40615: GO 40909
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40617: LD_ADDR_VAR 0 8
40621: PUSH
40622: LD_VAR 0 12
40626: PUSH
40627: LD_VAR 0 7
40631: ARRAY
40632: PUSH
40633: LD_INT 1
40635: ARRAY
40636: PPUSH
40637: LD_VAR 0 12
40641: PUSH
40642: LD_VAR 0 7
40646: ARRAY
40647: PUSH
40648: LD_INT 2
40650: ARRAY
40651: PPUSH
40652: CALL_OW 546
40656: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40657: LD_VAR 0 8
40661: PUSH
40662: LD_INT 1
40664: ARRAY
40665: PUSH
40666: LD_VAR 0 8
40670: PUSH
40671: LD_INT 2
40673: ARRAY
40674: PUSH
40675: LD_VAR 0 13
40679: PUSH
40680: LD_INT 2
40682: PLUS
40683: GREATER
40684: OR
40685: PUSH
40686: LD_VAR 0 8
40690: PUSH
40691: LD_INT 2
40693: ARRAY
40694: PUSH
40695: LD_VAR 0 13
40699: PUSH
40700: LD_INT 2
40702: MINUS
40703: LESS
40704: OR
40705: PUSH
40706: LD_VAR 0 8
40710: PUSH
40711: LD_INT 3
40713: ARRAY
40714: PUSH
40715: LD_INT 0
40717: PUSH
40718: LD_INT 8
40720: PUSH
40721: LD_INT 9
40723: PUSH
40724: LD_INT 10
40726: PUSH
40727: LD_INT 11
40729: PUSH
40730: LD_INT 12
40732: PUSH
40733: LD_INT 13
40735: PUSH
40736: LD_INT 16
40738: PUSH
40739: LD_INT 17
40741: PUSH
40742: LD_INT 18
40744: PUSH
40745: LD_INT 19
40747: PUSH
40748: LD_INT 20
40750: PUSH
40751: LD_INT 21
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: IN
40769: NOT
40770: OR
40771: PUSH
40772: LD_VAR 0 8
40776: PUSH
40777: LD_INT 5
40779: ARRAY
40780: NOT
40781: OR
40782: PUSH
40783: LD_VAR 0 8
40787: PUSH
40788: LD_INT 6
40790: ARRAY
40791: PUSH
40792: LD_INT 1
40794: PUSH
40795: LD_INT 2
40797: PUSH
40798: LD_INT 7
40800: PUSH
40801: LD_INT 9
40803: PUSH
40804: LD_INT 10
40806: PUSH
40807: LD_INT 11
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: IN
40818: NOT
40819: OR
40820: IFFALSE 40826
// exit ;
40822: POP
40823: POP
40824: GO 40909
// end ;
40826: GO 40497
40828: POP
40829: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40830: LD_VAR 0 9
40834: PPUSH
40835: LD_VAR 0 3
40839: PPUSH
40840: LD_VAR 0 4
40844: PPUSH
40845: LD_INT 20
40847: PPUSH
40848: CALL 32832 0 4
40852: PUSH
40853: LD_INT 4
40855: ARRAY
40856: IFFALSE 40860
// exit ;
40858: GO 40909
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40860: LD_VAR 0 2
40864: PUSH
40865: LD_INT 29
40867: PUSH
40868: LD_INT 30
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: IN
40875: PUSH
40876: LD_VAR 0 3
40880: PPUSH
40881: LD_VAR 0 4
40885: PPUSH
40886: LD_VAR 0 9
40890: PPUSH
40891: CALL_OW 440
40895: NOT
40896: AND
40897: IFFALSE 40901
// exit ;
40899: GO 40909
// result := true ;
40901: LD_ADDR_VAR 0 6
40905: PUSH
40906: LD_INT 1
40908: ST_TO_ADDR
// end ;
40909: LD_VAR 0 6
40913: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40914: LD_INT 0
40916: PPUSH
40917: PPUSH
40918: PPUSH
40919: PPUSH
40920: PPUSH
40921: PPUSH
40922: PPUSH
40923: PPUSH
40924: PPUSH
40925: PPUSH
40926: PPUSH
40927: PPUSH
40928: PPUSH
40929: PPUSH
40930: PPUSH
40931: PPUSH
40932: PPUSH
40933: PPUSH
40934: PPUSH
40935: PPUSH
40936: PPUSH
40937: PPUSH
40938: PPUSH
40939: PPUSH
40940: PPUSH
40941: PPUSH
40942: PPUSH
40943: PPUSH
40944: PPUSH
40945: PPUSH
40946: PPUSH
40947: PPUSH
40948: PPUSH
40949: PPUSH
40950: PPUSH
40951: PPUSH
40952: PPUSH
40953: PPUSH
40954: PPUSH
40955: PPUSH
40956: PPUSH
40957: PPUSH
40958: PPUSH
40959: PPUSH
40960: PPUSH
40961: PPUSH
40962: PPUSH
40963: PPUSH
40964: PPUSH
40965: PPUSH
40966: PPUSH
40967: PPUSH
40968: PPUSH
40969: PPUSH
40970: PPUSH
40971: PPUSH
40972: PPUSH
40973: PPUSH
// result = [ ] ;
40974: LD_ADDR_VAR 0 7
40978: PUSH
40979: EMPTY
40980: ST_TO_ADDR
// temp_list = [ ] ;
40981: LD_ADDR_VAR 0 9
40985: PUSH
40986: EMPTY
40987: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40988: LD_VAR 0 4
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: LD_INT 1
40998: PUSH
40999: LD_INT 2
41001: PUSH
41002: LD_INT 3
41004: PUSH
41005: LD_INT 4
41007: PUSH
41008: LD_INT 5
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: IN
41019: NOT
41020: PUSH
41021: LD_VAR 0 1
41025: PUSH
41026: LD_INT 0
41028: PUSH
41029: LD_INT 1
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: IN
41036: PUSH
41037: LD_VAR 0 5
41041: PUSH
41042: LD_INT 1
41044: PUSH
41045: LD_INT 2
41047: PUSH
41048: LD_INT 3
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: LIST
41055: IN
41056: NOT
41057: AND
41058: OR
41059: IFFALSE 41063
// exit ;
41061: GO 59454
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41063: LD_VAR 0 1
41067: PUSH
41068: LD_INT 6
41070: PUSH
41071: LD_INT 7
41073: PUSH
41074: LD_INT 8
41076: PUSH
41077: LD_INT 13
41079: PUSH
41080: LD_INT 12
41082: PUSH
41083: LD_INT 15
41085: PUSH
41086: LD_INT 11
41088: PUSH
41089: LD_INT 14
41091: PUSH
41092: LD_INT 10
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: IN
41106: IFFALSE 41116
// btype = b_lab ;
41108: LD_ADDR_VAR 0 1
41112: PUSH
41113: LD_INT 6
41115: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41116: LD_VAR 0 6
41120: PUSH
41121: LD_INT 0
41123: PUSH
41124: LD_INT 1
41126: PUSH
41127: LD_INT 2
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: LIST
41134: IN
41135: NOT
41136: PUSH
41137: LD_VAR 0 1
41141: PUSH
41142: LD_INT 0
41144: PUSH
41145: LD_INT 1
41147: PUSH
41148: LD_INT 2
41150: PUSH
41151: LD_INT 3
41153: PUSH
41154: LD_INT 6
41156: PUSH
41157: LD_INT 36
41159: PUSH
41160: LD_INT 4
41162: PUSH
41163: LD_INT 5
41165: PUSH
41166: LD_INT 31
41168: PUSH
41169: LD_INT 32
41171: PUSH
41172: LD_INT 33
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: IN
41188: NOT
41189: PUSH
41190: LD_VAR 0 6
41194: PUSH
41195: LD_INT 1
41197: EQUAL
41198: AND
41199: OR
41200: PUSH
41201: LD_VAR 0 1
41205: PUSH
41206: LD_INT 2
41208: PUSH
41209: LD_INT 3
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: IN
41216: NOT
41217: PUSH
41218: LD_VAR 0 6
41222: PUSH
41223: LD_INT 2
41225: EQUAL
41226: AND
41227: OR
41228: IFFALSE 41238
// mode = 0 ;
41230: LD_ADDR_VAR 0 6
41234: PUSH
41235: LD_INT 0
41237: ST_TO_ADDR
// case mode of 0 :
41238: LD_VAR 0 6
41242: PUSH
41243: LD_INT 0
41245: DOUBLE
41246: EQUAL
41247: IFTRUE 41251
41249: GO 52704
41251: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41252: LD_ADDR_VAR 0 11
41256: PUSH
41257: LD_INT 0
41259: PUSH
41260: LD_INT 0
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 0
41269: PUSH
41270: LD_INT 1
41272: NEG
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 1
41280: PUSH
41281: LD_INT 0
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 1
41290: PUSH
41291: LD_INT 1
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 0
41300: PUSH
41301: LD_INT 1
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 1
41310: NEG
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 1
41321: NEG
41322: PUSH
41323: LD_INT 1
41325: NEG
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 1
41333: NEG
41334: PUSH
41335: LD_INT 2
41337: NEG
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: LD_INT 0
41345: PUSH
41346: LD_INT 2
41348: NEG
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 1
41356: PUSH
41357: LD_INT 1
41359: NEG
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 1
41367: PUSH
41368: LD_INT 2
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 0
41377: PUSH
41378: LD_INT 2
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 1
41387: NEG
41388: PUSH
41389: LD_INT 1
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 1
41398: PUSH
41399: LD_INT 3
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 0
41408: PUSH
41409: LD_INT 3
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 1
41418: NEG
41419: PUSH
41420: LD_INT 2
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41445: LD_ADDR_VAR 0 12
41449: PUSH
41450: LD_INT 0
41452: PUSH
41453: LD_INT 0
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 0
41462: PUSH
41463: LD_INT 1
41465: NEG
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 1
41473: PUSH
41474: LD_INT 0
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 1
41483: PUSH
41484: LD_INT 1
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 0
41493: PUSH
41494: LD_INT 1
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 1
41503: NEG
41504: PUSH
41505: LD_INT 0
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 1
41514: NEG
41515: PUSH
41516: LD_INT 1
41518: NEG
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 1
41526: PUSH
41527: LD_INT 1
41529: NEG
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 2
41537: PUSH
41538: LD_INT 0
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 2
41547: PUSH
41548: LD_INT 1
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 1
41557: NEG
41558: PUSH
41559: LD_INT 1
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 2
41568: NEG
41569: PUSH
41570: LD_INT 0
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 2
41579: NEG
41580: PUSH
41581: LD_INT 1
41583: NEG
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 2
41591: NEG
41592: PUSH
41593: LD_INT 1
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 3
41602: NEG
41603: PUSH
41604: LD_INT 0
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 3
41613: NEG
41614: PUSH
41615: LD_INT 1
41617: NEG
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41641: LD_ADDR_VAR 0 13
41645: PUSH
41646: LD_INT 0
41648: PUSH
41649: LD_INT 0
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 0
41658: PUSH
41659: LD_INT 1
41661: NEG
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 1
41669: PUSH
41670: LD_INT 0
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 1
41679: PUSH
41680: LD_INT 1
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 0
41689: PUSH
41690: LD_INT 1
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 1
41699: NEG
41700: PUSH
41701: LD_INT 0
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 1
41710: NEG
41711: PUSH
41712: LD_INT 1
41714: NEG
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 1
41722: NEG
41723: PUSH
41724: LD_INT 2
41726: NEG
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 2
41734: PUSH
41735: LD_INT 1
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 2
41744: PUSH
41745: LD_INT 2
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 1
41754: PUSH
41755: LD_INT 2
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 2
41764: NEG
41765: PUSH
41766: LD_INT 1
41768: NEG
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 2
41776: NEG
41777: PUSH
41778: LD_INT 2
41780: NEG
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 2
41788: NEG
41789: PUSH
41790: LD_INT 3
41792: NEG
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 3
41800: NEG
41801: PUSH
41802: LD_INT 2
41804: NEG
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 3
41812: NEG
41813: PUSH
41814: LD_INT 3
41816: NEG
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41840: LD_ADDR_VAR 0 14
41844: PUSH
41845: LD_INT 0
41847: PUSH
41848: LD_INT 0
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 0
41857: PUSH
41858: LD_INT 1
41860: NEG
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 1
41868: PUSH
41869: LD_INT 0
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 1
41878: PUSH
41879: LD_INT 1
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 0
41888: PUSH
41889: LD_INT 1
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 1
41898: NEG
41899: PUSH
41900: LD_INT 0
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 1
41909: NEG
41910: PUSH
41911: LD_INT 1
41913: NEG
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 1
41921: NEG
41922: PUSH
41923: LD_INT 2
41925: NEG
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 0
41933: PUSH
41934: LD_INT 2
41936: NEG
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 1
41944: PUSH
41945: LD_INT 1
41947: NEG
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 1
41955: PUSH
41956: LD_INT 2
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 0
41965: PUSH
41966: LD_INT 2
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 1
41975: NEG
41976: PUSH
41977: LD_INT 1
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 1
41986: NEG
41987: PUSH
41988: LD_INT 3
41990: NEG
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 0
41998: PUSH
41999: LD_INT 3
42001: NEG
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 1
42009: PUSH
42010: LD_INT 2
42012: NEG
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42036: LD_ADDR_VAR 0 15
42040: PUSH
42041: LD_INT 0
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 0
42053: PUSH
42054: LD_INT 1
42056: NEG
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 1
42064: PUSH
42065: LD_INT 0
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 1
42074: PUSH
42075: LD_INT 1
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 0
42084: PUSH
42085: LD_INT 1
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 1
42094: NEG
42095: PUSH
42096: LD_INT 0
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 1
42105: NEG
42106: PUSH
42107: LD_INT 1
42109: NEG
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 1
42117: PUSH
42118: LD_INT 1
42120: NEG
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 2
42128: PUSH
42129: LD_INT 0
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 2
42138: PUSH
42139: LD_INT 1
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 1
42148: NEG
42149: PUSH
42150: LD_INT 1
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 2
42159: NEG
42160: PUSH
42161: LD_INT 0
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 2
42170: NEG
42171: PUSH
42172: LD_INT 1
42174: NEG
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 2
42182: PUSH
42183: LD_INT 1
42185: NEG
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 3
42193: PUSH
42194: LD_INT 0
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 3
42203: PUSH
42204: LD_INT 1
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42229: LD_ADDR_VAR 0 16
42233: PUSH
42234: LD_INT 0
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 0
42246: PUSH
42247: LD_INT 1
42249: NEG
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 1
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 1
42267: PUSH
42268: LD_INT 1
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 0
42277: PUSH
42278: LD_INT 1
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 1
42287: NEG
42288: PUSH
42289: LD_INT 0
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 1
42298: NEG
42299: PUSH
42300: LD_INT 1
42302: NEG
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 1
42310: NEG
42311: PUSH
42312: LD_INT 2
42314: NEG
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 2
42322: PUSH
42323: LD_INT 1
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 2
42332: PUSH
42333: LD_INT 2
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 1
42342: PUSH
42343: LD_INT 2
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 2
42352: NEG
42353: PUSH
42354: LD_INT 1
42356: NEG
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 2
42364: NEG
42365: PUSH
42366: LD_INT 2
42368: NEG
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 3
42376: PUSH
42377: LD_INT 2
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 3
42386: PUSH
42387: LD_INT 3
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 2
42396: PUSH
42397: LD_INT 3
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42422: LD_ADDR_VAR 0 17
42426: PUSH
42427: LD_INT 0
42429: PUSH
42430: LD_INT 0
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 0
42439: PUSH
42440: LD_INT 1
42442: NEG
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 1
42450: PUSH
42451: LD_INT 0
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 1
42460: PUSH
42461: LD_INT 1
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: LD_INT 1
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 1
42480: NEG
42481: PUSH
42482: LD_INT 0
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 1
42491: NEG
42492: PUSH
42493: LD_INT 1
42495: NEG
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 1
42503: NEG
42504: PUSH
42505: LD_INT 2
42507: NEG
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: LD_INT 2
42518: NEG
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 1
42526: PUSH
42527: LD_INT 1
42529: NEG
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 2
42537: PUSH
42538: LD_INT 0
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 2
42547: PUSH
42548: LD_INT 1
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 2
42557: PUSH
42558: LD_INT 2
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 1
42567: PUSH
42568: LD_INT 2
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 0
42577: PUSH
42578: LD_INT 2
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 1
42587: NEG
42588: PUSH
42589: LD_INT 1
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 2
42598: NEG
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 2
42609: NEG
42610: PUSH
42611: LD_INT 1
42613: NEG
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 2
42621: NEG
42622: PUSH
42623: LD_INT 2
42625: NEG
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42652: LD_ADDR_VAR 0 18
42656: PUSH
42657: LD_INT 0
42659: PUSH
42660: LD_INT 0
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 0
42669: PUSH
42670: LD_INT 1
42672: NEG
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 1
42680: PUSH
42681: LD_INT 0
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 1
42690: PUSH
42691: LD_INT 1
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 0
42700: PUSH
42701: LD_INT 1
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 1
42710: NEG
42711: PUSH
42712: LD_INT 0
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 1
42721: NEG
42722: PUSH
42723: LD_INT 1
42725: NEG
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 1
42733: NEG
42734: PUSH
42735: LD_INT 2
42737: NEG
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 0
42745: PUSH
42746: LD_INT 2
42748: NEG
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 1
42756: PUSH
42757: LD_INT 1
42759: NEG
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 2
42767: PUSH
42768: LD_INT 0
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 2
42777: PUSH
42778: LD_INT 1
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 2
42787: PUSH
42788: LD_INT 2
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 1
42797: PUSH
42798: LD_INT 2
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 0
42807: PUSH
42808: LD_INT 2
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 1
42817: NEG
42818: PUSH
42819: LD_INT 1
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 2
42828: NEG
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 2
42839: NEG
42840: PUSH
42841: LD_INT 1
42843: NEG
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 2
42851: NEG
42852: PUSH
42853: LD_INT 2
42855: NEG
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42882: LD_ADDR_VAR 0 19
42886: PUSH
42887: LD_INT 0
42889: PUSH
42890: LD_INT 0
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 0
42899: PUSH
42900: LD_INT 1
42902: NEG
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 1
42910: PUSH
42911: LD_INT 0
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 1
42920: PUSH
42921: LD_INT 1
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 0
42930: PUSH
42931: LD_INT 1
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 1
42940: NEG
42941: PUSH
42942: LD_INT 0
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 1
42951: NEG
42952: PUSH
42953: LD_INT 1
42955: NEG
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 1
42963: NEG
42964: PUSH
42965: LD_INT 2
42967: NEG
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 0
42975: PUSH
42976: LD_INT 2
42978: NEG
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 1
42986: PUSH
42987: LD_INT 1
42989: NEG
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 2
42997: PUSH
42998: LD_INT 0
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 2
43007: PUSH
43008: LD_INT 1
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 2
43017: PUSH
43018: LD_INT 2
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 1
43027: PUSH
43028: LD_INT 2
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 0
43037: PUSH
43038: LD_INT 2
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 1
43047: NEG
43048: PUSH
43049: LD_INT 1
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 2
43058: NEG
43059: PUSH
43060: LD_INT 0
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 2
43069: NEG
43070: PUSH
43071: LD_INT 1
43073: NEG
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 2
43081: NEG
43082: PUSH
43083: LD_INT 2
43085: NEG
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43112: LD_ADDR_VAR 0 20
43116: PUSH
43117: LD_INT 0
43119: PUSH
43120: LD_INT 0
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 0
43129: PUSH
43130: LD_INT 1
43132: NEG
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 1
43140: PUSH
43141: LD_INT 0
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 1
43150: PUSH
43151: LD_INT 1
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 0
43160: PUSH
43161: LD_INT 1
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 1
43170: NEG
43171: PUSH
43172: LD_INT 0
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 1
43181: NEG
43182: PUSH
43183: LD_INT 1
43185: NEG
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 1
43193: NEG
43194: PUSH
43195: LD_INT 2
43197: NEG
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 0
43205: PUSH
43206: LD_INT 2
43208: NEG
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 1
43216: PUSH
43217: LD_INT 1
43219: NEG
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 2
43227: PUSH
43228: LD_INT 0
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 2
43237: PUSH
43238: LD_INT 1
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 2
43247: PUSH
43248: LD_INT 2
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 1
43257: PUSH
43258: LD_INT 2
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 0
43267: PUSH
43268: LD_INT 2
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 1
43277: NEG
43278: PUSH
43279: LD_INT 1
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 2
43288: NEG
43289: PUSH
43290: LD_INT 0
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 2
43299: NEG
43300: PUSH
43301: LD_INT 1
43303: NEG
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 2
43311: NEG
43312: PUSH
43313: LD_INT 2
43315: NEG
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43342: LD_ADDR_VAR 0 21
43346: PUSH
43347: LD_INT 0
43349: PUSH
43350: LD_INT 0
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: LD_INT 1
43362: NEG
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 1
43370: PUSH
43371: LD_INT 0
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 1
43380: PUSH
43381: LD_INT 1
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 0
43390: PUSH
43391: LD_INT 1
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 1
43400: NEG
43401: PUSH
43402: LD_INT 0
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 1
43411: NEG
43412: PUSH
43413: LD_INT 1
43415: NEG
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 1
43423: NEG
43424: PUSH
43425: LD_INT 2
43427: NEG
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 0
43435: PUSH
43436: LD_INT 2
43438: NEG
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 1
43446: PUSH
43447: LD_INT 1
43449: NEG
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 2
43457: PUSH
43458: LD_INT 0
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 2
43467: PUSH
43468: LD_INT 1
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 2
43477: PUSH
43478: LD_INT 2
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 1
43487: PUSH
43488: LD_INT 2
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 0
43497: PUSH
43498: LD_INT 2
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 1
43507: NEG
43508: PUSH
43509: LD_INT 1
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 2
43518: NEG
43519: PUSH
43520: LD_INT 0
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 2
43529: NEG
43530: PUSH
43531: LD_INT 1
43533: NEG
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 2
43541: NEG
43542: PUSH
43543: LD_INT 2
43545: NEG
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43572: LD_ADDR_VAR 0 22
43576: PUSH
43577: LD_INT 0
43579: PUSH
43580: LD_INT 0
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 0
43589: PUSH
43590: LD_INT 1
43592: NEG
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 1
43600: PUSH
43601: LD_INT 0
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 1
43610: PUSH
43611: LD_INT 1
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 0
43620: PUSH
43621: LD_INT 1
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 1
43630: NEG
43631: PUSH
43632: LD_INT 0
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 1
43641: NEG
43642: PUSH
43643: LD_INT 1
43645: NEG
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 1
43653: NEG
43654: PUSH
43655: LD_INT 2
43657: NEG
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 0
43665: PUSH
43666: LD_INT 2
43668: NEG
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 1
43676: PUSH
43677: LD_INT 1
43679: NEG
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 2
43687: PUSH
43688: LD_INT 0
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 2
43697: PUSH
43698: LD_INT 1
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 2
43707: PUSH
43708: LD_INT 2
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 1
43717: PUSH
43718: LD_INT 2
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 0
43727: PUSH
43728: LD_INT 2
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 1
43737: NEG
43738: PUSH
43739: LD_INT 1
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 2
43748: NEG
43749: PUSH
43750: LD_INT 0
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 2
43759: NEG
43760: PUSH
43761: LD_INT 1
43763: NEG
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 2
43771: NEG
43772: PUSH
43773: LD_INT 2
43775: NEG
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43802: LD_ADDR_VAR 0 23
43806: PUSH
43807: LD_INT 0
43809: PUSH
43810: LD_INT 0
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 0
43819: PUSH
43820: LD_INT 1
43822: NEG
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 1
43830: PUSH
43831: LD_INT 0
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 1
43840: PUSH
43841: LD_INT 1
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 0
43850: PUSH
43851: LD_INT 1
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 1
43860: NEG
43861: PUSH
43862: LD_INT 0
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 1
43871: NEG
43872: PUSH
43873: LD_INT 1
43875: NEG
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 1
43883: NEG
43884: PUSH
43885: LD_INT 2
43887: NEG
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 0
43895: PUSH
43896: LD_INT 2
43898: NEG
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 1
43906: PUSH
43907: LD_INT 1
43909: NEG
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 2
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 2
43927: PUSH
43928: LD_INT 1
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 2
43937: PUSH
43938: LD_INT 2
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 1
43947: PUSH
43948: LD_INT 2
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 0
43957: PUSH
43958: LD_INT 2
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 1
43967: NEG
43968: PUSH
43969: LD_INT 1
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 2
43978: NEG
43979: PUSH
43980: LD_INT 0
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 2
43989: NEG
43990: PUSH
43991: LD_INT 1
43993: NEG
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 2
44001: NEG
44002: PUSH
44003: LD_INT 2
44005: NEG
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 2
44013: NEG
44014: PUSH
44015: LD_INT 3
44017: NEG
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 1
44025: NEG
44026: PUSH
44027: LD_INT 3
44029: NEG
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 1
44037: PUSH
44038: LD_INT 2
44040: NEG
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 2
44048: PUSH
44049: LD_INT 1
44051: NEG
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44082: LD_ADDR_VAR 0 24
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: LD_INT 0
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 0
44099: PUSH
44100: LD_INT 1
44102: NEG
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 1
44110: PUSH
44111: LD_INT 0
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 1
44120: PUSH
44121: LD_INT 1
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 0
44130: PUSH
44131: LD_INT 1
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 1
44140: NEG
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 1
44151: NEG
44152: PUSH
44153: LD_INT 1
44155: NEG
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 1
44163: NEG
44164: PUSH
44165: LD_INT 2
44167: NEG
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: LD_INT 2
44178: NEG
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 1
44186: PUSH
44187: LD_INT 1
44189: NEG
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 2
44197: PUSH
44198: LD_INT 0
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 2
44207: PUSH
44208: LD_INT 1
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 2
44217: PUSH
44218: LD_INT 2
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 1
44227: PUSH
44228: LD_INT 2
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 0
44237: PUSH
44238: LD_INT 2
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 1
44247: NEG
44248: PUSH
44249: LD_INT 1
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 2
44258: NEG
44259: PUSH
44260: LD_INT 0
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 2
44269: NEG
44270: PUSH
44271: LD_INT 1
44273: NEG
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 2
44281: NEG
44282: PUSH
44283: LD_INT 2
44285: NEG
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 1
44293: PUSH
44294: LD_INT 2
44296: NEG
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 2
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 3
44315: PUSH
44316: LD_INT 1
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 3
44325: PUSH
44326: LD_INT 2
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44358: LD_ADDR_VAR 0 25
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: LD_INT 0
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 0
44375: PUSH
44376: LD_INT 1
44378: NEG
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 1
44386: PUSH
44387: LD_INT 0
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 1
44396: PUSH
44397: LD_INT 1
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 0
44406: PUSH
44407: LD_INT 1
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 1
44416: NEG
44417: PUSH
44418: LD_INT 0
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 1
44427: NEG
44428: PUSH
44429: LD_INT 1
44431: NEG
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: NEG
44440: PUSH
44441: LD_INT 2
44443: NEG
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 0
44451: PUSH
44452: LD_INT 2
44454: NEG
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 1
44462: PUSH
44463: LD_INT 1
44465: NEG
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 2
44473: PUSH
44474: LD_INT 0
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 2
44483: PUSH
44484: LD_INT 1
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 2
44493: PUSH
44494: LD_INT 2
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 1
44503: PUSH
44504: LD_INT 2
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 0
44513: PUSH
44514: LD_INT 2
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 1
44523: NEG
44524: PUSH
44525: LD_INT 1
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 2
44534: NEG
44535: PUSH
44536: LD_INT 0
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 2
44545: NEG
44546: PUSH
44547: LD_INT 1
44549: NEG
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 2
44557: NEG
44558: PUSH
44559: LD_INT 2
44561: NEG
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 3
44569: PUSH
44570: LD_INT 1
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 3
44579: PUSH
44580: LD_INT 2
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 2
44589: PUSH
44590: LD_INT 3
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 1
44599: PUSH
44600: LD_INT 3
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44632: LD_ADDR_VAR 0 26
44636: PUSH
44637: LD_INT 0
44639: PUSH
44640: LD_INT 0
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 0
44649: PUSH
44650: LD_INT 1
44652: NEG
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 1
44660: PUSH
44661: LD_INT 0
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 1
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 0
44680: PUSH
44681: LD_INT 1
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 1
44690: NEG
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 1
44701: NEG
44702: PUSH
44703: LD_INT 1
44705: NEG
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 1
44713: NEG
44714: PUSH
44715: LD_INT 2
44717: NEG
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 0
44725: PUSH
44726: LD_INT 2
44728: NEG
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: LD_INT 1
44739: NEG
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 2
44747: PUSH
44748: LD_INT 0
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 2
44757: PUSH
44758: LD_INT 1
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 2
44767: PUSH
44768: LD_INT 2
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 1
44777: PUSH
44778: LD_INT 2
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 0
44787: PUSH
44788: LD_INT 2
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 1
44797: NEG
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 2
44808: NEG
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 2
44819: NEG
44820: PUSH
44821: LD_INT 1
44823: NEG
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 2
44831: NEG
44832: PUSH
44833: LD_INT 2
44835: NEG
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 2
44843: PUSH
44844: LD_INT 3
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 1
44853: PUSH
44854: LD_INT 3
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 1
44863: NEG
44864: PUSH
44865: LD_INT 2
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 2
44874: NEG
44875: PUSH
44876: LD_INT 1
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44908: LD_ADDR_VAR 0 27
44912: PUSH
44913: LD_INT 0
44915: PUSH
44916: LD_INT 0
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: LD_INT 1
44928: NEG
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 1
44936: PUSH
44937: LD_INT 0
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 1
44946: PUSH
44947: LD_INT 1
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: LD_INT 1
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 1
44966: NEG
44967: PUSH
44968: LD_INT 0
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 1
44977: NEG
44978: PUSH
44979: LD_INT 1
44981: NEG
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 1
44989: NEG
44990: PUSH
44991: LD_INT 2
44993: NEG
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 0
45001: PUSH
45002: LD_INT 2
45004: NEG
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: LD_INT 1
45015: NEG
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 2
45023: PUSH
45024: LD_INT 0
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 2
45033: PUSH
45034: LD_INT 1
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 2
45043: PUSH
45044: LD_INT 2
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 1
45053: PUSH
45054: LD_INT 2
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 0
45063: PUSH
45064: LD_INT 2
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 1
45073: NEG
45074: PUSH
45075: LD_INT 1
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 2
45084: NEG
45085: PUSH
45086: LD_INT 0
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 2
45095: NEG
45096: PUSH
45097: LD_INT 1
45099: NEG
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 2
45107: NEG
45108: PUSH
45109: LD_INT 2
45111: NEG
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 1
45119: NEG
45120: PUSH
45121: LD_INT 2
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 2
45130: NEG
45131: PUSH
45132: LD_INT 1
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 3
45141: NEG
45142: PUSH
45143: LD_INT 1
45145: NEG
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 3
45153: NEG
45154: PUSH
45155: LD_INT 2
45157: NEG
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45188: LD_ADDR_VAR 0 28
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: LD_INT 0
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 0
45205: PUSH
45206: LD_INT 1
45208: NEG
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 1
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 1
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 0
45236: PUSH
45237: LD_INT 1
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 1
45246: NEG
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 1
45257: NEG
45258: PUSH
45259: LD_INT 1
45261: NEG
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 1
45269: NEG
45270: PUSH
45271: LD_INT 2
45273: NEG
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 0
45281: PUSH
45282: LD_INT 2
45284: NEG
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: LD_INT 1
45295: NEG
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 2
45303: PUSH
45304: LD_INT 0
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 2
45313: PUSH
45314: LD_INT 1
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 2
45323: PUSH
45324: LD_INT 2
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 1
45333: PUSH
45334: LD_INT 2
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 0
45343: PUSH
45344: LD_INT 2
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 1
45353: NEG
45354: PUSH
45355: LD_INT 1
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 2
45364: NEG
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 2
45375: NEG
45376: PUSH
45377: LD_INT 1
45379: NEG
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 2
45387: NEG
45388: PUSH
45389: LD_INT 2
45391: NEG
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 2
45399: NEG
45400: PUSH
45401: LD_INT 3
45403: NEG
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: LD_INT 3
45415: NEG
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 3
45423: NEG
45424: PUSH
45425: LD_INT 1
45427: NEG
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 3
45435: NEG
45436: PUSH
45437: LD_INT 2
45439: NEG
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45470: LD_ADDR_VAR 0 29
45474: PUSH
45475: LD_INT 0
45477: PUSH
45478: LD_INT 0
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 0
45487: PUSH
45488: LD_INT 1
45490: NEG
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: LD_INT 0
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 1
45508: PUSH
45509: LD_INT 1
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 0
45518: PUSH
45519: LD_INT 1
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 1
45528: NEG
45529: PUSH
45530: LD_INT 0
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 1
45539: NEG
45540: PUSH
45541: LD_INT 1
45543: NEG
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: NEG
45552: PUSH
45553: LD_INT 2
45555: NEG
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 0
45563: PUSH
45564: LD_INT 2
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 1
45574: PUSH
45575: LD_INT 1
45577: NEG
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 2
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 2
45595: PUSH
45596: LD_INT 1
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 1
45605: PUSH
45606: LD_INT 2
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 0
45615: PUSH
45616: LD_INT 2
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 1
45625: NEG
45626: PUSH
45627: LD_INT 1
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 2
45636: NEG
45637: PUSH
45638: LD_INT 1
45640: NEG
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 2
45648: NEG
45649: PUSH
45650: LD_INT 2
45652: NEG
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 2
45660: NEG
45661: PUSH
45662: LD_INT 3
45664: NEG
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 2
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 3
45683: PUSH
45684: LD_INT 1
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 1
45693: PUSH
45694: LD_INT 3
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: LD_INT 2
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 3
45714: NEG
45715: PUSH
45716: LD_INT 2
45718: NEG
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45749: LD_ADDR_VAR 0 30
45753: PUSH
45754: LD_INT 0
45756: PUSH
45757: LD_INT 0
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 0
45766: PUSH
45767: LD_INT 1
45769: NEG
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: PUSH
45778: LD_INT 0
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 1
45787: PUSH
45788: LD_INT 1
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 0
45797: PUSH
45798: LD_INT 1
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 1
45807: NEG
45808: PUSH
45809: LD_INT 0
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 1
45818: NEG
45819: PUSH
45820: LD_INT 1
45822: NEG
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: LD_INT 2
45834: NEG
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: LD_INT 2
45845: NEG
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 1
45853: PUSH
45854: LD_INT 1
45856: NEG
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 2
45864: PUSH
45865: LD_INT 0
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 2
45874: PUSH
45875: LD_INT 1
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 2
45884: PUSH
45885: LD_INT 2
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 1
45894: PUSH
45895: LD_INT 2
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 1
45904: NEG
45905: PUSH
45906: LD_INT 1
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 2
45915: NEG
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 2
45926: NEG
45927: PUSH
45928: LD_INT 1
45930: NEG
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 1
45938: NEG
45939: PUSH
45940: LD_INT 3
45942: NEG
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 1
45950: PUSH
45951: LD_INT 2
45953: NEG
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 3
45961: PUSH
45962: LD_INT 2
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 2
45971: PUSH
45972: LD_INT 3
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 2
45981: NEG
45982: PUSH
45983: LD_INT 1
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 3
45992: NEG
45993: PUSH
45994: LD_INT 1
45996: NEG
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46027: LD_ADDR_VAR 0 31
46031: PUSH
46032: LD_INT 0
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 0
46044: PUSH
46045: LD_INT 1
46047: NEG
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 1
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 1
46065: PUSH
46066: LD_INT 1
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: LD_INT 1
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 1
46085: NEG
46086: PUSH
46087: LD_INT 0
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 1
46096: NEG
46097: PUSH
46098: LD_INT 1
46100: NEG
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 1
46108: NEG
46109: PUSH
46110: LD_INT 2
46112: NEG
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 1
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 2
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 2
46141: PUSH
46142: LD_INT 1
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 2
46151: PUSH
46152: LD_INT 2
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 1
46161: PUSH
46162: LD_INT 2
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 0
46171: PUSH
46172: LD_INT 2
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 1
46181: NEG
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 2
46192: NEG
46193: PUSH
46194: LD_INT 1
46196: NEG
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 2
46204: NEG
46205: PUSH
46206: LD_INT 2
46208: NEG
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 2
46216: NEG
46217: PUSH
46218: LD_INT 3
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 2
46228: PUSH
46229: LD_INT 1
46231: NEG
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 3
46239: PUSH
46240: LD_INT 1
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 1
46249: PUSH
46250: LD_INT 3
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 1
46259: NEG
46260: PUSH
46261: LD_INT 2
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 3
46270: NEG
46271: PUSH
46272: LD_INT 2
46274: NEG
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46305: LD_ADDR_VAR 0 32
46309: PUSH
46310: LD_INT 0
46312: PUSH
46313: LD_INT 0
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 0
46322: PUSH
46323: LD_INT 1
46325: NEG
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 1
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: LD_INT 1
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: LD_INT 1
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 1
46363: NEG
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 1
46374: NEG
46375: PUSH
46376: LD_INT 1
46378: NEG
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 1
46386: NEG
46387: PUSH
46388: LD_INT 2
46390: NEG
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 0
46398: PUSH
46399: LD_INT 2
46401: NEG
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 1
46409: PUSH
46410: LD_INT 1
46412: NEG
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 2
46420: PUSH
46421: LD_INT 1
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 2
46430: PUSH
46431: LD_INT 2
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 1
46440: PUSH
46441: LD_INT 2
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: LD_INT 2
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 1
46460: NEG
46461: PUSH
46462: LD_INT 1
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 2
46471: NEG
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 2
46482: NEG
46483: PUSH
46484: LD_INT 1
46486: NEG
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 1
46494: NEG
46495: PUSH
46496: LD_INT 3
46498: NEG
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: LD_INT 2
46509: NEG
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 3
46517: PUSH
46518: LD_INT 2
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 2
46527: PUSH
46528: LD_INT 3
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 2
46537: NEG
46538: PUSH
46539: LD_INT 1
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 3
46548: NEG
46549: PUSH
46550: LD_INT 1
46552: NEG
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46583: LD_ADDR_VAR 0 33
46587: PUSH
46588: LD_INT 0
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: LD_INT 1
46603: NEG
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 1
46611: PUSH
46612: LD_INT 0
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 1
46621: PUSH
46622: LD_INT 1
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 0
46631: PUSH
46632: LD_INT 1
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 1
46641: NEG
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 1
46652: NEG
46653: PUSH
46654: LD_INT 1
46656: NEG
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 1
46664: NEG
46665: PUSH
46666: LD_INT 2
46668: NEG
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 1
46676: PUSH
46677: LD_INT 1
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 2
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 2
46697: PUSH
46698: LD_INT 1
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 1
46707: PUSH
46708: LD_INT 2
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: LD_INT 2
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 1
46727: NEG
46728: PUSH
46729: LD_INT 1
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 2
46738: NEG
46739: PUSH
46740: LD_INT 0
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 2
46749: NEG
46750: PUSH
46751: LD_INT 1
46753: NEG
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 2
46761: NEG
46762: PUSH
46763: LD_INT 2
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 2
46773: NEG
46774: PUSH
46775: LD_INT 3
46777: NEG
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 2
46785: PUSH
46786: LD_INT 1
46788: NEG
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 3
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: LD_INT 3
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: NEG
46817: PUSH
46818: LD_INT 2
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 3
46827: NEG
46828: PUSH
46829: LD_INT 2
46831: NEG
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46862: LD_ADDR_VAR 0 34
46866: PUSH
46867: LD_INT 0
46869: PUSH
46870: LD_INT 0
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 0
46879: PUSH
46880: LD_INT 1
46882: NEG
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 1
46890: PUSH
46891: LD_INT 0
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 1
46900: PUSH
46901: LD_INT 1
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: LD_INT 1
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 1
46920: NEG
46921: PUSH
46922: LD_INT 0
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 1
46931: NEG
46932: PUSH
46933: LD_INT 1
46935: NEG
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 1
46943: NEG
46944: PUSH
46945: LD_INT 2
46947: NEG
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 0
46955: PUSH
46956: LD_INT 2
46958: NEG
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 1
46966: PUSH
46967: LD_INT 1
46969: NEG
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 2
46977: PUSH
46978: LD_INT 1
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 2
46987: PUSH
46988: LD_INT 2
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: LD_INT 2
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 1
47007: NEG
47008: PUSH
47009: LD_INT 1
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 2
47018: NEG
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 2
47029: NEG
47030: PUSH
47031: LD_INT 1
47033: NEG
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 2
47041: NEG
47042: PUSH
47043: LD_INT 2
47045: NEG
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 1
47053: NEG
47054: PUSH
47055: LD_INT 3
47057: NEG
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 1
47065: PUSH
47066: LD_INT 2
47068: NEG
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 3
47076: PUSH
47077: LD_INT 2
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 2
47086: PUSH
47087: LD_INT 3
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 2
47096: NEG
47097: PUSH
47098: LD_INT 1
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 3
47107: NEG
47108: PUSH
47109: LD_INT 1
47111: NEG
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47142: LD_ADDR_VAR 0 35
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: LD_INT 0
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: LD_INT 1
47162: NEG
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: LD_INT 0
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 1
47180: PUSH
47181: LD_INT 1
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: LD_INT 1
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: PUSH
47202: LD_INT 0
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 1
47211: NEG
47212: PUSH
47213: LD_INT 1
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 2
47223: PUSH
47224: LD_INT 1
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 2
47233: NEG
47234: PUSH
47235: LD_INT 1
47237: NEG
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47254: LD_ADDR_VAR 0 36
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: LD_INT 0
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 0
47271: PUSH
47272: LD_INT 1
47274: NEG
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 1
47282: PUSH
47283: LD_INT 0
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 1
47292: PUSH
47293: LD_INT 1
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: LD_INT 1
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 1
47312: NEG
47313: PUSH
47314: LD_INT 0
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 1
47323: NEG
47324: PUSH
47325: LD_INT 1
47327: NEG
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 1
47335: NEG
47336: PUSH
47337: LD_INT 2
47339: NEG
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 1
47347: PUSH
47348: LD_INT 2
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47366: LD_ADDR_VAR 0 37
47370: PUSH
47371: LD_INT 0
47373: PUSH
47374: LD_INT 0
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: LD_INT 1
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 1
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: PUSH
47405: LD_INT 1
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 1
47424: NEG
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 1
47435: NEG
47436: PUSH
47437: LD_INT 1
47439: NEG
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 1
47447: PUSH
47448: LD_INT 1
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 1
47458: NEG
47459: PUSH
47460: LD_INT 1
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47478: LD_ADDR_VAR 0 38
47482: PUSH
47483: LD_INT 0
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 0
47495: PUSH
47496: LD_INT 1
47498: NEG
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 1
47506: PUSH
47507: LD_INT 0
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 1
47516: PUSH
47517: LD_INT 1
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 0
47526: PUSH
47527: LD_INT 1
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 1
47536: NEG
47537: PUSH
47538: LD_INT 0
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 1
47547: NEG
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 2
47559: PUSH
47560: LD_INT 1
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 2
47569: NEG
47570: PUSH
47571: LD_INT 1
47573: NEG
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47590: LD_ADDR_VAR 0 39
47594: PUSH
47595: LD_INT 0
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 0
47607: PUSH
47608: LD_INT 1
47610: NEG
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 1
47618: PUSH
47619: LD_INT 0
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 1
47628: PUSH
47629: LD_INT 1
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 0
47638: PUSH
47639: LD_INT 1
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: LD_INT 0
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 1
47659: NEG
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: NEG
47672: PUSH
47673: LD_INT 2
47675: NEG
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 1
47683: PUSH
47684: LD_INT 2
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47702: LD_ADDR_VAR 0 40
47706: PUSH
47707: LD_INT 0
47709: PUSH
47710: LD_INT 0
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 0
47719: PUSH
47720: LD_INT 1
47722: NEG
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 1
47730: PUSH
47731: LD_INT 0
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: LD_INT 1
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 0
47750: PUSH
47751: LD_INT 1
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: LD_INT 0
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 1
47771: NEG
47772: PUSH
47773: LD_INT 1
47775: NEG
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: PUSH
47784: LD_INT 1
47786: NEG
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: NEG
47795: PUSH
47796: LD_INT 1
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47814: LD_ADDR_VAR 0 41
47818: PUSH
47819: LD_INT 0
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 0
47831: PUSH
47832: LD_INT 1
47834: NEG
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 1
47842: PUSH
47843: LD_INT 0
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 1
47852: PUSH
47853: LD_INT 1
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 0
47862: PUSH
47863: LD_INT 1
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 1
47872: NEG
47873: PUSH
47874: LD_INT 0
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 1
47883: NEG
47884: PUSH
47885: LD_INT 1
47887: NEG
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 1
47895: NEG
47896: PUSH
47897: LD_INT 2
47899: NEG
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 1
47907: PUSH
47908: LD_INT 1
47910: NEG
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 2
47918: PUSH
47919: LD_INT 0
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 2
47928: PUSH
47929: LD_INT 1
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 2
47938: PUSH
47939: LD_INT 2
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 1
47948: PUSH
47949: LD_INT 2
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: LD_INT 1
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 2
47969: NEG
47970: PUSH
47971: LD_INT 0
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 2
47980: NEG
47981: PUSH
47982: LD_INT 1
47984: NEG
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 2
47992: NEG
47993: PUSH
47994: LD_INT 2
47996: NEG
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 2
48004: NEG
48005: PUSH
48006: LD_INT 3
48008: NEG
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 2
48016: PUSH
48017: LD_INT 1
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 3
48027: PUSH
48028: LD_INT 0
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 3
48037: PUSH
48038: LD_INT 1
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 3
48047: PUSH
48048: LD_INT 2
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 3
48057: PUSH
48058: LD_INT 3
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 2
48067: PUSH
48068: LD_INT 3
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 2
48077: NEG
48078: PUSH
48079: LD_INT 1
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 3
48088: NEG
48089: PUSH
48090: LD_INT 0
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 3
48099: NEG
48100: PUSH
48101: LD_INT 1
48103: NEG
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 3
48111: NEG
48112: PUSH
48113: LD_INT 2
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 3
48123: NEG
48124: PUSH
48125: LD_INT 3
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48164: LD_ADDR_VAR 0 42
48168: PUSH
48169: LD_INT 0
48171: PUSH
48172: LD_INT 0
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 0
48181: PUSH
48182: LD_INT 1
48184: NEG
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 1
48192: PUSH
48193: LD_INT 0
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 1
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 0
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 1
48222: NEG
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 1
48233: NEG
48234: PUSH
48235: LD_INT 1
48237: NEG
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 1
48245: NEG
48246: PUSH
48247: LD_INT 2
48249: NEG
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 0
48257: PUSH
48258: LD_INT 2
48260: NEG
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 1
48268: PUSH
48269: LD_INT 1
48271: NEG
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 2
48279: PUSH
48280: LD_INT 1
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 2
48289: PUSH
48290: LD_INT 2
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 1
48299: PUSH
48300: LD_INT 2
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: LD_INT 2
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 1
48319: NEG
48320: PUSH
48321: LD_INT 1
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 2
48330: NEG
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 2
48342: NEG
48343: PUSH
48344: LD_INT 2
48346: NEG
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 2
48354: NEG
48355: PUSH
48356: LD_INT 3
48358: NEG
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 1
48366: NEG
48367: PUSH
48368: LD_INT 3
48370: NEG
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 0
48378: PUSH
48379: LD_INT 3
48381: NEG
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 1
48389: PUSH
48390: LD_INT 2
48392: NEG
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 3
48400: PUSH
48401: LD_INT 2
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 3
48410: PUSH
48411: LD_INT 3
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 2
48420: PUSH
48421: LD_INT 3
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 1
48430: PUSH
48431: LD_INT 3
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 0
48440: PUSH
48441: LD_INT 3
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 1
48450: NEG
48451: PUSH
48452: LD_INT 2
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 3
48461: NEG
48462: PUSH
48463: LD_INT 2
48465: NEG
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 3
48473: NEG
48474: PUSH
48475: LD_INT 3
48477: NEG
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48514: LD_ADDR_VAR 0 43
48518: PUSH
48519: LD_INT 0
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 0
48531: PUSH
48532: LD_INT 1
48534: NEG
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 1
48552: PUSH
48553: LD_INT 1
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 0
48562: PUSH
48563: LD_INT 1
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 1
48572: NEG
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 1
48583: NEG
48584: PUSH
48585: LD_INT 1
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: NEG
48596: PUSH
48597: LD_INT 2
48599: NEG
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: LD_INT 2
48610: NEG
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: PUSH
48619: LD_INT 1
48621: NEG
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 2
48629: PUSH
48630: LD_INT 0
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 2
48639: PUSH
48640: LD_INT 1
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 1
48649: PUSH
48650: LD_INT 2
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 0
48659: PUSH
48660: LD_INT 2
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 1
48669: NEG
48670: PUSH
48671: LD_INT 1
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 2
48680: NEG
48681: PUSH
48682: LD_INT 0
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 2
48691: NEG
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 1
48703: NEG
48704: PUSH
48705: LD_INT 3
48707: NEG
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 0
48715: PUSH
48716: LD_INT 3
48718: NEG
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 1
48726: PUSH
48727: LD_INT 2
48729: NEG
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 2
48737: PUSH
48738: LD_INT 1
48740: NEG
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 3
48748: PUSH
48749: LD_INT 0
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 3
48758: PUSH
48759: LD_INT 1
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 1
48768: PUSH
48769: LD_INT 3
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 0
48778: PUSH
48779: LD_INT 3
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 1
48788: NEG
48789: PUSH
48790: LD_INT 2
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 2
48799: NEG
48800: PUSH
48801: LD_INT 1
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 3
48810: NEG
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 3
48821: NEG
48822: PUSH
48823: LD_INT 1
48825: NEG
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48862: LD_ADDR_VAR 0 44
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: LD_INT 0
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 0
48879: PUSH
48880: LD_INT 1
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 1
48890: PUSH
48891: LD_INT 0
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 1
48900: PUSH
48901: LD_INT 1
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 0
48910: PUSH
48911: LD_INT 1
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 1
48920: NEG
48921: PUSH
48922: LD_INT 0
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 1
48931: NEG
48932: PUSH
48933: LD_INT 1
48935: NEG
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 1
48943: NEG
48944: PUSH
48945: LD_INT 2
48947: NEG
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 1
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 2
48966: PUSH
48967: LD_INT 0
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 2
48976: PUSH
48977: LD_INT 1
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 2
48986: PUSH
48987: LD_INT 2
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 1
48996: PUSH
48997: LD_INT 2
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 1
49006: NEG
49007: PUSH
49008: LD_INT 1
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 2
49017: NEG
49018: PUSH
49019: LD_INT 0
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 2
49028: NEG
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 2
49040: NEG
49041: PUSH
49042: LD_INT 2
49044: NEG
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 2
49052: NEG
49053: PUSH
49054: LD_INT 3
49056: NEG
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 2
49064: PUSH
49065: LD_INT 1
49067: NEG
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 3
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 3
49085: PUSH
49086: LD_INT 1
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 3
49095: PUSH
49096: LD_INT 2
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 3
49105: PUSH
49106: LD_INT 3
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 2
49115: PUSH
49116: LD_INT 3
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 2
49125: NEG
49126: PUSH
49127: LD_INT 1
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 3
49136: NEG
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 3
49147: NEG
49148: PUSH
49149: LD_INT 1
49151: NEG
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 3
49159: NEG
49160: PUSH
49161: LD_INT 2
49163: NEG
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 3
49171: NEG
49172: PUSH
49173: LD_INT 3
49175: NEG
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49212: LD_ADDR_VAR 0 45
49216: PUSH
49217: LD_INT 0
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 0
49229: PUSH
49230: LD_INT 1
49232: NEG
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 1
49240: PUSH
49241: LD_INT 0
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 1
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 0
49260: PUSH
49261: LD_INT 1
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 1
49270: NEG
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 1
49281: NEG
49282: PUSH
49283: LD_INT 1
49285: NEG
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 1
49293: NEG
49294: PUSH
49295: LD_INT 2
49297: NEG
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 0
49305: PUSH
49306: LD_INT 2
49308: NEG
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 1
49316: PUSH
49317: LD_INT 1
49319: NEG
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 2
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 2
49337: PUSH
49338: LD_INT 2
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 1
49347: PUSH
49348: LD_INT 2
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 0
49357: PUSH
49358: LD_INT 2
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 1
49367: NEG
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 2
49378: NEG
49379: PUSH
49380: LD_INT 1
49382: NEG
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 2
49390: NEG
49391: PUSH
49392: LD_INT 2
49394: NEG
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 2
49402: NEG
49403: PUSH
49404: LD_INT 3
49406: NEG
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 1
49414: NEG
49415: PUSH
49416: LD_INT 3
49418: NEG
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 0
49426: PUSH
49427: LD_INT 3
49429: NEG
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 1
49437: PUSH
49438: LD_INT 2
49440: NEG
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 3
49448: PUSH
49449: LD_INT 2
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 3
49458: PUSH
49459: LD_INT 3
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 2
49468: PUSH
49469: LD_INT 3
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 1
49478: PUSH
49479: LD_INT 3
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 0
49488: PUSH
49489: LD_INT 3
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 1
49498: NEG
49499: PUSH
49500: LD_INT 2
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 3
49509: NEG
49510: PUSH
49511: LD_INT 2
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 3
49521: NEG
49522: PUSH
49523: LD_INT 3
49525: NEG
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49562: LD_ADDR_VAR 0 46
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: LD_INT 0
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 0
49579: PUSH
49580: LD_INT 1
49582: NEG
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 1
49590: PUSH
49591: LD_INT 0
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 1
49600: PUSH
49601: LD_INT 1
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: LD_INT 1
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 1
49620: NEG
49621: PUSH
49622: LD_INT 0
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 1
49631: NEG
49632: PUSH
49633: LD_INT 1
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 1
49643: NEG
49644: PUSH
49645: LD_INT 2
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 0
49655: PUSH
49656: LD_INT 2
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 1
49666: PUSH
49667: LD_INT 1
49669: NEG
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 2
49677: PUSH
49678: LD_INT 0
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 2
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 1
49697: PUSH
49698: LD_INT 2
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 0
49707: PUSH
49708: LD_INT 2
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 1
49717: NEG
49718: PUSH
49719: LD_INT 1
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 2
49728: NEG
49729: PUSH
49730: LD_INT 0
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 2
49739: NEG
49740: PUSH
49741: LD_INT 1
49743: NEG
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: PUSH
49753: LD_INT 3
49755: NEG
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 0
49763: PUSH
49764: LD_INT 3
49766: NEG
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: LD_INT 2
49777: NEG
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 2
49785: PUSH
49786: LD_INT 1
49788: NEG
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 3
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 3
49806: PUSH
49807: LD_INT 1
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 1
49816: PUSH
49817: LD_INT 3
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 0
49826: PUSH
49827: LD_INT 3
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 1
49836: NEG
49837: PUSH
49838: LD_INT 2
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 2
49847: NEG
49848: PUSH
49849: LD_INT 1
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 3
49858: NEG
49859: PUSH
49860: LD_INT 0
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 3
49869: NEG
49870: PUSH
49871: LD_INT 1
49873: NEG
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49910: LD_ADDR_VAR 0 47
49914: PUSH
49915: LD_INT 0
49917: PUSH
49918: LD_INT 0
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: LD_INT 1
49930: NEG
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 1
49938: PUSH
49939: LD_INT 0
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 0
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 1
49968: NEG
49969: PUSH
49970: LD_INT 0
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 1
49979: NEG
49980: PUSH
49981: LD_INT 1
49983: NEG
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 1
49991: NEG
49992: PUSH
49993: LD_INT 2
49995: NEG
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 0
50003: PUSH
50004: LD_INT 2
50006: NEG
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: LD_INT 1
50017: NEG
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 2
50025: NEG
50026: PUSH
50027: LD_INT 1
50029: NEG
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 2
50037: NEG
50038: PUSH
50039: LD_INT 2
50041: NEG
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50061: LD_ADDR_VAR 0 48
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: LD_INT 0
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: LD_INT 1
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: LD_INT 0
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 1
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: LD_INT 1
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: LD_INT 0
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 1
50130: NEG
50131: PUSH
50132: LD_INT 1
50134: NEG
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 1
50142: NEG
50143: PUSH
50144: LD_INT 2
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 0
50154: PUSH
50155: LD_INT 2
50157: NEG
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 1
50165: PUSH
50166: LD_INT 1
50168: NEG
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 2
50176: PUSH
50177: LD_INT 0
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 2
50186: PUSH
50187: LD_INT 1
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50208: LD_ADDR_VAR 0 49
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 0
50225: PUSH
50226: LD_INT 1
50228: NEG
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: LD_INT 0
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 1
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 0
50256: PUSH
50257: LD_INT 1
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: LD_INT 0
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: LD_INT 1
50281: NEG
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: PUSH
50290: LD_INT 1
50292: NEG
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 2
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 2
50310: PUSH
50311: LD_INT 1
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 2
50320: PUSH
50321: LD_INT 2
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 1
50330: PUSH
50331: LD_INT 2
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50352: LD_ADDR_VAR 0 50
50356: PUSH
50357: LD_INT 0
50359: PUSH
50360: LD_INT 0
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 0
50369: PUSH
50370: LD_INT 1
50372: NEG
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 1
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 1
50390: PUSH
50391: LD_INT 1
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 0
50400: PUSH
50401: LD_INT 1
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 1
50410: NEG
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 1
50421: NEG
50422: PUSH
50423: LD_INT 1
50425: NEG
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 2
50433: PUSH
50434: LD_INT 1
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 2
50443: PUSH
50444: LD_INT 2
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 1
50453: PUSH
50454: LD_INT 2
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 0
50463: PUSH
50464: LD_INT 2
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 1
50473: NEG
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50496: LD_ADDR_VAR 0 51
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 0
50513: PUSH
50514: LD_INT 1
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 1
50524: PUSH
50525: LD_INT 0
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 1
50534: PUSH
50535: LD_INT 1
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 0
50544: PUSH
50545: LD_INT 1
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 1
50554: NEG
50555: PUSH
50556: LD_INT 0
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 1
50565: NEG
50566: PUSH
50567: LD_INT 1
50569: NEG
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 1
50577: PUSH
50578: LD_INT 2
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: LD_INT 2
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 1
50597: NEG
50598: PUSH
50599: LD_INT 1
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 2
50608: NEG
50609: PUSH
50610: LD_INT 0
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 2
50619: NEG
50620: PUSH
50621: LD_INT 1
50623: NEG
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50643: LD_ADDR_VAR 0 52
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: LD_INT 0
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 0
50660: PUSH
50661: LD_INT 1
50663: NEG
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 1
50671: PUSH
50672: LD_INT 0
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 1
50681: PUSH
50682: LD_INT 1
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 1
50701: NEG
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: NEG
50713: PUSH
50714: LD_INT 1
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 1
50724: NEG
50725: PUSH
50726: LD_INT 2
50728: NEG
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 1
50736: NEG
50737: PUSH
50738: LD_INT 1
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 2
50747: NEG
50748: PUSH
50749: LD_INT 0
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 2
50758: NEG
50759: PUSH
50760: LD_INT 1
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 2
50770: NEG
50771: PUSH
50772: LD_INT 2
50774: NEG
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50794: LD_ADDR_VAR 0 53
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: LD_INT 0
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 0
50811: PUSH
50812: LD_INT 1
50814: NEG
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 1
50822: PUSH
50823: LD_INT 0
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 1
50832: PUSH
50833: LD_INT 1
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 0
50842: PUSH
50843: LD_INT 1
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 1
50852: NEG
50853: PUSH
50854: LD_INT 0
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 1
50863: NEG
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 1
50875: NEG
50876: PUSH
50877: LD_INT 2
50879: NEG
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 0
50887: PUSH
50888: LD_INT 2
50890: NEG
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: LD_INT 1
50901: NEG
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 2
50909: PUSH
50910: LD_INT 0
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 2
50919: PUSH
50920: LD_INT 1
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 2
50929: PUSH
50930: LD_INT 2
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 1
50939: PUSH
50940: LD_INT 2
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 0
50949: PUSH
50950: LD_INT 2
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 1
50959: NEG
50960: PUSH
50961: LD_INT 1
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 2
50970: NEG
50971: PUSH
50972: LD_INT 0
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 2
50981: NEG
50982: PUSH
50983: LD_INT 1
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 2
50993: NEG
50994: PUSH
50995: LD_INT 2
50997: NEG
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51024: LD_ADDR_VAR 0 54
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: LD_INT 0
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 0
51041: PUSH
51042: LD_INT 1
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 1
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 1
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 0
51072: PUSH
51073: LD_INT 1
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 1
51082: NEG
51083: PUSH
51084: LD_INT 0
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 1
51093: NEG
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 1
51105: NEG
51106: PUSH
51107: LD_INT 2
51109: NEG
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: LD_INT 2
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: LD_INT 1
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 2
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 2
51149: PUSH
51150: LD_INT 1
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 2
51159: PUSH
51160: LD_INT 2
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: LD_INT 2
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: LD_INT 2
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 1
51189: NEG
51190: PUSH
51191: LD_INT 1
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 2
51200: NEG
51201: PUSH
51202: LD_INT 0
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 2
51211: NEG
51212: PUSH
51213: LD_INT 1
51215: NEG
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 2
51223: NEG
51224: PUSH
51225: LD_INT 2
51227: NEG
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51254: LD_ADDR_VAR 0 55
51258: PUSH
51259: LD_INT 0
51261: PUSH
51262: LD_INT 0
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 0
51271: PUSH
51272: LD_INT 1
51274: NEG
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 1
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 1
51292: PUSH
51293: LD_INT 1
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: LD_INT 1
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 1
51312: NEG
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 1
51323: NEG
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 1
51335: NEG
51336: PUSH
51337: LD_INT 2
51339: NEG
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: LD_INT 2
51350: NEG
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: LD_INT 1
51361: NEG
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 2
51369: PUSH
51370: LD_INT 0
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 2
51379: PUSH
51380: LD_INT 1
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 2
51389: PUSH
51390: LD_INT 2
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 1
51399: PUSH
51400: LD_INT 2
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 0
51409: PUSH
51410: LD_INT 2
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 2
51430: NEG
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 2
51441: NEG
51442: PUSH
51443: LD_INT 1
51445: NEG
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 2
51453: NEG
51454: PUSH
51455: LD_INT 2
51457: NEG
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51484: LD_ADDR_VAR 0 56
51488: PUSH
51489: LD_INT 0
51491: PUSH
51492: LD_INT 0
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: LD_INT 1
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 1
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 1
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 0
51532: PUSH
51533: LD_INT 1
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 1
51553: NEG
51554: PUSH
51555: LD_INT 1
51557: NEG
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 1
51565: NEG
51566: PUSH
51567: LD_INT 2
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 0
51577: PUSH
51578: LD_INT 2
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 1
51588: PUSH
51589: LD_INT 1
51591: NEG
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 2
51599: PUSH
51600: LD_INT 0
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 2
51609: PUSH
51610: LD_INT 1
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 2
51619: PUSH
51620: LD_INT 2
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 1
51629: PUSH
51630: LD_INT 2
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 0
51639: PUSH
51640: LD_INT 2
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 1
51649: NEG
51650: PUSH
51651: LD_INT 1
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 2
51660: NEG
51661: PUSH
51662: LD_INT 0
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 2
51671: NEG
51672: PUSH
51673: LD_INT 1
51675: NEG
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 2
51683: NEG
51684: PUSH
51685: LD_INT 2
51687: NEG
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51714: LD_ADDR_VAR 0 57
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 0
51731: PUSH
51732: LD_INT 1
51734: NEG
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 1
51742: PUSH
51743: LD_INT 0
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 1
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: LD_INT 1
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 1
51772: NEG
51773: PUSH
51774: LD_INT 0
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 1
51783: NEG
51784: PUSH
51785: LD_INT 1
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 1
51795: NEG
51796: PUSH
51797: LD_INT 2
51799: NEG
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 0
51807: PUSH
51808: LD_INT 2
51810: NEG
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: PUSH
51819: LD_INT 1
51821: NEG
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 2
51829: PUSH
51830: LD_INT 0
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 2
51839: PUSH
51840: LD_INT 1
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 2
51849: PUSH
51850: LD_INT 2
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 1
51859: PUSH
51860: LD_INT 2
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 0
51869: PUSH
51870: LD_INT 2
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 1
51879: NEG
51880: PUSH
51881: LD_INT 1
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 2
51890: NEG
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 2
51901: NEG
51902: PUSH
51903: LD_INT 1
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 2
51913: NEG
51914: PUSH
51915: LD_INT 2
51917: NEG
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51944: LD_ADDR_VAR 0 58
51948: PUSH
51949: LD_INT 0
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 0
51961: PUSH
51962: LD_INT 1
51964: NEG
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 1
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: LD_INT 1
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 0
51992: PUSH
51993: LD_INT 1
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 1
52002: NEG
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: LD_INT 1
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: NEG
52026: PUSH
52027: LD_INT 2
52029: NEG
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: LD_INT 2
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: LD_INT 1
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 2
52059: PUSH
52060: LD_INT 0
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 2
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 2
52079: PUSH
52080: LD_INT 2
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: LD_INT 2
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: LD_INT 2
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 1
52109: NEG
52110: PUSH
52111: LD_INT 1
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 2
52120: NEG
52121: PUSH
52122: LD_INT 0
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 2
52131: NEG
52132: PUSH
52133: LD_INT 1
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 2
52143: NEG
52144: PUSH
52145: LD_INT 2
52147: NEG
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52174: LD_ADDR_VAR 0 59
52178: PUSH
52179: LD_INT 0
52181: PUSH
52182: LD_INT 0
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 0
52191: PUSH
52192: LD_INT 1
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 1
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 1
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 0
52222: PUSH
52223: LD_INT 1
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 1
52232: NEG
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52262: LD_ADDR_VAR 0 60
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 0
52279: PUSH
52280: LD_INT 1
52282: NEG
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 1
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 1
52300: PUSH
52301: LD_INT 1
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 0
52310: PUSH
52311: LD_INT 1
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 1
52320: NEG
52321: PUSH
52322: LD_INT 0
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 1
52331: NEG
52332: PUSH
52333: LD_INT 1
52335: NEG
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52350: LD_ADDR_VAR 0 61
52354: PUSH
52355: LD_INT 0
52357: PUSH
52358: LD_INT 0
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: LD_INT 1
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 1
52388: PUSH
52389: LD_INT 1
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 0
52398: PUSH
52399: LD_INT 1
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: LD_INT 0
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 1
52419: NEG
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52438: LD_ADDR_VAR 0 62
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: LD_INT 0
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: LD_INT 1
52458: NEG
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 1
52466: PUSH
52467: LD_INT 0
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 1
52476: PUSH
52477: LD_INT 1
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: LD_INT 1
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 1
52496: NEG
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 1
52507: NEG
52508: PUSH
52509: LD_INT 1
52511: NEG
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52526: LD_ADDR_VAR 0 63
52530: PUSH
52531: LD_INT 0
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 0
52543: PUSH
52544: LD_INT 1
52546: NEG
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 1
52554: PUSH
52555: LD_INT 0
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 1
52564: PUSH
52565: LD_INT 1
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: LD_INT 1
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 1
52584: NEG
52585: PUSH
52586: LD_INT 0
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 1
52595: NEG
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52614: LD_ADDR_VAR 0 64
52618: PUSH
52619: LD_INT 0
52621: PUSH
52622: LD_INT 0
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 0
52631: PUSH
52632: LD_INT 1
52634: NEG
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 1
52642: PUSH
52643: LD_INT 0
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 1
52652: PUSH
52653: LD_INT 1
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 0
52662: PUSH
52663: LD_INT 1
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 1
52672: NEG
52673: PUSH
52674: LD_INT 0
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 1
52683: NEG
52684: PUSH
52685: LD_INT 1
52687: NEG
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: ST_TO_ADDR
// end ; 1 :
52702: GO 58599
52704: LD_INT 1
52706: DOUBLE
52707: EQUAL
52708: IFTRUE 52712
52710: GO 55335
52712: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52713: LD_ADDR_VAR 0 11
52717: PUSH
52718: LD_INT 1
52720: NEG
52721: PUSH
52722: LD_INT 3
52724: NEG
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 0
52732: PUSH
52733: LD_INT 3
52735: NEG
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: LD_INT 2
52746: NEG
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: LIST
52756: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52757: LD_ADDR_VAR 0 12
52761: PUSH
52762: LD_INT 2
52764: PUSH
52765: LD_INT 1
52767: NEG
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 3
52775: PUSH
52776: LD_INT 0
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 3
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: LIST
52797: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52798: LD_ADDR_VAR 0 13
52802: PUSH
52803: LD_INT 3
52805: PUSH
52806: LD_INT 2
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 3
52815: PUSH
52816: LD_INT 3
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 2
52825: PUSH
52826: LD_INT 3
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: LIST
52837: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52838: LD_ADDR_VAR 0 14
52842: PUSH
52843: LD_INT 1
52845: PUSH
52846: LD_INT 3
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 0
52855: PUSH
52856: LD_INT 3
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 1
52865: NEG
52866: PUSH
52867: LD_INT 2
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: LIST
52878: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52879: LD_ADDR_VAR 0 15
52883: PUSH
52884: LD_INT 2
52886: NEG
52887: PUSH
52888: LD_INT 1
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 3
52897: NEG
52898: PUSH
52899: LD_INT 0
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 3
52908: NEG
52909: PUSH
52910: LD_INT 1
52912: NEG
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: LIST
52922: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52923: LD_ADDR_VAR 0 16
52927: PUSH
52928: LD_INT 2
52930: NEG
52931: PUSH
52932: LD_INT 3
52934: NEG
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 3
52942: NEG
52943: PUSH
52944: LD_INT 2
52946: NEG
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 3
52954: NEG
52955: PUSH
52956: LD_INT 3
52958: NEG
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: LIST
52968: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52969: LD_ADDR_VAR 0 17
52973: PUSH
52974: LD_INT 1
52976: NEG
52977: PUSH
52978: LD_INT 3
52980: NEG
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 0
52988: PUSH
52989: LD_INT 3
52991: NEG
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 1
52999: PUSH
53000: LD_INT 2
53002: NEG
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: LIST
53012: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53013: LD_ADDR_VAR 0 18
53017: PUSH
53018: LD_INT 2
53020: PUSH
53021: LD_INT 1
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 3
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 3
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: LIST
53053: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53054: LD_ADDR_VAR 0 19
53058: PUSH
53059: LD_INT 3
53061: PUSH
53062: LD_INT 2
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 3
53071: PUSH
53072: LD_INT 3
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 2
53081: PUSH
53082: LD_INT 3
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: LIST
53093: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53094: LD_ADDR_VAR 0 20
53098: PUSH
53099: LD_INT 1
53101: PUSH
53102: LD_INT 3
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 0
53111: PUSH
53112: LD_INT 3
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 1
53121: NEG
53122: PUSH
53123: LD_INT 2
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: LIST
53134: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53135: LD_ADDR_VAR 0 21
53139: PUSH
53140: LD_INT 2
53142: NEG
53143: PUSH
53144: LD_INT 1
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 3
53153: NEG
53154: PUSH
53155: LD_INT 0
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 3
53164: NEG
53165: PUSH
53166: LD_INT 1
53168: NEG
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: LIST
53178: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53179: LD_ADDR_VAR 0 22
53183: PUSH
53184: LD_INT 2
53186: NEG
53187: PUSH
53188: LD_INT 3
53190: NEG
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 3
53198: NEG
53199: PUSH
53200: LD_INT 2
53202: NEG
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 3
53210: NEG
53211: PUSH
53212: LD_INT 3
53214: NEG
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: LIST
53224: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53225: LD_ADDR_VAR 0 23
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: LD_INT 3
53235: NEG
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 1
53243: NEG
53244: PUSH
53245: LD_INT 4
53247: NEG
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 1
53255: PUSH
53256: LD_INT 3
53258: NEG
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: LIST
53268: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53269: LD_ADDR_VAR 0 24
53273: PUSH
53274: LD_INT 3
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 3
53286: PUSH
53287: LD_INT 1
53289: NEG
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 4
53297: PUSH
53298: LD_INT 1
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: LIST
53309: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53310: LD_ADDR_VAR 0 25
53314: PUSH
53315: LD_INT 3
53317: PUSH
53318: LD_INT 3
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 4
53327: PUSH
53328: LD_INT 3
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 3
53337: PUSH
53338: LD_INT 4
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: LIST
53349: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53350: LD_ADDR_VAR 0 26
53354: PUSH
53355: LD_INT 0
53357: PUSH
53358: LD_INT 3
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 1
53367: PUSH
53368: LD_INT 4
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 1
53377: NEG
53378: PUSH
53379: LD_INT 3
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: LIST
53390: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53391: LD_ADDR_VAR 0 27
53395: PUSH
53396: LD_INT 3
53398: NEG
53399: PUSH
53400: LD_INT 0
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 3
53409: NEG
53410: PUSH
53411: LD_INT 1
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 4
53420: NEG
53421: PUSH
53422: LD_INT 1
53424: NEG
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: LIST
53434: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53435: LD_ADDR_VAR 0 28
53439: PUSH
53440: LD_INT 3
53442: NEG
53443: PUSH
53444: LD_INT 3
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 3
53454: NEG
53455: PUSH
53456: LD_INT 4
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 4
53466: NEG
53467: PUSH
53468: LD_INT 3
53470: NEG
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: LIST
53480: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53481: LD_ADDR_VAR 0 29
53485: PUSH
53486: LD_INT 1
53488: NEG
53489: PUSH
53490: LD_INT 3
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: LD_INT 3
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: LD_INT 2
53514: NEG
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 1
53522: NEG
53523: PUSH
53524: LD_INT 4
53526: NEG
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: LD_INT 4
53537: NEG
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 1
53545: PUSH
53546: LD_INT 3
53548: NEG
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 1
53556: NEG
53557: PUSH
53558: LD_INT 5
53560: NEG
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 0
53568: PUSH
53569: LD_INT 5
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: LD_INT 4
53582: NEG
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 1
53590: NEG
53591: PUSH
53592: LD_INT 6
53594: NEG
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: LD_INT 6
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 1
53613: PUSH
53614: LD_INT 5
53616: NEG
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53636: LD_ADDR_VAR 0 30
53640: PUSH
53641: LD_INT 2
53643: PUSH
53644: LD_INT 1
53646: NEG
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 3
53654: PUSH
53655: LD_INT 0
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 3
53664: PUSH
53665: LD_INT 1
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 3
53674: PUSH
53675: LD_INT 1
53677: NEG
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 4
53685: PUSH
53686: LD_INT 0
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 4
53695: PUSH
53696: LD_INT 1
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 4
53705: PUSH
53706: LD_INT 1
53708: NEG
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 5
53716: PUSH
53717: LD_INT 0
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 5
53726: PUSH
53727: LD_INT 1
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 5
53736: PUSH
53737: LD_INT 1
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 6
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 6
53757: PUSH
53758: LD_INT 1
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53779: LD_ADDR_VAR 0 31
53783: PUSH
53784: LD_INT 3
53786: PUSH
53787: LD_INT 2
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 3
53796: PUSH
53797: LD_INT 3
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 2
53806: PUSH
53807: LD_INT 3
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 4
53816: PUSH
53817: LD_INT 3
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 4
53826: PUSH
53827: LD_INT 4
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 3
53836: PUSH
53837: LD_INT 4
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 5
53846: PUSH
53847: LD_INT 4
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 5
53856: PUSH
53857: LD_INT 5
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 4
53866: PUSH
53867: LD_INT 5
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 6
53876: PUSH
53877: LD_INT 5
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 6
53886: PUSH
53887: LD_INT 6
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 5
53896: PUSH
53897: LD_INT 6
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53918: LD_ADDR_VAR 0 32
53922: PUSH
53923: LD_INT 1
53925: PUSH
53926: LD_INT 3
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 0
53935: PUSH
53936: LD_INT 3
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: PUSH
53947: LD_INT 2
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 1
53956: PUSH
53957: LD_INT 4
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 0
53966: PUSH
53967: LD_INT 4
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 1
53976: NEG
53977: PUSH
53978: LD_INT 3
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 1
53987: PUSH
53988: LD_INT 5
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 0
53997: PUSH
53998: LD_INT 5
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: NEG
54008: PUSH
54009: LD_INT 4
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 1
54018: PUSH
54019: LD_INT 6
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: LD_INT 6
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 1
54038: NEG
54039: PUSH
54040: LD_INT 5
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54061: LD_ADDR_VAR 0 33
54065: PUSH
54066: LD_INT 2
54068: NEG
54069: PUSH
54070: LD_INT 1
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 3
54079: NEG
54080: PUSH
54081: LD_INT 0
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 3
54090: NEG
54091: PUSH
54092: LD_INT 1
54094: NEG
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 3
54102: NEG
54103: PUSH
54104: LD_INT 1
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 4
54113: NEG
54114: PUSH
54115: LD_INT 0
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 4
54124: NEG
54125: PUSH
54126: LD_INT 1
54128: NEG
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 4
54136: NEG
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 5
54147: NEG
54148: PUSH
54149: LD_INT 0
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 5
54158: NEG
54159: PUSH
54160: LD_INT 1
54162: NEG
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 5
54170: NEG
54171: PUSH
54172: LD_INT 1
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 6
54181: NEG
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 6
54192: NEG
54193: PUSH
54194: LD_INT 1
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54216: LD_ADDR_VAR 0 34
54220: PUSH
54221: LD_INT 2
54223: NEG
54224: PUSH
54225: LD_INT 3
54227: NEG
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 3
54235: NEG
54236: PUSH
54237: LD_INT 2
54239: NEG
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 3
54247: NEG
54248: PUSH
54249: LD_INT 3
54251: NEG
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 3
54259: NEG
54260: PUSH
54261: LD_INT 4
54263: NEG
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 4
54271: NEG
54272: PUSH
54273: LD_INT 3
54275: NEG
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 4
54283: NEG
54284: PUSH
54285: LD_INT 4
54287: NEG
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 4
54295: NEG
54296: PUSH
54297: LD_INT 5
54299: NEG
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 5
54307: NEG
54308: PUSH
54309: LD_INT 4
54311: NEG
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 5
54319: NEG
54320: PUSH
54321: LD_INT 5
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 5
54331: NEG
54332: PUSH
54333: LD_INT 6
54335: NEG
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 6
54343: NEG
54344: PUSH
54345: LD_INT 5
54347: NEG
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 6
54355: NEG
54356: PUSH
54357: LD_INT 6
54359: NEG
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54379: LD_ADDR_VAR 0 41
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: LD_INT 2
54389: NEG
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 1
54397: NEG
54398: PUSH
54399: LD_INT 3
54401: NEG
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: PUSH
54410: LD_INT 2
54412: NEG
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: LIST
54422: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54423: LD_ADDR_VAR 0 42
54427: PUSH
54428: LD_INT 2
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 2
54440: PUSH
54441: LD_INT 1
54443: NEG
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 3
54451: PUSH
54452: LD_INT 1
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: LIST
54463: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54464: LD_ADDR_VAR 0 43
54468: PUSH
54469: LD_INT 2
54471: PUSH
54472: LD_INT 2
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 3
54481: PUSH
54482: LD_INT 2
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 2
54491: PUSH
54492: LD_INT 3
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: LIST
54503: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54504: LD_ADDR_VAR 0 44
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: LD_INT 2
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 1
54521: PUSH
54522: LD_INT 3
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: LD_INT 2
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: LIST
54544: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54545: LD_ADDR_VAR 0 45
54549: PUSH
54550: LD_INT 2
54552: NEG
54553: PUSH
54554: LD_INT 0
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 2
54563: NEG
54564: PUSH
54565: LD_INT 1
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 3
54574: NEG
54575: PUSH
54576: LD_INT 1
54578: NEG
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: LIST
54588: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54589: LD_ADDR_VAR 0 46
54593: PUSH
54594: LD_INT 2
54596: NEG
54597: PUSH
54598: LD_INT 2
54600: NEG
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 2
54608: NEG
54609: PUSH
54610: LD_INT 3
54612: NEG
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 3
54620: NEG
54621: PUSH
54622: LD_INT 2
54624: NEG
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: LIST
54634: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54635: LD_ADDR_VAR 0 47
54639: PUSH
54640: LD_INT 2
54642: NEG
54643: PUSH
54644: LD_INT 3
54646: NEG
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 1
54654: NEG
54655: PUSH
54656: LD_INT 3
54658: NEG
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54668: LD_ADDR_VAR 0 48
54672: PUSH
54673: LD_INT 1
54675: PUSH
54676: LD_INT 2
54678: NEG
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 2
54686: PUSH
54687: LD_INT 1
54689: NEG
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54699: LD_ADDR_VAR 0 49
54703: PUSH
54704: LD_INT 3
54706: PUSH
54707: LD_INT 1
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 3
54716: PUSH
54717: LD_INT 2
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54728: LD_ADDR_VAR 0 50
54732: PUSH
54733: LD_INT 2
54735: PUSH
54736: LD_INT 3
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 1
54745: PUSH
54746: LD_INT 3
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54757: LD_ADDR_VAR 0 51
54761: PUSH
54762: LD_INT 1
54764: NEG
54765: PUSH
54766: LD_INT 2
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 2
54775: NEG
54776: PUSH
54777: LD_INT 1
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54788: LD_ADDR_VAR 0 52
54792: PUSH
54793: LD_INT 3
54795: NEG
54796: PUSH
54797: LD_INT 1
54799: NEG
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 3
54807: NEG
54808: PUSH
54809: LD_INT 2
54811: NEG
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54821: LD_ADDR_VAR 0 53
54825: PUSH
54826: LD_INT 1
54828: NEG
54829: PUSH
54830: LD_INT 3
54832: NEG
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 0
54840: PUSH
54841: LD_INT 3
54843: NEG
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 1
54851: PUSH
54852: LD_INT 2
54854: NEG
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: LIST
54864: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54865: LD_ADDR_VAR 0 54
54869: PUSH
54870: LD_INT 2
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 3
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 3
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: LIST
54905: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54906: LD_ADDR_VAR 0 55
54910: PUSH
54911: LD_INT 3
54913: PUSH
54914: LD_INT 2
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 3
54923: PUSH
54924: LD_INT 3
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 2
54933: PUSH
54934: LD_INT 3
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: LIST
54945: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54946: LD_ADDR_VAR 0 56
54950: PUSH
54951: LD_INT 1
54953: PUSH
54954: LD_INT 3
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: LD_INT 3
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 1
54973: NEG
54974: PUSH
54975: LD_INT 2
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: LIST
54986: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54987: LD_ADDR_VAR 0 57
54991: PUSH
54992: LD_INT 2
54994: NEG
54995: PUSH
54996: LD_INT 1
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 3
55005: NEG
55006: PUSH
55007: LD_INT 0
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 3
55016: NEG
55017: PUSH
55018: LD_INT 1
55020: NEG
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: LIST
55030: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55031: LD_ADDR_VAR 0 58
55035: PUSH
55036: LD_INT 2
55038: NEG
55039: PUSH
55040: LD_INT 3
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 3
55050: NEG
55051: PUSH
55052: LD_INT 2
55054: NEG
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 3
55062: NEG
55063: PUSH
55064: LD_INT 3
55066: NEG
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: LIST
55076: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55077: LD_ADDR_VAR 0 59
55081: PUSH
55082: LD_INT 1
55084: NEG
55085: PUSH
55086: LD_INT 2
55088: NEG
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 0
55096: PUSH
55097: LD_INT 2
55099: NEG
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 1
55107: PUSH
55108: LD_INT 1
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: LIST
55120: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55121: LD_ADDR_VAR 0 60
55125: PUSH
55126: LD_INT 1
55128: PUSH
55129: LD_INT 1
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 2
55139: PUSH
55140: LD_INT 0
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 2
55149: PUSH
55150: LD_INT 1
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: LIST
55161: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55162: LD_ADDR_VAR 0 61
55166: PUSH
55167: LD_INT 2
55169: PUSH
55170: LD_INT 1
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 2
55179: PUSH
55180: LD_INT 2
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: LD_INT 2
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: LIST
55201: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55202: LD_ADDR_VAR 0 62
55206: PUSH
55207: LD_INT 1
55209: PUSH
55210: LD_INT 2
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 0
55219: PUSH
55220: LD_INT 2
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 1
55229: NEG
55230: PUSH
55231: LD_INT 1
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: LIST
55242: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55243: LD_ADDR_VAR 0 63
55247: PUSH
55248: LD_INT 1
55250: NEG
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 2
55261: NEG
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 2
55272: NEG
55273: PUSH
55274: LD_INT 1
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: LIST
55286: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55287: LD_ADDR_VAR 0 64
55291: PUSH
55292: LD_INT 1
55294: NEG
55295: PUSH
55296: LD_INT 2
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 2
55306: NEG
55307: PUSH
55308: LD_INT 1
55310: NEG
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 2
55318: NEG
55319: PUSH
55320: LD_INT 2
55322: NEG
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: LIST
55332: ST_TO_ADDR
// end ; 2 :
55333: GO 58599
55335: LD_INT 2
55337: DOUBLE
55338: EQUAL
55339: IFTRUE 55343
55341: GO 58598
55343: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55344: LD_ADDR_VAR 0 29
55348: PUSH
55349: LD_INT 4
55351: PUSH
55352: LD_INT 0
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 4
55361: PUSH
55362: LD_INT 1
55364: NEG
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 5
55372: PUSH
55373: LD_INT 0
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 5
55382: PUSH
55383: LD_INT 1
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 4
55392: PUSH
55393: LD_INT 1
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 3
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 3
55412: PUSH
55413: LD_INT 1
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 3
55423: PUSH
55424: LD_INT 2
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 5
55434: PUSH
55435: LD_INT 2
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 3
55444: PUSH
55445: LD_INT 3
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 3
55454: PUSH
55455: LD_INT 2
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 4
55464: PUSH
55465: LD_INT 3
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 4
55474: PUSH
55475: LD_INT 4
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 3
55484: PUSH
55485: LD_INT 4
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 2
55494: PUSH
55495: LD_INT 3
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 2
55504: PUSH
55505: LD_INT 2
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 4
55514: PUSH
55515: LD_INT 2
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 2
55524: PUSH
55525: LD_INT 4
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: LD_INT 4
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: LD_INT 3
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 1
55554: PUSH
55555: LD_INT 4
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 1
55564: PUSH
55565: LD_INT 5
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 0
55574: PUSH
55575: LD_INT 5
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: LD_INT 4
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 1
55595: NEG
55596: PUSH
55597: LD_INT 3
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 2
55606: PUSH
55607: LD_INT 5
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 2
55616: NEG
55617: PUSH
55618: LD_INT 3
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 3
55627: NEG
55628: PUSH
55629: LD_INT 0
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 3
55638: NEG
55639: PUSH
55640: LD_INT 1
55642: NEG
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 2
55650: NEG
55651: PUSH
55652: LD_INT 0
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 2
55661: NEG
55662: PUSH
55663: LD_INT 1
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 3
55672: NEG
55673: PUSH
55674: LD_INT 1
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 4
55683: NEG
55684: PUSH
55685: LD_INT 0
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 4
55694: NEG
55695: PUSH
55696: LD_INT 1
55698: NEG
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 4
55706: NEG
55707: PUSH
55708: LD_INT 2
55710: NEG
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 2
55718: NEG
55719: PUSH
55720: LD_INT 2
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 4
55729: NEG
55730: PUSH
55731: LD_INT 4
55733: NEG
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 4
55741: NEG
55742: PUSH
55743: LD_INT 5
55745: NEG
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 3
55753: NEG
55754: PUSH
55755: LD_INT 4
55757: NEG
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 3
55765: NEG
55766: PUSH
55767: LD_INT 3
55769: NEG
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 4
55777: NEG
55778: PUSH
55779: LD_INT 3
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 5
55789: NEG
55790: PUSH
55791: LD_INT 4
55793: NEG
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 5
55801: NEG
55802: PUSH
55803: LD_INT 5
55805: NEG
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 3
55813: NEG
55814: PUSH
55815: LD_INT 5
55817: NEG
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 5
55825: NEG
55826: PUSH
55827: LD_INT 3
55829: NEG
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55882: LD_ADDR_VAR 0 30
55886: PUSH
55887: LD_INT 4
55889: PUSH
55890: LD_INT 4
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 4
55899: PUSH
55900: LD_INT 3
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 5
55909: PUSH
55910: LD_INT 4
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 5
55919: PUSH
55920: LD_INT 5
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 4
55929: PUSH
55930: LD_INT 5
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 3
55939: PUSH
55940: LD_INT 4
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 3
55949: PUSH
55950: LD_INT 3
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 5
55959: PUSH
55960: LD_INT 3
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 3
55969: PUSH
55970: LD_INT 5
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 0
55979: PUSH
55980: LD_INT 3
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 0
55989: PUSH
55990: LD_INT 2
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 1
55999: PUSH
56000: LD_INT 3
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 1
56009: PUSH
56010: LD_INT 4
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: LD_INT 4
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 1
56029: NEG
56030: PUSH
56031: LD_INT 3
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: LD_INT 2
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 2
56051: PUSH
56052: LD_INT 4
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 2
56061: NEG
56062: PUSH
56063: LD_INT 2
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 4
56072: NEG
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 4
56083: NEG
56084: PUSH
56085: LD_INT 1
56087: NEG
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 3
56095: NEG
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 3
56106: NEG
56107: PUSH
56108: LD_INT 1
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 4
56117: NEG
56118: PUSH
56119: LD_INT 1
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 5
56128: NEG
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 5
56139: NEG
56140: PUSH
56141: LD_INT 1
56143: NEG
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 5
56151: NEG
56152: PUSH
56153: LD_INT 2
56155: NEG
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 3
56163: NEG
56164: PUSH
56165: LD_INT 2
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 3
56174: NEG
56175: PUSH
56176: LD_INT 3
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 3
56186: NEG
56187: PUSH
56188: LD_INT 4
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 2
56198: NEG
56199: PUSH
56200: LD_INT 3
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 2
56210: NEG
56211: PUSH
56212: LD_INT 2
56214: NEG
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 3
56222: NEG
56223: PUSH
56224: LD_INT 2
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 4
56234: NEG
56235: PUSH
56236: LD_INT 3
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 4
56246: NEG
56247: PUSH
56248: LD_INT 4
56250: NEG
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 2
56258: NEG
56259: PUSH
56260: LD_INT 4
56262: NEG
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 4
56270: NEG
56271: PUSH
56272: LD_INT 2
56274: NEG
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 0
56282: PUSH
56283: LD_INT 4
56285: NEG
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 0
56293: PUSH
56294: LD_INT 5
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 1
56304: PUSH
56305: LD_INT 4
56307: NEG
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 1
56315: PUSH
56316: LD_INT 3
56318: NEG
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 0
56326: PUSH
56327: LD_INT 3
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 1
56337: NEG
56338: PUSH
56339: LD_INT 4
56341: NEG
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 1
56349: NEG
56350: PUSH
56351: LD_INT 5
56353: NEG
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 2
56361: PUSH
56362: LD_INT 3
56364: NEG
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 2
56372: NEG
56373: PUSH
56374: LD_INT 5
56376: NEG
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56429: LD_ADDR_VAR 0 31
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: LD_INT 4
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 0
56446: PUSH
56447: LD_INT 3
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 1
56456: PUSH
56457: LD_INT 4
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 1
56466: PUSH
56467: LD_INT 5
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 0
56476: PUSH
56477: LD_INT 5
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 1
56486: NEG
56487: PUSH
56488: LD_INT 4
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 1
56497: NEG
56498: PUSH
56499: LD_INT 3
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 2
56508: PUSH
56509: LD_INT 5
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 2
56518: NEG
56519: PUSH
56520: LD_INT 3
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 3
56529: NEG
56530: PUSH
56531: LD_INT 0
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 3
56540: NEG
56541: PUSH
56542: LD_INT 1
56544: NEG
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 2
56552: NEG
56553: PUSH
56554: LD_INT 0
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 2
56563: NEG
56564: PUSH
56565: LD_INT 1
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 3
56574: NEG
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 4
56585: NEG
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 4
56596: NEG
56597: PUSH
56598: LD_INT 1
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 4
56608: NEG
56609: PUSH
56610: LD_INT 2
56612: NEG
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 2
56620: NEG
56621: PUSH
56622: LD_INT 2
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 4
56631: NEG
56632: PUSH
56633: LD_INT 4
56635: NEG
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 4
56643: NEG
56644: PUSH
56645: LD_INT 5
56647: NEG
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 3
56655: NEG
56656: PUSH
56657: LD_INT 4
56659: NEG
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 3
56667: NEG
56668: PUSH
56669: LD_INT 3
56671: NEG
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 4
56679: NEG
56680: PUSH
56681: LD_INT 3
56683: NEG
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 5
56691: NEG
56692: PUSH
56693: LD_INT 4
56695: NEG
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 5
56703: NEG
56704: PUSH
56705: LD_INT 5
56707: NEG
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 3
56715: NEG
56716: PUSH
56717: LD_INT 5
56719: NEG
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 5
56727: NEG
56728: PUSH
56729: LD_INT 3
56731: NEG
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 0
56739: PUSH
56740: LD_INT 3
56742: NEG
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 0
56750: PUSH
56751: LD_INT 4
56753: NEG
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 1
56761: PUSH
56762: LD_INT 3
56764: NEG
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 1
56772: PUSH
56773: LD_INT 2
56775: NEG
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 0
56783: PUSH
56784: LD_INT 2
56786: NEG
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 1
56794: NEG
56795: PUSH
56796: LD_INT 3
56798: NEG
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 1
56806: NEG
56807: PUSH
56808: LD_INT 4
56810: NEG
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 2
56818: PUSH
56819: LD_INT 2
56821: NEG
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 2
56829: NEG
56830: PUSH
56831: LD_INT 4
56833: NEG
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 4
56841: PUSH
56842: LD_INT 0
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 4
56851: PUSH
56852: LD_INT 1
56854: NEG
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 5
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 5
56872: PUSH
56873: LD_INT 1
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 4
56882: PUSH
56883: LD_INT 1
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 3
56892: PUSH
56893: LD_INT 0
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 3
56902: PUSH
56903: LD_INT 1
56905: NEG
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 3
56913: PUSH
56914: LD_INT 2
56916: NEG
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 5
56924: PUSH
56925: LD_INT 2
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56979: LD_ADDR_VAR 0 32
56983: PUSH
56984: LD_INT 4
56986: NEG
56987: PUSH
56988: LD_INT 0
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 4
56997: NEG
56998: PUSH
56999: LD_INT 1
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 3
57009: NEG
57010: PUSH
57011: LD_INT 0
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 3
57020: NEG
57021: PUSH
57022: LD_INT 1
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 4
57031: NEG
57032: PUSH
57033: LD_INT 1
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 5
57042: NEG
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 5
57053: NEG
57054: PUSH
57055: LD_INT 1
57057: NEG
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 5
57065: NEG
57066: PUSH
57067: LD_INT 2
57069: NEG
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 3
57077: NEG
57078: PUSH
57079: LD_INT 2
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 3
57088: NEG
57089: PUSH
57090: LD_INT 3
57092: NEG
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 3
57100: NEG
57101: PUSH
57102: LD_INT 4
57104: NEG
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 2
57112: NEG
57113: PUSH
57114: LD_INT 3
57116: NEG
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 2
57124: NEG
57125: PUSH
57126: LD_INT 2
57128: NEG
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 3
57136: NEG
57137: PUSH
57138: LD_INT 2
57140: NEG
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 4
57148: NEG
57149: PUSH
57150: LD_INT 3
57152: NEG
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 4
57160: NEG
57161: PUSH
57162: LD_INT 4
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 2
57172: NEG
57173: PUSH
57174: LD_INT 4
57176: NEG
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 4
57184: NEG
57185: PUSH
57186: LD_INT 2
57188: NEG
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 0
57196: PUSH
57197: LD_INT 4
57199: NEG
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 0
57207: PUSH
57208: LD_INT 5
57210: NEG
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 1
57218: PUSH
57219: LD_INT 4
57221: NEG
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 1
57229: PUSH
57230: LD_INT 3
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: LD_INT 3
57243: NEG
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 1
57251: NEG
57252: PUSH
57253: LD_INT 4
57255: NEG
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 1
57263: NEG
57264: PUSH
57265: LD_INT 5
57267: NEG
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 2
57275: PUSH
57276: LD_INT 3
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 2
57286: NEG
57287: PUSH
57288: LD_INT 5
57290: NEG
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 3
57298: PUSH
57299: LD_INT 0
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 3
57308: PUSH
57309: LD_INT 1
57311: NEG
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 4
57319: PUSH
57320: LD_INT 0
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 4
57329: PUSH
57330: LD_INT 1
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 3
57339: PUSH
57340: LD_INT 1
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 2
57349: PUSH
57350: LD_INT 0
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 2
57359: PUSH
57360: LD_INT 1
57362: NEG
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 2
57370: PUSH
57371: LD_INT 2
57373: NEG
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 4
57381: PUSH
57382: LD_INT 2
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 4
57391: PUSH
57392: LD_INT 4
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 4
57401: PUSH
57402: LD_INT 3
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 5
57411: PUSH
57412: LD_INT 4
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 5
57421: PUSH
57422: LD_INT 5
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 4
57431: PUSH
57432: LD_INT 5
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 3
57441: PUSH
57442: LD_INT 4
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 3
57451: PUSH
57452: LD_INT 3
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 5
57461: PUSH
57462: LD_INT 3
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 3
57471: PUSH
57472: LD_INT 5
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57526: LD_ADDR_VAR 0 33
57530: PUSH
57531: LD_INT 4
57533: NEG
57534: PUSH
57535: LD_INT 4
57537: NEG
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 4
57545: NEG
57546: PUSH
57547: LD_INT 5
57549: NEG
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 3
57557: NEG
57558: PUSH
57559: LD_INT 4
57561: NEG
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 3
57569: NEG
57570: PUSH
57571: LD_INT 3
57573: NEG
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 4
57581: NEG
57582: PUSH
57583: LD_INT 3
57585: NEG
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 5
57593: NEG
57594: PUSH
57595: LD_INT 4
57597: NEG
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 5
57605: NEG
57606: PUSH
57607: LD_INT 5
57609: NEG
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 3
57617: NEG
57618: PUSH
57619: LD_INT 5
57621: NEG
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 5
57629: NEG
57630: PUSH
57631: LD_INT 3
57633: NEG
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 0
57641: PUSH
57642: LD_INT 3
57644: NEG
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 0
57652: PUSH
57653: LD_INT 4
57655: NEG
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 1
57663: PUSH
57664: LD_INT 3
57666: NEG
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 1
57674: PUSH
57675: LD_INT 2
57677: NEG
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 0
57685: PUSH
57686: LD_INT 2
57688: NEG
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 1
57696: NEG
57697: PUSH
57698: LD_INT 3
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 1
57708: NEG
57709: PUSH
57710: LD_INT 4
57712: NEG
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 2
57720: PUSH
57721: LD_INT 2
57723: NEG
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 2
57731: NEG
57732: PUSH
57733: LD_INT 4
57735: NEG
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 4
57743: PUSH
57744: LD_INT 0
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 4
57753: PUSH
57754: LD_INT 1
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 5
57764: PUSH
57765: LD_INT 0
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 5
57774: PUSH
57775: LD_INT 1
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 4
57784: PUSH
57785: LD_INT 1
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 3
57794: PUSH
57795: LD_INT 0
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 3
57804: PUSH
57805: LD_INT 1
57807: NEG
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 3
57815: PUSH
57816: LD_INT 2
57818: NEG
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 5
57826: PUSH
57827: LD_INT 2
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 3
57836: PUSH
57837: LD_INT 3
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 3
57846: PUSH
57847: LD_INT 2
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 4
57856: PUSH
57857: LD_INT 3
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 4
57866: PUSH
57867: LD_INT 4
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 3
57876: PUSH
57877: LD_INT 4
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 2
57886: PUSH
57887: LD_INT 3
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 2
57896: PUSH
57897: LD_INT 2
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 4
57906: PUSH
57907: LD_INT 2
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 2
57916: PUSH
57917: LD_INT 4
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 0
57926: PUSH
57927: LD_INT 4
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 0
57936: PUSH
57937: LD_INT 3
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 1
57946: PUSH
57947: LD_INT 4
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 1
57956: PUSH
57957: LD_INT 5
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 0
57966: PUSH
57967: LD_INT 5
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 1
57976: NEG
57977: PUSH
57978: LD_INT 4
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 1
57987: NEG
57988: PUSH
57989: LD_INT 3
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 2
57998: PUSH
57999: LD_INT 5
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 2
58008: NEG
58009: PUSH
58010: LD_INT 3
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58064: LD_ADDR_VAR 0 34
58068: PUSH
58069: LD_INT 0
58071: PUSH
58072: LD_INT 4
58074: NEG
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 0
58082: PUSH
58083: LD_INT 5
58085: NEG
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 1
58093: PUSH
58094: LD_INT 4
58096: NEG
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 1
58104: PUSH
58105: LD_INT 3
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 0
58115: PUSH
58116: LD_INT 3
58118: NEG
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 1
58126: NEG
58127: PUSH
58128: LD_INT 4
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 1
58138: NEG
58139: PUSH
58140: LD_INT 5
58142: NEG
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 2
58150: PUSH
58151: LD_INT 3
58153: NEG
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 2
58161: NEG
58162: PUSH
58163: LD_INT 5
58165: NEG
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 3
58173: PUSH
58174: LD_INT 0
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 3
58183: PUSH
58184: LD_INT 1
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 4
58194: PUSH
58195: LD_INT 0
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 4
58204: PUSH
58205: LD_INT 1
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 3
58214: PUSH
58215: LD_INT 1
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 2
58224: PUSH
58225: LD_INT 0
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 2
58234: PUSH
58235: LD_INT 1
58237: NEG
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 2
58245: PUSH
58246: LD_INT 2
58248: NEG
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 4
58256: PUSH
58257: LD_INT 2
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 4
58266: PUSH
58267: LD_INT 4
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 4
58276: PUSH
58277: LD_INT 3
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 5
58286: PUSH
58287: LD_INT 4
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 5
58296: PUSH
58297: LD_INT 5
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 4
58306: PUSH
58307: LD_INT 5
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 3
58316: PUSH
58317: LD_INT 4
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 3
58326: PUSH
58327: LD_INT 3
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 5
58336: PUSH
58337: LD_INT 3
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 3
58346: PUSH
58347: LD_INT 5
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: LD_INT 3
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 0
58366: PUSH
58367: LD_INT 2
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 1
58376: PUSH
58377: LD_INT 3
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 1
58386: PUSH
58387: LD_INT 4
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 0
58396: PUSH
58397: LD_INT 4
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 1
58406: NEG
58407: PUSH
58408: LD_INT 3
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 1
58417: NEG
58418: PUSH
58419: LD_INT 2
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 2
58428: PUSH
58429: LD_INT 4
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 2
58438: NEG
58439: PUSH
58440: LD_INT 2
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 4
58449: NEG
58450: PUSH
58451: LD_INT 0
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 4
58460: NEG
58461: PUSH
58462: LD_INT 1
58464: NEG
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 3
58472: NEG
58473: PUSH
58474: LD_INT 0
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 3
58483: NEG
58484: PUSH
58485: LD_INT 1
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 4
58494: NEG
58495: PUSH
58496: LD_INT 1
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 5
58505: NEG
58506: PUSH
58507: LD_INT 0
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 5
58516: NEG
58517: PUSH
58518: LD_INT 1
58520: NEG
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 5
58528: NEG
58529: PUSH
58530: LD_INT 2
58532: NEG
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 3
58540: NEG
58541: PUSH
58542: LD_INT 2
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: ST_TO_ADDR
// end ; end ;
58596: GO 58599
58598: POP
// case btype of b_depot , b_warehouse :
58599: LD_VAR 0 1
58603: PUSH
58604: LD_INT 0
58606: DOUBLE
58607: EQUAL
58608: IFTRUE 58618
58610: LD_INT 1
58612: DOUBLE
58613: EQUAL
58614: IFTRUE 58618
58616: GO 58819
58618: POP
// case nation of nation_american :
58619: LD_VAR 0 5
58623: PUSH
58624: LD_INT 1
58626: DOUBLE
58627: EQUAL
58628: IFTRUE 58632
58630: GO 58688
58632: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58633: LD_ADDR_VAR 0 9
58637: PUSH
58638: LD_VAR 0 11
58642: PUSH
58643: LD_VAR 0 12
58647: PUSH
58648: LD_VAR 0 13
58652: PUSH
58653: LD_VAR 0 14
58657: PUSH
58658: LD_VAR 0 15
58662: PUSH
58663: LD_VAR 0 16
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: PUSH
58676: LD_VAR 0 4
58680: PUSH
58681: LD_INT 1
58683: PLUS
58684: ARRAY
58685: ST_TO_ADDR
58686: GO 58817
58688: LD_INT 2
58690: DOUBLE
58691: EQUAL
58692: IFTRUE 58696
58694: GO 58752
58696: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58697: LD_ADDR_VAR 0 9
58701: PUSH
58702: LD_VAR 0 17
58706: PUSH
58707: LD_VAR 0 18
58711: PUSH
58712: LD_VAR 0 19
58716: PUSH
58717: LD_VAR 0 20
58721: PUSH
58722: LD_VAR 0 21
58726: PUSH
58727: LD_VAR 0 22
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: PUSH
58740: LD_VAR 0 4
58744: PUSH
58745: LD_INT 1
58747: PLUS
58748: ARRAY
58749: ST_TO_ADDR
58750: GO 58817
58752: LD_INT 3
58754: DOUBLE
58755: EQUAL
58756: IFTRUE 58760
58758: GO 58816
58760: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58761: LD_ADDR_VAR 0 9
58765: PUSH
58766: LD_VAR 0 23
58770: PUSH
58771: LD_VAR 0 24
58775: PUSH
58776: LD_VAR 0 25
58780: PUSH
58781: LD_VAR 0 26
58785: PUSH
58786: LD_VAR 0 27
58790: PUSH
58791: LD_VAR 0 28
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: PUSH
58804: LD_VAR 0 4
58808: PUSH
58809: LD_INT 1
58811: PLUS
58812: ARRAY
58813: ST_TO_ADDR
58814: GO 58817
58816: POP
58817: GO 59372
58819: LD_INT 2
58821: DOUBLE
58822: EQUAL
58823: IFTRUE 58833
58825: LD_INT 3
58827: DOUBLE
58828: EQUAL
58829: IFTRUE 58833
58831: GO 58889
58833: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58834: LD_ADDR_VAR 0 9
58838: PUSH
58839: LD_VAR 0 29
58843: PUSH
58844: LD_VAR 0 30
58848: PUSH
58849: LD_VAR 0 31
58853: PUSH
58854: LD_VAR 0 32
58858: PUSH
58859: LD_VAR 0 33
58863: PUSH
58864: LD_VAR 0 34
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: PUSH
58877: LD_VAR 0 4
58881: PUSH
58882: LD_INT 1
58884: PLUS
58885: ARRAY
58886: ST_TO_ADDR
58887: GO 59372
58889: LD_INT 16
58891: DOUBLE
58892: EQUAL
58893: IFTRUE 58951
58895: LD_INT 17
58897: DOUBLE
58898: EQUAL
58899: IFTRUE 58951
58901: LD_INT 18
58903: DOUBLE
58904: EQUAL
58905: IFTRUE 58951
58907: LD_INT 19
58909: DOUBLE
58910: EQUAL
58911: IFTRUE 58951
58913: LD_INT 22
58915: DOUBLE
58916: EQUAL
58917: IFTRUE 58951
58919: LD_INT 20
58921: DOUBLE
58922: EQUAL
58923: IFTRUE 58951
58925: LD_INT 21
58927: DOUBLE
58928: EQUAL
58929: IFTRUE 58951
58931: LD_INT 23
58933: DOUBLE
58934: EQUAL
58935: IFTRUE 58951
58937: LD_INT 24
58939: DOUBLE
58940: EQUAL
58941: IFTRUE 58951
58943: LD_INT 25
58945: DOUBLE
58946: EQUAL
58947: IFTRUE 58951
58949: GO 59007
58951: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58952: LD_ADDR_VAR 0 9
58956: PUSH
58957: LD_VAR 0 35
58961: PUSH
58962: LD_VAR 0 36
58966: PUSH
58967: LD_VAR 0 37
58971: PUSH
58972: LD_VAR 0 38
58976: PUSH
58977: LD_VAR 0 39
58981: PUSH
58982: LD_VAR 0 40
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: PUSH
58995: LD_VAR 0 4
58999: PUSH
59000: LD_INT 1
59002: PLUS
59003: ARRAY
59004: ST_TO_ADDR
59005: GO 59372
59007: LD_INT 6
59009: DOUBLE
59010: EQUAL
59011: IFTRUE 59063
59013: LD_INT 7
59015: DOUBLE
59016: EQUAL
59017: IFTRUE 59063
59019: LD_INT 8
59021: DOUBLE
59022: EQUAL
59023: IFTRUE 59063
59025: LD_INT 13
59027: DOUBLE
59028: EQUAL
59029: IFTRUE 59063
59031: LD_INT 12
59033: DOUBLE
59034: EQUAL
59035: IFTRUE 59063
59037: LD_INT 15
59039: DOUBLE
59040: EQUAL
59041: IFTRUE 59063
59043: LD_INT 11
59045: DOUBLE
59046: EQUAL
59047: IFTRUE 59063
59049: LD_INT 14
59051: DOUBLE
59052: EQUAL
59053: IFTRUE 59063
59055: LD_INT 10
59057: DOUBLE
59058: EQUAL
59059: IFTRUE 59063
59061: GO 59119
59063: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59064: LD_ADDR_VAR 0 9
59068: PUSH
59069: LD_VAR 0 41
59073: PUSH
59074: LD_VAR 0 42
59078: PUSH
59079: LD_VAR 0 43
59083: PUSH
59084: LD_VAR 0 44
59088: PUSH
59089: LD_VAR 0 45
59093: PUSH
59094: LD_VAR 0 46
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: PUSH
59107: LD_VAR 0 4
59111: PUSH
59112: LD_INT 1
59114: PLUS
59115: ARRAY
59116: ST_TO_ADDR
59117: GO 59372
59119: LD_INT 36
59121: DOUBLE
59122: EQUAL
59123: IFTRUE 59127
59125: GO 59183
59127: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59128: LD_ADDR_VAR 0 9
59132: PUSH
59133: LD_VAR 0 47
59137: PUSH
59138: LD_VAR 0 48
59142: PUSH
59143: LD_VAR 0 49
59147: PUSH
59148: LD_VAR 0 50
59152: PUSH
59153: LD_VAR 0 51
59157: PUSH
59158: LD_VAR 0 52
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: PUSH
59171: LD_VAR 0 4
59175: PUSH
59176: LD_INT 1
59178: PLUS
59179: ARRAY
59180: ST_TO_ADDR
59181: GO 59372
59183: LD_INT 4
59185: DOUBLE
59186: EQUAL
59187: IFTRUE 59209
59189: LD_INT 5
59191: DOUBLE
59192: EQUAL
59193: IFTRUE 59209
59195: LD_INT 34
59197: DOUBLE
59198: EQUAL
59199: IFTRUE 59209
59201: LD_INT 37
59203: DOUBLE
59204: EQUAL
59205: IFTRUE 59209
59207: GO 59265
59209: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59210: LD_ADDR_VAR 0 9
59214: PUSH
59215: LD_VAR 0 53
59219: PUSH
59220: LD_VAR 0 54
59224: PUSH
59225: LD_VAR 0 55
59229: PUSH
59230: LD_VAR 0 56
59234: PUSH
59235: LD_VAR 0 57
59239: PUSH
59240: LD_VAR 0 58
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: PUSH
59253: LD_VAR 0 4
59257: PUSH
59258: LD_INT 1
59260: PLUS
59261: ARRAY
59262: ST_TO_ADDR
59263: GO 59372
59265: LD_INT 31
59267: DOUBLE
59268: EQUAL
59269: IFTRUE 59315
59271: LD_INT 32
59273: DOUBLE
59274: EQUAL
59275: IFTRUE 59315
59277: LD_INT 33
59279: DOUBLE
59280: EQUAL
59281: IFTRUE 59315
59283: LD_INT 27
59285: DOUBLE
59286: EQUAL
59287: IFTRUE 59315
59289: LD_INT 26
59291: DOUBLE
59292: EQUAL
59293: IFTRUE 59315
59295: LD_INT 28
59297: DOUBLE
59298: EQUAL
59299: IFTRUE 59315
59301: LD_INT 29
59303: DOUBLE
59304: EQUAL
59305: IFTRUE 59315
59307: LD_INT 30
59309: DOUBLE
59310: EQUAL
59311: IFTRUE 59315
59313: GO 59371
59315: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59316: LD_ADDR_VAR 0 9
59320: PUSH
59321: LD_VAR 0 59
59325: PUSH
59326: LD_VAR 0 60
59330: PUSH
59331: LD_VAR 0 61
59335: PUSH
59336: LD_VAR 0 62
59340: PUSH
59341: LD_VAR 0 63
59345: PUSH
59346: LD_VAR 0 64
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: PUSH
59359: LD_VAR 0 4
59363: PUSH
59364: LD_INT 1
59366: PLUS
59367: ARRAY
59368: ST_TO_ADDR
59369: GO 59372
59371: POP
// temp_list2 = [ ] ;
59372: LD_ADDR_VAR 0 10
59376: PUSH
59377: EMPTY
59378: ST_TO_ADDR
// for i in temp_list do
59379: LD_ADDR_VAR 0 8
59383: PUSH
59384: LD_VAR 0 9
59388: PUSH
59389: FOR_IN
59390: IFFALSE 59442
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59392: LD_ADDR_VAR 0 10
59396: PUSH
59397: LD_VAR 0 10
59401: PUSH
59402: LD_VAR 0 8
59406: PUSH
59407: LD_INT 1
59409: ARRAY
59410: PUSH
59411: LD_VAR 0 2
59415: PLUS
59416: PUSH
59417: LD_VAR 0 8
59421: PUSH
59422: LD_INT 2
59424: ARRAY
59425: PUSH
59426: LD_VAR 0 3
59430: PLUS
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: EMPTY
59437: LIST
59438: ADD
59439: ST_TO_ADDR
59440: GO 59389
59442: POP
59443: POP
// result = temp_list2 ;
59444: LD_ADDR_VAR 0 7
59448: PUSH
59449: LD_VAR 0 10
59453: ST_TO_ADDR
// end ;
59454: LD_VAR 0 7
59458: RET
// export function EnemyInRange ( unit , dist ) ; begin
59459: LD_INT 0
59461: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59462: LD_ADDR_VAR 0 3
59466: PUSH
59467: LD_VAR 0 1
59471: PPUSH
59472: CALL_OW 255
59476: PPUSH
59477: LD_VAR 0 1
59481: PPUSH
59482: CALL_OW 250
59486: PPUSH
59487: LD_VAR 0 1
59491: PPUSH
59492: CALL_OW 251
59496: PPUSH
59497: LD_VAR 0 2
59501: PPUSH
59502: CALL 32832 0 4
59506: PUSH
59507: LD_INT 4
59509: ARRAY
59510: ST_TO_ADDR
// end ;
59511: LD_VAR 0 3
59515: RET
// export function PlayerSeeMe ( unit ) ; begin
59516: LD_INT 0
59518: PPUSH
// result := See ( your_side , unit ) ;
59519: LD_ADDR_VAR 0 2
59523: PUSH
59524: LD_OWVAR 2
59528: PPUSH
59529: LD_VAR 0 1
59533: PPUSH
59534: CALL_OW 292
59538: ST_TO_ADDR
// end ;
59539: LD_VAR 0 2
59543: RET
// export function ReverseDir ( unit ) ; begin
59544: LD_INT 0
59546: PPUSH
// if not unit then
59547: LD_VAR 0 1
59551: NOT
59552: IFFALSE 59556
// exit ;
59554: GO 59579
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59556: LD_ADDR_VAR 0 2
59560: PUSH
59561: LD_VAR 0 1
59565: PPUSH
59566: CALL_OW 254
59570: PUSH
59571: LD_INT 3
59573: PLUS
59574: PUSH
59575: LD_INT 6
59577: MOD
59578: ST_TO_ADDR
// end ;
59579: LD_VAR 0 2
59583: RET
// export function ReverseArray ( array ) ; var i ; begin
59584: LD_INT 0
59586: PPUSH
59587: PPUSH
// if not array then
59588: LD_VAR 0 1
59592: NOT
59593: IFFALSE 59597
// exit ;
59595: GO 59652
// result := [ ] ;
59597: LD_ADDR_VAR 0 2
59601: PUSH
59602: EMPTY
59603: ST_TO_ADDR
// for i := array downto 1 do
59604: LD_ADDR_VAR 0 3
59608: PUSH
59609: DOUBLE
59610: LD_VAR 0 1
59614: INC
59615: ST_TO_ADDR
59616: LD_INT 1
59618: PUSH
59619: FOR_DOWNTO
59620: IFFALSE 59650
// result := Join ( result , array [ i ] ) ;
59622: LD_ADDR_VAR 0 2
59626: PUSH
59627: LD_VAR 0 2
59631: PPUSH
59632: LD_VAR 0 1
59636: PUSH
59637: LD_VAR 0 3
59641: ARRAY
59642: PPUSH
59643: CALL 64297 0 2
59647: ST_TO_ADDR
59648: GO 59619
59650: POP
59651: POP
// end ;
59652: LD_VAR 0 2
59656: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
59657: LD_INT 0
59659: PPUSH
59660: PPUSH
59661: PPUSH
59662: PPUSH
59663: PPUSH
59664: PPUSH
// if not unit or not hexes then
59665: LD_VAR 0 1
59669: NOT
59670: PUSH
59671: LD_VAR 0 2
59675: NOT
59676: OR
59677: IFFALSE 59681
// exit ;
59679: GO 59804
// dist := 9999 ;
59681: LD_ADDR_VAR 0 5
59685: PUSH
59686: LD_INT 9999
59688: ST_TO_ADDR
// for i = 1 to hexes do
59689: LD_ADDR_VAR 0 4
59693: PUSH
59694: DOUBLE
59695: LD_INT 1
59697: DEC
59698: ST_TO_ADDR
59699: LD_VAR 0 2
59703: PUSH
59704: FOR_TO
59705: IFFALSE 59792
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59707: LD_ADDR_VAR 0 6
59711: PUSH
59712: LD_VAR 0 1
59716: PPUSH
59717: LD_VAR 0 2
59721: PUSH
59722: LD_VAR 0 4
59726: ARRAY
59727: PUSH
59728: LD_INT 1
59730: ARRAY
59731: PPUSH
59732: LD_VAR 0 2
59736: PUSH
59737: LD_VAR 0 4
59741: ARRAY
59742: PUSH
59743: LD_INT 2
59745: ARRAY
59746: PPUSH
59747: CALL_OW 297
59751: ST_TO_ADDR
// if tdist < dist then
59752: LD_VAR 0 6
59756: PUSH
59757: LD_VAR 0 5
59761: LESS
59762: IFFALSE 59790
// begin hex := hexes [ i ] ;
59764: LD_ADDR_VAR 0 8
59768: PUSH
59769: LD_VAR 0 2
59773: PUSH
59774: LD_VAR 0 4
59778: ARRAY
59779: ST_TO_ADDR
// dist := tdist ;
59780: LD_ADDR_VAR 0 5
59784: PUSH
59785: LD_VAR 0 6
59789: ST_TO_ADDR
// end ; end ;
59790: GO 59704
59792: POP
59793: POP
// result := hex ;
59794: LD_ADDR_VAR 0 3
59798: PUSH
59799: LD_VAR 0 8
59803: ST_TO_ADDR
// end ;
59804: LD_VAR 0 3
59808: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59809: LD_INT 0
59811: PPUSH
59812: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59813: LD_VAR 0 1
59817: NOT
59818: PUSH
59819: LD_VAR 0 1
59823: PUSH
59824: LD_INT 21
59826: PUSH
59827: LD_INT 2
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 23
59836: PUSH
59837: LD_INT 2
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PPUSH
59848: CALL_OW 69
59852: IN
59853: NOT
59854: OR
59855: IFFALSE 59859
// exit ;
59857: GO 59906
// for i = 1 to 3 do
59859: LD_ADDR_VAR 0 3
59863: PUSH
59864: DOUBLE
59865: LD_INT 1
59867: DEC
59868: ST_TO_ADDR
59869: LD_INT 3
59871: PUSH
59872: FOR_TO
59873: IFFALSE 59904
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59875: LD_VAR 0 1
59879: PPUSH
59880: CALL_OW 250
59884: PPUSH
59885: LD_VAR 0 1
59889: PPUSH
59890: CALL_OW 251
59894: PPUSH
59895: LD_INT 1
59897: PPUSH
59898: CALL_OW 453
59902: GO 59872
59904: POP
59905: POP
// end ;
59906: LD_VAR 0 2
59910: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59911: LD_INT 0
59913: PPUSH
59914: PPUSH
59915: PPUSH
59916: PPUSH
59917: PPUSH
59918: PPUSH
// if not unit or not enemy_unit then
59919: LD_VAR 0 1
59923: NOT
59924: PUSH
59925: LD_VAR 0 2
59929: NOT
59930: OR
59931: IFFALSE 59935
// exit ;
59933: GO 60402
// if GetLives ( i ) < 250 then
59935: LD_VAR 0 4
59939: PPUSH
59940: CALL_OW 256
59944: PUSH
59945: LD_INT 250
59947: LESS
59948: IFFALSE 59961
// begin ComAutodestruct ( i ) ;
59950: LD_VAR 0 4
59954: PPUSH
59955: CALL 59809 0 1
// exit ;
59959: GO 60402
// end ; x := GetX ( enemy_unit ) ;
59961: LD_ADDR_VAR 0 7
59965: PUSH
59966: LD_VAR 0 2
59970: PPUSH
59971: CALL_OW 250
59975: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59976: LD_ADDR_VAR 0 8
59980: PUSH
59981: LD_VAR 0 2
59985: PPUSH
59986: CALL_OW 251
59990: ST_TO_ADDR
// if not x or not y then
59991: LD_VAR 0 7
59995: NOT
59996: PUSH
59997: LD_VAR 0 8
60001: NOT
60002: OR
60003: IFFALSE 60007
// exit ;
60005: GO 60402
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60007: LD_ADDR_VAR 0 6
60011: PUSH
60012: LD_VAR 0 7
60016: PPUSH
60017: LD_INT 0
60019: PPUSH
60020: LD_INT 4
60022: PPUSH
60023: CALL_OW 272
60027: PUSH
60028: LD_VAR 0 8
60032: PPUSH
60033: LD_INT 0
60035: PPUSH
60036: LD_INT 4
60038: PPUSH
60039: CALL_OW 273
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_VAR 0 7
60052: PPUSH
60053: LD_INT 1
60055: PPUSH
60056: LD_INT 4
60058: PPUSH
60059: CALL_OW 272
60063: PUSH
60064: LD_VAR 0 8
60068: PPUSH
60069: LD_INT 1
60071: PPUSH
60072: LD_INT 4
60074: PPUSH
60075: CALL_OW 273
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_VAR 0 7
60088: PPUSH
60089: LD_INT 2
60091: PPUSH
60092: LD_INT 4
60094: PPUSH
60095: CALL_OW 272
60099: PUSH
60100: LD_VAR 0 8
60104: PPUSH
60105: LD_INT 2
60107: PPUSH
60108: LD_INT 4
60110: PPUSH
60111: CALL_OW 273
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_VAR 0 7
60124: PPUSH
60125: LD_INT 3
60127: PPUSH
60128: LD_INT 4
60130: PPUSH
60131: CALL_OW 272
60135: PUSH
60136: LD_VAR 0 8
60140: PPUSH
60141: LD_INT 3
60143: PPUSH
60144: LD_INT 4
60146: PPUSH
60147: CALL_OW 273
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_VAR 0 7
60160: PPUSH
60161: LD_INT 4
60163: PPUSH
60164: LD_INT 4
60166: PPUSH
60167: CALL_OW 272
60171: PUSH
60172: LD_VAR 0 8
60176: PPUSH
60177: LD_INT 4
60179: PPUSH
60180: LD_INT 4
60182: PPUSH
60183: CALL_OW 273
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_VAR 0 7
60196: PPUSH
60197: LD_INT 5
60199: PPUSH
60200: LD_INT 4
60202: PPUSH
60203: CALL_OW 272
60207: PUSH
60208: LD_VAR 0 8
60212: PPUSH
60213: LD_INT 5
60215: PPUSH
60216: LD_INT 4
60218: PPUSH
60219: CALL_OW 273
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: ST_TO_ADDR
// for i = tmp downto 1 do
60236: LD_ADDR_VAR 0 4
60240: PUSH
60241: DOUBLE
60242: LD_VAR 0 6
60246: INC
60247: ST_TO_ADDR
60248: LD_INT 1
60250: PUSH
60251: FOR_DOWNTO
60252: IFFALSE 60353
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60254: LD_VAR 0 6
60258: PUSH
60259: LD_VAR 0 4
60263: ARRAY
60264: PUSH
60265: LD_INT 1
60267: ARRAY
60268: PPUSH
60269: LD_VAR 0 6
60273: PUSH
60274: LD_VAR 0 4
60278: ARRAY
60279: PUSH
60280: LD_INT 2
60282: ARRAY
60283: PPUSH
60284: CALL_OW 488
60288: NOT
60289: PUSH
60290: LD_VAR 0 6
60294: PUSH
60295: LD_VAR 0 4
60299: ARRAY
60300: PUSH
60301: LD_INT 1
60303: ARRAY
60304: PPUSH
60305: LD_VAR 0 6
60309: PUSH
60310: LD_VAR 0 4
60314: ARRAY
60315: PUSH
60316: LD_INT 2
60318: ARRAY
60319: PPUSH
60320: CALL_OW 428
60324: PUSH
60325: LD_INT 0
60327: NONEQUAL
60328: OR
60329: IFFALSE 60351
// tmp := Delete ( tmp , i ) ;
60331: LD_ADDR_VAR 0 6
60335: PUSH
60336: LD_VAR 0 6
60340: PPUSH
60341: LD_VAR 0 4
60345: PPUSH
60346: CALL_OW 3
60350: ST_TO_ADDR
60351: GO 60251
60353: POP
60354: POP
// j := GetClosestHex ( unit , tmp ) ;
60355: LD_ADDR_VAR 0 5
60359: PUSH
60360: LD_VAR 0 1
60364: PPUSH
60365: LD_VAR 0 6
60369: PPUSH
60370: CALL 59657 0 2
60374: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60375: LD_VAR 0 1
60379: PPUSH
60380: LD_VAR 0 5
60384: PUSH
60385: LD_INT 1
60387: ARRAY
60388: PPUSH
60389: LD_VAR 0 5
60393: PUSH
60394: LD_INT 2
60396: ARRAY
60397: PPUSH
60398: CALL_OW 111
// end ;
60402: LD_VAR 0 3
60406: RET
// export function PrepareApemanSoldier ( ) ; begin
60407: LD_INT 0
60409: PPUSH
// uc_nation := 0 ;
60410: LD_ADDR_OWVAR 21
60414: PUSH
60415: LD_INT 0
60417: ST_TO_ADDR
// hc_sex := sex_male ;
60418: LD_ADDR_OWVAR 27
60422: PUSH
60423: LD_INT 1
60425: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60426: LD_ADDR_OWVAR 28
60430: PUSH
60431: LD_INT 15
60433: ST_TO_ADDR
// hc_gallery :=  ;
60434: LD_ADDR_OWVAR 33
60438: PUSH
60439: LD_STRING 
60441: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60442: LD_ADDR_OWVAR 31
60446: PUSH
60447: LD_INT 0
60449: PPUSH
60450: LD_INT 3
60452: PPUSH
60453: CALL_OW 12
60457: PUSH
60458: LD_INT 0
60460: PPUSH
60461: LD_INT 3
60463: PPUSH
60464: CALL_OW 12
60468: PUSH
60469: LD_INT 0
60471: PUSH
60472: LD_INT 0
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: ST_TO_ADDR
// end ;
60481: LD_VAR 0 1
60485: RET
// export function PrepareApemanEngineer ( ) ; begin
60486: LD_INT 0
60488: PPUSH
// uc_nation := 0 ;
60489: LD_ADDR_OWVAR 21
60493: PUSH
60494: LD_INT 0
60496: ST_TO_ADDR
// hc_sex := sex_male ;
60497: LD_ADDR_OWVAR 27
60501: PUSH
60502: LD_INT 1
60504: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60505: LD_ADDR_OWVAR 28
60509: PUSH
60510: LD_INT 16
60512: ST_TO_ADDR
// hc_gallery :=  ;
60513: LD_ADDR_OWVAR 33
60517: PUSH
60518: LD_STRING 
60520: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60521: LD_ADDR_OWVAR 31
60525: PUSH
60526: LD_INT 0
60528: PPUSH
60529: LD_INT 3
60531: PPUSH
60532: CALL_OW 12
60536: PUSH
60537: LD_INT 0
60539: PPUSH
60540: LD_INT 3
60542: PPUSH
60543: CALL_OW 12
60547: PUSH
60548: LD_INT 0
60550: PUSH
60551: LD_INT 0
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: ST_TO_ADDR
// end ;
60560: LD_VAR 0 1
60564: RET
// export function PrepareApeman ( agressivity ) ; begin
60565: LD_INT 0
60567: PPUSH
// uc_side := 0 ;
60568: LD_ADDR_OWVAR 20
60572: PUSH
60573: LD_INT 0
60575: ST_TO_ADDR
// uc_nation := 0 ;
60576: LD_ADDR_OWVAR 21
60580: PUSH
60581: LD_INT 0
60583: ST_TO_ADDR
// hc_sex := sex_male ;
60584: LD_ADDR_OWVAR 27
60588: PUSH
60589: LD_INT 1
60591: ST_TO_ADDR
// hc_class := class_apeman ;
60592: LD_ADDR_OWVAR 28
60596: PUSH
60597: LD_INT 12
60599: ST_TO_ADDR
// hc_gallery :=  ;
60600: LD_ADDR_OWVAR 33
60604: PUSH
60605: LD_STRING 
60607: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60608: LD_ADDR_OWVAR 35
60612: PUSH
60613: LD_VAR 0 1
60617: NEG
60618: PPUSH
60619: LD_VAR 0 1
60623: PPUSH
60624: CALL_OW 12
60628: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60629: LD_ADDR_OWVAR 31
60633: PUSH
60634: LD_INT 0
60636: PPUSH
60637: LD_INT 3
60639: PPUSH
60640: CALL_OW 12
60644: PUSH
60645: LD_INT 0
60647: PPUSH
60648: LD_INT 3
60650: PPUSH
60651: CALL_OW 12
60655: PUSH
60656: LD_INT 0
60658: PUSH
60659: LD_INT 0
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: ST_TO_ADDR
// end ;
60668: LD_VAR 0 2
60672: RET
// export function PrepareTiger ( agressivity ) ; begin
60673: LD_INT 0
60675: PPUSH
// uc_side := 0 ;
60676: LD_ADDR_OWVAR 20
60680: PUSH
60681: LD_INT 0
60683: ST_TO_ADDR
// uc_nation := 0 ;
60684: LD_ADDR_OWVAR 21
60688: PUSH
60689: LD_INT 0
60691: ST_TO_ADDR
// hc_class := class_tiger ;
60692: LD_ADDR_OWVAR 28
60696: PUSH
60697: LD_INT 14
60699: ST_TO_ADDR
// hc_gallery :=  ;
60700: LD_ADDR_OWVAR 33
60704: PUSH
60705: LD_STRING 
60707: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60708: LD_ADDR_OWVAR 35
60712: PUSH
60713: LD_VAR 0 1
60717: NEG
60718: PPUSH
60719: LD_VAR 0 1
60723: PPUSH
60724: CALL_OW 12
60728: ST_TO_ADDR
// end ;
60729: LD_VAR 0 2
60733: RET
// export function PrepareEnchidna ( ) ; begin
60734: LD_INT 0
60736: PPUSH
// uc_side := 0 ;
60737: LD_ADDR_OWVAR 20
60741: PUSH
60742: LD_INT 0
60744: ST_TO_ADDR
// uc_nation := 0 ;
60745: LD_ADDR_OWVAR 21
60749: PUSH
60750: LD_INT 0
60752: ST_TO_ADDR
// hc_class := class_baggie ;
60753: LD_ADDR_OWVAR 28
60757: PUSH
60758: LD_INT 13
60760: ST_TO_ADDR
// hc_gallery :=  ;
60761: LD_ADDR_OWVAR 33
60765: PUSH
60766: LD_STRING 
60768: ST_TO_ADDR
// end ;
60769: LD_VAR 0 1
60773: RET
// export function PrepareFrog ( ) ; begin
60774: LD_INT 0
60776: PPUSH
// uc_side := 0 ;
60777: LD_ADDR_OWVAR 20
60781: PUSH
60782: LD_INT 0
60784: ST_TO_ADDR
// uc_nation := 0 ;
60785: LD_ADDR_OWVAR 21
60789: PUSH
60790: LD_INT 0
60792: ST_TO_ADDR
// hc_class := class_frog ;
60793: LD_ADDR_OWVAR 28
60797: PUSH
60798: LD_INT 19
60800: ST_TO_ADDR
// hc_gallery :=  ;
60801: LD_ADDR_OWVAR 33
60805: PUSH
60806: LD_STRING 
60808: ST_TO_ADDR
// end ;
60809: LD_VAR 0 1
60813: RET
// export function PrepareFish ( ) ; begin
60814: LD_INT 0
60816: PPUSH
// uc_side := 0 ;
60817: LD_ADDR_OWVAR 20
60821: PUSH
60822: LD_INT 0
60824: ST_TO_ADDR
// uc_nation := 0 ;
60825: LD_ADDR_OWVAR 21
60829: PUSH
60830: LD_INT 0
60832: ST_TO_ADDR
// hc_class := class_fish ;
60833: LD_ADDR_OWVAR 28
60837: PUSH
60838: LD_INT 20
60840: ST_TO_ADDR
// hc_gallery :=  ;
60841: LD_ADDR_OWVAR 33
60845: PUSH
60846: LD_STRING 
60848: ST_TO_ADDR
// end ;
60849: LD_VAR 0 1
60853: RET
// export function PrepareBird ( ) ; begin
60854: LD_INT 0
60856: PPUSH
// uc_side := 0 ;
60857: LD_ADDR_OWVAR 20
60861: PUSH
60862: LD_INT 0
60864: ST_TO_ADDR
// uc_nation := 0 ;
60865: LD_ADDR_OWVAR 21
60869: PUSH
60870: LD_INT 0
60872: ST_TO_ADDR
// hc_class := class_phororhacos ;
60873: LD_ADDR_OWVAR 28
60877: PUSH
60878: LD_INT 18
60880: ST_TO_ADDR
// hc_gallery :=  ;
60881: LD_ADDR_OWVAR 33
60885: PUSH
60886: LD_STRING 
60888: ST_TO_ADDR
// end ;
60889: LD_VAR 0 1
60893: RET
// export function PrepareHorse ( ) ; begin
60894: LD_INT 0
60896: PPUSH
// uc_side := 0 ;
60897: LD_ADDR_OWVAR 20
60901: PUSH
60902: LD_INT 0
60904: ST_TO_ADDR
// uc_nation := 0 ;
60905: LD_ADDR_OWVAR 21
60909: PUSH
60910: LD_INT 0
60912: ST_TO_ADDR
// hc_class := class_horse ;
60913: LD_ADDR_OWVAR 28
60917: PUSH
60918: LD_INT 21
60920: ST_TO_ADDR
// hc_gallery :=  ;
60921: LD_ADDR_OWVAR 33
60925: PUSH
60926: LD_STRING 
60928: ST_TO_ADDR
// end ;
60929: LD_VAR 0 1
60933: RET
// export function PrepareMastodont ( ) ; begin
60934: LD_INT 0
60936: PPUSH
// uc_side := 0 ;
60937: LD_ADDR_OWVAR 20
60941: PUSH
60942: LD_INT 0
60944: ST_TO_ADDR
// uc_nation := 0 ;
60945: LD_ADDR_OWVAR 21
60949: PUSH
60950: LD_INT 0
60952: ST_TO_ADDR
// vc_chassis := class_mastodont ;
60953: LD_ADDR_OWVAR 37
60957: PUSH
60958: LD_INT 31
60960: ST_TO_ADDR
// vc_control := control_rider ;
60961: LD_ADDR_OWVAR 38
60965: PUSH
60966: LD_INT 4
60968: ST_TO_ADDR
// end ;
60969: LD_VAR 0 1
60973: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60974: LD_INT 0
60976: PPUSH
60977: PPUSH
60978: PPUSH
// uc_side = 0 ;
60979: LD_ADDR_OWVAR 20
60983: PUSH
60984: LD_INT 0
60986: ST_TO_ADDR
// uc_nation = 0 ;
60987: LD_ADDR_OWVAR 21
60991: PUSH
60992: LD_INT 0
60994: ST_TO_ADDR
// InitHc_All ( ) ;
60995: CALL_OW 584
// InitVc ;
60999: CALL_OW 20
// if mastodonts then
61003: LD_VAR 0 6
61007: IFFALSE 61074
// for i = 1 to mastodonts do
61009: LD_ADDR_VAR 0 11
61013: PUSH
61014: DOUBLE
61015: LD_INT 1
61017: DEC
61018: ST_TO_ADDR
61019: LD_VAR 0 6
61023: PUSH
61024: FOR_TO
61025: IFFALSE 61072
// begin vc_chassis := 31 ;
61027: LD_ADDR_OWVAR 37
61031: PUSH
61032: LD_INT 31
61034: ST_TO_ADDR
// vc_control := control_rider ;
61035: LD_ADDR_OWVAR 38
61039: PUSH
61040: LD_INT 4
61042: ST_TO_ADDR
// animal := CreateVehicle ;
61043: LD_ADDR_VAR 0 12
61047: PUSH
61048: CALL_OW 45
61052: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61053: LD_VAR 0 12
61057: PPUSH
61058: LD_VAR 0 8
61062: PPUSH
61063: LD_INT 0
61065: PPUSH
61066: CALL 63202 0 3
// end ;
61070: GO 61024
61072: POP
61073: POP
// if horses then
61074: LD_VAR 0 5
61078: IFFALSE 61145
// for i = 1 to horses do
61080: LD_ADDR_VAR 0 11
61084: PUSH
61085: DOUBLE
61086: LD_INT 1
61088: DEC
61089: ST_TO_ADDR
61090: LD_VAR 0 5
61094: PUSH
61095: FOR_TO
61096: IFFALSE 61143
// begin hc_class := 21 ;
61098: LD_ADDR_OWVAR 28
61102: PUSH
61103: LD_INT 21
61105: ST_TO_ADDR
// hc_gallery :=  ;
61106: LD_ADDR_OWVAR 33
61110: PUSH
61111: LD_STRING 
61113: ST_TO_ADDR
// animal := CreateHuman ;
61114: LD_ADDR_VAR 0 12
61118: PUSH
61119: CALL_OW 44
61123: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61124: LD_VAR 0 12
61128: PPUSH
61129: LD_VAR 0 8
61133: PPUSH
61134: LD_INT 0
61136: PPUSH
61137: CALL 63202 0 3
// end ;
61141: GO 61095
61143: POP
61144: POP
// if birds then
61145: LD_VAR 0 1
61149: IFFALSE 61216
// for i = 1 to birds do
61151: LD_ADDR_VAR 0 11
61155: PUSH
61156: DOUBLE
61157: LD_INT 1
61159: DEC
61160: ST_TO_ADDR
61161: LD_VAR 0 1
61165: PUSH
61166: FOR_TO
61167: IFFALSE 61214
// begin hc_class := 18 ;
61169: LD_ADDR_OWVAR 28
61173: PUSH
61174: LD_INT 18
61176: ST_TO_ADDR
// hc_gallery =  ;
61177: LD_ADDR_OWVAR 33
61181: PUSH
61182: LD_STRING 
61184: ST_TO_ADDR
// animal := CreateHuman ;
61185: LD_ADDR_VAR 0 12
61189: PUSH
61190: CALL_OW 44
61194: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61195: LD_VAR 0 12
61199: PPUSH
61200: LD_VAR 0 8
61204: PPUSH
61205: LD_INT 0
61207: PPUSH
61208: CALL 63202 0 3
// end ;
61212: GO 61166
61214: POP
61215: POP
// if tigers then
61216: LD_VAR 0 2
61220: IFFALSE 61304
// for i = 1 to tigers do
61222: LD_ADDR_VAR 0 11
61226: PUSH
61227: DOUBLE
61228: LD_INT 1
61230: DEC
61231: ST_TO_ADDR
61232: LD_VAR 0 2
61236: PUSH
61237: FOR_TO
61238: IFFALSE 61302
// begin hc_class = class_tiger ;
61240: LD_ADDR_OWVAR 28
61244: PUSH
61245: LD_INT 14
61247: ST_TO_ADDR
// hc_gallery =  ;
61248: LD_ADDR_OWVAR 33
61252: PUSH
61253: LD_STRING 
61255: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61256: LD_ADDR_OWVAR 35
61260: PUSH
61261: LD_INT 7
61263: NEG
61264: PPUSH
61265: LD_INT 7
61267: PPUSH
61268: CALL_OW 12
61272: ST_TO_ADDR
// animal := CreateHuman ;
61273: LD_ADDR_VAR 0 12
61277: PUSH
61278: CALL_OW 44
61282: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61283: LD_VAR 0 12
61287: PPUSH
61288: LD_VAR 0 8
61292: PPUSH
61293: LD_INT 0
61295: PPUSH
61296: CALL 63202 0 3
// end ;
61300: GO 61237
61302: POP
61303: POP
// if apemans then
61304: LD_VAR 0 3
61308: IFFALSE 61431
// for i = 1 to apemans do
61310: LD_ADDR_VAR 0 11
61314: PUSH
61315: DOUBLE
61316: LD_INT 1
61318: DEC
61319: ST_TO_ADDR
61320: LD_VAR 0 3
61324: PUSH
61325: FOR_TO
61326: IFFALSE 61429
// begin hc_class = class_apeman ;
61328: LD_ADDR_OWVAR 28
61332: PUSH
61333: LD_INT 12
61335: ST_TO_ADDR
// hc_gallery =  ;
61336: LD_ADDR_OWVAR 33
61340: PUSH
61341: LD_STRING 
61343: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61344: LD_ADDR_OWVAR 35
61348: PUSH
61349: LD_INT 2
61351: NEG
61352: PPUSH
61353: LD_INT 2
61355: PPUSH
61356: CALL_OW 12
61360: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61361: LD_ADDR_OWVAR 31
61365: PUSH
61366: LD_INT 1
61368: PPUSH
61369: LD_INT 3
61371: PPUSH
61372: CALL_OW 12
61376: PUSH
61377: LD_INT 1
61379: PPUSH
61380: LD_INT 3
61382: PPUSH
61383: CALL_OW 12
61387: PUSH
61388: LD_INT 0
61390: PUSH
61391: LD_INT 0
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: ST_TO_ADDR
// animal := CreateHuman ;
61400: LD_ADDR_VAR 0 12
61404: PUSH
61405: CALL_OW 44
61409: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61410: LD_VAR 0 12
61414: PPUSH
61415: LD_VAR 0 8
61419: PPUSH
61420: LD_INT 0
61422: PPUSH
61423: CALL 63202 0 3
// end ;
61427: GO 61325
61429: POP
61430: POP
// if enchidnas then
61431: LD_VAR 0 4
61435: IFFALSE 61502
// for i = 1 to enchidnas do
61437: LD_ADDR_VAR 0 11
61441: PUSH
61442: DOUBLE
61443: LD_INT 1
61445: DEC
61446: ST_TO_ADDR
61447: LD_VAR 0 4
61451: PUSH
61452: FOR_TO
61453: IFFALSE 61500
// begin hc_class = 13 ;
61455: LD_ADDR_OWVAR 28
61459: PUSH
61460: LD_INT 13
61462: ST_TO_ADDR
// hc_gallery =  ;
61463: LD_ADDR_OWVAR 33
61467: PUSH
61468: LD_STRING 
61470: ST_TO_ADDR
// animal := CreateHuman ;
61471: LD_ADDR_VAR 0 12
61475: PUSH
61476: CALL_OW 44
61480: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61481: LD_VAR 0 12
61485: PPUSH
61486: LD_VAR 0 8
61490: PPUSH
61491: LD_INT 0
61493: PPUSH
61494: CALL 63202 0 3
// end ;
61498: GO 61452
61500: POP
61501: POP
// if fishes then
61502: LD_VAR 0 7
61506: IFFALSE 61573
// for i = 1 to fishes do
61508: LD_ADDR_VAR 0 11
61512: PUSH
61513: DOUBLE
61514: LD_INT 1
61516: DEC
61517: ST_TO_ADDR
61518: LD_VAR 0 7
61522: PUSH
61523: FOR_TO
61524: IFFALSE 61571
// begin hc_class = 20 ;
61526: LD_ADDR_OWVAR 28
61530: PUSH
61531: LD_INT 20
61533: ST_TO_ADDR
// hc_gallery =  ;
61534: LD_ADDR_OWVAR 33
61538: PUSH
61539: LD_STRING 
61541: ST_TO_ADDR
// animal := CreateHuman ;
61542: LD_ADDR_VAR 0 12
61546: PUSH
61547: CALL_OW 44
61551: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61552: LD_VAR 0 12
61556: PPUSH
61557: LD_VAR 0 9
61561: PPUSH
61562: LD_INT 0
61564: PPUSH
61565: CALL 63202 0 3
// end ;
61569: GO 61523
61571: POP
61572: POP
// end ;
61573: LD_VAR 0 10
61577: RET
// export function WantHeal ( sci , unit ) ; begin
61578: LD_INT 0
61580: PPUSH
// if GetTaskList ( sci ) > 0 then
61581: LD_VAR 0 1
61585: PPUSH
61586: CALL_OW 437
61590: PUSH
61591: LD_INT 0
61593: GREATER
61594: IFFALSE 61664
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61596: LD_VAR 0 1
61600: PPUSH
61601: CALL_OW 437
61605: PUSH
61606: LD_INT 1
61608: ARRAY
61609: PUSH
61610: LD_INT 1
61612: ARRAY
61613: PUSH
61614: LD_STRING l
61616: EQUAL
61617: PUSH
61618: LD_VAR 0 1
61622: PPUSH
61623: CALL_OW 437
61627: PUSH
61628: LD_INT 1
61630: ARRAY
61631: PUSH
61632: LD_INT 4
61634: ARRAY
61635: PUSH
61636: LD_VAR 0 2
61640: EQUAL
61641: AND
61642: IFFALSE 61654
// result := true else
61644: LD_ADDR_VAR 0 3
61648: PUSH
61649: LD_INT 1
61651: ST_TO_ADDR
61652: GO 61662
// result := false ;
61654: LD_ADDR_VAR 0 3
61658: PUSH
61659: LD_INT 0
61661: ST_TO_ADDR
// end else
61662: GO 61672
// result := false ;
61664: LD_ADDR_VAR 0 3
61668: PUSH
61669: LD_INT 0
61671: ST_TO_ADDR
// end ;
61672: LD_VAR 0 3
61676: RET
// export function HealTarget ( sci ) ; begin
61677: LD_INT 0
61679: PPUSH
// if not sci then
61680: LD_VAR 0 1
61684: NOT
61685: IFFALSE 61689
// exit ;
61687: GO 61754
// result := 0 ;
61689: LD_ADDR_VAR 0 2
61693: PUSH
61694: LD_INT 0
61696: ST_TO_ADDR
// if GetTaskList ( sci ) then
61697: LD_VAR 0 1
61701: PPUSH
61702: CALL_OW 437
61706: IFFALSE 61754
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61708: LD_VAR 0 1
61712: PPUSH
61713: CALL_OW 437
61717: PUSH
61718: LD_INT 1
61720: ARRAY
61721: PUSH
61722: LD_INT 1
61724: ARRAY
61725: PUSH
61726: LD_STRING l
61728: EQUAL
61729: IFFALSE 61754
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61731: LD_ADDR_VAR 0 2
61735: PUSH
61736: LD_VAR 0 1
61740: PPUSH
61741: CALL_OW 437
61745: PUSH
61746: LD_INT 1
61748: ARRAY
61749: PUSH
61750: LD_INT 4
61752: ARRAY
61753: ST_TO_ADDR
// end ;
61754: LD_VAR 0 2
61758: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61759: LD_INT 0
61761: PPUSH
61762: PPUSH
61763: PPUSH
61764: PPUSH
// if not base_units then
61765: LD_VAR 0 1
61769: NOT
61770: IFFALSE 61774
// exit ;
61772: GO 61861
// result := false ;
61774: LD_ADDR_VAR 0 2
61778: PUSH
61779: LD_INT 0
61781: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61782: LD_ADDR_VAR 0 5
61786: PUSH
61787: LD_VAR 0 1
61791: PPUSH
61792: LD_INT 21
61794: PUSH
61795: LD_INT 3
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PPUSH
61802: CALL_OW 72
61806: ST_TO_ADDR
// if not tmp then
61807: LD_VAR 0 5
61811: NOT
61812: IFFALSE 61816
// exit ;
61814: GO 61861
// for i in tmp do
61816: LD_ADDR_VAR 0 3
61820: PUSH
61821: LD_VAR 0 5
61825: PUSH
61826: FOR_IN
61827: IFFALSE 61859
// begin result := EnemyInRange ( i , 22 ) ;
61829: LD_ADDR_VAR 0 2
61833: PUSH
61834: LD_VAR 0 3
61838: PPUSH
61839: LD_INT 22
61841: PPUSH
61842: CALL 59459 0 2
61846: ST_TO_ADDR
// if result then
61847: LD_VAR 0 2
61851: IFFALSE 61857
// exit ;
61853: POP
61854: POP
61855: GO 61861
// end ;
61857: GO 61826
61859: POP
61860: POP
// end ;
61861: LD_VAR 0 2
61865: RET
// export function FilterByTag ( units , tag ) ; begin
61866: LD_INT 0
61868: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
61869: LD_ADDR_VAR 0 3
61873: PUSH
61874: LD_VAR 0 1
61878: PPUSH
61879: LD_INT 120
61881: PUSH
61882: LD_VAR 0 2
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PPUSH
61891: CALL_OW 72
61895: ST_TO_ADDR
// end ;
61896: LD_VAR 0 3
61900: RET
// export function IsDriver ( un ) ; begin
61901: LD_INT 0
61903: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61904: LD_ADDR_VAR 0 2
61908: PUSH
61909: LD_VAR 0 1
61913: PUSH
61914: LD_INT 55
61916: PUSH
61917: EMPTY
61918: LIST
61919: PPUSH
61920: CALL_OW 69
61924: IN
61925: ST_TO_ADDR
// end ;
61926: LD_VAR 0 2
61930: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61931: LD_INT 0
61933: PPUSH
61934: PPUSH
// list := [ ] ;
61935: LD_ADDR_VAR 0 5
61939: PUSH
61940: EMPTY
61941: ST_TO_ADDR
// case d of 0 :
61942: LD_VAR 0 3
61946: PUSH
61947: LD_INT 0
61949: DOUBLE
61950: EQUAL
61951: IFTRUE 61955
61953: GO 62088
61955: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61956: LD_ADDR_VAR 0 5
61960: PUSH
61961: LD_VAR 0 1
61965: PUSH
61966: LD_INT 4
61968: MINUS
61969: PUSH
61970: LD_VAR 0 2
61974: PUSH
61975: LD_INT 4
61977: MINUS
61978: PUSH
61979: LD_INT 2
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: LIST
61986: PUSH
61987: LD_VAR 0 1
61991: PUSH
61992: LD_INT 3
61994: MINUS
61995: PUSH
61996: LD_VAR 0 2
62000: PUSH
62001: LD_INT 1
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: LIST
62008: PUSH
62009: LD_VAR 0 1
62013: PUSH
62014: LD_INT 4
62016: PLUS
62017: PUSH
62018: LD_VAR 0 2
62022: PUSH
62023: LD_INT 4
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: LIST
62030: PUSH
62031: LD_VAR 0 1
62035: PUSH
62036: LD_INT 3
62038: PLUS
62039: PUSH
62040: LD_VAR 0 2
62044: PUSH
62045: LD_INT 3
62047: PLUS
62048: PUSH
62049: LD_INT 5
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: LIST
62056: PUSH
62057: LD_VAR 0 1
62061: PUSH
62062: LD_VAR 0 2
62066: PUSH
62067: LD_INT 4
62069: PLUS
62070: PUSH
62071: LD_INT 0
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: LIST
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: ST_TO_ADDR
// end ; 1 :
62086: GO 62786
62088: LD_INT 1
62090: DOUBLE
62091: EQUAL
62092: IFTRUE 62096
62094: GO 62229
62096: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62097: LD_ADDR_VAR 0 5
62101: PUSH
62102: LD_VAR 0 1
62106: PUSH
62107: LD_VAR 0 2
62111: PUSH
62112: LD_INT 4
62114: MINUS
62115: PUSH
62116: LD_INT 3
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: LIST
62123: PUSH
62124: LD_VAR 0 1
62128: PUSH
62129: LD_INT 3
62131: MINUS
62132: PUSH
62133: LD_VAR 0 2
62137: PUSH
62138: LD_INT 3
62140: MINUS
62141: PUSH
62142: LD_INT 2
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: LIST
62149: PUSH
62150: LD_VAR 0 1
62154: PUSH
62155: LD_INT 4
62157: MINUS
62158: PUSH
62159: LD_VAR 0 2
62163: PUSH
62164: LD_INT 1
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: LIST
62171: PUSH
62172: LD_VAR 0 1
62176: PUSH
62177: LD_VAR 0 2
62181: PUSH
62182: LD_INT 3
62184: PLUS
62185: PUSH
62186: LD_INT 0
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: LIST
62193: PUSH
62194: LD_VAR 0 1
62198: PUSH
62199: LD_INT 4
62201: PLUS
62202: PUSH
62203: LD_VAR 0 2
62207: PUSH
62208: LD_INT 4
62210: PLUS
62211: PUSH
62212: LD_INT 5
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: LIST
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: ST_TO_ADDR
// end ; 2 :
62227: GO 62786
62229: LD_INT 2
62231: DOUBLE
62232: EQUAL
62233: IFTRUE 62237
62235: GO 62366
62237: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62238: LD_ADDR_VAR 0 5
62242: PUSH
62243: LD_VAR 0 1
62247: PUSH
62248: LD_VAR 0 2
62252: PUSH
62253: LD_INT 3
62255: MINUS
62256: PUSH
62257: LD_INT 3
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: LIST
62264: PUSH
62265: LD_VAR 0 1
62269: PUSH
62270: LD_INT 4
62272: PLUS
62273: PUSH
62274: LD_VAR 0 2
62278: PUSH
62279: LD_INT 4
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: LIST
62286: PUSH
62287: LD_VAR 0 1
62291: PUSH
62292: LD_VAR 0 2
62296: PUSH
62297: LD_INT 4
62299: PLUS
62300: PUSH
62301: LD_INT 0
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: LIST
62308: PUSH
62309: LD_VAR 0 1
62313: PUSH
62314: LD_INT 3
62316: MINUS
62317: PUSH
62318: LD_VAR 0 2
62322: PUSH
62323: LD_INT 1
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: LIST
62330: PUSH
62331: LD_VAR 0 1
62335: PUSH
62336: LD_INT 4
62338: MINUS
62339: PUSH
62340: LD_VAR 0 2
62344: PUSH
62345: LD_INT 4
62347: MINUS
62348: PUSH
62349: LD_INT 2
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: LIST
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: ST_TO_ADDR
// end ; 3 :
62364: GO 62786
62366: LD_INT 3
62368: DOUBLE
62369: EQUAL
62370: IFTRUE 62374
62372: GO 62507
62374: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62375: LD_ADDR_VAR 0 5
62379: PUSH
62380: LD_VAR 0 1
62384: PUSH
62385: LD_INT 3
62387: PLUS
62388: PUSH
62389: LD_VAR 0 2
62393: PUSH
62394: LD_INT 4
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: LIST
62401: PUSH
62402: LD_VAR 0 1
62406: PUSH
62407: LD_INT 4
62409: PLUS
62410: PUSH
62411: LD_VAR 0 2
62415: PUSH
62416: LD_INT 4
62418: PLUS
62419: PUSH
62420: LD_INT 5
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: LIST
62427: PUSH
62428: LD_VAR 0 1
62432: PUSH
62433: LD_INT 4
62435: MINUS
62436: PUSH
62437: LD_VAR 0 2
62441: PUSH
62442: LD_INT 1
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: LIST
62449: PUSH
62450: LD_VAR 0 1
62454: PUSH
62455: LD_VAR 0 2
62459: PUSH
62460: LD_INT 4
62462: MINUS
62463: PUSH
62464: LD_INT 3
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: LIST
62471: PUSH
62472: LD_VAR 0 1
62476: PUSH
62477: LD_INT 3
62479: MINUS
62480: PUSH
62481: LD_VAR 0 2
62485: PUSH
62486: LD_INT 3
62488: MINUS
62489: PUSH
62490: LD_INT 2
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: LIST
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: ST_TO_ADDR
// end ; 4 :
62505: GO 62786
62507: LD_INT 4
62509: DOUBLE
62510: EQUAL
62511: IFTRUE 62515
62513: GO 62648
62515: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62516: LD_ADDR_VAR 0 5
62520: PUSH
62521: LD_VAR 0 1
62525: PUSH
62526: LD_VAR 0 2
62530: PUSH
62531: LD_INT 4
62533: PLUS
62534: PUSH
62535: LD_INT 0
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: LIST
62542: PUSH
62543: LD_VAR 0 1
62547: PUSH
62548: LD_INT 3
62550: PLUS
62551: PUSH
62552: LD_VAR 0 2
62556: PUSH
62557: LD_INT 3
62559: PLUS
62560: PUSH
62561: LD_INT 5
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: LIST
62568: PUSH
62569: LD_VAR 0 1
62573: PUSH
62574: LD_INT 4
62576: PLUS
62577: PUSH
62578: LD_VAR 0 2
62582: PUSH
62583: LD_INT 4
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: LIST
62590: PUSH
62591: LD_VAR 0 1
62595: PUSH
62596: LD_VAR 0 2
62600: PUSH
62601: LD_INT 3
62603: MINUS
62604: PUSH
62605: LD_INT 3
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: LIST
62612: PUSH
62613: LD_VAR 0 1
62617: PUSH
62618: LD_INT 4
62620: MINUS
62621: PUSH
62622: LD_VAR 0 2
62626: PUSH
62627: LD_INT 4
62629: MINUS
62630: PUSH
62631: LD_INT 2
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: LIST
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: ST_TO_ADDR
// end ; 5 :
62646: GO 62786
62648: LD_INT 5
62650: DOUBLE
62651: EQUAL
62652: IFTRUE 62656
62654: GO 62785
62656: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62657: LD_ADDR_VAR 0 5
62661: PUSH
62662: LD_VAR 0 1
62666: PUSH
62667: LD_INT 4
62669: MINUS
62670: PUSH
62671: LD_VAR 0 2
62675: PUSH
62676: LD_INT 1
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: LIST
62683: PUSH
62684: LD_VAR 0 1
62688: PUSH
62689: LD_VAR 0 2
62693: PUSH
62694: LD_INT 4
62696: MINUS
62697: PUSH
62698: LD_INT 3
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: LIST
62705: PUSH
62706: LD_VAR 0 1
62710: PUSH
62711: LD_INT 4
62713: PLUS
62714: PUSH
62715: LD_VAR 0 2
62719: PUSH
62720: LD_INT 4
62722: PLUS
62723: PUSH
62724: LD_INT 5
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: LIST
62731: PUSH
62732: LD_VAR 0 1
62736: PUSH
62737: LD_INT 3
62739: PLUS
62740: PUSH
62741: LD_VAR 0 2
62745: PUSH
62746: LD_INT 4
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: LIST
62753: PUSH
62754: LD_VAR 0 1
62758: PUSH
62759: LD_VAR 0 2
62763: PUSH
62764: LD_INT 3
62766: PLUS
62767: PUSH
62768: LD_INT 0
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: LIST
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: ST_TO_ADDR
// end ; end ;
62783: GO 62786
62785: POP
// result := list ;
62786: LD_ADDR_VAR 0 4
62790: PUSH
62791: LD_VAR 0 5
62795: ST_TO_ADDR
// end ;
62796: LD_VAR 0 4
62800: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62801: LD_INT 0
62803: PPUSH
62804: PPUSH
62805: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62806: LD_VAR 0 1
62810: NOT
62811: PUSH
62812: LD_VAR 0 2
62816: PUSH
62817: LD_INT 1
62819: PUSH
62820: LD_INT 2
62822: PUSH
62823: LD_INT 3
62825: PUSH
62826: LD_INT 4
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: IN
62835: NOT
62836: OR
62837: IFFALSE 62841
// exit ;
62839: GO 62924
// tmp := [ ] ;
62841: LD_ADDR_VAR 0 5
62845: PUSH
62846: EMPTY
62847: ST_TO_ADDR
// for i in units do
62848: LD_ADDR_VAR 0 4
62852: PUSH
62853: LD_VAR 0 1
62857: PUSH
62858: FOR_IN
62859: IFFALSE 62893
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
62861: LD_ADDR_VAR 0 5
62865: PUSH
62866: LD_VAR 0 5
62870: PPUSH
62871: LD_VAR 0 4
62875: PPUSH
62876: LD_VAR 0 2
62880: PPUSH
62881: CALL_OW 259
62885: PPUSH
62886: CALL 64297 0 2
62890: ST_TO_ADDR
62891: GO 62858
62893: POP
62894: POP
// if not tmp then
62895: LD_VAR 0 5
62899: NOT
62900: IFFALSE 62904
// exit ;
62902: GO 62924
// result := SortListByListDesc ( units , tmp ) ;
62904: LD_ADDR_VAR 0 3
62908: PUSH
62909: LD_VAR 0 1
62913: PPUSH
62914: LD_VAR 0 5
62918: PPUSH
62919: CALL_OW 77
62923: ST_TO_ADDR
// end ;
62924: LD_VAR 0 3
62928: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62929: LD_INT 0
62931: PPUSH
62932: PPUSH
62933: PPUSH
// result := false ;
62934: LD_ADDR_VAR 0 3
62938: PUSH
62939: LD_INT 0
62941: ST_TO_ADDR
// if not building then
62942: LD_VAR 0 2
62946: NOT
62947: IFFALSE 62951
// exit ;
62949: GO 63089
// x := GetX ( building ) ;
62951: LD_ADDR_VAR 0 4
62955: PUSH
62956: LD_VAR 0 2
62960: PPUSH
62961: CALL_OW 250
62965: ST_TO_ADDR
// y := GetY ( building ) ;
62966: LD_ADDR_VAR 0 5
62970: PUSH
62971: LD_VAR 0 2
62975: PPUSH
62976: CALL_OW 251
62980: ST_TO_ADDR
// if not x or not y then
62981: LD_VAR 0 4
62985: NOT
62986: PUSH
62987: LD_VAR 0 5
62991: NOT
62992: OR
62993: IFFALSE 62997
// exit ;
62995: GO 63089
// if GetTaskList ( unit ) then
62997: LD_VAR 0 1
63001: PPUSH
63002: CALL_OW 437
63006: IFFALSE 63089
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63008: LD_STRING e
63010: PUSH
63011: LD_VAR 0 1
63015: PPUSH
63016: CALL_OW 437
63020: PUSH
63021: LD_INT 1
63023: ARRAY
63024: PUSH
63025: LD_INT 1
63027: ARRAY
63028: EQUAL
63029: PUSH
63030: LD_VAR 0 4
63034: PUSH
63035: LD_VAR 0 1
63039: PPUSH
63040: CALL_OW 437
63044: PUSH
63045: LD_INT 1
63047: ARRAY
63048: PUSH
63049: LD_INT 2
63051: ARRAY
63052: EQUAL
63053: AND
63054: PUSH
63055: LD_VAR 0 5
63059: PUSH
63060: LD_VAR 0 1
63064: PPUSH
63065: CALL_OW 437
63069: PUSH
63070: LD_INT 1
63072: ARRAY
63073: PUSH
63074: LD_INT 3
63076: ARRAY
63077: EQUAL
63078: AND
63079: IFFALSE 63089
// result := true end ;
63081: LD_ADDR_VAR 0 3
63085: PUSH
63086: LD_INT 1
63088: ST_TO_ADDR
// end ;
63089: LD_VAR 0 3
63093: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63094: LD_INT 0
63096: PPUSH
// result := false ;
63097: LD_ADDR_VAR 0 4
63101: PUSH
63102: LD_INT 0
63104: ST_TO_ADDR
// if GetTaskList ( unit ) then
63105: LD_VAR 0 1
63109: PPUSH
63110: CALL_OW 437
63114: IFFALSE 63197
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63116: LD_STRING M
63118: PUSH
63119: LD_VAR 0 1
63123: PPUSH
63124: CALL_OW 437
63128: PUSH
63129: LD_INT 1
63131: ARRAY
63132: PUSH
63133: LD_INT 1
63135: ARRAY
63136: EQUAL
63137: PUSH
63138: LD_VAR 0 2
63142: PUSH
63143: LD_VAR 0 1
63147: PPUSH
63148: CALL_OW 437
63152: PUSH
63153: LD_INT 1
63155: ARRAY
63156: PUSH
63157: LD_INT 2
63159: ARRAY
63160: EQUAL
63161: AND
63162: PUSH
63163: LD_VAR 0 3
63167: PUSH
63168: LD_VAR 0 1
63172: PPUSH
63173: CALL_OW 437
63177: PUSH
63178: LD_INT 1
63180: ARRAY
63181: PUSH
63182: LD_INT 3
63184: ARRAY
63185: EQUAL
63186: AND
63187: IFFALSE 63197
// result := true ;
63189: LD_ADDR_VAR 0 4
63193: PUSH
63194: LD_INT 1
63196: ST_TO_ADDR
// end ; end ;
63197: LD_VAR 0 4
63201: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63202: LD_INT 0
63204: PPUSH
63205: PPUSH
63206: PPUSH
63207: PPUSH
// if not unit or not area then
63208: LD_VAR 0 1
63212: NOT
63213: PUSH
63214: LD_VAR 0 2
63218: NOT
63219: OR
63220: IFFALSE 63224
// exit ;
63222: GO 63400
// tmp := AreaToList ( area , i ) ;
63224: LD_ADDR_VAR 0 6
63228: PUSH
63229: LD_VAR 0 2
63233: PPUSH
63234: LD_VAR 0 5
63238: PPUSH
63239: CALL_OW 517
63243: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63244: LD_ADDR_VAR 0 5
63248: PUSH
63249: DOUBLE
63250: LD_INT 1
63252: DEC
63253: ST_TO_ADDR
63254: LD_VAR 0 6
63258: PUSH
63259: LD_INT 1
63261: ARRAY
63262: PUSH
63263: FOR_TO
63264: IFFALSE 63398
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63266: LD_ADDR_VAR 0 7
63270: PUSH
63271: LD_VAR 0 6
63275: PUSH
63276: LD_INT 1
63278: ARRAY
63279: PUSH
63280: LD_VAR 0 5
63284: ARRAY
63285: PUSH
63286: LD_VAR 0 6
63290: PUSH
63291: LD_INT 2
63293: ARRAY
63294: PUSH
63295: LD_VAR 0 5
63299: ARRAY
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
63305: LD_INT 92
63307: PUSH
63308: LD_VAR 0 7
63312: PUSH
63313: LD_INT 1
63315: ARRAY
63316: PUSH
63317: LD_VAR 0 7
63321: PUSH
63322: LD_INT 2
63324: ARRAY
63325: PUSH
63326: LD_INT 2
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: PPUSH
63335: CALL_OW 69
63339: PUSH
63340: LD_INT 0
63342: EQUAL
63343: IFFALSE 63396
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63345: LD_VAR 0 1
63349: PPUSH
63350: LD_VAR 0 7
63354: PUSH
63355: LD_INT 1
63357: ARRAY
63358: PPUSH
63359: LD_VAR 0 7
63363: PUSH
63364: LD_INT 2
63366: ARRAY
63367: PPUSH
63368: LD_VAR 0 3
63372: PPUSH
63373: CALL_OW 48
// result := IsPlaced ( unit ) ;
63377: LD_ADDR_VAR 0 4
63381: PUSH
63382: LD_VAR 0 1
63386: PPUSH
63387: CALL_OW 305
63391: ST_TO_ADDR
// exit ;
63392: POP
63393: POP
63394: GO 63400
// end ; end ;
63396: GO 63263
63398: POP
63399: POP
// end ;
63400: LD_VAR 0 4
63404: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63405: LD_INT 0
63407: PPUSH
63408: PPUSH
63409: PPUSH
// if not side or side > 8 then
63410: LD_VAR 0 1
63414: NOT
63415: PUSH
63416: LD_VAR 0 1
63420: PUSH
63421: LD_INT 8
63423: GREATER
63424: OR
63425: IFFALSE 63429
// exit ;
63427: GO 63616
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63429: LD_ADDR_VAR 0 4
63433: PUSH
63434: LD_INT 22
63436: PUSH
63437: LD_VAR 0 1
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 21
63448: PUSH
63449: LD_INT 3
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PPUSH
63460: CALL_OW 69
63464: ST_TO_ADDR
// if not tmp then
63465: LD_VAR 0 4
63469: NOT
63470: IFFALSE 63474
// exit ;
63472: GO 63616
// enable_addtolog := true ;
63474: LD_ADDR_OWVAR 81
63478: PUSH
63479: LD_INT 1
63481: ST_TO_ADDR
// AddToLog ( [ ) ;
63482: LD_STRING [
63484: PPUSH
63485: CALL_OW 561
// for i in tmp do
63489: LD_ADDR_VAR 0 3
63493: PUSH
63494: LD_VAR 0 4
63498: PUSH
63499: FOR_IN
63500: IFFALSE 63607
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63502: LD_STRING [
63504: PUSH
63505: LD_VAR 0 3
63509: PPUSH
63510: CALL_OW 266
63514: STR
63515: PUSH
63516: LD_STRING , 
63518: STR
63519: PUSH
63520: LD_VAR 0 3
63524: PPUSH
63525: CALL_OW 250
63529: STR
63530: PUSH
63531: LD_STRING , 
63533: STR
63534: PUSH
63535: LD_VAR 0 3
63539: PPUSH
63540: CALL_OW 251
63544: STR
63545: PUSH
63546: LD_STRING , 
63548: STR
63549: PUSH
63550: LD_VAR 0 3
63554: PPUSH
63555: CALL_OW 254
63559: STR
63560: PUSH
63561: LD_STRING , 
63563: STR
63564: PUSH
63565: LD_VAR 0 3
63569: PPUSH
63570: LD_INT 1
63572: PPUSH
63573: CALL_OW 268
63577: STR
63578: PUSH
63579: LD_STRING , 
63581: STR
63582: PUSH
63583: LD_VAR 0 3
63587: PPUSH
63588: LD_INT 2
63590: PPUSH
63591: CALL_OW 268
63595: STR
63596: PUSH
63597: LD_STRING ],
63599: STR
63600: PPUSH
63601: CALL_OW 561
// end ;
63605: GO 63499
63607: POP
63608: POP
// AddToLog ( ]; ) ;
63609: LD_STRING ];
63611: PPUSH
63612: CALL_OW 561
// end ;
63616: LD_VAR 0 2
63620: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63621: LD_INT 0
63623: PPUSH
63624: PPUSH
63625: PPUSH
63626: PPUSH
63627: PPUSH
// if not area or not rate or not max then
63628: LD_VAR 0 1
63632: NOT
63633: PUSH
63634: LD_VAR 0 2
63638: NOT
63639: OR
63640: PUSH
63641: LD_VAR 0 4
63645: NOT
63646: OR
63647: IFFALSE 63651
// exit ;
63649: GO 63840
// while 1 do
63651: LD_INT 1
63653: IFFALSE 63840
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63655: LD_ADDR_VAR 0 9
63659: PUSH
63660: LD_VAR 0 1
63664: PPUSH
63665: LD_INT 1
63667: PPUSH
63668: CALL_OW 287
63672: PUSH
63673: LD_INT 10
63675: MUL
63676: ST_TO_ADDR
// r := rate / 10 ;
63677: LD_ADDR_VAR 0 7
63681: PUSH
63682: LD_VAR 0 2
63686: PUSH
63687: LD_INT 10
63689: DIVREAL
63690: ST_TO_ADDR
// time := 1 1$00 ;
63691: LD_ADDR_VAR 0 8
63695: PUSH
63696: LD_INT 2100
63698: ST_TO_ADDR
// if amount < min then
63699: LD_VAR 0 9
63703: PUSH
63704: LD_VAR 0 3
63708: LESS
63709: IFFALSE 63727
// r := r * 2 else
63711: LD_ADDR_VAR 0 7
63715: PUSH
63716: LD_VAR 0 7
63720: PUSH
63721: LD_INT 2
63723: MUL
63724: ST_TO_ADDR
63725: GO 63753
// if amount > max then
63727: LD_VAR 0 9
63731: PUSH
63732: LD_VAR 0 4
63736: GREATER
63737: IFFALSE 63753
// r := r / 2 ;
63739: LD_ADDR_VAR 0 7
63743: PUSH
63744: LD_VAR 0 7
63748: PUSH
63749: LD_INT 2
63751: DIVREAL
63752: ST_TO_ADDR
// time := time / r ;
63753: LD_ADDR_VAR 0 8
63757: PUSH
63758: LD_VAR 0 8
63762: PUSH
63763: LD_VAR 0 7
63767: DIVREAL
63768: ST_TO_ADDR
// if time < 0 then
63769: LD_VAR 0 8
63773: PUSH
63774: LD_INT 0
63776: LESS
63777: IFFALSE 63794
// time := time * - 1 ;
63779: LD_ADDR_VAR 0 8
63783: PUSH
63784: LD_VAR 0 8
63788: PUSH
63789: LD_INT 1
63791: NEG
63792: MUL
63793: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
63794: LD_VAR 0 8
63798: PUSH
63799: LD_INT 35
63801: PPUSH
63802: LD_INT 875
63804: PPUSH
63805: CALL_OW 12
63809: PLUS
63810: PPUSH
63811: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63815: LD_INT 1
63817: PPUSH
63818: LD_INT 5
63820: PPUSH
63821: CALL_OW 12
63825: PPUSH
63826: LD_VAR 0 1
63830: PPUSH
63831: LD_INT 1
63833: PPUSH
63834: CALL_OW 55
// end ;
63838: GO 63651
// end ;
63840: LD_VAR 0 5
63844: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63845: LD_INT 0
63847: PPUSH
63848: PPUSH
63849: PPUSH
63850: PPUSH
63851: PPUSH
63852: PPUSH
63853: PPUSH
63854: PPUSH
// if not turrets or not factories then
63855: LD_VAR 0 1
63859: NOT
63860: PUSH
63861: LD_VAR 0 2
63865: NOT
63866: OR
63867: IFFALSE 63871
// exit ;
63869: GO 64178
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63871: LD_ADDR_VAR 0 10
63875: PUSH
63876: LD_INT 5
63878: PUSH
63879: LD_INT 6
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 2
63888: PUSH
63889: LD_INT 4
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_INT 3
63898: PUSH
63899: LD_INT 5
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 24
63913: PUSH
63914: LD_INT 25
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: LD_INT 23
63923: PUSH
63924: LD_INT 27
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 42
63937: PUSH
63938: LD_INT 43
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 44
63947: PUSH
63948: LD_INT 46
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 45
63957: PUSH
63958: LD_INT 47
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: LIST
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: LIST
63974: ST_TO_ADDR
// result := [ ] ;
63975: LD_ADDR_VAR 0 3
63979: PUSH
63980: EMPTY
63981: ST_TO_ADDR
// for i in turrets do
63982: LD_ADDR_VAR 0 4
63986: PUSH
63987: LD_VAR 0 1
63991: PUSH
63992: FOR_IN
63993: IFFALSE 64176
// begin nat := GetNation ( i ) ;
63995: LD_ADDR_VAR 0 7
63999: PUSH
64000: LD_VAR 0 4
64004: PPUSH
64005: CALL_OW 248
64009: ST_TO_ADDR
// weapon := 0 ;
64010: LD_ADDR_VAR 0 8
64014: PUSH
64015: LD_INT 0
64017: ST_TO_ADDR
// if not nat then
64018: LD_VAR 0 7
64022: NOT
64023: IFFALSE 64027
// continue ;
64025: GO 63992
// for j in list [ nat ] do
64027: LD_ADDR_VAR 0 5
64031: PUSH
64032: LD_VAR 0 10
64036: PUSH
64037: LD_VAR 0 7
64041: ARRAY
64042: PUSH
64043: FOR_IN
64044: IFFALSE 64085
// if GetBWeapon ( i ) = j [ 1 ] then
64046: LD_VAR 0 4
64050: PPUSH
64051: CALL_OW 269
64055: PUSH
64056: LD_VAR 0 5
64060: PUSH
64061: LD_INT 1
64063: ARRAY
64064: EQUAL
64065: IFFALSE 64083
// begin weapon := j [ 2 ] ;
64067: LD_ADDR_VAR 0 8
64071: PUSH
64072: LD_VAR 0 5
64076: PUSH
64077: LD_INT 2
64079: ARRAY
64080: ST_TO_ADDR
// break ;
64081: GO 64085
// end ;
64083: GO 64043
64085: POP
64086: POP
// if not weapon then
64087: LD_VAR 0 8
64091: NOT
64092: IFFALSE 64096
// continue ;
64094: GO 63992
// for k in factories do
64096: LD_ADDR_VAR 0 6
64100: PUSH
64101: LD_VAR 0 2
64105: PUSH
64106: FOR_IN
64107: IFFALSE 64172
// begin weapons := AvailableWeaponList ( k ) ;
64109: LD_ADDR_VAR 0 9
64113: PUSH
64114: LD_VAR 0 6
64118: PPUSH
64119: CALL_OW 478
64123: ST_TO_ADDR
// if not weapons then
64124: LD_VAR 0 9
64128: NOT
64129: IFFALSE 64133
// continue ;
64131: GO 64106
// if weapon in weapons then
64133: LD_VAR 0 8
64137: PUSH
64138: LD_VAR 0 9
64142: IN
64143: IFFALSE 64170
// begin result := [ i , weapon ] ;
64145: LD_ADDR_VAR 0 3
64149: PUSH
64150: LD_VAR 0 4
64154: PUSH
64155: LD_VAR 0 8
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: ST_TO_ADDR
// exit ;
64164: POP
64165: POP
64166: POP
64167: POP
64168: GO 64178
// end ; end ;
64170: GO 64106
64172: POP
64173: POP
// end ;
64174: GO 63992
64176: POP
64177: POP
// end ;
64178: LD_VAR 0 3
64182: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64183: LD_INT 0
64185: PPUSH
// if not side or side > 8 then
64186: LD_VAR 0 3
64190: NOT
64191: PUSH
64192: LD_VAR 0 3
64196: PUSH
64197: LD_INT 8
64199: GREATER
64200: OR
64201: IFFALSE 64205
// exit ;
64203: GO 64264
// if not range then
64205: LD_VAR 0 4
64209: NOT
64210: IFFALSE 64221
// range := - 12 ;
64212: LD_ADDR_VAR 0 4
64216: PUSH
64217: LD_INT 12
64219: NEG
64220: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64221: LD_VAR 0 1
64225: PPUSH
64226: LD_VAR 0 2
64230: PPUSH
64231: LD_VAR 0 3
64235: PPUSH
64236: LD_VAR 0 4
64240: PPUSH
64241: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64245: LD_VAR 0 1
64249: PPUSH
64250: LD_VAR 0 2
64254: PPUSH
64255: LD_VAR 0 3
64259: PPUSH
64260: CALL_OW 331
// end ;
64264: LD_VAR 0 5
64268: RET
// export function Video ( mode ) ; begin
64269: LD_INT 0
64271: PPUSH
// ingame_video = mode ;
64272: LD_ADDR_OWVAR 52
64276: PUSH
64277: LD_VAR 0 1
64281: ST_TO_ADDR
// interface_hidden = mode ;
64282: LD_ADDR_OWVAR 54
64286: PUSH
64287: LD_VAR 0 1
64291: ST_TO_ADDR
// end ;
64292: LD_VAR 0 2
64296: RET
// export function Join ( array , element ) ; begin
64297: LD_INT 0
64299: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64300: LD_ADDR_VAR 0 3
64304: PUSH
64305: LD_VAR 0 1
64309: PPUSH
64310: LD_VAR 0 1
64314: PUSH
64315: LD_INT 1
64317: PLUS
64318: PPUSH
64319: LD_VAR 0 2
64323: PPUSH
64324: CALL_OW 1
64328: ST_TO_ADDR
// end ;
64329: LD_VAR 0 3
64333: RET
// export function JoinUnion ( array , element ) ; begin
64334: LD_INT 0
64336: PPUSH
// result := array union element ;
64337: LD_ADDR_VAR 0 3
64341: PUSH
64342: LD_VAR 0 1
64346: PUSH
64347: LD_VAR 0 2
64351: UNION
64352: ST_TO_ADDR
// end ;
64353: LD_VAR 0 3
64357: RET
// export function GetBehemoths ( side ) ; begin
64358: LD_INT 0
64360: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64361: LD_ADDR_VAR 0 2
64365: PUSH
64366: LD_INT 22
64368: PUSH
64369: LD_VAR 0 1
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: LD_INT 31
64380: PUSH
64381: LD_INT 25
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PPUSH
64392: CALL_OW 69
64396: ST_TO_ADDR
// end ;
64397: LD_VAR 0 2
64401: RET
// export function Shuffle ( array ) ; var i , index ; begin
64402: LD_INT 0
64404: PPUSH
64405: PPUSH
64406: PPUSH
// result := [ ] ;
64407: LD_ADDR_VAR 0 2
64411: PUSH
64412: EMPTY
64413: ST_TO_ADDR
// if not array then
64414: LD_VAR 0 1
64418: NOT
64419: IFFALSE 64423
// exit ;
64421: GO 64522
// Randomize ;
64423: CALL_OW 10
// for i = array downto 1 do
64427: LD_ADDR_VAR 0 3
64431: PUSH
64432: DOUBLE
64433: LD_VAR 0 1
64437: INC
64438: ST_TO_ADDR
64439: LD_INT 1
64441: PUSH
64442: FOR_DOWNTO
64443: IFFALSE 64520
// begin index := rand ( 1 , array ) ;
64445: LD_ADDR_VAR 0 4
64449: PUSH
64450: LD_INT 1
64452: PPUSH
64453: LD_VAR 0 1
64457: PPUSH
64458: CALL_OW 12
64462: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64463: LD_ADDR_VAR 0 2
64467: PUSH
64468: LD_VAR 0 2
64472: PPUSH
64473: LD_VAR 0 2
64477: PUSH
64478: LD_INT 1
64480: PLUS
64481: PPUSH
64482: LD_VAR 0 1
64486: PUSH
64487: LD_VAR 0 4
64491: ARRAY
64492: PPUSH
64493: CALL_OW 2
64497: ST_TO_ADDR
// array := Delete ( array , index ) ;
64498: LD_ADDR_VAR 0 1
64502: PUSH
64503: LD_VAR 0 1
64507: PPUSH
64508: LD_VAR 0 4
64512: PPUSH
64513: CALL_OW 3
64517: ST_TO_ADDR
// end ;
64518: GO 64442
64520: POP
64521: POP
// end ;
64522: LD_VAR 0 2
64526: RET
// export function GetBaseMaterials ( base ) ; begin
64527: LD_INT 0
64529: PPUSH
// result := [ 0 , 0 , 0 ] ;
64530: LD_ADDR_VAR 0 2
64534: PUSH
64535: LD_INT 0
64537: PUSH
64538: LD_INT 0
64540: PUSH
64541: LD_INT 0
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: LIST
64548: ST_TO_ADDR
// if not base then
64549: LD_VAR 0 1
64553: NOT
64554: IFFALSE 64558
// exit ;
64556: GO 64607
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64558: LD_ADDR_VAR 0 2
64562: PUSH
64563: LD_VAR 0 1
64567: PPUSH
64568: LD_INT 1
64570: PPUSH
64571: CALL_OW 275
64575: PUSH
64576: LD_VAR 0 1
64580: PPUSH
64581: LD_INT 2
64583: PPUSH
64584: CALL_OW 275
64588: PUSH
64589: LD_VAR 0 1
64593: PPUSH
64594: LD_INT 3
64596: PPUSH
64597: CALL_OW 275
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: LIST
64606: ST_TO_ADDR
// end ;
64607: LD_VAR 0 2
64611: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64612: LD_INT 0
64614: PPUSH
64615: PPUSH
// result := array ;
64616: LD_ADDR_VAR 0 3
64620: PUSH
64621: LD_VAR 0 1
64625: ST_TO_ADDR
// if size >= result then
64626: LD_VAR 0 2
64630: PUSH
64631: LD_VAR 0 3
64635: GREATEREQUAL
64636: IFFALSE 64640
// exit ;
64638: GO 64690
// if size then
64640: LD_VAR 0 2
64644: IFFALSE 64690
// for i := array downto size do
64646: LD_ADDR_VAR 0 4
64650: PUSH
64651: DOUBLE
64652: LD_VAR 0 1
64656: INC
64657: ST_TO_ADDR
64658: LD_VAR 0 2
64662: PUSH
64663: FOR_DOWNTO
64664: IFFALSE 64688
// result := Delete ( result , result ) ;
64666: LD_ADDR_VAR 0 3
64670: PUSH
64671: LD_VAR 0 3
64675: PPUSH
64676: LD_VAR 0 3
64680: PPUSH
64681: CALL_OW 3
64685: ST_TO_ADDR
64686: GO 64663
64688: POP
64689: POP
// end ;
64690: LD_VAR 0 3
64694: RET
// export function ComExit ( unit ) ; var tmp ; begin
64695: LD_INT 0
64697: PPUSH
64698: PPUSH
// if not IsInUnit ( unit ) then
64699: LD_VAR 0 1
64703: PPUSH
64704: CALL_OW 310
64708: NOT
64709: IFFALSE 64713
// exit ;
64711: GO 64773
// tmp := IsInUnit ( unit ) ;
64713: LD_ADDR_VAR 0 3
64717: PUSH
64718: LD_VAR 0 1
64722: PPUSH
64723: CALL_OW 310
64727: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64728: LD_VAR 0 3
64732: PPUSH
64733: CALL_OW 247
64737: PUSH
64738: LD_INT 2
64740: EQUAL
64741: IFFALSE 64754
// ComExitVehicle ( unit ) else
64743: LD_VAR 0 1
64747: PPUSH
64748: CALL_OW 121
64752: GO 64763
// ComExitBuilding ( unit ) ;
64754: LD_VAR 0 1
64758: PPUSH
64759: CALL_OW 122
// result := tmp ;
64763: LD_ADDR_VAR 0 2
64767: PUSH
64768: LD_VAR 0 3
64772: ST_TO_ADDR
// end ;
64773: LD_VAR 0 2
64777: RET
// export function ComExitAll ( units ) ; var i ; begin
64778: LD_INT 0
64780: PPUSH
64781: PPUSH
// if not units then
64782: LD_VAR 0 1
64786: NOT
64787: IFFALSE 64791
// exit ;
64789: GO 64817
// for i in units do
64791: LD_ADDR_VAR 0 3
64795: PUSH
64796: LD_VAR 0 1
64800: PUSH
64801: FOR_IN
64802: IFFALSE 64815
// ComExit ( i ) ;
64804: LD_VAR 0 3
64808: PPUSH
64809: CALL 64695 0 1
64813: GO 64801
64815: POP
64816: POP
// end ;
64817: LD_VAR 0 2
64821: RET
// export function ResetHc ; begin
64822: LD_INT 0
64824: PPUSH
// InitHc ;
64825: CALL_OW 19
// hc_importance := 0 ;
64829: LD_ADDR_OWVAR 32
64833: PUSH
64834: LD_INT 0
64836: ST_TO_ADDR
// end ;
64837: LD_VAR 0 1
64841: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64842: LD_INT 0
64844: PPUSH
64845: PPUSH
64846: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64847: LD_ADDR_VAR 0 6
64851: PUSH
64852: LD_VAR 0 1
64856: PUSH
64857: LD_VAR 0 3
64861: PLUS
64862: PUSH
64863: LD_INT 2
64865: DIV
64866: ST_TO_ADDR
// if _x < 0 then
64867: LD_VAR 0 6
64871: PUSH
64872: LD_INT 0
64874: LESS
64875: IFFALSE 64892
// _x := _x * - 1 ;
64877: LD_ADDR_VAR 0 6
64881: PUSH
64882: LD_VAR 0 6
64886: PUSH
64887: LD_INT 1
64889: NEG
64890: MUL
64891: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64892: LD_ADDR_VAR 0 7
64896: PUSH
64897: LD_VAR 0 2
64901: PUSH
64902: LD_VAR 0 4
64906: PLUS
64907: PUSH
64908: LD_INT 2
64910: DIV
64911: ST_TO_ADDR
// if _y < 0 then
64912: LD_VAR 0 7
64916: PUSH
64917: LD_INT 0
64919: LESS
64920: IFFALSE 64937
// _y := _y * - 1 ;
64922: LD_ADDR_VAR 0 7
64926: PUSH
64927: LD_VAR 0 7
64931: PUSH
64932: LD_INT 1
64934: NEG
64935: MUL
64936: ST_TO_ADDR
// result := [ _x , _y ] ;
64937: LD_ADDR_VAR 0 5
64941: PUSH
64942: LD_VAR 0 6
64946: PUSH
64947: LD_VAR 0 7
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: ST_TO_ADDR
// end ;
64956: LD_VAR 0 5
64960: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64961: LD_INT 0
64963: PPUSH
64964: PPUSH
64965: PPUSH
64966: PPUSH
// task := GetTaskList ( unit ) ;
64967: LD_ADDR_VAR 0 7
64971: PUSH
64972: LD_VAR 0 1
64976: PPUSH
64977: CALL_OW 437
64981: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64982: LD_VAR 0 7
64986: NOT
64987: PUSH
64988: LD_VAR 0 1
64992: PPUSH
64993: LD_VAR 0 2
64997: PPUSH
64998: CALL_OW 308
65002: NOT
65003: AND
65004: IFFALSE 65008
// exit ;
65006: GO 65126
// if IsInArea ( unit , area ) then
65008: LD_VAR 0 1
65012: PPUSH
65013: LD_VAR 0 2
65017: PPUSH
65018: CALL_OW 308
65022: IFFALSE 65040
// begin ComMoveToArea ( unit , goAway ) ;
65024: LD_VAR 0 1
65028: PPUSH
65029: LD_VAR 0 3
65033: PPUSH
65034: CALL_OW 113
// exit ;
65038: GO 65126
// end ; if task [ 1 ] [ 1 ] <> M then
65040: LD_VAR 0 7
65044: PUSH
65045: LD_INT 1
65047: ARRAY
65048: PUSH
65049: LD_INT 1
65051: ARRAY
65052: PUSH
65053: LD_STRING M
65055: NONEQUAL
65056: IFFALSE 65060
// exit ;
65058: GO 65126
// x := task [ 1 ] [ 2 ] ;
65060: LD_ADDR_VAR 0 5
65064: PUSH
65065: LD_VAR 0 7
65069: PUSH
65070: LD_INT 1
65072: ARRAY
65073: PUSH
65074: LD_INT 2
65076: ARRAY
65077: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65078: LD_ADDR_VAR 0 6
65082: PUSH
65083: LD_VAR 0 7
65087: PUSH
65088: LD_INT 1
65090: ARRAY
65091: PUSH
65092: LD_INT 3
65094: ARRAY
65095: ST_TO_ADDR
// if InArea ( x , y , area ) then
65096: LD_VAR 0 5
65100: PPUSH
65101: LD_VAR 0 6
65105: PPUSH
65106: LD_VAR 0 2
65110: PPUSH
65111: CALL_OW 309
65115: IFFALSE 65126
// ComStop ( unit ) ;
65117: LD_VAR 0 1
65121: PPUSH
65122: CALL_OW 141
// end ;
65126: LD_VAR 0 4
65130: RET
// export function Abs ( value ) ; begin
65131: LD_INT 0
65133: PPUSH
// result := value ;
65134: LD_ADDR_VAR 0 2
65138: PUSH
65139: LD_VAR 0 1
65143: ST_TO_ADDR
// if value < 0 then
65144: LD_VAR 0 1
65148: PUSH
65149: LD_INT 0
65151: LESS
65152: IFFALSE 65169
// result := value * - 1 ;
65154: LD_ADDR_VAR 0 2
65158: PUSH
65159: LD_VAR 0 1
65163: PUSH
65164: LD_INT 1
65166: NEG
65167: MUL
65168: ST_TO_ADDR
// end ;
65169: LD_VAR 0 2
65173: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65174: LD_INT 0
65176: PPUSH
65177: PPUSH
65178: PPUSH
65179: PPUSH
65180: PPUSH
65181: PPUSH
65182: PPUSH
65183: PPUSH
// if not unit or not building then
65184: LD_VAR 0 1
65188: NOT
65189: PUSH
65190: LD_VAR 0 2
65194: NOT
65195: OR
65196: IFFALSE 65200
// exit ;
65198: GO 65426
// x := GetX ( building ) ;
65200: LD_ADDR_VAR 0 4
65204: PUSH
65205: LD_VAR 0 2
65209: PPUSH
65210: CALL_OW 250
65214: ST_TO_ADDR
// y := GetY ( building ) ;
65215: LD_ADDR_VAR 0 6
65219: PUSH
65220: LD_VAR 0 2
65224: PPUSH
65225: CALL_OW 251
65229: ST_TO_ADDR
// d := GetDir ( building ) ;
65230: LD_ADDR_VAR 0 8
65234: PUSH
65235: LD_VAR 0 2
65239: PPUSH
65240: CALL_OW 254
65244: ST_TO_ADDR
// r := 4 ;
65245: LD_ADDR_VAR 0 9
65249: PUSH
65250: LD_INT 4
65252: ST_TO_ADDR
// for i := 1 to 5 do
65253: LD_ADDR_VAR 0 10
65257: PUSH
65258: DOUBLE
65259: LD_INT 1
65261: DEC
65262: ST_TO_ADDR
65263: LD_INT 5
65265: PUSH
65266: FOR_TO
65267: IFFALSE 65424
// begin _x := ShiftX ( x , d , r + i ) ;
65269: LD_ADDR_VAR 0 5
65273: PUSH
65274: LD_VAR 0 4
65278: PPUSH
65279: LD_VAR 0 8
65283: PPUSH
65284: LD_VAR 0 9
65288: PUSH
65289: LD_VAR 0 10
65293: PLUS
65294: PPUSH
65295: CALL_OW 272
65299: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65300: LD_ADDR_VAR 0 7
65304: PUSH
65305: LD_VAR 0 6
65309: PPUSH
65310: LD_VAR 0 8
65314: PPUSH
65315: LD_VAR 0 9
65319: PUSH
65320: LD_VAR 0 10
65324: PLUS
65325: PPUSH
65326: CALL_OW 273
65330: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65331: LD_VAR 0 5
65335: PPUSH
65336: LD_VAR 0 7
65340: PPUSH
65341: CALL_OW 488
65345: PUSH
65346: LD_VAR 0 5
65350: PPUSH
65351: LD_VAR 0 7
65355: PPUSH
65356: CALL_OW 428
65360: PPUSH
65361: CALL_OW 247
65365: PUSH
65366: LD_INT 3
65368: PUSH
65369: LD_INT 2
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: IN
65376: NOT
65377: AND
65378: IFFALSE 65422
// begin ComMoveXY ( unit , _x , _y ) ;
65380: LD_VAR 0 1
65384: PPUSH
65385: LD_VAR 0 5
65389: PPUSH
65390: LD_VAR 0 7
65394: PPUSH
65395: CALL_OW 111
// result := [ _x , _y ] ;
65399: LD_ADDR_VAR 0 3
65403: PUSH
65404: LD_VAR 0 5
65408: PUSH
65409: LD_VAR 0 7
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: ST_TO_ADDR
// exit ;
65418: POP
65419: POP
65420: GO 65426
// end ; end ;
65422: GO 65266
65424: POP
65425: POP
// end ;
65426: LD_VAR 0 3
65430: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65431: LD_INT 0
65433: PPUSH
65434: PPUSH
65435: PPUSH
// result := 0 ;
65436: LD_ADDR_VAR 0 3
65440: PUSH
65441: LD_INT 0
65443: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65444: LD_VAR 0 1
65448: PUSH
65449: LD_INT 0
65451: LESS
65452: PUSH
65453: LD_VAR 0 1
65457: PUSH
65458: LD_INT 8
65460: GREATER
65461: OR
65462: PUSH
65463: LD_VAR 0 2
65467: PUSH
65468: LD_INT 0
65470: LESS
65471: OR
65472: PUSH
65473: LD_VAR 0 2
65477: PUSH
65478: LD_INT 8
65480: GREATER
65481: OR
65482: IFFALSE 65486
// exit ;
65484: GO 65561
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65486: LD_ADDR_VAR 0 4
65490: PUSH
65491: LD_INT 22
65493: PUSH
65494: LD_VAR 0 2
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PPUSH
65503: CALL_OW 69
65507: PUSH
65508: FOR_IN
65509: IFFALSE 65559
// begin un := UnitShoot ( i ) ;
65511: LD_ADDR_VAR 0 5
65515: PUSH
65516: LD_VAR 0 4
65520: PPUSH
65521: CALL_OW 504
65525: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65526: LD_VAR 0 5
65530: PPUSH
65531: CALL_OW 255
65535: PUSH
65536: LD_VAR 0 1
65540: EQUAL
65541: IFFALSE 65557
// begin result := un ;
65543: LD_ADDR_VAR 0 3
65547: PUSH
65548: LD_VAR 0 5
65552: ST_TO_ADDR
// exit ;
65553: POP
65554: POP
65555: GO 65561
// end ; end ;
65557: GO 65508
65559: POP
65560: POP
// end ;
65561: LD_VAR 0 3
65565: RET
// export function GetCargoBay ( units ) ; begin
65566: LD_INT 0
65568: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65569: LD_ADDR_VAR 0 2
65573: PUSH
65574: LD_VAR 0 1
65578: PPUSH
65579: LD_INT 2
65581: PUSH
65582: LD_INT 34
65584: PUSH
65585: LD_INT 12
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 34
65594: PUSH
65595: LD_INT 51
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: LD_INT 34
65604: PUSH
65605: LD_INT 32
65607: PUSH
65608: EMPTY
65609: LIST
65610: LIST
65611: PUSH
65612: LD_INT 34
65614: PUSH
65615: LD_INT 89
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: PPUSH
65629: CALL_OW 72
65633: ST_TO_ADDR
// end ;
65634: LD_VAR 0 2
65638: RET
// export function Negate ( value ) ; begin
65639: LD_INT 0
65641: PPUSH
// result := not value ;
65642: LD_ADDR_VAR 0 2
65646: PUSH
65647: LD_VAR 0 1
65651: NOT
65652: ST_TO_ADDR
// end ;
65653: LD_VAR 0 2
65657: RET
// export function Inc ( value ) ; begin
65658: LD_INT 0
65660: PPUSH
// result := value + 1 ;
65661: LD_ADDR_VAR 0 2
65665: PUSH
65666: LD_VAR 0 1
65670: PUSH
65671: LD_INT 1
65673: PLUS
65674: ST_TO_ADDR
// end ;
65675: LD_VAR 0 2
65679: RET
// export function Dec ( value ) ; begin
65680: LD_INT 0
65682: PPUSH
// result := value - 1 ;
65683: LD_ADDR_VAR 0 2
65687: PUSH
65688: LD_VAR 0 1
65692: PUSH
65693: LD_INT 1
65695: MINUS
65696: ST_TO_ADDR
// end ;
65697: LD_VAR 0 2
65701: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65702: LD_INT 0
65704: PPUSH
65705: PPUSH
65706: PPUSH
65707: PPUSH
65708: PPUSH
65709: PPUSH
65710: PPUSH
65711: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65712: LD_VAR 0 1
65716: PPUSH
65717: LD_VAR 0 2
65721: PPUSH
65722: CALL_OW 488
65726: NOT
65727: PUSH
65728: LD_VAR 0 3
65732: PPUSH
65733: LD_VAR 0 4
65737: PPUSH
65738: CALL_OW 488
65742: NOT
65743: OR
65744: IFFALSE 65757
// begin result := - 1 ;
65746: LD_ADDR_VAR 0 5
65750: PUSH
65751: LD_INT 1
65753: NEG
65754: ST_TO_ADDR
// exit ;
65755: GO 65992
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65757: LD_ADDR_VAR 0 12
65761: PUSH
65762: LD_VAR 0 1
65766: PPUSH
65767: LD_VAR 0 2
65771: PPUSH
65772: LD_VAR 0 3
65776: PPUSH
65777: LD_VAR 0 4
65781: PPUSH
65782: CALL 64842 0 4
65786: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65787: LD_ADDR_VAR 0 11
65791: PUSH
65792: LD_VAR 0 1
65796: PPUSH
65797: LD_VAR 0 2
65801: PPUSH
65802: LD_VAR 0 12
65806: PUSH
65807: LD_INT 1
65809: ARRAY
65810: PPUSH
65811: LD_VAR 0 12
65815: PUSH
65816: LD_INT 2
65818: ARRAY
65819: PPUSH
65820: CALL_OW 298
65824: ST_TO_ADDR
// distance := 9999 ;
65825: LD_ADDR_VAR 0 10
65829: PUSH
65830: LD_INT 9999
65832: ST_TO_ADDR
// for i := 0 to 5 do
65833: LD_ADDR_VAR 0 6
65837: PUSH
65838: DOUBLE
65839: LD_INT 0
65841: DEC
65842: ST_TO_ADDR
65843: LD_INT 5
65845: PUSH
65846: FOR_TO
65847: IFFALSE 65990
// begin _x := ShiftX ( x1 , i , centerDist ) ;
65849: LD_ADDR_VAR 0 7
65853: PUSH
65854: LD_VAR 0 1
65858: PPUSH
65859: LD_VAR 0 6
65863: PPUSH
65864: LD_VAR 0 11
65868: PPUSH
65869: CALL_OW 272
65873: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
65874: LD_ADDR_VAR 0 8
65878: PUSH
65879: LD_VAR 0 2
65883: PPUSH
65884: LD_VAR 0 6
65888: PPUSH
65889: LD_VAR 0 11
65893: PPUSH
65894: CALL_OW 273
65898: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65899: LD_VAR 0 7
65903: PPUSH
65904: LD_VAR 0 8
65908: PPUSH
65909: CALL_OW 488
65913: NOT
65914: IFFALSE 65918
// continue ;
65916: GO 65846
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65918: LD_ADDR_VAR 0 9
65922: PUSH
65923: LD_VAR 0 12
65927: PUSH
65928: LD_INT 1
65930: ARRAY
65931: PPUSH
65932: LD_VAR 0 12
65936: PUSH
65937: LD_INT 2
65939: ARRAY
65940: PPUSH
65941: LD_VAR 0 7
65945: PPUSH
65946: LD_VAR 0 8
65950: PPUSH
65951: CALL_OW 298
65955: ST_TO_ADDR
// if tmp < distance then
65956: LD_VAR 0 9
65960: PUSH
65961: LD_VAR 0 10
65965: LESS
65966: IFFALSE 65988
// begin result := i ;
65968: LD_ADDR_VAR 0 5
65972: PUSH
65973: LD_VAR 0 6
65977: ST_TO_ADDR
// distance := tmp ;
65978: LD_ADDR_VAR 0 10
65982: PUSH
65983: LD_VAR 0 9
65987: ST_TO_ADDR
// end ; end ;
65988: GO 65846
65990: POP
65991: POP
// end ;
65992: LD_VAR 0 5
65996: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65997: LD_INT 0
65999: PPUSH
66000: PPUSH
// if not driver or not IsInUnit ( driver ) then
66001: LD_VAR 0 1
66005: NOT
66006: PUSH
66007: LD_VAR 0 1
66011: PPUSH
66012: CALL_OW 310
66016: NOT
66017: OR
66018: IFFALSE 66022
// exit ;
66020: GO 66112
// vehicle := IsInUnit ( driver ) ;
66022: LD_ADDR_VAR 0 3
66026: PUSH
66027: LD_VAR 0 1
66031: PPUSH
66032: CALL_OW 310
66036: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66037: LD_VAR 0 1
66041: PPUSH
66042: LD_STRING \
66044: PUSH
66045: LD_INT 0
66047: PUSH
66048: LD_INT 0
66050: PUSH
66051: LD_INT 0
66053: PUSH
66054: LD_INT 0
66056: PUSH
66057: LD_INT 0
66059: PUSH
66060: LD_INT 0
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: PUSH
66072: LD_STRING E
66074: PUSH
66075: LD_INT 0
66077: PUSH
66078: LD_INT 0
66080: PUSH
66081: LD_VAR 0 3
66085: PUSH
66086: LD_INT 0
66088: PUSH
66089: LD_INT 0
66091: PUSH
66092: LD_INT 0
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PPUSH
66108: CALL_OW 446
// end ;
66112: LD_VAR 0 2
66116: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66117: LD_INT 0
66119: PPUSH
66120: PPUSH
// if not driver or not IsInUnit ( driver ) then
66121: LD_VAR 0 1
66125: NOT
66126: PUSH
66127: LD_VAR 0 1
66131: PPUSH
66132: CALL_OW 310
66136: NOT
66137: OR
66138: IFFALSE 66142
// exit ;
66140: GO 66232
// vehicle := IsInUnit ( driver ) ;
66142: LD_ADDR_VAR 0 3
66146: PUSH
66147: LD_VAR 0 1
66151: PPUSH
66152: CALL_OW 310
66156: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66157: LD_VAR 0 1
66161: PPUSH
66162: LD_STRING \
66164: PUSH
66165: LD_INT 0
66167: PUSH
66168: LD_INT 0
66170: PUSH
66171: LD_INT 0
66173: PUSH
66174: LD_INT 0
66176: PUSH
66177: LD_INT 0
66179: PUSH
66180: LD_INT 0
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: PUSH
66192: LD_STRING E
66194: PUSH
66195: LD_INT 0
66197: PUSH
66198: LD_INT 0
66200: PUSH
66201: LD_VAR 0 3
66205: PUSH
66206: LD_INT 0
66208: PUSH
66209: LD_INT 0
66211: PUSH
66212: LD_INT 0
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: LIST
66222: LIST
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PPUSH
66228: CALL_OW 447
// end ;
66232: LD_VAR 0 2
66236: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66237: LD_INT 0
66239: PPUSH
66240: PPUSH
66241: PPUSH
// tmp := [ ] ;
66242: LD_ADDR_VAR 0 5
66246: PUSH
66247: EMPTY
66248: ST_TO_ADDR
// for i in units do
66249: LD_ADDR_VAR 0 4
66253: PUSH
66254: LD_VAR 0 1
66258: PUSH
66259: FOR_IN
66260: IFFALSE 66298
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66262: LD_ADDR_VAR 0 5
66266: PUSH
66267: LD_VAR 0 5
66271: PPUSH
66272: LD_VAR 0 5
66276: PUSH
66277: LD_INT 1
66279: PLUS
66280: PPUSH
66281: LD_VAR 0 4
66285: PPUSH
66286: CALL_OW 256
66290: PPUSH
66291: CALL_OW 2
66295: ST_TO_ADDR
66296: GO 66259
66298: POP
66299: POP
// if not tmp then
66300: LD_VAR 0 5
66304: NOT
66305: IFFALSE 66309
// exit ;
66307: GO 66357
// if asc then
66309: LD_VAR 0 2
66313: IFFALSE 66337
// result := SortListByListAsc ( units , tmp ) else
66315: LD_ADDR_VAR 0 3
66319: PUSH
66320: LD_VAR 0 1
66324: PPUSH
66325: LD_VAR 0 5
66329: PPUSH
66330: CALL_OW 76
66334: ST_TO_ADDR
66335: GO 66357
// result := SortListByListDesc ( units , tmp ) ;
66337: LD_ADDR_VAR 0 3
66341: PUSH
66342: LD_VAR 0 1
66346: PPUSH
66347: LD_VAR 0 5
66351: PPUSH
66352: CALL_OW 77
66356: ST_TO_ADDR
// end ;
66357: LD_VAR 0 3
66361: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66362: LD_INT 0
66364: PPUSH
66365: PPUSH
// task := GetTaskList ( mech ) ;
66366: LD_ADDR_VAR 0 4
66370: PUSH
66371: LD_VAR 0 1
66375: PPUSH
66376: CALL_OW 437
66380: ST_TO_ADDR
// if not task then
66381: LD_VAR 0 4
66385: NOT
66386: IFFALSE 66390
// exit ;
66388: GO 66432
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66390: LD_ADDR_VAR 0 3
66394: PUSH
66395: LD_VAR 0 4
66399: PUSH
66400: LD_INT 1
66402: ARRAY
66403: PUSH
66404: LD_INT 1
66406: ARRAY
66407: PUSH
66408: LD_STRING r
66410: EQUAL
66411: PUSH
66412: LD_VAR 0 4
66416: PUSH
66417: LD_INT 1
66419: ARRAY
66420: PUSH
66421: LD_INT 4
66423: ARRAY
66424: PUSH
66425: LD_VAR 0 2
66429: EQUAL
66430: AND
66431: ST_TO_ADDR
// end ;
66432: LD_VAR 0 3
66436: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66437: LD_INT 0
66439: PPUSH
// SetDir ( unit , d ) ;
66440: LD_VAR 0 1
66444: PPUSH
66445: LD_VAR 0 4
66449: PPUSH
66450: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66454: LD_VAR 0 1
66458: PPUSH
66459: LD_VAR 0 2
66463: PPUSH
66464: LD_VAR 0 3
66468: PPUSH
66469: LD_VAR 0 5
66473: PPUSH
66474: CALL_OW 48
// end ;
66478: LD_VAR 0 6
66482: RET
// export function ToNaturalNumber ( number ) ; begin
66483: LD_INT 0
66485: PPUSH
// result := number div 1 ;
66486: LD_ADDR_VAR 0 2
66490: PUSH
66491: LD_VAR 0 1
66495: PUSH
66496: LD_INT 1
66498: DIV
66499: ST_TO_ADDR
// if number < 0 then
66500: LD_VAR 0 1
66504: PUSH
66505: LD_INT 0
66507: LESS
66508: IFFALSE 66518
// result := 0 ;
66510: LD_ADDR_VAR 0 2
66514: PUSH
66515: LD_INT 0
66517: ST_TO_ADDR
// end ;
66518: LD_VAR 0 2
66522: RET
// export function SortByClass ( units , class ) ; var un ; begin
66523: LD_INT 0
66525: PPUSH
66526: PPUSH
// if not units or not class then
66527: LD_VAR 0 1
66531: NOT
66532: PUSH
66533: LD_VAR 0 2
66537: NOT
66538: OR
66539: IFFALSE 66543
// exit ;
66541: GO 66638
// result := [ ] ;
66543: LD_ADDR_VAR 0 3
66547: PUSH
66548: EMPTY
66549: ST_TO_ADDR
// for un in units do
66550: LD_ADDR_VAR 0 4
66554: PUSH
66555: LD_VAR 0 1
66559: PUSH
66560: FOR_IN
66561: IFFALSE 66636
// if GetClass ( un ) = class then
66563: LD_VAR 0 4
66567: PPUSH
66568: CALL_OW 257
66572: PUSH
66573: LD_VAR 0 2
66577: EQUAL
66578: IFFALSE 66605
// result := Insert ( result , 1 , un ) else
66580: LD_ADDR_VAR 0 3
66584: PUSH
66585: LD_VAR 0 3
66589: PPUSH
66590: LD_INT 1
66592: PPUSH
66593: LD_VAR 0 4
66597: PPUSH
66598: CALL_OW 2
66602: ST_TO_ADDR
66603: GO 66634
// result := Replace ( result , result + 1 , un ) ;
66605: LD_ADDR_VAR 0 3
66609: PUSH
66610: LD_VAR 0 3
66614: PPUSH
66615: LD_VAR 0 3
66619: PUSH
66620: LD_INT 1
66622: PLUS
66623: PPUSH
66624: LD_VAR 0 4
66628: PPUSH
66629: CALL_OW 1
66633: ST_TO_ADDR
66634: GO 66560
66636: POP
66637: POP
// end ;
66638: LD_VAR 0 3
66642: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66643: LD_INT 0
66645: PPUSH
66646: PPUSH
66647: PPUSH
66648: PPUSH
66649: PPUSH
66650: PPUSH
66651: PPUSH
// result := [ ] ;
66652: LD_ADDR_VAR 0 4
66656: PUSH
66657: EMPTY
66658: ST_TO_ADDR
// if x - r < 0 then
66659: LD_VAR 0 1
66663: PUSH
66664: LD_VAR 0 3
66668: MINUS
66669: PUSH
66670: LD_INT 0
66672: LESS
66673: IFFALSE 66685
// min_x := 0 else
66675: LD_ADDR_VAR 0 8
66679: PUSH
66680: LD_INT 0
66682: ST_TO_ADDR
66683: GO 66701
// min_x := x - r ;
66685: LD_ADDR_VAR 0 8
66689: PUSH
66690: LD_VAR 0 1
66694: PUSH
66695: LD_VAR 0 3
66699: MINUS
66700: ST_TO_ADDR
// if y - r < 0 then
66701: LD_VAR 0 2
66705: PUSH
66706: LD_VAR 0 3
66710: MINUS
66711: PUSH
66712: LD_INT 0
66714: LESS
66715: IFFALSE 66727
// min_y := 0 else
66717: LD_ADDR_VAR 0 7
66721: PUSH
66722: LD_INT 0
66724: ST_TO_ADDR
66725: GO 66743
// min_y := y - r ;
66727: LD_ADDR_VAR 0 7
66731: PUSH
66732: LD_VAR 0 2
66736: PUSH
66737: LD_VAR 0 3
66741: MINUS
66742: ST_TO_ADDR
// max_x := x + r ;
66743: LD_ADDR_VAR 0 9
66747: PUSH
66748: LD_VAR 0 1
66752: PUSH
66753: LD_VAR 0 3
66757: PLUS
66758: ST_TO_ADDR
// max_y := y + r ;
66759: LD_ADDR_VAR 0 10
66763: PUSH
66764: LD_VAR 0 2
66768: PUSH
66769: LD_VAR 0 3
66773: PLUS
66774: ST_TO_ADDR
// for _x = min_x to max_x do
66775: LD_ADDR_VAR 0 5
66779: PUSH
66780: DOUBLE
66781: LD_VAR 0 8
66785: DEC
66786: ST_TO_ADDR
66787: LD_VAR 0 9
66791: PUSH
66792: FOR_TO
66793: IFFALSE 66894
// for _y = min_y to max_y do
66795: LD_ADDR_VAR 0 6
66799: PUSH
66800: DOUBLE
66801: LD_VAR 0 7
66805: DEC
66806: ST_TO_ADDR
66807: LD_VAR 0 10
66811: PUSH
66812: FOR_TO
66813: IFFALSE 66890
// begin if not ValidHex ( _x , _y ) then
66815: LD_VAR 0 5
66819: PPUSH
66820: LD_VAR 0 6
66824: PPUSH
66825: CALL_OW 488
66829: NOT
66830: IFFALSE 66834
// continue ;
66832: GO 66812
// if GetResourceTypeXY ( _x , _y ) then
66834: LD_VAR 0 5
66838: PPUSH
66839: LD_VAR 0 6
66843: PPUSH
66844: CALL_OW 283
66848: IFFALSE 66888
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66850: LD_ADDR_VAR 0 4
66854: PUSH
66855: LD_VAR 0 4
66859: PPUSH
66860: LD_VAR 0 4
66864: PUSH
66865: LD_INT 1
66867: PLUS
66868: PPUSH
66869: LD_VAR 0 5
66873: PUSH
66874: LD_VAR 0 6
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PPUSH
66883: CALL_OW 1
66887: ST_TO_ADDR
// end ;
66888: GO 66812
66890: POP
66891: POP
66892: GO 66792
66894: POP
66895: POP
// end ;
66896: LD_VAR 0 4
66900: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
66901: LD_INT 0
66903: PPUSH
66904: PPUSH
66905: PPUSH
66906: PPUSH
66907: PPUSH
66908: PPUSH
66909: PPUSH
66910: PPUSH
// if not units then
66911: LD_VAR 0 1
66915: NOT
66916: IFFALSE 66920
// exit ;
66918: GO 67444
// result := UnitFilter ( units , [ f_ok ] ) ;
66920: LD_ADDR_VAR 0 3
66924: PUSH
66925: LD_VAR 0 1
66929: PPUSH
66930: LD_INT 50
66932: PUSH
66933: EMPTY
66934: LIST
66935: PPUSH
66936: CALL_OW 72
66940: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66941: LD_ADDR_VAR 0 8
66945: PUSH
66946: LD_VAR 0 1
66950: PUSH
66951: LD_INT 1
66953: ARRAY
66954: PPUSH
66955: CALL_OW 255
66959: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
66960: LD_ADDR_VAR 0 10
66964: PUSH
66965: LD_INT 29
66967: PUSH
66968: LD_INT 91
66970: PUSH
66971: LD_INT 49
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: LIST
66978: ST_TO_ADDR
// if not result then
66979: LD_VAR 0 3
66983: NOT
66984: IFFALSE 66988
// exit ;
66986: GO 67444
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66988: LD_ADDR_VAR 0 5
66992: PUSH
66993: LD_INT 81
66995: PUSH
66996: LD_VAR 0 8
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: PPUSH
67005: CALL_OW 69
67009: ST_TO_ADDR
// for i in result do
67010: LD_ADDR_VAR 0 4
67014: PUSH
67015: LD_VAR 0 3
67019: PUSH
67020: FOR_IN
67021: IFFALSE 67442
// begin tag := GetTag ( i ) + 1 ;
67023: LD_ADDR_VAR 0 9
67027: PUSH
67028: LD_VAR 0 4
67032: PPUSH
67033: CALL_OW 110
67037: PUSH
67038: LD_INT 1
67040: PLUS
67041: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
67042: LD_ADDR_VAR 0 7
67046: PUSH
67047: LD_VAR 0 4
67051: PPUSH
67052: CALL_OW 250
67056: PPUSH
67057: LD_VAR 0 4
67061: PPUSH
67062: CALL_OW 251
67066: PPUSH
67067: LD_INT 6
67069: PPUSH
67070: CALL 66643 0 3
67074: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
67075: LD_VAR 0 4
67079: PPUSH
67080: CALL_OW 247
67084: PUSH
67085: LD_INT 2
67087: EQUAL
67088: PUSH
67089: LD_VAR 0 7
67093: AND
67094: PUSH
67095: LD_VAR 0 4
67099: PPUSH
67100: CALL_OW 264
67104: PUSH
67105: LD_VAR 0 10
67109: IN
67110: NOT
67111: AND
67112: IFFALSE 67151
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67114: LD_VAR 0 4
67118: PPUSH
67119: LD_VAR 0 7
67123: PUSH
67124: LD_INT 1
67126: ARRAY
67127: PUSH
67128: LD_INT 1
67130: ARRAY
67131: PPUSH
67132: LD_VAR 0 7
67136: PUSH
67137: LD_INT 1
67139: ARRAY
67140: PUSH
67141: LD_INT 2
67143: ARRAY
67144: PPUSH
67145: CALL_OW 116
67149: GO 67440
// if path > tag then
67151: LD_VAR 0 2
67155: PUSH
67156: LD_VAR 0 9
67160: GREATER
67161: IFFALSE 67369
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67163: LD_ADDR_VAR 0 6
67167: PUSH
67168: LD_VAR 0 5
67172: PPUSH
67173: LD_INT 91
67175: PUSH
67176: LD_VAR 0 4
67180: PUSH
67181: LD_INT 8
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: LIST
67188: PPUSH
67189: CALL_OW 72
67193: ST_TO_ADDR
// if nearEnemy then
67194: LD_VAR 0 6
67198: IFFALSE 67267
// begin if GetWeapon ( i ) = ru_time_lapser then
67200: LD_VAR 0 4
67204: PPUSH
67205: CALL_OW 264
67209: PUSH
67210: LD_INT 49
67212: EQUAL
67213: IFFALSE 67241
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67215: LD_VAR 0 4
67219: PPUSH
67220: LD_VAR 0 6
67224: PPUSH
67225: LD_VAR 0 4
67229: PPUSH
67230: CALL_OW 74
67234: PPUSH
67235: CALL_OW 112
67239: GO 67265
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67241: LD_VAR 0 4
67245: PPUSH
67246: LD_VAR 0 6
67250: PPUSH
67251: LD_VAR 0 4
67255: PPUSH
67256: CALL_OW 74
67260: PPUSH
67261: CALL 68369 0 2
// end else
67265: GO 67367
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67267: LD_VAR 0 4
67271: PPUSH
67272: LD_VAR 0 2
67276: PUSH
67277: LD_VAR 0 9
67281: ARRAY
67282: PUSH
67283: LD_INT 1
67285: ARRAY
67286: PPUSH
67287: LD_VAR 0 2
67291: PUSH
67292: LD_VAR 0 9
67296: ARRAY
67297: PUSH
67298: LD_INT 2
67300: ARRAY
67301: PPUSH
67302: CALL_OW 297
67306: PUSH
67307: LD_INT 6
67309: GREATER
67310: IFFALSE 67353
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67312: LD_VAR 0 4
67316: PPUSH
67317: LD_VAR 0 2
67321: PUSH
67322: LD_VAR 0 9
67326: ARRAY
67327: PUSH
67328: LD_INT 1
67330: ARRAY
67331: PPUSH
67332: LD_VAR 0 2
67336: PUSH
67337: LD_VAR 0 9
67341: ARRAY
67342: PUSH
67343: LD_INT 2
67345: ARRAY
67346: PPUSH
67347: CALL_OW 114
67351: GO 67367
// SetTag ( i , tag ) ;
67353: LD_VAR 0 4
67357: PPUSH
67358: LD_VAR 0 9
67362: PPUSH
67363: CALL_OW 109
// end else
67367: GO 67440
// if enemy then
67369: LD_VAR 0 5
67373: IFFALSE 67440
// begin if GetWeapon ( i ) = ru_time_lapser then
67375: LD_VAR 0 4
67379: PPUSH
67380: CALL_OW 264
67384: PUSH
67385: LD_INT 49
67387: EQUAL
67388: IFFALSE 67416
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67390: LD_VAR 0 4
67394: PPUSH
67395: LD_VAR 0 5
67399: PPUSH
67400: LD_VAR 0 4
67404: PPUSH
67405: CALL_OW 74
67409: PPUSH
67410: CALL_OW 112
67414: GO 67440
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67416: LD_VAR 0 4
67420: PPUSH
67421: LD_VAR 0 5
67425: PPUSH
67426: LD_VAR 0 4
67430: PPUSH
67431: CALL_OW 74
67435: PPUSH
67436: CALL 68369 0 2
// end ; end ;
67440: GO 67020
67442: POP
67443: POP
// end ;
67444: LD_VAR 0 3
67448: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67449: LD_INT 0
67451: PPUSH
67452: PPUSH
67453: PPUSH
// if not unit or IsInUnit ( unit ) then
67454: LD_VAR 0 1
67458: NOT
67459: PUSH
67460: LD_VAR 0 1
67464: PPUSH
67465: CALL_OW 310
67469: OR
67470: IFFALSE 67474
// exit ;
67472: GO 67565
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67474: LD_ADDR_VAR 0 4
67478: PUSH
67479: LD_VAR 0 1
67483: PPUSH
67484: CALL_OW 250
67488: PPUSH
67489: LD_VAR 0 2
67493: PPUSH
67494: LD_INT 1
67496: PPUSH
67497: CALL_OW 272
67501: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67502: LD_ADDR_VAR 0 5
67506: PUSH
67507: LD_VAR 0 1
67511: PPUSH
67512: CALL_OW 251
67516: PPUSH
67517: LD_VAR 0 2
67521: PPUSH
67522: LD_INT 1
67524: PPUSH
67525: CALL_OW 273
67529: ST_TO_ADDR
// if ValidHex ( x , y ) then
67530: LD_VAR 0 4
67534: PPUSH
67535: LD_VAR 0 5
67539: PPUSH
67540: CALL_OW 488
67544: IFFALSE 67565
// ComTurnXY ( unit , x , y ) ;
67546: LD_VAR 0 1
67550: PPUSH
67551: LD_VAR 0 4
67555: PPUSH
67556: LD_VAR 0 5
67560: PPUSH
67561: CALL_OW 118
// end ;
67565: LD_VAR 0 3
67569: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67570: LD_INT 0
67572: PPUSH
67573: PPUSH
// result := false ;
67574: LD_ADDR_VAR 0 3
67578: PUSH
67579: LD_INT 0
67581: ST_TO_ADDR
// if not units then
67582: LD_VAR 0 2
67586: NOT
67587: IFFALSE 67591
// exit ;
67589: GO 67636
// for i in units do
67591: LD_ADDR_VAR 0 4
67595: PUSH
67596: LD_VAR 0 2
67600: PUSH
67601: FOR_IN
67602: IFFALSE 67634
// if See ( side , i ) then
67604: LD_VAR 0 1
67608: PPUSH
67609: LD_VAR 0 4
67613: PPUSH
67614: CALL_OW 292
67618: IFFALSE 67632
// begin result := true ;
67620: LD_ADDR_VAR 0 3
67624: PUSH
67625: LD_INT 1
67627: ST_TO_ADDR
// exit ;
67628: POP
67629: POP
67630: GO 67636
// end ;
67632: GO 67601
67634: POP
67635: POP
// end ;
67636: LD_VAR 0 3
67640: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67641: LD_INT 0
67643: PPUSH
67644: PPUSH
67645: PPUSH
67646: PPUSH
// if not unit or not points then
67647: LD_VAR 0 1
67651: NOT
67652: PUSH
67653: LD_VAR 0 2
67657: NOT
67658: OR
67659: IFFALSE 67663
// exit ;
67661: GO 67753
// dist := 99999 ;
67663: LD_ADDR_VAR 0 5
67667: PUSH
67668: LD_INT 99999
67670: ST_TO_ADDR
// for i in points do
67671: LD_ADDR_VAR 0 4
67675: PUSH
67676: LD_VAR 0 2
67680: PUSH
67681: FOR_IN
67682: IFFALSE 67751
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67684: LD_ADDR_VAR 0 6
67688: PUSH
67689: LD_VAR 0 1
67693: PPUSH
67694: LD_VAR 0 4
67698: PUSH
67699: LD_INT 1
67701: ARRAY
67702: PPUSH
67703: LD_VAR 0 4
67707: PUSH
67708: LD_INT 2
67710: ARRAY
67711: PPUSH
67712: CALL_OW 297
67716: ST_TO_ADDR
// if tmpDist < dist then
67717: LD_VAR 0 6
67721: PUSH
67722: LD_VAR 0 5
67726: LESS
67727: IFFALSE 67749
// begin result := i ;
67729: LD_ADDR_VAR 0 3
67733: PUSH
67734: LD_VAR 0 4
67738: ST_TO_ADDR
// dist := tmpDist ;
67739: LD_ADDR_VAR 0 5
67743: PUSH
67744: LD_VAR 0 6
67748: ST_TO_ADDR
// end ; end ;
67749: GO 67681
67751: POP
67752: POP
// end ;
67753: LD_VAR 0 3
67757: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
67758: LD_INT 0
67760: PPUSH
// uc_side := side ;
67761: LD_ADDR_OWVAR 20
67765: PUSH
67766: LD_VAR 0 1
67770: ST_TO_ADDR
// uc_nation := 3 ;
67771: LD_ADDR_OWVAR 21
67775: PUSH
67776: LD_INT 3
67778: ST_TO_ADDR
// vc_chassis := 25 ;
67779: LD_ADDR_OWVAR 37
67783: PUSH
67784: LD_INT 25
67786: ST_TO_ADDR
// vc_engine := engine_siberite ;
67787: LD_ADDR_OWVAR 39
67791: PUSH
67792: LD_INT 3
67794: ST_TO_ADDR
// vc_control := control_computer ;
67795: LD_ADDR_OWVAR 38
67799: PUSH
67800: LD_INT 3
67802: ST_TO_ADDR
// vc_weapon := 59 ;
67803: LD_ADDR_OWVAR 40
67807: PUSH
67808: LD_INT 59
67810: ST_TO_ADDR
// result := CreateVehicle ;
67811: LD_ADDR_VAR 0 5
67815: PUSH
67816: CALL_OW 45
67820: ST_TO_ADDR
// SetDir ( result , d ) ;
67821: LD_VAR 0 5
67825: PPUSH
67826: LD_VAR 0 4
67830: PPUSH
67831: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
67835: LD_VAR 0 5
67839: PPUSH
67840: LD_VAR 0 2
67844: PPUSH
67845: LD_VAR 0 3
67849: PPUSH
67850: LD_INT 0
67852: PPUSH
67853: CALL_OW 48
// end ;
67857: LD_VAR 0 5
67861: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
67862: LD_INT 0
67864: PPUSH
67865: PPUSH
67866: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
67867: LD_ADDR_VAR 0 2
67871: PUSH
67872: LD_INT 0
67874: PUSH
67875: LD_INT 0
67877: PUSH
67878: LD_INT 0
67880: PUSH
67881: LD_INT 0
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
67890: LD_VAR 0 1
67894: NOT
67895: PUSH
67896: LD_VAR 0 1
67900: PPUSH
67901: CALL_OW 264
67905: PUSH
67906: LD_INT 12
67908: PUSH
67909: LD_INT 51
67911: PUSH
67912: LD_INT 32
67914: PUSH
67915: LD_INT 89
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: LIST
67922: LIST
67923: IN
67924: NOT
67925: OR
67926: IFFALSE 67930
// exit ;
67928: GO 68028
// for i := 1 to 3 do
67930: LD_ADDR_VAR 0 3
67934: PUSH
67935: DOUBLE
67936: LD_INT 1
67938: DEC
67939: ST_TO_ADDR
67940: LD_INT 3
67942: PUSH
67943: FOR_TO
67944: IFFALSE 68026
// begin tmp := GetCargo ( cargo , i ) ;
67946: LD_ADDR_VAR 0 4
67950: PUSH
67951: LD_VAR 0 1
67955: PPUSH
67956: LD_VAR 0 3
67960: PPUSH
67961: CALL_OW 289
67965: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
67966: LD_ADDR_VAR 0 2
67970: PUSH
67971: LD_VAR 0 2
67975: PPUSH
67976: LD_VAR 0 3
67980: PPUSH
67981: LD_VAR 0 4
67985: PPUSH
67986: CALL_OW 1
67990: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
67991: LD_ADDR_VAR 0 2
67995: PUSH
67996: LD_VAR 0 2
68000: PPUSH
68001: LD_INT 4
68003: PPUSH
68004: LD_VAR 0 2
68008: PUSH
68009: LD_INT 4
68011: ARRAY
68012: PUSH
68013: LD_VAR 0 4
68017: PLUS
68018: PPUSH
68019: CALL_OW 1
68023: ST_TO_ADDR
// end ;
68024: GO 67943
68026: POP
68027: POP
// end ;
68028: LD_VAR 0 2
68032: RET
// export function Length ( array ) ; begin
68033: LD_INT 0
68035: PPUSH
// result := array + 0 ;
68036: LD_ADDR_VAR 0 2
68040: PUSH
68041: LD_VAR 0 1
68045: PUSH
68046: LD_INT 0
68048: PLUS
68049: ST_TO_ADDR
// end ;
68050: LD_VAR 0 2
68054: RET
// export function PrepareArray ( array ) ; begin
68055: LD_INT 0
68057: PPUSH
// result := array diff 0 ;
68058: LD_ADDR_VAR 0 2
68062: PUSH
68063: LD_VAR 0 1
68067: PUSH
68068: LD_INT 0
68070: DIFF
68071: ST_TO_ADDR
// if not result [ 1 ] then
68072: LD_VAR 0 2
68076: PUSH
68077: LD_INT 1
68079: ARRAY
68080: NOT
68081: IFFALSE 68101
// result := Delete ( result , 1 ) ;
68083: LD_ADDR_VAR 0 2
68087: PUSH
68088: LD_VAR 0 2
68092: PPUSH
68093: LD_INT 1
68095: PPUSH
68096: CALL_OW 3
68100: ST_TO_ADDR
// end ;
68101: LD_VAR 0 2
68105: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
68106: LD_INT 0
68108: PPUSH
68109: PPUSH
68110: PPUSH
68111: PPUSH
// sibRocketRange := 25 ;
68112: LD_ADDR_VAR 0 6
68116: PUSH
68117: LD_INT 25
68119: ST_TO_ADDR
// result := false ;
68120: LD_ADDR_VAR 0 4
68124: PUSH
68125: LD_INT 0
68127: ST_TO_ADDR
// for i := 0 to 5 do
68128: LD_ADDR_VAR 0 5
68132: PUSH
68133: DOUBLE
68134: LD_INT 0
68136: DEC
68137: ST_TO_ADDR
68138: LD_INT 5
68140: PUSH
68141: FOR_TO
68142: IFFALSE 68209
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
68144: LD_VAR 0 1
68148: PPUSH
68149: LD_VAR 0 5
68153: PPUSH
68154: LD_VAR 0 6
68158: PPUSH
68159: CALL_OW 272
68163: PPUSH
68164: LD_VAR 0 2
68168: PPUSH
68169: LD_VAR 0 5
68173: PPUSH
68174: LD_VAR 0 6
68178: PPUSH
68179: CALL_OW 273
68183: PPUSH
68184: LD_VAR 0 3
68188: PPUSH
68189: CALL_OW 309
68193: IFFALSE 68207
// begin result := true ;
68195: LD_ADDR_VAR 0 4
68199: PUSH
68200: LD_INT 1
68202: ST_TO_ADDR
// exit ;
68203: POP
68204: POP
68205: GO 68211
// end ;
68207: GO 68141
68209: POP
68210: POP
// end ;
68211: LD_VAR 0 4
68215: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
68216: LD_INT 0
68218: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
68219: LD_VAR 0 1
68223: PPUSH
68224: LD_VAR 0 2
68228: PPUSH
68229: LD_INT 0
68231: PPUSH
68232: LD_INT 0
68234: PPUSH
68235: LD_INT 1
68237: PPUSH
68238: LD_INT 0
68240: PPUSH
68241: CALL_OW 587
// end ;
68245: LD_VAR 0 3
68249: RET
// export function CenterOnNow ( unit ) ; begin
68250: LD_INT 0
68252: PPUSH
// result := IsInUnit ( unit ) ;
68253: LD_ADDR_VAR 0 2
68257: PUSH
68258: LD_VAR 0 1
68262: PPUSH
68263: CALL_OW 310
68267: ST_TO_ADDR
// if not result then
68268: LD_VAR 0 2
68272: NOT
68273: IFFALSE 68285
// result := unit ;
68275: LD_ADDR_VAR 0 2
68279: PUSH
68280: LD_VAR 0 1
68284: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
68285: LD_VAR 0 1
68289: PPUSH
68290: CALL_OW 87
// end ;
68294: LD_VAR 0 2
68298: RET
// export function ComMoveHex ( unit , hex ) ; begin
68299: LD_INT 0
68301: PPUSH
// if not hex then
68302: LD_VAR 0 2
68306: NOT
68307: IFFALSE 68311
// exit ;
68309: GO 68364
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
68311: LD_VAR 0 2
68315: PUSH
68316: LD_INT 1
68318: ARRAY
68319: PPUSH
68320: LD_VAR 0 2
68324: PUSH
68325: LD_INT 2
68327: ARRAY
68328: PPUSH
68329: CALL_OW 428
68333: IFFALSE 68337
// exit ;
68335: GO 68364
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
68337: LD_VAR 0 1
68341: PPUSH
68342: LD_VAR 0 2
68346: PUSH
68347: LD_INT 1
68349: ARRAY
68350: PPUSH
68351: LD_VAR 0 2
68355: PUSH
68356: LD_INT 2
68358: ARRAY
68359: PPUSH
68360: CALL_OW 111
// end ;
68364: LD_VAR 0 3
68368: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
68369: LD_INT 0
68371: PPUSH
68372: PPUSH
68373: PPUSH
// if not unit or not enemy then
68374: LD_VAR 0 1
68378: NOT
68379: PUSH
68380: LD_VAR 0 2
68384: NOT
68385: OR
68386: IFFALSE 68390
// exit ;
68388: GO 68514
// x := GetX ( enemy ) ;
68390: LD_ADDR_VAR 0 4
68394: PUSH
68395: LD_VAR 0 2
68399: PPUSH
68400: CALL_OW 250
68404: ST_TO_ADDR
// y := GetY ( enemy ) ;
68405: LD_ADDR_VAR 0 5
68409: PUSH
68410: LD_VAR 0 2
68414: PPUSH
68415: CALL_OW 251
68419: ST_TO_ADDR
// if ValidHex ( x , y ) then
68420: LD_VAR 0 4
68424: PPUSH
68425: LD_VAR 0 5
68429: PPUSH
68430: CALL_OW 488
68434: IFFALSE 68514
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
68436: LD_VAR 0 2
68440: PPUSH
68441: CALL_OW 247
68445: PUSH
68446: LD_INT 3
68448: PUSH
68449: LD_INT 2
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: IN
68456: PUSH
68457: LD_VAR 0 1
68461: PPUSH
68462: CALL_OW 255
68466: PPUSH
68467: LD_VAR 0 2
68471: PPUSH
68472: CALL_OW 292
68476: OR
68477: IFFALSE 68495
// ComAttackUnit ( unit , enemy ) else
68479: LD_VAR 0 1
68483: PPUSH
68484: LD_VAR 0 2
68488: PPUSH
68489: CALL_OW 115
68493: GO 68514
// ComAgressiveMove ( unit , x , y ) ;
68495: LD_VAR 0 1
68499: PPUSH
68500: LD_VAR 0 4
68504: PPUSH
68505: LD_VAR 0 5
68509: PPUSH
68510: CALL_OW 114
// end ;
68514: LD_VAR 0 3
68518: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
68519: LD_INT 0
68521: PPUSH
68522: PPUSH
68523: PPUSH
// list := AreaToList ( area , 0 ) ;
68524: LD_ADDR_VAR 0 5
68528: PUSH
68529: LD_VAR 0 1
68533: PPUSH
68534: LD_INT 0
68536: PPUSH
68537: CALL_OW 517
68541: ST_TO_ADDR
// if not list then
68542: LD_VAR 0 5
68546: NOT
68547: IFFALSE 68551
// exit ;
68549: GO 68681
// if all then
68551: LD_VAR 0 2
68555: IFFALSE 68643
// begin for i := 1 to list [ 1 ] do
68557: LD_ADDR_VAR 0 4
68561: PUSH
68562: DOUBLE
68563: LD_INT 1
68565: DEC
68566: ST_TO_ADDR
68567: LD_VAR 0 5
68571: PUSH
68572: LD_INT 1
68574: ARRAY
68575: PUSH
68576: FOR_TO
68577: IFFALSE 68639
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
68579: LD_ADDR_VAR 0 3
68583: PUSH
68584: LD_VAR 0 3
68588: PPUSH
68589: LD_VAR 0 3
68593: PUSH
68594: LD_INT 1
68596: PLUS
68597: PPUSH
68598: LD_VAR 0 5
68602: PUSH
68603: LD_INT 1
68605: ARRAY
68606: PUSH
68607: LD_VAR 0 4
68611: ARRAY
68612: PUSH
68613: LD_VAR 0 5
68617: PUSH
68618: LD_INT 2
68620: ARRAY
68621: PUSH
68622: LD_VAR 0 4
68626: ARRAY
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PPUSH
68632: CALL_OW 1
68636: ST_TO_ADDR
68637: GO 68576
68639: POP
68640: POP
// exit ;
68641: GO 68681
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
68643: LD_ADDR_VAR 0 3
68647: PUSH
68648: LD_VAR 0 5
68652: PUSH
68653: LD_INT 1
68655: ARRAY
68656: PUSH
68657: LD_INT 1
68659: ARRAY
68660: PUSH
68661: LD_VAR 0 5
68665: PUSH
68666: LD_INT 2
68668: ARRAY
68669: PUSH
68670: LD_INT 1
68672: ARRAY
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: EMPTY
68679: LIST
68680: ST_TO_ADDR
// end ;
68681: LD_VAR 0 3
68685: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
68686: LD_INT 0
68688: PPUSH
68689: PPUSH
// list := AreaToList ( area , 0 ) ;
68690: LD_ADDR_VAR 0 4
68694: PUSH
68695: LD_VAR 0 1
68699: PPUSH
68700: LD_INT 0
68702: PPUSH
68703: CALL_OW 517
68707: ST_TO_ADDR
// if not list then
68708: LD_VAR 0 4
68712: NOT
68713: IFFALSE 68717
// exit ;
68715: GO 68758
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
68717: LD_ADDR_VAR 0 3
68721: PUSH
68722: LD_VAR 0 4
68726: PUSH
68727: LD_INT 1
68729: ARRAY
68730: PUSH
68731: LD_INT 1
68733: ARRAY
68734: PUSH
68735: LD_VAR 0 4
68739: PUSH
68740: LD_INT 2
68742: ARRAY
68743: PUSH
68744: LD_INT 1
68746: ARRAY
68747: PUSH
68748: LD_VAR 0 2
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: LIST
68757: ST_TO_ADDR
// end ;
68758: LD_VAR 0 3
68762: RET
// export function First ( array ) ; begin
68763: LD_INT 0
68765: PPUSH
// if not array then
68766: LD_VAR 0 1
68770: NOT
68771: IFFALSE 68775
// exit ;
68773: GO 68789
// result := array [ 1 ] ;
68775: LD_ADDR_VAR 0 2
68779: PUSH
68780: LD_VAR 0 1
68784: PUSH
68785: LD_INT 1
68787: ARRAY
68788: ST_TO_ADDR
// end ;
68789: LD_VAR 0 2
68793: RET
// export function Last ( array ) ; begin
68794: LD_INT 0
68796: PPUSH
// if not array then
68797: LD_VAR 0 1
68801: NOT
68802: IFFALSE 68806
// exit ;
68804: GO 68822
// result := array [ array ] ;
68806: LD_ADDR_VAR 0 2
68810: PUSH
68811: LD_VAR 0 1
68815: PUSH
68816: LD_VAR 0 1
68820: ARRAY
68821: ST_TO_ADDR
// end ;
68822: LD_VAR 0 2
68826: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
68827: LD_INT 0
68829: PPUSH
68830: PPUSH
// result := [ ] ;
68831: LD_ADDR_VAR 0 5
68835: PUSH
68836: EMPTY
68837: ST_TO_ADDR
// if not array then
68838: LD_VAR 0 1
68842: NOT
68843: IFFALSE 68847
// exit ;
68845: GO 68959
// for i := 1 to array do
68847: LD_ADDR_VAR 0 6
68851: PUSH
68852: DOUBLE
68853: LD_INT 1
68855: DEC
68856: ST_TO_ADDR
68857: LD_VAR 0 1
68861: PUSH
68862: FOR_TO
68863: IFFALSE 68957
// if array [ i ] [ index ] = value then
68865: LD_VAR 0 1
68869: PUSH
68870: LD_VAR 0 6
68874: ARRAY
68875: PUSH
68876: LD_VAR 0 2
68880: ARRAY
68881: PUSH
68882: LD_VAR 0 3
68886: EQUAL
68887: IFFALSE 68955
// begin if indexColumn then
68889: LD_VAR 0 4
68893: IFFALSE 68929
// result := Join ( result , array [ i ] [ indexColumn ] ) else
68895: LD_ADDR_VAR 0 5
68899: PUSH
68900: LD_VAR 0 5
68904: PPUSH
68905: LD_VAR 0 1
68909: PUSH
68910: LD_VAR 0 6
68914: ARRAY
68915: PUSH
68916: LD_VAR 0 4
68920: ARRAY
68921: PPUSH
68922: CALL 64297 0 2
68926: ST_TO_ADDR
68927: GO 68955
// result := Join ( result , array [ i ] ) ;
68929: LD_ADDR_VAR 0 5
68933: PUSH
68934: LD_VAR 0 5
68938: PPUSH
68939: LD_VAR 0 1
68943: PUSH
68944: LD_VAR 0 6
68948: ARRAY
68949: PPUSH
68950: CALL 64297 0 2
68954: ST_TO_ADDR
// end ;
68955: GO 68862
68957: POP
68958: POP
// end ;
68959: LD_VAR 0 5
68963: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
68964: LD_INT 0
68966: PPUSH
68967: PPUSH
68968: PPUSH
// if btype = b_depot then
68969: LD_VAR 0 2
68973: PUSH
68974: LD_INT 0
68976: EQUAL
68977: IFFALSE 68989
// begin result := true ;
68979: LD_ADDR_VAR 0 3
68983: PUSH
68984: LD_INT 1
68986: ST_TO_ADDR
// exit ;
68987: GO 69105
// end ; pom := GetBase ( depot ) ;
68989: LD_ADDR_VAR 0 4
68993: PUSH
68994: LD_VAR 0 1
68998: PPUSH
68999: CALL_OW 274
69003: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
69004: LD_ADDR_VAR 0 5
69008: PUSH
69009: LD_VAR 0 2
69013: PPUSH
69014: LD_VAR 0 1
69018: PPUSH
69019: CALL_OW 248
69023: PPUSH
69024: CALL_OW 450
69028: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
69029: LD_ADDR_VAR 0 3
69033: PUSH
69034: LD_VAR 0 4
69038: PPUSH
69039: LD_INT 1
69041: PPUSH
69042: CALL_OW 275
69046: PUSH
69047: LD_VAR 0 5
69051: PUSH
69052: LD_INT 1
69054: ARRAY
69055: GREATEREQUAL
69056: PUSH
69057: LD_VAR 0 4
69061: PPUSH
69062: LD_INT 2
69064: PPUSH
69065: CALL_OW 275
69069: PUSH
69070: LD_VAR 0 5
69074: PUSH
69075: LD_INT 2
69077: ARRAY
69078: GREATEREQUAL
69079: AND
69080: PUSH
69081: LD_VAR 0 4
69085: PPUSH
69086: LD_INT 3
69088: PPUSH
69089: CALL_OW 275
69093: PUSH
69094: LD_VAR 0 5
69098: PUSH
69099: LD_INT 3
69101: ARRAY
69102: GREATEREQUAL
69103: AND
69104: ST_TO_ADDR
// end ;
69105: LD_VAR 0 3
69109: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
69110: LD_INT 0
69112: PPUSH
// if not vehicles or not parkingPoint then
69113: LD_VAR 0 1
69117: NOT
69118: PUSH
69119: LD_VAR 0 2
69123: NOT
69124: OR
69125: IFFALSE 69129
// exit ;
69127: GO 69227
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
69129: LD_ADDR_VAR 0 1
69133: PUSH
69134: LD_VAR 0 1
69138: PPUSH
69139: LD_INT 50
69141: PUSH
69142: EMPTY
69143: LIST
69144: PUSH
69145: LD_INT 3
69147: PUSH
69148: LD_INT 92
69150: PUSH
69151: LD_VAR 0 2
69155: PUSH
69156: LD_INT 1
69158: ARRAY
69159: PUSH
69160: LD_VAR 0 2
69164: PUSH
69165: LD_INT 2
69167: ARRAY
69168: PUSH
69169: LD_INT 8
69171: PUSH
69172: EMPTY
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: PPUSH
69186: CALL_OW 72
69190: ST_TO_ADDR
// if not vehicles then
69191: LD_VAR 0 1
69195: NOT
69196: IFFALSE 69200
// exit ;
69198: GO 69227
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
69200: LD_VAR 0 1
69204: PPUSH
69205: LD_VAR 0 2
69209: PUSH
69210: LD_INT 1
69212: ARRAY
69213: PPUSH
69214: LD_VAR 0 2
69218: PUSH
69219: LD_INT 2
69221: ARRAY
69222: PPUSH
69223: CALL_OW 111
// end ;
69227: LD_VAR 0 3
69231: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
69232: LD_INT 0
69234: PPUSH
69235: PPUSH
69236: PPUSH
// if not side or not area then
69237: LD_VAR 0 1
69241: NOT
69242: PUSH
69243: LD_VAR 0 2
69247: NOT
69248: OR
69249: IFFALSE 69253
// exit ;
69251: GO 69372
// tmp := AreaToList ( area , 0 ) ;
69253: LD_ADDR_VAR 0 5
69257: PUSH
69258: LD_VAR 0 2
69262: PPUSH
69263: LD_INT 0
69265: PPUSH
69266: CALL_OW 517
69270: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
69271: LD_ADDR_VAR 0 4
69275: PUSH
69276: DOUBLE
69277: LD_INT 1
69279: DEC
69280: ST_TO_ADDR
69281: LD_VAR 0 5
69285: PUSH
69286: LD_INT 1
69288: ARRAY
69289: PUSH
69290: FOR_TO
69291: IFFALSE 69370
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
69293: LD_VAR 0 5
69297: PUSH
69298: LD_INT 1
69300: ARRAY
69301: PUSH
69302: LD_VAR 0 4
69306: ARRAY
69307: PPUSH
69308: LD_VAR 0 5
69312: PUSH
69313: LD_INT 2
69315: ARRAY
69316: PUSH
69317: LD_VAR 0 4
69321: ARRAY
69322: PPUSH
69323: CALL_OW 351
69327: IFFALSE 69368
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
69329: LD_VAR 0 5
69333: PUSH
69334: LD_INT 1
69336: ARRAY
69337: PUSH
69338: LD_VAR 0 4
69342: ARRAY
69343: PPUSH
69344: LD_VAR 0 5
69348: PUSH
69349: LD_INT 2
69351: ARRAY
69352: PUSH
69353: LD_VAR 0 4
69357: ARRAY
69358: PPUSH
69359: LD_VAR 0 1
69363: PPUSH
69364: CALL_OW 244
// end ;
69368: GO 69290
69370: POP
69371: POP
// end ; end_of_file
69372: LD_VAR 0 3
69376: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69377: LD_VAR 0 1
69381: PPUSH
69382: LD_VAR 0 2
69386: PPUSH
69387: LD_VAR 0 3
69391: PPUSH
69392: LD_VAR 0 4
69396: PPUSH
69397: LD_VAR 0 5
69401: PPUSH
69402: LD_VAR 0 6
69406: PPUSH
69407: CALL 6065 0 6
// end ;
69411: PPOPN 6
69413: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
69414: LD_INT 0
69416: PPUSH
// begin if not units then
69417: LD_VAR 0 1
69421: NOT
69422: IFFALSE 69426
// exit ;
69424: GO 69426
// end ;
69426: PPOPN 7
69428: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
69429: CALL 5952 0 0
// end ; end_of_file
69433: PPOPN 1
69435: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69436: LD_VAR 0 1
69440: PUSH
69441: LD_INT 200
69443: DOUBLE
69444: GREATEREQUAL
69445: IFFALSE 69453
69447: LD_INT 299
69449: DOUBLE
69450: LESSEQUAL
69451: IFTRUE 69455
69453: GO 69487
69455: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69456: LD_VAR 0 1
69460: PPUSH
69461: LD_VAR 0 2
69465: PPUSH
69466: LD_VAR 0 3
69470: PPUSH
69471: LD_VAR 0 4
69475: PPUSH
69476: LD_VAR 0 5
69480: PPUSH
69481: CALL 22088 0 5
69485: GO 69564
69487: LD_INT 300
69489: DOUBLE
69490: GREATEREQUAL
69491: IFFALSE 69499
69493: LD_INT 399
69495: DOUBLE
69496: LESSEQUAL
69497: IFTRUE 69501
69499: GO 69563
69501: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69502: LD_VAR 0 1
69506: PPUSH
69507: LD_VAR 0 2
69511: PPUSH
69512: LD_VAR 0 3
69516: PPUSH
69517: LD_VAR 0 4
69521: PPUSH
69522: LD_VAR 0 5
69526: PPUSH
69527: LD_VAR 0 6
69531: PPUSH
69532: LD_VAR 0 7
69536: PPUSH
69537: LD_VAR 0 8
69541: PPUSH
69542: LD_VAR 0 9
69546: PPUSH
69547: LD_VAR 0 10
69551: PPUSH
69552: LD_VAR 0 11
69556: PPUSH
69557: CALL 18413 0 11
69561: GO 69564
69563: POP
// end ;
69564: PPOPN 11
69566: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69567: LD_VAR 0 1
69571: PPUSH
69572: LD_VAR 0 2
69576: PPUSH
69577: LD_VAR 0 3
69581: PPUSH
69582: LD_VAR 0 4
69586: PPUSH
69587: LD_VAR 0 5
69591: PPUSH
69592: CALL 21824 0 5
// end ;
69596: PPOPN 5
69598: END
