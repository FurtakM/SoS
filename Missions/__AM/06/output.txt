// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export selectedPeople ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect = 0 ;
  15: LD_ADDR_EXP 18
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene = 1 ;
  23: LD_ADDR_EXP 19
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans = [ ] ;
  31: LD_ADDR_EXP 12
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans = [ ] ;
  38: LD_ADDR_EXP 13
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles = [ ] ;
  45: LD_ADDR_EXP 14
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 11
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// resources = [ ] ;
  59: LD_ADDR_EXP 21
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// mission_prefix := 06_ ;
  66: LD_ADDR_EXP 22
  70: PUSH
  71: LD_STRING 06_
  73: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  74: LD_ADDR_EXP 23
  78: PUSH
  79: LD_STRING 05_
  81: ST_TO_ADDR
// CreateNature ;
  82: CALL 166 0 0
// PrepareDeltaBase ;
  86: CALL 2408 0 0
// LoadVehicles ;
  90: CALL 1448 0 0
// PrepareHeroes ;
  94: CALL 287 0 0
// PrepareRandoms ;
  98: CALL 1749 0 0
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 102: LD_ADDR_EXP 20
 106: PUSH
 107: LD_INT 22
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 2
 119: PUSH
 120: LD_INT 30
 122: PUSH
 123: LD_INT 6
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 30
 132: PUSH
 133: LD_INT 7
 135: PUSH
 136: EMPTY
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 30
 142: PUSH
 143: LD_INT 8
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: PPUSH
 160: CALL_OW 69
 164: ST_TO_ADDR
// end ;
 165: END
// export function CreateNature ; var i ; begin
 166: LD_INT 0
 168: PPUSH
 169: PPUSH
// uc_side := 0 ;
 170: LD_ADDR_OWVAR 20
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// uc_nation := 0 ;
 178: LD_ADDR_OWVAR 21
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// for i = 1 to 4 do
 186: LD_ADDR_VAR 0 2
 190: PUSH
 191: DOUBLE
 192: LD_INT 1
 194: DEC
 195: ST_TO_ADDR
 196: LD_INT 4
 198: PUSH
 199: FOR_TO
 200: IFFALSE 280
// begin hc_gallery :=  ;
 202: LD_ADDR_OWVAR 33
 206: PUSH
 207: LD_STRING 
 209: ST_TO_ADDR
// hc_name :=  ;
 210: LD_ADDR_OWVAR 26
 214: PUSH
 215: LD_STRING 
 217: ST_TO_ADDR
// hc_attr := [ rand ( 10 , 11 ) , rand ( 10 , 12 ) ] ;
 218: LD_ADDR_OWVAR 29
 222: PUSH
 223: LD_INT 10
 225: PPUSH
 226: LD_INT 11
 228: PPUSH
 229: CALL_OW 12
 233: PUSH
 234: LD_INT 10
 236: PPUSH
 237: LD_INT 12
 239: PPUSH
 240: CALL_OW 12
 244: PUSH
 245: EMPTY
 246: LIST
 247: LIST
 248: ST_TO_ADDR
// hc_class := class_apeman ;
 249: LD_ADDR_OWVAR 28
 253: PUSH
 254: LD_INT 12
 256: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 22 , 18 , 20 , false ) ;
 257: CALL_OW 44
 261: PPUSH
 262: LD_INT 22
 264: PPUSH
 265: LD_INT 18
 267: PPUSH
 268: LD_INT 20
 270: PPUSH
 271: LD_INT 0
 273: PPUSH
 274: CALL_OW 50
// end ;
 278: GO 199
 280: POP
 281: POP
// end ; end_of_file
 282: LD_VAR 0 1
 286: RET
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 287: LD_INT 0
 289: PPUSH
 290: PPUSH
 291: PPUSH
 292: PPUSH
 293: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 294: LD_ADDR_VAR 0 3
 298: PUSH
 299: LD_INT 22
 301: PUSH
 302: LD_INT 1
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: PUSH
 309: LD_INT 21
 311: PUSH
 312: LD_INT 3
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: PUSH
 319: LD_INT 30
 321: PUSH
 322: LD_INT 0
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: LIST
 333: PPUSH
 334: CALL_OW 69
 338: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , delta ) ;
 339: LD_VAR 0 3
 343: PUSH
 344: LD_INT 1
 346: ARRAY
 347: PPUSH
 348: LD_STRING delta
 350: PPUSH
 351: CALL_OW 500
// uc_side = 1 ;
 355: LD_ADDR_OWVAR 20
 359: PUSH
 360: LD_INT 1
 362: ST_TO_ADDR
// uc_nation = 1 ;
 363: LD_ADDR_OWVAR 21
 367: PUSH
 368: LD_INT 1
 370: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 371: LD_ADDR_EXP 1
 375: PUSH
 376: LD_STRING JMM
 378: PPUSH
 379: LD_INT 1
 381: PPUSH
 382: LD_EXP 23
 386: PPUSH
 387: CALL 23805 0 3
 391: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ,  ) ;
 392: LD_ADDR_EXP 16
 396: PUSH
 397: LD_STRING Harisson
 399: PPUSH
 400: LD_INT 0
 402: PPUSH
 403: LD_STRING 
 405: PPUSH
 406: CALL 23805 0 3
 410: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 411: LD_EXP 1
 415: PPUSH
 416: LD_VAR 0 3
 420: PUSH
 421: LD_INT 1
 423: ARRAY
 424: PPUSH
 425: CALL_OW 250
 429: PPUSH
 430: LD_VAR 0 3
 434: PUSH
 435: LD_INT 1
 437: ARRAY
 438: PPUSH
 439: CALL_OW 251
 443: PPUSH
 444: LD_INT 5
 446: PPUSH
 447: LD_INT 0
 449: PPUSH
 450: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 454: LD_EXP 1
 458: PPUSH
 459: LD_INT 1
 461: PPUSH
 462: CALL_OW 336
// Gladstone = PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
 466: LD_ADDR_EXP 2
 470: PUSH
 471: LD_STRING Gladstone
 473: PPUSH
 474: LD_INT 1
 476: PPUSH
 477: LD_EXP 23
 481: PPUSH
 482: CALL 23805 0 3
 486: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 487: LD_EXP 2
 491: PPUSH
 492: LD_VAR 0 3
 496: PUSH
 497: LD_INT 1
 499: ARRAY
 500: PPUSH
 501: CALL_OW 250
 505: PPUSH
 506: LD_VAR 0 3
 510: PUSH
 511: LD_INT 1
 513: ARRAY
 514: PPUSH
 515: CALL_OW 251
 519: PPUSH
 520: LD_INT 5
 522: PPUSH
 523: LD_INT 0
 525: PPUSH
 526: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 530: LD_EXP 2
 534: PPUSH
 535: LD_INT 4
 537: PPUSH
 538: CALL_OW 336
// Denis = PrepareUnit ( Denis , true , mission_prefix_prev ) ;
 542: LD_ADDR_EXP 3
 546: PUSH
 547: LD_STRING Denis
 549: PPUSH
 550: LD_INT 1
 552: PPUSH
 553: LD_EXP 23
 557: PPUSH
 558: CALL 23805 0 3
 562: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 563: LD_EXP 3
 567: PPUSH
 568: LD_VAR 0 3
 572: PUSH
 573: LD_INT 1
 575: ARRAY
 576: PPUSH
 577: CALL_OW 250
 581: PPUSH
 582: LD_VAR 0 3
 586: PUSH
 587: LD_INT 1
 589: ARRAY
 590: PPUSH
 591: CALL_OW 251
 595: PPUSH
 596: LD_INT 5
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 606: LD_EXP 3
 610: PPUSH
 611: LD_INT 4
 613: PPUSH
 614: CALL_OW 336
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 618: LD_STRING FrankInDelta
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 30
 628: PUSH
 629: LD_INT 1
 631: EQUAL
 632: IFFALSE 710
// begin Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 634: LD_ADDR_EXP 5
 638: PUSH
 639: LD_STRING Frank
 641: PPUSH
 642: LD_INT 1
 644: PPUSH
 645: LD_EXP 23
 649: PPUSH
 650: CALL 23805 0 3
 654: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 655: LD_EXP 5
 659: PPUSH
 660: LD_VAR 0 3
 664: PUSH
 665: LD_INT 1
 667: ARRAY
 668: PPUSH
 669: CALL_OW 250
 673: PPUSH
 674: LD_VAR 0 3
 678: PUSH
 679: LD_INT 1
 681: ARRAY
 682: PPUSH
 683: CALL_OW 251
 687: PPUSH
 688: LD_INT 5
 690: PPUSH
 691: LD_INT 0
 693: PPUSH
 694: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 698: LD_EXP 5
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 710: LD_STRING LisaInDelta
 712: PPUSH
 713: LD_INT 0
 715: PPUSH
 716: CALL_OW 30
 720: PUSH
 721: LD_INT 1
 723: EQUAL
 724: IFFALSE 802
// begin Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 726: LD_ADDR_EXP 4
 730: PUSH
 731: LD_STRING Lisa
 733: PPUSH
 734: LD_INT 1
 736: PPUSH
 737: LD_EXP 23
 741: PPUSH
 742: CALL 23805 0 3
 746: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 747: LD_EXP 4
 751: PPUSH
 752: LD_VAR 0 3
 756: PUSH
 757: LD_INT 1
 759: ARRAY
 760: PPUSH
 761: CALL_OW 250
 765: PPUSH
 766: LD_VAR 0 3
 770: PUSH
 771: LD_INT 1
 773: ARRAY
 774: PPUSH
 775: CALL_OW 251
 779: PPUSH
 780: LD_INT 5
 782: PPUSH
 783: LD_INT 0
 785: PPUSH
 786: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 790: LD_EXP 4
 794: PPUSH
 795: LD_INT 1
 797: PPUSH
 798: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 802: LD_STRING BobbyInDelta
 804: PPUSH
 805: LD_INT 0
 807: PPUSH
 808: CALL_OW 30
 812: PUSH
 813: LD_INT 1
 815: EQUAL
 816: IFFALSE 894
// begin Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 818: LD_ADDR_EXP 6
 822: PUSH
 823: LD_STRING Bobby
 825: PPUSH
 826: LD_INT 1
 828: PPUSH
 829: LD_EXP 23
 833: PPUSH
 834: CALL 23805 0 3
 838: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 839: LD_EXP 6
 843: PPUSH
 844: LD_VAR 0 3
 848: PUSH
 849: LD_INT 1
 851: ARRAY
 852: PPUSH
 853: CALL_OW 250
 857: PPUSH
 858: LD_VAR 0 3
 862: PUSH
 863: LD_INT 1
 865: ARRAY
 866: PPUSH
 867: CALL_OW 251
 871: PPUSH
 872: LD_INT 5
 874: PPUSH
 875: LD_INT 0
 877: PPUSH
 878: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 882: LD_EXP 6
 886: PPUSH
 887: LD_INT 1
 889: PPUSH
 890: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 894: LD_STRING CyrusInDelta
 896: PPUSH
 897: LD_INT 0
 899: PPUSH
 900: CALL_OW 30
 904: PUSH
 905: LD_INT 1
 907: EQUAL
 908: IFFALSE 986
// begin Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 7
 914: PUSH
 915: LD_STRING Cyrus
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 23
 925: PPUSH
 926: CALL 23805 0 3
 930: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 931: LD_EXP 7
 935: PPUSH
 936: LD_VAR 0 3
 940: PUSH
 941: LD_INT 1
 943: ARRAY
 944: PPUSH
 945: CALL_OW 250
 949: PPUSH
 950: LD_VAR 0 3
 954: PUSH
 955: LD_INT 1
 957: ARRAY
 958: PPUSH
 959: CALL_OW 251
 963: PPUSH
 964: LD_INT 5
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
 974: LD_EXP 7
 978: PPUSH
 979: LD_INT 1
 981: PPUSH
 982: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
 986: LD_STRING DonaldsonInDelta
 988: PPUSH
 989: LD_INT 0
 991: PPUSH
 992: CALL_OW 30
 996: PUSH
 997: LD_INT 1
 999: EQUAL
1000: IFFALSE 1078
// begin Donaldson = PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
1002: LD_ADDR_EXP 9
1006: PUSH
1007: LD_STRING Donaldson
1009: PPUSH
1010: LD_INT 1
1012: PPUSH
1013: LD_EXP 23
1017: PPUSH
1018: CALL 23805 0 3
1022: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1023: LD_EXP 9
1027: PPUSH
1028: LD_VAR 0 3
1032: PUSH
1033: LD_INT 1
1035: ARRAY
1036: PPUSH
1037: CALL_OW 250
1041: PPUSH
1042: LD_VAR 0 3
1046: PUSH
1047: LD_INT 1
1049: ARRAY
1050: PPUSH
1051: CALL_OW 251
1055: PPUSH
1056: LD_INT 5
1058: PPUSH
1059: LD_INT 0
1061: PPUSH
1062: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
1066: LD_EXP 9
1070: PPUSH
1071: LD_INT 1
1073: PPUSH
1074: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
1078: LD_STRING BrownInDelta
1080: PPUSH
1081: LD_INT 0
1083: PPUSH
1084: CALL_OW 30
1088: PUSH
1089: LD_INT 1
1091: EQUAL
1092: IFFALSE 1170
// begin Brown = PrepareUnit ( Brown , true , mission_prefix_prev ) ;
1094: LD_ADDR_EXP 8
1098: PUSH
1099: LD_STRING Brown
1101: PPUSH
1102: LD_INT 1
1104: PPUSH
1105: LD_EXP 23
1109: PPUSH
1110: CALL 23805 0 3
1114: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1115: LD_EXP 8
1119: PPUSH
1120: LD_VAR 0 3
1124: PUSH
1125: LD_INT 1
1127: ARRAY
1128: PPUSH
1129: CALL_OW 250
1133: PPUSH
1134: LD_VAR 0 3
1138: PUSH
1139: LD_INT 1
1141: ARRAY
1142: PPUSH
1143: CALL_OW 251
1147: PPUSH
1148: LD_INT 5
1150: PPUSH
1151: LD_INT 0
1153: PPUSH
1154: CALL_OW 50
// SetClass ( Brown , 2 ) ;
1158: LD_EXP 8
1162: PPUSH
1163: LD_INT 2
1165: PPUSH
1166: CALL_OW 336
// end ; others = CreateCharacterSet ( othersInDelta ) ;
1170: LD_ADDR_EXP 10
1174: PUSH
1175: LD_STRING othersInDelta
1177: PPUSH
1178: CALL_OW 31
1182: ST_TO_ADDR
// for i in others do
1183: LD_ADDR_VAR 0 2
1187: PUSH
1188: LD_EXP 10
1192: PUSH
1193: FOR_IN
1194: IFFALSE 1241
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1196: LD_VAR 0 2
1200: PPUSH
1201: LD_VAR 0 3
1205: PUSH
1206: LD_INT 1
1208: ARRAY
1209: PPUSH
1210: CALL_OW 250
1214: PPUSH
1215: LD_VAR 0 3
1219: PUSH
1220: LD_INT 1
1222: ARRAY
1223: PPUSH
1224: CALL_OW 251
1228: PPUSH
1229: LD_INT 35
1231: PPUSH
1232: LD_INT 0
1234: PPUSH
1235: CALL_OW 50
1239: GO 1193
1241: POP
1242: POP
// apemans = CreateCharacterSet ( apeInDelta ) ;
1243: LD_ADDR_EXP 12
1247: PUSH
1248: LD_STRING apeInDelta
1250: PPUSH
1251: CALL_OW 31
1255: ST_TO_ADDR
// uc_nation = 0 ;
1256: LD_ADDR_OWVAR 21
1260: PUSH
1261: LD_INT 0
1263: ST_TO_ADDR
// if apemans > 5 then
1264: LD_EXP 12
1268: PUSH
1269: LD_INT 5
1271: GREATER
1272: IFFALSE 1367
// begin for i := 1 to 5 do
1274: LD_ADDR_VAR 0 2
1278: PUSH
1279: DOUBLE
1280: LD_INT 1
1282: DEC
1283: ST_TO_ADDR
1284: LD_INT 5
1286: PUSH
1287: FOR_TO
1288: IFFALSE 1363
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1290: LD_EXP 12
1294: PUSH
1295: LD_VAR 0 2
1299: ARRAY
1300: PPUSH
1301: LD_VAR 0 3
1305: PUSH
1306: LD_INT 1
1308: ARRAY
1309: PPUSH
1310: CALL_OW 250
1314: PPUSH
1315: LD_VAR 0 3
1319: PUSH
1320: LD_INT 1
1322: ARRAY
1323: PPUSH
1324: CALL_OW 251
1328: PPUSH
1329: LD_INT 50
1331: PPUSH
1332: LD_INT 0
1334: PPUSH
1335: CALL_OW 50
// yourApemans = yourApemans ^ apemans [ i ] ;
1339: LD_ADDR_EXP 13
1343: PUSH
1344: LD_EXP 13
1348: PUSH
1349: LD_EXP 12
1353: PUSH
1354: LD_VAR 0 2
1358: ARRAY
1359: ADD
1360: ST_TO_ADDR
// end ;
1361: GO 1287
1363: POP
1364: POP
// end else
1365: GO 1443
// begin for i in apemans do
1367: LD_ADDR_VAR 0 2
1371: PUSH
1372: LD_EXP 12
1376: PUSH
1377: FOR_IN
1378: IFFALSE 1441
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1380: LD_VAR 0 2
1384: PPUSH
1385: LD_VAR 0 3
1389: PUSH
1390: LD_INT 1
1392: ARRAY
1393: PPUSH
1394: CALL_OW 250
1398: PPUSH
1399: LD_VAR 0 3
1403: PUSH
1404: LD_INT 1
1406: ARRAY
1407: PPUSH
1408: CALL_OW 251
1412: PPUSH
1413: LD_INT 50
1415: PPUSH
1416: LD_INT 0
1418: PPUSH
1419: CALL_OW 50
// yourApemans = yourApemans ^ i ;
1423: LD_ADDR_EXP 13
1427: PUSH
1428: LD_EXP 13
1432: PUSH
1433: LD_VAR 0 2
1437: ADD
1438: ST_TO_ADDR
// end ;
1439: GO 1377
1441: POP
1442: POP
// end ; end ;
1443: LD_VAR 0 1
1447: RET
// export function LoadVehicles ; var i , veh , tmp , vehicles ; begin
1448: LD_INT 0
1450: PPUSH
1451: PPUSH
1452: PPUSH
1453: PPUSH
1454: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1455: LD_ADDR_VAR 0 4
1459: PUSH
1460: LD_INT 22
1462: PUSH
1463: LD_INT 1
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PUSH
1470: LD_INT 21
1472: PUSH
1473: LD_INT 3
1475: PUSH
1476: EMPTY
1477: LIST
1478: LIST
1479: PUSH
1480: LD_INT 30
1482: PUSH
1483: LD_INT 0
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: LIST
1494: PPUSH
1495: CALL_OW 69
1499: ST_TO_ADDR
// uc_side = 1 ;
1500: LD_ADDR_OWVAR 20
1504: PUSH
1505: LD_INT 1
1507: ST_TO_ADDR
// vehicles = LoadVariable ( vehiclesInDelta , [ ] ) ;
1508: LD_ADDR_VAR 0 5
1512: PUSH
1513: LD_STRING vehiclesInDelta
1515: PPUSH
1516: EMPTY
1517: PPUSH
1518: CALL_OW 30
1522: ST_TO_ADDR
// for i = 1 to vehicles do
1523: LD_ADDR_VAR 0 2
1527: PUSH
1528: DOUBLE
1529: LD_INT 1
1531: DEC
1532: ST_TO_ADDR
1533: LD_VAR 0 5
1537: PUSH
1538: FOR_TO
1539: IFFALSE 1742
// begin if vehicles [ i + 4 ] = 11 or vehicles [ i ] = 3 then
1541: LD_VAR 0 5
1545: PUSH
1546: LD_VAR 0 2
1550: PUSH
1551: LD_INT 4
1553: PLUS
1554: ARRAY
1555: PUSH
1556: LD_INT 11
1558: EQUAL
1559: PUSH
1560: LD_VAR 0 5
1564: PUSH
1565: LD_VAR 0 2
1569: ARRAY
1570: PUSH
1571: LD_INT 3
1573: EQUAL
1574: OR
1575: IFFALSE 1726
// begin uc_nation = vehicles [ i ] ;
1577: LD_ADDR_OWVAR 21
1581: PUSH
1582: LD_VAR 0 5
1586: PUSH
1587: LD_VAR 0 2
1591: ARRAY
1592: ST_TO_ADDR
// vc_chassis = vehicles [ i + 1 ] ;
1593: LD_ADDR_OWVAR 37
1597: PUSH
1598: LD_VAR 0 5
1602: PUSH
1603: LD_VAR 0 2
1607: PUSH
1608: LD_INT 1
1610: PLUS
1611: ARRAY
1612: ST_TO_ADDR
// vc_engine = vehicles [ i + 2 ] ;
1613: LD_ADDR_OWVAR 39
1617: PUSH
1618: LD_VAR 0 5
1622: PUSH
1623: LD_VAR 0 2
1627: PUSH
1628: LD_INT 2
1630: PLUS
1631: ARRAY
1632: ST_TO_ADDR
// vc_control = vehicles [ i + 3 ] ;
1633: LD_ADDR_OWVAR 38
1637: PUSH
1638: LD_VAR 0 5
1642: PUSH
1643: LD_VAR 0 2
1647: PUSH
1648: LD_INT 3
1650: PLUS
1651: ARRAY
1652: ST_TO_ADDR
// vc_weapon = vehicles [ i + 4 ] ;
1653: LD_ADDR_OWVAR 40
1657: PUSH
1658: LD_VAR 0 5
1662: PUSH
1663: LD_VAR 0 2
1667: PUSH
1668: LD_INT 4
1670: PLUS
1671: ARRAY
1672: ST_TO_ADDR
// veh = CreateVehicle ;
1673: LD_ADDR_VAR 0 3
1677: PUSH
1678: CALL_OW 45
1682: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 40 , false ) ;
1683: LD_VAR 0 3
1687: PPUSH
1688: LD_VAR 0 4
1692: PUSH
1693: LD_INT 1
1695: ARRAY
1696: PPUSH
1697: CALL_OW 250
1701: PPUSH
1702: LD_VAR 0 4
1706: PUSH
1707: LD_INT 1
1709: ARRAY
1710: PPUSH
1711: CALL_OW 251
1715: PPUSH
1716: LD_INT 40
1718: PPUSH
1719: LD_INT 0
1721: PPUSH
1722: CALL_OW 50
// end ; i = i + 4 ;
1726: LD_ADDR_VAR 0 2
1730: PUSH
1731: LD_VAR 0 2
1735: PUSH
1736: LD_INT 4
1738: PLUS
1739: ST_TO_ADDR
// end ;
1740: GO 1538
1742: POP
1743: POP
// end ;
1744: LD_VAR 0 1
1748: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1749: LD_INT 0
1751: PPUSH
1752: PPUSH
1753: PPUSH
1754: PPUSH
1755: PPUSH
// uc_side = 1 ;
1756: LD_ADDR_OWVAR 20
1760: PUSH
1761: LD_INT 1
1763: ST_TO_ADDR
// uc_nation = 1 ;
1764: LD_ADDR_OWVAR 21
1768: PUSH
1769: LD_INT 1
1771: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1772: LD_ADDR_VAR 0 4
1776: PUSH
1777: LD_INT 22
1779: PUSH
1780: LD_INT 1
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: PUSH
1787: LD_INT 21
1789: PUSH
1790: LD_INT 3
1792: PUSH
1793: EMPTY
1794: LIST
1795: LIST
1796: PUSH
1797: LD_INT 30
1799: PUSH
1800: LD_INT 0
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: LIST
1811: PPUSH
1812: CALL_OW 69
1816: ST_TO_ADDR
// if FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] then
1817: LD_INT 22
1819: PUSH
1820: LD_INT 1
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PUSH
1827: LD_INT 25
1829: PUSH
1830: LD_INT 4
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 26
1839: PUSH
1840: LD_INT 1
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: LIST
1851: PUSH
1852: EMPTY
1853: LIST
1854: PPUSH
1855: CALL_OW 69
1859: PUSH
1860: LD_EXP 1
1864: PUSH
1865: LD_EXP 7
1869: PUSH
1870: LD_EXP 6
1874: PUSH
1875: LD_EXP 5
1879: PUSH
1880: LD_EXP 2
1884: PUSH
1885: LD_EXP 3
1889: PUSH
1890: LD_EXP 8
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: DIFF
1904: IFFALSE 2005
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) [ 1 ] else
1906: LD_ADDR_EXP 15
1910: PUSH
1911: LD_INT 22
1913: PUSH
1914: LD_INT 1
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PUSH
1921: LD_INT 25
1923: PUSH
1924: LD_INT 4
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PUSH
1931: LD_INT 26
1933: PUSH
1934: LD_INT 1
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: LIST
1945: PUSH
1946: EMPTY
1947: LIST
1948: PPUSH
1949: CALL_OW 69
1953: PUSH
1954: LD_EXP 1
1958: PUSH
1959: LD_EXP 7
1963: PUSH
1964: LD_EXP 6
1968: PUSH
1969: LD_EXP 5
1973: PUSH
1974: LD_EXP 2
1978: PUSH
1979: LD_EXP 3
1983: PUSH
1984: LD_EXP 8
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: DIFF
1998: PUSH
1999: LD_INT 1
2001: ARRAY
2002: ST_TO_ADDR
2003: GO 2152
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
2005: LD_ADDR_VAR 0 5
2009: PUSH
2010: LD_INT 22
2012: PUSH
2013: LD_INT 1
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 26
2022: PUSH
2023: LD_INT 1
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PUSH
2034: EMPTY
2035: LIST
2036: PPUSH
2037: CALL_OW 69
2041: PUSH
2042: LD_EXP 1
2046: PUSH
2047: LD_EXP 7
2051: PUSH
2052: LD_EXP 6
2056: PUSH
2057: LD_EXP 5
2061: PUSH
2062: LD_EXP 2
2066: PUSH
2067: LD_EXP 3
2071: PUSH
2072: LD_EXP 8
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: DIFF
2086: ST_TO_ADDR
// if filter then
2087: LD_VAR 0 5
2091: IFFALSE 2152
// for i in filter do
2093: LD_ADDR_VAR 0 2
2097: PUSH
2098: LD_VAR 0 5
2102: PUSH
2103: FOR_IN
2104: IFFALSE 2150
// if GetSkill ( i , 4 ) >= 4 then
2106: LD_VAR 0 2
2110: PPUSH
2111: LD_INT 4
2113: PPUSH
2114: CALL_OW 259
2118: PUSH
2119: LD_INT 4
2121: GREATEREQUAL
2122: IFFALSE 2148
// begin deltaDoctor := i ;
2124: LD_ADDR_EXP 15
2128: PUSH
2129: LD_VAR 0 2
2133: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
2134: LD_EXP 15
2138: PPUSH
2139: LD_INT 4
2141: PPUSH
2142: CALL_OW 336
// break ;
2146: GO 2150
// end ;
2148: GO 2103
2150: POP
2151: POP
// end ; for i = 1 to 7 do
2152: LD_ADDR_VAR 0 2
2156: PUSH
2157: DOUBLE
2158: LD_INT 1
2160: DEC
2161: ST_TO_ADDR
2162: LD_INT 7
2164: PUSH
2165: FOR_TO
2166: IFFALSE 2303
// begin hc_gallery =  ;
2168: LD_ADDR_OWVAR 33
2172: PUSH
2173: LD_STRING 
2175: ST_TO_ADDR
// hc_name =  ;
2176: LD_ADDR_OWVAR 26
2180: PUSH
2181: LD_STRING 
2183: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) ) ;
2184: LD_INT 0
2186: PPUSH
2187: LD_INT 1
2189: PUSH
2190: LD_INT 2
2192: PUSH
2193: LD_INT 3
2195: PUSH
2196: LD_INT 4
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: PUSH
2205: LD_INT 1
2207: PPUSH
2208: LD_INT 4
2210: PPUSH
2211: CALL_OW 12
2215: ARRAY
2216: PPUSH
2217: LD_INT 3
2219: PPUSH
2220: LD_INT 5
2222: PPUSH
2223: CALL_OW 12
2227: PPUSH
2228: CALL_OW 380
// un = CreateHuman ;
2232: LD_ADDR_VAR 0 3
2236: PUSH
2237: CALL_OW 44
2241: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2242: LD_ADDR_EXP 11
2246: PUSH
2247: LD_EXP 11
2251: PUSH
2252: LD_VAR 0 3
2256: ADD
2257: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2258: LD_VAR 0 3
2262: PPUSH
2263: LD_VAR 0 4
2267: PUSH
2268: LD_INT 1
2270: ARRAY
2271: PPUSH
2272: CALL_OW 250
2276: PPUSH
2277: LD_VAR 0 4
2281: PUSH
2282: LD_INT 1
2284: ARRAY
2285: PPUSH
2286: CALL_OW 251
2290: PPUSH
2291: LD_INT 15
2293: PPUSH
2294: LD_INT 0
2296: PPUSH
2297: CALL_OW 50
// end ;
2301: GO 2165
2303: POP
2304: POP
// if deltaDoctor then
2305: LD_EXP 15
2309: IFFALSE 2313
// exit ;
2311: GO 2403
// hc_gallery = Dawkins ;
2313: LD_ADDR_OWVAR 33
2317: PUSH
2318: LD_STRING Dawkins
2320: ST_TO_ADDR
// hc_face_number := 1 ;
2321: LD_ADDR_OWVAR 34
2325: PUSH
2326: LD_INT 1
2328: ST_TO_ADDR
// hc_name = Dr. Adam Charles Dawkins ;
2329: LD_ADDR_OWVAR 26
2333: PUSH
2334: LD_STRING Dr. Adam Charles Dawkins
2336: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 6 ) ;
2337: LD_INT 1
2339: PPUSH
2340: LD_INT 4
2342: PPUSH
2343: LD_INT 6
2345: PPUSH
2346: CALL_OW 380
// deltaDoctor = CreateHuman ;
2350: LD_ADDR_EXP 15
2354: PUSH
2355: CALL_OW 44
2359: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2360: LD_EXP 15
2364: PPUSH
2365: LD_VAR 0 4
2369: PUSH
2370: LD_INT 1
2372: ARRAY
2373: PPUSH
2374: CALL_OW 250
2378: PPUSH
2379: LD_VAR 0 4
2383: PUSH
2384: LD_INT 1
2386: ARRAY
2387: PPUSH
2388: CALL_OW 251
2392: PPUSH
2393: LD_INT 5
2395: PPUSH
2396: LD_INT 0
2398: PPUSH
2399: CALL_OW 50
// end ; end_of_file
2403: LD_VAR 0 1
2407: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2408: LD_INT 0
2410: PPUSH
2411: PPUSH
2412: PPUSH
2413: PPUSH
2414: PPUSH
2415: PPUSH
2416: PPUSH
// buildings = LoadVariable ( buildingsInDelta , [ ] ) ;
2417: LD_ADDR_VAR 0 5
2421: PUSH
2422: LD_STRING buildingsInDelta
2424: PPUSH
2425: EMPTY
2426: PPUSH
2427: CALL_OW 30
2431: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2432: LD_INT 68
2434: PPUSH
2435: LD_INT 40
2437: PPUSH
2438: LD_INT 1
2440: PPUSH
2441: CALL_OW 441
// uc_side = 1 ;
2445: LD_ADDR_OWVAR 20
2449: PUSH
2450: LD_INT 1
2452: ST_TO_ADDR
// uc_nation = 1 ;
2453: LD_ADDR_OWVAR 21
2457: PUSH
2458: LD_INT 1
2460: ST_TO_ADDR
// for i = 1 to buildings do
2461: LD_ADDR_VAR 0 2
2465: PUSH
2466: DOUBLE
2467: LD_INT 1
2469: DEC
2470: ST_TO_ADDR
2471: LD_VAR 0 5
2475: PUSH
2476: FOR_TO
2477: IFFALSE 2775
// begin bc_type = buildings [ i ] [ 1 ] ;
2479: LD_ADDR_OWVAR 42
2483: PUSH
2484: LD_VAR 0 5
2488: PUSH
2489: LD_VAR 0 2
2493: ARRAY
2494: PUSH
2495: LD_INT 1
2497: ARRAY
2498: ST_TO_ADDR
// bc_level = buildings [ i ] [ 2 ] ;
2499: LD_ADDR_OWVAR 43
2503: PUSH
2504: LD_VAR 0 5
2508: PUSH
2509: LD_VAR 0 2
2513: ARRAY
2514: PUSH
2515: LD_INT 2
2517: ARRAY
2518: ST_TO_ADDR
// if bc_type = b_lab then
2519: LD_OWVAR 42
2523: PUSH
2524: LD_INT 6
2526: EQUAL
2527: IFFALSE 2545
// begin bc_kind1 = b_lab_basic ;
2529: LD_ADDR_OWVAR 44
2533: PUSH
2534: LD_INT 9
2536: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2537: LD_ADDR_OWVAR 45
2541: PUSH
2542: LD_INT 9
2544: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
2545: LD_OWVAR 42
2549: PUSH
2550: LD_INT 7
2552: EQUAL
2553: PUSH
2554: LD_OWVAR 42
2558: PUSH
2559: LD_INT 8
2561: EQUAL
2562: OR
2563: IFFALSE 2679
// begin if buildings [ i ] [ 6 ] then
2565: LD_VAR 0 5
2569: PUSH
2570: LD_VAR 0 2
2574: ARRAY
2575: PUSH
2576: LD_INT 6
2578: ARRAY
2579: IFFALSE 2601
// bc_kind1 = buildings [ i ] [ 6 ] ;
2581: LD_ADDR_OWVAR 44
2585: PUSH
2586: LD_VAR 0 5
2590: PUSH
2591: LD_VAR 0 2
2595: ARRAY
2596: PUSH
2597: LD_INT 6
2599: ARRAY
2600: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2601: LD_VAR 0 5
2605: PUSH
2606: LD_VAR 0 2
2610: ARRAY
2611: PUSH
2612: LD_INT 7
2614: ARRAY
2615: IFFALSE 2637
// bc_kind2 = buildings [ i ] [ 7 ] ;
2617: LD_ADDR_OWVAR 45
2621: PUSH
2622: LD_VAR 0 5
2626: PUSH
2627: LD_VAR 0 2
2631: ARRAY
2632: PUSH
2633: LD_INT 7
2635: ARRAY
2636: ST_TO_ADDR
// if not buildings [ i ] [ 6 ] and not buildings [ i ] [ 7 ] then
2637: LD_VAR 0 5
2641: PUSH
2642: LD_VAR 0 2
2646: ARRAY
2647: PUSH
2648: LD_INT 6
2650: ARRAY
2651: NOT
2652: PUSH
2653: LD_VAR 0 5
2657: PUSH
2658: LD_VAR 0 2
2662: ARRAY
2663: PUSH
2664: LD_INT 7
2666: ARRAY
2667: NOT
2668: AND
2669: IFFALSE 2679
// bc_type := b_lab ;
2671: LD_ADDR_OWVAR 42
2675: PUSH
2676: LD_INT 6
2678: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2679: LD_ADDR_VAR 0 4
2683: PUSH
2684: LD_VAR 0 5
2688: PUSH
2689: LD_VAR 0 2
2693: ARRAY
2694: PUSH
2695: LD_INT 3
2697: ARRAY
2698: PPUSH
2699: LD_VAR 0 5
2703: PUSH
2704: LD_VAR 0 2
2708: ARRAY
2709: PUSH
2710: LD_INT 4
2712: ARRAY
2713: PPUSH
2714: LD_VAR 0 5
2718: PUSH
2719: LD_VAR 0 2
2723: ARRAY
2724: PUSH
2725: LD_INT 5
2727: ARRAY
2728: PPUSH
2729: CALL_OW 47
2733: ST_TO_ADDR
// if GetBType ( building ) = b_bunker then
2734: LD_VAR 0 4
2738: PPUSH
2739: CALL_OW 266
2743: PUSH
2744: LD_INT 32
2746: EQUAL
2747: IFFALSE 2773
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2749: LD_VAR 0 4
2753: PPUSH
2754: LD_VAR 0 5
2758: PUSH
2759: LD_VAR 0 2
2763: ARRAY
2764: PUSH
2765: LD_INT 8
2767: ARRAY
2768: PPUSH
2769: CALL_OW 431
// end ;
2773: GO 2476
2775: POP
2776: POP
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2777: LD_ADDR_VAR 0 6
2781: PUSH
2782: LD_INT 22
2784: PUSH
2785: LD_INT 1
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: LD_INT 2
2794: PUSH
2795: LD_INT 30
2797: PUSH
2798: LD_INT 6
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: PUSH
2805: LD_INT 30
2807: PUSH
2808: LD_INT 7
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: PUSH
2815: LD_INT 30
2817: PUSH
2818: LD_INT 8
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: LIST
2829: LIST
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PPUSH
2835: CALL_OW 69
2839: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2840: LD_ADDR_VAR 0 7
2844: PUSH
2845: LD_INT 22
2847: PUSH
2848: LD_INT 1
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: LD_INT 30
2857: PUSH
2858: LD_INT 0
2860: PUSH
2861: EMPTY
2862: LIST
2863: LIST
2864: PUSH
2865: EMPTY
2866: LIST
2867: LIST
2868: PPUSH
2869: CALL_OW 69
2873: ST_TO_ADDR
// if lab > 0 and tmp > 0 then
2874: LD_VAR 0 6
2878: PUSH
2879: LD_INT 0
2881: GREATER
2882: PUSH
2883: LD_VAR 0 7
2887: PUSH
2888: LD_INT 0
2890: GREATER
2891: AND
2892: IFFALSE 2902
// baseCorrect = 1 ;
2894: LD_ADDR_EXP 18
2898: PUSH
2899: LD_INT 1
2901: ST_TO_ADDR
// if baseCorrect = 0 then
2902: LD_EXP 18
2906: PUSH
2907: LD_INT 0
2909: EQUAL
2910: IFFALSE 3283
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2912: LD_ADDR_VAR 0 2
2916: PUSH
2917: LD_INT 22
2919: PUSH
2920: LD_INT 1
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: PUSH
2927: LD_INT 21
2929: PUSH
2930: LD_INT 3
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: PPUSH
2941: CALL_OW 69
2945: PUSH
2946: FOR_IN
2947: IFFALSE 2960
// RemoveUnit ( i ) ;
2949: LD_VAR 0 2
2953: PPUSH
2954: CALL_OW 64
2958: GO 2946
2960: POP
2961: POP
// uc_nation = 1 ;
2962: LD_ADDR_OWVAR 21
2966: PUSH
2967: LD_INT 1
2969: ST_TO_ADDR
// uc_side = 1 ;
2970: LD_ADDR_OWVAR 20
2974: PUSH
2975: LD_INT 1
2977: ST_TO_ADDR
// bc_level = 5 ;
2978: LD_ADDR_OWVAR 43
2982: PUSH
2983: LD_INT 5
2985: ST_TO_ADDR
// bc_type = b_depot ;
2986: LD_ADDR_OWVAR 42
2990: PUSH
2991: LD_INT 0
2993: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2994: LD_INT 50
2996: PPUSH
2997: LD_INT 22
2999: PPUSH
3000: LD_INT 0
3002: PPUSH
3003: CALL_OW 47
// bc_type = b_bunker ;
3007: LD_ADDR_OWVAR 42
3011: PUSH
3012: LD_INT 32
3014: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
3015: LD_ADDR_VAR 0 4
3019: PUSH
3020: LD_INT 68
3022: PPUSH
3023: LD_INT 24
3025: PPUSH
3026: LD_INT 4
3028: PPUSH
3029: CALL_OW 47
3033: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
3034: LD_VAR 0 4
3038: PPUSH
3039: LD_INT 4
3041: PUSH
3042: LD_INT 11
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PUSH
3049: LD_INT 1
3051: PPUSH
3052: LD_INT 2
3054: PPUSH
3055: CALL_OW 12
3059: ARRAY
3060: PPUSH
3061: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
3065: LD_ADDR_VAR 0 4
3069: PUSH
3070: LD_INT 71
3072: PPUSH
3073: LD_INT 34
3075: PPUSH
3076: LD_INT 4
3078: PPUSH
3079: CALL_OW 47
3083: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
3084: LD_VAR 0 4
3088: PPUSH
3089: LD_INT 4
3091: PUSH
3092: LD_INT 11
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PUSH
3099: LD_INT 1
3101: PPUSH
3102: LD_INT 2
3104: PPUSH
3105: CALL_OW 12
3109: ARRAY
3110: PPUSH
3111: CALL_OW 431
// bc_type = 31 ;
3115: LD_ADDR_OWVAR 42
3119: PUSH
3120: LD_INT 31
3122: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
3123: LD_INT 51
3125: PPUSH
3126: LD_INT 7
3128: PPUSH
3129: LD_INT 3
3131: PPUSH
3132: CALL_OW 47
// bc_type = b_oil_mine ;
3136: LD_ADDR_OWVAR 42
3140: PUSH
3141: LD_INT 29
3143: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
3144: LD_INT 68
3146: PPUSH
3147: LD_INT 40
3149: PPUSH
3150: LD_INT 1
3152: PPUSH
3153: CALL_OW 47
// bc_type = b_workshop ;
3157: LD_ADDR_OWVAR 42
3161: PUSH
3162: LD_INT 2
3164: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3165: LD_INT 38
3167: PPUSH
3168: LD_INT 20
3170: PPUSH
3171: LD_INT 2
3173: PPUSH
3174: CALL_OW 47
// bc_type = b_armoury ;
3178: LD_ADDR_OWVAR 42
3182: PUSH
3183: LD_INT 4
3185: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3186: LD_INT 38
3188: PPUSH
3189: LD_INT 20
3191: PPUSH
3192: LD_INT 2
3194: PPUSH
3195: CALL_OW 47
// bc_type = b_solar_power ;
3199: LD_ADDR_OWVAR 42
3203: PUSH
3204: LD_INT 27
3206: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3207: LD_INT 46
3209: PPUSH
3210: LD_INT 12
3212: PPUSH
3213: LD_INT 1
3215: PPUSH
3216: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3220: LD_INT 48
3222: PPUSH
3223: LD_INT 11
3225: PPUSH
3226: LD_INT 2
3228: PPUSH
3229: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 49 , 11 , 3 ) ;
3233: LD_INT 49
3235: PPUSH
3236: LD_INT 11
3238: PPUSH
3239: LD_INT 3
3241: PPUSH
3242: CALL_OW 47
// bc_type = b_lab_half ;
3246: LD_ADDR_OWVAR 42
3250: PUSH
3251: LD_INT 7
3253: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
3254: LD_ADDR_OWVAR 44
3258: PUSH
3259: LD_INT 15
3261: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
3262: LD_ADDR_OWVAR 45
3266: PUSH
3267: LD_INT 9
3269: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3270: LD_INT 42
3272: PPUSH
3273: LD_INT 15
3275: PPUSH
3276: LD_INT 2
3278: PPUSH
3279: CALL_OW 47
// end ; end ; end_of_file
3283: LD_VAR 0 1
3287: RET
// every 1 do var i , j , tmp ;
3288: GO 3290
3290: DISABLE
3291: LD_INT 0
3293: PPUSH
3294: PPUSH
3295: PPUSH
// begin InGameOn ;
3296: CALL_OW 8
// CenterNowOnUnits ( lab [ 1 ] ) ;
3300: LD_EXP 20
3304: PUSH
3305: LD_INT 1
3307: ARRAY
3308: PPUSH
3309: CALL_OW 87
// if IsOK ( Denis ) then
3313: LD_EXP 3
3317: PPUSH
3318: CALL_OW 302
3322: IFFALSE 3350
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3324: LD_INT 6
3326: PPUSH
3327: LD_INT 1
3329: PPUSH
3330: LD_INT 2
3332: PPUSH
3333: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3337: LD_INT 20
3339: PPUSH
3340: LD_INT 1
3342: PPUSH
3343: LD_INT 1
3345: PPUSH
3346: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3350: LD_EXP 1
3354: PPUSH
3355: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3359: LD_EXP 1
3363: PPUSH
3364: LD_EXP 15
3368: PPUSH
3369: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3373: LD_INT 35
3375: PPUSH
3376: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3380: LD_EXP 15
3384: PPUSH
3385: LD_EXP 1
3389: PPUSH
3390: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3394: LD_EXP 1
3398: PPUSH
3399: LD_EXP 15
3403: PPUSH
3404: CALL_OW 296
3408: PUSH
3409: LD_INT 5
3411: LESS
3412: IFFALSE 3373
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3414: LD_EXP 15
3418: PPUSH
3419: LD_EXP 1
3423: PPUSH
3424: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3428: LD_EXP 1
3432: PPUSH
3433: LD_STRING D1-JMM-1
3435: PPUSH
3436: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3440: LD_EXP 15
3444: PPUSH
3445: LD_STRING D1-Sci-1
3447: PPUSH
3448: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3452: LD_EXP 1
3456: PUSH
3457: LD_EXP 15
3461: PUSH
3462: LD_EXP 3
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: LIST
3471: PPUSH
3472: LD_EXP 20
3476: PUSH
3477: LD_INT 1
3479: ARRAY
3480: PPUSH
3481: CALL_OW 120
// end ;
3485: PPOPN 3
3487: END
// every 0 0$2 trigger IsInUnit ( JMM ) = lab [ 1 ] and IsInUnit ( DeltaDoctor ) = lab [ 1 ] do var i , j , tmp ;
3488: LD_EXP 1
3492: PPUSH
3493: CALL_OW 310
3497: PUSH
3498: LD_EXP 20
3502: PUSH
3503: LD_INT 1
3505: ARRAY
3506: EQUAL
3507: PUSH
3508: LD_EXP 15
3512: PPUSH
3513: CALL_OW 310
3517: PUSH
3518: LD_EXP 20
3522: PUSH
3523: LD_INT 1
3525: ARRAY
3526: EQUAL
3527: AND
3528: IFFALSE 4074
3530: GO 3532
3532: DISABLE
3533: LD_INT 0
3535: PPUSH
3536: PPUSH
3537: PPUSH
// begin CenterNowOnUnits ( lab [ 1 ] ) ;
3538: LD_EXP 20
3542: PUSH
3543: LD_INT 1
3545: ARRAY
3546: PPUSH
3547: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3551: LD_EXP 1
3555: PPUSH
3556: LD_STRING D1-JMM-2
3558: PPUSH
3559: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3563: LD_EXP 15
3567: PPUSH
3568: LD_STRING D1-Sci-2
3570: PPUSH
3571: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3575: LD_EXP 1
3579: PPUSH
3580: LD_STRING D1-JMM-3
3582: PPUSH
3583: CALL_OW 88
// if IsOK ( Denis ) then
3587: LD_EXP 3
3591: PPUSH
3592: CALL_OW 302
3596: IFFALSE 3612
// Say ( DeltaDoctor , D1-Sci-3 ) else
3598: LD_EXP 15
3602: PPUSH
3603: LD_STRING D1-Sci-3
3605: PPUSH
3606: CALL_OW 88
3610: GO 3624
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3612: LD_EXP 15
3616: PPUSH
3617: LD_STRING D1-Sci-3a
3619: PPUSH
3620: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3624: LD_EXP 1
3628: PPUSH
3629: LD_STRING D1-JMM-4
3631: PPUSH
3632: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3636: LD_ADDR_VAR 0 3
3640: PUSH
3641: LD_INT 22
3643: PUSH
3644: LD_INT 1
3646: PUSH
3647: EMPTY
3648: LIST
3649: LIST
3650: PUSH
3651: LD_INT 25
3653: PUSH
3654: LD_INT 4
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: PUSH
3661: LD_INT 3
3663: PUSH
3664: LD_INT 54
3666: PUSH
3667: EMPTY
3668: LIST
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: LIST
3678: PPUSH
3679: CALL_OW 69
3683: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3684: LD_ADDR_VAR 0 1
3688: PUSH
3689: LD_INT 22
3691: PUSH
3692: LD_INT 0
3694: PUSH
3695: EMPTY
3696: LIST
3697: LIST
3698: PPUSH
3699: CALL_OW 69
3703: PUSH
3704: FOR_IN
3705: IFFALSE 3755
// for j in tmp do
3707: LD_ADDR_VAR 0 2
3711: PUSH
3712: LD_VAR 0 3
3716: PUSH
3717: FOR_IN
3718: IFFALSE 3751
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3720: LD_VAR 0 2
3724: PPUSH
3725: LD_VAR 0 1
3729: PPUSH
3730: CALL_OW 250
3734: PPUSH
3735: LD_VAR 0 1
3739: PPUSH
3740: CALL_OW 251
3744: PPUSH
3745: CALL_OW 191
3749: GO 3717
3751: POP
3752: POP
3753: GO 3704
3755: POP
3756: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3757: LD_EXP 15
3761: PPUSH
3762: LD_STRING D1-Sci-4
3764: PPUSH
3765: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3769: LD_EXP 1
3773: PPUSH
3774: LD_STRING D1-JMM-5
3776: PPUSH
3777: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3781: LD_EXP 15
3785: PPUSH
3786: LD_STRING D1-Sci-5
3788: PPUSH
3789: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3793: LD_EXP 1
3797: PPUSH
3798: LD_STRING D1-JMM-6
3800: PPUSH
3801: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3805: LD_EXP 16
3809: PPUSH
3810: LD_STRING D1-Har-6
3812: PPUSH
3813: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3817: LD_EXP 1
3821: PPUSH
3822: LD_STRING D1-JMM-7
3824: PPUSH
3825: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3829: LD_EXP 16
3833: PPUSH
3834: LD_STRING D1-Har-7
3836: PPUSH
3837: CALL_OW 94
// if IsOK ( Denis ) then
3841: LD_EXP 3
3845: PPUSH
3846: CALL_OW 302
3850: IFFALSE 3864
// Say ( JMM , D1-JMM-8 ) ;
3852: LD_EXP 1
3856: PPUSH
3857: LD_STRING D1-JMM-8
3859: PPUSH
3860: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3864: LD_EXP 1
3868: PPUSH
3869: LD_STRING D1-JMM-8a
3871: PPUSH
3872: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3876: LD_EXP 16
3880: PPUSH
3881: LD_STRING D1-Har-8
3883: PPUSH
3884: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3888: LD_EXP 1
3892: PPUSH
3893: LD_STRING D1-JMM-9
3895: PPUSH
3896: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3900: LD_EXP 16
3904: PPUSH
3905: LD_STRING D1-Har-9
3907: PPUSH
3908: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3912: LD_EXP 1
3916: PPUSH
3917: LD_STRING D1-JMM-10
3919: PPUSH
3920: CALL_OW 88
// if IsOK ( Denis ) then
3924: LD_EXP 3
3928: PPUSH
3929: CALL_OW 302
3933: IFFALSE 3947
// Say ( JMM , D1-JMM-10a ) ;
3935: LD_EXP 1
3939: PPUSH
3940: LD_STRING D1-JMM-10a
3942: PPUSH
3943: CALL_OW 88
// SelectDeltaCharacters ;
3947: CALL 4433 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 150 ) ;
3951: LD_EXP 20
3955: PUSH
3956: LD_INT 1
3958: ARRAY
3959: PPUSH
3960: CALL_OW 274
3964: PPUSH
3965: LD_INT 1
3967: PPUSH
3968: LD_INT 150
3970: PPUSH
3971: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) > 0 then
3975: LD_INT 22
3977: PUSH
3978: LD_INT 1
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: PUSH
3985: LD_INT 30
3987: PUSH
3988: LD_INT 29
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PUSH
3995: EMPTY
3996: LIST
3997: LIST
3998: PPUSH
3999: CALL_OW 69
4003: PUSH
4004: LD_INT 0
4006: GREATER
4007: IFFALSE 4033
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
4009: LD_EXP 20
4013: PUSH
4014: LD_INT 1
4016: ARRAY
4017: PPUSH
4018: CALL_OW 274
4022: PPUSH
4023: LD_INT 2
4025: PPUSH
4026: LD_INT 300
4028: PPUSH
4029: CALL_OW 277
// InGameOff ;
4033: CALL_OW 9
// Query ( Q1 ) ;
4037: LD_STRING Q1
4039: PPUSH
4040: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
4044: LD_INT 3
4046: PPUSH
4047: LD_INT 1
4049: PPUSH
4050: CALL_OW 424
// if IsInUnit ( JMM ) then
4054: LD_EXP 1
4058: PPUSH
4059: CALL_OW 310
4063: IFFALSE 4074
// ComExitBuilding ( JMM ) ;
4065: LD_EXP 1
4069: PPUSH
4070: CALL_OW 122
// end ;
4074: PPOPN 3
4076: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
4077: LD_INT 3
4079: PPUSH
4080: LD_INT 22
4082: PUSH
4083: LD_INT 1
4085: PUSH
4086: EMPTY
4087: LIST
4088: LIST
4089: PUSH
4090: LD_INT 21
4092: PUSH
4093: LD_INT 1
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: PPUSH
4104: CALL_OW 71
4108: PUSH
4109: LD_INT 0
4111: EQUAL
4112: IFFALSE 4430
4114: GO 4116
4116: DISABLE
4117: LD_INT 0
4119: PPUSH
4120: PPUSH
// begin SaveDeltaCharacters ;
4121: CALL 4787 0 0
// if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) then
4125: LD_INT 3
4127: PPUSH
4128: LD_INT 21
4130: PUSH
4131: LD_INT 2
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: PUSH
4138: LD_INT 3
4140: PUSH
4141: LD_INT 58
4143: PUSH
4144: EMPTY
4145: LIST
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: PPUSH
4155: CALL_OW 70
4159: IFFALSE 4416
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
4161: LD_ADDR_VAR 0 1
4165: PUSH
4166: LD_INT 3
4168: PPUSH
4169: LD_INT 21
4171: PUSH
4172: LD_INT 2
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PUSH
4179: LD_INT 3
4181: PUSH
4182: LD_INT 58
4184: PUSH
4185: EMPTY
4186: LIST
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: PPUSH
4196: CALL_OW 70
4200: PUSH
4201: FOR_IN
4202: IFFALSE 4414
// begin cargoType = GetCargoType ( i ) ;
4204: LD_ADDR_VAR 0 2
4208: PUSH
4209: LD_VAR 0 1
4213: PPUSH
4214: CALL_OW 288
4218: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4219: LD_VAR 0 1
4223: PPUSH
4224: CALL_OW 264
4228: PUSH
4229: LD_INT 12
4231: EQUAL
4232: IFFALSE 4329
// yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] else
4234: LD_ADDR_EXP 14
4238: PUSH
4239: LD_EXP 14
4243: PUSH
4244: LD_VAR 0 1
4248: PPUSH
4249: CALL_OW 248
4253: PUSH
4254: LD_VAR 0 1
4258: PPUSH
4259: CALL_OW 265
4263: PUSH
4264: LD_VAR 0 1
4268: PPUSH
4269: CALL_OW 262
4273: PUSH
4274: LD_VAR 0 1
4278: PPUSH
4279: CALL_OW 263
4283: PUSH
4284: LD_VAR 0 1
4288: PPUSH
4289: CALL_OW 264
4293: PUSH
4294: LD_VAR 0 2
4298: PUSH
4299: LD_VAR 0 1
4303: PPUSH
4304: LD_VAR 0 2
4308: PPUSH
4309: CALL_OW 289
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: PUSH
4323: EMPTY
4324: LIST
4325: ADD
4326: ST_TO_ADDR
4327: GO 4400
// yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4329: LD_ADDR_EXP 14
4333: PUSH
4334: LD_EXP 14
4338: PUSH
4339: LD_VAR 0 1
4343: PPUSH
4344: CALL_OW 248
4348: PUSH
4349: LD_VAR 0 1
4353: PPUSH
4354: CALL_OW 265
4358: PUSH
4359: LD_VAR 0 1
4363: PPUSH
4364: CALL_OW 262
4368: PUSH
4369: LD_VAR 0 1
4373: PPUSH
4374: CALL_OW 263
4378: PUSH
4379: LD_VAR 0 1
4383: PPUSH
4384: CALL_OW 264
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: PUSH
4396: EMPTY
4397: LIST
4398: ADD
4399: ST_TO_ADDR
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4400: LD_EXP 14
4404: PPUSH
4405: LD_STRING 06_VehiclesIn06_1
4407: PPUSH
4408: CALL_OW 39
// end ;
4412: GO 4201
4414: POP
4415: POP
// end ; SaveCargos ;
4416: CALL 5543 0 0
// ChangeMap ( 6 , %_cont ) ;
4420: LD_INT 6
4422: PPUSH
4423: LD_STRING %_cont
4425: PPUSH
4426: CALL_OW 340
// end ; end_of_file
4430: PPOPN 2
4432: END
// export function SelectDeltaCharacters ; var i , yourPeople ; begin
4433: LD_INT 0
4435: PPUSH
4436: PPUSH
4437: PPUSH
// selectedPeople := [ ] ;
4438: LD_ADDR_EXP 17
4442: PUSH
4443: EMPTY
4444: ST_TO_ADDR
// yourPeople = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4445: LD_ADDR_VAR 0 3
4449: PUSH
4450: LD_INT 22
4452: PUSH
4453: LD_INT 1
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PUSH
4460: LD_INT 21
4462: PUSH
4463: LD_INT 1
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PUSH
4470: LD_INT 2
4472: PUSH
4473: LD_INT 25
4475: PUSH
4476: LD_INT 1
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: LD_INT 25
4485: PUSH
4486: LD_INT 2
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: LD_INT 25
4495: PUSH
4496: LD_INT 3
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 25
4505: PUSH
4506: LD_INT 4
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: LIST
4524: PPUSH
4525: CALL_OW 69
4529: PUSH
4530: LD_EXP 1
4534: PUSH
4535: LD_EXP 15
4539: PUSH
4540: LD_EXP 3
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: LIST
4549: DIFF
4550: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4551: LD_ADDR_EXP 17
4555: PUSH
4556: LD_STRING text
4558: PPUSH
4559: LD_INT 5
4561: PPUSH
4562: LD_INT 5
4564: PPUSH
4565: LD_INT -5
4567: PUSH
4568: LD_EXP 1
4572: PUSH
4573: LD_INT -6
4575: PUSH
4576: LD_INT -2
4578: PUSH
4579: LD_INT -3
4581: PUSH
4582: LD_INT -5
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: PUSH
4593: LD_VAR 0 3
4597: ADD
4598: PUSH
4599: LD_INT -6
4601: PUSH
4602: LD_INT -4
4604: PUSH
4605: LD_EXP 3
4609: PUSH
4610: LD_EXP 15
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: ADD
4621: PPUSH
4622: LD_INT 1
4624: PUSH
4625: LD_INT 3
4627: PUSH
4628: LD_INT 2
4630: PUSH
4631: LD_INT 1
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: PUSH
4638: LD_INT 4
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: PPUSH
4647: CALL_OW 42
4651: ST_TO_ADDR
// ComStop ( selectedPeople ) ;
4652: LD_EXP 17
4656: PPUSH
4657: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4661: LD_INT 22
4663: PUSH
4664: LD_INT 1
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: LD_INT 21
4673: PUSH
4674: LD_INT 1
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: PPUSH
4685: CALL_OW 69
4689: PPUSH
4690: LD_INT 4
4692: PPUSH
4693: CALL_OW 235
// for i in selectedPeople do
4697: LD_ADDR_VAR 0 2
4701: PUSH
4702: LD_EXP 17
4706: PUSH
4707: FOR_IN
4708: IFFALSE 4724
// SetSide ( i , 1 ) ;
4710: LD_VAR 0 2
4714: PPUSH
4715: LD_INT 1
4717: PPUSH
4718: CALL_OW 235
4722: GO 4707
4724: POP
4725: POP
// for i in yourApemans do
4726: LD_ADDR_VAR 0 2
4730: PUSH
4731: LD_EXP 13
4735: PUSH
4736: FOR_IN
4737: IFFALSE 4753
// SetSide ( i , 1 ) ;
4739: LD_VAR 0 2
4743: PPUSH
4744: LD_INT 1
4746: PPUSH
4747: CALL_OW 235
4751: GO 4736
4753: POP
4754: POP
// SetSide ( JMM , 1 ) ;
4755: LD_EXP 1
4759: PPUSH
4760: LD_INT 1
4762: PPUSH
4763: CALL_OW 235
// SetSkill ( yourApemans , 2 , 5 ) ;
4767: LD_EXP 13
4771: PPUSH
4772: LD_INT 2
4774: PPUSH
4775: LD_INT 5
4777: PPUSH
4778: CALL_OW 237
// end ;
4782: LD_VAR 0 1
4786: RET
// export function SaveDeltaCharacters ; begin
4787: LD_INT 0
4789: PPUSH
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4790: LD_EXP 1
4794: PPUSH
4795: LD_EXP 22
4799: PUSH
4800: LD_STRING JMM
4802: STR
4803: PPUSH
4804: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4808: LD_EXP 15
4812: PPUSH
4813: LD_STRING DeltaDoctor
4815: PPUSH
4816: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4820: LD_EXP 3
4824: PPUSH
4825: LD_EXP 22
4829: PUSH
4830: LD_STRING Denis
4832: STR
4833: PPUSH
4834: CALL_OW 38
// if Lisa in selectedPeople then
4838: LD_EXP 4
4842: PUSH
4843: LD_EXP 17
4847: IN
4848: IFFALSE 4880
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4850: LD_EXP 4
4854: PPUSH
4855: LD_EXP 22
4859: PUSH
4860: LD_STRING Lisa
4862: STR
4863: PPUSH
4864: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4868: LD_INT 1
4870: PPUSH
4871: LD_STRING LisaIn06
4873: PPUSH
4874: CALL_OW 39
// end else
4878: GO 4901
// if IsOk ( Lisa ) then
4880: LD_EXP 4
4884: PPUSH
4885: CALL_OW 302
4889: IFFALSE 4901
// SaveVariable ( 1 , LisaStayInDelta ) ;
4891: LD_INT 1
4893: PPUSH
4894: LD_STRING LisaStayInDelta
4896: PPUSH
4897: CALL_OW 39
// if Bobby in selectedPeople then
4901: LD_EXP 6
4905: PUSH
4906: LD_EXP 17
4910: IN
4911: IFFALSE 4943
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4913: LD_EXP 6
4917: PPUSH
4918: LD_EXP 22
4922: PUSH
4923: LD_STRING Bobby
4925: STR
4926: PPUSH
4927: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4931: LD_INT 1
4933: PPUSH
4934: LD_STRING BobbyIn06
4936: PPUSH
4937: CALL_OW 39
// end else
4941: GO 4964
// if IsOk ( Bobby ) then
4943: LD_EXP 6
4947: PPUSH
4948: CALL_OW 302
4952: IFFALSE 4964
// SaveVariable ( 1 , BobbyStayInDelta ) ;
4954: LD_INT 1
4956: PPUSH
4957: LD_STRING BobbyStayInDelta
4959: PPUSH
4960: CALL_OW 39
// if Cyrus in selectedPeople then
4964: LD_EXP 7
4968: PUSH
4969: LD_EXP 17
4973: IN
4974: IFFALSE 5006
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4976: LD_EXP 7
4980: PPUSH
4981: LD_EXP 22
4985: PUSH
4986: LD_STRING Cyrus
4988: STR
4989: PPUSH
4990: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
4994: LD_INT 1
4996: PPUSH
4997: LD_STRING CyrusIn06
4999: PPUSH
5000: CALL_OW 39
// end else
5004: GO 5027
// if IsOk ( Cyrus ) then
5006: LD_EXP 7
5010: PPUSH
5011: CALL_OW 302
5015: IFFALSE 5027
// SaveVariable ( 1 , CyrusStayInDelta ) ;
5017: LD_INT 1
5019: PPUSH
5020: LD_STRING CyrusStayInDelta
5022: PPUSH
5023: CALL_OW 39
// if Frank in selectedPeople then
5027: LD_EXP 5
5031: PUSH
5032: LD_EXP 17
5036: IN
5037: IFFALSE 5069
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5039: LD_EXP 5
5043: PPUSH
5044: LD_EXP 22
5048: PUSH
5049: LD_STRING Frank
5051: STR
5052: PPUSH
5053: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
5057: LD_INT 1
5059: PPUSH
5060: LD_STRING FrankIn06
5062: PPUSH
5063: CALL_OW 39
// end else
5067: GO 5090
// if IsOk ( Frank ) then
5069: LD_EXP 5
5073: PPUSH
5074: CALL_OW 302
5078: IFFALSE 5090
// SaveVariable ( 1 , FrankStayInDelta ) ;
5080: LD_INT 1
5082: PPUSH
5083: LD_STRING FrankStayInDelta
5085: PPUSH
5086: CALL_OW 39
// if Brown in selectedPeople then
5090: LD_EXP 8
5094: PUSH
5095: LD_EXP 17
5099: IN
5100: IFFALSE 5132
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5102: LD_EXP 8
5106: PPUSH
5107: LD_EXP 22
5111: PUSH
5112: LD_STRING Brown
5114: STR
5115: PPUSH
5116: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
5120: LD_INT 1
5122: PPUSH
5123: LD_STRING BrownIn06
5125: PPUSH
5126: CALL_OW 39
// end else
5130: GO 5153
// if IsOk ( Brown ) then
5132: LD_EXP 8
5136: PPUSH
5137: CALL_OW 302
5141: IFFALSE 5153
// SaveVariable ( 1 , BrownStayInDelta ) ;
5143: LD_INT 1
5145: PPUSH
5146: LD_STRING BrownStayInDelta
5148: PPUSH
5149: CALL_OW 39
// if Donaldson in selectedPeople then
5153: LD_EXP 9
5157: PUSH
5158: LD_EXP 17
5162: IN
5163: IFFALSE 5195
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5165: LD_EXP 9
5169: PPUSH
5170: LD_EXP 22
5174: PUSH
5175: LD_STRING Donaldson
5177: STR
5178: PPUSH
5179: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5183: LD_INT 1
5185: PPUSH
5186: LD_STRING DonaldsonIn06
5188: PPUSH
5189: CALL_OW 39
// end else
5193: GO 5216
// if IsOk ( Donaldson ) then
5195: LD_EXP 9
5199: PPUSH
5200: CALL_OW 302
5204: IFFALSE 5216
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5206: LD_INT 1
5208: PPUSH
5209: LD_STRING DonaldsonStayInDelta
5211: PPUSH
5212: CALL_OW 39
// if Gladstone in selectedPeople then
5216: LD_EXP 2
5220: PUSH
5221: LD_EXP 17
5225: IN
5226: IFFALSE 5258
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5228: LD_EXP 2
5232: PPUSH
5233: LD_EXP 22
5237: PUSH
5238: LD_STRING Gladstone
5240: STR
5241: PPUSH
5242: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
5246: LD_INT 1
5248: PPUSH
5249: LD_STRING GladstoneIn06
5251: PPUSH
5252: CALL_OW 39
// end else
5256: GO 5279
// if IsOk ( Gladstone ) then
5258: LD_EXP 2
5262: PPUSH
5263: CALL_OW 302
5267: IFFALSE 5279
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5269: LD_INT 1
5271: PPUSH
5272: LD_STRING GladstoneStayInDelta
5274: PPUSH
5275: CALL_OW 39
// selectedPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ;
5279: LD_ADDR_EXP 17
5283: PUSH
5284: LD_INT 22
5286: PUSH
5287: LD_INT 1
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: PUSH
5294: LD_INT 23
5296: PUSH
5297: LD_INT 1
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: PUSH
5304: LD_INT 21
5306: PUSH
5307: LD_INT 1
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: PUSH
5314: EMPTY
5315: LIST
5316: LIST
5317: LIST
5318: PPUSH
5319: CALL_OW 69
5323: ST_TO_ADDR
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5324: LD_EXP 13
5328: PPUSH
5329: LD_STRING ApeIn06
5331: PPUSH
5332: CALL_OW 38
// SaveCharacters ( selectedPeople diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersIn06 ) ;
5336: LD_EXP 17
5340: PUSH
5341: LD_EXP 1
5345: PUSH
5346: LD_EXP 4
5350: PUSH
5351: LD_EXP 6
5355: PUSH
5356: LD_EXP 7
5360: PUSH
5361: LD_EXP 5
5365: PUSH
5366: LD_EXP 8
5370: PUSH
5371: LD_EXP 9
5375: PUSH
5376: LD_EXP 2
5380: PUSH
5381: LD_EXP 3
5385: PUSH
5386: EMPTY
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: DIFF
5397: PPUSH
5398: LD_STRING OthersIn06
5400: PPUSH
5401: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersStayInDelta ) ;
5405: LD_INT 22
5407: PUSH
5408: LD_INT 4
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: PUSH
5415: LD_INT 2
5417: PUSH
5418: LD_INT 25
5420: PUSH
5421: LD_INT 1
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: PUSH
5428: LD_INT 25
5430: PUSH
5431: LD_INT 2
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: PUSH
5438: LD_INT 25
5440: PUSH
5441: LD_INT 3
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: PUSH
5448: LD_INT 25
5450: PUSH
5451: LD_INT 4
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PPUSH
5469: CALL_OW 69
5473: PUSH
5474: LD_EXP 15
5478: PUSH
5479: LD_EXP 4
5483: PUSH
5484: LD_EXP 6
5488: PUSH
5489: LD_EXP 7
5493: PUSH
5494: LD_EXP 5
5498: PUSH
5499: LD_EXP 8
5503: PUSH
5504: LD_EXP 9
5508: PUSH
5509: LD_EXP 2
5513: PUSH
5514: LD_EXP 3
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: DIFF
5530: PPUSH
5531: LD_STRING OthersStayInDelta
5533: PPUSH
5534: CALL_OW 38
// end ;
5538: LD_VAR 0 1
5542: RET
// export function SaveCargos ; var i ; begin
5543: LD_INT 0
5545: PPUSH
5546: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
5547: LD_ADDR_VAR 0 2
5551: PUSH
5552: LD_INT 3
5554: PPUSH
5555: LD_INT 22
5557: PUSH
5558: LD_INT 1
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PUSH
5565: LD_INT 34
5567: PUSH
5568: LD_INT 12
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: PPUSH
5579: CALL_OW 70
5583: PUSH
5584: FOR_IN
5585: IFFALSE 5613
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
5587: LD_ADDR_EXP 21
5591: PUSH
5592: LD_EXP 21
5596: PUSH
5597: LD_VAR 0 2
5601: PPUSH
5602: CALL 5632 0 1
5606: PUSH
5607: EMPTY
5608: LIST
5609: ADD
5610: ST_TO_ADDR
5611: GO 5584
5613: POP
5614: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
5615: LD_EXP 21
5619: PPUSH
5620: LD_STRING 06_ResourcesInCargo06_1
5622: PPUSH
5623: CALL_OW 39
// end ;
5627: LD_VAR 0 1
5631: RET
// export function GetMultiCargo ( cargo_bay ) ; begin
5632: LD_INT 0
5634: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
5635: LD_ADDR_VAR 0 2
5639: PUSH
5640: LD_VAR 0 1
5644: PPUSH
5645: LD_INT 1
5647: PPUSH
5648: CALL_OW 289
5652: PUSH
5653: LD_VAR 0 1
5657: PPUSH
5658: LD_INT 2
5660: PPUSH
5661: CALL_OW 289
5665: PUSH
5666: LD_VAR 0 1
5670: PPUSH
5671: LD_INT 3
5673: PPUSH
5674: CALL_OW 289
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: LIST
5683: ST_TO_ADDR
// end ; end_of_file
5684: LD_VAR 0 2
5688: RET
// on Command ( comandid ) do var i ;
5689: LD_INT 0
5691: PPUSH
// begin if comandid = 65 then
5692: LD_VAR 0 1
5696: PUSH
5697: LD_INT 65
5699: EQUAL
5700: IFFALSE 5741
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5702: LD_ADDR_VAR 0 2
5706: PUSH
5707: LD_INT 22
5709: PUSH
5710: LD_INT 1
5712: PUSH
5713: EMPTY
5714: LIST
5715: LIST
5716: PUSH
5717: EMPTY
5718: LIST
5719: PPUSH
5720: CALL_OW 69
5724: PUSH
5725: FOR_IN
5726: IFFALSE 5739
// ComStop ( i ) ;
5728: LD_VAR 0 2
5732: PPUSH
5733: CALL_OW 141
5737: GO 5725
5739: POP
5740: POP
// end ;
5741: PPOPN 2
5743: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5744: LD_INT 0
5746: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5747: LD_ADDR_VAR 0 3
5751: PUSH
5752: LD_INT 22
5754: PUSH
5755: LD_INT 1
5757: PUSH
5758: EMPTY
5759: LIST
5760: LIST
5761: PUSH
5762: LD_INT 21
5764: PUSH
5765: LD_INT 3
5767: PUSH
5768: EMPTY
5769: LIST
5770: LIST
5771: PUSH
5772: LD_INT 30
5774: PUSH
5775: LD_INT 0
5777: PUSH
5778: EMPTY
5779: LIST
5780: LIST
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: LIST
5786: PPUSH
5787: CALL_OW 69
5791: ST_TO_ADDR
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5792: LD_VAR 0 1
5796: PPUSH
5797: LD_VAR 0 3
5801: PUSH
5802: LD_INT 1
5804: ARRAY
5805: PPUSH
5806: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5810: LD_VAR 0 1
5814: PPUSH
5815: LD_INT 4
5817: PPUSH
5818: CALL_OW 235
// end ; end_of_file
5822: PPOPN 3
5824: END
// every 0 0$1 do
5825: GO 5827
5827: DISABLE
// begin enable ;
5828: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5829: LD_STRING updateTimer(
5831: PUSH
5832: LD_OWVAR 1
5836: STR
5837: PUSH
5838: LD_STRING );
5840: STR
5841: PPUSH
5842: CALL_OW 559
// end ;
5846: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5847: LD_INT 0
5849: PPUSH
// if p2 = 100 then
5850: LD_VAR 0 2
5854: PUSH
5855: LD_INT 100
5857: EQUAL
5858: IFFALSE 6861
// begin if not StreamModeActive then
5860: LD_EXP 24
5864: NOT
5865: IFFALSE 5875
// StreamModeActive := true ;
5867: LD_ADDR_EXP 24
5871: PUSH
5872: LD_INT 1
5874: ST_TO_ADDR
// if p3 = 0 then
5875: LD_VAR 0 3
5879: PUSH
5880: LD_INT 0
5882: EQUAL
5883: IFFALSE 5889
// InitStreamMode ;
5885: CALL 7021 0 0
// if p3 = 1 then
5889: LD_VAR 0 3
5893: PUSH
5894: LD_INT 1
5896: EQUAL
5897: IFFALSE 5907
// sRocket := true ;
5899: LD_ADDR_EXP 29
5903: PUSH
5904: LD_INT 1
5906: ST_TO_ADDR
// if p3 = 2 then
5907: LD_VAR 0 3
5911: PUSH
5912: LD_INT 2
5914: EQUAL
5915: IFFALSE 5925
// sSpeed := true ;
5917: LD_ADDR_EXP 28
5921: PUSH
5922: LD_INT 1
5924: ST_TO_ADDR
// if p3 = 3 then
5925: LD_VAR 0 3
5929: PUSH
5930: LD_INT 3
5932: EQUAL
5933: IFFALSE 5943
// sEngine := true ;
5935: LD_ADDR_EXP 30
5939: PUSH
5940: LD_INT 1
5942: ST_TO_ADDR
// if p3 = 4 then
5943: LD_VAR 0 3
5947: PUSH
5948: LD_INT 4
5950: EQUAL
5951: IFFALSE 5961
// sSpec := true ;
5953: LD_ADDR_EXP 27
5957: PUSH
5958: LD_INT 1
5960: ST_TO_ADDR
// if p3 = 5 then
5961: LD_VAR 0 3
5965: PUSH
5966: LD_INT 5
5968: EQUAL
5969: IFFALSE 5979
// sLevel := true ;
5971: LD_ADDR_EXP 31
5975: PUSH
5976: LD_INT 1
5978: ST_TO_ADDR
// if p3 = 6 then
5979: LD_VAR 0 3
5983: PUSH
5984: LD_INT 6
5986: EQUAL
5987: IFFALSE 5997
// sArmoury := true ;
5989: LD_ADDR_EXP 32
5993: PUSH
5994: LD_INT 1
5996: ST_TO_ADDR
// if p3 = 7 then
5997: LD_VAR 0 3
6001: PUSH
6002: LD_INT 7
6004: EQUAL
6005: IFFALSE 6015
// sRadar := true ;
6007: LD_ADDR_EXP 33
6011: PUSH
6012: LD_INT 1
6014: ST_TO_ADDR
// if p3 = 8 then
6015: LD_VAR 0 3
6019: PUSH
6020: LD_INT 8
6022: EQUAL
6023: IFFALSE 6033
// sBunker := true ;
6025: LD_ADDR_EXP 34
6029: PUSH
6030: LD_INT 1
6032: ST_TO_ADDR
// if p3 = 9 then
6033: LD_VAR 0 3
6037: PUSH
6038: LD_INT 9
6040: EQUAL
6041: IFFALSE 6051
// sHack := true ;
6043: LD_ADDR_EXP 35
6047: PUSH
6048: LD_INT 1
6050: ST_TO_ADDR
// if p3 = 10 then
6051: LD_VAR 0 3
6055: PUSH
6056: LD_INT 10
6058: EQUAL
6059: IFFALSE 6069
// sFire := true ;
6061: LD_ADDR_EXP 36
6065: PUSH
6066: LD_INT 1
6068: ST_TO_ADDR
// if p3 = 11 then
6069: LD_VAR 0 3
6073: PUSH
6074: LD_INT 11
6076: EQUAL
6077: IFFALSE 6087
// sRefresh := true ;
6079: LD_ADDR_EXP 37
6083: PUSH
6084: LD_INT 1
6086: ST_TO_ADDR
// if p3 = 12 then
6087: LD_VAR 0 3
6091: PUSH
6092: LD_INT 12
6094: EQUAL
6095: IFFALSE 6105
// sExp := true ;
6097: LD_ADDR_EXP 38
6101: PUSH
6102: LD_INT 1
6104: ST_TO_ADDR
// if p3 = 13 then
6105: LD_VAR 0 3
6109: PUSH
6110: LD_INT 13
6112: EQUAL
6113: IFFALSE 6123
// sDepot := true ;
6115: LD_ADDR_EXP 39
6119: PUSH
6120: LD_INT 1
6122: ST_TO_ADDR
// if p3 = 14 then
6123: LD_VAR 0 3
6127: PUSH
6128: LD_INT 14
6130: EQUAL
6131: IFFALSE 6141
// sFlag := true ;
6133: LD_ADDR_EXP 40
6137: PUSH
6138: LD_INT 1
6140: ST_TO_ADDR
// if p3 = 15 then
6141: LD_VAR 0 3
6145: PUSH
6146: LD_INT 15
6148: EQUAL
6149: IFFALSE 6159
// sKamikadze := true ;
6151: LD_ADDR_EXP 48
6155: PUSH
6156: LD_INT 1
6158: ST_TO_ADDR
// if p3 = 16 then
6159: LD_VAR 0 3
6163: PUSH
6164: LD_INT 16
6166: EQUAL
6167: IFFALSE 6177
// sTroll := true ;
6169: LD_ADDR_EXP 49
6173: PUSH
6174: LD_INT 1
6176: ST_TO_ADDR
// if p3 = 17 then
6177: LD_VAR 0 3
6181: PUSH
6182: LD_INT 17
6184: EQUAL
6185: IFFALSE 6195
// sSlow := true ;
6187: LD_ADDR_EXP 50
6191: PUSH
6192: LD_INT 1
6194: ST_TO_ADDR
// if p3 = 18 then
6195: LD_VAR 0 3
6199: PUSH
6200: LD_INT 18
6202: EQUAL
6203: IFFALSE 6213
// sLack := true ;
6205: LD_ADDR_EXP 51
6209: PUSH
6210: LD_INT 1
6212: ST_TO_ADDR
// if p3 = 19 then
6213: LD_VAR 0 3
6217: PUSH
6218: LD_INT 19
6220: EQUAL
6221: IFFALSE 6231
// sTank := true ;
6223: LD_ADDR_EXP 53
6227: PUSH
6228: LD_INT 1
6230: ST_TO_ADDR
// if p3 = 20 then
6231: LD_VAR 0 3
6235: PUSH
6236: LD_INT 20
6238: EQUAL
6239: IFFALSE 6249
// sRemote := true ;
6241: LD_ADDR_EXP 54
6245: PUSH
6246: LD_INT 1
6248: ST_TO_ADDR
// if p3 = 21 then
6249: LD_VAR 0 3
6253: PUSH
6254: LD_INT 21
6256: EQUAL
6257: IFFALSE 6267
// sPowell := true ;
6259: LD_ADDR_EXP 55
6263: PUSH
6264: LD_INT 1
6266: ST_TO_ADDR
// if p3 = 22 then
6267: LD_VAR 0 3
6271: PUSH
6272: LD_INT 22
6274: EQUAL
6275: IFFALSE 6285
// sTeleport := true ;
6277: LD_ADDR_EXP 58
6281: PUSH
6282: LD_INT 1
6284: ST_TO_ADDR
// if p3 = 23 then
6285: LD_VAR 0 3
6289: PUSH
6290: LD_INT 23
6292: EQUAL
6293: IFFALSE 6303
// sOilTower := true ;
6295: LD_ADDR_EXP 60
6299: PUSH
6300: LD_INT 1
6302: ST_TO_ADDR
// if p3 = 24 then
6303: LD_VAR 0 3
6307: PUSH
6308: LD_INT 24
6310: EQUAL
6311: IFFALSE 6321
// sShovel := true ;
6313: LD_ADDR_EXP 61
6317: PUSH
6318: LD_INT 1
6320: ST_TO_ADDR
// if p3 = 25 then
6321: LD_VAR 0 3
6325: PUSH
6326: LD_INT 25
6328: EQUAL
6329: IFFALSE 6339
// sSheik := true ;
6331: LD_ADDR_EXP 62
6335: PUSH
6336: LD_INT 1
6338: ST_TO_ADDR
// if p3 = 26 then
6339: LD_VAR 0 3
6343: PUSH
6344: LD_INT 26
6346: EQUAL
6347: IFFALSE 6357
// sEarthquake := true ;
6349: LD_ADDR_EXP 64
6353: PUSH
6354: LD_INT 1
6356: ST_TO_ADDR
// if p3 = 27 then
6357: LD_VAR 0 3
6361: PUSH
6362: LD_INT 27
6364: EQUAL
6365: IFFALSE 6375
// sAI := true ;
6367: LD_ADDR_EXP 65
6371: PUSH
6372: LD_INT 1
6374: ST_TO_ADDR
// if p3 = 28 then
6375: LD_VAR 0 3
6379: PUSH
6380: LD_INT 28
6382: EQUAL
6383: IFFALSE 6393
// sCargo := true ;
6385: LD_ADDR_EXP 68
6389: PUSH
6390: LD_INT 1
6392: ST_TO_ADDR
// if p3 = 29 then
6393: LD_VAR 0 3
6397: PUSH
6398: LD_INT 29
6400: EQUAL
6401: IFFALSE 6411
// sDLaser := true ;
6403: LD_ADDR_EXP 69
6407: PUSH
6408: LD_INT 1
6410: ST_TO_ADDR
// if p3 = 30 then
6411: LD_VAR 0 3
6415: PUSH
6416: LD_INT 30
6418: EQUAL
6419: IFFALSE 6429
// sExchange := true ;
6421: LD_ADDR_EXP 70
6425: PUSH
6426: LD_INT 1
6428: ST_TO_ADDR
// if p3 = 31 then
6429: LD_VAR 0 3
6433: PUSH
6434: LD_INT 31
6436: EQUAL
6437: IFFALSE 6447
// sFac := true ;
6439: LD_ADDR_EXP 71
6443: PUSH
6444: LD_INT 1
6446: ST_TO_ADDR
// if p3 = 32 then
6447: LD_VAR 0 3
6451: PUSH
6452: LD_INT 32
6454: EQUAL
6455: IFFALSE 6465
// sPower := true ;
6457: LD_ADDR_EXP 72
6461: PUSH
6462: LD_INT 1
6464: ST_TO_ADDR
// if p3 = 33 then
6465: LD_VAR 0 3
6469: PUSH
6470: LD_INT 33
6472: EQUAL
6473: IFFALSE 6483
// sRandom := true ;
6475: LD_ADDR_EXP 73
6479: PUSH
6480: LD_INT 1
6482: ST_TO_ADDR
// if p3 = 34 then
6483: LD_VAR 0 3
6487: PUSH
6488: LD_INT 34
6490: EQUAL
6491: IFFALSE 6501
// sShield := true ;
6493: LD_ADDR_EXP 74
6497: PUSH
6498: LD_INT 1
6500: ST_TO_ADDR
// if p3 = 35 then
6501: LD_VAR 0 3
6505: PUSH
6506: LD_INT 35
6508: EQUAL
6509: IFFALSE 6519
// sTime := true ;
6511: LD_ADDR_EXP 75
6515: PUSH
6516: LD_INT 1
6518: ST_TO_ADDR
// if p3 = 36 then
6519: LD_VAR 0 3
6523: PUSH
6524: LD_INT 36
6526: EQUAL
6527: IFFALSE 6537
// sTools := true ;
6529: LD_ADDR_EXP 76
6533: PUSH
6534: LD_INT 1
6536: ST_TO_ADDR
// if p3 = 101 then
6537: LD_VAR 0 3
6541: PUSH
6542: LD_INT 101
6544: EQUAL
6545: IFFALSE 6555
// sSold := true ;
6547: LD_ADDR_EXP 41
6551: PUSH
6552: LD_INT 1
6554: ST_TO_ADDR
// if p3 = 102 then
6555: LD_VAR 0 3
6559: PUSH
6560: LD_INT 102
6562: EQUAL
6563: IFFALSE 6573
// sDiff := true ;
6565: LD_ADDR_EXP 42
6569: PUSH
6570: LD_INT 1
6572: ST_TO_ADDR
// if p3 = 103 then
6573: LD_VAR 0 3
6577: PUSH
6578: LD_INT 103
6580: EQUAL
6581: IFFALSE 6591
// sFog := true ;
6583: LD_ADDR_EXP 45
6587: PUSH
6588: LD_INT 1
6590: ST_TO_ADDR
// if p3 = 104 then
6591: LD_VAR 0 3
6595: PUSH
6596: LD_INT 104
6598: EQUAL
6599: IFFALSE 6609
// sReset := true ;
6601: LD_ADDR_EXP 46
6605: PUSH
6606: LD_INT 1
6608: ST_TO_ADDR
// if p3 = 105 then
6609: LD_VAR 0 3
6613: PUSH
6614: LD_INT 105
6616: EQUAL
6617: IFFALSE 6627
// sSun := true ;
6619: LD_ADDR_EXP 47
6623: PUSH
6624: LD_INT 1
6626: ST_TO_ADDR
// if p3 = 106 then
6627: LD_VAR 0 3
6631: PUSH
6632: LD_INT 106
6634: EQUAL
6635: IFFALSE 6645
// sTiger := true ;
6637: LD_ADDR_EXP 43
6641: PUSH
6642: LD_INT 1
6644: ST_TO_ADDR
// if p3 = 107 then
6645: LD_VAR 0 3
6649: PUSH
6650: LD_INT 107
6652: EQUAL
6653: IFFALSE 6663
// sBomb := true ;
6655: LD_ADDR_EXP 44
6659: PUSH
6660: LD_INT 1
6662: ST_TO_ADDR
// if p3 = 108 then
6663: LD_VAR 0 3
6667: PUSH
6668: LD_INT 108
6670: EQUAL
6671: IFFALSE 6681
// sWound := true ;
6673: LD_ADDR_EXP 52
6677: PUSH
6678: LD_INT 1
6680: ST_TO_ADDR
// if p3 = 109 then
6681: LD_VAR 0 3
6685: PUSH
6686: LD_INT 109
6688: EQUAL
6689: IFFALSE 6699
// sBetray := true ;
6691: LD_ADDR_EXP 56
6695: PUSH
6696: LD_INT 1
6698: ST_TO_ADDR
// if p3 = 110 then
6699: LD_VAR 0 3
6703: PUSH
6704: LD_INT 110
6706: EQUAL
6707: IFFALSE 6717
// sContamin := true ;
6709: LD_ADDR_EXP 57
6713: PUSH
6714: LD_INT 1
6716: ST_TO_ADDR
// if p3 = 111 then
6717: LD_VAR 0 3
6721: PUSH
6722: LD_INT 111
6724: EQUAL
6725: IFFALSE 6735
// sOil := true ;
6727: LD_ADDR_EXP 59
6731: PUSH
6732: LD_INT 1
6734: ST_TO_ADDR
// if p3 = 112 then
6735: LD_VAR 0 3
6739: PUSH
6740: LD_INT 112
6742: EQUAL
6743: IFFALSE 6753
// sStu := true ;
6745: LD_ADDR_EXP 63
6749: PUSH
6750: LD_INT 1
6752: ST_TO_ADDR
// if p3 = 113 then
6753: LD_VAR 0 3
6757: PUSH
6758: LD_INT 113
6760: EQUAL
6761: IFFALSE 6771
// sBazooka := true ;
6763: LD_ADDR_EXP 66
6767: PUSH
6768: LD_INT 1
6770: ST_TO_ADDR
// if p3 = 114 then
6771: LD_VAR 0 3
6775: PUSH
6776: LD_INT 114
6778: EQUAL
6779: IFFALSE 6789
// sMortar := true ;
6781: LD_ADDR_EXP 67
6785: PUSH
6786: LD_INT 1
6788: ST_TO_ADDR
// if p3 = 115 then
6789: LD_VAR 0 3
6793: PUSH
6794: LD_INT 115
6796: EQUAL
6797: IFFALSE 6807
// sRanger := true ;
6799: LD_ADDR_EXP 77
6803: PUSH
6804: LD_INT 1
6806: ST_TO_ADDR
// if p3 = 116 then
6807: LD_VAR 0 3
6811: PUSH
6812: LD_INT 116
6814: EQUAL
6815: IFFALSE 6825
// sComputer := true ;
6817: LD_ADDR_EXP 78
6821: PUSH
6822: LD_INT 1
6824: ST_TO_ADDR
// if p3 = 117 then
6825: LD_VAR 0 3
6829: PUSH
6830: LD_INT 117
6832: EQUAL
6833: IFFALSE 6843
// s30 := true ;
6835: LD_ADDR_EXP 79
6839: PUSH
6840: LD_INT 1
6842: ST_TO_ADDR
// if p3 = 118 then
6843: LD_VAR 0 3
6847: PUSH
6848: LD_INT 118
6850: EQUAL
6851: IFFALSE 6861
// s60 := true ;
6853: LD_ADDR_EXP 80
6857: PUSH
6858: LD_INT 1
6860: ST_TO_ADDR
// end ; if p2 = 101 then
6861: LD_VAR 0 2
6865: PUSH
6866: LD_INT 101
6868: EQUAL
6869: IFFALSE 6997
// begin case p3 of 1 :
6871: LD_VAR 0 3
6875: PUSH
6876: LD_INT 1
6878: DOUBLE
6879: EQUAL
6880: IFTRUE 6884
6882: GO 6891
6884: POP
// hHackUnlimitedResources ; 2 :
6885: CALL 18593 0 0
6889: GO 6997
6891: LD_INT 2
6893: DOUBLE
6894: EQUAL
6895: IFTRUE 6899
6897: GO 6906
6899: POP
// hHackSetLevel10 ; 3 :
6900: CALL 18726 0 0
6904: GO 6997
6906: LD_INT 3
6908: DOUBLE
6909: EQUAL
6910: IFTRUE 6914
6912: GO 6921
6914: POP
// hHackSetLevel10YourUnits ; 4 :
6915: CALL 18811 0 0
6919: GO 6997
6921: LD_INT 4
6923: DOUBLE
6924: EQUAL
6925: IFTRUE 6929
6927: GO 6936
6929: POP
// hHackInvincible ; 5 :
6930: CALL 19259 0 0
6934: GO 6997
6936: LD_INT 5
6938: DOUBLE
6939: EQUAL
6940: IFTRUE 6944
6942: GO 6951
6944: POP
// hHackInvisible ; 6 :
6945: CALL 19370 0 0
6949: GO 6997
6951: LD_INT 6
6953: DOUBLE
6954: EQUAL
6955: IFTRUE 6959
6957: GO 6966
6959: POP
// hHackChangeYourSide ; 7 :
6960: CALL 19427 0 0
6964: GO 6997
6966: LD_INT 7
6968: DOUBLE
6969: EQUAL
6970: IFTRUE 6974
6972: GO 6981
6974: POP
// hHackChangeUnitSide ; 8 :
6975: CALL 19469 0 0
6979: GO 6997
6981: LD_INT 8
6983: DOUBLE
6984: EQUAL
6985: IFTRUE 6989
6987: GO 6996
6989: POP
// hHackFog ; end ;
6990: CALL 19570 0 0
6994: GO 6997
6996: POP
// end ; end ;
6997: LD_VAR 0 7
7001: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
7002: GO 7004
7004: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7005: LD_STRING initStreamRollete();
7007: PPUSH
7008: CALL_OW 559
// InitStreamMode ;
7012: CALL 7021 0 0
// DefineStreamItems ( ) ;
7016: CALL 7485 0 0
// end ;
7020: END
// function InitStreamMode ; begin
7021: LD_INT 0
7023: PPUSH
// streamModeActive := false ;
7024: LD_ADDR_EXP 24
7028: PUSH
7029: LD_INT 0
7031: ST_TO_ADDR
// normalCounter := 36 ;
7032: LD_ADDR_EXP 25
7036: PUSH
7037: LD_INT 36
7039: ST_TO_ADDR
// hardcoreCounter := 16 ;
7040: LD_ADDR_EXP 26
7044: PUSH
7045: LD_INT 16
7047: ST_TO_ADDR
// sRocket := false ;
7048: LD_ADDR_EXP 29
7052: PUSH
7053: LD_INT 0
7055: ST_TO_ADDR
// sSpeed := false ;
7056: LD_ADDR_EXP 28
7060: PUSH
7061: LD_INT 0
7063: ST_TO_ADDR
// sEngine := false ;
7064: LD_ADDR_EXP 30
7068: PUSH
7069: LD_INT 0
7071: ST_TO_ADDR
// sSpec := false ;
7072: LD_ADDR_EXP 27
7076: PUSH
7077: LD_INT 0
7079: ST_TO_ADDR
// sLevel := false ;
7080: LD_ADDR_EXP 31
7084: PUSH
7085: LD_INT 0
7087: ST_TO_ADDR
// sArmoury := false ;
7088: LD_ADDR_EXP 32
7092: PUSH
7093: LD_INT 0
7095: ST_TO_ADDR
// sRadar := false ;
7096: LD_ADDR_EXP 33
7100: PUSH
7101: LD_INT 0
7103: ST_TO_ADDR
// sBunker := false ;
7104: LD_ADDR_EXP 34
7108: PUSH
7109: LD_INT 0
7111: ST_TO_ADDR
// sHack := false ;
7112: LD_ADDR_EXP 35
7116: PUSH
7117: LD_INT 0
7119: ST_TO_ADDR
// sFire := false ;
7120: LD_ADDR_EXP 36
7124: PUSH
7125: LD_INT 0
7127: ST_TO_ADDR
// sRefresh := false ;
7128: LD_ADDR_EXP 37
7132: PUSH
7133: LD_INT 0
7135: ST_TO_ADDR
// sExp := false ;
7136: LD_ADDR_EXP 38
7140: PUSH
7141: LD_INT 0
7143: ST_TO_ADDR
// sDepot := false ;
7144: LD_ADDR_EXP 39
7148: PUSH
7149: LD_INT 0
7151: ST_TO_ADDR
// sFlag := false ;
7152: LD_ADDR_EXP 40
7156: PUSH
7157: LD_INT 0
7159: ST_TO_ADDR
// sKamikadze := false ;
7160: LD_ADDR_EXP 48
7164: PUSH
7165: LD_INT 0
7167: ST_TO_ADDR
// sTroll := false ;
7168: LD_ADDR_EXP 49
7172: PUSH
7173: LD_INT 0
7175: ST_TO_ADDR
// sSlow := false ;
7176: LD_ADDR_EXP 50
7180: PUSH
7181: LD_INT 0
7183: ST_TO_ADDR
// sLack := false ;
7184: LD_ADDR_EXP 51
7188: PUSH
7189: LD_INT 0
7191: ST_TO_ADDR
// sTank := false ;
7192: LD_ADDR_EXP 53
7196: PUSH
7197: LD_INT 0
7199: ST_TO_ADDR
// sRemote := false ;
7200: LD_ADDR_EXP 54
7204: PUSH
7205: LD_INT 0
7207: ST_TO_ADDR
// sPowell := false ;
7208: LD_ADDR_EXP 55
7212: PUSH
7213: LD_INT 0
7215: ST_TO_ADDR
// sTeleport := false ;
7216: LD_ADDR_EXP 58
7220: PUSH
7221: LD_INT 0
7223: ST_TO_ADDR
// sOilTower := false ;
7224: LD_ADDR_EXP 60
7228: PUSH
7229: LD_INT 0
7231: ST_TO_ADDR
// sShovel := false ;
7232: LD_ADDR_EXP 61
7236: PUSH
7237: LD_INT 0
7239: ST_TO_ADDR
// sSheik := false ;
7240: LD_ADDR_EXP 62
7244: PUSH
7245: LD_INT 0
7247: ST_TO_ADDR
// sEarthquake := false ;
7248: LD_ADDR_EXP 64
7252: PUSH
7253: LD_INT 0
7255: ST_TO_ADDR
// sAI := false ;
7256: LD_ADDR_EXP 65
7260: PUSH
7261: LD_INT 0
7263: ST_TO_ADDR
// sCargo := false ;
7264: LD_ADDR_EXP 68
7268: PUSH
7269: LD_INT 0
7271: ST_TO_ADDR
// sDLaser := false ;
7272: LD_ADDR_EXP 69
7276: PUSH
7277: LD_INT 0
7279: ST_TO_ADDR
// sExchange := false ;
7280: LD_ADDR_EXP 70
7284: PUSH
7285: LD_INT 0
7287: ST_TO_ADDR
// sFac := false ;
7288: LD_ADDR_EXP 71
7292: PUSH
7293: LD_INT 0
7295: ST_TO_ADDR
// sPower := false ;
7296: LD_ADDR_EXP 72
7300: PUSH
7301: LD_INT 0
7303: ST_TO_ADDR
// sRandom := false ;
7304: LD_ADDR_EXP 73
7308: PUSH
7309: LD_INT 0
7311: ST_TO_ADDR
// sShield := false ;
7312: LD_ADDR_EXP 74
7316: PUSH
7317: LD_INT 0
7319: ST_TO_ADDR
// sTime := false ;
7320: LD_ADDR_EXP 75
7324: PUSH
7325: LD_INT 0
7327: ST_TO_ADDR
// sTools := false ;
7328: LD_ADDR_EXP 76
7332: PUSH
7333: LD_INT 0
7335: ST_TO_ADDR
// sSold := false ;
7336: LD_ADDR_EXP 41
7340: PUSH
7341: LD_INT 0
7343: ST_TO_ADDR
// sDiff := false ;
7344: LD_ADDR_EXP 42
7348: PUSH
7349: LD_INT 0
7351: ST_TO_ADDR
// sFog := false ;
7352: LD_ADDR_EXP 45
7356: PUSH
7357: LD_INT 0
7359: ST_TO_ADDR
// sReset := false ;
7360: LD_ADDR_EXP 46
7364: PUSH
7365: LD_INT 0
7367: ST_TO_ADDR
// sSun := false ;
7368: LD_ADDR_EXP 47
7372: PUSH
7373: LD_INT 0
7375: ST_TO_ADDR
// sTiger := false ;
7376: LD_ADDR_EXP 43
7380: PUSH
7381: LD_INT 0
7383: ST_TO_ADDR
// sBomb := false ;
7384: LD_ADDR_EXP 44
7388: PUSH
7389: LD_INT 0
7391: ST_TO_ADDR
// sWound := false ;
7392: LD_ADDR_EXP 52
7396: PUSH
7397: LD_INT 0
7399: ST_TO_ADDR
// sBetray := false ;
7400: LD_ADDR_EXP 56
7404: PUSH
7405: LD_INT 0
7407: ST_TO_ADDR
// sContamin := false ;
7408: LD_ADDR_EXP 57
7412: PUSH
7413: LD_INT 0
7415: ST_TO_ADDR
// sOil := false ;
7416: LD_ADDR_EXP 59
7420: PUSH
7421: LD_INT 0
7423: ST_TO_ADDR
// sStu := false ;
7424: LD_ADDR_EXP 63
7428: PUSH
7429: LD_INT 0
7431: ST_TO_ADDR
// sBazooka := false ;
7432: LD_ADDR_EXP 66
7436: PUSH
7437: LD_INT 0
7439: ST_TO_ADDR
// sMortar := false ;
7440: LD_ADDR_EXP 67
7444: PUSH
7445: LD_INT 0
7447: ST_TO_ADDR
// sRanger := false ;
7448: LD_ADDR_EXP 77
7452: PUSH
7453: LD_INT 0
7455: ST_TO_ADDR
// sComputer := false ;
7456: LD_ADDR_EXP 78
7460: PUSH
7461: LD_INT 0
7463: ST_TO_ADDR
// s30 := false ;
7464: LD_ADDR_EXP 79
7468: PUSH
7469: LD_INT 0
7471: ST_TO_ADDR
// s60 := false ;
7472: LD_ADDR_EXP 80
7476: PUSH
7477: LD_INT 0
7479: ST_TO_ADDR
// end ;
7480: LD_VAR 0 1
7484: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
7485: LD_INT 0
7487: PPUSH
7488: PPUSH
7489: PPUSH
7490: PPUSH
7491: PPUSH
// result := [ ] ;
7492: LD_ADDR_VAR 0 1
7496: PUSH
7497: EMPTY
7498: ST_TO_ADDR
// if campaign_id = 1 then
7499: LD_OWVAR 69
7503: PUSH
7504: LD_INT 1
7506: EQUAL
7507: IFFALSE 10673
// begin case mission_number of 1 :
7509: LD_OWVAR 70
7513: PUSH
7514: LD_INT 1
7516: DOUBLE
7517: EQUAL
7518: IFTRUE 7522
7520: GO 7598
7522: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7523: LD_ADDR_VAR 0 1
7527: PUSH
7528: LD_INT 2
7530: PUSH
7531: LD_INT 4
7533: PUSH
7534: LD_INT 11
7536: PUSH
7537: LD_INT 12
7539: PUSH
7540: LD_INT 15
7542: PUSH
7543: LD_INT 16
7545: PUSH
7546: LD_INT 22
7548: PUSH
7549: LD_INT 23
7551: PUSH
7552: LD_INT 26
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: PUSH
7566: LD_INT 101
7568: PUSH
7569: LD_INT 102
7571: PUSH
7572: LD_INT 106
7574: PUSH
7575: LD_INT 116
7577: PUSH
7578: LD_INT 117
7580: PUSH
7581: LD_INT 118
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: ST_TO_ADDR
7596: GO 10671
7598: LD_INT 2
7600: DOUBLE
7601: EQUAL
7602: IFTRUE 7606
7604: GO 7690
7606: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7607: LD_ADDR_VAR 0 1
7611: PUSH
7612: LD_INT 2
7614: PUSH
7615: LD_INT 4
7617: PUSH
7618: LD_INT 11
7620: PUSH
7621: LD_INT 12
7623: PUSH
7624: LD_INT 15
7626: PUSH
7627: LD_INT 16
7629: PUSH
7630: LD_INT 22
7632: PUSH
7633: LD_INT 23
7635: PUSH
7636: LD_INT 26
7638: PUSH
7639: EMPTY
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: LIST
7649: PUSH
7650: LD_INT 101
7652: PUSH
7653: LD_INT 102
7655: PUSH
7656: LD_INT 105
7658: PUSH
7659: LD_INT 106
7661: PUSH
7662: LD_INT 108
7664: PUSH
7665: LD_INT 116
7667: PUSH
7668: LD_INT 117
7670: PUSH
7671: LD_INT 118
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: ST_TO_ADDR
7688: GO 10671
7690: LD_INT 3
7692: DOUBLE
7693: EQUAL
7694: IFTRUE 7698
7696: GO 7786
7698: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7699: LD_ADDR_VAR 0 1
7703: PUSH
7704: LD_INT 2
7706: PUSH
7707: LD_INT 4
7709: PUSH
7710: LD_INT 5
7712: PUSH
7713: LD_INT 11
7715: PUSH
7716: LD_INT 12
7718: PUSH
7719: LD_INT 15
7721: PUSH
7722: LD_INT 16
7724: PUSH
7725: LD_INT 22
7727: PUSH
7728: LD_INT 26
7730: PUSH
7731: LD_INT 36
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: PUSH
7746: LD_INT 101
7748: PUSH
7749: LD_INT 102
7751: PUSH
7752: LD_INT 105
7754: PUSH
7755: LD_INT 106
7757: PUSH
7758: LD_INT 108
7760: PUSH
7761: LD_INT 116
7763: PUSH
7764: LD_INT 117
7766: PUSH
7767: LD_INT 118
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: LIST
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: ST_TO_ADDR
7784: GO 10671
7786: LD_INT 4
7788: DOUBLE
7789: EQUAL
7790: IFTRUE 7794
7792: GO 7890
7794: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7795: LD_ADDR_VAR 0 1
7799: PUSH
7800: LD_INT 2
7802: PUSH
7803: LD_INT 4
7805: PUSH
7806: LD_INT 5
7808: PUSH
7809: LD_INT 8
7811: PUSH
7812: LD_INT 11
7814: PUSH
7815: LD_INT 12
7817: PUSH
7818: LD_INT 15
7820: PUSH
7821: LD_INT 16
7823: PUSH
7824: LD_INT 22
7826: PUSH
7827: LD_INT 23
7829: PUSH
7830: LD_INT 26
7832: PUSH
7833: LD_INT 36
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: PUSH
7850: LD_INT 101
7852: PUSH
7853: LD_INT 102
7855: PUSH
7856: LD_INT 105
7858: PUSH
7859: LD_INT 106
7861: PUSH
7862: LD_INT 108
7864: PUSH
7865: LD_INT 116
7867: PUSH
7868: LD_INT 117
7870: PUSH
7871: LD_INT 118
7873: PUSH
7874: EMPTY
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: ST_TO_ADDR
7888: GO 10671
7890: LD_INT 5
7892: DOUBLE
7893: EQUAL
7894: IFTRUE 7898
7896: GO 8010
7898: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7899: LD_ADDR_VAR 0 1
7903: PUSH
7904: LD_INT 2
7906: PUSH
7907: LD_INT 4
7909: PUSH
7910: LD_INT 5
7912: PUSH
7913: LD_INT 6
7915: PUSH
7916: LD_INT 8
7918: PUSH
7919: LD_INT 11
7921: PUSH
7922: LD_INT 12
7924: PUSH
7925: LD_INT 15
7927: PUSH
7928: LD_INT 16
7930: PUSH
7931: LD_INT 22
7933: PUSH
7934: LD_INT 23
7936: PUSH
7937: LD_INT 25
7939: PUSH
7940: LD_INT 26
7942: PUSH
7943: LD_INT 36
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: PUSH
7962: LD_INT 101
7964: PUSH
7965: LD_INT 102
7967: PUSH
7968: LD_INT 105
7970: PUSH
7971: LD_INT 106
7973: PUSH
7974: LD_INT 108
7976: PUSH
7977: LD_INT 109
7979: PUSH
7980: LD_INT 112
7982: PUSH
7983: LD_INT 116
7985: PUSH
7986: LD_INT 117
7988: PUSH
7989: LD_INT 118
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: ST_TO_ADDR
8008: GO 10671
8010: LD_INT 6
8012: DOUBLE
8013: EQUAL
8014: IFTRUE 8018
8016: GO 8150
8018: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
8019: LD_ADDR_VAR 0 1
8023: PUSH
8024: LD_INT 2
8026: PUSH
8027: LD_INT 4
8029: PUSH
8030: LD_INT 5
8032: PUSH
8033: LD_INT 6
8035: PUSH
8036: LD_INT 8
8038: PUSH
8039: LD_INT 11
8041: PUSH
8042: LD_INT 12
8044: PUSH
8045: LD_INT 15
8047: PUSH
8048: LD_INT 16
8050: PUSH
8051: LD_INT 20
8053: PUSH
8054: LD_INT 21
8056: PUSH
8057: LD_INT 22
8059: PUSH
8060: LD_INT 23
8062: PUSH
8063: LD_INT 25
8065: PUSH
8066: LD_INT 26
8068: PUSH
8069: LD_INT 30
8071: PUSH
8072: LD_INT 31
8074: PUSH
8075: LD_INT 32
8077: PUSH
8078: LD_INT 36
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: PUSH
8102: LD_INT 101
8104: PUSH
8105: LD_INT 102
8107: PUSH
8108: LD_INT 105
8110: PUSH
8111: LD_INT 106
8113: PUSH
8114: LD_INT 108
8116: PUSH
8117: LD_INT 109
8119: PUSH
8120: LD_INT 112
8122: PUSH
8123: LD_INT 116
8125: PUSH
8126: LD_INT 117
8128: PUSH
8129: LD_INT 118
8131: PUSH
8132: EMPTY
8133: LIST
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: ST_TO_ADDR
8148: GO 10671
8150: LD_INT 7
8152: DOUBLE
8153: EQUAL
8154: IFTRUE 8158
8156: GO 8270
8158: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8159: LD_ADDR_VAR 0 1
8163: PUSH
8164: LD_INT 2
8166: PUSH
8167: LD_INT 4
8169: PUSH
8170: LD_INT 5
8172: PUSH
8173: LD_INT 7
8175: PUSH
8176: LD_INT 11
8178: PUSH
8179: LD_INT 12
8181: PUSH
8182: LD_INT 15
8184: PUSH
8185: LD_INT 16
8187: PUSH
8188: LD_INT 20
8190: PUSH
8191: LD_INT 21
8193: PUSH
8194: LD_INT 22
8196: PUSH
8197: LD_INT 23
8199: PUSH
8200: LD_INT 25
8202: PUSH
8203: LD_INT 26
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: PUSH
8222: LD_INT 101
8224: PUSH
8225: LD_INT 102
8227: PUSH
8228: LD_INT 103
8230: PUSH
8231: LD_INT 105
8233: PUSH
8234: LD_INT 106
8236: PUSH
8237: LD_INT 108
8239: PUSH
8240: LD_INT 112
8242: PUSH
8243: LD_INT 116
8245: PUSH
8246: LD_INT 117
8248: PUSH
8249: LD_INT 118
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: PUSH
8264: EMPTY
8265: LIST
8266: LIST
8267: ST_TO_ADDR
8268: GO 10671
8270: LD_INT 8
8272: DOUBLE
8273: EQUAL
8274: IFTRUE 8278
8276: GO 8418
8278: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8279: LD_ADDR_VAR 0 1
8283: PUSH
8284: LD_INT 2
8286: PUSH
8287: LD_INT 4
8289: PUSH
8290: LD_INT 5
8292: PUSH
8293: LD_INT 6
8295: PUSH
8296: LD_INT 7
8298: PUSH
8299: LD_INT 8
8301: PUSH
8302: LD_INT 11
8304: PUSH
8305: LD_INT 12
8307: PUSH
8308: LD_INT 15
8310: PUSH
8311: LD_INT 16
8313: PUSH
8314: LD_INT 20
8316: PUSH
8317: LD_INT 21
8319: PUSH
8320: LD_INT 22
8322: PUSH
8323: LD_INT 23
8325: PUSH
8326: LD_INT 25
8328: PUSH
8329: LD_INT 26
8331: PUSH
8332: LD_INT 30
8334: PUSH
8335: LD_INT 31
8337: PUSH
8338: LD_INT 32
8340: PUSH
8341: LD_INT 36
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: PUSH
8366: LD_INT 101
8368: PUSH
8369: LD_INT 102
8371: PUSH
8372: LD_INT 103
8374: PUSH
8375: LD_INT 105
8377: PUSH
8378: LD_INT 106
8380: PUSH
8381: LD_INT 108
8383: PUSH
8384: LD_INT 109
8386: PUSH
8387: LD_INT 112
8389: PUSH
8390: LD_INT 116
8392: PUSH
8393: LD_INT 117
8395: PUSH
8396: LD_INT 118
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: PUSH
8412: EMPTY
8413: LIST
8414: LIST
8415: ST_TO_ADDR
8416: GO 10671
8418: LD_INT 9
8420: DOUBLE
8421: EQUAL
8422: IFTRUE 8426
8424: GO 8574
8426: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8427: LD_ADDR_VAR 0 1
8431: PUSH
8432: LD_INT 2
8434: PUSH
8435: LD_INT 4
8437: PUSH
8438: LD_INT 5
8440: PUSH
8441: LD_INT 6
8443: PUSH
8444: LD_INT 7
8446: PUSH
8447: LD_INT 8
8449: PUSH
8450: LD_INT 11
8452: PUSH
8453: LD_INT 12
8455: PUSH
8456: LD_INT 15
8458: PUSH
8459: LD_INT 16
8461: PUSH
8462: LD_INT 20
8464: PUSH
8465: LD_INT 21
8467: PUSH
8468: LD_INT 22
8470: PUSH
8471: LD_INT 23
8473: PUSH
8474: LD_INT 25
8476: PUSH
8477: LD_INT 26
8479: PUSH
8480: LD_INT 28
8482: PUSH
8483: LD_INT 30
8485: PUSH
8486: LD_INT 31
8488: PUSH
8489: LD_INT 32
8491: PUSH
8492: LD_INT 36
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: PUSH
8518: LD_INT 101
8520: PUSH
8521: LD_INT 102
8523: PUSH
8524: LD_INT 103
8526: PUSH
8527: LD_INT 105
8529: PUSH
8530: LD_INT 106
8532: PUSH
8533: LD_INT 108
8535: PUSH
8536: LD_INT 109
8538: PUSH
8539: LD_INT 112
8541: PUSH
8542: LD_INT 114
8544: PUSH
8545: LD_INT 116
8547: PUSH
8548: LD_INT 117
8550: PUSH
8551: LD_INT 118
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: ST_TO_ADDR
8572: GO 10671
8574: LD_INT 10
8576: DOUBLE
8577: EQUAL
8578: IFTRUE 8582
8580: GO 8778
8582: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8583: LD_ADDR_VAR 0 1
8587: PUSH
8588: LD_INT 2
8590: PUSH
8591: LD_INT 4
8593: PUSH
8594: LD_INT 5
8596: PUSH
8597: LD_INT 6
8599: PUSH
8600: LD_INT 7
8602: PUSH
8603: LD_INT 8
8605: PUSH
8606: LD_INT 9
8608: PUSH
8609: LD_INT 10
8611: PUSH
8612: LD_INT 11
8614: PUSH
8615: LD_INT 12
8617: PUSH
8618: LD_INT 13
8620: PUSH
8621: LD_INT 14
8623: PUSH
8624: LD_INT 15
8626: PUSH
8627: LD_INT 16
8629: PUSH
8630: LD_INT 17
8632: PUSH
8633: LD_INT 18
8635: PUSH
8636: LD_INT 19
8638: PUSH
8639: LD_INT 20
8641: PUSH
8642: LD_INT 21
8644: PUSH
8645: LD_INT 22
8647: PUSH
8648: LD_INT 23
8650: PUSH
8651: LD_INT 24
8653: PUSH
8654: LD_INT 25
8656: PUSH
8657: LD_INT 26
8659: PUSH
8660: LD_INT 28
8662: PUSH
8663: LD_INT 30
8665: PUSH
8666: LD_INT 31
8668: PUSH
8669: LD_INT 32
8671: PUSH
8672: LD_INT 36
8674: PUSH
8675: EMPTY
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: PUSH
8706: LD_INT 101
8708: PUSH
8709: LD_INT 102
8711: PUSH
8712: LD_INT 103
8714: PUSH
8715: LD_INT 104
8717: PUSH
8718: LD_INT 105
8720: PUSH
8721: LD_INT 106
8723: PUSH
8724: LD_INT 107
8726: PUSH
8727: LD_INT 108
8729: PUSH
8730: LD_INT 109
8732: PUSH
8733: LD_INT 110
8735: PUSH
8736: LD_INT 111
8738: PUSH
8739: LD_INT 112
8741: PUSH
8742: LD_INT 114
8744: PUSH
8745: LD_INT 116
8747: PUSH
8748: LD_INT 117
8750: PUSH
8751: LD_INT 118
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: ST_TO_ADDR
8776: GO 10671
8778: LD_INT 11
8780: DOUBLE
8781: EQUAL
8782: IFTRUE 8786
8784: GO 8990
8786: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8787: LD_ADDR_VAR 0 1
8791: PUSH
8792: LD_INT 2
8794: PUSH
8795: LD_INT 3
8797: PUSH
8798: LD_INT 4
8800: PUSH
8801: LD_INT 5
8803: PUSH
8804: LD_INT 6
8806: PUSH
8807: LD_INT 7
8809: PUSH
8810: LD_INT 8
8812: PUSH
8813: LD_INT 9
8815: PUSH
8816: LD_INT 10
8818: PUSH
8819: LD_INT 11
8821: PUSH
8822: LD_INT 12
8824: PUSH
8825: LD_INT 13
8827: PUSH
8828: LD_INT 14
8830: PUSH
8831: LD_INT 15
8833: PUSH
8834: LD_INT 16
8836: PUSH
8837: LD_INT 17
8839: PUSH
8840: LD_INT 18
8842: PUSH
8843: LD_INT 19
8845: PUSH
8846: LD_INT 20
8848: PUSH
8849: LD_INT 21
8851: PUSH
8852: LD_INT 22
8854: PUSH
8855: LD_INT 23
8857: PUSH
8858: LD_INT 24
8860: PUSH
8861: LD_INT 25
8863: PUSH
8864: LD_INT 26
8866: PUSH
8867: LD_INT 28
8869: PUSH
8870: LD_INT 30
8872: PUSH
8873: LD_INT 31
8875: PUSH
8876: LD_INT 32
8878: PUSH
8879: LD_INT 34
8881: PUSH
8882: LD_INT 36
8884: PUSH
8885: EMPTY
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: PUSH
8918: LD_INT 101
8920: PUSH
8921: LD_INT 102
8923: PUSH
8924: LD_INT 103
8926: PUSH
8927: LD_INT 104
8929: PUSH
8930: LD_INT 105
8932: PUSH
8933: LD_INT 106
8935: PUSH
8936: LD_INT 107
8938: PUSH
8939: LD_INT 108
8941: PUSH
8942: LD_INT 109
8944: PUSH
8945: LD_INT 110
8947: PUSH
8948: LD_INT 111
8950: PUSH
8951: LD_INT 112
8953: PUSH
8954: LD_INT 114
8956: PUSH
8957: LD_INT 116
8959: PUSH
8960: LD_INT 117
8962: PUSH
8963: LD_INT 118
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: ST_TO_ADDR
8988: GO 10671
8990: LD_INT 12
8992: DOUBLE
8993: EQUAL
8994: IFTRUE 8998
8996: GO 9218
8998: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8999: LD_ADDR_VAR 0 1
9003: PUSH
9004: LD_INT 1
9006: PUSH
9007: LD_INT 2
9009: PUSH
9010: LD_INT 3
9012: PUSH
9013: LD_INT 4
9015: PUSH
9016: LD_INT 5
9018: PUSH
9019: LD_INT 6
9021: PUSH
9022: LD_INT 7
9024: PUSH
9025: LD_INT 8
9027: PUSH
9028: LD_INT 9
9030: PUSH
9031: LD_INT 10
9033: PUSH
9034: LD_INT 11
9036: PUSH
9037: LD_INT 12
9039: PUSH
9040: LD_INT 13
9042: PUSH
9043: LD_INT 14
9045: PUSH
9046: LD_INT 15
9048: PUSH
9049: LD_INT 16
9051: PUSH
9052: LD_INT 17
9054: PUSH
9055: LD_INT 18
9057: PUSH
9058: LD_INT 19
9060: PUSH
9061: LD_INT 20
9063: PUSH
9064: LD_INT 21
9066: PUSH
9067: LD_INT 22
9069: PUSH
9070: LD_INT 23
9072: PUSH
9073: LD_INT 24
9075: PUSH
9076: LD_INT 25
9078: PUSH
9079: LD_INT 26
9081: PUSH
9082: LD_INT 27
9084: PUSH
9085: LD_INT 28
9087: PUSH
9088: LD_INT 30
9090: PUSH
9091: LD_INT 31
9093: PUSH
9094: LD_INT 32
9096: PUSH
9097: LD_INT 33
9099: PUSH
9100: LD_INT 34
9102: PUSH
9103: LD_INT 36
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: PUSH
9142: LD_INT 101
9144: PUSH
9145: LD_INT 102
9147: PUSH
9148: LD_INT 103
9150: PUSH
9151: LD_INT 104
9153: PUSH
9154: LD_INT 105
9156: PUSH
9157: LD_INT 106
9159: PUSH
9160: LD_INT 107
9162: PUSH
9163: LD_INT 108
9165: PUSH
9166: LD_INT 109
9168: PUSH
9169: LD_INT 110
9171: PUSH
9172: LD_INT 111
9174: PUSH
9175: LD_INT 112
9177: PUSH
9178: LD_INT 113
9180: PUSH
9181: LD_INT 114
9183: PUSH
9184: LD_INT 116
9186: PUSH
9187: LD_INT 117
9189: PUSH
9190: LD_INT 118
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: ST_TO_ADDR
9216: GO 10671
9218: LD_INT 13
9220: DOUBLE
9221: EQUAL
9222: IFTRUE 9226
9224: GO 9434
9226: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9227: LD_ADDR_VAR 0 1
9231: PUSH
9232: LD_INT 1
9234: PUSH
9235: LD_INT 2
9237: PUSH
9238: LD_INT 3
9240: PUSH
9241: LD_INT 4
9243: PUSH
9244: LD_INT 5
9246: PUSH
9247: LD_INT 8
9249: PUSH
9250: LD_INT 9
9252: PUSH
9253: LD_INT 10
9255: PUSH
9256: LD_INT 11
9258: PUSH
9259: LD_INT 12
9261: PUSH
9262: LD_INT 14
9264: PUSH
9265: LD_INT 15
9267: PUSH
9268: LD_INT 16
9270: PUSH
9271: LD_INT 17
9273: PUSH
9274: LD_INT 18
9276: PUSH
9277: LD_INT 19
9279: PUSH
9280: LD_INT 20
9282: PUSH
9283: LD_INT 21
9285: PUSH
9286: LD_INT 22
9288: PUSH
9289: LD_INT 23
9291: PUSH
9292: LD_INT 24
9294: PUSH
9295: LD_INT 25
9297: PUSH
9298: LD_INT 26
9300: PUSH
9301: LD_INT 27
9303: PUSH
9304: LD_INT 28
9306: PUSH
9307: LD_INT 30
9309: PUSH
9310: LD_INT 31
9312: PUSH
9313: LD_INT 32
9315: PUSH
9316: LD_INT 33
9318: PUSH
9319: LD_INT 34
9321: PUSH
9322: LD_INT 36
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: PUSH
9358: LD_INT 101
9360: PUSH
9361: LD_INT 102
9363: PUSH
9364: LD_INT 103
9366: PUSH
9367: LD_INT 104
9369: PUSH
9370: LD_INT 105
9372: PUSH
9373: LD_INT 106
9375: PUSH
9376: LD_INT 107
9378: PUSH
9379: LD_INT 108
9381: PUSH
9382: LD_INT 109
9384: PUSH
9385: LD_INT 110
9387: PUSH
9388: LD_INT 111
9390: PUSH
9391: LD_INT 112
9393: PUSH
9394: LD_INT 113
9396: PUSH
9397: LD_INT 114
9399: PUSH
9400: LD_INT 116
9402: PUSH
9403: LD_INT 117
9405: PUSH
9406: LD_INT 118
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: ST_TO_ADDR
9432: GO 10671
9434: LD_INT 14
9436: DOUBLE
9437: EQUAL
9438: IFTRUE 9442
9440: GO 9666
9442: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9443: LD_ADDR_VAR 0 1
9447: PUSH
9448: LD_INT 1
9450: PUSH
9451: LD_INT 2
9453: PUSH
9454: LD_INT 3
9456: PUSH
9457: LD_INT 4
9459: PUSH
9460: LD_INT 5
9462: PUSH
9463: LD_INT 6
9465: PUSH
9466: LD_INT 7
9468: PUSH
9469: LD_INT 8
9471: PUSH
9472: LD_INT 9
9474: PUSH
9475: LD_INT 10
9477: PUSH
9478: LD_INT 11
9480: PUSH
9481: LD_INT 12
9483: PUSH
9484: LD_INT 13
9486: PUSH
9487: LD_INT 14
9489: PUSH
9490: LD_INT 15
9492: PUSH
9493: LD_INT 16
9495: PUSH
9496: LD_INT 17
9498: PUSH
9499: LD_INT 18
9501: PUSH
9502: LD_INT 19
9504: PUSH
9505: LD_INT 20
9507: PUSH
9508: LD_INT 21
9510: PUSH
9511: LD_INT 22
9513: PUSH
9514: LD_INT 23
9516: PUSH
9517: LD_INT 24
9519: PUSH
9520: LD_INT 25
9522: PUSH
9523: LD_INT 26
9525: PUSH
9526: LD_INT 27
9528: PUSH
9529: LD_INT 28
9531: PUSH
9532: LD_INT 29
9534: PUSH
9535: LD_INT 30
9537: PUSH
9538: LD_INT 31
9540: PUSH
9541: LD_INT 32
9543: PUSH
9544: LD_INT 33
9546: PUSH
9547: LD_INT 34
9549: PUSH
9550: LD_INT 36
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: PUSH
9590: LD_INT 101
9592: PUSH
9593: LD_INT 102
9595: PUSH
9596: LD_INT 103
9598: PUSH
9599: LD_INT 104
9601: PUSH
9602: LD_INT 105
9604: PUSH
9605: LD_INT 106
9607: PUSH
9608: LD_INT 107
9610: PUSH
9611: LD_INT 108
9613: PUSH
9614: LD_INT 109
9616: PUSH
9617: LD_INT 110
9619: PUSH
9620: LD_INT 111
9622: PUSH
9623: LD_INT 112
9625: PUSH
9626: LD_INT 113
9628: PUSH
9629: LD_INT 114
9631: PUSH
9632: LD_INT 116
9634: PUSH
9635: LD_INT 117
9637: PUSH
9638: LD_INT 118
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: ST_TO_ADDR
9664: GO 10671
9666: LD_INT 15
9668: DOUBLE
9669: EQUAL
9670: IFTRUE 9674
9672: GO 9898
9674: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9675: LD_ADDR_VAR 0 1
9679: PUSH
9680: LD_INT 1
9682: PUSH
9683: LD_INT 2
9685: PUSH
9686: LD_INT 3
9688: PUSH
9689: LD_INT 4
9691: PUSH
9692: LD_INT 5
9694: PUSH
9695: LD_INT 6
9697: PUSH
9698: LD_INT 7
9700: PUSH
9701: LD_INT 8
9703: PUSH
9704: LD_INT 9
9706: PUSH
9707: LD_INT 10
9709: PUSH
9710: LD_INT 11
9712: PUSH
9713: LD_INT 12
9715: PUSH
9716: LD_INT 13
9718: PUSH
9719: LD_INT 14
9721: PUSH
9722: LD_INT 15
9724: PUSH
9725: LD_INT 16
9727: PUSH
9728: LD_INT 17
9730: PUSH
9731: LD_INT 18
9733: PUSH
9734: LD_INT 19
9736: PUSH
9737: LD_INT 20
9739: PUSH
9740: LD_INT 21
9742: PUSH
9743: LD_INT 22
9745: PUSH
9746: LD_INT 23
9748: PUSH
9749: LD_INT 24
9751: PUSH
9752: LD_INT 25
9754: PUSH
9755: LD_INT 26
9757: PUSH
9758: LD_INT 27
9760: PUSH
9761: LD_INT 28
9763: PUSH
9764: LD_INT 29
9766: PUSH
9767: LD_INT 30
9769: PUSH
9770: LD_INT 31
9772: PUSH
9773: LD_INT 32
9775: PUSH
9776: LD_INT 33
9778: PUSH
9779: LD_INT 34
9781: PUSH
9782: LD_INT 36
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: PUSH
9822: LD_INT 101
9824: PUSH
9825: LD_INT 102
9827: PUSH
9828: LD_INT 103
9830: PUSH
9831: LD_INT 104
9833: PUSH
9834: LD_INT 105
9836: PUSH
9837: LD_INT 106
9839: PUSH
9840: LD_INT 107
9842: PUSH
9843: LD_INT 108
9845: PUSH
9846: LD_INT 109
9848: PUSH
9849: LD_INT 110
9851: PUSH
9852: LD_INT 111
9854: PUSH
9855: LD_INT 112
9857: PUSH
9858: LD_INT 113
9860: PUSH
9861: LD_INT 114
9863: PUSH
9864: LD_INT 116
9866: PUSH
9867: LD_INT 117
9869: PUSH
9870: LD_INT 118
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: PUSH
9892: EMPTY
9893: LIST
9894: LIST
9895: ST_TO_ADDR
9896: GO 10671
9898: LD_INT 16
9900: DOUBLE
9901: EQUAL
9902: IFTRUE 9906
9904: GO 10042
9906: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9907: LD_ADDR_VAR 0 1
9911: PUSH
9912: LD_INT 2
9914: PUSH
9915: LD_INT 4
9917: PUSH
9918: LD_INT 5
9920: PUSH
9921: LD_INT 7
9923: PUSH
9924: LD_INT 11
9926: PUSH
9927: LD_INT 12
9929: PUSH
9930: LD_INT 15
9932: PUSH
9933: LD_INT 16
9935: PUSH
9936: LD_INT 20
9938: PUSH
9939: LD_INT 21
9941: PUSH
9942: LD_INT 22
9944: PUSH
9945: LD_INT 23
9947: PUSH
9948: LD_INT 25
9950: PUSH
9951: LD_INT 26
9953: PUSH
9954: LD_INT 30
9956: PUSH
9957: LD_INT 31
9959: PUSH
9960: LD_INT 32
9962: PUSH
9963: LD_INT 33
9965: PUSH
9966: LD_INT 34
9968: PUSH
9969: EMPTY
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: PUSH
9990: LD_INT 101
9992: PUSH
9993: LD_INT 102
9995: PUSH
9996: LD_INT 103
9998: PUSH
9999: LD_INT 106
10001: PUSH
10002: LD_INT 108
10004: PUSH
10005: LD_INT 112
10007: PUSH
10008: LD_INT 113
10010: PUSH
10011: LD_INT 114
10013: PUSH
10014: LD_INT 116
10016: PUSH
10017: LD_INT 117
10019: PUSH
10020: LD_INT 118
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: ST_TO_ADDR
10040: GO 10671
10042: LD_INT 17
10044: DOUBLE
10045: EQUAL
10046: IFTRUE 10050
10048: GO 10274
10050: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
10051: LD_ADDR_VAR 0 1
10055: PUSH
10056: LD_INT 1
10058: PUSH
10059: LD_INT 2
10061: PUSH
10062: LD_INT 3
10064: PUSH
10065: LD_INT 4
10067: PUSH
10068: LD_INT 5
10070: PUSH
10071: LD_INT 6
10073: PUSH
10074: LD_INT 7
10076: PUSH
10077: LD_INT 8
10079: PUSH
10080: LD_INT 9
10082: PUSH
10083: LD_INT 10
10085: PUSH
10086: LD_INT 11
10088: PUSH
10089: LD_INT 12
10091: PUSH
10092: LD_INT 13
10094: PUSH
10095: LD_INT 14
10097: PUSH
10098: LD_INT 15
10100: PUSH
10101: LD_INT 16
10103: PUSH
10104: LD_INT 17
10106: PUSH
10107: LD_INT 18
10109: PUSH
10110: LD_INT 19
10112: PUSH
10113: LD_INT 20
10115: PUSH
10116: LD_INT 21
10118: PUSH
10119: LD_INT 22
10121: PUSH
10122: LD_INT 23
10124: PUSH
10125: LD_INT 24
10127: PUSH
10128: LD_INT 25
10130: PUSH
10131: LD_INT 26
10133: PUSH
10134: LD_INT 27
10136: PUSH
10137: LD_INT 28
10139: PUSH
10140: LD_INT 29
10142: PUSH
10143: LD_INT 30
10145: PUSH
10146: LD_INT 31
10148: PUSH
10149: LD_INT 32
10151: PUSH
10152: LD_INT 33
10154: PUSH
10155: LD_INT 34
10157: PUSH
10158: LD_INT 36
10160: PUSH
10161: EMPTY
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: PUSH
10198: LD_INT 101
10200: PUSH
10201: LD_INT 102
10203: PUSH
10204: LD_INT 103
10206: PUSH
10207: LD_INT 104
10209: PUSH
10210: LD_INT 105
10212: PUSH
10213: LD_INT 106
10215: PUSH
10216: LD_INT 107
10218: PUSH
10219: LD_INT 108
10221: PUSH
10222: LD_INT 109
10224: PUSH
10225: LD_INT 110
10227: PUSH
10228: LD_INT 111
10230: PUSH
10231: LD_INT 112
10233: PUSH
10234: LD_INT 113
10236: PUSH
10237: LD_INT 114
10239: PUSH
10240: LD_INT 116
10242: PUSH
10243: LD_INT 117
10245: PUSH
10246: LD_INT 118
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: PUSH
10268: EMPTY
10269: LIST
10270: LIST
10271: ST_TO_ADDR
10272: GO 10671
10274: LD_INT 18
10276: DOUBLE
10277: EQUAL
10278: IFTRUE 10282
10280: GO 10430
10282: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10283: LD_ADDR_VAR 0 1
10287: PUSH
10288: LD_INT 2
10290: PUSH
10291: LD_INT 4
10293: PUSH
10294: LD_INT 5
10296: PUSH
10297: LD_INT 7
10299: PUSH
10300: LD_INT 11
10302: PUSH
10303: LD_INT 12
10305: PUSH
10306: LD_INT 15
10308: PUSH
10309: LD_INT 16
10311: PUSH
10312: LD_INT 20
10314: PUSH
10315: LD_INT 21
10317: PUSH
10318: LD_INT 22
10320: PUSH
10321: LD_INT 23
10323: PUSH
10324: LD_INT 25
10326: PUSH
10327: LD_INT 26
10329: PUSH
10330: LD_INT 30
10332: PUSH
10333: LD_INT 31
10335: PUSH
10336: LD_INT 32
10338: PUSH
10339: LD_INT 33
10341: PUSH
10342: LD_INT 34
10344: PUSH
10345: LD_INT 35
10347: PUSH
10348: LD_INT 36
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: PUSH
10374: LD_INT 101
10376: PUSH
10377: LD_INT 102
10379: PUSH
10380: LD_INT 103
10382: PUSH
10383: LD_INT 106
10385: PUSH
10386: LD_INT 108
10388: PUSH
10389: LD_INT 112
10391: PUSH
10392: LD_INT 113
10394: PUSH
10395: LD_INT 114
10397: PUSH
10398: LD_INT 115
10400: PUSH
10401: LD_INT 116
10403: PUSH
10404: LD_INT 117
10406: PUSH
10407: LD_INT 118
10409: PUSH
10410: EMPTY
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: PUSH
10424: EMPTY
10425: LIST
10426: LIST
10427: ST_TO_ADDR
10428: GO 10671
10430: LD_INT 19
10432: DOUBLE
10433: EQUAL
10434: IFTRUE 10438
10436: GO 10670
10438: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10439: LD_ADDR_VAR 0 1
10443: PUSH
10444: LD_INT 1
10446: PUSH
10447: LD_INT 2
10449: PUSH
10450: LD_INT 3
10452: PUSH
10453: LD_INT 4
10455: PUSH
10456: LD_INT 5
10458: PUSH
10459: LD_INT 6
10461: PUSH
10462: LD_INT 7
10464: PUSH
10465: LD_INT 8
10467: PUSH
10468: LD_INT 9
10470: PUSH
10471: LD_INT 10
10473: PUSH
10474: LD_INT 11
10476: PUSH
10477: LD_INT 12
10479: PUSH
10480: LD_INT 13
10482: PUSH
10483: LD_INT 14
10485: PUSH
10486: LD_INT 15
10488: PUSH
10489: LD_INT 16
10491: PUSH
10492: LD_INT 17
10494: PUSH
10495: LD_INT 18
10497: PUSH
10498: LD_INT 19
10500: PUSH
10501: LD_INT 20
10503: PUSH
10504: LD_INT 21
10506: PUSH
10507: LD_INT 22
10509: PUSH
10510: LD_INT 23
10512: PUSH
10513: LD_INT 24
10515: PUSH
10516: LD_INT 25
10518: PUSH
10519: LD_INT 26
10521: PUSH
10522: LD_INT 27
10524: PUSH
10525: LD_INT 28
10527: PUSH
10528: LD_INT 29
10530: PUSH
10531: LD_INT 30
10533: PUSH
10534: LD_INT 31
10536: PUSH
10537: LD_INT 32
10539: PUSH
10540: LD_INT 33
10542: PUSH
10543: LD_INT 34
10545: PUSH
10546: LD_INT 35
10548: PUSH
10549: LD_INT 36
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: PUSH
10590: LD_INT 101
10592: PUSH
10593: LD_INT 102
10595: PUSH
10596: LD_INT 103
10598: PUSH
10599: LD_INT 104
10601: PUSH
10602: LD_INT 105
10604: PUSH
10605: LD_INT 106
10607: PUSH
10608: LD_INT 107
10610: PUSH
10611: LD_INT 108
10613: PUSH
10614: LD_INT 109
10616: PUSH
10617: LD_INT 110
10619: PUSH
10620: LD_INT 111
10622: PUSH
10623: LD_INT 112
10625: PUSH
10626: LD_INT 113
10628: PUSH
10629: LD_INT 114
10631: PUSH
10632: LD_INT 115
10634: PUSH
10635: LD_INT 116
10637: PUSH
10638: LD_INT 117
10640: PUSH
10641: LD_INT 118
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: ST_TO_ADDR
10668: GO 10671
10670: POP
// end else
10671: GO 10902
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10673: LD_ADDR_VAR 0 1
10677: PUSH
10678: LD_INT 1
10680: PUSH
10681: LD_INT 2
10683: PUSH
10684: LD_INT 3
10686: PUSH
10687: LD_INT 4
10689: PUSH
10690: LD_INT 5
10692: PUSH
10693: LD_INT 6
10695: PUSH
10696: LD_INT 7
10698: PUSH
10699: LD_INT 8
10701: PUSH
10702: LD_INT 9
10704: PUSH
10705: LD_INT 10
10707: PUSH
10708: LD_INT 11
10710: PUSH
10711: LD_INT 12
10713: PUSH
10714: LD_INT 13
10716: PUSH
10717: LD_INT 14
10719: PUSH
10720: LD_INT 15
10722: PUSH
10723: LD_INT 16
10725: PUSH
10726: LD_INT 17
10728: PUSH
10729: LD_INT 18
10731: PUSH
10732: LD_INT 19
10734: PUSH
10735: LD_INT 20
10737: PUSH
10738: LD_INT 21
10740: PUSH
10741: LD_INT 22
10743: PUSH
10744: LD_INT 23
10746: PUSH
10747: LD_INT 24
10749: PUSH
10750: LD_INT 25
10752: PUSH
10753: LD_INT 26
10755: PUSH
10756: LD_INT 27
10758: PUSH
10759: LD_INT 28
10761: PUSH
10762: LD_INT 29
10764: PUSH
10765: LD_INT 30
10767: PUSH
10768: LD_INT 31
10770: PUSH
10771: LD_INT 32
10773: PUSH
10774: LD_INT 33
10776: PUSH
10777: LD_INT 34
10779: PUSH
10780: LD_INT 35
10782: PUSH
10783: LD_INT 36
10785: PUSH
10786: EMPTY
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: PUSH
10824: LD_INT 101
10826: PUSH
10827: LD_INT 102
10829: PUSH
10830: LD_INT 103
10832: PUSH
10833: LD_INT 104
10835: PUSH
10836: LD_INT 105
10838: PUSH
10839: LD_INT 106
10841: PUSH
10842: LD_INT 107
10844: PUSH
10845: LD_INT 108
10847: PUSH
10848: LD_INT 109
10850: PUSH
10851: LD_INT 110
10853: PUSH
10854: LD_INT 111
10856: PUSH
10857: LD_INT 112
10859: PUSH
10860: LD_INT 113
10862: PUSH
10863: LD_INT 114
10865: PUSH
10866: LD_INT 115
10868: PUSH
10869: LD_INT 116
10871: PUSH
10872: LD_INT 117
10874: PUSH
10875: LD_INT 118
10877: PUSH
10878: EMPTY
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: ST_TO_ADDR
// if result then
10902: LD_VAR 0 1
10906: IFFALSE 11195
// begin normal :=  ;
10908: LD_ADDR_VAR 0 3
10912: PUSH
10913: LD_STRING 
10915: ST_TO_ADDR
// hardcore :=  ;
10916: LD_ADDR_VAR 0 4
10920: PUSH
10921: LD_STRING 
10923: ST_TO_ADDR
// for i = 1 to normalCounter do
10924: LD_ADDR_VAR 0 5
10928: PUSH
10929: DOUBLE
10930: LD_INT 1
10932: DEC
10933: ST_TO_ADDR
10934: LD_EXP 25
10938: PUSH
10939: FOR_TO
10940: IFFALSE 11041
// begin tmp := 0 ;
10942: LD_ADDR_VAR 0 2
10946: PUSH
10947: LD_STRING 0
10949: ST_TO_ADDR
// if result [ 1 ] then
10950: LD_VAR 0 1
10954: PUSH
10955: LD_INT 1
10957: ARRAY
10958: IFFALSE 11023
// if result [ 1 ] [ 1 ] = i then
10960: LD_VAR 0 1
10964: PUSH
10965: LD_INT 1
10967: ARRAY
10968: PUSH
10969: LD_INT 1
10971: ARRAY
10972: PUSH
10973: LD_VAR 0 5
10977: EQUAL
10978: IFFALSE 11023
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10980: LD_ADDR_VAR 0 1
10984: PUSH
10985: LD_VAR 0 1
10989: PPUSH
10990: LD_INT 1
10992: PPUSH
10993: LD_VAR 0 1
10997: PUSH
10998: LD_INT 1
11000: ARRAY
11001: PPUSH
11002: LD_INT 1
11004: PPUSH
11005: CALL_OW 3
11009: PPUSH
11010: CALL_OW 1
11014: ST_TO_ADDR
// tmp := 1 ;
11015: LD_ADDR_VAR 0 2
11019: PUSH
11020: LD_STRING 1
11022: ST_TO_ADDR
// end ; normal := normal & tmp ;
11023: LD_ADDR_VAR 0 3
11027: PUSH
11028: LD_VAR 0 3
11032: PUSH
11033: LD_VAR 0 2
11037: STR
11038: ST_TO_ADDR
// end ;
11039: GO 10939
11041: POP
11042: POP
// for i = 1 to hardcoreCounter do
11043: LD_ADDR_VAR 0 5
11047: PUSH
11048: DOUBLE
11049: LD_INT 1
11051: DEC
11052: ST_TO_ADDR
11053: LD_EXP 26
11057: PUSH
11058: FOR_TO
11059: IFFALSE 11164
// begin tmp := 0 ;
11061: LD_ADDR_VAR 0 2
11065: PUSH
11066: LD_STRING 0
11068: ST_TO_ADDR
// if result [ 2 ] then
11069: LD_VAR 0 1
11073: PUSH
11074: LD_INT 2
11076: ARRAY
11077: IFFALSE 11146
// if result [ 2 ] [ 1 ] = 100 + i then
11079: LD_VAR 0 1
11083: PUSH
11084: LD_INT 2
11086: ARRAY
11087: PUSH
11088: LD_INT 1
11090: ARRAY
11091: PUSH
11092: LD_INT 100
11094: PUSH
11095: LD_VAR 0 5
11099: PLUS
11100: EQUAL
11101: IFFALSE 11146
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11103: LD_ADDR_VAR 0 1
11107: PUSH
11108: LD_VAR 0 1
11112: PPUSH
11113: LD_INT 2
11115: PPUSH
11116: LD_VAR 0 1
11120: PUSH
11121: LD_INT 2
11123: ARRAY
11124: PPUSH
11125: LD_INT 1
11127: PPUSH
11128: CALL_OW 3
11132: PPUSH
11133: CALL_OW 1
11137: ST_TO_ADDR
// tmp := 1 ;
11138: LD_ADDR_VAR 0 2
11142: PUSH
11143: LD_STRING 1
11145: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11146: LD_ADDR_VAR 0 4
11150: PUSH
11151: LD_VAR 0 4
11155: PUSH
11156: LD_VAR 0 2
11160: STR
11161: ST_TO_ADDR
// end ;
11162: GO 11058
11164: POP
11165: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
11166: LD_STRING getStreamItemsFromMission("
11168: PUSH
11169: LD_VAR 0 3
11173: STR
11174: PUSH
11175: LD_STRING ","
11177: STR
11178: PUSH
11179: LD_VAR 0 4
11183: STR
11184: PUSH
11185: LD_STRING ")
11187: STR
11188: PPUSH
11189: CALL_OW 559
// end else
11193: GO 11202
// ToLua ( getStreamItemsFromMission("","") ) ;
11195: LD_STRING getStreamItemsFromMission("","")
11197: PPUSH
11198: CALL_OW 559
// end ;
11202: LD_VAR 0 1
11206: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11207: LD_EXP 24
11211: PUSH
11212: LD_EXP 29
11216: AND
11217: IFFALSE 11341
11219: GO 11221
11221: DISABLE
11222: LD_INT 0
11224: PPUSH
11225: PPUSH
// begin enable ;
11226: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11227: LD_ADDR_VAR 0 2
11231: PUSH
11232: LD_INT 22
11234: PUSH
11235: LD_OWVAR 2
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PUSH
11244: LD_INT 2
11246: PUSH
11247: LD_INT 34
11249: PUSH
11250: LD_INT 7
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PUSH
11257: LD_INT 34
11259: PUSH
11260: LD_INT 45
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PUSH
11267: LD_INT 34
11269: PUSH
11270: LD_INT 28
11272: PUSH
11273: EMPTY
11274: LIST
11275: LIST
11276: PUSH
11277: LD_INT 34
11279: PUSH
11280: LD_INT 47
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PPUSH
11298: CALL_OW 69
11302: ST_TO_ADDR
// if not tmp then
11303: LD_VAR 0 2
11307: NOT
11308: IFFALSE 11312
// exit ;
11310: GO 11341
// for i in tmp do
11312: LD_ADDR_VAR 0 1
11316: PUSH
11317: LD_VAR 0 2
11321: PUSH
11322: FOR_IN
11323: IFFALSE 11339
// begin SetLives ( i , 0 ) ;
11325: LD_VAR 0 1
11329: PPUSH
11330: LD_INT 0
11332: PPUSH
11333: CALL_OW 234
// end ;
11337: GO 11322
11339: POP
11340: POP
// end ;
11341: PPOPN 2
11343: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11344: LD_EXP 24
11348: PUSH
11349: LD_EXP 30
11353: AND
11354: IFFALSE 11438
11356: GO 11358
11358: DISABLE
11359: LD_INT 0
11361: PPUSH
11362: PPUSH
// begin enable ;
11363: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11364: LD_ADDR_VAR 0 2
11368: PUSH
11369: LD_INT 22
11371: PUSH
11372: LD_OWVAR 2
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: PUSH
11381: LD_INT 32
11383: PUSH
11384: LD_INT 3
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: PPUSH
11395: CALL_OW 69
11399: ST_TO_ADDR
// if not tmp then
11400: LD_VAR 0 2
11404: NOT
11405: IFFALSE 11409
// exit ;
11407: GO 11438
// for i in tmp do
11409: LD_ADDR_VAR 0 1
11413: PUSH
11414: LD_VAR 0 2
11418: PUSH
11419: FOR_IN
11420: IFFALSE 11436
// begin SetLives ( i , 0 ) ;
11422: LD_VAR 0 1
11426: PPUSH
11427: LD_INT 0
11429: PPUSH
11430: CALL_OW 234
// end ;
11434: GO 11419
11436: POP
11437: POP
// end ;
11438: PPOPN 2
11440: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11441: LD_EXP 24
11445: PUSH
11446: LD_EXP 27
11450: AND
11451: IFFALSE 11544
11453: GO 11455
11455: DISABLE
11456: LD_INT 0
11458: PPUSH
// begin enable ;
11459: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11460: LD_ADDR_VAR 0 1
11464: PUSH
11465: LD_INT 22
11467: PUSH
11468: LD_OWVAR 2
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: PUSH
11477: LD_INT 2
11479: PUSH
11480: LD_INT 25
11482: PUSH
11483: LD_INT 5
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PUSH
11490: LD_INT 25
11492: PUSH
11493: LD_INT 9
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: PUSH
11500: LD_INT 25
11502: PUSH
11503: LD_INT 8
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: PPUSH
11520: CALL_OW 69
11524: PUSH
11525: FOR_IN
11526: IFFALSE 11542
// begin SetClass ( i , 1 ) ;
11528: LD_VAR 0 1
11532: PPUSH
11533: LD_INT 1
11535: PPUSH
11536: CALL_OW 336
// end ;
11540: GO 11525
11542: POP
11543: POP
// end ;
11544: PPOPN 1
11546: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11547: LD_EXP 24
11551: PUSH
11552: LD_EXP 28
11556: AND
11557: PUSH
11558: LD_OWVAR 65
11562: PUSH
11563: LD_INT 7
11565: LESS
11566: AND
11567: IFFALSE 11581
11569: GO 11571
11571: DISABLE
// begin enable ;
11572: ENABLE
// game_speed := 7 ;
11573: LD_ADDR_OWVAR 65
11577: PUSH
11578: LD_INT 7
11580: ST_TO_ADDR
// end ;
11581: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11582: LD_EXP 24
11586: PUSH
11587: LD_EXP 31
11591: AND
11592: IFFALSE 11794
11594: GO 11596
11596: DISABLE
11597: LD_INT 0
11599: PPUSH
11600: PPUSH
11601: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11602: LD_ADDR_VAR 0 3
11606: PUSH
11607: LD_INT 81
11609: PUSH
11610: LD_OWVAR 2
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: PUSH
11619: LD_INT 21
11621: PUSH
11622: LD_INT 1
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PUSH
11629: EMPTY
11630: LIST
11631: LIST
11632: PPUSH
11633: CALL_OW 69
11637: ST_TO_ADDR
// if not tmp then
11638: LD_VAR 0 3
11642: NOT
11643: IFFALSE 11647
// exit ;
11645: GO 11794
// if tmp > 5 then
11647: LD_VAR 0 3
11651: PUSH
11652: LD_INT 5
11654: GREATER
11655: IFFALSE 11667
// k := 5 else
11657: LD_ADDR_VAR 0 2
11661: PUSH
11662: LD_INT 5
11664: ST_TO_ADDR
11665: GO 11677
// k := tmp ;
11667: LD_ADDR_VAR 0 2
11671: PUSH
11672: LD_VAR 0 3
11676: ST_TO_ADDR
// for i := 1 to k do
11677: LD_ADDR_VAR 0 1
11681: PUSH
11682: DOUBLE
11683: LD_INT 1
11685: DEC
11686: ST_TO_ADDR
11687: LD_VAR 0 2
11691: PUSH
11692: FOR_TO
11693: IFFALSE 11792
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11695: LD_VAR 0 3
11699: PUSH
11700: LD_VAR 0 1
11704: ARRAY
11705: PPUSH
11706: LD_VAR 0 1
11710: PUSH
11711: LD_INT 4
11713: MOD
11714: PUSH
11715: LD_INT 1
11717: PLUS
11718: PPUSH
11719: CALL_OW 259
11723: PUSH
11724: LD_INT 10
11726: LESS
11727: IFFALSE 11790
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11729: LD_VAR 0 3
11733: PUSH
11734: LD_VAR 0 1
11738: ARRAY
11739: PPUSH
11740: LD_VAR 0 1
11744: PUSH
11745: LD_INT 4
11747: MOD
11748: PUSH
11749: LD_INT 1
11751: PLUS
11752: PPUSH
11753: LD_VAR 0 3
11757: PUSH
11758: LD_VAR 0 1
11762: ARRAY
11763: PPUSH
11764: LD_VAR 0 1
11768: PUSH
11769: LD_INT 4
11771: MOD
11772: PUSH
11773: LD_INT 1
11775: PLUS
11776: PPUSH
11777: CALL_OW 259
11781: PUSH
11782: LD_INT 1
11784: PLUS
11785: PPUSH
11786: CALL_OW 237
11790: GO 11692
11792: POP
11793: POP
// end ;
11794: PPOPN 3
11796: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11797: LD_EXP 24
11801: PUSH
11802: LD_EXP 32
11806: AND
11807: IFFALSE 11827
11809: GO 11811
11811: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11812: LD_INT 4
11814: PPUSH
11815: LD_OWVAR 2
11819: PPUSH
11820: LD_INT 0
11822: PPUSH
11823: CALL_OW 324
11827: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11828: LD_EXP 24
11832: PUSH
11833: LD_EXP 61
11837: AND
11838: IFFALSE 11858
11840: GO 11842
11842: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11843: LD_INT 19
11845: PPUSH
11846: LD_OWVAR 2
11850: PPUSH
11851: LD_INT 0
11853: PPUSH
11854: CALL_OW 324
11858: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11859: LD_EXP 24
11863: PUSH
11864: LD_EXP 33
11868: AND
11869: IFFALSE 11971
11871: GO 11873
11873: DISABLE
11874: LD_INT 0
11876: PPUSH
11877: PPUSH
// begin enable ;
11878: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11879: LD_ADDR_VAR 0 2
11883: PUSH
11884: LD_INT 22
11886: PUSH
11887: LD_OWVAR 2
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PUSH
11896: LD_INT 2
11898: PUSH
11899: LD_INT 34
11901: PUSH
11902: LD_INT 11
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: LD_INT 34
11911: PUSH
11912: LD_INT 30
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: LIST
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PPUSH
11928: CALL_OW 69
11932: ST_TO_ADDR
// if not tmp then
11933: LD_VAR 0 2
11937: NOT
11938: IFFALSE 11942
// exit ;
11940: GO 11971
// for i in tmp do
11942: LD_ADDR_VAR 0 1
11946: PUSH
11947: LD_VAR 0 2
11951: PUSH
11952: FOR_IN
11953: IFFALSE 11969
// begin SetLives ( i , 0 ) ;
11955: LD_VAR 0 1
11959: PPUSH
11960: LD_INT 0
11962: PPUSH
11963: CALL_OW 234
// end ;
11967: GO 11952
11969: POP
11970: POP
// end ;
11971: PPOPN 2
11973: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11974: LD_EXP 24
11978: PUSH
11979: LD_EXP 34
11983: AND
11984: IFFALSE 12004
11986: GO 11988
11988: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11989: LD_INT 32
11991: PPUSH
11992: LD_OWVAR 2
11996: PPUSH
11997: LD_INT 0
11999: PPUSH
12000: CALL_OW 324
12004: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12005: LD_EXP 24
12009: PUSH
12010: LD_EXP 35
12014: AND
12015: IFFALSE 12196
12017: GO 12019
12019: DISABLE
12020: LD_INT 0
12022: PPUSH
12023: PPUSH
12024: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12025: LD_ADDR_VAR 0 2
12029: PUSH
12030: LD_INT 22
12032: PUSH
12033: LD_OWVAR 2
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: PUSH
12042: LD_INT 33
12044: PUSH
12045: LD_INT 3
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: PPUSH
12056: CALL_OW 69
12060: ST_TO_ADDR
// if not tmp then
12061: LD_VAR 0 2
12065: NOT
12066: IFFALSE 12070
// exit ;
12068: GO 12196
// side := 0 ;
12070: LD_ADDR_VAR 0 3
12074: PUSH
12075: LD_INT 0
12077: ST_TO_ADDR
// for i := 1 to 8 do
12078: LD_ADDR_VAR 0 1
12082: PUSH
12083: DOUBLE
12084: LD_INT 1
12086: DEC
12087: ST_TO_ADDR
12088: LD_INT 8
12090: PUSH
12091: FOR_TO
12092: IFFALSE 12140
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12094: LD_OWVAR 2
12098: PUSH
12099: LD_VAR 0 1
12103: NONEQUAL
12104: PUSH
12105: LD_OWVAR 2
12109: PPUSH
12110: LD_VAR 0 1
12114: PPUSH
12115: CALL_OW 81
12119: PUSH
12120: LD_INT 2
12122: EQUAL
12123: AND
12124: IFFALSE 12138
// begin side := i ;
12126: LD_ADDR_VAR 0 3
12130: PUSH
12131: LD_VAR 0 1
12135: ST_TO_ADDR
// break ;
12136: GO 12140
// end ;
12138: GO 12091
12140: POP
12141: POP
// if not side then
12142: LD_VAR 0 3
12146: NOT
12147: IFFALSE 12151
// exit ;
12149: GO 12196
// for i := 1 to tmp do
12151: LD_ADDR_VAR 0 1
12155: PUSH
12156: DOUBLE
12157: LD_INT 1
12159: DEC
12160: ST_TO_ADDR
12161: LD_VAR 0 2
12165: PUSH
12166: FOR_TO
12167: IFFALSE 12194
// if Prob ( 60 ) then
12169: LD_INT 60
12171: PPUSH
12172: CALL_OW 13
12176: IFFALSE 12192
// SetSide ( i , side ) ;
12178: LD_VAR 0 1
12182: PPUSH
12183: LD_VAR 0 3
12187: PPUSH
12188: CALL_OW 235
12192: GO 12166
12194: POP
12195: POP
// end ;
12196: PPOPN 3
12198: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12199: LD_EXP 24
12203: PUSH
12204: LD_EXP 37
12208: AND
12209: IFFALSE 12328
12211: GO 12213
12213: DISABLE
12214: LD_INT 0
12216: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12217: LD_ADDR_VAR 0 1
12221: PUSH
12222: LD_INT 22
12224: PUSH
12225: LD_OWVAR 2
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PUSH
12234: LD_INT 21
12236: PUSH
12237: LD_INT 1
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PUSH
12244: LD_INT 3
12246: PUSH
12247: LD_INT 23
12249: PUSH
12250: LD_INT 0
12252: PUSH
12253: EMPTY
12254: LIST
12255: LIST
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: LIST
12265: PPUSH
12266: CALL_OW 69
12270: PUSH
12271: FOR_IN
12272: IFFALSE 12326
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12274: LD_VAR 0 1
12278: PPUSH
12279: CALL_OW 257
12283: PUSH
12284: LD_INT 1
12286: PUSH
12287: LD_INT 2
12289: PUSH
12290: LD_INT 3
12292: PUSH
12293: LD_INT 4
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: IN
12302: IFFALSE 12324
// SetClass ( un , rand ( 1 , 4 ) ) ;
12304: LD_VAR 0 1
12308: PPUSH
12309: LD_INT 1
12311: PPUSH
12312: LD_INT 4
12314: PPUSH
12315: CALL_OW 12
12319: PPUSH
12320: CALL_OW 336
12324: GO 12271
12326: POP
12327: POP
// end ;
12328: PPOPN 1
12330: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12331: LD_EXP 24
12335: PUSH
12336: LD_EXP 36
12340: AND
12341: IFFALSE 12420
12343: GO 12345
12345: DISABLE
12346: LD_INT 0
12348: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12349: LD_ADDR_VAR 0 1
12353: PUSH
12354: LD_INT 22
12356: PUSH
12357: LD_OWVAR 2
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: PUSH
12366: LD_INT 21
12368: PUSH
12369: LD_INT 3
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: PPUSH
12380: CALL_OW 69
12384: ST_TO_ADDR
// if not tmp then
12385: LD_VAR 0 1
12389: NOT
12390: IFFALSE 12394
// exit ;
12392: GO 12420
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12394: LD_VAR 0 1
12398: PUSH
12399: LD_INT 1
12401: PPUSH
12402: LD_VAR 0 1
12406: PPUSH
12407: CALL_OW 12
12411: ARRAY
12412: PPUSH
12413: LD_INT 100
12415: PPUSH
12416: CALL_OW 234
// end ;
12420: PPOPN 1
12422: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12423: LD_EXP 24
12427: PUSH
12428: LD_EXP 38
12432: AND
12433: IFFALSE 12531
12435: GO 12437
12437: DISABLE
12438: LD_INT 0
12440: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12441: LD_ADDR_VAR 0 1
12445: PUSH
12446: LD_INT 22
12448: PUSH
12449: LD_OWVAR 2
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: PUSH
12458: LD_INT 21
12460: PUSH
12461: LD_INT 1
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: PPUSH
12472: CALL_OW 69
12476: ST_TO_ADDR
// if not tmp then
12477: LD_VAR 0 1
12481: NOT
12482: IFFALSE 12486
// exit ;
12484: GO 12531
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12486: LD_VAR 0 1
12490: PUSH
12491: LD_INT 1
12493: PPUSH
12494: LD_VAR 0 1
12498: PPUSH
12499: CALL_OW 12
12503: ARRAY
12504: PPUSH
12505: LD_INT 1
12507: PPUSH
12508: LD_INT 4
12510: PPUSH
12511: CALL_OW 12
12515: PPUSH
12516: LD_INT 3000
12518: PPUSH
12519: LD_INT 9000
12521: PPUSH
12522: CALL_OW 12
12526: PPUSH
12527: CALL_OW 492
// end ;
12531: PPOPN 1
12533: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12534: LD_EXP 24
12538: PUSH
12539: LD_EXP 39
12543: AND
12544: IFFALSE 12564
12546: GO 12548
12548: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12549: LD_INT 1
12551: PPUSH
12552: LD_OWVAR 2
12556: PPUSH
12557: LD_INT 0
12559: PPUSH
12560: CALL_OW 324
12564: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12565: LD_EXP 24
12569: PUSH
12570: LD_EXP 40
12574: AND
12575: IFFALSE 12658
12577: GO 12579
12579: DISABLE
12580: LD_INT 0
12582: PPUSH
12583: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12584: LD_ADDR_VAR 0 2
12588: PUSH
12589: LD_INT 22
12591: PUSH
12592: LD_OWVAR 2
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: PUSH
12601: LD_INT 21
12603: PUSH
12604: LD_INT 3
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: PPUSH
12615: CALL_OW 69
12619: ST_TO_ADDR
// if not tmp then
12620: LD_VAR 0 2
12624: NOT
12625: IFFALSE 12629
// exit ;
12627: GO 12658
// for i in tmp do
12629: LD_ADDR_VAR 0 1
12633: PUSH
12634: LD_VAR 0 2
12638: PUSH
12639: FOR_IN
12640: IFFALSE 12656
// SetBLevel ( i , 10 ) ;
12642: LD_VAR 0 1
12646: PPUSH
12647: LD_INT 10
12649: PPUSH
12650: CALL_OW 241
12654: GO 12639
12656: POP
12657: POP
// end ;
12658: PPOPN 2
12660: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12661: LD_EXP 24
12665: PUSH
12666: LD_EXP 41
12670: AND
12671: IFFALSE 12782
12673: GO 12675
12675: DISABLE
12676: LD_INT 0
12678: PPUSH
12679: PPUSH
12680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12681: LD_ADDR_VAR 0 3
12685: PUSH
12686: LD_INT 22
12688: PUSH
12689: LD_OWVAR 2
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: PUSH
12698: LD_INT 25
12700: PUSH
12701: LD_INT 1
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: PPUSH
12712: CALL_OW 69
12716: ST_TO_ADDR
// if not tmp then
12717: LD_VAR 0 3
12721: NOT
12722: IFFALSE 12726
// exit ;
12724: GO 12782
// un := tmp [ rand ( 1 , tmp ) ] ;
12726: LD_ADDR_VAR 0 2
12730: PUSH
12731: LD_VAR 0 3
12735: PUSH
12736: LD_INT 1
12738: PPUSH
12739: LD_VAR 0 3
12743: PPUSH
12744: CALL_OW 12
12748: ARRAY
12749: ST_TO_ADDR
// if Crawls ( un ) then
12750: LD_VAR 0 2
12754: PPUSH
12755: CALL_OW 318
12759: IFFALSE 12770
// ComWalk ( un ) ;
12761: LD_VAR 0 2
12765: PPUSH
12766: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12770: LD_VAR 0 2
12774: PPUSH
12775: LD_INT 5
12777: PPUSH
12778: CALL_OW 336
// end ;
12782: PPOPN 3
12784: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12785: LD_EXP 24
12789: PUSH
12790: LD_EXP 42
12794: AND
12795: PUSH
12796: LD_OWVAR 67
12800: PUSH
12801: LD_INT 4
12803: LESS
12804: AND
12805: IFFALSE 12824
12807: GO 12809
12809: DISABLE
// begin Difficulty := Difficulty + 1 ;
12810: LD_ADDR_OWVAR 67
12814: PUSH
12815: LD_OWVAR 67
12819: PUSH
12820: LD_INT 1
12822: PLUS
12823: ST_TO_ADDR
// end ;
12824: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12825: LD_EXP 24
12829: PUSH
12830: LD_EXP 43
12834: AND
12835: IFFALSE 12938
12837: GO 12839
12839: DISABLE
12840: LD_INT 0
12842: PPUSH
// begin for i := 1 to 5 do
12843: LD_ADDR_VAR 0 1
12847: PUSH
12848: DOUBLE
12849: LD_INT 1
12851: DEC
12852: ST_TO_ADDR
12853: LD_INT 5
12855: PUSH
12856: FOR_TO
12857: IFFALSE 12936
// begin uc_nation := nation_nature ;
12859: LD_ADDR_OWVAR 21
12863: PUSH
12864: LD_INT 0
12866: ST_TO_ADDR
// uc_side := 0 ;
12867: LD_ADDR_OWVAR 20
12871: PUSH
12872: LD_INT 0
12874: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12875: LD_ADDR_OWVAR 29
12879: PUSH
12880: LD_INT 12
12882: PUSH
12883: LD_INT 12
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: ST_TO_ADDR
// hc_agressivity := 20 ;
12890: LD_ADDR_OWVAR 35
12894: PUSH
12895: LD_INT 20
12897: ST_TO_ADDR
// hc_class := class_tiger ;
12898: LD_ADDR_OWVAR 28
12902: PUSH
12903: LD_INT 14
12905: ST_TO_ADDR
// hc_gallery :=  ;
12906: LD_ADDR_OWVAR 33
12910: PUSH
12911: LD_STRING 
12913: ST_TO_ADDR
// hc_name :=  ;
12914: LD_ADDR_OWVAR 26
12918: PUSH
12919: LD_STRING 
12921: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12922: CALL_OW 44
12926: PPUSH
12927: LD_INT 0
12929: PPUSH
12930: CALL_OW 51
// end ;
12934: GO 12856
12936: POP
12937: POP
// end ;
12938: PPOPN 1
12940: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12941: LD_EXP 24
12945: PUSH
12946: LD_EXP 44
12950: AND
12951: IFFALSE 12960
12953: GO 12955
12955: DISABLE
// StreamSibBomb ;
12956: CALL 12961 0 0
12960: END
// export function StreamSibBomb ; var i , x , y ; begin
12961: LD_INT 0
12963: PPUSH
12964: PPUSH
12965: PPUSH
12966: PPUSH
// result := false ;
12967: LD_ADDR_VAR 0 1
12971: PUSH
12972: LD_INT 0
12974: ST_TO_ADDR
// for i := 1 to 16 do
12975: LD_ADDR_VAR 0 2
12979: PUSH
12980: DOUBLE
12981: LD_INT 1
12983: DEC
12984: ST_TO_ADDR
12985: LD_INT 16
12987: PUSH
12988: FOR_TO
12989: IFFALSE 13188
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12991: LD_ADDR_VAR 0 3
12995: PUSH
12996: LD_INT 10
12998: PUSH
12999: LD_INT 20
13001: PUSH
13002: LD_INT 30
13004: PUSH
13005: LD_INT 40
13007: PUSH
13008: LD_INT 50
13010: PUSH
13011: LD_INT 60
13013: PUSH
13014: LD_INT 70
13016: PUSH
13017: LD_INT 80
13019: PUSH
13020: LD_INT 90
13022: PUSH
13023: LD_INT 100
13025: PUSH
13026: LD_INT 110
13028: PUSH
13029: LD_INT 120
13031: PUSH
13032: LD_INT 130
13034: PUSH
13035: LD_INT 140
13037: PUSH
13038: LD_INT 150
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: PUSH
13058: LD_INT 1
13060: PPUSH
13061: LD_INT 15
13063: PPUSH
13064: CALL_OW 12
13068: ARRAY
13069: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13070: LD_ADDR_VAR 0 4
13074: PUSH
13075: LD_INT 10
13077: PUSH
13078: LD_INT 20
13080: PUSH
13081: LD_INT 30
13083: PUSH
13084: LD_INT 40
13086: PUSH
13087: LD_INT 50
13089: PUSH
13090: LD_INT 60
13092: PUSH
13093: LD_INT 70
13095: PUSH
13096: LD_INT 80
13098: PUSH
13099: LD_INT 90
13101: PUSH
13102: LD_INT 100
13104: PUSH
13105: LD_INT 110
13107: PUSH
13108: LD_INT 120
13110: PUSH
13111: LD_INT 130
13113: PUSH
13114: LD_INT 140
13116: PUSH
13117: LD_INT 150
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: PUSH
13137: LD_INT 1
13139: PPUSH
13140: LD_INT 15
13142: PPUSH
13143: CALL_OW 12
13147: ARRAY
13148: ST_TO_ADDR
// if ValidHex ( x , y ) then
13149: LD_VAR 0 3
13153: PPUSH
13154: LD_VAR 0 4
13158: PPUSH
13159: CALL_OW 488
13163: IFFALSE 13186
// begin result := [ x , y ] ;
13165: LD_ADDR_VAR 0 1
13169: PUSH
13170: LD_VAR 0 3
13174: PUSH
13175: LD_VAR 0 4
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: ST_TO_ADDR
// break ;
13184: GO 13188
// end ; end ;
13186: GO 12988
13188: POP
13189: POP
// if result then
13190: LD_VAR 0 1
13194: IFFALSE 13254
// begin ToLua ( playSibBomb() ) ;
13196: LD_STRING playSibBomb()
13198: PPUSH
13199: CALL_OW 559
// wait ( 0 0$14 ) ;
13203: LD_INT 490
13205: PPUSH
13206: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13210: LD_VAR 0 1
13214: PUSH
13215: LD_INT 1
13217: ARRAY
13218: PPUSH
13219: LD_VAR 0 1
13223: PUSH
13224: LD_INT 2
13226: ARRAY
13227: PPUSH
13228: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13232: LD_VAR 0 1
13236: PUSH
13237: LD_INT 1
13239: ARRAY
13240: PPUSH
13241: LD_VAR 0 1
13245: PUSH
13246: LD_INT 2
13248: ARRAY
13249: PPUSH
13250: CALL_OW 429
// end ; end ;
13254: LD_VAR 0 1
13258: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13259: LD_EXP 24
13263: PUSH
13264: LD_EXP 46
13268: AND
13269: IFFALSE 13281
13271: GO 13273
13273: DISABLE
// YouLost (  ) ;
13274: LD_STRING 
13276: PPUSH
13277: CALL_OW 104
13281: END
// every 0 0$1 trigger StreamModeActive and sFog do
13282: LD_EXP 24
13286: PUSH
13287: LD_EXP 45
13291: AND
13292: IFFALSE 13306
13294: GO 13296
13296: DISABLE
// FogOff ( your_side ) ;
13297: LD_OWVAR 2
13301: PPUSH
13302: CALL_OW 344
13306: END
// every 0 0$1 trigger StreamModeActive and sSun do
13307: LD_EXP 24
13311: PUSH
13312: LD_EXP 47
13316: AND
13317: IFFALSE 13345
13319: GO 13321
13321: DISABLE
// begin solar_recharge_percent := 0 ;
13322: LD_ADDR_OWVAR 79
13326: PUSH
13327: LD_INT 0
13329: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13330: LD_INT 10500
13332: PPUSH
13333: CALL_OW 67
// solar_recharge_percent := 100 ;
13337: LD_ADDR_OWVAR 79
13341: PUSH
13342: LD_INT 100
13344: ST_TO_ADDR
// end ;
13345: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13346: LD_EXP 24
13350: PUSH
13351: LD_EXP 48
13355: AND
13356: IFFALSE 13595
13358: GO 13360
13360: DISABLE
13361: LD_INT 0
13363: PPUSH
13364: PPUSH
13365: PPUSH
// begin tmp := [ ] ;
13366: LD_ADDR_VAR 0 3
13370: PUSH
13371: EMPTY
13372: ST_TO_ADDR
// for i := 1 to 6 do
13373: LD_ADDR_VAR 0 1
13377: PUSH
13378: DOUBLE
13379: LD_INT 1
13381: DEC
13382: ST_TO_ADDR
13383: LD_INT 6
13385: PUSH
13386: FOR_TO
13387: IFFALSE 13492
// begin uc_nation := nation_nature ;
13389: LD_ADDR_OWVAR 21
13393: PUSH
13394: LD_INT 0
13396: ST_TO_ADDR
// uc_side := 0 ;
13397: LD_ADDR_OWVAR 20
13401: PUSH
13402: LD_INT 0
13404: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13405: LD_ADDR_OWVAR 29
13409: PUSH
13410: LD_INT 12
13412: PUSH
13413: LD_INT 12
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: ST_TO_ADDR
// hc_agressivity := 20 ;
13420: LD_ADDR_OWVAR 35
13424: PUSH
13425: LD_INT 20
13427: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13428: LD_ADDR_OWVAR 28
13432: PUSH
13433: LD_INT 17
13435: ST_TO_ADDR
// hc_gallery :=  ;
13436: LD_ADDR_OWVAR 33
13440: PUSH
13441: LD_STRING 
13443: ST_TO_ADDR
// hc_name :=  ;
13444: LD_ADDR_OWVAR 26
13448: PUSH
13449: LD_STRING 
13451: ST_TO_ADDR
// un := CreateHuman ;
13452: LD_ADDR_VAR 0 2
13456: PUSH
13457: CALL_OW 44
13461: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13462: LD_VAR 0 2
13466: PPUSH
13467: LD_INT 1
13469: PPUSH
13470: CALL_OW 51
// tmp := tmp ^ un ;
13474: LD_ADDR_VAR 0 3
13478: PUSH
13479: LD_VAR 0 3
13483: PUSH
13484: LD_VAR 0 2
13488: ADD
13489: ST_TO_ADDR
// end ;
13490: GO 13386
13492: POP
13493: POP
// repeat wait ( 0 0$1 ) ;
13494: LD_INT 35
13496: PPUSH
13497: CALL_OW 67
// for un in tmp do
13501: LD_ADDR_VAR 0 2
13505: PUSH
13506: LD_VAR 0 3
13510: PUSH
13511: FOR_IN
13512: IFFALSE 13586
// begin if IsDead ( un ) then
13514: LD_VAR 0 2
13518: PPUSH
13519: CALL_OW 301
13523: IFFALSE 13543
// begin tmp := tmp diff un ;
13525: LD_ADDR_VAR 0 3
13529: PUSH
13530: LD_VAR 0 3
13534: PUSH
13535: LD_VAR 0 2
13539: DIFF
13540: ST_TO_ADDR
// continue ;
13541: GO 13511
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13543: LD_VAR 0 2
13547: PPUSH
13548: LD_INT 3
13550: PUSH
13551: LD_INT 22
13553: PUSH
13554: LD_INT 0
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PPUSH
13565: CALL_OW 69
13569: PPUSH
13570: LD_VAR 0 2
13574: PPUSH
13575: CALL_OW 74
13579: PPUSH
13580: CALL_OW 115
// end ;
13584: GO 13511
13586: POP
13587: POP
// until not tmp ;
13588: LD_VAR 0 3
13592: NOT
13593: IFFALSE 13494
// end ;
13595: PPOPN 3
13597: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13598: LD_EXP 24
13602: PUSH
13603: LD_EXP 49
13607: AND
13608: IFFALSE 13662
13610: GO 13612
13612: DISABLE
// begin ToLua ( displayTroll(); ) ;
13613: LD_STRING displayTroll();
13615: PPUSH
13616: CALL_OW 559
// wait ( 3 3$00 ) ;
13620: LD_INT 6300
13622: PPUSH
13623: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13627: LD_STRING hideTroll();
13629: PPUSH
13630: CALL_OW 559
// wait ( 1 1$00 ) ;
13634: LD_INT 2100
13636: PPUSH
13637: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13641: LD_STRING displayTroll();
13643: PPUSH
13644: CALL_OW 559
// wait ( 1 1$00 ) ;
13648: LD_INT 2100
13650: PPUSH
13651: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13655: LD_STRING hideTroll();
13657: PPUSH
13658: CALL_OW 559
// end ;
13662: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13663: LD_EXP 24
13667: PUSH
13668: LD_EXP 50
13672: AND
13673: IFFALSE 13736
13675: GO 13677
13677: DISABLE
13678: LD_INT 0
13680: PPUSH
// begin p := 0 ;
13681: LD_ADDR_VAR 0 1
13685: PUSH
13686: LD_INT 0
13688: ST_TO_ADDR
// repeat game_speed := 1 ;
13689: LD_ADDR_OWVAR 65
13693: PUSH
13694: LD_INT 1
13696: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13697: LD_INT 35
13699: PPUSH
13700: CALL_OW 67
// p := p + 1 ;
13704: LD_ADDR_VAR 0 1
13708: PUSH
13709: LD_VAR 0 1
13713: PUSH
13714: LD_INT 1
13716: PLUS
13717: ST_TO_ADDR
// until p >= 60 ;
13718: LD_VAR 0 1
13722: PUSH
13723: LD_INT 60
13725: GREATEREQUAL
13726: IFFALSE 13689
// game_speed := 4 ;
13728: LD_ADDR_OWVAR 65
13732: PUSH
13733: LD_INT 4
13735: ST_TO_ADDR
// end ;
13736: PPOPN 1
13738: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13739: LD_EXP 24
13743: PUSH
13744: LD_EXP 51
13748: AND
13749: IFFALSE 13895
13751: GO 13753
13753: DISABLE
13754: LD_INT 0
13756: PPUSH
13757: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13758: LD_ADDR_VAR 0 1
13762: PUSH
13763: LD_INT 22
13765: PUSH
13766: LD_OWVAR 2
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: PUSH
13775: LD_INT 2
13777: PUSH
13778: LD_INT 30
13780: PUSH
13781: LD_INT 0
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: PUSH
13788: LD_INT 30
13790: PUSH
13791: LD_INT 1
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: LIST
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: PPUSH
13807: CALL_OW 69
13811: ST_TO_ADDR
// if not depot then
13812: LD_VAR 0 1
13816: NOT
13817: IFFALSE 13821
// exit ;
13819: GO 13895
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13821: LD_ADDR_VAR 0 2
13825: PUSH
13826: LD_VAR 0 1
13830: PUSH
13831: LD_INT 1
13833: PPUSH
13834: LD_VAR 0 1
13838: PPUSH
13839: CALL_OW 12
13843: ARRAY
13844: PPUSH
13845: CALL_OW 274
13849: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13850: LD_VAR 0 2
13854: PPUSH
13855: LD_INT 1
13857: PPUSH
13858: LD_INT 0
13860: PPUSH
13861: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13865: LD_VAR 0 2
13869: PPUSH
13870: LD_INT 2
13872: PPUSH
13873: LD_INT 0
13875: PPUSH
13876: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13880: LD_VAR 0 2
13884: PPUSH
13885: LD_INT 3
13887: PPUSH
13888: LD_INT 0
13890: PPUSH
13891: CALL_OW 277
// end ;
13895: PPOPN 2
13897: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13898: LD_EXP 24
13902: PUSH
13903: LD_EXP 52
13907: AND
13908: IFFALSE 14005
13910: GO 13912
13912: DISABLE
13913: LD_INT 0
13915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13916: LD_ADDR_VAR 0 1
13920: PUSH
13921: LD_INT 22
13923: PUSH
13924: LD_OWVAR 2
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: PUSH
13933: LD_INT 21
13935: PUSH
13936: LD_INT 1
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: PUSH
13943: LD_INT 3
13945: PUSH
13946: LD_INT 23
13948: PUSH
13949: LD_INT 0
13951: PUSH
13952: EMPTY
13953: LIST
13954: LIST
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: LIST
13964: PPUSH
13965: CALL_OW 69
13969: ST_TO_ADDR
// if not tmp then
13970: LD_VAR 0 1
13974: NOT
13975: IFFALSE 13979
// exit ;
13977: GO 14005
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13979: LD_VAR 0 1
13983: PUSH
13984: LD_INT 1
13986: PPUSH
13987: LD_VAR 0 1
13991: PPUSH
13992: CALL_OW 12
13996: ARRAY
13997: PPUSH
13998: LD_INT 200
14000: PPUSH
14001: CALL_OW 234
// end ;
14005: PPOPN 1
14007: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14008: LD_EXP 24
14012: PUSH
14013: LD_EXP 53
14017: AND
14018: IFFALSE 14097
14020: GO 14022
14022: DISABLE
14023: LD_INT 0
14025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14026: LD_ADDR_VAR 0 1
14030: PUSH
14031: LD_INT 22
14033: PUSH
14034: LD_OWVAR 2
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: PUSH
14043: LD_INT 21
14045: PUSH
14046: LD_INT 2
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: PPUSH
14057: CALL_OW 69
14061: ST_TO_ADDR
// if not tmp then
14062: LD_VAR 0 1
14066: NOT
14067: IFFALSE 14071
// exit ;
14069: GO 14097
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14071: LD_VAR 0 1
14075: PUSH
14076: LD_INT 1
14078: PPUSH
14079: LD_VAR 0 1
14083: PPUSH
14084: CALL_OW 12
14088: ARRAY
14089: PPUSH
14090: LD_INT 60
14092: PPUSH
14093: CALL_OW 234
// end ;
14097: PPOPN 1
14099: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14100: LD_EXP 24
14104: PUSH
14105: LD_EXP 54
14109: AND
14110: IFFALSE 14209
14112: GO 14114
14114: DISABLE
14115: LD_INT 0
14117: PPUSH
14118: PPUSH
// begin enable ;
14119: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14120: LD_ADDR_VAR 0 1
14124: PUSH
14125: LD_INT 22
14127: PUSH
14128: LD_OWVAR 2
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: PUSH
14137: LD_INT 61
14139: PUSH
14140: EMPTY
14141: LIST
14142: PUSH
14143: LD_INT 33
14145: PUSH
14146: LD_INT 2
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: LIST
14157: PPUSH
14158: CALL_OW 69
14162: ST_TO_ADDR
// if not tmp then
14163: LD_VAR 0 1
14167: NOT
14168: IFFALSE 14172
// exit ;
14170: GO 14209
// for i in tmp do
14172: LD_ADDR_VAR 0 2
14176: PUSH
14177: LD_VAR 0 1
14181: PUSH
14182: FOR_IN
14183: IFFALSE 14207
// if IsControledBy ( i ) then
14185: LD_VAR 0 2
14189: PPUSH
14190: CALL_OW 312
14194: IFFALSE 14205
// ComUnlink ( i ) ;
14196: LD_VAR 0 2
14200: PPUSH
14201: CALL_OW 136
14205: GO 14182
14207: POP
14208: POP
// end ;
14209: PPOPN 2
14211: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14212: LD_EXP 24
14216: PUSH
14217: LD_EXP 55
14221: AND
14222: IFFALSE 14362
14224: GO 14226
14226: DISABLE
14227: LD_INT 0
14229: PPUSH
14230: PPUSH
// begin ToLua ( displayPowell(); ) ;
14231: LD_STRING displayPowell();
14233: PPUSH
14234: CALL_OW 559
// uc_side := 0 ;
14238: LD_ADDR_OWVAR 20
14242: PUSH
14243: LD_INT 0
14245: ST_TO_ADDR
// uc_nation := 2 ;
14246: LD_ADDR_OWVAR 21
14250: PUSH
14251: LD_INT 2
14253: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14254: LD_ADDR_OWVAR 37
14258: PUSH
14259: LD_INT 14
14261: ST_TO_ADDR
// vc_engine := engine_siberite ;
14262: LD_ADDR_OWVAR 39
14266: PUSH
14267: LD_INT 3
14269: ST_TO_ADDR
// vc_control := control_apeman ;
14270: LD_ADDR_OWVAR 38
14274: PUSH
14275: LD_INT 5
14277: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14278: LD_ADDR_OWVAR 40
14282: PUSH
14283: LD_INT 29
14285: ST_TO_ADDR
// un := CreateVehicle ;
14286: LD_ADDR_VAR 0 2
14290: PUSH
14291: CALL_OW 45
14295: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14296: LD_VAR 0 2
14300: PPUSH
14301: LD_INT 1
14303: PPUSH
14304: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14308: LD_INT 35
14310: PPUSH
14311: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14315: LD_VAR 0 2
14319: PPUSH
14320: LD_INT 22
14322: PUSH
14323: LD_OWVAR 2
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: PPUSH
14332: CALL_OW 69
14336: PPUSH
14337: LD_VAR 0 2
14341: PPUSH
14342: CALL_OW 74
14346: PPUSH
14347: CALL_OW 115
// until IsDead ( un ) ;
14351: LD_VAR 0 2
14355: PPUSH
14356: CALL_OW 301
14360: IFFALSE 14308
// end ;
14362: PPOPN 2
14364: END
// every 0 0$1 trigger StreamModeActive and sStu do
14365: LD_EXP 24
14369: PUSH
14370: LD_EXP 63
14374: AND
14375: IFFALSE 14391
14377: GO 14379
14379: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14380: LD_STRING displayStucuk();
14382: PPUSH
14383: CALL_OW 559
// ResetFog ;
14387: CALL_OW 335
// end ;
14391: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14392: LD_EXP 24
14396: PUSH
14397: LD_EXP 56
14401: AND
14402: IFFALSE 14543
14404: GO 14406
14406: DISABLE
14407: LD_INT 0
14409: PPUSH
14410: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14411: LD_ADDR_VAR 0 2
14415: PUSH
14416: LD_INT 22
14418: PUSH
14419: LD_OWVAR 2
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: PUSH
14428: LD_INT 21
14430: PUSH
14431: LD_INT 1
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: PPUSH
14442: CALL_OW 69
14446: ST_TO_ADDR
// if not tmp then
14447: LD_VAR 0 2
14451: NOT
14452: IFFALSE 14456
// exit ;
14454: GO 14543
// un := tmp [ rand ( 1 , tmp ) ] ;
14456: LD_ADDR_VAR 0 1
14460: PUSH
14461: LD_VAR 0 2
14465: PUSH
14466: LD_INT 1
14468: PPUSH
14469: LD_VAR 0 2
14473: PPUSH
14474: CALL_OW 12
14478: ARRAY
14479: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14480: LD_VAR 0 1
14484: PPUSH
14485: LD_INT 0
14487: PPUSH
14488: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14492: LD_VAR 0 1
14496: PPUSH
14497: LD_OWVAR 3
14501: PUSH
14502: LD_VAR 0 1
14506: DIFF
14507: PPUSH
14508: LD_VAR 0 1
14512: PPUSH
14513: CALL_OW 74
14517: PPUSH
14518: CALL_OW 115
// wait ( 0 0$20 ) ;
14522: LD_INT 700
14524: PPUSH
14525: CALL_OW 67
// SetSide ( un , your_side ) ;
14529: LD_VAR 0 1
14533: PPUSH
14534: LD_OWVAR 2
14538: PPUSH
14539: CALL_OW 235
// end ;
14543: PPOPN 2
14545: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14546: LD_EXP 24
14550: PUSH
14551: LD_EXP 57
14555: AND
14556: IFFALSE 14662
14558: GO 14560
14560: DISABLE
14561: LD_INT 0
14563: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14564: LD_ADDR_VAR 0 1
14568: PUSH
14569: LD_INT 22
14571: PUSH
14572: LD_OWVAR 2
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: PUSH
14581: LD_INT 2
14583: PUSH
14584: LD_INT 30
14586: PUSH
14587: LD_INT 0
14589: PUSH
14590: EMPTY
14591: LIST
14592: LIST
14593: PUSH
14594: LD_INT 30
14596: PUSH
14597: LD_INT 1
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: LIST
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: PPUSH
14613: CALL_OW 69
14617: ST_TO_ADDR
// if not depot then
14618: LD_VAR 0 1
14622: NOT
14623: IFFALSE 14627
// exit ;
14625: GO 14662
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14627: LD_VAR 0 1
14631: PUSH
14632: LD_INT 1
14634: ARRAY
14635: PPUSH
14636: CALL_OW 250
14640: PPUSH
14641: LD_VAR 0 1
14645: PUSH
14646: LD_INT 1
14648: ARRAY
14649: PPUSH
14650: CALL_OW 251
14654: PPUSH
14655: LD_INT 70
14657: PPUSH
14658: CALL_OW 495
// end ;
14662: PPOPN 1
14664: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14665: LD_EXP 24
14669: PUSH
14670: LD_EXP 58
14674: AND
14675: IFFALSE 14886
14677: GO 14679
14679: DISABLE
14680: LD_INT 0
14682: PPUSH
14683: PPUSH
14684: PPUSH
14685: PPUSH
14686: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14687: LD_ADDR_VAR 0 5
14691: PUSH
14692: LD_INT 22
14694: PUSH
14695: LD_OWVAR 2
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: PUSH
14704: LD_INT 21
14706: PUSH
14707: LD_INT 1
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PPUSH
14718: CALL_OW 69
14722: ST_TO_ADDR
// if not tmp then
14723: LD_VAR 0 5
14727: NOT
14728: IFFALSE 14732
// exit ;
14730: GO 14886
// for i in tmp do
14732: LD_ADDR_VAR 0 1
14736: PUSH
14737: LD_VAR 0 5
14741: PUSH
14742: FOR_IN
14743: IFFALSE 14884
// begin d := rand ( 0 , 5 ) ;
14745: LD_ADDR_VAR 0 4
14749: PUSH
14750: LD_INT 0
14752: PPUSH
14753: LD_INT 5
14755: PPUSH
14756: CALL_OW 12
14760: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14761: LD_ADDR_VAR 0 2
14765: PUSH
14766: LD_VAR 0 1
14770: PPUSH
14771: CALL_OW 250
14775: PPUSH
14776: LD_VAR 0 4
14780: PPUSH
14781: LD_INT 3
14783: PPUSH
14784: LD_INT 12
14786: PPUSH
14787: CALL_OW 12
14791: PPUSH
14792: CALL_OW 272
14796: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14797: LD_ADDR_VAR 0 3
14801: PUSH
14802: LD_VAR 0 1
14806: PPUSH
14807: CALL_OW 251
14811: PPUSH
14812: LD_VAR 0 4
14816: PPUSH
14817: LD_INT 3
14819: PPUSH
14820: LD_INT 12
14822: PPUSH
14823: CALL_OW 12
14827: PPUSH
14828: CALL_OW 273
14832: ST_TO_ADDR
// if ValidHex ( x , y ) then
14833: LD_VAR 0 2
14837: PPUSH
14838: LD_VAR 0 3
14842: PPUSH
14843: CALL_OW 488
14847: IFFALSE 14882
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14849: LD_VAR 0 1
14853: PPUSH
14854: LD_VAR 0 2
14858: PPUSH
14859: LD_VAR 0 3
14863: PPUSH
14864: LD_INT 3
14866: PPUSH
14867: LD_INT 6
14869: PPUSH
14870: CALL_OW 12
14874: PPUSH
14875: LD_INT 1
14877: PPUSH
14878: CALL_OW 483
// end ;
14882: GO 14742
14884: POP
14885: POP
// end ;
14886: PPOPN 5
14888: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14889: LD_EXP 24
14893: PUSH
14894: LD_EXP 59
14898: AND
14899: IFFALSE 14993
14901: GO 14903
14903: DISABLE
14904: LD_INT 0
14906: PPUSH
14907: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14908: LD_ADDR_VAR 0 2
14912: PUSH
14913: LD_INT 22
14915: PUSH
14916: LD_OWVAR 2
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: PUSH
14925: LD_INT 32
14927: PUSH
14928: LD_INT 1
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: PUSH
14935: LD_INT 21
14937: PUSH
14938: LD_INT 2
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: LIST
14949: PPUSH
14950: CALL_OW 69
14954: ST_TO_ADDR
// if not tmp then
14955: LD_VAR 0 2
14959: NOT
14960: IFFALSE 14964
// exit ;
14962: GO 14993
// for i in tmp do
14964: LD_ADDR_VAR 0 1
14968: PUSH
14969: LD_VAR 0 2
14973: PUSH
14974: FOR_IN
14975: IFFALSE 14991
// SetFuel ( i , 0 ) ;
14977: LD_VAR 0 1
14981: PPUSH
14982: LD_INT 0
14984: PPUSH
14985: CALL_OW 240
14989: GO 14974
14991: POP
14992: POP
// end ;
14993: PPOPN 2
14995: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14996: LD_EXP 24
15000: PUSH
15001: LD_EXP 60
15005: AND
15006: IFFALSE 15072
15008: GO 15010
15010: DISABLE
15011: LD_INT 0
15013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15014: LD_ADDR_VAR 0 1
15018: PUSH
15019: LD_INT 22
15021: PUSH
15022: LD_OWVAR 2
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: PUSH
15031: LD_INT 30
15033: PUSH
15034: LD_INT 29
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: PUSH
15041: EMPTY
15042: LIST
15043: LIST
15044: PPUSH
15045: CALL_OW 69
15049: ST_TO_ADDR
// if not tmp then
15050: LD_VAR 0 1
15054: NOT
15055: IFFALSE 15059
// exit ;
15057: GO 15072
// DestroyUnit ( tmp [ 1 ] ) ;
15059: LD_VAR 0 1
15063: PUSH
15064: LD_INT 1
15066: ARRAY
15067: PPUSH
15068: CALL_OW 65
// end ;
15072: PPOPN 1
15074: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15075: LD_EXP 24
15079: PUSH
15080: LD_EXP 62
15084: AND
15085: IFFALSE 15214
15087: GO 15089
15089: DISABLE
15090: LD_INT 0
15092: PPUSH
// begin uc_side := 0 ;
15093: LD_ADDR_OWVAR 20
15097: PUSH
15098: LD_INT 0
15100: ST_TO_ADDR
// uc_nation := nation_arabian ;
15101: LD_ADDR_OWVAR 21
15105: PUSH
15106: LD_INT 2
15108: ST_TO_ADDR
// hc_gallery :=  ;
15109: LD_ADDR_OWVAR 33
15113: PUSH
15114: LD_STRING 
15116: ST_TO_ADDR
// hc_name :=  ;
15117: LD_ADDR_OWVAR 26
15121: PUSH
15122: LD_STRING 
15124: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15125: LD_INT 1
15127: PPUSH
15128: LD_INT 11
15130: PPUSH
15131: LD_INT 10
15133: PPUSH
15134: CALL_OW 380
// un := CreateHuman ;
15138: LD_ADDR_VAR 0 1
15142: PUSH
15143: CALL_OW 44
15147: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15148: LD_VAR 0 1
15152: PPUSH
15153: LD_INT 1
15155: PPUSH
15156: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15160: LD_INT 35
15162: PPUSH
15163: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15167: LD_VAR 0 1
15171: PPUSH
15172: LD_INT 22
15174: PUSH
15175: LD_OWVAR 2
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: PPUSH
15184: CALL_OW 69
15188: PPUSH
15189: LD_VAR 0 1
15193: PPUSH
15194: CALL_OW 74
15198: PPUSH
15199: CALL_OW 115
// until IsDead ( un ) ;
15203: LD_VAR 0 1
15207: PPUSH
15208: CALL_OW 301
15212: IFFALSE 15160
// end ;
15214: PPOPN 1
15216: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15217: LD_EXP 24
15221: PUSH
15222: LD_EXP 64
15226: AND
15227: IFFALSE 15239
15229: GO 15231
15231: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15232: LD_STRING earthquake(getX(game), 0, 32)
15234: PPUSH
15235: CALL_OW 559
15239: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15240: LD_EXP 24
15244: PUSH
15245: LD_EXP 65
15249: AND
15250: IFFALSE 15341
15252: GO 15254
15254: DISABLE
15255: LD_INT 0
15257: PPUSH
// begin enable ;
15258: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15259: LD_ADDR_VAR 0 1
15263: PUSH
15264: LD_INT 22
15266: PUSH
15267: LD_OWVAR 2
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: PUSH
15276: LD_INT 21
15278: PUSH
15279: LD_INT 2
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PUSH
15286: LD_INT 33
15288: PUSH
15289: LD_INT 3
15291: PUSH
15292: EMPTY
15293: LIST
15294: LIST
15295: PUSH
15296: EMPTY
15297: LIST
15298: LIST
15299: LIST
15300: PPUSH
15301: CALL_OW 69
15305: ST_TO_ADDR
// if not tmp then
15306: LD_VAR 0 1
15310: NOT
15311: IFFALSE 15315
// exit ;
15313: GO 15341
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15315: LD_VAR 0 1
15319: PUSH
15320: LD_INT 1
15322: PPUSH
15323: LD_VAR 0 1
15327: PPUSH
15328: CALL_OW 12
15332: ARRAY
15333: PPUSH
15334: LD_INT 1
15336: PPUSH
15337: CALL_OW 234
// end ;
15341: PPOPN 1
15343: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15344: LD_EXP 24
15348: PUSH
15349: LD_EXP 66
15353: AND
15354: IFFALSE 15495
15356: GO 15358
15358: DISABLE
15359: LD_INT 0
15361: PPUSH
15362: PPUSH
15363: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15364: LD_ADDR_VAR 0 3
15368: PUSH
15369: LD_INT 22
15371: PUSH
15372: LD_OWVAR 2
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: PUSH
15381: LD_INT 25
15383: PUSH
15384: LD_INT 1
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PPUSH
15395: CALL_OW 69
15399: ST_TO_ADDR
// if not tmp then
15400: LD_VAR 0 3
15404: NOT
15405: IFFALSE 15409
// exit ;
15407: GO 15495
// un := tmp [ rand ( 1 , tmp ) ] ;
15409: LD_ADDR_VAR 0 2
15413: PUSH
15414: LD_VAR 0 3
15418: PUSH
15419: LD_INT 1
15421: PPUSH
15422: LD_VAR 0 3
15426: PPUSH
15427: CALL_OW 12
15431: ARRAY
15432: ST_TO_ADDR
// if Crawls ( un ) then
15433: LD_VAR 0 2
15437: PPUSH
15438: CALL_OW 318
15442: IFFALSE 15453
// ComWalk ( un ) ;
15444: LD_VAR 0 2
15448: PPUSH
15449: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15453: LD_VAR 0 2
15457: PPUSH
15458: LD_INT 9
15460: PPUSH
15461: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15465: LD_INT 28
15467: PPUSH
15468: LD_OWVAR 2
15472: PPUSH
15473: LD_INT 2
15475: PPUSH
15476: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15480: LD_INT 29
15482: PPUSH
15483: LD_OWVAR 2
15487: PPUSH
15488: LD_INT 2
15490: PPUSH
15491: CALL_OW 322
// end ;
15495: PPOPN 3
15497: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15498: LD_EXP 24
15502: PUSH
15503: LD_EXP 67
15507: AND
15508: IFFALSE 15619
15510: GO 15512
15512: DISABLE
15513: LD_INT 0
15515: PPUSH
15516: PPUSH
15517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15518: LD_ADDR_VAR 0 3
15522: PUSH
15523: LD_INT 22
15525: PUSH
15526: LD_OWVAR 2
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: PUSH
15535: LD_INT 25
15537: PUSH
15538: LD_INT 1
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: PPUSH
15549: CALL_OW 69
15553: ST_TO_ADDR
// if not tmp then
15554: LD_VAR 0 3
15558: NOT
15559: IFFALSE 15563
// exit ;
15561: GO 15619
// un := tmp [ rand ( 1 , tmp ) ] ;
15563: LD_ADDR_VAR 0 2
15567: PUSH
15568: LD_VAR 0 3
15572: PUSH
15573: LD_INT 1
15575: PPUSH
15576: LD_VAR 0 3
15580: PPUSH
15581: CALL_OW 12
15585: ARRAY
15586: ST_TO_ADDR
// if Crawls ( un ) then
15587: LD_VAR 0 2
15591: PPUSH
15592: CALL_OW 318
15596: IFFALSE 15607
// ComWalk ( un ) ;
15598: LD_VAR 0 2
15602: PPUSH
15603: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15607: LD_VAR 0 2
15611: PPUSH
15612: LD_INT 8
15614: PPUSH
15615: CALL_OW 336
// end ;
15619: PPOPN 3
15621: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15622: LD_EXP 24
15626: PUSH
15627: LD_EXP 68
15631: AND
15632: IFFALSE 15776
15634: GO 15636
15636: DISABLE
15637: LD_INT 0
15639: PPUSH
15640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15641: LD_ADDR_VAR 0 2
15645: PUSH
15646: LD_INT 22
15648: PUSH
15649: LD_OWVAR 2
15653: PUSH
15654: EMPTY
15655: LIST
15656: LIST
15657: PUSH
15658: LD_INT 21
15660: PUSH
15661: LD_INT 2
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: PUSH
15668: LD_INT 2
15670: PUSH
15671: LD_INT 34
15673: PUSH
15674: LD_INT 12
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: PUSH
15681: LD_INT 34
15683: PUSH
15684: LD_INT 51
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: PUSH
15691: LD_INT 34
15693: PUSH
15694: LD_INT 32
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PUSH
15701: EMPTY
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: LIST
15711: PPUSH
15712: CALL_OW 69
15716: ST_TO_ADDR
// if not tmp then
15717: LD_VAR 0 2
15721: NOT
15722: IFFALSE 15726
// exit ;
15724: GO 15776
// for i in tmp do
15726: LD_ADDR_VAR 0 1
15730: PUSH
15731: LD_VAR 0 2
15735: PUSH
15736: FOR_IN
15737: IFFALSE 15774
// if GetCargo ( i , mat_artifact ) = 0 then
15739: LD_VAR 0 1
15743: PPUSH
15744: LD_INT 4
15746: PPUSH
15747: CALL_OW 289
15751: PUSH
15752: LD_INT 0
15754: EQUAL
15755: IFFALSE 15772
// SetCargo ( i , mat_siberit , 100 ) ;
15757: LD_VAR 0 1
15761: PPUSH
15762: LD_INT 3
15764: PPUSH
15765: LD_INT 100
15767: PPUSH
15768: CALL_OW 290
15772: GO 15736
15774: POP
15775: POP
// end ;
15776: PPOPN 2
15778: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15779: LD_EXP 24
15783: PUSH
15784: LD_EXP 69
15788: AND
15789: IFFALSE 15972
15791: GO 15793
15793: DISABLE
15794: LD_INT 0
15796: PPUSH
15797: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15798: LD_ADDR_VAR 0 2
15802: PUSH
15803: LD_INT 22
15805: PUSH
15806: LD_OWVAR 2
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: PPUSH
15815: CALL_OW 69
15819: ST_TO_ADDR
// if not tmp then
15820: LD_VAR 0 2
15824: NOT
15825: IFFALSE 15829
// exit ;
15827: GO 15972
// for i := 1 to 2 do
15829: LD_ADDR_VAR 0 1
15833: PUSH
15834: DOUBLE
15835: LD_INT 1
15837: DEC
15838: ST_TO_ADDR
15839: LD_INT 2
15841: PUSH
15842: FOR_TO
15843: IFFALSE 15970
// begin uc_side := your_side ;
15845: LD_ADDR_OWVAR 20
15849: PUSH
15850: LD_OWVAR 2
15854: ST_TO_ADDR
// uc_nation := nation_american ;
15855: LD_ADDR_OWVAR 21
15859: PUSH
15860: LD_INT 1
15862: ST_TO_ADDR
// vc_chassis := us_morphling ;
15863: LD_ADDR_OWVAR 37
15867: PUSH
15868: LD_INT 5
15870: ST_TO_ADDR
// vc_engine := engine_siberite ;
15871: LD_ADDR_OWVAR 39
15875: PUSH
15876: LD_INT 3
15878: ST_TO_ADDR
// vc_control := control_computer ;
15879: LD_ADDR_OWVAR 38
15883: PUSH
15884: LD_INT 3
15886: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15887: LD_ADDR_OWVAR 40
15891: PUSH
15892: LD_INT 10
15894: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15895: LD_VAR 0 2
15899: PUSH
15900: LD_INT 1
15902: ARRAY
15903: PPUSH
15904: CALL_OW 310
15908: NOT
15909: IFFALSE 15956
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15911: CALL_OW 45
15915: PPUSH
15916: LD_VAR 0 2
15920: PUSH
15921: LD_INT 1
15923: ARRAY
15924: PPUSH
15925: CALL_OW 250
15929: PPUSH
15930: LD_VAR 0 2
15934: PUSH
15935: LD_INT 1
15937: ARRAY
15938: PPUSH
15939: CALL_OW 251
15943: PPUSH
15944: LD_INT 12
15946: PPUSH
15947: LD_INT 1
15949: PPUSH
15950: CALL_OW 50
15954: GO 15968
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15956: CALL_OW 45
15960: PPUSH
15961: LD_INT 1
15963: PPUSH
15964: CALL_OW 51
// end ;
15968: GO 15842
15970: POP
15971: POP
// end ;
15972: PPOPN 2
15974: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15975: LD_EXP 24
15979: PUSH
15980: LD_EXP 70
15984: AND
15985: IFFALSE 16207
15987: GO 15989
15989: DISABLE
15990: LD_INT 0
15992: PPUSH
15993: PPUSH
15994: PPUSH
15995: PPUSH
15996: PPUSH
15997: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15998: LD_ADDR_VAR 0 6
16002: PUSH
16003: LD_INT 22
16005: PUSH
16006: LD_OWVAR 2
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PUSH
16015: LD_INT 21
16017: PUSH
16018: LD_INT 1
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: PUSH
16025: LD_INT 3
16027: PUSH
16028: LD_INT 23
16030: PUSH
16031: LD_INT 0
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: LIST
16046: PPUSH
16047: CALL_OW 69
16051: ST_TO_ADDR
// if not tmp then
16052: LD_VAR 0 6
16056: NOT
16057: IFFALSE 16061
// exit ;
16059: GO 16207
// s1 := rand ( 1 , 4 ) ;
16061: LD_ADDR_VAR 0 2
16065: PUSH
16066: LD_INT 1
16068: PPUSH
16069: LD_INT 4
16071: PPUSH
16072: CALL_OW 12
16076: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16077: LD_ADDR_VAR 0 4
16081: PUSH
16082: LD_VAR 0 6
16086: PUSH
16087: LD_INT 1
16089: ARRAY
16090: PPUSH
16091: LD_VAR 0 2
16095: PPUSH
16096: CALL_OW 259
16100: ST_TO_ADDR
// if s1 = 1 then
16101: LD_VAR 0 2
16105: PUSH
16106: LD_INT 1
16108: EQUAL
16109: IFFALSE 16129
// s2 := rand ( 2 , 4 ) else
16111: LD_ADDR_VAR 0 3
16115: PUSH
16116: LD_INT 2
16118: PPUSH
16119: LD_INT 4
16121: PPUSH
16122: CALL_OW 12
16126: ST_TO_ADDR
16127: GO 16137
// s2 := 1 ;
16129: LD_ADDR_VAR 0 3
16133: PUSH
16134: LD_INT 1
16136: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16137: LD_ADDR_VAR 0 5
16141: PUSH
16142: LD_VAR 0 6
16146: PUSH
16147: LD_INT 1
16149: ARRAY
16150: PPUSH
16151: LD_VAR 0 3
16155: PPUSH
16156: CALL_OW 259
16160: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16161: LD_VAR 0 6
16165: PUSH
16166: LD_INT 1
16168: ARRAY
16169: PPUSH
16170: LD_VAR 0 2
16174: PPUSH
16175: LD_VAR 0 5
16179: PPUSH
16180: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16184: LD_VAR 0 6
16188: PUSH
16189: LD_INT 1
16191: ARRAY
16192: PPUSH
16193: LD_VAR 0 3
16197: PPUSH
16198: LD_VAR 0 4
16202: PPUSH
16203: CALL_OW 237
// end ;
16207: PPOPN 6
16209: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16210: LD_EXP 24
16214: PUSH
16215: LD_EXP 71
16219: AND
16220: IFFALSE 16299
16222: GO 16224
16224: DISABLE
16225: LD_INT 0
16227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16228: LD_ADDR_VAR 0 1
16232: PUSH
16233: LD_INT 22
16235: PUSH
16236: LD_OWVAR 2
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: PUSH
16245: LD_INT 30
16247: PUSH
16248: LD_INT 3
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: PPUSH
16259: CALL_OW 69
16263: ST_TO_ADDR
// if not tmp then
16264: LD_VAR 0 1
16268: NOT
16269: IFFALSE 16273
// exit ;
16271: GO 16299
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16273: LD_VAR 0 1
16277: PUSH
16278: LD_INT 1
16280: PPUSH
16281: LD_VAR 0 1
16285: PPUSH
16286: CALL_OW 12
16290: ARRAY
16291: PPUSH
16292: LD_INT 1
16294: PPUSH
16295: CALL_OW 234
// end ;
16299: PPOPN 1
16301: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16302: LD_EXP 24
16306: PUSH
16307: LD_EXP 72
16311: AND
16312: IFFALSE 16424
16314: GO 16316
16316: DISABLE
16317: LD_INT 0
16319: PPUSH
16320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16321: LD_ADDR_VAR 0 2
16325: PUSH
16326: LD_INT 22
16328: PUSH
16329: LD_OWVAR 2
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: PUSH
16338: LD_INT 2
16340: PUSH
16341: LD_INT 30
16343: PUSH
16344: LD_INT 27
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: PUSH
16351: LD_INT 30
16353: PUSH
16354: LD_INT 26
16356: PUSH
16357: EMPTY
16358: LIST
16359: LIST
16360: PUSH
16361: LD_INT 30
16363: PUSH
16364: LD_INT 28
16366: PUSH
16367: EMPTY
16368: LIST
16369: LIST
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: PUSH
16377: EMPTY
16378: LIST
16379: LIST
16380: PPUSH
16381: CALL_OW 69
16385: ST_TO_ADDR
// if not tmp then
16386: LD_VAR 0 2
16390: NOT
16391: IFFALSE 16395
// exit ;
16393: GO 16424
// for i in tmp do
16395: LD_ADDR_VAR 0 1
16399: PUSH
16400: LD_VAR 0 2
16404: PUSH
16405: FOR_IN
16406: IFFALSE 16422
// SetLives ( i , 1 ) ;
16408: LD_VAR 0 1
16412: PPUSH
16413: LD_INT 1
16415: PPUSH
16416: CALL_OW 234
16420: GO 16405
16422: POP
16423: POP
// end ;
16424: PPOPN 2
16426: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16427: LD_EXP 24
16431: PUSH
16432: LD_EXP 73
16436: AND
16437: IFFALSE 16724
16439: GO 16441
16441: DISABLE
16442: LD_INT 0
16444: PPUSH
16445: PPUSH
16446: PPUSH
// begin i := rand ( 1 , 7 ) ;
16447: LD_ADDR_VAR 0 1
16451: PUSH
16452: LD_INT 1
16454: PPUSH
16455: LD_INT 7
16457: PPUSH
16458: CALL_OW 12
16462: ST_TO_ADDR
// case i of 1 :
16463: LD_VAR 0 1
16467: PUSH
16468: LD_INT 1
16470: DOUBLE
16471: EQUAL
16472: IFTRUE 16476
16474: GO 16486
16476: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16477: LD_STRING earthquake(getX(game), 0, 32)
16479: PPUSH
16480: CALL_OW 559
16484: GO 16724
16486: LD_INT 2
16488: DOUBLE
16489: EQUAL
16490: IFTRUE 16494
16492: GO 16508
16494: POP
// begin ToLua ( displayStucuk(); ) ;
16495: LD_STRING displayStucuk();
16497: PPUSH
16498: CALL_OW 559
// ResetFog ;
16502: CALL_OW 335
// end ; 3 :
16506: GO 16724
16508: LD_INT 3
16510: DOUBLE
16511: EQUAL
16512: IFTRUE 16516
16514: GO 16620
16516: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16517: LD_ADDR_VAR 0 2
16521: PUSH
16522: LD_INT 22
16524: PUSH
16525: LD_OWVAR 2
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: PUSH
16534: LD_INT 25
16536: PUSH
16537: LD_INT 1
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PPUSH
16548: CALL_OW 69
16552: ST_TO_ADDR
// if not tmp then
16553: LD_VAR 0 2
16557: NOT
16558: IFFALSE 16562
// exit ;
16560: GO 16724
// un := tmp [ rand ( 1 , tmp ) ] ;
16562: LD_ADDR_VAR 0 3
16566: PUSH
16567: LD_VAR 0 2
16571: PUSH
16572: LD_INT 1
16574: PPUSH
16575: LD_VAR 0 2
16579: PPUSH
16580: CALL_OW 12
16584: ARRAY
16585: ST_TO_ADDR
// if Crawls ( un ) then
16586: LD_VAR 0 3
16590: PPUSH
16591: CALL_OW 318
16595: IFFALSE 16606
// ComWalk ( un ) ;
16597: LD_VAR 0 3
16601: PPUSH
16602: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16606: LD_VAR 0 3
16610: PPUSH
16611: LD_INT 8
16613: PPUSH
16614: CALL_OW 336
// end ; 4 :
16618: GO 16724
16620: LD_INT 4
16622: DOUBLE
16623: EQUAL
16624: IFTRUE 16628
16626: GO 16702
16628: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16629: LD_ADDR_VAR 0 2
16633: PUSH
16634: LD_INT 22
16636: PUSH
16637: LD_OWVAR 2
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: PUSH
16646: LD_INT 30
16648: PUSH
16649: LD_INT 29
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: PPUSH
16660: CALL_OW 69
16664: ST_TO_ADDR
// if not tmp then
16665: LD_VAR 0 2
16669: NOT
16670: IFFALSE 16674
// exit ;
16672: GO 16724
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16674: LD_VAR 0 2
16678: PUSH
16679: LD_INT 1
16681: ARRAY
16682: PPUSH
16683: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16687: LD_VAR 0 2
16691: PUSH
16692: LD_INT 1
16694: ARRAY
16695: PPUSH
16696: CALL_OW 65
// end ; 5 .. 7 :
16700: GO 16724
16702: LD_INT 5
16704: DOUBLE
16705: GREATEREQUAL
16706: IFFALSE 16714
16708: LD_INT 7
16710: DOUBLE
16711: LESSEQUAL
16712: IFTRUE 16716
16714: GO 16723
16716: POP
// StreamSibBomb ; end ;
16717: CALL 12961 0 0
16721: GO 16724
16723: POP
// end ;
16724: PPOPN 3
16726: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16727: LD_EXP 24
16731: PUSH
16732: LD_EXP 74
16736: AND
16737: IFFALSE 16893
16739: GO 16741
16741: DISABLE
16742: LD_INT 0
16744: PPUSH
16745: PPUSH
16746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16747: LD_ADDR_VAR 0 2
16751: PUSH
16752: LD_INT 81
16754: PUSH
16755: LD_OWVAR 2
16759: PUSH
16760: EMPTY
16761: LIST
16762: LIST
16763: PUSH
16764: LD_INT 2
16766: PUSH
16767: LD_INT 21
16769: PUSH
16770: LD_INT 1
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: PUSH
16777: LD_INT 21
16779: PUSH
16780: LD_INT 2
16782: PUSH
16783: EMPTY
16784: LIST
16785: LIST
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: LIST
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PPUSH
16796: CALL_OW 69
16800: ST_TO_ADDR
// if not tmp then
16801: LD_VAR 0 2
16805: NOT
16806: IFFALSE 16810
// exit ;
16808: GO 16893
// p := 0 ;
16810: LD_ADDR_VAR 0 3
16814: PUSH
16815: LD_INT 0
16817: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16818: LD_INT 35
16820: PPUSH
16821: CALL_OW 67
// p := p + 1 ;
16825: LD_ADDR_VAR 0 3
16829: PUSH
16830: LD_VAR 0 3
16834: PUSH
16835: LD_INT 1
16837: PLUS
16838: ST_TO_ADDR
// for i in tmp do
16839: LD_ADDR_VAR 0 1
16843: PUSH
16844: LD_VAR 0 2
16848: PUSH
16849: FOR_IN
16850: IFFALSE 16881
// if GetLives ( i ) < 1000 then
16852: LD_VAR 0 1
16856: PPUSH
16857: CALL_OW 256
16861: PUSH
16862: LD_INT 1000
16864: LESS
16865: IFFALSE 16879
// SetLives ( i , 1000 ) ;
16867: LD_VAR 0 1
16871: PPUSH
16872: LD_INT 1000
16874: PPUSH
16875: CALL_OW 234
16879: GO 16849
16881: POP
16882: POP
// until p > 20 ;
16883: LD_VAR 0 3
16887: PUSH
16888: LD_INT 20
16890: GREATER
16891: IFFALSE 16818
// end ;
16893: PPOPN 3
16895: END
// every 0 0$1 trigger StreamModeActive and sTime do
16896: LD_EXP 24
16900: PUSH
16901: LD_EXP 75
16905: AND
16906: IFFALSE 16941
16908: GO 16910
16910: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16911: LD_INT 28
16913: PPUSH
16914: LD_OWVAR 2
16918: PPUSH
16919: LD_INT 2
16921: PPUSH
16922: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16926: LD_INT 30
16928: PPUSH
16929: LD_OWVAR 2
16933: PPUSH
16934: LD_INT 2
16936: PPUSH
16937: CALL_OW 322
// end ;
16941: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16942: LD_EXP 24
16946: PUSH
16947: LD_EXP 76
16951: AND
16952: IFFALSE 17073
16954: GO 16956
16956: DISABLE
16957: LD_INT 0
16959: PPUSH
16960: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16961: LD_ADDR_VAR 0 2
16965: PUSH
16966: LD_INT 22
16968: PUSH
16969: LD_OWVAR 2
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: PUSH
16978: LD_INT 21
16980: PUSH
16981: LD_INT 1
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: PUSH
16988: LD_INT 3
16990: PUSH
16991: LD_INT 23
16993: PUSH
16994: LD_INT 0
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: PUSH
17001: EMPTY
17002: LIST
17003: LIST
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: LIST
17009: PPUSH
17010: CALL_OW 69
17014: ST_TO_ADDR
// if not tmp then
17015: LD_VAR 0 2
17019: NOT
17020: IFFALSE 17024
// exit ;
17022: GO 17073
// for i in tmp do
17024: LD_ADDR_VAR 0 1
17028: PUSH
17029: LD_VAR 0 2
17033: PUSH
17034: FOR_IN
17035: IFFALSE 17071
// begin if Crawls ( i ) then
17037: LD_VAR 0 1
17041: PPUSH
17042: CALL_OW 318
17046: IFFALSE 17057
// ComWalk ( i ) ;
17048: LD_VAR 0 1
17052: PPUSH
17053: CALL_OW 138
// SetClass ( i , 2 ) ;
17057: LD_VAR 0 1
17061: PPUSH
17062: LD_INT 2
17064: PPUSH
17065: CALL_OW 336
// end ;
17069: GO 17034
17071: POP
17072: POP
// end ;
17073: PPOPN 2
17075: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17076: LD_EXP 24
17080: PUSH
17081: LD_EXP 77
17085: AND
17086: IFFALSE 17374
17088: GO 17090
17090: DISABLE
17091: LD_INT 0
17093: PPUSH
17094: PPUSH
17095: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17096: LD_OWVAR 2
17100: PPUSH
17101: LD_INT 9
17103: PPUSH
17104: LD_INT 1
17106: PPUSH
17107: LD_INT 1
17109: PPUSH
17110: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17114: LD_INT 9
17116: PPUSH
17117: LD_OWVAR 2
17121: PPUSH
17122: CALL_OW 343
// uc_side := 9 ;
17126: LD_ADDR_OWVAR 20
17130: PUSH
17131: LD_INT 9
17133: ST_TO_ADDR
// uc_nation := 2 ;
17134: LD_ADDR_OWVAR 21
17138: PUSH
17139: LD_INT 2
17141: ST_TO_ADDR
// hc_name := Dark Warrior ;
17142: LD_ADDR_OWVAR 26
17146: PUSH
17147: LD_STRING Dark Warrior
17149: ST_TO_ADDR
// hc_gallery :=  ;
17150: LD_ADDR_OWVAR 33
17154: PUSH
17155: LD_STRING 
17157: ST_TO_ADDR
// hc_noskilllimit := true ;
17158: LD_ADDR_OWVAR 76
17162: PUSH
17163: LD_INT 1
17165: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17166: LD_ADDR_OWVAR 31
17170: PUSH
17171: LD_INT 30
17173: PUSH
17174: LD_INT 30
17176: PUSH
17177: LD_INT 30
17179: PUSH
17180: LD_INT 30
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: ST_TO_ADDR
// un := CreateHuman ;
17189: LD_ADDR_VAR 0 3
17193: PUSH
17194: CALL_OW 44
17198: ST_TO_ADDR
// hc_noskilllimit := false ;
17199: LD_ADDR_OWVAR 76
17203: PUSH
17204: LD_INT 0
17206: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17207: LD_VAR 0 3
17211: PPUSH
17212: LD_INT 1
17214: PPUSH
17215: CALL_OW 51
// ToLua ( playRanger() ) ;
17219: LD_STRING playRanger()
17221: PPUSH
17222: CALL_OW 559
// p := 0 ;
17226: LD_ADDR_VAR 0 2
17230: PUSH
17231: LD_INT 0
17233: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17234: LD_INT 35
17236: PPUSH
17237: CALL_OW 67
// p := p + 1 ;
17241: LD_ADDR_VAR 0 2
17245: PUSH
17246: LD_VAR 0 2
17250: PUSH
17251: LD_INT 1
17253: PLUS
17254: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17255: LD_VAR 0 3
17259: PPUSH
17260: CALL_OW 256
17264: PUSH
17265: LD_INT 1000
17267: LESS
17268: IFFALSE 17282
// SetLives ( un , 1000 ) ;
17270: LD_VAR 0 3
17274: PPUSH
17275: LD_INT 1000
17277: PPUSH
17278: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17282: LD_VAR 0 3
17286: PPUSH
17287: LD_INT 81
17289: PUSH
17290: LD_OWVAR 2
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PUSH
17299: LD_INT 91
17301: PUSH
17302: LD_VAR 0 3
17306: PUSH
17307: LD_INT 30
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: LIST
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PPUSH
17319: CALL_OW 69
17323: PPUSH
17324: LD_VAR 0 3
17328: PPUSH
17329: CALL_OW 74
17333: PPUSH
17334: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17338: LD_VAR 0 2
17342: PUSH
17343: LD_INT 80
17345: GREATER
17346: PUSH
17347: LD_VAR 0 3
17351: PPUSH
17352: CALL_OW 301
17356: OR
17357: IFFALSE 17234
// if un then
17359: LD_VAR 0 3
17363: IFFALSE 17374
// RemoveUnit ( un ) ;
17365: LD_VAR 0 3
17369: PPUSH
17370: CALL_OW 64
// end ;
17374: PPOPN 3
17376: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17377: LD_EXP 78
17381: IFFALSE 17497
17383: GO 17385
17385: DISABLE
17386: LD_INT 0
17388: PPUSH
17389: PPUSH
17390: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17391: LD_ADDR_VAR 0 2
17395: PUSH
17396: LD_INT 81
17398: PUSH
17399: LD_OWVAR 2
17403: PUSH
17404: EMPTY
17405: LIST
17406: LIST
17407: PUSH
17408: LD_INT 21
17410: PUSH
17411: LD_INT 1
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: PPUSH
17422: CALL_OW 69
17426: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17427: LD_STRING playComputer()
17429: PPUSH
17430: CALL_OW 559
// if not tmp then
17434: LD_VAR 0 2
17438: NOT
17439: IFFALSE 17443
// exit ;
17441: GO 17497
// for i in tmp do
17443: LD_ADDR_VAR 0 1
17447: PUSH
17448: LD_VAR 0 2
17452: PUSH
17453: FOR_IN
17454: IFFALSE 17495
// for j := 1 to 4 do
17456: LD_ADDR_VAR 0 3
17460: PUSH
17461: DOUBLE
17462: LD_INT 1
17464: DEC
17465: ST_TO_ADDR
17466: LD_INT 4
17468: PUSH
17469: FOR_TO
17470: IFFALSE 17491
// SetSkill ( i , j , 10 ) ;
17472: LD_VAR 0 1
17476: PPUSH
17477: LD_VAR 0 3
17481: PPUSH
17482: LD_INT 10
17484: PPUSH
17485: CALL_OW 237
17489: GO 17469
17491: POP
17492: POP
17493: GO 17453
17495: POP
17496: POP
// end ;
17497: PPOPN 3
17499: END
// every 0 0$1 trigger s30 do var i , tmp ;
17500: LD_EXP 79
17504: IFFALSE 17573
17506: GO 17508
17508: DISABLE
17509: LD_INT 0
17511: PPUSH
17512: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17513: LD_ADDR_VAR 0 2
17517: PUSH
17518: LD_INT 22
17520: PUSH
17521: LD_OWVAR 2
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: PPUSH
17530: CALL_OW 69
17534: ST_TO_ADDR
// if not tmp then
17535: LD_VAR 0 2
17539: NOT
17540: IFFALSE 17544
// exit ;
17542: GO 17573
// for i in tmp do
17544: LD_ADDR_VAR 0 1
17548: PUSH
17549: LD_VAR 0 2
17553: PUSH
17554: FOR_IN
17555: IFFALSE 17571
// SetLives ( i , 300 ) ;
17557: LD_VAR 0 1
17561: PPUSH
17562: LD_INT 300
17564: PPUSH
17565: CALL_OW 234
17569: GO 17554
17571: POP
17572: POP
// end ;
17573: PPOPN 2
17575: END
// every 0 0$1 trigger s60 do var i , tmp ;
17576: LD_EXP 80
17580: IFFALSE 17649
17582: GO 17584
17584: DISABLE
17585: LD_INT 0
17587: PPUSH
17588: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17589: LD_ADDR_VAR 0 2
17593: PUSH
17594: LD_INT 22
17596: PUSH
17597: LD_OWVAR 2
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: PPUSH
17606: CALL_OW 69
17610: ST_TO_ADDR
// if not tmp then
17611: LD_VAR 0 2
17615: NOT
17616: IFFALSE 17620
// exit ;
17618: GO 17649
// for i in tmp do
17620: LD_ADDR_VAR 0 1
17624: PUSH
17625: LD_VAR 0 2
17629: PUSH
17630: FOR_IN
17631: IFFALSE 17647
// SetLives ( i , 600 ) ;
17633: LD_VAR 0 1
17637: PPUSH
17638: LD_INT 600
17640: PPUSH
17641: CALL_OW 234
17645: GO 17630
17647: POP
17648: POP
// end ;
17649: PPOPN 2
17651: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17652: LD_INT 0
17654: PPUSH
// case cmd of 301 :
17655: LD_VAR 0 1
17659: PUSH
17660: LD_INT 301
17662: DOUBLE
17663: EQUAL
17664: IFTRUE 17668
17666: GO 17700
17668: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17669: LD_VAR 0 6
17673: PPUSH
17674: LD_VAR 0 7
17678: PPUSH
17679: LD_VAR 0 8
17683: PPUSH
17684: LD_VAR 0 4
17688: PPUSH
17689: LD_VAR 0 5
17693: PPUSH
17694: CALL 18901 0 5
17698: GO 17821
17700: LD_INT 302
17702: DOUBLE
17703: EQUAL
17704: IFTRUE 17708
17706: GO 17745
17708: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17709: LD_VAR 0 6
17713: PPUSH
17714: LD_VAR 0 7
17718: PPUSH
17719: LD_VAR 0 8
17723: PPUSH
17724: LD_VAR 0 9
17728: PPUSH
17729: LD_VAR 0 4
17733: PPUSH
17734: LD_VAR 0 5
17738: PPUSH
17739: CALL 18992 0 6
17743: GO 17821
17745: LD_INT 303
17747: DOUBLE
17748: EQUAL
17749: IFTRUE 17753
17751: GO 17790
17753: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17754: LD_VAR 0 6
17758: PPUSH
17759: LD_VAR 0 7
17763: PPUSH
17764: LD_VAR 0 8
17768: PPUSH
17769: LD_VAR 0 9
17773: PPUSH
17774: LD_VAR 0 4
17778: PPUSH
17779: LD_VAR 0 5
17783: PPUSH
17784: CALL 17826 0 6
17788: GO 17821
17790: LD_INT 304
17792: DOUBLE
17793: EQUAL
17794: IFTRUE 17798
17796: GO 17820
17798: POP
// hHackTeleport ( unit , x , y ) ; end ;
17799: LD_VAR 0 2
17803: PPUSH
17804: LD_VAR 0 4
17808: PPUSH
17809: LD_VAR 0 5
17813: PPUSH
17814: CALL 19585 0 3
17818: GO 17821
17820: POP
// end ;
17821: LD_VAR 0 12
17825: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17826: LD_INT 0
17828: PPUSH
17829: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17830: LD_VAR 0 1
17834: PUSH
17835: LD_INT 1
17837: LESS
17838: PUSH
17839: LD_VAR 0 1
17843: PUSH
17844: LD_INT 3
17846: GREATER
17847: OR
17848: PUSH
17849: LD_VAR 0 5
17853: PPUSH
17854: LD_VAR 0 6
17858: PPUSH
17859: CALL_OW 428
17863: OR
17864: IFFALSE 17868
// exit ;
17866: GO 18588
// uc_side := your_side ;
17868: LD_ADDR_OWVAR 20
17872: PUSH
17873: LD_OWVAR 2
17877: ST_TO_ADDR
// uc_nation := nation ;
17878: LD_ADDR_OWVAR 21
17882: PUSH
17883: LD_VAR 0 1
17887: ST_TO_ADDR
// bc_level = 1 ;
17888: LD_ADDR_OWVAR 43
17892: PUSH
17893: LD_INT 1
17895: ST_TO_ADDR
// case btype of 1 :
17896: LD_VAR 0 2
17900: PUSH
17901: LD_INT 1
17903: DOUBLE
17904: EQUAL
17905: IFTRUE 17909
17907: GO 17920
17909: POP
// bc_type := b_depot ; 2 :
17910: LD_ADDR_OWVAR 42
17914: PUSH
17915: LD_INT 0
17917: ST_TO_ADDR
17918: GO 18532
17920: LD_INT 2
17922: DOUBLE
17923: EQUAL
17924: IFTRUE 17928
17926: GO 17939
17928: POP
// bc_type := b_warehouse ; 3 :
17929: LD_ADDR_OWVAR 42
17933: PUSH
17934: LD_INT 1
17936: ST_TO_ADDR
17937: GO 18532
17939: LD_INT 3
17941: DOUBLE
17942: EQUAL
17943: IFTRUE 17947
17945: GO 17958
17947: POP
// bc_type := b_lab ; 4 .. 9 :
17948: LD_ADDR_OWVAR 42
17952: PUSH
17953: LD_INT 6
17955: ST_TO_ADDR
17956: GO 18532
17958: LD_INT 4
17960: DOUBLE
17961: GREATEREQUAL
17962: IFFALSE 17970
17964: LD_INT 9
17966: DOUBLE
17967: LESSEQUAL
17968: IFTRUE 17972
17970: GO 18024
17972: POP
// begin bc_type := b_lab_half ;
17973: LD_ADDR_OWVAR 42
17977: PUSH
17978: LD_INT 7
17980: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17981: LD_ADDR_OWVAR 44
17985: PUSH
17986: LD_INT 10
17988: PUSH
17989: LD_INT 11
17991: PUSH
17992: LD_INT 12
17994: PUSH
17995: LD_INT 15
17997: PUSH
17998: LD_INT 14
18000: PUSH
18001: LD_INT 13
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: PUSH
18012: LD_VAR 0 2
18016: PUSH
18017: LD_INT 3
18019: MINUS
18020: ARRAY
18021: ST_TO_ADDR
// end ; 10 .. 13 :
18022: GO 18532
18024: LD_INT 10
18026: DOUBLE
18027: GREATEREQUAL
18028: IFFALSE 18036
18030: LD_INT 13
18032: DOUBLE
18033: LESSEQUAL
18034: IFTRUE 18038
18036: GO 18115
18038: POP
// begin bc_type := b_lab_full ;
18039: LD_ADDR_OWVAR 42
18043: PUSH
18044: LD_INT 8
18046: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18047: LD_ADDR_OWVAR 44
18051: PUSH
18052: LD_INT 10
18054: PUSH
18055: LD_INT 12
18057: PUSH
18058: LD_INT 14
18060: PUSH
18061: LD_INT 13
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: PUSH
18070: LD_VAR 0 2
18074: PUSH
18075: LD_INT 9
18077: MINUS
18078: ARRAY
18079: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18080: LD_ADDR_OWVAR 45
18084: PUSH
18085: LD_INT 11
18087: PUSH
18088: LD_INT 15
18090: PUSH
18091: LD_INT 12
18093: PUSH
18094: LD_INT 15
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: PUSH
18103: LD_VAR 0 2
18107: PUSH
18108: LD_INT 9
18110: MINUS
18111: ARRAY
18112: ST_TO_ADDR
// end ; 14 :
18113: GO 18532
18115: LD_INT 14
18117: DOUBLE
18118: EQUAL
18119: IFTRUE 18123
18121: GO 18134
18123: POP
// bc_type := b_workshop ; 15 :
18124: LD_ADDR_OWVAR 42
18128: PUSH
18129: LD_INT 2
18131: ST_TO_ADDR
18132: GO 18532
18134: LD_INT 15
18136: DOUBLE
18137: EQUAL
18138: IFTRUE 18142
18140: GO 18153
18142: POP
// bc_type := b_factory ; 16 :
18143: LD_ADDR_OWVAR 42
18147: PUSH
18148: LD_INT 3
18150: ST_TO_ADDR
18151: GO 18532
18153: LD_INT 16
18155: DOUBLE
18156: EQUAL
18157: IFTRUE 18161
18159: GO 18172
18161: POP
// bc_type := b_ext_gun ; 17 :
18162: LD_ADDR_OWVAR 42
18166: PUSH
18167: LD_INT 17
18169: ST_TO_ADDR
18170: GO 18532
18172: LD_INT 17
18174: DOUBLE
18175: EQUAL
18176: IFTRUE 18180
18178: GO 18208
18180: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18181: LD_ADDR_OWVAR 42
18185: PUSH
18186: LD_INT 19
18188: PUSH
18189: LD_INT 23
18191: PUSH
18192: LD_INT 19
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: LIST
18199: PUSH
18200: LD_VAR 0 1
18204: ARRAY
18205: ST_TO_ADDR
18206: GO 18532
18208: LD_INT 18
18210: DOUBLE
18211: EQUAL
18212: IFTRUE 18216
18214: GO 18227
18216: POP
// bc_type := b_ext_radar ; 19 :
18217: LD_ADDR_OWVAR 42
18221: PUSH
18222: LD_INT 20
18224: ST_TO_ADDR
18225: GO 18532
18227: LD_INT 19
18229: DOUBLE
18230: EQUAL
18231: IFTRUE 18235
18233: GO 18246
18235: POP
// bc_type := b_ext_radio ; 20 :
18236: LD_ADDR_OWVAR 42
18240: PUSH
18241: LD_INT 22
18243: ST_TO_ADDR
18244: GO 18532
18246: LD_INT 20
18248: DOUBLE
18249: EQUAL
18250: IFTRUE 18254
18252: GO 18265
18254: POP
// bc_type := b_ext_siberium ; 21 :
18255: LD_ADDR_OWVAR 42
18259: PUSH
18260: LD_INT 21
18262: ST_TO_ADDR
18263: GO 18532
18265: LD_INT 21
18267: DOUBLE
18268: EQUAL
18269: IFTRUE 18273
18271: GO 18284
18273: POP
// bc_type := b_ext_computer ; 22 :
18274: LD_ADDR_OWVAR 42
18278: PUSH
18279: LD_INT 24
18281: ST_TO_ADDR
18282: GO 18532
18284: LD_INT 22
18286: DOUBLE
18287: EQUAL
18288: IFTRUE 18292
18290: GO 18303
18292: POP
// bc_type := b_ext_track ; 23 :
18293: LD_ADDR_OWVAR 42
18297: PUSH
18298: LD_INT 16
18300: ST_TO_ADDR
18301: GO 18532
18303: LD_INT 23
18305: DOUBLE
18306: EQUAL
18307: IFTRUE 18311
18309: GO 18322
18311: POP
// bc_type := b_ext_laser ; 24 :
18312: LD_ADDR_OWVAR 42
18316: PUSH
18317: LD_INT 25
18319: ST_TO_ADDR
18320: GO 18532
18322: LD_INT 24
18324: DOUBLE
18325: EQUAL
18326: IFTRUE 18330
18328: GO 18341
18330: POP
// bc_type := b_control_tower ; 25 :
18331: LD_ADDR_OWVAR 42
18335: PUSH
18336: LD_INT 36
18338: ST_TO_ADDR
18339: GO 18532
18341: LD_INT 25
18343: DOUBLE
18344: EQUAL
18345: IFTRUE 18349
18347: GO 18360
18349: POP
// bc_type := b_breastwork ; 26 :
18350: LD_ADDR_OWVAR 42
18354: PUSH
18355: LD_INT 31
18357: ST_TO_ADDR
18358: GO 18532
18360: LD_INT 26
18362: DOUBLE
18363: EQUAL
18364: IFTRUE 18368
18366: GO 18379
18368: POP
// bc_type := b_bunker ; 27 :
18369: LD_ADDR_OWVAR 42
18373: PUSH
18374: LD_INT 32
18376: ST_TO_ADDR
18377: GO 18532
18379: LD_INT 27
18381: DOUBLE
18382: EQUAL
18383: IFTRUE 18387
18385: GO 18398
18387: POP
// bc_type := b_turret ; 28 :
18388: LD_ADDR_OWVAR 42
18392: PUSH
18393: LD_INT 33
18395: ST_TO_ADDR
18396: GO 18532
18398: LD_INT 28
18400: DOUBLE
18401: EQUAL
18402: IFTRUE 18406
18404: GO 18417
18406: POP
// bc_type := b_armoury ; 29 :
18407: LD_ADDR_OWVAR 42
18411: PUSH
18412: LD_INT 4
18414: ST_TO_ADDR
18415: GO 18532
18417: LD_INT 29
18419: DOUBLE
18420: EQUAL
18421: IFTRUE 18425
18423: GO 18436
18425: POP
// bc_type := b_barracks ; 30 :
18426: LD_ADDR_OWVAR 42
18430: PUSH
18431: LD_INT 5
18433: ST_TO_ADDR
18434: GO 18532
18436: LD_INT 30
18438: DOUBLE
18439: EQUAL
18440: IFTRUE 18444
18442: GO 18455
18444: POP
// bc_type := b_solar_power ; 31 :
18445: LD_ADDR_OWVAR 42
18449: PUSH
18450: LD_INT 27
18452: ST_TO_ADDR
18453: GO 18532
18455: LD_INT 31
18457: DOUBLE
18458: EQUAL
18459: IFTRUE 18463
18461: GO 18474
18463: POP
// bc_type := b_oil_power ; 32 :
18464: LD_ADDR_OWVAR 42
18468: PUSH
18469: LD_INT 26
18471: ST_TO_ADDR
18472: GO 18532
18474: LD_INT 32
18476: DOUBLE
18477: EQUAL
18478: IFTRUE 18482
18480: GO 18493
18482: POP
// bc_type := b_siberite_power ; 33 :
18483: LD_ADDR_OWVAR 42
18487: PUSH
18488: LD_INT 28
18490: ST_TO_ADDR
18491: GO 18532
18493: LD_INT 33
18495: DOUBLE
18496: EQUAL
18497: IFTRUE 18501
18499: GO 18512
18501: POP
// bc_type := b_oil_mine ; 34 :
18502: LD_ADDR_OWVAR 42
18506: PUSH
18507: LD_INT 29
18509: ST_TO_ADDR
18510: GO 18532
18512: LD_INT 34
18514: DOUBLE
18515: EQUAL
18516: IFTRUE 18520
18518: GO 18531
18520: POP
// bc_type := b_siberite_mine ; end ;
18521: LD_ADDR_OWVAR 42
18525: PUSH
18526: LD_INT 30
18528: ST_TO_ADDR
18529: GO 18532
18531: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18532: LD_ADDR_VAR 0 8
18536: PUSH
18537: LD_VAR 0 5
18541: PPUSH
18542: LD_VAR 0 6
18546: PPUSH
18547: LD_VAR 0 3
18551: PPUSH
18552: CALL_OW 47
18556: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18557: LD_OWVAR 42
18561: PUSH
18562: LD_INT 32
18564: PUSH
18565: LD_INT 33
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: IN
18572: IFFALSE 18588
// PlaceWeaponTurret ( b , weapon ) ;
18574: LD_VAR 0 8
18578: PPUSH
18579: LD_VAR 0 4
18583: PPUSH
18584: CALL_OW 431
// end ;
18588: LD_VAR 0 7
18592: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18593: LD_INT 0
18595: PPUSH
18596: PPUSH
18597: PPUSH
18598: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18599: LD_ADDR_VAR 0 4
18603: PUSH
18604: LD_INT 22
18606: PUSH
18607: LD_OWVAR 2
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PUSH
18616: LD_INT 2
18618: PUSH
18619: LD_INT 30
18621: PUSH
18622: LD_INT 0
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 30
18631: PUSH
18632: LD_INT 1
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: LIST
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PPUSH
18648: CALL_OW 69
18652: ST_TO_ADDR
// if not tmp then
18653: LD_VAR 0 4
18657: NOT
18658: IFFALSE 18662
// exit ;
18660: GO 18721
// for i in tmp do
18662: LD_ADDR_VAR 0 2
18666: PUSH
18667: LD_VAR 0 4
18671: PUSH
18672: FOR_IN
18673: IFFALSE 18719
// for j = 1 to 3 do
18675: LD_ADDR_VAR 0 3
18679: PUSH
18680: DOUBLE
18681: LD_INT 1
18683: DEC
18684: ST_TO_ADDR
18685: LD_INT 3
18687: PUSH
18688: FOR_TO
18689: IFFALSE 18715
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18691: LD_VAR 0 2
18695: PPUSH
18696: CALL_OW 274
18700: PPUSH
18701: LD_VAR 0 3
18705: PPUSH
18706: LD_INT 99999
18708: PPUSH
18709: CALL_OW 277
18713: GO 18688
18715: POP
18716: POP
18717: GO 18672
18719: POP
18720: POP
// end ;
18721: LD_VAR 0 1
18725: RET
// export function hHackSetLevel10 ; var i , j ; begin
18726: LD_INT 0
18728: PPUSH
18729: PPUSH
18730: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18731: LD_ADDR_VAR 0 2
18735: PUSH
18736: LD_INT 21
18738: PUSH
18739: LD_INT 1
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: PPUSH
18746: CALL_OW 69
18750: PUSH
18751: FOR_IN
18752: IFFALSE 18804
// if IsSelected ( i ) then
18754: LD_VAR 0 2
18758: PPUSH
18759: CALL_OW 306
18763: IFFALSE 18802
// begin for j := 1 to 4 do
18765: LD_ADDR_VAR 0 3
18769: PUSH
18770: DOUBLE
18771: LD_INT 1
18773: DEC
18774: ST_TO_ADDR
18775: LD_INT 4
18777: PUSH
18778: FOR_TO
18779: IFFALSE 18800
// SetSkill ( i , j , 10 ) ;
18781: LD_VAR 0 2
18785: PPUSH
18786: LD_VAR 0 3
18790: PPUSH
18791: LD_INT 10
18793: PPUSH
18794: CALL_OW 237
18798: GO 18778
18800: POP
18801: POP
// end ;
18802: GO 18751
18804: POP
18805: POP
// end ;
18806: LD_VAR 0 1
18810: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18811: LD_INT 0
18813: PPUSH
18814: PPUSH
18815: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18816: LD_ADDR_VAR 0 2
18820: PUSH
18821: LD_INT 22
18823: PUSH
18824: LD_OWVAR 2
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: LD_INT 21
18835: PUSH
18836: LD_INT 1
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PPUSH
18847: CALL_OW 69
18851: PUSH
18852: FOR_IN
18853: IFFALSE 18894
// begin for j := 1 to 4 do
18855: LD_ADDR_VAR 0 3
18859: PUSH
18860: DOUBLE
18861: LD_INT 1
18863: DEC
18864: ST_TO_ADDR
18865: LD_INT 4
18867: PUSH
18868: FOR_TO
18869: IFFALSE 18890
// SetSkill ( i , j , 10 ) ;
18871: LD_VAR 0 2
18875: PPUSH
18876: LD_VAR 0 3
18880: PPUSH
18881: LD_INT 10
18883: PPUSH
18884: CALL_OW 237
18888: GO 18868
18890: POP
18891: POP
// end ;
18892: GO 18852
18894: POP
18895: POP
// end ;
18896: LD_VAR 0 1
18900: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18901: LD_INT 0
18903: PPUSH
// uc_side := your_side ;
18904: LD_ADDR_OWVAR 20
18908: PUSH
18909: LD_OWVAR 2
18913: ST_TO_ADDR
// uc_nation := nation ;
18914: LD_ADDR_OWVAR 21
18918: PUSH
18919: LD_VAR 0 1
18923: ST_TO_ADDR
// InitHc ;
18924: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18928: LD_INT 0
18930: PPUSH
18931: LD_VAR 0 2
18935: PPUSH
18936: LD_VAR 0 3
18940: PPUSH
18941: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18945: LD_VAR 0 4
18949: PPUSH
18950: LD_VAR 0 5
18954: PPUSH
18955: CALL_OW 428
18959: PUSH
18960: LD_INT 0
18962: EQUAL
18963: IFFALSE 18987
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18965: CALL_OW 44
18969: PPUSH
18970: LD_VAR 0 4
18974: PPUSH
18975: LD_VAR 0 5
18979: PPUSH
18980: LD_INT 1
18982: PPUSH
18983: CALL_OW 48
// end ;
18987: LD_VAR 0 6
18991: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18992: LD_INT 0
18994: PPUSH
18995: PPUSH
// uc_side := your_side ;
18996: LD_ADDR_OWVAR 20
19000: PUSH
19001: LD_OWVAR 2
19005: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19006: LD_VAR 0 1
19010: PUSH
19011: LD_INT 1
19013: PUSH
19014: LD_INT 2
19016: PUSH
19017: LD_INT 3
19019: PUSH
19020: LD_INT 4
19022: PUSH
19023: LD_INT 5
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: IN
19033: IFFALSE 19045
// uc_nation := nation_american else
19035: LD_ADDR_OWVAR 21
19039: PUSH
19040: LD_INT 1
19042: ST_TO_ADDR
19043: GO 19088
// if chassis in [ 11 , 12 , 13 , 14 ] then
19045: LD_VAR 0 1
19049: PUSH
19050: LD_INT 11
19052: PUSH
19053: LD_INT 12
19055: PUSH
19056: LD_INT 13
19058: PUSH
19059: LD_INT 14
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: IN
19068: IFFALSE 19080
// uc_nation := nation_arabian else
19070: LD_ADDR_OWVAR 21
19074: PUSH
19075: LD_INT 2
19077: ST_TO_ADDR
19078: GO 19088
// uc_nation := nation_russian ;
19080: LD_ADDR_OWVAR 21
19084: PUSH
19085: LD_INT 3
19087: ST_TO_ADDR
// vc_chassis := chassis ;
19088: LD_ADDR_OWVAR 37
19092: PUSH
19093: LD_VAR 0 1
19097: ST_TO_ADDR
// vc_engine := engine ;
19098: LD_ADDR_OWVAR 39
19102: PUSH
19103: LD_VAR 0 2
19107: ST_TO_ADDR
// vc_control := control ;
19108: LD_ADDR_OWVAR 38
19112: PUSH
19113: LD_VAR 0 3
19117: ST_TO_ADDR
// vc_weapon := weapon ;
19118: LD_ADDR_OWVAR 40
19122: PUSH
19123: LD_VAR 0 4
19127: ST_TO_ADDR
// un := CreateVehicle ;
19128: LD_ADDR_VAR 0 8
19132: PUSH
19133: CALL_OW 45
19137: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19138: LD_VAR 0 8
19142: PPUSH
19143: LD_INT 0
19145: PPUSH
19146: LD_INT 5
19148: PPUSH
19149: CALL_OW 12
19153: PPUSH
19154: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19158: LD_VAR 0 8
19162: PPUSH
19163: LD_VAR 0 5
19167: PPUSH
19168: LD_VAR 0 6
19172: PPUSH
19173: LD_INT 1
19175: PPUSH
19176: CALL_OW 48
// end ;
19180: LD_VAR 0 7
19184: RET
// export hInvincible ; every 1 do
19185: GO 19187
19187: DISABLE
// hInvincible := [ ] ;
19188: LD_ADDR_EXP 81
19192: PUSH
19193: EMPTY
19194: ST_TO_ADDR
19195: END
// every 10 do var i ;
19196: GO 19198
19198: DISABLE
19199: LD_INT 0
19201: PPUSH
// begin enable ;
19202: ENABLE
// if not hInvincible then
19203: LD_EXP 81
19207: NOT
19208: IFFALSE 19212
// exit ;
19210: GO 19256
// for i in hInvincible do
19212: LD_ADDR_VAR 0 1
19216: PUSH
19217: LD_EXP 81
19221: PUSH
19222: FOR_IN
19223: IFFALSE 19254
// if GetLives ( i ) < 1000 then
19225: LD_VAR 0 1
19229: PPUSH
19230: CALL_OW 256
19234: PUSH
19235: LD_INT 1000
19237: LESS
19238: IFFALSE 19252
// SetLives ( i , 1000 ) ;
19240: LD_VAR 0 1
19244: PPUSH
19245: LD_INT 1000
19247: PPUSH
19248: CALL_OW 234
19252: GO 19222
19254: POP
19255: POP
// end ;
19256: PPOPN 1
19258: END
// export function hHackInvincible ; var i ; begin
19259: LD_INT 0
19261: PPUSH
19262: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19263: LD_ADDR_VAR 0 2
19267: PUSH
19268: LD_INT 2
19270: PUSH
19271: LD_INT 21
19273: PUSH
19274: LD_INT 1
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 21
19283: PUSH
19284: LD_INT 2
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: LIST
19295: PPUSH
19296: CALL_OW 69
19300: PUSH
19301: FOR_IN
19302: IFFALSE 19363
// if IsSelected ( i ) then
19304: LD_VAR 0 2
19308: PPUSH
19309: CALL_OW 306
19313: IFFALSE 19361
// begin if i in hInvincible then
19315: LD_VAR 0 2
19319: PUSH
19320: LD_EXP 81
19324: IN
19325: IFFALSE 19345
// hInvincible := hInvincible diff i else
19327: LD_ADDR_EXP 81
19331: PUSH
19332: LD_EXP 81
19336: PUSH
19337: LD_VAR 0 2
19341: DIFF
19342: ST_TO_ADDR
19343: GO 19361
// hInvincible := hInvincible union i ;
19345: LD_ADDR_EXP 81
19349: PUSH
19350: LD_EXP 81
19354: PUSH
19355: LD_VAR 0 2
19359: UNION
19360: ST_TO_ADDR
// end ;
19361: GO 19301
19363: POP
19364: POP
// end ;
19365: LD_VAR 0 1
19369: RET
// export function hHackInvisible ; var i , j ; begin
19370: LD_INT 0
19372: PPUSH
19373: PPUSH
19374: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19375: LD_ADDR_VAR 0 2
19379: PUSH
19380: LD_INT 21
19382: PUSH
19383: LD_INT 1
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PPUSH
19390: CALL_OW 69
19394: PUSH
19395: FOR_IN
19396: IFFALSE 19420
// if IsSelected ( i ) then
19398: LD_VAR 0 2
19402: PPUSH
19403: CALL_OW 306
19407: IFFALSE 19418
// ComForceInvisible ( i ) ;
19409: LD_VAR 0 2
19413: PPUSH
19414: CALL_OW 496
19418: GO 19395
19420: POP
19421: POP
// end ;
19422: LD_VAR 0 1
19426: RET
// export function hHackChangeYourSide ; begin
19427: LD_INT 0
19429: PPUSH
// if your_side = 8 then
19430: LD_OWVAR 2
19434: PUSH
19435: LD_INT 8
19437: EQUAL
19438: IFFALSE 19450
// your_side := 0 else
19440: LD_ADDR_OWVAR 2
19444: PUSH
19445: LD_INT 0
19447: ST_TO_ADDR
19448: GO 19464
// your_side := your_side + 1 ;
19450: LD_ADDR_OWVAR 2
19454: PUSH
19455: LD_OWVAR 2
19459: PUSH
19460: LD_INT 1
19462: PLUS
19463: ST_TO_ADDR
// end ;
19464: LD_VAR 0 1
19468: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19469: LD_INT 0
19471: PPUSH
19472: PPUSH
19473: PPUSH
// for i in all_units do
19474: LD_ADDR_VAR 0 2
19478: PUSH
19479: LD_OWVAR 3
19483: PUSH
19484: FOR_IN
19485: IFFALSE 19563
// if IsSelected ( i ) then
19487: LD_VAR 0 2
19491: PPUSH
19492: CALL_OW 306
19496: IFFALSE 19561
// begin j := GetSide ( i ) ;
19498: LD_ADDR_VAR 0 3
19502: PUSH
19503: LD_VAR 0 2
19507: PPUSH
19508: CALL_OW 255
19512: ST_TO_ADDR
// if j = 8 then
19513: LD_VAR 0 3
19517: PUSH
19518: LD_INT 8
19520: EQUAL
19521: IFFALSE 19533
// j := 0 else
19523: LD_ADDR_VAR 0 3
19527: PUSH
19528: LD_INT 0
19530: ST_TO_ADDR
19531: GO 19547
// j := j + 1 ;
19533: LD_ADDR_VAR 0 3
19537: PUSH
19538: LD_VAR 0 3
19542: PUSH
19543: LD_INT 1
19545: PLUS
19546: ST_TO_ADDR
// SetSide ( i , j ) ;
19547: LD_VAR 0 2
19551: PPUSH
19552: LD_VAR 0 3
19556: PPUSH
19557: CALL_OW 235
// end ;
19561: GO 19484
19563: POP
19564: POP
// end ;
19565: LD_VAR 0 1
19569: RET
// export function hHackFog ; begin
19570: LD_INT 0
19572: PPUSH
// FogOff ( true ) ;
19573: LD_INT 1
19575: PPUSH
19576: CALL_OW 344
// end ;
19580: LD_VAR 0 1
19584: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19585: LD_INT 0
19587: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19588: LD_VAR 0 1
19592: PPUSH
19593: LD_VAR 0 2
19597: PPUSH
19598: LD_VAR 0 3
19602: PPUSH
19603: LD_INT 1
19605: PPUSH
19606: LD_INT 1
19608: PPUSH
19609: CALL_OW 483
// CenterOnXY ( x , y ) ;
19613: LD_VAR 0 2
19617: PPUSH
19618: LD_VAR 0 3
19622: PPUSH
19623: CALL_OW 84
// end ; end_of_file
19627: LD_VAR 0 4
19631: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19632: LD_INT 0
19634: PPUSH
19635: PPUSH
19636: PPUSH
19637: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19638: LD_VAR 0 1
19642: PPUSH
19643: CALL_OW 264
19647: PUSH
19648: LD_EXP 98
19652: EQUAL
19653: IFFALSE 19725
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19655: LD_INT 68
19657: PPUSH
19658: LD_VAR 0 1
19662: PPUSH
19663: CALL_OW 255
19667: PPUSH
19668: CALL_OW 321
19672: PUSH
19673: LD_INT 2
19675: EQUAL
19676: IFFALSE 19688
// eff := 70 else
19678: LD_ADDR_VAR 0 4
19682: PUSH
19683: LD_INT 70
19685: ST_TO_ADDR
19686: GO 19696
// eff := 30 ;
19688: LD_ADDR_VAR 0 4
19692: PUSH
19693: LD_INT 30
19695: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19696: LD_VAR 0 1
19700: PPUSH
19701: CALL_OW 250
19705: PPUSH
19706: LD_VAR 0 1
19710: PPUSH
19711: CALL_OW 251
19715: PPUSH
19716: LD_VAR 0 4
19720: PPUSH
19721: CALL_OW 495
// end ; end ;
19725: LD_VAR 0 2
19729: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
19730: LD_INT 0
19732: PPUSH
// end ;
19733: LD_VAR 0 4
19737: RET
// export function SOS_Command ( cmd ) ; begin
19738: LD_INT 0
19740: PPUSH
// end ;
19741: LD_VAR 0 2
19745: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
19746: LD_INT 0
19748: PPUSH
// end ;
19749: LD_VAR 0 6
19753: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
19754: LD_INT 0
19756: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
19757: LD_VAR 0 1
19761: PUSH
19762: LD_INT 250
19764: EQUAL
19765: PUSH
19766: LD_VAR 0 2
19770: PPUSH
19771: CALL_OW 264
19775: PUSH
19776: LD_EXP 101
19780: EQUAL
19781: AND
19782: IFFALSE 19803
// MinerPlaceMine ( unit , x , y ) ;
19784: LD_VAR 0 2
19788: PPUSH
19789: LD_VAR 0 4
19793: PPUSH
19794: LD_VAR 0 5
19798: PPUSH
19799: CALL 22152 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
19803: LD_VAR 0 1
19807: PUSH
19808: LD_INT 251
19810: EQUAL
19811: PUSH
19812: LD_VAR 0 2
19816: PPUSH
19817: CALL_OW 264
19821: PUSH
19822: LD_EXP 101
19826: EQUAL
19827: AND
19828: IFFALSE 19849
// MinerDetonateMine ( unit , x , y ) ;
19830: LD_VAR 0 2
19834: PPUSH
19835: LD_VAR 0 4
19839: PPUSH
19840: LD_VAR 0 5
19844: PPUSH
19845: CALL 22429 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
19849: LD_VAR 0 1
19853: PUSH
19854: LD_INT 252
19856: EQUAL
19857: PUSH
19858: LD_VAR 0 2
19862: PPUSH
19863: CALL_OW 264
19867: PUSH
19868: LD_EXP 101
19872: EQUAL
19873: AND
19874: IFFALSE 19895
// MinerCreateMinefield ( unit , x , y ) ;
19876: LD_VAR 0 2
19880: PPUSH
19881: LD_VAR 0 4
19885: PPUSH
19886: LD_VAR 0 5
19890: PPUSH
19891: CALL 22846 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
19895: LD_VAR 0 1
19899: PUSH
19900: LD_INT 253
19902: EQUAL
19903: PUSH
19904: LD_VAR 0 2
19908: PPUSH
19909: CALL_OW 257
19913: PUSH
19914: LD_INT 5
19916: EQUAL
19917: AND
19918: IFFALSE 19939
// ComBinocular ( unit , x , y ) ;
19920: LD_VAR 0 2
19924: PPUSH
19925: LD_VAR 0 4
19929: PPUSH
19930: LD_VAR 0 5
19934: PPUSH
19935: CALL 23217 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
19939: LD_VAR 0 1
19943: PUSH
19944: LD_INT 254
19946: EQUAL
19947: PUSH
19948: LD_VAR 0 2
19952: PPUSH
19953: CALL_OW 264
19957: PUSH
19958: LD_EXP 96
19962: EQUAL
19963: AND
19964: PUSH
19965: LD_VAR 0 3
19969: PPUSH
19970: CALL_OW 263
19974: PUSH
19975: LD_INT 3
19977: EQUAL
19978: AND
19979: IFFALSE 19995
// HackDestroyVehicle ( unit , selectedUnit ) ;
19981: LD_VAR 0 2
19985: PPUSH
19986: LD_VAR 0 3
19990: PPUSH
19991: CALL 21512 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
19995: LD_VAR 0 1
19999: PUSH
20000: LD_INT 255
20002: EQUAL
20003: PUSH
20004: LD_VAR 0 2
20008: PPUSH
20009: CALL_OW 264
20013: PUSH
20014: LD_INT 14
20016: PUSH
20017: LD_INT 53
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: IN
20024: AND
20025: PUSH
20026: LD_VAR 0 4
20030: PPUSH
20031: LD_VAR 0 5
20035: PPUSH
20036: CALL_OW 488
20040: AND
20041: IFFALSE 20065
// CutTreeXYR ( unit , x , y , 12 ) ;
20043: LD_VAR 0 2
20047: PPUSH
20048: LD_VAR 0 4
20052: PPUSH
20053: LD_VAR 0 5
20057: PPUSH
20058: LD_INT 12
20060: PPUSH
20061: CALL 20078 0 4
// end ;
20065: LD_VAR 0 6
20069: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
20070: LD_INT 0
20072: PPUSH
// end ;
20073: LD_VAR 0 4
20077: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20078: LD_INT 0
20080: PPUSH
20081: PPUSH
20082: PPUSH
20083: PPUSH
20084: PPUSH
20085: PPUSH
20086: PPUSH
20087: PPUSH
20088: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20089: LD_VAR 0 1
20093: NOT
20094: PUSH
20095: LD_VAR 0 2
20099: PPUSH
20100: LD_VAR 0 3
20104: PPUSH
20105: CALL_OW 488
20109: NOT
20110: OR
20111: PUSH
20112: LD_VAR 0 4
20116: NOT
20117: OR
20118: IFFALSE 20122
// exit ;
20120: GO 20462
// list := [ ] ;
20122: LD_ADDR_VAR 0 13
20126: PUSH
20127: EMPTY
20128: ST_TO_ADDR
// if x - r < 0 then
20129: LD_VAR 0 2
20133: PUSH
20134: LD_VAR 0 4
20138: MINUS
20139: PUSH
20140: LD_INT 0
20142: LESS
20143: IFFALSE 20155
// min_x := 0 else
20145: LD_ADDR_VAR 0 7
20149: PUSH
20150: LD_INT 0
20152: ST_TO_ADDR
20153: GO 20171
// min_x := x - r ;
20155: LD_ADDR_VAR 0 7
20159: PUSH
20160: LD_VAR 0 2
20164: PUSH
20165: LD_VAR 0 4
20169: MINUS
20170: ST_TO_ADDR
// if y - r < 0 then
20171: LD_VAR 0 3
20175: PUSH
20176: LD_VAR 0 4
20180: MINUS
20181: PUSH
20182: LD_INT 0
20184: LESS
20185: IFFALSE 20197
// min_y := 0 else
20187: LD_ADDR_VAR 0 8
20191: PUSH
20192: LD_INT 0
20194: ST_TO_ADDR
20195: GO 20213
// min_y := y - r ;
20197: LD_ADDR_VAR 0 8
20201: PUSH
20202: LD_VAR 0 3
20206: PUSH
20207: LD_VAR 0 4
20211: MINUS
20212: ST_TO_ADDR
// max_x := x + r ;
20213: LD_ADDR_VAR 0 9
20217: PUSH
20218: LD_VAR 0 2
20222: PUSH
20223: LD_VAR 0 4
20227: PLUS
20228: ST_TO_ADDR
// max_y := y + r ;
20229: LD_ADDR_VAR 0 10
20233: PUSH
20234: LD_VAR 0 3
20238: PUSH
20239: LD_VAR 0 4
20243: PLUS
20244: ST_TO_ADDR
// for _x = min_x to max_x do
20245: LD_ADDR_VAR 0 11
20249: PUSH
20250: DOUBLE
20251: LD_VAR 0 7
20255: DEC
20256: ST_TO_ADDR
20257: LD_VAR 0 9
20261: PUSH
20262: FOR_TO
20263: IFFALSE 20380
// for _y = min_y to max_y do
20265: LD_ADDR_VAR 0 12
20269: PUSH
20270: DOUBLE
20271: LD_VAR 0 8
20275: DEC
20276: ST_TO_ADDR
20277: LD_VAR 0 10
20281: PUSH
20282: FOR_TO
20283: IFFALSE 20376
// begin if not ValidHex ( _x , _y ) then
20285: LD_VAR 0 11
20289: PPUSH
20290: LD_VAR 0 12
20294: PPUSH
20295: CALL_OW 488
20299: NOT
20300: IFFALSE 20304
// continue ;
20302: GO 20282
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20304: LD_VAR 0 11
20308: PPUSH
20309: LD_VAR 0 12
20313: PPUSH
20314: CALL_OW 351
20318: PUSH
20319: LD_VAR 0 11
20323: PPUSH
20324: LD_VAR 0 12
20328: PPUSH
20329: CALL_OW 554
20333: AND
20334: IFFALSE 20374
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20336: LD_ADDR_VAR 0 13
20340: PUSH
20341: LD_VAR 0 13
20345: PPUSH
20346: LD_VAR 0 13
20350: PUSH
20351: LD_INT 1
20353: PLUS
20354: PPUSH
20355: LD_VAR 0 11
20359: PUSH
20360: LD_VAR 0 12
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: PPUSH
20369: CALL_OW 2
20373: ST_TO_ADDR
// end ;
20374: GO 20282
20376: POP
20377: POP
20378: GO 20262
20380: POP
20381: POP
// if not list then
20382: LD_VAR 0 13
20386: NOT
20387: IFFALSE 20391
// exit ;
20389: GO 20462
// for i in list do
20391: LD_ADDR_VAR 0 6
20395: PUSH
20396: LD_VAR 0 13
20400: PUSH
20401: FOR_IN
20402: IFFALSE 20460
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20404: LD_VAR 0 1
20408: PPUSH
20409: LD_STRING M
20411: PUSH
20412: LD_VAR 0 6
20416: PUSH
20417: LD_INT 1
20419: ARRAY
20420: PUSH
20421: LD_VAR 0 6
20425: PUSH
20426: LD_INT 2
20428: ARRAY
20429: PUSH
20430: LD_INT 0
20432: PUSH
20433: LD_INT 0
20435: PUSH
20436: LD_INT 0
20438: PUSH
20439: LD_INT 0
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: PUSH
20451: EMPTY
20452: LIST
20453: PPUSH
20454: CALL_OW 447
20458: GO 20401
20460: POP
20461: POP
// end ;
20462: LD_VAR 0 5
20466: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
20467: LD_EXP 84
20471: NOT
20472: IFFALSE 20522
20474: GO 20476
20476: DISABLE
// begin initHack := true ;
20477: LD_ADDR_EXP 84
20481: PUSH
20482: LD_INT 1
20484: ST_TO_ADDR
// hackTanks := [ ] ;
20485: LD_ADDR_EXP 85
20489: PUSH
20490: EMPTY
20491: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
20492: LD_ADDR_EXP 86
20496: PUSH
20497: EMPTY
20498: ST_TO_ADDR
// hackLimit := 3 ;
20499: LD_ADDR_EXP 87
20503: PUSH
20504: LD_INT 3
20506: ST_TO_ADDR
// hackDist := 12 ;
20507: LD_ADDR_EXP 88
20511: PUSH
20512: LD_INT 12
20514: ST_TO_ADDR
// hackCounter := [ ] ;
20515: LD_ADDR_EXP 89
20519: PUSH
20520: EMPTY
20521: ST_TO_ADDR
// end ;
20522: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
20523: LD_EXP 84
20527: PUSH
20528: LD_INT 34
20530: PUSH
20531: LD_EXP 96
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PPUSH
20540: CALL_OW 69
20544: AND
20545: IFFALSE 20800
20547: GO 20549
20549: DISABLE
20550: LD_INT 0
20552: PPUSH
20553: PPUSH
// begin enable ;
20554: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
20555: LD_ADDR_VAR 0 1
20559: PUSH
20560: LD_INT 34
20562: PUSH
20563: LD_EXP 96
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PPUSH
20572: CALL_OW 69
20576: PUSH
20577: FOR_IN
20578: IFFALSE 20798
// begin if not i in hackTanks then
20580: LD_VAR 0 1
20584: PUSH
20585: LD_EXP 85
20589: IN
20590: NOT
20591: IFFALSE 20674
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
20593: LD_ADDR_EXP 85
20597: PUSH
20598: LD_EXP 85
20602: PPUSH
20603: LD_EXP 85
20607: PUSH
20608: LD_INT 1
20610: PLUS
20611: PPUSH
20612: LD_VAR 0 1
20616: PPUSH
20617: CALL_OW 1
20621: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
20622: LD_ADDR_EXP 86
20626: PUSH
20627: LD_EXP 86
20631: PPUSH
20632: LD_EXP 86
20636: PUSH
20637: LD_INT 1
20639: PLUS
20640: PPUSH
20641: EMPTY
20642: PPUSH
20643: CALL_OW 1
20647: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
20648: LD_ADDR_EXP 89
20652: PUSH
20653: LD_EXP 89
20657: PPUSH
20658: LD_EXP 89
20662: PUSH
20663: LD_INT 1
20665: PLUS
20666: PPUSH
20667: EMPTY
20668: PPUSH
20669: CALL_OW 1
20673: ST_TO_ADDR
// end ; if not IsOk ( i ) then
20674: LD_VAR 0 1
20678: PPUSH
20679: CALL_OW 302
20683: NOT
20684: IFFALSE 20697
// begin HackUnlinkAll ( i ) ;
20686: LD_VAR 0 1
20690: PPUSH
20691: CALL 20803 0 1
// continue ;
20695: GO 20577
// end ; HackCheckCapturedStatus ( i ) ;
20697: LD_VAR 0 1
20701: PPUSH
20702: CALL 21246 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
20706: LD_ADDR_VAR 0 2
20710: PUSH
20711: LD_INT 81
20713: PUSH
20714: LD_VAR 0 1
20718: PPUSH
20719: CALL_OW 255
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PUSH
20728: LD_INT 33
20730: PUSH
20731: LD_INT 3
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PUSH
20738: LD_INT 91
20740: PUSH
20741: LD_VAR 0 1
20745: PUSH
20746: LD_EXP 88
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: LIST
20755: PUSH
20756: LD_INT 50
20758: PUSH
20759: EMPTY
20760: LIST
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: PPUSH
20768: CALL_OW 69
20772: ST_TO_ADDR
// if not tmp then
20773: LD_VAR 0 2
20777: NOT
20778: IFFALSE 20782
// continue ;
20780: GO 20577
// HackLink ( i , tmp ) ;
20782: LD_VAR 0 1
20786: PPUSH
20787: LD_VAR 0 2
20791: PPUSH
20792: CALL 20939 0 2
// end ;
20796: GO 20577
20798: POP
20799: POP
// end ;
20800: PPOPN 2
20802: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
20803: LD_INT 0
20805: PPUSH
20806: PPUSH
20807: PPUSH
// if not hack in hackTanks then
20808: LD_VAR 0 1
20812: PUSH
20813: LD_EXP 85
20817: IN
20818: NOT
20819: IFFALSE 20823
// exit ;
20821: GO 20934
// index := GetElementIndex ( hackTanks , hack ) ;
20823: LD_ADDR_VAR 0 4
20827: PUSH
20828: LD_EXP 85
20832: PPUSH
20833: LD_VAR 0 1
20837: PPUSH
20838: CALL 28576 0 2
20842: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
20843: LD_EXP 86
20847: PUSH
20848: LD_VAR 0 4
20852: ARRAY
20853: IFFALSE 20934
// begin for i in hackTanksCaptured [ index ] do
20855: LD_ADDR_VAR 0 3
20859: PUSH
20860: LD_EXP 86
20864: PUSH
20865: LD_VAR 0 4
20869: ARRAY
20870: PUSH
20871: FOR_IN
20872: IFFALSE 20898
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
20874: LD_VAR 0 3
20878: PUSH
20879: LD_INT 1
20881: ARRAY
20882: PPUSH
20883: LD_VAR 0 3
20887: PUSH
20888: LD_INT 2
20890: ARRAY
20891: PPUSH
20892: CALL_OW 235
20896: GO 20871
20898: POP
20899: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
20900: LD_ADDR_EXP 86
20904: PUSH
20905: LD_EXP 86
20909: PPUSH
20910: LD_VAR 0 4
20914: PPUSH
20915: EMPTY
20916: PPUSH
20917: CALL_OW 1
20921: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
20922: LD_VAR 0 1
20926: PPUSH
20927: LD_INT 0
20929: PPUSH
20930: CALL_OW 505
// end ; end ;
20934: LD_VAR 0 2
20938: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
20939: LD_INT 0
20941: PPUSH
20942: PPUSH
20943: PPUSH
// if not hack in hackTanks or not vehicles then
20944: LD_VAR 0 1
20948: PUSH
20949: LD_EXP 85
20953: IN
20954: NOT
20955: PUSH
20956: LD_VAR 0 2
20960: NOT
20961: OR
20962: IFFALSE 20966
// exit ;
20964: GO 21241
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
20966: LD_ADDR_VAR 0 2
20970: PUSH
20971: LD_VAR 0 1
20975: PPUSH
20976: LD_VAR 0 2
20980: PPUSH
20981: LD_INT 1
20983: PPUSH
20984: LD_INT 1
20986: PPUSH
20987: CALL 29226 0 4
20991: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
20992: LD_ADDR_VAR 0 5
20996: PUSH
20997: LD_EXP 85
21001: PPUSH
21002: LD_VAR 0 1
21006: PPUSH
21007: CALL 28576 0 2
21011: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21012: LD_EXP 86
21016: PUSH
21017: LD_VAR 0 5
21021: ARRAY
21022: PUSH
21023: LD_EXP 87
21027: LESS
21028: IFFALSE 21217
// begin for i := 1 to vehicles do
21030: LD_ADDR_VAR 0 4
21034: PUSH
21035: DOUBLE
21036: LD_INT 1
21038: DEC
21039: ST_TO_ADDR
21040: LD_VAR 0 2
21044: PUSH
21045: FOR_TO
21046: IFFALSE 21215
// begin if hackTanksCaptured [ index ] = hackLimit then
21048: LD_EXP 86
21052: PUSH
21053: LD_VAR 0 5
21057: ARRAY
21058: PUSH
21059: LD_EXP 87
21063: EQUAL
21064: IFFALSE 21068
// break ;
21066: GO 21215
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21068: LD_ADDR_EXP 89
21072: PUSH
21073: LD_EXP 89
21077: PPUSH
21078: LD_VAR 0 5
21082: PPUSH
21083: LD_EXP 89
21087: PUSH
21088: LD_VAR 0 5
21092: ARRAY
21093: PUSH
21094: LD_INT 1
21096: PLUS
21097: PPUSH
21098: CALL_OW 1
21102: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21103: LD_ADDR_EXP 86
21107: PUSH
21108: LD_EXP 86
21112: PPUSH
21113: LD_VAR 0 5
21117: PUSH
21118: LD_EXP 86
21122: PUSH
21123: LD_VAR 0 5
21127: ARRAY
21128: PUSH
21129: LD_INT 1
21131: PLUS
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PPUSH
21137: LD_VAR 0 2
21141: PUSH
21142: LD_VAR 0 4
21146: ARRAY
21147: PUSH
21148: LD_VAR 0 2
21152: PUSH
21153: LD_VAR 0 4
21157: ARRAY
21158: PPUSH
21159: CALL_OW 255
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: PPUSH
21168: CALL 28791 0 3
21172: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21173: LD_VAR 0 2
21177: PUSH
21178: LD_VAR 0 4
21182: ARRAY
21183: PPUSH
21184: LD_VAR 0 1
21188: PPUSH
21189: CALL_OW 255
21193: PPUSH
21194: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21198: LD_VAR 0 2
21202: PUSH
21203: LD_VAR 0 4
21207: ARRAY
21208: PPUSH
21209: CALL_OW 141
// end ;
21213: GO 21045
21215: POP
21216: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21217: LD_VAR 0 1
21221: PPUSH
21222: LD_EXP 86
21226: PUSH
21227: LD_VAR 0 5
21231: ARRAY
21232: PUSH
21233: LD_INT 0
21235: PLUS
21236: PPUSH
21237: CALL_OW 505
// end ;
21241: LD_VAR 0 3
21245: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
21246: LD_INT 0
21248: PPUSH
21249: PPUSH
21250: PPUSH
21251: PPUSH
// if not hack in hackTanks then
21252: LD_VAR 0 1
21256: PUSH
21257: LD_EXP 85
21261: IN
21262: NOT
21263: IFFALSE 21267
// exit ;
21265: GO 21507
// index := GetElementIndex ( hackTanks , hack ) ;
21267: LD_ADDR_VAR 0 4
21271: PUSH
21272: LD_EXP 85
21276: PPUSH
21277: LD_VAR 0 1
21281: PPUSH
21282: CALL 28576 0 2
21286: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
21287: LD_ADDR_VAR 0 3
21291: PUSH
21292: DOUBLE
21293: LD_EXP 86
21297: PUSH
21298: LD_VAR 0 4
21302: ARRAY
21303: INC
21304: ST_TO_ADDR
21305: LD_INT 1
21307: PUSH
21308: FOR_DOWNTO
21309: IFFALSE 21481
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
21311: LD_ADDR_VAR 0 5
21315: PUSH
21316: LD_EXP 86
21320: PUSH
21321: LD_VAR 0 4
21325: ARRAY
21326: PUSH
21327: LD_VAR 0 3
21331: ARRAY
21332: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
21333: LD_VAR 0 5
21337: PUSH
21338: LD_INT 1
21340: ARRAY
21341: PPUSH
21342: CALL_OW 302
21346: NOT
21347: PUSH
21348: LD_VAR 0 5
21352: PUSH
21353: LD_INT 1
21355: ARRAY
21356: PPUSH
21357: CALL_OW 255
21361: PUSH
21362: LD_VAR 0 1
21366: PPUSH
21367: CALL_OW 255
21371: NONEQUAL
21372: OR
21373: IFFALSE 21479
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
21375: LD_VAR 0 5
21379: PUSH
21380: LD_INT 1
21382: ARRAY
21383: PPUSH
21384: CALL_OW 305
21388: PUSH
21389: LD_VAR 0 5
21393: PUSH
21394: LD_INT 1
21396: ARRAY
21397: PPUSH
21398: CALL_OW 255
21402: PUSH
21403: LD_VAR 0 1
21407: PPUSH
21408: CALL_OW 255
21412: EQUAL
21413: AND
21414: IFFALSE 21438
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
21416: LD_VAR 0 5
21420: PUSH
21421: LD_INT 1
21423: ARRAY
21424: PPUSH
21425: LD_VAR 0 5
21429: PUSH
21430: LD_INT 2
21432: ARRAY
21433: PPUSH
21434: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
21438: LD_ADDR_EXP 86
21442: PUSH
21443: LD_EXP 86
21447: PPUSH
21448: LD_VAR 0 4
21452: PPUSH
21453: LD_EXP 86
21457: PUSH
21458: LD_VAR 0 4
21462: ARRAY
21463: PPUSH
21464: LD_VAR 0 3
21468: PPUSH
21469: CALL_OW 3
21473: PPUSH
21474: CALL_OW 1
21478: ST_TO_ADDR
// end ; end ;
21479: GO 21308
21481: POP
21482: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21483: LD_VAR 0 1
21487: PPUSH
21488: LD_EXP 86
21492: PUSH
21493: LD_VAR 0 4
21497: ARRAY
21498: PUSH
21499: LD_INT 0
21501: PLUS
21502: PPUSH
21503: CALL_OW 505
// end ;
21507: LD_VAR 0 2
21511: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
21512: LD_INT 0
21514: PPUSH
21515: PPUSH
21516: PPUSH
21517: PPUSH
// if not hack in hackTanks then
21518: LD_VAR 0 1
21522: PUSH
21523: LD_EXP 85
21527: IN
21528: NOT
21529: IFFALSE 21533
// exit ;
21531: GO 21618
// index := GetElementIndex ( hackTanks , hack ) ;
21533: LD_ADDR_VAR 0 5
21537: PUSH
21538: LD_EXP 85
21542: PPUSH
21543: LD_VAR 0 1
21547: PPUSH
21548: CALL 28576 0 2
21552: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
21553: LD_ADDR_VAR 0 4
21557: PUSH
21558: DOUBLE
21559: LD_INT 1
21561: DEC
21562: ST_TO_ADDR
21563: LD_EXP 86
21567: PUSH
21568: LD_VAR 0 5
21572: ARRAY
21573: PUSH
21574: FOR_TO
21575: IFFALSE 21616
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
21577: LD_EXP 86
21581: PUSH
21582: LD_VAR 0 5
21586: ARRAY
21587: PUSH
21588: LD_VAR 0 4
21592: ARRAY
21593: PUSH
21594: LD_INT 1
21596: ARRAY
21597: PUSH
21598: LD_VAR 0 2
21602: EQUAL
21603: IFFALSE 21614
// KillUnit ( vehicle ) ;
21605: LD_VAR 0 2
21609: PPUSH
21610: CALL_OW 66
21614: GO 21574
21616: POP
21617: POP
// end ;
21618: LD_VAR 0 3
21622: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
21623: LD_EXP 90
21627: NOT
21628: IFFALSE 21663
21630: GO 21632
21632: DISABLE
// begin initMiner := true ;
21633: LD_ADDR_EXP 90
21637: PUSH
21638: LD_INT 1
21640: ST_TO_ADDR
// minersList := [ ] ;
21641: LD_ADDR_EXP 91
21645: PUSH
21646: EMPTY
21647: ST_TO_ADDR
// minerMinesList := [ ] ;
21648: LD_ADDR_EXP 92
21652: PUSH
21653: EMPTY
21654: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
21655: LD_ADDR_EXP 93
21659: PUSH
21660: LD_INT 5
21662: ST_TO_ADDR
// end ;
21663: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
21664: LD_EXP 90
21668: PUSH
21669: LD_INT 34
21671: PUSH
21672: LD_EXP 101
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: PPUSH
21681: CALL_OW 69
21685: AND
21686: IFFALSE 22149
21688: GO 21690
21690: DISABLE
21691: LD_INT 0
21693: PPUSH
21694: PPUSH
21695: PPUSH
21696: PPUSH
// begin enable ;
21697: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
21698: LD_ADDR_VAR 0 1
21702: PUSH
21703: LD_INT 34
21705: PUSH
21706: LD_EXP 101
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: PPUSH
21715: CALL_OW 69
21719: PUSH
21720: FOR_IN
21721: IFFALSE 21793
// begin if not i in minersList then
21723: LD_VAR 0 1
21727: PUSH
21728: LD_EXP 91
21732: IN
21733: NOT
21734: IFFALSE 21791
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
21736: LD_ADDR_EXP 91
21740: PUSH
21741: LD_EXP 91
21745: PPUSH
21746: LD_EXP 91
21750: PUSH
21751: LD_INT 1
21753: PLUS
21754: PPUSH
21755: LD_VAR 0 1
21759: PPUSH
21760: CALL_OW 1
21764: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
21765: LD_ADDR_EXP 92
21769: PUSH
21770: LD_EXP 92
21774: PPUSH
21775: LD_EXP 92
21779: PUSH
21780: LD_INT 1
21782: PLUS
21783: PPUSH
21784: EMPTY
21785: PPUSH
21786: CALL_OW 1
21790: ST_TO_ADDR
// end end ;
21791: GO 21720
21793: POP
21794: POP
// for i := minerMinesList downto 1 do
21795: LD_ADDR_VAR 0 1
21799: PUSH
21800: DOUBLE
21801: LD_EXP 92
21805: INC
21806: ST_TO_ADDR
21807: LD_INT 1
21809: PUSH
21810: FOR_DOWNTO
21811: IFFALSE 22147
// begin if IsLive ( minersList [ i ] ) then
21813: LD_EXP 91
21817: PUSH
21818: LD_VAR 0 1
21822: ARRAY
21823: PPUSH
21824: CALL_OW 300
21828: IFFALSE 21856
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
21830: LD_EXP 91
21834: PUSH
21835: LD_VAR 0 1
21839: ARRAY
21840: PPUSH
21841: LD_EXP 92
21845: PUSH
21846: LD_VAR 0 1
21850: ARRAY
21851: PPUSH
21852: CALL_OW 505
// if not minerMinesList [ i ] then
21856: LD_EXP 92
21860: PUSH
21861: LD_VAR 0 1
21865: ARRAY
21866: NOT
21867: IFFALSE 21871
// continue ;
21869: GO 21810
// for j := minerMinesList [ i ] downto 1 do
21871: LD_ADDR_VAR 0 2
21875: PUSH
21876: DOUBLE
21877: LD_EXP 92
21881: PUSH
21882: LD_VAR 0 1
21886: ARRAY
21887: INC
21888: ST_TO_ADDR
21889: LD_INT 1
21891: PUSH
21892: FOR_DOWNTO
21893: IFFALSE 22143
// begin side := GetSide ( minersList [ i ] ) ;
21895: LD_ADDR_VAR 0 3
21899: PUSH
21900: LD_EXP 91
21904: PUSH
21905: LD_VAR 0 1
21909: ARRAY
21910: PPUSH
21911: CALL_OW 255
21915: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
21916: LD_ADDR_VAR 0 4
21920: PUSH
21921: LD_EXP 92
21925: PUSH
21926: LD_VAR 0 1
21930: ARRAY
21931: PUSH
21932: LD_VAR 0 2
21936: ARRAY
21937: PUSH
21938: LD_INT 1
21940: ARRAY
21941: PPUSH
21942: LD_EXP 92
21946: PUSH
21947: LD_VAR 0 1
21951: ARRAY
21952: PUSH
21953: LD_VAR 0 2
21957: ARRAY
21958: PUSH
21959: LD_INT 2
21961: ARRAY
21962: PPUSH
21963: CALL_OW 428
21967: ST_TO_ADDR
// if not tmp then
21968: LD_VAR 0 4
21972: NOT
21973: IFFALSE 21977
// continue ;
21975: GO 21892
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
21977: LD_VAR 0 4
21981: PUSH
21982: LD_INT 81
21984: PUSH
21985: LD_VAR 0 3
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: PPUSH
21994: CALL_OW 69
21998: IN
21999: PUSH
22000: LD_EXP 92
22004: PUSH
22005: LD_VAR 0 1
22009: ARRAY
22010: PUSH
22011: LD_VAR 0 2
22015: ARRAY
22016: PUSH
22017: LD_INT 1
22019: ARRAY
22020: PPUSH
22021: LD_EXP 92
22025: PUSH
22026: LD_VAR 0 1
22030: ARRAY
22031: PUSH
22032: LD_VAR 0 2
22036: ARRAY
22037: PUSH
22038: LD_INT 2
22040: ARRAY
22041: PPUSH
22042: CALL_OW 458
22046: AND
22047: IFFALSE 22141
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22049: LD_EXP 92
22053: PUSH
22054: LD_VAR 0 1
22058: ARRAY
22059: PUSH
22060: LD_VAR 0 2
22064: ARRAY
22065: PUSH
22066: LD_INT 1
22068: ARRAY
22069: PPUSH
22070: LD_EXP 92
22074: PUSH
22075: LD_VAR 0 1
22079: ARRAY
22080: PUSH
22081: LD_VAR 0 2
22085: ARRAY
22086: PUSH
22087: LD_INT 2
22089: ARRAY
22090: PPUSH
22091: LD_VAR 0 3
22095: PPUSH
22096: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22100: LD_ADDR_EXP 92
22104: PUSH
22105: LD_EXP 92
22109: PPUSH
22110: LD_VAR 0 1
22114: PPUSH
22115: LD_EXP 92
22119: PUSH
22120: LD_VAR 0 1
22124: ARRAY
22125: PPUSH
22126: LD_VAR 0 2
22130: PPUSH
22131: CALL_OW 3
22135: PPUSH
22136: CALL_OW 1
22140: ST_TO_ADDR
// end ; end ;
22141: GO 21892
22143: POP
22144: POP
// end ;
22145: GO 21810
22147: POP
22148: POP
// end ;
22149: PPOPN 4
22151: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
22152: LD_INT 0
22154: PPUSH
22155: PPUSH
// result := false ;
22156: LD_ADDR_VAR 0 4
22160: PUSH
22161: LD_INT 0
22163: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
22164: LD_VAR 0 1
22168: PPUSH
22169: CALL_OW 264
22173: PUSH
22174: LD_EXP 101
22178: EQUAL
22179: NOT
22180: IFFALSE 22184
// exit ;
22182: GO 22424
// index := GetElementIndex ( minersList , unit ) ;
22184: LD_ADDR_VAR 0 5
22188: PUSH
22189: LD_EXP 91
22193: PPUSH
22194: LD_VAR 0 1
22198: PPUSH
22199: CALL 28576 0 2
22203: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
22204: LD_EXP 92
22208: PUSH
22209: LD_VAR 0 5
22213: ARRAY
22214: PUSH
22215: LD_EXP 93
22219: GREATEREQUAL
22220: IFFALSE 22224
// exit ;
22222: GO 22424
// ComMoveXY ( unit , x , y ) ;
22224: LD_VAR 0 1
22228: PPUSH
22229: LD_VAR 0 2
22233: PPUSH
22234: LD_VAR 0 3
22238: PPUSH
22239: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22243: LD_INT 35
22245: PPUSH
22246: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
22250: LD_VAR 0 1
22254: PPUSH
22255: LD_VAR 0 2
22259: PPUSH
22260: LD_VAR 0 3
22264: PPUSH
22265: CALL 59348 0 3
22269: NOT
22270: PUSH
22271: LD_VAR 0 1
22275: PPUSH
22276: CALL_OW 314
22280: AND
22281: IFFALSE 22285
// exit ;
22283: GO 22424
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
22285: LD_VAR 0 2
22289: PPUSH
22290: LD_VAR 0 3
22294: PPUSH
22295: CALL_OW 428
22299: PUSH
22300: LD_VAR 0 1
22304: EQUAL
22305: PUSH
22306: LD_VAR 0 1
22310: PPUSH
22311: CALL_OW 314
22315: NOT
22316: AND
22317: IFFALSE 22243
// PlaySoundXY ( x , y , PlantMine ) ;
22319: LD_VAR 0 2
22323: PPUSH
22324: LD_VAR 0 3
22328: PPUSH
22329: LD_STRING PlantMine
22331: PPUSH
22332: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
22336: LD_VAR 0 2
22340: PPUSH
22341: LD_VAR 0 3
22345: PPUSH
22346: LD_VAR 0 1
22350: PPUSH
22351: CALL_OW 255
22355: PPUSH
22356: LD_INT 0
22358: PPUSH
22359: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
22363: LD_ADDR_EXP 92
22367: PUSH
22368: LD_EXP 92
22372: PPUSH
22373: LD_VAR 0 5
22377: PUSH
22378: LD_EXP 92
22382: PUSH
22383: LD_VAR 0 5
22387: ARRAY
22388: PUSH
22389: LD_INT 1
22391: PLUS
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PPUSH
22397: LD_VAR 0 2
22401: PUSH
22402: LD_VAR 0 3
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PPUSH
22411: CALL 28791 0 3
22415: ST_TO_ADDR
// result := true ;
22416: LD_ADDR_VAR 0 4
22420: PUSH
22421: LD_INT 1
22423: ST_TO_ADDR
// end ;
22424: LD_VAR 0 4
22428: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
22429: LD_INT 0
22431: PPUSH
22432: PPUSH
22433: PPUSH
// if not unit in minersList then
22434: LD_VAR 0 1
22438: PUSH
22439: LD_EXP 91
22443: IN
22444: NOT
22445: IFFALSE 22449
// exit ;
22447: GO 22841
// index := GetElementIndex ( minersList , unit ) ;
22449: LD_ADDR_VAR 0 6
22453: PUSH
22454: LD_EXP 91
22458: PPUSH
22459: LD_VAR 0 1
22463: PPUSH
22464: CALL 28576 0 2
22468: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
22469: LD_ADDR_VAR 0 5
22473: PUSH
22474: DOUBLE
22475: LD_EXP 92
22479: PUSH
22480: LD_VAR 0 6
22484: ARRAY
22485: INC
22486: ST_TO_ADDR
22487: LD_INT 1
22489: PUSH
22490: FOR_DOWNTO
22491: IFFALSE 22652
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
22493: LD_EXP 92
22497: PUSH
22498: LD_VAR 0 6
22502: ARRAY
22503: PUSH
22504: LD_VAR 0 5
22508: ARRAY
22509: PUSH
22510: LD_INT 1
22512: ARRAY
22513: PUSH
22514: LD_VAR 0 2
22518: EQUAL
22519: PUSH
22520: LD_EXP 92
22524: PUSH
22525: LD_VAR 0 6
22529: ARRAY
22530: PUSH
22531: LD_VAR 0 5
22535: ARRAY
22536: PUSH
22537: LD_INT 2
22539: ARRAY
22540: PUSH
22541: LD_VAR 0 3
22545: EQUAL
22546: AND
22547: IFFALSE 22650
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22549: LD_EXP 92
22553: PUSH
22554: LD_VAR 0 6
22558: ARRAY
22559: PUSH
22560: LD_VAR 0 5
22564: ARRAY
22565: PUSH
22566: LD_INT 1
22568: ARRAY
22569: PPUSH
22570: LD_EXP 92
22574: PUSH
22575: LD_VAR 0 6
22579: ARRAY
22580: PUSH
22581: LD_VAR 0 5
22585: ARRAY
22586: PUSH
22587: LD_INT 2
22589: ARRAY
22590: PPUSH
22591: LD_VAR 0 1
22595: PPUSH
22596: CALL_OW 255
22600: PPUSH
22601: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22605: LD_ADDR_EXP 92
22609: PUSH
22610: LD_EXP 92
22614: PPUSH
22615: LD_VAR 0 6
22619: PPUSH
22620: LD_EXP 92
22624: PUSH
22625: LD_VAR 0 6
22629: ARRAY
22630: PPUSH
22631: LD_VAR 0 5
22635: PPUSH
22636: CALL_OW 3
22640: PPUSH
22641: CALL_OW 1
22645: ST_TO_ADDR
// exit ;
22646: POP
22647: POP
22648: GO 22841
// end ; end ;
22650: GO 22490
22652: POP
22653: POP
// for i := minerMinesList [ index ] downto 1 do
22654: LD_ADDR_VAR 0 5
22658: PUSH
22659: DOUBLE
22660: LD_EXP 92
22664: PUSH
22665: LD_VAR 0 6
22669: ARRAY
22670: INC
22671: ST_TO_ADDR
22672: LD_INT 1
22674: PUSH
22675: FOR_DOWNTO
22676: IFFALSE 22839
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
22678: LD_EXP 92
22682: PUSH
22683: LD_VAR 0 6
22687: ARRAY
22688: PUSH
22689: LD_VAR 0 5
22693: ARRAY
22694: PUSH
22695: LD_INT 1
22697: ARRAY
22698: PPUSH
22699: LD_EXP 92
22703: PUSH
22704: LD_VAR 0 6
22708: ARRAY
22709: PUSH
22710: LD_VAR 0 5
22714: ARRAY
22715: PUSH
22716: LD_INT 2
22718: ARRAY
22719: PPUSH
22720: LD_VAR 0 2
22724: PPUSH
22725: LD_VAR 0 3
22729: PPUSH
22730: CALL_OW 298
22734: PUSH
22735: LD_INT 6
22737: LESS
22738: IFFALSE 22837
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22740: LD_EXP 92
22744: PUSH
22745: LD_VAR 0 6
22749: ARRAY
22750: PUSH
22751: LD_VAR 0 5
22755: ARRAY
22756: PUSH
22757: LD_INT 1
22759: ARRAY
22760: PPUSH
22761: LD_EXP 92
22765: PUSH
22766: LD_VAR 0 6
22770: ARRAY
22771: PUSH
22772: LD_VAR 0 5
22776: ARRAY
22777: PUSH
22778: LD_INT 2
22780: ARRAY
22781: PPUSH
22782: LD_VAR 0 1
22786: PPUSH
22787: CALL_OW 255
22791: PPUSH
22792: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22796: LD_ADDR_EXP 92
22800: PUSH
22801: LD_EXP 92
22805: PPUSH
22806: LD_VAR 0 6
22810: PPUSH
22811: LD_EXP 92
22815: PUSH
22816: LD_VAR 0 6
22820: ARRAY
22821: PPUSH
22822: LD_VAR 0 5
22826: PPUSH
22827: CALL_OW 3
22831: PPUSH
22832: CALL_OW 1
22836: ST_TO_ADDR
// end ; end ;
22837: GO 22675
22839: POP
22840: POP
// end ;
22841: LD_VAR 0 4
22845: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
22846: LD_INT 0
22848: PPUSH
22849: PPUSH
22850: PPUSH
22851: PPUSH
22852: PPUSH
22853: PPUSH
22854: PPUSH
22855: PPUSH
22856: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
22857: LD_VAR 0 1
22861: PPUSH
22862: CALL_OW 264
22866: PUSH
22867: LD_EXP 101
22871: EQUAL
22872: NOT
22873: PUSH
22874: LD_VAR 0 1
22878: PUSH
22879: LD_EXP 91
22883: IN
22884: NOT
22885: OR
22886: IFFALSE 22890
// exit ;
22888: GO 23212
// index := GetElementIndex ( minersList , unit ) ;
22890: LD_ADDR_VAR 0 6
22894: PUSH
22895: LD_EXP 91
22899: PPUSH
22900: LD_VAR 0 1
22904: PPUSH
22905: CALL 28576 0 2
22909: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
22910: LD_ADDR_VAR 0 8
22914: PUSH
22915: LD_EXP 93
22919: PUSH
22920: LD_EXP 92
22924: PUSH
22925: LD_VAR 0 6
22929: ARRAY
22930: MINUS
22931: ST_TO_ADDR
// if not minesFreeAmount then
22932: LD_VAR 0 8
22936: NOT
22937: IFFALSE 22941
// exit ;
22939: GO 23212
// tmp := [ ] ;
22941: LD_ADDR_VAR 0 7
22945: PUSH
22946: EMPTY
22947: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
22948: LD_ADDR_VAR 0 5
22952: PUSH
22953: DOUBLE
22954: LD_INT 1
22956: DEC
22957: ST_TO_ADDR
22958: LD_VAR 0 8
22962: PUSH
22963: FOR_TO
22964: IFFALSE 23159
// begin _d := rand ( 0 , 5 ) ;
22966: LD_ADDR_VAR 0 11
22970: PUSH
22971: LD_INT 0
22973: PPUSH
22974: LD_INT 5
22976: PPUSH
22977: CALL_OW 12
22981: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
22982: LD_ADDR_VAR 0 12
22986: PUSH
22987: LD_INT 2
22989: PPUSH
22990: LD_INT 6
22992: PPUSH
22993: CALL_OW 12
22997: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
22998: LD_ADDR_VAR 0 9
23002: PUSH
23003: LD_VAR 0 2
23007: PPUSH
23008: LD_VAR 0 11
23012: PPUSH
23013: LD_VAR 0 12
23017: PPUSH
23018: CALL_OW 272
23022: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23023: LD_ADDR_VAR 0 10
23027: PUSH
23028: LD_VAR 0 3
23032: PPUSH
23033: LD_VAR 0 11
23037: PPUSH
23038: LD_VAR 0 12
23042: PPUSH
23043: CALL_OW 273
23047: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23048: LD_VAR 0 9
23052: PPUSH
23053: LD_VAR 0 10
23057: PPUSH
23058: CALL_OW 488
23062: PUSH
23063: LD_VAR 0 9
23067: PUSH
23068: LD_VAR 0 10
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: LD_VAR 0 7
23081: IN
23082: NOT
23083: AND
23084: PUSH
23085: LD_VAR 0 9
23089: PPUSH
23090: LD_VAR 0 10
23094: PPUSH
23095: CALL_OW 458
23099: NOT
23100: AND
23101: IFFALSE 23143
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23103: LD_ADDR_VAR 0 7
23107: PUSH
23108: LD_VAR 0 7
23112: PPUSH
23113: LD_VAR 0 7
23117: PUSH
23118: LD_INT 1
23120: PLUS
23121: PPUSH
23122: LD_VAR 0 9
23126: PUSH
23127: LD_VAR 0 10
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PPUSH
23136: CALL_OW 1
23140: ST_TO_ADDR
23141: GO 23157
// i := i - 1 ;
23143: LD_ADDR_VAR 0 5
23147: PUSH
23148: LD_VAR 0 5
23152: PUSH
23153: LD_INT 1
23155: MINUS
23156: ST_TO_ADDR
// end ;
23157: GO 22963
23159: POP
23160: POP
// for i in tmp do
23161: LD_ADDR_VAR 0 5
23165: PUSH
23166: LD_VAR 0 7
23170: PUSH
23171: FOR_IN
23172: IFFALSE 23210
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
23174: LD_VAR 0 1
23178: PPUSH
23179: LD_VAR 0 5
23183: PUSH
23184: LD_INT 1
23186: ARRAY
23187: PPUSH
23188: LD_VAR 0 5
23192: PUSH
23193: LD_INT 2
23195: ARRAY
23196: PPUSH
23197: CALL 22152 0 3
23201: NOT
23202: IFFALSE 23208
// exit ;
23204: POP
23205: POP
23206: GO 23212
23208: GO 23171
23210: POP
23211: POP
// end ;
23212: LD_VAR 0 4
23216: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
23217: LD_INT 0
23219: PPUSH
23220: PPUSH
23221: PPUSH
23222: PPUSH
23223: PPUSH
23224: PPUSH
23225: PPUSH
// if not GetClass ( unit ) = class_sniper then
23226: LD_VAR 0 1
23230: PPUSH
23231: CALL_OW 257
23235: PUSH
23236: LD_INT 5
23238: EQUAL
23239: NOT
23240: IFFALSE 23244
// exit ;
23242: GO 23632
// dist := 8 ;
23244: LD_ADDR_VAR 0 5
23248: PUSH
23249: LD_INT 8
23251: ST_TO_ADDR
// viewRange := 12 ;
23252: LD_ADDR_VAR 0 7
23256: PUSH
23257: LD_INT 12
23259: ST_TO_ADDR
// side := GetSide ( unit ) ;
23260: LD_ADDR_VAR 0 6
23264: PUSH
23265: LD_VAR 0 1
23269: PPUSH
23270: CALL_OW 255
23274: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
23275: LD_INT 61
23277: PPUSH
23278: LD_VAR 0 6
23282: PPUSH
23283: CALL_OW 321
23287: PUSH
23288: LD_INT 2
23290: EQUAL
23291: IFFALSE 23301
// viewRange := 16 ;
23293: LD_ADDR_VAR 0 7
23297: PUSH
23298: LD_INT 16
23300: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
23301: LD_VAR 0 1
23305: PPUSH
23306: LD_VAR 0 2
23310: PPUSH
23311: LD_VAR 0 3
23315: PPUSH
23316: CALL_OW 297
23320: PUSH
23321: LD_VAR 0 5
23325: GREATER
23326: IFFALSE 23405
// begin ComMoveXY ( unit , x , y ) ;
23328: LD_VAR 0 1
23332: PPUSH
23333: LD_VAR 0 2
23337: PPUSH
23338: LD_VAR 0 3
23342: PPUSH
23343: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23347: LD_INT 35
23349: PPUSH
23350: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
23354: LD_VAR 0 1
23358: PPUSH
23359: LD_VAR 0 2
23363: PPUSH
23364: LD_VAR 0 3
23368: PPUSH
23369: CALL 59348 0 3
23373: NOT
23374: IFFALSE 23378
// exit ;
23376: GO 23632
// until GetDistUnitXY ( unit , x , y ) < dist ;
23378: LD_VAR 0 1
23382: PPUSH
23383: LD_VAR 0 2
23387: PPUSH
23388: LD_VAR 0 3
23392: PPUSH
23393: CALL_OW 297
23397: PUSH
23398: LD_VAR 0 5
23402: LESS
23403: IFFALSE 23347
// end ; ComTurnXY ( unit , x , y ) ;
23405: LD_VAR 0 1
23409: PPUSH
23410: LD_VAR 0 2
23414: PPUSH
23415: LD_VAR 0 3
23419: PPUSH
23420: CALL_OW 118
// wait ( 5 ) ;
23424: LD_INT 5
23426: PPUSH
23427: CALL_OW 67
// _d := GetDir ( unit ) ;
23431: LD_ADDR_VAR 0 10
23435: PUSH
23436: LD_VAR 0 1
23440: PPUSH
23441: CALL_OW 254
23445: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
23446: LD_ADDR_VAR 0 8
23450: PUSH
23451: LD_VAR 0 1
23455: PPUSH
23456: CALL_OW 250
23460: PPUSH
23461: LD_VAR 0 10
23465: PPUSH
23466: LD_VAR 0 5
23470: PPUSH
23471: CALL_OW 272
23475: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
23476: LD_ADDR_VAR 0 9
23480: PUSH
23481: LD_VAR 0 1
23485: PPUSH
23486: CALL_OW 251
23490: PPUSH
23491: LD_VAR 0 10
23495: PPUSH
23496: LD_VAR 0 5
23500: PPUSH
23501: CALL_OW 273
23505: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23506: LD_VAR 0 8
23510: PPUSH
23511: LD_VAR 0 9
23515: PPUSH
23516: CALL_OW 488
23520: NOT
23521: IFFALSE 23525
// exit ;
23523: GO 23632
// ComAnimCustom ( unit , 1 ) ;
23525: LD_VAR 0 1
23529: PPUSH
23530: LD_INT 1
23532: PPUSH
23533: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
23537: LD_VAR 0 8
23541: PPUSH
23542: LD_VAR 0 9
23546: PPUSH
23547: LD_VAR 0 6
23551: PPUSH
23552: LD_VAR 0 7
23556: PPUSH
23557: CALL_OW 330
// repeat wait ( 1 ) ;
23561: LD_INT 1
23563: PPUSH
23564: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
23568: LD_VAR 0 1
23572: PPUSH
23573: CALL_OW 316
23577: PUSH
23578: LD_VAR 0 1
23582: PPUSH
23583: CALL_OW 314
23587: OR
23588: PUSH
23589: LD_VAR 0 1
23593: PPUSH
23594: CALL_OW 302
23598: NOT
23599: OR
23600: PUSH
23601: LD_VAR 0 1
23605: PPUSH
23606: CALL_OW 301
23610: OR
23611: IFFALSE 23561
// RemoveSeeing ( _x , _y , side ) ;
23613: LD_VAR 0 8
23617: PPUSH
23618: LD_VAR 0 9
23622: PPUSH
23623: LD_VAR 0 6
23627: PPUSH
23628: CALL_OW 331
// end ; end_of_file
23632: LD_VAR 0 4
23636: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
23637: LD_INT 0
23639: PPUSH
// ar_miner := 81 ;
23640: LD_ADDR_EXP 101
23644: PUSH
23645: LD_INT 81
23647: ST_TO_ADDR
// ar_crane := 88 ;
23648: LD_ADDR_EXP 100
23652: PUSH
23653: LD_INT 88
23655: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
23656: LD_ADDR_EXP 95
23660: PUSH
23661: LD_INT 89
23663: ST_TO_ADDR
// us_hack := 99 ;
23664: LD_ADDR_EXP 96
23668: PUSH
23669: LD_INT 99
23671: ST_TO_ADDR
// us_artillery := 97 ;
23672: LD_ADDR_EXP 97
23676: PUSH
23677: LD_INT 97
23679: ST_TO_ADDR
// ar_bio_bomb := 91 ;
23680: LD_ADDR_EXP 98
23684: PUSH
23685: LD_INT 91
23687: ST_TO_ADDR
// ar_mortar := 92 ;
23688: LD_ADDR_EXP 99
23692: PUSH
23693: LD_INT 92
23695: ST_TO_ADDR
// ru_radar := 98 ;
23696: LD_ADDR_EXP 94
23700: PUSH
23701: LD_INT 98
23703: ST_TO_ADDR
// tech_Artillery := 80 ;
23704: LD_ADDR_EXP 102
23708: PUSH
23709: LD_INT 80
23711: ST_TO_ADDR
// tech_RadMat := 81 ;
23712: LD_ADDR_EXP 103
23716: PUSH
23717: LD_INT 81
23719: ST_TO_ADDR
// tech_BasicTools := 82 ;
23720: LD_ADDR_EXP 104
23724: PUSH
23725: LD_INT 82
23727: ST_TO_ADDR
// tech_Cargo := 83 ;
23728: LD_ADDR_EXP 105
23732: PUSH
23733: LD_INT 83
23735: ST_TO_ADDR
// tech_Track := 84 ;
23736: LD_ADDR_EXP 106
23740: PUSH
23741: LD_INT 84
23743: ST_TO_ADDR
// tech_Crane := 85 ;
23744: LD_ADDR_EXP 107
23748: PUSH
23749: LD_INT 85
23751: ST_TO_ADDR
// tech_Bulldozer := 86 ;
23752: LD_ADDR_EXP 108
23756: PUSH
23757: LD_INT 86
23759: ST_TO_ADDR
// tech_Hovercraft := 87 ;
23760: LD_ADDR_EXP 109
23764: PUSH
23765: LD_INT 87
23767: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
23768: LD_ADDR_EXP 110
23772: PUSH
23773: LD_INT 88
23775: ST_TO_ADDR
// class_mastodont := 31 ;
23776: LD_ADDR_EXP 111
23780: PUSH
23781: LD_INT 31
23783: ST_TO_ADDR
// class_horse := 21 ;
23784: LD_ADDR_EXP 112
23788: PUSH
23789: LD_INT 21
23791: ST_TO_ADDR
// end ;
23792: LD_VAR 0 1
23796: RET
// every 1 do
23797: GO 23799
23799: DISABLE
// InitGlobalVariables ; end_of_file
23800: CALL 23637 0 0
23804: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23805: LD_INT 0
23807: PPUSH
23808: PPUSH
// if exist_mode then
23809: LD_VAR 0 2
23813: IFFALSE 23838
// unit := CreateCharacter ( prefix & ident ) else
23815: LD_ADDR_VAR 0 5
23819: PUSH
23820: LD_VAR 0 3
23824: PUSH
23825: LD_VAR 0 1
23829: STR
23830: PPUSH
23831: CALL_OW 34
23835: ST_TO_ADDR
23836: GO 23853
// unit := NewCharacter ( ident ) ;
23838: LD_ADDR_VAR 0 5
23842: PUSH
23843: LD_VAR 0 1
23847: PPUSH
23848: CALL_OW 25
23852: ST_TO_ADDR
// result := unit ;
23853: LD_ADDR_VAR 0 4
23857: PUSH
23858: LD_VAR 0 5
23862: ST_TO_ADDR
// end ;
23863: LD_VAR 0 4
23867: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23868: LD_INT 0
23870: PPUSH
23871: PPUSH
// if not side or not nation then
23872: LD_VAR 0 1
23876: NOT
23877: PUSH
23878: LD_VAR 0 2
23882: NOT
23883: OR
23884: IFFALSE 23888
// exit ;
23886: GO 24656
// case nation of nation_american :
23888: LD_VAR 0 2
23892: PUSH
23893: LD_INT 1
23895: DOUBLE
23896: EQUAL
23897: IFTRUE 23901
23899: GO 24115
23901: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23902: LD_ADDR_VAR 0 4
23906: PUSH
23907: LD_INT 35
23909: PUSH
23910: LD_INT 45
23912: PUSH
23913: LD_INT 46
23915: PUSH
23916: LD_INT 47
23918: PUSH
23919: LD_INT 82
23921: PUSH
23922: LD_INT 83
23924: PUSH
23925: LD_INT 84
23927: PUSH
23928: LD_INT 85
23930: PUSH
23931: LD_INT 86
23933: PUSH
23934: LD_INT 1
23936: PUSH
23937: LD_INT 2
23939: PUSH
23940: LD_INT 6
23942: PUSH
23943: LD_INT 15
23945: PUSH
23946: LD_INT 16
23948: PUSH
23949: LD_INT 7
23951: PUSH
23952: LD_INT 12
23954: PUSH
23955: LD_INT 13
23957: PUSH
23958: LD_INT 10
23960: PUSH
23961: LD_INT 14
23963: PUSH
23964: LD_INT 20
23966: PUSH
23967: LD_INT 21
23969: PUSH
23970: LD_INT 22
23972: PUSH
23973: LD_INT 25
23975: PUSH
23976: LD_INT 32
23978: PUSH
23979: LD_INT 27
23981: PUSH
23982: LD_INT 36
23984: PUSH
23985: LD_INT 69
23987: PUSH
23988: LD_INT 39
23990: PUSH
23991: LD_INT 34
23993: PUSH
23994: LD_INT 40
23996: PUSH
23997: LD_INT 48
23999: PUSH
24000: LD_INT 49
24002: PUSH
24003: LD_INT 50
24005: PUSH
24006: LD_INT 51
24008: PUSH
24009: LD_INT 52
24011: PUSH
24012: LD_INT 53
24014: PUSH
24015: LD_INT 54
24017: PUSH
24018: LD_INT 55
24020: PUSH
24021: LD_INT 56
24023: PUSH
24024: LD_INT 57
24026: PUSH
24027: LD_INT 58
24029: PUSH
24030: LD_INT 59
24032: PUSH
24033: LD_INT 60
24035: PUSH
24036: LD_INT 61
24038: PUSH
24039: LD_INT 62
24041: PUSH
24042: LD_INT 80
24044: PUSH
24045: LD_INT 82
24047: PUSH
24048: LD_INT 83
24050: PUSH
24051: LD_INT 84
24053: PUSH
24054: LD_INT 85
24056: PUSH
24057: LD_INT 86
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: ST_TO_ADDR
24113: GO 24580
24115: LD_INT 2
24117: DOUBLE
24118: EQUAL
24119: IFTRUE 24123
24121: GO 24349
24123: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24124: LD_ADDR_VAR 0 4
24128: PUSH
24129: LD_INT 35
24131: PUSH
24132: LD_INT 45
24134: PUSH
24135: LD_INT 46
24137: PUSH
24138: LD_INT 47
24140: PUSH
24141: LD_INT 82
24143: PUSH
24144: LD_INT 83
24146: PUSH
24147: LD_INT 84
24149: PUSH
24150: LD_INT 85
24152: PUSH
24153: LD_INT 87
24155: PUSH
24156: LD_INT 70
24158: PUSH
24159: LD_INT 1
24161: PUSH
24162: LD_INT 11
24164: PUSH
24165: LD_INT 3
24167: PUSH
24168: LD_INT 4
24170: PUSH
24171: LD_INT 5
24173: PUSH
24174: LD_INT 6
24176: PUSH
24177: LD_INT 15
24179: PUSH
24180: LD_INT 18
24182: PUSH
24183: LD_INT 7
24185: PUSH
24186: LD_INT 17
24188: PUSH
24189: LD_INT 8
24191: PUSH
24192: LD_INT 20
24194: PUSH
24195: LD_INT 21
24197: PUSH
24198: LD_INT 22
24200: PUSH
24201: LD_INT 72
24203: PUSH
24204: LD_INT 26
24206: PUSH
24207: LD_INT 69
24209: PUSH
24210: LD_INT 39
24212: PUSH
24213: LD_INT 40
24215: PUSH
24216: LD_INT 41
24218: PUSH
24219: LD_INT 42
24221: PUSH
24222: LD_INT 43
24224: PUSH
24225: LD_INT 48
24227: PUSH
24228: LD_INT 49
24230: PUSH
24231: LD_INT 50
24233: PUSH
24234: LD_INT 51
24236: PUSH
24237: LD_INT 52
24239: PUSH
24240: LD_INT 53
24242: PUSH
24243: LD_INT 54
24245: PUSH
24246: LD_INT 55
24248: PUSH
24249: LD_INT 56
24251: PUSH
24252: LD_INT 60
24254: PUSH
24255: LD_INT 61
24257: PUSH
24258: LD_INT 62
24260: PUSH
24261: LD_INT 66
24263: PUSH
24264: LD_INT 67
24266: PUSH
24267: LD_INT 68
24269: PUSH
24270: LD_INT 81
24272: PUSH
24273: LD_INT 82
24275: PUSH
24276: LD_INT 83
24278: PUSH
24279: LD_INT 84
24281: PUSH
24282: LD_INT 85
24284: PUSH
24285: LD_INT 87
24287: PUSH
24288: LD_INT 88
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: ST_TO_ADDR
24347: GO 24580
24349: LD_INT 3
24351: DOUBLE
24352: EQUAL
24353: IFTRUE 24357
24355: GO 24579
24357: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24358: LD_ADDR_VAR 0 4
24362: PUSH
24363: LD_INT 46
24365: PUSH
24366: LD_INT 47
24368: PUSH
24369: LD_INT 1
24371: PUSH
24372: LD_INT 2
24374: PUSH
24375: LD_INT 82
24377: PUSH
24378: LD_INT 83
24380: PUSH
24381: LD_INT 84
24383: PUSH
24384: LD_INT 85
24386: PUSH
24387: LD_INT 86
24389: PUSH
24390: LD_INT 11
24392: PUSH
24393: LD_INT 9
24395: PUSH
24396: LD_INT 20
24398: PUSH
24399: LD_INT 19
24401: PUSH
24402: LD_INT 21
24404: PUSH
24405: LD_INT 24
24407: PUSH
24408: LD_INT 22
24410: PUSH
24411: LD_INT 25
24413: PUSH
24414: LD_INT 28
24416: PUSH
24417: LD_INT 29
24419: PUSH
24420: LD_INT 30
24422: PUSH
24423: LD_INT 31
24425: PUSH
24426: LD_INT 37
24428: PUSH
24429: LD_INT 38
24431: PUSH
24432: LD_INT 32
24434: PUSH
24435: LD_INT 27
24437: PUSH
24438: LD_INT 33
24440: PUSH
24441: LD_INT 69
24443: PUSH
24444: LD_INT 39
24446: PUSH
24447: LD_INT 34
24449: PUSH
24450: LD_INT 40
24452: PUSH
24453: LD_INT 71
24455: PUSH
24456: LD_INT 23
24458: PUSH
24459: LD_INT 44
24461: PUSH
24462: LD_INT 48
24464: PUSH
24465: LD_INT 49
24467: PUSH
24468: LD_INT 50
24470: PUSH
24471: LD_INT 51
24473: PUSH
24474: LD_INT 52
24476: PUSH
24477: LD_INT 53
24479: PUSH
24480: LD_INT 54
24482: PUSH
24483: LD_INT 55
24485: PUSH
24486: LD_INT 56
24488: PUSH
24489: LD_INT 57
24491: PUSH
24492: LD_INT 58
24494: PUSH
24495: LD_INT 59
24497: PUSH
24498: LD_INT 63
24500: PUSH
24501: LD_INT 64
24503: PUSH
24504: LD_INT 65
24506: PUSH
24507: LD_INT 82
24509: PUSH
24510: LD_INT 83
24512: PUSH
24513: LD_INT 84
24515: PUSH
24516: LD_INT 85
24518: PUSH
24519: LD_INT 86
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: ST_TO_ADDR
24577: GO 24580
24579: POP
// if state > - 1 and state < 3 then
24580: LD_VAR 0 3
24584: PUSH
24585: LD_INT 1
24587: NEG
24588: GREATER
24589: PUSH
24590: LD_VAR 0 3
24594: PUSH
24595: LD_INT 3
24597: LESS
24598: AND
24599: IFFALSE 24656
// for i in result do
24601: LD_ADDR_VAR 0 5
24605: PUSH
24606: LD_VAR 0 4
24610: PUSH
24611: FOR_IN
24612: IFFALSE 24654
// if GetTech ( i , side ) <> state then
24614: LD_VAR 0 5
24618: PPUSH
24619: LD_VAR 0 1
24623: PPUSH
24624: CALL_OW 321
24628: PUSH
24629: LD_VAR 0 3
24633: NONEQUAL
24634: IFFALSE 24652
// result := result diff i ;
24636: LD_ADDR_VAR 0 4
24640: PUSH
24641: LD_VAR 0 4
24645: PUSH
24646: LD_VAR 0 5
24650: DIFF
24651: ST_TO_ADDR
24652: GO 24611
24654: POP
24655: POP
// end ;
24656: LD_VAR 0 4
24660: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24661: LD_INT 0
24663: PPUSH
24664: PPUSH
24665: PPUSH
// result := true ;
24666: LD_ADDR_VAR 0 3
24670: PUSH
24671: LD_INT 1
24673: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24674: LD_ADDR_VAR 0 5
24678: PUSH
24679: LD_VAR 0 2
24683: PPUSH
24684: CALL_OW 480
24688: ST_TO_ADDR
// if not tmp then
24689: LD_VAR 0 5
24693: NOT
24694: IFFALSE 24698
// exit ;
24696: GO 24747
// for i in tmp do
24698: LD_ADDR_VAR 0 4
24702: PUSH
24703: LD_VAR 0 5
24707: PUSH
24708: FOR_IN
24709: IFFALSE 24745
// if GetTech ( i , side ) <> state_researched then
24711: LD_VAR 0 4
24715: PPUSH
24716: LD_VAR 0 1
24720: PPUSH
24721: CALL_OW 321
24725: PUSH
24726: LD_INT 2
24728: NONEQUAL
24729: IFFALSE 24743
// begin result := false ;
24731: LD_ADDR_VAR 0 3
24735: PUSH
24736: LD_INT 0
24738: ST_TO_ADDR
// exit ;
24739: POP
24740: POP
24741: GO 24747
// end ;
24743: GO 24708
24745: POP
24746: POP
// end ;
24747: LD_VAR 0 3
24751: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24752: LD_INT 0
24754: PPUSH
24755: PPUSH
24756: PPUSH
24757: PPUSH
24758: PPUSH
24759: PPUSH
24760: PPUSH
24761: PPUSH
24762: PPUSH
24763: PPUSH
24764: PPUSH
24765: PPUSH
24766: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24767: LD_VAR 0 1
24771: NOT
24772: PUSH
24773: LD_VAR 0 1
24777: PPUSH
24778: CALL_OW 257
24782: PUSH
24783: LD_INT 9
24785: NONEQUAL
24786: OR
24787: IFFALSE 24791
// exit ;
24789: GO 25364
// side := GetSide ( unit ) ;
24791: LD_ADDR_VAR 0 9
24795: PUSH
24796: LD_VAR 0 1
24800: PPUSH
24801: CALL_OW 255
24805: ST_TO_ADDR
// tech_space := tech_spacanom ;
24806: LD_ADDR_VAR 0 12
24810: PUSH
24811: LD_INT 29
24813: ST_TO_ADDR
// tech_time := tech_taurad ;
24814: LD_ADDR_VAR 0 13
24818: PUSH
24819: LD_INT 28
24821: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24822: LD_ADDR_VAR 0 11
24826: PUSH
24827: LD_VAR 0 1
24831: PPUSH
24832: CALL_OW 310
24836: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24837: LD_VAR 0 11
24841: PPUSH
24842: CALL_OW 247
24846: PUSH
24847: LD_INT 2
24849: EQUAL
24850: IFFALSE 24854
// exit ;
24852: GO 25364
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24854: LD_ADDR_VAR 0 8
24858: PUSH
24859: LD_INT 81
24861: PUSH
24862: LD_VAR 0 9
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 3
24873: PUSH
24874: LD_INT 21
24876: PUSH
24877: LD_INT 3
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PPUSH
24892: CALL_OW 69
24896: ST_TO_ADDR
// if not tmp then
24897: LD_VAR 0 8
24901: NOT
24902: IFFALSE 24906
// exit ;
24904: GO 25364
// if in_unit then
24906: LD_VAR 0 11
24910: IFFALSE 24934
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24912: LD_ADDR_VAR 0 10
24916: PUSH
24917: LD_VAR 0 8
24921: PPUSH
24922: LD_VAR 0 11
24926: PPUSH
24927: CALL_OW 74
24931: ST_TO_ADDR
24932: GO 24954
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24934: LD_ADDR_VAR 0 10
24938: PUSH
24939: LD_VAR 0 8
24943: PPUSH
24944: LD_VAR 0 1
24948: PPUSH
24949: CALL_OW 74
24953: ST_TO_ADDR
// if not enemy then
24954: LD_VAR 0 10
24958: NOT
24959: IFFALSE 24963
// exit ;
24961: GO 25364
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24963: LD_VAR 0 11
24967: PUSH
24968: LD_VAR 0 11
24972: PPUSH
24973: LD_VAR 0 10
24977: PPUSH
24978: CALL_OW 296
24982: PUSH
24983: LD_INT 13
24985: GREATER
24986: AND
24987: PUSH
24988: LD_VAR 0 1
24992: PPUSH
24993: LD_VAR 0 10
24997: PPUSH
24998: CALL_OW 296
25002: PUSH
25003: LD_INT 12
25005: GREATER
25006: OR
25007: IFFALSE 25011
// exit ;
25009: GO 25364
// missile := [ 1 ] ;
25011: LD_ADDR_VAR 0 14
25015: PUSH
25016: LD_INT 1
25018: PUSH
25019: EMPTY
25020: LIST
25021: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25022: LD_VAR 0 9
25026: PPUSH
25027: LD_VAR 0 12
25031: PPUSH
25032: CALL_OW 325
25036: IFFALSE 25065
// missile := Insert ( missile , missile + 1 , 2 ) ;
25038: LD_ADDR_VAR 0 14
25042: PUSH
25043: LD_VAR 0 14
25047: PPUSH
25048: LD_VAR 0 14
25052: PUSH
25053: LD_INT 1
25055: PLUS
25056: PPUSH
25057: LD_INT 2
25059: PPUSH
25060: CALL_OW 2
25064: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25065: LD_VAR 0 9
25069: PPUSH
25070: LD_VAR 0 13
25074: PPUSH
25075: CALL_OW 325
25079: PUSH
25080: LD_VAR 0 10
25084: PPUSH
25085: CALL_OW 255
25089: PPUSH
25090: LD_VAR 0 13
25094: PPUSH
25095: CALL_OW 325
25099: NOT
25100: AND
25101: IFFALSE 25130
// missile := Insert ( missile , missile + 1 , 3 ) ;
25103: LD_ADDR_VAR 0 14
25107: PUSH
25108: LD_VAR 0 14
25112: PPUSH
25113: LD_VAR 0 14
25117: PUSH
25118: LD_INT 1
25120: PLUS
25121: PPUSH
25122: LD_INT 3
25124: PPUSH
25125: CALL_OW 2
25129: ST_TO_ADDR
// if missile < 2 then
25130: LD_VAR 0 14
25134: PUSH
25135: LD_INT 2
25137: LESS
25138: IFFALSE 25142
// exit ;
25140: GO 25364
// x := GetX ( enemy ) ;
25142: LD_ADDR_VAR 0 4
25146: PUSH
25147: LD_VAR 0 10
25151: PPUSH
25152: CALL_OW 250
25156: ST_TO_ADDR
// y := GetY ( enemy ) ;
25157: LD_ADDR_VAR 0 5
25161: PUSH
25162: LD_VAR 0 10
25166: PPUSH
25167: CALL_OW 251
25171: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25172: LD_ADDR_VAR 0 6
25176: PUSH
25177: LD_VAR 0 4
25181: PUSH
25182: LD_INT 1
25184: NEG
25185: PPUSH
25186: LD_INT 1
25188: PPUSH
25189: CALL_OW 12
25193: PLUS
25194: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25195: LD_ADDR_VAR 0 7
25199: PUSH
25200: LD_VAR 0 5
25204: PUSH
25205: LD_INT 1
25207: NEG
25208: PPUSH
25209: LD_INT 1
25211: PPUSH
25212: CALL_OW 12
25216: PLUS
25217: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25218: LD_VAR 0 6
25222: PPUSH
25223: LD_VAR 0 7
25227: PPUSH
25228: CALL_OW 488
25232: NOT
25233: IFFALSE 25255
// begin _x := x ;
25235: LD_ADDR_VAR 0 6
25239: PUSH
25240: LD_VAR 0 4
25244: ST_TO_ADDR
// _y := y ;
25245: LD_ADDR_VAR 0 7
25249: PUSH
25250: LD_VAR 0 5
25254: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25255: LD_ADDR_VAR 0 3
25259: PUSH
25260: LD_INT 1
25262: PPUSH
25263: LD_VAR 0 14
25267: PPUSH
25268: CALL_OW 12
25272: ST_TO_ADDR
// case i of 1 :
25273: LD_VAR 0 3
25277: PUSH
25278: LD_INT 1
25280: DOUBLE
25281: EQUAL
25282: IFTRUE 25286
25284: GO 25303
25286: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25287: LD_VAR 0 1
25291: PPUSH
25292: LD_VAR 0 10
25296: PPUSH
25297: CALL_OW 115
25301: GO 25364
25303: LD_INT 2
25305: DOUBLE
25306: EQUAL
25307: IFTRUE 25311
25309: GO 25333
25311: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25312: LD_VAR 0 1
25316: PPUSH
25317: LD_VAR 0 6
25321: PPUSH
25322: LD_VAR 0 7
25326: PPUSH
25327: CALL_OW 153
25331: GO 25364
25333: LD_INT 3
25335: DOUBLE
25336: EQUAL
25337: IFTRUE 25341
25339: GO 25363
25341: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25342: LD_VAR 0 1
25346: PPUSH
25347: LD_VAR 0 6
25351: PPUSH
25352: LD_VAR 0 7
25356: PPUSH
25357: CALL_OW 154
25361: GO 25364
25363: POP
// end ;
25364: LD_VAR 0 2
25368: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25369: LD_INT 0
25371: PPUSH
25372: PPUSH
25373: PPUSH
25374: PPUSH
25375: PPUSH
25376: PPUSH
// if not unit or not building then
25377: LD_VAR 0 1
25381: NOT
25382: PUSH
25383: LD_VAR 0 2
25387: NOT
25388: OR
25389: IFFALSE 25393
// exit ;
25391: GO 25551
// x := GetX ( building ) ;
25393: LD_ADDR_VAR 0 5
25397: PUSH
25398: LD_VAR 0 2
25402: PPUSH
25403: CALL_OW 250
25407: ST_TO_ADDR
// y := GetY ( building ) ;
25408: LD_ADDR_VAR 0 6
25412: PUSH
25413: LD_VAR 0 2
25417: PPUSH
25418: CALL_OW 251
25422: ST_TO_ADDR
// for i = 0 to 5 do
25423: LD_ADDR_VAR 0 4
25427: PUSH
25428: DOUBLE
25429: LD_INT 0
25431: DEC
25432: ST_TO_ADDR
25433: LD_INT 5
25435: PUSH
25436: FOR_TO
25437: IFFALSE 25549
// begin _x := ShiftX ( x , i , 3 ) ;
25439: LD_ADDR_VAR 0 7
25443: PUSH
25444: LD_VAR 0 5
25448: PPUSH
25449: LD_VAR 0 4
25453: PPUSH
25454: LD_INT 3
25456: PPUSH
25457: CALL_OW 272
25461: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25462: LD_ADDR_VAR 0 8
25466: PUSH
25467: LD_VAR 0 6
25471: PPUSH
25472: LD_VAR 0 4
25476: PPUSH
25477: LD_INT 3
25479: PPUSH
25480: CALL_OW 273
25484: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25485: LD_VAR 0 7
25489: PPUSH
25490: LD_VAR 0 8
25494: PPUSH
25495: CALL_OW 488
25499: NOT
25500: IFFALSE 25504
// continue ;
25502: GO 25436
// if HexInfo ( _x , _y ) = 0 then
25504: LD_VAR 0 7
25508: PPUSH
25509: LD_VAR 0 8
25513: PPUSH
25514: CALL_OW 428
25518: PUSH
25519: LD_INT 0
25521: EQUAL
25522: IFFALSE 25547
// begin ComMoveXY ( unit , _x , _y ) ;
25524: LD_VAR 0 1
25528: PPUSH
25529: LD_VAR 0 7
25533: PPUSH
25534: LD_VAR 0 8
25538: PPUSH
25539: CALL_OW 111
// exit ;
25543: POP
25544: POP
25545: GO 25551
// end ; end ;
25547: GO 25436
25549: POP
25550: POP
// end ;
25551: LD_VAR 0 3
25555: RET
// export function ScanBase ( side , base_area ) ; begin
25556: LD_INT 0
25558: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25559: LD_ADDR_VAR 0 3
25563: PUSH
25564: LD_VAR 0 2
25568: PPUSH
25569: LD_INT 81
25571: PUSH
25572: LD_VAR 0 1
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PPUSH
25581: CALL_OW 70
25585: ST_TO_ADDR
// end ;
25586: LD_VAR 0 3
25590: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25591: LD_INT 0
25593: PPUSH
25594: PPUSH
25595: PPUSH
25596: PPUSH
// result := false ;
25597: LD_ADDR_VAR 0 2
25601: PUSH
25602: LD_INT 0
25604: ST_TO_ADDR
// side := GetSide ( unit ) ;
25605: LD_ADDR_VAR 0 3
25609: PUSH
25610: LD_VAR 0 1
25614: PPUSH
25615: CALL_OW 255
25619: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25620: LD_ADDR_VAR 0 4
25624: PUSH
25625: LD_VAR 0 1
25629: PPUSH
25630: CALL_OW 248
25634: ST_TO_ADDR
// case nat of 1 :
25635: LD_VAR 0 4
25639: PUSH
25640: LD_INT 1
25642: DOUBLE
25643: EQUAL
25644: IFTRUE 25648
25646: GO 25659
25648: POP
// tech := tech_lassight ; 2 :
25649: LD_ADDR_VAR 0 5
25653: PUSH
25654: LD_INT 12
25656: ST_TO_ADDR
25657: GO 25698
25659: LD_INT 2
25661: DOUBLE
25662: EQUAL
25663: IFTRUE 25667
25665: GO 25678
25667: POP
// tech := tech_mortar ; 3 :
25668: LD_ADDR_VAR 0 5
25672: PUSH
25673: LD_INT 41
25675: ST_TO_ADDR
25676: GO 25698
25678: LD_INT 3
25680: DOUBLE
25681: EQUAL
25682: IFTRUE 25686
25684: GO 25697
25686: POP
// tech := tech_bazooka ; end ;
25687: LD_ADDR_VAR 0 5
25691: PUSH
25692: LD_INT 44
25694: ST_TO_ADDR
25695: GO 25698
25697: POP
// if Researched ( side , tech ) then
25698: LD_VAR 0 3
25702: PPUSH
25703: LD_VAR 0 5
25707: PPUSH
25708: CALL_OW 325
25712: IFFALSE 25739
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25714: LD_ADDR_VAR 0 2
25718: PUSH
25719: LD_INT 5
25721: PUSH
25722: LD_INT 8
25724: PUSH
25725: LD_INT 9
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: LIST
25732: PUSH
25733: LD_VAR 0 4
25737: ARRAY
25738: ST_TO_ADDR
// end ;
25739: LD_VAR 0 2
25743: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25744: LD_INT 0
25746: PPUSH
25747: PPUSH
25748: PPUSH
// if not mines then
25749: LD_VAR 0 2
25753: NOT
25754: IFFALSE 25758
// exit ;
25756: GO 25902
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25758: LD_ADDR_VAR 0 5
25762: PUSH
25763: LD_INT 81
25765: PUSH
25766: LD_VAR 0 1
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PUSH
25775: LD_INT 3
25777: PUSH
25778: LD_INT 21
25780: PUSH
25781: LD_INT 3
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PPUSH
25796: CALL_OW 69
25800: ST_TO_ADDR
// for i in mines do
25801: LD_ADDR_VAR 0 4
25805: PUSH
25806: LD_VAR 0 2
25810: PUSH
25811: FOR_IN
25812: IFFALSE 25900
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25814: LD_VAR 0 4
25818: PUSH
25819: LD_INT 1
25821: ARRAY
25822: PPUSH
25823: LD_VAR 0 4
25827: PUSH
25828: LD_INT 2
25830: ARRAY
25831: PPUSH
25832: CALL_OW 458
25836: NOT
25837: IFFALSE 25841
// continue ;
25839: GO 25811
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25841: LD_VAR 0 4
25845: PUSH
25846: LD_INT 1
25848: ARRAY
25849: PPUSH
25850: LD_VAR 0 4
25854: PUSH
25855: LD_INT 2
25857: ARRAY
25858: PPUSH
25859: CALL_OW 428
25863: PUSH
25864: LD_VAR 0 5
25868: IN
25869: IFFALSE 25898
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25871: LD_VAR 0 4
25875: PUSH
25876: LD_INT 1
25878: ARRAY
25879: PPUSH
25880: LD_VAR 0 4
25884: PUSH
25885: LD_INT 2
25887: ARRAY
25888: PPUSH
25889: LD_VAR 0 1
25893: PPUSH
25894: CALL_OW 456
// end ;
25898: GO 25811
25900: POP
25901: POP
// end ;
25902: LD_VAR 0 3
25906: RET
// export function Count ( array ) ; var i ; begin
25907: LD_INT 0
25909: PPUSH
25910: PPUSH
// result := 0 ;
25911: LD_ADDR_VAR 0 2
25915: PUSH
25916: LD_INT 0
25918: ST_TO_ADDR
// for i in array do
25919: LD_ADDR_VAR 0 3
25923: PUSH
25924: LD_VAR 0 1
25928: PUSH
25929: FOR_IN
25930: IFFALSE 25954
// if i then
25932: LD_VAR 0 3
25936: IFFALSE 25952
// result := result + 1 ;
25938: LD_ADDR_VAR 0 2
25942: PUSH
25943: LD_VAR 0 2
25947: PUSH
25948: LD_INT 1
25950: PLUS
25951: ST_TO_ADDR
25952: GO 25929
25954: POP
25955: POP
// end ;
25956: LD_VAR 0 2
25960: RET
// export function IsEmpty ( building ) ; begin
25961: LD_INT 0
25963: PPUSH
// if not building then
25964: LD_VAR 0 1
25968: NOT
25969: IFFALSE 25973
// exit ;
25971: GO 26016
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25973: LD_ADDR_VAR 0 2
25977: PUSH
25978: LD_VAR 0 1
25982: PUSH
25983: LD_INT 22
25985: PUSH
25986: LD_VAR 0 1
25990: PPUSH
25991: CALL_OW 255
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 58
26002: PUSH
26003: EMPTY
26004: LIST
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PPUSH
26010: CALL_OW 69
26014: IN
26015: ST_TO_ADDR
// end ;
26016: LD_VAR 0 2
26020: RET
// export function IsNotFull ( building ) ; begin
26021: LD_INT 0
26023: PPUSH
// if not building then
26024: LD_VAR 0 1
26028: NOT
26029: IFFALSE 26033
// exit ;
26031: GO 26052
// result := UnitsInside ( building ) < 6 ;
26033: LD_ADDR_VAR 0 2
26037: PUSH
26038: LD_VAR 0 1
26042: PPUSH
26043: CALL_OW 313
26047: PUSH
26048: LD_INT 6
26050: LESS
26051: ST_TO_ADDR
// end ;
26052: LD_VAR 0 2
26056: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26057: LD_INT 0
26059: PPUSH
26060: PPUSH
26061: PPUSH
26062: PPUSH
// tmp := [ ] ;
26063: LD_ADDR_VAR 0 3
26067: PUSH
26068: EMPTY
26069: ST_TO_ADDR
// list := [ ] ;
26070: LD_ADDR_VAR 0 5
26074: PUSH
26075: EMPTY
26076: ST_TO_ADDR
// for i = 16 to 25 do
26077: LD_ADDR_VAR 0 4
26081: PUSH
26082: DOUBLE
26083: LD_INT 16
26085: DEC
26086: ST_TO_ADDR
26087: LD_INT 25
26089: PUSH
26090: FOR_TO
26091: IFFALSE 26164
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26093: LD_ADDR_VAR 0 3
26097: PUSH
26098: LD_VAR 0 3
26102: PUSH
26103: LD_INT 22
26105: PUSH
26106: LD_VAR 0 1
26110: PPUSH
26111: CALL_OW 255
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 91
26122: PUSH
26123: LD_VAR 0 1
26127: PUSH
26128: LD_INT 6
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 30
26138: PUSH
26139: LD_VAR 0 4
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: LIST
26152: PUSH
26153: EMPTY
26154: LIST
26155: PPUSH
26156: CALL_OW 69
26160: ADD
26161: ST_TO_ADDR
26162: GO 26090
26164: POP
26165: POP
// for i = 1 to tmp do
26166: LD_ADDR_VAR 0 4
26170: PUSH
26171: DOUBLE
26172: LD_INT 1
26174: DEC
26175: ST_TO_ADDR
26176: LD_VAR 0 3
26180: PUSH
26181: FOR_TO
26182: IFFALSE 26270
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26184: LD_ADDR_VAR 0 5
26188: PUSH
26189: LD_VAR 0 5
26193: PUSH
26194: LD_VAR 0 3
26198: PUSH
26199: LD_VAR 0 4
26203: ARRAY
26204: PPUSH
26205: CALL_OW 266
26209: PUSH
26210: LD_VAR 0 3
26214: PUSH
26215: LD_VAR 0 4
26219: ARRAY
26220: PPUSH
26221: CALL_OW 250
26225: PUSH
26226: LD_VAR 0 3
26230: PUSH
26231: LD_VAR 0 4
26235: ARRAY
26236: PPUSH
26237: CALL_OW 251
26241: PUSH
26242: LD_VAR 0 3
26246: PUSH
26247: LD_VAR 0 4
26251: ARRAY
26252: PPUSH
26253: CALL_OW 254
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: PUSH
26264: EMPTY
26265: LIST
26266: ADD
26267: ST_TO_ADDR
26268: GO 26181
26270: POP
26271: POP
// result := list ;
26272: LD_ADDR_VAR 0 2
26276: PUSH
26277: LD_VAR 0 5
26281: ST_TO_ADDR
// end ;
26282: LD_VAR 0 2
26286: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26287: LD_INT 0
26289: PPUSH
26290: PPUSH
26291: PPUSH
26292: PPUSH
26293: PPUSH
26294: PPUSH
26295: PPUSH
// if not factory then
26296: LD_VAR 0 1
26300: NOT
26301: IFFALSE 26305
// exit ;
26303: GO 26898
// if control = control_apeman then
26305: LD_VAR 0 4
26309: PUSH
26310: LD_INT 5
26312: EQUAL
26313: IFFALSE 26422
// begin tmp := UnitsInside ( factory ) ;
26315: LD_ADDR_VAR 0 8
26319: PUSH
26320: LD_VAR 0 1
26324: PPUSH
26325: CALL_OW 313
26329: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26330: LD_VAR 0 8
26334: PPUSH
26335: LD_INT 25
26337: PUSH
26338: LD_INT 12
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: PPUSH
26345: CALL_OW 72
26349: NOT
26350: IFFALSE 26360
// control := control_manual ;
26352: LD_ADDR_VAR 0 4
26356: PUSH
26357: LD_INT 1
26359: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26360: LD_ADDR_VAR 0 8
26364: PUSH
26365: LD_VAR 0 1
26369: PPUSH
26370: CALL 26057 0 1
26374: ST_TO_ADDR
// if tmp then
26375: LD_VAR 0 8
26379: IFFALSE 26422
// begin for i in tmp do
26381: LD_ADDR_VAR 0 7
26385: PUSH
26386: LD_VAR 0 8
26390: PUSH
26391: FOR_IN
26392: IFFALSE 26420
// if i [ 1 ] = b_ext_radio then
26394: LD_VAR 0 7
26398: PUSH
26399: LD_INT 1
26401: ARRAY
26402: PUSH
26403: LD_INT 22
26405: EQUAL
26406: IFFALSE 26418
// begin control := control_remote ;
26408: LD_ADDR_VAR 0 4
26412: PUSH
26413: LD_INT 2
26415: ST_TO_ADDR
// break ;
26416: GO 26420
// end ;
26418: GO 26391
26420: POP
26421: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26422: LD_VAR 0 1
26426: PPUSH
26427: LD_VAR 0 2
26431: PPUSH
26432: LD_VAR 0 3
26436: PPUSH
26437: LD_VAR 0 4
26441: PPUSH
26442: LD_VAR 0 5
26446: PPUSH
26447: CALL_OW 448
26451: IFFALSE 26486
// begin result := [ chassis , engine , control , weapon ] ;
26453: LD_ADDR_VAR 0 6
26457: PUSH
26458: LD_VAR 0 2
26462: PUSH
26463: LD_VAR 0 3
26467: PUSH
26468: LD_VAR 0 4
26472: PUSH
26473: LD_VAR 0 5
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: ST_TO_ADDR
// exit ;
26484: GO 26898
// end ; _chassis := AvailableChassisList ( factory ) ;
26486: LD_ADDR_VAR 0 9
26490: PUSH
26491: LD_VAR 0 1
26495: PPUSH
26496: CALL_OW 475
26500: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26501: LD_ADDR_VAR 0 11
26505: PUSH
26506: LD_VAR 0 1
26510: PPUSH
26511: CALL_OW 476
26515: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26516: LD_ADDR_VAR 0 12
26520: PUSH
26521: LD_VAR 0 1
26525: PPUSH
26526: CALL_OW 477
26530: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26531: LD_ADDR_VAR 0 10
26535: PUSH
26536: LD_VAR 0 1
26540: PPUSH
26541: CALL_OW 478
26545: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26546: LD_VAR 0 9
26550: NOT
26551: PUSH
26552: LD_VAR 0 11
26556: NOT
26557: OR
26558: PUSH
26559: LD_VAR 0 12
26563: NOT
26564: OR
26565: PUSH
26566: LD_VAR 0 10
26570: NOT
26571: OR
26572: IFFALSE 26607
// begin result := [ chassis , engine , control , weapon ] ;
26574: LD_ADDR_VAR 0 6
26578: PUSH
26579: LD_VAR 0 2
26583: PUSH
26584: LD_VAR 0 3
26588: PUSH
26589: LD_VAR 0 4
26593: PUSH
26594: LD_VAR 0 5
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: ST_TO_ADDR
// exit ;
26605: GO 26898
// end ; if not chassis in _chassis then
26607: LD_VAR 0 2
26611: PUSH
26612: LD_VAR 0 9
26616: IN
26617: NOT
26618: IFFALSE 26644
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26620: LD_ADDR_VAR 0 2
26624: PUSH
26625: LD_VAR 0 9
26629: PUSH
26630: LD_INT 1
26632: PPUSH
26633: LD_VAR 0 9
26637: PPUSH
26638: CALL_OW 12
26642: ARRAY
26643: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26644: LD_VAR 0 2
26648: PPUSH
26649: LD_VAR 0 3
26653: PPUSH
26654: CALL 26903 0 2
26658: NOT
26659: IFFALSE 26718
// repeat engine := _engine [ 1 ] ;
26661: LD_ADDR_VAR 0 3
26665: PUSH
26666: LD_VAR 0 11
26670: PUSH
26671: LD_INT 1
26673: ARRAY
26674: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26675: LD_ADDR_VAR 0 11
26679: PUSH
26680: LD_VAR 0 11
26684: PPUSH
26685: LD_INT 1
26687: PPUSH
26688: CALL_OW 3
26692: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26693: LD_VAR 0 2
26697: PPUSH
26698: LD_VAR 0 3
26702: PPUSH
26703: CALL 26903 0 2
26707: PUSH
26708: LD_VAR 0 11
26712: PUSH
26713: EMPTY
26714: EQUAL
26715: OR
26716: IFFALSE 26661
// if not control in _control then
26718: LD_VAR 0 4
26722: PUSH
26723: LD_VAR 0 12
26727: IN
26728: NOT
26729: IFFALSE 26755
// control := _control [ rand ( 1 , _control ) ] ;
26731: LD_ADDR_VAR 0 4
26735: PUSH
26736: LD_VAR 0 12
26740: PUSH
26741: LD_INT 1
26743: PPUSH
26744: LD_VAR 0 12
26748: PPUSH
26749: CALL_OW 12
26753: ARRAY
26754: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26755: LD_VAR 0 2
26759: PPUSH
26760: LD_VAR 0 5
26764: PPUSH
26765: CALL 27123 0 2
26769: NOT
26770: IFFALSE 26829
// repeat weapon := _weapon [ 1 ] ;
26772: LD_ADDR_VAR 0 5
26776: PUSH
26777: LD_VAR 0 10
26781: PUSH
26782: LD_INT 1
26784: ARRAY
26785: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26786: LD_ADDR_VAR 0 10
26790: PUSH
26791: LD_VAR 0 10
26795: PPUSH
26796: LD_INT 1
26798: PPUSH
26799: CALL_OW 3
26803: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26804: LD_VAR 0 2
26808: PPUSH
26809: LD_VAR 0 5
26813: PPUSH
26814: CALL 27123 0 2
26818: PUSH
26819: LD_VAR 0 10
26823: PUSH
26824: EMPTY
26825: EQUAL
26826: OR
26827: IFFALSE 26772
// result := [ ] ;
26829: LD_ADDR_VAR 0 6
26833: PUSH
26834: EMPTY
26835: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26836: LD_VAR 0 1
26840: PPUSH
26841: LD_VAR 0 2
26845: PPUSH
26846: LD_VAR 0 3
26850: PPUSH
26851: LD_VAR 0 4
26855: PPUSH
26856: LD_VAR 0 5
26860: PPUSH
26861: CALL_OW 448
26865: IFFALSE 26898
// result := [ chassis , engine , control , weapon ] ;
26867: LD_ADDR_VAR 0 6
26871: PUSH
26872: LD_VAR 0 2
26876: PUSH
26877: LD_VAR 0 3
26881: PUSH
26882: LD_VAR 0 4
26886: PUSH
26887: LD_VAR 0 5
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: ST_TO_ADDR
// end ;
26898: LD_VAR 0 6
26902: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26903: LD_INT 0
26905: PPUSH
// if not chassis or not engine then
26906: LD_VAR 0 1
26910: NOT
26911: PUSH
26912: LD_VAR 0 2
26916: NOT
26917: OR
26918: IFFALSE 26922
// exit ;
26920: GO 27118
// case engine of engine_solar :
26922: LD_VAR 0 2
26926: PUSH
26927: LD_INT 2
26929: DOUBLE
26930: EQUAL
26931: IFTRUE 26935
26933: GO 26973
26935: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26936: LD_ADDR_VAR 0 3
26940: PUSH
26941: LD_INT 11
26943: PUSH
26944: LD_INT 12
26946: PUSH
26947: LD_INT 13
26949: PUSH
26950: LD_INT 14
26952: PUSH
26953: LD_INT 1
26955: PUSH
26956: LD_INT 2
26958: PUSH
26959: LD_INT 3
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: ST_TO_ADDR
26971: GO 27102
26973: LD_INT 1
26975: DOUBLE
26976: EQUAL
26977: IFTRUE 26981
26979: GO 27043
26981: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26982: LD_ADDR_VAR 0 3
26986: PUSH
26987: LD_INT 11
26989: PUSH
26990: LD_INT 12
26992: PUSH
26993: LD_INT 13
26995: PUSH
26996: LD_INT 14
26998: PUSH
26999: LD_INT 1
27001: PUSH
27002: LD_INT 2
27004: PUSH
27005: LD_INT 3
27007: PUSH
27008: LD_INT 4
27010: PUSH
27011: LD_INT 5
27013: PUSH
27014: LD_INT 21
27016: PUSH
27017: LD_INT 23
27019: PUSH
27020: LD_INT 22
27022: PUSH
27023: LD_INT 24
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: ST_TO_ADDR
27041: GO 27102
27043: LD_INT 3
27045: DOUBLE
27046: EQUAL
27047: IFTRUE 27051
27049: GO 27101
27051: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27052: LD_ADDR_VAR 0 3
27056: PUSH
27057: LD_INT 13
27059: PUSH
27060: LD_INT 14
27062: PUSH
27063: LD_INT 2
27065: PUSH
27066: LD_INT 3
27068: PUSH
27069: LD_INT 4
27071: PUSH
27072: LD_INT 5
27074: PUSH
27075: LD_INT 21
27077: PUSH
27078: LD_INT 22
27080: PUSH
27081: LD_INT 23
27083: PUSH
27084: LD_INT 24
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: ST_TO_ADDR
27099: GO 27102
27101: POP
// result := ( chassis in result ) ;
27102: LD_ADDR_VAR 0 3
27106: PUSH
27107: LD_VAR 0 1
27111: PUSH
27112: LD_VAR 0 3
27116: IN
27117: ST_TO_ADDR
// end ;
27118: LD_VAR 0 3
27122: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27123: LD_INT 0
27125: PPUSH
// if not chassis or not weapon then
27126: LD_VAR 0 1
27130: NOT
27131: PUSH
27132: LD_VAR 0 2
27136: NOT
27137: OR
27138: IFFALSE 27142
// exit ;
27140: GO 28204
// case weapon of us_machine_gun :
27142: LD_VAR 0 2
27146: PUSH
27147: LD_INT 2
27149: DOUBLE
27150: EQUAL
27151: IFTRUE 27155
27153: GO 27185
27155: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27156: LD_ADDR_VAR 0 3
27160: PUSH
27161: LD_INT 1
27163: PUSH
27164: LD_INT 2
27166: PUSH
27167: LD_INT 3
27169: PUSH
27170: LD_INT 4
27172: PUSH
27173: LD_INT 5
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: ST_TO_ADDR
27183: GO 28188
27185: LD_INT 3
27187: DOUBLE
27188: EQUAL
27189: IFTRUE 27193
27191: GO 27223
27193: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27194: LD_ADDR_VAR 0 3
27198: PUSH
27199: LD_INT 1
27201: PUSH
27202: LD_INT 2
27204: PUSH
27205: LD_INT 3
27207: PUSH
27208: LD_INT 4
27210: PUSH
27211: LD_INT 5
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: ST_TO_ADDR
27221: GO 28188
27223: LD_INT 11
27225: DOUBLE
27226: EQUAL
27227: IFTRUE 27231
27229: GO 27261
27231: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27232: LD_ADDR_VAR 0 3
27236: PUSH
27237: LD_INT 1
27239: PUSH
27240: LD_INT 2
27242: PUSH
27243: LD_INT 3
27245: PUSH
27246: LD_INT 4
27248: PUSH
27249: LD_INT 5
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: ST_TO_ADDR
27259: GO 28188
27261: LD_INT 4
27263: DOUBLE
27264: EQUAL
27265: IFTRUE 27269
27267: GO 27295
27269: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27270: LD_ADDR_VAR 0 3
27274: PUSH
27275: LD_INT 2
27277: PUSH
27278: LD_INT 3
27280: PUSH
27281: LD_INT 4
27283: PUSH
27284: LD_INT 5
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: ST_TO_ADDR
27293: GO 28188
27295: LD_INT 5
27297: DOUBLE
27298: EQUAL
27299: IFTRUE 27303
27301: GO 27329
27303: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27304: LD_ADDR_VAR 0 3
27308: PUSH
27309: LD_INT 2
27311: PUSH
27312: LD_INT 3
27314: PUSH
27315: LD_INT 4
27317: PUSH
27318: LD_INT 5
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: ST_TO_ADDR
27327: GO 28188
27329: LD_INT 9
27331: DOUBLE
27332: EQUAL
27333: IFTRUE 27337
27335: GO 27363
27337: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27338: LD_ADDR_VAR 0 3
27342: PUSH
27343: LD_INT 2
27345: PUSH
27346: LD_INT 3
27348: PUSH
27349: LD_INT 4
27351: PUSH
27352: LD_INT 5
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: ST_TO_ADDR
27361: GO 28188
27363: LD_INT 7
27365: DOUBLE
27366: EQUAL
27367: IFTRUE 27371
27369: GO 27397
27371: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27372: LD_ADDR_VAR 0 3
27376: PUSH
27377: LD_INT 2
27379: PUSH
27380: LD_INT 3
27382: PUSH
27383: LD_INT 4
27385: PUSH
27386: LD_INT 5
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: ST_TO_ADDR
27395: GO 28188
27397: LD_INT 12
27399: DOUBLE
27400: EQUAL
27401: IFTRUE 27405
27403: GO 27431
27405: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27406: LD_ADDR_VAR 0 3
27410: PUSH
27411: LD_INT 2
27413: PUSH
27414: LD_INT 3
27416: PUSH
27417: LD_INT 4
27419: PUSH
27420: LD_INT 5
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: ST_TO_ADDR
27429: GO 28188
27431: LD_INT 13
27433: DOUBLE
27434: EQUAL
27435: IFTRUE 27439
27437: GO 27465
27439: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27440: LD_ADDR_VAR 0 3
27444: PUSH
27445: LD_INT 2
27447: PUSH
27448: LD_INT 3
27450: PUSH
27451: LD_INT 4
27453: PUSH
27454: LD_INT 5
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: ST_TO_ADDR
27463: GO 28188
27465: LD_INT 14
27467: DOUBLE
27468: EQUAL
27469: IFTRUE 27473
27471: GO 27491
27473: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27474: LD_ADDR_VAR 0 3
27478: PUSH
27479: LD_INT 4
27481: PUSH
27482: LD_INT 5
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: ST_TO_ADDR
27489: GO 28188
27491: LD_INT 6
27493: DOUBLE
27494: EQUAL
27495: IFTRUE 27499
27497: GO 27517
27499: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27500: LD_ADDR_VAR 0 3
27504: PUSH
27505: LD_INT 4
27507: PUSH
27508: LD_INT 5
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: ST_TO_ADDR
27515: GO 28188
27517: LD_INT 10
27519: DOUBLE
27520: EQUAL
27521: IFTRUE 27525
27523: GO 27543
27525: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27526: LD_ADDR_VAR 0 3
27530: PUSH
27531: LD_INT 4
27533: PUSH
27534: LD_INT 5
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: ST_TO_ADDR
27541: GO 28188
27543: LD_INT 22
27545: DOUBLE
27546: EQUAL
27547: IFTRUE 27551
27549: GO 27577
27551: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27552: LD_ADDR_VAR 0 3
27556: PUSH
27557: LD_INT 11
27559: PUSH
27560: LD_INT 12
27562: PUSH
27563: LD_INT 13
27565: PUSH
27566: LD_INT 14
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: ST_TO_ADDR
27575: GO 28188
27577: LD_INT 23
27579: DOUBLE
27580: EQUAL
27581: IFTRUE 27585
27583: GO 27611
27585: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27586: LD_ADDR_VAR 0 3
27590: PUSH
27591: LD_INT 11
27593: PUSH
27594: LD_INT 12
27596: PUSH
27597: LD_INT 13
27599: PUSH
27600: LD_INT 14
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: ST_TO_ADDR
27609: GO 28188
27611: LD_INT 24
27613: DOUBLE
27614: EQUAL
27615: IFTRUE 27619
27617: GO 27645
27619: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27620: LD_ADDR_VAR 0 3
27624: PUSH
27625: LD_INT 11
27627: PUSH
27628: LD_INT 12
27630: PUSH
27631: LD_INT 13
27633: PUSH
27634: LD_INT 14
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: ST_TO_ADDR
27643: GO 28188
27645: LD_INT 30
27647: DOUBLE
27648: EQUAL
27649: IFTRUE 27653
27651: GO 27679
27653: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27654: LD_ADDR_VAR 0 3
27658: PUSH
27659: LD_INT 11
27661: PUSH
27662: LD_INT 12
27664: PUSH
27665: LD_INT 13
27667: PUSH
27668: LD_INT 14
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: ST_TO_ADDR
27677: GO 28188
27679: LD_INT 25
27681: DOUBLE
27682: EQUAL
27683: IFTRUE 27687
27685: GO 27705
27687: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27688: LD_ADDR_VAR 0 3
27692: PUSH
27693: LD_INT 13
27695: PUSH
27696: LD_INT 14
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: ST_TO_ADDR
27703: GO 28188
27705: LD_INT 27
27707: DOUBLE
27708: EQUAL
27709: IFTRUE 27713
27711: GO 27731
27713: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
27714: LD_ADDR_VAR 0 3
27718: PUSH
27719: LD_INT 13
27721: PUSH
27722: LD_INT 14
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: ST_TO_ADDR
27729: GO 28188
27731: LD_EXP 99
27735: DOUBLE
27736: EQUAL
27737: IFTRUE 27741
27739: GO 27767
27741: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27742: LD_ADDR_VAR 0 3
27746: PUSH
27747: LD_INT 11
27749: PUSH
27750: LD_INT 12
27752: PUSH
27753: LD_INT 13
27755: PUSH
27756: LD_INT 14
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: ST_TO_ADDR
27765: GO 28188
27767: LD_INT 28
27769: DOUBLE
27770: EQUAL
27771: IFTRUE 27775
27773: GO 27793
27775: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27776: LD_ADDR_VAR 0 3
27780: PUSH
27781: LD_INT 13
27783: PUSH
27784: LD_INT 14
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: ST_TO_ADDR
27791: GO 28188
27793: LD_INT 29
27795: DOUBLE
27796: EQUAL
27797: IFTRUE 27801
27799: GO 27819
27801: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27802: LD_ADDR_VAR 0 3
27806: PUSH
27807: LD_INT 13
27809: PUSH
27810: LD_INT 14
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: ST_TO_ADDR
27817: GO 28188
27819: LD_INT 31
27821: DOUBLE
27822: EQUAL
27823: IFTRUE 27827
27825: GO 27845
27827: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27828: LD_ADDR_VAR 0 3
27832: PUSH
27833: LD_INT 13
27835: PUSH
27836: LD_INT 14
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: ST_TO_ADDR
27843: GO 28188
27845: LD_INT 26
27847: DOUBLE
27848: EQUAL
27849: IFTRUE 27853
27851: GO 27871
27853: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27854: LD_ADDR_VAR 0 3
27858: PUSH
27859: LD_INT 13
27861: PUSH
27862: LD_INT 14
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: ST_TO_ADDR
27869: GO 28188
27871: LD_INT 42
27873: DOUBLE
27874: EQUAL
27875: IFTRUE 27879
27877: GO 27905
27879: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27880: LD_ADDR_VAR 0 3
27884: PUSH
27885: LD_INT 21
27887: PUSH
27888: LD_INT 22
27890: PUSH
27891: LD_INT 23
27893: PUSH
27894: LD_INT 24
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: ST_TO_ADDR
27903: GO 28188
27905: LD_INT 43
27907: DOUBLE
27908: EQUAL
27909: IFTRUE 27913
27911: GO 27939
27913: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27914: LD_ADDR_VAR 0 3
27918: PUSH
27919: LD_INT 21
27921: PUSH
27922: LD_INT 22
27924: PUSH
27925: LD_INT 23
27927: PUSH
27928: LD_INT 24
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: ST_TO_ADDR
27937: GO 28188
27939: LD_INT 44
27941: DOUBLE
27942: EQUAL
27943: IFTRUE 27947
27945: GO 27973
27947: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27948: LD_ADDR_VAR 0 3
27952: PUSH
27953: LD_INT 21
27955: PUSH
27956: LD_INT 22
27958: PUSH
27959: LD_INT 23
27961: PUSH
27962: LD_INT 24
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: ST_TO_ADDR
27971: GO 28188
27973: LD_INT 45
27975: DOUBLE
27976: EQUAL
27977: IFTRUE 27981
27979: GO 28007
27981: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27982: LD_ADDR_VAR 0 3
27986: PUSH
27987: LD_INT 21
27989: PUSH
27990: LD_INT 22
27992: PUSH
27993: LD_INT 23
27995: PUSH
27996: LD_INT 24
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: ST_TO_ADDR
28005: GO 28188
28007: LD_INT 49
28009: DOUBLE
28010: EQUAL
28011: IFTRUE 28015
28013: GO 28041
28015: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28016: LD_ADDR_VAR 0 3
28020: PUSH
28021: LD_INT 21
28023: PUSH
28024: LD_INT 22
28026: PUSH
28027: LD_INT 23
28029: PUSH
28030: LD_INT 24
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: ST_TO_ADDR
28039: GO 28188
28041: LD_INT 51
28043: DOUBLE
28044: EQUAL
28045: IFTRUE 28049
28047: GO 28075
28049: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28050: LD_ADDR_VAR 0 3
28054: PUSH
28055: LD_INT 21
28057: PUSH
28058: LD_INT 22
28060: PUSH
28061: LD_INT 23
28063: PUSH
28064: LD_INT 24
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: ST_TO_ADDR
28073: GO 28188
28075: LD_INT 52
28077: DOUBLE
28078: EQUAL
28079: IFTRUE 28083
28081: GO 28109
28083: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28084: LD_ADDR_VAR 0 3
28088: PUSH
28089: LD_INT 21
28091: PUSH
28092: LD_INT 22
28094: PUSH
28095: LD_INT 23
28097: PUSH
28098: LD_INT 24
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: ST_TO_ADDR
28107: GO 28188
28109: LD_INT 53
28111: DOUBLE
28112: EQUAL
28113: IFTRUE 28117
28115: GO 28135
28117: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28118: LD_ADDR_VAR 0 3
28122: PUSH
28123: LD_INT 23
28125: PUSH
28126: LD_INT 24
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: ST_TO_ADDR
28133: GO 28188
28135: LD_INT 46
28137: DOUBLE
28138: EQUAL
28139: IFTRUE 28143
28141: GO 28161
28143: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28144: LD_ADDR_VAR 0 3
28148: PUSH
28149: LD_INT 23
28151: PUSH
28152: LD_INT 24
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: ST_TO_ADDR
28159: GO 28188
28161: LD_INT 47
28163: DOUBLE
28164: EQUAL
28165: IFTRUE 28169
28167: GO 28187
28169: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28170: LD_ADDR_VAR 0 3
28174: PUSH
28175: LD_INT 23
28177: PUSH
28178: LD_INT 24
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: ST_TO_ADDR
28185: GO 28188
28187: POP
// result := ( chassis in result ) ;
28188: LD_ADDR_VAR 0 3
28192: PUSH
28193: LD_VAR 0 1
28197: PUSH
28198: LD_VAR 0 3
28202: IN
28203: ST_TO_ADDR
// end ;
28204: LD_VAR 0 3
28208: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28209: LD_INT 0
28211: PPUSH
28212: PPUSH
28213: PPUSH
28214: PPUSH
28215: PPUSH
28216: PPUSH
28217: PPUSH
// result := array ;
28218: LD_ADDR_VAR 0 5
28222: PUSH
28223: LD_VAR 0 1
28227: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28228: LD_VAR 0 1
28232: NOT
28233: PUSH
28234: LD_VAR 0 2
28238: NOT
28239: OR
28240: PUSH
28241: LD_VAR 0 3
28245: NOT
28246: OR
28247: PUSH
28248: LD_VAR 0 2
28252: PUSH
28253: LD_VAR 0 1
28257: GREATER
28258: OR
28259: PUSH
28260: LD_VAR 0 3
28264: PUSH
28265: LD_VAR 0 1
28269: GREATER
28270: OR
28271: IFFALSE 28275
// exit ;
28273: GO 28571
// if direction then
28275: LD_VAR 0 4
28279: IFFALSE 28343
// begin d := 1 ;
28281: LD_ADDR_VAR 0 9
28285: PUSH
28286: LD_INT 1
28288: ST_TO_ADDR
// if i_from > i_to then
28289: LD_VAR 0 2
28293: PUSH
28294: LD_VAR 0 3
28298: GREATER
28299: IFFALSE 28325
// length := ( array - i_from ) + i_to else
28301: LD_ADDR_VAR 0 11
28305: PUSH
28306: LD_VAR 0 1
28310: PUSH
28311: LD_VAR 0 2
28315: MINUS
28316: PUSH
28317: LD_VAR 0 3
28321: PLUS
28322: ST_TO_ADDR
28323: GO 28341
// length := i_to - i_from ;
28325: LD_ADDR_VAR 0 11
28329: PUSH
28330: LD_VAR 0 3
28334: PUSH
28335: LD_VAR 0 2
28339: MINUS
28340: ST_TO_ADDR
// end else
28341: GO 28404
// begin d := - 1 ;
28343: LD_ADDR_VAR 0 9
28347: PUSH
28348: LD_INT 1
28350: NEG
28351: ST_TO_ADDR
// if i_from > i_to then
28352: LD_VAR 0 2
28356: PUSH
28357: LD_VAR 0 3
28361: GREATER
28362: IFFALSE 28382
// length := i_from - i_to else
28364: LD_ADDR_VAR 0 11
28368: PUSH
28369: LD_VAR 0 2
28373: PUSH
28374: LD_VAR 0 3
28378: MINUS
28379: ST_TO_ADDR
28380: GO 28404
// length := ( array - i_to ) + i_from ;
28382: LD_ADDR_VAR 0 11
28386: PUSH
28387: LD_VAR 0 1
28391: PUSH
28392: LD_VAR 0 3
28396: MINUS
28397: PUSH
28398: LD_VAR 0 2
28402: PLUS
28403: ST_TO_ADDR
// end ; if not length then
28404: LD_VAR 0 11
28408: NOT
28409: IFFALSE 28413
// exit ;
28411: GO 28571
// tmp := array ;
28413: LD_ADDR_VAR 0 10
28417: PUSH
28418: LD_VAR 0 1
28422: ST_TO_ADDR
// for i = 1 to length do
28423: LD_ADDR_VAR 0 6
28427: PUSH
28428: DOUBLE
28429: LD_INT 1
28431: DEC
28432: ST_TO_ADDR
28433: LD_VAR 0 11
28437: PUSH
28438: FOR_TO
28439: IFFALSE 28559
// begin for j = 1 to array do
28441: LD_ADDR_VAR 0 7
28445: PUSH
28446: DOUBLE
28447: LD_INT 1
28449: DEC
28450: ST_TO_ADDR
28451: LD_VAR 0 1
28455: PUSH
28456: FOR_TO
28457: IFFALSE 28545
// begin k := j + d ;
28459: LD_ADDR_VAR 0 8
28463: PUSH
28464: LD_VAR 0 7
28468: PUSH
28469: LD_VAR 0 9
28473: PLUS
28474: ST_TO_ADDR
// if k > array then
28475: LD_VAR 0 8
28479: PUSH
28480: LD_VAR 0 1
28484: GREATER
28485: IFFALSE 28495
// k := 1 ;
28487: LD_ADDR_VAR 0 8
28491: PUSH
28492: LD_INT 1
28494: ST_TO_ADDR
// if not k then
28495: LD_VAR 0 8
28499: NOT
28500: IFFALSE 28512
// k := array ;
28502: LD_ADDR_VAR 0 8
28506: PUSH
28507: LD_VAR 0 1
28511: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28512: LD_ADDR_VAR 0 10
28516: PUSH
28517: LD_VAR 0 10
28521: PPUSH
28522: LD_VAR 0 8
28526: PPUSH
28527: LD_VAR 0 1
28531: PUSH
28532: LD_VAR 0 7
28536: ARRAY
28537: PPUSH
28538: CALL_OW 1
28542: ST_TO_ADDR
// end ;
28543: GO 28456
28545: POP
28546: POP
// array := tmp ;
28547: LD_ADDR_VAR 0 1
28551: PUSH
28552: LD_VAR 0 10
28556: ST_TO_ADDR
// end ;
28557: GO 28438
28559: POP
28560: POP
// result := array ;
28561: LD_ADDR_VAR 0 5
28565: PUSH
28566: LD_VAR 0 1
28570: ST_TO_ADDR
// end ;
28571: LD_VAR 0 5
28575: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28576: LD_INT 0
28578: PPUSH
28579: PPUSH
// result := 0 ;
28580: LD_ADDR_VAR 0 3
28584: PUSH
28585: LD_INT 0
28587: ST_TO_ADDR
// if not array or not value in array then
28588: LD_VAR 0 1
28592: NOT
28593: PUSH
28594: LD_VAR 0 2
28598: PUSH
28599: LD_VAR 0 1
28603: IN
28604: NOT
28605: OR
28606: IFFALSE 28610
// exit ;
28608: GO 28664
// for i = 1 to array do
28610: LD_ADDR_VAR 0 4
28614: PUSH
28615: DOUBLE
28616: LD_INT 1
28618: DEC
28619: ST_TO_ADDR
28620: LD_VAR 0 1
28624: PUSH
28625: FOR_TO
28626: IFFALSE 28662
// if value = array [ i ] then
28628: LD_VAR 0 2
28632: PUSH
28633: LD_VAR 0 1
28637: PUSH
28638: LD_VAR 0 4
28642: ARRAY
28643: EQUAL
28644: IFFALSE 28660
// begin result := i ;
28646: LD_ADDR_VAR 0 3
28650: PUSH
28651: LD_VAR 0 4
28655: ST_TO_ADDR
// exit ;
28656: POP
28657: POP
28658: GO 28664
// end ;
28660: GO 28625
28662: POP
28663: POP
// end ;
28664: LD_VAR 0 3
28668: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28669: LD_INT 0
28671: PPUSH
// vc_chassis := chassis ;
28672: LD_ADDR_OWVAR 37
28676: PUSH
28677: LD_VAR 0 1
28681: ST_TO_ADDR
// vc_engine := engine ;
28682: LD_ADDR_OWVAR 39
28686: PUSH
28687: LD_VAR 0 2
28691: ST_TO_ADDR
// vc_control := control ;
28692: LD_ADDR_OWVAR 38
28696: PUSH
28697: LD_VAR 0 3
28701: ST_TO_ADDR
// vc_weapon := weapon ;
28702: LD_ADDR_OWVAR 40
28706: PUSH
28707: LD_VAR 0 4
28711: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28712: LD_ADDR_OWVAR 41
28716: PUSH
28717: LD_VAR 0 5
28721: ST_TO_ADDR
// end ;
28722: LD_VAR 0 6
28726: RET
// export function WantPlant ( unit ) ; var task ; begin
28727: LD_INT 0
28729: PPUSH
28730: PPUSH
// result := false ;
28731: LD_ADDR_VAR 0 2
28735: PUSH
28736: LD_INT 0
28738: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28739: LD_ADDR_VAR 0 3
28743: PUSH
28744: LD_VAR 0 1
28748: PPUSH
28749: CALL_OW 437
28753: ST_TO_ADDR
// if task then
28754: LD_VAR 0 3
28758: IFFALSE 28786
// if task [ 1 ] [ 1 ] = p then
28760: LD_VAR 0 3
28764: PUSH
28765: LD_INT 1
28767: ARRAY
28768: PUSH
28769: LD_INT 1
28771: ARRAY
28772: PUSH
28773: LD_STRING p
28775: EQUAL
28776: IFFALSE 28786
// result := true ;
28778: LD_ADDR_VAR 0 2
28782: PUSH
28783: LD_INT 1
28785: ST_TO_ADDR
// end ;
28786: LD_VAR 0 2
28790: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28791: LD_INT 0
28793: PPUSH
28794: PPUSH
28795: PPUSH
28796: PPUSH
// if pos < 1 then
28797: LD_VAR 0 2
28801: PUSH
28802: LD_INT 1
28804: LESS
28805: IFFALSE 28809
// exit ;
28807: GO 29112
// if pos = 1 then
28809: LD_VAR 0 2
28813: PUSH
28814: LD_INT 1
28816: EQUAL
28817: IFFALSE 28850
// result := Replace ( arr , pos [ 1 ] , value ) else
28819: LD_ADDR_VAR 0 4
28823: PUSH
28824: LD_VAR 0 1
28828: PPUSH
28829: LD_VAR 0 2
28833: PUSH
28834: LD_INT 1
28836: ARRAY
28837: PPUSH
28838: LD_VAR 0 3
28842: PPUSH
28843: CALL_OW 1
28847: ST_TO_ADDR
28848: GO 29112
// begin tmp := arr ;
28850: LD_ADDR_VAR 0 6
28854: PUSH
28855: LD_VAR 0 1
28859: ST_TO_ADDR
// s_arr := [ tmp ] ;
28860: LD_ADDR_VAR 0 7
28864: PUSH
28865: LD_VAR 0 6
28869: PUSH
28870: EMPTY
28871: LIST
28872: ST_TO_ADDR
// for i = 1 to pos - 1 do
28873: LD_ADDR_VAR 0 5
28877: PUSH
28878: DOUBLE
28879: LD_INT 1
28881: DEC
28882: ST_TO_ADDR
28883: LD_VAR 0 2
28887: PUSH
28888: LD_INT 1
28890: MINUS
28891: PUSH
28892: FOR_TO
28893: IFFALSE 28938
// begin tmp := tmp [ pos [ i ] ] ;
28895: LD_ADDR_VAR 0 6
28899: PUSH
28900: LD_VAR 0 6
28904: PUSH
28905: LD_VAR 0 2
28909: PUSH
28910: LD_VAR 0 5
28914: ARRAY
28915: ARRAY
28916: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28917: LD_ADDR_VAR 0 7
28921: PUSH
28922: LD_VAR 0 7
28926: PUSH
28927: LD_VAR 0 6
28931: PUSH
28932: EMPTY
28933: LIST
28934: ADD
28935: ST_TO_ADDR
// end ;
28936: GO 28892
28938: POP
28939: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28940: LD_ADDR_VAR 0 6
28944: PUSH
28945: LD_VAR 0 6
28949: PPUSH
28950: LD_VAR 0 2
28954: PUSH
28955: LD_VAR 0 2
28959: ARRAY
28960: PPUSH
28961: LD_VAR 0 3
28965: PPUSH
28966: CALL_OW 1
28970: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28971: LD_ADDR_VAR 0 7
28975: PUSH
28976: LD_VAR 0 7
28980: PPUSH
28981: LD_VAR 0 7
28985: PPUSH
28986: LD_VAR 0 6
28990: PPUSH
28991: CALL_OW 1
28995: ST_TO_ADDR
// for i = s_arr downto 2 do
28996: LD_ADDR_VAR 0 5
29000: PUSH
29001: DOUBLE
29002: LD_VAR 0 7
29006: INC
29007: ST_TO_ADDR
29008: LD_INT 2
29010: PUSH
29011: FOR_DOWNTO
29012: IFFALSE 29096
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29014: LD_ADDR_VAR 0 6
29018: PUSH
29019: LD_VAR 0 7
29023: PUSH
29024: LD_VAR 0 5
29028: PUSH
29029: LD_INT 1
29031: MINUS
29032: ARRAY
29033: PPUSH
29034: LD_VAR 0 2
29038: PUSH
29039: LD_VAR 0 5
29043: PUSH
29044: LD_INT 1
29046: MINUS
29047: ARRAY
29048: PPUSH
29049: LD_VAR 0 7
29053: PUSH
29054: LD_VAR 0 5
29058: ARRAY
29059: PPUSH
29060: CALL_OW 1
29064: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29065: LD_ADDR_VAR 0 7
29069: PUSH
29070: LD_VAR 0 7
29074: PPUSH
29075: LD_VAR 0 5
29079: PUSH
29080: LD_INT 1
29082: MINUS
29083: PPUSH
29084: LD_VAR 0 6
29088: PPUSH
29089: CALL_OW 1
29093: ST_TO_ADDR
// end ;
29094: GO 29011
29096: POP
29097: POP
// result := s_arr [ 1 ] ;
29098: LD_ADDR_VAR 0 4
29102: PUSH
29103: LD_VAR 0 7
29107: PUSH
29108: LD_INT 1
29110: ARRAY
29111: ST_TO_ADDR
// end ; end ;
29112: LD_VAR 0 4
29116: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29117: LD_INT 0
29119: PPUSH
29120: PPUSH
// if not list then
29121: LD_VAR 0 1
29125: NOT
29126: IFFALSE 29130
// exit ;
29128: GO 29221
// i := list [ pos1 ] ;
29130: LD_ADDR_VAR 0 5
29134: PUSH
29135: LD_VAR 0 1
29139: PUSH
29140: LD_VAR 0 2
29144: ARRAY
29145: ST_TO_ADDR
// if not i then
29146: LD_VAR 0 5
29150: NOT
29151: IFFALSE 29155
// exit ;
29153: GO 29221
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29155: LD_ADDR_VAR 0 1
29159: PUSH
29160: LD_VAR 0 1
29164: PPUSH
29165: LD_VAR 0 2
29169: PPUSH
29170: LD_VAR 0 1
29174: PUSH
29175: LD_VAR 0 3
29179: ARRAY
29180: PPUSH
29181: CALL_OW 1
29185: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29186: LD_ADDR_VAR 0 1
29190: PUSH
29191: LD_VAR 0 1
29195: PPUSH
29196: LD_VAR 0 3
29200: PPUSH
29201: LD_VAR 0 5
29205: PPUSH
29206: CALL_OW 1
29210: ST_TO_ADDR
// result := list ;
29211: LD_ADDR_VAR 0 4
29215: PUSH
29216: LD_VAR 0 1
29220: ST_TO_ADDR
// end ;
29221: LD_VAR 0 4
29225: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29226: LD_INT 0
29228: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29229: LD_ADDR_VAR 0 5
29233: PUSH
29234: LD_VAR 0 1
29238: PPUSH
29239: CALL_OW 250
29243: PPUSH
29244: LD_VAR 0 1
29248: PPUSH
29249: CALL_OW 251
29253: PPUSH
29254: LD_VAR 0 2
29258: PPUSH
29259: LD_VAR 0 3
29263: PPUSH
29264: LD_VAR 0 4
29268: PPUSH
29269: CALL 29279 0 5
29273: ST_TO_ADDR
// end ;
29274: LD_VAR 0 5
29278: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29279: LD_INT 0
29281: PPUSH
29282: PPUSH
29283: PPUSH
29284: PPUSH
// if not list then
29285: LD_VAR 0 3
29289: NOT
29290: IFFALSE 29294
// exit ;
29292: GO 29682
// result := [ ] ;
29294: LD_ADDR_VAR 0 6
29298: PUSH
29299: EMPTY
29300: ST_TO_ADDR
// for i in list do
29301: LD_ADDR_VAR 0 7
29305: PUSH
29306: LD_VAR 0 3
29310: PUSH
29311: FOR_IN
29312: IFFALSE 29514
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29314: LD_ADDR_VAR 0 9
29318: PUSH
29319: LD_VAR 0 7
29323: PPUSH
29324: LD_VAR 0 1
29328: PPUSH
29329: LD_VAR 0 2
29333: PPUSH
29334: CALL_OW 297
29338: ST_TO_ADDR
// if not result then
29339: LD_VAR 0 6
29343: NOT
29344: IFFALSE 29370
// result := [ [ i , tmp ] ] else
29346: LD_ADDR_VAR 0 6
29350: PUSH
29351: LD_VAR 0 7
29355: PUSH
29356: LD_VAR 0 9
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: EMPTY
29366: LIST
29367: ST_TO_ADDR
29368: GO 29512
// begin if result [ result ] [ 2 ] < tmp then
29370: LD_VAR 0 6
29374: PUSH
29375: LD_VAR 0 6
29379: ARRAY
29380: PUSH
29381: LD_INT 2
29383: ARRAY
29384: PUSH
29385: LD_VAR 0 9
29389: LESS
29390: IFFALSE 29432
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29392: LD_ADDR_VAR 0 6
29396: PUSH
29397: LD_VAR 0 6
29401: PPUSH
29402: LD_VAR 0 6
29406: PUSH
29407: LD_INT 1
29409: PLUS
29410: PPUSH
29411: LD_VAR 0 7
29415: PUSH
29416: LD_VAR 0 9
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PPUSH
29425: CALL_OW 2
29429: ST_TO_ADDR
29430: GO 29512
// for j = 1 to result do
29432: LD_ADDR_VAR 0 8
29436: PUSH
29437: DOUBLE
29438: LD_INT 1
29440: DEC
29441: ST_TO_ADDR
29442: LD_VAR 0 6
29446: PUSH
29447: FOR_TO
29448: IFFALSE 29510
// begin if tmp < result [ j ] [ 2 ] then
29450: LD_VAR 0 9
29454: PUSH
29455: LD_VAR 0 6
29459: PUSH
29460: LD_VAR 0 8
29464: ARRAY
29465: PUSH
29466: LD_INT 2
29468: ARRAY
29469: LESS
29470: IFFALSE 29508
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29472: LD_ADDR_VAR 0 6
29476: PUSH
29477: LD_VAR 0 6
29481: PPUSH
29482: LD_VAR 0 8
29486: PPUSH
29487: LD_VAR 0 7
29491: PUSH
29492: LD_VAR 0 9
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PPUSH
29501: CALL_OW 2
29505: ST_TO_ADDR
// break ;
29506: GO 29510
// end ; end ;
29508: GO 29447
29510: POP
29511: POP
// end ; end ;
29512: GO 29311
29514: POP
29515: POP
// if result and not asc then
29516: LD_VAR 0 6
29520: PUSH
29521: LD_VAR 0 4
29525: NOT
29526: AND
29527: IFFALSE 29602
// begin tmp := result ;
29529: LD_ADDR_VAR 0 9
29533: PUSH
29534: LD_VAR 0 6
29538: ST_TO_ADDR
// for i = tmp downto 1 do
29539: LD_ADDR_VAR 0 7
29543: PUSH
29544: DOUBLE
29545: LD_VAR 0 9
29549: INC
29550: ST_TO_ADDR
29551: LD_INT 1
29553: PUSH
29554: FOR_DOWNTO
29555: IFFALSE 29600
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29557: LD_ADDR_VAR 0 6
29561: PUSH
29562: LD_VAR 0 6
29566: PPUSH
29567: LD_VAR 0 9
29571: PUSH
29572: LD_VAR 0 7
29576: MINUS
29577: PUSH
29578: LD_INT 1
29580: PLUS
29581: PPUSH
29582: LD_VAR 0 9
29586: PUSH
29587: LD_VAR 0 7
29591: ARRAY
29592: PPUSH
29593: CALL_OW 1
29597: ST_TO_ADDR
29598: GO 29554
29600: POP
29601: POP
// end ; tmp := [ ] ;
29602: LD_ADDR_VAR 0 9
29606: PUSH
29607: EMPTY
29608: ST_TO_ADDR
// if mode then
29609: LD_VAR 0 5
29613: IFFALSE 29682
// begin for i = 1 to result do
29615: LD_ADDR_VAR 0 7
29619: PUSH
29620: DOUBLE
29621: LD_INT 1
29623: DEC
29624: ST_TO_ADDR
29625: LD_VAR 0 6
29629: PUSH
29630: FOR_TO
29631: IFFALSE 29670
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29633: LD_ADDR_VAR 0 9
29637: PUSH
29638: LD_VAR 0 9
29642: PPUSH
29643: LD_VAR 0 7
29647: PPUSH
29648: LD_VAR 0 6
29652: PUSH
29653: LD_VAR 0 7
29657: ARRAY
29658: PUSH
29659: LD_INT 1
29661: ARRAY
29662: PPUSH
29663: CALL_OW 1
29667: ST_TO_ADDR
29668: GO 29630
29670: POP
29671: POP
// result := tmp ;
29672: LD_ADDR_VAR 0 6
29676: PUSH
29677: LD_VAR 0 9
29681: ST_TO_ADDR
// end ; end ;
29682: LD_VAR 0 6
29686: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29687: LD_INT 0
29689: PPUSH
29690: PPUSH
29691: PPUSH
29692: PPUSH
29693: PPUSH
29694: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29695: LD_ADDR_VAR 0 5
29699: PUSH
29700: LD_INT 0
29702: PUSH
29703: LD_INT 0
29705: PUSH
29706: LD_INT 0
29708: PUSH
29709: EMPTY
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: ST_TO_ADDR
// if not x or not y then
29717: LD_VAR 0 2
29721: NOT
29722: PUSH
29723: LD_VAR 0 3
29727: NOT
29728: OR
29729: IFFALSE 29733
// exit ;
29731: GO 31385
// if not range then
29733: LD_VAR 0 4
29737: NOT
29738: IFFALSE 29748
// range := 10 ;
29740: LD_ADDR_VAR 0 4
29744: PUSH
29745: LD_INT 10
29747: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29748: LD_ADDR_VAR 0 8
29752: PUSH
29753: LD_INT 81
29755: PUSH
29756: LD_VAR 0 1
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 92
29767: PUSH
29768: LD_VAR 0 2
29772: PUSH
29773: LD_VAR 0 3
29777: PUSH
29778: LD_VAR 0 4
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: PUSH
29789: LD_INT 3
29791: PUSH
29792: LD_INT 21
29794: PUSH
29795: LD_INT 3
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: LIST
29810: PPUSH
29811: CALL_OW 69
29815: ST_TO_ADDR
// if not tmp then
29816: LD_VAR 0 8
29820: NOT
29821: IFFALSE 29825
// exit ;
29823: GO 31385
// for i in tmp do
29825: LD_ADDR_VAR 0 6
29829: PUSH
29830: LD_VAR 0 8
29834: PUSH
29835: FOR_IN
29836: IFFALSE 31360
// begin points := [ 0 , 0 , 0 ] ;
29838: LD_ADDR_VAR 0 9
29842: PUSH
29843: LD_INT 0
29845: PUSH
29846: LD_INT 0
29848: PUSH
29849: LD_INT 0
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: LIST
29856: ST_TO_ADDR
// bpoints := 1 ;
29857: LD_ADDR_VAR 0 10
29861: PUSH
29862: LD_INT 1
29864: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29865: LD_VAR 0 6
29869: PPUSH
29870: CALL_OW 247
29874: PUSH
29875: LD_INT 1
29877: DOUBLE
29878: EQUAL
29879: IFTRUE 29883
29881: GO 30461
29883: POP
// begin if GetClass ( i ) = 1 then
29884: LD_VAR 0 6
29888: PPUSH
29889: CALL_OW 257
29893: PUSH
29894: LD_INT 1
29896: EQUAL
29897: IFFALSE 29918
// points := [ 10 , 5 , 3 ] ;
29899: LD_ADDR_VAR 0 9
29903: PUSH
29904: LD_INT 10
29906: PUSH
29907: LD_INT 5
29909: PUSH
29910: LD_INT 3
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: LIST
29917: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29918: LD_VAR 0 6
29922: PPUSH
29923: CALL_OW 257
29927: PUSH
29928: LD_INT 2
29930: PUSH
29931: LD_INT 3
29933: PUSH
29934: LD_INT 4
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: LIST
29941: IN
29942: IFFALSE 29963
// points := [ 3 , 2 , 1 ] ;
29944: LD_ADDR_VAR 0 9
29948: PUSH
29949: LD_INT 3
29951: PUSH
29952: LD_INT 2
29954: PUSH
29955: LD_INT 1
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: LIST
29962: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29963: LD_VAR 0 6
29967: PPUSH
29968: CALL_OW 257
29972: PUSH
29973: LD_INT 5
29975: EQUAL
29976: IFFALSE 29997
// points := [ 130 , 5 , 2 ] ;
29978: LD_ADDR_VAR 0 9
29982: PUSH
29983: LD_INT 130
29985: PUSH
29986: LD_INT 5
29988: PUSH
29989: LD_INT 2
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: LIST
29996: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29997: LD_VAR 0 6
30001: PPUSH
30002: CALL_OW 257
30006: PUSH
30007: LD_INT 8
30009: EQUAL
30010: IFFALSE 30031
// points := [ 35 , 35 , 30 ] ;
30012: LD_ADDR_VAR 0 9
30016: PUSH
30017: LD_INT 35
30019: PUSH
30020: LD_INT 35
30022: PUSH
30023: LD_INT 30
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: LIST
30030: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30031: LD_VAR 0 6
30035: PPUSH
30036: CALL_OW 257
30040: PUSH
30041: LD_INT 9
30043: EQUAL
30044: IFFALSE 30065
// points := [ 20 , 55 , 40 ] ;
30046: LD_ADDR_VAR 0 9
30050: PUSH
30051: LD_INT 20
30053: PUSH
30054: LD_INT 55
30056: PUSH
30057: LD_INT 40
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: LIST
30064: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30065: LD_VAR 0 6
30069: PPUSH
30070: CALL_OW 257
30074: PUSH
30075: LD_INT 12
30077: PUSH
30078: LD_INT 16
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: IN
30085: IFFALSE 30106
// points := [ 5 , 3 , 2 ] ;
30087: LD_ADDR_VAR 0 9
30091: PUSH
30092: LD_INT 5
30094: PUSH
30095: LD_INT 3
30097: PUSH
30098: LD_INT 2
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: LIST
30105: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30106: LD_VAR 0 6
30110: PPUSH
30111: CALL_OW 257
30115: PUSH
30116: LD_INT 17
30118: EQUAL
30119: IFFALSE 30140
// points := [ 100 , 50 , 75 ] ;
30121: LD_ADDR_VAR 0 9
30125: PUSH
30126: LD_INT 100
30128: PUSH
30129: LD_INT 50
30131: PUSH
30132: LD_INT 75
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: LIST
30139: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30140: LD_VAR 0 6
30144: PPUSH
30145: CALL_OW 257
30149: PUSH
30150: LD_INT 15
30152: EQUAL
30153: IFFALSE 30174
// points := [ 10 , 5 , 3 ] ;
30155: LD_ADDR_VAR 0 9
30159: PUSH
30160: LD_INT 10
30162: PUSH
30163: LD_INT 5
30165: PUSH
30166: LD_INT 3
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: LIST
30173: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30174: LD_VAR 0 6
30178: PPUSH
30179: CALL_OW 257
30183: PUSH
30184: LD_INT 14
30186: EQUAL
30187: IFFALSE 30208
// points := [ 10 , 0 , 0 ] ;
30189: LD_ADDR_VAR 0 9
30193: PUSH
30194: LD_INT 10
30196: PUSH
30197: LD_INT 0
30199: PUSH
30200: LD_INT 0
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: LIST
30207: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30208: LD_VAR 0 6
30212: PPUSH
30213: CALL_OW 257
30217: PUSH
30218: LD_INT 11
30220: EQUAL
30221: IFFALSE 30242
// points := [ 30 , 10 , 5 ] ;
30223: LD_ADDR_VAR 0 9
30227: PUSH
30228: LD_INT 30
30230: PUSH
30231: LD_INT 10
30233: PUSH
30234: LD_INT 5
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: LIST
30241: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30242: LD_VAR 0 1
30246: PPUSH
30247: LD_INT 5
30249: PPUSH
30250: CALL_OW 321
30254: PUSH
30255: LD_INT 2
30257: EQUAL
30258: IFFALSE 30275
// bpoints := bpoints * 1.8 ;
30260: LD_ADDR_VAR 0 10
30264: PUSH
30265: LD_VAR 0 10
30269: PUSH
30270: LD_REAL  1.80000000000000E+0000
30273: MUL
30274: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30275: LD_VAR 0 6
30279: PPUSH
30280: CALL_OW 257
30284: PUSH
30285: LD_INT 1
30287: PUSH
30288: LD_INT 2
30290: PUSH
30291: LD_INT 3
30293: PUSH
30294: LD_INT 4
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: IN
30303: PUSH
30304: LD_VAR 0 1
30308: PPUSH
30309: LD_INT 51
30311: PPUSH
30312: CALL_OW 321
30316: PUSH
30317: LD_INT 2
30319: EQUAL
30320: AND
30321: IFFALSE 30338
// bpoints := bpoints * 1.2 ;
30323: LD_ADDR_VAR 0 10
30327: PUSH
30328: LD_VAR 0 10
30332: PUSH
30333: LD_REAL  1.20000000000000E+0000
30336: MUL
30337: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30338: LD_VAR 0 6
30342: PPUSH
30343: CALL_OW 257
30347: PUSH
30348: LD_INT 5
30350: PUSH
30351: LD_INT 7
30353: PUSH
30354: LD_INT 9
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: LIST
30361: IN
30362: PUSH
30363: LD_VAR 0 1
30367: PPUSH
30368: LD_INT 52
30370: PPUSH
30371: CALL_OW 321
30375: PUSH
30376: LD_INT 2
30378: EQUAL
30379: AND
30380: IFFALSE 30397
// bpoints := bpoints * 1.5 ;
30382: LD_ADDR_VAR 0 10
30386: PUSH
30387: LD_VAR 0 10
30391: PUSH
30392: LD_REAL  1.50000000000000E+0000
30395: MUL
30396: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30397: LD_VAR 0 1
30401: PPUSH
30402: LD_INT 66
30404: PPUSH
30405: CALL_OW 321
30409: PUSH
30410: LD_INT 2
30412: EQUAL
30413: IFFALSE 30430
// bpoints := bpoints * 1.1 ;
30415: LD_ADDR_VAR 0 10
30419: PUSH
30420: LD_VAR 0 10
30424: PUSH
30425: LD_REAL  1.10000000000000E+0000
30428: MUL
30429: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30430: LD_ADDR_VAR 0 10
30434: PUSH
30435: LD_VAR 0 10
30439: PUSH
30440: LD_VAR 0 6
30444: PPUSH
30445: LD_INT 1
30447: PPUSH
30448: CALL_OW 259
30452: PUSH
30453: LD_REAL  1.15000000000000E+0000
30456: MUL
30457: MUL
30458: ST_TO_ADDR
// end ; unit_vehicle :
30459: GO 31289
30461: LD_INT 2
30463: DOUBLE
30464: EQUAL
30465: IFTRUE 30469
30467: GO 31277
30469: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30470: LD_VAR 0 6
30474: PPUSH
30475: CALL_OW 264
30479: PUSH
30480: LD_INT 2
30482: PUSH
30483: LD_INT 42
30485: PUSH
30486: LD_INT 24
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: LIST
30493: IN
30494: IFFALSE 30515
// points := [ 25 , 5 , 3 ] ;
30496: LD_ADDR_VAR 0 9
30500: PUSH
30501: LD_INT 25
30503: PUSH
30504: LD_INT 5
30506: PUSH
30507: LD_INT 3
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: LIST
30514: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30515: LD_VAR 0 6
30519: PPUSH
30520: CALL_OW 264
30524: PUSH
30525: LD_INT 4
30527: PUSH
30528: LD_INT 43
30530: PUSH
30531: LD_INT 25
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: LIST
30538: IN
30539: IFFALSE 30560
// points := [ 40 , 15 , 5 ] ;
30541: LD_ADDR_VAR 0 9
30545: PUSH
30546: LD_INT 40
30548: PUSH
30549: LD_INT 15
30551: PUSH
30552: LD_INT 5
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: LIST
30559: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30560: LD_VAR 0 6
30564: PPUSH
30565: CALL_OW 264
30569: PUSH
30570: LD_INT 3
30572: PUSH
30573: LD_INT 23
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: IN
30580: IFFALSE 30601
// points := [ 7 , 25 , 8 ] ;
30582: LD_ADDR_VAR 0 9
30586: PUSH
30587: LD_INT 7
30589: PUSH
30590: LD_INT 25
30592: PUSH
30593: LD_INT 8
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: LIST
30600: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30601: LD_VAR 0 6
30605: PPUSH
30606: CALL_OW 264
30610: PUSH
30611: LD_INT 5
30613: PUSH
30614: LD_INT 27
30616: PUSH
30617: LD_INT 44
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: LIST
30624: IN
30625: IFFALSE 30646
// points := [ 14 , 50 , 16 ] ;
30627: LD_ADDR_VAR 0 9
30631: PUSH
30632: LD_INT 14
30634: PUSH
30635: LD_INT 50
30637: PUSH
30638: LD_INT 16
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: LIST
30645: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30646: LD_VAR 0 6
30650: PPUSH
30651: CALL_OW 264
30655: PUSH
30656: LD_INT 6
30658: PUSH
30659: LD_INT 46
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: IN
30666: IFFALSE 30687
// points := [ 32 , 120 , 70 ] ;
30668: LD_ADDR_VAR 0 9
30672: PUSH
30673: LD_INT 32
30675: PUSH
30676: LD_INT 120
30678: PUSH
30679: LD_INT 70
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: LIST
30686: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
30687: LD_VAR 0 6
30691: PPUSH
30692: CALL_OW 264
30696: PUSH
30697: LD_INT 7
30699: PUSH
30700: LD_INT 28
30702: PUSH
30703: LD_INT 45
30705: PUSH
30706: LD_EXP 99
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: IN
30717: IFFALSE 30738
// points := [ 35 , 20 , 45 ] ;
30719: LD_ADDR_VAR 0 9
30723: PUSH
30724: LD_INT 35
30726: PUSH
30727: LD_INT 20
30729: PUSH
30730: LD_INT 45
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: LIST
30737: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30738: LD_VAR 0 6
30742: PPUSH
30743: CALL_OW 264
30747: PUSH
30748: LD_INT 47
30750: PUSH
30751: EMPTY
30752: LIST
30753: IN
30754: IFFALSE 30775
// points := [ 67 , 45 , 75 ] ;
30756: LD_ADDR_VAR 0 9
30760: PUSH
30761: LD_INT 67
30763: PUSH
30764: LD_INT 45
30766: PUSH
30767: LD_INT 75
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: LIST
30774: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30775: LD_VAR 0 6
30779: PPUSH
30780: CALL_OW 264
30784: PUSH
30785: LD_INT 26
30787: PUSH
30788: EMPTY
30789: LIST
30790: IN
30791: IFFALSE 30812
// points := [ 120 , 30 , 80 ] ;
30793: LD_ADDR_VAR 0 9
30797: PUSH
30798: LD_INT 120
30800: PUSH
30801: LD_INT 30
30803: PUSH
30804: LD_INT 80
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: LIST
30811: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30812: LD_VAR 0 6
30816: PPUSH
30817: CALL_OW 264
30821: PUSH
30822: LD_INT 22
30824: PUSH
30825: EMPTY
30826: LIST
30827: IN
30828: IFFALSE 30849
// points := [ 40 , 1 , 1 ] ;
30830: LD_ADDR_VAR 0 9
30834: PUSH
30835: LD_INT 40
30837: PUSH
30838: LD_INT 1
30840: PUSH
30841: LD_INT 1
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: LIST
30848: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30849: LD_VAR 0 6
30853: PPUSH
30854: CALL_OW 264
30858: PUSH
30859: LD_INT 29
30861: PUSH
30862: EMPTY
30863: LIST
30864: IN
30865: IFFALSE 30886
// points := [ 70 , 200 , 400 ] ;
30867: LD_ADDR_VAR 0 9
30871: PUSH
30872: LD_INT 70
30874: PUSH
30875: LD_INT 200
30877: PUSH
30878: LD_INT 400
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: LIST
30885: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30886: LD_VAR 0 6
30890: PPUSH
30891: CALL_OW 264
30895: PUSH
30896: LD_INT 14
30898: PUSH
30899: LD_INT 53
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: IN
30906: IFFALSE 30927
// points := [ 40 , 10 , 20 ] ;
30908: LD_ADDR_VAR 0 9
30912: PUSH
30913: LD_INT 40
30915: PUSH
30916: LD_INT 10
30918: PUSH
30919: LD_INT 20
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: LIST
30926: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30927: LD_VAR 0 6
30931: PPUSH
30932: CALL_OW 264
30936: PUSH
30937: LD_INT 9
30939: PUSH
30940: EMPTY
30941: LIST
30942: IN
30943: IFFALSE 30964
// points := [ 5 , 70 , 20 ] ;
30945: LD_ADDR_VAR 0 9
30949: PUSH
30950: LD_INT 5
30952: PUSH
30953: LD_INT 70
30955: PUSH
30956: LD_INT 20
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: LIST
30963: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30964: LD_VAR 0 6
30968: PPUSH
30969: CALL_OW 264
30973: PUSH
30974: LD_INT 10
30976: PUSH
30977: EMPTY
30978: LIST
30979: IN
30980: IFFALSE 31001
// points := [ 35 , 110 , 70 ] ;
30982: LD_ADDR_VAR 0 9
30986: PUSH
30987: LD_INT 35
30989: PUSH
30990: LD_INT 110
30992: PUSH
30993: LD_INT 70
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: LIST
31000: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31001: LD_VAR 0 6
31005: PPUSH
31006: CALL_OW 265
31010: PUSH
31011: LD_INT 25
31013: EQUAL
31014: IFFALSE 31035
// points := [ 80 , 65 , 100 ] ;
31016: LD_ADDR_VAR 0 9
31020: PUSH
31021: LD_INT 80
31023: PUSH
31024: LD_INT 65
31026: PUSH
31027: LD_INT 100
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: LIST
31034: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31035: LD_VAR 0 6
31039: PPUSH
31040: CALL_OW 263
31044: PUSH
31045: LD_INT 1
31047: EQUAL
31048: IFFALSE 31083
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31050: LD_ADDR_VAR 0 10
31054: PUSH
31055: LD_VAR 0 10
31059: PUSH
31060: LD_VAR 0 6
31064: PPUSH
31065: CALL_OW 311
31069: PPUSH
31070: LD_INT 3
31072: PPUSH
31073: CALL_OW 259
31077: PUSH
31078: LD_INT 4
31080: MUL
31081: MUL
31082: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31083: LD_VAR 0 6
31087: PPUSH
31088: CALL_OW 263
31092: PUSH
31093: LD_INT 2
31095: EQUAL
31096: IFFALSE 31147
// begin j := IsControledBy ( i ) ;
31098: LD_ADDR_VAR 0 7
31102: PUSH
31103: LD_VAR 0 6
31107: PPUSH
31108: CALL_OW 312
31112: ST_TO_ADDR
// if j then
31113: LD_VAR 0 7
31117: IFFALSE 31147
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31119: LD_ADDR_VAR 0 10
31123: PUSH
31124: LD_VAR 0 10
31128: PUSH
31129: LD_VAR 0 7
31133: PPUSH
31134: LD_INT 3
31136: PPUSH
31137: CALL_OW 259
31141: PUSH
31142: LD_INT 3
31144: MUL
31145: MUL
31146: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31147: LD_VAR 0 6
31151: PPUSH
31152: CALL_OW 264
31156: PUSH
31157: LD_INT 5
31159: PUSH
31160: LD_INT 6
31162: PUSH
31163: LD_INT 46
31165: PUSH
31166: LD_INT 44
31168: PUSH
31169: LD_INT 47
31171: PUSH
31172: LD_INT 45
31174: PUSH
31175: LD_INT 28
31177: PUSH
31178: LD_INT 7
31180: PUSH
31181: LD_INT 27
31183: PUSH
31184: LD_INT 29
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: IN
31199: PUSH
31200: LD_VAR 0 1
31204: PPUSH
31205: LD_INT 52
31207: PPUSH
31208: CALL_OW 321
31212: PUSH
31213: LD_INT 2
31215: EQUAL
31216: AND
31217: IFFALSE 31234
// bpoints := bpoints * 1.2 ;
31219: LD_ADDR_VAR 0 10
31223: PUSH
31224: LD_VAR 0 10
31228: PUSH
31229: LD_REAL  1.20000000000000E+0000
31232: MUL
31233: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31234: LD_VAR 0 6
31238: PPUSH
31239: CALL_OW 264
31243: PUSH
31244: LD_INT 6
31246: PUSH
31247: LD_INT 46
31249: PUSH
31250: LD_INT 47
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: LIST
31257: IN
31258: IFFALSE 31275
// bpoints := bpoints * 1.2 ;
31260: LD_ADDR_VAR 0 10
31264: PUSH
31265: LD_VAR 0 10
31269: PUSH
31270: LD_REAL  1.20000000000000E+0000
31273: MUL
31274: ST_TO_ADDR
// end ; unit_building :
31275: GO 31289
31277: LD_INT 3
31279: DOUBLE
31280: EQUAL
31281: IFTRUE 31285
31283: GO 31288
31285: POP
// ; end ;
31286: GO 31289
31288: POP
// for j = 1 to 3 do
31289: LD_ADDR_VAR 0 7
31293: PUSH
31294: DOUBLE
31295: LD_INT 1
31297: DEC
31298: ST_TO_ADDR
31299: LD_INT 3
31301: PUSH
31302: FOR_TO
31303: IFFALSE 31356
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31305: LD_ADDR_VAR 0 5
31309: PUSH
31310: LD_VAR 0 5
31314: PPUSH
31315: LD_VAR 0 7
31319: PPUSH
31320: LD_VAR 0 5
31324: PUSH
31325: LD_VAR 0 7
31329: ARRAY
31330: PUSH
31331: LD_VAR 0 9
31335: PUSH
31336: LD_VAR 0 7
31340: ARRAY
31341: PUSH
31342: LD_VAR 0 10
31346: MUL
31347: PLUS
31348: PPUSH
31349: CALL_OW 1
31353: ST_TO_ADDR
31354: GO 31302
31356: POP
31357: POP
// end ;
31358: GO 29835
31360: POP
31361: POP
// result := Replace ( result , 4 , tmp ) ;
31362: LD_ADDR_VAR 0 5
31366: PUSH
31367: LD_VAR 0 5
31371: PPUSH
31372: LD_INT 4
31374: PPUSH
31375: LD_VAR 0 8
31379: PPUSH
31380: CALL_OW 1
31384: ST_TO_ADDR
// end ;
31385: LD_VAR 0 5
31389: RET
// export function DangerAtRange ( unit , range ) ; begin
31390: LD_INT 0
31392: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31393: LD_ADDR_VAR 0 3
31397: PUSH
31398: LD_VAR 0 1
31402: PPUSH
31403: CALL_OW 255
31407: PPUSH
31408: LD_VAR 0 1
31412: PPUSH
31413: CALL_OW 250
31417: PPUSH
31418: LD_VAR 0 1
31422: PPUSH
31423: CALL_OW 251
31427: PPUSH
31428: LD_VAR 0 2
31432: PPUSH
31433: CALL 29687 0 4
31437: ST_TO_ADDR
// end ;
31438: LD_VAR 0 3
31442: RET
// export function DangerInArea ( side , area ) ; begin
31443: LD_INT 0
31445: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31446: LD_ADDR_VAR 0 3
31450: PUSH
31451: LD_VAR 0 2
31455: PPUSH
31456: LD_INT 81
31458: PUSH
31459: LD_VAR 0 1
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PPUSH
31468: CALL_OW 70
31472: ST_TO_ADDR
// end ;
31473: LD_VAR 0 3
31477: RET
// export function IsExtension ( b ) ; begin
31478: LD_INT 0
31480: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31481: LD_ADDR_VAR 0 2
31485: PUSH
31486: LD_VAR 0 1
31490: PUSH
31491: LD_INT 23
31493: PUSH
31494: LD_INT 20
31496: PUSH
31497: LD_INT 22
31499: PUSH
31500: LD_INT 17
31502: PUSH
31503: LD_INT 24
31505: PUSH
31506: LD_INT 21
31508: PUSH
31509: LD_INT 19
31511: PUSH
31512: LD_INT 16
31514: PUSH
31515: LD_INT 25
31517: PUSH
31518: LD_INT 18
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: IN
31533: ST_TO_ADDR
// end ;
31534: LD_VAR 0 2
31538: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
31539: LD_INT 0
31541: PPUSH
31542: PPUSH
31543: PPUSH
// result := [ ] ;
31544: LD_ADDR_VAR 0 4
31548: PUSH
31549: EMPTY
31550: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31551: LD_ADDR_VAR 0 5
31555: PUSH
31556: LD_VAR 0 2
31560: PPUSH
31561: LD_INT 21
31563: PUSH
31564: LD_INT 3
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PPUSH
31571: CALL_OW 70
31575: ST_TO_ADDR
// if not tmp then
31576: LD_VAR 0 5
31580: NOT
31581: IFFALSE 31585
// exit ;
31583: GO 31649
// if checkLink then
31585: LD_VAR 0 3
31589: IFFALSE 31639
// begin for i in tmp do
31591: LD_ADDR_VAR 0 6
31595: PUSH
31596: LD_VAR 0 5
31600: PUSH
31601: FOR_IN
31602: IFFALSE 31637
// if GetBase ( i ) <> base then
31604: LD_VAR 0 6
31608: PPUSH
31609: CALL_OW 274
31613: PUSH
31614: LD_VAR 0 1
31618: NONEQUAL
31619: IFFALSE 31635
// ComLinkToBase ( base , i ) ;
31621: LD_VAR 0 1
31625: PPUSH
31626: LD_VAR 0 6
31630: PPUSH
31631: CALL_OW 169
31635: GO 31601
31637: POP
31638: POP
// end ; result := tmp ;
31639: LD_ADDR_VAR 0 4
31643: PUSH
31644: LD_VAR 0 5
31648: ST_TO_ADDR
// end ;
31649: LD_VAR 0 4
31653: RET
// export function ComComplete ( units , b ) ; var i ; begin
31654: LD_INT 0
31656: PPUSH
31657: PPUSH
// if not units then
31658: LD_VAR 0 1
31662: NOT
31663: IFFALSE 31667
// exit ;
31665: GO 31757
// for i in units do
31667: LD_ADDR_VAR 0 4
31671: PUSH
31672: LD_VAR 0 1
31676: PUSH
31677: FOR_IN
31678: IFFALSE 31755
// if BuildingStatus ( b ) = bs_build then
31680: LD_VAR 0 2
31684: PPUSH
31685: CALL_OW 461
31689: PUSH
31690: LD_INT 1
31692: EQUAL
31693: IFFALSE 31753
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31695: LD_VAR 0 4
31699: PPUSH
31700: LD_STRING h
31702: PUSH
31703: LD_VAR 0 2
31707: PPUSH
31708: CALL_OW 250
31712: PUSH
31713: LD_VAR 0 2
31717: PPUSH
31718: CALL_OW 251
31722: PUSH
31723: LD_VAR 0 2
31727: PUSH
31728: LD_INT 0
31730: PUSH
31731: LD_INT 0
31733: PUSH
31734: LD_INT 0
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: PUSH
31746: EMPTY
31747: LIST
31748: PPUSH
31749: CALL_OW 446
31753: GO 31677
31755: POP
31756: POP
// end ;
31757: LD_VAR 0 3
31761: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31762: LD_INT 0
31764: PPUSH
31765: PPUSH
31766: PPUSH
31767: PPUSH
31768: PPUSH
31769: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
31770: LD_VAR 0 1
31774: NOT
31775: PUSH
31776: LD_VAR 0 1
31780: PPUSH
31781: CALL_OW 263
31785: PUSH
31786: LD_INT 2
31788: NONEQUAL
31789: OR
31790: IFFALSE 31794
// exit ;
31792: GO 32110
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31794: LD_ADDR_VAR 0 6
31798: PUSH
31799: LD_INT 22
31801: PUSH
31802: LD_VAR 0 1
31806: PPUSH
31807: CALL_OW 255
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 2
31818: PUSH
31819: LD_INT 30
31821: PUSH
31822: LD_INT 36
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 34
31831: PUSH
31832: LD_INT 31
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: LIST
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PPUSH
31848: CALL_OW 69
31852: ST_TO_ADDR
// if not tmp then
31853: LD_VAR 0 6
31857: NOT
31858: IFFALSE 31862
// exit ;
31860: GO 32110
// result := [ ] ;
31862: LD_ADDR_VAR 0 2
31866: PUSH
31867: EMPTY
31868: ST_TO_ADDR
// for i in tmp do
31869: LD_ADDR_VAR 0 3
31873: PUSH
31874: LD_VAR 0 6
31878: PUSH
31879: FOR_IN
31880: IFFALSE 31951
// begin t := UnitsInside ( i ) ;
31882: LD_ADDR_VAR 0 4
31886: PUSH
31887: LD_VAR 0 3
31891: PPUSH
31892: CALL_OW 313
31896: ST_TO_ADDR
// if t then
31897: LD_VAR 0 4
31901: IFFALSE 31949
// for j in t do
31903: LD_ADDR_VAR 0 7
31907: PUSH
31908: LD_VAR 0 4
31912: PUSH
31913: FOR_IN
31914: IFFALSE 31947
// result := Replace ( result , result + 1 , j ) ;
31916: LD_ADDR_VAR 0 2
31920: PUSH
31921: LD_VAR 0 2
31925: PPUSH
31926: LD_VAR 0 2
31930: PUSH
31931: LD_INT 1
31933: PLUS
31934: PPUSH
31935: LD_VAR 0 7
31939: PPUSH
31940: CALL_OW 1
31944: ST_TO_ADDR
31945: GO 31913
31947: POP
31948: POP
// end ;
31949: GO 31879
31951: POP
31952: POP
// if not result then
31953: LD_VAR 0 2
31957: NOT
31958: IFFALSE 31962
// exit ;
31960: GO 32110
// mech := result [ 1 ] ;
31962: LD_ADDR_VAR 0 5
31966: PUSH
31967: LD_VAR 0 2
31971: PUSH
31972: LD_INT 1
31974: ARRAY
31975: ST_TO_ADDR
// if result > 1 then
31976: LD_VAR 0 2
31980: PUSH
31981: LD_INT 1
31983: GREATER
31984: IFFALSE 32096
// begin for i = 2 to result do
31986: LD_ADDR_VAR 0 3
31990: PUSH
31991: DOUBLE
31992: LD_INT 2
31994: DEC
31995: ST_TO_ADDR
31996: LD_VAR 0 2
32000: PUSH
32001: FOR_TO
32002: IFFALSE 32094
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32004: LD_ADDR_VAR 0 4
32008: PUSH
32009: LD_VAR 0 2
32013: PUSH
32014: LD_VAR 0 3
32018: ARRAY
32019: PPUSH
32020: LD_INT 3
32022: PPUSH
32023: CALL_OW 259
32027: PUSH
32028: LD_VAR 0 2
32032: PUSH
32033: LD_VAR 0 3
32037: ARRAY
32038: PPUSH
32039: CALL_OW 432
32043: MINUS
32044: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32045: LD_VAR 0 4
32049: PUSH
32050: LD_VAR 0 5
32054: PPUSH
32055: LD_INT 3
32057: PPUSH
32058: CALL_OW 259
32062: PUSH
32063: LD_VAR 0 5
32067: PPUSH
32068: CALL_OW 432
32072: MINUS
32073: GREATEREQUAL
32074: IFFALSE 32092
// mech := result [ i ] ;
32076: LD_ADDR_VAR 0 5
32080: PUSH
32081: LD_VAR 0 2
32085: PUSH
32086: LD_VAR 0 3
32090: ARRAY
32091: ST_TO_ADDR
// end ;
32092: GO 32001
32094: POP
32095: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32096: LD_VAR 0 1
32100: PPUSH
32101: LD_VAR 0 5
32105: PPUSH
32106: CALL_OW 135
// end ;
32110: LD_VAR 0 2
32114: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32115: LD_INT 0
32117: PPUSH
32118: PPUSH
32119: PPUSH
32120: PPUSH
32121: PPUSH
32122: PPUSH
32123: PPUSH
32124: PPUSH
32125: PPUSH
32126: PPUSH
32127: PPUSH
32128: PPUSH
32129: PPUSH
// result := [ ] ;
32130: LD_ADDR_VAR 0 7
32134: PUSH
32135: EMPTY
32136: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32137: LD_VAR 0 1
32141: PPUSH
32142: CALL_OW 266
32146: PUSH
32147: LD_INT 0
32149: PUSH
32150: LD_INT 1
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: IN
32157: NOT
32158: IFFALSE 32162
// exit ;
32160: GO 33796
// if name then
32162: LD_VAR 0 3
32166: IFFALSE 32182
// SetBName ( base_dep , name ) ;
32168: LD_VAR 0 1
32172: PPUSH
32173: LD_VAR 0 3
32177: PPUSH
32178: CALL_OW 500
// base := GetBase ( base_dep ) ;
32182: LD_ADDR_VAR 0 15
32186: PUSH
32187: LD_VAR 0 1
32191: PPUSH
32192: CALL_OW 274
32196: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32197: LD_ADDR_VAR 0 16
32201: PUSH
32202: LD_VAR 0 1
32206: PPUSH
32207: CALL_OW 255
32211: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32212: LD_ADDR_VAR 0 17
32216: PUSH
32217: LD_VAR 0 1
32221: PPUSH
32222: CALL_OW 248
32226: ST_TO_ADDR
// if sources then
32227: LD_VAR 0 5
32231: IFFALSE 32278
// for i = 1 to 3 do
32233: LD_ADDR_VAR 0 8
32237: PUSH
32238: DOUBLE
32239: LD_INT 1
32241: DEC
32242: ST_TO_ADDR
32243: LD_INT 3
32245: PUSH
32246: FOR_TO
32247: IFFALSE 32276
// AddResourceType ( base , i , sources [ i ] ) ;
32249: LD_VAR 0 15
32253: PPUSH
32254: LD_VAR 0 8
32258: PPUSH
32259: LD_VAR 0 5
32263: PUSH
32264: LD_VAR 0 8
32268: ARRAY
32269: PPUSH
32270: CALL_OW 276
32274: GO 32246
32276: POP
32277: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32278: LD_ADDR_VAR 0 18
32282: PUSH
32283: LD_VAR 0 15
32287: PPUSH
32288: LD_VAR 0 2
32292: PPUSH
32293: LD_INT 1
32295: PPUSH
32296: CALL 31539 0 3
32300: ST_TO_ADDR
// InitHc ;
32301: CALL_OW 19
// InitUc ;
32305: CALL_OW 18
// uc_side := side ;
32309: LD_ADDR_OWVAR 20
32313: PUSH
32314: LD_VAR 0 16
32318: ST_TO_ADDR
// uc_nation := nation ;
32319: LD_ADDR_OWVAR 21
32323: PUSH
32324: LD_VAR 0 17
32328: ST_TO_ADDR
// if buildings then
32329: LD_VAR 0 18
32333: IFFALSE 33655
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32335: LD_ADDR_VAR 0 19
32339: PUSH
32340: LD_VAR 0 18
32344: PPUSH
32345: LD_INT 2
32347: PUSH
32348: LD_INT 30
32350: PUSH
32351: LD_INT 29
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 30
32360: PUSH
32361: LD_INT 30
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: LIST
32372: PPUSH
32373: CALL_OW 72
32377: ST_TO_ADDR
// if tmp then
32378: LD_VAR 0 19
32382: IFFALSE 32430
// for i in tmp do
32384: LD_ADDR_VAR 0 8
32388: PUSH
32389: LD_VAR 0 19
32393: PUSH
32394: FOR_IN
32395: IFFALSE 32428
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32397: LD_VAR 0 8
32401: PPUSH
32402: CALL_OW 250
32406: PPUSH
32407: LD_VAR 0 8
32411: PPUSH
32412: CALL_OW 251
32416: PPUSH
32417: LD_VAR 0 16
32421: PPUSH
32422: CALL_OW 441
32426: GO 32394
32428: POP
32429: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32430: LD_VAR 0 18
32434: PPUSH
32435: LD_INT 2
32437: PUSH
32438: LD_INT 30
32440: PUSH
32441: LD_INT 32
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 30
32450: PUSH
32451: LD_INT 33
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: LIST
32462: PPUSH
32463: CALL_OW 72
32467: IFFALSE 32555
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32469: LD_ADDR_VAR 0 8
32473: PUSH
32474: LD_VAR 0 18
32478: PPUSH
32479: LD_INT 2
32481: PUSH
32482: LD_INT 30
32484: PUSH
32485: LD_INT 32
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 30
32494: PUSH
32495: LD_INT 33
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: LIST
32506: PPUSH
32507: CALL_OW 72
32511: PUSH
32512: FOR_IN
32513: IFFALSE 32553
// begin if not GetBWeapon ( i ) then
32515: LD_VAR 0 8
32519: PPUSH
32520: CALL_OW 269
32524: NOT
32525: IFFALSE 32551
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32527: LD_VAR 0 8
32531: PPUSH
32532: LD_VAR 0 8
32536: PPUSH
32537: LD_VAR 0 2
32541: PPUSH
32542: CALL 33801 0 2
32546: PPUSH
32547: CALL_OW 431
// end ;
32551: GO 32512
32553: POP
32554: POP
// end ; for i = 1 to personel do
32555: LD_ADDR_VAR 0 8
32559: PUSH
32560: DOUBLE
32561: LD_INT 1
32563: DEC
32564: ST_TO_ADDR
32565: LD_VAR 0 6
32569: PUSH
32570: FOR_TO
32571: IFFALSE 33635
// begin if i > 4 then
32573: LD_VAR 0 8
32577: PUSH
32578: LD_INT 4
32580: GREATER
32581: IFFALSE 32585
// break ;
32583: GO 33635
// case i of 1 :
32585: LD_VAR 0 8
32589: PUSH
32590: LD_INT 1
32592: DOUBLE
32593: EQUAL
32594: IFTRUE 32598
32596: GO 32678
32598: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32599: LD_ADDR_VAR 0 12
32603: PUSH
32604: LD_VAR 0 18
32608: PPUSH
32609: LD_INT 22
32611: PUSH
32612: LD_VAR 0 16
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 58
32623: PUSH
32624: EMPTY
32625: LIST
32626: PUSH
32627: LD_INT 2
32629: PUSH
32630: LD_INT 30
32632: PUSH
32633: LD_INT 32
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: LD_INT 30
32642: PUSH
32643: LD_INT 4
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: LD_INT 30
32652: PUSH
32653: LD_INT 5
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: LIST
32670: PPUSH
32671: CALL_OW 72
32675: ST_TO_ADDR
32676: GO 32900
32678: LD_INT 2
32680: DOUBLE
32681: EQUAL
32682: IFTRUE 32686
32684: GO 32748
32686: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32687: LD_ADDR_VAR 0 12
32691: PUSH
32692: LD_VAR 0 18
32696: PPUSH
32697: LD_INT 22
32699: PUSH
32700: LD_VAR 0 16
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: LD_INT 2
32711: PUSH
32712: LD_INT 30
32714: PUSH
32715: LD_INT 0
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 30
32724: PUSH
32725: LD_INT 1
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: LIST
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PPUSH
32741: CALL_OW 72
32745: ST_TO_ADDR
32746: GO 32900
32748: LD_INT 3
32750: DOUBLE
32751: EQUAL
32752: IFTRUE 32756
32754: GO 32818
32756: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32757: LD_ADDR_VAR 0 12
32761: PUSH
32762: LD_VAR 0 18
32766: PPUSH
32767: LD_INT 22
32769: PUSH
32770: LD_VAR 0 16
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 2
32781: PUSH
32782: LD_INT 30
32784: PUSH
32785: LD_INT 2
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 30
32794: PUSH
32795: LD_INT 3
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: LIST
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PPUSH
32811: CALL_OW 72
32815: ST_TO_ADDR
32816: GO 32900
32818: LD_INT 4
32820: DOUBLE
32821: EQUAL
32822: IFTRUE 32826
32824: GO 32899
32826: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32827: LD_ADDR_VAR 0 12
32831: PUSH
32832: LD_VAR 0 18
32836: PPUSH
32837: LD_INT 22
32839: PUSH
32840: LD_VAR 0 16
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 2
32851: PUSH
32852: LD_INT 30
32854: PUSH
32855: LD_INT 6
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 30
32864: PUSH
32865: LD_INT 7
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 30
32874: PUSH
32875: LD_INT 8
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PPUSH
32892: CALL_OW 72
32896: ST_TO_ADDR
32897: GO 32900
32899: POP
// if i = 1 then
32900: LD_VAR 0 8
32904: PUSH
32905: LD_INT 1
32907: EQUAL
32908: IFFALSE 33019
// begin tmp := [ ] ;
32910: LD_ADDR_VAR 0 19
32914: PUSH
32915: EMPTY
32916: ST_TO_ADDR
// for j in f do
32917: LD_ADDR_VAR 0 9
32921: PUSH
32922: LD_VAR 0 12
32926: PUSH
32927: FOR_IN
32928: IFFALSE 33001
// if GetBType ( j ) = b_bunker then
32930: LD_VAR 0 9
32934: PPUSH
32935: CALL_OW 266
32939: PUSH
32940: LD_INT 32
32942: EQUAL
32943: IFFALSE 32970
// tmp := Insert ( tmp , 1 , j ) else
32945: LD_ADDR_VAR 0 19
32949: PUSH
32950: LD_VAR 0 19
32954: PPUSH
32955: LD_INT 1
32957: PPUSH
32958: LD_VAR 0 9
32962: PPUSH
32963: CALL_OW 2
32967: ST_TO_ADDR
32968: GO 32999
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32970: LD_ADDR_VAR 0 19
32974: PUSH
32975: LD_VAR 0 19
32979: PPUSH
32980: LD_VAR 0 19
32984: PUSH
32985: LD_INT 1
32987: PLUS
32988: PPUSH
32989: LD_VAR 0 9
32993: PPUSH
32994: CALL_OW 2
32998: ST_TO_ADDR
32999: GO 32927
33001: POP
33002: POP
// if tmp then
33003: LD_VAR 0 19
33007: IFFALSE 33019
// f := tmp ;
33009: LD_ADDR_VAR 0 12
33013: PUSH
33014: LD_VAR 0 19
33018: ST_TO_ADDR
// end ; x := personel [ i ] ;
33019: LD_ADDR_VAR 0 13
33023: PUSH
33024: LD_VAR 0 6
33028: PUSH
33029: LD_VAR 0 8
33033: ARRAY
33034: ST_TO_ADDR
// if x = - 1 then
33035: LD_VAR 0 13
33039: PUSH
33040: LD_INT 1
33042: NEG
33043: EQUAL
33044: IFFALSE 33253
// begin for j in f do
33046: LD_ADDR_VAR 0 9
33050: PUSH
33051: LD_VAR 0 12
33055: PUSH
33056: FOR_IN
33057: IFFALSE 33249
// repeat InitHc ;
33059: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33063: LD_VAR 0 9
33067: PPUSH
33068: CALL_OW 266
33072: PUSH
33073: LD_INT 5
33075: EQUAL
33076: IFFALSE 33146
// begin if UnitsInside ( j ) < 3 then
33078: LD_VAR 0 9
33082: PPUSH
33083: CALL_OW 313
33087: PUSH
33088: LD_INT 3
33090: LESS
33091: IFFALSE 33127
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33093: LD_INT 0
33095: PPUSH
33096: LD_INT 5
33098: PUSH
33099: LD_INT 8
33101: PUSH
33102: LD_INT 9
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: LIST
33109: PUSH
33110: LD_VAR 0 17
33114: ARRAY
33115: PPUSH
33116: LD_VAR 0 4
33120: PPUSH
33121: CALL_OW 380
33125: GO 33144
// PrepareHuman ( false , i , skill ) ;
33127: LD_INT 0
33129: PPUSH
33130: LD_VAR 0 8
33134: PPUSH
33135: LD_VAR 0 4
33139: PPUSH
33140: CALL_OW 380
// end else
33144: GO 33163
// PrepareHuman ( false , i , skill ) ;
33146: LD_INT 0
33148: PPUSH
33149: LD_VAR 0 8
33153: PPUSH
33154: LD_VAR 0 4
33158: PPUSH
33159: CALL_OW 380
// un := CreateHuman ;
33163: LD_ADDR_VAR 0 14
33167: PUSH
33168: CALL_OW 44
33172: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33173: LD_ADDR_VAR 0 7
33177: PUSH
33178: LD_VAR 0 7
33182: PPUSH
33183: LD_INT 1
33185: PPUSH
33186: LD_VAR 0 14
33190: PPUSH
33191: CALL_OW 2
33195: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33196: LD_VAR 0 14
33200: PPUSH
33201: LD_VAR 0 9
33205: PPUSH
33206: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33210: LD_VAR 0 9
33214: PPUSH
33215: CALL_OW 313
33219: PUSH
33220: LD_INT 6
33222: EQUAL
33223: PUSH
33224: LD_VAR 0 9
33228: PPUSH
33229: CALL_OW 266
33233: PUSH
33234: LD_INT 32
33236: PUSH
33237: LD_INT 31
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: IN
33244: OR
33245: IFFALSE 33059
33247: GO 33056
33249: POP
33250: POP
// end else
33251: GO 33633
// for j = 1 to x do
33253: LD_ADDR_VAR 0 9
33257: PUSH
33258: DOUBLE
33259: LD_INT 1
33261: DEC
33262: ST_TO_ADDR
33263: LD_VAR 0 13
33267: PUSH
33268: FOR_TO
33269: IFFALSE 33631
// begin InitHc ;
33271: CALL_OW 19
// if not f then
33275: LD_VAR 0 12
33279: NOT
33280: IFFALSE 33369
// begin PrepareHuman ( false , i , skill ) ;
33282: LD_INT 0
33284: PPUSH
33285: LD_VAR 0 8
33289: PPUSH
33290: LD_VAR 0 4
33294: PPUSH
33295: CALL_OW 380
// un := CreateHuman ;
33299: LD_ADDR_VAR 0 14
33303: PUSH
33304: CALL_OW 44
33308: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33309: LD_ADDR_VAR 0 7
33313: PUSH
33314: LD_VAR 0 7
33318: PPUSH
33319: LD_INT 1
33321: PPUSH
33322: LD_VAR 0 14
33326: PPUSH
33327: CALL_OW 2
33331: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33332: LD_VAR 0 14
33336: PPUSH
33337: LD_VAR 0 1
33341: PPUSH
33342: CALL_OW 250
33346: PPUSH
33347: LD_VAR 0 1
33351: PPUSH
33352: CALL_OW 251
33356: PPUSH
33357: LD_INT 10
33359: PPUSH
33360: LD_INT 0
33362: PPUSH
33363: CALL_OW 50
// continue ;
33367: GO 33268
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33369: LD_VAR 0 12
33373: PUSH
33374: LD_INT 1
33376: ARRAY
33377: PPUSH
33378: CALL_OW 313
33382: PUSH
33383: LD_VAR 0 12
33387: PUSH
33388: LD_INT 1
33390: ARRAY
33391: PPUSH
33392: CALL_OW 266
33396: PUSH
33397: LD_INT 32
33399: PUSH
33400: LD_INT 31
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: IN
33407: AND
33408: PUSH
33409: LD_VAR 0 12
33413: PUSH
33414: LD_INT 1
33416: ARRAY
33417: PPUSH
33418: CALL_OW 313
33422: PUSH
33423: LD_INT 6
33425: EQUAL
33426: OR
33427: IFFALSE 33447
// f := Delete ( f , 1 ) ;
33429: LD_ADDR_VAR 0 12
33433: PUSH
33434: LD_VAR 0 12
33438: PPUSH
33439: LD_INT 1
33441: PPUSH
33442: CALL_OW 3
33446: ST_TO_ADDR
// if not f then
33447: LD_VAR 0 12
33451: NOT
33452: IFFALSE 33470
// begin x := x + 2 ;
33454: LD_ADDR_VAR 0 13
33458: PUSH
33459: LD_VAR 0 13
33463: PUSH
33464: LD_INT 2
33466: PLUS
33467: ST_TO_ADDR
// continue ;
33468: GO 33268
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33470: LD_VAR 0 12
33474: PUSH
33475: LD_INT 1
33477: ARRAY
33478: PPUSH
33479: CALL_OW 266
33483: PUSH
33484: LD_INT 5
33486: EQUAL
33487: IFFALSE 33561
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33489: LD_VAR 0 12
33493: PUSH
33494: LD_INT 1
33496: ARRAY
33497: PPUSH
33498: CALL_OW 313
33502: PUSH
33503: LD_INT 3
33505: LESS
33506: IFFALSE 33542
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33508: LD_INT 0
33510: PPUSH
33511: LD_INT 5
33513: PUSH
33514: LD_INT 8
33516: PUSH
33517: LD_INT 9
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: LIST
33524: PUSH
33525: LD_VAR 0 17
33529: ARRAY
33530: PPUSH
33531: LD_VAR 0 4
33535: PPUSH
33536: CALL_OW 380
33540: GO 33559
// PrepareHuman ( false , i , skill ) ;
33542: LD_INT 0
33544: PPUSH
33545: LD_VAR 0 8
33549: PPUSH
33550: LD_VAR 0 4
33554: PPUSH
33555: CALL_OW 380
// end else
33559: GO 33578
// PrepareHuman ( false , i , skill ) ;
33561: LD_INT 0
33563: PPUSH
33564: LD_VAR 0 8
33568: PPUSH
33569: LD_VAR 0 4
33573: PPUSH
33574: CALL_OW 380
// un := CreateHuman ;
33578: LD_ADDR_VAR 0 14
33582: PUSH
33583: CALL_OW 44
33587: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33588: LD_ADDR_VAR 0 7
33592: PUSH
33593: LD_VAR 0 7
33597: PPUSH
33598: LD_INT 1
33600: PPUSH
33601: LD_VAR 0 14
33605: PPUSH
33606: CALL_OW 2
33610: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33611: LD_VAR 0 14
33615: PPUSH
33616: LD_VAR 0 12
33620: PUSH
33621: LD_INT 1
33623: ARRAY
33624: PPUSH
33625: CALL_OW 52
// end ;
33629: GO 33268
33631: POP
33632: POP
// end ;
33633: GO 32570
33635: POP
33636: POP
// result := result ^ buildings ;
33637: LD_ADDR_VAR 0 7
33641: PUSH
33642: LD_VAR 0 7
33646: PUSH
33647: LD_VAR 0 18
33651: ADD
33652: ST_TO_ADDR
// end else
33653: GO 33796
// begin for i = 1 to personel do
33655: LD_ADDR_VAR 0 8
33659: PUSH
33660: DOUBLE
33661: LD_INT 1
33663: DEC
33664: ST_TO_ADDR
33665: LD_VAR 0 6
33669: PUSH
33670: FOR_TO
33671: IFFALSE 33794
// begin if i > 4 then
33673: LD_VAR 0 8
33677: PUSH
33678: LD_INT 4
33680: GREATER
33681: IFFALSE 33685
// break ;
33683: GO 33794
// x := personel [ i ] ;
33685: LD_ADDR_VAR 0 13
33689: PUSH
33690: LD_VAR 0 6
33694: PUSH
33695: LD_VAR 0 8
33699: ARRAY
33700: ST_TO_ADDR
// if x = - 1 then
33701: LD_VAR 0 13
33705: PUSH
33706: LD_INT 1
33708: NEG
33709: EQUAL
33710: IFFALSE 33714
// continue ;
33712: GO 33670
// PrepareHuman ( false , i , skill ) ;
33714: LD_INT 0
33716: PPUSH
33717: LD_VAR 0 8
33721: PPUSH
33722: LD_VAR 0 4
33726: PPUSH
33727: CALL_OW 380
// un := CreateHuman ;
33731: LD_ADDR_VAR 0 14
33735: PUSH
33736: CALL_OW 44
33740: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33741: LD_VAR 0 14
33745: PPUSH
33746: LD_VAR 0 1
33750: PPUSH
33751: CALL_OW 250
33755: PPUSH
33756: LD_VAR 0 1
33760: PPUSH
33761: CALL_OW 251
33765: PPUSH
33766: LD_INT 10
33768: PPUSH
33769: LD_INT 0
33771: PPUSH
33772: CALL_OW 50
// result := result ^ un ;
33776: LD_ADDR_VAR 0 7
33780: PUSH
33781: LD_VAR 0 7
33785: PUSH
33786: LD_VAR 0 14
33790: ADD
33791: ST_TO_ADDR
// end ;
33792: GO 33670
33794: POP
33795: POP
// end ; end ;
33796: LD_VAR 0 7
33800: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33801: LD_INT 0
33803: PPUSH
33804: PPUSH
33805: PPUSH
33806: PPUSH
33807: PPUSH
33808: PPUSH
33809: PPUSH
33810: PPUSH
33811: PPUSH
33812: PPUSH
33813: PPUSH
33814: PPUSH
33815: PPUSH
33816: PPUSH
33817: PPUSH
33818: PPUSH
// result := false ;
33819: LD_ADDR_VAR 0 3
33823: PUSH
33824: LD_INT 0
33826: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33827: LD_VAR 0 1
33831: NOT
33832: PUSH
33833: LD_VAR 0 1
33837: PPUSH
33838: CALL_OW 266
33842: PUSH
33843: LD_INT 32
33845: PUSH
33846: LD_INT 33
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: IN
33853: NOT
33854: OR
33855: IFFALSE 33859
// exit ;
33857: GO 34968
// nat := GetNation ( tower ) ;
33859: LD_ADDR_VAR 0 12
33863: PUSH
33864: LD_VAR 0 1
33868: PPUSH
33869: CALL_OW 248
33873: ST_TO_ADDR
// side := GetSide ( tower ) ;
33874: LD_ADDR_VAR 0 16
33878: PUSH
33879: LD_VAR 0 1
33883: PPUSH
33884: CALL_OW 255
33888: ST_TO_ADDR
// x := GetX ( tower ) ;
33889: LD_ADDR_VAR 0 10
33893: PUSH
33894: LD_VAR 0 1
33898: PPUSH
33899: CALL_OW 250
33903: ST_TO_ADDR
// y := GetY ( tower ) ;
33904: LD_ADDR_VAR 0 11
33908: PUSH
33909: LD_VAR 0 1
33913: PPUSH
33914: CALL_OW 251
33918: ST_TO_ADDR
// if not x or not y then
33919: LD_VAR 0 10
33923: NOT
33924: PUSH
33925: LD_VAR 0 11
33929: NOT
33930: OR
33931: IFFALSE 33935
// exit ;
33933: GO 34968
// weapon := 0 ;
33935: LD_ADDR_VAR 0 18
33939: PUSH
33940: LD_INT 0
33942: ST_TO_ADDR
// fac_list := [ ] ;
33943: LD_ADDR_VAR 0 17
33947: PUSH
33948: EMPTY
33949: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
33950: LD_ADDR_VAR 0 6
33954: PUSH
33955: LD_VAR 0 1
33959: PPUSH
33960: CALL_OW 274
33964: PPUSH
33965: LD_VAR 0 2
33969: PPUSH
33970: LD_INT 0
33972: PPUSH
33973: CALL 31539 0 3
33977: PPUSH
33978: LD_INT 30
33980: PUSH
33981: LD_INT 3
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PPUSH
33988: CALL_OW 72
33992: ST_TO_ADDR
// if not factories then
33993: LD_VAR 0 6
33997: NOT
33998: IFFALSE 34002
// exit ;
34000: GO 34968
// for i in factories do
34002: LD_ADDR_VAR 0 8
34006: PUSH
34007: LD_VAR 0 6
34011: PUSH
34012: FOR_IN
34013: IFFALSE 34038
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34015: LD_ADDR_VAR 0 17
34019: PUSH
34020: LD_VAR 0 17
34024: PUSH
34025: LD_VAR 0 8
34029: PPUSH
34030: CALL_OW 478
34034: UNION
34035: ST_TO_ADDR
34036: GO 34012
34038: POP
34039: POP
// if not fac_list then
34040: LD_VAR 0 17
34044: NOT
34045: IFFALSE 34049
// exit ;
34047: GO 34968
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34049: LD_ADDR_VAR 0 5
34053: PUSH
34054: LD_INT 4
34056: PUSH
34057: LD_INT 5
34059: PUSH
34060: LD_INT 9
34062: PUSH
34063: LD_INT 10
34065: PUSH
34066: LD_INT 6
34068: PUSH
34069: LD_INT 7
34071: PUSH
34072: LD_INT 11
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 27
34086: PUSH
34087: LD_INT 28
34089: PUSH
34090: LD_INT 26
34092: PUSH
34093: LD_INT 30
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 43
34104: PUSH
34105: LD_INT 44
34107: PUSH
34108: LD_INT 46
34110: PUSH
34111: LD_INT 45
34113: PUSH
34114: LD_INT 47
34116: PUSH
34117: LD_INT 49
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: LIST
34132: PUSH
34133: LD_VAR 0 12
34137: ARRAY
34138: ST_TO_ADDR
// list := list isect fac_list ;
34139: LD_ADDR_VAR 0 5
34143: PUSH
34144: LD_VAR 0 5
34148: PUSH
34149: LD_VAR 0 17
34153: ISECT
34154: ST_TO_ADDR
// if not list then
34155: LD_VAR 0 5
34159: NOT
34160: IFFALSE 34164
// exit ;
34162: GO 34968
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34164: LD_VAR 0 12
34168: PUSH
34169: LD_INT 3
34171: EQUAL
34172: PUSH
34173: LD_INT 49
34175: PUSH
34176: LD_VAR 0 5
34180: IN
34181: AND
34182: PUSH
34183: LD_INT 31
34185: PPUSH
34186: LD_VAR 0 16
34190: PPUSH
34191: CALL_OW 321
34195: PUSH
34196: LD_INT 2
34198: EQUAL
34199: AND
34200: IFFALSE 34260
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34202: LD_INT 22
34204: PUSH
34205: LD_VAR 0 16
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 35
34216: PUSH
34217: LD_INT 49
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: LD_INT 91
34226: PUSH
34227: LD_VAR 0 1
34231: PUSH
34232: LD_INT 10
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: LIST
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: LIST
34244: PPUSH
34245: CALL_OW 69
34249: NOT
34250: IFFALSE 34260
// weapon := ru_time_lapser ;
34252: LD_ADDR_VAR 0 18
34256: PUSH
34257: LD_INT 49
34259: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34260: LD_VAR 0 12
34264: PUSH
34265: LD_INT 1
34267: PUSH
34268: LD_INT 2
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: IN
34275: PUSH
34276: LD_INT 11
34278: PUSH
34279: LD_VAR 0 5
34283: IN
34284: PUSH
34285: LD_INT 30
34287: PUSH
34288: LD_VAR 0 5
34292: IN
34293: OR
34294: AND
34295: PUSH
34296: LD_INT 6
34298: PPUSH
34299: LD_VAR 0 16
34303: PPUSH
34304: CALL_OW 321
34308: PUSH
34309: LD_INT 2
34311: EQUAL
34312: AND
34313: IFFALSE 34478
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34315: LD_INT 22
34317: PUSH
34318: LD_VAR 0 16
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: LD_INT 2
34329: PUSH
34330: LD_INT 35
34332: PUSH
34333: LD_INT 11
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 35
34342: PUSH
34343: LD_INT 30
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 91
34357: PUSH
34358: LD_VAR 0 1
34362: PUSH
34363: LD_INT 18
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: LIST
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: LIST
34375: PPUSH
34376: CALL_OW 69
34380: NOT
34381: PUSH
34382: LD_INT 22
34384: PUSH
34385: LD_VAR 0 16
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 2
34396: PUSH
34397: LD_INT 30
34399: PUSH
34400: LD_INT 32
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 30
34409: PUSH
34410: LD_INT 33
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 91
34424: PUSH
34425: LD_VAR 0 1
34429: PUSH
34430: LD_INT 12
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: LIST
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: LIST
34442: PUSH
34443: EMPTY
34444: LIST
34445: PPUSH
34446: CALL_OW 69
34450: PUSH
34451: LD_INT 2
34453: GREATER
34454: AND
34455: IFFALSE 34478
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34457: LD_ADDR_VAR 0 18
34461: PUSH
34462: LD_INT 11
34464: PUSH
34465: LD_INT 30
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: LD_VAR 0 12
34476: ARRAY
34477: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34478: LD_VAR 0 18
34482: NOT
34483: PUSH
34484: LD_INT 40
34486: PPUSH
34487: LD_VAR 0 16
34491: PPUSH
34492: CALL_OW 321
34496: PUSH
34497: LD_INT 2
34499: EQUAL
34500: AND
34501: PUSH
34502: LD_INT 7
34504: PUSH
34505: LD_VAR 0 5
34509: IN
34510: PUSH
34511: LD_INT 28
34513: PUSH
34514: LD_VAR 0 5
34518: IN
34519: OR
34520: PUSH
34521: LD_INT 45
34523: PUSH
34524: LD_VAR 0 5
34528: IN
34529: OR
34530: AND
34531: IFFALSE 34785
// begin hex := GetHexInfo ( x , y ) ;
34533: LD_ADDR_VAR 0 4
34537: PUSH
34538: LD_VAR 0 10
34542: PPUSH
34543: LD_VAR 0 11
34547: PPUSH
34548: CALL_OW 546
34552: ST_TO_ADDR
// if hex [ 1 ] then
34553: LD_VAR 0 4
34557: PUSH
34558: LD_INT 1
34560: ARRAY
34561: IFFALSE 34565
// exit ;
34563: GO 34968
// height := hex [ 2 ] ;
34565: LD_ADDR_VAR 0 15
34569: PUSH
34570: LD_VAR 0 4
34574: PUSH
34575: LD_INT 2
34577: ARRAY
34578: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34579: LD_ADDR_VAR 0 14
34583: PUSH
34584: LD_INT 0
34586: PUSH
34587: LD_INT 2
34589: PUSH
34590: LD_INT 3
34592: PUSH
34593: LD_INT 5
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: ST_TO_ADDR
// for i in tmp do
34602: LD_ADDR_VAR 0 8
34606: PUSH
34607: LD_VAR 0 14
34611: PUSH
34612: FOR_IN
34613: IFFALSE 34783
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34615: LD_ADDR_VAR 0 9
34619: PUSH
34620: LD_VAR 0 10
34624: PPUSH
34625: LD_VAR 0 8
34629: PPUSH
34630: LD_INT 5
34632: PPUSH
34633: CALL_OW 272
34637: PUSH
34638: LD_VAR 0 11
34642: PPUSH
34643: LD_VAR 0 8
34647: PPUSH
34648: LD_INT 5
34650: PPUSH
34651: CALL_OW 273
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34660: LD_VAR 0 9
34664: PUSH
34665: LD_INT 1
34667: ARRAY
34668: PPUSH
34669: LD_VAR 0 9
34673: PUSH
34674: LD_INT 2
34676: ARRAY
34677: PPUSH
34678: CALL_OW 488
34682: IFFALSE 34781
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34684: LD_ADDR_VAR 0 4
34688: PUSH
34689: LD_VAR 0 9
34693: PUSH
34694: LD_INT 1
34696: ARRAY
34697: PPUSH
34698: LD_VAR 0 9
34702: PUSH
34703: LD_INT 2
34705: ARRAY
34706: PPUSH
34707: CALL_OW 546
34711: ST_TO_ADDR
// if hex [ 1 ] then
34712: LD_VAR 0 4
34716: PUSH
34717: LD_INT 1
34719: ARRAY
34720: IFFALSE 34724
// continue ;
34722: GO 34612
// h := hex [ 2 ] ;
34724: LD_ADDR_VAR 0 13
34728: PUSH
34729: LD_VAR 0 4
34733: PUSH
34734: LD_INT 2
34736: ARRAY
34737: ST_TO_ADDR
// if h + 7 < height then
34738: LD_VAR 0 13
34742: PUSH
34743: LD_INT 7
34745: PLUS
34746: PUSH
34747: LD_VAR 0 15
34751: LESS
34752: IFFALSE 34781
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34754: LD_ADDR_VAR 0 18
34758: PUSH
34759: LD_INT 7
34761: PUSH
34762: LD_INT 28
34764: PUSH
34765: LD_INT 45
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: LIST
34772: PUSH
34773: LD_VAR 0 12
34777: ARRAY
34778: ST_TO_ADDR
// break ;
34779: GO 34783
// end ; end ; end ;
34781: GO 34612
34783: POP
34784: POP
// end ; if not weapon then
34785: LD_VAR 0 18
34789: NOT
34790: IFFALSE 34850
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34792: LD_ADDR_VAR 0 5
34796: PUSH
34797: LD_VAR 0 5
34801: PUSH
34802: LD_INT 11
34804: PUSH
34805: LD_INT 30
34807: PUSH
34808: LD_INT 49
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: LIST
34815: DIFF
34816: ST_TO_ADDR
// if not list then
34817: LD_VAR 0 5
34821: NOT
34822: IFFALSE 34826
// exit ;
34824: GO 34968
// weapon := list [ rand ( 1 , list ) ] ;
34826: LD_ADDR_VAR 0 18
34830: PUSH
34831: LD_VAR 0 5
34835: PUSH
34836: LD_INT 1
34838: PPUSH
34839: LD_VAR 0 5
34843: PPUSH
34844: CALL_OW 12
34848: ARRAY
34849: ST_TO_ADDR
// end ; if weapon then
34850: LD_VAR 0 18
34854: IFFALSE 34968
// begin tmp := CostOfWeapon ( weapon ) ;
34856: LD_ADDR_VAR 0 14
34860: PUSH
34861: LD_VAR 0 18
34865: PPUSH
34866: CALL_OW 451
34870: ST_TO_ADDR
// j := GetBase ( tower ) ;
34871: LD_ADDR_VAR 0 9
34875: PUSH
34876: LD_VAR 0 1
34880: PPUSH
34881: CALL_OW 274
34885: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34886: LD_VAR 0 9
34890: PPUSH
34891: LD_INT 1
34893: PPUSH
34894: CALL_OW 275
34898: PUSH
34899: LD_VAR 0 14
34903: PUSH
34904: LD_INT 1
34906: ARRAY
34907: GREATEREQUAL
34908: PUSH
34909: LD_VAR 0 9
34913: PPUSH
34914: LD_INT 2
34916: PPUSH
34917: CALL_OW 275
34921: PUSH
34922: LD_VAR 0 14
34926: PUSH
34927: LD_INT 2
34929: ARRAY
34930: GREATEREQUAL
34931: AND
34932: PUSH
34933: LD_VAR 0 9
34937: PPUSH
34938: LD_INT 3
34940: PPUSH
34941: CALL_OW 275
34945: PUSH
34946: LD_VAR 0 14
34950: PUSH
34951: LD_INT 3
34953: ARRAY
34954: GREATEREQUAL
34955: AND
34956: IFFALSE 34968
// result := weapon ;
34958: LD_ADDR_VAR 0 3
34962: PUSH
34963: LD_VAR 0 18
34967: ST_TO_ADDR
// end ; end ;
34968: LD_VAR 0 3
34972: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34973: LD_INT 0
34975: PPUSH
34976: PPUSH
// result := true ;
34977: LD_ADDR_VAR 0 3
34981: PUSH
34982: LD_INT 1
34984: ST_TO_ADDR
// if array1 = array2 then
34985: LD_VAR 0 1
34989: PUSH
34990: LD_VAR 0 2
34994: EQUAL
34995: IFFALSE 35055
// begin for i = 1 to array1 do
34997: LD_ADDR_VAR 0 4
35001: PUSH
35002: DOUBLE
35003: LD_INT 1
35005: DEC
35006: ST_TO_ADDR
35007: LD_VAR 0 1
35011: PUSH
35012: FOR_TO
35013: IFFALSE 35051
// if array1 [ i ] <> array2 [ i ] then
35015: LD_VAR 0 1
35019: PUSH
35020: LD_VAR 0 4
35024: ARRAY
35025: PUSH
35026: LD_VAR 0 2
35030: PUSH
35031: LD_VAR 0 4
35035: ARRAY
35036: NONEQUAL
35037: IFFALSE 35049
// begin result := false ;
35039: LD_ADDR_VAR 0 3
35043: PUSH
35044: LD_INT 0
35046: ST_TO_ADDR
// break ;
35047: GO 35051
// end ;
35049: GO 35012
35051: POP
35052: POP
// end else
35053: GO 35063
// result := false ;
35055: LD_ADDR_VAR 0 3
35059: PUSH
35060: LD_INT 0
35062: ST_TO_ADDR
// end ;
35063: LD_VAR 0 3
35067: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35068: LD_INT 0
35070: PPUSH
35071: PPUSH
// if not array1 or not array2 then
35072: LD_VAR 0 1
35076: NOT
35077: PUSH
35078: LD_VAR 0 2
35082: NOT
35083: OR
35084: IFFALSE 35088
// exit ;
35086: GO 35152
// result := true ;
35088: LD_ADDR_VAR 0 3
35092: PUSH
35093: LD_INT 1
35095: ST_TO_ADDR
// for i = 1 to array1 do
35096: LD_ADDR_VAR 0 4
35100: PUSH
35101: DOUBLE
35102: LD_INT 1
35104: DEC
35105: ST_TO_ADDR
35106: LD_VAR 0 1
35110: PUSH
35111: FOR_TO
35112: IFFALSE 35150
// if array1 [ i ] <> array2 [ i ] then
35114: LD_VAR 0 1
35118: PUSH
35119: LD_VAR 0 4
35123: ARRAY
35124: PUSH
35125: LD_VAR 0 2
35129: PUSH
35130: LD_VAR 0 4
35134: ARRAY
35135: NONEQUAL
35136: IFFALSE 35148
// begin result := false ;
35138: LD_ADDR_VAR 0 3
35142: PUSH
35143: LD_INT 0
35145: ST_TO_ADDR
// break ;
35146: GO 35150
// end ;
35148: GO 35111
35150: POP
35151: POP
// end ;
35152: LD_VAR 0 3
35156: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35157: LD_INT 0
35159: PPUSH
35160: PPUSH
35161: PPUSH
// pom := GetBase ( fac ) ;
35162: LD_ADDR_VAR 0 5
35166: PUSH
35167: LD_VAR 0 1
35171: PPUSH
35172: CALL_OW 274
35176: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35177: LD_ADDR_VAR 0 4
35181: PUSH
35182: LD_VAR 0 2
35186: PUSH
35187: LD_INT 1
35189: ARRAY
35190: PPUSH
35191: LD_VAR 0 2
35195: PUSH
35196: LD_INT 2
35198: ARRAY
35199: PPUSH
35200: LD_VAR 0 2
35204: PUSH
35205: LD_INT 3
35207: ARRAY
35208: PPUSH
35209: LD_VAR 0 2
35213: PUSH
35214: LD_INT 4
35216: ARRAY
35217: PPUSH
35218: CALL_OW 449
35222: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35223: LD_ADDR_VAR 0 3
35227: PUSH
35228: LD_VAR 0 5
35232: PPUSH
35233: LD_INT 1
35235: PPUSH
35236: CALL_OW 275
35240: PUSH
35241: LD_VAR 0 4
35245: PUSH
35246: LD_INT 1
35248: ARRAY
35249: GREATEREQUAL
35250: PUSH
35251: LD_VAR 0 5
35255: PPUSH
35256: LD_INT 2
35258: PPUSH
35259: CALL_OW 275
35263: PUSH
35264: LD_VAR 0 4
35268: PUSH
35269: LD_INT 2
35271: ARRAY
35272: GREATEREQUAL
35273: AND
35274: PUSH
35275: LD_VAR 0 5
35279: PPUSH
35280: LD_INT 3
35282: PPUSH
35283: CALL_OW 275
35287: PUSH
35288: LD_VAR 0 4
35292: PUSH
35293: LD_INT 3
35295: ARRAY
35296: GREATEREQUAL
35297: AND
35298: ST_TO_ADDR
// end ;
35299: LD_VAR 0 3
35303: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35304: LD_INT 0
35306: PPUSH
35307: PPUSH
35308: PPUSH
35309: PPUSH
// pom := GetBase ( building ) ;
35310: LD_ADDR_VAR 0 3
35314: PUSH
35315: LD_VAR 0 1
35319: PPUSH
35320: CALL_OW 274
35324: ST_TO_ADDR
// if not pom then
35325: LD_VAR 0 3
35329: NOT
35330: IFFALSE 35334
// exit ;
35332: GO 35504
// btype := GetBType ( building ) ;
35334: LD_ADDR_VAR 0 5
35338: PUSH
35339: LD_VAR 0 1
35343: PPUSH
35344: CALL_OW 266
35348: ST_TO_ADDR
// if btype = b_armoury then
35349: LD_VAR 0 5
35353: PUSH
35354: LD_INT 4
35356: EQUAL
35357: IFFALSE 35367
// btype := b_barracks ;
35359: LD_ADDR_VAR 0 5
35363: PUSH
35364: LD_INT 5
35366: ST_TO_ADDR
// if btype = b_depot then
35367: LD_VAR 0 5
35371: PUSH
35372: LD_INT 0
35374: EQUAL
35375: IFFALSE 35385
// btype := b_warehouse ;
35377: LD_ADDR_VAR 0 5
35381: PUSH
35382: LD_INT 1
35384: ST_TO_ADDR
// if btype = b_workshop then
35385: LD_VAR 0 5
35389: PUSH
35390: LD_INT 2
35392: EQUAL
35393: IFFALSE 35403
// btype := b_factory ;
35395: LD_ADDR_VAR 0 5
35399: PUSH
35400: LD_INT 3
35402: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35403: LD_ADDR_VAR 0 4
35407: PUSH
35408: LD_VAR 0 5
35412: PPUSH
35413: LD_VAR 0 1
35417: PPUSH
35418: CALL_OW 248
35422: PPUSH
35423: CALL_OW 450
35427: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35428: LD_ADDR_VAR 0 2
35432: PUSH
35433: LD_VAR 0 3
35437: PPUSH
35438: LD_INT 1
35440: PPUSH
35441: CALL_OW 275
35445: PUSH
35446: LD_VAR 0 4
35450: PUSH
35451: LD_INT 1
35453: ARRAY
35454: GREATEREQUAL
35455: PUSH
35456: LD_VAR 0 3
35460: PPUSH
35461: LD_INT 2
35463: PPUSH
35464: CALL_OW 275
35468: PUSH
35469: LD_VAR 0 4
35473: PUSH
35474: LD_INT 2
35476: ARRAY
35477: GREATEREQUAL
35478: AND
35479: PUSH
35480: LD_VAR 0 3
35484: PPUSH
35485: LD_INT 3
35487: PPUSH
35488: CALL_OW 275
35492: PUSH
35493: LD_VAR 0 4
35497: PUSH
35498: LD_INT 3
35500: ARRAY
35501: GREATEREQUAL
35502: AND
35503: ST_TO_ADDR
// end ;
35504: LD_VAR 0 2
35508: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35509: LD_INT 0
35511: PPUSH
35512: PPUSH
35513: PPUSH
// pom := GetBase ( building ) ;
35514: LD_ADDR_VAR 0 4
35518: PUSH
35519: LD_VAR 0 1
35523: PPUSH
35524: CALL_OW 274
35528: ST_TO_ADDR
// if not pom then
35529: LD_VAR 0 4
35533: NOT
35534: IFFALSE 35538
// exit ;
35536: GO 35639
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35538: LD_ADDR_VAR 0 5
35542: PUSH
35543: LD_VAR 0 2
35547: PPUSH
35548: LD_VAR 0 1
35552: PPUSH
35553: CALL_OW 248
35557: PPUSH
35558: CALL_OW 450
35562: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35563: LD_ADDR_VAR 0 3
35567: PUSH
35568: LD_VAR 0 4
35572: PPUSH
35573: LD_INT 1
35575: PPUSH
35576: CALL_OW 275
35580: PUSH
35581: LD_VAR 0 5
35585: PUSH
35586: LD_INT 1
35588: ARRAY
35589: GREATEREQUAL
35590: PUSH
35591: LD_VAR 0 4
35595: PPUSH
35596: LD_INT 2
35598: PPUSH
35599: CALL_OW 275
35603: PUSH
35604: LD_VAR 0 5
35608: PUSH
35609: LD_INT 2
35611: ARRAY
35612: GREATEREQUAL
35613: AND
35614: PUSH
35615: LD_VAR 0 4
35619: PPUSH
35620: LD_INT 3
35622: PPUSH
35623: CALL_OW 275
35627: PUSH
35628: LD_VAR 0 5
35632: PUSH
35633: LD_INT 3
35635: ARRAY
35636: GREATEREQUAL
35637: AND
35638: ST_TO_ADDR
// end ;
35639: LD_VAR 0 3
35643: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
35644: LD_INT 0
35646: PPUSH
35647: PPUSH
35648: PPUSH
35649: PPUSH
35650: PPUSH
35651: PPUSH
35652: PPUSH
35653: PPUSH
35654: PPUSH
35655: PPUSH
35656: PPUSH
// result := false ;
35657: LD_ADDR_VAR 0 8
35661: PUSH
35662: LD_INT 0
35664: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
35665: LD_VAR 0 5
35669: NOT
35670: PUSH
35671: LD_VAR 0 1
35675: NOT
35676: OR
35677: PUSH
35678: LD_VAR 0 2
35682: NOT
35683: OR
35684: PUSH
35685: LD_VAR 0 3
35689: NOT
35690: OR
35691: IFFALSE 35695
// exit ;
35693: GO 36509
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
35695: LD_ADDR_VAR 0 14
35699: PUSH
35700: LD_VAR 0 1
35704: PPUSH
35705: LD_VAR 0 2
35709: PPUSH
35710: LD_VAR 0 3
35714: PPUSH
35715: LD_VAR 0 4
35719: PPUSH
35720: LD_VAR 0 5
35724: PUSH
35725: LD_INT 1
35727: ARRAY
35728: PPUSH
35729: CALL_OW 248
35733: PPUSH
35734: LD_INT 0
35736: PPUSH
35737: CALL 37746 0 6
35741: ST_TO_ADDR
// if not hexes then
35742: LD_VAR 0 14
35746: NOT
35747: IFFALSE 35751
// exit ;
35749: GO 36509
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35751: LD_ADDR_VAR 0 17
35755: PUSH
35756: LD_VAR 0 5
35760: PPUSH
35761: LD_INT 22
35763: PUSH
35764: LD_VAR 0 13
35768: PPUSH
35769: CALL_OW 255
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 2
35780: PUSH
35781: LD_INT 30
35783: PUSH
35784: LD_INT 0
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: LD_INT 30
35793: PUSH
35794: LD_INT 1
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: LIST
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PPUSH
35810: CALL_OW 72
35814: ST_TO_ADDR
// for i = 1 to hexes do
35815: LD_ADDR_VAR 0 9
35819: PUSH
35820: DOUBLE
35821: LD_INT 1
35823: DEC
35824: ST_TO_ADDR
35825: LD_VAR 0 14
35829: PUSH
35830: FOR_TO
35831: IFFALSE 36507
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35833: LD_ADDR_VAR 0 13
35837: PUSH
35838: LD_VAR 0 14
35842: PUSH
35843: LD_VAR 0 9
35847: ARRAY
35848: PUSH
35849: LD_INT 1
35851: ARRAY
35852: PPUSH
35853: LD_VAR 0 14
35857: PUSH
35858: LD_VAR 0 9
35862: ARRAY
35863: PUSH
35864: LD_INT 2
35866: ARRAY
35867: PPUSH
35868: CALL_OW 428
35872: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35873: LD_VAR 0 14
35877: PUSH
35878: LD_VAR 0 9
35882: ARRAY
35883: PUSH
35884: LD_INT 1
35886: ARRAY
35887: PPUSH
35888: LD_VAR 0 14
35892: PUSH
35893: LD_VAR 0 9
35897: ARRAY
35898: PUSH
35899: LD_INT 2
35901: ARRAY
35902: PPUSH
35903: CALL_OW 351
35907: PUSH
35908: LD_VAR 0 14
35912: PUSH
35913: LD_VAR 0 9
35917: ARRAY
35918: PUSH
35919: LD_INT 1
35921: ARRAY
35922: PPUSH
35923: LD_VAR 0 14
35927: PUSH
35928: LD_VAR 0 9
35932: ARRAY
35933: PUSH
35934: LD_INT 2
35936: ARRAY
35937: PPUSH
35938: CALL_OW 488
35942: NOT
35943: OR
35944: PUSH
35945: LD_VAR 0 13
35949: PPUSH
35950: CALL_OW 247
35954: PUSH
35955: LD_INT 3
35957: EQUAL
35958: OR
35959: IFFALSE 35965
// exit ;
35961: POP
35962: POP
35963: GO 36509
// if not tmp then
35965: LD_VAR 0 13
35969: NOT
35970: IFFALSE 35974
// continue ;
35972: GO 35830
// result := true ;
35974: LD_ADDR_VAR 0 8
35978: PUSH
35979: LD_INT 1
35981: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
35982: LD_VAR 0 6
35986: PUSH
35987: LD_VAR 0 13
35991: PPUSH
35992: CALL_OW 247
35996: PUSH
35997: LD_INT 2
35999: EQUAL
36000: AND
36001: PUSH
36002: LD_VAR 0 13
36006: PPUSH
36007: CALL_OW 263
36011: PUSH
36012: LD_INT 1
36014: EQUAL
36015: AND
36016: IFFALSE 36180
// begin if IsDrivenBy ( tmp ) then
36018: LD_VAR 0 13
36022: PPUSH
36023: CALL_OW 311
36027: IFFALSE 36031
// continue ;
36029: GO 35830
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36031: LD_VAR 0 6
36035: PPUSH
36036: LD_INT 3
36038: PUSH
36039: LD_INT 60
36041: PUSH
36042: EMPTY
36043: LIST
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 3
36051: PUSH
36052: LD_INT 55
36054: PUSH
36055: EMPTY
36056: LIST
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PPUSH
36066: CALL_OW 72
36070: IFFALSE 36178
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36072: LD_ADDR_VAR 0 18
36076: PUSH
36077: LD_VAR 0 6
36081: PPUSH
36082: LD_INT 3
36084: PUSH
36085: LD_INT 60
36087: PUSH
36088: EMPTY
36089: LIST
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 3
36097: PUSH
36098: LD_INT 55
36100: PUSH
36101: EMPTY
36102: LIST
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PPUSH
36112: CALL_OW 72
36116: PUSH
36117: LD_INT 1
36119: ARRAY
36120: ST_TO_ADDR
// if IsInUnit ( driver ) then
36121: LD_VAR 0 18
36125: PPUSH
36126: CALL_OW 310
36130: IFFALSE 36141
// ComExit ( driver ) ;
36132: LD_VAR 0 18
36136: PPUSH
36137: CALL 60930 0 1
// AddComEnterUnit ( driver , tmp ) ;
36141: LD_VAR 0 18
36145: PPUSH
36146: LD_VAR 0 13
36150: PPUSH
36151: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36155: LD_VAR 0 18
36159: PPUSH
36160: LD_VAR 0 7
36164: PPUSH
36165: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36169: LD_VAR 0 18
36173: PPUSH
36174: CALL_OW 181
// end ; continue ;
36178: GO 35830
// end ; if not cleaners or not tmp in cleaners then
36180: LD_VAR 0 6
36184: NOT
36185: PUSH
36186: LD_VAR 0 13
36190: PUSH
36191: LD_VAR 0 6
36195: IN
36196: NOT
36197: OR
36198: IFFALSE 36505
// begin if dep then
36200: LD_VAR 0 17
36204: IFFALSE 36340
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36206: LD_ADDR_VAR 0 16
36210: PUSH
36211: LD_VAR 0 17
36215: PUSH
36216: LD_INT 1
36218: ARRAY
36219: PPUSH
36220: CALL_OW 250
36224: PPUSH
36225: LD_VAR 0 17
36229: PUSH
36230: LD_INT 1
36232: ARRAY
36233: PPUSH
36234: CALL_OW 254
36238: PPUSH
36239: LD_INT 5
36241: PPUSH
36242: CALL_OW 272
36246: PUSH
36247: LD_VAR 0 17
36251: PUSH
36252: LD_INT 1
36254: ARRAY
36255: PPUSH
36256: CALL_OW 251
36260: PPUSH
36261: LD_VAR 0 17
36265: PUSH
36266: LD_INT 1
36268: ARRAY
36269: PPUSH
36270: CALL_OW 254
36274: PPUSH
36275: LD_INT 5
36277: PPUSH
36278: CALL_OW 273
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36287: LD_VAR 0 16
36291: PUSH
36292: LD_INT 1
36294: ARRAY
36295: PPUSH
36296: LD_VAR 0 16
36300: PUSH
36301: LD_INT 2
36303: ARRAY
36304: PPUSH
36305: CALL_OW 488
36309: IFFALSE 36340
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36311: LD_VAR 0 13
36315: PPUSH
36316: LD_VAR 0 16
36320: PUSH
36321: LD_INT 1
36323: ARRAY
36324: PPUSH
36325: LD_VAR 0 16
36329: PUSH
36330: LD_INT 2
36332: ARRAY
36333: PPUSH
36334: CALL_OW 111
// continue ;
36338: GO 35830
// end ; end ; r := GetDir ( tmp ) ;
36340: LD_ADDR_VAR 0 15
36344: PUSH
36345: LD_VAR 0 13
36349: PPUSH
36350: CALL_OW 254
36354: ST_TO_ADDR
// if r = 5 then
36355: LD_VAR 0 15
36359: PUSH
36360: LD_INT 5
36362: EQUAL
36363: IFFALSE 36373
// r := 0 ;
36365: LD_ADDR_VAR 0 15
36369: PUSH
36370: LD_INT 0
36372: ST_TO_ADDR
// for j = r to 5 do
36373: LD_ADDR_VAR 0 10
36377: PUSH
36378: DOUBLE
36379: LD_VAR 0 15
36383: DEC
36384: ST_TO_ADDR
36385: LD_INT 5
36387: PUSH
36388: FOR_TO
36389: IFFALSE 36503
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36391: LD_ADDR_VAR 0 11
36395: PUSH
36396: LD_VAR 0 13
36400: PPUSH
36401: CALL_OW 250
36405: PPUSH
36406: LD_VAR 0 10
36410: PPUSH
36411: LD_INT 2
36413: PPUSH
36414: CALL_OW 272
36418: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36419: LD_ADDR_VAR 0 12
36423: PUSH
36424: LD_VAR 0 13
36428: PPUSH
36429: CALL_OW 251
36433: PPUSH
36434: LD_VAR 0 10
36438: PPUSH
36439: LD_INT 2
36441: PPUSH
36442: CALL_OW 273
36446: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36447: LD_VAR 0 11
36451: PPUSH
36452: LD_VAR 0 12
36456: PPUSH
36457: CALL_OW 488
36461: PUSH
36462: LD_VAR 0 11
36466: PPUSH
36467: LD_VAR 0 12
36471: PPUSH
36472: CALL_OW 428
36476: NOT
36477: AND
36478: IFFALSE 36501
// begin ComMoveXY ( tmp , _x , _y ) ;
36480: LD_VAR 0 13
36484: PPUSH
36485: LD_VAR 0 11
36489: PPUSH
36490: LD_VAR 0 12
36494: PPUSH
36495: CALL_OW 111
// break ;
36499: GO 36503
// end ; end ;
36501: GO 36388
36503: POP
36504: POP
// end ; end ;
36505: GO 35830
36507: POP
36508: POP
// end ;
36509: LD_VAR 0 8
36513: RET
// export function BuildingTechInvented ( side , btype ) ; begin
36514: LD_INT 0
36516: PPUSH
// result := true ;
36517: LD_ADDR_VAR 0 3
36521: PUSH
36522: LD_INT 1
36524: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
36525: LD_VAR 0 2
36529: PUSH
36530: LD_INT 24
36532: DOUBLE
36533: EQUAL
36534: IFTRUE 36544
36536: LD_INT 33
36538: DOUBLE
36539: EQUAL
36540: IFTRUE 36544
36542: GO 36569
36544: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
36545: LD_ADDR_VAR 0 3
36549: PUSH
36550: LD_INT 32
36552: PPUSH
36553: LD_VAR 0 1
36557: PPUSH
36558: CALL_OW 321
36562: PUSH
36563: LD_INT 2
36565: EQUAL
36566: ST_TO_ADDR
36567: GO 36889
36569: LD_INT 20
36571: DOUBLE
36572: EQUAL
36573: IFTRUE 36577
36575: GO 36602
36577: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
36578: LD_ADDR_VAR 0 3
36582: PUSH
36583: LD_INT 6
36585: PPUSH
36586: LD_VAR 0 1
36590: PPUSH
36591: CALL_OW 321
36595: PUSH
36596: LD_INT 2
36598: EQUAL
36599: ST_TO_ADDR
36600: GO 36889
36602: LD_INT 22
36604: DOUBLE
36605: EQUAL
36606: IFTRUE 36616
36608: LD_INT 36
36610: DOUBLE
36611: EQUAL
36612: IFTRUE 36616
36614: GO 36641
36616: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
36617: LD_ADDR_VAR 0 3
36621: PUSH
36622: LD_INT 15
36624: PPUSH
36625: LD_VAR 0 1
36629: PPUSH
36630: CALL_OW 321
36634: PUSH
36635: LD_INT 2
36637: EQUAL
36638: ST_TO_ADDR
36639: GO 36889
36641: LD_INT 30
36643: DOUBLE
36644: EQUAL
36645: IFTRUE 36649
36647: GO 36674
36649: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
36650: LD_ADDR_VAR 0 3
36654: PUSH
36655: LD_INT 20
36657: PPUSH
36658: LD_VAR 0 1
36662: PPUSH
36663: CALL_OW 321
36667: PUSH
36668: LD_INT 2
36670: EQUAL
36671: ST_TO_ADDR
36672: GO 36889
36674: LD_INT 28
36676: DOUBLE
36677: EQUAL
36678: IFTRUE 36688
36680: LD_INT 21
36682: DOUBLE
36683: EQUAL
36684: IFTRUE 36688
36686: GO 36713
36688: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
36689: LD_ADDR_VAR 0 3
36693: PUSH
36694: LD_INT 21
36696: PPUSH
36697: LD_VAR 0 1
36701: PPUSH
36702: CALL_OW 321
36706: PUSH
36707: LD_INT 2
36709: EQUAL
36710: ST_TO_ADDR
36711: GO 36889
36713: LD_INT 16
36715: DOUBLE
36716: EQUAL
36717: IFTRUE 36721
36719: GO 36748
36721: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
36722: LD_ADDR_VAR 0 3
36726: PUSH
36727: LD_EXP 106
36731: PPUSH
36732: LD_VAR 0 1
36736: PPUSH
36737: CALL_OW 321
36741: PUSH
36742: LD_INT 2
36744: EQUAL
36745: ST_TO_ADDR
36746: GO 36889
36748: LD_INT 19
36750: DOUBLE
36751: EQUAL
36752: IFTRUE 36762
36754: LD_INT 23
36756: DOUBLE
36757: EQUAL
36758: IFTRUE 36762
36760: GO 36789
36762: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
36763: LD_ADDR_VAR 0 3
36767: PUSH
36768: LD_EXP 105
36772: PPUSH
36773: LD_VAR 0 1
36777: PPUSH
36778: CALL_OW 321
36782: PUSH
36783: LD_INT 2
36785: EQUAL
36786: ST_TO_ADDR
36787: GO 36889
36789: LD_INT 17
36791: DOUBLE
36792: EQUAL
36793: IFTRUE 36797
36795: GO 36822
36797: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
36798: LD_ADDR_VAR 0 3
36802: PUSH
36803: LD_INT 39
36805: PPUSH
36806: LD_VAR 0 1
36810: PPUSH
36811: CALL_OW 321
36815: PUSH
36816: LD_INT 2
36818: EQUAL
36819: ST_TO_ADDR
36820: GO 36889
36822: LD_INT 18
36824: DOUBLE
36825: EQUAL
36826: IFTRUE 36830
36828: GO 36855
36830: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
36831: LD_ADDR_VAR 0 3
36835: PUSH
36836: LD_INT 40
36838: PPUSH
36839: LD_VAR 0 1
36843: PPUSH
36844: CALL_OW 321
36848: PUSH
36849: LD_INT 2
36851: EQUAL
36852: ST_TO_ADDR
36853: GO 36889
36855: LD_INT 27
36857: DOUBLE
36858: EQUAL
36859: IFTRUE 36863
36861: GO 36888
36863: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
36864: LD_ADDR_VAR 0 3
36868: PUSH
36869: LD_INT 35
36871: PPUSH
36872: LD_VAR 0 1
36876: PPUSH
36877: CALL_OW 321
36881: PUSH
36882: LD_INT 2
36884: EQUAL
36885: ST_TO_ADDR
36886: GO 36889
36888: POP
// end ;
36889: LD_VAR 0 3
36893: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
36894: LD_INT 0
36896: PPUSH
36897: PPUSH
36898: PPUSH
36899: PPUSH
36900: PPUSH
36901: PPUSH
36902: PPUSH
36903: PPUSH
36904: PPUSH
36905: PPUSH
36906: PPUSH
// result := false ;
36907: LD_ADDR_VAR 0 6
36911: PUSH
36912: LD_INT 0
36914: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36915: LD_VAR 0 1
36919: NOT
36920: PUSH
36921: LD_VAR 0 1
36925: PPUSH
36926: CALL_OW 266
36930: PUSH
36931: LD_INT 0
36933: PUSH
36934: LD_INT 1
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: IN
36941: NOT
36942: OR
36943: PUSH
36944: LD_VAR 0 2
36948: NOT
36949: OR
36950: PUSH
36951: LD_VAR 0 5
36955: PUSH
36956: LD_INT 0
36958: PUSH
36959: LD_INT 1
36961: PUSH
36962: LD_INT 2
36964: PUSH
36965: LD_INT 3
36967: PUSH
36968: LD_INT 4
36970: PUSH
36971: LD_INT 5
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: IN
36982: NOT
36983: OR
36984: PUSH
36985: LD_VAR 0 3
36989: PPUSH
36990: LD_VAR 0 4
36994: PPUSH
36995: CALL_OW 488
36999: NOT
37000: OR
37001: IFFALSE 37005
// exit ;
37003: GO 37741
// side := GetSide ( depot ) ;
37005: LD_ADDR_VAR 0 9
37009: PUSH
37010: LD_VAR 0 1
37014: PPUSH
37015: CALL_OW 255
37019: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37020: LD_VAR 0 9
37024: PPUSH
37025: LD_VAR 0 2
37029: PPUSH
37030: CALL 36514 0 2
37034: NOT
37035: IFFALSE 37039
// exit ;
37037: GO 37741
// pom := GetBase ( depot ) ;
37039: LD_ADDR_VAR 0 10
37043: PUSH
37044: LD_VAR 0 1
37048: PPUSH
37049: CALL_OW 274
37053: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37054: LD_ADDR_VAR 0 11
37058: PUSH
37059: LD_VAR 0 2
37063: PPUSH
37064: LD_VAR 0 1
37068: PPUSH
37069: CALL_OW 248
37073: PPUSH
37074: CALL_OW 450
37078: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37079: LD_VAR 0 10
37083: PPUSH
37084: LD_INT 1
37086: PPUSH
37087: CALL_OW 275
37091: PUSH
37092: LD_VAR 0 11
37096: PUSH
37097: LD_INT 1
37099: ARRAY
37100: GREATEREQUAL
37101: PUSH
37102: LD_VAR 0 10
37106: PPUSH
37107: LD_INT 2
37109: PPUSH
37110: CALL_OW 275
37114: PUSH
37115: LD_VAR 0 11
37119: PUSH
37120: LD_INT 2
37122: ARRAY
37123: GREATEREQUAL
37124: AND
37125: PUSH
37126: LD_VAR 0 10
37130: PPUSH
37131: LD_INT 3
37133: PPUSH
37134: CALL_OW 275
37138: PUSH
37139: LD_VAR 0 11
37143: PUSH
37144: LD_INT 3
37146: ARRAY
37147: GREATEREQUAL
37148: AND
37149: NOT
37150: IFFALSE 37154
// exit ;
37152: GO 37741
// if GetBType ( depot ) = b_depot then
37154: LD_VAR 0 1
37158: PPUSH
37159: CALL_OW 266
37163: PUSH
37164: LD_INT 0
37166: EQUAL
37167: IFFALSE 37179
// dist := 28 else
37169: LD_ADDR_VAR 0 14
37173: PUSH
37174: LD_INT 28
37176: ST_TO_ADDR
37177: GO 37187
// dist := 36 ;
37179: LD_ADDR_VAR 0 14
37183: PUSH
37184: LD_INT 36
37186: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37187: LD_VAR 0 1
37191: PPUSH
37192: LD_VAR 0 3
37196: PPUSH
37197: LD_VAR 0 4
37201: PPUSH
37202: CALL_OW 297
37206: PUSH
37207: LD_VAR 0 14
37211: GREATER
37212: IFFALSE 37216
// exit ;
37214: GO 37741
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37216: LD_ADDR_VAR 0 12
37220: PUSH
37221: LD_VAR 0 2
37225: PPUSH
37226: LD_VAR 0 3
37230: PPUSH
37231: LD_VAR 0 4
37235: PPUSH
37236: LD_VAR 0 5
37240: PPUSH
37241: LD_VAR 0 1
37245: PPUSH
37246: CALL_OW 248
37250: PPUSH
37251: LD_INT 0
37253: PPUSH
37254: CALL 37746 0 6
37258: ST_TO_ADDR
// if not hexes then
37259: LD_VAR 0 12
37263: NOT
37264: IFFALSE 37268
// exit ;
37266: GO 37741
// hex := GetHexInfo ( x , y ) ;
37268: LD_ADDR_VAR 0 15
37272: PUSH
37273: LD_VAR 0 3
37277: PPUSH
37278: LD_VAR 0 4
37282: PPUSH
37283: CALL_OW 546
37287: ST_TO_ADDR
// if hex [ 1 ] then
37288: LD_VAR 0 15
37292: PUSH
37293: LD_INT 1
37295: ARRAY
37296: IFFALSE 37300
// exit ;
37298: GO 37741
// height := hex [ 2 ] ;
37300: LD_ADDR_VAR 0 13
37304: PUSH
37305: LD_VAR 0 15
37309: PUSH
37310: LD_INT 2
37312: ARRAY
37313: ST_TO_ADDR
// for i = 1 to hexes do
37314: LD_ADDR_VAR 0 7
37318: PUSH
37319: DOUBLE
37320: LD_INT 1
37322: DEC
37323: ST_TO_ADDR
37324: LD_VAR 0 12
37328: PUSH
37329: FOR_TO
37330: IFFALSE 37660
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37332: LD_VAR 0 12
37336: PUSH
37337: LD_VAR 0 7
37341: ARRAY
37342: PUSH
37343: LD_INT 1
37345: ARRAY
37346: PPUSH
37347: LD_VAR 0 12
37351: PUSH
37352: LD_VAR 0 7
37356: ARRAY
37357: PUSH
37358: LD_INT 2
37360: ARRAY
37361: PPUSH
37362: CALL_OW 488
37366: NOT
37367: PUSH
37368: LD_VAR 0 12
37372: PUSH
37373: LD_VAR 0 7
37377: ARRAY
37378: PUSH
37379: LD_INT 1
37381: ARRAY
37382: PPUSH
37383: LD_VAR 0 12
37387: PUSH
37388: LD_VAR 0 7
37392: ARRAY
37393: PUSH
37394: LD_INT 2
37396: ARRAY
37397: PPUSH
37398: CALL_OW 428
37402: PUSH
37403: LD_INT 0
37405: GREATER
37406: OR
37407: PUSH
37408: LD_VAR 0 12
37412: PUSH
37413: LD_VAR 0 7
37417: ARRAY
37418: PUSH
37419: LD_INT 1
37421: ARRAY
37422: PPUSH
37423: LD_VAR 0 12
37427: PUSH
37428: LD_VAR 0 7
37432: ARRAY
37433: PUSH
37434: LD_INT 2
37436: ARRAY
37437: PPUSH
37438: CALL_OW 351
37442: OR
37443: IFFALSE 37449
// exit ;
37445: POP
37446: POP
37447: GO 37741
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37449: LD_ADDR_VAR 0 8
37453: PUSH
37454: LD_VAR 0 12
37458: PUSH
37459: LD_VAR 0 7
37463: ARRAY
37464: PUSH
37465: LD_INT 1
37467: ARRAY
37468: PPUSH
37469: LD_VAR 0 12
37473: PUSH
37474: LD_VAR 0 7
37478: ARRAY
37479: PUSH
37480: LD_INT 2
37482: ARRAY
37483: PPUSH
37484: CALL_OW 546
37488: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37489: LD_VAR 0 8
37493: PUSH
37494: LD_INT 1
37496: ARRAY
37497: PUSH
37498: LD_VAR 0 8
37502: PUSH
37503: LD_INT 2
37505: ARRAY
37506: PUSH
37507: LD_VAR 0 13
37511: PUSH
37512: LD_INT 2
37514: PLUS
37515: GREATER
37516: OR
37517: PUSH
37518: LD_VAR 0 8
37522: PUSH
37523: LD_INT 2
37525: ARRAY
37526: PUSH
37527: LD_VAR 0 13
37531: PUSH
37532: LD_INT 2
37534: MINUS
37535: LESS
37536: OR
37537: PUSH
37538: LD_VAR 0 8
37542: PUSH
37543: LD_INT 3
37545: ARRAY
37546: PUSH
37547: LD_INT 0
37549: PUSH
37550: LD_INT 8
37552: PUSH
37553: LD_INT 9
37555: PUSH
37556: LD_INT 10
37558: PUSH
37559: LD_INT 11
37561: PUSH
37562: LD_INT 12
37564: PUSH
37565: LD_INT 13
37567: PUSH
37568: LD_INT 16
37570: PUSH
37571: LD_INT 17
37573: PUSH
37574: LD_INT 18
37576: PUSH
37577: LD_INT 19
37579: PUSH
37580: LD_INT 20
37582: PUSH
37583: LD_INT 21
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: IN
37601: NOT
37602: OR
37603: PUSH
37604: LD_VAR 0 8
37608: PUSH
37609: LD_INT 5
37611: ARRAY
37612: NOT
37613: OR
37614: PUSH
37615: LD_VAR 0 8
37619: PUSH
37620: LD_INT 6
37622: ARRAY
37623: PUSH
37624: LD_INT 1
37626: PUSH
37627: LD_INT 2
37629: PUSH
37630: LD_INT 7
37632: PUSH
37633: LD_INT 9
37635: PUSH
37636: LD_INT 10
37638: PUSH
37639: LD_INT 11
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: IN
37650: NOT
37651: OR
37652: IFFALSE 37658
// exit ;
37654: POP
37655: POP
37656: GO 37741
// end ;
37658: GO 37329
37660: POP
37661: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37662: LD_VAR 0 9
37666: PPUSH
37667: LD_VAR 0 3
37671: PPUSH
37672: LD_VAR 0 4
37676: PPUSH
37677: LD_INT 20
37679: PPUSH
37680: CALL 29687 0 4
37684: PUSH
37685: LD_INT 4
37687: ARRAY
37688: IFFALSE 37692
// exit ;
37690: GO 37741
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37692: LD_VAR 0 2
37696: PUSH
37697: LD_INT 29
37699: PUSH
37700: LD_INT 30
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: IN
37707: PUSH
37708: LD_VAR 0 3
37712: PPUSH
37713: LD_VAR 0 4
37717: PPUSH
37718: LD_VAR 0 9
37722: PPUSH
37723: CALL_OW 440
37727: NOT
37728: AND
37729: IFFALSE 37733
// exit ;
37731: GO 37741
// result := true ;
37733: LD_ADDR_VAR 0 6
37737: PUSH
37738: LD_INT 1
37740: ST_TO_ADDR
// end ;
37741: LD_VAR 0 6
37745: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37746: LD_INT 0
37748: PPUSH
37749: PPUSH
37750: PPUSH
37751: PPUSH
37752: PPUSH
37753: PPUSH
37754: PPUSH
37755: PPUSH
37756: PPUSH
37757: PPUSH
37758: PPUSH
37759: PPUSH
37760: PPUSH
37761: PPUSH
37762: PPUSH
37763: PPUSH
37764: PPUSH
37765: PPUSH
37766: PPUSH
37767: PPUSH
37768: PPUSH
37769: PPUSH
37770: PPUSH
37771: PPUSH
37772: PPUSH
37773: PPUSH
37774: PPUSH
37775: PPUSH
37776: PPUSH
37777: PPUSH
37778: PPUSH
37779: PPUSH
37780: PPUSH
37781: PPUSH
37782: PPUSH
37783: PPUSH
37784: PPUSH
37785: PPUSH
37786: PPUSH
37787: PPUSH
37788: PPUSH
37789: PPUSH
37790: PPUSH
37791: PPUSH
37792: PPUSH
37793: PPUSH
37794: PPUSH
37795: PPUSH
37796: PPUSH
37797: PPUSH
37798: PPUSH
37799: PPUSH
37800: PPUSH
37801: PPUSH
37802: PPUSH
37803: PPUSH
37804: PPUSH
37805: PPUSH
// result = [ ] ;
37806: LD_ADDR_VAR 0 7
37810: PUSH
37811: EMPTY
37812: ST_TO_ADDR
// temp_list = [ ] ;
37813: LD_ADDR_VAR 0 9
37817: PUSH
37818: EMPTY
37819: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37820: LD_VAR 0 4
37824: PUSH
37825: LD_INT 0
37827: PUSH
37828: LD_INT 1
37830: PUSH
37831: LD_INT 2
37833: PUSH
37834: LD_INT 3
37836: PUSH
37837: LD_INT 4
37839: PUSH
37840: LD_INT 5
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: IN
37851: NOT
37852: PUSH
37853: LD_VAR 0 1
37857: PUSH
37858: LD_INT 0
37860: PUSH
37861: LD_INT 1
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: IN
37868: PUSH
37869: LD_VAR 0 5
37873: PUSH
37874: LD_INT 1
37876: PUSH
37877: LD_INT 2
37879: PUSH
37880: LD_INT 3
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: LIST
37887: IN
37888: NOT
37889: AND
37890: OR
37891: IFFALSE 37895
// exit ;
37893: GO 56286
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37895: LD_VAR 0 1
37899: PUSH
37900: LD_INT 6
37902: PUSH
37903: LD_INT 7
37905: PUSH
37906: LD_INT 8
37908: PUSH
37909: LD_INT 13
37911: PUSH
37912: LD_INT 12
37914: PUSH
37915: LD_INT 15
37917: PUSH
37918: LD_INT 11
37920: PUSH
37921: LD_INT 14
37923: PUSH
37924: LD_INT 10
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: IN
37938: IFFALSE 37948
// btype = b_lab ;
37940: LD_ADDR_VAR 0 1
37944: PUSH
37945: LD_INT 6
37947: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37948: LD_VAR 0 6
37952: PUSH
37953: LD_INT 0
37955: PUSH
37956: LD_INT 1
37958: PUSH
37959: LD_INT 2
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: LIST
37966: IN
37967: NOT
37968: PUSH
37969: LD_VAR 0 1
37973: PUSH
37974: LD_INT 0
37976: PUSH
37977: LD_INT 1
37979: PUSH
37980: LD_INT 2
37982: PUSH
37983: LD_INT 3
37985: PUSH
37986: LD_INT 6
37988: PUSH
37989: LD_INT 36
37991: PUSH
37992: LD_INT 4
37994: PUSH
37995: LD_INT 5
37997: PUSH
37998: LD_INT 31
38000: PUSH
38001: LD_INT 32
38003: PUSH
38004: LD_INT 33
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: IN
38020: NOT
38021: PUSH
38022: LD_VAR 0 6
38026: PUSH
38027: LD_INT 1
38029: EQUAL
38030: AND
38031: OR
38032: PUSH
38033: LD_VAR 0 1
38037: PUSH
38038: LD_INT 2
38040: PUSH
38041: LD_INT 3
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: IN
38048: NOT
38049: PUSH
38050: LD_VAR 0 6
38054: PUSH
38055: LD_INT 2
38057: EQUAL
38058: AND
38059: OR
38060: IFFALSE 38070
// mode = 0 ;
38062: LD_ADDR_VAR 0 6
38066: PUSH
38067: LD_INT 0
38069: ST_TO_ADDR
// case mode of 0 :
38070: LD_VAR 0 6
38074: PUSH
38075: LD_INT 0
38077: DOUBLE
38078: EQUAL
38079: IFTRUE 38083
38081: GO 49536
38083: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38084: LD_ADDR_VAR 0 11
38088: PUSH
38089: LD_INT 0
38091: PUSH
38092: LD_INT 0
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 0
38101: PUSH
38102: LD_INT 1
38104: NEG
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 1
38112: PUSH
38113: LD_INT 0
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: LD_INT 1
38122: PUSH
38123: LD_INT 1
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: PUSH
38130: LD_INT 0
38132: PUSH
38133: LD_INT 1
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 1
38142: NEG
38143: PUSH
38144: LD_INT 0
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 1
38153: NEG
38154: PUSH
38155: LD_INT 1
38157: NEG
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 1
38165: NEG
38166: PUSH
38167: LD_INT 2
38169: NEG
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 0
38177: PUSH
38178: LD_INT 2
38180: NEG
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 1
38188: PUSH
38189: LD_INT 1
38191: NEG
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 1
38199: PUSH
38200: LD_INT 2
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 0
38209: PUSH
38210: LD_INT 2
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 1
38219: NEG
38220: PUSH
38221: LD_INT 1
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: LD_INT 1
38230: PUSH
38231: LD_INT 3
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 0
38240: PUSH
38241: LD_INT 3
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PUSH
38248: LD_INT 1
38250: NEG
38251: PUSH
38252: LD_INT 2
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38277: LD_ADDR_VAR 0 12
38281: PUSH
38282: LD_INT 0
38284: PUSH
38285: LD_INT 0
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PUSH
38292: LD_INT 0
38294: PUSH
38295: LD_INT 1
38297: NEG
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 1
38305: PUSH
38306: LD_INT 0
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 1
38315: PUSH
38316: LD_INT 1
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 0
38325: PUSH
38326: LD_INT 1
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 1
38335: NEG
38336: PUSH
38337: LD_INT 0
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 1
38346: NEG
38347: PUSH
38348: LD_INT 1
38350: NEG
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 1
38358: PUSH
38359: LD_INT 1
38361: NEG
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 2
38369: PUSH
38370: LD_INT 0
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 2
38379: PUSH
38380: LD_INT 1
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: LD_INT 1
38389: NEG
38390: PUSH
38391: LD_INT 1
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 2
38400: NEG
38401: PUSH
38402: LD_INT 0
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: LD_INT 2
38411: NEG
38412: PUSH
38413: LD_INT 1
38415: NEG
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 2
38423: NEG
38424: PUSH
38425: LD_INT 1
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 3
38434: NEG
38435: PUSH
38436: LD_INT 0
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 3
38445: NEG
38446: PUSH
38447: LD_INT 1
38449: NEG
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38473: LD_ADDR_VAR 0 13
38477: PUSH
38478: LD_INT 0
38480: PUSH
38481: LD_INT 0
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 0
38490: PUSH
38491: LD_INT 1
38493: NEG
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 1
38501: PUSH
38502: LD_INT 0
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 1
38511: PUSH
38512: LD_INT 1
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 0
38521: PUSH
38522: LD_INT 1
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 1
38531: NEG
38532: PUSH
38533: LD_INT 0
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: LD_INT 1
38542: NEG
38543: PUSH
38544: LD_INT 1
38546: NEG
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 1
38554: NEG
38555: PUSH
38556: LD_INT 2
38558: NEG
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 2
38566: PUSH
38567: LD_INT 1
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 2
38576: PUSH
38577: LD_INT 2
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 1
38586: PUSH
38587: LD_INT 2
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 2
38596: NEG
38597: PUSH
38598: LD_INT 1
38600: NEG
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 2
38608: NEG
38609: PUSH
38610: LD_INT 2
38612: NEG
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 2
38620: NEG
38621: PUSH
38622: LD_INT 3
38624: NEG
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 3
38632: NEG
38633: PUSH
38634: LD_INT 2
38636: NEG
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 3
38644: NEG
38645: PUSH
38646: LD_INT 3
38648: NEG
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38672: LD_ADDR_VAR 0 14
38676: PUSH
38677: LD_INT 0
38679: PUSH
38680: LD_INT 0
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 0
38689: PUSH
38690: LD_INT 1
38692: NEG
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 1
38700: PUSH
38701: LD_INT 0
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 1
38710: PUSH
38711: LD_INT 1
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 0
38720: PUSH
38721: LD_INT 1
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 1
38730: NEG
38731: PUSH
38732: LD_INT 0
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 1
38741: NEG
38742: PUSH
38743: LD_INT 1
38745: NEG
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 1
38753: NEG
38754: PUSH
38755: LD_INT 2
38757: NEG
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 0
38765: PUSH
38766: LD_INT 2
38768: NEG
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 1
38776: PUSH
38777: LD_INT 1
38779: NEG
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 1
38787: PUSH
38788: LD_INT 2
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 0
38797: PUSH
38798: LD_INT 2
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 1
38807: NEG
38808: PUSH
38809: LD_INT 1
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 1
38818: NEG
38819: PUSH
38820: LD_INT 3
38822: NEG
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 0
38830: PUSH
38831: LD_INT 3
38833: NEG
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 1
38841: PUSH
38842: LD_INT 2
38844: NEG
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38868: LD_ADDR_VAR 0 15
38872: PUSH
38873: LD_INT 0
38875: PUSH
38876: LD_INT 0
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 0
38885: PUSH
38886: LD_INT 1
38888: NEG
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 1
38896: PUSH
38897: LD_INT 0
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 1
38906: PUSH
38907: LD_INT 1
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 0
38916: PUSH
38917: LD_INT 1
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 1
38926: NEG
38927: PUSH
38928: LD_INT 0
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 1
38937: NEG
38938: PUSH
38939: LD_INT 1
38941: NEG
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 1
38949: PUSH
38950: LD_INT 1
38952: NEG
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 2
38960: PUSH
38961: LD_INT 0
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 2
38970: PUSH
38971: LD_INT 1
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 1
38980: NEG
38981: PUSH
38982: LD_INT 1
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 2
38991: NEG
38992: PUSH
38993: LD_INT 0
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 2
39002: NEG
39003: PUSH
39004: LD_INT 1
39006: NEG
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 2
39014: PUSH
39015: LD_INT 1
39017: NEG
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 3
39025: PUSH
39026: LD_INT 0
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: LD_INT 3
39035: PUSH
39036: LD_INT 1
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39061: LD_ADDR_VAR 0 16
39065: PUSH
39066: LD_INT 0
39068: PUSH
39069: LD_INT 0
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 0
39078: PUSH
39079: LD_INT 1
39081: NEG
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 1
39089: PUSH
39090: LD_INT 0
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 1
39099: PUSH
39100: LD_INT 1
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 0
39109: PUSH
39110: LD_INT 1
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 1
39119: NEG
39120: PUSH
39121: LD_INT 0
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 1
39130: NEG
39131: PUSH
39132: LD_INT 1
39134: NEG
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 1
39142: NEG
39143: PUSH
39144: LD_INT 2
39146: NEG
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 2
39154: PUSH
39155: LD_INT 1
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 2
39164: PUSH
39165: LD_INT 2
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 1
39174: PUSH
39175: LD_INT 2
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 2
39184: NEG
39185: PUSH
39186: LD_INT 1
39188: NEG
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 2
39196: NEG
39197: PUSH
39198: LD_INT 2
39200: NEG
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 3
39208: PUSH
39209: LD_INT 2
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 3
39218: PUSH
39219: LD_INT 3
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 2
39228: PUSH
39229: LD_INT 3
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39254: LD_ADDR_VAR 0 17
39258: PUSH
39259: LD_INT 0
39261: PUSH
39262: LD_INT 0
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 0
39271: PUSH
39272: LD_INT 1
39274: NEG
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 1
39282: PUSH
39283: LD_INT 0
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 1
39292: PUSH
39293: LD_INT 1
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 0
39302: PUSH
39303: LD_INT 1
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 1
39312: NEG
39313: PUSH
39314: LD_INT 0
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 1
39323: NEG
39324: PUSH
39325: LD_INT 1
39327: NEG
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 1
39335: NEG
39336: PUSH
39337: LD_INT 2
39339: NEG
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 0
39347: PUSH
39348: LD_INT 2
39350: NEG
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 1
39358: PUSH
39359: LD_INT 1
39361: NEG
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 2
39369: PUSH
39370: LD_INT 0
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 2
39379: PUSH
39380: LD_INT 1
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 2
39389: PUSH
39390: LD_INT 2
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 1
39399: PUSH
39400: LD_INT 2
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 0
39409: PUSH
39410: LD_INT 2
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 1
39419: NEG
39420: PUSH
39421: LD_INT 1
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 2
39430: NEG
39431: PUSH
39432: LD_INT 0
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 2
39441: NEG
39442: PUSH
39443: LD_INT 1
39445: NEG
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 2
39453: NEG
39454: PUSH
39455: LD_INT 2
39457: NEG
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39484: LD_ADDR_VAR 0 18
39488: PUSH
39489: LD_INT 0
39491: PUSH
39492: LD_INT 0
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 0
39501: PUSH
39502: LD_INT 1
39504: NEG
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 1
39512: PUSH
39513: LD_INT 0
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 1
39522: PUSH
39523: LD_INT 1
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 0
39532: PUSH
39533: LD_INT 1
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 1
39542: NEG
39543: PUSH
39544: LD_INT 0
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 1
39553: NEG
39554: PUSH
39555: LD_INT 1
39557: NEG
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 1
39565: NEG
39566: PUSH
39567: LD_INT 2
39569: NEG
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 0
39577: PUSH
39578: LD_INT 2
39580: NEG
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 1
39588: PUSH
39589: LD_INT 1
39591: NEG
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 2
39599: PUSH
39600: LD_INT 0
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 2
39609: PUSH
39610: LD_INT 1
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 2
39619: PUSH
39620: LD_INT 2
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 1
39629: PUSH
39630: LD_INT 2
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 0
39639: PUSH
39640: LD_INT 2
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 1
39649: NEG
39650: PUSH
39651: LD_INT 1
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 2
39660: NEG
39661: PUSH
39662: LD_INT 0
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 2
39671: NEG
39672: PUSH
39673: LD_INT 1
39675: NEG
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 2
39683: NEG
39684: PUSH
39685: LD_INT 2
39687: NEG
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39714: LD_ADDR_VAR 0 19
39718: PUSH
39719: LD_INT 0
39721: PUSH
39722: LD_INT 0
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 0
39731: PUSH
39732: LD_INT 1
39734: NEG
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 1
39742: PUSH
39743: LD_INT 0
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 1
39752: PUSH
39753: LD_INT 1
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 0
39762: PUSH
39763: LD_INT 1
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 1
39772: NEG
39773: PUSH
39774: LD_INT 0
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 1
39783: NEG
39784: PUSH
39785: LD_INT 1
39787: NEG
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 1
39795: NEG
39796: PUSH
39797: LD_INT 2
39799: NEG
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 0
39807: PUSH
39808: LD_INT 2
39810: NEG
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 1
39818: PUSH
39819: LD_INT 1
39821: NEG
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 2
39829: PUSH
39830: LD_INT 0
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 2
39839: PUSH
39840: LD_INT 1
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 2
39849: PUSH
39850: LD_INT 2
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 1
39859: PUSH
39860: LD_INT 2
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 0
39869: PUSH
39870: LD_INT 2
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 1
39879: NEG
39880: PUSH
39881: LD_INT 1
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 2
39890: NEG
39891: PUSH
39892: LD_INT 0
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 2
39901: NEG
39902: PUSH
39903: LD_INT 1
39905: NEG
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 2
39913: NEG
39914: PUSH
39915: LD_INT 2
39917: NEG
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39944: LD_ADDR_VAR 0 20
39948: PUSH
39949: LD_INT 0
39951: PUSH
39952: LD_INT 0
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 0
39961: PUSH
39962: LD_INT 1
39964: NEG
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 1
39972: PUSH
39973: LD_INT 0
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 1
39982: PUSH
39983: LD_INT 1
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 0
39992: PUSH
39993: LD_INT 1
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 1
40002: NEG
40003: PUSH
40004: LD_INT 0
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 1
40013: NEG
40014: PUSH
40015: LD_INT 1
40017: NEG
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 1
40025: NEG
40026: PUSH
40027: LD_INT 2
40029: NEG
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 0
40037: PUSH
40038: LD_INT 2
40040: NEG
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 1
40048: PUSH
40049: LD_INT 1
40051: NEG
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 2
40059: PUSH
40060: LD_INT 0
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 2
40069: PUSH
40070: LD_INT 1
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 2
40079: PUSH
40080: LD_INT 2
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 1
40089: PUSH
40090: LD_INT 2
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 0
40099: PUSH
40100: LD_INT 2
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 1
40109: NEG
40110: PUSH
40111: LD_INT 1
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 2
40120: NEG
40121: PUSH
40122: LD_INT 0
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 2
40131: NEG
40132: PUSH
40133: LD_INT 1
40135: NEG
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 2
40143: NEG
40144: PUSH
40145: LD_INT 2
40147: NEG
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40174: LD_ADDR_VAR 0 21
40178: PUSH
40179: LD_INT 0
40181: PUSH
40182: LD_INT 0
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 0
40191: PUSH
40192: LD_INT 1
40194: NEG
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 1
40202: PUSH
40203: LD_INT 0
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 1
40212: PUSH
40213: LD_INT 1
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 0
40222: PUSH
40223: LD_INT 1
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 1
40232: NEG
40233: PUSH
40234: LD_INT 0
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 1
40243: NEG
40244: PUSH
40245: LD_INT 1
40247: NEG
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 1
40255: NEG
40256: PUSH
40257: LD_INT 2
40259: NEG
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 0
40267: PUSH
40268: LD_INT 2
40270: NEG
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 1
40278: PUSH
40279: LD_INT 1
40281: NEG
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 2
40289: PUSH
40290: LD_INT 0
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 2
40299: PUSH
40300: LD_INT 1
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 2
40309: PUSH
40310: LD_INT 2
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 1
40319: PUSH
40320: LD_INT 2
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 0
40329: PUSH
40330: LD_INT 2
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 1
40339: NEG
40340: PUSH
40341: LD_INT 1
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 2
40350: NEG
40351: PUSH
40352: LD_INT 0
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 2
40361: NEG
40362: PUSH
40363: LD_INT 1
40365: NEG
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 2
40373: NEG
40374: PUSH
40375: LD_INT 2
40377: NEG
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40404: LD_ADDR_VAR 0 22
40408: PUSH
40409: LD_INT 0
40411: PUSH
40412: LD_INT 0
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 0
40421: PUSH
40422: LD_INT 1
40424: NEG
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 1
40432: PUSH
40433: LD_INT 0
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 1
40442: PUSH
40443: LD_INT 1
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 0
40452: PUSH
40453: LD_INT 1
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 1
40462: NEG
40463: PUSH
40464: LD_INT 0
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 1
40473: NEG
40474: PUSH
40475: LD_INT 1
40477: NEG
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 1
40485: NEG
40486: PUSH
40487: LD_INT 2
40489: NEG
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 0
40497: PUSH
40498: LD_INT 2
40500: NEG
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 1
40508: PUSH
40509: LD_INT 1
40511: NEG
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 2
40519: PUSH
40520: LD_INT 0
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 2
40529: PUSH
40530: LD_INT 1
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 2
40539: PUSH
40540: LD_INT 2
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 1
40549: PUSH
40550: LD_INT 2
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 0
40559: PUSH
40560: LD_INT 2
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 1
40569: NEG
40570: PUSH
40571: LD_INT 1
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 2
40580: NEG
40581: PUSH
40582: LD_INT 0
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 2
40591: NEG
40592: PUSH
40593: LD_INT 1
40595: NEG
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 2
40603: NEG
40604: PUSH
40605: LD_INT 2
40607: NEG
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40634: LD_ADDR_VAR 0 23
40638: PUSH
40639: LD_INT 0
40641: PUSH
40642: LD_INT 0
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 0
40651: PUSH
40652: LD_INT 1
40654: NEG
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 1
40662: PUSH
40663: LD_INT 0
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 1
40672: PUSH
40673: LD_INT 1
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 0
40682: PUSH
40683: LD_INT 1
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 1
40692: NEG
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 1
40703: NEG
40704: PUSH
40705: LD_INT 1
40707: NEG
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 1
40715: NEG
40716: PUSH
40717: LD_INT 2
40719: NEG
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 0
40727: PUSH
40728: LD_INT 2
40730: NEG
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 1
40738: PUSH
40739: LD_INT 1
40741: NEG
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 2
40749: PUSH
40750: LD_INT 0
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 2
40759: PUSH
40760: LD_INT 1
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 2
40769: PUSH
40770: LD_INT 2
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 1
40779: PUSH
40780: LD_INT 2
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 0
40789: PUSH
40790: LD_INT 2
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 1
40799: NEG
40800: PUSH
40801: LD_INT 1
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 2
40810: NEG
40811: PUSH
40812: LD_INT 0
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 2
40821: NEG
40822: PUSH
40823: LD_INT 1
40825: NEG
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 2
40833: NEG
40834: PUSH
40835: LD_INT 2
40837: NEG
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 2
40845: NEG
40846: PUSH
40847: LD_INT 3
40849: NEG
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 1
40857: NEG
40858: PUSH
40859: LD_INT 3
40861: NEG
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 1
40869: PUSH
40870: LD_INT 2
40872: NEG
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 2
40880: PUSH
40881: LD_INT 1
40883: NEG
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40914: LD_ADDR_VAR 0 24
40918: PUSH
40919: LD_INT 0
40921: PUSH
40922: LD_INT 0
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 0
40931: PUSH
40932: LD_INT 1
40934: NEG
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 1
40942: PUSH
40943: LD_INT 0
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 1
40952: PUSH
40953: LD_INT 1
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 0
40962: PUSH
40963: LD_INT 1
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 1
40972: NEG
40973: PUSH
40974: LD_INT 0
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 1
40983: NEG
40984: PUSH
40985: LD_INT 1
40987: NEG
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 1
40995: NEG
40996: PUSH
40997: LD_INT 2
40999: NEG
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 0
41007: PUSH
41008: LD_INT 2
41010: NEG
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 1
41018: PUSH
41019: LD_INT 1
41021: NEG
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 2
41029: PUSH
41030: LD_INT 0
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 2
41039: PUSH
41040: LD_INT 1
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 2
41049: PUSH
41050: LD_INT 2
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 1
41059: PUSH
41060: LD_INT 2
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 0
41069: PUSH
41070: LD_INT 2
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 1
41079: NEG
41080: PUSH
41081: LD_INT 1
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 2
41090: NEG
41091: PUSH
41092: LD_INT 0
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 2
41101: NEG
41102: PUSH
41103: LD_INT 1
41105: NEG
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 2
41113: NEG
41114: PUSH
41115: LD_INT 2
41117: NEG
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 1
41125: PUSH
41126: LD_INT 2
41128: NEG
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 2
41136: PUSH
41137: LD_INT 1
41139: NEG
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 3
41147: PUSH
41148: LD_INT 1
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 3
41157: PUSH
41158: LD_INT 2
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41190: LD_ADDR_VAR 0 25
41194: PUSH
41195: LD_INT 0
41197: PUSH
41198: LD_INT 0
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 0
41207: PUSH
41208: LD_INT 1
41210: NEG
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 1
41218: PUSH
41219: LD_INT 0
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 1
41228: PUSH
41229: LD_INT 1
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 0
41238: PUSH
41239: LD_INT 1
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 1
41248: NEG
41249: PUSH
41250: LD_INT 0
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 1
41259: NEG
41260: PUSH
41261: LD_INT 1
41263: NEG
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 1
41271: NEG
41272: PUSH
41273: LD_INT 2
41275: NEG
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 0
41283: PUSH
41284: LD_INT 2
41286: NEG
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 1
41294: PUSH
41295: LD_INT 1
41297: NEG
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 2
41305: PUSH
41306: LD_INT 0
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 2
41315: PUSH
41316: LD_INT 1
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 2
41325: PUSH
41326: LD_INT 2
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 1
41335: PUSH
41336: LD_INT 2
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: LD_INT 0
41345: PUSH
41346: LD_INT 2
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 1
41355: NEG
41356: PUSH
41357: LD_INT 1
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 2
41366: NEG
41367: PUSH
41368: LD_INT 0
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 2
41377: NEG
41378: PUSH
41379: LD_INT 1
41381: NEG
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 2
41389: NEG
41390: PUSH
41391: LD_INT 2
41393: NEG
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 3
41401: PUSH
41402: LD_INT 1
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 3
41411: PUSH
41412: LD_INT 2
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 2
41421: PUSH
41422: LD_INT 3
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 1
41431: PUSH
41432: LD_INT 3
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41464: LD_ADDR_VAR 0 26
41468: PUSH
41469: LD_INT 0
41471: PUSH
41472: LD_INT 0
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 0
41481: PUSH
41482: LD_INT 1
41484: NEG
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 1
41492: PUSH
41493: LD_INT 0
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 1
41502: PUSH
41503: LD_INT 1
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 0
41512: PUSH
41513: LD_INT 1
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 1
41522: NEG
41523: PUSH
41524: LD_INT 0
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 1
41533: NEG
41534: PUSH
41535: LD_INT 1
41537: NEG
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 1
41545: NEG
41546: PUSH
41547: LD_INT 2
41549: NEG
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 0
41557: PUSH
41558: LD_INT 2
41560: NEG
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 1
41568: PUSH
41569: LD_INT 1
41571: NEG
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 2
41579: PUSH
41580: LD_INT 0
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 2
41589: PUSH
41590: LD_INT 1
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 2
41599: PUSH
41600: LD_INT 2
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 1
41609: PUSH
41610: LD_INT 2
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 0
41619: PUSH
41620: LD_INT 2
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 1
41629: NEG
41630: PUSH
41631: LD_INT 1
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 2
41640: NEG
41641: PUSH
41642: LD_INT 0
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 2
41651: NEG
41652: PUSH
41653: LD_INT 1
41655: NEG
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 2
41663: NEG
41664: PUSH
41665: LD_INT 2
41667: NEG
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 2
41675: PUSH
41676: LD_INT 3
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 1
41685: PUSH
41686: LD_INT 3
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 1
41695: NEG
41696: PUSH
41697: LD_INT 2
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 2
41706: NEG
41707: PUSH
41708: LD_INT 1
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41740: LD_ADDR_VAR 0 27
41744: PUSH
41745: LD_INT 0
41747: PUSH
41748: LD_INT 0
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 0
41757: PUSH
41758: LD_INT 1
41760: NEG
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 1
41768: PUSH
41769: LD_INT 0
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 1
41778: PUSH
41779: LD_INT 1
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 0
41788: PUSH
41789: LD_INT 1
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 1
41798: NEG
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 1
41809: NEG
41810: PUSH
41811: LD_INT 1
41813: NEG
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 1
41821: NEG
41822: PUSH
41823: LD_INT 2
41825: NEG
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 0
41833: PUSH
41834: LD_INT 2
41836: NEG
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 1
41844: PUSH
41845: LD_INT 1
41847: NEG
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 2
41855: PUSH
41856: LD_INT 0
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 2
41865: PUSH
41866: LD_INT 1
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 2
41875: PUSH
41876: LD_INT 2
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 1
41885: PUSH
41886: LD_INT 2
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 0
41895: PUSH
41896: LD_INT 2
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 1
41905: NEG
41906: PUSH
41907: LD_INT 1
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 2
41916: NEG
41917: PUSH
41918: LD_INT 0
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 2
41927: NEG
41928: PUSH
41929: LD_INT 1
41931: NEG
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 2
41939: NEG
41940: PUSH
41941: LD_INT 2
41943: NEG
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 1
41951: NEG
41952: PUSH
41953: LD_INT 2
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 2
41962: NEG
41963: PUSH
41964: LD_INT 1
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 3
41973: NEG
41974: PUSH
41975: LD_INT 1
41977: NEG
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 3
41985: NEG
41986: PUSH
41987: LD_INT 2
41989: NEG
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42020: LD_ADDR_VAR 0 28
42024: PUSH
42025: LD_INT 0
42027: PUSH
42028: LD_INT 0
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 0
42037: PUSH
42038: LD_INT 1
42040: NEG
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 1
42048: PUSH
42049: LD_INT 0
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 1
42058: PUSH
42059: LD_INT 1
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 0
42068: PUSH
42069: LD_INT 1
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 1
42078: NEG
42079: PUSH
42080: LD_INT 0
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 1
42089: NEG
42090: PUSH
42091: LD_INT 1
42093: NEG
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 1
42101: NEG
42102: PUSH
42103: LD_INT 2
42105: NEG
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 0
42113: PUSH
42114: LD_INT 2
42116: NEG
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 1
42124: PUSH
42125: LD_INT 1
42127: NEG
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 2
42135: PUSH
42136: LD_INT 0
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 2
42145: PUSH
42146: LD_INT 1
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 2
42155: PUSH
42156: LD_INT 2
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 1
42165: PUSH
42166: LD_INT 2
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 0
42175: PUSH
42176: LD_INT 2
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 1
42185: NEG
42186: PUSH
42187: LD_INT 1
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 2
42196: NEG
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 2
42207: NEG
42208: PUSH
42209: LD_INT 1
42211: NEG
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 2
42219: NEG
42220: PUSH
42221: LD_INT 2
42223: NEG
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 2
42231: NEG
42232: PUSH
42233: LD_INT 3
42235: NEG
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 1
42243: NEG
42244: PUSH
42245: LD_INT 3
42247: NEG
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 3
42255: NEG
42256: PUSH
42257: LD_INT 1
42259: NEG
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 3
42267: NEG
42268: PUSH
42269: LD_INT 2
42271: NEG
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42302: LD_ADDR_VAR 0 29
42306: PUSH
42307: LD_INT 0
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 0
42319: PUSH
42320: LD_INT 1
42322: NEG
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 1
42330: PUSH
42331: LD_INT 0
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 1
42340: PUSH
42341: LD_INT 1
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 0
42350: PUSH
42351: LD_INT 1
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 1
42360: NEG
42361: PUSH
42362: LD_INT 0
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 1
42371: NEG
42372: PUSH
42373: LD_INT 1
42375: NEG
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 1
42383: NEG
42384: PUSH
42385: LD_INT 2
42387: NEG
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 0
42395: PUSH
42396: LD_INT 2
42398: NEG
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 1
42406: PUSH
42407: LD_INT 1
42409: NEG
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 2
42417: PUSH
42418: LD_INT 0
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 2
42427: PUSH
42428: LD_INT 1
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 1
42437: PUSH
42438: LD_INT 2
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 0
42447: PUSH
42448: LD_INT 2
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 1
42457: NEG
42458: PUSH
42459: LD_INT 1
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 2
42468: NEG
42469: PUSH
42470: LD_INT 1
42472: NEG
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 2
42480: NEG
42481: PUSH
42482: LD_INT 2
42484: NEG
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 2
42492: NEG
42493: PUSH
42494: LD_INT 3
42496: NEG
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 2
42504: PUSH
42505: LD_INT 1
42507: NEG
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 3
42515: PUSH
42516: LD_INT 1
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 1
42525: PUSH
42526: LD_INT 3
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 1
42535: NEG
42536: PUSH
42537: LD_INT 2
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 3
42546: NEG
42547: PUSH
42548: LD_INT 2
42550: NEG
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42581: LD_ADDR_VAR 0 30
42585: PUSH
42586: LD_INT 0
42588: PUSH
42589: LD_INT 0
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 0
42598: PUSH
42599: LD_INT 1
42601: NEG
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 1
42609: PUSH
42610: LD_INT 0
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 1
42619: PUSH
42620: LD_INT 1
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 0
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 1
42639: NEG
42640: PUSH
42641: LD_INT 0
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 1
42650: NEG
42651: PUSH
42652: LD_INT 1
42654: NEG
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 1
42662: NEG
42663: PUSH
42664: LD_INT 2
42666: NEG
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 0
42674: PUSH
42675: LD_INT 2
42677: NEG
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 1
42685: PUSH
42686: LD_INT 1
42688: NEG
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 2
42696: PUSH
42697: LD_INT 0
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 2
42706: PUSH
42707: LD_INT 1
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 2
42716: PUSH
42717: LD_INT 2
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 1
42726: PUSH
42727: LD_INT 2
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 1
42736: NEG
42737: PUSH
42738: LD_INT 1
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 2
42747: NEG
42748: PUSH
42749: LD_INT 0
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 2
42758: NEG
42759: PUSH
42760: LD_INT 1
42762: NEG
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 1
42770: NEG
42771: PUSH
42772: LD_INT 3
42774: NEG
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 1
42782: PUSH
42783: LD_INT 2
42785: NEG
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 3
42793: PUSH
42794: LD_INT 2
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 2
42803: PUSH
42804: LD_INT 3
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 2
42813: NEG
42814: PUSH
42815: LD_INT 1
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 3
42824: NEG
42825: PUSH
42826: LD_INT 1
42828: NEG
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42859: LD_ADDR_VAR 0 31
42863: PUSH
42864: LD_INT 0
42866: PUSH
42867: LD_INT 0
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 0
42876: PUSH
42877: LD_INT 1
42879: NEG
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 1
42887: PUSH
42888: LD_INT 0
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 1
42897: PUSH
42898: LD_INT 1
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 0
42907: PUSH
42908: LD_INT 1
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 1
42917: NEG
42918: PUSH
42919: LD_INT 0
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 1
42928: NEG
42929: PUSH
42930: LD_INT 1
42932: NEG
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 1
42940: NEG
42941: PUSH
42942: LD_INT 2
42944: NEG
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 1
42952: PUSH
42953: LD_INT 1
42955: NEG
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 2
42963: PUSH
42964: LD_INT 0
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 2
42973: PUSH
42974: LD_INT 1
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 2
42983: PUSH
42984: LD_INT 2
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 1
42993: PUSH
42994: LD_INT 2
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 0
43003: PUSH
43004: LD_INT 2
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 1
43013: NEG
43014: PUSH
43015: LD_INT 1
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 2
43024: NEG
43025: PUSH
43026: LD_INT 1
43028: NEG
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 2
43036: NEG
43037: PUSH
43038: LD_INT 2
43040: NEG
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 2
43048: NEG
43049: PUSH
43050: LD_INT 3
43052: NEG
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 2
43060: PUSH
43061: LD_INT 1
43063: NEG
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 3
43071: PUSH
43072: LD_INT 1
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 1
43081: PUSH
43082: LD_INT 3
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 1
43091: NEG
43092: PUSH
43093: LD_INT 2
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 3
43102: NEG
43103: PUSH
43104: LD_INT 2
43106: NEG
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43137: LD_ADDR_VAR 0 32
43141: PUSH
43142: LD_INT 0
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 0
43154: PUSH
43155: LD_INT 1
43157: NEG
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 1
43165: PUSH
43166: LD_INT 0
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 1
43175: PUSH
43176: LD_INT 1
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: LD_INT 1
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 1
43195: NEG
43196: PUSH
43197: LD_INT 0
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 1
43206: NEG
43207: PUSH
43208: LD_INT 1
43210: NEG
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 1
43218: NEG
43219: PUSH
43220: LD_INT 2
43222: NEG
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 0
43230: PUSH
43231: LD_INT 2
43233: NEG
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 1
43241: PUSH
43242: LD_INT 1
43244: NEG
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 2
43252: PUSH
43253: LD_INT 1
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 2
43262: PUSH
43263: LD_INT 2
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 1
43272: PUSH
43273: LD_INT 2
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 0
43282: PUSH
43283: LD_INT 2
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 1
43292: NEG
43293: PUSH
43294: LD_INT 1
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 2
43303: NEG
43304: PUSH
43305: LD_INT 0
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 2
43314: NEG
43315: PUSH
43316: LD_INT 1
43318: NEG
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: NEG
43327: PUSH
43328: LD_INT 3
43330: NEG
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 1
43338: PUSH
43339: LD_INT 2
43341: NEG
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 3
43349: PUSH
43350: LD_INT 2
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 2
43359: PUSH
43360: LD_INT 3
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 2
43369: NEG
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 3
43380: NEG
43381: PUSH
43382: LD_INT 1
43384: NEG
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43415: LD_ADDR_VAR 0 33
43419: PUSH
43420: LD_INT 0
43422: PUSH
43423: LD_INT 0
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 0
43432: PUSH
43433: LD_INT 1
43435: NEG
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 1
43443: PUSH
43444: LD_INT 0
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 1
43453: PUSH
43454: LD_INT 1
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 0
43463: PUSH
43464: LD_INT 1
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 1
43473: NEG
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 1
43484: NEG
43485: PUSH
43486: LD_INT 1
43488: NEG
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 1
43496: NEG
43497: PUSH
43498: LD_INT 2
43500: NEG
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 1
43508: PUSH
43509: LD_INT 1
43511: NEG
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 2
43519: PUSH
43520: LD_INT 0
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 2
43529: PUSH
43530: LD_INT 1
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 1
43539: PUSH
43540: LD_INT 2
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 0
43549: PUSH
43550: LD_INT 2
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 1
43559: NEG
43560: PUSH
43561: LD_INT 1
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 2
43570: NEG
43571: PUSH
43572: LD_INT 0
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 2
43581: NEG
43582: PUSH
43583: LD_INT 1
43585: NEG
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 2
43593: NEG
43594: PUSH
43595: LD_INT 2
43597: NEG
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 2
43605: NEG
43606: PUSH
43607: LD_INT 3
43609: NEG
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 2
43617: PUSH
43618: LD_INT 1
43620: NEG
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 3
43628: PUSH
43629: LD_INT 1
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 1
43638: PUSH
43639: LD_INT 3
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 1
43648: NEG
43649: PUSH
43650: LD_INT 2
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 3
43659: NEG
43660: PUSH
43661: LD_INT 2
43663: NEG
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43694: LD_ADDR_VAR 0 34
43698: PUSH
43699: LD_INT 0
43701: PUSH
43702: LD_INT 0
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 0
43711: PUSH
43712: LD_INT 1
43714: NEG
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 1
43722: PUSH
43723: LD_INT 0
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 1
43732: PUSH
43733: LD_INT 1
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 0
43742: PUSH
43743: LD_INT 1
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 1
43752: NEG
43753: PUSH
43754: LD_INT 0
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 1
43763: NEG
43764: PUSH
43765: LD_INT 1
43767: NEG
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 1
43775: NEG
43776: PUSH
43777: LD_INT 2
43779: NEG
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 0
43787: PUSH
43788: LD_INT 2
43790: NEG
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 1
43798: PUSH
43799: LD_INT 1
43801: NEG
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 2
43809: PUSH
43810: LD_INT 1
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 2
43819: PUSH
43820: LD_INT 2
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 1
43829: PUSH
43830: LD_INT 2
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 1
43839: NEG
43840: PUSH
43841: LD_INT 1
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 2
43850: NEG
43851: PUSH
43852: LD_INT 0
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 2
43861: NEG
43862: PUSH
43863: LD_INT 1
43865: NEG
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 2
43873: NEG
43874: PUSH
43875: LD_INT 2
43877: NEG
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 1
43885: NEG
43886: PUSH
43887: LD_INT 3
43889: NEG
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 1
43897: PUSH
43898: LD_INT 2
43900: NEG
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 3
43908: PUSH
43909: LD_INT 2
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 2
43918: PUSH
43919: LD_INT 3
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 2
43928: NEG
43929: PUSH
43930: LD_INT 1
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 3
43939: NEG
43940: PUSH
43941: LD_INT 1
43943: NEG
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43974: LD_ADDR_VAR 0 35
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: LD_INT 0
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 0
43991: PUSH
43992: LD_INT 1
43994: NEG
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: LD_INT 0
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 1
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 0
44022: PUSH
44023: LD_INT 1
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 1
44032: NEG
44033: PUSH
44034: LD_INT 0
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 1
44043: NEG
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 2
44055: PUSH
44056: LD_INT 1
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 2
44065: NEG
44066: PUSH
44067: LD_INT 1
44069: NEG
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44086: LD_ADDR_VAR 0 36
44090: PUSH
44091: LD_INT 0
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: LD_INT 1
44106: NEG
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 1
44114: PUSH
44115: LD_INT 0
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 1
44124: PUSH
44125: LD_INT 1
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 0
44134: PUSH
44135: LD_INT 1
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 1
44144: NEG
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 1
44155: NEG
44156: PUSH
44157: LD_INT 1
44159: NEG
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 1
44167: NEG
44168: PUSH
44169: LD_INT 2
44171: NEG
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 1
44179: PUSH
44180: LD_INT 2
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44198: LD_ADDR_VAR 0 37
44202: PUSH
44203: LD_INT 0
44205: PUSH
44206: LD_INT 0
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 0
44215: PUSH
44216: LD_INT 1
44218: NEG
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 1
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 1
44236: PUSH
44237: LD_INT 1
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 0
44246: PUSH
44247: LD_INT 1
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 1
44256: NEG
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 1
44267: NEG
44268: PUSH
44269: LD_INT 1
44271: NEG
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 1
44279: PUSH
44280: LD_INT 1
44282: NEG
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 1
44290: NEG
44291: PUSH
44292: LD_INT 1
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44310: LD_ADDR_VAR 0 38
44314: PUSH
44315: LD_INT 0
44317: PUSH
44318: LD_INT 0
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 0
44327: PUSH
44328: LD_INT 1
44330: NEG
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 1
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 1
44348: PUSH
44349: LD_INT 1
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 0
44358: PUSH
44359: LD_INT 1
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 1
44368: NEG
44369: PUSH
44370: LD_INT 0
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: LD_INT 1
44383: NEG
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 2
44391: PUSH
44392: LD_INT 1
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 2
44401: NEG
44402: PUSH
44403: LD_INT 1
44405: NEG
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44422: LD_ADDR_VAR 0 39
44426: PUSH
44427: LD_INT 0
44429: PUSH
44430: LD_INT 0
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 0
44439: PUSH
44440: LD_INT 1
44442: NEG
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 1
44450: PUSH
44451: LD_INT 0
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 1
44460: PUSH
44461: LD_INT 1
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 0
44470: PUSH
44471: LD_INT 1
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 1
44480: NEG
44481: PUSH
44482: LD_INT 0
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 1
44491: NEG
44492: PUSH
44493: LD_INT 1
44495: NEG
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 1
44503: NEG
44504: PUSH
44505: LD_INT 2
44507: NEG
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 1
44515: PUSH
44516: LD_INT 2
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44534: LD_ADDR_VAR 0 40
44538: PUSH
44539: LD_INT 0
44541: PUSH
44542: LD_INT 0
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 0
44551: PUSH
44552: LD_INT 1
44554: NEG
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 1
44562: PUSH
44563: LD_INT 0
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 1
44572: PUSH
44573: LD_INT 1
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 0
44582: PUSH
44583: LD_INT 1
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 1
44592: NEG
44593: PUSH
44594: LD_INT 0
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 1
44603: NEG
44604: PUSH
44605: LD_INT 1
44607: NEG
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: LD_INT 1
44618: NEG
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 1
44626: NEG
44627: PUSH
44628: LD_INT 1
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44646: LD_ADDR_VAR 0 41
44650: PUSH
44651: LD_INT 0
44653: PUSH
44654: LD_INT 0
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 0
44663: PUSH
44664: LD_INT 1
44666: NEG
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 1
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 1
44684: PUSH
44685: LD_INT 1
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: LD_INT 1
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 1
44704: NEG
44705: PUSH
44706: LD_INT 0
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 1
44715: NEG
44716: PUSH
44717: LD_INT 1
44719: NEG
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 1
44727: NEG
44728: PUSH
44729: LD_INT 2
44731: NEG
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 1
44739: PUSH
44740: LD_INT 1
44742: NEG
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 2
44750: PUSH
44751: LD_INT 0
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 2
44760: PUSH
44761: LD_INT 1
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 2
44770: PUSH
44771: LD_INT 2
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: LD_INT 2
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 1
44790: NEG
44791: PUSH
44792: LD_INT 1
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 2
44801: NEG
44802: PUSH
44803: LD_INT 0
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 2
44812: NEG
44813: PUSH
44814: LD_INT 1
44816: NEG
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 2
44824: NEG
44825: PUSH
44826: LD_INT 2
44828: NEG
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 2
44836: NEG
44837: PUSH
44838: LD_INT 3
44840: NEG
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 2
44848: PUSH
44849: LD_INT 1
44851: NEG
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 3
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 3
44869: PUSH
44870: LD_INT 1
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 3
44879: PUSH
44880: LD_INT 2
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 3
44889: PUSH
44890: LD_INT 3
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 2
44899: PUSH
44900: LD_INT 3
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 2
44909: NEG
44910: PUSH
44911: LD_INT 1
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 3
44920: NEG
44921: PUSH
44922: LD_INT 0
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 3
44931: NEG
44932: PUSH
44933: LD_INT 1
44935: NEG
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 3
44943: NEG
44944: PUSH
44945: LD_INT 2
44947: NEG
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 3
44955: NEG
44956: PUSH
44957: LD_INT 3
44959: NEG
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44996: LD_ADDR_VAR 0 42
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: LD_INT 0
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 0
45013: PUSH
45014: LD_INT 1
45016: NEG
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 1
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 1
45034: PUSH
45035: LD_INT 1
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 0
45044: PUSH
45045: LD_INT 1
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 1
45054: NEG
45055: PUSH
45056: LD_INT 0
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 1
45065: NEG
45066: PUSH
45067: LD_INT 1
45069: NEG
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 1
45077: NEG
45078: PUSH
45079: LD_INT 2
45081: NEG
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 0
45089: PUSH
45090: LD_INT 2
45092: NEG
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 1
45100: PUSH
45101: LD_INT 1
45103: NEG
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 2
45111: PUSH
45112: LD_INT 1
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 2
45121: PUSH
45122: LD_INT 2
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 1
45131: PUSH
45132: LD_INT 2
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: LD_INT 2
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 1
45151: NEG
45152: PUSH
45153: LD_INT 1
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 2
45162: NEG
45163: PUSH
45164: LD_INT 1
45166: NEG
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 2
45174: NEG
45175: PUSH
45176: LD_INT 2
45178: NEG
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 2
45186: NEG
45187: PUSH
45188: LD_INT 3
45190: NEG
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 1
45198: NEG
45199: PUSH
45200: LD_INT 3
45202: NEG
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 0
45210: PUSH
45211: LD_INT 3
45213: NEG
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 1
45221: PUSH
45222: LD_INT 2
45224: NEG
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 3
45232: PUSH
45233: LD_INT 2
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 3
45242: PUSH
45243: LD_INT 3
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 2
45252: PUSH
45253: LD_INT 3
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 1
45262: PUSH
45263: LD_INT 3
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: LD_INT 3
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 1
45282: NEG
45283: PUSH
45284: LD_INT 2
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 3
45293: NEG
45294: PUSH
45295: LD_INT 2
45297: NEG
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 3
45305: NEG
45306: PUSH
45307: LD_INT 3
45309: NEG
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45346: LD_ADDR_VAR 0 43
45350: PUSH
45351: LD_INT 0
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 1
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 1
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: LD_INT 1
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: LD_INT 0
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 1
45415: NEG
45416: PUSH
45417: LD_INT 1
45419: NEG
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 1
45427: NEG
45428: PUSH
45429: LD_INT 2
45431: NEG
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: LD_INT 2
45442: NEG
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 1
45450: PUSH
45451: LD_INT 1
45453: NEG
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 2
45461: PUSH
45462: LD_INT 0
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 2
45471: PUSH
45472: LD_INT 1
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 1
45481: PUSH
45482: LD_INT 2
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 0
45491: PUSH
45492: LD_INT 2
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 1
45501: NEG
45502: PUSH
45503: LD_INT 1
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 2
45512: NEG
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 2
45523: NEG
45524: PUSH
45525: LD_INT 1
45527: NEG
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 1
45535: NEG
45536: PUSH
45537: LD_INT 3
45539: NEG
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 0
45547: PUSH
45548: LD_INT 3
45550: NEG
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 1
45558: PUSH
45559: LD_INT 2
45561: NEG
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 2
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 3
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 3
45590: PUSH
45591: LD_INT 1
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 1
45600: PUSH
45601: LD_INT 3
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 0
45610: PUSH
45611: LD_INT 3
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 1
45620: NEG
45621: PUSH
45622: LD_INT 2
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 2
45631: NEG
45632: PUSH
45633: LD_INT 1
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 3
45642: NEG
45643: PUSH
45644: LD_INT 0
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 3
45653: NEG
45654: PUSH
45655: LD_INT 1
45657: NEG
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45694: LD_ADDR_VAR 0 44
45698: PUSH
45699: LD_INT 0
45701: PUSH
45702: LD_INT 0
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 0
45711: PUSH
45712: LD_INT 1
45714: NEG
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: LD_INT 0
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 1
45732: PUSH
45733: LD_INT 1
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 0
45742: PUSH
45743: LD_INT 1
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 1
45752: NEG
45753: PUSH
45754: LD_INT 0
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 1
45763: NEG
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 1
45775: NEG
45776: PUSH
45777: LD_INT 2
45779: NEG
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 1
45787: PUSH
45788: LD_INT 1
45790: NEG
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 2
45798: PUSH
45799: LD_INT 0
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 2
45808: PUSH
45809: LD_INT 1
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 2
45818: PUSH
45819: LD_INT 2
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 1
45828: PUSH
45829: LD_INT 2
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 1
45838: NEG
45839: PUSH
45840: LD_INT 1
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 2
45849: NEG
45850: PUSH
45851: LD_INT 0
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 2
45860: NEG
45861: PUSH
45862: LD_INT 1
45864: NEG
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 2
45872: NEG
45873: PUSH
45874: LD_INT 2
45876: NEG
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 2
45884: NEG
45885: PUSH
45886: LD_INT 3
45888: NEG
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 2
45896: PUSH
45897: LD_INT 1
45899: NEG
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 3
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 3
45917: PUSH
45918: LD_INT 1
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 3
45927: PUSH
45928: LD_INT 2
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 3
45937: PUSH
45938: LD_INT 3
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 2
45947: PUSH
45948: LD_INT 3
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 2
45957: NEG
45958: PUSH
45959: LD_INT 1
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 3
45968: NEG
45969: PUSH
45970: LD_INT 0
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 3
45979: NEG
45980: PUSH
45981: LD_INT 1
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 3
45991: NEG
45992: PUSH
45993: LD_INT 2
45995: NEG
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 3
46003: NEG
46004: PUSH
46005: LD_INT 3
46007: NEG
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46044: LD_ADDR_VAR 0 45
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: LD_INT 1
46064: NEG
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 1
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 1
46082: PUSH
46083: LD_INT 1
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 0
46092: PUSH
46093: LD_INT 1
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 1
46102: NEG
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 1
46113: NEG
46114: PUSH
46115: LD_INT 1
46117: NEG
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 1
46125: NEG
46126: PUSH
46127: LD_INT 2
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: LD_INT 2
46140: NEG
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 1
46148: PUSH
46149: LD_INT 1
46151: NEG
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 2
46159: PUSH
46160: LD_INT 1
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 2
46169: PUSH
46170: LD_INT 2
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 1
46179: PUSH
46180: LD_INT 2
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 0
46189: PUSH
46190: LD_INT 2
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 1
46199: NEG
46200: PUSH
46201: LD_INT 1
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 2
46210: NEG
46211: PUSH
46212: LD_INT 1
46214: NEG
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 2
46222: NEG
46223: PUSH
46224: LD_INT 2
46226: NEG
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 2
46234: NEG
46235: PUSH
46236: LD_INT 3
46238: NEG
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: NEG
46247: PUSH
46248: LD_INT 3
46250: NEG
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 0
46258: PUSH
46259: LD_INT 3
46261: NEG
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: LD_INT 2
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 3
46280: PUSH
46281: LD_INT 2
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 3
46290: PUSH
46291: LD_INT 3
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 2
46300: PUSH
46301: LD_INT 3
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 1
46310: PUSH
46311: LD_INT 3
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 0
46320: PUSH
46321: LD_INT 3
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 1
46330: NEG
46331: PUSH
46332: LD_INT 2
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 3
46341: NEG
46342: PUSH
46343: LD_INT 2
46345: NEG
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 3
46353: NEG
46354: PUSH
46355: LD_INT 3
46357: NEG
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46394: LD_ADDR_VAR 0 46
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 0
46411: PUSH
46412: LD_INT 1
46414: NEG
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: PUSH
46423: LD_INT 0
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 1
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 0
46442: PUSH
46443: LD_INT 1
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 1
46452: NEG
46453: PUSH
46454: LD_INT 0
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 1
46463: NEG
46464: PUSH
46465: LD_INT 1
46467: NEG
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 1
46475: NEG
46476: PUSH
46477: LD_INT 2
46479: NEG
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: LD_INT 2
46490: NEG
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 1
46498: PUSH
46499: LD_INT 1
46501: NEG
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 2
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 2
46519: PUSH
46520: LD_INT 1
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 1
46529: PUSH
46530: LD_INT 2
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: LD_INT 2
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 1
46549: NEG
46550: PUSH
46551: LD_INT 1
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 2
46560: NEG
46561: PUSH
46562: LD_INT 0
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 2
46571: NEG
46572: PUSH
46573: LD_INT 1
46575: NEG
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 1
46583: NEG
46584: PUSH
46585: LD_INT 3
46587: NEG
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 0
46595: PUSH
46596: LD_INT 3
46598: NEG
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 1
46606: PUSH
46607: LD_INT 2
46609: NEG
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 2
46617: PUSH
46618: LD_INT 1
46620: NEG
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 3
46628: PUSH
46629: LD_INT 0
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 3
46638: PUSH
46639: LD_INT 1
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 1
46648: PUSH
46649: LD_INT 3
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 0
46658: PUSH
46659: LD_INT 3
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: LD_INT 2
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 2
46679: NEG
46680: PUSH
46681: LD_INT 1
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 3
46690: NEG
46691: PUSH
46692: LD_INT 0
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 3
46701: NEG
46702: PUSH
46703: LD_INT 1
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46742: LD_ADDR_VAR 0 47
46746: PUSH
46747: LD_INT 0
46749: PUSH
46750: LD_INT 0
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: LD_INT 1
46762: NEG
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 1
46770: PUSH
46771: LD_INT 0
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 1
46780: PUSH
46781: LD_INT 1
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: LD_INT 1
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 1
46800: NEG
46801: PUSH
46802: LD_INT 0
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 1
46811: NEG
46812: PUSH
46813: LD_INT 1
46815: NEG
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: NEG
46824: PUSH
46825: LD_INT 2
46827: NEG
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 0
46835: PUSH
46836: LD_INT 2
46838: NEG
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 1
46846: PUSH
46847: LD_INT 1
46849: NEG
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 2
46857: NEG
46858: PUSH
46859: LD_INT 1
46861: NEG
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 2
46869: NEG
46870: PUSH
46871: LD_INT 2
46873: NEG
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46893: LD_ADDR_VAR 0 48
46897: PUSH
46898: LD_INT 0
46900: PUSH
46901: LD_INT 0
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 1
46921: PUSH
46922: LD_INT 0
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 1
46931: PUSH
46932: LD_INT 1
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 0
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 1
46951: NEG
46952: PUSH
46953: LD_INT 0
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 1
46962: NEG
46963: PUSH
46964: LD_INT 1
46966: NEG
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 1
46974: NEG
46975: PUSH
46976: LD_INT 2
46978: NEG
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: LD_INT 2
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: LD_INT 1
47000: NEG
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 2
47008: PUSH
47009: LD_INT 0
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 2
47018: PUSH
47019: LD_INT 1
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47040: LD_ADDR_VAR 0 49
47044: PUSH
47045: LD_INT 0
47047: PUSH
47048: LD_INT 0
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: LD_INT 1
47060: NEG
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 1
47068: PUSH
47069: LD_INT 0
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 1
47078: PUSH
47079: LD_INT 1
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: LD_INT 1
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 1
47098: NEG
47099: PUSH
47100: LD_INT 0
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 1
47109: NEG
47110: PUSH
47111: LD_INT 1
47113: NEG
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: LD_INT 1
47124: NEG
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 2
47132: PUSH
47133: LD_INT 0
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 2
47142: PUSH
47143: LD_INT 1
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 2
47152: PUSH
47153: LD_INT 2
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 1
47162: PUSH
47163: LD_INT 2
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47184: LD_ADDR_VAR 0 50
47188: PUSH
47189: LD_INT 0
47191: PUSH
47192: LD_INT 0
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: LD_INT 1
47204: NEG
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 1
47212: PUSH
47213: LD_INT 0
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 1
47222: PUSH
47223: LD_INT 1
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 0
47232: PUSH
47233: LD_INT 1
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 1
47242: NEG
47243: PUSH
47244: LD_INT 0
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: NEG
47254: PUSH
47255: LD_INT 1
47257: NEG
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 2
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 2
47275: PUSH
47276: LD_INT 2
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 1
47285: PUSH
47286: LD_INT 2
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 0
47295: PUSH
47296: LD_INT 2
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 1
47305: NEG
47306: PUSH
47307: LD_INT 1
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47328: LD_ADDR_VAR 0 51
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: LD_INT 0
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: LD_INT 1
47348: NEG
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 1
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 1
47366: PUSH
47367: LD_INT 1
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 0
47376: PUSH
47377: LD_INT 1
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 1
47386: NEG
47387: PUSH
47388: LD_INT 0
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: NEG
47398: PUSH
47399: LD_INT 1
47401: NEG
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 1
47409: PUSH
47410: LD_INT 2
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 0
47419: PUSH
47420: LD_INT 2
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 1
47429: NEG
47430: PUSH
47431: LD_INT 1
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 2
47440: NEG
47441: PUSH
47442: LD_INT 0
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 2
47451: NEG
47452: PUSH
47453: LD_INT 1
47455: NEG
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47475: LD_ADDR_VAR 0 52
47479: PUSH
47480: LD_INT 0
47482: PUSH
47483: LD_INT 0
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 1
47503: PUSH
47504: LD_INT 0
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 1
47513: PUSH
47514: LD_INT 1
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: LD_INT 1
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: LD_INT 0
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 1
47544: NEG
47545: PUSH
47546: LD_INT 1
47548: NEG
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: LD_INT 2
47560: NEG
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 1
47568: NEG
47569: PUSH
47570: LD_INT 1
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 2
47579: NEG
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 2
47590: NEG
47591: PUSH
47592: LD_INT 1
47594: NEG
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 2
47602: NEG
47603: PUSH
47604: LD_INT 2
47606: NEG
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47626: LD_ADDR_VAR 0 53
47630: PUSH
47631: LD_INT 0
47633: PUSH
47634: LD_INT 0
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 0
47643: PUSH
47644: LD_INT 1
47646: NEG
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 1
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 1
47664: PUSH
47665: LD_INT 1
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 0
47674: PUSH
47675: LD_INT 1
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 1
47684: NEG
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 1
47695: NEG
47696: PUSH
47697: LD_INT 1
47699: NEG
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 1
47707: NEG
47708: PUSH
47709: LD_INT 2
47711: NEG
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 0
47719: PUSH
47720: LD_INT 2
47722: NEG
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 1
47730: PUSH
47731: LD_INT 1
47733: NEG
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 2
47741: PUSH
47742: LD_INT 0
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 2
47751: PUSH
47752: LD_INT 1
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 2
47761: PUSH
47762: LD_INT 2
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 1
47771: PUSH
47772: LD_INT 2
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 0
47781: PUSH
47782: LD_INT 2
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 1
47791: NEG
47792: PUSH
47793: LD_INT 1
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 2
47802: NEG
47803: PUSH
47804: LD_INT 0
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 2
47813: NEG
47814: PUSH
47815: LD_INT 1
47817: NEG
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 2
47825: NEG
47826: PUSH
47827: LD_INT 2
47829: NEG
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47856: LD_ADDR_VAR 0 54
47860: PUSH
47861: LD_INT 0
47863: PUSH
47864: LD_INT 0
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 0
47873: PUSH
47874: LD_INT 1
47876: NEG
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 1
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 1
47894: PUSH
47895: LD_INT 1
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 0
47904: PUSH
47905: LD_INT 1
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 1
47914: NEG
47915: PUSH
47916: LD_INT 0
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 1
47925: NEG
47926: PUSH
47927: LD_INT 1
47929: NEG
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 1
47937: NEG
47938: PUSH
47939: LD_INT 2
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 0
47949: PUSH
47950: LD_INT 2
47952: NEG
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 1
47960: PUSH
47961: LD_INT 1
47963: NEG
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 2
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 2
47981: PUSH
47982: LD_INT 1
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 2
47991: PUSH
47992: LD_INT 2
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 1
48001: PUSH
48002: LD_INT 2
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 0
48011: PUSH
48012: LD_INT 2
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 1
48021: NEG
48022: PUSH
48023: LD_INT 1
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 2
48032: NEG
48033: PUSH
48034: LD_INT 0
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 2
48043: NEG
48044: PUSH
48045: LD_INT 1
48047: NEG
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 2
48055: NEG
48056: PUSH
48057: LD_INT 2
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48086: LD_ADDR_VAR 0 55
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: LD_INT 0
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: LD_INT 1
48106: NEG
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 1
48124: PUSH
48125: LD_INT 1
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 0
48134: PUSH
48135: LD_INT 1
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 1
48144: NEG
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 1
48155: NEG
48156: PUSH
48157: LD_INT 1
48159: NEG
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 1
48167: NEG
48168: PUSH
48169: LD_INT 2
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: LD_INT 2
48182: NEG
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 1
48190: PUSH
48191: LD_INT 1
48193: NEG
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 2
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 2
48211: PUSH
48212: LD_INT 1
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 2
48221: PUSH
48222: LD_INT 2
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 1
48231: PUSH
48232: LD_INT 2
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 0
48241: PUSH
48242: LD_INT 2
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 1
48251: NEG
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 2
48262: NEG
48263: PUSH
48264: LD_INT 0
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 2
48273: NEG
48274: PUSH
48275: LD_INT 1
48277: NEG
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 2
48285: NEG
48286: PUSH
48287: LD_INT 2
48289: NEG
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48316: LD_ADDR_VAR 0 56
48320: PUSH
48321: LD_INT 0
48323: PUSH
48324: LD_INT 0
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 0
48333: PUSH
48334: LD_INT 1
48336: NEG
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 1
48344: PUSH
48345: LD_INT 0
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 1
48354: PUSH
48355: LD_INT 1
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 0
48364: PUSH
48365: LD_INT 1
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 1
48374: NEG
48375: PUSH
48376: LD_INT 0
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 1
48385: NEG
48386: PUSH
48387: LD_INT 1
48389: NEG
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 1
48397: NEG
48398: PUSH
48399: LD_INT 2
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 0
48409: PUSH
48410: LD_INT 2
48412: NEG
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 1
48420: PUSH
48421: LD_INT 1
48423: NEG
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 2
48431: PUSH
48432: LD_INT 0
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 2
48441: PUSH
48442: LD_INT 1
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 2
48451: PUSH
48452: LD_INT 2
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 1
48461: PUSH
48462: LD_INT 2
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: LD_INT 2
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 1
48481: NEG
48482: PUSH
48483: LD_INT 1
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 2
48492: NEG
48493: PUSH
48494: LD_INT 0
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 2
48503: NEG
48504: PUSH
48505: LD_INT 1
48507: NEG
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 2
48515: NEG
48516: PUSH
48517: LD_INT 2
48519: NEG
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48546: LD_ADDR_VAR 0 57
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: LD_INT 0
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 0
48563: PUSH
48564: LD_INT 1
48566: NEG
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 1
48574: PUSH
48575: LD_INT 0
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 1
48584: PUSH
48585: LD_INT 1
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 0
48594: PUSH
48595: LD_INT 1
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 1
48604: NEG
48605: PUSH
48606: LD_INT 0
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: LD_INT 1
48619: NEG
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 1
48627: NEG
48628: PUSH
48629: LD_INT 2
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 0
48639: PUSH
48640: LD_INT 2
48642: NEG
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: LD_INT 1
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 2
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 2
48671: PUSH
48672: LD_INT 1
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 2
48681: PUSH
48682: LD_INT 2
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 1
48691: PUSH
48692: LD_INT 2
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 0
48701: PUSH
48702: LD_INT 2
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 1
48711: NEG
48712: PUSH
48713: LD_INT 1
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 2
48722: NEG
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 2
48733: NEG
48734: PUSH
48735: LD_INT 1
48737: NEG
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 2
48745: NEG
48746: PUSH
48747: LD_INT 2
48749: NEG
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48776: LD_ADDR_VAR 0 58
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: LD_INT 0
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 0
48793: PUSH
48794: LD_INT 1
48796: NEG
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 1
48804: PUSH
48805: LD_INT 0
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 0
48824: PUSH
48825: LD_INT 1
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 1
48834: NEG
48835: PUSH
48836: LD_INT 0
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 1
48845: NEG
48846: PUSH
48847: LD_INT 1
48849: NEG
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 1
48857: NEG
48858: PUSH
48859: LD_INT 2
48861: NEG
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: LD_INT 2
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: LD_INT 1
48883: NEG
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 2
48891: PUSH
48892: LD_INT 0
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 2
48901: PUSH
48902: LD_INT 1
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 2
48911: PUSH
48912: LD_INT 2
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: PUSH
48922: LD_INT 2
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 0
48931: PUSH
48932: LD_INT 2
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 1
48941: NEG
48942: PUSH
48943: LD_INT 1
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 2
48952: NEG
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 2
48963: NEG
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 2
48975: NEG
48976: PUSH
48977: LD_INT 2
48979: NEG
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49006: LD_ADDR_VAR 0 59
49010: PUSH
49011: LD_INT 0
49013: PUSH
49014: LD_INT 0
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 0
49023: PUSH
49024: LD_INT 1
49026: NEG
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 1
49034: PUSH
49035: LD_INT 0
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 1
49044: PUSH
49045: LD_INT 1
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 0
49054: PUSH
49055: LD_INT 1
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 1
49064: NEG
49065: PUSH
49066: LD_INT 0
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 1
49075: NEG
49076: PUSH
49077: LD_INT 1
49079: NEG
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49094: LD_ADDR_VAR 0 60
49098: PUSH
49099: LD_INT 0
49101: PUSH
49102: LD_INT 0
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 0
49111: PUSH
49112: LD_INT 1
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 1
49122: PUSH
49123: LD_INT 0
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 1
49132: PUSH
49133: LD_INT 1
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 0
49142: PUSH
49143: LD_INT 1
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: NEG
49153: PUSH
49154: LD_INT 0
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 1
49163: NEG
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49182: LD_ADDR_VAR 0 61
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 0
49199: PUSH
49200: LD_INT 1
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: LD_INT 0
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 1
49220: PUSH
49221: LD_INT 1
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 0
49230: PUSH
49231: LD_INT 1
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 1
49240: NEG
49241: PUSH
49242: LD_INT 0
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 1
49251: NEG
49252: PUSH
49253: LD_INT 1
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49270: LD_ADDR_VAR 0 62
49274: PUSH
49275: LD_INT 0
49277: PUSH
49278: LD_INT 0
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 0
49287: PUSH
49288: LD_INT 1
49290: NEG
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 1
49298: PUSH
49299: LD_INT 0
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 0
49318: PUSH
49319: LD_INT 1
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 1
49328: NEG
49329: PUSH
49330: LD_INT 0
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: LD_INT 1
49343: NEG
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49358: LD_ADDR_VAR 0 63
49362: PUSH
49363: LD_INT 0
49365: PUSH
49366: LD_INT 0
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 0
49375: PUSH
49376: LD_INT 1
49378: NEG
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 1
49386: PUSH
49387: LD_INT 0
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 1
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 1
49416: NEG
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 1
49427: NEG
49428: PUSH
49429: LD_INT 1
49431: NEG
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49446: LD_ADDR_VAR 0 64
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: LD_INT 1
49466: NEG
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 1
49474: PUSH
49475: LD_INT 0
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 1
49484: PUSH
49485: LD_INT 1
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: LD_INT 1
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 1
49504: NEG
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 1
49515: NEG
49516: PUSH
49517: LD_INT 1
49519: NEG
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: ST_TO_ADDR
// end ; 1 :
49534: GO 55431
49536: LD_INT 1
49538: DOUBLE
49539: EQUAL
49540: IFTRUE 49544
49542: GO 52167
49544: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49545: LD_ADDR_VAR 0 11
49549: PUSH
49550: LD_INT 1
49552: NEG
49553: PUSH
49554: LD_INT 3
49556: NEG
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 0
49564: PUSH
49565: LD_INT 3
49567: NEG
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 1
49575: PUSH
49576: LD_INT 2
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: LIST
49588: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49589: LD_ADDR_VAR 0 12
49593: PUSH
49594: LD_INT 2
49596: PUSH
49597: LD_INT 1
49599: NEG
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 3
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 3
49617: PUSH
49618: LD_INT 1
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: LIST
49629: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49630: LD_ADDR_VAR 0 13
49634: PUSH
49635: LD_INT 3
49637: PUSH
49638: LD_INT 2
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 3
49647: PUSH
49648: LD_INT 3
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 2
49657: PUSH
49658: LD_INT 3
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: LIST
49669: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49670: LD_ADDR_VAR 0 14
49674: PUSH
49675: LD_INT 1
49677: PUSH
49678: LD_INT 3
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 0
49687: PUSH
49688: LD_INT 3
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 1
49697: NEG
49698: PUSH
49699: LD_INT 2
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: LIST
49710: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49711: LD_ADDR_VAR 0 15
49715: PUSH
49716: LD_INT 2
49718: NEG
49719: PUSH
49720: LD_INT 1
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 3
49729: NEG
49730: PUSH
49731: LD_INT 0
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 3
49740: NEG
49741: PUSH
49742: LD_INT 1
49744: NEG
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: LIST
49754: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49755: LD_ADDR_VAR 0 16
49759: PUSH
49760: LD_INT 2
49762: NEG
49763: PUSH
49764: LD_INT 3
49766: NEG
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 3
49774: NEG
49775: PUSH
49776: LD_INT 2
49778: NEG
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 3
49786: NEG
49787: PUSH
49788: LD_INT 3
49790: NEG
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: LIST
49800: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49801: LD_ADDR_VAR 0 17
49805: PUSH
49806: LD_INT 1
49808: NEG
49809: PUSH
49810: LD_INT 3
49812: NEG
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 0
49820: PUSH
49821: LD_INT 3
49823: NEG
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 1
49831: PUSH
49832: LD_INT 2
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: LIST
49844: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49845: LD_ADDR_VAR 0 18
49849: PUSH
49850: LD_INT 2
49852: PUSH
49853: LD_INT 1
49855: NEG
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 3
49863: PUSH
49864: LD_INT 0
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 3
49873: PUSH
49874: LD_INT 1
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: LIST
49885: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49886: LD_ADDR_VAR 0 19
49890: PUSH
49891: LD_INT 3
49893: PUSH
49894: LD_INT 2
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 3
49903: PUSH
49904: LD_INT 3
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 2
49913: PUSH
49914: LD_INT 3
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: LIST
49925: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49926: LD_ADDR_VAR 0 20
49930: PUSH
49931: LD_INT 1
49933: PUSH
49934: LD_INT 3
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 0
49943: PUSH
49944: LD_INT 3
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: LD_INT 2
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: LIST
49966: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49967: LD_ADDR_VAR 0 21
49971: PUSH
49972: LD_INT 2
49974: NEG
49975: PUSH
49976: LD_INT 1
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 3
49985: NEG
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 3
49996: NEG
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: LIST
50010: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50011: LD_ADDR_VAR 0 22
50015: PUSH
50016: LD_INT 2
50018: NEG
50019: PUSH
50020: LD_INT 3
50022: NEG
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 3
50030: NEG
50031: PUSH
50032: LD_INT 2
50034: NEG
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 3
50042: NEG
50043: PUSH
50044: LD_INT 3
50046: NEG
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: LIST
50056: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50057: LD_ADDR_VAR 0 23
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: LD_INT 3
50067: NEG
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 1
50075: NEG
50076: PUSH
50077: LD_INT 4
50079: NEG
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 1
50087: PUSH
50088: LD_INT 3
50090: NEG
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: LIST
50100: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50101: LD_ADDR_VAR 0 24
50105: PUSH
50106: LD_INT 3
50108: PUSH
50109: LD_INT 0
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 3
50118: PUSH
50119: LD_INT 1
50121: NEG
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 4
50129: PUSH
50130: LD_INT 1
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: LIST
50141: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50142: LD_ADDR_VAR 0 25
50146: PUSH
50147: LD_INT 3
50149: PUSH
50150: LD_INT 3
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 4
50159: PUSH
50160: LD_INT 3
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 3
50169: PUSH
50170: LD_INT 4
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: LIST
50181: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50182: LD_ADDR_VAR 0 26
50186: PUSH
50187: LD_INT 0
50189: PUSH
50190: LD_INT 3
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 1
50199: PUSH
50200: LD_INT 4
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: LD_INT 3
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: LIST
50222: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50223: LD_ADDR_VAR 0 27
50227: PUSH
50228: LD_INT 3
50230: NEG
50231: PUSH
50232: LD_INT 0
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 3
50241: NEG
50242: PUSH
50243: LD_INT 1
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 4
50252: NEG
50253: PUSH
50254: LD_INT 1
50256: NEG
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: LIST
50266: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50267: LD_ADDR_VAR 0 28
50271: PUSH
50272: LD_INT 3
50274: NEG
50275: PUSH
50276: LD_INT 3
50278: NEG
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 3
50286: NEG
50287: PUSH
50288: LD_INT 4
50290: NEG
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 4
50298: NEG
50299: PUSH
50300: LD_INT 3
50302: NEG
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: LIST
50312: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50313: LD_ADDR_VAR 0 29
50317: PUSH
50318: LD_INT 1
50320: NEG
50321: PUSH
50322: LD_INT 3
50324: NEG
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 0
50332: PUSH
50333: LD_INT 3
50335: NEG
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 1
50343: PUSH
50344: LD_INT 2
50346: NEG
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: NEG
50355: PUSH
50356: LD_INT 4
50358: NEG
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 0
50366: PUSH
50367: LD_INT 4
50369: NEG
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 1
50377: PUSH
50378: LD_INT 3
50380: NEG
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 1
50388: NEG
50389: PUSH
50390: LD_INT 5
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 0
50400: PUSH
50401: LD_INT 5
50403: NEG
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 1
50411: PUSH
50412: LD_INT 4
50414: NEG
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 1
50422: NEG
50423: PUSH
50424: LD_INT 6
50426: NEG
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: LD_INT 6
50437: NEG
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: LD_INT 5
50448: NEG
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50468: LD_ADDR_VAR 0 30
50472: PUSH
50473: LD_INT 2
50475: PUSH
50476: LD_INT 1
50478: NEG
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 3
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 3
50496: PUSH
50497: LD_INT 1
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 3
50506: PUSH
50507: LD_INT 1
50509: NEG
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 4
50517: PUSH
50518: LD_INT 0
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 4
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 4
50537: PUSH
50538: LD_INT 1
50540: NEG
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 5
50548: PUSH
50549: LD_INT 0
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 5
50558: PUSH
50559: LD_INT 1
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 5
50568: PUSH
50569: LD_INT 1
50571: NEG
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 6
50579: PUSH
50580: LD_INT 0
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 6
50589: PUSH
50590: LD_INT 1
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50611: LD_ADDR_VAR 0 31
50615: PUSH
50616: LD_INT 3
50618: PUSH
50619: LD_INT 2
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 3
50628: PUSH
50629: LD_INT 3
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 2
50638: PUSH
50639: LD_INT 3
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 4
50648: PUSH
50649: LD_INT 3
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 4
50658: PUSH
50659: LD_INT 4
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 3
50668: PUSH
50669: LD_INT 4
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 5
50678: PUSH
50679: LD_INT 4
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 5
50688: PUSH
50689: LD_INT 5
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 4
50698: PUSH
50699: LD_INT 5
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 6
50708: PUSH
50709: LD_INT 5
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 6
50718: PUSH
50719: LD_INT 6
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 5
50728: PUSH
50729: LD_INT 6
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50750: LD_ADDR_VAR 0 32
50754: PUSH
50755: LD_INT 1
50757: PUSH
50758: LD_INT 3
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: LD_INT 3
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 1
50777: NEG
50778: PUSH
50779: LD_INT 2
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 1
50788: PUSH
50789: LD_INT 4
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: LD_INT 4
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: NEG
50809: PUSH
50810: LD_INT 3
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 1
50819: PUSH
50820: LD_INT 5
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 0
50829: PUSH
50830: LD_INT 5
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 1
50839: NEG
50840: PUSH
50841: LD_INT 4
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 1
50850: PUSH
50851: LD_INT 6
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: LD_INT 6
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 1
50870: NEG
50871: PUSH
50872: LD_INT 5
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50893: LD_ADDR_VAR 0 33
50897: PUSH
50898: LD_INT 2
50900: NEG
50901: PUSH
50902: LD_INT 1
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 3
50911: NEG
50912: PUSH
50913: LD_INT 0
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 3
50922: NEG
50923: PUSH
50924: LD_INT 1
50926: NEG
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 3
50934: NEG
50935: PUSH
50936: LD_INT 1
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 4
50945: NEG
50946: PUSH
50947: LD_INT 0
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 4
50956: NEG
50957: PUSH
50958: LD_INT 1
50960: NEG
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 4
50968: NEG
50969: PUSH
50970: LD_INT 1
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 5
50979: NEG
50980: PUSH
50981: LD_INT 0
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 5
50990: NEG
50991: PUSH
50992: LD_INT 1
50994: NEG
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 5
51002: NEG
51003: PUSH
51004: LD_INT 1
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 6
51013: NEG
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 6
51024: NEG
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51048: LD_ADDR_VAR 0 34
51052: PUSH
51053: LD_INT 2
51055: NEG
51056: PUSH
51057: LD_INT 3
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 3
51067: NEG
51068: PUSH
51069: LD_INT 2
51071: NEG
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 3
51079: NEG
51080: PUSH
51081: LD_INT 3
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 3
51091: NEG
51092: PUSH
51093: LD_INT 4
51095: NEG
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 4
51103: NEG
51104: PUSH
51105: LD_INT 3
51107: NEG
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 4
51115: NEG
51116: PUSH
51117: LD_INT 4
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 4
51127: NEG
51128: PUSH
51129: LD_INT 5
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 5
51139: NEG
51140: PUSH
51141: LD_INT 4
51143: NEG
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 5
51151: NEG
51152: PUSH
51153: LD_INT 5
51155: NEG
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 5
51163: NEG
51164: PUSH
51165: LD_INT 6
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 6
51175: NEG
51176: PUSH
51177: LD_INT 5
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 6
51187: NEG
51188: PUSH
51189: LD_INT 6
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51211: LD_ADDR_VAR 0 41
51215: PUSH
51216: LD_INT 0
51218: PUSH
51219: LD_INT 2
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 1
51229: NEG
51230: PUSH
51231: LD_INT 3
51233: NEG
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 1
51241: PUSH
51242: LD_INT 2
51244: NEG
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: LIST
51254: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51255: LD_ADDR_VAR 0 42
51259: PUSH
51260: LD_INT 2
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 2
51272: PUSH
51273: LD_INT 1
51275: NEG
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 3
51283: PUSH
51284: LD_INT 1
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: LIST
51295: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51296: LD_ADDR_VAR 0 43
51300: PUSH
51301: LD_INT 2
51303: PUSH
51304: LD_INT 2
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 3
51313: PUSH
51314: LD_INT 2
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 2
51323: PUSH
51324: LD_INT 3
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: LIST
51335: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51336: LD_ADDR_VAR 0 44
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: LD_INT 2
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 1
51353: PUSH
51354: LD_INT 3
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 1
51363: NEG
51364: PUSH
51365: LD_INT 2
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: LIST
51376: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51377: LD_ADDR_VAR 0 45
51381: PUSH
51382: LD_INT 2
51384: NEG
51385: PUSH
51386: LD_INT 0
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 2
51395: NEG
51396: PUSH
51397: LD_INT 1
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 3
51406: NEG
51407: PUSH
51408: LD_INT 1
51410: NEG
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: LIST
51420: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51421: LD_ADDR_VAR 0 46
51425: PUSH
51426: LD_INT 2
51428: NEG
51429: PUSH
51430: LD_INT 2
51432: NEG
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 2
51440: NEG
51441: PUSH
51442: LD_INT 3
51444: NEG
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 3
51452: NEG
51453: PUSH
51454: LD_INT 2
51456: NEG
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: LIST
51466: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51467: LD_ADDR_VAR 0 47
51471: PUSH
51472: LD_INT 2
51474: NEG
51475: PUSH
51476: LD_INT 3
51478: NEG
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 1
51486: NEG
51487: PUSH
51488: LD_INT 3
51490: NEG
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51500: LD_ADDR_VAR 0 48
51504: PUSH
51505: LD_INT 1
51507: PUSH
51508: LD_INT 2
51510: NEG
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 2
51518: PUSH
51519: LD_INT 1
51521: NEG
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51531: LD_ADDR_VAR 0 49
51535: PUSH
51536: LD_INT 3
51538: PUSH
51539: LD_INT 1
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 3
51548: PUSH
51549: LD_INT 2
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51560: LD_ADDR_VAR 0 50
51564: PUSH
51565: LD_INT 2
51567: PUSH
51568: LD_INT 3
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: LD_INT 3
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51589: LD_ADDR_VAR 0 51
51593: PUSH
51594: LD_INT 1
51596: NEG
51597: PUSH
51598: LD_INT 2
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 2
51607: NEG
51608: PUSH
51609: LD_INT 1
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51620: LD_ADDR_VAR 0 52
51624: PUSH
51625: LD_INT 3
51627: NEG
51628: PUSH
51629: LD_INT 1
51631: NEG
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 3
51639: NEG
51640: PUSH
51641: LD_INT 2
51643: NEG
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51653: LD_ADDR_VAR 0 53
51657: PUSH
51658: LD_INT 1
51660: NEG
51661: PUSH
51662: LD_INT 3
51664: NEG
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 0
51672: PUSH
51673: LD_INT 3
51675: NEG
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 1
51683: PUSH
51684: LD_INT 2
51686: NEG
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: LIST
51696: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51697: LD_ADDR_VAR 0 54
51701: PUSH
51702: LD_INT 2
51704: PUSH
51705: LD_INT 1
51707: NEG
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 3
51715: PUSH
51716: LD_INT 0
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 3
51725: PUSH
51726: LD_INT 1
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: LIST
51737: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51738: LD_ADDR_VAR 0 55
51742: PUSH
51743: LD_INT 3
51745: PUSH
51746: LD_INT 2
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 3
51755: PUSH
51756: LD_INT 3
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 2
51765: PUSH
51766: LD_INT 3
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: LIST
51777: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51778: LD_ADDR_VAR 0 56
51782: PUSH
51783: LD_INT 1
51785: PUSH
51786: LD_INT 3
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: LD_INT 3
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 1
51805: NEG
51806: PUSH
51807: LD_INT 2
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: LIST
51818: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51819: LD_ADDR_VAR 0 57
51823: PUSH
51824: LD_INT 2
51826: NEG
51827: PUSH
51828: LD_INT 1
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 3
51837: NEG
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 3
51848: NEG
51849: PUSH
51850: LD_INT 1
51852: NEG
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: LIST
51862: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51863: LD_ADDR_VAR 0 58
51867: PUSH
51868: LD_INT 2
51870: NEG
51871: PUSH
51872: LD_INT 3
51874: NEG
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 3
51882: NEG
51883: PUSH
51884: LD_INT 2
51886: NEG
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 3
51894: NEG
51895: PUSH
51896: LD_INT 3
51898: NEG
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: LIST
51908: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51909: LD_ADDR_VAR 0 59
51913: PUSH
51914: LD_INT 1
51916: NEG
51917: PUSH
51918: LD_INT 2
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 0
51928: PUSH
51929: LD_INT 2
51931: NEG
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: LD_INT 1
51942: NEG
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: LIST
51952: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51953: LD_ADDR_VAR 0 60
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: LD_INT 1
51963: NEG
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 2
51971: PUSH
51972: LD_INT 0
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 2
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: LIST
51993: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51994: LD_ADDR_VAR 0 61
51998: PUSH
51999: LD_INT 2
52001: PUSH
52002: LD_INT 1
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 2
52011: PUSH
52012: LD_INT 2
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 1
52021: PUSH
52022: LD_INT 2
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: LIST
52033: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52034: LD_ADDR_VAR 0 62
52038: PUSH
52039: LD_INT 1
52041: PUSH
52042: LD_INT 2
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 0
52051: PUSH
52052: LD_INT 2
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 1
52061: NEG
52062: PUSH
52063: LD_INT 1
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: LIST
52074: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52075: LD_ADDR_VAR 0 63
52079: PUSH
52080: LD_INT 1
52082: NEG
52083: PUSH
52084: LD_INT 1
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 2
52093: NEG
52094: PUSH
52095: LD_INT 0
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 2
52104: NEG
52105: PUSH
52106: LD_INT 1
52108: NEG
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: LIST
52118: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52119: LD_ADDR_VAR 0 64
52123: PUSH
52124: LD_INT 1
52126: NEG
52127: PUSH
52128: LD_INT 2
52130: NEG
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 2
52138: NEG
52139: PUSH
52140: LD_INT 1
52142: NEG
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 2
52150: NEG
52151: PUSH
52152: LD_INT 2
52154: NEG
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: LIST
52164: ST_TO_ADDR
// end ; 2 :
52165: GO 55431
52167: LD_INT 2
52169: DOUBLE
52170: EQUAL
52171: IFTRUE 52175
52173: GO 55430
52175: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52176: LD_ADDR_VAR 0 29
52180: PUSH
52181: LD_INT 4
52183: PUSH
52184: LD_INT 0
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 4
52193: PUSH
52194: LD_INT 1
52196: NEG
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 5
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 5
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 4
52224: PUSH
52225: LD_INT 1
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 3
52234: PUSH
52235: LD_INT 0
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 3
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 3
52255: PUSH
52256: LD_INT 2
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 5
52266: PUSH
52267: LD_INT 2
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 3
52276: PUSH
52277: LD_INT 3
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 3
52286: PUSH
52287: LD_INT 2
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 4
52296: PUSH
52297: LD_INT 3
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 4
52306: PUSH
52307: LD_INT 4
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 3
52316: PUSH
52317: LD_INT 4
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 2
52326: PUSH
52327: LD_INT 3
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 2
52336: PUSH
52337: LD_INT 2
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 4
52346: PUSH
52347: LD_INT 2
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 2
52356: PUSH
52357: LD_INT 4
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 0
52366: PUSH
52367: LD_INT 4
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 0
52376: PUSH
52377: LD_INT 3
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: LD_INT 4
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: LD_INT 5
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 0
52406: PUSH
52407: LD_INT 5
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: LD_INT 4
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 1
52427: NEG
52428: PUSH
52429: LD_INT 3
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 2
52438: PUSH
52439: LD_INT 5
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 2
52448: NEG
52449: PUSH
52450: LD_INT 3
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 3
52459: NEG
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 3
52470: NEG
52471: PUSH
52472: LD_INT 1
52474: NEG
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 2
52482: NEG
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 2
52493: NEG
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 3
52504: NEG
52505: PUSH
52506: LD_INT 1
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 4
52515: NEG
52516: PUSH
52517: LD_INT 0
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 4
52526: NEG
52527: PUSH
52528: LD_INT 1
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 4
52538: NEG
52539: PUSH
52540: LD_INT 2
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 2
52550: NEG
52551: PUSH
52552: LD_INT 2
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 4
52561: NEG
52562: PUSH
52563: LD_INT 4
52565: NEG
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 4
52573: NEG
52574: PUSH
52575: LD_INT 5
52577: NEG
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 3
52585: NEG
52586: PUSH
52587: LD_INT 4
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 3
52597: NEG
52598: PUSH
52599: LD_INT 3
52601: NEG
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 4
52609: NEG
52610: PUSH
52611: LD_INT 3
52613: NEG
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 5
52621: NEG
52622: PUSH
52623: LD_INT 4
52625: NEG
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 5
52633: NEG
52634: PUSH
52635: LD_INT 5
52637: NEG
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 3
52645: NEG
52646: PUSH
52647: LD_INT 5
52649: NEG
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 5
52657: NEG
52658: PUSH
52659: LD_INT 3
52661: NEG
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52714: LD_ADDR_VAR 0 30
52718: PUSH
52719: LD_INT 4
52721: PUSH
52722: LD_INT 4
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 4
52731: PUSH
52732: LD_INT 3
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 5
52741: PUSH
52742: LD_INT 4
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 5
52751: PUSH
52752: LD_INT 5
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 4
52761: PUSH
52762: LD_INT 5
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 3
52771: PUSH
52772: LD_INT 4
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 3
52781: PUSH
52782: LD_INT 3
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 5
52791: PUSH
52792: LD_INT 3
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 3
52801: PUSH
52802: LD_INT 5
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: LD_INT 3
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: LD_INT 2
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: LD_INT 3
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 1
52841: PUSH
52842: LD_INT 4
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 0
52851: PUSH
52852: LD_INT 4
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 1
52861: NEG
52862: PUSH
52863: LD_INT 3
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 1
52872: NEG
52873: PUSH
52874: LD_INT 2
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 2
52883: PUSH
52884: LD_INT 4
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 2
52893: NEG
52894: PUSH
52895: LD_INT 2
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 4
52904: NEG
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 4
52915: NEG
52916: PUSH
52917: LD_INT 1
52919: NEG
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 3
52927: NEG
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 3
52938: NEG
52939: PUSH
52940: LD_INT 1
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 4
52949: NEG
52950: PUSH
52951: LD_INT 1
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 5
52960: NEG
52961: PUSH
52962: LD_INT 0
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 5
52971: NEG
52972: PUSH
52973: LD_INT 1
52975: NEG
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 5
52983: NEG
52984: PUSH
52985: LD_INT 2
52987: NEG
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 3
52995: NEG
52996: PUSH
52997: LD_INT 2
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 3
53006: NEG
53007: PUSH
53008: LD_INT 3
53010: NEG
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 3
53018: NEG
53019: PUSH
53020: LD_INT 4
53022: NEG
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 2
53030: NEG
53031: PUSH
53032: LD_INT 3
53034: NEG
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 2
53042: NEG
53043: PUSH
53044: LD_INT 2
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 3
53054: NEG
53055: PUSH
53056: LD_INT 2
53058: NEG
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 4
53066: NEG
53067: PUSH
53068: LD_INT 3
53070: NEG
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 4
53078: NEG
53079: PUSH
53080: LD_INT 4
53082: NEG
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 2
53090: NEG
53091: PUSH
53092: LD_INT 4
53094: NEG
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 4
53102: NEG
53103: PUSH
53104: LD_INT 2
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 0
53114: PUSH
53115: LD_INT 4
53117: NEG
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: LD_INT 5
53128: NEG
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 1
53136: PUSH
53137: LD_INT 4
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: PUSH
53148: LD_INT 3
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: LD_INT 3
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 1
53169: NEG
53170: PUSH
53171: LD_INT 4
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: NEG
53182: PUSH
53183: LD_INT 5
53185: NEG
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 2
53193: PUSH
53194: LD_INT 3
53196: NEG
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 2
53204: NEG
53205: PUSH
53206: LD_INT 5
53208: NEG
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53261: LD_ADDR_VAR 0 31
53265: PUSH
53266: LD_INT 0
53268: PUSH
53269: LD_INT 4
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 0
53278: PUSH
53279: LD_INT 3
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 1
53288: PUSH
53289: LD_INT 4
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: LD_INT 5
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 0
53308: PUSH
53309: LD_INT 5
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 1
53318: NEG
53319: PUSH
53320: LD_INT 4
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: LD_INT 3
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 2
53340: PUSH
53341: LD_INT 5
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 2
53350: NEG
53351: PUSH
53352: LD_INT 3
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 3
53361: NEG
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 3
53372: NEG
53373: PUSH
53374: LD_INT 1
53376: NEG
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 2
53384: NEG
53385: PUSH
53386: LD_INT 0
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 2
53395: NEG
53396: PUSH
53397: LD_INT 1
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 3
53406: NEG
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 4
53417: NEG
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 4
53428: NEG
53429: PUSH
53430: LD_INT 1
53432: NEG
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 4
53440: NEG
53441: PUSH
53442: LD_INT 2
53444: NEG
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 2
53452: NEG
53453: PUSH
53454: LD_INT 2
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 4
53463: NEG
53464: PUSH
53465: LD_INT 4
53467: NEG
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 4
53475: NEG
53476: PUSH
53477: LD_INT 5
53479: NEG
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 3
53487: NEG
53488: PUSH
53489: LD_INT 4
53491: NEG
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 3
53499: NEG
53500: PUSH
53501: LD_INT 3
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 4
53511: NEG
53512: PUSH
53513: LD_INT 3
53515: NEG
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 5
53523: NEG
53524: PUSH
53525: LD_INT 4
53527: NEG
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 5
53535: NEG
53536: PUSH
53537: LD_INT 5
53539: NEG
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 3
53547: NEG
53548: PUSH
53549: LD_INT 5
53551: NEG
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 5
53559: NEG
53560: PUSH
53561: LD_INT 3
53563: NEG
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 0
53571: PUSH
53572: LD_INT 3
53574: NEG
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 0
53582: PUSH
53583: LD_INT 4
53585: NEG
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 1
53593: PUSH
53594: LD_INT 3
53596: NEG
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: PUSH
53605: LD_INT 2
53607: NEG
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 0
53615: PUSH
53616: LD_INT 2
53618: NEG
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 1
53626: NEG
53627: PUSH
53628: LD_INT 3
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 1
53638: NEG
53639: PUSH
53640: LD_INT 4
53642: NEG
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 2
53650: PUSH
53651: LD_INT 2
53653: NEG
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 2
53661: NEG
53662: PUSH
53663: LD_INT 4
53665: NEG
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 4
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 4
53683: PUSH
53684: LD_INT 1
53686: NEG
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 5
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 5
53704: PUSH
53705: LD_INT 1
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 4
53714: PUSH
53715: LD_INT 1
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 3
53724: PUSH
53725: LD_INT 0
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 3
53734: PUSH
53735: LD_INT 1
53737: NEG
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 3
53745: PUSH
53746: LD_INT 2
53748: NEG
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 5
53756: PUSH
53757: LD_INT 2
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53811: LD_ADDR_VAR 0 32
53815: PUSH
53816: LD_INT 4
53818: NEG
53819: PUSH
53820: LD_INT 0
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 4
53829: NEG
53830: PUSH
53831: LD_INT 1
53833: NEG
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 3
53841: NEG
53842: PUSH
53843: LD_INT 0
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 3
53852: NEG
53853: PUSH
53854: LD_INT 1
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 4
53863: NEG
53864: PUSH
53865: LD_INT 1
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 5
53874: NEG
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 5
53885: NEG
53886: PUSH
53887: LD_INT 1
53889: NEG
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 5
53897: NEG
53898: PUSH
53899: LD_INT 2
53901: NEG
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 3
53909: NEG
53910: PUSH
53911: LD_INT 2
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 3
53920: NEG
53921: PUSH
53922: LD_INT 3
53924: NEG
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 3
53932: NEG
53933: PUSH
53934: LD_INT 4
53936: NEG
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 2
53944: NEG
53945: PUSH
53946: LD_INT 3
53948: NEG
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 2
53956: NEG
53957: PUSH
53958: LD_INT 2
53960: NEG
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 3
53968: NEG
53969: PUSH
53970: LD_INT 2
53972: NEG
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 4
53980: NEG
53981: PUSH
53982: LD_INT 3
53984: NEG
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 4
53992: NEG
53993: PUSH
53994: LD_INT 4
53996: NEG
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 2
54004: NEG
54005: PUSH
54006: LD_INT 4
54008: NEG
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 4
54016: NEG
54017: PUSH
54018: LD_INT 2
54020: NEG
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: LD_INT 4
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: LD_INT 5
54042: NEG
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 1
54050: PUSH
54051: LD_INT 4
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 1
54061: PUSH
54062: LD_INT 3
54064: NEG
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: LD_INT 3
54075: NEG
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 1
54083: NEG
54084: PUSH
54085: LD_INT 4
54087: NEG
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 1
54095: NEG
54096: PUSH
54097: LD_INT 5
54099: NEG
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 2
54107: PUSH
54108: LD_INT 3
54110: NEG
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 2
54118: NEG
54119: PUSH
54120: LD_INT 5
54122: NEG
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 3
54130: PUSH
54131: LD_INT 0
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 3
54140: PUSH
54141: LD_INT 1
54143: NEG
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 4
54151: PUSH
54152: LD_INT 0
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 4
54161: PUSH
54162: LD_INT 1
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 3
54171: PUSH
54172: LD_INT 1
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 2
54181: PUSH
54182: LD_INT 0
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 2
54191: PUSH
54192: LD_INT 1
54194: NEG
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 2
54202: PUSH
54203: LD_INT 2
54205: NEG
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 4
54213: PUSH
54214: LD_INT 2
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 4
54223: PUSH
54224: LD_INT 4
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 4
54233: PUSH
54234: LD_INT 3
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 5
54243: PUSH
54244: LD_INT 4
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 5
54253: PUSH
54254: LD_INT 5
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 4
54263: PUSH
54264: LD_INT 5
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 3
54273: PUSH
54274: LD_INT 4
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 3
54283: PUSH
54284: LD_INT 3
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 5
54293: PUSH
54294: LD_INT 3
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 3
54303: PUSH
54304: LD_INT 5
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54358: LD_ADDR_VAR 0 33
54362: PUSH
54363: LD_INT 4
54365: NEG
54366: PUSH
54367: LD_INT 4
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 4
54377: NEG
54378: PUSH
54379: LD_INT 5
54381: NEG
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 3
54389: NEG
54390: PUSH
54391: LD_INT 4
54393: NEG
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 3
54401: NEG
54402: PUSH
54403: LD_INT 3
54405: NEG
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 4
54413: NEG
54414: PUSH
54415: LD_INT 3
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 5
54425: NEG
54426: PUSH
54427: LD_INT 4
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 5
54437: NEG
54438: PUSH
54439: LD_INT 5
54441: NEG
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 3
54449: NEG
54450: PUSH
54451: LD_INT 5
54453: NEG
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 5
54461: NEG
54462: PUSH
54463: LD_INT 3
54465: NEG
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: LD_INT 3
54476: NEG
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: LD_INT 4
54487: NEG
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 1
54495: PUSH
54496: LD_INT 3
54498: NEG
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 1
54506: PUSH
54507: LD_INT 2
54509: NEG
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 0
54517: PUSH
54518: LD_INT 2
54520: NEG
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 1
54528: NEG
54529: PUSH
54530: LD_INT 3
54532: NEG
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 1
54540: NEG
54541: PUSH
54542: LD_INT 4
54544: NEG
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 2
54552: PUSH
54553: LD_INT 2
54555: NEG
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 2
54563: NEG
54564: PUSH
54565: LD_INT 4
54567: NEG
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 4
54575: PUSH
54576: LD_INT 0
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 4
54585: PUSH
54586: LD_INT 1
54588: NEG
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 5
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 5
54606: PUSH
54607: LD_INT 1
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 4
54616: PUSH
54617: LD_INT 1
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 3
54626: PUSH
54627: LD_INT 0
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 3
54636: PUSH
54637: LD_INT 1
54639: NEG
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 3
54647: PUSH
54648: LD_INT 2
54650: NEG
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 5
54658: PUSH
54659: LD_INT 2
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 3
54668: PUSH
54669: LD_INT 3
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 3
54678: PUSH
54679: LD_INT 2
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 4
54688: PUSH
54689: LD_INT 3
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 4
54698: PUSH
54699: LD_INT 4
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 3
54708: PUSH
54709: LD_INT 4
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 2
54718: PUSH
54719: LD_INT 3
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 2
54728: PUSH
54729: LD_INT 2
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 4
54738: PUSH
54739: LD_INT 2
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 2
54748: PUSH
54749: LD_INT 4
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 0
54758: PUSH
54759: LD_INT 4
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 0
54768: PUSH
54769: LD_INT 3
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: LD_INT 4
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 1
54788: PUSH
54789: LD_INT 5
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 0
54798: PUSH
54799: LD_INT 5
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 1
54808: NEG
54809: PUSH
54810: LD_INT 4
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 1
54819: NEG
54820: PUSH
54821: LD_INT 3
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 2
54830: PUSH
54831: LD_INT 5
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 2
54840: NEG
54841: PUSH
54842: LD_INT 3
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54896: LD_ADDR_VAR 0 34
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: LD_INT 4
54906: NEG
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: LD_INT 5
54917: NEG
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 1
54925: PUSH
54926: LD_INT 4
54928: NEG
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 1
54936: PUSH
54937: LD_INT 3
54939: NEG
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 0
54947: PUSH
54948: LD_INT 3
54950: NEG
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 1
54958: NEG
54959: PUSH
54960: LD_INT 4
54962: NEG
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: LD_INT 5
54974: NEG
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 2
54982: PUSH
54983: LD_INT 3
54985: NEG
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 2
54993: NEG
54994: PUSH
54995: LD_INT 5
54997: NEG
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 3
55005: PUSH
55006: LD_INT 0
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 3
55015: PUSH
55016: LD_INT 1
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 4
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 4
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 3
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 2
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 2
55066: PUSH
55067: LD_INT 1
55069: NEG
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 2
55077: PUSH
55078: LD_INT 2
55080: NEG
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 4
55088: PUSH
55089: LD_INT 2
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 4
55098: PUSH
55099: LD_INT 4
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 4
55108: PUSH
55109: LD_INT 3
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 5
55118: PUSH
55119: LD_INT 4
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 5
55128: PUSH
55129: LD_INT 5
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 4
55138: PUSH
55139: LD_INT 5
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 3
55148: PUSH
55149: LD_INT 4
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 3
55158: PUSH
55159: LD_INT 3
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 5
55168: PUSH
55169: LD_INT 3
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 3
55178: PUSH
55179: LD_INT 5
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 0
55188: PUSH
55189: LD_INT 3
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: LD_INT 2
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 1
55208: PUSH
55209: LD_INT 3
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 1
55218: PUSH
55219: LD_INT 4
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 0
55228: PUSH
55229: LD_INT 4
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 1
55238: NEG
55239: PUSH
55240: LD_INT 3
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: LD_INT 2
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 2
55260: PUSH
55261: LD_INT 4
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 2
55270: NEG
55271: PUSH
55272: LD_INT 2
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 4
55281: NEG
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 4
55292: NEG
55293: PUSH
55294: LD_INT 1
55296: NEG
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 3
55304: NEG
55305: PUSH
55306: LD_INT 0
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 3
55315: NEG
55316: PUSH
55317: LD_INT 1
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 4
55326: NEG
55327: PUSH
55328: LD_INT 1
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 5
55337: NEG
55338: PUSH
55339: LD_INT 0
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 5
55348: NEG
55349: PUSH
55350: LD_INT 1
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 5
55360: NEG
55361: PUSH
55362: LD_INT 2
55364: NEG
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 3
55372: NEG
55373: PUSH
55374: LD_INT 2
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: ST_TO_ADDR
// end ; end ;
55428: GO 55431
55430: POP
// case btype of b_depot , b_warehouse :
55431: LD_VAR 0 1
55435: PUSH
55436: LD_INT 0
55438: DOUBLE
55439: EQUAL
55440: IFTRUE 55450
55442: LD_INT 1
55444: DOUBLE
55445: EQUAL
55446: IFTRUE 55450
55448: GO 55651
55450: POP
// case nation of nation_american :
55451: LD_VAR 0 5
55455: PUSH
55456: LD_INT 1
55458: DOUBLE
55459: EQUAL
55460: IFTRUE 55464
55462: GO 55520
55464: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55465: LD_ADDR_VAR 0 9
55469: PUSH
55470: LD_VAR 0 11
55474: PUSH
55475: LD_VAR 0 12
55479: PUSH
55480: LD_VAR 0 13
55484: PUSH
55485: LD_VAR 0 14
55489: PUSH
55490: LD_VAR 0 15
55494: PUSH
55495: LD_VAR 0 16
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: PUSH
55508: LD_VAR 0 4
55512: PUSH
55513: LD_INT 1
55515: PLUS
55516: ARRAY
55517: ST_TO_ADDR
55518: GO 55649
55520: LD_INT 2
55522: DOUBLE
55523: EQUAL
55524: IFTRUE 55528
55526: GO 55584
55528: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55529: LD_ADDR_VAR 0 9
55533: PUSH
55534: LD_VAR 0 17
55538: PUSH
55539: LD_VAR 0 18
55543: PUSH
55544: LD_VAR 0 19
55548: PUSH
55549: LD_VAR 0 20
55553: PUSH
55554: LD_VAR 0 21
55558: PUSH
55559: LD_VAR 0 22
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: PUSH
55572: LD_VAR 0 4
55576: PUSH
55577: LD_INT 1
55579: PLUS
55580: ARRAY
55581: ST_TO_ADDR
55582: GO 55649
55584: LD_INT 3
55586: DOUBLE
55587: EQUAL
55588: IFTRUE 55592
55590: GO 55648
55592: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55593: LD_ADDR_VAR 0 9
55597: PUSH
55598: LD_VAR 0 23
55602: PUSH
55603: LD_VAR 0 24
55607: PUSH
55608: LD_VAR 0 25
55612: PUSH
55613: LD_VAR 0 26
55617: PUSH
55618: LD_VAR 0 27
55622: PUSH
55623: LD_VAR 0 28
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: PUSH
55636: LD_VAR 0 4
55640: PUSH
55641: LD_INT 1
55643: PLUS
55644: ARRAY
55645: ST_TO_ADDR
55646: GO 55649
55648: POP
55649: GO 56204
55651: LD_INT 2
55653: DOUBLE
55654: EQUAL
55655: IFTRUE 55665
55657: LD_INT 3
55659: DOUBLE
55660: EQUAL
55661: IFTRUE 55665
55663: GO 55721
55665: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55666: LD_ADDR_VAR 0 9
55670: PUSH
55671: LD_VAR 0 29
55675: PUSH
55676: LD_VAR 0 30
55680: PUSH
55681: LD_VAR 0 31
55685: PUSH
55686: LD_VAR 0 32
55690: PUSH
55691: LD_VAR 0 33
55695: PUSH
55696: LD_VAR 0 34
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: PUSH
55709: LD_VAR 0 4
55713: PUSH
55714: LD_INT 1
55716: PLUS
55717: ARRAY
55718: ST_TO_ADDR
55719: GO 56204
55721: LD_INT 16
55723: DOUBLE
55724: EQUAL
55725: IFTRUE 55783
55727: LD_INT 17
55729: DOUBLE
55730: EQUAL
55731: IFTRUE 55783
55733: LD_INT 18
55735: DOUBLE
55736: EQUAL
55737: IFTRUE 55783
55739: LD_INT 19
55741: DOUBLE
55742: EQUAL
55743: IFTRUE 55783
55745: LD_INT 22
55747: DOUBLE
55748: EQUAL
55749: IFTRUE 55783
55751: LD_INT 20
55753: DOUBLE
55754: EQUAL
55755: IFTRUE 55783
55757: LD_INT 21
55759: DOUBLE
55760: EQUAL
55761: IFTRUE 55783
55763: LD_INT 23
55765: DOUBLE
55766: EQUAL
55767: IFTRUE 55783
55769: LD_INT 24
55771: DOUBLE
55772: EQUAL
55773: IFTRUE 55783
55775: LD_INT 25
55777: DOUBLE
55778: EQUAL
55779: IFTRUE 55783
55781: GO 55839
55783: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55784: LD_ADDR_VAR 0 9
55788: PUSH
55789: LD_VAR 0 35
55793: PUSH
55794: LD_VAR 0 36
55798: PUSH
55799: LD_VAR 0 37
55803: PUSH
55804: LD_VAR 0 38
55808: PUSH
55809: LD_VAR 0 39
55813: PUSH
55814: LD_VAR 0 40
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: PUSH
55827: LD_VAR 0 4
55831: PUSH
55832: LD_INT 1
55834: PLUS
55835: ARRAY
55836: ST_TO_ADDR
55837: GO 56204
55839: LD_INT 6
55841: DOUBLE
55842: EQUAL
55843: IFTRUE 55895
55845: LD_INT 7
55847: DOUBLE
55848: EQUAL
55849: IFTRUE 55895
55851: LD_INT 8
55853: DOUBLE
55854: EQUAL
55855: IFTRUE 55895
55857: LD_INT 13
55859: DOUBLE
55860: EQUAL
55861: IFTRUE 55895
55863: LD_INT 12
55865: DOUBLE
55866: EQUAL
55867: IFTRUE 55895
55869: LD_INT 15
55871: DOUBLE
55872: EQUAL
55873: IFTRUE 55895
55875: LD_INT 11
55877: DOUBLE
55878: EQUAL
55879: IFTRUE 55895
55881: LD_INT 14
55883: DOUBLE
55884: EQUAL
55885: IFTRUE 55895
55887: LD_INT 10
55889: DOUBLE
55890: EQUAL
55891: IFTRUE 55895
55893: GO 55951
55895: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55896: LD_ADDR_VAR 0 9
55900: PUSH
55901: LD_VAR 0 41
55905: PUSH
55906: LD_VAR 0 42
55910: PUSH
55911: LD_VAR 0 43
55915: PUSH
55916: LD_VAR 0 44
55920: PUSH
55921: LD_VAR 0 45
55925: PUSH
55926: LD_VAR 0 46
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: PUSH
55939: LD_VAR 0 4
55943: PUSH
55944: LD_INT 1
55946: PLUS
55947: ARRAY
55948: ST_TO_ADDR
55949: GO 56204
55951: LD_INT 36
55953: DOUBLE
55954: EQUAL
55955: IFTRUE 55959
55957: GO 56015
55959: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55960: LD_ADDR_VAR 0 9
55964: PUSH
55965: LD_VAR 0 47
55969: PUSH
55970: LD_VAR 0 48
55974: PUSH
55975: LD_VAR 0 49
55979: PUSH
55980: LD_VAR 0 50
55984: PUSH
55985: LD_VAR 0 51
55989: PUSH
55990: LD_VAR 0 52
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: PUSH
56003: LD_VAR 0 4
56007: PUSH
56008: LD_INT 1
56010: PLUS
56011: ARRAY
56012: ST_TO_ADDR
56013: GO 56204
56015: LD_INT 4
56017: DOUBLE
56018: EQUAL
56019: IFTRUE 56041
56021: LD_INT 5
56023: DOUBLE
56024: EQUAL
56025: IFTRUE 56041
56027: LD_INT 34
56029: DOUBLE
56030: EQUAL
56031: IFTRUE 56041
56033: LD_INT 37
56035: DOUBLE
56036: EQUAL
56037: IFTRUE 56041
56039: GO 56097
56041: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56042: LD_ADDR_VAR 0 9
56046: PUSH
56047: LD_VAR 0 53
56051: PUSH
56052: LD_VAR 0 54
56056: PUSH
56057: LD_VAR 0 55
56061: PUSH
56062: LD_VAR 0 56
56066: PUSH
56067: LD_VAR 0 57
56071: PUSH
56072: LD_VAR 0 58
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: PUSH
56085: LD_VAR 0 4
56089: PUSH
56090: LD_INT 1
56092: PLUS
56093: ARRAY
56094: ST_TO_ADDR
56095: GO 56204
56097: LD_INT 31
56099: DOUBLE
56100: EQUAL
56101: IFTRUE 56147
56103: LD_INT 32
56105: DOUBLE
56106: EQUAL
56107: IFTRUE 56147
56109: LD_INT 33
56111: DOUBLE
56112: EQUAL
56113: IFTRUE 56147
56115: LD_INT 27
56117: DOUBLE
56118: EQUAL
56119: IFTRUE 56147
56121: LD_INT 26
56123: DOUBLE
56124: EQUAL
56125: IFTRUE 56147
56127: LD_INT 28
56129: DOUBLE
56130: EQUAL
56131: IFTRUE 56147
56133: LD_INT 29
56135: DOUBLE
56136: EQUAL
56137: IFTRUE 56147
56139: LD_INT 30
56141: DOUBLE
56142: EQUAL
56143: IFTRUE 56147
56145: GO 56203
56147: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56148: LD_ADDR_VAR 0 9
56152: PUSH
56153: LD_VAR 0 59
56157: PUSH
56158: LD_VAR 0 60
56162: PUSH
56163: LD_VAR 0 61
56167: PUSH
56168: LD_VAR 0 62
56172: PUSH
56173: LD_VAR 0 63
56177: PUSH
56178: LD_VAR 0 64
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: PUSH
56191: LD_VAR 0 4
56195: PUSH
56196: LD_INT 1
56198: PLUS
56199: ARRAY
56200: ST_TO_ADDR
56201: GO 56204
56203: POP
// temp_list2 = [ ] ;
56204: LD_ADDR_VAR 0 10
56208: PUSH
56209: EMPTY
56210: ST_TO_ADDR
// for i in temp_list do
56211: LD_ADDR_VAR 0 8
56215: PUSH
56216: LD_VAR 0 9
56220: PUSH
56221: FOR_IN
56222: IFFALSE 56274
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56224: LD_ADDR_VAR 0 10
56228: PUSH
56229: LD_VAR 0 10
56233: PUSH
56234: LD_VAR 0 8
56238: PUSH
56239: LD_INT 1
56241: ARRAY
56242: PUSH
56243: LD_VAR 0 2
56247: PLUS
56248: PUSH
56249: LD_VAR 0 8
56253: PUSH
56254: LD_INT 2
56256: ARRAY
56257: PUSH
56258: LD_VAR 0 3
56262: PLUS
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: EMPTY
56269: LIST
56270: ADD
56271: ST_TO_ADDR
56272: GO 56221
56274: POP
56275: POP
// result = temp_list2 ;
56276: LD_ADDR_VAR 0 7
56280: PUSH
56281: LD_VAR 0 10
56285: ST_TO_ADDR
// end ;
56286: LD_VAR 0 7
56290: RET
// export function EnemyInRange ( unit , dist ) ; begin
56291: LD_INT 0
56293: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56294: LD_ADDR_VAR 0 3
56298: PUSH
56299: LD_VAR 0 1
56303: PPUSH
56304: CALL_OW 255
56308: PPUSH
56309: LD_VAR 0 1
56313: PPUSH
56314: CALL_OW 250
56318: PPUSH
56319: LD_VAR 0 1
56323: PPUSH
56324: CALL_OW 251
56328: PPUSH
56329: LD_VAR 0 2
56333: PPUSH
56334: CALL 29687 0 4
56338: PUSH
56339: LD_INT 4
56341: ARRAY
56342: ST_TO_ADDR
// end ;
56343: LD_VAR 0 3
56347: RET
// export function PlayerSeeMe ( unit ) ; begin
56348: LD_INT 0
56350: PPUSH
// result := See ( your_side , unit ) ;
56351: LD_ADDR_VAR 0 2
56355: PUSH
56356: LD_OWVAR 2
56360: PPUSH
56361: LD_VAR 0 1
56365: PPUSH
56366: CALL_OW 292
56370: ST_TO_ADDR
// end ;
56371: LD_VAR 0 2
56375: RET
// export function ReverseDir ( unit ) ; begin
56376: LD_INT 0
56378: PPUSH
// if not unit then
56379: LD_VAR 0 1
56383: NOT
56384: IFFALSE 56388
// exit ;
56386: GO 56411
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56388: LD_ADDR_VAR 0 2
56392: PUSH
56393: LD_VAR 0 1
56397: PPUSH
56398: CALL_OW 254
56402: PUSH
56403: LD_INT 3
56405: PLUS
56406: PUSH
56407: LD_INT 6
56409: MOD
56410: ST_TO_ADDR
// end ;
56411: LD_VAR 0 2
56415: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
56416: LD_INT 0
56418: PPUSH
56419: PPUSH
56420: PPUSH
56421: PPUSH
56422: PPUSH
// if not hexes then
56423: LD_VAR 0 2
56427: NOT
56428: IFFALSE 56432
// exit ;
56430: GO 56580
// dist := 9999 ;
56432: LD_ADDR_VAR 0 5
56436: PUSH
56437: LD_INT 9999
56439: ST_TO_ADDR
// for i = 1 to hexes do
56440: LD_ADDR_VAR 0 4
56444: PUSH
56445: DOUBLE
56446: LD_INT 1
56448: DEC
56449: ST_TO_ADDR
56450: LD_VAR 0 2
56454: PUSH
56455: FOR_TO
56456: IFFALSE 56568
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
56458: LD_VAR 0 1
56462: PPUSH
56463: LD_VAR 0 2
56467: PUSH
56468: LD_VAR 0 4
56472: ARRAY
56473: PUSH
56474: LD_INT 1
56476: ARRAY
56477: PPUSH
56478: LD_VAR 0 2
56482: PUSH
56483: LD_VAR 0 4
56487: ARRAY
56488: PUSH
56489: LD_INT 2
56491: ARRAY
56492: PPUSH
56493: CALL_OW 297
56497: PUSH
56498: LD_VAR 0 5
56502: LESS
56503: IFFALSE 56566
// begin hex := hexes [ i ] ;
56505: LD_ADDR_VAR 0 7
56509: PUSH
56510: LD_VAR 0 2
56514: PUSH
56515: LD_VAR 0 4
56519: ARRAY
56520: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56521: LD_ADDR_VAR 0 5
56525: PUSH
56526: LD_VAR 0 1
56530: PPUSH
56531: LD_VAR 0 2
56535: PUSH
56536: LD_VAR 0 4
56540: ARRAY
56541: PUSH
56542: LD_INT 1
56544: ARRAY
56545: PPUSH
56546: LD_VAR 0 2
56550: PUSH
56551: LD_VAR 0 4
56555: ARRAY
56556: PUSH
56557: LD_INT 2
56559: ARRAY
56560: PPUSH
56561: CALL_OW 297
56565: ST_TO_ADDR
// end ; end ;
56566: GO 56455
56568: POP
56569: POP
// result := hex ;
56570: LD_ADDR_VAR 0 3
56574: PUSH
56575: LD_VAR 0 7
56579: ST_TO_ADDR
// end ;
56580: LD_VAR 0 3
56584: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56585: LD_INT 0
56587: PPUSH
56588: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56589: LD_VAR 0 1
56593: NOT
56594: PUSH
56595: LD_VAR 0 1
56599: PUSH
56600: LD_INT 21
56602: PUSH
56603: LD_INT 2
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 23
56612: PUSH
56613: LD_INT 2
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PPUSH
56624: CALL_OW 69
56628: IN
56629: NOT
56630: OR
56631: IFFALSE 56635
// exit ;
56633: GO 56682
// for i = 1 to 3 do
56635: LD_ADDR_VAR 0 3
56639: PUSH
56640: DOUBLE
56641: LD_INT 1
56643: DEC
56644: ST_TO_ADDR
56645: LD_INT 3
56647: PUSH
56648: FOR_TO
56649: IFFALSE 56680
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56651: LD_VAR 0 1
56655: PPUSH
56656: CALL_OW 250
56660: PPUSH
56661: LD_VAR 0 1
56665: PPUSH
56666: CALL_OW 251
56670: PPUSH
56671: LD_INT 1
56673: PPUSH
56674: CALL_OW 453
56678: GO 56648
56680: POP
56681: POP
// end ;
56682: LD_VAR 0 2
56686: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56687: LD_INT 0
56689: PPUSH
56690: PPUSH
56691: PPUSH
56692: PPUSH
56693: PPUSH
56694: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
56695: LD_VAR 0 1
56699: NOT
56700: PUSH
56701: LD_VAR 0 2
56705: NOT
56706: OR
56707: PUSH
56708: LD_VAR 0 1
56712: PPUSH
56713: CALL_OW 314
56717: OR
56718: IFFALSE 56722
// exit ;
56720: GO 57163
// x := GetX ( enemy_unit ) ;
56722: LD_ADDR_VAR 0 7
56726: PUSH
56727: LD_VAR 0 2
56731: PPUSH
56732: CALL_OW 250
56736: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56737: LD_ADDR_VAR 0 8
56741: PUSH
56742: LD_VAR 0 2
56746: PPUSH
56747: CALL_OW 251
56751: ST_TO_ADDR
// if not x or not y then
56752: LD_VAR 0 7
56756: NOT
56757: PUSH
56758: LD_VAR 0 8
56762: NOT
56763: OR
56764: IFFALSE 56768
// exit ;
56766: GO 57163
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56768: LD_ADDR_VAR 0 6
56772: PUSH
56773: LD_VAR 0 7
56777: PPUSH
56778: LD_INT 0
56780: PPUSH
56781: LD_INT 4
56783: PPUSH
56784: CALL_OW 272
56788: PUSH
56789: LD_VAR 0 8
56793: PPUSH
56794: LD_INT 0
56796: PPUSH
56797: LD_INT 4
56799: PPUSH
56800: CALL_OW 273
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_VAR 0 7
56813: PPUSH
56814: LD_INT 1
56816: PPUSH
56817: LD_INT 4
56819: PPUSH
56820: CALL_OW 272
56824: PUSH
56825: LD_VAR 0 8
56829: PPUSH
56830: LD_INT 1
56832: PPUSH
56833: LD_INT 4
56835: PPUSH
56836: CALL_OW 273
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_VAR 0 7
56849: PPUSH
56850: LD_INT 2
56852: PPUSH
56853: LD_INT 4
56855: PPUSH
56856: CALL_OW 272
56860: PUSH
56861: LD_VAR 0 8
56865: PPUSH
56866: LD_INT 2
56868: PPUSH
56869: LD_INT 4
56871: PPUSH
56872: CALL_OW 273
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_VAR 0 7
56885: PPUSH
56886: LD_INT 3
56888: PPUSH
56889: LD_INT 4
56891: PPUSH
56892: CALL_OW 272
56896: PUSH
56897: LD_VAR 0 8
56901: PPUSH
56902: LD_INT 3
56904: PPUSH
56905: LD_INT 4
56907: PPUSH
56908: CALL_OW 273
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_VAR 0 7
56921: PPUSH
56922: LD_INT 4
56924: PPUSH
56925: LD_INT 4
56927: PPUSH
56928: CALL_OW 272
56932: PUSH
56933: LD_VAR 0 8
56937: PPUSH
56938: LD_INT 4
56940: PPUSH
56941: LD_INT 4
56943: PPUSH
56944: CALL_OW 273
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_VAR 0 7
56957: PPUSH
56958: LD_INT 5
56960: PPUSH
56961: LD_INT 4
56963: PPUSH
56964: CALL_OW 272
56968: PUSH
56969: LD_VAR 0 8
56973: PPUSH
56974: LD_INT 5
56976: PPUSH
56977: LD_INT 4
56979: PPUSH
56980: CALL_OW 273
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: ST_TO_ADDR
// for i = tmp downto 1 do
56997: LD_ADDR_VAR 0 4
57001: PUSH
57002: DOUBLE
57003: LD_VAR 0 6
57007: INC
57008: ST_TO_ADDR
57009: LD_INT 1
57011: PUSH
57012: FOR_DOWNTO
57013: IFFALSE 57114
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57015: LD_VAR 0 6
57019: PUSH
57020: LD_VAR 0 4
57024: ARRAY
57025: PUSH
57026: LD_INT 1
57028: ARRAY
57029: PPUSH
57030: LD_VAR 0 6
57034: PUSH
57035: LD_VAR 0 4
57039: ARRAY
57040: PUSH
57041: LD_INT 2
57043: ARRAY
57044: PPUSH
57045: CALL_OW 488
57049: NOT
57050: PUSH
57051: LD_VAR 0 6
57055: PUSH
57056: LD_VAR 0 4
57060: ARRAY
57061: PUSH
57062: LD_INT 1
57064: ARRAY
57065: PPUSH
57066: LD_VAR 0 6
57070: PUSH
57071: LD_VAR 0 4
57075: ARRAY
57076: PUSH
57077: LD_INT 2
57079: ARRAY
57080: PPUSH
57081: CALL_OW 428
57085: PUSH
57086: LD_INT 0
57088: NONEQUAL
57089: OR
57090: IFFALSE 57112
// tmp := Delete ( tmp , i ) ;
57092: LD_ADDR_VAR 0 6
57096: PUSH
57097: LD_VAR 0 6
57101: PPUSH
57102: LD_VAR 0 4
57106: PPUSH
57107: CALL_OW 3
57111: ST_TO_ADDR
57112: GO 57012
57114: POP
57115: POP
// j := GetClosestHex ( unit , tmp ) ;
57116: LD_ADDR_VAR 0 5
57120: PUSH
57121: LD_VAR 0 1
57125: PPUSH
57126: LD_VAR 0 6
57130: PPUSH
57131: CALL 56416 0 2
57135: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57136: LD_VAR 0 1
57140: PPUSH
57141: LD_VAR 0 5
57145: PUSH
57146: LD_INT 1
57148: ARRAY
57149: PPUSH
57150: LD_VAR 0 5
57154: PUSH
57155: LD_INT 2
57157: ARRAY
57158: PPUSH
57159: CALL_OW 111
// end ;
57163: LD_VAR 0 3
57167: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57168: LD_INT 0
57170: PPUSH
57171: PPUSH
57172: PPUSH
// uc_side = 0 ;
57173: LD_ADDR_OWVAR 20
57177: PUSH
57178: LD_INT 0
57180: ST_TO_ADDR
// uc_nation = 0 ;
57181: LD_ADDR_OWVAR 21
57185: PUSH
57186: LD_INT 0
57188: ST_TO_ADDR
// InitHc_All ( ) ;
57189: CALL_OW 584
// InitVc ;
57193: CALL_OW 20
// if mastodonts then
57197: LD_VAR 0 6
57201: IFFALSE 57268
// for i = 1 to mastodonts do
57203: LD_ADDR_VAR 0 11
57207: PUSH
57208: DOUBLE
57209: LD_INT 1
57211: DEC
57212: ST_TO_ADDR
57213: LD_VAR 0 6
57217: PUSH
57218: FOR_TO
57219: IFFALSE 57266
// begin vc_chassis := 31 ;
57221: LD_ADDR_OWVAR 37
57225: PUSH
57226: LD_INT 31
57228: ST_TO_ADDR
// vc_control := control_rider ;
57229: LD_ADDR_OWVAR 38
57233: PUSH
57234: LD_INT 4
57236: ST_TO_ADDR
// animal := CreateVehicle ;
57237: LD_ADDR_VAR 0 12
57241: PUSH
57242: CALL_OW 45
57246: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57247: LD_VAR 0 12
57251: PPUSH
57252: LD_VAR 0 8
57256: PPUSH
57257: LD_INT 0
57259: PPUSH
57260: CALL 59456 0 3
// end ;
57264: GO 57218
57266: POP
57267: POP
// if horses then
57268: LD_VAR 0 5
57272: IFFALSE 57339
// for i = 1 to horses do
57274: LD_ADDR_VAR 0 11
57278: PUSH
57279: DOUBLE
57280: LD_INT 1
57282: DEC
57283: ST_TO_ADDR
57284: LD_VAR 0 5
57288: PUSH
57289: FOR_TO
57290: IFFALSE 57337
// begin hc_class := 21 ;
57292: LD_ADDR_OWVAR 28
57296: PUSH
57297: LD_INT 21
57299: ST_TO_ADDR
// hc_gallery :=  ;
57300: LD_ADDR_OWVAR 33
57304: PUSH
57305: LD_STRING 
57307: ST_TO_ADDR
// animal := CreateHuman ;
57308: LD_ADDR_VAR 0 12
57312: PUSH
57313: CALL_OW 44
57317: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57318: LD_VAR 0 12
57322: PPUSH
57323: LD_VAR 0 8
57327: PPUSH
57328: LD_INT 0
57330: PPUSH
57331: CALL 59456 0 3
// end ;
57335: GO 57289
57337: POP
57338: POP
// if birds then
57339: LD_VAR 0 1
57343: IFFALSE 57410
// for i = 1 to birds do
57345: LD_ADDR_VAR 0 11
57349: PUSH
57350: DOUBLE
57351: LD_INT 1
57353: DEC
57354: ST_TO_ADDR
57355: LD_VAR 0 1
57359: PUSH
57360: FOR_TO
57361: IFFALSE 57408
// begin hc_class = 18 ;
57363: LD_ADDR_OWVAR 28
57367: PUSH
57368: LD_INT 18
57370: ST_TO_ADDR
// hc_gallery =  ;
57371: LD_ADDR_OWVAR 33
57375: PUSH
57376: LD_STRING 
57378: ST_TO_ADDR
// animal := CreateHuman ;
57379: LD_ADDR_VAR 0 12
57383: PUSH
57384: CALL_OW 44
57388: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57389: LD_VAR 0 12
57393: PPUSH
57394: LD_VAR 0 8
57398: PPUSH
57399: LD_INT 0
57401: PPUSH
57402: CALL 59456 0 3
// end ;
57406: GO 57360
57408: POP
57409: POP
// if tigers then
57410: LD_VAR 0 2
57414: IFFALSE 57498
// for i = 1 to tigers do
57416: LD_ADDR_VAR 0 11
57420: PUSH
57421: DOUBLE
57422: LD_INT 1
57424: DEC
57425: ST_TO_ADDR
57426: LD_VAR 0 2
57430: PUSH
57431: FOR_TO
57432: IFFALSE 57496
// begin hc_class = class_tiger ;
57434: LD_ADDR_OWVAR 28
57438: PUSH
57439: LD_INT 14
57441: ST_TO_ADDR
// hc_gallery =  ;
57442: LD_ADDR_OWVAR 33
57446: PUSH
57447: LD_STRING 
57449: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57450: LD_ADDR_OWVAR 35
57454: PUSH
57455: LD_INT 7
57457: NEG
57458: PPUSH
57459: LD_INT 7
57461: PPUSH
57462: CALL_OW 12
57466: ST_TO_ADDR
// animal := CreateHuman ;
57467: LD_ADDR_VAR 0 12
57471: PUSH
57472: CALL_OW 44
57476: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57477: LD_VAR 0 12
57481: PPUSH
57482: LD_VAR 0 8
57486: PPUSH
57487: LD_INT 0
57489: PPUSH
57490: CALL 59456 0 3
// end ;
57494: GO 57431
57496: POP
57497: POP
// if apemans then
57498: LD_VAR 0 3
57502: IFFALSE 57625
// for i = 1 to apemans do
57504: LD_ADDR_VAR 0 11
57508: PUSH
57509: DOUBLE
57510: LD_INT 1
57512: DEC
57513: ST_TO_ADDR
57514: LD_VAR 0 3
57518: PUSH
57519: FOR_TO
57520: IFFALSE 57623
// begin hc_class = class_apeman ;
57522: LD_ADDR_OWVAR 28
57526: PUSH
57527: LD_INT 12
57529: ST_TO_ADDR
// hc_gallery =  ;
57530: LD_ADDR_OWVAR 33
57534: PUSH
57535: LD_STRING 
57537: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
57538: LD_ADDR_OWVAR 35
57542: PUSH
57543: LD_INT 2
57545: NEG
57546: PPUSH
57547: LD_INT 2
57549: PPUSH
57550: CALL_OW 12
57554: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57555: LD_ADDR_OWVAR 31
57559: PUSH
57560: LD_INT 1
57562: PPUSH
57563: LD_INT 3
57565: PPUSH
57566: CALL_OW 12
57570: PUSH
57571: LD_INT 1
57573: PPUSH
57574: LD_INT 3
57576: PPUSH
57577: CALL_OW 12
57581: PUSH
57582: LD_INT 0
57584: PUSH
57585: LD_INT 0
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: ST_TO_ADDR
// animal := CreateHuman ;
57594: LD_ADDR_VAR 0 12
57598: PUSH
57599: CALL_OW 44
57603: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57604: LD_VAR 0 12
57608: PPUSH
57609: LD_VAR 0 8
57613: PPUSH
57614: LD_INT 0
57616: PPUSH
57617: CALL 59456 0 3
// end ;
57621: GO 57519
57623: POP
57624: POP
// if enchidnas then
57625: LD_VAR 0 4
57629: IFFALSE 57696
// for i = 1 to enchidnas do
57631: LD_ADDR_VAR 0 11
57635: PUSH
57636: DOUBLE
57637: LD_INT 1
57639: DEC
57640: ST_TO_ADDR
57641: LD_VAR 0 4
57645: PUSH
57646: FOR_TO
57647: IFFALSE 57694
// begin hc_class = 13 ;
57649: LD_ADDR_OWVAR 28
57653: PUSH
57654: LD_INT 13
57656: ST_TO_ADDR
// hc_gallery =  ;
57657: LD_ADDR_OWVAR 33
57661: PUSH
57662: LD_STRING 
57664: ST_TO_ADDR
// animal := CreateHuman ;
57665: LD_ADDR_VAR 0 12
57669: PUSH
57670: CALL_OW 44
57674: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57675: LD_VAR 0 12
57679: PPUSH
57680: LD_VAR 0 8
57684: PPUSH
57685: LD_INT 0
57687: PPUSH
57688: CALL 59456 0 3
// end ;
57692: GO 57646
57694: POP
57695: POP
// if fishes then
57696: LD_VAR 0 7
57700: IFFALSE 57767
// for i = 1 to fishes do
57702: LD_ADDR_VAR 0 11
57706: PUSH
57707: DOUBLE
57708: LD_INT 1
57710: DEC
57711: ST_TO_ADDR
57712: LD_VAR 0 7
57716: PUSH
57717: FOR_TO
57718: IFFALSE 57765
// begin hc_class = 20 ;
57720: LD_ADDR_OWVAR 28
57724: PUSH
57725: LD_INT 20
57727: ST_TO_ADDR
// hc_gallery =  ;
57728: LD_ADDR_OWVAR 33
57732: PUSH
57733: LD_STRING 
57735: ST_TO_ADDR
// animal := CreateHuman ;
57736: LD_ADDR_VAR 0 12
57740: PUSH
57741: CALL_OW 44
57745: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57746: LD_VAR 0 12
57750: PPUSH
57751: LD_VAR 0 9
57755: PPUSH
57756: LD_INT 0
57758: PPUSH
57759: CALL 59456 0 3
// end ;
57763: GO 57717
57765: POP
57766: POP
// end ;
57767: LD_VAR 0 10
57771: RET
// export function WantHeal ( sci , unit ) ; begin
57772: LD_INT 0
57774: PPUSH
// if GetTaskList ( sci ) > 0 then
57775: LD_VAR 0 1
57779: PPUSH
57780: CALL_OW 437
57784: PUSH
57785: LD_INT 0
57787: GREATER
57788: IFFALSE 57858
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57790: LD_VAR 0 1
57794: PPUSH
57795: CALL_OW 437
57799: PUSH
57800: LD_INT 1
57802: ARRAY
57803: PUSH
57804: LD_INT 1
57806: ARRAY
57807: PUSH
57808: LD_STRING l
57810: EQUAL
57811: PUSH
57812: LD_VAR 0 1
57816: PPUSH
57817: CALL_OW 437
57821: PUSH
57822: LD_INT 1
57824: ARRAY
57825: PUSH
57826: LD_INT 4
57828: ARRAY
57829: PUSH
57830: LD_VAR 0 2
57834: EQUAL
57835: AND
57836: IFFALSE 57848
// result := true else
57838: LD_ADDR_VAR 0 3
57842: PUSH
57843: LD_INT 1
57845: ST_TO_ADDR
57846: GO 57856
// result := false ;
57848: LD_ADDR_VAR 0 3
57852: PUSH
57853: LD_INT 0
57855: ST_TO_ADDR
// end else
57856: GO 57866
// result := false ;
57858: LD_ADDR_VAR 0 3
57862: PUSH
57863: LD_INT 0
57865: ST_TO_ADDR
// end ;
57866: LD_VAR 0 3
57870: RET
// export function HealTarget ( sci ) ; begin
57871: LD_INT 0
57873: PPUSH
// if not sci then
57874: LD_VAR 0 1
57878: NOT
57879: IFFALSE 57883
// exit ;
57881: GO 57948
// result := 0 ;
57883: LD_ADDR_VAR 0 2
57887: PUSH
57888: LD_INT 0
57890: ST_TO_ADDR
// if GetTaskList ( sci ) then
57891: LD_VAR 0 1
57895: PPUSH
57896: CALL_OW 437
57900: IFFALSE 57948
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57902: LD_VAR 0 1
57906: PPUSH
57907: CALL_OW 437
57911: PUSH
57912: LD_INT 1
57914: ARRAY
57915: PUSH
57916: LD_INT 1
57918: ARRAY
57919: PUSH
57920: LD_STRING l
57922: EQUAL
57923: IFFALSE 57948
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57925: LD_ADDR_VAR 0 2
57929: PUSH
57930: LD_VAR 0 1
57934: PPUSH
57935: CALL_OW 437
57939: PUSH
57940: LD_INT 1
57942: ARRAY
57943: PUSH
57944: LD_INT 4
57946: ARRAY
57947: ST_TO_ADDR
// end ;
57948: LD_VAR 0 2
57952: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57953: LD_INT 0
57955: PPUSH
57956: PPUSH
57957: PPUSH
57958: PPUSH
// if not base_units then
57959: LD_VAR 0 1
57963: NOT
57964: IFFALSE 57968
// exit ;
57966: GO 58055
// result := false ;
57968: LD_ADDR_VAR 0 2
57972: PUSH
57973: LD_INT 0
57975: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57976: LD_ADDR_VAR 0 5
57980: PUSH
57981: LD_VAR 0 1
57985: PPUSH
57986: LD_INT 21
57988: PUSH
57989: LD_INT 3
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PPUSH
57996: CALL_OW 72
58000: ST_TO_ADDR
// if not tmp then
58001: LD_VAR 0 5
58005: NOT
58006: IFFALSE 58010
// exit ;
58008: GO 58055
// for i in tmp do
58010: LD_ADDR_VAR 0 3
58014: PUSH
58015: LD_VAR 0 5
58019: PUSH
58020: FOR_IN
58021: IFFALSE 58053
// begin result := EnemyInRange ( i , 22 ) ;
58023: LD_ADDR_VAR 0 2
58027: PUSH
58028: LD_VAR 0 3
58032: PPUSH
58033: LD_INT 22
58035: PPUSH
58036: CALL 56291 0 2
58040: ST_TO_ADDR
// if result then
58041: LD_VAR 0 2
58045: IFFALSE 58051
// exit ;
58047: POP
58048: POP
58049: GO 58055
// end ;
58051: GO 58020
58053: POP
58054: POP
// end ;
58055: LD_VAR 0 2
58059: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
58060: LD_INT 0
58062: PPUSH
58063: PPUSH
// if not units then
58064: LD_VAR 0 1
58068: NOT
58069: IFFALSE 58073
// exit ;
58071: GO 58143
// result := [ ] ;
58073: LD_ADDR_VAR 0 3
58077: PUSH
58078: EMPTY
58079: ST_TO_ADDR
// for i in units do
58080: LD_ADDR_VAR 0 4
58084: PUSH
58085: LD_VAR 0 1
58089: PUSH
58090: FOR_IN
58091: IFFALSE 58141
// if GetTag ( i ) = tag then
58093: LD_VAR 0 4
58097: PPUSH
58098: CALL_OW 110
58102: PUSH
58103: LD_VAR 0 2
58107: EQUAL
58108: IFFALSE 58139
// result := Replace ( result , result + 1 , i ) ;
58110: LD_ADDR_VAR 0 3
58114: PUSH
58115: LD_VAR 0 3
58119: PPUSH
58120: LD_VAR 0 3
58124: PUSH
58125: LD_INT 1
58127: PLUS
58128: PPUSH
58129: LD_VAR 0 4
58133: PPUSH
58134: CALL_OW 1
58138: ST_TO_ADDR
58139: GO 58090
58141: POP
58142: POP
// end ;
58143: LD_VAR 0 3
58147: RET
// export function IsDriver ( un ) ; begin
58148: LD_INT 0
58150: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58151: LD_ADDR_VAR 0 2
58155: PUSH
58156: LD_VAR 0 1
58160: PUSH
58161: LD_INT 55
58163: PUSH
58164: EMPTY
58165: LIST
58166: PPUSH
58167: CALL_OW 69
58171: IN
58172: ST_TO_ADDR
// end ;
58173: LD_VAR 0 2
58177: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58178: LD_INT 0
58180: PPUSH
58181: PPUSH
// list := [ ] ;
58182: LD_ADDR_VAR 0 5
58186: PUSH
58187: EMPTY
58188: ST_TO_ADDR
// case d of 0 :
58189: LD_VAR 0 3
58193: PUSH
58194: LD_INT 0
58196: DOUBLE
58197: EQUAL
58198: IFTRUE 58202
58200: GO 58335
58202: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58203: LD_ADDR_VAR 0 5
58207: PUSH
58208: LD_VAR 0 1
58212: PUSH
58213: LD_INT 4
58215: MINUS
58216: PUSH
58217: LD_VAR 0 2
58221: PUSH
58222: LD_INT 4
58224: MINUS
58225: PUSH
58226: LD_INT 2
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: LIST
58233: PUSH
58234: LD_VAR 0 1
58238: PUSH
58239: LD_INT 3
58241: MINUS
58242: PUSH
58243: LD_VAR 0 2
58247: PUSH
58248: LD_INT 1
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: LIST
58255: PUSH
58256: LD_VAR 0 1
58260: PUSH
58261: LD_INT 4
58263: PLUS
58264: PUSH
58265: LD_VAR 0 2
58269: PUSH
58270: LD_INT 4
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: LIST
58277: PUSH
58278: LD_VAR 0 1
58282: PUSH
58283: LD_INT 3
58285: PLUS
58286: PUSH
58287: LD_VAR 0 2
58291: PUSH
58292: LD_INT 3
58294: PLUS
58295: PUSH
58296: LD_INT 5
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: LIST
58303: PUSH
58304: LD_VAR 0 1
58308: PUSH
58309: LD_VAR 0 2
58313: PUSH
58314: LD_INT 4
58316: PLUS
58317: PUSH
58318: LD_INT 0
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: LIST
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: ST_TO_ADDR
// end ; 1 :
58333: GO 59033
58335: LD_INT 1
58337: DOUBLE
58338: EQUAL
58339: IFTRUE 58343
58341: GO 58476
58343: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58344: LD_ADDR_VAR 0 5
58348: PUSH
58349: LD_VAR 0 1
58353: PUSH
58354: LD_VAR 0 2
58358: PUSH
58359: LD_INT 4
58361: MINUS
58362: PUSH
58363: LD_INT 3
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: LIST
58370: PUSH
58371: LD_VAR 0 1
58375: PUSH
58376: LD_INT 3
58378: MINUS
58379: PUSH
58380: LD_VAR 0 2
58384: PUSH
58385: LD_INT 3
58387: MINUS
58388: PUSH
58389: LD_INT 2
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: LIST
58396: PUSH
58397: LD_VAR 0 1
58401: PUSH
58402: LD_INT 4
58404: MINUS
58405: PUSH
58406: LD_VAR 0 2
58410: PUSH
58411: LD_INT 1
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: LIST
58418: PUSH
58419: LD_VAR 0 1
58423: PUSH
58424: LD_VAR 0 2
58428: PUSH
58429: LD_INT 3
58431: PLUS
58432: PUSH
58433: LD_INT 0
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: LIST
58440: PUSH
58441: LD_VAR 0 1
58445: PUSH
58446: LD_INT 4
58448: PLUS
58449: PUSH
58450: LD_VAR 0 2
58454: PUSH
58455: LD_INT 4
58457: PLUS
58458: PUSH
58459: LD_INT 5
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: LIST
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: ST_TO_ADDR
// end ; 2 :
58474: GO 59033
58476: LD_INT 2
58478: DOUBLE
58479: EQUAL
58480: IFTRUE 58484
58482: GO 58613
58484: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58485: LD_ADDR_VAR 0 5
58489: PUSH
58490: LD_VAR 0 1
58494: PUSH
58495: LD_VAR 0 2
58499: PUSH
58500: LD_INT 3
58502: MINUS
58503: PUSH
58504: LD_INT 3
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: LIST
58511: PUSH
58512: LD_VAR 0 1
58516: PUSH
58517: LD_INT 4
58519: PLUS
58520: PUSH
58521: LD_VAR 0 2
58525: PUSH
58526: LD_INT 4
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: LIST
58533: PUSH
58534: LD_VAR 0 1
58538: PUSH
58539: LD_VAR 0 2
58543: PUSH
58544: LD_INT 4
58546: PLUS
58547: PUSH
58548: LD_INT 0
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: LIST
58555: PUSH
58556: LD_VAR 0 1
58560: PUSH
58561: LD_INT 3
58563: MINUS
58564: PUSH
58565: LD_VAR 0 2
58569: PUSH
58570: LD_INT 1
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: LIST
58577: PUSH
58578: LD_VAR 0 1
58582: PUSH
58583: LD_INT 4
58585: MINUS
58586: PUSH
58587: LD_VAR 0 2
58591: PUSH
58592: LD_INT 4
58594: MINUS
58595: PUSH
58596: LD_INT 2
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: LIST
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: ST_TO_ADDR
// end ; 3 :
58611: GO 59033
58613: LD_INT 3
58615: DOUBLE
58616: EQUAL
58617: IFTRUE 58621
58619: GO 58754
58621: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58622: LD_ADDR_VAR 0 5
58626: PUSH
58627: LD_VAR 0 1
58631: PUSH
58632: LD_INT 3
58634: PLUS
58635: PUSH
58636: LD_VAR 0 2
58640: PUSH
58641: LD_INT 4
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: LIST
58648: PUSH
58649: LD_VAR 0 1
58653: PUSH
58654: LD_INT 4
58656: PLUS
58657: PUSH
58658: LD_VAR 0 2
58662: PUSH
58663: LD_INT 4
58665: PLUS
58666: PUSH
58667: LD_INT 5
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: LIST
58674: PUSH
58675: LD_VAR 0 1
58679: PUSH
58680: LD_INT 4
58682: MINUS
58683: PUSH
58684: LD_VAR 0 2
58688: PUSH
58689: LD_INT 1
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: LIST
58696: PUSH
58697: LD_VAR 0 1
58701: PUSH
58702: LD_VAR 0 2
58706: PUSH
58707: LD_INT 4
58709: MINUS
58710: PUSH
58711: LD_INT 3
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: LIST
58718: PUSH
58719: LD_VAR 0 1
58723: PUSH
58724: LD_INT 3
58726: MINUS
58727: PUSH
58728: LD_VAR 0 2
58732: PUSH
58733: LD_INT 3
58735: MINUS
58736: PUSH
58737: LD_INT 2
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: LIST
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: ST_TO_ADDR
// end ; 4 :
58752: GO 59033
58754: LD_INT 4
58756: DOUBLE
58757: EQUAL
58758: IFTRUE 58762
58760: GO 58895
58762: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58763: LD_ADDR_VAR 0 5
58767: PUSH
58768: LD_VAR 0 1
58772: PUSH
58773: LD_VAR 0 2
58777: PUSH
58778: LD_INT 4
58780: PLUS
58781: PUSH
58782: LD_INT 0
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: LIST
58789: PUSH
58790: LD_VAR 0 1
58794: PUSH
58795: LD_INT 3
58797: PLUS
58798: PUSH
58799: LD_VAR 0 2
58803: PUSH
58804: LD_INT 3
58806: PLUS
58807: PUSH
58808: LD_INT 5
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: LIST
58815: PUSH
58816: LD_VAR 0 1
58820: PUSH
58821: LD_INT 4
58823: PLUS
58824: PUSH
58825: LD_VAR 0 2
58829: PUSH
58830: LD_INT 4
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: LIST
58837: PUSH
58838: LD_VAR 0 1
58842: PUSH
58843: LD_VAR 0 2
58847: PUSH
58848: LD_INT 3
58850: MINUS
58851: PUSH
58852: LD_INT 3
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: LIST
58859: PUSH
58860: LD_VAR 0 1
58864: PUSH
58865: LD_INT 4
58867: MINUS
58868: PUSH
58869: LD_VAR 0 2
58873: PUSH
58874: LD_INT 4
58876: MINUS
58877: PUSH
58878: LD_INT 2
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: LIST
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: ST_TO_ADDR
// end ; 5 :
58893: GO 59033
58895: LD_INT 5
58897: DOUBLE
58898: EQUAL
58899: IFTRUE 58903
58901: GO 59032
58903: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58904: LD_ADDR_VAR 0 5
58908: PUSH
58909: LD_VAR 0 1
58913: PUSH
58914: LD_INT 4
58916: MINUS
58917: PUSH
58918: LD_VAR 0 2
58922: PUSH
58923: LD_INT 1
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: LIST
58930: PUSH
58931: LD_VAR 0 1
58935: PUSH
58936: LD_VAR 0 2
58940: PUSH
58941: LD_INT 4
58943: MINUS
58944: PUSH
58945: LD_INT 3
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: LIST
58952: PUSH
58953: LD_VAR 0 1
58957: PUSH
58958: LD_INT 4
58960: PLUS
58961: PUSH
58962: LD_VAR 0 2
58966: PUSH
58967: LD_INT 4
58969: PLUS
58970: PUSH
58971: LD_INT 5
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: LIST
58978: PUSH
58979: LD_VAR 0 1
58983: PUSH
58984: LD_INT 3
58986: PLUS
58987: PUSH
58988: LD_VAR 0 2
58992: PUSH
58993: LD_INT 4
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: LIST
59000: PUSH
59001: LD_VAR 0 1
59005: PUSH
59006: LD_VAR 0 2
59010: PUSH
59011: LD_INT 3
59013: PLUS
59014: PUSH
59015: LD_INT 0
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: LIST
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: ST_TO_ADDR
// end ; end ;
59030: GO 59033
59032: POP
// result := list ;
59033: LD_ADDR_VAR 0 4
59037: PUSH
59038: LD_VAR 0 5
59042: ST_TO_ADDR
// end ;
59043: LD_VAR 0 4
59047: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59048: LD_INT 0
59050: PPUSH
59051: PPUSH
59052: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59053: LD_VAR 0 1
59057: NOT
59058: PUSH
59059: LD_VAR 0 2
59063: PUSH
59064: LD_INT 1
59066: PUSH
59067: LD_INT 2
59069: PUSH
59070: LD_INT 3
59072: PUSH
59073: LD_INT 4
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: IN
59082: NOT
59083: OR
59084: IFFALSE 59088
// exit ;
59086: GO 59180
// tmp := [ ] ;
59088: LD_ADDR_VAR 0 5
59092: PUSH
59093: EMPTY
59094: ST_TO_ADDR
// for i in units do
59095: LD_ADDR_VAR 0 4
59099: PUSH
59100: LD_VAR 0 1
59104: PUSH
59105: FOR_IN
59106: IFFALSE 59149
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59108: LD_ADDR_VAR 0 5
59112: PUSH
59113: LD_VAR 0 5
59117: PPUSH
59118: LD_VAR 0 5
59122: PUSH
59123: LD_INT 1
59125: PLUS
59126: PPUSH
59127: LD_VAR 0 4
59131: PPUSH
59132: LD_VAR 0 2
59136: PPUSH
59137: CALL_OW 259
59141: PPUSH
59142: CALL_OW 2
59146: ST_TO_ADDR
59147: GO 59105
59149: POP
59150: POP
// if not tmp then
59151: LD_VAR 0 5
59155: NOT
59156: IFFALSE 59160
// exit ;
59158: GO 59180
// result := SortListByListDesc ( units , tmp ) ;
59160: LD_ADDR_VAR 0 3
59164: PUSH
59165: LD_VAR 0 1
59169: PPUSH
59170: LD_VAR 0 5
59174: PPUSH
59175: CALL_OW 77
59179: ST_TO_ADDR
// end ;
59180: LD_VAR 0 3
59184: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59185: LD_INT 0
59187: PPUSH
59188: PPUSH
59189: PPUSH
// result := false ;
59190: LD_ADDR_VAR 0 3
59194: PUSH
59195: LD_INT 0
59197: ST_TO_ADDR
// x := GetX ( building ) ;
59198: LD_ADDR_VAR 0 4
59202: PUSH
59203: LD_VAR 0 2
59207: PPUSH
59208: CALL_OW 250
59212: ST_TO_ADDR
// y := GetY ( building ) ;
59213: LD_ADDR_VAR 0 5
59217: PUSH
59218: LD_VAR 0 2
59222: PPUSH
59223: CALL_OW 251
59227: ST_TO_ADDR
// if not building or not x or not y then
59228: LD_VAR 0 2
59232: NOT
59233: PUSH
59234: LD_VAR 0 4
59238: NOT
59239: OR
59240: PUSH
59241: LD_VAR 0 5
59245: NOT
59246: OR
59247: IFFALSE 59251
// exit ;
59249: GO 59343
// if GetTaskList ( unit ) then
59251: LD_VAR 0 1
59255: PPUSH
59256: CALL_OW 437
59260: IFFALSE 59343
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59262: LD_STRING e
59264: PUSH
59265: LD_VAR 0 1
59269: PPUSH
59270: CALL_OW 437
59274: PUSH
59275: LD_INT 1
59277: ARRAY
59278: PUSH
59279: LD_INT 1
59281: ARRAY
59282: EQUAL
59283: PUSH
59284: LD_VAR 0 4
59288: PUSH
59289: LD_VAR 0 1
59293: PPUSH
59294: CALL_OW 437
59298: PUSH
59299: LD_INT 1
59301: ARRAY
59302: PUSH
59303: LD_INT 2
59305: ARRAY
59306: EQUAL
59307: AND
59308: PUSH
59309: LD_VAR 0 5
59313: PUSH
59314: LD_VAR 0 1
59318: PPUSH
59319: CALL_OW 437
59323: PUSH
59324: LD_INT 1
59326: ARRAY
59327: PUSH
59328: LD_INT 3
59330: ARRAY
59331: EQUAL
59332: AND
59333: IFFALSE 59343
// result := true end ;
59335: LD_ADDR_VAR 0 3
59339: PUSH
59340: LD_INT 1
59342: ST_TO_ADDR
// end ;
59343: LD_VAR 0 3
59347: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59348: LD_INT 0
59350: PPUSH
// result := false ;
59351: LD_ADDR_VAR 0 4
59355: PUSH
59356: LD_INT 0
59358: ST_TO_ADDR
// if GetTaskList ( unit ) then
59359: LD_VAR 0 1
59363: PPUSH
59364: CALL_OW 437
59368: IFFALSE 59451
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59370: LD_STRING M
59372: PUSH
59373: LD_VAR 0 1
59377: PPUSH
59378: CALL_OW 437
59382: PUSH
59383: LD_INT 1
59385: ARRAY
59386: PUSH
59387: LD_INT 1
59389: ARRAY
59390: EQUAL
59391: PUSH
59392: LD_VAR 0 2
59396: PUSH
59397: LD_VAR 0 1
59401: PPUSH
59402: CALL_OW 437
59406: PUSH
59407: LD_INT 1
59409: ARRAY
59410: PUSH
59411: LD_INT 2
59413: ARRAY
59414: EQUAL
59415: AND
59416: PUSH
59417: LD_VAR 0 3
59421: PUSH
59422: LD_VAR 0 1
59426: PPUSH
59427: CALL_OW 437
59431: PUSH
59432: LD_INT 1
59434: ARRAY
59435: PUSH
59436: LD_INT 3
59438: ARRAY
59439: EQUAL
59440: AND
59441: IFFALSE 59451
// result := true ;
59443: LD_ADDR_VAR 0 4
59447: PUSH
59448: LD_INT 1
59450: ST_TO_ADDR
// end ; end ;
59451: LD_VAR 0 4
59455: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59456: LD_INT 0
59458: PPUSH
59459: PPUSH
59460: PPUSH
59461: PPUSH
// if not unit or not area then
59462: LD_VAR 0 1
59466: NOT
59467: PUSH
59468: LD_VAR 0 2
59472: NOT
59473: OR
59474: IFFALSE 59478
// exit ;
59476: GO 59642
// tmp := AreaToList ( area , i ) ;
59478: LD_ADDR_VAR 0 6
59482: PUSH
59483: LD_VAR 0 2
59487: PPUSH
59488: LD_VAR 0 5
59492: PPUSH
59493: CALL_OW 517
59497: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59498: LD_ADDR_VAR 0 5
59502: PUSH
59503: DOUBLE
59504: LD_INT 1
59506: DEC
59507: ST_TO_ADDR
59508: LD_VAR 0 6
59512: PUSH
59513: LD_INT 1
59515: ARRAY
59516: PUSH
59517: FOR_TO
59518: IFFALSE 59640
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59520: LD_ADDR_VAR 0 7
59524: PUSH
59525: LD_VAR 0 6
59529: PUSH
59530: LD_INT 1
59532: ARRAY
59533: PUSH
59534: LD_VAR 0 5
59538: ARRAY
59539: PUSH
59540: LD_VAR 0 6
59544: PUSH
59545: LD_INT 2
59547: ARRAY
59548: PUSH
59549: LD_VAR 0 5
59553: ARRAY
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
59559: LD_VAR 0 7
59563: PUSH
59564: LD_INT 1
59566: ARRAY
59567: PPUSH
59568: LD_VAR 0 7
59572: PUSH
59573: LD_INT 2
59575: ARRAY
59576: PPUSH
59577: CALL_OW 428
59581: PUSH
59582: LD_INT 0
59584: EQUAL
59585: IFFALSE 59638
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59587: LD_VAR 0 1
59591: PPUSH
59592: LD_VAR 0 7
59596: PUSH
59597: LD_INT 1
59599: ARRAY
59600: PPUSH
59601: LD_VAR 0 7
59605: PUSH
59606: LD_INT 2
59608: ARRAY
59609: PPUSH
59610: LD_VAR 0 3
59614: PPUSH
59615: CALL_OW 48
// result := IsPlaced ( unit ) ;
59619: LD_ADDR_VAR 0 4
59623: PUSH
59624: LD_VAR 0 1
59628: PPUSH
59629: CALL_OW 305
59633: ST_TO_ADDR
// exit ;
59634: POP
59635: POP
59636: GO 59642
// end ; end ;
59638: GO 59517
59640: POP
59641: POP
// end ;
59642: LD_VAR 0 4
59646: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59647: LD_INT 0
59649: PPUSH
59650: PPUSH
59651: PPUSH
// if not side or side > 8 then
59652: LD_VAR 0 1
59656: NOT
59657: PUSH
59658: LD_VAR 0 1
59662: PUSH
59663: LD_INT 8
59665: GREATER
59666: OR
59667: IFFALSE 59671
// exit ;
59669: GO 59858
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59671: LD_ADDR_VAR 0 4
59675: PUSH
59676: LD_INT 22
59678: PUSH
59679: LD_VAR 0 1
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 21
59690: PUSH
59691: LD_INT 3
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PPUSH
59702: CALL_OW 69
59706: ST_TO_ADDR
// if not tmp then
59707: LD_VAR 0 4
59711: NOT
59712: IFFALSE 59716
// exit ;
59714: GO 59858
// enable_addtolog := true ;
59716: LD_ADDR_OWVAR 81
59720: PUSH
59721: LD_INT 1
59723: ST_TO_ADDR
// AddToLog ( [ ) ;
59724: LD_STRING [
59726: PPUSH
59727: CALL_OW 561
// for i in tmp do
59731: LD_ADDR_VAR 0 3
59735: PUSH
59736: LD_VAR 0 4
59740: PUSH
59741: FOR_IN
59742: IFFALSE 59849
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59744: LD_STRING [
59746: PUSH
59747: LD_VAR 0 3
59751: PPUSH
59752: CALL_OW 266
59756: STR
59757: PUSH
59758: LD_STRING , 
59760: STR
59761: PUSH
59762: LD_VAR 0 3
59766: PPUSH
59767: CALL_OW 250
59771: STR
59772: PUSH
59773: LD_STRING , 
59775: STR
59776: PUSH
59777: LD_VAR 0 3
59781: PPUSH
59782: CALL_OW 251
59786: STR
59787: PUSH
59788: LD_STRING , 
59790: STR
59791: PUSH
59792: LD_VAR 0 3
59796: PPUSH
59797: CALL_OW 254
59801: STR
59802: PUSH
59803: LD_STRING , 
59805: STR
59806: PUSH
59807: LD_VAR 0 3
59811: PPUSH
59812: LD_INT 1
59814: PPUSH
59815: CALL_OW 268
59819: STR
59820: PUSH
59821: LD_STRING , 
59823: STR
59824: PUSH
59825: LD_VAR 0 3
59829: PPUSH
59830: LD_INT 2
59832: PPUSH
59833: CALL_OW 268
59837: STR
59838: PUSH
59839: LD_STRING ],
59841: STR
59842: PPUSH
59843: CALL_OW 561
// end ;
59847: GO 59741
59849: POP
59850: POP
// AddToLog ( ]; ) ;
59851: LD_STRING ];
59853: PPUSH
59854: CALL_OW 561
// end ;
59858: LD_VAR 0 2
59862: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59863: LD_INT 0
59865: PPUSH
59866: PPUSH
59867: PPUSH
59868: PPUSH
59869: PPUSH
// if not area or not rate or not max then
59870: LD_VAR 0 1
59874: NOT
59875: PUSH
59876: LD_VAR 0 2
59880: NOT
59881: OR
59882: PUSH
59883: LD_VAR 0 4
59887: NOT
59888: OR
59889: IFFALSE 59893
// exit ;
59891: GO 60085
// while 1 do
59893: LD_INT 1
59895: IFFALSE 60085
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59897: LD_ADDR_VAR 0 9
59901: PUSH
59902: LD_VAR 0 1
59906: PPUSH
59907: LD_INT 1
59909: PPUSH
59910: CALL_OW 287
59914: PUSH
59915: LD_INT 10
59917: MUL
59918: ST_TO_ADDR
// r := rate / 10 ;
59919: LD_ADDR_VAR 0 7
59923: PUSH
59924: LD_VAR 0 2
59928: PUSH
59929: LD_INT 10
59931: DIVREAL
59932: ST_TO_ADDR
// time := 1 1$00 ;
59933: LD_ADDR_VAR 0 8
59937: PUSH
59938: LD_INT 2100
59940: ST_TO_ADDR
// if amount < min then
59941: LD_VAR 0 9
59945: PUSH
59946: LD_VAR 0 3
59950: LESS
59951: IFFALSE 59969
// r := r * 2 else
59953: LD_ADDR_VAR 0 7
59957: PUSH
59958: LD_VAR 0 7
59962: PUSH
59963: LD_INT 2
59965: MUL
59966: ST_TO_ADDR
59967: GO 59995
// if amount > max then
59969: LD_VAR 0 9
59973: PUSH
59974: LD_VAR 0 4
59978: GREATER
59979: IFFALSE 59995
// r := r / 2 ;
59981: LD_ADDR_VAR 0 7
59985: PUSH
59986: LD_VAR 0 7
59990: PUSH
59991: LD_INT 2
59993: DIVREAL
59994: ST_TO_ADDR
// time := time / r ;
59995: LD_ADDR_VAR 0 8
59999: PUSH
60000: LD_VAR 0 8
60004: PUSH
60005: LD_VAR 0 7
60009: DIVREAL
60010: ST_TO_ADDR
// if time < 0 then
60011: LD_VAR 0 8
60015: PUSH
60016: LD_INT 0
60018: LESS
60019: IFFALSE 60036
// time := time * - 1 ;
60021: LD_ADDR_VAR 0 8
60025: PUSH
60026: LD_VAR 0 8
60030: PUSH
60031: LD_INT 1
60033: NEG
60034: MUL
60035: ST_TO_ADDR
// wait ( time ) ;
60036: LD_VAR 0 8
60040: PPUSH
60041: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
60045: LD_INT 35
60047: PPUSH
60048: LD_INT 875
60050: PPUSH
60051: CALL_OW 12
60055: PPUSH
60056: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60060: LD_INT 1
60062: PPUSH
60063: LD_INT 5
60065: PPUSH
60066: CALL_OW 12
60070: PPUSH
60071: LD_VAR 0 1
60075: PPUSH
60076: LD_INT 1
60078: PPUSH
60079: CALL_OW 55
// end ;
60083: GO 59893
// end ;
60085: LD_VAR 0 5
60089: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60090: LD_INT 0
60092: PPUSH
60093: PPUSH
60094: PPUSH
60095: PPUSH
60096: PPUSH
60097: PPUSH
60098: PPUSH
60099: PPUSH
// if not turrets or not factories then
60100: LD_VAR 0 1
60104: NOT
60105: PUSH
60106: LD_VAR 0 2
60110: NOT
60111: OR
60112: IFFALSE 60116
// exit ;
60114: GO 60423
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60116: LD_ADDR_VAR 0 10
60120: PUSH
60121: LD_INT 5
60123: PUSH
60124: LD_INT 6
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 2
60133: PUSH
60134: LD_INT 4
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 3
60143: PUSH
60144: LD_INT 5
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 24
60158: PUSH
60159: LD_INT 25
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 23
60168: PUSH
60169: LD_INT 27
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 42
60182: PUSH
60183: LD_INT 43
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 44
60192: PUSH
60193: LD_INT 46
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 45
60202: PUSH
60203: LD_INT 47
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: LIST
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: LIST
60219: ST_TO_ADDR
// result := [ ] ;
60220: LD_ADDR_VAR 0 3
60224: PUSH
60225: EMPTY
60226: ST_TO_ADDR
// for i in turrets do
60227: LD_ADDR_VAR 0 4
60231: PUSH
60232: LD_VAR 0 1
60236: PUSH
60237: FOR_IN
60238: IFFALSE 60421
// begin nat := GetNation ( i ) ;
60240: LD_ADDR_VAR 0 7
60244: PUSH
60245: LD_VAR 0 4
60249: PPUSH
60250: CALL_OW 248
60254: ST_TO_ADDR
// weapon := 0 ;
60255: LD_ADDR_VAR 0 8
60259: PUSH
60260: LD_INT 0
60262: ST_TO_ADDR
// if not nat then
60263: LD_VAR 0 7
60267: NOT
60268: IFFALSE 60272
// continue ;
60270: GO 60237
// for j in list [ nat ] do
60272: LD_ADDR_VAR 0 5
60276: PUSH
60277: LD_VAR 0 10
60281: PUSH
60282: LD_VAR 0 7
60286: ARRAY
60287: PUSH
60288: FOR_IN
60289: IFFALSE 60330
// if GetBWeapon ( i ) = j [ 1 ] then
60291: LD_VAR 0 4
60295: PPUSH
60296: CALL_OW 269
60300: PUSH
60301: LD_VAR 0 5
60305: PUSH
60306: LD_INT 1
60308: ARRAY
60309: EQUAL
60310: IFFALSE 60328
// begin weapon := j [ 2 ] ;
60312: LD_ADDR_VAR 0 8
60316: PUSH
60317: LD_VAR 0 5
60321: PUSH
60322: LD_INT 2
60324: ARRAY
60325: ST_TO_ADDR
// break ;
60326: GO 60330
// end ;
60328: GO 60288
60330: POP
60331: POP
// if not weapon then
60332: LD_VAR 0 8
60336: NOT
60337: IFFALSE 60341
// continue ;
60339: GO 60237
// for k in factories do
60341: LD_ADDR_VAR 0 6
60345: PUSH
60346: LD_VAR 0 2
60350: PUSH
60351: FOR_IN
60352: IFFALSE 60417
// begin weapons := AvailableWeaponList ( k ) ;
60354: LD_ADDR_VAR 0 9
60358: PUSH
60359: LD_VAR 0 6
60363: PPUSH
60364: CALL_OW 478
60368: ST_TO_ADDR
// if not weapons then
60369: LD_VAR 0 9
60373: NOT
60374: IFFALSE 60378
// continue ;
60376: GO 60351
// if weapon in weapons then
60378: LD_VAR 0 8
60382: PUSH
60383: LD_VAR 0 9
60387: IN
60388: IFFALSE 60415
// begin result := [ i , weapon ] ;
60390: LD_ADDR_VAR 0 3
60394: PUSH
60395: LD_VAR 0 4
60399: PUSH
60400: LD_VAR 0 8
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: ST_TO_ADDR
// exit ;
60409: POP
60410: POP
60411: POP
60412: POP
60413: GO 60423
// end ; end ;
60415: GO 60351
60417: POP
60418: POP
// end ;
60419: GO 60237
60421: POP
60422: POP
// end ;
60423: LD_VAR 0 3
60427: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60428: LD_INT 0
60430: PPUSH
// if not side or side > 8 then
60431: LD_VAR 0 3
60435: NOT
60436: PUSH
60437: LD_VAR 0 3
60441: PUSH
60442: LD_INT 8
60444: GREATER
60445: OR
60446: IFFALSE 60450
// exit ;
60448: GO 60509
// if not range then
60450: LD_VAR 0 4
60454: NOT
60455: IFFALSE 60466
// range := - 12 ;
60457: LD_ADDR_VAR 0 4
60461: PUSH
60462: LD_INT 12
60464: NEG
60465: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60466: LD_VAR 0 1
60470: PPUSH
60471: LD_VAR 0 2
60475: PPUSH
60476: LD_VAR 0 3
60480: PPUSH
60481: LD_VAR 0 4
60485: PPUSH
60486: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60490: LD_VAR 0 1
60494: PPUSH
60495: LD_VAR 0 2
60499: PPUSH
60500: LD_VAR 0 3
60504: PPUSH
60505: CALL_OW 331
// end ;
60509: LD_VAR 0 5
60513: RET
// export function Video ( mode ) ; begin
60514: LD_INT 0
60516: PPUSH
// ingame_video = mode ;
60517: LD_ADDR_OWVAR 52
60521: PUSH
60522: LD_VAR 0 1
60526: ST_TO_ADDR
// interface_hidden = mode ;
60527: LD_ADDR_OWVAR 54
60531: PUSH
60532: LD_VAR 0 1
60536: ST_TO_ADDR
// end ;
60537: LD_VAR 0 2
60541: RET
// export function Join ( array , element ) ; begin
60542: LD_INT 0
60544: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60545: LD_ADDR_VAR 0 3
60549: PUSH
60550: LD_VAR 0 1
60554: PPUSH
60555: LD_VAR 0 1
60559: PUSH
60560: LD_INT 1
60562: PLUS
60563: PPUSH
60564: LD_VAR 0 2
60568: PPUSH
60569: CALL_OW 1
60573: ST_TO_ADDR
// end ;
60574: LD_VAR 0 3
60578: RET
// export function JoinUnion ( array , element ) ; begin
60579: LD_INT 0
60581: PPUSH
// result := array union element ;
60582: LD_ADDR_VAR 0 3
60586: PUSH
60587: LD_VAR 0 1
60591: PUSH
60592: LD_VAR 0 2
60596: UNION
60597: ST_TO_ADDR
// end ;
60598: LD_VAR 0 3
60602: RET
// export function GetBehemoths ( side ) ; begin
60603: LD_INT 0
60605: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
60606: LD_ADDR_VAR 0 2
60610: PUSH
60611: LD_INT 22
60613: PUSH
60614: LD_VAR 0 1
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 31
60625: PUSH
60626: LD_INT 25
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PPUSH
60637: CALL_OW 69
60641: ST_TO_ADDR
// end ;
60642: LD_VAR 0 2
60646: RET
// export function Shuffle ( array ) ; var i , index ; begin
60647: LD_INT 0
60649: PPUSH
60650: PPUSH
60651: PPUSH
// result := [ ] ;
60652: LD_ADDR_VAR 0 2
60656: PUSH
60657: EMPTY
60658: ST_TO_ADDR
// if not array then
60659: LD_VAR 0 1
60663: NOT
60664: IFFALSE 60668
// exit ;
60666: GO 60767
// Randomize ;
60668: CALL_OW 10
// for i = array downto 1 do
60672: LD_ADDR_VAR 0 3
60676: PUSH
60677: DOUBLE
60678: LD_VAR 0 1
60682: INC
60683: ST_TO_ADDR
60684: LD_INT 1
60686: PUSH
60687: FOR_DOWNTO
60688: IFFALSE 60765
// begin index := rand ( 1 , array ) ;
60690: LD_ADDR_VAR 0 4
60694: PUSH
60695: LD_INT 1
60697: PPUSH
60698: LD_VAR 0 1
60702: PPUSH
60703: CALL_OW 12
60707: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60708: LD_ADDR_VAR 0 2
60712: PUSH
60713: LD_VAR 0 2
60717: PPUSH
60718: LD_VAR 0 2
60722: PUSH
60723: LD_INT 1
60725: PLUS
60726: PPUSH
60727: LD_VAR 0 1
60731: PUSH
60732: LD_VAR 0 4
60736: ARRAY
60737: PPUSH
60738: CALL_OW 2
60742: ST_TO_ADDR
// array := Delete ( array , index ) ;
60743: LD_ADDR_VAR 0 1
60747: PUSH
60748: LD_VAR 0 1
60752: PPUSH
60753: LD_VAR 0 4
60757: PPUSH
60758: CALL_OW 3
60762: ST_TO_ADDR
// end ;
60763: GO 60687
60765: POP
60766: POP
// end ;
60767: LD_VAR 0 2
60771: RET
// export function GetBaseMaterials ( base ) ; begin
60772: LD_INT 0
60774: PPUSH
// result := [ 0 , 0 , 0 ] ;
60775: LD_ADDR_VAR 0 2
60779: PUSH
60780: LD_INT 0
60782: PUSH
60783: LD_INT 0
60785: PUSH
60786: LD_INT 0
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: LIST
60793: ST_TO_ADDR
// if not base then
60794: LD_VAR 0 1
60798: NOT
60799: IFFALSE 60803
// exit ;
60801: GO 60852
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60803: LD_ADDR_VAR 0 2
60807: PUSH
60808: LD_VAR 0 1
60812: PPUSH
60813: LD_INT 1
60815: PPUSH
60816: CALL_OW 275
60820: PUSH
60821: LD_VAR 0 1
60825: PPUSH
60826: LD_INT 2
60828: PPUSH
60829: CALL_OW 275
60833: PUSH
60834: LD_VAR 0 1
60838: PPUSH
60839: LD_INT 3
60841: PPUSH
60842: CALL_OW 275
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: LIST
60851: ST_TO_ADDR
// end ;
60852: LD_VAR 0 2
60856: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60857: LD_INT 0
60859: PPUSH
60860: PPUSH
// result := array ;
60861: LD_ADDR_VAR 0 3
60865: PUSH
60866: LD_VAR 0 1
60870: ST_TO_ADDR
// if size > 0 then
60871: LD_VAR 0 2
60875: PUSH
60876: LD_INT 0
60878: GREATER
60879: IFFALSE 60925
// for i := array downto size do
60881: LD_ADDR_VAR 0 4
60885: PUSH
60886: DOUBLE
60887: LD_VAR 0 1
60891: INC
60892: ST_TO_ADDR
60893: LD_VAR 0 2
60897: PUSH
60898: FOR_DOWNTO
60899: IFFALSE 60923
// result := Delete ( result , result ) ;
60901: LD_ADDR_VAR 0 3
60905: PUSH
60906: LD_VAR 0 3
60910: PPUSH
60911: LD_VAR 0 3
60915: PPUSH
60916: CALL_OW 3
60920: ST_TO_ADDR
60921: GO 60898
60923: POP
60924: POP
// end ;
60925: LD_VAR 0 3
60929: RET
// export function ComExit ( unit ) ; var tmp ; begin
60930: LD_INT 0
60932: PPUSH
60933: PPUSH
// if not IsInUnit ( unit ) then
60934: LD_VAR 0 1
60938: PPUSH
60939: CALL_OW 310
60943: NOT
60944: IFFALSE 60948
// exit ;
60946: GO 61008
// tmp := IsInUnit ( unit ) ;
60948: LD_ADDR_VAR 0 3
60952: PUSH
60953: LD_VAR 0 1
60957: PPUSH
60958: CALL_OW 310
60962: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60963: LD_VAR 0 3
60967: PPUSH
60968: CALL_OW 247
60972: PUSH
60973: LD_INT 2
60975: EQUAL
60976: IFFALSE 60989
// ComExitVehicle ( unit ) else
60978: LD_VAR 0 1
60982: PPUSH
60983: CALL_OW 121
60987: GO 60998
// ComExitBuilding ( unit ) ;
60989: LD_VAR 0 1
60993: PPUSH
60994: CALL_OW 122
// result := tmp ;
60998: LD_ADDR_VAR 0 2
61002: PUSH
61003: LD_VAR 0 3
61007: ST_TO_ADDR
// end ;
61008: LD_VAR 0 2
61012: RET
// export function ComExitAll ( units ) ; var i ; begin
61013: LD_INT 0
61015: PPUSH
61016: PPUSH
// if not units then
61017: LD_VAR 0 1
61021: NOT
61022: IFFALSE 61026
// exit ;
61024: GO 61052
// for i in units do
61026: LD_ADDR_VAR 0 3
61030: PUSH
61031: LD_VAR 0 1
61035: PUSH
61036: FOR_IN
61037: IFFALSE 61050
// ComExit ( i ) ;
61039: LD_VAR 0 3
61043: PPUSH
61044: CALL 60930 0 1
61048: GO 61036
61050: POP
61051: POP
// end ;
61052: LD_VAR 0 2
61056: RET
// export function ResetHc ; begin
61057: LD_INT 0
61059: PPUSH
// InitHc ;
61060: CALL_OW 19
// hc_importance := 0 ;
61064: LD_ADDR_OWVAR 32
61068: PUSH
61069: LD_INT 0
61071: ST_TO_ADDR
// end ;
61072: LD_VAR 0 1
61076: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61077: LD_INT 0
61079: PPUSH
61080: PPUSH
61081: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61082: LD_ADDR_VAR 0 6
61086: PUSH
61087: LD_VAR 0 1
61091: PUSH
61092: LD_VAR 0 3
61096: PLUS
61097: PUSH
61098: LD_INT 2
61100: DIV
61101: ST_TO_ADDR
// if _x < 0 then
61102: LD_VAR 0 6
61106: PUSH
61107: LD_INT 0
61109: LESS
61110: IFFALSE 61127
// _x := _x * - 1 ;
61112: LD_ADDR_VAR 0 6
61116: PUSH
61117: LD_VAR 0 6
61121: PUSH
61122: LD_INT 1
61124: NEG
61125: MUL
61126: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61127: LD_ADDR_VAR 0 7
61131: PUSH
61132: LD_VAR 0 2
61136: PUSH
61137: LD_VAR 0 4
61141: PLUS
61142: PUSH
61143: LD_INT 2
61145: DIV
61146: ST_TO_ADDR
// if _y < 0 then
61147: LD_VAR 0 7
61151: PUSH
61152: LD_INT 0
61154: LESS
61155: IFFALSE 61172
// _y := _y * - 1 ;
61157: LD_ADDR_VAR 0 7
61161: PUSH
61162: LD_VAR 0 7
61166: PUSH
61167: LD_INT 1
61169: NEG
61170: MUL
61171: ST_TO_ADDR
// result := [ _x , _y ] ;
61172: LD_ADDR_VAR 0 5
61176: PUSH
61177: LD_VAR 0 6
61181: PUSH
61182: LD_VAR 0 7
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: ST_TO_ADDR
// end ;
61191: LD_VAR 0 5
61195: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61196: LD_INT 0
61198: PPUSH
61199: PPUSH
61200: PPUSH
61201: PPUSH
// task := GetTaskList ( unit ) ;
61202: LD_ADDR_VAR 0 7
61206: PUSH
61207: LD_VAR 0 1
61211: PPUSH
61212: CALL_OW 437
61216: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61217: LD_VAR 0 7
61221: NOT
61222: PUSH
61223: LD_VAR 0 1
61227: PPUSH
61228: LD_VAR 0 2
61232: PPUSH
61233: CALL_OW 308
61237: NOT
61238: AND
61239: IFFALSE 61243
// exit ;
61241: GO 61361
// if IsInArea ( unit , area ) then
61243: LD_VAR 0 1
61247: PPUSH
61248: LD_VAR 0 2
61252: PPUSH
61253: CALL_OW 308
61257: IFFALSE 61275
// begin ComMoveToArea ( unit , goAway ) ;
61259: LD_VAR 0 1
61263: PPUSH
61264: LD_VAR 0 3
61268: PPUSH
61269: CALL_OW 113
// exit ;
61273: GO 61361
// end ; if task [ 1 ] [ 1 ] <> M then
61275: LD_VAR 0 7
61279: PUSH
61280: LD_INT 1
61282: ARRAY
61283: PUSH
61284: LD_INT 1
61286: ARRAY
61287: PUSH
61288: LD_STRING M
61290: NONEQUAL
61291: IFFALSE 61295
// exit ;
61293: GO 61361
// x := task [ 1 ] [ 2 ] ;
61295: LD_ADDR_VAR 0 5
61299: PUSH
61300: LD_VAR 0 7
61304: PUSH
61305: LD_INT 1
61307: ARRAY
61308: PUSH
61309: LD_INT 2
61311: ARRAY
61312: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61313: LD_ADDR_VAR 0 6
61317: PUSH
61318: LD_VAR 0 7
61322: PUSH
61323: LD_INT 1
61325: ARRAY
61326: PUSH
61327: LD_INT 3
61329: ARRAY
61330: ST_TO_ADDR
// if InArea ( x , y , area ) then
61331: LD_VAR 0 5
61335: PPUSH
61336: LD_VAR 0 6
61340: PPUSH
61341: LD_VAR 0 2
61345: PPUSH
61346: CALL_OW 309
61350: IFFALSE 61361
// ComStop ( unit ) ;
61352: LD_VAR 0 1
61356: PPUSH
61357: CALL_OW 141
// end ;
61361: LD_VAR 0 4
61365: RET
// export function Abs ( value ) ; begin
61366: LD_INT 0
61368: PPUSH
// result := value ;
61369: LD_ADDR_VAR 0 2
61373: PUSH
61374: LD_VAR 0 1
61378: ST_TO_ADDR
// if value < 0 then
61379: LD_VAR 0 1
61383: PUSH
61384: LD_INT 0
61386: LESS
61387: IFFALSE 61404
// result := value * - 1 ;
61389: LD_ADDR_VAR 0 2
61393: PUSH
61394: LD_VAR 0 1
61398: PUSH
61399: LD_INT 1
61401: NEG
61402: MUL
61403: ST_TO_ADDR
// end ;
61404: LD_VAR 0 2
61408: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61409: LD_INT 0
61411: PPUSH
61412: PPUSH
61413: PPUSH
61414: PPUSH
61415: PPUSH
61416: PPUSH
61417: PPUSH
61418: PPUSH
// if not unit or not building then
61419: LD_VAR 0 1
61423: NOT
61424: PUSH
61425: LD_VAR 0 2
61429: NOT
61430: OR
61431: IFFALSE 61435
// exit ;
61433: GO 61661
// x := GetX ( building ) ;
61435: LD_ADDR_VAR 0 4
61439: PUSH
61440: LD_VAR 0 2
61444: PPUSH
61445: CALL_OW 250
61449: ST_TO_ADDR
// y := GetY ( building ) ;
61450: LD_ADDR_VAR 0 6
61454: PUSH
61455: LD_VAR 0 2
61459: PPUSH
61460: CALL_OW 251
61464: ST_TO_ADDR
// d := GetDir ( building ) ;
61465: LD_ADDR_VAR 0 8
61469: PUSH
61470: LD_VAR 0 2
61474: PPUSH
61475: CALL_OW 254
61479: ST_TO_ADDR
// r := 4 ;
61480: LD_ADDR_VAR 0 9
61484: PUSH
61485: LD_INT 4
61487: ST_TO_ADDR
// for i := 1 to 5 do
61488: LD_ADDR_VAR 0 10
61492: PUSH
61493: DOUBLE
61494: LD_INT 1
61496: DEC
61497: ST_TO_ADDR
61498: LD_INT 5
61500: PUSH
61501: FOR_TO
61502: IFFALSE 61659
// begin _x := ShiftX ( x , d , r + i ) ;
61504: LD_ADDR_VAR 0 5
61508: PUSH
61509: LD_VAR 0 4
61513: PPUSH
61514: LD_VAR 0 8
61518: PPUSH
61519: LD_VAR 0 9
61523: PUSH
61524: LD_VAR 0 10
61528: PLUS
61529: PPUSH
61530: CALL_OW 272
61534: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61535: LD_ADDR_VAR 0 7
61539: PUSH
61540: LD_VAR 0 6
61544: PPUSH
61545: LD_VAR 0 8
61549: PPUSH
61550: LD_VAR 0 9
61554: PUSH
61555: LD_VAR 0 10
61559: PLUS
61560: PPUSH
61561: CALL_OW 273
61565: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
61566: LD_VAR 0 5
61570: PPUSH
61571: LD_VAR 0 7
61575: PPUSH
61576: CALL_OW 488
61580: PUSH
61581: LD_VAR 0 5
61585: PPUSH
61586: LD_VAR 0 7
61590: PPUSH
61591: CALL_OW 428
61595: PPUSH
61596: CALL_OW 247
61600: PUSH
61601: LD_INT 3
61603: PUSH
61604: LD_INT 2
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: IN
61611: NOT
61612: AND
61613: IFFALSE 61657
// begin ComMoveXY ( unit , _x , _y ) ;
61615: LD_VAR 0 1
61619: PPUSH
61620: LD_VAR 0 5
61624: PPUSH
61625: LD_VAR 0 7
61629: PPUSH
61630: CALL_OW 111
// result := [ _x , _y ] ;
61634: LD_ADDR_VAR 0 3
61638: PUSH
61639: LD_VAR 0 5
61643: PUSH
61644: LD_VAR 0 7
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: ST_TO_ADDR
// exit ;
61653: POP
61654: POP
61655: GO 61661
// end ; end ;
61657: GO 61501
61659: POP
61660: POP
// end ;
61661: LD_VAR 0 3
61665: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
61666: LD_INT 0
61668: PPUSH
61669: PPUSH
61670: PPUSH
// result := 0 ;
61671: LD_ADDR_VAR 0 3
61675: PUSH
61676: LD_INT 0
61678: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61679: LD_VAR 0 1
61683: PUSH
61684: LD_INT 0
61686: LESS
61687: PUSH
61688: LD_VAR 0 1
61692: PUSH
61693: LD_INT 8
61695: GREATER
61696: OR
61697: PUSH
61698: LD_VAR 0 2
61702: PUSH
61703: LD_INT 0
61705: LESS
61706: OR
61707: PUSH
61708: LD_VAR 0 2
61712: PUSH
61713: LD_INT 8
61715: GREATER
61716: OR
61717: IFFALSE 61721
// exit ;
61719: GO 61796
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
61721: LD_ADDR_VAR 0 4
61725: PUSH
61726: LD_INT 22
61728: PUSH
61729: LD_VAR 0 2
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PPUSH
61738: CALL_OW 69
61742: PUSH
61743: FOR_IN
61744: IFFALSE 61794
// begin un := UnitShoot ( i ) ;
61746: LD_ADDR_VAR 0 5
61750: PUSH
61751: LD_VAR 0 4
61755: PPUSH
61756: CALL_OW 504
61760: ST_TO_ADDR
// if GetSide ( un ) = side1 then
61761: LD_VAR 0 5
61765: PPUSH
61766: CALL_OW 255
61770: PUSH
61771: LD_VAR 0 1
61775: EQUAL
61776: IFFALSE 61792
// begin result := un ;
61778: LD_ADDR_VAR 0 3
61782: PUSH
61783: LD_VAR 0 5
61787: ST_TO_ADDR
// exit ;
61788: POP
61789: POP
61790: GO 61796
// end ; end ;
61792: GO 61743
61794: POP
61795: POP
// end ;
61796: LD_VAR 0 3
61800: RET
// export function GetCargoBay ( units ) ; begin
61801: LD_INT 0
61803: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
61804: LD_ADDR_VAR 0 2
61808: PUSH
61809: LD_VAR 0 1
61813: PPUSH
61814: LD_INT 2
61816: PUSH
61817: LD_INT 34
61819: PUSH
61820: LD_INT 12
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 34
61829: PUSH
61830: LD_INT 51
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 34
61839: PUSH
61840: LD_INT 32
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 34
61849: PUSH
61850: LD_EXP 95
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: PPUSH
61866: CALL_OW 72
61870: ST_TO_ADDR
// end ;
61871: LD_VAR 0 2
61875: RET
// export function Negate ( value ) ; begin
61876: LD_INT 0
61878: PPUSH
// result := not value ;
61879: LD_ADDR_VAR 0 2
61883: PUSH
61884: LD_VAR 0 1
61888: NOT
61889: ST_TO_ADDR
// end ;
61890: LD_VAR 0 2
61894: RET
// export function Inc ( value ) ; begin
61895: LD_INT 0
61897: PPUSH
// result := value + 1 ;
61898: LD_ADDR_VAR 0 2
61902: PUSH
61903: LD_VAR 0 1
61907: PUSH
61908: LD_INT 1
61910: PLUS
61911: ST_TO_ADDR
// end ;
61912: LD_VAR 0 2
61916: RET
// export function Dec ( value ) ; begin
61917: LD_INT 0
61919: PPUSH
// result := value - 1 ;
61920: LD_ADDR_VAR 0 2
61924: PUSH
61925: LD_VAR 0 1
61929: PUSH
61930: LD_INT 1
61932: MINUS
61933: ST_TO_ADDR
// end ;
61934: LD_VAR 0 2
61938: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
61939: LD_INT 0
61941: PPUSH
61942: PPUSH
61943: PPUSH
61944: PPUSH
61945: PPUSH
61946: PPUSH
61947: PPUSH
61948: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
61949: LD_VAR 0 1
61953: PPUSH
61954: LD_VAR 0 2
61958: PPUSH
61959: CALL_OW 488
61963: NOT
61964: PUSH
61965: LD_VAR 0 3
61969: PPUSH
61970: LD_VAR 0 4
61974: PPUSH
61975: CALL_OW 488
61979: NOT
61980: OR
61981: IFFALSE 61994
// begin result := - 1 ;
61983: LD_ADDR_VAR 0 5
61987: PUSH
61988: LD_INT 1
61990: NEG
61991: ST_TO_ADDR
// exit ;
61992: GO 62229
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
61994: LD_ADDR_VAR 0 12
61998: PUSH
61999: LD_VAR 0 1
62003: PPUSH
62004: LD_VAR 0 2
62008: PPUSH
62009: LD_VAR 0 3
62013: PPUSH
62014: LD_VAR 0 4
62018: PPUSH
62019: CALL 61077 0 4
62023: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
62024: LD_ADDR_VAR 0 11
62028: PUSH
62029: LD_VAR 0 1
62033: PPUSH
62034: LD_VAR 0 2
62038: PPUSH
62039: LD_VAR 0 12
62043: PUSH
62044: LD_INT 1
62046: ARRAY
62047: PPUSH
62048: LD_VAR 0 12
62052: PUSH
62053: LD_INT 2
62055: ARRAY
62056: PPUSH
62057: CALL_OW 298
62061: ST_TO_ADDR
// distance := 9999 ;
62062: LD_ADDR_VAR 0 10
62066: PUSH
62067: LD_INT 9999
62069: ST_TO_ADDR
// for i := 0 to 5 do
62070: LD_ADDR_VAR 0 6
62074: PUSH
62075: DOUBLE
62076: LD_INT 0
62078: DEC
62079: ST_TO_ADDR
62080: LD_INT 5
62082: PUSH
62083: FOR_TO
62084: IFFALSE 62227
// begin _x := ShiftX ( x1 , i , centerDist ) ;
62086: LD_ADDR_VAR 0 7
62090: PUSH
62091: LD_VAR 0 1
62095: PPUSH
62096: LD_VAR 0 6
62100: PPUSH
62101: LD_VAR 0 11
62105: PPUSH
62106: CALL_OW 272
62110: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
62111: LD_ADDR_VAR 0 8
62115: PUSH
62116: LD_VAR 0 2
62120: PPUSH
62121: LD_VAR 0 6
62125: PPUSH
62126: LD_VAR 0 11
62130: PPUSH
62131: CALL_OW 273
62135: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62136: LD_VAR 0 7
62140: PPUSH
62141: LD_VAR 0 8
62145: PPUSH
62146: CALL_OW 488
62150: NOT
62151: IFFALSE 62155
// continue ;
62153: GO 62083
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
62155: LD_ADDR_VAR 0 9
62159: PUSH
62160: LD_VAR 0 12
62164: PUSH
62165: LD_INT 1
62167: ARRAY
62168: PPUSH
62169: LD_VAR 0 12
62173: PUSH
62174: LD_INT 2
62176: ARRAY
62177: PPUSH
62178: LD_VAR 0 7
62182: PPUSH
62183: LD_VAR 0 8
62187: PPUSH
62188: CALL_OW 298
62192: ST_TO_ADDR
// if tmp < distance then
62193: LD_VAR 0 9
62197: PUSH
62198: LD_VAR 0 10
62202: LESS
62203: IFFALSE 62225
// begin result := i ;
62205: LD_ADDR_VAR 0 5
62209: PUSH
62210: LD_VAR 0 6
62214: ST_TO_ADDR
// distance := tmp ;
62215: LD_ADDR_VAR 0 10
62219: PUSH
62220: LD_VAR 0 9
62224: ST_TO_ADDR
// end ; end ;
62225: GO 62083
62227: POP
62228: POP
// end ;
62229: LD_VAR 0 5
62233: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62234: LD_INT 0
62236: PPUSH
62237: PPUSH
// if not driver or not IsInUnit ( driver ) then
62238: LD_VAR 0 1
62242: NOT
62243: PUSH
62244: LD_VAR 0 1
62248: PPUSH
62249: CALL_OW 310
62253: NOT
62254: OR
62255: IFFALSE 62259
// exit ;
62257: GO 62349
// vehicle := IsInUnit ( driver ) ;
62259: LD_ADDR_VAR 0 3
62263: PUSH
62264: LD_VAR 0 1
62268: PPUSH
62269: CALL_OW 310
62273: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62274: LD_VAR 0 1
62278: PPUSH
62279: LD_STRING \
62281: PUSH
62282: LD_INT 0
62284: PUSH
62285: LD_INT 0
62287: PUSH
62288: LD_INT 0
62290: PUSH
62291: LD_INT 0
62293: PUSH
62294: LD_INT 0
62296: PUSH
62297: LD_INT 0
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: PUSH
62309: LD_STRING E
62311: PUSH
62312: LD_INT 0
62314: PUSH
62315: LD_INT 0
62317: PUSH
62318: LD_VAR 0 3
62322: PUSH
62323: LD_INT 0
62325: PUSH
62326: LD_INT 0
62328: PUSH
62329: LD_INT 0
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PPUSH
62345: CALL_OW 446
// end ;
62349: LD_VAR 0 2
62353: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62354: LD_INT 0
62356: PPUSH
62357: PPUSH
// if not driver or not IsInUnit ( driver ) then
62358: LD_VAR 0 1
62362: NOT
62363: PUSH
62364: LD_VAR 0 1
62368: PPUSH
62369: CALL_OW 310
62373: NOT
62374: OR
62375: IFFALSE 62379
// exit ;
62377: GO 62469
// vehicle := IsInUnit ( driver ) ;
62379: LD_ADDR_VAR 0 3
62383: PUSH
62384: LD_VAR 0 1
62388: PPUSH
62389: CALL_OW 310
62393: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62394: LD_VAR 0 1
62398: PPUSH
62399: LD_STRING \
62401: PUSH
62402: LD_INT 0
62404: PUSH
62405: LD_INT 0
62407: PUSH
62408: LD_INT 0
62410: PUSH
62411: LD_INT 0
62413: PUSH
62414: LD_INT 0
62416: PUSH
62417: LD_INT 0
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: PUSH
62429: LD_STRING E
62431: PUSH
62432: LD_INT 0
62434: PUSH
62435: LD_INT 0
62437: PUSH
62438: LD_VAR 0 3
62442: PUSH
62443: LD_INT 0
62445: PUSH
62446: LD_INT 0
62448: PUSH
62449: LD_INT 0
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PPUSH
62465: CALL_OW 447
// end ;
62469: LD_VAR 0 2
62473: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62474: LD_INT 0
62476: PPUSH
62477: PPUSH
62478: PPUSH
// tmp := [ ] ;
62479: LD_ADDR_VAR 0 5
62483: PUSH
62484: EMPTY
62485: ST_TO_ADDR
// for i in units do
62486: LD_ADDR_VAR 0 4
62490: PUSH
62491: LD_VAR 0 1
62495: PUSH
62496: FOR_IN
62497: IFFALSE 62535
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62499: LD_ADDR_VAR 0 5
62503: PUSH
62504: LD_VAR 0 5
62508: PPUSH
62509: LD_VAR 0 5
62513: PUSH
62514: LD_INT 1
62516: PLUS
62517: PPUSH
62518: LD_VAR 0 4
62522: PPUSH
62523: CALL_OW 256
62527: PPUSH
62528: CALL_OW 2
62532: ST_TO_ADDR
62533: GO 62496
62535: POP
62536: POP
// if not tmp then
62537: LD_VAR 0 5
62541: NOT
62542: IFFALSE 62546
// exit ;
62544: GO 62594
// if asc then
62546: LD_VAR 0 2
62550: IFFALSE 62574
// result := SortListByListAsc ( units , tmp ) else
62552: LD_ADDR_VAR 0 3
62556: PUSH
62557: LD_VAR 0 1
62561: PPUSH
62562: LD_VAR 0 5
62566: PPUSH
62567: CALL_OW 76
62571: ST_TO_ADDR
62572: GO 62594
// result := SortListByListDesc ( units , tmp ) ;
62574: LD_ADDR_VAR 0 3
62578: PUSH
62579: LD_VAR 0 1
62583: PPUSH
62584: LD_VAR 0 5
62588: PPUSH
62589: CALL_OW 77
62593: ST_TO_ADDR
// end ;
62594: LD_VAR 0 3
62598: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
62599: LD_INT 0
62601: PPUSH
62602: PPUSH
// task := GetTaskList ( mech ) ;
62603: LD_ADDR_VAR 0 4
62607: PUSH
62608: LD_VAR 0 1
62612: PPUSH
62613: CALL_OW 437
62617: ST_TO_ADDR
// if not task then
62618: LD_VAR 0 4
62622: NOT
62623: IFFALSE 62627
// exit ;
62625: GO 62669
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
62627: LD_ADDR_VAR 0 3
62631: PUSH
62632: LD_VAR 0 4
62636: PUSH
62637: LD_INT 1
62639: ARRAY
62640: PUSH
62641: LD_INT 1
62643: ARRAY
62644: PUSH
62645: LD_STRING r
62647: EQUAL
62648: PUSH
62649: LD_VAR 0 4
62653: PUSH
62654: LD_INT 1
62656: ARRAY
62657: PUSH
62658: LD_INT 4
62660: ARRAY
62661: PUSH
62662: LD_VAR 0 2
62666: EQUAL
62667: AND
62668: ST_TO_ADDR
// end ;
62669: LD_VAR 0 3
62673: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
62674: LD_INT 0
62676: PPUSH
// SetDir ( unit , d ) ;
62677: LD_VAR 0 1
62681: PPUSH
62682: LD_VAR 0 4
62686: PPUSH
62687: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
62691: LD_VAR 0 1
62695: PPUSH
62696: LD_VAR 0 2
62700: PPUSH
62701: LD_VAR 0 3
62705: PPUSH
62706: LD_VAR 0 5
62710: PPUSH
62711: CALL_OW 48
// end ;
62715: LD_VAR 0 6
62719: RET
// export function ToNaturalNumber ( number ) ; begin
62720: LD_INT 0
62722: PPUSH
// result := number div 1 ;
62723: LD_ADDR_VAR 0 2
62727: PUSH
62728: LD_VAR 0 1
62732: PUSH
62733: LD_INT 1
62735: DIV
62736: ST_TO_ADDR
// if number < 0 then
62737: LD_VAR 0 1
62741: PUSH
62742: LD_INT 0
62744: LESS
62745: IFFALSE 62755
// result := 0 ;
62747: LD_ADDR_VAR 0 2
62751: PUSH
62752: LD_INT 0
62754: ST_TO_ADDR
// end ;
62755: LD_VAR 0 2
62759: RET
// export function SortByClass ( units , class ) ; var un ; begin
62760: LD_INT 0
62762: PPUSH
62763: PPUSH
// if not units or not class then
62764: LD_VAR 0 1
62768: NOT
62769: PUSH
62770: LD_VAR 0 2
62774: NOT
62775: OR
62776: IFFALSE 62780
// exit ;
62778: GO 62875
// result := [ ] ;
62780: LD_ADDR_VAR 0 3
62784: PUSH
62785: EMPTY
62786: ST_TO_ADDR
// for un in units do
62787: LD_ADDR_VAR 0 4
62791: PUSH
62792: LD_VAR 0 1
62796: PUSH
62797: FOR_IN
62798: IFFALSE 62873
// if GetClass ( un ) = class then
62800: LD_VAR 0 4
62804: PPUSH
62805: CALL_OW 257
62809: PUSH
62810: LD_VAR 0 2
62814: EQUAL
62815: IFFALSE 62842
// result := Insert ( result , 1 , un ) else
62817: LD_ADDR_VAR 0 3
62821: PUSH
62822: LD_VAR 0 3
62826: PPUSH
62827: LD_INT 1
62829: PPUSH
62830: LD_VAR 0 4
62834: PPUSH
62835: CALL_OW 2
62839: ST_TO_ADDR
62840: GO 62871
// result := Replace ( result , result + 1 , un ) ;
62842: LD_ADDR_VAR 0 3
62846: PUSH
62847: LD_VAR 0 3
62851: PPUSH
62852: LD_VAR 0 3
62856: PUSH
62857: LD_INT 1
62859: PLUS
62860: PPUSH
62861: LD_VAR 0 4
62865: PPUSH
62866: CALL_OW 1
62870: ST_TO_ADDR
62871: GO 62797
62873: POP
62874: POP
// end ;
62875: LD_VAR 0 3
62879: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
62880: LD_INT 0
62882: PPUSH
62883: PPUSH
62884: PPUSH
62885: PPUSH
62886: PPUSH
62887: PPUSH
62888: PPUSH
// result := [ ] ;
62889: LD_ADDR_VAR 0 4
62893: PUSH
62894: EMPTY
62895: ST_TO_ADDR
// if x - r < 0 then
62896: LD_VAR 0 1
62900: PUSH
62901: LD_VAR 0 3
62905: MINUS
62906: PUSH
62907: LD_INT 0
62909: LESS
62910: IFFALSE 62922
// min_x := 0 else
62912: LD_ADDR_VAR 0 8
62916: PUSH
62917: LD_INT 0
62919: ST_TO_ADDR
62920: GO 62938
// min_x := x - r ;
62922: LD_ADDR_VAR 0 8
62926: PUSH
62927: LD_VAR 0 1
62931: PUSH
62932: LD_VAR 0 3
62936: MINUS
62937: ST_TO_ADDR
// if y - r < 0 then
62938: LD_VAR 0 2
62942: PUSH
62943: LD_VAR 0 3
62947: MINUS
62948: PUSH
62949: LD_INT 0
62951: LESS
62952: IFFALSE 62964
// min_y := 0 else
62954: LD_ADDR_VAR 0 7
62958: PUSH
62959: LD_INT 0
62961: ST_TO_ADDR
62962: GO 62980
// min_y := y - r ;
62964: LD_ADDR_VAR 0 7
62968: PUSH
62969: LD_VAR 0 2
62973: PUSH
62974: LD_VAR 0 3
62978: MINUS
62979: ST_TO_ADDR
// max_x := x + r ;
62980: LD_ADDR_VAR 0 9
62984: PUSH
62985: LD_VAR 0 1
62989: PUSH
62990: LD_VAR 0 3
62994: PLUS
62995: ST_TO_ADDR
// max_y := y + r ;
62996: LD_ADDR_VAR 0 10
63000: PUSH
63001: LD_VAR 0 2
63005: PUSH
63006: LD_VAR 0 3
63010: PLUS
63011: ST_TO_ADDR
// for _x = min_x to max_x do
63012: LD_ADDR_VAR 0 5
63016: PUSH
63017: DOUBLE
63018: LD_VAR 0 8
63022: DEC
63023: ST_TO_ADDR
63024: LD_VAR 0 9
63028: PUSH
63029: FOR_TO
63030: IFFALSE 63131
// for _y = min_y to max_y do
63032: LD_ADDR_VAR 0 6
63036: PUSH
63037: DOUBLE
63038: LD_VAR 0 7
63042: DEC
63043: ST_TO_ADDR
63044: LD_VAR 0 10
63048: PUSH
63049: FOR_TO
63050: IFFALSE 63127
// begin if not ValidHex ( _x , _y ) then
63052: LD_VAR 0 5
63056: PPUSH
63057: LD_VAR 0 6
63061: PPUSH
63062: CALL_OW 488
63066: NOT
63067: IFFALSE 63071
// continue ;
63069: GO 63049
// if GetResourceTypeXY ( _x , _y ) then
63071: LD_VAR 0 5
63075: PPUSH
63076: LD_VAR 0 6
63080: PPUSH
63081: CALL_OW 283
63085: IFFALSE 63125
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
63087: LD_ADDR_VAR 0 4
63091: PUSH
63092: LD_VAR 0 4
63096: PPUSH
63097: LD_VAR 0 4
63101: PUSH
63102: LD_INT 1
63104: PLUS
63105: PPUSH
63106: LD_VAR 0 5
63110: PUSH
63111: LD_VAR 0 6
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PPUSH
63120: CALL_OW 1
63124: ST_TO_ADDR
// end ;
63125: GO 63049
63127: POP
63128: POP
63129: GO 63029
63131: POP
63132: POP
// end ;
63133: LD_VAR 0 4
63137: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
63138: LD_INT 0
63140: PPUSH
63141: PPUSH
63142: PPUSH
63143: PPUSH
63144: PPUSH
63145: PPUSH
63146: PPUSH
63147: PPUSH
// if not units then
63148: LD_VAR 0 1
63152: NOT
63153: IFFALSE 63157
// exit ;
63155: GO 63582
// result := UnitFilter ( units , [ f_ok ] ) ;
63157: LD_ADDR_VAR 0 3
63161: PUSH
63162: LD_VAR 0 1
63166: PPUSH
63167: LD_INT 50
63169: PUSH
63170: EMPTY
63171: LIST
63172: PPUSH
63173: CALL_OW 72
63177: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
63178: LD_ADDR_VAR 0 8
63182: PUSH
63183: LD_VAR 0 1
63187: PUSH
63188: LD_INT 1
63190: ARRAY
63191: PPUSH
63192: CALL_OW 255
63196: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
63197: LD_ADDR_VAR 0 10
63201: PUSH
63202: LD_INT 29
63204: PUSH
63205: LD_EXP 98
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: ST_TO_ADDR
// if not result then
63214: LD_VAR 0 3
63218: NOT
63219: IFFALSE 63223
// exit ;
63221: GO 63582
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63223: LD_ADDR_VAR 0 5
63227: PUSH
63228: LD_INT 81
63230: PUSH
63231: LD_VAR 0 8
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PPUSH
63240: CALL_OW 69
63244: ST_TO_ADDR
// for i in result do
63245: LD_ADDR_VAR 0 4
63249: PUSH
63250: LD_VAR 0 3
63254: PUSH
63255: FOR_IN
63256: IFFALSE 63580
// begin tag := GetTag ( i ) + 1 ;
63258: LD_ADDR_VAR 0 9
63262: PUSH
63263: LD_VAR 0 4
63267: PPUSH
63268: CALL_OW 110
63272: PUSH
63273: LD_INT 1
63275: PLUS
63276: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
63277: LD_ADDR_VAR 0 7
63281: PUSH
63282: LD_VAR 0 4
63286: PPUSH
63287: CALL_OW 250
63291: PPUSH
63292: LD_VAR 0 4
63296: PPUSH
63297: CALL_OW 251
63301: PPUSH
63302: LD_INT 6
63304: PPUSH
63305: CALL 62880 0 3
63309: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
63310: LD_VAR 0 7
63314: PUSH
63315: LD_VAR 0 4
63319: PPUSH
63320: CALL_OW 264
63324: PUSH
63325: LD_VAR 0 10
63329: IN
63330: NOT
63331: AND
63332: IFFALSE 63371
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63334: LD_VAR 0 4
63338: PPUSH
63339: LD_VAR 0 7
63343: PUSH
63344: LD_INT 1
63346: ARRAY
63347: PUSH
63348: LD_INT 1
63350: ARRAY
63351: PPUSH
63352: LD_VAR 0 7
63356: PUSH
63357: LD_INT 1
63359: ARRAY
63360: PUSH
63361: LD_INT 2
63363: ARRAY
63364: PPUSH
63365: CALL_OW 116
63369: GO 63578
// if path > tag then
63371: LD_VAR 0 2
63375: PUSH
63376: LD_VAR 0 9
63380: GREATER
63381: IFFALSE 63548
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
63383: LD_ADDR_VAR 0 6
63387: PUSH
63388: LD_VAR 0 5
63392: PPUSH
63393: LD_INT 91
63395: PUSH
63396: LD_VAR 0 4
63400: PUSH
63401: LD_INT 12
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: LIST
63408: PPUSH
63409: CALL_OW 72
63413: ST_TO_ADDR
// if nearEnemy then
63414: LD_VAR 0 6
63418: IFFALSE 63446
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
63420: LD_VAR 0 4
63424: PPUSH
63425: LD_VAR 0 6
63429: PPUSH
63430: LD_VAR 0 4
63434: PPUSH
63435: CALL_OW 74
63439: PPUSH
63440: CALL_OW 115
63444: GO 63546
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63446: LD_VAR 0 4
63450: PPUSH
63451: LD_VAR 0 2
63455: PUSH
63456: LD_VAR 0 9
63460: ARRAY
63461: PUSH
63462: LD_INT 1
63464: ARRAY
63465: PPUSH
63466: LD_VAR 0 2
63470: PUSH
63471: LD_VAR 0 9
63475: ARRAY
63476: PUSH
63477: LD_INT 2
63479: ARRAY
63480: PPUSH
63481: CALL_OW 297
63485: PUSH
63486: LD_INT 6
63488: GREATER
63489: IFFALSE 63532
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
63491: LD_VAR 0 4
63495: PPUSH
63496: LD_VAR 0 2
63500: PUSH
63501: LD_VAR 0 9
63505: ARRAY
63506: PUSH
63507: LD_INT 1
63509: ARRAY
63510: PPUSH
63511: LD_VAR 0 2
63515: PUSH
63516: LD_VAR 0 9
63520: ARRAY
63521: PUSH
63522: LD_INT 2
63524: ARRAY
63525: PPUSH
63526: CALL_OW 114
63530: GO 63546
// SetTag ( i , tag ) ;
63532: LD_VAR 0 4
63536: PPUSH
63537: LD_VAR 0 9
63541: PPUSH
63542: CALL_OW 109
// end else
63546: GO 63578
// if enemy then
63548: LD_VAR 0 5
63552: IFFALSE 63578
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
63554: LD_VAR 0 4
63558: PPUSH
63559: LD_VAR 0 5
63563: PPUSH
63564: LD_VAR 0 4
63568: PPUSH
63569: CALL_OW 74
63573: PPUSH
63574: CALL_OW 115
// end ;
63578: GO 63255
63580: POP
63581: POP
// end ;
63582: LD_VAR 0 3
63586: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
63587: LD_INT 0
63589: PPUSH
63590: PPUSH
63591: PPUSH
// if not unit or IsInUnit ( unit ) then
63592: LD_VAR 0 1
63596: NOT
63597: PUSH
63598: LD_VAR 0 1
63602: PPUSH
63603: CALL_OW 310
63607: OR
63608: IFFALSE 63612
// exit ;
63610: GO 63703
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
63612: LD_ADDR_VAR 0 4
63616: PUSH
63617: LD_VAR 0 1
63621: PPUSH
63622: CALL_OW 250
63626: PPUSH
63627: LD_VAR 0 2
63631: PPUSH
63632: LD_INT 1
63634: PPUSH
63635: CALL_OW 272
63639: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
63640: LD_ADDR_VAR 0 5
63644: PUSH
63645: LD_VAR 0 1
63649: PPUSH
63650: CALL_OW 251
63654: PPUSH
63655: LD_VAR 0 2
63659: PPUSH
63660: LD_INT 1
63662: PPUSH
63663: CALL_OW 273
63667: ST_TO_ADDR
// if ValidHex ( x , y ) then
63668: LD_VAR 0 4
63672: PPUSH
63673: LD_VAR 0 5
63677: PPUSH
63678: CALL_OW 488
63682: IFFALSE 63703
// ComTurnXY ( unit , x , y ) ;
63684: LD_VAR 0 1
63688: PPUSH
63689: LD_VAR 0 4
63693: PPUSH
63694: LD_VAR 0 5
63698: PPUSH
63699: CALL_OW 118
// end ;
63703: LD_VAR 0 3
63707: RET
// export function SeeUnits ( side , units ) ; var i ; begin
63708: LD_INT 0
63710: PPUSH
63711: PPUSH
// result := false ;
63712: LD_ADDR_VAR 0 3
63716: PUSH
63717: LD_INT 0
63719: ST_TO_ADDR
// if not units then
63720: LD_VAR 0 2
63724: NOT
63725: IFFALSE 63729
// exit ;
63727: GO 63774
// for i in units do
63729: LD_ADDR_VAR 0 4
63733: PUSH
63734: LD_VAR 0 2
63738: PUSH
63739: FOR_IN
63740: IFFALSE 63772
// if See ( side , i ) then
63742: LD_VAR 0 1
63746: PPUSH
63747: LD_VAR 0 4
63751: PPUSH
63752: CALL_OW 292
63756: IFFALSE 63770
// begin result := true ;
63758: LD_ADDR_VAR 0 3
63762: PUSH
63763: LD_INT 1
63765: ST_TO_ADDR
// exit ;
63766: POP
63767: POP
63768: GO 63774
// end ;
63770: GO 63739
63772: POP
63773: POP
// end ;
63774: LD_VAR 0 3
63778: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
63779: LD_INT 0
63781: PPUSH
63782: PPUSH
63783: PPUSH
63784: PPUSH
// if not unit or not points then
63785: LD_VAR 0 1
63789: NOT
63790: PUSH
63791: LD_VAR 0 2
63795: NOT
63796: OR
63797: IFFALSE 63801
// exit ;
63799: GO 63891
// dist := 99999 ;
63801: LD_ADDR_VAR 0 5
63805: PUSH
63806: LD_INT 99999
63808: ST_TO_ADDR
// for i in points do
63809: LD_ADDR_VAR 0 4
63813: PUSH
63814: LD_VAR 0 2
63818: PUSH
63819: FOR_IN
63820: IFFALSE 63889
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
63822: LD_ADDR_VAR 0 6
63826: PUSH
63827: LD_VAR 0 1
63831: PPUSH
63832: LD_VAR 0 4
63836: PUSH
63837: LD_INT 1
63839: ARRAY
63840: PPUSH
63841: LD_VAR 0 4
63845: PUSH
63846: LD_INT 2
63848: ARRAY
63849: PPUSH
63850: CALL_OW 297
63854: ST_TO_ADDR
// if tmpDist < dist then
63855: LD_VAR 0 6
63859: PUSH
63860: LD_VAR 0 5
63864: LESS
63865: IFFALSE 63887
// begin result := i ;
63867: LD_ADDR_VAR 0 3
63871: PUSH
63872: LD_VAR 0 4
63876: ST_TO_ADDR
// dist := tmpDist ;
63877: LD_ADDR_VAR 0 5
63881: PUSH
63882: LD_VAR 0 6
63886: ST_TO_ADDR
// end ; end ;
63887: GO 63819
63889: POP
63890: POP
// end ; end_of_file
63891: LD_VAR 0 3
63895: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
63896: LD_VAR 0 1
63900: PPUSH
63901: LD_VAR 0 2
63905: PPUSH
63906: LD_VAR 0 3
63910: PPUSH
63911: LD_VAR 0 4
63915: PPUSH
63916: LD_VAR 0 5
63920: PPUSH
63921: LD_VAR 0 6
63925: PPUSH
63926: CALL 5847 0 6
// end ;
63930: PPOPN 6
63932: END
