// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson , Mike ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export selectedPeople ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect := 0 ;
  15: LD_ADDR_EXP 19
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene := 1 ;
  23: LD_ADDR_EXP 20
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans := [ ] ;
  31: LD_ADDR_EXP 13
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans := [ ] ;
  38: LD_ADDR_EXP 14
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles := [ ] ;
  45: LD_ADDR_EXP 15
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 12
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// resources := [ ] ;
  59: LD_ADDR_EXP 22
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// mission_prefix := 06_ ;
  66: LD_ADDR_EXP 23
  70: PUSH
  71: LD_STRING 06_
  73: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  74: LD_ADDR_EXP 24
  78: PUSH
  79: LD_STRING 05_
  81: ST_TO_ADDR
// PrepareDeltaBase ;
  82: CALL 2403 0 0
// CreateNature ;
  86: CALL 170 0 0
// LoadVehicles ;
  90: CALL 1530 0 0
// PrepareHeroes ;
  94: CALL 299 0 0
// PrepareRandoms ;
  98: CALL 1795 0 0
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 102: LD_ADDR_EXP 21
 106: PUSH
 107: LD_INT 22
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 2
 119: PUSH
 120: LD_INT 30
 122: PUSH
 123: LD_INT 6
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 30
 132: PUSH
 133: LD_INT 7
 135: PUSH
 136: EMPTY
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 30
 142: PUSH
 143: LD_INT 8
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: PPUSH
 160: CALL_OW 69
 164: ST_TO_ADDR
// Action ;
 165: CALL 3321 0 0
// end ;
 169: END
// export function CreateNature ; var i ; begin
 170: LD_INT 0
 172: PPUSH
 173: PPUSH
// uc_side := 0 ;
 174: LD_ADDR_OWVAR 20
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// uc_nation := 0 ;
 182: LD_ADDR_OWVAR 21
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// for i = 1 to 4 do
 190: LD_ADDR_VAR 0 2
 194: PUSH
 195: DOUBLE
 196: LD_INT 1
 198: DEC
 199: ST_TO_ADDR
 200: LD_INT 4
 202: PUSH
 203: FOR_TO
 204: IFFALSE 292
// begin hc_gallery :=  ;
 206: LD_ADDR_OWVAR 33
 210: PUSH
 211: LD_STRING 
 213: ST_TO_ADDR
// hc_name :=  ;
 214: LD_ADDR_OWVAR 26
 218: PUSH
 219: LD_STRING 
 221: ST_TO_ADDR
// hc_agressivity := 0 ;
 222: LD_ADDR_OWVAR 35
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// hc_attr := [ rand ( 10 , 11 ) , rand ( 10 , 12 ) ] ;
 230: LD_ADDR_OWVAR 29
 234: PUSH
 235: LD_INT 10
 237: PPUSH
 238: LD_INT 11
 240: PPUSH
 241: CALL_OW 12
 245: PUSH
 246: LD_INT 10
 248: PPUSH
 249: LD_INT 12
 251: PPUSH
 252: CALL_OW 12
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: ST_TO_ADDR
// hc_class := class_apeman ;
 261: LD_ADDR_OWVAR 28
 265: PUSH
 266: LD_INT 12
 268: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 22 , 18 , 20 , false ) ;
 269: CALL_OW 44
 273: PPUSH
 274: LD_INT 22
 276: PPUSH
 277: LD_INT 18
 279: PPUSH
 280: LD_INT 20
 282: PPUSH
 283: LD_INT 0
 285: PPUSH
 286: CALL_OW 50
// end ;
 290: GO 203
 292: POP
 293: POP
// end ; end_of_file
 294: LD_VAR 0 1
 298: RET
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
 305: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 306: LD_ADDR_VAR 0 3
 310: PUSH
 311: LD_INT 22
 313: PUSH
 314: LD_INT 1
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 21
 323: PUSH
 324: LD_INT 3
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: LD_INT 30
 333: PUSH
 334: LD_INT 0
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PPUSH
 346: CALL_OW 69
 350: ST_TO_ADDR
// if tmp then
 351: LD_VAR 0 3
 355: IFFALSE 373
// SetBName ( tmp [ 1 ] , delta ) ;
 357: LD_VAR 0 3
 361: PUSH
 362: LD_INT 1
 364: ARRAY
 365: PPUSH
 366: LD_STRING delta
 368: PPUSH
 369: CALL_OW 500
// uc_side := 1 ;
 373: LD_ADDR_OWVAR 20
 377: PUSH
 378: LD_INT 1
 380: ST_TO_ADDR
// uc_nation := 1 ;
 381: LD_ADDR_OWVAR 21
 385: PUSH
 386: LD_INT 1
 388: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 389: LD_ADDR_EXP 1
 393: PUSH
 394: LD_STRING JMM
 396: PPUSH
 397: LD_INT 1
 399: PPUSH
 400: LD_EXP 24
 404: PPUSH
 405: CALL 27498 0 3
 409: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 410: LD_ADDR_EXP 17
 414: PUSH
 415: LD_STRING Harisson
 417: PPUSH
 418: LD_INT 0
 420: PPUSH
 421: LD_STRING 
 423: PPUSH
 424: CALL 27498 0 3
 428: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 429: LD_EXP 1
 433: PPUSH
 434: LD_VAR 0 3
 438: PUSH
 439: LD_INT 1
 441: ARRAY
 442: PPUSH
 443: CALL_OW 250
 447: PPUSH
 448: LD_VAR 0 3
 452: PUSH
 453: LD_INT 1
 455: ARRAY
 456: PPUSH
 457: CALL_OW 251
 461: PPUSH
 462: LD_INT 5
 464: PPUSH
 465: LD_INT 0
 467: PPUSH
 468: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 472: LD_EXP 1
 476: PPUSH
 477: LD_INT 1
 479: PPUSH
 480: CALL_OW 336
// Gladstone := PrepareUnitForce ( Gladstone , true , mission_prefix_prev ) ;
 484: LD_ADDR_EXP 2
 488: PUSH
 489: LD_STRING Gladstone
 491: PPUSH
 492: LD_INT 1
 494: PPUSH
 495: LD_EXP 24
 499: PPUSH
 500: CALL 27582 0 3
 504: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 505: LD_EXP 2
 509: PPUSH
 510: LD_VAR 0 3
 514: PUSH
 515: LD_INT 1
 517: ARRAY
 518: PPUSH
 519: CALL_OW 250
 523: PPUSH
 524: LD_VAR 0 3
 528: PUSH
 529: LD_INT 1
 531: ARRAY
 532: PPUSH
 533: CALL_OW 251
 537: PPUSH
 538: LD_INT 5
 540: PPUSH
 541: LD_INT 0
 543: PPUSH
 544: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 548: LD_EXP 2
 552: PPUSH
 553: LD_INT 4
 555: PPUSH
 556: CALL_OW 336
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
 560: LD_ADDR_EXP 3
 564: PUSH
 565: LD_STRING Denis
 567: PPUSH
 568: LD_INT 1
 570: PPUSH
 571: LD_EXP 24
 575: PPUSH
 576: CALL 27498 0 3
 580: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 581: LD_EXP 3
 585: PPUSH
 586: LD_VAR 0 3
 590: PUSH
 591: LD_INT 1
 593: ARRAY
 594: PPUSH
 595: CALL_OW 250
 599: PPUSH
 600: LD_VAR 0 3
 604: PUSH
 605: LD_INT 1
 607: ARRAY
 608: PPUSH
 609: CALL_OW 251
 613: PPUSH
 614: LD_INT 5
 616: PPUSH
 617: LD_INT 0
 619: PPUSH
 620: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 624: LD_EXP 3
 628: PPUSH
 629: LD_INT 4
 631: PPUSH
 632: CALL_OW 336
// Mike := PrepareUnit ( Mike , true , mission_prefix_prev ) ;
 636: LD_ADDR_EXP 10
 640: PUSH
 641: LD_STRING Mike
 643: PPUSH
 644: LD_INT 1
 646: PPUSH
 647: LD_EXP 24
 651: PPUSH
 652: CALL 27498 0 3
 656: ST_TO_ADDR
// PlaceUnitXYR ( Mike , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 657: LD_EXP 10
 661: PPUSH
 662: LD_VAR 0 3
 666: PUSH
 667: LD_INT 1
 669: ARRAY
 670: PPUSH
 671: CALL_OW 250
 675: PPUSH
 676: LD_VAR 0 3
 680: PUSH
 681: LD_INT 1
 683: ARRAY
 684: PPUSH
 685: CALL_OW 251
 689: PPUSH
 690: LD_INT 5
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 50
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 700: LD_STRING FrankInDelta
 702: PPUSH
 703: LD_INT 0
 705: PPUSH
 706: CALL_OW 30
 710: PUSH
 711: LD_INT 1
 713: EQUAL
 714: IFFALSE 792
// begin Frank := PrepareUnitForce ( Frank , true , mission_prefix_prev ) ;
 716: LD_ADDR_EXP 5
 720: PUSH
 721: LD_STRING Frank
 723: PPUSH
 724: LD_INT 1
 726: PPUSH
 727: LD_EXP 24
 731: PPUSH
 732: CALL 27582 0 3
 736: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 737: LD_EXP 5
 741: PPUSH
 742: LD_VAR 0 3
 746: PUSH
 747: LD_INT 1
 749: ARRAY
 750: PPUSH
 751: CALL_OW 250
 755: PPUSH
 756: LD_VAR 0 3
 760: PUSH
 761: LD_INT 1
 763: ARRAY
 764: PPUSH
 765: CALL_OW 251
 769: PPUSH
 770: LD_INT 5
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 780: LD_EXP 5
 784: PPUSH
 785: LD_INT 1
 787: PPUSH
 788: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 792: LD_STRING LisaInDelta
 794: PPUSH
 795: LD_INT 0
 797: PPUSH
 798: CALL_OW 30
 802: PUSH
 803: LD_INT 1
 805: EQUAL
 806: IFFALSE 884
// begin Lisa := PrepareUnitForce ( Lisa , true , mission_prefix_prev ) ;
 808: LD_ADDR_EXP 4
 812: PUSH
 813: LD_STRING Lisa
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: LD_EXP 24
 823: PPUSH
 824: CALL 27582 0 3
 828: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 829: LD_EXP 4
 833: PPUSH
 834: LD_VAR 0 3
 838: PUSH
 839: LD_INT 1
 841: ARRAY
 842: PPUSH
 843: CALL_OW 250
 847: PPUSH
 848: LD_VAR 0 3
 852: PUSH
 853: LD_INT 1
 855: ARRAY
 856: PPUSH
 857: CALL_OW 251
 861: PPUSH
 862: LD_INT 5
 864: PPUSH
 865: LD_INT 0
 867: PPUSH
 868: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 872: LD_EXP 4
 876: PPUSH
 877: LD_INT 1
 879: PPUSH
 880: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 884: LD_STRING BobbyInDelta
 886: PPUSH
 887: LD_INT 0
 889: PPUSH
 890: CALL_OW 30
 894: PUSH
 895: LD_INT 1
 897: EQUAL
 898: IFFALSE 976
// begin Bobby := PrepareUnitForce ( Bobby , true , mission_prefix_prev ) ;
 900: LD_ADDR_EXP 6
 904: PUSH
 905: LD_STRING Bobby
 907: PPUSH
 908: LD_INT 1
 910: PPUSH
 911: LD_EXP 24
 915: PPUSH
 916: CALL 27582 0 3
 920: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 921: LD_EXP 6
 925: PPUSH
 926: LD_VAR 0 3
 930: PUSH
 931: LD_INT 1
 933: ARRAY
 934: PPUSH
 935: CALL_OW 250
 939: PPUSH
 940: LD_VAR 0 3
 944: PUSH
 945: LD_INT 1
 947: ARRAY
 948: PPUSH
 949: CALL_OW 251
 953: PPUSH
 954: LD_INT 5
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 964: LD_EXP 6
 968: PPUSH
 969: LD_INT 1
 971: PPUSH
 972: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 976: LD_STRING CyrusInDelta
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL_OW 30
 986: PUSH
 987: LD_INT 1
 989: EQUAL
 990: IFFALSE 1068
// begin Cyrus := PrepareUnitForce ( Cyrus , true , mission_prefix_prev ) ;
 992: LD_ADDR_EXP 7
 996: PUSH
 997: LD_STRING Cyrus
 999: PPUSH
1000: LD_INT 1
1002: PPUSH
1003: LD_EXP 24
1007: PPUSH
1008: CALL 27582 0 3
1012: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1013: LD_EXP 7
1017: PPUSH
1018: LD_VAR 0 3
1022: PUSH
1023: LD_INT 1
1025: ARRAY
1026: PPUSH
1027: CALL_OW 250
1031: PPUSH
1032: LD_VAR 0 3
1036: PUSH
1037: LD_INT 1
1039: ARRAY
1040: PPUSH
1041: CALL_OW 251
1045: PPUSH
1046: LD_INT 5
1048: PPUSH
1049: LD_INT 0
1051: PPUSH
1052: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
1056: LD_EXP 7
1060: PPUSH
1061: LD_INT 1
1063: PPUSH
1064: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
1068: LD_STRING DonaldsonInDelta
1070: PPUSH
1071: LD_INT 0
1073: PPUSH
1074: CALL_OW 30
1078: PUSH
1079: LD_INT 1
1081: EQUAL
1082: IFFALSE 1160
// begin Donaldson := PrepareUnitForce ( Donaldson , true , mission_prefix_prev ) ;
1084: LD_ADDR_EXP 9
1088: PUSH
1089: LD_STRING Donaldson
1091: PPUSH
1092: LD_INT 1
1094: PPUSH
1095: LD_EXP 24
1099: PPUSH
1100: CALL 27582 0 3
1104: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1105: LD_EXP 9
1109: PPUSH
1110: LD_VAR 0 3
1114: PUSH
1115: LD_INT 1
1117: ARRAY
1118: PPUSH
1119: CALL_OW 250
1123: PPUSH
1124: LD_VAR 0 3
1128: PUSH
1129: LD_INT 1
1131: ARRAY
1132: PPUSH
1133: CALL_OW 251
1137: PPUSH
1138: LD_INT 5
1140: PPUSH
1141: LD_INT 0
1143: PPUSH
1144: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
1148: LD_EXP 9
1152: PPUSH
1153: LD_INT 1
1155: PPUSH
1156: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
1160: LD_STRING BrownInDelta
1162: PPUSH
1163: LD_INT 0
1165: PPUSH
1166: CALL_OW 30
1170: PUSH
1171: LD_INT 1
1173: EQUAL
1174: IFFALSE 1252
// begin Brown := PrepareUnitForce ( Brown , true , mission_prefix_prev ) ;
1176: LD_ADDR_EXP 8
1180: PUSH
1181: LD_STRING Brown
1183: PPUSH
1184: LD_INT 1
1186: PPUSH
1187: LD_EXP 24
1191: PPUSH
1192: CALL 27582 0 3
1196: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1197: LD_EXP 8
1201: PPUSH
1202: LD_VAR 0 3
1206: PUSH
1207: LD_INT 1
1209: ARRAY
1210: PPUSH
1211: CALL_OW 250
1215: PPUSH
1216: LD_VAR 0 3
1220: PUSH
1221: LD_INT 1
1223: ARRAY
1224: PPUSH
1225: CALL_OW 251
1229: PPUSH
1230: LD_INT 5
1232: PPUSH
1233: LD_INT 0
1235: PPUSH
1236: CALL_OW 50
// SetClass ( Brown , 2 ) ;
1240: LD_EXP 8
1244: PPUSH
1245: LD_INT 2
1247: PPUSH
1248: CALL_OW 336
// end ; others := CreateCharacterSet ( othersInDelta ) ;
1252: LD_ADDR_EXP 11
1256: PUSH
1257: LD_STRING othersInDelta
1259: PPUSH
1260: CALL_OW 31
1264: ST_TO_ADDR
// for i in others do
1265: LD_ADDR_VAR 0 2
1269: PUSH
1270: LD_EXP 11
1274: PUSH
1275: FOR_IN
1276: IFFALSE 1323
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1278: LD_VAR 0 2
1282: PPUSH
1283: LD_VAR 0 3
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: CALL_OW 250
1296: PPUSH
1297: LD_VAR 0 3
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 251
1310: PPUSH
1311: LD_INT 35
1313: PPUSH
1314: LD_INT 0
1316: PPUSH
1317: CALL_OW 50
1321: GO 1275
1323: POP
1324: POP
// apemans := CreateCharacterSet ( apeInDelta ) ;
1325: LD_ADDR_EXP 13
1329: PUSH
1330: LD_STRING apeInDelta
1332: PPUSH
1333: CALL_OW 31
1337: ST_TO_ADDR
// uc_nation := 0 ;
1338: LD_ADDR_OWVAR 21
1342: PUSH
1343: LD_INT 0
1345: ST_TO_ADDR
// if apemans > 5 then
1346: LD_EXP 13
1350: PUSH
1351: LD_INT 5
1353: GREATER
1354: IFFALSE 1449
// begin for i := 1 to 5 do
1356: LD_ADDR_VAR 0 2
1360: PUSH
1361: DOUBLE
1362: LD_INT 1
1364: DEC
1365: ST_TO_ADDR
1366: LD_INT 5
1368: PUSH
1369: FOR_TO
1370: IFFALSE 1445
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1372: LD_EXP 13
1376: PUSH
1377: LD_VAR 0 2
1381: ARRAY
1382: PPUSH
1383: LD_VAR 0 3
1387: PUSH
1388: LD_INT 1
1390: ARRAY
1391: PPUSH
1392: CALL_OW 250
1396: PPUSH
1397: LD_VAR 0 3
1401: PUSH
1402: LD_INT 1
1404: ARRAY
1405: PPUSH
1406: CALL_OW 251
1410: PPUSH
1411: LD_INT 50
1413: PPUSH
1414: LD_INT 0
1416: PPUSH
1417: CALL_OW 50
// yourApemans := yourApemans ^ apemans [ i ] ;
1421: LD_ADDR_EXP 14
1425: PUSH
1426: LD_EXP 14
1430: PUSH
1431: LD_EXP 13
1435: PUSH
1436: LD_VAR 0 2
1440: ARRAY
1441: ADD
1442: ST_TO_ADDR
// end ;
1443: GO 1369
1445: POP
1446: POP
// end else
1447: GO 1525
// begin for i in apemans do
1449: LD_ADDR_VAR 0 2
1453: PUSH
1454: LD_EXP 13
1458: PUSH
1459: FOR_IN
1460: IFFALSE 1523
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1462: LD_VAR 0 2
1466: PPUSH
1467: LD_VAR 0 3
1471: PUSH
1472: LD_INT 1
1474: ARRAY
1475: PPUSH
1476: CALL_OW 250
1480: PPUSH
1481: LD_VAR 0 3
1485: PUSH
1486: LD_INT 1
1488: ARRAY
1489: PPUSH
1490: CALL_OW 251
1494: PPUSH
1495: LD_INT 50
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: CALL_OW 50
// yourApemans := yourApemans ^ i ;
1505: LD_ADDR_EXP 14
1509: PUSH
1510: LD_EXP 14
1514: PUSH
1515: LD_VAR 0 2
1519: ADD
1520: ST_TO_ADDR
// end ;
1521: GO 1459
1523: POP
1524: POP
// end ; end ;
1525: LD_VAR 0 1
1529: RET
// export function LoadVehicles ; var i , j , veh , tmp , vehicles ; begin
1530: LD_INT 0
1532: PPUSH
1533: PPUSH
1534: PPUSH
1535: PPUSH
1536: PPUSH
1537: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1538: LD_ADDR_VAR 0 5
1542: PUSH
1543: LD_INT 22
1545: PUSH
1546: LD_INT 1
1548: PUSH
1549: EMPTY
1550: LIST
1551: LIST
1552: PUSH
1553: LD_INT 21
1555: PUSH
1556: LD_INT 3
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: PUSH
1563: LD_INT 30
1565: PUSH
1566: LD_INT 0
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 69
1582: ST_TO_ADDR
// uc_side := 1 ;
1583: LD_ADDR_OWVAR 20
1587: PUSH
1588: LD_INT 1
1590: ST_TO_ADDR
// vehicles := LoadVariable ( vehiclesInDelta , [ ] ) ;
1591: LD_ADDR_VAR 0 6
1595: PUSH
1596: LD_STRING vehiclesInDelta
1598: PPUSH
1599: EMPTY
1600: PPUSH
1601: CALL_OW 30
1605: ST_TO_ADDR
// for i := 1 to Count ( vehicles ) div 4 do
1606: LD_ADDR_VAR 0 2
1610: PUSH
1611: DOUBLE
1612: LD_INT 1
1614: DEC
1615: ST_TO_ADDR
1616: LD_VAR 0 6
1620: PPUSH
1621: CALL 29698 0 1
1625: PUSH
1626: LD_INT 4
1628: DIV
1629: PUSH
1630: FOR_TO
1631: IFFALSE 1788
// begin uc_nation := vehicles [ 1 ] ;
1633: LD_ADDR_OWVAR 21
1637: PUSH
1638: LD_VAR 0 6
1642: PUSH
1643: LD_INT 1
1645: ARRAY
1646: ST_TO_ADDR
// vc_chassis := vehicles [ 2 ] ;
1647: LD_ADDR_OWVAR 37
1651: PUSH
1652: LD_VAR 0 6
1656: PUSH
1657: LD_INT 2
1659: ARRAY
1660: ST_TO_ADDR
// vc_engine := vehicles [ 3 ] ;
1661: LD_ADDR_OWVAR 39
1665: PUSH
1666: LD_VAR 0 6
1670: PUSH
1671: LD_INT 3
1673: ARRAY
1674: ST_TO_ADDR
// vc_control := vehicles [ 4 ] ;
1675: LD_ADDR_OWVAR 38
1679: PUSH
1680: LD_VAR 0 6
1684: PUSH
1685: LD_INT 4
1687: ARRAY
1688: ST_TO_ADDR
// vc_weapon := vehicles [ 5 ] ;
1689: LD_ADDR_OWVAR 40
1693: PUSH
1694: LD_VAR 0 6
1698: PUSH
1699: LD_INT 5
1701: ARRAY
1702: ST_TO_ADDR
// veh := CreateVehicle ;
1703: LD_ADDR_VAR 0 4
1707: PUSH
1708: CALL_OW 45
1712: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1713: LD_VAR 0 4
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: LD_INT 5
1723: PPUSH
1724: CALL_OW 12
1728: PPUSH
1729: CALL_OW 233
// PlaceUnitArea ( veh , parkingArea , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 4
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// for j := 1 to 5 do
1748: LD_ADDR_VAR 0 3
1752: PUSH
1753: DOUBLE
1754: LD_INT 1
1756: DEC
1757: ST_TO_ADDR
1758: LD_INT 5
1760: PUSH
1761: FOR_TO
1762: IFFALSE 1784
// vehicles := Delete ( vehicles , 1 ) ;
1764: LD_ADDR_VAR 0 6
1768: PUSH
1769: LD_VAR 0 6
1773: PPUSH
1774: LD_INT 1
1776: PPUSH
1777: CALL_OW 3
1781: ST_TO_ADDR
1782: GO 1761
1784: POP
1785: POP
// end ;
1786: GO 1630
1788: POP
1789: POP
// end ;
1790: LD_VAR 0 1
1794: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1795: LD_INT 0
1797: PPUSH
1798: PPUSH
1799: PPUSH
1800: PPUSH
1801: PPUSH
// uc_side := 1 ;
1802: LD_ADDR_OWVAR 20
1806: PUSH
1807: LD_INT 1
1809: ST_TO_ADDR
// uc_nation := 1 ;
1810: LD_ADDR_OWVAR 21
1814: PUSH
1815: LD_INT 1
1817: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1818: LD_ADDR_VAR 0 4
1822: PUSH
1823: LD_INT 22
1825: PUSH
1826: LD_INT 1
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: LD_INT 21
1835: PUSH
1836: LD_INT 3
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 30
1845: PUSH
1846: LD_INT 0
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: PPUSH
1858: CALL_OW 69
1862: ST_TO_ADDR
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_nation , nation_american ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) ;
1863: LD_ADDR_EXP 16
1867: PUSH
1868: LD_INT 22
1870: PUSH
1871: LD_INT 1
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: LD_INT 23
1880: PUSH
1881: LD_INT 1
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PUSH
1888: LD_INT 25
1890: PUSH
1891: LD_INT 4
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PUSH
1898: LD_INT 26
1900: PUSH
1901: LD_INT 1
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: LIST
1912: LIST
1913: PUSH
1914: EMPTY
1915: LIST
1916: PPUSH
1917: CALL_OW 69
1921: PUSH
1922: LD_EXP 1
1926: PUSH
1927: LD_EXP 7
1931: PUSH
1932: LD_EXP 6
1936: PUSH
1937: LD_EXP 5
1941: PUSH
1942: LD_EXP 2
1946: PUSH
1947: LD_EXP 3
1951: PUSH
1952: LD_EXP 8
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: DIFF
1966: ST_TO_ADDR
// if not deltaDoctor then
1967: LD_EXP 16
1971: NOT
1972: IFFALSE 2134
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_nation , nation_american ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
1974: LD_ADDR_VAR 0 5
1978: PUSH
1979: LD_INT 22
1981: PUSH
1982: LD_INT 1
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: PUSH
1989: LD_INT 23
1991: PUSH
1992: LD_INT 1
1994: PUSH
1995: EMPTY
1996: LIST
1997: LIST
1998: PUSH
1999: LD_INT 26
2001: PUSH
2002: LD_INT 1
2004: PUSH
2005: EMPTY
2006: LIST
2007: LIST
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: LIST
2013: PUSH
2014: EMPTY
2015: LIST
2016: PPUSH
2017: CALL_OW 69
2021: PUSH
2022: LD_EXP 1
2026: PUSH
2027: LD_EXP 7
2031: PUSH
2032: LD_EXP 6
2036: PUSH
2037: LD_EXP 5
2041: PUSH
2042: LD_EXP 2
2046: PUSH
2047: LD_EXP 3
2051: PUSH
2052: LD_EXP 8
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: DIFF
2066: ST_TO_ADDR
// if filter then
2067: LD_VAR 0 5
2071: IFFALSE 2132
// for i in filter do
2073: LD_ADDR_VAR 0 2
2077: PUSH
2078: LD_VAR 0 5
2082: PUSH
2083: FOR_IN
2084: IFFALSE 2130
// if GetSkill ( i , 4 ) >= 4 then
2086: LD_VAR 0 2
2090: PPUSH
2091: LD_INT 4
2093: PPUSH
2094: CALL_OW 259
2098: PUSH
2099: LD_INT 4
2101: GREATEREQUAL
2102: IFFALSE 2128
// begin deltaDoctor := i ;
2104: LD_ADDR_EXP 16
2108: PUSH
2109: LD_VAR 0 2
2113: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
2114: LD_EXP 16
2118: PPUSH
2119: LD_INT 4
2121: PPUSH
2122: CALL_OW 336
// break ;
2126: GO 2130
// end ;
2128: GO 2083
2130: POP
2131: POP
// end else
2132: GO 2148
// deltaDoctor := deltaDoctor [ 1 ] ;
2134: LD_ADDR_EXP 16
2138: PUSH
2139: LD_EXP 16
2143: PUSH
2144: LD_INT 1
2146: ARRAY
2147: ST_TO_ADDR
// for i := 1 to 7 do
2148: LD_ADDR_VAR 0 2
2152: PUSH
2153: DOUBLE
2154: LD_INT 1
2156: DEC
2157: ST_TO_ADDR
2158: LD_INT 7
2160: PUSH
2161: FOR_TO
2162: IFFALSE 2291
// begin hc_gallery :=  ;
2164: LD_ADDR_OWVAR 33
2168: PUSH
2169: LD_STRING 
2171: ST_TO_ADDR
// hc_name :=  ;
2172: LD_ADDR_OWVAR 26
2176: PUSH
2177: LD_STRING 
2179: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ rand ( 1 , 4 ) ] , 4 ) ;
2180: LD_INT 0
2182: PPUSH
2183: LD_INT 1
2185: PUSH
2186: LD_INT 2
2188: PUSH
2189: LD_INT 3
2191: PUSH
2192: LD_INT 4
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 1
2203: PPUSH
2204: LD_INT 4
2206: PPUSH
2207: CALL_OW 12
2211: ARRAY
2212: PPUSH
2213: LD_INT 4
2215: PPUSH
2216: CALL_OW 380
// un := CreateHuman ;
2220: LD_ADDR_VAR 0 3
2224: PUSH
2225: CALL_OW 44
2229: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2230: LD_ADDR_EXP 12
2234: PUSH
2235: LD_EXP 12
2239: PUSH
2240: LD_VAR 0 3
2244: ADD
2245: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2246: LD_VAR 0 3
2250: PPUSH
2251: LD_VAR 0 4
2255: PUSH
2256: LD_INT 1
2258: ARRAY
2259: PPUSH
2260: CALL_OW 250
2264: PPUSH
2265: LD_VAR 0 4
2269: PUSH
2270: LD_INT 1
2272: ARRAY
2273: PPUSH
2274: CALL_OW 251
2278: PPUSH
2279: LD_INT 15
2281: PPUSH
2282: LD_INT 0
2284: PPUSH
2285: CALL_OW 50
// end ;
2289: GO 2161
2291: POP
2292: POP
// if deltaDoctor then
2293: LD_EXP 16
2297: IFFALSE 2301
// exit ;
2299: GO 2398
// hc_gallery := Dawkins ;
2301: LD_ADDR_OWVAR 33
2305: PUSH
2306: LD_STRING Dawkins
2308: ST_TO_ADDR
// hc_face_number := 1 ;
2309: LD_ADDR_OWVAR 34
2313: PUSH
2314: LD_INT 1
2316: ST_TO_ADDR
// hc_name := Dr. Adam Charles Dawkins ;
2317: LD_ADDR_OWVAR 26
2321: PUSH
2322: LD_STRING Dr. Adam Charles Dawkins
2324: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 5 ) ;
2325: LD_INT 1
2327: PPUSH
2328: LD_INT 4
2330: PPUSH
2331: LD_INT 5
2333: PPUSH
2334: CALL_OW 380
// deltaDoctor := CreateHuman ;
2338: LD_ADDR_EXP 16
2342: PUSH
2343: CALL_OW 44
2347: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2348: LD_EXP 16
2352: PPUSH
2353: LD_VAR 0 4
2357: PUSH
2358: LD_INT 1
2360: ARRAY
2361: PPUSH
2362: CALL_OW 250
2366: PPUSH
2367: LD_VAR 0 4
2371: PUSH
2372: LD_INT 1
2374: ARRAY
2375: PPUSH
2376: CALL_OW 251
2380: PPUSH
2381: LD_INT 5
2383: PPUSH
2384: LD_INT 0
2386: PPUSH
2387: CALL_OW 50
// ToLua ( enableBioCharacter(BIO_ADAM) ) ;
2391: LD_STRING enableBioCharacter(BIO_ADAM)
2393: PPUSH
2394: CALL_OW 559
// end ; end_of_file
2398: LD_VAR 0 1
2402: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2403: LD_INT 0
2405: PPUSH
2406: PPUSH
2407: PPUSH
2408: PPUSH
2409: PPUSH
2410: PPUSH
2411: PPUSH
// buildings := LoadVariable ( buildingsInDelta , [ ] ) ;
2412: LD_ADDR_VAR 0 5
2416: PUSH
2417: LD_STRING buildingsInDelta
2419: PPUSH
2420: EMPTY
2421: PPUSH
2422: CALL_OW 30
2426: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2427: LD_INT 68
2429: PPUSH
2430: LD_INT 40
2432: PPUSH
2433: LD_INT 1
2435: PPUSH
2436: CALL_OW 441
// uc_side := 1 ;
2440: LD_ADDR_OWVAR 20
2444: PUSH
2445: LD_INT 1
2447: ST_TO_ADDR
// uc_nation := 1 ;
2448: LD_ADDR_OWVAR 21
2452: PUSH
2453: LD_INT 1
2455: ST_TO_ADDR
// for i := 1 to buildings do
2456: LD_ADDR_VAR 0 2
2460: PUSH
2461: DOUBLE
2462: LD_INT 1
2464: DEC
2465: ST_TO_ADDR
2466: LD_VAR 0 5
2470: PUSH
2471: FOR_TO
2472: IFFALSE 2775
// begin InitBc ;
2474: CALL_OW 21
// bc_type := buildings [ i ] [ 1 ] ;
2478: LD_ADDR_OWVAR 42
2482: PUSH
2483: LD_VAR 0 5
2487: PUSH
2488: LD_VAR 0 2
2492: ARRAY
2493: PUSH
2494: LD_INT 1
2496: ARRAY
2497: ST_TO_ADDR
// bc_level := buildings [ i ] [ 2 ] ;
2498: LD_ADDR_OWVAR 43
2502: PUSH
2503: LD_VAR 0 5
2507: PUSH
2508: LD_VAR 0 2
2512: ARRAY
2513: PUSH
2514: LD_INT 2
2516: ARRAY
2517: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half , b_lab_full ] then
2518: LD_OWVAR 42
2522: PUSH
2523: LD_INT 6
2525: PUSH
2526: LD_INT 7
2528: PUSH
2529: LD_INT 8
2531: PUSH
2532: EMPTY
2533: LIST
2534: LIST
2535: LIST
2536: IN
2537: IFFALSE 2661
// begin bc_kind1 := b_lab_basic ;
2539: LD_ADDR_OWVAR 44
2543: PUSH
2544: LD_INT 9
2546: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2547: LD_ADDR_OWVAR 45
2551: PUSH
2552: LD_INT 9
2554: ST_TO_ADDR
// if buildings [ i ] [ 6 ] then
2555: LD_VAR 0 5
2559: PUSH
2560: LD_VAR 0 2
2564: ARRAY
2565: PUSH
2566: LD_INT 6
2568: ARRAY
2569: IFFALSE 2637
// begin bc_kind1 := buildings [ i ] [ 6 ] ;
2571: LD_ADDR_OWVAR 44
2575: PUSH
2576: LD_VAR 0 5
2580: PUSH
2581: LD_VAR 0 2
2585: ARRAY
2586: PUSH
2587: LD_INT 6
2589: ARRAY
2590: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2591: LD_ADDR_OWVAR 45
2595: PUSH
2596: LD_INT 9
2598: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2599: LD_VAR 0 5
2603: PUSH
2604: LD_VAR 0 2
2608: ARRAY
2609: PUSH
2610: LD_INT 7
2612: ARRAY
2613: IFFALSE 2635
// bc_kind2 := buildings [ i ] [ 7 ] ;
2615: LD_ADDR_OWVAR 45
2619: PUSH
2620: LD_VAR 0 5
2624: PUSH
2625: LD_VAR 0 2
2629: ARRAY
2630: PUSH
2631: LD_INT 7
2633: ARRAY
2634: ST_TO_ADDR
// end else
2635: GO 2661
// begin bc_type := b_lab ;
2637: LD_ADDR_OWVAR 42
2641: PUSH
2642: LD_INT 6
2644: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
2645: LD_ADDR_OWVAR 44
2649: PUSH
2650: LD_INT 9
2652: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2653: LD_ADDR_OWVAR 45
2657: PUSH
2658: LD_INT 9
2660: ST_TO_ADDR
// end ; end ; building := CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2661: LD_ADDR_VAR 0 4
2665: PUSH
2666: LD_VAR 0 5
2670: PUSH
2671: LD_VAR 0 2
2675: ARRAY
2676: PUSH
2677: LD_INT 3
2679: ARRAY
2680: PPUSH
2681: LD_VAR 0 5
2685: PUSH
2686: LD_VAR 0 2
2690: ARRAY
2691: PUSH
2692: LD_INT 4
2694: ARRAY
2695: PPUSH
2696: LD_VAR 0 5
2700: PUSH
2701: LD_VAR 0 2
2705: ARRAY
2706: PUSH
2707: LD_INT 5
2709: ARRAY
2710: PPUSH
2711: CALL_OW 47
2715: ST_TO_ADDR
// if GetBType ( building ) = b_bunker and buildings [ i ] [ 8 ] then
2716: LD_VAR 0 4
2720: PPUSH
2721: CALL_OW 266
2725: PUSH
2726: LD_INT 32
2728: EQUAL
2729: IFFALSE 2747
2731: PUSH
2732: LD_VAR 0 5
2736: PUSH
2737: LD_VAR 0 2
2741: ARRAY
2742: PUSH
2743: LD_INT 8
2745: ARRAY
2746: AND
2747: IFFALSE 2773
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2749: LD_VAR 0 4
2753: PPUSH
2754: LD_VAR 0 5
2758: PUSH
2759: LD_VAR 0 2
2763: ARRAY
2764: PUSH
2765: LD_INT 8
2767: ARRAY
2768: PPUSH
2769: CALL_OW 431
// end ;
2773: GO 2471
2775: POP
2776: POP
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2777: LD_ADDR_VAR 0 6
2781: PUSH
2782: LD_INT 22
2784: PUSH
2785: LD_INT 1
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: LD_INT 2
2794: PUSH
2795: LD_INT 30
2797: PUSH
2798: LD_INT 6
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: PUSH
2805: LD_INT 30
2807: PUSH
2808: LD_INT 7
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: PUSH
2815: LD_INT 30
2817: PUSH
2818: LD_INT 8
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: LIST
2829: LIST
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PPUSH
2835: CALL_OW 69
2839: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2840: LD_ADDR_VAR 0 7
2844: PUSH
2845: LD_INT 22
2847: PUSH
2848: LD_INT 1
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: LD_INT 30
2857: PUSH
2858: LD_INT 0
2860: PUSH
2861: EMPTY
2862: LIST
2863: LIST
2864: PUSH
2865: EMPTY
2866: LIST
2867: LIST
2868: PPUSH
2869: CALL_OW 69
2873: ST_TO_ADDR
// if lab and tmp then
2874: LD_VAR 0 6
2878: IFFALSE 2886
2880: PUSH
2881: LD_VAR 0 7
2885: AND
2886: IFFALSE 2896
// baseCorrect := 1 ;
2888: LD_ADDR_EXP 19
2892: PUSH
2893: LD_INT 1
2895: ST_TO_ADDR
// if not baseCorrect then
2896: LD_EXP 19
2900: NOT
2901: IFFALSE 3316
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2903: LD_ADDR_VAR 0 2
2907: PUSH
2908: LD_INT 22
2910: PUSH
2911: LD_INT 1
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: PUSH
2918: LD_INT 21
2920: PUSH
2921: LD_INT 3
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: PUSH
2928: EMPTY
2929: LIST
2930: LIST
2931: PPUSH
2932: CALL_OW 69
2936: PUSH
2937: FOR_IN
2938: IFFALSE 2951
// RemoveUnit ( i ) ;
2940: LD_VAR 0 2
2944: PPUSH
2945: CALL_OW 64
2949: GO 2937
2951: POP
2952: POP
// uc_nation := 1 ;
2953: LD_ADDR_OWVAR 21
2957: PUSH
2958: LD_INT 1
2960: ST_TO_ADDR
// uc_side := 1 ;
2961: LD_ADDR_OWVAR 20
2965: PUSH
2966: LD_INT 1
2968: ST_TO_ADDR
// bc_level := 5 ;
2969: LD_ADDR_OWVAR 43
2973: PUSH
2974: LD_INT 5
2976: ST_TO_ADDR
// bc_type := b_depot ;
2977: LD_ADDR_OWVAR 42
2981: PUSH
2982: LD_INT 0
2984: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2985: LD_INT 50
2987: PPUSH
2988: LD_INT 22
2990: PPUSH
2991: LD_INT 0
2993: PPUSH
2994: CALL_OW 47
// bc_type = b_bunker ;
2998: LD_ADDR_OWVAR 42
3002: PUSH
3003: LD_INT 32
3005: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
3006: LD_ADDR_VAR 0 4
3010: PUSH
3011: LD_INT 68
3013: PPUSH
3014: LD_INT 24
3016: PPUSH
3017: LD_INT 4
3019: PPUSH
3020: CALL_OW 47
3024: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
3025: LD_VAR 0 4
3029: PPUSH
3030: LD_INT 4
3032: PUSH
3033: LD_INT 11
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: PUSH
3040: LD_INT 1
3042: PPUSH
3043: LD_INT 2
3045: PPUSH
3046: CALL_OW 12
3050: ARRAY
3051: PPUSH
3052: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
3056: LD_ADDR_VAR 0 4
3060: PUSH
3061: LD_INT 71
3063: PPUSH
3064: LD_INT 34
3066: PPUSH
3067: LD_INT 4
3069: PPUSH
3070: CALL_OW 47
3074: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
3075: LD_VAR 0 4
3079: PPUSH
3080: LD_INT 4
3082: PUSH
3083: LD_INT 11
3085: PUSH
3086: EMPTY
3087: LIST
3088: LIST
3089: PUSH
3090: LD_INT 1
3092: PPUSH
3093: LD_INT 2
3095: PPUSH
3096: CALL_OW 12
3100: ARRAY
3101: PPUSH
3102: CALL_OW 431
// bc_type := b_breastwork ;
3106: LD_ADDR_OWVAR 42
3110: PUSH
3111: LD_INT 31
3113: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
3114: LD_INT 51
3116: PPUSH
3117: LD_INT 7
3119: PPUSH
3120: LD_INT 3
3122: PPUSH
3123: CALL_OW 47
// bc_type := b_oil_mine ;
3127: LD_ADDR_OWVAR 42
3131: PUSH
3132: LD_INT 29
3134: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
3135: LD_INT 68
3137: PPUSH
3138: LD_INT 40
3140: PPUSH
3141: LD_INT 1
3143: PPUSH
3144: CALL_OW 47
// bc_type := b_factory ;
3148: LD_ADDR_OWVAR 42
3152: PUSH
3153: LD_INT 3
3155: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3156: LD_INT 38
3158: PPUSH
3159: LD_INT 20
3161: PPUSH
3162: LD_INT 2
3164: PPUSH
3165: CALL_OW 47
// bc_type := b_ext_noncombat ;
3169: LD_ADDR_OWVAR 42
3173: PUSH
3174: LD_INT 19
3176: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 24 , 2 ) ;
3177: LD_INT 38
3179: PPUSH
3180: LD_INT 24
3182: PPUSH
3183: LD_INT 2
3185: PPUSH
3186: CALL_OW 47
// bc_type := b_ext_radar ;
3190: LD_ADDR_OWVAR 42
3194: PUSH
3195: LD_INT 20
3197: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 35 , 20 , 1 ) ;
3198: LD_INT 35
3200: PPUSH
3201: LD_INT 20
3203: PPUSH
3204: LD_INT 1
3206: PPUSH
3207: CALL_OW 47
// bc_type := b_armoury ;
3211: LD_ADDR_OWVAR 42
3215: PUSH
3216: LD_INT 4
3218: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 33 , 28 , 1 ) ;
3219: LD_INT 33
3221: PPUSH
3222: LD_INT 28
3224: PPUSH
3225: LD_INT 1
3227: PPUSH
3228: CALL_OW 47
// bc_type := b_solar_power ;
3232: LD_ADDR_OWVAR 42
3236: PUSH
3237: LD_INT 27
3239: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3240: LD_INT 46
3242: PPUSH
3243: LD_INT 12
3245: PPUSH
3246: LD_INT 1
3248: PPUSH
3249: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3253: LD_INT 48
3255: PPUSH
3256: LD_INT 11
3258: PPUSH
3259: LD_INT 2
3261: PPUSH
3262: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 35 , 12 , 3 ) ;
3266: LD_INT 35
3268: PPUSH
3269: LD_INT 12
3271: PPUSH
3272: LD_INT 3
3274: PPUSH
3275: CALL_OW 47
// bc_type := b_lab_half ;
3279: LD_ADDR_OWVAR 42
3283: PUSH
3284: LD_INT 7
3286: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
3287: LD_ADDR_OWVAR 44
3291: PUSH
3292: LD_INT 15
3294: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
3295: LD_ADDR_OWVAR 45
3299: PUSH
3300: LD_INT 9
3302: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3303: LD_INT 42
3305: PPUSH
3306: LD_INT 15
3308: PPUSH
3309: LD_INT 2
3311: PPUSH
3312: CALL_OW 47
// end ; end ; end_of_file
3316: LD_VAR 0 1
3320: RET
// export function Action ; var i , j , tmp ; begin
3321: LD_INT 0
3323: PPUSH
3324: PPUSH
3325: PPUSH
3326: PPUSH
// InGameOn ;
3327: CALL_OW 8
// if lab then
3331: LD_EXP 21
3335: IFFALSE 3352
// CenterNowOnUnits ( lab [ 1 ] ) else
3337: LD_EXP 21
3341: PUSH
3342: LD_INT 1
3344: ARRAY
3345: PPUSH
3346: CALL_OW 87
3350: GO 3361
// CenterOnUnits ( JMM ) ;
3352: LD_EXP 1
3356: PPUSH
3357: CALL_OW 85
// if IsOK ( Denis ) then
3361: LD_EXP 3
3365: PPUSH
3366: CALL_OW 302
3370: IFFALSE 3398
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3372: LD_INT 6
3374: PPUSH
3375: LD_INT 1
3377: PPUSH
3378: LD_INT 2
3380: PPUSH
3381: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3385: LD_INT 20
3387: PPUSH
3388: LD_INT 1
3390: PPUSH
3391: LD_INT 1
3393: PPUSH
3394: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3398: LD_EXP 1
3402: PPUSH
3403: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3407: LD_EXP 1
3411: PPUSH
3412: LD_EXP 16
3416: PPUSH
3417: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3421: LD_INT 35
3423: PPUSH
3424: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3428: LD_EXP 16
3432: PPUSH
3433: LD_EXP 1
3437: PPUSH
3438: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3442: LD_EXP 1
3446: PPUSH
3447: LD_EXP 16
3451: PPUSH
3452: CALL_OW 296
3456: PUSH
3457: LD_INT 5
3459: LESS
3460: IFFALSE 3421
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3462: LD_EXP 16
3466: PPUSH
3467: LD_EXP 1
3471: PPUSH
3472: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3476: LD_EXP 1
3480: PPUSH
3481: LD_STRING D1-JMM-1
3483: PPUSH
3484: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3488: LD_EXP 16
3492: PPUSH
3493: LD_STRING D1-Sci-1
3495: PPUSH
3496: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3500: LD_EXP 1
3504: PUSH
3505: LD_EXP 16
3509: PUSH
3510: LD_EXP 3
3514: PUSH
3515: EMPTY
3516: LIST
3517: LIST
3518: LIST
3519: PPUSH
3520: LD_EXP 21
3524: PUSH
3525: LD_INT 1
3527: ARRAY
3528: PPUSH
3529: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
3533: LD_INT 35
3535: PPUSH
3536: CALL_OW 67
// until IsInUnit ( JMM ) and IsInUnit ( DeltaDoctor ) ;
3540: LD_EXP 1
3544: PPUSH
3545: CALL_OW 310
3549: IFFALSE 3562
3551: PUSH
3552: LD_EXP 16
3556: PPUSH
3557: CALL_OW 310
3561: AND
3562: IFFALSE 3533
// CenterNowOnUnits ( lab [ 1 ] ) ;
3564: LD_EXP 21
3568: PUSH
3569: LD_INT 1
3571: ARRAY
3572: PPUSH
3573: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3577: LD_EXP 1
3581: PPUSH
3582: LD_STRING D1-JMM-2
3584: PPUSH
3585: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3589: LD_EXP 16
3593: PPUSH
3594: LD_STRING D1-Sci-2
3596: PPUSH
3597: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3601: LD_EXP 1
3605: PPUSH
3606: LD_STRING D1-JMM-3
3608: PPUSH
3609: CALL_OW 88
// if IsOK ( Denis ) then
3613: LD_EXP 3
3617: PPUSH
3618: CALL_OW 302
3622: IFFALSE 3638
// Say ( DeltaDoctor , D1-Sci-3 ) else
3624: LD_EXP 16
3628: PPUSH
3629: LD_STRING D1-Sci-3
3631: PPUSH
3632: CALL_OW 88
3636: GO 3650
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3638: LD_EXP 16
3642: PPUSH
3643: LD_STRING D1-Sci-3a
3645: PPUSH
3646: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3650: LD_EXP 1
3654: PPUSH
3655: LD_STRING D1-JMM-4
3657: PPUSH
3658: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3662: LD_ADDR_VAR 0 4
3666: PUSH
3667: LD_INT 22
3669: PUSH
3670: LD_INT 1
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: LD_INT 25
3679: PUSH
3680: LD_INT 4
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: PUSH
3687: LD_INT 3
3689: PUSH
3690: LD_INT 54
3692: PUSH
3693: EMPTY
3694: LIST
3695: PUSH
3696: EMPTY
3697: LIST
3698: LIST
3699: PUSH
3700: EMPTY
3701: LIST
3702: LIST
3703: LIST
3704: PPUSH
3705: CALL_OW 69
3709: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3710: LD_ADDR_VAR 0 2
3714: PUSH
3715: LD_INT 22
3717: PUSH
3718: LD_INT 0
3720: PUSH
3721: EMPTY
3722: LIST
3723: LIST
3724: PPUSH
3725: CALL_OW 69
3729: PUSH
3730: FOR_IN
3731: IFFALSE 3781
// for j in tmp do
3733: LD_ADDR_VAR 0 3
3737: PUSH
3738: LD_VAR 0 4
3742: PUSH
3743: FOR_IN
3744: IFFALSE 3777
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3746: LD_VAR 0 3
3750: PPUSH
3751: LD_VAR 0 2
3755: PPUSH
3756: CALL_OW 250
3760: PPUSH
3761: LD_VAR 0 2
3765: PPUSH
3766: CALL_OW 251
3770: PPUSH
3771: CALL_OW 191
3775: GO 3743
3777: POP
3778: POP
3779: GO 3730
3781: POP
3782: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3783: LD_EXP 16
3787: PPUSH
3788: LD_STRING D1-Sci-4
3790: PPUSH
3791: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3795: LD_EXP 1
3799: PPUSH
3800: LD_STRING D1-JMM-5
3802: PPUSH
3803: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3807: LD_EXP 16
3811: PPUSH
3812: LD_STRING D1-Sci-5
3814: PPUSH
3815: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3819: LD_EXP 1
3823: PPUSH
3824: LD_STRING D1-JMM-6
3826: PPUSH
3827: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3831: LD_EXP 17
3835: PPUSH
3836: LD_STRING D1-Har-6
3838: PPUSH
3839: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3843: LD_EXP 1
3847: PPUSH
3848: LD_STRING D1-JMM-7
3850: PPUSH
3851: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3855: LD_EXP 17
3859: PPUSH
3860: LD_STRING D1-Har-7
3862: PPUSH
3863: CALL_OW 94
// if IsOK ( Denis ) then
3867: LD_EXP 3
3871: PPUSH
3872: CALL_OW 302
3876: IFFALSE 3890
// Say ( JMM , D1-JMM-8 ) ;
3878: LD_EXP 1
3882: PPUSH
3883: LD_STRING D1-JMM-8
3885: PPUSH
3886: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3890: LD_EXP 1
3894: PPUSH
3895: LD_STRING D1-JMM-8a
3897: PPUSH
3898: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3902: LD_EXP 17
3906: PPUSH
3907: LD_STRING D1-Har-8
3909: PPUSH
3910: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3914: LD_EXP 1
3918: PPUSH
3919: LD_STRING D1-JMM-9
3921: PPUSH
3922: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3926: LD_EXP 17
3930: PPUSH
3931: LD_STRING D1-Har-9
3933: PPUSH
3934: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3938: LD_EXP 1
3942: PPUSH
3943: LD_STRING D1-JMM-10
3945: PPUSH
3946: CALL_OW 88
// if IsOK ( Denis ) then
3950: LD_EXP 3
3954: PPUSH
3955: CALL_OW 302
3959: IFFALSE 3973
// Say ( JMM , D1-JMM-10a ) ;
3961: LD_EXP 1
3965: PPUSH
3966: LD_STRING D1-JMM-10a
3968: PPUSH
3969: CALL_OW 88
// SelectDeltaCharacters ;
3973: CALL 4457 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 150 ) ;
3977: LD_EXP 21
3981: PUSH
3982: LD_INT 1
3984: ARRAY
3985: PPUSH
3986: CALL_OW 274
3990: PPUSH
3991: LD_INT 1
3993: PPUSH
3994: LD_INT 150
3996: PPUSH
3997: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) then
4001: LD_INT 22
4003: PUSH
4004: LD_INT 1
4006: PUSH
4007: EMPTY
4008: LIST
4009: LIST
4010: PUSH
4011: LD_INT 30
4013: PUSH
4014: LD_INT 29
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: PPUSH
4025: CALL_OW 69
4029: IFFALSE 4055
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
4031: LD_EXP 21
4035: PUSH
4036: LD_INT 1
4038: ARRAY
4039: PPUSH
4040: CALL_OW 274
4044: PPUSH
4045: LD_INT 2
4047: PPUSH
4048: LD_INT 300
4050: PPUSH
4051: CALL_OW 277
// InGameOff ;
4055: CALL_OW 9
// Query ( Q1 ) ;
4059: LD_STRING Q1
4061: PPUSH
4062: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
4066: LD_INT 3
4068: PPUSH
4069: LD_INT 1
4071: PPUSH
4072: CALL_OW 424
// if IsInUnit ( JMM ) then
4076: LD_EXP 1
4080: PPUSH
4081: CALL_OW 310
4085: IFFALSE 4096
// ComExitBuilding ( JMM ) ;
4087: LD_EXP 1
4091: PPUSH
4092: CALL_OW 122
// end ;
4096: LD_VAR 0 1
4100: RET
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
4101: LD_INT 3
4103: PPUSH
4104: LD_INT 22
4106: PUSH
4107: LD_INT 1
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: PUSH
4114: LD_INT 21
4116: PUSH
4117: LD_INT 1
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: PUSH
4124: EMPTY
4125: LIST
4126: LIST
4127: PPUSH
4128: CALL_OW 71
4132: PUSH
4133: LD_INT 0
4135: EQUAL
4136: IFFALSE 4454
4138: GO 4140
4140: DISABLE
4141: LD_INT 0
4143: PPUSH
4144: PPUSH
// begin SaveDeltaCharacters ;
4145: CALL 4829 0 0
// if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) then
4149: LD_INT 3
4151: PPUSH
4152: LD_INT 21
4154: PUSH
4155: LD_INT 2
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: LD_INT 3
4164: PUSH
4165: LD_INT 58
4167: PUSH
4168: EMPTY
4169: LIST
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PPUSH
4179: CALL_OW 70
4183: IFFALSE 4440
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
4185: LD_ADDR_VAR 0 1
4189: PUSH
4190: LD_INT 3
4192: PPUSH
4193: LD_INT 21
4195: PUSH
4196: LD_INT 2
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: LD_INT 3
4205: PUSH
4206: LD_INT 58
4208: PUSH
4209: EMPTY
4210: LIST
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: PPUSH
4220: CALL_OW 70
4224: PUSH
4225: FOR_IN
4226: IFFALSE 4438
// begin cargoType := GetCargoType ( i ) ;
4228: LD_ADDR_VAR 0 2
4232: PUSH
4233: LD_VAR 0 1
4237: PPUSH
4238: CALL_OW 288
4242: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4243: LD_VAR 0 1
4247: PPUSH
4248: CALL_OW 264
4252: PUSH
4253: LD_INT 12
4255: EQUAL
4256: IFFALSE 4353
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] else
4258: LD_ADDR_EXP 15
4262: PUSH
4263: LD_EXP 15
4267: PUSH
4268: LD_VAR 0 1
4272: PPUSH
4273: CALL_OW 248
4277: PUSH
4278: LD_VAR 0 1
4282: PPUSH
4283: CALL_OW 265
4287: PUSH
4288: LD_VAR 0 1
4292: PPUSH
4293: CALL_OW 262
4297: PUSH
4298: LD_VAR 0 1
4302: PPUSH
4303: CALL_OW 263
4307: PUSH
4308: LD_VAR 0 1
4312: PPUSH
4313: CALL_OW 264
4317: PUSH
4318: LD_VAR 0 2
4322: PUSH
4323: LD_VAR 0 1
4327: PPUSH
4328: LD_VAR 0 2
4332: PPUSH
4333: CALL_OW 289
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: PUSH
4347: EMPTY
4348: LIST
4349: ADD
4350: ST_TO_ADDR
4351: GO 4424
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4353: LD_ADDR_EXP 15
4357: PUSH
4358: LD_EXP 15
4362: PUSH
4363: LD_VAR 0 1
4367: PPUSH
4368: CALL_OW 248
4372: PUSH
4373: LD_VAR 0 1
4377: PPUSH
4378: CALL_OW 265
4382: PUSH
4383: LD_VAR 0 1
4387: PPUSH
4388: CALL_OW 262
4392: PUSH
4393: LD_VAR 0 1
4397: PPUSH
4398: CALL_OW 263
4402: PUSH
4403: LD_VAR 0 1
4407: PPUSH
4408: CALL_OW 264
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: PUSH
4420: EMPTY
4421: LIST
4422: ADD
4423: ST_TO_ADDR
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4424: LD_EXP 15
4428: PPUSH
4429: LD_STRING 06_VehiclesIn06_1
4431: PPUSH
4432: CALL_OW 39
// end ;
4436: GO 4225
4438: POP
4439: POP
// end ; SaveCargos ;
4440: CALL 5711 0 0
// ChangeMap ( 6 , %_cont ) ;
4444: LD_INT 6
4446: PPUSH
4447: LD_STRING %_cont
4449: PPUSH
4450: CALL_OW 340
// end ; end_of_file
4454: PPOPN 2
4456: END
// export function SelectDeltaCharacters ; var i , yourPeople ; begin
4457: LD_INT 0
4459: PPUSH
4460: PPUSH
4461: PPUSH
// selectedPeople := [ ] ;
4462: LD_ADDR_EXP 18
4466: PUSH
4467: EMPTY
4468: ST_TO_ADDR
// yourPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4469: LD_ADDR_VAR 0 3
4473: PUSH
4474: LD_INT 22
4476: PUSH
4477: LD_INT 1
4479: PUSH
4480: EMPTY
4481: LIST
4482: LIST
4483: PUSH
4484: LD_INT 21
4486: PUSH
4487: LD_INT 1
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: PUSH
4494: LD_INT 2
4496: PUSH
4497: LD_INT 25
4499: PUSH
4500: LD_INT 1
4502: PUSH
4503: EMPTY
4504: LIST
4505: LIST
4506: PUSH
4507: LD_INT 25
4509: PUSH
4510: LD_INT 2
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PUSH
4517: LD_INT 25
4519: PUSH
4520: LD_INT 3
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: PUSH
4527: LD_INT 25
4529: PUSH
4530: LD_INT 4
4532: PUSH
4533: EMPTY
4534: LIST
4535: LIST
4536: PUSH
4537: EMPTY
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: LIST
4548: PPUSH
4549: CALL_OW 69
4553: PUSH
4554: LD_EXP 1
4558: PUSH
4559: LD_EXP 16
4563: PUSH
4564: LD_EXP 3
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: LIST
4573: DIFF
4574: ST_TO_ADDR
// selectedPeople := CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4575: LD_ADDR_EXP 18
4579: PUSH
4580: LD_STRING text
4582: PPUSH
4583: LD_INT 5
4585: PPUSH
4586: LD_INT 5
4588: PPUSH
4589: LD_INT -5
4591: PUSH
4592: LD_EXP 1
4596: PUSH
4597: LD_INT -6
4599: PUSH
4600: LD_INT -2
4602: PUSH
4603: LD_INT -3
4605: PUSH
4606: LD_INT -5
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: PUSH
4617: LD_VAR 0 3
4621: ADD
4622: PUSH
4623: LD_INT -6
4625: PUSH
4626: LD_INT -4
4628: PUSH
4629: LD_EXP 3
4633: PUSH
4634: LD_EXP 16
4638: PUSH
4639: EMPTY
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: ADD
4645: PPUSH
4646: LD_INT 1
4648: PUSH
4649: LD_INT 3
4651: PUSH
4652: LD_INT 2
4654: PUSH
4655: LD_INT 1
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: PUSH
4662: LD_INT 4
4664: PUSH
4665: EMPTY
4666: LIST
4667: LIST
4668: LIST
4669: LIST
4670: PPUSH
4671: CALL_OW 42
4675: ST_TO_ADDR
// ComStop ( selectedPeople ) ;
4676: LD_EXP 18
4680: PPUSH
4681: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4685: LD_INT 22
4687: PUSH
4688: LD_INT 1
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: PUSH
4695: LD_INT 21
4697: PUSH
4698: LD_INT 1
4700: PUSH
4701: EMPTY
4702: LIST
4703: LIST
4704: PUSH
4705: EMPTY
4706: LIST
4707: LIST
4708: PPUSH
4709: CALL_OW 69
4713: PPUSH
4714: LD_INT 4
4716: PPUSH
4717: CALL_OW 235
// for i in selectedPeople do
4721: LD_ADDR_VAR 0 2
4725: PUSH
4726: LD_EXP 18
4730: PUSH
4731: FOR_IN
4732: IFFALSE 4748
// SetSide ( i , 1 ) ;
4734: LD_VAR 0 2
4738: PPUSH
4739: LD_INT 1
4741: PPUSH
4742: CALL_OW 235
4746: GO 4731
4748: POP
4749: POP
// for i in yourApemans do
4750: LD_ADDR_VAR 0 2
4754: PUSH
4755: LD_EXP 14
4759: PUSH
4760: FOR_IN
4761: IFFALSE 4777
// SetSide ( i , 1 ) ;
4763: LD_VAR 0 2
4767: PPUSH
4768: LD_INT 1
4770: PPUSH
4771: CALL_OW 235
4775: GO 4760
4777: POP
4778: POP
// if Mike then
4779: LD_EXP 10
4783: IFFALSE 4797
// SetSide ( Mike , 1 ) ;
4785: LD_EXP 10
4789: PPUSH
4790: LD_INT 1
4792: PPUSH
4793: CALL_OW 235
// SetSide ( JMM , 1 ) ;
4797: LD_EXP 1
4801: PPUSH
4802: LD_INT 1
4804: PPUSH
4805: CALL_OW 235
// SetSkill ( yourApemans , 2 , 3 ) ;
4809: LD_EXP 14
4813: PPUSH
4814: LD_INT 2
4816: PPUSH
4817: LD_INT 3
4819: PPUSH
4820: CALL_OW 237
// end ;
4824: LD_VAR 0 1
4828: RET
// export function SaveDeltaCharacters ; begin
4829: LD_INT 0
4831: PPUSH
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4832: LD_EXP 1
4836: PPUSH
4837: LD_EXP 23
4841: PUSH
4842: LD_STRING JMM
4844: STR
4845: PPUSH
4846: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4850: LD_EXP 16
4854: PPUSH
4855: LD_STRING DeltaDoctor
4857: PPUSH
4858: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4862: LD_EXP 3
4866: PPUSH
4867: LD_EXP 23
4871: PUSH
4872: LD_STRING Denis
4874: STR
4875: PPUSH
4876: CALL_OW 38
// if Lisa in selectedPeople then
4880: LD_EXP 4
4884: PUSH
4885: LD_EXP 18
4889: IN
4890: IFFALSE 4935
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4892: LD_EXP 4
4896: PPUSH
4897: LD_EXP 23
4901: PUSH
4902: LD_STRING Lisa
4904: STR
4905: PPUSH
4906: CALL_OW 38
// DeleteCharacters ( mission_prefix_prev & Lisa ) ;
4910: LD_EXP 24
4914: PUSH
4915: LD_STRING Lisa
4917: STR
4918: PPUSH
4919: CALL_OW 40
// SaveVariable ( 1 , LisaIn06 ) ;
4923: LD_INT 1
4925: PPUSH
4926: LD_STRING LisaIn06
4928: PPUSH
4929: CALL_OW 39
// end else
4933: GO 4956
// if IsOk ( Lisa ) then
4935: LD_EXP 4
4939: PPUSH
4940: CALL_OW 302
4944: IFFALSE 4956
// SaveVariable ( 1 , LisaStayInDelta ) ;
4946: LD_INT 1
4948: PPUSH
4949: LD_STRING LisaStayInDelta
4951: PPUSH
4952: CALL_OW 39
// if Bobby in selectedPeople then
4956: LD_EXP 6
4960: PUSH
4961: LD_EXP 18
4965: IN
4966: IFFALSE 5011
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4968: LD_EXP 6
4972: PPUSH
4973: LD_EXP 23
4977: PUSH
4978: LD_STRING Bobby
4980: STR
4981: PPUSH
4982: CALL_OW 38
// DeleteCharacters ( mission_prefix_prev & Bobby ) ;
4986: LD_EXP 24
4990: PUSH
4991: LD_STRING Bobby
4993: STR
4994: PPUSH
4995: CALL_OW 40
// SaveVariable ( 1 , BobbyIn06 ) ;
4999: LD_INT 1
5001: PPUSH
5002: LD_STRING BobbyIn06
5004: PPUSH
5005: CALL_OW 39
// end else
5009: GO 5032
// if IsOk ( Bobby ) then
5011: LD_EXP 6
5015: PPUSH
5016: CALL_OW 302
5020: IFFALSE 5032
// SaveVariable ( 1 , BobbyStayInDelta ) ;
5022: LD_INT 1
5024: PPUSH
5025: LD_STRING BobbyStayInDelta
5027: PPUSH
5028: CALL_OW 39
// if Cyrus in selectedPeople then
5032: LD_EXP 7
5036: PUSH
5037: LD_EXP 18
5041: IN
5042: IFFALSE 5087
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5044: LD_EXP 7
5048: PPUSH
5049: LD_EXP 23
5053: PUSH
5054: LD_STRING Cyrus
5056: STR
5057: PPUSH
5058: CALL_OW 38
// DeleteCharacters ( mission_prefix_prev & Cyrus ) ;
5062: LD_EXP 24
5066: PUSH
5067: LD_STRING Cyrus
5069: STR
5070: PPUSH
5071: CALL_OW 40
// SaveVariable ( 1 , CyrusIn06 ) ;
5075: LD_INT 1
5077: PPUSH
5078: LD_STRING CyrusIn06
5080: PPUSH
5081: CALL_OW 39
// end else
5085: GO 5108
// if IsOk ( Cyrus ) then
5087: LD_EXP 7
5091: PPUSH
5092: CALL_OW 302
5096: IFFALSE 5108
// SaveVariable ( 1 , CyrusStayInDelta ) ;
5098: LD_INT 1
5100: PPUSH
5101: LD_STRING CyrusStayInDelta
5103: PPUSH
5104: CALL_OW 39
// if Frank in selectedPeople then
5108: LD_EXP 5
5112: PUSH
5113: LD_EXP 18
5117: IN
5118: IFFALSE 5163
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5120: LD_EXP 5
5124: PPUSH
5125: LD_EXP 23
5129: PUSH
5130: LD_STRING Frank
5132: STR
5133: PPUSH
5134: CALL_OW 38
// DeleteCharacters ( mission_prefix_prev & Frank ) ;
5138: LD_EXP 24
5142: PUSH
5143: LD_STRING Frank
5145: STR
5146: PPUSH
5147: CALL_OW 40
// SaveVariable ( 1 , FrankIn06 ) ;
5151: LD_INT 1
5153: PPUSH
5154: LD_STRING FrankIn06
5156: PPUSH
5157: CALL_OW 39
// end else
5161: GO 5184
// if IsOk ( Frank ) then
5163: LD_EXP 5
5167: PPUSH
5168: CALL_OW 302
5172: IFFALSE 5184
// SaveVariable ( 1 , FrankStayInDelta ) ;
5174: LD_INT 1
5176: PPUSH
5177: LD_STRING FrankStayInDelta
5179: PPUSH
5180: CALL_OW 39
// if Brown in selectedPeople then
5184: LD_EXP 8
5188: PUSH
5189: LD_EXP 18
5193: IN
5194: IFFALSE 5239
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5196: LD_EXP 8
5200: PPUSH
5201: LD_EXP 23
5205: PUSH
5206: LD_STRING Brown
5208: STR
5209: PPUSH
5210: CALL_OW 38
// DeleteCharacters ( mission_prefix_prev & Brown ) ;
5214: LD_EXP 24
5218: PUSH
5219: LD_STRING Brown
5221: STR
5222: PPUSH
5223: CALL_OW 40
// SaveVariable ( 1 , BrownIn06 ) ;
5227: LD_INT 1
5229: PPUSH
5230: LD_STRING BrownIn06
5232: PPUSH
5233: CALL_OW 39
// end else
5237: GO 5260
// if IsOk ( Brown ) then
5239: LD_EXP 8
5243: PPUSH
5244: CALL_OW 302
5248: IFFALSE 5260
// SaveVariable ( 1 , BrownStayInDelta ) ;
5250: LD_INT 1
5252: PPUSH
5253: LD_STRING BrownStayInDelta
5255: PPUSH
5256: CALL_OW 39
// if Donaldson in selectedPeople then
5260: LD_EXP 9
5264: PUSH
5265: LD_EXP 18
5269: IN
5270: IFFALSE 5315
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5272: LD_EXP 9
5276: PPUSH
5277: LD_EXP 23
5281: PUSH
5282: LD_STRING Donaldson
5284: STR
5285: PPUSH
5286: CALL_OW 38
// DeleteCharacters ( mission_prefix_prev & Donaldson ) ;
5290: LD_EXP 24
5294: PUSH
5295: LD_STRING Donaldson
5297: STR
5298: PPUSH
5299: CALL_OW 40
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5303: LD_INT 1
5305: PPUSH
5306: LD_STRING DonaldsonIn06
5308: PPUSH
5309: CALL_OW 39
// end else
5313: GO 5336
// if IsOk ( Donaldson ) then
5315: LD_EXP 9
5319: PPUSH
5320: CALL_OW 302
5324: IFFALSE 5336
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5326: LD_INT 1
5328: PPUSH
5329: LD_STRING DonaldsonStayInDelta
5331: PPUSH
5332: CALL_OW 39
// if Gladstone in selectedPeople then
5336: LD_EXP 2
5340: PUSH
5341: LD_EXP 18
5345: IN
5346: IFFALSE 5391
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5348: LD_EXP 2
5352: PPUSH
5353: LD_EXP 23
5357: PUSH
5358: LD_STRING Gladstone
5360: STR
5361: PPUSH
5362: CALL_OW 38
// DeleteCharacters ( mission_prefix_prev & Gladstone ) ;
5366: LD_EXP 24
5370: PUSH
5371: LD_STRING Gladstone
5373: STR
5374: PPUSH
5375: CALL_OW 40
// SaveVariable ( 1 , GladstoneIn06 ) ;
5379: LD_INT 1
5381: PPUSH
5382: LD_STRING GladstoneIn06
5384: PPUSH
5385: CALL_OW 39
// end else
5389: GO 5412
// if IsOk ( Gladstone ) then
5391: LD_EXP 2
5395: PPUSH
5396: CALL_OW 302
5400: IFFALSE 5412
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5402: LD_INT 1
5404: PPUSH
5405: LD_STRING GladstoneStayInDelta
5407: PPUSH
5408: CALL_OW 39
// if Mike then
5412: LD_EXP 10
5416: IFFALSE 5436
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
5418: LD_EXP 10
5422: PPUSH
5423: LD_EXP 23
5427: PUSH
5428: LD_STRING Mike
5430: STR
5431: PPUSH
5432: CALL_OW 38
// selectedPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ;
5436: LD_ADDR_EXP 18
5440: PUSH
5441: LD_INT 22
5443: PUSH
5444: LD_INT 1
5446: PUSH
5447: EMPTY
5448: LIST
5449: LIST
5450: PUSH
5451: LD_INT 23
5453: PUSH
5454: LD_INT 1
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: PUSH
5461: LD_INT 21
5463: PUSH
5464: LD_INT 1
5466: PUSH
5467: EMPTY
5468: LIST
5469: LIST
5470: PUSH
5471: EMPTY
5472: LIST
5473: LIST
5474: LIST
5475: PPUSH
5476: CALL_OW 69
5480: ST_TO_ADDR
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5481: LD_EXP 14
5485: PPUSH
5486: LD_STRING ApeIn06
5488: PPUSH
5489: CALL_OW 38
// SaveCharacters ( selectedPeople diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersIn06 ) ;
5493: LD_EXP 18
5497: PUSH
5498: LD_EXP 1
5502: PUSH
5503: LD_EXP 4
5507: PUSH
5508: LD_EXP 6
5512: PUSH
5513: LD_EXP 7
5517: PUSH
5518: LD_EXP 5
5522: PUSH
5523: LD_EXP 8
5527: PUSH
5528: LD_EXP 9
5532: PUSH
5533: LD_EXP 2
5537: PUSH
5538: LD_EXP 3
5542: PUSH
5543: EMPTY
5544: LIST
5545: LIST
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: DIFF
5554: PPUSH
5555: LD_STRING OthersIn06
5557: PPUSH
5558: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersStayInDelta ) ;
5562: LD_INT 22
5564: PUSH
5565: LD_INT 4
5567: PUSH
5568: EMPTY
5569: LIST
5570: LIST
5571: PUSH
5572: LD_INT 23
5574: PUSH
5575: LD_INT 1
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: PUSH
5582: LD_INT 2
5584: PUSH
5585: LD_INT 25
5587: PUSH
5588: LD_INT 1
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: LD_INT 25
5597: PUSH
5598: LD_INT 2
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: LD_INT 25
5607: PUSH
5608: LD_INT 3
5610: PUSH
5611: EMPTY
5612: LIST
5613: LIST
5614: PUSH
5615: LD_INT 25
5617: PUSH
5618: LD_INT 4
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: LIST
5631: PUSH
5632: EMPTY
5633: LIST
5634: LIST
5635: LIST
5636: PPUSH
5637: CALL_OW 69
5641: PUSH
5642: LD_EXP 16
5646: PUSH
5647: LD_EXP 4
5651: PUSH
5652: LD_EXP 6
5656: PUSH
5657: LD_EXP 7
5661: PUSH
5662: LD_EXP 5
5666: PUSH
5667: LD_EXP 8
5671: PUSH
5672: LD_EXP 9
5676: PUSH
5677: LD_EXP 2
5681: PUSH
5682: LD_EXP 3
5686: PUSH
5687: EMPTY
5688: LIST
5689: LIST
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: DIFF
5698: PPUSH
5699: LD_STRING OthersStayInDelta
5701: PPUSH
5702: CALL_OW 38
// end ;
5706: LD_VAR 0 1
5710: RET
// export function SaveCargos ; var i ; begin
5711: LD_INT 0
5713: PPUSH
5714: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
5715: LD_ADDR_VAR 0 2
5719: PUSH
5720: LD_INT 3
5722: PPUSH
5723: LD_INT 22
5725: PUSH
5726: LD_INT 1
5728: PUSH
5729: EMPTY
5730: LIST
5731: LIST
5732: PUSH
5733: LD_INT 34
5735: PUSH
5736: LD_INT 12
5738: PUSH
5739: EMPTY
5740: LIST
5741: LIST
5742: PUSH
5743: EMPTY
5744: LIST
5745: LIST
5746: PPUSH
5747: CALL_OW 70
5751: PUSH
5752: FOR_IN
5753: IFFALSE 5781
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
5755: LD_ADDR_EXP 22
5759: PUSH
5760: LD_EXP 22
5764: PUSH
5765: LD_VAR 0 2
5769: PPUSH
5770: CALL 69369 0 1
5774: PUSH
5775: EMPTY
5776: LIST
5777: ADD
5778: ST_TO_ADDR
5779: GO 5752
5781: POP
5782: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
5783: LD_EXP 22
5787: PPUSH
5788: LD_STRING 06_ResourcesInCargo06_1
5790: PPUSH
5791: CALL_OW 39
// end ; end_of_file
5795: LD_VAR 0 1
5799: RET
// on Command ( comandid ) do var i ;
5800: LD_INT 0
5802: PPUSH
// begin if comandid = 65 then
5803: LD_VAR 0 1
5807: PUSH
5808: LD_INT 65
5810: EQUAL
5811: IFFALSE 5852
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5813: LD_ADDR_VAR 0 2
5817: PUSH
5818: LD_INT 22
5820: PUSH
5821: LD_INT 1
5823: PUSH
5824: EMPTY
5825: LIST
5826: LIST
5827: PUSH
5828: EMPTY
5829: LIST
5830: PPUSH
5831: CALL_OW 69
5835: PUSH
5836: FOR_IN
5837: IFFALSE 5850
// ComStop ( i ) ;
5839: LD_VAR 0 2
5843: PPUSH
5844: CALL_OW 141
5848: GO 5836
5850: POP
5851: POP
// end ;
5852: PPOPN 2
5854: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5855: LD_INT 0
5857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5858: LD_ADDR_VAR 0 3
5862: PUSH
5863: LD_INT 22
5865: PUSH
5866: LD_INT 1
5868: PUSH
5869: EMPTY
5870: LIST
5871: LIST
5872: PUSH
5873: LD_INT 21
5875: PUSH
5876: LD_INT 3
5878: PUSH
5879: EMPTY
5880: LIST
5881: LIST
5882: PUSH
5883: LD_INT 30
5885: PUSH
5886: LD_INT 0
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: PUSH
5893: EMPTY
5894: LIST
5895: LIST
5896: LIST
5897: PPUSH
5898: CALL_OW 69
5902: ST_TO_ADDR
// if not tmp then
5903: LD_VAR 0 3
5907: NOT
5908: IFFALSE 5912
// exit ;
5910: GO 5942
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5912: LD_VAR 0 1
5916: PPUSH
5917: LD_VAR 0 3
5921: PUSH
5922: LD_INT 1
5924: ARRAY
5925: PPUSH
5926: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5930: LD_VAR 0 1
5934: PPUSH
5935: LD_INT 4
5937: PPUSH
5938: CALL_OW 235
// end ;
5942: PPOPN 3
5944: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5945: LD_VAR 0 1
5949: PUSH
5950: LD_EXP 1
5954: EQUAL
5955: IFFALSE 5964
// YouLost ( JMM ) ;
5957: LD_STRING JMM
5959: PPUSH
5960: CALL_OW 104
// SOS_UnitDestroyed ( un ) ;
5964: LD_VAR 0 1
5968: PPUSH
5969: CALL 22072 0 1
// end ;
5973: PPOPN 1
5975: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5976: LD_VAR 0 1
5980: PPUSH
5981: LD_VAR 0 2
5985: PPUSH
5986: CALL 22130 0 2
// end ; end_of_file
5990: PPOPN 2
5992: END
// export globalGameSaveCounter ; every 0 0$1 do
5993: GO 5995
5995: DISABLE
// begin enable ;
5996: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5997: LD_STRING updateTimer(
5999: PUSH
6000: LD_OWVAR 1
6004: STR
6005: PUSH
6006: LD_STRING );
6008: STR
6009: PPUSH
6010: CALL_OW 559
// end ;
6014: END
// every 0 0$1 do
6015: GO 6017
6017: DISABLE
// begin globalGameSaveCounter := 0 ;
6018: LD_ADDR_EXP 25
6022: PUSH
6023: LD_INT 0
6025: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
6026: LD_STRING setGameSaveCounter(0)
6028: PPUSH
6029: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
6033: LD_STRING initStreamRollete();
6035: PPUSH
6036: CALL_OW 559
// InitStreamMode ;
6040: CALL 7385 0 0
// DefineStreamItems ( false ) ;
6044: LD_INT 0
6046: PPUSH
6047: CALL 7849 0 1
// end ;
6051: END
// export function SOS_MapStart ( ) ; begin
6052: LD_INT 0
6054: PPUSH
// if streamModeActive then
6055: LD_EXP 26
6059: IFFALSE 6068
// DefineStreamItems ( true ) ;
6061: LD_INT 1
6063: PPUSH
6064: CALL 7849 0 1
// UpdateLuaVariables ( ) ;
6068: CALL 6085 0 0
// UpdateFactoryWaypoints ( ) ;
6072: CALL 20971 0 0
// UpdateWarehouseGatheringPoints ( ) ;
6076: CALL 21223 0 0
// end ;
6080: LD_VAR 0 1
6084: RET
// function UpdateLuaVariables ( ) ; begin
6085: LD_INT 0
6087: PPUSH
// if globalGameSaveCounter then
6088: LD_EXP 25
6092: IFFALSE 6126
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
6094: LD_ADDR_EXP 25
6098: PUSH
6099: LD_EXP 25
6103: PPUSH
6104: CALL 67003 0 1
6108: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
6109: LD_STRING setGameSaveCounter(
6111: PUSH
6112: LD_EXP 25
6116: STR
6117: PUSH
6118: LD_STRING )
6120: STR
6121: PPUSH
6122: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
6126: LD_STRING setGameDifficulty(
6128: PUSH
6129: LD_OWVAR 67
6133: STR
6134: PUSH
6135: LD_STRING )
6137: STR
6138: PPUSH
6139: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
6143: LD_STRING displayDifficulty(
6145: PUSH
6146: LD_OWVAR 67
6150: STR
6151: PUSH
6152: LD_STRING )
6154: STR
6155: PPUSH
6156: CALL_OW 559
// end ;
6160: LD_VAR 0 1
6164: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
6165: LD_INT 0
6167: PPUSH
// if p2 = stream_mode then
6168: LD_VAR 0 2
6172: PUSH
6173: LD_INT 100
6175: EQUAL
6176: IFFALSE 7179
// begin if not StreamModeActive then
6178: LD_EXP 26
6182: NOT
6183: IFFALSE 6193
// StreamModeActive := true ;
6185: LD_ADDR_EXP 26
6189: PUSH
6190: LD_INT 1
6192: ST_TO_ADDR
// if p3 = 0 then
6193: LD_VAR 0 3
6197: PUSH
6198: LD_INT 0
6200: EQUAL
6201: IFFALSE 6207
// InitStreamMode ;
6203: CALL 7385 0 0
// if p3 = 1 then
6207: LD_VAR 0 3
6211: PUSH
6212: LD_INT 1
6214: EQUAL
6215: IFFALSE 6225
// sRocket := true ;
6217: LD_ADDR_EXP 31
6221: PUSH
6222: LD_INT 1
6224: ST_TO_ADDR
// if p3 = 2 then
6225: LD_VAR 0 3
6229: PUSH
6230: LD_INT 2
6232: EQUAL
6233: IFFALSE 6243
// sSpeed := true ;
6235: LD_ADDR_EXP 30
6239: PUSH
6240: LD_INT 1
6242: ST_TO_ADDR
// if p3 = 3 then
6243: LD_VAR 0 3
6247: PUSH
6248: LD_INT 3
6250: EQUAL
6251: IFFALSE 6261
// sEngine := true ;
6253: LD_ADDR_EXP 32
6257: PUSH
6258: LD_INT 1
6260: ST_TO_ADDR
// if p3 = 4 then
6261: LD_VAR 0 3
6265: PUSH
6266: LD_INT 4
6268: EQUAL
6269: IFFALSE 6279
// sSpec := true ;
6271: LD_ADDR_EXP 29
6275: PUSH
6276: LD_INT 1
6278: ST_TO_ADDR
// if p3 = 5 then
6279: LD_VAR 0 3
6283: PUSH
6284: LD_INT 5
6286: EQUAL
6287: IFFALSE 6297
// sLevel := true ;
6289: LD_ADDR_EXP 33
6293: PUSH
6294: LD_INT 1
6296: ST_TO_ADDR
// if p3 = 6 then
6297: LD_VAR 0 3
6301: PUSH
6302: LD_INT 6
6304: EQUAL
6305: IFFALSE 6315
// sArmoury := true ;
6307: LD_ADDR_EXP 34
6311: PUSH
6312: LD_INT 1
6314: ST_TO_ADDR
// if p3 = 7 then
6315: LD_VAR 0 3
6319: PUSH
6320: LD_INT 7
6322: EQUAL
6323: IFFALSE 6333
// sRadar := true ;
6325: LD_ADDR_EXP 35
6329: PUSH
6330: LD_INT 1
6332: ST_TO_ADDR
// if p3 = 8 then
6333: LD_VAR 0 3
6337: PUSH
6338: LD_INT 8
6340: EQUAL
6341: IFFALSE 6351
// sBunker := true ;
6343: LD_ADDR_EXP 36
6347: PUSH
6348: LD_INT 1
6350: ST_TO_ADDR
// if p3 = 9 then
6351: LD_VAR 0 3
6355: PUSH
6356: LD_INT 9
6358: EQUAL
6359: IFFALSE 6369
// sHack := true ;
6361: LD_ADDR_EXP 37
6365: PUSH
6366: LD_INT 1
6368: ST_TO_ADDR
// if p3 = 10 then
6369: LD_VAR 0 3
6373: PUSH
6374: LD_INT 10
6376: EQUAL
6377: IFFALSE 6387
// sFire := true ;
6379: LD_ADDR_EXP 38
6383: PUSH
6384: LD_INT 1
6386: ST_TO_ADDR
// if p3 = 11 then
6387: LD_VAR 0 3
6391: PUSH
6392: LD_INT 11
6394: EQUAL
6395: IFFALSE 6405
// sRefresh := true ;
6397: LD_ADDR_EXP 39
6401: PUSH
6402: LD_INT 1
6404: ST_TO_ADDR
// if p3 = 12 then
6405: LD_VAR 0 3
6409: PUSH
6410: LD_INT 12
6412: EQUAL
6413: IFFALSE 6423
// sExp := true ;
6415: LD_ADDR_EXP 40
6419: PUSH
6420: LD_INT 1
6422: ST_TO_ADDR
// if p3 = 13 then
6423: LD_VAR 0 3
6427: PUSH
6428: LD_INT 13
6430: EQUAL
6431: IFFALSE 6441
// sDepot := true ;
6433: LD_ADDR_EXP 41
6437: PUSH
6438: LD_INT 1
6440: ST_TO_ADDR
// if p3 = 14 then
6441: LD_VAR 0 3
6445: PUSH
6446: LD_INT 14
6448: EQUAL
6449: IFFALSE 6459
// sFlag := true ;
6451: LD_ADDR_EXP 42
6455: PUSH
6456: LD_INT 1
6458: ST_TO_ADDR
// if p3 = 15 then
6459: LD_VAR 0 3
6463: PUSH
6464: LD_INT 15
6466: EQUAL
6467: IFFALSE 6477
// sKamikadze := true ;
6469: LD_ADDR_EXP 50
6473: PUSH
6474: LD_INT 1
6476: ST_TO_ADDR
// if p3 = 16 then
6477: LD_VAR 0 3
6481: PUSH
6482: LD_INT 16
6484: EQUAL
6485: IFFALSE 6495
// sTroll := true ;
6487: LD_ADDR_EXP 51
6491: PUSH
6492: LD_INT 1
6494: ST_TO_ADDR
// if p3 = 17 then
6495: LD_VAR 0 3
6499: PUSH
6500: LD_INT 17
6502: EQUAL
6503: IFFALSE 6513
// sSlow := true ;
6505: LD_ADDR_EXP 52
6509: PUSH
6510: LD_INT 1
6512: ST_TO_ADDR
// if p3 = 18 then
6513: LD_VAR 0 3
6517: PUSH
6518: LD_INT 18
6520: EQUAL
6521: IFFALSE 6531
// sLack := true ;
6523: LD_ADDR_EXP 53
6527: PUSH
6528: LD_INT 1
6530: ST_TO_ADDR
// if p3 = 19 then
6531: LD_VAR 0 3
6535: PUSH
6536: LD_INT 19
6538: EQUAL
6539: IFFALSE 6549
// sTank := true ;
6541: LD_ADDR_EXP 55
6545: PUSH
6546: LD_INT 1
6548: ST_TO_ADDR
// if p3 = 20 then
6549: LD_VAR 0 3
6553: PUSH
6554: LD_INT 20
6556: EQUAL
6557: IFFALSE 6567
// sRemote := true ;
6559: LD_ADDR_EXP 56
6563: PUSH
6564: LD_INT 1
6566: ST_TO_ADDR
// if p3 = 21 then
6567: LD_VAR 0 3
6571: PUSH
6572: LD_INT 21
6574: EQUAL
6575: IFFALSE 6585
// sPowell := true ;
6577: LD_ADDR_EXP 57
6581: PUSH
6582: LD_INT 1
6584: ST_TO_ADDR
// if p3 = 22 then
6585: LD_VAR 0 3
6589: PUSH
6590: LD_INT 22
6592: EQUAL
6593: IFFALSE 6603
// sTeleport := true ;
6595: LD_ADDR_EXP 60
6599: PUSH
6600: LD_INT 1
6602: ST_TO_ADDR
// if p3 = 23 then
6603: LD_VAR 0 3
6607: PUSH
6608: LD_INT 23
6610: EQUAL
6611: IFFALSE 6621
// sOilTower := true ;
6613: LD_ADDR_EXP 62
6617: PUSH
6618: LD_INT 1
6620: ST_TO_ADDR
// if p3 = 24 then
6621: LD_VAR 0 3
6625: PUSH
6626: LD_INT 24
6628: EQUAL
6629: IFFALSE 6639
// sShovel := true ;
6631: LD_ADDR_EXP 63
6635: PUSH
6636: LD_INT 1
6638: ST_TO_ADDR
// if p3 = 25 then
6639: LD_VAR 0 3
6643: PUSH
6644: LD_INT 25
6646: EQUAL
6647: IFFALSE 6657
// sSheik := true ;
6649: LD_ADDR_EXP 64
6653: PUSH
6654: LD_INT 1
6656: ST_TO_ADDR
// if p3 = 26 then
6657: LD_VAR 0 3
6661: PUSH
6662: LD_INT 26
6664: EQUAL
6665: IFFALSE 6675
// sEarthquake := true ;
6667: LD_ADDR_EXP 66
6671: PUSH
6672: LD_INT 1
6674: ST_TO_ADDR
// if p3 = 27 then
6675: LD_VAR 0 3
6679: PUSH
6680: LD_INT 27
6682: EQUAL
6683: IFFALSE 6693
// sAI := true ;
6685: LD_ADDR_EXP 67
6689: PUSH
6690: LD_INT 1
6692: ST_TO_ADDR
// if p3 = 28 then
6693: LD_VAR 0 3
6697: PUSH
6698: LD_INT 28
6700: EQUAL
6701: IFFALSE 6711
// sCargo := true ;
6703: LD_ADDR_EXP 70
6707: PUSH
6708: LD_INT 1
6710: ST_TO_ADDR
// if p3 = 29 then
6711: LD_VAR 0 3
6715: PUSH
6716: LD_INT 29
6718: EQUAL
6719: IFFALSE 6729
// sDLaser := true ;
6721: LD_ADDR_EXP 71
6725: PUSH
6726: LD_INT 1
6728: ST_TO_ADDR
// if p3 = 30 then
6729: LD_VAR 0 3
6733: PUSH
6734: LD_INT 30
6736: EQUAL
6737: IFFALSE 6747
// sExchange := true ;
6739: LD_ADDR_EXP 72
6743: PUSH
6744: LD_INT 1
6746: ST_TO_ADDR
// if p3 = 31 then
6747: LD_VAR 0 3
6751: PUSH
6752: LD_INT 31
6754: EQUAL
6755: IFFALSE 6765
// sFac := true ;
6757: LD_ADDR_EXP 73
6761: PUSH
6762: LD_INT 1
6764: ST_TO_ADDR
// if p3 = 32 then
6765: LD_VAR 0 3
6769: PUSH
6770: LD_INT 32
6772: EQUAL
6773: IFFALSE 6783
// sPower := true ;
6775: LD_ADDR_EXP 74
6779: PUSH
6780: LD_INT 1
6782: ST_TO_ADDR
// if p3 = 33 then
6783: LD_VAR 0 3
6787: PUSH
6788: LD_INT 33
6790: EQUAL
6791: IFFALSE 6801
// sRandom := true ;
6793: LD_ADDR_EXP 75
6797: PUSH
6798: LD_INT 1
6800: ST_TO_ADDR
// if p3 = 34 then
6801: LD_VAR 0 3
6805: PUSH
6806: LD_INT 34
6808: EQUAL
6809: IFFALSE 6819
// sShield := true ;
6811: LD_ADDR_EXP 76
6815: PUSH
6816: LD_INT 1
6818: ST_TO_ADDR
// if p3 = 35 then
6819: LD_VAR 0 3
6823: PUSH
6824: LD_INT 35
6826: EQUAL
6827: IFFALSE 6837
// sTime := true ;
6829: LD_ADDR_EXP 77
6833: PUSH
6834: LD_INT 1
6836: ST_TO_ADDR
// if p3 = 36 then
6837: LD_VAR 0 3
6841: PUSH
6842: LD_INT 36
6844: EQUAL
6845: IFFALSE 6855
// sTools := true ;
6847: LD_ADDR_EXP 78
6851: PUSH
6852: LD_INT 1
6854: ST_TO_ADDR
// if p3 = 101 then
6855: LD_VAR 0 3
6859: PUSH
6860: LD_INT 101
6862: EQUAL
6863: IFFALSE 6873
// sSold := true ;
6865: LD_ADDR_EXP 43
6869: PUSH
6870: LD_INT 1
6872: ST_TO_ADDR
// if p3 = 102 then
6873: LD_VAR 0 3
6877: PUSH
6878: LD_INT 102
6880: EQUAL
6881: IFFALSE 6891
// sDiff := true ;
6883: LD_ADDR_EXP 44
6887: PUSH
6888: LD_INT 1
6890: ST_TO_ADDR
// if p3 = 103 then
6891: LD_VAR 0 3
6895: PUSH
6896: LD_INT 103
6898: EQUAL
6899: IFFALSE 6909
// sFog := true ;
6901: LD_ADDR_EXP 47
6905: PUSH
6906: LD_INT 1
6908: ST_TO_ADDR
// if p3 = 104 then
6909: LD_VAR 0 3
6913: PUSH
6914: LD_INT 104
6916: EQUAL
6917: IFFALSE 6927
// sReset := true ;
6919: LD_ADDR_EXP 48
6923: PUSH
6924: LD_INT 1
6926: ST_TO_ADDR
// if p3 = 105 then
6927: LD_VAR 0 3
6931: PUSH
6932: LD_INT 105
6934: EQUAL
6935: IFFALSE 6945
// sSun := true ;
6937: LD_ADDR_EXP 49
6941: PUSH
6942: LD_INT 1
6944: ST_TO_ADDR
// if p3 = 106 then
6945: LD_VAR 0 3
6949: PUSH
6950: LD_INT 106
6952: EQUAL
6953: IFFALSE 6963
// sTiger := true ;
6955: LD_ADDR_EXP 45
6959: PUSH
6960: LD_INT 1
6962: ST_TO_ADDR
// if p3 = 107 then
6963: LD_VAR 0 3
6967: PUSH
6968: LD_INT 107
6970: EQUAL
6971: IFFALSE 6981
// sBomb := true ;
6973: LD_ADDR_EXP 46
6977: PUSH
6978: LD_INT 1
6980: ST_TO_ADDR
// if p3 = 108 then
6981: LD_VAR 0 3
6985: PUSH
6986: LD_INT 108
6988: EQUAL
6989: IFFALSE 6999
// sWound := true ;
6991: LD_ADDR_EXP 54
6995: PUSH
6996: LD_INT 1
6998: ST_TO_ADDR
// if p3 = 109 then
6999: LD_VAR 0 3
7003: PUSH
7004: LD_INT 109
7006: EQUAL
7007: IFFALSE 7017
// sBetray := true ;
7009: LD_ADDR_EXP 58
7013: PUSH
7014: LD_INT 1
7016: ST_TO_ADDR
// if p3 = 110 then
7017: LD_VAR 0 3
7021: PUSH
7022: LD_INT 110
7024: EQUAL
7025: IFFALSE 7035
// sContamin := true ;
7027: LD_ADDR_EXP 59
7031: PUSH
7032: LD_INT 1
7034: ST_TO_ADDR
// if p3 = 111 then
7035: LD_VAR 0 3
7039: PUSH
7040: LD_INT 111
7042: EQUAL
7043: IFFALSE 7053
// sOil := true ;
7045: LD_ADDR_EXP 61
7049: PUSH
7050: LD_INT 1
7052: ST_TO_ADDR
// if p3 = 112 then
7053: LD_VAR 0 3
7057: PUSH
7058: LD_INT 112
7060: EQUAL
7061: IFFALSE 7071
// sStu := true ;
7063: LD_ADDR_EXP 65
7067: PUSH
7068: LD_INT 1
7070: ST_TO_ADDR
// if p3 = 113 then
7071: LD_VAR 0 3
7075: PUSH
7076: LD_INT 113
7078: EQUAL
7079: IFFALSE 7089
// sBazooka := true ;
7081: LD_ADDR_EXP 68
7085: PUSH
7086: LD_INT 1
7088: ST_TO_ADDR
// if p3 = 114 then
7089: LD_VAR 0 3
7093: PUSH
7094: LD_INT 114
7096: EQUAL
7097: IFFALSE 7107
// sMortar := true ;
7099: LD_ADDR_EXP 69
7103: PUSH
7104: LD_INT 1
7106: ST_TO_ADDR
// if p3 = 115 then
7107: LD_VAR 0 3
7111: PUSH
7112: LD_INT 115
7114: EQUAL
7115: IFFALSE 7125
// sRanger := true ;
7117: LD_ADDR_EXP 79
7121: PUSH
7122: LD_INT 1
7124: ST_TO_ADDR
// if p3 = 116 then
7125: LD_VAR 0 3
7129: PUSH
7130: LD_INT 116
7132: EQUAL
7133: IFFALSE 7143
// sComputer := true ;
7135: LD_ADDR_EXP 80
7139: PUSH
7140: LD_INT 1
7142: ST_TO_ADDR
// if p3 = 117 then
7143: LD_VAR 0 3
7147: PUSH
7148: LD_INT 117
7150: EQUAL
7151: IFFALSE 7161
// s30 := true ;
7153: LD_ADDR_EXP 81
7157: PUSH
7158: LD_INT 1
7160: ST_TO_ADDR
// if p3 = 118 then
7161: LD_VAR 0 3
7165: PUSH
7166: LD_INT 118
7168: EQUAL
7169: IFFALSE 7179
// s60 := true ;
7171: LD_ADDR_EXP 82
7175: PUSH
7176: LD_INT 1
7178: ST_TO_ADDR
// end ; if p2 = hack_mode then
7179: LD_VAR 0 2
7183: PUSH
7184: LD_INT 101
7186: EQUAL
7187: IFFALSE 7315
// begin case p3 of 1 :
7189: LD_VAR 0 3
7193: PUSH
7194: LD_INT 1
7196: DOUBLE
7197: EQUAL
7198: IFTRUE 7202
7200: GO 7209
7202: POP
// hHackUnlimitedResources ; 2 :
7203: CALL 19578 0 0
7207: GO 7315
7209: LD_INT 2
7211: DOUBLE
7212: EQUAL
7213: IFTRUE 7217
7215: GO 7224
7217: POP
// hHackSetLevel10 ; 3 :
7218: CALL 19711 0 0
7222: GO 7315
7224: LD_INT 3
7226: DOUBLE
7227: EQUAL
7228: IFTRUE 7232
7230: GO 7239
7232: POP
// hHackSetLevel10YourUnits ; 4 :
7233: CALL 19796 0 0
7237: GO 7315
7239: LD_INT 4
7241: DOUBLE
7242: EQUAL
7243: IFTRUE 7247
7245: GO 7254
7247: POP
// hHackInvincible ; 5 :
7248: CALL 20244 0 0
7252: GO 7315
7254: LD_INT 5
7256: DOUBLE
7257: EQUAL
7258: IFTRUE 7262
7260: GO 7269
7262: POP
// hHackInvisible ; 6 :
7263: CALL 20355 0 0
7267: GO 7315
7269: LD_INT 6
7271: DOUBLE
7272: EQUAL
7273: IFTRUE 7277
7275: GO 7284
7277: POP
// hHackChangeYourSide ; 7 :
7278: CALL 20412 0 0
7282: GO 7315
7284: LD_INT 7
7286: DOUBLE
7287: EQUAL
7288: IFTRUE 7292
7290: GO 7299
7292: POP
// hHackChangeUnitSide ; 8 :
7293: CALL 20454 0 0
7297: GO 7315
7299: LD_INT 8
7301: DOUBLE
7302: EQUAL
7303: IFTRUE 7307
7305: GO 7314
7307: POP
// hHackFog ; end ;
7308: CALL 20555 0 0
7312: GO 7315
7314: POP
// end ; if p2 = game_save_mode then
7315: LD_VAR 0 2
7319: PUSH
7320: LD_INT 102
7322: EQUAL
7323: IFFALSE 7380
// begin if p3 = 1 then
7325: LD_VAR 0 3
7329: PUSH
7330: LD_INT 1
7332: EQUAL
7333: IFFALSE 7345
// globalGameSaveCounter := p4 ;
7335: LD_ADDR_EXP 25
7339: PUSH
7340: LD_VAR 0 4
7344: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
7345: LD_VAR 0 3
7349: PUSH
7350: LD_INT 2
7352: EQUAL
7353: IFFALSE 7361
7355: PUSH
7356: LD_EXP 25
7360: AND
7361: IFFALSE 7380
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7363: LD_STRING setGameSaveCounter(
7365: PUSH
7366: LD_EXP 25
7370: STR
7371: PUSH
7372: LD_STRING )
7374: STR
7375: PPUSH
7376: CALL_OW 559
// end ; end ;
7380: LD_VAR 0 7
7384: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
7385: LD_INT 0
7387: PPUSH
// streamModeActive := false ;
7388: LD_ADDR_EXP 26
7392: PUSH
7393: LD_INT 0
7395: ST_TO_ADDR
// normalCounter := 36 ;
7396: LD_ADDR_EXP 27
7400: PUSH
7401: LD_INT 36
7403: ST_TO_ADDR
// hardcoreCounter := 18 ;
7404: LD_ADDR_EXP 28
7408: PUSH
7409: LD_INT 18
7411: ST_TO_ADDR
// sRocket := false ;
7412: LD_ADDR_EXP 31
7416: PUSH
7417: LD_INT 0
7419: ST_TO_ADDR
// sSpeed := false ;
7420: LD_ADDR_EXP 30
7424: PUSH
7425: LD_INT 0
7427: ST_TO_ADDR
// sEngine := false ;
7428: LD_ADDR_EXP 32
7432: PUSH
7433: LD_INT 0
7435: ST_TO_ADDR
// sSpec := false ;
7436: LD_ADDR_EXP 29
7440: PUSH
7441: LD_INT 0
7443: ST_TO_ADDR
// sLevel := false ;
7444: LD_ADDR_EXP 33
7448: PUSH
7449: LD_INT 0
7451: ST_TO_ADDR
// sArmoury := false ;
7452: LD_ADDR_EXP 34
7456: PUSH
7457: LD_INT 0
7459: ST_TO_ADDR
// sRadar := false ;
7460: LD_ADDR_EXP 35
7464: PUSH
7465: LD_INT 0
7467: ST_TO_ADDR
// sBunker := false ;
7468: LD_ADDR_EXP 36
7472: PUSH
7473: LD_INT 0
7475: ST_TO_ADDR
// sHack := false ;
7476: LD_ADDR_EXP 37
7480: PUSH
7481: LD_INT 0
7483: ST_TO_ADDR
// sFire := false ;
7484: LD_ADDR_EXP 38
7488: PUSH
7489: LD_INT 0
7491: ST_TO_ADDR
// sRefresh := false ;
7492: LD_ADDR_EXP 39
7496: PUSH
7497: LD_INT 0
7499: ST_TO_ADDR
// sExp := false ;
7500: LD_ADDR_EXP 40
7504: PUSH
7505: LD_INT 0
7507: ST_TO_ADDR
// sDepot := false ;
7508: LD_ADDR_EXP 41
7512: PUSH
7513: LD_INT 0
7515: ST_TO_ADDR
// sFlag := false ;
7516: LD_ADDR_EXP 42
7520: PUSH
7521: LD_INT 0
7523: ST_TO_ADDR
// sKamikadze := false ;
7524: LD_ADDR_EXP 50
7528: PUSH
7529: LD_INT 0
7531: ST_TO_ADDR
// sTroll := false ;
7532: LD_ADDR_EXP 51
7536: PUSH
7537: LD_INT 0
7539: ST_TO_ADDR
// sSlow := false ;
7540: LD_ADDR_EXP 52
7544: PUSH
7545: LD_INT 0
7547: ST_TO_ADDR
// sLack := false ;
7548: LD_ADDR_EXP 53
7552: PUSH
7553: LD_INT 0
7555: ST_TO_ADDR
// sTank := false ;
7556: LD_ADDR_EXP 55
7560: PUSH
7561: LD_INT 0
7563: ST_TO_ADDR
// sRemote := false ;
7564: LD_ADDR_EXP 56
7568: PUSH
7569: LD_INT 0
7571: ST_TO_ADDR
// sPowell := false ;
7572: LD_ADDR_EXP 57
7576: PUSH
7577: LD_INT 0
7579: ST_TO_ADDR
// sTeleport := false ;
7580: LD_ADDR_EXP 60
7584: PUSH
7585: LD_INT 0
7587: ST_TO_ADDR
// sOilTower := false ;
7588: LD_ADDR_EXP 62
7592: PUSH
7593: LD_INT 0
7595: ST_TO_ADDR
// sShovel := false ;
7596: LD_ADDR_EXP 63
7600: PUSH
7601: LD_INT 0
7603: ST_TO_ADDR
// sSheik := false ;
7604: LD_ADDR_EXP 64
7608: PUSH
7609: LD_INT 0
7611: ST_TO_ADDR
// sEarthquake := false ;
7612: LD_ADDR_EXP 66
7616: PUSH
7617: LD_INT 0
7619: ST_TO_ADDR
// sAI := false ;
7620: LD_ADDR_EXP 67
7624: PUSH
7625: LD_INT 0
7627: ST_TO_ADDR
// sCargo := false ;
7628: LD_ADDR_EXP 70
7632: PUSH
7633: LD_INT 0
7635: ST_TO_ADDR
// sDLaser := false ;
7636: LD_ADDR_EXP 71
7640: PUSH
7641: LD_INT 0
7643: ST_TO_ADDR
// sExchange := false ;
7644: LD_ADDR_EXP 72
7648: PUSH
7649: LD_INT 0
7651: ST_TO_ADDR
// sFac := false ;
7652: LD_ADDR_EXP 73
7656: PUSH
7657: LD_INT 0
7659: ST_TO_ADDR
// sPower := false ;
7660: LD_ADDR_EXP 74
7664: PUSH
7665: LD_INT 0
7667: ST_TO_ADDR
// sRandom := false ;
7668: LD_ADDR_EXP 75
7672: PUSH
7673: LD_INT 0
7675: ST_TO_ADDR
// sShield := false ;
7676: LD_ADDR_EXP 76
7680: PUSH
7681: LD_INT 0
7683: ST_TO_ADDR
// sTime := false ;
7684: LD_ADDR_EXP 77
7688: PUSH
7689: LD_INT 0
7691: ST_TO_ADDR
// sTools := false ;
7692: LD_ADDR_EXP 78
7696: PUSH
7697: LD_INT 0
7699: ST_TO_ADDR
// sSold := false ;
7700: LD_ADDR_EXP 43
7704: PUSH
7705: LD_INT 0
7707: ST_TO_ADDR
// sDiff := false ;
7708: LD_ADDR_EXP 44
7712: PUSH
7713: LD_INT 0
7715: ST_TO_ADDR
// sFog := false ;
7716: LD_ADDR_EXP 47
7720: PUSH
7721: LD_INT 0
7723: ST_TO_ADDR
// sReset := false ;
7724: LD_ADDR_EXP 48
7728: PUSH
7729: LD_INT 0
7731: ST_TO_ADDR
// sSun := false ;
7732: LD_ADDR_EXP 49
7736: PUSH
7737: LD_INT 0
7739: ST_TO_ADDR
// sTiger := false ;
7740: LD_ADDR_EXP 45
7744: PUSH
7745: LD_INT 0
7747: ST_TO_ADDR
// sBomb := false ;
7748: LD_ADDR_EXP 46
7752: PUSH
7753: LD_INT 0
7755: ST_TO_ADDR
// sWound := false ;
7756: LD_ADDR_EXP 54
7760: PUSH
7761: LD_INT 0
7763: ST_TO_ADDR
// sBetray := false ;
7764: LD_ADDR_EXP 58
7768: PUSH
7769: LD_INT 0
7771: ST_TO_ADDR
// sContamin := false ;
7772: LD_ADDR_EXP 59
7776: PUSH
7777: LD_INT 0
7779: ST_TO_ADDR
// sOil := false ;
7780: LD_ADDR_EXP 61
7784: PUSH
7785: LD_INT 0
7787: ST_TO_ADDR
// sStu := false ;
7788: LD_ADDR_EXP 65
7792: PUSH
7793: LD_INT 0
7795: ST_TO_ADDR
// sBazooka := false ;
7796: LD_ADDR_EXP 68
7800: PUSH
7801: LD_INT 0
7803: ST_TO_ADDR
// sMortar := false ;
7804: LD_ADDR_EXP 69
7808: PUSH
7809: LD_INT 0
7811: ST_TO_ADDR
// sRanger := false ;
7812: LD_ADDR_EXP 79
7816: PUSH
7817: LD_INT 0
7819: ST_TO_ADDR
// sComputer := false ;
7820: LD_ADDR_EXP 80
7824: PUSH
7825: LD_INT 0
7827: ST_TO_ADDR
// s30 := false ;
7828: LD_ADDR_EXP 81
7832: PUSH
7833: LD_INT 0
7835: ST_TO_ADDR
// s60 := false ;
7836: LD_ADDR_EXP 82
7840: PUSH
7841: LD_INT 0
7843: ST_TO_ADDR
// end ;
7844: LD_VAR 0 1
7848: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7849: LD_INT 0
7851: PPUSH
7852: PPUSH
7853: PPUSH
7854: PPUSH
7855: PPUSH
7856: PPUSH
7857: PPUSH
// result := [ ] ;
7858: LD_ADDR_VAR 0 2
7862: PUSH
7863: EMPTY
7864: ST_TO_ADDR
// if campaign_id = 1 then
7865: LD_OWVAR 69
7869: PUSH
7870: LD_INT 1
7872: EQUAL
7873: IFFALSE 11039
// begin case mission_number of 1 :
7875: LD_OWVAR 70
7879: PUSH
7880: LD_INT 1
7882: DOUBLE
7883: EQUAL
7884: IFTRUE 7888
7886: GO 7964
7888: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7889: LD_ADDR_VAR 0 2
7893: PUSH
7894: LD_INT 2
7896: PUSH
7897: LD_INT 4
7899: PUSH
7900: LD_INT 11
7902: PUSH
7903: LD_INT 12
7905: PUSH
7906: LD_INT 15
7908: PUSH
7909: LD_INT 16
7911: PUSH
7912: LD_INT 22
7914: PUSH
7915: LD_INT 23
7917: PUSH
7918: LD_INT 26
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: PUSH
7932: LD_INT 101
7934: PUSH
7935: LD_INT 102
7937: PUSH
7938: LD_INT 106
7940: PUSH
7941: LD_INT 116
7943: PUSH
7944: LD_INT 117
7946: PUSH
7947: LD_INT 118
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: PUSH
7958: EMPTY
7959: LIST
7960: LIST
7961: ST_TO_ADDR
7962: GO 11037
7964: LD_INT 2
7966: DOUBLE
7967: EQUAL
7968: IFTRUE 7972
7970: GO 8056
7972: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7973: LD_ADDR_VAR 0 2
7977: PUSH
7978: LD_INT 2
7980: PUSH
7981: LD_INT 4
7983: PUSH
7984: LD_INT 11
7986: PUSH
7987: LD_INT 12
7989: PUSH
7990: LD_INT 15
7992: PUSH
7993: LD_INT 16
7995: PUSH
7996: LD_INT 22
7998: PUSH
7999: LD_INT 23
8001: PUSH
8002: LD_INT 26
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: PUSH
8016: LD_INT 101
8018: PUSH
8019: LD_INT 102
8021: PUSH
8022: LD_INT 105
8024: PUSH
8025: LD_INT 106
8027: PUSH
8028: LD_INT 108
8030: PUSH
8031: LD_INT 116
8033: PUSH
8034: LD_INT 117
8036: PUSH
8037: LD_INT 118
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: ST_TO_ADDR
8054: GO 11037
8056: LD_INT 3
8058: DOUBLE
8059: EQUAL
8060: IFTRUE 8064
8062: GO 8152
8064: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
8065: LD_ADDR_VAR 0 2
8069: PUSH
8070: LD_INT 2
8072: PUSH
8073: LD_INT 4
8075: PUSH
8076: LD_INT 5
8078: PUSH
8079: LD_INT 11
8081: PUSH
8082: LD_INT 12
8084: PUSH
8085: LD_INT 15
8087: PUSH
8088: LD_INT 16
8090: PUSH
8091: LD_INT 22
8093: PUSH
8094: LD_INT 26
8096: PUSH
8097: LD_INT 36
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: PUSH
8112: LD_INT 101
8114: PUSH
8115: LD_INT 102
8117: PUSH
8118: LD_INT 105
8120: PUSH
8121: LD_INT 106
8123: PUSH
8124: LD_INT 108
8126: PUSH
8127: LD_INT 116
8129: PUSH
8130: LD_INT 117
8132: PUSH
8133: LD_INT 118
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: PUSH
8146: EMPTY
8147: LIST
8148: LIST
8149: ST_TO_ADDR
8150: GO 11037
8152: LD_INT 4
8154: DOUBLE
8155: EQUAL
8156: IFTRUE 8160
8158: GO 8256
8160: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
8161: LD_ADDR_VAR 0 2
8165: PUSH
8166: LD_INT 2
8168: PUSH
8169: LD_INT 4
8171: PUSH
8172: LD_INT 5
8174: PUSH
8175: LD_INT 8
8177: PUSH
8178: LD_INT 11
8180: PUSH
8181: LD_INT 12
8183: PUSH
8184: LD_INT 15
8186: PUSH
8187: LD_INT 16
8189: PUSH
8190: LD_INT 22
8192: PUSH
8193: LD_INT 23
8195: PUSH
8196: LD_INT 26
8198: PUSH
8199: LD_INT 36
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: PUSH
8216: LD_INT 101
8218: PUSH
8219: LD_INT 102
8221: PUSH
8222: LD_INT 105
8224: PUSH
8225: LD_INT 106
8227: PUSH
8228: LD_INT 108
8230: PUSH
8231: LD_INT 116
8233: PUSH
8234: LD_INT 117
8236: PUSH
8237: LD_INT 118
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: ST_TO_ADDR
8254: GO 11037
8256: LD_INT 5
8258: DOUBLE
8259: EQUAL
8260: IFTRUE 8264
8262: GO 8376
8264: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
8265: LD_ADDR_VAR 0 2
8269: PUSH
8270: LD_INT 2
8272: PUSH
8273: LD_INT 4
8275: PUSH
8276: LD_INT 5
8278: PUSH
8279: LD_INT 6
8281: PUSH
8282: LD_INT 8
8284: PUSH
8285: LD_INT 11
8287: PUSH
8288: LD_INT 12
8290: PUSH
8291: LD_INT 15
8293: PUSH
8294: LD_INT 16
8296: PUSH
8297: LD_INT 22
8299: PUSH
8300: LD_INT 23
8302: PUSH
8303: LD_INT 25
8305: PUSH
8306: LD_INT 26
8308: PUSH
8309: LD_INT 36
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: PUSH
8328: LD_INT 101
8330: PUSH
8331: LD_INT 102
8333: PUSH
8334: LD_INT 105
8336: PUSH
8337: LD_INT 106
8339: PUSH
8340: LD_INT 108
8342: PUSH
8343: LD_INT 109
8345: PUSH
8346: LD_INT 112
8348: PUSH
8349: LD_INT 116
8351: PUSH
8352: LD_INT 117
8354: PUSH
8355: LD_INT 118
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: PUSH
8370: EMPTY
8371: LIST
8372: LIST
8373: ST_TO_ADDR
8374: GO 11037
8376: LD_INT 6
8378: DOUBLE
8379: EQUAL
8380: IFTRUE 8384
8382: GO 8516
8384: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
8385: LD_ADDR_VAR 0 2
8389: PUSH
8390: LD_INT 2
8392: PUSH
8393: LD_INT 4
8395: PUSH
8396: LD_INT 5
8398: PUSH
8399: LD_INT 6
8401: PUSH
8402: LD_INT 8
8404: PUSH
8405: LD_INT 11
8407: PUSH
8408: LD_INT 12
8410: PUSH
8411: LD_INT 15
8413: PUSH
8414: LD_INT 16
8416: PUSH
8417: LD_INT 20
8419: PUSH
8420: LD_INT 21
8422: PUSH
8423: LD_INT 22
8425: PUSH
8426: LD_INT 23
8428: PUSH
8429: LD_INT 25
8431: PUSH
8432: LD_INT 26
8434: PUSH
8435: LD_INT 30
8437: PUSH
8438: LD_INT 31
8440: PUSH
8441: LD_INT 32
8443: PUSH
8444: LD_INT 36
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: PUSH
8468: LD_INT 101
8470: PUSH
8471: LD_INT 102
8473: PUSH
8474: LD_INT 105
8476: PUSH
8477: LD_INT 106
8479: PUSH
8480: LD_INT 108
8482: PUSH
8483: LD_INT 109
8485: PUSH
8486: LD_INT 112
8488: PUSH
8489: LD_INT 116
8491: PUSH
8492: LD_INT 117
8494: PUSH
8495: LD_INT 118
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: ST_TO_ADDR
8514: GO 11037
8516: LD_INT 7
8518: DOUBLE
8519: EQUAL
8520: IFTRUE 8524
8522: GO 8636
8524: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8525: LD_ADDR_VAR 0 2
8529: PUSH
8530: LD_INT 2
8532: PUSH
8533: LD_INT 4
8535: PUSH
8536: LD_INT 5
8538: PUSH
8539: LD_INT 7
8541: PUSH
8542: LD_INT 11
8544: PUSH
8545: LD_INT 12
8547: PUSH
8548: LD_INT 15
8550: PUSH
8551: LD_INT 16
8553: PUSH
8554: LD_INT 20
8556: PUSH
8557: LD_INT 21
8559: PUSH
8560: LD_INT 22
8562: PUSH
8563: LD_INT 23
8565: PUSH
8566: LD_INT 25
8568: PUSH
8569: LD_INT 26
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: PUSH
8588: LD_INT 101
8590: PUSH
8591: LD_INT 102
8593: PUSH
8594: LD_INT 103
8596: PUSH
8597: LD_INT 105
8599: PUSH
8600: LD_INT 106
8602: PUSH
8603: LD_INT 108
8605: PUSH
8606: LD_INT 112
8608: PUSH
8609: LD_INT 116
8611: PUSH
8612: LD_INT 117
8614: PUSH
8615: LD_INT 118
8617: PUSH
8618: EMPTY
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: ST_TO_ADDR
8634: GO 11037
8636: LD_INT 8
8638: DOUBLE
8639: EQUAL
8640: IFTRUE 8644
8642: GO 8784
8644: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8645: LD_ADDR_VAR 0 2
8649: PUSH
8650: LD_INT 2
8652: PUSH
8653: LD_INT 4
8655: PUSH
8656: LD_INT 5
8658: PUSH
8659: LD_INT 6
8661: PUSH
8662: LD_INT 7
8664: PUSH
8665: LD_INT 8
8667: PUSH
8668: LD_INT 11
8670: PUSH
8671: LD_INT 12
8673: PUSH
8674: LD_INT 15
8676: PUSH
8677: LD_INT 16
8679: PUSH
8680: LD_INT 20
8682: PUSH
8683: LD_INT 21
8685: PUSH
8686: LD_INT 22
8688: PUSH
8689: LD_INT 23
8691: PUSH
8692: LD_INT 25
8694: PUSH
8695: LD_INT 26
8697: PUSH
8698: LD_INT 30
8700: PUSH
8701: LD_INT 31
8703: PUSH
8704: LD_INT 32
8706: PUSH
8707: LD_INT 36
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: PUSH
8732: LD_INT 101
8734: PUSH
8735: LD_INT 102
8737: PUSH
8738: LD_INT 103
8740: PUSH
8741: LD_INT 105
8743: PUSH
8744: LD_INT 106
8746: PUSH
8747: LD_INT 108
8749: PUSH
8750: LD_INT 109
8752: PUSH
8753: LD_INT 112
8755: PUSH
8756: LD_INT 116
8758: PUSH
8759: LD_INT 117
8761: PUSH
8762: LD_INT 118
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: ST_TO_ADDR
8782: GO 11037
8784: LD_INT 9
8786: DOUBLE
8787: EQUAL
8788: IFTRUE 8792
8790: GO 8940
8792: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8793: LD_ADDR_VAR 0 2
8797: PUSH
8798: LD_INT 2
8800: PUSH
8801: LD_INT 4
8803: PUSH
8804: LD_INT 5
8806: PUSH
8807: LD_INT 6
8809: PUSH
8810: LD_INT 7
8812: PUSH
8813: LD_INT 8
8815: PUSH
8816: LD_INT 11
8818: PUSH
8819: LD_INT 12
8821: PUSH
8822: LD_INT 15
8824: PUSH
8825: LD_INT 16
8827: PUSH
8828: LD_INT 20
8830: PUSH
8831: LD_INT 21
8833: PUSH
8834: LD_INT 22
8836: PUSH
8837: LD_INT 23
8839: PUSH
8840: LD_INT 25
8842: PUSH
8843: LD_INT 26
8845: PUSH
8846: LD_INT 28
8848: PUSH
8849: LD_INT 30
8851: PUSH
8852: LD_INT 31
8854: PUSH
8855: LD_INT 32
8857: PUSH
8858: LD_INT 36
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: PUSH
8884: LD_INT 101
8886: PUSH
8887: LD_INT 102
8889: PUSH
8890: LD_INT 103
8892: PUSH
8893: LD_INT 105
8895: PUSH
8896: LD_INT 106
8898: PUSH
8899: LD_INT 108
8901: PUSH
8902: LD_INT 109
8904: PUSH
8905: LD_INT 112
8907: PUSH
8908: LD_INT 114
8910: PUSH
8911: LD_INT 116
8913: PUSH
8914: LD_INT 117
8916: PUSH
8917: LD_INT 118
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: ST_TO_ADDR
8938: GO 11037
8940: LD_INT 10
8942: DOUBLE
8943: EQUAL
8944: IFTRUE 8948
8946: GO 9144
8948: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8949: LD_ADDR_VAR 0 2
8953: PUSH
8954: LD_INT 2
8956: PUSH
8957: LD_INT 4
8959: PUSH
8960: LD_INT 5
8962: PUSH
8963: LD_INT 6
8965: PUSH
8966: LD_INT 7
8968: PUSH
8969: LD_INT 8
8971: PUSH
8972: LD_INT 9
8974: PUSH
8975: LD_INT 10
8977: PUSH
8978: LD_INT 11
8980: PUSH
8981: LD_INT 12
8983: PUSH
8984: LD_INT 13
8986: PUSH
8987: LD_INT 14
8989: PUSH
8990: LD_INT 15
8992: PUSH
8993: LD_INT 16
8995: PUSH
8996: LD_INT 17
8998: PUSH
8999: LD_INT 18
9001: PUSH
9002: LD_INT 19
9004: PUSH
9005: LD_INT 20
9007: PUSH
9008: LD_INT 21
9010: PUSH
9011: LD_INT 22
9013: PUSH
9014: LD_INT 23
9016: PUSH
9017: LD_INT 24
9019: PUSH
9020: LD_INT 25
9022: PUSH
9023: LD_INT 26
9025: PUSH
9026: LD_INT 28
9028: PUSH
9029: LD_INT 30
9031: PUSH
9032: LD_INT 31
9034: PUSH
9035: LD_INT 32
9037: PUSH
9038: LD_INT 36
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: PUSH
9072: LD_INT 101
9074: PUSH
9075: LD_INT 102
9077: PUSH
9078: LD_INT 103
9080: PUSH
9081: LD_INT 104
9083: PUSH
9084: LD_INT 105
9086: PUSH
9087: LD_INT 106
9089: PUSH
9090: LD_INT 107
9092: PUSH
9093: LD_INT 108
9095: PUSH
9096: LD_INT 109
9098: PUSH
9099: LD_INT 110
9101: PUSH
9102: LD_INT 111
9104: PUSH
9105: LD_INT 112
9107: PUSH
9108: LD_INT 114
9110: PUSH
9111: LD_INT 116
9113: PUSH
9114: LD_INT 117
9116: PUSH
9117: LD_INT 118
9119: PUSH
9120: EMPTY
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: ST_TO_ADDR
9142: GO 11037
9144: LD_INT 11
9146: DOUBLE
9147: EQUAL
9148: IFTRUE 9152
9150: GO 9356
9152: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
9153: LD_ADDR_VAR 0 2
9157: PUSH
9158: LD_INT 2
9160: PUSH
9161: LD_INT 3
9163: PUSH
9164: LD_INT 4
9166: PUSH
9167: LD_INT 5
9169: PUSH
9170: LD_INT 6
9172: PUSH
9173: LD_INT 7
9175: PUSH
9176: LD_INT 8
9178: PUSH
9179: LD_INT 9
9181: PUSH
9182: LD_INT 10
9184: PUSH
9185: LD_INT 11
9187: PUSH
9188: LD_INT 12
9190: PUSH
9191: LD_INT 13
9193: PUSH
9194: LD_INT 14
9196: PUSH
9197: LD_INT 15
9199: PUSH
9200: LD_INT 16
9202: PUSH
9203: LD_INT 17
9205: PUSH
9206: LD_INT 18
9208: PUSH
9209: LD_INT 19
9211: PUSH
9212: LD_INT 20
9214: PUSH
9215: LD_INT 21
9217: PUSH
9218: LD_INT 22
9220: PUSH
9221: LD_INT 23
9223: PUSH
9224: LD_INT 24
9226: PUSH
9227: LD_INT 25
9229: PUSH
9230: LD_INT 26
9232: PUSH
9233: LD_INT 28
9235: PUSH
9236: LD_INT 30
9238: PUSH
9239: LD_INT 31
9241: PUSH
9242: LD_INT 32
9244: PUSH
9245: LD_INT 34
9247: PUSH
9248: LD_INT 36
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: PUSH
9284: LD_INT 101
9286: PUSH
9287: LD_INT 102
9289: PUSH
9290: LD_INT 103
9292: PUSH
9293: LD_INT 104
9295: PUSH
9296: LD_INT 105
9298: PUSH
9299: LD_INT 106
9301: PUSH
9302: LD_INT 107
9304: PUSH
9305: LD_INT 108
9307: PUSH
9308: LD_INT 109
9310: PUSH
9311: LD_INT 110
9313: PUSH
9314: LD_INT 111
9316: PUSH
9317: LD_INT 112
9319: PUSH
9320: LD_INT 114
9322: PUSH
9323: LD_INT 116
9325: PUSH
9326: LD_INT 117
9328: PUSH
9329: LD_INT 118
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: ST_TO_ADDR
9354: GO 11037
9356: LD_INT 12
9358: DOUBLE
9359: EQUAL
9360: IFTRUE 9364
9362: GO 9584
9364: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
9365: LD_ADDR_VAR 0 2
9369: PUSH
9370: LD_INT 1
9372: PUSH
9373: LD_INT 2
9375: PUSH
9376: LD_INT 3
9378: PUSH
9379: LD_INT 4
9381: PUSH
9382: LD_INT 5
9384: PUSH
9385: LD_INT 6
9387: PUSH
9388: LD_INT 7
9390: PUSH
9391: LD_INT 8
9393: PUSH
9394: LD_INT 9
9396: PUSH
9397: LD_INT 10
9399: PUSH
9400: LD_INT 11
9402: PUSH
9403: LD_INT 12
9405: PUSH
9406: LD_INT 13
9408: PUSH
9409: LD_INT 14
9411: PUSH
9412: LD_INT 15
9414: PUSH
9415: LD_INT 16
9417: PUSH
9418: LD_INT 17
9420: PUSH
9421: LD_INT 18
9423: PUSH
9424: LD_INT 19
9426: PUSH
9427: LD_INT 20
9429: PUSH
9430: LD_INT 21
9432: PUSH
9433: LD_INT 22
9435: PUSH
9436: LD_INT 23
9438: PUSH
9439: LD_INT 24
9441: PUSH
9442: LD_INT 25
9444: PUSH
9445: LD_INT 26
9447: PUSH
9448: LD_INT 27
9450: PUSH
9451: LD_INT 28
9453: PUSH
9454: LD_INT 30
9456: PUSH
9457: LD_INT 31
9459: PUSH
9460: LD_INT 32
9462: PUSH
9463: LD_INT 33
9465: PUSH
9466: LD_INT 34
9468: PUSH
9469: LD_INT 36
9471: PUSH
9472: EMPTY
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: PUSH
9508: LD_INT 101
9510: PUSH
9511: LD_INT 102
9513: PUSH
9514: LD_INT 103
9516: PUSH
9517: LD_INT 104
9519: PUSH
9520: LD_INT 105
9522: PUSH
9523: LD_INT 106
9525: PUSH
9526: LD_INT 107
9528: PUSH
9529: LD_INT 108
9531: PUSH
9532: LD_INT 109
9534: PUSH
9535: LD_INT 110
9537: PUSH
9538: LD_INT 111
9540: PUSH
9541: LD_INT 112
9543: PUSH
9544: LD_INT 113
9546: PUSH
9547: LD_INT 114
9549: PUSH
9550: LD_INT 116
9552: PUSH
9553: LD_INT 117
9555: PUSH
9556: LD_INT 118
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: ST_TO_ADDR
9582: GO 11037
9584: LD_INT 13
9586: DOUBLE
9587: EQUAL
9588: IFTRUE 9592
9590: GO 9800
9592: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9593: LD_ADDR_VAR 0 2
9597: PUSH
9598: LD_INT 1
9600: PUSH
9601: LD_INT 2
9603: PUSH
9604: LD_INT 3
9606: PUSH
9607: LD_INT 4
9609: PUSH
9610: LD_INT 5
9612: PUSH
9613: LD_INT 8
9615: PUSH
9616: LD_INT 9
9618: PUSH
9619: LD_INT 10
9621: PUSH
9622: LD_INT 11
9624: PUSH
9625: LD_INT 12
9627: PUSH
9628: LD_INT 14
9630: PUSH
9631: LD_INT 15
9633: PUSH
9634: LD_INT 16
9636: PUSH
9637: LD_INT 17
9639: PUSH
9640: LD_INT 18
9642: PUSH
9643: LD_INT 19
9645: PUSH
9646: LD_INT 20
9648: PUSH
9649: LD_INT 21
9651: PUSH
9652: LD_INT 22
9654: PUSH
9655: LD_INT 23
9657: PUSH
9658: LD_INT 24
9660: PUSH
9661: LD_INT 25
9663: PUSH
9664: LD_INT 26
9666: PUSH
9667: LD_INT 27
9669: PUSH
9670: LD_INT 28
9672: PUSH
9673: LD_INT 30
9675: PUSH
9676: LD_INT 31
9678: PUSH
9679: LD_INT 32
9681: PUSH
9682: LD_INT 33
9684: PUSH
9685: LD_INT 34
9687: PUSH
9688: LD_INT 36
9690: PUSH
9691: EMPTY
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: PUSH
9724: LD_INT 101
9726: PUSH
9727: LD_INT 102
9729: PUSH
9730: LD_INT 103
9732: PUSH
9733: LD_INT 104
9735: PUSH
9736: LD_INT 105
9738: PUSH
9739: LD_INT 106
9741: PUSH
9742: LD_INT 107
9744: PUSH
9745: LD_INT 108
9747: PUSH
9748: LD_INT 109
9750: PUSH
9751: LD_INT 110
9753: PUSH
9754: LD_INT 111
9756: PUSH
9757: LD_INT 112
9759: PUSH
9760: LD_INT 113
9762: PUSH
9763: LD_INT 114
9765: PUSH
9766: LD_INT 116
9768: PUSH
9769: LD_INT 117
9771: PUSH
9772: LD_INT 118
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: ST_TO_ADDR
9798: GO 11037
9800: LD_INT 14
9802: DOUBLE
9803: EQUAL
9804: IFTRUE 9808
9806: GO 10032
9808: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9809: LD_ADDR_VAR 0 2
9813: PUSH
9814: LD_INT 1
9816: PUSH
9817: LD_INT 2
9819: PUSH
9820: LD_INT 3
9822: PUSH
9823: LD_INT 4
9825: PUSH
9826: LD_INT 5
9828: PUSH
9829: LD_INT 6
9831: PUSH
9832: LD_INT 7
9834: PUSH
9835: LD_INT 8
9837: PUSH
9838: LD_INT 9
9840: PUSH
9841: LD_INT 10
9843: PUSH
9844: LD_INT 11
9846: PUSH
9847: LD_INT 12
9849: PUSH
9850: LD_INT 13
9852: PUSH
9853: LD_INT 14
9855: PUSH
9856: LD_INT 15
9858: PUSH
9859: LD_INT 16
9861: PUSH
9862: LD_INT 17
9864: PUSH
9865: LD_INT 18
9867: PUSH
9868: LD_INT 19
9870: PUSH
9871: LD_INT 20
9873: PUSH
9874: LD_INT 21
9876: PUSH
9877: LD_INT 22
9879: PUSH
9880: LD_INT 23
9882: PUSH
9883: LD_INT 24
9885: PUSH
9886: LD_INT 25
9888: PUSH
9889: LD_INT 26
9891: PUSH
9892: LD_INT 27
9894: PUSH
9895: LD_INT 28
9897: PUSH
9898: LD_INT 29
9900: PUSH
9901: LD_INT 30
9903: PUSH
9904: LD_INT 31
9906: PUSH
9907: LD_INT 32
9909: PUSH
9910: LD_INT 33
9912: PUSH
9913: LD_INT 34
9915: PUSH
9916: LD_INT 36
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: PUSH
9956: LD_INT 101
9958: PUSH
9959: LD_INT 102
9961: PUSH
9962: LD_INT 103
9964: PUSH
9965: LD_INT 104
9967: PUSH
9968: LD_INT 105
9970: PUSH
9971: LD_INT 106
9973: PUSH
9974: LD_INT 107
9976: PUSH
9977: LD_INT 108
9979: PUSH
9980: LD_INT 109
9982: PUSH
9983: LD_INT 110
9985: PUSH
9986: LD_INT 111
9988: PUSH
9989: LD_INT 112
9991: PUSH
9992: LD_INT 113
9994: PUSH
9995: LD_INT 114
9997: PUSH
9998: LD_INT 116
10000: PUSH
10001: LD_INT 117
10003: PUSH
10004: LD_INT 118
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: ST_TO_ADDR
10030: GO 11037
10032: LD_INT 15
10034: DOUBLE
10035: EQUAL
10036: IFTRUE 10040
10038: GO 10264
10040: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
10041: LD_ADDR_VAR 0 2
10045: PUSH
10046: LD_INT 1
10048: PUSH
10049: LD_INT 2
10051: PUSH
10052: LD_INT 3
10054: PUSH
10055: LD_INT 4
10057: PUSH
10058: LD_INT 5
10060: PUSH
10061: LD_INT 6
10063: PUSH
10064: LD_INT 7
10066: PUSH
10067: LD_INT 8
10069: PUSH
10070: LD_INT 9
10072: PUSH
10073: LD_INT 10
10075: PUSH
10076: LD_INT 11
10078: PUSH
10079: LD_INT 12
10081: PUSH
10082: LD_INT 13
10084: PUSH
10085: LD_INT 14
10087: PUSH
10088: LD_INT 15
10090: PUSH
10091: LD_INT 16
10093: PUSH
10094: LD_INT 17
10096: PUSH
10097: LD_INT 18
10099: PUSH
10100: LD_INT 19
10102: PUSH
10103: LD_INT 20
10105: PUSH
10106: LD_INT 21
10108: PUSH
10109: LD_INT 22
10111: PUSH
10112: LD_INT 23
10114: PUSH
10115: LD_INT 24
10117: PUSH
10118: LD_INT 25
10120: PUSH
10121: LD_INT 26
10123: PUSH
10124: LD_INT 27
10126: PUSH
10127: LD_INT 28
10129: PUSH
10130: LD_INT 29
10132: PUSH
10133: LD_INT 30
10135: PUSH
10136: LD_INT 31
10138: PUSH
10139: LD_INT 32
10141: PUSH
10142: LD_INT 33
10144: PUSH
10145: LD_INT 34
10147: PUSH
10148: LD_INT 36
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: PUSH
10188: LD_INT 101
10190: PUSH
10191: LD_INT 102
10193: PUSH
10194: LD_INT 103
10196: PUSH
10197: LD_INT 104
10199: PUSH
10200: LD_INT 105
10202: PUSH
10203: LD_INT 106
10205: PUSH
10206: LD_INT 107
10208: PUSH
10209: LD_INT 108
10211: PUSH
10212: LD_INT 109
10214: PUSH
10215: LD_INT 110
10217: PUSH
10218: LD_INT 111
10220: PUSH
10221: LD_INT 112
10223: PUSH
10224: LD_INT 113
10226: PUSH
10227: LD_INT 114
10229: PUSH
10230: LD_INT 116
10232: PUSH
10233: LD_INT 117
10235: PUSH
10236: LD_INT 118
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: ST_TO_ADDR
10262: GO 11037
10264: LD_INT 16
10266: DOUBLE
10267: EQUAL
10268: IFTRUE 10272
10270: GO 10408
10272: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
10273: LD_ADDR_VAR 0 2
10277: PUSH
10278: LD_INT 2
10280: PUSH
10281: LD_INT 4
10283: PUSH
10284: LD_INT 5
10286: PUSH
10287: LD_INT 7
10289: PUSH
10290: LD_INT 11
10292: PUSH
10293: LD_INT 12
10295: PUSH
10296: LD_INT 15
10298: PUSH
10299: LD_INT 16
10301: PUSH
10302: LD_INT 20
10304: PUSH
10305: LD_INT 21
10307: PUSH
10308: LD_INT 22
10310: PUSH
10311: LD_INT 23
10313: PUSH
10314: LD_INT 25
10316: PUSH
10317: LD_INT 26
10319: PUSH
10320: LD_INT 30
10322: PUSH
10323: LD_INT 31
10325: PUSH
10326: LD_INT 32
10328: PUSH
10329: LD_INT 33
10331: PUSH
10332: LD_INT 34
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: PUSH
10356: LD_INT 101
10358: PUSH
10359: LD_INT 102
10361: PUSH
10362: LD_INT 103
10364: PUSH
10365: LD_INT 106
10367: PUSH
10368: LD_INT 108
10370: PUSH
10371: LD_INT 112
10373: PUSH
10374: LD_INT 113
10376: PUSH
10377: LD_INT 114
10379: PUSH
10380: LD_INT 116
10382: PUSH
10383: LD_INT 117
10385: PUSH
10386: LD_INT 118
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: ST_TO_ADDR
10406: GO 11037
10408: LD_INT 17
10410: DOUBLE
10411: EQUAL
10412: IFTRUE 10416
10414: GO 10640
10416: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
10417: LD_ADDR_VAR 0 2
10421: PUSH
10422: LD_INT 1
10424: PUSH
10425: LD_INT 2
10427: PUSH
10428: LD_INT 3
10430: PUSH
10431: LD_INT 4
10433: PUSH
10434: LD_INT 5
10436: PUSH
10437: LD_INT 6
10439: PUSH
10440: LD_INT 7
10442: PUSH
10443: LD_INT 8
10445: PUSH
10446: LD_INT 9
10448: PUSH
10449: LD_INT 10
10451: PUSH
10452: LD_INT 11
10454: PUSH
10455: LD_INT 12
10457: PUSH
10458: LD_INT 13
10460: PUSH
10461: LD_INT 14
10463: PUSH
10464: LD_INT 15
10466: PUSH
10467: LD_INT 16
10469: PUSH
10470: LD_INT 17
10472: PUSH
10473: LD_INT 18
10475: PUSH
10476: LD_INT 19
10478: PUSH
10479: LD_INT 20
10481: PUSH
10482: LD_INT 21
10484: PUSH
10485: LD_INT 22
10487: PUSH
10488: LD_INT 23
10490: PUSH
10491: LD_INT 24
10493: PUSH
10494: LD_INT 25
10496: PUSH
10497: LD_INT 26
10499: PUSH
10500: LD_INT 27
10502: PUSH
10503: LD_INT 28
10505: PUSH
10506: LD_INT 29
10508: PUSH
10509: LD_INT 30
10511: PUSH
10512: LD_INT 31
10514: PUSH
10515: LD_INT 32
10517: PUSH
10518: LD_INT 33
10520: PUSH
10521: LD_INT 34
10523: PUSH
10524: LD_INT 36
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: PUSH
10564: LD_INT 101
10566: PUSH
10567: LD_INT 102
10569: PUSH
10570: LD_INT 103
10572: PUSH
10573: LD_INT 104
10575: PUSH
10576: LD_INT 105
10578: PUSH
10579: LD_INT 106
10581: PUSH
10582: LD_INT 107
10584: PUSH
10585: LD_INT 108
10587: PUSH
10588: LD_INT 109
10590: PUSH
10591: LD_INT 110
10593: PUSH
10594: LD_INT 111
10596: PUSH
10597: LD_INT 112
10599: PUSH
10600: LD_INT 113
10602: PUSH
10603: LD_INT 114
10605: PUSH
10606: LD_INT 116
10608: PUSH
10609: LD_INT 117
10611: PUSH
10612: LD_INT 118
10614: PUSH
10615: EMPTY
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: ST_TO_ADDR
10638: GO 11037
10640: LD_INT 18
10642: DOUBLE
10643: EQUAL
10644: IFTRUE 10648
10646: GO 10796
10648: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10649: LD_ADDR_VAR 0 2
10653: PUSH
10654: LD_INT 2
10656: PUSH
10657: LD_INT 4
10659: PUSH
10660: LD_INT 5
10662: PUSH
10663: LD_INT 7
10665: PUSH
10666: LD_INT 11
10668: PUSH
10669: LD_INT 12
10671: PUSH
10672: LD_INT 15
10674: PUSH
10675: LD_INT 16
10677: PUSH
10678: LD_INT 20
10680: PUSH
10681: LD_INT 21
10683: PUSH
10684: LD_INT 22
10686: PUSH
10687: LD_INT 23
10689: PUSH
10690: LD_INT 25
10692: PUSH
10693: LD_INT 26
10695: PUSH
10696: LD_INT 30
10698: PUSH
10699: LD_INT 31
10701: PUSH
10702: LD_INT 32
10704: PUSH
10705: LD_INT 33
10707: PUSH
10708: LD_INT 34
10710: PUSH
10711: LD_INT 35
10713: PUSH
10714: LD_INT 36
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: PUSH
10740: LD_INT 101
10742: PUSH
10743: LD_INT 102
10745: PUSH
10746: LD_INT 103
10748: PUSH
10749: LD_INT 106
10751: PUSH
10752: LD_INT 108
10754: PUSH
10755: LD_INT 112
10757: PUSH
10758: LD_INT 113
10760: PUSH
10761: LD_INT 114
10763: PUSH
10764: LD_INT 115
10766: PUSH
10767: LD_INT 116
10769: PUSH
10770: LD_INT 117
10772: PUSH
10773: LD_INT 118
10775: PUSH
10776: EMPTY
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: PUSH
10790: EMPTY
10791: LIST
10792: LIST
10793: ST_TO_ADDR
10794: GO 11037
10796: LD_INT 19
10798: DOUBLE
10799: EQUAL
10800: IFTRUE 10804
10802: GO 11036
10804: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10805: LD_ADDR_VAR 0 2
10809: PUSH
10810: LD_INT 1
10812: PUSH
10813: LD_INT 2
10815: PUSH
10816: LD_INT 3
10818: PUSH
10819: LD_INT 4
10821: PUSH
10822: LD_INT 5
10824: PUSH
10825: LD_INT 6
10827: PUSH
10828: LD_INT 7
10830: PUSH
10831: LD_INT 8
10833: PUSH
10834: LD_INT 9
10836: PUSH
10837: LD_INT 10
10839: PUSH
10840: LD_INT 11
10842: PUSH
10843: LD_INT 12
10845: PUSH
10846: LD_INT 13
10848: PUSH
10849: LD_INT 14
10851: PUSH
10852: LD_INT 15
10854: PUSH
10855: LD_INT 16
10857: PUSH
10858: LD_INT 17
10860: PUSH
10861: LD_INT 18
10863: PUSH
10864: LD_INT 19
10866: PUSH
10867: LD_INT 20
10869: PUSH
10870: LD_INT 21
10872: PUSH
10873: LD_INT 22
10875: PUSH
10876: LD_INT 23
10878: PUSH
10879: LD_INT 24
10881: PUSH
10882: LD_INT 25
10884: PUSH
10885: LD_INT 26
10887: PUSH
10888: LD_INT 27
10890: PUSH
10891: LD_INT 28
10893: PUSH
10894: LD_INT 29
10896: PUSH
10897: LD_INT 30
10899: PUSH
10900: LD_INT 31
10902: PUSH
10903: LD_INT 32
10905: PUSH
10906: LD_INT 33
10908: PUSH
10909: LD_INT 34
10911: PUSH
10912: LD_INT 35
10914: PUSH
10915: LD_INT 36
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: PUSH
10956: LD_INT 101
10958: PUSH
10959: LD_INT 102
10961: PUSH
10962: LD_INT 103
10964: PUSH
10965: LD_INT 104
10967: PUSH
10968: LD_INT 105
10970: PUSH
10971: LD_INT 106
10973: PUSH
10974: LD_INT 107
10976: PUSH
10977: LD_INT 108
10979: PUSH
10980: LD_INT 109
10982: PUSH
10983: LD_INT 110
10985: PUSH
10986: LD_INT 111
10988: PUSH
10989: LD_INT 112
10991: PUSH
10992: LD_INT 113
10994: PUSH
10995: LD_INT 114
10997: PUSH
10998: LD_INT 115
11000: PUSH
11001: LD_INT 116
11003: PUSH
11004: LD_INT 117
11006: PUSH
11007: LD_INT 118
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: PUSH
11030: EMPTY
11031: LIST
11032: LIST
11033: ST_TO_ADDR
11034: GO 11037
11036: POP
// end else
11037: GO 11268
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
11039: LD_ADDR_VAR 0 2
11043: PUSH
11044: LD_INT 1
11046: PUSH
11047: LD_INT 2
11049: PUSH
11050: LD_INT 3
11052: PUSH
11053: LD_INT 4
11055: PUSH
11056: LD_INT 5
11058: PUSH
11059: LD_INT 6
11061: PUSH
11062: LD_INT 7
11064: PUSH
11065: LD_INT 8
11067: PUSH
11068: LD_INT 9
11070: PUSH
11071: LD_INT 10
11073: PUSH
11074: LD_INT 11
11076: PUSH
11077: LD_INT 12
11079: PUSH
11080: LD_INT 13
11082: PUSH
11083: LD_INT 14
11085: PUSH
11086: LD_INT 15
11088: PUSH
11089: LD_INT 16
11091: PUSH
11092: LD_INT 17
11094: PUSH
11095: LD_INT 18
11097: PUSH
11098: LD_INT 19
11100: PUSH
11101: LD_INT 20
11103: PUSH
11104: LD_INT 21
11106: PUSH
11107: LD_INT 22
11109: PUSH
11110: LD_INT 23
11112: PUSH
11113: LD_INT 24
11115: PUSH
11116: LD_INT 25
11118: PUSH
11119: LD_INT 26
11121: PUSH
11122: LD_INT 27
11124: PUSH
11125: LD_INT 28
11127: PUSH
11128: LD_INT 29
11130: PUSH
11131: LD_INT 30
11133: PUSH
11134: LD_INT 31
11136: PUSH
11137: LD_INT 32
11139: PUSH
11140: LD_INT 33
11142: PUSH
11143: LD_INT 34
11145: PUSH
11146: LD_INT 35
11148: PUSH
11149: LD_INT 36
11151: PUSH
11152: EMPTY
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: PUSH
11190: LD_INT 101
11192: PUSH
11193: LD_INT 102
11195: PUSH
11196: LD_INT 103
11198: PUSH
11199: LD_INT 104
11201: PUSH
11202: LD_INT 105
11204: PUSH
11205: LD_INT 106
11207: PUSH
11208: LD_INT 107
11210: PUSH
11211: LD_INT 108
11213: PUSH
11214: LD_INT 109
11216: PUSH
11217: LD_INT 110
11219: PUSH
11220: LD_INT 111
11222: PUSH
11223: LD_INT 112
11225: PUSH
11226: LD_INT 113
11228: PUSH
11229: LD_INT 114
11231: PUSH
11232: LD_INT 115
11234: PUSH
11235: LD_INT 116
11237: PUSH
11238: LD_INT 117
11240: PUSH
11241: LD_INT 118
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: ST_TO_ADDR
// if result then
11268: LD_VAR 0 2
11272: IFFALSE 12058
// begin normal :=  ;
11274: LD_ADDR_VAR 0 5
11278: PUSH
11279: LD_STRING 
11281: ST_TO_ADDR
// hardcore :=  ;
11282: LD_ADDR_VAR 0 6
11286: PUSH
11287: LD_STRING 
11289: ST_TO_ADDR
// active :=  ;
11290: LD_ADDR_VAR 0 7
11294: PUSH
11295: LD_STRING 
11297: ST_TO_ADDR
// for i = 1 to normalCounter do
11298: LD_ADDR_VAR 0 8
11302: PUSH
11303: DOUBLE
11304: LD_INT 1
11306: DEC
11307: ST_TO_ADDR
11308: LD_EXP 27
11312: PUSH
11313: FOR_TO
11314: IFFALSE 11415
// begin tmp := 0 ;
11316: LD_ADDR_VAR 0 3
11320: PUSH
11321: LD_STRING 0
11323: ST_TO_ADDR
// if result [ 1 ] then
11324: LD_VAR 0 2
11328: PUSH
11329: LD_INT 1
11331: ARRAY
11332: IFFALSE 11397
// if result [ 1 ] [ 1 ] = i then
11334: LD_VAR 0 2
11338: PUSH
11339: LD_INT 1
11341: ARRAY
11342: PUSH
11343: LD_INT 1
11345: ARRAY
11346: PUSH
11347: LD_VAR 0 8
11351: EQUAL
11352: IFFALSE 11397
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11354: LD_ADDR_VAR 0 2
11358: PUSH
11359: LD_VAR 0 2
11363: PPUSH
11364: LD_INT 1
11366: PPUSH
11367: LD_VAR 0 2
11371: PUSH
11372: LD_INT 1
11374: ARRAY
11375: PPUSH
11376: LD_INT 1
11378: PPUSH
11379: CALL_OW 3
11383: PPUSH
11384: CALL_OW 1
11388: ST_TO_ADDR
// tmp := 1 ;
11389: LD_ADDR_VAR 0 3
11393: PUSH
11394: LD_STRING 1
11396: ST_TO_ADDR
// end ; normal := normal & tmp ;
11397: LD_ADDR_VAR 0 5
11401: PUSH
11402: LD_VAR 0 5
11406: PUSH
11407: LD_VAR 0 3
11411: STR
11412: ST_TO_ADDR
// end ;
11413: GO 11313
11415: POP
11416: POP
// for i = 1 to hardcoreCounter do
11417: LD_ADDR_VAR 0 8
11421: PUSH
11422: DOUBLE
11423: LD_INT 1
11425: DEC
11426: ST_TO_ADDR
11427: LD_EXP 28
11431: PUSH
11432: FOR_TO
11433: IFFALSE 11538
// begin tmp := 0 ;
11435: LD_ADDR_VAR 0 3
11439: PUSH
11440: LD_STRING 0
11442: ST_TO_ADDR
// if result [ 2 ] then
11443: LD_VAR 0 2
11447: PUSH
11448: LD_INT 2
11450: ARRAY
11451: IFFALSE 11520
// if result [ 2 ] [ 1 ] = 100 + i then
11453: LD_VAR 0 2
11457: PUSH
11458: LD_INT 2
11460: ARRAY
11461: PUSH
11462: LD_INT 1
11464: ARRAY
11465: PUSH
11466: LD_INT 100
11468: PUSH
11469: LD_VAR 0 8
11473: PLUS
11474: EQUAL
11475: IFFALSE 11520
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11477: LD_ADDR_VAR 0 2
11481: PUSH
11482: LD_VAR 0 2
11486: PPUSH
11487: LD_INT 2
11489: PPUSH
11490: LD_VAR 0 2
11494: PUSH
11495: LD_INT 2
11497: ARRAY
11498: PPUSH
11499: LD_INT 1
11501: PPUSH
11502: CALL_OW 3
11506: PPUSH
11507: CALL_OW 1
11511: ST_TO_ADDR
// tmp := 1 ;
11512: LD_ADDR_VAR 0 3
11516: PUSH
11517: LD_STRING 1
11519: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11520: LD_ADDR_VAR 0 6
11524: PUSH
11525: LD_VAR 0 6
11529: PUSH
11530: LD_VAR 0 3
11534: STR
11535: ST_TO_ADDR
// end ;
11536: GO 11432
11538: POP
11539: POP
// if isGameLoad then
11540: LD_VAR 0 1
11544: IFFALSE 12019
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
11546: LD_ADDR_VAR 0 4
11550: PUSH
11551: LD_EXP 31
11555: PUSH
11556: LD_EXP 30
11560: PUSH
11561: LD_EXP 32
11565: PUSH
11566: LD_EXP 29
11570: PUSH
11571: LD_EXP 33
11575: PUSH
11576: LD_EXP 34
11580: PUSH
11581: LD_EXP 35
11585: PUSH
11586: LD_EXP 36
11590: PUSH
11591: LD_EXP 37
11595: PUSH
11596: LD_EXP 38
11600: PUSH
11601: LD_EXP 39
11605: PUSH
11606: LD_EXP 40
11610: PUSH
11611: LD_EXP 41
11615: PUSH
11616: LD_EXP 42
11620: PUSH
11621: LD_EXP 50
11625: PUSH
11626: LD_EXP 51
11630: PUSH
11631: LD_EXP 52
11635: PUSH
11636: LD_EXP 53
11640: PUSH
11641: LD_EXP 55
11645: PUSH
11646: LD_EXP 56
11650: PUSH
11651: LD_EXP 57
11655: PUSH
11656: LD_EXP 60
11660: PUSH
11661: LD_EXP 62
11665: PUSH
11666: LD_EXP 63
11670: PUSH
11671: LD_EXP 64
11675: PUSH
11676: LD_EXP 66
11680: PUSH
11681: LD_EXP 67
11685: PUSH
11686: LD_EXP 70
11690: PUSH
11691: LD_EXP 71
11695: PUSH
11696: LD_EXP 72
11700: PUSH
11701: LD_EXP 73
11705: PUSH
11706: LD_EXP 74
11710: PUSH
11711: LD_EXP 75
11715: PUSH
11716: LD_EXP 76
11720: PUSH
11721: LD_EXP 77
11725: PUSH
11726: LD_EXP 78
11730: PUSH
11731: LD_EXP 43
11735: PUSH
11736: LD_EXP 44
11740: PUSH
11741: LD_EXP 47
11745: PUSH
11746: LD_EXP 48
11750: PUSH
11751: LD_EXP 49
11755: PUSH
11756: LD_EXP 45
11760: PUSH
11761: LD_EXP 46
11765: PUSH
11766: LD_EXP 54
11770: PUSH
11771: LD_EXP 58
11775: PUSH
11776: LD_EXP 59
11780: PUSH
11781: LD_EXP 61
11785: PUSH
11786: LD_EXP 65
11790: PUSH
11791: LD_EXP 68
11795: PUSH
11796: LD_EXP 69
11800: PUSH
11801: LD_EXP 79
11805: PUSH
11806: LD_EXP 80
11810: PUSH
11811: LD_EXP 81
11815: PUSH
11816: LD_EXP 82
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: ST_TO_ADDR
// tmp :=  ;
11877: LD_ADDR_VAR 0 3
11881: PUSH
11882: LD_STRING 
11884: ST_TO_ADDR
// for i = 1 to normalCounter do
11885: LD_ADDR_VAR 0 8
11889: PUSH
11890: DOUBLE
11891: LD_INT 1
11893: DEC
11894: ST_TO_ADDR
11895: LD_EXP 27
11899: PUSH
11900: FOR_TO
11901: IFFALSE 11937
// begin if flags [ i ] then
11903: LD_VAR 0 4
11907: PUSH
11908: LD_VAR 0 8
11912: ARRAY
11913: IFFALSE 11935
// tmp := tmp & i & ; ;
11915: LD_ADDR_VAR 0 3
11919: PUSH
11920: LD_VAR 0 3
11924: PUSH
11925: LD_VAR 0 8
11929: STR
11930: PUSH
11931: LD_STRING ;
11933: STR
11934: ST_TO_ADDR
// end ;
11935: GO 11900
11937: POP
11938: POP
// for i = 1 to hardcoreCounter do
11939: LD_ADDR_VAR 0 8
11943: PUSH
11944: DOUBLE
11945: LD_INT 1
11947: DEC
11948: ST_TO_ADDR
11949: LD_EXP 28
11953: PUSH
11954: FOR_TO
11955: IFFALSE 12001
// begin if flags [ normalCounter + i ] then
11957: LD_VAR 0 4
11961: PUSH
11962: LD_EXP 27
11966: PUSH
11967: LD_VAR 0 8
11971: PLUS
11972: ARRAY
11973: IFFALSE 11999
// tmp := tmp & ( 100 + i ) & ; ;
11975: LD_ADDR_VAR 0 3
11979: PUSH
11980: LD_VAR 0 3
11984: PUSH
11985: LD_INT 100
11987: PUSH
11988: LD_VAR 0 8
11992: PLUS
11993: STR
11994: PUSH
11995: LD_STRING ;
11997: STR
11998: ST_TO_ADDR
// end ;
11999: GO 11954
12001: POP
12002: POP
// if tmp then
12003: LD_VAR 0 3
12007: IFFALSE 12019
// active := tmp ;
12009: LD_ADDR_VAR 0 7
12013: PUSH
12014: LD_VAR 0 3
12018: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
12019: LD_STRING getStreamItemsFromMission("
12021: PUSH
12022: LD_VAR 0 5
12026: STR
12027: PUSH
12028: LD_STRING ","
12030: STR
12031: PUSH
12032: LD_VAR 0 6
12036: STR
12037: PUSH
12038: LD_STRING ","
12040: STR
12041: PUSH
12042: LD_VAR 0 7
12046: STR
12047: PUSH
12048: LD_STRING ")
12050: STR
12051: PPUSH
12052: CALL_OW 559
// end else
12056: GO 12065
// ToLua ( getStreamItemsFromMission("","","") ) ;
12058: LD_STRING getStreamItemsFromMission("","","")
12060: PPUSH
12061: CALL_OW 559
// end ;
12065: LD_VAR 0 2
12069: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12070: LD_EXP 26
12074: IFFALSE 12082
12076: PUSH
12077: LD_EXP 31
12081: AND
12082: IFFALSE 12206
12084: GO 12086
12086: DISABLE
12087: LD_INT 0
12089: PPUSH
12090: PPUSH
// begin enable ;
12091: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12092: LD_ADDR_VAR 0 2
12096: PUSH
12097: LD_INT 22
12099: PUSH
12100: LD_OWVAR 2
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PUSH
12109: LD_INT 2
12111: PUSH
12112: LD_INT 34
12114: PUSH
12115: LD_INT 7
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: PUSH
12122: LD_INT 34
12124: PUSH
12125: LD_INT 45
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: LD_INT 34
12134: PUSH
12135: LD_INT 28
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PUSH
12142: LD_INT 34
12144: PUSH
12145: LD_INT 47
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PPUSH
12163: CALL_OW 69
12167: ST_TO_ADDR
// if not tmp then
12168: LD_VAR 0 2
12172: NOT
12173: IFFALSE 12177
// exit ;
12175: GO 12206
// for i in tmp do
12177: LD_ADDR_VAR 0 1
12181: PUSH
12182: LD_VAR 0 2
12186: PUSH
12187: FOR_IN
12188: IFFALSE 12204
// begin SetLives ( i , 0 ) ;
12190: LD_VAR 0 1
12194: PPUSH
12195: LD_INT 0
12197: PPUSH
12198: CALL_OW 234
// end ;
12202: GO 12187
12204: POP
12205: POP
// end ;
12206: PPOPN 2
12208: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12209: LD_EXP 26
12213: IFFALSE 12221
12215: PUSH
12216: LD_EXP 32
12220: AND
12221: IFFALSE 12305
12223: GO 12225
12225: DISABLE
12226: LD_INT 0
12228: PPUSH
12229: PPUSH
// begin enable ;
12230: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12231: LD_ADDR_VAR 0 2
12235: PUSH
12236: LD_INT 22
12238: PUSH
12239: LD_OWVAR 2
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: PUSH
12248: LD_INT 32
12250: PUSH
12251: LD_INT 3
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: PPUSH
12262: CALL_OW 69
12266: ST_TO_ADDR
// if not tmp then
12267: LD_VAR 0 2
12271: NOT
12272: IFFALSE 12276
// exit ;
12274: GO 12305
// for i in tmp do
12276: LD_ADDR_VAR 0 1
12280: PUSH
12281: LD_VAR 0 2
12285: PUSH
12286: FOR_IN
12287: IFFALSE 12303
// begin SetLives ( i , 0 ) ;
12289: LD_VAR 0 1
12293: PPUSH
12294: LD_INT 0
12296: PPUSH
12297: CALL_OW 234
// end ;
12301: GO 12286
12303: POP
12304: POP
// end ;
12305: PPOPN 2
12307: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12308: LD_EXP 26
12312: IFFALSE 12320
12314: PUSH
12315: LD_EXP 29
12319: AND
12320: IFFALSE 12413
12322: GO 12324
12324: DISABLE
12325: LD_INT 0
12327: PPUSH
// begin enable ;
12328: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12329: LD_ADDR_VAR 0 1
12333: PUSH
12334: LD_INT 22
12336: PUSH
12337: LD_OWVAR 2
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PUSH
12346: LD_INT 2
12348: PUSH
12349: LD_INT 25
12351: PUSH
12352: LD_INT 5
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: PUSH
12359: LD_INT 25
12361: PUSH
12362: LD_INT 9
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: PUSH
12369: LD_INT 25
12371: PUSH
12372: LD_INT 8
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: PPUSH
12389: CALL_OW 69
12393: PUSH
12394: FOR_IN
12395: IFFALSE 12411
// begin SetClass ( i , 1 ) ;
12397: LD_VAR 0 1
12401: PPUSH
12402: LD_INT 1
12404: PPUSH
12405: CALL_OW 336
// end ;
12409: GO 12394
12411: POP
12412: POP
// end ;
12413: PPOPN 1
12415: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12416: LD_EXP 26
12420: IFFALSE 12428
12422: PUSH
12423: LD_EXP 30
12427: AND
12428: IFFALSE 12440
12430: PUSH
12431: LD_OWVAR 65
12435: PUSH
12436: LD_INT 7
12438: LESS
12439: AND
12440: IFFALSE 12454
12442: GO 12444
12444: DISABLE
// begin enable ;
12445: ENABLE
// game_speed := 7 ;
12446: LD_ADDR_OWVAR 65
12450: PUSH
12451: LD_INT 7
12453: ST_TO_ADDR
// end ;
12454: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12455: LD_EXP 26
12459: IFFALSE 12467
12461: PUSH
12462: LD_EXP 33
12466: AND
12467: IFFALSE 12669
12469: GO 12471
12471: DISABLE
12472: LD_INT 0
12474: PPUSH
12475: PPUSH
12476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12477: LD_ADDR_VAR 0 3
12481: PUSH
12482: LD_INT 81
12484: PUSH
12485: LD_OWVAR 2
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PUSH
12494: LD_INT 21
12496: PUSH
12497: LD_INT 1
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: PPUSH
12508: CALL_OW 69
12512: ST_TO_ADDR
// if not tmp then
12513: LD_VAR 0 3
12517: NOT
12518: IFFALSE 12522
// exit ;
12520: GO 12669
// if tmp > 5 then
12522: LD_VAR 0 3
12526: PUSH
12527: LD_INT 5
12529: GREATER
12530: IFFALSE 12542
// k := 5 else
12532: LD_ADDR_VAR 0 2
12536: PUSH
12537: LD_INT 5
12539: ST_TO_ADDR
12540: GO 12552
// k := tmp ;
12542: LD_ADDR_VAR 0 2
12546: PUSH
12547: LD_VAR 0 3
12551: ST_TO_ADDR
// for i := 1 to k do
12552: LD_ADDR_VAR 0 1
12556: PUSH
12557: DOUBLE
12558: LD_INT 1
12560: DEC
12561: ST_TO_ADDR
12562: LD_VAR 0 2
12566: PUSH
12567: FOR_TO
12568: IFFALSE 12667
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12570: LD_VAR 0 3
12574: PUSH
12575: LD_VAR 0 1
12579: ARRAY
12580: PPUSH
12581: LD_VAR 0 1
12585: PUSH
12586: LD_INT 4
12588: MOD
12589: PUSH
12590: LD_INT 1
12592: PLUS
12593: PPUSH
12594: CALL_OW 259
12598: PUSH
12599: LD_INT 10
12601: LESS
12602: IFFALSE 12665
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12604: LD_VAR 0 3
12608: PUSH
12609: LD_VAR 0 1
12613: ARRAY
12614: PPUSH
12615: LD_VAR 0 1
12619: PUSH
12620: LD_INT 4
12622: MOD
12623: PUSH
12624: LD_INT 1
12626: PLUS
12627: PPUSH
12628: LD_VAR 0 3
12632: PUSH
12633: LD_VAR 0 1
12637: ARRAY
12638: PPUSH
12639: LD_VAR 0 1
12643: PUSH
12644: LD_INT 4
12646: MOD
12647: PUSH
12648: LD_INT 1
12650: PLUS
12651: PPUSH
12652: CALL_OW 259
12656: PUSH
12657: LD_INT 1
12659: PLUS
12660: PPUSH
12661: CALL_OW 237
12665: GO 12567
12667: POP
12668: POP
// end ;
12669: PPOPN 3
12671: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12672: LD_EXP 26
12676: IFFALSE 12684
12678: PUSH
12679: LD_EXP 34
12683: AND
12684: IFFALSE 12704
12686: GO 12688
12688: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12689: LD_INT 4
12691: PPUSH
12692: LD_OWVAR 2
12696: PPUSH
12697: LD_INT 0
12699: PPUSH
12700: CALL_OW 324
12704: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12705: LD_EXP 26
12709: IFFALSE 12717
12711: PUSH
12712: LD_EXP 63
12716: AND
12717: IFFALSE 12737
12719: GO 12721
12721: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12722: LD_INT 19
12724: PPUSH
12725: LD_OWVAR 2
12729: PPUSH
12730: LD_INT 0
12732: PPUSH
12733: CALL_OW 324
12737: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12738: LD_EXP 26
12742: IFFALSE 12750
12744: PUSH
12745: LD_EXP 35
12749: AND
12750: IFFALSE 12852
12752: GO 12754
12754: DISABLE
12755: LD_INT 0
12757: PPUSH
12758: PPUSH
// begin enable ;
12759: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12760: LD_ADDR_VAR 0 2
12764: PUSH
12765: LD_INT 22
12767: PUSH
12768: LD_OWVAR 2
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: PUSH
12777: LD_INT 2
12779: PUSH
12780: LD_INT 34
12782: PUSH
12783: LD_INT 11
12785: PUSH
12786: EMPTY
12787: LIST
12788: LIST
12789: PUSH
12790: LD_INT 34
12792: PUSH
12793: LD_INT 30
12795: PUSH
12796: EMPTY
12797: LIST
12798: LIST
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: LIST
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: PPUSH
12809: CALL_OW 69
12813: ST_TO_ADDR
// if not tmp then
12814: LD_VAR 0 2
12818: NOT
12819: IFFALSE 12823
// exit ;
12821: GO 12852
// for i in tmp do
12823: LD_ADDR_VAR 0 1
12827: PUSH
12828: LD_VAR 0 2
12832: PUSH
12833: FOR_IN
12834: IFFALSE 12850
// begin SetLives ( i , 0 ) ;
12836: LD_VAR 0 1
12840: PPUSH
12841: LD_INT 0
12843: PPUSH
12844: CALL_OW 234
// end ;
12848: GO 12833
12850: POP
12851: POP
// end ;
12852: PPOPN 2
12854: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12855: LD_EXP 26
12859: IFFALSE 12867
12861: PUSH
12862: LD_EXP 36
12866: AND
12867: IFFALSE 12887
12869: GO 12871
12871: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12872: LD_INT 32
12874: PPUSH
12875: LD_OWVAR 2
12879: PPUSH
12880: LD_INT 0
12882: PPUSH
12883: CALL_OW 324
12887: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12888: LD_EXP 26
12892: IFFALSE 12900
12894: PUSH
12895: LD_EXP 37
12899: AND
12900: IFFALSE 13083
12902: GO 12904
12904: DISABLE
12905: LD_INT 0
12907: PPUSH
12908: PPUSH
12909: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12910: LD_ADDR_VAR 0 2
12914: PUSH
12915: LD_INT 22
12917: PUSH
12918: LD_OWVAR 2
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PUSH
12927: LD_INT 33
12929: PUSH
12930: LD_INT 3
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: PPUSH
12941: CALL_OW 69
12945: ST_TO_ADDR
// if not tmp then
12946: LD_VAR 0 2
12950: NOT
12951: IFFALSE 12955
// exit ;
12953: GO 13083
// side := 0 ;
12955: LD_ADDR_VAR 0 3
12959: PUSH
12960: LD_INT 0
12962: ST_TO_ADDR
// for i := 1 to 8 do
12963: LD_ADDR_VAR 0 1
12967: PUSH
12968: DOUBLE
12969: LD_INT 1
12971: DEC
12972: ST_TO_ADDR
12973: LD_INT 8
12975: PUSH
12976: FOR_TO
12977: IFFALSE 13027
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12979: LD_OWVAR 2
12983: PUSH
12984: LD_VAR 0 1
12988: NONEQUAL
12989: IFFALSE 13011
12991: PUSH
12992: LD_OWVAR 2
12996: PPUSH
12997: LD_VAR 0 1
13001: PPUSH
13002: CALL_OW 81
13006: PUSH
13007: LD_INT 2
13009: EQUAL
13010: AND
13011: IFFALSE 13025
// begin side := i ;
13013: LD_ADDR_VAR 0 3
13017: PUSH
13018: LD_VAR 0 1
13022: ST_TO_ADDR
// break ;
13023: GO 13027
// end ;
13025: GO 12976
13027: POP
13028: POP
// if not side then
13029: LD_VAR 0 3
13033: NOT
13034: IFFALSE 13038
// exit ;
13036: GO 13083
// for i := 1 to tmp do
13038: LD_ADDR_VAR 0 1
13042: PUSH
13043: DOUBLE
13044: LD_INT 1
13046: DEC
13047: ST_TO_ADDR
13048: LD_VAR 0 2
13052: PUSH
13053: FOR_TO
13054: IFFALSE 13081
// if Prob ( 60 ) then
13056: LD_INT 60
13058: PPUSH
13059: CALL_OW 13
13063: IFFALSE 13079
// SetSide ( i , side ) ;
13065: LD_VAR 0 1
13069: PPUSH
13070: LD_VAR 0 3
13074: PPUSH
13075: CALL_OW 235
13079: GO 13053
13081: POP
13082: POP
// end ;
13083: PPOPN 3
13085: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13086: LD_EXP 26
13090: IFFALSE 13098
13092: PUSH
13093: LD_EXP 39
13097: AND
13098: IFFALSE 13217
13100: GO 13102
13102: DISABLE
13103: LD_INT 0
13105: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13106: LD_ADDR_VAR 0 1
13110: PUSH
13111: LD_INT 22
13113: PUSH
13114: LD_OWVAR 2
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: PUSH
13123: LD_INT 21
13125: PUSH
13126: LD_INT 1
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: PUSH
13133: LD_INT 3
13135: PUSH
13136: LD_INT 23
13138: PUSH
13139: LD_INT 0
13141: PUSH
13142: EMPTY
13143: LIST
13144: LIST
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: LIST
13154: PPUSH
13155: CALL_OW 69
13159: PUSH
13160: FOR_IN
13161: IFFALSE 13215
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13163: LD_VAR 0 1
13167: PPUSH
13168: CALL_OW 257
13172: PUSH
13173: LD_INT 1
13175: PUSH
13176: LD_INT 2
13178: PUSH
13179: LD_INT 3
13181: PUSH
13182: LD_INT 4
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: IN
13191: IFFALSE 13213
// SetClass ( un , rand ( 1 , 4 ) ) ;
13193: LD_VAR 0 1
13197: PPUSH
13198: LD_INT 1
13200: PPUSH
13201: LD_INT 4
13203: PPUSH
13204: CALL_OW 12
13208: PPUSH
13209: CALL_OW 336
13213: GO 13160
13215: POP
13216: POP
// end ;
13217: PPOPN 1
13219: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13220: LD_EXP 26
13224: IFFALSE 13232
13226: PUSH
13227: LD_EXP 38
13231: AND
13232: IFFALSE 13311
13234: GO 13236
13236: DISABLE
13237: LD_INT 0
13239: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13240: LD_ADDR_VAR 0 1
13244: PUSH
13245: LD_INT 22
13247: PUSH
13248: LD_OWVAR 2
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: PUSH
13257: LD_INT 21
13259: PUSH
13260: LD_INT 3
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: PPUSH
13271: CALL_OW 69
13275: ST_TO_ADDR
// if not tmp then
13276: LD_VAR 0 1
13280: NOT
13281: IFFALSE 13285
// exit ;
13283: GO 13311
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13285: LD_VAR 0 1
13289: PUSH
13290: LD_INT 1
13292: PPUSH
13293: LD_VAR 0 1
13297: PPUSH
13298: CALL_OW 12
13302: ARRAY
13303: PPUSH
13304: LD_INT 100
13306: PPUSH
13307: CALL_OW 234
// end ;
13311: PPOPN 1
13313: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13314: LD_EXP 26
13318: IFFALSE 13326
13320: PUSH
13321: LD_EXP 40
13325: AND
13326: IFFALSE 13424
13328: GO 13330
13330: DISABLE
13331: LD_INT 0
13333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13334: LD_ADDR_VAR 0 1
13338: PUSH
13339: LD_INT 22
13341: PUSH
13342: LD_OWVAR 2
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: PUSH
13351: LD_INT 21
13353: PUSH
13354: LD_INT 1
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: PPUSH
13365: CALL_OW 69
13369: ST_TO_ADDR
// if not tmp then
13370: LD_VAR 0 1
13374: NOT
13375: IFFALSE 13379
// exit ;
13377: GO 13424
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13379: LD_VAR 0 1
13383: PUSH
13384: LD_INT 1
13386: PPUSH
13387: LD_VAR 0 1
13391: PPUSH
13392: CALL_OW 12
13396: ARRAY
13397: PPUSH
13398: LD_INT 1
13400: PPUSH
13401: LD_INT 4
13403: PPUSH
13404: CALL_OW 12
13408: PPUSH
13409: LD_INT 3000
13411: PPUSH
13412: LD_INT 9000
13414: PPUSH
13415: CALL_OW 12
13419: PPUSH
13420: CALL_OW 492
// end ;
13424: PPOPN 1
13426: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13427: LD_EXP 26
13431: IFFALSE 13439
13433: PUSH
13434: LD_EXP 41
13438: AND
13439: IFFALSE 13459
13441: GO 13443
13443: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13444: LD_INT 1
13446: PPUSH
13447: LD_OWVAR 2
13451: PPUSH
13452: LD_INT 0
13454: PPUSH
13455: CALL_OW 324
13459: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13460: LD_EXP 26
13464: IFFALSE 13472
13466: PUSH
13467: LD_EXP 42
13471: AND
13472: IFFALSE 13555
13474: GO 13476
13476: DISABLE
13477: LD_INT 0
13479: PPUSH
13480: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13481: LD_ADDR_VAR 0 2
13485: PUSH
13486: LD_INT 22
13488: PUSH
13489: LD_OWVAR 2
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PUSH
13498: LD_INT 21
13500: PUSH
13501: LD_INT 3
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: PUSH
13508: EMPTY
13509: LIST
13510: LIST
13511: PPUSH
13512: CALL_OW 69
13516: ST_TO_ADDR
// if not tmp then
13517: LD_VAR 0 2
13521: NOT
13522: IFFALSE 13526
// exit ;
13524: GO 13555
// for i in tmp do
13526: LD_ADDR_VAR 0 1
13530: PUSH
13531: LD_VAR 0 2
13535: PUSH
13536: FOR_IN
13537: IFFALSE 13553
// SetBLevel ( i , 10 ) ;
13539: LD_VAR 0 1
13543: PPUSH
13544: LD_INT 10
13546: PPUSH
13547: CALL_OW 241
13551: GO 13536
13553: POP
13554: POP
// end ;
13555: PPOPN 2
13557: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13558: LD_EXP 26
13562: IFFALSE 13570
13564: PUSH
13565: LD_EXP 43
13569: AND
13570: IFFALSE 13681
13572: GO 13574
13574: DISABLE
13575: LD_INT 0
13577: PPUSH
13578: PPUSH
13579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13580: LD_ADDR_VAR 0 3
13584: PUSH
13585: LD_INT 22
13587: PUSH
13588: LD_OWVAR 2
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: PUSH
13597: LD_INT 25
13599: PUSH
13600: LD_INT 1
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: PPUSH
13611: CALL_OW 69
13615: ST_TO_ADDR
// if not tmp then
13616: LD_VAR 0 3
13620: NOT
13621: IFFALSE 13625
// exit ;
13623: GO 13681
// un := tmp [ rand ( 1 , tmp ) ] ;
13625: LD_ADDR_VAR 0 2
13629: PUSH
13630: LD_VAR 0 3
13634: PUSH
13635: LD_INT 1
13637: PPUSH
13638: LD_VAR 0 3
13642: PPUSH
13643: CALL_OW 12
13647: ARRAY
13648: ST_TO_ADDR
// if Crawls ( un ) then
13649: LD_VAR 0 2
13653: PPUSH
13654: CALL_OW 318
13658: IFFALSE 13669
// ComWalk ( un ) ;
13660: LD_VAR 0 2
13664: PPUSH
13665: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13669: LD_VAR 0 2
13673: PPUSH
13674: LD_INT 5
13676: PPUSH
13677: CALL_OW 336
// end ;
13681: PPOPN 3
13683: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13684: LD_EXP 26
13688: IFFALSE 13696
13690: PUSH
13691: LD_EXP 44
13695: AND
13696: IFFALSE 13708
13698: PUSH
13699: LD_OWVAR 67
13703: PUSH
13704: LD_INT 4
13706: LESS
13707: AND
13708: IFFALSE 13727
13710: GO 13712
13712: DISABLE
// begin Difficulty := Difficulty + 1 ;
13713: LD_ADDR_OWVAR 67
13717: PUSH
13718: LD_OWVAR 67
13722: PUSH
13723: LD_INT 1
13725: PLUS
13726: ST_TO_ADDR
// end ;
13727: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13728: LD_EXP 26
13732: IFFALSE 13740
13734: PUSH
13735: LD_EXP 45
13739: AND
13740: IFFALSE 13843
13742: GO 13744
13744: DISABLE
13745: LD_INT 0
13747: PPUSH
// begin for i := 1 to 5 do
13748: LD_ADDR_VAR 0 1
13752: PUSH
13753: DOUBLE
13754: LD_INT 1
13756: DEC
13757: ST_TO_ADDR
13758: LD_INT 5
13760: PUSH
13761: FOR_TO
13762: IFFALSE 13841
// begin uc_nation := nation_nature ;
13764: LD_ADDR_OWVAR 21
13768: PUSH
13769: LD_INT 0
13771: ST_TO_ADDR
// uc_side := 0 ;
13772: LD_ADDR_OWVAR 20
13776: PUSH
13777: LD_INT 0
13779: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13780: LD_ADDR_OWVAR 29
13784: PUSH
13785: LD_INT 12
13787: PUSH
13788: LD_INT 12
13790: PUSH
13791: EMPTY
13792: LIST
13793: LIST
13794: ST_TO_ADDR
// hc_agressivity := 20 ;
13795: LD_ADDR_OWVAR 35
13799: PUSH
13800: LD_INT 20
13802: ST_TO_ADDR
// hc_class := class_tiger ;
13803: LD_ADDR_OWVAR 28
13807: PUSH
13808: LD_INT 14
13810: ST_TO_ADDR
// hc_gallery :=  ;
13811: LD_ADDR_OWVAR 33
13815: PUSH
13816: LD_STRING 
13818: ST_TO_ADDR
// hc_name :=  ;
13819: LD_ADDR_OWVAR 26
13823: PUSH
13824: LD_STRING 
13826: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13827: CALL_OW 44
13831: PPUSH
13832: LD_INT 0
13834: PPUSH
13835: CALL_OW 51
// end ;
13839: GO 13761
13841: POP
13842: POP
// end ;
13843: PPOPN 1
13845: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13846: LD_EXP 26
13850: IFFALSE 13858
13852: PUSH
13853: LD_EXP 46
13857: AND
13858: IFFALSE 13867
13860: GO 13862
13862: DISABLE
// StreamSibBomb ;
13863: CALL 13868 0 0
13867: END
// export function StreamSibBomb ; var i , x , y ; begin
13868: LD_INT 0
13870: PPUSH
13871: PPUSH
13872: PPUSH
13873: PPUSH
// result := false ;
13874: LD_ADDR_VAR 0 1
13878: PUSH
13879: LD_INT 0
13881: ST_TO_ADDR
// for i := 1 to 16 do
13882: LD_ADDR_VAR 0 2
13886: PUSH
13887: DOUBLE
13888: LD_INT 1
13890: DEC
13891: ST_TO_ADDR
13892: LD_INT 16
13894: PUSH
13895: FOR_TO
13896: IFFALSE 14095
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13898: LD_ADDR_VAR 0 3
13902: PUSH
13903: LD_INT 10
13905: PUSH
13906: LD_INT 20
13908: PUSH
13909: LD_INT 30
13911: PUSH
13912: LD_INT 40
13914: PUSH
13915: LD_INT 50
13917: PUSH
13918: LD_INT 60
13920: PUSH
13921: LD_INT 70
13923: PUSH
13924: LD_INT 80
13926: PUSH
13927: LD_INT 90
13929: PUSH
13930: LD_INT 100
13932: PUSH
13933: LD_INT 110
13935: PUSH
13936: LD_INT 120
13938: PUSH
13939: LD_INT 130
13941: PUSH
13942: LD_INT 140
13944: PUSH
13945: LD_INT 150
13947: PUSH
13948: EMPTY
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: PUSH
13965: LD_INT 1
13967: PPUSH
13968: LD_INT 15
13970: PPUSH
13971: CALL_OW 12
13975: ARRAY
13976: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13977: LD_ADDR_VAR 0 4
13981: PUSH
13982: LD_INT 10
13984: PUSH
13985: LD_INT 20
13987: PUSH
13988: LD_INT 30
13990: PUSH
13991: LD_INT 40
13993: PUSH
13994: LD_INT 50
13996: PUSH
13997: LD_INT 60
13999: PUSH
14000: LD_INT 70
14002: PUSH
14003: LD_INT 80
14005: PUSH
14006: LD_INT 90
14008: PUSH
14009: LD_INT 100
14011: PUSH
14012: LD_INT 110
14014: PUSH
14015: LD_INT 120
14017: PUSH
14018: LD_INT 130
14020: PUSH
14021: LD_INT 140
14023: PUSH
14024: LD_INT 150
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: PUSH
14044: LD_INT 1
14046: PPUSH
14047: LD_INT 15
14049: PPUSH
14050: CALL_OW 12
14054: ARRAY
14055: ST_TO_ADDR
// if ValidHex ( x , y ) then
14056: LD_VAR 0 3
14060: PPUSH
14061: LD_VAR 0 4
14065: PPUSH
14066: CALL_OW 488
14070: IFFALSE 14093
// begin result := [ x , y ] ;
14072: LD_ADDR_VAR 0 1
14076: PUSH
14077: LD_VAR 0 3
14081: PUSH
14082: LD_VAR 0 4
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: ST_TO_ADDR
// break ;
14091: GO 14095
// end ; end ;
14093: GO 13895
14095: POP
14096: POP
// if result then
14097: LD_VAR 0 1
14101: IFFALSE 14161
// begin ToLua ( playSibBomb() ) ;
14103: LD_STRING playSibBomb()
14105: PPUSH
14106: CALL_OW 559
// wait ( 0 0$14 ) ;
14110: LD_INT 490
14112: PPUSH
14113: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14117: LD_VAR 0 1
14121: PUSH
14122: LD_INT 1
14124: ARRAY
14125: PPUSH
14126: LD_VAR 0 1
14130: PUSH
14131: LD_INT 2
14133: ARRAY
14134: PPUSH
14135: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14139: LD_VAR 0 1
14143: PUSH
14144: LD_INT 1
14146: ARRAY
14147: PPUSH
14148: LD_VAR 0 1
14152: PUSH
14153: LD_INT 2
14155: ARRAY
14156: PPUSH
14157: CALL_OW 429
// end ; end ;
14161: LD_VAR 0 1
14165: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14166: LD_EXP 26
14170: IFFALSE 14178
14172: PUSH
14173: LD_EXP 48
14177: AND
14178: IFFALSE 14190
14180: GO 14182
14182: DISABLE
// YouLost (  ) ;
14183: LD_STRING 
14185: PPUSH
14186: CALL_OW 104
14190: END
// every 0 0$1 trigger StreamModeActive and sFog do
14191: LD_EXP 26
14195: IFFALSE 14203
14197: PUSH
14198: LD_EXP 47
14202: AND
14203: IFFALSE 14217
14205: GO 14207
14207: DISABLE
// FogOff ( your_side ) ;
14208: LD_OWVAR 2
14212: PPUSH
14213: CALL_OW 344
14217: END
// every 0 0$1 trigger StreamModeActive and sSun do
14218: LD_EXP 26
14222: IFFALSE 14230
14224: PUSH
14225: LD_EXP 49
14229: AND
14230: IFFALSE 14258
14232: GO 14234
14234: DISABLE
// begin solar_recharge_percent := 0 ;
14235: LD_ADDR_OWVAR 79
14239: PUSH
14240: LD_INT 0
14242: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14243: LD_INT 10500
14245: PPUSH
14246: CALL_OW 67
// solar_recharge_percent := 100 ;
14250: LD_ADDR_OWVAR 79
14254: PUSH
14255: LD_INT 100
14257: ST_TO_ADDR
// end ;
14258: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14259: LD_EXP 26
14263: IFFALSE 14271
14265: PUSH
14266: LD_EXP 50
14270: AND
14271: IFFALSE 14510
14273: GO 14275
14275: DISABLE
14276: LD_INT 0
14278: PPUSH
14279: PPUSH
14280: PPUSH
// begin tmp := [ ] ;
14281: LD_ADDR_VAR 0 3
14285: PUSH
14286: EMPTY
14287: ST_TO_ADDR
// for i := 1 to 6 do
14288: LD_ADDR_VAR 0 1
14292: PUSH
14293: DOUBLE
14294: LD_INT 1
14296: DEC
14297: ST_TO_ADDR
14298: LD_INT 6
14300: PUSH
14301: FOR_TO
14302: IFFALSE 14407
// begin uc_nation := nation_nature ;
14304: LD_ADDR_OWVAR 21
14308: PUSH
14309: LD_INT 0
14311: ST_TO_ADDR
// uc_side := 0 ;
14312: LD_ADDR_OWVAR 20
14316: PUSH
14317: LD_INT 0
14319: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14320: LD_ADDR_OWVAR 29
14324: PUSH
14325: LD_INT 12
14327: PUSH
14328: LD_INT 12
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: ST_TO_ADDR
// hc_agressivity := 20 ;
14335: LD_ADDR_OWVAR 35
14339: PUSH
14340: LD_INT 20
14342: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14343: LD_ADDR_OWVAR 28
14347: PUSH
14348: LD_INT 17
14350: ST_TO_ADDR
// hc_gallery :=  ;
14351: LD_ADDR_OWVAR 33
14355: PUSH
14356: LD_STRING 
14358: ST_TO_ADDR
// hc_name :=  ;
14359: LD_ADDR_OWVAR 26
14363: PUSH
14364: LD_STRING 
14366: ST_TO_ADDR
// un := CreateHuman ;
14367: LD_ADDR_VAR 0 2
14371: PUSH
14372: CALL_OW 44
14376: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14377: LD_VAR 0 2
14381: PPUSH
14382: LD_INT 1
14384: PPUSH
14385: CALL_OW 51
// tmp := tmp ^ un ;
14389: LD_ADDR_VAR 0 3
14393: PUSH
14394: LD_VAR 0 3
14398: PUSH
14399: LD_VAR 0 2
14403: ADD
14404: ST_TO_ADDR
// end ;
14405: GO 14301
14407: POP
14408: POP
// repeat wait ( 0 0$1 ) ;
14409: LD_INT 35
14411: PPUSH
14412: CALL_OW 67
// for un in tmp do
14416: LD_ADDR_VAR 0 2
14420: PUSH
14421: LD_VAR 0 3
14425: PUSH
14426: FOR_IN
14427: IFFALSE 14501
// begin if IsDead ( un ) then
14429: LD_VAR 0 2
14433: PPUSH
14434: CALL_OW 301
14438: IFFALSE 14458
// begin tmp := tmp diff un ;
14440: LD_ADDR_VAR 0 3
14444: PUSH
14445: LD_VAR 0 3
14449: PUSH
14450: LD_VAR 0 2
14454: DIFF
14455: ST_TO_ADDR
// continue ;
14456: GO 14426
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14458: LD_VAR 0 2
14462: PPUSH
14463: LD_INT 3
14465: PUSH
14466: LD_INT 22
14468: PUSH
14469: LD_INT 0
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: PPUSH
14480: CALL_OW 69
14484: PPUSH
14485: LD_VAR 0 2
14489: PPUSH
14490: CALL_OW 74
14494: PPUSH
14495: CALL_OW 115
// end ;
14499: GO 14426
14501: POP
14502: POP
// until not tmp ;
14503: LD_VAR 0 3
14507: NOT
14508: IFFALSE 14409
// end ;
14510: PPOPN 3
14512: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14513: LD_EXP 26
14517: IFFALSE 14525
14519: PUSH
14520: LD_EXP 51
14524: AND
14525: IFFALSE 14579
14527: GO 14529
14529: DISABLE
// begin ToLua ( displayTroll(); ) ;
14530: LD_STRING displayTroll();
14532: PPUSH
14533: CALL_OW 559
// wait ( 3 3$00 ) ;
14537: LD_INT 6300
14539: PPUSH
14540: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14544: LD_STRING hideTroll();
14546: PPUSH
14547: CALL_OW 559
// wait ( 1 1$00 ) ;
14551: LD_INT 2100
14553: PPUSH
14554: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14558: LD_STRING displayTroll();
14560: PPUSH
14561: CALL_OW 559
// wait ( 1 1$00 ) ;
14565: LD_INT 2100
14567: PPUSH
14568: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14572: LD_STRING hideTroll();
14574: PPUSH
14575: CALL_OW 559
// end ;
14579: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14580: LD_EXP 26
14584: IFFALSE 14592
14586: PUSH
14587: LD_EXP 52
14591: AND
14592: IFFALSE 14655
14594: GO 14596
14596: DISABLE
14597: LD_INT 0
14599: PPUSH
// begin p := 0 ;
14600: LD_ADDR_VAR 0 1
14604: PUSH
14605: LD_INT 0
14607: ST_TO_ADDR
// repeat game_speed := 1 ;
14608: LD_ADDR_OWVAR 65
14612: PUSH
14613: LD_INT 1
14615: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14616: LD_INT 35
14618: PPUSH
14619: CALL_OW 67
// p := p + 1 ;
14623: LD_ADDR_VAR 0 1
14627: PUSH
14628: LD_VAR 0 1
14632: PUSH
14633: LD_INT 1
14635: PLUS
14636: ST_TO_ADDR
// until p >= 60 ;
14637: LD_VAR 0 1
14641: PUSH
14642: LD_INT 60
14644: GREATEREQUAL
14645: IFFALSE 14608
// game_speed := 4 ;
14647: LD_ADDR_OWVAR 65
14651: PUSH
14652: LD_INT 4
14654: ST_TO_ADDR
// end ;
14655: PPOPN 1
14657: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14658: LD_EXP 26
14662: IFFALSE 14670
14664: PUSH
14665: LD_EXP 53
14669: AND
14670: IFFALSE 14816
14672: GO 14674
14674: DISABLE
14675: LD_INT 0
14677: PPUSH
14678: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14679: LD_ADDR_VAR 0 1
14683: PUSH
14684: LD_INT 22
14686: PUSH
14687: LD_OWVAR 2
14691: PUSH
14692: EMPTY
14693: LIST
14694: LIST
14695: PUSH
14696: LD_INT 2
14698: PUSH
14699: LD_INT 30
14701: PUSH
14702: LD_INT 0
14704: PUSH
14705: EMPTY
14706: LIST
14707: LIST
14708: PUSH
14709: LD_INT 30
14711: PUSH
14712: LD_INT 1
14714: PUSH
14715: EMPTY
14716: LIST
14717: LIST
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: LIST
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PPUSH
14728: CALL_OW 69
14732: ST_TO_ADDR
// if not depot then
14733: LD_VAR 0 1
14737: NOT
14738: IFFALSE 14742
// exit ;
14740: GO 14816
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14742: LD_ADDR_VAR 0 2
14746: PUSH
14747: LD_VAR 0 1
14751: PUSH
14752: LD_INT 1
14754: PPUSH
14755: LD_VAR 0 1
14759: PPUSH
14760: CALL_OW 12
14764: ARRAY
14765: PPUSH
14766: CALL_OW 274
14770: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14771: LD_VAR 0 2
14775: PPUSH
14776: LD_INT 1
14778: PPUSH
14779: LD_INT 0
14781: PPUSH
14782: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14786: LD_VAR 0 2
14790: PPUSH
14791: LD_INT 2
14793: PPUSH
14794: LD_INT 0
14796: PPUSH
14797: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14801: LD_VAR 0 2
14805: PPUSH
14806: LD_INT 3
14808: PPUSH
14809: LD_INT 0
14811: PPUSH
14812: CALL_OW 277
// end ;
14816: PPOPN 2
14818: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14819: LD_EXP 26
14823: IFFALSE 14831
14825: PUSH
14826: LD_EXP 54
14830: AND
14831: IFFALSE 14928
14833: GO 14835
14835: DISABLE
14836: LD_INT 0
14838: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14839: LD_ADDR_VAR 0 1
14843: PUSH
14844: LD_INT 22
14846: PUSH
14847: LD_OWVAR 2
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: LD_INT 21
14858: PUSH
14859: LD_INT 1
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: LD_INT 3
14868: PUSH
14869: LD_INT 23
14871: PUSH
14872: LD_INT 0
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: LIST
14887: PPUSH
14888: CALL_OW 69
14892: ST_TO_ADDR
// if not tmp then
14893: LD_VAR 0 1
14897: NOT
14898: IFFALSE 14902
// exit ;
14900: GO 14928
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14902: LD_VAR 0 1
14906: PUSH
14907: LD_INT 1
14909: PPUSH
14910: LD_VAR 0 1
14914: PPUSH
14915: CALL_OW 12
14919: ARRAY
14920: PPUSH
14921: LD_INT 200
14923: PPUSH
14924: CALL_OW 234
// end ;
14928: PPOPN 1
14930: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14931: LD_EXP 26
14935: IFFALSE 14943
14937: PUSH
14938: LD_EXP 55
14942: AND
14943: IFFALSE 15022
14945: GO 14947
14947: DISABLE
14948: LD_INT 0
14950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14951: LD_ADDR_VAR 0 1
14955: PUSH
14956: LD_INT 22
14958: PUSH
14959: LD_OWVAR 2
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: LD_INT 21
14970: PUSH
14971: LD_INT 2
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PPUSH
14982: CALL_OW 69
14986: ST_TO_ADDR
// if not tmp then
14987: LD_VAR 0 1
14991: NOT
14992: IFFALSE 14996
// exit ;
14994: GO 15022
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14996: LD_VAR 0 1
15000: PUSH
15001: LD_INT 1
15003: PPUSH
15004: LD_VAR 0 1
15008: PPUSH
15009: CALL_OW 12
15013: ARRAY
15014: PPUSH
15015: LD_INT 60
15017: PPUSH
15018: CALL_OW 234
// end ;
15022: PPOPN 1
15024: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15025: LD_EXP 26
15029: IFFALSE 15037
15031: PUSH
15032: LD_EXP 56
15036: AND
15037: IFFALSE 15136
15039: GO 15041
15041: DISABLE
15042: LD_INT 0
15044: PPUSH
15045: PPUSH
// begin enable ;
15046: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15047: LD_ADDR_VAR 0 1
15051: PUSH
15052: LD_INT 22
15054: PUSH
15055: LD_OWVAR 2
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: PUSH
15064: LD_INT 61
15066: PUSH
15067: EMPTY
15068: LIST
15069: PUSH
15070: LD_INT 33
15072: PUSH
15073: LD_INT 2
15075: PUSH
15076: EMPTY
15077: LIST
15078: LIST
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: LIST
15084: PPUSH
15085: CALL_OW 69
15089: ST_TO_ADDR
// if not tmp then
15090: LD_VAR 0 1
15094: NOT
15095: IFFALSE 15099
// exit ;
15097: GO 15136
// for i in tmp do
15099: LD_ADDR_VAR 0 2
15103: PUSH
15104: LD_VAR 0 1
15108: PUSH
15109: FOR_IN
15110: IFFALSE 15134
// if IsControledBy ( i ) then
15112: LD_VAR 0 2
15116: PPUSH
15117: CALL_OW 312
15121: IFFALSE 15132
// ComUnlink ( i ) ;
15123: LD_VAR 0 2
15127: PPUSH
15128: CALL_OW 136
15132: GO 15109
15134: POP
15135: POP
// end ;
15136: PPOPN 2
15138: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15139: LD_EXP 26
15143: IFFALSE 15151
15145: PUSH
15146: LD_EXP 57
15150: AND
15151: IFFALSE 15291
15153: GO 15155
15155: DISABLE
15156: LD_INT 0
15158: PPUSH
15159: PPUSH
// begin ToLua ( displayPowell(); ) ;
15160: LD_STRING displayPowell();
15162: PPUSH
15163: CALL_OW 559
// uc_side := 0 ;
15167: LD_ADDR_OWVAR 20
15171: PUSH
15172: LD_INT 0
15174: ST_TO_ADDR
// uc_nation := 2 ;
15175: LD_ADDR_OWVAR 21
15179: PUSH
15180: LD_INT 2
15182: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15183: LD_ADDR_OWVAR 37
15187: PUSH
15188: LD_INT 14
15190: ST_TO_ADDR
// vc_engine := engine_siberite ;
15191: LD_ADDR_OWVAR 39
15195: PUSH
15196: LD_INT 3
15198: ST_TO_ADDR
// vc_control := control_apeman ;
15199: LD_ADDR_OWVAR 38
15203: PUSH
15204: LD_INT 5
15206: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15207: LD_ADDR_OWVAR 40
15211: PUSH
15212: LD_INT 29
15214: ST_TO_ADDR
// un := CreateVehicle ;
15215: LD_ADDR_VAR 0 2
15219: PUSH
15220: CALL_OW 45
15224: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15225: LD_VAR 0 2
15229: PPUSH
15230: LD_INT 1
15232: PPUSH
15233: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15237: LD_INT 35
15239: PPUSH
15240: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15244: LD_VAR 0 2
15248: PPUSH
15249: LD_INT 22
15251: PUSH
15252: LD_OWVAR 2
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PPUSH
15261: CALL_OW 69
15265: PPUSH
15266: LD_VAR 0 2
15270: PPUSH
15271: CALL_OW 74
15275: PPUSH
15276: CALL_OW 115
// until IsDead ( un ) ;
15280: LD_VAR 0 2
15284: PPUSH
15285: CALL_OW 301
15289: IFFALSE 15237
// end ;
15291: PPOPN 2
15293: END
// every 0 0$1 trigger StreamModeActive and sStu do
15294: LD_EXP 26
15298: IFFALSE 15306
15300: PUSH
15301: LD_EXP 65
15305: AND
15306: IFFALSE 15322
15308: GO 15310
15310: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15311: LD_STRING displayStucuk();
15313: PPUSH
15314: CALL_OW 559
// ResetFog ;
15318: CALL_OW 335
// end ;
15322: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15323: LD_EXP 26
15327: IFFALSE 15335
15329: PUSH
15330: LD_EXP 58
15334: AND
15335: IFFALSE 15476
15337: GO 15339
15339: DISABLE
15340: LD_INT 0
15342: PPUSH
15343: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15344: LD_ADDR_VAR 0 2
15348: PUSH
15349: LD_INT 22
15351: PUSH
15352: LD_OWVAR 2
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: PUSH
15361: LD_INT 21
15363: PUSH
15364: LD_INT 1
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: PPUSH
15375: CALL_OW 69
15379: ST_TO_ADDR
// if not tmp then
15380: LD_VAR 0 2
15384: NOT
15385: IFFALSE 15389
// exit ;
15387: GO 15476
// un := tmp [ rand ( 1 , tmp ) ] ;
15389: LD_ADDR_VAR 0 1
15393: PUSH
15394: LD_VAR 0 2
15398: PUSH
15399: LD_INT 1
15401: PPUSH
15402: LD_VAR 0 2
15406: PPUSH
15407: CALL_OW 12
15411: ARRAY
15412: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15413: LD_VAR 0 1
15417: PPUSH
15418: LD_INT 0
15420: PPUSH
15421: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15425: LD_VAR 0 1
15429: PPUSH
15430: LD_OWVAR 3
15434: PUSH
15435: LD_VAR 0 1
15439: DIFF
15440: PPUSH
15441: LD_VAR 0 1
15445: PPUSH
15446: CALL_OW 74
15450: PPUSH
15451: CALL_OW 115
// wait ( 0 0$20 ) ;
15455: LD_INT 700
15457: PPUSH
15458: CALL_OW 67
// SetSide ( un , your_side ) ;
15462: LD_VAR 0 1
15466: PPUSH
15467: LD_OWVAR 2
15471: PPUSH
15472: CALL_OW 235
// end ;
15476: PPOPN 2
15478: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15479: LD_EXP 26
15483: IFFALSE 15491
15485: PUSH
15486: LD_EXP 59
15490: AND
15491: IFFALSE 15597
15493: GO 15495
15495: DISABLE
15496: LD_INT 0
15498: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15499: LD_ADDR_VAR 0 1
15503: PUSH
15504: LD_INT 22
15506: PUSH
15507: LD_OWVAR 2
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: LD_INT 2
15518: PUSH
15519: LD_INT 30
15521: PUSH
15522: LD_INT 0
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: PUSH
15529: LD_INT 30
15531: PUSH
15532: LD_INT 1
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: PUSH
15539: EMPTY
15540: LIST
15541: LIST
15542: LIST
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: PPUSH
15548: CALL_OW 69
15552: ST_TO_ADDR
// if not depot then
15553: LD_VAR 0 1
15557: NOT
15558: IFFALSE 15562
// exit ;
15560: GO 15597
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15562: LD_VAR 0 1
15566: PUSH
15567: LD_INT 1
15569: ARRAY
15570: PPUSH
15571: CALL_OW 250
15575: PPUSH
15576: LD_VAR 0 1
15580: PUSH
15581: LD_INT 1
15583: ARRAY
15584: PPUSH
15585: CALL_OW 251
15589: PPUSH
15590: LD_INT 70
15592: PPUSH
15593: CALL_OW 495
// end ;
15597: PPOPN 1
15599: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15600: LD_EXP 26
15604: IFFALSE 15612
15606: PUSH
15607: LD_EXP 60
15611: AND
15612: IFFALSE 15823
15614: GO 15616
15616: DISABLE
15617: LD_INT 0
15619: PPUSH
15620: PPUSH
15621: PPUSH
15622: PPUSH
15623: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15624: LD_ADDR_VAR 0 5
15628: PUSH
15629: LD_INT 22
15631: PUSH
15632: LD_OWVAR 2
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: PUSH
15641: LD_INT 21
15643: PUSH
15644: LD_INT 1
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: PPUSH
15655: CALL_OW 69
15659: ST_TO_ADDR
// if not tmp then
15660: LD_VAR 0 5
15664: NOT
15665: IFFALSE 15669
// exit ;
15667: GO 15823
// for i in tmp do
15669: LD_ADDR_VAR 0 1
15673: PUSH
15674: LD_VAR 0 5
15678: PUSH
15679: FOR_IN
15680: IFFALSE 15821
// begin d := rand ( 0 , 5 ) ;
15682: LD_ADDR_VAR 0 4
15686: PUSH
15687: LD_INT 0
15689: PPUSH
15690: LD_INT 5
15692: PPUSH
15693: CALL_OW 12
15697: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15698: LD_ADDR_VAR 0 2
15702: PUSH
15703: LD_VAR 0 1
15707: PPUSH
15708: CALL_OW 250
15712: PPUSH
15713: LD_VAR 0 4
15717: PPUSH
15718: LD_INT 3
15720: PPUSH
15721: LD_INT 12
15723: PPUSH
15724: CALL_OW 12
15728: PPUSH
15729: CALL_OW 272
15733: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15734: LD_ADDR_VAR 0 3
15738: PUSH
15739: LD_VAR 0 1
15743: PPUSH
15744: CALL_OW 251
15748: PPUSH
15749: LD_VAR 0 4
15753: PPUSH
15754: LD_INT 3
15756: PPUSH
15757: LD_INT 12
15759: PPUSH
15760: CALL_OW 12
15764: PPUSH
15765: CALL_OW 273
15769: ST_TO_ADDR
// if ValidHex ( x , y ) then
15770: LD_VAR 0 2
15774: PPUSH
15775: LD_VAR 0 3
15779: PPUSH
15780: CALL_OW 488
15784: IFFALSE 15819
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15786: LD_VAR 0 1
15790: PPUSH
15791: LD_VAR 0 2
15795: PPUSH
15796: LD_VAR 0 3
15800: PPUSH
15801: LD_INT 3
15803: PPUSH
15804: LD_INT 6
15806: PPUSH
15807: CALL_OW 12
15811: PPUSH
15812: LD_INT 1
15814: PPUSH
15815: CALL_OW 483
// end ;
15819: GO 15679
15821: POP
15822: POP
// end ;
15823: PPOPN 5
15825: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15826: LD_EXP 26
15830: IFFALSE 15838
15832: PUSH
15833: LD_EXP 61
15837: AND
15838: IFFALSE 15932
15840: GO 15842
15842: DISABLE
15843: LD_INT 0
15845: PPUSH
15846: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15847: LD_ADDR_VAR 0 2
15851: PUSH
15852: LD_INT 22
15854: PUSH
15855: LD_OWVAR 2
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: PUSH
15864: LD_INT 32
15866: PUSH
15867: LD_INT 1
15869: PUSH
15870: EMPTY
15871: LIST
15872: LIST
15873: PUSH
15874: LD_INT 21
15876: PUSH
15877: LD_INT 2
15879: PUSH
15880: EMPTY
15881: LIST
15882: LIST
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: LIST
15888: PPUSH
15889: CALL_OW 69
15893: ST_TO_ADDR
// if not tmp then
15894: LD_VAR 0 2
15898: NOT
15899: IFFALSE 15903
// exit ;
15901: GO 15932
// for i in tmp do
15903: LD_ADDR_VAR 0 1
15907: PUSH
15908: LD_VAR 0 2
15912: PUSH
15913: FOR_IN
15914: IFFALSE 15930
// SetFuel ( i , 0 ) ;
15916: LD_VAR 0 1
15920: PPUSH
15921: LD_INT 0
15923: PPUSH
15924: CALL_OW 240
15928: GO 15913
15930: POP
15931: POP
// end ;
15932: PPOPN 2
15934: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15935: LD_EXP 26
15939: IFFALSE 15947
15941: PUSH
15942: LD_EXP 62
15946: AND
15947: IFFALSE 16013
15949: GO 15951
15951: DISABLE
15952: LD_INT 0
15954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15955: LD_ADDR_VAR 0 1
15959: PUSH
15960: LD_INT 22
15962: PUSH
15963: LD_OWVAR 2
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: LD_INT 30
15974: PUSH
15975: LD_INT 29
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: PUSH
15982: EMPTY
15983: LIST
15984: LIST
15985: PPUSH
15986: CALL_OW 69
15990: ST_TO_ADDR
// if not tmp then
15991: LD_VAR 0 1
15995: NOT
15996: IFFALSE 16000
// exit ;
15998: GO 16013
// DestroyUnit ( tmp [ 1 ] ) ;
16000: LD_VAR 0 1
16004: PUSH
16005: LD_INT 1
16007: ARRAY
16008: PPUSH
16009: CALL_OW 65
// end ;
16013: PPOPN 1
16015: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16016: LD_EXP 26
16020: IFFALSE 16028
16022: PUSH
16023: LD_EXP 64
16027: AND
16028: IFFALSE 16157
16030: GO 16032
16032: DISABLE
16033: LD_INT 0
16035: PPUSH
// begin uc_side := 0 ;
16036: LD_ADDR_OWVAR 20
16040: PUSH
16041: LD_INT 0
16043: ST_TO_ADDR
// uc_nation := nation_arabian ;
16044: LD_ADDR_OWVAR 21
16048: PUSH
16049: LD_INT 2
16051: ST_TO_ADDR
// hc_gallery :=  ;
16052: LD_ADDR_OWVAR 33
16056: PUSH
16057: LD_STRING 
16059: ST_TO_ADDR
// hc_name :=  ;
16060: LD_ADDR_OWVAR 26
16064: PUSH
16065: LD_STRING 
16067: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16068: LD_INT 1
16070: PPUSH
16071: LD_INT 11
16073: PPUSH
16074: LD_INT 10
16076: PPUSH
16077: CALL_OW 380
// un := CreateHuman ;
16081: LD_ADDR_VAR 0 1
16085: PUSH
16086: CALL_OW 44
16090: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16091: LD_VAR 0 1
16095: PPUSH
16096: LD_INT 1
16098: PPUSH
16099: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16103: LD_INT 35
16105: PPUSH
16106: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16110: LD_VAR 0 1
16114: PPUSH
16115: LD_INT 22
16117: PUSH
16118: LD_OWVAR 2
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: PPUSH
16127: CALL_OW 69
16131: PPUSH
16132: LD_VAR 0 1
16136: PPUSH
16137: CALL_OW 74
16141: PPUSH
16142: CALL_OW 115
// until IsDead ( un ) ;
16146: LD_VAR 0 1
16150: PPUSH
16151: CALL_OW 301
16155: IFFALSE 16103
// end ;
16157: PPOPN 1
16159: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16160: LD_EXP 26
16164: IFFALSE 16172
16166: PUSH
16167: LD_EXP 66
16171: AND
16172: IFFALSE 16184
16174: GO 16176
16176: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16177: LD_STRING earthquake(getX(game), 0, 32)
16179: PPUSH
16180: CALL_OW 559
16184: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16185: LD_EXP 26
16189: IFFALSE 16197
16191: PUSH
16192: LD_EXP 67
16196: AND
16197: IFFALSE 16288
16199: GO 16201
16201: DISABLE
16202: LD_INT 0
16204: PPUSH
// begin enable ;
16205: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16206: LD_ADDR_VAR 0 1
16210: PUSH
16211: LD_INT 22
16213: PUSH
16214: LD_OWVAR 2
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: PUSH
16223: LD_INT 21
16225: PUSH
16226: LD_INT 2
16228: PUSH
16229: EMPTY
16230: LIST
16231: LIST
16232: PUSH
16233: LD_INT 33
16235: PUSH
16236: LD_INT 3
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: LIST
16247: PPUSH
16248: CALL_OW 69
16252: ST_TO_ADDR
// if not tmp then
16253: LD_VAR 0 1
16257: NOT
16258: IFFALSE 16262
// exit ;
16260: GO 16288
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16262: LD_VAR 0 1
16266: PUSH
16267: LD_INT 1
16269: PPUSH
16270: LD_VAR 0 1
16274: PPUSH
16275: CALL_OW 12
16279: ARRAY
16280: PPUSH
16281: LD_INT 1
16283: PPUSH
16284: CALL_OW 234
// end ;
16288: PPOPN 1
16290: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16291: LD_EXP 26
16295: IFFALSE 16303
16297: PUSH
16298: LD_EXP 68
16302: AND
16303: IFFALSE 16444
16305: GO 16307
16307: DISABLE
16308: LD_INT 0
16310: PPUSH
16311: PPUSH
16312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16313: LD_ADDR_VAR 0 3
16317: PUSH
16318: LD_INT 22
16320: PUSH
16321: LD_OWVAR 2
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: LD_INT 25
16332: PUSH
16333: LD_INT 1
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: PPUSH
16344: CALL_OW 69
16348: ST_TO_ADDR
// if not tmp then
16349: LD_VAR 0 3
16353: NOT
16354: IFFALSE 16358
// exit ;
16356: GO 16444
// un := tmp [ rand ( 1 , tmp ) ] ;
16358: LD_ADDR_VAR 0 2
16362: PUSH
16363: LD_VAR 0 3
16367: PUSH
16368: LD_INT 1
16370: PPUSH
16371: LD_VAR 0 3
16375: PPUSH
16376: CALL_OW 12
16380: ARRAY
16381: ST_TO_ADDR
// if Crawls ( un ) then
16382: LD_VAR 0 2
16386: PPUSH
16387: CALL_OW 318
16391: IFFALSE 16402
// ComWalk ( un ) ;
16393: LD_VAR 0 2
16397: PPUSH
16398: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16402: LD_VAR 0 2
16406: PPUSH
16407: LD_INT 9
16409: PPUSH
16410: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16414: LD_INT 28
16416: PPUSH
16417: LD_OWVAR 2
16421: PPUSH
16422: LD_INT 2
16424: PPUSH
16425: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16429: LD_INT 29
16431: PPUSH
16432: LD_OWVAR 2
16436: PPUSH
16437: LD_INT 2
16439: PPUSH
16440: CALL_OW 322
// end ;
16444: PPOPN 3
16446: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16447: LD_EXP 26
16451: IFFALSE 16459
16453: PUSH
16454: LD_EXP 69
16458: AND
16459: IFFALSE 16570
16461: GO 16463
16463: DISABLE
16464: LD_INT 0
16466: PPUSH
16467: PPUSH
16468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16469: LD_ADDR_VAR 0 3
16473: PUSH
16474: LD_INT 22
16476: PUSH
16477: LD_OWVAR 2
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 25
16488: PUSH
16489: LD_INT 1
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PPUSH
16500: CALL_OW 69
16504: ST_TO_ADDR
// if not tmp then
16505: LD_VAR 0 3
16509: NOT
16510: IFFALSE 16514
// exit ;
16512: GO 16570
// un := tmp [ rand ( 1 , tmp ) ] ;
16514: LD_ADDR_VAR 0 2
16518: PUSH
16519: LD_VAR 0 3
16523: PUSH
16524: LD_INT 1
16526: PPUSH
16527: LD_VAR 0 3
16531: PPUSH
16532: CALL_OW 12
16536: ARRAY
16537: ST_TO_ADDR
// if Crawls ( un ) then
16538: LD_VAR 0 2
16542: PPUSH
16543: CALL_OW 318
16547: IFFALSE 16558
// ComWalk ( un ) ;
16549: LD_VAR 0 2
16553: PPUSH
16554: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16558: LD_VAR 0 2
16562: PPUSH
16563: LD_INT 8
16565: PPUSH
16566: CALL_OW 336
// end ;
16570: PPOPN 3
16572: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16573: LD_EXP 26
16577: IFFALSE 16585
16579: PUSH
16580: LD_EXP 70
16584: AND
16585: IFFALSE 16729
16587: GO 16589
16589: DISABLE
16590: LD_INT 0
16592: PPUSH
16593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16594: LD_ADDR_VAR 0 2
16598: PUSH
16599: LD_INT 22
16601: PUSH
16602: LD_OWVAR 2
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: PUSH
16611: LD_INT 21
16613: PUSH
16614: LD_INT 2
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: PUSH
16621: LD_INT 2
16623: PUSH
16624: LD_INT 34
16626: PUSH
16627: LD_INT 12
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: PUSH
16634: LD_INT 34
16636: PUSH
16637: LD_INT 51
16639: PUSH
16640: EMPTY
16641: LIST
16642: LIST
16643: PUSH
16644: LD_INT 34
16646: PUSH
16647: LD_INT 32
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: PUSH
16660: EMPTY
16661: LIST
16662: LIST
16663: LIST
16664: PPUSH
16665: CALL_OW 69
16669: ST_TO_ADDR
// if not tmp then
16670: LD_VAR 0 2
16674: NOT
16675: IFFALSE 16679
// exit ;
16677: GO 16729
// for i in tmp do
16679: LD_ADDR_VAR 0 1
16683: PUSH
16684: LD_VAR 0 2
16688: PUSH
16689: FOR_IN
16690: IFFALSE 16727
// if GetCargo ( i , mat_artifact ) = 0 then
16692: LD_VAR 0 1
16696: PPUSH
16697: LD_INT 4
16699: PPUSH
16700: CALL_OW 289
16704: PUSH
16705: LD_INT 0
16707: EQUAL
16708: IFFALSE 16725
// SetCargo ( i , mat_siberit , 100 ) ;
16710: LD_VAR 0 1
16714: PPUSH
16715: LD_INT 3
16717: PPUSH
16718: LD_INT 100
16720: PPUSH
16721: CALL_OW 290
16725: GO 16689
16727: POP
16728: POP
// end ;
16729: PPOPN 2
16731: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16732: LD_EXP 26
16736: IFFALSE 16744
16738: PUSH
16739: LD_EXP 71
16743: AND
16744: IFFALSE 16927
16746: GO 16748
16748: DISABLE
16749: LD_INT 0
16751: PPUSH
16752: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16753: LD_ADDR_VAR 0 2
16757: PUSH
16758: LD_INT 22
16760: PUSH
16761: LD_OWVAR 2
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: PPUSH
16770: CALL_OW 69
16774: ST_TO_ADDR
// if not tmp then
16775: LD_VAR 0 2
16779: NOT
16780: IFFALSE 16784
// exit ;
16782: GO 16927
// for i := 1 to 2 do
16784: LD_ADDR_VAR 0 1
16788: PUSH
16789: DOUBLE
16790: LD_INT 1
16792: DEC
16793: ST_TO_ADDR
16794: LD_INT 2
16796: PUSH
16797: FOR_TO
16798: IFFALSE 16925
// begin uc_side := your_side ;
16800: LD_ADDR_OWVAR 20
16804: PUSH
16805: LD_OWVAR 2
16809: ST_TO_ADDR
// uc_nation := nation_american ;
16810: LD_ADDR_OWVAR 21
16814: PUSH
16815: LD_INT 1
16817: ST_TO_ADDR
// vc_chassis := us_morphling ;
16818: LD_ADDR_OWVAR 37
16822: PUSH
16823: LD_INT 5
16825: ST_TO_ADDR
// vc_engine := engine_siberite ;
16826: LD_ADDR_OWVAR 39
16830: PUSH
16831: LD_INT 3
16833: ST_TO_ADDR
// vc_control := control_computer ;
16834: LD_ADDR_OWVAR 38
16838: PUSH
16839: LD_INT 3
16841: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16842: LD_ADDR_OWVAR 40
16846: PUSH
16847: LD_INT 10
16849: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16850: LD_VAR 0 2
16854: PUSH
16855: LD_INT 1
16857: ARRAY
16858: PPUSH
16859: CALL_OW 310
16863: NOT
16864: IFFALSE 16911
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16866: CALL_OW 45
16870: PPUSH
16871: LD_VAR 0 2
16875: PUSH
16876: LD_INT 1
16878: ARRAY
16879: PPUSH
16880: CALL_OW 250
16884: PPUSH
16885: LD_VAR 0 2
16889: PUSH
16890: LD_INT 1
16892: ARRAY
16893: PPUSH
16894: CALL_OW 251
16898: PPUSH
16899: LD_INT 12
16901: PPUSH
16902: LD_INT 1
16904: PPUSH
16905: CALL_OW 50
16909: GO 16923
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16911: CALL_OW 45
16915: PPUSH
16916: LD_INT 1
16918: PPUSH
16919: CALL_OW 51
// end ;
16923: GO 16797
16925: POP
16926: POP
// end ;
16927: PPOPN 2
16929: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16930: LD_EXP 26
16934: IFFALSE 16942
16936: PUSH
16937: LD_EXP 72
16941: AND
16942: IFFALSE 17164
16944: GO 16946
16946: DISABLE
16947: LD_INT 0
16949: PPUSH
16950: PPUSH
16951: PPUSH
16952: PPUSH
16953: PPUSH
16954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16955: LD_ADDR_VAR 0 6
16959: PUSH
16960: LD_INT 22
16962: PUSH
16963: LD_OWVAR 2
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: PUSH
16972: LD_INT 21
16974: PUSH
16975: LD_INT 1
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: PUSH
16982: LD_INT 3
16984: PUSH
16985: LD_INT 23
16987: PUSH
16988: LD_INT 0
16990: PUSH
16991: EMPTY
16992: LIST
16993: LIST
16994: PUSH
16995: EMPTY
16996: LIST
16997: LIST
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: LIST
17003: PPUSH
17004: CALL_OW 69
17008: ST_TO_ADDR
// if not tmp then
17009: LD_VAR 0 6
17013: NOT
17014: IFFALSE 17018
// exit ;
17016: GO 17164
// s1 := rand ( 1 , 4 ) ;
17018: LD_ADDR_VAR 0 2
17022: PUSH
17023: LD_INT 1
17025: PPUSH
17026: LD_INT 4
17028: PPUSH
17029: CALL_OW 12
17033: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17034: LD_ADDR_VAR 0 4
17038: PUSH
17039: LD_VAR 0 6
17043: PUSH
17044: LD_INT 1
17046: ARRAY
17047: PPUSH
17048: LD_VAR 0 2
17052: PPUSH
17053: CALL_OW 259
17057: ST_TO_ADDR
// if s1 = 1 then
17058: LD_VAR 0 2
17062: PUSH
17063: LD_INT 1
17065: EQUAL
17066: IFFALSE 17086
// s2 := rand ( 2 , 4 ) else
17068: LD_ADDR_VAR 0 3
17072: PUSH
17073: LD_INT 2
17075: PPUSH
17076: LD_INT 4
17078: PPUSH
17079: CALL_OW 12
17083: ST_TO_ADDR
17084: GO 17094
// s2 := 1 ;
17086: LD_ADDR_VAR 0 3
17090: PUSH
17091: LD_INT 1
17093: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17094: LD_ADDR_VAR 0 5
17098: PUSH
17099: LD_VAR 0 6
17103: PUSH
17104: LD_INT 1
17106: ARRAY
17107: PPUSH
17108: LD_VAR 0 3
17112: PPUSH
17113: CALL_OW 259
17117: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17118: LD_VAR 0 6
17122: PUSH
17123: LD_INT 1
17125: ARRAY
17126: PPUSH
17127: LD_VAR 0 2
17131: PPUSH
17132: LD_VAR 0 5
17136: PPUSH
17137: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17141: LD_VAR 0 6
17145: PUSH
17146: LD_INT 1
17148: ARRAY
17149: PPUSH
17150: LD_VAR 0 3
17154: PPUSH
17155: LD_VAR 0 4
17159: PPUSH
17160: CALL_OW 237
// end ;
17164: PPOPN 6
17166: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17167: LD_EXP 26
17171: IFFALSE 17179
17173: PUSH
17174: LD_EXP 73
17178: AND
17179: IFFALSE 17258
17181: GO 17183
17183: DISABLE
17184: LD_INT 0
17186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17187: LD_ADDR_VAR 0 1
17191: PUSH
17192: LD_INT 22
17194: PUSH
17195: LD_OWVAR 2
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: LD_INT 30
17206: PUSH
17207: LD_INT 3
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: PPUSH
17218: CALL_OW 69
17222: ST_TO_ADDR
// if not tmp then
17223: LD_VAR 0 1
17227: NOT
17228: IFFALSE 17232
// exit ;
17230: GO 17258
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17232: LD_VAR 0 1
17236: PUSH
17237: LD_INT 1
17239: PPUSH
17240: LD_VAR 0 1
17244: PPUSH
17245: CALL_OW 12
17249: ARRAY
17250: PPUSH
17251: LD_INT 1
17253: PPUSH
17254: CALL_OW 234
// end ;
17258: PPOPN 1
17260: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17261: LD_EXP 26
17265: IFFALSE 17273
17267: PUSH
17268: LD_EXP 74
17272: AND
17273: IFFALSE 17385
17275: GO 17277
17277: DISABLE
17278: LD_INT 0
17280: PPUSH
17281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17282: LD_ADDR_VAR 0 2
17286: PUSH
17287: LD_INT 22
17289: PUSH
17290: LD_OWVAR 2
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PUSH
17299: LD_INT 2
17301: PUSH
17302: LD_INT 30
17304: PUSH
17305: LD_INT 27
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PUSH
17312: LD_INT 30
17314: PUSH
17315: LD_INT 26
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: PUSH
17322: LD_INT 30
17324: PUSH
17325: LD_INT 28
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PPUSH
17342: CALL_OW 69
17346: ST_TO_ADDR
// if not tmp then
17347: LD_VAR 0 2
17351: NOT
17352: IFFALSE 17356
// exit ;
17354: GO 17385
// for i in tmp do
17356: LD_ADDR_VAR 0 1
17360: PUSH
17361: LD_VAR 0 2
17365: PUSH
17366: FOR_IN
17367: IFFALSE 17383
// SetLives ( i , 1 ) ;
17369: LD_VAR 0 1
17373: PPUSH
17374: LD_INT 1
17376: PPUSH
17377: CALL_OW 234
17381: GO 17366
17383: POP
17384: POP
// end ;
17385: PPOPN 2
17387: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17388: LD_EXP 26
17392: IFFALSE 17400
17394: PUSH
17395: LD_EXP 75
17399: AND
17400: IFFALSE 17687
17402: GO 17404
17404: DISABLE
17405: LD_INT 0
17407: PPUSH
17408: PPUSH
17409: PPUSH
// begin i := rand ( 1 , 7 ) ;
17410: LD_ADDR_VAR 0 1
17414: PUSH
17415: LD_INT 1
17417: PPUSH
17418: LD_INT 7
17420: PPUSH
17421: CALL_OW 12
17425: ST_TO_ADDR
// case i of 1 :
17426: LD_VAR 0 1
17430: PUSH
17431: LD_INT 1
17433: DOUBLE
17434: EQUAL
17435: IFTRUE 17439
17437: GO 17449
17439: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17440: LD_STRING earthquake(getX(game), 0, 32)
17442: PPUSH
17443: CALL_OW 559
17447: GO 17687
17449: LD_INT 2
17451: DOUBLE
17452: EQUAL
17453: IFTRUE 17457
17455: GO 17471
17457: POP
// begin ToLua ( displayStucuk(); ) ;
17458: LD_STRING displayStucuk();
17460: PPUSH
17461: CALL_OW 559
// ResetFog ;
17465: CALL_OW 335
// end ; 3 :
17469: GO 17687
17471: LD_INT 3
17473: DOUBLE
17474: EQUAL
17475: IFTRUE 17479
17477: GO 17583
17479: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17480: LD_ADDR_VAR 0 2
17484: PUSH
17485: LD_INT 22
17487: PUSH
17488: LD_OWVAR 2
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PUSH
17497: LD_INT 25
17499: PUSH
17500: LD_INT 1
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: PPUSH
17511: CALL_OW 69
17515: ST_TO_ADDR
// if not tmp then
17516: LD_VAR 0 2
17520: NOT
17521: IFFALSE 17525
// exit ;
17523: GO 17687
// un := tmp [ rand ( 1 , tmp ) ] ;
17525: LD_ADDR_VAR 0 3
17529: PUSH
17530: LD_VAR 0 2
17534: PUSH
17535: LD_INT 1
17537: PPUSH
17538: LD_VAR 0 2
17542: PPUSH
17543: CALL_OW 12
17547: ARRAY
17548: ST_TO_ADDR
// if Crawls ( un ) then
17549: LD_VAR 0 3
17553: PPUSH
17554: CALL_OW 318
17558: IFFALSE 17569
// ComWalk ( un ) ;
17560: LD_VAR 0 3
17564: PPUSH
17565: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17569: LD_VAR 0 3
17573: PPUSH
17574: LD_INT 8
17576: PPUSH
17577: CALL_OW 336
// end ; 4 :
17581: GO 17687
17583: LD_INT 4
17585: DOUBLE
17586: EQUAL
17587: IFTRUE 17591
17589: GO 17665
17591: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17592: LD_ADDR_VAR 0 2
17596: PUSH
17597: LD_INT 22
17599: PUSH
17600: LD_OWVAR 2
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PUSH
17609: LD_INT 30
17611: PUSH
17612: LD_INT 29
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: PPUSH
17623: CALL_OW 69
17627: ST_TO_ADDR
// if not tmp then
17628: LD_VAR 0 2
17632: NOT
17633: IFFALSE 17637
// exit ;
17635: GO 17687
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17637: LD_VAR 0 2
17641: PUSH
17642: LD_INT 1
17644: ARRAY
17645: PPUSH
17646: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17650: LD_VAR 0 2
17654: PUSH
17655: LD_INT 1
17657: ARRAY
17658: PPUSH
17659: CALL_OW 65
// end ; 5 .. 7 :
17663: GO 17687
17665: LD_INT 5
17667: DOUBLE
17668: GREATEREQUAL
17669: IFFALSE 17677
17671: LD_INT 7
17673: DOUBLE
17674: LESSEQUAL
17675: IFTRUE 17679
17677: GO 17686
17679: POP
// StreamSibBomb ; end ;
17680: CALL 13868 0 0
17684: GO 17687
17686: POP
// end ;
17687: PPOPN 3
17689: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17690: LD_EXP 26
17694: IFFALSE 17702
17696: PUSH
17697: LD_EXP 76
17701: AND
17702: IFFALSE 17858
17704: GO 17706
17706: DISABLE
17707: LD_INT 0
17709: PPUSH
17710: PPUSH
17711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17712: LD_ADDR_VAR 0 2
17716: PUSH
17717: LD_INT 81
17719: PUSH
17720: LD_OWVAR 2
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: PUSH
17729: LD_INT 2
17731: PUSH
17732: LD_INT 21
17734: PUSH
17735: LD_INT 1
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PUSH
17742: LD_INT 21
17744: PUSH
17745: LD_INT 2
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: LIST
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PPUSH
17761: CALL_OW 69
17765: ST_TO_ADDR
// if not tmp then
17766: LD_VAR 0 2
17770: NOT
17771: IFFALSE 17775
// exit ;
17773: GO 17858
// p := 0 ;
17775: LD_ADDR_VAR 0 3
17779: PUSH
17780: LD_INT 0
17782: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17783: LD_INT 35
17785: PPUSH
17786: CALL_OW 67
// p := p + 1 ;
17790: LD_ADDR_VAR 0 3
17794: PUSH
17795: LD_VAR 0 3
17799: PUSH
17800: LD_INT 1
17802: PLUS
17803: ST_TO_ADDR
// for i in tmp do
17804: LD_ADDR_VAR 0 1
17808: PUSH
17809: LD_VAR 0 2
17813: PUSH
17814: FOR_IN
17815: IFFALSE 17846
// if GetLives ( i ) < 1000 then
17817: LD_VAR 0 1
17821: PPUSH
17822: CALL_OW 256
17826: PUSH
17827: LD_INT 1000
17829: LESS
17830: IFFALSE 17844
// SetLives ( i , 1000 ) ;
17832: LD_VAR 0 1
17836: PPUSH
17837: LD_INT 1000
17839: PPUSH
17840: CALL_OW 234
17844: GO 17814
17846: POP
17847: POP
// until p > 20 ;
17848: LD_VAR 0 3
17852: PUSH
17853: LD_INT 20
17855: GREATER
17856: IFFALSE 17783
// end ;
17858: PPOPN 3
17860: END
// every 0 0$1 trigger StreamModeActive and sTime do
17861: LD_EXP 26
17865: IFFALSE 17873
17867: PUSH
17868: LD_EXP 77
17872: AND
17873: IFFALSE 17908
17875: GO 17877
17877: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17878: LD_INT 28
17880: PPUSH
17881: LD_OWVAR 2
17885: PPUSH
17886: LD_INT 2
17888: PPUSH
17889: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17893: LD_INT 30
17895: PPUSH
17896: LD_OWVAR 2
17900: PPUSH
17901: LD_INT 2
17903: PPUSH
17904: CALL_OW 322
// end ;
17908: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17909: LD_EXP 26
17913: IFFALSE 17921
17915: PUSH
17916: LD_EXP 78
17920: AND
17921: IFFALSE 18042
17923: GO 17925
17925: DISABLE
17926: LD_INT 0
17928: PPUSH
17929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17930: LD_ADDR_VAR 0 2
17934: PUSH
17935: LD_INT 22
17937: PUSH
17938: LD_OWVAR 2
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: LD_INT 21
17949: PUSH
17950: LD_INT 1
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 3
17959: PUSH
17960: LD_INT 23
17962: PUSH
17963: LD_INT 0
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: LIST
17978: PPUSH
17979: CALL_OW 69
17983: ST_TO_ADDR
// if not tmp then
17984: LD_VAR 0 2
17988: NOT
17989: IFFALSE 17993
// exit ;
17991: GO 18042
// for i in tmp do
17993: LD_ADDR_VAR 0 1
17997: PUSH
17998: LD_VAR 0 2
18002: PUSH
18003: FOR_IN
18004: IFFALSE 18040
// begin if Crawls ( i ) then
18006: LD_VAR 0 1
18010: PPUSH
18011: CALL_OW 318
18015: IFFALSE 18026
// ComWalk ( i ) ;
18017: LD_VAR 0 1
18021: PPUSH
18022: CALL_OW 138
// SetClass ( i , 2 ) ;
18026: LD_VAR 0 1
18030: PPUSH
18031: LD_INT 2
18033: PPUSH
18034: CALL_OW 336
// end ;
18038: GO 18003
18040: POP
18041: POP
// end ;
18042: PPOPN 2
18044: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18045: LD_EXP 26
18049: IFFALSE 18057
18051: PUSH
18052: LD_EXP 79
18056: AND
18057: IFFALSE 18347
18059: GO 18061
18061: DISABLE
18062: LD_INT 0
18064: PPUSH
18065: PPUSH
18066: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18067: LD_OWVAR 2
18071: PPUSH
18072: LD_INT 9
18074: PPUSH
18075: LD_INT 1
18077: PPUSH
18078: LD_INT 1
18080: PPUSH
18081: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18085: LD_INT 9
18087: PPUSH
18088: LD_OWVAR 2
18092: PPUSH
18093: CALL_OW 343
// uc_side := 9 ;
18097: LD_ADDR_OWVAR 20
18101: PUSH
18102: LD_INT 9
18104: ST_TO_ADDR
// uc_nation := 2 ;
18105: LD_ADDR_OWVAR 21
18109: PUSH
18110: LD_INT 2
18112: ST_TO_ADDR
// hc_name := Dark Warrior ;
18113: LD_ADDR_OWVAR 26
18117: PUSH
18118: LD_STRING Dark Warrior
18120: ST_TO_ADDR
// hc_gallery :=  ;
18121: LD_ADDR_OWVAR 33
18125: PUSH
18126: LD_STRING 
18128: ST_TO_ADDR
// hc_noskilllimit := true ;
18129: LD_ADDR_OWVAR 76
18133: PUSH
18134: LD_INT 1
18136: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18137: LD_ADDR_OWVAR 31
18141: PUSH
18142: LD_INT 30
18144: PUSH
18145: LD_INT 30
18147: PUSH
18148: LD_INT 30
18150: PUSH
18151: LD_INT 30
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: ST_TO_ADDR
// un := CreateHuman ;
18160: LD_ADDR_VAR 0 3
18164: PUSH
18165: CALL_OW 44
18169: ST_TO_ADDR
// hc_noskilllimit := false ;
18170: LD_ADDR_OWVAR 76
18174: PUSH
18175: LD_INT 0
18177: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18178: LD_VAR 0 3
18182: PPUSH
18183: LD_INT 1
18185: PPUSH
18186: CALL_OW 51
// ToLua ( playRanger() ) ;
18190: LD_STRING playRanger()
18192: PPUSH
18193: CALL_OW 559
// p := 0 ;
18197: LD_ADDR_VAR 0 2
18201: PUSH
18202: LD_INT 0
18204: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18205: LD_INT 35
18207: PPUSH
18208: CALL_OW 67
// p := p + 1 ;
18212: LD_ADDR_VAR 0 2
18216: PUSH
18217: LD_VAR 0 2
18221: PUSH
18222: LD_INT 1
18224: PLUS
18225: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18226: LD_VAR 0 3
18230: PPUSH
18231: CALL_OW 256
18235: PUSH
18236: LD_INT 1000
18238: LESS
18239: IFFALSE 18253
// SetLives ( un , 1000 ) ;
18241: LD_VAR 0 3
18245: PPUSH
18246: LD_INT 1000
18248: PPUSH
18249: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18253: LD_VAR 0 3
18257: PPUSH
18258: LD_INT 81
18260: PUSH
18261: LD_OWVAR 2
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: LD_INT 91
18272: PUSH
18273: LD_VAR 0 3
18277: PUSH
18278: LD_INT 30
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: LIST
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PPUSH
18290: CALL_OW 69
18294: PPUSH
18295: LD_VAR 0 3
18299: PPUSH
18300: CALL_OW 74
18304: PPUSH
18305: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
18309: LD_VAR 0 2
18313: PUSH
18314: LD_INT 80
18316: GREATER
18317: IFTRUE 18330
18319: PUSH
18320: LD_VAR 0 3
18324: PPUSH
18325: CALL_OW 301
18329: OR
18330: IFFALSE 18205
// if un then
18332: LD_VAR 0 3
18336: IFFALSE 18347
// RemoveUnit ( un ) ;
18338: LD_VAR 0 3
18342: PPUSH
18343: CALL_OW 64
// end ;
18347: PPOPN 3
18349: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
18350: LD_EXP 80
18354: IFFALSE 18470
18356: GO 18358
18358: DISABLE
18359: LD_INT 0
18361: PPUSH
18362: PPUSH
18363: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18364: LD_ADDR_VAR 0 2
18368: PUSH
18369: LD_INT 81
18371: PUSH
18372: LD_OWVAR 2
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: PUSH
18381: LD_INT 21
18383: PUSH
18384: LD_INT 1
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: PPUSH
18395: CALL_OW 69
18399: ST_TO_ADDR
// ToLua ( playComputer() ) ;
18400: LD_STRING playComputer()
18402: PPUSH
18403: CALL_OW 559
// if not tmp then
18407: LD_VAR 0 2
18411: NOT
18412: IFFALSE 18416
// exit ;
18414: GO 18470
// for i in tmp do
18416: LD_ADDR_VAR 0 1
18420: PUSH
18421: LD_VAR 0 2
18425: PUSH
18426: FOR_IN
18427: IFFALSE 18468
// for j := 1 to 4 do
18429: LD_ADDR_VAR 0 3
18433: PUSH
18434: DOUBLE
18435: LD_INT 1
18437: DEC
18438: ST_TO_ADDR
18439: LD_INT 4
18441: PUSH
18442: FOR_TO
18443: IFFALSE 18464
// SetSkill ( i , j , 10 ) ;
18445: LD_VAR 0 1
18449: PPUSH
18450: LD_VAR 0 3
18454: PPUSH
18455: LD_INT 10
18457: PPUSH
18458: CALL_OW 237
18462: GO 18442
18464: POP
18465: POP
18466: GO 18426
18468: POP
18469: POP
// end ;
18470: PPOPN 3
18472: END
// every 0 0$1 trigger s30 do var i , tmp ;
18473: LD_EXP 81
18477: IFFALSE 18546
18479: GO 18481
18481: DISABLE
18482: LD_INT 0
18484: PPUSH
18485: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18486: LD_ADDR_VAR 0 2
18490: PUSH
18491: LD_INT 22
18493: PUSH
18494: LD_OWVAR 2
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PPUSH
18503: CALL_OW 69
18507: ST_TO_ADDR
// if not tmp then
18508: LD_VAR 0 2
18512: NOT
18513: IFFALSE 18517
// exit ;
18515: GO 18546
// for i in tmp do
18517: LD_ADDR_VAR 0 1
18521: PUSH
18522: LD_VAR 0 2
18526: PUSH
18527: FOR_IN
18528: IFFALSE 18544
// SetLives ( i , 300 ) ;
18530: LD_VAR 0 1
18534: PPUSH
18535: LD_INT 300
18537: PPUSH
18538: CALL_OW 234
18542: GO 18527
18544: POP
18545: POP
// end ;
18546: PPOPN 2
18548: END
// every 0 0$1 trigger s60 do var i , tmp ;
18549: LD_EXP 82
18553: IFFALSE 18622
18555: GO 18557
18557: DISABLE
18558: LD_INT 0
18560: PPUSH
18561: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18562: LD_ADDR_VAR 0 2
18566: PUSH
18567: LD_INT 22
18569: PUSH
18570: LD_OWVAR 2
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PPUSH
18579: CALL_OW 69
18583: ST_TO_ADDR
// if not tmp then
18584: LD_VAR 0 2
18588: NOT
18589: IFFALSE 18593
// exit ;
18591: GO 18622
// for i in tmp do
18593: LD_ADDR_VAR 0 1
18597: PUSH
18598: LD_VAR 0 2
18602: PUSH
18603: FOR_IN
18604: IFFALSE 18620
// SetLives ( i , 600 ) ;
18606: LD_VAR 0 1
18610: PPUSH
18611: LD_INT 600
18613: PPUSH
18614: CALL_OW 234
18618: GO 18603
18620: POP
18621: POP
// end ;
18622: PPOPN 2
18624: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18625: LD_INT 0
18627: PPUSH
// case cmd of 301 :
18628: LD_VAR 0 1
18632: PUSH
18633: LD_INT 301
18635: DOUBLE
18636: EQUAL
18637: IFTRUE 18641
18639: GO 18673
18641: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18642: LD_VAR 0 6
18646: PPUSH
18647: LD_VAR 0 7
18651: PPUSH
18652: LD_VAR 0 8
18656: PPUSH
18657: LD_VAR 0 4
18661: PPUSH
18662: LD_VAR 0 5
18666: PPUSH
18667: CALL 19886 0 5
18671: GO 18794
18673: LD_INT 302
18675: DOUBLE
18676: EQUAL
18677: IFTRUE 18681
18679: GO 18718
18681: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18682: LD_VAR 0 6
18686: PPUSH
18687: LD_VAR 0 7
18691: PPUSH
18692: LD_VAR 0 8
18696: PPUSH
18697: LD_VAR 0 9
18701: PPUSH
18702: LD_VAR 0 4
18706: PPUSH
18707: LD_VAR 0 5
18711: PPUSH
18712: CALL 19977 0 6
18716: GO 18794
18718: LD_INT 303
18720: DOUBLE
18721: EQUAL
18722: IFTRUE 18726
18724: GO 18763
18726: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18727: LD_VAR 0 6
18731: PPUSH
18732: LD_VAR 0 7
18736: PPUSH
18737: LD_VAR 0 8
18741: PPUSH
18742: LD_VAR 0 9
18746: PPUSH
18747: LD_VAR 0 4
18751: PPUSH
18752: LD_VAR 0 5
18756: PPUSH
18757: CALL 18799 0 6
18761: GO 18794
18763: LD_INT 304
18765: DOUBLE
18766: EQUAL
18767: IFTRUE 18771
18769: GO 18793
18771: POP
// hHackTeleport ( unit , x , y ) ; end ;
18772: LD_VAR 0 2
18776: PPUSH
18777: LD_VAR 0 4
18781: PPUSH
18782: LD_VAR 0 5
18786: PPUSH
18787: CALL 20570 0 3
18791: GO 18794
18793: POP
// end ;
18794: LD_VAR 0 12
18798: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18799: LD_INT 0
18801: PPUSH
18802: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18803: LD_VAR 0 1
18807: PUSH
18808: LD_INT 1
18810: LESS
18811: IFTRUE 18823
18813: PUSH
18814: LD_VAR 0 1
18818: PUSH
18819: LD_INT 3
18821: GREATER
18822: OR
18823: IFTRUE 18841
18825: PUSH
18826: LD_VAR 0 5
18830: PPUSH
18831: LD_VAR 0 6
18835: PPUSH
18836: CALL_OW 428
18840: OR
18841: IFFALSE 18845
// exit ;
18843: GO 19573
// uc_side := your_side ;
18845: LD_ADDR_OWVAR 20
18849: PUSH
18850: LD_OWVAR 2
18854: ST_TO_ADDR
// uc_nation := nation ;
18855: LD_ADDR_OWVAR 21
18859: PUSH
18860: LD_VAR 0 1
18864: ST_TO_ADDR
// bc_level = 1 ;
18865: LD_ADDR_OWVAR 43
18869: PUSH
18870: LD_INT 1
18872: ST_TO_ADDR
// case btype of 1 :
18873: LD_VAR 0 2
18877: PUSH
18878: LD_INT 1
18880: DOUBLE
18881: EQUAL
18882: IFTRUE 18886
18884: GO 18897
18886: POP
// bc_type := b_depot ; 2 :
18887: LD_ADDR_OWVAR 42
18891: PUSH
18892: LD_INT 0
18894: ST_TO_ADDR
18895: GO 19517
18897: LD_INT 2
18899: DOUBLE
18900: EQUAL
18901: IFTRUE 18905
18903: GO 18916
18905: POP
// bc_type := b_warehouse ; 3 :
18906: LD_ADDR_OWVAR 42
18910: PUSH
18911: LD_INT 1
18913: ST_TO_ADDR
18914: GO 19517
18916: LD_INT 3
18918: DOUBLE
18919: EQUAL
18920: IFTRUE 18924
18922: GO 18935
18924: POP
// bc_type := b_lab ; 4 .. 9 :
18925: LD_ADDR_OWVAR 42
18929: PUSH
18930: LD_INT 6
18932: ST_TO_ADDR
18933: GO 19517
18935: LD_INT 4
18937: DOUBLE
18938: GREATEREQUAL
18939: IFFALSE 18947
18941: LD_INT 9
18943: DOUBLE
18944: LESSEQUAL
18945: IFTRUE 18949
18947: GO 19009
18949: POP
// begin bc_type := b_lab_half ;
18950: LD_ADDR_OWVAR 42
18954: PUSH
18955: LD_INT 7
18957: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18958: LD_ADDR_OWVAR 44
18962: PUSH
18963: LD_INT 10
18965: PUSH
18966: LD_INT 11
18968: PUSH
18969: LD_INT 12
18971: PUSH
18972: LD_INT 15
18974: PUSH
18975: LD_INT 14
18977: PUSH
18978: LD_INT 13
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: PUSH
18989: LD_VAR 0 2
18993: PUSH
18994: LD_INT 3
18996: MINUS
18997: ARRAY
18998: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
18999: LD_ADDR_OWVAR 45
19003: PUSH
19004: LD_INT 9
19006: ST_TO_ADDR
// end ; 10 .. 13 :
19007: GO 19517
19009: LD_INT 10
19011: DOUBLE
19012: GREATEREQUAL
19013: IFFALSE 19021
19015: LD_INT 13
19017: DOUBLE
19018: LESSEQUAL
19019: IFTRUE 19023
19021: GO 19100
19023: POP
// begin bc_type := b_lab_full ;
19024: LD_ADDR_OWVAR 42
19028: PUSH
19029: LD_INT 8
19031: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19032: LD_ADDR_OWVAR 44
19036: PUSH
19037: LD_INT 10
19039: PUSH
19040: LD_INT 12
19042: PUSH
19043: LD_INT 14
19045: PUSH
19046: LD_INT 13
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: PUSH
19055: LD_VAR 0 2
19059: PUSH
19060: LD_INT 9
19062: MINUS
19063: ARRAY
19064: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19065: LD_ADDR_OWVAR 45
19069: PUSH
19070: LD_INT 11
19072: PUSH
19073: LD_INT 15
19075: PUSH
19076: LD_INT 12
19078: PUSH
19079: LD_INT 15
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: PUSH
19088: LD_VAR 0 2
19092: PUSH
19093: LD_INT 9
19095: MINUS
19096: ARRAY
19097: ST_TO_ADDR
// end ; 14 :
19098: GO 19517
19100: LD_INT 14
19102: DOUBLE
19103: EQUAL
19104: IFTRUE 19108
19106: GO 19119
19108: POP
// bc_type := b_workshop ; 15 :
19109: LD_ADDR_OWVAR 42
19113: PUSH
19114: LD_INT 2
19116: ST_TO_ADDR
19117: GO 19517
19119: LD_INT 15
19121: DOUBLE
19122: EQUAL
19123: IFTRUE 19127
19125: GO 19138
19127: POP
// bc_type := b_factory ; 16 :
19128: LD_ADDR_OWVAR 42
19132: PUSH
19133: LD_INT 3
19135: ST_TO_ADDR
19136: GO 19517
19138: LD_INT 16
19140: DOUBLE
19141: EQUAL
19142: IFTRUE 19146
19144: GO 19157
19146: POP
// bc_type := b_ext_gun ; 17 :
19147: LD_ADDR_OWVAR 42
19151: PUSH
19152: LD_INT 17
19154: ST_TO_ADDR
19155: GO 19517
19157: LD_INT 17
19159: DOUBLE
19160: EQUAL
19161: IFTRUE 19165
19163: GO 19193
19165: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19166: LD_ADDR_OWVAR 42
19170: PUSH
19171: LD_INT 19
19173: PUSH
19174: LD_INT 23
19176: PUSH
19177: LD_INT 19
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: LIST
19184: PUSH
19185: LD_VAR 0 1
19189: ARRAY
19190: ST_TO_ADDR
19191: GO 19517
19193: LD_INT 18
19195: DOUBLE
19196: EQUAL
19197: IFTRUE 19201
19199: GO 19212
19201: POP
// bc_type := b_ext_radar ; 19 :
19202: LD_ADDR_OWVAR 42
19206: PUSH
19207: LD_INT 20
19209: ST_TO_ADDR
19210: GO 19517
19212: LD_INT 19
19214: DOUBLE
19215: EQUAL
19216: IFTRUE 19220
19218: GO 19231
19220: POP
// bc_type := b_ext_radio ; 20 :
19221: LD_ADDR_OWVAR 42
19225: PUSH
19226: LD_INT 22
19228: ST_TO_ADDR
19229: GO 19517
19231: LD_INT 20
19233: DOUBLE
19234: EQUAL
19235: IFTRUE 19239
19237: GO 19250
19239: POP
// bc_type := b_ext_siberium ; 21 :
19240: LD_ADDR_OWVAR 42
19244: PUSH
19245: LD_INT 21
19247: ST_TO_ADDR
19248: GO 19517
19250: LD_INT 21
19252: DOUBLE
19253: EQUAL
19254: IFTRUE 19258
19256: GO 19269
19258: POP
// bc_type := b_ext_computer ; 22 :
19259: LD_ADDR_OWVAR 42
19263: PUSH
19264: LD_INT 24
19266: ST_TO_ADDR
19267: GO 19517
19269: LD_INT 22
19271: DOUBLE
19272: EQUAL
19273: IFTRUE 19277
19275: GO 19288
19277: POP
// bc_type := b_ext_track ; 23 :
19278: LD_ADDR_OWVAR 42
19282: PUSH
19283: LD_INT 16
19285: ST_TO_ADDR
19286: GO 19517
19288: LD_INT 23
19290: DOUBLE
19291: EQUAL
19292: IFTRUE 19296
19294: GO 19307
19296: POP
// bc_type := b_ext_laser ; 24 :
19297: LD_ADDR_OWVAR 42
19301: PUSH
19302: LD_INT 25
19304: ST_TO_ADDR
19305: GO 19517
19307: LD_INT 24
19309: DOUBLE
19310: EQUAL
19311: IFTRUE 19315
19313: GO 19326
19315: POP
// bc_type := b_control_tower ; 25 :
19316: LD_ADDR_OWVAR 42
19320: PUSH
19321: LD_INT 36
19323: ST_TO_ADDR
19324: GO 19517
19326: LD_INT 25
19328: DOUBLE
19329: EQUAL
19330: IFTRUE 19334
19332: GO 19345
19334: POP
// bc_type := b_breastwork ; 26 :
19335: LD_ADDR_OWVAR 42
19339: PUSH
19340: LD_INT 31
19342: ST_TO_ADDR
19343: GO 19517
19345: LD_INT 26
19347: DOUBLE
19348: EQUAL
19349: IFTRUE 19353
19351: GO 19364
19353: POP
// bc_type := b_bunker ; 27 :
19354: LD_ADDR_OWVAR 42
19358: PUSH
19359: LD_INT 32
19361: ST_TO_ADDR
19362: GO 19517
19364: LD_INT 27
19366: DOUBLE
19367: EQUAL
19368: IFTRUE 19372
19370: GO 19383
19372: POP
// bc_type := b_turret ; 28 :
19373: LD_ADDR_OWVAR 42
19377: PUSH
19378: LD_INT 33
19380: ST_TO_ADDR
19381: GO 19517
19383: LD_INT 28
19385: DOUBLE
19386: EQUAL
19387: IFTRUE 19391
19389: GO 19402
19391: POP
// bc_type := b_armoury ; 29 :
19392: LD_ADDR_OWVAR 42
19396: PUSH
19397: LD_INT 4
19399: ST_TO_ADDR
19400: GO 19517
19402: LD_INT 29
19404: DOUBLE
19405: EQUAL
19406: IFTRUE 19410
19408: GO 19421
19410: POP
// bc_type := b_barracks ; 30 :
19411: LD_ADDR_OWVAR 42
19415: PUSH
19416: LD_INT 5
19418: ST_TO_ADDR
19419: GO 19517
19421: LD_INT 30
19423: DOUBLE
19424: EQUAL
19425: IFTRUE 19429
19427: GO 19440
19429: POP
// bc_type := b_solar_power ; 31 :
19430: LD_ADDR_OWVAR 42
19434: PUSH
19435: LD_INT 27
19437: ST_TO_ADDR
19438: GO 19517
19440: LD_INT 31
19442: DOUBLE
19443: EQUAL
19444: IFTRUE 19448
19446: GO 19459
19448: POP
// bc_type := b_oil_power ; 32 :
19449: LD_ADDR_OWVAR 42
19453: PUSH
19454: LD_INT 26
19456: ST_TO_ADDR
19457: GO 19517
19459: LD_INT 32
19461: DOUBLE
19462: EQUAL
19463: IFTRUE 19467
19465: GO 19478
19467: POP
// bc_type := b_siberite_power ; 33 :
19468: LD_ADDR_OWVAR 42
19472: PUSH
19473: LD_INT 28
19475: ST_TO_ADDR
19476: GO 19517
19478: LD_INT 33
19480: DOUBLE
19481: EQUAL
19482: IFTRUE 19486
19484: GO 19497
19486: POP
// bc_type := b_oil_mine ; 34 :
19487: LD_ADDR_OWVAR 42
19491: PUSH
19492: LD_INT 29
19494: ST_TO_ADDR
19495: GO 19517
19497: LD_INT 34
19499: DOUBLE
19500: EQUAL
19501: IFTRUE 19505
19503: GO 19516
19505: POP
// bc_type := b_siberite_mine ; end ;
19506: LD_ADDR_OWVAR 42
19510: PUSH
19511: LD_INT 30
19513: ST_TO_ADDR
19514: GO 19517
19516: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19517: LD_ADDR_VAR 0 8
19521: PUSH
19522: LD_VAR 0 5
19526: PPUSH
19527: LD_VAR 0 6
19531: PPUSH
19532: LD_VAR 0 3
19536: PPUSH
19537: CALL_OW 47
19541: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19542: LD_OWVAR 42
19546: PUSH
19547: LD_INT 32
19549: PUSH
19550: LD_INT 33
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: IN
19557: IFFALSE 19573
// PlaceWeaponTurret ( b , weapon ) ;
19559: LD_VAR 0 8
19563: PPUSH
19564: LD_VAR 0 4
19568: PPUSH
19569: CALL_OW 431
// end ;
19573: LD_VAR 0 7
19577: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19578: LD_INT 0
19580: PPUSH
19581: PPUSH
19582: PPUSH
19583: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19584: LD_ADDR_VAR 0 4
19588: PUSH
19589: LD_INT 22
19591: PUSH
19592: LD_OWVAR 2
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: LD_INT 2
19603: PUSH
19604: LD_INT 30
19606: PUSH
19607: LD_INT 0
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 30
19616: PUSH
19617: LD_INT 1
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: LIST
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PPUSH
19633: CALL_OW 69
19637: ST_TO_ADDR
// if not tmp then
19638: LD_VAR 0 4
19642: NOT
19643: IFFALSE 19647
// exit ;
19645: GO 19706
// for i in tmp do
19647: LD_ADDR_VAR 0 2
19651: PUSH
19652: LD_VAR 0 4
19656: PUSH
19657: FOR_IN
19658: IFFALSE 19704
// for j = 1 to 3 do
19660: LD_ADDR_VAR 0 3
19664: PUSH
19665: DOUBLE
19666: LD_INT 1
19668: DEC
19669: ST_TO_ADDR
19670: LD_INT 3
19672: PUSH
19673: FOR_TO
19674: IFFALSE 19700
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19676: LD_VAR 0 2
19680: PPUSH
19681: CALL_OW 274
19685: PPUSH
19686: LD_VAR 0 3
19690: PPUSH
19691: LD_INT 99999
19693: PPUSH
19694: CALL_OW 277
19698: GO 19673
19700: POP
19701: POP
19702: GO 19657
19704: POP
19705: POP
// end ;
19706: LD_VAR 0 1
19710: RET
// export function hHackSetLevel10 ; var i , j ; begin
19711: LD_INT 0
19713: PPUSH
19714: PPUSH
19715: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19716: LD_ADDR_VAR 0 2
19720: PUSH
19721: LD_INT 21
19723: PUSH
19724: LD_INT 1
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PPUSH
19731: CALL_OW 69
19735: PUSH
19736: FOR_IN
19737: IFFALSE 19789
// if IsSelected ( i ) then
19739: LD_VAR 0 2
19743: PPUSH
19744: CALL_OW 306
19748: IFFALSE 19787
// begin for j := 1 to 4 do
19750: LD_ADDR_VAR 0 3
19754: PUSH
19755: DOUBLE
19756: LD_INT 1
19758: DEC
19759: ST_TO_ADDR
19760: LD_INT 4
19762: PUSH
19763: FOR_TO
19764: IFFALSE 19785
// SetSkill ( i , j , 10 ) ;
19766: LD_VAR 0 2
19770: PPUSH
19771: LD_VAR 0 3
19775: PPUSH
19776: LD_INT 10
19778: PPUSH
19779: CALL_OW 237
19783: GO 19763
19785: POP
19786: POP
// end ;
19787: GO 19736
19789: POP
19790: POP
// end ;
19791: LD_VAR 0 1
19795: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19796: LD_INT 0
19798: PPUSH
19799: PPUSH
19800: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19801: LD_ADDR_VAR 0 2
19805: PUSH
19806: LD_INT 22
19808: PUSH
19809: LD_OWVAR 2
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 21
19820: PUSH
19821: LD_INT 1
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: PPUSH
19832: CALL_OW 69
19836: PUSH
19837: FOR_IN
19838: IFFALSE 19879
// begin for j := 1 to 4 do
19840: LD_ADDR_VAR 0 3
19844: PUSH
19845: DOUBLE
19846: LD_INT 1
19848: DEC
19849: ST_TO_ADDR
19850: LD_INT 4
19852: PUSH
19853: FOR_TO
19854: IFFALSE 19875
// SetSkill ( i , j , 10 ) ;
19856: LD_VAR 0 2
19860: PPUSH
19861: LD_VAR 0 3
19865: PPUSH
19866: LD_INT 10
19868: PPUSH
19869: CALL_OW 237
19873: GO 19853
19875: POP
19876: POP
// end ;
19877: GO 19837
19879: POP
19880: POP
// end ;
19881: LD_VAR 0 1
19885: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19886: LD_INT 0
19888: PPUSH
// uc_side := your_side ;
19889: LD_ADDR_OWVAR 20
19893: PUSH
19894: LD_OWVAR 2
19898: ST_TO_ADDR
// uc_nation := nation ;
19899: LD_ADDR_OWVAR 21
19903: PUSH
19904: LD_VAR 0 1
19908: ST_TO_ADDR
// InitHc ;
19909: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19913: LD_INT 0
19915: PPUSH
19916: LD_VAR 0 2
19920: PPUSH
19921: LD_VAR 0 3
19925: PPUSH
19926: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19930: LD_VAR 0 4
19934: PPUSH
19935: LD_VAR 0 5
19939: PPUSH
19940: CALL_OW 428
19944: PUSH
19945: LD_INT 0
19947: EQUAL
19948: IFFALSE 19972
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19950: CALL_OW 44
19954: PPUSH
19955: LD_VAR 0 4
19959: PPUSH
19960: LD_VAR 0 5
19964: PPUSH
19965: LD_INT 1
19967: PPUSH
19968: CALL_OW 48
// end ;
19972: LD_VAR 0 6
19976: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19977: LD_INT 0
19979: PPUSH
19980: PPUSH
// uc_side := your_side ;
19981: LD_ADDR_OWVAR 20
19985: PUSH
19986: LD_OWVAR 2
19990: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19991: LD_VAR 0 1
19995: PUSH
19996: LD_INT 1
19998: PUSH
19999: LD_INT 2
20001: PUSH
20002: LD_INT 3
20004: PUSH
20005: LD_INT 4
20007: PUSH
20008: LD_INT 5
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: IN
20018: IFFALSE 20030
// uc_nation := nation_american else
20020: LD_ADDR_OWVAR 21
20024: PUSH
20025: LD_INT 1
20027: ST_TO_ADDR
20028: GO 20073
// if chassis in [ 11 , 12 , 13 , 14 ] then
20030: LD_VAR 0 1
20034: PUSH
20035: LD_INT 11
20037: PUSH
20038: LD_INT 12
20040: PUSH
20041: LD_INT 13
20043: PUSH
20044: LD_INT 14
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: IN
20053: IFFALSE 20065
// uc_nation := nation_arabian else
20055: LD_ADDR_OWVAR 21
20059: PUSH
20060: LD_INT 2
20062: ST_TO_ADDR
20063: GO 20073
// uc_nation := nation_russian ;
20065: LD_ADDR_OWVAR 21
20069: PUSH
20070: LD_INT 3
20072: ST_TO_ADDR
// vc_chassis := chassis ;
20073: LD_ADDR_OWVAR 37
20077: PUSH
20078: LD_VAR 0 1
20082: ST_TO_ADDR
// vc_engine := engine ;
20083: LD_ADDR_OWVAR 39
20087: PUSH
20088: LD_VAR 0 2
20092: ST_TO_ADDR
// vc_control := control ;
20093: LD_ADDR_OWVAR 38
20097: PUSH
20098: LD_VAR 0 3
20102: ST_TO_ADDR
// vc_weapon := weapon ;
20103: LD_ADDR_OWVAR 40
20107: PUSH
20108: LD_VAR 0 4
20112: ST_TO_ADDR
// un := CreateVehicle ;
20113: LD_ADDR_VAR 0 8
20117: PUSH
20118: CALL_OW 45
20122: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20123: LD_VAR 0 8
20127: PPUSH
20128: LD_INT 0
20130: PPUSH
20131: LD_INT 5
20133: PPUSH
20134: CALL_OW 12
20138: PPUSH
20139: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20143: LD_VAR 0 8
20147: PPUSH
20148: LD_VAR 0 5
20152: PPUSH
20153: LD_VAR 0 6
20157: PPUSH
20158: LD_INT 1
20160: PPUSH
20161: CALL_OW 48
// end ;
20165: LD_VAR 0 7
20169: RET
// export hInvincible ; every 1 do
20170: GO 20172
20172: DISABLE
// hInvincible := [ ] ;
20173: LD_ADDR_EXP 83
20177: PUSH
20178: EMPTY
20179: ST_TO_ADDR
20180: END
// every 10 do var i ;
20181: GO 20183
20183: DISABLE
20184: LD_INT 0
20186: PPUSH
// begin enable ;
20187: ENABLE
// if not hInvincible then
20188: LD_EXP 83
20192: NOT
20193: IFFALSE 20197
// exit ;
20195: GO 20241
// for i in hInvincible do
20197: LD_ADDR_VAR 0 1
20201: PUSH
20202: LD_EXP 83
20206: PUSH
20207: FOR_IN
20208: IFFALSE 20239
// if GetLives ( i ) < 1000 then
20210: LD_VAR 0 1
20214: PPUSH
20215: CALL_OW 256
20219: PUSH
20220: LD_INT 1000
20222: LESS
20223: IFFALSE 20237
// SetLives ( i , 1000 ) ;
20225: LD_VAR 0 1
20229: PPUSH
20230: LD_INT 1000
20232: PPUSH
20233: CALL_OW 234
20237: GO 20207
20239: POP
20240: POP
// end ;
20241: PPOPN 1
20243: END
// export function hHackInvincible ; var i ; begin
20244: LD_INT 0
20246: PPUSH
20247: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20248: LD_ADDR_VAR 0 2
20252: PUSH
20253: LD_INT 2
20255: PUSH
20256: LD_INT 21
20258: PUSH
20259: LD_INT 1
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: PUSH
20266: LD_INT 21
20268: PUSH
20269: LD_INT 2
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: LIST
20280: PPUSH
20281: CALL_OW 69
20285: PUSH
20286: FOR_IN
20287: IFFALSE 20348
// if IsSelected ( i ) then
20289: LD_VAR 0 2
20293: PPUSH
20294: CALL_OW 306
20298: IFFALSE 20346
// begin if i in hInvincible then
20300: LD_VAR 0 2
20304: PUSH
20305: LD_EXP 83
20309: IN
20310: IFFALSE 20330
// hInvincible := hInvincible diff i else
20312: LD_ADDR_EXP 83
20316: PUSH
20317: LD_EXP 83
20321: PUSH
20322: LD_VAR 0 2
20326: DIFF
20327: ST_TO_ADDR
20328: GO 20346
// hInvincible := hInvincible union i ;
20330: LD_ADDR_EXP 83
20334: PUSH
20335: LD_EXP 83
20339: PUSH
20340: LD_VAR 0 2
20344: UNION
20345: ST_TO_ADDR
// end ;
20346: GO 20286
20348: POP
20349: POP
// end ;
20350: LD_VAR 0 1
20354: RET
// export function hHackInvisible ; var i , j ; begin
20355: LD_INT 0
20357: PPUSH
20358: PPUSH
20359: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20360: LD_ADDR_VAR 0 2
20364: PUSH
20365: LD_INT 21
20367: PUSH
20368: LD_INT 1
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: PPUSH
20375: CALL_OW 69
20379: PUSH
20380: FOR_IN
20381: IFFALSE 20405
// if IsSelected ( i ) then
20383: LD_VAR 0 2
20387: PPUSH
20388: CALL_OW 306
20392: IFFALSE 20403
// ComForceInvisible ( i ) ;
20394: LD_VAR 0 2
20398: PPUSH
20399: CALL_OW 496
20403: GO 20380
20405: POP
20406: POP
// end ;
20407: LD_VAR 0 1
20411: RET
// export function hHackChangeYourSide ; begin
20412: LD_INT 0
20414: PPUSH
// if your_side = 8 then
20415: LD_OWVAR 2
20419: PUSH
20420: LD_INT 8
20422: EQUAL
20423: IFFALSE 20435
// your_side := 0 else
20425: LD_ADDR_OWVAR 2
20429: PUSH
20430: LD_INT 0
20432: ST_TO_ADDR
20433: GO 20449
// your_side := your_side + 1 ;
20435: LD_ADDR_OWVAR 2
20439: PUSH
20440: LD_OWVAR 2
20444: PUSH
20445: LD_INT 1
20447: PLUS
20448: ST_TO_ADDR
// end ;
20449: LD_VAR 0 1
20453: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20454: LD_INT 0
20456: PPUSH
20457: PPUSH
20458: PPUSH
// for i in all_units do
20459: LD_ADDR_VAR 0 2
20463: PUSH
20464: LD_OWVAR 3
20468: PUSH
20469: FOR_IN
20470: IFFALSE 20548
// if IsSelected ( i ) then
20472: LD_VAR 0 2
20476: PPUSH
20477: CALL_OW 306
20481: IFFALSE 20546
// begin j := GetSide ( i ) ;
20483: LD_ADDR_VAR 0 3
20487: PUSH
20488: LD_VAR 0 2
20492: PPUSH
20493: CALL_OW 255
20497: ST_TO_ADDR
// if j = 8 then
20498: LD_VAR 0 3
20502: PUSH
20503: LD_INT 8
20505: EQUAL
20506: IFFALSE 20518
// j := 0 else
20508: LD_ADDR_VAR 0 3
20512: PUSH
20513: LD_INT 0
20515: ST_TO_ADDR
20516: GO 20532
// j := j + 1 ;
20518: LD_ADDR_VAR 0 3
20522: PUSH
20523: LD_VAR 0 3
20527: PUSH
20528: LD_INT 1
20530: PLUS
20531: ST_TO_ADDR
// SetSide ( i , j ) ;
20532: LD_VAR 0 2
20536: PPUSH
20537: LD_VAR 0 3
20541: PPUSH
20542: CALL_OW 235
// end ;
20546: GO 20469
20548: POP
20549: POP
// end ;
20550: LD_VAR 0 1
20554: RET
// export function hHackFog ; begin
20555: LD_INT 0
20557: PPUSH
// FogOff ( true ) ;
20558: LD_INT 1
20560: PPUSH
20561: CALL_OW 344
// end ;
20565: LD_VAR 0 1
20569: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20570: LD_INT 0
20572: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20573: LD_VAR 0 1
20577: PPUSH
20578: LD_VAR 0 2
20582: PPUSH
20583: LD_VAR 0 3
20587: PPUSH
20588: LD_INT 1
20590: PPUSH
20591: LD_INT 1
20593: PPUSH
20594: CALL_OW 483
// CenterOnXY ( x , y ) ;
20598: LD_VAR 0 2
20602: PPUSH
20603: LD_VAR 0 3
20607: PPUSH
20608: CALL_OW 84
// end ;
20612: LD_VAR 0 4
20616: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
20617: LD_INT 0
20619: PPUSH
20620: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
20621: LD_VAR 0 1
20625: NOT
20626: IFTRUE 20645
20628: PUSH
20629: LD_VAR 0 2
20633: PPUSH
20634: LD_VAR 0 3
20638: PPUSH
20639: CALL_OW 488
20643: NOT
20644: OR
20645: IFTRUE 20680
20647: PUSH
20648: LD_VAR 0 1
20652: PPUSH
20653: CALL_OW 266
20657: PUSH
20658: LD_INT 3
20660: NONEQUAL
20661: IFFALSE 20679
20663: PUSH
20664: LD_VAR 0 1
20668: PPUSH
20669: CALL_OW 247
20673: PUSH
20674: LD_INT 1
20676: EQUAL
20677: NOT
20678: AND
20679: OR
20680: IFFALSE 20684
// exit ;
20682: GO 20966
// if GetType ( factory ) = unit_human then
20684: LD_VAR 0 1
20688: PPUSH
20689: CALL_OW 247
20693: PUSH
20694: LD_INT 1
20696: EQUAL
20697: IFFALSE 20714
// factory := IsInUnit ( factory ) ;
20699: LD_ADDR_VAR 0 1
20703: PUSH
20704: LD_VAR 0 1
20708: PPUSH
20709: CALL_OW 310
20713: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20714: LD_VAR 0 1
20718: PPUSH
20719: CALL_OW 266
20723: PUSH
20724: LD_INT 3
20726: NONEQUAL
20727: IFFALSE 20731
// exit ;
20729: GO 20966
// for i := 1 to Count ( factoryWaypoints ) do
20731: LD_ADDR_VAR 0 5
20735: PUSH
20736: DOUBLE
20737: LD_INT 1
20739: DEC
20740: ST_TO_ADDR
20741: LD_EXP 84
20745: PPUSH
20746: CALL 29698 0 1
20750: PUSH
20751: FOR_TO
20752: IFFALSE 20914
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
20754: LD_VAR 0 2
20758: PPUSH
20759: LD_VAR 0 3
20763: PPUSH
20764: CALL_OW 428
20768: PUSH
20769: LD_EXP 84
20773: PUSH
20774: LD_VAR 0 5
20778: ARRAY
20779: PUSH
20780: LD_INT 2
20782: ARRAY
20783: EQUAL
20784: IFFALSE 20816
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
20786: LD_ADDR_EXP 84
20790: PUSH
20791: LD_EXP 84
20795: PPUSH
20796: LD_VAR 0 5
20800: PPUSH
20801: CALL_OW 3
20805: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20806: CALL 20971 0 0
// exit ;
20810: POP
20811: POP
20812: GO 20966
// end else
20814: GO 20912
// if factory = factoryWaypoints [ i ] [ 2 ] then
20816: LD_VAR 0 1
20820: PUSH
20821: LD_EXP 84
20825: PUSH
20826: LD_VAR 0 5
20830: ARRAY
20831: PUSH
20832: LD_INT 2
20834: ARRAY
20835: EQUAL
20836: IFFALSE 20912
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
20838: LD_ADDR_EXP 84
20842: PUSH
20843: LD_EXP 84
20847: PPUSH
20848: LD_VAR 0 5
20852: PPUSH
20853: CALL_OW 3
20857: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
20858: LD_ADDR_EXP 84
20862: PUSH
20863: LD_EXP 84
20867: PPUSH
20868: LD_VAR 0 1
20872: PPUSH
20873: CALL_OW 255
20877: PUSH
20878: LD_VAR 0 1
20882: PUSH
20883: LD_VAR 0 2
20887: PUSH
20888: LD_VAR 0 3
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: PPUSH
20899: CALL 65630 0 2
20903: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20904: CALL 20971 0 0
// exit ;
20908: POP
20909: POP
20910: GO 20966
// end ; end ;
20912: GO 20751
20914: POP
20915: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
20916: LD_ADDR_EXP 84
20920: PUSH
20921: LD_EXP 84
20925: PPUSH
20926: LD_VAR 0 1
20930: PPUSH
20931: CALL_OW 255
20935: PUSH
20936: LD_VAR 0 1
20940: PUSH
20941: LD_VAR 0 2
20945: PUSH
20946: LD_VAR 0 3
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: PPUSH
20957: CALL 65630 0 2
20961: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20962: CALL 20971 0 0
// end ;
20966: LD_VAR 0 4
20970: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
20971: LD_INT 0
20973: PPUSH
20974: PPUSH
20975: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20976: LD_STRING resetFactoryWaypoint();
20978: PPUSH
20979: CALL_OW 559
// if factoryWaypoints then
20983: LD_EXP 84
20987: IFFALSE 21108
// begin list := factoryWaypoints ;
20989: LD_ADDR_VAR 0 3
20993: PUSH
20994: LD_EXP 84
20998: ST_TO_ADDR
// for i := 1 to list do
20999: LD_ADDR_VAR 0 2
21003: PUSH
21004: DOUBLE
21005: LD_INT 1
21007: DEC
21008: ST_TO_ADDR
21009: LD_VAR 0 3
21013: PUSH
21014: FOR_TO
21015: IFFALSE 21106
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21017: LD_STRING setFactoryWaypointXY(
21019: PUSH
21020: LD_VAR 0 3
21024: PUSH
21025: LD_VAR 0 2
21029: ARRAY
21030: PUSH
21031: LD_INT 1
21033: ARRAY
21034: STR
21035: PUSH
21036: LD_STRING ,
21038: STR
21039: PUSH
21040: LD_VAR 0 3
21044: PUSH
21045: LD_VAR 0 2
21049: ARRAY
21050: PUSH
21051: LD_INT 2
21053: ARRAY
21054: STR
21055: PUSH
21056: LD_STRING ,
21058: STR
21059: PUSH
21060: LD_VAR 0 3
21064: PUSH
21065: LD_VAR 0 2
21069: ARRAY
21070: PUSH
21071: LD_INT 3
21073: ARRAY
21074: STR
21075: PUSH
21076: LD_STRING ,
21078: STR
21079: PUSH
21080: LD_VAR 0 3
21084: PUSH
21085: LD_VAR 0 2
21089: ARRAY
21090: PUSH
21091: LD_INT 4
21093: ARRAY
21094: STR
21095: PUSH
21096: LD_STRING )
21098: STR
21099: PPUSH
21100: CALL_OW 559
21104: GO 21014
21106: POP
21107: POP
// end ; end ;
21108: LD_VAR 0 1
21112: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
21113: LD_INT 0
21115: PPUSH
// if HexInfo ( x , y ) = warehouse then
21116: LD_VAR 0 2
21120: PPUSH
21121: LD_VAR 0 3
21125: PPUSH
21126: CALL_OW 428
21130: PUSH
21131: LD_VAR 0 1
21135: EQUAL
21136: IFFALSE 21163
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
21138: LD_ADDR_EXP 86
21142: PUSH
21143: LD_EXP 86
21147: PPUSH
21148: LD_VAR 0 1
21152: PPUSH
21153: LD_INT 0
21155: PPUSH
21156: CALL_OW 1
21160: ST_TO_ADDR
21161: GO 21214
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
21163: LD_ADDR_EXP 86
21167: PUSH
21168: LD_EXP 86
21172: PPUSH
21173: LD_VAR 0 1
21177: PPUSH
21178: LD_VAR 0 1
21182: PPUSH
21183: CALL_OW 255
21187: PUSH
21188: LD_VAR 0 1
21192: PUSH
21193: LD_VAR 0 2
21197: PUSH
21198: LD_VAR 0 3
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: PPUSH
21209: CALL_OW 1
21213: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
21214: CALL 21223 0 0
// end ;
21218: LD_VAR 0 4
21222: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
21223: LD_INT 0
21225: PPUSH
21226: PPUSH
21227: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
21228: LD_STRING resetWarehouseGatheringPoints();
21230: PPUSH
21231: CALL_OW 559
// if warehouseGatheringPoints then
21235: LD_EXP 86
21239: IFFALSE 21365
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
21241: LD_ADDR_VAR 0 3
21245: PUSH
21246: LD_EXP 86
21250: PPUSH
21251: CALL 69564 0 1
21255: ST_TO_ADDR
// for i := 1 to list do
21256: LD_ADDR_VAR 0 2
21260: PUSH
21261: DOUBLE
21262: LD_INT 1
21264: DEC
21265: ST_TO_ADDR
21266: LD_VAR 0 3
21270: PUSH
21271: FOR_TO
21272: IFFALSE 21363
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21274: LD_STRING setWarehouseGatheringPointXY(
21276: PUSH
21277: LD_VAR 0 3
21281: PUSH
21282: LD_VAR 0 2
21286: ARRAY
21287: PUSH
21288: LD_INT 1
21290: ARRAY
21291: STR
21292: PUSH
21293: LD_STRING ,
21295: STR
21296: PUSH
21297: LD_VAR 0 3
21301: PUSH
21302: LD_VAR 0 2
21306: ARRAY
21307: PUSH
21308: LD_INT 2
21310: ARRAY
21311: STR
21312: PUSH
21313: LD_STRING ,
21315: STR
21316: PUSH
21317: LD_VAR 0 3
21321: PUSH
21322: LD_VAR 0 2
21326: ARRAY
21327: PUSH
21328: LD_INT 3
21330: ARRAY
21331: STR
21332: PUSH
21333: LD_STRING ,
21335: STR
21336: PUSH
21337: LD_VAR 0 3
21341: PUSH
21342: LD_VAR 0 2
21346: ARRAY
21347: PUSH
21348: LD_INT 4
21350: ARRAY
21351: STR
21352: PUSH
21353: LD_STRING )
21355: STR
21356: PPUSH
21357: CALL_OW 559
21361: GO 21271
21363: POP
21364: POP
// end ; end ;
21365: LD_VAR 0 1
21369: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
21370: LD_EXP 86
21374: IFFALSE 22069
21376: GO 21378
21378: DISABLE
21379: LD_INT 0
21381: PPUSH
21382: PPUSH
21383: PPUSH
21384: PPUSH
21385: PPUSH
21386: PPUSH
21387: PPUSH
21388: PPUSH
21389: PPUSH
// begin enable ;
21390: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
21391: LD_ADDR_VAR 0 3
21395: PUSH
21396: LD_EXP 86
21400: PPUSH
21401: CALL 69564 0 1
21405: ST_TO_ADDR
// if not list then
21406: LD_VAR 0 3
21410: NOT
21411: IFFALSE 21415
// exit ;
21413: GO 22069
// for i := 1 to list do
21415: LD_ADDR_VAR 0 1
21419: PUSH
21420: DOUBLE
21421: LD_INT 1
21423: DEC
21424: ST_TO_ADDR
21425: LD_VAR 0 3
21429: PUSH
21430: FOR_TO
21431: IFFALSE 22067
// begin depot := list [ i ] [ 2 ] ;
21433: LD_ADDR_VAR 0 8
21437: PUSH
21438: LD_VAR 0 3
21442: PUSH
21443: LD_VAR 0 1
21447: ARRAY
21448: PUSH
21449: LD_INT 2
21451: ARRAY
21452: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
21453: LD_ADDR_VAR 0 5
21457: PUSH
21458: LD_VAR 0 3
21462: PUSH
21463: LD_VAR 0 1
21467: ARRAY
21468: PUSH
21469: LD_INT 1
21471: ARRAY
21472: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
21473: LD_VAR 0 8
21477: PPUSH
21478: CALL_OW 301
21482: IFTRUE 21501
21484: PUSH
21485: LD_VAR 0 5
21489: PUSH
21490: LD_VAR 0 8
21494: PPUSH
21495: CALL_OW 255
21499: NONEQUAL
21500: OR
21501: IFFALSE 21530
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
21503: LD_ADDR_EXP 86
21507: PUSH
21508: LD_EXP 86
21512: PPUSH
21513: LD_VAR 0 8
21517: PPUSH
21518: LD_INT 0
21520: PPUSH
21521: CALL_OW 1
21525: ST_TO_ADDR
// exit ;
21526: POP
21527: POP
21528: GO 22069
// end ; x := list [ i ] [ 3 ] ;
21530: LD_ADDR_VAR 0 6
21534: PUSH
21535: LD_VAR 0 3
21539: PUSH
21540: LD_VAR 0 1
21544: ARRAY
21545: PUSH
21546: LD_INT 3
21548: ARRAY
21549: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
21550: LD_ADDR_VAR 0 7
21554: PUSH
21555: LD_VAR 0 3
21559: PUSH
21560: LD_VAR 0 1
21564: ARRAY
21565: PUSH
21566: LD_INT 4
21568: ARRAY
21569: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
21570: LD_ADDR_VAR 0 9
21574: PUSH
21575: LD_VAR 0 6
21579: PPUSH
21580: LD_VAR 0 7
21584: PPUSH
21585: LD_INT 16
21587: PPUSH
21588: CALL 68138 0 3
21592: ST_TO_ADDR
// if not cratesNearbyPoint then
21593: LD_VAR 0 9
21597: NOT
21598: IFFALSE 21604
// exit ;
21600: POP
21601: POP
21602: GO 22069
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
21604: LD_ADDR_VAR 0 4
21608: PUSH
21609: LD_INT 22
21611: PUSH
21612: LD_VAR 0 5
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: PUSH
21621: LD_INT 3
21623: PUSH
21624: LD_INT 60
21626: PUSH
21627: EMPTY
21628: LIST
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PUSH
21634: LD_INT 91
21636: PUSH
21637: LD_VAR 0 8
21641: PUSH
21642: LD_INT 6
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: LIST
21649: PUSH
21650: LD_INT 2
21652: PUSH
21653: LD_INT 25
21655: PUSH
21656: LD_INT 2
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: PUSH
21663: LD_INT 25
21665: PUSH
21666: LD_INT 16
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: LIST
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: PPUSH
21684: CALL_OW 69
21688: PUSH
21689: LD_VAR 0 8
21693: PPUSH
21694: CALL_OW 313
21698: PPUSH
21699: LD_INT 3
21701: PUSH
21702: LD_INT 60
21704: PUSH
21705: EMPTY
21706: LIST
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PUSH
21712: LD_INT 2
21714: PUSH
21715: LD_INT 25
21717: PUSH
21718: LD_INT 2
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PUSH
21725: LD_INT 25
21727: PUSH
21728: LD_INT 16
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: LIST
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: PPUSH
21744: CALL_OW 72
21748: UNION
21749: ST_TO_ADDR
// if tmp then
21750: LD_VAR 0 4
21754: IFFALSE 21834
// begin tmp := ShrinkArray ( tmp , 3 ) ;
21756: LD_ADDR_VAR 0 4
21760: PUSH
21761: LD_VAR 0 4
21765: PPUSH
21766: LD_INT 3
21768: PPUSH
21769: CALL 65945 0 2
21773: ST_TO_ADDR
// for j in tmp do
21774: LD_ADDR_VAR 0 2
21778: PUSH
21779: LD_VAR 0 4
21783: PUSH
21784: FOR_IN
21785: IFFALSE 21828
// begin if IsInUnit ( j ) then
21787: LD_VAR 0 2
21791: PPUSH
21792: CALL_OW 310
21796: IFFALSE 21807
// ComExit ( j ) ;
21798: LD_VAR 0 2
21802: PPUSH
21803: CALL 66028 0 1
// AddComCollect ( j , x , y ) ;
21807: LD_VAR 0 2
21811: PPUSH
21812: LD_VAR 0 6
21816: PPUSH
21817: LD_VAR 0 7
21821: PPUSH
21822: CALL_OW 177
// end ;
21826: GO 21784
21828: POP
21829: POP
// exit ;
21830: POP
21831: POP
21832: GO 22069
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
21834: LD_ADDR_VAR 0 4
21838: PUSH
21839: LD_INT 22
21841: PUSH
21842: LD_VAR 0 5
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PUSH
21851: LD_INT 91
21853: PUSH
21854: LD_VAR 0 8
21858: PUSH
21859: LD_INT 8
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 2
21869: PUSH
21870: LD_INT 34
21872: PUSH
21873: LD_INT 12
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 34
21882: PUSH
21883: LD_INT 51
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 34
21892: PUSH
21893: LD_INT 32
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: LD_INT 34
21902: PUSH
21903: LD_INT 89
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: LIST
21921: PPUSH
21922: CALL_OW 69
21926: ST_TO_ADDR
// if tmp then
21927: LD_VAR 0 4
21931: IFFALSE 22065
// begin for j in tmp do
21933: LD_ADDR_VAR 0 2
21937: PUSH
21938: LD_VAR 0 4
21942: PUSH
21943: FOR_IN
21944: IFFALSE 22063
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
21946: LD_VAR 0 2
21950: PPUSH
21951: CALL_OW 262
21955: PUSH
21956: LD_INT 3
21958: EQUAL
21959: IFTRUE 21976
21961: PUSH
21962: LD_VAR 0 2
21966: PPUSH
21967: CALL_OW 261
21971: PUSH
21972: LD_INT 20
21974: GREATER
21975: OR
21976: IFFALSE 21990
21978: PUSH
21979: LD_VAR 0 2
21983: PPUSH
21984: CALL_OW 314
21988: NOT
21989: AND
21990: IFFALSE 22020
21992: PUSH
21993: LD_VAR 0 2
21997: PPUSH
21998: CALL_OW 263
22002: PUSH
22003: LD_INT 1
22005: NONEQUAL
22006: IFTRUE 22019
22008: PUSH
22009: LD_VAR 0 2
22013: PPUSH
22014: CALL_OW 311
22018: OR
22019: AND
22020: IFFALSE 22061
// begin ComCollect ( j , x , y ) ;
22022: LD_VAR 0 2
22026: PPUSH
22027: LD_VAR 0 6
22031: PPUSH
22032: LD_VAR 0 7
22036: PPUSH
22037: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
22041: LD_VAR 0 2
22045: PPUSH
22046: LD_VAR 0 8
22050: PPUSH
22051: CALL_OW 172
// exit ;
22055: POP
22056: POP
22057: POP
22058: POP
22059: GO 22069
// end ;
22061: GO 21943
22063: POP
22064: POP
// end ; end ;
22065: GO 21430
22067: POP
22068: POP
// end ; end_of_file
22069: PPOPN 9
22071: END
// export function SOS_UnitDestroyed ( un ) ; begin
22072: LD_INT 0
22074: PPUSH
// ComRadiation ( un ) ;
22075: LD_VAR 0 1
22079: PPUSH
22080: CALL 23161 0 1
// end ;
22084: LD_VAR 0 2
22088: RET
// export function SOS_UnitKamikazed ( un ) ; begin
22089: LD_INT 0
22091: PPUSH
// ComRadiation ( un ) ;
22092: LD_VAR 0 1
22096: PPUSH
22097: CALL 23161 0 1
// end ;
22101: LD_VAR 0 2
22105: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22106: LD_INT 0
22108: PPUSH
// end ;
22109: LD_VAR 0 4
22113: RET
// export function SOS_Command ( cmd ) ; begin
22114: LD_INT 0
22116: PPUSH
// end ;
22117: LD_VAR 0 2
22121: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22122: LD_INT 0
22124: PPUSH
// end ;
22125: LD_VAR 0 6
22129: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
22130: LD_INT 0
22132: PPUSH
22133: PPUSH
22134: PPUSH
22135: PPUSH
// if not vehicle or not factory then
22136: LD_VAR 0 1
22140: NOT
22141: IFTRUE 22150
22143: PUSH
22144: LD_VAR 0 2
22148: NOT
22149: OR
22150: IFFALSE 22154
// exit ;
22152: GO 22736
// if not factoryWaypoints then
22154: LD_EXP 84
22158: NOT
22159: IFFALSE 22163
// exit ;
22161: GO 22736
// for i := 1 to Count ( factoryWaypoints ) do
22163: LD_ADDR_VAR 0 4
22167: PUSH
22168: DOUBLE
22169: LD_INT 1
22171: DEC
22172: ST_TO_ADDR
22173: LD_EXP 84
22177: PPUSH
22178: CALL 29698 0 1
22182: PUSH
22183: FOR_TO
22184: IFFALSE 22734
// if factoryWaypoints [ i ] [ 2 ] = factory then
22186: LD_EXP 84
22190: PUSH
22191: LD_VAR 0 4
22195: ARRAY
22196: PUSH
22197: LD_INT 2
22199: ARRAY
22200: PUSH
22201: LD_VAR 0 2
22205: EQUAL
22206: IFFALSE 22732
// begin if GetControl ( vehicle ) = control_manual then
22208: LD_VAR 0 1
22212: PPUSH
22213: CALL_OW 263
22217: PUSH
22218: LD_INT 1
22220: EQUAL
22221: IFFALSE 22585
// begin driver := IsDrivenBy ( vehicle ) ;
22223: LD_ADDR_VAR 0 5
22227: PUSH
22228: LD_VAR 0 1
22232: PPUSH
22233: CALL_OW 311
22237: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
22238: LD_VAR 0 5
22242: PUSH
22243: LD_EXP 85
22247: IN
22248: IFTRUE 22262
22250: PUSH
22251: LD_VAR 0 1
22255: PUSH
22256: LD_EXP 85
22260: IN
22261: OR
22262: IFFALSE 22268
// exit ;
22264: POP
22265: POP
22266: GO 22736
// if not HasTask ( driver ) then
22268: LD_VAR 0 5
22272: PPUSH
22273: CALL_OW 314
22277: NOT
22278: IFFALSE 22583
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
22280: LD_ADDR_EXP 85
22284: PUSH
22285: LD_EXP 85
22289: PPUSH
22290: LD_VAR 0 5
22294: PPUSH
22295: CALL 65630 0 2
22299: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
22300: LD_ADDR_EXP 85
22304: PUSH
22305: LD_EXP 85
22309: PPUSH
22310: LD_VAR 0 1
22314: PPUSH
22315: CALL 65630 0 2
22319: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22320: LD_ADDR_VAR 0 6
22324: PUSH
22325: LD_EXP 84
22329: PUSH
22330: LD_VAR 0 4
22334: ARRAY
22335: PUSH
22336: LD_INT 3
22338: ARRAY
22339: PPUSH
22340: LD_EXP 84
22344: PUSH
22345: LD_VAR 0 4
22349: ARRAY
22350: PUSH
22351: LD_INT 4
22353: ARRAY
22354: PPUSH
22355: CALL_OW 428
22359: ST_TO_ADDR
// if hex then
22360: LD_VAR 0 6
22364: IFFALSE 22382
// ComMoveUnit ( driver , hex ) else
22366: LD_VAR 0 5
22370: PPUSH
22371: LD_VAR 0 6
22375: PPUSH
22376: CALL_OW 112
22380: GO 22466
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
22382: LD_VAR 0 1
22386: PPUSH
22387: LD_EXP 84
22391: PUSH
22392: LD_VAR 0 4
22396: ARRAY
22397: PUSH
22398: LD_INT 3
22400: ARRAY
22401: PPUSH
22402: LD_EXP 84
22406: PUSH
22407: LD_VAR 0 4
22411: ARRAY
22412: PUSH
22413: LD_INT 4
22415: ARRAY
22416: PPUSH
22417: CALL_OW 297
22421: PUSH
22422: LD_INT 0
22424: GREATER
22425: IFFALSE 22466
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22427: LD_VAR 0 5
22431: PPUSH
22432: LD_EXP 84
22436: PUSH
22437: LD_VAR 0 4
22441: ARRAY
22442: PUSH
22443: LD_INT 3
22445: ARRAY
22446: PPUSH
22447: LD_EXP 84
22451: PUSH
22452: LD_VAR 0 4
22456: ARRAY
22457: PUSH
22458: LD_INT 4
22460: ARRAY
22461: PPUSH
22462: CALL_OW 111
// AddComExitVehicle ( driver ) ;
22466: LD_VAR 0 5
22470: PPUSH
22471: CALL_OW 181
// if Multiplayer then
22475: LD_OWVAR 4
22479: IFFALSE 22528
// begin repeat wait ( 10 ) ;
22481: LD_INT 10
22483: PPUSH
22484: CALL_OW 67
// until not IsInUnit ( driver ) ;
22488: LD_VAR 0 5
22492: PPUSH
22493: CALL_OW 310
22497: NOT
22498: IFFALSE 22481
// if not HasTask ( driver ) then
22500: LD_VAR 0 5
22504: PPUSH
22505: CALL_OW 314
22509: NOT
22510: IFFALSE 22526
// ComEnterUnit ( driver , factory ) ;
22512: LD_VAR 0 5
22516: PPUSH
22517: LD_VAR 0 2
22521: PPUSH
22522: CALL_OW 120
// end else
22526: GO 22542
// AddComEnterUnit ( driver , factory ) ;
22528: LD_VAR 0 5
22532: PPUSH
22533: LD_VAR 0 2
22537: PPUSH
22538: CALL_OW 180
// wait ( 0 0$1 ) ;
22542: LD_INT 35
22544: PPUSH
22545: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
22549: LD_ADDR_EXP 85
22553: PUSH
22554: LD_EXP 85
22558: PUSH
22559: LD_VAR 0 5
22563: DIFF
22564: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
22565: LD_ADDR_EXP 85
22569: PUSH
22570: LD_EXP 85
22574: PUSH
22575: LD_VAR 0 1
22579: DIFF
22580: ST_TO_ADDR
// break ;
22581: GO 22734
// end ; end else
22583: GO 22732
// if GetControl ( vehicle ) = control_remote then
22585: LD_VAR 0 1
22589: PPUSH
22590: CALL_OW 263
22594: PUSH
22595: LD_INT 2
22597: EQUAL
22598: IFFALSE 22684
// begin wait ( 0 0$2 ) ;
22600: LD_INT 70
22602: PPUSH
22603: CALL_OW 67
// repeat wait ( 10 ) ;
22607: LD_INT 10
22609: PPUSH
22610: CALL_OW 67
// Connect ( vehicle ) ;
22614: LD_VAR 0 1
22618: PPUSH
22619: CALL 35942 0 1
// until IsControledBy ( vehicle ) ;
22623: LD_VAR 0 1
22627: PPUSH
22628: CALL_OW 312
22632: IFFALSE 22607
// wait ( 10 ) ;
22634: LD_INT 10
22636: PPUSH
22637: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22641: LD_VAR 0 1
22645: PPUSH
22646: LD_EXP 84
22650: PUSH
22651: LD_VAR 0 4
22655: ARRAY
22656: PUSH
22657: LD_INT 3
22659: ARRAY
22660: PPUSH
22661: LD_EXP 84
22665: PUSH
22666: LD_VAR 0 4
22670: ARRAY
22671: PUSH
22672: LD_INT 4
22674: ARRAY
22675: PPUSH
22676: CALL_OW 111
// break ;
22680: GO 22734
// end else
22682: GO 22732
// begin wait ( 0 0$3 ) ;
22684: LD_INT 105
22686: PPUSH
22687: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
22691: LD_VAR 0 1
22695: PPUSH
22696: LD_EXP 84
22700: PUSH
22701: LD_VAR 0 4
22705: ARRAY
22706: PUSH
22707: LD_INT 3
22709: ARRAY
22710: PPUSH
22711: LD_EXP 84
22715: PUSH
22716: LD_VAR 0 4
22720: ARRAY
22721: PUSH
22722: LD_INT 4
22724: ARRAY
22725: PPUSH
22726: CALL_OW 111
// break ;
22730: GO 22734
// end ; end ;
22732: GO 22183
22734: POP
22735: POP
// end ;
22736: LD_VAR 0 3
22740: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22741: LD_INT 0
22743: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22744: LD_VAR 0 1
22748: PUSH
22749: LD_INT 250
22751: EQUAL
22752: IFFALSE 22769
22754: PUSH
22755: LD_VAR 0 2
22759: PPUSH
22760: CALL_OW 264
22764: PUSH
22765: LD_INT 81
22767: EQUAL
22768: AND
22769: IFFALSE 22790
// MinerPlaceMine ( unit , x , y ) ;
22771: LD_VAR 0 2
22775: PPUSH
22776: LD_VAR 0 4
22780: PPUSH
22781: LD_VAR 0 5
22785: PPUSH
22786: CALL 25922 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22790: LD_VAR 0 1
22794: PUSH
22795: LD_INT 251
22797: EQUAL
22798: IFFALSE 22815
22800: PUSH
22801: LD_VAR 0 2
22805: PPUSH
22806: CALL_OW 264
22810: PUSH
22811: LD_INT 81
22813: EQUAL
22814: AND
22815: IFFALSE 22836
// MinerDetonateMine ( unit , x , y ) ;
22817: LD_VAR 0 2
22821: PPUSH
22822: LD_VAR 0 4
22826: PPUSH
22827: LD_VAR 0 5
22831: PPUSH
22832: CALL 26201 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22836: LD_VAR 0 1
22840: PUSH
22841: LD_INT 252
22843: EQUAL
22844: IFFALSE 22861
22846: PUSH
22847: LD_VAR 0 2
22851: PPUSH
22852: CALL_OW 264
22856: PUSH
22857: LD_INT 81
22859: EQUAL
22860: AND
22861: IFFALSE 22882
// MinerCreateMinefield ( unit , x , y ) ;
22863: LD_VAR 0 2
22867: PPUSH
22868: LD_VAR 0 4
22872: PPUSH
22873: LD_VAR 0 5
22877: PPUSH
22878: CALL 26620 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22882: LD_VAR 0 1
22886: PUSH
22887: LD_INT 253
22889: EQUAL
22890: IFFALSE 22907
22892: PUSH
22893: LD_VAR 0 2
22897: PPUSH
22898: CALL_OW 257
22902: PUSH
22903: LD_INT 5
22905: EQUAL
22906: AND
22907: IFFALSE 22928
// ComBinocular ( unit , x , y ) ;
22909: LD_VAR 0 2
22913: PPUSH
22914: LD_VAR 0 4
22918: PPUSH
22919: LD_VAR 0 5
22923: PPUSH
22924: CALL 26995 0 3
// if selectedUnit then
22928: LD_VAR 0 3
22932: IFFALSE 22992
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22934: LD_VAR 0 1
22938: PUSH
22939: LD_INT 254
22941: EQUAL
22942: IFFALSE 22959
22944: PUSH
22945: LD_VAR 0 2
22949: PPUSH
22950: CALL_OW 264
22954: PUSH
22955: LD_INT 99
22957: EQUAL
22958: AND
22959: IFFALSE 22976
22961: PUSH
22962: LD_VAR 0 3
22966: PPUSH
22967: CALL_OW 263
22971: PUSH
22972: LD_INT 3
22974: EQUAL
22975: AND
22976: IFFALSE 22992
// HackDestroyVehicle ( unit , selectedUnit ) ;
22978: LD_VAR 0 2
22982: PPUSH
22983: LD_VAR 0 3
22987: PPUSH
22988: CALL 25282 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22992: LD_VAR 0 1
22996: PUSH
22997: LD_INT 255
22999: EQUAL
23000: IFFALSE 23024
23002: PUSH
23003: LD_VAR 0 2
23007: PPUSH
23008: CALL_OW 264
23012: PUSH
23013: LD_INT 14
23015: PUSH
23016: LD_INT 53
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: IN
23023: AND
23024: IFFALSE 23042
23026: PUSH
23027: LD_VAR 0 4
23031: PPUSH
23032: LD_VAR 0 5
23036: PPUSH
23037: CALL_OW 488
23041: AND
23042: IFFALSE 23066
// CutTreeXYR ( unit , x , y , 12 ) ;
23044: LD_VAR 0 2
23048: PPUSH
23049: LD_VAR 0 4
23053: PPUSH
23054: LD_VAR 0 5
23058: PPUSH
23059: LD_INT 12
23061: PPUSH
23062: CALL 23257 0 4
// if cmd = 256 then
23066: LD_VAR 0 1
23070: PUSH
23071: LD_INT 256
23073: EQUAL
23074: IFFALSE 23095
// SetFactoryWaypoint ( unit , x , y ) ;
23076: LD_VAR 0 2
23080: PPUSH
23081: LD_VAR 0 4
23085: PPUSH
23086: LD_VAR 0 5
23090: PPUSH
23091: CALL 20617 0 3
// if cmd = 257 then
23095: LD_VAR 0 1
23099: PUSH
23100: LD_INT 257
23102: EQUAL
23103: IFFALSE 23124
// SetWarehouseGatheringPoint ( unit , x , y ) ;
23105: LD_VAR 0 2
23109: PPUSH
23110: LD_VAR 0 4
23114: PPUSH
23115: LD_VAR 0 5
23119: PPUSH
23120: CALL 21113 0 3
// if cmd = 258 then
23124: LD_VAR 0 1
23128: PUSH
23129: LD_INT 258
23131: EQUAL
23132: IFFALSE 23156
// BurnTreeXYR ( unit , x , y , 8 ) ;
23134: LD_VAR 0 2
23138: PPUSH
23139: LD_VAR 0 4
23143: PPUSH
23144: LD_VAR 0 5
23148: PPUSH
23149: LD_INT 8
23151: PPUSH
23152: CALL 23657 0 4
// end ;
23156: LD_VAR 0 6
23160: RET
// export function ComRadiation ( un ) ; var eff ; begin
23161: LD_INT 0
23163: PPUSH
23164: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
23165: LD_VAR 0 1
23169: PPUSH
23170: CALL_OW 264
23174: PUSH
23175: LD_INT 91
23177: NONEQUAL
23178: IFFALSE 23182
// exit ;
23180: GO 23252
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23182: LD_INT 68
23184: PPUSH
23185: LD_VAR 0 1
23189: PPUSH
23190: CALL_OW 255
23194: PPUSH
23195: CALL_OW 321
23199: PUSH
23200: LD_INT 2
23202: EQUAL
23203: IFFALSE 23215
// eff := 50 else
23205: LD_ADDR_VAR 0 3
23209: PUSH
23210: LD_INT 50
23212: ST_TO_ADDR
23213: GO 23223
// eff := 25 ;
23215: LD_ADDR_VAR 0 3
23219: PUSH
23220: LD_INT 25
23222: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23223: LD_VAR 0 1
23227: PPUSH
23228: CALL_OW 250
23232: PPUSH
23233: LD_VAR 0 1
23237: PPUSH
23238: CALL_OW 251
23242: PPUSH
23243: LD_VAR 0 3
23247: PPUSH
23248: CALL_OW 495
// end ;
23252: LD_VAR 0 2
23256: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23257: LD_INT 0
23259: PPUSH
23260: PPUSH
23261: PPUSH
23262: PPUSH
23263: PPUSH
23264: PPUSH
23265: PPUSH
23266: PPUSH
23267: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
23268: LD_VAR 0 1
23272: PPUSH
23273: CALL_OW 302
23277: NOT
23278: IFTRUE 23297
23280: PUSH
23281: LD_VAR 0 2
23285: PPUSH
23286: LD_VAR 0 3
23290: PPUSH
23291: CALL_OW 488
23295: NOT
23296: OR
23297: IFTRUE 23306
23299: PUSH
23300: LD_VAR 0 4
23304: NOT
23305: OR
23306: IFFALSE 23310
// exit ;
23308: GO 23652
// list := [ ] ;
23310: LD_ADDR_VAR 0 13
23314: PUSH
23315: EMPTY
23316: ST_TO_ADDR
// if x - r < 0 then
23317: LD_VAR 0 2
23321: PUSH
23322: LD_VAR 0 4
23326: MINUS
23327: PUSH
23328: LD_INT 0
23330: LESS
23331: IFFALSE 23343
// min_x := 0 else
23333: LD_ADDR_VAR 0 7
23337: PUSH
23338: LD_INT 0
23340: ST_TO_ADDR
23341: GO 23359
// min_x := x - r ;
23343: LD_ADDR_VAR 0 7
23347: PUSH
23348: LD_VAR 0 2
23352: PUSH
23353: LD_VAR 0 4
23357: MINUS
23358: ST_TO_ADDR
// if y - r < 0 then
23359: LD_VAR 0 3
23363: PUSH
23364: LD_VAR 0 4
23368: MINUS
23369: PUSH
23370: LD_INT 0
23372: LESS
23373: IFFALSE 23385
// min_y := 0 else
23375: LD_ADDR_VAR 0 8
23379: PUSH
23380: LD_INT 0
23382: ST_TO_ADDR
23383: GO 23401
// min_y := y - r ;
23385: LD_ADDR_VAR 0 8
23389: PUSH
23390: LD_VAR 0 3
23394: PUSH
23395: LD_VAR 0 4
23399: MINUS
23400: ST_TO_ADDR
// max_x := x + r ;
23401: LD_ADDR_VAR 0 9
23405: PUSH
23406: LD_VAR 0 2
23410: PUSH
23411: LD_VAR 0 4
23415: PLUS
23416: ST_TO_ADDR
// max_y := y + r ;
23417: LD_ADDR_VAR 0 10
23421: PUSH
23422: LD_VAR 0 3
23426: PUSH
23427: LD_VAR 0 4
23431: PLUS
23432: ST_TO_ADDR
// for _x = min_x to max_x do
23433: LD_ADDR_VAR 0 11
23437: PUSH
23438: DOUBLE
23439: LD_VAR 0 7
23443: DEC
23444: ST_TO_ADDR
23445: LD_VAR 0 9
23449: PUSH
23450: FOR_TO
23451: IFFALSE 23570
// for _y = min_y to max_y do
23453: LD_ADDR_VAR 0 12
23457: PUSH
23458: DOUBLE
23459: LD_VAR 0 8
23463: DEC
23464: ST_TO_ADDR
23465: LD_VAR 0 10
23469: PUSH
23470: FOR_TO
23471: IFFALSE 23566
// begin if not ValidHex ( _x , _y ) then
23473: LD_VAR 0 11
23477: PPUSH
23478: LD_VAR 0 12
23482: PPUSH
23483: CALL_OW 488
23487: NOT
23488: IFFALSE 23492
// continue ;
23490: GO 23470
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23492: LD_VAR 0 11
23496: PPUSH
23497: LD_VAR 0 12
23501: PPUSH
23502: CALL_OW 351
23506: IFFALSE 23524
23508: PUSH
23509: LD_VAR 0 11
23513: PPUSH
23514: LD_VAR 0 12
23518: PPUSH
23519: CALL_OW 554
23523: AND
23524: IFFALSE 23564
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23526: LD_ADDR_VAR 0 13
23530: PUSH
23531: LD_VAR 0 13
23535: PPUSH
23536: LD_VAR 0 13
23540: PUSH
23541: LD_INT 1
23543: PLUS
23544: PPUSH
23545: LD_VAR 0 11
23549: PUSH
23550: LD_VAR 0 12
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PPUSH
23559: CALL_OW 2
23563: ST_TO_ADDR
// end ;
23564: GO 23470
23566: POP
23567: POP
23568: GO 23450
23570: POP
23571: POP
// if not list then
23572: LD_VAR 0 13
23576: NOT
23577: IFFALSE 23581
// exit ;
23579: GO 23652
// for i in list do
23581: LD_ADDR_VAR 0 6
23585: PUSH
23586: LD_VAR 0 13
23590: PUSH
23591: FOR_IN
23592: IFFALSE 23650
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23594: LD_VAR 0 1
23598: PPUSH
23599: LD_STRING M
23601: PUSH
23602: LD_VAR 0 6
23606: PUSH
23607: LD_INT 1
23609: ARRAY
23610: PUSH
23611: LD_VAR 0 6
23615: PUSH
23616: LD_INT 2
23618: ARRAY
23619: PUSH
23620: LD_INT 0
23622: PUSH
23623: LD_INT 0
23625: PUSH
23626: LD_INT 0
23628: PUSH
23629: LD_INT 0
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: PUSH
23641: EMPTY
23642: LIST
23643: PPUSH
23644: CALL_OW 447
23648: GO 23591
23650: POP
23651: POP
// end ;
23652: LD_VAR 0 5
23656: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
23657: LD_INT 0
23659: PPUSH
23660: PPUSH
23661: PPUSH
23662: PPUSH
23663: PPUSH
23664: PPUSH
23665: PPUSH
23666: PPUSH
23667: PPUSH
23668: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
23669: LD_VAR 0 1
23673: PPUSH
23674: CALL_OW 302
23678: NOT
23679: IFTRUE 23698
23681: PUSH
23682: LD_VAR 0 2
23686: PPUSH
23687: LD_VAR 0 3
23691: PPUSH
23692: CALL_OW 488
23696: NOT
23697: OR
23698: IFTRUE 23707
23700: PUSH
23701: LD_VAR 0 4
23705: NOT
23706: OR
23707: IFFALSE 23711
// exit ;
23709: GO 24228
// list := [ ] ;
23711: LD_ADDR_VAR 0 13
23715: PUSH
23716: EMPTY
23717: ST_TO_ADDR
// if x - r < 0 then
23718: LD_VAR 0 2
23722: PUSH
23723: LD_VAR 0 4
23727: MINUS
23728: PUSH
23729: LD_INT 0
23731: LESS
23732: IFFALSE 23744
// min_x := 0 else
23734: LD_ADDR_VAR 0 7
23738: PUSH
23739: LD_INT 0
23741: ST_TO_ADDR
23742: GO 23760
// min_x := x - r ;
23744: LD_ADDR_VAR 0 7
23748: PUSH
23749: LD_VAR 0 2
23753: PUSH
23754: LD_VAR 0 4
23758: MINUS
23759: ST_TO_ADDR
// if y - r < 0 then
23760: LD_VAR 0 3
23764: PUSH
23765: LD_VAR 0 4
23769: MINUS
23770: PUSH
23771: LD_INT 0
23773: LESS
23774: IFFALSE 23786
// min_y := 0 else
23776: LD_ADDR_VAR 0 8
23780: PUSH
23781: LD_INT 0
23783: ST_TO_ADDR
23784: GO 23802
// min_y := y - r ;
23786: LD_ADDR_VAR 0 8
23790: PUSH
23791: LD_VAR 0 3
23795: PUSH
23796: LD_VAR 0 4
23800: MINUS
23801: ST_TO_ADDR
// max_x := x + r ;
23802: LD_ADDR_VAR 0 9
23806: PUSH
23807: LD_VAR 0 2
23811: PUSH
23812: LD_VAR 0 4
23816: PLUS
23817: ST_TO_ADDR
// max_y := y + r ;
23818: LD_ADDR_VAR 0 10
23822: PUSH
23823: LD_VAR 0 3
23827: PUSH
23828: LD_VAR 0 4
23832: PLUS
23833: ST_TO_ADDR
// for _x = min_x to max_x do
23834: LD_ADDR_VAR 0 11
23838: PUSH
23839: DOUBLE
23840: LD_VAR 0 7
23844: DEC
23845: ST_TO_ADDR
23846: LD_VAR 0 9
23850: PUSH
23851: FOR_TO
23852: IFFALSE 23971
// for _y = min_y to max_y do
23854: LD_ADDR_VAR 0 12
23858: PUSH
23859: DOUBLE
23860: LD_VAR 0 8
23864: DEC
23865: ST_TO_ADDR
23866: LD_VAR 0 10
23870: PUSH
23871: FOR_TO
23872: IFFALSE 23967
// begin if not ValidHex ( _x , _y ) then
23874: LD_VAR 0 11
23878: PPUSH
23879: LD_VAR 0 12
23883: PPUSH
23884: CALL_OW 488
23888: NOT
23889: IFFALSE 23893
// continue ;
23891: GO 23871
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23893: LD_VAR 0 11
23897: PPUSH
23898: LD_VAR 0 12
23902: PPUSH
23903: CALL_OW 351
23907: IFFALSE 23925
23909: PUSH
23910: LD_VAR 0 11
23914: PPUSH
23915: LD_VAR 0 12
23919: PPUSH
23920: CALL_OW 554
23924: AND
23925: IFFALSE 23965
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23927: LD_ADDR_VAR 0 13
23931: PUSH
23932: LD_VAR 0 13
23936: PPUSH
23937: LD_VAR 0 13
23941: PUSH
23942: LD_INT 1
23944: PLUS
23945: PPUSH
23946: LD_VAR 0 11
23950: PUSH
23951: LD_VAR 0 12
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PPUSH
23960: CALL_OW 2
23964: ST_TO_ADDR
// end ;
23965: GO 23871
23967: POP
23968: POP
23969: GO 23851
23971: POP
23972: POP
// if not list then
23973: LD_VAR 0 13
23977: NOT
23978: IFFALSE 23982
// exit ;
23980: GO 24228
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
23982: LD_ADDR_VAR 0 13
23986: PUSH
23987: LD_VAR 0 1
23991: PPUSH
23992: LD_VAR 0 13
23996: PPUSH
23997: LD_INT 1
23999: PPUSH
24000: LD_INT 1
24002: PPUSH
24003: CALL 33070 0 4
24007: ST_TO_ADDR
// ComStop ( flame ) ;
24008: LD_VAR 0 1
24012: PPUSH
24013: CALL_OW 141
// for i in list do
24017: LD_ADDR_VAR 0 6
24021: PUSH
24022: LD_VAR 0 13
24026: PUSH
24027: FOR_IN
24028: IFFALSE 24059
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
24030: LD_VAR 0 1
24034: PPUSH
24035: LD_VAR 0 6
24039: PUSH
24040: LD_INT 1
24042: ARRAY
24043: PPUSH
24044: LD_VAR 0 6
24048: PUSH
24049: LD_INT 2
24051: ARRAY
24052: PPUSH
24053: CALL_OW 176
24057: GO 24027
24059: POP
24060: POP
// repeat wait ( 0 0$1 ) ;
24061: LD_INT 35
24063: PPUSH
24064: CALL_OW 67
// task := GetTaskList ( flame ) ;
24068: LD_ADDR_VAR 0 14
24072: PUSH
24073: LD_VAR 0 1
24077: PPUSH
24078: CALL_OW 437
24082: ST_TO_ADDR
// if not task then
24083: LD_VAR 0 14
24087: NOT
24088: IFFALSE 24092
// exit ;
24090: GO 24228
// if task [ 1 ] [ 1 ] <> | then
24092: LD_VAR 0 14
24096: PUSH
24097: LD_INT 1
24099: ARRAY
24100: PUSH
24101: LD_INT 1
24103: ARRAY
24104: PUSH
24105: LD_STRING |
24107: NONEQUAL
24108: IFFALSE 24112
// exit ;
24110: GO 24228
// _x := task [ 1 ] [ 2 ] ;
24112: LD_ADDR_VAR 0 11
24116: PUSH
24117: LD_VAR 0 14
24121: PUSH
24122: LD_INT 1
24124: ARRAY
24125: PUSH
24126: LD_INT 2
24128: ARRAY
24129: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
24130: LD_ADDR_VAR 0 12
24134: PUSH
24135: LD_VAR 0 14
24139: PUSH
24140: LD_INT 1
24142: ARRAY
24143: PUSH
24144: LD_INT 3
24146: ARRAY
24147: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
24148: LD_VAR 0 11
24152: PPUSH
24153: LD_VAR 0 12
24157: PPUSH
24158: CALL_OW 351
24162: NOT
24163: IFTRUE 24182
24165: PUSH
24166: LD_VAR 0 11
24170: PPUSH
24171: LD_VAR 0 12
24175: PPUSH
24176: CALL_OW 554
24180: NOT
24181: OR
24182: IFFALSE 24216
// begin task := Delete ( task , 1 ) ;
24184: LD_ADDR_VAR 0 14
24188: PUSH
24189: LD_VAR 0 14
24193: PPUSH
24194: LD_INT 1
24196: PPUSH
24197: CALL_OW 3
24201: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
24202: LD_VAR 0 1
24206: PPUSH
24207: LD_VAR 0 14
24211: PPUSH
24212: CALL_OW 446
// end ; until not HasTask ( flame ) ;
24216: LD_VAR 0 1
24220: PPUSH
24221: CALL_OW 314
24225: NOT
24226: IFFALSE 24061
// end ;
24228: LD_VAR 0 5
24232: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24233: LD_EXP 88
24237: NOT
24238: IFFALSE 24288
24240: GO 24242
24242: DISABLE
// begin initHack := true ;
24243: LD_ADDR_EXP 88
24247: PUSH
24248: LD_INT 1
24250: ST_TO_ADDR
// hackTanks := [ ] ;
24251: LD_ADDR_EXP 89
24255: PUSH
24256: EMPTY
24257: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24258: LD_ADDR_EXP 90
24262: PUSH
24263: EMPTY
24264: ST_TO_ADDR
// hackLimit := 3 ;
24265: LD_ADDR_EXP 91
24269: PUSH
24270: LD_INT 3
24272: ST_TO_ADDR
// hackDist := 12 ;
24273: LD_ADDR_EXP 92
24277: PUSH
24278: LD_INT 12
24280: ST_TO_ADDR
// hackCounter := [ ] ;
24281: LD_ADDR_EXP 93
24285: PUSH
24286: EMPTY
24287: ST_TO_ADDR
// end ;
24288: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24289: LD_EXP 88
24293: IFFALSE 24311
24295: PUSH
24296: LD_INT 34
24298: PUSH
24299: LD_INT 99
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PPUSH
24306: CALL_OW 69
24310: AND
24311: IFFALSE 24564
24313: GO 24315
24315: DISABLE
24316: LD_INT 0
24318: PPUSH
24319: PPUSH
// begin enable ;
24320: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24321: LD_ADDR_VAR 0 1
24325: PUSH
24326: LD_INT 34
24328: PUSH
24329: LD_INT 99
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PPUSH
24336: CALL_OW 69
24340: PUSH
24341: FOR_IN
24342: IFFALSE 24562
// begin if not i in hackTanks then
24344: LD_VAR 0 1
24348: PUSH
24349: LD_EXP 89
24353: IN
24354: NOT
24355: IFFALSE 24438
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24357: LD_ADDR_EXP 89
24361: PUSH
24362: LD_EXP 89
24366: PPUSH
24367: LD_EXP 89
24371: PUSH
24372: LD_INT 1
24374: PLUS
24375: PPUSH
24376: LD_VAR 0 1
24380: PPUSH
24381: CALL_OW 1
24385: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24386: LD_ADDR_EXP 90
24390: PUSH
24391: LD_EXP 90
24395: PPUSH
24396: LD_EXP 90
24400: PUSH
24401: LD_INT 1
24403: PLUS
24404: PPUSH
24405: EMPTY
24406: PPUSH
24407: CALL_OW 1
24411: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24412: LD_ADDR_EXP 93
24416: PUSH
24417: LD_EXP 93
24421: PPUSH
24422: LD_EXP 93
24426: PUSH
24427: LD_INT 1
24429: PLUS
24430: PPUSH
24431: EMPTY
24432: PPUSH
24433: CALL_OW 1
24437: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24438: LD_VAR 0 1
24442: PPUSH
24443: CALL_OW 302
24447: NOT
24448: IFFALSE 24461
// begin HackUnlinkAll ( i ) ;
24450: LD_VAR 0 1
24454: PPUSH
24455: CALL 24567 0 1
// continue ;
24459: GO 24341
// end ; HackCheckCapturedStatus ( i ) ;
24461: LD_VAR 0 1
24465: PPUSH
24466: CALL 25012 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24470: LD_ADDR_VAR 0 2
24474: PUSH
24475: LD_INT 81
24477: PUSH
24478: LD_VAR 0 1
24482: PPUSH
24483: CALL_OW 255
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: LD_INT 33
24494: PUSH
24495: LD_INT 3
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PUSH
24502: LD_INT 91
24504: PUSH
24505: LD_VAR 0 1
24509: PUSH
24510: LD_EXP 92
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 50
24522: PUSH
24523: EMPTY
24524: LIST
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: PPUSH
24532: CALL_OW 69
24536: ST_TO_ADDR
// if not tmp then
24537: LD_VAR 0 2
24541: NOT
24542: IFFALSE 24546
// continue ;
24544: GO 24341
// HackLink ( i , tmp ) ;
24546: LD_VAR 0 1
24550: PPUSH
24551: LD_VAR 0 2
24555: PPUSH
24556: CALL 24703 0 2
// end ;
24560: GO 24341
24562: POP
24563: POP
// end ;
24564: PPOPN 2
24566: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24567: LD_INT 0
24569: PPUSH
24570: PPUSH
24571: PPUSH
// if not hack in hackTanks then
24572: LD_VAR 0 1
24576: PUSH
24577: LD_EXP 89
24581: IN
24582: NOT
24583: IFFALSE 24587
// exit ;
24585: GO 24698
// index := GetElementIndex ( hackTanks , hack ) ;
24587: LD_ADDR_VAR 0 4
24591: PUSH
24592: LD_EXP 89
24596: PPUSH
24597: LD_VAR 0 1
24601: PPUSH
24602: CALL 32365 0 2
24606: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24607: LD_EXP 90
24611: PUSH
24612: LD_VAR 0 4
24616: ARRAY
24617: IFFALSE 24698
// begin for i in hackTanksCaptured [ index ] do
24619: LD_ADDR_VAR 0 3
24623: PUSH
24624: LD_EXP 90
24628: PUSH
24629: LD_VAR 0 4
24633: ARRAY
24634: PUSH
24635: FOR_IN
24636: IFFALSE 24662
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24638: LD_VAR 0 3
24642: PUSH
24643: LD_INT 1
24645: ARRAY
24646: PPUSH
24647: LD_VAR 0 3
24651: PUSH
24652: LD_INT 2
24654: ARRAY
24655: PPUSH
24656: CALL_OW 235
24660: GO 24635
24662: POP
24663: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24664: LD_ADDR_EXP 90
24668: PUSH
24669: LD_EXP 90
24673: PPUSH
24674: LD_VAR 0 4
24678: PPUSH
24679: EMPTY
24680: PPUSH
24681: CALL_OW 1
24685: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24686: LD_VAR 0 1
24690: PPUSH
24691: LD_INT 0
24693: PPUSH
24694: CALL_OW 505
// end ; end ;
24698: LD_VAR 0 2
24702: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24703: LD_INT 0
24705: PPUSH
24706: PPUSH
24707: PPUSH
// if not hack in hackTanks or not vehicles then
24708: LD_VAR 0 1
24712: PUSH
24713: LD_EXP 89
24717: IN
24718: NOT
24719: IFTRUE 24728
24721: PUSH
24722: LD_VAR 0 2
24726: NOT
24727: OR
24728: IFFALSE 24732
// exit ;
24730: GO 25007
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24732: LD_ADDR_VAR 0 2
24736: PUSH
24737: LD_VAR 0 1
24741: PPUSH
24742: LD_VAR 0 2
24746: PPUSH
24747: LD_INT 1
24749: PPUSH
24750: LD_INT 1
24752: PPUSH
24753: CALL 33017 0 4
24757: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24758: LD_ADDR_VAR 0 5
24762: PUSH
24763: LD_EXP 89
24767: PPUSH
24768: LD_VAR 0 1
24772: PPUSH
24773: CALL 32365 0 2
24777: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24778: LD_EXP 90
24782: PUSH
24783: LD_VAR 0 5
24787: ARRAY
24788: PUSH
24789: LD_EXP 91
24793: LESS
24794: IFFALSE 24983
// begin for i := 1 to vehicles do
24796: LD_ADDR_VAR 0 4
24800: PUSH
24801: DOUBLE
24802: LD_INT 1
24804: DEC
24805: ST_TO_ADDR
24806: LD_VAR 0 2
24810: PUSH
24811: FOR_TO
24812: IFFALSE 24981
// begin if hackTanksCaptured [ index ] = hackLimit then
24814: LD_EXP 90
24818: PUSH
24819: LD_VAR 0 5
24823: ARRAY
24824: PUSH
24825: LD_EXP 91
24829: EQUAL
24830: IFFALSE 24834
// break ;
24832: GO 24981
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24834: LD_ADDR_EXP 93
24838: PUSH
24839: LD_EXP 93
24843: PPUSH
24844: LD_VAR 0 5
24848: PPUSH
24849: LD_EXP 93
24853: PUSH
24854: LD_VAR 0 5
24858: ARRAY
24859: PUSH
24860: LD_INT 1
24862: PLUS
24863: PPUSH
24864: CALL_OW 1
24868: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24869: LD_ADDR_EXP 90
24873: PUSH
24874: LD_EXP 90
24878: PPUSH
24879: LD_VAR 0 5
24883: PUSH
24884: LD_EXP 90
24888: PUSH
24889: LD_VAR 0 5
24893: ARRAY
24894: PUSH
24895: LD_INT 1
24897: PLUS
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PPUSH
24903: LD_VAR 0 2
24907: PUSH
24908: LD_VAR 0 4
24912: ARRAY
24913: PUSH
24914: LD_VAR 0 2
24918: PUSH
24919: LD_VAR 0 4
24923: ARRAY
24924: PPUSH
24925: CALL_OW 255
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PPUSH
24934: CALL 32582 0 3
24938: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24939: LD_VAR 0 2
24943: PUSH
24944: LD_VAR 0 4
24948: ARRAY
24949: PPUSH
24950: LD_VAR 0 1
24954: PPUSH
24955: CALL_OW 255
24959: PPUSH
24960: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24964: LD_VAR 0 2
24968: PUSH
24969: LD_VAR 0 4
24973: ARRAY
24974: PPUSH
24975: CALL_OW 141
// end ;
24979: GO 24811
24981: POP
24982: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24983: LD_VAR 0 1
24987: PPUSH
24988: LD_EXP 90
24992: PUSH
24993: LD_VAR 0 5
24997: ARRAY
24998: PUSH
24999: LD_INT 0
25001: PLUS
25002: PPUSH
25003: CALL_OW 505
// end ;
25007: LD_VAR 0 3
25011: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25012: LD_INT 0
25014: PPUSH
25015: PPUSH
25016: PPUSH
25017: PPUSH
// if not hack in hackTanks then
25018: LD_VAR 0 1
25022: PUSH
25023: LD_EXP 89
25027: IN
25028: NOT
25029: IFFALSE 25033
// exit ;
25031: GO 25277
// index := GetElementIndex ( hackTanks , hack ) ;
25033: LD_ADDR_VAR 0 4
25037: PUSH
25038: LD_EXP 89
25042: PPUSH
25043: LD_VAR 0 1
25047: PPUSH
25048: CALL 32365 0 2
25052: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25053: LD_ADDR_VAR 0 3
25057: PUSH
25058: DOUBLE
25059: LD_EXP 90
25063: PUSH
25064: LD_VAR 0 4
25068: ARRAY
25069: INC
25070: ST_TO_ADDR
25071: LD_INT 1
25073: PUSH
25074: FOR_DOWNTO
25075: IFFALSE 25251
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25077: LD_ADDR_VAR 0 5
25081: PUSH
25082: LD_EXP 90
25086: PUSH
25087: LD_VAR 0 4
25091: ARRAY
25092: PUSH
25093: LD_VAR 0 3
25097: ARRAY
25098: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25099: LD_VAR 0 5
25103: PUSH
25104: LD_INT 1
25106: ARRAY
25107: PPUSH
25108: CALL_OW 302
25112: NOT
25113: IFTRUE 25141
25115: PUSH
25116: LD_VAR 0 5
25120: PUSH
25121: LD_INT 1
25123: ARRAY
25124: PPUSH
25125: CALL_OW 255
25129: PUSH
25130: LD_VAR 0 1
25134: PPUSH
25135: CALL_OW 255
25139: NONEQUAL
25140: OR
25141: IFFALSE 25249
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25143: LD_VAR 0 5
25147: PUSH
25148: LD_INT 1
25150: ARRAY
25151: PPUSH
25152: CALL_OW 305
25156: IFFALSE 25184
25158: PUSH
25159: LD_VAR 0 5
25163: PUSH
25164: LD_INT 1
25166: ARRAY
25167: PPUSH
25168: CALL_OW 255
25172: PUSH
25173: LD_VAR 0 1
25177: PPUSH
25178: CALL_OW 255
25182: EQUAL
25183: AND
25184: IFFALSE 25208
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25186: LD_VAR 0 5
25190: PUSH
25191: LD_INT 1
25193: ARRAY
25194: PPUSH
25195: LD_VAR 0 5
25199: PUSH
25200: LD_INT 2
25202: ARRAY
25203: PPUSH
25204: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25208: LD_ADDR_EXP 90
25212: PUSH
25213: LD_EXP 90
25217: PPUSH
25218: LD_VAR 0 4
25222: PPUSH
25223: LD_EXP 90
25227: PUSH
25228: LD_VAR 0 4
25232: ARRAY
25233: PPUSH
25234: LD_VAR 0 3
25238: PPUSH
25239: CALL_OW 3
25243: PPUSH
25244: CALL_OW 1
25248: ST_TO_ADDR
// end ; end ;
25249: GO 25074
25251: POP
25252: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25253: LD_VAR 0 1
25257: PPUSH
25258: LD_EXP 90
25262: PUSH
25263: LD_VAR 0 4
25267: ARRAY
25268: PUSH
25269: LD_INT 0
25271: PLUS
25272: PPUSH
25273: CALL_OW 505
// end ;
25277: LD_VAR 0 2
25281: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25282: LD_INT 0
25284: PPUSH
25285: PPUSH
25286: PPUSH
25287: PPUSH
// if not hack in hackTanks then
25288: LD_VAR 0 1
25292: PUSH
25293: LD_EXP 89
25297: IN
25298: NOT
25299: IFFALSE 25303
// exit ;
25301: GO 25388
// index := GetElementIndex ( hackTanks , hack ) ;
25303: LD_ADDR_VAR 0 5
25307: PUSH
25308: LD_EXP 89
25312: PPUSH
25313: LD_VAR 0 1
25317: PPUSH
25318: CALL 32365 0 2
25322: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25323: LD_ADDR_VAR 0 4
25327: PUSH
25328: DOUBLE
25329: LD_INT 1
25331: DEC
25332: ST_TO_ADDR
25333: LD_EXP 90
25337: PUSH
25338: LD_VAR 0 5
25342: ARRAY
25343: PUSH
25344: FOR_TO
25345: IFFALSE 25386
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25347: LD_EXP 90
25351: PUSH
25352: LD_VAR 0 5
25356: ARRAY
25357: PUSH
25358: LD_VAR 0 4
25362: ARRAY
25363: PUSH
25364: LD_INT 1
25366: ARRAY
25367: PUSH
25368: LD_VAR 0 2
25372: EQUAL
25373: IFFALSE 25384
// KillUnit ( vehicle ) ;
25375: LD_VAR 0 2
25379: PPUSH
25380: CALL_OW 66
25384: GO 25344
25386: POP
25387: POP
// end ;
25388: LD_VAR 0 3
25392: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25393: LD_EXP 94
25397: NOT
25398: IFFALSE 25433
25400: GO 25402
25402: DISABLE
// begin initMiner := true ;
25403: LD_ADDR_EXP 94
25407: PUSH
25408: LD_INT 1
25410: ST_TO_ADDR
// minersList := [ ] ;
25411: LD_ADDR_EXP 95
25415: PUSH
25416: EMPTY
25417: ST_TO_ADDR
// minerMinesList := [ ] ;
25418: LD_ADDR_EXP 96
25422: PUSH
25423: EMPTY
25424: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25425: LD_ADDR_EXP 97
25429: PUSH
25430: LD_INT 5
25432: ST_TO_ADDR
// end ;
25433: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25434: LD_EXP 94
25438: IFFALSE 25456
25440: PUSH
25441: LD_INT 34
25443: PUSH
25444: LD_INT 81
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PPUSH
25451: CALL_OW 69
25455: AND
25456: IFFALSE 25919
25458: GO 25460
25460: DISABLE
25461: LD_INT 0
25463: PPUSH
25464: PPUSH
25465: PPUSH
25466: PPUSH
// begin enable ;
25467: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25468: LD_ADDR_VAR 0 1
25472: PUSH
25473: LD_INT 34
25475: PUSH
25476: LD_INT 81
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PPUSH
25483: CALL_OW 69
25487: PUSH
25488: FOR_IN
25489: IFFALSE 25561
// begin if not i in minersList then
25491: LD_VAR 0 1
25495: PUSH
25496: LD_EXP 95
25500: IN
25501: NOT
25502: IFFALSE 25559
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25504: LD_ADDR_EXP 95
25508: PUSH
25509: LD_EXP 95
25513: PPUSH
25514: LD_EXP 95
25518: PUSH
25519: LD_INT 1
25521: PLUS
25522: PPUSH
25523: LD_VAR 0 1
25527: PPUSH
25528: CALL_OW 1
25532: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25533: LD_ADDR_EXP 96
25537: PUSH
25538: LD_EXP 96
25542: PPUSH
25543: LD_EXP 96
25547: PUSH
25548: LD_INT 1
25550: PLUS
25551: PPUSH
25552: EMPTY
25553: PPUSH
25554: CALL_OW 1
25558: ST_TO_ADDR
// end end ;
25559: GO 25488
25561: POP
25562: POP
// for i := minerMinesList downto 1 do
25563: LD_ADDR_VAR 0 1
25567: PUSH
25568: DOUBLE
25569: LD_EXP 96
25573: INC
25574: ST_TO_ADDR
25575: LD_INT 1
25577: PUSH
25578: FOR_DOWNTO
25579: IFFALSE 25917
// begin if IsLive ( minersList [ i ] ) then
25581: LD_EXP 95
25585: PUSH
25586: LD_VAR 0 1
25590: ARRAY
25591: PPUSH
25592: CALL_OW 300
25596: IFFALSE 25624
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25598: LD_EXP 95
25602: PUSH
25603: LD_VAR 0 1
25607: ARRAY
25608: PPUSH
25609: LD_EXP 96
25613: PUSH
25614: LD_VAR 0 1
25618: ARRAY
25619: PPUSH
25620: CALL_OW 505
// if not minerMinesList [ i ] then
25624: LD_EXP 96
25628: PUSH
25629: LD_VAR 0 1
25633: ARRAY
25634: NOT
25635: IFFALSE 25639
// continue ;
25637: GO 25578
// for j := minerMinesList [ i ] downto 1 do
25639: LD_ADDR_VAR 0 2
25643: PUSH
25644: DOUBLE
25645: LD_EXP 96
25649: PUSH
25650: LD_VAR 0 1
25654: ARRAY
25655: INC
25656: ST_TO_ADDR
25657: LD_INT 1
25659: PUSH
25660: FOR_DOWNTO
25661: IFFALSE 25913
// begin side := GetSide ( minersList [ i ] ) ;
25663: LD_ADDR_VAR 0 3
25667: PUSH
25668: LD_EXP 95
25672: PUSH
25673: LD_VAR 0 1
25677: ARRAY
25678: PPUSH
25679: CALL_OW 255
25683: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25684: LD_ADDR_VAR 0 4
25688: PUSH
25689: LD_EXP 96
25693: PUSH
25694: LD_VAR 0 1
25698: ARRAY
25699: PUSH
25700: LD_VAR 0 2
25704: ARRAY
25705: PUSH
25706: LD_INT 1
25708: ARRAY
25709: PPUSH
25710: LD_EXP 96
25714: PUSH
25715: LD_VAR 0 1
25719: ARRAY
25720: PUSH
25721: LD_VAR 0 2
25725: ARRAY
25726: PUSH
25727: LD_INT 2
25729: ARRAY
25730: PPUSH
25731: CALL_OW 428
25735: ST_TO_ADDR
// if not tmp then
25736: LD_VAR 0 4
25740: NOT
25741: IFFALSE 25745
// continue ;
25743: GO 25660
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25745: LD_VAR 0 4
25749: PUSH
25750: LD_INT 81
25752: PUSH
25753: LD_VAR 0 3
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PPUSH
25762: CALL_OW 69
25766: IN
25767: IFFALSE 25817
25769: PUSH
25770: LD_EXP 96
25774: PUSH
25775: LD_VAR 0 1
25779: ARRAY
25780: PUSH
25781: LD_VAR 0 2
25785: ARRAY
25786: PUSH
25787: LD_INT 1
25789: ARRAY
25790: PPUSH
25791: LD_EXP 96
25795: PUSH
25796: LD_VAR 0 1
25800: ARRAY
25801: PUSH
25802: LD_VAR 0 2
25806: ARRAY
25807: PUSH
25808: LD_INT 2
25810: ARRAY
25811: PPUSH
25812: CALL_OW 458
25816: AND
25817: IFFALSE 25911
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25819: LD_EXP 96
25823: PUSH
25824: LD_VAR 0 1
25828: ARRAY
25829: PUSH
25830: LD_VAR 0 2
25834: ARRAY
25835: PUSH
25836: LD_INT 1
25838: ARRAY
25839: PPUSH
25840: LD_EXP 96
25844: PUSH
25845: LD_VAR 0 1
25849: ARRAY
25850: PUSH
25851: LD_VAR 0 2
25855: ARRAY
25856: PUSH
25857: LD_INT 2
25859: ARRAY
25860: PPUSH
25861: LD_VAR 0 3
25865: PPUSH
25866: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25870: LD_ADDR_EXP 96
25874: PUSH
25875: LD_EXP 96
25879: PPUSH
25880: LD_VAR 0 1
25884: PPUSH
25885: LD_EXP 96
25889: PUSH
25890: LD_VAR 0 1
25894: ARRAY
25895: PPUSH
25896: LD_VAR 0 2
25900: PPUSH
25901: CALL_OW 3
25905: PPUSH
25906: CALL_OW 1
25910: ST_TO_ADDR
// end ; end ;
25911: GO 25660
25913: POP
25914: POP
// end ;
25915: GO 25578
25917: POP
25918: POP
// end ;
25919: PPOPN 4
25921: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25922: LD_INT 0
25924: PPUSH
25925: PPUSH
// result := false ;
25926: LD_ADDR_VAR 0 4
25930: PUSH
25931: LD_INT 0
25933: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25934: LD_VAR 0 1
25938: PPUSH
25939: CALL_OW 264
25943: PUSH
25944: LD_INT 81
25946: EQUAL
25947: NOT
25948: IFFALSE 25952
// exit ;
25950: GO 26196
// index := GetElementIndex ( minersList , unit ) ;
25952: LD_ADDR_VAR 0 5
25956: PUSH
25957: LD_EXP 95
25961: PPUSH
25962: LD_VAR 0 1
25966: PPUSH
25967: CALL 32365 0 2
25971: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25972: LD_EXP 96
25976: PUSH
25977: LD_VAR 0 5
25981: ARRAY
25982: PUSH
25983: LD_EXP 97
25987: GREATEREQUAL
25988: IFFALSE 25992
// exit ;
25990: GO 26196
// ComMoveXY ( unit , x , y ) ;
25992: LD_VAR 0 1
25996: PPUSH
25997: LD_VAR 0 2
26001: PPUSH
26002: LD_VAR 0 3
26006: PPUSH
26007: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26011: LD_INT 35
26013: PPUSH
26014: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26018: LD_VAR 0 1
26022: PPUSH
26023: LD_VAR 0 2
26027: PPUSH
26028: LD_VAR 0 3
26032: PPUSH
26033: CALL 64411 0 3
26037: NOT
26038: IFFALSE 26051
26040: PUSH
26041: LD_VAR 0 1
26045: PPUSH
26046: CALL_OW 314
26050: AND
26051: IFFALSE 26055
// exit ;
26053: GO 26196
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26055: LD_VAR 0 2
26059: PPUSH
26060: LD_VAR 0 3
26064: PPUSH
26065: CALL_OW 428
26069: PUSH
26070: LD_VAR 0 1
26074: EQUAL
26075: IFFALSE 26089
26077: PUSH
26078: LD_VAR 0 1
26082: PPUSH
26083: CALL_OW 314
26087: NOT
26088: AND
26089: IFFALSE 26011
// PlaySoundXY ( x , y , PlantMine ) ;
26091: LD_VAR 0 2
26095: PPUSH
26096: LD_VAR 0 3
26100: PPUSH
26101: LD_STRING PlantMine
26103: PPUSH
26104: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26108: LD_VAR 0 2
26112: PPUSH
26113: LD_VAR 0 3
26117: PPUSH
26118: LD_VAR 0 1
26122: PPUSH
26123: CALL_OW 255
26127: PPUSH
26128: LD_INT 0
26130: PPUSH
26131: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26135: LD_ADDR_EXP 96
26139: PUSH
26140: LD_EXP 96
26144: PPUSH
26145: LD_VAR 0 5
26149: PUSH
26150: LD_EXP 96
26154: PUSH
26155: LD_VAR 0 5
26159: ARRAY
26160: PUSH
26161: LD_INT 1
26163: PLUS
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PPUSH
26169: LD_VAR 0 2
26173: PUSH
26174: LD_VAR 0 3
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PPUSH
26183: CALL 32582 0 3
26187: ST_TO_ADDR
// result := true ;
26188: LD_ADDR_VAR 0 4
26192: PUSH
26193: LD_INT 1
26195: ST_TO_ADDR
// end ;
26196: LD_VAR 0 4
26200: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26201: LD_INT 0
26203: PPUSH
26204: PPUSH
26205: PPUSH
// if not unit in minersList then
26206: LD_VAR 0 1
26210: PUSH
26211: LD_EXP 95
26215: IN
26216: NOT
26217: IFFALSE 26221
// exit ;
26219: GO 26615
// index := GetElementIndex ( minersList , unit ) ;
26221: LD_ADDR_VAR 0 6
26225: PUSH
26226: LD_EXP 95
26230: PPUSH
26231: LD_VAR 0 1
26235: PPUSH
26236: CALL 32365 0 2
26240: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26241: LD_ADDR_VAR 0 5
26245: PUSH
26246: DOUBLE
26247: LD_EXP 96
26251: PUSH
26252: LD_VAR 0 6
26256: ARRAY
26257: INC
26258: ST_TO_ADDR
26259: LD_INT 1
26261: PUSH
26262: FOR_DOWNTO
26263: IFFALSE 26426
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26265: LD_EXP 96
26269: PUSH
26270: LD_VAR 0 6
26274: ARRAY
26275: PUSH
26276: LD_VAR 0 5
26280: ARRAY
26281: PUSH
26282: LD_INT 1
26284: ARRAY
26285: PUSH
26286: LD_VAR 0 2
26290: EQUAL
26291: IFFALSE 26321
26293: PUSH
26294: LD_EXP 96
26298: PUSH
26299: LD_VAR 0 6
26303: ARRAY
26304: PUSH
26305: LD_VAR 0 5
26309: ARRAY
26310: PUSH
26311: LD_INT 2
26313: ARRAY
26314: PUSH
26315: LD_VAR 0 3
26319: EQUAL
26320: AND
26321: IFFALSE 26424
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26323: LD_EXP 96
26327: PUSH
26328: LD_VAR 0 6
26332: ARRAY
26333: PUSH
26334: LD_VAR 0 5
26338: ARRAY
26339: PUSH
26340: LD_INT 1
26342: ARRAY
26343: PPUSH
26344: LD_EXP 96
26348: PUSH
26349: LD_VAR 0 6
26353: ARRAY
26354: PUSH
26355: LD_VAR 0 5
26359: ARRAY
26360: PUSH
26361: LD_INT 2
26363: ARRAY
26364: PPUSH
26365: LD_VAR 0 1
26369: PPUSH
26370: CALL_OW 255
26374: PPUSH
26375: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26379: LD_ADDR_EXP 96
26383: PUSH
26384: LD_EXP 96
26388: PPUSH
26389: LD_VAR 0 6
26393: PPUSH
26394: LD_EXP 96
26398: PUSH
26399: LD_VAR 0 6
26403: ARRAY
26404: PPUSH
26405: LD_VAR 0 5
26409: PPUSH
26410: CALL_OW 3
26414: PPUSH
26415: CALL_OW 1
26419: ST_TO_ADDR
// exit ;
26420: POP
26421: POP
26422: GO 26615
// end ; end ;
26424: GO 26262
26426: POP
26427: POP
// for i := minerMinesList [ index ] downto 1 do
26428: LD_ADDR_VAR 0 5
26432: PUSH
26433: DOUBLE
26434: LD_EXP 96
26438: PUSH
26439: LD_VAR 0 6
26443: ARRAY
26444: INC
26445: ST_TO_ADDR
26446: LD_INT 1
26448: PUSH
26449: FOR_DOWNTO
26450: IFFALSE 26613
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26452: LD_EXP 96
26456: PUSH
26457: LD_VAR 0 6
26461: ARRAY
26462: PUSH
26463: LD_VAR 0 5
26467: ARRAY
26468: PUSH
26469: LD_INT 1
26471: ARRAY
26472: PPUSH
26473: LD_EXP 96
26477: PUSH
26478: LD_VAR 0 6
26482: ARRAY
26483: PUSH
26484: LD_VAR 0 5
26488: ARRAY
26489: PUSH
26490: LD_INT 2
26492: ARRAY
26493: PPUSH
26494: LD_VAR 0 2
26498: PPUSH
26499: LD_VAR 0 3
26503: PPUSH
26504: CALL_OW 298
26508: PUSH
26509: LD_INT 6
26511: LESS
26512: IFFALSE 26611
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26514: LD_EXP 96
26518: PUSH
26519: LD_VAR 0 6
26523: ARRAY
26524: PUSH
26525: LD_VAR 0 5
26529: ARRAY
26530: PUSH
26531: LD_INT 1
26533: ARRAY
26534: PPUSH
26535: LD_EXP 96
26539: PUSH
26540: LD_VAR 0 6
26544: ARRAY
26545: PUSH
26546: LD_VAR 0 5
26550: ARRAY
26551: PUSH
26552: LD_INT 2
26554: ARRAY
26555: PPUSH
26556: LD_VAR 0 1
26560: PPUSH
26561: CALL_OW 255
26565: PPUSH
26566: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26570: LD_ADDR_EXP 96
26574: PUSH
26575: LD_EXP 96
26579: PPUSH
26580: LD_VAR 0 6
26584: PPUSH
26585: LD_EXP 96
26589: PUSH
26590: LD_VAR 0 6
26594: ARRAY
26595: PPUSH
26596: LD_VAR 0 5
26600: PPUSH
26601: CALL_OW 3
26605: PPUSH
26606: CALL_OW 1
26610: ST_TO_ADDR
// end ; end ;
26611: GO 26449
26613: POP
26614: POP
// end ;
26615: LD_VAR 0 4
26619: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26620: LD_INT 0
26622: PPUSH
26623: PPUSH
26624: PPUSH
26625: PPUSH
26626: PPUSH
26627: PPUSH
26628: PPUSH
26629: PPUSH
26630: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26631: LD_VAR 0 1
26635: PPUSH
26636: CALL_OW 264
26640: PUSH
26641: LD_INT 81
26643: EQUAL
26644: NOT
26645: IFTRUE 26660
26647: PUSH
26648: LD_VAR 0 1
26652: PUSH
26653: LD_EXP 95
26657: IN
26658: NOT
26659: OR
26660: IFFALSE 26664
// exit ;
26662: GO 26990
// index := GetElementIndex ( minersList , unit ) ;
26664: LD_ADDR_VAR 0 6
26668: PUSH
26669: LD_EXP 95
26673: PPUSH
26674: LD_VAR 0 1
26678: PPUSH
26679: CALL 32365 0 2
26683: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26684: LD_ADDR_VAR 0 8
26688: PUSH
26689: LD_EXP 97
26693: PUSH
26694: LD_EXP 96
26698: PUSH
26699: LD_VAR 0 6
26703: ARRAY
26704: MINUS
26705: ST_TO_ADDR
// if not minesFreeAmount then
26706: LD_VAR 0 8
26710: NOT
26711: IFFALSE 26715
// exit ;
26713: GO 26990
// tmp := [ ] ;
26715: LD_ADDR_VAR 0 7
26719: PUSH
26720: EMPTY
26721: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26722: LD_ADDR_VAR 0 5
26726: PUSH
26727: DOUBLE
26728: LD_INT 1
26730: DEC
26731: ST_TO_ADDR
26732: LD_VAR 0 8
26736: PUSH
26737: FOR_TO
26738: IFFALSE 26937
// begin _d := rand ( 0 , 5 ) ;
26740: LD_ADDR_VAR 0 11
26744: PUSH
26745: LD_INT 0
26747: PPUSH
26748: LD_INT 5
26750: PPUSH
26751: CALL_OW 12
26755: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26756: LD_ADDR_VAR 0 12
26760: PUSH
26761: LD_INT 2
26763: PPUSH
26764: LD_INT 6
26766: PPUSH
26767: CALL_OW 12
26771: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26772: LD_ADDR_VAR 0 9
26776: PUSH
26777: LD_VAR 0 2
26781: PPUSH
26782: LD_VAR 0 11
26786: PPUSH
26787: LD_VAR 0 12
26791: PPUSH
26792: CALL_OW 272
26796: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26797: LD_ADDR_VAR 0 10
26801: PUSH
26802: LD_VAR 0 3
26806: PPUSH
26807: LD_VAR 0 11
26811: PPUSH
26812: LD_VAR 0 12
26816: PPUSH
26817: CALL_OW 273
26821: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26822: LD_VAR 0 9
26826: PPUSH
26827: LD_VAR 0 10
26831: PPUSH
26832: CALL_OW 488
26836: IFFALSE 26860
26838: PUSH
26839: LD_VAR 0 9
26843: PUSH
26844: LD_VAR 0 10
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: LD_VAR 0 7
26857: IN
26858: NOT
26859: AND
26860: IFFALSE 26879
26862: PUSH
26863: LD_VAR 0 9
26867: PPUSH
26868: LD_VAR 0 10
26872: PPUSH
26873: CALL_OW 458
26877: NOT
26878: AND
26879: IFFALSE 26921
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26881: LD_ADDR_VAR 0 7
26885: PUSH
26886: LD_VAR 0 7
26890: PPUSH
26891: LD_VAR 0 7
26895: PUSH
26896: LD_INT 1
26898: PLUS
26899: PPUSH
26900: LD_VAR 0 9
26904: PUSH
26905: LD_VAR 0 10
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PPUSH
26914: CALL_OW 1
26918: ST_TO_ADDR
26919: GO 26935
// i := i - 1 ;
26921: LD_ADDR_VAR 0 5
26925: PUSH
26926: LD_VAR 0 5
26930: PUSH
26931: LD_INT 1
26933: MINUS
26934: ST_TO_ADDR
// end ;
26935: GO 26737
26937: POP
26938: POP
// for i in tmp do
26939: LD_ADDR_VAR 0 5
26943: PUSH
26944: LD_VAR 0 7
26948: PUSH
26949: FOR_IN
26950: IFFALSE 26988
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26952: LD_VAR 0 1
26956: PPUSH
26957: LD_VAR 0 5
26961: PUSH
26962: LD_INT 1
26964: ARRAY
26965: PPUSH
26966: LD_VAR 0 5
26970: PUSH
26971: LD_INT 2
26973: ARRAY
26974: PPUSH
26975: CALL 25922 0 3
26979: NOT
26980: IFFALSE 26986
// exit ;
26982: POP
26983: POP
26984: GO 26990
26986: GO 26949
26988: POP
26989: POP
// end ;
26990: LD_VAR 0 4
26994: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
26995: LD_INT 0
26997: PPUSH
26998: PPUSH
26999: PPUSH
27000: PPUSH
27001: PPUSH
27002: PPUSH
27003: PPUSH
27004: PPUSH
27005: PPUSH
// if GetClass ( unit ) <> class_sniper then
27006: LD_VAR 0 1
27010: PPUSH
27011: CALL_OW 257
27015: PUSH
27016: LD_INT 5
27018: NONEQUAL
27019: IFFALSE 27023
// exit ;
27021: GO 27493
// dist := 8 ;
27023: LD_ADDR_VAR 0 5
27027: PUSH
27028: LD_INT 8
27030: ST_TO_ADDR
// viewRange := 12 ;
27031: LD_ADDR_VAR 0 8
27035: PUSH
27036: LD_INT 12
27038: ST_TO_ADDR
// side := GetSide ( unit ) ;
27039: LD_ADDR_VAR 0 6
27043: PUSH
27044: LD_VAR 0 1
27048: PPUSH
27049: CALL_OW 255
27053: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27054: LD_INT 61
27056: PPUSH
27057: LD_VAR 0 6
27061: PPUSH
27062: CALL_OW 321
27066: PUSH
27067: LD_INT 2
27069: EQUAL
27070: IFFALSE 27080
// viewRange := 16 ;
27072: LD_ADDR_VAR 0 8
27076: PUSH
27077: LD_INT 16
27079: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27080: LD_VAR 0 1
27084: PPUSH
27085: LD_VAR 0 2
27089: PPUSH
27090: LD_VAR 0 3
27094: PPUSH
27095: CALL_OW 297
27099: PUSH
27100: LD_VAR 0 5
27104: GREATER
27105: IFFALSE 27184
// begin ComMoveXY ( unit , x , y ) ;
27107: LD_VAR 0 1
27111: PPUSH
27112: LD_VAR 0 2
27116: PPUSH
27117: LD_VAR 0 3
27121: PPUSH
27122: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27126: LD_INT 35
27128: PPUSH
27129: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27133: LD_VAR 0 1
27137: PPUSH
27138: LD_VAR 0 2
27142: PPUSH
27143: LD_VAR 0 3
27147: PPUSH
27148: CALL 64411 0 3
27152: NOT
27153: IFFALSE 27157
// exit ;
27155: GO 27493
// until GetDistUnitXY ( unit , x , y ) < dist ;
27157: LD_VAR 0 1
27161: PPUSH
27162: LD_VAR 0 2
27166: PPUSH
27167: LD_VAR 0 3
27171: PPUSH
27172: CALL_OW 297
27176: PUSH
27177: LD_VAR 0 5
27181: LESS
27182: IFFALSE 27126
// end ; ComTurnXY ( unit , x , y ) ;
27184: LD_VAR 0 1
27188: PPUSH
27189: LD_VAR 0 2
27193: PPUSH
27194: LD_VAR 0 3
27198: PPUSH
27199: CALL_OW 118
// repeat if Multiplayer then
27203: LD_OWVAR 4
27207: IFFALSE 27218
// wait ( 35 ) else
27209: LD_INT 35
27211: PPUSH
27212: CALL_OW 67
27216: GO 27225
// wait ( 5 ) ;
27218: LD_INT 5
27220: PPUSH
27221: CALL_OW 67
// _d := GetDir ( unit ) ;
27225: LD_ADDR_VAR 0 11
27229: PUSH
27230: LD_VAR 0 1
27234: PPUSH
27235: CALL_OW 254
27239: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
27240: LD_ADDR_VAR 0 7
27244: PUSH
27245: LD_VAR 0 1
27249: PPUSH
27250: CALL_OW 250
27254: PPUSH
27255: LD_VAR 0 1
27259: PPUSH
27260: CALL_OW 251
27264: PPUSH
27265: LD_VAR 0 2
27269: PPUSH
27270: LD_VAR 0 3
27274: PPUSH
27275: CALL 67047 0 4
27279: ST_TO_ADDR
// until dir = _d ;
27280: LD_VAR 0 7
27284: PUSH
27285: LD_VAR 0 11
27289: EQUAL
27290: IFFALSE 27203
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
27292: LD_ADDR_VAR 0 9
27296: PUSH
27297: LD_VAR 0 1
27301: PPUSH
27302: CALL_OW 250
27306: PPUSH
27307: LD_VAR 0 7
27311: PPUSH
27312: LD_VAR 0 5
27316: PPUSH
27317: CALL_OW 272
27321: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
27322: LD_ADDR_VAR 0 10
27326: PUSH
27327: LD_VAR 0 1
27331: PPUSH
27332: CALL_OW 251
27336: PPUSH
27337: LD_VAR 0 7
27341: PPUSH
27342: LD_VAR 0 5
27346: PPUSH
27347: CALL_OW 273
27351: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27352: LD_VAR 0 9
27356: PPUSH
27357: LD_VAR 0 10
27361: PPUSH
27362: CALL_OW 488
27366: NOT
27367: IFFALSE 27371
// exit ;
27369: GO 27493
// ComAnimCustom ( unit , 1 ) ;
27371: LD_VAR 0 1
27375: PPUSH
27376: LD_INT 1
27378: PPUSH
27379: CALL_OW 592
// p := 0 ;
27383: LD_ADDR_VAR 0 12
27387: PUSH
27388: LD_INT 0
27390: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27391: LD_VAR 0 9
27395: PPUSH
27396: LD_VAR 0 10
27400: PPUSH
27401: LD_VAR 0 6
27405: PPUSH
27406: LD_VAR 0 8
27410: PPUSH
27411: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
27415: LD_INT 35
27417: PPUSH
27418: CALL_OW 67
// p := Inc ( p ) ;
27422: LD_ADDR_VAR 0 12
27426: PUSH
27427: LD_VAR 0 12
27431: PPUSH
27432: CALL 67003 0 1
27436: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
27437: LD_VAR 0 12
27441: PUSH
27442: LD_INT 3
27444: EQUAL
27445: IFTRUE 27459
27447: PUSH
27448: LD_VAR 0 1
27452: PPUSH
27453: CALL_OW 302
27457: NOT
27458: OR
27459: IFTRUE 27472
27461: PUSH
27462: LD_VAR 0 1
27466: PPUSH
27467: CALL_OW 301
27471: OR
27472: IFFALSE 27415
// RemoveSeeing ( _x , _y , side ) ;
27474: LD_VAR 0 9
27478: PPUSH
27479: LD_VAR 0 10
27483: PPUSH
27484: LD_VAR 0 6
27488: PPUSH
27489: CALL_OW 331
// end ; end_of_file
27493: LD_VAR 0 4
27497: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27498: LD_INT 0
27500: PPUSH
27501: PPUSH
// if exist_mode then
27502: LD_VAR 0 2
27506: IFFALSE 27552
// begin unit := CreateCharacter ( prefix & ident ) ;
27508: LD_ADDR_VAR 0 5
27512: PUSH
27513: LD_VAR 0 3
27517: PUSH
27518: LD_VAR 0 1
27522: STR
27523: PPUSH
27524: CALL_OW 34
27528: ST_TO_ADDR
// if unit then
27529: LD_VAR 0 5
27533: IFFALSE 27550
// DeleteCharacters ( prefix & ident ) ;
27535: LD_VAR 0 3
27539: PUSH
27540: LD_VAR 0 1
27544: STR
27545: PPUSH
27546: CALL_OW 40
// end else
27550: GO 27567
// unit := NewCharacter ( ident ) ;
27552: LD_ADDR_VAR 0 5
27556: PUSH
27557: LD_VAR 0 1
27561: PPUSH
27562: CALL_OW 25
27566: ST_TO_ADDR
// result := unit ;
27567: LD_ADDR_VAR 0 4
27571: PUSH
27572: LD_VAR 0 5
27576: ST_TO_ADDR
// end ;
27577: LD_VAR 0 4
27581: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
27582: LD_INT 0
27584: PPUSH
27585: PPUSH
// if exist_mode then
27586: LD_VAR 0 2
27590: IFFALSE 27615
// unit := CreateCharacter ( prefix & ident ) else
27592: LD_ADDR_VAR 0 5
27596: PUSH
27597: LD_VAR 0 3
27601: PUSH
27602: LD_VAR 0 1
27606: STR
27607: PPUSH
27608: CALL_OW 34
27612: ST_TO_ADDR
27613: GO 27630
// unit := NewCharacter ( ident ) ;
27615: LD_ADDR_VAR 0 5
27619: PUSH
27620: LD_VAR 0 1
27624: PPUSH
27625: CALL_OW 25
27629: ST_TO_ADDR
// result := unit ;
27630: LD_ADDR_VAR 0 4
27634: PUSH
27635: LD_VAR 0 5
27639: ST_TO_ADDR
// end ;
27640: LD_VAR 0 4
27644: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27645: LD_INT 0
27647: PPUSH
27648: PPUSH
// if not side or not nation then
27649: LD_VAR 0 1
27653: NOT
27654: IFTRUE 27663
27656: PUSH
27657: LD_VAR 0 2
27661: NOT
27662: OR
27663: IFFALSE 27667
// exit ;
27665: GO 28437
// case nation of nation_american :
27667: LD_VAR 0 2
27671: PUSH
27672: LD_INT 1
27674: DOUBLE
27675: EQUAL
27676: IFTRUE 27680
27678: GO 27894
27680: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27681: LD_ADDR_VAR 0 4
27685: PUSH
27686: LD_INT 35
27688: PUSH
27689: LD_INT 45
27691: PUSH
27692: LD_INT 46
27694: PUSH
27695: LD_INT 47
27697: PUSH
27698: LD_INT 82
27700: PUSH
27701: LD_INT 83
27703: PUSH
27704: LD_INT 84
27706: PUSH
27707: LD_INT 85
27709: PUSH
27710: LD_INT 86
27712: PUSH
27713: LD_INT 1
27715: PUSH
27716: LD_INT 2
27718: PUSH
27719: LD_INT 6
27721: PUSH
27722: LD_INT 15
27724: PUSH
27725: LD_INT 16
27727: PUSH
27728: LD_INT 7
27730: PUSH
27731: LD_INT 12
27733: PUSH
27734: LD_INT 13
27736: PUSH
27737: LD_INT 10
27739: PUSH
27740: LD_INT 14
27742: PUSH
27743: LD_INT 20
27745: PUSH
27746: LD_INT 21
27748: PUSH
27749: LD_INT 22
27751: PUSH
27752: LD_INT 25
27754: PUSH
27755: LD_INT 32
27757: PUSH
27758: LD_INT 27
27760: PUSH
27761: LD_INT 36
27763: PUSH
27764: LD_INT 69
27766: PUSH
27767: LD_INT 39
27769: PUSH
27770: LD_INT 34
27772: PUSH
27773: LD_INT 40
27775: PUSH
27776: LD_INT 48
27778: PUSH
27779: LD_INT 49
27781: PUSH
27782: LD_INT 50
27784: PUSH
27785: LD_INT 51
27787: PUSH
27788: LD_INT 52
27790: PUSH
27791: LD_INT 53
27793: PUSH
27794: LD_INT 54
27796: PUSH
27797: LD_INT 55
27799: PUSH
27800: LD_INT 56
27802: PUSH
27803: LD_INT 57
27805: PUSH
27806: LD_INT 58
27808: PUSH
27809: LD_INT 59
27811: PUSH
27812: LD_INT 60
27814: PUSH
27815: LD_INT 61
27817: PUSH
27818: LD_INT 62
27820: PUSH
27821: LD_INT 80
27823: PUSH
27824: LD_INT 82
27826: PUSH
27827: LD_INT 83
27829: PUSH
27830: LD_INT 84
27832: PUSH
27833: LD_INT 85
27835: PUSH
27836: LD_INT 86
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: ST_TO_ADDR
27892: GO 28359
27894: LD_INT 2
27896: DOUBLE
27897: EQUAL
27898: IFTRUE 27902
27900: GO 28128
27902: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27903: LD_ADDR_VAR 0 4
27907: PUSH
27908: LD_INT 35
27910: PUSH
27911: LD_INT 45
27913: PUSH
27914: LD_INT 46
27916: PUSH
27917: LD_INT 47
27919: PUSH
27920: LD_INT 82
27922: PUSH
27923: LD_INT 83
27925: PUSH
27926: LD_INT 84
27928: PUSH
27929: LD_INT 85
27931: PUSH
27932: LD_INT 87
27934: PUSH
27935: LD_INT 70
27937: PUSH
27938: LD_INT 1
27940: PUSH
27941: LD_INT 11
27943: PUSH
27944: LD_INT 3
27946: PUSH
27947: LD_INT 4
27949: PUSH
27950: LD_INT 5
27952: PUSH
27953: LD_INT 6
27955: PUSH
27956: LD_INT 15
27958: PUSH
27959: LD_INT 18
27961: PUSH
27962: LD_INT 7
27964: PUSH
27965: LD_INT 17
27967: PUSH
27968: LD_INT 8
27970: PUSH
27971: LD_INT 20
27973: PUSH
27974: LD_INT 21
27976: PUSH
27977: LD_INT 22
27979: PUSH
27980: LD_INT 72
27982: PUSH
27983: LD_INT 26
27985: PUSH
27986: LD_INT 69
27988: PUSH
27989: LD_INT 39
27991: PUSH
27992: LD_INT 40
27994: PUSH
27995: LD_INT 41
27997: PUSH
27998: LD_INT 42
28000: PUSH
28001: LD_INT 43
28003: PUSH
28004: LD_INT 48
28006: PUSH
28007: LD_INT 49
28009: PUSH
28010: LD_INT 50
28012: PUSH
28013: LD_INT 51
28015: PUSH
28016: LD_INT 52
28018: PUSH
28019: LD_INT 53
28021: PUSH
28022: LD_INT 54
28024: PUSH
28025: LD_INT 55
28027: PUSH
28028: LD_INT 56
28030: PUSH
28031: LD_INT 60
28033: PUSH
28034: LD_INT 61
28036: PUSH
28037: LD_INT 62
28039: PUSH
28040: LD_INT 66
28042: PUSH
28043: LD_INT 67
28045: PUSH
28046: LD_INT 68
28048: PUSH
28049: LD_INT 81
28051: PUSH
28052: LD_INT 82
28054: PUSH
28055: LD_INT 83
28057: PUSH
28058: LD_INT 84
28060: PUSH
28061: LD_INT 85
28063: PUSH
28064: LD_INT 87
28066: PUSH
28067: LD_INT 88
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: ST_TO_ADDR
28126: GO 28359
28128: LD_INT 3
28130: DOUBLE
28131: EQUAL
28132: IFTRUE 28136
28134: GO 28358
28136: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28137: LD_ADDR_VAR 0 4
28141: PUSH
28142: LD_INT 46
28144: PUSH
28145: LD_INT 47
28147: PUSH
28148: LD_INT 1
28150: PUSH
28151: LD_INT 2
28153: PUSH
28154: LD_INT 82
28156: PUSH
28157: LD_INT 83
28159: PUSH
28160: LD_INT 84
28162: PUSH
28163: LD_INT 85
28165: PUSH
28166: LD_INT 86
28168: PUSH
28169: LD_INT 11
28171: PUSH
28172: LD_INT 9
28174: PUSH
28175: LD_INT 20
28177: PUSH
28178: LD_INT 19
28180: PUSH
28181: LD_INT 21
28183: PUSH
28184: LD_INT 24
28186: PUSH
28187: LD_INT 22
28189: PUSH
28190: LD_INT 25
28192: PUSH
28193: LD_INT 28
28195: PUSH
28196: LD_INT 29
28198: PUSH
28199: LD_INT 30
28201: PUSH
28202: LD_INT 31
28204: PUSH
28205: LD_INT 37
28207: PUSH
28208: LD_INT 38
28210: PUSH
28211: LD_INT 32
28213: PUSH
28214: LD_INT 27
28216: PUSH
28217: LD_INT 33
28219: PUSH
28220: LD_INT 69
28222: PUSH
28223: LD_INT 39
28225: PUSH
28226: LD_INT 34
28228: PUSH
28229: LD_INT 40
28231: PUSH
28232: LD_INT 71
28234: PUSH
28235: LD_INT 23
28237: PUSH
28238: LD_INT 44
28240: PUSH
28241: LD_INT 48
28243: PUSH
28244: LD_INT 49
28246: PUSH
28247: LD_INT 50
28249: PUSH
28250: LD_INT 51
28252: PUSH
28253: LD_INT 52
28255: PUSH
28256: LD_INT 53
28258: PUSH
28259: LD_INT 54
28261: PUSH
28262: LD_INT 55
28264: PUSH
28265: LD_INT 56
28267: PUSH
28268: LD_INT 57
28270: PUSH
28271: LD_INT 58
28273: PUSH
28274: LD_INT 59
28276: PUSH
28277: LD_INT 63
28279: PUSH
28280: LD_INT 64
28282: PUSH
28283: LD_INT 65
28285: PUSH
28286: LD_INT 82
28288: PUSH
28289: LD_INT 83
28291: PUSH
28292: LD_INT 84
28294: PUSH
28295: LD_INT 85
28297: PUSH
28298: LD_INT 86
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: ST_TO_ADDR
28356: GO 28359
28358: POP
// if state > - 1 and state < 3 then
28359: LD_VAR 0 3
28363: PUSH
28364: LD_INT 1
28366: NEG
28367: GREATER
28368: IFFALSE 28380
28370: PUSH
28371: LD_VAR 0 3
28375: PUSH
28376: LD_INT 3
28378: LESS
28379: AND
28380: IFFALSE 28437
// for i in result do
28382: LD_ADDR_VAR 0 5
28386: PUSH
28387: LD_VAR 0 4
28391: PUSH
28392: FOR_IN
28393: IFFALSE 28435
// if GetTech ( i , side ) <> state then
28395: LD_VAR 0 5
28399: PPUSH
28400: LD_VAR 0 1
28404: PPUSH
28405: CALL_OW 321
28409: PUSH
28410: LD_VAR 0 3
28414: NONEQUAL
28415: IFFALSE 28433
// result := result diff i ;
28417: LD_ADDR_VAR 0 4
28421: PUSH
28422: LD_VAR 0 4
28426: PUSH
28427: LD_VAR 0 5
28431: DIFF
28432: ST_TO_ADDR
28433: GO 28392
28435: POP
28436: POP
// end ;
28437: LD_VAR 0 4
28441: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28442: LD_INT 0
28444: PPUSH
28445: PPUSH
28446: PPUSH
// result := true ;
28447: LD_ADDR_VAR 0 3
28451: PUSH
28452: LD_INT 1
28454: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28455: LD_ADDR_VAR 0 5
28459: PUSH
28460: LD_VAR 0 2
28464: PPUSH
28465: CALL_OW 480
28469: ST_TO_ADDR
// if not tmp then
28470: LD_VAR 0 5
28474: NOT
28475: IFFALSE 28479
// exit ;
28477: GO 28528
// for i in tmp do
28479: LD_ADDR_VAR 0 4
28483: PUSH
28484: LD_VAR 0 5
28488: PUSH
28489: FOR_IN
28490: IFFALSE 28526
// if GetTech ( i , side ) <> state_researched then
28492: LD_VAR 0 4
28496: PPUSH
28497: LD_VAR 0 1
28501: PPUSH
28502: CALL_OW 321
28506: PUSH
28507: LD_INT 2
28509: NONEQUAL
28510: IFFALSE 28524
// begin result := false ;
28512: LD_ADDR_VAR 0 3
28516: PUSH
28517: LD_INT 0
28519: ST_TO_ADDR
// exit ;
28520: POP
28521: POP
28522: GO 28528
// end ;
28524: GO 28489
28526: POP
28527: POP
// end ;
28528: LD_VAR 0 3
28532: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28533: LD_INT 0
28535: PPUSH
28536: PPUSH
28537: PPUSH
28538: PPUSH
28539: PPUSH
28540: PPUSH
28541: PPUSH
28542: PPUSH
28543: PPUSH
28544: PPUSH
28545: PPUSH
28546: PPUSH
28547: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28548: LD_VAR 0 1
28552: NOT
28553: IFTRUE 28570
28555: PUSH
28556: LD_VAR 0 1
28560: PPUSH
28561: CALL_OW 257
28565: PUSH
28566: LD_INT 9
28568: NONEQUAL
28569: OR
28570: IFFALSE 28574
// exit ;
28572: GO 29153
// side := GetSide ( unit ) ;
28574: LD_ADDR_VAR 0 9
28578: PUSH
28579: LD_VAR 0 1
28583: PPUSH
28584: CALL_OW 255
28588: ST_TO_ADDR
// tech_space := tech_spacanom ;
28589: LD_ADDR_VAR 0 12
28593: PUSH
28594: LD_INT 29
28596: ST_TO_ADDR
// tech_time := tech_taurad ;
28597: LD_ADDR_VAR 0 13
28601: PUSH
28602: LD_INT 28
28604: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28605: LD_ADDR_VAR 0 11
28609: PUSH
28610: LD_VAR 0 1
28614: PPUSH
28615: CALL_OW 310
28619: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28620: LD_VAR 0 11
28624: PPUSH
28625: CALL_OW 247
28629: PUSH
28630: LD_INT 2
28632: EQUAL
28633: IFFALSE 28637
// exit ;
28635: GO 29153
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28637: LD_ADDR_VAR 0 8
28641: PUSH
28642: LD_INT 81
28644: PUSH
28645: LD_VAR 0 9
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: LD_INT 3
28656: PUSH
28657: LD_INT 21
28659: PUSH
28660: LD_INT 3
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PPUSH
28675: CALL_OW 69
28679: ST_TO_ADDR
// if not tmp then
28680: LD_VAR 0 8
28684: NOT
28685: IFFALSE 28689
// exit ;
28687: GO 29153
// if in_unit then
28689: LD_VAR 0 11
28693: IFFALSE 28717
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28695: LD_ADDR_VAR 0 10
28699: PUSH
28700: LD_VAR 0 8
28704: PPUSH
28705: LD_VAR 0 11
28709: PPUSH
28710: CALL_OW 74
28714: ST_TO_ADDR
28715: GO 28737
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28717: LD_ADDR_VAR 0 10
28721: PUSH
28722: LD_VAR 0 8
28726: PPUSH
28727: LD_VAR 0 1
28731: PPUSH
28732: CALL_OW 74
28736: ST_TO_ADDR
// if not enemy then
28737: LD_VAR 0 10
28741: NOT
28742: IFFALSE 28746
// exit ;
28744: GO 29153
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28746: LD_VAR 0 11
28750: IFFALSE 28772
28752: PUSH
28753: LD_VAR 0 11
28757: PPUSH
28758: LD_VAR 0 10
28762: PPUSH
28763: CALL_OW 296
28767: PUSH
28768: LD_INT 13
28770: GREATER
28771: AND
28772: IFTRUE 28794
28774: PUSH
28775: LD_VAR 0 1
28779: PPUSH
28780: LD_VAR 0 10
28784: PPUSH
28785: CALL_OW 296
28789: PUSH
28790: LD_INT 12
28792: GREATER
28793: OR
28794: IFFALSE 28798
// exit ;
28796: GO 29153
// missile := [ 1 ] ;
28798: LD_ADDR_VAR 0 14
28802: PUSH
28803: LD_INT 1
28805: PUSH
28806: EMPTY
28807: LIST
28808: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28809: LD_VAR 0 9
28813: PPUSH
28814: LD_VAR 0 12
28818: PPUSH
28819: CALL_OW 325
28823: IFFALSE 28852
// missile := Replace ( missile , missile + 1 , 2 ) ;
28825: LD_ADDR_VAR 0 14
28829: PUSH
28830: LD_VAR 0 14
28834: PPUSH
28835: LD_VAR 0 14
28839: PUSH
28840: LD_INT 1
28842: PLUS
28843: PPUSH
28844: LD_INT 2
28846: PPUSH
28847: CALL_OW 1
28851: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28852: LD_VAR 0 9
28856: PPUSH
28857: LD_VAR 0 13
28861: PPUSH
28862: CALL_OW 325
28866: IFFALSE 28890
28868: PUSH
28869: LD_VAR 0 10
28873: PPUSH
28874: CALL_OW 255
28878: PPUSH
28879: LD_VAR 0 13
28883: PPUSH
28884: CALL_OW 325
28888: NOT
28889: AND
28890: IFFALSE 28919
// missile := Replace ( missile , missile + 1 , 3 ) ;
28892: LD_ADDR_VAR 0 14
28896: PUSH
28897: LD_VAR 0 14
28901: PPUSH
28902: LD_VAR 0 14
28906: PUSH
28907: LD_INT 1
28909: PLUS
28910: PPUSH
28911: LD_INT 3
28913: PPUSH
28914: CALL_OW 1
28918: ST_TO_ADDR
// if missile < 2 then
28919: LD_VAR 0 14
28923: PUSH
28924: LD_INT 2
28926: LESS
28927: IFFALSE 28931
// exit ;
28929: GO 29153
// x := GetX ( enemy ) ;
28931: LD_ADDR_VAR 0 4
28935: PUSH
28936: LD_VAR 0 10
28940: PPUSH
28941: CALL_OW 250
28945: ST_TO_ADDR
// y := GetY ( enemy ) ;
28946: LD_ADDR_VAR 0 5
28950: PUSH
28951: LD_VAR 0 10
28955: PPUSH
28956: CALL_OW 251
28960: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28961: LD_ADDR_VAR 0 6
28965: PUSH
28966: LD_VAR 0 4
28970: PUSH
28971: LD_INT 1
28973: NEG
28974: PPUSH
28975: LD_INT 1
28977: PPUSH
28978: CALL_OW 12
28982: PLUS
28983: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28984: LD_ADDR_VAR 0 7
28988: PUSH
28989: LD_VAR 0 5
28993: PUSH
28994: LD_INT 1
28996: NEG
28997: PPUSH
28998: LD_INT 1
29000: PPUSH
29001: CALL_OW 12
29005: PLUS
29006: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29007: LD_VAR 0 6
29011: PPUSH
29012: LD_VAR 0 7
29016: PPUSH
29017: CALL_OW 488
29021: NOT
29022: IFFALSE 29044
// begin _x := x ;
29024: LD_ADDR_VAR 0 6
29028: PUSH
29029: LD_VAR 0 4
29033: ST_TO_ADDR
// _y := y ;
29034: LD_ADDR_VAR 0 7
29038: PUSH
29039: LD_VAR 0 5
29043: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29044: LD_ADDR_VAR 0 3
29048: PUSH
29049: LD_INT 1
29051: PPUSH
29052: LD_VAR 0 14
29056: PPUSH
29057: CALL_OW 12
29061: ST_TO_ADDR
// case i of 1 :
29062: LD_VAR 0 3
29066: PUSH
29067: LD_INT 1
29069: DOUBLE
29070: EQUAL
29071: IFTRUE 29075
29073: GO 29092
29075: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29076: LD_VAR 0 1
29080: PPUSH
29081: LD_VAR 0 10
29085: PPUSH
29086: CALL_OW 115
29090: GO 29153
29092: LD_INT 2
29094: DOUBLE
29095: EQUAL
29096: IFTRUE 29100
29098: GO 29122
29100: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29101: LD_VAR 0 1
29105: PPUSH
29106: LD_VAR 0 6
29110: PPUSH
29111: LD_VAR 0 7
29115: PPUSH
29116: CALL_OW 153
29120: GO 29153
29122: LD_INT 3
29124: DOUBLE
29125: EQUAL
29126: IFTRUE 29130
29128: GO 29152
29130: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29131: LD_VAR 0 1
29135: PPUSH
29136: LD_VAR 0 6
29140: PPUSH
29141: LD_VAR 0 7
29145: PPUSH
29146: CALL_OW 154
29150: GO 29153
29152: POP
// end ;
29153: LD_VAR 0 2
29157: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29158: LD_INT 0
29160: PPUSH
29161: PPUSH
29162: PPUSH
29163: PPUSH
29164: PPUSH
29165: PPUSH
// if not unit or not building then
29166: LD_VAR 0 1
29170: NOT
29171: IFTRUE 29180
29173: PUSH
29174: LD_VAR 0 2
29178: NOT
29179: OR
29180: IFFALSE 29184
// exit ;
29182: GO 29342
// x := GetX ( building ) ;
29184: LD_ADDR_VAR 0 5
29188: PUSH
29189: LD_VAR 0 2
29193: PPUSH
29194: CALL_OW 250
29198: ST_TO_ADDR
// y := GetY ( building ) ;
29199: LD_ADDR_VAR 0 6
29203: PUSH
29204: LD_VAR 0 2
29208: PPUSH
29209: CALL_OW 251
29213: ST_TO_ADDR
// for i := 0 to 5 do
29214: LD_ADDR_VAR 0 4
29218: PUSH
29219: DOUBLE
29220: LD_INT 0
29222: DEC
29223: ST_TO_ADDR
29224: LD_INT 5
29226: PUSH
29227: FOR_TO
29228: IFFALSE 29340
// begin _x := ShiftX ( x , i , 3 ) ;
29230: LD_ADDR_VAR 0 7
29234: PUSH
29235: LD_VAR 0 5
29239: PPUSH
29240: LD_VAR 0 4
29244: PPUSH
29245: LD_INT 3
29247: PPUSH
29248: CALL_OW 272
29252: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29253: LD_ADDR_VAR 0 8
29257: PUSH
29258: LD_VAR 0 6
29262: PPUSH
29263: LD_VAR 0 4
29267: PPUSH
29268: LD_INT 3
29270: PPUSH
29271: CALL_OW 273
29275: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29276: LD_VAR 0 7
29280: PPUSH
29281: LD_VAR 0 8
29285: PPUSH
29286: CALL_OW 488
29290: NOT
29291: IFFALSE 29295
// continue ;
29293: GO 29227
// if HexInfo ( _x , _y ) = 0 then
29295: LD_VAR 0 7
29299: PPUSH
29300: LD_VAR 0 8
29304: PPUSH
29305: CALL_OW 428
29309: PUSH
29310: LD_INT 0
29312: EQUAL
29313: IFFALSE 29338
// begin ComMoveXY ( unit , _x , _y ) ;
29315: LD_VAR 0 1
29319: PPUSH
29320: LD_VAR 0 7
29324: PPUSH
29325: LD_VAR 0 8
29329: PPUSH
29330: CALL_OW 111
// exit ;
29334: POP
29335: POP
29336: GO 29342
// end ; end ;
29338: GO 29227
29340: POP
29341: POP
// end ;
29342: LD_VAR 0 3
29346: RET
// export function ScanBase ( side , base_area ) ; begin
29347: LD_INT 0
29349: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29350: LD_ADDR_VAR 0 3
29354: PUSH
29355: LD_VAR 0 2
29359: PPUSH
29360: LD_INT 81
29362: PUSH
29363: LD_VAR 0 1
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PPUSH
29372: CALL_OW 70
29376: ST_TO_ADDR
// end ;
29377: LD_VAR 0 3
29381: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29382: LD_INT 0
29384: PPUSH
29385: PPUSH
29386: PPUSH
29387: PPUSH
// result := false ;
29388: LD_ADDR_VAR 0 2
29392: PUSH
29393: LD_INT 0
29395: ST_TO_ADDR
// side := GetSide ( unit ) ;
29396: LD_ADDR_VAR 0 3
29400: PUSH
29401: LD_VAR 0 1
29405: PPUSH
29406: CALL_OW 255
29410: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29411: LD_ADDR_VAR 0 4
29415: PUSH
29416: LD_VAR 0 1
29420: PPUSH
29421: CALL_OW 248
29425: ST_TO_ADDR
// case nat of 1 :
29426: LD_VAR 0 4
29430: PUSH
29431: LD_INT 1
29433: DOUBLE
29434: EQUAL
29435: IFTRUE 29439
29437: GO 29450
29439: POP
// tech := tech_lassight ; 2 :
29440: LD_ADDR_VAR 0 5
29444: PUSH
29445: LD_INT 12
29447: ST_TO_ADDR
29448: GO 29489
29450: LD_INT 2
29452: DOUBLE
29453: EQUAL
29454: IFTRUE 29458
29456: GO 29469
29458: POP
// tech := tech_mortar ; 3 :
29459: LD_ADDR_VAR 0 5
29463: PUSH
29464: LD_INT 41
29466: ST_TO_ADDR
29467: GO 29489
29469: LD_INT 3
29471: DOUBLE
29472: EQUAL
29473: IFTRUE 29477
29475: GO 29488
29477: POP
// tech := tech_bazooka ; end ;
29478: LD_ADDR_VAR 0 5
29482: PUSH
29483: LD_INT 44
29485: ST_TO_ADDR
29486: GO 29489
29488: POP
// if Researched ( side , tech ) then
29489: LD_VAR 0 3
29493: PPUSH
29494: LD_VAR 0 5
29498: PPUSH
29499: CALL_OW 325
29503: IFFALSE 29530
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29505: LD_ADDR_VAR 0 2
29509: PUSH
29510: LD_INT 5
29512: PUSH
29513: LD_INT 8
29515: PUSH
29516: LD_INT 9
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: LIST
29523: PUSH
29524: LD_VAR 0 4
29528: ARRAY
29529: ST_TO_ADDR
// end ;
29530: LD_VAR 0 2
29534: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29535: LD_INT 0
29537: PPUSH
29538: PPUSH
29539: PPUSH
// if not mines then
29540: LD_VAR 0 2
29544: NOT
29545: IFFALSE 29549
// exit ;
29547: GO 29693
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29549: LD_ADDR_VAR 0 5
29553: PUSH
29554: LD_INT 81
29556: PUSH
29557: LD_VAR 0 1
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PUSH
29566: LD_INT 3
29568: PUSH
29569: LD_INT 21
29571: PUSH
29572: LD_INT 3
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PPUSH
29587: CALL_OW 69
29591: ST_TO_ADDR
// for i in mines do
29592: LD_ADDR_VAR 0 4
29596: PUSH
29597: LD_VAR 0 2
29601: PUSH
29602: FOR_IN
29603: IFFALSE 29691
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29605: LD_VAR 0 4
29609: PUSH
29610: LD_INT 1
29612: ARRAY
29613: PPUSH
29614: LD_VAR 0 4
29618: PUSH
29619: LD_INT 2
29621: ARRAY
29622: PPUSH
29623: CALL_OW 458
29627: NOT
29628: IFFALSE 29632
// continue ;
29630: GO 29602
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29632: LD_VAR 0 4
29636: PUSH
29637: LD_INT 1
29639: ARRAY
29640: PPUSH
29641: LD_VAR 0 4
29645: PUSH
29646: LD_INT 2
29648: ARRAY
29649: PPUSH
29650: CALL_OW 428
29654: PUSH
29655: LD_VAR 0 5
29659: IN
29660: IFFALSE 29689
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29662: LD_VAR 0 4
29666: PUSH
29667: LD_INT 1
29669: ARRAY
29670: PPUSH
29671: LD_VAR 0 4
29675: PUSH
29676: LD_INT 2
29678: ARRAY
29679: PPUSH
29680: LD_VAR 0 1
29684: PPUSH
29685: CALL_OW 456
// end ;
29689: GO 29602
29691: POP
29692: POP
// end ;
29693: LD_VAR 0 3
29697: RET
// export function Count ( array ) ; begin
29698: LD_INT 0
29700: PPUSH
// result := array + 0 ;
29701: LD_ADDR_VAR 0 2
29705: PUSH
29706: LD_VAR 0 1
29710: PUSH
29711: LD_INT 0
29713: PLUS
29714: ST_TO_ADDR
// end ;
29715: LD_VAR 0 2
29719: RET
// export function IsEmpty ( building ) ; begin
29720: LD_INT 0
29722: PPUSH
// if not building then
29723: LD_VAR 0 1
29727: NOT
29728: IFFALSE 29732
// exit ;
29730: GO 29775
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29732: LD_ADDR_VAR 0 2
29736: PUSH
29737: LD_VAR 0 1
29741: PUSH
29742: LD_INT 22
29744: PUSH
29745: LD_VAR 0 1
29749: PPUSH
29750: CALL_OW 255
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 58
29761: PUSH
29762: EMPTY
29763: LIST
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PPUSH
29769: CALL_OW 69
29773: IN
29774: ST_TO_ADDR
// end ;
29775: LD_VAR 0 2
29779: RET
// export function IsNotFull ( building ) ; var places ; begin
29780: LD_INT 0
29782: PPUSH
29783: PPUSH
// if not building then
29784: LD_VAR 0 1
29788: NOT
29789: IFFALSE 29793
// exit ;
29791: GO 29821
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
29793: LD_ADDR_VAR 0 2
29797: PUSH
29798: LD_VAR 0 1
29802: PPUSH
29803: LD_INT 3
29805: PUSH
29806: LD_INT 62
29808: PUSH
29809: EMPTY
29810: LIST
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PPUSH
29816: CALL_OW 72
29820: ST_TO_ADDR
// end ;
29821: LD_VAR 0 2
29825: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29826: LD_INT 0
29828: PPUSH
29829: PPUSH
29830: PPUSH
29831: PPUSH
// tmp := [ ] ;
29832: LD_ADDR_VAR 0 3
29836: PUSH
29837: EMPTY
29838: ST_TO_ADDR
// list := [ ] ;
29839: LD_ADDR_VAR 0 5
29843: PUSH
29844: EMPTY
29845: ST_TO_ADDR
// for i = 16 to 25 do
29846: LD_ADDR_VAR 0 4
29850: PUSH
29851: DOUBLE
29852: LD_INT 16
29854: DEC
29855: ST_TO_ADDR
29856: LD_INT 25
29858: PUSH
29859: FOR_TO
29860: IFFALSE 29933
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29862: LD_ADDR_VAR 0 3
29866: PUSH
29867: LD_VAR 0 3
29871: PUSH
29872: LD_INT 22
29874: PUSH
29875: LD_VAR 0 1
29879: PPUSH
29880: CALL_OW 255
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 91
29891: PUSH
29892: LD_VAR 0 1
29896: PUSH
29897: LD_INT 6
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 30
29907: PUSH
29908: LD_VAR 0 4
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: LIST
29921: PUSH
29922: EMPTY
29923: LIST
29924: PPUSH
29925: CALL_OW 69
29929: ADD
29930: ST_TO_ADDR
29931: GO 29859
29933: POP
29934: POP
// for i = 1 to tmp do
29935: LD_ADDR_VAR 0 4
29939: PUSH
29940: DOUBLE
29941: LD_INT 1
29943: DEC
29944: ST_TO_ADDR
29945: LD_VAR 0 3
29949: PUSH
29950: FOR_TO
29951: IFFALSE 30039
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29953: LD_ADDR_VAR 0 5
29957: PUSH
29958: LD_VAR 0 5
29962: PUSH
29963: LD_VAR 0 3
29967: PUSH
29968: LD_VAR 0 4
29972: ARRAY
29973: PPUSH
29974: CALL_OW 266
29978: PUSH
29979: LD_VAR 0 3
29983: PUSH
29984: LD_VAR 0 4
29988: ARRAY
29989: PPUSH
29990: CALL_OW 250
29994: PUSH
29995: LD_VAR 0 3
29999: PUSH
30000: LD_VAR 0 4
30004: ARRAY
30005: PPUSH
30006: CALL_OW 251
30010: PUSH
30011: LD_VAR 0 3
30015: PUSH
30016: LD_VAR 0 4
30020: ARRAY
30021: PPUSH
30022: CALL_OW 254
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: PUSH
30033: EMPTY
30034: LIST
30035: ADD
30036: ST_TO_ADDR
30037: GO 29950
30039: POP
30040: POP
// result := list ;
30041: LD_ADDR_VAR 0 2
30045: PUSH
30046: LD_VAR 0 5
30050: ST_TO_ADDR
// end ;
30051: LD_VAR 0 2
30055: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30056: LD_INT 0
30058: PPUSH
30059: PPUSH
30060: PPUSH
30061: PPUSH
30062: PPUSH
30063: PPUSH
30064: PPUSH
// if not factory then
30065: LD_VAR 0 1
30069: NOT
30070: IFFALSE 30074
// exit ;
30072: GO 30677
// if control = control_apeman then
30074: LD_VAR 0 4
30078: PUSH
30079: LD_INT 5
30081: EQUAL
30082: IFFALSE 30191
// begin tmp := UnitsInside ( factory ) ;
30084: LD_ADDR_VAR 0 8
30088: PUSH
30089: LD_VAR 0 1
30093: PPUSH
30094: CALL_OW 313
30098: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30099: LD_VAR 0 8
30103: PPUSH
30104: LD_INT 25
30106: PUSH
30107: LD_INT 12
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PPUSH
30114: CALL_OW 72
30118: NOT
30119: IFFALSE 30129
// control := control_manual ;
30121: LD_ADDR_VAR 0 4
30125: PUSH
30126: LD_INT 1
30128: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30129: LD_ADDR_VAR 0 8
30133: PUSH
30134: LD_VAR 0 1
30138: PPUSH
30139: CALL 29826 0 1
30143: ST_TO_ADDR
// if tmp then
30144: LD_VAR 0 8
30148: IFFALSE 30191
// begin for i in tmp do
30150: LD_ADDR_VAR 0 7
30154: PUSH
30155: LD_VAR 0 8
30159: PUSH
30160: FOR_IN
30161: IFFALSE 30189
// if i [ 1 ] = b_ext_radio then
30163: LD_VAR 0 7
30167: PUSH
30168: LD_INT 1
30170: ARRAY
30171: PUSH
30172: LD_INT 22
30174: EQUAL
30175: IFFALSE 30187
// begin control := control_remote ;
30177: LD_ADDR_VAR 0 4
30181: PUSH
30182: LD_INT 2
30184: ST_TO_ADDR
// break ;
30185: GO 30189
// end ;
30187: GO 30160
30189: POP
30190: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30191: LD_VAR 0 1
30195: PPUSH
30196: LD_VAR 0 2
30200: PPUSH
30201: LD_VAR 0 3
30205: PPUSH
30206: LD_VAR 0 4
30210: PPUSH
30211: LD_VAR 0 5
30215: PPUSH
30216: CALL_OW 448
30220: IFFALSE 30255
// begin result := [ chassis , engine , control , weapon ] ;
30222: LD_ADDR_VAR 0 6
30226: PUSH
30227: LD_VAR 0 2
30231: PUSH
30232: LD_VAR 0 3
30236: PUSH
30237: LD_VAR 0 4
30241: PUSH
30242: LD_VAR 0 5
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: ST_TO_ADDR
// exit ;
30253: GO 30677
// end ; _chassis := AvailableChassisList ( factory ) ;
30255: LD_ADDR_VAR 0 9
30259: PUSH
30260: LD_VAR 0 1
30264: PPUSH
30265: CALL_OW 475
30269: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30270: LD_ADDR_VAR 0 11
30274: PUSH
30275: LD_VAR 0 1
30279: PPUSH
30280: CALL_OW 476
30284: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30285: LD_ADDR_VAR 0 12
30289: PUSH
30290: LD_VAR 0 1
30294: PPUSH
30295: CALL_OW 477
30299: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30300: LD_ADDR_VAR 0 10
30304: PUSH
30305: LD_VAR 0 1
30309: PPUSH
30310: CALL_OW 478
30314: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30315: LD_VAR 0 9
30319: NOT
30320: IFTRUE 30329
30322: PUSH
30323: LD_VAR 0 11
30327: NOT
30328: OR
30329: IFTRUE 30338
30331: PUSH
30332: LD_VAR 0 12
30336: NOT
30337: OR
30338: IFTRUE 30347
30340: PUSH
30341: LD_VAR 0 10
30345: NOT
30346: OR
30347: IFFALSE 30382
// begin result := [ chassis , engine , control , weapon ] ;
30349: LD_ADDR_VAR 0 6
30353: PUSH
30354: LD_VAR 0 2
30358: PUSH
30359: LD_VAR 0 3
30363: PUSH
30364: LD_VAR 0 4
30368: PUSH
30369: LD_VAR 0 5
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: ST_TO_ADDR
// exit ;
30380: GO 30677
// end ; if not chassis in _chassis then
30382: LD_VAR 0 2
30386: PUSH
30387: LD_VAR 0 9
30391: IN
30392: NOT
30393: IFFALSE 30419
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30395: LD_ADDR_VAR 0 2
30399: PUSH
30400: LD_VAR 0 9
30404: PUSH
30405: LD_INT 1
30407: PPUSH
30408: LD_VAR 0 9
30412: PPUSH
30413: CALL_OW 12
30417: ARRAY
30418: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30419: LD_VAR 0 2
30423: PPUSH
30424: LD_VAR 0 3
30428: PPUSH
30429: CALL 30682 0 2
30433: NOT
30434: IFFALSE 30495
// repeat engine := _engine [ 1 ] ;
30436: LD_ADDR_VAR 0 3
30440: PUSH
30441: LD_VAR 0 11
30445: PUSH
30446: LD_INT 1
30448: ARRAY
30449: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30450: LD_ADDR_VAR 0 11
30454: PUSH
30455: LD_VAR 0 11
30459: PPUSH
30460: LD_INT 1
30462: PPUSH
30463: CALL_OW 3
30467: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30468: LD_VAR 0 2
30472: PPUSH
30473: LD_VAR 0 3
30477: PPUSH
30478: CALL 30682 0 2
30482: IFTRUE 30493
30484: PUSH
30485: LD_VAR 0 11
30489: PUSH
30490: EMPTY
30491: EQUAL
30492: OR
30493: IFFALSE 30436
// if not control in _control then
30495: LD_VAR 0 4
30499: PUSH
30500: LD_VAR 0 12
30504: IN
30505: NOT
30506: IFFALSE 30532
// control := _control [ rand ( 1 , _control ) ] ;
30508: LD_ADDR_VAR 0 4
30512: PUSH
30513: LD_VAR 0 12
30517: PUSH
30518: LD_INT 1
30520: PPUSH
30521: LD_VAR 0 12
30525: PPUSH
30526: CALL_OW 12
30530: ARRAY
30531: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30532: LD_VAR 0 2
30536: PPUSH
30537: LD_VAR 0 5
30541: PPUSH
30542: CALL 30904 0 2
30546: NOT
30547: IFFALSE 30608
// repeat weapon := _weapon [ 1 ] ;
30549: LD_ADDR_VAR 0 5
30553: PUSH
30554: LD_VAR 0 10
30558: PUSH
30559: LD_INT 1
30561: ARRAY
30562: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30563: LD_ADDR_VAR 0 10
30567: PUSH
30568: LD_VAR 0 10
30572: PPUSH
30573: LD_INT 1
30575: PPUSH
30576: CALL_OW 3
30580: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30581: LD_VAR 0 2
30585: PPUSH
30586: LD_VAR 0 5
30590: PPUSH
30591: CALL 30904 0 2
30595: IFTRUE 30606
30597: PUSH
30598: LD_VAR 0 10
30602: PUSH
30603: EMPTY
30604: EQUAL
30605: OR
30606: IFFALSE 30549
// result := [ ] ;
30608: LD_ADDR_VAR 0 6
30612: PUSH
30613: EMPTY
30614: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30615: LD_VAR 0 1
30619: PPUSH
30620: LD_VAR 0 2
30624: PPUSH
30625: LD_VAR 0 3
30629: PPUSH
30630: LD_VAR 0 4
30634: PPUSH
30635: LD_VAR 0 5
30639: PPUSH
30640: CALL_OW 448
30644: IFFALSE 30677
// result := [ chassis , engine , control , weapon ] ;
30646: LD_ADDR_VAR 0 6
30650: PUSH
30651: LD_VAR 0 2
30655: PUSH
30656: LD_VAR 0 3
30660: PUSH
30661: LD_VAR 0 4
30665: PUSH
30666: LD_VAR 0 5
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: ST_TO_ADDR
// end ;
30677: LD_VAR 0 6
30681: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30682: LD_INT 0
30684: PPUSH
// if not chassis or not engine then
30685: LD_VAR 0 1
30689: NOT
30690: IFTRUE 30699
30692: PUSH
30693: LD_VAR 0 2
30697: NOT
30698: OR
30699: IFFALSE 30703
// exit ;
30701: GO 30899
// case engine of engine_solar :
30703: LD_VAR 0 2
30707: PUSH
30708: LD_INT 2
30710: DOUBLE
30711: EQUAL
30712: IFTRUE 30716
30714: GO 30754
30716: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30717: LD_ADDR_VAR 0 3
30721: PUSH
30722: LD_INT 11
30724: PUSH
30725: LD_INT 12
30727: PUSH
30728: LD_INT 13
30730: PUSH
30731: LD_INT 14
30733: PUSH
30734: LD_INT 1
30736: PUSH
30737: LD_INT 2
30739: PUSH
30740: LD_INT 3
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: ST_TO_ADDR
30752: GO 30883
30754: LD_INT 1
30756: DOUBLE
30757: EQUAL
30758: IFTRUE 30762
30760: GO 30824
30762: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30763: LD_ADDR_VAR 0 3
30767: PUSH
30768: LD_INT 11
30770: PUSH
30771: LD_INT 12
30773: PUSH
30774: LD_INT 13
30776: PUSH
30777: LD_INT 14
30779: PUSH
30780: LD_INT 1
30782: PUSH
30783: LD_INT 2
30785: PUSH
30786: LD_INT 3
30788: PUSH
30789: LD_INT 4
30791: PUSH
30792: LD_INT 5
30794: PUSH
30795: LD_INT 21
30797: PUSH
30798: LD_INT 23
30800: PUSH
30801: LD_INT 22
30803: PUSH
30804: LD_INT 24
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: ST_TO_ADDR
30822: GO 30883
30824: LD_INT 3
30826: DOUBLE
30827: EQUAL
30828: IFTRUE 30832
30830: GO 30882
30832: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30833: LD_ADDR_VAR 0 3
30837: PUSH
30838: LD_INT 13
30840: PUSH
30841: LD_INT 14
30843: PUSH
30844: LD_INT 2
30846: PUSH
30847: LD_INT 3
30849: PUSH
30850: LD_INT 4
30852: PUSH
30853: LD_INT 5
30855: PUSH
30856: LD_INT 21
30858: PUSH
30859: LD_INT 22
30861: PUSH
30862: LD_INT 23
30864: PUSH
30865: LD_INT 24
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: ST_TO_ADDR
30880: GO 30883
30882: POP
// result := ( chassis in result ) ;
30883: LD_ADDR_VAR 0 3
30887: PUSH
30888: LD_VAR 0 1
30892: PUSH
30893: LD_VAR 0 3
30897: IN
30898: ST_TO_ADDR
// end ;
30899: LD_VAR 0 3
30903: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30904: LD_INT 0
30906: PPUSH
// if not chassis or not weapon then
30907: LD_VAR 0 1
30911: NOT
30912: IFTRUE 30921
30914: PUSH
30915: LD_VAR 0 2
30919: NOT
30920: OR
30921: IFFALSE 30925
// exit ;
30923: GO 31985
// case weapon of us_machine_gun :
30925: LD_VAR 0 2
30929: PUSH
30930: LD_INT 2
30932: DOUBLE
30933: EQUAL
30934: IFTRUE 30938
30936: GO 30968
30938: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30939: LD_ADDR_VAR 0 3
30943: PUSH
30944: LD_INT 1
30946: PUSH
30947: LD_INT 2
30949: PUSH
30950: LD_INT 3
30952: PUSH
30953: LD_INT 4
30955: PUSH
30956: LD_INT 5
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: ST_TO_ADDR
30966: GO 31969
30968: LD_INT 3
30970: DOUBLE
30971: EQUAL
30972: IFTRUE 30976
30974: GO 31006
30976: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30977: LD_ADDR_VAR 0 3
30981: PUSH
30982: LD_INT 1
30984: PUSH
30985: LD_INT 2
30987: PUSH
30988: LD_INT 3
30990: PUSH
30991: LD_INT 4
30993: PUSH
30994: LD_INT 5
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: ST_TO_ADDR
31004: GO 31969
31006: LD_INT 11
31008: DOUBLE
31009: EQUAL
31010: IFTRUE 31014
31012: GO 31044
31014: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31015: LD_ADDR_VAR 0 3
31019: PUSH
31020: LD_INT 1
31022: PUSH
31023: LD_INT 2
31025: PUSH
31026: LD_INT 3
31028: PUSH
31029: LD_INT 4
31031: PUSH
31032: LD_INT 5
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: ST_TO_ADDR
31042: GO 31969
31044: LD_INT 4
31046: DOUBLE
31047: EQUAL
31048: IFTRUE 31052
31050: GO 31078
31052: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31053: LD_ADDR_VAR 0 3
31057: PUSH
31058: LD_INT 2
31060: PUSH
31061: LD_INT 3
31063: PUSH
31064: LD_INT 4
31066: PUSH
31067: LD_INT 5
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: ST_TO_ADDR
31076: GO 31969
31078: LD_INT 5
31080: DOUBLE
31081: EQUAL
31082: IFTRUE 31086
31084: GO 31112
31086: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31087: LD_ADDR_VAR 0 3
31091: PUSH
31092: LD_INT 2
31094: PUSH
31095: LD_INT 3
31097: PUSH
31098: LD_INT 4
31100: PUSH
31101: LD_INT 5
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: ST_TO_ADDR
31110: GO 31969
31112: LD_INT 9
31114: DOUBLE
31115: EQUAL
31116: IFTRUE 31120
31118: GO 31146
31120: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31121: LD_ADDR_VAR 0 3
31125: PUSH
31126: LD_INT 2
31128: PUSH
31129: LD_INT 3
31131: PUSH
31132: LD_INT 4
31134: PUSH
31135: LD_INT 5
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: ST_TO_ADDR
31144: GO 31969
31146: LD_INT 7
31148: DOUBLE
31149: EQUAL
31150: IFTRUE 31154
31152: GO 31180
31154: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31155: LD_ADDR_VAR 0 3
31159: PUSH
31160: LD_INT 2
31162: PUSH
31163: LD_INT 3
31165: PUSH
31166: LD_INT 4
31168: PUSH
31169: LD_INT 5
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: ST_TO_ADDR
31178: GO 31969
31180: LD_INT 12
31182: DOUBLE
31183: EQUAL
31184: IFTRUE 31188
31186: GO 31214
31188: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31189: LD_ADDR_VAR 0 3
31193: PUSH
31194: LD_INT 2
31196: PUSH
31197: LD_INT 3
31199: PUSH
31200: LD_INT 4
31202: PUSH
31203: LD_INT 5
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: ST_TO_ADDR
31212: GO 31969
31214: LD_INT 13
31216: DOUBLE
31217: EQUAL
31218: IFTRUE 31222
31220: GO 31248
31222: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31223: LD_ADDR_VAR 0 3
31227: PUSH
31228: LD_INT 2
31230: PUSH
31231: LD_INT 3
31233: PUSH
31234: LD_INT 4
31236: PUSH
31237: LD_INT 5
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: ST_TO_ADDR
31246: GO 31969
31248: LD_INT 14
31250: DOUBLE
31251: EQUAL
31252: IFTRUE 31256
31254: GO 31274
31256: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31257: LD_ADDR_VAR 0 3
31261: PUSH
31262: LD_INT 4
31264: PUSH
31265: LD_INT 5
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: ST_TO_ADDR
31272: GO 31969
31274: LD_INT 6
31276: DOUBLE
31277: EQUAL
31278: IFTRUE 31282
31280: GO 31300
31282: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31283: LD_ADDR_VAR 0 3
31287: PUSH
31288: LD_INT 4
31290: PUSH
31291: LD_INT 5
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: ST_TO_ADDR
31298: GO 31969
31300: LD_INT 10
31302: DOUBLE
31303: EQUAL
31304: IFTRUE 31308
31306: GO 31326
31308: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31309: LD_ADDR_VAR 0 3
31313: PUSH
31314: LD_INT 4
31316: PUSH
31317: LD_INT 5
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: ST_TO_ADDR
31324: GO 31969
31326: LD_INT 22
31328: DOUBLE
31329: EQUAL
31330: IFTRUE 31334
31332: GO 31360
31334: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31335: LD_ADDR_VAR 0 3
31339: PUSH
31340: LD_INT 11
31342: PUSH
31343: LD_INT 12
31345: PUSH
31346: LD_INT 13
31348: PUSH
31349: LD_INT 14
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: LIST
31356: LIST
31357: ST_TO_ADDR
31358: GO 31969
31360: LD_INT 23
31362: DOUBLE
31363: EQUAL
31364: IFTRUE 31368
31366: GO 31394
31368: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31369: LD_ADDR_VAR 0 3
31373: PUSH
31374: LD_INT 11
31376: PUSH
31377: LD_INT 12
31379: PUSH
31380: LD_INT 13
31382: PUSH
31383: LD_INT 14
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: ST_TO_ADDR
31392: GO 31969
31394: LD_INT 24
31396: DOUBLE
31397: EQUAL
31398: IFTRUE 31402
31400: GO 31428
31402: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31403: LD_ADDR_VAR 0 3
31407: PUSH
31408: LD_INT 11
31410: PUSH
31411: LD_INT 12
31413: PUSH
31414: LD_INT 13
31416: PUSH
31417: LD_INT 14
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: ST_TO_ADDR
31426: GO 31969
31428: LD_INT 30
31430: DOUBLE
31431: EQUAL
31432: IFTRUE 31436
31434: GO 31462
31436: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31437: LD_ADDR_VAR 0 3
31441: PUSH
31442: LD_INT 11
31444: PUSH
31445: LD_INT 12
31447: PUSH
31448: LD_INT 13
31450: PUSH
31451: LD_INT 14
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: ST_TO_ADDR
31460: GO 31969
31462: LD_INT 25
31464: DOUBLE
31465: EQUAL
31466: IFTRUE 31470
31468: GO 31488
31470: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31471: LD_ADDR_VAR 0 3
31475: PUSH
31476: LD_INT 13
31478: PUSH
31479: LD_INT 14
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: ST_TO_ADDR
31486: GO 31969
31488: LD_INT 27
31490: DOUBLE
31491: EQUAL
31492: IFTRUE 31496
31494: GO 31514
31496: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31497: LD_ADDR_VAR 0 3
31501: PUSH
31502: LD_INT 13
31504: PUSH
31505: LD_INT 14
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: ST_TO_ADDR
31512: GO 31969
31514: LD_INT 92
31516: DOUBLE
31517: EQUAL
31518: IFTRUE 31522
31520: GO 31548
31522: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31523: LD_ADDR_VAR 0 3
31527: PUSH
31528: LD_INT 11
31530: PUSH
31531: LD_INT 12
31533: PUSH
31534: LD_INT 13
31536: PUSH
31537: LD_INT 14
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: ST_TO_ADDR
31546: GO 31969
31548: LD_INT 28
31550: DOUBLE
31551: EQUAL
31552: IFTRUE 31556
31554: GO 31574
31556: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31557: LD_ADDR_VAR 0 3
31561: PUSH
31562: LD_INT 13
31564: PUSH
31565: LD_INT 14
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: ST_TO_ADDR
31572: GO 31969
31574: LD_INT 29
31576: DOUBLE
31577: EQUAL
31578: IFTRUE 31582
31580: GO 31600
31582: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31583: LD_ADDR_VAR 0 3
31587: PUSH
31588: LD_INT 13
31590: PUSH
31591: LD_INT 14
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: ST_TO_ADDR
31598: GO 31969
31600: LD_INT 31
31602: DOUBLE
31603: EQUAL
31604: IFTRUE 31608
31606: GO 31626
31608: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31609: LD_ADDR_VAR 0 3
31613: PUSH
31614: LD_INT 13
31616: PUSH
31617: LD_INT 14
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: ST_TO_ADDR
31624: GO 31969
31626: LD_INT 26
31628: DOUBLE
31629: EQUAL
31630: IFTRUE 31634
31632: GO 31652
31634: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31635: LD_ADDR_VAR 0 3
31639: PUSH
31640: LD_INT 13
31642: PUSH
31643: LD_INT 14
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: ST_TO_ADDR
31650: GO 31969
31652: LD_INT 42
31654: DOUBLE
31655: EQUAL
31656: IFTRUE 31660
31658: GO 31686
31660: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31661: LD_ADDR_VAR 0 3
31665: PUSH
31666: LD_INT 21
31668: PUSH
31669: LD_INT 22
31671: PUSH
31672: LD_INT 23
31674: PUSH
31675: LD_INT 24
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: ST_TO_ADDR
31684: GO 31969
31686: LD_INT 43
31688: DOUBLE
31689: EQUAL
31690: IFTRUE 31694
31692: GO 31720
31694: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31695: LD_ADDR_VAR 0 3
31699: PUSH
31700: LD_INT 21
31702: PUSH
31703: LD_INT 22
31705: PUSH
31706: LD_INT 23
31708: PUSH
31709: LD_INT 24
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: ST_TO_ADDR
31718: GO 31969
31720: LD_INT 44
31722: DOUBLE
31723: EQUAL
31724: IFTRUE 31728
31726: GO 31754
31728: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31729: LD_ADDR_VAR 0 3
31733: PUSH
31734: LD_INT 21
31736: PUSH
31737: LD_INT 22
31739: PUSH
31740: LD_INT 23
31742: PUSH
31743: LD_INT 24
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: ST_TO_ADDR
31752: GO 31969
31754: LD_INT 45
31756: DOUBLE
31757: EQUAL
31758: IFTRUE 31762
31760: GO 31788
31762: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31763: LD_ADDR_VAR 0 3
31767: PUSH
31768: LD_INT 21
31770: PUSH
31771: LD_INT 22
31773: PUSH
31774: LD_INT 23
31776: PUSH
31777: LD_INT 24
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: ST_TO_ADDR
31786: GO 31969
31788: LD_INT 49
31790: DOUBLE
31791: EQUAL
31792: IFTRUE 31796
31794: GO 31822
31796: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31797: LD_ADDR_VAR 0 3
31801: PUSH
31802: LD_INT 21
31804: PUSH
31805: LD_INT 22
31807: PUSH
31808: LD_INT 23
31810: PUSH
31811: LD_INT 24
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: ST_TO_ADDR
31820: GO 31969
31822: LD_INT 51
31824: DOUBLE
31825: EQUAL
31826: IFTRUE 31830
31828: GO 31856
31830: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31831: LD_ADDR_VAR 0 3
31835: PUSH
31836: LD_INT 21
31838: PUSH
31839: LD_INT 22
31841: PUSH
31842: LD_INT 23
31844: PUSH
31845: LD_INT 24
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: ST_TO_ADDR
31854: GO 31969
31856: LD_INT 52
31858: DOUBLE
31859: EQUAL
31860: IFTRUE 31864
31862: GO 31890
31864: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31865: LD_ADDR_VAR 0 3
31869: PUSH
31870: LD_INT 21
31872: PUSH
31873: LD_INT 22
31875: PUSH
31876: LD_INT 23
31878: PUSH
31879: LD_INT 24
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: ST_TO_ADDR
31888: GO 31969
31890: LD_INT 53
31892: DOUBLE
31893: EQUAL
31894: IFTRUE 31898
31896: GO 31916
31898: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31899: LD_ADDR_VAR 0 3
31903: PUSH
31904: LD_INT 23
31906: PUSH
31907: LD_INT 24
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: ST_TO_ADDR
31914: GO 31969
31916: LD_INT 46
31918: DOUBLE
31919: EQUAL
31920: IFTRUE 31924
31922: GO 31942
31924: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31925: LD_ADDR_VAR 0 3
31929: PUSH
31930: LD_INT 23
31932: PUSH
31933: LD_INT 24
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: ST_TO_ADDR
31940: GO 31969
31942: LD_INT 47
31944: DOUBLE
31945: EQUAL
31946: IFTRUE 31950
31948: GO 31968
31950: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31951: LD_ADDR_VAR 0 3
31955: PUSH
31956: LD_INT 23
31958: PUSH
31959: LD_INT 24
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: ST_TO_ADDR
31966: GO 31969
31968: POP
// result := ( chassis in result ) ;
31969: LD_ADDR_VAR 0 3
31973: PUSH
31974: LD_VAR 0 1
31978: PUSH
31979: LD_VAR 0 3
31983: IN
31984: ST_TO_ADDR
// end ;
31985: LD_VAR 0 3
31989: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31990: LD_INT 0
31992: PPUSH
31993: PPUSH
31994: PPUSH
31995: PPUSH
31996: PPUSH
31997: PPUSH
31998: PPUSH
// result := array ;
31999: LD_ADDR_VAR 0 5
32003: PUSH
32004: LD_VAR 0 1
32008: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32009: LD_VAR 0 1
32013: NOT
32014: IFTRUE 32023
32016: PUSH
32017: LD_VAR 0 2
32021: NOT
32022: OR
32023: IFTRUE 32032
32025: PUSH
32026: LD_VAR 0 3
32030: NOT
32031: OR
32032: IFTRUE 32046
32034: PUSH
32035: LD_VAR 0 2
32039: PUSH
32040: LD_VAR 0 1
32044: GREATER
32045: OR
32046: IFTRUE 32060
32048: PUSH
32049: LD_VAR 0 3
32053: PUSH
32054: LD_VAR 0 1
32058: GREATER
32059: OR
32060: IFFALSE 32064
// exit ;
32062: GO 32360
// if direction then
32064: LD_VAR 0 4
32068: IFFALSE 32132
// begin d := 1 ;
32070: LD_ADDR_VAR 0 9
32074: PUSH
32075: LD_INT 1
32077: ST_TO_ADDR
// if i_from > i_to then
32078: LD_VAR 0 2
32082: PUSH
32083: LD_VAR 0 3
32087: GREATER
32088: IFFALSE 32114
// length := ( array - i_from ) + i_to else
32090: LD_ADDR_VAR 0 11
32094: PUSH
32095: LD_VAR 0 1
32099: PUSH
32100: LD_VAR 0 2
32104: MINUS
32105: PUSH
32106: LD_VAR 0 3
32110: PLUS
32111: ST_TO_ADDR
32112: GO 32130
// length := i_to - i_from ;
32114: LD_ADDR_VAR 0 11
32118: PUSH
32119: LD_VAR 0 3
32123: PUSH
32124: LD_VAR 0 2
32128: MINUS
32129: ST_TO_ADDR
// end else
32130: GO 32193
// begin d := - 1 ;
32132: LD_ADDR_VAR 0 9
32136: PUSH
32137: LD_INT 1
32139: NEG
32140: ST_TO_ADDR
// if i_from > i_to then
32141: LD_VAR 0 2
32145: PUSH
32146: LD_VAR 0 3
32150: GREATER
32151: IFFALSE 32171
// length := i_from - i_to else
32153: LD_ADDR_VAR 0 11
32157: PUSH
32158: LD_VAR 0 2
32162: PUSH
32163: LD_VAR 0 3
32167: MINUS
32168: ST_TO_ADDR
32169: GO 32193
// length := ( array - i_to ) + i_from ;
32171: LD_ADDR_VAR 0 11
32175: PUSH
32176: LD_VAR 0 1
32180: PUSH
32181: LD_VAR 0 3
32185: MINUS
32186: PUSH
32187: LD_VAR 0 2
32191: PLUS
32192: ST_TO_ADDR
// end ; if not length then
32193: LD_VAR 0 11
32197: NOT
32198: IFFALSE 32202
// exit ;
32200: GO 32360
// tmp := array ;
32202: LD_ADDR_VAR 0 10
32206: PUSH
32207: LD_VAR 0 1
32211: ST_TO_ADDR
// for i = 1 to length do
32212: LD_ADDR_VAR 0 6
32216: PUSH
32217: DOUBLE
32218: LD_INT 1
32220: DEC
32221: ST_TO_ADDR
32222: LD_VAR 0 11
32226: PUSH
32227: FOR_TO
32228: IFFALSE 32348
// begin for j = 1 to array do
32230: LD_ADDR_VAR 0 7
32234: PUSH
32235: DOUBLE
32236: LD_INT 1
32238: DEC
32239: ST_TO_ADDR
32240: LD_VAR 0 1
32244: PUSH
32245: FOR_TO
32246: IFFALSE 32334
// begin k := j + d ;
32248: LD_ADDR_VAR 0 8
32252: PUSH
32253: LD_VAR 0 7
32257: PUSH
32258: LD_VAR 0 9
32262: PLUS
32263: ST_TO_ADDR
// if k > array then
32264: LD_VAR 0 8
32268: PUSH
32269: LD_VAR 0 1
32273: GREATER
32274: IFFALSE 32284
// k := 1 ;
32276: LD_ADDR_VAR 0 8
32280: PUSH
32281: LD_INT 1
32283: ST_TO_ADDR
// if not k then
32284: LD_VAR 0 8
32288: NOT
32289: IFFALSE 32301
// k := array ;
32291: LD_ADDR_VAR 0 8
32295: PUSH
32296: LD_VAR 0 1
32300: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32301: LD_ADDR_VAR 0 10
32305: PUSH
32306: LD_VAR 0 10
32310: PPUSH
32311: LD_VAR 0 8
32315: PPUSH
32316: LD_VAR 0 1
32320: PUSH
32321: LD_VAR 0 7
32325: ARRAY
32326: PPUSH
32327: CALL_OW 1
32331: ST_TO_ADDR
// end ;
32332: GO 32245
32334: POP
32335: POP
// array := tmp ;
32336: LD_ADDR_VAR 0 1
32340: PUSH
32341: LD_VAR 0 10
32345: ST_TO_ADDR
// end ;
32346: GO 32227
32348: POP
32349: POP
// result := array ;
32350: LD_ADDR_VAR 0 5
32354: PUSH
32355: LD_VAR 0 1
32359: ST_TO_ADDR
// end ;
32360: LD_VAR 0 5
32364: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32365: LD_INT 0
32367: PPUSH
32368: PPUSH
// result := 0 ;
32369: LD_ADDR_VAR 0 3
32373: PUSH
32374: LD_INT 0
32376: ST_TO_ADDR
// if not array or not value in array then
32377: LD_VAR 0 1
32381: NOT
32382: IFTRUE 32397
32384: PUSH
32385: LD_VAR 0 2
32389: PUSH
32390: LD_VAR 0 1
32394: IN
32395: NOT
32396: OR
32397: IFFALSE 32401
// exit ;
32399: GO 32455
// for i = 1 to array do
32401: LD_ADDR_VAR 0 4
32405: PUSH
32406: DOUBLE
32407: LD_INT 1
32409: DEC
32410: ST_TO_ADDR
32411: LD_VAR 0 1
32415: PUSH
32416: FOR_TO
32417: IFFALSE 32453
// if value = array [ i ] then
32419: LD_VAR 0 2
32423: PUSH
32424: LD_VAR 0 1
32428: PUSH
32429: LD_VAR 0 4
32433: ARRAY
32434: EQUAL
32435: IFFALSE 32451
// begin result := i ;
32437: LD_ADDR_VAR 0 3
32441: PUSH
32442: LD_VAR 0 4
32446: ST_TO_ADDR
// exit ;
32447: POP
32448: POP
32449: GO 32455
// end ;
32451: GO 32416
32453: POP
32454: POP
// end ;
32455: LD_VAR 0 3
32459: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32460: LD_INT 0
32462: PPUSH
// vc_chassis := chassis ;
32463: LD_ADDR_OWVAR 37
32467: PUSH
32468: LD_VAR 0 1
32472: ST_TO_ADDR
// vc_engine := engine ;
32473: LD_ADDR_OWVAR 39
32477: PUSH
32478: LD_VAR 0 2
32482: ST_TO_ADDR
// vc_control := control ;
32483: LD_ADDR_OWVAR 38
32487: PUSH
32488: LD_VAR 0 3
32492: ST_TO_ADDR
// vc_weapon := weapon ;
32493: LD_ADDR_OWVAR 40
32497: PUSH
32498: LD_VAR 0 4
32502: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32503: LD_ADDR_OWVAR 41
32507: PUSH
32508: LD_VAR 0 5
32512: ST_TO_ADDR
// end ;
32513: LD_VAR 0 6
32517: RET
// export function WantPlant ( unit ) ; var task ; begin
32518: LD_INT 0
32520: PPUSH
32521: PPUSH
// result := false ;
32522: LD_ADDR_VAR 0 2
32526: PUSH
32527: LD_INT 0
32529: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32530: LD_ADDR_VAR 0 3
32534: PUSH
32535: LD_VAR 0 1
32539: PPUSH
32540: CALL_OW 437
32544: ST_TO_ADDR
// if task then
32545: LD_VAR 0 3
32549: IFFALSE 32577
// if task [ 1 ] [ 1 ] = p then
32551: LD_VAR 0 3
32555: PUSH
32556: LD_INT 1
32558: ARRAY
32559: PUSH
32560: LD_INT 1
32562: ARRAY
32563: PUSH
32564: LD_STRING p
32566: EQUAL
32567: IFFALSE 32577
// result := true ;
32569: LD_ADDR_VAR 0 2
32573: PUSH
32574: LD_INT 1
32576: ST_TO_ADDR
// end ;
32577: LD_VAR 0 2
32581: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32582: LD_INT 0
32584: PPUSH
32585: PPUSH
32586: PPUSH
32587: PPUSH
// if pos < 1 then
32588: LD_VAR 0 2
32592: PUSH
32593: LD_INT 1
32595: LESS
32596: IFFALSE 32600
// exit ;
32598: GO 32903
// if pos = 1 then
32600: LD_VAR 0 2
32604: PUSH
32605: LD_INT 1
32607: EQUAL
32608: IFFALSE 32641
// result := Replace ( arr , pos [ 1 ] , value ) else
32610: LD_ADDR_VAR 0 4
32614: PUSH
32615: LD_VAR 0 1
32619: PPUSH
32620: LD_VAR 0 2
32624: PUSH
32625: LD_INT 1
32627: ARRAY
32628: PPUSH
32629: LD_VAR 0 3
32633: PPUSH
32634: CALL_OW 1
32638: ST_TO_ADDR
32639: GO 32903
// begin tmp := arr ;
32641: LD_ADDR_VAR 0 6
32645: PUSH
32646: LD_VAR 0 1
32650: ST_TO_ADDR
// s_arr := [ tmp ] ;
32651: LD_ADDR_VAR 0 7
32655: PUSH
32656: LD_VAR 0 6
32660: PUSH
32661: EMPTY
32662: LIST
32663: ST_TO_ADDR
// for i = 1 to pos - 1 do
32664: LD_ADDR_VAR 0 5
32668: PUSH
32669: DOUBLE
32670: LD_INT 1
32672: DEC
32673: ST_TO_ADDR
32674: LD_VAR 0 2
32678: PUSH
32679: LD_INT 1
32681: MINUS
32682: PUSH
32683: FOR_TO
32684: IFFALSE 32729
// begin tmp := tmp [ pos [ i ] ] ;
32686: LD_ADDR_VAR 0 6
32690: PUSH
32691: LD_VAR 0 6
32695: PUSH
32696: LD_VAR 0 2
32700: PUSH
32701: LD_VAR 0 5
32705: ARRAY
32706: ARRAY
32707: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32708: LD_ADDR_VAR 0 7
32712: PUSH
32713: LD_VAR 0 7
32717: PUSH
32718: LD_VAR 0 6
32722: PUSH
32723: EMPTY
32724: LIST
32725: ADD
32726: ST_TO_ADDR
// end ;
32727: GO 32683
32729: POP
32730: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32731: LD_ADDR_VAR 0 6
32735: PUSH
32736: LD_VAR 0 6
32740: PPUSH
32741: LD_VAR 0 2
32745: PUSH
32746: LD_VAR 0 2
32750: ARRAY
32751: PPUSH
32752: LD_VAR 0 3
32756: PPUSH
32757: CALL_OW 1
32761: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32762: LD_ADDR_VAR 0 7
32766: PUSH
32767: LD_VAR 0 7
32771: PPUSH
32772: LD_VAR 0 7
32776: PPUSH
32777: LD_VAR 0 6
32781: PPUSH
32782: CALL_OW 1
32786: ST_TO_ADDR
// for i = s_arr downto 2 do
32787: LD_ADDR_VAR 0 5
32791: PUSH
32792: DOUBLE
32793: LD_VAR 0 7
32797: INC
32798: ST_TO_ADDR
32799: LD_INT 2
32801: PUSH
32802: FOR_DOWNTO
32803: IFFALSE 32887
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32805: LD_ADDR_VAR 0 6
32809: PUSH
32810: LD_VAR 0 7
32814: PUSH
32815: LD_VAR 0 5
32819: PUSH
32820: LD_INT 1
32822: MINUS
32823: ARRAY
32824: PPUSH
32825: LD_VAR 0 2
32829: PUSH
32830: LD_VAR 0 5
32834: PUSH
32835: LD_INT 1
32837: MINUS
32838: ARRAY
32839: PPUSH
32840: LD_VAR 0 7
32844: PUSH
32845: LD_VAR 0 5
32849: ARRAY
32850: PPUSH
32851: CALL_OW 1
32855: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32856: LD_ADDR_VAR 0 7
32860: PUSH
32861: LD_VAR 0 7
32865: PPUSH
32866: LD_VAR 0 5
32870: PUSH
32871: LD_INT 1
32873: MINUS
32874: PPUSH
32875: LD_VAR 0 6
32879: PPUSH
32880: CALL_OW 1
32884: ST_TO_ADDR
// end ;
32885: GO 32802
32887: POP
32888: POP
// result := s_arr [ 1 ] ;
32889: LD_ADDR_VAR 0 4
32893: PUSH
32894: LD_VAR 0 7
32898: PUSH
32899: LD_INT 1
32901: ARRAY
32902: ST_TO_ADDR
// end ; end ;
32903: LD_VAR 0 4
32907: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32908: LD_INT 0
32910: PPUSH
32911: PPUSH
// if not list then
32912: LD_VAR 0 1
32916: NOT
32917: IFFALSE 32921
// exit ;
32919: GO 33012
// i := list [ pos1 ] ;
32921: LD_ADDR_VAR 0 5
32925: PUSH
32926: LD_VAR 0 1
32930: PUSH
32931: LD_VAR 0 2
32935: ARRAY
32936: ST_TO_ADDR
// if not i then
32937: LD_VAR 0 5
32941: NOT
32942: IFFALSE 32946
// exit ;
32944: GO 33012
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32946: LD_ADDR_VAR 0 1
32950: PUSH
32951: LD_VAR 0 1
32955: PPUSH
32956: LD_VAR 0 2
32960: PPUSH
32961: LD_VAR 0 1
32965: PUSH
32966: LD_VAR 0 3
32970: ARRAY
32971: PPUSH
32972: CALL_OW 1
32976: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32977: LD_ADDR_VAR 0 1
32981: PUSH
32982: LD_VAR 0 1
32986: PPUSH
32987: LD_VAR 0 3
32991: PPUSH
32992: LD_VAR 0 5
32996: PPUSH
32997: CALL_OW 1
33001: ST_TO_ADDR
// result := list ;
33002: LD_ADDR_VAR 0 4
33006: PUSH
33007: LD_VAR 0 1
33011: ST_TO_ADDR
// end ;
33012: LD_VAR 0 4
33016: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33017: LD_INT 0
33019: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33020: LD_ADDR_VAR 0 5
33024: PUSH
33025: LD_VAR 0 1
33029: PPUSH
33030: CALL_OW 250
33034: PPUSH
33035: LD_VAR 0 1
33039: PPUSH
33040: CALL_OW 251
33044: PPUSH
33045: LD_VAR 0 2
33049: PPUSH
33050: LD_VAR 0 3
33054: PPUSH
33055: LD_VAR 0 4
33059: PPUSH
33060: CALL 33442 0 5
33064: ST_TO_ADDR
// end ;
33065: LD_VAR 0 5
33069: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
33070: LD_INT 0
33072: PPUSH
33073: PPUSH
33074: PPUSH
33075: PPUSH
// if not list or not unit then
33076: LD_VAR 0 2
33080: NOT
33081: IFTRUE 33090
33083: PUSH
33084: LD_VAR 0 1
33088: NOT
33089: OR
33090: IFFALSE 33094
// exit ;
33092: GO 33437
// result := [ ] ;
33094: LD_ADDR_VAR 0 5
33098: PUSH
33099: EMPTY
33100: ST_TO_ADDR
// for i in list do
33101: LD_ADDR_VAR 0 6
33105: PUSH
33106: LD_VAR 0 2
33110: PUSH
33111: FOR_IN
33112: IFFALSE 33330
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
33114: LD_ADDR_VAR 0 8
33118: PUSH
33119: LD_VAR 0 1
33123: PPUSH
33124: LD_VAR 0 6
33128: PUSH
33129: LD_INT 1
33131: ARRAY
33132: PPUSH
33133: LD_VAR 0 6
33137: PUSH
33138: LD_INT 2
33140: ARRAY
33141: PPUSH
33142: CALL_OW 297
33146: ST_TO_ADDR
// if not Count ( result ) then
33147: LD_VAR 0 5
33151: PPUSH
33152: CALL 29698 0 1
33156: NOT
33157: IFFALSE 33190
// begin result := Join ( result , [ i , tmp ] ) ;
33159: LD_ADDR_VAR 0 5
33163: PUSH
33164: LD_VAR 0 5
33168: PPUSH
33169: LD_VAR 0 6
33173: PUSH
33174: LD_VAR 0 8
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PPUSH
33183: CALL 65630 0 2
33187: ST_TO_ADDR
// continue ;
33188: GO 33111
// end ; if result [ result ] [ 2 ] <= tmp then
33190: LD_VAR 0 5
33194: PUSH
33195: LD_VAR 0 5
33199: ARRAY
33200: PUSH
33201: LD_INT 2
33203: ARRAY
33204: PUSH
33205: LD_VAR 0 8
33209: LESSEQUAL
33210: IFFALSE 33243
// result := Join ( result , [ i , tmp ] ) else
33212: LD_ADDR_VAR 0 5
33216: PUSH
33217: LD_VAR 0 5
33221: PPUSH
33222: LD_VAR 0 6
33226: PUSH
33227: LD_VAR 0 8
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PPUSH
33236: CALL 65630 0 2
33240: ST_TO_ADDR
33241: GO 33328
// begin for j := 1 to Count ( result ) do
33243: LD_ADDR_VAR 0 7
33247: PUSH
33248: DOUBLE
33249: LD_INT 1
33251: DEC
33252: ST_TO_ADDR
33253: LD_VAR 0 5
33257: PPUSH
33258: CALL 29698 0 1
33262: PUSH
33263: FOR_TO
33264: IFFALSE 33326
// begin if tmp < result [ j ] [ 2 ] then
33266: LD_VAR 0 8
33270: PUSH
33271: LD_VAR 0 5
33275: PUSH
33276: LD_VAR 0 7
33280: ARRAY
33281: PUSH
33282: LD_INT 2
33284: ARRAY
33285: LESS
33286: IFFALSE 33324
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33288: LD_ADDR_VAR 0 5
33292: PUSH
33293: LD_VAR 0 5
33297: PPUSH
33298: LD_VAR 0 7
33302: PPUSH
33303: LD_VAR 0 6
33307: PUSH
33308: LD_VAR 0 8
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PPUSH
33317: CALL_OW 2
33321: ST_TO_ADDR
// break ;
33322: GO 33326
// end ; end ;
33324: GO 33263
33326: POP
33327: POP
// end ; end ;
33328: GO 33111
33330: POP
33331: POP
// if result and not asc then
33332: LD_VAR 0 5
33336: IFFALSE 33345
33338: PUSH
33339: LD_VAR 0 3
33343: NOT
33344: AND
33345: IFFALSE 33362
// result := ReverseArray ( result ) ;
33347: LD_ADDR_VAR 0 5
33351: PUSH
33352: LD_VAR 0 5
33356: PPUSH
33357: CALL 60720 0 1
33361: ST_TO_ADDR
// tmp := [ ] ;
33362: LD_ADDR_VAR 0 8
33366: PUSH
33367: EMPTY
33368: ST_TO_ADDR
// if mode then
33369: LD_VAR 0 4
33373: IFFALSE 33437
// begin for i := 1 to result do
33375: LD_ADDR_VAR 0 6
33379: PUSH
33380: DOUBLE
33381: LD_INT 1
33383: DEC
33384: ST_TO_ADDR
33385: LD_VAR 0 5
33389: PUSH
33390: FOR_TO
33391: IFFALSE 33425
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
33393: LD_ADDR_VAR 0 8
33397: PUSH
33398: LD_VAR 0 8
33402: PPUSH
33403: LD_VAR 0 5
33407: PUSH
33408: LD_VAR 0 6
33412: ARRAY
33413: PUSH
33414: LD_INT 1
33416: ARRAY
33417: PPUSH
33418: CALL 65630 0 2
33422: ST_TO_ADDR
33423: GO 33390
33425: POP
33426: POP
// result := tmp ;
33427: LD_ADDR_VAR 0 5
33431: PUSH
33432: LD_VAR 0 8
33436: ST_TO_ADDR
// end ; end ;
33437: LD_VAR 0 5
33441: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33442: LD_INT 0
33444: PPUSH
33445: PPUSH
33446: PPUSH
33447: PPUSH
// if not list then
33448: LD_VAR 0 3
33452: NOT
33453: IFFALSE 33457
// exit ;
33455: GO 33847
// result := [ ] ;
33457: LD_ADDR_VAR 0 6
33461: PUSH
33462: EMPTY
33463: ST_TO_ADDR
// for i in list do
33464: LD_ADDR_VAR 0 7
33468: PUSH
33469: LD_VAR 0 3
33473: PUSH
33474: FOR_IN
33475: IFFALSE 33677
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33477: LD_ADDR_VAR 0 9
33481: PUSH
33482: LD_VAR 0 7
33486: PPUSH
33487: LD_VAR 0 1
33491: PPUSH
33492: LD_VAR 0 2
33496: PPUSH
33497: CALL_OW 297
33501: ST_TO_ADDR
// if not result then
33502: LD_VAR 0 6
33506: NOT
33507: IFFALSE 33533
// result := [ [ i , tmp ] ] else
33509: LD_ADDR_VAR 0 6
33513: PUSH
33514: LD_VAR 0 7
33518: PUSH
33519: LD_VAR 0 9
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: EMPTY
33529: LIST
33530: ST_TO_ADDR
33531: GO 33675
// begin if result [ result ] [ 2 ] <= tmp then
33533: LD_VAR 0 6
33537: PUSH
33538: LD_VAR 0 6
33542: ARRAY
33543: PUSH
33544: LD_INT 2
33546: ARRAY
33547: PUSH
33548: LD_VAR 0 9
33552: LESSEQUAL
33553: IFFALSE 33595
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33555: LD_ADDR_VAR 0 6
33559: PUSH
33560: LD_VAR 0 6
33564: PPUSH
33565: LD_VAR 0 6
33569: PUSH
33570: LD_INT 1
33572: PLUS
33573: PPUSH
33574: LD_VAR 0 7
33578: PUSH
33579: LD_VAR 0 9
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PPUSH
33588: CALL_OW 2
33592: ST_TO_ADDR
33593: GO 33675
// for j := 1 to result do
33595: LD_ADDR_VAR 0 8
33599: PUSH
33600: DOUBLE
33601: LD_INT 1
33603: DEC
33604: ST_TO_ADDR
33605: LD_VAR 0 6
33609: PUSH
33610: FOR_TO
33611: IFFALSE 33673
// begin if tmp < result [ j ] [ 2 ] then
33613: LD_VAR 0 9
33617: PUSH
33618: LD_VAR 0 6
33622: PUSH
33623: LD_VAR 0 8
33627: ARRAY
33628: PUSH
33629: LD_INT 2
33631: ARRAY
33632: LESS
33633: IFFALSE 33671
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33635: LD_ADDR_VAR 0 6
33639: PUSH
33640: LD_VAR 0 6
33644: PPUSH
33645: LD_VAR 0 8
33649: PPUSH
33650: LD_VAR 0 7
33654: PUSH
33655: LD_VAR 0 9
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: PPUSH
33664: CALL_OW 2
33668: ST_TO_ADDR
// break ;
33669: GO 33673
// end ; end ;
33671: GO 33610
33673: POP
33674: POP
// end ; end ;
33675: GO 33474
33677: POP
33678: POP
// if result and not asc then
33679: LD_VAR 0 6
33683: IFFALSE 33692
33685: PUSH
33686: LD_VAR 0 4
33690: NOT
33691: AND
33692: IFFALSE 33767
// begin tmp := result ;
33694: LD_ADDR_VAR 0 9
33698: PUSH
33699: LD_VAR 0 6
33703: ST_TO_ADDR
// for i = tmp downto 1 do
33704: LD_ADDR_VAR 0 7
33708: PUSH
33709: DOUBLE
33710: LD_VAR 0 9
33714: INC
33715: ST_TO_ADDR
33716: LD_INT 1
33718: PUSH
33719: FOR_DOWNTO
33720: IFFALSE 33765
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33722: LD_ADDR_VAR 0 6
33726: PUSH
33727: LD_VAR 0 6
33731: PPUSH
33732: LD_VAR 0 9
33736: PUSH
33737: LD_VAR 0 7
33741: MINUS
33742: PUSH
33743: LD_INT 1
33745: PLUS
33746: PPUSH
33747: LD_VAR 0 9
33751: PUSH
33752: LD_VAR 0 7
33756: ARRAY
33757: PPUSH
33758: CALL_OW 1
33762: ST_TO_ADDR
33763: GO 33719
33765: POP
33766: POP
// end ; tmp := [ ] ;
33767: LD_ADDR_VAR 0 9
33771: PUSH
33772: EMPTY
33773: ST_TO_ADDR
// if mode then
33774: LD_VAR 0 5
33778: IFFALSE 33847
// begin for i = 1 to result do
33780: LD_ADDR_VAR 0 7
33784: PUSH
33785: DOUBLE
33786: LD_INT 1
33788: DEC
33789: ST_TO_ADDR
33790: LD_VAR 0 6
33794: PUSH
33795: FOR_TO
33796: IFFALSE 33835
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33798: LD_ADDR_VAR 0 9
33802: PUSH
33803: LD_VAR 0 9
33807: PPUSH
33808: LD_VAR 0 7
33812: PPUSH
33813: LD_VAR 0 6
33817: PUSH
33818: LD_VAR 0 7
33822: ARRAY
33823: PUSH
33824: LD_INT 1
33826: ARRAY
33827: PPUSH
33828: CALL_OW 1
33832: ST_TO_ADDR
33833: GO 33795
33835: POP
33836: POP
// result := tmp ;
33837: LD_ADDR_VAR 0 6
33841: PUSH
33842: LD_VAR 0 9
33846: ST_TO_ADDR
// end ; end ;
33847: LD_VAR 0 6
33851: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33852: LD_INT 0
33854: PPUSH
33855: PPUSH
33856: PPUSH
33857: PPUSH
33858: PPUSH
33859: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33860: LD_ADDR_VAR 0 5
33864: PUSH
33865: LD_INT 0
33867: PUSH
33868: LD_INT 0
33870: PUSH
33871: LD_INT 0
33873: PUSH
33874: EMPTY
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: ST_TO_ADDR
// if not x or not y then
33882: LD_VAR 0 2
33886: NOT
33887: IFTRUE 33896
33889: PUSH
33890: LD_VAR 0 3
33894: NOT
33895: OR
33896: IFFALSE 33900
// exit ;
33898: GO 35556
// if not range then
33900: LD_VAR 0 4
33904: NOT
33905: IFFALSE 33915
// range := 10 ;
33907: LD_ADDR_VAR 0 4
33911: PUSH
33912: LD_INT 10
33914: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33915: LD_ADDR_VAR 0 8
33919: PUSH
33920: LD_INT 81
33922: PUSH
33923: LD_VAR 0 1
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 92
33934: PUSH
33935: LD_VAR 0 2
33939: PUSH
33940: LD_VAR 0 3
33944: PUSH
33945: LD_VAR 0 4
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 3
33958: PUSH
33959: LD_INT 21
33961: PUSH
33962: LD_INT 3
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: LIST
33977: PPUSH
33978: CALL_OW 69
33982: ST_TO_ADDR
// if not tmp then
33983: LD_VAR 0 8
33987: NOT
33988: IFFALSE 33992
// exit ;
33990: GO 35556
// for i in tmp do
33992: LD_ADDR_VAR 0 6
33996: PUSH
33997: LD_VAR 0 8
34001: PUSH
34002: FOR_IN
34003: IFFALSE 35531
// begin points := [ 0 , 0 , 0 ] ;
34005: LD_ADDR_VAR 0 9
34009: PUSH
34010: LD_INT 0
34012: PUSH
34013: LD_INT 0
34015: PUSH
34016: LD_INT 0
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: LIST
34023: ST_TO_ADDR
// bpoints := 1 ;
34024: LD_ADDR_VAR 0 10
34028: PUSH
34029: LD_INT 1
34031: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34032: LD_VAR 0 6
34036: PPUSH
34037: CALL_OW 247
34041: PUSH
34042: LD_INT 1
34044: DOUBLE
34045: EQUAL
34046: IFTRUE 34050
34048: GO 34632
34050: POP
// begin if GetClass ( i ) = 1 then
34051: LD_VAR 0 6
34055: PPUSH
34056: CALL_OW 257
34060: PUSH
34061: LD_INT 1
34063: EQUAL
34064: IFFALSE 34085
// points := [ 10 , 5 , 3 ] ;
34066: LD_ADDR_VAR 0 9
34070: PUSH
34071: LD_INT 10
34073: PUSH
34074: LD_INT 5
34076: PUSH
34077: LD_INT 3
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: LIST
34084: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34085: LD_VAR 0 6
34089: PPUSH
34090: CALL_OW 257
34094: PUSH
34095: LD_INT 2
34097: PUSH
34098: LD_INT 3
34100: PUSH
34101: LD_INT 4
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: LIST
34108: IN
34109: IFFALSE 34130
// points := [ 3 , 2 , 1 ] ;
34111: LD_ADDR_VAR 0 9
34115: PUSH
34116: LD_INT 3
34118: PUSH
34119: LD_INT 2
34121: PUSH
34122: LD_INT 1
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: LIST
34129: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34130: LD_VAR 0 6
34134: PPUSH
34135: CALL_OW 257
34139: PUSH
34140: LD_INT 5
34142: EQUAL
34143: IFFALSE 34164
// points := [ 130 , 5 , 2 ] ;
34145: LD_ADDR_VAR 0 9
34149: PUSH
34150: LD_INT 130
34152: PUSH
34153: LD_INT 5
34155: PUSH
34156: LD_INT 2
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: LIST
34163: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34164: LD_VAR 0 6
34168: PPUSH
34169: CALL_OW 257
34173: PUSH
34174: LD_INT 8
34176: EQUAL
34177: IFFALSE 34198
// points := [ 35 , 35 , 30 ] ;
34179: LD_ADDR_VAR 0 9
34183: PUSH
34184: LD_INT 35
34186: PUSH
34187: LD_INT 35
34189: PUSH
34190: LD_INT 30
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: LIST
34197: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34198: LD_VAR 0 6
34202: PPUSH
34203: CALL_OW 257
34207: PUSH
34208: LD_INT 9
34210: EQUAL
34211: IFFALSE 34232
// points := [ 20 , 55 , 40 ] ;
34213: LD_ADDR_VAR 0 9
34217: PUSH
34218: LD_INT 20
34220: PUSH
34221: LD_INT 55
34223: PUSH
34224: LD_INT 40
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: LIST
34231: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34232: LD_VAR 0 6
34236: PPUSH
34237: CALL_OW 257
34241: PUSH
34242: LD_INT 12
34244: PUSH
34245: LD_INT 16
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: IN
34252: IFFALSE 34273
// points := [ 5 , 3 , 2 ] ;
34254: LD_ADDR_VAR 0 9
34258: PUSH
34259: LD_INT 5
34261: PUSH
34262: LD_INT 3
34264: PUSH
34265: LD_INT 2
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: LIST
34272: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34273: LD_VAR 0 6
34277: PPUSH
34278: CALL_OW 257
34282: PUSH
34283: LD_INT 17
34285: EQUAL
34286: IFFALSE 34307
// points := [ 100 , 50 , 75 ] ;
34288: LD_ADDR_VAR 0 9
34292: PUSH
34293: LD_INT 100
34295: PUSH
34296: LD_INT 50
34298: PUSH
34299: LD_INT 75
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: LIST
34306: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34307: LD_VAR 0 6
34311: PPUSH
34312: CALL_OW 257
34316: PUSH
34317: LD_INT 15
34319: EQUAL
34320: IFFALSE 34341
// points := [ 10 , 5 , 3 ] ;
34322: LD_ADDR_VAR 0 9
34326: PUSH
34327: LD_INT 10
34329: PUSH
34330: LD_INT 5
34332: PUSH
34333: LD_INT 3
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: LIST
34340: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34341: LD_VAR 0 6
34345: PPUSH
34346: CALL_OW 257
34350: PUSH
34351: LD_INT 14
34353: EQUAL
34354: IFFALSE 34375
// points := [ 10 , 0 , 0 ] ;
34356: LD_ADDR_VAR 0 9
34360: PUSH
34361: LD_INT 10
34363: PUSH
34364: LD_INT 0
34366: PUSH
34367: LD_INT 0
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: LIST
34374: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34375: LD_VAR 0 6
34379: PPUSH
34380: CALL_OW 257
34384: PUSH
34385: LD_INT 11
34387: EQUAL
34388: IFFALSE 34409
// points := [ 30 , 10 , 5 ] ;
34390: LD_ADDR_VAR 0 9
34394: PUSH
34395: LD_INT 30
34397: PUSH
34398: LD_INT 10
34400: PUSH
34401: LD_INT 5
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: LIST
34408: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34409: LD_VAR 0 1
34413: PPUSH
34414: LD_INT 5
34416: PPUSH
34417: CALL_OW 321
34421: PUSH
34422: LD_INT 2
34424: EQUAL
34425: IFFALSE 34442
// bpoints := bpoints * 1.8 ;
34427: LD_ADDR_VAR 0 10
34431: PUSH
34432: LD_VAR 0 10
34436: PUSH
34437: LD_REAL  1.80000000000000E+0000
34440: MUL
34441: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34442: LD_VAR 0 6
34446: PPUSH
34447: CALL_OW 257
34451: PUSH
34452: LD_INT 1
34454: PUSH
34455: LD_INT 2
34457: PUSH
34458: LD_INT 3
34460: PUSH
34461: LD_INT 4
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: IN
34470: IFFALSE 34490
34472: PUSH
34473: LD_VAR 0 1
34477: PPUSH
34478: LD_INT 51
34480: PPUSH
34481: CALL_OW 321
34485: PUSH
34486: LD_INT 2
34488: EQUAL
34489: AND
34490: IFFALSE 34507
// bpoints := bpoints * 1.2 ;
34492: LD_ADDR_VAR 0 10
34496: PUSH
34497: LD_VAR 0 10
34501: PUSH
34502: LD_REAL  1.20000000000000E+0000
34505: MUL
34506: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34507: LD_VAR 0 6
34511: PPUSH
34512: CALL_OW 257
34516: PUSH
34517: LD_INT 5
34519: PUSH
34520: LD_INT 7
34522: PUSH
34523: LD_INT 9
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: LIST
34530: IN
34531: IFFALSE 34551
34533: PUSH
34534: LD_VAR 0 1
34538: PPUSH
34539: LD_INT 52
34541: PPUSH
34542: CALL_OW 321
34546: PUSH
34547: LD_INT 2
34549: EQUAL
34550: AND
34551: IFFALSE 34568
// bpoints := bpoints * 1.5 ;
34553: LD_ADDR_VAR 0 10
34557: PUSH
34558: LD_VAR 0 10
34562: PUSH
34563: LD_REAL  1.50000000000000E+0000
34566: MUL
34567: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34568: LD_VAR 0 1
34572: PPUSH
34573: LD_INT 66
34575: PPUSH
34576: CALL_OW 321
34580: PUSH
34581: LD_INT 2
34583: EQUAL
34584: IFFALSE 34601
// bpoints := bpoints * 1.1 ;
34586: LD_ADDR_VAR 0 10
34590: PUSH
34591: LD_VAR 0 10
34595: PUSH
34596: LD_REAL  1.10000000000000E+0000
34599: MUL
34600: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34601: LD_ADDR_VAR 0 10
34605: PUSH
34606: LD_VAR 0 10
34610: PUSH
34611: LD_VAR 0 6
34615: PPUSH
34616: LD_INT 1
34618: PPUSH
34619: CALL_OW 259
34623: PUSH
34624: LD_REAL  1.15000000000000E+0000
34627: MUL
34628: MUL
34629: ST_TO_ADDR
// end ; unit_vehicle :
34630: GO 35460
34632: LD_INT 2
34634: DOUBLE
34635: EQUAL
34636: IFTRUE 34640
34638: GO 35448
34640: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34641: LD_VAR 0 6
34645: PPUSH
34646: CALL_OW 264
34650: PUSH
34651: LD_INT 2
34653: PUSH
34654: LD_INT 42
34656: PUSH
34657: LD_INT 24
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: LIST
34664: IN
34665: IFFALSE 34686
// points := [ 25 , 5 , 3 ] ;
34667: LD_ADDR_VAR 0 9
34671: PUSH
34672: LD_INT 25
34674: PUSH
34675: LD_INT 5
34677: PUSH
34678: LD_INT 3
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: LIST
34685: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34686: LD_VAR 0 6
34690: PPUSH
34691: CALL_OW 264
34695: PUSH
34696: LD_INT 4
34698: PUSH
34699: LD_INT 43
34701: PUSH
34702: LD_INT 25
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: LIST
34709: IN
34710: IFFALSE 34731
// points := [ 40 , 15 , 5 ] ;
34712: LD_ADDR_VAR 0 9
34716: PUSH
34717: LD_INT 40
34719: PUSH
34720: LD_INT 15
34722: PUSH
34723: LD_INT 5
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: LIST
34730: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34731: LD_VAR 0 6
34735: PPUSH
34736: CALL_OW 264
34740: PUSH
34741: LD_INT 3
34743: PUSH
34744: LD_INT 23
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: IN
34751: IFFALSE 34772
// points := [ 7 , 25 , 8 ] ;
34753: LD_ADDR_VAR 0 9
34757: PUSH
34758: LD_INT 7
34760: PUSH
34761: LD_INT 25
34763: PUSH
34764: LD_INT 8
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: LIST
34771: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34772: LD_VAR 0 6
34776: PPUSH
34777: CALL_OW 264
34781: PUSH
34782: LD_INT 5
34784: PUSH
34785: LD_INT 27
34787: PUSH
34788: LD_INT 44
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: LIST
34795: IN
34796: IFFALSE 34817
// points := [ 14 , 50 , 16 ] ;
34798: LD_ADDR_VAR 0 9
34802: PUSH
34803: LD_INT 14
34805: PUSH
34806: LD_INT 50
34808: PUSH
34809: LD_INT 16
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: LIST
34816: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34817: LD_VAR 0 6
34821: PPUSH
34822: CALL_OW 264
34826: PUSH
34827: LD_INT 6
34829: PUSH
34830: LD_INT 46
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: IN
34837: IFFALSE 34858
// points := [ 32 , 120 , 70 ] ;
34839: LD_ADDR_VAR 0 9
34843: PUSH
34844: LD_INT 32
34846: PUSH
34847: LD_INT 120
34849: PUSH
34850: LD_INT 70
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: LIST
34857: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34858: LD_VAR 0 6
34862: PPUSH
34863: CALL_OW 264
34867: PUSH
34868: LD_INT 7
34870: PUSH
34871: LD_INT 28
34873: PUSH
34874: LD_INT 45
34876: PUSH
34877: LD_INT 92
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: IN
34886: IFFALSE 34907
// points := [ 35 , 20 , 45 ] ;
34888: LD_ADDR_VAR 0 9
34892: PUSH
34893: LD_INT 35
34895: PUSH
34896: LD_INT 20
34898: PUSH
34899: LD_INT 45
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: LIST
34906: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34907: LD_VAR 0 6
34911: PPUSH
34912: CALL_OW 264
34916: PUSH
34917: LD_INT 47
34919: PUSH
34920: EMPTY
34921: LIST
34922: IN
34923: IFFALSE 34944
// points := [ 67 , 45 , 75 ] ;
34925: LD_ADDR_VAR 0 9
34929: PUSH
34930: LD_INT 67
34932: PUSH
34933: LD_INT 45
34935: PUSH
34936: LD_INT 75
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: LIST
34943: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34944: LD_VAR 0 6
34948: PPUSH
34949: CALL_OW 264
34953: PUSH
34954: LD_INT 26
34956: PUSH
34957: EMPTY
34958: LIST
34959: IN
34960: IFFALSE 34981
// points := [ 120 , 30 , 80 ] ;
34962: LD_ADDR_VAR 0 9
34966: PUSH
34967: LD_INT 120
34969: PUSH
34970: LD_INT 30
34972: PUSH
34973: LD_INT 80
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: LIST
34980: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34981: LD_VAR 0 6
34985: PPUSH
34986: CALL_OW 264
34990: PUSH
34991: LD_INT 22
34993: PUSH
34994: EMPTY
34995: LIST
34996: IN
34997: IFFALSE 35018
// points := [ 40 , 1 , 1 ] ;
34999: LD_ADDR_VAR 0 9
35003: PUSH
35004: LD_INT 40
35006: PUSH
35007: LD_INT 1
35009: PUSH
35010: LD_INT 1
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: LIST
35017: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35018: LD_VAR 0 6
35022: PPUSH
35023: CALL_OW 264
35027: PUSH
35028: LD_INT 29
35030: PUSH
35031: EMPTY
35032: LIST
35033: IN
35034: IFFALSE 35055
// points := [ 70 , 200 , 400 ] ;
35036: LD_ADDR_VAR 0 9
35040: PUSH
35041: LD_INT 70
35043: PUSH
35044: LD_INT 200
35046: PUSH
35047: LD_INT 400
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: LIST
35054: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35055: LD_VAR 0 6
35059: PPUSH
35060: CALL_OW 264
35064: PUSH
35065: LD_INT 14
35067: PUSH
35068: LD_INT 53
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: IN
35075: IFFALSE 35096
// points := [ 40 , 10 , 20 ] ;
35077: LD_ADDR_VAR 0 9
35081: PUSH
35082: LD_INT 40
35084: PUSH
35085: LD_INT 10
35087: PUSH
35088: LD_INT 20
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: LIST
35095: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35096: LD_VAR 0 6
35100: PPUSH
35101: CALL_OW 264
35105: PUSH
35106: LD_INT 9
35108: PUSH
35109: EMPTY
35110: LIST
35111: IN
35112: IFFALSE 35133
// points := [ 5 , 70 , 20 ] ;
35114: LD_ADDR_VAR 0 9
35118: PUSH
35119: LD_INT 5
35121: PUSH
35122: LD_INT 70
35124: PUSH
35125: LD_INT 20
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: LIST
35132: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35133: LD_VAR 0 6
35137: PPUSH
35138: CALL_OW 264
35142: PUSH
35143: LD_INT 10
35145: PUSH
35146: EMPTY
35147: LIST
35148: IN
35149: IFFALSE 35170
// points := [ 35 , 110 , 70 ] ;
35151: LD_ADDR_VAR 0 9
35155: PUSH
35156: LD_INT 35
35158: PUSH
35159: LD_INT 110
35161: PUSH
35162: LD_INT 70
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: LIST
35169: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35170: LD_VAR 0 6
35174: PPUSH
35175: CALL_OW 265
35179: PUSH
35180: LD_INT 25
35182: EQUAL
35183: IFFALSE 35204
// points := [ 80 , 65 , 100 ] ;
35185: LD_ADDR_VAR 0 9
35189: PUSH
35190: LD_INT 80
35192: PUSH
35193: LD_INT 65
35195: PUSH
35196: LD_INT 100
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: LIST
35203: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35204: LD_VAR 0 6
35208: PPUSH
35209: CALL_OW 263
35213: PUSH
35214: LD_INT 1
35216: EQUAL
35217: IFFALSE 35252
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35219: LD_ADDR_VAR 0 10
35223: PUSH
35224: LD_VAR 0 10
35228: PUSH
35229: LD_VAR 0 6
35233: PPUSH
35234: CALL_OW 311
35238: PPUSH
35239: LD_INT 3
35241: PPUSH
35242: CALL_OW 259
35246: PUSH
35247: LD_INT 4
35249: MUL
35250: MUL
35251: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35252: LD_VAR 0 6
35256: PPUSH
35257: CALL_OW 263
35261: PUSH
35262: LD_INT 2
35264: EQUAL
35265: IFFALSE 35316
// begin j := IsControledBy ( i ) ;
35267: LD_ADDR_VAR 0 7
35271: PUSH
35272: LD_VAR 0 6
35276: PPUSH
35277: CALL_OW 312
35281: ST_TO_ADDR
// if j then
35282: LD_VAR 0 7
35286: IFFALSE 35316
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35288: LD_ADDR_VAR 0 10
35292: PUSH
35293: LD_VAR 0 10
35297: PUSH
35298: LD_VAR 0 7
35302: PPUSH
35303: LD_INT 3
35305: PPUSH
35306: CALL_OW 259
35310: PUSH
35311: LD_INT 3
35313: MUL
35314: MUL
35315: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35316: LD_VAR 0 6
35320: PPUSH
35321: CALL_OW 264
35325: PUSH
35326: LD_INT 5
35328: PUSH
35329: LD_INT 6
35331: PUSH
35332: LD_INT 46
35334: PUSH
35335: LD_INT 44
35337: PUSH
35338: LD_INT 47
35340: PUSH
35341: LD_INT 45
35343: PUSH
35344: LD_INT 28
35346: PUSH
35347: LD_INT 7
35349: PUSH
35350: LD_INT 27
35352: PUSH
35353: LD_INT 29
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: IN
35368: IFFALSE 35388
35370: PUSH
35371: LD_VAR 0 1
35375: PPUSH
35376: LD_INT 52
35378: PPUSH
35379: CALL_OW 321
35383: PUSH
35384: LD_INT 2
35386: EQUAL
35387: AND
35388: IFFALSE 35405
// bpoints := bpoints * 1.2 ;
35390: LD_ADDR_VAR 0 10
35394: PUSH
35395: LD_VAR 0 10
35399: PUSH
35400: LD_REAL  1.20000000000000E+0000
35403: MUL
35404: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35405: LD_VAR 0 6
35409: PPUSH
35410: CALL_OW 264
35414: PUSH
35415: LD_INT 6
35417: PUSH
35418: LD_INT 46
35420: PUSH
35421: LD_INT 47
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: LIST
35428: IN
35429: IFFALSE 35446
// bpoints := bpoints * 1.2 ;
35431: LD_ADDR_VAR 0 10
35435: PUSH
35436: LD_VAR 0 10
35440: PUSH
35441: LD_REAL  1.20000000000000E+0000
35444: MUL
35445: ST_TO_ADDR
// end ; unit_building :
35446: GO 35460
35448: LD_INT 3
35450: DOUBLE
35451: EQUAL
35452: IFTRUE 35456
35454: GO 35459
35456: POP
// ; end ;
35457: GO 35460
35459: POP
// for j = 1 to 3 do
35460: LD_ADDR_VAR 0 7
35464: PUSH
35465: DOUBLE
35466: LD_INT 1
35468: DEC
35469: ST_TO_ADDR
35470: LD_INT 3
35472: PUSH
35473: FOR_TO
35474: IFFALSE 35527
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35476: LD_ADDR_VAR 0 5
35480: PUSH
35481: LD_VAR 0 5
35485: PPUSH
35486: LD_VAR 0 7
35490: PPUSH
35491: LD_VAR 0 5
35495: PUSH
35496: LD_VAR 0 7
35500: ARRAY
35501: PUSH
35502: LD_VAR 0 9
35506: PUSH
35507: LD_VAR 0 7
35511: ARRAY
35512: PUSH
35513: LD_VAR 0 10
35517: MUL
35518: PLUS
35519: PPUSH
35520: CALL_OW 1
35524: ST_TO_ADDR
35525: GO 35473
35527: POP
35528: POP
// end ;
35529: GO 34002
35531: POP
35532: POP
// result := Replace ( result , 4 , tmp ) ;
35533: LD_ADDR_VAR 0 5
35537: PUSH
35538: LD_VAR 0 5
35542: PPUSH
35543: LD_INT 4
35545: PPUSH
35546: LD_VAR 0 8
35550: PPUSH
35551: CALL_OW 1
35555: ST_TO_ADDR
// end ;
35556: LD_VAR 0 5
35560: RET
// export function DangerAtRange ( unit , range ) ; begin
35561: LD_INT 0
35563: PPUSH
// if not unit then
35564: LD_VAR 0 1
35568: NOT
35569: IFFALSE 35573
// exit ;
35571: GO 35618
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35573: LD_ADDR_VAR 0 3
35577: PUSH
35578: LD_VAR 0 1
35582: PPUSH
35583: CALL_OW 255
35587: PPUSH
35588: LD_VAR 0 1
35592: PPUSH
35593: CALL_OW 250
35597: PPUSH
35598: LD_VAR 0 1
35602: PPUSH
35603: CALL_OW 251
35607: PPUSH
35608: LD_VAR 0 2
35612: PPUSH
35613: CALL 33852 0 4
35617: ST_TO_ADDR
// end ;
35618: LD_VAR 0 3
35622: RET
// export function DangerInArea ( side , area ) ; begin
35623: LD_INT 0
35625: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35626: LD_ADDR_VAR 0 3
35630: PUSH
35631: LD_VAR 0 2
35635: PPUSH
35636: LD_INT 81
35638: PUSH
35639: LD_VAR 0 1
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PPUSH
35648: CALL_OW 70
35652: ST_TO_ADDR
// end ;
35653: LD_VAR 0 3
35657: RET
// export function IsExtension ( b ) ; begin
35658: LD_INT 0
35660: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35661: LD_ADDR_VAR 0 2
35665: PUSH
35666: LD_VAR 0 1
35670: PUSH
35671: LD_INT 23
35673: PUSH
35674: LD_INT 20
35676: PUSH
35677: LD_INT 22
35679: PUSH
35680: LD_INT 17
35682: PUSH
35683: LD_INT 24
35685: PUSH
35686: LD_INT 21
35688: PUSH
35689: LD_INT 19
35691: PUSH
35692: LD_INT 16
35694: PUSH
35695: LD_INT 25
35697: PUSH
35698: LD_INT 18
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: IN
35713: ST_TO_ADDR
// end ;
35714: LD_VAR 0 2
35718: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35719: LD_INT 0
35721: PPUSH
35722: PPUSH
35723: PPUSH
// result := [ ] ;
35724: LD_ADDR_VAR 0 4
35728: PUSH
35729: EMPTY
35730: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35731: LD_ADDR_VAR 0 5
35735: PUSH
35736: LD_VAR 0 2
35740: PPUSH
35741: LD_INT 21
35743: PUSH
35744: LD_INT 3
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PPUSH
35751: CALL_OW 70
35755: ST_TO_ADDR
// if not tmp then
35756: LD_VAR 0 5
35760: NOT
35761: IFFALSE 35765
// exit ;
35763: GO 35829
// if checkLink then
35765: LD_VAR 0 3
35769: IFFALSE 35819
// begin for i in tmp do
35771: LD_ADDR_VAR 0 6
35775: PUSH
35776: LD_VAR 0 5
35780: PUSH
35781: FOR_IN
35782: IFFALSE 35817
// if GetBase ( i ) <> base then
35784: LD_VAR 0 6
35788: PPUSH
35789: CALL_OW 274
35793: PUSH
35794: LD_VAR 0 1
35798: NONEQUAL
35799: IFFALSE 35815
// ComLinkToBase ( base , i ) ;
35801: LD_VAR 0 1
35805: PPUSH
35806: LD_VAR 0 6
35810: PPUSH
35811: CALL_OW 169
35815: GO 35781
35817: POP
35818: POP
// end ; result := tmp ;
35819: LD_ADDR_VAR 0 4
35823: PUSH
35824: LD_VAR 0 5
35828: ST_TO_ADDR
// end ;
35829: LD_VAR 0 4
35833: RET
// export function ComComplete ( units , b ) ; var i ; begin
35834: LD_INT 0
35836: PPUSH
35837: PPUSH
// if not units then
35838: LD_VAR 0 1
35842: NOT
35843: IFFALSE 35847
// exit ;
35845: GO 35937
// for i in units do
35847: LD_ADDR_VAR 0 4
35851: PUSH
35852: LD_VAR 0 1
35856: PUSH
35857: FOR_IN
35858: IFFALSE 35935
// if BuildingStatus ( b ) = bs_build then
35860: LD_VAR 0 2
35864: PPUSH
35865: CALL_OW 461
35869: PUSH
35870: LD_INT 1
35872: EQUAL
35873: IFFALSE 35933
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35875: LD_VAR 0 4
35879: PPUSH
35880: LD_STRING h
35882: PUSH
35883: LD_VAR 0 2
35887: PPUSH
35888: CALL_OW 250
35892: PUSH
35893: LD_VAR 0 2
35897: PPUSH
35898: CALL_OW 251
35902: PUSH
35903: LD_VAR 0 2
35907: PUSH
35908: LD_INT 0
35910: PUSH
35911: LD_INT 0
35913: PUSH
35914: LD_INT 0
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: PUSH
35926: EMPTY
35927: LIST
35928: PPUSH
35929: CALL_OW 446
35933: GO 35857
35935: POP
35936: POP
// end ;
35937: LD_VAR 0 3
35941: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35942: LD_INT 0
35944: PPUSH
35945: PPUSH
35946: PPUSH
35947: PPUSH
35948: PPUSH
35949: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35950: LD_VAR 0 1
35954: NOT
35955: IFTRUE 35972
35957: PUSH
35958: LD_VAR 0 1
35962: PPUSH
35963: CALL_OW 263
35967: PUSH
35968: LD_INT 2
35970: NONEQUAL
35971: OR
35972: IFFALSE 35976
// exit ;
35974: GO 36292
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35976: LD_ADDR_VAR 0 6
35980: PUSH
35981: LD_INT 22
35983: PUSH
35984: LD_VAR 0 1
35988: PPUSH
35989: CALL_OW 255
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: LD_INT 2
36000: PUSH
36001: LD_INT 30
36003: PUSH
36004: LD_INT 36
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 34
36013: PUSH
36014: LD_INT 31
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: LIST
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PPUSH
36030: CALL_OW 69
36034: ST_TO_ADDR
// if not tmp then
36035: LD_VAR 0 6
36039: NOT
36040: IFFALSE 36044
// exit ;
36042: GO 36292
// result := [ ] ;
36044: LD_ADDR_VAR 0 2
36048: PUSH
36049: EMPTY
36050: ST_TO_ADDR
// for i in tmp do
36051: LD_ADDR_VAR 0 3
36055: PUSH
36056: LD_VAR 0 6
36060: PUSH
36061: FOR_IN
36062: IFFALSE 36133
// begin t := UnitsInside ( i ) ;
36064: LD_ADDR_VAR 0 4
36068: PUSH
36069: LD_VAR 0 3
36073: PPUSH
36074: CALL_OW 313
36078: ST_TO_ADDR
// if t then
36079: LD_VAR 0 4
36083: IFFALSE 36131
// for j in t do
36085: LD_ADDR_VAR 0 7
36089: PUSH
36090: LD_VAR 0 4
36094: PUSH
36095: FOR_IN
36096: IFFALSE 36129
// result := Replace ( result , result + 1 , j ) ;
36098: LD_ADDR_VAR 0 2
36102: PUSH
36103: LD_VAR 0 2
36107: PPUSH
36108: LD_VAR 0 2
36112: PUSH
36113: LD_INT 1
36115: PLUS
36116: PPUSH
36117: LD_VAR 0 7
36121: PPUSH
36122: CALL_OW 1
36126: ST_TO_ADDR
36127: GO 36095
36129: POP
36130: POP
// end ;
36131: GO 36061
36133: POP
36134: POP
// if not result then
36135: LD_VAR 0 2
36139: NOT
36140: IFFALSE 36144
// exit ;
36142: GO 36292
// mech := result [ 1 ] ;
36144: LD_ADDR_VAR 0 5
36148: PUSH
36149: LD_VAR 0 2
36153: PUSH
36154: LD_INT 1
36156: ARRAY
36157: ST_TO_ADDR
// if result > 1 then
36158: LD_VAR 0 2
36162: PUSH
36163: LD_INT 1
36165: GREATER
36166: IFFALSE 36278
// begin for i = 2 to result do
36168: LD_ADDR_VAR 0 3
36172: PUSH
36173: DOUBLE
36174: LD_INT 2
36176: DEC
36177: ST_TO_ADDR
36178: LD_VAR 0 2
36182: PUSH
36183: FOR_TO
36184: IFFALSE 36276
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36186: LD_ADDR_VAR 0 4
36190: PUSH
36191: LD_VAR 0 2
36195: PUSH
36196: LD_VAR 0 3
36200: ARRAY
36201: PPUSH
36202: LD_INT 3
36204: PPUSH
36205: CALL_OW 259
36209: PUSH
36210: LD_VAR 0 2
36214: PUSH
36215: LD_VAR 0 3
36219: ARRAY
36220: PPUSH
36221: CALL_OW 432
36225: MINUS
36226: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36227: LD_VAR 0 4
36231: PUSH
36232: LD_VAR 0 5
36236: PPUSH
36237: LD_INT 3
36239: PPUSH
36240: CALL_OW 259
36244: PUSH
36245: LD_VAR 0 5
36249: PPUSH
36250: CALL_OW 432
36254: MINUS
36255: GREATEREQUAL
36256: IFFALSE 36274
// mech := result [ i ] ;
36258: LD_ADDR_VAR 0 5
36262: PUSH
36263: LD_VAR 0 2
36267: PUSH
36268: LD_VAR 0 3
36272: ARRAY
36273: ST_TO_ADDR
// end ;
36274: GO 36183
36276: POP
36277: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36278: LD_VAR 0 1
36282: PPUSH
36283: LD_VAR 0 5
36287: PPUSH
36288: CALL_OW 135
// end ;
36292: LD_VAR 0 2
36296: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36297: LD_INT 0
36299: PPUSH
36300: PPUSH
36301: PPUSH
36302: PPUSH
36303: PPUSH
36304: PPUSH
36305: PPUSH
36306: PPUSH
36307: PPUSH
36308: PPUSH
36309: PPUSH
36310: PPUSH
36311: PPUSH
// result := [ ] ;
36312: LD_ADDR_VAR 0 7
36316: PUSH
36317: EMPTY
36318: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36319: LD_VAR 0 1
36323: PPUSH
36324: CALL_OW 266
36328: PUSH
36329: LD_INT 0
36331: PUSH
36332: LD_INT 1
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: IN
36339: NOT
36340: IFFALSE 36344
// exit ;
36342: GO 37984
// if name then
36344: LD_VAR 0 3
36348: IFFALSE 36364
// SetBName ( base_dep , name ) ;
36350: LD_VAR 0 1
36354: PPUSH
36355: LD_VAR 0 3
36359: PPUSH
36360: CALL_OW 500
// base := GetBase ( base_dep ) ;
36364: LD_ADDR_VAR 0 15
36368: PUSH
36369: LD_VAR 0 1
36373: PPUSH
36374: CALL_OW 274
36378: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36379: LD_ADDR_VAR 0 16
36383: PUSH
36384: LD_VAR 0 1
36388: PPUSH
36389: CALL_OW 255
36393: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36394: LD_ADDR_VAR 0 17
36398: PUSH
36399: LD_VAR 0 1
36403: PPUSH
36404: CALL_OW 248
36408: ST_TO_ADDR
// if sources then
36409: LD_VAR 0 5
36413: IFFALSE 36460
// for i = 1 to 3 do
36415: LD_ADDR_VAR 0 8
36419: PUSH
36420: DOUBLE
36421: LD_INT 1
36423: DEC
36424: ST_TO_ADDR
36425: LD_INT 3
36427: PUSH
36428: FOR_TO
36429: IFFALSE 36458
// AddResourceType ( base , i , sources [ i ] ) ;
36431: LD_VAR 0 15
36435: PPUSH
36436: LD_VAR 0 8
36440: PPUSH
36441: LD_VAR 0 5
36445: PUSH
36446: LD_VAR 0 8
36450: ARRAY
36451: PPUSH
36452: CALL_OW 276
36456: GO 36428
36458: POP
36459: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36460: LD_ADDR_VAR 0 18
36464: PUSH
36465: LD_VAR 0 15
36469: PPUSH
36470: LD_VAR 0 2
36474: PPUSH
36475: LD_INT 1
36477: PPUSH
36478: CALL 35719 0 3
36482: ST_TO_ADDR
// InitHc ;
36483: CALL_OW 19
// InitUc ;
36487: CALL_OW 18
// uc_side := side ;
36491: LD_ADDR_OWVAR 20
36495: PUSH
36496: LD_VAR 0 16
36500: ST_TO_ADDR
// uc_nation := nation ;
36501: LD_ADDR_OWVAR 21
36505: PUSH
36506: LD_VAR 0 17
36510: ST_TO_ADDR
// if buildings then
36511: LD_VAR 0 18
36515: IFFALSE 37843
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36517: LD_ADDR_VAR 0 19
36521: PUSH
36522: LD_VAR 0 18
36526: PPUSH
36527: LD_INT 2
36529: PUSH
36530: LD_INT 30
36532: PUSH
36533: LD_INT 29
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 30
36542: PUSH
36543: LD_INT 30
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: LIST
36554: PPUSH
36555: CALL_OW 72
36559: ST_TO_ADDR
// if tmp then
36560: LD_VAR 0 19
36564: IFFALSE 36612
// for i in tmp do
36566: LD_ADDR_VAR 0 8
36570: PUSH
36571: LD_VAR 0 19
36575: PUSH
36576: FOR_IN
36577: IFFALSE 36610
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36579: LD_VAR 0 8
36583: PPUSH
36584: CALL_OW 250
36588: PPUSH
36589: LD_VAR 0 8
36593: PPUSH
36594: CALL_OW 251
36598: PPUSH
36599: LD_VAR 0 16
36603: PPUSH
36604: CALL_OW 441
36608: GO 36576
36610: POP
36611: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36612: LD_VAR 0 18
36616: PPUSH
36617: LD_INT 2
36619: PUSH
36620: LD_INT 30
36622: PUSH
36623: LD_INT 32
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 30
36632: PUSH
36633: LD_INT 33
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: LIST
36644: PPUSH
36645: CALL_OW 72
36649: IFFALSE 36737
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36651: LD_ADDR_VAR 0 8
36655: PUSH
36656: LD_VAR 0 18
36660: PPUSH
36661: LD_INT 2
36663: PUSH
36664: LD_INT 30
36666: PUSH
36667: LD_INT 32
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 30
36676: PUSH
36677: LD_INT 33
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: LIST
36688: PPUSH
36689: CALL_OW 72
36693: PUSH
36694: FOR_IN
36695: IFFALSE 36735
// begin if not GetBWeapon ( i ) then
36697: LD_VAR 0 8
36701: PPUSH
36702: CALL_OW 269
36706: NOT
36707: IFFALSE 36733
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36709: LD_VAR 0 8
36713: PPUSH
36714: LD_VAR 0 8
36718: PPUSH
36719: LD_VAR 0 2
36723: PPUSH
36724: CALL 37989 0 2
36728: PPUSH
36729: CALL_OW 431
// end ;
36733: GO 36694
36735: POP
36736: POP
// end ; for i = 1 to personel do
36737: LD_ADDR_VAR 0 8
36741: PUSH
36742: DOUBLE
36743: LD_INT 1
36745: DEC
36746: ST_TO_ADDR
36747: LD_VAR 0 6
36751: PUSH
36752: FOR_TO
36753: IFFALSE 37823
// begin if i > 4 then
36755: LD_VAR 0 8
36759: PUSH
36760: LD_INT 4
36762: GREATER
36763: IFFALSE 36767
// break ;
36765: GO 37823
// case i of 1 :
36767: LD_VAR 0 8
36771: PUSH
36772: LD_INT 1
36774: DOUBLE
36775: EQUAL
36776: IFTRUE 36780
36778: GO 36860
36780: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36781: LD_ADDR_VAR 0 12
36785: PUSH
36786: LD_VAR 0 18
36790: PPUSH
36791: LD_INT 22
36793: PUSH
36794: LD_VAR 0 16
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 58
36805: PUSH
36806: EMPTY
36807: LIST
36808: PUSH
36809: LD_INT 2
36811: PUSH
36812: LD_INT 30
36814: PUSH
36815: LD_INT 32
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 30
36824: PUSH
36825: LD_INT 4
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 30
36834: PUSH
36835: LD_INT 5
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: LIST
36852: PPUSH
36853: CALL_OW 72
36857: ST_TO_ADDR
36858: GO 37082
36860: LD_INT 2
36862: DOUBLE
36863: EQUAL
36864: IFTRUE 36868
36866: GO 36930
36868: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36869: LD_ADDR_VAR 0 12
36873: PUSH
36874: LD_VAR 0 18
36878: PPUSH
36879: LD_INT 22
36881: PUSH
36882: LD_VAR 0 16
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 2
36893: PUSH
36894: LD_INT 30
36896: PUSH
36897: LD_INT 0
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 30
36906: PUSH
36907: LD_INT 1
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: LIST
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PPUSH
36923: CALL_OW 72
36927: ST_TO_ADDR
36928: GO 37082
36930: LD_INT 3
36932: DOUBLE
36933: EQUAL
36934: IFTRUE 36938
36936: GO 37000
36938: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36939: LD_ADDR_VAR 0 12
36943: PUSH
36944: LD_VAR 0 18
36948: PPUSH
36949: LD_INT 22
36951: PUSH
36952: LD_VAR 0 16
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 2
36963: PUSH
36964: LD_INT 30
36966: PUSH
36967: LD_INT 2
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: PUSH
36974: LD_INT 30
36976: PUSH
36977: LD_INT 3
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: LIST
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PPUSH
36993: CALL_OW 72
36997: ST_TO_ADDR
36998: GO 37082
37000: LD_INT 4
37002: DOUBLE
37003: EQUAL
37004: IFTRUE 37008
37006: GO 37081
37008: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37009: LD_ADDR_VAR 0 12
37013: PUSH
37014: LD_VAR 0 18
37018: PPUSH
37019: LD_INT 22
37021: PUSH
37022: LD_VAR 0 16
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 2
37033: PUSH
37034: LD_INT 30
37036: PUSH
37037: LD_INT 6
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 30
37046: PUSH
37047: LD_INT 7
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 30
37056: PUSH
37057: LD_INT 8
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PPUSH
37074: CALL_OW 72
37078: ST_TO_ADDR
37079: GO 37082
37081: POP
// if i = 1 then
37082: LD_VAR 0 8
37086: PUSH
37087: LD_INT 1
37089: EQUAL
37090: IFFALSE 37201
// begin tmp := [ ] ;
37092: LD_ADDR_VAR 0 19
37096: PUSH
37097: EMPTY
37098: ST_TO_ADDR
// for j in f do
37099: LD_ADDR_VAR 0 9
37103: PUSH
37104: LD_VAR 0 12
37108: PUSH
37109: FOR_IN
37110: IFFALSE 37183
// if GetBType ( j ) = b_bunker then
37112: LD_VAR 0 9
37116: PPUSH
37117: CALL_OW 266
37121: PUSH
37122: LD_INT 32
37124: EQUAL
37125: IFFALSE 37152
// tmp := Insert ( tmp , 1 , j ) else
37127: LD_ADDR_VAR 0 19
37131: PUSH
37132: LD_VAR 0 19
37136: PPUSH
37137: LD_INT 1
37139: PPUSH
37140: LD_VAR 0 9
37144: PPUSH
37145: CALL_OW 2
37149: ST_TO_ADDR
37150: GO 37181
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37152: LD_ADDR_VAR 0 19
37156: PUSH
37157: LD_VAR 0 19
37161: PPUSH
37162: LD_VAR 0 19
37166: PUSH
37167: LD_INT 1
37169: PLUS
37170: PPUSH
37171: LD_VAR 0 9
37175: PPUSH
37176: CALL_OW 2
37180: ST_TO_ADDR
37181: GO 37109
37183: POP
37184: POP
// if tmp then
37185: LD_VAR 0 19
37189: IFFALSE 37201
// f := tmp ;
37191: LD_ADDR_VAR 0 12
37195: PUSH
37196: LD_VAR 0 19
37200: ST_TO_ADDR
// end ; x := personel [ i ] ;
37201: LD_ADDR_VAR 0 13
37205: PUSH
37206: LD_VAR 0 6
37210: PUSH
37211: LD_VAR 0 8
37215: ARRAY
37216: ST_TO_ADDR
// if x = - 1 then
37217: LD_VAR 0 13
37221: PUSH
37222: LD_INT 1
37224: NEG
37225: EQUAL
37226: IFFALSE 37437
// begin for j in f do
37228: LD_ADDR_VAR 0 9
37232: PUSH
37233: LD_VAR 0 12
37237: PUSH
37238: FOR_IN
37239: IFFALSE 37433
// repeat InitHc ;
37241: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37245: LD_VAR 0 9
37249: PPUSH
37250: CALL_OW 266
37254: PUSH
37255: LD_INT 5
37257: EQUAL
37258: IFFALSE 37328
// begin if UnitsInside ( j ) < 3 then
37260: LD_VAR 0 9
37264: PPUSH
37265: CALL_OW 313
37269: PUSH
37270: LD_INT 3
37272: LESS
37273: IFFALSE 37309
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37275: LD_INT 0
37277: PPUSH
37278: LD_INT 5
37280: PUSH
37281: LD_INT 8
37283: PUSH
37284: LD_INT 9
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: LIST
37291: PUSH
37292: LD_VAR 0 17
37296: ARRAY
37297: PPUSH
37298: LD_VAR 0 4
37302: PPUSH
37303: CALL_OW 380
37307: GO 37326
// PrepareHuman ( false , i , skill ) ;
37309: LD_INT 0
37311: PPUSH
37312: LD_VAR 0 8
37316: PPUSH
37317: LD_VAR 0 4
37321: PPUSH
37322: CALL_OW 380
// end else
37326: GO 37345
// PrepareHuman ( false , i , skill ) ;
37328: LD_INT 0
37330: PPUSH
37331: LD_VAR 0 8
37335: PPUSH
37336: LD_VAR 0 4
37340: PPUSH
37341: CALL_OW 380
// un := CreateHuman ;
37345: LD_ADDR_VAR 0 14
37349: PUSH
37350: CALL_OW 44
37354: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37355: LD_ADDR_VAR 0 7
37359: PUSH
37360: LD_VAR 0 7
37364: PPUSH
37365: LD_INT 1
37367: PPUSH
37368: LD_VAR 0 14
37372: PPUSH
37373: CALL_OW 2
37377: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37378: LD_VAR 0 14
37382: PPUSH
37383: LD_VAR 0 9
37387: PPUSH
37388: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37392: LD_VAR 0 9
37396: PPUSH
37397: CALL_OW 313
37401: PUSH
37402: LD_INT 6
37404: EQUAL
37405: IFTRUE 37429
37407: PUSH
37408: LD_VAR 0 9
37412: PPUSH
37413: CALL_OW 266
37417: PUSH
37418: LD_INT 32
37420: PUSH
37421: LD_INT 31
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: IN
37428: OR
37429: IFFALSE 37241
37431: GO 37238
37433: POP
37434: POP
// end else
37435: GO 37821
// for j = 1 to x do
37437: LD_ADDR_VAR 0 9
37441: PUSH
37442: DOUBLE
37443: LD_INT 1
37445: DEC
37446: ST_TO_ADDR
37447: LD_VAR 0 13
37451: PUSH
37452: FOR_TO
37453: IFFALSE 37819
// begin InitHc ;
37455: CALL_OW 19
// if not f then
37459: LD_VAR 0 12
37463: NOT
37464: IFFALSE 37553
// begin PrepareHuman ( false , i , skill ) ;
37466: LD_INT 0
37468: PPUSH
37469: LD_VAR 0 8
37473: PPUSH
37474: LD_VAR 0 4
37478: PPUSH
37479: CALL_OW 380
// un := CreateHuman ;
37483: LD_ADDR_VAR 0 14
37487: PUSH
37488: CALL_OW 44
37492: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37493: LD_ADDR_VAR 0 7
37497: PUSH
37498: LD_VAR 0 7
37502: PPUSH
37503: LD_INT 1
37505: PPUSH
37506: LD_VAR 0 14
37510: PPUSH
37511: CALL_OW 2
37515: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37516: LD_VAR 0 14
37520: PPUSH
37521: LD_VAR 0 1
37525: PPUSH
37526: CALL_OW 250
37530: PPUSH
37531: LD_VAR 0 1
37535: PPUSH
37536: CALL_OW 251
37540: PPUSH
37541: LD_INT 10
37543: PPUSH
37544: LD_INT 0
37546: PPUSH
37547: CALL_OW 50
// continue ;
37551: GO 37452
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37553: LD_VAR 0 12
37557: PUSH
37558: LD_INT 1
37560: ARRAY
37561: PPUSH
37562: CALL_OW 313
37566: IFFALSE 37594
37568: PUSH
37569: LD_VAR 0 12
37573: PUSH
37574: LD_INT 1
37576: ARRAY
37577: PPUSH
37578: CALL_OW 266
37582: PUSH
37583: LD_INT 32
37585: PUSH
37586: LD_INT 31
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: IN
37593: AND
37594: IFTRUE 37615
37596: PUSH
37597: LD_VAR 0 12
37601: PUSH
37602: LD_INT 1
37604: ARRAY
37605: PPUSH
37606: CALL_OW 313
37610: PUSH
37611: LD_INT 6
37613: EQUAL
37614: OR
37615: IFFALSE 37635
// f := Delete ( f , 1 ) ;
37617: LD_ADDR_VAR 0 12
37621: PUSH
37622: LD_VAR 0 12
37626: PPUSH
37627: LD_INT 1
37629: PPUSH
37630: CALL_OW 3
37634: ST_TO_ADDR
// if not f then
37635: LD_VAR 0 12
37639: NOT
37640: IFFALSE 37658
// begin x := x + 2 ;
37642: LD_ADDR_VAR 0 13
37646: PUSH
37647: LD_VAR 0 13
37651: PUSH
37652: LD_INT 2
37654: PLUS
37655: ST_TO_ADDR
// continue ;
37656: GO 37452
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37658: LD_VAR 0 12
37662: PUSH
37663: LD_INT 1
37665: ARRAY
37666: PPUSH
37667: CALL_OW 266
37671: PUSH
37672: LD_INT 5
37674: EQUAL
37675: IFFALSE 37749
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37677: LD_VAR 0 12
37681: PUSH
37682: LD_INT 1
37684: ARRAY
37685: PPUSH
37686: CALL_OW 313
37690: PUSH
37691: LD_INT 3
37693: LESS
37694: IFFALSE 37730
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37696: LD_INT 0
37698: PPUSH
37699: LD_INT 5
37701: PUSH
37702: LD_INT 8
37704: PUSH
37705: LD_INT 9
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: LIST
37712: PUSH
37713: LD_VAR 0 17
37717: ARRAY
37718: PPUSH
37719: LD_VAR 0 4
37723: PPUSH
37724: CALL_OW 380
37728: GO 37747
// PrepareHuman ( false , i , skill ) ;
37730: LD_INT 0
37732: PPUSH
37733: LD_VAR 0 8
37737: PPUSH
37738: LD_VAR 0 4
37742: PPUSH
37743: CALL_OW 380
// end else
37747: GO 37766
// PrepareHuman ( false , i , skill ) ;
37749: LD_INT 0
37751: PPUSH
37752: LD_VAR 0 8
37756: PPUSH
37757: LD_VAR 0 4
37761: PPUSH
37762: CALL_OW 380
// un := CreateHuman ;
37766: LD_ADDR_VAR 0 14
37770: PUSH
37771: CALL_OW 44
37775: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37776: LD_ADDR_VAR 0 7
37780: PUSH
37781: LD_VAR 0 7
37785: PPUSH
37786: LD_INT 1
37788: PPUSH
37789: LD_VAR 0 14
37793: PPUSH
37794: CALL_OW 2
37798: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37799: LD_VAR 0 14
37803: PPUSH
37804: LD_VAR 0 12
37808: PUSH
37809: LD_INT 1
37811: ARRAY
37812: PPUSH
37813: CALL_OW 52
// end ;
37817: GO 37452
37819: POP
37820: POP
// end ;
37821: GO 36752
37823: POP
37824: POP
// result := result ^ buildings ;
37825: LD_ADDR_VAR 0 7
37829: PUSH
37830: LD_VAR 0 7
37834: PUSH
37835: LD_VAR 0 18
37839: ADD
37840: ST_TO_ADDR
// end else
37841: GO 37984
// begin for i = 1 to personel do
37843: LD_ADDR_VAR 0 8
37847: PUSH
37848: DOUBLE
37849: LD_INT 1
37851: DEC
37852: ST_TO_ADDR
37853: LD_VAR 0 6
37857: PUSH
37858: FOR_TO
37859: IFFALSE 37982
// begin if i > 4 then
37861: LD_VAR 0 8
37865: PUSH
37866: LD_INT 4
37868: GREATER
37869: IFFALSE 37873
// break ;
37871: GO 37982
// x := personel [ i ] ;
37873: LD_ADDR_VAR 0 13
37877: PUSH
37878: LD_VAR 0 6
37882: PUSH
37883: LD_VAR 0 8
37887: ARRAY
37888: ST_TO_ADDR
// if x = - 1 then
37889: LD_VAR 0 13
37893: PUSH
37894: LD_INT 1
37896: NEG
37897: EQUAL
37898: IFFALSE 37902
// continue ;
37900: GO 37858
// PrepareHuman ( false , i , skill ) ;
37902: LD_INT 0
37904: PPUSH
37905: LD_VAR 0 8
37909: PPUSH
37910: LD_VAR 0 4
37914: PPUSH
37915: CALL_OW 380
// un := CreateHuman ;
37919: LD_ADDR_VAR 0 14
37923: PUSH
37924: CALL_OW 44
37928: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37929: LD_VAR 0 14
37933: PPUSH
37934: LD_VAR 0 1
37938: PPUSH
37939: CALL_OW 250
37943: PPUSH
37944: LD_VAR 0 1
37948: PPUSH
37949: CALL_OW 251
37953: PPUSH
37954: LD_INT 10
37956: PPUSH
37957: LD_INT 0
37959: PPUSH
37960: CALL_OW 50
// result := result ^ un ;
37964: LD_ADDR_VAR 0 7
37968: PUSH
37969: LD_VAR 0 7
37973: PUSH
37974: LD_VAR 0 14
37978: ADD
37979: ST_TO_ADDR
// end ;
37980: GO 37858
37982: POP
37983: POP
// end ; end ;
37984: LD_VAR 0 7
37988: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37989: LD_INT 0
37991: PPUSH
37992: PPUSH
37993: PPUSH
37994: PPUSH
37995: PPUSH
37996: PPUSH
37997: PPUSH
37998: PPUSH
37999: PPUSH
38000: PPUSH
38001: PPUSH
38002: PPUSH
38003: PPUSH
38004: PPUSH
38005: PPUSH
38006: PPUSH
// result := false ;
38007: LD_ADDR_VAR 0 3
38011: PUSH
38012: LD_INT 0
38014: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38015: LD_VAR 0 1
38019: NOT
38020: IFTRUE 38045
38022: PUSH
38023: LD_VAR 0 1
38027: PPUSH
38028: CALL_OW 266
38032: PUSH
38033: LD_INT 32
38035: PUSH
38036: LD_INT 33
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: IN
38043: NOT
38044: OR
38045: IFFALSE 38049
// exit ;
38047: GO 39184
// nat := GetNation ( tower ) ;
38049: LD_ADDR_VAR 0 12
38053: PUSH
38054: LD_VAR 0 1
38058: PPUSH
38059: CALL_OW 248
38063: ST_TO_ADDR
// side := GetSide ( tower ) ;
38064: LD_ADDR_VAR 0 16
38068: PUSH
38069: LD_VAR 0 1
38073: PPUSH
38074: CALL_OW 255
38078: ST_TO_ADDR
// x := GetX ( tower ) ;
38079: LD_ADDR_VAR 0 10
38083: PUSH
38084: LD_VAR 0 1
38088: PPUSH
38089: CALL_OW 250
38093: ST_TO_ADDR
// y := GetY ( tower ) ;
38094: LD_ADDR_VAR 0 11
38098: PUSH
38099: LD_VAR 0 1
38103: PPUSH
38104: CALL_OW 251
38108: ST_TO_ADDR
// if not x or not y then
38109: LD_VAR 0 10
38113: NOT
38114: IFTRUE 38123
38116: PUSH
38117: LD_VAR 0 11
38121: NOT
38122: OR
38123: IFFALSE 38127
// exit ;
38125: GO 39184
// weapon := 0 ;
38127: LD_ADDR_VAR 0 18
38131: PUSH
38132: LD_INT 0
38134: ST_TO_ADDR
// fac_list := [ ] ;
38135: LD_ADDR_VAR 0 17
38139: PUSH
38140: EMPTY
38141: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38142: LD_ADDR_VAR 0 6
38146: PUSH
38147: LD_VAR 0 1
38151: PPUSH
38152: CALL_OW 274
38156: PPUSH
38157: LD_VAR 0 2
38161: PPUSH
38162: LD_INT 0
38164: PPUSH
38165: CALL 35719 0 3
38169: PPUSH
38170: LD_INT 30
38172: PUSH
38173: LD_INT 3
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PPUSH
38180: CALL_OW 72
38184: ST_TO_ADDR
// if not factories then
38185: LD_VAR 0 6
38189: NOT
38190: IFFALSE 38194
// exit ;
38192: GO 39184
// for i in factories do
38194: LD_ADDR_VAR 0 8
38198: PUSH
38199: LD_VAR 0 6
38203: PUSH
38204: FOR_IN
38205: IFFALSE 38230
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38207: LD_ADDR_VAR 0 17
38211: PUSH
38212: LD_VAR 0 17
38216: PUSH
38217: LD_VAR 0 8
38221: PPUSH
38222: CALL_OW 478
38226: UNION
38227: ST_TO_ADDR
38228: GO 38204
38230: POP
38231: POP
// if not fac_list then
38232: LD_VAR 0 17
38236: NOT
38237: IFFALSE 38241
// exit ;
38239: GO 39184
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38241: LD_ADDR_VAR 0 5
38245: PUSH
38246: LD_INT 4
38248: PUSH
38249: LD_INT 5
38251: PUSH
38252: LD_INT 9
38254: PUSH
38255: LD_INT 10
38257: PUSH
38258: LD_INT 6
38260: PUSH
38261: LD_INT 7
38263: PUSH
38264: LD_INT 11
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 27
38278: PUSH
38279: LD_INT 28
38281: PUSH
38282: LD_INT 26
38284: PUSH
38285: LD_INT 30
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 43
38296: PUSH
38297: LD_INT 44
38299: PUSH
38300: LD_INT 46
38302: PUSH
38303: LD_INT 45
38305: PUSH
38306: LD_INT 47
38308: PUSH
38309: LD_INT 49
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: LIST
38324: PUSH
38325: LD_VAR 0 12
38329: ARRAY
38330: ST_TO_ADDR
// list := list isect fac_list ;
38331: LD_ADDR_VAR 0 5
38335: PUSH
38336: LD_VAR 0 5
38340: PUSH
38341: LD_VAR 0 17
38345: ISECT
38346: ST_TO_ADDR
// if not list then
38347: LD_VAR 0 5
38351: NOT
38352: IFFALSE 38356
// exit ;
38354: GO 39184
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38356: LD_VAR 0 12
38360: PUSH
38361: LD_INT 3
38363: EQUAL
38364: IFFALSE 38376
38366: PUSH
38367: LD_INT 49
38369: PUSH
38370: LD_VAR 0 5
38374: IN
38375: AND
38376: IFFALSE 38396
38378: PUSH
38379: LD_INT 31
38381: PPUSH
38382: LD_VAR 0 16
38386: PPUSH
38387: CALL_OW 321
38391: PUSH
38392: LD_INT 2
38394: EQUAL
38395: AND
38396: IFFALSE 38456
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38398: LD_INT 22
38400: PUSH
38401: LD_VAR 0 16
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 35
38412: PUSH
38413: LD_INT 49
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: LD_INT 91
38422: PUSH
38423: LD_VAR 0 1
38427: PUSH
38428: LD_INT 10
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: LIST
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: LIST
38440: PPUSH
38441: CALL_OW 69
38445: NOT
38446: IFFALSE 38456
// weapon := ru_time_lapser ;
38448: LD_ADDR_VAR 0 18
38452: PUSH
38453: LD_INT 49
38455: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38456: LD_VAR 0 12
38460: PUSH
38461: LD_INT 1
38463: PUSH
38464: LD_INT 2
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: IN
38471: IFFALSE 38495
38473: PUSH
38474: LD_INT 11
38476: PUSH
38477: LD_VAR 0 5
38481: IN
38482: IFTRUE 38494
38484: PUSH
38485: LD_INT 30
38487: PUSH
38488: LD_VAR 0 5
38492: IN
38493: OR
38494: AND
38495: IFFALSE 38515
38497: PUSH
38498: LD_INT 6
38500: PPUSH
38501: LD_VAR 0 16
38505: PPUSH
38506: CALL_OW 321
38510: PUSH
38511: LD_INT 2
38513: EQUAL
38514: AND
38515: IFFALSE 38682
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38517: LD_INT 22
38519: PUSH
38520: LD_VAR 0 16
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 2
38531: PUSH
38532: LD_INT 35
38534: PUSH
38535: LD_INT 11
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 35
38544: PUSH
38545: LD_INT 30
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 91
38559: PUSH
38560: LD_VAR 0 1
38564: PUSH
38565: LD_INT 18
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: LIST
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: LIST
38577: PPUSH
38578: CALL_OW 69
38582: NOT
38583: IFFALSE 38659
38585: PUSH
38586: LD_INT 22
38588: PUSH
38589: LD_VAR 0 16
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 2
38600: PUSH
38601: LD_INT 30
38603: PUSH
38604: LD_INT 32
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 30
38613: PUSH
38614: LD_INT 33
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 91
38628: PUSH
38629: LD_VAR 0 1
38633: PUSH
38634: LD_INT 12
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: LIST
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: LIST
38646: PUSH
38647: EMPTY
38648: LIST
38649: PPUSH
38650: CALL_OW 69
38654: PUSH
38655: LD_INT 2
38657: GREATER
38658: AND
38659: IFFALSE 38682
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38661: LD_ADDR_VAR 0 18
38665: PUSH
38666: LD_INT 11
38668: PUSH
38669: LD_INT 30
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_VAR 0 12
38680: ARRAY
38681: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38682: LD_VAR 0 18
38686: NOT
38687: IFFALSE 38707
38689: PUSH
38690: LD_INT 40
38692: PPUSH
38693: LD_VAR 0 16
38697: PPUSH
38698: CALL_OW 321
38702: PUSH
38703: LD_INT 2
38705: EQUAL
38706: AND
38707: IFFALSE 38743
38709: PUSH
38710: LD_INT 7
38712: PUSH
38713: LD_VAR 0 5
38717: IN
38718: IFTRUE 38730
38720: PUSH
38721: LD_INT 28
38723: PUSH
38724: LD_VAR 0 5
38728: IN
38729: OR
38730: IFTRUE 38742
38732: PUSH
38733: LD_INT 45
38735: PUSH
38736: LD_VAR 0 5
38740: IN
38741: OR
38742: AND
38743: IFFALSE 38997
// begin hex := GetHexInfo ( x , y ) ;
38745: LD_ADDR_VAR 0 4
38749: PUSH
38750: LD_VAR 0 10
38754: PPUSH
38755: LD_VAR 0 11
38759: PPUSH
38760: CALL_OW 546
38764: ST_TO_ADDR
// if hex [ 1 ] then
38765: LD_VAR 0 4
38769: PUSH
38770: LD_INT 1
38772: ARRAY
38773: IFFALSE 38777
// exit ;
38775: GO 39184
// height := hex [ 2 ] ;
38777: LD_ADDR_VAR 0 15
38781: PUSH
38782: LD_VAR 0 4
38786: PUSH
38787: LD_INT 2
38789: ARRAY
38790: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38791: LD_ADDR_VAR 0 14
38795: PUSH
38796: LD_INT 0
38798: PUSH
38799: LD_INT 2
38801: PUSH
38802: LD_INT 3
38804: PUSH
38805: LD_INT 5
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: ST_TO_ADDR
// for i in tmp do
38814: LD_ADDR_VAR 0 8
38818: PUSH
38819: LD_VAR 0 14
38823: PUSH
38824: FOR_IN
38825: IFFALSE 38995
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38827: LD_ADDR_VAR 0 9
38831: PUSH
38832: LD_VAR 0 10
38836: PPUSH
38837: LD_VAR 0 8
38841: PPUSH
38842: LD_INT 5
38844: PPUSH
38845: CALL_OW 272
38849: PUSH
38850: LD_VAR 0 11
38854: PPUSH
38855: LD_VAR 0 8
38859: PPUSH
38860: LD_INT 5
38862: PPUSH
38863: CALL_OW 273
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38872: LD_VAR 0 9
38876: PUSH
38877: LD_INT 1
38879: ARRAY
38880: PPUSH
38881: LD_VAR 0 9
38885: PUSH
38886: LD_INT 2
38888: ARRAY
38889: PPUSH
38890: CALL_OW 488
38894: IFFALSE 38993
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38896: LD_ADDR_VAR 0 4
38900: PUSH
38901: LD_VAR 0 9
38905: PUSH
38906: LD_INT 1
38908: ARRAY
38909: PPUSH
38910: LD_VAR 0 9
38914: PUSH
38915: LD_INT 2
38917: ARRAY
38918: PPUSH
38919: CALL_OW 546
38923: ST_TO_ADDR
// if hex [ 1 ] then
38924: LD_VAR 0 4
38928: PUSH
38929: LD_INT 1
38931: ARRAY
38932: IFFALSE 38936
// continue ;
38934: GO 38824
// h := hex [ 2 ] ;
38936: LD_ADDR_VAR 0 13
38940: PUSH
38941: LD_VAR 0 4
38945: PUSH
38946: LD_INT 2
38948: ARRAY
38949: ST_TO_ADDR
// if h + 7 < height then
38950: LD_VAR 0 13
38954: PUSH
38955: LD_INT 7
38957: PLUS
38958: PUSH
38959: LD_VAR 0 15
38963: LESS
38964: IFFALSE 38993
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38966: LD_ADDR_VAR 0 18
38970: PUSH
38971: LD_INT 7
38973: PUSH
38974: LD_INT 28
38976: PUSH
38977: LD_INT 45
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: LIST
38984: PUSH
38985: LD_VAR 0 12
38989: ARRAY
38990: ST_TO_ADDR
// break ;
38991: GO 38995
// end ; end ; end ;
38993: GO 38824
38995: POP
38996: POP
// end ; if not weapon then
38997: LD_VAR 0 18
39001: NOT
39002: IFFALSE 39062
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39004: LD_ADDR_VAR 0 5
39008: PUSH
39009: LD_VAR 0 5
39013: PUSH
39014: LD_INT 11
39016: PUSH
39017: LD_INT 30
39019: PUSH
39020: LD_INT 49
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: LIST
39027: DIFF
39028: ST_TO_ADDR
// if not list then
39029: LD_VAR 0 5
39033: NOT
39034: IFFALSE 39038
// exit ;
39036: GO 39184
// weapon := list [ rand ( 1 , list ) ] ;
39038: LD_ADDR_VAR 0 18
39042: PUSH
39043: LD_VAR 0 5
39047: PUSH
39048: LD_INT 1
39050: PPUSH
39051: LD_VAR 0 5
39055: PPUSH
39056: CALL_OW 12
39060: ARRAY
39061: ST_TO_ADDR
// end ; if weapon then
39062: LD_VAR 0 18
39066: IFFALSE 39184
// begin tmp := CostOfWeapon ( weapon ) ;
39068: LD_ADDR_VAR 0 14
39072: PUSH
39073: LD_VAR 0 18
39077: PPUSH
39078: CALL_OW 451
39082: ST_TO_ADDR
// j := GetBase ( tower ) ;
39083: LD_ADDR_VAR 0 9
39087: PUSH
39088: LD_VAR 0 1
39092: PPUSH
39093: CALL_OW 274
39097: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39098: LD_VAR 0 9
39102: PPUSH
39103: LD_INT 1
39105: PPUSH
39106: CALL_OW 275
39110: PUSH
39111: LD_VAR 0 14
39115: PUSH
39116: LD_INT 1
39118: ARRAY
39119: GREATEREQUAL
39120: IFFALSE 39146
39122: PUSH
39123: LD_VAR 0 9
39127: PPUSH
39128: LD_INT 2
39130: PPUSH
39131: CALL_OW 275
39135: PUSH
39136: LD_VAR 0 14
39140: PUSH
39141: LD_INT 2
39143: ARRAY
39144: GREATEREQUAL
39145: AND
39146: IFFALSE 39172
39148: PUSH
39149: LD_VAR 0 9
39153: PPUSH
39154: LD_INT 3
39156: PPUSH
39157: CALL_OW 275
39161: PUSH
39162: LD_VAR 0 14
39166: PUSH
39167: LD_INT 3
39169: ARRAY
39170: GREATEREQUAL
39171: AND
39172: IFFALSE 39184
// result := weapon ;
39174: LD_ADDR_VAR 0 3
39178: PUSH
39179: LD_VAR 0 18
39183: ST_TO_ADDR
// end ; end ;
39184: LD_VAR 0 3
39188: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39189: LD_INT 0
39191: PPUSH
39192: PPUSH
// result := true ;
39193: LD_ADDR_VAR 0 3
39197: PUSH
39198: LD_INT 1
39200: ST_TO_ADDR
// if array1 = array2 then
39201: LD_VAR 0 1
39205: PUSH
39206: LD_VAR 0 2
39210: EQUAL
39211: IFFALSE 39271
// begin for i = 1 to array1 do
39213: LD_ADDR_VAR 0 4
39217: PUSH
39218: DOUBLE
39219: LD_INT 1
39221: DEC
39222: ST_TO_ADDR
39223: LD_VAR 0 1
39227: PUSH
39228: FOR_TO
39229: IFFALSE 39267
// if array1 [ i ] <> array2 [ i ] then
39231: LD_VAR 0 1
39235: PUSH
39236: LD_VAR 0 4
39240: ARRAY
39241: PUSH
39242: LD_VAR 0 2
39246: PUSH
39247: LD_VAR 0 4
39251: ARRAY
39252: NONEQUAL
39253: IFFALSE 39265
// begin result := false ;
39255: LD_ADDR_VAR 0 3
39259: PUSH
39260: LD_INT 0
39262: ST_TO_ADDR
// break ;
39263: GO 39267
// end ;
39265: GO 39228
39267: POP
39268: POP
// end else
39269: GO 39279
// result := false ;
39271: LD_ADDR_VAR 0 3
39275: PUSH
39276: LD_INT 0
39278: ST_TO_ADDR
// end ;
39279: LD_VAR 0 3
39283: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39284: LD_INT 0
39286: PPUSH
39287: PPUSH
// if not array1 or not array2 then
39288: LD_VAR 0 1
39292: NOT
39293: IFTRUE 39302
39295: PUSH
39296: LD_VAR 0 2
39300: NOT
39301: OR
39302: IFFALSE 39306
// exit ;
39304: GO 39370
// result := true ;
39306: LD_ADDR_VAR 0 3
39310: PUSH
39311: LD_INT 1
39313: ST_TO_ADDR
// for i = 1 to array1 do
39314: LD_ADDR_VAR 0 4
39318: PUSH
39319: DOUBLE
39320: LD_INT 1
39322: DEC
39323: ST_TO_ADDR
39324: LD_VAR 0 1
39328: PUSH
39329: FOR_TO
39330: IFFALSE 39368
// if array1 [ i ] <> array2 [ i ] then
39332: LD_VAR 0 1
39336: PUSH
39337: LD_VAR 0 4
39341: ARRAY
39342: PUSH
39343: LD_VAR 0 2
39347: PUSH
39348: LD_VAR 0 4
39352: ARRAY
39353: NONEQUAL
39354: IFFALSE 39366
// begin result := false ;
39356: LD_ADDR_VAR 0 3
39360: PUSH
39361: LD_INT 0
39363: ST_TO_ADDR
// break ;
39364: GO 39368
// end ;
39366: GO 39329
39368: POP
39369: POP
// end ;
39370: LD_VAR 0 3
39374: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39375: LD_INT 0
39377: PPUSH
39378: PPUSH
39379: PPUSH
// pom := GetBase ( fac ) ;
39380: LD_ADDR_VAR 0 5
39384: PUSH
39385: LD_VAR 0 1
39389: PPUSH
39390: CALL_OW 274
39394: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39395: LD_ADDR_VAR 0 4
39399: PUSH
39400: LD_VAR 0 2
39404: PUSH
39405: LD_INT 1
39407: ARRAY
39408: PPUSH
39409: LD_VAR 0 2
39413: PUSH
39414: LD_INT 2
39416: ARRAY
39417: PPUSH
39418: LD_VAR 0 2
39422: PUSH
39423: LD_INT 3
39425: ARRAY
39426: PPUSH
39427: LD_VAR 0 2
39431: PUSH
39432: LD_INT 4
39434: ARRAY
39435: PPUSH
39436: CALL_OW 449
39440: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39441: LD_ADDR_VAR 0 3
39445: PUSH
39446: LD_VAR 0 5
39450: PPUSH
39451: LD_INT 1
39453: PPUSH
39454: CALL_OW 275
39458: PUSH
39459: LD_VAR 0 4
39463: PUSH
39464: LD_INT 1
39466: ARRAY
39467: GREATEREQUAL
39468: IFFALSE 39494
39470: PUSH
39471: LD_VAR 0 5
39475: PPUSH
39476: LD_INT 2
39478: PPUSH
39479: CALL_OW 275
39483: PUSH
39484: LD_VAR 0 4
39488: PUSH
39489: LD_INT 2
39491: ARRAY
39492: GREATEREQUAL
39493: AND
39494: IFFALSE 39520
39496: PUSH
39497: LD_VAR 0 5
39501: PPUSH
39502: LD_INT 3
39504: PPUSH
39505: CALL_OW 275
39509: PUSH
39510: LD_VAR 0 4
39514: PUSH
39515: LD_INT 3
39517: ARRAY
39518: GREATEREQUAL
39519: AND
39520: ST_TO_ADDR
// end ;
39521: LD_VAR 0 3
39525: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39526: LD_INT 0
39528: PPUSH
39529: PPUSH
39530: PPUSH
39531: PPUSH
// pom := GetBase ( building ) ;
39532: LD_ADDR_VAR 0 3
39536: PUSH
39537: LD_VAR 0 1
39541: PPUSH
39542: CALL_OW 274
39546: ST_TO_ADDR
// if not pom then
39547: LD_VAR 0 3
39551: NOT
39552: IFFALSE 39556
// exit ;
39554: GO 39730
// btype := GetBType ( building ) ;
39556: LD_ADDR_VAR 0 5
39560: PUSH
39561: LD_VAR 0 1
39565: PPUSH
39566: CALL_OW 266
39570: ST_TO_ADDR
// if btype = b_armoury then
39571: LD_VAR 0 5
39575: PUSH
39576: LD_INT 4
39578: EQUAL
39579: IFFALSE 39589
// btype := b_barracks ;
39581: LD_ADDR_VAR 0 5
39585: PUSH
39586: LD_INT 5
39588: ST_TO_ADDR
// if btype = b_depot then
39589: LD_VAR 0 5
39593: PUSH
39594: LD_INT 0
39596: EQUAL
39597: IFFALSE 39607
// btype := b_warehouse ;
39599: LD_ADDR_VAR 0 5
39603: PUSH
39604: LD_INT 1
39606: ST_TO_ADDR
// if btype = b_workshop then
39607: LD_VAR 0 5
39611: PUSH
39612: LD_INT 2
39614: EQUAL
39615: IFFALSE 39625
// btype := b_factory ;
39617: LD_ADDR_VAR 0 5
39621: PUSH
39622: LD_INT 3
39624: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39625: LD_ADDR_VAR 0 4
39629: PUSH
39630: LD_VAR 0 5
39634: PPUSH
39635: LD_VAR 0 1
39639: PPUSH
39640: CALL_OW 248
39644: PPUSH
39645: CALL_OW 450
39649: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39650: LD_ADDR_VAR 0 2
39654: PUSH
39655: LD_VAR 0 3
39659: PPUSH
39660: LD_INT 1
39662: PPUSH
39663: CALL_OW 275
39667: PUSH
39668: LD_VAR 0 4
39672: PUSH
39673: LD_INT 1
39675: ARRAY
39676: GREATEREQUAL
39677: IFFALSE 39703
39679: PUSH
39680: LD_VAR 0 3
39684: PPUSH
39685: LD_INT 2
39687: PPUSH
39688: CALL_OW 275
39692: PUSH
39693: LD_VAR 0 4
39697: PUSH
39698: LD_INT 2
39700: ARRAY
39701: GREATEREQUAL
39702: AND
39703: IFFALSE 39729
39705: PUSH
39706: LD_VAR 0 3
39710: PPUSH
39711: LD_INT 3
39713: PPUSH
39714: CALL_OW 275
39718: PUSH
39719: LD_VAR 0 4
39723: PUSH
39724: LD_INT 3
39726: ARRAY
39727: GREATEREQUAL
39728: AND
39729: ST_TO_ADDR
// end ;
39730: LD_VAR 0 2
39734: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39735: LD_INT 0
39737: PPUSH
39738: PPUSH
39739: PPUSH
// pom := GetBase ( building ) ;
39740: LD_ADDR_VAR 0 4
39744: PUSH
39745: LD_VAR 0 1
39749: PPUSH
39750: CALL_OW 274
39754: ST_TO_ADDR
// if not pom then
39755: LD_VAR 0 4
39759: NOT
39760: IFFALSE 39764
// exit ;
39762: GO 39869
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39764: LD_ADDR_VAR 0 5
39768: PUSH
39769: LD_VAR 0 2
39773: PPUSH
39774: LD_VAR 0 1
39778: PPUSH
39779: CALL_OW 248
39783: PPUSH
39784: CALL_OW 450
39788: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39789: LD_ADDR_VAR 0 3
39793: PUSH
39794: LD_VAR 0 4
39798: PPUSH
39799: LD_INT 1
39801: PPUSH
39802: CALL_OW 275
39806: PUSH
39807: LD_VAR 0 5
39811: PUSH
39812: LD_INT 1
39814: ARRAY
39815: GREATEREQUAL
39816: IFFALSE 39842
39818: PUSH
39819: LD_VAR 0 4
39823: PPUSH
39824: LD_INT 2
39826: PPUSH
39827: CALL_OW 275
39831: PUSH
39832: LD_VAR 0 5
39836: PUSH
39837: LD_INT 2
39839: ARRAY
39840: GREATEREQUAL
39841: AND
39842: IFFALSE 39868
39844: PUSH
39845: LD_VAR 0 4
39849: PPUSH
39850: LD_INT 3
39852: PPUSH
39853: CALL_OW 275
39857: PUSH
39858: LD_VAR 0 5
39862: PUSH
39863: LD_INT 3
39865: ARRAY
39866: GREATEREQUAL
39867: AND
39868: ST_TO_ADDR
// end ;
39869: LD_VAR 0 3
39873: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39874: LD_INT 0
39876: PPUSH
39877: PPUSH
39878: PPUSH
39879: PPUSH
39880: PPUSH
39881: PPUSH
39882: PPUSH
39883: PPUSH
39884: PPUSH
39885: PPUSH
39886: PPUSH
// result := false ;
39887: LD_ADDR_VAR 0 8
39891: PUSH
39892: LD_INT 0
39894: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39895: LD_VAR 0 5
39899: NOT
39900: IFTRUE 39909
39902: PUSH
39903: LD_VAR 0 1
39907: NOT
39908: OR
39909: IFTRUE 39918
39911: PUSH
39912: LD_VAR 0 2
39916: NOT
39917: OR
39918: IFTRUE 39927
39920: PUSH
39921: LD_VAR 0 3
39925: NOT
39926: OR
39927: IFFALSE 39931
// exit ;
39929: GO 40757
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39931: LD_ADDR_VAR 0 14
39935: PUSH
39936: LD_VAR 0 1
39940: PPUSH
39941: LD_VAR 0 2
39945: PPUSH
39946: LD_VAR 0 3
39950: PPUSH
39951: LD_VAR 0 4
39955: PPUSH
39956: LD_VAR 0 5
39960: PUSH
39961: LD_INT 1
39963: ARRAY
39964: PPUSH
39965: CALL_OW 248
39969: PPUSH
39970: LD_INT 0
39972: PPUSH
39973: CALL 42038 0 6
39977: ST_TO_ADDR
// if not hexes then
39978: LD_VAR 0 14
39982: NOT
39983: IFFALSE 39987
// exit ;
39985: GO 40757
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39987: LD_ADDR_VAR 0 17
39991: PUSH
39992: LD_VAR 0 5
39996: PPUSH
39997: LD_INT 22
39999: PUSH
40000: LD_VAR 0 13
40004: PPUSH
40005: CALL_OW 255
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 2
40016: PUSH
40017: LD_INT 30
40019: PUSH
40020: LD_INT 0
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 30
40029: PUSH
40030: LD_INT 1
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: LIST
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PPUSH
40046: CALL_OW 72
40050: ST_TO_ADDR
// for i = 1 to hexes do
40051: LD_ADDR_VAR 0 9
40055: PUSH
40056: DOUBLE
40057: LD_INT 1
40059: DEC
40060: ST_TO_ADDR
40061: LD_VAR 0 14
40065: PUSH
40066: FOR_TO
40067: IFFALSE 40755
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40069: LD_ADDR_VAR 0 13
40073: PUSH
40074: LD_VAR 0 14
40078: PUSH
40079: LD_VAR 0 9
40083: ARRAY
40084: PUSH
40085: LD_INT 1
40087: ARRAY
40088: PPUSH
40089: LD_VAR 0 14
40093: PUSH
40094: LD_VAR 0 9
40098: ARRAY
40099: PUSH
40100: LD_INT 2
40102: ARRAY
40103: PPUSH
40104: CALL_OW 428
40108: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40109: LD_VAR 0 14
40113: PUSH
40114: LD_VAR 0 9
40118: ARRAY
40119: PUSH
40120: LD_INT 1
40122: ARRAY
40123: PPUSH
40124: LD_VAR 0 14
40128: PUSH
40129: LD_VAR 0 9
40133: ARRAY
40134: PUSH
40135: LD_INT 2
40137: ARRAY
40138: PPUSH
40139: CALL_OW 351
40143: IFTRUE 40182
40145: PUSH
40146: LD_VAR 0 14
40150: PUSH
40151: LD_VAR 0 9
40155: ARRAY
40156: PUSH
40157: LD_INT 1
40159: ARRAY
40160: PPUSH
40161: LD_VAR 0 14
40165: PUSH
40166: LD_VAR 0 9
40170: ARRAY
40171: PUSH
40172: LD_INT 2
40174: ARRAY
40175: PPUSH
40176: CALL_OW 488
40180: NOT
40181: OR
40182: IFTRUE 40199
40184: PUSH
40185: LD_VAR 0 13
40189: PPUSH
40190: CALL_OW 247
40194: PUSH
40195: LD_INT 3
40197: EQUAL
40198: OR
40199: IFFALSE 40205
// exit ;
40201: POP
40202: POP
40203: GO 40757
// if not tmp then
40205: LD_VAR 0 13
40209: NOT
40210: IFFALSE 40214
// continue ;
40212: GO 40066
// result := true ;
40214: LD_ADDR_VAR 0 8
40218: PUSH
40219: LD_INT 1
40221: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40222: LD_VAR 0 6
40226: IFFALSE 40243
40228: PUSH
40229: LD_VAR 0 13
40233: PPUSH
40234: CALL_OW 247
40238: PUSH
40239: LD_INT 2
40241: EQUAL
40242: AND
40243: IFFALSE 40260
40245: PUSH
40246: LD_VAR 0 13
40250: PPUSH
40251: CALL_OW 263
40255: PUSH
40256: LD_INT 1
40258: EQUAL
40259: AND
40260: IFFALSE 40424
// begin if IsDrivenBy ( tmp ) then
40262: LD_VAR 0 13
40266: PPUSH
40267: CALL_OW 311
40271: IFFALSE 40275
// continue ;
40273: GO 40066
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40275: LD_VAR 0 6
40279: PPUSH
40280: LD_INT 3
40282: PUSH
40283: LD_INT 60
40285: PUSH
40286: EMPTY
40287: LIST
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 3
40295: PUSH
40296: LD_INT 55
40298: PUSH
40299: EMPTY
40300: LIST
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PPUSH
40310: CALL_OW 72
40314: IFFALSE 40422
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40316: LD_ADDR_VAR 0 18
40320: PUSH
40321: LD_VAR 0 6
40325: PPUSH
40326: LD_INT 3
40328: PUSH
40329: LD_INT 60
40331: PUSH
40332: EMPTY
40333: LIST
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 3
40341: PUSH
40342: LD_INT 55
40344: PUSH
40345: EMPTY
40346: LIST
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PPUSH
40356: CALL_OW 72
40360: PUSH
40361: LD_INT 1
40363: ARRAY
40364: ST_TO_ADDR
// if IsInUnit ( driver ) then
40365: LD_VAR 0 18
40369: PPUSH
40370: CALL_OW 310
40374: IFFALSE 40385
// ComExit ( driver ) ;
40376: LD_VAR 0 18
40380: PPUSH
40381: CALL 66028 0 1
// AddComEnterUnit ( driver , tmp ) ;
40385: LD_VAR 0 18
40389: PPUSH
40390: LD_VAR 0 13
40394: PPUSH
40395: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40399: LD_VAR 0 18
40403: PPUSH
40404: LD_VAR 0 7
40408: PPUSH
40409: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40413: LD_VAR 0 18
40417: PPUSH
40418: CALL_OW 181
// end ; continue ;
40422: GO 40066
// end ; if not cleaners or not tmp in cleaners then
40424: LD_VAR 0 6
40428: NOT
40429: IFTRUE 40444
40431: PUSH
40432: LD_VAR 0 13
40436: PUSH
40437: LD_VAR 0 6
40441: IN
40442: NOT
40443: OR
40444: IFFALSE 40753
// begin if dep then
40446: LD_VAR 0 17
40450: IFFALSE 40586
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40452: LD_ADDR_VAR 0 16
40456: PUSH
40457: LD_VAR 0 17
40461: PUSH
40462: LD_INT 1
40464: ARRAY
40465: PPUSH
40466: CALL_OW 250
40470: PPUSH
40471: LD_VAR 0 17
40475: PUSH
40476: LD_INT 1
40478: ARRAY
40479: PPUSH
40480: CALL_OW 254
40484: PPUSH
40485: LD_INT 5
40487: PPUSH
40488: CALL_OW 272
40492: PUSH
40493: LD_VAR 0 17
40497: PUSH
40498: LD_INT 1
40500: ARRAY
40501: PPUSH
40502: CALL_OW 251
40506: PPUSH
40507: LD_VAR 0 17
40511: PUSH
40512: LD_INT 1
40514: ARRAY
40515: PPUSH
40516: CALL_OW 254
40520: PPUSH
40521: LD_INT 5
40523: PPUSH
40524: CALL_OW 273
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40533: LD_VAR 0 16
40537: PUSH
40538: LD_INT 1
40540: ARRAY
40541: PPUSH
40542: LD_VAR 0 16
40546: PUSH
40547: LD_INT 2
40549: ARRAY
40550: PPUSH
40551: CALL_OW 488
40555: IFFALSE 40586
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40557: LD_VAR 0 13
40561: PPUSH
40562: LD_VAR 0 16
40566: PUSH
40567: LD_INT 1
40569: ARRAY
40570: PPUSH
40571: LD_VAR 0 16
40575: PUSH
40576: LD_INT 2
40578: ARRAY
40579: PPUSH
40580: CALL_OW 111
// continue ;
40584: GO 40066
// end ; end ; r := GetDir ( tmp ) ;
40586: LD_ADDR_VAR 0 15
40590: PUSH
40591: LD_VAR 0 13
40595: PPUSH
40596: CALL_OW 254
40600: ST_TO_ADDR
// if r = 5 then
40601: LD_VAR 0 15
40605: PUSH
40606: LD_INT 5
40608: EQUAL
40609: IFFALSE 40619
// r := 0 ;
40611: LD_ADDR_VAR 0 15
40615: PUSH
40616: LD_INT 0
40618: ST_TO_ADDR
// for j = r to 5 do
40619: LD_ADDR_VAR 0 10
40623: PUSH
40624: DOUBLE
40625: LD_VAR 0 15
40629: DEC
40630: ST_TO_ADDR
40631: LD_INT 5
40633: PUSH
40634: FOR_TO
40635: IFFALSE 40751
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40637: LD_ADDR_VAR 0 11
40641: PUSH
40642: LD_VAR 0 13
40646: PPUSH
40647: CALL_OW 250
40651: PPUSH
40652: LD_VAR 0 10
40656: PPUSH
40657: LD_INT 2
40659: PPUSH
40660: CALL_OW 272
40664: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40665: LD_ADDR_VAR 0 12
40669: PUSH
40670: LD_VAR 0 13
40674: PPUSH
40675: CALL_OW 251
40679: PPUSH
40680: LD_VAR 0 10
40684: PPUSH
40685: LD_INT 2
40687: PPUSH
40688: CALL_OW 273
40692: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40693: LD_VAR 0 11
40697: PPUSH
40698: LD_VAR 0 12
40702: PPUSH
40703: CALL_OW 488
40707: IFFALSE 40726
40709: PUSH
40710: LD_VAR 0 11
40714: PPUSH
40715: LD_VAR 0 12
40719: PPUSH
40720: CALL_OW 428
40724: NOT
40725: AND
40726: IFFALSE 40749
// begin ComMoveXY ( tmp , _x , _y ) ;
40728: LD_VAR 0 13
40732: PPUSH
40733: LD_VAR 0 11
40737: PPUSH
40738: LD_VAR 0 12
40742: PPUSH
40743: CALL_OW 111
// break ;
40747: GO 40751
// end ; end ;
40749: GO 40634
40751: POP
40752: POP
// end ; end ;
40753: GO 40066
40755: POP
40756: POP
// end ;
40757: LD_VAR 0 8
40761: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40762: LD_INT 0
40764: PPUSH
// result := true ;
40765: LD_ADDR_VAR 0 3
40769: PUSH
40770: LD_INT 1
40772: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40773: LD_VAR 0 2
40777: PUSH
40778: LD_INT 24
40780: DOUBLE
40781: EQUAL
40782: IFTRUE 40792
40784: LD_INT 33
40786: DOUBLE
40787: EQUAL
40788: IFTRUE 40792
40790: GO 40817
40792: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40793: LD_ADDR_VAR 0 3
40797: PUSH
40798: LD_INT 32
40800: PPUSH
40801: LD_VAR 0 1
40805: PPUSH
40806: CALL_OW 321
40810: PUSH
40811: LD_INT 2
40813: EQUAL
40814: ST_TO_ADDR
40815: GO 41133
40817: LD_INT 20
40819: DOUBLE
40820: EQUAL
40821: IFTRUE 40825
40823: GO 40850
40825: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40826: LD_ADDR_VAR 0 3
40830: PUSH
40831: LD_INT 6
40833: PPUSH
40834: LD_VAR 0 1
40838: PPUSH
40839: CALL_OW 321
40843: PUSH
40844: LD_INT 2
40846: EQUAL
40847: ST_TO_ADDR
40848: GO 41133
40850: LD_INT 22
40852: DOUBLE
40853: EQUAL
40854: IFTRUE 40864
40856: LD_INT 36
40858: DOUBLE
40859: EQUAL
40860: IFTRUE 40864
40862: GO 40889
40864: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40865: LD_ADDR_VAR 0 3
40869: PUSH
40870: LD_INT 15
40872: PPUSH
40873: LD_VAR 0 1
40877: PPUSH
40878: CALL_OW 321
40882: PUSH
40883: LD_INT 2
40885: EQUAL
40886: ST_TO_ADDR
40887: GO 41133
40889: LD_INT 30
40891: DOUBLE
40892: EQUAL
40893: IFTRUE 40897
40895: GO 40922
40897: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40898: LD_ADDR_VAR 0 3
40902: PUSH
40903: LD_INT 20
40905: PPUSH
40906: LD_VAR 0 1
40910: PPUSH
40911: CALL_OW 321
40915: PUSH
40916: LD_INT 2
40918: EQUAL
40919: ST_TO_ADDR
40920: GO 41133
40922: LD_INT 28
40924: DOUBLE
40925: EQUAL
40926: IFTRUE 40936
40928: LD_INT 21
40930: DOUBLE
40931: EQUAL
40932: IFTRUE 40936
40934: GO 40961
40936: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40937: LD_ADDR_VAR 0 3
40941: PUSH
40942: LD_INT 21
40944: PPUSH
40945: LD_VAR 0 1
40949: PPUSH
40950: CALL_OW 321
40954: PUSH
40955: LD_INT 2
40957: EQUAL
40958: ST_TO_ADDR
40959: GO 41133
40961: LD_INT 16
40963: DOUBLE
40964: EQUAL
40965: IFTRUE 40969
40967: GO 40994
40969: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40970: LD_ADDR_VAR 0 3
40974: PUSH
40975: LD_INT 84
40977: PPUSH
40978: LD_VAR 0 1
40982: PPUSH
40983: CALL_OW 321
40987: PUSH
40988: LD_INT 2
40990: EQUAL
40991: ST_TO_ADDR
40992: GO 41133
40994: LD_INT 19
40996: DOUBLE
40997: EQUAL
40998: IFTRUE 41008
41000: LD_INT 23
41002: DOUBLE
41003: EQUAL
41004: IFTRUE 41008
41006: GO 41033
41008: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41009: LD_ADDR_VAR 0 3
41013: PUSH
41014: LD_INT 83
41016: PPUSH
41017: LD_VAR 0 1
41021: PPUSH
41022: CALL_OW 321
41026: PUSH
41027: LD_INT 2
41029: EQUAL
41030: ST_TO_ADDR
41031: GO 41133
41033: LD_INT 17
41035: DOUBLE
41036: EQUAL
41037: IFTRUE 41041
41039: GO 41066
41041: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41042: LD_ADDR_VAR 0 3
41046: PUSH
41047: LD_INT 39
41049: PPUSH
41050: LD_VAR 0 1
41054: PPUSH
41055: CALL_OW 321
41059: PUSH
41060: LD_INT 2
41062: EQUAL
41063: ST_TO_ADDR
41064: GO 41133
41066: LD_INT 18
41068: DOUBLE
41069: EQUAL
41070: IFTRUE 41074
41072: GO 41099
41074: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41075: LD_ADDR_VAR 0 3
41079: PUSH
41080: LD_INT 40
41082: PPUSH
41083: LD_VAR 0 1
41087: PPUSH
41088: CALL_OW 321
41092: PUSH
41093: LD_INT 2
41095: EQUAL
41096: ST_TO_ADDR
41097: GO 41133
41099: LD_INT 27
41101: DOUBLE
41102: EQUAL
41103: IFTRUE 41107
41105: GO 41132
41107: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41108: LD_ADDR_VAR 0 3
41112: PUSH
41113: LD_INT 35
41115: PPUSH
41116: LD_VAR 0 1
41120: PPUSH
41121: CALL_OW 321
41125: PUSH
41126: LD_INT 2
41128: EQUAL
41129: ST_TO_ADDR
41130: GO 41133
41132: POP
// end ;
41133: LD_VAR 0 3
41137: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41138: LD_INT 0
41140: PPUSH
41141: PPUSH
41142: PPUSH
41143: PPUSH
41144: PPUSH
41145: PPUSH
41146: PPUSH
41147: PPUSH
41148: PPUSH
41149: PPUSH
41150: PPUSH
// result := false ;
41151: LD_ADDR_VAR 0 6
41155: PUSH
41156: LD_INT 0
41158: ST_TO_ADDR
// if btype = b_depot then
41159: LD_VAR 0 2
41163: PUSH
41164: LD_INT 0
41166: EQUAL
41167: IFFALSE 41179
// begin result := true ;
41169: LD_ADDR_VAR 0 6
41173: PUSH
41174: LD_INT 1
41176: ST_TO_ADDR
// exit ;
41177: GO 42033
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41179: LD_VAR 0 1
41183: NOT
41184: IFTRUE 41209
41186: PUSH
41187: LD_VAR 0 1
41191: PPUSH
41192: CALL_OW 266
41196: PUSH
41197: LD_INT 0
41199: PUSH
41200: LD_INT 1
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: IN
41207: NOT
41208: OR
41209: IFTRUE 41218
41211: PUSH
41212: LD_VAR 0 2
41216: NOT
41217: OR
41218: IFTRUE 41254
41220: PUSH
41221: LD_VAR 0 5
41225: PUSH
41226: LD_INT 0
41228: PUSH
41229: LD_INT 1
41231: PUSH
41232: LD_INT 2
41234: PUSH
41235: LD_INT 3
41237: PUSH
41238: LD_INT 4
41240: PUSH
41241: LD_INT 5
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: IN
41252: NOT
41253: OR
41254: IFTRUE 41273
41256: PUSH
41257: LD_VAR 0 3
41261: PPUSH
41262: LD_VAR 0 4
41266: PPUSH
41267: CALL_OW 488
41271: NOT
41272: OR
41273: IFFALSE 41277
// exit ;
41275: GO 42033
// side := GetSide ( depot ) ;
41277: LD_ADDR_VAR 0 9
41281: PUSH
41282: LD_VAR 0 1
41286: PPUSH
41287: CALL_OW 255
41291: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41292: LD_VAR 0 9
41296: PPUSH
41297: LD_VAR 0 2
41301: PPUSH
41302: CALL 40762 0 2
41306: NOT
41307: IFFALSE 41311
// exit ;
41309: GO 42033
// pom := GetBase ( depot ) ;
41311: LD_ADDR_VAR 0 10
41315: PUSH
41316: LD_VAR 0 1
41320: PPUSH
41321: CALL_OW 274
41325: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41326: LD_ADDR_VAR 0 11
41330: PUSH
41331: LD_VAR 0 2
41335: PPUSH
41336: LD_VAR 0 1
41340: PPUSH
41341: CALL_OW 248
41345: PPUSH
41346: CALL_OW 450
41350: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41351: LD_VAR 0 10
41355: PPUSH
41356: LD_INT 1
41358: PPUSH
41359: CALL_OW 275
41363: PUSH
41364: LD_VAR 0 11
41368: PUSH
41369: LD_INT 1
41371: ARRAY
41372: GREATEREQUAL
41373: IFFALSE 41399
41375: PUSH
41376: LD_VAR 0 10
41380: PPUSH
41381: LD_INT 2
41383: PPUSH
41384: CALL_OW 275
41388: PUSH
41389: LD_VAR 0 11
41393: PUSH
41394: LD_INT 2
41396: ARRAY
41397: GREATEREQUAL
41398: AND
41399: IFFALSE 41425
41401: PUSH
41402: LD_VAR 0 10
41406: PPUSH
41407: LD_INT 3
41409: PPUSH
41410: CALL_OW 275
41414: PUSH
41415: LD_VAR 0 11
41419: PUSH
41420: LD_INT 3
41422: ARRAY
41423: GREATEREQUAL
41424: AND
41425: NOT
41426: IFFALSE 41430
// exit ;
41428: GO 42033
// if GetBType ( depot ) = b_depot then
41430: LD_VAR 0 1
41434: PPUSH
41435: CALL_OW 266
41439: PUSH
41440: LD_INT 0
41442: EQUAL
41443: IFFALSE 41455
// dist := 28 else
41445: LD_ADDR_VAR 0 14
41449: PUSH
41450: LD_INT 28
41452: ST_TO_ADDR
41453: GO 41463
// dist := 36 ;
41455: LD_ADDR_VAR 0 14
41459: PUSH
41460: LD_INT 36
41462: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41463: LD_VAR 0 1
41467: PPUSH
41468: LD_VAR 0 3
41472: PPUSH
41473: LD_VAR 0 4
41477: PPUSH
41478: CALL_OW 297
41482: PUSH
41483: LD_VAR 0 14
41487: GREATER
41488: IFFALSE 41492
// exit ;
41490: GO 42033
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41492: LD_ADDR_VAR 0 12
41496: PUSH
41497: LD_VAR 0 2
41501: PPUSH
41502: LD_VAR 0 3
41506: PPUSH
41507: LD_VAR 0 4
41511: PPUSH
41512: LD_VAR 0 5
41516: PPUSH
41517: LD_VAR 0 1
41521: PPUSH
41522: CALL_OW 248
41526: PPUSH
41527: LD_INT 0
41529: PPUSH
41530: CALL 42038 0 6
41534: ST_TO_ADDR
// if not hexes then
41535: LD_VAR 0 12
41539: NOT
41540: IFFALSE 41544
// exit ;
41542: GO 42033
// hex := GetHexInfo ( x , y ) ;
41544: LD_ADDR_VAR 0 15
41548: PUSH
41549: LD_VAR 0 3
41553: PPUSH
41554: LD_VAR 0 4
41558: PPUSH
41559: CALL_OW 546
41563: ST_TO_ADDR
// if hex [ 1 ] then
41564: LD_VAR 0 15
41568: PUSH
41569: LD_INT 1
41571: ARRAY
41572: IFFALSE 41576
// exit ;
41574: GO 42033
// height := hex [ 2 ] ;
41576: LD_ADDR_VAR 0 13
41580: PUSH
41581: LD_VAR 0 15
41585: PUSH
41586: LD_INT 2
41588: ARRAY
41589: ST_TO_ADDR
// for i = 1 to hexes do
41590: LD_ADDR_VAR 0 7
41594: PUSH
41595: DOUBLE
41596: LD_INT 1
41598: DEC
41599: ST_TO_ADDR
41600: LD_VAR 0 12
41604: PUSH
41605: FOR_TO
41606: IFFALSE 41950
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41608: LD_VAR 0 12
41612: PUSH
41613: LD_VAR 0 7
41617: ARRAY
41618: PUSH
41619: LD_INT 1
41621: ARRAY
41622: PPUSH
41623: LD_VAR 0 12
41627: PUSH
41628: LD_VAR 0 7
41632: ARRAY
41633: PUSH
41634: LD_INT 2
41636: ARRAY
41637: PPUSH
41638: CALL_OW 488
41642: NOT
41643: IFTRUE 41685
41645: PUSH
41646: LD_VAR 0 12
41650: PUSH
41651: LD_VAR 0 7
41655: ARRAY
41656: PUSH
41657: LD_INT 1
41659: ARRAY
41660: PPUSH
41661: LD_VAR 0 12
41665: PUSH
41666: LD_VAR 0 7
41670: ARRAY
41671: PUSH
41672: LD_INT 2
41674: ARRAY
41675: PPUSH
41676: CALL_OW 428
41680: PUSH
41681: LD_INT 0
41683: GREATER
41684: OR
41685: IFTRUE 41723
41687: PUSH
41688: LD_VAR 0 12
41692: PUSH
41693: LD_VAR 0 7
41697: ARRAY
41698: PUSH
41699: LD_INT 1
41701: ARRAY
41702: PPUSH
41703: LD_VAR 0 12
41707: PUSH
41708: LD_VAR 0 7
41712: ARRAY
41713: PUSH
41714: LD_INT 2
41716: ARRAY
41717: PPUSH
41718: CALL_OW 351
41722: OR
41723: IFFALSE 41729
// exit ;
41725: POP
41726: POP
41727: GO 42033
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41729: LD_ADDR_VAR 0 8
41733: PUSH
41734: LD_VAR 0 12
41738: PUSH
41739: LD_VAR 0 7
41743: ARRAY
41744: PUSH
41745: LD_INT 1
41747: ARRAY
41748: PPUSH
41749: LD_VAR 0 12
41753: PUSH
41754: LD_VAR 0 7
41758: ARRAY
41759: PUSH
41760: LD_INT 2
41762: ARRAY
41763: PPUSH
41764: CALL_OW 546
41768: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41769: LD_VAR 0 8
41773: PUSH
41774: LD_INT 1
41776: ARRAY
41777: IFTRUE 41799
41779: PUSH
41780: LD_VAR 0 8
41784: PUSH
41785: LD_INT 2
41787: ARRAY
41788: PUSH
41789: LD_VAR 0 13
41793: PUSH
41794: LD_INT 2
41796: PLUS
41797: GREATER
41798: OR
41799: IFTRUE 41821
41801: PUSH
41802: LD_VAR 0 8
41806: PUSH
41807: LD_INT 2
41809: ARRAY
41810: PUSH
41811: LD_VAR 0 13
41815: PUSH
41816: LD_INT 2
41818: MINUS
41819: LESS
41820: OR
41821: IFTRUE 41889
41823: PUSH
41824: LD_VAR 0 8
41828: PUSH
41829: LD_INT 3
41831: ARRAY
41832: PUSH
41833: LD_INT 0
41835: PUSH
41836: LD_INT 8
41838: PUSH
41839: LD_INT 9
41841: PUSH
41842: LD_INT 10
41844: PUSH
41845: LD_INT 11
41847: PUSH
41848: LD_INT 12
41850: PUSH
41851: LD_INT 13
41853: PUSH
41854: LD_INT 16
41856: PUSH
41857: LD_INT 17
41859: PUSH
41860: LD_INT 18
41862: PUSH
41863: LD_INT 19
41865: PUSH
41866: LD_INT 20
41868: PUSH
41869: LD_INT 21
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: IN
41887: NOT
41888: OR
41889: IFTRUE 41902
41891: PUSH
41892: LD_VAR 0 8
41896: PUSH
41897: LD_INT 5
41899: ARRAY
41900: NOT
41901: OR
41902: IFTRUE 41942
41904: PUSH
41905: LD_VAR 0 8
41909: PUSH
41910: LD_INT 6
41912: ARRAY
41913: PUSH
41914: LD_INT 1
41916: PUSH
41917: LD_INT 2
41919: PUSH
41920: LD_INT 7
41922: PUSH
41923: LD_INT 9
41925: PUSH
41926: LD_INT 10
41928: PUSH
41929: LD_INT 11
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: IN
41940: NOT
41941: OR
41942: IFFALSE 41948
// exit ;
41944: POP
41945: POP
41946: GO 42033
// end ;
41948: GO 41605
41950: POP
41951: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41952: LD_VAR 0 9
41956: PPUSH
41957: LD_VAR 0 3
41961: PPUSH
41962: LD_VAR 0 4
41966: PPUSH
41967: LD_INT 20
41969: PPUSH
41970: CALL 33852 0 4
41974: PUSH
41975: LD_INT 4
41977: ARRAY
41978: IFFALSE 41982
// exit ;
41980: GO 42033
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41982: LD_VAR 0 2
41986: PUSH
41987: LD_INT 29
41989: PUSH
41990: LD_INT 30
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: IN
41997: IFFALSE 42021
41999: PUSH
42000: LD_VAR 0 3
42004: PPUSH
42005: LD_VAR 0 4
42009: PPUSH
42010: LD_VAR 0 9
42014: PPUSH
42015: CALL_OW 440
42019: NOT
42020: AND
42021: IFFALSE 42025
// exit ;
42023: GO 42033
// result := true ;
42025: LD_ADDR_VAR 0 6
42029: PUSH
42030: LD_INT 1
42032: ST_TO_ADDR
// end ;
42033: LD_VAR 0 6
42037: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42038: LD_INT 0
42040: PPUSH
42041: PPUSH
42042: PPUSH
42043: PPUSH
42044: PPUSH
42045: PPUSH
42046: PPUSH
42047: PPUSH
42048: PPUSH
42049: PPUSH
42050: PPUSH
42051: PPUSH
42052: PPUSH
42053: PPUSH
42054: PPUSH
42055: PPUSH
42056: PPUSH
42057: PPUSH
42058: PPUSH
42059: PPUSH
42060: PPUSH
42061: PPUSH
42062: PPUSH
42063: PPUSH
42064: PPUSH
42065: PPUSH
42066: PPUSH
42067: PPUSH
42068: PPUSH
42069: PPUSH
42070: PPUSH
42071: PPUSH
42072: PPUSH
42073: PPUSH
42074: PPUSH
42075: PPUSH
42076: PPUSH
42077: PPUSH
42078: PPUSH
42079: PPUSH
42080: PPUSH
42081: PPUSH
42082: PPUSH
42083: PPUSH
42084: PPUSH
42085: PPUSH
42086: PPUSH
42087: PPUSH
42088: PPUSH
42089: PPUSH
42090: PPUSH
42091: PPUSH
42092: PPUSH
42093: PPUSH
42094: PPUSH
42095: PPUSH
42096: PPUSH
42097: PPUSH
// result = [ ] ;
42098: LD_ADDR_VAR 0 7
42102: PUSH
42103: EMPTY
42104: ST_TO_ADDR
// temp_list = [ ] ;
42105: LD_ADDR_VAR 0 9
42109: PUSH
42110: EMPTY
42111: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42112: LD_VAR 0 4
42116: PUSH
42117: LD_INT 0
42119: PUSH
42120: LD_INT 1
42122: PUSH
42123: LD_INT 2
42125: PUSH
42126: LD_INT 3
42128: PUSH
42129: LD_INT 4
42131: PUSH
42132: LD_INT 5
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: IN
42143: NOT
42144: IFTRUE 42187
42146: PUSH
42147: LD_VAR 0 1
42151: PUSH
42152: LD_INT 0
42154: PUSH
42155: LD_INT 1
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: IN
42162: IFFALSE 42186
42164: PUSH
42165: LD_VAR 0 5
42169: PUSH
42170: LD_INT 1
42172: PUSH
42173: LD_INT 2
42175: PUSH
42176: LD_INT 3
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: LIST
42183: IN
42184: NOT
42185: AND
42186: OR
42187: IFFALSE 42191
// exit ;
42189: GO 60590
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42191: LD_VAR 0 1
42195: PUSH
42196: LD_INT 6
42198: PUSH
42199: LD_INT 7
42201: PUSH
42202: LD_INT 8
42204: PUSH
42205: LD_INT 13
42207: PUSH
42208: LD_INT 12
42210: PUSH
42211: LD_INT 15
42213: PUSH
42214: LD_INT 11
42216: PUSH
42217: LD_INT 14
42219: PUSH
42220: LD_INT 10
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: IN
42234: IFFALSE 42244
// btype = b_lab ;
42236: LD_ADDR_VAR 0 1
42240: PUSH
42241: LD_INT 6
42243: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42244: LD_VAR 0 6
42248: PUSH
42249: LD_INT 0
42251: PUSH
42252: LD_INT 1
42254: PUSH
42255: LD_INT 2
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: LIST
42262: IN
42263: NOT
42264: IFTRUE 42332
42266: PUSH
42267: LD_VAR 0 1
42271: PUSH
42272: LD_INT 0
42274: PUSH
42275: LD_INT 1
42277: PUSH
42278: LD_INT 2
42280: PUSH
42281: LD_INT 3
42283: PUSH
42284: LD_INT 6
42286: PUSH
42287: LD_INT 36
42289: PUSH
42290: LD_INT 4
42292: PUSH
42293: LD_INT 5
42295: PUSH
42296: LD_INT 31
42298: PUSH
42299: LD_INT 32
42301: PUSH
42302: LD_INT 33
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: IN
42318: NOT
42319: IFFALSE 42331
42321: PUSH
42322: LD_VAR 0 6
42326: PUSH
42327: LD_INT 1
42329: EQUAL
42330: AND
42331: OR
42332: IFTRUE 42364
42334: PUSH
42335: LD_VAR 0 1
42339: PUSH
42340: LD_INT 2
42342: PUSH
42343: LD_INT 3
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: IN
42350: NOT
42351: IFFALSE 42363
42353: PUSH
42354: LD_VAR 0 6
42358: PUSH
42359: LD_INT 2
42361: EQUAL
42362: AND
42363: OR
42364: IFFALSE 42374
// mode = 0 ;
42366: LD_ADDR_VAR 0 6
42370: PUSH
42371: LD_INT 0
42373: ST_TO_ADDR
// case mode of 0 :
42374: LD_VAR 0 6
42378: PUSH
42379: LD_INT 0
42381: DOUBLE
42382: EQUAL
42383: IFTRUE 42387
42385: GO 53840
42387: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42388: LD_ADDR_VAR 0 11
42392: PUSH
42393: LD_INT 0
42395: PUSH
42396: LD_INT 0
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 0
42405: PUSH
42406: LD_INT 1
42408: NEG
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 1
42416: PUSH
42417: LD_INT 0
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 1
42426: PUSH
42427: LD_INT 1
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 0
42436: PUSH
42437: LD_INT 1
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 1
42446: NEG
42447: PUSH
42448: LD_INT 0
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 1
42457: NEG
42458: PUSH
42459: LD_INT 1
42461: NEG
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 1
42469: NEG
42470: PUSH
42471: LD_INT 2
42473: NEG
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 0
42481: PUSH
42482: LD_INT 2
42484: NEG
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 1
42492: PUSH
42493: LD_INT 1
42495: NEG
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 1
42503: PUSH
42504: LD_INT 2
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 0
42513: PUSH
42514: LD_INT 2
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 1
42523: NEG
42524: PUSH
42525: LD_INT 1
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 1
42534: PUSH
42535: LD_INT 3
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: LD_INT 3
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 1
42554: NEG
42555: PUSH
42556: LD_INT 2
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42581: LD_ADDR_VAR 0 12
42585: PUSH
42586: LD_INT 0
42588: PUSH
42589: LD_INT 0
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 0
42598: PUSH
42599: LD_INT 1
42601: NEG
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 1
42609: PUSH
42610: LD_INT 0
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 1
42619: PUSH
42620: LD_INT 1
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 0
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 1
42639: NEG
42640: PUSH
42641: LD_INT 0
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 1
42650: NEG
42651: PUSH
42652: LD_INT 1
42654: NEG
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 1
42662: PUSH
42663: LD_INT 1
42665: NEG
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 2
42673: PUSH
42674: LD_INT 0
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 2
42683: PUSH
42684: LD_INT 1
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 1
42693: NEG
42694: PUSH
42695: LD_INT 1
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 2
42704: NEG
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 2
42715: NEG
42716: PUSH
42717: LD_INT 1
42719: NEG
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 2
42727: NEG
42728: PUSH
42729: LD_INT 1
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 3
42738: NEG
42739: PUSH
42740: LD_INT 0
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 3
42749: NEG
42750: PUSH
42751: LD_INT 1
42753: NEG
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42777: LD_ADDR_VAR 0 13
42781: PUSH
42782: LD_INT 0
42784: PUSH
42785: LD_INT 0
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 0
42794: PUSH
42795: LD_INT 1
42797: NEG
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 1
42805: PUSH
42806: LD_INT 0
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 1
42815: PUSH
42816: LD_INT 1
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 0
42825: PUSH
42826: LD_INT 1
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 1
42835: NEG
42836: PUSH
42837: LD_INT 0
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 1
42846: NEG
42847: PUSH
42848: LD_INT 1
42850: NEG
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 1
42858: NEG
42859: PUSH
42860: LD_INT 2
42862: NEG
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 2
42870: PUSH
42871: LD_INT 1
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 2
42880: PUSH
42881: LD_INT 2
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 1
42890: PUSH
42891: LD_INT 2
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 2
42900: NEG
42901: PUSH
42902: LD_INT 1
42904: NEG
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 2
42912: NEG
42913: PUSH
42914: LD_INT 2
42916: NEG
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 2
42924: NEG
42925: PUSH
42926: LD_INT 3
42928: NEG
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 3
42936: NEG
42937: PUSH
42938: LD_INT 2
42940: NEG
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 3
42948: NEG
42949: PUSH
42950: LD_INT 3
42952: NEG
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42976: LD_ADDR_VAR 0 14
42980: PUSH
42981: LD_INT 0
42983: PUSH
42984: LD_INT 0
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 0
42993: PUSH
42994: LD_INT 1
42996: NEG
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 1
43004: PUSH
43005: LD_INT 0
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 1
43014: PUSH
43015: LD_INT 1
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 0
43024: PUSH
43025: LD_INT 1
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 1
43034: NEG
43035: PUSH
43036: LD_INT 0
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 1
43045: NEG
43046: PUSH
43047: LD_INT 1
43049: NEG
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 1
43057: NEG
43058: PUSH
43059: LD_INT 2
43061: NEG
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 0
43069: PUSH
43070: LD_INT 2
43072: NEG
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 1
43080: PUSH
43081: LD_INT 1
43083: NEG
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 1
43091: PUSH
43092: LD_INT 2
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 0
43101: PUSH
43102: LD_INT 2
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 1
43111: NEG
43112: PUSH
43113: LD_INT 1
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 1
43122: NEG
43123: PUSH
43124: LD_INT 3
43126: NEG
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 0
43134: PUSH
43135: LD_INT 3
43137: NEG
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 1
43145: PUSH
43146: LD_INT 2
43148: NEG
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43172: LD_ADDR_VAR 0 15
43176: PUSH
43177: LD_INT 0
43179: PUSH
43180: LD_INT 0
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 0
43189: PUSH
43190: LD_INT 1
43192: NEG
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 1
43200: PUSH
43201: LD_INT 0
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 1
43210: PUSH
43211: LD_INT 1
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 0
43220: PUSH
43221: LD_INT 1
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 1
43230: NEG
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 1
43241: NEG
43242: PUSH
43243: LD_INT 1
43245: NEG
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 1
43253: PUSH
43254: LD_INT 1
43256: NEG
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 2
43264: PUSH
43265: LD_INT 0
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 2
43274: PUSH
43275: LD_INT 1
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 1
43284: NEG
43285: PUSH
43286: LD_INT 1
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 2
43295: NEG
43296: PUSH
43297: LD_INT 0
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 2
43306: NEG
43307: PUSH
43308: LD_INT 1
43310: NEG
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 2
43318: PUSH
43319: LD_INT 1
43321: NEG
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 3
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 3
43339: PUSH
43340: LD_INT 1
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43365: LD_ADDR_VAR 0 16
43369: PUSH
43370: LD_INT 0
43372: PUSH
43373: LD_INT 0
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 0
43382: PUSH
43383: LD_INT 1
43385: NEG
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 1
43393: PUSH
43394: LD_INT 0
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 1
43403: PUSH
43404: LD_INT 1
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 0
43413: PUSH
43414: LD_INT 1
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 1
43423: NEG
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 1
43434: NEG
43435: PUSH
43436: LD_INT 1
43438: NEG
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 1
43446: NEG
43447: PUSH
43448: LD_INT 2
43450: NEG
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 2
43458: PUSH
43459: LD_INT 1
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 2
43468: PUSH
43469: LD_INT 2
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 1
43478: PUSH
43479: LD_INT 2
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 2
43488: NEG
43489: PUSH
43490: LD_INT 1
43492: NEG
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 2
43500: NEG
43501: PUSH
43502: LD_INT 2
43504: NEG
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 3
43512: PUSH
43513: LD_INT 2
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 3
43522: PUSH
43523: LD_INT 3
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 2
43532: PUSH
43533: LD_INT 3
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43558: LD_ADDR_VAR 0 17
43562: PUSH
43563: LD_INT 0
43565: PUSH
43566: LD_INT 0
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 0
43575: PUSH
43576: LD_INT 1
43578: NEG
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 1
43586: PUSH
43587: LD_INT 0
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 1
43596: PUSH
43597: LD_INT 1
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 0
43606: PUSH
43607: LD_INT 1
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 1
43616: NEG
43617: PUSH
43618: LD_INT 0
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 1
43627: NEG
43628: PUSH
43629: LD_INT 1
43631: NEG
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 1
43639: NEG
43640: PUSH
43641: LD_INT 2
43643: NEG
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: LD_INT 2
43654: NEG
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 1
43662: PUSH
43663: LD_INT 1
43665: NEG
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 2
43673: PUSH
43674: LD_INT 0
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 2
43683: PUSH
43684: LD_INT 1
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 2
43693: PUSH
43694: LD_INT 2
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 1
43703: PUSH
43704: LD_INT 2
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 0
43713: PUSH
43714: LD_INT 2
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 1
43723: NEG
43724: PUSH
43725: LD_INT 1
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 2
43734: NEG
43735: PUSH
43736: LD_INT 0
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 2
43745: NEG
43746: PUSH
43747: LD_INT 1
43749: NEG
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 2
43757: NEG
43758: PUSH
43759: LD_INT 2
43761: NEG
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43788: LD_ADDR_VAR 0 18
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: LD_INT 0
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 0
43805: PUSH
43806: LD_INT 1
43808: NEG
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 1
43816: PUSH
43817: LD_INT 0
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 1
43826: PUSH
43827: LD_INT 1
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 0
43836: PUSH
43837: LD_INT 1
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: NEG
43847: PUSH
43848: LD_INT 0
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 1
43857: NEG
43858: PUSH
43859: LD_INT 1
43861: NEG
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 1
43869: NEG
43870: PUSH
43871: LD_INT 2
43873: NEG
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 0
43881: PUSH
43882: LD_INT 2
43884: NEG
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 1
43892: PUSH
43893: LD_INT 1
43895: NEG
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 2
43903: PUSH
43904: LD_INT 0
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 2
43913: PUSH
43914: LD_INT 1
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 2
43923: PUSH
43924: LD_INT 2
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 1
43933: PUSH
43934: LD_INT 2
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 0
43943: PUSH
43944: LD_INT 2
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 1
43953: NEG
43954: PUSH
43955: LD_INT 1
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 2
43964: NEG
43965: PUSH
43966: LD_INT 0
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 2
43975: NEG
43976: PUSH
43977: LD_INT 1
43979: NEG
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 2
43987: NEG
43988: PUSH
43989: LD_INT 2
43991: NEG
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44018: LD_ADDR_VAR 0 19
44022: PUSH
44023: LD_INT 0
44025: PUSH
44026: LD_INT 0
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 0
44035: PUSH
44036: LD_INT 1
44038: NEG
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 1
44046: PUSH
44047: LD_INT 0
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 1
44056: PUSH
44057: LD_INT 1
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 0
44066: PUSH
44067: LD_INT 1
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 1
44076: NEG
44077: PUSH
44078: LD_INT 0
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 1
44087: NEG
44088: PUSH
44089: LD_INT 1
44091: NEG
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: LD_INT 2
44103: NEG
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 0
44111: PUSH
44112: LD_INT 2
44114: NEG
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 1
44122: PUSH
44123: LD_INT 1
44125: NEG
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 2
44133: PUSH
44134: LD_INT 0
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 2
44143: PUSH
44144: LD_INT 1
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 2
44153: PUSH
44154: LD_INT 2
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 1
44163: PUSH
44164: LD_INT 2
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 0
44173: PUSH
44174: LD_INT 2
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 1
44183: NEG
44184: PUSH
44185: LD_INT 1
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 2
44194: NEG
44195: PUSH
44196: LD_INT 0
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 2
44205: NEG
44206: PUSH
44207: LD_INT 1
44209: NEG
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 2
44217: NEG
44218: PUSH
44219: LD_INT 2
44221: NEG
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44248: LD_ADDR_VAR 0 20
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 0
44265: PUSH
44266: LD_INT 1
44268: NEG
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: LD_INT 0
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 1
44286: PUSH
44287: LD_INT 1
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: LD_INT 1
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 1
44306: NEG
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 1
44317: NEG
44318: PUSH
44319: LD_INT 1
44321: NEG
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: NEG
44330: PUSH
44331: LD_INT 2
44333: NEG
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: LD_INT 2
44344: NEG
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: LD_INT 1
44355: NEG
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 2
44363: PUSH
44364: LD_INT 0
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 2
44373: PUSH
44374: LD_INT 1
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 2
44383: PUSH
44384: LD_INT 2
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 1
44393: PUSH
44394: LD_INT 2
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 0
44403: PUSH
44404: LD_INT 2
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 1
44413: NEG
44414: PUSH
44415: LD_INT 1
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 2
44424: NEG
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 2
44435: NEG
44436: PUSH
44437: LD_INT 1
44439: NEG
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 2
44447: NEG
44448: PUSH
44449: LD_INT 2
44451: NEG
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44478: LD_ADDR_VAR 0 21
44482: PUSH
44483: LD_INT 0
44485: PUSH
44486: LD_INT 0
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 0
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 1
44506: PUSH
44507: LD_INT 0
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 1
44516: PUSH
44517: LD_INT 1
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 0
44526: PUSH
44527: LD_INT 1
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 1
44536: NEG
44537: PUSH
44538: LD_INT 0
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 1
44547: NEG
44548: PUSH
44549: LD_INT 1
44551: NEG
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 1
44559: NEG
44560: PUSH
44561: LD_INT 2
44563: NEG
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: LD_INT 2
44574: NEG
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 1
44582: PUSH
44583: LD_INT 1
44585: NEG
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 2
44593: PUSH
44594: LD_INT 0
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 2
44603: PUSH
44604: LD_INT 1
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 2
44613: PUSH
44614: LD_INT 2
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 1
44623: PUSH
44624: LD_INT 2
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 0
44633: PUSH
44634: LD_INT 2
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 1
44643: NEG
44644: PUSH
44645: LD_INT 1
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 2
44654: NEG
44655: PUSH
44656: LD_INT 0
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 2
44665: NEG
44666: PUSH
44667: LD_INT 1
44669: NEG
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 2
44677: NEG
44678: PUSH
44679: LD_INT 2
44681: NEG
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44708: LD_ADDR_VAR 0 22
44712: PUSH
44713: LD_INT 0
44715: PUSH
44716: LD_INT 0
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 0
44725: PUSH
44726: LD_INT 1
44728: NEG
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: LD_INT 0
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 1
44746: PUSH
44747: LD_INT 1
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: LD_INT 1
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 1
44766: NEG
44767: PUSH
44768: LD_INT 0
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 1
44777: NEG
44778: PUSH
44779: LD_INT 1
44781: NEG
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 1
44789: NEG
44790: PUSH
44791: LD_INT 2
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 0
44801: PUSH
44802: LD_INT 2
44804: NEG
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 1
44812: PUSH
44813: LD_INT 1
44815: NEG
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 2
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 2
44833: PUSH
44834: LD_INT 1
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 2
44843: PUSH
44844: LD_INT 2
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 1
44853: PUSH
44854: LD_INT 2
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 0
44863: PUSH
44864: LD_INT 2
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 1
44873: NEG
44874: PUSH
44875: LD_INT 1
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 2
44884: NEG
44885: PUSH
44886: LD_INT 0
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 2
44895: NEG
44896: PUSH
44897: LD_INT 1
44899: NEG
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 2
44907: NEG
44908: PUSH
44909: LD_INT 2
44911: NEG
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44938: LD_ADDR_VAR 0 23
44942: PUSH
44943: LD_INT 0
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 0
44955: PUSH
44956: LD_INT 1
44958: NEG
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 1
44966: PUSH
44967: LD_INT 0
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 1
44976: PUSH
44977: LD_INT 1
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: LD_INT 1
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 1
44996: NEG
44997: PUSH
44998: LD_INT 0
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 1
45007: NEG
45008: PUSH
45009: LD_INT 1
45011: NEG
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 1
45019: NEG
45020: PUSH
45021: LD_INT 2
45023: NEG
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 0
45031: PUSH
45032: LD_INT 2
45034: NEG
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 1
45042: PUSH
45043: LD_INT 1
45045: NEG
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 2
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 2
45063: PUSH
45064: LD_INT 1
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 2
45073: PUSH
45074: LD_INT 2
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 1
45083: PUSH
45084: LD_INT 2
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 0
45093: PUSH
45094: LD_INT 2
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 1
45103: NEG
45104: PUSH
45105: LD_INT 1
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 2
45114: NEG
45115: PUSH
45116: LD_INT 0
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 2
45125: NEG
45126: PUSH
45127: LD_INT 1
45129: NEG
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 2
45137: NEG
45138: PUSH
45139: LD_INT 2
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 2
45149: NEG
45150: PUSH
45151: LD_INT 3
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 1
45161: NEG
45162: PUSH
45163: LD_INT 3
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: PUSH
45174: LD_INT 2
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 2
45184: PUSH
45185: LD_INT 1
45187: NEG
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45218: LD_ADDR_VAR 0 24
45222: PUSH
45223: LD_INT 0
45225: PUSH
45226: LD_INT 0
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 0
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 1
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 1
45256: PUSH
45257: LD_INT 1
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: LD_INT 1
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: LD_INT 0
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 1
45287: NEG
45288: PUSH
45289: LD_INT 1
45291: NEG
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 1
45299: NEG
45300: PUSH
45301: LD_INT 2
45303: NEG
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: LD_INT 2
45314: NEG
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 1
45322: PUSH
45323: LD_INT 1
45325: NEG
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 2
45333: PUSH
45334: LD_INT 0
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 2
45343: PUSH
45344: LD_INT 1
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 2
45353: PUSH
45354: LD_INT 2
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: LD_INT 2
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: LD_INT 2
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 1
45383: NEG
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 2
45394: NEG
45395: PUSH
45396: LD_INT 0
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 2
45405: NEG
45406: PUSH
45407: LD_INT 1
45409: NEG
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 2
45417: NEG
45418: PUSH
45419: LD_INT 2
45421: NEG
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: PUSH
45430: LD_INT 2
45432: NEG
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 2
45440: PUSH
45441: LD_INT 1
45443: NEG
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 3
45451: PUSH
45452: LD_INT 1
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 3
45461: PUSH
45462: LD_INT 2
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45494: LD_ADDR_VAR 0 25
45498: PUSH
45499: LD_INT 0
45501: PUSH
45502: LD_INT 0
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 0
45511: PUSH
45512: LD_INT 1
45514: NEG
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 1
45522: PUSH
45523: LD_INT 0
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 1
45532: PUSH
45533: LD_INT 1
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 0
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 1
45552: NEG
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 1
45563: NEG
45564: PUSH
45565: LD_INT 1
45567: NEG
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: NEG
45576: PUSH
45577: LD_INT 2
45579: NEG
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 0
45587: PUSH
45588: LD_INT 2
45590: NEG
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 1
45598: PUSH
45599: LD_INT 1
45601: NEG
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 2
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 2
45619: PUSH
45620: LD_INT 1
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 2
45629: PUSH
45630: LD_INT 2
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 1
45639: PUSH
45640: LD_INT 2
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 0
45649: PUSH
45650: LD_INT 2
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 1
45659: NEG
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 2
45670: NEG
45671: PUSH
45672: LD_INT 0
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 2
45681: NEG
45682: PUSH
45683: LD_INT 1
45685: NEG
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 2
45693: NEG
45694: PUSH
45695: LD_INT 2
45697: NEG
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 3
45705: PUSH
45706: LD_INT 1
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 3
45715: PUSH
45716: LD_INT 2
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 2
45725: PUSH
45726: LD_INT 3
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 1
45735: PUSH
45736: LD_INT 3
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45768: LD_ADDR_VAR 0 26
45772: PUSH
45773: LD_INT 0
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: LD_INT 1
45788: NEG
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 1
45796: PUSH
45797: LD_INT 0
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: LD_INT 1
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: LD_INT 1
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 1
45826: NEG
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: LD_INT 1
45841: NEG
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 1
45849: NEG
45850: PUSH
45851: LD_INT 2
45853: NEG
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: LD_INT 2
45864: NEG
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 1
45872: PUSH
45873: LD_INT 1
45875: NEG
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 2
45883: PUSH
45884: LD_INT 0
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 2
45893: PUSH
45894: LD_INT 1
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 2
45903: PUSH
45904: LD_INT 2
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 1
45913: PUSH
45914: LD_INT 2
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 0
45923: PUSH
45924: LD_INT 2
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 1
45933: NEG
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 2
45944: NEG
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 2
45955: NEG
45956: PUSH
45957: LD_INT 1
45959: NEG
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 2
45967: NEG
45968: PUSH
45969: LD_INT 2
45971: NEG
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 2
45979: PUSH
45980: LD_INT 3
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 1
45989: PUSH
45990: LD_INT 3
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 1
45999: NEG
46000: PUSH
46001: LD_INT 2
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 2
46010: NEG
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46044: LD_ADDR_VAR 0 27
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: LD_INT 1
46064: NEG
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 1
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 1
46082: PUSH
46083: LD_INT 1
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 0
46092: PUSH
46093: LD_INT 1
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 1
46102: NEG
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 1
46113: NEG
46114: PUSH
46115: LD_INT 1
46117: NEG
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 1
46125: NEG
46126: PUSH
46127: LD_INT 2
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: LD_INT 2
46140: NEG
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 1
46148: PUSH
46149: LD_INT 1
46151: NEG
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 2
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 2
46169: PUSH
46170: LD_INT 1
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 2
46179: PUSH
46180: LD_INT 2
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 1
46189: PUSH
46190: LD_INT 2
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: LD_INT 2
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 1
46209: NEG
46210: PUSH
46211: LD_INT 1
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 2
46220: NEG
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 2
46231: NEG
46232: PUSH
46233: LD_INT 1
46235: NEG
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 2
46243: NEG
46244: PUSH
46245: LD_INT 2
46247: NEG
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 1
46255: NEG
46256: PUSH
46257: LD_INT 2
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 2
46266: NEG
46267: PUSH
46268: LD_INT 1
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 3
46277: NEG
46278: PUSH
46279: LD_INT 1
46281: NEG
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 3
46289: NEG
46290: PUSH
46291: LD_INT 2
46293: NEG
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46324: LD_ADDR_VAR 0 28
46328: PUSH
46329: LD_INT 0
46331: PUSH
46332: LD_INT 0
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 0
46341: PUSH
46342: LD_INT 1
46344: NEG
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 1
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 1
46362: PUSH
46363: LD_INT 1
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 0
46372: PUSH
46373: LD_INT 1
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 1
46382: NEG
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 1
46393: NEG
46394: PUSH
46395: LD_INT 1
46397: NEG
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 1
46405: NEG
46406: PUSH
46407: LD_INT 2
46409: NEG
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: LD_INT 2
46420: NEG
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 1
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 2
46439: PUSH
46440: LD_INT 0
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 2
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 2
46459: PUSH
46460: LD_INT 2
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 1
46469: PUSH
46470: LD_INT 2
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: LD_INT 2
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 1
46489: NEG
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 2
46500: NEG
46501: PUSH
46502: LD_INT 0
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 2
46511: NEG
46512: PUSH
46513: LD_INT 1
46515: NEG
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 2
46523: NEG
46524: PUSH
46525: LD_INT 2
46527: NEG
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 2
46535: NEG
46536: PUSH
46537: LD_INT 3
46539: NEG
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 1
46547: NEG
46548: PUSH
46549: LD_INT 3
46551: NEG
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 3
46559: NEG
46560: PUSH
46561: LD_INT 1
46563: NEG
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 3
46571: NEG
46572: PUSH
46573: LD_INT 2
46575: NEG
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46606: LD_ADDR_VAR 0 29
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: LD_INT 0
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 0
46623: PUSH
46624: LD_INT 1
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 1
46634: PUSH
46635: LD_INT 0
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: LD_INT 1
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 0
46654: PUSH
46655: LD_INT 1
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 1
46664: NEG
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 1
46675: NEG
46676: PUSH
46677: LD_INT 1
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 1
46687: NEG
46688: PUSH
46689: LD_INT 2
46691: NEG
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: LD_INT 2
46702: NEG
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: LD_INT 1
46713: NEG
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 2
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 2
46731: PUSH
46732: LD_INT 1
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: LD_INT 2
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: LD_INT 2
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: LD_INT 1
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 2
46772: NEG
46773: PUSH
46774: LD_INT 1
46776: NEG
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 2
46784: NEG
46785: PUSH
46786: LD_INT 2
46788: NEG
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 2
46796: NEG
46797: PUSH
46798: LD_INT 3
46800: NEG
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 2
46808: PUSH
46809: LD_INT 1
46811: NEG
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 3
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 1
46829: PUSH
46830: LD_INT 3
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: LD_INT 2
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 3
46850: NEG
46851: PUSH
46852: LD_INT 2
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46885: LD_ADDR_VAR 0 30
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: LD_INT 0
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: LD_INT 1
46905: NEG
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: PUSH
46914: LD_INT 0
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 1
46923: PUSH
46924: LD_INT 1
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 0
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 1
46943: NEG
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 1
46954: NEG
46955: PUSH
46956: LD_INT 1
46958: NEG
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 1
46966: NEG
46967: PUSH
46968: LD_INT 2
46970: NEG
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 0
46978: PUSH
46979: LD_INT 2
46981: NEG
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 1
46989: PUSH
46990: LD_INT 1
46992: NEG
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 2
47000: PUSH
47001: LD_INT 0
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 2
47010: PUSH
47011: LD_INT 1
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 2
47020: PUSH
47021: LD_INT 2
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 1
47030: PUSH
47031: LD_INT 2
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 1
47040: NEG
47041: PUSH
47042: LD_INT 1
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 2
47051: NEG
47052: PUSH
47053: LD_INT 0
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 2
47062: NEG
47063: PUSH
47064: LD_INT 1
47066: NEG
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 1
47074: NEG
47075: PUSH
47076: LD_INT 3
47078: NEG
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 1
47086: PUSH
47087: LD_INT 2
47089: NEG
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 3
47097: PUSH
47098: LD_INT 2
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 2
47107: PUSH
47108: LD_INT 3
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 2
47117: NEG
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 3
47128: NEG
47129: PUSH
47130: LD_INT 1
47132: NEG
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47163: LD_ADDR_VAR 0 31
47167: PUSH
47168: LD_INT 0
47170: PUSH
47171: LD_INT 0
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 1
47191: PUSH
47192: LD_INT 0
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 1
47201: PUSH
47202: LD_INT 1
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: LD_INT 1
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 1
47221: NEG
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 1
47232: NEG
47233: PUSH
47234: LD_INT 1
47236: NEG
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: NEG
47245: PUSH
47246: LD_INT 2
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: PUSH
47257: LD_INT 1
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 2
47267: PUSH
47268: LD_INT 0
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 2
47277: PUSH
47278: LD_INT 1
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 2
47287: PUSH
47288: LD_INT 2
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 1
47297: PUSH
47298: LD_INT 2
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: LD_INT 2
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: LD_INT 1
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 2
47328: NEG
47329: PUSH
47330: LD_INT 1
47332: NEG
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 2
47340: NEG
47341: PUSH
47342: LD_INT 2
47344: NEG
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 2
47352: NEG
47353: PUSH
47354: LD_INT 3
47356: NEG
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 2
47364: PUSH
47365: LD_INT 1
47367: NEG
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 3
47375: PUSH
47376: LD_INT 1
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 1
47385: PUSH
47386: LD_INT 3
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 1
47395: NEG
47396: PUSH
47397: LD_INT 2
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 3
47406: NEG
47407: PUSH
47408: LD_INT 2
47410: NEG
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47441: LD_ADDR_VAR 0 32
47445: PUSH
47446: LD_INT 0
47448: PUSH
47449: LD_INT 0
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: LD_INT 1
47461: NEG
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: LD_INT 0
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 1
47479: PUSH
47480: LD_INT 1
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 0
47489: PUSH
47490: LD_INT 1
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: PUSH
47501: LD_INT 0
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: LD_INT 1
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 1
47522: NEG
47523: PUSH
47524: LD_INT 2
47526: NEG
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 0
47534: PUSH
47535: LD_INT 2
47537: NEG
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 1
47545: PUSH
47546: LD_INT 1
47548: NEG
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 2
47556: PUSH
47557: LD_INT 1
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 2
47566: PUSH
47567: LD_INT 2
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 1
47576: PUSH
47577: LD_INT 2
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: LD_INT 2
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 1
47596: NEG
47597: PUSH
47598: LD_INT 1
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 2
47607: NEG
47608: PUSH
47609: LD_INT 0
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 2
47618: NEG
47619: PUSH
47620: LD_INT 1
47622: NEG
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 1
47630: NEG
47631: PUSH
47632: LD_INT 3
47634: NEG
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: LD_INT 2
47645: NEG
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 3
47653: PUSH
47654: LD_INT 2
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 2
47663: PUSH
47664: LD_INT 3
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 2
47673: NEG
47674: PUSH
47675: LD_INT 1
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 3
47684: NEG
47685: PUSH
47686: LD_INT 1
47688: NEG
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47719: LD_ADDR_VAR 0 33
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 0
47736: PUSH
47737: LD_INT 1
47739: NEG
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 1
47747: PUSH
47748: LD_INT 0
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: LD_INT 1
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 0
47767: PUSH
47768: LD_INT 1
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 1
47777: NEG
47778: PUSH
47779: LD_INT 0
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: LD_INT 1
47792: NEG
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: NEG
47801: PUSH
47802: LD_INT 2
47804: NEG
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 1
47812: PUSH
47813: LD_INT 1
47815: NEG
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 2
47823: PUSH
47824: LD_INT 0
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 2
47833: PUSH
47834: LD_INT 1
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 1
47843: PUSH
47844: LD_INT 2
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 0
47853: PUSH
47854: LD_INT 2
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: NEG
47864: PUSH
47865: LD_INT 1
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 2
47874: NEG
47875: PUSH
47876: LD_INT 0
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 2
47885: NEG
47886: PUSH
47887: LD_INT 1
47889: NEG
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 2
47897: NEG
47898: PUSH
47899: LD_INT 2
47901: NEG
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 2
47909: NEG
47910: PUSH
47911: LD_INT 3
47913: NEG
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 2
47921: PUSH
47922: LD_INT 1
47924: NEG
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 3
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 1
47942: PUSH
47943: LD_INT 3
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 1
47952: NEG
47953: PUSH
47954: LD_INT 2
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 3
47963: NEG
47964: PUSH
47965: LD_INT 2
47967: NEG
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47998: LD_ADDR_VAR 0 34
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 0
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 1
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 1
48036: PUSH
48037: LD_INT 1
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: LD_INT 1
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: LD_INT 1
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 1
48079: NEG
48080: PUSH
48081: LD_INT 2
48083: NEG
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 0
48091: PUSH
48092: LD_INT 2
48094: NEG
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 1
48102: PUSH
48103: LD_INT 1
48105: NEG
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 2
48113: PUSH
48114: LD_INT 1
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 2
48123: PUSH
48124: LD_INT 2
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: LD_INT 2
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 1
48143: NEG
48144: PUSH
48145: LD_INT 1
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 2
48154: NEG
48155: PUSH
48156: LD_INT 0
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 2
48165: NEG
48166: PUSH
48167: LD_INT 1
48169: NEG
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 2
48177: NEG
48178: PUSH
48179: LD_INT 2
48181: NEG
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 1
48189: NEG
48190: PUSH
48191: LD_INT 3
48193: NEG
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 1
48201: PUSH
48202: LD_INT 2
48204: NEG
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 3
48212: PUSH
48213: LD_INT 2
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 2
48222: PUSH
48223: LD_INT 3
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 2
48232: NEG
48233: PUSH
48234: LD_INT 1
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 3
48243: NEG
48244: PUSH
48245: LD_INT 1
48247: NEG
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48278: LD_ADDR_VAR 0 35
48282: PUSH
48283: LD_INT 0
48285: PUSH
48286: LD_INT 0
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 0
48295: PUSH
48296: LD_INT 1
48298: NEG
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 1
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 1
48316: PUSH
48317: LD_INT 1
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 0
48326: PUSH
48327: LD_INT 1
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 1
48336: NEG
48337: PUSH
48338: LD_INT 0
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 1
48347: NEG
48348: PUSH
48349: LD_INT 1
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 2
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 2
48369: NEG
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48390: LD_ADDR_VAR 0 36
48394: PUSH
48395: LD_INT 0
48397: PUSH
48398: LD_INT 0
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: LD_INT 1
48410: NEG
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 1
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 1
48428: PUSH
48429: LD_INT 1
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: LD_INT 1
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: LD_INT 0
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 1
48459: NEG
48460: PUSH
48461: LD_INT 1
48463: NEG
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 1
48471: NEG
48472: PUSH
48473: LD_INT 2
48475: NEG
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 1
48483: PUSH
48484: LD_INT 2
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48502: LD_ADDR_VAR 0 37
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: LD_INT 0
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 0
48519: PUSH
48520: LD_INT 1
48522: NEG
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 1
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 1
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 0
48550: PUSH
48551: LD_INT 1
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 1
48571: NEG
48572: PUSH
48573: LD_INT 1
48575: NEG
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 1
48583: PUSH
48584: LD_INT 1
48586: NEG
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 1
48594: NEG
48595: PUSH
48596: LD_INT 1
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48614: LD_ADDR_VAR 0 38
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: LD_INT 0
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 0
48631: PUSH
48632: LD_INT 1
48634: NEG
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 1
48642: PUSH
48643: LD_INT 0
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 1
48652: PUSH
48653: LD_INT 1
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 0
48662: PUSH
48663: LD_INT 1
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 1
48672: NEG
48673: PUSH
48674: LD_INT 0
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 1
48683: NEG
48684: PUSH
48685: LD_INT 1
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 2
48695: PUSH
48696: LD_INT 1
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 2
48705: NEG
48706: PUSH
48707: LD_INT 1
48709: NEG
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48726: LD_ADDR_VAR 0 39
48730: PUSH
48731: LD_INT 0
48733: PUSH
48734: LD_INT 0
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: LD_INT 1
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 1
48764: PUSH
48765: LD_INT 1
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 0
48774: PUSH
48775: LD_INT 1
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 1
48784: NEG
48785: PUSH
48786: LD_INT 0
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 1
48795: NEG
48796: PUSH
48797: LD_INT 1
48799: NEG
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 1
48807: NEG
48808: PUSH
48809: LD_INT 2
48811: NEG
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 1
48819: PUSH
48820: LD_INT 2
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48838: LD_ADDR_VAR 0 40
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 0
48855: PUSH
48856: LD_INT 1
48858: NEG
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 1
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 1
48876: PUSH
48877: LD_INT 1
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 0
48886: PUSH
48887: LD_INT 1
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: LD_INT 0
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: LD_INT 1
48911: NEG
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 1
48919: PUSH
48920: LD_INT 1
48922: NEG
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 1
48930: NEG
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48950: LD_ADDR_VAR 0 41
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: LD_INT 0
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 0
48967: PUSH
48968: LD_INT 1
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 1
48978: PUSH
48979: LD_INT 0
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 1
48988: PUSH
48989: LD_INT 1
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 0
48998: PUSH
48999: LD_INT 1
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 1
49008: NEG
49009: PUSH
49010: LD_INT 0
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 1
49019: NEG
49020: PUSH
49021: LD_INT 1
49023: NEG
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 1
49031: NEG
49032: PUSH
49033: LD_INT 2
49035: NEG
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 1
49043: PUSH
49044: LD_INT 1
49046: NEG
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 2
49054: PUSH
49055: LD_INT 0
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 2
49064: PUSH
49065: LD_INT 1
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 2
49074: PUSH
49075: LD_INT 2
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: LD_INT 2
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 1
49094: NEG
49095: PUSH
49096: LD_INT 1
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 2
49105: NEG
49106: PUSH
49107: LD_INT 0
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 2
49116: NEG
49117: PUSH
49118: LD_INT 1
49120: NEG
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 2
49128: NEG
49129: PUSH
49130: LD_INT 2
49132: NEG
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 2
49140: NEG
49141: PUSH
49142: LD_INT 3
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 2
49152: PUSH
49153: LD_INT 1
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 3
49163: PUSH
49164: LD_INT 0
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 3
49173: PUSH
49174: LD_INT 1
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 3
49183: PUSH
49184: LD_INT 2
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 3
49193: PUSH
49194: LD_INT 3
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 2
49203: PUSH
49204: LD_INT 3
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 2
49213: NEG
49214: PUSH
49215: LD_INT 1
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 3
49224: NEG
49225: PUSH
49226: LD_INT 0
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 3
49235: NEG
49236: PUSH
49237: LD_INT 1
49239: NEG
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 3
49247: NEG
49248: PUSH
49249: LD_INT 2
49251: NEG
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 3
49259: NEG
49260: PUSH
49261: LD_INT 3
49263: NEG
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49300: LD_ADDR_VAR 0 42
49304: PUSH
49305: LD_INT 0
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 0
49317: PUSH
49318: LD_INT 1
49320: NEG
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 1
49328: PUSH
49329: LD_INT 0
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 1
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: LD_INT 1
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: LD_INT 0
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 1
49369: NEG
49370: PUSH
49371: LD_INT 1
49373: NEG
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 1
49381: NEG
49382: PUSH
49383: LD_INT 2
49385: NEG
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 0
49393: PUSH
49394: LD_INT 2
49396: NEG
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: LD_INT 1
49407: NEG
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 2
49415: PUSH
49416: LD_INT 1
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 2
49425: PUSH
49426: LD_INT 2
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 1
49435: PUSH
49436: LD_INT 2
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 0
49445: PUSH
49446: LD_INT 2
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 1
49455: NEG
49456: PUSH
49457: LD_INT 1
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 2
49466: NEG
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 2
49478: NEG
49479: PUSH
49480: LD_INT 2
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 2
49490: NEG
49491: PUSH
49492: LD_INT 3
49494: NEG
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 1
49502: NEG
49503: PUSH
49504: LD_INT 3
49506: NEG
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 0
49514: PUSH
49515: LD_INT 3
49517: NEG
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 1
49525: PUSH
49526: LD_INT 2
49528: NEG
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 3
49536: PUSH
49537: LD_INT 2
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 3
49546: PUSH
49547: LD_INT 3
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 2
49556: PUSH
49557: LD_INT 3
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 1
49566: PUSH
49567: LD_INT 3
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: LD_INT 3
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 1
49586: NEG
49587: PUSH
49588: LD_INT 2
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 3
49597: NEG
49598: PUSH
49599: LD_INT 2
49601: NEG
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 3
49609: NEG
49610: PUSH
49611: LD_INT 3
49613: NEG
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49650: LD_ADDR_VAR 0 43
49654: PUSH
49655: LD_INT 0
49657: PUSH
49658: LD_INT 0
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 0
49667: PUSH
49668: LD_INT 1
49670: NEG
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 1
49678: PUSH
49679: LD_INT 0
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 1
49688: PUSH
49689: LD_INT 1
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 0
49698: PUSH
49699: LD_INT 1
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 1
49708: NEG
49709: PUSH
49710: LD_INT 0
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 1
49719: NEG
49720: PUSH
49721: LD_INT 1
49723: NEG
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 1
49731: NEG
49732: PUSH
49733: LD_INT 2
49735: NEG
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 0
49743: PUSH
49744: LD_INT 2
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: PUSH
49755: LD_INT 1
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 2
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 2
49775: PUSH
49776: LD_INT 1
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 1
49785: PUSH
49786: LD_INT 2
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 0
49795: PUSH
49796: LD_INT 2
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 1
49805: NEG
49806: PUSH
49807: LD_INT 1
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 2
49816: NEG
49817: PUSH
49818: LD_INT 0
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 2
49827: NEG
49828: PUSH
49829: LD_INT 1
49831: NEG
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 1
49839: NEG
49840: PUSH
49841: LD_INT 3
49843: NEG
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 0
49851: PUSH
49852: LD_INT 3
49854: NEG
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 1
49862: PUSH
49863: LD_INT 2
49865: NEG
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 2
49873: PUSH
49874: LD_INT 1
49876: NEG
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 3
49884: PUSH
49885: LD_INT 0
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 3
49894: PUSH
49895: LD_INT 1
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 1
49904: PUSH
49905: LD_INT 3
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 0
49914: PUSH
49915: LD_INT 3
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 1
49924: NEG
49925: PUSH
49926: LD_INT 2
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 2
49935: NEG
49936: PUSH
49937: LD_INT 1
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 3
49946: NEG
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 3
49957: NEG
49958: PUSH
49959: LD_INT 1
49961: NEG
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49998: LD_ADDR_VAR 0 44
50002: PUSH
50003: LD_INT 0
50005: PUSH
50006: LD_INT 0
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 0
50015: PUSH
50016: LD_INT 1
50018: NEG
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: LD_INT 0
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: LD_INT 1
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: LD_INT 1
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 1
50056: NEG
50057: PUSH
50058: LD_INT 0
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 1
50067: NEG
50068: PUSH
50069: LD_INT 1
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 1
50079: NEG
50080: PUSH
50081: LD_INT 2
50083: NEG
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: LD_INT 1
50094: NEG
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 2
50102: PUSH
50103: LD_INT 0
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 2
50112: PUSH
50113: LD_INT 1
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 2
50122: PUSH
50123: LD_INT 2
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 1
50132: PUSH
50133: LD_INT 2
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 1
50142: NEG
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 2
50153: NEG
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 2
50164: NEG
50165: PUSH
50166: LD_INT 1
50168: NEG
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 2
50176: NEG
50177: PUSH
50178: LD_INT 2
50180: NEG
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 2
50188: NEG
50189: PUSH
50190: LD_INT 3
50192: NEG
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 2
50200: PUSH
50201: LD_INT 1
50203: NEG
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 3
50211: PUSH
50212: LD_INT 0
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 3
50221: PUSH
50222: LD_INT 1
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 3
50231: PUSH
50232: LD_INT 2
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 3
50241: PUSH
50242: LD_INT 3
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 2
50251: PUSH
50252: LD_INT 3
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 2
50261: NEG
50262: PUSH
50263: LD_INT 1
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 3
50272: NEG
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 3
50283: NEG
50284: PUSH
50285: LD_INT 1
50287: NEG
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 3
50295: NEG
50296: PUSH
50297: LD_INT 2
50299: NEG
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 3
50307: NEG
50308: PUSH
50309: LD_INT 3
50311: NEG
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50348: LD_ADDR_VAR 0 45
50352: PUSH
50353: LD_INT 0
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 0
50365: PUSH
50366: LD_INT 1
50368: NEG
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 1
50376: PUSH
50377: LD_INT 0
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 0
50396: PUSH
50397: LD_INT 1
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 1
50406: NEG
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 1
50417: NEG
50418: PUSH
50419: LD_INT 1
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: LD_INT 2
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: LD_INT 2
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: LD_INT 1
50455: NEG
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 2
50463: PUSH
50464: LD_INT 1
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 2
50473: PUSH
50474: LD_INT 2
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 1
50483: PUSH
50484: LD_INT 2
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 0
50493: PUSH
50494: LD_INT 2
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 1
50503: NEG
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 2
50514: NEG
50515: PUSH
50516: LD_INT 1
50518: NEG
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 2
50526: NEG
50527: PUSH
50528: LD_INT 2
50530: NEG
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 2
50538: NEG
50539: PUSH
50540: LD_INT 3
50542: NEG
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 1
50550: NEG
50551: PUSH
50552: LD_INT 3
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 0
50562: PUSH
50563: LD_INT 3
50565: NEG
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: PUSH
50574: LD_INT 2
50576: NEG
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 3
50584: PUSH
50585: LD_INT 2
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 3
50594: PUSH
50595: LD_INT 3
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 2
50604: PUSH
50605: LD_INT 3
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 1
50614: PUSH
50615: LD_INT 3
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 0
50624: PUSH
50625: LD_INT 3
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 1
50634: NEG
50635: PUSH
50636: LD_INT 2
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 3
50645: NEG
50646: PUSH
50647: LD_INT 2
50649: NEG
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 3
50657: NEG
50658: PUSH
50659: LD_INT 3
50661: NEG
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50698: LD_ADDR_VAR 0 46
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: LD_INT 0
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 0
50715: PUSH
50716: LD_INT 1
50718: NEG
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 1
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 1
50736: PUSH
50737: LD_INT 1
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: LD_INT 1
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 1
50756: NEG
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: NEG
50768: PUSH
50769: LD_INT 1
50771: NEG
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: LD_INT 2
50783: NEG
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 0
50791: PUSH
50792: LD_INT 2
50794: NEG
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 1
50802: PUSH
50803: LD_INT 1
50805: NEG
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 2
50813: PUSH
50814: LD_INT 0
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 2
50823: PUSH
50824: LD_INT 1
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 1
50833: PUSH
50834: LD_INT 2
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 0
50843: PUSH
50844: LD_INT 2
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 1
50853: NEG
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 2
50864: NEG
50865: PUSH
50866: LD_INT 0
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 2
50875: NEG
50876: PUSH
50877: LD_INT 1
50879: NEG
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 1
50887: NEG
50888: PUSH
50889: LD_INT 3
50891: NEG
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 0
50899: PUSH
50900: LD_INT 3
50902: NEG
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 1
50910: PUSH
50911: LD_INT 2
50913: NEG
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 2
50921: PUSH
50922: LD_INT 1
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 3
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 3
50942: PUSH
50943: LD_INT 1
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 1
50952: PUSH
50953: LD_INT 3
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 0
50962: PUSH
50963: LD_INT 3
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 1
50972: NEG
50973: PUSH
50974: LD_INT 2
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 2
50983: NEG
50984: PUSH
50985: LD_INT 1
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 3
50994: NEG
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 3
51005: NEG
51006: PUSH
51007: LD_INT 1
51009: NEG
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51046: LD_ADDR_VAR 0 47
51050: PUSH
51051: LD_INT 0
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 0
51063: PUSH
51064: LD_INT 1
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 1
51074: PUSH
51075: LD_INT 0
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 1
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 1
51115: NEG
51116: PUSH
51117: LD_INT 1
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 1
51127: NEG
51128: PUSH
51129: LD_INT 2
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: LD_INT 2
51142: NEG
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 1
51150: PUSH
51151: LD_INT 1
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 2
51161: NEG
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 2
51173: NEG
51174: PUSH
51175: LD_INT 2
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51197: LD_ADDR_VAR 0 48
51201: PUSH
51202: LD_INT 0
51204: PUSH
51205: LD_INT 0
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: LD_INT 1
51217: NEG
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 1
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 1
51235: PUSH
51236: LD_INT 1
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: LD_INT 1
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: LD_INT 1
51270: NEG
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 1
51278: NEG
51279: PUSH
51280: LD_INT 2
51282: NEG
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: LD_INT 2
51293: NEG
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 1
51301: PUSH
51302: LD_INT 1
51304: NEG
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 2
51312: PUSH
51313: LD_INT 0
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 2
51322: PUSH
51323: LD_INT 1
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51344: LD_ADDR_VAR 0 49
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 0
51361: PUSH
51362: LD_INT 1
51364: NEG
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 1
51372: PUSH
51373: LD_INT 0
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 1
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: LD_INT 1
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 1
51402: NEG
51403: PUSH
51404: LD_INT 0
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 1
51413: NEG
51414: PUSH
51415: LD_INT 1
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 2
51436: PUSH
51437: LD_INT 0
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 2
51446: PUSH
51447: LD_INT 1
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 2
51456: PUSH
51457: LD_INT 2
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 1
51466: PUSH
51467: LD_INT 2
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51488: LD_ADDR_VAR 0 50
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: LD_INT 0
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: LD_INT 1
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 1
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: LD_INT 1
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: LD_INT 1
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 1
51557: NEG
51558: PUSH
51559: LD_INT 1
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 2
51569: PUSH
51570: LD_INT 1
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 2
51579: PUSH
51580: LD_INT 2
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 1
51589: PUSH
51590: LD_INT 2
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 0
51599: PUSH
51600: LD_INT 2
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 1
51609: NEG
51610: PUSH
51611: LD_INT 1
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51632: LD_ADDR_VAR 0 51
51636: PUSH
51637: LD_INT 0
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 0
51649: PUSH
51650: LD_INT 1
51652: NEG
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 1
51660: PUSH
51661: LD_INT 0
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 1
51670: PUSH
51671: LD_INT 1
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: LD_INT 1
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 1
51690: NEG
51691: PUSH
51692: LD_INT 0
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 1
51701: NEG
51702: PUSH
51703: LD_INT 1
51705: NEG
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 1
51713: PUSH
51714: LD_INT 2
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 0
51723: PUSH
51724: LD_INT 2
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 1
51733: NEG
51734: PUSH
51735: LD_INT 1
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 2
51744: NEG
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 2
51755: NEG
51756: PUSH
51757: LD_INT 1
51759: NEG
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51779: LD_ADDR_VAR 0 52
51783: PUSH
51784: LD_INT 0
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: LD_INT 1
51799: NEG
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 1
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 1
51817: PUSH
51818: LD_INT 1
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: LD_INT 1
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 1
51837: NEG
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 1
51848: NEG
51849: PUSH
51850: LD_INT 1
51852: NEG
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 1
51860: NEG
51861: PUSH
51862: LD_INT 2
51864: NEG
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: LD_INT 1
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 2
51883: NEG
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 2
51894: NEG
51895: PUSH
51896: LD_INT 1
51898: NEG
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 2
51906: NEG
51907: PUSH
51908: LD_INT 2
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51930: LD_ADDR_VAR 0 53
51934: PUSH
51935: LD_INT 0
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 0
51947: PUSH
51948: LD_INT 1
51950: NEG
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 1
51958: PUSH
51959: LD_INT 0
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 1
51968: PUSH
51969: LD_INT 1
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 0
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 1
51988: NEG
51989: PUSH
51990: LD_INT 0
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 1
51999: NEG
52000: PUSH
52001: LD_INT 1
52003: NEG
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 1
52011: NEG
52012: PUSH
52013: LD_INT 2
52015: NEG
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 0
52023: PUSH
52024: LD_INT 2
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: LD_INT 1
52037: NEG
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 2
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 2
52055: PUSH
52056: LD_INT 1
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 2
52065: PUSH
52066: LD_INT 2
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 1
52075: PUSH
52076: LD_INT 2
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 0
52085: PUSH
52086: LD_INT 2
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 1
52095: NEG
52096: PUSH
52097: LD_INT 1
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 2
52106: NEG
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 2
52117: NEG
52118: PUSH
52119: LD_INT 1
52121: NEG
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 2
52129: NEG
52130: PUSH
52131: LD_INT 2
52133: NEG
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52160: LD_ADDR_VAR 0 54
52164: PUSH
52165: LD_INT 0
52167: PUSH
52168: LD_INT 0
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 0
52177: PUSH
52178: LD_INT 1
52180: NEG
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 1
52188: PUSH
52189: LD_INT 0
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 1
52198: PUSH
52199: LD_INT 1
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 0
52208: PUSH
52209: LD_INT 1
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 1
52218: NEG
52219: PUSH
52220: LD_INT 0
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 1
52229: NEG
52230: PUSH
52231: LD_INT 1
52233: NEG
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 1
52241: NEG
52242: PUSH
52243: LD_INT 2
52245: NEG
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 0
52253: PUSH
52254: LD_INT 2
52256: NEG
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 1
52264: PUSH
52265: LD_INT 1
52267: NEG
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 2
52275: PUSH
52276: LD_INT 0
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 2
52285: PUSH
52286: LD_INT 1
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 2
52295: PUSH
52296: LD_INT 2
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: LD_INT 2
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 0
52315: PUSH
52316: LD_INT 2
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 1
52325: NEG
52326: PUSH
52327: LD_INT 1
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 2
52336: NEG
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 2
52347: NEG
52348: PUSH
52349: LD_INT 1
52351: NEG
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 2
52359: NEG
52360: PUSH
52361: LD_INT 2
52363: NEG
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52390: LD_ADDR_VAR 0 55
52394: PUSH
52395: LD_INT 0
52397: PUSH
52398: LD_INT 0
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 0
52407: PUSH
52408: LD_INT 1
52410: NEG
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 1
52418: PUSH
52419: LD_INT 0
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 1
52428: PUSH
52429: LD_INT 1
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 0
52438: PUSH
52439: LD_INT 1
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: NEG
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 1
52459: NEG
52460: PUSH
52461: LD_INT 1
52463: NEG
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 1
52471: NEG
52472: PUSH
52473: LD_INT 2
52475: NEG
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: LD_INT 2
52486: NEG
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: LD_INT 1
52497: NEG
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 2
52505: PUSH
52506: LD_INT 0
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 2
52515: PUSH
52516: LD_INT 1
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 2
52525: PUSH
52526: LD_INT 2
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 1
52535: PUSH
52536: LD_INT 2
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: LD_INT 2
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 1
52555: NEG
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 2
52566: NEG
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 2
52577: NEG
52578: PUSH
52579: LD_INT 1
52581: NEG
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 2
52589: NEG
52590: PUSH
52591: LD_INT 2
52593: NEG
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52620: LD_ADDR_VAR 0 56
52624: PUSH
52625: LD_INT 0
52627: PUSH
52628: LD_INT 0
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: LD_INT 1
52640: NEG
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: PUSH
52649: LD_INT 0
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 1
52658: PUSH
52659: LD_INT 1
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 1
52678: NEG
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 1
52689: NEG
52690: PUSH
52691: LD_INT 1
52693: NEG
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: NEG
52702: PUSH
52703: LD_INT 2
52705: NEG
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: LD_INT 2
52716: NEG
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 2
52735: PUSH
52736: LD_INT 0
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 2
52745: PUSH
52746: LD_INT 1
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 2
52755: PUSH
52756: LD_INT 2
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: LD_INT 2
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: LD_INT 2
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 1
52785: NEG
52786: PUSH
52787: LD_INT 1
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 2
52796: NEG
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 2
52807: NEG
52808: PUSH
52809: LD_INT 1
52811: NEG
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 2
52819: NEG
52820: PUSH
52821: LD_INT 2
52823: NEG
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52850: LD_ADDR_VAR 0 57
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: LD_INT 0
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: LD_INT 1
52870: NEG
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 1
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 1
52888: PUSH
52889: LD_INT 1
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: LD_INT 1
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 1
52908: NEG
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 1
52919: NEG
52920: PUSH
52921: LD_INT 1
52923: NEG
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 1
52931: NEG
52932: PUSH
52933: LD_INT 2
52935: NEG
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 0
52943: PUSH
52944: LD_INT 2
52946: NEG
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 1
52954: PUSH
52955: LD_INT 1
52957: NEG
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 2
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 2
52975: PUSH
52976: LD_INT 1
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 2
52985: PUSH
52986: LD_INT 2
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: PUSH
52996: LD_INT 2
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: LD_INT 2
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 1
53015: NEG
53016: PUSH
53017: LD_INT 1
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 2
53026: NEG
53027: PUSH
53028: LD_INT 0
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 2
53037: NEG
53038: PUSH
53039: LD_INT 1
53041: NEG
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 2
53049: NEG
53050: PUSH
53051: LD_INT 2
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53080: LD_ADDR_VAR 0 58
53084: PUSH
53085: LD_INT 0
53087: PUSH
53088: LD_INT 0
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 0
53097: PUSH
53098: LD_INT 1
53100: NEG
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 1
53108: PUSH
53109: LD_INT 0
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 1
53118: PUSH
53119: LD_INT 1
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: LD_INT 1
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 1
53138: NEG
53139: PUSH
53140: LD_INT 0
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 1
53149: NEG
53150: PUSH
53151: LD_INT 1
53153: NEG
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: LD_INT 2
53165: NEG
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 0
53173: PUSH
53174: LD_INT 2
53176: NEG
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 1
53184: PUSH
53185: LD_INT 1
53187: NEG
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 2
53195: PUSH
53196: LD_INT 0
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 2
53205: PUSH
53206: LD_INT 1
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 2
53215: PUSH
53216: LD_INT 2
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 1
53225: PUSH
53226: LD_INT 2
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 0
53235: PUSH
53236: LD_INT 2
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 1
53245: NEG
53246: PUSH
53247: LD_INT 1
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 2
53256: NEG
53257: PUSH
53258: LD_INT 0
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 2
53267: NEG
53268: PUSH
53269: LD_INT 1
53271: NEG
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 2
53279: NEG
53280: PUSH
53281: LD_INT 2
53283: NEG
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53310: LD_ADDR_VAR 0 59
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: LD_INT 0
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: LD_INT 1
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 1
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 1
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: LD_INT 1
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 1
53368: NEG
53369: PUSH
53370: LD_INT 0
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 1
53379: NEG
53380: PUSH
53381: LD_INT 1
53383: NEG
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53398: LD_ADDR_VAR 0 60
53402: PUSH
53403: LD_INT 0
53405: PUSH
53406: LD_INT 0
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: LD_INT 1
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 1
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 1
53436: PUSH
53437: LD_INT 1
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: LD_INT 1
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 1
53456: NEG
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 1
53467: NEG
53468: PUSH
53469: LD_INT 1
53471: NEG
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53486: LD_ADDR_VAR 0 61
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 0
53503: PUSH
53504: LD_INT 1
53506: NEG
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 1
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: LD_INT 1
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 1
53544: NEG
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: NEG
53556: PUSH
53557: LD_INT 1
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53574: LD_ADDR_VAR 0 62
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 0
53591: PUSH
53592: LD_INT 1
53594: NEG
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: PUSH
53603: LD_INT 0
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 1
53612: PUSH
53613: LD_INT 1
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 0
53622: PUSH
53623: LD_INT 1
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 1
53632: NEG
53633: PUSH
53634: LD_INT 0
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 1
53643: NEG
53644: PUSH
53645: LD_INT 1
53647: NEG
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53662: LD_ADDR_VAR 0 63
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: LD_INT 1
53682: NEG
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 1
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: LD_INT 1
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: LD_INT 1
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 1
53720: NEG
53721: PUSH
53722: LD_INT 0
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 1
53731: NEG
53732: PUSH
53733: LD_INT 1
53735: NEG
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53750: LD_ADDR_VAR 0 64
53754: PUSH
53755: LD_INT 0
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 0
53767: PUSH
53768: LD_INT 1
53770: NEG
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 1
53778: PUSH
53779: LD_INT 0
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 1
53788: PUSH
53789: LD_INT 1
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: LD_INT 1
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 1
53808: NEG
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 1
53819: NEG
53820: PUSH
53821: LD_INT 1
53823: NEG
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: ST_TO_ADDR
// end ; 1 :
53838: GO 59735
53840: LD_INT 1
53842: DOUBLE
53843: EQUAL
53844: IFTRUE 53848
53846: GO 56471
53848: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53849: LD_ADDR_VAR 0 11
53853: PUSH
53854: LD_INT 1
53856: NEG
53857: PUSH
53858: LD_INT 3
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: LD_INT 3
53871: NEG
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 1
53879: PUSH
53880: LD_INT 2
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: LIST
53892: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53893: LD_ADDR_VAR 0 12
53897: PUSH
53898: LD_INT 2
53900: PUSH
53901: LD_INT 1
53903: NEG
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 3
53911: PUSH
53912: LD_INT 0
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 3
53921: PUSH
53922: LD_INT 1
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: LIST
53933: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53934: LD_ADDR_VAR 0 13
53938: PUSH
53939: LD_INT 3
53941: PUSH
53942: LD_INT 2
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 3
53951: PUSH
53952: LD_INT 3
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 2
53961: PUSH
53962: LD_INT 3
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: LIST
53973: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53974: LD_ADDR_VAR 0 14
53978: PUSH
53979: LD_INT 1
53981: PUSH
53982: LD_INT 3
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: LD_INT 3
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 1
54001: NEG
54002: PUSH
54003: LD_INT 2
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: LIST
54014: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54015: LD_ADDR_VAR 0 15
54019: PUSH
54020: LD_INT 2
54022: NEG
54023: PUSH
54024: LD_INT 1
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 3
54033: NEG
54034: PUSH
54035: LD_INT 0
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 3
54044: NEG
54045: PUSH
54046: LD_INT 1
54048: NEG
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: LIST
54058: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54059: LD_ADDR_VAR 0 16
54063: PUSH
54064: LD_INT 2
54066: NEG
54067: PUSH
54068: LD_INT 3
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 3
54078: NEG
54079: PUSH
54080: LD_INT 2
54082: NEG
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 3
54090: NEG
54091: PUSH
54092: LD_INT 3
54094: NEG
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: LIST
54104: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54105: LD_ADDR_VAR 0 17
54109: PUSH
54110: LD_INT 1
54112: NEG
54113: PUSH
54114: LD_INT 3
54116: NEG
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 0
54124: PUSH
54125: LD_INT 3
54127: NEG
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 1
54135: PUSH
54136: LD_INT 2
54138: NEG
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: LIST
54148: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54149: LD_ADDR_VAR 0 18
54153: PUSH
54154: LD_INT 2
54156: PUSH
54157: LD_INT 1
54159: NEG
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 3
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 3
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: LIST
54189: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54190: LD_ADDR_VAR 0 19
54194: PUSH
54195: LD_INT 3
54197: PUSH
54198: LD_INT 2
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 3
54207: PUSH
54208: LD_INT 3
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 2
54217: PUSH
54218: LD_INT 3
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: LIST
54229: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54230: LD_ADDR_VAR 0 20
54234: PUSH
54235: LD_INT 1
54237: PUSH
54238: LD_INT 3
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 0
54247: PUSH
54248: LD_INT 3
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: NEG
54258: PUSH
54259: LD_INT 2
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: LIST
54270: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54271: LD_ADDR_VAR 0 21
54275: PUSH
54276: LD_INT 2
54278: NEG
54279: PUSH
54280: LD_INT 1
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 3
54289: NEG
54290: PUSH
54291: LD_INT 0
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 3
54300: NEG
54301: PUSH
54302: LD_INT 1
54304: NEG
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: LIST
54314: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54315: LD_ADDR_VAR 0 22
54319: PUSH
54320: LD_INT 2
54322: NEG
54323: PUSH
54324: LD_INT 3
54326: NEG
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 3
54334: NEG
54335: PUSH
54336: LD_INT 2
54338: NEG
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 3
54346: NEG
54347: PUSH
54348: LD_INT 3
54350: NEG
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: LIST
54360: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54361: LD_ADDR_VAR 0 23
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: LD_INT 3
54371: NEG
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 1
54379: NEG
54380: PUSH
54381: LD_INT 4
54383: NEG
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 1
54391: PUSH
54392: LD_INT 3
54394: NEG
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: LIST
54404: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54405: LD_ADDR_VAR 0 24
54409: PUSH
54410: LD_INT 3
54412: PUSH
54413: LD_INT 0
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 3
54422: PUSH
54423: LD_INT 1
54425: NEG
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 4
54433: PUSH
54434: LD_INT 1
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: LIST
54445: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54446: LD_ADDR_VAR 0 25
54450: PUSH
54451: LD_INT 3
54453: PUSH
54454: LD_INT 3
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 4
54463: PUSH
54464: LD_INT 3
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 3
54473: PUSH
54474: LD_INT 4
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: LIST
54485: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54486: LD_ADDR_VAR 0 26
54490: PUSH
54491: LD_INT 0
54493: PUSH
54494: LD_INT 3
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 1
54503: PUSH
54504: LD_INT 4
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: NEG
54514: PUSH
54515: LD_INT 3
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: LIST
54526: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54527: LD_ADDR_VAR 0 27
54531: PUSH
54532: LD_INT 3
54534: NEG
54535: PUSH
54536: LD_INT 0
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 3
54545: NEG
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 4
54556: NEG
54557: PUSH
54558: LD_INT 1
54560: NEG
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: LIST
54570: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54571: LD_ADDR_VAR 0 28
54575: PUSH
54576: LD_INT 3
54578: NEG
54579: PUSH
54580: LD_INT 3
54582: NEG
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 3
54590: NEG
54591: PUSH
54592: LD_INT 4
54594: NEG
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 4
54602: NEG
54603: PUSH
54604: LD_INT 3
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: LIST
54616: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54617: LD_ADDR_VAR 0 29
54621: PUSH
54622: LD_INT 1
54624: NEG
54625: PUSH
54626: LD_INT 3
54628: NEG
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: LD_INT 3
54639: NEG
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: LD_INT 2
54650: NEG
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 1
54658: NEG
54659: PUSH
54660: LD_INT 4
54662: NEG
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 0
54670: PUSH
54671: LD_INT 4
54673: NEG
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: LD_INT 3
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 1
54692: NEG
54693: PUSH
54694: LD_INT 5
54696: NEG
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: LD_INT 5
54707: NEG
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 1
54715: PUSH
54716: LD_INT 4
54718: NEG
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 1
54726: NEG
54727: PUSH
54728: LD_INT 6
54730: NEG
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: LD_INT 6
54741: NEG
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 1
54749: PUSH
54750: LD_INT 5
54752: NEG
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54772: LD_ADDR_VAR 0 30
54776: PUSH
54777: LD_INT 2
54779: PUSH
54780: LD_INT 1
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 3
54790: PUSH
54791: LD_INT 0
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 3
54800: PUSH
54801: LD_INT 1
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 3
54810: PUSH
54811: LD_INT 1
54813: NEG
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 4
54821: PUSH
54822: LD_INT 0
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 4
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 4
54841: PUSH
54842: LD_INT 1
54844: NEG
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 5
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 5
54862: PUSH
54863: LD_INT 1
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 5
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 6
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 6
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54915: LD_ADDR_VAR 0 31
54919: PUSH
54920: LD_INT 3
54922: PUSH
54923: LD_INT 2
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 3
54932: PUSH
54933: LD_INT 3
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 2
54942: PUSH
54943: LD_INT 3
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 4
54952: PUSH
54953: LD_INT 3
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 4
54962: PUSH
54963: LD_INT 4
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 3
54972: PUSH
54973: LD_INT 4
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 5
54982: PUSH
54983: LD_INT 4
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 5
54992: PUSH
54993: LD_INT 5
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 4
55002: PUSH
55003: LD_INT 5
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 6
55012: PUSH
55013: LD_INT 5
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 6
55022: PUSH
55023: LD_INT 6
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 5
55032: PUSH
55033: LD_INT 6
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55054: LD_ADDR_VAR 0 32
55058: PUSH
55059: LD_INT 1
55061: PUSH
55062: LD_INT 3
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: LD_INT 3
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: LD_INT 2
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: LD_INT 4
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 0
55102: PUSH
55103: LD_INT 4
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 1
55112: NEG
55113: PUSH
55114: LD_INT 3
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 1
55123: PUSH
55124: LD_INT 5
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: LD_INT 5
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: LD_INT 4
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 1
55154: PUSH
55155: LD_INT 6
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 0
55164: PUSH
55165: LD_INT 6
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: NEG
55175: PUSH
55176: LD_INT 5
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55197: LD_ADDR_VAR 0 33
55201: PUSH
55202: LD_INT 2
55204: NEG
55205: PUSH
55206: LD_INT 1
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 3
55215: NEG
55216: PUSH
55217: LD_INT 0
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 3
55226: NEG
55227: PUSH
55228: LD_INT 1
55230: NEG
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 3
55238: NEG
55239: PUSH
55240: LD_INT 1
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 4
55249: NEG
55250: PUSH
55251: LD_INT 0
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 4
55260: NEG
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 4
55272: NEG
55273: PUSH
55274: LD_INT 1
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 5
55283: NEG
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 5
55294: NEG
55295: PUSH
55296: LD_INT 1
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 5
55306: NEG
55307: PUSH
55308: LD_INT 1
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 6
55317: NEG
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 6
55328: NEG
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55352: LD_ADDR_VAR 0 34
55356: PUSH
55357: LD_INT 2
55359: NEG
55360: PUSH
55361: LD_INT 3
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 3
55371: NEG
55372: PUSH
55373: LD_INT 2
55375: NEG
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 3
55383: NEG
55384: PUSH
55385: LD_INT 3
55387: NEG
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 3
55395: NEG
55396: PUSH
55397: LD_INT 4
55399: NEG
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 4
55407: NEG
55408: PUSH
55409: LD_INT 3
55411: NEG
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 4
55419: NEG
55420: PUSH
55421: LD_INT 4
55423: NEG
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 4
55431: NEG
55432: PUSH
55433: LD_INT 5
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 5
55443: NEG
55444: PUSH
55445: LD_INT 4
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 5
55455: NEG
55456: PUSH
55457: LD_INT 5
55459: NEG
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 5
55467: NEG
55468: PUSH
55469: LD_INT 6
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 6
55479: NEG
55480: PUSH
55481: LD_INT 5
55483: NEG
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 6
55491: NEG
55492: PUSH
55493: LD_INT 6
55495: NEG
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55515: LD_ADDR_VAR 0 41
55519: PUSH
55520: LD_INT 0
55522: PUSH
55523: LD_INT 2
55525: NEG
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 1
55533: NEG
55534: PUSH
55535: LD_INT 3
55537: NEG
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 1
55545: PUSH
55546: LD_INT 2
55548: NEG
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: LIST
55558: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55559: LD_ADDR_VAR 0 42
55563: PUSH
55564: LD_INT 2
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 2
55576: PUSH
55577: LD_INT 1
55579: NEG
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 3
55587: PUSH
55588: LD_INT 1
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: LIST
55599: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55600: LD_ADDR_VAR 0 43
55604: PUSH
55605: LD_INT 2
55607: PUSH
55608: LD_INT 2
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 3
55617: PUSH
55618: LD_INT 2
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 2
55627: PUSH
55628: LD_INT 3
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: LIST
55639: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55640: LD_ADDR_VAR 0 44
55644: PUSH
55645: LD_INT 0
55647: PUSH
55648: LD_INT 2
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 1
55657: PUSH
55658: LD_INT 3
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 1
55667: NEG
55668: PUSH
55669: LD_INT 2
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: LIST
55680: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55681: LD_ADDR_VAR 0 45
55685: PUSH
55686: LD_INT 2
55688: NEG
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 2
55699: NEG
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 3
55710: NEG
55711: PUSH
55712: LD_INT 1
55714: NEG
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: LIST
55724: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55725: LD_ADDR_VAR 0 46
55729: PUSH
55730: LD_INT 2
55732: NEG
55733: PUSH
55734: LD_INT 2
55736: NEG
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 2
55744: NEG
55745: PUSH
55746: LD_INT 3
55748: NEG
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 3
55756: NEG
55757: PUSH
55758: LD_INT 2
55760: NEG
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: LIST
55770: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55771: LD_ADDR_VAR 0 47
55775: PUSH
55776: LD_INT 2
55778: NEG
55779: PUSH
55780: LD_INT 3
55782: NEG
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 1
55790: NEG
55791: PUSH
55792: LD_INT 3
55794: NEG
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55804: LD_ADDR_VAR 0 48
55808: PUSH
55809: LD_INT 1
55811: PUSH
55812: LD_INT 2
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 2
55822: PUSH
55823: LD_INT 1
55825: NEG
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55835: LD_ADDR_VAR 0 49
55839: PUSH
55840: LD_INT 3
55842: PUSH
55843: LD_INT 1
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 3
55852: PUSH
55853: LD_INT 2
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55864: LD_ADDR_VAR 0 50
55868: PUSH
55869: LD_INT 2
55871: PUSH
55872: LD_INT 3
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: LD_INT 3
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55893: LD_ADDR_VAR 0 51
55897: PUSH
55898: LD_INT 1
55900: NEG
55901: PUSH
55902: LD_INT 2
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 2
55911: NEG
55912: PUSH
55913: LD_INT 1
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55924: LD_ADDR_VAR 0 52
55928: PUSH
55929: LD_INT 3
55931: NEG
55932: PUSH
55933: LD_INT 1
55935: NEG
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 3
55943: NEG
55944: PUSH
55945: LD_INT 2
55947: NEG
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55957: LD_ADDR_VAR 0 53
55961: PUSH
55962: LD_INT 1
55964: NEG
55965: PUSH
55966: LD_INT 3
55968: NEG
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: LD_INT 3
55979: NEG
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 1
55987: PUSH
55988: LD_INT 2
55990: NEG
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: LIST
56000: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56001: LD_ADDR_VAR 0 54
56005: PUSH
56006: LD_INT 2
56008: PUSH
56009: LD_INT 1
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 3
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 3
56029: PUSH
56030: LD_INT 1
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: LIST
56041: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56042: LD_ADDR_VAR 0 55
56046: PUSH
56047: LD_INT 3
56049: PUSH
56050: LD_INT 2
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 3
56059: PUSH
56060: LD_INT 3
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 2
56069: PUSH
56070: LD_INT 3
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: LIST
56081: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56082: LD_ADDR_VAR 0 56
56086: PUSH
56087: LD_INT 1
56089: PUSH
56090: LD_INT 3
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: LD_INT 3
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 1
56109: NEG
56110: PUSH
56111: LD_INT 2
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: LIST
56122: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56123: LD_ADDR_VAR 0 57
56127: PUSH
56128: LD_INT 2
56130: NEG
56131: PUSH
56132: LD_INT 1
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 3
56141: NEG
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 3
56152: NEG
56153: PUSH
56154: LD_INT 1
56156: NEG
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: LIST
56166: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56167: LD_ADDR_VAR 0 58
56171: PUSH
56172: LD_INT 2
56174: NEG
56175: PUSH
56176: LD_INT 3
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 3
56186: NEG
56187: PUSH
56188: LD_INT 2
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 3
56198: NEG
56199: PUSH
56200: LD_INT 3
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: LIST
56212: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56213: LD_ADDR_VAR 0 59
56217: PUSH
56218: LD_INT 1
56220: NEG
56221: PUSH
56222: LD_INT 2
56224: NEG
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 0
56232: PUSH
56233: LD_INT 2
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 1
56243: PUSH
56244: LD_INT 1
56246: NEG
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: LIST
56256: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56257: LD_ADDR_VAR 0 60
56261: PUSH
56262: LD_INT 1
56264: PUSH
56265: LD_INT 1
56267: NEG
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 2
56275: PUSH
56276: LD_INT 0
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 2
56285: PUSH
56286: LD_INT 1
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: LIST
56297: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56298: LD_ADDR_VAR 0 61
56302: PUSH
56303: LD_INT 2
56305: PUSH
56306: LD_INT 1
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 2
56315: PUSH
56316: LD_INT 2
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 1
56325: PUSH
56326: LD_INT 2
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: LIST
56337: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56338: LD_ADDR_VAR 0 62
56342: PUSH
56343: LD_INT 1
56345: PUSH
56346: LD_INT 2
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 0
56355: PUSH
56356: LD_INT 2
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 1
56365: NEG
56366: PUSH
56367: LD_INT 1
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: LIST
56378: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56379: LD_ADDR_VAR 0 63
56383: PUSH
56384: LD_INT 1
56386: NEG
56387: PUSH
56388: LD_INT 1
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 2
56397: NEG
56398: PUSH
56399: LD_INT 0
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 2
56408: NEG
56409: PUSH
56410: LD_INT 1
56412: NEG
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: LIST
56422: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56423: LD_ADDR_VAR 0 64
56427: PUSH
56428: LD_INT 1
56430: NEG
56431: PUSH
56432: LD_INT 2
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 2
56442: NEG
56443: PUSH
56444: LD_INT 1
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 2
56454: NEG
56455: PUSH
56456: LD_INT 2
56458: NEG
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: LIST
56468: ST_TO_ADDR
// end ; 2 :
56469: GO 59735
56471: LD_INT 2
56473: DOUBLE
56474: EQUAL
56475: IFTRUE 56479
56477: GO 59734
56479: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56480: LD_ADDR_VAR 0 29
56484: PUSH
56485: LD_INT 4
56487: PUSH
56488: LD_INT 0
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 4
56497: PUSH
56498: LD_INT 1
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 5
56508: PUSH
56509: LD_INT 0
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 5
56518: PUSH
56519: LD_INT 1
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 4
56528: PUSH
56529: LD_INT 1
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 3
56538: PUSH
56539: LD_INT 0
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 3
56548: PUSH
56549: LD_INT 1
56551: NEG
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 3
56559: PUSH
56560: LD_INT 2
56562: NEG
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 5
56570: PUSH
56571: LD_INT 2
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 3
56580: PUSH
56581: LD_INT 3
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 3
56590: PUSH
56591: LD_INT 2
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 4
56600: PUSH
56601: LD_INT 3
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 4
56610: PUSH
56611: LD_INT 4
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 3
56620: PUSH
56621: LD_INT 4
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 2
56630: PUSH
56631: LD_INT 3
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 2
56640: PUSH
56641: LD_INT 2
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 4
56650: PUSH
56651: LD_INT 2
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 2
56660: PUSH
56661: LD_INT 4
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 0
56670: PUSH
56671: LD_INT 4
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 0
56680: PUSH
56681: LD_INT 3
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 1
56690: PUSH
56691: LD_INT 4
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 1
56700: PUSH
56701: LD_INT 5
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 0
56710: PUSH
56711: LD_INT 5
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 1
56720: NEG
56721: PUSH
56722: LD_INT 4
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 1
56731: NEG
56732: PUSH
56733: LD_INT 3
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 2
56742: PUSH
56743: LD_INT 5
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 2
56752: NEG
56753: PUSH
56754: LD_INT 3
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 3
56763: NEG
56764: PUSH
56765: LD_INT 0
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 3
56774: NEG
56775: PUSH
56776: LD_INT 1
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 2
56786: NEG
56787: PUSH
56788: LD_INT 0
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 2
56797: NEG
56798: PUSH
56799: LD_INT 1
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 3
56808: NEG
56809: PUSH
56810: LD_INT 1
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 4
56819: NEG
56820: PUSH
56821: LD_INT 0
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 4
56830: NEG
56831: PUSH
56832: LD_INT 1
56834: NEG
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 4
56842: NEG
56843: PUSH
56844: LD_INT 2
56846: NEG
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 2
56854: NEG
56855: PUSH
56856: LD_INT 2
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 4
56865: NEG
56866: PUSH
56867: LD_INT 4
56869: NEG
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 4
56877: NEG
56878: PUSH
56879: LD_INT 5
56881: NEG
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 3
56889: NEG
56890: PUSH
56891: LD_INT 4
56893: NEG
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 3
56901: NEG
56902: PUSH
56903: LD_INT 3
56905: NEG
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 4
56913: NEG
56914: PUSH
56915: LD_INT 3
56917: NEG
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 5
56925: NEG
56926: PUSH
56927: LD_INT 4
56929: NEG
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 5
56937: NEG
56938: PUSH
56939: LD_INT 5
56941: NEG
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 3
56949: NEG
56950: PUSH
56951: LD_INT 5
56953: NEG
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 5
56961: NEG
56962: PUSH
56963: LD_INT 3
56965: NEG
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57018: LD_ADDR_VAR 0 30
57022: PUSH
57023: LD_INT 4
57025: PUSH
57026: LD_INT 4
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 4
57035: PUSH
57036: LD_INT 3
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 5
57045: PUSH
57046: LD_INT 4
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 5
57055: PUSH
57056: LD_INT 5
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 4
57065: PUSH
57066: LD_INT 5
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 3
57075: PUSH
57076: LD_INT 4
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 3
57085: PUSH
57086: LD_INT 3
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 5
57095: PUSH
57096: LD_INT 3
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 3
57105: PUSH
57106: LD_INT 5
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 0
57115: PUSH
57116: LD_INT 3
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 0
57125: PUSH
57126: LD_INT 2
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 1
57135: PUSH
57136: LD_INT 3
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 1
57145: PUSH
57146: LD_INT 4
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: LD_INT 4
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 1
57165: NEG
57166: PUSH
57167: LD_INT 3
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 1
57176: NEG
57177: PUSH
57178: LD_INT 2
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 2
57187: PUSH
57188: LD_INT 4
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 2
57197: NEG
57198: PUSH
57199: LD_INT 2
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 4
57208: NEG
57209: PUSH
57210: LD_INT 0
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 4
57219: NEG
57220: PUSH
57221: LD_INT 1
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 3
57231: NEG
57232: PUSH
57233: LD_INT 0
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 3
57242: NEG
57243: PUSH
57244: LD_INT 1
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 4
57253: NEG
57254: PUSH
57255: LD_INT 1
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 5
57264: NEG
57265: PUSH
57266: LD_INT 0
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 5
57275: NEG
57276: PUSH
57277: LD_INT 1
57279: NEG
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 5
57287: NEG
57288: PUSH
57289: LD_INT 2
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 3
57299: NEG
57300: PUSH
57301: LD_INT 2
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 3
57310: NEG
57311: PUSH
57312: LD_INT 3
57314: NEG
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 3
57322: NEG
57323: PUSH
57324: LD_INT 4
57326: NEG
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 2
57334: NEG
57335: PUSH
57336: LD_INT 3
57338: NEG
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 2
57346: NEG
57347: PUSH
57348: LD_INT 2
57350: NEG
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 3
57358: NEG
57359: PUSH
57360: LD_INT 2
57362: NEG
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 4
57370: NEG
57371: PUSH
57372: LD_INT 3
57374: NEG
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 4
57382: NEG
57383: PUSH
57384: LD_INT 4
57386: NEG
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 2
57394: NEG
57395: PUSH
57396: LD_INT 4
57398: NEG
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 4
57406: NEG
57407: PUSH
57408: LD_INT 2
57410: NEG
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 0
57418: PUSH
57419: LD_INT 4
57421: NEG
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 0
57429: PUSH
57430: LD_INT 5
57432: NEG
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 1
57440: PUSH
57441: LD_INT 4
57443: NEG
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 1
57451: PUSH
57452: LD_INT 3
57454: NEG
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 0
57462: PUSH
57463: LD_INT 3
57465: NEG
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 1
57473: NEG
57474: PUSH
57475: LD_INT 4
57477: NEG
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 1
57485: NEG
57486: PUSH
57487: LD_INT 5
57489: NEG
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 2
57497: PUSH
57498: LD_INT 3
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 2
57508: NEG
57509: PUSH
57510: LD_INT 5
57512: NEG
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57565: LD_ADDR_VAR 0 31
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: LD_INT 4
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 0
57582: PUSH
57583: LD_INT 3
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 1
57592: PUSH
57593: LD_INT 4
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 1
57602: PUSH
57603: LD_INT 5
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 0
57612: PUSH
57613: LD_INT 5
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 1
57622: NEG
57623: PUSH
57624: LD_INT 4
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 1
57633: NEG
57634: PUSH
57635: LD_INT 3
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 2
57644: PUSH
57645: LD_INT 5
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 2
57654: NEG
57655: PUSH
57656: LD_INT 3
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 3
57665: NEG
57666: PUSH
57667: LD_INT 0
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 3
57676: NEG
57677: PUSH
57678: LD_INT 1
57680: NEG
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 2
57688: NEG
57689: PUSH
57690: LD_INT 0
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 2
57699: NEG
57700: PUSH
57701: LD_INT 1
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 3
57710: NEG
57711: PUSH
57712: LD_INT 1
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 4
57721: NEG
57722: PUSH
57723: LD_INT 0
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 4
57732: NEG
57733: PUSH
57734: LD_INT 1
57736: NEG
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 4
57744: NEG
57745: PUSH
57746: LD_INT 2
57748: NEG
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 2
57756: NEG
57757: PUSH
57758: LD_INT 2
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 4
57767: NEG
57768: PUSH
57769: LD_INT 4
57771: NEG
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 4
57779: NEG
57780: PUSH
57781: LD_INT 5
57783: NEG
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 3
57791: NEG
57792: PUSH
57793: LD_INT 4
57795: NEG
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 3
57803: NEG
57804: PUSH
57805: LD_INT 3
57807: NEG
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 4
57815: NEG
57816: PUSH
57817: LD_INT 3
57819: NEG
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 5
57827: NEG
57828: PUSH
57829: LD_INT 4
57831: NEG
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 5
57839: NEG
57840: PUSH
57841: LD_INT 5
57843: NEG
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 3
57851: NEG
57852: PUSH
57853: LD_INT 5
57855: NEG
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 5
57863: NEG
57864: PUSH
57865: LD_INT 3
57867: NEG
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 0
57875: PUSH
57876: LD_INT 3
57878: NEG
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 0
57886: PUSH
57887: LD_INT 4
57889: NEG
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 1
57897: PUSH
57898: LD_INT 3
57900: NEG
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 1
57908: PUSH
57909: LD_INT 2
57911: NEG
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: LD_INT 2
57922: NEG
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 1
57930: NEG
57931: PUSH
57932: LD_INT 3
57934: NEG
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 1
57942: NEG
57943: PUSH
57944: LD_INT 4
57946: NEG
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 2
57954: PUSH
57955: LD_INT 2
57957: NEG
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 2
57965: NEG
57966: PUSH
57967: LD_INT 4
57969: NEG
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 4
57977: PUSH
57978: LD_INT 0
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 4
57987: PUSH
57988: LD_INT 1
57990: NEG
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 5
57998: PUSH
57999: LD_INT 0
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 5
58008: PUSH
58009: LD_INT 1
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 4
58018: PUSH
58019: LD_INT 1
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 3
58028: PUSH
58029: LD_INT 0
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 3
58038: PUSH
58039: LD_INT 1
58041: NEG
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 3
58049: PUSH
58050: LD_INT 2
58052: NEG
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 5
58060: PUSH
58061: LD_INT 2
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58115: LD_ADDR_VAR 0 32
58119: PUSH
58120: LD_INT 4
58122: NEG
58123: PUSH
58124: LD_INT 0
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 4
58133: NEG
58134: PUSH
58135: LD_INT 1
58137: NEG
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 3
58145: NEG
58146: PUSH
58147: LD_INT 0
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 3
58156: NEG
58157: PUSH
58158: LD_INT 1
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 4
58167: NEG
58168: PUSH
58169: LD_INT 1
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 5
58178: NEG
58179: PUSH
58180: LD_INT 0
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 5
58189: NEG
58190: PUSH
58191: LD_INT 1
58193: NEG
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 5
58201: NEG
58202: PUSH
58203: LD_INT 2
58205: NEG
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 3
58213: NEG
58214: PUSH
58215: LD_INT 2
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 3
58224: NEG
58225: PUSH
58226: LD_INT 3
58228: NEG
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 3
58236: NEG
58237: PUSH
58238: LD_INT 4
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 2
58248: NEG
58249: PUSH
58250: LD_INT 3
58252: NEG
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 2
58260: NEG
58261: PUSH
58262: LD_INT 2
58264: NEG
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 3
58272: NEG
58273: PUSH
58274: LD_INT 2
58276: NEG
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 4
58284: NEG
58285: PUSH
58286: LD_INT 3
58288: NEG
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 4
58296: NEG
58297: PUSH
58298: LD_INT 4
58300: NEG
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 2
58308: NEG
58309: PUSH
58310: LD_INT 4
58312: NEG
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 4
58320: NEG
58321: PUSH
58322: LD_INT 2
58324: NEG
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 0
58332: PUSH
58333: LD_INT 4
58335: NEG
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 0
58343: PUSH
58344: LD_INT 5
58346: NEG
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 1
58354: PUSH
58355: LD_INT 4
58357: NEG
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 1
58365: PUSH
58366: LD_INT 3
58368: NEG
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 0
58376: PUSH
58377: LD_INT 3
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 1
58387: NEG
58388: PUSH
58389: LD_INT 4
58391: NEG
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 1
58399: NEG
58400: PUSH
58401: LD_INT 5
58403: NEG
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 2
58411: PUSH
58412: LD_INT 3
58414: NEG
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 2
58422: NEG
58423: PUSH
58424: LD_INT 5
58426: NEG
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 3
58434: PUSH
58435: LD_INT 0
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 3
58444: PUSH
58445: LD_INT 1
58447: NEG
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 4
58455: PUSH
58456: LD_INT 0
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 4
58465: PUSH
58466: LD_INT 1
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 3
58475: PUSH
58476: LD_INT 1
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 2
58485: PUSH
58486: LD_INT 0
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 2
58495: PUSH
58496: LD_INT 1
58498: NEG
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 2
58506: PUSH
58507: LD_INT 2
58509: NEG
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 4
58517: PUSH
58518: LD_INT 2
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 4
58527: PUSH
58528: LD_INT 4
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 4
58537: PUSH
58538: LD_INT 3
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 5
58547: PUSH
58548: LD_INT 4
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 5
58557: PUSH
58558: LD_INT 5
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 4
58567: PUSH
58568: LD_INT 5
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 3
58577: PUSH
58578: LD_INT 4
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 3
58587: PUSH
58588: LD_INT 3
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 5
58597: PUSH
58598: LD_INT 3
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 3
58607: PUSH
58608: LD_INT 5
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58662: LD_ADDR_VAR 0 33
58666: PUSH
58667: LD_INT 4
58669: NEG
58670: PUSH
58671: LD_INT 4
58673: NEG
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 4
58681: NEG
58682: PUSH
58683: LD_INT 5
58685: NEG
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 3
58693: NEG
58694: PUSH
58695: LD_INT 4
58697: NEG
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 3
58705: NEG
58706: PUSH
58707: LD_INT 3
58709: NEG
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 4
58717: NEG
58718: PUSH
58719: LD_INT 3
58721: NEG
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 5
58729: NEG
58730: PUSH
58731: LD_INT 4
58733: NEG
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 5
58741: NEG
58742: PUSH
58743: LD_INT 5
58745: NEG
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 3
58753: NEG
58754: PUSH
58755: LD_INT 5
58757: NEG
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 5
58765: NEG
58766: PUSH
58767: LD_INT 3
58769: NEG
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 0
58777: PUSH
58778: LD_INT 3
58780: NEG
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 0
58788: PUSH
58789: LD_INT 4
58791: NEG
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 1
58799: PUSH
58800: LD_INT 3
58802: NEG
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 1
58810: PUSH
58811: LD_INT 2
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: LD_INT 2
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 1
58832: NEG
58833: PUSH
58834: LD_INT 3
58836: NEG
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 1
58844: NEG
58845: PUSH
58846: LD_INT 4
58848: NEG
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 2
58856: PUSH
58857: LD_INT 2
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 2
58867: NEG
58868: PUSH
58869: LD_INT 4
58871: NEG
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 4
58879: PUSH
58880: LD_INT 0
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 4
58889: PUSH
58890: LD_INT 1
58892: NEG
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 5
58900: PUSH
58901: LD_INT 0
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 5
58910: PUSH
58911: LD_INT 1
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 4
58920: PUSH
58921: LD_INT 1
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 3
58930: PUSH
58931: LD_INT 0
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 3
58940: PUSH
58941: LD_INT 1
58943: NEG
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 3
58951: PUSH
58952: LD_INT 2
58954: NEG
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 5
58962: PUSH
58963: LD_INT 2
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 3
58972: PUSH
58973: LD_INT 3
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 3
58982: PUSH
58983: LD_INT 2
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 4
58992: PUSH
58993: LD_INT 3
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 4
59002: PUSH
59003: LD_INT 4
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 3
59012: PUSH
59013: LD_INT 4
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 2
59022: PUSH
59023: LD_INT 3
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 2
59032: PUSH
59033: LD_INT 2
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 4
59042: PUSH
59043: LD_INT 2
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 2
59052: PUSH
59053: LD_INT 4
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 0
59062: PUSH
59063: LD_INT 4
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 0
59072: PUSH
59073: LD_INT 3
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 1
59082: PUSH
59083: LD_INT 4
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 1
59092: PUSH
59093: LD_INT 5
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 0
59102: PUSH
59103: LD_INT 5
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 1
59112: NEG
59113: PUSH
59114: LD_INT 4
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 1
59123: NEG
59124: PUSH
59125: LD_INT 3
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 2
59134: PUSH
59135: LD_INT 5
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 2
59144: NEG
59145: PUSH
59146: LD_INT 3
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59200: LD_ADDR_VAR 0 34
59204: PUSH
59205: LD_INT 0
59207: PUSH
59208: LD_INT 4
59210: NEG
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 0
59218: PUSH
59219: LD_INT 5
59221: NEG
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 1
59229: PUSH
59230: LD_INT 4
59232: NEG
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 1
59240: PUSH
59241: LD_INT 3
59243: NEG
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 0
59251: PUSH
59252: LD_INT 3
59254: NEG
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 1
59262: NEG
59263: PUSH
59264: LD_INT 4
59266: NEG
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 1
59274: NEG
59275: PUSH
59276: LD_INT 5
59278: NEG
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 2
59286: PUSH
59287: LD_INT 3
59289: NEG
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 2
59297: NEG
59298: PUSH
59299: LD_INT 5
59301: NEG
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 3
59309: PUSH
59310: LD_INT 0
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 3
59319: PUSH
59320: LD_INT 1
59322: NEG
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 4
59330: PUSH
59331: LD_INT 0
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 4
59340: PUSH
59341: LD_INT 1
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 3
59350: PUSH
59351: LD_INT 1
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 2
59360: PUSH
59361: LD_INT 0
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 2
59370: PUSH
59371: LD_INT 1
59373: NEG
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 2
59381: PUSH
59382: LD_INT 2
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 4
59392: PUSH
59393: LD_INT 2
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 4
59402: PUSH
59403: LD_INT 4
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 4
59412: PUSH
59413: LD_INT 3
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 5
59422: PUSH
59423: LD_INT 4
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 5
59432: PUSH
59433: LD_INT 5
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 4
59442: PUSH
59443: LD_INT 5
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 3
59452: PUSH
59453: LD_INT 4
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 3
59462: PUSH
59463: LD_INT 3
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 5
59472: PUSH
59473: LD_INT 3
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 3
59482: PUSH
59483: LD_INT 5
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 0
59492: PUSH
59493: LD_INT 3
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 0
59502: PUSH
59503: LD_INT 2
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 1
59512: PUSH
59513: LD_INT 3
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 1
59522: PUSH
59523: LD_INT 4
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 0
59532: PUSH
59533: LD_INT 4
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 1
59542: NEG
59543: PUSH
59544: LD_INT 3
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 1
59553: NEG
59554: PUSH
59555: LD_INT 2
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 2
59564: PUSH
59565: LD_INT 4
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 2
59574: NEG
59575: PUSH
59576: LD_INT 2
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 4
59585: NEG
59586: PUSH
59587: LD_INT 0
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 4
59596: NEG
59597: PUSH
59598: LD_INT 1
59600: NEG
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 3
59608: NEG
59609: PUSH
59610: LD_INT 0
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 3
59619: NEG
59620: PUSH
59621: LD_INT 1
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 4
59630: NEG
59631: PUSH
59632: LD_INT 1
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 5
59641: NEG
59642: PUSH
59643: LD_INT 0
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 5
59652: NEG
59653: PUSH
59654: LD_INT 1
59656: NEG
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 5
59664: NEG
59665: PUSH
59666: LD_INT 2
59668: NEG
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 3
59676: NEG
59677: PUSH
59678: LD_INT 2
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: ST_TO_ADDR
// end ; end ;
59732: GO 59735
59734: POP
// case btype of b_depot , b_warehouse :
59735: LD_VAR 0 1
59739: PUSH
59740: LD_INT 0
59742: DOUBLE
59743: EQUAL
59744: IFTRUE 59754
59746: LD_INT 1
59748: DOUBLE
59749: EQUAL
59750: IFTRUE 59754
59752: GO 59955
59754: POP
// case nation of nation_american :
59755: LD_VAR 0 5
59759: PUSH
59760: LD_INT 1
59762: DOUBLE
59763: EQUAL
59764: IFTRUE 59768
59766: GO 59824
59768: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59769: LD_ADDR_VAR 0 9
59773: PUSH
59774: LD_VAR 0 11
59778: PUSH
59779: LD_VAR 0 12
59783: PUSH
59784: LD_VAR 0 13
59788: PUSH
59789: LD_VAR 0 14
59793: PUSH
59794: LD_VAR 0 15
59798: PUSH
59799: LD_VAR 0 16
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: PUSH
59812: LD_VAR 0 4
59816: PUSH
59817: LD_INT 1
59819: PLUS
59820: ARRAY
59821: ST_TO_ADDR
59822: GO 59953
59824: LD_INT 2
59826: DOUBLE
59827: EQUAL
59828: IFTRUE 59832
59830: GO 59888
59832: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59833: LD_ADDR_VAR 0 9
59837: PUSH
59838: LD_VAR 0 17
59842: PUSH
59843: LD_VAR 0 18
59847: PUSH
59848: LD_VAR 0 19
59852: PUSH
59853: LD_VAR 0 20
59857: PUSH
59858: LD_VAR 0 21
59862: PUSH
59863: LD_VAR 0 22
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: PUSH
59876: LD_VAR 0 4
59880: PUSH
59881: LD_INT 1
59883: PLUS
59884: ARRAY
59885: ST_TO_ADDR
59886: GO 59953
59888: LD_INT 3
59890: DOUBLE
59891: EQUAL
59892: IFTRUE 59896
59894: GO 59952
59896: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59897: LD_ADDR_VAR 0 9
59901: PUSH
59902: LD_VAR 0 23
59906: PUSH
59907: LD_VAR 0 24
59911: PUSH
59912: LD_VAR 0 25
59916: PUSH
59917: LD_VAR 0 26
59921: PUSH
59922: LD_VAR 0 27
59926: PUSH
59927: LD_VAR 0 28
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: PUSH
59940: LD_VAR 0 4
59944: PUSH
59945: LD_INT 1
59947: PLUS
59948: ARRAY
59949: ST_TO_ADDR
59950: GO 59953
59952: POP
59953: GO 60508
59955: LD_INT 2
59957: DOUBLE
59958: EQUAL
59959: IFTRUE 59969
59961: LD_INT 3
59963: DOUBLE
59964: EQUAL
59965: IFTRUE 59969
59967: GO 60025
59969: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59970: LD_ADDR_VAR 0 9
59974: PUSH
59975: LD_VAR 0 29
59979: PUSH
59980: LD_VAR 0 30
59984: PUSH
59985: LD_VAR 0 31
59989: PUSH
59990: LD_VAR 0 32
59994: PUSH
59995: LD_VAR 0 33
59999: PUSH
60000: LD_VAR 0 34
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: PUSH
60013: LD_VAR 0 4
60017: PUSH
60018: LD_INT 1
60020: PLUS
60021: ARRAY
60022: ST_TO_ADDR
60023: GO 60508
60025: LD_INT 16
60027: DOUBLE
60028: EQUAL
60029: IFTRUE 60087
60031: LD_INT 17
60033: DOUBLE
60034: EQUAL
60035: IFTRUE 60087
60037: LD_INT 18
60039: DOUBLE
60040: EQUAL
60041: IFTRUE 60087
60043: LD_INT 19
60045: DOUBLE
60046: EQUAL
60047: IFTRUE 60087
60049: LD_INT 22
60051: DOUBLE
60052: EQUAL
60053: IFTRUE 60087
60055: LD_INT 20
60057: DOUBLE
60058: EQUAL
60059: IFTRUE 60087
60061: LD_INT 21
60063: DOUBLE
60064: EQUAL
60065: IFTRUE 60087
60067: LD_INT 23
60069: DOUBLE
60070: EQUAL
60071: IFTRUE 60087
60073: LD_INT 24
60075: DOUBLE
60076: EQUAL
60077: IFTRUE 60087
60079: LD_INT 25
60081: DOUBLE
60082: EQUAL
60083: IFTRUE 60087
60085: GO 60143
60087: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60088: LD_ADDR_VAR 0 9
60092: PUSH
60093: LD_VAR 0 35
60097: PUSH
60098: LD_VAR 0 36
60102: PUSH
60103: LD_VAR 0 37
60107: PUSH
60108: LD_VAR 0 38
60112: PUSH
60113: LD_VAR 0 39
60117: PUSH
60118: LD_VAR 0 40
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: PUSH
60131: LD_VAR 0 4
60135: PUSH
60136: LD_INT 1
60138: PLUS
60139: ARRAY
60140: ST_TO_ADDR
60141: GO 60508
60143: LD_INT 6
60145: DOUBLE
60146: EQUAL
60147: IFTRUE 60199
60149: LD_INT 7
60151: DOUBLE
60152: EQUAL
60153: IFTRUE 60199
60155: LD_INT 8
60157: DOUBLE
60158: EQUAL
60159: IFTRUE 60199
60161: LD_INT 13
60163: DOUBLE
60164: EQUAL
60165: IFTRUE 60199
60167: LD_INT 12
60169: DOUBLE
60170: EQUAL
60171: IFTRUE 60199
60173: LD_INT 15
60175: DOUBLE
60176: EQUAL
60177: IFTRUE 60199
60179: LD_INT 11
60181: DOUBLE
60182: EQUAL
60183: IFTRUE 60199
60185: LD_INT 14
60187: DOUBLE
60188: EQUAL
60189: IFTRUE 60199
60191: LD_INT 10
60193: DOUBLE
60194: EQUAL
60195: IFTRUE 60199
60197: GO 60255
60199: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60200: LD_ADDR_VAR 0 9
60204: PUSH
60205: LD_VAR 0 41
60209: PUSH
60210: LD_VAR 0 42
60214: PUSH
60215: LD_VAR 0 43
60219: PUSH
60220: LD_VAR 0 44
60224: PUSH
60225: LD_VAR 0 45
60229: PUSH
60230: LD_VAR 0 46
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: PUSH
60243: LD_VAR 0 4
60247: PUSH
60248: LD_INT 1
60250: PLUS
60251: ARRAY
60252: ST_TO_ADDR
60253: GO 60508
60255: LD_INT 36
60257: DOUBLE
60258: EQUAL
60259: IFTRUE 60263
60261: GO 60319
60263: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60264: LD_ADDR_VAR 0 9
60268: PUSH
60269: LD_VAR 0 47
60273: PUSH
60274: LD_VAR 0 48
60278: PUSH
60279: LD_VAR 0 49
60283: PUSH
60284: LD_VAR 0 50
60288: PUSH
60289: LD_VAR 0 51
60293: PUSH
60294: LD_VAR 0 52
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: PUSH
60307: LD_VAR 0 4
60311: PUSH
60312: LD_INT 1
60314: PLUS
60315: ARRAY
60316: ST_TO_ADDR
60317: GO 60508
60319: LD_INT 4
60321: DOUBLE
60322: EQUAL
60323: IFTRUE 60345
60325: LD_INT 5
60327: DOUBLE
60328: EQUAL
60329: IFTRUE 60345
60331: LD_INT 34
60333: DOUBLE
60334: EQUAL
60335: IFTRUE 60345
60337: LD_INT 37
60339: DOUBLE
60340: EQUAL
60341: IFTRUE 60345
60343: GO 60401
60345: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60346: LD_ADDR_VAR 0 9
60350: PUSH
60351: LD_VAR 0 53
60355: PUSH
60356: LD_VAR 0 54
60360: PUSH
60361: LD_VAR 0 55
60365: PUSH
60366: LD_VAR 0 56
60370: PUSH
60371: LD_VAR 0 57
60375: PUSH
60376: LD_VAR 0 58
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: PUSH
60389: LD_VAR 0 4
60393: PUSH
60394: LD_INT 1
60396: PLUS
60397: ARRAY
60398: ST_TO_ADDR
60399: GO 60508
60401: LD_INT 31
60403: DOUBLE
60404: EQUAL
60405: IFTRUE 60451
60407: LD_INT 32
60409: DOUBLE
60410: EQUAL
60411: IFTRUE 60451
60413: LD_INT 33
60415: DOUBLE
60416: EQUAL
60417: IFTRUE 60451
60419: LD_INT 27
60421: DOUBLE
60422: EQUAL
60423: IFTRUE 60451
60425: LD_INT 26
60427: DOUBLE
60428: EQUAL
60429: IFTRUE 60451
60431: LD_INT 28
60433: DOUBLE
60434: EQUAL
60435: IFTRUE 60451
60437: LD_INT 29
60439: DOUBLE
60440: EQUAL
60441: IFTRUE 60451
60443: LD_INT 30
60445: DOUBLE
60446: EQUAL
60447: IFTRUE 60451
60449: GO 60507
60451: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60452: LD_ADDR_VAR 0 9
60456: PUSH
60457: LD_VAR 0 59
60461: PUSH
60462: LD_VAR 0 60
60466: PUSH
60467: LD_VAR 0 61
60471: PUSH
60472: LD_VAR 0 62
60476: PUSH
60477: LD_VAR 0 63
60481: PUSH
60482: LD_VAR 0 64
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: PUSH
60495: LD_VAR 0 4
60499: PUSH
60500: LD_INT 1
60502: PLUS
60503: ARRAY
60504: ST_TO_ADDR
60505: GO 60508
60507: POP
// temp_list2 = [ ] ;
60508: LD_ADDR_VAR 0 10
60512: PUSH
60513: EMPTY
60514: ST_TO_ADDR
// for i in temp_list do
60515: LD_ADDR_VAR 0 8
60519: PUSH
60520: LD_VAR 0 9
60524: PUSH
60525: FOR_IN
60526: IFFALSE 60578
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60528: LD_ADDR_VAR 0 10
60532: PUSH
60533: LD_VAR 0 10
60537: PUSH
60538: LD_VAR 0 8
60542: PUSH
60543: LD_INT 1
60545: ARRAY
60546: PUSH
60547: LD_VAR 0 2
60551: PLUS
60552: PUSH
60553: LD_VAR 0 8
60557: PUSH
60558: LD_INT 2
60560: ARRAY
60561: PUSH
60562: LD_VAR 0 3
60566: PLUS
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: EMPTY
60573: LIST
60574: ADD
60575: ST_TO_ADDR
60576: GO 60525
60578: POP
60579: POP
// result = temp_list2 ;
60580: LD_ADDR_VAR 0 7
60584: PUSH
60585: LD_VAR 0 10
60589: ST_TO_ADDR
// end ;
60590: LD_VAR 0 7
60594: RET
// export function EnemyInRange ( unit , dist ) ; begin
60595: LD_INT 0
60597: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60598: LD_ADDR_VAR 0 3
60602: PUSH
60603: LD_VAR 0 1
60607: PPUSH
60608: CALL_OW 255
60612: PPUSH
60613: LD_VAR 0 1
60617: PPUSH
60618: CALL_OW 250
60622: PPUSH
60623: LD_VAR 0 1
60627: PPUSH
60628: CALL_OW 251
60632: PPUSH
60633: LD_VAR 0 2
60637: PPUSH
60638: CALL 33852 0 4
60642: PUSH
60643: LD_INT 4
60645: ARRAY
60646: ST_TO_ADDR
// end ;
60647: LD_VAR 0 3
60651: RET
// export function PlayerSeeMe ( unit ) ; begin
60652: LD_INT 0
60654: PPUSH
// result := See ( your_side , unit ) ;
60655: LD_ADDR_VAR 0 2
60659: PUSH
60660: LD_OWVAR 2
60664: PPUSH
60665: LD_VAR 0 1
60669: PPUSH
60670: CALL_OW 292
60674: ST_TO_ADDR
// end ;
60675: LD_VAR 0 2
60679: RET
// export function ReverseDir ( unit ) ; begin
60680: LD_INT 0
60682: PPUSH
// if not unit then
60683: LD_VAR 0 1
60687: NOT
60688: IFFALSE 60692
// exit ;
60690: GO 60715
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60692: LD_ADDR_VAR 0 2
60696: PUSH
60697: LD_VAR 0 1
60701: PPUSH
60702: CALL_OW 254
60706: PUSH
60707: LD_INT 3
60709: PLUS
60710: PUSH
60711: LD_INT 6
60713: MOD
60714: ST_TO_ADDR
// end ;
60715: LD_VAR 0 2
60719: RET
// export function ReverseArray ( array ) ; var i ; begin
60720: LD_INT 0
60722: PPUSH
60723: PPUSH
// if not array then
60724: LD_VAR 0 1
60728: NOT
60729: IFFALSE 60733
// exit ;
60731: GO 60788
// result := [ ] ;
60733: LD_ADDR_VAR 0 2
60737: PUSH
60738: EMPTY
60739: ST_TO_ADDR
// for i := array downto 1 do
60740: LD_ADDR_VAR 0 3
60744: PUSH
60745: DOUBLE
60746: LD_VAR 0 1
60750: INC
60751: ST_TO_ADDR
60752: LD_INT 1
60754: PUSH
60755: FOR_DOWNTO
60756: IFFALSE 60786
// result := Join ( result , array [ i ] ) ;
60758: LD_ADDR_VAR 0 2
60762: PUSH
60763: LD_VAR 0 2
60767: PPUSH
60768: LD_VAR 0 1
60772: PUSH
60773: LD_VAR 0 3
60777: ARRAY
60778: PPUSH
60779: CALL 65630 0 2
60783: ST_TO_ADDR
60784: GO 60755
60786: POP
60787: POP
// end ;
60788: LD_VAR 0 2
60792: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
60793: LD_INT 0
60795: PPUSH
60796: PPUSH
60797: PPUSH
60798: PPUSH
60799: PPUSH
60800: PPUSH
// if not unit or not hexes then
60801: LD_VAR 0 1
60805: NOT
60806: IFTRUE 60815
60808: PUSH
60809: LD_VAR 0 2
60813: NOT
60814: OR
60815: IFFALSE 60819
// exit ;
60817: GO 60942
// dist := 9999 ;
60819: LD_ADDR_VAR 0 5
60823: PUSH
60824: LD_INT 9999
60826: ST_TO_ADDR
// for i = 1 to hexes do
60827: LD_ADDR_VAR 0 4
60831: PUSH
60832: DOUBLE
60833: LD_INT 1
60835: DEC
60836: ST_TO_ADDR
60837: LD_VAR 0 2
60841: PUSH
60842: FOR_TO
60843: IFFALSE 60930
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60845: LD_ADDR_VAR 0 6
60849: PUSH
60850: LD_VAR 0 1
60854: PPUSH
60855: LD_VAR 0 2
60859: PUSH
60860: LD_VAR 0 4
60864: ARRAY
60865: PUSH
60866: LD_INT 1
60868: ARRAY
60869: PPUSH
60870: LD_VAR 0 2
60874: PUSH
60875: LD_VAR 0 4
60879: ARRAY
60880: PUSH
60881: LD_INT 2
60883: ARRAY
60884: PPUSH
60885: CALL_OW 297
60889: ST_TO_ADDR
// if tdist < dist then
60890: LD_VAR 0 6
60894: PUSH
60895: LD_VAR 0 5
60899: LESS
60900: IFFALSE 60928
// begin hex := hexes [ i ] ;
60902: LD_ADDR_VAR 0 8
60906: PUSH
60907: LD_VAR 0 2
60911: PUSH
60912: LD_VAR 0 4
60916: ARRAY
60917: ST_TO_ADDR
// dist := tdist ;
60918: LD_ADDR_VAR 0 5
60922: PUSH
60923: LD_VAR 0 6
60927: ST_TO_ADDR
// end ; end ;
60928: GO 60842
60930: POP
60931: POP
// result := hex ;
60932: LD_ADDR_VAR 0 3
60936: PUSH
60937: LD_VAR 0 8
60941: ST_TO_ADDR
// end ;
60942: LD_VAR 0 3
60946: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60947: LD_INT 0
60949: PPUSH
60950: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60951: LD_VAR 0 1
60955: NOT
60956: IFTRUE 60995
60958: PUSH
60959: LD_VAR 0 1
60963: PUSH
60964: LD_INT 21
60966: PUSH
60967: LD_INT 2
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 23
60976: PUSH
60977: LD_INT 2
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PPUSH
60988: CALL_OW 69
60992: IN
60993: NOT
60994: OR
60995: IFFALSE 60999
// exit ;
60997: GO 61046
// for i = 1 to 3 do
60999: LD_ADDR_VAR 0 3
61003: PUSH
61004: DOUBLE
61005: LD_INT 1
61007: DEC
61008: ST_TO_ADDR
61009: LD_INT 3
61011: PUSH
61012: FOR_TO
61013: IFFALSE 61044
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61015: LD_VAR 0 1
61019: PPUSH
61020: CALL_OW 250
61024: PPUSH
61025: LD_VAR 0 1
61029: PPUSH
61030: CALL_OW 251
61034: PPUSH
61035: LD_INT 1
61037: PPUSH
61038: CALL_OW 453
61042: GO 61012
61044: POP
61045: POP
// end ;
61046: LD_VAR 0 2
61050: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61051: LD_INT 0
61053: PPUSH
61054: PPUSH
61055: PPUSH
61056: PPUSH
61057: PPUSH
61058: PPUSH
// if not unit or not enemy_unit then
61059: LD_VAR 0 1
61063: NOT
61064: IFTRUE 61073
61066: PUSH
61067: LD_VAR 0 2
61071: NOT
61072: OR
61073: IFFALSE 61077
// exit ;
61075: GO 61548
// if GetLives ( i ) < 250 then
61077: LD_VAR 0 4
61081: PPUSH
61082: CALL_OW 256
61086: PUSH
61087: LD_INT 250
61089: LESS
61090: IFFALSE 61103
// begin ComAutodestruct ( i ) ;
61092: LD_VAR 0 4
61096: PPUSH
61097: CALL 60947 0 1
// exit ;
61101: GO 61548
// end ; x := GetX ( enemy_unit ) ;
61103: LD_ADDR_VAR 0 7
61107: PUSH
61108: LD_VAR 0 2
61112: PPUSH
61113: CALL_OW 250
61117: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61118: LD_ADDR_VAR 0 8
61122: PUSH
61123: LD_VAR 0 2
61127: PPUSH
61128: CALL_OW 251
61132: ST_TO_ADDR
// if not x or not y then
61133: LD_VAR 0 7
61137: NOT
61138: IFTRUE 61147
61140: PUSH
61141: LD_VAR 0 8
61145: NOT
61146: OR
61147: IFFALSE 61151
// exit ;
61149: GO 61548
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61151: LD_ADDR_VAR 0 6
61155: PUSH
61156: LD_VAR 0 7
61160: PPUSH
61161: LD_INT 0
61163: PPUSH
61164: LD_INT 4
61166: PPUSH
61167: CALL_OW 272
61171: PUSH
61172: LD_VAR 0 8
61176: PPUSH
61177: LD_INT 0
61179: PPUSH
61180: LD_INT 4
61182: PPUSH
61183: CALL_OW 273
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_VAR 0 7
61196: PPUSH
61197: LD_INT 1
61199: PPUSH
61200: LD_INT 4
61202: PPUSH
61203: CALL_OW 272
61207: PUSH
61208: LD_VAR 0 8
61212: PPUSH
61213: LD_INT 1
61215: PPUSH
61216: LD_INT 4
61218: PPUSH
61219: CALL_OW 273
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_VAR 0 7
61232: PPUSH
61233: LD_INT 2
61235: PPUSH
61236: LD_INT 4
61238: PPUSH
61239: CALL_OW 272
61243: PUSH
61244: LD_VAR 0 8
61248: PPUSH
61249: LD_INT 2
61251: PPUSH
61252: LD_INT 4
61254: PPUSH
61255: CALL_OW 273
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_VAR 0 7
61268: PPUSH
61269: LD_INT 3
61271: PPUSH
61272: LD_INT 4
61274: PPUSH
61275: CALL_OW 272
61279: PUSH
61280: LD_VAR 0 8
61284: PPUSH
61285: LD_INT 3
61287: PPUSH
61288: LD_INT 4
61290: PPUSH
61291: CALL_OW 273
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_VAR 0 7
61304: PPUSH
61305: LD_INT 4
61307: PPUSH
61308: LD_INT 4
61310: PPUSH
61311: CALL_OW 272
61315: PUSH
61316: LD_VAR 0 8
61320: PPUSH
61321: LD_INT 4
61323: PPUSH
61324: LD_INT 4
61326: PPUSH
61327: CALL_OW 273
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_VAR 0 7
61340: PPUSH
61341: LD_INT 5
61343: PPUSH
61344: LD_INT 4
61346: PPUSH
61347: CALL_OW 272
61351: PUSH
61352: LD_VAR 0 8
61356: PPUSH
61357: LD_INT 5
61359: PPUSH
61360: LD_INT 4
61362: PPUSH
61363: CALL_OW 273
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: ST_TO_ADDR
// for i = tmp downto 1 do
61380: LD_ADDR_VAR 0 4
61384: PUSH
61385: DOUBLE
61386: LD_VAR 0 6
61390: INC
61391: ST_TO_ADDR
61392: LD_INT 1
61394: PUSH
61395: FOR_DOWNTO
61396: IFFALSE 61499
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61398: LD_VAR 0 6
61402: PUSH
61403: LD_VAR 0 4
61407: ARRAY
61408: PUSH
61409: LD_INT 1
61411: ARRAY
61412: PPUSH
61413: LD_VAR 0 6
61417: PUSH
61418: LD_VAR 0 4
61422: ARRAY
61423: PUSH
61424: LD_INT 2
61426: ARRAY
61427: PPUSH
61428: CALL_OW 488
61432: NOT
61433: IFTRUE 61475
61435: PUSH
61436: LD_VAR 0 6
61440: PUSH
61441: LD_VAR 0 4
61445: ARRAY
61446: PUSH
61447: LD_INT 1
61449: ARRAY
61450: PPUSH
61451: LD_VAR 0 6
61455: PUSH
61456: LD_VAR 0 4
61460: ARRAY
61461: PUSH
61462: LD_INT 2
61464: ARRAY
61465: PPUSH
61466: CALL_OW 428
61470: PUSH
61471: LD_INT 0
61473: NONEQUAL
61474: OR
61475: IFFALSE 61497
// tmp := Delete ( tmp , i ) ;
61477: LD_ADDR_VAR 0 6
61481: PUSH
61482: LD_VAR 0 6
61486: PPUSH
61487: LD_VAR 0 4
61491: PPUSH
61492: CALL_OW 3
61496: ST_TO_ADDR
61497: GO 61395
61499: POP
61500: POP
// j := GetClosestHex ( unit , tmp ) ;
61501: LD_ADDR_VAR 0 5
61505: PUSH
61506: LD_VAR 0 1
61510: PPUSH
61511: LD_VAR 0 6
61515: PPUSH
61516: CALL 60793 0 2
61520: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61521: LD_VAR 0 1
61525: PPUSH
61526: LD_VAR 0 5
61530: PUSH
61531: LD_INT 1
61533: ARRAY
61534: PPUSH
61535: LD_VAR 0 5
61539: PUSH
61540: LD_INT 2
61542: ARRAY
61543: PPUSH
61544: CALL_OW 111
// end ;
61548: LD_VAR 0 3
61552: RET
// export function PrepareApemanSoldier ( ) ; begin
61553: LD_INT 0
61555: PPUSH
// uc_nation := 0 ;
61556: LD_ADDR_OWVAR 21
61560: PUSH
61561: LD_INT 0
61563: ST_TO_ADDR
// hc_sex := sex_male ;
61564: LD_ADDR_OWVAR 27
61568: PUSH
61569: LD_INT 1
61571: ST_TO_ADDR
// hc_name :=  ;
61572: LD_ADDR_OWVAR 26
61576: PUSH
61577: LD_STRING 
61579: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
61580: LD_ADDR_OWVAR 28
61584: PUSH
61585: LD_INT 15
61587: ST_TO_ADDR
// hc_gallery :=  ;
61588: LD_ADDR_OWVAR 33
61592: PUSH
61593: LD_STRING 
61595: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61596: LD_ADDR_OWVAR 31
61600: PUSH
61601: LD_INT 0
61603: PPUSH
61604: LD_INT 3
61606: PPUSH
61607: CALL_OW 12
61611: PUSH
61612: LD_INT 0
61614: PPUSH
61615: LD_INT 3
61617: PPUSH
61618: CALL_OW 12
61622: PUSH
61623: LD_INT 0
61625: PUSH
61626: LD_INT 0
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61635: LD_ADDR_OWVAR 29
61639: PUSH
61640: LD_INT 12
61642: PUSH
61643: LD_INT 12
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: ST_TO_ADDR
// end ;
61650: LD_VAR 0 1
61654: RET
// export function PrepareApemanEngineer ( ) ; begin
61655: LD_INT 0
61657: PPUSH
// uc_nation := 0 ;
61658: LD_ADDR_OWVAR 21
61662: PUSH
61663: LD_INT 0
61665: ST_TO_ADDR
// hc_sex := sex_male ;
61666: LD_ADDR_OWVAR 27
61670: PUSH
61671: LD_INT 1
61673: ST_TO_ADDR
// hc_name :=  ;
61674: LD_ADDR_OWVAR 26
61678: PUSH
61679: LD_STRING 
61681: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
61682: LD_ADDR_OWVAR 28
61686: PUSH
61687: LD_INT 16
61689: ST_TO_ADDR
// hc_gallery :=  ;
61690: LD_ADDR_OWVAR 33
61694: PUSH
61695: LD_STRING 
61697: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61698: LD_ADDR_OWVAR 31
61702: PUSH
61703: LD_INT 0
61705: PPUSH
61706: LD_INT 3
61708: PPUSH
61709: CALL_OW 12
61713: PUSH
61714: LD_INT 0
61716: PPUSH
61717: LD_INT 3
61719: PPUSH
61720: CALL_OW 12
61724: PUSH
61725: LD_INT 0
61727: PUSH
61728: LD_INT 0
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61737: LD_ADDR_OWVAR 29
61741: PUSH
61742: LD_INT 12
61744: PUSH
61745: LD_INT 12
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: ST_TO_ADDR
// end ;
61752: LD_VAR 0 1
61756: RET
// export function PrepareApeman ( agressivity ) ; begin
61757: LD_INT 0
61759: PPUSH
// uc_side := 0 ;
61760: LD_ADDR_OWVAR 20
61764: PUSH
61765: LD_INT 0
61767: ST_TO_ADDR
// uc_nation := 0 ;
61768: LD_ADDR_OWVAR 21
61772: PUSH
61773: LD_INT 0
61775: ST_TO_ADDR
// hc_sex := sex_male ;
61776: LD_ADDR_OWVAR 27
61780: PUSH
61781: LD_INT 1
61783: ST_TO_ADDR
// hc_class := class_apeman ;
61784: LD_ADDR_OWVAR 28
61788: PUSH
61789: LD_INT 12
61791: ST_TO_ADDR
// hc_gallery :=  ;
61792: LD_ADDR_OWVAR 33
61796: PUSH
61797: LD_STRING 
61799: ST_TO_ADDR
// hc_name :=  ;
61800: LD_ADDR_OWVAR 26
61804: PUSH
61805: LD_STRING 
61807: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61808: LD_ADDR_OWVAR 29
61812: PUSH
61813: LD_INT 12
61815: PUSH
61816: LD_INT 12
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: ST_TO_ADDR
// if agressivity = 0 then
61823: LD_VAR 0 1
61827: PUSH
61828: LD_INT 0
61830: EQUAL
61831: IFFALSE 61843
// hc_agressivity := 0 else
61833: LD_ADDR_OWVAR 35
61837: PUSH
61838: LD_INT 0
61840: ST_TO_ADDR
61841: GO 61864
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61843: LD_ADDR_OWVAR 35
61847: PUSH
61848: LD_VAR 0 1
61852: NEG
61853: PPUSH
61854: LD_VAR 0 1
61858: PPUSH
61859: CALL_OW 12
61863: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61864: LD_ADDR_OWVAR 31
61868: PUSH
61869: LD_INT 0
61871: PPUSH
61872: LD_INT 3
61874: PPUSH
61875: CALL_OW 12
61879: PUSH
61880: LD_INT 0
61882: PPUSH
61883: LD_INT 3
61885: PPUSH
61886: CALL_OW 12
61890: PUSH
61891: LD_INT 0
61893: PUSH
61894: LD_INT 0
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: ST_TO_ADDR
// end ;
61903: LD_VAR 0 2
61907: RET
// export function PrepareTiger ( agressivity ) ; begin
61908: LD_INT 0
61910: PPUSH
// uc_side := 0 ;
61911: LD_ADDR_OWVAR 20
61915: PUSH
61916: LD_INT 0
61918: ST_TO_ADDR
// uc_nation := 0 ;
61919: LD_ADDR_OWVAR 21
61923: PUSH
61924: LD_INT 0
61926: ST_TO_ADDR
// InitHc ;
61927: CALL_OW 19
// hc_class := class_tiger ;
61931: LD_ADDR_OWVAR 28
61935: PUSH
61936: LD_INT 14
61938: ST_TO_ADDR
// hc_gallery :=  ;
61939: LD_ADDR_OWVAR 33
61943: PUSH
61944: LD_STRING 
61946: ST_TO_ADDR
// hc_name :=  ;
61947: LD_ADDR_OWVAR 26
61951: PUSH
61952: LD_STRING 
61954: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61955: LD_ADDR_OWVAR 35
61959: PUSH
61960: LD_VAR 0 1
61964: NEG
61965: PPUSH
61966: LD_VAR 0 1
61970: PPUSH
61971: CALL_OW 12
61975: ST_TO_ADDR
// end ;
61976: LD_VAR 0 2
61980: RET
// export function PrepareEnchidna ( ) ; begin
61981: LD_INT 0
61983: PPUSH
// uc_side := 0 ;
61984: LD_ADDR_OWVAR 20
61988: PUSH
61989: LD_INT 0
61991: ST_TO_ADDR
// uc_nation := 0 ;
61992: LD_ADDR_OWVAR 21
61996: PUSH
61997: LD_INT 0
61999: ST_TO_ADDR
// InitHc ;
62000: CALL_OW 19
// hc_class := class_baggie ;
62004: LD_ADDR_OWVAR 28
62008: PUSH
62009: LD_INT 13
62011: ST_TO_ADDR
// hc_gallery :=  ;
62012: LD_ADDR_OWVAR 33
62016: PUSH
62017: LD_STRING 
62019: ST_TO_ADDR
// hc_name :=  ;
62020: LD_ADDR_OWVAR 26
62024: PUSH
62025: LD_STRING 
62027: ST_TO_ADDR
// end ;
62028: LD_VAR 0 1
62032: RET
// export function PrepareFrog ( ) ; begin
62033: LD_INT 0
62035: PPUSH
// uc_side := 0 ;
62036: LD_ADDR_OWVAR 20
62040: PUSH
62041: LD_INT 0
62043: ST_TO_ADDR
// uc_nation := 0 ;
62044: LD_ADDR_OWVAR 21
62048: PUSH
62049: LD_INT 0
62051: ST_TO_ADDR
// InitHc ;
62052: CALL_OW 19
// hc_class := class_frog ;
62056: LD_ADDR_OWVAR 28
62060: PUSH
62061: LD_INT 19
62063: ST_TO_ADDR
// hc_gallery :=  ;
62064: LD_ADDR_OWVAR 33
62068: PUSH
62069: LD_STRING 
62071: ST_TO_ADDR
// hc_name :=  ;
62072: LD_ADDR_OWVAR 26
62076: PUSH
62077: LD_STRING 
62079: ST_TO_ADDR
// end ;
62080: LD_VAR 0 1
62084: RET
// export function PrepareFish ( ) ; begin
62085: LD_INT 0
62087: PPUSH
// uc_side := 0 ;
62088: LD_ADDR_OWVAR 20
62092: PUSH
62093: LD_INT 0
62095: ST_TO_ADDR
// uc_nation := 0 ;
62096: LD_ADDR_OWVAR 21
62100: PUSH
62101: LD_INT 0
62103: ST_TO_ADDR
// InitHc ;
62104: CALL_OW 19
// hc_class := class_fish ;
62108: LD_ADDR_OWVAR 28
62112: PUSH
62113: LD_INT 20
62115: ST_TO_ADDR
// hc_gallery :=  ;
62116: LD_ADDR_OWVAR 33
62120: PUSH
62121: LD_STRING 
62123: ST_TO_ADDR
// hc_name :=  ;
62124: LD_ADDR_OWVAR 26
62128: PUSH
62129: LD_STRING 
62131: ST_TO_ADDR
// end ;
62132: LD_VAR 0 1
62136: RET
// export function PrepareBird ( ) ; begin
62137: LD_INT 0
62139: PPUSH
// uc_side := 0 ;
62140: LD_ADDR_OWVAR 20
62144: PUSH
62145: LD_INT 0
62147: ST_TO_ADDR
// uc_nation := 0 ;
62148: LD_ADDR_OWVAR 21
62152: PUSH
62153: LD_INT 0
62155: ST_TO_ADDR
// InitHc ;
62156: CALL_OW 19
// hc_class := class_phororhacos ;
62160: LD_ADDR_OWVAR 28
62164: PUSH
62165: LD_INT 18
62167: ST_TO_ADDR
// hc_gallery :=  ;
62168: LD_ADDR_OWVAR 33
62172: PUSH
62173: LD_STRING 
62175: ST_TO_ADDR
// hc_name :=  ;
62176: LD_ADDR_OWVAR 26
62180: PUSH
62181: LD_STRING 
62183: ST_TO_ADDR
// end ;
62184: LD_VAR 0 1
62188: RET
// export function PrepareHorse ( ) ; begin
62189: LD_INT 0
62191: PPUSH
// uc_side := 0 ;
62192: LD_ADDR_OWVAR 20
62196: PUSH
62197: LD_INT 0
62199: ST_TO_ADDR
// uc_nation := 0 ;
62200: LD_ADDR_OWVAR 21
62204: PUSH
62205: LD_INT 0
62207: ST_TO_ADDR
// InitHc ;
62208: CALL_OW 19
// hc_class := class_horse ;
62212: LD_ADDR_OWVAR 28
62216: PUSH
62217: LD_INT 21
62219: ST_TO_ADDR
// hc_gallery :=  ;
62220: LD_ADDR_OWVAR 33
62224: PUSH
62225: LD_STRING 
62227: ST_TO_ADDR
// hc_name :=  ;
62228: LD_ADDR_OWVAR 26
62232: PUSH
62233: LD_STRING 
62235: ST_TO_ADDR
// end ;
62236: LD_VAR 0 1
62240: RET
// export function PrepareMastodont ( ) ; begin
62241: LD_INT 0
62243: PPUSH
// uc_side := 0 ;
62244: LD_ADDR_OWVAR 20
62248: PUSH
62249: LD_INT 0
62251: ST_TO_ADDR
// uc_nation := 0 ;
62252: LD_ADDR_OWVAR 21
62256: PUSH
62257: LD_INT 0
62259: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62260: LD_ADDR_OWVAR 37
62264: PUSH
62265: LD_INT 31
62267: ST_TO_ADDR
// vc_control := control_rider ;
62268: LD_ADDR_OWVAR 38
62272: PUSH
62273: LD_INT 4
62275: ST_TO_ADDR
// end ;
62276: LD_VAR 0 1
62280: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62281: LD_INT 0
62283: PPUSH
62284: PPUSH
62285: PPUSH
// uc_side = 0 ;
62286: LD_ADDR_OWVAR 20
62290: PUSH
62291: LD_INT 0
62293: ST_TO_ADDR
// uc_nation = 0 ;
62294: LD_ADDR_OWVAR 21
62298: PUSH
62299: LD_INT 0
62301: ST_TO_ADDR
// InitHc_All ( ) ;
62302: CALL_OW 584
// InitVc ;
62306: CALL_OW 20
// if mastodonts then
62310: LD_VAR 0 6
62314: IFFALSE 62381
// for i = 1 to mastodonts do
62316: LD_ADDR_VAR 0 11
62320: PUSH
62321: DOUBLE
62322: LD_INT 1
62324: DEC
62325: ST_TO_ADDR
62326: LD_VAR 0 6
62330: PUSH
62331: FOR_TO
62332: IFFALSE 62379
// begin vc_chassis := 31 ;
62334: LD_ADDR_OWVAR 37
62338: PUSH
62339: LD_INT 31
62341: ST_TO_ADDR
// vc_control := control_rider ;
62342: LD_ADDR_OWVAR 38
62346: PUSH
62347: LD_INT 4
62349: ST_TO_ADDR
// animal := CreateVehicle ;
62350: LD_ADDR_VAR 0 12
62354: PUSH
62355: CALL_OW 45
62359: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62360: LD_VAR 0 12
62364: PPUSH
62365: LD_VAR 0 8
62369: PPUSH
62370: LD_INT 0
62372: PPUSH
62373: CALL 64523 0 3
// end ;
62377: GO 62331
62379: POP
62380: POP
// if horses then
62381: LD_VAR 0 5
62385: IFFALSE 62452
// for i = 1 to horses do
62387: LD_ADDR_VAR 0 11
62391: PUSH
62392: DOUBLE
62393: LD_INT 1
62395: DEC
62396: ST_TO_ADDR
62397: LD_VAR 0 5
62401: PUSH
62402: FOR_TO
62403: IFFALSE 62450
// begin hc_class := 21 ;
62405: LD_ADDR_OWVAR 28
62409: PUSH
62410: LD_INT 21
62412: ST_TO_ADDR
// hc_gallery :=  ;
62413: LD_ADDR_OWVAR 33
62417: PUSH
62418: LD_STRING 
62420: ST_TO_ADDR
// animal := CreateHuman ;
62421: LD_ADDR_VAR 0 12
62425: PUSH
62426: CALL_OW 44
62430: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62431: LD_VAR 0 12
62435: PPUSH
62436: LD_VAR 0 8
62440: PPUSH
62441: LD_INT 0
62443: PPUSH
62444: CALL 64523 0 3
// end ;
62448: GO 62402
62450: POP
62451: POP
// if birds then
62452: LD_VAR 0 1
62456: IFFALSE 62523
// for i = 1 to birds do
62458: LD_ADDR_VAR 0 11
62462: PUSH
62463: DOUBLE
62464: LD_INT 1
62466: DEC
62467: ST_TO_ADDR
62468: LD_VAR 0 1
62472: PUSH
62473: FOR_TO
62474: IFFALSE 62521
// begin hc_class := 18 ;
62476: LD_ADDR_OWVAR 28
62480: PUSH
62481: LD_INT 18
62483: ST_TO_ADDR
// hc_gallery =  ;
62484: LD_ADDR_OWVAR 33
62488: PUSH
62489: LD_STRING 
62491: ST_TO_ADDR
// animal := CreateHuman ;
62492: LD_ADDR_VAR 0 12
62496: PUSH
62497: CALL_OW 44
62501: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62502: LD_VAR 0 12
62506: PPUSH
62507: LD_VAR 0 8
62511: PPUSH
62512: LD_INT 0
62514: PPUSH
62515: CALL 64523 0 3
// end ;
62519: GO 62473
62521: POP
62522: POP
// if tigers then
62523: LD_VAR 0 2
62527: IFFALSE 62611
// for i = 1 to tigers do
62529: LD_ADDR_VAR 0 11
62533: PUSH
62534: DOUBLE
62535: LD_INT 1
62537: DEC
62538: ST_TO_ADDR
62539: LD_VAR 0 2
62543: PUSH
62544: FOR_TO
62545: IFFALSE 62609
// begin hc_class = class_tiger ;
62547: LD_ADDR_OWVAR 28
62551: PUSH
62552: LD_INT 14
62554: ST_TO_ADDR
// hc_gallery =  ;
62555: LD_ADDR_OWVAR 33
62559: PUSH
62560: LD_STRING 
62562: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62563: LD_ADDR_OWVAR 35
62567: PUSH
62568: LD_INT 7
62570: NEG
62571: PPUSH
62572: LD_INT 7
62574: PPUSH
62575: CALL_OW 12
62579: ST_TO_ADDR
// animal := CreateHuman ;
62580: LD_ADDR_VAR 0 12
62584: PUSH
62585: CALL_OW 44
62589: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62590: LD_VAR 0 12
62594: PPUSH
62595: LD_VAR 0 8
62599: PPUSH
62600: LD_INT 0
62602: PPUSH
62603: CALL 64523 0 3
// end ;
62607: GO 62544
62609: POP
62610: POP
// if apemans then
62611: LD_VAR 0 3
62615: IFFALSE 62738
// for i = 1 to apemans do
62617: LD_ADDR_VAR 0 11
62621: PUSH
62622: DOUBLE
62623: LD_INT 1
62625: DEC
62626: ST_TO_ADDR
62627: LD_VAR 0 3
62631: PUSH
62632: FOR_TO
62633: IFFALSE 62736
// begin hc_class = class_apeman ;
62635: LD_ADDR_OWVAR 28
62639: PUSH
62640: LD_INT 12
62642: ST_TO_ADDR
// hc_gallery =  ;
62643: LD_ADDR_OWVAR 33
62647: PUSH
62648: LD_STRING 
62650: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62651: LD_ADDR_OWVAR 35
62655: PUSH
62656: LD_INT 2
62658: NEG
62659: PPUSH
62660: LD_INT 2
62662: PPUSH
62663: CALL_OW 12
62667: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62668: LD_ADDR_OWVAR 31
62672: PUSH
62673: LD_INT 1
62675: PPUSH
62676: LD_INT 3
62678: PPUSH
62679: CALL_OW 12
62683: PUSH
62684: LD_INT 1
62686: PPUSH
62687: LD_INT 3
62689: PPUSH
62690: CALL_OW 12
62694: PUSH
62695: LD_INT 0
62697: PUSH
62698: LD_INT 0
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: ST_TO_ADDR
// animal := CreateHuman ;
62707: LD_ADDR_VAR 0 12
62711: PUSH
62712: CALL_OW 44
62716: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62717: LD_VAR 0 12
62721: PPUSH
62722: LD_VAR 0 8
62726: PPUSH
62727: LD_INT 0
62729: PPUSH
62730: CALL 64523 0 3
// end ;
62734: GO 62632
62736: POP
62737: POP
// if enchidnas then
62738: LD_VAR 0 4
62742: IFFALSE 62809
// for i = 1 to enchidnas do
62744: LD_ADDR_VAR 0 11
62748: PUSH
62749: DOUBLE
62750: LD_INT 1
62752: DEC
62753: ST_TO_ADDR
62754: LD_VAR 0 4
62758: PUSH
62759: FOR_TO
62760: IFFALSE 62807
// begin hc_class = 13 ;
62762: LD_ADDR_OWVAR 28
62766: PUSH
62767: LD_INT 13
62769: ST_TO_ADDR
// hc_gallery =  ;
62770: LD_ADDR_OWVAR 33
62774: PUSH
62775: LD_STRING 
62777: ST_TO_ADDR
// animal := CreateHuman ;
62778: LD_ADDR_VAR 0 12
62782: PUSH
62783: CALL_OW 44
62787: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62788: LD_VAR 0 12
62792: PPUSH
62793: LD_VAR 0 8
62797: PPUSH
62798: LD_INT 0
62800: PPUSH
62801: CALL 64523 0 3
// end ;
62805: GO 62759
62807: POP
62808: POP
// if fishes then
62809: LD_VAR 0 7
62813: IFFALSE 62880
// for i = 1 to fishes do
62815: LD_ADDR_VAR 0 11
62819: PUSH
62820: DOUBLE
62821: LD_INT 1
62823: DEC
62824: ST_TO_ADDR
62825: LD_VAR 0 7
62829: PUSH
62830: FOR_TO
62831: IFFALSE 62878
// begin hc_class = 20 ;
62833: LD_ADDR_OWVAR 28
62837: PUSH
62838: LD_INT 20
62840: ST_TO_ADDR
// hc_gallery =  ;
62841: LD_ADDR_OWVAR 33
62845: PUSH
62846: LD_STRING 
62848: ST_TO_ADDR
// animal := CreateHuman ;
62849: LD_ADDR_VAR 0 12
62853: PUSH
62854: CALL_OW 44
62858: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62859: LD_VAR 0 12
62863: PPUSH
62864: LD_VAR 0 9
62868: PPUSH
62869: LD_INT 0
62871: PPUSH
62872: CALL 64523 0 3
// end ;
62876: GO 62830
62878: POP
62879: POP
// end ;
62880: LD_VAR 0 10
62884: RET
// export function WantHeal ( sci , unit ) ; begin
62885: LD_INT 0
62887: PPUSH
// if GetTaskList ( sci ) > 0 then
62888: LD_VAR 0 1
62892: PPUSH
62893: CALL_OW 437
62897: PUSH
62898: LD_INT 0
62900: GREATER
62901: IFFALSE 62973
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62903: LD_VAR 0 1
62907: PPUSH
62908: CALL_OW 437
62912: PUSH
62913: LD_INT 1
62915: ARRAY
62916: PUSH
62917: LD_INT 1
62919: ARRAY
62920: PUSH
62921: LD_STRING l
62923: EQUAL
62924: IFFALSE 62951
62926: PUSH
62927: LD_VAR 0 1
62931: PPUSH
62932: CALL_OW 437
62936: PUSH
62937: LD_INT 1
62939: ARRAY
62940: PUSH
62941: LD_INT 4
62943: ARRAY
62944: PUSH
62945: LD_VAR 0 2
62949: EQUAL
62950: AND
62951: IFFALSE 62963
// result := true else
62953: LD_ADDR_VAR 0 3
62957: PUSH
62958: LD_INT 1
62960: ST_TO_ADDR
62961: GO 62971
// result := false ;
62963: LD_ADDR_VAR 0 3
62967: PUSH
62968: LD_INT 0
62970: ST_TO_ADDR
// end else
62971: GO 62981
// result := false ;
62973: LD_ADDR_VAR 0 3
62977: PUSH
62978: LD_INT 0
62980: ST_TO_ADDR
// end ;
62981: LD_VAR 0 3
62985: RET
// export function HealTarget ( sci ) ; begin
62986: LD_INT 0
62988: PPUSH
// if not sci then
62989: LD_VAR 0 1
62993: NOT
62994: IFFALSE 62998
// exit ;
62996: GO 63063
// result := 0 ;
62998: LD_ADDR_VAR 0 2
63002: PUSH
63003: LD_INT 0
63005: ST_TO_ADDR
// if GetTaskList ( sci ) then
63006: LD_VAR 0 1
63010: PPUSH
63011: CALL_OW 437
63015: IFFALSE 63063
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63017: LD_VAR 0 1
63021: PPUSH
63022: CALL_OW 437
63026: PUSH
63027: LD_INT 1
63029: ARRAY
63030: PUSH
63031: LD_INT 1
63033: ARRAY
63034: PUSH
63035: LD_STRING l
63037: EQUAL
63038: IFFALSE 63063
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63040: LD_ADDR_VAR 0 2
63044: PUSH
63045: LD_VAR 0 1
63049: PPUSH
63050: CALL_OW 437
63054: PUSH
63055: LD_INT 1
63057: ARRAY
63058: PUSH
63059: LD_INT 4
63061: ARRAY
63062: ST_TO_ADDR
// end ;
63063: LD_VAR 0 2
63067: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63068: LD_INT 0
63070: PPUSH
63071: PPUSH
63072: PPUSH
63073: PPUSH
// if not base_units then
63074: LD_VAR 0 1
63078: NOT
63079: IFFALSE 63083
// exit ;
63081: GO 63170
// result := false ;
63083: LD_ADDR_VAR 0 2
63087: PUSH
63088: LD_INT 0
63090: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63091: LD_ADDR_VAR 0 5
63095: PUSH
63096: LD_VAR 0 1
63100: PPUSH
63101: LD_INT 21
63103: PUSH
63104: LD_INT 3
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PPUSH
63111: CALL_OW 72
63115: ST_TO_ADDR
// if not tmp then
63116: LD_VAR 0 5
63120: NOT
63121: IFFALSE 63125
// exit ;
63123: GO 63170
// for i in tmp do
63125: LD_ADDR_VAR 0 3
63129: PUSH
63130: LD_VAR 0 5
63134: PUSH
63135: FOR_IN
63136: IFFALSE 63168
// begin result := EnemyInRange ( i , 22 ) ;
63138: LD_ADDR_VAR 0 2
63142: PUSH
63143: LD_VAR 0 3
63147: PPUSH
63148: LD_INT 22
63150: PPUSH
63151: CALL 60595 0 2
63155: ST_TO_ADDR
// if result then
63156: LD_VAR 0 2
63160: IFFALSE 63166
// exit ;
63162: POP
63163: POP
63164: GO 63170
// end ;
63166: GO 63135
63168: POP
63169: POP
// end ;
63170: LD_VAR 0 2
63174: RET
// export function FilterByTag ( units , tag ) ; begin
63175: LD_INT 0
63177: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63178: LD_ADDR_VAR 0 3
63182: PUSH
63183: LD_VAR 0 1
63187: PPUSH
63188: LD_INT 120
63190: PUSH
63191: LD_VAR 0 2
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PPUSH
63200: CALL_OW 72
63204: ST_TO_ADDR
// end ;
63205: LD_VAR 0 3
63209: RET
// export function IsDriver ( un ) ; begin
63210: LD_INT 0
63212: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63213: LD_ADDR_VAR 0 2
63217: PUSH
63218: LD_VAR 0 1
63222: PUSH
63223: LD_INT 55
63225: PUSH
63226: EMPTY
63227: LIST
63228: PPUSH
63229: CALL_OW 69
63233: IN
63234: ST_TO_ADDR
// end ;
63235: LD_VAR 0 2
63239: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63240: LD_INT 0
63242: PPUSH
63243: PPUSH
// list := [ ] ;
63244: LD_ADDR_VAR 0 5
63248: PUSH
63249: EMPTY
63250: ST_TO_ADDR
// case d of 0 :
63251: LD_VAR 0 3
63255: PUSH
63256: LD_INT 0
63258: DOUBLE
63259: EQUAL
63260: IFTRUE 63264
63262: GO 63397
63264: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63265: LD_ADDR_VAR 0 5
63269: PUSH
63270: LD_VAR 0 1
63274: PUSH
63275: LD_INT 4
63277: MINUS
63278: PUSH
63279: LD_VAR 0 2
63283: PUSH
63284: LD_INT 4
63286: MINUS
63287: PUSH
63288: LD_INT 2
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: LIST
63295: PUSH
63296: LD_VAR 0 1
63300: PUSH
63301: LD_INT 3
63303: MINUS
63304: PUSH
63305: LD_VAR 0 2
63309: PUSH
63310: LD_INT 1
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: LIST
63317: PUSH
63318: LD_VAR 0 1
63322: PUSH
63323: LD_INT 4
63325: PLUS
63326: PUSH
63327: LD_VAR 0 2
63331: PUSH
63332: LD_INT 4
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: LIST
63339: PUSH
63340: LD_VAR 0 1
63344: PUSH
63345: LD_INT 3
63347: PLUS
63348: PUSH
63349: LD_VAR 0 2
63353: PUSH
63354: LD_INT 3
63356: PLUS
63357: PUSH
63358: LD_INT 5
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: LIST
63365: PUSH
63366: LD_VAR 0 1
63370: PUSH
63371: LD_VAR 0 2
63375: PUSH
63376: LD_INT 4
63378: PLUS
63379: PUSH
63380: LD_INT 0
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: LIST
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: ST_TO_ADDR
// end ; 1 :
63395: GO 64095
63397: LD_INT 1
63399: DOUBLE
63400: EQUAL
63401: IFTRUE 63405
63403: GO 63538
63405: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63406: LD_ADDR_VAR 0 5
63410: PUSH
63411: LD_VAR 0 1
63415: PUSH
63416: LD_VAR 0 2
63420: PUSH
63421: LD_INT 4
63423: MINUS
63424: PUSH
63425: LD_INT 3
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: LIST
63432: PUSH
63433: LD_VAR 0 1
63437: PUSH
63438: LD_INT 3
63440: MINUS
63441: PUSH
63442: LD_VAR 0 2
63446: PUSH
63447: LD_INT 3
63449: MINUS
63450: PUSH
63451: LD_INT 2
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: LIST
63458: PUSH
63459: LD_VAR 0 1
63463: PUSH
63464: LD_INT 4
63466: MINUS
63467: PUSH
63468: LD_VAR 0 2
63472: PUSH
63473: LD_INT 1
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: LIST
63480: PUSH
63481: LD_VAR 0 1
63485: PUSH
63486: LD_VAR 0 2
63490: PUSH
63491: LD_INT 3
63493: PLUS
63494: PUSH
63495: LD_INT 0
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: LIST
63502: PUSH
63503: LD_VAR 0 1
63507: PUSH
63508: LD_INT 4
63510: PLUS
63511: PUSH
63512: LD_VAR 0 2
63516: PUSH
63517: LD_INT 4
63519: PLUS
63520: PUSH
63521: LD_INT 5
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: LIST
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: ST_TO_ADDR
// end ; 2 :
63536: GO 64095
63538: LD_INT 2
63540: DOUBLE
63541: EQUAL
63542: IFTRUE 63546
63544: GO 63675
63546: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63547: LD_ADDR_VAR 0 5
63551: PUSH
63552: LD_VAR 0 1
63556: PUSH
63557: LD_VAR 0 2
63561: PUSH
63562: LD_INT 3
63564: MINUS
63565: PUSH
63566: LD_INT 3
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: LIST
63573: PUSH
63574: LD_VAR 0 1
63578: PUSH
63579: LD_INT 4
63581: PLUS
63582: PUSH
63583: LD_VAR 0 2
63587: PUSH
63588: LD_INT 4
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: LIST
63595: PUSH
63596: LD_VAR 0 1
63600: PUSH
63601: LD_VAR 0 2
63605: PUSH
63606: LD_INT 4
63608: PLUS
63609: PUSH
63610: LD_INT 0
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: LIST
63617: PUSH
63618: LD_VAR 0 1
63622: PUSH
63623: LD_INT 3
63625: MINUS
63626: PUSH
63627: LD_VAR 0 2
63631: PUSH
63632: LD_INT 1
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: LIST
63639: PUSH
63640: LD_VAR 0 1
63644: PUSH
63645: LD_INT 4
63647: MINUS
63648: PUSH
63649: LD_VAR 0 2
63653: PUSH
63654: LD_INT 4
63656: MINUS
63657: PUSH
63658: LD_INT 2
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: LIST
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: ST_TO_ADDR
// end ; 3 :
63673: GO 64095
63675: LD_INT 3
63677: DOUBLE
63678: EQUAL
63679: IFTRUE 63683
63681: GO 63816
63683: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63684: LD_ADDR_VAR 0 5
63688: PUSH
63689: LD_VAR 0 1
63693: PUSH
63694: LD_INT 3
63696: PLUS
63697: PUSH
63698: LD_VAR 0 2
63702: PUSH
63703: LD_INT 4
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: LIST
63710: PUSH
63711: LD_VAR 0 1
63715: PUSH
63716: LD_INT 4
63718: PLUS
63719: PUSH
63720: LD_VAR 0 2
63724: PUSH
63725: LD_INT 4
63727: PLUS
63728: PUSH
63729: LD_INT 5
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: LIST
63736: PUSH
63737: LD_VAR 0 1
63741: PUSH
63742: LD_INT 4
63744: MINUS
63745: PUSH
63746: LD_VAR 0 2
63750: PUSH
63751: LD_INT 1
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: LIST
63758: PUSH
63759: LD_VAR 0 1
63763: PUSH
63764: LD_VAR 0 2
63768: PUSH
63769: LD_INT 4
63771: MINUS
63772: PUSH
63773: LD_INT 3
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: LIST
63780: PUSH
63781: LD_VAR 0 1
63785: PUSH
63786: LD_INT 3
63788: MINUS
63789: PUSH
63790: LD_VAR 0 2
63794: PUSH
63795: LD_INT 3
63797: MINUS
63798: PUSH
63799: LD_INT 2
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: LIST
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: LIST
63811: LIST
63812: LIST
63813: ST_TO_ADDR
// end ; 4 :
63814: GO 64095
63816: LD_INT 4
63818: DOUBLE
63819: EQUAL
63820: IFTRUE 63824
63822: GO 63957
63824: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63825: LD_ADDR_VAR 0 5
63829: PUSH
63830: LD_VAR 0 1
63834: PUSH
63835: LD_VAR 0 2
63839: PUSH
63840: LD_INT 4
63842: PLUS
63843: PUSH
63844: LD_INT 0
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: LIST
63851: PUSH
63852: LD_VAR 0 1
63856: PUSH
63857: LD_INT 3
63859: PLUS
63860: PUSH
63861: LD_VAR 0 2
63865: PUSH
63866: LD_INT 3
63868: PLUS
63869: PUSH
63870: LD_INT 5
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: LIST
63877: PUSH
63878: LD_VAR 0 1
63882: PUSH
63883: LD_INT 4
63885: PLUS
63886: PUSH
63887: LD_VAR 0 2
63891: PUSH
63892: LD_INT 4
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: LIST
63899: PUSH
63900: LD_VAR 0 1
63904: PUSH
63905: LD_VAR 0 2
63909: PUSH
63910: LD_INT 3
63912: MINUS
63913: PUSH
63914: LD_INT 3
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: LIST
63921: PUSH
63922: LD_VAR 0 1
63926: PUSH
63927: LD_INT 4
63929: MINUS
63930: PUSH
63931: LD_VAR 0 2
63935: PUSH
63936: LD_INT 4
63938: MINUS
63939: PUSH
63940: LD_INT 2
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: LIST
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: ST_TO_ADDR
// end ; 5 :
63955: GO 64095
63957: LD_INT 5
63959: DOUBLE
63960: EQUAL
63961: IFTRUE 63965
63963: GO 64094
63965: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63966: LD_ADDR_VAR 0 5
63970: PUSH
63971: LD_VAR 0 1
63975: PUSH
63976: LD_INT 4
63978: MINUS
63979: PUSH
63980: LD_VAR 0 2
63984: PUSH
63985: LD_INT 1
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: LIST
63992: PUSH
63993: LD_VAR 0 1
63997: PUSH
63998: LD_VAR 0 2
64002: PUSH
64003: LD_INT 4
64005: MINUS
64006: PUSH
64007: LD_INT 3
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: LIST
64014: PUSH
64015: LD_VAR 0 1
64019: PUSH
64020: LD_INT 4
64022: PLUS
64023: PUSH
64024: LD_VAR 0 2
64028: PUSH
64029: LD_INT 4
64031: PLUS
64032: PUSH
64033: LD_INT 5
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: LIST
64040: PUSH
64041: LD_VAR 0 1
64045: PUSH
64046: LD_INT 3
64048: PLUS
64049: PUSH
64050: LD_VAR 0 2
64054: PUSH
64055: LD_INT 4
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: LIST
64062: PUSH
64063: LD_VAR 0 1
64067: PUSH
64068: LD_VAR 0 2
64072: PUSH
64073: LD_INT 3
64075: PLUS
64076: PUSH
64077: LD_INT 0
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: LIST
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: ST_TO_ADDR
// end ; end ;
64092: GO 64095
64094: POP
// result := list ;
64095: LD_ADDR_VAR 0 4
64099: PUSH
64100: LD_VAR 0 5
64104: ST_TO_ADDR
// end ;
64105: LD_VAR 0 4
64109: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64110: LD_INT 0
64112: PPUSH
64113: PPUSH
64114: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64115: LD_VAR 0 1
64119: NOT
64120: IFTRUE 64148
64122: PUSH
64123: LD_VAR 0 2
64127: PUSH
64128: LD_INT 1
64130: PUSH
64131: LD_INT 2
64133: PUSH
64134: LD_INT 3
64136: PUSH
64137: LD_INT 4
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: IN
64146: NOT
64147: OR
64148: IFFALSE 64152
// exit ;
64150: GO 64235
// tmp := [ ] ;
64152: LD_ADDR_VAR 0 5
64156: PUSH
64157: EMPTY
64158: ST_TO_ADDR
// for i in units do
64159: LD_ADDR_VAR 0 4
64163: PUSH
64164: LD_VAR 0 1
64168: PUSH
64169: FOR_IN
64170: IFFALSE 64204
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
64172: LD_ADDR_VAR 0 5
64176: PUSH
64177: LD_VAR 0 5
64181: PPUSH
64182: LD_VAR 0 4
64186: PPUSH
64187: LD_VAR 0 2
64191: PPUSH
64192: CALL_OW 259
64196: PPUSH
64197: CALL 65630 0 2
64201: ST_TO_ADDR
64202: GO 64169
64204: POP
64205: POP
// if not tmp then
64206: LD_VAR 0 5
64210: NOT
64211: IFFALSE 64215
// exit ;
64213: GO 64235
// result := SortListByListDesc ( units , tmp ) ;
64215: LD_ADDR_VAR 0 3
64219: PUSH
64220: LD_VAR 0 1
64224: PPUSH
64225: LD_VAR 0 5
64229: PPUSH
64230: CALL_OW 77
64234: ST_TO_ADDR
// end ;
64235: LD_VAR 0 3
64239: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64240: LD_INT 0
64242: PPUSH
64243: PPUSH
64244: PPUSH
// result := false ;
64245: LD_ADDR_VAR 0 3
64249: PUSH
64250: LD_INT 0
64252: ST_TO_ADDR
// if not building then
64253: LD_VAR 0 2
64257: NOT
64258: IFFALSE 64262
// exit ;
64260: GO 64406
// x := GetX ( building ) ;
64262: LD_ADDR_VAR 0 4
64266: PUSH
64267: LD_VAR 0 2
64271: PPUSH
64272: CALL_OW 250
64276: ST_TO_ADDR
// y := GetY ( building ) ;
64277: LD_ADDR_VAR 0 5
64281: PUSH
64282: LD_VAR 0 2
64286: PPUSH
64287: CALL_OW 251
64291: ST_TO_ADDR
// if not x or not y then
64292: LD_VAR 0 4
64296: NOT
64297: IFTRUE 64306
64299: PUSH
64300: LD_VAR 0 5
64304: NOT
64305: OR
64306: IFFALSE 64310
// exit ;
64308: GO 64406
// if GetTaskList ( unit ) then
64310: LD_VAR 0 1
64314: PPUSH
64315: CALL_OW 437
64319: IFFALSE 64406
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64321: LD_STRING e
64323: PUSH
64324: LD_VAR 0 1
64328: PPUSH
64329: CALL_OW 437
64333: PUSH
64334: LD_INT 1
64336: ARRAY
64337: PUSH
64338: LD_INT 1
64340: ARRAY
64341: EQUAL
64342: IFFALSE 64369
64344: PUSH
64345: LD_VAR 0 4
64349: PUSH
64350: LD_VAR 0 1
64354: PPUSH
64355: CALL_OW 437
64359: PUSH
64360: LD_INT 1
64362: ARRAY
64363: PUSH
64364: LD_INT 2
64366: ARRAY
64367: EQUAL
64368: AND
64369: IFFALSE 64396
64371: PUSH
64372: LD_VAR 0 5
64376: PUSH
64377: LD_VAR 0 1
64381: PPUSH
64382: CALL_OW 437
64386: PUSH
64387: LD_INT 1
64389: ARRAY
64390: PUSH
64391: LD_INT 3
64393: ARRAY
64394: EQUAL
64395: AND
64396: IFFALSE 64406
// result := true end ;
64398: LD_ADDR_VAR 0 3
64402: PUSH
64403: LD_INT 1
64405: ST_TO_ADDR
// end ;
64406: LD_VAR 0 3
64410: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64411: LD_INT 0
64413: PPUSH
// result := false ;
64414: LD_ADDR_VAR 0 4
64418: PUSH
64419: LD_INT 0
64421: ST_TO_ADDR
// if GetTaskList ( unit ) then
64422: LD_VAR 0 1
64426: PPUSH
64427: CALL_OW 437
64431: IFFALSE 64518
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64433: LD_STRING M
64435: PUSH
64436: LD_VAR 0 1
64440: PPUSH
64441: CALL_OW 437
64445: PUSH
64446: LD_INT 1
64448: ARRAY
64449: PUSH
64450: LD_INT 1
64452: ARRAY
64453: EQUAL
64454: IFFALSE 64481
64456: PUSH
64457: LD_VAR 0 2
64461: PUSH
64462: LD_VAR 0 1
64466: PPUSH
64467: CALL_OW 437
64471: PUSH
64472: LD_INT 1
64474: ARRAY
64475: PUSH
64476: LD_INT 2
64478: ARRAY
64479: EQUAL
64480: AND
64481: IFFALSE 64508
64483: PUSH
64484: LD_VAR 0 3
64488: PUSH
64489: LD_VAR 0 1
64493: PPUSH
64494: CALL_OW 437
64498: PUSH
64499: LD_INT 1
64501: ARRAY
64502: PUSH
64503: LD_INT 3
64505: ARRAY
64506: EQUAL
64507: AND
64508: IFFALSE 64518
// result := true ;
64510: LD_ADDR_VAR 0 4
64514: PUSH
64515: LD_INT 1
64517: ST_TO_ADDR
// end ; end ;
64518: LD_VAR 0 4
64522: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64523: LD_INT 0
64525: PPUSH
64526: PPUSH
64527: PPUSH
64528: PPUSH
// if not unit or not area then
64529: LD_VAR 0 1
64533: NOT
64534: IFTRUE 64543
64536: PUSH
64537: LD_VAR 0 2
64541: NOT
64542: OR
64543: IFFALSE 64547
// exit ;
64545: GO 64723
// tmp := AreaToList ( area , i ) ;
64547: LD_ADDR_VAR 0 6
64551: PUSH
64552: LD_VAR 0 2
64556: PPUSH
64557: LD_VAR 0 5
64561: PPUSH
64562: CALL_OW 517
64566: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64567: LD_ADDR_VAR 0 5
64571: PUSH
64572: DOUBLE
64573: LD_INT 1
64575: DEC
64576: ST_TO_ADDR
64577: LD_VAR 0 6
64581: PUSH
64582: LD_INT 1
64584: ARRAY
64585: PUSH
64586: FOR_TO
64587: IFFALSE 64721
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64589: LD_ADDR_VAR 0 7
64593: PUSH
64594: LD_VAR 0 6
64598: PUSH
64599: LD_INT 1
64601: ARRAY
64602: PUSH
64603: LD_VAR 0 5
64607: ARRAY
64608: PUSH
64609: LD_VAR 0 6
64613: PUSH
64614: LD_INT 2
64616: ARRAY
64617: PUSH
64618: LD_VAR 0 5
64622: ARRAY
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
64628: LD_INT 92
64630: PUSH
64631: LD_VAR 0 7
64635: PUSH
64636: LD_INT 1
64638: ARRAY
64639: PUSH
64640: LD_VAR 0 7
64644: PUSH
64645: LD_INT 2
64647: ARRAY
64648: PUSH
64649: LD_INT 2
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: PPUSH
64658: CALL_OW 69
64662: PUSH
64663: LD_INT 0
64665: EQUAL
64666: IFFALSE 64719
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64668: LD_VAR 0 1
64672: PPUSH
64673: LD_VAR 0 7
64677: PUSH
64678: LD_INT 1
64680: ARRAY
64681: PPUSH
64682: LD_VAR 0 7
64686: PUSH
64687: LD_INT 2
64689: ARRAY
64690: PPUSH
64691: LD_VAR 0 3
64695: PPUSH
64696: CALL_OW 48
// result := IsPlaced ( unit ) ;
64700: LD_ADDR_VAR 0 4
64704: PUSH
64705: LD_VAR 0 1
64709: PPUSH
64710: CALL_OW 305
64714: ST_TO_ADDR
// exit ;
64715: POP
64716: POP
64717: GO 64723
// end ; end ;
64719: GO 64586
64721: POP
64722: POP
// end ;
64723: LD_VAR 0 4
64727: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64728: LD_INT 0
64730: PPUSH
64731: PPUSH
64732: PPUSH
// if not side or side > 8 then
64733: LD_VAR 0 1
64737: NOT
64738: IFTRUE 64750
64740: PUSH
64741: LD_VAR 0 1
64745: PUSH
64746: LD_INT 8
64748: GREATER
64749: OR
64750: IFFALSE 64754
// exit ;
64752: GO 64941
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64754: LD_ADDR_VAR 0 4
64758: PUSH
64759: LD_INT 22
64761: PUSH
64762: LD_VAR 0 1
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 21
64773: PUSH
64774: LD_INT 3
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PPUSH
64785: CALL_OW 69
64789: ST_TO_ADDR
// if not tmp then
64790: LD_VAR 0 4
64794: NOT
64795: IFFALSE 64799
// exit ;
64797: GO 64941
// enable_addtolog := true ;
64799: LD_ADDR_OWVAR 81
64803: PUSH
64804: LD_INT 1
64806: ST_TO_ADDR
// AddToLog ( [ ) ;
64807: LD_STRING [
64809: PPUSH
64810: CALL_OW 561
// for i in tmp do
64814: LD_ADDR_VAR 0 3
64818: PUSH
64819: LD_VAR 0 4
64823: PUSH
64824: FOR_IN
64825: IFFALSE 64932
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64827: LD_STRING [
64829: PUSH
64830: LD_VAR 0 3
64834: PPUSH
64835: CALL_OW 266
64839: STR
64840: PUSH
64841: LD_STRING , 
64843: STR
64844: PUSH
64845: LD_VAR 0 3
64849: PPUSH
64850: CALL_OW 250
64854: STR
64855: PUSH
64856: LD_STRING , 
64858: STR
64859: PUSH
64860: LD_VAR 0 3
64864: PPUSH
64865: CALL_OW 251
64869: STR
64870: PUSH
64871: LD_STRING , 
64873: STR
64874: PUSH
64875: LD_VAR 0 3
64879: PPUSH
64880: CALL_OW 254
64884: STR
64885: PUSH
64886: LD_STRING , 
64888: STR
64889: PUSH
64890: LD_VAR 0 3
64894: PPUSH
64895: LD_INT 1
64897: PPUSH
64898: CALL_OW 268
64902: STR
64903: PUSH
64904: LD_STRING , 
64906: STR
64907: PUSH
64908: LD_VAR 0 3
64912: PPUSH
64913: LD_INT 2
64915: PPUSH
64916: CALL_OW 268
64920: STR
64921: PUSH
64922: LD_STRING ],
64924: STR
64925: PPUSH
64926: CALL_OW 561
// end ;
64930: GO 64824
64932: POP
64933: POP
// AddToLog ( ]; ) ;
64934: LD_STRING ];
64936: PPUSH
64937: CALL_OW 561
// end ;
64941: LD_VAR 0 2
64945: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64946: LD_INT 0
64948: PPUSH
64949: PPUSH
64950: PPUSH
64951: PPUSH
64952: PPUSH
// if not area or not rate or not max then
64953: LD_VAR 0 1
64957: NOT
64958: IFTRUE 64967
64960: PUSH
64961: LD_VAR 0 2
64965: NOT
64966: OR
64967: IFTRUE 64976
64969: PUSH
64970: LD_VAR 0 4
64974: NOT
64975: OR
64976: IFFALSE 64980
// exit ;
64978: GO 65169
// while 1 do
64980: LD_INT 1
64982: IFFALSE 65169
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64984: LD_ADDR_VAR 0 9
64988: PUSH
64989: LD_VAR 0 1
64993: PPUSH
64994: LD_INT 1
64996: PPUSH
64997: CALL_OW 287
65001: PUSH
65002: LD_INT 10
65004: MUL
65005: ST_TO_ADDR
// r := rate / 10 ;
65006: LD_ADDR_VAR 0 7
65010: PUSH
65011: LD_VAR 0 2
65015: PUSH
65016: LD_INT 10
65018: DIVREAL
65019: ST_TO_ADDR
// time := 1 1$00 ;
65020: LD_ADDR_VAR 0 8
65024: PUSH
65025: LD_INT 2100
65027: ST_TO_ADDR
// if amount < min then
65028: LD_VAR 0 9
65032: PUSH
65033: LD_VAR 0 3
65037: LESS
65038: IFFALSE 65056
// r := r * 2 else
65040: LD_ADDR_VAR 0 7
65044: PUSH
65045: LD_VAR 0 7
65049: PUSH
65050: LD_INT 2
65052: MUL
65053: ST_TO_ADDR
65054: GO 65082
// if amount > max then
65056: LD_VAR 0 9
65060: PUSH
65061: LD_VAR 0 4
65065: GREATER
65066: IFFALSE 65082
// r := r / 2 ;
65068: LD_ADDR_VAR 0 7
65072: PUSH
65073: LD_VAR 0 7
65077: PUSH
65078: LD_INT 2
65080: DIVREAL
65081: ST_TO_ADDR
// time := time / r ;
65082: LD_ADDR_VAR 0 8
65086: PUSH
65087: LD_VAR 0 8
65091: PUSH
65092: LD_VAR 0 7
65096: DIVREAL
65097: ST_TO_ADDR
// if time < 0 then
65098: LD_VAR 0 8
65102: PUSH
65103: LD_INT 0
65105: LESS
65106: IFFALSE 65123
// time := time * - 1 ;
65108: LD_ADDR_VAR 0 8
65112: PUSH
65113: LD_VAR 0 8
65117: PUSH
65118: LD_INT 1
65120: NEG
65121: MUL
65122: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65123: LD_VAR 0 8
65127: PUSH
65128: LD_INT 35
65130: PPUSH
65131: LD_INT 875
65133: PPUSH
65134: CALL_OW 12
65138: PLUS
65139: PPUSH
65140: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65144: LD_INT 1
65146: PPUSH
65147: LD_INT 5
65149: PPUSH
65150: CALL_OW 12
65154: PPUSH
65155: LD_VAR 0 1
65159: PPUSH
65160: LD_INT 1
65162: PPUSH
65163: CALL_OW 55
// end ;
65167: GO 64980
// end ;
65169: LD_VAR 0 5
65173: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65174: LD_INT 0
65176: PPUSH
65177: PPUSH
65178: PPUSH
65179: PPUSH
65180: PPUSH
65181: PPUSH
65182: PPUSH
65183: PPUSH
// if not turrets or not factories then
65184: LD_VAR 0 1
65188: NOT
65189: IFTRUE 65198
65191: PUSH
65192: LD_VAR 0 2
65196: NOT
65197: OR
65198: IFFALSE 65202
// exit ;
65200: GO 65509
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65202: LD_ADDR_VAR 0 10
65206: PUSH
65207: LD_INT 5
65209: PUSH
65210: LD_INT 6
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 2
65219: PUSH
65220: LD_INT 4
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 3
65229: PUSH
65230: LD_INT 5
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: LIST
65241: PUSH
65242: LD_INT 24
65244: PUSH
65245: LD_INT 25
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: LD_INT 23
65254: PUSH
65255: LD_INT 27
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: LD_INT 42
65268: PUSH
65269: LD_INT 43
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 44
65278: PUSH
65279: LD_INT 46
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 45
65288: PUSH
65289: LD_INT 47
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: LIST
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: LIST
65305: ST_TO_ADDR
// result := [ ] ;
65306: LD_ADDR_VAR 0 3
65310: PUSH
65311: EMPTY
65312: ST_TO_ADDR
// for i in turrets do
65313: LD_ADDR_VAR 0 4
65317: PUSH
65318: LD_VAR 0 1
65322: PUSH
65323: FOR_IN
65324: IFFALSE 65507
// begin nat := GetNation ( i ) ;
65326: LD_ADDR_VAR 0 7
65330: PUSH
65331: LD_VAR 0 4
65335: PPUSH
65336: CALL_OW 248
65340: ST_TO_ADDR
// weapon := 0 ;
65341: LD_ADDR_VAR 0 8
65345: PUSH
65346: LD_INT 0
65348: ST_TO_ADDR
// if not nat then
65349: LD_VAR 0 7
65353: NOT
65354: IFFALSE 65358
// continue ;
65356: GO 65323
// for j in list [ nat ] do
65358: LD_ADDR_VAR 0 5
65362: PUSH
65363: LD_VAR 0 10
65367: PUSH
65368: LD_VAR 0 7
65372: ARRAY
65373: PUSH
65374: FOR_IN
65375: IFFALSE 65416
// if GetBWeapon ( i ) = j [ 1 ] then
65377: LD_VAR 0 4
65381: PPUSH
65382: CALL_OW 269
65386: PUSH
65387: LD_VAR 0 5
65391: PUSH
65392: LD_INT 1
65394: ARRAY
65395: EQUAL
65396: IFFALSE 65414
// begin weapon := j [ 2 ] ;
65398: LD_ADDR_VAR 0 8
65402: PUSH
65403: LD_VAR 0 5
65407: PUSH
65408: LD_INT 2
65410: ARRAY
65411: ST_TO_ADDR
// break ;
65412: GO 65416
// end ;
65414: GO 65374
65416: POP
65417: POP
// if not weapon then
65418: LD_VAR 0 8
65422: NOT
65423: IFFALSE 65427
// continue ;
65425: GO 65323
// for k in factories do
65427: LD_ADDR_VAR 0 6
65431: PUSH
65432: LD_VAR 0 2
65436: PUSH
65437: FOR_IN
65438: IFFALSE 65503
// begin weapons := AvailableWeaponList ( k ) ;
65440: LD_ADDR_VAR 0 9
65444: PUSH
65445: LD_VAR 0 6
65449: PPUSH
65450: CALL_OW 478
65454: ST_TO_ADDR
// if not weapons then
65455: LD_VAR 0 9
65459: NOT
65460: IFFALSE 65464
// continue ;
65462: GO 65437
// if weapon in weapons then
65464: LD_VAR 0 8
65468: PUSH
65469: LD_VAR 0 9
65473: IN
65474: IFFALSE 65501
// begin result := [ i , weapon ] ;
65476: LD_ADDR_VAR 0 3
65480: PUSH
65481: LD_VAR 0 4
65485: PUSH
65486: LD_VAR 0 8
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: ST_TO_ADDR
// exit ;
65495: POP
65496: POP
65497: POP
65498: POP
65499: GO 65509
// end ; end ;
65501: GO 65437
65503: POP
65504: POP
// end ;
65505: GO 65323
65507: POP
65508: POP
// end ;
65509: LD_VAR 0 3
65513: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65514: LD_INT 0
65516: PPUSH
// if not side or side > 8 then
65517: LD_VAR 0 3
65521: NOT
65522: IFTRUE 65534
65524: PUSH
65525: LD_VAR 0 3
65529: PUSH
65530: LD_INT 8
65532: GREATER
65533: OR
65534: IFFALSE 65538
// exit ;
65536: GO 65597
// if not range then
65538: LD_VAR 0 4
65542: NOT
65543: IFFALSE 65554
// range := - 12 ;
65545: LD_ADDR_VAR 0 4
65549: PUSH
65550: LD_INT 12
65552: NEG
65553: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65554: LD_VAR 0 1
65558: PPUSH
65559: LD_VAR 0 2
65563: PPUSH
65564: LD_VAR 0 3
65568: PPUSH
65569: LD_VAR 0 4
65573: PPUSH
65574: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65578: LD_VAR 0 1
65582: PPUSH
65583: LD_VAR 0 2
65587: PPUSH
65588: LD_VAR 0 3
65592: PPUSH
65593: CALL_OW 331
// end ;
65597: LD_VAR 0 5
65601: RET
// export function Video ( mode ) ; begin
65602: LD_INT 0
65604: PPUSH
// ingame_video = mode ;
65605: LD_ADDR_OWVAR 52
65609: PUSH
65610: LD_VAR 0 1
65614: ST_TO_ADDR
// interface_hidden = mode ;
65615: LD_ADDR_OWVAR 54
65619: PUSH
65620: LD_VAR 0 1
65624: ST_TO_ADDR
// end ;
65625: LD_VAR 0 2
65629: RET
// export function Join ( array , element ) ; begin
65630: LD_INT 0
65632: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65633: LD_ADDR_VAR 0 3
65637: PUSH
65638: LD_VAR 0 1
65642: PPUSH
65643: LD_VAR 0 1
65647: PUSH
65648: LD_INT 1
65650: PLUS
65651: PPUSH
65652: LD_VAR 0 2
65656: PPUSH
65657: CALL_OW 1
65661: ST_TO_ADDR
// end ;
65662: LD_VAR 0 3
65666: RET
// export function JoinUnion ( array , element ) ; begin
65667: LD_INT 0
65669: PPUSH
// result := array union element ;
65670: LD_ADDR_VAR 0 3
65674: PUSH
65675: LD_VAR 0 1
65679: PUSH
65680: LD_VAR 0 2
65684: UNION
65685: ST_TO_ADDR
// end ;
65686: LD_VAR 0 3
65690: RET
// export function GetBehemoths ( side ) ; begin
65691: LD_INT 0
65693: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
65694: LD_ADDR_VAR 0 2
65698: PUSH
65699: LD_INT 22
65701: PUSH
65702: LD_VAR 0 1
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: LD_INT 31
65713: PUSH
65714: LD_INT 25
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PPUSH
65725: CALL_OW 69
65729: ST_TO_ADDR
// end ;
65730: LD_VAR 0 2
65734: RET
// export function Shuffle ( array ) ; var i , index ; begin
65735: LD_INT 0
65737: PPUSH
65738: PPUSH
65739: PPUSH
// result := [ ] ;
65740: LD_ADDR_VAR 0 2
65744: PUSH
65745: EMPTY
65746: ST_TO_ADDR
// if not array then
65747: LD_VAR 0 1
65751: NOT
65752: IFFALSE 65756
// exit ;
65754: GO 65855
// Randomize ;
65756: CALL_OW 10
// for i = array downto 1 do
65760: LD_ADDR_VAR 0 3
65764: PUSH
65765: DOUBLE
65766: LD_VAR 0 1
65770: INC
65771: ST_TO_ADDR
65772: LD_INT 1
65774: PUSH
65775: FOR_DOWNTO
65776: IFFALSE 65853
// begin index := rand ( 1 , array ) ;
65778: LD_ADDR_VAR 0 4
65782: PUSH
65783: LD_INT 1
65785: PPUSH
65786: LD_VAR 0 1
65790: PPUSH
65791: CALL_OW 12
65795: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65796: LD_ADDR_VAR 0 2
65800: PUSH
65801: LD_VAR 0 2
65805: PPUSH
65806: LD_VAR 0 2
65810: PUSH
65811: LD_INT 1
65813: PLUS
65814: PPUSH
65815: LD_VAR 0 1
65819: PUSH
65820: LD_VAR 0 4
65824: ARRAY
65825: PPUSH
65826: CALL_OW 2
65830: ST_TO_ADDR
// array := Delete ( array , index ) ;
65831: LD_ADDR_VAR 0 1
65835: PUSH
65836: LD_VAR 0 1
65840: PPUSH
65841: LD_VAR 0 4
65845: PPUSH
65846: CALL_OW 3
65850: ST_TO_ADDR
// end ;
65851: GO 65775
65853: POP
65854: POP
// end ;
65855: LD_VAR 0 2
65859: RET
// export function GetBaseMaterials ( base ) ; begin
65860: LD_INT 0
65862: PPUSH
// result := [ 0 , 0 , 0 ] ;
65863: LD_ADDR_VAR 0 2
65867: PUSH
65868: LD_INT 0
65870: PUSH
65871: LD_INT 0
65873: PUSH
65874: LD_INT 0
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: LIST
65881: ST_TO_ADDR
// if not base then
65882: LD_VAR 0 1
65886: NOT
65887: IFFALSE 65891
// exit ;
65889: GO 65940
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65891: LD_ADDR_VAR 0 2
65895: PUSH
65896: LD_VAR 0 1
65900: PPUSH
65901: LD_INT 1
65903: PPUSH
65904: CALL_OW 275
65908: PUSH
65909: LD_VAR 0 1
65913: PPUSH
65914: LD_INT 2
65916: PPUSH
65917: CALL_OW 275
65921: PUSH
65922: LD_VAR 0 1
65926: PPUSH
65927: LD_INT 3
65929: PPUSH
65930: CALL_OW 275
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: LIST
65939: ST_TO_ADDR
// end ;
65940: LD_VAR 0 2
65944: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65945: LD_INT 0
65947: PPUSH
65948: PPUSH
// result := array ;
65949: LD_ADDR_VAR 0 3
65953: PUSH
65954: LD_VAR 0 1
65958: ST_TO_ADDR
// if size >= result then
65959: LD_VAR 0 2
65963: PUSH
65964: LD_VAR 0 3
65968: GREATEREQUAL
65969: IFFALSE 65973
// exit ;
65971: GO 66023
// if size then
65973: LD_VAR 0 2
65977: IFFALSE 66023
// for i := array downto size do
65979: LD_ADDR_VAR 0 4
65983: PUSH
65984: DOUBLE
65985: LD_VAR 0 1
65989: INC
65990: ST_TO_ADDR
65991: LD_VAR 0 2
65995: PUSH
65996: FOR_DOWNTO
65997: IFFALSE 66021
// result := Delete ( result , result ) ;
65999: LD_ADDR_VAR 0 3
66003: PUSH
66004: LD_VAR 0 3
66008: PPUSH
66009: LD_VAR 0 3
66013: PPUSH
66014: CALL_OW 3
66018: ST_TO_ADDR
66019: GO 65996
66021: POP
66022: POP
// end ;
66023: LD_VAR 0 3
66027: RET
// export function ComExit ( unit ) ; var tmp ; begin
66028: LD_INT 0
66030: PPUSH
66031: PPUSH
// if not IsInUnit ( unit ) then
66032: LD_VAR 0 1
66036: PPUSH
66037: CALL_OW 310
66041: NOT
66042: IFFALSE 66046
// exit ;
66044: GO 66106
// tmp := IsInUnit ( unit ) ;
66046: LD_ADDR_VAR 0 3
66050: PUSH
66051: LD_VAR 0 1
66055: PPUSH
66056: CALL_OW 310
66060: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66061: LD_VAR 0 3
66065: PPUSH
66066: CALL_OW 247
66070: PUSH
66071: LD_INT 2
66073: EQUAL
66074: IFFALSE 66087
// ComExitVehicle ( unit ) else
66076: LD_VAR 0 1
66080: PPUSH
66081: CALL_OW 121
66085: GO 66096
// ComExitBuilding ( unit ) ;
66087: LD_VAR 0 1
66091: PPUSH
66092: CALL_OW 122
// result := tmp ;
66096: LD_ADDR_VAR 0 2
66100: PUSH
66101: LD_VAR 0 3
66105: ST_TO_ADDR
// end ;
66106: LD_VAR 0 2
66110: RET
// export function ComExitAll ( units ) ; var i ; begin
66111: LD_INT 0
66113: PPUSH
66114: PPUSH
// if not units then
66115: LD_VAR 0 1
66119: NOT
66120: IFFALSE 66124
// exit ;
66122: GO 66150
// for i in units do
66124: LD_ADDR_VAR 0 3
66128: PUSH
66129: LD_VAR 0 1
66133: PUSH
66134: FOR_IN
66135: IFFALSE 66148
// ComExit ( i ) ;
66137: LD_VAR 0 3
66141: PPUSH
66142: CALL 66028 0 1
66146: GO 66134
66148: POP
66149: POP
// end ;
66150: LD_VAR 0 2
66154: RET
// export function ResetHc ; begin
66155: LD_INT 0
66157: PPUSH
// InitHc ;
66158: CALL_OW 19
// hc_importance := 0 ;
66162: LD_ADDR_OWVAR 32
66166: PUSH
66167: LD_INT 0
66169: ST_TO_ADDR
// end ;
66170: LD_VAR 0 1
66174: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66175: LD_INT 0
66177: PPUSH
66178: PPUSH
66179: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66180: LD_ADDR_VAR 0 6
66184: PUSH
66185: LD_VAR 0 1
66189: PUSH
66190: LD_VAR 0 3
66194: PLUS
66195: PUSH
66196: LD_INT 2
66198: DIV
66199: ST_TO_ADDR
// if _x < 0 then
66200: LD_VAR 0 6
66204: PUSH
66205: LD_INT 0
66207: LESS
66208: IFFALSE 66225
// _x := _x * - 1 ;
66210: LD_ADDR_VAR 0 6
66214: PUSH
66215: LD_VAR 0 6
66219: PUSH
66220: LD_INT 1
66222: NEG
66223: MUL
66224: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66225: LD_ADDR_VAR 0 7
66229: PUSH
66230: LD_VAR 0 2
66234: PUSH
66235: LD_VAR 0 4
66239: PLUS
66240: PUSH
66241: LD_INT 2
66243: DIV
66244: ST_TO_ADDR
// if _y < 0 then
66245: LD_VAR 0 7
66249: PUSH
66250: LD_INT 0
66252: LESS
66253: IFFALSE 66270
// _y := _y * - 1 ;
66255: LD_ADDR_VAR 0 7
66259: PUSH
66260: LD_VAR 0 7
66264: PUSH
66265: LD_INT 1
66267: NEG
66268: MUL
66269: ST_TO_ADDR
// result := [ _x , _y ] ;
66270: LD_ADDR_VAR 0 5
66274: PUSH
66275: LD_VAR 0 6
66279: PUSH
66280: LD_VAR 0 7
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: ST_TO_ADDR
// end ;
66289: LD_VAR 0 5
66293: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66294: LD_INT 0
66296: PPUSH
66297: PPUSH
66298: PPUSH
66299: PPUSH
// task := GetTaskList ( unit ) ;
66300: LD_ADDR_VAR 0 7
66304: PUSH
66305: LD_VAR 0 1
66309: PPUSH
66310: CALL_OW 437
66314: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66315: LD_VAR 0 7
66319: NOT
66320: IFFALSE 66339
66322: PUSH
66323: LD_VAR 0 1
66327: PPUSH
66328: LD_VAR 0 2
66332: PPUSH
66333: CALL_OW 308
66337: NOT
66338: AND
66339: IFFALSE 66343
// exit ;
66341: GO 66461
// if IsInArea ( unit , area ) then
66343: LD_VAR 0 1
66347: PPUSH
66348: LD_VAR 0 2
66352: PPUSH
66353: CALL_OW 308
66357: IFFALSE 66375
// begin ComMoveToArea ( unit , goAway ) ;
66359: LD_VAR 0 1
66363: PPUSH
66364: LD_VAR 0 3
66368: PPUSH
66369: CALL_OW 113
// exit ;
66373: GO 66461
// end ; if task [ 1 ] [ 1 ] <> M then
66375: LD_VAR 0 7
66379: PUSH
66380: LD_INT 1
66382: ARRAY
66383: PUSH
66384: LD_INT 1
66386: ARRAY
66387: PUSH
66388: LD_STRING M
66390: NONEQUAL
66391: IFFALSE 66395
// exit ;
66393: GO 66461
// x := task [ 1 ] [ 2 ] ;
66395: LD_ADDR_VAR 0 5
66399: PUSH
66400: LD_VAR 0 7
66404: PUSH
66405: LD_INT 1
66407: ARRAY
66408: PUSH
66409: LD_INT 2
66411: ARRAY
66412: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66413: LD_ADDR_VAR 0 6
66417: PUSH
66418: LD_VAR 0 7
66422: PUSH
66423: LD_INT 1
66425: ARRAY
66426: PUSH
66427: LD_INT 3
66429: ARRAY
66430: ST_TO_ADDR
// if InArea ( x , y , area ) then
66431: LD_VAR 0 5
66435: PPUSH
66436: LD_VAR 0 6
66440: PPUSH
66441: LD_VAR 0 2
66445: PPUSH
66446: CALL_OW 309
66450: IFFALSE 66461
// ComStop ( unit ) ;
66452: LD_VAR 0 1
66456: PPUSH
66457: CALL_OW 141
// end ;
66461: LD_VAR 0 4
66465: RET
// export function Abs ( value ) ; begin
66466: LD_INT 0
66468: PPUSH
// result := value ;
66469: LD_ADDR_VAR 0 2
66473: PUSH
66474: LD_VAR 0 1
66478: ST_TO_ADDR
// if value < 0 then
66479: LD_VAR 0 1
66483: PUSH
66484: LD_INT 0
66486: LESS
66487: IFFALSE 66504
// result := value * - 1 ;
66489: LD_ADDR_VAR 0 2
66493: PUSH
66494: LD_VAR 0 1
66498: PUSH
66499: LD_INT 1
66501: NEG
66502: MUL
66503: ST_TO_ADDR
// end ;
66504: LD_VAR 0 2
66508: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66509: LD_INT 0
66511: PPUSH
66512: PPUSH
66513: PPUSH
66514: PPUSH
66515: PPUSH
66516: PPUSH
66517: PPUSH
66518: PPUSH
// if not unit or not building then
66519: LD_VAR 0 1
66523: NOT
66524: IFTRUE 66533
66526: PUSH
66527: LD_VAR 0 2
66531: NOT
66532: OR
66533: IFFALSE 66537
// exit ;
66535: GO 66765
// x := GetX ( building ) ;
66537: LD_ADDR_VAR 0 4
66541: PUSH
66542: LD_VAR 0 2
66546: PPUSH
66547: CALL_OW 250
66551: ST_TO_ADDR
// y := GetY ( building ) ;
66552: LD_ADDR_VAR 0 6
66556: PUSH
66557: LD_VAR 0 2
66561: PPUSH
66562: CALL_OW 251
66566: ST_TO_ADDR
// d := GetDir ( building ) ;
66567: LD_ADDR_VAR 0 8
66571: PUSH
66572: LD_VAR 0 2
66576: PPUSH
66577: CALL_OW 254
66581: ST_TO_ADDR
// r := 4 ;
66582: LD_ADDR_VAR 0 9
66586: PUSH
66587: LD_INT 4
66589: ST_TO_ADDR
// for i := 1 to 5 do
66590: LD_ADDR_VAR 0 10
66594: PUSH
66595: DOUBLE
66596: LD_INT 1
66598: DEC
66599: ST_TO_ADDR
66600: LD_INT 5
66602: PUSH
66603: FOR_TO
66604: IFFALSE 66763
// begin _x := ShiftX ( x , d , r + i ) ;
66606: LD_ADDR_VAR 0 5
66610: PUSH
66611: LD_VAR 0 4
66615: PPUSH
66616: LD_VAR 0 8
66620: PPUSH
66621: LD_VAR 0 9
66625: PUSH
66626: LD_VAR 0 10
66630: PLUS
66631: PPUSH
66632: CALL_OW 272
66636: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66637: LD_ADDR_VAR 0 7
66641: PUSH
66642: LD_VAR 0 6
66646: PPUSH
66647: LD_VAR 0 8
66651: PPUSH
66652: LD_VAR 0 9
66656: PUSH
66657: LD_VAR 0 10
66661: PLUS
66662: PPUSH
66663: CALL_OW 273
66667: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66668: LD_VAR 0 5
66672: PPUSH
66673: LD_VAR 0 7
66677: PPUSH
66678: CALL_OW 488
66682: IFFALSE 66717
66684: PUSH
66685: LD_VAR 0 5
66689: PPUSH
66690: LD_VAR 0 7
66694: PPUSH
66695: CALL_OW 428
66699: PPUSH
66700: CALL_OW 247
66704: PUSH
66705: LD_INT 3
66707: PUSH
66708: LD_INT 2
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: IN
66715: NOT
66716: AND
66717: IFFALSE 66761
// begin ComMoveXY ( unit , _x , _y ) ;
66719: LD_VAR 0 1
66723: PPUSH
66724: LD_VAR 0 5
66728: PPUSH
66729: LD_VAR 0 7
66733: PPUSH
66734: CALL_OW 111
// result := [ _x , _y ] ;
66738: LD_ADDR_VAR 0 3
66742: PUSH
66743: LD_VAR 0 5
66747: PUSH
66748: LD_VAR 0 7
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: ST_TO_ADDR
// exit ;
66757: POP
66758: POP
66759: GO 66765
// end ; end ;
66761: GO 66603
66763: POP
66764: POP
// end ;
66765: LD_VAR 0 3
66769: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66770: LD_INT 0
66772: PPUSH
66773: PPUSH
66774: PPUSH
// result := 0 ;
66775: LD_ADDR_VAR 0 3
66779: PUSH
66780: LD_INT 0
66782: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66783: LD_VAR 0 1
66787: PUSH
66788: LD_INT 0
66790: LESS
66791: IFTRUE 66803
66793: PUSH
66794: LD_VAR 0 1
66798: PUSH
66799: LD_INT 8
66801: GREATER
66802: OR
66803: IFTRUE 66815
66805: PUSH
66806: LD_VAR 0 2
66810: PUSH
66811: LD_INT 0
66813: LESS
66814: OR
66815: IFTRUE 66827
66817: PUSH
66818: LD_VAR 0 2
66822: PUSH
66823: LD_INT 8
66825: GREATER
66826: OR
66827: IFFALSE 66831
// exit ;
66829: GO 66906
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66831: LD_ADDR_VAR 0 4
66835: PUSH
66836: LD_INT 22
66838: PUSH
66839: LD_VAR 0 2
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PPUSH
66848: CALL_OW 69
66852: PUSH
66853: FOR_IN
66854: IFFALSE 66904
// begin un := UnitShoot ( i ) ;
66856: LD_ADDR_VAR 0 5
66860: PUSH
66861: LD_VAR 0 4
66865: PPUSH
66866: CALL_OW 504
66870: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66871: LD_VAR 0 5
66875: PPUSH
66876: CALL_OW 255
66880: PUSH
66881: LD_VAR 0 1
66885: EQUAL
66886: IFFALSE 66902
// begin result := un ;
66888: LD_ADDR_VAR 0 3
66892: PUSH
66893: LD_VAR 0 5
66897: ST_TO_ADDR
// exit ;
66898: POP
66899: POP
66900: GO 66906
// end ; end ;
66902: GO 66853
66904: POP
66905: POP
// end ;
66906: LD_VAR 0 3
66910: RET
// export function GetCargoBay ( units ) ; begin
66911: LD_INT 0
66913: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66914: LD_ADDR_VAR 0 2
66918: PUSH
66919: LD_VAR 0 1
66923: PPUSH
66924: LD_INT 2
66926: PUSH
66927: LD_INT 34
66929: PUSH
66930: LD_INT 12
66932: PUSH
66933: EMPTY
66934: LIST
66935: LIST
66936: PUSH
66937: LD_INT 34
66939: PUSH
66940: LD_INT 51
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PUSH
66947: LD_INT 34
66949: PUSH
66950: LD_INT 32
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PUSH
66957: LD_INT 34
66959: PUSH
66960: LD_INT 89
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: LIST
66971: LIST
66972: LIST
66973: PPUSH
66974: CALL_OW 72
66978: ST_TO_ADDR
// end ;
66979: LD_VAR 0 2
66983: RET
// export function Negate ( value ) ; begin
66984: LD_INT 0
66986: PPUSH
// result := not value ;
66987: LD_ADDR_VAR 0 2
66991: PUSH
66992: LD_VAR 0 1
66996: NOT
66997: ST_TO_ADDR
// end ;
66998: LD_VAR 0 2
67002: RET
// export function Inc ( value ) ; begin
67003: LD_INT 0
67005: PPUSH
// result := value + 1 ;
67006: LD_ADDR_VAR 0 2
67010: PUSH
67011: LD_VAR 0 1
67015: PUSH
67016: LD_INT 1
67018: PLUS
67019: ST_TO_ADDR
// end ;
67020: LD_VAR 0 2
67024: RET
// export function Dec ( value ) ; begin
67025: LD_INT 0
67027: PPUSH
// result := value - 1 ;
67028: LD_ADDR_VAR 0 2
67032: PUSH
67033: LD_VAR 0 1
67037: PUSH
67038: LD_INT 1
67040: MINUS
67041: ST_TO_ADDR
// end ;
67042: LD_VAR 0 2
67046: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67047: LD_INT 0
67049: PPUSH
67050: PPUSH
67051: PPUSH
67052: PPUSH
67053: PPUSH
67054: PPUSH
67055: PPUSH
67056: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67057: LD_VAR 0 1
67061: PPUSH
67062: LD_VAR 0 2
67066: PPUSH
67067: CALL_OW 488
67071: NOT
67072: IFTRUE 67091
67074: PUSH
67075: LD_VAR 0 3
67079: PPUSH
67080: LD_VAR 0 4
67084: PPUSH
67085: CALL_OW 488
67089: NOT
67090: OR
67091: IFFALSE 67104
// begin result := - 1 ;
67093: LD_ADDR_VAR 0 5
67097: PUSH
67098: LD_INT 1
67100: NEG
67101: ST_TO_ADDR
// exit ;
67102: GO 67339
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67104: LD_ADDR_VAR 0 12
67108: PUSH
67109: LD_VAR 0 1
67113: PPUSH
67114: LD_VAR 0 2
67118: PPUSH
67119: LD_VAR 0 3
67123: PPUSH
67124: LD_VAR 0 4
67128: PPUSH
67129: CALL 66175 0 4
67133: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67134: LD_ADDR_VAR 0 11
67138: PUSH
67139: LD_VAR 0 1
67143: PPUSH
67144: LD_VAR 0 2
67148: PPUSH
67149: LD_VAR 0 12
67153: PUSH
67154: LD_INT 1
67156: ARRAY
67157: PPUSH
67158: LD_VAR 0 12
67162: PUSH
67163: LD_INT 2
67165: ARRAY
67166: PPUSH
67167: CALL_OW 298
67171: ST_TO_ADDR
// distance := 9999 ;
67172: LD_ADDR_VAR 0 10
67176: PUSH
67177: LD_INT 9999
67179: ST_TO_ADDR
// for i := 0 to 5 do
67180: LD_ADDR_VAR 0 6
67184: PUSH
67185: DOUBLE
67186: LD_INT 0
67188: DEC
67189: ST_TO_ADDR
67190: LD_INT 5
67192: PUSH
67193: FOR_TO
67194: IFFALSE 67337
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67196: LD_ADDR_VAR 0 7
67200: PUSH
67201: LD_VAR 0 1
67205: PPUSH
67206: LD_VAR 0 6
67210: PPUSH
67211: LD_VAR 0 11
67215: PPUSH
67216: CALL_OW 272
67220: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67221: LD_ADDR_VAR 0 8
67225: PUSH
67226: LD_VAR 0 2
67230: PPUSH
67231: LD_VAR 0 6
67235: PPUSH
67236: LD_VAR 0 11
67240: PPUSH
67241: CALL_OW 273
67245: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67246: LD_VAR 0 7
67250: PPUSH
67251: LD_VAR 0 8
67255: PPUSH
67256: CALL_OW 488
67260: NOT
67261: IFFALSE 67265
// continue ;
67263: GO 67193
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67265: LD_ADDR_VAR 0 9
67269: PUSH
67270: LD_VAR 0 12
67274: PUSH
67275: LD_INT 1
67277: ARRAY
67278: PPUSH
67279: LD_VAR 0 12
67283: PUSH
67284: LD_INT 2
67286: ARRAY
67287: PPUSH
67288: LD_VAR 0 7
67292: PPUSH
67293: LD_VAR 0 8
67297: PPUSH
67298: CALL_OW 298
67302: ST_TO_ADDR
// if tmp < distance then
67303: LD_VAR 0 9
67307: PUSH
67308: LD_VAR 0 10
67312: LESS
67313: IFFALSE 67335
// begin result := i ;
67315: LD_ADDR_VAR 0 5
67319: PUSH
67320: LD_VAR 0 6
67324: ST_TO_ADDR
// distance := tmp ;
67325: LD_ADDR_VAR 0 10
67329: PUSH
67330: LD_VAR 0 9
67334: ST_TO_ADDR
// end ; end ;
67335: GO 67193
67337: POP
67338: POP
// end ;
67339: LD_VAR 0 5
67343: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67344: LD_INT 0
67346: PPUSH
67347: PPUSH
// if not driver or not IsInUnit ( driver ) then
67348: LD_VAR 0 1
67352: NOT
67353: IFTRUE 67367
67355: PUSH
67356: LD_VAR 0 1
67360: PPUSH
67361: CALL_OW 310
67365: NOT
67366: OR
67367: IFFALSE 67371
// exit ;
67369: GO 67461
// vehicle := IsInUnit ( driver ) ;
67371: LD_ADDR_VAR 0 3
67375: PUSH
67376: LD_VAR 0 1
67380: PPUSH
67381: CALL_OW 310
67385: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67386: LD_VAR 0 1
67390: PPUSH
67391: LD_STRING \
67393: PUSH
67394: LD_INT 0
67396: PUSH
67397: LD_INT 0
67399: PUSH
67400: LD_INT 0
67402: PUSH
67403: LD_INT 0
67405: PUSH
67406: LD_INT 0
67408: PUSH
67409: LD_INT 0
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: LIST
67416: LIST
67417: LIST
67418: LIST
67419: LIST
67420: PUSH
67421: LD_STRING E
67423: PUSH
67424: LD_INT 0
67426: PUSH
67427: LD_INT 0
67429: PUSH
67430: LD_VAR 0 3
67434: PUSH
67435: LD_INT 0
67437: PUSH
67438: LD_INT 0
67440: PUSH
67441: LD_INT 0
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: LIST
67448: LIST
67449: LIST
67450: LIST
67451: LIST
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PPUSH
67457: CALL_OW 446
// end ;
67461: LD_VAR 0 2
67465: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67466: LD_INT 0
67468: PPUSH
67469: PPUSH
// if not driver or not IsInUnit ( driver ) then
67470: LD_VAR 0 1
67474: NOT
67475: IFTRUE 67489
67477: PUSH
67478: LD_VAR 0 1
67482: PPUSH
67483: CALL_OW 310
67487: NOT
67488: OR
67489: IFFALSE 67493
// exit ;
67491: GO 67583
// vehicle := IsInUnit ( driver ) ;
67493: LD_ADDR_VAR 0 3
67497: PUSH
67498: LD_VAR 0 1
67502: PPUSH
67503: CALL_OW 310
67507: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67508: LD_VAR 0 1
67512: PPUSH
67513: LD_STRING \
67515: PUSH
67516: LD_INT 0
67518: PUSH
67519: LD_INT 0
67521: PUSH
67522: LD_INT 0
67524: PUSH
67525: LD_INT 0
67527: PUSH
67528: LD_INT 0
67530: PUSH
67531: LD_INT 0
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: LIST
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: PUSH
67543: LD_STRING E
67545: PUSH
67546: LD_INT 0
67548: PUSH
67549: LD_INT 0
67551: PUSH
67552: LD_VAR 0 3
67556: PUSH
67557: LD_INT 0
67559: PUSH
67560: LD_INT 0
67562: PUSH
67563: LD_INT 0
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: LIST
67570: LIST
67571: LIST
67572: LIST
67573: LIST
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PPUSH
67579: CALL_OW 447
// end ;
67583: LD_VAR 0 2
67587: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67588: LD_INT 0
67590: PPUSH
67591: PPUSH
67592: PPUSH
// tmp := [ ] ;
67593: LD_ADDR_VAR 0 5
67597: PUSH
67598: EMPTY
67599: ST_TO_ADDR
// for i in units do
67600: LD_ADDR_VAR 0 4
67604: PUSH
67605: LD_VAR 0 1
67609: PUSH
67610: FOR_IN
67611: IFFALSE 67649
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67613: LD_ADDR_VAR 0 5
67617: PUSH
67618: LD_VAR 0 5
67622: PPUSH
67623: LD_VAR 0 5
67627: PUSH
67628: LD_INT 1
67630: PLUS
67631: PPUSH
67632: LD_VAR 0 4
67636: PPUSH
67637: CALL_OW 256
67641: PPUSH
67642: CALL_OW 2
67646: ST_TO_ADDR
67647: GO 67610
67649: POP
67650: POP
// if not tmp then
67651: LD_VAR 0 5
67655: NOT
67656: IFFALSE 67660
// exit ;
67658: GO 67708
// if asc then
67660: LD_VAR 0 2
67664: IFFALSE 67688
// result := SortListByListAsc ( units , tmp ) else
67666: LD_ADDR_VAR 0 3
67670: PUSH
67671: LD_VAR 0 1
67675: PPUSH
67676: LD_VAR 0 5
67680: PPUSH
67681: CALL_OW 76
67685: ST_TO_ADDR
67686: GO 67708
// result := SortListByListDesc ( units , tmp ) ;
67688: LD_ADDR_VAR 0 3
67692: PUSH
67693: LD_VAR 0 1
67697: PPUSH
67698: LD_VAR 0 5
67702: PPUSH
67703: CALL_OW 77
67707: ST_TO_ADDR
// end ;
67708: LD_VAR 0 3
67712: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67713: LD_INT 0
67715: PPUSH
67716: PPUSH
// task := GetTaskList ( mech ) ;
67717: LD_ADDR_VAR 0 4
67721: PUSH
67722: LD_VAR 0 1
67726: PPUSH
67727: CALL_OW 437
67731: ST_TO_ADDR
// if not task then
67732: LD_VAR 0 4
67736: NOT
67737: IFFALSE 67741
// exit ;
67739: GO 67785
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67741: LD_ADDR_VAR 0 3
67745: PUSH
67746: LD_VAR 0 4
67750: PUSH
67751: LD_INT 1
67753: ARRAY
67754: PUSH
67755: LD_INT 1
67757: ARRAY
67758: PUSH
67759: LD_STRING r
67761: EQUAL
67762: IFFALSE 67784
67764: PUSH
67765: LD_VAR 0 4
67769: PUSH
67770: LD_INT 1
67772: ARRAY
67773: PUSH
67774: LD_INT 4
67776: ARRAY
67777: PUSH
67778: LD_VAR 0 2
67782: EQUAL
67783: AND
67784: ST_TO_ADDR
// end ;
67785: LD_VAR 0 3
67789: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67790: LD_INT 0
67792: PPUSH
// SetDir ( unit , d ) ;
67793: LD_VAR 0 1
67797: PPUSH
67798: LD_VAR 0 4
67802: PPUSH
67803: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
67807: LD_ADDR_VAR 0 6
67811: PUSH
67812: LD_VAR 0 1
67816: PPUSH
67817: LD_VAR 0 2
67821: PPUSH
67822: LD_VAR 0 3
67826: PPUSH
67827: LD_VAR 0 5
67831: PPUSH
67832: CALL_OW 48
67836: ST_TO_ADDR
// end ;
67837: LD_VAR 0 6
67841: RET
// export function ToNaturalNumber ( number ) ; begin
67842: LD_INT 0
67844: PPUSH
// result := number div 1 ;
67845: LD_ADDR_VAR 0 2
67849: PUSH
67850: LD_VAR 0 1
67854: PUSH
67855: LD_INT 1
67857: DIV
67858: ST_TO_ADDR
// if number < 0 then
67859: LD_VAR 0 1
67863: PUSH
67864: LD_INT 0
67866: LESS
67867: IFFALSE 67877
// result := 0 ;
67869: LD_ADDR_VAR 0 2
67873: PUSH
67874: LD_INT 0
67876: ST_TO_ADDR
// end ;
67877: LD_VAR 0 2
67881: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
67882: LD_INT 0
67884: PPUSH
67885: PPUSH
67886: PPUSH
// if not buildings then
67887: LD_VAR 0 1
67891: NOT
67892: IFFALSE 67896
// exit ;
67894: GO 68011
// tmp := [ ] ;
67896: LD_ADDR_VAR 0 5
67900: PUSH
67901: EMPTY
67902: ST_TO_ADDR
// for b in buildings do
67903: LD_ADDR_VAR 0 4
67907: PUSH
67908: LD_VAR 0 1
67912: PUSH
67913: FOR_IN
67914: IFFALSE 67952
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
67916: LD_ADDR_VAR 0 5
67920: PUSH
67921: LD_VAR 0 5
67925: PPUSH
67926: LD_VAR 0 5
67930: PUSH
67931: LD_INT 1
67933: PLUS
67934: PPUSH
67935: LD_VAR 0 4
67939: PPUSH
67940: CALL_OW 266
67944: PPUSH
67945: CALL_OW 1
67949: ST_TO_ADDR
67950: GO 67913
67952: POP
67953: POP
// if not tmp then
67954: LD_VAR 0 5
67958: NOT
67959: IFFALSE 67963
// exit ;
67961: GO 68011
// if asc then
67963: LD_VAR 0 2
67967: IFFALSE 67991
// result := SortListByListAsc ( buildings , tmp ) else
67969: LD_ADDR_VAR 0 3
67973: PUSH
67974: LD_VAR 0 1
67978: PPUSH
67979: LD_VAR 0 5
67983: PPUSH
67984: CALL_OW 76
67988: ST_TO_ADDR
67989: GO 68011
// result := SortListByListDesc ( buildings , tmp ) ;
67991: LD_ADDR_VAR 0 3
67995: PUSH
67996: LD_VAR 0 1
68000: PPUSH
68001: LD_VAR 0 5
68005: PPUSH
68006: CALL_OW 77
68010: ST_TO_ADDR
// end ;
68011: LD_VAR 0 3
68015: RET
// export function SortByClass ( units , class ) ; var un ; begin
68016: LD_INT 0
68018: PPUSH
68019: PPUSH
// if not units or not class then
68020: LD_VAR 0 1
68024: NOT
68025: IFTRUE 68034
68027: PUSH
68028: LD_VAR 0 2
68032: NOT
68033: OR
68034: IFFALSE 68038
// exit ;
68036: GO 68133
// result := [ ] ;
68038: LD_ADDR_VAR 0 3
68042: PUSH
68043: EMPTY
68044: ST_TO_ADDR
// for un in units do
68045: LD_ADDR_VAR 0 4
68049: PUSH
68050: LD_VAR 0 1
68054: PUSH
68055: FOR_IN
68056: IFFALSE 68131
// if GetClass ( un ) = class then
68058: LD_VAR 0 4
68062: PPUSH
68063: CALL_OW 257
68067: PUSH
68068: LD_VAR 0 2
68072: EQUAL
68073: IFFALSE 68100
// result := Insert ( result , 1 , un ) else
68075: LD_ADDR_VAR 0 3
68079: PUSH
68080: LD_VAR 0 3
68084: PPUSH
68085: LD_INT 1
68087: PPUSH
68088: LD_VAR 0 4
68092: PPUSH
68093: CALL_OW 2
68097: ST_TO_ADDR
68098: GO 68129
// result := Replace ( result , result + 1 , un ) ;
68100: LD_ADDR_VAR 0 3
68104: PUSH
68105: LD_VAR 0 3
68109: PPUSH
68110: LD_VAR 0 3
68114: PUSH
68115: LD_INT 1
68117: PLUS
68118: PPUSH
68119: LD_VAR 0 4
68123: PPUSH
68124: CALL_OW 1
68128: ST_TO_ADDR
68129: GO 68055
68131: POP
68132: POP
// end ;
68133: LD_VAR 0 3
68137: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68138: LD_INT 0
68140: PPUSH
68141: PPUSH
68142: PPUSH
68143: PPUSH
68144: PPUSH
68145: PPUSH
68146: PPUSH
// result := [ ] ;
68147: LD_ADDR_VAR 0 4
68151: PUSH
68152: EMPTY
68153: ST_TO_ADDR
// if x - r < 0 then
68154: LD_VAR 0 1
68158: PUSH
68159: LD_VAR 0 3
68163: MINUS
68164: PUSH
68165: LD_INT 0
68167: LESS
68168: IFFALSE 68180
// min_x := 0 else
68170: LD_ADDR_VAR 0 8
68174: PUSH
68175: LD_INT 0
68177: ST_TO_ADDR
68178: GO 68196
// min_x := x - r ;
68180: LD_ADDR_VAR 0 8
68184: PUSH
68185: LD_VAR 0 1
68189: PUSH
68190: LD_VAR 0 3
68194: MINUS
68195: ST_TO_ADDR
// if y - r < 0 then
68196: LD_VAR 0 2
68200: PUSH
68201: LD_VAR 0 3
68205: MINUS
68206: PUSH
68207: LD_INT 0
68209: LESS
68210: IFFALSE 68222
// min_y := 0 else
68212: LD_ADDR_VAR 0 7
68216: PUSH
68217: LD_INT 0
68219: ST_TO_ADDR
68220: GO 68238
// min_y := y - r ;
68222: LD_ADDR_VAR 0 7
68226: PUSH
68227: LD_VAR 0 2
68231: PUSH
68232: LD_VAR 0 3
68236: MINUS
68237: ST_TO_ADDR
// max_x := x + r ;
68238: LD_ADDR_VAR 0 9
68242: PUSH
68243: LD_VAR 0 1
68247: PUSH
68248: LD_VAR 0 3
68252: PLUS
68253: ST_TO_ADDR
// max_y := y + r ;
68254: LD_ADDR_VAR 0 10
68258: PUSH
68259: LD_VAR 0 2
68263: PUSH
68264: LD_VAR 0 3
68268: PLUS
68269: ST_TO_ADDR
// for _x = min_x to max_x do
68270: LD_ADDR_VAR 0 5
68274: PUSH
68275: DOUBLE
68276: LD_VAR 0 8
68280: DEC
68281: ST_TO_ADDR
68282: LD_VAR 0 9
68286: PUSH
68287: FOR_TO
68288: IFFALSE 68389
// for _y = min_y to max_y do
68290: LD_ADDR_VAR 0 6
68294: PUSH
68295: DOUBLE
68296: LD_VAR 0 7
68300: DEC
68301: ST_TO_ADDR
68302: LD_VAR 0 10
68306: PUSH
68307: FOR_TO
68308: IFFALSE 68385
// begin if not ValidHex ( _x , _y ) then
68310: LD_VAR 0 5
68314: PPUSH
68315: LD_VAR 0 6
68319: PPUSH
68320: CALL_OW 488
68324: NOT
68325: IFFALSE 68329
// continue ;
68327: GO 68307
// if GetResourceTypeXY ( _x , _y ) then
68329: LD_VAR 0 5
68333: PPUSH
68334: LD_VAR 0 6
68338: PPUSH
68339: CALL_OW 283
68343: IFFALSE 68383
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68345: LD_ADDR_VAR 0 4
68349: PUSH
68350: LD_VAR 0 4
68354: PPUSH
68355: LD_VAR 0 4
68359: PUSH
68360: LD_INT 1
68362: PLUS
68363: PPUSH
68364: LD_VAR 0 5
68368: PUSH
68369: LD_VAR 0 6
68373: PUSH
68374: EMPTY
68375: LIST
68376: LIST
68377: PPUSH
68378: CALL_OW 1
68382: ST_TO_ADDR
// end ;
68383: GO 68307
68385: POP
68386: POP
68387: GO 68287
68389: POP
68390: POP
// end ;
68391: LD_VAR 0 4
68395: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68396: LD_INT 0
68398: PPUSH
68399: PPUSH
68400: PPUSH
68401: PPUSH
68402: PPUSH
68403: PPUSH
68404: PPUSH
68405: PPUSH
// if not units then
68406: LD_VAR 0 1
68410: NOT
68411: IFFALSE 68415
// exit ;
68413: GO 68947
// result := UnitFilter ( units , [ f_ok ] ) ;
68415: LD_ADDR_VAR 0 3
68419: PUSH
68420: LD_VAR 0 1
68424: PPUSH
68425: LD_INT 50
68427: PUSH
68428: EMPTY
68429: LIST
68430: PPUSH
68431: CALL_OW 72
68435: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68436: LD_ADDR_VAR 0 8
68440: PUSH
68441: LD_VAR 0 1
68445: PUSH
68446: LD_INT 1
68448: ARRAY
68449: PPUSH
68450: CALL_OW 255
68454: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68455: LD_ADDR_VAR 0 10
68459: PUSH
68460: LD_INT 29
68462: PUSH
68463: LD_INT 91
68465: PUSH
68466: LD_INT 49
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: LIST
68473: ST_TO_ADDR
// if not result then
68474: LD_VAR 0 3
68478: NOT
68479: IFFALSE 68483
// exit ;
68481: GO 68947
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68483: LD_ADDR_VAR 0 5
68487: PUSH
68488: LD_INT 81
68490: PUSH
68491: LD_VAR 0 8
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: PPUSH
68500: CALL_OW 69
68504: ST_TO_ADDR
// for i in result do
68505: LD_ADDR_VAR 0 4
68509: PUSH
68510: LD_VAR 0 3
68514: PUSH
68515: FOR_IN
68516: IFFALSE 68945
// begin tag := GetTag ( i ) + 1 ;
68518: LD_ADDR_VAR 0 9
68522: PUSH
68523: LD_VAR 0 4
68527: PPUSH
68528: CALL_OW 110
68532: PUSH
68533: LD_INT 1
68535: PLUS
68536: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
68537: LD_ADDR_VAR 0 7
68541: PUSH
68542: LD_VAR 0 4
68546: PPUSH
68547: CALL_OW 250
68551: PPUSH
68552: LD_VAR 0 4
68556: PPUSH
68557: CALL_OW 251
68561: PPUSH
68562: LD_INT 4
68564: PPUSH
68565: CALL 68138 0 3
68569: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
68570: LD_VAR 0 4
68574: PPUSH
68575: CALL_OW 247
68579: PUSH
68580: LD_INT 2
68582: EQUAL
68583: IFFALSE 68595
68585: PUSH
68586: LD_VAR 0 7
68590: PUSH
68591: LD_INT 2
68593: GREATER
68594: AND
68595: IFFALSE 68615
68597: PUSH
68598: LD_VAR 0 4
68602: PPUSH
68603: CALL_OW 264
68607: PUSH
68608: LD_VAR 0 10
68612: IN
68613: NOT
68614: AND
68615: IFFALSE 68654
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68617: LD_VAR 0 4
68621: PPUSH
68622: LD_VAR 0 7
68626: PUSH
68627: LD_INT 1
68629: ARRAY
68630: PUSH
68631: LD_INT 1
68633: ARRAY
68634: PPUSH
68635: LD_VAR 0 7
68639: PUSH
68640: LD_INT 1
68642: ARRAY
68643: PUSH
68644: LD_INT 2
68646: ARRAY
68647: PPUSH
68648: CALL_OW 116
68652: GO 68943
// if path > tag then
68654: LD_VAR 0 2
68658: PUSH
68659: LD_VAR 0 9
68663: GREATER
68664: IFFALSE 68872
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
68666: LD_ADDR_VAR 0 6
68670: PUSH
68671: LD_VAR 0 5
68675: PPUSH
68676: LD_INT 91
68678: PUSH
68679: LD_VAR 0 4
68683: PUSH
68684: LD_INT 8
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: LIST
68691: PPUSH
68692: CALL_OW 72
68696: ST_TO_ADDR
// if nearEnemy then
68697: LD_VAR 0 6
68701: IFFALSE 68770
// begin if GetWeapon ( i ) = ru_time_lapser then
68703: LD_VAR 0 4
68707: PPUSH
68708: CALL_OW 264
68712: PUSH
68713: LD_INT 49
68715: EQUAL
68716: IFFALSE 68744
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68718: LD_VAR 0 4
68722: PPUSH
68723: LD_VAR 0 6
68727: PPUSH
68728: LD_VAR 0 4
68732: PPUSH
68733: CALL_OW 74
68737: PPUSH
68738: CALL_OW 112
68742: GO 68768
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
68744: LD_VAR 0 4
68748: PPUSH
68749: LD_VAR 0 6
68753: PPUSH
68754: LD_VAR 0 4
68758: PPUSH
68759: CALL_OW 74
68763: PPUSH
68764: CALL 70028 0 2
// end else
68768: GO 68870
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68770: LD_VAR 0 4
68774: PPUSH
68775: LD_VAR 0 2
68779: PUSH
68780: LD_VAR 0 9
68784: ARRAY
68785: PUSH
68786: LD_INT 1
68788: ARRAY
68789: PPUSH
68790: LD_VAR 0 2
68794: PUSH
68795: LD_VAR 0 9
68799: ARRAY
68800: PUSH
68801: LD_INT 2
68803: ARRAY
68804: PPUSH
68805: CALL_OW 297
68809: PUSH
68810: LD_INT 6
68812: GREATER
68813: IFFALSE 68856
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68815: LD_VAR 0 4
68819: PPUSH
68820: LD_VAR 0 2
68824: PUSH
68825: LD_VAR 0 9
68829: ARRAY
68830: PUSH
68831: LD_INT 1
68833: ARRAY
68834: PPUSH
68835: LD_VAR 0 2
68839: PUSH
68840: LD_VAR 0 9
68844: ARRAY
68845: PUSH
68846: LD_INT 2
68848: ARRAY
68849: PPUSH
68850: CALL_OW 114
68854: GO 68870
// SetTag ( i , tag ) ;
68856: LD_VAR 0 4
68860: PPUSH
68861: LD_VAR 0 9
68865: PPUSH
68866: CALL_OW 109
// end else
68870: GO 68943
// if enemy then
68872: LD_VAR 0 5
68876: IFFALSE 68943
// begin if GetWeapon ( i ) = ru_time_lapser then
68878: LD_VAR 0 4
68882: PPUSH
68883: CALL_OW 264
68887: PUSH
68888: LD_INT 49
68890: EQUAL
68891: IFFALSE 68919
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68893: LD_VAR 0 4
68897: PPUSH
68898: LD_VAR 0 5
68902: PPUSH
68903: LD_VAR 0 4
68907: PPUSH
68908: CALL_OW 74
68912: PPUSH
68913: CALL_OW 112
68917: GO 68943
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68919: LD_VAR 0 4
68923: PPUSH
68924: LD_VAR 0 5
68928: PPUSH
68929: LD_VAR 0 4
68933: PPUSH
68934: CALL_OW 74
68938: PPUSH
68939: CALL 70028 0 2
// end ; end ;
68943: GO 68515
68945: POP
68946: POP
// end ;
68947: LD_VAR 0 3
68951: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68952: LD_INT 0
68954: PPUSH
68955: PPUSH
68956: PPUSH
// if not unit or IsInUnit ( unit ) then
68957: LD_VAR 0 1
68961: NOT
68962: IFTRUE 68975
68964: PUSH
68965: LD_VAR 0 1
68969: PPUSH
68970: CALL_OW 310
68974: OR
68975: IFFALSE 68979
// exit ;
68977: GO 69070
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68979: LD_ADDR_VAR 0 4
68983: PUSH
68984: LD_VAR 0 1
68988: PPUSH
68989: CALL_OW 250
68993: PPUSH
68994: LD_VAR 0 2
68998: PPUSH
68999: LD_INT 1
69001: PPUSH
69002: CALL_OW 272
69006: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69007: LD_ADDR_VAR 0 5
69011: PUSH
69012: LD_VAR 0 1
69016: PPUSH
69017: CALL_OW 251
69021: PPUSH
69022: LD_VAR 0 2
69026: PPUSH
69027: LD_INT 1
69029: PPUSH
69030: CALL_OW 273
69034: ST_TO_ADDR
// if ValidHex ( x , y ) then
69035: LD_VAR 0 4
69039: PPUSH
69040: LD_VAR 0 5
69044: PPUSH
69045: CALL_OW 488
69049: IFFALSE 69070
// ComTurnXY ( unit , x , y ) ;
69051: LD_VAR 0 1
69055: PPUSH
69056: LD_VAR 0 4
69060: PPUSH
69061: LD_VAR 0 5
69065: PPUSH
69066: CALL_OW 118
// end ;
69070: LD_VAR 0 3
69074: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69075: LD_INT 0
69077: PPUSH
69078: PPUSH
// result := false ;
69079: LD_ADDR_VAR 0 3
69083: PUSH
69084: LD_INT 0
69086: ST_TO_ADDR
// if not units then
69087: LD_VAR 0 2
69091: NOT
69092: IFFALSE 69096
// exit ;
69094: GO 69141
// for i in units do
69096: LD_ADDR_VAR 0 4
69100: PUSH
69101: LD_VAR 0 2
69105: PUSH
69106: FOR_IN
69107: IFFALSE 69139
// if See ( side , i ) then
69109: LD_VAR 0 1
69113: PPUSH
69114: LD_VAR 0 4
69118: PPUSH
69119: CALL_OW 292
69123: IFFALSE 69137
// begin result := true ;
69125: LD_ADDR_VAR 0 3
69129: PUSH
69130: LD_INT 1
69132: ST_TO_ADDR
// exit ;
69133: POP
69134: POP
69135: GO 69141
// end ;
69137: GO 69106
69139: POP
69140: POP
// end ;
69141: LD_VAR 0 3
69145: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69146: LD_INT 0
69148: PPUSH
69149: PPUSH
69150: PPUSH
69151: PPUSH
// if not unit or not points then
69152: LD_VAR 0 1
69156: NOT
69157: IFTRUE 69166
69159: PUSH
69160: LD_VAR 0 2
69164: NOT
69165: OR
69166: IFFALSE 69170
// exit ;
69168: GO 69260
// dist := 99999 ;
69170: LD_ADDR_VAR 0 5
69174: PUSH
69175: LD_INT 99999
69177: ST_TO_ADDR
// for i in points do
69178: LD_ADDR_VAR 0 4
69182: PUSH
69183: LD_VAR 0 2
69187: PUSH
69188: FOR_IN
69189: IFFALSE 69258
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69191: LD_ADDR_VAR 0 6
69195: PUSH
69196: LD_VAR 0 1
69200: PPUSH
69201: LD_VAR 0 4
69205: PUSH
69206: LD_INT 1
69208: ARRAY
69209: PPUSH
69210: LD_VAR 0 4
69214: PUSH
69215: LD_INT 2
69217: ARRAY
69218: PPUSH
69219: CALL_OW 297
69223: ST_TO_ADDR
// if tmpDist < dist then
69224: LD_VAR 0 6
69228: PUSH
69229: LD_VAR 0 5
69233: LESS
69234: IFFALSE 69256
// begin result := i ;
69236: LD_ADDR_VAR 0 3
69240: PUSH
69241: LD_VAR 0 4
69245: ST_TO_ADDR
// dist := tmpDist ;
69246: LD_ADDR_VAR 0 5
69250: PUSH
69251: LD_VAR 0 6
69255: ST_TO_ADDR
// end ; end ;
69256: GO 69188
69258: POP
69259: POP
// end ;
69260: LD_VAR 0 3
69264: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69265: LD_INT 0
69267: PPUSH
// uc_side := side ;
69268: LD_ADDR_OWVAR 20
69272: PUSH
69273: LD_VAR 0 1
69277: ST_TO_ADDR
// uc_nation := 3 ;
69278: LD_ADDR_OWVAR 21
69282: PUSH
69283: LD_INT 3
69285: ST_TO_ADDR
// vc_chassis := 25 ;
69286: LD_ADDR_OWVAR 37
69290: PUSH
69291: LD_INT 25
69293: ST_TO_ADDR
// vc_engine := engine_siberite ;
69294: LD_ADDR_OWVAR 39
69298: PUSH
69299: LD_INT 3
69301: ST_TO_ADDR
// vc_control := control_computer ;
69302: LD_ADDR_OWVAR 38
69306: PUSH
69307: LD_INT 3
69309: ST_TO_ADDR
// vc_weapon := 59 ;
69310: LD_ADDR_OWVAR 40
69314: PUSH
69315: LD_INT 59
69317: ST_TO_ADDR
// result := CreateVehicle ;
69318: LD_ADDR_VAR 0 5
69322: PUSH
69323: CALL_OW 45
69327: ST_TO_ADDR
// SetDir ( result , d ) ;
69328: LD_VAR 0 5
69332: PPUSH
69333: LD_VAR 0 4
69337: PPUSH
69338: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69342: LD_VAR 0 5
69346: PPUSH
69347: LD_VAR 0 2
69351: PPUSH
69352: LD_VAR 0 3
69356: PPUSH
69357: LD_INT 0
69359: PPUSH
69360: CALL_OW 48
// end ;
69364: LD_VAR 0 5
69368: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69369: LD_INT 0
69371: PPUSH
69372: PPUSH
69373: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69374: LD_ADDR_VAR 0 2
69378: PUSH
69379: LD_INT 0
69381: PUSH
69382: LD_INT 0
69384: PUSH
69385: LD_INT 0
69387: PUSH
69388: LD_INT 0
69390: PUSH
69391: EMPTY
69392: LIST
69393: LIST
69394: LIST
69395: LIST
69396: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69397: LD_VAR 0 1
69401: NOT
69402: IFTRUE 69435
69404: PUSH
69405: LD_VAR 0 1
69409: PPUSH
69410: CALL_OW 264
69414: PUSH
69415: LD_INT 12
69417: PUSH
69418: LD_INT 51
69420: PUSH
69421: LD_INT 32
69423: PUSH
69424: LD_INT 89
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: LIST
69431: LIST
69432: IN
69433: NOT
69434: OR
69435: IFFALSE 69439
// exit ;
69437: GO 69537
// for i := 1 to 3 do
69439: LD_ADDR_VAR 0 3
69443: PUSH
69444: DOUBLE
69445: LD_INT 1
69447: DEC
69448: ST_TO_ADDR
69449: LD_INT 3
69451: PUSH
69452: FOR_TO
69453: IFFALSE 69535
// begin tmp := GetCargo ( cargo , i ) ;
69455: LD_ADDR_VAR 0 4
69459: PUSH
69460: LD_VAR 0 1
69464: PPUSH
69465: LD_VAR 0 3
69469: PPUSH
69470: CALL_OW 289
69474: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69475: LD_ADDR_VAR 0 2
69479: PUSH
69480: LD_VAR 0 2
69484: PPUSH
69485: LD_VAR 0 3
69489: PPUSH
69490: LD_VAR 0 4
69494: PPUSH
69495: CALL_OW 1
69499: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69500: LD_ADDR_VAR 0 2
69504: PUSH
69505: LD_VAR 0 2
69509: PPUSH
69510: LD_INT 4
69512: PPUSH
69513: LD_VAR 0 2
69517: PUSH
69518: LD_INT 4
69520: ARRAY
69521: PUSH
69522: LD_VAR 0 4
69526: PLUS
69527: PPUSH
69528: CALL_OW 1
69532: ST_TO_ADDR
// end ;
69533: GO 69452
69535: POP
69536: POP
// end ;
69537: LD_VAR 0 2
69541: RET
// export function Length ( array ) ; begin
69542: LD_INT 0
69544: PPUSH
// result := array + 0 ;
69545: LD_ADDR_VAR 0 2
69549: PUSH
69550: LD_VAR 0 1
69554: PUSH
69555: LD_INT 0
69557: PLUS
69558: ST_TO_ADDR
// end ;
69559: LD_VAR 0 2
69563: RET
// export function PrepareArray ( array ) ; begin
69564: LD_INT 0
69566: PPUSH
// result := array diff 0 ;
69567: LD_ADDR_VAR 0 2
69571: PUSH
69572: LD_VAR 0 1
69576: PUSH
69577: LD_INT 0
69579: DIFF
69580: ST_TO_ADDR
// if not result [ 1 ] then
69581: LD_VAR 0 2
69585: PUSH
69586: LD_INT 1
69588: ARRAY
69589: NOT
69590: IFFALSE 69610
// result := Delete ( result , 1 ) ;
69592: LD_ADDR_VAR 0 2
69596: PUSH
69597: LD_VAR 0 2
69601: PPUSH
69602: LD_INT 1
69604: PPUSH
69605: CALL_OW 3
69609: ST_TO_ADDR
// end ;
69610: LD_VAR 0 2
69614: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
69615: LD_INT 0
69617: PPUSH
69618: PPUSH
69619: PPUSH
69620: PPUSH
// sibRocketRange := 25 ;
69621: LD_ADDR_VAR 0 6
69625: PUSH
69626: LD_INT 25
69628: ST_TO_ADDR
// result := false ;
69629: LD_ADDR_VAR 0 4
69633: PUSH
69634: LD_INT 0
69636: ST_TO_ADDR
// for i := 0 to 5 do
69637: LD_ADDR_VAR 0 5
69641: PUSH
69642: DOUBLE
69643: LD_INT 0
69645: DEC
69646: ST_TO_ADDR
69647: LD_INT 5
69649: PUSH
69650: FOR_TO
69651: IFFALSE 69718
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
69653: LD_VAR 0 1
69657: PPUSH
69658: LD_VAR 0 5
69662: PPUSH
69663: LD_VAR 0 6
69667: PPUSH
69668: CALL_OW 272
69672: PPUSH
69673: LD_VAR 0 2
69677: PPUSH
69678: LD_VAR 0 5
69682: PPUSH
69683: LD_VAR 0 6
69687: PPUSH
69688: CALL_OW 273
69692: PPUSH
69693: LD_VAR 0 3
69697: PPUSH
69698: CALL_OW 309
69702: IFFALSE 69716
// begin result := true ;
69704: LD_ADDR_VAR 0 4
69708: PUSH
69709: LD_INT 1
69711: ST_TO_ADDR
// exit ;
69712: POP
69713: POP
69714: GO 69720
// end ;
69716: GO 69650
69718: POP
69719: POP
// end ;
69720: LD_VAR 0 4
69724: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
69725: LD_INT 0
69727: PPUSH
69728: PPUSH
69729: PPUSH
// if btype = b_depot then
69730: LD_VAR 0 2
69734: PUSH
69735: LD_INT 0
69737: EQUAL
69738: IFFALSE 69750
// begin result := true ;
69740: LD_ADDR_VAR 0 3
69744: PUSH
69745: LD_INT 1
69747: ST_TO_ADDR
// exit ;
69748: GO 69870
// end ; pom := GetBase ( depot ) ;
69750: LD_ADDR_VAR 0 4
69754: PUSH
69755: LD_VAR 0 1
69759: PPUSH
69760: CALL_OW 274
69764: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
69765: LD_ADDR_VAR 0 5
69769: PUSH
69770: LD_VAR 0 2
69774: PPUSH
69775: LD_VAR 0 1
69779: PPUSH
69780: CALL_OW 248
69784: PPUSH
69785: CALL_OW 450
69789: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
69790: LD_ADDR_VAR 0 3
69794: PUSH
69795: LD_VAR 0 4
69799: PPUSH
69800: LD_INT 1
69802: PPUSH
69803: CALL_OW 275
69807: PUSH
69808: LD_VAR 0 5
69812: PUSH
69813: LD_INT 1
69815: ARRAY
69816: GREATEREQUAL
69817: IFFALSE 69843
69819: PUSH
69820: LD_VAR 0 4
69824: PPUSH
69825: LD_INT 2
69827: PPUSH
69828: CALL_OW 275
69832: PUSH
69833: LD_VAR 0 5
69837: PUSH
69838: LD_INT 2
69840: ARRAY
69841: GREATEREQUAL
69842: AND
69843: IFFALSE 69869
69845: PUSH
69846: LD_VAR 0 4
69850: PPUSH
69851: LD_INT 3
69853: PPUSH
69854: CALL_OW 275
69858: PUSH
69859: LD_VAR 0 5
69863: PUSH
69864: LD_INT 3
69866: ARRAY
69867: GREATEREQUAL
69868: AND
69869: ST_TO_ADDR
// end ;
69870: LD_VAR 0 3
69874: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
69875: LD_INT 0
69877: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
69878: LD_VAR 0 1
69882: PPUSH
69883: LD_VAR 0 2
69887: PPUSH
69888: LD_INT 0
69890: PPUSH
69891: LD_INT 0
69893: PPUSH
69894: LD_INT 1
69896: PPUSH
69897: LD_INT 0
69899: PPUSH
69900: CALL_OW 587
// end ;
69904: LD_VAR 0 3
69908: RET
// export function CenterOnNow ( unit ) ; begin
69909: LD_INT 0
69911: PPUSH
// result := IsInUnit ( unit ) ;
69912: LD_ADDR_VAR 0 2
69916: PUSH
69917: LD_VAR 0 1
69921: PPUSH
69922: CALL_OW 310
69926: ST_TO_ADDR
// if not result then
69927: LD_VAR 0 2
69931: NOT
69932: IFFALSE 69944
// result := unit ;
69934: LD_ADDR_VAR 0 2
69938: PUSH
69939: LD_VAR 0 1
69943: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
69944: LD_VAR 0 1
69948: PPUSH
69949: CALL_OW 87
// end ;
69953: LD_VAR 0 2
69957: RET
// export function ComMoveHex ( unit , hex ) ; begin
69958: LD_INT 0
69960: PPUSH
// if not hex then
69961: LD_VAR 0 2
69965: NOT
69966: IFFALSE 69970
// exit ;
69968: GO 70023
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
69970: LD_VAR 0 2
69974: PUSH
69975: LD_INT 1
69977: ARRAY
69978: PPUSH
69979: LD_VAR 0 2
69983: PUSH
69984: LD_INT 2
69986: ARRAY
69987: PPUSH
69988: CALL_OW 428
69992: IFFALSE 69996
// exit ;
69994: GO 70023
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
69996: LD_VAR 0 1
70000: PPUSH
70001: LD_VAR 0 2
70005: PUSH
70006: LD_INT 1
70008: ARRAY
70009: PPUSH
70010: LD_VAR 0 2
70014: PUSH
70015: LD_INT 2
70017: ARRAY
70018: PPUSH
70019: CALL_OW 111
// end ;
70023: LD_VAR 0 3
70027: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
70028: LD_INT 0
70030: PPUSH
70031: PPUSH
70032: PPUSH
// if not unit or not enemy then
70033: LD_VAR 0 1
70037: NOT
70038: IFTRUE 70047
70040: PUSH
70041: LD_VAR 0 2
70045: NOT
70046: OR
70047: IFFALSE 70051
// exit ;
70049: GO 70177
// x := GetX ( enemy ) ;
70051: LD_ADDR_VAR 0 4
70055: PUSH
70056: LD_VAR 0 2
70060: PPUSH
70061: CALL_OW 250
70065: ST_TO_ADDR
// y := GetY ( enemy ) ;
70066: LD_ADDR_VAR 0 5
70070: PUSH
70071: LD_VAR 0 2
70075: PPUSH
70076: CALL_OW 251
70080: ST_TO_ADDR
// if ValidHex ( x , y ) then
70081: LD_VAR 0 4
70085: PPUSH
70086: LD_VAR 0 5
70090: PPUSH
70091: CALL_OW 488
70095: IFFALSE 70177
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
70097: LD_VAR 0 2
70101: PPUSH
70102: CALL_OW 247
70106: PUSH
70107: LD_INT 3
70109: PUSH
70110: LD_INT 2
70112: PUSH
70113: EMPTY
70114: LIST
70115: LIST
70116: IN
70117: IFTRUE 70140
70119: PUSH
70120: LD_VAR 0 1
70124: PPUSH
70125: CALL_OW 255
70129: PPUSH
70130: LD_VAR 0 2
70134: PPUSH
70135: CALL_OW 292
70139: OR
70140: IFFALSE 70158
// ComAttackUnit ( unit , enemy ) else
70142: LD_VAR 0 1
70146: PPUSH
70147: LD_VAR 0 2
70151: PPUSH
70152: CALL_OW 115
70156: GO 70177
// ComAgressiveMove ( unit , x , y ) ;
70158: LD_VAR 0 1
70162: PPUSH
70163: LD_VAR 0 4
70167: PPUSH
70168: LD_VAR 0 5
70172: PPUSH
70173: CALL_OW 114
// end ;
70177: LD_VAR 0 3
70181: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
70182: LD_INT 0
70184: PPUSH
70185: PPUSH
70186: PPUSH
// list := AreaToList ( area , 0 ) ;
70187: LD_ADDR_VAR 0 5
70191: PUSH
70192: LD_VAR 0 1
70196: PPUSH
70197: LD_INT 0
70199: PPUSH
70200: CALL_OW 517
70204: ST_TO_ADDR
// if not list then
70205: LD_VAR 0 5
70209: NOT
70210: IFFALSE 70214
// exit ;
70212: GO 70344
// if all then
70214: LD_VAR 0 2
70218: IFFALSE 70306
// begin for i := 1 to list [ 1 ] do
70220: LD_ADDR_VAR 0 4
70224: PUSH
70225: DOUBLE
70226: LD_INT 1
70228: DEC
70229: ST_TO_ADDR
70230: LD_VAR 0 5
70234: PUSH
70235: LD_INT 1
70237: ARRAY
70238: PUSH
70239: FOR_TO
70240: IFFALSE 70302
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
70242: LD_ADDR_VAR 0 3
70246: PUSH
70247: LD_VAR 0 3
70251: PPUSH
70252: LD_VAR 0 3
70256: PUSH
70257: LD_INT 1
70259: PLUS
70260: PPUSH
70261: LD_VAR 0 5
70265: PUSH
70266: LD_INT 1
70268: ARRAY
70269: PUSH
70270: LD_VAR 0 4
70274: ARRAY
70275: PUSH
70276: LD_VAR 0 5
70280: PUSH
70281: LD_INT 2
70283: ARRAY
70284: PUSH
70285: LD_VAR 0 4
70289: ARRAY
70290: PUSH
70291: EMPTY
70292: LIST
70293: LIST
70294: PPUSH
70295: CALL_OW 1
70299: ST_TO_ADDR
70300: GO 70239
70302: POP
70303: POP
// exit ;
70304: GO 70344
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
70306: LD_ADDR_VAR 0 3
70310: PUSH
70311: LD_VAR 0 5
70315: PUSH
70316: LD_INT 1
70318: ARRAY
70319: PUSH
70320: LD_INT 1
70322: ARRAY
70323: PUSH
70324: LD_VAR 0 5
70328: PUSH
70329: LD_INT 2
70331: ARRAY
70332: PUSH
70333: LD_INT 1
70335: ARRAY
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PUSH
70341: EMPTY
70342: LIST
70343: ST_TO_ADDR
// end ;
70344: LD_VAR 0 3
70348: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
70349: LD_INT 0
70351: PPUSH
70352: PPUSH
// list := AreaToList ( area , 0 ) ;
70353: LD_ADDR_VAR 0 4
70357: PUSH
70358: LD_VAR 0 1
70362: PPUSH
70363: LD_INT 0
70365: PPUSH
70366: CALL_OW 517
70370: ST_TO_ADDR
// if not list then
70371: LD_VAR 0 4
70375: NOT
70376: IFFALSE 70380
// exit ;
70378: GO 70421
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
70380: LD_ADDR_VAR 0 3
70384: PUSH
70385: LD_VAR 0 4
70389: PUSH
70390: LD_INT 1
70392: ARRAY
70393: PUSH
70394: LD_INT 1
70396: ARRAY
70397: PUSH
70398: LD_VAR 0 4
70402: PUSH
70403: LD_INT 2
70405: ARRAY
70406: PUSH
70407: LD_INT 1
70409: ARRAY
70410: PUSH
70411: LD_VAR 0 2
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: LIST
70420: ST_TO_ADDR
// end ;
70421: LD_VAR 0 3
70425: RET
// export function First ( array ) ; begin
70426: LD_INT 0
70428: PPUSH
// if not array then
70429: LD_VAR 0 1
70433: NOT
70434: IFFALSE 70438
// exit ;
70436: GO 70452
// result := array [ 1 ] ;
70438: LD_ADDR_VAR 0 2
70442: PUSH
70443: LD_VAR 0 1
70447: PUSH
70448: LD_INT 1
70450: ARRAY
70451: ST_TO_ADDR
// end ;
70452: LD_VAR 0 2
70456: RET
// export function Last ( array ) ; begin
70457: LD_INT 0
70459: PPUSH
// if not array then
70460: LD_VAR 0 1
70464: NOT
70465: IFFALSE 70469
// exit ;
70467: GO 70485
// result := array [ array ] ;
70469: LD_ADDR_VAR 0 2
70473: PUSH
70474: LD_VAR 0 1
70478: PUSH
70479: LD_VAR 0 1
70483: ARRAY
70484: ST_TO_ADDR
// end ;
70485: LD_VAR 0 2
70489: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
70490: LD_INT 0
70492: PPUSH
70493: PPUSH
// result := [ ] ;
70494: LD_ADDR_VAR 0 5
70498: PUSH
70499: EMPTY
70500: ST_TO_ADDR
// if not array then
70501: LD_VAR 0 1
70505: NOT
70506: IFFALSE 70510
// exit ;
70508: GO 70622
// for i := 1 to array do
70510: LD_ADDR_VAR 0 6
70514: PUSH
70515: DOUBLE
70516: LD_INT 1
70518: DEC
70519: ST_TO_ADDR
70520: LD_VAR 0 1
70524: PUSH
70525: FOR_TO
70526: IFFALSE 70620
// if array [ i ] [ index ] = value then
70528: LD_VAR 0 1
70532: PUSH
70533: LD_VAR 0 6
70537: ARRAY
70538: PUSH
70539: LD_VAR 0 2
70543: ARRAY
70544: PUSH
70545: LD_VAR 0 3
70549: EQUAL
70550: IFFALSE 70618
// begin if indexColumn then
70552: LD_VAR 0 4
70556: IFFALSE 70592
// result := Join ( result , array [ i ] [ indexColumn ] ) else
70558: LD_ADDR_VAR 0 5
70562: PUSH
70563: LD_VAR 0 5
70567: PPUSH
70568: LD_VAR 0 1
70572: PUSH
70573: LD_VAR 0 6
70577: ARRAY
70578: PUSH
70579: LD_VAR 0 4
70583: ARRAY
70584: PPUSH
70585: CALL 65630 0 2
70589: ST_TO_ADDR
70590: GO 70618
// result := Join ( result , array [ i ] ) ;
70592: LD_ADDR_VAR 0 5
70596: PUSH
70597: LD_VAR 0 5
70601: PPUSH
70602: LD_VAR 0 1
70606: PUSH
70607: LD_VAR 0 6
70611: ARRAY
70612: PPUSH
70613: CALL 65630 0 2
70617: ST_TO_ADDR
// end ;
70618: GO 70525
70620: POP
70621: POP
// end ;
70622: LD_VAR 0 5
70626: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
70627: LD_INT 0
70629: PPUSH
// if not vehicles or not parkingPoint then
70630: LD_VAR 0 1
70634: NOT
70635: IFTRUE 70644
70637: PUSH
70638: LD_VAR 0 2
70642: NOT
70643: OR
70644: IFFALSE 70648
// exit ;
70646: GO 70746
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
70648: LD_ADDR_VAR 0 1
70652: PUSH
70653: LD_VAR 0 1
70657: PPUSH
70658: LD_INT 50
70660: PUSH
70661: EMPTY
70662: LIST
70663: PUSH
70664: LD_INT 3
70666: PUSH
70667: LD_INT 92
70669: PUSH
70670: LD_VAR 0 2
70674: PUSH
70675: LD_INT 1
70677: ARRAY
70678: PUSH
70679: LD_VAR 0 2
70683: PUSH
70684: LD_INT 2
70686: ARRAY
70687: PUSH
70688: LD_INT 8
70690: PUSH
70691: EMPTY
70692: LIST
70693: LIST
70694: LIST
70695: LIST
70696: PUSH
70697: EMPTY
70698: LIST
70699: LIST
70700: PUSH
70701: EMPTY
70702: LIST
70703: LIST
70704: PPUSH
70705: CALL_OW 72
70709: ST_TO_ADDR
// if not vehicles then
70710: LD_VAR 0 1
70714: NOT
70715: IFFALSE 70719
// exit ;
70717: GO 70746
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
70719: LD_VAR 0 1
70723: PPUSH
70724: LD_VAR 0 2
70728: PUSH
70729: LD_INT 1
70731: ARRAY
70732: PPUSH
70733: LD_VAR 0 2
70737: PUSH
70738: LD_INT 2
70740: ARRAY
70741: PPUSH
70742: CALL_OW 111
// end ;
70746: LD_VAR 0 3
70750: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
70751: LD_INT 0
70753: PPUSH
70754: PPUSH
70755: PPUSH
// if not side or not area then
70756: LD_VAR 0 1
70760: NOT
70761: IFTRUE 70770
70763: PUSH
70764: LD_VAR 0 2
70768: NOT
70769: OR
70770: IFFALSE 70774
// exit ;
70772: GO 70893
// tmp := AreaToList ( area , 0 ) ;
70774: LD_ADDR_VAR 0 5
70778: PUSH
70779: LD_VAR 0 2
70783: PPUSH
70784: LD_INT 0
70786: PPUSH
70787: CALL_OW 517
70791: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
70792: LD_ADDR_VAR 0 4
70796: PUSH
70797: DOUBLE
70798: LD_INT 1
70800: DEC
70801: ST_TO_ADDR
70802: LD_VAR 0 5
70806: PUSH
70807: LD_INT 1
70809: ARRAY
70810: PUSH
70811: FOR_TO
70812: IFFALSE 70891
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
70814: LD_VAR 0 5
70818: PUSH
70819: LD_INT 1
70821: ARRAY
70822: PUSH
70823: LD_VAR 0 4
70827: ARRAY
70828: PPUSH
70829: LD_VAR 0 5
70833: PUSH
70834: LD_INT 2
70836: ARRAY
70837: PUSH
70838: LD_VAR 0 4
70842: ARRAY
70843: PPUSH
70844: CALL_OW 351
70848: IFFALSE 70889
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
70850: LD_VAR 0 5
70854: PUSH
70855: LD_INT 1
70857: ARRAY
70858: PUSH
70859: LD_VAR 0 4
70863: ARRAY
70864: PPUSH
70865: LD_VAR 0 5
70869: PUSH
70870: LD_INT 2
70872: ARRAY
70873: PUSH
70874: LD_VAR 0 4
70878: ARRAY
70879: PPUSH
70880: LD_VAR 0 1
70884: PPUSH
70885: CALL_OW 244
// end ;
70889: GO 70811
70891: POP
70892: POP
// end ;
70893: LD_VAR 0 3
70897: RET
// export function UniqueArray ( array ) ; var i ; begin
70898: LD_INT 0
70900: PPUSH
70901: PPUSH
// result := [ ] ;
70902: LD_ADDR_VAR 0 2
70906: PUSH
70907: EMPTY
70908: ST_TO_ADDR
// if not array then
70909: LD_VAR 0 1
70913: NOT
70914: IFFALSE 70918
// exit ;
70916: GO 70979
// for i := 1 to array do
70918: LD_ADDR_VAR 0 3
70922: PUSH
70923: DOUBLE
70924: LD_INT 1
70926: DEC
70927: ST_TO_ADDR
70928: LD_VAR 0 1
70932: PUSH
70933: FOR_TO
70934: IFFALSE 70977
// if not array [ i ] in result then
70936: LD_VAR 0 1
70940: PUSH
70941: LD_VAR 0 3
70945: ARRAY
70946: PUSH
70947: LD_VAR 0 2
70951: IN
70952: NOT
70953: IFFALSE 70975
// result := Join ( result , i ) ;
70955: LD_ADDR_VAR 0 2
70959: PUSH
70960: LD_VAR 0 2
70964: PPUSH
70965: LD_VAR 0 3
70969: PPUSH
70970: CALL 65630 0 2
70974: ST_TO_ADDR
70975: GO 70933
70977: POP
70978: POP
// end ; end_of_file
70979: LD_VAR 0 2
70983: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70984: LD_VAR 0 1
70988: PPUSH
70989: LD_VAR 0 2
70993: PPUSH
70994: LD_VAR 0 3
70998: PPUSH
70999: LD_VAR 0 4
71003: PPUSH
71004: LD_VAR 0 5
71008: PPUSH
71009: LD_VAR 0 6
71013: PPUSH
71014: CALL 6165 0 6
// end ;
71018: PPOPN 6
71020: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71021: LD_INT 0
71023: PPUSH
// begin if not units then
71024: LD_VAR 0 1
71028: NOT
71029: IFFALSE 71033
// exit ;
71031: GO 71033
// end ;
71033: PPOPN 7
71035: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71036: CALL 6052 0 0
// end ; end_of_file
71040: PPOPN 1
71042: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71043: LD_VAR 0 1
71047: PUSH
71048: LD_INT 200
71050: DOUBLE
71051: GREATEREQUAL
71052: IFFALSE 71060
71054: LD_INT 299
71056: DOUBLE
71057: LESSEQUAL
71058: IFTRUE 71062
71060: GO 71094
71062: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71063: LD_VAR 0 1
71067: PPUSH
71068: LD_VAR 0 2
71072: PPUSH
71073: LD_VAR 0 3
71077: PPUSH
71078: LD_VAR 0 4
71082: PPUSH
71083: LD_VAR 0 5
71087: PPUSH
71088: CALL 22741 0 5
71092: GO 71171
71094: LD_INT 300
71096: DOUBLE
71097: GREATEREQUAL
71098: IFFALSE 71106
71100: LD_INT 399
71102: DOUBLE
71103: LESSEQUAL
71104: IFTRUE 71108
71106: GO 71170
71108: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71109: LD_VAR 0 1
71113: PPUSH
71114: LD_VAR 0 2
71118: PPUSH
71119: LD_VAR 0 3
71123: PPUSH
71124: LD_VAR 0 4
71128: PPUSH
71129: LD_VAR 0 5
71133: PPUSH
71134: LD_VAR 0 6
71138: PPUSH
71139: LD_VAR 0 7
71143: PPUSH
71144: LD_VAR 0 8
71148: PPUSH
71149: LD_VAR 0 9
71153: PPUSH
71154: LD_VAR 0 10
71158: PPUSH
71159: LD_VAR 0 11
71163: PPUSH
71164: CALL 18625 0 11
71168: GO 71171
71170: POP
// end ;
71171: PPOPN 11
71173: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71174: LD_VAR 0 1
71178: PPUSH
71179: LD_VAR 0 2
71183: PPUSH
71184: LD_VAR 0 3
71188: PPUSH
71189: LD_VAR 0 4
71193: PPUSH
71194: LD_VAR 0 5
71198: PPUSH
71199: CALL 22122 0 5
// end ;
71203: PPOPN 5
71205: END
