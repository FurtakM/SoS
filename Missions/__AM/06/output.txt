// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson , Mike ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export selectedPeople ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect := 0 ;
  15: LD_ADDR_EXP 19
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene := 1 ;
  23: LD_ADDR_EXP 20
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans := [ ] ;
  31: LD_ADDR_EXP 13
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans := [ ] ;
  38: LD_ADDR_EXP 14
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles := [ ] ;
  45: LD_ADDR_EXP 15
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 12
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// resources := [ ] ;
  59: LD_ADDR_EXP 22
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// mission_prefix := 06_ ;
  66: LD_ADDR_EXP 23
  70: PUSH
  71: LD_STRING 06_
  73: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  74: LD_ADDR_EXP 24
  78: PUSH
  79: LD_STRING 05_
  81: ST_TO_ADDR
// PrepareDeltaBase ;
  82: CALL 2389 0 0
// CreateNature ;
  86: CALL 170 0 0
// LoadVehicles ;
  90: CALL 1530 0 0
// PrepareHeroes ;
  94: CALL 299 0 0
// PrepareRandoms ;
  98: CALL 1795 0 0
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 102: LD_ADDR_EXP 21
 106: PUSH
 107: LD_INT 22
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 2
 119: PUSH
 120: LD_INT 30
 122: PUSH
 123: LD_INT 6
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 30
 132: PUSH
 133: LD_INT 7
 135: PUSH
 136: EMPTY
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 30
 142: PUSH
 143: LD_INT 8
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: PPUSH
 160: CALL_OW 69
 164: ST_TO_ADDR
// Action ;
 165: CALL 3303 0 0
// end ;
 169: END
// export function CreateNature ; var i ; begin
 170: LD_INT 0
 172: PPUSH
 173: PPUSH
// uc_side := 0 ;
 174: LD_ADDR_OWVAR 20
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// uc_nation := 0 ;
 182: LD_ADDR_OWVAR 21
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// for i = 1 to 4 do
 190: LD_ADDR_VAR 0 2
 194: PUSH
 195: DOUBLE
 196: LD_INT 1
 198: DEC
 199: ST_TO_ADDR
 200: LD_INT 4
 202: PUSH
 203: FOR_TO
 204: IFFALSE 292
// begin hc_gallery :=  ;
 206: LD_ADDR_OWVAR 33
 210: PUSH
 211: LD_STRING 
 213: ST_TO_ADDR
// hc_name :=  ;
 214: LD_ADDR_OWVAR 26
 218: PUSH
 219: LD_STRING 
 221: ST_TO_ADDR
// hc_agressivity := 0 ;
 222: LD_ADDR_OWVAR 35
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// hc_attr := [ rand ( 10 , 11 ) , rand ( 10 , 12 ) ] ;
 230: LD_ADDR_OWVAR 29
 234: PUSH
 235: LD_INT 10
 237: PPUSH
 238: LD_INT 11
 240: PPUSH
 241: CALL_OW 12
 245: PUSH
 246: LD_INT 10
 248: PPUSH
 249: LD_INT 12
 251: PPUSH
 252: CALL_OW 12
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: ST_TO_ADDR
// hc_class := class_apeman ;
 261: LD_ADDR_OWVAR 28
 265: PUSH
 266: LD_INT 12
 268: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 22 , 18 , 20 , false ) ;
 269: CALL_OW 44
 273: PPUSH
 274: LD_INT 22
 276: PPUSH
 277: LD_INT 18
 279: PPUSH
 280: LD_INT 20
 282: PPUSH
 283: LD_INT 0
 285: PPUSH
 286: CALL_OW 50
// end ;
 290: GO 203
 292: POP
 293: POP
// end ; end_of_file
 294: LD_VAR 0 1
 298: RET
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
 305: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 306: LD_ADDR_VAR 0 3
 310: PUSH
 311: LD_INT 22
 313: PUSH
 314: LD_INT 1
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 21
 323: PUSH
 324: LD_INT 3
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: LD_INT 30
 333: PUSH
 334: LD_INT 0
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PPUSH
 346: CALL_OW 69
 350: ST_TO_ADDR
// if tmp then
 351: LD_VAR 0 3
 355: IFFALSE 373
// SetBName ( tmp [ 1 ] , delta ) ;
 357: LD_VAR 0 3
 361: PUSH
 362: LD_INT 1
 364: ARRAY
 365: PPUSH
 366: LD_STRING delta
 368: PPUSH
 369: CALL_OW 500
// uc_side := 1 ;
 373: LD_ADDR_OWVAR 20
 377: PUSH
 378: LD_INT 1
 380: ST_TO_ADDR
// uc_nation := 1 ;
 381: LD_ADDR_OWVAR 21
 385: PUSH
 386: LD_INT 1
 388: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 389: LD_ADDR_EXP 1
 393: PUSH
 394: LD_STRING JMM
 396: PPUSH
 397: LD_INT 1
 399: PPUSH
 400: LD_EXP 24
 404: PPUSH
 405: CALL 25954 0 3
 409: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 410: LD_ADDR_EXP 17
 414: PUSH
 415: LD_STRING Harisson
 417: PPUSH
 418: LD_INT 0
 420: PPUSH
 421: LD_STRING 
 423: PPUSH
 424: CALL 25954 0 3
 428: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 429: LD_EXP 1
 433: PPUSH
 434: LD_VAR 0 3
 438: PUSH
 439: LD_INT 1
 441: ARRAY
 442: PPUSH
 443: CALL_OW 250
 447: PPUSH
 448: LD_VAR 0 3
 452: PUSH
 453: LD_INT 1
 455: ARRAY
 456: PPUSH
 457: CALL_OW 251
 461: PPUSH
 462: LD_INT 5
 464: PPUSH
 465: LD_INT 0
 467: PPUSH
 468: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 472: LD_EXP 1
 476: PPUSH
 477: LD_INT 1
 479: PPUSH
 480: CALL_OW 336
// Gladstone := PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
 484: LD_ADDR_EXP 2
 488: PUSH
 489: LD_STRING Gladstone
 491: PPUSH
 492: LD_INT 1
 494: PPUSH
 495: LD_EXP 24
 499: PPUSH
 500: CALL 25954 0 3
 504: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 505: LD_EXP 2
 509: PPUSH
 510: LD_VAR 0 3
 514: PUSH
 515: LD_INT 1
 517: ARRAY
 518: PPUSH
 519: CALL_OW 250
 523: PPUSH
 524: LD_VAR 0 3
 528: PUSH
 529: LD_INT 1
 531: ARRAY
 532: PPUSH
 533: CALL_OW 251
 537: PPUSH
 538: LD_INT 5
 540: PPUSH
 541: LD_INT 0
 543: PPUSH
 544: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 548: LD_EXP 2
 552: PPUSH
 553: LD_INT 4
 555: PPUSH
 556: CALL_OW 336
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
 560: LD_ADDR_EXP 3
 564: PUSH
 565: LD_STRING Denis
 567: PPUSH
 568: LD_INT 1
 570: PPUSH
 571: LD_EXP 24
 575: PPUSH
 576: CALL 25954 0 3
 580: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 581: LD_EXP 3
 585: PPUSH
 586: LD_VAR 0 3
 590: PUSH
 591: LD_INT 1
 593: ARRAY
 594: PPUSH
 595: CALL_OW 250
 599: PPUSH
 600: LD_VAR 0 3
 604: PUSH
 605: LD_INT 1
 607: ARRAY
 608: PPUSH
 609: CALL_OW 251
 613: PPUSH
 614: LD_INT 5
 616: PPUSH
 617: LD_INT 0
 619: PPUSH
 620: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 624: LD_EXP 3
 628: PPUSH
 629: LD_INT 4
 631: PPUSH
 632: CALL_OW 336
// Mike := PrepareUnit ( Mike , true , mission_prefix_prev ) ;
 636: LD_ADDR_EXP 10
 640: PUSH
 641: LD_STRING Mike
 643: PPUSH
 644: LD_INT 1
 646: PPUSH
 647: LD_EXP 24
 651: PPUSH
 652: CALL 25954 0 3
 656: ST_TO_ADDR
// PlaceUnitXYR ( Mike , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 657: LD_EXP 10
 661: PPUSH
 662: LD_VAR 0 3
 666: PUSH
 667: LD_INT 1
 669: ARRAY
 670: PPUSH
 671: CALL_OW 250
 675: PPUSH
 676: LD_VAR 0 3
 680: PUSH
 681: LD_INT 1
 683: ARRAY
 684: PPUSH
 685: CALL_OW 251
 689: PPUSH
 690: LD_INT 5
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 50
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 700: LD_STRING FrankInDelta
 702: PPUSH
 703: LD_INT 0
 705: PPUSH
 706: CALL_OW 30
 710: PUSH
 711: LD_INT 1
 713: EQUAL
 714: IFFALSE 792
// begin Frank := PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 716: LD_ADDR_EXP 5
 720: PUSH
 721: LD_STRING Frank
 723: PPUSH
 724: LD_INT 1
 726: PPUSH
 727: LD_EXP 24
 731: PPUSH
 732: CALL 25954 0 3
 736: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 737: LD_EXP 5
 741: PPUSH
 742: LD_VAR 0 3
 746: PUSH
 747: LD_INT 1
 749: ARRAY
 750: PPUSH
 751: CALL_OW 250
 755: PPUSH
 756: LD_VAR 0 3
 760: PUSH
 761: LD_INT 1
 763: ARRAY
 764: PPUSH
 765: CALL_OW 251
 769: PPUSH
 770: LD_INT 5
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 780: LD_EXP 5
 784: PPUSH
 785: LD_INT 1
 787: PPUSH
 788: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 792: LD_STRING LisaInDelta
 794: PPUSH
 795: LD_INT 0
 797: PPUSH
 798: CALL_OW 30
 802: PUSH
 803: LD_INT 1
 805: EQUAL
 806: IFFALSE 884
// begin Lisa := PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 808: LD_ADDR_EXP 4
 812: PUSH
 813: LD_STRING Lisa
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: LD_EXP 24
 823: PPUSH
 824: CALL 25954 0 3
 828: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 829: LD_EXP 4
 833: PPUSH
 834: LD_VAR 0 3
 838: PUSH
 839: LD_INT 1
 841: ARRAY
 842: PPUSH
 843: CALL_OW 250
 847: PPUSH
 848: LD_VAR 0 3
 852: PUSH
 853: LD_INT 1
 855: ARRAY
 856: PPUSH
 857: CALL_OW 251
 861: PPUSH
 862: LD_INT 5
 864: PPUSH
 865: LD_INT 0
 867: PPUSH
 868: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 872: LD_EXP 4
 876: PPUSH
 877: LD_INT 1
 879: PPUSH
 880: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 884: LD_STRING BobbyInDelta
 886: PPUSH
 887: LD_INT 0
 889: PPUSH
 890: CALL_OW 30
 894: PUSH
 895: LD_INT 1
 897: EQUAL
 898: IFFALSE 976
// begin Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 900: LD_ADDR_EXP 6
 904: PUSH
 905: LD_STRING Bobby
 907: PPUSH
 908: LD_INT 1
 910: PPUSH
 911: LD_EXP 24
 915: PPUSH
 916: CALL 25954 0 3
 920: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 921: LD_EXP 6
 925: PPUSH
 926: LD_VAR 0 3
 930: PUSH
 931: LD_INT 1
 933: ARRAY
 934: PPUSH
 935: CALL_OW 250
 939: PPUSH
 940: LD_VAR 0 3
 944: PUSH
 945: LD_INT 1
 947: ARRAY
 948: PPUSH
 949: CALL_OW 251
 953: PPUSH
 954: LD_INT 5
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 964: LD_EXP 6
 968: PPUSH
 969: LD_INT 1
 971: PPUSH
 972: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 976: LD_STRING CyrusInDelta
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL_OW 30
 986: PUSH
 987: LD_INT 1
 989: EQUAL
 990: IFFALSE 1068
// begin Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 992: LD_ADDR_EXP 7
 996: PUSH
 997: LD_STRING Cyrus
 999: PPUSH
1000: LD_INT 1
1002: PPUSH
1003: LD_EXP 24
1007: PPUSH
1008: CALL 25954 0 3
1012: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1013: LD_EXP 7
1017: PPUSH
1018: LD_VAR 0 3
1022: PUSH
1023: LD_INT 1
1025: ARRAY
1026: PPUSH
1027: CALL_OW 250
1031: PPUSH
1032: LD_VAR 0 3
1036: PUSH
1037: LD_INT 1
1039: ARRAY
1040: PPUSH
1041: CALL_OW 251
1045: PPUSH
1046: LD_INT 5
1048: PPUSH
1049: LD_INT 0
1051: PPUSH
1052: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
1056: LD_EXP 7
1060: PPUSH
1061: LD_INT 1
1063: PPUSH
1064: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
1068: LD_STRING DonaldsonInDelta
1070: PPUSH
1071: LD_INT 0
1073: PPUSH
1074: CALL_OW 30
1078: PUSH
1079: LD_INT 1
1081: EQUAL
1082: IFFALSE 1160
// begin Donaldson := PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
1084: LD_ADDR_EXP 9
1088: PUSH
1089: LD_STRING Donaldson
1091: PPUSH
1092: LD_INT 1
1094: PPUSH
1095: LD_EXP 24
1099: PPUSH
1100: CALL 25954 0 3
1104: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1105: LD_EXP 9
1109: PPUSH
1110: LD_VAR 0 3
1114: PUSH
1115: LD_INT 1
1117: ARRAY
1118: PPUSH
1119: CALL_OW 250
1123: PPUSH
1124: LD_VAR 0 3
1128: PUSH
1129: LD_INT 1
1131: ARRAY
1132: PPUSH
1133: CALL_OW 251
1137: PPUSH
1138: LD_INT 5
1140: PPUSH
1141: LD_INT 0
1143: PPUSH
1144: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
1148: LD_EXP 9
1152: PPUSH
1153: LD_INT 1
1155: PPUSH
1156: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
1160: LD_STRING BrownInDelta
1162: PPUSH
1163: LD_INT 0
1165: PPUSH
1166: CALL_OW 30
1170: PUSH
1171: LD_INT 1
1173: EQUAL
1174: IFFALSE 1252
// begin Brown := PrepareUnit ( Brown , true , mission_prefix_prev ) ;
1176: LD_ADDR_EXP 8
1180: PUSH
1181: LD_STRING Brown
1183: PPUSH
1184: LD_INT 1
1186: PPUSH
1187: LD_EXP 24
1191: PPUSH
1192: CALL 25954 0 3
1196: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1197: LD_EXP 8
1201: PPUSH
1202: LD_VAR 0 3
1206: PUSH
1207: LD_INT 1
1209: ARRAY
1210: PPUSH
1211: CALL_OW 250
1215: PPUSH
1216: LD_VAR 0 3
1220: PUSH
1221: LD_INT 1
1223: ARRAY
1224: PPUSH
1225: CALL_OW 251
1229: PPUSH
1230: LD_INT 5
1232: PPUSH
1233: LD_INT 0
1235: PPUSH
1236: CALL_OW 50
// SetClass ( Brown , 2 ) ;
1240: LD_EXP 8
1244: PPUSH
1245: LD_INT 2
1247: PPUSH
1248: CALL_OW 336
// end ; others := CreateCharacterSet ( othersInDelta ) ;
1252: LD_ADDR_EXP 11
1256: PUSH
1257: LD_STRING othersInDelta
1259: PPUSH
1260: CALL_OW 31
1264: ST_TO_ADDR
// for i in others do
1265: LD_ADDR_VAR 0 2
1269: PUSH
1270: LD_EXP 11
1274: PUSH
1275: FOR_IN
1276: IFFALSE 1323
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1278: LD_VAR 0 2
1282: PPUSH
1283: LD_VAR 0 3
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: CALL_OW 250
1296: PPUSH
1297: LD_VAR 0 3
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 251
1310: PPUSH
1311: LD_INT 35
1313: PPUSH
1314: LD_INT 0
1316: PPUSH
1317: CALL_OW 50
1321: GO 1275
1323: POP
1324: POP
// apemans := CreateCharacterSet ( apeInDelta ) ;
1325: LD_ADDR_EXP 13
1329: PUSH
1330: LD_STRING apeInDelta
1332: PPUSH
1333: CALL_OW 31
1337: ST_TO_ADDR
// uc_nation := 0 ;
1338: LD_ADDR_OWVAR 21
1342: PUSH
1343: LD_INT 0
1345: ST_TO_ADDR
// if apemans > 5 then
1346: LD_EXP 13
1350: PUSH
1351: LD_INT 5
1353: GREATER
1354: IFFALSE 1449
// begin for i := 1 to 5 do
1356: LD_ADDR_VAR 0 2
1360: PUSH
1361: DOUBLE
1362: LD_INT 1
1364: DEC
1365: ST_TO_ADDR
1366: LD_INT 5
1368: PUSH
1369: FOR_TO
1370: IFFALSE 1445
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1372: LD_EXP 13
1376: PUSH
1377: LD_VAR 0 2
1381: ARRAY
1382: PPUSH
1383: LD_VAR 0 3
1387: PUSH
1388: LD_INT 1
1390: ARRAY
1391: PPUSH
1392: CALL_OW 250
1396: PPUSH
1397: LD_VAR 0 3
1401: PUSH
1402: LD_INT 1
1404: ARRAY
1405: PPUSH
1406: CALL_OW 251
1410: PPUSH
1411: LD_INT 50
1413: PPUSH
1414: LD_INT 0
1416: PPUSH
1417: CALL_OW 50
// yourApemans := yourApemans ^ apemans [ i ] ;
1421: LD_ADDR_EXP 14
1425: PUSH
1426: LD_EXP 14
1430: PUSH
1431: LD_EXP 13
1435: PUSH
1436: LD_VAR 0 2
1440: ARRAY
1441: ADD
1442: ST_TO_ADDR
// end ;
1443: GO 1369
1445: POP
1446: POP
// end else
1447: GO 1525
// begin for i in apemans do
1449: LD_ADDR_VAR 0 2
1453: PUSH
1454: LD_EXP 13
1458: PUSH
1459: FOR_IN
1460: IFFALSE 1523
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1462: LD_VAR 0 2
1466: PPUSH
1467: LD_VAR 0 3
1471: PUSH
1472: LD_INT 1
1474: ARRAY
1475: PPUSH
1476: CALL_OW 250
1480: PPUSH
1481: LD_VAR 0 3
1485: PUSH
1486: LD_INT 1
1488: ARRAY
1489: PPUSH
1490: CALL_OW 251
1494: PPUSH
1495: LD_INT 50
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: CALL_OW 50
// yourApemans := yourApemans ^ i ;
1505: LD_ADDR_EXP 14
1509: PUSH
1510: LD_EXP 14
1514: PUSH
1515: LD_VAR 0 2
1519: ADD
1520: ST_TO_ADDR
// end ;
1521: GO 1459
1523: POP
1524: POP
// end ; end ;
1525: LD_VAR 0 1
1529: RET
// export function LoadVehicles ; var i , j , veh , tmp , vehicles ; begin
1530: LD_INT 0
1532: PPUSH
1533: PPUSH
1534: PPUSH
1535: PPUSH
1536: PPUSH
1537: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1538: LD_ADDR_VAR 0 5
1542: PUSH
1543: LD_INT 22
1545: PUSH
1546: LD_INT 1
1548: PUSH
1549: EMPTY
1550: LIST
1551: LIST
1552: PUSH
1553: LD_INT 21
1555: PUSH
1556: LD_INT 3
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: PUSH
1563: LD_INT 30
1565: PUSH
1566: LD_INT 0
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 69
1582: ST_TO_ADDR
// uc_side := 1 ;
1583: LD_ADDR_OWVAR 20
1587: PUSH
1588: LD_INT 1
1590: ST_TO_ADDR
// vehicles := LoadVariable ( vehiclesInDelta , [ ] ) ;
1591: LD_ADDR_VAR 0 6
1595: PUSH
1596: LD_STRING vehiclesInDelta
1598: PPUSH
1599: EMPTY
1600: PPUSH
1601: CALL_OW 30
1605: ST_TO_ADDR
// for i := 1 to Count ( vehicles ) div 4 do
1606: LD_ADDR_VAR 0 2
1610: PUSH
1611: DOUBLE
1612: LD_INT 1
1614: DEC
1615: ST_TO_ADDR
1616: LD_VAR 0 6
1620: PPUSH
1621: CALL 28056 0 1
1625: PUSH
1626: LD_INT 4
1628: DIV
1629: PUSH
1630: FOR_TO
1631: IFFALSE 1788
// begin uc_nation := vehicles [ 1 ] ;
1633: LD_ADDR_OWVAR 21
1637: PUSH
1638: LD_VAR 0 6
1642: PUSH
1643: LD_INT 1
1645: ARRAY
1646: ST_TO_ADDR
// vc_chassis := vehicles [ 2 ] ;
1647: LD_ADDR_OWVAR 37
1651: PUSH
1652: LD_VAR 0 6
1656: PUSH
1657: LD_INT 2
1659: ARRAY
1660: ST_TO_ADDR
// vc_engine := vehicles [ 3 ] ;
1661: LD_ADDR_OWVAR 39
1665: PUSH
1666: LD_VAR 0 6
1670: PUSH
1671: LD_INT 3
1673: ARRAY
1674: ST_TO_ADDR
// vc_control := vehicles [ 4 ] ;
1675: LD_ADDR_OWVAR 38
1679: PUSH
1680: LD_VAR 0 6
1684: PUSH
1685: LD_INT 4
1687: ARRAY
1688: ST_TO_ADDR
// vc_weapon := vehicles [ 5 ] ;
1689: LD_ADDR_OWVAR 40
1693: PUSH
1694: LD_VAR 0 6
1698: PUSH
1699: LD_INT 5
1701: ARRAY
1702: ST_TO_ADDR
// veh := CreateVehicle ;
1703: LD_ADDR_VAR 0 4
1707: PUSH
1708: CALL_OW 45
1712: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1713: LD_VAR 0 4
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: LD_INT 5
1723: PPUSH
1724: CALL_OW 12
1728: PPUSH
1729: CALL_OW 233
// PlaceUnitArea ( veh , parkingArea , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 4
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// for j := 1 to 5 do
1748: LD_ADDR_VAR 0 3
1752: PUSH
1753: DOUBLE
1754: LD_INT 1
1756: DEC
1757: ST_TO_ADDR
1758: LD_INT 5
1760: PUSH
1761: FOR_TO
1762: IFFALSE 1784
// vehicles := Delete ( vehicles , 1 ) ;
1764: LD_ADDR_VAR 0 6
1768: PUSH
1769: LD_VAR 0 6
1773: PPUSH
1774: LD_INT 1
1776: PPUSH
1777: CALL_OW 3
1781: ST_TO_ADDR
1782: GO 1761
1784: POP
1785: POP
// end ;
1786: GO 1630
1788: POP
1789: POP
// end ;
1790: LD_VAR 0 1
1794: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1795: LD_INT 0
1797: PPUSH
1798: PPUSH
1799: PPUSH
1800: PPUSH
1801: PPUSH
// uc_side := 1 ;
1802: LD_ADDR_OWVAR 20
1806: PUSH
1807: LD_INT 1
1809: ST_TO_ADDR
// uc_nation := 1 ;
1810: LD_ADDR_OWVAR 21
1814: PUSH
1815: LD_INT 1
1817: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1818: LD_ADDR_VAR 0 4
1822: PUSH
1823: LD_INT 22
1825: PUSH
1826: LD_INT 1
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: LD_INT 21
1835: PUSH
1836: LD_INT 3
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 30
1845: PUSH
1846: LD_INT 0
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: PPUSH
1858: CALL_OW 69
1862: ST_TO_ADDR
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) ;
1863: LD_ADDR_EXP 16
1867: PUSH
1868: LD_INT 22
1870: PUSH
1871: LD_INT 1
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: LD_INT 25
1880: PUSH
1881: LD_INT 4
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PUSH
1888: LD_INT 26
1890: PUSH
1891: LD_INT 1
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PUSH
1898: EMPTY
1899: LIST
1900: LIST
1901: LIST
1902: PUSH
1903: EMPTY
1904: LIST
1905: PPUSH
1906: CALL_OW 69
1910: PUSH
1911: LD_EXP 1
1915: PUSH
1916: LD_EXP 7
1920: PUSH
1921: LD_EXP 6
1925: PUSH
1926: LD_EXP 5
1930: PUSH
1931: LD_EXP 2
1935: PUSH
1936: LD_EXP 3
1940: PUSH
1941: LD_EXP 8
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: DIFF
1955: ST_TO_ADDR
// if not deltaDoctor then
1956: LD_EXP 16
1960: NOT
1961: IFFALSE 2112
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
1963: LD_ADDR_VAR 0 5
1967: PUSH
1968: LD_INT 22
1970: PUSH
1971: LD_INT 1
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: PUSH
1978: LD_INT 26
1980: PUSH
1981: LD_INT 1
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: PUSH
1992: EMPTY
1993: LIST
1994: PPUSH
1995: CALL_OW 69
1999: PUSH
2000: LD_EXP 1
2004: PUSH
2005: LD_EXP 7
2009: PUSH
2010: LD_EXP 6
2014: PUSH
2015: LD_EXP 5
2019: PUSH
2020: LD_EXP 2
2024: PUSH
2025: LD_EXP 3
2029: PUSH
2030: LD_EXP 8
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: DIFF
2044: ST_TO_ADDR
// if filter then
2045: LD_VAR 0 5
2049: IFFALSE 2110
// for i in filter do
2051: LD_ADDR_VAR 0 2
2055: PUSH
2056: LD_VAR 0 5
2060: PUSH
2061: FOR_IN
2062: IFFALSE 2108
// if GetSkill ( i , 4 ) >= 4 then
2064: LD_VAR 0 2
2068: PPUSH
2069: LD_INT 4
2071: PPUSH
2072: CALL_OW 259
2076: PUSH
2077: LD_INT 4
2079: GREATEREQUAL
2080: IFFALSE 2106
// begin deltaDoctor := i ;
2082: LD_ADDR_EXP 16
2086: PUSH
2087: LD_VAR 0 2
2091: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
2092: LD_EXP 16
2096: PPUSH
2097: LD_INT 4
2099: PPUSH
2100: CALL_OW 336
// break ;
2104: GO 2108
// end ;
2106: GO 2061
2108: POP
2109: POP
// end else
2110: GO 2126
// deltaDoctor := deltaDoctor [ 1 ] ;
2112: LD_ADDR_EXP 16
2116: PUSH
2117: LD_EXP 16
2121: PUSH
2122: LD_INT 1
2124: ARRAY
2125: ST_TO_ADDR
// for i := 1 to 7 do
2126: LD_ADDR_VAR 0 2
2130: PUSH
2131: DOUBLE
2132: LD_INT 1
2134: DEC
2135: ST_TO_ADDR
2136: LD_INT 7
2138: PUSH
2139: FOR_TO
2140: IFFALSE 2277
// begin hc_gallery :=  ;
2142: LD_ADDR_OWVAR 33
2146: PUSH
2147: LD_STRING 
2149: ST_TO_ADDR
// hc_name :=  ;
2150: LD_ADDR_OWVAR 26
2154: PUSH
2155: LD_STRING 
2157: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) ) ;
2158: LD_INT 0
2160: PPUSH
2161: LD_INT 1
2163: PUSH
2164: LD_INT 2
2166: PUSH
2167: LD_INT 3
2169: PUSH
2170: LD_INT 4
2172: PUSH
2173: EMPTY
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: PUSH
2179: LD_INT 1
2181: PPUSH
2182: LD_INT 4
2184: PPUSH
2185: CALL_OW 12
2189: ARRAY
2190: PPUSH
2191: LD_INT 3
2193: PPUSH
2194: LD_INT 5
2196: PPUSH
2197: CALL_OW 12
2201: PPUSH
2202: CALL_OW 380
// un := CreateHuman ;
2206: LD_ADDR_VAR 0 3
2210: PUSH
2211: CALL_OW 44
2215: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2216: LD_ADDR_EXP 12
2220: PUSH
2221: LD_EXP 12
2225: PUSH
2226: LD_VAR 0 3
2230: ADD
2231: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2232: LD_VAR 0 3
2236: PPUSH
2237: LD_VAR 0 4
2241: PUSH
2242: LD_INT 1
2244: ARRAY
2245: PPUSH
2246: CALL_OW 250
2250: PPUSH
2251: LD_VAR 0 4
2255: PUSH
2256: LD_INT 1
2258: ARRAY
2259: PPUSH
2260: CALL_OW 251
2264: PPUSH
2265: LD_INT 15
2267: PPUSH
2268: LD_INT 0
2270: PPUSH
2271: CALL_OW 50
// end ;
2275: GO 2139
2277: POP
2278: POP
// if deltaDoctor then
2279: LD_EXP 16
2283: IFFALSE 2287
// exit ;
2285: GO 2384
// hc_gallery := Dawkins ;
2287: LD_ADDR_OWVAR 33
2291: PUSH
2292: LD_STRING Dawkins
2294: ST_TO_ADDR
// hc_face_number := 1 ;
2295: LD_ADDR_OWVAR 34
2299: PUSH
2300: LD_INT 1
2302: ST_TO_ADDR
// hc_name := Dr. Adam Charles Dawkins ;
2303: LD_ADDR_OWVAR 26
2307: PUSH
2308: LD_STRING Dr. Adam Charles Dawkins
2310: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 5 ) ;
2311: LD_INT 1
2313: PPUSH
2314: LD_INT 4
2316: PPUSH
2317: LD_INT 5
2319: PPUSH
2320: CALL_OW 380
// deltaDoctor := CreateHuman ;
2324: LD_ADDR_EXP 16
2328: PUSH
2329: CALL_OW 44
2333: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2334: LD_EXP 16
2338: PPUSH
2339: LD_VAR 0 4
2343: PUSH
2344: LD_INT 1
2346: ARRAY
2347: PPUSH
2348: CALL_OW 250
2352: PPUSH
2353: LD_VAR 0 4
2357: PUSH
2358: LD_INT 1
2360: ARRAY
2361: PPUSH
2362: CALL_OW 251
2366: PPUSH
2367: LD_INT 5
2369: PPUSH
2370: LD_INT 0
2372: PPUSH
2373: CALL_OW 50
// ToLua ( enableBioCharacter(BIO_ADAM) ) ;
2377: LD_STRING enableBioCharacter(BIO_ADAM)
2379: PPUSH
2380: CALL_OW 559
// end ; end_of_file
2384: LD_VAR 0 1
2388: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2389: LD_INT 0
2391: PPUSH
2392: PPUSH
2393: PPUSH
2394: PPUSH
2395: PPUSH
2396: PPUSH
2397: PPUSH
// buildings := LoadVariable ( buildingsInDelta , [ ] ) ;
2398: LD_ADDR_VAR 0 5
2402: PUSH
2403: LD_STRING buildingsInDelta
2405: PPUSH
2406: EMPTY
2407: PPUSH
2408: CALL_OW 30
2412: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2413: LD_INT 68
2415: PPUSH
2416: LD_INT 40
2418: PPUSH
2419: LD_INT 1
2421: PPUSH
2422: CALL_OW 441
// uc_side := 1 ;
2426: LD_ADDR_OWVAR 20
2430: PUSH
2431: LD_INT 1
2433: ST_TO_ADDR
// uc_nation := 1 ;
2434: LD_ADDR_OWVAR 21
2438: PUSH
2439: LD_INT 1
2441: ST_TO_ADDR
// for i := 1 to buildings do
2442: LD_ADDR_VAR 0 2
2446: PUSH
2447: DOUBLE
2448: LD_INT 1
2450: DEC
2451: ST_TO_ADDR
2452: LD_VAR 0 5
2456: PUSH
2457: FOR_TO
2458: IFFALSE 2759
// begin InitBc ;
2460: CALL_OW 21
// bc_type := buildings [ i ] [ 1 ] ;
2464: LD_ADDR_OWVAR 42
2468: PUSH
2469: LD_VAR 0 5
2473: PUSH
2474: LD_VAR 0 2
2478: ARRAY
2479: PUSH
2480: LD_INT 1
2482: ARRAY
2483: ST_TO_ADDR
// bc_level := buildings [ i ] [ 2 ] ;
2484: LD_ADDR_OWVAR 43
2488: PUSH
2489: LD_VAR 0 5
2493: PUSH
2494: LD_VAR 0 2
2498: ARRAY
2499: PUSH
2500: LD_INT 2
2502: ARRAY
2503: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half , b_lab_full ] then
2504: LD_OWVAR 42
2508: PUSH
2509: LD_INT 6
2511: PUSH
2512: LD_INT 7
2514: PUSH
2515: LD_INT 8
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: LIST
2522: IN
2523: IFFALSE 2647
// begin bc_kind1 := b_lab_basic ;
2525: LD_ADDR_OWVAR 44
2529: PUSH
2530: LD_INT 9
2532: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2533: LD_ADDR_OWVAR 45
2537: PUSH
2538: LD_INT 9
2540: ST_TO_ADDR
// if buildings [ i ] [ 6 ] then
2541: LD_VAR 0 5
2545: PUSH
2546: LD_VAR 0 2
2550: ARRAY
2551: PUSH
2552: LD_INT 6
2554: ARRAY
2555: IFFALSE 2623
// begin bc_kind1 := buildings [ i ] [ 6 ] ;
2557: LD_ADDR_OWVAR 44
2561: PUSH
2562: LD_VAR 0 5
2566: PUSH
2567: LD_VAR 0 2
2571: ARRAY
2572: PUSH
2573: LD_INT 6
2575: ARRAY
2576: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2577: LD_ADDR_OWVAR 45
2581: PUSH
2582: LD_INT 9
2584: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2585: LD_VAR 0 5
2589: PUSH
2590: LD_VAR 0 2
2594: ARRAY
2595: PUSH
2596: LD_INT 7
2598: ARRAY
2599: IFFALSE 2621
// bc_kind2 := buildings [ i ] [ 7 ] ;
2601: LD_ADDR_OWVAR 45
2605: PUSH
2606: LD_VAR 0 5
2610: PUSH
2611: LD_VAR 0 2
2615: ARRAY
2616: PUSH
2617: LD_INT 7
2619: ARRAY
2620: ST_TO_ADDR
// end else
2621: GO 2647
// begin bc_type := b_lab ;
2623: LD_ADDR_OWVAR 42
2627: PUSH
2628: LD_INT 6
2630: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
2631: LD_ADDR_OWVAR 44
2635: PUSH
2636: LD_INT 9
2638: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2639: LD_ADDR_OWVAR 45
2643: PUSH
2644: LD_INT 9
2646: ST_TO_ADDR
// end ; end ; building := CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2647: LD_ADDR_VAR 0 4
2651: PUSH
2652: LD_VAR 0 5
2656: PUSH
2657: LD_VAR 0 2
2661: ARRAY
2662: PUSH
2663: LD_INT 3
2665: ARRAY
2666: PPUSH
2667: LD_VAR 0 5
2671: PUSH
2672: LD_VAR 0 2
2676: ARRAY
2677: PUSH
2678: LD_INT 4
2680: ARRAY
2681: PPUSH
2682: LD_VAR 0 5
2686: PUSH
2687: LD_VAR 0 2
2691: ARRAY
2692: PUSH
2693: LD_INT 5
2695: ARRAY
2696: PPUSH
2697: CALL_OW 47
2701: ST_TO_ADDR
// if GetBType ( building ) = b_bunker and buildings [ i ] [ 8 ] then
2702: LD_VAR 0 4
2706: PPUSH
2707: CALL_OW 266
2711: PUSH
2712: LD_INT 32
2714: EQUAL
2715: PUSH
2716: LD_VAR 0 5
2720: PUSH
2721: LD_VAR 0 2
2725: ARRAY
2726: PUSH
2727: LD_INT 8
2729: ARRAY
2730: AND
2731: IFFALSE 2757
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2733: LD_VAR 0 4
2737: PPUSH
2738: LD_VAR 0 5
2742: PUSH
2743: LD_VAR 0 2
2747: ARRAY
2748: PUSH
2749: LD_INT 8
2751: ARRAY
2752: PPUSH
2753: CALL_OW 431
// end ;
2757: GO 2457
2759: POP
2760: POP
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2761: LD_ADDR_VAR 0 6
2765: PUSH
2766: LD_INT 22
2768: PUSH
2769: LD_INT 1
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: PUSH
2776: LD_INT 2
2778: PUSH
2779: LD_INT 30
2781: PUSH
2782: LD_INT 6
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: PUSH
2789: LD_INT 30
2791: PUSH
2792: LD_INT 7
2794: PUSH
2795: EMPTY
2796: LIST
2797: LIST
2798: PUSH
2799: LD_INT 30
2801: PUSH
2802: LD_INT 8
2804: PUSH
2805: EMPTY
2806: LIST
2807: LIST
2808: PUSH
2809: EMPTY
2810: LIST
2811: LIST
2812: LIST
2813: LIST
2814: PUSH
2815: EMPTY
2816: LIST
2817: LIST
2818: PPUSH
2819: CALL_OW 69
2823: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2824: LD_ADDR_VAR 0 7
2828: PUSH
2829: LD_INT 22
2831: PUSH
2832: LD_INT 1
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: PUSH
2839: LD_INT 30
2841: PUSH
2842: LD_INT 0
2844: PUSH
2845: EMPTY
2846: LIST
2847: LIST
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: PPUSH
2853: CALL_OW 69
2857: ST_TO_ADDR
// if lab and tmp then
2858: LD_VAR 0 6
2862: PUSH
2863: LD_VAR 0 7
2867: AND
2868: IFFALSE 2878
// baseCorrect := 1 ;
2870: LD_ADDR_EXP 19
2874: PUSH
2875: LD_INT 1
2877: ST_TO_ADDR
// if not baseCorrect then
2878: LD_EXP 19
2882: NOT
2883: IFFALSE 3298
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2885: LD_ADDR_VAR 0 2
2889: PUSH
2890: LD_INT 22
2892: PUSH
2893: LD_INT 1
2895: PUSH
2896: EMPTY
2897: LIST
2898: LIST
2899: PUSH
2900: LD_INT 21
2902: PUSH
2903: LD_INT 3
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: PPUSH
2914: CALL_OW 69
2918: PUSH
2919: FOR_IN
2920: IFFALSE 2933
// RemoveUnit ( i ) ;
2922: LD_VAR 0 2
2926: PPUSH
2927: CALL_OW 64
2931: GO 2919
2933: POP
2934: POP
// uc_nation := 1 ;
2935: LD_ADDR_OWVAR 21
2939: PUSH
2940: LD_INT 1
2942: ST_TO_ADDR
// uc_side := 1 ;
2943: LD_ADDR_OWVAR 20
2947: PUSH
2948: LD_INT 1
2950: ST_TO_ADDR
// bc_level := 5 ;
2951: LD_ADDR_OWVAR 43
2955: PUSH
2956: LD_INT 5
2958: ST_TO_ADDR
// bc_type := b_depot ;
2959: LD_ADDR_OWVAR 42
2963: PUSH
2964: LD_INT 0
2966: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2967: LD_INT 50
2969: PPUSH
2970: LD_INT 22
2972: PPUSH
2973: LD_INT 0
2975: PPUSH
2976: CALL_OW 47
// bc_type = b_bunker ;
2980: LD_ADDR_OWVAR 42
2984: PUSH
2985: LD_INT 32
2987: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
2988: LD_ADDR_VAR 0 4
2992: PUSH
2993: LD_INT 68
2995: PPUSH
2996: LD_INT 24
2998: PPUSH
2999: LD_INT 4
3001: PPUSH
3002: CALL_OW 47
3006: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
3007: LD_VAR 0 4
3011: PPUSH
3012: LD_INT 4
3014: PUSH
3015: LD_INT 11
3017: PUSH
3018: EMPTY
3019: LIST
3020: LIST
3021: PUSH
3022: LD_INT 1
3024: PPUSH
3025: LD_INT 2
3027: PPUSH
3028: CALL_OW 12
3032: ARRAY
3033: PPUSH
3034: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
3038: LD_ADDR_VAR 0 4
3042: PUSH
3043: LD_INT 71
3045: PPUSH
3046: LD_INT 34
3048: PPUSH
3049: LD_INT 4
3051: PPUSH
3052: CALL_OW 47
3056: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
3057: LD_VAR 0 4
3061: PPUSH
3062: LD_INT 4
3064: PUSH
3065: LD_INT 11
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: PUSH
3072: LD_INT 1
3074: PPUSH
3075: LD_INT 2
3077: PPUSH
3078: CALL_OW 12
3082: ARRAY
3083: PPUSH
3084: CALL_OW 431
// bc_type := b_breastwork ;
3088: LD_ADDR_OWVAR 42
3092: PUSH
3093: LD_INT 31
3095: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
3096: LD_INT 51
3098: PPUSH
3099: LD_INT 7
3101: PPUSH
3102: LD_INT 3
3104: PPUSH
3105: CALL_OW 47
// bc_type := b_oil_mine ;
3109: LD_ADDR_OWVAR 42
3113: PUSH
3114: LD_INT 29
3116: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
3117: LD_INT 68
3119: PPUSH
3120: LD_INT 40
3122: PPUSH
3123: LD_INT 1
3125: PPUSH
3126: CALL_OW 47
// bc_type := b_factory ;
3130: LD_ADDR_OWVAR 42
3134: PUSH
3135: LD_INT 3
3137: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3138: LD_INT 38
3140: PPUSH
3141: LD_INT 20
3143: PPUSH
3144: LD_INT 2
3146: PPUSH
3147: CALL_OW 47
// bc_type := b_ext_noncombat ;
3151: LD_ADDR_OWVAR 42
3155: PUSH
3156: LD_INT 19
3158: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 24 , 2 ) ;
3159: LD_INT 38
3161: PPUSH
3162: LD_INT 24
3164: PPUSH
3165: LD_INT 2
3167: PPUSH
3168: CALL_OW 47
// bc_type := b_ext_radar ;
3172: LD_ADDR_OWVAR 42
3176: PUSH
3177: LD_INT 20
3179: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 35 , 20 , 1 ) ;
3180: LD_INT 35
3182: PPUSH
3183: LD_INT 20
3185: PPUSH
3186: LD_INT 1
3188: PPUSH
3189: CALL_OW 47
// bc_type := b_armoury ;
3193: LD_ADDR_OWVAR 42
3197: PUSH
3198: LD_INT 4
3200: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 33 , 28 , 1 ) ;
3201: LD_INT 33
3203: PPUSH
3204: LD_INT 28
3206: PPUSH
3207: LD_INT 1
3209: PPUSH
3210: CALL_OW 47
// bc_type := b_solar_power ;
3214: LD_ADDR_OWVAR 42
3218: PUSH
3219: LD_INT 27
3221: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3222: LD_INT 46
3224: PPUSH
3225: LD_INT 12
3227: PPUSH
3228: LD_INT 1
3230: PPUSH
3231: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3235: LD_INT 48
3237: PPUSH
3238: LD_INT 11
3240: PPUSH
3241: LD_INT 2
3243: PPUSH
3244: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 35 , 12 , 3 ) ;
3248: LD_INT 35
3250: PPUSH
3251: LD_INT 12
3253: PPUSH
3254: LD_INT 3
3256: PPUSH
3257: CALL_OW 47
// bc_type := b_lab_half ;
3261: LD_ADDR_OWVAR 42
3265: PUSH
3266: LD_INT 7
3268: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
3269: LD_ADDR_OWVAR 44
3273: PUSH
3274: LD_INT 15
3276: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
3277: LD_ADDR_OWVAR 45
3281: PUSH
3282: LD_INT 9
3284: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3285: LD_INT 42
3287: PPUSH
3288: LD_INT 15
3290: PPUSH
3291: LD_INT 2
3293: PPUSH
3294: CALL_OW 47
// end ; end ; end_of_file
3298: LD_VAR 0 1
3302: RET
// export function Action ; var i , j , tmp ; begin
3303: LD_INT 0
3305: PPUSH
3306: PPUSH
3307: PPUSH
3308: PPUSH
// InGameOn ;
3309: CALL_OW 8
// if lab then
3313: LD_EXP 21
3317: IFFALSE 3334
// CenterNowOnUnits ( lab [ 1 ] ) else
3319: LD_EXP 21
3323: PUSH
3324: LD_INT 1
3326: ARRAY
3327: PPUSH
3328: CALL_OW 87
3332: GO 3343
// CenterOnUnits ( JMM ) ;
3334: LD_EXP 1
3338: PPUSH
3339: CALL_OW 85
// if IsOK ( Denis ) then
3343: LD_EXP 3
3347: PPUSH
3348: CALL_OW 302
3352: IFFALSE 3380
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3354: LD_INT 6
3356: PPUSH
3357: LD_INT 1
3359: PPUSH
3360: LD_INT 2
3362: PPUSH
3363: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3367: LD_INT 20
3369: PPUSH
3370: LD_INT 1
3372: PPUSH
3373: LD_INT 1
3375: PPUSH
3376: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3380: LD_EXP 1
3384: PPUSH
3385: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3389: LD_EXP 1
3393: PPUSH
3394: LD_EXP 16
3398: PPUSH
3399: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3403: LD_INT 35
3405: PPUSH
3406: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3410: LD_EXP 16
3414: PPUSH
3415: LD_EXP 1
3419: PPUSH
3420: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3424: LD_EXP 1
3428: PPUSH
3429: LD_EXP 16
3433: PPUSH
3434: CALL_OW 296
3438: PUSH
3439: LD_INT 5
3441: LESS
3442: IFFALSE 3403
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3444: LD_EXP 16
3448: PPUSH
3449: LD_EXP 1
3453: PPUSH
3454: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3458: LD_EXP 1
3462: PPUSH
3463: LD_STRING D1-JMM-1
3465: PPUSH
3466: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3470: LD_EXP 16
3474: PPUSH
3475: LD_STRING D1-Sci-1
3477: PPUSH
3478: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3482: LD_EXP 1
3486: PUSH
3487: LD_EXP 16
3491: PUSH
3492: LD_EXP 3
3496: PUSH
3497: EMPTY
3498: LIST
3499: LIST
3500: LIST
3501: PPUSH
3502: LD_EXP 21
3506: PUSH
3507: LD_INT 1
3509: ARRAY
3510: PPUSH
3511: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
3515: LD_INT 35
3517: PPUSH
3518: CALL_OW 67
// until IsInUnit ( JMM ) and IsInUnit ( DeltaDoctor ) ;
3522: LD_EXP 1
3526: PPUSH
3527: CALL_OW 310
3531: PUSH
3532: LD_EXP 16
3536: PPUSH
3537: CALL_OW 310
3541: AND
3542: IFFALSE 3515
// CenterNowOnUnits ( lab [ 1 ] ) ;
3544: LD_EXP 21
3548: PUSH
3549: LD_INT 1
3551: ARRAY
3552: PPUSH
3553: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3557: LD_EXP 1
3561: PPUSH
3562: LD_STRING D1-JMM-2
3564: PPUSH
3565: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3569: LD_EXP 16
3573: PPUSH
3574: LD_STRING D1-Sci-2
3576: PPUSH
3577: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3581: LD_EXP 1
3585: PPUSH
3586: LD_STRING D1-JMM-3
3588: PPUSH
3589: CALL_OW 88
// if IsOK ( Denis ) then
3593: LD_EXP 3
3597: PPUSH
3598: CALL_OW 302
3602: IFFALSE 3618
// Say ( DeltaDoctor , D1-Sci-3 ) else
3604: LD_EXP 16
3608: PPUSH
3609: LD_STRING D1-Sci-3
3611: PPUSH
3612: CALL_OW 88
3616: GO 3630
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3618: LD_EXP 16
3622: PPUSH
3623: LD_STRING D1-Sci-3a
3625: PPUSH
3626: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3630: LD_EXP 1
3634: PPUSH
3635: LD_STRING D1-JMM-4
3637: PPUSH
3638: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3642: LD_ADDR_VAR 0 4
3646: PUSH
3647: LD_INT 22
3649: PUSH
3650: LD_INT 1
3652: PUSH
3653: EMPTY
3654: LIST
3655: LIST
3656: PUSH
3657: LD_INT 25
3659: PUSH
3660: LD_INT 4
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: PUSH
3667: LD_INT 3
3669: PUSH
3670: LD_INT 54
3672: PUSH
3673: EMPTY
3674: LIST
3675: PUSH
3676: EMPTY
3677: LIST
3678: LIST
3679: PUSH
3680: EMPTY
3681: LIST
3682: LIST
3683: LIST
3684: PPUSH
3685: CALL_OW 69
3689: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3690: LD_ADDR_VAR 0 2
3694: PUSH
3695: LD_INT 22
3697: PUSH
3698: LD_INT 0
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: PPUSH
3705: CALL_OW 69
3709: PUSH
3710: FOR_IN
3711: IFFALSE 3761
// for j in tmp do
3713: LD_ADDR_VAR 0 3
3717: PUSH
3718: LD_VAR 0 4
3722: PUSH
3723: FOR_IN
3724: IFFALSE 3757
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3726: LD_VAR 0 3
3730: PPUSH
3731: LD_VAR 0 2
3735: PPUSH
3736: CALL_OW 250
3740: PPUSH
3741: LD_VAR 0 2
3745: PPUSH
3746: CALL_OW 251
3750: PPUSH
3751: CALL_OW 191
3755: GO 3723
3757: POP
3758: POP
3759: GO 3710
3761: POP
3762: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3763: LD_EXP 16
3767: PPUSH
3768: LD_STRING D1-Sci-4
3770: PPUSH
3771: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3775: LD_EXP 1
3779: PPUSH
3780: LD_STRING D1-JMM-5
3782: PPUSH
3783: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3787: LD_EXP 16
3791: PPUSH
3792: LD_STRING D1-Sci-5
3794: PPUSH
3795: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3799: LD_EXP 1
3803: PPUSH
3804: LD_STRING D1-JMM-6
3806: PPUSH
3807: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3811: LD_EXP 17
3815: PPUSH
3816: LD_STRING D1-Har-6
3818: PPUSH
3819: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3823: LD_EXP 1
3827: PPUSH
3828: LD_STRING D1-JMM-7
3830: PPUSH
3831: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3835: LD_EXP 17
3839: PPUSH
3840: LD_STRING D1-Har-7
3842: PPUSH
3843: CALL_OW 94
// if IsOK ( Denis ) then
3847: LD_EXP 3
3851: PPUSH
3852: CALL_OW 302
3856: IFFALSE 3870
// Say ( JMM , D1-JMM-8 ) ;
3858: LD_EXP 1
3862: PPUSH
3863: LD_STRING D1-JMM-8
3865: PPUSH
3866: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3870: LD_EXP 1
3874: PPUSH
3875: LD_STRING D1-JMM-8a
3877: PPUSH
3878: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3882: LD_EXP 17
3886: PPUSH
3887: LD_STRING D1-Har-8
3889: PPUSH
3890: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3894: LD_EXP 1
3898: PPUSH
3899: LD_STRING D1-JMM-9
3901: PPUSH
3902: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3906: LD_EXP 17
3910: PPUSH
3911: LD_STRING D1-Har-9
3913: PPUSH
3914: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3918: LD_EXP 1
3922: PPUSH
3923: LD_STRING D1-JMM-10
3925: PPUSH
3926: CALL_OW 88
// if IsOK ( Denis ) then
3930: LD_EXP 3
3934: PPUSH
3935: CALL_OW 302
3939: IFFALSE 3953
// Say ( JMM , D1-JMM-10a ) ;
3941: LD_EXP 1
3945: PPUSH
3946: LD_STRING D1-JMM-10a
3948: PPUSH
3949: CALL_OW 88
// SelectDeltaCharacters ;
3953: CALL 4437 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 150 ) ;
3957: LD_EXP 21
3961: PUSH
3962: LD_INT 1
3964: ARRAY
3965: PPUSH
3966: CALL_OW 274
3970: PPUSH
3971: LD_INT 1
3973: PPUSH
3974: LD_INT 150
3976: PPUSH
3977: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) then
3981: LD_INT 22
3983: PUSH
3984: LD_INT 1
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: PUSH
3991: LD_INT 30
3993: PUSH
3994: LD_INT 29
3996: PUSH
3997: EMPTY
3998: LIST
3999: LIST
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: PPUSH
4005: CALL_OW 69
4009: IFFALSE 4035
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
4011: LD_EXP 21
4015: PUSH
4016: LD_INT 1
4018: ARRAY
4019: PPUSH
4020: CALL_OW 274
4024: PPUSH
4025: LD_INT 2
4027: PPUSH
4028: LD_INT 300
4030: PPUSH
4031: CALL_OW 277
// InGameOff ;
4035: CALL_OW 9
// Query ( Q1 ) ;
4039: LD_STRING Q1
4041: PPUSH
4042: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
4046: LD_INT 3
4048: PPUSH
4049: LD_INT 1
4051: PPUSH
4052: CALL_OW 424
// if IsInUnit ( JMM ) then
4056: LD_EXP 1
4060: PPUSH
4061: CALL_OW 310
4065: IFFALSE 4076
// ComExitBuilding ( JMM ) ;
4067: LD_EXP 1
4071: PPUSH
4072: CALL_OW 122
// end ;
4076: LD_VAR 0 1
4080: RET
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
4081: LD_INT 3
4083: PPUSH
4084: LD_INT 22
4086: PUSH
4087: LD_INT 1
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: PUSH
4094: LD_INT 21
4096: PUSH
4097: LD_INT 1
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PPUSH
4108: CALL_OW 71
4112: PUSH
4113: LD_INT 0
4115: EQUAL
4116: IFFALSE 4434
4118: GO 4120
4120: DISABLE
4121: LD_INT 0
4123: PPUSH
4124: PPUSH
// begin SaveDeltaCharacters ;
4125: CALL 4809 0 0
// if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) then
4129: LD_INT 3
4131: PPUSH
4132: LD_INT 21
4134: PUSH
4135: LD_INT 2
4137: PUSH
4138: EMPTY
4139: LIST
4140: LIST
4141: PUSH
4142: LD_INT 3
4144: PUSH
4145: LD_INT 58
4147: PUSH
4148: EMPTY
4149: LIST
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: PPUSH
4159: CALL_OW 70
4163: IFFALSE 4420
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
4165: LD_ADDR_VAR 0 1
4169: PUSH
4170: LD_INT 3
4172: PPUSH
4173: LD_INT 21
4175: PUSH
4176: LD_INT 2
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: PUSH
4183: LD_INT 3
4185: PUSH
4186: LD_INT 58
4188: PUSH
4189: EMPTY
4190: LIST
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: PUSH
4196: EMPTY
4197: LIST
4198: LIST
4199: PPUSH
4200: CALL_OW 70
4204: PUSH
4205: FOR_IN
4206: IFFALSE 4418
// begin cargoType := GetCargoType ( i ) ;
4208: LD_ADDR_VAR 0 2
4212: PUSH
4213: LD_VAR 0 1
4217: PPUSH
4218: CALL_OW 288
4222: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4223: LD_VAR 0 1
4227: PPUSH
4228: CALL_OW 264
4232: PUSH
4233: LD_INT 12
4235: EQUAL
4236: IFFALSE 4333
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] else
4238: LD_ADDR_EXP 15
4242: PUSH
4243: LD_EXP 15
4247: PUSH
4248: LD_VAR 0 1
4252: PPUSH
4253: CALL_OW 248
4257: PUSH
4258: LD_VAR 0 1
4262: PPUSH
4263: CALL_OW 265
4267: PUSH
4268: LD_VAR 0 1
4272: PPUSH
4273: CALL_OW 262
4277: PUSH
4278: LD_VAR 0 1
4282: PPUSH
4283: CALL_OW 263
4287: PUSH
4288: LD_VAR 0 1
4292: PPUSH
4293: CALL_OW 264
4297: PUSH
4298: LD_VAR 0 2
4302: PUSH
4303: LD_VAR 0 1
4307: PPUSH
4308: LD_VAR 0 2
4312: PPUSH
4313: CALL_OW 289
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: PUSH
4327: EMPTY
4328: LIST
4329: ADD
4330: ST_TO_ADDR
4331: GO 4404
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4333: LD_ADDR_EXP 15
4337: PUSH
4338: LD_EXP 15
4342: PUSH
4343: LD_VAR 0 1
4347: PPUSH
4348: CALL_OW 248
4352: PUSH
4353: LD_VAR 0 1
4357: PPUSH
4358: CALL_OW 265
4362: PUSH
4363: LD_VAR 0 1
4367: PPUSH
4368: CALL_OW 262
4372: PUSH
4373: LD_VAR 0 1
4377: PPUSH
4378: CALL_OW 263
4382: PUSH
4383: LD_VAR 0 1
4387: PPUSH
4388: CALL_OW 264
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: PUSH
4400: EMPTY
4401: LIST
4402: ADD
4403: ST_TO_ADDR
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4404: LD_EXP 15
4408: PPUSH
4409: LD_STRING 06_VehiclesIn06_1
4411: PPUSH
4412: CALL_OW 39
// end ;
4416: GO 4205
4418: POP
4419: POP
// end ; SaveCargos ;
4420: CALL 5589 0 0
// ChangeMap ( 6 , %_cont ) ;
4424: LD_INT 6
4426: PPUSH
4427: LD_STRING %_cont
4429: PPUSH
4430: CALL_OW 340
// end ; end_of_file
4434: PPOPN 2
4436: END
// export function SelectDeltaCharacters ; var i , yourPeople ; begin
4437: LD_INT 0
4439: PPUSH
4440: PPUSH
4441: PPUSH
// selectedPeople := [ ] ;
4442: LD_ADDR_EXP 18
4446: PUSH
4447: EMPTY
4448: ST_TO_ADDR
// yourPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4449: LD_ADDR_VAR 0 3
4453: PUSH
4454: LD_INT 22
4456: PUSH
4457: LD_INT 1
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: PUSH
4464: LD_INT 21
4466: PUSH
4467: LD_INT 1
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: PUSH
4474: LD_INT 2
4476: PUSH
4477: LD_INT 25
4479: PUSH
4480: LD_INT 1
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: PUSH
4487: LD_INT 25
4489: PUSH
4490: LD_INT 2
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: PUSH
4497: LD_INT 25
4499: PUSH
4500: LD_INT 3
4502: PUSH
4503: EMPTY
4504: LIST
4505: LIST
4506: PUSH
4507: LD_INT 25
4509: PUSH
4510: LD_INT 4
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: PPUSH
4529: CALL_OW 69
4533: PUSH
4534: LD_EXP 1
4538: PUSH
4539: LD_EXP 16
4543: PUSH
4544: LD_EXP 3
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: LIST
4553: DIFF
4554: ST_TO_ADDR
// selectedPeople := CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4555: LD_ADDR_EXP 18
4559: PUSH
4560: LD_STRING text
4562: PPUSH
4563: LD_INT 5
4565: PPUSH
4566: LD_INT 5
4568: PPUSH
4569: LD_INT -5
4571: PUSH
4572: LD_EXP 1
4576: PUSH
4577: LD_INT -6
4579: PUSH
4580: LD_INT -2
4582: PUSH
4583: LD_INT -3
4585: PUSH
4586: LD_INT -5
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: PUSH
4597: LD_VAR 0 3
4601: ADD
4602: PUSH
4603: LD_INT -6
4605: PUSH
4606: LD_INT -4
4608: PUSH
4609: LD_EXP 3
4613: PUSH
4614: LD_EXP 16
4618: PUSH
4619: EMPTY
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: ADD
4625: PPUSH
4626: LD_INT 1
4628: PUSH
4629: LD_INT 3
4631: PUSH
4632: LD_INT 2
4634: PUSH
4635: LD_INT 1
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: PUSH
4642: LD_INT 4
4644: PUSH
4645: EMPTY
4646: LIST
4647: LIST
4648: LIST
4649: LIST
4650: PPUSH
4651: CALL_OW 42
4655: ST_TO_ADDR
// ComStop ( selectedPeople ) ;
4656: LD_EXP 18
4660: PPUSH
4661: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4665: LD_INT 22
4667: PUSH
4668: LD_INT 1
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: PUSH
4675: LD_INT 21
4677: PUSH
4678: LD_INT 1
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: PPUSH
4689: CALL_OW 69
4693: PPUSH
4694: LD_INT 4
4696: PPUSH
4697: CALL_OW 235
// for i in selectedPeople do
4701: LD_ADDR_VAR 0 2
4705: PUSH
4706: LD_EXP 18
4710: PUSH
4711: FOR_IN
4712: IFFALSE 4728
// SetSide ( i , 1 ) ;
4714: LD_VAR 0 2
4718: PPUSH
4719: LD_INT 1
4721: PPUSH
4722: CALL_OW 235
4726: GO 4711
4728: POP
4729: POP
// for i in yourApemans do
4730: LD_ADDR_VAR 0 2
4734: PUSH
4735: LD_EXP 14
4739: PUSH
4740: FOR_IN
4741: IFFALSE 4757
// SetSide ( i , 1 ) ;
4743: LD_VAR 0 2
4747: PPUSH
4748: LD_INT 1
4750: PPUSH
4751: CALL_OW 235
4755: GO 4740
4757: POP
4758: POP
// if Mike then
4759: LD_EXP 10
4763: IFFALSE 4777
// SetSide ( Mike , 1 ) ;
4765: LD_EXP 10
4769: PPUSH
4770: LD_INT 1
4772: PPUSH
4773: CALL_OW 235
// SetSide ( JMM , 1 ) ;
4777: LD_EXP 1
4781: PPUSH
4782: LD_INT 1
4784: PPUSH
4785: CALL_OW 235
// SetSkill ( yourApemans , 2 , 3 ) ;
4789: LD_EXP 14
4793: PPUSH
4794: LD_INT 2
4796: PPUSH
4797: LD_INT 3
4799: PPUSH
4800: CALL_OW 237
// end ;
4804: LD_VAR 0 1
4808: RET
// export function SaveDeltaCharacters ; begin
4809: LD_INT 0
4811: PPUSH
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4812: LD_EXP 1
4816: PPUSH
4817: LD_EXP 23
4821: PUSH
4822: LD_STRING JMM
4824: STR
4825: PPUSH
4826: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4830: LD_EXP 16
4834: PPUSH
4835: LD_STRING DeltaDoctor
4837: PPUSH
4838: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4842: LD_EXP 3
4846: PPUSH
4847: LD_EXP 23
4851: PUSH
4852: LD_STRING Denis
4854: STR
4855: PPUSH
4856: CALL_OW 38
// if Lisa in selectedPeople then
4860: LD_EXP 4
4864: PUSH
4865: LD_EXP 18
4869: IN
4870: IFFALSE 4902
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4872: LD_EXP 4
4876: PPUSH
4877: LD_EXP 23
4881: PUSH
4882: LD_STRING Lisa
4884: STR
4885: PPUSH
4886: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4890: LD_INT 1
4892: PPUSH
4893: LD_STRING LisaIn06
4895: PPUSH
4896: CALL_OW 39
// end else
4900: GO 4923
// if IsOk ( Lisa ) then
4902: LD_EXP 4
4906: PPUSH
4907: CALL_OW 302
4911: IFFALSE 4923
// SaveVariable ( 1 , LisaStayInDelta ) ;
4913: LD_INT 1
4915: PPUSH
4916: LD_STRING LisaStayInDelta
4918: PPUSH
4919: CALL_OW 39
// if Bobby in selectedPeople then
4923: LD_EXP 6
4927: PUSH
4928: LD_EXP 18
4932: IN
4933: IFFALSE 4965
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4935: LD_EXP 6
4939: PPUSH
4940: LD_EXP 23
4944: PUSH
4945: LD_STRING Bobby
4947: STR
4948: PPUSH
4949: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4953: LD_INT 1
4955: PPUSH
4956: LD_STRING BobbyIn06
4958: PPUSH
4959: CALL_OW 39
// end else
4963: GO 4986
// if IsOk ( Bobby ) then
4965: LD_EXP 6
4969: PPUSH
4970: CALL_OW 302
4974: IFFALSE 4986
// SaveVariable ( 1 , BobbyStayInDelta ) ;
4976: LD_INT 1
4978: PPUSH
4979: LD_STRING BobbyStayInDelta
4981: PPUSH
4982: CALL_OW 39
// if Cyrus in selectedPeople then
4986: LD_EXP 7
4990: PUSH
4991: LD_EXP 18
4995: IN
4996: IFFALSE 5028
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4998: LD_EXP 7
5002: PPUSH
5003: LD_EXP 23
5007: PUSH
5008: LD_STRING Cyrus
5010: STR
5011: PPUSH
5012: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
5016: LD_INT 1
5018: PPUSH
5019: LD_STRING CyrusIn06
5021: PPUSH
5022: CALL_OW 39
// end else
5026: GO 5049
// if IsOk ( Cyrus ) then
5028: LD_EXP 7
5032: PPUSH
5033: CALL_OW 302
5037: IFFALSE 5049
// SaveVariable ( 1 , CyrusStayInDelta ) ;
5039: LD_INT 1
5041: PPUSH
5042: LD_STRING CyrusStayInDelta
5044: PPUSH
5045: CALL_OW 39
// if Frank in selectedPeople then
5049: LD_EXP 5
5053: PUSH
5054: LD_EXP 18
5058: IN
5059: IFFALSE 5091
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5061: LD_EXP 5
5065: PPUSH
5066: LD_EXP 23
5070: PUSH
5071: LD_STRING Frank
5073: STR
5074: PPUSH
5075: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
5079: LD_INT 1
5081: PPUSH
5082: LD_STRING FrankIn06
5084: PPUSH
5085: CALL_OW 39
// end else
5089: GO 5112
// if IsOk ( Frank ) then
5091: LD_EXP 5
5095: PPUSH
5096: CALL_OW 302
5100: IFFALSE 5112
// SaveVariable ( 1 , FrankStayInDelta ) ;
5102: LD_INT 1
5104: PPUSH
5105: LD_STRING FrankStayInDelta
5107: PPUSH
5108: CALL_OW 39
// if Brown in selectedPeople then
5112: LD_EXP 8
5116: PUSH
5117: LD_EXP 18
5121: IN
5122: IFFALSE 5154
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5124: LD_EXP 8
5128: PPUSH
5129: LD_EXP 23
5133: PUSH
5134: LD_STRING Brown
5136: STR
5137: PPUSH
5138: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
5142: LD_INT 1
5144: PPUSH
5145: LD_STRING BrownIn06
5147: PPUSH
5148: CALL_OW 39
// end else
5152: GO 5175
// if IsOk ( Brown ) then
5154: LD_EXP 8
5158: PPUSH
5159: CALL_OW 302
5163: IFFALSE 5175
// SaveVariable ( 1 , BrownStayInDelta ) ;
5165: LD_INT 1
5167: PPUSH
5168: LD_STRING BrownStayInDelta
5170: PPUSH
5171: CALL_OW 39
// if Donaldson in selectedPeople then
5175: LD_EXP 9
5179: PUSH
5180: LD_EXP 18
5184: IN
5185: IFFALSE 5217
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5187: LD_EXP 9
5191: PPUSH
5192: LD_EXP 23
5196: PUSH
5197: LD_STRING Donaldson
5199: STR
5200: PPUSH
5201: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5205: LD_INT 1
5207: PPUSH
5208: LD_STRING DonaldsonIn06
5210: PPUSH
5211: CALL_OW 39
// end else
5215: GO 5238
// if IsOk ( Donaldson ) then
5217: LD_EXP 9
5221: PPUSH
5222: CALL_OW 302
5226: IFFALSE 5238
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5228: LD_INT 1
5230: PPUSH
5231: LD_STRING DonaldsonStayInDelta
5233: PPUSH
5234: CALL_OW 39
// if Gladstone in selectedPeople then
5238: LD_EXP 2
5242: PUSH
5243: LD_EXP 18
5247: IN
5248: IFFALSE 5280
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5250: LD_EXP 2
5254: PPUSH
5255: LD_EXP 23
5259: PUSH
5260: LD_STRING Gladstone
5262: STR
5263: PPUSH
5264: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
5268: LD_INT 1
5270: PPUSH
5271: LD_STRING GladstoneIn06
5273: PPUSH
5274: CALL_OW 39
// end else
5278: GO 5301
// if IsOk ( Gladstone ) then
5280: LD_EXP 2
5284: PPUSH
5285: CALL_OW 302
5289: IFFALSE 5301
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5291: LD_INT 1
5293: PPUSH
5294: LD_STRING GladstoneStayInDelta
5296: PPUSH
5297: CALL_OW 39
// if Mike then
5301: LD_EXP 10
5305: IFFALSE 5325
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
5307: LD_EXP 10
5311: PPUSH
5312: LD_EXP 23
5316: PUSH
5317: LD_STRING Mike
5319: STR
5320: PPUSH
5321: CALL_OW 38
// selectedPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ;
5325: LD_ADDR_EXP 18
5329: PUSH
5330: LD_INT 22
5332: PUSH
5333: LD_INT 1
5335: PUSH
5336: EMPTY
5337: LIST
5338: LIST
5339: PUSH
5340: LD_INT 23
5342: PUSH
5343: LD_INT 1
5345: PUSH
5346: EMPTY
5347: LIST
5348: LIST
5349: PUSH
5350: LD_INT 21
5352: PUSH
5353: LD_INT 1
5355: PUSH
5356: EMPTY
5357: LIST
5358: LIST
5359: PUSH
5360: EMPTY
5361: LIST
5362: LIST
5363: LIST
5364: PPUSH
5365: CALL_OW 69
5369: ST_TO_ADDR
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5370: LD_EXP 14
5374: PPUSH
5375: LD_STRING ApeIn06
5377: PPUSH
5378: CALL_OW 38
// SaveCharacters ( selectedPeople diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersIn06 ) ;
5382: LD_EXP 18
5386: PUSH
5387: LD_EXP 1
5391: PUSH
5392: LD_EXP 4
5396: PUSH
5397: LD_EXP 6
5401: PUSH
5402: LD_EXP 7
5406: PUSH
5407: LD_EXP 5
5411: PUSH
5412: LD_EXP 8
5416: PUSH
5417: LD_EXP 9
5421: PUSH
5422: LD_EXP 2
5426: PUSH
5427: LD_EXP 3
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: DIFF
5443: PPUSH
5444: LD_STRING OthersIn06
5446: PPUSH
5447: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersStayInDelta ) ;
5451: LD_INT 22
5453: PUSH
5454: LD_INT 4
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: PUSH
5461: LD_INT 2
5463: PUSH
5464: LD_INT 25
5466: PUSH
5467: LD_INT 1
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: PUSH
5474: LD_INT 25
5476: PUSH
5477: LD_INT 2
5479: PUSH
5480: EMPTY
5481: LIST
5482: LIST
5483: PUSH
5484: LD_INT 25
5486: PUSH
5487: LD_INT 3
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: PUSH
5494: LD_INT 25
5496: PUSH
5497: LD_INT 4
5499: PUSH
5500: EMPTY
5501: LIST
5502: LIST
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: LIST
5508: LIST
5509: LIST
5510: PUSH
5511: EMPTY
5512: LIST
5513: LIST
5514: PPUSH
5515: CALL_OW 69
5519: PUSH
5520: LD_EXP 16
5524: PUSH
5525: LD_EXP 4
5529: PUSH
5530: LD_EXP 6
5534: PUSH
5535: LD_EXP 7
5539: PUSH
5540: LD_EXP 5
5544: PUSH
5545: LD_EXP 8
5549: PUSH
5550: LD_EXP 9
5554: PUSH
5555: LD_EXP 2
5559: PUSH
5560: LD_EXP 3
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: LIST
5573: LIST
5574: LIST
5575: DIFF
5576: PPUSH
5577: LD_STRING OthersStayInDelta
5579: PPUSH
5580: CALL_OW 38
// end ;
5584: LD_VAR 0 1
5588: RET
// export function SaveCargos ; var i ; begin
5589: LD_INT 0
5591: PPUSH
5592: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
5593: LD_ADDR_VAR 0 2
5597: PUSH
5598: LD_INT 3
5600: PPUSH
5601: LD_INT 22
5603: PUSH
5604: LD_INT 1
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: PUSH
5611: LD_INT 34
5613: PUSH
5614: LD_INT 12
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: PPUSH
5625: CALL_OW 70
5629: PUSH
5630: FOR_IN
5631: IFFALSE 5659
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
5633: LD_ADDR_EXP 22
5637: PUSH
5638: LD_EXP 22
5642: PUSH
5643: LD_VAR 0 2
5647: PPUSH
5648: CALL 66811 0 1
5652: PUSH
5653: EMPTY
5654: LIST
5655: ADD
5656: ST_TO_ADDR
5657: GO 5630
5659: POP
5660: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
5661: LD_EXP 22
5665: PPUSH
5666: LD_STRING 06_ResourcesInCargo06_1
5668: PPUSH
5669: CALL_OW 39
// end ; end_of_file
5673: LD_VAR 0 1
5677: RET
// on Command ( comandid ) do var i ;
5678: LD_INT 0
5680: PPUSH
// begin if comandid = 65 then
5681: LD_VAR 0 1
5685: PUSH
5686: LD_INT 65
5688: EQUAL
5689: IFFALSE 5730
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5691: LD_ADDR_VAR 0 2
5695: PUSH
5696: LD_INT 22
5698: PUSH
5699: LD_INT 1
5701: PUSH
5702: EMPTY
5703: LIST
5704: LIST
5705: PUSH
5706: EMPTY
5707: LIST
5708: PPUSH
5709: CALL_OW 69
5713: PUSH
5714: FOR_IN
5715: IFFALSE 5728
// ComStop ( i ) ;
5717: LD_VAR 0 2
5721: PPUSH
5722: CALL_OW 141
5726: GO 5714
5728: POP
5729: POP
// end ;
5730: PPOPN 2
5732: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5733: LD_INT 0
5735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5736: LD_ADDR_VAR 0 3
5740: PUSH
5741: LD_INT 22
5743: PUSH
5744: LD_INT 1
5746: PUSH
5747: EMPTY
5748: LIST
5749: LIST
5750: PUSH
5751: LD_INT 21
5753: PUSH
5754: LD_INT 3
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: PUSH
5761: LD_INT 30
5763: PUSH
5764: LD_INT 0
5766: PUSH
5767: EMPTY
5768: LIST
5769: LIST
5770: PUSH
5771: EMPTY
5772: LIST
5773: LIST
5774: LIST
5775: PPUSH
5776: CALL_OW 69
5780: ST_TO_ADDR
// if not tmp then
5781: LD_VAR 0 3
5785: NOT
5786: IFFALSE 5790
// exit ;
5788: GO 5820
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5790: LD_VAR 0 1
5794: PPUSH
5795: LD_VAR 0 3
5799: PUSH
5800: LD_INT 1
5802: ARRAY
5803: PPUSH
5804: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5808: LD_VAR 0 1
5812: PPUSH
5813: LD_INT 4
5815: PPUSH
5816: CALL_OW 235
// end ;
5820: PPOPN 3
5822: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5823: LD_VAR 0 1
5827: PUSH
5828: LD_EXP 1
5832: EQUAL
5833: IFFALSE 5842
// YouLost ( JMM ) ;
5835: LD_STRING JMM
5837: PPUSH
5838: CALL_OW 104
// SOS_UnitDestroyed ( un ) ;
5842: LD_VAR 0 1
5846: PPUSH
5847: CALL 21665 0 1
// end ;
5851: PPOPN 1
5853: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5854: LD_VAR 0 1
5858: PPUSH
5859: LD_VAR 0 2
5863: PPUSH
5864: CALL 21785 0 2
// end ; end_of_file
5868: PPOPN 2
5870: END
// export globalGameSaveCounter ; every 0 0$1 do
5871: GO 5873
5873: DISABLE
// begin enable ;
5874: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5875: LD_STRING updateTimer(
5877: PUSH
5878: LD_OWVAR 1
5882: STR
5883: PUSH
5884: LD_STRING );
5886: STR
5887: PPUSH
5888: CALL_OW 559
// end ;
5892: END
// every 0 0$1 do
5893: GO 5895
5895: DISABLE
// begin globalGameSaveCounter := 0 ;
5896: LD_ADDR_EXP 25
5900: PUSH
5901: LD_INT 0
5903: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
5904: LD_STRING setGameSaveCounter(0)
5906: PPUSH
5907: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
5911: LD_STRING initStreamRollete();
5913: PPUSH
5914: CALL_OW 559
// InitStreamMode ;
5918: CALL 7244 0 0
// DefineStreamItems ( false ) ;
5922: LD_INT 0
5924: PPUSH
5925: CALL 7708 0 1
// end ;
5929: END
// export function SOS_MapStart ( ) ; begin
5930: LD_INT 0
5932: PPUSH
// if streamModeActive then
5933: LD_EXP 26
5937: IFFALSE 5946
// DefineStreamItems ( true ) ;
5939: LD_INT 1
5941: PPUSH
5942: CALL 7708 0 1
// UpdateLuaVariables ( ) ;
5946: CALL 5963 0 0
// UpdateFactoryWaypoints ( ) ;
5950: CALL 20569 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5954: CALL 20826 0 0
// end ;
5958: LD_VAR 0 1
5962: RET
// function UpdateLuaVariables ( ) ; begin
5963: LD_INT 0
5965: PPUSH
// if globalGameSaveCounter then
5966: LD_EXP 25
5970: IFFALSE 6004
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
5972: LD_ADDR_EXP 25
5976: PUSH
5977: LD_EXP 25
5981: PPUSH
5982: CALL 64607 0 1
5986: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5987: LD_STRING setGameSaveCounter(
5989: PUSH
5990: LD_EXP 25
5994: STR
5995: PUSH
5996: LD_STRING )
5998: STR
5999: PPUSH
6000: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
6004: LD_STRING setGameDifficulty(
6006: PUSH
6007: LD_OWVAR 67
6011: STR
6012: PUSH
6013: LD_STRING )
6015: STR
6016: PPUSH
6017: CALL_OW 559
// end ;
6021: LD_VAR 0 1
6025: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
6026: LD_INT 0
6028: PPUSH
// if p2 = stream_mode then
6029: LD_VAR 0 2
6033: PUSH
6034: LD_INT 100
6036: EQUAL
6037: IFFALSE 7040
// begin if not StreamModeActive then
6039: LD_EXP 26
6043: NOT
6044: IFFALSE 6054
// StreamModeActive := true ;
6046: LD_ADDR_EXP 26
6050: PUSH
6051: LD_INT 1
6053: ST_TO_ADDR
// if p3 = 0 then
6054: LD_VAR 0 3
6058: PUSH
6059: LD_INT 0
6061: EQUAL
6062: IFFALSE 6068
// InitStreamMode ;
6064: CALL 7244 0 0
// if p3 = 1 then
6068: LD_VAR 0 3
6072: PUSH
6073: LD_INT 1
6075: EQUAL
6076: IFFALSE 6086
// sRocket := true ;
6078: LD_ADDR_EXP 31
6082: PUSH
6083: LD_INT 1
6085: ST_TO_ADDR
// if p3 = 2 then
6086: LD_VAR 0 3
6090: PUSH
6091: LD_INT 2
6093: EQUAL
6094: IFFALSE 6104
// sSpeed := true ;
6096: LD_ADDR_EXP 30
6100: PUSH
6101: LD_INT 1
6103: ST_TO_ADDR
// if p3 = 3 then
6104: LD_VAR 0 3
6108: PUSH
6109: LD_INT 3
6111: EQUAL
6112: IFFALSE 6122
// sEngine := true ;
6114: LD_ADDR_EXP 32
6118: PUSH
6119: LD_INT 1
6121: ST_TO_ADDR
// if p3 = 4 then
6122: LD_VAR 0 3
6126: PUSH
6127: LD_INT 4
6129: EQUAL
6130: IFFALSE 6140
// sSpec := true ;
6132: LD_ADDR_EXP 29
6136: PUSH
6137: LD_INT 1
6139: ST_TO_ADDR
// if p3 = 5 then
6140: LD_VAR 0 3
6144: PUSH
6145: LD_INT 5
6147: EQUAL
6148: IFFALSE 6158
// sLevel := true ;
6150: LD_ADDR_EXP 33
6154: PUSH
6155: LD_INT 1
6157: ST_TO_ADDR
// if p3 = 6 then
6158: LD_VAR 0 3
6162: PUSH
6163: LD_INT 6
6165: EQUAL
6166: IFFALSE 6176
// sArmoury := true ;
6168: LD_ADDR_EXP 34
6172: PUSH
6173: LD_INT 1
6175: ST_TO_ADDR
// if p3 = 7 then
6176: LD_VAR 0 3
6180: PUSH
6181: LD_INT 7
6183: EQUAL
6184: IFFALSE 6194
// sRadar := true ;
6186: LD_ADDR_EXP 35
6190: PUSH
6191: LD_INT 1
6193: ST_TO_ADDR
// if p3 = 8 then
6194: LD_VAR 0 3
6198: PUSH
6199: LD_INT 8
6201: EQUAL
6202: IFFALSE 6212
// sBunker := true ;
6204: LD_ADDR_EXP 36
6208: PUSH
6209: LD_INT 1
6211: ST_TO_ADDR
// if p3 = 9 then
6212: LD_VAR 0 3
6216: PUSH
6217: LD_INT 9
6219: EQUAL
6220: IFFALSE 6230
// sHack := true ;
6222: LD_ADDR_EXP 37
6226: PUSH
6227: LD_INT 1
6229: ST_TO_ADDR
// if p3 = 10 then
6230: LD_VAR 0 3
6234: PUSH
6235: LD_INT 10
6237: EQUAL
6238: IFFALSE 6248
// sFire := true ;
6240: LD_ADDR_EXP 38
6244: PUSH
6245: LD_INT 1
6247: ST_TO_ADDR
// if p3 = 11 then
6248: LD_VAR 0 3
6252: PUSH
6253: LD_INT 11
6255: EQUAL
6256: IFFALSE 6266
// sRefresh := true ;
6258: LD_ADDR_EXP 39
6262: PUSH
6263: LD_INT 1
6265: ST_TO_ADDR
// if p3 = 12 then
6266: LD_VAR 0 3
6270: PUSH
6271: LD_INT 12
6273: EQUAL
6274: IFFALSE 6284
// sExp := true ;
6276: LD_ADDR_EXP 40
6280: PUSH
6281: LD_INT 1
6283: ST_TO_ADDR
// if p3 = 13 then
6284: LD_VAR 0 3
6288: PUSH
6289: LD_INT 13
6291: EQUAL
6292: IFFALSE 6302
// sDepot := true ;
6294: LD_ADDR_EXP 41
6298: PUSH
6299: LD_INT 1
6301: ST_TO_ADDR
// if p3 = 14 then
6302: LD_VAR 0 3
6306: PUSH
6307: LD_INT 14
6309: EQUAL
6310: IFFALSE 6320
// sFlag := true ;
6312: LD_ADDR_EXP 42
6316: PUSH
6317: LD_INT 1
6319: ST_TO_ADDR
// if p3 = 15 then
6320: LD_VAR 0 3
6324: PUSH
6325: LD_INT 15
6327: EQUAL
6328: IFFALSE 6338
// sKamikadze := true ;
6330: LD_ADDR_EXP 50
6334: PUSH
6335: LD_INT 1
6337: ST_TO_ADDR
// if p3 = 16 then
6338: LD_VAR 0 3
6342: PUSH
6343: LD_INT 16
6345: EQUAL
6346: IFFALSE 6356
// sTroll := true ;
6348: LD_ADDR_EXP 51
6352: PUSH
6353: LD_INT 1
6355: ST_TO_ADDR
// if p3 = 17 then
6356: LD_VAR 0 3
6360: PUSH
6361: LD_INT 17
6363: EQUAL
6364: IFFALSE 6374
// sSlow := true ;
6366: LD_ADDR_EXP 52
6370: PUSH
6371: LD_INT 1
6373: ST_TO_ADDR
// if p3 = 18 then
6374: LD_VAR 0 3
6378: PUSH
6379: LD_INT 18
6381: EQUAL
6382: IFFALSE 6392
// sLack := true ;
6384: LD_ADDR_EXP 53
6388: PUSH
6389: LD_INT 1
6391: ST_TO_ADDR
// if p3 = 19 then
6392: LD_VAR 0 3
6396: PUSH
6397: LD_INT 19
6399: EQUAL
6400: IFFALSE 6410
// sTank := true ;
6402: LD_ADDR_EXP 55
6406: PUSH
6407: LD_INT 1
6409: ST_TO_ADDR
// if p3 = 20 then
6410: LD_VAR 0 3
6414: PUSH
6415: LD_INT 20
6417: EQUAL
6418: IFFALSE 6428
// sRemote := true ;
6420: LD_ADDR_EXP 56
6424: PUSH
6425: LD_INT 1
6427: ST_TO_ADDR
// if p3 = 21 then
6428: LD_VAR 0 3
6432: PUSH
6433: LD_INT 21
6435: EQUAL
6436: IFFALSE 6446
// sPowell := true ;
6438: LD_ADDR_EXP 57
6442: PUSH
6443: LD_INT 1
6445: ST_TO_ADDR
// if p3 = 22 then
6446: LD_VAR 0 3
6450: PUSH
6451: LD_INT 22
6453: EQUAL
6454: IFFALSE 6464
// sTeleport := true ;
6456: LD_ADDR_EXP 60
6460: PUSH
6461: LD_INT 1
6463: ST_TO_ADDR
// if p3 = 23 then
6464: LD_VAR 0 3
6468: PUSH
6469: LD_INT 23
6471: EQUAL
6472: IFFALSE 6482
// sOilTower := true ;
6474: LD_ADDR_EXP 62
6478: PUSH
6479: LD_INT 1
6481: ST_TO_ADDR
// if p3 = 24 then
6482: LD_VAR 0 3
6486: PUSH
6487: LD_INT 24
6489: EQUAL
6490: IFFALSE 6500
// sShovel := true ;
6492: LD_ADDR_EXP 63
6496: PUSH
6497: LD_INT 1
6499: ST_TO_ADDR
// if p3 = 25 then
6500: LD_VAR 0 3
6504: PUSH
6505: LD_INT 25
6507: EQUAL
6508: IFFALSE 6518
// sSheik := true ;
6510: LD_ADDR_EXP 64
6514: PUSH
6515: LD_INT 1
6517: ST_TO_ADDR
// if p3 = 26 then
6518: LD_VAR 0 3
6522: PUSH
6523: LD_INT 26
6525: EQUAL
6526: IFFALSE 6536
// sEarthquake := true ;
6528: LD_ADDR_EXP 66
6532: PUSH
6533: LD_INT 1
6535: ST_TO_ADDR
// if p3 = 27 then
6536: LD_VAR 0 3
6540: PUSH
6541: LD_INT 27
6543: EQUAL
6544: IFFALSE 6554
// sAI := true ;
6546: LD_ADDR_EXP 67
6550: PUSH
6551: LD_INT 1
6553: ST_TO_ADDR
// if p3 = 28 then
6554: LD_VAR 0 3
6558: PUSH
6559: LD_INT 28
6561: EQUAL
6562: IFFALSE 6572
// sCargo := true ;
6564: LD_ADDR_EXP 70
6568: PUSH
6569: LD_INT 1
6571: ST_TO_ADDR
// if p3 = 29 then
6572: LD_VAR 0 3
6576: PUSH
6577: LD_INT 29
6579: EQUAL
6580: IFFALSE 6590
// sDLaser := true ;
6582: LD_ADDR_EXP 71
6586: PUSH
6587: LD_INT 1
6589: ST_TO_ADDR
// if p3 = 30 then
6590: LD_VAR 0 3
6594: PUSH
6595: LD_INT 30
6597: EQUAL
6598: IFFALSE 6608
// sExchange := true ;
6600: LD_ADDR_EXP 72
6604: PUSH
6605: LD_INT 1
6607: ST_TO_ADDR
// if p3 = 31 then
6608: LD_VAR 0 3
6612: PUSH
6613: LD_INT 31
6615: EQUAL
6616: IFFALSE 6626
// sFac := true ;
6618: LD_ADDR_EXP 73
6622: PUSH
6623: LD_INT 1
6625: ST_TO_ADDR
// if p3 = 32 then
6626: LD_VAR 0 3
6630: PUSH
6631: LD_INT 32
6633: EQUAL
6634: IFFALSE 6644
// sPower := true ;
6636: LD_ADDR_EXP 74
6640: PUSH
6641: LD_INT 1
6643: ST_TO_ADDR
// if p3 = 33 then
6644: LD_VAR 0 3
6648: PUSH
6649: LD_INT 33
6651: EQUAL
6652: IFFALSE 6662
// sRandom := true ;
6654: LD_ADDR_EXP 75
6658: PUSH
6659: LD_INT 1
6661: ST_TO_ADDR
// if p3 = 34 then
6662: LD_VAR 0 3
6666: PUSH
6667: LD_INT 34
6669: EQUAL
6670: IFFALSE 6680
// sShield := true ;
6672: LD_ADDR_EXP 76
6676: PUSH
6677: LD_INT 1
6679: ST_TO_ADDR
// if p3 = 35 then
6680: LD_VAR 0 3
6684: PUSH
6685: LD_INT 35
6687: EQUAL
6688: IFFALSE 6698
// sTime := true ;
6690: LD_ADDR_EXP 77
6694: PUSH
6695: LD_INT 1
6697: ST_TO_ADDR
// if p3 = 36 then
6698: LD_VAR 0 3
6702: PUSH
6703: LD_INT 36
6705: EQUAL
6706: IFFALSE 6716
// sTools := true ;
6708: LD_ADDR_EXP 78
6712: PUSH
6713: LD_INT 1
6715: ST_TO_ADDR
// if p3 = 101 then
6716: LD_VAR 0 3
6720: PUSH
6721: LD_INT 101
6723: EQUAL
6724: IFFALSE 6734
// sSold := true ;
6726: LD_ADDR_EXP 43
6730: PUSH
6731: LD_INT 1
6733: ST_TO_ADDR
// if p3 = 102 then
6734: LD_VAR 0 3
6738: PUSH
6739: LD_INT 102
6741: EQUAL
6742: IFFALSE 6752
// sDiff := true ;
6744: LD_ADDR_EXP 44
6748: PUSH
6749: LD_INT 1
6751: ST_TO_ADDR
// if p3 = 103 then
6752: LD_VAR 0 3
6756: PUSH
6757: LD_INT 103
6759: EQUAL
6760: IFFALSE 6770
// sFog := true ;
6762: LD_ADDR_EXP 47
6766: PUSH
6767: LD_INT 1
6769: ST_TO_ADDR
// if p3 = 104 then
6770: LD_VAR 0 3
6774: PUSH
6775: LD_INT 104
6777: EQUAL
6778: IFFALSE 6788
// sReset := true ;
6780: LD_ADDR_EXP 48
6784: PUSH
6785: LD_INT 1
6787: ST_TO_ADDR
// if p3 = 105 then
6788: LD_VAR 0 3
6792: PUSH
6793: LD_INT 105
6795: EQUAL
6796: IFFALSE 6806
// sSun := true ;
6798: LD_ADDR_EXP 49
6802: PUSH
6803: LD_INT 1
6805: ST_TO_ADDR
// if p3 = 106 then
6806: LD_VAR 0 3
6810: PUSH
6811: LD_INT 106
6813: EQUAL
6814: IFFALSE 6824
// sTiger := true ;
6816: LD_ADDR_EXP 45
6820: PUSH
6821: LD_INT 1
6823: ST_TO_ADDR
// if p3 = 107 then
6824: LD_VAR 0 3
6828: PUSH
6829: LD_INT 107
6831: EQUAL
6832: IFFALSE 6842
// sBomb := true ;
6834: LD_ADDR_EXP 46
6838: PUSH
6839: LD_INT 1
6841: ST_TO_ADDR
// if p3 = 108 then
6842: LD_VAR 0 3
6846: PUSH
6847: LD_INT 108
6849: EQUAL
6850: IFFALSE 6860
// sWound := true ;
6852: LD_ADDR_EXP 54
6856: PUSH
6857: LD_INT 1
6859: ST_TO_ADDR
// if p3 = 109 then
6860: LD_VAR 0 3
6864: PUSH
6865: LD_INT 109
6867: EQUAL
6868: IFFALSE 6878
// sBetray := true ;
6870: LD_ADDR_EXP 58
6874: PUSH
6875: LD_INT 1
6877: ST_TO_ADDR
// if p3 = 110 then
6878: LD_VAR 0 3
6882: PUSH
6883: LD_INT 110
6885: EQUAL
6886: IFFALSE 6896
// sContamin := true ;
6888: LD_ADDR_EXP 59
6892: PUSH
6893: LD_INT 1
6895: ST_TO_ADDR
// if p3 = 111 then
6896: LD_VAR 0 3
6900: PUSH
6901: LD_INT 111
6903: EQUAL
6904: IFFALSE 6914
// sOil := true ;
6906: LD_ADDR_EXP 61
6910: PUSH
6911: LD_INT 1
6913: ST_TO_ADDR
// if p3 = 112 then
6914: LD_VAR 0 3
6918: PUSH
6919: LD_INT 112
6921: EQUAL
6922: IFFALSE 6932
// sStu := true ;
6924: LD_ADDR_EXP 65
6928: PUSH
6929: LD_INT 1
6931: ST_TO_ADDR
// if p3 = 113 then
6932: LD_VAR 0 3
6936: PUSH
6937: LD_INT 113
6939: EQUAL
6940: IFFALSE 6950
// sBazooka := true ;
6942: LD_ADDR_EXP 68
6946: PUSH
6947: LD_INT 1
6949: ST_TO_ADDR
// if p3 = 114 then
6950: LD_VAR 0 3
6954: PUSH
6955: LD_INT 114
6957: EQUAL
6958: IFFALSE 6968
// sMortar := true ;
6960: LD_ADDR_EXP 69
6964: PUSH
6965: LD_INT 1
6967: ST_TO_ADDR
// if p3 = 115 then
6968: LD_VAR 0 3
6972: PUSH
6973: LD_INT 115
6975: EQUAL
6976: IFFALSE 6986
// sRanger := true ;
6978: LD_ADDR_EXP 79
6982: PUSH
6983: LD_INT 1
6985: ST_TO_ADDR
// if p3 = 116 then
6986: LD_VAR 0 3
6990: PUSH
6991: LD_INT 116
6993: EQUAL
6994: IFFALSE 7004
// sComputer := true ;
6996: LD_ADDR_EXP 80
7000: PUSH
7001: LD_INT 1
7003: ST_TO_ADDR
// if p3 = 117 then
7004: LD_VAR 0 3
7008: PUSH
7009: LD_INT 117
7011: EQUAL
7012: IFFALSE 7022
// s30 := true ;
7014: LD_ADDR_EXP 81
7018: PUSH
7019: LD_INT 1
7021: ST_TO_ADDR
// if p3 = 118 then
7022: LD_VAR 0 3
7026: PUSH
7027: LD_INT 118
7029: EQUAL
7030: IFFALSE 7040
// s60 := true ;
7032: LD_ADDR_EXP 82
7036: PUSH
7037: LD_INT 1
7039: ST_TO_ADDR
// end ; if p2 = hack_mode then
7040: LD_VAR 0 2
7044: PUSH
7045: LD_INT 101
7047: EQUAL
7048: IFFALSE 7176
// begin case p3 of 1 :
7050: LD_VAR 0 3
7054: PUSH
7055: LD_INT 1
7057: DOUBLE
7058: EQUAL
7059: IFTRUE 7063
7061: GO 7070
7063: POP
// hHackUnlimitedResources ; 2 :
7064: CALL 19315 0 0
7068: GO 7176
7070: LD_INT 2
7072: DOUBLE
7073: EQUAL
7074: IFTRUE 7078
7076: GO 7085
7078: POP
// hHackSetLevel10 ; 3 :
7079: CALL 19448 0 0
7083: GO 7176
7085: LD_INT 3
7087: DOUBLE
7088: EQUAL
7089: IFTRUE 7093
7091: GO 7100
7093: POP
// hHackSetLevel10YourUnits ; 4 :
7094: CALL 19533 0 0
7098: GO 7176
7100: LD_INT 4
7102: DOUBLE
7103: EQUAL
7104: IFTRUE 7108
7106: GO 7115
7108: POP
// hHackInvincible ; 5 :
7109: CALL 19981 0 0
7113: GO 7176
7115: LD_INT 5
7117: DOUBLE
7118: EQUAL
7119: IFTRUE 7123
7121: GO 7130
7123: POP
// hHackInvisible ; 6 :
7124: CALL 20092 0 0
7128: GO 7176
7130: LD_INT 6
7132: DOUBLE
7133: EQUAL
7134: IFTRUE 7138
7136: GO 7145
7138: POP
// hHackChangeYourSide ; 7 :
7139: CALL 20149 0 0
7143: GO 7176
7145: LD_INT 7
7147: DOUBLE
7148: EQUAL
7149: IFTRUE 7153
7151: GO 7160
7153: POP
// hHackChangeUnitSide ; 8 :
7154: CALL 20191 0 0
7158: GO 7176
7160: LD_INT 8
7162: DOUBLE
7163: EQUAL
7164: IFTRUE 7168
7166: GO 7175
7168: POP
// hHackFog ; end ;
7169: CALL 20292 0 0
7173: GO 7176
7175: POP
// end ; if p2 = game_save_mode then
7176: LD_VAR 0 2
7180: PUSH
7181: LD_INT 102
7183: EQUAL
7184: IFFALSE 7239
// begin if p3 = 1 then
7186: LD_VAR 0 3
7190: PUSH
7191: LD_INT 1
7193: EQUAL
7194: IFFALSE 7206
// globalGameSaveCounter := p4 ;
7196: LD_ADDR_EXP 25
7200: PUSH
7201: LD_VAR 0 4
7205: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
7206: LD_VAR 0 3
7210: PUSH
7211: LD_INT 2
7213: EQUAL
7214: PUSH
7215: LD_EXP 25
7219: AND
7220: IFFALSE 7239
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7222: LD_STRING setGameSaveCounter(
7224: PUSH
7225: LD_EXP 25
7229: STR
7230: PUSH
7231: LD_STRING )
7233: STR
7234: PPUSH
7235: CALL_OW 559
// end ; end ;
7239: LD_VAR 0 7
7243: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
7244: LD_INT 0
7246: PPUSH
// streamModeActive := false ;
7247: LD_ADDR_EXP 26
7251: PUSH
7252: LD_INT 0
7254: ST_TO_ADDR
// normalCounter := 36 ;
7255: LD_ADDR_EXP 27
7259: PUSH
7260: LD_INT 36
7262: ST_TO_ADDR
// hardcoreCounter := 18 ;
7263: LD_ADDR_EXP 28
7267: PUSH
7268: LD_INT 18
7270: ST_TO_ADDR
// sRocket := false ;
7271: LD_ADDR_EXP 31
7275: PUSH
7276: LD_INT 0
7278: ST_TO_ADDR
// sSpeed := false ;
7279: LD_ADDR_EXP 30
7283: PUSH
7284: LD_INT 0
7286: ST_TO_ADDR
// sEngine := false ;
7287: LD_ADDR_EXP 32
7291: PUSH
7292: LD_INT 0
7294: ST_TO_ADDR
// sSpec := false ;
7295: LD_ADDR_EXP 29
7299: PUSH
7300: LD_INT 0
7302: ST_TO_ADDR
// sLevel := false ;
7303: LD_ADDR_EXP 33
7307: PUSH
7308: LD_INT 0
7310: ST_TO_ADDR
// sArmoury := false ;
7311: LD_ADDR_EXP 34
7315: PUSH
7316: LD_INT 0
7318: ST_TO_ADDR
// sRadar := false ;
7319: LD_ADDR_EXP 35
7323: PUSH
7324: LD_INT 0
7326: ST_TO_ADDR
// sBunker := false ;
7327: LD_ADDR_EXP 36
7331: PUSH
7332: LD_INT 0
7334: ST_TO_ADDR
// sHack := false ;
7335: LD_ADDR_EXP 37
7339: PUSH
7340: LD_INT 0
7342: ST_TO_ADDR
// sFire := false ;
7343: LD_ADDR_EXP 38
7347: PUSH
7348: LD_INT 0
7350: ST_TO_ADDR
// sRefresh := false ;
7351: LD_ADDR_EXP 39
7355: PUSH
7356: LD_INT 0
7358: ST_TO_ADDR
// sExp := false ;
7359: LD_ADDR_EXP 40
7363: PUSH
7364: LD_INT 0
7366: ST_TO_ADDR
// sDepot := false ;
7367: LD_ADDR_EXP 41
7371: PUSH
7372: LD_INT 0
7374: ST_TO_ADDR
// sFlag := false ;
7375: LD_ADDR_EXP 42
7379: PUSH
7380: LD_INT 0
7382: ST_TO_ADDR
// sKamikadze := false ;
7383: LD_ADDR_EXP 50
7387: PUSH
7388: LD_INT 0
7390: ST_TO_ADDR
// sTroll := false ;
7391: LD_ADDR_EXP 51
7395: PUSH
7396: LD_INT 0
7398: ST_TO_ADDR
// sSlow := false ;
7399: LD_ADDR_EXP 52
7403: PUSH
7404: LD_INT 0
7406: ST_TO_ADDR
// sLack := false ;
7407: LD_ADDR_EXP 53
7411: PUSH
7412: LD_INT 0
7414: ST_TO_ADDR
// sTank := false ;
7415: LD_ADDR_EXP 55
7419: PUSH
7420: LD_INT 0
7422: ST_TO_ADDR
// sRemote := false ;
7423: LD_ADDR_EXP 56
7427: PUSH
7428: LD_INT 0
7430: ST_TO_ADDR
// sPowell := false ;
7431: LD_ADDR_EXP 57
7435: PUSH
7436: LD_INT 0
7438: ST_TO_ADDR
// sTeleport := false ;
7439: LD_ADDR_EXP 60
7443: PUSH
7444: LD_INT 0
7446: ST_TO_ADDR
// sOilTower := false ;
7447: LD_ADDR_EXP 62
7451: PUSH
7452: LD_INT 0
7454: ST_TO_ADDR
// sShovel := false ;
7455: LD_ADDR_EXP 63
7459: PUSH
7460: LD_INT 0
7462: ST_TO_ADDR
// sSheik := false ;
7463: LD_ADDR_EXP 64
7467: PUSH
7468: LD_INT 0
7470: ST_TO_ADDR
// sEarthquake := false ;
7471: LD_ADDR_EXP 66
7475: PUSH
7476: LD_INT 0
7478: ST_TO_ADDR
// sAI := false ;
7479: LD_ADDR_EXP 67
7483: PUSH
7484: LD_INT 0
7486: ST_TO_ADDR
// sCargo := false ;
7487: LD_ADDR_EXP 70
7491: PUSH
7492: LD_INT 0
7494: ST_TO_ADDR
// sDLaser := false ;
7495: LD_ADDR_EXP 71
7499: PUSH
7500: LD_INT 0
7502: ST_TO_ADDR
// sExchange := false ;
7503: LD_ADDR_EXP 72
7507: PUSH
7508: LD_INT 0
7510: ST_TO_ADDR
// sFac := false ;
7511: LD_ADDR_EXP 73
7515: PUSH
7516: LD_INT 0
7518: ST_TO_ADDR
// sPower := false ;
7519: LD_ADDR_EXP 74
7523: PUSH
7524: LD_INT 0
7526: ST_TO_ADDR
// sRandom := false ;
7527: LD_ADDR_EXP 75
7531: PUSH
7532: LD_INT 0
7534: ST_TO_ADDR
// sShield := false ;
7535: LD_ADDR_EXP 76
7539: PUSH
7540: LD_INT 0
7542: ST_TO_ADDR
// sTime := false ;
7543: LD_ADDR_EXP 77
7547: PUSH
7548: LD_INT 0
7550: ST_TO_ADDR
// sTools := false ;
7551: LD_ADDR_EXP 78
7555: PUSH
7556: LD_INT 0
7558: ST_TO_ADDR
// sSold := false ;
7559: LD_ADDR_EXP 43
7563: PUSH
7564: LD_INT 0
7566: ST_TO_ADDR
// sDiff := false ;
7567: LD_ADDR_EXP 44
7571: PUSH
7572: LD_INT 0
7574: ST_TO_ADDR
// sFog := false ;
7575: LD_ADDR_EXP 47
7579: PUSH
7580: LD_INT 0
7582: ST_TO_ADDR
// sReset := false ;
7583: LD_ADDR_EXP 48
7587: PUSH
7588: LD_INT 0
7590: ST_TO_ADDR
// sSun := false ;
7591: LD_ADDR_EXP 49
7595: PUSH
7596: LD_INT 0
7598: ST_TO_ADDR
// sTiger := false ;
7599: LD_ADDR_EXP 45
7603: PUSH
7604: LD_INT 0
7606: ST_TO_ADDR
// sBomb := false ;
7607: LD_ADDR_EXP 46
7611: PUSH
7612: LD_INT 0
7614: ST_TO_ADDR
// sWound := false ;
7615: LD_ADDR_EXP 54
7619: PUSH
7620: LD_INT 0
7622: ST_TO_ADDR
// sBetray := false ;
7623: LD_ADDR_EXP 58
7627: PUSH
7628: LD_INT 0
7630: ST_TO_ADDR
// sContamin := false ;
7631: LD_ADDR_EXP 59
7635: PUSH
7636: LD_INT 0
7638: ST_TO_ADDR
// sOil := false ;
7639: LD_ADDR_EXP 61
7643: PUSH
7644: LD_INT 0
7646: ST_TO_ADDR
// sStu := false ;
7647: LD_ADDR_EXP 65
7651: PUSH
7652: LD_INT 0
7654: ST_TO_ADDR
// sBazooka := false ;
7655: LD_ADDR_EXP 68
7659: PUSH
7660: LD_INT 0
7662: ST_TO_ADDR
// sMortar := false ;
7663: LD_ADDR_EXP 69
7667: PUSH
7668: LD_INT 0
7670: ST_TO_ADDR
// sRanger := false ;
7671: LD_ADDR_EXP 79
7675: PUSH
7676: LD_INT 0
7678: ST_TO_ADDR
// sComputer := false ;
7679: LD_ADDR_EXP 80
7683: PUSH
7684: LD_INT 0
7686: ST_TO_ADDR
// s30 := false ;
7687: LD_ADDR_EXP 81
7691: PUSH
7692: LD_INT 0
7694: ST_TO_ADDR
// s60 := false ;
7695: LD_ADDR_EXP 82
7699: PUSH
7700: LD_INT 0
7702: ST_TO_ADDR
// end ;
7703: LD_VAR 0 1
7707: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7708: LD_INT 0
7710: PPUSH
7711: PPUSH
7712: PPUSH
7713: PPUSH
7714: PPUSH
7715: PPUSH
7716: PPUSH
// result := [ ] ;
7717: LD_ADDR_VAR 0 2
7721: PUSH
7722: EMPTY
7723: ST_TO_ADDR
// if campaign_id = 1 then
7724: LD_OWVAR 69
7728: PUSH
7729: LD_INT 1
7731: EQUAL
7732: IFFALSE 10898
// begin case mission_number of 1 :
7734: LD_OWVAR 70
7738: PUSH
7739: LD_INT 1
7741: DOUBLE
7742: EQUAL
7743: IFTRUE 7747
7745: GO 7823
7747: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7748: LD_ADDR_VAR 0 2
7752: PUSH
7753: LD_INT 2
7755: PUSH
7756: LD_INT 4
7758: PUSH
7759: LD_INT 11
7761: PUSH
7762: LD_INT 12
7764: PUSH
7765: LD_INT 15
7767: PUSH
7768: LD_INT 16
7770: PUSH
7771: LD_INT 22
7773: PUSH
7774: LD_INT 23
7776: PUSH
7777: LD_INT 26
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: PUSH
7791: LD_INT 101
7793: PUSH
7794: LD_INT 102
7796: PUSH
7797: LD_INT 106
7799: PUSH
7800: LD_INT 116
7802: PUSH
7803: LD_INT 117
7805: PUSH
7806: LD_INT 118
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: ST_TO_ADDR
7821: GO 10896
7823: LD_INT 2
7825: DOUBLE
7826: EQUAL
7827: IFTRUE 7831
7829: GO 7915
7831: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7832: LD_ADDR_VAR 0 2
7836: PUSH
7837: LD_INT 2
7839: PUSH
7840: LD_INT 4
7842: PUSH
7843: LD_INT 11
7845: PUSH
7846: LD_INT 12
7848: PUSH
7849: LD_INT 15
7851: PUSH
7852: LD_INT 16
7854: PUSH
7855: LD_INT 22
7857: PUSH
7858: LD_INT 23
7860: PUSH
7861: LD_INT 26
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: PUSH
7875: LD_INT 101
7877: PUSH
7878: LD_INT 102
7880: PUSH
7881: LD_INT 105
7883: PUSH
7884: LD_INT 106
7886: PUSH
7887: LD_INT 108
7889: PUSH
7890: LD_INT 116
7892: PUSH
7893: LD_INT 117
7895: PUSH
7896: LD_INT 118
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: ST_TO_ADDR
7913: GO 10896
7915: LD_INT 3
7917: DOUBLE
7918: EQUAL
7919: IFTRUE 7923
7921: GO 8011
7923: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7924: LD_ADDR_VAR 0 2
7928: PUSH
7929: LD_INT 2
7931: PUSH
7932: LD_INT 4
7934: PUSH
7935: LD_INT 5
7937: PUSH
7938: LD_INT 11
7940: PUSH
7941: LD_INT 12
7943: PUSH
7944: LD_INT 15
7946: PUSH
7947: LD_INT 16
7949: PUSH
7950: LD_INT 22
7952: PUSH
7953: LD_INT 26
7955: PUSH
7956: LD_INT 36
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: PUSH
7971: LD_INT 101
7973: PUSH
7974: LD_INT 102
7976: PUSH
7977: LD_INT 105
7979: PUSH
7980: LD_INT 106
7982: PUSH
7983: LD_INT 108
7985: PUSH
7986: LD_INT 116
7988: PUSH
7989: LD_INT 117
7991: PUSH
7992: LD_INT 118
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: ST_TO_ADDR
8009: GO 10896
8011: LD_INT 4
8013: DOUBLE
8014: EQUAL
8015: IFTRUE 8019
8017: GO 8115
8019: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
8020: LD_ADDR_VAR 0 2
8024: PUSH
8025: LD_INT 2
8027: PUSH
8028: LD_INT 4
8030: PUSH
8031: LD_INT 5
8033: PUSH
8034: LD_INT 8
8036: PUSH
8037: LD_INT 11
8039: PUSH
8040: LD_INT 12
8042: PUSH
8043: LD_INT 15
8045: PUSH
8046: LD_INT 16
8048: PUSH
8049: LD_INT 22
8051: PUSH
8052: LD_INT 23
8054: PUSH
8055: LD_INT 26
8057: PUSH
8058: LD_INT 36
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: PUSH
8075: LD_INT 101
8077: PUSH
8078: LD_INT 102
8080: PUSH
8081: LD_INT 105
8083: PUSH
8084: LD_INT 106
8086: PUSH
8087: LD_INT 108
8089: PUSH
8090: LD_INT 116
8092: PUSH
8093: LD_INT 117
8095: PUSH
8096: LD_INT 118
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: ST_TO_ADDR
8113: GO 10896
8115: LD_INT 5
8117: DOUBLE
8118: EQUAL
8119: IFTRUE 8123
8121: GO 8235
8123: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
8124: LD_ADDR_VAR 0 2
8128: PUSH
8129: LD_INT 2
8131: PUSH
8132: LD_INT 4
8134: PUSH
8135: LD_INT 5
8137: PUSH
8138: LD_INT 6
8140: PUSH
8141: LD_INT 8
8143: PUSH
8144: LD_INT 11
8146: PUSH
8147: LD_INT 12
8149: PUSH
8150: LD_INT 15
8152: PUSH
8153: LD_INT 16
8155: PUSH
8156: LD_INT 22
8158: PUSH
8159: LD_INT 23
8161: PUSH
8162: LD_INT 25
8164: PUSH
8165: LD_INT 26
8167: PUSH
8168: LD_INT 36
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: PUSH
8187: LD_INT 101
8189: PUSH
8190: LD_INT 102
8192: PUSH
8193: LD_INT 105
8195: PUSH
8196: LD_INT 106
8198: PUSH
8199: LD_INT 108
8201: PUSH
8202: LD_INT 109
8204: PUSH
8205: LD_INT 112
8207: PUSH
8208: LD_INT 116
8210: PUSH
8211: LD_INT 117
8213: PUSH
8214: LD_INT 118
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: ST_TO_ADDR
8233: GO 10896
8235: LD_INT 6
8237: DOUBLE
8238: EQUAL
8239: IFTRUE 8243
8241: GO 8375
8243: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
8244: LD_ADDR_VAR 0 2
8248: PUSH
8249: LD_INT 2
8251: PUSH
8252: LD_INT 4
8254: PUSH
8255: LD_INT 5
8257: PUSH
8258: LD_INT 6
8260: PUSH
8261: LD_INT 8
8263: PUSH
8264: LD_INT 11
8266: PUSH
8267: LD_INT 12
8269: PUSH
8270: LD_INT 15
8272: PUSH
8273: LD_INT 16
8275: PUSH
8276: LD_INT 20
8278: PUSH
8279: LD_INT 21
8281: PUSH
8282: LD_INT 22
8284: PUSH
8285: LD_INT 23
8287: PUSH
8288: LD_INT 25
8290: PUSH
8291: LD_INT 26
8293: PUSH
8294: LD_INT 30
8296: PUSH
8297: LD_INT 31
8299: PUSH
8300: LD_INT 32
8302: PUSH
8303: LD_INT 36
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: PUSH
8327: LD_INT 101
8329: PUSH
8330: LD_INT 102
8332: PUSH
8333: LD_INT 105
8335: PUSH
8336: LD_INT 106
8338: PUSH
8339: LD_INT 108
8341: PUSH
8342: LD_INT 109
8344: PUSH
8345: LD_INT 112
8347: PUSH
8348: LD_INT 116
8350: PUSH
8351: LD_INT 117
8353: PUSH
8354: LD_INT 118
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: ST_TO_ADDR
8373: GO 10896
8375: LD_INT 7
8377: DOUBLE
8378: EQUAL
8379: IFTRUE 8383
8381: GO 8495
8383: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8384: LD_ADDR_VAR 0 2
8388: PUSH
8389: LD_INT 2
8391: PUSH
8392: LD_INT 4
8394: PUSH
8395: LD_INT 5
8397: PUSH
8398: LD_INT 7
8400: PUSH
8401: LD_INT 11
8403: PUSH
8404: LD_INT 12
8406: PUSH
8407: LD_INT 15
8409: PUSH
8410: LD_INT 16
8412: PUSH
8413: LD_INT 20
8415: PUSH
8416: LD_INT 21
8418: PUSH
8419: LD_INT 22
8421: PUSH
8422: LD_INT 23
8424: PUSH
8425: LD_INT 25
8427: PUSH
8428: LD_INT 26
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: PUSH
8447: LD_INT 101
8449: PUSH
8450: LD_INT 102
8452: PUSH
8453: LD_INT 103
8455: PUSH
8456: LD_INT 105
8458: PUSH
8459: LD_INT 106
8461: PUSH
8462: LD_INT 108
8464: PUSH
8465: LD_INT 112
8467: PUSH
8468: LD_INT 116
8470: PUSH
8471: LD_INT 117
8473: PUSH
8474: LD_INT 118
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: ST_TO_ADDR
8493: GO 10896
8495: LD_INT 8
8497: DOUBLE
8498: EQUAL
8499: IFTRUE 8503
8501: GO 8643
8503: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8504: LD_ADDR_VAR 0 2
8508: PUSH
8509: LD_INT 2
8511: PUSH
8512: LD_INT 4
8514: PUSH
8515: LD_INT 5
8517: PUSH
8518: LD_INT 6
8520: PUSH
8521: LD_INT 7
8523: PUSH
8524: LD_INT 8
8526: PUSH
8527: LD_INT 11
8529: PUSH
8530: LD_INT 12
8532: PUSH
8533: LD_INT 15
8535: PUSH
8536: LD_INT 16
8538: PUSH
8539: LD_INT 20
8541: PUSH
8542: LD_INT 21
8544: PUSH
8545: LD_INT 22
8547: PUSH
8548: LD_INT 23
8550: PUSH
8551: LD_INT 25
8553: PUSH
8554: LD_INT 26
8556: PUSH
8557: LD_INT 30
8559: PUSH
8560: LD_INT 31
8562: PUSH
8563: LD_INT 32
8565: PUSH
8566: LD_INT 36
8568: PUSH
8569: EMPTY
8570: LIST
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: PUSH
8591: LD_INT 101
8593: PUSH
8594: LD_INT 102
8596: PUSH
8597: LD_INT 103
8599: PUSH
8600: LD_INT 105
8602: PUSH
8603: LD_INT 106
8605: PUSH
8606: LD_INT 108
8608: PUSH
8609: LD_INT 109
8611: PUSH
8612: LD_INT 112
8614: PUSH
8615: LD_INT 116
8617: PUSH
8618: LD_INT 117
8620: PUSH
8621: LD_INT 118
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: ST_TO_ADDR
8641: GO 10896
8643: LD_INT 9
8645: DOUBLE
8646: EQUAL
8647: IFTRUE 8651
8649: GO 8799
8651: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8652: LD_ADDR_VAR 0 2
8656: PUSH
8657: LD_INT 2
8659: PUSH
8660: LD_INT 4
8662: PUSH
8663: LD_INT 5
8665: PUSH
8666: LD_INT 6
8668: PUSH
8669: LD_INT 7
8671: PUSH
8672: LD_INT 8
8674: PUSH
8675: LD_INT 11
8677: PUSH
8678: LD_INT 12
8680: PUSH
8681: LD_INT 15
8683: PUSH
8684: LD_INT 16
8686: PUSH
8687: LD_INT 20
8689: PUSH
8690: LD_INT 21
8692: PUSH
8693: LD_INT 22
8695: PUSH
8696: LD_INT 23
8698: PUSH
8699: LD_INT 25
8701: PUSH
8702: LD_INT 26
8704: PUSH
8705: LD_INT 28
8707: PUSH
8708: LD_INT 30
8710: PUSH
8711: LD_INT 31
8713: PUSH
8714: LD_INT 32
8716: PUSH
8717: LD_INT 36
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: PUSH
8743: LD_INT 101
8745: PUSH
8746: LD_INT 102
8748: PUSH
8749: LD_INT 103
8751: PUSH
8752: LD_INT 105
8754: PUSH
8755: LD_INT 106
8757: PUSH
8758: LD_INT 108
8760: PUSH
8761: LD_INT 109
8763: PUSH
8764: LD_INT 112
8766: PUSH
8767: LD_INT 114
8769: PUSH
8770: LD_INT 116
8772: PUSH
8773: LD_INT 117
8775: PUSH
8776: LD_INT 118
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: LIST
8783: LIST
8784: LIST
8785: LIST
8786: LIST
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: ST_TO_ADDR
8797: GO 10896
8799: LD_INT 10
8801: DOUBLE
8802: EQUAL
8803: IFTRUE 8807
8805: GO 9003
8807: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8808: LD_ADDR_VAR 0 2
8812: PUSH
8813: LD_INT 2
8815: PUSH
8816: LD_INT 4
8818: PUSH
8819: LD_INT 5
8821: PUSH
8822: LD_INT 6
8824: PUSH
8825: LD_INT 7
8827: PUSH
8828: LD_INT 8
8830: PUSH
8831: LD_INT 9
8833: PUSH
8834: LD_INT 10
8836: PUSH
8837: LD_INT 11
8839: PUSH
8840: LD_INT 12
8842: PUSH
8843: LD_INT 13
8845: PUSH
8846: LD_INT 14
8848: PUSH
8849: LD_INT 15
8851: PUSH
8852: LD_INT 16
8854: PUSH
8855: LD_INT 17
8857: PUSH
8858: LD_INT 18
8860: PUSH
8861: LD_INT 19
8863: PUSH
8864: LD_INT 20
8866: PUSH
8867: LD_INT 21
8869: PUSH
8870: LD_INT 22
8872: PUSH
8873: LD_INT 23
8875: PUSH
8876: LD_INT 24
8878: PUSH
8879: LD_INT 25
8881: PUSH
8882: LD_INT 26
8884: PUSH
8885: LD_INT 28
8887: PUSH
8888: LD_INT 30
8890: PUSH
8891: LD_INT 31
8893: PUSH
8894: LD_INT 32
8896: PUSH
8897: LD_INT 36
8899: PUSH
8900: EMPTY
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: PUSH
8931: LD_INT 101
8933: PUSH
8934: LD_INT 102
8936: PUSH
8937: LD_INT 103
8939: PUSH
8940: LD_INT 104
8942: PUSH
8943: LD_INT 105
8945: PUSH
8946: LD_INT 106
8948: PUSH
8949: LD_INT 107
8951: PUSH
8952: LD_INT 108
8954: PUSH
8955: LD_INT 109
8957: PUSH
8958: LD_INT 110
8960: PUSH
8961: LD_INT 111
8963: PUSH
8964: LD_INT 112
8966: PUSH
8967: LD_INT 114
8969: PUSH
8970: LD_INT 116
8972: PUSH
8973: LD_INT 117
8975: PUSH
8976: LD_INT 118
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: PUSH
8997: EMPTY
8998: LIST
8999: LIST
9000: ST_TO_ADDR
9001: GO 10896
9003: LD_INT 11
9005: DOUBLE
9006: EQUAL
9007: IFTRUE 9011
9009: GO 9215
9011: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
9012: LD_ADDR_VAR 0 2
9016: PUSH
9017: LD_INT 2
9019: PUSH
9020: LD_INT 3
9022: PUSH
9023: LD_INT 4
9025: PUSH
9026: LD_INT 5
9028: PUSH
9029: LD_INT 6
9031: PUSH
9032: LD_INT 7
9034: PUSH
9035: LD_INT 8
9037: PUSH
9038: LD_INT 9
9040: PUSH
9041: LD_INT 10
9043: PUSH
9044: LD_INT 11
9046: PUSH
9047: LD_INT 12
9049: PUSH
9050: LD_INT 13
9052: PUSH
9053: LD_INT 14
9055: PUSH
9056: LD_INT 15
9058: PUSH
9059: LD_INT 16
9061: PUSH
9062: LD_INT 17
9064: PUSH
9065: LD_INT 18
9067: PUSH
9068: LD_INT 19
9070: PUSH
9071: LD_INT 20
9073: PUSH
9074: LD_INT 21
9076: PUSH
9077: LD_INT 22
9079: PUSH
9080: LD_INT 23
9082: PUSH
9083: LD_INT 24
9085: PUSH
9086: LD_INT 25
9088: PUSH
9089: LD_INT 26
9091: PUSH
9092: LD_INT 28
9094: PUSH
9095: LD_INT 30
9097: PUSH
9098: LD_INT 31
9100: PUSH
9101: LD_INT 32
9103: PUSH
9104: LD_INT 34
9106: PUSH
9107: LD_INT 36
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: PUSH
9143: LD_INT 101
9145: PUSH
9146: LD_INT 102
9148: PUSH
9149: LD_INT 103
9151: PUSH
9152: LD_INT 104
9154: PUSH
9155: LD_INT 105
9157: PUSH
9158: LD_INT 106
9160: PUSH
9161: LD_INT 107
9163: PUSH
9164: LD_INT 108
9166: PUSH
9167: LD_INT 109
9169: PUSH
9170: LD_INT 110
9172: PUSH
9173: LD_INT 111
9175: PUSH
9176: LD_INT 112
9178: PUSH
9179: LD_INT 114
9181: PUSH
9182: LD_INT 116
9184: PUSH
9185: LD_INT 117
9187: PUSH
9188: LD_INT 118
9190: PUSH
9191: EMPTY
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: PUSH
9209: EMPTY
9210: LIST
9211: LIST
9212: ST_TO_ADDR
9213: GO 10896
9215: LD_INT 12
9217: DOUBLE
9218: EQUAL
9219: IFTRUE 9223
9221: GO 9443
9223: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
9224: LD_ADDR_VAR 0 2
9228: PUSH
9229: LD_INT 1
9231: PUSH
9232: LD_INT 2
9234: PUSH
9235: LD_INT 3
9237: PUSH
9238: LD_INT 4
9240: PUSH
9241: LD_INT 5
9243: PUSH
9244: LD_INT 6
9246: PUSH
9247: LD_INT 7
9249: PUSH
9250: LD_INT 8
9252: PUSH
9253: LD_INT 9
9255: PUSH
9256: LD_INT 10
9258: PUSH
9259: LD_INT 11
9261: PUSH
9262: LD_INT 12
9264: PUSH
9265: LD_INT 13
9267: PUSH
9268: LD_INT 14
9270: PUSH
9271: LD_INT 15
9273: PUSH
9274: LD_INT 16
9276: PUSH
9277: LD_INT 17
9279: PUSH
9280: LD_INT 18
9282: PUSH
9283: LD_INT 19
9285: PUSH
9286: LD_INT 20
9288: PUSH
9289: LD_INT 21
9291: PUSH
9292: LD_INT 22
9294: PUSH
9295: LD_INT 23
9297: PUSH
9298: LD_INT 24
9300: PUSH
9301: LD_INT 25
9303: PUSH
9304: LD_INT 26
9306: PUSH
9307: LD_INT 27
9309: PUSH
9310: LD_INT 28
9312: PUSH
9313: LD_INT 30
9315: PUSH
9316: LD_INT 31
9318: PUSH
9319: LD_INT 32
9321: PUSH
9322: LD_INT 33
9324: PUSH
9325: LD_INT 34
9327: PUSH
9328: LD_INT 36
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: PUSH
9367: LD_INT 101
9369: PUSH
9370: LD_INT 102
9372: PUSH
9373: LD_INT 103
9375: PUSH
9376: LD_INT 104
9378: PUSH
9379: LD_INT 105
9381: PUSH
9382: LD_INT 106
9384: PUSH
9385: LD_INT 107
9387: PUSH
9388: LD_INT 108
9390: PUSH
9391: LD_INT 109
9393: PUSH
9394: LD_INT 110
9396: PUSH
9397: LD_INT 111
9399: PUSH
9400: LD_INT 112
9402: PUSH
9403: LD_INT 113
9405: PUSH
9406: LD_INT 114
9408: PUSH
9409: LD_INT 116
9411: PUSH
9412: LD_INT 117
9414: PUSH
9415: LD_INT 118
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: ST_TO_ADDR
9441: GO 10896
9443: LD_INT 13
9445: DOUBLE
9446: EQUAL
9447: IFTRUE 9451
9449: GO 9659
9451: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9452: LD_ADDR_VAR 0 2
9456: PUSH
9457: LD_INT 1
9459: PUSH
9460: LD_INT 2
9462: PUSH
9463: LD_INT 3
9465: PUSH
9466: LD_INT 4
9468: PUSH
9469: LD_INT 5
9471: PUSH
9472: LD_INT 8
9474: PUSH
9475: LD_INT 9
9477: PUSH
9478: LD_INT 10
9480: PUSH
9481: LD_INT 11
9483: PUSH
9484: LD_INT 12
9486: PUSH
9487: LD_INT 14
9489: PUSH
9490: LD_INT 15
9492: PUSH
9493: LD_INT 16
9495: PUSH
9496: LD_INT 17
9498: PUSH
9499: LD_INT 18
9501: PUSH
9502: LD_INT 19
9504: PUSH
9505: LD_INT 20
9507: PUSH
9508: LD_INT 21
9510: PUSH
9511: LD_INT 22
9513: PUSH
9514: LD_INT 23
9516: PUSH
9517: LD_INT 24
9519: PUSH
9520: LD_INT 25
9522: PUSH
9523: LD_INT 26
9525: PUSH
9526: LD_INT 27
9528: PUSH
9529: LD_INT 28
9531: PUSH
9532: LD_INT 30
9534: PUSH
9535: LD_INT 31
9537: PUSH
9538: LD_INT 32
9540: PUSH
9541: LD_INT 33
9543: PUSH
9544: LD_INT 34
9546: PUSH
9547: LD_INT 36
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: PUSH
9583: LD_INT 101
9585: PUSH
9586: LD_INT 102
9588: PUSH
9589: LD_INT 103
9591: PUSH
9592: LD_INT 104
9594: PUSH
9595: LD_INT 105
9597: PUSH
9598: LD_INT 106
9600: PUSH
9601: LD_INT 107
9603: PUSH
9604: LD_INT 108
9606: PUSH
9607: LD_INT 109
9609: PUSH
9610: LD_INT 110
9612: PUSH
9613: LD_INT 111
9615: PUSH
9616: LD_INT 112
9618: PUSH
9619: LD_INT 113
9621: PUSH
9622: LD_INT 114
9624: PUSH
9625: LD_INT 116
9627: PUSH
9628: LD_INT 117
9630: PUSH
9631: LD_INT 118
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: PUSH
9653: EMPTY
9654: LIST
9655: LIST
9656: ST_TO_ADDR
9657: GO 10896
9659: LD_INT 14
9661: DOUBLE
9662: EQUAL
9663: IFTRUE 9667
9665: GO 9891
9667: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9668: LD_ADDR_VAR 0 2
9672: PUSH
9673: LD_INT 1
9675: PUSH
9676: LD_INT 2
9678: PUSH
9679: LD_INT 3
9681: PUSH
9682: LD_INT 4
9684: PUSH
9685: LD_INT 5
9687: PUSH
9688: LD_INT 6
9690: PUSH
9691: LD_INT 7
9693: PUSH
9694: LD_INT 8
9696: PUSH
9697: LD_INT 9
9699: PUSH
9700: LD_INT 10
9702: PUSH
9703: LD_INT 11
9705: PUSH
9706: LD_INT 12
9708: PUSH
9709: LD_INT 13
9711: PUSH
9712: LD_INT 14
9714: PUSH
9715: LD_INT 15
9717: PUSH
9718: LD_INT 16
9720: PUSH
9721: LD_INT 17
9723: PUSH
9724: LD_INT 18
9726: PUSH
9727: LD_INT 19
9729: PUSH
9730: LD_INT 20
9732: PUSH
9733: LD_INT 21
9735: PUSH
9736: LD_INT 22
9738: PUSH
9739: LD_INT 23
9741: PUSH
9742: LD_INT 24
9744: PUSH
9745: LD_INT 25
9747: PUSH
9748: LD_INT 26
9750: PUSH
9751: LD_INT 27
9753: PUSH
9754: LD_INT 28
9756: PUSH
9757: LD_INT 29
9759: PUSH
9760: LD_INT 30
9762: PUSH
9763: LD_INT 31
9765: PUSH
9766: LD_INT 32
9768: PUSH
9769: LD_INT 33
9771: PUSH
9772: LD_INT 34
9774: PUSH
9775: LD_INT 36
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: PUSH
9815: LD_INT 101
9817: PUSH
9818: LD_INT 102
9820: PUSH
9821: LD_INT 103
9823: PUSH
9824: LD_INT 104
9826: PUSH
9827: LD_INT 105
9829: PUSH
9830: LD_INT 106
9832: PUSH
9833: LD_INT 107
9835: PUSH
9836: LD_INT 108
9838: PUSH
9839: LD_INT 109
9841: PUSH
9842: LD_INT 110
9844: PUSH
9845: LD_INT 111
9847: PUSH
9848: LD_INT 112
9850: PUSH
9851: LD_INT 113
9853: PUSH
9854: LD_INT 114
9856: PUSH
9857: LD_INT 116
9859: PUSH
9860: LD_INT 117
9862: PUSH
9863: LD_INT 118
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: ST_TO_ADDR
9889: GO 10896
9891: LD_INT 15
9893: DOUBLE
9894: EQUAL
9895: IFTRUE 9899
9897: GO 10123
9899: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9900: LD_ADDR_VAR 0 2
9904: PUSH
9905: LD_INT 1
9907: PUSH
9908: LD_INT 2
9910: PUSH
9911: LD_INT 3
9913: PUSH
9914: LD_INT 4
9916: PUSH
9917: LD_INT 5
9919: PUSH
9920: LD_INT 6
9922: PUSH
9923: LD_INT 7
9925: PUSH
9926: LD_INT 8
9928: PUSH
9929: LD_INT 9
9931: PUSH
9932: LD_INT 10
9934: PUSH
9935: LD_INT 11
9937: PUSH
9938: LD_INT 12
9940: PUSH
9941: LD_INT 13
9943: PUSH
9944: LD_INT 14
9946: PUSH
9947: LD_INT 15
9949: PUSH
9950: LD_INT 16
9952: PUSH
9953: LD_INT 17
9955: PUSH
9956: LD_INT 18
9958: PUSH
9959: LD_INT 19
9961: PUSH
9962: LD_INT 20
9964: PUSH
9965: LD_INT 21
9967: PUSH
9968: LD_INT 22
9970: PUSH
9971: LD_INT 23
9973: PUSH
9974: LD_INT 24
9976: PUSH
9977: LD_INT 25
9979: PUSH
9980: LD_INT 26
9982: PUSH
9983: LD_INT 27
9985: PUSH
9986: LD_INT 28
9988: PUSH
9989: LD_INT 29
9991: PUSH
9992: LD_INT 30
9994: PUSH
9995: LD_INT 31
9997: PUSH
9998: LD_INT 32
10000: PUSH
10001: LD_INT 33
10003: PUSH
10004: LD_INT 34
10006: PUSH
10007: LD_INT 36
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: PUSH
10047: LD_INT 101
10049: PUSH
10050: LD_INT 102
10052: PUSH
10053: LD_INT 103
10055: PUSH
10056: LD_INT 104
10058: PUSH
10059: LD_INT 105
10061: PUSH
10062: LD_INT 106
10064: PUSH
10065: LD_INT 107
10067: PUSH
10068: LD_INT 108
10070: PUSH
10071: LD_INT 109
10073: PUSH
10074: LD_INT 110
10076: PUSH
10077: LD_INT 111
10079: PUSH
10080: LD_INT 112
10082: PUSH
10083: LD_INT 113
10085: PUSH
10086: LD_INT 114
10088: PUSH
10089: LD_INT 116
10091: PUSH
10092: LD_INT 117
10094: PUSH
10095: LD_INT 118
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: PUSH
10117: EMPTY
10118: LIST
10119: LIST
10120: ST_TO_ADDR
10121: GO 10896
10123: LD_INT 16
10125: DOUBLE
10126: EQUAL
10127: IFTRUE 10131
10129: GO 10267
10131: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
10132: LD_ADDR_VAR 0 2
10136: PUSH
10137: LD_INT 2
10139: PUSH
10140: LD_INT 4
10142: PUSH
10143: LD_INT 5
10145: PUSH
10146: LD_INT 7
10148: PUSH
10149: LD_INT 11
10151: PUSH
10152: LD_INT 12
10154: PUSH
10155: LD_INT 15
10157: PUSH
10158: LD_INT 16
10160: PUSH
10161: LD_INT 20
10163: PUSH
10164: LD_INT 21
10166: PUSH
10167: LD_INT 22
10169: PUSH
10170: LD_INT 23
10172: PUSH
10173: LD_INT 25
10175: PUSH
10176: LD_INT 26
10178: PUSH
10179: LD_INT 30
10181: PUSH
10182: LD_INT 31
10184: PUSH
10185: LD_INT 32
10187: PUSH
10188: LD_INT 33
10190: PUSH
10191: LD_INT 34
10193: PUSH
10194: EMPTY
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: PUSH
10215: LD_INT 101
10217: PUSH
10218: LD_INT 102
10220: PUSH
10221: LD_INT 103
10223: PUSH
10224: LD_INT 106
10226: PUSH
10227: LD_INT 108
10229: PUSH
10230: LD_INT 112
10232: PUSH
10233: LD_INT 113
10235: PUSH
10236: LD_INT 114
10238: PUSH
10239: LD_INT 116
10241: PUSH
10242: LD_INT 117
10244: PUSH
10245: LD_INT 118
10247: PUSH
10248: EMPTY
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: ST_TO_ADDR
10265: GO 10896
10267: LD_INT 17
10269: DOUBLE
10270: EQUAL
10271: IFTRUE 10275
10273: GO 10499
10275: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
10276: LD_ADDR_VAR 0 2
10280: PUSH
10281: LD_INT 1
10283: PUSH
10284: LD_INT 2
10286: PUSH
10287: LD_INT 3
10289: PUSH
10290: LD_INT 4
10292: PUSH
10293: LD_INT 5
10295: PUSH
10296: LD_INT 6
10298: PUSH
10299: LD_INT 7
10301: PUSH
10302: LD_INT 8
10304: PUSH
10305: LD_INT 9
10307: PUSH
10308: LD_INT 10
10310: PUSH
10311: LD_INT 11
10313: PUSH
10314: LD_INT 12
10316: PUSH
10317: LD_INT 13
10319: PUSH
10320: LD_INT 14
10322: PUSH
10323: LD_INT 15
10325: PUSH
10326: LD_INT 16
10328: PUSH
10329: LD_INT 17
10331: PUSH
10332: LD_INT 18
10334: PUSH
10335: LD_INT 19
10337: PUSH
10338: LD_INT 20
10340: PUSH
10341: LD_INT 21
10343: PUSH
10344: LD_INT 22
10346: PUSH
10347: LD_INT 23
10349: PUSH
10350: LD_INT 24
10352: PUSH
10353: LD_INT 25
10355: PUSH
10356: LD_INT 26
10358: PUSH
10359: LD_INT 27
10361: PUSH
10362: LD_INT 28
10364: PUSH
10365: LD_INT 29
10367: PUSH
10368: LD_INT 30
10370: PUSH
10371: LD_INT 31
10373: PUSH
10374: LD_INT 32
10376: PUSH
10377: LD_INT 33
10379: PUSH
10380: LD_INT 34
10382: PUSH
10383: LD_INT 36
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: PUSH
10423: LD_INT 101
10425: PUSH
10426: LD_INT 102
10428: PUSH
10429: LD_INT 103
10431: PUSH
10432: LD_INT 104
10434: PUSH
10435: LD_INT 105
10437: PUSH
10438: LD_INT 106
10440: PUSH
10441: LD_INT 107
10443: PUSH
10444: LD_INT 108
10446: PUSH
10447: LD_INT 109
10449: PUSH
10450: LD_INT 110
10452: PUSH
10453: LD_INT 111
10455: PUSH
10456: LD_INT 112
10458: PUSH
10459: LD_INT 113
10461: PUSH
10462: LD_INT 114
10464: PUSH
10465: LD_INT 116
10467: PUSH
10468: LD_INT 117
10470: PUSH
10471: LD_INT 118
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: ST_TO_ADDR
10497: GO 10896
10499: LD_INT 18
10501: DOUBLE
10502: EQUAL
10503: IFTRUE 10507
10505: GO 10655
10507: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10508: LD_ADDR_VAR 0 2
10512: PUSH
10513: LD_INT 2
10515: PUSH
10516: LD_INT 4
10518: PUSH
10519: LD_INT 5
10521: PUSH
10522: LD_INT 7
10524: PUSH
10525: LD_INT 11
10527: PUSH
10528: LD_INT 12
10530: PUSH
10531: LD_INT 15
10533: PUSH
10534: LD_INT 16
10536: PUSH
10537: LD_INT 20
10539: PUSH
10540: LD_INT 21
10542: PUSH
10543: LD_INT 22
10545: PUSH
10546: LD_INT 23
10548: PUSH
10549: LD_INT 25
10551: PUSH
10552: LD_INT 26
10554: PUSH
10555: LD_INT 30
10557: PUSH
10558: LD_INT 31
10560: PUSH
10561: LD_INT 32
10563: PUSH
10564: LD_INT 33
10566: PUSH
10567: LD_INT 34
10569: PUSH
10570: LD_INT 35
10572: PUSH
10573: LD_INT 36
10575: PUSH
10576: EMPTY
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: PUSH
10599: LD_INT 101
10601: PUSH
10602: LD_INT 102
10604: PUSH
10605: LD_INT 103
10607: PUSH
10608: LD_INT 106
10610: PUSH
10611: LD_INT 108
10613: PUSH
10614: LD_INT 112
10616: PUSH
10617: LD_INT 113
10619: PUSH
10620: LD_INT 114
10622: PUSH
10623: LD_INT 115
10625: PUSH
10626: LD_INT 116
10628: PUSH
10629: LD_INT 117
10631: PUSH
10632: LD_INT 118
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: ST_TO_ADDR
10653: GO 10896
10655: LD_INT 19
10657: DOUBLE
10658: EQUAL
10659: IFTRUE 10663
10661: GO 10895
10663: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10664: LD_ADDR_VAR 0 2
10668: PUSH
10669: LD_INT 1
10671: PUSH
10672: LD_INT 2
10674: PUSH
10675: LD_INT 3
10677: PUSH
10678: LD_INT 4
10680: PUSH
10681: LD_INT 5
10683: PUSH
10684: LD_INT 6
10686: PUSH
10687: LD_INT 7
10689: PUSH
10690: LD_INT 8
10692: PUSH
10693: LD_INT 9
10695: PUSH
10696: LD_INT 10
10698: PUSH
10699: LD_INT 11
10701: PUSH
10702: LD_INT 12
10704: PUSH
10705: LD_INT 13
10707: PUSH
10708: LD_INT 14
10710: PUSH
10711: LD_INT 15
10713: PUSH
10714: LD_INT 16
10716: PUSH
10717: LD_INT 17
10719: PUSH
10720: LD_INT 18
10722: PUSH
10723: LD_INT 19
10725: PUSH
10726: LD_INT 20
10728: PUSH
10729: LD_INT 21
10731: PUSH
10732: LD_INT 22
10734: PUSH
10735: LD_INT 23
10737: PUSH
10738: LD_INT 24
10740: PUSH
10741: LD_INT 25
10743: PUSH
10744: LD_INT 26
10746: PUSH
10747: LD_INT 27
10749: PUSH
10750: LD_INT 28
10752: PUSH
10753: LD_INT 29
10755: PUSH
10756: LD_INT 30
10758: PUSH
10759: LD_INT 31
10761: PUSH
10762: LD_INT 32
10764: PUSH
10765: LD_INT 33
10767: PUSH
10768: LD_INT 34
10770: PUSH
10771: LD_INT 35
10773: PUSH
10774: LD_INT 36
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: PUSH
10815: LD_INT 101
10817: PUSH
10818: LD_INT 102
10820: PUSH
10821: LD_INT 103
10823: PUSH
10824: LD_INT 104
10826: PUSH
10827: LD_INT 105
10829: PUSH
10830: LD_INT 106
10832: PUSH
10833: LD_INT 107
10835: PUSH
10836: LD_INT 108
10838: PUSH
10839: LD_INT 109
10841: PUSH
10842: LD_INT 110
10844: PUSH
10845: LD_INT 111
10847: PUSH
10848: LD_INT 112
10850: PUSH
10851: LD_INT 113
10853: PUSH
10854: LD_INT 114
10856: PUSH
10857: LD_INT 115
10859: PUSH
10860: LD_INT 116
10862: PUSH
10863: LD_INT 117
10865: PUSH
10866: LD_INT 118
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: ST_TO_ADDR
10893: GO 10896
10895: POP
// end else
10896: GO 11127
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10898: LD_ADDR_VAR 0 2
10902: PUSH
10903: LD_INT 1
10905: PUSH
10906: LD_INT 2
10908: PUSH
10909: LD_INT 3
10911: PUSH
10912: LD_INT 4
10914: PUSH
10915: LD_INT 5
10917: PUSH
10918: LD_INT 6
10920: PUSH
10921: LD_INT 7
10923: PUSH
10924: LD_INT 8
10926: PUSH
10927: LD_INT 9
10929: PUSH
10930: LD_INT 10
10932: PUSH
10933: LD_INT 11
10935: PUSH
10936: LD_INT 12
10938: PUSH
10939: LD_INT 13
10941: PUSH
10942: LD_INT 14
10944: PUSH
10945: LD_INT 15
10947: PUSH
10948: LD_INT 16
10950: PUSH
10951: LD_INT 17
10953: PUSH
10954: LD_INT 18
10956: PUSH
10957: LD_INT 19
10959: PUSH
10960: LD_INT 20
10962: PUSH
10963: LD_INT 21
10965: PUSH
10966: LD_INT 22
10968: PUSH
10969: LD_INT 23
10971: PUSH
10972: LD_INT 24
10974: PUSH
10975: LD_INT 25
10977: PUSH
10978: LD_INT 26
10980: PUSH
10981: LD_INT 27
10983: PUSH
10984: LD_INT 28
10986: PUSH
10987: LD_INT 29
10989: PUSH
10990: LD_INT 30
10992: PUSH
10993: LD_INT 31
10995: PUSH
10996: LD_INT 32
10998: PUSH
10999: LD_INT 33
11001: PUSH
11002: LD_INT 34
11004: PUSH
11005: LD_INT 35
11007: PUSH
11008: LD_INT 36
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: PUSH
11049: LD_INT 101
11051: PUSH
11052: LD_INT 102
11054: PUSH
11055: LD_INT 103
11057: PUSH
11058: LD_INT 104
11060: PUSH
11061: LD_INT 105
11063: PUSH
11064: LD_INT 106
11066: PUSH
11067: LD_INT 107
11069: PUSH
11070: LD_INT 108
11072: PUSH
11073: LD_INT 109
11075: PUSH
11076: LD_INT 110
11078: PUSH
11079: LD_INT 111
11081: PUSH
11082: LD_INT 112
11084: PUSH
11085: LD_INT 113
11087: PUSH
11088: LD_INT 114
11090: PUSH
11091: LD_INT 115
11093: PUSH
11094: LD_INT 116
11096: PUSH
11097: LD_INT 117
11099: PUSH
11100: LD_INT 118
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: ST_TO_ADDR
// if result then
11127: LD_VAR 0 2
11131: IFFALSE 11917
// begin normal :=  ;
11133: LD_ADDR_VAR 0 5
11137: PUSH
11138: LD_STRING 
11140: ST_TO_ADDR
// hardcore :=  ;
11141: LD_ADDR_VAR 0 6
11145: PUSH
11146: LD_STRING 
11148: ST_TO_ADDR
// active :=  ;
11149: LD_ADDR_VAR 0 7
11153: PUSH
11154: LD_STRING 
11156: ST_TO_ADDR
// for i = 1 to normalCounter do
11157: LD_ADDR_VAR 0 8
11161: PUSH
11162: DOUBLE
11163: LD_INT 1
11165: DEC
11166: ST_TO_ADDR
11167: LD_EXP 27
11171: PUSH
11172: FOR_TO
11173: IFFALSE 11274
// begin tmp := 0 ;
11175: LD_ADDR_VAR 0 3
11179: PUSH
11180: LD_STRING 0
11182: ST_TO_ADDR
// if result [ 1 ] then
11183: LD_VAR 0 2
11187: PUSH
11188: LD_INT 1
11190: ARRAY
11191: IFFALSE 11256
// if result [ 1 ] [ 1 ] = i then
11193: LD_VAR 0 2
11197: PUSH
11198: LD_INT 1
11200: ARRAY
11201: PUSH
11202: LD_INT 1
11204: ARRAY
11205: PUSH
11206: LD_VAR 0 8
11210: EQUAL
11211: IFFALSE 11256
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11213: LD_ADDR_VAR 0 2
11217: PUSH
11218: LD_VAR 0 2
11222: PPUSH
11223: LD_INT 1
11225: PPUSH
11226: LD_VAR 0 2
11230: PUSH
11231: LD_INT 1
11233: ARRAY
11234: PPUSH
11235: LD_INT 1
11237: PPUSH
11238: CALL_OW 3
11242: PPUSH
11243: CALL_OW 1
11247: ST_TO_ADDR
// tmp := 1 ;
11248: LD_ADDR_VAR 0 3
11252: PUSH
11253: LD_STRING 1
11255: ST_TO_ADDR
// end ; normal := normal & tmp ;
11256: LD_ADDR_VAR 0 5
11260: PUSH
11261: LD_VAR 0 5
11265: PUSH
11266: LD_VAR 0 3
11270: STR
11271: ST_TO_ADDR
// end ;
11272: GO 11172
11274: POP
11275: POP
// for i = 1 to hardcoreCounter do
11276: LD_ADDR_VAR 0 8
11280: PUSH
11281: DOUBLE
11282: LD_INT 1
11284: DEC
11285: ST_TO_ADDR
11286: LD_EXP 28
11290: PUSH
11291: FOR_TO
11292: IFFALSE 11397
// begin tmp := 0 ;
11294: LD_ADDR_VAR 0 3
11298: PUSH
11299: LD_STRING 0
11301: ST_TO_ADDR
// if result [ 2 ] then
11302: LD_VAR 0 2
11306: PUSH
11307: LD_INT 2
11309: ARRAY
11310: IFFALSE 11379
// if result [ 2 ] [ 1 ] = 100 + i then
11312: LD_VAR 0 2
11316: PUSH
11317: LD_INT 2
11319: ARRAY
11320: PUSH
11321: LD_INT 1
11323: ARRAY
11324: PUSH
11325: LD_INT 100
11327: PUSH
11328: LD_VAR 0 8
11332: PLUS
11333: EQUAL
11334: IFFALSE 11379
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11336: LD_ADDR_VAR 0 2
11340: PUSH
11341: LD_VAR 0 2
11345: PPUSH
11346: LD_INT 2
11348: PPUSH
11349: LD_VAR 0 2
11353: PUSH
11354: LD_INT 2
11356: ARRAY
11357: PPUSH
11358: LD_INT 1
11360: PPUSH
11361: CALL_OW 3
11365: PPUSH
11366: CALL_OW 1
11370: ST_TO_ADDR
// tmp := 1 ;
11371: LD_ADDR_VAR 0 3
11375: PUSH
11376: LD_STRING 1
11378: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11379: LD_ADDR_VAR 0 6
11383: PUSH
11384: LD_VAR 0 6
11388: PUSH
11389: LD_VAR 0 3
11393: STR
11394: ST_TO_ADDR
// end ;
11395: GO 11291
11397: POP
11398: POP
// if isGameLoad then
11399: LD_VAR 0 1
11403: IFFALSE 11878
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
11405: LD_ADDR_VAR 0 4
11409: PUSH
11410: LD_EXP 31
11414: PUSH
11415: LD_EXP 30
11419: PUSH
11420: LD_EXP 32
11424: PUSH
11425: LD_EXP 29
11429: PUSH
11430: LD_EXP 33
11434: PUSH
11435: LD_EXP 34
11439: PUSH
11440: LD_EXP 35
11444: PUSH
11445: LD_EXP 36
11449: PUSH
11450: LD_EXP 37
11454: PUSH
11455: LD_EXP 38
11459: PUSH
11460: LD_EXP 39
11464: PUSH
11465: LD_EXP 40
11469: PUSH
11470: LD_EXP 41
11474: PUSH
11475: LD_EXP 42
11479: PUSH
11480: LD_EXP 50
11484: PUSH
11485: LD_EXP 51
11489: PUSH
11490: LD_EXP 52
11494: PUSH
11495: LD_EXP 53
11499: PUSH
11500: LD_EXP 55
11504: PUSH
11505: LD_EXP 56
11509: PUSH
11510: LD_EXP 57
11514: PUSH
11515: LD_EXP 60
11519: PUSH
11520: LD_EXP 62
11524: PUSH
11525: LD_EXP 63
11529: PUSH
11530: LD_EXP 64
11534: PUSH
11535: LD_EXP 66
11539: PUSH
11540: LD_EXP 67
11544: PUSH
11545: LD_EXP 70
11549: PUSH
11550: LD_EXP 71
11554: PUSH
11555: LD_EXP 72
11559: PUSH
11560: LD_EXP 73
11564: PUSH
11565: LD_EXP 74
11569: PUSH
11570: LD_EXP 75
11574: PUSH
11575: LD_EXP 76
11579: PUSH
11580: LD_EXP 77
11584: PUSH
11585: LD_EXP 78
11589: PUSH
11590: LD_EXP 43
11594: PUSH
11595: LD_EXP 44
11599: PUSH
11600: LD_EXP 47
11604: PUSH
11605: LD_EXP 48
11609: PUSH
11610: LD_EXP 49
11614: PUSH
11615: LD_EXP 45
11619: PUSH
11620: LD_EXP 46
11624: PUSH
11625: LD_EXP 54
11629: PUSH
11630: LD_EXP 58
11634: PUSH
11635: LD_EXP 59
11639: PUSH
11640: LD_EXP 61
11644: PUSH
11645: LD_EXP 65
11649: PUSH
11650: LD_EXP 68
11654: PUSH
11655: LD_EXP 69
11659: PUSH
11660: LD_EXP 79
11664: PUSH
11665: LD_EXP 80
11669: PUSH
11670: LD_EXP 81
11674: PUSH
11675: LD_EXP 82
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: ST_TO_ADDR
// tmp :=  ;
11736: LD_ADDR_VAR 0 3
11740: PUSH
11741: LD_STRING 
11743: ST_TO_ADDR
// for i = 1 to normalCounter do
11744: LD_ADDR_VAR 0 8
11748: PUSH
11749: DOUBLE
11750: LD_INT 1
11752: DEC
11753: ST_TO_ADDR
11754: LD_EXP 27
11758: PUSH
11759: FOR_TO
11760: IFFALSE 11796
// begin if flags [ i ] then
11762: LD_VAR 0 4
11766: PUSH
11767: LD_VAR 0 8
11771: ARRAY
11772: IFFALSE 11794
// tmp := tmp & i & ; ;
11774: LD_ADDR_VAR 0 3
11778: PUSH
11779: LD_VAR 0 3
11783: PUSH
11784: LD_VAR 0 8
11788: STR
11789: PUSH
11790: LD_STRING ;
11792: STR
11793: ST_TO_ADDR
// end ;
11794: GO 11759
11796: POP
11797: POP
// for i = 1 to hardcoreCounter do
11798: LD_ADDR_VAR 0 8
11802: PUSH
11803: DOUBLE
11804: LD_INT 1
11806: DEC
11807: ST_TO_ADDR
11808: LD_EXP 28
11812: PUSH
11813: FOR_TO
11814: IFFALSE 11860
// begin if flags [ normalCounter + i ] then
11816: LD_VAR 0 4
11820: PUSH
11821: LD_EXP 27
11825: PUSH
11826: LD_VAR 0 8
11830: PLUS
11831: ARRAY
11832: IFFALSE 11858
// tmp := tmp & ( 100 + i ) & ; ;
11834: LD_ADDR_VAR 0 3
11838: PUSH
11839: LD_VAR 0 3
11843: PUSH
11844: LD_INT 100
11846: PUSH
11847: LD_VAR 0 8
11851: PLUS
11852: STR
11853: PUSH
11854: LD_STRING ;
11856: STR
11857: ST_TO_ADDR
// end ;
11858: GO 11813
11860: POP
11861: POP
// if tmp then
11862: LD_VAR 0 3
11866: IFFALSE 11878
// active := tmp ;
11868: LD_ADDR_VAR 0 7
11872: PUSH
11873: LD_VAR 0 3
11877: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11878: LD_STRING getStreamItemsFromMission("
11880: PUSH
11881: LD_VAR 0 5
11885: STR
11886: PUSH
11887: LD_STRING ","
11889: STR
11890: PUSH
11891: LD_VAR 0 6
11895: STR
11896: PUSH
11897: LD_STRING ","
11899: STR
11900: PUSH
11901: LD_VAR 0 7
11905: STR
11906: PUSH
11907: LD_STRING ")
11909: STR
11910: PPUSH
11911: CALL_OW 559
// end else
11915: GO 11924
// ToLua ( getStreamItemsFromMission("","","") ) ;
11917: LD_STRING getStreamItemsFromMission("","","")
11919: PPUSH
11920: CALL_OW 559
// end ;
11924: LD_VAR 0 2
11928: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11929: LD_EXP 26
11933: PUSH
11934: LD_EXP 31
11938: AND
11939: IFFALSE 12063
11941: GO 11943
11943: DISABLE
11944: LD_INT 0
11946: PPUSH
11947: PPUSH
// begin enable ;
11948: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11949: LD_ADDR_VAR 0 2
11953: PUSH
11954: LD_INT 22
11956: PUSH
11957: LD_OWVAR 2
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: PUSH
11966: LD_INT 2
11968: PUSH
11969: LD_INT 34
11971: PUSH
11972: LD_INT 7
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: PUSH
11979: LD_INT 34
11981: PUSH
11982: LD_INT 45
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: LD_INT 34
11991: PUSH
11992: LD_INT 28
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 34
12001: PUSH
12002: LD_INT 47
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PPUSH
12020: CALL_OW 69
12024: ST_TO_ADDR
// if not tmp then
12025: LD_VAR 0 2
12029: NOT
12030: IFFALSE 12034
// exit ;
12032: GO 12063
// for i in tmp do
12034: LD_ADDR_VAR 0 1
12038: PUSH
12039: LD_VAR 0 2
12043: PUSH
12044: FOR_IN
12045: IFFALSE 12061
// begin SetLives ( i , 0 ) ;
12047: LD_VAR 0 1
12051: PPUSH
12052: LD_INT 0
12054: PPUSH
12055: CALL_OW 234
// end ;
12059: GO 12044
12061: POP
12062: POP
// end ;
12063: PPOPN 2
12065: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12066: LD_EXP 26
12070: PUSH
12071: LD_EXP 32
12075: AND
12076: IFFALSE 12160
12078: GO 12080
12080: DISABLE
12081: LD_INT 0
12083: PPUSH
12084: PPUSH
// begin enable ;
12085: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12086: LD_ADDR_VAR 0 2
12090: PUSH
12091: LD_INT 22
12093: PUSH
12094: LD_OWVAR 2
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: PUSH
12103: LD_INT 32
12105: PUSH
12106: LD_INT 3
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: PPUSH
12117: CALL_OW 69
12121: ST_TO_ADDR
// if not tmp then
12122: LD_VAR 0 2
12126: NOT
12127: IFFALSE 12131
// exit ;
12129: GO 12160
// for i in tmp do
12131: LD_ADDR_VAR 0 1
12135: PUSH
12136: LD_VAR 0 2
12140: PUSH
12141: FOR_IN
12142: IFFALSE 12158
// begin SetLives ( i , 0 ) ;
12144: LD_VAR 0 1
12148: PPUSH
12149: LD_INT 0
12151: PPUSH
12152: CALL_OW 234
// end ;
12156: GO 12141
12158: POP
12159: POP
// end ;
12160: PPOPN 2
12162: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12163: LD_EXP 26
12167: PUSH
12168: LD_EXP 29
12172: AND
12173: IFFALSE 12266
12175: GO 12177
12177: DISABLE
12178: LD_INT 0
12180: PPUSH
// begin enable ;
12181: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12182: LD_ADDR_VAR 0 1
12186: PUSH
12187: LD_INT 22
12189: PUSH
12190: LD_OWVAR 2
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: PUSH
12199: LD_INT 2
12201: PUSH
12202: LD_INT 25
12204: PUSH
12205: LD_INT 5
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: PUSH
12212: LD_INT 25
12214: PUSH
12215: LD_INT 9
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: PUSH
12222: LD_INT 25
12224: PUSH
12225: LD_INT 8
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: PPUSH
12242: CALL_OW 69
12246: PUSH
12247: FOR_IN
12248: IFFALSE 12264
// begin SetClass ( i , 1 ) ;
12250: LD_VAR 0 1
12254: PPUSH
12255: LD_INT 1
12257: PPUSH
12258: CALL_OW 336
// end ;
12262: GO 12247
12264: POP
12265: POP
// end ;
12266: PPOPN 1
12268: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12269: LD_EXP 26
12273: PUSH
12274: LD_EXP 30
12278: AND
12279: PUSH
12280: LD_OWVAR 65
12284: PUSH
12285: LD_INT 7
12287: LESS
12288: AND
12289: IFFALSE 12303
12291: GO 12293
12293: DISABLE
// begin enable ;
12294: ENABLE
// game_speed := 7 ;
12295: LD_ADDR_OWVAR 65
12299: PUSH
12300: LD_INT 7
12302: ST_TO_ADDR
// end ;
12303: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12304: LD_EXP 26
12308: PUSH
12309: LD_EXP 33
12313: AND
12314: IFFALSE 12516
12316: GO 12318
12318: DISABLE
12319: LD_INT 0
12321: PPUSH
12322: PPUSH
12323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12324: LD_ADDR_VAR 0 3
12328: PUSH
12329: LD_INT 81
12331: PUSH
12332: LD_OWVAR 2
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PUSH
12341: LD_INT 21
12343: PUSH
12344: LD_INT 1
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PPUSH
12355: CALL_OW 69
12359: ST_TO_ADDR
// if not tmp then
12360: LD_VAR 0 3
12364: NOT
12365: IFFALSE 12369
// exit ;
12367: GO 12516
// if tmp > 5 then
12369: LD_VAR 0 3
12373: PUSH
12374: LD_INT 5
12376: GREATER
12377: IFFALSE 12389
// k := 5 else
12379: LD_ADDR_VAR 0 2
12383: PUSH
12384: LD_INT 5
12386: ST_TO_ADDR
12387: GO 12399
// k := tmp ;
12389: LD_ADDR_VAR 0 2
12393: PUSH
12394: LD_VAR 0 3
12398: ST_TO_ADDR
// for i := 1 to k do
12399: LD_ADDR_VAR 0 1
12403: PUSH
12404: DOUBLE
12405: LD_INT 1
12407: DEC
12408: ST_TO_ADDR
12409: LD_VAR 0 2
12413: PUSH
12414: FOR_TO
12415: IFFALSE 12514
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12417: LD_VAR 0 3
12421: PUSH
12422: LD_VAR 0 1
12426: ARRAY
12427: PPUSH
12428: LD_VAR 0 1
12432: PUSH
12433: LD_INT 4
12435: MOD
12436: PUSH
12437: LD_INT 1
12439: PLUS
12440: PPUSH
12441: CALL_OW 259
12445: PUSH
12446: LD_INT 10
12448: LESS
12449: IFFALSE 12512
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12451: LD_VAR 0 3
12455: PUSH
12456: LD_VAR 0 1
12460: ARRAY
12461: PPUSH
12462: LD_VAR 0 1
12466: PUSH
12467: LD_INT 4
12469: MOD
12470: PUSH
12471: LD_INT 1
12473: PLUS
12474: PPUSH
12475: LD_VAR 0 3
12479: PUSH
12480: LD_VAR 0 1
12484: ARRAY
12485: PPUSH
12486: LD_VAR 0 1
12490: PUSH
12491: LD_INT 4
12493: MOD
12494: PUSH
12495: LD_INT 1
12497: PLUS
12498: PPUSH
12499: CALL_OW 259
12503: PUSH
12504: LD_INT 1
12506: PLUS
12507: PPUSH
12508: CALL_OW 237
12512: GO 12414
12514: POP
12515: POP
// end ;
12516: PPOPN 3
12518: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12519: LD_EXP 26
12523: PUSH
12524: LD_EXP 34
12528: AND
12529: IFFALSE 12549
12531: GO 12533
12533: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12534: LD_INT 4
12536: PPUSH
12537: LD_OWVAR 2
12541: PPUSH
12542: LD_INT 0
12544: PPUSH
12545: CALL_OW 324
12549: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12550: LD_EXP 26
12554: PUSH
12555: LD_EXP 63
12559: AND
12560: IFFALSE 12580
12562: GO 12564
12564: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12565: LD_INT 19
12567: PPUSH
12568: LD_OWVAR 2
12572: PPUSH
12573: LD_INT 0
12575: PPUSH
12576: CALL_OW 324
12580: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12581: LD_EXP 26
12585: PUSH
12586: LD_EXP 35
12590: AND
12591: IFFALSE 12693
12593: GO 12595
12595: DISABLE
12596: LD_INT 0
12598: PPUSH
12599: PPUSH
// begin enable ;
12600: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12601: LD_ADDR_VAR 0 2
12605: PUSH
12606: LD_INT 22
12608: PUSH
12609: LD_OWVAR 2
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: PUSH
12618: LD_INT 2
12620: PUSH
12621: LD_INT 34
12623: PUSH
12624: LD_INT 11
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: PUSH
12631: LD_INT 34
12633: PUSH
12634: LD_INT 30
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: PUSH
12641: EMPTY
12642: LIST
12643: LIST
12644: LIST
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PPUSH
12650: CALL_OW 69
12654: ST_TO_ADDR
// if not tmp then
12655: LD_VAR 0 2
12659: NOT
12660: IFFALSE 12664
// exit ;
12662: GO 12693
// for i in tmp do
12664: LD_ADDR_VAR 0 1
12668: PUSH
12669: LD_VAR 0 2
12673: PUSH
12674: FOR_IN
12675: IFFALSE 12691
// begin SetLives ( i , 0 ) ;
12677: LD_VAR 0 1
12681: PPUSH
12682: LD_INT 0
12684: PPUSH
12685: CALL_OW 234
// end ;
12689: GO 12674
12691: POP
12692: POP
// end ;
12693: PPOPN 2
12695: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12696: LD_EXP 26
12700: PUSH
12701: LD_EXP 36
12705: AND
12706: IFFALSE 12726
12708: GO 12710
12710: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12711: LD_INT 32
12713: PPUSH
12714: LD_OWVAR 2
12718: PPUSH
12719: LD_INT 0
12721: PPUSH
12722: CALL_OW 324
12726: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12727: LD_EXP 26
12731: PUSH
12732: LD_EXP 37
12736: AND
12737: IFFALSE 12918
12739: GO 12741
12741: DISABLE
12742: LD_INT 0
12744: PPUSH
12745: PPUSH
12746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12747: LD_ADDR_VAR 0 2
12751: PUSH
12752: LD_INT 22
12754: PUSH
12755: LD_OWVAR 2
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: PUSH
12764: LD_INT 33
12766: PUSH
12767: LD_INT 3
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: PUSH
12774: EMPTY
12775: LIST
12776: LIST
12777: PPUSH
12778: CALL_OW 69
12782: ST_TO_ADDR
// if not tmp then
12783: LD_VAR 0 2
12787: NOT
12788: IFFALSE 12792
// exit ;
12790: GO 12918
// side := 0 ;
12792: LD_ADDR_VAR 0 3
12796: PUSH
12797: LD_INT 0
12799: ST_TO_ADDR
// for i := 1 to 8 do
12800: LD_ADDR_VAR 0 1
12804: PUSH
12805: DOUBLE
12806: LD_INT 1
12808: DEC
12809: ST_TO_ADDR
12810: LD_INT 8
12812: PUSH
12813: FOR_TO
12814: IFFALSE 12862
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12816: LD_OWVAR 2
12820: PUSH
12821: LD_VAR 0 1
12825: NONEQUAL
12826: PUSH
12827: LD_OWVAR 2
12831: PPUSH
12832: LD_VAR 0 1
12836: PPUSH
12837: CALL_OW 81
12841: PUSH
12842: LD_INT 2
12844: EQUAL
12845: AND
12846: IFFALSE 12860
// begin side := i ;
12848: LD_ADDR_VAR 0 3
12852: PUSH
12853: LD_VAR 0 1
12857: ST_TO_ADDR
// break ;
12858: GO 12862
// end ;
12860: GO 12813
12862: POP
12863: POP
// if not side then
12864: LD_VAR 0 3
12868: NOT
12869: IFFALSE 12873
// exit ;
12871: GO 12918
// for i := 1 to tmp do
12873: LD_ADDR_VAR 0 1
12877: PUSH
12878: DOUBLE
12879: LD_INT 1
12881: DEC
12882: ST_TO_ADDR
12883: LD_VAR 0 2
12887: PUSH
12888: FOR_TO
12889: IFFALSE 12916
// if Prob ( 60 ) then
12891: LD_INT 60
12893: PPUSH
12894: CALL_OW 13
12898: IFFALSE 12914
// SetSide ( i , side ) ;
12900: LD_VAR 0 1
12904: PPUSH
12905: LD_VAR 0 3
12909: PPUSH
12910: CALL_OW 235
12914: GO 12888
12916: POP
12917: POP
// end ;
12918: PPOPN 3
12920: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12921: LD_EXP 26
12925: PUSH
12926: LD_EXP 39
12930: AND
12931: IFFALSE 13050
12933: GO 12935
12935: DISABLE
12936: LD_INT 0
12938: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12939: LD_ADDR_VAR 0 1
12943: PUSH
12944: LD_INT 22
12946: PUSH
12947: LD_OWVAR 2
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: PUSH
12956: LD_INT 21
12958: PUSH
12959: LD_INT 1
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: LD_INT 3
12968: PUSH
12969: LD_INT 23
12971: PUSH
12972: LD_INT 0
12974: PUSH
12975: EMPTY
12976: LIST
12977: LIST
12978: PUSH
12979: EMPTY
12980: LIST
12981: LIST
12982: PUSH
12983: EMPTY
12984: LIST
12985: LIST
12986: LIST
12987: PPUSH
12988: CALL_OW 69
12992: PUSH
12993: FOR_IN
12994: IFFALSE 13048
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12996: LD_VAR 0 1
13000: PPUSH
13001: CALL_OW 257
13005: PUSH
13006: LD_INT 1
13008: PUSH
13009: LD_INT 2
13011: PUSH
13012: LD_INT 3
13014: PUSH
13015: LD_INT 4
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: IN
13024: IFFALSE 13046
// SetClass ( un , rand ( 1 , 4 ) ) ;
13026: LD_VAR 0 1
13030: PPUSH
13031: LD_INT 1
13033: PPUSH
13034: LD_INT 4
13036: PPUSH
13037: CALL_OW 12
13041: PPUSH
13042: CALL_OW 336
13046: GO 12993
13048: POP
13049: POP
// end ;
13050: PPOPN 1
13052: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13053: LD_EXP 26
13057: PUSH
13058: LD_EXP 38
13062: AND
13063: IFFALSE 13142
13065: GO 13067
13067: DISABLE
13068: LD_INT 0
13070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13071: LD_ADDR_VAR 0 1
13075: PUSH
13076: LD_INT 22
13078: PUSH
13079: LD_OWVAR 2
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PUSH
13088: LD_INT 21
13090: PUSH
13091: LD_INT 3
13093: PUSH
13094: EMPTY
13095: LIST
13096: LIST
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: PPUSH
13102: CALL_OW 69
13106: ST_TO_ADDR
// if not tmp then
13107: LD_VAR 0 1
13111: NOT
13112: IFFALSE 13116
// exit ;
13114: GO 13142
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13116: LD_VAR 0 1
13120: PUSH
13121: LD_INT 1
13123: PPUSH
13124: LD_VAR 0 1
13128: PPUSH
13129: CALL_OW 12
13133: ARRAY
13134: PPUSH
13135: LD_INT 100
13137: PPUSH
13138: CALL_OW 234
// end ;
13142: PPOPN 1
13144: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13145: LD_EXP 26
13149: PUSH
13150: LD_EXP 40
13154: AND
13155: IFFALSE 13253
13157: GO 13159
13159: DISABLE
13160: LD_INT 0
13162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13163: LD_ADDR_VAR 0 1
13167: PUSH
13168: LD_INT 22
13170: PUSH
13171: LD_OWVAR 2
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: PUSH
13180: LD_INT 21
13182: PUSH
13183: LD_INT 1
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: PPUSH
13194: CALL_OW 69
13198: ST_TO_ADDR
// if not tmp then
13199: LD_VAR 0 1
13203: NOT
13204: IFFALSE 13208
// exit ;
13206: GO 13253
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13208: LD_VAR 0 1
13212: PUSH
13213: LD_INT 1
13215: PPUSH
13216: LD_VAR 0 1
13220: PPUSH
13221: CALL_OW 12
13225: ARRAY
13226: PPUSH
13227: LD_INT 1
13229: PPUSH
13230: LD_INT 4
13232: PPUSH
13233: CALL_OW 12
13237: PPUSH
13238: LD_INT 3000
13240: PPUSH
13241: LD_INT 9000
13243: PPUSH
13244: CALL_OW 12
13248: PPUSH
13249: CALL_OW 492
// end ;
13253: PPOPN 1
13255: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13256: LD_EXP 26
13260: PUSH
13261: LD_EXP 41
13265: AND
13266: IFFALSE 13286
13268: GO 13270
13270: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13271: LD_INT 1
13273: PPUSH
13274: LD_OWVAR 2
13278: PPUSH
13279: LD_INT 0
13281: PPUSH
13282: CALL_OW 324
13286: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13287: LD_EXP 26
13291: PUSH
13292: LD_EXP 42
13296: AND
13297: IFFALSE 13380
13299: GO 13301
13301: DISABLE
13302: LD_INT 0
13304: PPUSH
13305: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13306: LD_ADDR_VAR 0 2
13310: PUSH
13311: LD_INT 22
13313: PUSH
13314: LD_OWVAR 2
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: PUSH
13323: LD_INT 21
13325: PUSH
13326: LD_INT 3
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: PUSH
13333: EMPTY
13334: LIST
13335: LIST
13336: PPUSH
13337: CALL_OW 69
13341: ST_TO_ADDR
// if not tmp then
13342: LD_VAR 0 2
13346: NOT
13347: IFFALSE 13351
// exit ;
13349: GO 13380
// for i in tmp do
13351: LD_ADDR_VAR 0 1
13355: PUSH
13356: LD_VAR 0 2
13360: PUSH
13361: FOR_IN
13362: IFFALSE 13378
// SetBLevel ( i , 10 ) ;
13364: LD_VAR 0 1
13368: PPUSH
13369: LD_INT 10
13371: PPUSH
13372: CALL_OW 241
13376: GO 13361
13378: POP
13379: POP
// end ;
13380: PPOPN 2
13382: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13383: LD_EXP 26
13387: PUSH
13388: LD_EXP 43
13392: AND
13393: IFFALSE 13504
13395: GO 13397
13397: DISABLE
13398: LD_INT 0
13400: PPUSH
13401: PPUSH
13402: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13403: LD_ADDR_VAR 0 3
13407: PUSH
13408: LD_INT 22
13410: PUSH
13411: LD_OWVAR 2
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PUSH
13420: LD_INT 25
13422: PUSH
13423: LD_INT 1
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PPUSH
13434: CALL_OW 69
13438: ST_TO_ADDR
// if not tmp then
13439: LD_VAR 0 3
13443: NOT
13444: IFFALSE 13448
// exit ;
13446: GO 13504
// un := tmp [ rand ( 1 , tmp ) ] ;
13448: LD_ADDR_VAR 0 2
13452: PUSH
13453: LD_VAR 0 3
13457: PUSH
13458: LD_INT 1
13460: PPUSH
13461: LD_VAR 0 3
13465: PPUSH
13466: CALL_OW 12
13470: ARRAY
13471: ST_TO_ADDR
// if Crawls ( un ) then
13472: LD_VAR 0 2
13476: PPUSH
13477: CALL_OW 318
13481: IFFALSE 13492
// ComWalk ( un ) ;
13483: LD_VAR 0 2
13487: PPUSH
13488: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13492: LD_VAR 0 2
13496: PPUSH
13497: LD_INT 5
13499: PPUSH
13500: CALL_OW 336
// end ;
13504: PPOPN 3
13506: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13507: LD_EXP 26
13511: PUSH
13512: LD_EXP 44
13516: AND
13517: PUSH
13518: LD_OWVAR 67
13522: PUSH
13523: LD_INT 4
13525: LESS
13526: AND
13527: IFFALSE 13546
13529: GO 13531
13531: DISABLE
// begin Difficulty := Difficulty + 1 ;
13532: LD_ADDR_OWVAR 67
13536: PUSH
13537: LD_OWVAR 67
13541: PUSH
13542: LD_INT 1
13544: PLUS
13545: ST_TO_ADDR
// end ;
13546: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13547: LD_EXP 26
13551: PUSH
13552: LD_EXP 45
13556: AND
13557: IFFALSE 13660
13559: GO 13561
13561: DISABLE
13562: LD_INT 0
13564: PPUSH
// begin for i := 1 to 5 do
13565: LD_ADDR_VAR 0 1
13569: PUSH
13570: DOUBLE
13571: LD_INT 1
13573: DEC
13574: ST_TO_ADDR
13575: LD_INT 5
13577: PUSH
13578: FOR_TO
13579: IFFALSE 13658
// begin uc_nation := nation_nature ;
13581: LD_ADDR_OWVAR 21
13585: PUSH
13586: LD_INT 0
13588: ST_TO_ADDR
// uc_side := 0 ;
13589: LD_ADDR_OWVAR 20
13593: PUSH
13594: LD_INT 0
13596: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13597: LD_ADDR_OWVAR 29
13601: PUSH
13602: LD_INT 12
13604: PUSH
13605: LD_INT 12
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: ST_TO_ADDR
// hc_agressivity := 20 ;
13612: LD_ADDR_OWVAR 35
13616: PUSH
13617: LD_INT 20
13619: ST_TO_ADDR
// hc_class := class_tiger ;
13620: LD_ADDR_OWVAR 28
13624: PUSH
13625: LD_INT 14
13627: ST_TO_ADDR
// hc_gallery :=  ;
13628: LD_ADDR_OWVAR 33
13632: PUSH
13633: LD_STRING 
13635: ST_TO_ADDR
// hc_name :=  ;
13636: LD_ADDR_OWVAR 26
13640: PUSH
13641: LD_STRING 
13643: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13644: CALL_OW 44
13648: PPUSH
13649: LD_INT 0
13651: PPUSH
13652: CALL_OW 51
// end ;
13656: GO 13578
13658: POP
13659: POP
// end ;
13660: PPOPN 1
13662: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13663: LD_EXP 26
13667: PUSH
13668: LD_EXP 46
13672: AND
13673: IFFALSE 13682
13675: GO 13677
13677: DISABLE
// StreamSibBomb ;
13678: CALL 13683 0 0
13682: END
// export function StreamSibBomb ; var i , x , y ; begin
13683: LD_INT 0
13685: PPUSH
13686: PPUSH
13687: PPUSH
13688: PPUSH
// result := false ;
13689: LD_ADDR_VAR 0 1
13693: PUSH
13694: LD_INT 0
13696: ST_TO_ADDR
// for i := 1 to 16 do
13697: LD_ADDR_VAR 0 2
13701: PUSH
13702: DOUBLE
13703: LD_INT 1
13705: DEC
13706: ST_TO_ADDR
13707: LD_INT 16
13709: PUSH
13710: FOR_TO
13711: IFFALSE 13910
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13713: LD_ADDR_VAR 0 3
13717: PUSH
13718: LD_INT 10
13720: PUSH
13721: LD_INT 20
13723: PUSH
13724: LD_INT 30
13726: PUSH
13727: LD_INT 40
13729: PUSH
13730: LD_INT 50
13732: PUSH
13733: LD_INT 60
13735: PUSH
13736: LD_INT 70
13738: PUSH
13739: LD_INT 80
13741: PUSH
13742: LD_INT 90
13744: PUSH
13745: LD_INT 100
13747: PUSH
13748: LD_INT 110
13750: PUSH
13751: LD_INT 120
13753: PUSH
13754: LD_INT 130
13756: PUSH
13757: LD_INT 140
13759: PUSH
13760: LD_INT 150
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: PUSH
13780: LD_INT 1
13782: PPUSH
13783: LD_INT 15
13785: PPUSH
13786: CALL_OW 12
13790: ARRAY
13791: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13792: LD_ADDR_VAR 0 4
13796: PUSH
13797: LD_INT 10
13799: PUSH
13800: LD_INT 20
13802: PUSH
13803: LD_INT 30
13805: PUSH
13806: LD_INT 40
13808: PUSH
13809: LD_INT 50
13811: PUSH
13812: LD_INT 60
13814: PUSH
13815: LD_INT 70
13817: PUSH
13818: LD_INT 80
13820: PUSH
13821: LD_INT 90
13823: PUSH
13824: LD_INT 100
13826: PUSH
13827: LD_INT 110
13829: PUSH
13830: LD_INT 120
13832: PUSH
13833: LD_INT 130
13835: PUSH
13836: LD_INT 140
13838: PUSH
13839: LD_INT 150
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: PUSH
13859: LD_INT 1
13861: PPUSH
13862: LD_INT 15
13864: PPUSH
13865: CALL_OW 12
13869: ARRAY
13870: ST_TO_ADDR
// if ValidHex ( x , y ) then
13871: LD_VAR 0 3
13875: PPUSH
13876: LD_VAR 0 4
13880: PPUSH
13881: CALL_OW 488
13885: IFFALSE 13908
// begin result := [ x , y ] ;
13887: LD_ADDR_VAR 0 1
13891: PUSH
13892: LD_VAR 0 3
13896: PUSH
13897: LD_VAR 0 4
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: ST_TO_ADDR
// break ;
13906: GO 13910
// end ; end ;
13908: GO 13710
13910: POP
13911: POP
// if result then
13912: LD_VAR 0 1
13916: IFFALSE 13976
// begin ToLua ( playSibBomb() ) ;
13918: LD_STRING playSibBomb()
13920: PPUSH
13921: CALL_OW 559
// wait ( 0 0$14 ) ;
13925: LD_INT 490
13927: PPUSH
13928: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13932: LD_VAR 0 1
13936: PUSH
13937: LD_INT 1
13939: ARRAY
13940: PPUSH
13941: LD_VAR 0 1
13945: PUSH
13946: LD_INT 2
13948: ARRAY
13949: PPUSH
13950: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13954: LD_VAR 0 1
13958: PUSH
13959: LD_INT 1
13961: ARRAY
13962: PPUSH
13963: LD_VAR 0 1
13967: PUSH
13968: LD_INT 2
13970: ARRAY
13971: PPUSH
13972: CALL_OW 429
// end ; end ;
13976: LD_VAR 0 1
13980: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13981: LD_EXP 26
13985: PUSH
13986: LD_EXP 48
13990: AND
13991: IFFALSE 14003
13993: GO 13995
13995: DISABLE
// YouLost (  ) ;
13996: LD_STRING 
13998: PPUSH
13999: CALL_OW 104
14003: END
// every 0 0$1 trigger StreamModeActive and sFog do
14004: LD_EXP 26
14008: PUSH
14009: LD_EXP 47
14013: AND
14014: IFFALSE 14028
14016: GO 14018
14018: DISABLE
// FogOff ( your_side ) ;
14019: LD_OWVAR 2
14023: PPUSH
14024: CALL_OW 344
14028: END
// every 0 0$1 trigger StreamModeActive and sSun do
14029: LD_EXP 26
14033: PUSH
14034: LD_EXP 49
14038: AND
14039: IFFALSE 14067
14041: GO 14043
14043: DISABLE
// begin solar_recharge_percent := 0 ;
14044: LD_ADDR_OWVAR 79
14048: PUSH
14049: LD_INT 0
14051: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14052: LD_INT 10500
14054: PPUSH
14055: CALL_OW 67
// solar_recharge_percent := 100 ;
14059: LD_ADDR_OWVAR 79
14063: PUSH
14064: LD_INT 100
14066: ST_TO_ADDR
// end ;
14067: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14068: LD_EXP 26
14072: PUSH
14073: LD_EXP 50
14077: AND
14078: IFFALSE 14317
14080: GO 14082
14082: DISABLE
14083: LD_INT 0
14085: PPUSH
14086: PPUSH
14087: PPUSH
// begin tmp := [ ] ;
14088: LD_ADDR_VAR 0 3
14092: PUSH
14093: EMPTY
14094: ST_TO_ADDR
// for i := 1 to 6 do
14095: LD_ADDR_VAR 0 1
14099: PUSH
14100: DOUBLE
14101: LD_INT 1
14103: DEC
14104: ST_TO_ADDR
14105: LD_INT 6
14107: PUSH
14108: FOR_TO
14109: IFFALSE 14214
// begin uc_nation := nation_nature ;
14111: LD_ADDR_OWVAR 21
14115: PUSH
14116: LD_INT 0
14118: ST_TO_ADDR
// uc_side := 0 ;
14119: LD_ADDR_OWVAR 20
14123: PUSH
14124: LD_INT 0
14126: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14127: LD_ADDR_OWVAR 29
14131: PUSH
14132: LD_INT 12
14134: PUSH
14135: LD_INT 12
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: ST_TO_ADDR
// hc_agressivity := 20 ;
14142: LD_ADDR_OWVAR 35
14146: PUSH
14147: LD_INT 20
14149: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14150: LD_ADDR_OWVAR 28
14154: PUSH
14155: LD_INT 17
14157: ST_TO_ADDR
// hc_gallery :=  ;
14158: LD_ADDR_OWVAR 33
14162: PUSH
14163: LD_STRING 
14165: ST_TO_ADDR
// hc_name :=  ;
14166: LD_ADDR_OWVAR 26
14170: PUSH
14171: LD_STRING 
14173: ST_TO_ADDR
// un := CreateHuman ;
14174: LD_ADDR_VAR 0 2
14178: PUSH
14179: CALL_OW 44
14183: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14184: LD_VAR 0 2
14188: PPUSH
14189: LD_INT 1
14191: PPUSH
14192: CALL_OW 51
// tmp := tmp ^ un ;
14196: LD_ADDR_VAR 0 3
14200: PUSH
14201: LD_VAR 0 3
14205: PUSH
14206: LD_VAR 0 2
14210: ADD
14211: ST_TO_ADDR
// end ;
14212: GO 14108
14214: POP
14215: POP
// repeat wait ( 0 0$1 ) ;
14216: LD_INT 35
14218: PPUSH
14219: CALL_OW 67
// for un in tmp do
14223: LD_ADDR_VAR 0 2
14227: PUSH
14228: LD_VAR 0 3
14232: PUSH
14233: FOR_IN
14234: IFFALSE 14308
// begin if IsDead ( un ) then
14236: LD_VAR 0 2
14240: PPUSH
14241: CALL_OW 301
14245: IFFALSE 14265
// begin tmp := tmp diff un ;
14247: LD_ADDR_VAR 0 3
14251: PUSH
14252: LD_VAR 0 3
14256: PUSH
14257: LD_VAR 0 2
14261: DIFF
14262: ST_TO_ADDR
// continue ;
14263: GO 14233
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14265: LD_VAR 0 2
14269: PPUSH
14270: LD_INT 3
14272: PUSH
14273: LD_INT 22
14275: PUSH
14276: LD_INT 0
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: PPUSH
14287: CALL_OW 69
14291: PPUSH
14292: LD_VAR 0 2
14296: PPUSH
14297: CALL_OW 74
14301: PPUSH
14302: CALL_OW 115
// end ;
14306: GO 14233
14308: POP
14309: POP
// until not tmp ;
14310: LD_VAR 0 3
14314: NOT
14315: IFFALSE 14216
// end ;
14317: PPOPN 3
14319: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14320: LD_EXP 26
14324: PUSH
14325: LD_EXP 51
14329: AND
14330: IFFALSE 14384
14332: GO 14334
14334: DISABLE
// begin ToLua ( displayTroll(); ) ;
14335: LD_STRING displayTroll();
14337: PPUSH
14338: CALL_OW 559
// wait ( 3 3$00 ) ;
14342: LD_INT 6300
14344: PPUSH
14345: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14349: LD_STRING hideTroll();
14351: PPUSH
14352: CALL_OW 559
// wait ( 1 1$00 ) ;
14356: LD_INT 2100
14358: PPUSH
14359: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14363: LD_STRING displayTroll();
14365: PPUSH
14366: CALL_OW 559
// wait ( 1 1$00 ) ;
14370: LD_INT 2100
14372: PPUSH
14373: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14377: LD_STRING hideTroll();
14379: PPUSH
14380: CALL_OW 559
// end ;
14384: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14385: LD_EXP 26
14389: PUSH
14390: LD_EXP 52
14394: AND
14395: IFFALSE 14458
14397: GO 14399
14399: DISABLE
14400: LD_INT 0
14402: PPUSH
// begin p := 0 ;
14403: LD_ADDR_VAR 0 1
14407: PUSH
14408: LD_INT 0
14410: ST_TO_ADDR
// repeat game_speed := 1 ;
14411: LD_ADDR_OWVAR 65
14415: PUSH
14416: LD_INT 1
14418: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14419: LD_INT 35
14421: PPUSH
14422: CALL_OW 67
// p := p + 1 ;
14426: LD_ADDR_VAR 0 1
14430: PUSH
14431: LD_VAR 0 1
14435: PUSH
14436: LD_INT 1
14438: PLUS
14439: ST_TO_ADDR
// until p >= 60 ;
14440: LD_VAR 0 1
14444: PUSH
14445: LD_INT 60
14447: GREATEREQUAL
14448: IFFALSE 14411
// game_speed := 4 ;
14450: LD_ADDR_OWVAR 65
14454: PUSH
14455: LD_INT 4
14457: ST_TO_ADDR
// end ;
14458: PPOPN 1
14460: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14461: LD_EXP 26
14465: PUSH
14466: LD_EXP 53
14470: AND
14471: IFFALSE 14617
14473: GO 14475
14475: DISABLE
14476: LD_INT 0
14478: PPUSH
14479: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14480: LD_ADDR_VAR 0 1
14484: PUSH
14485: LD_INT 22
14487: PUSH
14488: LD_OWVAR 2
14492: PUSH
14493: EMPTY
14494: LIST
14495: LIST
14496: PUSH
14497: LD_INT 2
14499: PUSH
14500: LD_INT 30
14502: PUSH
14503: LD_INT 0
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: PUSH
14510: LD_INT 30
14512: PUSH
14513: LD_INT 1
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: LIST
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: PPUSH
14529: CALL_OW 69
14533: ST_TO_ADDR
// if not depot then
14534: LD_VAR 0 1
14538: NOT
14539: IFFALSE 14543
// exit ;
14541: GO 14617
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14543: LD_ADDR_VAR 0 2
14547: PUSH
14548: LD_VAR 0 1
14552: PUSH
14553: LD_INT 1
14555: PPUSH
14556: LD_VAR 0 1
14560: PPUSH
14561: CALL_OW 12
14565: ARRAY
14566: PPUSH
14567: CALL_OW 274
14571: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14572: LD_VAR 0 2
14576: PPUSH
14577: LD_INT 1
14579: PPUSH
14580: LD_INT 0
14582: PPUSH
14583: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14587: LD_VAR 0 2
14591: PPUSH
14592: LD_INT 2
14594: PPUSH
14595: LD_INT 0
14597: PPUSH
14598: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14602: LD_VAR 0 2
14606: PPUSH
14607: LD_INT 3
14609: PPUSH
14610: LD_INT 0
14612: PPUSH
14613: CALL_OW 277
// end ;
14617: PPOPN 2
14619: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14620: LD_EXP 26
14624: PUSH
14625: LD_EXP 54
14629: AND
14630: IFFALSE 14727
14632: GO 14634
14634: DISABLE
14635: LD_INT 0
14637: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14638: LD_ADDR_VAR 0 1
14642: PUSH
14643: LD_INT 22
14645: PUSH
14646: LD_OWVAR 2
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: PUSH
14655: LD_INT 21
14657: PUSH
14658: LD_INT 1
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: PUSH
14665: LD_INT 3
14667: PUSH
14668: LD_INT 23
14670: PUSH
14671: LD_INT 0
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: PUSH
14682: EMPTY
14683: LIST
14684: LIST
14685: LIST
14686: PPUSH
14687: CALL_OW 69
14691: ST_TO_ADDR
// if not tmp then
14692: LD_VAR 0 1
14696: NOT
14697: IFFALSE 14701
// exit ;
14699: GO 14727
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14701: LD_VAR 0 1
14705: PUSH
14706: LD_INT 1
14708: PPUSH
14709: LD_VAR 0 1
14713: PPUSH
14714: CALL_OW 12
14718: ARRAY
14719: PPUSH
14720: LD_INT 200
14722: PPUSH
14723: CALL_OW 234
// end ;
14727: PPOPN 1
14729: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14730: LD_EXP 26
14734: PUSH
14735: LD_EXP 55
14739: AND
14740: IFFALSE 14819
14742: GO 14744
14744: DISABLE
14745: LD_INT 0
14747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14748: LD_ADDR_VAR 0 1
14752: PUSH
14753: LD_INT 22
14755: PUSH
14756: LD_OWVAR 2
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PUSH
14765: LD_INT 21
14767: PUSH
14768: LD_INT 2
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: PPUSH
14779: CALL_OW 69
14783: ST_TO_ADDR
// if not tmp then
14784: LD_VAR 0 1
14788: NOT
14789: IFFALSE 14793
// exit ;
14791: GO 14819
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14793: LD_VAR 0 1
14797: PUSH
14798: LD_INT 1
14800: PPUSH
14801: LD_VAR 0 1
14805: PPUSH
14806: CALL_OW 12
14810: ARRAY
14811: PPUSH
14812: LD_INT 60
14814: PPUSH
14815: CALL_OW 234
// end ;
14819: PPOPN 1
14821: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14822: LD_EXP 26
14826: PUSH
14827: LD_EXP 56
14831: AND
14832: IFFALSE 14931
14834: GO 14836
14836: DISABLE
14837: LD_INT 0
14839: PPUSH
14840: PPUSH
// begin enable ;
14841: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14842: LD_ADDR_VAR 0 1
14846: PUSH
14847: LD_INT 22
14849: PUSH
14850: LD_OWVAR 2
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PUSH
14859: LD_INT 61
14861: PUSH
14862: EMPTY
14863: LIST
14864: PUSH
14865: LD_INT 33
14867: PUSH
14868: LD_INT 2
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: LIST
14879: PPUSH
14880: CALL_OW 69
14884: ST_TO_ADDR
// if not tmp then
14885: LD_VAR 0 1
14889: NOT
14890: IFFALSE 14894
// exit ;
14892: GO 14931
// for i in tmp do
14894: LD_ADDR_VAR 0 2
14898: PUSH
14899: LD_VAR 0 1
14903: PUSH
14904: FOR_IN
14905: IFFALSE 14929
// if IsControledBy ( i ) then
14907: LD_VAR 0 2
14911: PPUSH
14912: CALL_OW 312
14916: IFFALSE 14927
// ComUnlink ( i ) ;
14918: LD_VAR 0 2
14922: PPUSH
14923: CALL_OW 136
14927: GO 14904
14929: POP
14930: POP
// end ;
14931: PPOPN 2
14933: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14934: LD_EXP 26
14938: PUSH
14939: LD_EXP 57
14943: AND
14944: IFFALSE 15084
14946: GO 14948
14948: DISABLE
14949: LD_INT 0
14951: PPUSH
14952: PPUSH
// begin ToLua ( displayPowell(); ) ;
14953: LD_STRING displayPowell();
14955: PPUSH
14956: CALL_OW 559
// uc_side := 0 ;
14960: LD_ADDR_OWVAR 20
14964: PUSH
14965: LD_INT 0
14967: ST_TO_ADDR
// uc_nation := 2 ;
14968: LD_ADDR_OWVAR 21
14972: PUSH
14973: LD_INT 2
14975: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14976: LD_ADDR_OWVAR 37
14980: PUSH
14981: LD_INT 14
14983: ST_TO_ADDR
// vc_engine := engine_siberite ;
14984: LD_ADDR_OWVAR 39
14988: PUSH
14989: LD_INT 3
14991: ST_TO_ADDR
// vc_control := control_apeman ;
14992: LD_ADDR_OWVAR 38
14996: PUSH
14997: LD_INT 5
14999: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15000: LD_ADDR_OWVAR 40
15004: PUSH
15005: LD_INT 29
15007: ST_TO_ADDR
// un := CreateVehicle ;
15008: LD_ADDR_VAR 0 2
15012: PUSH
15013: CALL_OW 45
15017: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15018: LD_VAR 0 2
15022: PPUSH
15023: LD_INT 1
15025: PPUSH
15026: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15030: LD_INT 35
15032: PPUSH
15033: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15037: LD_VAR 0 2
15041: PPUSH
15042: LD_INT 22
15044: PUSH
15045: LD_OWVAR 2
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: PPUSH
15054: CALL_OW 69
15058: PPUSH
15059: LD_VAR 0 2
15063: PPUSH
15064: CALL_OW 74
15068: PPUSH
15069: CALL_OW 115
// until IsDead ( un ) ;
15073: LD_VAR 0 2
15077: PPUSH
15078: CALL_OW 301
15082: IFFALSE 15030
// end ;
15084: PPOPN 2
15086: END
// every 0 0$1 trigger StreamModeActive and sStu do
15087: LD_EXP 26
15091: PUSH
15092: LD_EXP 65
15096: AND
15097: IFFALSE 15113
15099: GO 15101
15101: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15102: LD_STRING displayStucuk();
15104: PPUSH
15105: CALL_OW 559
// ResetFog ;
15109: CALL_OW 335
// end ;
15113: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15114: LD_EXP 26
15118: PUSH
15119: LD_EXP 58
15123: AND
15124: IFFALSE 15265
15126: GO 15128
15128: DISABLE
15129: LD_INT 0
15131: PPUSH
15132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15133: LD_ADDR_VAR 0 2
15137: PUSH
15138: LD_INT 22
15140: PUSH
15141: LD_OWVAR 2
15145: PUSH
15146: EMPTY
15147: LIST
15148: LIST
15149: PUSH
15150: LD_INT 21
15152: PUSH
15153: LD_INT 1
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PPUSH
15164: CALL_OW 69
15168: ST_TO_ADDR
// if not tmp then
15169: LD_VAR 0 2
15173: NOT
15174: IFFALSE 15178
// exit ;
15176: GO 15265
// un := tmp [ rand ( 1 , tmp ) ] ;
15178: LD_ADDR_VAR 0 1
15182: PUSH
15183: LD_VAR 0 2
15187: PUSH
15188: LD_INT 1
15190: PPUSH
15191: LD_VAR 0 2
15195: PPUSH
15196: CALL_OW 12
15200: ARRAY
15201: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15202: LD_VAR 0 1
15206: PPUSH
15207: LD_INT 0
15209: PPUSH
15210: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15214: LD_VAR 0 1
15218: PPUSH
15219: LD_OWVAR 3
15223: PUSH
15224: LD_VAR 0 1
15228: DIFF
15229: PPUSH
15230: LD_VAR 0 1
15234: PPUSH
15235: CALL_OW 74
15239: PPUSH
15240: CALL_OW 115
// wait ( 0 0$20 ) ;
15244: LD_INT 700
15246: PPUSH
15247: CALL_OW 67
// SetSide ( un , your_side ) ;
15251: LD_VAR 0 1
15255: PPUSH
15256: LD_OWVAR 2
15260: PPUSH
15261: CALL_OW 235
// end ;
15265: PPOPN 2
15267: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15268: LD_EXP 26
15272: PUSH
15273: LD_EXP 59
15277: AND
15278: IFFALSE 15384
15280: GO 15282
15282: DISABLE
15283: LD_INT 0
15285: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15286: LD_ADDR_VAR 0 1
15290: PUSH
15291: LD_INT 22
15293: PUSH
15294: LD_OWVAR 2
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: PUSH
15303: LD_INT 2
15305: PUSH
15306: LD_INT 30
15308: PUSH
15309: LD_INT 0
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: PUSH
15316: LD_INT 30
15318: PUSH
15319: LD_INT 1
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PUSH
15326: EMPTY
15327: LIST
15328: LIST
15329: LIST
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: PPUSH
15335: CALL_OW 69
15339: ST_TO_ADDR
// if not depot then
15340: LD_VAR 0 1
15344: NOT
15345: IFFALSE 15349
// exit ;
15347: GO 15384
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15349: LD_VAR 0 1
15353: PUSH
15354: LD_INT 1
15356: ARRAY
15357: PPUSH
15358: CALL_OW 250
15362: PPUSH
15363: LD_VAR 0 1
15367: PUSH
15368: LD_INT 1
15370: ARRAY
15371: PPUSH
15372: CALL_OW 251
15376: PPUSH
15377: LD_INT 70
15379: PPUSH
15380: CALL_OW 495
// end ;
15384: PPOPN 1
15386: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15387: LD_EXP 26
15391: PUSH
15392: LD_EXP 60
15396: AND
15397: IFFALSE 15608
15399: GO 15401
15401: DISABLE
15402: LD_INT 0
15404: PPUSH
15405: PPUSH
15406: PPUSH
15407: PPUSH
15408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15409: LD_ADDR_VAR 0 5
15413: PUSH
15414: LD_INT 22
15416: PUSH
15417: LD_OWVAR 2
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PUSH
15426: LD_INT 21
15428: PUSH
15429: LD_INT 1
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: PUSH
15436: EMPTY
15437: LIST
15438: LIST
15439: PPUSH
15440: CALL_OW 69
15444: ST_TO_ADDR
// if not tmp then
15445: LD_VAR 0 5
15449: NOT
15450: IFFALSE 15454
// exit ;
15452: GO 15608
// for i in tmp do
15454: LD_ADDR_VAR 0 1
15458: PUSH
15459: LD_VAR 0 5
15463: PUSH
15464: FOR_IN
15465: IFFALSE 15606
// begin d := rand ( 0 , 5 ) ;
15467: LD_ADDR_VAR 0 4
15471: PUSH
15472: LD_INT 0
15474: PPUSH
15475: LD_INT 5
15477: PPUSH
15478: CALL_OW 12
15482: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15483: LD_ADDR_VAR 0 2
15487: PUSH
15488: LD_VAR 0 1
15492: PPUSH
15493: CALL_OW 250
15497: PPUSH
15498: LD_VAR 0 4
15502: PPUSH
15503: LD_INT 3
15505: PPUSH
15506: LD_INT 12
15508: PPUSH
15509: CALL_OW 12
15513: PPUSH
15514: CALL_OW 272
15518: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15519: LD_ADDR_VAR 0 3
15523: PUSH
15524: LD_VAR 0 1
15528: PPUSH
15529: CALL_OW 251
15533: PPUSH
15534: LD_VAR 0 4
15538: PPUSH
15539: LD_INT 3
15541: PPUSH
15542: LD_INT 12
15544: PPUSH
15545: CALL_OW 12
15549: PPUSH
15550: CALL_OW 273
15554: ST_TO_ADDR
// if ValidHex ( x , y ) then
15555: LD_VAR 0 2
15559: PPUSH
15560: LD_VAR 0 3
15564: PPUSH
15565: CALL_OW 488
15569: IFFALSE 15604
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15571: LD_VAR 0 1
15575: PPUSH
15576: LD_VAR 0 2
15580: PPUSH
15581: LD_VAR 0 3
15585: PPUSH
15586: LD_INT 3
15588: PPUSH
15589: LD_INT 6
15591: PPUSH
15592: CALL_OW 12
15596: PPUSH
15597: LD_INT 1
15599: PPUSH
15600: CALL_OW 483
// end ;
15604: GO 15464
15606: POP
15607: POP
// end ;
15608: PPOPN 5
15610: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15611: LD_EXP 26
15615: PUSH
15616: LD_EXP 61
15620: AND
15621: IFFALSE 15715
15623: GO 15625
15625: DISABLE
15626: LD_INT 0
15628: PPUSH
15629: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15630: LD_ADDR_VAR 0 2
15634: PUSH
15635: LD_INT 22
15637: PUSH
15638: LD_OWVAR 2
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PUSH
15647: LD_INT 32
15649: PUSH
15650: LD_INT 1
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PUSH
15657: LD_INT 21
15659: PUSH
15660: LD_INT 2
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: LIST
15671: PPUSH
15672: CALL_OW 69
15676: ST_TO_ADDR
// if not tmp then
15677: LD_VAR 0 2
15681: NOT
15682: IFFALSE 15686
// exit ;
15684: GO 15715
// for i in tmp do
15686: LD_ADDR_VAR 0 1
15690: PUSH
15691: LD_VAR 0 2
15695: PUSH
15696: FOR_IN
15697: IFFALSE 15713
// SetFuel ( i , 0 ) ;
15699: LD_VAR 0 1
15703: PPUSH
15704: LD_INT 0
15706: PPUSH
15707: CALL_OW 240
15711: GO 15696
15713: POP
15714: POP
// end ;
15715: PPOPN 2
15717: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15718: LD_EXP 26
15722: PUSH
15723: LD_EXP 62
15727: AND
15728: IFFALSE 15794
15730: GO 15732
15732: DISABLE
15733: LD_INT 0
15735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15736: LD_ADDR_VAR 0 1
15740: PUSH
15741: LD_INT 22
15743: PUSH
15744: LD_OWVAR 2
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: PUSH
15753: LD_INT 30
15755: PUSH
15756: LD_INT 29
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: PPUSH
15767: CALL_OW 69
15771: ST_TO_ADDR
// if not tmp then
15772: LD_VAR 0 1
15776: NOT
15777: IFFALSE 15781
// exit ;
15779: GO 15794
// DestroyUnit ( tmp [ 1 ] ) ;
15781: LD_VAR 0 1
15785: PUSH
15786: LD_INT 1
15788: ARRAY
15789: PPUSH
15790: CALL_OW 65
// end ;
15794: PPOPN 1
15796: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15797: LD_EXP 26
15801: PUSH
15802: LD_EXP 64
15806: AND
15807: IFFALSE 15936
15809: GO 15811
15811: DISABLE
15812: LD_INT 0
15814: PPUSH
// begin uc_side := 0 ;
15815: LD_ADDR_OWVAR 20
15819: PUSH
15820: LD_INT 0
15822: ST_TO_ADDR
// uc_nation := nation_arabian ;
15823: LD_ADDR_OWVAR 21
15827: PUSH
15828: LD_INT 2
15830: ST_TO_ADDR
// hc_gallery :=  ;
15831: LD_ADDR_OWVAR 33
15835: PUSH
15836: LD_STRING 
15838: ST_TO_ADDR
// hc_name :=  ;
15839: LD_ADDR_OWVAR 26
15843: PUSH
15844: LD_STRING 
15846: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15847: LD_INT 1
15849: PPUSH
15850: LD_INT 11
15852: PPUSH
15853: LD_INT 10
15855: PPUSH
15856: CALL_OW 380
// un := CreateHuman ;
15860: LD_ADDR_VAR 0 1
15864: PUSH
15865: CALL_OW 44
15869: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15870: LD_VAR 0 1
15874: PPUSH
15875: LD_INT 1
15877: PPUSH
15878: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15882: LD_INT 35
15884: PPUSH
15885: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15889: LD_VAR 0 1
15893: PPUSH
15894: LD_INT 22
15896: PUSH
15897: LD_OWVAR 2
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PPUSH
15906: CALL_OW 69
15910: PPUSH
15911: LD_VAR 0 1
15915: PPUSH
15916: CALL_OW 74
15920: PPUSH
15921: CALL_OW 115
// until IsDead ( un ) ;
15925: LD_VAR 0 1
15929: PPUSH
15930: CALL_OW 301
15934: IFFALSE 15882
// end ;
15936: PPOPN 1
15938: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15939: LD_EXP 26
15943: PUSH
15944: LD_EXP 66
15948: AND
15949: IFFALSE 15961
15951: GO 15953
15953: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15954: LD_STRING earthquake(getX(game), 0, 32)
15956: PPUSH
15957: CALL_OW 559
15961: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15962: LD_EXP 26
15966: PUSH
15967: LD_EXP 67
15971: AND
15972: IFFALSE 16063
15974: GO 15976
15976: DISABLE
15977: LD_INT 0
15979: PPUSH
// begin enable ;
15980: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15981: LD_ADDR_VAR 0 1
15985: PUSH
15986: LD_INT 22
15988: PUSH
15989: LD_OWVAR 2
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PUSH
15998: LD_INT 21
16000: PUSH
16001: LD_INT 2
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: PUSH
16008: LD_INT 33
16010: PUSH
16011: LD_INT 3
16013: PUSH
16014: EMPTY
16015: LIST
16016: LIST
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: LIST
16022: PPUSH
16023: CALL_OW 69
16027: ST_TO_ADDR
// if not tmp then
16028: LD_VAR 0 1
16032: NOT
16033: IFFALSE 16037
// exit ;
16035: GO 16063
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16037: LD_VAR 0 1
16041: PUSH
16042: LD_INT 1
16044: PPUSH
16045: LD_VAR 0 1
16049: PPUSH
16050: CALL_OW 12
16054: ARRAY
16055: PPUSH
16056: LD_INT 1
16058: PPUSH
16059: CALL_OW 234
// end ;
16063: PPOPN 1
16065: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16066: LD_EXP 26
16070: PUSH
16071: LD_EXP 68
16075: AND
16076: IFFALSE 16217
16078: GO 16080
16080: DISABLE
16081: LD_INT 0
16083: PPUSH
16084: PPUSH
16085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16086: LD_ADDR_VAR 0 3
16090: PUSH
16091: LD_INT 22
16093: PUSH
16094: LD_OWVAR 2
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PUSH
16103: LD_INT 25
16105: PUSH
16106: LD_INT 1
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PPUSH
16117: CALL_OW 69
16121: ST_TO_ADDR
// if not tmp then
16122: LD_VAR 0 3
16126: NOT
16127: IFFALSE 16131
// exit ;
16129: GO 16217
// un := tmp [ rand ( 1 , tmp ) ] ;
16131: LD_ADDR_VAR 0 2
16135: PUSH
16136: LD_VAR 0 3
16140: PUSH
16141: LD_INT 1
16143: PPUSH
16144: LD_VAR 0 3
16148: PPUSH
16149: CALL_OW 12
16153: ARRAY
16154: ST_TO_ADDR
// if Crawls ( un ) then
16155: LD_VAR 0 2
16159: PPUSH
16160: CALL_OW 318
16164: IFFALSE 16175
// ComWalk ( un ) ;
16166: LD_VAR 0 2
16170: PPUSH
16171: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16175: LD_VAR 0 2
16179: PPUSH
16180: LD_INT 9
16182: PPUSH
16183: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16187: LD_INT 28
16189: PPUSH
16190: LD_OWVAR 2
16194: PPUSH
16195: LD_INT 2
16197: PPUSH
16198: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16202: LD_INT 29
16204: PPUSH
16205: LD_OWVAR 2
16209: PPUSH
16210: LD_INT 2
16212: PPUSH
16213: CALL_OW 322
// end ;
16217: PPOPN 3
16219: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16220: LD_EXP 26
16224: PUSH
16225: LD_EXP 69
16229: AND
16230: IFFALSE 16341
16232: GO 16234
16234: DISABLE
16235: LD_INT 0
16237: PPUSH
16238: PPUSH
16239: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16240: LD_ADDR_VAR 0 3
16244: PUSH
16245: LD_INT 22
16247: PUSH
16248: LD_OWVAR 2
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: PUSH
16257: LD_INT 25
16259: PUSH
16260: LD_INT 1
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: PPUSH
16271: CALL_OW 69
16275: ST_TO_ADDR
// if not tmp then
16276: LD_VAR 0 3
16280: NOT
16281: IFFALSE 16285
// exit ;
16283: GO 16341
// un := tmp [ rand ( 1 , tmp ) ] ;
16285: LD_ADDR_VAR 0 2
16289: PUSH
16290: LD_VAR 0 3
16294: PUSH
16295: LD_INT 1
16297: PPUSH
16298: LD_VAR 0 3
16302: PPUSH
16303: CALL_OW 12
16307: ARRAY
16308: ST_TO_ADDR
// if Crawls ( un ) then
16309: LD_VAR 0 2
16313: PPUSH
16314: CALL_OW 318
16318: IFFALSE 16329
// ComWalk ( un ) ;
16320: LD_VAR 0 2
16324: PPUSH
16325: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16329: LD_VAR 0 2
16333: PPUSH
16334: LD_INT 8
16336: PPUSH
16337: CALL_OW 336
// end ;
16341: PPOPN 3
16343: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16344: LD_EXP 26
16348: PUSH
16349: LD_EXP 70
16353: AND
16354: IFFALSE 16498
16356: GO 16358
16358: DISABLE
16359: LD_INT 0
16361: PPUSH
16362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16363: LD_ADDR_VAR 0 2
16367: PUSH
16368: LD_INT 22
16370: PUSH
16371: LD_OWVAR 2
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: PUSH
16380: LD_INT 21
16382: PUSH
16383: LD_INT 2
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: PUSH
16390: LD_INT 2
16392: PUSH
16393: LD_INT 34
16395: PUSH
16396: LD_INT 12
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: PUSH
16403: LD_INT 34
16405: PUSH
16406: LD_INT 51
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: PUSH
16413: LD_INT 34
16415: PUSH
16416: LD_INT 32
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: LIST
16433: PPUSH
16434: CALL_OW 69
16438: ST_TO_ADDR
// if not tmp then
16439: LD_VAR 0 2
16443: NOT
16444: IFFALSE 16448
// exit ;
16446: GO 16498
// for i in tmp do
16448: LD_ADDR_VAR 0 1
16452: PUSH
16453: LD_VAR 0 2
16457: PUSH
16458: FOR_IN
16459: IFFALSE 16496
// if GetCargo ( i , mat_artifact ) = 0 then
16461: LD_VAR 0 1
16465: PPUSH
16466: LD_INT 4
16468: PPUSH
16469: CALL_OW 289
16473: PUSH
16474: LD_INT 0
16476: EQUAL
16477: IFFALSE 16494
// SetCargo ( i , mat_siberit , 100 ) ;
16479: LD_VAR 0 1
16483: PPUSH
16484: LD_INT 3
16486: PPUSH
16487: LD_INT 100
16489: PPUSH
16490: CALL_OW 290
16494: GO 16458
16496: POP
16497: POP
// end ;
16498: PPOPN 2
16500: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16501: LD_EXP 26
16505: PUSH
16506: LD_EXP 71
16510: AND
16511: IFFALSE 16694
16513: GO 16515
16515: DISABLE
16516: LD_INT 0
16518: PPUSH
16519: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16520: LD_ADDR_VAR 0 2
16524: PUSH
16525: LD_INT 22
16527: PUSH
16528: LD_OWVAR 2
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PPUSH
16537: CALL_OW 69
16541: ST_TO_ADDR
// if not tmp then
16542: LD_VAR 0 2
16546: NOT
16547: IFFALSE 16551
// exit ;
16549: GO 16694
// for i := 1 to 2 do
16551: LD_ADDR_VAR 0 1
16555: PUSH
16556: DOUBLE
16557: LD_INT 1
16559: DEC
16560: ST_TO_ADDR
16561: LD_INT 2
16563: PUSH
16564: FOR_TO
16565: IFFALSE 16692
// begin uc_side := your_side ;
16567: LD_ADDR_OWVAR 20
16571: PUSH
16572: LD_OWVAR 2
16576: ST_TO_ADDR
// uc_nation := nation_american ;
16577: LD_ADDR_OWVAR 21
16581: PUSH
16582: LD_INT 1
16584: ST_TO_ADDR
// vc_chassis := us_morphling ;
16585: LD_ADDR_OWVAR 37
16589: PUSH
16590: LD_INT 5
16592: ST_TO_ADDR
// vc_engine := engine_siberite ;
16593: LD_ADDR_OWVAR 39
16597: PUSH
16598: LD_INT 3
16600: ST_TO_ADDR
// vc_control := control_computer ;
16601: LD_ADDR_OWVAR 38
16605: PUSH
16606: LD_INT 3
16608: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16609: LD_ADDR_OWVAR 40
16613: PUSH
16614: LD_INT 10
16616: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16617: LD_VAR 0 2
16621: PUSH
16622: LD_INT 1
16624: ARRAY
16625: PPUSH
16626: CALL_OW 310
16630: NOT
16631: IFFALSE 16678
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16633: CALL_OW 45
16637: PPUSH
16638: LD_VAR 0 2
16642: PUSH
16643: LD_INT 1
16645: ARRAY
16646: PPUSH
16647: CALL_OW 250
16651: PPUSH
16652: LD_VAR 0 2
16656: PUSH
16657: LD_INT 1
16659: ARRAY
16660: PPUSH
16661: CALL_OW 251
16665: PPUSH
16666: LD_INT 12
16668: PPUSH
16669: LD_INT 1
16671: PPUSH
16672: CALL_OW 50
16676: GO 16690
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16678: CALL_OW 45
16682: PPUSH
16683: LD_INT 1
16685: PPUSH
16686: CALL_OW 51
// end ;
16690: GO 16564
16692: POP
16693: POP
// end ;
16694: PPOPN 2
16696: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16697: LD_EXP 26
16701: PUSH
16702: LD_EXP 72
16706: AND
16707: IFFALSE 16929
16709: GO 16711
16711: DISABLE
16712: LD_INT 0
16714: PPUSH
16715: PPUSH
16716: PPUSH
16717: PPUSH
16718: PPUSH
16719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16720: LD_ADDR_VAR 0 6
16724: PUSH
16725: LD_INT 22
16727: PUSH
16728: LD_OWVAR 2
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: LD_INT 21
16739: PUSH
16740: LD_INT 1
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: PUSH
16747: LD_INT 3
16749: PUSH
16750: LD_INT 23
16752: PUSH
16753: LD_INT 0
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: EMPTY
16761: LIST
16762: LIST
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: LIST
16768: PPUSH
16769: CALL_OW 69
16773: ST_TO_ADDR
// if not tmp then
16774: LD_VAR 0 6
16778: NOT
16779: IFFALSE 16783
// exit ;
16781: GO 16929
// s1 := rand ( 1 , 4 ) ;
16783: LD_ADDR_VAR 0 2
16787: PUSH
16788: LD_INT 1
16790: PPUSH
16791: LD_INT 4
16793: PPUSH
16794: CALL_OW 12
16798: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16799: LD_ADDR_VAR 0 4
16803: PUSH
16804: LD_VAR 0 6
16808: PUSH
16809: LD_INT 1
16811: ARRAY
16812: PPUSH
16813: LD_VAR 0 2
16817: PPUSH
16818: CALL_OW 259
16822: ST_TO_ADDR
// if s1 = 1 then
16823: LD_VAR 0 2
16827: PUSH
16828: LD_INT 1
16830: EQUAL
16831: IFFALSE 16851
// s2 := rand ( 2 , 4 ) else
16833: LD_ADDR_VAR 0 3
16837: PUSH
16838: LD_INT 2
16840: PPUSH
16841: LD_INT 4
16843: PPUSH
16844: CALL_OW 12
16848: ST_TO_ADDR
16849: GO 16859
// s2 := 1 ;
16851: LD_ADDR_VAR 0 3
16855: PUSH
16856: LD_INT 1
16858: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16859: LD_ADDR_VAR 0 5
16863: PUSH
16864: LD_VAR 0 6
16868: PUSH
16869: LD_INT 1
16871: ARRAY
16872: PPUSH
16873: LD_VAR 0 3
16877: PPUSH
16878: CALL_OW 259
16882: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16883: LD_VAR 0 6
16887: PUSH
16888: LD_INT 1
16890: ARRAY
16891: PPUSH
16892: LD_VAR 0 2
16896: PPUSH
16897: LD_VAR 0 5
16901: PPUSH
16902: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16906: LD_VAR 0 6
16910: PUSH
16911: LD_INT 1
16913: ARRAY
16914: PPUSH
16915: LD_VAR 0 3
16919: PPUSH
16920: LD_VAR 0 4
16924: PPUSH
16925: CALL_OW 237
// end ;
16929: PPOPN 6
16931: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16932: LD_EXP 26
16936: PUSH
16937: LD_EXP 73
16941: AND
16942: IFFALSE 17021
16944: GO 16946
16946: DISABLE
16947: LD_INT 0
16949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16950: LD_ADDR_VAR 0 1
16954: PUSH
16955: LD_INT 22
16957: PUSH
16958: LD_OWVAR 2
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: PUSH
16967: LD_INT 30
16969: PUSH
16970: LD_INT 3
16972: PUSH
16973: EMPTY
16974: LIST
16975: LIST
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: PPUSH
16981: CALL_OW 69
16985: ST_TO_ADDR
// if not tmp then
16986: LD_VAR 0 1
16990: NOT
16991: IFFALSE 16995
// exit ;
16993: GO 17021
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16995: LD_VAR 0 1
16999: PUSH
17000: LD_INT 1
17002: PPUSH
17003: LD_VAR 0 1
17007: PPUSH
17008: CALL_OW 12
17012: ARRAY
17013: PPUSH
17014: LD_INT 1
17016: PPUSH
17017: CALL_OW 234
// end ;
17021: PPOPN 1
17023: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17024: LD_EXP 26
17028: PUSH
17029: LD_EXP 74
17033: AND
17034: IFFALSE 17146
17036: GO 17038
17038: DISABLE
17039: LD_INT 0
17041: PPUSH
17042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17043: LD_ADDR_VAR 0 2
17047: PUSH
17048: LD_INT 22
17050: PUSH
17051: LD_OWVAR 2
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: LD_INT 2
17062: PUSH
17063: LD_INT 30
17065: PUSH
17066: LD_INT 27
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: PUSH
17073: LD_INT 30
17075: PUSH
17076: LD_INT 26
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: PUSH
17083: LD_INT 30
17085: PUSH
17086: LD_INT 28
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PPUSH
17103: CALL_OW 69
17107: ST_TO_ADDR
// if not tmp then
17108: LD_VAR 0 2
17112: NOT
17113: IFFALSE 17117
// exit ;
17115: GO 17146
// for i in tmp do
17117: LD_ADDR_VAR 0 1
17121: PUSH
17122: LD_VAR 0 2
17126: PUSH
17127: FOR_IN
17128: IFFALSE 17144
// SetLives ( i , 1 ) ;
17130: LD_VAR 0 1
17134: PPUSH
17135: LD_INT 1
17137: PPUSH
17138: CALL_OW 234
17142: GO 17127
17144: POP
17145: POP
// end ;
17146: PPOPN 2
17148: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17149: LD_EXP 26
17153: PUSH
17154: LD_EXP 75
17158: AND
17159: IFFALSE 17446
17161: GO 17163
17163: DISABLE
17164: LD_INT 0
17166: PPUSH
17167: PPUSH
17168: PPUSH
// begin i := rand ( 1 , 7 ) ;
17169: LD_ADDR_VAR 0 1
17173: PUSH
17174: LD_INT 1
17176: PPUSH
17177: LD_INT 7
17179: PPUSH
17180: CALL_OW 12
17184: ST_TO_ADDR
// case i of 1 :
17185: LD_VAR 0 1
17189: PUSH
17190: LD_INT 1
17192: DOUBLE
17193: EQUAL
17194: IFTRUE 17198
17196: GO 17208
17198: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17199: LD_STRING earthquake(getX(game), 0, 32)
17201: PPUSH
17202: CALL_OW 559
17206: GO 17446
17208: LD_INT 2
17210: DOUBLE
17211: EQUAL
17212: IFTRUE 17216
17214: GO 17230
17216: POP
// begin ToLua ( displayStucuk(); ) ;
17217: LD_STRING displayStucuk();
17219: PPUSH
17220: CALL_OW 559
// ResetFog ;
17224: CALL_OW 335
// end ; 3 :
17228: GO 17446
17230: LD_INT 3
17232: DOUBLE
17233: EQUAL
17234: IFTRUE 17238
17236: GO 17342
17238: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17239: LD_ADDR_VAR 0 2
17243: PUSH
17244: LD_INT 22
17246: PUSH
17247: LD_OWVAR 2
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PUSH
17256: LD_INT 25
17258: PUSH
17259: LD_INT 1
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: PPUSH
17270: CALL_OW 69
17274: ST_TO_ADDR
// if not tmp then
17275: LD_VAR 0 2
17279: NOT
17280: IFFALSE 17284
// exit ;
17282: GO 17446
// un := tmp [ rand ( 1 , tmp ) ] ;
17284: LD_ADDR_VAR 0 3
17288: PUSH
17289: LD_VAR 0 2
17293: PUSH
17294: LD_INT 1
17296: PPUSH
17297: LD_VAR 0 2
17301: PPUSH
17302: CALL_OW 12
17306: ARRAY
17307: ST_TO_ADDR
// if Crawls ( un ) then
17308: LD_VAR 0 3
17312: PPUSH
17313: CALL_OW 318
17317: IFFALSE 17328
// ComWalk ( un ) ;
17319: LD_VAR 0 3
17323: PPUSH
17324: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17328: LD_VAR 0 3
17332: PPUSH
17333: LD_INT 8
17335: PPUSH
17336: CALL_OW 336
// end ; 4 :
17340: GO 17446
17342: LD_INT 4
17344: DOUBLE
17345: EQUAL
17346: IFTRUE 17350
17348: GO 17424
17350: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17351: LD_ADDR_VAR 0 2
17355: PUSH
17356: LD_INT 22
17358: PUSH
17359: LD_OWVAR 2
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: PUSH
17368: LD_INT 30
17370: PUSH
17371: LD_INT 29
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: PPUSH
17382: CALL_OW 69
17386: ST_TO_ADDR
// if not tmp then
17387: LD_VAR 0 2
17391: NOT
17392: IFFALSE 17396
// exit ;
17394: GO 17446
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17396: LD_VAR 0 2
17400: PUSH
17401: LD_INT 1
17403: ARRAY
17404: PPUSH
17405: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17409: LD_VAR 0 2
17413: PUSH
17414: LD_INT 1
17416: ARRAY
17417: PPUSH
17418: CALL_OW 65
// end ; 5 .. 7 :
17422: GO 17446
17424: LD_INT 5
17426: DOUBLE
17427: GREATEREQUAL
17428: IFFALSE 17436
17430: LD_INT 7
17432: DOUBLE
17433: LESSEQUAL
17434: IFTRUE 17438
17436: GO 17445
17438: POP
// StreamSibBomb ; end ;
17439: CALL 13683 0 0
17443: GO 17446
17445: POP
// end ;
17446: PPOPN 3
17448: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17449: LD_EXP 26
17453: PUSH
17454: LD_EXP 76
17458: AND
17459: IFFALSE 17615
17461: GO 17463
17463: DISABLE
17464: LD_INT 0
17466: PPUSH
17467: PPUSH
17468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17469: LD_ADDR_VAR 0 2
17473: PUSH
17474: LD_INT 81
17476: PUSH
17477: LD_OWVAR 2
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PUSH
17486: LD_INT 2
17488: PUSH
17489: LD_INT 21
17491: PUSH
17492: LD_INT 1
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PUSH
17499: LD_INT 21
17501: PUSH
17502: LD_INT 2
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: LIST
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PPUSH
17518: CALL_OW 69
17522: ST_TO_ADDR
// if not tmp then
17523: LD_VAR 0 2
17527: NOT
17528: IFFALSE 17532
// exit ;
17530: GO 17615
// p := 0 ;
17532: LD_ADDR_VAR 0 3
17536: PUSH
17537: LD_INT 0
17539: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17540: LD_INT 35
17542: PPUSH
17543: CALL_OW 67
// p := p + 1 ;
17547: LD_ADDR_VAR 0 3
17551: PUSH
17552: LD_VAR 0 3
17556: PUSH
17557: LD_INT 1
17559: PLUS
17560: ST_TO_ADDR
// for i in tmp do
17561: LD_ADDR_VAR 0 1
17565: PUSH
17566: LD_VAR 0 2
17570: PUSH
17571: FOR_IN
17572: IFFALSE 17603
// if GetLives ( i ) < 1000 then
17574: LD_VAR 0 1
17578: PPUSH
17579: CALL_OW 256
17583: PUSH
17584: LD_INT 1000
17586: LESS
17587: IFFALSE 17601
// SetLives ( i , 1000 ) ;
17589: LD_VAR 0 1
17593: PPUSH
17594: LD_INT 1000
17596: PPUSH
17597: CALL_OW 234
17601: GO 17571
17603: POP
17604: POP
// until p > 20 ;
17605: LD_VAR 0 3
17609: PUSH
17610: LD_INT 20
17612: GREATER
17613: IFFALSE 17540
// end ;
17615: PPOPN 3
17617: END
// every 0 0$1 trigger StreamModeActive and sTime do
17618: LD_EXP 26
17622: PUSH
17623: LD_EXP 77
17627: AND
17628: IFFALSE 17663
17630: GO 17632
17632: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17633: LD_INT 28
17635: PPUSH
17636: LD_OWVAR 2
17640: PPUSH
17641: LD_INT 2
17643: PPUSH
17644: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17648: LD_INT 30
17650: PPUSH
17651: LD_OWVAR 2
17655: PPUSH
17656: LD_INT 2
17658: PPUSH
17659: CALL_OW 322
// end ;
17663: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17664: LD_EXP 26
17668: PUSH
17669: LD_EXP 78
17673: AND
17674: IFFALSE 17795
17676: GO 17678
17678: DISABLE
17679: LD_INT 0
17681: PPUSH
17682: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17683: LD_ADDR_VAR 0 2
17687: PUSH
17688: LD_INT 22
17690: PUSH
17691: LD_OWVAR 2
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: LD_INT 21
17702: PUSH
17703: LD_INT 1
17705: PUSH
17706: EMPTY
17707: LIST
17708: LIST
17709: PUSH
17710: LD_INT 3
17712: PUSH
17713: LD_INT 23
17715: PUSH
17716: LD_INT 0
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: LIST
17731: PPUSH
17732: CALL_OW 69
17736: ST_TO_ADDR
// if not tmp then
17737: LD_VAR 0 2
17741: NOT
17742: IFFALSE 17746
// exit ;
17744: GO 17795
// for i in tmp do
17746: LD_ADDR_VAR 0 1
17750: PUSH
17751: LD_VAR 0 2
17755: PUSH
17756: FOR_IN
17757: IFFALSE 17793
// begin if Crawls ( i ) then
17759: LD_VAR 0 1
17763: PPUSH
17764: CALL_OW 318
17768: IFFALSE 17779
// ComWalk ( i ) ;
17770: LD_VAR 0 1
17774: PPUSH
17775: CALL_OW 138
// SetClass ( i , 2 ) ;
17779: LD_VAR 0 1
17783: PPUSH
17784: LD_INT 2
17786: PPUSH
17787: CALL_OW 336
// end ;
17791: GO 17756
17793: POP
17794: POP
// end ;
17795: PPOPN 2
17797: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17798: LD_EXP 26
17802: PUSH
17803: LD_EXP 79
17807: AND
17808: IFFALSE 18096
17810: GO 17812
17812: DISABLE
17813: LD_INT 0
17815: PPUSH
17816: PPUSH
17817: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17818: LD_OWVAR 2
17822: PPUSH
17823: LD_INT 9
17825: PPUSH
17826: LD_INT 1
17828: PPUSH
17829: LD_INT 1
17831: PPUSH
17832: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17836: LD_INT 9
17838: PPUSH
17839: LD_OWVAR 2
17843: PPUSH
17844: CALL_OW 343
// uc_side := 9 ;
17848: LD_ADDR_OWVAR 20
17852: PUSH
17853: LD_INT 9
17855: ST_TO_ADDR
// uc_nation := 2 ;
17856: LD_ADDR_OWVAR 21
17860: PUSH
17861: LD_INT 2
17863: ST_TO_ADDR
// hc_name := Dark Warrior ;
17864: LD_ADDR_OWVAR 26
17868: PUSH
17869: LD_STRING Dark Warrior
17871: ST_TO_ADDR
// hc_gallery :=  ;
17872: LD_ADDR_OWVAR 33
17876: PUSH
17877: LD_STRING 
17879: ST_TO_ADDR
// hc_noskilllimit := true ;
17880: LD_ADDR_OWVAR 76
17884: PUSH
17885: LD_INT 1
17887: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17888: LD_ADDR_OWVAR 31
17892: PUSH
17893: LD_INT 30
17895: PUSH
17896: LD_INT 30
17898: PUSH
17899: LD_INT 30
17901: PUSH
17902: LD_INT 30
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: ST_TO_ADDR
// un := CreateHuman ;
17911: LD_ADDR_VAR 0 3
17915: PUSH
17916: CALL_OW 44
17920: ST_TO_ADDR
// hc_noskilllimit := false ;
17921: LD_ADDR_OWVAR 76
17925: PUSH
17926: LD_INT 0
17928: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17929: LD_VAR 0 3
17933: PPUSH
17934: LD_INT 1
17936: PPUSH
17937: CALL_OW 51
// ToLua ( playRanger() ) ;
17941: LD_STRING playRanger()
17943: PPUSH
17944: CALL_OW 559
// p := 0 ;
17948: LD_ADDR_VAR 0 2
17952: PUSH
17953: LD_INT 0
17955: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17956: LD_INT 35
17958: PPUSH
17959: CALL_OW 67
// p := p + 1 ;
17963: LD_ADDR_VAR 0 2
17967: PUSH
17968: LD_VAR 0 2
17972: PUSH
17973: LD_INT 1
17975: PLUS
17976: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17977: LD_VAR 0 3
17981: PPUSH
17982: CALL_OW 256
17986: PUSH
17987: LD_INT 1000
17989: LESS
17990: IFFALSE 18004
// SetLives ( un , 1000 ) ;
17992: LD_VAR 0 3
17996: PPUSH
17997: LD_INT 1000
17999: PPUSH
18000: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18004: LD_VAR 0 3
18008: PPUSH
18009: LD_INT 81
18011: PUSH
18012: LD_OWVAR 2
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PUSH
18021: LD_INT 91
18023: PUSH
18024: LD_VAR 0 3
18028: PUSH
18029: LD_INT 30
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: LIST
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PPUSH
18041: CALL_OW 69
18045: PPUSH
18046: LD_VAR 0 3
18050: PPUSH
18051: CALL_OW 74
18055: PPUSH
18056: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
18060: LD_VAR 0 2
18064: PUSH
18065: LD_INT 80
18067: GREATER
18068: PUSH
18069: LD_VAR 0 3
18073: PPUSH
18074: CALL_OW 301
18078: OR
18079: IFFALSE 17956
// if un then
18081: LD_VAR 0 3
18085: IFFALSE 18096
// RemoveUnit ( un ) ;
18087: LD_VAR 0 3
18091: PPUSH
18092: CALL_OW 64
// end ;
18096: PPOPN 3
18098: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
18099: LD_EXP 80
18103: IFFALSE 18219
18105: GO 18107
18107: DISABLE
18108: LD_INT 0
18110: PPUSH
18111: PPUSH
18112: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18113: LD_ADDR_VAR 0 2
18117: PUSH
18118: LD_INT 81
18120: PUSH
18121: LD_OWVAR 2
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: LD_INT 21
18132: PUSH
18133: LD_INT 1
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: PPUSH
18144: CALL_OW 69
18148: ST_TO_ADDR
// ToLua ( playComputer() ) ;
18149: LD_STRING playComputer()
18151: PPUSH
18152: CALL_OW 559
// if not tmp then
18156: LD_VAR 0 2
18160: NOT
18161: IFFALSE 18165
// exit ;
18163: GO 18219
// for i in tmp do
18165: LD_ADDR_VAR 0 1
18169: PUSH
18170: LD_VAR 0 2
18174: PUSH
18175: FOR_IN
18176: IFFALSE 18217
// for j := 1 to 4 do
18178: LD_ADDR_VAR 0 3
18182: PUSH
18183: DOUBLE
18184: LD_INT 1
18186: DEC
18187: ST_TO_ADDR
18188: LD_INT 4
18190: PUSH
18191: FOR_TO
18192: IFFALSE 18213
// SetSkill ( i , j , 10 ) ;
18194: LD_VAR 0 1
18198: PPUSH
18199: LD_VAR 0 3
18203: PPUSH
18204: LD_INT 10
18206: PPUSH
18207: CALL_OW 237
18211: GO 18191
18213: POP
18214: POP
18215: GO 18175
18217: POP
18218: POP
// end ;
18219: PPOPN 3
18221: END
// every 0 0$1 trigger s30 do var i , tmp ;
18222: LD_EXP 81
18226: IFFALSE 18295
18228: GO 18230
18230: DISABLE
18231: LD_INT 0
18233: PPUSH
18234: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18235: LD_ADDR_VAR 0 2
18239: PUSH
18240: LD_INT 22
18242: PUSH
18243: LD_OWVAR 2
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: PPUSH
18252: CALL_OW 69
18256: ST_TO_ADDR
// if not tmp then
18257: LD_VAR 0 2
18261: NOT
18262: IFFALSE 18266
// exit ;
18264: GO 18295
// for i in tmp do
18266: LD_ADDR_VAR 0 1
18270: PUSH
18271: LD_VAR 0 2
18275: PUSH
18276: FOR_IN
18277: IFFALSE 18293
// SetLives ( i , 300 ) ;
18279: LD_VAR 0 1
18283: PPUSH
18284: LD_INT 300
18286: PPUSH
18287: CALL_OW 234
18291: GO 18276
18293: POP
18294: POP
// end ;
18295: PPOPN 2
18297: END
// every 0 0$1 trigger s60 do var i , tmp ;
18298: LD_EXP 82
18302: IFFALSE 18371
18304: GO 18306
18306: DISABLE
18307: LD_INT 0
18309: PPUSH
18310: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18311: LD_ADDR_VAR 0 2
18315: PUSH
18316: LD_INT 22
18318: PUSH
18319: LD_OWVAR 2
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PPUSH
18328: CALL_OW 69
18332: ST_TO_ADDR
// if not tmp then
18333: LD_VAR 0 2
18337: NOT
18338: IFFALSE 18342
// exit ;
18340: GO 18371
// for i in tmp do
18342: LD_ADDR_VAR 0 1
18346: PUSH
18347: LD_VAR 0 2
18351: PUSH
18352: FOR_IN
18353: IFFALSE 18369
// SetLives ( i , 600 ) ;
18355: LD_VAR 0 1
18359: PPUSH
18360: LD_INT 600
18362: PPUSH
18363: CALL_OW 234
18367: GO 18352
18369: POP
18370: POP
// end ;
18371: PPOPN 2
18373: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18374: LD_INT 0
18376: PPUSH
// case cmd of 301 :
18377: LD_VAR 0 1
18381: PUSH
18382: LD_INT 301
18384: DOUBLE
18385: EQUAL
18386: IFTRUE 18390
18388: GO 18422
18390: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18391: LD_VAR 0 6
18395: PPUSH
18396: LD_VAR 0 7
18400: PPUSH
18401: LD_VAR 0 8
18405: PPUSH
18406: LD_VAR 0 4
18410: PPUSH
18411: LD_VAR 0 5
18415: PPUSH
18416: CALL 19623 0 5
18420: GO 18543
18422: LD_INT 302
18424: DOUBLE
18425: EQUAL
18426: IFTRUE 18430
18428: GO 18467
18430: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18431: LD_VAR 0 6
18435: PPUSH
18436: LD_VAR 0 7
18440: PPUSH
18441: LD_VAR 0 8
18445: PPUSH
18446: LD_VAR 0 9
18450: PPUSH
18451: LD_VAR 0 4
18455: PPUSH
18456: LD_VAR 0 5
18460: PPUSH
18461: CALL 19714 0 6
18465: GO 18543
18467: LD_INT 303
18469: DOUBLE
18470: EQUAL
18471: IFTRUE 18475
18473: GO 18512
18475: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18476: LD_VAR 0 6
18480: PPUSH
18481: LD_VAR 0 7
18485: PPUSH
18486: LD_VAR 0 8
18490: PPUSH
18491: LD_VAR 0 9
18495: PPUSH
18496: LD_VAR 0 4
18500: PPUSH
18501: LD_VAR 0 5
18505: PPUSH
18506: CALL 18548 0 6
18510: GO 18543
18512: LD_INT 304
18514: DOUBLE
18515: EQUAL
18516: IFTRUE 18520
18518: GO 18542
18520: POP
// hHackTeleport ( unit , x , y ) ; end ;
18521: LD_VAR 0 2
18525: PPUSH
18526: LD_VAR 0 4
18530: PPUSH
18531: LD_VAR 0 5
18535: PPUSH
18536: CALL 20307 0 3
18540: GO 18543
18542: POP
// end ;
18543: LD_VAR 0 12
18547: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18548: LD_INT 0
18550: PPUSH
18551: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18552: LD_VAR 0 1
18556: PUSH
18557: LD_INT 1
18559: LESS
18560: PUSH
18561: LD_VAR 0 1
18565: PUSH
18566: LD_INT 3
18568: GREATER
18569: OR
18570: PUSH
18571: LD_VAR 0 5
18575: PPUSH
18576: LD_VAR 0 6
18580: PPUSH
18581: CALL_OW 428
18585: OR
18586: IFFALSE 18590
// exit ;
18588: GO 19310
// uc_side := your_side ;
18590: LD_ADDR_OWVAR 20
18594: PUSH
18595: LD_OWVAR 2
18599: ST_TO_ADDR
// uc_nation := nation ;
18600: LD_ADDR_OWVAR 21
18604: PUSH
18605: LD_VAR 0 1
18609: ST_TO_ADDR
// bc_level = 1 ;
18610: LD_ADDR_OWVAR 43
18614: PUSH
18615: LD_INT 1
18617: ST_TO_ADDR
// case btype of 1 :
18618: LD_VAR 0 2
18622: PUSH
18623: LD_INT 1
18625: DOUBLE
18626: EQUAL
18627: IFTRUE 18631
18629: GO 18642
18631: POP
// bc_type := b_depot ; 2 :
18632: LD_ADDR_OWVAR 42
18636: PUSH
18637: LD_INT 0
18639: ST_TO_ADDR
18640: GO 19254
18642: LD_INT 2
18644: DOUBLE
18645: EQUAL
18646: IFTRUE 18650
18648: GO 18661
18650: POP
// bc_type := b_warehouse ; 3 :
18651: LD_ADDR_OWVAR 42
18655: PUSH
18656: LD_INT 1
18658: ST_TO_ADDR
18659: GO 19254
18661: LD_INT 3
18663: DOUBLE
18664: EQUAL
18665: IFTRUE 18669
18667: GO 18680
18669: POP
// bc_type := b_lab ; 4 .. 9 :
18670: LD_ADDR_OWVAR 42
18674: PUSH
18675: LD_INT 6
18677: ST_TO_ADDR
18678: GO 19254
18680: LD_INT 4
18682: DOUBLE
18683: GREATEREQUAL
18684: IFFALSE 18692
18686: LD_INT 9
18688: DOUBLE
18689: LESSEQUAL
18690: IFTRUE 18694
18692: GO 18746
18694: POP
// begin bc_type := b_lab_half ;
18695: LD_ADDR_OWVAR 42
18699: PUSH
18700: LD_INT 7
18702: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18703: LD_ADDR_OWVAR 44
18707: PUSH
18708: LD_INT 10
18710: PUSH
18711: LD_INT 11
18713: PUSH
18714: LD_INT 12
18716: PUSH
18717: LD_INT 15
18719: PUSH
18720: LD_INT 14
18722: PUSH
18723: LD_INT 13
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: PUSH
18734: LD_VAR 0 2
18738: PUSH
18739: LD_INT 3
18741: MINUS
18742: ARRAY
18743: ST_TO_ADDR
// end ; 10 .. 13 :
18744: GO 19254
18746: LD_INT 10
18748: DOUBLE
18749: GREATEREQUAL
18750: IFFALSE 18758
18752: LD_INT 13
18754: DOUBLE
18755: LESSEQUAL
18756: IFTRUE 18760
18758: GO 18837
18760: POP
// begin bc_type := b_lab_full ;
18761: LD_ADDR_OWVAR 42
18765: PUSH
18766: LD_INT 8
18768: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18769: LD_ADDR_OWVAR 44
18773: PUSH
18774: LD_INT 10
18776: PUSH
18777: LD_INT 12
18779: PUSH
18780: LD_INT 14
18782: PUSH
18783: LD_INT 13
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: PUSH
18792: LD_VAR 0 2
18796: PUSH
18797: LD_INT 9
18799: MINUS
18800: ARRAY
18801: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18802: LD_ADDR_OWVAR 45
18806: PUSH
18807: LD_INT 11
18809: PUSH
18810: LD_INT 15
18812: PUSH
18813: LD_INT 12
18815: PUSH
18816: LD_INT 15
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: PUSH
18825: LD_VAR 0 2
18829: PUSH
18830: LD_INT 9
18832: MINUS
18833: ARRAY
18834: ST_TO_ADDR
// end ; 14 :
18835: GO 19254
18837: LD_INT 14
18839: DOUBLE
18840: EQUAL
18841: IFTRUE 18845
18843: GO 18856
18845: POP
// bc_type := b_workshop ; 15 :
18846: LD_ADDR_OWVAR 42
18850: PUSH
18851: LD_INT 2
18853: ST_TO_ADDR
18854: GO 19254
18856: LD_INT 15
18858: DOUBLE
18859: EQUAL
18860: IFTRUE 18864
18862: GO 18875
18864: POP
// bc_type := b_factory ; 16 :
18865: LD_ADDR_OWVAR 42
18869: PUSH
18870: LD_INT 3
18872: ST_TO_ADDR
18873: GO 19254
18875: LD_INT 16
18877: DOUBLE
18878: EQUAL
18879: IFTRUE 18883
18881: GO 18894
18883: POP
// bc_type := b_ext_gun ; 17 :
18884: LD_ADDR_OWVAR 42
18888: PUSH
18889: LD_INT 17
18891: ST_TO_ADDR
18892: GO 19254
18894: LD_INT 17
18896: DOUBLE
18897: EQUAL
18898: IFTRUE 18902
18900: GO 18930
18902: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18903: LD_ADDR_OWVAR 42
18907: PUSH
18908: LD_INT 19
18910: PUSH
18911: LD_INT 23
18913: PUSH
18914: LD_INT 19
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: LIST
18921: PUSH
18922: LD_VAR 0 1
18926: ARRAY
18927: ST_TO_ADDR
18928: GO 19254
18930: LD_INT 18
18932: DOUBLE
18933: EQUAL
18934: IFTRUE 18938
18936: GO 18949
18938: POP
// bc_type := b_ext_radar ; 19 :
18939: LD_ADDR_OWVAR 42
18943: PUSH
18944: LD_INT 20
18946: ST_TO_ADDR
18947: GO 19254
18949: LD_INT 19
18951: DOUBLE
18952: EQUAL
18953: IFTRUE 18957
18955: GO 18968
18957: POP
// bc_type := b_ext_radio ; 20 :
18958: LD_ADDR_OWVAR 42
18962: PUSH
18963: LD_INT 22
18965: ST_TO_ADDR
18966: GO 19254
18968: LD_INT 20
18970: DOUBLE
18971: EQUAL
18972: IFTRUE 18976
18974: GO 18987
18976: POP
// bc_type := b_ext_siberium ; 21 :
18977: LD_ADDR_OWVAR 42
18981: PUSH
18982: LD_INT 21
18984: ST_TO_ADDR
18985: GO 19254
18987: LD_INT 21
18989: DOUBLE
18990: EQUAL
18991: IFTRUE 18995
18993: GO 19006
18995: POP
// bc_type := b_ext_computer ; 22 :
18996: LD_ADDR_OWVAR 42
19000: PUSH
19001: LD_INT 24
19003: ST_TO_ADDR
19004: GO 19254
19006: LD_INT 22
19008: DOUBLE
19009: EQUAL
19010: IFTRUE 19014
19012: GO 19025
19014: POP
// bc_type := b_ext_track ; 23 :
19015: LD_ADDR_OWVAR 42
19019: PUSH
19020: LD_INT 16
19022: ST_TO_ADDR
19023: GO 19254
19025: LD_INT 23
19027: DOUBLE
19028: EQUAL
19029: IFTRUE 19033
19031: GO 19044
19033: POP
// bc_type := b_ext_laser ; 24 :
19034: LD_ADDR_OWVAR 42
19038: PUSH
19039: LD_INT 25
19041: ST_TO_ADDR
19042: GO 19254
19044: LD_INT 24
19046: DOUBLE
19047: EQUAL
19048: IFTRUE 19052
19050: GO 19063
19052: POP
// bc_type := b_control_tower ; 25 :
19053: LD_ADDR_OWVAR 42
19057: PUSH
19058: LD_INT 36
19060: ST_TO_ADDR
19061: GO 19254
19063: LD_INT 25
19065: DOUBLE
19066: EQUAL
19067: IFTRUE 19071
19069: GO 19082
19071: POP
// bc_type := b_breastwork ; 26 :
19072: LD_ADDR_OWVAR 42
19076: PUSH
19077: LD_INT 31
19079: ST_TO_ADDR
19080: GO 19254
19082: LD_INT 26
19084: DOUBLE
19085: EQUAL
19086: IFTRUE 19090
19088: GO 19101
19090: POP
// bc_type := b_bunker ; 27 :
19091: LD_ADDR_OWVAR 42
19095: PUSH
19096: LD_INT 32
19098: ST_TO_ADDR
19099: GO 19254
19101: LD_INT 27
19103: DOUBLE
19104: EQUAL
19105: IFTRUE 19109
19107: GO 19120
19109: POP
// bc_type := b_turret ; 28 :
19110: LD_ADDR_OWVAR 42
19114: PUSH
19115: LD_INT 33
19117: ST_TO_ADDR
19118: GO 19254
19120: LD_INT 28
19122: DOUBLE
19123: EQUAL
19124: IFTRUE 19128
19126: GO 19139
19128: POP
// bc_type := b_armoury ; 29 :
19129: LD_ADDR_OWVAR 42
19133: PUSH
19134: LD_INT 4
19136: ST_TO_ADDR
19137: GO 19254
19139: LD_INT 29
19141: DOUBLE
19142: EQUAL
19143: IFTRUE 19147
19145: GO 19158
19147: POP
// bc_type := b_barracks ; 30 :
19148: LD_ADDR_OWVAR 42
19152: PUSH
19153: LD_INT 5
19155: ST_TO_ADDR
19156: GO 19254
19158: LD_INT 30
19160: DOUBLE
19161: EQUAL
19162: IFTRUE 19166
19164: GO 19177
19166: POP
// bc_type := b_solar_power ; 31 :
19167: LD_ADDR_OWVAR 42
19171: PUSH
19172: LD_INT 27
19174: ST_TO_ADDR
19175: GO 19254
19177: LD_INT 31
19179: DOUBLE
19180: EQUAL
19181: IFTRUE 19185
19183: GO 19196
19185: POP
// bc_type := b_oil_power ; 32 :
19186: LD_ADDR_OWVAR 42
19190: PUSH
19191: LD_INT 26
19193: ST_TO_ADDR
19194: GO 19254
19196: LD_INT 32
19198: DOUBLE
19199: EQUAL
19200: IFTRUE 19204
19202: GO 19215
19204: POP
// bc_type := b_siberite_power ; 33 :
19205: LD_ADDR_OWVAR 42
19209: PUSH
19210: LD_INT 28
19212: ST_TO_ADDR
19213: GO 19254
19215: LD_INT 33
19217: DOUBLE
19218: EQUAL
19219: IFTRUE 19223
19221: GO 19234
19223: POP
// bc_type := b_oil_mine ; 34 :
19224: LD_ADDR_OWVAR 42
19228: PUSH
19229: LD_INT 29
19231: ST_TO_ADDR
19232: GO 19254
19234: LD_INT 34
19236: DOUBLE
19237: EQUAL
19238: IFTRUE 19242
19240: GO 19253
19242: POP
// bc_type := b_siberite_mine ; end ;
19243: LD_ADDR_OWVAR 42
19247: PUSH
19248: LD_INT 30
19250: ST_TO_ADDR
19251: GO 19254
19253: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19254: LD_ADDR_VAR 0 8
19258: PUSH
19259: LD_VAR 0 5
19263: PPUSH
19264: LD_VAR 0 6
19268: PPUSH
19269: LD_VAR 0 3
19273: PPUSH
19274: CALL_OW 47
19278: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19279: LD_OWVAR 42
19283: PUSH
19284: LD_INT 32
19286: PUSH
19287: LD_INT 33
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: IN
19294: IFFALSE 19310
// PlaceWeaponTurret ( b , weapon ) ;
19296: LD_VAR 0 8
19300: PPUSH
19301: LD_VAR 0 4
19305: PPUSH
19306: CALL_OW 431
// end ;
19310: LD_VAR 0 7
19314: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19315: LD_INT 0
19317: PPUSH
19318: PPUSH
19319: PPUSH
19320: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19321: LD_ADDR_VAR 0 4
19325: PUSH
19326: LD_INT 22
19328: PUSH
19329: LD_OWVAR 2
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 2
19340: PUSH
19341: LD_INT 30
19343: PUSH
19344: LD_INT 0
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 30
19353: PUSH
19354: LD_INT 1
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: LIST
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PPUSH
19370: CALL_OW 69
19374: ST_TO_ADDR
// if not tmp then
19375: LD_VAR 0 4
19379: NOT
19380: IFFALSE 19384
// exit ;
19382: GO 19443
// for i in tmp do
19384: LD_ADDR_VAR 0 2
19388: PUSH
19389: LD_VAR 0 4
19393: PUSH
19394: FOR_IN
19395: IFFALSE 19441
// for j = 1 to 3 do
19397: LD_ADDR_VAR 0 3
19401: PUSH
19402: DOUBLE
19403: LD_INT 1
19405: DEC
19406: ST_TO_ADDR
19407: LD_INT 3
19409: PUSH
19410: FOR_TO
19411: IFFALSE 19437
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19413: LD_VAR 0 2
19417: PPUSH
19418: CALL_OW 274
19422: PPUSH
19423: LD_VAR 0 3
19427: PPUSH
19428: LD_INT 99999
19430: PPUSH
19431: CALL_OW 277
19435: GO 19410
19437: POP
19438: POP
19439: GO 19394
19441: POP
19442: POP
// end ;
19443: LD_VAR 0 1
19447: RET
// export function hHackSetLevel10 ; var i , j ; begin
19448: LD_INT 0
19450: PPUSH
19451: PPUSH
19452: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19453: LD_ADDR_VAR 0 2
19457: PUSH
19458: LD_INT 21
19460: PUSH
19461: LD_INT 1
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PPUSH
19468: CALL_OW 69
19472: PUSH
19473: FOR_IN
19474: IFFALSE 19526
// if IsSelected ( i ) then
19476: LD_VAR 0 2
19480: PPUSH
19481: CALL_OW 306
19485: IFFALSE 19524
// begin for j := 1 to 4 do
19487: LD_ADDR_VAR 0 3
19491: PUSH
19492: DOUBLE
19493: LD_INT 1
19495: DEC
19496: ST_TO_ADDR
19497: LD_INT 4
19499: PUSH
19500: FOR_TO
19501: IFFALSE 19522
// SetSkill ( i , j , 10 ) ;
19503: LD_VAR 0 2
19507: PPUSH
19508: LD_VAR 0 3
19512: PPUSH
19513: LD_INT 10
19515: PPUSH
19516: CALL_OW 237
19520: GO 19500
19522: POP
19523: POP
// end ;
19524: GO 19473
19526: POP
19527: POP
// end ;
19528: LD_VAR 0 1
19532: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19533: LD_INT 0
19535: PPUSH
19536: PPUSH
19537: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19538: LD_ADDR_VAR 0 2
19542: PUSH
19543: LD_INT 22
19545: PUSH
19546: LD_OWVAR 2
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PUSH
19555: LD_INT 21
19557: PUSH
19558: LD_INT 1
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PPUSH
19569: CALL_OW 69
19573: PUSH
19574: FOR_IN
19575: IFFALSE 19616
// begin for j := 1 to 4 do
19577: LD_ADDR_VAR 0 3
19581: PUSH
19582: DOUBLE
19583: LD_INT 1
19585: DEC
19586: ST_TO_ADDR
19587: LD_INT 4
19589: PUSH
19590: FOR_TO
19591: IFFALSE 19612
// SetSkill ( i , j , 10 ) ;
19593: LD_VAR 0 2
19597: PPUSH
19598: LD_VAR 0 3
19602: PPUSH
19603: LD_INT 10
19605: PPUSH
19606: CALL_OW 237
19610: GO 19590
19612: POP
19613: POP
// end ;
19614: GO 19574
19616: POP
19617: POP
// end ;
19618: LD_VAR 0 1
19622: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19623: LD_INT 0
19625: PPUSH
// uc_side := your_side ;
19626: LD_ADDR_OWVAR 20
19630: PUSH
19631: LD_OWVAR 2
19635: ST_TO_ADDR
// uc_nation := nation ;
19636: LD_ADDR_OWVAR 21
19640: PUSH
19641: LD_VAR 0 1
19645: ST_TO_ADDR
// InitHc ;
19646: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19650: LD_INT 0
19652: PPUSH
19653: LD_VAR 0 2
19657: PPUSH
19658: LD_VAR 0 3
19662: PPUSH
19663: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19667: LD_VAR 0 4
19671: PPUSH
19672: LD_VAR 0 5
19676: PPUSH
19677: CALL_OW 428
19681: PUSH
19682: LD_INT 0
19684: EQUAL
19685: IFFALSE 19709
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19687: CALL_OW 44
19691: PPUSH
19692: LD_VAR 0 4
19696: PPUSH
19697: LD_VAR 0 5
19701: PPUSH
19702: LD_INT 1
19704: PPUSH
19705: CALL_OW 48
// end ;
19709: LD_VAR 0 6
19713: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19714: LD_INT 0
19716: PPUSH
19717: PPUSH
// uc_side := your_side ;
19718: LD_ADDR_OWVAR 20
19722: PUSH
19723: LD_OWVAR 2
19727: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19728: LD_VAR 0 1
19732: PUSH
19733: LD_INT 1
19735: PUSH
19736: LD_INT 2
19738: PUSH
19739: LD_INT 3
19741: PUSH
19742: LD_INT 4
19744: PUSH
19745: LD_INT 5
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: IN
19755: IFFALSE 19767
// uc_nation := nation_american else
19757: LD_ADDR_OWVAR 21
19761: PUSH
19762: LD_INT 1
19764: ST_TO_ADDR
19765: GO 19810
// if chassis in [ 11 , 12 , 13 , 14 ] then
19767: LD_VAR 0 1
19771: PUSH
19772: LD_INT 11
19774: PUSH
19775: LD_INT 12
19777: PUSH
19778: LD_INT 13
19780: PUSH
19781: LD_INT 14
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: IN
19790: IFFALSE 19802
// uc_nation := nation_arabian else
19792: LD_ADDR_OWVAR 21
19796: PUSH
19797: LD_INT 2
19799: ST_TO_ADDR
19800: GO 19810
// uc_nation := nation_russian ;
19802: LD_ADDR_OWVAR 21
19806: PUSH
19807: LD_INT 3
19809: ST_TO_ADDR
// vc_chassis := chassis ;
19810: LD_ADDR_OWVAR 37
19814: PUSH
19815: LD_VAR 0 1
19819: ST_TO_ADDR
// vc_engine := engine ;
19820: LD_ADDR_OWVAR 39
19824: PUSH
19825: LD_VAR 0 2
19829: ST_TO_ADDR
// vc_control := control ;
19830: LD_ADDR_OWVAR 38
19834: PUSH
19835: LD_VAR 0 3
19839: ST_TO_ADDR
// vc_weapon := weapon ;
19840: LD_ADDR_OWVAR 40
19844: PUSH
19845: LD_VAR 0 4
19849: ST_TO_ADDR
// un := CreateVehicle ;
19850: LD_ADDR_VAR 0 8
19854: PUSH
19855: CALL_OW 45
19859: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19860: LD_VAR 0 8
19864: PPUSH
19865: LD_INT 0
19867: PPUSH
19868: LD_INT 5
19870: PPUSH
19871: CALL_OW 12
19875: PPUSH
19876: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19880: LD_VAR 0 8
19884: PPUSH
19885: LD_VAR 0 5
19889: PPUSH
19890: LD_VAR 0 6
19894: PPUSH
19895: LD_INT 1
19897: PPUSH
19898: CALL_OW 48
// end ;
19902: LD_VAR 0 7
19906: RET
// export hInvincible ; every 1 do
19907: GO 19909
19909: DISABLE
// hInvincible := [ ] ;
19910: LD_ADDR_EXP 83
19914: PUSH
19915: EMPTY
19916: ST_TO_ADDR
19917: END
// every 10 do var i ;
19918: GO 19920
19920: DISABLE
19921: LD_INT 0
19923: PPUSH
// begin enable ;
19924: ENABLE
// if not hInvincible then
19925: LD_EXP 83
19929: NOT
19930: IFFALSE 19934
// exit ;
19932: GO 19978
// for i in hInvincible do
19934: LD_ADDR_VAR 0 1
19938: PUSH
19939: LD_EXP 83
19943: PUSH
19944: FOR_IN
19945: IFFALSE 19976
// if GetLives ( i ) < 1000 then
19947: LD_VAR 0 1
19951: PPUSH
19952: CALL_OW 256
19956: PUSH
19957: LD_INT 1000
19959: LESS
19960: IFFALSE 19974
// SetLives ( i , 1000 ) ;
19962: LD_VAR 0 1
19966: PPUSH
19967: LD_INT 1000
19969: PPUSH
19970: CALL_OW 234
19974: GO 19944
19976: POP
19977: POP
// end ;
19978: PPOPN 1
19980: END
// export function hHackInvincible ; var i ; begin
19981: LD_INT 0
19983: PPUSH
19984: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19985: LD_ADDR_VAR 0 2
19989: PUSH
19990: LD_INT 2
19992: PUSH
19993: LD_INT 21
19995: PUSH
19996: LD_INT 1
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 21
20005: PUSH
20006: LD_INT 2
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: LIST
20017: PPUSH
20018: CALL_OW 69
20022: PUSH
20023: FOR_IN
20024: IFFALSE 20085
// if IsSelected ( i ) then
20026: LD_VAR 0 2
20030: PPUSH
20031: CALL_OW 306
20035: IFFALSE 20083
// begin if i in hInvincible then
20037: LD_VAR 0 2
20041: PUSH
20042: LD_EXP 83
20046: IN
20047: IFFALSE 20067
// hInvincible := hInvincible diff i else
20049: LD_ADDR_EXP 83
20053: PUSH
20054: LD_EXP 83
20058: PUSH
20059: LD_VAR 0 2
20063: DIFF
20064: ST_TO_ADDR
20065: GO 20083
// hInvincible := hInvincible union i ;
20067: LD_ADDR_EXP 83
20071: PUSH
20072: LD_EXP 83
20076: PUSH
20077: LD_VAR 0 2
20081: UNION
20082: ST_TO_ADDR
// end ;
20083: GO 20023
20085: POP
20086: POP
// end ;
20087: LD_VAR 0 1
20091: RET
// export function hHackInvisible ; var i , j ; begin
20092: LD_INT 0
20094: PPUSH
20095: PPUSH
20096: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20097: LD_ADDR_VAR 0 2
20101: PUSH
20102: LD_INT 21
20104: PUSH
20105: LD_INT 1
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PPUSH
20112: CALL_OW 69
20116: PUSH
20117: FOR_IN
20118: IFFALSE 20142
// if IsSelected ( i ) then
20120: LD_VAR 0 2
20124: PPUSH
20125: CALL_OW 306
20129: IFFALSE 20140
// ComForceInvisible ( i ) ;
20131: LD_VAR 0 2
20135: PPUSH
20136: CALL_OW 496
20140: GO 20117
20142: POP
20143: POP
// end ;
20144: LD_VAR 0 1
20148: RET
// export function hHackChangeYourSide ; begin
20149: LD_INT 0
20151: PPUSH
// if your_side = 8 then
20152: LD_OWVAR 2
20156: PUSH
20157: LD_INT 8
20159: EQUAL
20160: IFFALSE 20172
// your_side := 0 else
20162: LD_ADDR_OWVAR 2
20166: PUSH
20167: LD_INT 0
20169: ST_TO_ADDR
20170: GO 20186
// your_side := your_side + 1 ;
20172: LD_ADDR_OWVAR 2
20176: PUSH
20177: LD_OWVAR 2
20181: PUSH
20182: LD_INT 1
20184: PLUS
20185: ST_TO_ADDR
// end ;
20186: LD_VAR 0 1
20190: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20191: LD_INT 0
20193: PPUSH
20194: PPUSH
20195: PPUSH
// for i in all_units do
20196: LD_ADDR_VAR 0 2
20200: PUSH
20201: LD_OWVAR 3
20205: PUSH
20206: FOR_IN
20207: IFFALSE 20285
// if IsSelected ( i ) then
20209: LD_VAR 0 2
20213: PPUSH
20214: CALL_OW 306
20218: IFFALSE 20283
// begin j := GetSide ( i ) ;
20220: LD_ADDR_VAR 0 3
20224: PUSH
20225: LD_VAR 0 2
20229: PPUSH
20230: CALL_OW 255
20234: ST_TO_ADDR
// if j = 8 then
20235: LD_VAR 0 3
20239: PUSH
20240: LD_INT 8
20242: EQUAL
20243: IFFALSE 20255
// j := 0 else
20245: LD_ADDR_VAR 0 3
20249: PUSH
20250: LD_INT 0
20252: ST_TO_ADDR
20253: GO 20269
// j := j + 1 ;
20255: LD_ADDR_VAR 0 3
20259: PUSH
20260: LD_VAR 0 3
20264: PUSH
20265: LD_INT 1
20267: PLUS
20268: ST_TO_ADDR
// SetSide ( i , j ) ;
20269: LD_VAR 0 2
20273: PPUSH
20274: LD_VAR 0 3
20278: PPUSH
20279: CALL_OW 235
// end ;
20283: GO 20206
20285: POP
20286: POP
// end ;
20287: LD_VAR 0 1
20291: RET
// export function hHackFog ; begin
20292: LD_INT 0
20294: PPUSH
// FogOff ( true ) ;
20295: LD_INT 1
20297: PPUSH
20298: CALL_OW 344
// end ;
20302: LD_VAR 0 1
20306: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20307: LD_INT 0
20309: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20310: LD_VAR 0 1
20314: PPUSH
20315: LD_VAR 0 2
20319: PPUSH
20320: LD_VAR 0 3
20324: PPUSH
20325: LD_INT 1
20327: PPUSH
20328: LD_INT 1
20330: PPUSH
20331: CALL_OW 483
// CenterOnXY ( x , y ) ;
20335: LD_VAR 0 2
20339: PPUSH
20340: LD_VAR 0 3
20344: PPUSH
20345: CALL_OW 84
// end ;
20349: LD_VAR 0 4
20353: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
20354: LD_INT 0
20356: PPUSH
20357: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
20358: LD_VAR 0 1
20362: NOT
20363: PUSH
20364: LD_VAR 0 2
20368: PPUSH
20369: LD_VAR 0 3
20373: PPUSH
20374: CALL_OW 488
20378: NOT
20379: OR
20380: PUSH
20381: LD_VAR 0 1
20385: PPUSH
20386: CALL_OW 266
20390: PUSH
20391: LD_INT 3
20393: NONEQUAL
20394: PUSH
20395: LD_VAR 0 1
20399: PPUSH
20400: CALL_OW 247
20404: PUSH
20405: LD_INT 1
20407: EQUAL
20408: NOT
20409: AND
20410: OR
20411: IFFALSE 20415
// exit ;
20413: GO 20564
// if GetType ( factory ) = unit_human then
20415: LD_VAR 0 1
20419: PPUSH
20420: CALL_OW 247
20424: PUSH
20425: LD_INT 1
20427: EQUAL
20428: IFFALSE 20445
// factory := IsInUnit ( factory ) ;
20430: LD_ADDR_VAR 0 1
20434: PUSH
20435: LD_VAR 0 1
20439: PPUSH
20440: CALL_OW 310
20444: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20445: LD_VAR 0 1
20449: PPUSH
20450: CALL_OW 266
20454: PUSH
20455: LD_INT 3
20457: NONEQUAL
20458: IFFALSE 20462
// exit ;
20460: GO 20564
// if HexInfo ( x , y ) = factory then
20462: LD_VAR 0 2
20466: PPUSH
20467: LD_VAR 0 3
20471: PPUSH
20472: CALL_OW 428
20476: PUSH
20477: LD_VAR 0 1
20481: EQUAL
20482: IFFALSE 20509
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20484: LD_ADDR_EXP 84
20488: PUSH
20489: LD_EXP 84
20493: PPUSH
20494: LD_VAR 0 1
20498: PPUSH
20499: LD_INT 0
20501: PPUSH
20502: CALL_OW 1
20506: ST_TO_ADDR
20507: GO 20560
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
20509: LD_ADDR_EXP 84
20513: PUSH
20514: LD_EXP 84
20518: PPUSH
20519: LD_VAR 0 1
20523: PPUSH
20524: LD_VAR 0 1
20528: PPUSH
20529: CALL_OW 255
20533: PUSH
20534: LD_VAR 0 1
20538: PUSH
20539: LD_VAR 0 2
20543: PUSH
20544: LD_VAR 0 3
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: PPUSH
20555: CALL_OW 1
20559: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20560: CALL 20569 0 0
// end ;
20564: LD_VAR 0 4
20568: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
20569: LD_INT 0
20571: PPUSH
20572: PPUSH
20573: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20574: LD_STRING resetFactoryWaypoint();
20576: PPUSH
20577: CALL_OW 559
// if factoryWaypoints then
20581: LD_EXP 84
20585: IFFALSE 20711
// begin list := PrepareArray ( factoryWaypoints ) ;
20587: LD_ADDR_VAR 0 3
20591: PUSH
20592: LD_EXP 84
20596: PPUSH
20597: CALL 67004 0 1
20601: ST_TO_ADDR
// for i := 1 to list do
20602: LD_ADDR_VAR 0 2
20606: PUSH
20607: DOUBLE
20608: LD_INT 1
20610: DEC
20611: ST_TO_ADDR
20612: LD_VAR 0 3
20616: PUSH
20617: FOR_TO
20618: IFFALSE 20709
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20620: LD_STRING setFactoryWaypointXY(
20622: PUSH
20623: LD_VAR 0 3
20627: PUSH
20628: LD_VAR 0 2
20632: ARRAY
20633: PUSH
20634: LD_INT 1
20636: ARRAY
20637: STR
20638: PUSH
20639: LD_STRING ,
20641: STR
20642: PUSH
20643: LD_VAR 0 3
20647: PUSH
20648: LD_VAR 0 2
20652: ARRAY
20653: PUSH
20654: LD_INT 2
20656: ARRAY
20657: STR
20658: PUSH
20659: LD_STRING ,
20661: STR
20662: PUSH
20663: LD_VAR 0 3
20667: PUSH
20668: LD_VAR 0 2
20672: ARRAY
20673: PUSH
20674: LD_INT 3
20676: ARRAY
20677: STR
20678: PUSH
20679: LD_STRING ,
20681: STR
20682: PUSH
20683: LD_VAR 0 3
20687: PUSH
20688: LD_VAR 0 2
20692: ARRAY
20693: PUSH
20694: LD_INT 4
20696: ARRAY
20697: STR
20698: PUSH
20699: LD_STRING )
20701: STR
20702: PPUSH
20703: CALL_OW 559
20707: GO 20617
20709: POP
20710: POP
// end ; end ;
20711: LD_VAR 0 1
20715: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20716: LD_INT 0
20718: PPUSH
// if HexInfo ( x , y ) = warehouse then
20719: LD_VAR 0 2
20723: PPUSH
20724: LD_VAR 0 3
20728: PPUSH
20729: CALL_OW 428
20733: PUSH
20734: LD_VAR 0 1
20738: EQUAL
20739: IFFALSE 20766
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20741: LD_ADDR_EXP 85
20745: PUSH
20746: LD_EXP 85
20750: PPUSH
20751: LD_VAR 0 1
20755: PPUSH
20756: LD_INT 0
20758: PPUSH
20759: CALL_OW 1
20763: ST_TO_ADDR
20764: GO 20817
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20766: LD_ADDR_EXP 85
20770: PUSH
20771: LD_EXP 85
20775: PPUSH
20776: LD_VAR 0 1
20780: PPUSH
20781: LD_VAR 0 1
20785: PPUSH
20786: CALL_OW 255
20790: PUSH
20791: LD_VAR 0 1
20795: PUSH
20796: LD_VAR 0 2
20800: PUSH
20801: LD_VAR 0 3
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: PPUSH
20812: CALL_OW 1
20816: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20817: CALL 20826 0 0
// end ;
20821: LD_VAR 0 4
20825: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
20826: LD_INT 0
20828: PPUSH
20829: PPUSH
20830: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
20831: LD_STRING resetWarehouseGatheringPoints();
20833: PPUSH
20834: CALL_OW 559
// if warehouseGatheringPoints then
20838: LD_EXP 85
20842: IFFALSE 20968
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
20844: LD_ADDR_VAR 0 3
20848: PUSH
20849: LD_EXP 85
20853: PPUSH
20854: CALL 67004 0 1
20858: ST_TO_ADDR
// for i := 1 to list do
20859: LD_ADDR_VAR 0 2
20863: PUSH
20864: DOUBLE
20865: LD_INT 1
20867: DEC
20868: ST_TO_ADDR
20869: LD_VAR 0 3
20873: PUSH
20874: FOR_TO
20875: IFFALSE 20966
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20877: LD_STRING setWarehouseGatheringPointXY(
20879: PUSH
20880: LD_VAR 0 3
20884: PUSH
20885: LD_VAR 0 2
20889: ARRAY
20890: PUSH
20891: LD_INT 1
20893: ARRAY
20894: STR
20895: PUSH
20896: LD_STRING ,
20898: STR
20899: PUSH
20900: LD_VAR 0 3
20904: PUSH
20905: LD_VAR 0 2
20909: ARRAY
20910: PUSH
20911: LD_INT 2
20913: ARRAY
20914: STR
20915: PUSH
20916: LD_STRING ,
20918: STR
20919: PUSH
20920: LD_VAR 0 3
20924: PUSH
20925: LD_VAR 0 2
20929: ARRAY
20930: PUSH
20931: LD_INT 3
20933: ARRAY
20934: STR
20935: PUSH
20936: LD_STRING ,
20938: STR
20939: PUSH
20940: LD_VAR 0 3
20944: PUSH
20945: LD_VAR 0 2
20949: ARRAY
20950: PUSH
20951: LD_INT 4
20953: ARRAY
20954: STR
20955: PUSH
20956: LD_STRING )
20958: STR
20959: PPUSH
20960: CALL_OW 559
20964: GO 20874
20966: POP
20967: POP
// end ; end ;
20968: LD_VAR 0 1
20972: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20973: LD_EXP 85
20977: IFFALSE 21662
20979: GO 20981
20981: DISABLE
20982: LD_INT 0
20984: PPUSH
20985: PPUSH
20986: PPUSH
20987: PPUSH
20988: PPUSH
20989: PPUSH
20990: PPUSH
20991: PPUSH
20992: PPUSH
// begin enable ;
20993: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
20994: LD_ADDR_VAR 0 3
20998: PUSH
20999: LD_EXP 85
21003: PPUSH
21004: CALL 67004 0 1
21008: ST_TO_ADDR
// if not list then
21009: LD_VAR 0 3
21013: NOT
21014: IFFALSE 21018
// exit ;
21016: GO 21662
// for i := 1 to list do
21018: LD_ADDR_VAR 0 1
21022: PUSH
21023: DOUBLE
21024: LD_INT 1
21026: DEC
21027: ST_TO_ADDR
21028: LD_VAR 0 3
21032: PUSH
21033: FOR_TO
21034: IFFALSE 21660
// begin depot := list [ i ] [ 2 ] ;
21036: LD_ADDR_VAR 0 8
21040: PUSH
21041: LD_VAR 0 3
21045: PUSH
21046: LD_VAR 0 1
21050: ARRAY
21051: PUSH
21052: LD_INT 2
21054: ARRAY
21055: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
21056: LD_ADDR_VAR 0 5
21060: PUSH
21061: LD_VAR 0 3
21065: PUSH
21066: LD_VAR 0 1
21070: ARRAY
21071: PUSH
21072: LD_INT 1
21074: ARRAY
21075: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
21076: LD_VAR 0 8
21080: PPUSH
21081: CALL_OW 301
21085: PUSH
21086: LD_VAR 0 5
21090: PUSH
21091: LD_VAR 0 8
21095: PPUSH
21096: CALL_OW 255
21100: NONEQUAL
21101: OR
21102: IFFALSE 21131
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
21104: LD_ADDR_EXP 85
21108: PUSH
21109: LD_EXP 85
21113: PPUSH
21114: LD_VAR 0 8
21118: PPUSH
21119: LD_INT 0
21121: PPUSH
21122: CALL_OW 1
21126: ST_TO_ADDR
// exit ;
21127: POP
21128: POP
21129: GO 21662
// end ; x := list [ i ] [ 3 ] ;
21131: LD_ADDR_VAR 0 6
21135: PUSH
21136: LD_VAR 0 3
21140: PUSH
21141: LD_VAR 0 1
21145: ARRAY
21146: PUSH
21147: LD_INT 3
21149: ARRAY
21150: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
21151: LD_ADDR_VAR 0 7
21155: PUSH
21156: LD_VAR 0 3
21160: PUSH
21161: LD_VAR 0 1
21165: ARRAY
21166: PUSH
21167: LD_INT 4
21169: ARRAY
21170: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
21171: LD_ADDR_VAR 0 9
21175: PUSH
21176: LD_VAR 0 6
21180: PPUSH
21181: LD_VAR 0 7
21185: PPUSH
21186: LD_INT 16
21188: PPUSH
21189: CALL 65592 0 3
21193: ST_TO_ADDR
// if not cratesNearbyPoint then
21194: LD_VAR 0 9
21198: NOT
21199: IFFALSE 21205
// exit ;
21201: POP
21202: POP
21203: GO 21662
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
21205: LD_ADDR_VAR 0 4
21209: PUSH
21210: LD_INT 22
21212: PUSH
21213: LD_VAR 0 5
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: LD_INT 3
21224: PUSH
21225: LD_INT 60
21227: PUSH
21228: EMPTY
21229: LIST
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PUSH
21235: LD_INT 91
21237: PUSH
21238: LD_VAR 0 8
21242: PUSH
21243: LD_INT 6
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: LIST
21250: PUSH
21251: LD_INT 2
21253: PUSH
21254: LD_INT 25
21256: PUSH
21257: LD_INT 2
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: LD_INT 25
21266: PUSH
21267: LD_INT 16
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: LIST
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: PPUSH
21285: CALL_OW 69
21289: PUSH
21290: LD_VAR 0 8
21294: PPUSH
21295: CALL_OW 313
21299: PPUSH
21300: LD_INT 3
21302: PUSH
21303: LD_INT 60
21305: PUSH
21306: EMPTY
21307: LIST
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: PUSH
21313: LD_INT 2
21315: PUSH
21316: LD_INT 25
21318: PUSH
21319: LD_INT 2
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 25
21328: PUSH
21329: LD_INT 16
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: LIST
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PPUSH
21345: CALL_OW 72
21349: UNION
21350: ST_TO_ADDR
// if tmp then
21351: LD_VAR 0 4
21355: IFFALSE 21435
// begin tmp := ShrinkArray ( tmp , 3 ) ;
21357: LD_ADDR_VAR 0 4
21361: PUSH
21362: LD_VAR 0 4
21366: PPUSH
21367: LD_INT 3
21369: PPUSH
21370: CALL 63561 0 2
21374: ST_TO_ADDR
// for j in tmp do
21375: LD_ADDR_VAR 0 2
21379: PUSH
21380: LD_VAR 0 4
21384: PUSH
21385: FOR_IN
21386: IFFALSE 21429
// begin if IsInUnit ( j ) then
21388: LD_VAR 0 2
21392: PPUSH
21393: CALL_OW 310
21397: IFFALSE 21408
// ComExit ( j ) ;
21399: LD_VAR 0 2
21403: PPUSH
21404: CALL 63644 0 1
// AddComCollect ( j , x , y ) ;
21408: LD_VAR 0 2
21412: PPUSH
21413: LD_VAR 0 6
21417: PPUSH
21418: LD_VAR 0 7
21422: PPUSH
21423: CALL_OW 177
// end ;
21427: GO 21385
21429: POP
21430: POP
// exit ;
21431: POP
21432: POP
21433: GO 21662
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
21435: LD_ADDR_VAR 0 4
21439: PUSH
21440: LD_INT 22
21442: PUSH
21443: LD_VAR 0 5
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: LD_INT 91
21454: PUSH
21455: LD_VAR 0 8
21459: PUSH
21460: LD_INT 8
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: LIST
21467: PUSH
21468: LD_INT 2
21470: PUSH
21471: LD_INT 34
21473: PUSH
21474: LD_INT 12
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: PUSH
21481: LD_INT 34
21483: PUSH
21484: LD_INT 51
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PUSH
21491: LD_INT 34
21493: PUSH
21494: LD_INT 32
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PUSH
21501: LD_INT 34
21503: PUSH
21504: LD_INT 89
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: LIST
21522: PPUSH
21523: CALL_OW 69
21527: ST_TO_ADDR
// if tmp then
21528: LD_VAR 0 4
21532: IFFALSE 21658
// begin for j in tmp do
21534: LD_ADDR_VAR 0 2
21538: PUSH
21539: LD_VAR 0 4
21543: PUSH
21544: FOR_IN
21545: IFFALSE 21656
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
21547: LD_VAR 0 2
21551: PPUSH
21552: CALL_OW 262
21556: PUSH
21557: LD_INT 3
21559: EQUAL
21560: PUSH
21561: LD_VAR 0 2
21565: PPUSH
21566: CALL_OW 261
21570: PUSH
21571: LD_INT 20
21573: GREATER
21574: OR
21575: PUSH
21576: LD_VAR 0 2
21580: PPUSH
21581: CALL_OW 314
21585: NOT
21586: AND
21587: PUSH
21588: LD_VAR 0 2
21592: PPUSH
21593: CALL_OW 263
21597: PUSH
21598: LD_INT 1
21600: NONEQUAL
21601: PUSH
21602: LD_VAR 0 2
21606: PPUSH
21607: CALL_OW 311
21611: OR
21612: AND
21613: IFFALSE 21654
// begin ComCollect ( j , x , y ) ;
21615: LD_VAR 0 2
21619: PPUSH
21620: LD_VAR 0 6
21624: PPUSH
21625: LD_VAR 0 7
21629: PPUSH
21630: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
21634: LD_VAR 0 2
21638: PPUSH
21639: LD_VAR 0 8
21643: PPUSH
21644: CALL_OW 172
// exit ;
21648: POP
21649: POP
21650: POP
21651: POP
21652: GO 21662
// end ;
21654: GO 21544
21656: POP
21657: POP
// end ; end ;
21658: GO 21033
21660: POP
21661: POP
// end ; end_of_file
21662: PPOPN 9
21664: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21665: LD_INT 0
21667: PPUSH
21668: PPUSH
21669: PPUSH
21670: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21671: LD_VAR 0 1
21675: PPUSH
21676: CALL_OW 264
21680: PUSH
21681: LD_INT 91
21683: EQUAL
21684: IFFALSE 21756
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21686: LD_INT 68
21688: PPUSH
21689: LD_VAR 0 1
21693: PPUSH
21694: CALL_OW 255
21698: PPUSH
21699: CALL_OW 321
21703: PUSH
21704: LD_INT 2
21706: EQUAL
21707: IFFALSE 21719
// eff := 70 else
21709: LD_ADDR_VAR 0 4
21713: PUSH
21714: LD_INT 70
21716: ST_TO_ADDR
21717: GO 21727
// eff := 30 ;
21719: LD_ADDR_VAR 0 4
21723: PUSH
21724: LD_INT 30
21726: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21727: LD_VAR 0 1
21731: PPUSH
21732: CALL_OW 250
21736: PPUSH
21737: LD_VAR 0 1
21741: PPUSH
21742: CALL_OW 251
21746: PPUSH
21747: LD_VAR 0 4
21751: PPUSH
21752: CALL_OW 495
// end ; end ;
21756: LD_VAR 0 2
21760: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21761: LD_INT 0
21763: PPUSH
// end ;
21764: LD_VAR 0 4
21768: RET
// export function SOS_Command ( cmd ) ; begin
21769: LD_INT 0
21771: PPUSH
// end ;
21772: LD_VAR 0 2
21776: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21777: LD_INT 0
21779: PPUSH
// end ;
21780: LD_VAR 0 6
21784: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
21785: LD_INT 0
21787: PPUSH
21788: PPUSH
// if not vehicle or not factory then
21789: LD_VAR 0 1
21793: NOT
21794: PUSH
21795: LD_VAR 0 2
21799: NOT
21800: OR
21801: IFFALSE 21805
// exit ;
21803: GO 22036
// if factoryWaypoints >= factory then
21805: LD_EXP 84
21809: PUSH
21810: LD_VAR 0 2
21814: GREATEREQUAL
21815: IFFALSE 22036
// if factoryWaypoints [ factory ] then
21817: LD_EXP 84
21821: PUSH
21822: LD_VAR 0 2
21826: ARRAY
21827: IFFALSE 22036
// begin if GetControl ( vehicle ) = control_manual then
21829: LD_VAR 0 1
21833: PPUSH
21834: CALL_OW 263
21838: PUSH
21839: LD_INT 1
21841: EQUAL
21842: IFFALSE 21923
// begin driver := IsDrivenBy ( vehicle ) ;
21844: LD_ADDR_VAR 0 4
21848: PUSH
21849: LD_VAR 0 1
21853: PPUSH
21854: CALL_OW 311
21858: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21859: LD_VAR 0 4
21863: PPUSH
21864: LD_EXP 84
21868: PUSH
21869: LD_VAR 0 2
21873: ARRAY
21874: PUSH
21875: LD_INT 3
21877: ARRAY
21878: PPUSH
21879: LD_EXP 84
21883: PUSH
21884: LD_VAR 0 2
21888: ARRAY
21889: PUSH
21890: LD_INT 4
21892: ARRAY
21893: PPUSH
21894: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21898: LD_VAR 0 4
21902: PPUSH
21903: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21907: LD_VAR 0 4
21911: PPUSH
21912: LD_VAR 0 2
21916: PPUSH
21917: CALL_OW 180
// end else
21921: GO 22036
// if GetControl ( vehicle ) = control_remote then
21923: LD_VAR 0 1
21927: PPUSH
21928: CALL_OW 263
21932: PUSH
21933: LD_INT 2
21935: EQUAL
21936: IFFALSE 21997
// begin wait ( 0 0$2 ) ;
21938: LD_INT 70
21940: PPUSH
21941: CALL_OW 67
// if Connect ( vehicle ) then
21945: LD_VAR 0 1
21949: PPUSH
21950: CALL 33885 0 1
21954: IFFALSE 21995
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21956: LD_VAR 0 1
21960: PPUSH
21961: LD_EXP 84
21965: PUSH
21966: LD_VAR 0 2
21970: ARRAY
21971: PUSH
21972: LD_INT 3
21974: ARRAY
21975: PPUSH
21976: LD_EXP 84
21980: PUSH
21981: LD_VAR 0 2
21985: ARRAY
21986: PUSH
21987: LD_INT 4
21989: ARRAY
21990: PPUSH
21991: CALL_OW 171
// end else
21995: GO 22036
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21997: LD_VAR 0 1
22001: PPUSH
22002: LD_EXP 84
22006: PUSH
22007: LD_VAR 0 2
22011: ARRAY
22012: PUSH
22013: LD_INT 3
22015: ARRAY
22016: PPUSH
22017: LD_EXP 84
22021: PUSH
22022: LD_VAR 0 2
22026: ARRAY
22027: PUSH
22028: LD_INT 4
22030: ARRAY
22031: PPUSH
22032: CALL_OW 171
// end ; end ;
22036: LD_VAR 0 3
22040: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22041: LD_INT 0
22043: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22044: LD_VAR 0 1
22048: PUSH
22049: LD_INT 250
22051: EQUAL
22052: PUSH
22053: LD_VAR 0 2
22057: PPUSH
22058: CALL_OW 264
22062: PUSH
22063: LD_INT 81
22065: EQUAL
22066: AND
22067: IFFALSE 22088
// MinerPlaceMine ( unit , x , y ) ;
22069: LD_VAR 0 2
22073: PPUSH
22074: LD_VAR 0 4
22078: PPUSH
22079: LD_VAR 0 5
22083: PPUSH
22084: CALL 24473 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22088: LD_VAR 0 1
22092: PUSH
22093: LD_INT 251
22095: EQUAL
22096: PUSH
22097: LD_VAR 0 2
22101: PPUSH
22102: CALL_OW 264
22106: PUSH
22107: LD_INT 81
22109: EQUAL
22110: AND
22111: IFFALSE 22132
// MinerDetonateMine ( unit , x , y ) ;
22113: LD_VAR 0 2
22117: PPUSH
22118: LD_VAR 0 4
22122: PPUSH
22123: LD_VAR 0 5
22127: PPUSH
22128: CALL 24748 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22132: LD_VAR 0 1
22136: PUSH
22137: LD_INT 252
22139: EQUAL
22140: PUSH
22141: LD_VAR 0 2
22145: PPUSH
22146: CALL_OW 264
22150: PUSH
22151: LD_INT 81
22153: EQUAL
22154: AND
22155: IFFALSE 22176
// MinerCreateMinefield ( unit , x , y ) ;
22157: LD_VAR 0 2
22161: PPUSH
22162: LD_VAR 0 4
22166: PPUSH
22167: LD_VAR 0 5
22171: PPUSH
22172: CALL 25165 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22176: LD_VAR 0 1
22180: PUSH
22181: LD_INT 253
22183: EQUAL
22184: PUSH
22185: LD_VAR 0 2
22189: PPUSH
22190: CALL_OW 257
22194: PUSH
22195: LD_INT 5
22197: EQUAL
22198: AND
22199: IFFALSE 22220
// ComBinocular ( unit , x , y ) ;
22201: LD_VAR 0 2
22205: PPUSH
22206: LD_VAR 0 4
22210: PPUSH
22211: LD_VAR 0 5
22215: PPUSH
22216: CALL 25534 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22220: LD_VAR 0 1
22224: PUSH
22225: LD_INT 254
22227: EQUAL
22228: PUSH
22229: LD_VAR 0 2
22233: PPUSH
22234: CALL_OW 264
22238: PUSH
22239: LD_INT 99
22241: EQUAL
22242: AND
22243: PUSH
22244: LD_VAR 0 3
22248: PPUSH
22249: CALL_OW 263
22253: PUSH
22254: LD_INT 3
22256: EQUAL
22257: AND
22258: IFFALSE 22274
// HackDestroyVehicle ( unit , selectedUnit ) ;
22260: LD_VAR 0 2
22264: PPUSH
22265: LD_VAR 0 3
22269: PPUSH
22270: CALL 23837 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22274: LD_VAR 0 1
22278: PUSH
22279: LD_INT 255
22281: EQUAL
22282: PUSH
22283: LD_VAR 0 2
22287: PPUSH
22288: CALL_OW 264
22292: PUSH
22293: LD_INT 14
22295: PUSH
22296: LD_INT 53
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: IN
22303: AND
22304: PUSH
22305: LD_VAR 0 4
22309: PPUSH
22310: LD_VAR 0 5
22314: PPUSH
22315: CALL_OW 488
22319: AND
22320: IFFALSE 22344
// CutTreeXYR ( unit , x , y , 12 ) ;
22322: LD_VAR 0 2
22326: PPUSH
22327: LD_VAR 0 4
22331: PPUSH
22332: LD_VAR 0 5
22336: PPUSH
22337: LD_INT 12
22339: PPUSH
22340: CALL 22407 0 4
// if cmd = 256 then
22344: LD_VAR 0 1
22348: PUSH
22349: LD_INT 256
22351: EQUAL
22352: IFFALSE 22373
// SetFactoryWaypoint ( unit , x , y ) ;
22354: LD_VAR 0 2
22358: PPUSH
22359: LD_VAR 0 4
22363: PPUSH
22364: LD_VAR 0 5
22368: PPUSH
22369: CALL 20354 0 3
// if cmd = 257 then
22373: LD_VAR 0 1
22377: PUSH
22378: LD_INT 257
22380: EQUAL
22381: IFFALSE 22402
// SetWarehouseGatheringPoint ( unit , x , y ) ;
22383: LD_VAR 0 2
22387: PPUSH
22388: LD_VAR 0 4
22392: PPUSH
22393: LD_VAR 0 5
22397: PPUSH
22398: CALL 20716 0 3
// end ;
22402: LD_VAR 0 6
22406: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22407: LD_INT 0
22409: PPUSH
22410: PPUSH
22411: PPUSH
22412: PPUSH
22413: PPUSH
22414: PPUSH
22415: PPUSH
22416: PPUSH
22417: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22418: LD_VAR 0 1
22422: NOT
22423: PUSH
22424: LD_VAR 0 2
22428: PPUSH
22429: LD_VAR 0 3
22433: PPUSH
22434: CALL_OW 488
22438: NOT
22439: OR
22440: PUSH
22441: LD_VAR 0 4
22445: NOT
22446: OR
22447: IFFALSE 22451
// exit ;
22449: GO 22791
// list := [ ] ;
22451: LD_ADDR_VAR 0 13
22455: PUSH
22456: EMPTY
22457: ST_TO_ADDR
// if x - r < 0 then
22458: LD_VAR 0 2
22462: PUSH
22463: LD_VAR 0 4
22467: MINUS
22468: PUSH
22469: LD_INT 0
22471: LESS
22472: IFFALSE 22484
// min_x := 0 else
22474: LD_ADDR_VAR 0 7
22478: PUSH
22479: LD_INT 0
22481: ST_TO_ADDR
22482: GO 22500
// min_x := x - r ;
22484: LD_ADDR_VAR 0 7
22488: PUSH
22489: LD_VAR 0 2
22493: PUSH
22494: LD_VAR 0 4
22498: MINUS
22499: ST_TO_ADDR
// if y - r < 0 then
22500: LD_VAR 0 3
22504: PUSH
22505: LD_VAR 0 4
22509: MINUS
22510: PUSH
22511: LD_INT 0
22513: LESS
22514: IFFALSE 22526
// min_y := 0 else
22516: LD_ADDR_VAR 0 8
22520: PUSH
22521: LD_INT 0
22523: ST_TO_ADDR
22524: GO 22542
// min_y := y - r ;
22526: LD_ADDR_VAR 0 8
22530: PUSH
22531: LD_VAR 0 3
22535: PUSH
22536: LD_VAR 0 4
22540: MINUS
22541: ST_TO_ADDR
// max_x := x + r ;
22542: LD_ADDR_VAR 0 9
22546: PUSH
22547: LD_VAR 0 2
22551: PUSH
22552: LD_VAR 0 4
22556: PLUS
22557: ST_TO_ADDR
// max_y := y + r ;
22558: LD_ADDR_VAR 0 10
22562: PUSH
22563: LD_VAR 0 3
22567: PUSH
22568: LD_VAR 0 4
22572: PLUS
22573: ST_TO_ADDR
// for _x = min_x to max_x do
22574: LD_ADDR_VAR 0 11
22578: PUSH
22579: DOUBLE
22580: LD_VAR 0 7
22584: DEC
22585: ST_TO_ADDR
22586: LD_VAR 0 9
22590: PUSH
22591: FOR_TO
22592: IFFALSE 22709
// for _y = min_y to max_y do
22594: LD_ADDR_VAR 0 12
22598: PUSH
22599: DOUBLE
22600: LD_VAR 0 8
22604: DEC
22605: ST_TO_ADDR
22606: LD_VAR 0 10
22610: PUSH
22611: FOR_TO
22612: IFFALSE 22705
// begin if not ValidHex ( _x , _y ) then
22614: LD_VAR 0 11
22618: PPUSH
22619: LD_VAR 0 12
22623: PPUSH
22624: CALL_OW 488
22628: NOT
22629: IFFALSE 22633
// continue ;
22631: GO 22611
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22633: LD_VAR 0 11
22637: PPUSH
22638: LD_VAR 0 12
22642: PPUSH
22643: CALL_OW 351
22647: PUSH
22648: LD_VAR 0 11
22652: PPUSH
22653: LD_VAR 0 12
22657: PPUSH
22658: CALL_OW 554
22662: AND
22663: IFFALSE 22703
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22665: LD_ADDR_VAR 0 13
22669: PUSH
22670: LD_VAR 0 13
22674: PPUSH
22675: LD_VAR 0 13
22679: PUSH
22680: LD_INT 1
22682: PLUS
22683: PPUSH
22684: LD_VAR 0 11
22688: PUSH
22689: LD_VAR 0 12
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PPUSH
22698: CALL_OW 2
22702: ST_TO_ADDR
// end ;
22703: GO 22611
22705: POP
22706: POP
22707: GO 22591
22709: POP
22710: POP
// if not list then
22711: LD_VAR 0 13
22715: NOT
22716: IFFALSE 22720
// exit ;
22718: GO 22791
// for i in list do
22720: LD_ADDR_VAR 0 6
22724: PUSH
22725: LD_VAR 0 13
22729: PUSH
22730: FOR_IN
22731: IFFALSE 22789
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22733: LD_VAR 0 1
22737: PPUSH
22738: LD_STRING M
22740: PUSH
22741: LD_VAR 0 6
22745: PUSH
22746: LD_INT 1
22748: ARRAY
22749: PUSH
22750: LD_VAR 0 6
22754: PUSH
22755: LD_INT 2
22757: ARRAY
22758: PUSH
22759: LD_INT 0
22761: PUSH
22762: LD_INT 0
22764: PUSH
22765: LD_INT 0
22767: PUSH
22768: LD_INT 0
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: PUSH
22780: EMPTY
22781: LIST
22782: PPUSH
22783: CALL_OW 447
22787: GO 22730
22789: POP
22790: POP
// end ;
22791: LD_VAR 0 5
22795: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22796: LD_EXP 87
22800: NOT
22801: IFFALSE 22851
22803: GO 22805
22805: DISABLE
// begin initHack := true ;
22806: LD_ADDR_EXP 87
22810: PUSH
22811: LD_INT 1
22813: ST_TO_ADDR
// hackTanks := [ ] ;
22814: LD_ADDR_EXP 88
22818: PUSH
22819: EMPTY
22820: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22821: LD_ADDR_EXP 89
22825: PUSH
22826: EMPTY
22827: ST_TO_ADDR
// hackLimit := 3 ;
22828: LD_ADDR_EXP 90
22832: PUSH
22833: LD_INT 3
22835: ST_TO_ADDR
// hackDist := 12 ;
22836: LD_ADDR_EXP 91
22840: PUSH
22841: LD_INT 12
22843: ST_TO_ADDR
// hackCounter := [ ] ;
22844: LD_ADDR_EXP 92
22848: PUSH
22849: EMPTY
22850: ST_TO_ADDR
// end ;
22851: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22852: LD_EXP 87
22856: PUSH
22857: LD_INT 34
22859: PUSH
22860: LD_INT 99
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PPUSH
22867: CALL_OW 69
22871: AND
22872: IFFALSE 23125
22874: GO 22876
22876: DISABLE
22877: LD_INT 0
22879: PPUSH
22880: PPUSH
// begin enable ;
22881: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22882: LD_ADDR_VAR 0 1
22886: PUSH
22887: LD_INT 34
22889: PUSH
22890: LD_INT 99
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PPUSH
22897: CALL_OW 69
22901: PUSH
22902: FOR_IN
22903: IFFALSE 23123
// begin if not i in hackTanks then
22905: LD_VAR 0 1
22909: PUSH
22910: LD_EXP 88
22914: IN
22915: NOT
22916: IFFALSE 22999
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22918: LD_ADDR_EXP 88
22922: PUSH
22923: LD_EXP 88
22927: PPUSH
22928: LD_EXP 88
22932: PUSH
22933: LD_INT 1
22935: PLUS
22936: PPUSH
22937: LD_VAR 0 1
22941: PPUSH
22942: CALL_OW 1
22946: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22947: LD_ADDR_EXP 89
22951: PUSH
22952: LD_EXP 89
22956: PPUSH
22957: LD_EXP 89
22961: PUSH
22962: LD_INT 1
22964: PLUS
22965: PPUSH
22966: EMPTY
22967: PPUSH
22968: CALL_OW 1
22972: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22973: LD_ADDR_EXP 92
22977: PUSH
22978: LD_EXP 92
22982: PPUSH
22983: LD_EXP 92
22987: PUSH
22988: LD_INT 1
22990: PLUS
22991: PPUSH
22992: EMPTY
22993: PPUSH
22994: CALL_OW 1
22998: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22999: LD_VAR 0 1
23003: PPUSH
23004: CALL_OW 302
23008: NOT
23009: IFFALSE 23022
// begin HackUnlinkAll ( i ) ;
23011: LD_VAR 0 1
23015: PPUSH
23016: CALL 23128 0 1
// continue ;
23020: GO 22902
// end ; HackCheckCapturedStatus ( i ) ;
23022: LD_VAR 0 1
23026: PPUSH
23027: CALL 23571 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23031: LD_ADDR_VAR 0 2
23035: PUSH
23036: LD_INT 81
23038: PUSH
23039: LD_VAR 0 1
23043: PPUSH
23044: CALL_OW 255
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: LD_INT 33
23055: PUSH
23056: LD_INT 3
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: PUSH
23063: LD_INT 91
23065: PUSH
23066: LD_VAR 0 1
23070: PUSH
23071: LD_EXP 91
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: LIST
23080: PUSH
23081: LD_INT 50
23083: PUSH
23084: EMPTY
23085: LIST
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: PPUSH
23093: CALL_OW 69
23097: ST_TO_ADDR
// if not tmp then
23098: LD_VAR 0 2
23102: NOT
23103: IFFALSE 23107
// continue ;
23105: GO 22902
// HackLink ( i , tmp ) ;
23107: LD_VAR 0 1
23111: PPUSH
23112: LD_VAR 0 2
23116: PPUSH
23117: CALL 23264 0 2
// end ;
23121: GO 22902
23123: POP
23124: POP
// end ;
23125: PPOPN 2
23127: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23128: LD_INT 0
23130: PPUSH
23131: PPUSH
23132: PPUSH
// if not hack in hackTanks then
23133: LD_VAR 0 1
23137: PUSH
23138: LD_EXP 88
23142: IN
23143: NOT
23144: IFFALSE 23148
// exit ;
23146: GO 23259
// index := GetElementIndex ( hackTanks , hack ) ;
23148: LD_ADDR_VAR 0 4
23152: PUSH
23153: LD_EXP 88
23157: PPUSH
23158: LD_VAR 0 1
23162: PPUSH
23163: CALL 30701 0 2
23167: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23168: LD_EXP 89
23172: PUSH
23173: LD_VAR 0 4
23177: ARRAY
23178: IFFALSE 23259
// begin for i in hackTanksCaptured [ index ] do
23180: LD_ADDR_VAR 0 3
23184: PUSH
23185: LD_EXP 89
23189: PUSH
23190: LD_VAR 0 4
23194: ARRAY
23195: PUSH
23196: FOR_IN
23197: IFFALSE 23223
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23199: LD_VAR 0 3
23203: PUSH
23204: LD_INT 1
23206: ARRAY
23207: PPUSH
23208: LD_VAR 0 3
23212: PUSH
23213: LD_INT 2
23215: ARRAY
23216: PPUSH
23217: CALL_OW 235
23221: GO 23196
23223: POP
23224: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23225: LD_ADDR_EXP 89
23229: PUSH
23230: LD_EXP 89
23234: PPUSH
23235: LD_VAR 0 4
23239: PPUSH
23240: EMPTY
23241: PPUSH
23242: CALL_OW 1
23246: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23247: LD_VAR 0 1
23251: PPUSH
23252: LD_INT 0
23254: PPUSH
23255: CALL_OW 505
// end ; end ;
23259: LD_VAR 0 2
23263: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23264: LD_INT 0
23266: PPUSH
23267: PPUSH
23268: PPUSH
// if not hack in hackTanks or not vehicles then
23269: LD_VAR 0 1
23273: PUSH
23274: LD_EXP 88
23278: IN
23279: NOT
23280: PUSH
23281: LD_VAR 0 2
23285: NOT
23286: OR
23287: IFFALSE 23291
// exit ;
23289: GO 23566
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23291: LD_ADDR_VAR 0 2
23295: PUSH
23296: LD_VAR 0 1
23300: PPUSH
23301: LD_VAR 0 2
23305: PPUSH
23306: LD_INT 1
23308: PPUSH
23309: LD_INT 1
23311: PPUSH
23312: CALL 31351 0 4
23316: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23317: LD_ADDR_VAR 0 5
23321: PUSH
23322: LD_EXP 88
23326: PPUSH
23327: LD_VAR 0 1
23331: PPUSH
23332: CALL 30701 0 2
23336: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23337: LD_EXP 89
23341: PUSH
23342: LD_VAR 0 5
23346: ARRAY
23347: PUSH
23348: LD_EXP 90
23352: LESS
23353: IFFALSE 23542
// begin for i := 1 to vehicles do
23355: LD_ADDR_VAR 0 4
23359: PUSH
23360: DOUBLE
23361: LD_INT 1
23363: DEC
23364: ST_TO_ADDR
23365: LD_VAR 0 2
23369: PUSH
23370: FOR_TO
23371: IFFALSE 23540
// begin if hackTanksCaptured [ index ] = hackLimit then
23373: LD_EXP 89
23377: PUSH
23378: LD_VAR 0 5
23382: ARRAY
23383: PUSH
23384: LD_EXP 90
23388: EQUAL
23389: IFFALSE 23393
// break ;
23391: GO 23540
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23393: LD_ADDR_EXP 92
23397: PUSH
23398: LD_EXP 92
23402: PPUSH
23403: LD_VAR 0 5
23407: PPUSH
23408: LD_EXP 92
23412: PUSH
23413: LD_VAR 0 5
23417: ARRAY
23418: PUSH
23419: LD_INT 1
23421: PLUS
23422: PPUSH
23423: CALL_OW 1
23427: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23428: LD_ADDR_EXP 89
23432: PUSH
23433: LD_EXP 89
23437: PPUSH
23438: LD_VAR 0 5
23442: PUSH
23443: LD_EXP 89
23447: PUSH
23448: LD_VAR 0 5
23452: ARRAY
23453: PUSH
23454: LD_INT 1
23456: PLUS
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PPUSH
23462: LD_VAR 0 2
23466: PUSH
23467: LD_VAR 0 4
23471: ARRAY
23472: PUSH
23473: LD_VAR 0 2
23477: PUSH
23478: LD_VAR 0 4
23482: ARRAY
23483: PPUSH
23484: CALL_OW 255
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PPUSH
23493: CALL 30916 0 3
23497: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23498: LD_VAR 0 2
23502: PUSH
23503: LD_VAR 0 4
23507: ARRAY
23508: PPUSH
23509: LD_VAR 0 1
23513: PPUSH
23514: CALL_OW 255
23518: PPUSH
23519: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23523: LD_VAR 0 2
23527: PUSH
23528: LD_VAR 0 4
23532: ARRAY
23533: PPUSH
23534: CALL_OW 141
// end ;
23538: GO 23370
23540: POP
23541: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23542: LD_VAR 0 1
23546: PPUSH
23547: LD_EXP 89
23551: PUSH
23552: LD_VAR 0 5
23556: ARRAY
23557: PUSH
23558: LD_INT 0
23560: PLUS
23561: PPUSH
23562: CALL_OW 505
// end ;
23566: LD_VAR 0 3
23570: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23571: LD_INT 0
23573: PPUSH
23574: PPUSH
23575: PPUSH
23576: PPUSH
// if not hack in hackTanks then
23577: LD_VAR 0 1
23581: PUSH
23582: LD_EXP 88
23586: IN
23587: NOT
23588: IFFALSE 23592
// exit ;
23590: GO 23832
// index := GetElementIndex ( hackTanks , hack ) ;
23592: LD_ADDR_VAR 0 4
23596: PUSH
23597: LD_EXP 88
23601: PPUSH
23602: LD_VAR 0 1
23606: PPUSH
23607: CALL 30701 0 2
23611: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23612: LD_ADDR_VAR 0 3
23616: PUSH
23617: DOUBLE
23618: LD_EXP 89
23622: PUSH
23623: LD_VAR 0 4
23627: ARRAY
23628: INC
23629: ST_TO_ADDR
23630: LD_INT 1
23632: PUSH
23633: FOR_DOWNTO
23634: IFFALSE 23806
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23636: LD_ADDR_VAR 0 5
23640: PUSH
23641: LD_EXP 89
23645: PUSH
23646: LD_VAR 0 4
23650: ARRAY
23651: PUSH
23652: LD_VAR 0 3
23656: ARRAY
23657: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23658: LD_VAR 0 5
23662: PUSH
23663: LD_INT 1
23665: ARRAY
23666: PPUSH
23667: CALL_OW 302
23671: NOT
23672: PUSH
23673: LD_VAR 0 5
23677: PUSH
23678: LD_INT 1
23680: ARRAY
23681: PPUSH
23682: CALL_OW 255
23686: PUSH
23687: LD_VAR 0 1
23691: PPUSH
23692: CALL_OW 255
23696: NONEQUAL
23697: OR
23698: IFFALSE 23804
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23700: LD_VAR 0 5
23704: PUSH
23705: LD_INT 1
23707: ARRAY
23708: PPUSH
23709: CALL_OW 305
23713: PUSH
23714: LD_VAR 0 5
23718: PUSH
23719: LD_INT 1
23721: ARRAY
23722: PPUSH
23723: CALL_OW 255
23727: PUSH
23728: LD_VAR 0 1
23732: PPUSH
23733: CALL_OW 255
23737: EQUAL
23738: AND
23739: IFFALSE 23763
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23741: LD_VAR 0 5
23745: PUSH
23746: LD_INT 1
23748: ARRAY
23749: PPUSH
23750: LD_VAR 0 5
23754: PUSH
23755: LD_INT 2
23757: ARRAY
23758: PPUSH
23759: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23763: LD_ADDR_EXP 89
23767: PUSH
23768: LD_EXP 89
23772: PPUSH
23773: LD_VAR 0 4
23777: PPUSH
23778: LD_EXP 89
23782: PUSH
23783: LD_VAR 0 4
23787: ARRAY
23788: PPUSH
23789: LD_VAR 0 3
23793: PPUSH
23794: CALL_OW 3
23798: PPUSH
23799: CALL_OW 1
23803: ST_TO_ADDR
// end ; end ;
23804: GO 23633
23806: POP
23807: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23808: LD_VAR 0 1
23812: PPUSH
23813: LD_EXP 89
23817: PUSH
23818: LD_VAR 0 4
23822: ARRAY
23823: PUSH
23824: LD_INT 0
23826: PLUS
23827: PPUSH
23828: CALL_OW 505
// end ;
23832: LD_VAR 0 2
23836: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23837: LD_INT 0
23839: PPUSH
23840: PPUSH
23841: PPUSH
23842: PPUSH
// if not hack in hackTanks then
23843: LD_VAR 0 1
23847: PUSH
23848: LD_EXP 88
23852: IN
23853: NOT
23854: IFFALSE 23858
// exit ;
23856: GO 23943
// index := GetElementIndex ( hackTanks , hack ) ;
23858: LD_ADDR_VAR 0 5
23862: PUSH
23863: LD_EXP 88
23867: PPUSH
23868: LD_VAR 0 1
23872: PPUSH
23873: CALL 30701 0 2
23877: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23878: LD_ADDR_VAR 0 4
23882: PUSH
23883: DOUBLE
23884: LD_INT 1
23886: DEC
23887: ST_TO_ADDR
23888: LD_EXP 89
23892: PUSH
23893: LD_VAR 0 5
23897: ARRAY
23898: PUSH
23899: FOR_TO
23900: IFFALSE 23941
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23902: LD_EXP 89
23906: PUSH
23907: LD_VAR 0 5
23911: ARRAY
23912: PUSH
23913: LD_VAR 0 4
23917: ARRAY
23918: PUSH
23919: LD_INT 1
23921: ARRAY
23922: PUSH
23923: LD_VAR 0 2
23927: EQUAL
23928: IFFALSE 23939
// KillUnit ( vehicle ) ;
23930: LD_VAR 0 2
23934: PPUSH
23935: CALL_OW 66
23939: GO 23899
23941: POP
23942: POP
// end ;
23943: LD_VAR 0 3
23947: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23948: LD_EXP 93
23952: NOT
23953: IFFALSE 23988
23955: GO 23957
23957: DISABLE
// begin initMiner := true ;
23958: LD_ADDR_EXP 93
23962: PUSH
23963: LD_INT 1
23965: ST_TO_ADDR
// minersList := [ ] ;
23966: LD_ADDR_EXP 94
23970: PUSH
23971: EMPTY
23972: ST_TO_ADDR
// minerMinesList := [ ] ;
23973: LD_ADDR_EXP 95
23977: PUSH
23978: EMPTY
23979: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23980: LD_ADDR_EXP 96
23984: PUSH
23985: LD_INT 5
23987: ST_TO_ADDR
// end ;
23988: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23989: LD_EXP 93
23993: PUSH
23994: LD_INT 34
23996: PUSH
23997: LD_INT 81
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PPUSH
24004: CALL_OW 69
24008: AND
24009: IFFALSE 24470
24011: GO 24013
24013: DISABLE
24014: LD_INT 0
24016: PPUSH
24017: PPUSH
24018: PPUSH
24019: PPUSH
// begin enable ;
24020: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24021: LD_ADDR_VAR 0 1
24025: PUSH
24026: LD_INT 34
24028: PUSH
24029: LD_INT 81
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PPUSH
24036: CALL_OW 69
24040: PUSH
24041: FOR_IN
24042: IFFALSE 24114
// begin if not i in minersList then
24044: LD_VAR 0 1
24048: PUSH
24049: LD_EXP 94
24053: IN
24054: NOT
24055: IFFALSE 24112
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24057: LD_ADDR_EXP 94
24061: PUSH
24062: LD_EXP 94
24066: PPUSH
24067: LD_EXP 94
24071: PUSH
24072: LD_INT 1
24074: PLUS
24075: PPUSH
24076: LD_VAR 0 1
24080: PPUSH
24081: CALL_OW 1
24085: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24086: LD_ADDR_EXP 95
24090: PUSH
24091: LD_EXP 95
24095: PPUSH
24096: LD_EXP 95
24100: PUSH
24101: LD_INT 1
24103: PLUS
24104: PPUSH
24105: EMPTY
24106: PPUSH
24107: CALL_OW 1
24111: ST_TO_ADDR
// end end ;
24112: GO 24041
24114: POP
24115: POP
// for i := minerMinesList downto 1 do
24116: LD_ADDR_VAR 0 1
24120: PUSH
24121: DOUBLE
24122: LD_EXP 95
24126: INC
24127: ST_TO_ADDR
24128: LD_INT 1
24130: PUSH
24131: FOR_DOWNTO
24132: IFFALSE 24468
// begin if IsLive ( minersList [ i ] ) then
24134: LD_EXP 94
24138: PUSH
24139: LD_VAR 0 1
24143: ARRAY
24144: PPUSH
24145: CALL_OW 300
24149: IFFALSE 24177
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24151: LD_EXP 94
24155: PUSH
24156: LD_VAR 0 1
24160: ARRAY
24161: PPUSH
24162: LD_EXP 95
24166: PUSH
24167: LD_VAR 0 1
24171: ARRAY
24172: PPUSH
24173: CALL_OW 505
// if not minerMinesList [ i ] then
24177: LD_EXP 95
24181: PUSH
24182: LD_VAR 0 1
24186: ARRAY
24187: NOT
24188: IFFALSE 24192
// continue ;
24190: GO 24131
// for j := minerMinesList [ i ] downto 1 do
24192: LD_ADDR_VAR 0 2
24196: PUSH
24197: DOUBLE
24198: LD_EXP 95
24202: PUSH
24203: LD_VAR 0 1
24207: ARRAY
24208: INC
24209: ST_TO_ADDR
24210: LD_INT 1
24212: PUSH
24213: FOR_DOWNTO
24214: IFFALSE 24464
// begin side := GetSide ( minersList [ i ] ) ;
24216: LD_ADDR_VAR 0 3
24220: PUSH
24221: LD_EXP 94
24225: PUSH
24226: LD_VAR 0 1
24230: ARRAY
24231: PPUSH
24232: CALL_OW 255
24236: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24237: LD_ADDR_VAR 0 4
24241: PUSH
24242: LD_EXP 95
24246: PUSH
24247: LD_VAR 0 1
24251: ARRAY
24252: PUSH
24253: LD_VAR 0 2
24257: ARRAY
24258: PUSH
24259: LD_INT 1
24261: ARRAY
24262: PPUSH
24263: LD_EXP 95
24267: PUSH
24268: LD_VAR 0 1
24272: ARRAY
24273: PUSH
24274: LD_VAR 0 2
24278: ARRAY
24279: PUSH
24280: LD_INT 2
24282: ARRAY
24283: PPUSH
24284: CALL_OW 428
24288: ST_TO_ADDR
// if not tmp then
24289: LD_VAR 0 4
24293: NOT
24294: IFFALSE 24298
// continue ;
24296: GO 24213
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24298: LD_VAR 0 4
24302: PUSH
24303: LD_INT 81
24305: PUSH
24306: LD_VAR 0 3
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: PPUSH
24315: CALL_OW 69
24319: IN
24320: PUSH
24321: LD_EXP 95
24325: PUSH
24326: LD_VAR 0 1
24330: ARRAY
24331: PUSH
24332: LD_VAR 0 2
24336: ARRAY
24337: PUSH
24338: LD_INT 1
24340: ARRAY
24341: PPUSH
24342: LD_EXP 95
24346: PUSH
24347: LD_VAR 0 1
24351: ARRAY
24352: PUSH
24353: LD_VAR 0 2
24357: ARRAY
24358: PUSH
24359: LD_INT 2
24361: ARRAY
24362: PPUSH
24363: CALL_OW 458
24367: AND
24368: IFFALSE 24462
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24370: LD_EXP 95
24374: PUSH
24375: LD_VAR 0 1
24379: ARRAY
24380: PUSH
24381: LD_VAR 0 2
24385: ARRAY
24386: PUSH
24387: LD_INT 1
24389: ARRAY
24390: PPUSH
24391: LD_EXP 95
24395: PUSH
24396: LD_VAR 0 1
24400: ARRAY
24401: PUSH
24402: LD_VAR 0 2
24406: ARRAY
24407: PUSH
24408: LD_INT 2
24410: ARRAY
24411: PPUSH
24412: LD_VAR 0 3
24416: PPUSH
24417: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24421: LD_ADDR_EXP 95
24425: PUSH
24426: LD_EXP 95
24430: PPUSH
24431: LD_VAR 0 1
24435: PPUSH
24436: LD_EXP 95
24440: PUSH
24441: LD_VAR 0 1
24445: ARRAY
24446: PPUSH
24447: LD_VAR 0 2
24451: PPUSH
24452: CALL_OW 3
24456: PPUSH
24457: CALL_OW 1
24461: ST_TO_ADDR
// end ; end ;
24462: GO 24213
24464: POP
24465: POP
// end ;
24466: GO 24131
24468: POP
24469: POP
// end ;
24470: PPOPN 4
24472: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24473: LD_INT 0
24475: PPUSH
24476: PPUSH
// result := false ;
24477: LD_ADDR_VAR 0 4
24481: PUSH
24482: LD_INT 0
24484: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24485: LD_VAR 0 1
24489: PPUSH
24490: CALL_OW 264
24494: PUSH
24495: LD_INT 81
24497: EQUAL
24498: NOT
24499: IFFALSE 24503
// exit ;
24501: GO 24743
// index := GetElementIndex ( minersList , unit ) ;
24503: LD_ADDR_VAR 0 5
24507: PUSH
24508: LD_EXP 94
24512: PPUSH
24513: LD_VAR 0 1
24517: PPUSH
24518: CALL 30701 0 2
24522: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24523: LD_EXP 95
24527: PUSH
24528: LD_VAR 0 5
24532: ARRAY
24533: PUSH
24534: LD_EXP 96
24538: GREATEREQUAL
24539: IFFALSE 24543
// exit ;
24541: GO 24743
// ComMoveXY ( unit , x , y ) ;
24543: LD_VAR 0 1
24547: PPUSH
24548: LD_VAR 0 2
24552: PPUSH
24553: LD_VAR 0 3
24557: PPUSH
24558: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24562: LD_INT 35
24564: PPUSH
24565: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24569: LD_VAR 0 1
24573: PPUSH
24574: LD_VAR 0 2
24578: PPUSH
24579: LD_VAR 0 3
24583: PPUSH
24584: CALL 62056 0 3
24588: NOT
24589: PUSH
24590: LD_VAR 0 1
24594: PPUSH
24595: CALL_OW 314
24599: AND
24600: IFFALSE 24604
// exit ;
24602: GO 24743
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24604: LD_VAR 0 2
24608: PPUSH
24609: LD_VAR 0 3
24613: PPUSH
24614: CALL_OW 428
24618: PUSH
24619: LD_VAR 0 1
24623: EQUAL
24624: PUSH
24625: LD_VAR 0 1
24629: PPUSH
24630: CALL_OW 314
24634: NOT
24635: AND
24636: IFFALSE 24562
// PlaySoundXY ( x , y , PlantMine ) ;
24638: LD_VAR 0 2
24642: PPUSH
24643: LD_VAR 0 3
24647: PPUSH
24648: LD_STRING PlantMine
24650: PPUSH
24651: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24655: LD_VAR 0 2
24659: PPUSH
24660: LD_VAR 0 3
24664: PPUSH
24665: LD_VAR 0 1
24669: PPUSH
24670: CALL_OW 255
24674: PPUSH
24675: LD_INT 0
24677: PPUSH
24678: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24682: LD_ADDR_EXP 95
24686: PUSH
24687: LD_EXP 95
24691: PPUSH
24692: LD_VAR 0 5
24696: PUSH
24697: LD_EXP 95
24701: PUSH
24702: LD_VAR 0 5
24706: ARRAY
24707: PUSH
24708: LD_INT 1
24710: PLUS
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: PPUSH
24716: LD_VAR 0 2
24720: PUSH
24721: LD_VAR 0 3
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PPUSH
24730: CALL 30916 0 3
24734: ST_TO_ADDR
// result := true ;
24735: LD_ADDR_VAR 0 4
24739: PUSH
24740: LD_INT 1
24742: ST_TO_ADDR
// end ;
24743: LD_VAR 0 4
24747: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24748: LD_INT 0
24750: PPUSH
24751: PPUSH
24752: PPUSH
// if not unit in minersList then
24753: LD_VAR 0 1
24757: PUSH
24758: LD_EXP 94
24762: IN
24763: NOT
24764: IFFALSE 24768
// exit ;
24766: GO 25160
// index := GetElementIndex ( minersList , unit ) ;
24768: LD_ADDR_VAR 0 6
24772: PUSH
24773: LD_EXP 94
24777: PPUSH
24778: LD_VAR 0 1
24782: PPUSH
24783: CALL 30701 0 2
24787: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24788: LD_ADDR_VAR 0 5
24792: PUSH
24793: DOUBLE
24794: LD_EXP 95
24798: PUSH
24799: LD_VAR 0 6
24803: ARRAY
24804: INC
24805: ST_TO_ADDR
24806: LD_INT 1
24808: PUSH
24809: FOR_DOWNTO
24810: IFFALSE 24971
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24812: LD_EXP 95
24816: PUSH
24817: LD_VAR 0 6
24821: ARRAY
24822: PUSH
24823: LD_VAR 0 5
24827: ARRAY
24828: PUSH
24829: LD_INT 1
24831: ARRAY
24832: PUSH
24833: LD_VAR 0 2
24837: EQUAL
24838: PUSH
24839: LD_EXP 95
24843: PUSH
24844: LD_VAR 0 6
24848: ARRAY
24849: PUSH
24850: LD_VAR 0 5
24854: ARRAY
24855: PUSH
24856: LD_INT 2
24858: ARRAY
24859: PUSH
24860: LD_VAR 0 3
24864: EQUAL
24865: AND
24866: IFFALSE 24969
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24868: LD_EXP 95
24872: PUSH
24873: LD_VAR 0 6
24877: ARRAY
24878: PUSH
24879: LD_VAR 0 5
24883: ARRAY
24884: PUSH
24885: LD_INT 1
24887: ARRAY
24888: PPUSH
24889: LD_EXP 95
24893: PUSH
24894: LD_VAR 0 6
24898: ARRAY
24899: PUSH
24900: LD_VAR 0 5
24904: ARRAY
24905: PUSH
24906: LD_INT 2
24908: ARRAY
24909: PPUSH
24910: LD_VAR 0 1
24914: PPUSH
24915: CALL_OW 255
24919: PPUSH
24920: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24924: LD_ADDR_EXP 95
24928: PUSH
24929: LD_EXP 95
24933: PPUSH
24934: LD_VAR 0 6
24938: PPUSH
24939: LD_EXP 95
24943: PUSH
24944: LD_VAR 0 6
24948: ARRAY
24949: PPUSH
24950: LD_VAR 0 5
24954: PPUSH
24955: CALL_OW 3
24959: PPUSH
24960: CALL_OW 1
24964: ST_TO_ADDR
// exit ;
24965: POP
24966: POP
24967: GO 25160
// end ; end ;
24969: GO 24809
24971: POP
24972: POP
// for i := minerMinesList [ index ] downto 1 do
24973: LD_ADDR_VAR 0 5
24977: PUSH
24978: DOUBLE
24979: LD_EXP 95
24983: PUSH
24984: LD_VAR 0 6
24988: ARRAY
24989: INC
24990: ST_TO_ADDR
24991: LD_INT 1
24993: PUSH
24994: FOR_DOWNTO
24995: IFFALSE 25158
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24997: LD_EXP 95
25001: PUSH
25002: LD_VAR 0 6
25006: ARRAY
25007: PUSH
25008: LD_VAR 0 5
25012: ARRAY
25013: PUSH
25014: LD_INT 1
25016: ARRAY
25017: PPUSH
25018: LD_EXP 95
25022: PUSH
25023: LD_VAR 0 6
25027: ARRAY
25028: PUSH
25029: LD_VAR 0 5
25033: ARRAY
25034: PUSH
25035: LD_INT 2
25037: ARRAY
25038: PPUSH
25039: LD_VAR 0 2
25043: PPUSH
25044: LD_VAR 0 3
25048: PPUSH
25049: CALL_OW 298
25053: PUSH
25054: LD_INT 6
25056: LESS
25057: IFFALSE 25156
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25059: LD_EXP 95
25063: PUSH
25064: LD_VAR 0 6
25068: ARRAY
25069: PUSH
25070: LD_VAR 0 5
25074: ARRAY
25075: PUSH
25076: LD_INT 1
25078: ARRAY
25079: PPUSH
25080: LD_EXP 95
25084: PUSH
25085: LD_VAR 0 6
25089: ARRAY
25090: PUSH
25091: LD_VAR 0 5
25095: ARRAY
25096: PUSH
25097: LD_INT 2
25099: ARRAY
25100: PPUSH
25101: LD_VAR 0 1
25105: PPUSH
25106: CALL_OW 255
25110: PPUSH
25111: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25115: LD_ADDR_EXP 95
25119: PUSH
25120: LD_EXP 95
25124: PPUSH
25125: LD_VAR 0 6
25129: PPUSH
25130: LD_EXP 95
25134: PUSH
25135: LD_VAR 0 6
25139: ARRAY
25140: PPUSH
25141: LD_VAR 0 5
25145: PPUSH
25146: CALL_OW 3
25150: PPUSH
25151: CALL_OW 1
25155: ST_TO_ADDR
// end ; end ;
25156: GO 24994
25158: POP
25159: POP
// end ;
25160: LD_VAR 0 4
25164: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25165: LD_INT 0
25167: PPUSH
25168: PPUSH
25169: PPUSH
25170: PPUSH
25171: PPUSH
25172: PPUSH
25173: PPUSH
25174: PPUSH
25175: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25176: LD_VAR 0 1
25180: PPUSH
25181: CALL_OW 264
25185: PUSH
25186: LD_INT 81
25188: EQUAL
25189: NOT
25190: PUSH
25191: LD_VAR 0 1
25195: PUSH
25196: LD_EXP 94
25200: IN
25201: NOT
25202: OR
25203: IFFALSE 25207
// exit ;
25205: GO 25529
// index := GetElementIndex ( minersList , unit ) ;
25207: LD_ADDR_VAR 0 6
25211: PUSH
25212: LD_EXP 94
25216: PPUSH
25217: LD_VAR 0 1
25221: PPUSH
25222: CALL 30701 0 2
25226: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25227: LD_ADDR_VAR 0 8
25231: PUSH
25232: LD_EXP 96
25236: PUSH
25237: LD_EXP 95
25241: PUSH
25242: LD_VAR 0 6
25246: ARRAY
25247: MINUS
25248: ST_TO_ADDR
// if not minesFreeAmount then
25249: LD_VAR 0 8
25253: NOT
25254: IFFALSE 25258
// exit ;
25256: GO 25529
// tmp := [ ] ;
25258: LD_ADDR_VAR 0 7
25262: PUSH
25263: EMPTY
25264: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25265: LD_ADDR_VAR 0 5
25269: PUSH
25270: DOUBLE
25271: LD_INT 1
25273: DEC
25274: ST_TO_ADDR
25275: LD_VAR 0 8
25279: PUSH
25280: FOR_TO
25281: IFFALSE 25476
// begin _d := rand ( 0 , 5 ) ;
25283: LD_ADDR_VAR 0 11
25287: PUSH
25288: LD_INT 0
25290: PPUSH
25291: LD_INT 5
25293: PPUSH
25294: CALL_OW 12
25298: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25299: LD_ADDR_VAR 0 12
25303: PUSH
25304: LD_INT 2
25306: PPUSH
25307: LD_INT 6
25309: PPUSH
25310: CALL_OW 12
25314: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25315: LD_ADDR_VAR 0 9
25319: PUSH
25320: LD_VAR 0 2
25324: PPUSH
25325: LD_VAR 0 11
25329: PPUSH
25330: LD_VAR 0 12
25334: PPUSH
25335: CALL_OW 272
25339: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25340: LD_ADDR_VAR 0 10
25344: PUSH
25345: LD_VAR 0 3
25349: PPUSH
25350: LD_VAR 0 11
25354: PPUSH
25355: LD_VAR 0 12
25359: PPUSH
25360: CALL_OW 273
25364: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25365: LD_VAR 0 9
25369: PPUSH
25370: LD_VAR 0 10
25374: PPUSH
25375: CALL_OW 488
25379: PUSH
25380: LD_VAR 0 9
25384: PUSH
25385: LD_VAR 0 10
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: LD_VAR 0 7
25398: IN
25399: NOT
25400: AND
25401: PUSH
25402: LD_VAR 0 9
25406: PPUSH
25407: LD_VAR 0 10
25411: PPUSH
25412: CALL_OW 458
25416: NOT
25417: AND
25418: IFFALSE 25460
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25420: LD_ADDR_VAR 0 7
25424: PUSH
25425: LD_VAR 0 7
25429: PPUSH
25430: LD_VAR 0 7
25434: PUSH
25435: LD_INT 1
25437: PLUS
25438: PPUSH
25439: LD_VAR 0 9
25443: PUSH
25444: LD_VAR 0 10
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PPUSH
25453: CALL_OW 1
25457: ST_TO_ADDR
25458: GO 25474
// i := i - 1 ;
25460: LD_ADDR_VAR 0 5
25464: PUSH
25465: LD_VAR 0 5
25469: PUSH
25470: LD_INT 1
25472: MINUS
25473: ST_TO_ADDR
// end ;
25474: GO 25280
25476: POP
25477: POP
// for i in tmp do
25478: LD_ADDR_VAR 0 5
25482: PUSH
25483: LD_VAR 0 7
25487: PUSH
25488: FOR_IN
25489: IFFALSE 25527
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25491: LD_VAR 0 1
25495: PPUSH
25496: LD_VAR 0 5
25500: PUSH
25501: LD_INT 1
25503: ARRAY
25504: PPUSH
25505: LD_VAR 0 5
25509: PUSH
25510: LD_INT 2
25512: ARRAY
25513: PPUSH
25514: CALL 24473 0 3
25518: NOT
25519: IFFALSE 25525
// exit ;
25521: POP
25522: POP
25523: GO 25529
25525: GO 25488
25527: POP
25528: POP
// end ;
25529: LD_VAR 0 4
25533: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25534: LD_INT 0
25536: PPUSH
25537: PPUSH
25538: PPUSH
25539: PPUSH
25540: PPUSH
25541: PPUSH
25542: PPUSH
// if not GetClass ( unit ) = class_sniper then
25543: LD_VAR 0 1
25547: PPUSH
25548: CALL_OW 257
25552: PUSH
25553: LD_INT 5
25555: EQUAL
25556: NOT
25557: IFFALSE 25561
// exit ;
25559: GO 25949
// dist := 8 ;
25561: LD_ADDR_VAR 0 5
25565: PUSH
25566: LD_INT 8
25568: ST_TO_ADDR
// viewRange := 12 ;
25569: LD_ADDR_VAR 0 7
25573: PUSH
25574: LD_INT 12
25576: ST_TO_ADDR
// side := GetSide ( unit ) ;
25577: LD_ADDR_VAR 0 6
25581: PUSH
25582: LD_VAR 0 1
25586: PPUSH
25587: CALL_OW 255
25591: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25592: LD_INT 61
25594: PPUSH
25595: LD_VAR 0 6
25599: PPUSH
25600: CALL_OW 321
25604: PUSH
25605: LD_INT 2
25607: EQUAL
25608: IFFALSE 25618
// viewRange := 16 ;
25610: LD_ADDR_VAR 0 7
25614: PUSH
25615: LD_INT 16
25617: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25618: LD_VAR 0 1
25622: PPUSH
25623: LD_VAR 0 2
25627: PPUSH
25628: LD_VAR 0 3
25632: PPUSH
25633: CALL_OW 297
25637: PUSH
25638: LD_VAR 0 5
25642: GREATER
25643: IFFALSE 25722
// begin ComMoveXY ( unit , x , y ) ;
25645: LD_VAR 0 1
25649: PPUSH
25650: LD_VAR 0 2
25654: PPUSH
25655: LD_VAR 0 3
25659: PPUSH
25660: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25664: LD_INT 35
25666: PPUSH
25667: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25671: LD_VAR 0 1
25675: PPUSH
25676: LD_VAR 0 2
25680: PPUSH
25681: LD_VAR 0 3
25685: PPUSH
25686: CALL 62056 0 3
25690: NOT
25691: IFFALSE 25695
// exit ;
25693: GO 25949
// until GetDistUnitXY ( unit , x , y ) < dist ;
25695: LD_VAR 0 1
25699: PPUSH
25700: LD_VAR 0 2
25704: PPUSH
25705: LD_VAR 0 3
25709: PPUSH
25710: CALL_OW 297
25714: PUSH
25715: LD_VAR 0 5
25719: LESS
25720: IFFALSE 25664
// end ; ComTurnXY ( unit , x , y ) ;
25722: LD_VAR 0 1
25726: PPUSH
25727: LD_VAR 0 2
25731: PPUSH
25732: LD_VAR 0 3
25736: PPUSH
25737: CALL_OW 118
// wait ( 5 ) ;
25741: LD_INT 5
25743: PPUSH
25744: CALL_OW 67
// _d := GetDir ( unit ) ;
25748: LD_ADDR_VAR 0 10
25752: PUSH
25753: LD_VAR 0 1
25757: PPUSH
25758: CALL_OW 254
25762: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25763: LD_ADDR_VAR 0 8
25767: PUSH
25768: LD_VAR 0 1
25772: PPUSH
25773: CALL_OW 250
25777: PPUSH
25778: LD_VAR 0 10
25782: PPUSH
25783: LD_VAR 0 5
25787: PPUSH
25788: CALL_OW 272
25792: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25793: LD_ADDR_VAR 0 9
25797: PUSH
25798: LD_VAR 0 1
25802: PPUSH
25803: CALL_OW 251
25807: PPUSH
25808: LD_VAR 0 10
25812: PPUSH
25813: LD_VAR 0 5
25817: PPUSH
25818: CALL_OW 273
25822: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25823: LD_VAR 0 8
25827: PPUSH
25828: LD_VAR 0 9
25832: PPUSH
25833: CALL_OW 488
25837: NOT
25838: IFFALSE 25842
// exit ;
25840: GO 25949
// ComAnimCustom ( unit , 1 ) ;
25842: LD_VAR 0 1
25846: PPUSH
25847: LD_INT 1
25849: PPUSH
25850: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25854: LD_VAR 0 8
25858: PPUSH
25859: LD_VAR 0 9
25863: PPUSH
25864: LD_VAR 0 6
25868: PPUSH
25869: LD_VAR 0 7
25873: PPUSH
25874: CALL_OW 330
// repeat wait ( 1 ) ;
25878: LD_INT 1
25880: PPUSH
25881: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25885: LD_VAR 0 1
25889: PPUSH
25890: CALL_OW 316
25894: PUSH
25895: LD_VAR 0 1
25899: PPUSH
25900: CALL_OW 314
25904: OR
25905: PUSH
25906: LD_VAR 0 1
25910: PPUSH
25911: CALL_OW 302
25915: NOT
25916: OR
25917: PUSH
25918: LD_VAR 0 1
25922: PPUSH
25923: CALL_OW 301
25927: OR
25928: IFFALSE 25878
// RemoveSeeing ( _x , _y , side ) ;
25930: LD_VAR 0 8
25934: PPUSH
25935: LD_VAR 0 9
25939: PPUSH
25940: LD_VAR 0 6
25944: PPUSH
25945: CALL_OW 331
// end ; end_of_file
25949: LD_VAR 0 4
25953: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25954: LD_INT 0
25956: PPUSH
25957: PPUSH
// if exist_mode then
25958: LD_VAR 0 2
25962: IFFALSE 25987
// unit := CreateCharacter ( prefix & ident ) else
25964: LD_ADDR_VAR 0 5
25968: PUSH
25969: LD_VAR 0 3
25973: PUSH
25974: LD_VAR 0 1
25978: STR
25979: PPUSH
25980: CALL_OW 34
25984: ST_TO_ADDR
25985: GO 26002
// unit := NewCharacter ( ident ) ;
25987: LD_ADDR_VAR 0 5
25991: PUSH
25992: LD_VAR 0 1
25996: PPUSH
25997: CALL_OW 25
26001: ST_TO_ADDR
// result := unit ;
26002: LD_ADDR_VAR 0 4
26006: PUSH
26007: LD_VAR 0 5
26011: ST_TO_ADDR
// end ;
26012: LD_VAR 0 4
26016: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26017: LD_INT 0
26019: PPUSH
26020: PPUSH
// if not side or not nation then
26021: LD_VAR 0 1
26025: NOT
26026: PUSH
26027: LD_VAR 0 2
26031: NOT
26032: OR
26033: IFFALSE 26037
// exit ;
26035: GO 26805
// case nation of nation_american :
26037: LD_VAR 0 2
26041: PUSH
26042: LD_INT 1
26044: DOUBLE
26045: EQUAL
26046: IFTRUE 26050
26048: GO 26264
26050: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26051: LD_ADDR_VAR 0 4
26055: PUSH
26056: LD_INT 35
26058: PUSH
26059: LD_INT 45
26061: PUSH
26062: LD_INT 46
26064: PUSH
26065: LD_INT 47
26067: PUSH
26068: LD_INT 82
26070: PUSH
26071: LD_INT 83
26073: PUSH
26074: LD_INT 84
26076: PUSH
26077: LD_INT 85
26079: PUSH
26080: LD_INT 86
26082: PUSH
26083: LD_INT 1
26085: PUSH
26086: LD_INT 2
26088: PUSH
26089: LD_INT 6
26091: PUSH
26092: LD_INT 15
26094: PUSH
26095: LD_INT 16
26097: PUSH
26098: LD_INT 7
26100: PUSH
26101: LD_INT 12
26103: PUSH
26104: LD_INT 13
26106: PUSH
26107: LD_INT 10
26109: PUSH
26110: LD_INT 14
26112: PUSH
26113: LD_INT 20
26115: PUSH
26116: LD_INT 21
26118: PUSH
26119: LD_INT 22
26121: PUSH
26122: LD_INT 25
26124: PUSH
26125: LD_INT 32
26127: PUSH
26128: LD_INT 27
26130: PUSH
26131: LD_INT 36
26133: PUSH
26134: LD_INT 69
26136: PUSH
26137: LD_INT 39
26139: PUSH
26140: LD_INT 34
26142: PUSH
26143: LD_INT 40
26145: PUSH
26146: LD_INT 48
26148: PUSH
26149: LD_INT 49
26151: PUSH
26152: LD_INT 50
26154: PUSH
26155: LD_INT 51
26157: PUSH
26158: LD_INT 52
26160: PUSH
26161: LD_INT 53
26163: PUSH
26164: LD_INT 54
26166: PUSH
26167: LD_INT 55
26169: PUSH
26170: LD_INT 56
26172: PUSH
26173: LD_INT 57
26175: PUSH
26176: LD_INT 58
26178: PUSH
26179: LD_INT 59
26181: PUSH
26182: LD_INT 60
26184: PUSH
26185: LD_INT 61
26187: PUSH
26188: LD_INT 62
26190: PUSH
26191: LD_INT 80
26193: PUSH
26194: LD_INT 82
26196: PUSH
26197: LD_INT 83
26199: PUSH
26200: LD_INT 84
26202: PUSH
26203: LD_INT 85
26205: PUSH
26206: LD_INT 86
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: ST_TO_ADDR
26262: GO 26729
26264: LD_INT 2
26266: DOUBLE
26267: EQUAL
26268: IFTRUE 26272
26270: GO 26498
26272: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26273: LD_ADDR_VAR 0 4
26277: PUSH
26278: LD_INT 35
26280: PUSH
26281: LD_INT 45
26283: PUSH
26284: LD_INT 46
26286: PUSH
26287: LD_INT 47
26289: PUSH
26290: LD_INT 82
26292: PUSH
26293: LD_INT 83
26295: PUSH
26296: LD_INT 84
26298: PUSH
26299: LD_INT 85
26301: PUSH
26302: LD_INT 87
26304: PUSH
26305: LD_INT 70
26307: PUSH
26308: LD_INT 1
26310: PUSH
26311: LD_INT 11
26313: PUSH
26314: LD_INT 3
26316: PUSH
26317: LD_INT 4
26319: PUSH
26320: LD_INT 5
26322: PUSH
26323: LD_INT 6
26325: PUSH
26326: LD_INT 15
26328: PUSH
26329: LD_INT 18
26331: PUSH
26332: LD_INT 7
26334: PUSH
26335: LD_INT 17
26337: PUSH
26338: LD_INT 8
26340: PUSH
26341: LD_INT 20
26343: PUSH
26344: LD_INT 21
26346: PUSH
26347: LD_INT 22
26349: PUSH
26350: LD_INT 72
26352: PUSH
26353: LD_INT 26
26355: PUSH
26356: LD_INT 69
26358: PUSH
26359: LD_INT 39
26361: PUSH
26362: LD_INT 40
26364: PUSH
26365: LD_INT 41
26367: PUSH
26368: LD_INT 42
26370: PUSH
26371: LD_INT 43
26373: PUSH
26374: LD_INT 48
26376: PUSH
26377: LD_INT 49
26379: PUSH
26380: LD_INT 50
26382: PUSH
26383: LD_INT 51
26385: PUSH
26386: LD_INT 52
26388: PUSH
26389: LD_INT 53
26391: PUSH
26392: LD_INT 54
26394: PUSH
26395: LD_INT 55
26397: PUSH
26398: LD_INT 56
26400: PUSH
26401: LD_INT 60
26403: PUSH
26404: LD_INT 61
26406: PUSH
26407: LD_INT 62
26409: PUSH
26410: LD_INT 66
26412: PUSH
26413: LD_INT 67
26415: PUSH
26416: LD_INT 68
26418: PUSH
26419: LD_INT 81
26421: PUSH
26422: LD_INT 82
26424: PUSH
26425: LD_INT 83
26427: PUSH
26428: LD_INT 84
26430: PUSH
26431: LD_INT 85
26433: PUSH
26434: LD_INT 87
26436: PUSH
26437: LD_INT 88
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: ST_TO_ADDR
26496: GO 26729
26498: LD_INT 3
26500: DOUBLE
26501: EQUAL
26502: IFTRUE 26506
26504: GO 26728
26506: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26507: LD_ADDR_VAR 0 4
26511: PUSH
26512: LD_INT 46
26514: PUSH
26515: LD_INT 47
26517: PUSH
26518: LD_INT 1
26520: PUSH
26521: LD_INT 2
26523: PUSH
26524: LD_INT 82
26526: PUSH
26527: LD_INT 83
26529: PUSH
26530: LD_INT 84
26532: PUSH
26533: LD_INT 85
26535: PUSH
26536: LD_INT 86
26538: PUSH
26539: LD_INT 11
26541: PUSH
26542: LD_INT 9
26544: PUSH
26545: LD_INT 20
26547: PUSH
26548: LD_INT 19
26550: PUSH
26551: LD_INT 21
26553: PUSH
26554: LD_INT 24
26556: PUSH
26557: LD_INT 22
26559: PUSH
26560: LD_INT 25
26562: PUSH
26563: LD_INT 28
26565: PUSH
26566: LD_INT 29
26568: PUSH
26569: LD_INT 30
26571: PUSH
26572: LD_INT 31
26574: PUSH
26575: LD_INT 37
26577: PUSH
26578: LD_INT 38
26580: PUSH
26581: LD_INT 32
26583: PUSH
26584: LD_INT 27
26586: PUSH
26587: LD_INT 33
26589: PUSH
26590: LD_INT 69
26592: PUSH
26593: LD_INT 39
26595: PUSH
26596: LD_INT 34
26598: PUSH
26599: LD_INT 40
26601: PUSH
26602: LD_INT 71
26604: PUSH
26605: LD_INT 23
26607: PUSH
26608: LD_INT 44
26610: PUSH
26611: LD_INT 48
26613: PUSH
26614: LD_INT 49
26616: PUSH
26617: LD_INT 50
26619: PUSH
26620: LD_INT 51
26622: PUSH
26623: LD_INT 52
26625: PUSH
26626: LD_INT 53
26628: PUSH
26629: LD_INT 54
26631: PUSH
26632: LD_INT 55
26634: PUSH
26635: LD_INT 56
26637: PUSH
26638: LD_INT 57
26640: PUSH
26641: LD_INT 58
26643: PUSH
26644: LD_INT 59
26646: PUSH
26647: LD_INT 63
26649: PUSH
26650: LD_INT 64
26652: PUSH
26653: LD_INT 65
26655: PUSH
26656: LD_INT 82
26658: PUSH
26659: LD_INT 83
26661: PUSH
26662: LD_INT 84
26664: PUSH
26665: LD_INT 85
26667: PUSH
26668: LD_INT 86
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: ST_TO_ADDR
26726: GO 26729
26728: POP
// if state > - 1 and state < 3 then
26729: LD_VAR 0 3
26733: PUSH
26734: LD_INT 1
26736: NEG
26737: GREATER
26738: PUSH
26739: LD_VAR 0 3
26743: PUSH
26744: LD_INT 3
26746: LESS
26747: AND
26748: IFFALSE 26805
// for i in result do
26750: LD_ADDR_VAR 0 5
26754: PUSH
26755: LD_VAR 0 4
26759: PUSH
26760: FOR_IN
26761: IFFALSE 26803
// if GetTech ( i , side ) <> state then
26763: LD_VAR 0 5
26767: PPUSH
26768: LD_VAR 0 1
26772: PPUSH
26773: CALL_OW 321
26777: PUSH
26778: LD_VAR 0 3
26782: NONEQUAL
26783: IFFALSE 26801
// result := result diff i ;
26785: LD_ADDR_VAR 0 4
26789: PUSH
26790: LD_VAR 0 4
26794: PUSH
26795: LD_VAR 0 5
26799: DIFF
26800: ST_TO_ADDR
26801: GO 26760
26803: POP
26804: POP
// end ;
26805: LD_VAR 0 4
26809: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26810: LD_INT 0
26812: PPUSH
26813: PPUSH
26814: PPUSH
// result := true ;
26815: LD_ADDR_VAR 0 3
26819: PUSH
26820: LD_INT 1
26822: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26823: LD_ADDR_VAR 0 5
26827: PUSH
26828: LD_VAR 0 2
26832: PPUSH
26833: CALL_OW 480
26837: ST_TO_ADDR
// if not tmp then
26838: LD_VAR 0 5
26842: NOT
26843: IFFALSE 26847
// exit ;
26845: GO 26896
// for i in tmp do
26847: LD_ADDR_VAR 0 4
26851: PUSH
26852: LD_VAR 0 5
26856: PUSH
26857: FOR_IN
26858: IFFALSE 26894
// if GetTech ( i , side ) <> state_researched then
26860: LD_VAR 0 4
26864: PPUSH
26865: LD_VAR 0 1
26869: PPUSH
26870: CALL_OW 321
26874: PUSH
26875: LD_INT 2
26877: NONEQUAL
26878: IFFALSE 26892
// begin result := false ;
26880: LD_ADDR_VAR 0 3
26884: PUSH
26885: LD_INT 0
26887: ST_TO_ADDR
// exit ;
26888: POP
26889: POP
26890: GO 26896
// end ;
26892: GO 26857
26894: POP
26895: POP
// end ;
26896: LD_VAR 0 3
26900: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26901: LD_INT 0
26903: PPUSH
26904: PPUSH
26905: PPUSH
26906: PPUSH
26907: PPUSH
26908: PPUSH
26909: PPUSH
26910: PPUSH
26911: PPUSH
26912: PPUSH
26913: PPUSH
26914: PPUSH
26915: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26916: LD_VAR 0 1
26920: NOT
26921: PUSH
26922: LD_VAR 0 1
26926: PPUSH
26927: CALL_OW 257
26931: PUSH
26932: LD_INT 9
26934: NONEQUAL
26935: OR
26936: IFFALSE 26940
// exit ;
26938: GO 27513
// side := GetSide ( unit ) ;
26940: LD_ADDR_VAR 0 9
26944: PUSH
26945: LD_VAR 0 1
26949: PPUSH
26950: CALL_OW 255
26954: ST_TO_ADDR
// tech_space := tech_spacanom ;
26955: LD_ADDR_VAR 0 12
26959: PUSH
26960: LD_INT 29
26962: ST_TO_ADDR
// tech_time := tech_taurad ;
26963: LD_ADDR_VAR 0 13
26967: PUSH
26968: LD_INT 28
26970: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26971: LD_ADDR_VAR 0 11
26975: PUSH
26976: LD_VAR 0 1
26980: PPUSH
26981: CALL_OW 310
26985: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26986: LD_VAR 0 11
26990: PPUSH
26991: CALL_OW 247
26995: PUSH
26996: LD_INT 2
26998: EQUAL
26999: IFFALSE 27003
// exit ;
27001: GO 27513
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27003: LD_ADDR_VAR 0 8
27007: PUSH
27008: LD_INT 81
27010: PUSH
27011: LD_VAR 0 9
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: LD_INT 3
27022: PUSH
27023: LD_INT 21
27025: PUSH
27026: LD_INT 3
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PPUSH
27041: CALL_OW 69
27045: ST_TO_ADDR
// if not tmp then
27046: LD_VAR 0 8
27050: NOT
27051: IFFALSE 27055
// exit ;
27053: GO 27513
// if in_unit then
27055: LD_VAR 0 11
27059: IFFALSE 27083
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27061: LD_ADDR_VAR 0 10
27065: PUSH
27066: LD_VAR 0 8
27070: PPUSH
27071: LD_VAR 0 11
27075: PPUSH
27076: CALL_OW 74
27080: ST_TO_ADDR
27081: GO 27103
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27083: LD_ADDR_VAR 0 10
27087: PUSH
27088: LD_VAR 0 8
27092: PPUSH
27093: LD_VAR 0 1
27097: PPUSH
27098: CALL_OW 74
27102: ST_TO_ADDR
// if not enemy then
27103: LD_VAR 0 10
27107: NOT
27108: IFFALSE 27112
// exit ;
27110: GO 27513
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27112: LD_VAR 0 11
27116: PUSH
27117: LD_VAR 0 11
27121: PPUSH
27122: LD_VAR 0 10
27126: PPUSH
27127: CALL_OW 296
27131: PUSH
27132: LD_INT 13
27134: GREATER
27135: AND
27136: PUSH
27137: LD_VAR 0 1
27141: PPUSH
27142: LD_VAR 0 10
27146: PPUSH
27147: CALL_OW 296
27151: PUSH
27152: LD_INT 12
27154: GREATER
27155: OR
27156: IFFALSE 27160
// exit ;
27158: GO 27513
// missile := [ 1 ] ;
27160: LD_ADDR_VAR 0 14
27164: PUSH
27165: LD_INT 1
27167: PUSH
27168: EMPTY
27169: LIST
27170: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27171: LD_VAR 0 9
27175: PPUSH
27176: LD_VAR 0 12
27180: PPUSH
27181: CALL_OW 325
27185: IFFALSE 27214
// missile := Replace ( missile , missile + 1 , 2 ) ;
27187: LD_ADDR_VAR 0 14
27191: PUSH
27192: LD_VAR 0 14
27196: PPUSH
27197: LD_VAR 0 14
27201: PUSH
27202: LD_INT 1
27204: PLUS
27205: PPUSH
27206: LD_INT 2
27208: PPUSH
27209: CALL_OW 1
27213: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27214: LD_VAR 0 9
27218: PPUSH
27219: LD_VAR 0 13
27223: PPUSH
27224: CALL_OW 325
27228: PUSH
27229: LD_VAR 0 10
27233: PPUSH
27234: CALL_OW 255
27238: PPUSH
27239: LD_VAR 0 13
27243: PPUSH
27244: CALL_OW 325
27248: NOT
27249: AND
27250: IFFALSE 27279
// missile := Replace ( missile , missile + 1 , 3 ) ;
27252: LD_ADDR_VAR 0 14
27256: PUSH
27257: LD_VAR 0 14
27261: PPUSH
27262: LD_VAR 0 14
27266: PUSH
27267: LD_INT 1
27269: PLUS
27270: PPUSH
27271: LD_INT 3
27273: PPUSH
27274: CALL_OW 1
27278: ST_TO_ADDR
// if missile < 2 then
27279: LD_VAR 0 14
27283: PUSH
27284: LD_INT 2
27286: LESS
27287: IFFALSE 27291
// exit ;
27289: GO 27513
// x := GetX ( enemy ) ;
27291: LD_ADDR_VAR 0 4
27295: PUSH
27296: LD_VAR 0 10
27300: PPUSH
27301: CALL_OW 250
27305: ST_TO_ADDR
// y := GetY ( enemy ) ;
27306: LD_ADDR_VAR 0 5
27310: PUSH
27311: LD_VAR 0 10
27315: PPUSH
27316: CALL_OW 251
27320: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27321: LD_ADDR_VAR 0 6
27325: PUSH
27326: LD_VAR 0 4
27330: PUSH
27331: LD_INT 1
27333: NEG
27334: PPUSH
27335: LD_INT 1
27337: PPUSH
27338: CALL_OW 12
27342: PLUS
27343: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27344: LD_ADDR_VAR 0 7
27348: PUSH
27349: LD_VAR 0 5
27353: PUSH
27354: LD_INT 1
27356: NEG
27357: PPUSH
27358: LD_INT 1
27360: PPUSH
27361: CALL_OW 12
27365: PLUS
27366: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27367: LD_VAR 0 6
27371: PPUSH
27372: LD_VAR 0 7
27376: PPUSH
27377: CALL_OW 488
27381: NOT
27382: IFFALSE 27404
// begin _x := x ;
27384: LD_ADDR_VAR 0 6
27388: PUSH
27389: LD_VAR 0 4
27393: ST_TO_ADDR
// _y := y ;
27394: LD_ADDR_VAR 0 7
27398: PUSH
27399: LD_VAR 0 5
27403: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27404: LD_ADDR_VAR 0 3
27408: PUSH
27409: LD_INT 1
27411: PPUSH
27412: LD_VAR 0 14
27416: PPUSH
27417: CALL_OW 12
27421: ST_TO_ADDR
// case i of 1 :
27422: LD_VAR 0 3
27426: PUSH
27427: LD_INT 1
27429: DOUBLE
27430: EQUAL
27431: IFTRUE 27435
27433: GO 27452
27435: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27436: LD_VAR 0 1
27440: PPUSH
27441: LD_VAR 0 10
27445: PPUSH
27446: CALL_OW 115
27450: GO 27513
27452: LD_INT 2
27454: DOUBLE
27455: EQUAL
27456: IFTRUE 27460
27458: GO 27482
27460: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27461: LD_VAR 0 1
27465: PPUSH
27466: LD_VAR 0 6
27470: PPUSH
27471: LD_VAR 0 7
27475: PPUSH
27476: CALL_OW 153
27480: GO 27513
27482: LD_INT 3
27484: DOUBLE
27485: EQUAL
27486: IFTRUE 27490
27488: GO 27512
27490: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27491: LD_VAR 0 1
27495: PPUSH
27496: LD_VAR 0 6
27500: PPUSH
27501: LD_VAR 0 7
27505: PPUSH
27506: CALL_OW 154
27510: GO 27513
27512: POP
// end ;
27513: LD_VAR 0 2
27517: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27518: LD_INT 0
27520: PPUSH
27521: PPUSH
27522: PPUSH
27523: PPUSH
27524: PPUSH
27525: PPUSH
// if not unit or not building then
27526: LD_VAR 0 1
27530: NOT
27531: PUSH
27532: LD_VAR 0 2
27536: NOT
27537: OR
27538: IFFALSE 27542
// exit ;
27540: GO 27700
// x := GetX ( building ) ;
27542: LD_ADDR_VAR 0 5
27546: PUSH
27547: LD_VAR 0 2
27551: PPUSH
27552: CALL_OW 250
27556: ST_TO_ADDR
// y := GetY ( building ) ;
27557: LD_ADDR_VAR 0 6
27561: PUSH
27562: LD_VAR 0 2
27566: PPUSH
27567: CALL_OW 251
27571: ST_TO_ADDR
// for i = 0 to 5 do
27572: LD_ADDR_VAR 0 4
27576: PUSH
27577: DOUBLE
27578: LD_INT 0
27580: DEC
27581: ST_TO_ADDR
27582: LD_INT 5
27584: PUSH
27585: FOR_TO
27586: IFFALSE 27698
// begin _x := ShiftX ( x , i , 3 ) ;
27588: LD_ADDR_VAR 0 7
27592: PUSH
27593: LD_VAR 0 5
27597: PPUSH
27598: LD_VAR 0 4
27602: PPUSH
27603: LD_INT 3
27605: PPUSH
27606: CALL_OW 272
27610: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27611: LD_ADDR_VAR 0 8
27615: PUSH
27616: LD_VAR 0 6
27620: PPUSH
27621: LD_VAR 0 4
27625: PPUSH
27626: LD_INT 3
27628: PPUSH
27629: CALL_OW 273
27633: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27634: LD_VAR 0 7
27638: PPUSH
27639: LD_VAR 0 8
27643: PPUSH
27644: CALL_OW 488
27648: NOT
27649: IFFALSE 27653
// continue ;
27651: GO 27585
// if HexInfo ( _x , _y ) = 0 then
27653: LD_VAR 0 7
27657: PPUSH
27658: LD_VAR 0 8
27662: PPUSH
27663: CALL_OW 428
27667: PUSH
27668: LD_INT 0
27670: EQUAL
27671: IFFALSE 27696
// begin ComMoveXY ( unit , _x , _y ) ;
27673: LD_VAR 0 1
27677: PPUSH
27678: LD_VAR 0 7
27682: PPUSH
27683: LD_VAR 0 8
27687: PPUSH
27688: CALL_OW 111
// exit ;
27692: POP
27693: POP
27694: GO 27700
// end ; end ;
27696: GO 27585
27698: POP
27699: POP
// end ;
27700: LD_VAR 0 3
27704: RET
// export function ScanBase ( side , base_area ) ; begin
27705: LD_INT 0
27707: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27708: LD_ADDR_VAR 0 3
27712: PUSH
27713: LD_VAR 0 2
27717: PPUSH
27718: LD_INT 81
27720: PUSH
27721: LD_VAR 0 1
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PPUSH
27730: CALL_OW 70
27734: ST_TO_ADDR
// end ;
27735: LD_VAR 0 3
27739: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27740: LD_INT 0
27742: PPUSH
27743: PPUSH
27744: PPUSH
27745: PPUSH
// result := false ;
27746: LD_ADDR_VAR 0 2
27750: PUSH
27751: LD_INT 0
27753: ST_TO_ADDR
// side := GetSide ( unit ) ;
27754: LD_ADDR_VAR 0 3
27758: PUSH
27759: LD_VAR 0 1
27763: PPUSH
27764: CALL_OW 255
27768: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27769: LD_ADDR_VAR 0 4
27773: PUSH
27774: LD_VAR 0 1
27778: PPUSH
27779: CALL_OW 248
27783: ST_TO_ADDR
// case nat of 1 :
27784: LD_VAR 0 4
27788: PUSH
27789: LD_INT 1
27791: DOUBLE
27792: EQUAL
27793: IFTRUE 27797
27795: GO 27808
27797: POP
// tech := tech_lassight ; 2 :
27798: LD_ADDR_VAR 0 5
27802: PUSH
27803: LD_INT 12
27805: ST_TO_ADDR
27806: GO 27847
27808: LD_INT 2
27810: DOUBLE
27811: EQUAL
27812: IFTRUE 27816
27814: GO 27827
27816: POP
// tech := tech_mortar ; 3 :
27817: LD_ADDR_VAR 0 5
27821: PUSH
27822: LD_INT 41
27824: ST_TO_ADDR
27825: GO 27847
27827: LD_INT 3
27829: DOUBLE
27830: EQUAL
27831: IFTRUE 27835
27833: GO 27846
27835: POP
// tech := tech_bazooka ; end ;
27836: LD_ADDR_VAR 0 5
27840: PUSH
27841: LD_INT 44
27843: ST_TO_ADDR
27844: GO 27847
27846: POP
// if Researched ( side , tech ) then
27847: LD_VAR 0 3
27851: PPUSH
27852: LD_VAR 0 5
27856: PPUSH
27857: CALL_OW 325
27861: IFFALSE 27888
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27863: LD_ADDR_VAR 0 2
27867: PUSH
27868: LD_INT 5
27870: PUSH
27871: LD_INT 8
27873: PUSH
27874: LD_INT 9
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: LIST
27881: PUSH
27882: LD_VAR 0 4
27886: ARRAY
27887: ST_TO_ADDR
// end ;
27888: LD_VAR 0 2
27892: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27893: LD_INT 0
27895: PPUSH
27896: PPUSH
27897: PPUSH
// if not mines then
27898: LD_VAR 0 2
27902: NOT
27903: IFFALSE 27907
// exit ;
27905: GO 28051
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27907: LD_ADDR_VAR 0 5
27911: PUSH
27912: LD_INT 81
27914: PUSH
27915: LD_VAR 0 1
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: PUSH
27924: LD_INT 3
27926: PUSH
27927: LD_INT 21
27929: PUSH
27930: LD_INT 3
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PPUSH
27945: CALL_OW 69
27949: ST_TO_ADDR
// for i in mines do
27950: LD_ADDR_VAR 0 4
27954: PUSH
27955: LD_VAR 0 2
27959: PUSH
27960: FOR_IN
27961: IFFALSE 28049
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27963: LD_VAR 0 4
27967: PUSH
27968: LD_INT 1
27970: ARRAY
27971: PPUSH
27972: LD_VAR 0 4
27976: PUSH
27977: LD_INT 2
27979: ARRAY
27980: PPUSH
27981: CALL_OW 458
27985: NOT
27986: IFFALSE 27990
// continue ;
27988: GO 27960
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27990: LD_VAR 0 4
27994: PUSH
27995: LD_INT 1
27997: ARRAY
27998: PPUSH
27999: LD_VAR 0 4
28003: PUSH
28004: LD_INT 2
28006: ARRAY
28007: PPUSH
28008: CALL_OW 428
28012: PUSH
28013: LD_VAR 0 5
28017: IN
28018: IFFALSE 28047
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28020: LD_VAR 0 4
28024: PUSH
28025: LD_INT 1
28027: ARRAY
28028: PPUSH
28029: LD_VAR 0 4
28033: PUSH
28034: LD_INT 2
28036: ARRAY
28037: PPUSH
28038: LD_VAR 0 1
28042: PPUSH
28043: CALL_OW 456
// end ;
28047: GO 27960
28049: POP
28050: POP
// end ;
28051: LD_VAR 0 3
28055: RET
// export function Count ( array ) ; begin
28056: LD_INT 0
28058: PPUSH
// result := array + 0 ;
28059: LD_ADDR_VAR 0 2
28063: PUSH
28064: LD_VAR 0 1
28068: PUSH
28069: LD_INT 0
28071: PLUS
28072: ST_TO_ADDR
// end ;
28073: LD_VAR 0 2
28077: RET
// export function IsEmpty ( building ) ; begin
28078: LD_INT 0
28080: PPUSH
// if not building then
28081: LD_VAR 0 1
28085: NOT
28086: IFFALSE 28090
// exit ;
28088: GO 28133
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28090: LD_ADDR_VAR 0 2
28094: PUSH
28095: LD_VAR 0 1
28099: PUSH
28100: LD_INT 22
28102: PUSH
28103: LD_VAR 0 1
28107: PPUSH
28108: CALL_OW 255
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: LD_INT 58
28119: PUSH
28120: EMPTY
28121: LIST
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PPUSH
28127: CALL_OW 69
28131: IN
28132: ST_TO_ADDR
// end ;
28133: LD_VAR 0 2
28137: RET
// export function IsNotFull ( building ) ; var places ; begin
28138: LD_INT 0
28140: PPUSH
28141: PPUSH
// if not building then
28142: LD_VAR 0 1
28146: NOT
28147: IFFALSE 28151
// exit ;
28149: GO 28179
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
28151: LD_ADDR_VAR 0 2
28155: PUSH
28156: LD_VAR 0 1
28160: PPUSH
28161: LD_INT 3
28163: PUSH
28164: LD_INT 62
28166: PUSH
28167: EMPTY
28168: LIST
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PPUSH
28174: CALL_OW 72
28178: ST_TO_ADDR
// end ;
28179: LD_VAR 0 2
28183: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28184: LD_INT 0
28186: PPUSH
28187: PPUSH
28188: PPUSH
28189: PPUSH
// tmp := [ ] ;
28190: LD_ADDR_VAR 0 3
28194: PUSH
28195: EMPTY
28196: ST_TO_ADDR
// list := [ ] ;
28197: LD_ADDR_VAR 0 5
28201: PUSH
28202: EMPTY
28203: ST_TO_ADDR
// for i = 16 to 25 do
28204: LD_ADDR_VAR 0 4
28208: PUSH
28209: DOUBLE
28210: LD_INT 16
28212: DEC
28213: ST_TO_ADDR
28214: LD_INT 25
28216: PUSH
28217: FOR_TO
28218: IFFALSE 28291
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28220: LD_ADDR_VAR 0 3
28224: PUSH
28225: LD_VAR 0 3
28229: PUSH
28230: LD_INT 22
28232: PUSH
28233: LD_VAR 0 1
28237: PPUSH
28238: CALL_OW 255
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 91
28249: PUSH
28250: LD_VAR 0 1
28254: PUSH
28255: LD_INT 6
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 30
28265: PUSH
28266: LD_VAR 0 4
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: LIST
28279: PUSH
28280: EMPTY
28281: LIST
28282: PPUSH
28283: CALL_OW 69
28287: ADD
28288: ST_TO_ADDR
28289: GO 28217
28291: POP
28292: POP
// for i = 1 to tmp do
28293: LD_ADDR_VAR 0 4
28297: PUSH
28298: DOUBLE
28299: LD_INT 1
28301: DEC
28302: ST_TO_ADDR
28303: LD_VAR 0 3
28307: PUSH
28308: FOR_TO
28309: IFFALSE 28397
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28311: LD_ADDR_VAR 0 5
28315: PUSH
28316: LD_VAR 0 5
28320: PUSH
28321: LD_VAR 0 3
28325: PUSH
28326: LD_VAR 0 4
28330: ARRAY
28331: PPUSH
28332: CALL_OW 266
28336: PUSH
28337: LD_VAR 0 3
28341: PUSH
28342: LD_VAR 0 4
28346: ARRAY
28347: PPUSH
28348: CALL_OW 250
28352: PUSH
28353: LD_VAR 0 3
28357: PUSH
28358: LD_VAR 0 4
28362: ARRAY
28363: PPUSH
28364: CALL_OW 251
28368: PUSH
28369: LD_VAR 0 3
28373: PUSH
28374: LD_VAR 0 4
28378: ARRAY
28379: PPUSH
28380: CALL_OW 254
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: PUSH
28391: EMPTY
28392: LIST
28393: ADD
28394: ST_TO_ADDR
28395: GO 28308
28397: POP
28398: POP
// result := list ;
28399: LD_ADDR_VAR 0 2
28403: PUSH
28404: LD_VAR 0 5
28408: ST_TO_ADDR
// end ;
28409: LD_VAR 0 2
28413: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28414: LD_INT 0
28416: PPUSH
28417: PPUSH
28418: PPUSH
28419: PPUSH
28420: PPUSH
28421: PPUSH
28422: PPUSH
// if not factory then
28423: LD_VAR 0 1
28427: NOT
28428: IFFALSE 28432
// exit ;
28430: GO 29025
// if control = control_apeman then
28432: LD_VAR 0 4
28436: PUSH
28437: LD_INT 5
28439: EQUAL
28440: IFFALSE 28549
// begin tmp := UnitsInside ( factory ) ;
28442: LD_ADDR_VAR 0 8
28446: PUSH
28447: LD_VAR 0 1
28451: PPUSH
28452: CALL_OW 313
28456: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28457: LD_VAR 0 8
28461: PPUSH
28462: LD_INT 25
28464: PUSH
28465: LD_INT 12
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PPUSH
28472: CALL_OW 72
28476: NOT
28477: IFFALSE 28487
// control := control_manual ;
28479: LD_ADDR_VAR 0 4
28483: PUSH
28484: LD_INT 1
28486: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28487: LD_ADDR_VAR 0 8
28491: PUSH
28492: LD_VAR 0 1
28496: PPUSH
28497: CALL 28184 0 1
28501: ST_TO_ADDR
// if tmp then
28502: LD_VAR 0 8
28506: IFFALSE 28549
// begin for i in tmp do
28508: LD_ADDR_VAR 0 7
28512: PUSH
28513: LD_VAR 0 8
28517: PUSH
28518: FOR_IN
28519: IFFALSE 28547
// if i [ 1 ] = b_ext_radio then
28521: LD_VAR 0 7
28525: PUSH
28526: LD_INT 1
28528: ARRAY
28529: PUSH
28530: LD_INT 22
28532: EQUAL
28533: IFFALSE 28545
// begin control := control_remote ;
28535: LD_ADDR_VAR 0 4
28539: PUSH
28540: LD_INT 2
28542: ST_TO_ADDR
// break ;
28543: GO 28547
// end ;
28545: GO 28518
28547: POP
28548: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28549: LD_VAR 0 1
28553: PPUSH
28554: LD_VAR 0 2
28558: PPUSH
28559: LD_VAR 0 3
28563: PPUSH
28564: LD_VAR 0 4
28568: PPUSH
28569: LD_VAR 0 5
28573: PPUSH
28574: CALL_OW 448
28578: IFFALSE 28613
// begin result := [ chassis , engine , control , weapon ] ;
28580: LD_ADDR_VAR 0 6
28584: PUSH
28585: LD_VAR 0 2
28589: PUSH
28590: LD_VAR 0 3
28594: PUSH
28595: LD_VAR 0 4
28599: PUSH
28600: LD_VAR 0 5
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: ST_TO_ADDR
// exit ;
28611: GO 29025
// end ; _chassis := AvailableChassisList ( factory ) ;
28613: LD_ADDR_VAR 0 9
28617: PUSH
28618: LD_VAR 0 1
28622: PPUSH
28623: CALL_OW 475
28627: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28628: LD_ADDR_VAR 0 11
28632: PUSH
28633: LD_VAR 0 1
28637: PPUSH
28638: CALL_OW 476
28642: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28643: LD_ADDR_VAR 0 12
28647: PUSH
28648: LD_VAR 0 1
28652: PPUSH
28653: CALL_OW 477
28657: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28658: LD_ADDR_VAR 0 10
28662: PUSH
28663: LD_VAR 0 1
28667: PPUSH
28668: CALL_OW 478
28672: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28673: LD_VAR 0 9
28677: NOT
28678: PUSH
28679: LD_VAR 0 11
28683: NOT
28684: OR
28685: PUSH
28686: LD_VAR 0 12
28690: NOT
28691: OR
28692: PUSH
28693: LD_VAR 0 10
28697: NOT
28698: OR
28699: IFFALSE 28734
// begin result := [ chassis , engine , control , weapon ] ;
28701: LD_ADDR_VAR 0 6
28705: PUSH
28706: LD_VAR 0 2
28710: PUSH
28711: LD_VAR 0 3
28715: PUSH
28716: LD_VAR 0 4
28720: PUSH
28721: LD_VAR 0 5
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: ST_TO_ADDR
// exit ;
28732: GO 29025
// end ; if not chassis in _chassis then
28734: LD_VAR 0 2
28738: PUSH
28739: LD_VAR 0 9
28743: IN
28744: NOT
28745: IFFALSE 28771
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28747: LD_ADDR_VAR 0 2
28751: PUSH
28752: LD_VAR 0 9
28756: PUSH
28757: LD_INT 1
28759: PPUSH
28760: LD_VAR 0 9
28764: PPUSH
28765: CALL_OW 12
28769: ARRAY
28770: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28771: LD_VAR 0 2
28775: PPUSH
28776: LD_VAR 0 3
28780: PPUSH
28781: CALL 29030 0 2
28785: NOT
28786: IFFALSE 28845
// repeat engine := _engine [ 1 ] ;
28788: LD_ADDR_VAR 0 3
28792: PUSH
28793: LD_VAR 0 11
28797: PUSH
28798: LD_INT 1
28800: ARRAY
28801: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28802: LD_ADDR_VAR 0 11
28806: PUSH
28807: LD_VAR 0 11
28811: PPUSH
28812: LD_INT 1
28814: PPUSH
28815: CALL_OW 3
28819: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28820: LD_VAR 0 2
28824: PPUSH
28825: LD_VAR 0 3
28829: PPUSH
28830: CALL 29030 0 2
28834: PUSH
28835: LD_VAR 0 11
28839: PUSH
28840: EMPTY
28841: EQUAL
28842: OR
28843: IFFALSE 28788
// if not control in _control then
28845: LD_VAR 0 4
28849: PUSH
28850: LD_VAR 0 12
28854: IN
28855: NOT
28856: IFFALSE 28882
// control := _control [ rand ( 1 , _control ) ] ;
28858: LD_ADDR_VAR 0 4
28862: PUSH
28863: LD_VAR 0 12
28867: PUSH
28868: LD_INT 1
28870: PPUSH
28871: LD_VAR 0 12
28875: PPUSH
28876: CALL_OW 12
28880: ARRAY
28881: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28882: LD_VAR 0 2
28886: PPUSH
28887: LD_VAR 0 5
28891: PPUSH
28892: CALL 29250 0 2
28896: NOT
28897: IFFALSE 28956
// repeat weapon := _weapon [ 1 ] ;
28899: LD_ADDR_VAR 0 5
28903: PUSH
28904: LD_VAR 0 10
28908: PUSH
28909: LD_INT 1
28911: ARRAY
28912: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28913: LD_ADDR_VAR 0 10
28917: PUSH
28918: LD_VAR 0 10
28922: PPUSH
28923: LD_INT 1
28925: PPUSH
28926: CALL_OW 3
28930: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28931: LD_VAR 0 2
28935: PPUSH
28936: LD_VAR 0 5
28940: PPUSH
28941: CALL 29250 0 2
28945: PUSH
28946: LD_VAR 0 10
28950: PUSH
28951: EMPTY
28952: EQUAL
28953: OR
28954: IFFALSE 28899
// result := [ ] ;
28956: LD_ADDR_VAR 0 6
28960: PUSH
28961: EMPTY
28962: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28963: LD_VAR 0 1
28967: PPUSH
28968: LD_VAR 0 2
28972: PPUSH
28973: LD_VAR 0 3
28977: PPUSH
28978: LD_VAR 0 4
28982: PPUSH
28983: LD_VAR 0 5
28987: PPUSH
28988: CALL_OW 448
28992: IFFALSE 29025
// result := [ chassis , engine , control , weapon ] ;
28994: LD_ADDR_VAR 0 6
28998: PUSH
28999: LD_VAR 0 2
29003: PUSH
29004: LD_VAR 0 3
29008: PUSH
29009: LD_VAR 0 4
29013: PUSH
29014: LD_VAR 0 5
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: ST_TO_ADDR
// end ;
29025: LD_VAR 0 6
29029: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29030: LD_INT 0
29032: PPUSH
// if not chassis or not engine then
29033: LD_VAR 0 1
29037: NOT
29038: PUSH
29039: LD_VAR 0 2
29043: NOT
29044: OR
29045: IFFALSE 29049
// exit ;
29047: GO 29245
// case engine of engine_solar :
29049: LD_VAR 0 2
29053: PUSH
29054: LD_INT 2
29056: DOUBLE
29057: EQUAL
29058: IFTRUE 29062
29060: GO 29100
29062: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29063: LD_ADDR_VAR 0 3
29067: PUSH
29068: LD_INT 11
29070: PUSH
29071: LD_INT 12
29073: PUSH
29074: LD_INT 13
29076: PUSH
29077: LD_INT 14
29079: PUSH
29080: LD_INT 1
29082: PUSH
29083: LD_INT 2
29085: PUSH
29086: LD_INT 3
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: ST_TO_ADDR
29098: GO 29229
29100: LD_INT 1
29102: DOUBLE
29103: EQUAL
29104: IFTRUE 29108
29106: GO 29170
29108: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29109: LD_ADDR_VAR 0 3
29113: PUSH
29114: LD_INT 11
29116: PUSH
29117: LD_INT 12
29119: PUSH
29120: LD_INT 13
29122: PUSH
29123: LD_INT 14
29125: PUSH
29126: LD_INT 1
29128: PUSH
29129: LD_INT 2
29131: PUSH
29132: LD_INT 3
29134: PUSH
29135: LD_INT 4
29137: PUSH
29138: LD_INT 5
29140: PUSH
29141: LD_INT 21
29143: PUSH
29144: LD_INT 23
29146: PUSH
29147: LD_INT 22
29149: PUSH
29150: LD_INT 24
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: ST_TO_ADDR
29168: GO 29229
29170: LD_INT 3
29172: DOUBLE
29173: EQUAL
29174: IFTRUE 29178
29176: GO 29228
29178: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29179: LD_ADDR_VAR 0 3
29183: PUSH
29184: LD_INT 13
29186: PUSH
29187: LD_INT 14
29189: PUSH
29190: LD_INT 2
29192: PUSH
29193: LD_INT 3
29195: PUSH
29196: LD_INT 4
29198: PUSH
29199: LD_INT 5
29201: PUSH
29202: LD_INT 21
29204: PUSH
29205: LD_INT 22
29207: PUSH
29208: LD_INT 23
29210: PUSH
29211: LD_INT 24
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: ST_TO_ADDR
29226: GO 29229
29228: POP
// result := ( chassis in result ) ;
29229: LD_ADDR_VAR 0 3
29233: PUSH
29234: LD_VAR 0 1
29238: PUSH
29239: LD_VAR 0 3
29243: IN
29244: ST_TO_ADDR
// end ;
29245: LD_VAR 0 3
29249: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29250: LD_INT 0
29252: PPUSH
// if not chassis or not weapon then
29253: LD_VAR 0 1
29257: NOT
29258: PUSH
29259: LD_VAR 0 2
29263: NOT
29264: OR
29265: IFFALSE 29269
// exit ;
29267: GO 30329
// case weapon of us_machine_gun :
29269: LD_VAR 0 2
29273: PUSH
29274: LD_INT 2
29276: DOUBLE
29277: EQUAL
29278: IFTRUE 29282
29280: GO 29312
29282: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29283: LD_ADDR_VAR 0 3
29287: PUSH
29288: LD_INT 1
29290: PUSH
29291: LD_INT 2
29293: PUSH
29294: LD_INT 3
29296: PUSH
29297: LD_INT 4
29299: PUSH
29300: LD_INT 5
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: ST_TO_ADDR
29310: GO 30313
29312: LD_INT 3
29314: DOUBLE
29315: EQUAL
29316: IFTRUE 29320
29318: GO 29350
29320: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29321: LD_ADDR_VAR 0 3
29325: PUSH
29326: LD_INT 1
29328: PUSH
29329: LD_INT 2
29331: PUSH
29332: LD_INT 3
29334: PUSH
29335: LD_INT 4
29337: PUSH
29338: LD_INT 5
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: ST_TO_ADDR
29348: GO 30313
29350: LD_INT 11
29352: DOUBLE
29353: EQUAL
29354: IFTRUE 29358
29356: GO 29388
29358: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29359: LD_ADDR_VAR 0 3
29363: PUSH
29364: LD_INT 1
29366: PUSH
29367: LD_INT 2
29369: PUSH
29370: LD_INT 3
29372: PUSH
29373: LD_INT 4
29375: PUSH
29376: LD_INT 5
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: ST_TO_ADDR
29386: GO 30313
29388: LD_INT 4
29390: DOUBLE
29391: EQUAL
29392: IFTRUE 29396
29394: GO 29422
29396: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29397: LD_ADDR_VAR 0 3
29401: PUSH
29402: LD_INT 2
29404: PUSH
29405: LD_INT 3
29407: PUSH
29408: LD_INT 4
29410: PUSH
29411: LD_INT 5
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: ST_TO_ADDR
29420: GO 30313
29422: LD_INT 5
29424: DOUBLE
29425: EQUAL
29426: IFTRUE 29430
29428: GO 29456
29430: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29431: LD_ADDR_VAR 0 3
29435: PUSH
29436: LD_INT 2
29438: PUSH
29439: LD_INT 3
29441: PUSH
29442: LD_INT 4
29444: PUSH
29445: LD_INT 5
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: ST_TO_ADDR
29454: GO 30313
29456: LD_INT 9
29458: DOUBLE
29459: EQUAL
29460: IFTRUE 29464
29462: GO 29490
29464: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29465: LD_ADDR_VAR 0 3
29469: PUSH
29470: LD_INT 2
29472: PUSH
29473: LD_INT 3
29475: PUSH
29476: LD_INT 4
29478: PUSH
29479: LD_INT 5
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: ST_TO_ADDR
29488: GO 30313
29490: LD_INT 7
29492: DOUBLE
29493: EQUAL
29494: IFTRUE 29498
29496: GO 29524
29498: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29499: LD_ADDR_VAR 0 3
29503: PUSH
29504: LD_INT 2
29506: PUSH
29507: LD_INT 3
29509: PUSH
29510: LD_INT 4
29512: PUSH
29513: LD_INT 5
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: ST_TO_ADDR
29522: GO 30313
29524: LD_INT 12
29526: DOUBLE
29527: EQUAL
29528: IFTRUE 29532
29530: GO 29558
29532: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29533: LD_ADDR_VAR 0 3
29537: PUSH
29538: LD_INT 2
29540: PUSH
29541: LD_INT 3
29543: PUSH
29544: LD_INT 4
29546: PUSH
29547: LD_INT 5
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: ST_TO_ADDR
29556: GO 30313
29558: LD_INT 13
29560: DOUBLE
29561: EQUAL
29562: IFTRUE 29566
29564: GO 29592
29566: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29567: LD_ADDR_VAR 0 3
29571: PUSH
29572: LD_INT 2
29574: PUSH
29575: LD_INT 3
29577: PUSH
29578: LD_INT 4
29580: PUSH
29581: LD_INT 5
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: ST_TO_ADDR
29590: GO 30313
29592: LD_INT 14
29594: DOUBLE
29595: EQUAL
29596: IFTRUE 29600
29598: GO 29618
29600: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29601: LD_ADDR_VAR 0 3
29605: PUSH
29606: LD_INT 4
29608: PUSH
29609: LD_INT 5
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: ST_TO_ADDR
29616: GO 30313
29618: LD_INT 6
29620: DOUBLE
29621: EQUAL
29622: IFTRUE 29626
29624: GO 29644
29626: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29627: LD_ADDR_VAR 0 3
29631: PUSH
29632: LD_INT 4
29634: PUSH
29635: LD_INT 5
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: ST_TO_ADDR
29642: GO 30313
29644: LD_INT 10
29646: DOUBLE
29647: EQUAL
29648: IFTRUE 29652
29650: GO 29670
29652: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29653: LD_ADDR_VAR 0 3
29657: PUSH
29658: LD_INT 4
29660: PUSH
29661: LD_INT 5
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: ST_TO_ADDR
29668: GO 30313
29670: LD_INT 22
29672: DOUBLE
29673: EQUAL
29674: IFTRUE 29678
29676: GO 29704
29678: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29679: LD_ADDR_VAR 0 3
29683: PUSH
29684: LD_INT 11
29686: PUSH
29687: LD_INT 12
29689: PUSH
29690: LD_INT 13
29692: PUSH
29693: LD_INT 14
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: LIST
29700: LIST
29701: ST_TO_ADDR
29702: GO 30313
29704: LD_INT 23
29706: DOUBLE
29707: EQUAL
29708: IFTRUE 29712
29710: GO 29738
29712: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29713: LD_ADDR_VAR 0 3
29717: PUSH
29718: LD_INT 11
29720: PUSH
29721: LD_INT 12
29723: PUSH
29724: LD_INT 13
29726: PUSH
29727: LD_INT 14
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: ST_TO_ADDR
29736: GO 30313
29738: LD_INT 24
29740: DOUBLE
29741: EQUAL
29742: IFTRUE 29746
29744: GO 29772
29746: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29747: LD_ADDR_VAR 0 3
29751: PUSH
29752: LD_INT 11
29754: PUSH
29755: LD_INT 12
29757: PUSH
29758: LD_INT 13
29760: PUSH
29761: LD_INT 14
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: ST_TO_ADDR
29770: GO 30313
29772: LD_INT 30
29774: DOUBLE
29775: EQUAL
29776: IFTRUE 29780
29778: GO 29806
29780: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29781: LD_ADDR_VAR 0 3
29785: PUSH
29786: LD_INT 11
29788: PUSH
29789: LD_INT 12
29791: PUSH
29792: LD_INT 13
29794: PUSH
29795: LD_INT 14
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: ST_TO_ADDR
29804: GO 30313
29806: LD_INT 25
29808: DOUBLE
29809: EQUAL
29810: IFTRUE 29814
29812: GO 29832
29814: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29815: LD_ADDR_VAR 0 3
29819: PUSH
29820: LD_INT 13
29822: PUSH
29823: LD_INT 14
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: ST_TO_ADDR
29830: GO 30313
29832: LD_INT 27
29834: DOUBLE
29835: EQUAL
29836: IFTRUE 29840
29838: GO 29858
29840: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29841: LD_ADDR_VAR 0 3
29845: PUSH
29846: LD_INT 13
29848: PUSH
29849: LD_INT 14
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: ST_TO_ADDR
29856: GO 30313
29858: LD_INT 92
29860: DOUBLE
29861: EQUAL
29862: IFTRUE 29866
29864: GO 29892
29866: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29867: LD_ADDR_VAR 0 3
29871: PUSH
29872: LD_INT 11
29874: PUSH
29875: LD_INT 12
29877: PUSH
29878: LD_INT 13
29880: PUSH
29881: LD_INT 14
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: ST_TO_ADDR
29890: GO 30313
29892: LD_INT 28
29894: DOUBLE
29895: EQUAL
29896: IFTRUE 29900
29898: GO 29918
29900: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29901: LD_ADDR_VAR 0 3
29905: PUSH
29906: LD_INT 13
29908: PUSH
29909: LD_INT 14
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: ST_TO_ADDR
29916: GO 30313
29918: LD_INT 29
29920: DOUBLE
29921: EQUAL
29922: IFTRUE 29926
29924: GO 29944
29926: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29927: LD_ADDR_VAR 0 3
29931: PUSH
29932: LD_INT 13
29934: PUSH
29935: LD_INT 14
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: ST_TO_ADDR
29942: GO 30313
29944: LD_INT 31
29946: DOUBLE
29947: EQUAL
29948: IFTRUE 29952
29950: GO 29970
29952: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29953: LD_ADDR_VAR 0 3
29957: PUSH
29958: LD_INT 13
29960: PUSH
29961: LD_INT 14
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: ST_TO_ADDR
29968: GO 30313
29970: LD_INT 26
29972: DOUBLE
29973: EQUAL
29974: IFTRUE 29978
29976: GO 29996
29978: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29979: LD_ADDR_VAR 0 3
29983: PUSH
29984: LD_INT 13
29986: PUSH
29987: LD_INT 14
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: ST_TO_ADDR
29994: GO 30313
29996: LD_INT 42
29998: DOUBLE
29999: EQUAL
30000: IFTRUE 30004
30002: GO 30030
30004: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30005: LD_ADDR_VAR 0 3
30009: PUSH
30010: LD_INT 21
30012: PUSH
30013: LD_INT 22
30015: PUSH
30016: LD_INT 23
30018: PUSH
30019: LD_INT 24
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: ST_TO_ADDR
30028: GO 30313
30030: LD_INT 43
30032: DOUBLE
30033: EQUAL
30034: IFTRUE 30038
30036: GO 30064
30038: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30039: LD_ADDR_VAR 0 3
30043: PUSH
30044: LD_INT 21
30046: PUSH
30047: LD_INT 22
30049: PUSH
30050: LD_INT 23
30052: PUSH
30053: LD_INT 24
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: ST_TO_ADDR
30062: GO 30313
30064: LD_INT 44
30066: DOUBLE
30067: EQUAL
30068: IFTRUE 30072
30070: GO 30098
30072: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30073: LD_ADDR_VAR 0 3
30077: PUSH
30078: LD_INT 21
30080: PUSH
30081: LD_INT 22
30083: PUSH
30084: LD_INT 23
30086: PUSH
30087: LD_INT 24
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: ST_TO_ADDR
30096: GO 30313
30098: LD_INT 45
30100: DOUBLE
30101: EQUAL
30102: IFTRUE 30106
30104: GO 30132
30106: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30107: LD_ADDR_VAR 0 3
30111: PUSH
30112: LD_INT 21
30114: PUSH
30115: LD_INT 22
30117: PUSH
30118: LD_INT 23
30120: PUSH
30121: LD_INT 24
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: ST_TO_ADDR
30130: GO 30313
30132: LD_INT 49
30134: DOUBLE
30135: EQUAL
30136: IFTRUE 30140
30138: GO 30166
30140: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30141: LD_ADDR_VAR 0 3
30145: PUSH
30146: LD_INT 21
30148: PUSH
30149: LD_INT 22
30151: PUSH
30152: LD_INT 23
30154: PUSH
30155: LD_INT 24
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: ST_TO_ADDR
30164: GO 30313
30166: LD_INT 51
30168: DOUBLE
30169: EQUAL
30170: IFTRUE 30174
30172: GO 30200
30174: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30175: LD_ADDR_VAR 0 3
30179: PUSH
30180: LD_INT 21
30182: PUSH
30183: LD_INT 22
30185: PUSH
30186: LD_INT 23
30188: PUSH
30189: LD_INT 24
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: ST_TO_ADDR
30198: GO 30313
30200: LD_INT 52
30202: DOUBLE
30203: EQUAL
30204: IFTRUE 30208
30206: GO 30234
30208: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30209: LD_ADDR_VAR 0 3
30213: PUSH
30214: LD_INT 21
30216: PUSH
30217: LD_INT 22
30219: PUSH
30220: LD_INT 23
30222: PUSH
30223: LD_INT 24
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: ST_TO_ADDR
30232: GO 30313
30234: LD_INT 53
30236: DOUBLE
30237: EQUAL
30238: IFTRUE 30242
30240: GO 30260
30242: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30243: LD_ADDR_VAR 0 3
30247: PUSH
30248: LD_INT 23
30250: PUSH
30251: LD_INT 24
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: ST_TO_ADDR
30258: GO 30313
30260: LD_INT 46
30262: DOUBLE
30263: EQUAL
30264: IFTRUE 30268
30266: GO 30286
30268: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30269: LD_ADDR_VAR 0 3
30273: PUSH
30274: LD_INT 23
30276: PUSH
30277: LD_INT 24
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: ST_TO_ADDR
30284: GO 30313
30286: LD_INT 47
30288: DOUBLE
30289: EQUAL
30290: IFTRUE 30294
30292: GO 30312
30294: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30295: LD_ADDR_VAR 0 3
30299: PUSH
30300: LD_INT 23
30302: PUSH
30303: LD_INT 24
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: ST_TO_ADDR
30310: GO 30313
30312: POP
// result := ( chassis in result ) ;
30313: LD_ADDR_VAR 0 3
30317: PUSH
30318: LD_VAR 0 1
30322: PUSH
30323: LD_VAR 0 3
30327: IN
30328: ST_TO_ADDR
// end ;
30329: LD_VAR 0 3
30333: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30334: LD_INT 0
30336: PPUSH
30337: PPUSH
30338: PPUSH
30339: PPUSH
30340: PPUSH
30341: PPUSH
30342: PPUSH
// result := array ;
30343: LD_ADDR_VAR 0 5
30347: PUSH
30348: LD_VAR 0 1
30352: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30353: LD_VAR 0 1
30357: NOT
30358: PUSH
30359: LD_VAR 0 2
30363: NOT
30364: OR
30365: PUSH
30366: LD_VAR 0 3
30370: NOT
30371: OR
30372: PUSH
30373: LD_VAR 0 2
30377: PUSH
30378: LD_VAR 0 1
30382: GREATER
30383: OR
30384: PUSH
30385: LD_VAR 0 3
30389: PUSH
30390: LD_VAR 0 1
30394: GREATER
30395: OR
30396: IFFALSE 30400
// exit ;
30398: GO 30696
// if direction then
30400: LD_VAR 0 4
30404: IFFALSE 30468
// begin d := 1 ;
30406: LD_ADDR_VAR 0 9
30410: PUSH
30411: LD_INT 1
30413: ST_TO_ADDR
// if i_from > i_to then
30414: LD_VAR 0 2
30418: PUSH
30419: LD_VAR 0 3
30423: GREATER
30424: IFFALSE 30450
// length := ( array - i_from ) + i_to else
30426: LD_ADDR_VAR 0 11
30430: PUSH
30431: LD_VAR 0 1
30435: PUSH
30436: LD_VAR 0 2
30440: MINUS
30441: PUSH
30442: LD_VAR 0 3
30446: PLUS
30447: ST_TO_ADDR
30448: GO 30466
// length := i_to - i_from ;
30450: LD_ADDR_VAR 0 11
30454: PUSH
30455: LD_VAR 0 3
30459: PUSH
30460: LD_VAR 0 2
30464: MINUS
30465: ST_TO_ADDR
// end else
30466: GO 30529
// begin d := - 1 ;
30468: LD_ADDR_VAR 0 9
30472: PUSH
30473: LD_INT 1
30475: NEG
30476: ST_TO_ADDR
// if i_from > i_to then
30477: LD_VAR 0 2
30481: PUSH
30482: LD_VAR 0 3
30486: GREATER
30487: IFFALSE 30507
// length := i_from - i_to else
30489: LD_ADDR_VAR 0 11
30493: PUSH
30494: LD_VAR 0 2
30498: PUSH
30499: LD_VAR 0 3
30503: MINUS
30504: ST_TO_ADDR
30505: GO 30529
// length := ( array - i_to ) + i_from ;
30507: LD_ADDR_VAR 0 11
30511: PUSH
30512: LD_VAR 0 1
30516: PUSH
30517: LD_VAR 0 3
30521: MINUS
30522: PUSH
30523: LD_VAR 0 2
30527: PLUS
30528: ST_TO_ADDR
// end ; if not length then
30529: LD_VAR 0 11
30533: NOT
30534: IFFALSE 30538
// exit ;
30536: GO 30696
// tmp := array ;
30538: LD_ADDR_VAR 0 10
30542: PUSH
30543: LD_VAR 0 1
30547: ST_TO_ADDR
// for i = 1 to length do
30548: LD_ADDR_VAR 0 6
30552: PUSH
30553: DOUBLE
30554: LD_INT 1
30556: DEC
30557: ST_TO_ADDR
30558: LD_VAR 0 11
30562: PUSH
30563: FOR_TO
30564: IFFALSE 30684
// begin for j = 1 to array do
30566: LD_ADDR_VAR 0 7
30570: PUSH
30571: DOUBLE
30572: LD_INT 1
30574: DEC
30575: ST_TO_ADDR
30576: LD_VAR 0 1
30580: PUSH
30581: FOR_TO
30582: IFFALSE 30670
// begin k := j + d ;
30584: LD_ADDR_VAR 0 8
30588: PUSH
30589: LD_VAR 0 7
30593: PUSH
30594: LD_VAR 0 9
30598: PLUS
30599: ST_TO_ADDR
// if k > array then
30600: LD_VAR 0 8
30604: PUSH
30605: LD_VAR 0 1
30609: GREATER
30610: IFFALSE 30620
// k := 1 ;
30612: LD_ADDR_VAR 0 8
30616: PUSH
30617: LD_INT 1
30619: ST_TO_ADDR
// if not k then
30620: LD_VAR 0 8
30624: NOT
30625: IFFALSE 30637
// k := array ;
30627: LD_ADDR_VAR 0 8
30631: PUSH
30632: LD_VAR 0 1
30636: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30637: LD_ADDR_VAR 0 10
30641: PUSH
30642: LD_VAR 0 10
30646: PPUSH
30647: LD_VAR 0 8
30651: PPUSH
30652: LD_VAR 0 1
30656: PUSH
30657: LD_VAR 0 7
30661: ARRAY
30662: PPUSH
30663: CALL_OW 1
30667: ST_TO_ADDR
// end ;
30668: GO 30581
30670: POP
30671: POP
// array := tmp ;
30672: LD_ADDR_VAR 0 1
30676: PUSH
30677: LD_VAR 0 10
30681: ST_TO_ADDR
// end ;
30682: GO 30563
30684: POP
30685: POP
// result := array ;
30686: LD_ADDR_VAR 0 5
30690: PUSH
30691: LD_VAR 0 1
30695: ST_TO_ADDR
// end ;
30696: LD_VAR 0 5
30700: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30701: LD_INT 0
30703: PPUSH
30704: PPUSH
// result := 0 ;
30705: LD_ADDR_VAR 0 3
30709: PUSH
30710: LD_INT 0
30712: ST_TO_ADDR
// if not array or not value in array then
30713: LD_VAR 0 1
30717: NOT
30718: PUSH
30719: LD_VAR 0 2
30723: PUSH
30724: LD_VAR 0 1
30728: IN
30729: NOT
30730: OR
30731: IFFALSE 30735
// exit ;
30733: GO 30789
// for i = 1 to array do
30735: LD_ADDR_VAR 0 4
30739: PUSH
30740: DOUBLE
30741: LD_INT 1
30743: DEC
30744: ST_TO_ADDR
30745: LD_VAR 0 1
30749: PUSH
30750: FOR_TO
30751: IFFALSE 30787
// if value = array [ i ] then
30753: LD_VAR 0 2
30757: PUSH
30758: LD_VAR 0 1
30762: PUSH
30763: LD_VAR 0 4
30767: ARRAY
30768: EQUAL
30769: IFFALSE 30785
// begin result := i ;
30771: LD_ADDR_VAR 0 3
30775: PUSH
30776: LD_VAR 0 4
30780: ST_TO_ADDR
// exit ;
30781: POP
30782: POP
30783: GO 30789
// end ;
30785: GO 30750
30787: POP
30788: POP
// end ;
30789: LD_VAR 0 3
30793: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30794: LD_INT 0
30796: PPUSH
// vc_chassis := chassis ;
30797: LD_ADDR_OWVAR 37
30801: PUSH
30802: LD_VAR 0 1
30806: ST_TO_ADDR
// vc_engine := engine ;
30807: LD_ADDR_OWVAR 39
30811: PUSH
30812: LD_VAR 0 2
30816: ST_TO_ADDR
// vc_control := control ;
30817: LD_ADDR_OWVAR 38
30821: PUSH
30822: LD_VAR 0 3
30826: ST_TO_ADDR
// vc_weapon := weapon ;
30827: LD_ADDR_OWVAR 40
30831: PUSH
30832: LD_VAR 0 4
30836: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30837: LD_ADDR_OWVAR 41
30841: PUSH
30842: LD_VAR 0 5
30846: ST_TO_ADDR
// end ;
30847: LD_VAR 0 6
30851: RET
// export function WantPlant ( unit ) ; var task ; begin
30852: LD_INT 0
30854: PPUSH
30855: PPUSH
// result := false ;
30856: LD_ADDR_VAR 0 2
30860: PUSH
30861: LD_INT 0
30863: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30864: LD_ADDR_VAR 0 3
30868: PUSH
30869: LD_VAR 0 1
30873: PPUSH
30874: CALL_OW 437
30878: ST_TO_ADDR
// if task then
30879: LD_VAR 0 3
30883: IFFALSE 30911
// if task [ 1 ] [ 1 ] = p then
30885: LD_VAR 0 3
30889: PUSH
30890: LD_INT 1
30892: ARRAY
30893: PUSH
30894: LD_INT 1
30896: ARRAY
30897: PUSH
30898: LD_STRING p
30900: EQUAL
30901: IFFALSE 30911
// result := true ;
30903: LD_ADDR_VAR 0 2
30907: PUSH
30908: LD_INT 1
30910: ST_TO_ADDR
// end ;
30911: LD_VAR 0 2
30915: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30916: LD_INT 0
30918: PPUSH
30919: PPUSH
30920: PPUSH
30921: PPUSH
// if pos < 1 then
30922: LD_VAR 0 2
30926: PUSH
30927: LD_INT 1
30929: LESS
30930: IFFALSE 30934
// exit ;
30932: GO 31237
// if pos = 1 then
30934: LD_VAR 0 2
30938: PUSH
30939: LD_INT 1
30941: EQUAL
30942: IFFALSE 30975
// result := Replace ( arr , pos [ 1 ] , value ) else
30944: LD_ADDR_VAR 0 4
30948: PUSH
30949: LD_VAR 0 1
30953: PPUSH
30954: LD_VAR 0 2
30958: PUSH
30959: LD_INT 1
30961: ARRAY
30962: PPUSH
30963: LD_VAR 0 3
30967: PPUSH
30968: CALL_OW 1
30972: ST_TO_ADDR
30973: GO 31237
// begin tmp := arr ;
30975: LD_ADDR_VAR 0 6
30979: PUSH
30980: LD_VAR 0 1
30984: ST_TO_ADDR
// s_arr := [ tmp ] ;
30985: LD_ADDR_VAR 0 7
30989: PUSH
30990: LD_VAR 0 6
30994: PUSH
30995: EMPTY
30996: LIST
30997: ST_TO_ADDR
// for i = 1 to pos - 1 do
30998: LD_ADDR_VAR 0 5
31002: PUSH
31003: DOUBLE
31004: LD_INT 1
31006: DEC
31007: ST_TO_ADDR
31008: LD_VAR 0 2
31012: PUSH
31013: LD_INT 1
31015: MINUS
31016: PUSH
31017: FOR_TO
31018: IFFALSE 31063
// begin tmp := tmp [ pos [ i ] ] ;
31020: LD_ADDR_VAR 0 6
31024: PUSH
31025: LD_VAR 0 6
31029: PUSH
31030: LD_VAR 0 2
31034: PUSH
31035: LD_VAR 0 5
31039: ARRAY
31040: ARRAY
31041: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31042: LD_ADDR_VAR 0 7
31046: PUSH
31047: LD_VAR 0 7
31051: PUSH
31052: LD_VAR 0 6
31056: PUSH
31057: EMPTY
31058: LIST
31059: ADD
31060: ST_TO_ADDR
// end ;
31061: GO 31017
31063: POP
31064: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31065: LD_ADDR_VAR 0 6
31069: PUSH
31070: LD_VAR 0 6
31074: PPUSH
31075: LD_VAR 0 2
31079: PUSH
31080: LD_VAR 0 2
31084: ARRAY
31085: PPUSH
31086: LD_VAR 0 3
31090: PPUSH
31091: CALL_OW 1
31095: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31096: LD_ADDR_VAR 0 7
31100: PUSH
31101: LD_VAR 0 7
31105: PPUSH
31106: LD_VAR 0 7
31110: PPUSH
31111: LD_VAR 0 6
31115: PPUSH
31116: CALL_OW 1
31120: ST_TO_ADDR
// for i = s_arr downto 2 do
31121: LD_ADDR_VAR 0 5
31125: PUSH
31126: DOUBLE
31127: LD_VAR 0 7
31131: INC
31132: ST_TO_ADDR
31133: LD_INT 2
31135: PUSH
31136: FOR_DOWNTO
31137: IFFALSE 31221
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31139: LD_ADDR_VAR 0 6
31143: PUSH
31144: LD_VAR 0 7
31148: PUSH
31149: LD_VAR 0 5
31153: PUSH
31154: LD_INT 1
31156: MINUS
31157: ARRAY
31158: PPUSH
31159: LD_VAR 0 2
31163: PUSH
31164: LD_VAR 0 5
31168: PUSH
31169: LD_INT 1
31171: MINUS
31172: ARRAY
31173: PPUSH
31174: LD_VAR 0 7
31178: PUSH
31179: LD_VAR 0 5
31183: ARRAY
31184: PPUSH
31185: CALL_OW 1
31189: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31190: LD_ADDR_VAR 0 7
31194: PUSH
31195: LD_VAR 0 7
31199: PPUSH
31200: LD_VAR 0 5
31204: PUSH
31205: LD_INT 1
31207: MINUS
31208: PPUSH
31209: LD_VAR 0 6
31213: PPUSH
31214: CALL_OW 1
31218: ST_TO_ADDR
// end ;
31219: GO 31136
31221: POP
31222: POP
// result := s_arr [ 1 ] ;
31223: LD_ADDR_VAR 0 4
31227: PUSH
31228: LD_VAR 0 7
31232: PUSH
31233: LD_INT 1
31235: ARRAY
31236: ST_TO_ADDR
// end ; end ;
31237: LD_VAR 0 4
31241: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31242: LD_INT 0
31244: PPUSH
31245: PPUSH
// if not list then
31246: LD_VAR 0 1
31250: NOT
31251: IFFALSE 31255
// exit ;
31253: GO 31346
// i := list [ pos1 ] ;
31255: LD_ADDR_VAR 0 5
31259: PUSH
31260: LD_VAR 0 1
31264: PUSH
31265: LD_VAR 0 2
31269: ARRAY
31270: ST_TO_ADDR
// if not i then
31271: LD_VAR 0 5
31275: NOT
31276: IFFALSE 31280
// exit ;
31278: GO 31346
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31280: LD_ADDR_VAR 0 1
31284: PUSH
31285: LD_VAR 0 1
31289: PPUSH
31290: LD_VAR 0 2
31294: PPUSH
31295: LD_VAR 0 1
31299: PUSH
31300: LD_VAR 0 3
31304: ARRAY
31305: PPUSH
31306: CALL_OW 1
31310: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31311: LD_ADDR_VAR 0 1
31315: PUSH
31316: LD_VAR 0 1
31320: PPUSH
31321: LD_VAR 0 3
31325: PPUSH
31326: LD_VAR 0 5
31330: PPUSH
31331: CALL_OW 1
31335: ST_TO_ADDR
// result := list ;
31336: LD_ADDR_VAR 0 4
31340: PUSH
31341: LD_VAR 0 1
31345: ST_TO_ADDR
// end ;
31346: LD_VAR 0 4
31350: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31351: LD_INT 0
31353: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31354: LD_ADDR_VAR 0 5
31358: PUSH
31359: LD_VAR 0 1
31363: PPUSH
31364: CALL_OW 250
31368: PPUSH
31369: LD_VAR 0 1
31373: PPUSH
31374: CALL_OW 251
31378: PPUSH
31379: LD_VAR 0 2
31383: PPUSH
31384: LD_VAR 0 3
31388: PPUSH
31389: LD_VAR 0 4
31393: PPUSH
31394: CALL 31404 0 5
31398: ST_TO_ADDR
// end ;
31399: LD_VAR 0 5
31403: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31404: LD_INT 0
31406: PPUSH
31407: PPUSH
31408: PPUSH
31409: PPUSH
// if not list then
31410: LD_VAR 0 3
31414: NOT
31415: IFFALSE 31419
// exit ;
31417: GO 31807
// result := [ ] ;
31419: LD_ADDR_VAR 0 6
31423: PUSH
31424: EMPTY
31425: ST_TO_ADDR
// for i in list do
31426: LD_ADDR_VAR 0 7
31430: PUSH
31431: LD_VAR 0 3
31435: PUSH
31436: FOR_IN
31437: IFFALSE 31639
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31439: LD_ADDR_VAR 0 9
31443: PUSH
31444: LD_VAR 0 7
31448: PPUSH
31449: LD_VAR 0 1
31453: PPUSH
31454: LD_VAR 0 2
31458: PPUSH
31459: CALL_OW 297
31463: ST_TO_ADDR
// if not result then
31464: LD_VAR 0 6
31468: NOT
31469: IFFALSE 31495
// result := [ [ i , tmp ] ] else
31471: LD_ADDR_VAR 0 6
31475: PUSH
31476: LD_VAR 0 7
31480: PUSH
31481: LD_VAR 0 9
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: EMPTY
31491: LIST
31492: ST_TO_ADDR
31493: GO 31637
// begin if result [ result ] [ 2 ] < tmp then
31495: LD_VAR 0 6
31499: PUSH
31500: LD_VAR 0 6
31504: ARRAY
31505: PUSH
31506: LD_INT 2
31508: ARRAY
31509: PUSH
31510: LD_VAR 0 9
31514: LESS
31515: IFFALSE 31557
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31517: LD_ADDR_VAR 0 6
31521: PUSH
31522: LD_VAR 0 6
31526: PPUSH
31527: LD_VAR 0 6
31531: PUSH
31532: LD_INT 1
31534: PLUS
31535: PPUSH
31536: LD_VAR 0 7
31540: PUSH
31541: LD_VAR 0 9
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PPUSH
31550: CALL_OW 2
31554: ST_TO_ADDR
31555: GO 31637
// for j = 1 to result do
31557: LD_ADDR_VAR 0 8
31561: PUSH
31562: DOUBLE
31563: LD_INT 1
31565: DEC
31566: ST_TO_ADDR
31567: LD_VAR 0 6
31571: PUSH
31572: FOR_TO
31573: IFFALSE 31635
// begin if tmp < result [ j ] [ 2 ] then
31575: LD_VAR 0 9
31579: PUSH
31580: LD_VAR 0 6
31584: PUSH
31585: LD_VAR 0 8
31589: ARRAY
31590: PUSH
31591: LD_INT 2
31593: ARRAY
31594: LESS
31595: IFFALSE 31633
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31597: LD_ADDR_VAR 0 6
31601: PUSH
31602: LD_VAR 0 6
31606: PPUSH
31607: LD_VAR 0 8
31611: PPUSH
31612: LD_VAR 0 7
31616: PUSH
31617: LD_VAR 0 9
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PPUSH
31626: CALL_OW 2
31630: ST_TO_ADDR
// break ;
31631: GO 31635
// end ; end ;
31633: GO 31572
31635: POP
31636: POP
// end ; end ;
31637: GO 31436
31639: POP
31640: POP
// if result and not asc then
31641: LD_VAR 0 6
31645: PUSH
31646: LD_VAR 0 4
31650: NOT
31651: AND
31652: IFFALSE 31727
// begin tmp := result ;
31654: LD_ADDR_VAR 0 9
31658: PUSH
31659: LD_VAR 0 6
31663: ST_TO_ADDR
// for i = tmp downto 1 do
31664: LD_ADDR_VAR 0 7
31668: PUSH
31669: DOUBLE
31670: LD_VAR 0 9
31674: INC
31675: ST_TO_ADDR
31676: LD_INT 1
31678: PUSH
31679: FOR_DOWNTO
31680: IFFALSE 31725
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31682: LD_ADDR_VAR 0 6
31686: PUSH
31687: LD_VAR 0 6
31691: PPUSH
31692: LD_VAR 0 9
31696: PUSH
31697: LD_VAR 0 7
31701: MINUS
31702: PUSH
31703: LD_INT 1
31705: PLUS
31706: PPUSH
31707: LD_VAR 0 9
31711: PUSH
31712: LD_VAR 0 7
31716: ARRAY
31717: PPUSH
31718: CALL_OW 1
31722: ST_TO_ADDR
31723: GO 31679
31725: POP
31726: POP
// end ; tmp := [ ] ;
31727: LD_ADDR_VAR 0 9
31731: PUSH
31732: EMPTY
31733: ST_TO_ADDR
// if mode then
31734: LD_VAR 0 5
31738: IFFALSE 31807
// begin for i = 1 to result do
31740: LD_ADDR_VAR 0 7
31744: PUSH
31745: DOUBLE
31746: LD_INT 1
31748: DEC
31749: ST_TO_ADDR
31750: LD_VAR 0 6
31754: PUSH
31755: FOR_TO
31756: IFFALSE 31795
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31758: LD_ADDR_VAR 0 9
31762: PUSH
31763: LD_VAR 0 9
31767: PPUSH
31768: LD_VAR 0 7
31772: PPUSH
31773: LD_VAR 0 6
31777: PUSH
31778: LD_VAR 0 7
31782: ARRAY
31783: PUSH
31784: LD_INT 1
31786: ARRAY
31787: PPUSH
31788: CALL_OW 1
31792: ST_TO_ADDR
31793: GO 31755
31795: POP
31796: POP
// result := tmp ;
31797: LD_ADDR_VAR 0 6
31801: PUSH
31802: LD_VAR 0 9
31806: ST_TO_ADDR
// end ; end ;
31807: LD_VAR 0 6
31811: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31812: LD_INT 0
31814: PPUSH
31815: PPUSH
31816: PPUSH
31817: PPUSH
31818: PPUSH
31819: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31820: LD_ADDR_VAR 0 5
31824: PUSH
31825: LD_INT 0
31827: PUSH
31828: LD_INT 0
31830: PUSH
31831: LD_INT 0
31833: PUSH
31834: EMPTY
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: ST_TO_ADDR
// if not x or not y then
31842: LD_VAR 0 2
31846: NOT
31847: PUSH
31848: LD_VAR 0 3
31852: NOT
31853: OR
31854: IFFALSE 31858
// exit ;
31856: GO 33508
// if not range then
31858: LD_VAR 0 4
31862: NOT
31863: IFFALSE 31873
// range := 10 ;
31865: LD_ADDR_VAR 0 4
31869: PUSH
31870: LD_INT 10
31872: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31873: LD_ADDR_VAR 0 8
31877: PUSH
31878: LD_INT 81
31880: PUSH
31881: LD_VAR 0 1
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 92
31892: PUSH
31893: LD_VAR 0 2
31897: PUSH
31898: LD_VAR 0 3
31902: PUSH
31903: LD_VAR 0 4
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 3
31916: PUSH
31917: LD_INT 21
31919: PUSH
31920: LD_INT 3
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: LIST
31935: PPUSH
31936: CALL_OW 69
31940: ST_TO_ADDR
// if not tmp then
31941: LD_VAR 0 8
31945: NOT
31946: IFFALSE 31950
// exit ;
31948: GO 33508
// for i in tmp do
31950: LD_ADDR_VAR 0 6
31954: PUSH
31955: LD_VAR 0 8
31959: PUSH
31960: FOR_IN
31961: IFFALSE 33483
// begin points := [ 0 , 0 , 0 ] ;
31963: LD_ADDR_VAR 0 9
31967: PUSH
31968: LD_INT 0
31970: PUSH
31971: LD_INT 0
31973: PUSH
31974: LD_INT 0
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: LIST
31981: ST_TO_ADDR
// bpoints := 1 ;
31982: LD_ADDR_VAR 0 10
31986: PUSH
31987: LD_INT 1
31989: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31990: LD_VAR 0 6
31994: PPUSH
31995: CALL_OW 247
31999: PUSH
32000: LD_INT 1
32002: DOUBLE
32003: EQUAL
32004: IFTRUE 32008
32006: GO 32586
32008: POP
// begin if GetClass ( i ) = 1 then
32009: LD_VAR 0 6
32013: PPUSH
32014: CALL_OW 257
32018: PUSH
32019: LD_INT 1
32021: EQUAL
32022: IFFALSE 32043
// points := [ 10 , 5 , 3 ] ;
32024: LD_ADDR_VAR 0 9
32028: PUSH
32029: LD_INT 10
32031: PUSH
32032: LD_INT 5
32034: PUSH
32035: LD_INT 3
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: LIST
32042: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32043: LD_VAR 0 6
32047: PPUSH
32048: CALL_OW 257
32052: PUSH
32053: LD_INT 2
32055: PUSH
32056: LD_INT 3
32058: PUSH
32059: LD_INT 4
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: LIST
32066: IN
32067: IFFALSE 32088
// points := [ 3 , 2 , 1 ] ;
32069: LD_ADDR_VAR 0 9
32073: PUSH
32074: LD_INT 3
32076: PUSH
32077: LD_INT 2
32079: PUSH
32080: LD_INT 1
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: LIST
32087: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32088: LD_VAR 0 6
32092: PPUSH
32093: CALL_OW 257
32097: PUSH
32098: LD_INT 5
32100: EQUAL
32101: IFFALSE 32122
// points := [ 130 , 5 , 2 ] ;
32103: LD_ADDR_VAR 0 9
32107: PUSH
32108: LD_INT 130
32110: PUSH
32111: LD_INT 5
32113: PUSH
32114: LD_INT 2
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: LIST
32121: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32122: LD_VAR 0 6
32126: PPUSH
32127: CALL_OW 257
32131: PUSH
32132: LD_INT 8
32134: EQUAL
32135: IFFALSE 32156
// points := [ 35 , 35 , 30 ] ;
32137: LD_ADDR_VAR 0 9
32141: PUSH
32142: LD_INT 35
32144: PUSH
32145: LD_INT 35
32147: PUSH
32148: LD_INT 30
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: LIST
32155: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32156: LD_VAR 0 6
32160: PPUSH
32161: CALL_OW 257
32165: PUSH
32166: LD_INT 9
32168: EQUAL
32169: IFFALSE 32190
// points := [ 20 , 55 , 40 ] ;
32171: LD_ADDR_VAR 0 9
32175: PUSH
32176: LD_INT 20
32178: PUSH
32179: LD_INT 55
32181: PUSH
32182: LD_INT 40
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: LIST
32189: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32190: LD_VAR 0 6
32194: PPUSH
32195: CALL_OW 257
32199: PUSH
32200: LD_INT 12
32202: PUSH
32203: LD_INT 16
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: IN
32210: IFFALSE 32231
// points := [ 5 , 3 , 2 ] ;
32212: LD_ADDR_VAR 0 9
32216: PUSH
32217: LD_INT 5
32219: PUSH
32220: LD_INT 3
32222: PUSH
32223: LD_INT 2
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: LIST
32230: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32231: LD_VAR 0 6
32235: PPUSH
32236: CALL_OW 257
32240: PUSH
32241: LD_INT 17
32243: EQUAL
32244: IFFALSE 32265
// points := [ 100 , 50 , 75 ] ;
32246: LD_ADDR_VAR 0 9
32250: PUSH
32251: LD_INT 100
32253: PUSH
32254: LD_INT 50
32256: PUSH
32257: LD_INT 75
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: LIST
32264: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32265: LD_VAR 0 6
32269: PPUSH
32270: CALL_OW 257
32274: PUSH
32275: LD_INT 15
32277: EQUAL
32278: IFFALSE 32299
// points := [ 10 , 5 , 3 ] ;
32280: LD_ADDR_VAR 0 9
32284: PUSH
32285: LD_INT 10
32287: PUSH
32288: LD_INT 5
32290: PUSH
32291: LD_INT 3
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: LIST
32298: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32299: LD_VAR 0 6
32303: PPUSH
32304: CALL_OW 257
32308: PUSH
32309: LD_INT 14
32311: EQUAL
32312: IFFALSE 32333
// points := [ 10 , 0 , 0 ] ;
32314: LD_ADDR_VAR 0 9
32318: PUSH
32319: LD_INT 10
32321: PUSH
32322: LD_INT 0
32324: PUSH
32325: LD_INT 0
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: LIST
32332: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32333: LD_VAR 0 6
32337: PPUSH
32338: CALL_OW 257
32342: PUSH
32343: LD_INT 11
32345: EQUAL
32346: IFFALSE 32367
// points := [ 30 , 10 , 5 ] ;
32348: LD_ADDR_VAR 0 9
32352: PUSH
32353: LD_INT 30
32355: PUSH
32356: LD_INT 10
32358: PUSH
32359: LD_INT 5
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: LIST
32366: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32367: LD_VAR 0 1
32371: PPUSH
32372: LD_INT 5
32374: PPUSH
32375: CALL_OW 321
32379: PUSH
32380: LD_INT 2
32382: EQUAL
32383: IFFALSE 32400
// bpoints := bpoints * 1.8 ;
32385: LD_ADDR_VAR 0 10
32389: PUSH
32390: LD_VAR 0 10
32394: PUSH
32395: LD_REAL  1.80000000000000E+0000
32398: MUL
32399: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32400: LD_VAR 0 6
32404: PPUSH
32405: CALL_OW 257
32409: PUSH
32410: LD_INT 1
32412: PUSH
32413: LD_INT 2
32415: PUSH
32416: LD_INT 3
32418: PUSH
32419: LD_INT 4
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: IN
32428: PUSH
32429: LD_VAR 0 1
32433: PPUSH
32434: LD_INT 51
32436: PPUSH
32437: CALL_OW 321
32441: PUSH
32442: LD_INT 2
32444: EQUAL
32445: AND
32446: IFFALSE 32463
// bpoints := bpoints * 1.2 ;
32448: LD_ADDR_VAR 0 10
32452: PUSH
32453: LD_VAR 0 10
32457: PUSH
32458: LD_REAL  1.20000000000000E+0000
32461: MUL
32462: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32463: LD_VAR 0 6
32467: PPUSH
32468: CALL_OW 257
32472: PUSH
32473: LD_INT 5
32475: PUSH
32476: LD_INT 7
32478: PUSH
32479: LD_INT 9
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: LIST
32486: IN
32487: PUSH
32488: LD_VAR 0 1
32492: PPUSH
32493: LD_INT 52
32495: PPUSH
32496: CALL_OW 321
32500: PUSH
32501: LD_INT 2
32503: EQUAL
32504: AND
32505: IFFALSE 32522
// bpoints := bpoints * 1.5 ;
32507: LD_ADDR_VAR 0 10
32511: PUSH
32512: LD_VAR 0 10
32516: PUSH
32517: LD_REAL  1.50000000000000E+0000
32520: MUL
32521: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32522: LD_VAR 0 1
32526: PPUSH
32527: LD_INT 66
32529: PPUSH
32530: CALL_OW 321
32534: PUSH
32535: LD_INT 2
32537: EQUAL
32538: IFFALSE 32555
// bpoints := bpoints * 1.1 ;
32540: LD_ADDR_VAR 0 10
32544: PUSH
32545: LD_VAR 0 10
32549: PUSH
32550: LD_REAL  1.10000000000000E+0000
32553: MUL
32554: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32555: LD_ADDR_VAR 0 10
32559: PUSH
32560: LD_VAR 0 10
32564: PUSH
32565: LD_VAR 0 6
32569: PPUSH
32570: LD_INT 1
32572: PPUSH
32573: CALL_OW 259
32577: PUSH
32578: LD_REAL  1.15000000000000E+0000
32581: MUL
32582: MUL
32583: ST_TO_ADDR
// end ; unit_vehicle :
32584: GO 33412
32586: LD_INT 2
32588: DOUBLE
32589: EQUAL
32590: IFTRUE 32594
32592: GO 33400
32594: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32595: LD_VAR 0 6
32599: PPUSH
32600: CALL_OW 264
32604: PUSH
32605: LD_INT 2
32607: PUSH
32608: LD_INT 42
32610: PUSH
32611: LD_INT 24
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: LIST
32618: IN
32619: IFFALSE 32640
// points := [ 25 , 5 , 3 ] ;
32621: LD_ADDR_VAR 0 9
32625: PUSH
32626: LD_INT 25
32628: PUSH
32629: LD_INT 5
32631: PUSH
32632: LD_INT 3
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: LIST
32639: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32640: LD_VAR 0 6
32644: PPUSH
32645: CALL_OW 264
32649: PUSH
32650: LD_INT 4
32652: PUSH
32653: LD_INT 43
32655: PUSH
32656: LD_INT 25
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: LIST
32663: IN
32664: IFFALSE 32685
// points := [ 40 , 15 , 5 ] ;
32666: LD_ADDR_VAR 0 9
32670: PUSH
32671: LD_INT 40
32673: PUSH
32674: LD_INT 15
32676: PUSH
32677: LD_INT 5
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: LIST
32684: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32685: LD_VAR 0 6
32689: PPUSH
32690: CALL_OW 264
32694: PUSH
32695: LD_INT 3
32697: PUSH
32698: LD_INT 23
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: IN
32705: IFFALSE 32726
// points := [ 7 , 25 , 8 ] ;
32707: LD_ADDR_VAR 0 9
32711: PUSH
32712: LD_INT 7
32714: PUSH
32715: LD_INT 25
32717: PUSH
32718: LD_INT 8
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: LIST
32725: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32726: LD_VAR 0 6
32730: PPUSH
32731: CALL_OW 264
32735: PUSH
32736: LD_INT 5
32738: PUSH
32739: LD_INT 27
32741: PUSH
32742: LD_INT 44
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: LIST
32749: IN
32750: IFFALSE 32771
// points := [ 14 , 50 , 16 ] ;
32752: LD_ADDR_VAR 0 9
32756: PUSH
32757: LD_INT 14
32759: PUSH
32760: LD_INT 50
32762: PUSH
32763: LD_INT 16
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: LIST
32770: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32771: LD_VAR 0 6
32775: PPUSH
32776: CALL_OW 264
32780: PUSH
32781: LD_INT 6
32783: PUSH
32784: LD_INT 46
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: IN
32791: IFFALSE 32812
// points := [ 32 , 120 , 70 ] ;
32793: LD_ADDR_VAR 0 9
32797: PUSH
32798: LD_INT 32
32800: PUSH
32801: LD_INT 120
32803: PUSH
32804: LD_INT 70
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: LIST
32811: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32812: LD_VAR 0 6
32816: PPUSH
32817: CALL_OW 264
32821: PUSH
32822: LD_INT 7
32824: PUSH
32825: LD_INT 28
32827: PUSH
32828: LD_INT 45
32830: PUSH
32831: LD_INT 92
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: IN
32840: IFFALSE 32861
// points := [ 35 , 20 , 45 ] ;
32842: LD_ADDR_VAR 0 9
32846: PUSH
32847: LD_INT 35
32849: PUSH
32850: LD_INT 20
32852: PUSH
32853: LD_INT 45
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: LIST
32860: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32861: LD_VAR 0 6
32865: PPUSH
32866: CALL_OW 264
32870: PUSH
32871: LD_INT 47
32873: PUSH
32874: EMPTY
32875: LIST
32876: IN
32877: IFFALSE 32898
// points := [ 67 , 45 , 75 ] ;
32879: LD_ADDR_VAR 0 9
32883: PUSH
32884: LD_INT 67
32886: PUSH
32887: LD_INT 45
32889: PUSH
32890: LD_INT 75
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: LIST
32897: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32898: LD_VAR 0 6
32902: PPUSH
32903: CALL_OW 264
32907: PUSH
32908: LD_INT 26
32910: PUSH
32911: EMPTY
32912: LIST
32913: IN
32914: IFFALSE 32935
// points := [ 120 , 30 , 80 ] ;
32916: LD_ADDR_VAR 0 9
32920: PUSH
32921: LD_INT 120
32923: PUSH
32924: LD_INT 30
32926: PUSH
32927: LD_INT 80
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: LIST
32934: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32935: LD_VAR 0 6
32939: PPUSH
32940: CALL_OW 264
32944: PUSH
32945: LD_INT 22
32947: PUSH
32948: EMPTY
32949: LIST
32950: IN
32951: IFFALSE 32972
// points := [ 40 , 1 , 1 ] ;
32953: LD_ADDR_VAR 0 9
32957: PUSH
32958: LD_INT 40
32960: PUSH
32961: LD_INT 1
32963: PUSH
32964: LD_INT 1
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: LIST
32971: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32972: LD_VAR 0 6
32976: PPUSH
32977: CALL_OW 264
32981: PUSH
32982: LD_INT 29
32984: PUSH
32985: EMPTY
32986: LIST
32987: IN
32988: IFFALSE 33009
// points := [ 70 , 200 , 400 ] ;
32990: LD_ADDR_VAR 0 9
32994: PUSH
32995: LD_INT 70
32997: PUSH
32998: LD_INT 200
33000: PUSH
33001: LD_INT 400
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: LIST
33008: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33009: LD_VAR 0 6
33013: PPUSH
33014: CALL_OW 264
33018: PUSH
33019: LD_INT 14
33021: PUSH
33022: LD_INT 53
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: IN
33029: IFFALSE 33050
// points := [ 40 , 10 , 20 ] ;
33031: LD_ADDR_VAR 0 9
33035: PUSH
33036: LD_INT 40
33038: PUSH
33039: LD_INT 10
33041: PUSH
33042: LD_INT 20
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: LIST
33049: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33050: LD_VAR 0 6
33054: PPUSH
33055: CALL_OW 264
33059: PUSH
33060: LD_INT 9
33062: PUSH
33063: EMPTY
33064: LIST
33065: IN
33066: IFFALSE 33087
// points := [ 5 , 70 , 20 ] ;
33068: LD_ADDR_VAR 0 9
33072: PUSH
33073: LD_INT 5
33075: PUSH
33076: LD_INT 70
33078: PUSH
33079: LD_INT 20
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: LIST
33086: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33087: LD_VAR 0 6
33091: PPUSH
33092: CALL_OW 264
33096: PUSH
33097: LD_INT 10
33099: PUSH
33100: EMPTY
33101: LIST
33102: IN
33103: IFFALSE 33124
// points := [ 35 , 110 , 70 ] ;
33105: LD_ADDR_VAR 0 9
33109: PUSH
33110: LD_INT 35
33112: PUSH
33113: LD_INT 110
33115: PUSH
33116: LD_INT 70
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: LIST
33123: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33124: LD_VAR 0 6
33128: PPUSH
33129: CALL_OW 265
33133: PUSH
33134: LD_INT 25
33136: EQUAL
33137: IFFALSE 33158
// points := [ 80 , 65 , 100 ] ;
33139: LD_ADDR_VAR 0 9
33143: PUSH
33144: LD_INT 80
33146: PUSH
33147: LD_INT 65
33149: PUSH
33150: LD_INT 100
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: LIST
33157: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33158: LD_VAR 0 6
33162: PPUSH
33163: CALL_OW 263
33167: PUSH
33168: LD_INT 1
33170: EQUAL
33171: IFFALSE 33206
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33173: LD_ADDR_VAR 0 10
33177: PUSH
33178: LD_VAR 0 10
33182: PUSH
33183: LD_VAR 0 6
33187: PPUSH
33188: CALL_OW 311
33192: PPUSH
33193: LD_INT 3
33195: PPUSH
33196: CALL_OW 259
33200: PUSH
33201: LD_INT 4
33203: MUL
33204: MUL
33205: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33206: LD_VAR 0 6
33210: PPUSH
33211: CALL_OW 263
33215: PUSH
33216: LD_INT 2
33218: EQUAL
33219: IFFALSE 33270
// begin j := IsControledBy ( i ) ;
33221: LD_ADDR_VAR 0 7
33225: PUSH
33226: LD_VAR 0 6
33230: PPUSH
33231: CALL_OW 312
33235: ST_TO_ADDR
// if j then
33236: LD_VAR 0 7
33240: IFFALSE 33270
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33242: LD_ADDR_VAR 0 10
33246: PUSH
33247: LD_VAR 0 10
33251: PUSH
33252: LD_VAR 0 7
33256: PPUSH
33257: LD_INT 3
33259: PPUSH
33260: CALL_OW 259
33264: PUSH
33265: LD_INT 3
33267: MUL
33268: MUL
33269: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33270: LD_VAR 0 6
33274: PPUSH
33275: CALL_OW 264
33279: PUSH
33280: LD_INT 5
33282: PUSH
33283: LD_INT 6
33285: PUSH
33286: LD_INT 46
33288: PUSH
33289: LD_INT 44
33291: PUSH
33292: LD_INT 47
33294: PUSH
33295: LD_INT 45
33297: PUSH
33298: LD_INT 28
33300: PUSH
33301: LD_INT 7
33303: PUSH
33304: LD_INT 27
33306: PUSH
33307: LD_INT 29
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: IN
33322: PUSH
33323: LD_VAR 0 1
33327: PPUSH
33328: LD_INT 52
33330: PPUSH
33331: CALL_OW 321
33335: PUSH
33336: LD_INT 2
33338: EQUAL
33339: AND
33340: IFFALSE 33357
// bpoints := bpoints * 1.2 ;
33342: LD_ADDR_VAR 0 10
33346: PUSH
33347: LD_VAR 0 10
33351: PUSH
33352: LD_REAL  1.20000000000000E+0000
33355: MUL
33356: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33357: LD_VAR 0 6
33361: PPUSH
33362: CALL_OW 264
33366: PUSH
33367: LD_INT 6
33369: PUSH
33370: LD_INT 46
33372: PUSH
33373: LD_INT 47
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: LIST
33380: IN
33381: IFFALSE 33398
// bpoints := bpoints * 1.2 ;
33383: LD_ADDR_VAR 0 10
33387: PUSH
33388: LD_VAR 0 10
33392: PUSH
33393: LD_REAL  1.20000000000000E+0000
33396: MUL
33397: ST_TO_ADDR
// end ; unit_building :
33398: GO 33412
33400: LD_INT 3
33402: DOUBLE
33403: EQUAL
33404: IFTRUE 33408
33406: GO 33411
33408: POP
// ; end ;
33409: GO 33412
33411: POP
// for j = 1 to 3 do
33412: LD_ADDR_VAR 0 7
33416: PUSH
33417: DOUBLE
33418: LD_INT 1
33420: DEC
33421: ST_TO_ADDR
33422: LD_INT 3
33424: PUSH
33425: FOR_TO
33426: IFFALSE 33479
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33428: LD_ADDR_VAR 0 5
33432: PUSH
33433: LD_VAR 0 5
33437: PPUSH
33438: LD_VAR 0 7
33442: PPUSH
33443: LD_VAR 0 5
33447: PUSH
33448: LD_VAR 0 7
33452: ARRAY
33453: PUSH
33454: LD_VAR 0 9
33458: PUSH
33459: LD_VAR 0 7
33463: ARRAY
33464: PUSH
33465: LD_VAR 0 10
33469: MUL
33470: PLUS
33471: PPUSH
33472: CALL_OW 1
33476: ST_TO_ADDR
33477: GO 33425
33479: POP
33480: POP
// end ;
33481: GO 31960
33483: POP
33484: POP
// result := Replace ( result , 4 , tmp ) ;
33485: LD_ADDR_VAR 0 5
33489: PUSH
33490: LD_VAR 0 5
33494: PPUSH
33495: LD_INT 4
33497: PPUSH
33498: LD_VAR 0 8
33502: PPUSH
33503: CALL_OW 1
33507: ST_TO_ADDR
// end ;
33508: LD_VAR 0 5
33512: RET
// export function DangerAtRange ( unit , range ) ; begin
33513: LD_INT 0
33515: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33516: LD_ADDR_VAR 0 3
33520: PUSH
33521: LD_VAR 0 1
33525: PPUSH
33526: CALL_OW 255
33530: PPUSH
33531: LD_VAR 0 1
33535: PPUSH
33536: CALL_OW 250
33540: PPUSH
33541: LD_VAR 0 1
33545: PPUSH
33546: CALL_OW 251
33550: PPUSH
33551: LD_VAR 0 2
33555: PPUSH
33556: CALL 31812 0 4
33560: ST_TO_ADDR
// end ;
33561: LD_VAR 0 3
33565: RET
// export function DangerInArea ( side , area ) ; begin
33566: LD_INT 0
33568: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33569: LD_ADDR_VAR 0 3
33573: PUSH
33574: LD_VAR 0 2
33578: PPUSH
33579: LD_INT 81
33581: PUSH
33582: LD_VAR 0 1
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PPUSH
33591: CALL_OW 70
33595: ST_TO_ADDR
// end ;
33596: LD_VAR 0 3
33600: RET
// export function IsExtension ( b ) ; begin
33601: LD_INT 0
33603: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33604: LD_ADDR_VAR 0 2
33608: PUSH
33609: LD_VAR 0 1
33613: PUSH
33614: LD_INT 23
33616: PUSH
33617: LD_INT 20
33619: PUSH
33620: LD_INT 22
33622: PUSH
33623: LD_INT 17
33625: PUSH
33626: LD_INT 24
33628: PUSH
33629: LD_INT 21
33631: PUSH
33632: LD_INT 19
33634: PUSH
33635: LD_INT 16
33637: PUSH
33638: LD_INT 25
33640: PUSH
33641: LD_INT 18
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: IN
33656: ST_TO_ADDR
// end ;
33657: LD_VAR 0 2
33661: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33662: LD_INT 0
33664: PPUSH
33665: PPUSH
33666: PPUSH
// result := [ ] ;
33667: LD_ADDR_VAR 0 4
33671: PUSH
33672: EMPTY
33673: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33674: LD_ADDR_VAR 0 5
33678: PUSH
33679: LD_VAR 0 2
33683: PPUSH
33684: LD_INT 21
33686: PUSH
33687: LD_INT 3
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PPUSH
33694: CALL_OW 70
33698: ST_TO_ADDR
// if not tmp then
33699: LD_VAR 0 5
33703: NOT
33704: IFFALSE 33708
// exit ;
33706: GO 33772
// if checkLink then
33708: LD_VAR 0 3
33712: IFFALSE 33762
// begin for i in tmp do
33714: LD_ADDR_VAR 0 6
33718: PUSH
33719: LD_VAR 0 5
33723: PUSH
33724: FOR_IN
33725: IFFALSE 33760
// if GetBase ( i ) <> base then
33727: LD_VAR 0 6
33731: PPUSH
33732: CALL_OW 274
33736: PUSH
33737: LD_VAR 0 1
33741: NONEQUAL
33742: IFFALSE 33758
// ComLinkToBase ( base , i ) ;
33744: LD_VAR 0 1
33748: PPUSH
33749: LD_VAR 0 6
33753: PPUSH
33754: CALL_OW 169
33758: GO 33724
33760: POP
33761: POP
// end ; result := tmp ;
33762: LD_ADDR_VAR 0 4
33766: PUSH
33767: LD_VAR 0 5
33771: ST_TO_ADDR
// end ;
33772: LD_VAR 0 4
33776: RET
// export function ComComplete ( units , b ) ; var i ; begin
33777: LD_INT 0
33779: PPUSH
33780: PPUSH
// if not units then
33781: LD_VAR 0 1
33785: NOT
33786: IFFALSE 33790
// exit ;
33788: GO 33880
// for i in units do
33790: LD_ADDR_VAR 0 4
33794: PUSH
33795: LD_VAR 0 1
33799: PUSH
33800: FOR_IN
33801: IFFALSE 33878
// if BuildingStatus ( b ) = bs_build then
33803: LD_VAR 0 2
33807: PPUSH
33808: CALL_OW 461
33812: PUSH
33813: LD_INT 1
33815: EQUAL
33816: IFFALSE 33876
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33818: LD_VAR 0 4
33822: PPUSH
33823: LD_STRING h
33825: PUSH
33826: LD_VAR 0 2
33830: PPUSH
33831: CALL_OW 250
33835: PUSH
33836: LD_VAR 0 2
33840: PPUSH
33841: CALL_OW 251
33845: PUSH
33846: LD_VAR 0 2
33850: PUSH
33851: LD_INT 0
33853: PUSH
33854: LD_INT 0
33856: PUSH
33857: LD_INT 0
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: PUSH
33869: EMPTY
33870: LIST
33871: PPUSH
33872: CALL_OW 446
33876: GO 33800
33878: POP
33879: POP
// end ;
33880: LD_VAR 0 3
33884: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33885: LD_INT 0
33887: PPUSH
33888: PPUSH
33889: PPUSH
33890: PPUSH
33891: PPUSH
33892: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33893: LD_VAR 0 1
33897: NOT
33898: PUSH
33899: LD_VAR 0 1
33903: PPUSH
33904: CALL_OW 263
33908: PUSH
33909: LD_INT 2
33911: NONEQUAL
33912: OR
33913: IFFALSE 33917
// exit ;
33915: GO 34233
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33917: LD_ADDR_VAR 0 6
33921: PUSH
33922: LD_INT 22
33924: PUSH
33925: LD_VAR 0 1
33929: PPUSH
33930: CALL_OW 255
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 2
33941: PUSH
33942: LD_INT 30
33944: PUSH
33945: LD_INT 36
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 34
33954: PUSH
33955: LD_INT 31
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: LIST
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PPUSH
33971: CALL_OW 69
33975: ST_TO_ADDR
// if not tmp then
33976: LD_VAR 0 6
33980: NOT
33981: IFFALSE 33985
// exit ;
33983: GO 34233
// result := [ ] ;
33985: LD_ADDR_VAR 0 2
33989: PUSH
33990: EMPTY
33991: ST_TO_ADDR
// for i in tmp do
33992: LD_ADDR_VAR 0 3
33996: PUSH
33997: LD_VAR 0 6
34001: PUSH
34002: FOR_IN
34003: IFFALSE 34074
// begin t := UnitsInside ( i ) ;
34005: LD_ADDR_VAR 0 4
34009: PUSH
34010: LD_VAR 0 3
34014: PPUSH
34015: CALL_OW 313
34019: ST_TO_ADDR
// if t then
34020: LD_VAR 0 4
34024: IFFALSE 34072
// for j in t do
34026: LD_ADDR_VAR 0 7
34030: PUSH
34031: LD_VAR 0 4
34035: PUSH
34036: FOR_IN
34037: IFFALSE 34070
// result := Replace ( result , result + 1 , j ) ;
34039: LD_ADDR_VAR 0 2
34043: PUSH
34044: LD_VAR 0 2
34048: PPUSH
34049: LD_VAR 0 2
34053: PUSH
34054: LD_INT 1
34056: PLUS
34057: PPUSH
34058: LD_VAR 0 7
34062: PPUSH
34063: CALL_OW 1
34067: ST_TO_ADDR
34068: GO 34036
34070: POP
34071: POP
// end ;
34072: GO 34002
34074: POP
34075: POP
// if not result then
34076: LD_VAR 0 2
34080: NOT
34081: IFFALSE 34085
// exit ;
34083: GO 34233
// mech := result [ 1 ] ;
34085: LD_ADDR_VAR 0 5
34089: PUSH
34090: LD_VAR 0 2
34094: PUSH
34095: LD_INT 1
34097: ARRAY
34098: ST_TO_ADDR
// if result > 1 then
34099: LD_VAR 0 2
34103: PUSH
34104: LD_INT 1
34106: GREATER
34107: IFFALSE 34219
// begin for i = 2 to result do
34109: LD_ADDR_VAR 0 3
34113: PUSH
34114: DOUBLE
34115: LD_INT 2
34117: DEC
34118: ST_TO_ADDR
34119: LD_VAR 0 2
34123: PUSH
34124: FOR_TO
34125: IFFALSE 34217
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34127: LD_ADDR_VAR 0 4
34131: PUSH
34132: LD_VAR 0 2
34136: PUSH
34137: LD_VAR 0 3
34141: ARRAY
34142: PPUSH
34143: LD_INT 3
34145: PPUSH
34146: CALL_OW 259
34150: PUSH
34151: LD_VAR 0 2
34155: PUSH
34156: LD_VAR 0 3
34160: ARRAY
34161: PPUSH
34162: CALL_OW 432
34166: MINUS
34167: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34168: LD_VAR 0 4
34172: PUSH
34173: LD_VAR 0 5
34177: PPUSH
34178: LD_INT 3
34180: PPUSH
34181: CALL_OW 259
34185: PUSH
34186: LD_VAR 0 5
34190: PPUSH
34191: CALL_OW 432
34195: MINUS
34196: GREATEREQUAL
34197: IFFALSE 34215
// mech := result [ i ] ;
34199: LD_ADDR_VAR 0 5
34203: PUSH
34204: LD_VAR 0 2
34208: PUSH
34209: LD_VAR 0 3
34213: ARRAY
34214: ST_TO_ADDR
// end ;
34215: GO 34124
34217: POP
34218: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34219: LD_VAR 0 1
34223: PPUSH
34224: LD_VAR 0 5
34228: PPUSH
34229: CALL_OW 135
// end ;
34233: LD_VAR 0 2
34237: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34238: LD_INT 0
34240: PPUSH
34241: PPUSH
34242: PPUSH
34243: PPUSH
34244: PPUSH
34245: PPUSH
34246: PPUSH
34247: PPUSH
34248: PPUSH
34249: PPUSH
34250: PPUSH
34251: PPUSH
34252: PPUSH
// result := [ ] ;
34253: LD_ADDR_VAR 0 7
34257: PUSH
34258: EMPTY
34259: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34260: LD_VAR 0 1
34264: PPUSH
34265: CALL_OW 266
34269: PUSH
34270: LD_INT 0
34272: PUSH
34273: LD_INT 1
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: IN
34280: NOT
34281: IFFALSE 34285
// exit ;
34283: GO 35919
// if name then
34285: LD_VAR 0 3
34289: IFFALSE 34305
// SetBName ( base_dep , name ) ;
34291: LD_VAR 0 1
34295: PPUSH
34296: LD_VAR 0 3
34300: PPUSH
34301: CALL_OW 500
// base := GetBase ( base_dep ) ;
34305: LD_ADDR_VAR 0 15
34309: PUSH
34310: LD_VAR 0 1
34314: PPUSH
34315: CALL_OW 274
34319: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34320: LD_ADDR_VAR 0 16
34324: PUSH
34325: LD_VAR 0 1
34329: PPUSH
34330: CALL_OW 255
34334: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34335: LD_ADDR_VAR 0 17
34339: PUSH
34340: LD_VAR 0 1
34344: PPUSH
34345: CALL_OW 248
34349: ST_TO_ADDR
// if sources then
34350: LD_VAR 0 5
34354: IFFALSE 34401
// for i = 1 to 3 do
34356: LD_ADDR_VAR 0 8
34360: PUSH
34361: DOUBLE
34362: LD_INT 1
34364: DEC
34365: ST_TO_ADDR
34366: LD_INT 3
34368: PUSH
34369: FOR_TO
34370: IFFALSE 34399
// AddResourceType ( base , i , sources [ i ] ) ;
34372: LD_VAR 0 15
34376: PPUSH
34377: LD_VAR 0 8
34381: PPUSH
34382: LD_VAR 0 5
34386: PUSH
34387: LD_VAR 0 8
34391: ARRAY
34392: PPUSH
34393: CALL_OW 276
34397: GO 34369
34399: POP
34400: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34401: LD_ADDR_VAR 0 18
34405: PUSH
34406: LD_VAR 0 15
34410: PPUSH
34411: LD_VAR 0 2
34415: PPUSH
34416: LD_INT 1
34418: PPUSH
34419: CALL 33662 0 3
34423: ST_TO_ADDR
// InitHc ;
34424: CALL_OW 19
// InitUc ;
34428: CALL_OW 18
// uc_side := side ;
34432: LD_ADDR_OWVAR 20
34436: PUSH
34437: LD_VAR 0 16
34441: ST_TO_ADDR
// uc_nation := nation ;
34442: LD_ADDR_OWVAR 21
34446: PUSH
34447: LD_VAR 0 17
34451: ST_TO_ADDR
// if buildings then
34452: LD_VAR 0 18
34456: IFFALSE 35778
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34458: LD_ADDR_VAR 0 19
34462: PUSH
34463: LD_VAR 0 18
34467: PPUSH
34468: LD_INT 2
34470: PUSH
34471: LD_INT 30
34473: PUSH
34474: LD_INT 29
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: PUSH
34481: LD_INT 30
34483: PUSH
34484: LD_INT 30
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: LIST
34495: PPUSH
34496: CALL_OW 72
34500: ST_TO_ADDR
// if tmp then
34501: LD_VAR 0 19
34505: IFFALSE 34553
// for i in tmp do
34507: LD_ADDR_VAR 0 8
34511: PUSH
34512: LD_VAR 0 19
34516: PUSH
34517: FOR_IN
34518: IFFALSE 34551
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34520: LD_VAR 0 8
34524: PPUSH
34525: CALL_OW 250
34529: PPUSH
34530: LD_VAR 0 8
34534: PPUSH
34535: CALL_OW 251
34539: PPUSH
34540: LD_VAR 0 16
34544: PPUSH
34545: CALL_OW 441
34549: GO 34517
34551: POP
34552: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34553: LD_VAR 0 18
34557: PPUSH
34558: LD_INT 2
34560: PUSH
34561: LD_INT 30
34563: PUSH
34564: LD_INT 32
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 30
34573: PUSH
34574: LD_INT 33
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: LIST
34585: PPUSH
34586: CALL_OW 72
34590: IFFALSE 34678
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34592: LD_ADDR_VAR 0 8
34596: PUSH
34597: LD_VAR 0 18
34601: PPUSH
34602: LD_INT 2
34604: PUSH
34605: LD_INT 30
34607: PUSH
34608: LD_INT 32
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 30
34617: PUSH
34618: LD_INT 33
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: LIST
34629: PPUSH
34630: CALL_OW 72
34634: PUSH
34635: FOR_IN
34636: IFFALSE 34676
// begin if not GetBWeapon ( i ) then
34638: LD_VAR 0 8
34642: PPUSH
34643: CALL_OW 269
34647: NOT
34648: IFFALSE 34674
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34650: LD_VAR 0 8
34654: PPUSH
34655: LD_VAR 0 8
34659: PPUSH
34660: LD_VAR 0 2
34664: PPUSH
34665: CALL 35924 0 2
34669: PPUSH
34670: CALL_OW 431
// end ;
34674: GO 34635
34676: POP
34677: POP
// end ; for i = 1 to personel do
34678: LD_ADDR_VAR 0 8
34682: PUSH
34683: DOUBLE
34684: LD_INT 1
34686: DEC
34687: ST_TO_ADDR
34688: LD_VAR 0 6
34692: PUSH
34693: FOR_TO
34694: IFFALSE 35758
// begin if i > 4 then
34696: LD_VAR 0 8
34700: PUSH
34701: LD_INT 4
34703: GREATER
34704: IFFALSE 34708
// break ;
34706: GO 35758
// case i of 1 :
34708: LD_VAR 0 8
34712: PUSH
34713: LD_INT 1
34715: DOUBLE
34716: EQUAL
34717: IFTRUE 34721
34719: GO 34801
34721: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34722: LD_ADDR_VAR 0 12
34726: PUSH
34727: LD_VAR 0 18
34731: PPUSH
34732: LD_INT 22
34734: PUSH
34735: LD_VAR 0 16
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 58
34746: PUSH
34747: EMPTY
34748: LIST
34749: PUSH
34750: LD_INT 2
34752: PUSH
34753: LD_INT 30
34755: PUSH
34756: LD_INT 32
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: LD_INT 30
34765: PUSH
34766: LD_INT 4
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 30
34775: PUSH
34776: LD_INT 5
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: LIST
34793: PPUSH
34794: CALL_OW 72
34798: ST_TO_ADDR
34799: GO 35023
34801: LD_INT 2
34803: DOUBLE
34804: EQUAL
34805: IFTRUE 34809
34807: GO 34871
34809: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34810: LD_ADDR_VAR 0 12
34814: PUSH
34815: LD_VAR 0 18
34819: PPUSH
34820: LD_INT 22
34822: PUSH
34823: LD_VAR 0 16
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PUSH
34832: LD_INT 2
34834: PUSH
34835: LD_INT 30
34837: PUSH
34838: LD_INT 0
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 30
34847: PUSH
34848: LD_INT 1
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: LIST
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PPUSH
34864: CALL_OW 72
34868: ST_TO_ADDR
34869: GO 35023
34871: LD_INT 3
34873: DOUBLE
34874: EQUAL
34875: IFTRUE 34879
34877: GO 34941
34879: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34880: LD_ADDR_VAR 0 12
34884: PUSH
34885: LD_VAR 0 18
34889: PPUSH
34890: LD_INT 22
34892: PUSH
34893: LD_VAR 0 16
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 2
34904: PUSH
34905: LD_INT 30
34907: PUSH
34908: LD_INT 2
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 30
34917: PUSH
34918: LD_INT 3
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: LIST
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PPUSH
34934: CALL_OW 72
34938: ST_TO_ADDR
34939: GO 35023
34941: LD_INT 4
34943: DOUBLE
34944: EQUAL
34945: IFTRUE 34949
34947: GO 35022
34949: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34950: LD_ADDR_VAR 0 12
34954: PUSH
34955: LD_VAR 0 18
34959: PPUSH
34960: LD_INT 22
34962: PUSH
34963: LD_VAR 0 16
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 2
34974: PUSH
34975: LD_INT 30
34977: PUSH
34978: LD_INT 6
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 30
34987: PUSH
34988: LD_INT 7
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 30
34997: PUSH
34998: LD_INT 8
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PPUSH
35015: CALL_OW 72
35019: ST_TO_ADDR
35020: GO 35023
35022: POP
// if i = 1 then
35023: LD_VAR 0 8
35027: PUSH
35028: LD_INT 1
35030: EQUAL
35031: IFFALSE 35142
// begin tmp := [ ] ;
35033: LD_ADDR_VAR 0 19
35037: PUSH
35038: EMPTY
35039: ST_TO_ADDR
// for j in f do
35040: LD_ADDR_VAR 0 9
35044: PUSH
35045: LD_VAR 0 12
35049: PUSH
35050: FOR_IN
35051: IFFALSE 35124
// if GetBType ( j ) = b_bunker then
35053: LD_VAR 0 9
35057: PPUSH
35058: CALL_OW 266
35062: PUSH
35063: LD_INT 32
35065: EQUAL
35066: IFFALSE 35093
// tmp := Insert ( tmp , 1 , j ) else
35068: LD_ADDR_VAR 0 19
35072: PUSH
35073: LD_VAR 0 19
35077: PPUSH
35078: LD_INT 1
35080: PPUSH
35081: LD_VAR 0 9
35085: PPUSH
35086: CALL_OW 2
35090: ST_TO_ADDR
35091: GO 35122
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35093: LD_ADDR_VAR 0 19
35097: PUSH
35098: LD_VAR 0 19
35102: PPUSH
35103: LD_VAR 0 19
35107: PUSH
35108: LD_INT 1
35110: PLUS
35111: PPUSH
35112: LD_VAR 0 9
35116: PPUSH
35117: CALL_OW 2
35121: ST_TO_ADDR
35122: GO 35050
35124: POP
35125: POP
// if tmp then
35126: LD_VAR 0 19
35130: IFFALSE 35142
// f := tmp ;
35132: LD_ADDR_VAR 0 12
35136: PUSH
35137: LD_VAR 0 19
35141: ST_TO_ADDR
// end ; x := personel [ i ] ;
35142: LD_ADDR_VAR 0 13
35146: PUSH
35147: LD_VAR 0 6
35151: PUSH
35152: LD_VAR 0 8
35156: ARRAY
35157: ST_TO_ADDR
// if x = - 1 then
35158: LD_VAR 0 13
35162: PUSH
35163: LD_INT 1
35165: NEG
35166: EQUAL
35167: IFFALSE 35376
// begin for j in f do
35169: LD_ADDR_VAR 0 9
35173: PUSH
35174: LD_VAR 0 12
35178: PUSH
35179: FOR_IN
35180: IFFALSE 35372
// repeat InitHc ;
35182: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35186: LD_VAR 0 9
35190: PPUSH
35191: CALL_OW 266
35195: PUSH
35196: LD_INT 5
35198: EQUAL
35199: IFFALSE 35269
// begin if UnitsInside ( j ) < 3 then
35201: LD_VAR 0 9
35205: PPUSH
35206: CALL_OW 313
35210: PUSH
35211: LD_INT 3
35213: LESS
35214: IFFALSE 35250
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35216: LD_INT 0
35218: PPUSH
35219: LD_INT 5
35221: PUSH
35222: LD_INT 8
35224: PUSH
35225: LD_INT 9
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: LIST
35232: PUSH
35233: LD_VAR 0 17
35237: ARRAY
35238: PPUSH
35239: LD_VAR 0 4
35243: PPUSH
35244: CALL_OW 380
35248: GO 35267
// PrepareHuman ( false , i , skill ) ;
35250: LD_INT 0
35252: PPUSH
35253: LD_VAR 0 8
35257: PPUSH
35258: LD_VAR 0 4
35262: PPUSH
35263: CALL_OW 380
// end else
35267: GO 35286
// PrepareHuman ( false , i , skill ) ;
35269: LD_INT 0
35271: PPUSH
35272: LD_VAR 0 8
35276: PPUSH
35277: LD_VAR 0 4
35281: PPUSH
35282: CALL_OW 380
// un := CreateHuman ;
35286: LD_ADDR_VAR 0 14
35290: PUSH
35291: CALL_OW 44
35295: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35296: LD_ADDR_VAR 0 7
35300: PUSH
35301: LD_VAR 0 7
35305: PPUSH
35306: LD_INT 1
35308: PPUSH
35309: LD_VAR 0 14
35313: PPUSH
35314: CALL_OW 2
35318: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35319: LD_VAR 0 14
35323: PPUSH
35324: LD_VAR 0 9
35328: PPUSH
35329: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35333: LD_VAR 0 9
35337: PPUSH
35338: CALL_OW 313
35342: PUSH
35343: LD_INT 6
35345: EQUAL
35346: PUSH
35347: LD_VAR 0 9
35351: PPUSH
35352: CALL_OW 266
35356: PUSH
35357: LD_INT 32
35359: PUSH
35360: LD_INT 31
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: IN
35367: OR
35368: IFFALSE 35182
35370: GO 35179
35372: POP
35373: POP
// end else
35374: GO 35756
// for j = 1 to x do
35376: LD_ADDR_VAR 0 9
35380: PUSH
35381: DOUBLE
35382: LD_INT 1
35384: DEC
35385: ST_TO_ADDR
35386: LD_VAR 0 13
35390: PUSH
35391: FOR_TO
35392: IFFALSE 35754
// begin InitHc ;
35394: CALL_OW 19
// if not f then
35398: LD_VAR 0 12
35402: NOT
35403: IFFALSE 35492
// begin PrepareHuman ( false , i , skill ) ;
35405: LD_INT 0
35407: PPUSH
35408: LD_VAR 0 8
35412: PPUSH
35413: LD_VAR 0 4
35417: PPUSH
35418: CALL_OW 380
// un := CreateHuman ;
35422: LD_ADDR_VAR 0 14
35426: PUSH
35427: CALL_OW 44
35431: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35432: LD_ADDR_VAR 0 7
35436: PUSH
35437: LD_VAR 0 7
35441: PPUSH
35442: LD_INT 1
35444: PPUSH
35445: LD_VAR 0 14
35449: PPUSH
35450: CALL_OW 2
35454: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35455: LD_VAR 0 14
35459: PPUSH
35460: LD_VAR 0 1
35464: PPUSH
35465: CALL_OW 250
35469: PPUSH
35470: LD_VAR 0 1
35474: PPUSH
35475: CALL_OW 251
35479: PPUSH
35480: LD_INT 10
35482: PPUSH
35483: LD_INT 0
35485: PPUSH
35486: CALL_OW 50
// continue ;
35490: GO 35391
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35492: LD_VAR 0 12
35496: PUSH
35497: LD_INT 1
35499: ARRAY
35500: PPUSH
35501: CALL_OW 313
35505: PUSH
35506: LD_VAR 0 12
35510: PUSH
35511: LD_INT 1
35513: ARRAY
35514: PPUSH
35515: CALL_OW 266
35519: PUSH
35520: LD_INT 32
35522: PUSH
35523: LD_INT 31
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: IN
35530: AND
35531: PUSH
35532: LD_VAR 0 12
35536: PUSH
35537: LD_INT 1
35539: ARRAY
35540: PPUSH
35541: CALL_OW 313
35545: PUSH
35546: LD_INT 6
35548: EQUAL
35549: OR
35550: IFFALSE 35570
// f := Delete ( f , 1 ) ;
35552: LD_ADDR_VAR 0 12
35556: PUSH
35557: LD_VAR 0 12
35561: PPUSH
35562: LD_INT 1
35564: PPUSH
35565: CALL_OW 3
35569: ST_TO_ADDR
// if not f then
35570: LD_VAR 0 12
35574: NOT
35575: IFFALSE 35593
// begin x := x + 2 ;
35577: LD_ADDR_VAR 0 13
35581: PUSH
35582: LD_VAR 0 13
35586: PUSH
35587: LD_INT 2
35589: PLUS
35590: ST_TO_ADDR
// continue ;
35591: GO 35391
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35593: LD_VAR 0 12
35597: PUSH
35598: LD_INT 1
35600: ARRAY
35601: PPUSH
35602: CALL_OW 266
35606: PUSH
35607: LD_INT 5
35609: EQUAL
35610: IFFALSE 35684
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35612: LD_VAR 0 12
35616: PUSH
35617: LD_INT 1
35619: ARRAY
35620: PPUSH
35621: CALL_OW 313
35625: PUSH
35626: LD_INT 3
35628: LESS
35629: IFFALSE 35665
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35631: LD_INT 0
35633: PPUSH
35634: LD_INT 5
35636: PUSH
35637: LD_INT 8
35639: PUSH
35640: LD_INT 9
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: LIST
35647: PUSH
35648: LD_VAR 0 17
35652: ARRAY
35653: PPUSH
35654: LD_VAR 0 4
35658: PPUSH
35659: CALL_OW 380
35663: GO 35682
// PrepareHuman ( false , i , skill ) ;
35665: LD_INT 0
35667: PPUSH
35668: LD_VAR 0 8
35672: PPUSH
35673: LD_VAR 0 4
35677: PPUSH
35678: CALL_OW 380
// end else
35682: GO 35701
// PrepareHuman ( false , i , skill ) ;
35684: LD_INT 0
35686: PPUSH
35687: LD_VAR 0 8
35691: PPUSH
35692: LD_VAR 0 4
35696: PPUSH
35697: CALL_OW 380
// un := CreateHuman ;
35701: LD_ADDR_VAR 0 14
35705: PUSH
35706: CALL_OW 44
35710: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35711: LD_ADDR_VAR 0 7
35715: PUSH
35716: LD_VAR 0 7
35720: PPUSH
35721: LD_INT 1
35723: PPUSH
35724: LD_VAR 0 14
35728: PPUSH
35729: CALL_OW 2
35733: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35734: LD_VAR 0 14
35738: PPUSH
35739: LD_VAR 0 12
35743: PUSH
35744: LD_INT 1
35746: ARRAY
35747: PPUSH
35748: CALL_OW 52
// end ;
35752: GO 35391
35754: POP
35755: POP
// end ;
35756: GO 34693
35758: POP
35759: POP
// result := result ^ buildings ;
35760: LD_ADDR_VAR 0 7
35764: PUSH
35765: LD_VAR 0 7
35769: PUSH
35770: LD_VAR 0 18
35774: ADD
35775: ST_TO_ADDR
// end else
35776: GO 35919
// begin for i = 1 to personel do
35778: LD_ADDR_VAR 0 8
35782: PUSH
35783: DOUBLE
35784: LD_INT 1
35786: DEC
35787: ST_TO_ADDR
35788: LD_VAR 0 6
35792: PUSH
35793: FOR_TO
35794: IFFALSE 35917
// begin if i > 4 then
35796: LD_VAR 0 8
35800: PUSH
35801: LD_INT 4
35803: GREATER
35804: IFFALSE 35808
// break ;
35806: GO 35917
// x := personel [ i ] ;
35808: LD_ADDR_VAR 0 13
35812: PUSH
35813: LD_VAR 0 6
35817: PUSH
35818: LD_VAR 0 8
35822: ARRAY
35823: ST_TO_ADDR
// if x = - 1 then
35824: LD_VAR 0 13
35828: PUSH
35829: LD_INT 1
35831: NEG
35832: EQUAL
35833: IFFALSE 35837
// continue ;
35835: GO 35793
// PrepareHuman ( false , i , skill ) ;
35837: LD_INT 0
35839: PPUSH
35840: LD_VAR 0 8
35844: PPUSH
35845: LD_VAR 0 4
35849: PPUSH
35850: CALL_OW 380
// un := CreateHuman ;
35854: LD_ADDR_VAR 0 14
35858: PUSH
35859: CALL_OW 44
35863: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35864: LD_VAR 0 14
35868: PPUSH
35869: LD_VAR 0 1
35873: PPUSH
35874: CALL_OW 250
35878: PPUSH
35879: LD_VAR 0 1
35883: PPUSH
35884: CALL_OW 251
35888: PPUSH
35889: LD_INT 10
35891: PPUSH
35892: LD_INT 0
35894: PPUSH
35895: CALL_OW 50
// result := result ^ un ;
35899: LD_ADDR_VAR 0 7
35903: PUSH
35904: LD_VAR 0 7
35908: PUSH
35909: LD_VAR 0 14
35913: ADD
35914: ST_TO_ADDR
// end ;
35915: GO 35793
35917: POP
35918: POP
// end ; end ;
35919: LD_VAR 0 7
35923: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35924: LD_INT 0
35926: PPUSH
35927: PPUSH
35928: PPUSH
35929: PPUSH
35930: PPUSH
35931: PPUSH
35932: PPUSH
35933: PPUSH
35934: PPUSH
35935: PPUSH
35936: PPUSH
35937: PPUSH
35938: PPUSH
35939: PPUSH
35940: PPUSH
35941: PPUSH
// result := false ;
35942: LD_ADDR_VAR 0 3
35946: PUSH
35947: LD_INT 0
35949: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35950: LD_VAR 0 1
35954: NOT
35955: PUSH
35956: LD_VAR 0 1
35960: PPUSH
35961: CALL_OW 266
35965: PUSH
35966: LD_INT 32
35968: PUSH
35969: LD_INT 33
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: IN
35976: NOT
35977: OR
35978: IFFALSE 35982
// exit ;
35980: GO 37091
// nat := GetNation ( tower ) ;
35982: LD_ADDR_VAR 0 12
35986: PUSH
35987: LD_VAR 0 1
35991: PPUSH
35992: CALL_OW 248
35996: ST_TO_ADDR
// side := GetSide ( tower ) ;
35997: LD_ADDR_VAR 0 16
36001: PUSH
36002: LD_VAR 0 1
36006: PPUSH
36007: CALL_OW 255
36011: ST_TO_ADDR
// x := GetX ( tower ) ;
36012: LD_ADDR_VAR 0 10
36016: PUSH
36017: LD_VAR 0 1
36021: PPUSH
36022: CALL_OW 250
36026: ST_TO_ADDR
// y := GetY ( tower ) ;
36027: LD_ADDR_VAR 0 11
36031: PUSH
36032: LD_VAR 0 1
36036: PPUSH
36037: CALL_OW 251
36041: ST_TO_ADDR
// if not x or not y then
36042: LD_VAR 0 10
36046: NOT
36047: PUSH
36048: LD_VAR 0 11
36052: NOT
36053: OR
36054: IFFALSE 36058
// exit ;
36056: GO 37091
// weapon := 0 ;
36058: LD_ADDR_VAR 0 18
36062: PUSH
36063: LD_INT 0
36065: ST_TO_ADDR
// fac_list := [ ] ;
36066: LD_ADDR_VAR 0 17
36070: PUSH
36071: EMPTY
36072: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36073: LD_ADDR_VAR 0 6
36077: PUSH
36078: LD_VAR 0 1
36082: PPUSH
36083: CALL_OW 274
36087: PPUSH
36088: LD_VAR 0 2
36092: PPUSH
36093: LD_INT 0
36095: PPUSH
36096: CALL 33662 0 3
36100: PPUSH
36101: LD_INT 30
36103: PUSH
36104: LD_INT 3
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PPUSH
36111: CALL_OW 72
36115: ST_TO_ADDR
// if not factories then
36116: LD_VAR 0 6
36120: NOT
36121: IFFALSE 36125
// exit ;
36123: GO 37091
// for i in factories do
36125: LD_ADDR_VAR 0 8
36129: PUSH
36130: LD_VAR 0 6
36134: PUSH
36135: FOR_IN
36136: IFFALSE 36161
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36138: LD_ADDR_VAR 0 17
36142: PUSH
36143: LD_VAR 0 17
36147: PUSH
36148: LD_VAR 0 8
36152: PPUSH
36153: CALL_OW 478
36157: UNION
36158: ST_TO_ADDR
36159: GO 36135
36161: POP
36162: POP
// if not fac_list then
36163: LD_VAR 0 17
36167: NOT
36168: IFFALSE 36172
// exit ;
36170: GO 37091
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36172: LD_ADDR_VAR 0 5
36176: PUSH
36177: LD_INT 4
36179: PUSH
36180: LD_INT 5
36182: PUSH
36183: LD_INT 9
36185: PUSH
36186: LD_INT 10
36188: PUSH
36189: LD_INT 6
36191: PUSH
36192: LD_INT 7
36194: PUSH
36195: LD_INT 11
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: PUSH
36207: LD_INT 27
36209: PUSH
36210: LD_INT 28
36212: PUSH
36213: LD_INT 26
36215: PUSH
36216: LD_INT 30
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 43
36227: PUSH
36228: LD_INT 44
36230: PUSH
36231: LD_INT 46
36233: PUSH
36234: LD_INT 45
36236: PUSH
36237: LD_INT 47
36239: PUSH
36240: LD_INT 49
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: LIST
36255: PUSH
36256: LD_VAR 0 12
36260: ARRAY
36261: ST_TO_ADDR
// list := list isect fac_list ;
36262: LD_ADDR_VAR 0 5
36266: PUSH
36267: LD_VAR 0 5
36271: PUSH
36272: LD_VAR 0 17
36276: ISECT
36277: ST_TO_ADDR
// if not list then
36278: LD_VAR 0 5
36282: NOT
36283: IFFALSE 36287
// exit ;
36285: GO 37091
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36287: LD_VAR 0 12
36291: PUSH
36292: LD_INT 3
36294: EQUAL
36295: PUSH
36296: LD_INT 49
36298: PUSH
36299: LD_VAR 0 5
36303: IN
36304: AND
36305: PUSH
36306: LD_INT 31
36308: PPUSH
36309: LD_VAR 0 16
36313: PPUSH
36314: CALL_OW 321
36318: PUSH
36319: LD_INT 2
36321: EQUAL
36322: AND
36323: IFFALSE 36383
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36325: LD_INT 22
36327: PUSH
36328: LD_VAR 0 16
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 35
36339: PUSH
36340: LD_INT 49
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 91
36349: PUSH
36350: LD_VAR 0 1
36354: PUSH
36355: LD_INT 10
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: LIST
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: LIST
36367: PPUSH
36368: CALL_OW 69
36372: NOT
36373: IFFALSE 36383
// weapon := ru_time_lapser ;
36375: LD_ADDR_VAR 0 18
36379: PUSH
36380: LD_INT 49
36382: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36383: LD_VAR 0 12
36387: PUSH
36388: LD_INT 1
36390: PUSH
36391: LD_INT 2
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: IN
36398: PUSH
36399: LD_INT 11
36401: PUSH
36402: LD_VAR 0 5
36406: IN
36407: PUSH
36408: LD_INT 30
36410: PUSH
36411: LD_VAR 0 5
36415: IN
36416: OR
36417: AND
36418: PUSH
36419: LD_INT 6
36421: PPUSH
36422: LD_VAR 0 16
36426: PPUSH
36427: CALL_OW 321
36431: PUSH
36432: LD_INT 2
36434: EQUAL
36435: AND
36436: IFFALSE 36601
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36438: LD_INT 22
36440: PUSH
36441: LD_VAR 0 16
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 2
36452: PUSH
36453: LD_INT 35
36455: PUSH
36456: LD_INT 11
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 35
36465: PUSH
36466: LD_INT 30
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: LIST
36477: PUSH
36478: LD_INT 91
36480: PUSH
36481: LD_VAR 0 1
36485: PUSH
36486: LD_INT 18
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: LIST
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: LIST
36498: PPUSH
36499: CALL_OW 69
36503: NOT
36504: PUSH
36505: LD_INT 22
36507: PUSH
36508: LD_VAR 0 16
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 2
36519: PUSH
36520: LD_INT 30
36522: PUSH
36523: LD_INT 32
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 30
36532: PUSH
36533: LD_INT 33
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: LIST
36544: PUSH
36545: LD_INT 91
36547: PUSH
36548: LD_VAR 0 1
36552: PUSH
36553: LD_INT 12
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: LIST
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: LIST
36565: PUSH
36566: EMPTY
36567: LIST
36568: PPUSH
36569: CALL_OW 69
36573: PUSH
36574: LD_INT 2
36576: GREATER
36577: AND
36578: IFFALSE 36601
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36580: LD_ADDR_VAR 0 18
36584: PUSH
36585: LD_INT 11
36587: PUSH
36588: LD_INT 30
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_VAR 0 12
36599: ARRAY
36600: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36601: LD_VAR 0 18
36605: NOT
36606: PUSH
36607: LD_INT 40
36609: PPUSH
36610: LD_VAR 0 16
36614: PPUSH
36615: CALL_OW 321
36619: PUSH
36620: LD_INT 2
36622: EQUAL
36623: AND
36624: PUSH
36625: LD_INT 7
36627: PUSH
36628: LD_VAR 0 5
36632: IN
36633: PUSH
36634: LD_INT 28
36636: PUSH
36637: LD_VAR 0 5
36641: IN
36642: OR
36643: PUSH
36644: LD_INT 45
36646: PUSH
36647: LD_VAR 0 5
36651: IN
36652: OR
36653: AND
36654: IFFALSE 36908
// begin hex := GetHexInfo ( x , y ) ;
36656: LD_ADDR_VAR 0 4
36660: PUSH
36661: LD_VAR 0 10
36665: PPUSH
36666: LD_VAR 0 11
36670: PPUSH
36671: CALL_OW 546
36675: ST_TO_ADDR
// if hex [ 1 ] then
36676: LD_VAR 0 4
36680: PUSH
36681: LD_INT 1
36683: ARRAY
36684: IFFALSE 36688
// exit ;
36686: GO 37091
// height := hex [ 2 ] ;
36688: LD_ADDR_VAR 0 15
36692: PUSH
36693: LD_VAR 0 4
36697: PUSH
36698: LD_INT 2
36700: ARRAY
36701: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36702: LD_ADDR_VAR 0 14
36706: PUSH
36707: LD_INT 0
36709: PUSH
36710: LD_INT 2
36712: PUSH
36713: LD_INT 3
36715: PUSH
36716: LD_INT 5
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: ST_TO_ADDR
// for i in tmp do
36725: LD_ADDR_VAR 0 8
36729: PUSH
36730: LD_VAR 0 14
36734: PUSH
36735: FOR_IN
36736: IFFALSE 36906
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36738: LD_ADDR_VAR 0 9
36742: PUSH
36743: LD_VAR 0 10
36747: PPUSH
36748: LD_VAR 0 8
36752: PPUSH
36753: LD_INT 5
36755: PPUSH
36756: CALL_OW 272
36760: PUSH
36761: LD_VAR 0 11
36765: PPUSH
36766: LD_VAR 0 8
36770: PPUSH
36771: LD_INT 5
36773: PPUSH
36774: CALL_OW 273
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36783: LD_VAR 0 9
36787: PUSH
36788: LD_INT 1
36790: ARRAY
36791: PPUSH
36792: LD_VAR 0 9
36796: PUSH
36797: LD_INT 2
36799: ARRAY
36800: PPUSH
36801: CALL_OW 488
36805: IFFALSE 36904
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36807: LD_ADDR_VAR 0 4
36811: PUSH
36812: LD_VAR 0 9
36816: PUSH
36817: LD_INT 1
36819: ARRAY
36820: PPUSH
36821: LD_VAR 0 9
36825: PUSH
36826: LD_INT 2
36828: ARRAY
36829: PPUSH
36830: CALL_OW 546
36834: ST_TO_ADDR
// if hex [ 1 ] then
36835: LD_VAR 0 4
36839: PUSH
36840: LD_INT 1
36842: ARRAY
36843: IFFALSE 36847
// continue ;
36845: GO 36735
// h := hex [ 2 ] ;
36847: LD_ADDR_VAR 0 13
36851: PUSH
36852: LD_VAR 0 4
36856: PUSH
36857: LD_INT 2
36859: ARRAY
36860: ST_TO_ADDR
// if h + 7 < height then
36861: LD_VAR 0 13
36865: PUSH
36866: LD_INT 7
36868: PLUS
36869: PUSH
36870: LD_VAR 0 15
36874: LESS
36875: IFFALSE 36904
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36877: LD_ADDR_VAR 0 18
36881: PUSH
36882: LD_INT 7
36884: PUSH
36885: LD_INT 28
36887: PUSH
36888: LD_INT 45
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: LIST
36895: PUSH
36896: LD_VAR 0 12
36900: ARRAY
36901: ST_TO_ADDR
// break ;
36902: GO 36906
// end ; end ; end ;
36904: GO 36735
36906: POP
36907: POP
// end ; if not weapon then
36908: LD_VAR 0 18
36912: NOT
36913: IFFALSE 36973
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36915: LD_ADDR_VAR 0 5
36919: PUSH
36920: LD_VAR 0 5
36924: PUSH
36925: LD_INT 11
36927: PUSH
36928: LD_INT 30
36930: PUSH
36931: LD_INT 49
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: LIST
36938: DIFF
36939: ST_TO_ADDR
// if not list then
36940: LD_VAR 0 5
36944: NOT
36945: IFFALSE 36949
// exit ;
36947: GO 37091
// weapon := list [ rand ( 1 , list ) ] ;
36949: LD_ADDR_VAR 0 18
36953: PUSH
36954: LD_VAR 0 5
36958: PUSH
36959: LD_INT 1
36961: PPUSH
36962: LD_VAR 0 5
36966: PPUSH
36967: CALL_OW 12
36971: ARRAY
36972: ST_TO_ADDR
// end ; if weapon then
36973: LD_VAR 0 18
36977: IFFALSE 37091
// begin tmp := CostOfWeapon ( weapon ) ;
36979: LD_ADDR_VAR 0 14
36983: PUSH
36984: LD_VAR 0 18
36988: PPUSH
36989: CALL_OW 451
36993: ST_TO_ADDR
// j := GetBase ( tower ) ;
36994: LD_ADDR_VAR 0 9
36998: PUSH
36999: LD_VAR 0 1
37003: PPUSH
37004: CALL_OW 274
37008: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37009: LD_VAR 0 9
37013: PPUSH
37014: LD_INT 1
37016: PPUSH
37017: CALL_OW 275
37021: PUSH
37022: LD_VAR 0 14
37026: PUSH
37027: LD_INT 1
37029: ARRAY
37030: GREATEREQUAL
37031: PUSH
37032: LD_VAR 0 9
37036: PPUSH
37037: LD_INT 2
37039: PPUSH
37040: CALL_OW 275
37044: PUSH
37045: LD_VAR 0 14
37049: PUSH
37050: LD_INT 2
37052: ARRAY
37053: GREATEREQUAL
37054: AND
37055: PUSH
37056: LD_VAR 0 9
37060: PPUSH
37061: LD_INT 3
37063: PPUSH
37064: CALL_OW 275
37068: PUSH
37069: LD_VAR 0 14
37073: PUSH
37074: LD_INT 3
37076: ARRAY
37077: GREATEREQUAL
37078: AND
37079: IFFALSE 37091
// result := weapon ;
37081: LD_ADDR_VAR 0 3
37085: PUSH
37086: LD_VAR 0 18
37090: ST_TO_ADDR
// end ; end ;
37091: LD_VAR 0 3
37095: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37096: LD_INT 0
37098: PPUSH
37099: PPUSH
// result := true ;
37100: LD_ADDR_VAR 0 3
37104: PUSH
37105: LD_INT 1
37107: ST_TO_ADDR
// if array1 = array2 then
37108: LD_VAR 0 1
37112: PUSH
37113: LD_VAR 0 2
37117: EQUAL
37118: IFFALSE 37178
// begin for i = 1 to array1 do
37120: LD_ADDR_VAR 0 4
37124: PUSH
37125: DOUBLE
37126: LD_INT 1
37128: DEC
37129: ST_TO_ADDR
37130: LD_VAR 0 1
37134: PUSH
37135: FOR_TO
37136: IFFALSE 37174
// if array1 [ i ] <> array2 [ i ] then
37138: LD_VAR 0 1
37142: PUSH
37143: LD_VAR 0 4
37147: ARRAY
37148: PUSH
37149: LD_VAR 0 2
37153: PUSH
37154: LD_VAR 0 4
37158: ARRAY
37159: NONEQUAL
37160: IFFALSE 37172
// begin result := false ;
37162: LD_ADDR_VAR 0 3
37166: PUSH
37167: LD_INT 0
37169: ST_TO_ADDR
// break ;
37170: GO 37174
// end ;
37172: GO 37135
37174: POP
37175: POP
// end else
37176: GO 37186
// result := false ;
37178: LD_ADDR_VAR 0 3
37182: PUSH
37183: LD_INT 0
37185: ST_TO_ADDR
// end ;
37186: LD_VAR 0 3
37190: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37191: LD_INT 0
37193: PPUSH
37194: PPUSH
// if not array1 or not array2 then
37195: LD_VAR 0 1
37199: NOT
37200: PUSH
37201: LD_VAR 0 2
37205: NOT
37206: OR
37207: IFFALSE 37211
// exit ;
37209: GO 37275
// result := true ;
37211: LD_ADDR_VAR 0 3
37215: PUSH
37216: LD_INT 1
37218: ST_TO_ADDR
// for i = 1 to array1 do
37219: LD_ADDR_VAR 0 4
37223: PUSH
37224: DOUBLE
37225: LD_INT 1
37227: DEC
37228: ST_TO_ADDR
37229: LD_VAR 0 1
37233: PUSH
37234: FOR_TO
37235: IFFALSE 37273
// if array1 [ i ] <> array2 [ i ] then
37237: LD_VAR 0 1
37241: PUSH
37242: LD_VAR 0 4
37246: ARRAY
37247: PUSH
37248: LD_VAR 0 2
37252: PUSH
37253: LD_VAR 0 4
37257: ARRAY
37258: NONEQUAL
37259: IFFALSE 37271
// begin result := false ;
37261: LD_ADDR_VAR 0 3
37265: PUSH
37266: LD_INT 0
37268: ST_TO_ADDR
// break ;
37269: GO 37273
// end ;
37271: GO 37234
37273: POP
37274: POP
// end ;
37275: LD_VAR 0 3
37279: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37280: LD_INT 0
37282: PPUSH
37283: PPUSH
37284: PPUSH
// pom := GetBase ( fac ) ;
37285: LD_ADDR_VAR 0 5
37289: PUSH
37290: LD_VAR 0 1
37294: PPUSH
37295: CALL_OW 274
37299: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37300: LD_ADDR_VAR 0 4
37304: PUSH
37305: LD_VAR 0 2
37309: PUSH
37310: LD_INT 1
37312: ARRAY
37313: PPUSH
37314: LD_VAR 0 2
37318: PUSH
37319: LD_INT 2
37321: ARRAY
37322: PPUSH
37323: LD_VAR 0 2
37327: PUSH
37328: LD_INT 3
37330: ARRAY
37331: PPUSH
37332: LD_VAR 0 2
37336: PUSH
37337: LD_INT 4
37339: ARRAY
37340: PPUSH
37341: CALL_OW 449
37345: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37346: LD_ADDR_VAR 0 3
37350: PUSH
37351: LD_VAR 0 5
37355: PPUSH
37356: LD_INT 1
37358: PPUSH
37359: CALL_OW 275
37363: PUSH
37364: LD_VAR 0 4
37368: PUSH
37369: LD_INT 1
37371: ARRAY
37372: GREATEREQUAL
37373: PUSH
37374: LD_VAR 0 5
37378: PPUSH
37379: LD_INT 2
37381: PPUSH
37382: CALL_OW 275
37386: PUSH
37387: LD_VAR 0 4
37391: PUSH
37392: LD_INT 2
37394: ARRAY
37395: GREATEREQUAL
37396: AND
37397: PUSH
37398: LD_VAR 0 5
37402: PPUSH
37403: LD_INT 3
37405: PPUSH
37406: CALL_OW 275
37410: PUSH
37411: LD_VAR 0 4
37415: PUSH
37416: LD_INT 3
37418: ARRAY
37419: GREATEREQUAL
37420: AND
37421: ST_TO_ADDR
// end ;
37422: LD_VAR 0 3
37426: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37427: LD_INT 0
37429: PPUSH
37430: PPUSH
37431: PPUSH
37432: PPUSH
// pom := GetBase ( building ) ;
37433: LD_ADDR_VAR 0 3
37437: PUSH
37438: LD_VAR 0 1
37442: PPUSH
37443: CALL_OW 274
37447: ST_TO_ADDR
// if not pom then
37448: LD_VAR 0 3
37452: NOT
37453: IFFALSE 37457
// exit ;
37455: GO 37627
// btype := GetBType ( building ) ;
37457: LD_ADDR_VAR 0 5
37461: PUSH
37462: LD_VAR 0 1
37466: PPUSH
37467: CALL_OW 266
37471: ST_TO_ADDR
// if btype = b_armoury then
37472: LD_VAR 0 5
37476: PUSH
37477: LD_INT 4
37479: EQUAL
37480: IFFALSE 37490
// btype := b_barracks ;
37482: LD_ADDR_VAR 0 5
37486: PUSH
37487: LD_INT 5
37489: ST_TO_ADDR
// if btype = b_depot then
37490: LD_VAR 0 5
37494: PUSH
37495: LD_INT 0
37497: EQUAL
37498: IFFALSE 37508
// btype := b_warehouse ;
37500: LD_ADDR_VAR 0 5
37504: PUSH
37505: LD_INT 1
37507: ST_TO_ADDR
// if btype = b_workshop then
37508: LD_VAR 0 5
37512: PUSH
37513: LD_INT 2
37515: EQUAL
37516: IFFALSE 37526
// btype := b_factory ;
37518: LD_ADDR_VAR 0 5
37522: PUSH
37523: LD_INT 3
37525: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37526: LD_ADDR_VAR 0 4
37530: PUSH
37531: LD_VAR 0 5
37535: PPUSH
37536: LD_VAR 0 1
37540: PPUSH
37541: CALL_OW 248
37545: PPUSH
37546: CALL_OW 450
37550: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37551: LD_ADDR_VAR 0 2
37555: PUSH
37556: LD_VAR 0 3
37560: PPUSH
37561: LD_INT 1
37563: PPUSH
37564: CALL_OW 275
37568: PUSH
37569: LD_VAR 0 4
37573: PUSH
37574: LD_INT 1
37576: ARRAY
37577: GREATEREQUAL
37578: PUSH
37579: LD_VAR 0 3
37583: PPUSH
37584: LD_INT 2
37586: PPUSH
37587: CALL_OW 275
37591: PUSH
37592: LD_VAR 0 4
37596: PUSH
37597: LD_INT 2
37599: ARRAY
37600: GREATEREQUAL
37601: AND
37602: PUSH
37603: LD_VAR 0 3
37607: PPUSH
37608: LD_INT 3
37610: PPUSH
37611: CALL_OW 275
37615: PUSH
37616: LD_VAR 0 4
37620: PUSH
37621: LD_INT 3
37623: ARRAY
37624: GREATEREQUAL
37625: AND
37626: ST_TO_ADDR
// end ;
37627: LD_VAR 0 2
37631: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37632: LD_INT 0
37634: PPUSH
37635: PPUSH
37636: PPUSH
// pom := GetBase ( building ) ;
37637: LD_ADDR_VAR 0 4
37641: PUSH
37642: LD_VAR 0 1
37646: PPUSH
37647: CALL_OW 274
37651: ST_TO_ADDR
// if not pom then
37652: LD_VAR 0 4
37656: NOT
37657: IFFALSE 37661
// exit ;
37659: GO 37762
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37661: LD_ADDR_VAR 0 5
37665: PUSH
37666: LD_VAR 0 2
37670: PPUSH
37671: LD_VAR 0 1
37675: PPUSH
37676: CALL_OW 248
37680: PPUSH
37681: CALL_OW 450
37685: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37686: LD_ADDR_VAR 0 3
37690: PUSH
37691: LD_VAR 0 4
37695: PPUSH
37696: LD_INT 1
37698: PPUSH
37699: CALL_OW 275
37703: PUSH
37704: LD_VAR 0 5
37708: PUSH
37709: LD_INT 1
37711: ARRAY
37712: GREATEREQUAL
37713: PUSH
37714: LD_VAR 0 4
37718: PPUSH
37719: LD_INT 2
37721: PPUSH
37722: CALL_OW 275
37726: PUSH
37727: LD_VAR 0 5
37731: PUSH
37732: LD_INT 2
37734: ARRAY
37735: GREATEREQUAL
37736: AND
37737: PUSH
37738: LD_VAR 0 4
37742: PPUSH
37743: LD_INT 3
37745: PPUSH
37746: CALL_OW 275
37750: PUSH
37751: LD_VAR 0 5
37755: PUSH
37756: LD_INT 3
37758: ARRAY
37759: GREATEREQUAL
37760: AND
37761: ST_TO_ADDR
// end ;
37762: LD_VAR 0 3
37766: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37767: LD_INT 0
37769: PPUSH
37770: PPUSH
37771: PPUSH
37772: PPUSH
37773: PPUSH
37774: PPUSH
37775: PPUSH
37776: PPUSH
37777: PPUSH
37778: PPUSH
37779: PPUSH
// result := false ;
37780: LD_ADDR_VAR 0 8
37784: PUSH
37785: LD_INT 0
37787: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37788: LD_VAR 0 5
37792: NOT
37793: PUSH
37794: LD_VAR 0 1
37798: NOT
37799: OR
37800: PUSH
37801: LD_VAR 0 2
37805: NOT
37806: OR
37807: PUSH
37808: LD_VAR 0 3
37812: NOT
37813: OR
37814: IFFALSE 37818
// exit ;
37816: GO 38632
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37818: LD_ADDR_VAR 0 14
37822: PUSH
37823: LD_VAR 0 1
37827: PPUSH
37828: LD_VAR 0 2
37832: PPUSH
37833: LD_VAR 0 3
37837: PPUSH
37838: LD_VAR 0 4
37842: PPUSH
37843: LD_VAR 0 5
37847: PUSH
37848: LD_INT 1
37850: ARRAY
37851: PPUSH
37852: CALL_OW 248
37856: PPUSH
37857: LD_INT 0
37859: PPUSH
37860: CALL 39865 0 6
37864: ST_TO_ADDR
// if not hexes then
37865: LD_VAR 0 14
37869: NOT
37870: IFFALSE 37874
// exit ;
37872: GO 38632
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37874: LD_ADDR_VAR 0 17
37878: PUSH
37879: LD_VAR 0 5
37883: PPUSH
37884: LD_INT 22
37886: PUSH
37887: LD_VAR 0 13
37891: PPUSH
37892: CALL_OW 255
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PUSH
37901: LD_INT 2
37903: PUSH
37904: LD_INT 30
37906: PUSH
37907: LD_INT 0
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 30
37916: PUSH
37917: LD_INT 1
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: LIST
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PPUSH
37933: CALL_OW 72
37937: ST_TO_ADDR
// for i = 1 to hexes do
37938: LD_ADDR_VAR 0 9
37942: PUSH
37943: DOUBLE
37944: LD_INT 1
37946: DEC
37947: ST_TO_ADDR
37948: LD_VAR 0 14
37952: PUSH
37953: FOR_TO
37954: IFFALSE 38630
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37956: LD_ADDR_VAR 0 13
37960: PUSH
37961: LD_VAR 0 14
37965: PUSH
37966: LD_VAR 0 9
37970: ARRAY
37971: PUSH
37972: LD_INT 1
37974: ARRAY
37975: PPUSH
37976: LD_VAR 0 14
37980: PUSH
37981: LD_VAR 0 9
37985: ARRAY
37986: PUSH
37987: LD_INT 2
37989: ARRAY
37990: PPUSH
37991: CALL_OW 428
37995: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37996: LD_VAR 0 14
38000: PUSH
38001: LD_VAR 0 9
38005: ARRAY
38006: PUSH
38007: LD_INT 1
38009: ARRAY
38010: PPUSH
38011: LD_VAR 0 14
38015: PUSH
38016: LD_VAR 0 9
38020: ARRAY
38021: PUSH
38022: LD_INT 2
38024: ARRAY
38025: PPUSH
38026: CALL_OW 351
38030: PUSH
38031: LD_VAR 0 14
38035: PUSH
38036: LD_VAR 0 9
38040: ARRAY
38041: PUSH
38042: LD_INT 1
38044: ARRAY
38045: PPUSH
38046: LD_VAR 0 14
38050: PUSH
38051: LD_VAR 0 9
38055: ARRAY
38056: PUSH
38057: LD_INT 2
38059: ARRAY
38060: PPUSH
38061: CALL_OW 488
38065: NOT
38066: OR
38067: PUSH
38068: LD_VAR 0 13
38072: PPUSH
38073: CALL_OW 247
38077: PUSH
38078: LD_INT 3
38080: EQUAL
38081: OR
38082: IFFALSE 38088
// exit ;
38084: POP
38085: POP
38086: GO 38632
// if not tmp then
38088: LD_VAR 0 13
38092: NOT
38093: IFFALSE 38097
// continue ;
38095: GO 37953
// result := true ;
38097: LD_ADDR_VAR 0 8
38101: PUSH
38102: LD_INT 1
38104: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38105: LD_VAR 0 6
38109: PUSH
38110: LD_VAR 0 13
38114: PPUSH
38115: CALL_OW 247
38119: PUSH
38120: LD_INT 2
38122: EQUAL
38123: AND
38124: PUSH
38125: LD_VAR 0 13
38129: PPUSH
38130: CALL_OW 263
38134: PUSH
38135: LD_INT 1
38137: EQUAL
38138: AND
38139: IFFALSE 38303
// begin if IsDrivenBy ( tmp ) then
38141: LD_VAR 0 13
38145: PPUSH
38146: CALL_OW 311
38150: IFFALSE 38154
// continue ;
38152: GO 37953
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38154: LD_VAR 0 6
38158: PPUSH
38159: LD_INT 3
38161: PUSH
38162: LD_INT 60
38164: PUSH
38165: EMPTY
38166: LIST
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 3
38174: PUSH
38175: LD_INT 55
38177: PUSH
38178: EMPTY
38179: LIST
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PPUSH
38189: CALL_OW 72
38193: IFFALSE 38301
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38195: LD_ADDR_VAR 0 18
38199: PUSH
38200: LD_VAR 0 6
38204: PPUSH
38205: LD_INT 3
38207: PUSH
38208: LD_INT 60
38210: PUSH
38211: EMPTY
38212: LIST
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 3
38220: PUSH
38221: LD_INT 55
38223: PUSH
38224: EMPTY
38225: LIST
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PPUSH
38235: CALL_OW 72
38239: PUSH
38240: LD_INT 1
38242: ARRAY
38243: ST_TO_ADDR
// if IsInUnit ( driver ) then
38244: LD_VAR 0 18
38248: PPUSH
38249: CALL_OW 310
38253: IFFALSE 38264
// ComExit ( driver ) ;
38255: LD_VAR 0 18
38259: PPUSH
38260: CALL 63644 0 1
// AddComEnterUnit ( driver , tmp ) ;
38264: LD_VAR 0 18
38268: PPUSH
38269: LD_VAR 0 13
38273: PPUSH
38274: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38278: LD_VAR 0 18
38282: PPUSH
38283: LD_VAR 0 7
38287: PPUSH
38288: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38292: LD_VAR 0 18
38296: PPUSH
38297: CALL_OW 181
// end ; continue ;
38301: GO 37953
// end ; if not cleaners or not tmp in cleaners then
38303: LD_VAR 0 6
38307: NOT
38308: PUSH
38309: LD_VAR 0 13
38313: PUSH
38314: LD_VAR 0 6
38318: IN
38319: NOT
38320: OR
38321: IFFALSE 38628
// begin if dep then
38323: LD_VAR 0 17
38327: IFFALSE 38463
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38329: LD_ADDR_VAR 0 16
38333: PUSH
38334: LD_VAR 0 17
38338: PUSH
38339: LD_INT 1
38341: ARRAY
38342: PPUSH
38343: CALL_OW 250
38347: PPUSH
38348: LD_VAR 0 17
38352: PUSH
38353: LD_INT 1
38355: ARRAY
38356: PPUSH
38357: CALL_OW 254
38361: PPUSH
38362: LD_INT 5
38364: PPUSH
38365: CALL_OW 272
38369: PUSH
38370: LD_VAR 0 17
38374: PUSH
38375: LD_INT 1
38377: ARRAY
38378: PPUSH
38379: CALL_OW 251
38383: PPUSH
38384: LD_VAR 0 17
38388: PUSH
38389: LD_INT 1
38391: ARRAY
38392: PPUSH
38393: CALL_OW 254
38397: PPUSH
38398: LD_INT 5
38400: PPUSH
38401: CALL_OW 273
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38410: LD_VAR 0 16
38414: PUSH
38415: LD_INT 1
38417: ARRAY
38418: PPUSH
38419: LD_VAR 0 16
38423: PUSH
38424: LD_INT 2
38426: ARRAY
38427: PPUSH
38428: CALL_OW 488
38432: IFFALSE 38463
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38434: LD_VAR 0 13
38438: PPUSH
38439: LD_VAR 0 16
38443: PUSH
38444: LD_INT 1
38446: ARRAY
38447: PPUSH
38448: LD_VAR 0 16
38452: PUSH
38453: LD_INT 2
38455: ARRAY
38456: PPUSH
38457: CALL_OW 111
// continue ;
38461: GO 37953
// end ; end ; r := GetDir ( tmp ) ;
38463: LD_ADDR_VAR 0 15
38467: PUSH
38468: LD_VAR 0 13
38472: PPUSH
38473: CALL_OW 254
38477: ST_TO_ADDR
// if r = 5 then
38478: LD_VAR 0 15
38482: PUSH
38483: LD_INT 5
38485: EQUAL
38486: IFFALSE 38496
// r := 0 ;
38488: LD_ADDR_VAR 0 15
38492: PUSH
38493: LD_INT 0
38495: ST_TO_ADDR
// for j = r to 5 do
38496: LD_ADDR_VAR 0 10
38500: PUSH
38501: DOUBLE
38502: LD_VAR 0 15
38506: DEC
38507: ST_TO_ADDR
38508: LD_INT 5
38510: PUSH
38511: FOR_TO
38512: IFFALSE 38626
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38514: LD_ADDR_VAR 0 11
38518: PUSH
38519: LD_VAR 0 13
38523: PPUSH
38524: CALL_OW 250
38528: PPUSH
38529: LD_VAR 0 10
38533: PPUSH
38534: LD_INT 2
38536: PPUSH
38537: CALL_OW 272
38541: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38542: LD_ADDR_VAR 0 12
38546: PUSH
38547: LD_VAR 0 13
38551: PPUSH
38552: CALL_OW 251
38556: PPUSH
38557: LD_VAR 0 10
38561: PPUSH
38562: LD_INT 2
38564: PPUSH
38565: CALL_OW 273
38569: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38570: LD_VAR 0 11
38574: PPUSH
38575: LD_VAR 0 12
38579: PPUSH
38580: CALL_OW 488
38584: PUSH
38585: LD_VAR 0 11
38589: PPUSH
38590: LD_VAR 0 12
38594: PPUSH
38595: CALL_OW 428
38599: NOT
38600: AND
38601: IFFALSE 38624
// begin ComMoveXY ( tmp , _x , _y ) ;
38603: LD_VAR 0 13
38607: PPUSH
38608: LD_VAR 0 11
38612: PPUSH
38613: LD_VAR 0 12
38617: PPUSH
38618: CALL_OW 111
// break ;
38622: GO 38626
// end ; end ;
38624: GO 38511
38626: POP
38627: POP
// end ; end ;
38628: GO 37953
38630: POP
38631: POP
// end ;
38632: LD_VAR 0 8
38636: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38637: LD_INT 0
38639: PPUSH
// result := true ;
38640: LD_ADDR_VAR 0 3
38644: PUSH
38645: LD_INT 1
38647: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38648: LD_VAR 0 2
38652: PUSH
38653: LD_INT 24
38655: DOUBLE
38656: EQUAL
38657: IFTRUE 38667
38659: LD_INT 33
38661: DOUBLE
38662: EQUAL
38663: IFTRUE 38667
38665: GO 38692
38667: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38668: LD_ADDR_VAR 0 3
38672: PUSH
38673: LD_INT 32
38675: PPUSH
38676: LD_VAR 0 1
38680: PPUSH
38681: CALL_OW 321
38685: PUSH
38686: LD_INT 2
38688: EQUAL
38689: ST_TO_ADDR
38690: GO 39008
38692: LD_INT 20
38694: DOUBLE
38695: EQUAL
38696: IFTRUE 38700
38698: GO 38725
38700: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38701: LD_ADDR_VAR 0 3
38705: PUSH
38706: LD_INT 6
38708: PPUSH
38709: LD_VAR 0 1
38713: PPUSH
38714: CALL_OW 321
38718: PUSH
38719: LD_INT 2
38721: EQUAL
38722: ST_TO_ADDR
38723: GO 39008
38725: LD_INT 22
38727: DOUBLE
38728: EQUAL
38729: IFTRUE 38739
38731: LD_INT 36
38733: DOUBLE
38734: EQUAL
38735: IFTRUE 38739
38737: GO 38764
38739: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38740: LD_ADDR_VAR 0 3
38744: PUSH
38745: LD_INT 15
38747: PPUSH
38748: LD_VAR 0 1
38752: PPUSH
38753: CALL_OW 321
38757: PUSH
38758: LD_INT 2
38760: EQUAL
38761: ST_TO_ADDR
38762: GO 39008
38764: LD_INT 30
38766: DOUBLE
38767: EQUAL
38768: IFTRUE 38772
38770: GO 38797
38772: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38773: LD_ADDR_VAR 0 3
38777: PUSH
38778: LD_INT 20
38780: PPUSH
38781: LD_VAR 0 1
38785: PPUSH
38786: CALL_OW 321
38790: PUSH
38791: LD_INT 2
38793: EQUAL
38794: ST_TO_ADDR
38795: GO 39008
38797: LD_INT 28
38799: DOUBLE
38800: EQUAL
38801: IFTRUE 38811
38803: LD_INT 21
38805: DOUBLE
38806: EQUAL
38807: IFTRUE 38811
38809: GO 38836
38811: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38812: LD_ADDR_VAR 0 3
38816: PUSH
38817: LD_INT 21
38819: PPUSH
38820: LD_VAR 0 1
38824: PPUSH
38825: CALL_OW 321
38829: PUSH
38830: LD_INT 2
38832: EQUAL
38833: ST_TO_ADDR
38834: GO 39008
38836: LD_INT 16
38838: DOUBLE
38839: EQUAL
38840: IFTRUE 38844
38842: GO 38869
38844: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38845: LD_ADDR_VAR 0 3
38849: PUSH
38850: LD_INT 84
38852: PPUSH
38853: LD_VAR 0 1
38857: PPUSH
38858: CALL_OW 321
38862: PUSH
38863: LD_INT 2
38865: EQUAL
38866: ST_TO_ADDR
38867: GO 39008
38869: LD_INT 19
38871: DOUBLE
38872: EQUAL
38873: IFTRUE 38883
38875: LD_INT 23
38877: DOUBLE
38878: EQUAL
38879: IFTRUE 38883
38881: GO 38908
38883: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38884: LD_ADDR_VAR 0 3
38888: PUSH
38889: LD_INT 83
38891: PPUSH
38892: LD_VAR 0 1
38896: PPUSH
38897: CALL_OW 321
38901: PUSH
38902: LD_INT 2
38904: EQUAL
38905: ST_TO_ADDR
38906: GO 39008
38908: LD_INT 17
38910: DOUBLE
38911: EQUAL
38912: IFTRUE 38916
38914: GO 38941
38916: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38917: LD_ADDR_VAR 0 3
38921: PUSH
38922: LD_INT 39
38924: PPUSH
38925: LD_VAR 0 1
38929: PPUSH
38930: CALL_OW 321
38934: PUSH
38935: LD_INT 2
38937: EQUAL
38938: ST_TO_ADDR
38939: GO 39008
38941: LD_INT 18
38943: DOUBLE
38944: EQUAL
38945: IFTRUE 38949
38947: GO 38974
38949: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38950: LD_ADDR_VAR 0 3
38954: PUSH
38955: LD_INT 40
38957: PPUSH
38958: LD_VAR 0 1
38962: PPUSH
38963: CALL_OW 321
38967: PUSH
38968: LD_INT 2
38970: EQUAL
38971: ST_TO_ADDR
38972: GO 39008
38974: LD_INT 27
38976: DOUBLE
38977: EQUAL
38978: IFTRUE 38982
38980: GO 39007
38982: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38983: LD_ADDR_VAR 0 3
38987: PUSH
38988: LD_INT 35
38990: PPUSH
38991: LD_VAR 0 1
38995: PPUSH
38996: CALL_OW 321
39000: PUSH
39001: LD_INT 2
39003: EQUAL
39004: ST_TO_ADDR
39005: GO 39008
39007: POP
// end ;
39008: LD_VAR 0 3
39012: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39013: LD_INT 0
39015: PPUSH
39016: PPUSH
39017: PPUSH
39018: PPUSH
39019: PPUSH
39020: PPUSH
39021: PPUSH
39022: PPUSH
39023: PPUSH
39024: PPUSH
39025: PPUSH
// result := false ;
39026: LD_ADDR_VAR 0 6
39030: PUSH
39031: LD_INT 0
39033: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39034: LD_VAR 0 1
39038: NOT
39039: PUSH
39040: LD_VAR 0 1
39044: PPUSH
39045: CALL_OW 266
39049: PUSH
39050: LD_INT 0
39052: PUSH
39053: LD_INT 1
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: IN
39060: NOT
39061: OR
39062: PUSH
39063: LD_VAR 0 2
39067: NOT
39068: OR
39069: PUSH
39070: LD_VAR 0 5
39074: PUSH
39075: LD_INT 0
39077: PUSH
39078: LD_INT 1
39080: PUSH
39081: LD_INT 2
39083: PUSH
39084: LD_INT 3
39086: PUSH
39087: LD_INT 4
39089: PUSH
39090: LD_INT 5
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: IN
39101: NOT
39102: OR
39103: PUSH
39104: LD_VAR 0 3
39108: PPUSH
39109: LD_VAR 0 4
39113: PPUSH
39114: CALL_OW 488
39118: NOT
39119: OR
39120: IFFALSE 39124
// exit ;
39122: GO 39860
// side := GetSide ( depot ) ;
39124: LD_ADDR_VAR 0 9
39128: PUSH
39129: LD_VAR 0 1
39133: PPUSH
39134: CALL_OW 255
39138: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39139: LD_VAR 0 9
39143: PPUSH
39144: LD_VAR 0 2
39148: PPUSH
39149: CALL 38637 0 2
39153: NOT
39154: IFFALSE 39158
// exit ;
39156: GO 39860
// pom := GetBase ( depot ) ;
39158: LD_ADDR_VAR 0 10
39162: PUSH
39163: LD_VAR 0 1
39167: PPUSH
39168: CALL_OW 274
39172: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39173: LD_ADDR_VAR 0 11
39177: PUSH
39178: LD_VAR 0 2
39182: PPUSH
39183: LD_VAR 0 1
39187: PPUSH
39188: CALL_OW 248
39192: PPUSH
39193: CALL_OW 450
39197: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39198: LD_VAR 0 10
39202: PPUSH
39203: LD_INT 1
39205: PPUSH
39206: CALL_OW 275
39210: PUSH
39211: LD_VAR 0 11
39215: PUSH
39216: LD_INT 1
39218: ARRAY
39219: GREATEREQUAL
39220: PUSH
39221: LD_VAR 0 10
39225: PPUSH
39226: LD_INT 2
39228: PPUSH
39229: CALL_OW 275
39233: PUSH
39234: LD_VAR 0 11
39238: PUSH
39239: LD_INT 2
39241: ARRAY
39242: GREATEREQUAL
39243: AND
39244: PUSH
39245: LD_VAR 0 10
39249: PPUSH
39250: LD_INT 3
39252: PPUSH
39253: CALL_OW 275
39257: PUSH
39258: LD_VAR 0 11
39262: PUSH
39263: LD_INT 3
39265: ARRAY
39266: GREATEREQUAL
39267: AND
39268: NOT
39269: IFFALSE 39273
// exit ;
39271: GO 39860
// if GetBType ( depot ) = b_depot then
39273: LD_VAR 0 1
39277: PPUSH
39278: CALL_OW 266
39282: PUSH
39283: LD_INT 0
39285: EQUAL
39286: IFFALSE 39298
// dist := 28 else
39288: LD_ADDR_VAR 0 14
39292: PUSH
39293: LD_INT 28
39295: ST_TO_ADDR
39296: GO 39306
// dist := 36 ;
39298: LD_ADDR_VAR 0 14
39302: PUSH
39303: LD_INT 36
39305: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39306: LD_VAR 0 1
39310: PPUSH
39311: LD_VAR 0 3
39315: PPUSH
39316: LD_VAR 0 4
39320: PPUSH
39321: CALL_OW 297
39325: PUSH
39326: LD_VAR 0 14
39330: GREATER
39331: IFFALSE 39335
// exit ;
39333: GO 39860
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39335: LD_ADDR_VAR 0 12
39339: PUSH
39340: LD_VAR 0 2
39344: PPUSH
39345: LD_VAR 0 3
39349: PPUSH
39350: LD_VAR 0 4
39354: PPUSH
39355: LD_VAR 0 5
39359: PPUSH
39360: LD_VAR 0 1
39364: PPUSH
39365: CALL_OW 248
39369: PPUSH
39370: LD_INT 0
39372: PPUSH
39373: CALL 39865 0 6
39377: ST_TO_ADDR
// if not hexes then
39378: LD_VAR 0 12
39382: NOT
39383: IFFALSE 39387
// exit ;
39385: GO 39860
// hex := GetHexInfo ( x , y ) ;
39387: LD_ADDR_VAR 0 15
39391: PUSH
39392: LD_VAR 0 3
39396: PPUSH
39397: LD_VAR 0 4
39401: PPUSH
39402: CALL_OW 546
39406: ST_TO_ADDR
// if hex [ 1 ] then
39407: LD_VAR 0 15
39411: PUSH
39412: LD_INT 1
39414: ARRAY
39415: IFFALSE 39419
// exit ;
39417: GO 39860
// height := hex [ 2 ] ;
39419: LD_ADDR_VAR 0 13
39423: PUSH
39424: LD_VAR 0 15
39428: PUSH
39429: LD_INT 2
39431: ARRAY
39432: ST_TO_ADDR
// for i = 1 to hexes do
39433: LD_ADDR_VAR 0 7
39437: PUSH
39438: DOUBLE
39439: LD_INT 1
39441: DEC
39442: ST_TO_ADDR
39443: LD_VAR 0 12
39447: PUSH
39448: FOR_TO
39449: IFFALSE 39779
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39451: LD_VAR 0 12
39455: PUSH
39456: LD_VAR 0 7
39460: ARRAY
39461: PUSH
39462: LD_INT 1
39464: ARRAY
39465: PPUSH
39466: LD_VAR 0 12
39470: PUSH
39471: LD_VAR 0 7
39475: ARRAY
39476: PUSH
39477: LD_INT 2
39479: ARRAY
39480: PPUSH
39481: CALL_OW 488
39485: NOT
39486: PUSH
39487: LD_VAR 0 12
39491: PUSH
39492: LD_VAR 0 7
39496: ARRAY
39497: PUSH
39498: LD_INT 1
39500: ARRAY
39501: PPUSH
39502: LD_VAR 0 12
39506: PUSH
39507: LD_VAR 0 7
39511: ARRAY
39512: PUSH
39513: LD_INT 2
39515: ARRAY
39516: PPUSH
39517: CALL_OW 428
39521: PUSH
39522: LD_INT 0
39524: GREATER
39525: OR
39526: PUSH
39527: LD_VAR 0 12
39531: PUSH
39532: LD_VAR 0 7
39536: ARRAY
39537: PUSH
39538: LD_INT 1
39540: ARRAY
39541: PPUSH
39542: LD_VAR 0 12
39546: PUSH
39547: LD_VAR 0 7
39551: ARRAY
39552: PUSH
39553: LD_INT 2
39555: ARRAY
39556: PPUSH
39557: CALL_OW 351
39561: OR
39562: IFFALSE 39568
// exit ;
39564: POP
39565: POP
39566: GO 39860
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39568: LD_ADDR_VAR 0 8
39572: PUSH
39573: LD_VAR 0 12
39577: PUSH
39578: LD_VAR 0 7
39582: ARRAY
39583: PUSH
39584: LD_INT 1
39586: ARRAY
39587: PPUSH
39588: LD_VAR 0 12
39592: PUSH
39593: LD_VAR 0 7
39597: ARRAY
39598: PUSH
39599: LD_INT 2
39601: ARRAY
39602: PPUSH
39603: CALL_OW 546
39607: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39608: LD_VAR 0 8
39612: PUSH
39613: LD_INT 1
39615: ARRAY
39616: PUSH
39617: LD_VAR 0 8
39621: PUSH
39622: LD_INT 2
39624: ARRAY
39625: PUSH
39626: LD_VAR 0 13
39630: PUSH
39631: LD_INT 2
39633: PLUS
39634: GREATER
39635: OR
39636: PUSH
39637: LD_VAR 0 8
39641: PUSH
39642: LD_INT 2
39644: ARRAY
39645: PUSH
39646: LD_VAR 0 13
39650: PUSH
39651: LD_INT 2
39653: MINUS
39654: LESS
39655: OR
39656: PUSH
39657: LD_VAR 0 8
39661: PUSH
39662: LD_INT 3
39664: ARRAY
39665: PUSH
39666: LD_INT 0
39668: PUSH
39669: LD_INT 8
39671: PUSH
39672: LD_INT 9
39674: PUSH
39675: LD_INT 10
39677: PUSH
39678: LD_INT 11
39680: PUSH
39681: LD_INT 12
39683: PUSH
39684: LD_INT 13
39686: PUSH
39687: LD_INT 16
39689: PUSH
39690: LD_INT 17
39692: PUSH
39693: LD_INT 18
39695: PUSH
39696: LD_INT 19
39698: PUSH
39699: LD_INT 20
39701: PUSH
39702: LD_INT 21
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: IN
39720: NOT
39721: OR
39722: PUSH
39723: LD_VAR 0 8
39727: PUSH
39728: LD_INT 5
39730: ARRAY
39731: NOT
39732: OR
39733: PUSH
39734: LD_VAR 0 8
39738: PUSH
39739: LD_INT 6
39741: ARRAY
39742: PUSH
39743: LD_INT 1
39745: PUSH
39746: LD_INT 2
39748: PUSH
39749: LD_INT 7
39751: PUSH
39752: LD_INT 9
39754: PUSH
39755: LD_INT 10
39757: PUSH
39758: LD_INT 11
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: IN
39769: NOT
39770: OR
39771: IFFALSE 39777
// exit ;
39773: POP
39774: POP
39775: GO 39860
// end ;
39777: GO 39448
39779: POP
39780: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39781: LD_VAR 0 9
39785: PPUSH
39786: LD_VAR 0 3
39790: PPUSH
39791: LD_VAR 0 4
39795: PPUSH
39796: LD_INT 20
39798: PPUSH
39799: CALL 31812 0 4
39803: PUSH
39804: LD_INT 4
39806: ARRAY
39807: IFFALSE 39811
// exit ;
39809: GO 39860
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39811: LD_VAR 0 2
39815: PUSH
39816: LD_INT 29
39818: PUSH
39819: LD_INT 30
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: IN
39826: PUSH
39827: LD_VAR 0 3
39831: PPUSH
39832: LD_VAR 0 4
39836: PPUSH
39837: LD_VAR 0 9
39841: PPUSH
39842: CALL_OW 440
39846: NOT
39847: AND
39848: IFFALSE 39852
// exit ;
39850: GO 39860
// result := true ;
39852: LD_ADDR_VAR 0 6
39856: PUSH
39857: LD_INT 1
39859: ST_TO_ADDR
// end ;
39860: LD_VAR 0 6
39864: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39865: LD_INT 0
39867: PPUSH
39868: PPUSH
39869: PPUSH
39870: PPUSH
39871: PPUSH
39872: PPUSH
39873: PPUSH
39874: PPUSH
39875: PPUSH
39876: PPUSH
39877: PPUSH
39878: PPUSH
39879: PPUSH
39880: PPUSH
39881: PPUSH
39882: PPUSH
39883: PPUSH
39884: PPUSH
39885: PPUSH
39886: PPUSH
39887: PPUSH
39888: PPUSH
39889: PPUSH
39890: PPUSH
39891: PPUSH
39892: PPUSH
39893: PPUSH
39894: PPUSH
39895: PPUSH
39896: PPUSH
39897: PPUSH
39898: PPUSH
39899: PPUSH
39900: PPUSH
39901: PPUSH
39902: PPUSH
39903: PPUSH
39904: PPUSH
39905: PPUSH
39906: PPUSH
39907: PPUSH
39908: PPUSH
39909: PPUSH
39910: PPUSH
39911: PPUSH
39912: PPUSH
39913: PPUSH
39914: PPUSH
39915: PPUSH
39916: PPUSH
39917: PPUSH
39918: PPUSH
39919: PPUSH
39920: PPUSH
39921: PPUSH
39922: PPUSH
39923: PPUSH
39924: PPUSH
// result = [ ] ;
39925: LD_ADDR_VAR 0 7
39929: PUSH
39930: EMPTY
39931: ST_TO_ADDR
// temp_list = [ ] ;
39932: LD_ADDR_VAR 0 9
39936: PUSH
39937: EMPTY
39938: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39939: LD_VAR 0 4
39943: PUSH
39944: LD_INT 0
39946: PUSH
39947: LD_INT 1
39949: PUSH
39950: LD_INT 2
39952: PUSH
39953: LD_INT 3
39955: PUSH
39956: LD_INT 4
39958: PUSH
39959: LD_INT 5
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: IN
39970: NOT
39971: PUSH
39972: LD_VAR 0 1
39976: PUSH
39977: LD_INT 0
39979: PUSH
39980: LD_INT 1
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: IN
39987: PUSH
39988: LD_VAR 0 5
39992: PUSH
39993: LD_INT 1
39995: PUSH
39996: LD_INT 2
39998: PUSH
39999: LD_INT 3
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: LIST
40006: IN
40007: NOT
40008: AND
40009: OR
40010: IFFALSE 40014
// exit ;
40012: GO 58405
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40014: LD_VAR 0 1
40018: PUSH
40019: LD_INT 6
40021: PUSH
40022: LD_INT 7
40024: PUSH
40025: LD_INT 8
40027: PUSH
40028: LD_INT 13
40030: PUSH
40031: LD_INT 12
40033: PUSH
40034: LD_INT 15
40036: PUSH
40037: LD_INT 11
40039: PUSH
40040: LD_INT 14
40042: PUSH
40043: LD_INT 10
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: IN
40057: IFFALSE 40067
// btype = b_lab ;
40059: LD_ADDR_VAR 0 1
40063: PUSH
40064: LD_INT 6
40066: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40067: LD_VAR 0 6
40071: PUSH
40072: LD_INT 0
40074: PUSH
40075: LD_INT 1
40077: PUSH
40078: LD_INT 2
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: LIST
40085: IN
40086: NOT
40087: PUSH
40088: LD_VAR 0 1
40092: PUSH
40093: LD_INT 0
40095: PUSH
40096: LD_INT 1
40098: PUSH
40099: LD_INT 2
40101: PUSH
40102: LD_INT 3
40104: PUSH
40105: LD_INT 6
40107: PUSH
40108: LD_INT 36
40110: PUSH
40111: LD_INT 4
40113: PUSH
40114: LD_INT 5
40116: PUSH
40117: LD_INT 31
40119: PUSH
40120: LD_INT 32
40122: PUSH
40123: LD_INT 33
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: IN
40139: NOT
40140: PUSH
40141: LD_VAR 0 6
40145: PUSH
40146: LD_INT 1
40148: EQUAL
40149: AND
40150: OR
40151: PUSH
40152: LD_VAR 0 1
40156: PUSH
40157: LD_INT 2
40159: PUSH
40160: LD_INT 3
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: IN
40167: NOT
40168: PUSH
40169: LD_VAR 0 6
40173: PUSH
40174: LD_INT 2
40176: EQUAL
40177: AND
40178: OR
40179: IFFALSE 40189
// mode = 0 ;
40181: LD_ADDR_VAR 0 6
40185: PUSH
40186: LD_INT 0
40188: ST_TO_ADDR
// case mode of 0 :
40189: LD_VAR 0 6
40193: PUSH
40194: LD_INT 0
40196: DOUBLE
40197: EQUAL
40198: IFTRUE 40202
40200: GO 51655
40202: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40203: LD_ADDR_VAR 0 11
40207: PUSH
40208: LD_INT 0
40210: PUSH
40211: LD_INT 0
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 0
40220: PUSH
40221: LD_INT 1
40223: NEG
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 1
40231: PUSH
40232: LD_INT 0
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 1
40241: PUSH
40242: LD_INT 1
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 0
40251: PUSH
40252: LD_INT 1
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 1
40261: NEG
40262: PUSH
40263: LD_INT 0
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 1
40272: NEG
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 1
40284: NEG
40285: PUSH
40286: LD_INT 2
40288: NEG
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 0
40296: PUSH
40297: LD_INT 2
40299: NEG
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 1
40307: PUSH
40308: LD_INT 1
40310: NEG
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 1
40318: PUSH
40319: LD_INT 2
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 0
40328: PUSH
40329: LD_INT 2
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 1
40338: NEG
40339: PUSH
40340: LD_INT 1
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 1
40349: PUSH
40350: LD_INT 3
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 0
40359: PUSH
40360: LD_INT 3
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 1
40369: NEG
40370: PUSH
40371: LD_INT 2
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40396: LD_ADDR_VAR 0 12
40400: PUSH
40401: LD_INT 0
40403: PUSH
40404: LD_INT 0
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 0
40413: PUSH
40414: LD_INT 1
40416: NEG
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 1
40424: PUSH
40425: LD_INT 0
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 1
40434: PUSH
40435: LD_INT 1
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 0
40444: PUSH
40445: LD_INT 1
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 1
40454: NEG
40455: PUSH
40456: LD_INT 0
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 1
40465: NEG
40466: PUSH
40467: LD_INT 1
40469: NEG
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 1
40477: PUSH
40478: LD_INT 1
40480: NEG
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 2
40488: PUSH
40489: LD_INT 0
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 2
40498: PUSH
40499: LD_INT 1
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 1
40508: NEG
40509: PUSH
40510: LD_INT 1
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 2
40519: NEG
40520: PUSH
40521: LD_INT 0
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 2
40530: NEG
40531: PUSH
40532: LD_INT 1
40534: NEG
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 2
40542: NEG
40543: PUSH
40544: LD_INT 1
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 3
40553: NEG
40554: PUSH
40555: LD_INT 0
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 3
40564: NEG
40565: PUSH
40566: LD_INT 1
40568: NEG
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40592: LD_ADDR_VAR 0 13
40596: PUSH
40597: LD_INT 0
40599: PUSH
40600: LD_INT 0
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 0
40609: PUSH
40610: LD_INT 1
40612: NEG
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 1
40620: PUSH
40621: LD_INT 0
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 1
40630: PUSH
40631: LD_INT 1
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 0
40640: PUSH
40641: LD_INT 1
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 1
40650: NEG
40651: PUSH
40652: LD_INT 0
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 1
40661: NEG
40662: PUSH
40663: LD_INT 1
40665: NEG
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 1
40673: NEG
40674: PUSH
40675: LD_INT 2
40677: NEG
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: LD_INT 2
40685: PUSH
40686: LD_INT 1
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 2
40695: PUSH
40696: LD_INT 2
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 1
40705: PUSH
40706: LD_INT 2
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 2
40715: NEG
40716: PUSH
40717: LD_INT 1
40719: NEG
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 2
40727: NEG
40728: PUSH
40729: LD_INT 2
40731: NEG
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 2
40739: NEG
40740: PUSH
40741: LD_INT 3
40743: NEG
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 3
40751: NEG
40752: PUSH
40753: LD_INT 2
40755: NEG
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 3
40763: NEG
40764: PUSH
40765: LD_INT 3
40767: NEG
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40791: LD_ADDR_VAR 0 14
40795: PUSH
40796: LD_INT 0
40798: PUSH
40799: LD_INT 0
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 0
40808: PUSH
40809: LD_INT 1
40811: NEG
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 1
40819: PUSH
40820: LD_INT 0
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 1
40829: PUSH
40830: LD_INT 1
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 0
40839: PUSH
40840: LD_INT 1
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 1
40849: NEG
40850: PUSH
40851: LD_INT 0
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 1
40860: NEG
40861: PUSH
40862: LD_INT 1
40864: NEG
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 1
40872: NEG
40873: PUSH
40874: LD_INT 2
40876: NEG
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 0
40884: PUSH
40885: LD_INT 2
40887: NEG
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 1
40895: PUSH
40896: LD_INT 1
40898: NEG
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 1
40906: PUSH
40907: LD_INT 2
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 0
40916: PUSH
40917: LD_INT 2
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 1
40926: NEG
40927: PUSH
40928: LD_INT 1
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 1
40937: NEG
40938: PUSH
40939: LD_INT 3
40941: NEG
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 0
40949: PUSH
40950: LD_INT 3
40952: NEG
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 1
40960: PUSH
40961: LD_INT 2
40963: NEG
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40987: LD_ADDR_VAR 0 15
40991: PUSH
40992: LD_INT 0
40994: PUSH
40995: LD_INT 0
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 0
41004: PUSH
41005: LD_INT 1
41007: NEG
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 1
41015: PUSH
41016: LD_INT 0
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 1
41025: PUSH
41026: LD_INT 1
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 0
41035: PUSH
41036: LD_INT 1
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 1
41045: NEG
41046: PUSH
41047: LD_INT 0
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 1
41056: NEG
41057: PUSH
41058: LD_INT 1
41060: NEG
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 1
41068: PUSH
41069: LD_INT 1
41071: NEG
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 2
41079: PUSH
41080: LD_INT 0
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 2
41089: PUSH
41090: LD_INT 1
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 1
41099: NEG
41100: PUSH
41101: LD_INT 1
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 2
41110: NEG
41111: PUSH
41112: LD_INT 0
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 2
41121: NEG
41122: PUSH
41123: LD_INT 1
41125: NEG
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 2
41133: PUSH
41134: LD_INT 1
41136: NEG
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 3
41144: PUSH
41145: LD_INT 0
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 3
41154: PUSH
41155: LD_INT 1
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41180: LD_ADDR_VAR 0 16
41184: PUSH
41185: LD_INT 0
41187: PUSH
41188: LD_INT 0
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 0
41197: PUSH
41198: LD_INT 1
41200: NEG
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 1
41208: PUSH
41209: LD_INT 0
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 1
41218: PUSH
41219: LD_INT 1
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 0
41228: PUSH
41229: LD_INT 1
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 1
41238: NEG
41239: PUSH
41240: LD_INT 0
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 1
41249: NEG
41250: PUSH
41251: LD_INT 1
41253: NEG
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 1
41261: NEG
41262: PUSH
41263: LD_INT 2
41265: NEG
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 2
41273: PUSH
41274: LD_INT 1
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 2
41283: PUSH
41284: LD_INT 2
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 1
41293: PUSH
41294: LD_INT 2
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 2
41303: NEG
41304: PUSH
41305: LD_INT 1
41307: NEG
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 2
41315: NEG
41316: PUSH
41317: LD_INT 2
41319: NEG
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 3
41327: PUSH
41328: LD_INT 2
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 3
41337: PUSH
41338: LD_INT 3
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 2
41347: PUSH
41348: LD_INT 3
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41373: LD_ADDR_VAR 0 17
41377: PUSH
41378: LD_INT 0
41380: PUSH
41381: LD_INT 0
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 0
41390: PUSH
41391: LD_INT 1
41393: NEG
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 1
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 1
41411: PUSH
41412: LD_INT 1
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 0
41421: PUSH
41422: LD_INT 1
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 1
41431: NEG
41432: PUSH
41433: LD_INT 0
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 1
41442: NEG
41443: PUSH
41444: LD_INT 1
41446: NEG
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 1
41454: NEG
41455: PUSH
41456: LD_INT 2
41458: NEG
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 0
41466: PUSH
41467: LD_INT 2
41469: NEG
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 1
41477: PUSH
41478: LD_INT 1
41480: NEG
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 2
41488: PUSH
41489: LD_INT 0
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 2
41498: PUSH
41499: LD_INT 1
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 2
41508: PUSH
41509: LD_INT 2
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 1
41518: PUSH
41519: LD_INT 2
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 0
41528: PUSH
41529: LD_INT 2
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 1
41538: NEG
41539: PUSH
41540: LD_INT 1
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 2
41549: NEG
41550: PUSH
41551: LD_INT 0
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 2
41560: NEG
41561: PUSH
41562: LD_INT 1
41564: NEG
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 2
41572: NEG
41573: PUSH
41574: LD_INT 2
41576: NEG
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41603: LD_ADDR_VAR 0 18
41607: PUSH
41608: LD_INT 0
41610: PUSH
41611: LD_INT 0
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 0
41620: PUSH
41621: LD_INT 1
41623: NEG
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 1
41631: PUSH
41632: LD_INT 0
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 1
41641: PUSH
41642: LD_INT 1
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 0
41651: PUSH
41652: LD_INT 1
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 1
41661: NEG
41662: PUSH
41663: LD_INT 0
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 1
41672: NEG
41673: PUSH
41674: LD_INT 1
41676: NEG
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 1
41684: NEG
41685: PUSH
41686: LD_INT 2
41688: NEG
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 0
41696: PUSH
41697: LD_INT 2
41699: NEG
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 1
41707: PUSH
41708: LD_INT 1
41710: NEG
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 2
41718: PUSH
41719: LD_INT 0
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 2
41728: PUSH
41729: LD_INT 1
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 2
41738: PUSH
41739: LD_INT 2
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 1
41748: PUSH
41749: LD_INT 2
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 0
41758: PUSH
41759: LD_INT 2
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 1
41768: NEG
41769: PUSH
41770: LD_INT 1
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 2
41779: NEG
41780: PUSH
41781: LD_INT 0
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 2
41790: NEG
41791: PUSH
41792: LD_INT 1
41794: NEG
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 2
41802: NEG
41803: PUSH
41804: LD_INT 2
41806: NEG
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41833: LD_ADDR_VAR 0 19
41837: PUSH
41838: LD_INT 0
41840: PUSH
41841: LD_INT 0
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 0
41850: PUSH
41851: LD_INT 1
41853: NEG
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 1
41861: PUSH
41862: LD_INT 0
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 1
41871: PUSH
41872: LD_INT 1
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 0
41881: PUSH
41882: LD_INT 1
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 1
41891: NEG
41892: PUSH
41893: LD_INT 0
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 1
41902: NEG
41903: PUSH
41904: LD_INT 1
41906: NEG
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 1
41914: NEG
41915: PUSH
41916: LD_INT 2
41918: NEG
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 0
41926: PUSH
41927: LD_INT 2
41929: NEG
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 1
41937: PUSH
41938: LD_INT 1
41940: NEG
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 2
41948: PUSH
41949: LD_INT 0
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 2
41958: PUSH
41959: LD_INT 1
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 2
41968: PUSH
41969: LD_INT 2
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 1
41978: PUSH
41979: LD_INT 2
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 0
41988: PUSH
41989: LD_INT 2
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 1
41998: NEG
41999: PUSH
42000: LD_INT 1
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 2
42009: NEG
42010: PUSH
42011: LD_INT 0
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 2
42020: NEG
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 2
42032: NEG
42033: PUSH
42034: LD_INT 2
42036: NEG
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42063: LD_ADDR_VAR 0 20
42067: PUSH
42068: LD_INT 0
42070: PUSH
42071: LD_INT 0
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 0
42080: PUSH
42081: LD_INT 1
42083: NEG
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 1
42091: PUSH
42092: LD_INT 0
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 1
42101: PUSH
42102: LD_INT 1
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 0
42111: PUSH
42112: LD_INT 1
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 1
42121: NEG
42122: PUSH
42123: LD_INT 0
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 1
42132: NEG
42133: PUSH
42134: LD_INT 1
42136: NEG
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 1
42144: NEG
42145: PUSH
42146: LD_INT 2
42148: NEG
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 0
42156: PUSH
42157: LD_INT 2
42159: NEG
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 1
42167: PUSH
42168: LD_INT 1
42170: NEG
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 2
42178: PUSH
42179: LD_INT 0
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 2
42188: PUSH
42189: LD_INT 1
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 2
42198: PUSH
42199: LD_INT 2
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 1
42208: PUSH
42209: LD_INT 2
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 0
42218: PUSH
42219: LD_INT 2
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 1
42228: NEG
42229: PUSH
42230: LD_INT 1
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 2
42239: NEG
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 2
42250: NEG
42251: PUSH
42252: LD_INT 1
42254: NEG
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 2
42262: NEG
42263: PUSH
42264: LD_INT 2
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42293: LD_ADDR_VAR 0 21
42297: PUSH
42298: LD_INT 0
42300: PUSH
42301: LD_INT 0
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 0
42310: PUSH
42311: LD_INT 1
42313: NEG
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 1
42321: PUSH
42322: LD_INT 0
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 1
42331: PUSH
42332: LD_INT 1
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: LD_INT 1
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 1
42351: NEG
42352: PUSH
42353: LD_INT 0
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 1
42362: NEG
42363: PUSH
42364: LD_INT 1
42366: NEG
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 1
42374: NEG
42375: PUSH
42376: LD_INT 2
42378: NEG
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 0
42386: PUSH
42387: LD_INT 2
42389: NEG
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 1
42397: PUSH
42398: LD_INT 1
42400: NEG
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 2
42408: PUSH
42409: LD_INT 0
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 2
42418: PUSH
42419: LD_INT 1
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 2
42428: PUSH
42429: LD_INT 2
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 1
42438: PUSH
42439: LD_INT 2
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 0
42448: PUSH
42449: LD_INT 2
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 1
42458: NEG
42459: PUSH
42460: LD_INT 1
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 2
42469: NEG
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 2
42480: NEG
42481: PUSH
42482: LD_INT 1
42484: NEG
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 2
42492: NEG
42493: PUSH
42494: LD_INT 2
42496: NEG
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42523: LD_ADDR_VAR 0 22
42527: PUSH
42528: LD_INT 0
42530: PUSH
42531: LD_INT 0
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 0
42540: PUSH
42541: LD_INT 1
42543: NEG
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 1
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 1
42561: PUSH
42562: LD_INT 1
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 0
42571: PUSH
42572: LD_INT 1
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 1
42581: NEG
42582: PUSH
42583: LD_INT 0
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 1
42592: NEG
42593: PUSH
42594: LD_INT 1
42596: NEG
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 1
42604: NEG
42605: PUSH
42606: LD_INT 2
42608: NEG
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: LD_INT 2
42619: NEG
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 1
42627: PUSH
42628: LD_INT 1
42630: NEG
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 2
42638: PUSH
42639: LD_INT 0
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 2
42648: PUSH
42649: LD_INT 1
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 2
42658: PUSH
42659: LD_INT 2
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 1
42668: PUSH
42669: LD_INT 2
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 0
42678: PUSH
42679: LD_INT 2
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 1
42688: NEG
42689: PUSH
42690: LD_INT 1
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 2
42699: NEG
42700: PUSH
42701: LD_INT 0
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 2
42710: NEG
42711: PUSH
42712: LD_INT 1
42714: NEG
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 2
42722: NEG
42723: PUSH
42724: LD_INT 2
42726: NEG
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42753: LD_ADDR_VAR 0 23
42757: PUSH
42758: LD_INT 0
42760: PUSH
42761: LD_INT 0
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 0
42770: PUSH
42771: LD_INT 1
42773: NEG
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 1
42781: PUSH
42782: LD_INT 0
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 1
42791: PUSH
42792: LD_INT 1
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 0
42801: PUSH
42802: LD_INT 1
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 1
42811: NEG
42812: PUSH
42813: LD_INT 0
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 1
42822: NEG
42823: PUSH
42824: LD_INT 1
42826: NEG
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 1
42834: NEG
42835: PUSH
42836: LD_INT 2
42838: NEG
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 0
42846: PUSH
42847: LD_INT 2
42849: NEG
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 1
42857: PUSH
42858: LD_INT 1
42860: NEG
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 2
42868: PUSH
42869: LD_INT 0
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 2
42878: PUSH
42879: LD_INT 1
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 2
42888: PUSH
42889: LD_INT 2
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 1
42898: PUSH
42899: LD_INT 2
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 0
42908: PUSH
42909: LD_INT 2
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 1
42918: NEG
42919: PUSH
42920: LD_INT 1
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 2
42929: NEG
42930: PUSH
42931: LD_INT 0
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 2
42940: NEG
42941: PUSH
42942: LD_INT 1
42944: NEG
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 2
42952: NEG
42953: PUSH
42954: LD_INT 2
42956: NEG
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 2
42964: NEG
42965: PUSH
42966: LD_INT 3
42968: NEG
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 1
42976: NEG
42977: PUSH
42978: LD_INT 3
42980: NEG
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 1
42988: PUSH
42989: LD_INT 2
42991: NEG
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 2
42999: PUSH
43000: LD_INT 1
43002: NEG
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43033: LD_ADDR_VAR 0 24
43037: PUSH
43038: LD_INT 0
43040: PUSH
43041: LD_INT 0
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 0
43050: PUSH
43051: LD_INT 1
43053: NEG
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 1
43061: PUSH
43062: LD_INT 0
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 1
43071: PUSH
43072: LD_INT 1
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 0
43081: PUSH
43082: LD_INT 1
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 1
43091: NEG
43092: PUSH
43093: LD_INT 0
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 1
43102: NEG
43103: PUSH
43104: LD_INT 1
43106: NEG
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 1
43114: NEG
43115: PUSH
43116: LD_INT 2
43118: NEG
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 0
43126: PUSH
43127: LD_INT 2
43129: NEG
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 1
43137: PUSH
43138: LD_INT 1
43140: NEG
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 2
43148: PUSH
43149: LD_INT 0
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 2
43158: PUSH
43159: LD_INT 1
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 2
43168: PUSH
43169: LD_INT 2
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 1
43178: PUSH
43179: LD_INT 2
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 0
43188: PUSH
43189: LD_INT 2
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 1
43198: NEG
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 2
43209: NEG
43210: PUSH
43211: LD_INT 0
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 2
43220: NEG
43221: PUSH
43222: LD_INT 1
43224: NEG
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 2
43232: NEG
43233: PUSH
43234: LD_INT 2
43236: NEG
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 1
43244: PUSH
43245: LD_INT 2
43247: NEG
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 2
43255: PUSH
43256: LD_INT 1
43258: NEG
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 3
43266: PUSH
43267: LD_INT 1
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 3
43276: PUSH
43277: LD_INT 2
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43309: LD_ADDR_VAR 0 25
43313: PUSH
43314: LD_INT 0
43316: PUSH
43317: LD_INT 0
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 0
43326: PUSH
43327: LD_INT 1
43329: NEG
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 1
43337: PUSH
43338: LD_INT 0
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 1
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 0
43357: PUSH
43358: LD_INT 1
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 1
43367: NEG
43368: PUSH
43369: LD_INT 0
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 1
43378: NEG
43379: PUSH
43380: LD_INT 1
43382: NEG
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 1
43390: NEG
43391: PUSH
43392: LD_INT 2
43394: NEG
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 0
43402: PUSH
43403: LD_INT 2
43405: NEG
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 1
43413: PUSH
43414: LD_INT 1
43416: NEG
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 2
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 2
43434: PUSH
43435: LD_INT 1
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 2
43444: PUSH
43445: LD_INT 2
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 1
43454: PUSH
43455: LD_INT 2
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: LD_INT 2
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 1
43474: NEG
43475: PUSH
43476: LD_INT 1
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 2
43485: NEG
43486: PUSH
43487: LD_INT 0
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 2
43496: NEG
43497: PUSH
43498: LD_INT 1
43500: NEG
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 2
43508: NEG
43509: PUSH
43510: LD_INT 2
43512: NEG
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 3
43520: PUSH
43521: LD_INT 1
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 3
43530: PUSH
43531: LD_INT 2
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 2
43540: PUSH
43541: LD_INT 3
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 1
43550: PUSH
43551: LD_INT 3
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43583: LD_ADDR_VAR 0 26
43587: PUSH
43588: LD_INT 0
43590: PUSH
43591: LD_INT 0
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 0
43600: PUSH
43601: LD_INT 1
43603: NEG
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 1
43611: PUSH
43612: LD_INT 0
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 1
43621: PUSH
43622: LD_INT 1
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 0
43631: PUSH
43632: LD_INT 1
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 1
43641: NEG
43642: PUSH
43643: LD_INT 0
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 1
43652: NEG
43653: PUSH
43654: LD_INT 1
43656: NEG
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 1
43664: NEG
43665: PUSH
43666: LD_INT 2
43668: NEG
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 0
43676: PUSH
43677: LD_INT 2
43679: NEG
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 1
43687: PUSH
43688: LD_INT 1
43690: NEG
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 2
43698: PUSH
43699: LD_INT 0
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 2
43708: PUSH
43709: LD_INT 1
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 2
43718: PUSH
43719: LD_INT 2
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 1
43728: PUSH
43729: LD_INT 2
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 0
43738: PUSH
43739: LD_INT 2
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 1
43748: NEG
43749: PUSH
43750: LD_INT 1
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 2
43759: NEG
43760: PUSH
43761: LD_INT 0
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 2
43770: NEG
43771: PUSH
43772: LD_INT 1
43774: NEG
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 2
43782: NEG
43783: PUSH
43784: LD_INT 2
43786: NEG
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 2
43794: PUSH
43795: LD_INT 3
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 1
43804: PUSH
43805: LD_INT 3
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 1
43814: NEG
43815: PUSH
43816: LD_INT 2
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 2
43825: NEG
43826: PUSH
43827: LD_INT 1
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43859: LD_ADDR_VAR 0 27
43863: PUSH
43864: LD_INT 0
43866: PUSH
43867: LD_INT 0
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 0
43876: PUSH
43877: LD_INT 1
43879: NEG
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 1
43887: PUSH
43888: LD_INT 0
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 1
43897: PUSH
43898: LD_INT 1
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: LD_INT 1
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 1
43917: NEG
43918: PUSH
43919: LD_INT 0
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 1
43928: NEG
43929: PUSH
43930: LD_INT 1
43932: NEG
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 1
43940: NEG
43941: PUSH
43942: LD_INT 2
43944: NEG
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 0
43952: PUSH
43953: LD_INT 2
43955: NEG
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 1
43963: PUSH
43964: LD_INT 1
43966: NEG
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 2
43974: PUSH
43975: LD_INT 0
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 2
43984: PUSH
43985: LD_INT 1
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 2
43994: PUSH
43995: LD_INT 2
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 1
44004: PUSH
44005: LD_INT 2
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 0
44014: PUSH
44015: LD_INT 2
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 1
44024: NEG
44025: PUSH
44026: LD_INT 1
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 2
44035: NEG
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 2
44046: NEG
44047: PUSH
44048: LD_INT 1
44050: NEG
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 2
44058: NEG
44059: PUSH
44060: LD_INT 2
44062: NEG
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 1
44070: NEG
44071: PUSH
44072: LD_INT 2
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 2
44081: NEG
44082: PUSH
44083: LD_INT 1
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 3
44092: NEG
44093: PUSH
44094: LD_INT 1
44096: NEG
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 3
44104: NEG
44105: PUSH
44106: LD_INT 2
44108: NEG
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44139: LD_ADDR_VAR 0 28
44143: PUSH
44144: LD_INT 0
44146: PUSH
44147: LD_INT 0
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 0
44156: PUSH
44157: LD_INT 1
44159: NEG
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 1
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 1
44177: PUSH
44178: LD_INT 1
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 0
44187: PUSH
44188: LD_INT 1
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 1
44197: NEG
44198: PUSH
44199: LD_INT 0
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 1
44208: NEG
44209: PUSH
44210: LD_INT 1
44212: NEG
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 1
44220: NEG
44221: PUSH
44222: LD_INT 2
44224: NEG
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 0
44232: PUSH
44233: LD_INT 2
44235: NEG
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 1
44243: PUSH
44244: LD_INT 1
44246: NEG
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 2
44254: PUSH
44255: LD_INT 0
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 2
44264: PUSH
44265: LD_INT 1
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 2
44274: PUSH
44275: LD_INT 2
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 1
44284: PUSH
44285: LD_INT 2
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 0
44294: PUSH
44295: LD_INT 2
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 1
44304: NEG
44305: PUSH
44306: LD_INT 1
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 2
44315: NEG
44316: PUSH
44317: LD_INT 0
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 2
44326: NEG
44327: PUSH
44328: LD_INT 1
44330: NEG
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 2
44338: NEG
44339: PUSH
44340: LD_INT 2
44342: NEG
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 2
44350: NEG
44351: PUSH
44352: LD_INT 3
44354: NEG
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 1
44362: NEG
44363: PUSH
44364: LD_INT 3
44366: NEG
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 3
44374: NEG
44375: PUSH
44376: LD_INT 1
44378: NEG
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 3
44386: NEG
44387: PUSH
44388: LD_INT 2
44390: NEG
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44421: LD_ADDR_VAR 0 29
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: LD_INT 0
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 0
44438: PUSH
44439: LD_INT 1
44441: NEG
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: LD_INT 0
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 1
44459: PUSH
44460: LD_INT 1
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 0
44469: PUSH
44470: LD_INT 1
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 1
44479: NEG
44480: PUSH
44481: LD_INT 0
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 1
44490: NEG
44491: PUSH
44492: LD_INT 1
44494: NEG
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 1
44502: NEG
44503: PUSH
44504: LD_INT 2
44506: NEG
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: LD_INT 2
44517: NEG
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 1
44525: PUSH
44526: LD_INT 1
44528: NEG
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 2
44536: PUSH
44537: LD_INT 0
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 2
44546: PUSH
44547: LD_INT 1
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 1
44556: PUSH
44557: LD_INT 2
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: LD_INT 2
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 1
44576: NEG
44577: PUSH
44578: LD_INT 1
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 2
44587: NEG
44588: PUSH
44589: LD_INT 1
44591: NEG
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 2
44599: NEG
44600: PUSH
44601: LD_INT 2
44603: NEG
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 2
44611: NEG
44612: PUSH
44613: LD_INT 3
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 2
44623: PUSH
44624: LD_INT 1
44626: NEG
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 3
44634: PUSH
44635: LD_INT 1
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 1
44644: PUSH
44645: LD_INT 3
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 1
44654: NEG
44655: PUSH
44656: LD_INT 2
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 3
44665: NEG
44666: PUSH
44667: LD_INT 2
44669: NEG
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44700: LD_ADDR_VAR 0 30
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: LD_INT 0
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 0
44717: PUSH
44718: LD_INT 1
44720: NEG
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 1
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 1
44738: PUSH
44739: LD_INT 1
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: LD_INT 1
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 1
44758: NEG
44759: PUSH
44760: LD_INT 0
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 1
44769: NEG
44770: PUSH
44771: LD_INT 1
44773: NEG
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 1
44781: NEG
44782: PUSH
44783: LD_INT 2
44785: NEG
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: LD_INT 2
44796: NEG
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 1
44804: PUSH
44805: LD_INT 1
44807: NEG
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 2
44815: PUSH
44816: LD_INT 0
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 2
44825: PUSH
44826: LD_INT 1
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 2
44835: PUSH
44836: LD_INT 2
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 1
44845: PUSH
44846: LD_INT 2
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 1
44855: NEG
44856: PUSH
44857: LD_INT 1
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 2
44866: NEG
44867: PUSH
44868: LD_INT 0
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 2
44877: NEG
44878: PUSH
44879: LD_INT 1
44881: NEG
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 1
44889: NEG
44890: PUSH
44891: LD_INT 3
44893: NEG
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 1
44901: PUSH
44902: LD_INT 2
44904: NEG
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 3
44912: PUSH
44913: LD_INT 2
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 2
44922: PUSH
44923: LD_INT 3
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 2
44932: NEG
44933: PUSH
44934: LD_INT 1
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 3
44943: NEG
44944: PUSH
44945: LD_INT 1
44947: NEG
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44978: LD_ADDR_VAR 0 31
44982: PUSH
44983: LD_INT 0
44985: PUSH
44986: LD_INT 0
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 0
44995: PUSH
44996: LD_INT 1
44998: NEG
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 1
45006: PUSH
45007: LD_INT 0
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 1
45016: PUSH
45017: LD_INT 1
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 0
45026: PUSH
45027: LD_INT 1
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 1
45036: NEG
45037: PUSH
45038: LD_INT 0
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: LD_INT 1
45051: NEG
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 1
45059: NEG
45060: PUSH
45061: LD_INT 2
45063: NEG
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 1
45071: PUSH
45072: LD_INT 1
45074: NEG
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 2
45082: PUSH
45083: LD_INT 0
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 2
45092: PUSH
45093: LD_INT 1
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 2
45102: PUSH
45103: LD_INT 2
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 1
45112: PUSH
45113: LD_INT 2
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: LD_INT 2
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 1
45132: NEG
45133: PUSH
45134: LD_INT 1
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 2
45143: NEG
45144: PUSH
45145: LD_INT 1
45147: NEG
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 2
45155: NEG
45156: PUSH
45157: LD_INT 2
45159: NEG
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 2
45167: NEG
45168: PUSH
45169: LD_INT 3
45171: NEG
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 2
45179: PUSH
45180: LD_INT 1
45182: NEG
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 3
45190: PUSH
45191: LD_INT 1
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 1
45200: PUSH
45201: LD_INT 3
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 1
45210: NEG
45211: PUSH
45212: LD_INT 2
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 3
45221: NEG
45222: PUSH
45223: LD_INT 2
45225: NEG
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45256: LD_ADDR_VAR 0 32
45260: PUSH
45261: LD_INT 0
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 1
45284: PUSH
45285: LD_INT 0
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: LD_INT 1
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 0
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 1
45314: NEG
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 1
45325: NEG
45326: PUSH
45327: LD_INT 1
45329: NEG
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 1
45337: NEG
45338: PUSH
45339: LD_INT 2
45341: NEG
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: LD_INT 2
45352: NEG
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 1
45360: PUSH
45361: LD_INT 1
45363: NEG
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 2
45371: PUSH
45372: LD_INT 1
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 2
45381: PUSH
45382: LD_INT 2
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 1
45391: PUSH
45392: LD_INT 2
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: LD_INT 2
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: LD_INT 1
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 2
45422: NEG
45423: PUSH
45424: LD_INT 0
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 2
45433: NEG
45434: PUSH
45435: LD_INT 1
45437: NEG
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: LD_INT 3
45449: NEG
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 1
45457: PUSH
45458: LD_INT 2
45460: NEG
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 3
45468: PUSH
45469: LD_INT 2
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 2
45478: PUSH
45479: LD_INT 3
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 2
45488: NEG
45489: PUSH
45490: LD_INT 1
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 3
45499: NEG
45500: PUSH
45501: LD_INT 1
45503: NEG
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45534: LD_ADDR_VAR 0 33
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 0
45551: PUSH
45552: LD_INT 1
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 1
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 0
45582: PUSH
45583: LD_INT 1
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 1
45592: NEG
45593: PUSH
45594: LD_INT 0
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: NEG
45604: PUSH
45605: LD_INT 1
45607: NEG
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 1
45615: NEG
45616: PUSH
45617: LD_INT 2
45619: NEG
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 1
45627: PUSH
45628: LD_INT 1
45630: NEG
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 2
45638: PUSH
45639: LD_INT 0
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 2
45648: PUSH
45649: LD_INT 1
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: LD_INT 2
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 0
45668: PUSH
45669: LD_INT 2
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 1
45678: NEG
45679: PUSH
45680: LD_INT 1
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 2
45689: NEG
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 2
45700: NEG
45701: PUSH
45702: LD_INT 1
45704: NEG
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 2
45712: NEG
45713: PUSH
45714: LD_INT 2
45716: NEG
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 2
45724: NEG
45725: PUSH
45726: LD_INT 3
45728: NEG
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 2
45736: PUSH
45737: LD_INT 1
45739: NEG
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 3
45747: PUSH
45748: LD_INT 1
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: LD_INT 3
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: LD_INT 2
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 3
45778: NEG
45779: PUSH
45780: LD_INT 2
45782: NEG
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45813: LD_ADDR_VAR 0 34
45817: PUSH
45818: LD_INT 0
45820: PUSH
45821: LD_INT 0
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: LD_INT 1
45833: NEG
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 1
45841: PUSH
45842: LD_INT 0
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: LD_INT 1
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: LD_INT 1
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 1
45871: NEG
45872: PUSH
45873: LD_INT 0
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 1
45882: NEG
45883: PUSH
45884: LD_INT 1
45886: NEG
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 1
45894: NEG
45895: PUSH
45896: LD_INT 2
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 0
45906: PUSH
45907: LD_INT 2
45909: NEG
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 1
45917: PUSH
45918: LD_INT 1
45920: NEG
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 2
45928: PUSH
45929: LD_INT 1
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 2
45938: PUSH
45939: LD_INT 2
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 1
45948: PUSH
45949: LD_INT 2
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 1
45958: NEG
45959: PUSH
45960: LD_INT 1
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 2
45969: NEG
45970: PUSH
45971: LD_INT 0
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 2
45980: NEG
45981: PUSH
45982: LD_INT 1
45984: NEG
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 2
45992: NEG
45993: PUSH
45994: LD_INT 2
45996: NEG
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 1
46004: NEG
46005: PUSH
46006: LD_INT 3
46008: NEG
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 1
46016: PUSH
46017: LD_INT 2
46019: NEG
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 3
46027: PUSH
46028: LD_INT 2
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 2
46037: PUSH
46038: LD_INT 3
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 2
46047: NEG
46048: PUSH
46049: LD_INT 1
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 3
46058: NEG
46059: PUSH
46060: LD_INT 1
46062: NEG
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46093: LD_ADDR_VAR 0 35
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: LD_INT 0
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: LD_INT 1
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 1
46121: PUSH
46122: LD_INT 0
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 1
46131: PUSH
46132: LD_INT 1
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 0
46141: PUSH
46142: LD_INT 1
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 1
46151: NEG
46152: PUSH
46153: LD_INT 0
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 1
46162: NEG
46163: PUSH
46164: LD_INT 1
46166: NEG
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 2
46174: PUSH
46175: LD_INT 1
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 2
46184: NEG
46185: PUSH
46186: LD_INT 1
46188: NEG
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46205: LD_ADDR_VAR 0 36
46209: PUSH
46210: LD_INT 0
46212: PUSH
46213: LD_INT 0
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 0
46222: PUSH
46223: LD_INT 1
46225: NEG
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 1
46233: PUSH
46234: LD_INT 0
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 1
46243: PUSH
46244: LD_INT 1
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 0
46253: PUSH
46254: LD_INT 1
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 1
46263: NEG
46264: PUSH
46265: LD_INT 0
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 1
46274: NEG
46275: PUSH
46276: LD_INT 1
46278: NEG
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 1
46286: NEG
46287: PUSH
46288: LD_INT 2
46290: NEG
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 1
46298: PUSH
46299: LD_INT 2
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46317: LD_ADDR_VAR 0 37
46321: PUSH
46322: LD_INT 0
46324: PUSH
46325: LD_INT 0
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 0
46334: PUSH
46335: LD_INT 1
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: LD_INT 0
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 1
46355: PUSH
46356: LD_INT 1
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: LD_INT 1
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: LD_INT 0
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 1
46386: NEG
46387: PUSH
46388: LD_INT 1
46390: NEG
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 1
46398: PUSH
46399: LD_INT 1
46401: NEG
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 1
46409: NEG
46410: PUSH
46411: LD_INT 1
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46429: LD_ADDR_VAR 0 38
46433: PUSH
46434: LD_INT 0
46436: PUSH
46437: LD_INT 0
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 0
46446: PUSH
46447: LD_INT 1
46449: NEG
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 1
46457: PUSH
46458: LD_INT 0
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 1
46467: PUSH
46468: LD_INT 1
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 0
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 1
46487: NEG
46488: PUSH
46489: LD_INT 0
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 1
46498: NEG
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 2
46510: PUSH
46511: LD_INT 1
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 2
46520: NEG
46521: PUSH
46522: LD_INT 1
46524: NEG
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46541: LD_ADDR_VAR 0 39
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 0
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: LD_INT 0
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 1
46579: PUSH
46580: LD_INT 1
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: LD_INT 1
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 1
46599: NEG
46600: PUSH
46601: LD_INT 0
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 1
46610: NEG
46611: PUSH
46612: LD_INT 1
46614: NEG
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 1
46622: NEG
46623: PUSH
46624: LD_INT 2
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 1
46634: PUSH
46635: LD_INT 2
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46653: LD_ADDR_VAR 0 40
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: LD_INT 1
46673: NEG
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 1
46681: PUSH
46682: LD_INT 0
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: LD_INT 1
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 0
46701: PUSH
46702: LD_INT 1
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 1
46711: NEG
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 1
46722: NEG
46723: PUSH
46724: LD_INT 1
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 1
46734: PUSH
46735: LD_INT 1
46737: NEG
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 1
46745: NEG
46746: PUSH
46747: LD_INT 1
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46765: LD_ADDR_VAR 0 41
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: LD_INT 0
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: LD_INT 1
46785: NEG
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 1
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: NEG
46824: PUSH
46825: LD_INT 0
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 1
46834: NEG
46835: PUSH
46836: LD_INT 1
46838: NEG
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 1
46846: NEG
46847: PUSH
46848: LD_INT 2
46850: NEG
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 1
46858: PUSH
46859: LD_INT 1
46861: NEG
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 2
46869: PUSH
46870: LD_INT 0
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 2
46879: PUSH
46880: LD_INT 1
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 2
46889: PUSH
46890: LD_INT 2
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 1
46899: PUSH
46900: LD_INT 2
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 1
46909: NEG
46910: PUSH
46911: LD_INT 1
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 2
46920: NEG
46921: PUSH
46922: LD_INT 0
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 2
46931: NEG
46932: PUSH
46933: LD_INT 1
46935: NEG
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 2
46943: NEG
46944: PUSH
46945: LD_INT 2
46947: NEG
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 2
46955: NEG
46956: PUSH
46957: LD_INT 3
46959: NEG
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 2
46967: PUSH
46968: LD_INT 1
46970: NEG
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 3
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 3
46988: PUSH
46989: LD_INT 1
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 3
46998: PUSH
46999: LD_INT 2
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 3
47008: PUSH
47009: LD_INT 3
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 2
47018: PUSH
47019: LD_INT 3
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 2
47028: NEG
47029: PUSH
47030: LD_INT 1
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 3
47039: NEG
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 3
47050: NEG
47051: PUSH
47052: LD_INT 1
47054: NEG
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 3
47062: NEG
47063: PUSH
47064: LD_INT 2
47066: NEG
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 3
47074: NEG
47075: PUSH
47076: LD_INT 3
47078: NEG
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47115: LD_ADDR_VAR 0 42
47119: PUSH
47120: LD_INT 0
47122: PUSH
47123: LD_INT 0
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: LD_INT 1
47135: NEG
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 1
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 1
47153: PUSH
47154: LD_INT 1
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 0
47163: PUSH
47164: LD_INT 1
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 1
47173: NEG
47174: PUSH
47175: LD_INT 0
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 1
47184: NEG
47185: PUSH
47186: LD_INT 1
47188: NEG
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 1
47196: NEG
47197: PUSH
47198: LD_INT 2
47200: NEG
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: LD_INT 2
47211: NEG
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 1
47219: PUSH
47220: LD_INT 1
47222: NEG
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 2
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 2
47240: PUSH
47241: LD_INT 2
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 1
47250: PUSH
47251: LD_INT 2
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 0
47260: PUSH
47261: LD_INT 2
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 1
47270: NEG
47271: PUSH
47272: LD_INT 1
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 2
47281: NEG
47282: PUSH
47283: LD_INT 1
47285: NEG
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 2
47293: NEG
47294: PUSH
47295: LD_INT 2
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 2
47305: NEG
47306: PUSH
47307: LD_INT 3
47309: NEG
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: LD_INT 3
47321: NEG
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 0
47329: PUSH
47330: LD_INT 3
47332: NEG
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: PUSH
47341: LD_INT 2
47343: NEG
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 3
47351: PUSH
47352: LD_INT 2
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 3
47361: PUSH
47362: LD_INT 3
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 2
47371: PUSH
47372: LD_INT 3
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 1
47381: PUSH
47382: LD_INT 3
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 0
47391: PUSH
47392: LD_INT 3
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 1
47401: NEG
47402: PUSH
47403: LD_INT 2
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 3
47412: NEG
47413: PUSH
47414: LD_INT 2
47416: NEG
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 3
47424: NEG
47425: PUSH
47426: LD_INT 3
47428: NEG
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47465: LD_ADDR_VAR 0 43
47469: PUSH
47470: LD_INT 0
47472: PUSH
47473: LD_INT 0
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 0
47482: PUSH
47483: LD_INT 1
47485: NEG
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 1
47493: PUSH
47494: LD_INT 0
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 1
47503: PUSH
47504: LD_INT 1
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 0
47513: PUSH
47514: LD_INT 1
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 1
47523: NEG
47524: PUSH
47525: LD_INT 0
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 1
47534: NEG
47535: PUSH
47536: LD_INT 1
47538: NEG
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: LD_INT 2
47550: NEG
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: LD_INT 2
47561: NEG
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 1
47569: PUSH
47570: LD_INT 1
47572: NEG
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 2
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 2
47590: PUSH
47591: LD_INT 1
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 1
47600: PUSH
47601: LD_INT 2
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: LD_INT 2
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 1
47620: NEG
47621: PUSH
47622: LD_INT 1
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 2
47631: NEG
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 2
47642: NEG
47643: PUSH
47644: LD_INT 1
47646: NEG
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 1
47654: NEG
47655: PUSH
47656: LD_INT 3
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: LD_INT 3
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 1
47677: PUSH
47678: LD_INT 2
47680: NEG
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 2
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 3
47699: PUSH
47700: LD_INT 0
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 3
47709: PUSH
47710: LD_INT 1
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 1
47719: PUSH
47720: LD_INT 3
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: LD_INT 3
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 1
47739: NEG
47740: PUSH
47741: LD_INT 2
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 2
47750: NEG
47751: PUSH
47752: LD_INT 1
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 3
47761: NEG
47762: PUSH
47763: LD_INT 0
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 3
47772: NEG
47773: PUSH
47774: LD_INT 1
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47813: LD_ADDR_VAR 0 44
47817: PUSH
47818: LD_INT 0
47820: PUSH
47821: LD_INT 0
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 0
47830: PUSH
47831: LD_INT 1
47833: NEG
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 1
47841: PUSH
47842: LD_INT 0
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 1
47851: PUSH
47852: LD_INT 1
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 0
47861: PUSH
47862: LD_INT 1
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 1
47871: NEG
47872: PUSH
47873: LD_INT 0
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 1
47882: NEG
47883: PUSH
47884: LD_INT 1
47886: NEG
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 1
47894: NEG
47895: PUSH
47896: LD_INT 2
47898: NEG
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 1
47906: PUSH
47907: LD_INT 1
47909: NEG
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 2
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 2
47927: PUSH
47928: LD_INT 1
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 2
47937: PUSH
47938: LD_INT 2
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 1
47947: PUSH
47948: LD_INT 2
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 1
47957: NEG
47958: PUSH
47959: LD_INT 1
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 2
47968: NEG
47969: PUSH
47970: LD_INT 0
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 2
47979: NEG
47980: PUSH
47981: LD_INT 1
47983: NEG
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 2
47991: NEG
47992: PUSH
47993: LD_INT 2
47995: NEG
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 2
48003: NEG
48004: PUSH
48005: LD_INT 3
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 2
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 3
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 3
48036: PUSH
48037: LD_INT 1
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 3
48046: PUSH
48047: LD_INT 2
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 3
48056: PUSH
48057: LD_INT 3
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 2
48066: PUSH
48067: LD_INT 3
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 2
48076: NEG
48077: PUSH
48078: LD_INT 1
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 3
48087: NEG
48088: PUSH
48089: LD_INT 0
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 3
48098: NEG
48099: PUSH
48100: LD_INT 1
48102: NEG
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 3
48110: NEG
48111: PUSH
48112: LD_INT 2
48114: NEG
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 3
48122: NEG
48123: PUSH
48124: LD_INT 3
48126: NEG
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48163: LD_ADDR_VAR 0 45
48167: PUSH
48168: LD_INT 0
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 0
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 1
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 1
48201: PUSH
48202: LD_INT 1
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 0
48211: PUSH
48212: LD_INT 1
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 1
48221: NEG
48222: PUSH
48223: LD_INT 0
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 1
48232: NEG
48233: PUSH
48234: LD_INT 1
48236: NEG
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 1
48244: NEG
48245: PUSH
48246: LD_INT 2
48248: NEG
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 0
48256: PUSH
48257: LD_INT 2
48259: NEG
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 1
48267: PUSH
48268: LD_INT 1
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 2
48278: PUSH
48279: LD_INT 1
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 2
48288: PUSH
48289: LD_INT 2
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 1
48298: PUSH
48299: LD_INT 2
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 0
48308: PUSH
48309: LD_INT 2
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 1
48318: NEG
48319: PUSH
48320: LD_INT 1
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 2
48329: NEG
48330: PUSH
48331: LD_INT 1
48333: NEG
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 2
48341: NEG
48342: PUSH
48343: LD_INT 2
48345: NEG
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 2
48353: NEG
48354: PUSH
48355: LD_INT 3
48357: NEG
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: LD_INT 3
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: LD_INT 3
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 1
48388: PUSH
48389: LD_INT 2
48391: NEG
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 3
48399: PUSH
48400: LD_INT 2
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 3
48409: PUSH
48410: LD_INT 3
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 2
48419: PUSH
48420: LD_INT 3
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 1
48429: PUSH
48430: LD_INT 3
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: LD_INT 3
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 1
48449: NEG
48450: PUSH
48451: LD_INT 2
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 3
48460: NEG
48461: PUSH
48462: LD_INT 2
48464: NEG
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 3
48472: NEG
48473: PUSH
48474: LD_INT 3
48476: NEG
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48513: LD_ADDR_VAR 0 46
48517: PUSH
48518: LD_INT 0
48520: PUSH
48521: LD_INT 0
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: LD_INT 1
48533: NEG
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 1
48541: PUSH
48542: LD_INT 0
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 1
48551: PUSH
48552: LD_INT 1
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 0
48561: PUSH
48562: LD_INT 1
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 1
48571: NEG
48572: PUSH
48573: LD_INT 0
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 1
48582: NEG
48583: PUSH
48584: LD_INT 1
48586: NEG
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 1
48594: NEG
48595: PUSH
48596: LD_INT 2
48598: NEG
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 0
48606: PUSH
48607: LD_INT 2
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 1
48617: PUSH
48618: LD_INT 1
48620: NEG
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 2
48628: PUSH
48629: LD_INT 0
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 2
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: PUSH
48649: LD_INT 2
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 0
48658: PUSH
48659: LD_INT 2
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 1
48668: NEG
48669: PUSH
48670: LD_INT 1
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 2
48679: NEG
48680: PUSH
48681: LD_INT 0
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 2
48690: NEG
48691: PUSH
48692: LD_INT 1
48694: NEG
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 1
48702: NEG
48703: PUSH
48704: LD_INT 3
48706: NEG
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 0
48714: PUSH
48715: LD_INT 3
48717: NEG
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 1
48725: PUSH
48726: LD_INT 2
48728: NEG
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 2
48736: PUSH
48737: LD_INT 1
48739: NEG
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 3
48747: PUSH
48748: LD_INT 0
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 3
48757: PUSH
48758: LD_INT 1
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 1
48767: PUSH
48768: LD_INT 3
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 0
48777: PUSH
48778: LD_INT 3
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 1
48787: NEG
48788: PUSH
48789: LD_INT 2
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 2
48798: NEG
48799: PUSH
48800: LD_INT 1
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 3
48809: NEG
48810: PUSH
48811: LD_INT 0
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 3
48820: NEG
48821: PUSH
48822: LD_INT 1
48824: NEG
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48861: LD_ADDR_VAR 0 47
48865: PUSH
48866: LD_INT 0
48868: PUSH
48869: LD_INT 0
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 0
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 1
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 1
48899: PUSH
48900: LD_INT 1
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 0
48909: PUSH
48910: LD_INT 1
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 1
48919: NEG
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 1
48930: NEG
48931: PUSH
48932: LD_INT 1
48934: NEG
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 1
48942: NEG
48943: PUSH
48944: LD_INT 2
48946: NEG
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: LD_INT 2
48957: NEG
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 1
48965: PUSH
48966: LD_INT 1
48968: NEG
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 2
48976: NEG
48977: PUSH
48978: LD_INT 1
48980: NEG
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 2
48988: NEG
48989: PUSH
48990: LD_INT 2
48992: NEG
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49012: LD_ADDR_VAR 0 48
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: LD_INT 0
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 0
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 1
49040: PUSH
49041: LD_INT 0
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 1
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: LD_INT 1
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 1
49070: NEG
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 1
49081: NEG
49082: PUSH
49083: LD_INT 1
49085: NEG
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 1
49093: NEG
49094: PUSH
49095: LD_INT 2
49097: NEG
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 0
49105: PUSH
49106: LD_INT 2
49108: NEG
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 1
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 2
49127: PUSH
49128: LD_INT 0
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 2
49137: PUSH
49138: LD_INT 1
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49159: LD_ADDR_VAR 0 49
49163: PUSH
49164: LD_INT 0
49166: PUSH
49167: LD_INT 0
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 0
49176: PUSH
49177: LD_INT 1
49179: NEG
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 1
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 1
49197: PUSH
49198: LD_INT 1
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 0
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: NEG
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 1
49228: NEG
49229: PUSH
49230: LD_INT 1
49232: NEG
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 1
49240: PUSH
49241: LD_INT 1
49243: NEG
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 2
49251: PUSH
49252: LD_INT 0
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 2
49261: PUSH
49262: LD_INT 1
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 2
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 1
49281: PUSH
49282: LD_INT 2
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49303: LD_ADDR_VAR 0 50
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: LD_INT 0
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 0
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 1
49331: PUSH
49332: LD_INT 0
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: LD_INT 1
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 0
49351: PUSH
49352: LD_INT 1
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 1
49361: NEG
49362: PUSH
49363: LD_INT 0
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 1
49372: NEG
49373: PUSH
49374: LD_INT 1
49376: NEG
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 2
49384: PUSH
49385: LD_INT 1
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 2
49394: PUSH
49395: LD_INT 2
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: LD_INT 2
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 0
49414: PUSH
49415: LD_INT 2
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 1
49424: NEG
49425: PUSH
49426: LD_INT 1
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49447: LD_ADDR_VAR 0 51
49451: PUSH
49452: LD_INT 0
49454: PUSH
49455: LD_INT 0
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: LD_INT 1
49467: NEG
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 1
49475: PUSH
49476: LD_INT 0
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 1
49485: PUSH
49486: LD_INT 1
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 0
49495: PUSH
49496: LD_INT 1
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 1
49505: NEG
49506: PUSH
49507: LD_INT 0
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 1
49516: NEG
49517: PUSH
49518: LD_INT 1
49520: NEG
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 1
49528: PUSH
49529: LD_INT 2
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: LD_INT 2
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 1
49548: NEG
49549: PUSH
49550: LD_INT 1
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 2
49559: NEG
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 2
49570: NEG
49571: PUSH
49572: LD_INT 1
49574: NEG
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49594: LD_ADDR_VAR 0 52
49598: PUSH
49599: LD_INT 0
49601: PUSH
49602: LD_INT 0
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 0
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 1
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 1
49632: PUSH
49633: LD_INT 1
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 0
49642: PUSH
49643: LD_INT 1
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 1
49652: NEG
49653: PUSH
49654: LD_INT 0
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 1
49663: NEG
49664: PUSH
49665: LD_INT 1
49667: NEG
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: LD_INT 2
49679: NEG
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 1
49687: NEG
49688: PUSH
49689: LD_INT 1
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 2
49698: NEG
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 2
49709: NEG
49710: PUSH
49711: LD_INT 1
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 2
49721: NEG
49722: PUSH
49723: LD_INT 2
49725: NEG
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49745: LD_ADDR_VAR 0 53
49749: PUSH
49750: LD_INT 0
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 0
49762: PUSH
49763: LD_INT 1
49765: NEG
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 1
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 1
49783: PUSH
49784: LD_INT 1
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: LD_INT 1
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 1
49803: NEG
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 1
49814: NEG
49815: PUSH
49816: LD_INT 1
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 1
49826: NEG
49827: PUSH
49828: LD_INT 2
49830: NEG
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: LD_INT 2
49841: NEG
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 1
49849: PUSH
49850: LD_INT 1
49852: NEG
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 2
49860: PUSH
49861: LD_INT 0
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 2
49870: PUSH
49871: LD_INT 1
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 2
49880: PUSH
49881: LD_INT 2
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 1
49890: PUSH
49891: LD_INT 2
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 0
49900: PUSH
49901: LD_INT 2
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 1
49910: NEG
49911: PUSH
49912: LD_INT 1
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 2
49921: NEG
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 2
49932: NEG
49933: PUSH
49934: LD_INT 1
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 2
49944: NEG
49945: PUSH
49946: LD_INT 2
49948: NEG
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49975: LD_ADDR_VAR 0 54
49979: PUSH
49980: LD_INT 0
49982: PUSH
49983: LD_INT 0
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 0
49992: PUSH
49993: LD_INT 1
49995: NEG
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 1
50003: PUSH
50004: LD_INT 0
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 1
50013: PUSH
50014: LD_INT 1
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 1
50033: NEG
50034: PUSH
50035: LD_INT 0
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: NEG
50045: PUSH
50046: LD_INT 1
50048: NEG
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 1
50056: NEG
50057: PUSH
50058: LD_INT 2
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: LD_INT 2
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 1
50079: PUSH
50080: LD_INT 1
50082: NEG
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 2
50090: PUSH
50091: LD_INT 0
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 2
50100: PUSH
50101: LD_INT 1
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 2
50110: PUSH
50111: LD_INT 2
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 1
50120: PUSH
50121: LD_INT 2
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: LD_INT 2
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 1
50140: NEG
50141: PUSH
50142: LD_INT 1
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 2
50151: NEG
50152: PUSH
50153: LD_INT 0
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 2
50162: NEG
50163: PUSH
50164: LD_INT 1
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 2
50174: NEG
50175: PUSH
50176: LD_INT 2
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50205: LD_ADDR_VAR 0 55
50209: PUSH
50210: LD_INT 0
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 0
50222: PUSH
50223: LD_INT 1
50225: NEG
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 1
50233: PUSH
50234: LD_INT 0
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 1
50243: PUSH
50244: LD_INT 1
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 1
50263: NEG
50264: PUSH
50265: LD_INT 0
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: NEG
50275: PUSH
50276: LD_INT 1
50278: NEG
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: LD_INT 2
50290: NEG
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: LD_INT 2
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 1
50309: PUSH
50310: LD_INT 1
50312: NEG
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 2
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 2
50330: PUSH
50331: LD_INT 1
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 2
50340: PUSH
50341: LD_INT 2
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: PUSH
50351: LD_INT 2
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: LD_INT 2
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 1
50370: NEG
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 2
50381: NEG
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 2
50392: NEG
50393: PUSH
50394: LD_INT 1
50396: NEG
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 2
50404: NEG
50405: PUSH
50406: LD_INT 2
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50435: LD_ADDR_VAR 0 56
50439: PUSH
50440: LD_INT 0
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: LD_INT 1
50455: NEG
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 1
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 1
50473: PUSH
50474: LD_INT 1
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 0
50483: PUSH
50484: LD_INT 1
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 1
50493: NEG
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 1
50504: NEG
50505: PUSH
50506: LD_INT 1
50508: NEG
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 1
50516: NEG
50517: PUSH
50518: LD_INT 2
50520: NEG
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 0
50528: PUSH
50529: LD_INT 2
50531: NEG
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 1
50539: PUSH
50540: LD_INT 1
50542: NEG
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 2
50550: PUSH
50551: LD_INT 0
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 2
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 2
50570: PUSH
50571: LD_INT 2
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: LD_INT 2
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: LD_INT 2
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 1
50600: NEG
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 2
50611: NEG
50612: PUSH
50613: LD_INT 0
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 2
50622: NEG
50623: PUSH
50624: LD_INT 1
50626: NEG
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 2
50634: NEG
50635: PUSH
50636: LD_INT 2
50638: NEG
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50665: LD_ADDR_VAR 0 57
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: LD_INT 0
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 0
50682: PUSH
50683: LD_INT 1
50685: NEG
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 1
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 1
50703: PUSH
50704: LD_INT 1
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 0
50713: PUSH
50714: LD_INT 1
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 1
50723: NEG
50724: PUSH
50725: LD_INT 0
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 1
50734: NEG
50735: PUSH
50736: LD_INT 1
50738: NEG
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 1
50746: NEG
50747: PUSH
50748: LD_INT 2
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 0
50758: PUSH
50759: LD_INT 2
50761: NEG
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 1
50769: PUSH
50770: LD_INT 1
50772: NEG
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 2
50780: PUSH
50781: LD_INT 0
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 2
50790: PUSH
50791: LD_INT 1
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 2
50800: PUSH
50801: LD_INT 2
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 1
50810: PUSH
50811: LD_INT 2
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 0
50820: PUSH
50821: LD_INT 2
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 1
50830: NEG
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 2
50841: NEG
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 2
50852: NEG
50853: PUSH
50854: LD_INT 1
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 2
50864: NEG
50865: PUSH
50866: LD_INT 2
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50895: LD_ADDR_VAR 0 58
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: LD_INT 0
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 0
50912: PUSH
50913: LD_INT 1
50915: NEG
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 1
50923: PUSH
50924: LD_INT 0
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: LD_INT 1
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 0
50943: PUSH
50944: LD_INT 1
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 1
50953: NEG
50954: PUSH
50955: LD_INT 0
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 1
50964: NEG
50965: PUSH
50966: LD_INT 1
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 1
50976: NEG
50977: PUSH
50978: LD_INT 2
50980: NEG
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 0
50988: PUSH
50989: LD_INT 2
50991: NEG
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 1
50999: PUSH
51000: LD_INT 1
51002: NEG
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 2
51010: PUSH
51011: LD_INT 0
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 2
51020: PUSH
51021: LD_INT 1
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 2
51030: PUSH
51031: LD_INT 2
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 1
51040: PUSH
51041: LD_INT 2
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 0
51050: PUSH
51051: LD_INT 2
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 1
51060: NEG
51061: PUSH
51062: LD_INT 1
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 2
51071: NEG
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 2
51082: NEG
51083: PUSH
51084: LD_INT 1
51086: NEG
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 2
51094: NEG
51095: PUSH
51096: LD_INT 2
51098: NEG
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51125: LD_ADDR_VAR 0 59
51129: PUSH
51130: LD_INT 0
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: LD_INT 1
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 1
51153: PUSH
51154: LD_INT 0
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 1
51163: PUSH
51164: LD_INT 1
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 0
51173: PUSH
51174: LD_INT 1
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 1
51183: NEG
51184: PUSH
51185: LD_INT 0
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 1
51194: NEG
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51213: LD_ADDR_VAR 0 60
51217: PUSH
51218: LD_INT 0
51220: PUSH
51221: LD_INT 0
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 0
51230: PUSH
51231: LD_INT 1
51233: NEG
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 1
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: PUSH
51252: LD_INT 1
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 0
51261: PUSH
51262: LD_INT 1
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 1
51271: NEG
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 1
51282: NEG
51283: PUSH
51284: LD_INT 1
51286: NEG
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51301: LD_ADDR_VAR 0 61
51305: PUSH
51306: LD_INT 0
51308: PUSH
51309: LD_INT 0
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: LD_INT 1
51321: NEG
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 1
51329: PUSH
51330: LD_INT 0
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 1
51339: PUSH
51340: LD_INT 1
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: LD_INT 1
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 1
51359: NEG
51360: PUSH
51361: LD_INT 0
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 1
51370: NEG
51371: PUSH
51372: LD_INT 1
51374: NEG
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51389: LD_ADDR_VAR 0 62
51393: PUSH
51394: LD_INT 0
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 0
51406: PUSH
51407: LD_INT 1
51409: NEG
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 1
51417: PUSH
51418: LD_INT 0
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 1
51458: NEG
51459: PUSH
51460: LD_INT 1
51462: NEG
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51477: LD_ADDR_VAR 0 63
51481: PUSH
51482: LD_INT 0
51484: PUSH
51485: LD_INT 0
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 0
51494: PUSH
51495: LD_INT 1
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: LD_INT 0
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: LD_INT 1
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 0
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 1
51535: NEG
51536: PUSH
51537: LD_INT 0
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: LD_INT 1
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51565: LD_ADDR_VAR 0 64
51569: PUSH
51570: LD_INT 0
51572: PUSH
51573: LD_INT 0
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 0
51582: PUSH
51583: LD_INT 1
51585: NEG
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 1
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 1
51603: PUSH
51604: LD_INT 1
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 0
51613: PUSH
51614: LD_INT 1
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 1
51623: NEG
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 1
51634: NEG
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: ST_TO_ADDR
// end ; 1 :
51653: GO 57550
51655: LD_INT 1
51657: DOUBLE
51658: EQUAL
51659: IFTRUE 51663
51661: GO 54286
51663: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51664: LD_ADDR_VAR 0 11
51668: PUSH
51669: LD_INT 1
51671: NEG
51672: PUSH
51673: LD_INT 3
51675: NEG
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 0
51683: PUSH
51684: LD_INT 3
51686: NEG
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 1
51694: PUSH
51695: LD_INT 2
51697: NEG
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: LIST
51707: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51708: LD_ADDR_VAR 0 12
51712: PUSH
51713: LD_INT 2
51715: PUSH
51716: LD_INT 1
51718: NEG
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 3
51726: PUSH
51727: LD_INT 0
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 3
51736: PUSH
51737: LD_INT 1
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: LIST
51748: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51749: LD_ADDR_VAR 0 13
51753: PUSH
51754: LD_INT 3
51756: PUSH
51757: LD_INT 2
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 3
51766: PUSH
51767: LD_INT 3
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 2
51776: PUSH
51777: LD_INT 3
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: LIST
51788: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51789: LD_ADDR_VAR 0 14
51793: PUSH
51794: LD_INT 1
51796: PUSH
51797: LD_INT 3
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 0
51806: PUSH
51807: LD_INT 3
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 1
51816: NEG
51817: PUSH
51818: LD_INT 2
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: LIST
51829: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51830: LD_ADDR_VAR 0 15
51834: PUSH
51835: LD_INT 2
51837: NEG
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 3
51848: NEG
51849: PUSH
51850: LD_INT 0
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 3
51859: NEG
51860: PUSH
51861: LD_INT 1
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: LIST
51873: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51874: LD_ADDR_VAR 0 16
51878: PUSH
51879: LD_INT 2
51881: NEG
51882: PUSH
51883: LD_INT 3
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 3
51893: NEG
51894: PUSH
51895: LD_INT 2
51897: NEG
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 3
51905: NEG
51906: PUSH
51907: LD_INT 3
51909: NEG
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: LIST
51919: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51920: LD_ADDR_VAR 0 17
51924: PUSH
51925: LD_INT 1
51927: NEG
51928: PUSH
51929: LD_INT 3
51931: NEG
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: LD_INT 3
51942: NEG
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 1
51950: PUSH
51951: LD_INT 2
51953: NEG
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: LIST
51963: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51964: LD_ADDR_VAR 0 18
51968: PUSH
51969: LD_INT 2
51971: PUSH
51972: LD_INT 1
51974: NEG
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 3
51982: PUSH
51983: LD_INT 0
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 3
51992: PUSH
51993: LD_INT 1
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: LIST
52004: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52005: LD_ADDR_VAR 0 19
52009: PUSH
52010: LD_INT 3
52012: PUSH
52013: LD_INT 2
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 3
52022: PUSH
52023: LD_INT 3
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 2
52032: PUSH
52033: LD_INT 3
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: LIST
52044: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52045: LD_ADDR_VAR 0 20
52049: PUSH
52050: LD_INT 1
52052: PUSH
52053: LD_INT 3
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 0
52062: PUSH
52063: LD_INT 3
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 1
52072: NEG
52073: PUSH
52074: LD_INT 2
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: LIST
52085: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52086: LD_ADDR_VAR 0 21
52090: PUSH
52091: LD_INT 2
52093: NEG
52094: PUSH
52095: LD_INT 1
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 3
52104: NEG
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 3
52115: NEG
52116: PUSH
52117: LD_INT 1
52119: NEG
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: LIST
52129: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52130: LD_ADDR_VAR 0 22
52134: PUSH
52135: LD_INT 2
52137: NEG
52138: PUSH
52139: LD_INT 3
52141: NEG
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 3
52149: NEG
52150: PUSH
52151: LD_INT 2
52153: NEG
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 3
52161: NEG
52162: PUSH
52163: LD_INT 3
52165: NEG
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: LIST
52175: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52176: LD_ADDR_VAR 0 23
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: LD_INT 3
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 1
52194: NEG
52195: PUSH
52196: LD_INT 4
52198: NEG
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: LD_INT 3
52209: NEG
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: LIST
52219: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52220: LD_ADDR_VAR 0 24
52224: PUSH
52225: LD_INT 3
52227: PUSH
52228: LD_INT 0
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 3
52237: PUSH
52238: LD_INT 1
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 4
52248: PUSH
52249: LD_INT 1
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: LIST
52260: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52261: LD_ADDR_VAR 0 25
52265: PUSH
52266: LD_INT 3
52268: PUSH
52269: LD_INT 3
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 4
52278: PUSH
52279: LD_INT 3
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 3
52288: PUSH
52289: LD_INT 4
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: LIST
52300: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52301: LD_ADDR_VAR 0 26
52305: PUSH
52306: LD_INT 0
52308: PUSH
52309: LD_INT 3
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 1
52318: PUSH
52319: LD_INT 4
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: LD_INT 3
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: LIST
52341: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52342: LD_ADDR_VAR 0 27
52346: PUSH
52347: LD_INT 3
52349: NEG
52350: PUSH
52351: LD_INT 0
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 3
52360: NEG
52361: PUSH
52362: LD_INT 1
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 4
52371: NEG
52372: PUSH
52373: LD_INT 1
52375: NEG
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: LIST
52385: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52386: LD_ADDR_VAR 0 28
52390: PUSH
52391: LD_INT 3
52393: NEG
52394: PUSH
52395: LD_INT 3
52397: NEG
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 3
52405: NEG
52406: PUSH
52407: LD_INT 4
52409: NEG
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 4
52417: NEG
52418: PUSH
52419: LD_INT 3
52421: NEG
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: LIST
52431: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52432: LD_ADDR_VAR 0 29
52436: PUSH
52437: LD_INT 1
52439: NEG
52440: PUSH
52441: LD_INT 3
52443: NEG
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 0
52451: PUSH
52452: LD_INT 3
52454: NEG
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 1
52462: PUSH
52463: LD_INT 2
52465: NEG
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 1
52473: NEG
52474: PUSH
52475: LD_INT 4
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 0
52485: PUSH
52486: LD_INT 4
52488: NEG
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 1
52496: PUSH
52497: LD_INT 3
52499: NEG
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 1
52507: NEG
52508: PUSH
52509: LD_INT 5
52511: NEG
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 0
52519: PUSH
52520: LD_INT 5
52522: NEG
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 1
52530: PUSH
52531: LD_INT 4
52533: NEG
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 1
52541: NEG
52542: PUSH
52543: LD_INT 6
52545: NEG
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 0
52553: PUSH
52554: LD_INT 6
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 1
52564: PUSH
52565: LD_INT 5
52567: NEG
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52587: LD_ADDR_VAR 0 30
52591: PUSH
52592: LD_INT 2
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 3
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 3
52615: PUSH
52616: LD_INT 1
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 3
52625: PUSH
52626: LD_INT 1
52628: NEG
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 4
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 4
52646: PUSH
52647: LD_INT 1
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 4
52656: PUSH
52657: LD_INT 1
52659: NEG
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 5
52667: PUSH
52668: LD_INT 0
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 5
52677: PUSH
52678: LD_INT 1
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 5
52687: PUSH
52688: LD_INT 1
52690: NEG
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 6
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 6
52708: PUSH
52709: LD_INT 1
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52730: LD_ADDR_VAR 0 31
52734: PUSH
52735: LD_INT 3
52737: PUSH
52738: LD_INT 2
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 3
52747: PUSH
52748: LD_INT 3
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 2
52757: PUSH
52758: LD_INT 3
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 4
52767: PUSH
52768: LD_INT 3
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 4
52777: PUSH
52778: LD_INT 4
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 3
52787: PUSH
52788: LD_INT 4
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 5
52797: PUSH
52798: LD_INT 4
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 5
52807: PUSH
52808: LD_INT 5
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 4
52817: PUSH
52818: LD_INT 5
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 6
52827: PUSH
52828: LD_INT 5
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 6
52837: PUSH
52838: LD_INT 6
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 5
52847: PUSH
52848: LD_INT 6
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52869: LD_ADDR_VAR 0 32
52873: PUSH
52874: LD_INT 1
52876: PUSH
52877: LD_INT 3
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: LD_INT 3
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 1
52896: NEG
52897: PUSH
52898: LD_INT 2
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 1
52907: PUSH
52908: LD_INT 4
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 0
52917: PUSH
52918: LD_INT 4
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 1
52927: NEG
52928: PUSH
52929: LD_INT 3
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 1
52938: PUSH
52939: LD_INT 5
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: LD_INT 5
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 1
52958: NEG
52959: PUSH
52960: LD_INT 4
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: LD_INT 6
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 0
52979: PUSH
52980: LD_INT 6
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 1
52989: NEG
52990: PUSH
52991: LD_INT 5
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53012: LD_ADDR_VAR 0 33
53016: PUSH
53017: LD_INT 2
53019: NEG
53020: PUSH
53021: LD_INT 1
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 3
53030: NEG
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 3
53041: NEG
53042: PUSH
53043: LD_INT 1
53045: NEG
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 3
53053: NEG
53054: PUSH
53055: LD_INT 1
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 4
53064: NEG
53065: PUSH
53066: LD_INT 0
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 4
53075: NEG
53076: PUSH
53077: LD_INT 1
53079: NEG
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 4
53087: NEG
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 5
53098: NEG
53099: PUSH
53100: LD_INT 0
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 5
53109: NEG
53110: PUSH
53111: LD_INT 1
53113: NEG
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 5
53121: NEG
53122: PUSH
53123: LD_INT 1
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 6
53132: NEG
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 6
53143: NEG
53144: PUSH
53145: LD_INT 1
53147: NEG
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53167: LD_ADDR_VAR 0 34
53171: PUSH
53172: LD_INT 2
53174: NEG
53175: PUSH
53176: LD_INT 3
53178: NEG
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 3
53186: NEG
53187: PUSH
53188: LD_INT 2
53190: NEG
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 3
53198: NEG
53199: PUSH
53200: LD_INT 3
53202: NEG
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 3
53210: NEG
53211: PUSH
53212: LD_INT 4
53214: NEG
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 4
53222: NEG
53223: PUSH
53224: LD_INT 3
53226: NEG
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 4
53234: NEG
53235: PUSH
53236: LD_INT 4
53238: NEG
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 4
53246: NEG
53247: PUSH
53248: LD_INT 5
53250: NEG
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 5
53258: NEG
53259: PUSH
53260: LD_INT 4
53262: NEG
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 5
53270: NEG
53271: PUSH
53272: LD_INT 5
53274: NEG
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 5
53282: NEG
53283: PUSH
53284: LD_INT 6
53286: NEG
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 6
53294: NEG
53295: PUSH
53296: LD_INT 5
53298: NEG
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 6
53306: NEG
53307: PUSH
53308: LD_INT 6
53310: NEG
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53330: LD_ADDR_VAR 0 41
53334: PUSH
53335: LD_INT 0
53337: PUSH
53338: LD_INT 2
53340: NEG
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 1
53348: NEG
53349: PUSH
53350: LD_INT 3
53352: NEG
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 1
53360: PUSH
53361: LD_INT 2
53363: NEG
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: LIST
53373: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53374: LD_ADDR_VAR 0 42
53378: PUSH
53379: LD_INT 2
53381: PUSH
53382: LD_INT 0
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 2
53391: PUSH
53392: LD_INT 1
53394: NEG
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 3
53402: PUSH
53403: LD_INT 1
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: LIST
53414: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53415: LD_ADDR_VAR 0 43
53419: PUSH
53420: LD_INT 2
53422: PUSH
53423: LD_INT 2
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 3
53432: PUSH
53433: LD_INT 2
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 2
53442: PUSH
53443: LD_INT 3
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: LIST
53454: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53455: LD_ADDR_VAR 0 44
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: LD_INT 2
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 1
53472: PUSH
53473: LD_INT 3
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 1
53482: NEG
53483: PUSH
53484: LD_INT 2
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: LIST
53495: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53496: LD_ADDR_VAR 0 45
53500: PUSH
53501: LD_INT 2
53503: NEG
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 2
53514: NEG
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 3
53525: NEG
53526: PUSH
53527: LD_INT 1
53529: NEG
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: LIST
53539: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53540: LD_ADDR_VAR 0 46
53544: PUSH
53545: LD_INT 2
53547: NEG
53548: PUSH
53549: LD_INT 2
53551: NEG
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 2
53559: NEG
53560: PUSH
53561: LD_INT 3
53563: NEG
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 3
53571: NEG
53572: PUSH
53573: LD_INT 2
53575: NEG
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: LIST
53585: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53586: LD_ADDR_VAR 0 47
53590: PUSH
53591: LD_INT 2
53593: NEG
53594: PUSH
53595: LD_INT 3
53597: NEG
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 1
53605: NEG
53606: PUSH
53607: LD_INT 3
53609: NEG
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53619: LD_ADDR_VAR 0 48
53623: PUSH
53624: LD_INT 1
53626: PUSH
53627: LD_INT 2
53629: NEG
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 2
53637: PUSH
53638: LD_INT 1
53640: NEG
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53650: LD_ADDR_VAR 0 49
53654: PUSH
53655: LD_INT 3
53657: PUSH
53658: LD_INT 1
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 3
53667: PUSH
53668: LD_INT 2
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53679: LD_ADDR_VAR 0 50
53683: PUSH
53684: LD_INT 2
53686: PUSH
53687: LD_INT 3
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: LD_INT 3
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53708: LD_ADDR_VAR 0 51
53712: PUSH
53713: LD_INT 1
53715: NEG
53716: PUSH
53717: LD_INT 2
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 2
53726: NEG
53727: PUSH
53728: LD_INT 1
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53739: LD_ADDR_VAR 0 52
53743: PUSH
53744: LD_INT 3
53746: NEG
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 3
53758: NEG
53759: PUSH
53760: LD_INT 2
53762: NEG
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53772: LD_ADDR_VAR 0 53
53776: PUSH
53777: LD_INT 1
53779: NEG
53780: PUSH
53781: LD_INT 3
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 0
53791: PUSH
53792: LD_INT 3
53794: NEG
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 1
53802: PUSH
53803: LD_INT 2
53805: NEG
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: LIST
53815: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53816: LD_ADDR_VAR 0 54
53820: PUSH
53821: LD_INT 2
53823: PUSH
53824: LD_INT 1
53826: NEG
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 3
53834: PUSH
53835: LD_INT 0
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 3
53844: PUSH
53845: LD_INT 1
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: LIST
53856: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53857: LD_ADDR_VAR 0 55
53861: PUSH
53862: LD_INT 3
53864: PUSH
53865: LD_INT 2
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 3
53874: PUSH
53875: LD_INT 3
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 2
53884: PUSH
53885: LD_INT 3
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: LIST
53896: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53897: LD_ADDR_VAR 0 56
53901: PUSH
53902: LD_INT 1
53904: PUSH
53905: LD_INT 3
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 0
53914: PUSH
53915: LD_INT 3
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 1
53924: NEG
53925: PUSH
53926: LD_INT 2
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: LIST
53937: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53938: LD_ADDR_VAR 0 57
53942: PUSH
53943: LD_INT 2
53945: NEG
53946: PUSH
53947: LD_INT 1
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 3
53956: NEG
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 3
53967: NEG
53968: PUSH
53969: LD_INT 1
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: LIST
53981: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53982: LD_ADDR_VAR 0 58
53986: PUSH
53987: LD_INT 2
53989: NEG
53990: PUSH
53991: LD_INT 3
53993: NEG
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 3
54001: NEG
54002: PUSH
54003: LD_INT 2
54005: NEG
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 3
54013: NEG
54014: PUSH
54015: LD_INT 3
54017: NEG
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: LIST
54027: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54028: LD_ADDR_VAR 0 59
54032: PUSH
54033: LD_INT 1
54035: NEG
54036: PUSH
54037: LD_INT 2
54039: NEG
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 0
54047: PUSH
54048: LD_INT 2
54050: NEG
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 1
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: LIST
54071: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54072: LD_ADDR_VAR 0 60
54076: PUSH
54077: LD_INT 1
54079: PUSH
54080: LD_INT 1
54082: NEG
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 2
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 2
54100: PUSH
54101: LD_INT 1
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: LIST
54112: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54113: LD_ADDR_VAR 0 61
54117: PUSH
54118: LD_INT 2
54120: PUSH
54121: LD_INT 1
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 2
54130: PUSH
54131: LD_INT 2
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: LD_INT 2
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: LIST
54152: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54153: LD_ADDR_VAR 0 62
54157: PUSH
54158: LD_INT 1
54160: PUSH
54161: LD_INT 2
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: LD_INT 2
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 1
54180: NEG
54181: PUSH
54182: LD_INT 1
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: LIST
54193: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54194: LD_ADDR_VAR 0 63
54198: PUSH
54199: LD_INT 1
54201: NEG
54202: PUSH
54203: LD_INT 1
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 2
54212: NEG
54213: PUSH
54214: LD_INT 0
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 2
54223: NEG
54224: PUSH
54225: LD_INT 1
54227: NEG
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: LIST
54237: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54238: LD_ADDR_VAR 0 64
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: LD_INT 2
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 2
54257: NEG
54258: PUSH
54259: LD_INT 1
54261: NEG
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 2
54269: NEG
54270: PUSH
54271: LD_INT 2
54273: NEG
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: LIST
54283: ST_TO_ADDR
// end ; 2 :
54284: GO 57550
54286: LD_INT 2
54288: DOUBLE
54289: EQUAL
54290: IFTRUE 54294
54292: GO 57549
54294: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54295: LD_ADDR_VAR 0 29
54299: PUSH
54300: LD_INT 4
54302: PUSH
54303: LD_INT 0
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 4
54312: PUSH
54313: LD_INT 1
54315: NEG
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 5
54323: PUSH
54324: LD_INT 0
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 5
54333: PUSH
54334: LD_INT 1
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 4
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 3
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 3
54363: PUSH
54364: LD_INT 1
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 3
54374: PUSH
54375: LD_INT 2
54377: NEG
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 5
54385: PUSH
54386: LD_INT 2
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 3
54395: PUSH
54396: LD_INT 3
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 3
54405: PUSH
54406: LD_INT 2
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 4
54415: PUSH
54416: LD_INT 3
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 4
54425: PUSH
54426: LD_INT 4
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 3
54435: PUSH
54436: LD_INT 4
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 2
54445: PUSH
54446: LD_INT 3
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 2
54455: PUSH
54456: LD_INT 2
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 4
54465: PUSH
54466: LD_INT 2
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 2
54475: PUSH
54476: LD_INT 4
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 0
54485: PUSH
54486: LD_INT 4
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: LD_INT 3
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 1
54505: PUSH
54506: LD_INT 4
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: PUSH
54516: LD_INT 5
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: LD_INT 5
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 1
54535: NEG
54536: PUSH
54537: LD_INT 4
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 1
54546: NEG
54547: PUSH
54548: LD_INT 3
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 2
54557: PUSH
54558: LD_INT 5
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 2
54567: NEG
54568: PUSH
54569: LD_INT 3
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 3
54578: NEG
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 3
54589: NEG
54590: PUSH
54591: LD_INT 1
54593: NEG
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 2
54601: NEG
54602: PUSH
54603: LD_INT 0
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 2
54612: NEG
54613: PUSH
54614: LD_INT 1
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 3
54623: NEG
54624: PUSH
54625: LD_INT 1
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 4
54634: NEG
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 4
54645: NEG
54646: PUSH
54647: LD_INT 1
54649: NEG
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 4
54657: NEG
54658: PUSH
54659: LD_INT 2
54661: NEG
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 2
54669: NEG
54670: PUSH
54671: LD_INT 2
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 4
54680: NEG
54681: PUSH
54682: LD_INT 4
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 4
54692: NEG
54693: PUSH
54694: LD_INT 5
54696: NEG
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 3
54704: NEG
54705: PUSH
54706: LD_INT 4
54708: NEG
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 3
54716: NEG
54717: PUSH
54718: LD_INT 3
54720: NEG
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 4
54728: NEG
54729: PUSH
54730: LD_INT 3
54732: NEG
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 5
54740: NEG
54741: PUSH
54742: LD_INT 4
54744: NEG
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 5
54752: NEG
54753: PUSH
54754: LD_INT 5
54756: NEG
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 3
54764: NEG
54765: PUSH
54766: LD_INT 5
54768: NEG
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 5
54776: NEG
54777: PUSH
54778: LD_INT 3
54780: NEG
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54833: LD_ADDR_VAR 0 30
54837: PUSH
54838: LD_INT 4
54840: PUSH
54841: LD_INT 4
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 4
54850: PUSH
54851: LD_INT 3
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 5
54860: PUSH
54861: LD_INT 4
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 5
54870: PUSH
54871: LD_INT 5
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 4
54880: PUSH
54881: LD_INT 5
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 3
54890: PUSH
54891: LD_INT 4
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 3
54900: PUSH
54901: LD_INT 3
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 5
54910: PUSH
54911: LD_INT 3
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 3
54920: PUSH
54921: LD_INT 5
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 0
54930: PUSH
54931: LD_INT 3
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 0
54940: PUSH
54941: LD_INT 2
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 1
54950: PUSH
54951: LD_INT 3
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 1
54960: PUSH
54961: LD_INT 4
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: LD_INT 4
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 1
54980: NEG
54981: PUSH
54982: LD_INT 3
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 1
54991: NEG
54992: PUSH
54993: LD_INT 2
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 2
55002: PUSH
55003: LD_INT 4
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 2
55012: NEG
55013: PUSH
55014: LD_INT 2
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 4
55023: NEG
55024: PUSH
55025: LD_INT 0
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 4
55034: NEG
55035: PUSH
55036: LD_INT 1
55038: NEG
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 3
55046: NEG
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 3
55057: NEG
55058: PUSH
55059: LD_INT 1
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 4
55068: NEG
55069: PUSH
55070: LD_INT 1
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 5
55079: NEG
55080: PUSH
55081: LD_INT 0
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 5
55090: NEG
55091: PUSH
55092: LD_INT 1
55094: NEG
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 5
55102: NEG
55103: PUSH
55104: LD_INT 2
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 3
55114: NEG
55115: PUSH
55116: LD_INT 2
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 3
55125: NEG
55126: PUSH
55127: LD_INT 3
55129: NEG
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 3
55137: NEG
55138: PUSH
55139: LD_INT 4
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 2
55149: NEG
55150: PUSH
55151: LD_INT 3
55153: NEG
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 2
55161: NEG
55162: PUSH
55163: LD_INT 2
55165: NEG
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 3
55173: NEG
55174: PUSH
55175: LD_INT 2
55177: NEG
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 4
55185: NEG
55186: PUSH
55187: LD_INT 3
55189: NEG
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 4
55197: NEG
55198: PUSH
55199: LD_INT 4
55201: NEG
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 2
55209: NEG
55210: PUSH
55211: LD_INT 4
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 4
55221: NEG
55222: PUSH
55223: LD_INT 2
55225: NEG
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 0
55233: PUSH
55234: LD_INT 4
55236: NEG
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 0
55244: PUSH
55245: LD_INT 5
55247: NEG
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 1
55255: PUSH
55256: LD_INT 4
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 1
55266: PUSH
55267: LD_INT 3
55269: NEG
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 0
55277: PUSH
55278: LD_INT 3
55280: NEG
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 1
55288: NEG
55289: PUSH
55290: LD_INT 4
55292: NEG
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 1
55300: NEG
55301: PUSH
55302: LD_INT 5
55304: NEG
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 2
55312: PUSH
55313: LD_INT 3
55315: NEG
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 2
55323: NEG
55324: PUSH
55325: LD_INT 5
55327: NEG
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55380: LD_ADDR_VAR 0 31
55384: PUSH
55385: LD_INT 0
55387: PUSH
55388: LD_INT 4
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 0
55397: PUSH
55398: LD_INT 3
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 1
55407: PUSH
55408: LD_INT 4
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 1
55417: PUSH
55418: LD_INT 5
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 0
55427: PUSH
55428: LD_INT 5
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 1
55437: NEG
55438: PUSH
55439: LD_INT 4
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 1
55448: NEG
55449: PUSH
55450: LD_INT 3
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 2
55459: PUSH
55460: LD_INT 5
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 2
55469: NEG
55470: PUSH
55471: LD_INT 3
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 3
55480: NEG
55481: PUSH
55482: LD_INT 0
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 3
55491: NEG
55492: PUSH
55493: LD_INT 1
55495: NEG
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 2
55503: NEG
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 2
55514: NEG
55515: PUSH
55516: LD_INT 1
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 3
55525: NEG
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 4
55536: NEG
55537: PUSH
55538: LD_INT 0
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 4
55547: NEG
55548: PUSH
55549: LD_INT 1
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 4
55559: NEG
55560: PUSH
55561: LD_INT 2
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 2
55571: NEG
55572: PUSH
55573: LD_INT 2
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 4
55582: NEG
55583: PUSH
55584: LD_INT 4
55586: NEG
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 4
55594: NEG
55595: PUSH
55596: LD_INT 5
55598: NEG
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 3
55606: NEG
55607: PUSH
55608: LD_INT 4
55610: NEG
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 3
55618: NEG
55619: PUSH
55620: LD_INT 3
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 4
55630: NEG
55631: PUSH
55632: LD_INT 3
55634: NEG
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 5
55642: NEG
55643: PUSH
55644: LD_INT 4
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 5
55654: NEG
55655: PUSH
55656: LD_INT 5
55658: NEG
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 3
55666: NEG
55667: PUSH
55668: LD_INT 5
55670: NEG
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 5
55678: NEG
55679: PUSH
55680: LD_INT 3
55682: NEG
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: LD_INT 3
55693: NEG
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: LD_INT 4
55704: NEG
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 1
55712: PUSH
55713: LD_INT 3
55715: NEG
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 1
55723: PUSH
55724: LD_INT 2
55726: NEG
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 0
55734: PUSH
55735: LD_INT 2
55737: NEG
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 1
55745: NEG
55746: PUSH
55747: LD_INT 3
55749: NEG
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 1
55757: NEG
55758: PUSH
55759: LD_INT 4
55761: NEG
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 2
55769: PUSH
55770: LD_INT 2
55772: NEG
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 2
55780: NEG
55781: PUSH
55782: LD_INT 4
55784: NEG
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 4
55792: PUSH
55793: LD_INT 0
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 4
55802: PUSH
55803: LD_INT 1
55805: NEG
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 5
55813: PUSH
55814: LD_INT 0
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 5
55823: PUSH
55824: LD_INT 1
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 4
55833: PUSH
55834: LD_INT 1
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 3
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 3
55853: PUSH
55854: LD_INT 1
55856: NEG
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 3
55864: PUSH
55865: LD_INT 2
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 5
55875: PUSH
55876: LD_INT 2
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55930: LD_ADDR_VAR 0 32
55934: PUSH
55935: LD_INT 4
55937: NEG
55938: PUSH
55939: LD_INT 0
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 4
55948: NEG
55949: PUSH
55950: LD_INT 1
55952: NEG
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 3
55960: NEG
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 3
55971: NEG
55972: PUSH
55973: LD_INT 1
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 4
55982: NEG
55983: PUSH
55984: LD_INT 1
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 5
55993: NEG
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 5
56004: NEG
56005: PUSH
56006: LD_INT 1
56008: NEG
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 5
56016: NEG
56017: PUSH
56018: LD_INT 2
56020: NEG
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 3
56028: NEG
56029: PUSH
56030: LD_INT 2
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 3
56039: NEG
56040: PUSH
56041: LD_INT 3
56043: NEG
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 3
56051: NEG
56052: PUSH
56053: LD_INT 4
56055: NEG
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 2
56063: NEG
56064: PUSH
56065: LD_INT 3
56067: NEG
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 2
56075: NEG
56076: PUSH
56077: LD_INT 2
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 3
56087: NEG
56088: PUSH
56089: LD_INT 2
56091: NEG
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 4
56099: NEG
56100: PUSH
56101: LD_INT 3
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 4
56111: NEG
56112: PUSH
56113: LD_INT 4
56115: NEG
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 2
56123: NEG
56124: PUSH
56125: LD_INT 4
56127: NEG
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 4
56135: NEG
56136: PUSH
56137: LD_INT 2
56139: NEG
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 0
56147: PUSH
56148: LD_INT 4
56150: NEG
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 0
56158: PUSH
56159: LD_INT 5
56161: NEG
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 1
56169: PUSH
56170: LD_INT 4
56172: NEG
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 1
56180: PUSH
56181: LD_INT 3
56183: NEG
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 0
56191: PUSH
56192: LD_INT 3
56194: NEG
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 1
56202: NEG
56203: PUSH
56204: LD_INT 4
56206: NEG
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 1
56214: NEG
56215: PUSH
56216: LD_INT 5
56218: NEG
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 2
56226: PUSH
56227: LD_INT 3
56229: NEG
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 2
56237: NEG
56238: PUSH
56239: LD_INT 5
56241: NEG
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 3
56249: PUSH
56250: LD_INT 0
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 3
56259: PUSH
56260: LD_INT 1
56262: NEG
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 4
56270: PUSH
56271: LD_INT 0
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 4
56280: PUSH
56281: LD_INT 1
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 3
56290: PUSH
56291: LD_INT 1
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 2
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 2
56310: PUSH
56311: LD_INT 1
56313: NEG
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 2
56321: PUSH
56322: LD_INT 2
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 4
56332: PUSH
56333: LD_INT 2
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 4
56342: PUSH
56343: LD_INT 4
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 4
56352: PUSH
56353: LD_INT 3
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 5
56362: PUSH
56363: LD_INT 4
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 5
56372: PUSH
56373: LD_INT 5
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 4
56382: PUSH
56383: LD_INT 5
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 3
56392: PUSH
56393: LD_INT 4
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 3
56402: PUSH
56403: LD_INT 3
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 5
56412: PUSH
56413: LD_INT 3
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 3
56422: PUSH
56423: LD_INT 5
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56477: LD_ADDR_VAR 0 33
56481: PUSH
56482: LD_INT 4
56484: NEG
56485: PUSH
56486: LD_INT 4
56488: NEG
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 4
56496: NEG
56497: PUSH
56498: LD_INT 5
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 3
56508: NEG
56509: PUSH
56510: LD_INT 4
56512: NEG
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 3
56520: NEG
56521: PUSH
56522: LD_INT 3
56524: NEG
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 4
56532: NEG
56533: PUSH
56534: LD_INT 3
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 5
56544: NEG
56545: PUSH
56546: LD_INT 4
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 5
56556: NEG
56557: PUSH
56558: LD_INT 5
56560: NEG
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 3
56568: NEG
56569: PUSH
56570: LD_INT 5
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 5
56580: NEG
56581: PUSH
56582: LD_INT 3
56584: NEG
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: LD_INT 3
56595: NEG
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 0
56603: PUSH
56604: LD_INT 4
56606: NEG
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 1
56614: PUSH
56615: LD_INT 3
56617: NEG
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 1
56625: PUSH
56626: LD_INT 2
56628: NEG
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: LD_INT 2
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 1
56647: NEG
56648: PUSH
56649: LD_INT 3
56651: NEG
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 1
56659: NEG
56660: PUSH
56661: LD_INT 4
56663: NEG
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 2
56671: PUSH
56672: LD_INT 2
56674: NEG
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 2
56682: NEG
56683: PUSH
56684: LD_INT 4
56686: NEG
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 4
56694: PUSH
56695: LD_INT 0
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 4
56704: PUSH
56705: LD_INT 1
56707: NEG
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 5
56715: PUSH
56716: LD_INT 0
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 5
56725: PUSH
56726: LD_INT 1
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 4
56735: PUSH
56736: LD_INT 1
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 3
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 3
56755: PUSH
56756: LD_INT 1
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 3
56766: PUSH
56767: LD_INT 2
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 5
56777: PUSH
56778: LD_INT 2
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 3
56787: PUSH
56788: LD_INT 3
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 3
56797: PUSH
56798: LD_INT 2
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 4
56807: PUSH
56808: LD_INT 3
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 4
56817: PUSH
56818: LD_INT 4
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 3
56827: PUSH
56828: LD_INT 4
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 2
56837: PUSH
56838: LD_INT 3
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 2
56847: PUSH
56848: LD_INT 2
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 4
56857: PUSH
56858: LD_INT 2
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 2
56867: PUSH
56868: LD_INT 4
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 0
56877: PUSH
56878: LD_INT 4
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: LD_INT 3
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: LD_INT 4
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: LD_INT 5
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 0
56917: PUSH
56918: LD_INT 5
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 1
56927: NEG
56928: PUSH
56929: LD_INT 4
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: LD_INT 3
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 2
56949: PUSH
56950: LD_INT 5
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 2
56959: NEG
56960: PUSH
56961: LD_INT 3
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57015: LD_ADDR_VAR 0 34
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: LD_INT 4
57025: NEG
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 0
57033: PUSH
57034: LD_INT 5
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 1
57044: PUSH
57045: LD_INT 4
57047: NEG
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 1
57055: PUSH
57056: LD_INT 3
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 0
57066: PUSH
57067: LD_INT 3
57069: NEG
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 1
57077: NEG
57078: PUSH
57079: LD_INT 4
57081: NEG
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 1
57089: NEG
57090: PUSH
57091: LD_INT 5
57093: NEG
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 2
57101: PUSH
57102: LD_INT 3
57104: NEG
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 2
57112: NEG
57113: PUSH
57114: LD_INT 5
57116: NEG
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 3
57124: PUSH
57125: LD_INT 0
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 3
57134: PUSH
57135: LD_INT 1
57137: NEG
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 4
57145: PUSH
57146: LD_INT 0
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 4
57155: PUSH
57156: LD_INT 1
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 3
57165: PUSH
57166: LD_INT 1
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 2
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 2
57185: PUSH
57186: LD_INT 1
57188: NEG
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 2
57196: PUSH
57197: LD_INT 2
57199: NEG
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 4
57207: PUSH
57208: LD_INT 2
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 4
57217: PUSH
57218: LD_INT 4
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 4
57227: PUSH
57228: LD_INT 3
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 5
57237: PUSH
57238: LD_INT 4
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 5
57247: PUSH
57248: LD_INT 5
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 4
57257: PUSH
57258: LD_INT 5
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 3
57267: PUSH
57268: LD_INT 4
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 3
57277: PUSH
57278: LD_INT 3
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 5
57287: PUSH
57288: LD_INT 3
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 3
57297: PUSH
57298: LD_INT 5
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 0
57307: PUSH
57308: LD_INT 3
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 0
57317: PUSH
57318: LD_INT 2
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 1
57327: PUSH
57328: LD_INT 3
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 1
57337: PUSH
57338: LD_INT 4
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 0
57347: PUSH
57348: LD_INT 4
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 1
57357: NEG
57358: PUSH
57359: LD_INT 3
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 1
57368: NEG
57369: PUSH
57370: LD_INT 2
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 2
57379: PUSH
57380: LD_INT 4
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 2
57389: NEG
57390: PUSH
57391: LD_INT 2
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 4
57400: NEG
57401: PUSH
57402: LD_INT 0
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 4
57411: NEG
57412: PUSH
57413: LD_INT 1
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 3
57423: NEG
57424: PUSH
57425: LD_INT 0
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 3
57434: NEG
57435: PUSH
57436: LD_INT 1
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 4
57445: NEG
57446: PUSH
57447: LD_INT 1
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 5
57456: NEG
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 5
57467: NEG
57468: PUSH
57469: LD_INT 1
57471: NEG
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 5
57479: NEG
57480: PUSH
57481: LD_INT 2
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 3
57491: NEG
57492: PUSH
57493: LD_INT 2
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: ST_TO_ADDR
// end ; end ;
57547: GO 57550
57549: POP
// case btype of b_depot , b_warehouse :
57550: LD_VAR 0 1
57554: PUSH
57555: LD_INT 0
57557: DOUBLE
57558: EQUAL
57559: IFTRUE 57569
57561: LD_INT 1
57563: DOUBLE
57564: EQUAL
57565: IFTRUE 57569
57567: GO 57770
57569: POP
// case nation of nation_american :
57570: LD_VAR 0 5
57574: PUSH
57575: LD_INT 1
57577: DOUBLE
57578: EQUAL
57579: IFTRUE 57583
57581: GO 57639
57583: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57584: LD_ADDR_VAR 0 9
57588: PUSH
57589: LD_VAR 0 11
57593: PUSH
57594: LD_VAR 0 12
57598: PUSH
57599: LD_VAR 0 13
57603: PUSH
57604: LD_VAR 0 14
57608: PUSH
57609: LD_VAR 0 15
57613: PUSH
57614: LD_VAR 0 16
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: PUSH
57627: LD_VAR 0 4
57631: PUSH
57632: LD_INT 1
57634: PLUS
57635: ARRAY
57636: ST_TO_ADDR
57637: GO 57768
57639: LD_INT 2
57641: DOUBLE
57642: EQUAL
57643: IFTRUE 57647
57645: GO 57703
57647: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57648: LD_ADDR_VAR 0 9
57652: PUSH
57653: LD_VAR 0 17
57657: PUSH
57658: LD_VAR 0 18
57662: PUSH
57663: LD_VAR 0 19
57667: PUSH
57668: LD_VAR 0 20
57672: PUSH
57673: LD_VAR 0 21
57677: PUSH
57678: LD_VAR 0 22
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: PUSH
57691: LD_VAR 0 4
57695: PUSH
57696: LD_INT 1
57698: PLUS
57699: ARRAY
57700: ST_TO_ADDR
57701: GO 57768
57703: LD_INT 3
57705: DOUBLE
57706: EQUAL
57707: IFTRUE 57711
57709: GO 57767
57711: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57712: LD_ADDR_VAR 0 9
57716: PUSH
57717: LD_VAR 0 23
57721: PUSH
57722: LD_VAR 0 24
57726: PUSH
57727: LD_VAR 0 25
57731: PUSH
57732: LD_VAR 0 26
57736: PUSH
57737: LD_VAR 0 27
57741: PUSH
57742: LD_VAR 0 28
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: PUSH
57755: LD_VAR 0 4
57759: PUSH
57760: LD_INT 1
57762: PLUS
57763: ARRAY
57764: ST_TO_ADDR
57765: GO 57768
57767: POP
57768: GO 58323
57770: LD_INT 2
57772: DOUBLE
57773: EQUAL
57774: IFTRUE 57784
57776: LD_INT 3
57778: DOUBLE
57779: EQUAL
57780: IFTRUE 57784
57782: GO 57840
57784: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57785: LD_ADDR_VAR 0 9
57789: PUSH
57790: LD_VAR 0 29
57794: PUSH
57795: LD_VAR 0 30
57799: PUSH
57800: LD_VAR 0 31
57804: PUSH
57805: LD_VAR 0 32
57809: PUSH
57810: LD_VAR 0 33
57814: PUSH
57815: LD_VAR 0 34
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: PUSH
57828: LD_VAR 0 4
57832: PUSH
57833: LD_INT 1
57835: PLUS
57836: ARRAY
57837: ST_TO_ADDR
57838: GO 58323
57840: LD_INT 16
57842: DOUBLE
57843: EQUAL
57844: IFTRUE 57902
57846: LD_INT 17
57848: DOUBLE
57849: EQUAL
57850: IFTRUE 57902
57852: LD_INT 18
57854: DOUBLE
57855: EQUAL
57856: IFTRUE 57902
57858: LD_INT 19
57860: DOUBLE
57861: EQUAL
57862: IFTRUE 57902
57864: LD_INT 22
57866: DOUBLE
57867: EQUAL
57868: IFTRUE 57902
57870: LD_INT 20
57872: DOUBLE
57873: EQUAL
57874: IFTRUE 57902
57876: LD_INT 21
57878: DOUBLE
57879: EQUAL
57880: IFTRUE 57902
57882: LD_INT 23
57884: DOUBLE
57885: EQUAL
57886: IFTRUE 57902
57888: LD_INT 24
57890: DOUBLE
57891: EQUAL
57892: IFTRUE 57902
57894: LD_INT 25
57896: DOUBLE
57897: EQUAL
57898: IFTRUE 57902
57900: GO 57958
57902: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57903: LD_ADDR_VAR 0 9
57907: PUSH
57908: LD_VAR 0 35
57912: PUSH
57913: LD_VAR 0 36
57917: PUSH
57918: LD_VAR 0 37
57922: PUSH
57923: LD_VAR 0 38
57927: PUSH
57928: LD_VAR 0 39
57932: PUSH
57933: LD_VAR 0 40
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: PUSH
57946: LD_VAR 0 4
57950: PUSH
57951: LD_INT 1
57953: PLUS
57954: ARRAY
57955: ST_TO_ADDR
57956: GO 58323
57958: LD_INT 6
57960: DOUBLE
57961: EQUAL
57962: IFTRUE 58014
57964: LD_INT 7
57966: DOUBLE
57967: EQUAL
57968: IFTRUE 58014
57970: LD_INT 8
57972: DOUBLE
57973: EQUAL
57974: IFTRUE 58014
57976: LD_INT 13
57978: DOUBLE
57979: EQUAL
57980: IFTRUE 58014
57982: LD_INT 12
57984: DOUBLE
57985: EQUAL
57986: IFTRUE 58014
57988: LD_INT 15
57990: DOUBLE
57991: EQUAL
57992: IFTRUE 58014
57994: LD_INT 11
57996: DOUBLE
57997: EQUAL
57998: IFTRUE 58014
58000: LD_INT 14
58002: DOUBLE
58003: EQUAL
58004: IFTRUE 58014
58006: LD_INT 10
58008: DOUBLE
58009: EQUAL
58010: IFTRUE 58014
58012: GO 58070
58014: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58015: LD_ADDR_VAR 0 9
58019: PUSH
58020: LD_VAR 0 41
58024: PUSH
58025: LD_VAR 0 42
58029: PUSH
58030: LD_VAR 0 43
58034: PUSH
58035: LD_VAR 0 44
58039: PUSH
58040: LD_VAR 0 45
58044: PUSH
58045: LD_VAR 0 46
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: PUSH
58058: LD_VAR 0 4
58062: PUSH
58063: LD_INT 1
58065: PLUS
58066: ARRAY
58067: ST_TO_ADDR
58068: GO 58323
58070: LD_INT 36
58072: DOUBLE
58073: EQUAL
58074: IFTRUE 58078
58076: GO 58134
58078: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58079: LD_ADDR_VAR 0 9
58083: PUSH
58084: LD_VAR 0 47
58088: PUSH
58089: LD_VAR 0 48
58093: PUSH
58094: LD_VAR 0 49
58098: PUSH
58099: LD_VAR 0 50
58103: PUSH
58104: LD_VAR 0 51
58108: PUSH
58109: LD_VAR 0 52
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: PUSH
58122: LD_VAR 0 4
58126: PUSH
58127: LD_INT 1
58129: PLUS
58130: ARRAY
58131: ST_TO_ADDR
58132: GO 58323
58134: LD_INT 4
58136: DOUBLE
58137: EQUAL
58138: IFTRUE 58160
58140: LD_INT 5
58142: DOUBLE
58143: EQUAL
58144: IFTRUE 58160
58146: LD_INT 34
58148: DOUBLE
58149: EQUAL
58150: IFTRUE 58160
58152: LD_INT 37
58154: DOUBLE
58155: EQUAL
58156: IFTRUE 58160
58158: GO 58216
58160: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58161: LD_ADDR_VAR 0 9
58165: PUSH
58166: LD_VAR 0 53
58170: PUSH
58171: LD_VAR 0 54
58175: PUSH
58176: LD_VAR 0 55
58180: PUSH
58181: LD_VAR 0 56
58185: PUSH
58186: LD_VAR 0 57
58190: PUSH
58191: LD_VAR 0 58
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: PUSH
58204: LD_VAR 0 4
58208: PUSH
58209: LD_INT 1
58211: PLUS
58212: ARRAY
58213: ST_TO_ADDR
58214: GO 58323
58216: LD_INT 31
58218: DOUBLE
58219: EQUAL
58220: IFTRUE 58266
58222: LD_INT 32
58224: DOUBLE
58225: EQUAL
58226: IFTRUE 58266
58228: LD_INT 33
58230: DOUBLE
58231: EQUAL
58232: IFTRUE 58266
58234: LD_INT 27
58236: DOUBLE
58237: EQUAL
58238: IFTRUE 58266
58240: LD_INT 26
58242: DOUBLE
58243: EQUAL
58244: IFTRUE 58266
58246: LD_INT 28
58248: DOUBLE
58249: EQUAL
58250: IFTRUE 58266
58252: LD_INT 29
58254: DOUBLE
58255: EQUAL
58256: IFTRUE 58266
58258: LD_INT 30
58260: DOUBLE
58261: EQUAL
58262: IFTRUE 58266
58264: GO 58322
58266: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58267: LD_ADDR_VAR 0 9
58271: PUSH
58272: LD_VAR 0 59
58276: PUSH
58277: LD_VAR 0 60
58281: PUSH
58282: LD_VAR 0 61
58286: PUSH
58287: LD_VAR 0 62
58291: PUSH
58292: LD_VAR 0 63
58296: PUSH
58297: LD_VAR 0 64
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: PUSH
58310: LD_VAR 0 4
58314: PUSH
58315: LD_INT 1
58317: PLUS
58318: ARRAY
58319: ST_TO_ADDR
58320: GO 58323
58322: POP
// temp_list2 = [ ] ;
58323: LD_ADDR_VAR 0 10
58327: PUSH
58328: EMPTY
58329: ST_TO_ADDR
// for i in temp_list do
58330: LD_ADDR_VAR 0 8
58334: PUSH
58335: LD_VAR 0 9
58339: PUSH
58340: FOR_IN
58341: IFFALSE 58393
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58343: LD_ADDR_VAR 0 10
58347: PUSH
58348: LD_VAR 0 10
58352: PUSH
58353: LD_VAR 0 8
58357: PUSH
58358: LD_INT 1
58360: ARRAY
58361: PUSH
58362: LD_VAR 0 2
58366: PLUS
58367: PUSH
58368: LD_VAR 0 8
58372: PUSH
58373: LD_INT 2
58375: ARRAY
58376: PUSH
58377: LD_VAR 0 3
58381: PLUS
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: EMPTY
58388: LIST
58389: ADD
58390: ST_TO_ADDR
58391: GO 58340
58393: POP
58394: POP
// result = temp_list2 ;
58395: LD_ADDR_VAR 0 7
58399: PUSH
58400: LD_VAR 0 10
58404: ST_TO_ADDR
// end ;
58405: LD_VAR 0 7
58409: RET
// export function EnemyInRange ( unit , dist ) ; begin
58410: LD_INT 0
58412: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58413: LD_ADDR_VAR 0 3
58417: PUSH
58418: LD_VAR 0 1
58422: PPUSH
58423: CALL_OW 255
58427: PPUSH
58428: LD_VAR 0 1
58432: PPUSH
58433: CALL_OW 250
58437: PPUSH
58438: LD_VAR 0 1
58442: PPUSH
58443: CALL_OW 251
58447: PPUSH
58448: LD_VAR 0 2
58452: PPUSH
58453: CALL 31812 0 4
58457: PUSH
58458: LD_INT 4
58460: ARRAY
58461: ST_TO_ADDR
// end ;
58462: LD_VAR 0 3
58466: RET
// export function PlayerSeeMe ( unit ) ; begin
58467: LD_INT 0
58469: PPUSH
// result := See ( your_side , unit ) ;
58470: LD_ADDR_VAR 0 2
58474: PUSH
58475: LD_OWVAR 2
58479: PPUSH
58480: LD_VAR 0 1
58484: PPUSH
58485: CALL_OW 292
58489: ST_TO_ADDR
// end ;
58490: LD_VAR 0 2
58494: RET
// export function ReverseDir ( unit ) ; begin
58495: LD_INT 0
58497: PPUSH
// if not unit then
58498: LD_VAR 0 1
58502: NOT
58503: IFFALSE 58507
// exit ;
58505: GO 58530
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58507: LD_ADDR_VAR 0 2
58511: PUSH
58512: LD_VAR 0 1
58516: PPUSH
58517: CALL_OW 254
58521: PUSH
58522: LD_INT 3
58524: PLUS
58525: PUSH
58526: LD_INT 6
58528: MOD
58529: ST_TO_ADDR
// end ;
58530: LD_VAR 0 2
58534: RET
// export function ReverseArray ( array ) ; var i ; begin
58535: LD_INT 0
58537: PPUSH
58538: PPUSH
// if not array then
58539: LD_VAR 0 1
58543: NOT
58544: IFFALSE 58548
// exit ;
58546: GO 58603
// result := [ ] ;
58548: LD_ADDR_VAR 0 2
58552: PUSH
58553: EMPTY
58554: ST_TO_ADDR
// for i := array downto 1 do
58555: LD_ADDR_VAR 0 3
58559: PUSH
58560: DOUBLE
58561: LD_VAR 0 1
58565: INC
58566: ST_TO_ADDR
58567: LD_INT 1
58569: PUSH
58570: FOR_DOWNTO
58571: IFFALSE 58601
// result := Join ( result , array [ i ] ) ;
58573: LD_ADDR_VAR 0 2
58577: PUSH
58578: LD_VAR 0 2
58582: PPUSH
58583: LD_VAR 0 1
58587: PUSH
58588: LD_VAR 0 3
58592: ARRAY
58593: PPUSH
58594: CALL 63246 0 2
58598: ST_TO_ADDR
58599: GO 58570
58601: POP
58602: POP
// end ;
58603: LD_VAR 0 2
58607: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
58608: LD_INT 0
58610: PPUSH
58611: PPUSH
58612: PPUSH
58613: PPUSH
58614: PPUSH
58615: PPUSH
// if not unit or not hexes then
58616: LD_VAR 0 1
58620: NOT
58621: PUSH
58622: LD_VAR 0 2
58626: NOT
58627: OR
58628: IFFALSE 58632
// exit ;
58630: GO 58755
// dist := 9999 ;
58632: LD_ADDR_VAR 0 5
58636: PUSH
58637: LD_INT 9999
58639: ST_TO_ADDR
// for i = 1 to hexes do
58640: LD_ADDR_VAR 0 4
58644: PUSH
58645: DOUBLE
58646: LD_INT 1
58648: DEC
58649: ST_TO_ADDR
58650: LD_VAR 0 2
58654: PUSH
58655: FOR_TO
58656: IFFALSE 58743
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58658: LD_ADDR_VAR 0 6
58662: PUSH
58663: LD_VAR 0 1
58667: PPUSH
58668: LD_VAR 0 2
58672: PUSH
58673: LD_VAR 0 4
58677: ARRAY
58678: PUSH
58679: LD_INT 1
58681: ARRAY
58682: PPUSH
58683: LD_VAR 0 2
58687: PUSH
58688: LD_VAR 0 4
58692: ARRAY
58693: PUSH
58694: LD_INT 2
58696: ARRAY
58697: PPUSH
58698: CALL_OW 297
58702: ST_TO_ADDR
// if tdist < dist then
58703: LD_VAR 0 6
58707: PUSH
58708: LD_VAR 0 5
58712: LESS
58713: IFFALSE 58741
// begin hex := hexes [ i ] ;
58715: LD_ADDR_VAR 0 8
58719: PUSH
58720: LD_VAR 0 2
58724: PUSH
58725: LD_VAR 0 4
58729: ARRAY
58730: ST_TO_ADDR
// dist := tdist ;
58731: LD_ADDR_VAR 0 5
58735: PUSH
58736: LD_VAR 0 6
58740: ST_TO_ADDR
// end ; end ;
58741: GO 58655
58743: POP
58744: POP
// result := hex ;
58745: LD_ADDR_VAR 0 3
58749: PUSH
58750: LD_VAR 0 8
58754: ST_TO_ADDR
// end ;
58755: LD_VAR 0 3
58759: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58760: LD_INT 0
58762: PPUSH
58763: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58764: LD_VAR 0 1
58768: NOT
58769: PUSH
58770: LD_VAR 0 1
58774: PUSH
58775: LD_INT 21
58777: PUSH
58778: LD_INT 2
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 23
58787: PUSH
58788: LD_INT 2
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PPUSH
58799: CALL_OW 69
58803: IN
58804: NOT
58805: OR
58806: IFFALSE 58810
// exit ;
58808: GO 58857
// for i = 1 to 3 do
58810: LD_ADDR_VAR 0 3
58814: PUSH
58815: DOUBLE
58816: LD_INT 1
58818: DEC
58819: ST_TO_ADDR
58820: LD_INT 3
58822: PUSH
58823: FOR_TO
58824: IFFALSE 58855
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58826: LD_VAR 0 1
58830: PPUSH
58831: CALL_OW 250
58835: PPUSH
58836: LD_VAR 0 1
58840: PPUSH
58841: CALL_OW 251
58845: PPUSH
58846: LD_INT 1
58848: PPUSH
58849: CALL_OW 453
58853: GO 58823
58855: POP
58856: POP
// end ;
58857: LD_VAR 0 2
58861: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58862: LD_INT 0
58864: PPUSH
58865: PPUSH
58866: PPUSH
58867: PPUSH
58868: PPUSH
58869: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58870: LD_VAR 0 1
58874: NOT
58875: PUSH
58876: LD_VAR 0 2
58880: NOT
58881: OR
58882: PUSH
58883: LD_VAR 0 1
58887: PPUSH
58888: CALL_OW 314
58892: OR
58893: IFFALSE 58897
// exit ;
58895: GO 59364
// if GetLives ( i ) < 250 then
58897: LD_VAR 0 4
58901: PPUSH
58902: CALL_OW 256
58906: PUSH
58907: LD_INT 250
58909: LESS
58910: IFFALSE 58923
// begin ComAutodestruct ( i ) ;
58912: LD_VAR 0 4
58916: PPUSH
58917: CALL 58760 0 1
// exit ;
58921: GO 59364
// end ; x := GetX ( enemy_unit ) ;
58923: LD_ADDR_VAR 0 7
58927: PUSH
58928: LD_VAR 0 2
58932: PPUSH
58933: CALL_OW 250
58937: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58938: LD_ADDR_VAR 0 8
58942: PUSH
58943: LD_VAR 0 2
58947: PPUSH
58948: CALL_OW 251
58952: ST_TO_ADDR
// if not x or not y then
58953: LD_VAR 0 7
58957: NOT
58958: PUSH
58959: LD_VAR 0 8
58963: NOT
58964: OR
58965: IFFALSE 58969
// exit ;
58967: GO 59364
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58969: LD_ADDR_VAR 0 6
58973: PUSH
58974: LD_VAR 0 7
58978: PPUSH
58979: LD_INT 0
58981: PPUSH
58982: LD_INT 4
58984: PPUSH
58985: CALL_OW 272
58989: PUSH
58990: LD_VAR 0 8
58994: PPUSH
58995: LD_INT 0
58997: PPUSH
58998: LD_INT 4
59000: PPUSH
59001: CALL_OW 273
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_VAR 0 7
59014: PPUSH
59015: LD_INT 1
59017: PPUSH
59018: LD_INT 4
59020: PPUSH
59021: CALL_OW 272
59025: PUSH
59026: LD_VAR 0 8
59030: PPUSH
59031: LD_INT 1
59033: PPUSH
59034: LD_INT 4
59036: PPUSH
59037: CALL_OW 273
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_VAR 0 7
59050: PPUSH
59051: LD_INT 2
59053: PPUSH
59054: LD_INT 4
59056: PPUSH
59057: CALL_OW 272
59061: PUSH
59062: LD_VAR 0 8
59066: PPUSH
59067: LD_INT 2
59069: PPUSH
59070: LD_INT 4
59072: PPUSH
59073: CALL_OW 273
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_VAR 0 7
59086: PPUSH
59087: LD_INT 3
59089: PPUSH
59090: LD_INT 4
59092: PPUSH
59093: CALL_OW 272
59097: PUSH
59098: LD_VAR 0 8
59102: PPUSH
59103: LD_INT 3
59105: PPUSH
59106: LD_INT 4
59108: PPUSH
59109: CALL_OW 273
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_VAR 0 7
59122: PPUSH
59123: LD_INT 4
59125: PPUSH
59126: LD_INT 4
59128: PPUSH
59129: CALL_OW 272
59133: PUSH
59134: LD_VAR 0 8
59138: PPUSH
59139: LD_INT 4
59141: PPUSH
59142: LD_INT 4
59144: PPUSH
59145: CALL_OW 273
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_VAR 0 7
59158: PPUSH
59159: LD_INT 5
59161: PPUSH
59162: LD_INT 4
59164: PPUSH
59165: CALL_OW 272
59169: PUSH
59170: LD_VAR 0 8
59174: PPUSH
59175: LD_INT 5
59177: PPUSH
59178: LD_INT 4
59180: PPUSH
59181: CALL_OW 273
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: ST_TO_ADDR
// for i = tmp downto 1 do
59198: LD_ADDR_VAR 0 4
59202: PUSH
59203: DOUBLE
59204: LD_VAR 0 6
59208: INC
59209: ST_TO_ADDR
59210: LD_INT 1
59212: PUSH
59213: FOR_DOWNTO
59214: IFFALSE 59315
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59216: LD_VAR 0 6
59220: PUSH
59221: LD_VAR 0 4
59225: ARRAY
59226: PUSH
59227: LD_INT 1
59229: ARRAY
59230: PPUSH
59231: LD_VAR 0 6
59235: PUSH
59236: LD_VAR 0 4
59240: ARRAY
59241: PUSH
59242: LD_INT 2
59244: ARRAY
59245: PPUSH
59246: CALL_OW 488
59250: NOT
59251: PUSH
59252: LD_VAR 0 6
59256: PUSH
59257: LD_VAR 0 4
59261: ARRAY
59262: PUSH
59263: LD_INT 1
59265: ARRAY
59266: PPUSH
59267: LD_VAR 0 6
59271: PUSH
59272: LD_VAR 0 4
59276: ARRAY
59277: PUSH
59278: LD_INT 2
59280: ARRAY
59281: PPUSH
59282: CALL_OW 428
59286: PUSH
59287: LD_INT 0
59289: NONEQUAL
59290: OR
59291: IFFALSE 59313
// tmp := Delete ( tmp , i ) ;
59293: LD_ADDR_VAR 0 6
59297: PUSH
59298: LD_VAR 0 6
59302: PPUSH
59303: LD_VAR 0 4
59307: PPUSH
59308: CALL_OW 3
59312: ST_TO_ADDR
59313: GO 59213
59315: POP
59316: POP
// j := GetClosestHex ( unit , tmp ) ;
59317: LD_ADDR_VAR 0 5
59321: PUSH
59322: LD_VAR 0 1
59326: PPUSH
59327: LD_VAR 0 6
59331: PPUSH
59332: CALL 58608 0 2
59336: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59337: LD_VAR 0 1
59341: PPUSH
59342: LD_VAR 0 5
59346: PUSH
59347: LD_INT 1
59349: ARRAY
59350: PPUSH
59351: LD_VAR 0 5
59355: PUSH
59356: LD_INT 2
59358: ARRAY
59359: PPUSH
59360: CALL_OW 111
// end ;
59364: LD_VAR 0 3
59368: RET
// export function PrepareApemanSoldier ( ) ; begin
59369: LD_INT 0
59371: PPUSH
// uc_nation := 0 ;
59372: LD_ADDR_OWVAR 21
59376: PUSH
59377: LD_INT 0
59379: ST_TO_ADDR
// hc_sex := sex_male ;
59380: LD_ADDR_OWVAR 27
59384: PUSH
59385: LD_INT 1
59387: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
59388: LD_ADDR_OWVAR 28
59392: PUSH
59393: LD_INT 15
59395: ST_TO_ADDR
// hc_gallery :=  ;
59396: LD_ADDR_OWVAR 33
59400: PUSH
59401: LD_STRING 
59403: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59404: LD_ADDR_OWVAR 31
59408: PUSH
59409: LD_INT 0
59411: PPUSH
59412: LD_INT 3
59414: PPUSH
59415: CALL_OW 12
59419: PUSH
59420: LD_INT 0
59422: PPUSH
59423: LD_INT 3
59425: PPUSH
59426: CALL_OW 12
59430: PUSH
59431: LD_INT 0
59433: PUSH
59434: LD_INT 0
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: ST_TO_ADDR
// end ;
59443: LD_VAR 0 1
59447: RET
// export function PrepareApemanEngineer ( ) ; begin
59448: LD_INT 0
59450: PPUSH
// uc_nation := 0 ;
59451: LD_ADDR_OWVAR 21
59455: PUSH
59456: LD_INT 0
59458: ST_TO_ADDR
// hc_sex := sex_male ;
59459: LD_ADDR_OWVAR 27
59463: PUSH
59464: LD_INT 1
59466: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
59467: LD_ADDR_OWVAR 28
59471: PUSH
59472: LD_INT 16
59474: ST_TO_ADDR
// hc_gallery :=  ;
59475: LD_ADDR_OWVAR 33
59479: PUSH
59480: LD_STRING 
59482: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59483: LD_ADDR_OWVAR 31
59487: PUSH
59488: LD_INT 0
59490: PPUSH
59491: LD_INT 3
59493: PPUSH
59494: CALL_OW 12
59498: PUSH
59499: LD_INT 0
59501: PPUSH
59502: LD_INT 3
59504: PPUSH
59505: CALL_OW 12
59509: PUSH
59510: LD_INT 0
59512: PUSH
59513: LD_INT 0
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: ST_TO_ADDR
// end ;
59522: LD_VAR 0 1
59526: RET
// export function PrepareApeman ( agressivity ) ; begin
59527: LD_INT 0
59529: PPUSH
// uc_side := 0 ;
59530: LD_ADDR_OWVAR 20
59534: PUSH
59535: LD_INT 0
59537: ST_TO_ADDR
// uc_nation := 0 ;
59538: LD_ADDR_OWVAR 21
59542: PUSH
59543: LD_INT 0
59545: ST_TO_ADDR
// hc_sex := sex_male ;
59546: LD_ADDR_OWVAR 27
59550: PUSH
59551: LD_INT 1
59553: ST_TO_ADDR
// hc_class := class_apeman ;
59554: LD_ADDR_OWVAR 28
59558: PUSH
59559: LD_INT 12
59561: ST_TO_ADDR
// hc_gallery :=  ;
59562: LD_ADDR_OWVAR 33
59566: PUSH
59567: LD_STRING 
59569: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59570: LD_ADDR_OWVAR 35
59574: PUSH
59575: LD_VAR 0 1
59579: NEG
59580: PPUSH
59581: LD_VAR 0 1
59585: PPUSH
59586: CALL_OW 12
59590: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59591: LD_ADDR_OWVAR 31
59595: PUSH
59596: LD_INT 0
59598: PPUSH
59599: LD_INT 3
59601: PPUSH
59602: CALL_OW 12
59606: PUSH
59607: LD_INT 0
59609: PPUSH
59610: LD_INT 3
59612: PPUSH
59613: CALL_OW 12
59617: PUSH
59618: LD_INT 0
59620: PUSH
59621: LD_INT 0
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: ST_TO_ADDR
// end ;
59630: LD_VAR 0 2
59634: RET
// export function PrepareTiger ( agressivity ) ; begin
59635: LD_INT 0
59637: PPUSH
// uc_side := 0 ;
59638: LD_ADDR_OWVAR 20
59642: PUSH
59643: LD_INT 0
59645: ST_TO_ADDR
// uc_nation := 0 ;
59646: LD_ADDR_OWVAR 21
59650: PUSH
59651: LD_INT 0
59653: ST_TO_ADDR
// hc_class := class_tiger ;
59654: LD_ADDR_OWVAR 28
59658: PUSH
59659: LD_INT 14
59661: ST_TO_ADDR
// hc_gallery :=  ;
59662: LD_ADDR_OWVAR 33
59666: PUSH
59667: LD_STRING 
59669: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59670: LD_ADDR_OWVAR 35
59674: PUSH
59675: LD_VAR 0 1
59679: NEG
59680: PPUSH
59681: LD_VAR 0 1
59685: PPUSH
59686: CALL_OW 12
59690: ST_TO_ADDR
// end ;
59691: LD_VAR 0 2
59695: RET
// export function PrepareEnchidna ( ) ; begin
59696: LD_INT 0
59698: PPUSH
// uc_side := 0 ;
59699: LD_ADDR_OWVAR 20
59703: PUSH
59704: LD_INT 0
59706: ST_TO_ADDR
// uc_nation := 0 ;
59707: LD_ADDR_OWVAR 21
59711: PUSH
59712: LD_INT 0
59714: ST_TO_ADDR
// hc_class := class_baggie ;
59715: LD_ADDR_OWVAR 28
59719: PUSH
59720: LD_INT 13
59722: ST_TO_ADDR
// hc_gallery :=  ;
59723: LD_ADDR_OWVAR 33
59727: PUSH
59728: LD_STRING 
59730: ST_TO_ADDR
// end ;
59731: LD_VAR 0 1
59735: RET
// export function PrepareFrog ( ) ; begin
59736: LD_INT 0
59738: PPUSH
// uc_side := 0 ;
59739: LD_ADDR_OWVAR 20
59743: PUSH
59744: LD_INT 0
59746: ST_TO_ADDR
// uc_nation := 0 ;
59747: LD_ADDR_OWVAR 21
59751: PUSH
59752: LD_INT 0
59754: ST_TO_ADDR
// hc_class := class_frog ;
59755: LD_ADDR_OWVAR 28
59759: PUSH
59760: LD_INT 19
59762: ST_TO_ADDR
// hc_gallery :=  ;
59763: LD_ADDR_OWVAR 33
59767: PUSH
59768: LD_STRING 
59770: ST_TO_ADDR
// end ;
59771: LD_VAR 0 1
59775: RET
// export function PrepareFish ( ) ; begin
59776: LD_INT 0
59778: PPUSH
// uc_side := 0 ;
59779: LD_ADDR_OWVAR 20
59783: PUSH
59784: LD_INT 0
59786: ST_TO_ADDR
// uc_nation := 0 ;
59787: LD_ADDR_OWVAR 21
59791: PUSH
59792: LD_INT 0
59794: ST_TO_ADDR
// hc_class := class_fish ;
59795: LD_ADDR_OWVAR 28
59799: PUSH
59800: LD_INT 20
59802: ST_TO_ADDR
// hc_gallery :=  ;
59803: LD_ADDR_OWVAR 33
59807: PUSH
59808: LD_STRING 
59810: ST_TO_ADDR
// end ;
59811: LD_VAR 0 1
59815: RET
// export function PrepareBird ( ) ; begin
59816: LD_INT 0
59818: PPUSH
// uc_side := 0 ;
59819: LD_ADDR_OWVAR 20
59823: PUSH
59824: LD_INT 0
59826: ST_TO_ADDR
// uc_nation := 0 ;
59827: LD_ADDR_OWVAR 21
59831: PUSH
59832: LD_INT 0
59834: ST_TO_ADDR
// hc_class := class_phororhacos ;
59835: LD_ADDR_OWVAR 28
59839: PUSH
59840: LD_INT 18
59842: ST_TO_ADDR
// hc_gallery :=  ;
59843: LD_ADDR_OWVAR 33
59847: PUSH
59848: LD_STRING 
59850: ST_TO_ADDR
// end ;
59851: LD_VAR 0 1
59855: RET
// export function PrepareHorse ( ) ; begin
59856: LD_INT 0
59858: PPUSH
// uc_side := 0 ;
59859: LD_ADDR_OWVAR 20
59863: PUSH
59864: LD_INT 0
59866: ST_TO_ADDR
// uc_nation := 0 ;
59867: LD_ADDR_OWVAR 21
59871: PUSH
59872: LD_INT 0
59874: ST_TO_ADDR
// hc_class := class_horse ;
59875: LD_ADDR_OWVAR 28
59879: PUSH
59880: LD_INT 21
59882: ST_TO_ADDR
// hc_gallery :=  ;
59883: LD_ADDR_OWVAR 33
59887: PUSH
59888: LD_STRING 
59890: ST_TO_ADDR
// end ;
59891: LD_VAR 0 1
59895: RET
// export function PrepareMastodont ( ) ; begin
59896: LD_INT 0
59898: PPUSH
// uc_side := 0 ;
59899: LD_ADDR_OWVAR 20
59903: PUSH
59904: LD_INT 0
59906: ST_TO_ADDR
// uc_nation := 0 ;
59907: LD_ADDR_OWVAR 21
59911: PUSH
59912: LD_INT 0
59914: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59915: LD_ADDR_OWVAR 37
59919: PUSH
59920: LD_INT 31
59922: ST_TO_ADDR
// vc_control := control_rider ;
59923: LD_ADDR_OWVAR 38
59927: PUSH
59928: LD_INT 4
59930: ST_TO_ADDR
// end ;
59931: LD_VAR 0 1
59935: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59936: LD_INT 0
59938: PPUSH
59939: PPUSH
59940: PPUSH
// uc_side = 0 ;
59941: LD_ADDR_OWVAR 20
59945: PUSH
59946: LD_INT 0
59948: ST_TO_ADDR
// uc_nation = 0 ;
59949: LD_ADDR_OWVAR 21
59953: PUSH
59954: LD_INT 0
59956: ST_TO_ADDR
// InitHc_All ( ) ;
59957: CALL_OW 584
// InitVc ;
59961: CALL_OW 20
// if mastodonts then
59965: LD_VAR 0 6
59969: IFFALSE 60036
// for i = 1 to mastodonts do
59971: LD_ADDR_VAR 0 11
59975: PUSH
59976: DOUBLE
59977: LD_INT 1
59979: DEC
59980: ST_TO_ADDR
59981: LD_VAR 0 6
59985: PUSH
59986: FOR_TO
59987: IFFALSE 60034
// begin vc_chassis := 31 ;
59989: LD_ADDR_OWVAR 37
59993: PUSH
59994: LD_INT 31
59996: ST_TO_ADDR
// vc_control := control_rider ;
59997: LD_ADDR_OWVAR 38
60001: PUSH
60002: LD_INT 4
60004: ST_TO_ADDR
// animal := CreateVehicle ;
60005: LD_ADDR_VAR 0 12
60009: PUSH
60010: CALL_OW 45
60014: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60015: LD_VAR 0 12
60019: PPUSH
60020: LD_VAR 0 8
60024: PPUSH
60025: LD_INT 0
60027: PPUSH
60028: CALL 62164 0 3
// end ;
60032: GO 59986
60034: POP
60035: POP
// if horses then
60036: LD_VAR 0 5
60040: IFFALSE 60107
// for i = 1 to horses do
60042: LD_ADDR_VAR 0 11
60046: PUSH
60047: DOUBLE
60048: LD_INT 1
60050: DEC
60051: ST_TO_ADDR
60052: LD_VAR 0 5
60056: PUSH
60057: FOR_TO
60058: IFFALSE 60105
// begin hc_class := 21 ;
60060: LD_ADDR_OWVAR 28
60064: PUSH
60065: LD_INT 21
60067: ST_TO_ADDR
// hc_gallery :=  ;
60068: LD_ADDR_OWVAR 33
60072: PUSH
60073: LD_STRING 
60075: ST_TO_ADDR
// animal := CreateHuman ;
60076: LD_ADDR_VAR 0 12
60080: PUSH
60081: CALL_OW 44
60085: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60086: LD_VAR 0 12
60090: PPUSH
60091: LD_VAR 0 8
60095: PPUSH
60096: LD_INT 0
60098: PPUSH
60099: CALL 62164 0 3
// end ;
60103: GO 60057
60105: POP
60106: POP
// if birds then
60107: LD_VAR 0 1
60111: IFFALSE 60178
// for i = 1 to birds do
60113: LD_ADDR_VAR 0 11
60117: PUSH
60118: DOUBLE
60119: LD_INT 1
60121: DEC
60122: ST_TO_ADDR
60123: LD_VAR 0 1
60127: PUSH
60128: FOR_TO
60129: IFFALSE 60176
// begin hc_class = 18 ;
60131: LD_ADDR_OWVAR 28
60135: PUSH
60136: LD_INT 18
60138: ST_TO_ADDR
// hc_gallery =  ;
60139: LD_ADDR_OWVAR 33
60143: PUSH
60144: LD_STRING 
60146: ST_TO_ADDR
// animal := CreateHuman ;
60147: LD_ADDR_VAR 0 12
60151: PUSH
60152: CALL_OW 44
60156: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60157: LD_VAR 0 12
60161: PPUSH
60162: LD_VAR 0 8
60166: PPUSH
60167: LD_INT 0
60169: PPUSH
60170: CALL 62164 0 3
// end ;
60174: GO 60128
60176: POP
60177: POP
// if tigers then
60178: LD_VAR 0 2
60182: IFFALSE 60266
// for i = 1 to tigers do
60184: LD_ADDR_VAR 0 11
60188: PUSH
60189: DOUBLE
60190: LD_INT 1
60192: DEC
60193: ST_TO_ADDR
60194: LD_VAR 0 2
60198: PUSH
60199: FOR_TO
60200: IFFALSE 60264
// begin hc_class = class_tiger ;
60202: LD_ADDR_OWVAR 28
60206: PUSH
60207: LD_INT 14
60209: ST_TO_ADDR
// hc_gallery =  ;
60210: LD_ADDR_OWVAR 33
60214: PUSH
60215: LD_STRING 
60217: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60218: LD_ADDR_OWVAR 35
60222: PUSH
60223: LD_INT 7
60225: NEG
60226: PPUSH
60227: LD_INT 7
60229: PPUSH
60230: CALL_OW 12
60234: ST_TO_ADDR
// animal := CreateHuman ;
60235: LD_ADDR_VAR 0 12
60239: PUSH
60240: CALL_OW 44
60244: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60245: LD_VAR 0 12
60249: PPUSH
60250: LD_VAR 0 8
60254: PPUSH
60255: LD_INT 0
60257: PPUSH
60258: CALL 62164 0 3
// end ;
60262: GO 60199
60264: POP
60265: POP
// if apemans then
60266: LD_VAR 0 3
60270: IFFALSE 60393
// for i = 1 to apemans do
60272: LD_ADDR_VAR 0 11
60276: PUSH
60277: DOUBLE
60278: LD_INT 1
60280: DEC
60281: ST_TO_ADDR
60282: LD_VAR 0 3
60286: PUSH
60287: FOR_TO
60288: IFFALSE 60391
// begin hc_class = class_apeman ;
60290: LD_ADDR_OWVAR 28
60294: PUSH
60295: LD_INT 12
60297: ST_TO_ADDR
// hc_gallery =  ;
60298: LD_ADDR_OWVAR 33
60302: PUSH
60303: LD_STRING 
60305: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60306: LD_ADDR_OWVAR 35
60310: PUSH
60311: LD_INT 2
60313: NEG
60314: PPUSH
60315: LD_INT 2
60317: PPUSH
60318: CALL_OW 12
60322: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60323: LD_ADDR_OWVAR 31
60327: PUSH
60328: LD_INT 1
60330: PPUSH
60331: LD_INT 3
60333: PPUSH
60334: CALL_OW 12
60338: PUSH
60339: LD_INT 1
60341: PPUSH
60342: LD_INT 3
60344: PPUSH
60345: CALL_OW 12
60349: PUSH
60350: LD_INT 0
60352: PUSH
60353: LD_INT 0
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: ST_TO_ADDR
// animal := CreateHuman ;
60362: LD_ADDR_VAR 0 12
60366: PUSH
60367: CALL_OW 44
60371: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60372: LD_VAR 0 12
60376: PPUSH
60377: LD_VAR 0 8
60381: PPUSH
60382: LD_INT 0
60384: PPUSH
60385: CALL 62164 0 3
// end ;
60389: GO 60287
60391: POP
60392: POP
// if enchidnas then
60393: LD_VAR 0 4
60397: IFFALSE 60464
// for i = 1 to enchidnas do
60399: LD_ADDR_VAR 0 11
60403: PUSH
60404: DOUBLE
60405: LD_INT 1
60407: DEC
60408: ST_TO_ADDR
60409: LD_VAR 0 4
60413: PUSH
60414: FOR_TO
60415: IFFALSE 60462
// begin hc_class = 13 ;
60417: LD_ADDR_OWVAR 28
60421: PUSH
60422: LD_INT 13
60424: ST_TO_ADDR
// hc_gallery =  ;
60425: LD_ADDR_OWVAR 33
60429: PUSH
60430: LD_STRING 
60432: ST_TO_ADDR
// animal := CreateHuman ;
60433: LD_ADDR_VAR 0 12
60437: PUSH
60438: CALL_OW 44
60442: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60443: LD_VAR 0 12
60447: PPUSH
60448: LD_VAR 0 8
60452: PPUSH
60453: LD_INT 0
60455: PPUSH
60456: CALL 62164 0 3
// end ;
60460: GO 60414
60462: POP
60463: POP
// if fishes then
60464: LD_VAR 0 7
60468: IFFALSE 60535
// for i = 1 to fishes do
60470: LD_ADDR_VAR 0 11
60474: PUSH
60475: DOUBLE
60476: LD_INT 1
60478: DEC
60479: ST_TO_ADDR
60480: LD_VAR 0 7
60484: PUSH
60485: FOR_TO
60486: IFFALSE 60533
// begin hc_class = 20 ;
60488: LD_ADDR_OWVAR 28
60492: PUSH
60493: LD_INT 20
60495: ST_TO_ADDR
// hc_gallery =  ;
60496: LD_ADDR_OWVAR 33
60500: PUSH
60501: LD_STRING 
60503: ST_TO_ADDR
// animal := CreateHuman ;
60504: LD_ADDR_VAR 0 12
60508: PUSH
60509: CALL_OW 44
60513: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60514: LD_VAR 0 12
60518: PPUSH
60519: LD_VAR 0 9
60523: PPUSH
60524: LD_INT 0
60526: PPUSH
60527: CALL 62164 0 3
// end ;
60531: GO 60485
60533: POP
60534: POP
// end ;
60535: LD_VAR 0 10
60539: RET
// export function WantHeal ( sci , unit ) ; begin
60540: LD_INT 0
60542: PPUSH
// if GetTaskList ( sci ) > 0 then
60543: LD_VAR 0 1
60547: PPUSH
60548: CALL_OW 437
60552: PUSH
60553: LD_INT 0
60555: GREATER
60556: IFFALSE 60626
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60558: LD_VAR 0 1
60562: PPUSH
60563: CALL_OW 437
60567: PUSH
60568: LD_INT 1
60570: ARRAY
60571: PUSH
60572: LD_INT 1
60574: ARRAY
60575: PUSH
60576: LD_STRING l
60578: EQUAL
60579: PUSH
60580: LD_VAR 0 1
60584: PPUSH
60585: CALL_OW 437
60589: PUSH
60590: LD_INT 1
60592: ARRAY
60593: PUSH
60594: LD_INT 4
60596: ARRAY
60597: PUSH
60598: LD_VAR 0 2
60602: EQUAL
60603: AND
60604: IFFALSE 60616
// result := true else
60606: LD_ADDR_VAR 0 3
60610: PUSH
60611: LD_INT 1
60613: ST_TO_ADDR
60614: GO 60624
// result := false ;
60616: LD_ADDR_VAR 0 3
60620: PUSH
60621: LD_INT 0
60623: ST_TO_ADDR
// end else
60624: GO 60634
// result := false ;
60626: LD_ADDR_VAR 0 3
60630: PUSH
60631: LD_INT 0
60633: ST_TO_ADDR
// end ;
60634: LD_VAR 0 3
60638: RET
// export function HealTarget ( sci ) ; begin
60639: LD_INT 0
60641: PPUSH
// if not sci then
60642: LD_VAR 0 1
60646: NOT
60647: IFFALSE 60651
// exit ;
60649: GO 60716
// result := 0 ;
60651: LD_ADDR_VAR 0 2
60655: PUSH
60656: LD_INT 0
60658: ST_TO_ADDR
// if GetTaskList ( sci ) then
60659: LD_VAR 0 1
60663: PPUSH
60664: CALL_OW 437
60668: IFFALSE 60716
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60670: LD_VAR 0 1
60674: PPUSH
60675: CALL_OW 437
60679: PUSH
60680: LD_INT 1
60682: ARRAY
60683: PUSH
60684: LD_INT 1
60686: ARRAY
60687: PUSH
60688: LD_STRING l
60690: EQUAL
60691: IFFALSE 60716
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60693: LD_ADDR_VAR 0 2
60697: PUSH
60698: LD_VAR 0 1
60702: PPUSH
60703: CALL_OW 437
60707: PUSH
60708: LD_INT 1
60710: ARRAY
60711: PUSH
60712: LD_INT 4
60714: ARRAY
60715: ST_TO_ADDR
// end ;
60716: LD_VAR 0 2
60720: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60721: LD_INT 0
60723: PPUSH
60724: PPUSH
60725: PPUSH
60726: PPUSH
// if not base_units then
60727: LD_VAR 0 1
60731: NOT
60732: IFFALSE 60736
// exit ;
60734: GO 60823
// result := false ;
60736: LD_ADDR_VAR 0 2
60740: PUSH
60741: LD_INT 0
60743: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60744: LD_ADDR_VAR 0 5
60748: PUSH
60749: LD_VAR 0 1
60753: PPUSH
60754: LD_INT 21
60756: PUSH
60757: LD_INT 3
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PPUSH
60764: CALL_OW 72
60768: ST_TO_ADDR
// if not tmp then
60769: LD_VAR 0 5
60773: NOT
60774: IFFALSE 60778
// exit ;
60776: GO 60823
// for i in tmp do
60778: LD_ADDR_VAR 0 3
60782: PUSH
60783: LD_VAR 0 5
60787: PUSH
60788: FOR_IN
60789: IFFALSE 60821
// begin result := EnemyInRange ( i , 22 ) ;
60791: LD_ADDR_VAR 0 2
60795: PUSH
60796: LD_VAR 0 3
60800: PPUSH
60801: LD_INT 22
60803: PPUSH
60804: CALL 58410 0 2
60808: ST_TO_ADDR
// if result then
60809: LD_VAR 0 2
60813: IFFALSE 60819
// exit ;
60815: POP
60816: POP
60817: GO 60823
// end ;
60819: GO 60788
60821: POP
60822: POP
// end ;
60823: LD_VAR 0 2
60827: RET
// export function FilterByTag ( units , tag ) ; begin
60828: LD_INT 0
60830: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60831: LD_ADDR_VAR 0 3
60835: PUSH
60836: LD_VAR 0 1
60840: PPUSH
60841: LD_INT 120
60843: PUSH
60844: LD_VAR 0 2
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PPUSH
60853: CALL_OW 72
60857: ST_TO_ADDR
// end ;
60858: LD_VAR 0 3
60862: RET
// export function IsDriver ( un ) ; begin
60863: LD_INT 0
60865: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60866: LD_ADDR_VAR 0 2
60870: PUSH
60871: LD_VAR 0 1
60875: PUSH
60876: LD_INT 55
60878: PUSH
60879: EMPTY
60880: LIST
60881: PPUSH
60882: CALL_OW 69
60886: IN
60887: ST_TO_ADDR
// end ;
60888: LD_VAR 0 2
60892: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60893: LD_INT 0
60895: PPUSH
60896: PPUSH
// list := [ ] ;
60897: LD_ADDR_VAR 0 5
60901: PUSH
60902: EMPTY
60903: ST_TO_ADDR
// case d of 0 :
60904: LD_VAR 0 3
60908: PUSH
60909: LD_INT 0
60911: DOUBLE
60912: EQUAL
60913: IFTRUE 60917
60915: GO 61050
60917: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60918: LD_ADDR_VAR 0 5
60922: PUSH
60923: LD_VAR 0 1
60927: PUSH
60928: LD_INT 4
60930: MINUS
60931: PUSH
60932: LD_VAR 0 2
60936: PUSH
60937: LD_INT 4
60939: MINUS
60940: PUSH
60941: LD_INT 2
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: LIST
60948: PUSH
60949: LD_VAR 0 1
60953: PUSH
60954: LD_INT 3
60956: MINUS
60957: PUSH
60958: LD_VAR 0 2
60962: PUSH
60963: LD_INT 1
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: LIST
60970: PUSH
60971: LD_VAR 0 1
60975: PUSH
60976: LD_INT 4
60978: PLUS
60979: PUSH
60980: LD_VAR 0 2
60984: PUSH
60985: LD_INT 4
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: LIST
60992: PUSH
60993: LD_VAR 0 1
60997: PUSH
60998: LD_INT 3
61000: PLUS
61001: PUSH
61002: LD_VAR 0 2
61006: PUSH
61007: LD_INT 3
61009: PLUS
61010: PUSH
61011: LD_INT 5
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: LIST
61018: PUSH
61019: LD_VAR 0 1
61023: PUSH
61024: LD_VAR 0 2
61028: PUSH
61029: LD_INT 4
61031: PLUS
61032: PUSH
61033: LD_INT 0
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: LIST
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: ST_TO_ADDR
// end ; 1 :
61048: GO 61748
61050: LD_INT 1
61052: DOUBLE
61053: EQUAL
61054: IFTRUE 61058
61056: GO 61191
61058: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61059: LD_ADDR_VAR 0 5
61063: PUSH
61064: LD_VAR 0 1
61068: PUSH
61069: LD_VAR 0 2
61073: PUSH
61074: LD_INT 4
61076: MINUS
61077: PUSH
61078: LD_INT 3
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: LIST
61085: PUSH
61086: LD_VAR 0 1
61090: PUSH
61091: LD_INT 3
61093: MINUS
61094: PUSH
61095: LD_VAR 0 2
61099: PUSH
61100: LD_INT 3
61102: MINUS
61103: PUSH
61104: LD_INT 2
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: LIST
61111: PUSH
61112: LD_VAR 0 1
61116: PUSH
61117: LD_INT 4
61119: MINUS
61120: PUSH
61121: LD_VAR 0 2
61125: PUSH
61126: LD_INT 1
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: LIST
61133: PUSH
61134: LD_VAR 0 1
61138: PUSH
61139: LD_VAR 0 2
61143: PUSH
61144: LD_INT 3
61146: PLUS
61147: PUSH
61148: LD_INT 0
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: LIST
61155: PUSH
61156: LD_VAR 0 1
61160: PUSH
61161: LD_INT 4
61163: PLUS
61164: PUSH
61165: LD_VAR 0 2
61169: PUSH
61170: LD_INT 4
61172: PLUS
61173: PUSH
61174: LD_INT 5
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: LIST
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: ST_TO_ADDR
// end ; 2 :
61189: GO 61748
61191: LD_INT 2
61193: DOUBLE
61194: EQUAL
61195: IFTRUE 61199
61197: GO 61328
61199: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61200: LD_ADDR_VAR 0 5
61204: PUSH
61205: LD_VAR 0 1
61209: PUSH
61210: LD_VAR 0 2
61214: PUSH
61215: LD_INT 3
61217: MINUS
61218: PUSH
61219: LD_INT 3
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: LIST
61226: PUSH
61227: LD_VAR 0 1
61231: PUSH
61232: LD_INT 4
61234: PLUS
61235: PUSH
61236: LD_VAR 0 2
61240: PUSH
61241: LD_INT 4
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: LIST
61248: PUSH
61249: LD_VAR 0 1
61253: PUSH
61254: LD_VAR 0 2
61258: PUSH
61259: LD_INT 4
61261: PLUS
61262: PUSH
61263: LD_INT 0
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: LIST
61270: PUSH
61271: LD_VAR 0 1
61275: PUSH
61276: LD_INT 3
61278: MINUS
61279: PUSH
61280: LD_VAR 0 2
61284: PUSH
61285: LD_INT 1
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: LIST
61292: PUSH
61293: LD_VAR 0 1
61297: PUSH
61298: LD_INT 4
61300: MINUS
61301: PUSH
61302: LD_VAR 0 2
61306: PUSH
61307: LD_INT 4
61309: MINUS
61310: PUSH
61311: LD_INT 2
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: LIST
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: ST_TO_ADDR
// end ; 3 :
61326: GO 61748
61328: LD_INT 3
61330: DOUBLE
61331: EQUAL
61332: IFTRUE 61336
61334: GO 61469
61336: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61337: LD_ADDR_VAR 0 5
61341: PUSH
61342: LD_VAR 0 1
61346: PUSH
61347: LD_INT 3
61349: PLUS
61350: PUSH
61351: LD_VAR 0 2
61355: PUSH
61356: LD_INT 4
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: LIST
61363: PUSH
61364: LD_VAR 0 1
61368: PUSH
61369: LD_INT 4
61371: PLUS
61372: PUSH
61373: LD_VAR 0 2
61377: PUSH
61378: LD_INT 4
61380: PLUS
61381: PUSH
61382: LD_INT 5
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: LIST
61389: PUSH
61390: LD_VAR 0 1
61394: PUSH
61395: LD_INT 4
61397: MINUS
61398: PUSH
61399: LD_VAR 0 2
61403: PUSH
61404: LD_INT 1
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: LIST
61411: PUSH
61412: LD_VAR 0 1
61416: PUSH
61417: LD_VAR 0 2
61421: PUSH
61422: LD_INT 4
61424: MINUS
61425: PUSH
61426: LD_INT 3
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: LIST
61433: PUSH
61434: LD_VAR 0 1
61438: PUSH
61439: LD_INT 3
61441: MINUS
61442: PUSH
61443: LD_VAR 0 2
61447: PUSH
61448: LD_INT 3
61450: MINUS
61451: PUSH
61452: LD_INT 2
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: LIST
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: ST_TO_ADDR
// end ; 4 :
61467: GO 61748
61469: LD_INT 4
61471: DOUBLE
61472: EQUAL
61473: IFTRUE 61477
61475: GO 61610
61477: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61478: LD_ADDR_VAR 0 5
61482: PUSH
61483: LD_VAR 0 1
61487: PUSH
61488: LD_VAR 0 2
61492: PUSH
61493: LD_INT 4
61495: PLUS
61496: PUSH
61497: LD_INT 0
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: LIST
61504: PUSH
61505: LD_VAR 0 1
61509: PUSH
61510: LD_INT 3
61512: PLUS
61513: PUSH
61514: LD_VAR 0 2
61518: PUSH
61519: LD_INT 3
61521: PLUS
61522: PUSH
61523: LD_INT 5
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: LIST
61530: PUSH
61531: LD_VAR 0 1
61535: PUSH
61536: LD_INT 4
61538: PLUS
61539: PUSH
61540: LD_VAR 0 2
61544: PUSH
61545: LD_INT 4
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: LIST
61552: PUSH
61553: LD_VAR 0 1
61557: PUSH
61558: LD_VAR 0 2
61562: PUSH
61563: LD_INT 3
61565: MINUS
61566: PUSH
61567: LD_INT 3
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: LIST
61574: PUSH
61575: LD_VAR 0 1
61579: PUSH
61580: LD_INT 4
61582: MINUS
61583: PUSH
61584: LD_VAR 0 2
61588: PUSH
61589: LD_INT 4
61591: MINUS
61592: PUSH
61593: LD_INT 2
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: LIST
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: ST_TO_ADDR
// end ; 5 :
61608: GO 61748
61610: LD_INT 5
61612: DOUBLE
61613: EQUAL
61614: IFTRUE 61618
61616: GO 61747
61618: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61619: LD_ADDR_VAR 0 5
61623: PUSH
61624: LD_VAR 0 1
61628: PUSH
61629: LD_INT 4
61631: MINUS
61632: PUSH
61633: LD_VAR 0 2
61637: PUSH
61638: LD_INT 1
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: LIST
61645: PUSH
61646: LD_VAR 0 1
61650: PUSH
61651: LD_VAR 0 2
61655: PUSH
61656: LD_INT 4
61658: MINUS
61659: PUSH
61660: LD_INT 3
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: LIST
61667: PUSH
61668: LD_VAR 0 1
61672: PUSH
61673: LD_INT 4
61675: PLUS
61676: PUSH
61677: LD_VAR 0 2
61681: PUSH
61682: LD_INT 4
61684: PLUS
61685: PUSH
61686: LD_INT 5
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: LIST
61693: PUSH
61694: LD_VAR 0 1
61698: PUSH
61699: LD_INT 3
61701: PLUS
61702: PUSH
61703: LD_VAR 0 2
61707: PUSH
61708: LD_INT 4
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: LIST
61715: PUSH
61716: LD_VAR 0 1
61720: PUSH
61721: LD_VAR 0 2
61725: PUSH
61726: LD_INT 3
61728: PLUS
61729: PUSH
61730: LD_INT 0
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: LIST
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: ST_TO_ADDR
// end ; end ;
61745: GO 61748
61747: POP
// result := list ;
61748: LD_ADDR_VAR 0 4
61752: PUSH
61753: LD_VAR 0 5
61757: ST_TO_ADDR
// end ;
61758: LD_VAR 0 4
61762: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61763: LD_INT 0
61765: PPUSH
61766: PPUSH
61767: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61768: LD_VAR 0 1
61772: NOT
61773: PUSH
61774: LD_VAR 0 2
61778: PUSH
61779: LD_INT 1
61781: PUSH
61782: LD_INT 2
61784: PUSH
61785: LD_INT 3
61787: PUSH
61788: LD_INT 4
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: IN
61797: NOT
61798: OR
61799: IFFALSE 61803
// exit ;
61801: GO 61886
// tmp := [ ] ;
61803: LD_ADDR_VAR 0 5
61807: PUSH
61808: EMPTY
61809: ST_TO_ADDR
// for i in units do
61810: LD_ADDR_VAR 0 4
61814: PUSH
61815: LD_VAR 0 1
61819: PUSH
61820: FOR_IN
61821: IFFALSE 61855
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
61823: LD_ADDR_VAR 0 5
61827: PUSH
61828: LD_VAR 0 5
61832: PPUSH
61833: LD_VAR 0 4
61837: PPUSH
61838: LD_VAR 0 2
61842: PPUSH
61843: CALL_OW 259
61847: PPUSH
61848: CALL 63246 0 2
61852: ST_TO_ADDR
61853: GO 61820
61855: POP
61856: POP
// if not tmp then
61857: LD_VAR 0 5
61861: NOT
61862: IFFALSE 61866
// exit ;
61864: GO 61886
// result := SortListByListDesc ( units , tmp ) ;
61866: LD_ADDR_VAR 0 3
61870: PUSH
61871: LD_VAR 0 1
61875: PPUSH
61876: LD_VAR 0 5
61880: PPUSH
61881: CALL_OW 77
61885: ST_TO_ADDR
// end ;
61886: LD_VAR 0 3
61890: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61891: LD_INT 0
61893: PPUSH
61894: PPUSH
61895: PPUSH
// result := false ;
61896: LD_ADDR_VAR 0 3
61900: PUSH
61901: LD_INT 0
61903: ST_TO_ADDR
// if not building then
61904: LD_VAR 0 2
61908: NOT
61909: IFFALSE 61913
// exit ;
61911: GO 62051
// x := GetX ( building ) ;
61913: LD_ADDR_VAR 0 4
61917: PUSH
61918: LD_VAR 0 2
61922: PPUSH
61923: CALL_OW 250
61927: ST_TO_ADDR
// y := GetY ( building ) ;
61928: LD_ADDR_VAR 0 5
61932: PUSH
61933: LD_VAR 0 2
61937: PPUSH
61938: CALL_OW 251
61942: ST_TO_ADDR
// if not x or not y then
61943: LD_VAR 0 4
61947: NOT
61948: PUSH
61949: LD_VAR 0 5
61953: NOT
61954: OR
61955: IFFALSE 61959
// exit ;
61957: GO 62051
// if GetTaskList ( unit ) then
61959: LD_VAR 0 1
61963: PPUSH
61964: CALL_OW 437
61968: IFFALSE 62051
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61970: LD_STRING e
61972: PUSH
61973: LD_VAR 0 1
61977: PPUSH
61978: CALL_OW 437
61982: PUSH
61983: LD_INT 1
61985: ARRAY
61986: PUSH
61987: LD_INT 1
61989: ARRAY
61990: EQUAL
61991: PUSH
61992: LD_VAR 0 4
61996: PUSH
61997: LD_VAR 0 1
62001: PPUSH
62002: CALL_OW 437
62006: PUSH
62007: LD_INT 1
62009: ARRAY
62010: PUSH
62011: LD_INT 2
62013: ARRAY
62014: EQUAL
62015: AND
62016: PUSH
62017: LD_VAR 0 5
62021: PUSH
62022: LD_VAR 0 1
62026: PPUSH
62027: CALL_OW 437
62031: PUSH
62032: LD_INT 1
62034: ARRAY
62035: PUSH
62036: LD_INT 3
62038: ARRAY
62039: EQUAL
62040: AND
62041: IFFALSE 62051
// result := true end ;
62043: LD_ADDR_VAR 0 3
62047: PUSH
62048: LD_INT 1
62050: ST_TO_ADDR
// end ;
62051: LD_VAR 0 3
62055: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62056: LD_INT 0
62058: PPUSH
// result := false ;
62059: LD_ADDR_VAR 0 4
62063: PUSH
62064: LD_INT 0
62066: ST_TO_ADDR
// if GetTaskList ( unit ) then
62067: LD_VAR 0 1
62071: PPUSH
62072: CALL_OW 437
62076: IFFALSE 62159
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62078: LD_STRING M
62080: PUSH
62081: LD_VAR 0 1
62085: PPUSH
62086: CALL_OW 437
62090: PUSH
62091: LD_INT 1
62093: ARRAY
62094: PUSH
62095: LD_INT 1
62097: ARRAY
62098: EQUAL
62099: PUSH
62100: LD_VAR 0 2
62104: PUSH
62105: LD_VAR 0 1
62109: PPUSH
62110: CALL_OW 437
62114: PUSH
62115: LD_INT 1
62117: ARRAY
62118: PUSH
62119: LD_INT 2
62121: ARRAY
62122: EQUAL
62123: AND
62124: PUSH
62125: LD_VAR 0 3
62129: PUSH
62130: LD_VAR 0 1
62134: PPUSH
62135: CALL_OW 437
62139: PUSH
62140: LD_INT 1
62142: ARRAY
62143: PUSH
62144: LD_INT 3
62146: ARRAY
62147: EQUAL
62148: AND
62149: IFFALSE 62159
// result := true ;
62151: LD_ADDR_VAR 0 4
62155: PUSH
62156: LD_INT 1
62158: ST_TO_ADDR
// end ; end ;
62159: LD_VAR 0 4
62163: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62164: LD_INT 0
62166: PPUSH
62167: PPUSH
62168: PPUSH
62169: PPUSH
// if not unit or not area then
62170: LD_VAR 0 1
62174: NOT
62175: PUSH
62176: LD_VAR 0 2
62180: NOT
62181: OR
62182: IFFALSE 62186
// exit ;
62184: GO 62349
// tmp := AreaToList ( area , i ) ;
62186: LD_ADDR_VAR 0 6
62190: PUSH
62191: LD_VAR 0 2
62195: PPUSH
62196: LD_VAR 0 5
62200: PPUSH
62201: CALL_OW 517
62205: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62206: LD_ADDR_VAR 0 5
62210: PUSH
62211: DOUBLE
62212: LD_INT 1
62214: DEC
62215: ST_TO_ADDR
62216: LD_VAR 0 6
62220: PUSH
62221: LD_INT 1
62223: ARRAY
62224: PUSH
62225: FOR_TO
62226: IFFALSE 62347
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62228: LD_ADDR_VAR 0 7
62232: PUSH
62233: LD_VAR 0 6
62237: PUSH
62238: LD_INT 1
62240: ARRAY
62241: PUSH
62242: LD_VAR 0 5
62246: ARRAY
62247: PUSH
62248: LD_VAR 0 6
62252: PUSH
62253: LD_INT 2
62255: ARRAY
62256: PUSH
62257: LD_VAR 0 5
62261: ARRAY
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
62267: LD_INT 92
62269: PUSH
62270: LD_VAR 0 7
62274: PUSH
62275: LD_INT 1
62277: ARRAY
62278: PUSH
62279: LD_VAR 0 7
62283: PUSH
62284: LD_INT 2
62286: ARRAY
62287: PUSH
62288: LD_INT 3
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: PPUSH
62297: CALL_OW 69
62301: PUSH
62302: LD_INT 0
62304: EQUAL
62305: IFFALSE 62345
// begin PlaceUnitArea ( unit , area , mode ) ;
62307: LD_VAR 0 1
62311: PPUSH
62312: LD_VAR 0 2
62316: PPUSH
62317: LD_VAR 0 3
62321: PPUSH
62322: CALL_OW 49
// result := IsPlaced ( unit ) ;
62326: LD_ADDR_VAR 0 4
62330: PUSH
62331: LD_VAR 0 1
62335: PPUSH
62336: CALL_OW 305
62340: ST_TO_ADDR
// exit ;
62341: POP
62342: POP
62343: GO 62349
// end ; end ;
62345: GO 62225
62347: POP
62348: POP
// end ;
62349: LD_VAR 0 4
62353: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62354: LD_INT 0
62356: PPUSH
62357: PPUSH
62358: PPUSH
// if not side or side > 8 then
62359: LD_VAR 0 1
62363: NOT
62364: PUSH
62365: LD_VAR 0 1
62369: PUSH
62370: LD_INT 8
62372: GREATER
62373: OR
62374: IFFALSE 62378
// exit ;
62376: GO 62565
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62378: LD_ADDR_VAR 0 4
62382: PUSH
62383: LD_INT 22
62385: PUSH
62386: LD_VAR 0 1
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 21
62397: PUSH
62398: LD_INT 3
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PPUSH
62409: CALL_OW 69
62413: ST_TO_ADDR
// if not tmp then
62414: LD_VAR 0 4
62418: NOT
62419: IFFALSE 62423
// exit ;
62421: GO 62565
// enable_addtolog := true ;
62423: LD_ADDR_OWVAR 81
62427: PUSH
62428: LD_INT 1
62430: ST_TO_ADDR
// AddToLog ( [ ) ;
62431: LD_STRING [
62433: PPUSH
62434: CALL_OW 561
// for i in tmp do
62438: LD_ADDR_VAR 0 3
62442: PUSH
62443: LD_VAR 0 4
62447: PUSH
62448: FOR_IN
62449: IFFALSE 62556
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62451: LD_STRING [
62453: PUSH
62454: LD_VAR 0 3
62458: PPUSH
62459: CALL_OW 266
62463: STR
62464: PUSH
62465: LD_STRING , 
62467: STR
62468: PUSH
62469: LD_VAR 0 3
62473: PPUSH
62474: CALL_OW 250
62478: STR
62479: PUSH
62480: LD_STRING , 
62482: STR
62483: PUSH
62484: LD_VAR 0 3
62488: PPUSH
62489: CALL_OW 251
62493: STR
62494: PUSH
62495: LD_STRING , 
62497: STR
62498: PUSH
62499: LD_VAR 0 3
62503: PPUSH
62504: CALL_OW 254
62508: STR
62509: PUSH
62510: LD_STRING , 
62512: STR
62513: PUSH
62514: LD_VAR 0 3
62518: PPUSH
62519: LD_INT 1
62521: PPUSH
62522: CALL_OW 268
62526: STR
62527: PUSH
62528: LD_STRING , 
62530: STR
62531: PUSH
62532: LD_VAR 0 3
62536: PPUSH
62537: LD_INT 2
62539: PPUSH
62540: CALL_OW 268
62544: STR
62545: PUSH
62546: LD_STRING ],
62548: STR
62549: PPUSH
62550: CALL_OW 561
// end ;
62554: GO 62448
62556: POP
62557: POP
// AddToLog ( ]; ) ;
62558: LD_STRING ];
62560: PPUSH
62561: CALL_OW 561
// end ;
62565: LD_VAR 0 2
62569: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62570: LD_INT 0
62572: PPUSH
62573: PPUSH
62574: PPUSH
62575: PPUSH
62576: PPUSH
// if not area or not rate or not max then
62577: LD_VAR 0 1
62581: NOT
62582: PUSH
62583: LD_VAR 0 2
62587: NOT
62588: OR
62589: PUSH
62590: LD_VAR 0 4
62594: NOT
62595: OR
62596: IFFALSE 62600
// exit ;
62598: GO 62789
// while 1 do
62600: LD_INT 1
62602: IFFALSE 62789
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62604: LD_ADDR_VAR 0 9
62608: PUSH
62609: LD_VAR 0 1
62613: PPUSH
62614: LD_INT 1
62616: PPUSH
62617: CALL_OW 287
62621: PUSH
62622: LD_INT 10
62624: MUL
62625: ST_TO_ADDR
// r := rate / 10 ;
62626: LD_ADDR_VAR 0 7
62630: PUSH
62631: LD_VAR 0 2
62635: PUSH
62636: LD_INT 10
62638: DIVREAL
62639: ST_TO_ADDR
// time := 1 1$00 ;
62640: LD_ADDR_VAR 0 8
62644: PUSH
62645: LD_INT 2100
62647: ST_TO_ADDR
// if amount < min then
62648: LD_VAR 0 9
62652: PUSH
62653: LD_VAR 0 3
62657: LESS
62658: IFFALSE 62676
// r := r * 2 else
62660: LD_ADDR_VAR 0 7
62664: PUSH
62665: LD_VAR 0 7
62669: PUSH
62670: LD_INT 2
62672: MUL
62673: ST_TO_ADDR
62674: GO 62702
// if amount > max then
62676: LD_VAR 0 9
62680: PUSH
62681: LD_VAR 0 4
62685: GREATER
62686: IFFALSE 62702
// r := r / 2 ;
62688: LD_ADDR_VAR 0 7
62692: PUSH
62693: LD_VAR 0 7
62697: PUSH
62698: LD_INT 2
62700: DIVREAL
62701: ST_TO_ADDR
// time := time / r ;
62702: LD_ADDR_VAR 0 8
62706: PUSH
62707: LD_VAR 0 8
62711: PUSH
62712: LD_VAR 0 7
62716: DIVREAL
62717: ST_TO_ADDR
// if time < 0 then
62718: LD_VAR 0 8
62722: PUSH
62723: LD_INT 0
62725: LESS
62726: IFFALSE 62743
// time := time * - 1 ;
62728: LD_ADDR_VAR 0 8
62732: PUSH
62733: LD_VAR 0 8
62737: PUSH
62738: LD_INT 1
62740: NEG
62741: MUL
62742: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62743: LD_VAR 0 8
62747: PUSH
62748: LD_INT 35
62750: PPUSH
62751: LD_INT 875
62753: PPUSH
62754: CALL_OW 12
62758: PLUS
62759: PPUSH
62760: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62764: LD_INT 1
62766: PPUSH
62767: LD_INT 5
62769: PPUSH
62770: CALL_OW 12
62774: PPUSH
62775: LD_VAR 0 1
62779: PPUSH
62780: LD_INT 1
62782: PPUSH
62783: CALL_OW 55
// end ;
62787: GO 62600
// end ;
62789: LD_VAR 0 5
62793: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62794: LD_INT 0
62796: PPUSH
62797: PPUSH
62798: PPUSH
62799: PPUSH
62800: PPUSH
62801: PPUSH
62802: PPUSH
62803: PPUSH
// if not turrets or not factories then
62804: LD_VAR 0 1
62808: NOT
62809: PUSH
62810: LD_VAR 0 2
62814: NOT
62815: OR
62816: IFFALSE 62820
// exit ;
62818: GO 63127
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62820: LD_ADDR_VAR 0 10
62824: PUSH
62825: LD_INT 5
62827: PUSH
62828: LD_INT 6
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 2
62837: PUSH
62838: LD_INT 4
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 3
62847: PUSH
62848: LD_INT 5
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 24
62862: PUSH
62863: LD_INT 25
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 23
62872: PUSH
62873: LD_INT 27
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 42
62886: PUSH
62887: LD_INT 43
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 44
62896: PUSH
62897: LD_INT 46
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 45
62906: PUSH
62907: LD_INT 47
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: LIST
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: LIST
62923: ST_TO_ADDR
// result := [ ] ;
62924: LD_ADDR_VAR 0 3
62928: PUSH
62929: EMPTY
62930: ST_TO_ADDR
// for i in turrets do
62931: LD_ADDR_VAR 0 4
62935: PUSH
62936: LD_VAR 0 1
62940: PUSH
62941: FOR_IN
62942: IFFALSE 63125
// begin nat := GetNation ( i ) ;
62944: LD_ADDR_VAR 0 7
62948: PUSH
62949: LD_VAR 0 4
62953: PPUSH
62954: CALL_OW 248
62958: ST_TO_ADDR
// weapon := 0 ;
62959: LD_ADDR_VAR 0 8
62963: PUSH
62964: LD_INT 0
62966: ST_TO_ADDR
// if not nat then
62967: LD_VAR 0 7
62971: NOT
62972: IFFALSE 62976
// continue ;
62974: GO 62941
// for j in list [ nat ] do
62976: LD_ADDR_VAR 0 5
62980: PUSH
62981: LD_VAR 0 10
62985: PUSH
62986: LD_VAR 0 7
62990: ARRAY
62991: PUSH
62992: FOR_IN
62993: IFFALSE 63034
// if GetBWeapon ( i ) = j [ 1 ] then
62995: LD_VAR 0 4
62999: PPUSH
63000: CALL_OW 269
63004: PUSH
63005: LD_VAR 0 5
63009: PUSH
63010: LD_INT 1
63012: ARRAY
63013: EQUAL
63014: IFFALSE 63032
// begin weapon := j [ 2 ] ;
63016: LD_ADDR_VAR 0 8
63020: PUSH
63021: LD_VAR 0 5
63025: PUSH
63026: LD_INT 2
63028: ARRAY
63029: ST_TO_ADDR
// break ;
63030: GO 63034
// end ;
63032: GO 62992
63034: POP
63035: POP
// if not weapon then
63036: LD_VAR 0 8
63040: NOT
63041: IFFALSE 63045
// continue ;
63043: GO 62941
// for k in factories do
63045: LD_ADDR_VAR 0 6
63049: PUSH
63050: LD_VAR 0 2
63054: PUSH
63055: FOR_IN
63056: IFFALSE 63121
// begin weapons := AvailableWeaponList ( k ) ;
63058: LD_ADDR_VAR 0 9
63062: PUSH
63063: LD_VAR 0 6
63067: PPUSH
63068: CALL_OW 478
63072: ST_TO_ADDR
// if not weapons then
63073: LD_VAR 0 9
63077: NOT
63078: IFFALSE 63082
// continue ;
63080: GO 63055
// if weapon in weapons then
63082: LD_VAR 0 8
63086: PUSH
63087: LD_VAR 0 9
63091: IN
63092: IFFALSE 63119
// begin result := [ i , weapon ] ;
63094: LD_ADDR_VAR 0 3
63098: PUSH
63099: LD_VAR 0 4
63103: PUSH
63104: LD_VAR 0 8
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: ST_TO_ADDR
// exit ;
63113: POP
63114: POP
63115: POP
63116: POP
63117: GO 63127
// end ; end ;
63119: GO 63055
63121: POP
63122: POP
// end ;
63123: GO 62941
63125: POP
63126: POP
// end ;
63127: LD_VAR 0 3
63131: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63132: LD_INT 0
63134: PPUSH
// if not side or side > 8 then
63135: LD_VAR 0 3
63139: NOT
63140: PUSH
63141: LD_VAR 0 3
63145: PUSH
63146: LD_INT 8
63148: GREATER
63149: OR
63150: IFFALSE 63154
// exit ;
63152: GO 63213
// if not range then
63154: LD_VAR 0 4
63158: NOT
63159: IFFALSE 63170
// range := - 12 ;
63161: LD_ADDR_VAR 0 4
63165: PUSH
63166: LD_INT 12
63168: NEG
63169: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63170: LD_VAR 0 1
63174: PPUSH
63175: LD_VAR 0 2
63179: PPUSH
63180: LD_VAR 0 3
63184: PPUSH
63185: LD_VAR 0 4
63189: PPUSH
63190: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63194: LD_VAR 0 1
63198: PPUSH
63199: LD_VAR 0 2
63203: PPUSH
63204: LD_VAR 0 3
63208: PPUSH
63209: CALL_OW 331
// end ;
63213: LD_VAR 0 5
63217: RET
// export function Video ( mode ) ; begin
63218: LD_INT 0
63220: PPUSH
// ingame_video = mode ;
63221: LD_ADDR_OWVAR 52
63225: PUSH
63226: LD_VAR 0 1
63230: ST_TO_ADDR
// interface_hidden = mode ;
63231: LD_ADDR_OWVAR 54
63235: PUSH
63236: LD_VAR 0 1
63240: ST_TO_ADDR
// end ;
63241: LD_VAR 0 2
63245: RET
// export function Join ( array , element ) ; begin
63246: LD_INT 0
63248: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63249: LD_ADDR_VAR 0 3
63253: PUSH
63254: LD_VAR 0 1
63258: PPUSH
63259: LD_VAR 0 1
63263: PUSH
63264: LD_INT 1
63266: PLUS
63267: PPUSH
63268: LD_VAR 0 2
63272: PPUSH
63273: CALL_OW 1
63277: ST_TO_ADDR
// end ;
63278: LD_VAR 0 3
63282: RET
// export function JoinUnion ( array , element ) ; begin
63283: LD_INT 0
63285: PPUSH
// result := array union element ;
63286: LD_ADDR_VAR 0 3
63290: PUSH
63291: LD_VAR 0 1
63295: PUSH
63296: LD_VAR 0 2
63300: UNION
63301: ST_TO_ADDR
// end ;
63302: LD_VAR 0 3
63306: RET
// export function GetBehemoths ( side ) ; begin
63307: LD_INT 0
63309: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
63310: LD_ADDR_VAR 0 2
63314: PUSH
63315: LD_INT 22
63317: PUSH
63318: LD_VAR 0 1
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 31
63329: PUSH
63330: LD_INT 25
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PPUSH
63341: CALL_OW 69
63345: ST_TO_ADDR
// end ;
63346: LD_VAR 0 2
63350: RET
// export function Shuffle ( array ) ; var i , index ; begin
63351: LD_INT 0
63353: PPUSH
63354: PPUSH
63355: PPUSH
// result := [ ] ;
63356: LD_ADDR_VAR 0 2
63360: PUSH
63361: EMPTY
63362: ST_TO_ADDR
// if not array then
63363: LD_VAR 0 1
63367: NOT
63368: IFFALSE 63372
// exit ;
63370: GO 63471
// Randomize ;
63372: CALL_OW 10
// for i = array downto 1 do
63376: LD_ADDR_VAR 0 3
63380: PUSH
63381: DOUBLE
63382: LD_VAR 0 1
63386: INC
63387: ST_TO_ADDR
63388: LD_INT 1
63390: PUSH
63391: FOR_DOWNTO
63392: IFFALSE 63469
// begin index := rand ( 1 , array ) ;
63394: LD_ADDR_VAR 0 4
63398: PUSH
63399: LD_INT 1
63401: PPUSH
63402: LD_VAR 0 1
63406: PPUSH
63407: CALL_OW 12
63411: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63412: LD_ADDR_VAR 0 2
63416: PUSH
63417: LD_VAR 0 2
63421: PPUSH
63422: LD_VAR 0 2
63426: PUSH
63427: LD_INT 1
63429: PLUS
63430: PPUSH
63431: LD_VAR 0 1
63435: PUSH
63436: LD_VAR 0 4
63440: ARRAY
63441: PPUSH
63442: CALL_OW 2
63446: ST_TO_ADDR
// array := Delete ( array , index ) ;
63447: LD_ADDR_VAR 0 1
63451: PUSH
63452: LD_VAR 0 1
63456: PPUSH
63457: LD_VAR 0 4
63461: PPUSH
63462: CALL_OW 3
63466: ST_TO_ADDR
// end ;
63467: GO 63391
63469: POP
63470: POP
// end ;
63471: LD_VAR 0 2
63475: RET
// export function GetBaseMaterials ( base ) ; begin
63476: LD_INT 0
63478: PPUSH
// result := [ 0 , 0 , 0 ] ;
63479: LD_ADDR_VAR 0 2
63483: PUSH
63484: LD_INT 0
63486: PUSH
63487: LD_INT 0
63489: PUSH
63490: LD_INT 0
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: LIST
63497: ST_TO_ADDR
// if not base then
63498: LD_VAR 0 1
63502: NOT
63503: IFFALSE 63507
// exit ;
63505: GO 63556
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63507: LD_ADDR_VAR 0 2
63511: PUSH
63512: LD_VAR 0 1
63516: PPUSH
63517: LD_INT 1
63519: PPUSH
63520: CALL_OW 275
63524: PUSH
63525: LD_VAR 0 1
63529: PPUSH
63530: LD_INT 2
63532: PPUSH
63533: CALL_OW 275
63537: PUSH
63538: LD_VAR 0 1
63542: PPUSH
63543: LD_INT 3
63545: PPUSH
63546: CALL_OW 275
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: LIST
63555: ST_TO_ADDR
// end ;
63556: LD_VAR 0 2
63560: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63561: LD_INT 0
63563: PPUSH
63564: PPUSH
// result := array ;
63565: LD_ADDR_VAR 0 3
63569: PUSH
63570: LD_VAR 0 1
63574: ST_TO_ADDR
// if size >= result then
63575: LD_VAR 0 2
63579: PUSH
63580: LD_VAR 0 3
63584: GREATEREQUAL
63585: IFFALSE 63589
// exit ;
63587: GO 63639
// if size then
63589: LD_VAR 0 2
63593: IFFALSE 63639
// for i := array downto size do
63595: LD_ADDR_VAR 0 4
63599: PUSH
63600: DOUBLE
63601: LD_VAR 0 1
63605: INC
63606: ST_TO_ADDR
63607: LD_VAR 0 2
63611: PUSH
63612: FOR_DOWNTO
63613: IFFALSE 63637
// result := Delete ( result , result ) ;
63615: LD_ADDR_VAR 0 3
63619: PUSH
63620: LD_VAR 0 3
63624: PPUSH
63625: LD_VAR 0 3
63629: PPUSH
63630: CALL_OW 3
63634: ST_TO_ADDR
63635: GO 63612
63637: POP
63638: POP
// end ;
63639: LD_VAR 0 3
63643: RET
// export function ComExit ( unit ) ; var tmp ; begin
63644: LD_INT 0
63646: PPUSH
63647: PPUSH
// if not IsInUnit ( unit ) then
63648: LD_VAR 0 1
63652: PPUSH
63653: CALL_OW 310
63657: NOT
63658: IFFALSE 63662
// exit ;
63660: GO 63722
// tmp := IsInUnit ( unit ) ;
63662: LD_ADDR_VAR 0 3
63666: PUSH
63667: LD_VAR 0 1
63671: PPUSH
63672: CALL_OW 310
63676: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63677: LD_VAR 0 3
63681: PPUSH
63682: CALL_OW 247
63686: PUSH
63687: LD_INT 2
63689: EQUAL
63690: IFFALSE 63703
// ComExitVehicle ( unit ) else
63692: LD_VAR 0 1
63696: PPUSH
63697: CALL_OW 121
63701: GO 63712
// ComExitBuilding ( unit ) ;
63703: LD_VAR 0 1
63707: PPUSH
63708: CALL_OW 122
// result := tmp ;
63712: LD_ADDR_VAR 0 2
63716: PUSH
63717: LD_VAR 0 3
63721: ST_TO_ADDR
// end ;
63722: LD_VAR 0 2
63726: RET
// export function ComExitAll ( units ) ; var i ; begin
63727: LD_INT 0
63729: PPUSH
63730: PPUSH
// if not units then
63731: LD_VAR 0 1
63735: NOT
63736: IFFALSE 63740
// exit ;
63738: GO 63766
// for i in units do
63740: LD_ADDR_VAR 0 3
63744: PUSH
63745: LD_VAR 0 1
63749: PUSH
63750: FOR_IN
63751: IFFALSE 63764
// ComExit ( i ) ;
63753: LD_VAR 0 3
63757: PPUSH
63758: CALL 63644 0 1
63762: GO 63750
63764: POP
63765: POP
// end ;
63766: LD_VAR 0 2
63770: RET
// export function ResetHc ; begin
63771: LD_INT 0
63773: PPUSH
// InitHc ;
63774: CALL_OW 19
// hc_importance := 0 ;
63778: LD_ADDR_OWVAR 32
63782: PUSH
63783: LD_INT 0
63785: ST_TO_ADDR
// end ;
63786: LD_VAR 0 1
63790: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63791: LD_INT 0
63793: PPUSH
63794: PPUSH
63795: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63796: LD_ADDR_VAR 0 6
63800: PUSH
63801: LD_VAR 0 1
63805: PUSH
63806: LD_VAR 0 3
63810: PLUS
63811: PUSH
63812: LD_INT 2
63814: DIV
63815: ST_TO_ADDR
// if _x < 0 then
63816: LD_VAR 0 6
63820: PUSH
63821: LD_INT 0
63823: LESS
63824: IFFALSE 63841
// _x := _x * - 1 ;
63826: LD_ADDR_VAR 0 6
63830: PUSH
63831: LD_VAR 0 6
63835: PUSH
63836: LD_INT 1
63838: NEG
63839: MUL
63840: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63841: LD_ADDR_VAR 0 7
63845: PUSH
63846: LD_VAR 0 2
63850: PUSH
63851: LD_VAR 0 4
63855: PLUS
63856: PUSH
63857: LD_INT 2
63859: DIV
63860: ST_TO_ADDR
// if _y < 0 then
63861: LD_VAR 0 7
63865: PUSH
63866: LD_INT 0
63868: LESS
63869: IFFALSE 63886
// _y := _y * - 1 ;
63871: LD_ADDR_VAR 0 7
63875: PUSH
63876: LD_VAR 0 7
63880: PUSH
63881: LD_INT 1
63883: NEG
63884: MUL
63885: ST_TO_ADDR
// result := [ _x , _y ] ;
63886: LD_ADDR_VAR 0 5
63890: PUSH
63891: LD_VAR 0 6
63895: PUSH
63896: LD_VAR 0 7
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: ST_TO_ADDR
// end ;
63905: LD_VAR 0 5
63909: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63910: LD_INT 0
63912: PPUSH
63913: PPUSH
63914: PPUSH
63915: PPUSH
// task := GetTaskList ( unit ) ;
63916: LD_ADDR_VAR 0 7
63920: PUSH
63921: LD_VAR 0 1
63925: PPUSH
63926: CALL_OW 437
63930: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63931: LD_VAR 0 7
63935: NOT
63936: PUSH
63937: LD_VAR 0 1
63941: PPUSH
63942: LD_VAR 0 2
63946: PPUSH
63947: CALL_OW 308
63951: NOT
63952: AND
63953: IFFALSE 63957
// exit ;
63955: GO 64075
// if IsInArea ( unit , area ) then
63957: LD_VAR 0 1
63961: PPUSH
63962: LD_VAR 0 2
63966: PPUSH
63967: CALL_OW 308
63971: IFFALSE 63989
// begin ComMoveToArea ( unit , goAway ) ;
63973: LD_VAR 0 1
63977: PPUSH
63978: LD_VAR 0 3
63982: PPUSH
63983: CALL_OW 113
// exit ;
63987: GO 64075
// end ; if task [ 1 ] [ 1 ] <> M then
63989: LD_VAR 0 7
63993: PUSH
63994: LD_INT 1
63996: ARRAY
63997: PUSH
63998: LD_INT 1
64000: ARRAY
64001: PUSH
64002: LD_STRING M
64004: NONEQUAL
64005: IFFALSE 64009
// exit ;
64007: GO 64075
// x := task [ 1 ] [ 2 ] ;
64009: LD_ADDR_VAR 0 5
64013: PUSH
64014: LD_VAR 0 7
64018: PUSH
64019: LD_INT 1
64021: ARRAY
64022: PUSH
64023: LD_INT 2
64025: ARRAY
64026: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64027: LD_ADDR_VAR 0 6
64031: PUSH
64032: LD_VAR 0 7
64036: PUSH
64037: LD_INT 1
64039: ARRAY
64040: PUSH
64041: LD_INT 3
64043: ARRAY
64044: ST_TO_ADDR
// if InArea ( x , y , area ) then
64045: LD_VAR 0 5
64049: PPUSH
64050: LD_VAR 0 6
64054: PPUSH
64055: LD_VAR 0 2
64059: PPUSH
64060: CALL_OW 309
64064: IFFALSE 64075
// ComStop ( unit ) ;
64066: LD_VAR 0 1
64070: PPUSH
64071: CALL_OW 141
// end ;
64075: LD_VAR 0 4
64079: RET
// export function Abs ( value ) ; begin
64080: LD_INT 0
64082: PPUSH
// result := value ;
64083: LD_ADDR_VAR 0 2
64087: PUSH
64088: LD_VAR 0 1
64092: ST_TO_ADDR
// if value < 0 then
64093: LD_VAR 0 1
64097: PUSH
64098: LD_INT 0
64100: LESS
64101: IFFALSE 64118
// result := value * - 1 ;
64103: LD_ADDR_VAR 0 2
64107: PUSH
64108: LD_VAR 0 1
64112: PUSH
64113: LD_INT 1
64115: NEG
64116: MUL
64117: ST_TO_ADDR
// end ;
64118: LD_VAR 0 2
64122: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64123: LD_INT 0
64125: PPUSH
64126: PPUSH
64127: PPUSH
64128: PPUSH
64129: PPUSH
64130: PPUSH
64131: PPUSH
64132: PPUSH
// if not unit or not building then
64133: LD_VAR 0 1
64137: NOT
64138: PUSH
64139: LD_VAR 0 2
64143: NOT
64144: OR
64145: IFFALSE 64149
// exit ;
64147: GO 64375
// x := GetX ( building ) ;
64149: LD_ADDR_VAR 0 4
64153: PUSH
64154: LD_VAR 0 2
64158: PPUSH
64159: CALL_OW 250
64163: ST_TO_ADDR
// y := GetY ( building ) ;
64164: LD_ADDR_VAR 0 6
64168: PUSH
64169: LD_VAR 0 2
64173: PPUSH
64174: CALL_OW 251
64178: ST_TO_ADDR
// d := GetDir ( building ) ;
64179: LD_ADDR_VAR 0 8
64183: PUSH
64184: LD_VAR 0 2
64188: PPUSH
64189: CALL_OW 254
64193: ST_TO_ADDR
// r := 4 ;
64194: LD_ADDR_VAR 0 9
64198: PUSH
64199: LD_INT 4
64201: ST_TO_ADDR
// for i := 1 to 5 do
64202: LD_ADDR_VAR 0 10
64206: PUSH
64207: DOUBLE
64208: LD_INT 1
64210: DEC
64211: ST_TO_ADDR
64212: LD_INT 5
64214: PUSH
64215: FOR_TO
64216: IFFALSE 64373
// begin _x := ShiftX ( x , d , r + i ) ;
64218: LD_ADDR_VAR 0 5
64222: PUSH
64223: LD_VAR 0 4
64227: PPUSH
64228: LD_VAR 0 8
64232: PPUSH
64233: LD_VAR 0 9
64237: PUSH
64238: LD_VAR 0 10
64242: PLUS
64243: PPUSH
64244: CALL_OW 272
64248: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64249: LD_ADDR_VAR 0 7
64253: PUSH
64254: LD_VAR 0 6
64258: PPUSH
64259: LD_VAR 0 8
64263: PPUSH
64264: LD_VAR 0 9
64268: PUSH
64269: LD_VAR 0 10
64273: PLUS
64274: PPUSH
64275: CALL_OW 273
64279: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64280: LD_VAR 0 5
64284: PPUSH
64285: LD_VAR 0 7
64289: PPUSH
64290: CALL_OW 488
64294: PUSH
64295: LD_VAR 0 5
64299: PPUSH
64300: LD_VAR 0 7
64304: PPUSH
64305: CALL_OW 428
64309: PPUSH
64310: CALL_OW 247
64314: PUSH
64315: LD_INT 3
64317: PUSH
64318: LD_INT 2
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: IN
64325: NOT
64326: AND
64327: IFFALSE 64371
// begin ComMoveXY ( unit , _x , _y ) ;
64329: LD_VAR 0 1
64333: PPUSH
64334: LD_VAR 0 5
64338: PPUSH
64339: LD_VAR 0 7
64343: PPUSH
64344: CALL_OW 111
// result := [ _x , _y ] ;
64348: LD_ADDR_VAR 0 3
64352: PUSH
64353: LD_VAR 0 5
64357: PUSH
64358: LD_VAR 0 7
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: ST_TO_ADDR
// exit ;
64367: POP
64368: POP
64369: GO 64375
// end ; end ;
64371: GO 64215
64373: POP
64374: POP
// end ;
64375: LD_VAR 0 3
64379: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64380: LD_INT 0
64382: PPUSH
64383: PPUSH
64384: PPUSH
// result := 0 ;
64385: LD_ADDR_VAR 0 3
64389: PUSH
64390: LD_INT 0
64392: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64393: LD_VAR 0 1
64397: PUSH
64398: LD_INT 0
64400: LESS
64401: PUSH
64402: LD_VAR 0 1
64406: PUSH
64407: LD_INT 8
64409: GREATER
64410: OR
64411: PUSH
64412: LD_VAR 0 2
64416: PUSH
64417: LD_INT 0
64419: LESS
64420: OR
64421: PUSH
64422: LD_VAR 0 2
64426: PUSH
64427: LD_INT 8
64429: GREATER
64430: OR
64431: IFFALSE 64435
// exit ;
64433: GO 64510
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64435: LD_ADDR_VAR 0 4
64439: PUSH
64440: LD_INT 22
64442: PUSH
64443: LD_VAR 0 2
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: PPUSH
64452: CALL_OW 69
64456: PUSH
64457: FOR_IN
64458: IFFALSE 64508
// begin un := UnitShoot ( i ) ;
64460: LD_ADDR_VAR 0 5
64464: PUSH
64465: LD_VAR 0 4
64469: PPUSH
64470: CALL_OW 504
64474: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64475: LD_VAR 0 5
64479: PPUSH
64480: CALL_OW 255
64484: PUSH
64485: LD_VAR 0 1
64489: EQUAL
64490: IFFALSE 64506
// begin result := un ;
64492: LD_ADDR_VAR 0 3
64496: PUSH
64497: LD_VAR 0 5
64501: ST_TO_ADDR
// exit ;
64502: POP
64503: POP
64504: GO 64510
// end ; end ;
64506: GO 64457
64508: POP
64509: POP
// end ;
64510: LD_VAR 0 3
64514: RET
// export function GetCargoBay ( units ) ; begin
64515: LD_INT 0
64517: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64518: LD_ADDR_VAR 0 2
64522: PUSH
64523: LD_VAR 0 1
64527: PPUSH
64528: LD_INT 2
64530: PUSH
64531: LD_INT 34
64533: PUSH
64534: LD_INT 12
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: LD_INT 34
64543: PUSH
64544: LD_INT 51
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 34
64553: PUSH
64554: LD_INT 32
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_INT 34
64563: PUSH
64564: LD_INT 89
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: PPUSH
64578: CALL_OW 72
64582: ST_TO_ADDR
// end ;
64583: LD_VAR 0 2
64587: RET
// export function Negate ( value ) ; begin
64588: LD_INT 0
64590: PPUSH
// result := not value ;
64591: LD_ADDR_VAR 0 2
64595: PUSH
64596: LD_VAR 0 1
64600: NOT
64601: ST_TO_ADDR
// end ;
64602: LD_VAR 0 2
64606: RET
// export function Inc ( value ) ; begin
64607: LD_INT 0
64609: PPUSH
// result := value + 1 ;
64610: LD_ADDR_VAR 0 2
64614: PUSH
64615: LD_VAR 0 1
64619: PUSH
64620: LD_INT 1
64622: PLUS
64623: ST_TO_ADDR
// end ;
64624: LD_VAR 0 2
64628: RET
// export function Dec ( value ) ; begin
64629: LD_INT 0
64631: PPUSH
// result := value - 1 ;
64632: LD_ADDR_VAR 0 2
64636: PUSH
64637: LD_VAR 0 1
64641: PUSH
64642: LD_INT 1
64644: MINUS
64645: ST_TO_ADDR
// end ;
64646: LD_VAR 0 2
64650: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64651: LD_INT 0
64653: PPUSH
64654: PPUSH
64655: PPUSH
64656: PPUSH
64657: PPUSH
64658: PPUSH
64659: PPUSH
64660: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64661: LD_VAR 0 1
64665: PPUSH
64666: LD_VAR 0 2
64670: PPUSH
64671: CALL_OW 488
64675: NOT
64676: PUSH
64677: LD_VAR 0 3
64681: PPUSH
64682: LD_VAR 0 4
64686: PPUSH
64687: CALL_OW 488
64691: NOT
64692: OR
64693: IFFALSE 64706
// begin result := - 1 ;
64695: LD_ADDR_VAR 0 5
64699: PUSH
64700: LD_INT 1
64702: NEG
64703: ST_TO_ADDR
// exit ;
64704: GO 64941
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64706: LD_ADDR_VAR 0 12
64710: PUSH
64711: LD_VAR 0 1
64715: PPUSH
64716: LD_VAR 0 2
64720: PPUSH
64721: LD_VAR 0 3
64725: PPUSH
64726: LD_VAR 0 4
64730: PPUSH
64731: CALL 63791 0 4
64735: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64736: LD_ADDR_VAR 0 11
64740: PUSH
64741: LD_VAR 0 1
64745: PPUSH
64746: LD_VAR 0 2
64750: PPUSH
64751: LD_VAR 0 12
64755: PUSH
64756: LD_INT 1
64758: ARRAY
64759: PPUSH
64760: LD_VAR 0 12
64764: PUSH
64765: LD_INT 2
64767: ARRAY
64768: PPUSH
64769: CALL_OW 298
64773: ST_TO_ADDR
// distance := 9999 ;
64774: LD_ADDR_VAR 0 10
64778: PUSH
64779: LD_INT 9999
64781: ST_TO_ADDR
// for i := 0 to 5 do
64782: LD_ADDR_VAR 0 6
64786: PUSH
64787: DOUBLE
64788: LD_INT 0
64790: DEC
64791: ST_TO_ADDR
64792: LD_INT 5
64794: PUSH
64795: FOR_TO
64796: IFFALSE 64939
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64798: LD_ADDR_VAR 0 7
64802: PUSH
64803: LD_VAR 0 1
64807: PPUSH
64808: LD_VAR 0 6
64812: PPUSH
64813: LD_VAR 0 11
64817: PPUSH
64818: CALL_OW 272
64822: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64823: LD_ADDR_VAR 0 8
64827: PUSH
64828: LD_VAR 0 2
64832: PPUSH
64833: LD_VAR 0 6
64837: PPUSH
64838: LD_VAR 0 11
64842: PPUSH
64843: CALL_OW 273
64847: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64848: LD_VAR 0 7
64852: PPUSH
64853: LD_VAR 0 8
64857: PPUSH
64858: CALL_OW 488
64862: NOT
64863: IFFALSE 64867
// continue ;
64865: GO 64795
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64867: LD_ADDR_VAR 0 9
64871: PUSH
64872: LD_VAR 0 12
64876: PUSH
64877: LD_INT 1
64879: ARRAY
64880: PPUSH
64881: LD_VAR 0 12
64885: PUSH
64886: LD_INT 2
64888: ARRAY
64889: PPUSH
64890: LD_VAR 0 7
64894: PPUSH
64895: LD_VAR 0 8
64899: PPUSH
64900: CALL_OW 298
64904: ST_TO_ADDR
// if tmp < distance then
64905: LD_VAR 0 9
64909: PUSH
64910: LD_VAR 0 10
64914: LESS
64915: IFFALSE 64937
// begin result := i ;
64917: LD_ADDR_VAR 0 5
64921: PUSH
64922: LD_VAR 0 6
64926: ST_TO_ADDR
// distance := tmp ;
64927: LD_ADDR_VAR 0 10
64931: PUSH
64932: LD_VAR 0 9
64936: ST_TO_ADDR
// end ; end ;
64937: GO 64795
64939: POP
64940: POP
// end ;
64941: LD_VAR 0 5
64945: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64946: LD_INT 0
64948: PPUSH
64949: PPUSH
// if not driver or not IsInUnit ( driver ) then
64950: LD_VAR 0 1
64954: NOT
64955: PUSH
64956: LD_VAR 0 1
64960: PPUSH
64961: CALL_OW 310
64965: NOT
64966: OR
64967: IFFALSE 64971
// exit ;
64969: GO 65061
// vehicle := IsInUnit ( driver ) ;
64971: LD_ADDR_VAR 0 3
64975: PUSH
64976: LD_VAR 0 1
64980: PPUSH
64981: CALL_OW 310
64985: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64986: LD_VAR 0 1
64990: PPUSH
64991: LD_STRING \
64993: PUSH
64994: LD_INT 0
64996: PUSH
64997: LD_INT 0
64999: PUSH
65000: LD_INT 0
65002: PUSH
65003: LD_INT 0
65005: PUSH
65006: LD_INT 0
65008: PUSH
65009: LD_INT 0
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: LIST
65018: LIST
65019: LIST
65020: PUSH
65021: LD_STRING E
65023: PUSH
65024: LD_INT 0
65026: PUSH
65027: LD_INT 0
65029: PUSH
65030: LD_VAR 0 3
65034: PUSH
65035: LD_INT 0
65037: PUSH
65038: LD_INT 0
65040: PUSH
65041: LD_INT 0
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: LIST
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PPUSH
65057: CALL_OW 446
// end ;
65061: LD_VAR 0 2
65065: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65066: LD_INT 0
65068: PPUSH
65069: PPUSH
// if not driver or not IsInUnit ( driver ) then
65070: LD_VAR 0 1
65074: NOT
65075: PUSH
65076: LD_VAR 0 1
65080: PPUSH
65081: CALL_OW 310
65085: NOT
65086: OR
65087: IFFALSE 65091
// exit ;
65089: GO 65181
// vehicle := IsInUnit ( driver ) ;
65091: LD_ADDR_VAR 0 3
65095: PUSH
65096: LD_VAR 0 1
65100: PPUSH
65101: CALL_OW 310
65105: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65106: LD_VAR 0 1
65110: PPUSH
65111: LD_STRING \
65113: PUSH
65114: LD_INT 0
65116: PUSH
65117: LD_INT 0
65119: PUSH
65120: LD_INT 0
65122: PUSH
65123: LD_INT 0
65125: PUSH
65126: LD_INT 0
65128: PUSH
65129: LD_INT 0
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: PUSH
65141: LD_STRING E
65143: PUSH
65144: LD_INT 0
65146: PUSH
65147: LD_INT 0
65149: PUSH
65150: LD_VAR 0 3
65154: PUSH
65155: LD_INT 0
65157: PUSH
65158: LD_INT 0
65160: PUSH
65161: LD_INT 0
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PPUSH
65177: CALL_OW 447
// end ;
65181: LD_VAR 0 2
65185: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65186: LD_INT 0
65188: PPUSH
65189: PPUSH
65190: PPUSH
// tmp := [ ] ;
65191: LD_ADDR_VAR 0 5
65195: PUSH
65196: EMPTY
65197: ST_TO_ADDR
// for i in units do
65198: LD_ADDR_VAR 0 4
65202: PUSH
65203: LD_VAR 0 1
65207: PUSH
65208: FOR_IN
65209: IFFALSE 65247
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65211: LD_ADDR_VAR 0 5
65215: PUSH
65216: LD_VAR 0 5
65220: PPUSH
65221: LD_VAR 0 5
65225: PUSH
65226: LD_INT 1
65228: PLUS
65229: PPUSH
65230: LD_VAR 0 4
65234: PPUSH
65235: CALL_OW 256
65239: PPUSH
65240: CALL_OW 2
65244: ST_TO_ADDR
65245: GO 65208
65247: POP
65248: POP
// if not tmp then
65249: LD_VAR 0 5
65253: NOT
65254: IFFALSE 65258
// exit ;
65256: GO 65306
// if asc then
65258: LD_VAR 0 2
65262: IFFALSE 65286
// result := SortListByListAsc ( units , tmp ) else
65264: LD_ADDR_VAR 0 3
65268: PUSH
65269: LD_VAR 0 1
65273: PPUSH
65274: LD_VAR 0 5
65278: PPUSH
65279: CALL_OW 76
65283: ST_TO_ADDR
65284: GO 65306
// result := SortListByListDesc ( units , tmp ) ;
65286: LD_ADDR_VAR 0 3
65290: PUSH
65291: LD_VAR 0 1
65295: PPUSH
65296: LD_VAR 0 5
65300: PPUSH
65301: CALL_OW 77
65305: ST_TO_ADDR
// end ;
65306: LD_VAR 0 3
65310: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65311: LD_INT 0
65313: PPUSH
65314: PPUSH
// task := GetTaskList ( mech ) ;
65315: LD_ADDR_VAR 0 4
65319: PUSH
65320: LD_VAR 0 1
65324: PPUSH
65325: CALL_OW 437
65329: ST_TO_ADDR
// if not task then
65330: LD_VAR 0 4
65334: NOT
65335: IFFALSE 65339
// exit ;
65337: GO 65381
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65339: LD_ADDR_VAR 0 3
65343: PUSH
65344: LD_VAR 0 4
65348: PUSH
65349: LD_INT 1
65351: ARRAY
65352: PUSH
65353: LD_INT 1
65355: ARRAY
65356: PUSH
65357: LD_STRING r
65359: EQUAL
65360: PUSH
65361: LD_VAR 0 4
65365: PUSH
65366: LD_INT 1
65368: ARRAY
65369: PUSH
65370: LD_INT 4
65372: ARRAY
65373: PUSH
65374: LD_VAR 0 2
65378: EQUAL
65379: AND
65380: ST_TO_ADDR
// end ;
65381: LD_VAR 0 3
65385: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65386: LD_INT 0
65388: PPUSH
// SetDir ( unit , d ) ;
65389: LD_VAR 0 1
65393: PPUSH
65394: LD_VAR 0 4
65398: PPUSH
65399: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65403: LD_VAR 0 1
65407: PPUSH
65408: LD_VAR 0 2
65412: PPUSH
65413: LD_VAR 0 3
65417: PPUSH
65418: LD_VAR 0 5
65422: PPUSH
65423: CALL_OW 48
// end ;
65427: LD_VAR 0 6
65431: RET
// export function ToNaturalNumber ( number ) ; begin
65432: LD_INT 0
65434: PPUSH
// result := number div 1 ;
65435: LD_ADDR_VAR 0 2
65439: PUSH
65440: LD_VAR 0 1
65444: PUSH
65445: LD_INT 1
65447: DIV
65448: ST_TO_ADDR
// if number < 0 then
65449: LD_VAR 0 1
65453: PUSH
65454: LD_INT 0
65456: LESS
65457: IFFALSE 65467
// result := 0 ;
65459: LD_ADDR_VAR 0 2
65463: PUSH
65464: LD_INT 0
65466: ST_TO_ADDR
// end ;
65467: LD_VAR 0 2
65471: RET
// export function SortByClass ( units , class ) ; var un ; begin
65472: LD_INT 0
65474: PPUSH
65475: PPUSH
// if not units or not class then
65476: LD_VAR 0 1
65480: NOT
65481: PUSH
65482: LD_VAR 0 2
65486: NOT
65487: OR
65488: IFFALSE 65492
// exit ;
65490: GO 65587
// result := [ ] ;
65492: LD_ADDR_VAR 0 3
65496: PUSH
65497: EMPTY
65498: ST_TO_ADDR
// for un in units do
65499: LD_ADDR_VAR 0 4
65503: PUSH
65504: LD_VAR 0 1
65508: PUSH
65509: FOR_IN
65510: IFFALSE 65585
// if GetClass ( un ) = class then
65512: LD_VAR 0 4
65516: PPUSH
65517: CALL_OW 257
65521: PUSH
65522: LD_VAR 0 2
65526: EQUAL
65527: IFFALSE 65554
// result := Insert ( result , 1 , un ) else
65529: LD_ADDR_VAR 0 3
65533: PUSH
65534: LD_VAR 0 3
65538: PPUSH
65539: LD_INT 1
65541: PPUSH
65542: LD_VAR 0 4
65546: PPUSH
65547: CALL_OW 2
65551: ST_TO_ADDR
65552: GO 65583
// result := Replace ( result , result + 1 , un ) ;
65554: LD_ADDR_VAR 0 3
65558: PUSH
65559: LD_VAR 0 3
65563: PPUSH
65564: LD_VAR 0 3
65568: PUSH
65569: LD_INT 1
65571: PLUS
65572: PPUSH
65573: LD_VAR 0 4
65577: PPUSH
65578: CALL_OW 1
65582: ST_TO_ADDR
65583: GO 65509
65585: POP
65586: POP
// end ;
65587: LD_VAR 0 3
65591: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65592: LD_INT 0
65594: PPUSH
65595: PPUSH
65596: PPUSH
65597: PPUSH
65598: PPUSH
65599: PPUSH
65600: PPUSH
// result := [ ] ;
65601: LD_ADDR_VAR 0 4
65605: PUSH
65606: EMPTY
65607: ST_TO_ADDR
// if x - r < 0 then
65608: LD_VAR 0 1
65612: PUSH
65613: LD_VAR 0 3
65617: MINUS
65618: PUSH
65619: LD_INT 0
65621: LESS
65622: IFFALSE 65634
// min_x := 0 else
65624: LD_ADDR_VAR 0 8
65628: PUSH
65629: LD_INT 0
65631: ST_TO_ADDR
65632: GO 65650
// min_x := x - r ;
65634: LD_ADDR_VAR 0 8
65638: PUSH
65639: LD_VAR 0 1
65643: PUSH
65644: LD_VAR 0 3
65648: MINUS
65649: ST_TO_ADDR
// if y - r < 0 then
65650: LD_VAR 0 2
65654: PUSH
65655: LD_VAR 0 3
65659: MINUS
65660: PUSH
65661: LD_INT 0
65663: LESS
65664: IFFALSE 65676
// min_y := 0 else
65666: LD_ADDR_VAR 0 7
65670: PUSH
65671: LD_INT 0
65673: ST_TO_ADDR
65674: GO 65692
// min_y := y - r ;
65676: LD_ADDR_VAR 0 7
65680: PUSH
65681: LD_VAR 0 2
65685: PUSH
65686: LD_VAR 0 3
65690: MINUS
65691: ST_TO_ADDR
// max_x := x + r ;
65692: LD_ADDR_VAR 0 9
65696: PUSH
65697: LD_VAR 0 1
65701: PUSH
65702: LD_VAR 0 3
65706: PLUS
65707: ST_TO_ADDR
// max_y := y + r ;
65708: LD_ADDR_VAR 0 10
65712: PUSH
65713: LD_VAR 0 2
65717: PUSH
65718: LD_VAR 0 3
65722: PLUS
65723: ST_TO_ADDR
// for _x = min_x to max_x do
65724: LD_ADDR_VAR 0 5
65728: PUSH
65729: DOUBLE
65730: LD_VAR 0 8
65734: DEC
65735: ST_TO_ADDR
65736: LD_VAR 0 9
65740: PUSH
65741: FOR_TO
65742: IFFALSE 65843
// for _y = min_y to max_y do
65744: LD_ADDR_VAR 0 6
65748: PUSH
65749: DOUBLE
65750: LD_VAR 0 7
65754: DEC
65755: ST_TO_ADDR
65756: LD_VAR 0 10
65760: PUSH
65761: FOR_TO
65762: IFFALSE 65839
// begin if not ValidHex ( _x , _y ) then
65764: LD_VAR 0 5
65768: PPUSH
65769: LD_VAR 0 6
65773: PPUSH
65774: CALL_OW 488
65778: NOT
65779: IFFALSE 65783
// continue ;
65781: GO 65761
// if GetResourceTypeXY ( _x , _y ) then
65783: LD_VAR 0 5
65787: PPUSH
65788: LD_VAR 0 6
65792: PPUSH
65793: CALL_OW 283
65797: IFFALSE 65837
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65799: LD_ADDR_VAR 0 4
65803: PUSH
65804: LD_VAR 0 4
65808: PPUSH
65809: LD_VAR 0 4
65813: PUSH
65814: LD_INT 1
65816: PLUS
65817: PPUSH
65818: LD_VAR 0 5
65822: PUSH
65823: LD_VAR 0 6
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PPUSH
65832: CALL_OW 1
65836: ST_TO_ADDR
// end ;
65837: GO 65761
65839: POP
65840: POP
65841: GO 65741
65843: POP
65844: POP
// end ;
65845: LD_VAR 0 4
65849: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65850: LD_INT 0
65852: PPUSH
65853: PPUSH
65854: PPUSH
65855: PPUSH
65856: PPUSH
65857: PPUSH
65858: PPUSH
65859: PPUSH
// if not units then
65860: LD_VAR 0 1
65864: NOT
65865: IFFALSE 65869
// exit ;
65867: GO 66393
// result := UnitFilter ( units , [ f_ok ] ) ;
65869: LD_ADDR_VAR 0 3
65873: PUSH
65874: LD_VAR 0 1
65878: PPUSH
65879: LD_INT 50
65881: PUSH
65882: EMPTY
65883: LIST
65884: PPUSH
65885: CALL_OW 72
65889: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65890: LD_ADDR_VAR 0 8
65894: PUSH
65895: LD_VAR 0 1
65899: PUSH
65900: LD_INT 1
65902: ARRAY
65903: PPUSH
65904: CALL_OW 255
65908: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65909: LD_ADDR_VAR 0 10
65913: PUSH
65914: LD_INT 29
65916: PUSH
65917: LD_INT 91
65919: PUSH
65920: LD_INT 49
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: LIST
65927: ST_TO_ADDR
// if not result then
65928: LD_VAR 0 3
65932: NOT
65933: IFFALSE 65937
// exit ;
65935: GO 66393
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65937: LD_ADDR_VAR 0 5
65941: PUSH
65942: LD_INT 81
65944: PUSH
65945: LD_VAR 0 8
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PPUSH
65954: CALL_OW 69
65958: ST_TO_ADDR
// for i in result do
65959: LD_ADDR_VAR 0 4
65963: PUSH
65964: LD_VAR 0 3
65968: PUSH
65969: FOR_IN
65970: IFFALSE 66391
// begin tag := GetTag ( i ) + 1 ;
65972: LD_ADDR_VAR 0 9
65976: PUSH
65977: LD_VAR 0 4
65981: PPUSH
65982: CALL_OW 110
65986: PUSH
65987: LD_INT 1
65989: PLUS
65990: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65991: LD_ADDR_VAR 0 7
65995: PUSH
65996: LD_VAR 0 4
66000: PPUSH
66001: CALL_OW 250
66005: PPUSH
66006: LD_VAR 0 4
66010: PPUSH
66011: CALL_OW 251
66015: PPUSH
66016: LD_INT 6
66018: PPUSH
66019: CALL 65592 0 3
66023: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
66024: LD_VAR 0 4
66028: PPUSH
66029: CALL_OW 247
66033: PUSH
66034: LD_INT 2
66036: EQUAL
66037: PUSH
66038: LD_VAR 0 7
66042: AND
66043: PUSH
66044: LD_VAR 0 4
66048: PPUSH
66049: CALL_OW 264
66053: PUSH
66054: LD_VAR 0 10
66058: IN
66059: NOT
66060: AND
66061: IFFALSE 66100
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66063: LD_VAR 0 4
66067: PPUSH
66068: LD_VAR 0 7
66072: PUSH
66073: LD_INT 1
66075: ARRAY
66076: PUSH
66077: LD_INT 1
66079: ARRAY
66080: PPUSH
66081: LD_VAR 0 7
66085: PUSH
66086: LD_INT 1
66088: ARRAY
66089: PUSH
66090: LD_INT 2
66092: ARRAY
66093: PPUSH
66094: CALL_OW 116
66098: GO 66389
// if path > tag then
66100: LD_VAR 0 2
66104: PUSH
66105: LD_VAR 0 9
66109: GREATER
66110: IFFALSE 66318
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
66112: LD_ADDR_VAR 0 6
66116: PUSH
66117: LD_VAR 0 5
66121: PPUSH
66122: LD_INT 91
66124: PUSH
66125: LD_VAR 0 4
66129: PUSH
66130: LD_INT 8
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: LIST
66137: PPUSH
66138: CALL_OW 72
66142: ST_TO_ADDR
// if nearEnemy then
66143: LD_VAR 0 6
66147: IFFALSE 66216
// begin if GetWeapon ( i ) = ru_time_lapser then
66149: LD_VAR 0 4
66153: PPUSH
66154: CALL_OW 264
66158: PUSH
66159: LD_INT 49
66161: EQUAL
66162: IFFALSE 66190
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
66164: LD_VAR 0 4
66168: PPUSH
66169: LD_VAR 0 6
66173: PPUSH
66174: LD_VAR 0 4
66178: PPUSH
66179: CALL_OW 74
66183: PPUSH
66184: CALL_OW 112
66188: GO 66214
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
66190: LD_VAR 0 4
66194: PPUSH
66195: LD_VAR 0 6
66199: PPUSH
66200: LD_VAR 0 4
66204: PPUSH
66205: CALL_OW 74
66209: PPUSH
66210: CALL_OW 115
// end else
66214: GO 66316
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66216: LD_VAR 0 4
66220: PPUSH
66221: LD_VAR 0 2
66225: PUSH
66226: LD_VAR 0 9
66230: ARRAY
66231: PUSH
66232: LD_INT 1
66234: ARRAY
66235: PPUSH
66236: LD_VAR 0 2
66240: PUSH
66241: LD_VAR 0 9
66245: ARRAY
66246: PUSH
66247: LD_INT 2
66249: ARRAY
66250: PPUSH
66251: CALL_OW 297
66255: PUSH
66256: LD_INT 6
66258: GREATER
66259: IFFALSE 66302
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66261: LD_VAR 0 4
66265: PPUSH
66266: LD_VAR 0 2
66270: PUSH
66271: LD_VAR 0 9
66275: ARRAY
66276: PUSH
66277: LD_INT 1
66279: ARRAY
66280: PPUSH
66281: LD_VAR 0 2
66285: PUSH
66286: LD_VAR 0 9
66290: ARRAY
66291: PUSH
66292: LD_INT 2
66294: ARRAY
66295: PPUSH
66296: CALL_OW 114
66300: GO 66316
// SetTag ( i , tag ) ;
66302: LD_VAR 0 4
66306: PPUSH
66307: LD_VAR 0 9
66311: PPUSH
66312: CALL_OW 109
// end else
66316: GO 66389
// if enemy then
66318: LD_VAR 0 5
66322: IFFALSE 66389
// begin if GetWeapon ( i ) = ru_time_lapser then
66324: LD_VAR 0 4
66328: PPUSH
66329: CALL_OW 264
66333: PUSH
66334: LD_INT 49
66336: EQUAL
66337: IFFALSE 66365
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66339: LD_VAR 0 4
66343: PPUSH
66344: LD_VAR 0 5
66348: PPUSH
66349: LD_VAR 0 4
66353: PPUSH
66354: CALL_OW 74
66358: PPUSH
66359: CALL_OW 112
66363: GO 66389
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66365: LD_VAR 0 4
66369: PPUSH
66370: LD_VAR 0 5
66374: PPUSH
66375: LD_VAR 0 4
66379: PPUSH
66380: CALL_OW 74
66384: PPUSH
66385: CALL_OW 115
// end ; end ;
66389: GO 65969
66391: POP
66392: POP
// end ;
66393: LD_VAR 0 3
66397: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66398: LD_INT 0
66400: PPUSH
66401: PPUSH
66402: PPUSH
// if not unit or IsInUnit ( unit ) then
66403: LD_VAR 0 1
66407: NOT
66408: PUSH
66409: LD_VAR 0 1
66413: PPUSH
66414: CALL_OW 310
66418: OR
66419: IFFALSE 66423
// exit ;
66421: GO 66514
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66423: LD_ADDR_VAR 0 4
66427: PUSH
66428: LD_VAR 0 1
66432: PPUSH
66433: CALL_OW 250
66437: PPUSH
66438: LD_VAR 0 2
66442: PPUSH
66443: LD_INT 1
66445: PPUSH
66446: CALL_OW 272
66450: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66451: LD_ADDR_VAR 0 5
66455: PUSH
66456: LD_VAR 0 1
66460: PPUSH
66461: CALL_OW 251
66465: PPUSH
66466: LD_VAR 0 2
66470: PPUSH
66471: LD_INT 1
66473: PPUSH
66474: CALL_OW 273
66478: ST_TO_ADDR
// if ValidHex ( x , y ) then
66479: LD_VAR 0 4
66483: PPUSH
66484: LD_VAR 0 5
66488: PPUSH
66489: CALL_OW 488
66493: IFFALSE 66514
// ComTurnXY ( unit , x , y ) ;
66495: LD_VAR 0 1
66499: PPUSH
66500: LD_VAR 0 4
66504: PPUSH
66505: LD_VAR 0 5
66509: PPUSH
66510: CALL_OW 118
// end ;
66514: LD_VAR 0 3
66518: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66519: LD_INT 0
66521: PPUSH
66522: PPUSH
// result := false ;
66523: LD_ADDR_VAR 0 3
66527: PUSH
66528: LD_INT 0
66530: ST_TO_ADDR
// if not units then
66531: LD_VAR 0 2
66535: NOT
66536: IFFALSE 66540
// exit ;
66538: GO 66585
// for i in units do
66540: LD_ADDR_VAR 0 4
66544: PUSH
66545: LD_VAR 0 2
66549: PUSH
66550: FOR_IN
66551: IFFALSE 66583
// if See ( side , i ) then
66553: LD_VAR 0 1
66557: PPUSH
66558: LD_VAR 0 4
66562: PPUSH
66563: CALL_OW 292
66567: IFFALSE 66581
// begin result := true ;
66569: LD_ADDR_VAR 0 3
66573: PUSH
66574: LD_INT 1
66576: ST_TO_ADDR
// exit ;
66577: POP
66578: POP
66579: GO 66585
// end ;
66581: GO 66550
66583: POP
66584: POP
// end ;
66585: LD_VAR 0 3
66589: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66590: LD_INT 0
66592: PPUSH
66593: PPUSH
66594: PPUSH
66595: PPUSH
// if not unit or not points then
66596: LD_VAR 0 1
66600: NOT
66601: PUSH
66602: LD_VAR 0 2
66606: NOT
66607: OR
66608: IFFALSE 66612
// exit ;
66610: GO 66702
// dist := 99999 ;
66612: LD_ADDR_VAR 0 5
66616: PUSH
66617: LD_INT 99999
66619: ST_TO_ADDR
// for i in points do
66620: LD_ADDR_VAR 0 4
66624: PUSH
66625: LD_VAR 0 2
66629: PUSH
66630: FOR_IN
66631: IFFALSE 66700
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66633: LD_ADDR_VAR 0 6
66637: PUSH
66638: LD_VAR 0 1
66642: PPUSH
66643: LD_VAR 0 4
66647: PUSH
66648: LD_INT 1
66650: ARRAY
66651: PPUSH
66652: LD_VAR 0 4
66656: PUSH
66657: LD_INT 2
66659: ARRAY
66660: PPUSH
66661: CALL_OW 297
66665: ST_TO_ADDR
// if tmpDist < dist then
66666: LD_VAR 0 6
66670: PUSH
66671: LD_VAR 0 5
66675: LESS
66676: IFFALSE 66698
// begin result := i ;
66678: LD_ADDR_VAR 0 3
66682: PUSH
66683: LD_VAR 0 4
66687: ST_TO_ADDR
// dist := tmpDist ;
66688: LD_ADDR_VAR 0 5
66692: PUSH
66693: LD_VAR 0 6
66697: ST_TO_ADDR
// end ; end ;
66698: GO 66630
66700: POP
66701: POP
// end ;
66702: LD_VAR 0 3
66706: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66707: LD_INT 0
66709: PPUSH
// uc_side := side ;
66710: LD_ADDR_OWVAR 20
66714: PUSH
66715: LD_VAR 0 1
66719: ST_TO_ADDR
// uc_nation := 3 ;
66720: LD_ADDR_OWVAR 21
66724: PUSH
66725: LD_INT 3
66727: ST_TO_ADDR
// vc_chassis := 25 ;
66728: LD_ADDR_OWVAR 37
66732: PUSH
66733: LD_INT 25
66735: ST_TO_ADDR
// vc_engine := engine_siberite ;
66736: LD_ADDR_OWVAR 39
66740: PUSH
66741: LD_INT 3
66743: ST_TO_ADDR
// vc_control := control_computer ;
66744: LD_ADDR_OWVAR 38
66748: PUSH
66749: LD_INT 3
66751: ST_TO_ADDR
// vc_weapon := 59 ;
66752: LD_ADDR_OWVAR 40
66756: PUSH
66757: LD_INT 59
66759: ST_TO_ADDR
// result := CreateVehicle ;
66760: LD_ADDR_VAR 0 5
66764: PUSH
66765: CALL_OW 45
66769: ST_TO_ADDR
// SetDir ( result , d ) ;
66770: LD_VAR 0 5
66774: PPUSH
66775: LD_VAR 0 4
66779: PPUSH
66780: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66784: LD_VAR 0 5
66788: PPUSH
66789: LD_VAR 0 2
66793: PPUSH
66794: LD_VAR 0 3
66798: PPUSH
66799: LD_INT 0
66801: PPUSH
66802: CALL_OW 48
// end ;
66806: LD_VAR 0 5
66810: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66811: LD_INT 0
66813: PPUSH
66814: PPUSH
66815: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66816: LD_ADDR_VAR 0 2
66820: PUSH
66821: LD_INT 0
66823: PUSH
66824: LD_INT 0
66826: PUSH
66827: LD_INT 0
66829: PUSH
66830: LD_INT 0
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: LIST
66837: LIST
66838: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66839: LD_VAR 0 1
66843: NOT
66844: PUSH
66845: LD_VAR 0 1
66849: PPUSH
66850: CALL_OW 264
66854: PUSH
66855: LD_INT 12
66857: PUSH
66858: LD_INT 51
66860: PUSH
66861: LD_INT 32
66863: PUSH
66864: LD_INT 89
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: IN
66873: NOT
66874: OR
66875: IFFALSE 66879
// exit ;
66877: GO 66977
// for i := 1 to 3 do
66879: LD_ADDR_VAR 0 3
66883: PUSH
66884: DOUBLE
66885: LD_INT 1
66887: DEC
66888: ST_TO_ADDR
66889: LD_INT 3
66891: PUSH
66892: FOR_TO
66893: IFFALSE 66975
// begin tmp := GetCargo ( cargo , i ) ;
66895: LD_ADDR_VAR 0 4
66899: PUSH
66900: LD_VAR 0 1
66904: PPUSH
66905: LD_VAR 0 3
66909: PPUSH
66910: CALL_OW 289
66914: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66915: LD_ADDR_VAR 0 2
66919: PUSH
66920: LD_VAR 0 2
66924: PPUSH
66925: LD_VAR 0 3
66929: PPUSH
66930: LD_VAR 0 4
66934: PPUSH
66935: CALL_OW 1
66939: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66940: LD_ADDR_VAR 0 2
66944: PUSH
66945: LD_VAR 0 2
66949: PPUSH
66950: LD_INT 4
66952: PPUSH
66953: LD_VAR 0 2
66957: PUSH
66958: LD_INT 4
66960: ARRAY
66961: PUSH
66962: LD_VAR 0 4
66966: PLUS
66967: PPUSH
66968: CALL_OW 1
66972: ST_TO_ADDR
// end ;
66973: GO 66892
66975: POP
66976: POP
// end ;
66977: LD_VAR 0 2
66981: RET
// export function Length ( array ) ; begin
66982: LD_INT 0
66984: PPUSH
// result := array + 0 ;
66985: LD_ADDR_VAR 0 2
66989: PUSH
66990: LD_VAR 0 1
66994: PUSH
66995: LD_INT 0
66997: PLUS
66998: ST_TO_ADDR
// end ;
66999: LD_VAR 0 2
67003: RET
// export function PrepareArray ( array ) ; begin
67004: LD_INT 0
67006: PPUSH
// result := array diff 0 ;
67007: LD_ADDR_VAR 0 2
67011: PUSH
67012: LD_VAR 0 1
67016: PUSH
67017: LD_INT 0
67019: DIFF
67020: ST_TO_ADDR
// if not result [ 1 ] then
67021: LD_VAR 0 2
67025: PUSH
67026: LD_INT 1
67028: ARRAY
67029: NOT
67030: IFFALSE 67050
// result := Delete ( result , 1 ) ;
67032: LD_ADDR_VAR 0 2
67036: PUSH
67037: LD_VAR 0 2
67041: PPUSH
67042: LD_INT 1
67044: PPUSH
67045: CALL_OW 3
67049: ST_TO_ADDR
// end ;
67050: LD_VAR 0 2
67054: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
67055: LD_INT 0
67057: PPUSH
67058: PPUSH
67059: PPUSH
67060: PPUSH
// sibRocketRange := 25 ;
67061: LD_ADDR_VAR 0 6
67065: PUSH
67066: LD_INT 25
67068: ST_TO_ADDR
// result := false ;
67069: LD_ADDR_VAR 0 4
67073: PUSH
67074: LD_INT 0
67076: ST_TO_ADDR
// for i := 0 to 5 do
67077: LD_ADDR_VAR 0 5
67081: PUSH
67082: DOUBLE
67083: LD_INT 0
67085: DEC
67086: ST_TO_ADDR
67087: LD_INT 5
67089: PUSH
67090: FOR_TO
67091: IFFALSE 67158
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
67093: LD_VAR 0 1
67097: PPUSH
67098: LD_VAR 0 5
67102: PPUSH
67103: LD_VAR 0 6
67107: PPUSH
67108: CALL_OW 272
67112: PPUSH
67113: LD_VAR 0 2
67117: PPUSH
67118: LD_VAR 0 5
67122: PPUSH
67123: LD_VAR 0 6
67127: PPUSH
67128: CALL_OW 273
67132: PPUSH
67133: LD_VAR 0 3
67137: PPUSH
67138: CALL_OW 309
67142: IFFALSE 67156
// begin result := true ;
67144: LD_ADDR_VAR 0 4
67148: PUSH
67149: LD_INT 1
67151: ST_TO_ADDR
// exit ;
67152: POP
67153: POP
67154: GO 67160
// end ;
67156: GO 67090
67158: POP
67159: POP
// end ;
67160: LD_VAR 0 4
67164: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
67165: LD_INT 0
67167: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
67168: LD_VAR 0 1
67172: PPUSH
67173: LD_VAR 0 2
67177: PPUSH
67178: LD_INT 0
67180: PPUSH
67181: LD_INT 0
67183: PPUSH
67184: LD_INT 1
67186: PPUSH
67187: LD_INT 0
67189: PPUSH
67190: CALL_OW 587
// end ;
67194: LD_VAR 0 3
67198: RET
// export function CenterOnNow ( unit ) ; begin
67199: LD_INT 0
67201: PPUSH
// result := IsInUnit ( unit ) ;
67202: LD_ADDR_VAR 0 2
67206: PUSH
67207: LD_VAR 0 1
67211: PPUSH
67212: CALL_OW 310
67216: ST_TO_ADDR
// if not result then
67217: LD_VAR 0 2
67221: NOT
67222: IFFALSE 67234
// result := unit ;
67224: LD_ADDR_VAR 0 2
67228: PUSH
67229: LD_VAR 0 1
67233: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
67234: LD_VAR 0 1
67238: PPUSH
67239: CALL_OW 87
// end ;
67243: LD_VAR 0 2
67247: RET
// export function ComMoveHex ( unit , hex ) ; begin
67248: LD_INT 0
67250: PPUSH
// if not hex then
67251: LD_VAR 0 2
67255: NOT
67256: IFFALSE 67260
// exit ;
67258: GO 67313
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
67260: LD_VAR 0 2
67264: PUSH
67265: LD_INT 1
67267: ARRAY
67268: PPUSH
67269: LD_VAR 0 2
67273: PUSH
67274: LD_INT 2
67276: ARRAY
67277: PPUSH
67278: CALL_OW 428
67282: IFFALSE 67286
// exit ;
67284: GO 67313
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
67286: LD_VAR 0 1
67290: PPUSH
67291: LD_VAR 0 2
67295: PUSH
67296: LD_INT 1
67298: ARRAY
67299: PPUSH
67300: LD_VAR 0 2
67304: PUSH
67305: LD_INT 2
67307: ARRAY
67308: PPUSH
67309: CALL_OW 111
// end ; end_of_file
67313: LD_VAR 0 3
67317: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67318: LD_VAR 0 1
67322: PPUSH
67323: LD_VAR 0 2
67327: PPUSH
67328: LD_VAR 0 3
67332: PPUSH
67333: LD_VAR 0 4
67337: PPUSH
67338: LD_VAR 0 5
67342: PPUSH
67343: LD_VAR 0 6
67347: PPUSH
67348: CALL 6026 0 6
// end ;
67352: PPOPN 6
67354: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
67355: LD_INT 0
67357: PPUSH
// begin if not units then
67358: LD_VAR 0 1
67362: NOT
67363: IFFALSE 67367
// exit ;
67365: GO 67367
// end ;
67367: PPOPN 7
67369: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
67370: CALL 5930 0 0
// end ; end_of_file
67374: PPOPN 1
67376: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67377: LD_VAR 0 1
67381: PUSH
67382: LD_INT 200
67384: DOUBLE
67385: GREATEREQUAL
67386: IFFALSE 67394
67388: LD_INT 299
67390: DOUBLE
67391: LESSEQUAL
67392: IFTRUE 67396
67394: GO 67428
67396: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67397: LD_VAR 0 1
67401: PPUSH
67402: LD_VAR 0 2
67406: PPUSH
67407: LD_VAR 0 3
67411: PPUSH
67412: LD_VAR 0 4
67416: PPUSH
67417: LD_VAR 0 5
67421: PPUSH
67422: CALL 22041 0 5
67426: GO 67505
67428: LD_INT 300
67430: DOUBLE
67431: GREATEREQUAL
67432: IFFALSE 67440
67434: LD_INT 399
67436: DOUBLE
67437: LESSEQUAL
67438: IFTRUE 67442
67440: GO 67504
67442: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67443: LD_VAR 0 1
67447: PPUSH
67448: LD_VAR 0 2
67452: PPUSH
67453: LD_VAR 0 3
67457: PPUSH
67458: LD_VAR 0 4
67462: PPUSH
67463: LD_VAR 0 5
67467: PPUSH
67468: LD_VAR 0 6
67472: PPUSH
67473: LD_VAR 0 7
67477: PPUSH
67478: LD_VAR 0 8
67482: PPUSH
67483: LD_VAR 0 9
67487: PPUSH
67488: LD_VAR 0 10
67492: PPUSH
67493: LD_VAR 0 11
67497: PPUSH
67498: CALL 18374 0 11
67502: GO 67505
67504: POP
// end ;
67505: PPOPN 11
67507: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67508: LD_VAR 0 1
67512: PPUSH
67513: LD_VAR 0 2
67517: PPUSH
67518: LD_VAR 0 3
67522: PPUSH
67523: LD_VAR 0 4
67527: PPUSH
67528: LD_VAR 0 5
67532: PPUSH
67533: CALL 21777 0 5
// end ;
67537: PPOPN 5
67539: END
