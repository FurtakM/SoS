// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson , Mike ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export selectedPeople ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect := 0 ;
  15: LD_ADDR_EXP 19
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene := 1 ;
  23: LD_ADDR_EXP 20
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans := [ ] ;
  31: LD_ADDR_EXP 13
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans := [ ] ;
  38: LD_ADDR_EXP 14
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles := [ ] ;
  45: LD_ADDR_EXP 15
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 12
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// resources := [ ] ;
  59: LD_ADDR_EXP 22
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// mission_prefix := 06_ ;
  66: LD_ADDR_EXP 23
  70: PUSH
  71: LD_STRING 06_
  73: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  74: LD_ADDR_EXP 24
  78: PUSH
  79: LD_STRING 05_
  81: ST_TO_ADDR
// PrepareDeltaBase ;
  82: CALL 2411 0 0
// CreateNature ;
  86: CALL 170 0 0
// LoadVehicles ;
  90: CALL 1530 0 0
// PrepareHeroes ;
  94: CALL 299 0 0
// PrepareRandoms ;
  98: CALL 1795 0 0
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 102: LD_ADDR_EXP 21
 106: PUSH
 107: LD_INT 22
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 2
 119: PUSH
 120: LD_INT 30
 122: PUSH
 123: LD_INT 6
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 30
 132: PUSH
 133: LD_INT 7
 135: PUSH
 136: EMPTY
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 30
 142: PUSH
 143: LD_INT 8
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: PPUSH
 160: CALL_OW 69
 164: ST_TO_ADDR
// Action ;
 165: CALL 3325 0 0
// end ;
 169: END
// export function CreateNature ; var i ; begin
 170: LD_INT 0
 172: PPUSH
 173: PPUSH
// uc_side := 0 ;
 174: LD_ADDR_OWVAR 20
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// uc_nation := 0 ;
 182: LD_ADDR_OWVAR 21
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// for i = 1 to 4 do
 190: LD_ADDR_VAR 0 2
 194: PUSH
 195: DOUBLE
 196: LD_INT 1
 198: DEC
 199: ST_TO_ADDR
 200: LD_INT 4
 202: PUSH
 203: FOR_TO
 204: IFFALSE 292
// begin hc_gallery :=  ;
 206: LD_ADDR_OWVAR 33
 210: PUSH
 211: LD_STRING 
 213: ST_TO_ADDR
// hc_name :=  ;
 214: LD_ADDR_OWVAR 26
 218: PUSH
 219: LD_STRING 
 221: ST_TO_ADDR
// hc_agressivity := 0 ;
 222: LD_ADDR_OWVAR 35
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// hc_attr := [ rand ( 10 , 11 ) , rand ( 10 , 12 ) ] ;
 230: LD_ADDR_OWVAR 29
 234: PUSH
 235: LD_INT 10
 237: PPUSH
 238: LD_INT 11
 240: PPUSH
 241: CALL_OW 12
 245: PUSH
 246: LD_INT 10
 248: PPUSH
 249: LD_INT 12
 251: PPUSH
 252: CALL_OW 12
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: ST_TO_ADDR
// hc_class := class_apeman ;
 261: LD_ADDR_OWVAR 28
 265: PUSH
 266: LD_INT 12
 268: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 22 , 18 , 20 , false ) ;
 269: CALL_OW 44
 273: PPUSH
 274: LD_INT 22
 276: PPUSH
 277: LD_INT 18
 279: PPUSH
 280: LD_INT 20
 282: PPUSH
 283: LD_INT 0
 285: PPUSH
 286: CALL_OW 50
// end ;
 290: GO 203
 292: POP
 293: POP
// end ; end_of_file
 294: LD_VAR 0 1
 298: RET
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
 305: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 306: LD_ADDR_VAR 0 3
 310: PUSH
 311: LD_INT 22
 313: PUSH
 314: LD_INT 1
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 21
 323: PUSH
 324: LD_INT 3
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: LD_INT 30
 333: PUSH
 334: LD_INT 0
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: PPUSH
 346: CALL_OW 69
 350: ST_TO_ADDR
// if tmp then
 351: LD_VAR 0 3
 355: IFFALSE 373
// SetBName ( tmp [ 1 ] , delta ) ;
 357: LD_VAR 0 3
 361: PUSH
 362: LD_INT 1
 364: ARRAY
 365: PPUSH
 366: LD_STRING delta
 368: PPUSH
 369: CALL_OW 500
// uc_side := 1 ;
 373: LD_ADDR_OWVAR 20
 377: PUSH
 378: LD_INT 1
 380: ST_TO_ADDR
// uc_nation := 1 ;
 381: LD_ADDR_OWVAR 21
 385: PUSH
 386: LD_INT 1
 388: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 389: LD_ADDR_EXP 1
 393: PUSH
 394: LD_STRING JMM
 396: PPUSH
 397: LD_INT 1
 399: PPUSH
 400: LD_EXP 24
 404: PPUSH
 405: CALL 26589 0 3
 409: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 410: LD_ADDR_EXP 17
 414: PUSH
 415: LD_STRING Harisson
 417: PPUSH
 418: LD_INT 0
 420: PPUSH
 421: LD_STRING 
 423: PPUSH
 424: CALL 26589 0 3
 428: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 429: LD_EXP 1
 433: PPUSH
 434: LD_VAR 0 3
 438: PUSH
 439: LD_INT 1
 441: ARRAY
 442: PPUSH
 443: CALL_OW 250
 447: PPUSH
 448: LD_VAR 0 3
 452: PUSH
 453: LD_INT 1
 455: ARRAY
 456: PPUSH
 457: CALL_OW 251
 461: PPUSH
 462: LD_INT 5
 464: PPUSH
 465: LD_INT 0
 467: PPUSH
 468: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 472: LD_EXP 1
 476: PPUSH
 477: LD_INT 1
 479: PPUSH
 480: CALL_OW 336
// Gladstone := PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
 484: LD_ADDR_EXP 2
 488: PUSH
 489: LD_STRING Gladstone
 491: PPUSH
 492: LD_INT 1
 494: PPUSH
 495: LD_EXP 24
 499: PPUSH
 500: CALL 26589 0 3
 504: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 505: LD_EXP 2
 509: PPUSH
 510: LD_VAR 0 3
 514: PUSH
 515: LD_INT 1
 517: ARRAY
 518: PPUSH
 519: CALL_OW 250
 523: PPUSH
 524: LD_VAR 0 3
 528: PUSH
 529: LD_INT 1
 531: ARRAY
 532: PPUSH
 533: CALL_OW 251
 537: PPUSH
 538: LD_INT 5
 540: PPUSH
 541: LD_INT 0
 543: PPUSH
 544: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 548: LD_EXP 2
 552: PPUSH
 553: LD_INT 4
 555: PPUSH
 556: CALL_OW 336
// Denis := PrepareUnit ( Denis , true , mission_prefix_prev ) ;
 560: LD_ADDR_EXP 3
 564: PUSH
 565: LD_STRING Denis
 567: PPUSH
 568: LD_INT 1
 570: PPUSH
 571: LD_EXP 24
 575: PPUSH
 576: CALL 26589 0 3
 580: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 581: LD_EXP 3
 585: PPUSH
 586: LD_VAR 0 3
 590: PUSH
 591: LD_INT 1
 593: ARRAY
 594: PPUSH
 595: CALL_OW 250
 599: PPUSH
 600: LD_VAR 0 3
 604: PUSH
 605: LD_INT 1
 607: ARRAY
 608: PPUSH
 609: CALL_OW 251
 613: PPUSH
 614: LD_INT 5
 616: PPUSH
 617: LD_INT 0
 619: PPUSH
 620: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 624: LD_EXP 3
 628: PPUSH
 629: LD_INT 4
 631: PPUSH
 632: CALL_OW 336
// Mike := PrepareUnit ( Mike , true , mission_prefix_prev ) ;
 636: LD_ADDR_EXP 10
 640: PUSH
 641: LD_STRING Mike
 643: PPUSH
 644: LD_INT 1
 646: PPUSH
 647: LD_EXP 24
 651: PPUSH
 652: CALL 26589 0 3
 656: ST_TO_ADDR
// PlaceUnitXYR ( Mike , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 657: LD_EXP 10
 661: PPUSH
 662: LD_VAR 0 3
 666: PUSH
 667: LD_INT 1
 669: ARRAY
 670: PPUSH
 671: CALL_OW 250
 675: PPUSH
 676: LD_VAR 0 3
 680: PUSH
 681: LD_INT 1
 683: ARRAY
 684: PPUSH
 685: CALL_OW 251
 689: PPUSH
 690: LD_INT 5
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 50
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 700: LD_STRING FrankInDelta
 702: PPUSH
 703: LD_INT 0
 705: PPUSH
 706: CALL_OW 30
 710: PUSH
 711: LD_INT 1
 713: EQUAL
 714: IFFALSE 792
// begin Frank := PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 716: LD_ADDR_EXP 5
 720: PUSH
 721: LD_STRING Frank
 723: PPUSH
 724: LD_INT 1
 726: PPUSH
 727: LD_EXP 24
 731: PPUSH
 732: CALL 26589 0 3
 736: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 737: LD_EXP 5
 741: PPUSH
 742: LD_VAR 0 3
 746: PUSH
 747: LD_INT 1
 749: ARRAY
 750: PPUSH
 751: CALL_OW 250
 755: PPUSH
 756: LD_VAR 0 3
 760: PUSH
 761: LD_INT 1
 763: ARRAY
 764: PPUSH
 765: CALL_OW 251
 769: PPUSH
 770: LD_INT 5
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 780: LD_EXP 5
 784: PPUSH
 785: LD_INT 1
 787: PPUSH
 788: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 792: LD_STRING LisaInDelta
 794: PPUSH
 795: LD_INT 0
 797: PPUSH
 798: CALL_OW 30
 802: PUSH
 803: LD_INT 1
 805: EQUAL
 806: IFFALSE 884
// begin Lisa := PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 808: LD_ADDR_EXP 4
 812: PUSH
 813: LD_STRING Lisa
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: LD_EXP 24
 823: PPUSH
 824: CALL 26589 0 3
 828: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 829: LD_EXP 4
 833: PPUSH
 834: LD_VAR 0 3
 838: PUSH
 839: LD_INT 1
 841: ARRAY
 842: PPUSH
 843: CALL_OW 250
 847: PPUSH
 848: LD_VAR 0 3
 852: PUSH
 853: LD_INT 1
 855: ARRAY
 856: PPUSH
 857: CALL_OW 251
 861: PPUSH
 862: LD_INT 5
 864: PPUSH
 865: LD_INT 0
 867: PPUSH
 868: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 872: LD_EXP 4
 876: PPUSH
 877: LD_INT 1
 879: PPUSH
 880: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 884: LD_STRING BobbyInDelta
 886: PPUSH
 887: LD_INT 0
 889: PPUSH
 890: CALL_OW 30
 894: PUSH
 895: LD_INT 1
 897: EQUAL
 898: IFFALSE 976
// begin Bobby := PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 900: LD_ADDR_EXP 6
 904: PUSH
 905: LD_STRING Bobby
 907: PPUSH
 908: LD_INT 1
 910: PPUSH
 911: LD_EXP 24
 915: PPUSH
 916: CALL 26589 0 3
 920: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 921: LD_EXP 6
 925: PPUSH
 926: LD_VAR 0 3
 930: PUSH
 931: LD_INT 1
 933: ARRAY
 934: PPUSH
 935: CALL_OW 250
 939: PPUSH
 940: LD_VAR 0 3
 944: PUSH
 945: LD_INT 1
 947: ARRAY
 948: PPUSH
 949: CALL_OW 251
 953: PPUSH
 954: LD_INT 5
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 964: LD_EXP 6
 968: PPUSH
 969: LD_INT 1
 971: PPUSH
 972: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 976: LD_STRING CyrusInDelta
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL_OW 30
 986: PUSH
 987: LD_INT 1
 989: EQUAL
 990: IFFALSE 1068
// begin Cyrus := PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 992: LD_ADDR_EXP 7
 996: PUSH
 997: LD_STRING Cyrus
 999: PPUSH
1000: LD_INT 1
1002: PPUSH
1003: LD_EXP 24
1007: PPUSH
1008: CALL 26589 0 3
1012: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1013: LD_EXP 7
1017: PPUSH
1018: LD_VAR 0 3
1022: PUSH
1023: LD_INT 1
1025: ARRAY
1026: PPUSH
1027: CALL_OW 250
1031: PPUSH
1032: LD_VAR 0 3
1036: PUSH
1037: LD_INT 1
1039: ARRAY
1040: PPUSH
1041: CALL_OW 251
1045: PPUSH
1046: LD_INT 5
1048: PPUSH
1049: LD_INT 0
1051: PPUSH
1052: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
1056: LD_EXP 7
1060: PPUSH
1061: LD_INT 1
1063: PPUSH
1064: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
1068: LD_STRING DonaldsonInDelta
1070: PPUSH
1071: LD_INT 0
1073: PPUSH
1074: CALL_OW 30
1078: PUSH
1079: LD_INT 1
1081: EQUAL
1082: IFFALSE 1160
// begin Donaldson := PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
1084: LD_ADDR_EXP 9
1088: PUSH
1089: LD_STRING Donaldson
1091: PPUSH
1092: LD_INT 1
1094: PPUSH
1095: LD_EXP 24
1099: PPUSH
1100: CALL 26589 0 3
1104: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1105: LD_EXP 9
1109: PPUSH
1110: LD_VAR 0 3
1114: PUSH
1115: LD_INT 1
1117: ARRAY
1118: PPUSH
1119: CALL_OW 250
1123: PPUSH
1124: LD_VAR 0 3
1128: PUSH
1129: LD_INT 1
1131: ARRAY
1132: PPUSH
1133: CALL_OW 251
1137: PPUSH
1138: LD_INT 5
1140: PPUSH
1141: LD_INT 0
1143: PPUSH
1144: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
1148: LD_EXP 9
1152: PPUSH
1153: LD_INT 1
1155: PPUSH
1156: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
1160: LD_STRING BrownInDelta
1162: PPUSH
1163: LD_INT 0
1165: PPUSH
1166: CALL_OW 30
1170: PUSH
1171: LD_INT 1
1173: EQUAL
1174: IFFALSE 1252
// begin Brown := PrepareUnit ( Brown , true , mission_prefix_prev ) ;
1176: LD_ADDR_EXP 8
1180: PUSH
1181: LD_STRING Brown
1183: PPUSH
1184: LD_INT 1
1186: PPUSH
1187: LD_EXP 24
1191: PPUSH
1192: CALL 26589 0 3
1196: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1197: LD_EXP 8
1201: PPUSH
1202: LD_VAR 0 3
1206: PUSH
1207: LD_INT 1
1209: ARRAY
1210: PPUSH
1211: CALL_OW 250
1215: PPUSH
1216: LD_VAR 0 3
1220: PUSH
1221: LD_INT 1
1223: ARRAY
1224: PPUSH
1225: CALL_OW 251
1229: PPUSH
1230: LD_INT 5
1232: PPUSH
1233: LD_INT 0
1235: PPUSH
1236: CALL_OW 50
// SetClass ( Brown , 2 ) ;
1240: LD_EXP 8
1244: PPUSH
1245: LD_INT 2
1247: PPUSH
1248: CALL_OW 336
// end ; others := CreateCharacterSet ( othersInDelta ) ;
1252: LD_ADDR_EXP 11
1256: PUSH
1257: LD_STRING othersInDelta
1259: PPUSH
1260: CALL_OW 31
1264: ST_TO_ADDR
// for i in others do
1265: LD_ADDR_VAR 0 2
1269: PUSH
1270: LD_EXP 11
1274: PUSH
1275: FOR_IN
1276: IFFALSE 1323
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1278: LD_VAR 0 2
1282: PPUSH
1283: LD_VAR 0 3
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: CALL_OW 250
1296: PPUSH
1297: LD_VAR 0 3
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: CALL_OW 251
1310: PPUSH
1311: LD_INT 35
1313: PPUSH
1314: LD_INT 0
1316: PPUSH
1317: CALL_OW 50
1321: GO 1275
1323: POP
1324: POP
// apemans := CreateCharacterSet ( apeInDelta ) ;
1325: LD_ADDR_EXP 13
1329: PUSH
1330: LD_STRING apeInDelta
1332: PPUSH
1333: CALL_OW 31
1337: ST_TO_ADDR
// uc_nation := 0 ;
1338: LD_ADDR_OWVAR 21
1342: PUSH
1343: LD_INT 0
1345: ST_TO_ADDR
// if apemans > 5 then
1346: LD_EXP 13
1350: PUSH
1351: LD_INT 5
1353: GREATER
1354: IFFALSE 1449
// begin for i := 1 to 5 do
1356: LD_ADDR_VAR 0 2
1360: PUSH
1361: DOUBLE
1362: LD_INT 1
1364: DEC
1365: ST_TO_ADDR
1366: LD_INT 5
1368: PUSH
1369: FOR_TO
1370: IFFALSE 1445
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1372: LD_EXP 13
1376: PUSH
1377: LD_VAR 0 2
1381: ARRAY
1382: PPUSH
1383: LD_VAR 0 3
1387: PUSH
1388: LD_INT 1
1390: ARRAY
1391: PPUSH
1392: CALL_OW 250
1396: PPUSH
1397: LD_VAR 0 3
1401: PUSH
1402: LD_INT 1
1404: ARRAY
1405: PPUSH
1406: CALL_OW 251
1410: PPUSH
1411: LD_INT 50
1413: PPUSH
1414: LD_INT 0
1416: PPUSH
1417: CALL_OW 50
// yourApemans := yourApemans ^ apemans [ i ] ;
1421: LD_ADDR_EXP 14
1425: PUSH
1426: LD_EXP 14
1430: PUSH
1431: LD_EXP 13
1435: PUSH
1436: LD_VAR 0 2
1440: ARRAY
1441: ADD
1442: ST_TO_ADDR
// end ;
1443: GO 1369
1445: POP
1446: POP
// end else
1447: GO 1525
// begin for i in apemans do
1449: LD_ADDR_VAR 0 2
1453: PUSH
1454: LD_EXP 13
1458: PUSH
1459: FOR_IN
1460: IFFALSE 1523
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1462: LD_VAR 0 2
1466: PPUSH
1467: LD_VAR 0 3
1471: PUSH
1472: LD_INT 1
1474: ARRAY
1475: PPUSH
1476: CALL_OW 250
1480: PPUSH
1481: LD_VAR 0 3
1485: PUSH
1486: LD_INT 1
1488: ARRAY
1489: PPUSH
1490: CALL_OW 251
1494: PPUSH
1495: LD_INT 50
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: CALL_OW 50
// yourApemans := yourApemans ^ i ;
1505: LD_ADDR_EXP 14
1509: PUSH
1510: LD_EXP 14
1514: PUSH
1515: LD_VAR 0 2
1519: ADD
1520: ST_TO_ADDR
// end ;
1521: GO 1459
1523: POP
1524: POP
// end ; end ;
1525: LD_VAR 0 1
1529: RET
// export function LoadVehicles ; var i , j , veh , tmp , vehicles ; begin
1530: LD_INT 0
1532: PPUSH
1533: PPUSH
1534: PPUSH
1535: PPUSH
1536: PPUSH
1537: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1538: LD_ADDR_VAR 0 5
1542: PUSH
1543: LD_INT 22
1545: PUSH
1546: LD_INT 1
1548: PUSH
1549: EMPTY
1550: LIST
1551: LIST
1552: PUSH
1553: LD_INT 21
1555: PUSH
1556: LD_INT 3
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: PUSH
1563: LD_INT 30
1565: PUSH
1566: LD_INT 0
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: LIST
1577: PPUSH
1578: CALL_OW 69
1582: ST_TO_ADDR
// uc_side := 1 ;
1583: LD_ADDR_OWVAR 20
1587: PUSH
1588: LD_INT 1
1590: ST_TO_ADDR
// vehicles := LoadVariable ( vehiclesInDelta , [ ] ) ;
1591: LD_ADDR_VAR 0 6
1595: PUSH
1596: LD_STRING vehiclesInDelta
1598: PPUSH
1599: EMPTY
1600: PPUSH
1601: CALL_OW 30
1605: ST_TO_ADDR
// for i := 1 to Count ( vehicles ) div 4 do
1606: LD_ADDR_VAR 0 2
1610: PUSH
1611: DOUBLE
1612: LD_INT 1
1614: DEC
1615: ST_TO_ADDR
1616: LD_VAR 0 6
1620: PPUSH
1621: CALL 28691 0 1
1625: PUSH
1626: LD_INT 4
1628: DIV
1629: PUSH
1630: FOR_TO
1631: IFFALSE 1788
// begin uc_nation := vehicles [ 1 ] ;
1633: LD_ADDR_OWVAR 21
1637: PUSH
1638: LD_VAR 0 6
1642: PUSH
1643: LD_INT 1
1645: ARRAY
1646: ST_TO_ADDR
// vc_chassis := vehicles [ 2 ] ;
1647: LD_ADDR_OWVAR 37
1651: PUSH
1652: LD_VAR 0 6
1656: PUSH
1657: LD_INT 2
1659: ARRAY
1660: ST_TO_ADDR
// vc_engine := vehicles [ 3 ] ;
1661: LD_ADDR_OWVAR 39
1665: PUSH
1666: LD_VAR 0 6
1670: PUSH
1671: LD_INT 3
1673: ARRAY
1674: ST_TO_ADDR
// vc_control := vehicles [ 4 ] ;
1675: LD_ADDR_OWVAR 38
1679: PUSH
1680: LD_VAR 0 6
1684: PUSH
1685: LD_INT 4
1687: ARRAY
1688: ST_TO_ADDR
// vc_weapon := vehicles [ 5 ] ;
1689: LD_ADDR_OWVAR 40
1693: PUSH
1694: LD_VAR 0 6
1698: PUSH
1699: LD_INT 5
1701: ARRAY
1702: ST_TO_ADDR
// veh := CreateVehicle ;
1703: LD_ADDR_VAR 0 4
1707: PUSH
1708: CALL_OW 45
1712: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1713: LD_VAR 0 4
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: LD_INT 5
1723: PPUSH
1724: CALL_OW 12
1728: PPUSH
1729: CALL_OW 233
// PlaceUnitArea ( veh , parkingArea , false ) ;
1733: LD_VAR 0 4
1737: PPUSH
1738: LD_INT 4
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// for j := 1 to 5 do
1748: LD_ADDR_VAR 0 3
1752: PUSH
1753: DOUBLE
1754: LD_INT 1
1756: DEC
1757: ST_TO_ADDR
1758: LD_INT 5
1760: PUSH
1761: FOR_TO
1762: IFFALSE 1784
// vehicles := Delete ( vehicles , 1 ) ;
1764: LD_ADDR_VAR 0 6
1768: PUSH
1769: LD_VAR 0 6
1773: PPUSH
1774: LD_INT 1
1776: PPUSH
1777: CALL_OW 3
1781: ST_TO_ADDR
1782: GO 1761
1784: POP
1785: POP
// end ;
1786: GO 1630
1788: POP
1789: POP
// end ;
1790: LD_VAR 0 1
1794: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1795: LD_INT 0
1797: PPUSH
1798: PPUSH
1799: PPUSH
1800: PPUSH
1801: PPUSH
// uc_side := 1 ;
1802: LD_ADDR_OWVAR 20
1806: PUSH
1807: LD_INT 1
1809: ST_TO_ADDR
// uc_nation := 1 ;
1810: LD_ADDR_OWVAR 21
1814: PUSH
1815: LD_INT 1
1817: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1818: LD_ADDR_VAR 0 4
1822: PUSH
1823: LD_INT 22
1825: PUSH
1826: LD_INT 1
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: LD_INT 21
1835: PUSH
1836: LD_INT 3
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 30
1845: PUSH
1846: LD_INT 0
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: PPUSH
1858: CALL_OW 69
1862: ST_TO_ADDR
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_nation , nation_american ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) ;
1863: LD_ADDR_EXP 16
1867: PUSH
1868: LD_INT 22
1870: PUSH
1871: LD_INT 1
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: LD_INT 23
1880: PUSH
1881: LD_INT 1
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PUSH
1888: LD_INT 25
1890: PUSH
1891: LD_INT 4
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PUSH
1898: LD_INT 26
1900: PUSH
1901: LD_INT 1
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: LIST
1912: LIST
1913: PUSH
1914: EMPTY
1915: LIST
1916: PPUSH
1917: CALL_OW 69
1921: PUSH
1922: LD_EXP 1
1926: PUSH
1927: LD_EXP 7
1931: PUSH
1932: LD_EXP 6
1936: PUSH
1937: LD_EXP 5
1941: PUSH
1942: LD_EXP 2
1946: PUSH
1947: LD_EXP 3
1951: PUSH
1952: LD_EXP 8
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: DIFF
1966: ST_TO_ADDR
// if not deltaDoctor then
1967: LD_EXP 16
1971: NOT
1972: IFFALSE 2134
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_nation , nation_american ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
1974: LD_ADDR_VAR 0 5
1978: PUSH
1979: LD_INT 22
1981: PUSH
1982: LD_INT 1
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: PUSH
1989: LD_INT 23
1991: PUSH
1992: LD_INT 1
1994: PUSH
1995: EMPTY
1996: LIST
1997: LIST
1998: PUSH
1999: LD_INT 26
2001: PUSH
2002: LD_INT 1
2004: PUSH
2005: EMPTY
2006: LIST
2007: LIST
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: LIST
2013: PUSH
2014: EMPTY
2015: LIST
2016: PPUSH
2017: CALL_OW 69
2021: PUSH
2022: LD_EXP 1
2026: PUSH
2027: LD_EXP 7
2031: PUSH
2032: LD_EXP 6
2036: PUSH
2037: LD_EXP 5
2041: PUSH
2042: LD_EXP 2
2046: PUSH
2047: LD_EXP 3
2051: PUSH
2052: LD_EXP 8
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: DIFF
2066: ST_TO_ADDR
// if filter then
2067: LD_VAR 0 5
2071: IFFALSE 2132
// for i in filter do
2073: LD_ADDR_VAR 0 2
2077: PUSH
2078: LD_VAR 0 5
2082: PUSH
2083: FOR_IN
2084: IFFALSE 2130
// if GetSkill ( i , 4 ) >= 4 then
2086: LD_VAR 0 2
2090: PPUSH
2091: LD_INT 4
2093: PPUSH
2094: CALL_OW 259
2098: PUSH
2099: LD_INT 4
2101: GREATEREQUAL
2102: IFFALSE 2128
// begin deltaDoctor := i ;
2104: LD_ADDR_EXP 16
2108: PUSH
2109: LD_VAR 0 2
2113: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
2114: LD_EXP 16
2118: PPUSH
2119: LD_INT 4
2121: PPUSH
2122: CALL_OW 336
// break ;
2126: GO 2130
// end ;
2128: GO 2083
2130: POP
2131: POP
// end else
2132: GO 2148
// deltaDoctor := deltaDoctor [ 1 ] ;
2134: LD_ADDR_EXP 16
2138: PUSH
2139: LD_EXP 16
2143: PUSH
2144: LD_INT 1
2146: ARRAY
2147: ST_TO_ADDR
// for i := 1 to 7 do
2148: LD_ADDR_VAR 0 2
2152: PUSH
2153: DOUBLE
2154: LD_INT 1
2156: DEC
2157: ST_TO_ADDR
2158: LD_INT 7
2160: PUSH
2161: FOR_TO
2162: IFFALSE 2299
// begin hc_gallery :=  ;
2164: LD_ADDR_OWVAR 33
2168: PUSH
2169: LD_STRING 
2171: ST_TO_ADDR
// hc_name :=  ;
2172: LD_ADDR_OWVAR 26
2176: PUSH
2177: LD_STRING 
2179: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) ) ;
2180: LD_INT 0
2182: PPUSH
2183: LD_INT 1
2185: PUSH
2186: LD_INT 2
2188: PUSH
2189: LD_INT 3
2191: PUSH
2192: LD_INT 4
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 1
2203: PPUSH
2204: LD_INT 4
2206: PPUSH
2207: CALL_OW 12
2211: ARRAY
2212: PPUSH
2213: LD_INT 3
2215: PPUSH
2216: LD_INT 5
2218: PPUSH
2219: CALL_OW 12
2223: PPUSH
2224: CALL_OW 380
// un := CreateHuman ;
2228: LD_ADDR_VAR 0 3
2232: PUSH
2233: CALL_OW 44
2237: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2238: LD_ADDR_EXP 12
2242: PUSH
2243: LD_EXP 12
2247: PUSH
2248: LD_VAR 0 3
2252: ADD
2253: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2254: LD_VAR 0 3
2258: PPUSH
2259: LD_VAR 0 4
2263: PUSH
2264: LD_INT 1
2266: ARRAY
2267: PPUSH
2268: CALL_OW 250
2272: PPUSH
2273: LD_VAR 0 4
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: PPUSH
2282: CALL_OW 251
2286: PPUSH
2287: LD_INT 15
2289: PPUSH
2290: LD_INT 0
2292: PPUSH
2293: CALL_OW 50
// end ;
2297: GO 2161
2299: POP
2300: POP
// if deltaDoctor then
2301: LD_EXP 16
2305: IFFALSE 2309
// exit ;
2307: GO 2406
// hc_gallery := Dawkins ;
2309: LD_ADDR_OWVAR 33
2313: PUSH
2314: LD_STRING Dawkins
2316: ST_TO_ADDR
// hc_face_number := 1 ;
2317: LD_ADDR_OWVAR 34
2321: PUSH
2322: LD_INT 1
2324: ST_TO_ADDR
// hc_name := Dr. Adam Charles Dawkins ;
2325: LD_ADDR_OWVAR 26
2329: PUSH
2330: LD_STRING Dr. Adam Charles Dawkins
2332: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 5 ) ;
2333: LD_INT 1
2335: PPUSH
2336: LD_INT 4
2338: PPUSH
2339: LD_INT 5
2341: PPUSH
2342: CALL_OW 380
// deltaDoctor := CreateHuman ;
2346: LD_ADDR_EXP 16
2350: PUSH
2351: CALL_OW 44
2355: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2356: LD_EXP 16
2360: PPUSH
2361: LD_VAR 0 4
2365: PUSH
2366: LD_INT 1
2368: ARRAY
2369: PPUSH
2370: CALL_OW 250
2374: PPUSH
2375: LD_VAR 0 4
2379: PUSH
2380: LD_INT 1
2382: ARRAY
2383: PPUSH
2384: CALL_OW 251
2388: PPUSH
2389: LD_INT 5
2391: PPUSH
2392: LD_INT 0
2394: PPUSH
2395: CALL_OW 50
// ToLua ( enableBioCharacter(BIO_ADAM) ) ;
2399: LD_STRING enableBioCharacter(BIO_ADAM)
2401: PPUSH
2402: CALL_OW 559
// end ; end_of_file
2406: LD_VAR 0 1
2410: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2411: LD_INT 0
2413: PPUSH
2414: PPUSH
2415: PPUSH
2416: PPUSH
2417: PPUSH
2418: PPUSH
2419: PPUSH
// buildings := LoadVariable ( buildingsInDelta , [ ] ) ;
2420: LD_ADDR_VAR 0 5
2424: PUSH
2425: LD_STRING buildingsInDelta
2427: PPUSH
2428: EMPTY
2429: PPUSH
2430: CALL_OW 30
2434: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2435: LD_INT 68
2437: PPUSH
2438: LD_INT 40
2440: PPUSH
2441: LD_INT 1
2443: PPUSH
2444: CALL_OW 441
// uc_side := 1 ;
2448: LD_ADDR_OWVAR 20
2452: PUSH
2453: LD_INT 1
2455: ST_TO_ADDR
// uc_nation := 1 ;
2456: LD_ADDR_OWVAR 21
2460: PUSH
2461: LD_INT 1
2463: ST_TO_ADDR
// for i := 1 to buildings do
2464: LD_ADDR_VAR 0 2
2468: PUSH
2469: DOUBLE
2470: LD_INT 1
2472: DEC
2473: ST_TO_ADDR
2474: LD_VAR 0 5
2478: PUSH
2479: FOR_TO
2480: IFFALSE 2781
// begin InitBc ;
2482: CALL_OW 21
// bc_type := buildings [ i ] [ 1 ] ;
2486: LD_ADDR_OWVAR 42
2490: PUSH
2491: LD_VAR 0 5
2495: PUSH
2496: LD_VAR 0 2
2500: ARRAY
2501: PUSH
2502: LD_INT 1
2504: ARRAY
2505: ST_TO_ADDR
// bc_level := buildings [ i ] [ 2 ] ;
2506: LD_ADDR_OWVAR 43
2510: PUSH
2511: LD_VAR 0 5
2515: PUSH
2516: LD_VAR 0 2
2520: ARRAY
2521: PUSH
2522: LD_INT 2
2524: ARRAY
2525: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half , b_lab_full ] then
2526: LD_OWVAR 42
2530: PUSH
2531: LD_INT 6
2533: PUSH
2534: LD_INT 7
2536: PUSH
2537: LD_INT 8
2539: PUSH
2540: EMPTY
2541: LIST
2542: LIST
2543: LIST
2544: IN
2545: IFFALSE 2669
// begin bc_kind1 := b_lab_basic ;
2547: LD_ADDR_OWVAR 44
2551: PUSH
2552: LD_INT 9
2554: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2555: LD_ADDR_OWVAR 45
2559: PUSH
2560: LD_INT 9
2562: ST_TO_ADDR
// if buildings [ i ] [ 6 ] then
2563: LD_VAR 0 5
2567: PUSH
2568: LD_VAR 0 2
2572: ARRAY
2573: PUSH
2574: LD_INT 6
2576: ARRAY
2577: IFFALSE 2645
// begin bc_kind1 := buildings [ i ] [ 6 ] ;
2579: LD_ADDR_OWVAR 44
2583: PUSH
2584: LD_VAR 0 5
2588: PUSH
2589: LD_VAR 0 2
2593: ARRAY
2594: PUSH
2595: LD_INT 6
2597: ARRAY
2598: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2599: LD_ADDR_OWVAR 45
2603: PUSH
2604: LD_INT 9
2606: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2607: LD_VAR 0 5
2611: PUSH
2612: LD_VAR 0 2
2616: ARRAY
2617: PUSH
2618: LD_INT 7
2620: ARRAY
2621: IFFALSE 2643
// bc_kind2 := buildings [ i ] [ 7 ] ;
2623: LD_ADDR_OWVAR 45
2627: PUSH
2628: LD_VAR 0 5
2632: PUSH
2633: LD_VAR 0 2
2637: ARRAY
2638: PUSH
2639: LD_INT 7
2641: ARRAY
2642: ST_TO_ADDR
// end else
2643: GO 2669
// begin bc_type := b_lab ;
2645: LD_ADDR_OWVAR 42
2649: PUSH
2650: LD_INT 6
2652: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
2653: LD_ADDR_OWVAR 44
2657: PUSH
2658: LD_INT 9
2660: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2661: LD_ADDR_OWVAR 45
2665: PUSH
2666: LD_INT 9
2668: ST_TO_ADDR
// end ; end ; building := CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2669: LD_ADDR_VAR 0 4
2673: PUSH
2674: LD_VAR 0 5
2678: PUSH
2679: LD_VAR 0 2
2683: ARRAY
2684: PUSH
2685: LD_INT 3
2687: ARRAY
2688: PPUSH
2689: LD_VAR 0 5
2693: PUSH
2694: LD_VAR 0 2
2698: ARRAY
2699: PUSH
2700: LD_INT 4
2702: ARRAY
2703: PPUSH
2704: LD_VAR 0 5
2708: PUSH
2709: LD_VAR 0 2
2713: ARRAY
2714: PUSH
2715: LD_INT 5
2717: ARRAY
2718: PPUSH
2719: CALL_OW 47
2723: ST_TO_ADDR
// if GetBType ( building ) = b_bunker and buildings [ i ] [ 8 ] then
2724: LD_VAR 0 4
2728: PPUSH
2729: CALL_OW 266
2733: PUSH
2734: LD_INT 32
2736: EQUAL
2737: PUSH
2738: LD_VAR 0 5
2742: PUSH
2743: LD_VAR 0 2
2747: ARRAY
2748: PUSH
2749: LD_INT 8
2751: ARRAY
2752: AND
2753: IFFALSE 2779
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2755: LD_VAR 0 4
2759: PPUSH
2760: LD_VAR 0 5
2764: PUSH
2765: LD_VAR 0 2
2769: ARRAY
2770: PUSH
2771: LD_INT 8
2773: ARRAY
2774: PPUSH
2775: CALL_OW 431
// end ;
2779: GO 2479
2781: POP
2782: POP
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2783: LD_ADDR_VAR 0 6
2787: PUSH
2788: LD_INT 22
2790: PUSH
2791: LD_INT 1
2793: PUSH
2794: EMPTY
2795: LIST
2796: LIST
2797: PUSH
2798: LD_INT 2
2800: PUSH
2801: LD_INT 30
2803: PUSH
2804: LD_INT 6
2806: PUSH
2807: EMPTY
2808: LIST
2809: LIST
2810: PUSH
2811: LD_INT 30
2813: PUSH
2814: LD_INT 7
2816: PUSH
2817: EMPTY
2818: LIST
2819: LIST
2820: PUSH
2821: LD_INT 30
2823: PUSH
2824: LD_INT 8
2826: PUSH
2827: EMPTY
2828: LIST
2829: LIST
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PPUSH
2841: CALL_OW 69
2845: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2846: LD_ADDR_VAR 0 7
2850: PUSH
2851: LD_INT 22
2853: PUSH
2854: LD_INT 1
2856: PUSH
2857: EMPTY
2858: LIST
2859: LIST
2860: PUSH
2861: LD_INT 30
2863: PUSH
2864: LD_INT 0
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: PUSH
2871: EMPTY
2872: LIST
2873: LIST
2874: PPUSH
2875: CALL_OW 69
2879: ST_TO_ADDR
// if lab and tmp then
2880: LD_VAR 0 6
2884: PUSH
2885: LD_VAR 0 7
2889: AND
2890: IFFALSE 2900
// baseCorrect := 1 ;
2892: LD_ADDR_EXP 19
2896: PUSH
2897: LD_INT 1
2899: ST_TO_ADDR
// if not baseCorrect then
2900: LD_EXP 19
2904: NOT
2905: IFFALSE 3320
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2907: LD_ADDR_VAR 0 2
2911: PUSH
2912: LD_INT 22
2914: PUSH
2915: LD_INT 1
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: PUSH
2922: LD_INT 21
2924: PUSH
2925: LD_INT 3
2927: PUSH
2928: EMPTY
2929: LIST
2930: LIST
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: PPUSH
2936: CALL_OW 69
2940: PUSH
2941: FOR_IN
2942: IFFALSE 2955
// RemoveUnit ( i ) ;
2944: LD_VAR 0 2
2948: PPUSH
2949: CALL_OW 64
2953: GO 2941
2955: POP
2956: POP
// uc_nation := 1 ;
2957: LD_ADDR_OWVAR 21
2961: PUSH
2962: LD_INT 1
2964: ST_TO_ADDR
// uc_side := 1 ;
2965: LD_ADDR_OWVAR 20
2969: PUSH
2970: LD_INT 1
2972: ST_TO_ADDR
// bc_level := 5 ;
2973: LD_ADDR_OWVAR 43
2977: PUSH
2978: LD_INT 5
2980: ST_TO_ADDR
// bc_type := b_depot ;
2981: LD_ADDR_OWVAR 42
2985: PUSH
2986: LD_INT 0
2988: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2989: LD_INT 50
2991: PPUSH
2992: LD_INT 22
2994: PPUSH
2995: LD_INT 0
2997: PPUSH
2998: CALL_OW 47
// bc_type = b_bunker ;
3002: LD_ADDR_OWVAR 42
3006: PUSH
3007: LD_INT 32
3009: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
3010: LD_ADDR_VAR 0 4
3014: PUSH
3015: LD_INT 68
3017: PPUSH
3018: LD_INT 24
3020: PPUSH
3021: LD_INT 4
3023: PPUSH
3024: CALL_OW 47
3028: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
3029: LD_VAR 0 4
3033: PPUSH
3034: LD_INT 4
3036: PUSH
3037: LD_INT 11
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: PUSH
3044: LD_INT 1
3046: PPUSH
3047: LD_INT 2
3049: PPUSH
3050: CALL_OW 12
3054: ARRAY
3055: PPUSH
3056: CALL_OW 431
// building := CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
3060: LD_ADDR_VAR 0 4
3064: PUSH
3065: LD_INT 71
3067: PPUSH
3068: LD_INT 34
3070: PPUSH
3071: LD_INT 4
3073: PPUSH
3074: CALL_OW 47
3078: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ rand ( 1 , 2 ) ] ) ;
3079: LD_VAR 0 4
3083: PPUSH
3084: LD_INT 4
3086: PUSH
3087: LD_INT 11
3089: PUSH
3090: EMPTY
3091: LIST
3092: LIST
3093: PUSH
3094: LD_INT 1
3096: PPUSH
3097: LD_INT 2
3099: PPUSH
3100: CALL_OW 12
3104: ARRAY
3105: PPUSH
3106: CALL_OW 431
// bc_type := b_breastwork ;
3110: LD_ADDR_OWVAR 42
3114: PUSH
3115: LD_INT 31
3117: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
3118: LD_INT 51
3120: PPUSH
3121: LD_INT 7
3123: PPUSH
3124: LD_INT 3
3126: PPUSH
3127: CALL_OW 47
// bc_type := b_oil_mine ;
3131: LD_ADDR_OWVAR 42
3135: PUSH
3136: LD_INT 29
3138: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
3139: LD_INT 68
3141: PPUSH
3142: LD_INT 40
3144: PPUSH
3145: LD_INT 1
3147: PPUSH
3148: CALL_OW 47
// bc_type := b_factory ;
3152: LD_ADDR_OWVAR 42
3156: PUSH
3157: LD_INT 3
3159: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3160: LD_INT 38
3162: PPUSH
3163: LD_INT 20
3165: PPUSH
3166: LD_INT 2
3168: PPUSH
3169: CALL_OW 47
// bc_type := b_ext_noncombat ;
3173: LD_ADDR_OWVAR 42
3177: PUSH
3178: LD_INT 19
3180: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 24 , 2 ) ;
3181: LD_INT 38
3183: PPUSH
3184: LD_INT 24
3186: PPUSH
3187: LD_INT 2
3189: PPUSH
3190: CALL_OW 47
// bc_type := b_ext_radar ;
3194: LD_ADDR_OWVAR 42
3198: PUSH
3199: LD_INT 20
3201: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 35 , 20 , 1 ) ;
3202: LD_INT 35
3204: PPUSH
3205: LD_INT 20
3207: PPUSH
3208: LD_INT 1
3210: PPUSH
3211: CALL_OW 47
// bc_type := b_armoury ;
3215: LD_ADDR_OWVAR 42
3219: PUSH
3220: LD_INT 4
3222: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 33 , 28 , 1 ) ;
3223: LD_INT 33
3225: PPUSH
3226: LD_INT 28
3228: PPUSH
3229: LD_INT 1
3231: PPUSH
3232: CALL_OW 47
// bc_type := b_solar_power ;
3236: LD_ADDR_OWVAR 42
3240: PUSH
3241: LD_INT 27
3243: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3244: LD_INT 46
3246: PPUSH
3247: LD_INT 12
3249: PPUSH
3250: LD_INT 1
3252: PPUSH
3253: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3257: LD_INT 48
3259: PPUSH
3260: LD_INT 11
3262: PPUSH
3263: LD_INT 2
3265: PPUSH
3266: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 35 , 12 , 3 ) ;
3270: LD_INT 35
3272: PPUSH
3273: LD_INT 12
3275: PPUSH
3276: LD_INT 3
3278: PPUSH
3279: CALL_OW 47
// bc_type := b_lab_half ;
3283: LD_ADDR_OWVAR 42
3287: PUSH
3288: LD_INT 7
3290: ST_TO_ADDR
// bc_kind1 := b_lab_opto ;
3291: LD_ADDR_OWVAR 44
3295: PUSH
3296: LD_INT 15
3298: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
3299: LD_ADDR_OWVAR 45
3303: PUSH
3304: LD_INT 9
3306: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3307: LD_INT 42
3309: PPUSH
3310: LD_INT 15
3312: PPUSH
3313: LD_INT 2
3315: PPUSH
3316: CALL_OW 47
// end ; end ; end_of_file
3320: LD_VAR 0 1
3324: RET
// export function Action ; var i , j , tmp ; begin
3325: LD_INT 0
3327: PPUSH
3328: PPUSH
3329: PPUSH
3330: PPUSH
// InGameOn ;
3331: CALL_OW 8
// if lab then
3335: LD_EXP 21
3339: IFFALSE 3356
// CenterNowOnUnits ( lab [ 1 ] ) else
3341: LD_EXP 21
3345: PUSH
3346: LD_INT 1
3348: ARRAY
3349: PPUSH
3350: CALL_OW 87
3354: GO 3365
// CenterOnUnits ( JMM ) ;
3356: LD_EXP 1
3360: PPUSH
3361: CALL_OW 85
// if IsOK ( Denis ) then
3365: LD_EXP 3
3369: PPUSH
3370: CALL_OW 302
3374: IFFALSE 3402
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3376: LD_INT 6
3378: PPUSH
3379: LD_INT 1
3381: PPUSH
3382: LD_INT 2
3384: PPUSH
3385: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3389: LD_INT 20
3391: PPUSH
3392: LD_INT 1
3394: PPUSH
3395: LD_INT 1
3397: PPUSH
3398: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3402: LD_EXP 1
3406: PPUSH
3407: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3411: LD_EXP 1
3415: PPUSH
3416: LD_EXP 16
3420: PPUSH
3421: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3425: LD_INT 35
3427: PPUSH
3428: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3432: LD_EXP 16
3436: PPUSH
3437: LD_EXP 1
3441: PPUSH
3442: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3446: LD_EXP 1
3450: PPUSH
3451: LD_EXP 16
3455: PPUSH
3456: CALL_OW 296
3460: PUSH
3461: LD_INT 5
3463: LESS
3464: IFFALSE 3425
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3466: LD_EXP 16
3470: PPUSH
3471: LD_EXP 1
3475: PPUSH
3476: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3480: LD_EXP 1
3484: PPUSH
3485: LD_STRING D1-JMM-1
3487: PPUSH
3488: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3492: LD_EXP 16
3496: PPUSH
3497: LD_STRING D1-Sci-1
3499: PPUSH
3500: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3504: LD_EXP 1
3508: PUSH
3509: LD_EXP 16
3513: PUSH
3514: LD_EXP 3
3518: PUSH
3519: EMPTY
3520: LIST
3521: LIST
3522: LIST
3523: PPUSH
3524: LD_EXP 21
3528: PUSH
3529: LD_INT 1
3531: ARRAY
3532: PPUSH
3533: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
3537: LD_INT 35
3539: PPUSH
3540: CALL_OW 67
// until IsInUnit ( JMM ) and IsInUnit ( DeltaDoctor ) ;
3544: LD_EXP 1
3548: PPUSH
3549: CALL_OW 310
3553: PUSH
3554: LD_EXP 16
3558: PPUSH
3559: CALL_OW 310
3563: AND
3564: IFFALSE 3537
// CenterNowOnUnits ( lab [ 1 ] ) ;
3566: LD_EXP 21
3570: PUSH
3571: LD_INT 1
3573: ARRAY
3574: PPUSH
3575: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3579: LD_EXP 1
3583: PPUSH
3584: LD_STRING D1-JMM-2
3586: PPUSH
3587: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3591: LD_EXP 16
3595: PPUSH
3596: LD_STRING D1-Sci-2
3598: PPUSH
3599: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3603: LD_EXP 1
3607: PPUSH
3608: LD_STRING D1-JMM-3
3610: PPUSH
3611: CALL_OW 88
// if IsOK ( Denis ) then
3615: LD_EXP 3
3619: PPUSH
3620: CALL_OW 302
3624: IFFALSE 3640
// Say ( DeltaDoctor , D1-Sci-3 ) else
3626: LD_EXP 16
3630: PPUSH
3631: LD_STRING D1-Sci-3
3633: PPUSH
3634: CALL_OW 88
3638: GO 3652
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3640: LD_EXP 16
3644: PPUSH
3645: LD_STRING D1-Sci-3a
3647: PPUSH
3648: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3652: LD_EXP 1
3656: PPUSH
3657: LD_STRING D1-JMM-4
3659: PPUSH
3660: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3664: LD_ADDR_VAR 0 4
3668: PUSH
3669: LD_INT 22
3671: PUSH
3672: LD_INT 1
3674: PUSH
3675: EMPTY
3676: LIST
3677: LIST
3678: PUSH
3679: LD_INT 25
3681: PUSH
3682: LD_INT 4
3684: PUSH
3685: EMPTY
3686: LIST
3687: LIST
3688: PUSH
3689: LD_INT 3
3691: PUSH
3692: LD_INT 54
3694: PUSH
3695: EMPTY
3696: LIST
3697: PUSH
3698: EMPTY
3699: LIST
3700: LIST
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: LIST
3706: PPUSH
3707: CALL_OW 69
3711: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3712: LD_ADDR_VAR 0 2
3716: PUSH
3717: LD_INT 22
3719: PUSH
3720: LD_INT 0
3722: PUSH
3723: EMPTY
3724: LIST
3725: LIST
3726: PPUSH
3727: CALL_OW 69
3731: PUSH
3732: FOR_IN
3733: IFFALSE 3783
// for j in tmp do
3735: LD_ADDR_VAR 0 3
3739: PUSH
3740: LD_VAR 0 4
3744: PUSH
3745: FOR_IN
3746: IFFALSE 3779
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3748: LD_VAR 0 3
3752: PPUSH
3753: LD_VAR 0 2
3757: PPUSH
3758: CALL_OW 250
3762: PPUSH
3763: LD_VAR 0 2
3767: PPUSH
3768: CALL_OW 251
3772: PPUSH
3773: CALL_OW 191
3777: GO 3745
3779: POP
3780: POP
3781: GO 3732
3783: POP
3784: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3785: LD_EXP 16
3789: PPUSH
3790: LD_STRING D1-Sci-4
3792: PPUSH
3793: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3797: LD_EXP 1
3801: PPUSH
3802: LD_STRING D1-JMM-5
3804: PPUSH
3805: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3809: LD_EXP 16
3813: PPUSH
3814: LD_STRING D1-Sci-5
3816: PPUSH
3817: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3821: LD_EXP 1
3825: PPUSH
3826: LD_STRING D1-JMM-6
3828: PPUSH
3829: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3833: LD_EXP 17
3837: PPUSH
3838: LD_STRING D1-Har-6
3840: PPUSH
3841: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3845: LD_EXP 1
3849: PPUSH
3850: LD_STRING D1-JMM-7
3852: PPUSH
3853: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3857: LD_EXP 17
3861: PPUSH
3862: LD_STRING D1-Har-7
3864: PPUSH
3865: CALL_OW 94
// if IsOK ( Denis ) then
3869: LD_EXP 3
3873: PPUSH
3874: CALL_OW 302
3878: IFFALSE 3892
// Say ( JMM , D1-JMM-8 ) ;
3880: LD_EXP 1
3884: PPUSH
3885: LD_STRING D1-JMM-8
3887: PPUSH
3888: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3892: LD_EXP 1
3896: PPUSH
3897: LD_STRING D1-JMM-8a
3899: PPUSH
3900: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3904: LD_EXP 17
3908: PPUSH
3909: LD_STRING D1-Har-8
3911: PPUSH
3912: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3916: LD_EXP 1
3920: PPUSH
3921: LD_STRING D1-JMM-9
3923: PPUSH
3924: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3928: LD_EXP 17
3932: PPUSH
3933: LD_STRING D1-Har-9
3935: PPUSH
3936: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3940: LD_EXP 1
3944: PPUSH
3945: LD_STRING D1-JMM-10
3947: PPUSH
3948: CALL_OW 88
// if IsOK ( Denis ) then
3952: LD_EXP 3
3956: PPUSH
3957: CALL_OW 302
3961: IFFALSE 3975
// Say ( JMM , D1-JMM-10a ) ;
3963: LD_EXP 1
3967: PPUSH
3968: LD_STRING D1-JMM-10a
3970: PPUSH
3971: CALL_OW 88
// SelectDeltaCharacters ;
3975: CALL 4459 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 150 ) ;
3979: LD_EXP 21
3983: PUSH
3984: LD_INT 1
3986: ARRAY
3987: PPUSH
3988: CALL_OW 274
3992: PPUSH
3993: LD_INT 1
3995: PPUSH
3996: LD_INT 150
3998: PPUSH
3999: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) then
4003: LD_INT 22
4005: PUSH
4006: LD_INT 1
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: PUSH
4013: LD_INT 30
4015: PUSH
4016: LD_INT 29
4018: PUSH
4019: EMPTY
4020: LIST
4021: LIST
4022: PUSH
4023: EMPTY
4024: LIST
4025: LIST
4026: PPUSH
4027: CALL_OW 69
4031: IFFALSE 4057
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
4033: LD_EXP 21
4037: PUSH
4038: LD_INT 1
4040: ARRAY
4041: PPUSH
4042: CALL_OW 274
4046: PPUSH
4047: LD_INT 2
4049: PPUSH
4050: LD_INT 300
4052: PPUSH
4053: CALL_OW 277
// InGameOff ;
4057: CALL_OW 9
// Query ( Q1 ) ;
4061: LD_STRING Q1
4063: PPUSH
4064: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
4068: LD_INT 3
4070: PPUSH
4071: LD_INT 1
4073: PPUSH
4074: CALL_OW 424
// if IsInUnit ( JMM ) then
4078: LD_EXP 1
4082: PPUSH
4083: CALL_OW 310
4087: IFFALSE 4098
// ComExitBuilding ( JMM ) ;
4089: LD_EXP 1
4093: PPUSH
4094: CALL_OW 122
// end ;
4098: LD_VAR 0 1
4102: RET
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
4103: LD_INT 3
4105: PPUSH
4106: LD_INT 22
4108: PUSH
4109: LD_INT 1
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PUSH
4116: LD_INT 21
4118: PUSH
4119: LD_INT 1
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: PPUSH
4130: CALL_OW 71
4134: PUSH
4135: LD_INT 0
4137: EQUAL
4138: IFFALSE 4456
4140: GO 4142
4142: DISABLE
4143: LD_INT 0
4145: PPUSH
4146: PPUSH
// begin SaveDeltaCharacters ;
4147: CALL 4831 0 0
// if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) then
4151: LD_INT 3
4153: PPUSH
4154: LD_INT 21
4156: PUSH
4157: LD_INT 2
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: PUSH
4164: LD_INT 3
4166: PUSH
4167: LD_INT 58
4169: PUSH
4170: EMPTY
4171: LIST
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: PUSH
4177: EMPTY
4178: LIST
4179: LIST
4180: PPUSH
4181: CALL_OW 70
4185: IFFALSE 4442
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
4187: LD_ADDR_VAR 0 1
4191: PUSH
4192: LD_INT 3
4194: PPUSH
4195: LD_INT 21
4197: PUSH
4198: LD_INT 2
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: PUSH
4205: LD_INT 3
4207: PUSH
4208: LD_INT 58
4210: PUSH
4211: EMPTY
4212: LIST
4213: PUSH
4214: EMPTY
4215: LIST
4216: LIST
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: PPUSH
4222: CALL_OW 70
4226: PUSH
4227: FOR_IN
4228: IFFALSE 4440
// begin cargoType := GetCargoType ( i ) ;
4230: LD_ADDR_VAR 0 2
4234: PUSH
4235: LD_VAR 0 1
4239: PPUSH
4240: CALL_OW 288
4244: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4245: LD_VAR 0 1
4249: PPUSH
4250: CALL_OW 264
4254: PUSH
4255: LD_INT 12
4257: EQUAL
4258: IFFALSE 4355
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] else
4260: LD_ADDR_EXP 15
4264: PUSH
4265: LD_EXP 15
4269: PUSH
4270: LD_VAR 0 1
4274: PPUSH
4275: CALL_OW 248
4279: PUSH
4280: LD_VAR 0 1
4284: PPUSH
4285: CALL_OW 265
4289: PUSH
4290: LD_VAR 0 1
4294: PPUSH
4295: CALL_OW 262
4299: PUSH
4300: LD_VAR 0 1
4304: PPUSH
4305: CALL_OW 263
4309: PUSH
4310: LD_VAR 0 1
4314: PPUSH
4315: CALL_OW 264
4319: PUSH
4320: LD_VAR 0 2
4324: PUSH
4325: LD_VAR 0 1
4329: PPUSH
4330: LD_VAR 0 2
4334: PPUSH
4335: CALL_OW 289
4339: PUSH
4340: EMPTY
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: PUSH
4349: EMPTY
4350: LIST
4351: ADD
4352: ST_TO_ADDR
4353: GO 4426
// yourVehicles := yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4355: LD_ADDR_EXP 15
4359: PUSH
4360: LD_EXP 15
4364: PUSH
4365: LD_VAR 0 1
4369: PPUSH
4370: CALL_OW 248
4374: PUSH
4375: LD_VAR 0 1
4379: PPUSH
4380: CALL_OW 265
4384: PUSH
4385: LD_VAR 0 1
4389: PPUSH
4390: CALL_OW 262
4394: PUSH
4395: LD_VAR 0 1
4399: PPUSH
4400: CALL_OW 263
4404: PUSH
4405: LD_VAR 0 1
4409: PPUSH
4410: CALL_OW 264
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: PUSH
4422: EMPTY
4423: LIST
4424: ADD
4425: ST_TO_ADDR
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4426: LD_EXP 15
4430: PPUSH
4431: LD_STRING 06_VehiclesIn06_1
4433: PPUSH
4434: CALL_OW 39
// end ;
4438: GO 4227
4440: POP
4441: POP
// end ; SaveCargos ;
4442: CALL 5611 0 0
// ChangeMap ( 6 , %_cont ) ;
4446: LD_INT 6
4448: PPUSH
4449: LD_STRING %_cont
4451: PPUSH
4452: CALL_OW 340
// end ; end_of_file
4456: PPOPN 2
4458: END
// export function SelectDeltaCharacters ; var i , yourPeople ; begin
4459: LD_INT 0
4461: PPUSH
4462: PPUSH
4463: PPUSH
// selectedPeople := [ ] ;
4464: LD_ADDR_EXP 18
4468: PUSH
4469: EMPTY
4470: ST_TO_ADDR
// yourPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4471: LD_ADDR_VAR 0 3
4475: PUSH
4476: LD_INT 22
4478: PUSH
4479: LD_INT 1
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: LD_INT 21
4488: PUSH
4489: LD_INT 1
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 2
4498: PUSH
4499: LD_INT 25
4501: PUSH
4502: LD_INT 1
4504: PUSH
4505: EMPTY
4506: LIST
4507: LIST
4508: PUSH
4509: LD_INT 25
4511: PUSH
4512: LD_INT 2
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: PUSH
4519: LD_INT 25
4521: PUSH
4522: LD_INT 3
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: PUSH
4529: LD_INT 25
4531: PUSH
4532: LD_INT 4
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: PUSH
4546: EMPTY
4547: LIST
4548: LIST
4549: LIST
4550: PPUSH
4551: CALL_OW 69
4555: PUSH
4556: LD_EXP 1
4560: PUSH
4561: LD_EXP 16
4565: PUSH
4566: LD_EXP 3
4570: PUSH
4571: EMPTY
4572: LIST
4573: LIST
4574: LIST
4575: DIFF
4576: ST_TO_ADDR
// selectedPeople := CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4577: LD_ADDR_EXP 18
4581: PUSH
4582: LD_STRING text
4584: PPUSH
4585: LD_INT 5
4587: PPUSH
4588: LD_INT 5
4590: PPUSH
4591: LD_INT -5
4593: PUSH
4594: LD_EXP 1
4598: PUSH
4599: LD_INT -6
4601: PUSH
4602: LD_INT -2
4604: PUSH
4605: LD_INT -3
4607: PUSH
4608: LD_INT -5
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: PUSH
4619: LD_VAR 0 3
4623: ADD
4624: PUSH
4625: LD_INT -6
4627: PUSH
4628: LD_INT -4
4630: PUSH
4631: LD_EXP 3
4635: PUSH
4636: LD_EXP 16
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: ADD
4647: PPUSH
4648: LD_INT 1
4650: PUSH
4651: LD_INT 3
4653: PUSH
4654: LD_INT 2
4656: PUSH
4657: LD_INT 1
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: PUSH
4664: LD_INT 4
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: PPUSH
4673: CALL_OW 42
4677: ST_TO_ADDR
// ComStop ( selectedPeople ) ;
4678: LD_EXP 18
4682: PPUSH
4683: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4687: LD_INT 22
4689: PUSH
4690: LD_INT 1
4692: PUSH
4693: EMPTY
4694: LIST
4695: LIST
4696: PUSH
4697: LD_INT 21
4699: PUSH
4700: LD_INT 1
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: PUSH
4707: EMPTY
4708: LIST
4709: LIST
4710: PPUSH
4711: CALL_OW 69
4715: PPUSH
4716: LD_INT 4
4718: PPUSH
4719: CALL_OW 235
// for i in selectedPeople do
4723: LD_ADDR_VAR 0 2
4727: PUSH
4728: LD_EXP 18
4732: PUSH
4733: FOR_IN
4734: IFFALSE 4750
// SetSide ( i , 1 ) ;
4736: LD_VAR 0 2
4740: PPUSH
4741: LD_INT 1
4743: PPUSH
4744: CALL_OW 235
4748: GO 4733
4750: POP
4751: POP
// for i in yourApemans do
4752: LD_ADDR_VAR 0 2
4756: PUSH
4757: LD_EXP 14
4761: PUSH
4762: FOR_IN
4763: IFFALSE 4779
// SetSide ( i , 1 ) ;
4765: LD_VAR 0 2
4769: PPUSH
4770: LD_INT 1
4772: PPUSH
4773: CALL_OW 235
4777: GO 4762
4779: POP
4780: POP
// if Mike then
4781: LD_EXP 10
4785: IFFALSE 4799
// SetSide ( Mike , 1 ) ;
4787: LD_EXP 10
4791: PPUSH
4792: LD_INT 1
4794: PPUSH
4795: CALL_OW 235
// SetSide ( JMM , 1 ) ;
4799: LD_EXP 1
4803: PPUSH
4804: LD_INT 1
4806: PPUSH
4807: CALL_OW 235
// SetSkill ( yourApemans , 2 , 3 ) ;
4811: LD_EXP 14
4815: PPUSH
4816: LD_INT 2
4818: PPUSH
4819: LD_INT 3
4821: PPUSH
4822: CALL_OW 237
// end ;
4826: LD_VAR 0 1
4830: RET
// export function SaveDeltaCharacters ; begin
4831: LD_INT 0
4833: PPUSH
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4834: LD_EXP 1
4838: PPUSH
4839: LD_EXP 23
4843: PUSH
4844: LD_STRING JMM
4846: STR
4847: PPUSH
4848: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4852: LD_EXP 16
4856: PPUSH
4857: LD_STRING DeltaDoctor
4859: PPUSH
4860: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4864: LD_EXP 3
4868: PPUSH
4869: LD_EXP 23
4873: PUSH
4874: LD_STRING Denis
4876: STR
4877: PPUSH
4878: CALL_OW 38
// if Lisa in selectedPeople then
4882: LD_EXP 4
4886: PUSH
4887: LD_EXP 18
4891: IN
4892: IFFALSE 4924
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4894: LD_EXP 4
4898: PPUSH
4899: LD_EXP 23
4903: PUSH
4904: LD_STRING Lisa
4906: STR
4907: PPUSH
4908: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4912: LD_INT 1
4914: PPUSH
4915: LD_STRING LisaIn06
4917: PPUSH
4918: CALL_OW 39
// end else
4922: GO 4945
// if IsOk ( Lisa ) then
4924: LD_EXP 4
4928: PPUSH
4929: CALL_OW 302
4933: IFFALSE 4945
// SaveVariable ( 1 , LisaStayInDelta ) ;
4935: LD_INT 1
4937: PPUSH
4938: LD_STRING LisaStayInDelta
4940: PPUSH
4941: CALL_OW 39
// if Bobby in selectedPeople then
4945: LD_EXP 6
4949: PUSH
4950: LD_EXP 18
4954: IN
4955: IFFALSE 4987
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4957: LD_EXP 6
4961: PPUSH
4962: LD_EXP 23
4966: PUSH
4967: LD_STRING Bobby
4969: STR
4970: PPUSH
4971: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4975: LD_INT 1
4977: PPUSH
4978: LD_STRING BobbyIn06
4980: PPUSH
4981: CALL_OW 39
// end else
4985: GO 5008
// if IsOk ( Bobby ) then
4987: LD_EXP 6
4991: PPUSH
4992: CALL_OW 302
4996: IFFALSE 5008
// SaveVariable ( 1 , BobbyStayInDelta ) ;
4998: LD_INT 1
5000: PPUSH
5001: LD_STRING BobbyStayInDelta
5003: PPUSH
5004: CALL_OW 39
// if Cyrus in selectedPeople then
5008: LD_EXP 7
5012: PUSH
5013: LD_EXP 18
5017: IN
5018: IFFALSE 5050
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5020: LD_EXP 7
5024: PPUSH
5025: LD_EXP 23
5029: PUSH
5030: LD_STRING Cyrus
5032: STR
5033: PPUSH
5034: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
5038: LD_INT 1
5040: PPUSH
5041: LD_STRING CyrusIn06
5043: PPUSH
5044: CALL_OW 39
// end else
5048: GO 5071
// if IsOk ( Cyrus ) then
5050: LD_EXP 7
5054: PPUSH
5055: CALL_OW 302
5059: IFFALSE 5071
// SaveVariable ( 1 , CyrusStayInDelta ) ;
5061: LD_INT 1
5063: PPUSH
5064: LD_STRING CyrusStayInDelta
5066: PPUSH
5067: CALL_OW 39
// if Frank in selectedPeople then
5071: LD_EXP 5
5075: PUSH
5076: LD_EXP 18
5080: IN
5081: IFFALSE 5113
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5083: LD_EXP 5
5087: PPUSH
5088: LD_EXP 23
5092: PUSH
5093: LD_STRING Frank
5095: STR
5096: PPUSH
5097: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
5101: LD_INT 1
5103: PPUSH
5104: LD_STRING FrankIn06
5106: PPUSH
5107: CALL_OW 39
// end else
5111: GO 5134
// if IsOk ( Frank ) then
5113: LD_EXP 5
5117: PPUSH
5118: CALL_OW 302
5122: IFFALSE 5134
// SaveVariable ( 1 , FrankStayInDelta ) ;
5124: LD_INT 1
5126: PPUSH
5127: LD_STRING FrankStayInDelta
5129: PPUSH
5130: CALL_OW 39
// if Brown in selectedPeople then
5134: LD_EXP 8
5138: PUSH
5139: LD_EXP 18
5143: IN
5144: IFFALSE 5176
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5146: LD_EXP 8
5150: PPUSH
5151: LD_EXP 23
5155: PUSH
5156: LD_STRING Brown
5158: STR
5159: PPUSH
5160: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
5164: LD_INT 1
5166: PPUSH
5167: LD_STRING BrownIn06
5169: PPUSH
5170: CALL_OW 39
// end else
5174: GO 5197
// if IsOk ( Brown ) then
5176: LD_EXP 8
5180: PPUSH
5181: CALL_OW 302
5185: IFFALSE 5197
// SaveVariable ( 1 , BrownStayInDelta ) ;
5187: LD_INT 1
5189: PPUSH
5190: LD_STRING BrownStayInDelta
5192: PPUSH
5193: CALL_OW 39
// if Donaldson in selectedPeople then
5197: LD_EXP 9
5201: PUSH
5202: LD_EXP 18
5206: IN
5207: IFFALSE 5239
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5209: LD_EXP 9
5213: PPUSH
5214: LD_EXP 23
5218: PUSH
5219: LD_STRING Donaldson
5221: STR
5222: PPUSH
5223: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5227: LD_INT 1
5229: PPUSH
5230: LD_STRING DonaldsonIn06
5232: PPUSH
5233: CALL_OW 39
// end else
5237: GO 5260
// if IsOk ( Donaldson ) then
5239: LD_EXP 9
5243: PPUSH
5244: CALL_OW 302
5248: IFFALSE 5260
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5250: LD_INT 1
5252: PPUSH
5253: LD_STRING DonaldsonStayInDelta
5255: PPUSH
5256: CALL_OW 39
// if Gladstone in selectedPeople then
5260: LD_EXP 2
5264: PUSH
5265: LD_EXP 18
5269: IN
5270: IFFALSE 5302
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5272: LD_EXP 2
5276: PPUSH
5277: LD_EXP 23
5281: PUSH
5282: LD_STRING Gladstone
5284: STR
5285: PPUSH
5286: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
5290: LD_INT 1
5292: PPUSH
5293: LD_STRING GladstoneIn06
5295: PPUSH
5296: CALL_OW 39
// end else
5300: GO 5323
// if IsOk ( Gladstone ) then
5302: LD_EXP 2
5306: PPUSH
5307: CALL_OW 302
5311: IFFALSE 5323
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5313: LD_INT 1
5315: PPUSH
5316: LD_STRING GladstoneStayInDelta
5318: PPUSH
5319: CALL_OW 39
// if Mike then
5323: LD_EXP 10
5327: IFFALSE 5347
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
5329: LD_EXP 10
5333: PPUSH
5334: LD_EXP 23
5338: PUSH
5339: LD_STRING Mike
5341: STR
5342: PPUSH
5343: CALL_OW 38
// selectedPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ;
5347: LD_ADDR_EXP 18
5351: PUSH
5352: LD_INT 22
5354: PUSH
5355: LD_INT 1
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: PUSH
5362: LD_INT 23
5364: PUSH
5365: LD_INT 1
5367: PUSH
5368: EMPTY
5369: LIST
5370: LIST
5371: PUSH
5372: LD_INT 21
5374: PUSH
5375: LD_INT 1
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: PUSH
5382: EMPTY
5383: LIST
5384: LIST
5385: LIST
5386: PPUSH
5387: CALL_OW 69
5391: ST_TO_ADDR
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5392: LD_EXP 14
5396: PPUSH
5397: LD_STRING ApeIn06
5399: PPUSH
5400: CALL_OW 38
// SaveCharacters ( selectedPeople diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersIn06 ) ;
5404: LD_EXP 18
5408: PUSH
5409: LD_EXP 1
5413: PUSH
5414: LD_EXP 4
5418: PUSH
5419: LD_EXP 6
5423: PUSH
5424: LD_EXP 7
5428: PUSH
5429: LD_EXP 5
5433: PUSH
5434: LD_EXP 8
5438: PUSH
5439: LD_EXP 9
5443: PUSH
5444: LD_EXP 2
5448: PUSH
5449: LD_EXP 3
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: DIFF
5465: PPUSH
5466: LD_STRING OthersIn06
5468: PPUSH
5469: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersStayInDelta ) ;
5473: LD_INT 22
5475: PUSH
5476: LD_INT 4
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: PUSH
5483: LD_INT 2
5485: PUSH
5486: LD_INT 25
5488: PUSH
5489: LD_INT 1
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: PUSH
5496: LD_INT 25
5498: PUSH
5499: LD_INT 2
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: PUSH
5506: LD_INT 25
5508: PUSH
5509: LD_INT 3
5511: PUSH
5512: EMPTY
5513: LIST
5514: LIST
5515: PUSH
5516: LD_INT 25
5518: PUSH
5519: LD_INT 4
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: PUSH
5526: EMPTY
5527: LIST
5528: LIST
5529: LIST
5530: LIST
5531: LIST
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PPUSH
5537: CALL_OW 69
5541: PUSH
5542: LD_EXP 16
5546: PUSH
5547: LD_EXP 4
5551: PUSH
5552: LD_EXP 6
5556: PUSH
5557: LD_EXP 7
5561: PUSH
5562: LD_EXP 5
5566: PUSH
5567: LD_EXP 8
5571: PUSH
5572: LD_EXP 9
5576: PUSH
5577: LD_EXP 2
5581: PUSH
5582: LD_EXP 3
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: LIST
5593: LIST
5594: LIST
5595: LIST
5596: LIST
5597: DIFF
5598: PPUSH
5599: LD_STRING OthersStayInDelta
5601: PPUSH
5602: CALL_OW 38
// end ;
5606: LD_VAR 0 1
5610: RET
// export function SaveCargos ; var i ; begin
5611: LD_INT 0
5613: PPUSH
5614: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
5615: LD_ADDR_VAR 0 2
5619: PUSH
5620: LD_INT 3
5622: PPUSH
5623: LD_INT 22
5625: PUSH
5626: LD_INT 1
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PUSH
5633: LD_INT 34
5635: PUSH
5636: LD_INT 12
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PUSH
5643: EMPTY
5644: LIST
5645: LIST
5646: PPUSH
5647: CALL_OW 70
5651: PUSH
5652: FOR_IN
5653: IFFALSE 5681
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
5655: LD_ADDR_EXP 22
5659: PUSH
5660: LD_EXP 22
5664: PUSH
5665: LD_VAR 0 2
5669: PPUSH
5670: CALL 67856 0 1
5674: PUSH
5675: EMPTY
5676: LIST
5677: ADD
5678: ST_TO_ADDR
5679: GO 5652
5681: POP
5682: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
5683: LD_EXP 22
5687: PPUSH
5688: LD_STRING 06_ResourcesInCargo06_1
5690: PPUSH
5691: CALL_OW 39
// end ; end_of_file
5695: LD_VAR 0 1
5699: RET
// on Command ( comandid ) do var i ;
5700: LD_INT 0
5702: PPUSH
// begin if comandid = 65 then
5703: LD_VAR 0 1
5707: PUSH
5708: LD_INT 65
5710: EQUAL
5711: IFFALSE 5752
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5713: LD_ADDR_VAR 0 2
5717: PUSH
5718: LD_INT 22
5720: PUSH
5721: LD_INT 1
5723: PUSH
5724: EMPTY
5725: LIST
5726: LIST
5727: PUSH
5728: EMPTY
5729: LIST
5730: PPUSH
5731: CALL_OW 69
5735: PUSH
5736: FOR_IN
5737: IFFALSE 5750
// ComStop ( i ) ;
5739: LD_VAR 0 2
5743: PPUSH
5744: CALL_OW 141
5748: GO 5736
5750: POP
5751: POP
// end ;
5752: PPOPN 2
5754: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5755: LD_INT 0
5757: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5758: LD_ADDR_VAR 0 3
5762: PUSH
5763: LD_INT 22
5765: PUSH
5766: LD_INT 1
5768: PUSH
5769: EMPTY
5770: LIST
5771: LIST
5772: PUSH
5773: LD_INT 21
5775: PUSH
5776: LD_INT 3
5778: PUSH
5779: EMPTY
5780: LIST
5781: LIST
5782: PUSH
5783: LD_INT 30
5785: PUSH
5786: LD_INT 0
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: PUSH
5793: EMPTY
5794: LIST
5795: LIST
5796: LIST
5797: PPUSH
5798: CALL_OW 69
5802: ST_TO_ADDR
// if not tmp then
5803: LD_VAR 0 3
5807: NOT
5808: IFFALSE 5812
// exit ;
5810: GO 5842
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5812: LD_VAR 0 1
5816: PPUSH
5817: LD_VAR 0 3
5821: PUSH
5822: LD_INT 1
5824: ARRAY
5825: PPUSH
5826: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5830: LD_VAR 0 1
5834: PPUSH
5835: LD_INT 4
5837: PPUSH
5838: CALL_OW 235
// end ;
5842: PPOPN 3
5844: END
// on UnitDestroyed ( un ) do begin if un = JMM then
5845: LD_VAR 0 1
5849: PUSH
5850: LD_EXP 1
5854: EQUAL
5855: IFFALSE 5864
// YouLost ( JMM ) ;
5857: LD_STRING JMM
5859: PPUSH
5860: CALL_OW 104
// SOS_UnitDestroyed ( un ) ;
5864: LD_VAR 0 1
5868: PPUSH
5869: CALL 21695 0 1
// end ;
5873: PPOPN 1
5875: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5876: LD_VAR 0 1
5880: PPUSH
5881: LD_VAR 0 2
5885: PPUSH
5886: CALL 21815 0 2
// end ; end_of_file
5890: PPOPN 2
5892: END
// export globalGameSaveCounter ; every 0 0$1 do
5893: GO 5895
5895: DISABLE
// begin enable ;
5896: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5897: LD_STRING updateTimer(
5899: PUSH
5900: LD_OWVAR 1
5904: STR
5905: PUSH
5906: LD_STRING );
5908: STR
5909: PPUSH
5910: CALL_OW 559
// end ;
5914: END
// every 0 0$1 do
5915: GO 5917
5917: DISABLE
// begin globalGameSaveCounter := 0 ;
5918: LD_ADDR_EXP 25
5922: PUSH
5923: LD_INT 0
5925: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
5926: LD_STRING setGameSaveCounter(0)
5928: PPUSH
5929: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
5933: LD_STRING initStreamRollete();
5935: PPUSH
5936: CALL_OW 559
// InitStreamMode ;
5940: CALL 7266 0 0
// DefineStreamItems ( false ) ;
5944: LD_INT 0
5946: PPUSH
5947: CALL 7730 0 1
// end ;
5951: END
// export function SOS_MapStart ( ) ; begin
5952: LD_INT 0
5954: PPUSH
// if streamModeActive then
5955: LD_EXP 26
5959: IFFALSE 5968
// DefineStreamItems ( true ) ;
5961: LD_INT 1
5963: PPUSH
5964: CALL 7730 0 1
// UpdateLuaVariables ( ) ;
5968: CALL 5985 0 0
// UpdateFactoryWaypoints ( ) ;
5972: CALL 20599 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5976: CALL 20856 0 0
// end ;
5980: LD_VAR 0 1
5984: RET
// function UpdateLuaVariables ( ) ; begin
5985: LD_INT 0
5987: PPUSH
// if globalGameSaveCounter then
5988: LD_EXP 25
5992: IFFALSE 6026
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
5994: LD_ADDR_EXP 25
5998: PUSH
5999: LD_EXP 25
6003: PPUSH
6004: CALL 65652 0 1
6008: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
6009: LD_STRING setGameSaveCounter(
6011: PUSH
6012: LD_EXP 25
6016: STR
6017: PUSH
6018: LD_STRING )
6020: STR
6021: PPUSH
6022: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
6026: LD_STRING setGameDifficulty(
6028: PUSH
6029: LD_OWVAR 67
6033: STR
6034: PUSH
6035: LD_STRING )
6037: STR
6038: PPUSH
6039: CALL_OW 559
// end ;
6043: LD_VAR 0 1
6047: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
6048: LD_INT 0
6050: PPUSH
// if p2 = stream_mode then
6051: LD_VAR 0 2
6055: PUSH
6056: LD_INT 100
6058: EQUAL
6059: IFFALSE 7062
// begin if not StreamModeActive then
6061: LD_EXP 26
6065: NOT
6066: IFFALSE 6076
// StreamModeActive := true ;
6068: LD_ADDR_EXP 26
6072: PUSH
6073: LD_INT 1
6075: ST_TO_ADDR
// if p3 = 0 then
6076: LD_VAR 0 3
6080: PUSH
6081: LD_INT 0
6083: EQUAL
6084: IFFALSE 6090
// InitStreamMode ;
6086: CALL 7266 0 0
// if p3 = 1 then
6090: LD_VAR 0 3
6094: PUSH
6095: LD_INT 1
6097: EQUAL
6098: IFFALSE 6108
// sRocket := true ;
6100: LD_ADDR_EXP 31
6104: PUSH
6105: LD_INT 1
6107: ST_TO_ADDR
// if p3 = 2 then
6108: LD_VAR 0 3
6112: PUSH
6113: LD_INT 2
6115: EQUAL
6116: IFFALSE 6126
// sSpeed := true ;
6118: LD_ADDR_EXP 30
6122: PUSH
6123: LD_INT 1
6125: ST_TO_ADDR
// if p3 = 3 then
6126: LD_VAR 0 3
6130: PUSH
6131: LD_INT 3
6133: EQUAL
6134: IFFALSE 6144
// sEngine := true ;
6136: LD_ADDR_EXP 32
6140: PUSH
6141: LD_INT 1
6143: ST_TO_ADDR
// if p3 = 4 then
6144: LD_VAR 0 3
6148: PUSH
6149: LD_INT 4
6151: EQUAL
6152: IFFALSE 6162
// sSpec := true ;
6154: LD_ADDR_EXP 29
6158: PUSH
6159: LD_INT 1
6161: ST_TO_ADDR
// if p3 = 5 then
6162: LD_VAR 0 3
6166: PUSH
6167: LD_INT 5
6169: EQUAL
6170: IFFALSE 6180
// sLevel := true ;
6172: LD_ADDR_EXP 33
6176: PUSH
6177: LD_INT 1
6179: ST_TO_ADDR
// if p3 = 6 then
6180: LD_VAR 0 3
6184: PUSH
6185: LD_INT 6
6187: EQUAL
6188: IFFALSE 6198
// sArmoury := true ;
6190: LD_ADDR_EXP 34
6194: PUSH
6195: LD_INT 1
6197: ST_TO_ADDR
// if p3 = 7 then
6198: LD_VAR 0 3
6202: PUSH
6203: LD_INT 7
6205: EQUAL
6206: IFFALSE 6216
// sRadar := true ;
6208: LD_ADDR_EXP 35
6212: PUSH
6213: LD_INT 1
6215: ST_TO_ADDR
// if p3 = 8 then
6216: LD_VAR 0 3
6220: PUSH
6221: LD_INT 8
6223: EQUAL
6224: IFFALSE 6234
// sBunker := true ;
6226: LD_ADDR_EXP 36
6230: PUSH
6231: LD_INT 1
6233: ST_TO_ADDR
// if p3 = 9 then
6234: LD_VAR 0 3
6238: PUSH
6239: LD_INT 9
6241: EQUAL
6242: IFFALSE 6252
// sHack := true ;
6244: LD_ADDR_EXP 37
6248: PUSH
6249: LD_INT 1
6251: ST_TO_ADDR
// if p3 = 10 then
6252: LD_VAR 0 3
6256: PUSH
6257: LD_INT 10
6259: EQUAL
6260: IFFALSE 6270
// sFire := true ;
6262: LD_ADDR_EXP 38
6266: PUSH
6267: LD_INT 1
6269: ST_TO_ADDR
// if p3 = 11 then
6270: LD_VAR 0 3
6274: PUSH
6275: LD_INT 11
6277: EQUAL
6278: IFFALSE 6288
// sRefresh := true ;
6280: LD_ADDR_EXP 39
6284: PUSH
6285: LD_INT 1
6287: ST_TO_ADDR
// if p3 = 12 then
6288: LD_VAR 0 3
6292: PUSH
6293: LD_INT 12
6295: EQUAL
6296: IFFALSE 6306
// sExp := true ;
6298: LD_ADDR_EXP 40
6302: PUSH
6303: LD_INT 1
6305: ST_TO_ADDR
// if p3 = 13 then
6306: LD_VAR 0 3
6310: PUSH
6311: LD_INT 13
6313: EQUAL
6314: IFFALSE 6324
// sDepot := true ;
6316: LD_ADDR_EXP 41
6320: PUSH
6321: LD_INT 1
6323: ST_TO_ADDR
// if p3 = 14 then
6324: LD_VAR 0 3
6328: PUSH
6329: LD_INT 14
6331: EQUAL
6332: IFFALSE 6342
// sFlag := true ;
6334: LD_ADDR_EXP 42
6338: PUSH
6339: LD_INT 1
6341: ST_TO_ADDR
// if p3 = 15 then
6342: LD_VAR 0 3
6346: PUSH
6347: LD_INT 15
6349: EQUAL
6350: IFFALSE 6360
// sKamikadze := true ;
6352: LD_ADDR_EXP 50
6356: PUSH
6357: LD_INT 1
6359: ST_TO_ADDR
// if p3 = 16 then
6360: LD_VAR 0 3
6364: PUSH
6365: LD_INT 16
6367: EQUAL
6368: IFFALSE 6378
// sTroll := true ;
6370: LD_ADDR_EXP 51
6374: PUSH
6375: LD_INT 1
6377: ST_TO_ADDR
// if p3 = 17 then
6378: LD_VAR 0 3
6382: PUSH
6383: LD_INT 17
6385: EQUAL
6386: IFFALSE 6396
// sSlow := true ;
6388: LD_ADDR_EXP 52
6392: PUSH
6393: LD_INT 1
6395: ST_TO_ADDR
// if p3 = 18 then
6396: LD_VAR 0 3
6400: PUSH
6401: LD_INT 18
6403: EQUAL
6404: IFFALSE 6414
// sLack := true ;
6406: LD_ADDR_EXP 53
6410: PUSH
6411: LD_INT 1
6413: ST_TO_ADDR
// if p3 = 19 then
6414: LD_VAR 0 3
6418: PUSH
6419: LD_INT 19
6421: EQUAL
6422: IFFALSE 6432
// sTank := true ;
6424: LD_ADDR_EXP 55
6428: PUSH
6429: LD_INT 1
6431: ST_TO_ADDR
// if p3 = 20 then
6432: LD_VAR 0 3
6436: PUSH
6437: LD_INT 20
6439: EQUAL
6440: IFFALSE 6450
// sRemote := true ;
6442: LD_ADDR_EXP 56
6446: PUSH
6447: LD_INT 1
6449: ST_TO_ADDR
// if p3 = 21 then
6450: LD_VAR 0 3
6454: PUSH
6455: LD_INT 21
6457: EQUAL
6458: IFFALSE 6468
// sPowell := true ;
6460: LD_ADDR_EXP 57
6464: PUSH
6465: LD_INT 1
6467: ST_TO_ADDR
// if p3 = 22 then
6468: LD_VAR 0 3
6472: PUSH
6473: LD_INT 22
6475: EQUAL
6476: IFFALSE 6486
// sTeleport := true ;
6478: LD_ADDR_EXP 60
6482: PUSH
6483: LD_INT 1
6485: ST_TO_ADDR
// if p3 = 23 then
6486: LD_VAR 0 3
6490: PUSH
6491: LD_INT 23
6493: EQUAL
6494: IFFALSE 6504
// sOilTower := true ;
6496: LD_ADDR_EXP 62
6500: PUSH
6501: LD_INT 1
6503: ST_TO_ADDR
// if p3 = 24 then
6504: LD_VAR 0 3
6508: PUSH
6509: LD_INT 24
6511: EQUAL
6512: IFFALSE 6522
// sShovel := true ;
6514: LD_ADDR_EXP 63
6518: PUSH
6519: LD_INT 1
6521: ST_TO_ADDR
// if p3 = 25 then
6522: LD_VAR 0 3
6526: PUSH
6527: LD_INT 25
6529: EQUAL
6530: IFFALSE 6540
// sSheik := true ;
6532: LD_ADDR_EXP 64
6536: PUSH
6537: LD_INT 1
6539: ST_TO_ADDR
// if p3 = 26 then
6540: LD_VAR 0 3
6544: PUSH
6545: LD_INT 26
6547: EQUAL
6548: IFFALSE 6558
// sEarthquake := true ;
6550: LD_ADDR_EXP 66
6554: PUSH
6555: LD_INT 1
6557: ST_TO_ADDR
// if p3 = 27 then
6558: LD_VAR 0 3
6562: PUSH
6563: LD_INT 27
6565: EQUAL
6566: IFFALSE 6576
// sAI := true ;
6568: LD_ADDR_EXP 67
6572: PUSH
6573: LD_INT 1
6575: ST_TO_ADDR
// if p3 = 28 then
6576: LD_VAR 0 3
6580: PUSH
6581: LD_INT 28
6583: EQUAL
6584: IFFALSE 6594
// sCargo := true ;
6586: LD_ADDR_EXP 70
6590: PUSH
6591: LD_INT 1
6593: ST_TO_ADDR
// if p3 = 29 then
6594: LD_VAR 0 3
6598: PUSH
6599: LD_INT 29
6601: EQUAL
6602: IFFALSE 6612
// sDLaser := true ;
6604: LD_ADDR_EXP 71
6608: PUSH
6609: LD_INT 1
6611: ST_TO_ADDR
// if p3 = 30 then
6612: LD_VAR 0 3
6616: PUSH
6617: LD_INT 30
6619: EQUAL
6620: IFFALSE 6630
// sExchange := true ;
6622: LD_ADDR_EXP 72
6626: PUSH
6627: LD_INT 1
6629: ST_TO_ADDR
// if p3 = 31 then
6630: LD_VAR 0 3
6634: PUSH
6635: LD_INT 31
6637: EQUAL
6638: IFFALSE 6648
// sFac := true ;
6640: LD_ADDR_EXP 73
6644: PUSH
6645: LD_INT 1
6647: ST_TO_ADDR
// if p3 = 32 then
6648: LD_VAR 0 3
6652: PUSH
6653: LD_INT 32
6655: EQUAL
6656: IFFALSE 6666
// sPower := true ;
6658: LD_ADDR_EXP 74
6662: PUSH
6663: LD_INT 1
6665: ST_TO_ADDR
// if p3 = 33 then
6666: LD_VAR 0 3
6670: PUSH
6671: LD_INT 33
6673: EQUAL
6674: IFFALSE 6684
// sRandom := true ;
6676: LD_ADDR_EXP 75
6680: PUSH
6681: LD_INT 1
6683: ST_TO_ADDR
// if p3 = 34 then
6684: LD_VAR 0 3
6688: PUSH
6689: LD_INT 34
6691: EQUAL
6692: IFFALSE 6702
// sShield := true ;
6694: LD_ADDR_EXP 76
6698: PUSH
6699: LD_INT 1
6701: ST_TO_ADDR
// if p3 = 35 then
6702: LD_VAR 0 3
6706: PUSH
6707: LD_INT 35
6709: EQUAL
6710: IFFALSE 6720
// sTime := true ;
6712: LD_ADDR_EXP 77
6716: PUSH
6717: LD_INT 1
6719: ST_TO_ADDR
// if p3 = 36 then
6720: LD_VAR 0 3
6724: PUSH
6725: LD_INT 36
6727: EQUAL
6728: IFFALSE 6738
// sTools := true ;
6730: LD_ADDR_EXP 78
6734: PUSH
6735: LD_INT 1
6737: ST_TO_ADDR
// if p3 = 101 then
6738: LD_VAR 0 3
6742: PUSH
6743: LD_INT 101
6745: EQUAL
6746: IFFALSE 6756
// sSold := true ;
6748: LD_ADDR_EXP 43
6752: PUSH
6753: LD_INT 1
6755: ST_TO_ADDR
// if p3 = 102 then
6756: LD_VAR 0 3
6760: PUSH
6761: LD_INT 102
6763: EQUAL
6764: IFFALSE 6774
// sDiff := true ;
6766: LD_ADDR_EXP 44
6770: PUSH
6771: LD_INT 1
6773: ST_TO_ADDR
// if p3 = 103 then
6774: LD_VAR 0 3
6778: PUSH
6779: LD_INT 103
6781: EQUAL
6782: IFFALSE 6792
// sFog := true ;
6784: LD_ADDR_EXP 47
6788: PUSH
6789: LD_INT 1
6791: ST_TO_ADDR
// if p3 = 104 then
6792: LD_VAR 0 3
6796: PUSH
6797: LD_INT 104
6799: EQUAL
6800: IFFALSE 6810
// sReset := true ;
6802: LD_ADDR_EXP 48
6806: PUSH
6807: LD_INT 1
6809: ST_TO_ADDR
// if p3 = 105 then
6810: LD_VAR 0 3
6814: PUSH
6815: LD_INT 105
6817: EQUAL
6818: IFFALSE 6828
// sSun := true ;
6820: LD_ADDR_EXP 49
6824: PUSH
6825: LD_INT 1
6827: ST_TO_ADDR
// if p3 = 106 then
6828: LD_VAR 0 3
6832: PUSH
6833: LD_INT 106
6835: EQUAL
6836: IFFALSE 6846
// sTiger := true ;
6838: LD_ADDR_EXP 45
6842: PUSH
6843: LD_INT 1
6845: ST_TO_ADDR
// if p3 = 107 then
6846: LD_VAR 0 3
6850: PUSH
6851: LD_INT 107
6853: EQUAL
6854: IFFALSE 6864
// sBomb := true ;
6856: LD_ADDR_EXP 46
6860: PUSH
6861: LD_INT 1
6863: ST_TO_ADDR
// if p3 = 108 then
6864: LD_VAR 0 3
6868: PUSH
6869: LD_INT 108
6871: EQUAL
6872: IFFALSE 6882
// sWound := true ;
6874: LD_ADDR_EXP 54
6878: PUSH
6879: LD_INT 1
6881: ST_TO_ADDR
// if p3 = 109 then
6882: LD_VAR 0 3
6886: PUSH
6887: LD_INT 109
6889: EQUAL
6890: IFFALSE 6900
// sBetray := true ;
6892: LD_ADDR_EXP 58
6896: PUSH
6897: LD_INT 1
6899: ST_TO_ADDR
// if p3 = 110 then
6900: LD_VAR 0 3
6904: PUSH
6905: LD_INT 110
6907: EQUAL
6908: IFFALSE 6918
// sContamin := true ;
6910: LD_ADDR_EXP 59
6914: PUSH
6915: LD_INT 1
6917: ST_TO_ADDR
// if p3 = 111 then
6918: LD_VAR 0 3
6922: PUSH
6923: LD_INT 111
6925: EQUAL
6926: IFFALSE 6936
// sOil := true ;
6928: LD_ADDR_EXP 61
6932: PUSH
6933: LD_INT 1
6935: ST_TO_ADDR
// if p3 = 112 then
6936: LD_VAR 0 3
6940: PUSH
6941: LD_INT 112
6943: EQUAL
6944: IFFALSE 6954
// sStu := true ;
6946: LD_ADDR_EXP 65
6950: PUSH
6951: LD_INT 1
6953: ST_TO_ADDR
// if p3 = 113 then
6954: LD_VAR 0 3
6958: PUSH
6959: LD_INT 113
6961: EQUAL
6962: IFFALSE 6972
// sBazooka := true ;
6964: LD_ADDR_EXP 68
6968: PUSH
6969: LD_INT 1
6971: ST_TO_ADDR
// if p3 = 114 then
6972: LD_VAR 0 3
6976: PUSH
6977: LD_INT 114
6979: EQUAL
6980: IFFALSE 6990
// sMortar := true ;
6982: LD_ADDR_EXP 69
6986: PUSH
6987: LD_INT 1
6989: ST_TO_ADDR
// if p3 = 115 then
6990: LD_VAR 0 3
6994: PUSH
6995: LD_INT 115
6997: EQUAL
6998: IFFALSE 7008
// sRanger := true ;
7000: LD_ADDR_EXP 79
7004: PUSH
7005: LD_INT 1
7007: ST_TO_ADDR
// if p3 = 116 then
7008: LD_VAR 0 3
7012: PUSH
7013: LD_INT 116
7015: EQUAL
7016: IFFALSE 7026
// sComputer := true ;
7018: LD_ADDR_EXP 80
7022: PUSH
7023: LD_INT 1
7025: ST_TO_ADDR
// if p3 = 117 then
7026: LD_VAR 0 3
7030: PUSH
7031: LD_INT 117
7033: EQUAL
7034: IFFALSE 7044
// s30 := true ;
7036: LD_ADDR_EXP 81
7040: PUSH
7041: LD_INT 1
7043: ST_TO_ADDR
// if p3 = 118 then
7044: LD_VAR 0 3
7048: PUSH
7049: LD_INT 118
7051: EQUAL
7052: IFFALSE 7062
// s60 := true ;
7054: LD_ADDR_EXP 82
7058: PUSH
7059: LD_INT 1
7061: ST_TO_ADDR
// end ; if p2 = hack_mode then
7062: LD_VAR 0 2
7066: PUSH
7067: LD_INT 101
7069: EQUAL
7070: IFFALSE 7198
// begin case p3 of 1 :
7072: LD_VAR 0 3
7076: PUSH
7077: LD_INT 1
7079: DOUBLE
7080: EQUAL
7081: IFTRUE 7085
7083: GO 7092
7085: POP
// hHackUnlimitedResources ; 2 :
7086: CALL 19345 0 0
7090: GO 7198
7092: LD_INT 2
7094: DOUBLE
7095: EQUAL
7096: IFTRUE 7100
7098: GO 7107
7100: POP
// hHackSetLevel10 ; 3 :
7101: CALL 19478 0 0
7105: GO 7198
7107: LD_INT 3
7109: DOUBLE
7110: EQUAL
7111: IFTRUE 7115
7113: GO 7122
7115: POP
// hHackSetLevel10YourUnits ; 4 :
7116: CALL 19563 0 0
7120: GO 7198
7122: LD_INT 4
7124: DOUBLE
7125: EQUAL
7126: IFTRUE 7130
7128: GO 7137
7130: POP
// hHackInvincible ; 5 :
7131: CALL 20011 0 0
7135: GO 7198
7137: LD_INT 5
7139: DOUBLE
7140: EQUAL
7141: IFTRUE 7145
7143: GO 7152
7145: POP
// hHackInvisible ; 6 :
7146: CALL 20122 0 0
7150: GO 7198
7152: LD_INT 6
7154: DOUBLE
7155: EQUAL
7156: IFTRUE 7160
7158: GO 7167
7160: POP
// hHackChangeYourSide ; 7 :
7161: CALL 20179 0 0
7165: GO 7198
7167: LD_INT 7
7169: DOUBLE
7170: EQUAL
7171: IFTRUE 7175
7173: GO 7182
7175: POP
// hHackChangeUnitSide ; 8 :
7176: CALL 20221 0 0
7180: GO 7198
7182: LD_INT 8
7184: DOUBLE
7185: EQUAL
7186: IFTRUE 7190
7188: GO 7197
7190: POP
// hHackFog ; end ;
7191: CALL 20322 0 0
7195: GO 7198
7197: POP
// end ; if p2 = game_save_mode then
7198: LD_VAR 0 2
7202: PUSH
7203: LD_INT 102
7205: EQUAL
7206: IFFALSE 7261
// begin if p3 = 1 then
7208: LD_VAR 0 3
7212: PUSH
7213: LD_INT 1
7215: EQUAL
7216: IFFALSE 7228
// globalGameSaveCounter := p4 ;
7218: LD_ADDR_EXP 25
7222: PUSH
7223: LD_VAR 0 4
7227: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
7228: LD_VAR 0 3
7232: PUSH
7233: LD_INT 2
7235: EQUAL
7236: PUSH
7237: LD_EXP 25
7241: AND
7242: IFFALSE 7261
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7244: LD_STRING setGameSaveCounter(
7246: PUSH
7247: LD_EXP 25
7251: STR
7252: PUSH
7253: LD_STRING )
7255: STR
7256: PPUSH
7257: CALL_OW 559
// end ; end ;
7261: LD_VAR 0 7
7265: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
7266: LD_INT 0
7268: PPUSH
// streamModeActive := false ;
7269: LD_ADDR_EXP 26
7273: PUSH
7274: LD_INT 0
7276: ST_TO_ADDR
// normalCounter := 36 ;
7277: LD_ADDR_EXP 27
7281: PUSH
7282: LD_INT 36
7284: ST_TO_ADDR
// hardcoreCounter := 18 ;
7285: LD_ADDR_EXP 28
7289: PUSH
7290: LD_INT 18
7292: ST_TO_ADDR
// sRocket := false ;
7293: LD_ADDR_EXP 31
7297: PUSH
7298: LD_INT 0
7300: ST_TO_ADDR
// sSpeed := false ;
7301: LD_ADDR_EXP 30
7305: PUSH
7306: LD_INT 0
7308: ST_TO_ADDR
// sEngine := false ;
7309: LD_ADDR_EXP 32
7313: PUSH
7314: LD_INT 0
7316: ST_TO_ADDR
// sSpec := false ;
7317: LD_ADDR_EXP 29
7321: PUSH
7322: LD_INT 0
7324: ST_TO_ADDR
// sLevel := false ;
7325: LD_ADDR_EXP 33
7329: PUSH
7330: LD_INT 0
7332: ST_TO_ADDR
// sArmoury := false ;
7333: LD_ADDR_EXP 34
7337: PUSH
7338: LD_INT 0
7340: ST_TO_ADDR
// sRadar := false ;
7341: LD_ADDR_EXP 35
7345: PUSH
7346: LD_INT 0
7348: ST_TO_ADDR
// sBunker := false ;
7349: LD_ADDR_EXP 36
7353: PUSH
7354: LD_INT 0
7356: ST_TO_ADDR
// sHack := false ;
7357: LD_ADDR_EXP 37
7361: PUSH
7362: LD_INT 0
7364: ST_TO_ADDR
// sFire := false ;
7365: LD_ADDR_EXP 38
7369: PUSH
7370: LD_INT 0
7372: ST_TO_ADDR
// sRefresh := false ;
7373: LD_ADDR_EXP 39
7377: PUSH
7378: LD_INT 0
7380: ST_TO_ADDR
// sExp := false ;
7381: LD_ADDR_EXP 40
7385: PUSH
7386: LD_INT 0
7388: ST_TO_ADDR
// sDepot := false ;
7389: LD_ADDR_EXP 41
7393: PUSH
7394: LD_INT 0
7396: ST_TO_ADDR
// sFlag := false ;
7397: LD_ADDR_EXP 42
7401: PUSH
7402: LD_INT 0
7404: ST_TO_ADDR
// sKamikadze := false ;
7405: LD_ADDR_EXP 50
7409: PUSH
7410: LD_INT 0
7412: ST_TO_ADDR
// sTroll := false ;
7413: LD_ADDR_EXP 51
7417: PUSH
7418: LD_INT 0
7420: ST_TO_ADDR
// sSlow := false ;
7421: LD_ADDR_EXP 52
7425: PUSH
7426: LD_INT 0
7428: ST_TO_ADDR
// sLack := false ;
7429: LD_ADDR_EXP 53
7433: PUSH
7434: LD_INT 0
7436: ST_TO_ADDR
// sTank := false ;
7437: LD_ADDR_EXP 55
7441: PUSH
7442: LD_INT 0
7444: ST_TO_ADDR
// sRemote := false ;
7445: LD_ADDR_EXP 56
7449: PUSH
7450: LD_INT 0
7452: ST_TO_ADDR
// sPowell := false ;
7453: LD_ADDR_EXP 57
7457: PUSH
7458: LD_INT 0
7460: ST_TO_ADDR
// sTeleport := false ;
7461: LD_ADDR_EXP 60
7465: PUSH
7466: LD_INT 0
7468: ST_TO_ADDR
// sOilTower := false ;
7469: LD_ADDR_EXP 62
7473: PUSH
7474: LD_INT 0
7476: ST_TO_ADDR
// sShovel := false ;
7477: LD_ADDR_EXP 63
7481: PUSH
7482: LD_INT 0
7484: ST_TO_ADDR
// sSheik := false ;
7485: LD_ADDR_EXP 64
7489: PUSH
7490: LD_INT 0
7492: ST_TO_ADDR
// sEarthquake := false ;
7493: LD_ADDR_EXP 66
7497: PUSH
7498: LD_INT 0
7500: ST_TO_ADDR
// sAI := false ;
7501: LD_ADDR_EXP 67
7505: PUSH
7506: LD_INT 0
7508: ST_TO_ADDR
// sCargo := false ;
7509: LD_ADDR_EXP 70
7513: PUSH
7514: LD_INT 0
7516: ST_TO_ADDR
// sDLaser := false ;
7517: LD_ADDR_EXP 71
7521: PUSH
7522: LD_INT 0
7524: ST_TO_ADDR
// sExchange := false ;
7525: LD_ADDR_EXP 72
7529: PUSH
7530: LD_INT 0
7532: ST_TO_ADDR
// sFac := false ;
7533: LD_ADDR_EXP 73
7537: PUSH
7538: LD_INT 0
7540: ST_TO_ADDR
// sPower := false ;
7541: LD_ADDR_EXP 74
7545: PUSH
7546: LD_INT 0
7548: ST_TO_ADDR
// sRandom := false ;
7549: LD_ADDR_EXP 75
7553: PUSH
7554: LD_INT 0
7556: ST_TO_ADDR
// sShield := false ;
7557: LD_ADDR_EXP 76
7561: PUSH
7562: LD_INT 0
7564: ST_TO_ADDR
// sTime := false ;
7565: LD_ADDR_EXP 77
7569: PUSH
7570: LD_INT 0
7572: ST_TO_ADDR
// sTools := false ;
7573: LD_ADDR_EXP 78
7577: PUSH
7578: LD_INT 0
7580: ST_TO_ADDR
// sSold := false ;
7581: LD_ADDR_EXP 43
7585: PUSH
7586: LD_INT 0
7588: ST_TO_ADDR
// sDiff := false ;
7589: LD_ADDR_EXP 44
7593: PUSH
7594: LD_INT 0
7596: ST_TO_ADDR
// sFog := false ;
7597: LD_ADDR_EXP 47
7601: PUSH
7602: LD_INT 0
7604: ST_TO_ADDR
// sReset := false ;
7605: LD_ADDR_EXP 48
7609: PUSH
7610: LD_INT 0
7612: ST_TO_ADDR
// sSun := false ;
7613: LD_ADDR_EXP 49
7617: PUSH
7618: LD_INT 0
7620: ST_TO_ADDR
// sTiger := false ;
7621: LD_ADDR_EXP 45
7625: PUSH
7626: LD_INT 0
7628: ST_TO_ADDR
// sBomb := false ;
7629: LD_ADDR_EXP 46
7633: PUSH
7634: LD_INT 0
7636: ST_TO_ADDR
// sWound := false ;
7637: LD_ADDR_EXP 54
7641: PUSH
7642: LD_INT 0
7644: ST_TO_ADDR
// sBetray := false ;
7645: LD_ADDR_EXP 58
7649: PUSH
7650: LD_INT 0
7652: ST_TO_ADDR
// sContamin := false ;
7653: LD_ADDR_EXP 59
7657: PUSH
7658: LD_INT 0
7660: ST_TO_ADDR
// sOil := false ;
7661: LD_ADDR_EXP 61
7665: PUSH
7666: LD_INT 0
7668: ST_TO_ADDR
// sStu := false ;
7669: LD_ADDR_EXP 65
7673: PUSH
7674: LD_INT 0
7676: ST_TO_ADDR
// sBazooka := false ;
7677: LD_ADDR_EXP 68
7681: PUSH
7682: LD_INT 0
7684: ST_TO_ADDR
// sMortar := false ;
7685: LD_ADDR_EXP 69
7689: PUSH
7690: LD_INT 0
7692: ST_TO_ADDR
// sRanger := false ;
7693: LD_ADDR_EXP 79
7697: PUSH
7698: LD_INT 0
7700: ST_TO_ADDR
// sComputer := false ;
7701: LD_ADDR_EXP 80
7705: PUSH
7706: LD_INT 0
7708: ST_TO_ADDR
// s30 := false ;
7709: LD_ADDR_EXP 81
7713: PUSH
7714: LD_INT 0
7716: ST_TO_ADDR
// s60 := false ;
7717: LD_ADDR_EXP 82
7721: PUSH
7722: LD_INT 0
7724: ST_TO_ADDR
// end ;
7725: LD_VAR 0 1
7729: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7730: LD_INT 0
7732: PPUSH
7733: PPUSH
7734: PPUSH
7735: PPUSH
7736: PPUSH
7737: PPUSH
7738: PPUSH
// result := [ ] ;
7739: LD_ADDR_VAR 0 2
7743: PUSH
7744: EMPTY
7745: ST_TO_ADDR
// if campaign_id = 1 then
7746: LD_OWVAR 69
7750: PUSH
7751: LD_INT 1
7753: EQUAL
7754: IFFALSE 10920
// begin case mission_number of 1 :
7756: LD_OWVAR 70
7760: PUSH
7761: LD_INT 1
7763: DOUBLE
7764: EQUAL
7765: IFTRUE 7769
7767: GO 7845
7769: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7770: LD_ADDR_VAR 0 2
7774: PUSH
7775: LD_INT 2
7777: PUSH
7778: LD_INT 4
7780: PUSH
7781: LD_INT 11
7783: PUSH
7784: LD_INT 12
7786: PUSH
7787: LD_INT 15
7789: PUSH
7790: LD_INT 16
7792: PUSH
7793: LD_INT 22
7795: PUSH
7796: LD_INT 23
7798: PUSH
7799: LD_INT 26
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: PUSH
7813: LD_INT 101
7815: PUSH
7816: LD_INT 102
7818: PUSH
7819: LD_INT 106
7821: PUSH
7822: LD_INT 116
7824: PUSH
7825: LD_INT 117
7827: PUSH
7828: LD_INT 118
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: ST_TO_ADDR
7843: GO 10918
7845: LD_INT 2
7847: DOUBLE
7848: EQUAL
7849: IFTRUE 7853
7851: GO 7937
7853: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7854: LD_ADDR_VAR 0 2
7858: PUSH
7859: LD_INT 2
7861: PUSH
7862: LD_INT 4
7864: PUSH
7865: LD_INT 11
7867: PUSH
7868: LD_INT 12
7870: PUSH
7871: LD_INT 15
7873: PUSH
7874: LD_INT 16
7876: PUSH
7877: LD_INT 22
7879: PUSH
7880: LD_INT 23
7882: PUSH
7883: LD_INT 26
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: PUSH
7897: LD_INT 101
7899: PUSH
7900: LD_INT 102
7902: PUSH
7903: LD_INT 105
7905: PUSH
7906: LD_INT 106
7908: PUSH
7909: LD_INT 108
7911: PUSH
7912: LD_INT 116
7914: PUSH
7915: LD_INT 117
7917: PUSH
7918: LD_INT 118
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: PUSH
7931: EMPTY
7932: LIST
7933: LIST
7934: ST_TO_ADDR
7935: GO 10918
7937: LD_INT 3
7939: DOUBLE
7940: EQUAL
7941: IFTRUE 7945
7943: GO 8033
7945: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7946: LD_ADDR_VAR 0 2
7950: PUSH
7951: LD_INT 2
7953: PUSH
7954: LD_INT 4
7956: PUSH
7957: LD_INT 5
7959: PUSH
7960: LD_INT 11
7962: PUSH
7963: LD_INT 12
7965: PUSH
7966: LD_INT 15
7968: PUSH
7969: LD_INT 16
7971: PUSH
7972: LD_INT 22
7974: PUSH
7975: LD_INT 26
7977: PUSH
7978: LD_INT 36
7980: PUSH
7981: EMPTY
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: LIST
7992: PUSH
7993: LD_INT 101
7995: PUSH
7996: LD_INT 102
7998: PUSH
7999: LD_INT 105
8001: PUSH
8002: LD_INT 106
8004: PUSH
8005: LD_INT 108
8007: PUSH
8008: LD_INT 116
8010: PUSH
8011: LD_INT 117
8013: PUSH
8014: LD_INT 118
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: PUSH
8027: EMPTY
8028: LIST
8029: LIST
8030: ST_TO_ADDR
8031: GO 10918
8033: LD_INT 4
8035: DOUBLE
8036: EQUAL
8037: IFTRUE 8041
8039: GO 8137
8041: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
8042: LD_ADDR_VAR 0 2
8046: PUSH
8047: LD_INT 2
8049: PUSH
8050: LD_INT 4
8052: PUSH
8053: LD_INT 5
8055: PUSH
8056: LD_INT 8
8058: PUSH
8059: LD_INT 11
8061: PUSH
8062: LD_INT 12
8064: PUSH
8065: LD_INT 15
8067: PUSH
8068: LD_INT 16
8070: PUSH
8071: LD_INT 22
8073: PUSH
8074: LD_INT 23
8076: PUSH
8077: LD_INT 26
8079: PUSH
8080: LD_INT 36
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: PUSH
8097: LD_INT 101
8099: PUSH
8100: LD_INT 102
8102: PUSH
8103: LD_INT 105
8105: PUSH
8106: LD_INT 106
8108: PUSH
8109: LD_INT 108
8111: PUSH
8112: LD_INT 116
8114: PUSH
8115: LD_INT 117
8117: PUSH
8118: LD_INT 118
8120: PUSH
8121: EMPTY
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: LIST
8129: LIST
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: ST_TO_ADDR
8135: GO 10918
8137: LD_INT 5
8139: DOUBLE
8140: EQUAL
8141: IFTRUE 8145
8143: GO 8257
8145: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
8146: LD_ADDR_VAR 0 2
8150: PUSH
8151: LD_INT 2
8153: PUSH
8154: LD_INT 4
8156: PUSH
8157: LD_INT 5
8159: PUSH
8160: LD_INT 6
8162: PUSH
8163: LD_INT 8
8165: PUSH
8166: LD_INT 11
8168: PUSH
8169: LD_INT 12
8171: PUSH
8172: LD_INT 15
8174: PUSH
8175: LD_INT 16
8177: PUSH
8178: LD_INT 22
8180: PUSH
8181: LD_INT 23
8183: PUSH
8184: LD_INT 25
8186: PUSH
8187: LD_INT 26
8189: PUSH
8190: LD_INT 36
8192: PUSH
8193: EMPTY
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: PUSH
8209: LD_INT 101
8211: PUSH
8212: LD_INT 102
8214: PUSH
8215: LD_INT 105
8217: PUSH
8218: LD_INT 106
8220: PUSH
8221: LD_INT 108
8223: PUSH
8224: LD_INT 109
8226: PUSH
8227: LD_INT 112
8229: PUSH
8230: LD_INT 116
8232: PUSH
8233: LD_INT 117
8235: PUSH
8236: LD_INT 118
8238: PUSH
8239: EMPTY
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: PUSH
8251: EMPTY
8252: LIST
8253: LIST
8254: ST_TO_ADDR
8255: GO 10918
8257: LD_INT 6
8259: DOUBLE
8260: EQUAL
8261: IFTRUE 8265
8263: GO 8397
8265: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
8266: LD_ADDR_VAR 0 2
8270: PUSH
8271: LD_INT 2
8273: PUSH
8274: LD_INT 4
8276: PUSH
8277: LD_INT 5
8279: PUSH
8280: LD_INT 6
8282: PUSH
8283: LD_INT 8
8285: PUSH
8286: LD_INT 11
8288: PUSH
8289: LD_INT 12
8291: PUSH
8292: LD_INT 15
8294: PUSH
8295: LD_INT 16
8297: PUSH
8298: LD_INT 20
8300: PUSH
8301: LD_INT 21
8303: PUSH
8304: LD_INT 22
8306: PUSH
8307: LD_INT 23
8309: PUSH
8310: LD_INT 25
8312: PUSH
8313: LD_INT 26
8315: PUSH
8316: LD_INT 30
8318: PUSH
8319: LD_INT 31
8321: PUSH
8322: LD_INT 32
8324: PUSH
8325: LD_INT 36
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: PUSH
8349: LD_INT 101
8351: PUSH
8352: LD_INT 102
8354: PUSH
8355: LD_INT 105
8357: PUSH
8358: LD_INT 106
8360: PUSH
8361: LD_INT 108
8363: PUSH
8364: LD_INT 109
8366: PUSH
8367: LD_INT 112
8369: PUSH
8370: LD_INT 116
8372: PUSH
8373: LD_INT 117
8375: PUSH
8376: LD_INT 118
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: ST_TO_ADDR
8395: GO 10918
8397: LD_INT 7
8399: DOUBLE
8400: EQUAL
8401: IFTRUE 8405
8403: GO 8517
8405: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
8406: LD_ADDR_VAR 0 2
8410: PUSH
8411: LD_INT 2
8413: PUSH
8414: LD_INT 4
8416: PUSH
8417: LD_INT 5
8419: PUSH
8420: LD_INT 7
8422: PUSH
8423: LD_INT 11
8425: PUSH
8426: LD_INT 12
8428: PUSH
8429: LD_INT 15
8431: PUSH
8432: LD_INT 16
8434: PUSH
8435: LD_INT 20
8437: PUSH
8438: LD_INT 21
8440: PUSH
8441: LD_INT 22
8443: PUSH
8444: LD_INT 23
8446: PUSH
8447: LD_INT 25
8449: PUSH
8450: LD_INT 26
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: PUSH
8469: LD_INT 101
8471: PUSH
8472: LD_INT 102
8474: PUSH
8475: LD_INT 103
8477: PUSH
8478: LD_INT 105
8480: PUSH
8481: LD_INT 106
8483: PUSH
8484: LD_INT 108
8486: PUSH
8487: LD_INT 112
8489: PUSH
8490: LD_INT 116
8492: PUSH
8493: LD_INT 117
8495: PUSH
8496: LD_INT 118
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: PUSH
8511: EMPTY
8512: LIST
8513: LIST
8514: ST_TO_ADDR
8515: GO 10918
8517: LD_INT 8
8519: DOUBLE
8520: EQUAL
8521: IFTRUE 8525
8523: GO 8665
8525: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
8526: LD_ADDR_VAR 0 2
8530: PUSH
8531: LD_INT 2
8533: PUSH
8534: LD_INT 4
8536: PUSH
8537: LD_INT 5
8539: PUSH
8540: LD_INT 6
8542: PUSH
8543: LD_INT 7
8545: PUSH
8546: LD_INT 8
8548: PUSH
8549: LD_INT 11
8551: PUSH
8552: LD_INT 12
8554: PUSH
8555: LD_INT 15
8557: PUSH
8558: LD_INT 16
8560: PUSH
8561: LD_INT 20
8563: PUSH
8564: LD_INT 21
8566: PUSH
8567: LD_INT 22
8569: PUSH
8570: LD_INT 23
8572: PUSH
8573: LD_INT 25
8575: PUSH
8576: LD_INT 26
8578: PUSH
8579: LD_INT 30
8581: PUSH
8582: LD_INT 31
8584: PUSH
8585: LD_INT 32
8587: PUSH
8588: LD_INT 36
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: LIST
8602: LIST
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: LIST
8610: LIST
8611: LIST
8612: PUSH
8613: LD_INT 101
8615: PUSH
8616: LD_INT 102
8618: PUSH
8619: LD_INT 103
8621: PUSH
8622: LD_INT 105
8624: PUSH
8625: LD_INT 106
8627: PUSH
8628: LD_INT 108
8630: PUSH
8631: LD_INT 109
8633: PUSH
8634: LD_INT 112
8636: PUSH
8637: LD_INT 116
8639: PUSH
8640: LD_INT 117
8642: PUSH
8643: LD_INT 118
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: ST_TO_ADDR
8663: GO 10918
8665: LD_INT 9
8667: DOUBLE
8668: EQUAL
8669: IFTRUE 8673
8671: GO 8821
8673: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8674: LD_ADDR_VAR 0 2
8678: PUSH
8679: LD_INT 2
8681: PUSH
8682: LD_INT 4
8684: PUSH
8685: LD_INT 5
8687: PUSH
8688: LD_INT 6
8690: PUSH
8691: LD_INT 7
8693: PUSH
8694: LD_INT 8
8696: PUSH
8697: LD_INT 11
8699: PUSH
8700: LD_INT 12
8702: PUSH
8703: LD_INT 15
8705: PUSH
8706: LD_INT 16
8708: PUSH
8709: LD_INT 20
8711: PUSH
8712: LD_INT 21
8714: PUSH
8715: LD_INT 22
8717: PUSH
8718: LD_INT 23
8720: PUSH
8721: LD_INT 25
8723: PUSH
8724: LD_INT 26
8726: PUSH
8727: LD_INT 28
8729: PUSH
8730: LD_INT 30
8732: PUSH
8733: LD_INT 31
8735: PUSH
8736: LD_INT 32
8738: PUSH
8739: LD_INT 36
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: PUSH
8765: LD_INT 101
8767: PUSH
8768: LD_INT 102
8770: PUSH
8771: LD_INT 103
8773: PUSH
8774: LD_INT 105
8776: PUSH
8777: LD_INT 106
8779: PUSH
8780: LD_INT 108
8782: PUSH
8783: LD_INT 109
8785: PUSH
8786: LD_INT 112
8788: PUSH
8789: LD_INT 114
8791: PUSH
8792: LD_INT 116
8794: PUSH
8795: LD_INT 117
8797: PUSH
8798: LD_INT 118
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: ST_TO_ADDR
8819: GO 10918
8821: LD_INT 10
8823: DOUBLE
8824: EQUAL
8825: IFTRUE 8829
8827: GO 9025
8829: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8830: LD_ADDR_VAR 0 2
8834: PUSH
8835: LD_INT 2
8837: PUSH
8838: LD_INT 4
8840: PUSH
8841: LD_INT 5
8843: PUSH
8844: LD_INT 6
8846: PUSH
8847: LD_INT 7
8849: PUSH
8850: LD_INT 8
8852: PUSH
8853: LD_INT 9
8855: PUSH
8856: LD_INT 10
8858: PUSH
8859: LD_INT 11
8861: PUSH
8862: LD_INT 12
8864: PUSH
8865: LD_INT 13
8867: PUSH
8868: LD_INT 14
8870: PUSH
8871: LD_INT 15
8873: PUSH
8874: LD_INT 16
8876: PUSH
8877: LD_INT 17
8879: PUSH
8880: LD_INT 18
8882: PUSH
8883: LD_INT 19
8885: PUSH
8886: LD_INT 20
8888: PUSH
8889: LD_INT 21
8891: PUSH
8892: LD_INT 22
8894: PUSH
8895: LD_INT 23
8897: PUSH
8898: LD_INT 24
8900: PUSH
8901: LD_INT 25
8903: PUSH
8904: LD_INT 26
8906: PUSH
8907: LD_INT 28
8909: PUSH
8910: LD_INT 30
8912: PUSH
8913: LD_INT 31
8915: PUSH
8916: LD_INT 32
8918: PUSH
8919: LD_INT 36
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: PUSH
8953: LD_INT 101
8955: PUSH
8956: LD_INT 102
8958: PUSH
8959: LD_INT 103
8961: PUSH
8962: LD_INT 104
8964: PUSH
8965: LD_INT 105
8967: PUSH
8968: LD_INT 106
8970: PUSH
8971: LD_INT 107
8973: PUSH
8974: LD_INT 108
8976: PUSH
8977: LD_INT 109
8979: PUSH
8980: LD_INT 110
8982: PUSH
8983: LD_INT 111
8985: PUSH
8986: LD_INT 112
8988: PUSH
8989: LD_INT 114
8991: PUSH
8992: LD_INT 116
8994: PUSH
8995: LD_INT 117
8997: PUSH
8998: LD_INT 118
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: ST_TO_ADDR
9023: GO 10918
9025: LD_INT 11
9027: DOUBLE
9028: EQUAL
9029: IFTRUE 9033
9031: GO 9237
9033: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
9034: LD_ADDR_VAR 0 2
9038: PUSH
9039: LD_INT 2
9041: PUSH
9042: LD_INT 3
9044: PUSH
9045: LD_INT 4
9047: PUSH
9048: LD_INT 5
9050: PUSH
9051: LD_INT 6
9053: PUSH
9054: LD_INT 7
9056: PUSH
9057: LD_INT 8
9059: PUSH
9060: LD_INT 9
9062: PUSH
9063: LD_INT 10
9065: PUSH
9066: LD_INT 11
9068: PUSH
9069: LD_INT 12
9071: PUSH
9072: LD_INT 13
9074: PUSH
9075: LD_INT 14
9077: PUSH
9078: LD_INT 15
9080: PUSH
9081: LD_INT 16
9083: PUSH
9084: LD_INT 17
9086: PUSH
9087: LD_INT 18
9089: PUSH
9090: LD_INT 19
9092: PUSH
9093: LD_INT 20
9095: PUSH
9096: LD_INT 21
9098: PUSH
9099: LD_INT 22
9101: PUSH
9102: LD_INT 23
9104: PUSH
9105: LD_INT 24
9107: PUSH
9108: LD_INT 25
9110: PUSH
9111: LD_INT 26
9113: PUSH
9114: LD_INT 28
9116: PUSH
9117: LD_INT 30
9119: PUSH
9120: LD_INT 31
9122: PUSH
9123: LD_INT 32
9125: PUSH
9126: LD_INT 34
9128: PUSH
9129: LD_INT 36
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: PUSH
9165: LD_INT 101
9167: PUSH
9168: LD_INT 102
9170: PUSH
9171: LD_INT 103
9173: PUSH
9174: LD_INT 104
9176: PUSH
9177: LD_INT 105
9179: PUSH
9180: LD_INT 106
9182: PUSH
9183: LD_INT 107
9185: PUSH
9186: LD_INT 108
9188: PUSH
9189: LD_INT 109
9191: PUSH
9192: LD_INT 110
9194: PUSH
9195: LD_INT 111
9197: PUSH
9198: LD_INT 112
9200: PUSH
9201: LD_INT 114
9203: PUSH
9204: LD_INT 116
9206: PUSH
9207: LD_INT 117
9209: PUSH
9210: LD_INT 118
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: ST_TO_ADDR
9235: GO 10918
9237: LD_INT 12
9239: DOUBLE
9240: EQUAL
9241: IFTRUE 9245
9243: GO 9465
9245: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
9246: LD_ADDR_VAR 0 2
9250: PUSH
9251: LD_INT 1
9253: PUSH
9254: LD_INT 2
9256: PUSH
9257: LD_INT 3
9259: PUSH
9260: LD_INT 4
9262: PUSH
9263: LD_INT 5
9265: PUSH
9266: LD_INT 6
9268: PUSH
9269: LD_INT 7
9271: PUSH
9272: LD_INT 8
9274: PUSH
9275: LD_INT 9
9277: PUSH
9278: LD_INT 10
9280: PUSH
9281: LD_INT 11
9283: PUSH
9284: LD_INT 12
9286: PUSH
9287: LD_INT 13
9289: PUSH
9290: LD_INT 14
9292: PUSH
9293: LD_INT 15
9295: PUSH
9296: LD_INT 16
9298: PUSH
9299: LD_INT 17
9301: PUSH
9302: LD_INT 18
9304: PUSH
9305: LD_INT 19
9307: PUSH
9308: LD_INT 20
9310: PUSH
9311: LD_INT 21
9313: PUSH
9314: LD_INT 22
9316: PUSH
9317: LD_INT 23
9319: PUSH
9320: LD_INT 24
9322: PUSH
9323: LD_INT 25
9325: PUSH
9326: LD_INT 26
9328: PUSH
9329: LD_INT 27
9331: PUSH
9332: LD_INT 28
9334: PUSH
9335: LD_INT 30
9337: PUSH
9338: LD_INT 31
9340: PUSH
9341: LD_INT 32
9343: PUSH
9344: LD_INT 33
9346: PUSH
9347: LD_INT 34
9349: PUSH
9350: LD_INT 36
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: PUSH
9389: LD_INT 101
9391: PUSH
9392: LD_INT 102
9394: PUSH
9395: LD_INT 103
9397: PUSH
9398: LD_INT 104
9400: PUSH
9401: LD_INT 105
9403: PUSH
9404: LD_INT 106
9406: PUSH
9407: LD_INT 107
9409: PUSH
9410: LD_INT 108
9412: PUSH
9413: LD_INT 109
9415: PUSH
9416: LD_INT 110
9418: PUSH
9419: LD_INT 111
9421: PUSH
9422: LD_INT 112
9424: PUSH
9425: LD_INT 113
9427: PUSH
9428: LD_INT 114
9430: PUSH
9431: LD_INT 116
9433: PUSH
9434: LD_INT 117
9436: PUSH
9437: LD_INT 118
9439: PUSH
9440: EMPTY
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: PUSH
9459: EMPTY
9460: LIST
9461: LIST
9462: ST_TO_ADDR
9463: GO 10918
9465: LD_INT 13
9467: DOUBLE
9468: EQUAL
9469: IFTRUE 9473
9471: GO 9681
9473: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
9474: LD_ADDR_VAR 0 2
9478: PUSH
9479: LD_INT 1
9481: PUSH
9482: LD_INT 2
9484: PUSH
9485: LD_INT 3
9487: PUSH
9488: LD_INT 4
9490: PUSH
9491: LD_INT 5
9493: PUSH
9494: LD_INT 8
9496: PUSH
9497: LD_INT 9
9499: PUSH
9500: LD_INT 10
9502: PUSH
9503: LD_INT 11
9505: PUSH
9506: LD_INT 12
9508: PUSH
9509: LD_INT 14
9511: PUSH
9512: LD_INT 15
9514: PUSH
9515: LD_INT 16
9517: PUSH
9518: LD_INT 17
9520: PUSH
9521: LD_INT 18
9523: PUSH
9524: LD_INT 19
9526: PUSH
9527: LD_INT 20
9529: PUSH
9530: LD_INT 21
9532: PUSH
9533: LD_INT 22
9535: PUSH
9536: LD_INT 23
9538: PUSH
9539: LD_INT 24
9541: PUSH
9542: LD_INT 25
9544: PUSH
9545: LD_INT 26
9547: PUSH
9548: LD_INT 27
9550: PUSH
9551: LD_INT 28
9553: PUSH
9554: LD_INT 30
9556: PUSH
9557: LD_INT 31
9559: PUSH
9560: LD_INT 32
9562: PUSH
9563: LD_INT 33
9565: PUSH
9566: LD_INT 34
9568: PUSH
9569: LD_INT 36
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: PUSH
9605: LD_INT 101
9607: PUSH
9608: LD_INT 102
9610: PUSH
9611: LD_INT 103
9613: PUSH
9614: LD_INT 104
9616: PUSH
9617: LD_INT 105
9619: PUSH
9620: LD_INT 106
9622: PUSH
9623: LD_INT 107
9625: PUSH
9626: LD_INT 108
9628: PUSH
9629: LD_INT 109
9631: PUSH
9632: LD_INT 110
9634: PUSH
9635: LD_INT 111
9637: PUSH
9638: LD_INT 112
9640: PUSH
9641: LD_INT 113
9643: PUSH
9644: LD_INT 114
9646: PUSH
9647: LD_INT 116
9649: PUSH
9650: LD_INT 117
9652: PUSH
9653: LD_INT 118
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: PUSH
9675: EMPTY
9676: LIST
9677: LIST
9678: ST_TO_ADDR
9679: GO 10918
9681: LD_INT 14
9683: DOUBLE
9684: EQUAL
9685: IFTRUE 9689
9687: GO 9913
9689: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9690: LD_ADDR_VAR 0 2
9694: PUSH
9695: LD_INT 1
9697: PUSH
9698: LD_INT 2
9700: PUSH
9701: LD_INT 3
9703: PUSH
9704: LD_INT 4
9706: PUSH
9707: LD_INT 5
9709: PUSH
9710: LD_INT 6
9712: PUSH
9713: LD_INT 7
9715: PUSH
9716: LD_INT 8
9718: PUSH
9719: LD_INT 9
9721: PUSH
9722: LD_INT 10
9724: PUSH
9725: LD_INT 11
9727: PUSH
9728: LD_INT 12
9730: PUSH
9731: LD_INT 13
9733: PUSH
9734: LD_INT 14
9736: PUSH
9737: LD_INT 15
9739: PUSH
9740: LD_INT 16
9742: PUSH
9743: LD_INT 17
9745: PUSH
9746: LD_INT 18
9748: PUSH
9749: LD_INT 19
9751: PUSH
9752: LD_INT 20
9754: PUSH
9755: LD_INT 21
9757: PUSH
9758: LD_INT 22
9760: PUSH
9761: LD_INT 23
9763: PUSH
9764: LD_INT 24
9766: PUSH
9767: LD_INT 25
9769: PUSH
9770: LD_INT 26
9772: PUSH
9773: LD_INT 27
9775: PUSH
9776: LD_INT 28
9778: PUSH
9779: LD_INT 29
9781: PUSH
9782: LD_INT 30
9784: PUSH
9785: LD_INT 31
9787: PUSH
9788: LD_INT 32
9790: PUSH
9791: LD_INT 33
9793: PUSH
9794: LD_INT 34
9796: PUSH
9797: LD_INT 36
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: PUSH
9837: LD_INT 101
9839: PUSH
9840: LD_INT 102
9842: PUSH
9843: LD_INT 103
9845: PUSH
9846: LD_INT 104
9848: PUSH
9849: LD_INT 105
9851: PUSH
9852: LD_INT 106
9854: PUSH
9855: LD_INT 107
9857: PUSH
9858: LD_INT 108
9860: PUSH
9861: LD_INT 109
9863: PUSH
9864: LD_INT 110
9866: PUSH
9867: LD_INT 111
9869: PUSH
9870: LD_INT 112
9872: PUSH
9873: LD_INT 113
9875: PUSH
9876: LD_INT 114
9878: PUSH
9879: LD_INT 116
9881: PUSH
9882: LD_INT 117
9884: PUSH
9885: LD_INT 118
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: ST_TO_ADDR
9911: GO 10918
9913: LD_INT 15
9915: DOUBLE
9916: EQUAL
9917: IFTRUE 9921
9919: GO 10145
9921: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9922: LD_ADDR_VAR 0 2
9926: PUSH
9927: LD_INT 1
9929: PUSH
9930: LD_INT 2
9932: PUSH
9933: LD_INT 3
9935: PUSH
9936: LD_INT 4
9938: PUSH
9939: LD_INT 5
9941: PUSH
9942: LD_INT 6
9944: PUSH
9945: LD_INT 7
9947: PUSH
9948: LD_INT 8
9950: PUSH
9951: LD_INT 9
9953: PUSH
9954: LD_INT 10
9956: PUSH
9957: LD_INT 11
9959: PUSH
9960: LD_INT 12
9962: PUSH
9963: LD_INT 13
9965: PUSH
9966: LD_INT 14
9968: PUSH
9969: LD_INT 15
9971: PUSH
9972: LD_INT 16
9974: PUSH
9975: LD_INT 17
9977: PUSH
9978: LD_INT 18
9980: PUSH
9981: LD_INT 19
9983: PUSH
9984: LD_INT 20
9986: PUSH
9987: LD_INT 21
9989: PUSH
9990: LD_INT 22
9992: PUSH
9993: LD_INT 23
9995: PUSH
9996: LD_INT 24
9998: PUSH
9999: LD_INT 25
10001: PUSH
10002: LD_INT 26
10004: PUSH
10005: LD_INT 27
10007: PUSH
10008: LD_INT 28
10010: PUSH
10011: LD_INT 29
10013: PUSH
10014: LD_INT 30
10016: PUSH
10017: LD_INT 31
10019: PUSH
10020: LD_INT 32
10022: PUSH
10023: LD_INT 33
10025: PUSH
10026: LD_INT 34
10028: PUSH
10029: LD_INT 36
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: PUSH
10069: LD_INT 101
10071: PUSH
10072: LD_INT 102
10074: PUSH
10075: LD_INT 103
10077: PUSH
10078: LD_INT 104
10080: PUSH
10081: LD_INT 105
10083: PUSH
10084: LD_INT 106
10086: PUSH
10087: LD_INT 107
10089: PUSH
10090: LD_INT 108
10092: PUSH
10093: LD_INT 109
10095: PUSH
10096: LD_INT 110
10098: PUSH
10099: LD_INT 111
10101: PUSH
10102: LD_INT 112
10104: PUSH
10105: LD_INT 113
10107: PUSH
10108: LD_INT 114
10110: PUSH
10111: LD_INT 116
10113: PUSH
10114: LD_INT 117
10116: PUSH
10117: LD_INT 118
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: ST_TO_ADDR
10143: GO 10918
10145: LD_INT 16
10147: DOUBLE
10148: EQUAL
10149: IFTRUE 10153
10151: GO 10289
10153: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
10154: LD_ADDR_VAR 0 2
10158: PUSH
10159: LD_INT 2
10161: PUSH
10162: LD_INT 4
10164: PUSH
10165: LD_INT 5
10167: PUSH
10168: LD_INT 7
10170: PUSH
10171: LD_INT 11
10173: PUSH
10174: LD_INT 12
10176: PUSH
10177: LD_INT 15
10179: PUSH
10180: LD_INT 16
10182: PUSH
10183: LD_INT 20
10185: PUSH
10186: LD_INT 21
10188: PUSH
10189: LD_INT 22
10191: PUSH
10192: LD_INT 23
10194: PUSH
10195: LD_INT 25
10197: PUSH
10198: LD_INT 26
10200: PUSH
10201: LD_INT 30
10203: PUSH
10204: LD_INT 31
10206: PUSH
10207: LD_INT 32
10209: PUSH
10210: LD_INT 33
10212: PUSH
10213: LD_INT 34
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: PUSH
10237: LD_INT 101
10239: PUSH
10240: LD_INT 102
10242: PUSH
10243: LD_INT 103
10245: PUSH
10246: LD_INT 106
10248: PUSH
10249: LD_INT 108
10251: PUSH
10252: LD_INT 112
10254: PUSH
10255: LD_INT 113
10257: PUSH
10258: LD_INT 114
10260: PUSH
10261: LD_INT 116
10263: PUSH
10264: LD_INT 117
10266: PUSH
10267: LD_INT 118
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: ST_TO_ADDR
10287: GO 10918
10289: LD_INT 17
10291: DOUBLE
10292: EQUAL
10293: IFTRUE 10297
10295: GO 10521
10297: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
10298: LD_ADDR_VAR 0 2
10302: PUSH
10303: LD_INT 1
10305: PUSH
10306: LD_INT 2
10308: PUSH
10309: LD_INT 3
10311: PUSH
10312: LD_INT 4
10314: PUSH
10315: LD_INT 5
10317: PUSH
10318: LD_INT 6
10320: PUSH
10321: LD_INT 7
10323: PUSH
10324: LD_INT 8
10326: PUSH
10327: LD_INT 9
10329: PUSH
10330: LD_INT 10
10332: PUSH
10333: LD_INT 11
10335: PUSH
10336: LD_INT 12
10338: PUSH
10339: LD_INT 13
10341: PUSH
10342: LD_INT 14
10344: PUSH
10345: LD_INT 15
10347: PUSH
10348: LD_INT 16
10350: PUSH
10351: LD_INT 17
10353: PUSH
10354: LD_INT 18
10356: PUSH
10357: LD_INT 19
10359: PUSH
10360: LD_INT 20
10362: PUSH
10363: LD_INT 21
10365: PUSH
10366: LD_INT 22
10368: PUSH
10369: LD_INT 23
10371: PUSH
10372: LD_INT 24
10374: PUSH
10375: LD_INT 25
10377: PUSH
10378: LD_INT 26
10380: PUSH
10381: LD_INT 27
10383: PUSH
10384: LD_INT 28
10386: PUSH
10387: LD_INT 29
10389: PUSH
10390: LD_INT 30
10392: PUSH
10393: LD_INT 31
10395: PUSH
10396: LD_INT 32
10398: PUSH
10399: LD_INT 33
10401: PUSH
10402: LD_INT 34
10404: PUSH
10405: LD_INT 36
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: PUSH
10445: LD_INT 101
10447: PUSH
10448: LD_INT 102
10450: PUSH
10451: LD_INT 103
10453: PUSH
10454: LD_INT 104
10456: PUSH
10457: LD_INT 105
10459: PUSH
10460: LD_INT 106
10462: PUSH
10463: LD_INT 107
10465: PUSH
10466: LD_INT 108
10468: PUSH
10469: LD_INT 109
10471: PUSH
10472: LD_INT 110
10474: PUSH
10475: LD_INT 111
10477: PUSH
10478: LD_INT 112
10480: PUSH
10481: LD_INT 113
10483: PUSH
10484: LD_INT 114
10486: PUSH
10487: LD_INT 116
10489: PUSH
10490: LD_INT 117
10492: PUSH
10493: LD_INT 118
10495: PUSH
10496: EMPTY
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: ST_TO_ADDR
10519: GO 10918
10521: LD_INT 18
10523: DOUBLE
10524: EQUAL
10525: IFTRUE 10529
10527: GO 10677
10529: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
10530: LD_ADDR_VAR 0 2
10534: PUSH
10535: LD_INT 2
10537: PUSH
10538: LD_INT 4
10540: PUSH
10541: LD_INT 5
10543: PUSH
10544: LD_INT 7
10546: PUSH
10547: LD_INT 11
10549: PUSH
10550: LD_INT 12
10552: PUSH
10553: LD_INT 15
10555: PUSH
10556: LD_INT 16
10558: PUSH
10559: LD_INT 20
10561: PUSH
10562: LD_INT 21
10564: PUSH
10565: LD_INT 22
10567: PUSH
10568: LD_INT 23
10570: PUSH
10571: LD_INT 25
10573: PUSH
10574: LD_INT 26
10576: PUSH
10577: LD_INT 30
10579: PUSH
10580: LD_INT 31
10582: PUSH
10583: LD_INT 32
10585: PUSH
10586: LD_INT 33
10588: PUSH
10589: LD_INT 34
10591: PUSH
10592: LD_INT 35
10594: PUSH
10595: LD_INT 36
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: PUSH
10621: LD_INT 101
10623: PUSH
10624: LD_INT 102
10626: PUSH
10627: LD_INT 103
10629: PUSH
10630: LD_INT 106
10632: PUSH
10633: LD_INT 108
10635: PUSH
10636: LD_INT 112
10638: PUSH
10639: LD_INT 113
10641: PUSH
10642: LD_INT 114
10644: PUSH
10645: LD_INT 115
10647: PUSH
10648: LD_INT 116
10650: PUSH
10651: LD_INT 117
10653: PUSH
10654: LD_INT 118
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: PUSH
10671: EMPTY
10672: LIST
10673: LIST
10674: ST_TO_ADDR
10675: GO 10918
10677: LD_INT 19
10679: DOUBLE
10680: EQUAL
10681: IFTRUE 10685
10683: GO 10917
10685: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10686: LD_ADDR_VAR 0 2
10690: PUSH
10691: LD_INT 1
10693: PUSH
10694: LD_INT 2
10696: PUSH
10697: LD_INT 3
10699: PUSH
10700: LD_INT 4
10702: PUSH
10703: LD_INT 5
10705: PUSH
10706: LD_INT 6
10708: PUSH
10709: LD_INT 7
10711: PUSH
10712: LD_INT 8
10714: PUSH
10715: LD_INT 9
10717: PUSH
10718: LD_INT 10
10720: PUSH
10721: LD_INT 11
10723: PUSH
10724: LD_INT 12
10726: PUSH
10727: LD_INT 13
10729: PUSH
10730: LD_INT 14
10732: PUSH
10733: LD_INT 15
10735: PUSH
10736: LD_INT 16
10738: PUSH
10739: LD_INT 17
10741: PUSH
10742: LD_INT 18
10744: PUSH
10745: LD_INT 19
10747: PUSH
10748: LD_INT 20
10750: PUSH
10751: LD_INT 21
10753: PUSH
10754: LD_INT 22
10756: PUSH
10757: LD_INT 23
10759: PUSH
10760: LD_INT 24
10762: PUSH
10763: LD_INT 25
10765: PUSH
10766: LD_INT 26
10768: PUSH
10769: LD_INT 27
10771: PUSH
10772: LD_INT 28
10774: PUSH
10775: LD_INT 29
10777: PUSH
10778: LD_INT 30
10780: PUSH
10781: LD_INT 31
10783: PUSH
10784: LD_INT 32
10786: PUSH
10787: LD_INT 33
10789: PUSH
10790: LD_INT 34
10792: PUSH
10793: LD_INT 35
10795: PUSH
10796: LD_INT 36
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: PUSH
10837: LD_INT 101
10839: PUSH
10840: LD_INT 102
10842: PUSH
10843: LD_INT 103
10845: PUSH
10846: LD_INT 104
10848: PUSH
10849: LD_INT 105
10851: PUSH
10852: LD_INT 106
10854: PUSH
10855: LD_INT 107
10857: PUSH
10858: LD_INT 108
10860: PUSH
10861: LD_INT 109
10863: PUSH
10864: LD_INT 110
10866: PUSH
10867: LD_INT 111
10869: PUSH
10870: LD_INT 112
10872: PUSH
10873: LD_INT 113
10875: PUSH
10876: LD_INT 114
10878: PUSH
10879: LD_INT 115
10881: PUSH
10882: LD_INT 116
10884: PUSH
10885: LD_INT 117
10887: PUSH
10888: LD_INT 118
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: ST_TO_ADDR
10915: GO 10918
10917: POP
// end else
10918: GO 11149
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10920: LD_ADDR_VAR 0 2
10924: PUSH
10925: LD_INT 1
10927: PUSH
10928: LD_INT 2
10930: PUSH
10931: LD_INT 3
10933: PUSH
10934: LD_INT 4
10936: PUSH
10937: LD_INT 5
10939: PUSH
10940: LD_INT 6
10942: PUSH
10943: LD_INT 7
10945: PUSH
10946: LD_INT 8
10948: PUSH
10949: LD_INT 9
10951: PUSH
10952: LD_INT 10
10954: PUSH
10955: LD_INT 11
10957: PUSH
10958: LD_INT 12
10960: PUSH
10961: LD_INT 13
10963: PUSH
10964: LD_INT 14
10966: PUSH
10967: LD_INT 15
10969: PUSH
10970: LD_INT 16
10972: PUSH
10973: LD_INT 17
10975: PUSH
10976: LD_INT 18
10978: PUSH
10979: LD_INT 19
10981: PUSH
10982: LD_INT 20
10984: PUSH
10985: LD_INT 21
10987: PUSH
10988: LD_INT 22
10990: PUSH
10991: LD_INT 23
10993: PUSH
10994: LD_INT 24
10996: PUSH
10997: LD_INT 25
10999: PUSH
11000: LD_INT 26
11002: PUSH
11003: LD_INT 27
11005: PUSH
11006: LD_INT 28
11008: PUSH
11009: LD_INT 29
11011: PUSH
11012: LD_INT 30
11014: PUSH
11015: LD_INT 31
11017: PUSH
11018: LD_INT 32
11020: PUSH
11021: LD_INT 33
11023: PUSH
11024: LD_INT 34
11026: PUSH
11027: LD_INT 35
11029: PUSH
11030: LD_INT 36
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: PUSH
11071: LD_INT 101
11073: PUSH
11074: LD_INT 102
11076: PUSH
11077: LD_INT 103
11079: PUSH
11080: LD_INT 104
11082: PUSH
11083: LD_INT 105
11085: PUSH
11086: LD_INT 106
11088: PUSH
11089: LD_INT 107
11091: PUSH
11092: LD_INT 108
11094: PUSH
11095: LD_INT 109
11097: PUSH
11098: LD_INT 110
11100: PUSH
11101: LD_INT 111
11103: PUSH
11104: LD_INT 112
11106: PUSH
11107: LD_INT 113
11109: PUSH
11110: LD_INT 114
11112: PUSH
11113: LD_INT 115
11115: PUSH
11116: LD_INT 116
11118: PUSH
11119: LD_INT 117
11121: PUSH
11122: LD_INT 118
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: ST_TO_ADDR
// if result then
11149: LD_VAR 0 2
11153: IFFALSE 11939
// begin normal :=  ;
11155: LD_ADDR_VAR 0 5
11159: PUSH
11160: LD_STRING 
11162: ST_TO_ADDR
// hardcore :=  ;
11163: LD_ADDR_VAR 0 6
11167: PUSH
11168: LD_STRING 
11170: ST_TO_ADDR
// active :=  ;
11171: LD_ADDR_VAR 0 7
11175: PUSH
11176: LD_STRING 
11178: ST_TO_ADDR
// for i = 1 to normalCounter do
11179: LD_ADDR_VAR 0 8
11183: PUSH
11184: DOUBLE
11185: LD_INT 1
11187: DEC
11188: ST_TO_ADDR
11189: LD_EXP 27
11193: PUSH
11194: FOR_TO
11195: IFFALSE 11296
// begin tmp := 0 ;
11197: LD_ADDR_VAR 0 3
11201: PUSH
11202: LD_STRING 0
11204: ST_TO_ADDR
// if result [ 1 ] then
11205: LD_VAR 0 2
11209: PUSH
11210: LD_INT 1
11212: ARRAY
11213: IFFALSE 11278
// if result [ 1 ] [ 1 ] = i then
11215: LD_VAR 0 2
11219: PUSH
11220: LD_INT 1
11222: ARRAY
11223: PUSH
11224: LD_INT 1
11226: ARRAY
11227: PUSH
11228: LD_VAR 0 8
11232: EQUAL
11233: IFFALSE 11278
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11235: LD_ADDR_VAR 0 2
11239: PUSH
11240: LD_VAR 0 2
11244: PPUSH
11245: LD_INT 1
11247: PPUSH
11248: LD_VAR 0 2
11252: PUSH
11253: LD_INT 1
11255: ARRAY
11256: PPUSH
11257: LD_INT 1
11259: PPUSH
11260: CALL_OW 3
11264: PPUSH
11265: CALL_OW 1
11269: ST_TO_ADDR
// tmp := 1 ;
11270: LD_ADDR_VAR 0 3
11274: PUSH
11275: LD_STRING 1
11277: ST_TO_ADDR
// end ; normal := normal & tmp ;
11278: LD_ADDR_VAR 0 5
11282: PUSH
11283: LD_VAR 0 5
11287: PUSH
11288: LD_VAR 0 3
11292: STR
11293: ST_TO_ADDR
// end ;
11294: GO 11194
11296: POP
11297: POP
// for i = 1 to hardcoreCounter do
11298: LD_ADDR_VAR 0 8
11302: PUSH
11303: DOUBLE
11304: LD_INT 1
11306: DEC
11307: ST_TO_ADDR
11308: LD_EXP 28
11312: PUSH
11313: FOR_TO
11314: IFFALSE 11419
// begin tmp := 0 ;
11316: LD_ADDR_VAR 0 3
11320: PUSH
11321: LD_STRING 0
11323: ST_TO_ADDR
// if result [ 2 ] then
11324: LD_VAR 0 2
11328: PUSH
11329: LD_INT 2
11331: ARRAY
11332: IFFALSE 11401
// if result [ 2 ] [ 1 ] = 100 + i then
11334: LD_VAR 0 2
11338: PUSH
11339: LD_INT 2
11341: ARRAY
11342: PUSH
11343: LD_INT 1
11345: ARRAY
11346: PUSH
11347: LD_INT 100
11349: PUSH
11350: LD_VAR 0 8
11354: PLUS
11355: EQUAL
11356: IFFALSE 11401
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11358: LD_ADDR_VAR 0 2
11362: PUSH
11363: LD_VAR 0 2
11367: PPUSH
11368: LD_INT 2
11370: PPUSH
11371: LD_VAR 0 2
11375: PUSH
11376: LD_INT 2
11378: ARRAY
11379: PPUSH
11380: LD_INT 1
11382: PPUSH
11383: CALL_OW 3
11387: PPUSH
11388: CALL_OW 1
11392: ST_TO_ADDR
// tmp := 1 ;
11393: LD_ADDR_VAR 0 3
11397: PUSH
11398: LD_STRING 1
11400: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11401: LD_ADDR_VAR 0 6
11405: PUSH
11406: LD_VAR 0 6
11410: PUSH
11411: LD_VAR 0 3
11415: STR
11416: ST_TO_ADDR
// end ;
11417: GO 11313
11419: POP
11420: POP
// if isGameLoad then
11421: LD_VAR 0 1
11425: IFFALSE 11900
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
11427: LD_ADDR_VAR 0 4
11431: PUSH
11432: LD_EXP 31
11436: PUSH
11437: LD_EXP 30
11441: PUSH
11442: LD_EXP 32
11446: PUSH
11447: LD_EXP 29
11451: PUSH
11452: LD_EXP 33
11456: PUSH
11457: LD_EXP 34
11461: PUSH
11462: LD_EXP 35
11466: PUSH
11467: LD_EXP 36
11471: PUSH
11472: LD_EXP 37
11476: PUSH
11477: LD_EXP 38
11481: PUSH
11482: LD_EXP 39
11486: PUSH
11487: LD_EXP 40
11491: PUSH
11492: LD_EXP 41
11496: PUSH
11497: LD_EXP 42
11501: PUSH
11502: LD_EXP 50
11506: PUSH
11507: LD_EXP 51
11511: PUSH
11512: LD_EXP 52
11516: PUSH
11517: LD_EXP 53
11521: PUSH
11522: LD_EXP 55
11526: PUSH
11527: LD_EXP 56
11531: PUSH
11532: LD_EXP 57
11536: PUSH
11537: LD_EXP 60
11541: PUSH
11542: LD_EXP 62
11546: PUSH
11547: LD_EXP 63
11551: PUSH
11552: LD_EXP 64
11556: PUSH
11557: LD_EXP 66
11561: PUSH
11562: LD_EXP 67
11566: PUSH
11567: LD_EXP 70
11571: PUSH
11572: LD_EXP 71
11576: PUSH
11577: LD_EXP 72
11581: PUSH
11582: LD_EXP 73
11586: PUSH
11587: LD_EXP 74
11591: PUSH
11592: LD_EXP 75
11596: PUSH
11597: LD_EXP 76
11601: PUSH
11602: LD_EXP 77
11606: PUSH
11607: LD_EXP 78
11611: PUSH
11612: LD_EXP 43
11616: PUSH
11617: LD_EXP 44
11621: PUSH
11622: LD_EXP 47
11626: PUSH
11627: LD_EXP 48
11631: PUSH
11632: LD_EXP 49
11636: PUSH
11637: LD_EXP 45
11641: PUSH
11642: LD_EXP 46
11646: PUSH
11647: LD_EXP 54
11651: PUSH
11652: LD_EXP 58
11656: PUSH
11657: LD_EXP 59
11661: PUSH
11662: LD_EXP 61
11666: PUSH
11667: LD_EXP 65
11671: PUSH
11672: LD_EXP 68
11676: PUSH
11677: LD_EXP 69
11681: PUSH
11682: LD_EXP 79
11686: PUSH
11687: LD_EXP 80
11691: PUSH
11692: LD_EXP 81
11696: PUSH
11697: LD_EXP 82
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: ST_TO_ADDR
// tmp :=  ;
11758: LD_ADDR_VAR 0 3
11762: PUSH
11763: LD_STRING 
11765: ST_TO_ADDR
// for i = 1 to normalCounter do
11766: LD_ADDR_VAR 0 8
11770: PUSH
11771: DOUBLE
11772: LD_INT 1
11774: DEC
11775: ST_TO_ADDR
11776: LD_EXP 27
11780: PUSH
11781: FOR_TO
11782: IFFALSE 11818
// begin if flags [ i ] then
11784: LD_VAR 0 4
11788: PUSH
11789: LD_VAR 0 8
11793: ARRAY
11794: IFFALSE 11816
// tmp := tmp & i & ; ;
11796: LD_ADDR_VAR 0 3
11800: PUSH
11801: LD_VAR 0 3
11805: PUSH
11806: LD_VAR 0 8
11810: STR
11811: PUSH
11812: LD_STRING ;
11814: STR
11815: ST_TO_ADDR
// end ;
11816: GO 11781
11818: POP
11819: POP
// for i = 1 to hardcoreCounter do
11820: LD_ADDR_VAR 0 8
11824: PUSH
11825: DOUBLE
11826: LD_INT 1
11828: DEC
11829: ST_TO_ADDR
11830: LD_EXP 28
11834: PUSH
11835: FOR_TO
11836: IFFALSE 11882
// begin if flags [ normalCounter + i ] then
11838: LD_VAR 0 4
11842: PUSH
11843: LD_EXP 27
11847: PUSH
11848: LD_VAR 0 8
11852: PLUS
11853: ARRAY
11854: IFFALSE 11880
// tmp := tmp & ( 100 + i ) & ; ;
11856: LD_ADDR_VAR 0 3
11860: PUSH
11861: LD_VAR 0 3
11865: PUSH
11866: LD_INT 100
11868: PUSH
11869: LD_VAR 0 8
11873: PLUS
11874: STR
11875: PUSH
11876: LD_STRING ;
11878: STR
11879: ST_TO_ADDR
// end ;
11880: GO 11835
11882: POP
11883: POP
// if tmp then
11884: LD_VAR 0 3
11888: IFFALSE 11900
// active := tmp ;
11890: LD_ADDR_VAR 0 7
11894: PUSH
11895: LD_VAR 0 3
11899: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11900: LD_STRING getStreamItemsFromMission("
11902: PUSH
11903: LD_VAR 0 5
11907: STR
11908: PUSH
11909: LD_STRING ","
11911: STR
11912: PUSH
11913: LD_VAR 0 6
11917: STR
11918: PUSH
11919: LD_STRING ","
11921: STR
11922: PUSH
11923: LD_VAR 0 7
11927: STR
11928: PUSH
11929: LD_STRING ")
11931: STR
11932: PPUSH
11933: CALL_OW 559
// end else
11937: GO 11946
// ToLua ( getStreamItemsFromMission("","","") ) ;
11939: LD_STRING getStreamItemsFromMission("","","")
11941: PPUSH
11942: CALL_OW 559
// end ;
11946: LD_VAR 0 2
11950: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11951: LD_EXP 26
11955: PUSH
11956: LD_EXP 31
11960: AND
11961: IFFALSE 12085
11963: GO 11965
11965: DISABLE
11966: LD_INT 0
11968: PPUSH
11969: PPUSH
// begin enable ;
11970: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11971: LD_ADDR_VAR 0 2
11975: PUSH
11976: LD_INT 22
11978: PUSH
11979: LD_OWVAR 2
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: PUSH
11988: LD_INT 2
11990: PUSH
11991: LD_INT 34
11993: PUSH
11994: LD_INT 7
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: PUSH
12001: LD_INT 34
12003: PUSH
12004: LD_INT 45
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: PUSH
12011: LD_INT 34
12013: PUSH
12014: LD_INT 28
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PUSH
12021: LD_INT 34
12023: PUSH
12024: LD_INT 47
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: PPUSH
12042: CALL_OW 69
12046: ST_TO_ADDR
// if not tmp then
12047: LD_VAR 0 2
12051: NOT
12052: IFFALSE 12056
// exit ;
12054: GO 12085
// for i in tmp do
12056: LD_ADDR_VAR 0 1
12060: PUSH
12061: LD_VAR 0 2
12065: PUSH
12066: FOR_IN
12067: IFFALSE 12083
// begin SetLives ( i , 0 ) ;
12069: LD_VAR 0 1
12073: PPUSH
12074: LD_INT 0
12076: PPUSH
12077: CALL_OW 234
// end ;
12081: GO 12066
12083: POP
12084: POP
// end ;
12085: PPOPN 2
12087: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12088: LD_EXP 26
12092: PUSH
12093: LD_EXP 32
12097: AND
12098: IFFALSE 12182
12100: GO 12102
12102: DISABLE
12103: LD_INT 0
12105: PPUSH
12106: PPUSH
// begin enable ;
12107: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12108: LD_ADDR_VAR 0 2
12112: PUSH
12113: LD_INT 22
12115: PUSH
12116: LD_OWVAR 2
12120: PUSH
12121: EMPTY
12122: LIST
12123: LIST
12124: PUSH
12125: LD_INT 32
12127: PUSH
12128: LD_INT 3
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: PPUSH
12139: CALL_OW 69
12143: ST_TO_ADDR
// if not tmp then
12144: LD_VAR 0 2
12148: NOT
12149: IFFALSE 12153
// exit ;
12151: GO 12182
// for i in tmp do
12153: LD_ADDR_VAR 0 1
12157: PUSH
12158: LD_VAR 0 2
12162: PUSH
12163: FOR_IN
12164: IFFALSE 12180
// begin SetLives ( i , 0 ) ;
12166: LD_VAR 0 1
12170: PPUSH
12171: LD_INT 0
12173: PPUSH
12174: CALL_OW 234
// end ;
12178: GO 12163
12180: POP
12181: POP
// end ;
12182: PPOPN 2
12184: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12185: LD_EXP 26
12189: PUSH
12190: LD_EXP 29
12194: AND
12195: IFFALSE 12288
12197: GO 12199
12199: DISABLE
12200: LD_INT 0
12202: PPUSH
// begin enable ;
12203: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12204: LD_ADDR_VAR 0 1
12208: PUSH
12209: LD_INT 22
12211: PUSH
12212: LD_OWVAR 2
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: LD_INT 2
12223: PUSH
12224: LD_INT 25
12226: PUSH
12227: LD_INT 5
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PUSH
12234: LD_INT 25
12236: PUSH
12237: LD_INT 9
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PUSH
12244: LD_INT 25
12246: PUSH
12247: LD_INT 8
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: PPUSH
12264: CALL_OW 69
12268: PUSH
12269: FOR_IN
12270: IFFALSE 12286
// begin SetClass ( i , 1 ) ;
12272: LD_VAR 0 1
12276: PPUSH
12277: LD_INT 1
12279: PPUSH
12280: CALL_OW 336
// end ;
12284: GO 12269
12286: POP
12287: POP
// end ;
12288: PPOPN 1
12290: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12291: LD_EXP 26
12295: PUSH
12296: LD_EXP 30
12300: AND
12301: PUSH
12302: LD_OWVAR 65
12306: PUSH
12307: LD_INT 7
12309: LESS
12310: AND
12311: IFFALSE 12325
12313: GO 12315
12315: DISABLE
// begin enable ;
12316: ENABLE
// game_speed := 7 ;
12317: LD_ADDR_OWVAR 65
12321: PUSH
12322: LD_INT 7
12324: ST_TO_ADDR
// end ;
12325: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12326: LD_EXP 26
12330: PUSH
12331: LD_EXP 33
12335: AND
12336: IFFALSE 12538
12338: GO 12340
12340: DISABLE
12341: LD_INT 0
12343: PPUSH
12344: PPUSH
12345: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12346: LD_ADDR_VAR 0 3
12350: PUSH
12351: LD_INT 81
12353: PUSH
12354: LD_OWVAR 2
12358: PUSH
12359: EMPTY
12360: LIST
12361: LIST
12362: PUSH
12363: LD_INT 21
12365: PUSH
12366: LD_INT 1
12368: PUSH
12369: EMPTY
12370: LIST
12371: LIST
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PPUSH
12377: CALL_OW 69
12381: ST_TO_ADDR
// if not tmp then
12382: LD_VAR 0 3
12386: NOT
12387: IFFALSE 12391
// exit ;
12389: GO 12538
// if tmp > 5 then
12391: LD_VAR 0 3
12395: PUSH
12396: LD_INT 5
12398: GREATER
12399: IFFALSE 12411
// k := 5 else
12401: LD_ADDR_VAR 0 2
12405: PUSH
12406: LD_INT 5
12408: ST_TO_ADDR
12409: GO 12421
// k := tmp ;
12411: LD_ADDR_VAR 0 2
12415: PUSH
12416: LD_VAR 0 3
12420: ST_TO_ADDR
// for i := 1 to k do
12421: LD_ADDR_VAR 0 1
12425: PUSH
12426: DOUBLE
12427: LD_INT 1
12429: DEC
12430: ST_TO_ADDR
12431: LD_VAR 0 2
12435: PUSH
12436: FOR_TO
12437: IFFALSE 12536
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12439: LD_VAR 0 3
12443: PUSH
12444: LD_VAR 0 1
12448: ARRAY
12449: PPUSH
12450: LD_VAR 0 1
12454: PUSH
12455: LD_INT 4
12457: MOD
12458: PUSH
12459: LD_INT 1
12461: PLUS
12462: PPUSH
12463: CALL_OW 259
12467: PUSH
12468: LD_INT 10
12470: LESS
12471: IFFALSE 12534
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12473: LD_VAR 0 3
12477: PUSH
12478: LD_VAR 0 1
12482: ARRAY
12483: PPUSH
12484: LD_VAR 0 1
12488: PUSH
12489: LD_INT 4
12491: MOD
12492: PUSH
12493: LD_INT 1
12495: PLUS
12496: PPUSH
12497: LD_VAR 0 3
12501: PUSH
12502: LD_VAR 0 1
12506: ARRAY
12507: PPUSH
12508: LD_VAR 0 1
12512: PUSH
12513: LD_INT 4
12515: MOD
12516: PUSH
12517: LD_INT 1
12519: PLUS
12520: PPUSH
12521: CALL_OW 259
12525: PUSH
12526: LD_INT 1
12528: PLUS
12529: PPUSH
12530: CALL_OW 237
12534: GO 12436
12536: POP
12537: POP
// end ;
12538: PPOPN 3
12540: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12541: LD_EXP 26
12545: PUSH
12546: LD_EXP 34
12550: AND
12551: IFFALSE 12571
12553: GO 12555
12555: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12556: LD_INT 4
12558: PPUSH
12559: LD_OWVAR 2
12563: PPUSH
12564: LD_INT 0
12566: PPUSH
12567: CALL_OW 324
12571: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12572: LD_EXP 26
12576: PUSH
12577: LD_EXP 63
12581: AND
12582: IFFALSE 12602
12584: GO 12586
12586: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12587: LD_INT 19
12589: PPUSH
12590: LD_OWVAR 2
12594: PPUSH
12595: LD_INT 0
12597: PPUSH
12598: CALL_OW 324
12602: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12603: LD_EXP 26
12607: PUSH
12608: LD_EXP 35
12612: AND
12613: IFFALSE 12715
12615: GO 12617
12617: DISABLE
12618: LD_INT 0
12620: PPUSH
12621: PPUSH
// begin enable ;
12622: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12623: LD_ADDR_VAR 0 2
12627: PUSH
12628: LD_INT 22
12630: PUSH
12631: LD_OWVAR 2
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PUSH
12640: LD_INT 2
12642: PUSH
12643: LD_INT 34
12645: PUSH
12646: LD_INT 11
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: PUSH
12653: LD_INT 34
12655: PUSH
12656: LD_INT 30
12658: PUSH
12659: EMPTY
12660: LIST
12661: LIST
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: LIST
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: PPUSH
12672: CALL_OW 69
12676: ST_TO_ADDR
// if not tmp then
12677: LD_VAR 0 2
12681: NOT
12682: IFFALSE 12686
// exit ;
12684: GO 12715
// for i in tmp do
12686: LD_ADDR_VAR 0 1
12690: PUSH
12691: LD_VAR 0 2
12695: PUSH
12696: FOR_IN
12697: IFFALSE 12713
// begin SetLives ( i , 0 ) ;
12699: LD_VAR 0 1
12703: PPUSH
12704: LD_INT 0
12706: PPUSH
12707: CALL_OW 234
// end ;
12711: GO 12696
12713: POP
12714: POP
// end ;
12715: PPOPN 2
12717: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12718: LD_EXP 26
12722: PUSH
12723: LD_EXP 36
12727: AND
12728: IFFALSE 12748
12730: GO 12732
12732: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12733: LD_INT 32
12735: PPUSH
12736: LD_OWVAR 2
12740: PPUSH
12741: LD_INT 0
12743: PPUSH
12744: CALL_OW 324
12748: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12749: LD_EXP 26
12753: PUSH
12754: LD_EXP 37
12758: AND
12759: IFFALSE 12940
12761: GO 12763
12763: DISABLE
12764: LD_INT 0
12766: PPUSH
12767: PPUSH
12768: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12769: LD_ADDR_VAR 0 2
12773: PUSH
12774: LD_INT 22
12776: PUSH
12777: LD_OWVAR 2
12781: PUSH
12782: EMPTY
12783: LIST
12784: LIST
12785: PUSH
12786: LD_INT 33
12788: PUSH
12789: LD_INT 3
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: PUSH
12796: EMPTY
12797: LIST
12798: LIST
12799: PPUSH
12800: CALL_OW 69
12804: ST_TO_ADDR
// if not tmp then
12805: LD_VAR 0 2
12809: NOT
12810: IFFALSE 12814
// exit ;
12812: GO 12940
// side := 0 ;
12814: LD_ADDR_VAR 0 3
12818: PUSH
12819: LD_INT 0
12821: ST_TO_ADDR
// for i := 1 to 8 do
12822: LD_ADDR_VAR 0 1
12826: PUSH
12827: DOUBLE
12828: LD_INT 1
12830: DEC
12831: ST_TO_ADDR
12832: LD_INT 8
12834: PUSH
12835: FOR_TO
12836: IFFALSE 12884
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12838: LD_OWVAR 2
12842: PUSH
12843: LD_VAR 0 1
12847: NONEQUAL
12848: PUSH
12849: LD_OWVAR 2
12853: PPUSH
12854: LD_VAR 0 1
12858: PPUSH
12859: CALL_OW 81
12863: PUSH
12864: LD_INT 2
12866: EQUAL
12867: AND
12868: IFFALSE 12882
// begin side := i ;
12870: LD_ADDR_VAR 0 3
12874: PUSH
12875: LD_VAR 0 1
12879: ST_TO_ADDR
// break ;
12880: GO 12884
// end ;
12882: GO 12835
12884: POP
12885: POP
// if not side then
12886: LD_VAR 0 3
12890: NOT
12891: IFFALSE 12895
// exit ;
12893: GO 12940
// for i := 1 to tmp do
12895: LD_ADDR_VAR 0 1
12899: PUSH
12900: DOUBLE
12901: LD_INT 1
12903: DEC
12904: ST_TO_ADDR
12905: LD_VAR 0 2
12909: PUSH
12910: FOR_TO
12911: IFFALSE 12938
// if Prob ( 60 ) then
12913: LD_INT 60
12915: PPUSH
12916: CALL_OW 13
12920: IFFALSE 12936
// SetSide ( i , side ) ;
12922: LD_VAR 0 1
12926: PPUSH
12927: LD_VAR 0 3
12931: PPUSH
12932: CALL_OW 235
12936: GO 12910
12938: POP
12939: POP
// end ;
12940: PPOPN 3
12942: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12943: LD_EXP 26
12947: PUSH
12948: LD_EXP 39
12952: AND
12953: IFFALSE 13072
12955: GO 12957
12957: DISABLE
12958: LD_INT 0
12960: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12961: LD_ADDR_VAR 0 1
12965: PUSH
12966: LD_INT 22
12968: PUSH
12969: LD_OWVAR 2
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: PUSH
12978: LD_INT 21
12980: PUSH
12981: LD_INT 1
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: PUSH
12988: LD_INT 3
12990: PUSH
12991: LD_INT 23
12993: PUSH
12994: LD_INT 0
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: LIST
13009: PPUSH
13010: CALL_OW 69
13014: PUSH
13015: FOR_IN
13016: IFFALSE 13070
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13018: LD_VAR 0 1
13022: PPUSH
13023: CALL_OW 257
13027: PUSH
13028: LD_INT 1
13030: PUSH
13031: LD_INT 2
13033: PUSH
13034: LD_INT 3
13036: PUSH
13037: LD_INT 4
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: IN
13046: IFFALSE 13068
// SetClass ( un , rand ( 1 , 4 ) ) ;
13048: LD_VAR 0 1
13052: PPUSH
13053: LD_INT 1
13055: PPUSH
13056: LD_INT 4
13058: PPUSH
13059: CALL_OW 12
13063: PPUSH
13064: CALL_OW 336
13068: GO 13015
13070: POP
13071: POP
// end ;
13072: PPOPN 1
13074: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13075: LD_EXP 26
13079: PUSH
13080: LD_EXP 38
13084: AND
13085: IFFALSE 13164
13087: GO 13089
13089: DISABLE
13090: LD_INT 0
13092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13093: LD_ADDR_VAR 0 1
13097: PUSH
13098: LD_INT 22
13100: PUSH
13101: LD_OWVAR 2
13105: PUSH
13106: EMPTY
13107: LIST
13108: LIST
13109: PUSH
13110: LD_INT 21
13112: PUSH
13113: LD_INT 3
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: PPUSH
13124: CALL_OW 69
13128: ST_TO_ADDR
// if not tmp then
13129: LD_VAR 0 1
13133: NOT
13134: IFFALSE 13138
// exit ;
13136: GO 13164
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13138: LD_VAR 0 1
13142: PUSH
13143: LD_INT 1
13145: PPUSH
13146: LD_VAR 0 1
13150: PPUSH
13151: CALL_OW 12
13155: ARRAY
13156: PPUSH
13157: LD_INT 100
13159: PPUSH
13160: CALL_OW 234
// end ;
13164: PPOPN 1
13166: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13167: LD_EXP 26
13171: PUSH
13172: LD_EXP 40
13176: AND
13177: IFFALSE 13275
13179: GO 13181
13181: DISABLE
13182: LD_INT 0
13184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13185: LD_ADDR_VAR 0 1
13189: PUSH
13190: LD_INT 22
13192: PUSH
13193: LD_OWVAR 2
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: PUSH
13202: LD_INT 21
13204: PUSH
13205: LD_INT 1
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: PPUSH
13216: CALL_OW 69
13220: ST_TO_ADDR
// if not tmp then
13221: LD_VAR 0 1
13225: NOT
13226: IFFALSE 13230
// exit ;
13228: GO 13275
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13230: LD_VAR 0 1
13234: PUSH
13235: LD_INT 1
13237: PPUSH
13238: LD_VAR 0 1
13242: PPUSH
13243: CALL_OW 12
13247: ARRAY
13248: PPUSH
13249: LD_INT 1
13251: PPUSH
13252: LD_INT 4
13254: PPUSH
13255: CALL_OW 12
13259: PPUSH
13260: LD_INT 3000
13262: PPUSH
13263: LD_INT 9000
13265: PPUSH
13266: CALL_OW 12
13270: PPUSH
13271: CALL_OW 492
// end ;
13275: PPOPN 1
13277: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13278: LD_EXP 26
13282: PUSH
13283: LD_EXP 41
13287: AND
13288: IFFALSE 13308
13290: GO 13292
13292: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13293: LD_INT 1
13295: PPUSH
13296: LD_OWVAR 2
13300: PPUSH
13301: LD_INT 0
13303: PPUSH
13304: CALL_OW 324
13308: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13309: LD_EXP 26
13313: PUSH
13314: LD_EXP 42
13318: AND
13319: IFFALSE 13402
13321: GO 13323
13323: DISABLE
13324: LD_INT 0
13326: PPUSH
13327: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13328: LD_ADDR_VAR 0 2
13332: PUSH
13333: LD_INT 22
13335: PUSH
13336: LD_OWVAR 2
13340: PUSH
13341: EMPTY
13342: LIST
13343: LIST
13344: PUSH
13345: LD_INT 21
13347: PUSH
13348: LD_INT 3
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: PPUSH
13359: CALL_OW 69
13363: ST_TO_ADDR
// if not tmp then
13364: LD_VAR 0 2
13368: NOT
13369: IFFALSE 13373
// exit ;
13371: GO 13402
// for i in tmp do
13373: LD_ADDR_VAR 0 1
13377: PUSH
13378: LD_VAR 0 2
13382: PUSH
13383: FOR_IN
13384: IFFALSE 13400
// SetBLevel ( i , 10 ) ;
13386: LD_VAR 0 1
13390: PPUSH
13391: LD_INT 10
13393: PPUSH
13394: CALL_OW 241
13398: GO 13383
13400: POP
13401: POP
// end ;
13402: PPOPN 2
13404: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13405: LD_EXP 26
13409: PUSH
13410: LD_EXP 43
13414: AND
13415: IFFALSE 13526
13417: GO 13419
13419: DISABLE
13420: LD_INT 0
13422: PPUSH
13423: PPUSH
13424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13425: LD_ADDR_VAR 0 3
13429: PUSH
13430: LD_INT 22
13432: PUSH
13433: LD_OWVAR 2
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: PUSH
13442: LD_INT 25
13444: PUSH
13445: LD_INT 1
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PPUSH
13456: CALL_OW 69
13460: ST_TO_ADDR
// if not tmp then
13461: LD_VAR 0 3
13465: NOT
13466: IFFALSE 13470
// exit ;
13468: GO 13526
// un := tmp [ rand ( 1 , tmp ) ] ;
13470: LD_ADDR_VAR 0 2
13474: PUSH
13475: LD_VAR 0 3
13479: PUSH
13480: LD_INT 1
13482: PPUSH
13483: LD_VAR 0 3
13487: PPUSH
13488: CALL_OW 12
13492: ARRAY
13493: ST_TO_ADDR
// if Crawls ( un ) then
13494: LD_VAR 0 2
13498: PPUSH
13499: CALL_OW 318
13503: IFFALSE 13514
// ComWalk ( un ) ;
13505: LD_VAR 0 2
13509: PPUSH
13510: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13514: LD_VAR 0 2
13518: PPUSH
13519: LD_INT 5
13521: PPUSH
13522: CALL_OW 336
// end ;
13526: PPOPN 3
13528: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
13529: LD_EXP 26
13533: PUSH
13534: LD_EXP 44
13538: AND
13539: PUSH
13540: LD_OWVAR 67
13544: PUSH
13545: LD_INT 4
13547: LESS
13548: AND
13549: IFFALSE 13568
13551: GO 13553
13553: DISABLE
// begin Difficulty := Difficulty + 1 ;
13554: LD_ADDR_OWVAR 67
13558: PUSH
13559: LD_OWVAR 67
13563: PUSH
13564: LD_INT 1
13566: PLUS
13567: ST_TO_ADDR
// end ;
13568: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13569: LD_EXP 26
13573: PUSH
13574: LD_EXP 45
13578: AND
13579: IFFALSE 13682
13581: GO 13583
13583: DISABLE
13584: LD_INT 0
13586: PPUSH
// begin for i := 1 to 5 do
13587: LD_ADDR_VAR 0 1
13591: PUSH
13592: DOUBLE
13593: LD_INT 1
13595: DEC
13596: ST_TO_ADDR
13597: LD_INT 5
13599: PUSH
13600: FOR_TO
13601: IFFALSE 13680
// begin uc_nation := nation_nature ;
13603: LD_ADDR_OWVAR 21
13607: PUSH
13608: LD_INT 0
13610: ST_TO_ADDR
// uc_side := 0 ;
13611: LD_ADDR_OWVAR 20
13615: PUSH
13616: LD_INT 0
13618: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13619: LD_ADDR_OWVAR 29
13623: PUSH
13624: LD_INT 12
13626: PUSH
13627: LD_INT 12
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: ST_TO_ADDR
// hc_agressivity := 20 ;
13634: LD_ADDR_OWVAR 35
13638: PUSH
13639: LD_INT 20
13641: ST_TO_ADDR
// hc_class := class_tiger ;
13642: LD_ADDR_OWVAR 28
13646: PUSH
13647: LD_INT 14
13649: ST_TO_ADDR
// hc_gallery :=  ;
13650: LD_ADDR_OWVAR 33
13654: PUSH
13655: LD_STRING 
13657: ST_TO_ADDR
// hc_name :=  ;
13658: LD_ADDR_OWVAR 26
13662: PUSH
13663: LD_STRING 
13665: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13666: CALL_OW 44
13670: PPUSH
13671: LD_INT 0
13673: PPUSH
13674: CALL_OW 51
// end ;
13678: GO 13600
13680: POP
13681: POP
// end ;
13682: PPOPN 1
13684: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13685: LD_EXP 26
13689: PUSH
13690: LD_EXP 46
13694: AND
13695: IFFALSE 13704
13697: GO 13699
13699: DISABLE
// StreamSibBomb ;
13700: CALL 13705 0 0
13704: END
// export function StreamSibBomb ; var i , x , y ; begin
13705: LD_INT 0
13707: PPUSH
13708: PPUSH
13709: PPUSH
13710: PPUSH
// result := false ;
13711: LD_ADDR_VAR 0 1
13715: PUSH
13716: LD_INT 0
13718: ST_TO_ADDR
// for i := 1 to 16 do
13719: LD_ADDR_VAR 0 2
13723: PUSH
13724: DOUBLE
13725: LD_INT 1
13727: DEC
13728: ST_TO_ADDR
13729: LD_INT 16
13731: PUSH
13732: FOR_TO
13733: IFFALSE 13932
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13735: LD_ADDR_VAR 0 3
13739: PUSH
13740: LD_INT 10
13742: PUSH
13743: LD_INT 20
13745: PUSH
13746: LD_INT 30
13748: PUSH
13749: LD_INT 40
13751: PUSH
13752: LD_INT 50
13754: PUSH
13755: LD_INT 60
13757: PUSH
13758: LD_INT 70
13760: PUSH
13761: LD_INT 80
13763: PUSH
13764: LD_INT 90
13766: PUSH
13767: LD_INT 100
13769: PUSH
13770: LD_INT 110
13772: PUSH
13773: LD_INT 120
13775: PUSH
13776: LD_INT 130
13778: PUSH
13779: LD_INT 140
13781: PUSH
13782: LD_INT 150
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: PUSH
13802: LD_INT 1
13804: PPUSH
13805: LD_INT 15
13807: PPUSH
13808: CALL_OW 12
13812: ARRAY
13813: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13814: LD_ADDR_VAR 0 4
13818: PUSH
13819: LD_INT 10
13821: PUSH
13822: LD_INT 20
13824: PUSH
13825: LD_INT 30
13827: PUSH
13828: LD_INT 40
13830: PUSH
13831: LD_INT 50
13833: PUSH
13834: LD_INT 60
13836: PUSH
13837: LD_INT 70
13839: PUSH
13840: LD_INT 80
13842: PUSH
13843: LD_INT 90
13845: PUSH
13846: LD_INT 100
13848: PUSH
13849: LD_INT 110
13851: PUSH
13852: LD_INT 120
13854: PUSH
13855: LD_INT 130
13857: PUSH
13858: LD_INT 140
13860: PUSH
13861: LD_INT 150
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: PUSH
13881: LD_INT 1
13883: PPUSH
13884: LD_INT 15
13886: PPUSH
13887: CALL_OW 12
13891: ARRAY
13892: ST_TO_ADDR
// if ValidHex ( x , y ) then
13893: LD_VAR 0 3
13897: PPUSH
13898: LD_VAR 0 4
13902: PPUSH
13903: CALL_OW 488
13907: IFFALSE 13930
// begin result := [ x , y ] ;
13909: LD_ADDR_VAR 0 1
13913: PUSH
13914: LD_VAR 0 3
13918: PUSH
13919: LD_VAR 0 4
13923: PUSH
13924: EMPTY
13925: LIST
13926: LIST
13927: ST_TO_ADDR
// break ;
13928: GO 13932
// end ; end ;
13930: GO 13732
13932: POP
13933: POP
// if result then
13934: LD_VAR 0 1
13938: IFFALSE 13998
// begin ToLua ( playSibBomb() ) ;
13940: LD_STRING playSibBomb()
13942: PPUSH
13943: CALL_OW 559
// wait ( 0 0$14 ) ;
13947: LD_INT 490
13949: PPUSH
13950: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13954: LD_VAR 0 1
13958: PUSH
13959: LD_INT 1
13961: ARRAY
13962: PPUSH
13963: LD_VAR 0 1
13967: PUSH
13968: LD_INT 2
13970: ARRAY
13971: PPUSH
13972: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13976: LD_VAR 0 1
13980: PUSH
13981: LD_INT 1
13983: ARRAY
13984: PPUSH
13985: LD_VAR 0 1
13989: PUSH
13990: LD_INT 2
13992: ARRAY
13993: PPUSH
13994: CALL_OW 429
// end ; end ;
13998: LD_VAR 0 1
14002: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14003: LD_EXP 26
14007: PUSH
14008: LD_EXP 48
14012: AND
14013: IFFALSE 14025
14015: GO 14017
14017: DISABLE
// YouLost (  ) ;
14018: LD_STRING 
14020: PPUSH
14021: CALL_OW 104
14025: END
// every 0 0$1 trigger StreamModeActive and sFog do
14026: LD_EXP 26
14030: PUSH
14031: LD_EXP 47
14035: AND
14036: IFFALSE 14050
14038: GO 14040
14040: DISABLE
// FogOff ( your_side ) ;
14041: LD_OWVAR 2
14045: PPUSH
14046: CALL_OW 344
14050: END
// every 0 0$1 trigger StreamModeActive and sSun do
14051: LD_EXP 26
14055: PUSH
14056: LD_EXP 49
14060: AND
14061: IFFALSE 14089
14063: GO 14065
14065: DISABLE
// begin solar_recharge_percent := 0 ;
14066: LD_ADDR_OWVAR 79
14070: PUSH
14071: LD_INT 0
14073: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14074: LD_INT 10500
14076: PPUSH
14077: CALL_OW 67
// solar_recharge_percent := 100 ;
14081: LD_ADDR_OWVAR 79
14085: PUSH
14086: LD_INT 100
14088: ST_TO_ADDR
// end ;
14089: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14090: LD_EXP 26
14094: PUSH
14095: LD_EXP 50
14099: AND
14100: IFFALSE 14339
14102: GO 14104
14104: DISABLE
14105: LD_INT 0
14107: PPUSH
14108: PPUSH
14109: PPUSH
// begin tmp := [ ] ;
14110: LD_ADDR_VAR 0 3
14114: PUSH
14115: EMPTY
14116: ST_TO_ADDR
// for i := 1 to 6 do
14117: LD_ADDR_VAR 0 1
14121: PUSH
14122: DOUBLE
14123: LD_INT 1
14125: DEC
14126: ST_TO_ADDR
14127: LD_INT 6
14129: PUSH
14130: FOR_TO
14131: IFFALSE 14236
// begin uc_nation := nation_nature ;
14133: LD_ADDR_OWVAR 21
14137: PUSH
14138: LD_INT 0
14140: ST_TO_ADDR
// uc_side := 0 ;
14141: LD_ADDR_OWVAR 20
14145: PUSH
14146: LD_INT 0
14148: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14149: LD_ADDR_OWVAR 29
14153: PUSH
14154: LD_INT 12
14156: PUSH
14157: LD_INT 12
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: ST_TO_ADDR
// hc_agressivity := 20 ;
14164: LD_ADDR_OWVAR 35
14168: PUSH
14169: LD_INT 20
14171: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14172: LD_ADDR_OWVAR 28
14176: PUSH
14177: LD_INT 17
14179: ST_TO_ADDR
// hc_gallery :=  ;
14180: LD_ADDR_OWVAR 33
14184: PUSH
14185: LD_STRING 
14187: ST_TO_ADDR
// hc_name :=  ;
14188: LD_ADDR_OWVAR 26
14192: PUSH
14193: LD_STRING 
14195: ST_TO_ADDR
// un := CreateHuman ;
14196: LD_ADDR_VAR 0 2
14200: PUSH
14201: CALL_OW 44
14205: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14206: LD_VAR 0 2
14210: PPUSH
14211: LD_INT 1
14213: PPUSH
14214: CALL_OW 51
// tmp := tmp ^ un ;
14218: LD_ADDR_VAR 0 3
14222: PUSH
14223: LD_VAR 0 3
14227: PUSH
14228: LD_VAR 0 2
14232: ADD
14233: ST_TO_ADDR
// end ;
14234: GO 14130
14236: POP
14237: POP
// repeat wait ( 0 0$1 ) ;
14238: LD_INT 35
14240: PPUSH
14241: CALL_OW 67
// for un in tmp do
14245: LD_ADDR_VAR 0 2
14249: PUSH
14250: LD_VAR 0 3
14254: PUSH
14255: FOR_IN
14256: IFFALSE 14330
// begin if IsDead ( un ) then
14258: LD_VAR 0 2
14262: PPUSH
14263: CALL_OW 301
14267: IFFALSE 14287
// begin tmp := tmp diff un ;
14269: LD_ADDR_VAR 0 3
14273: PUSH
14274: LD_VAR 0 3
14278: PUSH
14279: LD_VAR 0 2
14283: DIFF
14284: ST_TO_ADDR
// continue ;
14285: GO 14255
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14287: LD_VAR 0 2
14291: PPUSH
14292: LD_INT 3
14294: PUSH
14295: LD_INT 22
14297: PUSH
14298: LD_INT 0
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PPUSH
14309: CALL_OW 69
14313: PPUSH
14314: LD_VAR 0 2
14318: PPUSH
14319: CALL_OW 74
14323: PPUSH
14324: CALL_OW 115
// end ;
14328: GO 14255
14330: POP
14331: POP
// until not tmp ;
14332: LD_VAR 0 3
14336: NOT
14337: IFFALSE 14238
// end ;
14339: PPOPN 3
14341: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14342: LD_EXP 26
14346: PUSH
14347: LD_EXP 51
14351: AND
14352: IFFALSE 14406
14354: GO 14356
14356: DISABLE
// begin ToLua ( displayTroll(); ) ;
14357: LD_STRING displayTroll();
14359: PPUSH
14360: CALL_OW 559
// wait ( 3 3$00 ) ;
14364: LD_INT 6300
14366: PPUSH
14367: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14371: LD_STRING hideTroll();
14373: PPUSH
14374: CALL_OW 559
// wait ( 1 1$00 ) ;
14378: LD_INT 2100
14380: PPUSH
14381: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14385: LD_STRING displayTroll();
14387: PPUSH
14388: CALL_OW 559
// wait ( 1 1$00 ) ;
14392: LD_INT 2100
14394: PPUSH
14395: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14399: LD_STRING hideTroll();
14401: PPUSH
14402: CALL_OW 559
// end ;
14406: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14407: LD_EXP 26
14411: PUSH
14412: LD_EXP 52
14416: AND
14417: IFFALSE 14480
14419: GO 14421
14421: DISABLE
14422: LD_INT 0
14424: PPUSH
// begin p := 0 ;
14425: LD_ADDR_VAR 0 1
14429: PUSH
14430: LD_INT 0
14432: ST_TO_ADDR
// repeat game_speed := 1 ;
14433: LD_ADDR_OWVAR 65
14437: PUSH
14438: LD_INT 1
14440: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14441: LD_INT 35
14443: PPUSH
14444: CALL_OW 67
// p := p + 1 ;
14448: LD_ADDR_VAR 0 1
14452: PUSH
14453: LD_VAR 0 1
14457: PUSH
14458: LD_INT 1
14460: PLUS
14461: ST_TO_ADDR
// until p >= 60 ;
14462: LD_VAR 0 1
14466: PUSH
14467: LD_INT 60
14469: GREATEREQUAL
14470: IFFALSE 14433
// game_speed := 4 ;
14472: LD_ADDR_OWVAR 65
14476: PUSH
14477: LD_INT 4
14479: ST_TO_ADDR
// end ;
14480: PPOPN 1
14482: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14483: LD_EXP 26
14487: PUSH
14488: LD_EXP 53
14492: AND
14493: IFFALSE 14639
14495: GO 14497
14497: DISABLE
14498: LD_INT 0
14500: PPUSH
14501: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14502: LD_ADDR_VAR 0 1
14506: PUSH
14507: LD_INT 22
14509: PUSH
14510: LD_OWVAR 2
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: PUSH
14519: LD_INT 2
14521: PUSH
14522: LD_INT 30
14524: PUSH
14525: LD_INT 0
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: PUSH
14532: LD_INT 30
14534: PUSH
14535: LD_INT 1
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: PUSH
14542: EMPTY
14543: LIST
14544: LIST
14545: LIST
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: PPUSH
14551: CALL_OW 69
14555: ST_TO_ADDR
// if not depot then
14556: LD_VAR 0 1
14560: NOT
14561: IFFALSE 14565
// exit ;
14563: GO 14639
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14565: LD_ADDR_VAR 0 2
14569: PUSH
14570: LD_VAR 0 1
14574: PUSH
14575: LD_INT 1
14577: PPUSH
14578: LD_VAR 0 1
14582: PPUSH
14583: CALL_OW 12
14587: ARRAY
14588: PPUSH
14589: CALL_OW 274
14593: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14594: LD_VAR 0 2
14598: PPUSH
14599: LD_INT 1
14601: PPUSH
14602: LD_INT 0
14604: PPUSH
14605: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14609: LD_VAR 0 2
14613: PPUSH
14614: LD_INT 2
14616: PPUSH
14617: LD_INT 0
14619: PPUSH
14620: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14624: LD_VAR 0 2
14628: PPUSH
14629: LD_INT 3
14631: PPUSH
14632: LD_INT 0
14634: PPUSH
14635: CALL_OW 277
// end ;
14639: PPOPN 2
14641: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14642: LD_EXP 26
14646: PUSH
14647: LD_EXP 54
14651: AND
14652: IFFALSE 14749
14654: GO 14656
14656: DISABLE
14657: LD_INT 0
14659: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14660: LD_ADDR_VAR 0 1
14664: PUSH
14665: LD_INT 22
14667: PUSH
14668: LD_OWVAR 2
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: PUSH
14677: LD_INT 21
14679: PUSH
14680: LD_INT 1
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: PUSH
14687: LD_INT 3
14689: PUSH
14690: LD_INT 23
14692: PUSH
14693: LD_INT 0
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: LIST
14708: PPUSH
14709: CALL_OW 69
14713: ST_TO_ADDR
// if not tmp then
14714: LD_VAR 0 1
14718: NOT
14719: IFFALSE 14723
// exit ;
14721: GO 14749
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14723: LD_VAR 0 1
14727: PUSH
14728: LD_INT 1
14730: PPUSH
14731: LD_VAR 0 1
14735: PPUSH
14736: CALL_OW 12
14740: ARRAY
14741: PPUSH
14742: LD_INT 200
14744: PPUSH
14745: CALL_OW 234
// end ;
14749: PPOPN 1
14751: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14752: LD_EXP 26
14756: PUSH
14757: LD_EXP 55
14761: AND
14762: IFFALSE 14841
14764: GO 14766
14766: DISABLE
14767: LD_INT 0
14769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14770: LD_ADDR_VAR 0 1
14774: PUSH
14775: LD_INT 22
14777: PUSH
14778: LD_OWVAR 2
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: PUSH
14787: LD_INT 21
14789: PUSH
14790: LD_INT 2
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PPUSH
14801: CALL_OW 69
14805: ST_TO_ADDR
// if not tmp then
14806: LD_VAR 0 1
14810: NOT
14811: IFFALSE 14815
// exit ;
14813: GO 14841
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14815: LD_VAR 0 1
14819: PUSH
14820: LD_INT 1
14822: PPUSH
14823: LD_VAR 0 1
14827: PPUSH
14828: CALL_OW 12
14832: ARRAY
14833: PPUSH
14834: LD_INT 60
14836: PPUSH
14837: CALL_OW 234
// end ;
14841: PPOPN 1
14843: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14844: LD_EXP 26
14848: PUSH
14849: LD_EXP 56
14853: AND
14854: IFFALSE 14953
14856: GO 14858
14858: DISABLE
14859: LD_INT 0
14861: PPUSH
14862: PPUSH
// begin enable ;
14863: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14864: LD_ADDR_VAR 0 1
14868: PUSH
14869: LD_INT 22
14871: PUSH
14872: LD_OWVAR 2
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: PUSH
14881: LD_INT 61
14883: PUSH
14884: EMPTY
14885: LIST
14886: PUSH
14887: LD_INT 33
14889: PUSH
14890: LD_INT 2
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: LIST
14901: PPUSH
14902: CALL_OW 69
14906: ST_TO_ADDR
// if not tmp then
14907: LD_VAR 0 1
14911: NOT
14912: IFFALSE 14916
// exit ;
14914: GO 14953
// for i in tmp do
14916: LD_ADDR_VAR 0 2
14920: PUSH
14921: LD_VAR 0 1
14925: PUSH
14926: FOR_IN
14927: IFFALSE 14951
// if IsControledBy ( i ) then
14929: LD_VAR 0 2
14933: PPUSH
14934: CALL_OW 312
14938: IFFALSE 14949
// ComUnlink ( i ) ;
14940: LD_VAR 0 2
14944: PPUSH
14945: CALL_OW 136
14949: GO 14926
14951: POP
14952: POP
// end ;
14953: PPOPN 2
14955: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14956: LD_EXP 26
14960: PUSH
14961: LD_EXP 57
14965: AND
14966: IFFALSE 15106
14968: GO 14970
14970: DISABLE
14971: LD_INT 0
14973: PPUSH
14974: PPUSH
// begin ToLua ( displayPowell(); ) ;
14975: LD_STRING displayPowell();
14977: PPUSH
14978: CALL_OW 559
// uc_side := 0 ;
14982: LD_ADDR_OWVAR 20
14986: PUSH
14987: LD_INT 0
14989: ST_TO_ADDR
// uc_nation := 2 ;
14990: LD_ADDR_OWVAR 21
14994: PUSH
14995: LD_INT 2
14997: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14998: LD_ADDR_OWVAR 37
15002: PUSH
15003: LD_INT 14
15005: ST_TO_ADDR
// vc_engine := engine_siberite ;
15006: LD_ADDR_OWVAR 39
15010: PUSH
15011: LD_INT 3
15013: ST_TO_ADDR
// vc_control := control_apeman ;
15014: LD_ADDR_OWVAR 38
15018: PUSH
15019: LD_INT 5
15021: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15022: LD_ADDR_OWVAR 40
15026: PUSH
15027: LD_INT 29
15029: ST_TO_ADDR
// un := CreateVehicle ;
15030: LD_ADDR_VAR 0 2
15034: PUSH
15035: CALL_OW 45
15039: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15040: LD_VAR 0 2
15044: PPUSH
15045: LD_INT 1
15047: PPUSH
15048: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15052: LD_INT 35
15054: PPUSH
15055: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15059: LD_VAR 0 2
15063: PPUSH
15064: LD_INT 22
15066: PUSH
15067: LD_OWVAR 2
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: PPUSH
15076: CALL_OW 69
15080: PPUSH
15081: LD_VAR 0 2
15085: PPUSH
15086: CALL_OW 74
15090: PPUSH
15091: CALL_OW 115
// until IsDead ( un ) ;
15095: LD_VAR 0 2
15099: PPUSH
15100: CALL_OW 301
15104: IFFALSE 15052
// end ;
15106: PPOPN 2
15108: END
// every 0 0$1 trigger StreamModeActive and sStu do
15109: LD_EXP 26
15113: PUSH
15114: LD_EXP 65
15118: AND
15119: IFFALSE 15135
15121: GO 15123
15123: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15124: LD_STRING displayStucuk();
15126: PPUSH
15127: CALL_OW 559
// ResetFog ;
15131: CALL_OW 335
// end ;
15135: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15136: LD_EXP 26
15140: PUSH
15141: LD_EXP 58
15145: AND
15146: IFFALSE 15287
15148: GO 15150
15150: DISABLE
15151: LD_INT 0
15153: PPUSH
15154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15155: LD_ADDR_VAR 0 2
15159: PUSH
15160: LD_INT 22
15162: PUSH
15163: LD_OWVAR 2
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: PUSH
15172: LD_INT 21
15174: PUSH
15175: LD_INT 1
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: PPUSH
15186: CALL_OW 69
15190: ST_TO_ADDR
// if not tmp then
15191: LD_VAR 0 2
15195: NOT
15196: IFFALSE 15200
// exit ;
15198: GO 15287
// un := tmp [ rand ( 1 , tmp ) ] ;
15200: LD_ADDR_VAR 0 1
15204: PUSH
15205: LD_VAR 0 2
15209: PUSH
15210: LD_INT 1
15212: PPUSH
15213: LD_VAR 0 2
15217: PPUSH
15218: CALL_OW 12
15222: ARRAY
15223: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15224: LD_VAR 0 1
15228: PPUSH
15229: LD_INT 0
15231: PPUSH
15232: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15236: LD_VAR 0 1
15240: PPUSH
15241: LD_OWVAR 3
15245: PUSH
15246: LD_VAR 0 1
15250: DIFF
15251: PPUSH
15252: LD_VAR 0 1
15256: PPUSH
15257: CALL_OW 74
15261: PPUSH
15262: CALL_OW 115
// wait ( 0 0$20 ) ;
15266: LD_INT 700
15268: PPUSH
15269: CALL_OW 67
// SetSide ( un , your_side ) ;
15273: LD_VAR 0 1
15277: PPUSH
15278: LD_OWVAR 2
15282: PPUSH
15283: CALL_OW 235
// end ;
15287: PPOPN 2
15289: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15290: LD_EXP 26
15294: PUSH
15295: LD_EXP 59
15299: AND
15300: IFFALSE 15406
15302: GO 15304
15304: DISABLE
15305: LD_INT 0
15307: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15308: LD_ADDR_VAR 0 1
15312: PUSH
15313: LD_INT 22
15315: PUSH
15316: LD_OWVAR 2
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: LD_INT 2
15327: PUSH
15328: LD_INT 30
15330: PUSH
15331: LD_INT 0
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PUSH
15338: LD_INT 30
15340: PUSH
15341: LD_INT 1
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: LIST
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PPUSH
15357: CALL_OW 69
15361: ST_TO_ADDR
// if not depot then
15362: LD_VAR 0 1
15366: NOT
15367: IFFALSE 15371
// exit ;
15369: GO 15406
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15371: LD_VAR 0 1
15375: PUSH
15376: LD_INT 1
15378: ARRAY
15379: PPUSH
15380: CALL_OW 250
15384: PPUSH
15385: LD_VAR 0 1
15389: PUSH
15390: LD_INT 1
15392: ARRAY
15393: PPUSH
15394: CALL_OW 251
15398: PPUSH
15399: LD_INT 70
15401: PPUSH
15402: CALL_OW 495
// end ;
15406: PPOPN 1
15408: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15409: LD_EXP 26
15413: PUSH
15414: LD_EXP 60
15418: AND
15419: IFFALSE 15630
15421: GO 15423
15423: DISABLE
15424: LD_INT 0
15426: PPUSH
15427: PPUSH
15428: PPUSH
15429: PPUSH
15430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15431: LD_ADDR_VAR 0 5
15435: PUSH
15436: LD_INT 22
15438: PUSH
15439: LD_OWVAR 2
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: PUSH
15448: LD_INT 21
15450: PUSH
15451: LD_INT 1
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PPUSH
15462: CALL_OW 69
15466: ST_TO_ADDR
// if not tmp then
15467: LD_VAR 0 5
15471: NOT
15472: IFFALSE 15476
// exit ;
15474: GO 15630
// for i in tmp do
15476: LD_ADDR_VAR 0 1
15480: PUSH
15481: LD_VAR 0 5
15485: PUSH
15486: FOR_IN
15487: IFFALSE 15628
// begin d := rand ( 0 , 5 ) ;
15489: LD_ADDR_VAR 0 4
15493: PUSH
15494: LD_INT 0
15496: PPUSH
15497: LD_INT 5
15499: PPUSH
15500: CALL_OW 12
15504: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15505: LD_ADDR_VAR 0 2
15509: PUSH
15510: LD_VAR 0 1
15514: PPUSH
15515: CALL_OW 250
15519: PPUSH
15520: LD_VAR 0 4
15524: PPUSH
15525: LD_INT 3
15527: PPUSH
15528: LD_INT 12
15530: PPUSH
15531: CALL_OW 12
15535: PPUSH
15536: CALL_OW 272
15540: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15541: LD_ADDR_VAR 0 3
15545: PUSH
15546: LD_VAR 0 1
15550: PPUSH
15551: CALL_OW 251
15555: PPUSH
15556: LD_VAR 0 4
15560: PPUSH
15561: LD_INT 3
15563: PPUSH
15564: LD_INT 12
15566: PPUSH
15567: CALL_OW 12
15571: PPUSH
15572: CALL_OW 273
15576: ST_TO_ADDR
// if ValidHex ( x , y ) then
15577: LD_VAR 0 2
15581: PPUSH
15582: LD_VAR 0 3
15586: PPUSH
15587: CALL_OW 488
15591: IFFALSE 15626
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15593: LD_VAR 0 1
15597: PPUSH
15598: LD_VAR 0 2
15602: PPUSH
15603: LD_VAR 0 3
15607: PPUSH
15608: LD_INT 3
15610: PPUSH
15611: LD_INT 6
15613: PPUSH
15614: CALL_OW 12
15618: PPUSH
15619: LD_INT 1
15621: PPUSH
15622: CALL_OW 483
// end ;
15626: GO 15486
15628: POP
15629: POP
// end ;
15630: PPOPN 5
15632: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15633: LD_EXP 26
15637: PUSH
15638: LD_EXP 61
15642: AND
15643: IFFALSE 15737
15645: GO 15647
15647: DISABLE
15648: LD_INT 0
15650: PPUSH
15651: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15652: LD_ADDR_VAR 0 2
15656: PUSH
15657: LD_INT 22
15659: PUSH
15660: LD_OWVAR 2
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: PUSH
15669: LD_INT 32
15671: PUSH
15672: LD_INT 1
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PUSH
15679: LD_INT 21
15681: PUSH
15682: LD_INT 2
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: LIST
15693: PPUSH
15694: CALL_OW 69
15698: ST_TO_ADDR
// if not tmp then
15699: LD_VAR 0 2
15703: NOT
15704: IFFALSE 15708
// exit ;
15706: GO 15737
// for i in tmp do
15708: LD_ADDR_VAR 0 1
15712: PUSH
15713: LD_VAR 0 2
15717: PUSH
15718: FOR_IN
15719: IFFALSE 15735
// SetFuel ( i , 0 ) ;
15721: LD_VAR 0 1
15725: PPUSH
15726: LD_INT 0
15728: PPUSH
15729: CALL_OW 240
15733: GO 15718
15735: POP
15736: POP
// end ;
15737: PPOPN 2
15739: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15740: LD_EXP 26
15744: PUSH
15745: LD_EXP 62
15749: AND
15750: IFFALSE 15816
15752: GO 15754
15754: DISABLE
15755: LD_INT 0
15757: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15758: LD_ADDR_VAR 0 1
15762: PUSH
15763: LD_INT 22
15765: PUSH
15766: LD_OWVAR 2
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: PUSH
15775: LD_INT 30
15777: PUSH
15778: LD_INT 29
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PPUSH
15789: CALL_OW 69
15793: ST_TO_ADDR
// if not tmp then
15794: LD_VAR 0 1
15798: NOT
15799: IFFALSE 15803
// exit ;
15801: GO 15816
// DestroyUnit ( tmp [ 1 ] ) ;
15803: LD_VAR 0 1
15807: PUSH
15808: LD_INT 1
15810: ARRAY
15811: PPUSH
15812: CALL_OW 65
// end ;
15816: PPOPN 1
15818: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15819: LD_EXP 26
15823: PUSH
15824: LD_EXP 64
15828: AND
15829: IFFALSE 15958
15831: GO 15833
15833: DISABLE
15834: LD_INT 0
15836: PPUSH
// begin uc_side := 0 ;
15837: LD_ADDR_OWVAR 20
15841: PUSH
15842: LD_INT 0
15844: ST_TO_ADDR
// uc_nation := nation_arabian ;
15845: LD_ADDR_OWVAR 21
15849: PUSH
15850: LD_INT 2
15852: ST_TO_ADDR
// hc_gallery :=  ;
15853: LD_ADDR_OWVAR 33
15857: PUSH
15858: LD_STRING 
15860: ST_TO_ADDR
// hc_name :=  ;
15861: LD_ADDR_OWVAR 26
15865: PUSH
15866: LD_STRING 
15868: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15869: LD_INT 1
15871: PPUSH
15872: LD_INT 11
15874: PPUSH
15875: LD_INT 10
15877: PPUSH
15878: CALL_OW 380
// un := CreateHuman ;
15882: LD_ADDR_VAR 0 1
15886: PUSH
15887: CALL_OW 44
15891: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15892: LD_VAR 0 1
15896: PPUSH
15897: LD_INT 1
15899: PPUSH
15900: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15904: LD_INT 35
15906: PPUSH
15907: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15911: LD_VAR 0 1
15915: PPUSH
15916: LD_INT 22
15918: PUSH
15919: LD_OWVAR 2
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PPUSH
15928: CALL_OW 69
15932: PPUSH
15933: LD_VAR 0 1
15937: PPUSH
15938: CALL_OW 74
15942: PPUSH
15943: CALL_OW 115
// until IsDead ( un ) ;
15947: LD_VAR 0 1
15951: PPUSH
15952: CALL_OW 301
15956: IFFALSE 15904
// end ;
15958: PPOPN 1
15960: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15961: LD_EXP 26
15965: PUSH
15966: LD_EXP 66
15970: AND
15971: IFFALSE 15983
15973: GO 15975
15975: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15976: LD_STRING earthquake(getX(game), 0, 32)
15978: PPUSH
15979: CALL_OW 559
15983: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15984: LD_EXP 26
15988: PUSH
15989: LD_EXP 67
15993: AND
15994: IFFALSE 16085
15996: GO 15998
15998: DISABLE
15999: LD_INT 0
16001: PPUSH
// begin enable ;
16002: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16003: LD_ADDR_VAR 0 1
16007: PUSH
16008: LD_INT 22
16010: PUSH
16011: LD_OWVAR 2
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: PUSH
16020: LD_INT 21
16022: PUSH
16023: LD_INT 2
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: PUSH
16030: LD_INT 33
16032: PUSH
16033: LD_INT 3
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: LIST
16044: PPUSH
16045: CALL_OW 69
16049: ST_TO_ADDR
// if not tmp then
16050: LD_VAR 0 1
16054: NOT
16055: IFFALSE 16059
// exit ;
16057: GO 16085
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16059: LD_VAR 0 1
16063: PUSH
16064: LD_INT 1
16066: PPUSH
16067: LD_VAR 0 1
16071: PPUSH
16072: CALL_OW 12
16076: ARRAY
16077: PPUSH
16078: LD_INT 1
16080: PPUSH
16081: CALL_OW 234
// end ;
16085: PPOPN 1
16087: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16088: LD_EXP 26
16092: PUSH
16093: LD_EXP 68
16097: AND
16098: IFFALSE 16239
16100: GO 16102
16102: DISABLE
16103: LD_INT 0
16105: PPUSH
16106: PPUSH
16107: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16108: LD_ADDR_VAR 0 3
16112: PUSH
16113: LD_INT 22
16115: PUSH
16116: LD_OWVAR 2
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: PUSH
16125: LD_INT 25
16127: PUSH
16128: LD_INT 1
16130: PUSH
16131: EMPTY
16132: LIST
16133: LIST
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: PPUSH
16139: CALL_OW 69
16143: ST_TO_ADDR
// if not tmp then
16144: LD_VAR 0 3
16148: NOT
16149: IFFALSE 16153
// exit ;
16151: GO 16239
// un := tmp [ rand ( 1 , tmp ) ] ;
16153: LD_ADDR_VAR 0 2
16157: PUSH
16158: LD_VAR 0 3
16162: PUSH
16163: LD_INT 1
16165: PPUSH
16166: LD_VAR 0 3
16170: PPUSH
16171: CALL_OW 12
16175: ARRAY
16176: ST_TO_ADDR
// if Crawls ( un ) then
16177: LD_VAR 0 2
16181: PPUSH
16182: CALL_OW 318
16186: IFFALSE 16197
// ComWalk ( un ) ;
16188: LD_VAR 0 2
16192: PPUSH
16193: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16197: LD_VAR 0 2
16201: PPUSH
16202: LD_INT 9
16204: PPUSH
16205: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16209: LD_INT 28
16211: PPUSH
16212: LD_OWVAR 2
16216: PPUSH
16217: LD_INT 2
16219: PPUSH
16220: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16224: LD_INT 29
16226: PPUSH
16227: LD_OWVAR 2
16231: PPUSH
16232: LD_INT 2
16234: PPUSH
16235: CALL_OW 322
// end ;
16239: PPOPN 3
16241: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16242: LD_EXP 26
16246: PUSH
16247: LD_EXP 69
16251: AND
16252: IFFALSE 16363
16254: GO 16256
16256: DISABLE
16257: LD_INT 0
16259: PPUSH
16260: PPUSH
16261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16262: LD_ADDR_VAR 0 3
16266: PUSH
16267: LD_INT 22
16269: PUSH
16270: LD_OWVAR 2
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: PUSH
16279: LD_INT 25
16281: PUSH
16282: LD_INT 1
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PUSH
16289: EMPTY
16290: LIST
16291: LIST
16292: PPUSH
16293: CALL_OW 69
16297: ST_TO_ADDR
// if not tmp then
16298: LD_VAR 0 3
16302: NOT
16303: IFFALSE 16307
// exit ;
16305: GO 16363
// un := tmp [ rand ( 1 , tmp ) ] ;
16307: LD_ADDR_VAR 0 2
16311: PUSH
16312: LD_VAR 0 3
16316: PUSH
16317: LD_INT 1
16319: PPUSH
16320: LD_VAR 0 3
16324: PPUSH
16325: CALL_OW 12
16329: ARRAY
16330: ST_TO_ADDR
// if Crawls ( un ) then
16331: LD_VAR 0 2
16335: PPUSH
16336: CALL_OW 318
16340: IFFALSE 16351
// ComWalk ( un ) ;
16342: LD_VAR 0 2
16346: PPUSH
16347: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16351: LD_VAR 0 2
16355: PPUSH
16356: LD_INT 8
16358: PPUSH
16359: CALL_OW 336
// end ;
16363: PPOPN 3
16365: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16366: LD_EXP 26
16370: PUSH
16371: LD_EXP 70
16375: AND
16376: IFFALSE 16520
16378: GO 16380
16380: DISABLE
16381: LD_INT 0
16383: PPUSH
16384: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16385: LD_ADDR_VAR 0 2
16389: PUSH
16390: LD_INT 22
16392: PUSH
16393: LD_OWVAR 2
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: PUSH
16402: LD_INT 21
16404: PUSH
16405: LD_INT 2
16407: PUSH
16408: EMPTY
16409: LIST
16410: LIST
16411: PUSH
16412: LD_INT 2
16414: PUSH
16415: LD_INT 34
16417: PUSH
16418: LD_INT 12
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PUSH
16425: LD_INT 34
16427: PUSH
16428: LD_INT 51
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 34
16437: PUSH
16438: LD_INT 32
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: LIST
16455: PPUSH
16456: CALL_OW 69
16460: ST_TO_ADDR
// if not tmp then
16461: LD_VAR 0 2
16465: NOT
16466: IFFALSE 16470
// exit ;
16468: GO 16520
// for i in tmp do
16470: LD_ADDR_VAR 0 1
16474: PUSH
16475: LD_VAR 0 2
16479: PUSH
16480: FOR_IN
16481: IFFALSE 16518
// if GetCargo ( i , mat_artifact ) = 0 then
16483: LD_VAR 0 1
16487: PPUSH
16488: LD_INT 4
16490: PPUSH
16491: CALL_OW 289
16495: PUSH
16496: LD_INT 0
16498: EQUAL
16499: IFFALSE 16516
// SetCargo ( i , mat_siberit , 100 ) ;
16501: LD_VAR 0 1
16505: PPUSH
16506: LD_INT 3
16508: PPUSH
16509: LD_INT 100
16511: PPUSH
16512: CALL_OW 290
16516: GO 16480
16518: POP
16519: POP
// end ;
16520: PPOPN 2
16522: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16523: LD_EXP 26
16527: PUSH
16528: LD_EXP 71
16532: AND
16533: IFFALSE 16716
16535: GO 16537
16537: DISABLE
16538: LD_INT 0
16540: PPUSH
16541: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16542: LD_ADDR_VAR 0 2
16546: PUSH
16547: LD_INT 22
16549: PUSH
16550: LD_OWVAR 2
16554: PUSH
16555: EMPTY
16556: LIST
16557: LIST
16558: PPUSH
16559: CALL_OW 69
16563: ST_TO_ADDR
// if not tmp then
16564: LD_VAR 0 2
16568: NOT
16569: IFFALSE 16573
// exit ;
16571: GO 16716
// for i := 1 to 2 do
16573: LD_ADDR_VAR 0 1
16577: PUSH
16578: DOUBLE
16579: LD_INT 1
16581: DEC
16582: ST_TO_ADDR
16583: LD_INT 2
16585: PUSH
16586: FOR_TO
16587: IFFALSE 16714
// begin uc_side := your_side ;
16589: LD_ADDR_OWVAR 20
16593: PUSH
16594: LD_OWVAR 2
16598: ST_TO_ADDR
// uc_nation := nation_american ;
16599: LD_ADDR_OWVAR 21
16603: PUSH
16604: LD_INT 1
16606: ST_TO_ADDR
// vc_chassis := us_morphling ;
16607: LD_ADDR_OWVAR 37
16611: PUSH
16612: LD_INT 5
16614: ST_TO_ADDR
// vc_engine := engine_siberite ;
16615: LD_ADDR_OWVAR 39
16619: PUSH
16620: LD_INT 3
16622: ST_TO_ADDR
// vc_control := control_computer ;
16623: LD_ADDR_OWVAR 38
16627: PUSH
16628: LD_INT 3
16630: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16631: LD_ADDR_OWVAR 40
16635: PUSH
16636: LD_INT 10
16638: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16639: LD_VAR 0 2
16643: PUSH
16644: LD_INT 1
16646: ARRAY
16647: PPUSH
16648: CALL_OW 310
16652: NOT
16653: IFFALSE 16700
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16655: CALL_OW 45
16659: PPUSH
16660: LD_VAR 0 2
16664: PUSH
16665: LD_INT 1
16667: ARRAY
16668: PPUSH
16669: CALL_OW 250
16673: PPUSH
16674: LD_VAR 0 2
16678: PUSH
16679: LD_INT 1
16681: ARRAY
16682: PPUSH
16683: CALL_OW 251
16687: PPUSH
16688: LD_INT 12
16690: PPUSH
16691: LD_INT 1
16693: PPUSH
16694: CALL_OW 50
16698: GO 16712
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16700: CALL_OW 45
16704: PPUSH
16705: LD_INT 1
16707: PPUSH
16708: CALL_OW 51
// end ;
16712: GO 16586
16714: POP
16715: POP
// end ;
16716: PPOPN 2
16718: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16719: LD_EXP 26
16723: PUSH
16724: LD_EXP 72
16728: AND
16729: IFFALSE 16951
16731: GO 16733
16733: DISABLE
16734: LD_INT 0
16736: PPUSH
16737: PPUSH
16738: PPUSH
16739: PPUSH
16740: PPUSH
16741: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16742: LD_ADDR_VAR 0 6
16746: PUSH
16747: LD_INT 22
16749: PUSH
16750: LD_OWVAR 2
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: PUSH
16759: LD_INT 21
16761: PUSH
16762: LD_INT 1
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: PUSH
16769: LD_INT 3
16771: PUSH
16772: LD_INT 23
16774: PUSH
16775: LD_INT 0
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: LIST
16790: PPUSH
16791: CALL_OW 69
16795: ST_TO_ADDR
// if not tmp then
16796: LD_VAR 0 6
16800: NOT
16801: IFFALSE 16805
// exit ;
16803: GO 16951
// s1 := rand ( 1 , 4 ) ;
16805: LD_ADDR_VAR 0 2
16809: PUSH
16810: LD_INT 1
16812: PPUSH
16813: LD_INT 4
16815: PPUSH
16816: CALL_OW 12
16820: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16821: LD_ADDR_VAR 0 4
16825: PUSH
16826: LD_VAR 0 6
16830: PUSH
16831: LD_INT 1
16833: ARRAY
16834: PPUSH
16835: LD_VAR 0 2
16839: PPUSH
16840: CALL_OW 259
16844: ST_TO_ADDR
// if s1 = 1 then
16845: LD_VAR 0 2
16849: PUSH
16850: LD_INT 1
16852: EQUAL
16853: IFFALSE 16873
// s2 := rand ( 2 , 4 ) else
16855: LD_ADDR_VAR 0 3
16859: PUSH
16860: LD_INT 2
16862: PPUSH
16863: LD_INT 4
16865: PPUSH
16866: CALL_OW 12
16870: ST_TO_ADDR
16871: GO 16881
// s2 := 1 ;
16873: LD_ADDR_VAR 0 3
16877: PUSH
16878: LD_INT 1
16880: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16881: LD_ADDR_VAR 0 5
16885: PUSH
16886: LD_VAR 0 6
16890: PUSH
16891: LD_INT 1
16893: ARRAY
16894: PPUSH
16895: LD_VAR 0 3
16899: PPUSH
16900: CALL_OW 259
16904: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16905: LD_VAR 0 6
16909: PUSH
16910: LD_INT 1
16912: ARRAY
16913: PPUSH
16914: LD_VAR 0 2
16918: PPUSH
16919: LD_VAR 0 5
16923: PPUSH
16924: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16928: LD_VAR 0 6
16932: PUSH
16933: LD_INT 1
16935: ARRAY
16936: PPUSH
16937: LD_VAR 0 3
16941: PPUSH
16942: LD_VAR 0 4
16946: PPUSH
16947: CALL_OW 237
// end ;
16951: PPOPN 6
16953: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16954: LD_EXP 26
16958: PUSH
16959: LD_EXP 73
16963: AND
16964: IFFALSE 17043
16966: GO 16968
16968: DISABLE
16969: LD_INT 0
16971: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16972: LD_ADDR_VAR 0 1
16976: PUSH
16977: LD_INT 22
16979: PUSH
16980: LD_OWVAR 2
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PUSH
16989: LD_INT 30
16991: PUSH
16992: LD_INT 3
16994: PUSH
16995: EMPTY
16996: LIST
16997: LIST
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: PPUSH
17003: CALL_OW 69
17007: ST_TO_ADDR
// if not tmp then
17008: LD_VAR 0 1
17012: NOT
17013: IFFALSE 17017
// exit ;
17015: GO 17043
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17017: LD_VAR 0 1
17021: PUSH
17022: LD_INT 1
17024: PPUSH
17025: LD_VAR 0 1
17029: PPUSH
17030: CALL_OW 12
17034: ARRAY
17035: PPUSH
17036: LD_INT 1
17038: PPUSH
17039: CALL_OW 234
// end ;
17043: PPOPN 1
17045: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17046: LD_EXP 26
17050: PUSH
17051: LD_EXP 74
17055: AND
17056: IFFALSE 17168
17058: GO 17060
17060: DISABLE
17061: LD_INT 0
17063: PPUSH
17064: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17065: LD_ADDR_VAR 0 2
17069: PUSH
17070: LD_INT 22
17072: PUSH
17073: LD_OWVAR 2
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PUSH
17082: LD_INT 2
17084: PUSH
17085: LD_INT 30
17087: PUSH
17088: LD_INT 27
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PUSH
17095: LD_INT 30
17097: PUSH
17098: LD_INT 26
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: PUSH
17105: LD_INT 30
17107: PUSH
17108: LD_INT 28
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PPUSH
17125: CALL_OW 69
17129: ST_TO_ADDR
// if not tmp then
17130: LD_VAR 0 2
17134: NOT
17135: IFFALSE 17139
// exit ;
17137: GO 17168
// for i in tmp do
17139: LD_ADDR_VAR 0 1
17143: PUSH
17144: LD_VAR 0 2
17148: PUSH
17149: FOR_IN
17150: IFFALSE 17166
// SetLives ( i , 1 ) ;
17152: LD_VAR 0 1
17156: PPUSH
17157: LD_INT 1
17159: PPUSH
17160: CALL_OW 234
17164: GO 17149
17166: POP
17167: POP
// end ;
17168: PPOPN 2
17170: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17171: LD_EXP 26
17175: PUSH
17176: LD_EXP 75
17180: AND
17181: IFFALSE 17468
17183: GO 17185
17185: DISABLE
17186: LD_INT 0
17188: PPUSH
17189: PPUSH
17190: PPUSH
// begin i := rand ( 1 , 7 ) ;
17191: LD_ADDR_VAR 0 1
17195: PUSH
17196: LD_INT 1
17198: PPUSH
17199: LD_INT 7
17201: PPUSH
17202: CALL_OW 12
17206: ST_TO_ADDR
// case i of 1 :
17207: LD_VAR 0 1
17211: PUSH
17212: LD_INT 1
17214: DOUBLE
17215: EQUAL
17216: IFTRUE 17220
17218: GO 17230
17220: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17221: LD_STRING earthquake(getX(game), 0, 32)
17223: PPUSH
17224: CALL_OW 559
17228: GO 17468
17230: LD_INT 2
17232: DOUBLE
17233: EQUAL
17234: IFTRUE 17238
17236: GO 17252
17238: POP
// begin ToLua ( displayStucuk(); ) ;
17239: LD_STRING displayStucuk();
17241: PPUSH
17242: CALL_OW 559
// ResetFog ;
17246: CALL_OW 335
// end ; 3 :
17250: GO 17468
17252: LD_INT 3
17254: DOUBLE
17255: EQUAL
17256: IFTRUE 17260
17258: GO 17364
17260: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17261: LD_ADDR_VAR 0 2
17265: PUSH
17266: LD_INT 22
17268: PUSH
17269: LD_OWVAR 2
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 25
17280: PUSH
17281: LD_INT 1
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: PPUSH
17292: CALL_OW 69
17296: ST_TO_ADDR
// if not tmp then
17297: LD_VAR 0 2
17301: NOT
17302: IFFALSE 17306
// exit ;
17304: GO 17468
// un := tmp [ rand ( 1 , tmp ) ] ;
17306: LD_ADDR_VAR 0 3
17310: PUSH
17311: LD_VAR 0 2
17315: PUSH
17316: LD_INT 1
17318: PPUSH
17319: LD_VAR 0 2
17323: PPUSH
17324: CALL_OW 12
17328: ARRAY
17329: ST_TO_ADDR
// if Crawls ( un ) then
17330: LD_VAR 0 3
17334: PPUSH
17335: CALL_OW 318
17339: IFFALSE 17350
// ComWalk ( un ) ;
17341: LD_VAR 0 3
17345: PPUSH
17346: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17350: LD_VAR 0 3
17354: PPUSH
17355: LD_INT 8
17357: PPUSH
17358: CALL_OW 336
// end ; 4 :
17362: GO 17468
17364: LD_INT 4
17366: DOUBLE
17367: EQUAL
17368: IFTRUE 17372
17370: GO 17446
17372: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17373: LD_ADDR_VAR 0 2
17377: PUSH
17378: LD_INT 22
17380: PUSH
17381: LD_OWVAR 2
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: PUSH
17390: LD_INT 30
17392: PUSH
17393: LD_INT 29
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: PUSH
17400: EMPTY
17401: LIST
17402: LIST
17403: PPUSH
17404: CALL_OW 69
17408: ST_TO_ADDR
// if not tmp then
17409: LD_VAR 0 2
17413: NOT
17414: IFFALSE 17418
// exit ;
17416: GO 17468
// CenterNowOnUnits ( tmp [ 1 ] ) ;
17418: LD_VAR 0 2
17422: PUSH
17423: LD_INT 1
17425: ARRAY
17426: PPUSH
17427: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
17431: LD_VAR 0 2
17435: PUSH
17436: LD_INT 1
17438: ARRAY
17439: PPUSH
17440: CALL_OW 65
// end ; 5 .. 7 :
17444: GO 17468
17446: LD_INT 5
17448: DOUBLE
17449: GREATEREQUAL
17450: IFFALSE 17458
17452: LD_INT 7
17454: DOUBLE
17455: LESSEQUAL
17456: IFTRUE 17460
17458: GO 17467
17460: POP
// StreamSibBomb ; end ;
17461: CALL 13705 0 0
17465: GO 17468
17467: POP
// end ;
17468: PPOPN 3
17470: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17471: LD_EXP 26
17475: PUSH
17476: LD_EXP 76
17480: AND
17481: IFFALSE 17637
17483: GO 17485
17485: DISABLE
17486: LD_INT 0
17488: PPUSH
17489: PPUSH
17490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17491: LD_ADDR_VAR 0 2
17495: PUSH
17496: LD_INT 81
17498: PUSH
17499: LD_OWVAR 2
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 2
17510: PUSH
17511: LD_INT 21
17513: PUSH
17514: LD_INT 1
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 21
17523: PUSH
17524: LD_INT 2
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: LIST
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: PPUSH
17540: CALL_OW 69
17544: ST_TO_ADDR
// if not tmp then
17545: LD_VAR 0 2
17549: NOT
17550: IFFALSE 17554
// exit ;
17552: GO 17637
// p := 0 ;
17554: LD_ADDR_VAR 0 3
17558: PUSH
17559: LD_INT 0
17561: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17562: LD_INT 35
17564: PPUSH
17565: CALL_OW 67
// p := p + 1 ;
17569: LD_ADDR_VAR 0 3
17573: PUSH
17574: LD_VAR 0 3
17578: PUSH
17579: LD_INT 1
17581: PLUS
17582: ST_TO_ADDR
// for i in tmp do
17583: LD_ADDR_VAR 0 1
17587: PUSH
17588: LD_VAR 0 2
17592: PUSH
17593: FOR_IN
17594: IFFALSE 17625
// if GetLives ( i ) < 1000 then
17596: LD_VAR 0 1
17600: PPUSH
17601: CALL_OW 256
17605: PUSH
17606: LD_INT 1000
17608: LESS
17609: IFFALSE 17623
// SetLives ( i , 1000 ) ;
17611: LD_VAR 0 1
17615: PPUSH
17616: LD_INT 1000
17618: PPUSH
17619: CALL_OW 234
17623: GO 17593
17625: POP
17626: POP
// until p > 20 ;
17627: LD_VAR 0 3
17631: PUSH
17632: LD_INT 20
17634: GREATER
17635: IFFALSE 17562
// end ;
17637: PPOPN 3
17639: END
// every 0 0$1 trigger StreamModeActive and sTime do
17640: LD_EXP 26
17644: PUSH
17645: LD_EXP 77
17649: AND
17650: IFFALSE 17685
17652: GO 17654
17654: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17655: LD_INT 28
17657: PPUSH
17658: LD_OWVAR 2
17662: PPUSH
17663: LD_INT 2
17665: PPUSH
17666: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17670: LD_INT 30
17672: PPUSH
17673: LD_OWVAR 2
17677: PPUSH
17678: LD_INT 2
17680: PPUSH
17681: CALL_OW 322
// end ;
17685: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17686: LD_EXP 26
17690: PUSH
17691: LD_EXP 78
17695: AND
17696: IFFALSE 17817
17698: GO 17700
17700: DISABLE
17701: LD_INT 0
17703: PPUSH
17704: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17705: LD_ADDR_VAR 0 2
17709: PUSH
17710: LD_INT 22
17712: PUSH
17713: LD_OWVAR 2
17717: PUSH
17718: EMPTY
17719: LIST
17720: LIST
17721: PUSH
17722: LD_INT 21
17724: PUSH
17725: LD_INT 1
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 3
17734: PUSH
17735: LD_INT 23
17737: PUSH
17738: LD_INT 0
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: LIST
17753: PPUSH
17754: CALL_OW 69
17758: ST_TO_ADDR
// if not tmp then
17759: LD_VAR 0 2
17763: NOT
17764: IFFALSE 17768
// exit ;
17766: GO 17817
// for i in tmp do
17768: LD_ADDR_VAR 0 1
17772: PUSH
17773: LD_VAR 0 2
17777: PUSH
17778: FOR_IN
17779: IFFALSE 17815
// begin if Crawls ( i ) then
17781: LD_VAR 0 1
17785: PPUSH
17786: CALL_OW 318
17790: IFFALSE 17801
// ComWalk ( i ) ;
17792: LD_VAR 0 1
17796: PPUSH
17797: CALL_OW 138
// SetClass ( i , 2 ) ;
17801: LD_VAR 0 1
17805: PPUSH
17806: LD_INT 2
17808: PPUSH
17809: CALL_OW 336
// end ;
17813: GO 17778
17815: POP
17816: POP
// end ;
17817: PPOPN 2
17819: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17820: LD_EXP 26
17824: PUSH
17825: LD_EXP 79
17829: AND
17830: IFFALSE 18118
17832: GO 17834
17834: DISABLE
17835: LD_INT 0
17837: PPUSH
17838: PPUSH
17839: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17840: LD_OWVAR 2
17844: PPUSH
17845: LD_INT 9
17847: PPUSH
17848: LD_INT 1
17850: PPUSH
17851: LD_INT 1
17853: PPUSH
17854: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17858: LD_INT 9
17860: PPUSH
17861: LD_OWVAR 2
17865: PPUSH
17866: CALL_OW 343
// uc_side := 9 ;
17870: LD_ADDR_OWVAR 20
17874: PUSH
17875: LD_INT 9
17877: ST_TO_ADDR
// uc_nation := 2 ;
17878: LD_ADDR_OWVAR 21
17882: PUSH
17883: LD_INT 2
17885: ST_TO_ADDR
// hc_name := Dark Warrior ;
17886: LD_ADDR_OWVAR 26
17890: PUSH
17891: LD_STRING Dark Warrior
17893: ST_TO_ADDR
// hc_gallery :=  ;
17894: LD_ADDR_OWVAR 33
17898: PUSH
17899: LD_STRING 
17901: ST_TO_ADDR
// hc_noskilllimit := true ;
17902: LD_ADDR_OWVAR 76
17906: PUSH
17907: LD_INT 1
17909: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17910: LD_ADDR_OWVAR 31
17914: PUSH
17915: LD_INT 30
17917: PUSH
17918: LD_INT 30
17920: PUSH
17921: LD_INT 30
17923: PUSH
17924: LD_INT 30
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: ST_TO_ADDR
// un := CreateHuman ;
17933: LD_ADDR_VAR 0 3
17937: PUSH
17938: CALL_OW 44
17942: ST_TO_ADDR
// hc_noskilllimit := false ;
17943: LD_ADDR_OWVAR 76
17947: PUSH
17948: LD_INT 0
17950: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17951: LD_VAR 0 3
17955: PPUSH
17956: LD_INT 1
17958: PPUSH
17959: CALL_OW 51
// ToLua ( playRanger() ) ;
17963: LD_STRING playRanger()
17965: PPUSH
17966: CALL_OW 559
// p := 0 ;
17970: LD_ADDR_VAR 0 2
17974: PUSH
17975: LD_INT 0
17977: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17978: LD_INT 35
17980: PPUSH
17981: CALL_OW 67
// p := p + 1 ;
17985: LD_ADDR_VAR 0 2
17989: PUSH
17990: LD_VAR 0 2
17994: PUSH
17995: LD_INT 1
17997: PLUS
17998: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17999: LD_VAR 0 3
18003: PPUSH
18004: CALL_OW 256
18008: PUSH
18009: LD_INT 1000
18011: LESS
18012: IFFALSE 18026
// SetLives ( un , 1000 ) ;
18014: LD_VAR 0 3
18018: PPUSH
18019: LD_INT 1000
18021: PPUSH
18022: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18026: LD_VAR 0 3
18030: PPUSH
18031: LD_INT 81
18033: PUSH
18034: LD_OWVAR 2
18038: PUSH
18039: EMPTY
18040: LIST
18041: LIST
18042: PUSH
18043: LD_INT 91
18045: PUSH
18046: LD_VAR 0 3
18050: PUSH
18051: LD_INT 30
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: LIST
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PPUSH
18063: CALL_OW 69
18067: PPUSH
18068: LD_VAR 0 3
18072: PPUSH
18073: CALL_OW 74
18077: PPUSH
18078: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
18082: LD_VAR 0 2
18086: PUSH
18087: LD_INT 80
18089: GREATER
18090: PUSH
18091: LD_VAR 0 3
18095: PPUSH
18096: CALL_OW 301
18100: OR
18101: IFFALSE 17978
// if un then
18103: LD_VAR 0 3
18107: IFFALSE 18118
// RemoveUnit ( un ) ;
18109: LD_VAR 0 3
18113: PPUSH
18114: CALL_OW 64
// end ;
18118: PPOPN 3
18120: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
18121: LD_EXP 80
18125: IFFALSE 18241
18127: GO 18129
18129: DISABLE
18130: LD_INT 0
18132: PPUSH
18133: PPUSH
18134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18135: LD_ADDR_VAR 0 2
18139: PUSH
18140: LD_INT 81
18142: PUSH
18143: LD_OWVAR 2
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: LD_INT 21
18154: PUSH
18155: LD_INT 1
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: PPUSH
18166: CALL_OW 69
18170: ST_TO_ADDR
// ToLua ( playComputer() ) ;
18171: LD_STRING playComputer()
18173: PPUSH
18174: CALL_OW 559
// if not tmp then
18178: LD_VAR 0 2
18182: NOT
18183: IFFALSE 18187
// exit ;
18185: GO 18241
// for i in tmp do
18187: LD_ADDR_VAR 0 1
18191: PUSH
18192: LD_VAR 0 2
18196: PUSH
18197: FOR_IN
18198: IFFALSE 18239
// for j := 1 to 4 do
18200: LD_ADDR_VAR 0 3
18204: PUSH
18205: DOUBLE
18206: LD_INT 1
18208: DEC
18209: ST_TO_ADDR
18210: LD_INT 4
18212: PUSH
18213: FOR_TO
18214: IFFALSE 18235
// SetSkill ( i , j , 10 ) ;
18216: LD_VAR 0 1
18220: PPUSH
18221: LD_VAR 0 3
18225: PPUSH
18226: LD_INT 10
18228: PPUSH
18229: CALL_OW 237
18233: GO 18213
18235: POP
18236: POP
18237: GO 18197
18239: POP
18240: POP
// end ;
18241: PPOPN 3
18243: END
// every 0 0$1 trigger s30 do var i , tmp ;
18244: LD_EXP 81
18248: IFFALSE 18317
18250: GO 18252
18252: DISABLE
18253: LD_INT 0
18255: PPUSH
18256: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18257: LD_ADDR_VAR 0 2
18261: PUSH
18262: LD_INT 22
18264: PUSH
18265: LD_OWVAR 2
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PPUSH
18274: CALL_OW 69
18278: ST_TO_ADDR
// if not tmp then
18279: LD_VAR 0 2
18283: NOT
18284: IFFALSE 18288
// exit ;
18286: GO 18317
// for i in tmp do
18288: LD_ADDR_VAR 0 1
18292: PUSH
18293: LD_VAR 0 2
18297: PUSH
18298: FOR_IN
18299: IFFALSE 18315
// SetLives ( i , 300 ) ;
18301: LD_VAR 0 1
18305: PPUSH
18306: LD_INT 300
18308: PPUSH
18309: CALL_OW 234
18313: GO 18298
18315: POP
18316: POP
// end ;
18317: PPOPN 2
18319: END
// every 0 0$1 trigger s60 do var i , tmp ;
18320: LD_EXP 82
18324: IFFALSE 18393
18326: GO 18328
18328: DISABLE
18329: LD_INT 0
18331: PPUSH
18332: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18333: LD_ADDR_VAR 0 2
18337: PUSH
18338: LD_INT 22
18340: PUSH
18341: LD_OWVAR 2
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PPUSH
18350: CALL_OW 69
18354: ST_TO_ADDR
// if not tmp then
18355: LD_VAR 0 2
18359: NOT
18360: IFFALSE 18364
// exit ;
18362: GO 18393
// for i in tmp do
18364: LD_ADDR_VAR 0 1
18368: PUSH
18369: LD_VAR 0 2
18373: PUSH
18374: FOR_IN
18375: IFFALSE 18391
// SetLives ( i , 600 ) ;
18377: LD_VAR 0 1
18381: PPUSH
18382: LD_INT 600
18384: PPUSH
18385: CALL_OW 234
18389: GO 18374
18391: POP
18392: POP
// end ;
18393: PPOPN 2
18395: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18396: LD_INT 0
18398: PPUSH
// case cmd of 301 :
18399: LD_VAR 0 1
18403: PUSH
18404: LD_INT 301
18406: DOUBLE
18407: EQUAL
18408: IFTRUE 18412
18410: GO 18444
18412: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18413: LD_VAR 0 6
18417: PPUSH
18418: LD_VAR 0 7
18422: PPUSH
18423: LD_VAR 0 8
18427: PPUSH
18428: LD_VAR 0 4
18432: PPUSH
18433: LD_VAR 0 5
18437: PPUSH
18438: CALL 19653 0 5
18442: GO 18565
18444: LD_INT 302
18446: DOUBLE
18447: EQUAL
18448: IFTRUE 18452
18450: GO 18489
18452: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18453: LD_VAR 0 6
18457: PPUSH
18458: LD_VAR 0 7
18462: PPUSH
18463: LD_VAR 0 8
18467: PPUSH
18468: LD_VAR 0 9
18472: PPUSH
18473: LD_VAR 0 4
18477: PPUSH
18478: LD_VAR 0 5
18482: PPUSH
18483: CALL 19744 0 6
18487: GO 18565
18489: LD_INT 303
18491: DOUBLE
18492: EQUAL
18493: IFTRUE 18497
18495: GO 18534
18497: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18498: LD_VAR 0 6
18502: PPUSH
18503: LD_VAR 0 7
18507: PPUSH
18508: LD_VAR 0 8
18512: PPUSH
18513: LD_VAR 0 9
18517: PPUSH
18518: LD_VAR 0 4
18522: PPUSH
18523: LD_VAR 0 5
18527: PPUSH
18528: CALL 18570 0 6
18532: GO 18565
18534: LD_INT 304
18536: DOUBLE
18537: EQUAL
18538: IFTRUE 18542
18540: GO 18564
18542: POP
// hHackTeleport ( unit , x , y ) ; end ;
18543: LD_VAR 0 2
18547: PPUSH
18548: LD_VAR 0 4
18552: PPUSH
18553: LD_VAR 0 5
18557: PPUSH
18558: CALL 20337 0 3
18562: GO 18565
18564: POP
// end ;
18565: LD_VAR 0 12
18569: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18570: LD_INT 0
18572: PPUSH
18573: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18574: LD_VAR 0 1
18578: PUSH
18579: LD_INT 1
18581: LESS
18582: PUSH
18583: LD_VAR 0 1
18587: PUSH
18588: LD_INT 3
18590: GREATER
18591: OR
18592: PUSH
18593: LD_VAR 0 5
18597: PPUSH
18598: LD_VAR 0 6
18602: PPUSH
18603: CALL_OW 428
18607: OR
18608: IFFALSE 18612
// exit ;
18610: GO 19340
// uc_side := your_side ;
18612: LD_ADDR_OWVAR 20
18616: PUSH
18617: LD_OWVAR 2
18621: ST_TO_ADDR
// uc_nation := nation ;
18622: LD_ADDR_OWVAR 21
18626: PUSH
18627: LD_VAR 0 1
18631: ST_TO_ADDR
// bc_level = 1 ;
18632: LD_ADDR_OWVAR 43
18636: PUSH
18637: LD_INT 1
18639: ST_TO_ADDR
// case btype of 1 :
18640: LD_VAR 0 2
18644: PUSH
18645: LD_INT 1
18647: DOUBLE
18648: EQUAL
18649: IFTRUE 18653
18651: GO 18664
18653: POP
// bc_type := b_depot ; 2 :
18654: LD_ADDR_OWVAR 42
18658: PUSH
18659: LD_INT 0
18661: ST_TO_ADDR
18662: GO 19284
18664: LD_INT 2
18666: DOUBLE
18667: EQUAL
18668: IFTRUE 18672
18670: GO 18683
18672: POP
// bc_type := b_warehouse ; 3 :
18673: LD_ADDR_OWVAR 42
18677: PUSH
18678: LD_INT 1
18680: ST_TO_ADDR
18681: GO 19284
18683: LD_INT 3
18685: DOUBLE
18686: EQUAL
18687: IFTRUE 18691
18689: GO 18702
18691: POP
// bc_type := b_lab ; 4 .. 9 :
18692: LD_ADDR_OWVAR 42
18696: PUSH
18697: LD_INT 6
18699: ST_TO_ADDR
18700: GO 19284
18702: LD_INT 4
18704: DOUBLE
18705: GREATEREQUAL
18706: IFFALSE 18714
18708: LD_INT 9
18710: DOUBLE
18711: LESSEQUAL
18712: IFTRUE 18716
18714: GO 18776
18716: POP
// begin bc_type := b_lab_half ;
18717: LD_ADDR_OWVAR 42
18721: PUSH
18722: LD_INT 7
18724: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18725: LD_ADDR_OWVAR 44
18729: PUSH
18730: LD_INT 10
18732: PUSH
18733: LD_INT 11
18735: PUSH
18736: LD_INT 12
18738: PUSH
18739: LD_INT 15
18741: PUSH
18742: LD_INT 14
18744: PUSH
18745: LD_INT 13
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: PUSH
18756: LD_VAR 0 2
18760: PUSH
18761: LD_INT 3
18763: MINUS
18764: ARRAY
18765: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
18766: LD_ADDR_OWVAR 45
18770: PUSH
18771: LD_INT 9
18773: ST_TO_ADDR
// end ; 10 .. 13 :
18774: GO 19284
18776: LD_INT 10
18778: DOUBLE
18779: GREATEREQUAL
18780: IFFALSE 18788
18782: LD_INT 13
18784: DOUBLE
18785: LESSEQUAL
18786: IFTRUE 18790
18788: GO 18867
18790: POP
// begin bc_type := b_lab_full ;
18791: LD_ADDR_OWVAR 42
18795: PUSH
18796: LD_INT 8
18798: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18799: LD_ADDR_OWVAR 44
18803: PUSH
18804: LD_INT 10
18806: PUSH
18807: LD_INT 12
18809: PUSH
18810: LD_INT 14
18812: PUSH
18813: LD_INT 13
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: PUSH
18822: LD_VAR 0 2
18826: PUSH
18827: LD_INT 9
18829: MINUS
18830: ARRAY
18831: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18832: LD_ADDR_OWVAR 45
18836: PUSH
18837: LD_INT 11
18839: PUSH
18840: LD_INT 15
18842: PUSH
18843: LD_INT 12
18845: PUSH
18846: LD_INT 15
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: PUSH
18855: LD_VAR 0 2
18859: PUSH
18860: LD_INT 9
18862: MINUS
18863: ARRAY
18864: ST_TO_ADDR
// end ; 14 :
18865: GO 19284
18867: LD_INT 14
18869: DOUBLE
18870: EQUAL
18871: IFTRUE 18875
18873: GO 18886
18875: POP
// bc_type := b_workshop ; 15 :
18876: LD_ADDR_OWVAR 42
18880: PUSH
18881: LD_INT 2
18883: ST_TO_ADDR
18884: GO 19284
18886: LD_INT 15
18888: DOUBLE
18889: EQUAL
18890: IFTRUE 18894
18892: GO 18905
18894: POP
// bc_type := b_factory ; 16 :
18895: LD_ADDR_OWVAR 42
18899: PUSH
18900: LD_INT 3
18902: ST_TO_ADDR
18903: GO 19284
18905: LD_INT 16
18907: DOUBLE
18908: EQUAL
18909: IFTRUE 18913
18911: GO 18924
18913: POP
// bc_type := b_ext_gun ; 17 :
18914: LD_ADDR_OWVAR 42
18918: PUSH
18919: LD_INT 17
18921: ST_TO_ADDR
18922: GO 19284
18924: LD_INT 17
18926: DOUBLE
18927: EQUAL
18928: IFTRUE 18932
18930: GO 18960
18932: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18933: LD_ADDR_OWVAR 42
18937: PUSH
18938: LD_INT 19
18940: PUSH
18941: LD_INT 23
18943: PUSH
18944: LD_INT 19
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: LIST
18951: PUSH
18952: LD_VAR 0 1
18956: ARRAY
18957: ST_TO_ADDR
18958: GO 19284
18960: LD_INT 18
18962: DOUBLE
18963: EQUAL
18964: IFTRUE 18968
18966: GO 18979
18968: POP
// bc_type := b_ext_radar ; 19 :
18969: LD_ADDR_OWVAR 42
18973: PUSH
18974: LD_INT 20
18976: ST_TO_ADDR
18977: GO 19284
18979: LD_INT 19
18981: DOUBLE
18982: EQUAL
18983: IFTRUE 18987
18985: GO 18998
18987: POP
// bc_type := b_ext_radio ; 20 :
18988: LD_ADDR_OWVAR 42
18992: PUSH
18993: LD_INT 22
18995: ST_TO_ADDR
18996: GO 19284
18998: LD_INT 20
19000: DOUBLE
19001: EQUAL
19002: IFTRUE 19006
19004: GO 19017
19006: POP
// bc_type := b_ext_siberium ; 21 :
19007: LD_ADDR_OWVAR 42
19011: PUSH
19012: LD_INT 21
19014: ST_TO_ADDR
19015: GO 19284
19017: LD_INT 21
19019: DOUBLE
19020: EQUAL
19021: IFTRUE 19025
19023: GO 19036
19025: POP
// bc_type := b_ext_computer ; 22 :
19026: LD_ADDR_OWVAR 42
19030: PUSH
19031: LD_INT 24
19033: ST_TO_ADDR
19034: GO 19284
19036: LD_INT 22
19038: DOUBLE
19039: EQUAL
19040: IFTRUE 19044
19042: GO 19055
19044: POP
// bc_type := b_ext_track ; 23 :
19045: LD_ADDR_OWVAR 42
19049: PUSH
19050: LD_INT 16
19052: ST_TO_ADDR
19053: GO 19284
19055: LD_INT 23
19057: DOUBLE
19058: EQUAL
19059: IFTRUE 19063
19061: GO 19074
19063: POP
// bc_type := b_ext_laser ; 24 :
19064: LD_ADDR_OWVAR 42
19068: PUSH
19069: LD_INT 25
19071: ST_TO_ADDR
19072: GO 19284
19074: LD_INT 24
19076: DOUBLE
19077: EQUAL
19078: IFTRUE 19082
19080: GO 19093
19082: POP
// bc_type := b_control_tower ; 25 :
19083: LD_ADDR_OWVAR 42
19087: PUSH
19088: LD_INT 36
19090: ST_TO_ADDR
19091: GO 19284
19093: LD_INT 25
19095: DOUBLE
19096: EQUAL
19097: IFTRUE 19101
19099: GO 19112
19101: POP
// bc_type := b_breastwork ; 26 :
19102: LD_ADDR_OWVAR 42
19106: PUSH
19107: LD_INT 31
19109: ST_TO_ADDR
19110: GO 19284
19112: LD_INT 26
19114: DOUBLE
19115: EQUAL
19116: IFTRUE 19120
19118: GO 19131
19120: POP
// bc_type := b_bunker ; 27 :
19121: LD_ADDR_OWVAR 42
19125: PUSH
19126: LD_INT 32
19128: ST_TO_ADDR
19129: GO 19284
19131: LD_INT 27
19133: DOUBLE
19134: EQUAL
19135: IFTRUE 19139
19137: GO 19150
19139: POP
// bc_type := b_turret ; 28 :
19140: LD_ADDR_OWVAR 42
19144: PUSH
19145: LD_INT 33
19147: ST_TO_ADDR
19148: GO 19284
19150: LD_INT 28
19152: DOUBLE
19153: EQUAL
19154: IFTRUE 19158
19156: GO 19169
19158: POP
// bc_type := b_armoury ; 29 :
19159: LD_ADDR_OWVAR 42
19163: PUSH
19164: LD_INT 4
19166: ST_TO_ADDR
19167: GO 19284
19169: LD_INT 29
19171: DOUBLE
19172: EQUAL
19173: IFTRUE 19177
19175: GO 19188
19177: POP
// bc_type := b_barracks ; 30 :
19178: LD_ADDR_OWVAR 42
19182: PUSH
19183: LD_INT 5
19185: ST_TO_ADDR
19186: GO 19284
19188: LD_INT 30
19190: DOUBLE
19191: EQUAL
19192: IFTRUE 19196
19194: GO 19207
19196: POP
// bc_type := b_solar_power ; 31 :
19197: LD_ADDR_OWVAR 42
19201: PUSH
19202: LD_INT 27
19204: ST_TO_ADDR
19205: GO 19284
19207: LD_INT 31
19209: DOUBLE
19210: EQUAL
19211: IFTRUE 19215
19213: GO 19226
19215: POP
// bc_type := b_oil_power ; 32 :
19216: LD_ADDR_OWVAR 42
19220: PUSH
19221: LD_INT 26
19223: ST_TO_ADDR
19224: GO 19284
19226: LD_INT 32
19228: DOUBLE
19229: EQUAL
19230: IFTRUE 19234
19232: GO 19245
19234: POP
// bc_type := b_siberite_power ; 33 :
19235: LD_ADDR_OWVAR 42
19239: PUSH
19240: LD_INT 28
19242: ST_TO_ADDR
19243: GO 19284
19245: LD_INT 33
19247: DOUBLE
19248: EQUAL
19249: IFTRUE 19253
19251: GO 19264
19253: POP
// bc_type := b_oil_mine ; 34 :
19254: LD_ADDR_OWVAR 42
19258: PUSH
19259: LD_INT 29
19261: ST_TO_ADDR
19262: GO 19284
19264: LD_INT 34
19266: DOUBLE
19267: EQUAL
19268: IFTRUE 19272
19270: GO 19283
19272: POP
// bc_type := b_siberite_mine ; end ;
19273: LD_ADDR_OWVAR 42
19277: PUSH
19278: LD_INT 30
19280: ST_TO_ADDR
19281: GO 19284
19283: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19284: LD_ADDR_VAR 0 8
19288: PUSH
19289: LD_VAR 0 5
19293: PPUSH
19294: LD_VAR 0 6
19298: PPUSH
19299: LD_VAR 0 3
19303: PPUSH
19304: CALL_OW 47
19308: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19309: LD_OWVAR 42
19313: PUSH
19314: LD_INT 32
19316: PUSH
19317: LD_INT 33
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: IN
19324: IFFALSE 19340
// PlaceWeaponTurret ( b , weapon ) ;
19326: LD_VAR 0 8
19330: PPUSH
19331: LD_VAR 0 4
19335: PPUSH
19336: CALL_OW 431
// end ;
19340: LD_VAR 0 7
19344: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19345: LD_INT 0
19347: PPUSH
19348: PPUSH
19349: PPUSH
19350: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19351: LD_ADDR_VAR 0 4
19355: PUSH
19356: LD_INT 22
19358: PUSH
19359: LD_OWVAR 2
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 2
19370: PUSH
19371: LD_INT 30
19373: PUSH
19374: LD_INT 0
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: LD_INT 30
19383: PUSH
19384: LD_INT 1
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: LIST
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PPUSH
19400: CALL_OW 69
19404: ST_TO_ADDR
// if not tmp then
19405: LD_VAR 0 4
19409: NOT
19410: IFFALSE 19414
// exit ;
19412: GO 19473
// for i in tmp do
19414: LD_ADDR_VAR 0 2
19418: PUSH
19419: LD_VAR 0 4
19423: PUSH
19424: FOR_IN
19425: IFFALSE 19471
// for j = 1 to 3 do
19427: LD_ADDR_VAR 0 3
19431: PUSH
19432: DOUBLE
19433: LD_INT 1
19435: DEC
19436: ST_TO_ADDR
19437: LD_INT 3
19439: PUSH
19440: FOR_TO
19441: IFFALSE 19467
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19443: LD_VAR 0 2
19447: PPUSH
19448: CALL_OW 274
19452: PPUSH
19453: LD_VAR 0 3
19457: PPUSH
19458: LD_INT 99999
19460: PPUSH
19461: CALL_OW 277
19465: GO 19440
19467: POP
19468: POP
19469: GO 19424
19471: POP
19472: POP
// end ;
19473: LD_VAR 0 1
19477: RET
// export function hHackSetLevel10 ; var i , j ; begin
19478: LD_INT 0
19480: PPUSH
19481: PPUSH
19482: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19483: LD_ADDR_VAR 0 2
19487: PUSH
19488: LD_INT 21
19490: PUSH
19491: LD_INT 1
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PPUSH
19498: CALL_OW 69
19502: PUSH
19503: FOR_IN
19504: IFFALSE 19556
// if IsSelected ( i ) then
19506: LD_VAR 0 2
19510: PPUSH
19511: CALL_OW 306
19515: IFFALSE 19554
// begin for j := 1 to 4 do
19517: LD_ADDR_VAR 0 3
19521: PUSH
19522: DOUBLE
19523: LD_INT 1
19525: DEC
19526: ST_TO_ADDR
19527: LD_INT 4
19529: PUSH
19530: FOR_TO
19531: IFFALSE 19552
// SetSkill ( i , j , 10 ) ;
19533: LD_VAR 0 2
19537: PPUSH
19538: LD_VAR 0 3
19542: PPUSH
19543: LD_INT 10
19545: PPUSH
19546: CALL_OW 237
19550: GO 19530
19552: POP
19553: POP
// end ;
19554: GO 19503
19556: POP
19557: POP
// end ;
19558: LD_VAR 0 1
19562: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19563: LD_INT 0
19565: PPUSH
19566: PPUSH
19567: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19568: LD_ADDR_VAR 0 2
19572: PUSH
19573: LD_INT 22
19575: PUSH
19576: LD_OWVAR 2
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: LD_INT 21
19587: PUSH
19588: LD_INT 1
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: PPUSH
19599: CALL_OW 69
19603: PUSH
19604: FOR_IN
19605: IFFALSE 19646
// begin for j := 1 to 4 do
19607: LD_ADDR_VAR 0 3
19611: PUSH
19612: DOUBLE
19613: LD_INT 1
19615: DEC
19616: ST_TO_ADDR
19617: LD_INT 4
19619: PUSH
19620: FOR_TO
19621: IFFALSE 19642
// SetSkill ( i , j , 10 ) ;
19623: LD_VAR 0 2
19627: PPUSH
19628: LD_VAR 0 3
19632: PPUSH
19633: LD_INT 10
19635: PPUSH
19636: CALL_OW 237
19640: GO 19620
19642: POP
19643: POP
// end ;
19644: GO 19604
19646: POP
19647: POP
// end ;
19648: LD_VAR 0 1
19652: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19653: LD_INT 0
19655: PPUSH
// uc_side := your_side ;
19656: LD_ADDR_OWVAR 20
19660: PUSH
19661: LD_OWVAR 2
19665: ST_TO_ADDR
// uc_nation := nation ;
19666: LD_ADDR_OWVAR 21
19670: PUSH
19671: LD_VAR 0 1
19675: ST_TO_ADDR
// InitHc ;
19676: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19680: LD_INT 0
19682: PPUSH
19683: LD_VAR 0 2
19687: PPUSH
19688: LD_VAR 0 3
19692: PPUSH
19693: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19697: LD_VAR 0 4
19701: PPUSH
19702: LD_VAR 0 5
19706: PPUSH
19707: CALL_OW 428
19711: PUSH
19712: LD_INT 0
19714: EQUAL
19715: IFFALSE 19739
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19717: CALL_OW 44
19721: PPUSH
19722: LD_VAR 0 4
19726: PPUSH
19727: LD_VAR 0 5
19731: PPUSH
19732: LD_INT 1
19734: PPUSH
19735: CALL_OW 48
// end ;
19739: LD_VAR 0 6
19743: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19744: LD_INT 0
19746: PPUSH
19747: PPUSH
// uc_side := your_side ;
19748: LD_ADDR_OWVAR 20
19752: PUSH
19753: LD_OWVAR 2
19757: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19758: LD_VAR 0 1
19762: PUSH
19763: LD_INT 1
19765: PUSH
19766: LD_INT 2
19768: PUSH
19769: LD_INT 3
19771: PUSH
19772: LD_INT 4
19774: PUSH
19775: LD_INT 5
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: IN
19785: IFFALSE 19797
// uc_nation := nation_american else
19787: LD_ADDR_OWVAR 21
19791: PUSH
19792: LD_INT 1
19794: ST_TO_ADDR
19795: GO 19840
// if chassis in [ 11 , 12 , 13 , 14 ] then
19797: LD_VAR 0 1
19801: PUSH
19802: LD_INT 11
19804: PUSH
19805: LD_INT 12
19807: PUSH
19808: LD_INT 13
19810: PUSH
19811: LD_INT 14
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: IN
19820: IFFALSE 19832
// uc_nation := nation_arabian else
19822: LD_ADDR_OWVAR 21
19826: PUSH
19827: LD_INT 2
19829: ST_TO_ADDR
19830: GO 19840
// uc_nation := nation_russian ;
19832: LD_ADDR_OWVAR 21
19836: PUSH
19837: LD_INT 3
19839: ST_TO_ADDR
// vc_chassis := chassis ;
19840: LD_ADDR_OWVAR 37
19844: PUSH
19845: LD_VAR 0 1
19849: ST_TO_ADDR
// vc_engine := engine ;
19850: LD_ADDR_OWVAR 39
19854: PUSH
19855: LD_VAR 0 2
19859: ST_TO_ADDR
// vc_control := control ;
19860: LD_ADDR_OWVAR 38
19864: PUSH
19865: LD_VAR 0 3
19869: ST_TO_ADDR
// vc_weapon := weapon ;
19870: LD_ADDR_OWVAR 40
19874: PUSH
19875: LD_VAR 0 4
19879: ST_TO_ADDR
// un := CreateVehicle ;
19880: LD_ADDR_VAR 0 8
19884: PUSH
19885: CALL_OW 45
19889: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19890: LD_VAR 0 8
19894: PPUSH
19895: LD_INT 0
19897: PPUSH
19898: LD_INT 5
19900: PPUSH
19901: CALL_OW 12
19905: PPUSH
19906: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19910: LD_VAR 0 8
19914: PPUSH
19915: LD_VAR 0 5
19919: PPUSH
19920: LD_VAR 0 6
19924: PPUSH
19925: LD_INT 1
19927: PPUSH
19928: CALL_OW 48
// end ;
19932: LD_VAR 0 7
19936: RET
// export hInvincible ; every 1 do
19937: GO 19939
19939: DISABLE
// hInvincible := [ ] ;
19940: LD_ADDR_EXP 83
19944: PUSH
19945: EMPTY
19946: ST_TO_ADDR
19947: END
// every 10 do var i ;
19948: GO 19950
19950: DISABLE
19951: LD_INT 0
19953: PPUSH
// begin enable ;
19954: ENABLE
// if not hInvincible then
19955: LD_EXP 83
19959: NOT
19960: IFFALSE 19964
// exit ;
19962: GO 20008
// for i in hInvincible do
19964: LD_ADDR_VAR 0 1
19968: PUSH
19969: LD_EXP 83
19973: PUSH
19974: FOR_IN
19975: IFFALSE 20006
// if GetLives ( i ) < 1000 then
19977: LD_VAR 0 1
19981: PPUSH
19982: CALL_OW 256
19986: PUSH
19987: LD_INT 1000
19989: LESS
19990: IFFALSE 20004
// SetLives ( i , 1000 ) ;
19992: LD_VAR 0 1
19996: PPUSH
19997: LD_INT 1000
19999: PPUSH
20000: CALL_OW 234
20004: GO 19974
20006: POP
20007: POP
// end ;
20008: PPOPN 1
20010: END
// export function hHackInvincible ; var i ; begin
20011: LD_INT 0
20013: PPUSH
20014: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20015: LD_ADDR_VAR 0 2
20019: PUSH
20020: LD_INT 2
20022: PUSH
20023: LD_INT 21
20025: PUSH
20026: LD_INT 1
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PUSH
20033: LD_INT 21
20035: PUSH
20036: LD_INT 2
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: LIST
20047: PPUSH
20048: CALL_OW 69
20052: PUSH
20053: FOR_IN
20054: IFFALSE 20115
// if IsSelected ( i ) then
20056: LD_VAR 0 2
20060: PPUSH
20061: CALL_OW 306
20065: IFFALSE 20113
// begin if i in hInvincible then
20067: LD_VAR 0 2
20071: PUSH
20072: LD_EXP 83
20076: IN
20077: IFFALSE 20097
// hInvincible := hInvincible diff i else
20079: LD_ADDR_EXP 83
20083: PUSH
20084: LD_EXP 83
20088: PUSH
20089: LD_VAR 0 2
20093: DIFF
20094: ST_TO_ADDR
20095: GO 20113
// hInvincible := hInvincible union i ;
20097: LD_ADDR_EXP 83
20101: PUSH
20102: LD_EXP 83
20106: PUSH
20107: LD_VAR 0 2
20111: UNION
20112: ST_TO_ADDR
// end ;
20113: GO 20053
20115: POP
20116: POP
// end ;
20117: LD_VAR 0 1
20121: RET
// export function hHackInvisible ; var i , j ; begin
20122: LD_INT 0
20124: PPUSH
20125: PPUSH
20126: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20127: LD_ADDR_VAR 0 2
20131: PUSH
20132: LD_INT 21
20134: PUSH
20135: LD_INT 1
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: PPUSH
20142: CALL_OW 69
20146: PUSH
20147: FOR_IN
20148: IFFALSE 20172
// if IsSelected ( i ) then
20150: LD_VAR 0 2
20154: PPUSH
20155: CALL_OW 306
20159: IFFALSE 20170
// ComForceInvisible ( i ) ;
20161: LD_VAR 0 2
20165: PPUSH
20166: CALL_OW 496
20170: GO 20147
20172: POP
20173: POP
// end ;
20174: LD_VAR 0 1
20178: RET
// export function hHackChangeYourSide ; begin
20179: LD_INT 0
20181: PPUSH
// if your_side = 8 then
20182: LD_OWVAR 2
20186: PUSH
20187: LD_INT 8
20189: EQUAL
20190: IFFALSE 20202
// your_side := 0 else
20192: LD_ADDR_OWVAR 2
20196: PUSH
20197: LD_INT 0
20199: ST_TO_ADDR
20200: GO 20216
// your_side := your_side + 1 ;
20202: LD_ADDR_OWVAR 2
20206: PUSH
20207: LD_OWVAR 2
20211: PUSH
20212: LD_INT 1
20214: PLUS
20215: ST_TO_ADDR
// end ;
20216: LD_VAR 0 1
20220: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20221: LD_INT 0
20223: PPUSH
20224: PPUSH
20225: PPUSH
// for i in all_units do
20226: LD_ADDR_VAR 0 2
20230: PUSH
20231: LD_OWVAR 3
20235: PUSH
20236: FOR_IN
20237: IFFALSE 20315
// if IsSelected ( i ) then
20239: LD_VAR 0 2
20243: PPUSH
20244: CALL_OW 306
20248: IFFALSE 20313
// begin j := GetSide ( i ) ;
20250: LD_ADDR_VAR 0 3
20254: PUSH
20255: LD_VAR 0 2
20259: PPUSH
20260: CALL_OW 255
20264: ST_TO_ADDR
// if j = 8 then
20265: LD_VAR 0 3
20269: PUSH
20270: LD_INT 8
20272: EQUAL
20273: IFFALSE 20285
// j := 0 else
20275: LD_ADDR_VAR 0 3
20279: PUSH
20280: LD_INT 0
20282: ST_TO_ADDR
20283: GO 20299
// j := j + 1 ;
20285: LD_ADDR_VAR 0 3
20289: PUSH
20290: LD_VAR 0 3
20294: PUSH
20295: LD_INT 1
20297: PLUS
20298: ST_TO_ADDR
// SetSide ( i , j ) ;
20299: LD_VAR 0 2
20303: PPUSH
20304: LD_VAR 0 3
20308: PPUSH
20309: CALL_OW 235
// end ;
20313: GO 20236
20315: POP
20316: POP
// end ;
20317: LD_VAR 0 1
20321: RET
// export function hHackFog ; begin
20322: LD_INT 0
20324: PPUSH
// FogOff ( true ) ;
20325: LD_INT 1
20327: PPUSH
20328: CALL_OW 344
// end ;
20332: LD_VAR 0 1
20336: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20337: LD_INT 0
20339: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20340: LD_VAR 0 1
20344: PPUSH
20345: LD_VAR 0 2
20349: PPUSH
20350: LD_VAR 0 3
20354: PPUSH
20355: LD_INT 1
20357: PPUSH
20358: LD_INT 1
20360: PPUSH
20361: CALL_OW 483
// CenterOnXY ( x , y ) ;
20365: LD_VAR 0 2
20369: PPUSH
20370: LD_VAR 0 3
20374: PPUSH
20375: CALL_OW 84
// end ;
20379: LD_VAR 0 4
20383: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
20384: LD_INT 0
20386: PPUSH
20387: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
20388: LD_VAR 0 1
20392: NOT
20393: PUSH
20394: LD_VAR 0 2
20398: PPUSH
20399: LD_VAR 0 3
20403: PPUSH
20404: CALL_OW 488
20408: NOT
20409: OR
20410: PUSH
20411: LD_VAR 0 1
20415: PPUSH
20416: CALL_OW 266
20420: PUSH
20421: LD_INT 3
20423: NONEQUAL
20424: PUSH
20425: LD_VAR 0 1
20429: PPUSH
20430: CALL_OW 247
20434: PUSH
20435: LD_INT 1
20437: EQUAL
20438: NOT
20439: AND
20440: OR
20441: IFFALSE 20445
// exit ;
20443: GO 20594
// if GetType ( factory ) = unit_human then
20445: LD_VAR 0 1
20449: PPUSH
20450: CALL_OW 247
20454: PUSH
20455: LD_INT 1
20457: EQUAL
20458: IFFALSE 20475
// factory := IsInUnit ( factory ) ;
20460: LD_ADDR_VAR 0 1
20464: PUSH
20465: LD_VAR 0 1
20469: PPUSH
20470: CALL_OW 310
20474: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
20475: LD_VAR 0 1
20479: PPUSH
20480: CALL_OW 266
20484: PUSH
20485: LD_INT 3
20487: NONEQUAL
20488: IFFALSE 20492
// exit ;
20490: GO 20594
// if HexInfo ( x , y ) = factory then
20492: LD_VAR 0 2
20496: PPUSH
20497: LD_VAR 0 3
20501: PPUSH
20502: CALL_OW 428
20506: PUSH
20507: LD_VAR 0 1
20511: EQUAL
20512: IFFALSE 20539
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20514: LD_ADDR_EXP 84
20518: PUSH
20519: LD_EXP 84
20523: PPUSH
20524: LD_VAR 0 1
20528: PPUSH
20529: LD_INT 0
20531: PPUSH
20532: CALL_OW 1
20536: ST_TO_ADDR
20537: GO 20590
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
20539: LD_ADDR_EXP 84
20543: PUSH
20544: LD_EXP 84
20548: PPUSH
20549: LD_VAR 0 1
20553: PPUSH
20554: LD_VAR 0 1
20558: PPUSH
20559: CALL_OW 255
20563: PUSH
20564: LD_VAR 0 1
20568: PUSH
20569: LD_VAR 0 2
20573: PUSH
20574: LD_VAR 0 3
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: PPUSH
20585: CALL_OW 1
20589: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20590: CALL 20599 0 0
// end ;
20594: LD_VAR 0 4
20598: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
20599: LD_INT 0
20601: PPUSH
20602: PPUSH
20603: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20604: LD_STRING resetFactoryWaypoint();
20606: PPUSH
20607: CALL_OW 559
// if factoryWaypoints then
20611: LD_EXP 84
20615: IFFALSE 20741
// begin list := PrepareArray ( factoryWaypoints ) ;
20617: LD_ADDR_VAR 0 3
20621: PUSH
20622: LD_EXP 84
20626: PPUSH
20627: CALL 68049 0 1
20631: ST_TO_ADDR
// for i := 1 to list do
20632: LD_ADDR_VAR 0 2
20636: PUSH
20637: DOUBLE
20638: LD_INT 1
20640: DEC
20641: ST_TO_ADDR
20642: LD_VAR 0 3
20646: PUSH
20647: FOR_TO
20648: IFFALSE 20739
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20650: LD_STRING setFactoryWaypointXY(
20652: PUSH
20653: LD_VAR 0 3
20657: PUSH
20658: LD_VAR 0 2
20662: ARRAY
20663: PUSH
20664: LD_INT 1
20666: ARRAY
20667: STR
20668: PUSH
20669: LD_STRING ,
20671: STR
20672: PUSH
20673: LD_VAR 0 3
20677: PUSH
20678: LD_VAR 0 2
20682: ARRAY
20683: PUSH
20684: LD_INT 2
20686: ARRAY
20687: STR
20688: PUSH
20689: LD_STRING ,
20691: STR
20692: PUSH
20693: LD_VAR 0 3
20697: PUSH
20698: LD_VAR 0 2
20702: ARRAY
20703: PUSH
20704: LD_INT 3
20706: ARRAY
20707: STR
20708: PUSH
20709: LD_STRING ,
20711: STR
20712: PUSH
20713: LD_VAR 0 3
20717: PUSH
20718: LD_VAR 0 2
20722: ARRAY
20723: PUSH
20724: LD_INT 4
20726: ARRAY
20727: STR
20728: PUSH
20729: LD_STRING )
20731: STR
20732: PPUSH
20733: CALL_OW 559
20737: GO 20647
20739: POP
20740: POP
// end ; end ;
20741: LD_VAR 0 1
20745: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20746: LD_INT 0
20748: PPUSH
// if HexInfo ( x , y ) = warehouse then
20749: LD_VAR 0 2
20753: PPUSH
20754: LD_VAR 0 3
20758: PPUSH
20759: CALL_OW 428
20763: PUSH
20764: LD_VAR 0 1
20768: EQUAL
20769: IFFALSE 20796
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20771: LD_ADDR_EXP 85
20775: PUSH
20776: LD_EXP 85
20780: PPUSH
20781: LD_VAR 0 1
20785: PPUSH
20786: LD_INT 0
20788: PPUSH
20789: CALL_OW 1
20793: ST_TO_ADDR
20794: GO 20847
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20796: LD_ADDR_EXP 85
20800: PUSH
20801: LD_EXP 85
20805: PPUSH
20806: LD_VAR 0 1
20810: PPUSH
20811: LD_VAR 0 1
20815: PPUSH
20816: CALL_OW 255
20820: PUSH
20821: LD_VAR 0 1
20825: PUSH
20826: LD_VAR 0 2
20830: PUSH
20831: LD_VAR 0 3
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: PPUSH
20842: CALL_OW 1
20846: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20847: CALL 20856 0 0
// end ;
20851: LD_VAR 0 4
20855: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
20856: LD_INT 0
20858: PPUSH
20859: PPUSH
20860: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
20861: LD_STRING resetWarehouseGatheringPoints();
20863: PPUSH
20864: CALL_OW 559
// if warehouseGatheringPoints then
20868: LD_EXP 85
20872: IFFALSE 20998
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
20874: LD_ADDR_VAR 0 3
20878: PUSH
20879: LD_EXP 85
20883: PPUSH
20884: CALL 68049 0 1
20888: ST_TO_ADDR
// for i := 1 to list do
20889: LD_ADDR_VAR 0 2
20893: PUSH
20894: DOUBLE
20895: LD_INT 1
20897: DEC
20898: ST_TO_ADDR
20899: LD_VAR 0 3
20903: PUSH
20904: FOR_TO
20905: IFFALSE 20996
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20907: LD_STRING setWarehouseGatheringPointXY(
20909: PUSH
20910: LD_VAR 0 3
20914: PUSH
20915: LD_VAR 0 2
20919: ARRAY
20920: PUSH
20921: LD_INT 1
20923: ARRAY
20924: STR
20925: PUSH
20926: LD_STRING ,
20928: STR
20929: PUSH
20930: LD_VAR 0 3
20934: PUSH
20935: LD_VAR 0 2
20939: ARRAY
20940: PUSH
20941: LD_INT 2
20943: ARRAY
20944: STR
20945: PUSH
20946: LD_STRING ,
20948: STR
20949: PUSH
20950: LD_VAR 0 3
20954: PUSH
20955: LD_VAR 0 2
20959: ARRAY
20960: PUSH
20961: LD_INT 3
20963: ARRAY
20964: STR
20965: PUSH
20966: LD_STRING ,
20968: STR
20969: PUSH
20970: LD_VAR 0 3
20974: PUSH
20975: LD_VAR 0 2
20979: ARRAY
20980: PUSH
20981: LD_INT 4
20983: ARRAY
20984: STR
20985: PUSH
20986: LD_STRING )
20988: STR
20989: PPUSH
20990: CALL_OW 559
20994: GO 20904
20996: POP
20997: POP
// end ; end ;
20998: LD_VAR 0 1
21002: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
21003: LD_EXP 85
21007: IFFALSE 21692
21009: GO 21011
21011: DISABLE
21012: LD_INT 0
21014: PPUSH
21015: PPUSH
21016: PPUSH
21017: PPUSH
21018: PPUSH
21019: PPUSH
21020: PPUSH
21021: PPUSH
21022: PPUSH
// begin enable ;
21023: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
21024: LD_ADDR_VAR 0 3
21028: PUSH
21029: LD_EXP 85
21033: PPUSH
21034: CALL 68049 0 1
21038: ST_TO_ADDR
// if not list then
21039: LD_VAR 0 3
21043: NOT
21044: IFFALSE 21048
// exit ;
21046: GO 21692
// for i := 1 to list do
21048: LD_ADDR_VAR 0 1
21052: PUSH
21053: DOUBLE
21054: LD_INT 1
21056: DEC
21057: ST_TO_ADDR
21058: LD_VAR 0 3
21062: PUSH
21063: FOR_TO
21064: IFFALSE 21690
// begin depot := list [ i ] [ 2 ] ;
21066: LD_ADDR_VAR 0 8
21070: PUSH
21071: LD_VAR 0 3
21075: PUSH
21076: LD_VAR 0 1
21080: ARRAY
21081: PUSH
21082: LD_INT 2
21084: ARRAY
21085: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
21086: LD_ADDR_VAR 0 5
21090: PUSH
21091: LD_VAR 0 3
21095: PUSH
21096: LD_VAR 0 1
21100: ARRAY
21101: PUSH
21102: LD_INT 1
21104: ARRAY
21105: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
21106: LD_VAR 0 8
21110: PPUSH
21111: CALL_OW 301
21115: PUSH
21116: LD_VAR 0 5
21120: PUSH
21121: LD_VAR 0 8
21125: PPUSH
21126: CALL_OW 255
21130: NONEQUAL
21131: OR
21132: IFFALSE 21161
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
21134: LD_ADDR_EXP 85
21138: PUSH
21139: LD_EXP 85
21143: PPUSH
21144: LD_VAR 0 8
21148: PPUSH
21149: LD_INT 0
21151: PPUSH
21152: CALL_OW 1
21156: ST_TO_ADDR
// exit ;
21157: POP
21158: POP
21159: GO 21692
// end ; x := list [ i ] [ 3 ] ;
21161: LD_ADDR_VAR 0 6
21165: PUSH
21166: LD_VAR 0 3
21170: PUSH
21171: LD_VAR 0 1
21175: ARRAY
21176: PUSH
21177: LD_INT 3
21179: ARRAY
21180: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
21181: LD_ADDR_VAR 0 7
21185: PUSH
21186: LD_VAR 0 3
21190: PUSH
21191: LD_VAR 0 1
21195: ARRAY
21196: PUSH
21197: LD_INT 4
21199: ARRAY
21200: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
21201: LD_ADDR_VAR 0 9
21205: PUSH
21206: LD_VAR 0 6
21210: PPUSH
21211: LD_VAR 0 7
21215: PPUSH
21216: LD_INT 16
21218: PPUSH
21219: CALL 66637 0 3
21223: ST_TO_ADDR
// if not cratesNearbyPoint then
21224: LD_VAR 0 9
21228: NOT
21229: IFFALSE 21235
// exit ;
21231: POP
21232: POP
21233: GO 21692
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
21235: LD_ADDR_VAR 0 4
21239: PUSH
21240: LD_INT 22
21242: PUSH
21243: LD_VAR 0 5
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: LD_INT 3
21254: PUSH
21255: LD_INT 60
21257: PUSH
21258: EMPTY
21259: LIST
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: PUSH
21265: LD_INT 91
21267: PUSH
21268: LD_VAR 0 8
21272: PUSH
21273: LD_INT 6
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: LIST
21280: PUSH
21281: LD_INT 2
21283: PUSH
21284: LD_INT 25
21286: PUSH
21287: LD_INT 2
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 25
21296: PUSH
21297: LD_INT 16
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: LIST
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: PPUSH
21315: CALL_OW 69
21319: PUSH
21320: LD_VAR 0 8
21324: PPUSH
21325: CALL_OW 313
21329: PPUSH
21330: LD_INT 3
21332: PUSH
21333: LD_INT 60
21335: PUSH
21336: EMPTY
21337: LIST
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PUSH
21343: LD_INT 2
21345: PUSH
21346: LD_INT 25
21348: PUSH
21349: LD_INT 2
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: LD_INT 25
21358: PUSH
21359: LD_INT 16
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: LIST
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PPUSH
21375: CALL_OW 72
21379: UNION
21380: ST_TO_ADDR
// if tmp then
21381: LD_VAR 0 4
21385: IFFALSE 21465
// begin tmp := ShrinkArray ( tmp , 3 ) ;
21387: LD_ADDR_VAR 0 4
21391: PUSH
21392: LD_VAR 0 4
21396: PPUSH
21397: LD_INT 3
21399: PPUSH
21400: CALL 64606 0 2
21404: ST_TO_ADDR
// for j in tmp do
21405: LD_ADDR_VAR 0 2
21409: PUSH
21410: LD_VAR 0 4
21414: PUSH
21415: FOR_IN
21416: IFFALSE 21459
// begin if IsInUnit ( j ) then
21418: LD_VAR 0 2
21422: PPUSH
21423: CALL_OW 310
21427: IFFALSE 21438
// ComExit ( j ) ;
21429: LD_VAR 0 2
21433: PPUSH
21434: CALL 64689 0 1
// AddComCollect ( j , x , y ) ;
21438: LD_VAR 0 2
21442: PPUSH
21443: LD_VAR 0 6
21447: PPUSH
21448: LD_VAR 0 7
21452: PPUSH
21453: CALL_OW 177
// end ;
21457: GO 21415
21459: POP
21460: POP
// exit ;
21461: POP
21462: POP
21463: GO 21692
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
21465: LD_ADDR_VAR 0 4
21469: PUSH
21470: LD_INT 22
21472: PUSH
21473: LD_VAR 0 5
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: PUSH
21482: LD_INT 91
21484: PUSH
21485: LD_VAR 0 8
21489: PUSH
21490: LD_INT 8
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: LIST
21497: PUSH
21498: LD_INT 2
21500: PUSH
21501: LD_INT 34
21503: PUSH
21504: LD_INT 12
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: LD_INT 34
21513: PUSH
21514: LD_INT 51
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: LD_INT 34
21523: PUSH
21524: LD_INT 32
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PUSH
21531: LD_INT 34
21533: PUSH
21534: LD_INT 89
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: PUSH
21548: EMPTY
21549: LIST
21550: LIST
21551: LIST
21552: PPUSH
21553: CALL_OW 69
21557: ST_TO_ADDR
// if tmp then
21558: LD_VAR 0 4
21562: IFFALSE 21688
// begin for j in tmp do
21564: LD_ADDR_VAR 0 2
21568: PUSH
21569: LD_VAR 0 4
21573: PUSH
21574: FOR_IN
21575: IFFALSE 21686
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
21577: LD_VAR 0 2
21581: PPUSH
21582: CALL_OW 262
21586: PUSH
21587: LD_INT 3
21589: EQUAL
21590: PUSH
21591: LD_VAR 0 2
21595: PPUSH
21596: CALL_OW 261
21600: PUSH
21601: LD_INT 20
21603: GREATER
21604: OR
21605: PUSH
21606: LD_VAR 0 2
21610: PPUSH
21611: CALL_OW 314
21615: NOT
21616: AND
21617: PUSH
21618: LD_VAR 0 2
21622: PPUSH
21623: CALL_OW 263
21627: PUSH
21628: LD_INT 1
21630: NONEQUAL
21631: PUSH
21632: LD_VAR 0 2
21636: PPUSH
21637: CALL_OW 311
21641: OR
21642: AND
21643: IFFALSE 21684
// begin ComCollect ( j , x , y ) ;
21645: LD_VAR 0 2
21649: PPUSH
21650: LD_VAR 0 6
21654: PPUSH
21655: LD_VAR 0 7
21659: PPUSH
21660: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
21664: LD_VAR 0 2
21668: PPUSH
21669: LD_VAR 0 8
21673: PPUSH
21674: CALL_OW 172
// exit ;
21678: POP
21679: POP
21680: POP
21681: POP
21682: GO 21692
// end ;
21684: GO 21574
21686: POP
21687: POP
// end ; end ;
21688: GO 21063
21690: POP
21691: POP
// end ; end_of_file
21692: PPOPN 9
21694: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21695: LD_INT 0
21697: PPUSH
21698: PPUSH
21699: PPUSH
21700: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21701: LD_VAR 0 1
21705: PPUSH
21706: CALL_OW 264
21710: PUSH
21711: LD_INT 91
21713: EQUAL
21714: IFFALSE 21786
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21716: LD_INT 68
21718: PPUSH
21719: LD_VAR 0 1
21723: PPUSH
21724: CALL_OW 255
21728: PPUSH
21729: CALL_OW 321
21733: PUSH
21734: LD_INT 2
21736: EQUAL
21737: IFFALSE 21749
// eff := 70 else
21739: LD_ADDR_VAR 0 4
21743: PUSH
21744: LD_INT 70
21746: ST_TO_ADDR
21747: GO 21757
// eff := 30 ;
21749: LD_ADDR_VAR 0 4
21753: PUSH
21754: LD_INT 30
21756: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21757: LD_VAR 0 1
21761: PPUSH
21762: CALL_OW 250
21766: PPUSH
21767: LD_VAR 0 1
21771: PPUSH
21772: CALL_OW 251
21776: PPUSH
21777: LD_VAR 0 4
21781: PPUSH
21782: CALL_OW 495
// end ; end ;
21786: LD_VAR 0 2
21790: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21791: LD_INT 0
21793: PPUSH
// end ;
21794: LD_VAR 0 4
21798: RET
// export function SOS_Command ( cmd ) ; begin
21799: LD_INT 0
21801: PPUSH
// end ;
21802: LD_VAR 0 2
21806: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21807: LD_INT 0
21809: PPUSH
// end ;
21810: LD_VAR 0 6
21814: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
21815: LD_INT 0
21817: PPUSH
21818: PPUSH
// if not vehicle or not factory then
21819: LD_VAR 0 1
21823: NOT
21824: PUSH
21825: LD_VAR 0 2
21829: NOT
21830: OR
21831: IFFALSE 21835
// exit ;
21833: GO 22066
// if factoryWaypoints >= factory then
21835: LD_EXP 84
21839: PUSH
21840: LD_VAR 0 2
21844: GREATEREQUAL
21845: IFFALSE 22066
// if factoryWaypoints [ factory ] then
21847: LD_EXP 84
21851: PUSH
21852: LD_VAR 0 2
21856: ARRAY
21857: IFFALSE 22066
// begin if GetControl ( vehicle ) = control_manual then
21859: LD_VAR 0 1
21863: PPUSH
21864: CALL_OW 263
21868: PUSH
21869: LD_INT 1
21871: EQUAL
21872: IFFALSE 21953
// begin driver := IsDrivenBy ( vehicle ) ;
21874: LD_ADDR_VAR 0 4
21878: PUSH
21879: LD_VAR 0 1
21883: PPUSH
21884: CALL_OW 311
21888: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21889: LD_VAR 0 4
21893: PPUSH
21894: LD_EXP 84
21898: PUSH
21899: LD_VAR 0 2
21903: ARRAY
21904: PUSH
21905: LD_INT 3
21907: ARRAY
21908: PPUSH
21909: LD_EXP 84
21913: PUSH
21914: LD_VAR 0 2
21918: ARRAY
21919: PUSH
21920: LD_INT 4
21922: ARRAY
21923: PPUSH
21924: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21928: LD_VAR 0 4
21932: PPUSH
21933: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21937: LD_VAR 0 4
21941: PPUSH
21942: LD_VAR 0 2
21946: PPUSH
21947: CALL_OW 180
// end else
21951: GO 22066
// if GetControl ( vehicle ) = control_remote then
21953: LD_VAR 0 1
21957: PPUSH
21958: CALL_OW 263
21962: PUSH
21963: LD_INT 2
21965: EQUAL
21966: IFFALSE 22027
// begin wait ( 0 0$2 ) ;
21968: LD_INT 70
21970: PPUSH
21971: CALL_OW 67
// if Connect ( vehicle ) then
21975: LD_VAR 0 1
21979: PPUSH
21980: CALL 34897 0 1
21984: IFFALSE 22025
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21986: LD_VAR 0 1
21990: PPUSH
21991: LD_EXP 84
21995: PUSH
21996: LD_VAR 0 2
22000: ARRAY
22001: PUSH
22002: LD_INT 3
22004: ARRAY
22005: PPUSH
22006: LD_EXP 84
22010: PUSH
22011: LD_VAR 0 2
22015: ARRAY
22016: PUSH
22017: LD_INT 4
22019: ARRAY
22020: PPUSH
22021: CALL_OW 171
// end else
22025: GO 22066
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22027: LD_VAR 0 1
22031: PPUSH
22032: LD_EXP 84
22036: PUSH
22037: LD_VAR 0 2
22041: ARRAY
22042: PUSH
22043: LD_INT 3
22045: ARRAY
22046: PPUSH
22047: LD_EXP 84
22051: PUSH
22052: LD_VAR 0 2
22056: ARRAY
22057: PUSH
22058: LD_INT 4
22060: ARRAY
22061: PPUSH
22062: CALL_OW 171
// end ; end ;
22066: LD_VAR 0 3
22070: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22071: LD_INT 0
22073: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22074: LD_VAR 0 1
22078: PUSH
22079: LD_INT 250
22081: EQUAL
22082: PUSH
22083: LD_VAR 0 2
22087: PPUSH
22088: CALL_OW 264
22092: PUSH
22093: LD_INT 81
22095: EQUAL
22096: AND
22097: IFFALSE 22118
// MinerPlaceMine ( unit , x , y ) ;
22099: LD_VAR 0 2
22103: PPUSH
22104: LD_VAR 0 4
22108: PPUSH
22109: LD_VAR 0 5
22113: PPUSH
22114: CALL 25108 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22118: LD_VAR 0 1
22122: PUSH
22123: LD_INT 251
22125: EQUAL
22126: PUSH
22127: LD_VAR 0 2
22131: PPUSH
22132: CALL_OW 264
22136: PUSH
22137: LD_INT 81
22139: EQUAL
22140: AND
22141: IFFALSE 22162
// MinerDetonateMine ( unit , x , y ) ;
22143: LD_VAR 0 2
22147: PPUSH
22148: LD_VAR 0 4
22152: PPUSH
22153: LD_VAR 0 5
22157: PPUSH
22158: CALL 25383 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22162: LD_VAR 0 1
22166: PUSH
22167: LD_INT 252
22169: EQUAL
22170: PUSH
22171: LD_VAR 0 2
22175: PPUSH
22176: CALL_OW 264
22180: PUSH
22181: LD_INT 81
22183: EQUAL
22184: AND
22185: IFFALSE 22206
// MinerCreateMinefield ( unit , x , y ) ;
22187: LD_VAR 0 2
22191: PPUSH
22192: LD_VAR 0 4
22196: PPUSH
22197: LD_VAR 0 5
22201: PPUSH
22202: CALL 25800 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22206: LD_VAR 0 1
22210: PUSH
22211: LD_INT 253
22213: EQUAL
22214: PUSH
22215: LD_VAR 0 2
22219: PPUSH
22220: CALL_OW 257
22224: PUSH
22225: LD_INT 5
22227: EQUAL
22228: AND
22229: IFFALSE 22250
// ComBinocular ( unit , x , y ) ;
22231: LD_VAR 0 2
22235: PPUSH
22236: LD_VAR 0 4
22240: PPUSH
22241: LD_VAR 0 5
22245: PPUSH
22246: CALL 26169 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22250: LD_VAR 0 1
22254: PUSH
22255: LD_INT 254
22257: EQUAL
22258: PUSH
22259: LD_VAR 0 2
22263: PPUSH
22264: CALL_OW 264
22268: PUSH
22269: LD_INT 99
22271: EQUAL
22272: AND
22273: PUSH
22274: LD_VAR 0 3
22278: PPUSH
22279: CALL_OW 263
22283: PUSH
22284: LD_INT 3
22286: EQUAL
22287: AND
22288: IFFALSE 22304
// HackDestroyVehicle ( unit , selectedUnit ) ;
22290: LD_VAR 0 2
22294: PPUSH
22295: LD_VAR 0 3
22299: PPUSH
22300: CALL 24472 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22304: LD_VAR 0 1
22308: PUSH
22309: LD_INT 255
22311: EQUAL
22312: PUSH
22313: LD_VAR 0 2
22317: PPUSH
22318: CALL_OW 264
22322: PUSH
22323: LD_INT 14
22325: PUSH
22326: LD_INT 53
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: IN
22333: AND
22334: PUSH
22335: LD_VAR 0 4
22339: PPUSH
22340: LD_VAR 0 5
22344: PPUSH
22345: CALL_OW 488
22349: AND
22350: IFFALSE 22374
// CutTreeXYR ( unit , x , y , 12 ) ;
22352: LD_VAR 0 2
22356: PPUSH
22357: LD_VAR 0 4
22361: PPUSH
22362: LD_VAR 0 5
22366: PPUSH
22367: LD_INT 12
22369: PPUSH
22370: CALL 22469 0 4
// if cmd = 256 then
22374: LD_VAR 0 1
22378: PUSH
22379: LD_INT 256
22381: EQUAL
22382: IFFALSE 22403
// SetFactoryWaypoint ( unit , x , y ) ;
22384: LD_VAR 0 2
22388: PPUSH
22389: LD_VAR 0 4
22393: PPUSH
22394: LD_VAR 0 5
22398: PPUSH
22399: CALL 20384 0 3
// if cmd = 257 then
22403: LD_VAR 0 1
22407: PUSH
22408: LD_INT 257
22410: EQUAL
22411: IFFALSE 22432
// SetWarehouseGatheringPoint ( unit , x , y ) ;
22413: LD_VAR 0 2
22417: PPUSH
22418: LD_VAR 0 4
22422: PPUSH
22423: LD_VAR 0 5
22427: PPUSH
22428: CALL 20746 0 3
// if cmd = 258 then
22432: LD_VAR 0 1
22436: PUSH
22437: LD_INT 258
22439: EQUAL
22440: IFFALSE 22464
// BurnTreeXYR ( unit , x , y , 8 ) ;
22442: LD_VAR 0 2
22446: PPUSH
22447: LD_VAR 0 4
22451: PPUSH
22452: LD_VAR 0 5
22456: PPUSH
22457: LD_INT 8
22459: PPUSH
22460: CALL 22863 0 4
// end ;
22464: LD_VAR 0 6
22468: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22469: LD_INT 0
22471: PPUSH
22472: PPUSH
22473: PPUSH
22474: PPUSH
22475: PPUSH
22476: PPUSH
22477: PPUSH
22478: PPUSH
22479: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
22480: LD_VAR 0 1
22484: PPUSH
22485: CALL_OW 302
22489: NOT
22490: PUSH
22491: LD_VAR 0 2
22495: PPUSH
22496: LD_VAR 0 3
22500: PPUSH
22501: CALL_OW 488
22505: NOT
22506: OR
22507: PUSH
22508: LD_VAR 0 4
22512: NOT
22513: OR
22514: IFFALSE 22518
// exit ;
22516: GO 22858
// list := [ ] ;
22518: LD_ADDR_VAR 0 13
22522: PUSH
22523: EMPTY
22524: ST_TO_ADDR
// if x - r < 0 then
22525: LD_VAR 0 2
22529: PUSH
22530: LD_VAR 0 4
22534: MINUS
22535: PUSH
22536: LD_INT 0
22538: LESS
22539: IFFALSE 22551
// min_x := 0 else
22541: LD_ADDR_VAR 0 7
22545: PUSH
22546: LD_INT 0
22548: ST_TO_ADDR
22549: GO 22567
// min_x := x - r ;
22551: LD_ADDR_VAR 0 7
22555: PUSH
22556: LD_VAR 0 2
22560: PUSH
22561: LD_VAR 0 4
22565: MINUS
22566: ST_TO_ADDR
// if y - r < 0 then
22567: LD_VAR 0 3
22571: PUSH
22572: LD_VAR 0 4
22576: MINUS
22577: PUSH
22578: LD_INT 0
22580: LESS
22581: IFFALSE 22593
// min_y := 0 else
22583: LD_ADDR_VAR 0 8
22587: PUSH
22588: LD_INT 0
22590: ST_TO_ADDR
22591: GO 22609
// min_y := y - r ;
22593: LD_ADDR_VAR 0 8
22597: PUSH
22598: LD_VAR 0 3
22602: PUSH
22603: LD_VAR 0 4
22607: MINUS
22608: ST_TO_ADDR
// max_x := x + r ;
22609: LD_ADDR_VAR 0 9
22613: PUSH
22614: LD_VAR 0 2
22618: PUSH
22619: LD_VAR 0 4
22623: PLUS
22624: ST_TO_ADDR
// max_y := y + r ;
22625: LD_ADDR_VAR 0 10
22629: PUSH
22630: LD_VAR 0 3
22634: PUSH
22635: LD_VAR 0 4
22639: PLUS
22640: ST_TO_ADDR
// for _x = min_x to max_x do
22641: LD_ADDR_VAR 0 11
22645: PUSH
22646: DOUBLE
22647: LD_VAR 0 7
22651: DEC
22652: ST_TO_ADDR
22653: LD_VAR 0 9
22657: PUSH
22658: FOR_TO
22659: IFFALSE 22776
// for _y = min_y to max_y do
22661: LD_ADDR_VAR 0 12
22665: PUSH
22666: DOUBLE
22667: LD_VAR 0 8
22671: DEC
22672: ST_TO_ADDR
22673: LD_VAR 0 10
22677: PUSH
22678: FOR_TO
22679: IFFALSE 22772
// begin if not ValidHex ( _x , _y ) then
22681: LD_VAR 0 11
22685: PPUSH
22686: LD_VAR 0 12
22690: PPUSH
22691: CALL_OW 488
22695: NOT
22696: IFFALSE 22700
// continue ;
22698: GO 22678
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22700: LD_VAR 0 11
22704: PPUSH
22705: LD_VAR 0 12
22709: PPUSH
22710: CALL_OW 351
22714: PUSH
22715: LD_VAR 0 11
22719: PPUSH
22720: LD_VAR 0 12
22724: PPUSH
22725: CALL_OW 554
22729: AND
22730: IFFALSE 22770
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22732: LD_ADDR_VAR 0 13
22736: PUSH
22737: LD_VAR 0 13
22741: PPUSH
22742: LD_VAR 0 13
22746: PUSH
22747: LD_INT 1
22749: PLUS
22750: PPUSH
22751: LD_VAR 0 11
22755: PUSH
22756: LD_VAR 0 12
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PPUSH
22765: CALL_OW 2
22769: ST_TO_ADDR
// end ;
22770: GO 22678
22772: POP
22773: POP
22774: GO 22658
22776: POP
22777: POP
// if not list then
22778: LD_VAR 0 13
22782: NOT
22783: IFFALSE 22787
// exit ;
22785: GO 22858
// for i in list do
22787: LD_ADDR_VAR 0 6
22791: PUSH
22792: LD_VAR 0 13
22796: PUSH
22797: FOR_IN
22798: IFFALSE 22856
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22800: LD_VAR 0 1
22804: PPUSH
22805: LD_STRING M
22807: PUSH
22808: LD_VAR 0 6
22812: PUSH
22813: LD_INT 1
22815: ARRAY
22816: PUSH
22817: LD_VAR 0 6
22821: PUSH
22822: LD_INT 2
22824: ARRAY
22825: PUSH
22826: LD_INT 0
22828: PUSH
22829: LD_INT 0
22831: PUSH
22832: LD_INT 0
22834: PUSH
22835: LD_INT 0
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: PUSH
22847: EMPTY
22848: LIST
22849: PPUSH
22850: CALL_OW 447
22854: GO 22797
22856: POP
22857: POP
// end ;
22858: LD_VAR 0 5
22862: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
22863: LD_INT 0
22865: PPUSH
22866: PPUSH
22867: PPUSH
22868: PPUSH
22869: PPUSH
22870: PPUSH
22871: PPUSH
22872: PPUSH
22873: PPUSH
22874: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
22875: LD_VAR 0 1
22879: PPUSH
22880: CALL_OW 302
22884: NOT
22885: PUSH
22886: LD_VAR 0 2
22890: PPUSH
22891: LD_VAR 0 3
22895: PPUSH
22896: CALL_OW 488
22900: NOT
22901: OR
22902: PUSH
22903: LD_VAR 0 4
22907: NOT
22908: OR
22909: IFFALSE 22913
// exit ;
22911: GO 23426
// list := [ ] ;
22913: LD_ADDR_VAR 0 13
22917: PUSH
22918: EMPTY
22919: ST_TO_ADDR
// if x - r < 0 then
22920: LD_VAR 0 2
22924: PUSH
22925: LD_VAR 0 4
22929: MINUS
22930: PUSH
22931: LD_INT 0
22933: LESS
22934: IFFALSE 22946
// min_x := 0 else
22936: LD_ADDR_VAR 0 7
22940: PUSH
22941: LD_INT 0
22943: ST_TO_ADDR
22944: GO 22962
// min_x := x - r ;
22946: LD_ADDR_VAR 0 7
22950: PUSH
22951: LD_VAR 0 2
22955: PUSH
22956: LD_VAR 0 4
22960: MINUS
22961: ST_TO_ADDR
// if y - r < 0 then
22962: LD_VAR 0 3
22966: PUSH
22967: LD_VAR 0 4
22971: MINUS
22972: PUSH
22973: LD_INT 0
22975: LESS
22976: IFFALSE 22988
// min_y := 0 else
22978: LD_ADDR_VAR 0 8
22982: PUSH
22983: LD_INT 0
22985: ST_TO_ADDR
22986: GO 23004
// min_y := y - r ;
22988: LD_ADDR_VAR 0 8
22992: PUSH
22993: LD_VAR 0 3
22997: PUSH
22998: LD_VAR 0 4
23002: MINUS
23003: ST_TO_ADDR
// max_x := x + r ;
23004: LD_ADDR_VAR 0 9
23008: PUSH
23009: LD_VAR 0 2
23013: PUSH
23014: LD_VAR 0 4
23018: PLUS
23019: ST_TO_ADDR
// max_y := y + r ;
23020: LD_ADDR_VAR 0 10
23024: PUSH
23025: LD_VAR 0 3
23029: PUSH
23030: LD_VAR 0 4
23034: PLUS
23035: ST_TO_ADDR
// for _x = min_x to max_x do
23036: LD_ADDR_VAR 0 11
23040: PUSH
23041: DOUBLE
23042: LD_VAR 0 7
23046: DEC
23047: ST_TO_ADDR
23048: LD_VAR 0 9
23052: PUSH
23053: FOR_TO
23054: IFFALSE 23171
// for _y = min_y to max_y do
23056: LD_ADDR_VAR 0 12
23060: PUSH
23061: DOUBLE
23062: LD_VAR 0 8
23066: DEC
23067: ST_TO_ADDR
23068: LD_VAR 0 10
23072: PUSH
23073: FOR_TO
23074: IFFALSE 23167
// begin if not ValidHex ( _x , _y ) then
23076: LD_VAR 0 11
23080: PPUSH
23081: LD_VAR 0 12
23085: PPUSH
23086: CALL_OW 488
23090: NOT
23091: IFFALSE 23095
// continue ;
23093: GO 23073
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23095: LD_VAR 0 11
23099: PPUSH
23100: LD_VAR 0 12
23104: PPUSH
23105: CALL_OW 351
23109: PUSH
23110: LD_VAR 0 11
23114: PPUSH
23115: LD_VAR 0 12
23119: PPUSH
23120: CALL_OW 554
23124: AND
23125: IFFALSE 23165
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23127: LD_ADDR_VAR 0 13
23131: PUSH
23132: LD_VAR 0 13
23136: PPUSH
23137: LD_VAR 0 13
23141: PUSH
23142: LD_INT 1
23144: PLUS
23145: PPUSH
23146: LD_VAR 0 11
23150: PUSH
23151: LD_VAR 0 12
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: PPUSH
23160: CALL_OW 2
23164: ST_TO_ADDR
// end ;
23165: GO 23073
23167: POP
23168: POP
23169: GO 23053
23171: POP
23172: POP
// if not list then
23173: LD_VAR 0 13
23177: NOT
23178: IFFALSE 23182
// exit ;
23180: GO 23426
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
23182: LD_ADDR_VAR 0 13
23186: PUSH
23187: LD_VAR 0 1
23191: PPUSH
23192: LD_VAR 0 13
23196: PPUSH
23197: LD_INT 1
23199: PPUSH
23200: LD_INT 1
23202: PPUSH
23203: CALL 32039 0 4
23207: ST_TO_ADDR
// ComStop ( flame ) ;
23208: LD_VAR 0 1
23212: PPUSH
23213: CALL_OW 141
// for i in list do
23217: LD_ADDR_VAR 0 6
23221: PUSH
23222: LD_VAR 0 13
23226: PUSH
23227: FOR_IN
23228: IFFALSE 23259
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
23230: LD_VAR 0 1
23234: PPUSH
23235: LD_VAR 0 6
23239: PUSH
23240: LD_INT 1
23242: ARRAY
23243: PPUSH
23244: LD_VAR 0 6
23248: PUSH
23249: LD_INT 2
23251: ARRAY
23252: PPUSH
23253: CALL_OW 176
23257: GO 23227
23259: POP
23260: POP
// repeat wait ( 0 0$1 ) ;
23261: LD_INT 35
23263: PPUSH
23264: CALL_OW 67
// task := GetTaskList ( flame ) ;
23268: LD_ADDR_VAR 0 14
23272: PUSH
23273: LD_VAR 0 1
23277: PPUSH
23278: CALL_OW 437
23282: ST_TO_ADDR
// if not task then
23283: LD_VAR 0 14
23287: NOT
23288: IFFALSE 23292
// exit ;
23290: GO 23426
// if task [ 1 ] [ 1 ] <> | then
23292: LD_VAR 0 14
23296: PUSH
23297: LD_INT 1
23299: ARRAY
23300: PUSH
23301: LD_INT 1
23303: ARRAY
23304: PUSH
23305: LD_STRING |
23307: NONEQUAL
23308: IFFALSE 23312
// exit ;
23310: GO 23426
// _x := task [ 1 ] [ 2 ] ;
23312: LD_ADDR_VAR 0 11
23316: PUSH
23317: LD_VAR 0 14
23321: PUSH
23322: LD_INT 1
23324: ARRAY
23325: PUSH
23326: LD_INT 2
23328: ARRAY
23329: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
23330: LD_ADDR_VAR 0 12
23334: PUSH
23335: LD_VAR 0 14
23339: PUSH
23340: LD_INT 1
23342: ARRAY
23343: PUSH
23344: LD_INT 3
23346: ARRAY
23347: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
23348: LD_VAR 0 11
23352: PPUSH
23353: LD_VAR 0 12
23357: PPUSH
23358: CALL_OW 351
23362: NOT
23363: PUSH
23364: LD_VAR 0 11
23368: PPUSH
23369: LD_VAR 0 12
23373: PPUSH
23374: CALL_OW 554
23378: NOT
23379: OR
23380: IFFALSE 23414
// begin task := Delete ( task , 1 ) ;
23382: LD_ADDR_VAR 0 14
23386: PUSH
23387: LD_VAR 0 14
23391: PPUSH
23392: LD_INT 1
23394: PPUSH
23395: CALL_OW 3
23399: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
23400: LD_VAR 0 1
23404: PPUSH
23405: LD_VAR 0 14
23409: PPUSH
23410: CALL_OW 446
// end ; until not HasTask ( flame ) ;
23414: LD_VAR 0 1
23418: PPUSH
23419: CALL_OW 314
23423: NOT
23424: IFFALSE 23261
// end ;
23426: LD_VAR 0 5
23430: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23431: LD_EXP 87
23435: NOT
23436: IFFALSE 23486
23438: GO 23440
23440: DISABLE
// begin initHack := true ;
23441: LD_ADDR_EXP 87
23445: PUSH
23446: LD_INT 1
23448: ST_TO_ADDR
// hackTanks := [ ] ;
23449: LD_ADDR_EXP 88
23453: PUSH
23454: EMPTY
23455: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23456: LD_ADDR_EXP 89
23460: PUSH
23461: EMPTY
23462: ST_TO_ADDR
// hackLimit := 3 ;
23463: LD_ADDR_EXP 90
23467: PUSH
23468: LD_INT 3
23470: ST_TO_ADDR
// hackDist := 12 ;
23471: LD_ADDR_EXP 91
23475: PUSH
23476: LD_INT 12
23478: ST_TO_ADDR
// hackCounter := [ ] ;
23479: LD_ADDR_EXP 92
23483: PUSH
23484: EMPTY
23485: ST_TO_ADDR
// end ;
23486: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23487: LD_EXP 87
23491: PUSH
23492: LD_INT 34
23494: PUSH
23495: LD_INT 99
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: PPUSH
23502: CALL_OW 69
23506: AND
23507: IFFALSE 23760
23509: GO 23511
23511: DISABLE
23512: LD_INT 0
23514: PPUSH
23515: PPUSH
// begin enable ;
23516: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23517: LD_ADDR_VAR 0 1
23521: PUSH
23522: LD_INT 34
23524: PUSH
23525: LD_INT 99
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: PPUSH
23532: CALL_OW 69
23536: PUSH
23537: FOR_IN
23538: IFFALSE 23758
// begin if not i in hackTanks then
23540: LD_VAR 0 1
23544: PUSH
23545: LD_EXP 88
23549: IN
23550: NOT
23551: IFFALSE 23634
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23553: LD_ADDR_EXP 88
23557: PUSH
23558: LD_EXP 88
23562: PPUSH
23563: LD_EXP 88
23567: PUSH
23568: LD_INT 1
23570: PLUS
23571: PPUSH
23572: LD_VAR 0 1
23576: PPUSH
23577: CALL_OW 1
23581: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23582: LD_ADDR_EXP 89
23586: PUSH
23587: LD_EXP 89
23591: PPUSH
23592: LD_EXP 89
23596: PUSH
23597: LD_INT 1
23599: PLUS
23600: PPUSH
23601: EMPTY
23602: PPUSH
23603: CALL_OW 1
23607: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23608: LD_ADDR_EXP 92
23612: PUSH
23613: LD_EXP 92
23617: PPUSH
23618: LD_EXP 92
23622: PUSH
23623: LD_INT 1
23625: PLUS
23626: PPUSH
23627: EMPTY
23628: PPUSH
23629: CALL_OW 1
23633: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23634: LD_VAR 0 1
23638: PPUSH
23639: CALL_OW 302
23643: NOT
23644: IFFALSE 23657
// begin HackUnlinkAll ( i ) ;
23646: LD_VAR 0 1
23650: PPUSH
23651: CALL 23763 0 1
// continue ;
23655: GO 23537
// end ; HackCheckCapturedStatus ( i ) ;
23657: LD_VAR 0 1
23661: PPUSH
23662: CALL 24206 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23666: LD_ADDR_VAR 0 2
23670: PUSH
23671: LD_INT 81
23673: PUSH
23674: LD_VAR 0 1
23678: PPUSH
23679: CALL_OW 255
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 33
23690: PUSH
23691: LD_INT 3
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 91
23700: PUSH
23701: LD_VAR 0 1
23705: PUSH
23706: LD_EXP 91
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 50
23718: PUSH
23719: EMPTY
23720: LIST
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: PPUSH
23728: CALL_OW 69
23732: ST_TO_ADDR
// if not tmp then
23733: LD_VAR 0 2
23737: NOT
23738: IFFALSE 23742
// continue ;
23740: GO 23537
// HackLink ( i , tmp ) ;
23742: LD_VAR 0 1
23746: PPUSH
23747: LD_VAR 0 2
23751: PPUSH
23752: CALL 23899 0 2
// end ;
23756: GO 23537
23758: POP
23759: POP
// end ;
23760: PPOPN 2
23762: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23763: LD_INT 0
23765: PPUSH
23766: PPUSH
23767: PPUSH
// if not hack in hackTanks then
23768: LD_VAR 0 1
23772: PUSH
23773: LD_EXP 88
23777: IN
23778: NOT
23779: IFFALSE 23783
// exit ;
23781: GO 23894
// index := GetElementIndex ( hackTanks , hack ) ;
23783: LD_ADDR_VAR 0 4
23787: PUSH
23788: LD_EXP 88
23792: PPUSH
23793: LD_VAR 0 1
23797: PPUSH
23798: CALL 31336 0 2
23802: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23803: LD_EXP 89
23807: PUSH
23808: LD_VAR 0 4
23812: ARRAY
23813: IFFALSE 23894
// begin for i in hackTanksCaptured [ index ] do
23815: LD_ADDR_VAR 0 3
23819: PUSH
23820: LD_EXP 89
23824: PUSH
23825: LD_VAR 0 4
23829: ARRAY
23830: PUSH
23831: FOR_IN
23832: IFFALSE 23858
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23834: LD_VAR 0 3
23838: PUSH
23839: LD_INT 1
23841: ARRAY
23842: PPUSH
23843: LD_VAR 0 3
23847: PUSH
23848: LD_INT 2
23850: ARRAY
23851: PPUSH
23852: CALL_OW 235
23856: GO 23831
23858: POP
23859: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23860: LD_ADDR_EXP 89
23864: PUSH
23865: LD_EXP 89
23869: PPUSH
23870: LD_VAR 0 4
23874: PPUSH
23875: EMPTY
23876: PPUSH
23877: CALL_OW 1
23881: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23882: LD_VAR 0 1
23886: PPUSH
23887: LD_INT 0
23889: PPUSH
23890: CALL_OW 505
// end ; end ;
23894: LD_VAR 0 2
23898: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23899: LD_INT 0
23901: PPUSH
23902: PPUSH
23903: PPUSH
// if not hack in hackTanks or not vehicles then
23904: LD_VAR 0 1
23908: PUSH
23909: LD_EXP 88
23913: IN
23914: NOT
23915: PUSH
23916: LD_VAR 0 2
23920: NOT
23921: OR
23922: IFFALSE 23926
// exit ;
23924: GO 24201
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23926: LD_ADDR_VAR 0 2
23930: PUSH
23931: LD_VAR 0 1
23935: PPUSH
23936: LD_VAR 0 2
23940: PPUSH
23941: LD_INT 1
23943: PPUSH
23944: LD_INT 1
23946: PPUSH
23947: CALL 31986 0 4
23951: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23952: LD_ADDR_VAR 0 5
23956: PUSH
23957: LD_EXP 88
23961: PPUSH
23962: LD_VAR 0 1
23966: PPUSH
23967: CALL 31336 0 2
23971: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23972: LD_EXP 89
23976: PUSH
23977: LD_VAR 0 5
23981: ARRAY
23982: PUSH
23983: LD_EXP 90
23987: LESS
23988: IFFALSE 24177
// begin for i := 1 to vehicles do
23990: LD_ADDR_VAR 0 4
23994: PUSH
23995: DOUBLE
23996: LD_INT 1
23998: DEC
23999: ST_TO_ADDR
24000: LD_VAR 0 2
24004: PUSH
24005: FOR_TO
24006: IFFALSE 24175
// begin if hackTanksCaptured [ index ] = hackLimit then
24008: LD_EXP 89
24012: PUSH
24013: LD_VAR 0 5
24017: ARRAY
24018: PUSH
24019: LD_EXP 90
24023: EQUAL
24024: IFFALSE 24028
// break ;
24026: GO 24175
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24028: LD_ADDR_EXP 92
24032: PUSH
24033: LD_EXP 92
24037: PPUSH
24038: LD_VAR 0 5
24042: PPUSH
24043: LD_EXP 92
24047: PUSH
24048: LD_VAR 0 5
24052: ARRAY
24053: PUSH
24054: LD_INT 1
24056: PLUS
24057: PPUSH
24058: CALL_OW 1
24062: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24063: LD_ADDR_EXP 89
24067: PUSH
24068: LD_EXP 89
24072: PPUSH
24073: LD_VAR 0 5
24077: PUSH
24078: LD_EXP 89
24082: PUSH
24083: LD_VAR 0 5
24087: ARRAY
24088: PUSH
24089: LD_INT 1
24091: PLUS
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PPUSH
24097: LD_VAR 0 2
24101: PUSH
24102: LD_VAR 0 4
24106: ARRAY
24107: PUSH
24108: LD_VAR 0 2
24112: PUSH
24113: LD_VAR 0 4
24117: ARRAY
24118: PPUSH
24119: CALL_OW 255
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: PPUSH
24128: CALL 31551 0 3
24132: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24133: LD_VAR 0 2
24137: PUSH
24138: LD_VAR 0 4
24142: ARRAY
24143: PPUSH
24144: LD_VAR 0 1
24148: PPUSH
24149: CALL_OW 255
24153: PPUSH
24154: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24158: LD_VAR 0 2
24162: PUSH
24163: LD_VAR 0 4
24167: ARRAY
24168: PPUSH
24169: CALL_OW 141
// end ;
24173: GO 24005
24175: POP
24176: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24177: LD_VAR 0 1
24181: PPUSH
24182: LD_EXP 89
24186: PUSH
24187: LD_VAR 0 5
24191: ARRAY
24192: PUSH
24193: LD_INT 0
24195: PLUS
24196: PPUSH
24197: CALL_OW 505
// end ;
24201: LD_VAR 0 3
24205: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24206: LD_INT 0
24208: PPUSH
24209: PPUSH
24210: PPUSH
24211: PPUSH
// if not hack in hackTanks then
24212: LD_VAR 0 1
24216: PUSH
24217: LD_EXP 88
24221: IN
24222: NOT
24223: IFFALSE 24227
// exit ;
24225: GO 24467
// index := GetElementIndex ( hackTanks , hack ) ;
24227: LD_ADDR_VAR 0 4
24231: PUSH
24232: LD_EXP 88
24236: PPUSH
24237: LD_VAR 0 1
24241: PPUSH
24242: CALL 31336 0 2
24246: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24247: LD_ADDR_VAR 0 3
24251: PUSH
24252: DOUBLE
24253: LD_EXP 89
24257: PUSH
24258: LD_VAR 0 4
24262: ARRAY
24263: INC
24264: ST_TO_ADDR
24265: LD_INT 1
24267: PUSH
24268: FOR_DOWNTO
24269: IFFALSE 24441
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24271: LD_ADDR_VAR 0 5
24275: PUSH
24276: LD_EXP 89
24280: PUSH
24281: LD_VAR 0 4
24285: ARRAY
24286: PUSH
24287: LD_VAR 0 3
24291: ARRAY
24292: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24293: LD_VAR 0 5
24297: PUSH
24298: LD_INT 1
24300: ARRAY
24301: PPUSH
24302: CALL_OW 302
24306: NOT
24307: PUSH
24308: LD_VAR 0 5
24312: PUSH
24313: LD_INT 1
24315: ARRAY
24316: PPUSH
24317: CALL_OW 255
24321: PUSH
24322: LD_VAR 0 1
24326: PPUSH
24327: CALL_OW 255
24331: NONEQUAL
24332: OR
24333: IFFALSE 24439
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24335: LD_VAR 0 5
24339: PUSH
24340: LD_INT 1
24342: ARRAY
24343: PPUSH
24344: CALL_OW 305
24348: PUSH
24349: LD_VAR 0 5
24353: PUSH
24354: LD_INT 1
24356: ARRAY
24357: PPUSH
24358: CALL_OW 255
24362: PUSH
24363: LD_VAR 0 1
24367: PPUSH
24368: CALL_OW 255
24372: EQUAL
24373: AND
24374: IFFALSE 24398
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24376: LD_VAR 0 5
24380: PUSH
24381: LD_INT 1
24383: ARRAY
24384: PPUSH
24385: LD_VAR 0 5
24389: PUSH
24390: LD_INT 2
24392: ARRAY
24393: PPUSH
24394: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24398: LD_ADDR_EXP 89
24402: PUSH
24403: LD_EXP 89
24407: PPUSH
24408: LD_VAR 0 4
24412: PPUSH
24413: LD_EXP 89
24417: PUSH
24418: LD_VAR 0 4
24422: ARRAY
24423: PPUSH
24424: LD_VAR 0 3
24428: PPUSH
24429: CALL_OW 3
24433: PPUSH
24434: CALL_OW 1
24438: ST_TO_ADDR
// end ; end ;
24439: GO 24268
24441: POP
24442: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24443: LD_VAR 0 1
24447: PPUSH
24448: LD_EXP 89
24452: PUSH
24453: LD_VAR 0 4
24457: ARRAY
24458: PUSH
24459: LD_INT 0
24461: PLUS
24462: PPUSH
24463: CALL_OW 505
// end ;
24467: LD_VAR 0 2
24471: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24472: LD_INT 0
24474: PPUSH
24475: PPUSH
24476: PPUSH
24477: PPUSH
// if not hack in hackTanks then
24478: LD_VAR 0 1
24482: PUSH
24483: LD_EXP 88
24487: IN
24488: NOT
24489: IFFALSE 24493
// exit ;
24491: GO 24578
// index := GetElementIndex ( hackTanks , hack ) ;
24493: LD_ADDR_VAR 0 5
24497: PUSH
24498: LD_EXP 88
24502: PPUSH
24503: LD_VAR 0 1
24507: PPUSH
24508: CALL 31336 0 2
24512: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24513: LD_ADDR_VAR 0 4
24517: PUSH
24518: DOUBLE
24519: LD_INT 1
24521: DEC
24522: ST_TO_ADDR
24523: LD_EXP 89
24527: PUSH
24528: LD_VAR 0 5
24532: ARRAY
24533: PUSH
24534: FOR_TO
24535: IFFALSE 24576
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24537: LD_EXP 89
24541: PUSH
24542: LD_VAR 0 5
24546: ARRAY
24547: PUSH
24548: LD_VAR 0 4
24552: ARRAY
24553: PUSH
24554: LD_INT 1
24556: ARRAY
24557: PUSH
24558: LD_VAR 0 2
24562: EQUAL
24563: IFFALSE 24574
// KillUnit ( vehicle ) ;
24565: LD_VAR 0 2
24569: PPUSH
24570: CALL_OW 66
24574: GO 24534
24576: POP
24577: POP
// end ;
24578: LD_VAR 0 3
24582: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24583: LD_EXP 93
24587: NOT
24588: IFFALSE 24623
24590: GO 24592
24592: DISABLE
// begin initMiner := true ;
24593: LD_ADDR_EXP 93
24597: PUSH
24598: LD_INT 1
24600: ST_TO_ADDR
// minersList := [ ] ;
24601: LD_ADDR_EXP 94
24605: PUSH
24606: EMPTY
24607: ST_TO_ADDR
// minerMinesList := [ ] ;
24608: LD_ADDR_EXP 95
24612: PUSH
24613: EMPTY
24614: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24615: LD_ADDR_EXP 96
24619: PUSH
24620: LD_INT 5
24622: ST_TO_ADDR
// end ;
24623: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24624: LD_EXP 93
24628: PUSH
24629: LD_INT 34
24631: PUSH
24632: LD_INT 81
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PPUSH
24639: CALL_OW 69
24643: AND
24644: IFFALSE 25105
24646: GO 24648
24648: DISABLE
24649: LD_INT 0
24651: PPUSH
24652: PPUSH
24653: PPUSH
24654: PPUSH
// begin enable ;
24655: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24656: LD_ADDR_VAR 0 1
24660: PUSH
24661: LD_INT 34
24663: PUSH
24664: LD_INT 81
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: PPUSH
24671: CALL_OW 69
24675: PUSH
24676: FOR_IN
24677: IFFALSE 24749
// begin if not i in minersList then
24679: LD_VAR 0 1
24683: PUSH
24684: LD_EXP 94
24688: IN
24689: NOT
24690: IFFALSE 24747
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24692: LD_ADDR_EXP 94
24696: PUSH
24697: LD_EXP 94
24701: PPUSH
24702: LD_EXP 94
24706: PUSH
24707: LD_INT 1
24709: PLUS
24710: PPUSH
24711: LD_VAR 0 1
24715: PPUSH
24716: CALL_OW 1
24720: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24721: LD_ADDR_EXP 95
24725: PUSH
24726: LD_EXP 95
24730: PPUSH
24731: LD_EXP 95
24735: PUSH
24736: LD_INT 1
24738: PLUS
24739: PPUSH
24740: EMPTY
24741: PPUSH
24742: CALL_OW 1
24746: ST_TO_ADDR
// end end ;
24747: GO 24676
24749: POP
24750: POP
// for i := minerMinesList downto 1 do
24751: LD_ADDR_VAR 0 1
24755: PUSH
24756: DOUBLE
24757: LD_EXP 95
24761: INC
24762: ST_TO_ADDR
24763: LD_INT 1
24765: PUSH
24766: FOR_DOWNTO
24767: IFFALSE 25103
// begin if IsLive ( minersList [ i ] ) then
24769: LD_EXP 94
24773: PUSH
24774: LD_VAR 0 1
24778: ARRAY
24779: PPUSH
24780: CALL_OW 300
24784: IFFALSE 24812
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24786: LD_EXP 94
24790: PUSH
24791: LD_VAR 0 1
24795: ARRAY
24796: PPUSH
24797: LD_EXP 95
24801: PUSH
24802: LD_VAR 0 1
24806: ARRAY
24807: PPUSH
24808: CALL_OW 505
// if not minerMinesList [ i ] then
24812: LD_EXP 95
24816: PUSH
24817: LD_VAR 0 1
24821: ARRAY
24822: NOT
24823: IFFALSE 24827
// continue ;
24825: GO 24766
// for j := minerMinesList [ i ] downto 1 do
24827: LD_ADDR_VAR 0 2
24831: PUSH
24832: DOUBLE
24833: LD_EXP 95
24837: PUSH
24838: LD_VAR 0 1
24842: ARRAY
24843: INC
24844: ST_TO_ADDR
24845: LD_INT 1
24847: PUSH
24848: FOR_DOWNTO
24849: IFFALSE 25099
// begin side := GetSide ( minersList [ i ] ) ;
24851: LD_ADDR_VAR 0 3
24855: PUSH
24856: LD_EXP 94
24860: PUSH
24861: LD_VAR 0 1
24865: ARRAY
24866: PPUSH
24867: CALL_OW 255
24871: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24872: LD_ADDR_VAR 0 4
24876: PUSH
24877: LD_EXP 95
24881: PUSH
24882: LD_VAR 0 1
24886: ARRAY
24887: PUSH
24888: LD_VAR 0 2
24892: ARRAY
24893: PUSH
24894: LD_INT 1
24896: ARRAY
24897: PPUSH
24898: LD_EXP 95
24902: PUSH
24903: LD_VAR 0 1
24907: ARRAY
24908: PUSH
24909: LD_VAR 0 2
24913: ARRAY
24914: PUSH
24915: LD_INT 2
24917: ARRAY
24918: PPUSH
24919: CALL_OW 428
24923: ST_TO_ADDR
// if not tmp then
24924: LD_VAR 0 4
24928: NOT
24929: IFFALSE 24933
// continue ;
24931: GO 24848
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24933: LD_VAR 0 4
24937: PUSH
24938: LD_INT 81
24940: PUSH
24941: LD_VAR 0 3
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PPUSH
24950: CALL_OW 69
24954: IN
24955: PUSH
24956: LD_EXP 95
24960: PUSH
24961: LD_VAR 0 1
24965: ARRAY
24966: PUSH
24967: LD_VAR 0 2
24971: ARRAY
24972: PUSH
24973: LD_INT 1
24975: ARRAY
24976: PPUSH
24977: LD_EXP 95
24981: PUSH
24982: LD_VAR 0 1
24986: ARRAY
24987: PUSH
24988: LD_VAR 0 2
24992: ARRAY
24993: PUSH
24994: LD_INT 2
24996: ARRAY
24997: PPUSH
24998: CALL_OW 458
25002: AND
25003: IFFALSE 25097
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25005: LD_EXP 95
25009: PUSH
25010: LD_VAR 0 1
25014: ARRAY
25015: PUSH
25016: LD_VAR 0 2
25020: ARRAY
25021: PUSH
25022: LD_INT 1
25024: ARRAY
25025: PPUSH
25026: LD_EXP 95
25030: PUSH
25031: LD_VAR 0 1
25035: ARRAY
25036: PUSH
25037: LD_VAR 0 2
25041: ARRAY
25042: PUSH
25043: LD_INT 2
25045: ARRAY
25046: PPUSH
25047: LD_VAR 0 3
25051: PPUSH
25052: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25056: LD_ADDR_EXP 95
25060: PUSH
25061: LD_EXP 95
25065: PPUSH
25066: LD_VAR 0 1
25070: PPUSH
25071: LD_EXP 95
25075: PUSH
25076: LD_VAR 0 1
25080: ARRAY
25081: PPUSH
25082: LD_VAR 0 2
25086: PPUSH
25087: CALL_OW 3
25091: PPUSH
25092: CALL_OW 1
25096: ST_TO_ADDR
// end ; end ;
25097: GO 24848
25099: POP
25100: POP
// end ;
25101: GO 24766
25103: POP
25104: POP
// end ;
25105: PPOPN 4
25107: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25108: LD_INT 0
25110: PPUSH
25111: PPUSH
// result := false ;
25112: LD_ADDR_VAR 0 4
25116: PUSH
25117: LD_INT 0
25119: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25120: LD_VAR 0 1
25124: PPUSH
25125: CALL_OW 264
25129: PUSH
25130: LD_INT 81
25132: EQUAL
25133: NOT
25134: IFFALSE 25138
// exit ;
25136: GO 25378
// index := GetElementIndex ( minersList , unit ) ;
25138: LD_ADDR_VAR 0 5
25142: PUSH
25143: LD_EXP 94
25147: PPUSH
25148: LD_VAR 0 1
25152: PPUSH
25153: CALL 31336 0 2
25157: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25158: LD_EXP 95
25162: PUSH
25163: LD_VAR 0 5
25167: ARRAY
25168: PUSH
25169: LD_EXP 96
25173: GREATEREQUAL
25174: IFFALSE 25178
// exit ;
25176: GO 25378
// ComMoveXY ( unit , x , y ) ;
25178: LD_VAR 0 1
25182: PPUSH
25183: LD_VAR 0 2
25187: PPUSH
25188: LD_VAR 0 3
25192: PPUSH
25193: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25197: LD_INT 35
25199: PPUSH
25200: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25204: LD_VAR 0 1
25208: PPUSH
25209: LD_VAR 0 2
25213: PPUSH
25214: LD_VAR 0 3
25218: PPUSH
25219: CALL 63088 0 3
25223: NOT
25224: PUSH
25225: LD_VAR 0 1
25229: PPUSH
25230: CALL_OW 314
25234: AND
25235: IFFALSE 25239
// exit ;
25237: GO 25378
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25239: LD_VAR 0 2
25243: PPUSH
25244: LD_VAR 0 3
25248: PPUSH
25249: CALL_OW 428
25253: PUSH
25254: LD_VAR 0 1
25258: EQUAL
25259: PUSH
25260: LD_VAR 0 1
25264: PPUSH
25265: CALL_OW 314
25269: NOT
25270: AND
25271: IFFALSE 25197
// PlaySoundXY ( x , y , PlantMine ) ;
25273: LD_VAR 0 2
25277: PPUSH
25278: LD_VAR 0 3
25282: PPUSH
25283: LD_STRING PlantMine
25285: PPUSH
25286: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25290: LD_VAR 0 2
25294: PPUSH
25295: LD_VAR 0 3
25299: PPUSH
25300: LD_VAR 0 1
25304: PPUSH
25305: CALL_OW 255
25309: PPUSH
25310: LD_INT 0
25312: PPUSH
25313: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25317: LD_ADDR_EXP 95
25321: PUSH
25322: LD_EXP 95
25326: PPUSH
25327: LD_VAR 0 5
25331: PUSH
25332: LD_EXP 95
25336: PUSH
25337: LD_VAR 0 5
25341: ARRAY
25342: PUSH
25343: LD_INT 1
25345: PLUS
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PPUSH
25351: LD_VAR 0 2
25355: PUSH
25356: LD_VAR 0 3
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PPUSH
25365: CALL 31551 0 3
25369: ST_TO_ADDR
// result := true ;
25370: LD_ADDR_VAR 0 4
25374: PUSH
25375: LD_INT 1
25377: ST_TO_ADDR
// end ;
25378: LD_VAR 0 4
25382: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25383: LD_INT 0
25385: PPUSH
25386: PPUSH
25387: PPUSH
// if not unit in minersList then
25388: LD_VAR 0 1
25392: PUSH
25393: LD_EXP 94
25397: IN
25398: NOT
25399: IFFALSE 25403
// exit ;
25401: GO 25795
// index := GetElementIndex ( minersList , unit ) ;
25403: LD_ADDR_VAR 0 6
25407: PUSH
25408: LD_EXP 94
25412: PPUSH
25413: LD_VAR 0 1
25417: PPUSH
25418: CALL 31336 0 2
25422: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25423: LD_ADDR_VAR 0 5
25427: PUSH
25428: DOUBLE
25429: LD_EXP 95
25433: PUSH
25434: LD_VAR 0 6
25438: ARRAY
25439: INC
25440: ST_TO_ADDR
25441: LD_INT 1
25443: PUSH
25444: FOR_DOWNTO
25445: IFFALSE 25606
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25447: LD_EXP 95
25451: PUSH
25452: LD_VAR 0 6
25456: ARRAY
25457: PUSH
25458: LD_VAR 0 5
25462: ARRAY
25463: PUSH
25464: LD_INT 1
25466: ARRAY
25467: PUSH
25468: LD_VAR 0 2
25472: EQUAL
25473: PUSH
25474: LD_EXP 95
25478: PUSH
25479: LD_VAR 0 6
25483: ARRAY
25484: PUSH
25485: LD_VAR 0 5
25489: ARRAY
25490: PUSH
25491: LD_INT 2
25493: ARRAY
25494: PUSH
25495: LD_VAR 0 3
25499: EQUAL
25500: AND
25501: IFFALSE 25604
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25503: LD_EXP 95
25507: PUSH
25508: LD_VAR 0 6
25512: ARRAY
25513: PUSH
25514: LD_VAR 0 5
25518: ARRAY
25519: PUSH
25520: LD_INT 1
25522: ARRAY
25523: PPUSH
25524: LD_EXP 95
25528: PUSH
25529: LD_VAR 0 6
25533: ARRAY
25534: PUSH
25535: LD_VAR 0 5
25539: ARRAY
25540: PUSH
25541: LD_INT 2
25543: ARRAY
25544: PPUSH
25545: LD_VAR 0 1
25549: PPUSH
25550: CALL_OW 255
25554: PPUSH
25555: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25559: LD_ADDR_EXP 95
25563: PUSH
25564: LD_EXP 95
25568: PPUSH
25569: LD_VAR 0 6
25573: PPUSH
25574: LD_EXP 95
25578: PUSH
25579: LD_VAR 0 6
25583: ARRAY
25584: PPUSH
25585: LD_VAR 0 5
25589: PPUSH
25590: CALL_OW 3
25594: PPUSH
25595: CALL_OW 1
25599: ST_TO_ADDR
// exit ;
25600: POP
25601: POP
25602: GO 25795
// end ; end ;
25604: GO 25444
25606: POP
25607: POP
// for i := minerMinesList [ index ] downto 1 do
25608: LD_ADDR_VAR 0 5
25612: PUSH
25613: DOUBLE
25614: LD_EXP 95
25618: PUSH
25619: LD_VAR 0 6
25623: ARRAY
25624: INC
25625: ST_TO_ADDR
25626: LD_INT 1
25628: PUSH
25629: FOR_DOWNTO
25630: IFFALSE 25793
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25632: LD_EXP 95
25636: PUSH
25637: LD_VAR 0 6
25641: ARRAY
25642: PUSH
25643: LD_VAR 0 5
25647: ARRAY
25648: PUSH
25649: LD_INT 1
25651: ARRAY
25652: PPUSH
25653: LD_EXP 95
25657: PUSH
25658: LD_VAR 0 6
25662: ARRAY
25663: PUSH
25664: LD_VAR 0 5
25668: ARRAY
25669: PUSH
25670: LD_INT 2
25672: ARRAY
25673: PPUSH
25674: LD_VAR 0 2
25678: PPUSH
25679: LD_VAR 0 3
25683: PPUSH
25684: CALL_OW 298
25688: PUSH
25689: LD_INT 6
25691: LESS
25692: IFFALSE 25791
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25694: LD_EXP 95
25698: PUSH
25699: LD_VAR 0 6
25703: ARRAY
25704: PUSH
25705: LD_VAR 0 5
25709: ARRAY
25710: PUSH
25711: LD_INT 1
25713: ARRAY
25714: PPUSH
25715: LD_EXP 95
25719: PUSH
25720: LD_VAR 0 6
25724: ARRAY
25725: PUSH
25726: LD_VAR 0 5
25730: ARRAY
25731: PUSH
25732: LD_INT 2
25734: ARRAY
25735: PPUSH
25736: LD_VAR 0 1
25740: PPUSH
25741: CALL_OW 255
25745: PPUSH
25746: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25750: LD_ADDR_EXP 95
25754: PUSH
25755: LD_EXP 95
25759: PPUSH
25760: LD_VAR 0 6
25764: PPUSH
25765: LD_EXP 95
25769: PUSH
25770: LD_VAR 0 6
25774: ARRAY
25775: PPUSH
25776: LD_VAR 0 5
25780: PPUSH
25781: CALL_OW 3
25785: PPUSH
25786: CALL_OW 1
25790: ST_TO_ADDR
// end ; end ;
25791: GO 25629
25793: POP
25794: POP
// end ;
25795: LD_VAR 0 4
25799: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25800: LD_INT 0
25802: PPUSH
25803: PPUSH
25804: PPUSH
25805: PPUSH
25806: PPUSH
25807: PPUSH
25808: PPUSH
25809: PPUSH
25810: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25811: LD_VAR 0 1
25815: PPUSH
25816: CALL_OW 264
25820: PUSH
25821: LD_INT 81
25823: EQUAL
25824: NOT
25825: PUSH
25826: LD_VAR 0 1
25830: PUSH
25831: LD_EXP 94
25835: IN
25836: NOT
25837: OR
25838: IFFALSE 25842
// exit ;
25840: GO 26164
// index := GetElementIndex ( minersList , unit ) ;
25842: LD_ADDR_VAR 0 6
25846: PUSH
25847: LD_EXP 94
25851: PPUSH
25852: LD_VAR 0 1
25856: PPUSH
25857: CALL 31336 0 2
25861: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25862: LD_ADDR_VAR 0 8
25866: PUSH
25867: LD_EXP 96
25871: PUSH
25872: LD_EXP 95
25876: PUSH
25877: LD_VAR 0 6
25881: ARRAY
25882: MINUS
25883: ST_TO_ADDR
// if not minesFreeAmount then
25884: LD_VAR 0 8
25888: NOT
25889: IFFALSE 25893
// exit ;
25891: GO 26164
// tmp := [ ] ;
25893: LD_ADDR_VAR 0 7
25897: PUSH
25898: EMPTY
25899: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25900: LD_ADDR_VAR 0 5
25904: PUSH
25905: DOUBLE
25906: LD_INT 1
25908: DEC
25909: ST_TO_ADDR
25910: LD_VAR 0 8
25914: PUSH
25915: FOR_TO
25916: IFFALSE 26111
// begin _d := rand ( 0 , 5 ) ;
25918: LD_ADDR_VAR 0 11
25922: PUSH
25923: LD_INT 0
25925: PPUSH
25926: LD_INT 5
25928: PPUSH
25929: CALL_OW 12
25933: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25934: LD_ADDR_VAR 0 12
25938: PUSH
25939: LD_INT 2
25941: PPUSH
25942: LD_INT 6
25944: PPUSH
25945: CALL_OW 12
25949: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25950: LD_ADDR_VAR 0 9
25954: PUSH
25955: LD_VAR 0 2
25959: PPUSH
25960: LD_VAR 0 11
25964: PPUSH
25965: LD_VAR 0 12
25969: PPUSH
25970: CALL_OW 272
25974: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25975: LD_ADDR_VAR 0 10
25979: PUSH
25980: LD_VAR 0 3
25984: PPUSH
25985: LD_VAR 0 11
25989: PPUSH
25990: LD_VAR 0 12
25994: PPUSH
25995: CALL_OW 273
25999: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26000: LD_VAR 0 9
26004: PPUSH
26005: LD_VAR 0 10
26009: PPUSH
26010: CALL_OW 488
26014: PUSH
26015: LD_VAR 0 9
26019: PUSH
26020: LD_VAR 0 10
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_VAR 0 7
26033: IN
26034: NOT
26035: AND
26036: PUSH
26037: LD_VAR 0 9
26041: PPUSH
26042: LD_VAR 0 10
26046: PPUSH
26047: CALL_OW 458
26051: NOT
26052: AND
26053: IFFALSE 26095
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26055: LD_ADDR_VAR 0 7
26059: PUSH
26060: LD_VAR 0 7
26064: PPUSH
26065: LD_VAR 0 7
26069: PUSH
26070: LD_INT 1
26072: PLUS
26073: PPUSH
26074: LD_VAR 0 9
26078: PUSH
26079: LD_VAR 0 10
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PPUSH
26088: CALL_OW 1
26092: ST_TO_ADDR
26093: GO 26109
// i := i - 1 ;
26095: LD_ADDR_VAR 0 5
26099: PUSH
26100: LD_VAR 0 5
26104: PUSH
26105: LD_INT 1
26107: MINUS
26108: ST_TO_ADDR
// end ;
26109: GO 25915
26111: POP
26112: POP
// for i in tmp do
26113: LD_ADDR_VAR 0 5
26117: PUSH
26118: LD_VAR 0 7
26122: PUSH
26123: FOR_IN
26124: IFFALSE 26162
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26126: LD_VAR 0 1
26130: PPUSH
26131: LD_VAR 0 5
26135: PUSH
26136: LD_INT 1
26138: ARRAY
26139: PPUSH
26140: LD_VAR 0 5
26144: PUSH
26145: LD_INT 2
26147: ARRAY
26148: PPUSH
26149: CALL 25108 0 3
26153: NOT
26154: IFFALSE 26160
// exit ;
26156: POP
26157: POP
26158: GO 26164
26160: GO 26123
26162: POP
26163: POP
// end ;
26164: LD_VAR 0 4
26168: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26169: LD_INT 0
26171: PPUSH
26172: PPUSH
26173: PPUSH
26174: PPUSH
26175: PPUSH
26176: PPUSH
26177: PPUSH
// if not GetClass ( unit ) = class_sniper then
26178: LD_VAR 0 1
26182: PPUSH
26183: CALL_OW 257
26187: PUSH
26188: LD_INT 5
26190: EQUAL
26191: NOT
26192: IFFALSE 26196
// exit ;
26194: GO 26584
// dist := 8 ;
26196: LD_ADDR_VAR 0 5
26200: PUSH
26201: LD_INT 8
26203: ST_TO_ADDR
// viewRange := 12 ;
26204: LD_ADDR_VAR 0 7
26208: PUSH
26209: LD_INT 12
26211: ST_TO_ADDR
// side := GetSide ( unit ) ;
26212: LD_ADDR_VAR 0 6
26216: PUSH
26217: LD_VAR 0 1
26221: PPUSH
26222: CALL_OW 255
26226: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26227: LD_INT 61
26229: PPUSH
26230: LD_VAR 0 6
26234: PPUSH
26235: CALL_OW 321
26239: PUSH
26240: LD_INT 2
26242: EQUAL
26243: IFFALSE 26253
// viewRange := 16 ;
26245: LD_ADDR_VAR 0 7
26249: PUSH
26250: LD_INT 16
26252: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26253: LD_VAR 0 1
26257: PPUSH
26258: LD_VAR 0 2
26262: PPUSH
26263: LD_VAR 0 3
26267: PPUSH
26268: CALL_OW 297
26272: PUSH
26273: LD_VAR 0 5
26277: GREATER
26278: IFFALSE 26357
// begin ComMoveXY ( unit , x , y ) ;
26280: LD_VAR 0 1
26284: PPUSH
26285: LD_VAR 0 2
26289: PPUSH
26290: LD_VAR 0 3
26294: PPUSH
26295: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26299: LD_INT 35
26301: PPUSH
26302: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26306: LD_VAR 0 1
26310: PPUSH
26311: LD_VAR 0 2
26315: PPUSH
26316: LD_VAR 0 3
26320: PPUSH
26321: CALL 63088 0 3
26325: NOT
26326: IFFALSE 26330
// exit ;
26328: GO 26584
// until GetDistUnitXY ( unit , x , y ) < dist ;
26330: LD_VAR 0 1
26334: PPUSH
26335: LD_VAR 0 2
26339: PPUSH
26340: LD_VAR 0 3
26344: PPUSH
26345: CALL_OW 297
26349: PUSH
26350: LD_VAR 0 5
26354: LESS
26355: IFFALSE 26299
// end ; ComTurnXY ( unit , x , y ) ;
26357: LD_VAR 0 1
26361: PPUSH
26362: LD_VAR 0 2
26366: PPUSH
26367: LD_VAR 0 3
26371: PPUSH
26372: CALL_OW 118
// wait ( 5 ) ;
26376: LD_INT 5
26378: PPUSH
26379: CALL_OW 67
// _d := GetDir ( unit ) ;
26383: LD_ADDR_VAR 0 10
26387: PUSH
26388: LD_VAR 0 1
26392: PPUSH
26393: CALL_OW 254
26397: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26398: LD_ADDR_VAR 0 8
26402: PUSH
26403: LD_VAR 0 1
26407: PPUSH
26408: CALL_OW 250
26412: PPUSH
26413: LD_VAR 0 10
26417: PPUSH
26418: LD_VAR 0 5
26422: PPUSH
26423: CALL_OW 272
26427: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26428: LD_ADDR_VAR 0 9
26432: PUSH
26433: LD_VAR 0 1
26437: PPUSH
26438: CALL_OW 251
26442: PPUSH
26443: LD_VAR 0 10
26447: PPUSH
26448: LD_VAR 0 5
26452: PPUSH
26453: CALL_OW 273
26457: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26458: LD_VAR 0 8
26462: PPUSH
26463: LD_VAR 0 9
26467: PPUSH
26468: CALL_OW 488
26472: NOT
26473: IFFALSE 26477
// exit ;
26475: GO 26584
// ComAnimCustom ( unit , 1 ) ;
26477: LD_VAR 0 1
26481: PPUSH
26482: LD_INT 1
26484: PPUSH
26485: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26489: LD_VAR 0 8
26493: PPUSH
26494: LD_VAR 0 9
26498: PPUSH
26499: LD_VAR 0 6
26503: PPUSH
26504: LD_VAR 0 7
26508: PPUSH
26509: CALL_OW 330
// repeat wait ( 1 ) ;
26513: LD_INT 1
26515: PPUSH
26516: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26520: LD_VAR 0 1
26524: PPUSH
26525: CALL_OW 316
26529: PUSH
26530: LD_VAR 0 1
26534: PPUSH
26535: CALL_OW 314
26539: OR
26540: PUSH
26541: LD_VAR 0 1
26545: PPUSH
26546: CALL_OW 302
26550: NOT
26551: OR
26552: PUSH
26553: LD_VAR 0 1
26557: PPUSH
26558: CALL_OW 301
26562: OR
26563: IFFALSE 26513
// RemoveSeeing ( _x , _y , side ) ;
26565: LD_VAR 0 8
26569: PPUSH
26570: LD_VAR 0 9
26574: PPUSH
26575: LD_VAR 0 6
26579: PPUSH
26580: CALL_OW 331
// end ; end_of_file
26584: LD_VAR 0 4
26588: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26589: LD_INT 0
26591: PPUSH
26592: PPUSH
// if exist_mode then
26593: LD_VAR 0 2
26597: IFFALSE 26622
// unit := CreateCharacter ( prefix & ident ) else
26599: LD_ADDR_VAR 0 5
26603: PUSH
26604: LD_VAR 0 3
26608: PUSH
26609: LD_VAR 0 1
26613: STR
26614: PPUSH
26615: CALL_OW 34
26619: ST_TO_ADDR
26620: GO 26637
// unit := NewCharacter ( ident ) ;
26622: LD_ADDR_VAR 0 5
26626: PUSH
26627: LD_VAR 0 1
26631: PPUSH
26632: CALL_OW 25
26636: ST_TO_ADDR
// result := unit ;
26637: LD_ADDR_VAR 0 4
26641: PUSH
26642: LD_VAR 0 5
26646: ST_TO_ADDR
// end ;
26647: LD_VAR 0 4
26651: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26652: LD_INT 0
26654: PPUSH
26655: PPUSH
// if not side or not nation then
26656: LD_VAR 0 1
26660: NOT
26661: PUSH
26662: LD_VAR 0 2
26666: NOT
26667: OR
26668: IFFALSE 26672
// exit ;
26670: GO 27440
// case nation of nation_american :
26672: LD_VAR 0 2
26676: PUSH
26677: LD_INT 1
26679: DOUBLE
26680: EQUAL
26681: IFTRUE 26685
26683: GO 26899
26685: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26686: LD_ADDR_VAR 0 4
26690: PUSH
26691: LD_INT 35
26693: PUSH
26694: LD_INT 45
26696: PUSH
26697: LD_INT 46
26699: PUSH
26700: LD_INT 47
26702: PUSH
26703: LD_INT 82
26705: PUSH
26706: LD_INT 83
26708: PUSH
26709: LD_INT 84
26711: PUSH
26712: LD_INT 85
26714: PUSH
26715: LD_INT 86
26717: PUSH
26718: LD_INT 1
26720: PUSH
26721: LD_INT 2
26723: PUSH
26724: LD_INT 6
26726: PUSH
26727: LD_INT 15
26729: PUSH
26730: LD_INT 16
26732: PUSH
26733: LD_INT 7
26735: PUSH
26736: LD_INT 12
26738: PUSH
26739: LD_INT 13
26741: PUSH
26742: LD_INT 10
26744: PUSH
26745: LD_INT 14
26747: PUSH
26748: LD_INT 20
26750: PUSH
26751: LD_INT 21
26753: PUSH
26754: LD_INT 22
26756: PUSH
26757: LD_INT 25
26759: PUSH
26760: LD_INT 32
26762: PUSH
26763: LD_INT 27
26765: PUSH
26766: LD_INT 36
26768: PUSH
26769: LD_INT 69
26771: PUSH
26772: LD_INT 39
26774: PUSH
26775: LD_INT 34
26777: PUSH
26778: LD_INT 40
26780: PUSH
26781: LD_INT 48
26783: PUSH
26784: LD_INT 49
26786: PUSH
26787: LD_INT 50
26789: PUSH
26790: LD_INT 51
26792: PUSH
26793: LD_INT 52
26795: PUSH
26796: LD_INT 53
26798: PUSH
26799: LD_INT 54
26801: PUSH
26802: LD_INT 55
26804: PUSH
26805: LD_INT 56
26807: PUSH
26808: LD_INT 57
26810: PUSH
26811: LD_INT 58
26813: PUSH
26814: LD_INT 59
26816: PUSH
26817: LD_INT 60
26819: PUSH
26820: LD_INT 61
26822: PUSH
26823: LD_INT 62
26825: PUSH
26826: LD_INT 80
26828: PUSH
26829: LD_INT 82
26831: PUSH
26832: LD_INT 83
26834: PUSH
26835: LD_INT 84
26837: PUSH
26838: LD_INT 85
26840: PUSH
26841: LD_INT 86
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: ST_TO_ADDR
26897: GO 27364
26899: LD_INT 2
26901: DOUBLE
26902: EQUAL
26903: IFTRUE 26907
26905: GO 27133
26907: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26908: LD_ADDR_VAR 0 4
26912: PUSH
26913: LD_INT 35
26915: PUSH
26916: LD_INT 45
26918: PUSH
26919: LD_INT 46
26921: PUSH
26922: LD_INT 47
26924: PUSH
26925: LD_INT 82
26927: PUSH
26928: LD_INT 83
26930: PUSH
26931: LD_INT 84
26933: PUSH
26934: LD_INT 85
26936: PUSH
26937: LD_INT 87
26939: PUSH
26940: LD_INT 70
26942: PUSH
26943: LD_INT 1
26945: PUSH
26946: LD_INT 11
26948: PUSH
26949: LD_INT 3
26951: PUSH
26952: LD_INT 4
26954: PUSH
26955: LD_INT 5
26957: PUSH
26958: LD_INT 6
26960: PUSH
26961: LD_INT 15
26963: PUSH
26964: LD_INT 18
26966: PUSH
26967: LD_INT 7
26969: PUSH
26970: LD_INT 17
26972: PUSH
26973: LD_INT 8
26975: PUSH
26976: LD_INT 20
26978: PUSH
26979: LD_INT 21
26981: PUSH
26982: LD_INT 22
26984: PUSH
26985: LD_INT 72
26987: PUSH
26988: LD_INT 26
26990: PUSH
26991: LD_INT 69
26993: PUSH
26994: LD_INT 39
26996: PUSH
26997: LD_INT 40
26999: PUSH
27000: LD_INT 41
27002: PUSH
27003: LD_INT 42
27005: PUSH
27006: LD_INT 43
27008: PUSH
27009: LD_INT 48
27011: PUSH
27012: LD_INT 49
27014: PUSH
27015: LD_INT 50
27017: PUSH
27018: LD_INT 51
27020: PUSH
27021: LD_INT 52
27023: PUSH
27024: LD_INT 53
27026: PUSH
27027: LD_INT 54
27029: PUSH
27030: LD_INT 55
27032: PUSH
27033: LD_INT 56
27035: PUSH
27036: LD_INT 60
27038: PUSH
27039: LD_INT 61
27041: PUSH
27042: LD_INT 62
27044: PUSH
27045: LD_INT 66
27047: PUSH
27048: LD_INT 67
27050: PUSH
27051: LD_INT 68
27053: PUSH
27054: LD_INT 81
27056: PUSH
27057: LD_INT 82
27059: PUSH
27060: LD_INT 83
27062: PUSH
27063: LD_INT 84
27065: PUSH
27066: LD_INT 85
27068: PUSH
27069: LD_INT 87
27071: PUSH
27072: LD_INT 88
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: ST_TO_ADDR
27131: GO 27364
27133: LD_INT 3
27135: DOUBLE
27136: EQUAL
27137: IFTRUE 27141
27139: GO 27363
27141: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27142: LD_ADDR_VAR 0 4
27146: PUSH
27147: LD_INT 46
27149: PUSH
27150: LD_INT 47
27152: PUSH
27153: LD_INT 1
27155: PUSH
27156: LD_INT 2
27158: PUSH
27159: LD_INT 82
27161: PUSH
27162: LD_INT 83
27164: PUSH
27165: LD_INT 84
27167: PUSH
27168: LD_INT 85
27170: PUSH
27171: LD_INT 86
27173: PUSH
27174: LD_INT 11
27176: PUSH
27177: LD_INT 9
27179: PUSH
27180: LD_INT 20
27182: PUSH
27183: LD_INT 19
27185: PUSH
27186: LD_INT 21
27188: PUSH
27189: LD_INT 24
27191: PUSH
27192: LD_INT 22
27194: PUSH
27195: LD_INT 25
27197: PUSH
27198: LD_INT 28
27200: PUSH
27201: LD_INT 29
27203: PUSH
27204: LD_INT 30
27206: PUSH
27207: LD_INT 31
27209: PUSH
27210: LD_INT 37
27212: PUSH
27213: LD_INT 38
27215: PUSH
27216: LD_INT 32
27218: PUSH
27219: LD_INT 27
27221: PUSH
27222: LD_INT 33
27224: PUSH
27225: LD_INT 69
27227: PUSH
27228: LD_INT 39
27230: PUSH
27231: LD_INT 34
27233: PUSH
27234: LD_INT 40
27236: PUSH
27237: LD_INT 71
27239: PUSH
27240: LD_INT 23
27242: PUSH
27243: LD_INT 44
27245: PUSH
27246: LD_INT 48
27248: PUSH
27249: LD_INT 49
27251: PUSH
27252: LD_INT 50
27254: PUSH
27255: LD_INT 51
27257: PUSH
27258: LD_INT 52
27260: PUSH
27261: LD_INT 53
27263: PUSH
27264: LD_INT 54
27266: PUSH
27267: LD_INT 55
27269: PUSH
27270: LD_INT 56
27272: PUSH
27273: LD_INT 57
27275: PUSH
27276: LD_INT 58
27278: PUSH
27279: LD_INT 59
27281: PUSH
27282: LD_INT 63
27284: PUSH
27285: LD_INT 64
27287: PUSH
27288: LD_INT 65
27290: PUSH
27291: LD_INT 82
27293: PUSH
27294: LD_INT 83
27296: PUSH
27297: LD_INT 84
27299: PUSH
27300: LD_INT 85
27302: PUSH
27303: LD_INT 86
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: ST_TO_ADDR
27361: GO 27364
27363: POP
// if state > - 1 and state < 3 then
27364: LD_VAR 0 3
27368: PUSH
27369: LD_INT 1
27371: NEG
27372: GREATER
27373: PUSH
27374: LD_VAR 0 3
27378: PUSH
27379: LD_INT 3
27381: LESS
27382: AND
27383: IFFALSE 27440
// for i in result do
27385: LD_ADDR_VAR 0 5
27389: PUSH
27390: LD_VAR 0 4
27394: PUSH
27395: FOR_IN
27396: IFFALSE 27438
// if GetTech ( i , side ) <> state then
27398: LD_VAR 0 5
27402: PPUSH
27403: LD_VAR 0 1
27407: PPUSH
27408: CALL_OW 321
27412: PUSH
27413: LD_VAR 0 3
27417: NONEQUAL
27418: IFFALSE 27436
// result := result diff i ;
27420: LD_ADDR_VAR 0 4
27424: PUSH
27425: LD_VAR 0 4
27429: PUSH
27430: LD_VAR 0 5
27434: DIFF
27435: ST_TO_ADDR
27436: GO 27395
27438: POP
27439: POP
// end ;
27440: LD_VAR 0 4
27444: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27445: LD_INT 0
27447: PPUSH
27448: PPUSH
27449: PPUSH
// result := true ;
27450: LD_ADDR_VAR 0 3
27454: PUSH
27455: LD_INT 1
27457: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27458: LD_ADDR_VAR 0 5
27462: PUSH
27463: LD_VAR 0 2
27467: PPUSH
27468: CALL_OW 480
27472: ST_TO_ADDR
// if not tmp then
27473: LD_VAR 0 5
27477: NOT
27478: IFFALSE 27482
// exit ;
27480: GO 27531
// for i in tmp do
27482: LD_ADDR_VAR 0 4
27486: PUSH
27487: LD_VAR 0 5
27491: PUSH
27492: FOR_IN
27493: IFFALSE 27529
// if GetTech ( i , side ) <> state_researched then
27495: LD_VAR 0 4
27499: PPUSH
27500: LD_VAR 0 1
27504: PPUSH
27505: CALL_OW 321
27509: PUSH
27510: LD_INT 2
27512: NONEQUAL
27513: IFFALSE 27527
// begin result := false ;
27515: LD_ADDR_VAR 0 3
27519: PUSH
27520: LD_INT 0
27522: ST_TO_ADDR
// exit ;
27523: POP
27524: POP
27525: GO 27531
// end ;
27527: GO 27492
27529: POP
27530: POP
// end ;
27531: LD_VAR 0 3
27535: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27536: LD_INT 0
27538: PPUSH
27539: PPUSH
27540: PPUSH
27541: PPUSH
27542: PPUSH
27543: PPUSH
27544: PPUSH
27545: PPUSH
27546: PPUSH
27547: PPUSH
27548: PPUSH
27549: PPUSH
27550: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27551: LD_VAR 0 1
27555: NOT
27556: PUSH
27557: LD_VAR 0 1
27561: PPUSH
27562: CALL_OW 257
27566: PUSH
27567: LD_INT 9
27569: NONEQUAL
27570: OR
27571: IFFALSE 27575
// exit ;
27573: GO 28148
// side := GetSide ( unit ) ;
27575: LD_ADDR_VAR 0 9
27579: PUSH
27580: LD_VAR 0 1
27584: PPUSH
27585: CALL_OW 255
27589: ST_TO_ADDR
// tech_space := tech_spacanom ;
27590: LD_ADDR_VAR 0 12
27594: PUSH
27595: LD_INT 29
27597: ST_TO_ADDR
// tech_time := tech_taurad ;
27598: LD_ADDR_VAR 0 13
27602: PUSH
27603: LD_INT 28
27605: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27606: LD_ADDR_VAR 0 11
27610: PUSH
27611: LD_VAR 0 1
27615: PPUSH
27616: CALL_OW 310
27620: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27621: LD_VAR 0 11
27625: PPUSH
27626: CALL_OW 247
27630: PUSH
27631: LD_INT 2
27633: EQUAL
27634: IFFALSE 27638
// exit ;
27636: GO 28148
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27638: LD_ADDR_VAR 0 8
27642: PUSH
27643: LD_INT 81
27645: PUSH
27646: LD_VAR 0 9
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 3
27657: PUSH
27658: LD_INT 21
27660: PUSH
27661: LD_INT 3
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PPUSH
27676: CALL_OW 69
27680: ST_TO_ADDR
// if not tmp then
27681: LD_VAR 0 8
27685: NOT
27686: IFFALSE 27690
// exit ;
27688: GO 28148
// if in_unit then
27690: LD_VAR 0 11
27694: IFFALSE 27718
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27696: LD_ADDR_VAR 0 10
27700: PUSH
27701: LD_VAR 0 8
27705: PPUSH
27706: LD_VAR 0 11
27710: PPUSH
27711: CALL_OW 74
27715: ST_TO_ADDR
27716: GO 27738
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27718: LD_ADDR_VAR 0 10
27722: PUSH
27723: LD_VAR 0 8
27727: PPUSH
27728: LD_VAR 0 1
27732: PPUSH
27733: CALL_OW 74
27737: ST_TO_ADDR
// if not enemy then
27738: LD_VAR 0 10
27742: NOT
27743: IFFALSE 27747
// exit ;
27745: GO 28148
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27747: LD_VAR 0 11
27751: PUSH
27752: LD_VAR 0 11
27756: PPUSH
27757: LD_VAR 0 10
27761: PPUSH
27762: CALL_OW 296
27766: PUSH
27767: LD_INT 13
27769: GREATER
27770: AND
27771: PUSH
27772: LD_VAR 0 1
27776: PPUSH
27777: LD_VAR 0 10
27781: PPUSH
27782: CALL_OW 296
27786: PUSH
27787: LD_INT 12
27789: GREATER
27790: OR
27791: IFFALSE 27795
// exit ;
27793: GO 28148
// missile := [ 1 ] ;
27795: LD_ADDR_VAR 0 14
27799: PUSH
27800: LD_INT 1
27802: PUSH
27803: EMPTY
27804: LIST
27805: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27806: LD_VAR 0 9
27810: PPUSH
27811: LD_VAR 0 12
27815: PPUSH
27816: CALL_OW 325
27820: IFFALSE 27849
// missile := Replace ( missile , missile + 1 , 2 ) ;
27822: LD_ADDR_VAR 0 14
27826: PUSH
27827: LD_VAR 0 14
27831: PPUSH
27832: LD_VAR 0 14
27836: PUSH
27837: LD_INT 1
27839: PLUS
27840: PPUSH
27841: LD_INT 2
27843: PPUSH
27844: CALL_OW 1
27848: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27849: LD_VAR 0 9
27853: PPUSH
27854: LD_VAR 0 13
27858: PPUSH
27859: CALL_OW 325
27863: PUSH
27864: LD_VAR 0 10
27868: PPUSH
27869: CALL_OW 255
27873: PPUSH
27874: LD_VAR 0 13
27878: PPUSH
27879: CALL_OW 325
27883: NOT
27884: AND
27885: IFFALSE 27914
// missile := Replace ( missile , missile + 1 , 3 ) ;
27887: LD_ADDR_VAR 0 14
27891: PUSH
27892: LD_VAR 0 14
27896: PPUSH
27897: LD_VAR 0 14
27901: PUSH
27902: LD_INT 1
27904: PLUS
27905: PPUSH
27906: LD_INT 3
27908: PPUSH
27909: CALL_OW 1
27913: ST_TO_ADDR
// if missile < 2 then
27914: LD_VAR 0 14
27918: PUSH
27919: LD_INT 2
27921: LESS
27922: IFFALSE 27926
// exit ;
27924: GO 28148
// x := GetX ( enemy ) ;
27926: LD_ADDR_VAR 0 4
27930: PUSH
27931: LD_VAR 0 10
27935: PPUSH
27936: CALL_OW 250
27940: ST_TO_ADDR
// y := GetY ( enemy ) ;
27941: LD_ADDR_VAR 0 5
27945: PUSH
27946: LD_VAR 0 10
27950: PPUSH
27951: CALL_OW 251
27955: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27956: LD_ADDR_VAR 0 6
27960: PUSH
27961: LD_VAR 0 4
27965: PUSH
27966: LD_INT 1
27968: NEG
27969: PPUSH
27970: LD_INT 1
27972: PPUSH
27973: CALL_OW 12
27977: PLUS
27978: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27979: LD_ADDR_VAR 0 7
27983: PUSH
27984: LD_VAR 0 5
27988: PUSH
27989: LD_INT 1
27991: NEG
27992: PPUSH
27993: LD_INT 1
27995: PPUSH
27996: CALL_OW 12
28000: PLUS
28001: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28002: LD_VAR 0 6
28006: PPUSH
28007: LD_VAR 0 7
28011: PPUSH
28012: CALL_OW 488
28016: NOT
28017: IFFALSE 28039
// begin _x := x ;
28019: LD_ADDR_VAR 0 6
28023: PUSH
28024: LD_VAR 0 4
28028: ST_TO_ADDR
// _y := y ;
28029: LD_ADDR_VAR 0 7
28033: PUSH
28034: LD_VAR 0 5
28038: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28039: LD_ADDR_VAR 0 3
28043: PUSH
28044: LD_INT 1
28046: PPUSH
28047: LD_VAR 0 14
28051: PPUSH
28052: CALL_OW 12
28056: ST_TO_ADDR
// case i of 1 :
28057: LD_VAR 0 3
28061: PUSH
28062: LD_INT 1
28064: DOUBLE
28065: EQUAL
28066: IFTRUE 28070
28068: GO 28087
28070: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28071: LD_VAR 0 1
28075: PPUSH
28076: LD_VAR 0 10
28080: PPUSH
28081: CALL_OW 115
28085: GO 28148
28087: LD_INT 2
28089: DOUBLE
28090: EQUAL
28091: IFTRUE 28095
28093: GO 28117
28095: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28096: LD_VAR 0 1
28100: PPUSH
28101: LD_VAR 0 6
28105: PPUSH
28106: LD_VAR 0 7
28110: PPUSH
28111: CALL_OW 153
28115: GO 28148
28117: LD_INT 3
28119: DOUBLE
28120: EQUAL
28121: IFTRUE 28125
28123: GO 28147
28125: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28126: LD_VAR 0 1
28130: PPUSH
28131: LD_VAR 0 6
28135: PPUSH
28136: LD_VAR 0 7
28140: PPUSH
28141: CALL_OW 154
28145: GO 28148
28147: POP
// end ;
28148: LD_VAR 0 2
28152: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28153: LD_INT 0
28155: PPUSH
28156: PPUSH
28157: PPUSH
28158: PPUSH
28159: PPUSH
28160: PPUSH
// if not unit or not building then
28161: LD_VAR 0 1
28165: NOT
28166: PUSH
28167: LD_VAR 0 2
28171: NOT
28172: OR
28173: IFFALSE 28177
// exit ;
28175: GO 28335
// x := GetX ( building ) ;
28177: LD_ADDR_VAR 0 5
28181: PUSH
28182: LD_VAR 0 2
28186: PPUSH
28187: CALL_OW 250
28191: ST_TO_ADDR
// y := GetY ( building ) ;
28192: LD_ADDR_VAR 0 6
28196: PUSH
28197: LD_VAR 0 2
28201: PPUSH
28202: CALL_OW 251
28206: ST_TO_ADDR
// for i = 0 to 5 do
28207: LD_ADDR_VAR 0 4
28211: PUSH
28212: DOUBLE
28213: LD_INT 0
28215: DEC
28216: ST_TO_ADDR
28217: LD_INT 5
28219: PUSH
28220: FOR_TO
28221: IFFALSE 28333
// begin _x := ShiftX ( x , i , 3 ) ;
28223: LD_ADDR_VAR 0 7
28227: PUSH
28228: LD_VAR 0 5
28232: PPUSH
28233: LD_VAR 0 4
28237: PPUSH
28238: LD_INT 3
28240: PPUSH
28241: CALL_OW 272
28245: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28246: LD_ADDR_VAR 0 8
28250: PUSH
28251: LD_VAR 0 6
28255: PPUSH
28256: LD_VAR 0 4
28260: PPUSH
28261: LD_INT 3
28263: PPUSH
28264: CALL_OW 273
28268: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28269: LD_VAR 0 7
28273: PPUSH
28274: LD_VAR 0 8
28278: PPUSH
28279: CALL_OW 488
28283: NOT
28284: IFFALSE 28288
// continue ;
28286: GO 28220
// if HexInfo ( _x , _y ) = 0 then
28288: LD_VAR 0 7
28292: PPUSH
28293: LD_VAR 0 8
28297: PPUSH
28298: CALL_OW 428
28302: PUSH
28303: LD_INT 0
28305: EQUAL
28306: IFFALSE 28331
// begin ComMoveXY ( unit , _x , _y ) ;
28308: LD_VAR 0 1
28312: PPUSH
28313: LD_VAR 0 7
28317: PPUSH
28318: LD_VAR 0 8
28322: PPUSH
28323: CALL_OW 111
// exit ;
28327: POP
28328: POP
28329: GO 28335
// end ; end ;
28331: GO 28220
28333: POP
28334: POP
// end ;
28335: LD_VAR 0 3
28339: RET
// export function ScanBase ( side , base_area ) ; begin
28340: LD_INT 0
28342: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28343: LD_ADDR_VAR 0 3
28347: PUSH
28348: LD_VAR 0 2
28352: PPUSH
28353: LD_INT 81
28355: PUSH
28356: LD_VAR 0 1
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PPUSH
28365: CALL_OW 70
28369: ST_TO_ADDR
// end ;
28370: LD_VAR 0 3
28374: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28375: LD_INT 0
28377: PPUSH
28378: PPUSH
28379: PPUSH
28380: PPUSH
// result := false ;
28381: LD_ADDR_VAR 0 2
28385: PUSH
28386: LD_INT 0
28388: ST_TO_ADDR
// side := GetSide ( unit ) ;
28389: LD_ADDR_VAR 0 3
28393: PUSH
28394: LD_VAR 0 1
28398: PPUSH
28399: CALL_OW 255
28403: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28404: LD_ADDR_VAR 0 4
28408: PUSH
28409: LD_VAR 0 1
28413: PPUSH
28414: CALL_OW 248
28418: ST_TO_ADDR
// case nat of 1 :
28419: LD_VAR 0 4
28423: PUSH
28424: LD_INT 1
28426: DOUBLE
28427: EQUAL
28428: IFTRUE 28432
28430: GO 28443
28432: POP
// tech := tech_lassight ; 2 :
28433: LD_ADDR_VAR 0 5
28437: PUSH
28438: LD_INT 12
28440: ST_TO_ADDR
28441: GO 28482
28443: LD_INT 2
28445: DOUBLE
28446: EQUAL
28447: IFTRUE 28451
28449: GO 28462
28451: POP
// tech := tech_mortar ; 3 :
28452: LD_ADDR_VAR 0 5
28456: PUSH
28457: LD_INT 41
28459: ST_TO_ADDR
28460: GO 28482
28462: LD_INT 3
28464: DOUBLE
28465: EQUAL
28466: IFTRUE 28470
28468: GO 28481
28470: POP
// tech := tech_bazooka ; end ;
28471: LD_ADDR_VAR 0 5
28475: PUSH
28476: LD_INT 44
28478: ST_TO_ADDR
28479: GO 28482
28481: POP
// if Researched ( side , tech ) then
28482: LD_VAR 0 3
28486: PPUSH
28487: LD_VAR 0 5
28491: PPUSH
28492: CALL_OW 325
28496: IFFALSE 28523
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28498: LD_ADDR_VAR 0 2
28502: PUSH
28503: LD_INT 5
28505: PUSH
28506: LD_INT 8
28508: PUSH
28509: LD_INT 9
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: LIST
28516: PUSH
28517: LD_VAR 0 4
28521: ARRAY
28522: ST_TO_ADDR
// end ;
28523: LD_VAR 0 2
28527: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28528: LD_INT 0
28530: PPUSH
28531: PPUSH
28532: PPUSH
// if not mines then
28533: LD_VAR 0 2
28537: NOT
28538: IFFALSE 28542
// exit ;
28540: GO 28686
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28542: LD_ADDR_VAR 0 5
28546: PUSH
28547: LD_INT 81
28549: PUSH
28550: LD_VAR 0 1
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: PUSH
28559: LD_INT 3
28561: PUSH
28562: LD_INT 21
28564: PUSH
28565: LD_INT 3
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PPUSH
28580: CALL_OW 69
28584: ST_TO_ADDR
// for i in mines do
28585: LD_ADDR_VAR 0 4
28589: PUSH
28590: LD_VAR 0 2
28594: PUSH
28595: FOR_IN
28596: IFFALSE 28684
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28598: LD_VAR 0 4
28602: PUSH
28603: LD_INT 1
28605: ARRAY
28606: PPUSH
28607: LD_VAR 0 4
28611: PUSH
28612: LD_INT 2
28614: ARRAY
28615: PPUSH
28616: CALL_OW 458
28620: NOT
28621: IFFALSE 28625
// continue ;
28623: GO 28595
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28625: LD_VAR 0 4
28629: PUSH
28630: LD_INT 1
28632: ARRAY
28633: PPUSH
28634: LD_VAR 0 4
28638: PUSH
28639: LD_INT 2
28641: ARRAY
28642: PPUSH
28643: CALL_OW 428
28647: PUSH
28648: LD_VAR 0 5
28652: IN
28653: IFFALSE 28682
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28655: LD_VAR 0 4
28659: PUSH
28660: LD_INT 1
28662: ARRAY
28663: PPUSH
28664: LD_VAR 0 4
28668: PUSH
28669: LD_INT 2
28671: ARRAY
28672: PPUSH
28673: LD_VAR 0 1
28677: PPUSH
28678: CALL_OW 456
// end ;
28682: GO 28595
28684: POP
28685: POP
// end ;
28686: LD_VAR 0 3
28690: RET
// export function Count ( array ) ; begin
28691: LD_INT 0
28693: PPUSH
// result := array + 0 ;
28694: LD_ADDR_VAR 0 2
28698: PUSH
28699: LD_VAR 0 1
28703: PUSH
28704: LD_INT 0
28706: PLUS
28707: ST_TO_ADDR
// end ;
28708: LD_VAR 0 2
28712: RET
// export function IsEmpty ( building ) ; begin
28713: LD_INT 0
28715: PPUSH
// if not building then
28716: LD_VAR 0 1
28720: NOT
28721: IFFALSE 28725
// exit ;
28723: GO 28768
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28725: LD_ADDR_VAR 0 2
28729: PUSH
28730: LD_VAR 0 1
28734: PUSH
28735: LD_INT 22
28737: PUSH
28738: LD_VAR 0 1
28742: PPUSH
28743: CALL_OW 255
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: LD_INT 58
28754: PUSH
28755: EMPTY
28756: LIST
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PPUSH
28762: CALL_OW 69
28766: IN
28767: ST_TO_ADDR
// end ;
28768: LD_VAR 0 2
28772: RET
// export function IsNotFull ( building ) ; var places ; begin
28773: LD_INT 0
28775: PPUSH
28776: PPUSH
// if not building then
28777: LD_VAR 0 1
28781: NOT
28782: IFFALSE 28786
// exit ;
28784: GO 28814
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
28786: LD_ADDR_VAR 0 2
28790: PUSH
28791: LD_VAR 0 1
28795: PPUSH
28796: LD_INT 3
28798: PUSH
28799: LD_INT 62
28801: PUSH
28802: EMPTY
28803: LIST
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PPUSH
28809: CALL_OW 72
28813: ST_TO_ADDR
// end ;
28814: LD_VAR 0 2
28818: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28819: LD_INT 0
28821: PPUSH
28822: PPUSH
28823: PPUSH
28824: PPUSH
// tmp := [ ] ;
28825: LD_ADDR_VAR 0 3
28829: PUSH
28830: EMPTY
28831: ST_TO_ADDR
// list := [ ] ;
28832: LD_ADDR_VAR 0 5
28836: PUSH
28837: EMPTY
28838: ST_TO_ADDR
// for i = 16 to 25 do
28839: LD_ADDR_VAR 0 4
28843: PUSH
28844: DOUBLE
28845: LD_INT 16
28847: DEC
28848: ST_TO_ADDR
28849: LD_INT 25
28851: PUSH
28852: FOR_TO
28853: IFFALSE 28926
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28855: LD_ADDR_VAR 0 3
28859: PUSH
28860: LD_VAR 0 3
28864: PUSH
28865: LD_INT 22
28867: PUSH
28868: LD_VAR 0 1
28872: PPUSH
28873: CALL_OW 255
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 91
28884: PUSH
28885: LD_VAR 0 1
28889: PUSH
28890: LD_INT 6
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 30
28900: PUSH
28901: LD_VAR 0 4
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: LIST
28914: PUSH
28915: EMPTY
28916: LIST
28917: PPUSH
28918: CALL_OW 69
28922: ADD
28923: ST_TO_ADDR
28924: GO 28852
28926: POP
28927: POP
// for i = 1 to tmp do
28928: LD_ADDR_VAR 0 4
28932: PUSH
28933: DOUBLE
28934: LD_INT 1
28936: DEC
28937: ST_TO_ADDR
28938: LD_VAR 0 3
28942: PUSH
28943: FOR_TO
28944: IFFALSE 29032
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28946: LD_ADDR_VAR 0 5
28950: PUSH
28951: LD_VAR 0 5
28955: PUSH
28956: LD_VAR 0 3
28960: PUSH
28961: LD_VAR 0 4
28965: ARRAY
28966: PPUSH
28967: CALL_OW 266
28971: PUSH
28972: LD_VAR 0 3
28976: PUSH
28977: LD_VAR 0 4
28981: ARRAY
28982: PPUSH
28983: CALL_OW 250
28987: PUSH
28988: LD_VAR 0 3
28992: PUSH
28993: LD_VAR 0 4
28997: ARRAY
28998: PPUSH
28999: CALL_OW 251
29003: PUSH
29004: LD_VAR 0 3
29008: PUSH
29009: LD_VAR 0 4
29013: ARRAY
29014: PPUSH
29015: CALL_OW 254
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: PUSH
29026: EMPTY
29027: LIST
29028: ADD
29029: ST_TO_ADDR
29030: GO 28943
29032: POP
29033: POP
// result := list ;
29034: LD_ADDR_VAR 0 2
29038: PUSH
29039: LD_VAR 0 5
29043: ST_TO_ADDR
// end ;
29044: LD_VAR 0 2
29048: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29049: LD_INT 0
29051: PPUSH
29052: PPUSH
29053: PPUSH
29054: PPUSH
29055: PPUSH
29056: PPUSH
29057: PPUSH
// if not factory then
29058: LD_VAR 0 1
29062: NOT
29063: IFFALSE 29067
// exit ;
29065: GO 29660
// if control = control_apeman then
29067: LD_VAR 0 4
29071: PUSH
29072: LD_INT 5
29074: EQUAL
29075: IFFALSE 29184
// begin tmp := UnitsInside ( factory ) ;
29077: LD_ADDR_VAR 0 8
29081: PUSH
29082: LD_VAR 0 1
29086: PPUSH
29087: CALL_OW 313
29091: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29092: LD_VAR 0 8
29096: PPUSH
29097: LD_INT 25
29099: PUSH
29100: LD_INT 12
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PPUSH
29107: CALL_OW 72
29111: NOT
29112: IFFALSE 29122
// control := control_manual ;
29114: LD_ADDR_VAR 0 4
29118: PUSH
29119: LD_INT 1
29121: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29122: LD_ADDR_VAR 0 8
29126: PUSH
29127: LD_VAR 0 1
29131: PPUSH
29132: CALL 28819 0 1
29136: ST_TO_ADDR
// if tmp then
29137: LD_VAR 0 8
29141: IFFALSE 29184
// begin for i in tmp do
29143: LD_ADDR_VAR 0 7
29147: PUSH
29148: LD_VAR 0 8
29152: PUSH
29153: FOR_IN
29154: IFFALSE 29182
// if i [ 1 ] = b_ext_radio then
29156: LD_VAR 0 7
29160: PUSH
29161: LD_INT 1
29163: ARRAY
29164: PUSH
29165: LD_INT 22
29167: EQUAL
29168: IFFALSE 29180
// begin control := control_remote ;
29170: LD_ADDR_VAR 0 4
29174: PUSH
29175: LD_INT 2
29177: ST_TO_ADDR
// break ;
29178: GO 29182
// end ;
29180: GO 29153
29182: POP
29183: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29184: LD_VAR 0 1
29188: PPUSH
29189: LD_VAR 0 2
29193: PPUSH
29194: LD_VAR 0 3
29198: PPUSH
29199: LD_VAR 0 4
29203: PPUSH
29204: LD_VAR 0 5
29208: PPUSH
29209: CALL_OW 448
29213: IFFALSE 29248
// begin result := [ chassis , engine , control , weapon ] ;
29215: LD_ADDR_VAR 0 6
29219: PUSH
29220: LD_VAR 0 2
29224: PUSH
29225: LD_VAR 0 3
29229: PUSH
29230: LD_VAR 0 4
29234: PUSH
29235: LD_VAR 0 5
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: ST_TO_ADDR
// exit ;
29246: GO 29660
// end ; _chassis := AvailableChassisList ( factory ) ;
29248: LD_ADDR_VAR 0 9
29252: PUSH
29253: LD_VAR 0 1
29257: PPUSH
29258: CALL_OW 475
29262: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29263: LD_ADDR_VAR 0 11
29267: PUSH
29268: LD_VAR 0 1
29272: PPUSH
29273: CALL_OW 476
29277: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29278: LD_ADDR_VAR 0 12
29282: PUSH
29283: LD_VAR 0 1
29287: PPUSH
29288: CALL_OW 477
29292: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29293: LD_ADDR_VAR 0 10
29297: PUSH
29298: LD_VAR 0 1
29302: PPUSH
29303: CALL_OW 478
29307: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29308: LD_VAR 0 9
29312: NOT
29313: PUSH
29314: LD_VAR 0 11
29318: NOT
29319: OR
29320: PUSH
29321: LD_VAR 0 12
29325: NOT
29326: OR
29327: PUSH
29328: LD_VAR 0 10
29332: NOT
29333: OR
29334: IFFALSE 29369
// begin result := [ chassis , engine , control , weapon ] ;
29336: LD_ADDR_VAR 0 6
29340: PUSH
29341: LD_VAR 0 2
29345: PUSH
29346: LD_VAR 0 3
29350: PUSH
29351: LD_VAR 0 4
29355: PUSH
29356: LD_VAR 0 5
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: ST_TO_ADDR
// exit ;
29367: GO 29660
// end ; if not chassis in _chassis then
29369: LD_VAR 0 2
29373: PUSH
29374: LD_VAR 0 9
29378: IN
29379: NOT
29380: IFFALSE 29406
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29382: LD_ADDR_VAR 0 2
29386: PUSH
29387: LD_VAR 0 9
29391: PUSH
29392: LD_INT 1
29394: PPUSH
29395: LD_VAR 0 9
29399: PPUSH
29400: CALL_OW 12
29404: ARRAY
29405: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29406: LD_VAR 0 2
29410: PPUSH
29411: LD_VAR 0 3
29415: PPUSH
29416: CALL 29665 0 2
29420: NOT
29421: IFFALSE 29480
// repeat engine := _engine [ 1 ] ;
29423: LD_ADDR_VAR 0 3
29427: PUSH
29428: LD_VAR 0 11
29432: PUSH
29433: LD_INT 1
29435: ARRAY
29436: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29437: LD_ADDR_VAR 0 11
29441: PUSH
29442: LD_VAR 0 11
29446: PPUSH
29447: LD_INT 1
29449: PPUSH
29450: CALL_OW 3
29454: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29455: LD_VAR 0 2
29459: PPUSH
29460: LD_VAR 0 3
29464: PPUSH
29465: CALL 29665 0 2
29469: PUSH
29470: LD_VAR 0 11
29474: PUSH
29475: EMPTY
29476: EQUAL
29477: OR
29478: IFFALSE 29423
// if not control in _control then
29480: LD_VAR 0 4
29484: PUSH
29485: LD_VAR 0 12
29489: IN
29490: NOT
29491: IFFALSE 29517
// control := _control [ rand ( 1 , _control ) ] ;
29493: LD_ADDR_VAR 0 4
29497: PUSH
29498: LD_VAR 0 12
29502: PUSH
29503: LD_INT 1
29505: PPUSH
29506: LD_VAR 0 12
29510: PPUSH
29511: CALL_OW 12
29515: ARRAY
29516: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29517: LD_VAR 0 2
29521: PPUSH
29522: LD_VAR 0 5
29526: PPUSH
29527: CALL 29885 0 2
29531: NOT
29532: IFFALSE 29591
// repeat weapon := _weapon [ 1 ] ;
29534: LD_ADDR_VAR 0 5
29538: PUSH
29539: LD_VAR 0 10
29543: PUSH
29544: LD_INT 1
29546: ARRAY
29547: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29548: LD_ADDR_VAR 0 10
29552: PUSH
29553: LD_VAR 0 10
29557: PPUSH
29558: LD_INT 1
29560: PPUSH
29561: CALL_OW 3
29565: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29566: LD_VAR 0 2
29570: PPUSH
29571: LD_VAR 0 5
29575: PPUSH
29576: CALL 29885 0 2
29580: PUSH
29581: LD_VAR 0 10
29585: PUSH
29586: EMPTY
29587: EQUAL
29588: OR
29589: IFFALSE 29534
// result := [ ] ;
29591: LD_ADDR_VAR 0 6
29595: PUSH
29596: EMPTY
29597: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29598: LD_VAR 0 1
29602: PPUSH
29603: LD_VAR 0 2
29607: PPUSH
29608: LD_VAR 0 3
29612: PPUSH
29613: LD_VAR 0 4
29617: PPUSH
29618: LD_VAR 0 5
29622: PPUSH
29623: CALL_OW 448
29627: IFFALSE 29660
// result := [ chassis , engine , control , weapon ] ;
29629: LD_ADDR_VAR 0 6
29633: PUSH
29634: LD_VAR 0 2
29638: PUSH
29639: LD_VAR 0 3
29643: PUSH
29644: LD_VAR 0 4
29648: PUSH
29649: LD_VAR 0 5
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: ST_TO_ADDR
// end ;
29660: LD_VAR 0 6
29664: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29665: LD_INT 0
29667: PPUSH
// if not chassis or not engine then
29668: LD_VAR 0 1
29672: NOT
29673: PUSH
29674: LD_VAR 0 2
29678: NOT
29679: OR
29680: IFFALSE 29684
// exit ;
29682: GO 29880
// case engine of engine_solar :
29684: LD_VAR 0 2
29688: PUSH
29689: LD_INT 2
29691: DOUBLE
29692: EQUAL
29693: IFTRUE 29697
29695: GO 29735
29697: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29698: LD_ADDR_VAR 0 3
29702: PUSH
29703: LD_INT 11
29705: PUSH
29706: LD_INT 12
29708: PUSH
29709: LD_INT 13
29711: PUSH
29712: LD_INT 14
29714: PUSH
29715: LD_INT 1
29717: PUSH
29718: LD_INT 2
29720: PUSH
29721: LD_INT 3
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: ST_TO_ADDR
29733: GO 29864
29735: LD_INT 1
29737: DOUBLE
29738: EQUAL
29739: IFTRUE 29743
29741: GO 29805
29743: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29744: LD_ADDR_VAR 0 3
29748: PUSH
29749: LD_INT 11
29751: PUSH
29752: LD_INT 12
29754: PUSH
29755: LD_INT 13
29757: PUSH
29758: LD_INT 14
29760: PUSH
29761: LD_INT 1
29763: PUSH
29764: LD_INT 2
29766: PUSH
29767: LD_INT 3
29769: PUSH
29770: LD_INT 4
29772: PUSH
29773: LD_INT 5
29775: PUSH
29776: LD_INT 21
29778: PUSH
29779: LD_INT 23
29781: PUSH
29782: LD_INT 22
29784: PUSH
29785: LD_INT 24
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: ST_TO_ADDR
29803: GO 29864
29805: LD_INT 3
29807: DOUBLE
29808: EQUAL
29809: IFTRUE 29813
29811: GO 29863
29813: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29814: LD_ADDR_VAR 0 3
29818: PUSH
29819: LD_INT 13
29821: PUSH
29822: LD_INT 14
29824: PUSH
29825: LD_INT 2
29827: PUSH
29828: LD_INT 3
29830: PUSH
29831: LD_INT 4
29833: PUSH
29834: LD_INT 5
29836: PUSH
29837: LD_INT 21
29839: PUSH
29840: LD_INT 22
29842: PUSH
29843: LD_INT 23
29845: PUSH
29846: LD_INT 24
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: ST_TO_ADDR
29861: GO 29864
29863: POP
// result := ( chassis in result ) ;
29864: LD_ADDR_VAR 0 3
29868: PUSH
29869: LD_VAR 0 1
29873: PUSH
29874: LD_VAR 0 3
29878: IN
29879: ST_TO_ADDR
// end ;
29880: LD_VAR 0 3
29884: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29885: LD_INT 0
29887: PPUSH
// if not chassis or not weapon then
29888: LD_VAR 0 1
29892: NOT
29893: PUSH
29894: LD_VAR 0 2
29898: NOT
29899: OR
29900: IFFALSE 29904
// exit ;
29902: GO 30964
// case weapon of us_machine_gun :
29904: LD_VAR 0 2
29908: PUSH
29909: LD_INT 2
29911: DOUBLE
29912: EQUAL
29913: IFTRUE 29917
29915: GO 29947
29917: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29918: LD_ADDR_VAR 0 3
29922: PUSH
29923: LD_INT 1
29925: PUSH
29926: LD_INT 2
29928: PUSH
29929: LD_INT 3
29931: PUSH
29932: LD_INT 4
29934: PUSH
29935: LD_INT 5
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: ST_TO_ADDR
29945: GO 30948
29947: LD_INT 3
29949: DOUBLE
29950: EQUAL
29951: IFTRUE 29955
29953: GO 29985
29955: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29956: LD_ADDR_VAR 0 3
29960: PUSH
29961: LD_INT 1
29963: PUSH
29964: LD_INT 2
29966: PUSH
29967: LD_INT 3
29969: PUSH
29970: LD_INT 4
29972: PUSH
29973: LD_INT 5
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: ST_TO_ADDR
29983: GO 30948
29985: LD_INT 11
29987: DOUBLE
29988: EQUAL
29989: IFTRUE 29993
29991: GO 30023
29993: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29994: LD_ADDR_VAR 0 3
29998: PUSH
29999: LD_INT 1
30001: PUSH
30002: LD_INT 2
30004: PUSH
30005: LD_INT 3
30007: PUSH
30008: LD_INT 4
30010: PUSH
30011: LD_INT 5
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: ST_TO_ADDR
30021: GO 30948
30023: LD_INT 4
30025: DOUBLE
30026: EQUAL
30027: IFTRUE 30031
30029: GO 30057
30031: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30032: LD_ADDR_VAR 0 3
30036: PUSH
30037: LD_INT 2
30039: PUSH
30040: LD_INT 3
30042: PUSH
30043: LD_INT 4
30045: PUSH
30046: LD_INT 5
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: ST_TO_ADDR
30055: GO 30948
30057: LD_INT 5
30059: DOUBLE
30060: EQUAL
30061: IFTRUE 30065
30063: GO 30091
30065: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30066: LD_ADDR_VAR 0 3
30070: PUSH
30071: LD_INT 2
30073: PUSH
30074: LD_INT 3
30076: PUSH
30077: LD_INT 4
30079: PUSH
30080: LD_INT 5
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: ST_TO_ADDR
30089: GO 30948
30091: LD_INT 9
30093: DOUBLE
30094: EQUAL
30095: IFTRUE 30099
30097: GO 30125
30099: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30100: LD_ADDR_VAR 0 3
30104: PUSH
30105: LD_INT 2
30107: PUSH
30108: LD_INT 3
30110: PUSH
30111: LD_INT 4
30113: PUSH
30114: LD_INT 5
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: ST_TO_ADDR
30123: GO 30948
30125: LD_INT 7
30127: DOUBLE
30128: EQUAL
30129: IFTRUE 30133
30131: GO 30159
30133: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30134: LD_ADDR_VAR 0 3
30138: PUSH
30139: LD_INT 2
30141: PUSH
30142: LD_INT 3
30144: PUSH
30145: LD_INT 4
30147: PUSH
30148: LD_INT 5
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: ST_TO_ADDR
30157: GO 30948
30159: LD_INT 12
30161: DOUBLE
30162: EQUAL
30163: IFTRUE 30167
30165: GO 30193
30167: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30168: LD_ADDR_VAR 0 3
30172: PUSH
30173: LD_INT 2
30175: PUSH
30176: LD_INT 3
30178: PUSH
30179: LD_INT 4
30181: PUSH
30182: LD_INT 5
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: ST_TO_ADDR
30191: GO 30948
30193: LD_INT 13
30195: DOUBLE
30196: EQUAL
30197: IFTRUE 30201
30199: GO 30227
30201: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30202: LD_ADDR_VAR 0 3
30206: PUSH
30207: LD_INT 2
30209: PUSH
30210: LD_INT 3
30212: PUSH
30213: LD_INT 4
30215: PUSH
30216: LD_INT 5
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: ST_TO_ADDR
30225: GO 30948
30227: LD_INT 14
30229: DOUBLE
30230: EQUAL
30231: IFTRUE 30235
30233: GO 30253
30235: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30236: LD_ADDR_VAR 0 3
30240: PUSH
30241: LD_INT 4
30243: PUSH
30244: LD_INT 5
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: ST_TO_ADDR
30251: GO 30948
30253: LD_INT 6
30255: DOUBLE
30256: EQUAL
30257: IFTRUE 30261
30259: GO 30279
30261: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30262: LD_ADDR_VAR 0 3
30266: PUSH
30267: LD_INT 4
30269: PUSH
30270: LD_INT 5
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: ST_TO_ADDR
30277: GO 30948
30279: LD_INT 10
30281: DOUBLE
30282: EQUAL
30283: IFTRUE 30287
30285: GO 30305
30287: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30288: LD_ADDR_VAR 0 3
30292: PUSH
30293: LD_INT 4
30295: PUSH
30296: LD_INT 5
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: ST_TO_ADDR
30303: GO 30948
30305: LD_INT 22
30307: DOUBLE
30308: EQUAL
30309: IFTRUE 30313
30311: GO 30339
30313: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30314: LD_ADDR_VAR 0 3
30318: PUSH
30319: LD_INT 11
30321: PUSH
30322: LD_INT 12
30324: PUSH
30325: LD_INT 13
30327: PUSH
30328: LD_INT 14
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: ST_TO_ADDR
30337: GO 30948
30339: LD_INT 23
30341: DOUBLE
30342: EQUAL
30343: IFTRUE 30347
30345: GO 30373
30347: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30348: LD_ADDR_VAR 0 3
30352: PUSH
30353: LD_INT 11
30355: PUSH
30356: LD_INT 12
30358: PUSH
30359: LD_INT 13
30361: PUSH
30362: LD_INT 14
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: ST_TO_ADDR
30371: GO 30948
30373: LD_INT 24
30375: DOUBLE
30376: EQUAL
30377: IFTRUE 30381
30379: GO 30407
30381: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30382: LD_ADDR_VAR 0 3
30386: PUSH
30387: LD_INT 11
30389: PUSH
30390: LD_INT 12
30392: PUSH
30393: LD_INT 13
30395: PUSH
30396: LD_INT 14
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: ST_TO_ADDR
30405: GO 30948
30407: LD_INT 30
30409: DOUBLE
30410: EQUAL
30411: IFTRUE 30415
30413: GO 30441
30415: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30416: LD_ADDR_VAR 0 3
30420: PUSH
30421: LD_INT 11
30423: PUSH
30424: LD_INT 12
30426: PUSH
30427: LD_INT 13
30429: PUSH
30430: LD_INT 14
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: ST_TO_ADDR
30439: GO 30948
30441: LD_INT 25
30443: DOUBLE
30444: EQUAL
30445: IFTRUE 30449
30447: GO 30467
30449: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30450: LD_ADDR_VAR 0 3
30454: PUSH
30455: LD_INT 13
30457: PUSH
30458: LD_INT 14
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: ST_TO_ADDR
30465: GO 30948
30467: LD_INT 27
30469: DOUBLE
30470: EQUAL
30471: IFTRUE 30475
30473: GO 30493
30475: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30476: LD_ADDR_VAR 0 3
30480: PUSH
30481: LD_INT 13
30483: PUSH
30484: LD_INT 14
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: ST_TO_ADDR
30491: GO 30948
30493: LD_INT 92
30495: DOUBLE
30496: EQUAL
30497: IFTRUE 30501
30499: GO 30527
30501: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30502: LD_ADDR_VAR 0 3
30506: PUSH
30507: LD_INT 11
30509: PUSH
30510: LD_INT 12
30512: PUSH
30513: LD_INT 13
30515: PUSH
30516: LD_INT 14
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: ST_TO_ADDR
30525: GO 30948
30527: LD_INT 28
30529: DOUBLE
30530: EQUAL
30531: IFTRUE 30535
30533: GO 30553
30535: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30536: LD_ADDR_VAR 0 3
30540: PUSH
30541: LD_INT 13
30543: PUSH
30544: LD_INT 14
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: ST_TO_ADDR
30551: GO 30948
30553: LD_INT 29
30555: DOUBLE
30556: EQUAL
30557: IFTRUE 30561
30559: GO 30579
30561: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30562: LD_ADDR_VAR 0 3
30566: PUSH
30567: LD_INT 13
30569: PUSH
30570: LD_INT 14
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: ST_TO_ADDR
30577: GO 30948
30579: LD_INT 31
30581: DOUBLE
30582: EQUAL
30583: IFTRUE 30587
30585: GO 30605
30587: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30588: LD_ADDR_VAR 0 3
30592: PUSH
30593: LD_INT 13
30595: PUSH
30596: LD_INT 14
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: ST_TO_ADDR
30603: GO 30948
30605: LD_INT 26
30607: DOUBLE
30608: EQUAL
30609: IFTRUE 30613
30611: GO 30631
30613: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30614: LD_ADDR_VAR 0 3
30618: PUSH
30619: LD_INT 13
30621: PUSH
30622: LD_INT 14
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: ST_TO_ADDR
30629: GO 30948
30631: LD_INT 42
30633: DOUBLE
30634: EQUAL
30635: IFTRUE 30639
30637: GO 30665
30639: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30640: LD_ADDR_VAR 0 3
30644: PUSH
30645: LD_INT 21
30647: PUSH
30648: LD_INT 22
30650: PUSH
30651: LD_INT 23
30653: PUSH
30654: LD_INT 24
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: ST_TO_ADDR
30663: GO 30948
30665: LD_INT 43
30667: DOUBLE
30668: EQUAL
30669: IFTRUE 30673
30671: GO 30699
30673: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30674: LD_ADDR_VAR 0 3
30678: PUSH
30679: LD_INT 21
30681: PUSH
30682: LD_INT 22
30684: PUSH
30685: LD_INT 23
30687: PUSH
30688: LD_INT 24
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: ST_TO_ADDR
30697: GO 30948
30699: LD_INT 44
30701: DOUBLE
30702: EQUAL
30703: IFTRUE 30707
30705: GO 30733
30707: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30708: LD_ADDR_VAR 0 3
30712: PUSH
30713: LD_INT 21
30715: PUSH
30716: LD_INT 22
30718: PUSH
30719: LD_INT 23
30721: PUSH
30722: LD_INT 24
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: ST_TO_ADDR
30731: GO 30948
30733: LD_INT 45
30735: DOUBLE
30736: EQUAL
30737: IFTRUE 30741
30739: GO 30767
30741: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30742: LD_ADDR_VAR 0 3
30746: PUSH
30747: LD_INT 21
30749: PUSH
30750: LD_INT 22
30752: PUSH
30753: LD_INT 23
30755: PUSH
30756: LD_INT 24
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: ST_TO_ADDR
30765: GO 30948
30767: LD_INT 49
30769: DOUBLE
30770: EQUAL
30771: IFTRUE 30775
30773: GO 30801
30775: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30776: LD_ADDR_VAR 0 3
30780: PUSH
30781: LD_INT 21
30783: PUSH
30784: LD_INT 22
30786: PUSH
30787: LD_INT 23
30789: PUSH
30790: LD_INT 24
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: ST_TO_ADDR
30799: GO 30948
30801: LD_INT 51
30803: DOUBLE
30804: EQUAL
30805: IFTRUE 30809
30807: GO 30835
30809: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30810: LD_ADDR_VAR 0 3
30814: PUSH
30815: LD_INT 21
30817: PUSH
30818: LD_INT 22
30820: PUSH
30821: LD_INT 23
30823: PUSH
30824: LD_INT 24
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: ST_TO_ADDR
30833: GO 30948
30835: LD_INT 52
30837: DOUBLE
30838: EQUAL
30839: IFTRUE 30843
30841: GO 30869
30843: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30844: LD_ADDR_VAR 0 3
30848: PUSH
30849: LD_INT 21
30851: PUSH
30852: LD_INT 22
30854: PUSH
30855: LD_INT 23
30857: PUSH
30858: LD_INT 24
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: ST_TO_ADDR
30867: GO 30948
30869: LD_INT 53
30871: DOUBLE
30872: EQUAL
30873: IFTRUE 30877
30875: GO 30895
30877: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30878: LD_ADDR_VAR 0 3
30882: PUSH
30883: LD_INT 23
30885: PUSH
30886: LD_INT 24
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: ST_TO_ADDR
30893: GO 30948
30895: LD_INT 46
30897: DOUBLE
30898: EQUAL
30899: IFTRUE 30903
30901: GO 30921
30903: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30904: LD_ADDR_VAR 0 3
30908: PUSH
30909: LD_INT 23
30911: PUSH
30912: LD_INT 24
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: ST_TO_ADDR
30919: GO 30948
30921: LD_INT 47
30923: DOUBLE
30924: EQUAL
30925: IFTRUE 30929
30927: GO 30947
30929: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30930: LD_ADDR_VAR 0 3
30934: PUSH
30935: LD_INT 23
30937: PUSH
30938: LD_INT 24
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: ST_TO_ADDR
30945: GO 30948
30947: POP
// result := ( chassis in result ) ;
30948: LD_ADDR_VAR 0 3
30952: PUSH
30953: LD_VAR 0 1
30957: PUSH
30958: LD_VAR 0 3
30962: IN
30963: ST_TO_ADDR
// end ;
30964: LD_VAR 0 3
30968: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30969: LD_INT 0
30971: PPUSH
30972: PPUSH
30973: PPUSH
30974: PPUSH
30975: PPUSH
30976: PPUSH
30977: PPUSH
// result := array ;
30978: LD_ADDR_VAR 0 5
30982: PUSH
30983: LD_VAR 0 1
30987: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30988: LD_VAR 0 1
30992: NOT
30993: PUSH
30994: LD_VAR 0 2
30998: NOT
30999: OR
31000: PUSH
31001: LD_VAR 0 3
31005: NOT
31006: OR
31007: PUSH
31008: LD_VAR 0 2
31012: PUSH
31013: LD_VAR 0 1
31017: GREATER
31018: OR
31019: PUSH
31020: LD_VAR 0 3
31024: PUSH
31025: LD_VAR 0 1
31029: GREATER
31030: OR
31031: IFFALSE 31035
// exit ;
31033: GO 31331
// if direction then
31035: LD_VAR 0 4
31039: IFFALSE 31103
// begin d := 1 ;
31041: LD_ADDR_VAR 0 9
31045: PUSH
31046: LD_INT 1
31048: ST_TO_ADDR
// if i_from > i_to then
31049: LD_VAR 0 2
31053: PUSH
31054: LD_VAR 0 3
31058: GREATER
31059: IFFALSE 31085
// length := ( array - i_from ) + i_to else
31061: LD_ADDR_VAR 0 11
31065: PUSH
31066: LD_VAR 0 1
31070: PUSH
31071: LD_VAR 0 2
31075: MINUS
31076: PUSH
31077: LD_VAR 0 3
31081: PLUS
31082: ST_TO_ADDR
31083: GO 31101
// length := i_to - i_from ;
31085: LD_ADDR_VAR 0 11
31089: PUSH
31090: LD_VAR 0 3
31094: PUSH
31095: LD_VAR 0 2
31099: MINUS
31100: ST_TO_ADDR
// end else
31101: GO 31164
// begin d := - 1 ;
31103: LD_ADDR_VAR 0 9
31107: PUSH
31108: LD_INT 1
31110: NEG
31111: ST_TO_ADDR
// if i_from > i_to then
31112: LD_VAR 0 2
31116: PUSH
31117: LD_VAR 0 3
31121: GREATER
31122: IFFALSE 31142
// length := i_from - i_to else
31124: LD_ADDR_VAR 0 11
31128: PUSH
31129: LD_VAR 0 2
31133: PUSH
31134: LD_VAR 0 3
31138: MINUS
31139: ST_TO_ADDR
31140: GO 31164
// length := ( array - i_to ) + i_from ;
31142: LD_ADDR_VAR 0 11
31146: PUSH
31147: LD_VAR 0 1
31151: PUSH
31152: LD_VAR 0 3
31156: MINUS
31157: PUSH
31158: LD_VAR 0 2
31162: PLUS
31163: ST_TO_ADDR
// end ; if not length then
31164: LD_VAR 0 11
31168: NOT
31169: IFFALSE 31173
// exit ;
31171: GO 31331
// tmp := array ;
31173: LD_ADDR_VAR 0 10
31177: PUSH
31178: LD_VAR 0 1
31182: ST_TO_ADDR
// for i = 1 to length do
31183: LD_ADDR_VAR 0 6
31187: PUSH
31188: DOUBLE
31189: LD_INT 1
31191: DEC
31192: ST_TO_ADDR
31193: LD_VAR 0 11
31197: PUSH
31198: FOR_TO
31199: IFFALSE 31319
// begin for j = 1 to array do
31201: LD_ADDR_VAR 0 7
31205: PUSH
31206: DOUBLE
31207: LD_INT 1
31209: DEC
31210: ST_TO_ADDR
31211: LD_VAR 0 1
31215: PUSH
31216: FOR_TO
31217: IFFALSE 31305
// begin k := j + d ;
31219: LD_ADDR_VAR 0 8
31223: PUSH
31224: LD_VAR 0 7
31228: PUSH
31229: LD_VAR 0 9
31233: PLUS
31234: ST_TO_ADDR
// if k > array then
31235: LD_VAR 0 8
31239: PUSH
31240: LD_VAR 0 1
31244: GREATER
31245: IFFALSE 31255
// k := 1 ;
31247: LD_ADDR_VAR 0 8
31251: PUSH
31252: LD_INT 1
31254: ST_TO_ADDR
// if not k then
31255: LD_VAR 0 8
31259: NOT
31260: IFFALSE 31272
// k := array ;
31262: LD_ADDR_VAR 0 8
31266: PUSH
31267: LD_VAR 0 1
31271: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31272: LD_ADDR_VAR 0 10
31276: PUSH
31277: LD_VAR 0 10
31281: PPUSH
31282: LD_VAR 0 8
31286: PPUSH
31287: LD_VAR 0 1
31291: PUSH
31292: LD_VAR 0 7
31296: ARRAY
31297: PPUSH
31298: CALL_OW 1
31302: ST_TO_ADDR
// end ;
31303: GO 31216
31305: POP
31306: POP
// array := tmp ;
31307: LD_ADDR_VAR 0 1
31311: PUSH
31312: LD_VAR 0 10
31316: ST_TO_ADDR
// end ;
31317: GO 31198
31319: POP
31320: POP
// result := array ;
31321: LD_ADDR_VAR 0 5
31325: PUSH
31326: LD_VAR 0 1
31330: ST_TO_ADDR
// end ;
31331: LD_VAR 0 5
31335: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31336: LD_INT 0
31338: PPUSH
31339: PPUSH
// result := 0 ;
31340: LD_ADDR_VAR 0 3
31344: PUSH
31345: LD_INT 0
31347: ST_TO_ADDR
// if not array or not value in array then
31348: LD_VAR 0 1
31352: NOT
31353: PUSH
31354: LD_VAR 0 2
31358: PUSH
31359: LD_VAR 0 1
31363: IN
31364: NOT
31365: OR
31366: IFFALSE 31370
// exit ;
31368: GO 31424
// for i = 1 to array do
31370: LD_ADDR_VAR 0 4
31374: PUSH
31375: DOUBLE
31376: LD_INT 1
31378: DEC
31379: ST_TO_ADDR
31380: LD_VAR 0 1
31384: PUSH
31385: FOR_TO
31386: IFFALSE 31422
// if value = array [ i ] then
31388: LD_VAR 0 2
31392: PUSH
31393: LD_VAR 0 1
31397: PUSH
31398: LD_VAR 0 4
31402: ARRAY
31403: EQUAL
31404: IFFALSE 31420
// begin result := i ;
31406: LD_ADDR_VAR 0 3
31410: PUSH
31411: LD_VAR 0 4
31415: ST_TO_ADDR
// exit ;
31416: POP
31417: POP
31418: GO 31424
// end ;
31420: GO 31385
31422: POP
31423: POP
// end ;
31424: LD_VAR 0 3
31428: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31429: LD_INT 0
31431: PPUSH
// vc_chassis := chassis ;
31432: LD_ADDR_OWVAR 37
31436: PUSH
31437: LD_VAR 0 1
31441: ST_TO_ADDR
// vc_engine := engine ;
31442: LD_ADDR_OWVAR 39
31446: PUSH
31447: LD_VAR 0 2
31451: ST_TO_ADDR
// vc_control := control ;
31452: LD_ADDR_OWVAR 38
31456: PUSH
31457: LD_VAR 0 3
31461: ST_TO_ADDR
// vc_weapon := weapon ;
31462: LD_ADDR_OWVAR 40
31466: PUSH
31467: LD_VAR 0 4
31471: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31472: LD_ADDR_OWVAR 41
31476: PUSH
31477: LD_VAR 0 5
31481: ST_TO_ADDR
// end ;
31482: LD_VAR 0 6
31486: RET
// export function WantPlant ( unit ) ; var task ; begin
31487: LD_INT 0
31489: PPUSH
31490: PPUSH
// result := false ;
31491: LD_ADDR_VAR 0 2
31495: PUSH
31496: LD_INT 0
31498: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31499: LD_ADDR_VAR 0 3
31503: PUSH
31504: LD_VAR 0 1
31508: PPUSH
31509: CALL_OW 437
31513: ST_TO_ADDR
// if task then
31514: LD_VAR 0 3
31518: IFFALSE 31546
// if task [ 1 ] [ 1 ] = p then
31520: LD_VAR 0 3
31524: PUSH
31525: LD_INT 1
31527: ARRAY
31528: PUSH
31529: LD_INT 1
31531: ARRAY
31532: PUSH
31533: LD_STRING p
31535: EQUAL
31536: IFFALSE 31546
// result := true ;
31538: LD_ADDR_VAR 0 2
31542: PUSH
31543: LD_INT 1
31545: ST_TO_ADDR
// end ;
31546: LD_VAR 0 2
31550: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31551: LD_INT 0
31553: PPUSH
31554: PPUSH
31555: PPUSH
31556: PPUSH
// if pos < 1 then
31557: LD_VAR 0 2
31561: PUSH
31562: LD_INT 1
31564: LESS
31565: IFFALSE 31569
// exit ;
31567: GO 31872
// if pos = 1 then
31569: LD_VAR 0 2
31573: PUSH
31574: LD_INT 1
31576: EQUAL
31577: IFFALSE 31610
// result := Replace ( arr , pos [ 1 ] , value ) else
31579: LD_ADDR_VAR 0 4
31583: PUSH
31584: LD_VAR 0 1
31588: PPUSH
31589: LD_VAR 0 2
31593: PUSH
31594: LD_INT 1
31596: ARRAY
31597: PPUSH
31598: LD_VAR 0 3
31602: PPUSH
31603: CALL_OW 1
31607: ST_TO_ADDR
31608: GO 31872
// begin tmp := arr ;
31610: LD_ADDR_VAR 0 6
31614: PUSH
31615: LD_VAR 0 1
31619: ST_TO_ADDR
// s_arr := [ tmp ] ;
31620: LD_ADDR_VAR 0 7
31624: PUSH
31625: LD_VAR 0 6
31629: PUSH
31630: EMPTY
31631: LIST
31632: ST_TO_ADDR
// for i = 1 to pos - 1 do
31633: LD_ADDR_VAR 0 5
31637: PUSH
31638: DOUBLE
31639: LD_INT 1
31641: DEC
31642: ST_TO_ADDR
31643: LD_VAR 0 2
31647: PUSH
31648: LD_INT 1
31650: MINUS
31651: PUSH
31652: FOR_TO
31653: IFFALSE 31698
// begin tmp := tmp [ pos [ i ] ] ;
31655: LD_ADDR_VAR 0 6
31659: PUSH
31660: LD_VAR 0 6
31664: PUSH
31665: LD_VAR 0 2
31669: PUSH
31670: LD_VAR 0 5
31674: ARRAY
31675: ARRAY
31676: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31677: LD_ADDR_VAR 0 7
31681: PUSH
31682: LD_VAR 0 7
31686: PUSH
31687: LD_VAR 0 6
31691: PUSH
31692: EMPTY
31693: LIST
31694: ADD
31695: ST_TO_ADDR
// end ;
31696: GO 31652
31698: POP
31699: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31700: LD_ADDR_VAR 0 6
31704: PUSH
31705: LD_VAR 0 6
31709: PPUSH
31710: LD_VAR 0 2
31714: PUSH
31715: LD_VAR 0 2
31719: ARRAY
31720: PPUSH
31721: LD_VAR 0 3
31725: PPUSH
31726: CALL_OW 1
31730: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31731: LD_ADDR_VAR 0 7
31735: PUSH
31736: LD_VAR 0 7
31740: PPUSH
31741: LD_VAR 0 7
31745: PPUSH
31746: LD_VAR 0 6
31750: PPUSH
31751: CALL_OW 1
31755: ST_TO_ADDR
// for i = s_arr downto 2 do
31756: LD_ADDR_VAR 0 5
31760: PUSH
31761: DOUBLE
31762: LD_VAR 0 7
31766: INC
31767: ST_TO_ADDR
31768: LD_INT 2
31770: PUSH
31771: FOR_DOWNTO
31772: IFFALSE 31856
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31774: LD_ADDR_VAR 0 6
31778: PUSH
31779: LD_VAR 0 7
31783: PUSH
31784: LD_VAR 0 5
31788: PUSH
31789: LD_INT 1
31791: MINUS
31792: ARRAY
31793: PPUSH
31794: LD_VAR 0 2
31798: PUSH
31799: LD_VAR 0 5
31803: PUSH
31804: LD_INT 1
31806: MINUS
31807: ARRAY
31808: PPUSH
31809: LD_VAR 0 7
31813: PUSH
31814: LD_VAR 0 5
31818: ARRAY
31819: PPUSH
31820: CALL_OW 1
31824: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31825: LD_ADDR_VAR 0 7
31829: PUSH
31830: LD_VAR 0 7
31834: PPUSH
31835: LD_VAR 0 5
31839: PUSH
31840: LD_INT 1
31842: MINUS
31843: PPUSH
31844: LD_VAR 0 6
31848: PPUSH
31849: CALL_OW 1
31853: ST_TO_ADDR
// end ;
31854: GO 31771
31856: POP
31857: POP
// result := s_arr [ 1 ] ;
31858: LD_ADDR_VAR 0 4
31862: PUSH
31863: LD_VAR 0 7
31867: PUSH
31868: LD_INT 1
31870: ARRAY
31871: ST_TO_ADDR
// end ; end ;
31872: LD_VAR 0 4
31876: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31877: LD_INT 0
31879: PPUSH
31880: PPUSH
// if not list then
31881: LD_VAR 0 1
31885: NOT
31886: IFFALSE 31890
// exit ;
31888: GO 31981
// i := list [ pos1 ] ;
31890: LD_ADDR_VAR 0 5
31894: PUSH
31895: LD_VAR 0 1
31899: PUSH
31900: LD_VAR 0 2
31904: ARRAY
31905: ST_TO_ADDR
// if not i then
31906: LD_VAR 0 5
31910: NOT
31911: IFFALSE 31915
// exit ;
31913: GO 31981
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31915: LD_ADDR_VAR 0 1
31919: PUSH
31920: LD_VAR 0 1
31924: PPUSH
31925: LD_VAR 0 2
31929: PPUSH
31930: LD_VAR 0 1
31934: PUSH
31935: LD_VAR 0 3
31939: ARRAY
31940: PPUSH
31941: CALL_OW 1
31945: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31946: LD_ADDR_VAR 0 1
31950: PUSH
31951: LD_VAR 0 1
31955: PPUSH
31956: LD_VAR 0 3
31960: PPUSH
31961: LD_VAR 0 5
31965: PPUSH
31966: CALL_OW 1
31970: ST_TO_ADDR
// result := list ;
31971: LD_ADDR_VAR 0 4
31975: PUSH
31976: LD_VAR 0 1
31980: ST_TO_ADDR
// end ;
31981: LD_VAR 0 4
31985: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31986: LD_INT 0
31988: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31989: LD_ADDR_VAR 0 5
31993: PUSH
31994: LD_VAR 0 1
31998: PPUSH
31999: CALL_OW 250
32003: PPUSH
32004: LD_VAR 0 1
32008: PPUSH
32009: CALL_OW 251
32013: PPUSH
32014: LD_VAR 0 2
32018: PPUSH
32019: LD_VAR 0 3
32023: PPUSH
32024: LD_VAR 0 4
32028: PPUSH
32029: CALL 32407 0 5
32033: ST_TO_ADDR
// end ;
32034: LD_VAR 0 5
32038: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
32039: LD_INT 0
32041: PPUSH
32042: PPUSH
32043: PPUSH
32044: PPUSH
// if not list or not unit then
32045: LD_VAR 0 2
32049: NOT
32050: PUSH
32051: LD_VAR 0 1
32055: NOT
32056: OR
32057: IFFALSE 32061
// exit ;
32059: GO 32402
// result := [ ] ;
32061: LD_ADDR_VAR 0 5
32065: PUSH
32066: EMPTY
32067: ST_TO_ADDR
// for i in list do
32068: LD_ADDR_VAR 0 6
32072: PUSH
32073: LD_VAR 0 2
32077: PUSH
32078: FOR_IN
32079: IFFALSE 32297
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
32081: LD_ADDR_VAR 0 8
32085: PUSH
32086: LD_VAR 0 1
32090: PPUSH
32091: LD_VAR 0 6
32095: PUSH
32096: LD_INT 1
32098: ARRAY
32099: PPUSH
32100: LD_VAR 0 6
32104: PUSH
32105: LD_INT 2
32107: ARRAY
32108: PPUSH
32109: CALL_OW 297
32113: ST_TO_ADDR
// if not Count ( result ) then
32114: LD_VAR 0 5
32118: PPUSH
32119: CALL 28691 0 1
32123: NOT
32124: IFFALSE 32157
// begin result := Join ( result , [ i , tmp ] ) ;
32126: LD_ADDR_VAR 0 5
32130: PUSH
32131: LD_VAR 0 5
32135: PPUSH
32136: LD_VAR 0 6
32140: PUSH
32141: LD_VAR 0 8
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PPUSH
32150: CALL 64291 0 2
32154: ST_TO_ADDR
// continue ;
32155: GO 32078
// end ; if result [ result ] [ 2 ] <= tmp then
32157: LD_VAR 0 5
32161: PUSH
32162: LD_VAR 0 5
32166: ARRAY
32167: PUSH
32168: LD_INT 2
32170: ARRAY
32171: PUSH
32172: LD_VAR 0 8
32176: LESSEQUAL
32177: IFFALSE 32210
// result := Join ( result , [ i , tmp ] ) else
32179: LD_ADDR_VAR 0 5
32183: PUSH
32184: LD_VAR 0 5
32188: PPUSH
32189: LD_VAR 0 6
32193: PUSH
32194: LD_VAR 0 8
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PPUSH
32203: CALL 64291 0 2
32207: ST_TO_ADDR
32208: GO 32295
// begin for j := 1 to Count ( result ) do
32210: LD_ADDR_VAR 0 7
32214: PUSH
32215: DOUBLE
32216: LD_INT 1
32218: DEC
32219: ST_TO_ADDR
32220: LD_VAR 0 5
32224: PPUSH
32225: CALL 28691 0 1
32229: PUSH
32230: FOR_TO
32231: IFFALSE 32293
// begin if tmp < result [ j ] [ 2 ] then
32233: LD_VAR 0 8
32237: PUSH
32238: LD_VAR 0 5
32242: PUSH
32243: LD_VAR 0 7
32247: ARRAY
32248: PUSH
32249: LD_INT 2
32251: ARRAY
32252: LESS
32253: IFFALSE 32291
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32255: LD_ADDR_VAR 0 5
32259: PUSH
32260: LD_VAR 0 5
32264: PPUSH
32265: LD_VAR 0 7
32269: PPUSH
32270: LD_VAR 0 6
32274: PUSH
32275: LD_VAR 0 8
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PPUSH
32284: CALL_OW 2
32288: ST_TO_ADDR
// break ;
32289: GO 32293
// end ; end ;
32291: GO 32230
32293: POP
32294: POP
// end ; end ;
32295: GO 32078
32297: POP
32298: POP
// if result and not asc then
32299: LD_VAR 0 5
32303: PUSH
32304: LD_VAR 0 3
32308: NOT
32309: AND
32310: IFFALSE 32327
// result := ReverseArray ( result ) ;
32312: LD_ADDR_VAR 0 5
32316: PUSH
32317: LD_VAR 0 5
32321: PPUSH
32322: CALL 59567 0 1
32326: ST_TO_ADDR
// tmp := [ ] ;
32327: LD_ADDR_VAR 0 8
32331: PUSH
32332: EMPTY
32333: ST_TO_ADDR
// if mode then
32334: LD_VAR 0 4
32338: IFFALSE 32402
// begin for i := 1 to result do
32340: LD_ADDR_VAR 0 6
32344: PUSH
32345: DOUBLE
32346: LD_INT 1
32348: DEC
32349: ST_TO_ADDR
32350: LD_VAR 0 5
32354: PUSH
32355: FOR_TO
32356: IFFALSE 32390
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
32358: LD_ADDR_VAR 0 8
32362: PUSH
32363: LD_VAR 0 8
32367: PPUSH
32368: LD_VAR 0 5
32372: PUSH
32373: LD_VAR 0 6
32377: ARRAY
32378: PUSH
32379: LD_INT 1
32381: ARRAY
32382: PPUSH
32383: CALL 64291 0 2
32387: ST_TO_ADDR
32388: GO 32355
32390: POP
32391: POP
// result := tmp ;
32392: LD_ADDR_VAR 0 5
32396: PUSH
32397: LD_VAR 0 8
32401: ST_TO_ADDR
// end ; end ;
32402: LD_VAR 0 5
32406: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32407: LD_INT 0
32409: PPUSH
32410: PPUSH
32411: PPUSH
32412: PPUSH
// if not list then
32413: LD_VAR 0 3
32417: NOT
32418: IFFALSE 32422
// exit ;
32420: GO 32810
// result := [ ] ;
32422: LD_ADDR_VAR 0 6
32426: PUSH
32427: EMPTY
32428: ST_TO_ADDR
// for i in list do
32429: LD_ADDR_VAR 0 7
32433: PUSH
32434: LD_VAR 0 3
32438: PUSH
32439: FOR_IN
32440: IFFALSE 32642
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32442: LD_ADDR_VAR 0 9
32446: PUSH
32447: LD_VAR 0 7
32451: PPUSH
32452: LD_VAR 0 1
32456: PPUSH
32457: LD_VAR 0 2
32461: PPUSH
32462: CALL_OW 297
32466: ST_TO_ADDR
// if not result then
32467: LD_VAR 0 6
32471: NOT
32472: IFFALSE 32498
// result := [ [ i , tmp ] ] else
32474: LD_ADDR_VAR 0 6
32478: PUSH
32479: LD_VAR 0 7
32483: PUSH
32484: LD_VAR 0 9
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: EMPTY
32494: LIST
32495: ST_TO_ADDR
32496: GO 32640
// begin if result [ result ] [ 2 ] < tmp then
32498: LD_VAR 0 6
32502: PUSH
32503: LD_VAR 0 6
32507: ARRAY
32508: PUSH
32509: LD_INT 2
32511: ARRAY
32512: PUSH
32513: LD_VAR 0 9
32517: LESS
32518: IFFALSE 32560
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32520: LD_ADDR_VAR 0 6
32524: PUSH
32525: LD_VAR 0 6
32529: PPUSH
32530: LD_VAR 0 6
32534: PUSH
32535: LD_INT 1
32537: PLUS
32538: PPUSH
32539: LD_VAR 0 7
32543: PUSH
32544: LD_VAR 0 9
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PPUSH
32553: CALL_OW 2
32557: ST_TO_ADDR
32558: GO 32640
// for j = 1 to result do
32560: LD_ADDR_VAR 0 8
32564: PUSH
32565: DOUBLE
32566: LD_INT 1
32568: DEC
32569: ST_TO_ADDR
32570: LD_VAR 0 6
32574: PUSH
32575: FOR_TO
32576: IFFALSE 32638
// begin if tmp < result [ j ] [ 2 ] then
32578: LD_VAR 0 9
32582: PUSH
32583: LD_VAR 0 6
32587: PUSH
32588: LD_VAR 0 8
32592: ARRAY
32593: PUSH
32594: LD_INT 2
32596: ARRAY
32597: LESS
32598: IFFALSE 32636
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32600: LD_ADDR_VAR 0 6
32604: PUSH
32605: LD_VAR 0 6
32609: PPUSH
32610: LD_VAR 0 8
32614: PPUSH
32615: LD_VAR 0 7
32619: PUSH
32620: LD_VAR 0 9
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PPUSH
32629: CALL_OW 2
32633: ST_TO_ADDR
// break ;
32634: GO 32638
// end ; end ;
32636: GO 32575
32638: POP
32639: POP
// end ; end ;
32640: GO 32439
32642: POP
32643: POP
// if result and not asc then
32644: LD_VAR 0 6
32648: PUSH
32649: LD_VAR 0 4
32653: NOT
32654: AND
32655: IFFALSE 32730
// begin tmp := result ;
32657: LD_ADDR_VAR 0 9
32661: PUSH
32662: LD_VAR 0 6
32666: ST_TO_ADDR
// for i = tmp downto 1 do
32667: LD_ADDR_VAR 0 7
32671: PUSH
32672: DOUBLE
32673: LD_VAR 0 9
32677: INC
32678: ST_TO_ADDR
32679: LD_INT 1
32681: PUSH
32682: FOR_DOWNTO
32683: IFFALSE 32728
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32685: LD_ADDR_VAR 0 6
32689: PUSH
32690: LD_VAR 0 6
32694: PPUSH
32695: LD_VAR 0 9
32699: PUSH
32700: LD_VAR 0 7
32704: MINUS
32705: PUSH
32706: LD_INT 1
32708: PLUS
32709: PPUSH
32710: LD_VAR 0 9
32714: PUSH
32715: LD_VAR 0 7
32719: ARRAY
32720: PPUSH
32721: CALL_OW 1
32725: ST_TO_ADDR
32726: GO 32682
32728: POP
32729: POP
// end ; tmp := [ ] ;
32730: LD_ADDR_VAR 0 9
32734: PUSH
32735: EMPTY
32736: ST_TO_ADDR
// if mode then
32737: LD_VAR 0 5
32741: IFFALSE 32810
// begin for i = 1 to result do
32743: LD_ADDR_VAR 0 7
32747: PUSH
32748: DOUBLE
32749: LD_INT 1
32751: DEC
32752: ST_TO_ADDR
32753: LD_VAR 0 6
32757: PUSH
32758: FOR_TO
32759: IFFALSE 32798
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32761: LD_ADDR_VAR 0 9
32765: PUSH
32766: LD_VAR 0 9
32770: PPUSH
32771: LD_VAR 0 7
32775: PPUSH
32776: LD_VAR 0 6
32780: PUSH
32781: LD_VAR 0 7
32785: ARRAY
32786: PUSH
32787: LD_INT 1
32789: ARRAY
32790: PPUSH
32791: CALL_OW 1
32795: ST_TO_ADDR
32796: GO 32758
32798: POP
32799: POP
// result := tmp ;
32800: LD_ADDR_VAR 0 6
32804: PUSH
32805: LD_VAR 0 9
32809: ST_TO_ADDR
// end ; end ;
32810: LD_VAR 0 6
32814: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32815: LD_INT 0
32817: PPUSH
32818: PPUSH
32819: PPUSH
32820: PPUSH
32821: PPUSH
32822: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32823: LD_ADDR_VAR 0 5
32827: PUSH
32828: LD_INT 0
32830: PUSH
32831: LD_INT 0
32833: PUSH
32834: LD_INT 0
32836: PUSH
32837: EMPTY
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: ST_TO_ADDR
// if not x or not y then
32845: LD_VAR 0 2
32849: NOT
32850: PUSH
32851: LD_VAR 0 3
32855: NOT
32856: OR
32857: IFFALSE 32861
// exit ;
32859: GO 34511
// if not range then
32861: LD_VAR 0 4
32865: NOT
32866: IFFALSE 32876
// range := 10 ;
32868: LD_ADDR_VAR 0 4
32872: PUSH
32873: LD_INT 10
32875: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32876: LD_ADDR_VAR 0 8
32880: PUSH
32881: LD_INT 81
32883: PUSH
32884: LD_VAR 0 1
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: LD_INT 92
32895: PUSH
32896: LD_VAR 0 2
32900: PUSH
32901: LD_VAR 0 3
32905: PUSH
32906: LD_VAR 0 4
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 3
32919: PUSH
32920: LD_INT 21
32922: PUSH
32923: LD_INT 3
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: LIST
32938: PPUSH
32939: CALL_OW 69
32943: ST_TO_ADDR
// if not tmp then
32944: LD_VAR 0 8
32948: NOT
32949: IFFALSE 32953
// exit ;
32951: GO 34511
// for i in tmp do
32953: LD_ADDR_VAR 0 6
32957: PUSH
32958: LD_VAR 0 8
32962: PUSH
32963: FOR_IN
32964: IFFALSE 34486
// begin points := [ 0 , 0 , 0 ] ;
32966: LD_ADDR_VAR 0 9
32970: PUSH
32971: LD_INT 0
32973: PUSH
32974: LD_INT 0
32976: PUSH
32977: LD_INT 0
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: LIST
32984: ST_TO_ADDR
// bpoints := 1 ;
32985: LD_ADDR_VAR 0 10
32989: PUSH
32990: LD_INT 1
32992: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32993: LD_VAR 0 6
32997: PPUSH
32998: CALL_OW 247
33002: PUSH
33003: LD_INT 1
33005: DOUBLE
33006: EQUAL
33007: IFTRUE 33011
33009: GO 33589
33011: POP
// begin if GetClass ( i ) = 1 then
33012: LD_VAR 0 6
33016: PPUSH
33017: CALL_OW 257
33021: PUSH
33022: LD_INT 1
33024: EQUAL
33025: IFFALSE 33046
// points := [ 10 , 5 , 3 ] ;
33027: LD_ADDR_VAR 0 9
33031: PUSH
33032: LD_INT 10
33034: PUSH
33035: LD_INT 5
33037: PUSH
33038: LD_INT 3
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: LIST
33045: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33046: LD_VAR 0 6
33050: PPUSH
33051: CALL_OW 257
33055: PUSH
33056: LD_INT 2
33058: PUSH
33059: LD_INT 3
33061: PUSH
33062: LD_INT 4
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: LIST
33069: IN
33070: IFFALSE 33091
// points := [ 3 , 2 , 1 ] ;
33072: LD_ADDR_VAR 0 9
33076: PUSH
33077: LD_INT 3
33079: PUSH
33080: LD_INT 2
33082: PUSH
33083: LD_INT 1
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: LIST
33090: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33091: LD_VAR 0 6
33095: PPUSH
33096: CALL_OW 257
33100: PUSH
33101: LD_INT 5
33103: EQUAL
33104: IFFALSE 33125
// points := [ 130 , 5 , 2 ] ;
33106: LD_ADDR_VAR 0 9
33110: PUSH
33111: LD_INT 130
33113: PUSH
33114: LD_INT 5
33116: PUSH
33117: LD_INT 2
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: LIST
33124: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33125: LD_VAR 0 6
33129: PPUSH
33130: CALL_OW 257
33134: PUSH
33135: LD_INT 8
33137: EQUAL
33138: IFFALSE 33159
// points := [ 35 , 35 , 30 ] ;
33140: LD_ADDR_VAR 0 9
33144: PUSH
33145: LD_INT 35
33147: PUSH
33148: LD_INT 35
33150: PUSH
33151: LD_INT 30
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: LIST
33158: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33159: LD_VAR 0 6
33163: PPUSH
33164: CALL_OW 257
33168: PUSH
33169: LD_INT 9
33171: EQUAL
33172: IFFALSE 33193
// points := [ 20 , 55 , 40 ] ;
33174: LD_ADDR_VAR 0 9
33178: PUSH
33179: LD_INT 20
33181: PUSH
33182: LD_INT 55
33184: PUSH
33185: LD_INT 40
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: LIST
33192: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33193: LD_VAR 0 6
33197: PPUSH
33198: CALL_OW 257
33202: PUSH
33203: LD_INT 12
33205: PUSH
33206: LD_INT 16
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: IN
33213: IFFALSE 33234
// points := [ 5 , 3 , 2 ] ;
33215: LD_ADDR_VAR 0 9
33219: PUSH
33220: LD_INT 5
33222: PUSH
33223: LD_INT 3
33225: PUSH
33226: LD_INT 2
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: LIST
33233: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33234: LD_VAR 0 6
33238: PPUSH
33239: CALL_OW 257
33243: PUSH
33244: LD_INT 17
33246: EQUAL
33247: IFFALSE 33268
// points := [ 100 , 50 , 75 ] ;
33249: LD_ADDR_VAR 0 9
33253: PUSH
33254: LD_INT 100
33256: PUSH
33257: LD_INT 50
33259: PUSH
33260: LD_INT 75
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: LIST
33267: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33268: LD_VAR 0 6
33272: PPUSH
33273: CALL_OW 257
33277: PUSH
33278: LD_INT 15
33280: EQUAL
33281: IFFALSE 33302
// points := [ 10 , 5 , 3 ] ;
33283: LD_ADDR_VAR 0 9
33287: PUSH
33288: LD_INT 10
33290: PUSH
33291: LD_INT 5
33293: PUSH
33294: LD_INT 3
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: LIST
33301: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33302: LD_VAR 0 6
33306: PPUSH
33307: CALL_OW 257
33311: PUSH
33312: LD_INT 14
33314: EQUAL
33315: IFFALSE 33336
// points := [ 10 , 0 , 0 ] ;
33317: LD_ADDR_VAR 0 9
33321: PUSH
33322: LD_INT 10
33324: PUSH
33325: LD_INT 0
33327: PUSH
33328: LD_INT 0
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: LIST
33335: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33336: LD_VAR 0 6
33340: PPUSH
33341: CALL_OW 257
33345: PUSH
33346: LD_INT 11
33348: EQUAL
33349: IFFALSE 33370
// points := [ 30 , 10 , 5 ] ;
33351: LD_ADDR_VAR 0 9
33355: PUSH
33356: LD_INT 30
33358: PUSH
33359: LD_INT 10
33361: PUSH
33362: LD_INT 5
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: LIST
33369: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33370: LD_VAR 0 1
33374: PPUSH
33375: LD_INT 5
33377: PPUSH
33378: CALL_OW 321
33382: PUSH
33383: LD_INT 2
33385: EQUAL
33386: IFFALSE 33403
// bpoints := bpoints * 1.8 ;
33388: LD_ADDR_VAR 0 10
33392: PUSH
33393: LD_VAR 0 10
33397: PUSH
33398: LD_REAL  1.80000000000000E+0000
33401: MUL
33402: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33403: LD_VAR 0 6
33407: PPUSH
33408: CALL_OW 257
33412: PUSH
33413: LD_INT 1
33415: PUSH
33416: LD_INT 2
33418: PUSH
33419: LD_INT 3
33421: PUSH
33422: LD_INT 4
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: IN
33431: PUSH
33432: LD_VAR 0 1
33436: PPUSH
33437: LD_INT 51
33439: PPUSH
33440: CALL_OW 321
33444: PUSH
33445: LD_INT 2
33447: EQUAL
33448: AND
33449: IFFALSE 33466
// bpoints := bpoints * 1.2 ;
33451: LD_ADDR_VAR 0 10
33455: PUSH
33456: LD_VAR 0 10
33460: PUSH
33461: LD_REAL  1.20000000000000E+0000
33464: MUL
33465: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33466: LD_VAR 0 6
33470: PPUSH
33471: CALL_OW 257
33475: PUSH
33476: LD_INT 5
33478: PUSH
33479: LD_INT 7
33481: PUSH
33482: LD_INT 9
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: LIST
33489: IN
33490: PUSH
33491: LD_VAR 0 1
33495: PPUSH
33496: LD_INT 52
33498: PPUSH
33499: CALL_OW 321
33503: PUSH
33504: LD_INT 2
33506: EQUAL
33507: AND
33508: IFFALSE 33525
// bpoints := bpoints * 1.5 ;
33510: LD_ADDR_VAR 0 10
33514: PUSH
33515: LD_VAR 0 10
33519: PUSH
33520: LD_REAL  1.50000000000000E+0000
33523: MUL
33524: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33525: LD_VAR 0 1
33529: PPUSH
33530: LD_INT 66
33532: PPUSH
33533: CALL_OW 321
33537: PUSH
33538: LD_INT 2
33540: EQUAL
33541: IFFALSE 33558
// bpoints := bpoints * 1.1 ;
33543: LD_ADDR_VAR 0 10
33547: PUSH
33548: LD_VAR 0 10
33552: PUSH
33553: LD_REAL  1.10000000000000E+0000
33556: MUL
33557: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33558: LD_ADDR_VAR 0 10
33562: PUSH
33563: LD_VAR 0 10
33567: PUSH
33568: LD_VAR 0 6
33572: PPUSH
33573: LD_INT 1
33575: PPUSH
33576: CALL_OW 259
33580: PUSH
33581: LD_REAL  1.15000000000000E+0000
33584: MUL
33585: MUL
33586: ST_TO_ADDR
// end ; unit_vehicle :
33587: GO 34415
33589: LD_INT 2
33591: DOUBLE
33592: EQUAL
33593: IFTRUE 33597
33595: GO 34403
33597: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33598: LD_VAR 0 6
33602: PPUSH
33603: CALL_OW 264
33607: PUSH
33608: LD_INT 2
33610: PUSH
33611: LD_INT 42
33613: PUSH
33614: LD_INT 24
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: LIST
33621: IN
33622: IFFALSE 33643
// points := [ 25 , 5 , 3 ] ;
33624: LD_ADDR_VAR 0 9
33628: PUSH
33629: LD_INT 25
33631: PUSH
33632: LD_INT 5
33634: PUSH
33635: LD_INT 3
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: LIST
33642: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33643: LD_VAR 0 6
33647: PPUSH
33648: CALL_OW 264
33652: PUSH
33653: LD_INT 4
33655: PUSH
33656: LD_INT 43
33658: PUSH
33659: LD_INT 25
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: LIST
33666: IN
33667: IFFALSE 33688
// points := [ 40 , 15 , 5 ] ;
33669: LD_ADDR_VAR 0 9
33673: PUSH
33674: LD_INT 40
33676: PUSH
33677: LD_INT 15
33679: PUSH
33680: LD_INT 5
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: LIST
33687: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33688: LD_VAR 0 6
33692: PPUSH
33693: CALL_OW 264
33697: PUSH
33698: LD_INT 3
33700: PUSH
33701: LD_INT 23
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: IN
33708: IFFALSE 33729
// points := [ 7 , 25 , 8 ] ;
33710: LD_ADDR_VAR 0 9
33714: PUSH
33715: LD_INT 7
33717: PUSH
33718: LD_INT 25
33720: PUSH
33721: LD_INT 8
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: LIST
33728: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33729: LD_VAR 0 6
33733: PPUSH
33734: CALL_OW 264
33738: PUSH
33739: LD_INT 5
33741: PUSH
33742: LD_INT 27
33744: PUSH
33745: LD_INT 44
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: LIST
33752: IN
33753: IFFALSE 33774
// points := [ 14 , 50 , 16 ] ;
33755: LD_ADDR_VAR 0 9
33759: PUSH
33760: LD_INT 14
33762: PUSH
33763: LD_INT 50
33765: PUSH
33766: LD_INT 16
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: LIST
33773: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33774: LD_VAR 0 6
33778: PPUSH
33779: CALL_OW 264
33783: PUSH
33784: LD_INT 6
33786: PUSH
33787: LD_INT 46
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: IN
33794: IFFALSE 33815
// points := [ 32 , 120 , 70 ] ;
33796: LD_ADDR_VAR 0 9
33800: PUSH
33801: LD_INT 32
33803: PUSH
33804: LD_INT 120
33806: PUSH
33807: LD_INT 70
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: LIST
33814: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33815: LD_VAR 0 6
33819: PPUSH
33820: CALL_OW 264
33824: PUSH
33825: LD_INT 7
33827: PUSH
33828: LD_INT 28
33830: PUSH
33831: LD_INT 45
33833: PUSH
33834: LD_INT 92
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: IN
33843: IFFALSE 33864
// points := [ 35 , 20 , 45 ] ;
33845: LD_ADDR_VAR 0 9
33849: PUSH
33850: LD_INT 35
33852: PUSH
33853: LD_INT 20
33855: PUSH
33856: LD_INT 45
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: LIST
33863: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33864: LD_VAR 0 6
33868: PPUSH
33869: CALL_OW 264
33873: PUSH
33874: LD_INT 47
33876: PUSH
33877: EMPTY
33878: LIST
33879: IN
33880: IFFALSE 33901
// points := [ 67 , 45 , 75 ] ;
33882: LD_ADDR_VAR 0 9
33886: PUSH
33887: LD_INT 67
33889: PUSH
33890: LD_INT 45
33892: PUSH
33893: LD_INT 75
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: LIST
33900: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33901: LD_VAR 0 6
33905: PPUSH
33906: CALL_OW 264
33910: PUSH
33911: LD_INT 26
33913: PUSH
33914: EMPTY
33915: LIST
33916: IN
33917: IFFALSE 33938
// points := [ 120 , 30 , 80 ] ;
33919: LD_ADDR_VAR 0 9
33923: PUSH
33924: LD_INT 120
33926: PUSH
33927: LD_INT 30
33929: PUSH
33930: LD_INT 80
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: LIST
33937: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33938: LD_VAR 0 6
33942: PPUSH
33943: CALL_OW 264
33947: PUSH
33948: LD_INT 22
33950: PUSH
33951: EMPTY
33952: LIST
33953: IN
33954: IFFALSE 33975
// points := [ 40 , 1 , 1 ] ;
33956: LD_ADDR_VAR 0 9
33960: PUSH
33961: LD_INT 40
33963: PUSH
33964: LD_INT 1
33966: PUSH
33967: LD_INT 1
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: LIST
33974: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33975: LD_VAR 0 6
33979: PPUSH
33980: CALL_OW 264
33984: PUSH
33985: LD_INT 29
33987: PUSH
33988: EMPTY
33989: LIST
33990: IN
33991: IFFALSE 34012
// points := [ 70 , 200 , 400 ] ;
33993: LD_ADDR_VAR 0 9
33997: PUSH
33998: LD_INT 70
34000: PUSH
34001: LD_INT 200
34003: PUSH
34004: LD_INT 400
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: LIST
34011: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34012: LD_VAR 0 6
34016: PPUSH
34017: CALL_OW 264
34021: PUSH
34022: LD_INT 14
34024: PUSH
34025: LD_INT 53
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: IN
34032: IFFALSE 34053
// points := [ 40 , 10 , 20 ] ;
34034: LD_ADDR_VAR 0 9
34038: PUSH
34039: LD_INT 40
34041: PUSH
34042: LD_INT 10
34044: PUSH
34045: LD_INT 20
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: LIST
34052: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34053: LD_VAR 0 6
34057: PPUSH
34058: CALL_OW 264
34062: PUSH
34063: LD_INT 9
34065: PUSH
34066: EMPTY
34067: LIST
34068: IN
34069: IFFALSE 34090
// points := [ 5 , 70 , 20 ] ;
34071: LD_ADDR_VAR 0 9
34075: PUSH
34076: LD_INT 5
34078: PUSH
34079: LD_INT 70
34081: PUSH
34082: LD_INT 20
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: LIST
34089: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34090: LD_VAR 0 6
34094: PPUSH
34095: CALL_OW 264
34099: PUSH
34100: LD_INT 10
34102: PUSH
34103: EMPTY
34104: LIST
34105: IN
34106: IFFALSE 34127
// points := [ 35 , 110 , 70 ] ;
34108: LD_ADDR_VAR 0 9
34112: PUSH
34113: LD_INT 35
34115: PUSH
34116: LD_INT 110
34118: PUSH
34119: LD_INT 70
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: LIST
34126: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34127: LD_VAR 0 6
34131: PPUSH
34132: CALL_OW 265
34136: PUSH
34137: LD_INT 25
34139: EQUAL
34140: IFFALSE 34161
// points := [ 80 , 65 , 100 ] ;
34142: LD_ADDR_VAR 0 9
34146: PUSH
34147: LD_INT 80
34149: PUSH
34150: LD_INT 65
34152: PUSH
34153: LD_INT 100
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: LIST
34160: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34161: LD_VAR 0 6
34165: PPUSH
34166: CALL_OW 263
34170: PUSH
34171: LD_INT 1
34173: EQUAL
34174: IFFALSE 34209
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34176: LD_ADDR_VAR 0 10
34180: PUSH
34181: LD_VAR 0 10
34185: PUSH
34186: LD_VAR 0 6
34190: PPUSH
34191: CALL_OW 311
34195: PPUSH
34196: LD_INT 3
34198: PPUSH
34199: CALL_OW 259
34203: PUSH
34204: LD_INT 4
34206: MUL
34207: MUL
34208: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34209: LD_VAR 0 6
34213: PPUSH
34214: CALL_OW 263
34218: PUSH
34219: LD_INT 2
34221: EQUAL
34222: IFFALSE 34273
// begin j := IsControledBy ( i ) ;
34224: LD_ADDR_VAR 0 7
34228: PUSH
34229: LD_VAR 0 6
34233: PPUSH
34234: CALL_OW 312
34238: ST_TO_ADDR
// if j then
34239: LD_VAR 0 7
34243: IFFALSE 34273
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34245: LD_ADDR_VAR 0 10
34249: PUSH
34250: LD_VAR 0 10
34254: PUSH
34255: LD_VAR 0 7
34259: PPUSH
34260: LD_INT 3
34262: PPUSH
34263: CALL_OW 259
34267: PUSH
34268: LD_INT 3
34270: MUL
34271: MUL
34272: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34273: LD_VAR 0 6
34277: PPUSH
34278: CALL_OW 264
34282: PUSH
34283: LD_INT 5
34285: PUSH
34286: LD_INT 6
34288: PUSH
34289: LD_INT 46
34291: PUSH
34292: LD_INT 44
34294: PUSH
34295: LD_INT 47
34297: PUSH
34298: LD_INT 45
34300: PUSH
34301: LD_INT 28
34303: PUSH
34304: LD_INT 7
34306: PUSH
34307: LD_INT 27
34309: PUSH
34310: LD_INT 29
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: IN
34325: PUSH
34326: LD_VAR 0 1
34330: PPUSH
34331: LD_INT 52
34333: PPUSH
34334: CALL_OW 321
34338: PUSH
34339: LD_INT 2
34341: EQUAL
34342: AND
34343: IFFALSE 34360
// bpoints := bpoints * 1.2 ;
34345: LD_ADDR_VAR 0 10
34349: PUSH
34350: LD_VAR 0 10
34354: PUSH
34355: LD_REAL  1.20000000000000E+0000
34358: MUL
34359: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34360: LD_VAR 0 6
34364: PPUSH
34365: CALL_OW 264
34369: PUSH
34370: LD_INT 6
34372: PUSH
34373: LD_INT 46
34375: PUSH
34376: LD_INT 47
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: LIST
34383: IN
34384: IFFALSE 34401
// bpoints := bpoints * 1.2 ;
34386: LD_ADDR_VAR 0 10
34390: PUSH
34391: LD_VAR 0 10
34395: PUSH
34396: LD_REAL  1.20000000000000E+0000
34399: MUL
34400: ST_TO_ADDR
// end ; unit_building :
34401: GO 34415
34403: LD_INT 3
34405: DOUBLE
34406: EQUAL
34407: IFTRUE 34411
34409: GO 34414
34411: POP
// ; end ;
34412: GO 34415
34414: POP
// for j = 1 to 3 do
34415: LD_ADDR_VAR 0 7
34419: PUSH
34420: DOUBLE
34421: LD_INT 1
34423: DEC
34424: ST_TO_ADDR
34425: LD_INT 3
34427: PUSH
34428: FOR_TO
34429: IFFALSE 34482
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34431: LD_ADDR_VAR 0 5
34435: PUSH
34436: LD_VAR 0 5
34440: PPUSH
34441: LD_VAR 0 7
34445: PPUSH
34446: LD_VAR 0 5
34450: PUSH
34451: LD_VAR 0 7
34455: ARRAY
34456: PUSH
34457: LD_VAR 0 9
34461: PUSH
34462: LD_VAR 0 7
34466: ARRAY
34467: PUSH
34468: LD_VAR 0 10
34472: MUL
34473: PLUS
34474: PPUSH
34475: CALL_OW 1
34479: ST_TO_ADDR
34480: GO 34428
34482: POP
34483: POP
// end ;
34484: GO 32963
34486: POP
34487: POP
// result := Replace ( result , 4 , tmp ) ;
34488: LD_ADDR_VAR 0 5
34492: PUSH
34493: LD_VAR 0 5
34497: PPUSH
34498: LD_INT 4
34500: PPUSH
34501: LD_VAR 0 8
34505: PPUSH
34506: CALL_OW 1
34510: ST_TO_ADDR
// end ;
34511: LD_VAR 0 5
34515: RET
// export function DangerAtRange ( unit , range ) ; begin
34516: LD_INT 0
34518: PPUSH
// if not unit then
34519: LD_VAR 0 1
34523: NOT
34524: IFFALSE 34528
// exit ;
34526: GO 34573
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34528: LD_ADDR_VAR 0 3
34532: PUSH
34533: LD_VAR 0 1
34537: PPUSH
34538: CALL_OW 255
34542: PPUSH
34543: LD_VAR 0 1
34547: PPUSH
34548: CALL_OW 250
34552: PPUSH
34553: LD_VAR 0 1
34557: PPUSH
34558: CALL_OW 251
34562: PPUSH
34563: LD_VAR 0 2
34567: PPUSH
34568: CALL 32815 0 4
34572: ST_TO_ADDR
// end ;
34573: LD_VAR 0 3
34577: RET
// export function DangerInArea ( side , area ) ; begin
34578: LD_INT 0
34580: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34581: LD_ADDR_VAR 0 3
34585: PUSH
34586: LD_VAR 0 2
34590: PPUSH
34591: LD_INT 81
34593: PUSH
34594: LD_VAR 0 1
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PPUSH
34603: CALL_OW 70
34607: ST_TO_ADDR
// end ;
34608: LD_VAR 0 3
34612: RET
// export function IsExtension ( b ) ; begin
34613: LD_INT 0
34615: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34616: LD_ADDR_VAR 0 2
34620: PUSH
34621: LD_VAR 0 1
34625: PUSH
34626: LD_INT 23
34628: PUSH
34629: LD_INT 20
34631: PUSH
34632: LD_INT 22
34634: PUSH
34635: LD_INT 17
34637: PUSH
34638: LD_INT 24
34640: PUSH
34641: LD_INT 21
34643: PUSH
34644: LD_INT 19
34646: PUSH
34647: LD_INT 16
34649: PUSH
34650: LD_INT 25
34652: PUSH
34653: LD_INT 18
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: IN
34668: ST_TO_ADDR
// end ;
34669: LD_VAR 0 2
34673: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34674: LD_INT 0
34676: PPUSH
34677: PPUSH
34678: PPUSH
// result := [ ] ;
34679: LD_ADDR_VAR 0 4
34683: PUSH
34684: EMPTY
34685: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34686: LD_ADDR_VAR 0 5
34690: PUSH
34691: LD_VAR 0 2
34695: PPUSH
34696: LD_INT 21
34698: PUSH
34699: LD_INT 3
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PPUSH
34706: CALL_OW 70
34710: ST_TO_ADDR
// if not tmp then
34711: LD_VAR 0 5
34715: NOT
34716: IFFALSE 34720
// exit ;
34718: GO 34784
// if checkLink then
34720: LD_VAR 0 3
34724: IFFALSE 34774
// begin for i in tmp do
34726: LD_ADDR_VAR 0 6
34730: PUSH
34731: LD_VAR 0 5
34735: PUSH
34736: FOR_IN
34737: IFFALSE 34772
// if GetBase ( i ) <> base then
34739: LD_VAR 0 6
34743: PPUSH
34744: CALL_OW 274
34748: PUSH
34749: LD_VAR 0 1
34753: NONEQUAL
34754: IFFALSE 34770
// ComLinkToBase ( base , i ) ;
34756: LD_VAR 0 1
34760: PPUSH
34761: LD_VAR 0 6
34765: PPUSH
34766: CALL_OW 169
34770: GO 34736
34772: POP
34773: POP
// end ; result := tmp ;
34774: LD_ADDR_VAR 0 4
34778: PUSH
34779: LD_VAR 0 5
34783: ST_TO_ADDR
// end ;
34784: LD_VAR 0 4
34788: RET
// export function ComComplete ( units , b ) ; var i ; begin
34789: LD_INT 0
34791: PPUSH
34792: PPUSH
// if not units then
34793: LD_VAR 0 1
34797: NOT
34798: IFFALSE 34802
// exit ;
34800: GO 34892
// for i in units do
34802: LD_ADDR_VAR 0 4
34806: PUSH
34807: LD_VAR 0 1
34811: PUSH
34812: FOR_IN
34813: IFFALSE 34890
// if BuildingStatus ( b ) = bs_build then
34815: LD_VAR 0 2
34819: PPUSH
34820: CALL_OW 461
34824: PUSH
34825: LD_INT 1
34827: EQUAL
34828: IFFALSE 34888
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34830: LD_VAR 0 4
34834: PPUSH
34835: LD_STRING h
34837: PUSH
34838: LD_VAR 0 2
34842: PPUSH
34843: CALL_OW 250
34847: PUSH
34848: LD_VAR 0 2
34852: PPUSH
34853: CALL_OW 251
34857: PUSH
34858: LD_VAR 0 2
34862: PUSH
34863: LD_INT 0
34865: PUSH
34866: LD_INT 0
34868: PUSH
34869: LD_INT 0
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: PUSH
34881: EMPTY
34882: LIST
34883: PPUSH
34884: CALL_OW 446
34888: GO 34812
34890: POP
34891: POP
// end ;
34892: LD_VAR 0 3
34896: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34897: LD_INT 0
34899: PPUSH
34900: PPUSH
34901: PPUSH
34902: PPUSH
34903: PPUSH
34904: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34905: LD_VAR 0 1
34909: NOT
34910: PUSH
34911: LD_VAR 0 1
34915: PPUSH
34916: CALL_OW 263
34920: PUSH
34921: LD_INT 2
34923: NONEQUAL
34924: OR
34925: IFFALSE 34929
// exit ;
34927: GO 35245
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34929: LD_ADDR_VAR 0 6
34933: PUSH
34934: LD_INT 22
34936: PUSH
34937: LD_VAR 0 1
34941: PPUSH
34942: CALL_OW 255
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 2
34953: PUSH
34954: LD_INT 30
34956: PUSH
34957: LD_INT 36
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 34
34966: PUSH
34967: LD_INT 31
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: LIST
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PPUSH
34983: CALL_OW 69
34987: ST_TO_ADDR
// if not tmp then
34988: LD_VAR 0 6
34992: NOT
34993: IFFALSE 34997
// exit ;
34995: GO 35245
// result := [ ] ;
34997: LD_ADDR_VAR 0 2
35001: PUSH
35002: EMPTY
35003: ST_TO_ADDR
// for i in tmp do
35004: LD_ADDR_VAR 0 3
35008: PUSH
35009: LD_VAR 0 6
35013: PUSH
35014: FOR_IN
35015: IFFALSE 35086
// begin t := UnitsInside ( i ) ;
35017: LD_ADDR_VAR 0 4
35021: PUSH
35022: LD_VAR 0 3
35026: PPUSH
35027: CALL_OW 313
35031: ST_TO_ADDR
// if t then
35032: LD_VAR 0 4
35036: IFFALSE 35084
// for j in t do
35038: LD_ADDR_VAR 0 7
35042: PUSH
35043: LD_VAR 0 4
35047: PUSH
35048: FOR_IN
35049: IFFALSE 35082
// result := Replace ( result , result + 1 , j ) ;
35051: LD_ADDR_VAR 0 2
35055: PUSH
35056: LD_VAR 0 2
35060: PPUSH
35061: LD_VAR 0 2
35065: PUSH
35066: LD_INT 1
35068: PLUS
35069: PPUSH
35070: LD_VAR 0 7
35074: PPUSH
35075: CALL_OW 1
35079: ST_TO_ADDR
35080: GO 35048
35082: POP
35083: POP
// end ;
35084: GO 35014
35086: POP
35087: POP
// if not result then
35088: LD_VAR 0 2
35092: NOT
35093: IFFALSE 35097
// exit ;
35095: GO 35245
// mech := result [ 1 ] ;
35097: LD_ADDR_VAR 0 5
35101: PUSH
35102: LD_VAR 0 2
35106: PUSH
35107: LD_INT 1
35109: ARRAY
35110: ST_TO_ADDR
// if result > 1 then
35111: LD_VAR 0 2
35115: PUSH
35116: LD_INT 1
35118: GREATER
35119: IFFALSE 35231
// begin for i = 2 to result do
35121: LD_ADDR_VAR 0 3
35125: PUSH
35126: DOUBLE
35127: LD_INT 2
35129: DEC
35130: ST_TO_ADDR
35131: LD_VAR 0 2
35135: PUSH
35136: FOR_TO
35137: IFFALSE 35229
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35139: LD_ADDR_VAR 0 4
35143: PUSH
35144: LD_VAR 0 2
35148: PUSH
35149: LD_VAR 0 3
35153: ARRAY
35154: PPUSH
35155: LD_INT 3
35157: PPUSH
35158: CALL_OW 259
35162: PUSH
35163: LD_VAR 0 2
35167: PUSH
35168: LD_VAR 0 3
35172: ARRAY
35173: PPUSH
35174: CALL_OW 432
35178: MINUS
35179: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35180: LD_VAR 0 4
35184: PUSH
35185: LD_VAR 0 5
35189: PPUSH
35190: LD_INT 3
35192: PPUSH
35193: CALL_OW 259
35197: PUSH
35198: LD_VAR 0 5
35202: PPUSH
35203: CALL_OW 432
35207: MINUS
35208: GREATEREQUAL
35209: IFFALSE 35227
// mech := result [ i ] ;
35211: LD_ADDR_VAR 0 5
35215: PUSH
35216: LD_VAR 0 2
35220: PUSH
35221: LD_VAR 0 3
35225: ARRAY
35226: ST_TO_ADDR
// end ;
35227: GO 35136
35229: POP
35230: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35231: LD_VAR 0 1
35235: PPUSH
35236: LD_VAR 0 5
35240: PPUSH
35241: CALL_OW 135
// end ;
35245: LD_VAR 0 2
35249: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35250: LD_INT 0
35252: PPUSH
35253: PPUSH
35254: PPUSH
35255: PPUSH
35256: PPUSH
35257: PPUSH
35258: PPUSH
35259: PPUSH
35260: PPUSH
35261: PPUSH
35262: PPUSH
35263: PPUSH
35264: PPUSH
// result := [ ] ;
35265: LD_ADDR_VAR 0 7
35269: PUSH
35270: EMPTY
35271: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35272: LD_VAR 0 1
35276: PPUSH
35277: CALL_OW 266
35281: PUSH
35282: LD_INT 0
35284: PUSH
35285: LD_INT 1
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: IN
35292: NOT
35293: IFFALSE 35297
// exit ;
35295: GO 36931
// if name then
35297: LD_VAR 0 3
35301: IFFALSE 35317
// SetBName ( base_dep , name ) ;
35303: LD_VAR 0 1
35307: PPUSH
35308: LD_VAR 0 3
35312: PPUSH
35313: CALL_OW 500
// base := GetBase ( base_dep ) ;
35317: LD_ADDR_VAR 0 15
35321: PUSH
35322: LD_VAR 0 1
35326: PPUSH
35327: CALL_OW 274
35331: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35332: LD_ADDR_VAR 0 16
35336: PUSH
35337: LD_VAR 0 1
35341: PPUSH
35342: CALL_OW 255
35346: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35347: LD_ADDR_VAR 0 17
35351: PUSH
35352: LD_VAR 0 1
35356: PPUSH
35357: CALL_OW 248
35361: ST_TO_ADDR
// if sources then
35362: LD_VAR 0 5
35366: IFFALSE 35413
// for i = 1 to 3 do
35368: LD_ADDR_VAR 0 8
35372: PUSH
35373: DOUBLE
35374: LD_INT 1
35376: DEC
35377: ST_TO_ADDR
35378: LD_INT 3
35380: PUSH
35381: FOR_TO
35382: IFFALSE 35411
// AddResourceType ( base , i , sources [ i ] ) ;
35384: LD_VAR 0 15
35388: PPUSH
35389: LD_VAR 0 8
35393: PPUSH
35394: LD_VAR 0 5
35398: PUSH
35399: LD_VAR 0 8
35403: ARRAY
35404: PPUSH
35405: CALL_OW 276
35409: GO 35381
35411: POP
35412: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35413: LD_ADDR_VAR 0 18
35417: PUSH
35418: LD_VAR 0 15
35422: PPUSH
35423: LD_VAR 0 2
35427: PPUSH
35428: LD_INT 1
35430: PPUSH
35431: CALL 34674 0 3
35435: ST_TO_ADDR
// InitHc ;
35436: CALL_OW 19
// InitUc ;
35440: CALL_OW 18
// uc_side := side ;
35444: LD_ADDR_OWVAR 20
35448: PUSH
35449: LD_VAR 0 16
35453: ST_TO_ADDR
// uc_nation := nation ;
35454: LD_ADDR_OWVAR 21
35458: PUSH
35459: LD_VAR 0 17
35463: ST_TO_ADDR
// if buildings then
35464: LD_VAR 0 18
35468: IFFALSE 36790
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35470: LD_ADDR_VAR 0 19
35474: PUSH
35475: LD_VAR 0 18
35479: PPUSH
35480: LD_INT 2
35482: PUSH
35483: LD_INT 30
35485: PUSH
35486: LD_INT 29
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 30
35495: PUSH
35496: LD_INT 30
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: LIST
35507: PPUSH
35508: CALL_OW 72
35512: ST_TO_ADDR
// if tmp then
35513: LD_VAR 0 19
35517: IFFALSE 35565
// for i in tmp do
35519: LD_ADDR_VAR 0 8
35523: PUSH
35524: LD_VAR 0 19
35528: PUSH
35529: FOR_IN
35530: IFFALSE 35563
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35532: LD_VAR 0 8
35536: PPUSH
35537: CALL_OW 250
35541: PPUSH
35542: LD_VAR 0 8
35546: PPUSH
35547: CALL_OW 251
35551: PPUSH
35552: LD_VAR 0 16
35556: PPUSH
35557: CALL_OW 441
35561: GO 35529
35563: POP
35564: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35565: LD_VAR 0 18
35569: PPUSH
35570: LD_INT 2
35572: PUSH
35573: LD_INT 30
35575: PUSH
35576: LD_INT 32
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 30
35585: PUSH
35586: LD_INT 33
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: LIST
35597: PPUSH
35598: CALL_OW 72
35602: IFFALSE 35690
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35604: LD_ADDR_VAR 0 8
35608: PUSH
35609: LD_VAR 0 18
35613: PPUSH
35614: LD_INT 2
35616: PUSH
35617: LD_INT 30
35619: PUSH
35620: LD_INT 32
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 30
35629: PUSH
35630: LD_INT 33
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: LIST
35641: PPUSH
35642: CALL_OW 72
35646: PUSH
35647: FOR_IN
35648: IFFALSE 35688
// begin if not GetBWeapon ( i ) then
35650: LD_VAR 0 8
35654: PPUSH
35655: CALL_OW 269
35659: NOT
35660: IFFALSE 35686
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35662: LD_VAR 0 8
35666: PPUSH
35667: LD_VAR 0 8
35671: PPUSH
35672: LD_VAR 0 2
35676: PPUSH
35677: CALL 36936 0 2
35681: PPUSH
35682: CALL_OW 431
// end ;
35686: GO 35647
35688: POP
35689: POP
// end ; for i = 1 to personel do
35690: LD_ADDR_VAR 0 8
35694: PUSH
35695: DOUBLE
35696: LD_INT 1
35698: DEC
35699: ST_TO_ADDR
35700: LD_VAR 0 6
35704: PUSH
35705: FOR_TO
35706: IFFALSE 36770
// begin if i > 4 then
35708: LD_VAR 0 8
35712: PUSH
35713: LD_INT 4
35715: GREATER
35716: IFFALSE 35720
// break ;
35718: GO 36770
// case i of 1 :
35720: LD_VAR 0 8
35724: PUSH
35725: LD_INT 1
35727: DOUBLE
35728: EQUAL
35729: IFTRUE 35733
35731: GO 35813
35733: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35734: LD_ADDR_VAR 0 12
35738: PUSH
35739: LD_VAR 0 18
35743: PPUSH
35744: LD_INT 22
35746: PUSH
35747: LD_VAR 0 16
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 58
35758: PUSH
35759: EMPTY
35760: LIST
35761: PUSH
35762: LD_INT 2
35764: PUSH
35765: LD_INT 30
35767: PUSH
35768: LD_INT 32
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 30
35777: PUSH
35778: LD_INT 4
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 30
35787: PUSH
35788: LD_INT 5
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: LIST
35805: PPUSH
35806: CALL_OW 72
35810: ST_TO_ADDR
35811: GO 36035
35813: LD_INT 2
35815: DOUBLE
35816: EQUAL
35817: IFTRUE 35821
35819: GO 35883
35821: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35822: LD_ADDR_VAR 0 12
35826: PUSH
35827: LD_VAR 0 18
35831: PPUSH
35832: LD_INT 22
35834: PUSH
35835: LD_VAR 0 16
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 2
35846: PUSH
35847: LD_INT 30
35849: PUSH
35850: LD_INT 0
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 30
35859: PUSH
35860: LD_INT 1
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: LIST
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PPUSH
35876: CALL_OW 72
35880: ST_TO_ADDR
35881: GO 36035
35883: LD_INT 3
35885: DOUBLE
35886: EQUAL
35887: IFTRUE 35891
35889: GO 35953
35891: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35892: LD_ADDR_VAR 0 12
35896: PUSH
35897: LD_VAR 0 18
35901: PPUSH
35902: LD_INT 22
35904: PUSH
35905: LD_VAR 0 16
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 2
35916: PUSH
35917: LD_INT 30
35919: PUSH
35920: LD_INT 2
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 30
35929: PUSH
35930: LD_INT 3
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: LIST
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PPUSH
35946: CALL_OW 72
35950: ST_TO_ADDR
35951: GO 36035
35953: LD_INT 4
35955: DOUBLE
35956: EQUAL
35957: IFTRUE 35961
35959: GO 36034
35961: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35962: LD_ADDR_VAR 0 12
35966: PUSH
35967: LD_VAR 0 18
35971: PPUSH
35972: LD_INT 22
35974: PUSH
35975: LD_VAR 0 16
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: PUSH
35984: LD_INT 2
35986: PUSH
35987: LD_INT 30
35989: PUSH
35990: LD_INT 6
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 30
35999: PUSH
36000: LD_INT 7
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 30
36009: PUSH
36010: LD_INT 8
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: LIST
36021: LIST
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PPUSH
36027: CALL_OW 72
36031: ST_TO_ADDR
36032: GO 36035
36034: POP
// if i = 1 then
36035: LD_VAR 0 8
36039: PUSH
36040: LD_INT 1
36042: EQUAL
36043: IFFALSE 36154
// begin tmp := [ ] ;
36045: LD_ADDR_VAR 0 19
36049: PUSH
36050: EMPTY
36051: ST_TO_ADDR
// for j in f do
36052: LD_ADDR_VAR 0 9
36056: PUSH
36057: LD_VAR 0 12
36061: PUSH
36062: FOR_IN
36063: IFFALSE 36136
// if GetBType ( j ) = b_bunker then
36065: LD_VAR 0 9
36069: PPUSH
36070: CALL_OW 266
36074: PUSH
36075: LD_INT 32
36077: EQUAL
36078: IFFALSE 36105
// tmp := Insert ( tmp , 1 , j ) else
36080: LD_ADDR_VAR 0 19
36084: PUSH
36085: LD_VAR 0 19
36089: PPUSH
36090: LD_INT 1
36092: PPUSH
36093: LD_VAR 0 9
36097: PPUSH
36098: CALL_OW 2
36102: ST_TO_ADDR
36103: GO 36134
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36105: LD_ADDR_VAR 0 19
36109: PUSH
36110: LD_VAR 0 19
36114: PPUSH
36115: LD_VAR 0 19
36119: PUSH
36120: LD_INT 1
36122: PLUS
36123: PPUSH
36124: LD_VAR 0 9
36128: PPUSH
36129: CALL_OW 2
36133: ST_TO_ADDR
36134: GO 36062
36136: POP
36137: POP
// if tmp then
36138: LD_VAR 0 19
36142: IFFALSE 36154
// f := tmp ;
36144: LD_ADDR_VAR 0 12
36148: PUSH
36149: LD_VAR 0 19
36153: ST_TO_ADDR
// end ; x := personel [ i ] ;
36154: LD_ADDR_VAR 0 13
36158: PUSH
36159: LD_VAR 0 6
36163: PUSH
36164: LD_VAR 0 8
36168: ARRAY
36169: ST_TO_ADDR
// if x = - 1 then
36170: LD_VAR 0 13
36174: PUSH
36175: LD_INT 1
36177: NEG
36178: EQUAL
36179: IFFALSE 36388
// begin for j in f do
36181: LD_ADDR_VAR 0 9
36185: PUSH
36186: LD_VAR 0 12
36190: PUSH
36191: FOR_IN
36192: IFFALSE 36384
// repeat InitHc ;
36194: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36198: LD_VAR 0 9
36202: PPUSH
36203: CALL_OW 266
36207: PUSH
36208: LD_INT 5
36210: EQUAL
36211: IFFALSE 36281
// begin if UnitsInside ( j ) < 3 then
36213: LD_VAR 0 9
36217: PPUSH
36218: CALL_OW 313
36222: PUSH
36223: LD_INT 3
36225: LESS
36226: IFFALSE 36262
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36228: LD_INT 0
36230: PPUSH
36231: LD_INT 5
36233: PUSH
36234: LD_INT 8
36236: PUSH
36237: LD_INT 9
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: LIST
36244: PUSH
36245: LD_VAR 0 17
36249: ARRAY
36250: PPUSH
36251: LD_VAR 0 4
36255: PPUSH
36256: CALL_OW 380
36260: GO 36279
// PrepareHuman ( false , i , skill ) ;
36262: LD_INT 0
36264: PPUSH
36265: LD_VAR 0 8
36269: PPUSH
36270: LD_VAR 0 4
36274: PPUSH
36275: CALL_OW 380
// end else
36279: GO 36298
// PrepareHuman ( false , i , skill ) ;
36281: LD_INT 0
36283: PPUSH
36284: LD_VAR 0 8
36288: PPUSH
36289: LD_VAR 0 4
36293: PPUSH
36294: CALL_OW 380
// un := CreateHuman ;
36298: LD_ADDR_VAR 0 14
36302: PUSH
36303: CALL_OW 44
36307: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36308: LD_ADDR_VAR 0 7
36312: PUSH
36313: LD_VAR 0 7
36317: PPUSH
36318: LD_INT 1
36320: PPUSH
36321: LD_VAR 0 14
36325: PPUSH
36326: CALL_OW 2
36330: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36331: LD_VAR 0 14
36335: PPUSH
36336: LD_VAR 0 9
36340: PPUSH
36341: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36345: LD_VAR 0 9
36349: PPUSH
36350: CALL_OW 313
36354: PUSH
36355: LD_INT 6
36357: EQUAL
36358: PUSH
36359: LD_VAR 0 9
36363: PPUSH
36364: CALL_OW 266
36368: PUSH
36369: LD_INT 32
36371: PUSH
36372: LD_INT 31
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: IN
36379: OR
36380: IFFALSE 36194
36382: GO 36191
36384: POP
36385: POP
// end else
36386: GO 36768
// for j = 1 to x do
36388: LD_ADDR_VAR 0 9
36392: PUSH
36393: DOUBLE
36394: LD_INT 1
36396: DEC
36397: ST_TO_ADDR
36398: LD_VAR 0 13
36402: PUSH
36403: FOR_TO
36404: IFFALSE 36766
// begin InitHc ;
36406: CALL_OW 19
// if not f then
36410: LD_VAR 0 12
36414: NOT
36415: IFFALSE 36504
// begin PrepareHuman ( false , i , skill ) ;
36417: LD_INT 0
36419: PPUSH
36420: LD_VAR 0 8
36424: PPUSH
36425: LD_VAR 0 4
36429: PPUSH
36430: CALL_OW 380
// un := CreateHuman ;
36434: LD_ADDR_VAR 0 14
36438: PUSH
36439: CALL_OW 44
36443: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36444: LD_ADDR_VAR 0 7
36448: PUSH
36449: LD_VAR 0 7
36453: PPUSH
36454: LD_INT 1
36456: PPUSH
36457: LD_VAR 0 14
36461: PPUSH
36462: CALL_OW 2
36466: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36467: LD_VAR 0 14
36471: PPUSH
36472: LD_VAR 0 1
36476: PPUSH
36477: CALL_OW 250
36481: PPUSH
36482: LD_VAR 0 1
36486: PPUSH
36487: CALL_OW 251
36491: PPUSH
36492: LD_INT 10
36494: PPUSH
36495: LD_INT 0
36497: PPUSH
36498: CALL_OW 50
// continue ;
36502: GO 36403
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36504: LD_VAR 0 12
36508: PUSH
36509: LD_INT 1
36511: ARRAY
36512: PPUSH
36513: CALL_OW 313
36517: PUSH
36518: LD_VAR 0 12
36522: PUSH
36523: LD_INT 1
36525: ARRAY
36526: PPUSH
36527: CALL_OW 266
36531: PUSH
36532: LD_INT 32
36534: PUSH
36535: LD_INT 31
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: IN
36542: AND
36543: PUSH
36544: LD_VAR 0 12
36548: PUSH
36549: LD_INT 1
36551: ARRAY
36552: PPUSH
36553: CALL_OW 313
36557: PUSH
36558: LD_INT 6
36560: EQUAL
36561: OR
36562: IFFALSE 36582
// f := Delete ( f , 1 ) ;
36564: LD_ADDR_VAR 0 12
36568: PUSH
36569: LD_VAR 0 12
36573: PPUSH
36574: LD_INT 1
36576: PPUSH
36577: CALL_OW 3
36581: ST_TO_ADDR
// if not f then
36582: LD_VAR 0 12
36586: NOT
36587: IFFALSE 36605
// begin x := x + 2 ;
36589: LD_ADDR_VAR 0 13
36593: PUSH
36594: LD_VAR 0 13
36598: PUSH
36599: LD_INT 2
36601: PLUS
36602: ST_TO_ADDR
// continue ;
36603: GO 36403
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36605: LD_VAR 0 12
36609: PUSH
36610: LD_INT 1
36612: ARRAY
36613: PPUSH
36614: CALL_OW 266
36618: PUSH
36619: LD_INT 5
36621: EQUAL
36622: IFFALSE 36696
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36624: LD_VAR 0 12
36628: PUSH
36629: LD_INT 1
36631: ARRAY
36632: PPUSH
36633: CALL_OW 313
36637: PUSH
36638: LD_INT 3
36640: LESS
36641: IFFALSE 36677
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36643: LD_INT 0
36645: PPUSH
36646: LD_INT 5
36648: PUSH
36649: LD_INT 8
36651: PUSH
36652: LD_INT 9
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: LIST
36659: PUSH
36660: LD_VAR 0 17
36664: ARRAY
36665: PPUSH
36666: LD_VAR 0 4
36670: PPUSH
36671: CALL_OW 380
36675: GO 36694
// PrepareHuman ( false , i , skill ) ;
36677: LD_INT 0
36679: PPUSH
36680: LD_VAR 0 8
36684: PPUSH
36685: LD_VAR 0 4
36689: PPUSH
36690: CALL_OW 380
// end else
36694: GO 36713
// PrepareHuman ( false , i , skill ) ;
36696: LD_INT 0
36698: PPUSH
36699: LD_VAR 0 8
36703: PPUSH
36704: LD_VAR 0 4
36708: PPUSH
36709: CALL_OW 380
// un := CreateHuman ;
36713: LD_ADDR_VAR 0 14
36717: PUSH
36718: CALL_OW 44
36722: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36723: LD_ADDR_VAR 0 7
36727: PUSH
36728: LD_VAR 0 7
36732: PPUSH
36733: LD_INT 1
36735: PPUSH
36736: LD_VAR 0 14
36740: PPUSH
36741: CALL_OW 2
36745: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36746: LD_VAR 0 14
36750: PPUSH
36751: LD_VAR 0 12
36755: PUSH
36756: LD_INT 1
36758: ARRAY
36759: PPUSH
36760: CALL_OW 52
// end ;
36764: GO 36403
36766: POP
36767: POP
// end ;
36768: GO 35705
36770: POP
36771: POP
// result := result ^ buildings ;
36772: LD_ADDR_VAR 0 7
36776: PUSH
36777: LD_VAR 0 7
36781: PUSH
36782: LD_VAR 0 18
36786: ADD
36787: ST_TO_ADDR
// end else
36788: GO 36931
// begin for i = 1 to personel do
36790: LD_ADDR_VAR 0 8
36794: PUSH
36795: DOUBLE
36796: LD_INT 1
36798: DEC
36799: ST_TO_ADDR
36800: LD_VAR 0 6
36804: PUSH
36805: FOR_TO
36806: IFFALSE 36929
// begin if i > 4 then
36808: LD_VAR 0 8
36812: PUSH
36813: LD_INT 4
36815: GREATER
36816: IFFALSE 36820
// break ;
36818: GO 36929
// x := personel [ i ] ;
36820: LD_ADDR_VAR 0 13
36824: PUSH
36825: LD_VAR 0 6
36829: PUSH
36830: LD_VAR 0 8
36834: ARRAY
36835: ST_TO_ADDR
// if x = - 1 then
36836: LD_VAR 0 13
36840: PUSH
36841: LD_INT 1
36843: NEG
36844: EQUAL
36845: IFFALSE 36849
// continue ;
36847: GO 36805
// PrepareHuman ( false , i , skill ) ;
36849: LD_INT 0
36851: PPUSH
36852: LD_VAR 0 8
36856: PPUSH
36857: LD_VAR 0 4
36861: PPUSH
36862: CALL_OW 380
// un := CreateHuman ;
36866: LD_ADDR_VAR 0 14
36870: PUSH
36871: CALL_OW 44
36875: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36876: LD_VAR 0 14
36880: PPUSH
36881: LD_VAR 0 1
36885: PPUSH
36886: CALL_OW 250
36890: PPUSH
36891: LD_VAR 0 1
36895: PPUSH
36896: CALL_OW 251
36900: PPUSH
36901: LD_INT 10
36903: PPUSH
36904: LD_INT 0
36906: PPUSH
36907: CALL_OW 50
// result := result ^ un ;
36911: LD_ADDR_VAR 0 7
36915: PUSH
36916: LD_VAR 0 7
36920: PUSH
36921: LD_VAR 0 14
36925: ADD
36926: ST_TO_ADDR
// end ;
36927: GO 36805
36929: POP
36930: POP
// end ; end ;
36931: LD_VAR 0 7
36935: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36936: LD_INT 0
36938: PPUSH
36939: PPUSH
36940: PPUSH
36941: PPUSH
36942: PPUSH
36943: PPUSH
36944: PPUSH
36945: PPUSH
36946: PPUSH
36947: PPUSH
36948: PPUSH
36949: PPUSH
36950: PPUSH
36951: PPUSH
36952: PPUSH
36953: PPUSH
// result := false ;
36954: LD_ADDR_VAR 0 3
36958: PUSH
36959: LD_INT 0
36961: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36962: LD_VAR 0 1
36966: NOT
36967: PUSH
36968: LD_VAR 0 1
36972: PPUSH
36973: CALL_OW 266
36977: PUSH
36978: LD_INT 32
36980: PUSH
36981: LD_INT 33
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: IN
36988: NOT
36989: OR
36990: IFFALSE 36994
// exit ;
36992: GO 38103
// nat := GetNation ( tower ) ;
36994: LD_ADDR_VAR 0 12
36998: PUSH
36999: LD_VAR 0 1
37003: PPUSH
37004: CALL_OW 248
37008: ST_TO_ADDR
// side := GetSide ( tower ) ;
37009: LD_ADDR_VAR 0 16
37013: PUSH
37014: LD_VAR 0 1
37018: PPUSH
37019: CALL_OW 255
37023: ST_TO_ADDR
// x := GetX ( tower ) ;
37024: LD_ADDR_VAR 0 10
37028: PUSH
37029: LD_VAR 0 1
37033: PPUSH
37034: CALL_OW 250
37038: ST_TO_ADDR
// y := GetY ( tower ) ;
37039: LD_ADDR_VAR 0 11
37043: PUSH
37044: LD_VAR 0 1
37048: PPUSH
37049: CALL_OW 251
37053: ST_TO_ADDR
// if not x or not y then
37054: LD_VAR 0 10
37058: NOT
37059: PUSH
37060: LD_VAR 0 11
37064: NOT
37065: OR
37066: IFFALSE 37070
// exit ;
37068: GO 38103
// weapon := 0 ;
37070: LD_ADDR_VAR 0 18
37074: PUSH
37075: LD_INT 0
37077: ST_TO_ADDR
// fac_list := [ ] ;
37078: LD_ADDR_VAR 0 17
37082: PUSH
37083: EMPTY
37084: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37085: LD_ADDR_VAR 0 6
37089: PUSH
37090: LD_VAR 0 1
37094: PPUSH
37095: CALL_OW 274
37099: PPUSH
37100: LD_VAR 0 2
37104: PPUSH
37105: LD_INT 0
37107: PPUSH
37108: CALL 34674 0 3
37112: PPUSH
37113: LD_INT 30
37115: PUSH
37116: LD_INT 3
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PPUSH
37123: CALL_OW 72
37127: ST_TO_ADDR
// if not factories then
37128: LD_VAR 0 6
37132: NOT
37133: IFFALSE 37137
// exit ;
37135: GO 38103
// for i in factories do
37137: LD_ADDR_VAR 0 8
37141: PUSH
37142: LD_VAR 0 6
37146: PUSH
37147: FOR_IN
37148: IFFALSE 37173
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37150: LD_ADDR_VAR 0 17
37154: PUSH
37155: LD_VAR 0 17
37159: PUSH
37160: LD_VAR 0 8
37164: PPUSH
37165: CALL_OW 478
37169: UNION
37170: ST_TO_ADDR
37171: GO 37147
37173: POP
37174: POP
// if not fac_list then
37175: LD_VAR 0 17
37179: NOT
37180: IFFALSE 37184
// exit ;
37182: GO 38103
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37184: LD_ADDR_VAR 0 5
37188: PUSH
37189: LD_INT 4
37191: PUSH
37192: LD_INT 5
37194: PUSH
37195: LD_INT 9
37197: PUSH
37198: LD_INT 10
37200: PUSH
37201: LD_INT 6
37203: PUSH
37204: LD_INT 7
37206: PUSH
37207: LD_INT 11
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 27
37221: PUSH
37222: LD_INT 28
37224: PUSH
37225: LD_INT 26
37227: PUSH
37228: LD_INT 30
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 43
37239: PUSH
37240: LD_INT 44
37242: PUSH
37243: LD_INT 46
37245: PUSH
37246: LD_INT 45
37248: PUSH
37249: LD_INT 47
37251: PUSH
37252: LD_INT 49
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: LIST
37267: PUSH
37268: LD_VAR 0 12
37272: ARRAY
37273: ST_TO_ADDR
// list := list isect fac_list ;
37274: LD_ADDR_VAR 0 5
37278: PUSH
37279: LD_VAR 0 5
37283: PUSH
37284: LD_VAR 0 17
37288: ISECT
37289: ST_TO_ADDR
// if not list then
37290: LD_VAR 0 5
37294: NOT
37295: IFFALSE 37299
// exit ;
37297: GO 38103
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37299: LD_VAR 0 12
37303: PUSH
37304: LD_INT 3
37306: EQUAL
37307: PUSH
37308: LD_INT 49
37310: PUSH
37311: LD_VAR 0 5
37315: IN
37316: AND
37317: PUSH
37318: LD_INT 31
37320: PPUSH
37321: LD_VAR 0 16
37325: PPUSH
37326: CALL_OW 321
37330: PUSH
37331: LD_INT 2
37333: EQUAL
37334: AND
37335: IFFALSE 37395
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37337: LD_INT 22
37339: PUSH
37340: LD_VAR 0 16
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 35
37351: PUSH
37352: LD_INT 49
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 91
37361: PUSH
37362: LD_VAR 0 1
37366: PUSH
37367: LD_INT 10
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: LIST
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: LIST
37379: PPUSH
37380: CALL_OW 69
37384: NOT
37385: IFFALSE 37395
// weapon := ru_time_lapser ;
37387: LD_ADDR_VAR 0 18
37391: PUSH
37392: LD_INT 49
37394: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37395: LD_VAR 0 12
37399: PUSH
37400: LD_INT 1
37402: PUSH
37403: LD_INT 2
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: IN
37410: PUSH
37411: LD_INT 11
37413: PUSH
37414: LD_VAR 0 5
37418: IN
37419: PUSH
37420: LD_INT 30
37422: PUSH
37423: LD_VAR 0 5
37427: IN
37428: OR
37429: AND
37430: PUSH
37431: LD_INT 6
37433: PPUSH
37434: LD_VAR 0 16
37438: PPUSH
37439: CALL_OW 321
37443: PUSH
37444: LD_INT 2
37446: EQUAL
37447: AND
37448: IFFALSE 37613
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37450: LD_INT 22
37452: PUSH
37453: LD_VAR 0 16
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 2
37464: PUSH
37465: LD_INT 35
37467: PUSH
37468: LD_INT 11
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: LD_INT 35
37477: PUSH
37478: LD_INT 30
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 91
37492: PUSH
37493: LD_VAR 0 1
37497: PUSH
37498: LD_INT 18
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: LIST
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: LIST
37510: PPUSH
37511: CALL_OW 69
37515: NOT
37516: PUSH
37517: LD_INT 22
37519: PUSH
37520: LD_VAR 0 16
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 2
37531: PUSH
37532: LD_INT 30
37534: PUSH
37535: LD_INT 32
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 30
37544: PUSH
37545: LD_INT 33
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 91
37559: PUSH
37560: LD_VAR 0 1
37564: PUSH
37565: LD_INT 12
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: LIST
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: LIST
37577: PUSH
37578: EMPTY
37579: LIST
37580: PPUSH
37581: CALL_OW 69
37585: PUSH
37586: LD_INT 2
37588: GREATER
37589: AND
37590: IFFALSE 37613
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37592: LD_ADDR_VAR 0 18
37596: PUSH
37597: LD_INT 11
37599: PUSH
37600: LD_INT 30
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_VAR 0 12
37611: ARRAY
37612: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37613: LD_VAR 0 18
37617: NOT
37618: PUSH
37619: LD_INT 40
37621: PPUSH
37622: LD_VAR 0 16
37626: PPUSH
37627: CALL_OW 321
37631: PUSH
37632: LD_INT 2
37634: EQUAL
37635: AND
37636: PUSH
37637: LD_INT 7
37639: PUSH
37640: LD_VAR 0 5
37644: IN
37645: PUSH
37646: LD_INT 28
37648: PUSH
37649: LD_VAR 0 5
37653: IN
37654: OR
37655: PUSH
37656: LD_INT 45
37658: PUSH
37659: LD_VAR 0 5
37663: IN
37664: OR
37665: AND
37666: IFFALSE 37920
// begin hex := GetHexInfo ( x , y ) ;
37668: LD_ADDR_VAR 0 4
37672: PUSH
37673: LD_VAR 0 10
37677: PPUSH
37678: LD_VAR 0 11
37682: PPUSH
37683: CALL_OW 546
37687: ST_TO_ADDR
// if hex [ 1 ] then
37688: LD_VAR 0 4
37692: PUSH
37693: LD_INT 1
37695: ARRAY
37696: IFFALSE 37700
// exit ;
37698: GO 38103
// height := hex [ 2 ] ;
37700: LD_ADDR_VAR 0 15
37704: PUSH
37705: LD_VAR 0 4
37709: PUSH
37710: LD_INT 2
37712: ARRAY
37713: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37714: LD_ADDR_VAR 0 14
37718: PUSH
37719: LD_INT 0
37721: PUSH
37722: LD_INT 2
37724: PUSH
37725: LD_INT 3
37727: PUSH
37728: LD_INT 5
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: ST_TO_ADDR
// for i in tmp do
37737: LD_ADDR_VAR 0 8
37741: PUSH
37742: LD_VAR 0 14
37746: PUSH
37747: FOR_IN
37748: IFFALSE 37918
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37750: LD_ADDR_VAR 0 9
37754: PUSH
37755: LD_VAR 0 10
37759: PPUSH
37760: LD_VAR 0 8
37764: PPUSH
37765: LD_INT 5
37767: PPUSH
37768: CALL_OW 272
37772: PUSH
37773: LD_VAR 0 11
37777: PPUSH
37778: LD_VAR 0 8
37782: PPUSH
37783: LD_INT 5
37785: PPUSH
37786: CALL_OW 273
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37795: LD_VAR 0 9
37799: PUSH
37800: LD_INT 1
37802: ARRAY
37803: PPUSH
37804: LD_VAR 0 9
37808: PUSH
37809: LD_INT 2
37811: ARRAY
37812: PPUSH
37813: CALL_OW 488
37817: IFFALSE 37916
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37819: LD_ADDR_VAR 0 4
37823: PUSH
37824: LD_VAR 0 9
37828: PUSH
37829: LD_INT 1
37831: ARRAY
37832: PPUSH
37833: LD_VAR 0 9
37837: PUSH
37838: LD_INT 2
37840: ARRAY
37841: PPUSH
37842: CALL_OW 546
37846: ST_TO_ADDR
// if hex [ 1 ] then
37847: LD_VAR 0 4
37851: PUSH
37852: LD_INT 1
37854: ARRAY
37855: IFFALSE 37859
// continue ;
37857: GO 37747
// h := hex [ 2 ] ;
37859: LD_ADDR_VAR 0 13
37863: PUSH
37864: LD_VAR 0 4
37868: PUSH
37869: LD_INT 2
37871: ARRAY
37872: ST_TO_ADDR
// if h + 7 < height then
37873: LD_VAR 0 13
37877: PUSH
37878: LD_INT 7
37880: PLUS
37881: PUSH
37882: LD_VAR 0 15
37886: LESS
37887: IFFALSE 37916
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37889: LD_ADDR_VAR 0 18
37893: PUSH
37894: LD_INT 7
37896: PUSH
37897: LD_INT 28
37899: PUSH
37900: LD_INT 45
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: LIST
37907: PUSH
37908: LD_VAR 0 12
37912: ARRAY
37913: ST_TO_ADDR
// break ;
37914: GO 37918
// end ; end ; end ;
37916: GO 37747
37918: POP
37919: POP
// end ; if not weapon then
37920: LD_VAR 0 18
37924: NOT
37925: IFFALSE 37985
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37927: LD_ADDR_VAR 0 5
37931: PUSH
37932: LD_VAR 0 5
37936: PUSH
37937: LD_INT 11
37939: PUSH
37940: LD_INT 30
37942: PUSH
37943: LD_INT 49
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: LIST
37950: DIFF
37951: ST_TO_ADDR
// if not list then
37952: LD_VAR 0 5
37956: NOT
37957: IFFALSE 37961
// exit ;
37959: GO 38103
// weapon := list [ rand ( 1 , list ) ] ;
37961: LD_ADDR_VAR 0 18
37965: PUSH
37966: LD_VAR 0 5
37970: PUSH
37971: LD_INT 1
37973: PPUSH
37974: LD_VAR 0 5
37978: PPUSH
37979: CALL_OW 12
37983: ARRAY
37984: ST_TO_ADDR
// end ; if weapon then
37985: LD_VAR 0 18
37989: IFFALSE 38103
// begin tmp := CostOfWeapon ( weapon ) ;
37991: LD_ADDR_VAR 0 14
37995: PUSH
37996: LD_VAR 0 18
38000: PPUSH
38001: CALL_OW 451
38005: ST_TO_ADDR
// j := GetBase ( tower ) ;
38006: LD_ADDR_VAR 0 9
38010: PUSH
38011: LD_VAR 0 1
38015: PPUSH
38016: CALL_OW 274
38020: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38021: LD_VAR 0 9
38025: PPUSH
38026: LD_INT 1
38028: PPUSH
38029: CALL_OW 275
38033: PUSH
38034: LD_VAR 0 14
38038: PUSH
38039: LD_INT 1
38041: ARRAY
38042: GREATEREQUAL
38043: PUSH
38044: LD_VAR 0 9
38048: PPUSH
38049: LD_INT 2
38051: PPUSH
38052: CALL_OW 275
38056: PUSH
38057: LD_VAR 0 14
38061: PUSH
38062: LD_INT 2
38064: ARRAY
38065: GREATEREQUAL
38066: AND
38067: PUSH
38068: LD_VAR 0 9
38072: PPUSH
38073: LD_INT 3
38075: PPUSH
38076: CALL_OW 275
38080: PUSH
38081: LD_VAR 0 14
38085: PUSH
38086: LD_INT 3
38088: ARRAY
38089: GREATEREQUAL
38090: AND
38091: IFFALSE 38103
// result := weapon ;
38093: LD_ADDR_VAR 0 3
38097: PUSH
38098: LD_VAR 0 18
38102: ST_TO_ADDR
// end ; end ;
38103: LD_VAR 0 3
38107: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38108: LD_INT 0
38110: PPUSH
38111: PPUSH
// result := true ;
38112: LD_ADDR_VAR 0 3
38116: PUSH
38117: LD_INT 1
38119: ST_TO_ADDR
// if array1 = array2 then
38120: LD_VAR 0 1
38124: PUSH
38125: LD_VAR 0 2
38129: EQUAL
38130: IFFALSE 38190
// begin for i = 1 to array1 do
38132: LD_ADDR_VAR 0 4
38136: PUSH
38137: DOUBLE
38138: LD_INT 1
38140: DEC
38141: ST_TO_ADDR
38142: LD_VAR 0 1
38146: PUSH
38147: FOR_TO
38148: IFFALSE 38186
// if array1 [ i ] <> array2 [ i ] then
38150: LD_VAR 0 1
38154: PUSH
38155: LD_VAR 0 4
38159: ARRAY
38160: PUSH
38161: LD_VAR 0 2
38165: PUSH
38166: LD_VAR 0 4
38170: ARRAY
38171: NONEQUAL
38172: IFFALSE 38184
// begin result := false ;
38174: LD_ADDR_VAR 0 3
38178: PUSH
38179: LD_INT 0
38181: ST_TO_ADDR
// break ;
38182: GO 38186
// end ;
38184: GO 38147
38186: POP
38187: POP
// end else
38188: GO 38198
// result := false ;
38190: LD_ADDR_VAR 0 3
38194: PUSH
38195: LD_INT 0
38197: ST_TO_ADDR
// end ;
38198: LD_VAR 0 3
38202: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38203: LD_INT 0
38205: PPUSH
38206: PPUSH
// if not array1 or not array2 then
38207: LD_VAR 0 1
38211: NOT
38212: PUSH
38213: LD_VAR 0 2
38217: NOT
38218: OR
38219: IFFALSE 38223
// exit ;
38221: GO 38287
// result := true ;
38223: LD_ADDR_VAR 0 3
38227: PUSH
38228: LD_INT 1
38230: ST_TO_ADDR
// for i = 1 to array1 do
38231: LD_ADDR_VAR 0 4
38235: PUSH
38236: DOUBLE
38237: LD_INT 1
38239: DEC
38240: ST_TO_ADDR
38241: LD_VAR 0 1
38245: PUSH
38246: FOR_TO
38247: IFFALSE 38285
// if array1 [ i ] <> array2 [ i ] then
38249: LD_VAR 0 1
38253: PUSH
38254: LD_VAR 0 4
38258: ARRAY
38259: PUSH
38260: LD_VAR 0 2
38264: PUSH
38265: LD_VAR 0 4
38269: ARRAY
38270: NONEQUAL
38271: IFFALSE 38283
// begin result := false ;
38273: LD_ADDR_VAR 0 3
38277: PUSH
38278: LD_INT 0
38280: ST_TO_ADDR
// break ;
38281: GO 38285
// end ;
38283: GO 38246
38285: POP
38286: POP
// end ;
38287: LD_VAR 0 3
38291: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38292: LD_INT 0
38294: PPUSH
38295: PPUSH
38296: PPUSH
// pom := GetBase ( fac ) ;
38297: LD_ADDR_VAR 0 5
38301: PUSH
38302: LD_VAR 0 1
38306: PPUSH
38307: CALL_OW 274
38311: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38312: LD_ADDR_VAR 0 4
38316: PUSH
38317: LD_VAR 0 2
38321: PUSH
38322: LD_INT 1
38324: ARRAY
38325: PPUSH
38326: LD_VAR 0 2
38330: PUSH
38331: LD_INT 2
38333: ARRAY
38334: PPUSH
38335: LD_VAR 0 2
38339: PUSH
38340: LD_INT 3
38342: ARRAY
38343: PPUSH
38344: LD_VAR 0 2
38348: PUSH
38349: LD_INT 4
38351: ARRAY
38352: PPUSH
38353: CALL_OW 449
38357: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38358: LD_ADDR_VAR 0 3
38362: PUSH
38363: LD_VAR 0 5
38367: PPUSH
38368: LD_INT 1
38370: PPUSH
38371: CALL_OW 275
38375: PUSH
38376: LD_VAR 0 4
38380: PUSH
38381: LD_INT 1
38383: ARRAY
38384: GREATEREQUAL
38385: PUSH
38386: LD_VAR 0 5
38390: PPUSH
38391: LD_INT 2
38393: PPUSH
38394: CALL_OW 275
38398: PUSH
38399: LD_VAR 0 4
38403: PUSH
38404: LD_INT 2
38406: ARRAY
38407: GREATEREQUAL
38408: AND
38409: PUSH
38410: LD_VAR 0 5
38414: PPUSH
38415: LD_INT 3
38417: PPUSH
38418: CALL_OW 275
38422: PUSH
38423: LD_VAR 0 4
38427: PUSH
38428: LD_INT 3
38430: ARRAY
38431: GREATEREQUAL
38432: AND
38433: ST_TO_ADDR
// end ;
38434: LD_VAR 0 3
38438: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38439: LD_INT 0
38441: PPUSH
38442: PPUSH
38443: PPUSH
38444: PPUSH
// pom := GetBase ( building ) ;
38445: LD_ADDR_VAR 0 3
38449: PUSH
38450: LD_VAR 0 1
38454: PPUSH
38455: CALL_OW 274
38459: ST_TO_ADDR
// if not pom then
38460: LD_VAR 0 3
38464: NOT
38465: IFFALSE 38469
// exit ;
38467: GO 38639
// btype := GetBType ( building ) ;
38469: LD_ADDR_VAR 0 5
38473: PUSH
38474: LD_VAR 0 1
38478: PPUSH
38479: CALL_OW 266
38483: ST_TO_ADDR
// if btype = b_armoury then
38484: LD_VAR 0 5
38488: PUSH
38489: LD_INT 4
38491: EQUAL
38492: IFFALSE 38502
// btype := b_barracks ;
38494: LD_ADDR_VAR 0 5
38498: PUSH
38499: LD_INT 5
38501: ST_TO_ADDR
// if btype = b_depot then
38502: LD_VAR 0 5
38506: PUSH
38507: LD_INT 0
38509: EQUAL
38510: IFFALSE 38520
// btype := b_warehouse ;
38512: LD_ADDR_VAR 0 5
38516: PUSH
38517: LD_INT 1
38519: ST_TO_ADDR
// if btype = b_workshop then
38520: LD_VAR 0 5
38524: PUSH
38525: LD_INT 2
38527: EQUAL
38528: IFFALSE 38538
// btype := b_factory ;
38530: LD_ADDR_VAR 0 5
38534: PUSH
38535: LD_INT 3
38537: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38538: LD_ADDR_VAR 0 4
38542: PUSH
38543: LD_VAR 0 5
38547: PPUSH
38548: LD_VAR 0 1
38552: PPUSH
38553: CALL_OW 248
38557: PPUSH
38558: CALL_OW 450
38562: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38563: LD_ADDR_VAR 0 2
38567: PUSH
38568: LD_VAR 0 3
38572: PPUSH
38573: LD_INT 1
38575: PPUSH
38576: CALL_OW 275
38580: PUSH
38581: LD_VAR 0 4
38585: PUSH
38586: LD_INT 1
38588: ARRAY
38589: GREATEREQUAL
38590: PUSH
38591: LD_VAR 0 3
38595: PPUSH
38596: LD_INT 2
38598: PPUSH
38599: CALL_OW 275
38603: PUSH
38604: LD_VAR 0 4
38608: PUSH
38609: LD_INT 2
38611: ARRAY
38612: GREATEREQUAL
38613: AND
38614: PUSH
38615: LD_VAR 0 3
38619: PPUSH
38620: LD_INT 3
38622: PPUSH
38623: CALL_OW 275
38627: PUSH
38628: LD_VAR 0 4
38632: PUSH
38633: LD_INT 3
38635: ARRAY
38636: GREATEREQUAL
38637: AND
38638: ST_TO_ADDR
// end ;
38639: LD_VAR 0 2
38643: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38644: LD_INT 0
38646: PPUSH
38647: PPUSH
38648: PPUSH
// pom := GetBase ( building ) ;
38649: LD_ADDR_VAR 0 4
38653: PUSH
38654: LD_VAR 0 1
38658: PPUSH
38659: CALL_OW 274
38663: ST_TO_ADDR
// if not pom then
38664: LD_VAR 0 4
38668: NOT
38669: IFFALSE 38673
// exit ;
38671: GO 38774
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38673: LD_ADDR_VAR 0 5
38677: PUSH
38678: LD_VAR 0 2
38682: PPUSH
38683: LD_VAR 0 1
38687: PPUSH
38688: CALL_OW 248
38692: PPUSH
38693: CALL_OW 450
38697: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38698: LD_ADDR_VAR 0 3
38702: PUSH
38703: LD_VAR 0 4
38707: PPUSH
38708: LD_INT 1
38710: PPUSH
38711: CALL_OW 275
38715: PUSH
38716: LD_VAR 0 5
38720: PUSH
38721: LD_INT 1
38723: ARRAY
38724: GREATEREQUAL
38725: PUSH
38726: LD_VAR 0 4
38730: PPUSH
38731: LD_INT 2
38733: PPUSH
38734: CALL_OW 275
38738: PUSH
38739: LD_VAR 0 5
38743: PUSH
38744: LD_INT 2
38746: ARRAY
38747: GREATEREQUAL
38748: AND
38749: PUSH
38750: LD_VAR 0 4
38754: PPUSH
38755: LD_INT 3
38757: PPUSH
38758: CALL_OW 275
38762: PUSH
38763: LD_VAR 0 5
38767: PUSH
38768: LD_INT 3
38770: ARRAY
38771: GREATEREQUAL
38772: AND
38773: ST_TO_ADDR
// end ;
38774: LD_VAR 0 3
38778: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38779: LD_INT 0
38781: PPUSH
38782: PPUSH
38783: PPUSH
38784: PPUSH
38785: PPUSH
38786: PPUSH
38787: PPUSH
38788: PPUSH
38789: PPUSH
38790: PPUSH
38791: PPUSH
// result := false ;
38792: LD_ADDR_VAR 0 8
38796: PUSH
38797: LD_INT 0
38799: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38800: LD_VAR 0 5
38804: NOT
38805: PUSH
38806: LD_VAR 0 1
38810: NOT
38811: OR
38812: PUSH
38813: LD_VAR 0 2
38817: NOT
38818: OR
38819: PUSH
38820: LD_VAR 0 3
38824: NOT
38825: OR
38826: IFFALSE 38830
// exit ;
38828: GO 39644
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38830: LD_ADDR_VAR 0 14
38834: PUSH
38835: LD_VAR 0 1
38839: PPUSH
38840: LD_VAR 0 2
38844: PPUSH
38845: LD_VAR 0 3
38849: PPUSH
38850: LD_VAR 0 4
38854: PPUSH
38855: LD_VAR 0 5
38859: PUSH
38860: LD_INT 1
38862: ARRAY
38863: PPUSH
38864: CALL_OW 248
38868: PPUSH
38869: LD_INT 0
38871: PPUSH
38872: CALL 40897 0 6
38876: ST_TO_ADDR
// if not hexes then
38877: LD_VAR 0 14
38881: NOT
38882: IFFALSE 38886
// exit ;
38884: GO 39644
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38886: LD_ADDR_VAR 0 17
38890: PUSH
38891: LD_VAR 0 5
38895: PPUSH
38896: LD_INT 22
38898: PUSH
38899: LD_VAR 0 13
38903: PPUSH
38904: CALL_OW 255
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 2
38915: PUSH
38916: LD_INT 30
38918: PUSH
38919: LD_INT 0
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 30
38928: PUSH
38929: LD_INT 1
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: LIST
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PPUSH
38945: CALL_OW 72
38949: ST_TO_ADDR
// for i = 1 to hexes do
38950: LD_ADDR_VAR 0 9
38954: PUSH
38955: DOUBLE
38956: LD_INT 1
38958: DEC
38959: ST_TO_ADDR
38960: LD_VAR 0 14
38964: PUSH
38965: FOR_TO
38966: IFFALSE 39642
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38968: LD_ADDR_VAR 0 13
38972: PUSH
38973: LD_VAR 0 14
38977: PUSH
38978: LD_VAR 0 9
38982: ARRAY
38983: PUSH
38984: LD_INT 1
38986: ARRAY
38987: PPUSH
38988: LD_VAR 0 14
38992: PUSH
38993: LD_VAR 0 9
38997: ARRAY
38998: PUSH
38999: LD_INT 2
39001: ARRAY
39002: PPUSH
39003: CALL_OW 428
39007: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39008: LD_VAR 0 14
39012: PUSH
39013: LD_VAR 0 9
39017: ARRAY
39018: PUSH
39019: LD_INT 1
39021: ARRAY
39022: PPUSH
39023: LD_VAR 0 14
39027: PUSH
39028: LD_VAR 0 9
39032: ARRAY
39033: PUSH
39034: LD_INT 2
39036: ARRAY
39037: PPUSH
39038: CALL_OW 351
39042: PUSH
39043: LD_VAR 0 14
39047: PUSH
39048: LD_VAR 0 9
39052: ARRAY
39053: PUSH
39054: LD_INT 1
39056: ARRAY
39057: PPUSH
39058: LD_VAR 0 14
39062: PUSH
39063: LD_VAR 0 9
39067: ARRAY
39068: PUSH
39069: LD_INT 2
39071: ARRAY
39072: PPUSH
39073: CALL_OW 488
39077: NOT
39078: OR
39079: PUSH
39080: LD_VAR 0 13
39084: PPUSH
39085: CALL_OW 247
39089: PUSH
39090: LD_INT 3
39092: EQUAL
39093: OR
39094: IFFALSE 39100
// exit ;
39096: POP
39097: POP
39098: GO 39644
// if not tmp then
39100: LD_VAR 0 13
39104: NOT
39105: IFFALSE 39109
// continue ;
39107: GO 38965
// result := true ;
39109: LD_ADDR_VAR 0 8
39113: PUSH
39114: LD_INT 1
39116: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39117: LD_VAR 0 6
39121: PUSH
39122: LD_VAR 0 13
39126: PPUSH
39127: CALL_OW 247
39131: PUSH
39132: LD_INT 2
39134: EQUAL
39135: AND
39136: PUSH
39137: LD_VAR 0 13
39141: PPUSH
39142: CALL_OW 263
39146: PUSH
39147: LD_INT 1
39149: EQUAL
39150: AND
39151: IFFALSE 39315
// begin if IsDrivenBy ( tmp ) then
39153: LD_VAR 0 13
39157: PPUSH
39158: CALL_OW 311
39162: IFFALSE 39166
// continue ;
39164: GO 38965
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39166: LD_VAR 0 6
39170: PPUSH
39171: LD_INT 3
39173: PUSH
39174: LD_INT 60
39176: PUSH
39177: EMPTY
39178: LIST
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 3
39186: PUSH
39187: LD_INT 55
39189: PUSH
39190: EMPTY
39191: LIST
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PPUSH
39201: CALL_OW 72
39205: IFFALSE 39313
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39207: LD_ADDR_VAR 0 18
39211: PUSH
39212: LD_VAR 0 6
39216: PPUSH
39217: LD_INT 3
39219: PUSH
39220: LD_INT 60
39222: PUSH
39223: EMPTY
39224: LIST
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 3
39232: PUSH
39233: LD_INT 55
39235: PUSH
39236: EMPTY
39237: LIST
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PPUSH
39247: CALL_OW 72
39251: PUSH
39252: LD_INT 1
39254: ARRAY
39255: ST_TO_ADDR
// if IsInUnit ( driver ) then
39256: LD_VAR 0 18
39260: PPUSH
39261: CALL_OW 310
39265: IFFALSE 39276
// ComExit ( driver ) ;
39267: LD_VAR 0 18
39271: PPUSH
39272: CALL 64689 0 1
// AddComEnterUnit ( driver , tmp ) ;
39276: LD_VAR 0 18
39280: PPUSH
39281: LD_VAR 0 13
39285: PPUSH
39286: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39290: LD_VAR 0 18
39294: PPUSH
39295: LD_VAR 0 7
39299: PPUSH
39300: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39304: LD_VAR 0 18
39308: PPUSH
39309: CALL_OW 181
// end ; continue ;
39313: GO 38965
// end ; if not cleaners or not tmp in cleaners then
39315: LD_VAR 0 6
39319: NOT
39320: PUSH
39321: LD_VAR 0 13
39325: PUSH
39326: LD_VAR 0 6
39330: IN
39331: NOT
39332: OR
39333: IFFALSE 39640
// begin if dep then
39335: LD_VAR 0 17
39339: IFFALSE 39475
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39341: LD_ADDR_VAR 0 16
39345: PUSH
39346: LD_VAR 0 17
39350: PUSH
39351: LD_INT 1
39353: ARRAY
39354: PPUSH
39355: CALL_OW 250
39359: PPUSH
39360: LD_VAR 0 17
39364: PUSH
39365: LD_INT 1
39367: ARRAY
39368: PPUSH
39369: CALL_OW 254
39373: PPUSH
39374: LD_INT 5
39376: PPUSH
39377: CALL_OW 272
39381: PUSH
39382: LD_VAR 0 17
39386: PUSH
39387: LD_INT 1
39389: ARRAY
39390: PPUSH
39391: CALL_OW 251
39395: PPUSH
39396: LD_VAR 0 17
39400: PUSH
39401: LD_INT 1
39403: ARRAY
39404: PPUSH
39405: CALL_OW 254
39409: PPUSH
39410: LD_INT 5
39412: PPUSH
39413: CALL_OW 273
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39422: LD_VAR 0 16
39426: PUSH
39427: LD_INT 1
39429: ARRAY
39430: PPUSH
39431: LD_VAR 0 16
39435: PUSH
39436: LD_INT 2
39438: ARRAY
39439: PPUSH
39440: CALL_OW 488
39444: IFFALSE 39475
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39446: LD_VAR 0 13
39450: PPUSH
39451: LD_VAR 0 16
39455: PUSH
39456: LD_INT 1
39458: ARRAY
39459: PPUSH
39460: LD_VAR 0 16
39464: PUSH
39465: LD_INT 2
39467: ARRAY
39468: PPUSH
39469: CALL_OW 111
// continue ;
39473: GO 38965
// end ; end ; r := GetDir ( tmp ) ;
39475: LD_ADDR_VAR 0 15
39479: PUSH
39480: LD_VAR 0 13
39484: PPUSH
39485: CALL_OW 254
39489: ST_TO_ADDR
// if r = 5 then
39490: LD_VAR 0 15
39494: PUSH
39495: LD_INT 5
39497: EQUAL
39498: IFFALSE 39508
// r := 0 ;
39500: LD_ADDR_VAR 0 15
39504: PUSH
39505: LD_INT 0
39507: ST_TO_ADDR
// for j = r to 5 do
39508: LD_ADDR_VAR 0 10
39512: PUSH
39513: DOUBLE
39514: LD_VAR 0 15
39518: DEC
39519: ST_TO_ADDR
39520: LD_INT 5
39522: PUSH
39523: FOR_TO
39524: IFFALSE 39638
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39526: LD_ADDR_VAR 0 11
39530: PUSH
39531: LD_VAR 0 13
39535: PPUSH
39536: CALL_OW 250
39540: PPUSH
39541: LD_VAR 0 10
39545: PPUSH
39546: LD_INT 2
39548: PPUSH
39549: CALL_OW 272
39553: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39554: LD_ADDR_VAR 0 12
39558: PUSH
39559: LD_VAR 0 13
39563: PPUSH
39564: CALL_OW 251
39568: PPUSH
39569: LD_VAR 0 10
39573: PPUSH
39574: LD_INT 2
39576: PPUSH
39577: CALL_OW 273
39581: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39582: LD_VAR 0 11
39586: PPUSH
39587: LD_VAR 0 12
39591: PPUSH
39592: CALL_OW 488
39596: PUSH
39597: LD_VAR 0 11
39601: PPUSH
39602: LD_VAR 0 12
39606: PPUSH
39607: CALL_OW 428
39611: NOT
39612: AND
39613: IFFALSE 39636
// begin ComMoveXY ( tmp , _x , _y ) ;
39615: LD_VAR 0 13
39619: PPUSH
39620: LD_VAR 0 11
39624: PPUSH
39625: LD_VAR 0 12
39629: PPUSH
39630: CALL_OW 111
// break ;
39634: GO 39638
// end ; end ;
39636: GO 39523
39638: POP
39639: POP
// end ; end ;
39640: GO 38965
39642: POP
39643: POP
// end ;
39644: LD_VAR 0 8
39648: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39649: LD_INT 0
39651: PPUSH
// result := true ;
39652: LD_ADDR_VAR 0 3
39656: PUSH
39657: LD_INT 1
39659: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39660: LD_VAR 0 2
39664: PUSH
39665: LD_INT 24
39667: DOUBLE
39668: EQUAL
39669: IFTRUE 39679
39671: LD_INT 33
39673: DOUBLE
39674: EQUAL
39675: IFTRUE 39679
39677: GO 39704
39679: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39680: LD_ADDR_VAR 0 3
39684: PUSH
39685: LD_INT 32
39687: PPUSH
39688: LD_VAR 0 1
39692: PPUSH
39693: CALL_OW 321
39697: PUSH
39698: LD_INT 2
39700: EQUAL
39701: ST_TO_ADDR
39702: GO 40020
39704: LD_INT 20
39706: DOUBLE
39707: EQUAL
39708: IFTRUE 39712
39710: GO 39737
39712: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39713: LD_ADDR_VAR 0 3
39717: PUSH
39718: LD_INT 6
39720: PPUSH
39721: LD_VAR 0 1
39725: PPUSH
39726: CALL_OW 321
39730: PUSH
39731: LD_INT 2
39733: EQUAL
39734: ST_TO_ADDR
39735: GO 40020
39737: LD_INT 22
39739: DOUBLE
39740: EQUAL
39741: IFTRUE 39751
39743: LD_INT 36
39745: DOUBLE
39746: EQUAL
39747: IFTRUE 39751
39749: GO 39776
39751: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39752: LD_ADDR_VAR 0 3
39756: PUSH
39757: LD_INT 15
39759: PPUSH
39760: LD_VAR 0 1
39764: PPUSH
39765: CALL_OW 321
39769: PUSH
39770: LD_INT 2
39772: EQUAL
39773: ST_TO_ADDR
39774: GO 40020
39776: LD_INT 30
39778: DOUBLE
39779: EQUAL
39780: IFTRUE 39784
39782: GO 39809
39784: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39785: LD_ADDR_VAR 0 3
39789: PUSH
39790: LD_INT 20
39792: PPUSH
39793: LD_VAR 0 1
39797: PPUSH
39798: CALL_OW 321
39802: PUSH
39803: LD_INT 2
39805: EQUAL
39806: ST_TO_ADDR
39807: GO 40020
39809: LD_INT 28
39811: DOUBLE
39812: EQUAL
39813: IFTRUE 39823
39815: LD_INT 21
39817: DOUBLE
39818: EQUAL
39819: IFTRUE 39823
39821: GO 39848
39823: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39824: LD_ADDR_VAR 0 3
39828: PUSH
39829: LD_INT 21
39831: PPUSH
39832: LD_VAR 0 1
39836: PPUSH
39837: CALL_OW 321
39841: PUSH
39842: LD_INT 2
39844: EQUAL
39845: ST_TO_ADDR
39846: GO 40020
39848: LD_INT 16
39850: DOUBLE
39851: EQUAL
39852: IFTRUE 39856
39854: GO 39881
39856: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39857: LD_ADDR_VAR 0 3
39861: PUSH
39862: LD_INT 84
39864: PPUSH
39865: LD_VAR 0 1
39869: PPUSH
39870: CALL_OW 321
39874: PUSH
39875: LD_INT 2
39877: EQUAL
39878: ST_TO_ADDR
39879: GO 40020
39881: LD_INT 19
39883: DOUBLE
39884: EQUAL
39885: IFTRUE 39895
39887: LD_INT 23
39889: DOUBLE
39890: EQUAL
39891: IFTRUE 39895
39893: GO 39920
39895: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39896: LD_ADDR_VAR 0 3
39900: PUSH
39901: LD_INT 83
39903: PPUSH
39904: LD_VAR 0 1
39908: PPUSH
39909: CALL_OW 321
39913: PUSH
39914: LD_INT 2
39916: EQUAL
39917: ST_TO_ADDR
39918: GO 40020
39920: LD_INT 17
39922: DOUBLE
39923: EQUAL
39924: IFTRUE 39928
39926: GO 39953
39928: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39929: LD_ADDR_VAR 0 3
39933: PUSH
39934: LD_INT 39
39936: PPUSH
39937: LD_VAR 0 1
39941: PPUSH
39942: CALL_OW 321
39946: PUSH
39947: LD_INT 2
39949: EQUAL
39950: ST_TO_ADDR
39951: GO 40020
39953: LD_INT 18
39955: DOUBLE
39956: EQUAL
39957: IFTRUE 39961
39959: GO 39986
39961: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39962: LD_ADDR_VAR 0 3
39966: PUSH
39967: LD_INT 40
39969: PPUSH
39970: LD_VAR 0 1
39974: PPUSH
39975: CALL_OW 321
39979: PUSH
39980: LD_INT 2
39982: EQUAL
39983: ST_TO_ADDR
39984: GO 40020
39986: LD_INT 27
39988: DOUBLE
39989: EQUAL
39990: IFTRUE 39994
39992: GO 40019
39994: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39995: LD_ADDR_VAR 0 3
39999: PUSH
40000: LD_INT 35
40002: PPUSH
40003: LD_VAR 0 1
40007: PPUSH
40008: CALL_OW 321
40012: PUSH
40013: LD_INT 2
40015: EQUAL
40016: ST_TO_ADDR
40017: GO 40020
40019: POP
// end ;
40020: LD_VAR 0 3
40024: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40025: LD_INT 0
40027: PPUSH
40028: PPUSH
40029: PPUSH
40030: PPUSH
40031: PPUSH
40032: PPUSH
40033: PPUSH
40034: PPUSH
40035: PPUSH
40036: PPUSH
40037: PPUSH
// result := false ;
40038: LD_ADDR_VAR 0 6
40042: PUSH
40043: LD_INT 0
40045: ST_TO_ADDR
// if btype = b_depot then
40046: LD_VAR 0 2
40050: PUSH
40051: LD_INT 0
40053: EQUAL
40054: IFFALSE 40066
// begin result := true ;
40056: LD_ADDR_VAR 0 6
40060: PUSH
40061: LD_INT 1
40063: ST_TO_ADDR
// exit ;
40064: GO 40892
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40066: LD_VAR 0 1
40070: NOT
40071: PUSH
40072: LD_VAR 0 1
40076: PPUSH
40077: CALL_OW 266
40081: PUSH
40082: LD_INT 0
40084: PUSH
40085: LD_INT 1
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: IN
40092: NOT
40093: OR
40094: PUSH
40095: LD_VAR 0 2
40099: NOT
40100: OR
40101: PUSH
40102: LD_VAR 0 5
40106: PUSH
40107: LD_INT 0
40109: PUSH
40110: LD_INT 1
40112: PUSH
40113: LD_INT 2
40115: PUSH
40116: LD_INT 3
40118: PUSH
40119: LD_INT 4
40121: PUSH
40122: LD_INT 5
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: IN
40133: NOT
40134: OR
40135: PUSH
40136: LD_VAR 0 3
40140: PPUSH
40141: LD_VAR 0 4
40145: PPUSH
40146: CALL_OW 488
40150: NOT
40151: OR
40152: IFFALSE 40156
// exit ;
40154: GO 40892
// side := GetSide ( depot ) ;
40156: LD_ADDR_VAR 0 9
40160: PUSH
40161: LD_VAR 0 1
40165: PPUSH
40166: CALL_OW 255
40170: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40171: LD_VAR 0 9
40175: PPUSH
40176: LD_VAR 0 2
40180: PPUSH
40181: CALL 39649 0 2
40185: NOT
40186: IFFALSE 40190
// exit ;
40188: GO 40892
// pom := GetBase ( depot ) ;
40190: LD_ADDR_VAR 0 10
40194: PUSH
40195: LD_VAR 0 1
40199: PPUSH
40200: CALL_OW 274
40204: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40205: LD_ADDR_VAR 0 11
40209: PUSH
40210: LD_VAR 0 2
40214: PPUSH
40215: LD_VAR 0 1
40219: PPUSH
40220: CALL_OW 248
40224: PPUSH
40225: CALL_OW 450
40229: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40230: LD_VAR 0 10
40234: PPUSH
40235: LD_INT 1
40237: PPUSH
40238: CALL_OW 275
40242: PUSH
40243: LD_VAR 0 11
40247: PUSH
40248: LD_INT 1
40250: ARRAY
40251: GREATEREQUAL
40252: PUSH
40253: LD_VAR 0 10
40257: PPUSH
40258: LD_INT 2
40260: PPUSH
40261: CALL_OW 275
40265: PUSH
40266: LD_VAR 0 11
40270: PUSH
40271: LD_INT 2
40273: ARRAY
40274: GREATEREQUAL
40275: AND
40276: PUSH
40277: LD_VAR 0 10
40281: PPUSH
40282: LD_INT 3
40284: PPUSH
40285: CALL_OW 275
40289: PUSH
40290: LD_VAR 0 11
40294: PUSH
40295: LD_INT 3
40297: ARRAY
40298: GREATEREQUAL
40299: AND
40300: NOT
40301: IFFALSE 40305
// exit ;
40303: GO 40892
// if GetBType ( depot ) = b_depot then
40305: LD_VAR 0 1
40309: PPUSH
40310: CALL_OW 266
40314: PUSH
40315: LD_INT 0
40317: EQUAL
40318: IFFALSE 40330
// dist := 28 else
40320: LD_ADDR_VAR 0 14
40324: PUSH
40325: LD_INT 28
40327: ST_TO_ADDR
40328: GO 40338
// dist := 36 ;
40330: LD_ADDR_VAR 0 14
40334: PUSH
40335: LD_INT 36
40337: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40338: LD_VAR 0 1
40342: PPUSH
40343: LD_VAR 0 3
40347: PPUSH
40348: LD_VAR 0 4
40352: PPUSH
40353: CALL_OW 297
40357: PUSH
40358: LD_VAR 0 14
40362: GREATER
40363: IFFALSE 40367
// exit ;
40365: GO 40892
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40367: LD_ADDR_VAR 0 12
40371: PUSH
40372: LD_VAR 0 2
40376: PPUSH
40377: LD_VAR 0 3
40381: PPUSH
40382: LD_VAR 0 4
40386: PPUSH
40387: LD_VAR 0 5
40391: PPUSH
40392: LD_VAR 0 1
40396: PPUSH
40397: CALL_OW 248
40401: PPUSH
40402: LD_INT 0
40404: PPUSH
40405: CALL 40897 0 6
40409: ST_TO_ADDR
// if not hexes then
40410: LD_VAR 0 12
40414: NOT
40415: IFFALSE 40419
// exit ;
40417: GO 40892
// hex := GetHexInfo ( x , y ) ;
40419: LD_ADDR_VAR 0 15
40423: PUSH
40424: LD_VAR 0 3
40428: PPUSH
40429: LD_VAR 0 4
40433: PPUSH
40434: CALL_OW 546
40438: ST_TO_ADDR
// if hex [ 1 ] then
40439: LD_VAR 0 15
40443: PUSH
40444: LD_INT 1
40446: ARRAY
40447: IFFALSE 40451
// exit ;
40449: GO 40892
// height := hex [ 2 ] ;
40451: LD_ADDR_VAR 0 13
40455: PUSH
40456: LD_VAR 0 15
40460: PUSH
40461: LD_INT 2
40463: ARRAY
40464: ST_TO_ADDR
// for i = 1 to hexes do
40465: LD_ADDR_VAR 0 7
40469: PUSH
40470: DOUBLE
40471: LD_INT 1
40473: DEC
40474: ST_TO_ADDR
40475: LD_VAR 0 12
40479: PUSH
40480: FOR_TO
40481: IFFALSE 40811
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40483: LD_VAR 0 12
40487: PUSH
40488: LD_VAR 0 7
40492: ARRAY
40493: PUSH
40494: LD_INT 1
40496: ARRAY
40497: PPUSH
40498: LD_VAR 0 12
40502: PUSH
40503: LD_VAR 0 7
40507: ARRAY
40508: PUSH
40509: LD_INT 2
40511: ARRAY
40512: PPUSH
40513: CALL_OW 488
40517: NOT
40518: PUSH
40519: LD_VAR 0 12
40523: PUSH
40524: LD_VAR 0 7
40528: ARRAY
40529: PUSH
40530: LD_INT 1
40532: ARRAY
40533: PPUSH
40534: LD_VAR 0 12
40538: PUSH
40539: LD_VAR 0 7
40543: ARRAY
40544: PUSH
40545: LD_INT 2
40547: ARRAY
40548: PPUSH
40549: CALL_OW 428
40553: PUSH
40554: LD_INT 0
40556: GREATER
40557: OR
40558: PUSH
40559: LD_VAR 0 12
40563: PUSH
40564: LD_VAR 0 7
40568: ARRAY
40569: PUSH
40570: LD_INT 1
40572: ARRAY
40573: PPUSH
40574: LD_VAR 0 12
40578: PUSH
40579: LD_VAR 0 7
40583: ARRAY
40584: PUSH
40585: LD_INT 2
40587: ARRAY
40588: PPUSH
40589: CALL_OW 351
40593: OR
40594: IFFALSE 40600
// exit ;
40596: POP
40597: POP
40598: GO 40892
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40600: LD_ADDR_VAR 0 8
40604: PUSH
40605: LD_VAR 0 12
40609: PUSH
40610: LD_VAR 0 7
40614: ARRAY
40615: PUSH
40616: LD_INT 1
40618: ARRAY
40619: PPUSH
40620: LD_VAR 0 12
40624: PUSH
40625: LD_VAR 0 7
40629: ARRAY
40630: PUSH
40631: LD_INT 2
40633: ARRAY
40634: PPUSH
40635: CALL_OW 546
40639: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40640: LD_VAR 0 8
40644: PUSH
40645: LD_INT 1
40647: ARRAY
40648: PUSH
40649: LD_VAR 0 8
40653: PUSH
40654: LD_INT 2
40656: ARRAY
40657: PUSH
40658: LD_VAR 0 13
40662: PUSH
40663: LD_INT 2
40665: PLUS
40666: GREATER
40667: OR
40668: PUSH
40669: LD_VAR 0 8
40673: PUSH
40674: LD_INT 2
40676: ARRAY
40677: PUSH
40678: LD_VAR 0 13
40682: PUSH
40683: LD_INT 2
40685: MINUS
40686: LESS
40687: OR
40688: PUSH
40689: LD_VAR 0 8
40693: PUSH
40694: LD_INT 3
40696: ARRAY
40697: PUSH
40698: LD_INT 0
40700: PUSH
40701: LD_INT 8
40703: PUSH
40704: LD_INT 9
40706: PUSH
40707: LD_INT 10
40709: PUSH
40710: LD_INT 11
40712: PUSH
40713: LD_INT 12
40715: PUSH
40716: LD_INT 13
40718: PUSH
40719: LD_INT 16
40721: PUSH
40722: LD_INT 17
40724: PUSH
40725: LD_INT 18
40727: PUSH
40728: LD_INT 19
40730: PUSH
40731: LD_INT 20
40733: PUSH
40734: LD_INT 21
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: IN
40752: NOT
40753: OR
40754: PUSH
40755: LD_VAR 0 8
40759: PUSH
40760: LD_INT 5
40762: ARRAY
40763: NOT
40764: OR
40765: PUSH
40766: LD_VAR 0 8
40770: PUSH
40771: LD_INT 6
40773: ARRAY
40774: PUSH
40775: LD_INT 1
40777: PUSH
40778: LD_INT 2
40780: PUSH
40781: LD_INT 7
40783: PUSH
40784: LD_INT 9
40786: PUSH
40787: LD_INT 10
40789: PUSH
40790: LD_INT 11
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: IN
40801: NOT
40802: OR
40803: IFFALSE 40809
// exit ;
40805: POP
40806: POP
40807: GO 40892
// end ;
40809: GO 40480
40811: POP
40812: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40813: LD_VAR 0 9
40817: PPUSH
40818: LD_VAR 0 3
40822: PPUSH
40823: LD_VAR 0 4
40827: PPUSH
40828: LD_INT 20
40830: PPUSH
40831: CALL 32815 0 4
40835: PUSH
40836: LD_INT 4
40838: ARRAY
40839: IFFALSE 40843
// exit ;
40841: GO 40892
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40843: LD_VAR 0 2
40847: PUSH
40848: LD_INT 29
40850: PUSH
40851: LD_INT 30
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: IN
40858: PUSH
40859: LD_VAR 0 3
40863: PPUSH
40864: LD_VAR 0 4
40868: PPUSH
40869: LD_VAR 0 9
40873: PPUSH
40874: CALL_OW 440
40878: NOT
40879: AND
40880: IFFALSE 40884
// exit ;
40882: GO 40892
// result := true ;
40884: LD_ADDR_VAR 0 6
40888: PUSH
40889: LD_INT 1
40891: ST_TO_ADDR
// end ;
40892: LD_VAR 0 6
40896: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40897: LD_INT 0
40899: PPUSH
40900: PPUSH
40901: PPUSH
40902: PPUSH
40903: PPUSH
40904: PPUSH
40905: PPUSH
40906: PPUSH
40907: PPUSH
40908: PPUSH
40909: PPUSH
40910: PPUSH
40911: PPUSH
40912: PPUSH
40913: PPUSH
40914: PPUSH
40915: PPUSH
40916: PPUSH
40917: PPUSH
40918: PPUSH
40919: PPUSH
40920: PPUSH
40921: PPUSH
40922: PPUSH
40923: PPUSH
40924: PPUSH
40925: PPUSH
40926: PPUSH
40927: PPUSH
40928: PPUSH
40929: PPUSH
40930: PPUSH
40931: PPUSH
40932: PPUSH
40933: PPUSH
40934: PPUSH
40935: PPUSH
40936: PPUSH
40937: PPUSH
40938: PPUSH
40939: PPUSH
40940: PPUSH
40941: PPUSH
40942: PPUSH
40943: PPUSH
40944: PPUSH
40945: PPUSH
40946: PPUSH
40947: PPUSH
40948: PPUSH
40949: PPUSH
40950: PPUSH
40951: PPUSH
40952: PPUSH
40953: PPUSH
40954: PPUSH
40955: PPUSH
40956: PPUSH
// result = [ ] ;
40957: LD_ADDR_VAR 0 7
40961: PUSH
40962: EMPTY
40963: ST_TO_ADDR
// temp_list = [ ] ;
40964: LD_ADDR_VAR 0 9
40968: PUSH
40969: EMPTY
40970: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40971: LD_VAR 0 4
40975: PUSH
40976: LD_INT 0
40978: PUSH
40979: LD_INT 1
40981: PUSH
40982: LD_INT 2
40984: PUSH
40985: LD_INT 3
40987: PUSH
40988: LD_INT 4
40990: PUSH
40991: LD_INT 5
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: IN
41002: NOT
41003: PUSH
41004: LD_VAR 0 1
41008: PUSH
41009: LD_INT 0
41011: PUSH
41012: LD_INT 1
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: IN
41019: PUSH
41020: LD_VAR 0 5
41024: PUSH
41025: LD_INT 1
41027: PUSH
41028: LD_INT 2
41030: PUSH
41031: LD_INT 3
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: LIST
41038: IN
41039: NOT
41040: AND
41041: OR
41042: IFFALSE 41046
// exit ;
41044: GO 59437
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41046: LD_VAR 0 1
41050: PUSH
41051: LD_INT 6
41053: PUSH
41054: LD_INT 7
41056: PUSH
41057: LD_INT 8
41059: PUSH
41060: LD_INT 13
41062: PUSH
41063: LD_INT 12
41065: PUSH
41066: LD_INT 15
41068: PUSH
41069: LD_INT 11
41071: PUSH
41072: LD_INT 14
41074: PUSH
41075: LD_INT 10
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: IN
41089: IFFALSE 41099
// btype = b_lab ;
41091: LD_ADDR_VAR 0 1
41095: PUSH
41096: LD_INT 6
41098: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41099: LD_VAR 0 6
41103: PUSH
41104: LD_INT 0
41106: PUSH
41107: LD_INT 1
41109: PUSH
41110: LD_INT 2
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: LIST
41117: IN
41118: NOT
41119: PUSH
41120: LD_VAR 0 1
41124: PUSH
41125: LD_INT 0
41127: PUSH
41128: LD_INT 1
41130: PUSH
41131: LD_INT 2
41133: PUSH
41134: LD_INT 3
41136: PUSH
41137: LD_INT 6
41139: PUSH
41140: LD_INT 36
41142: PUSH
41143: LD_INT 4
41145: PUSH
41146: LD_INT 5
41148: PUSH
41149: LD_INT 31
41151: PUSH
41152: LD_INT 32
41154: PUSH
41155: LD_INT 33
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: IN
41171: NOT
41172: PUSH
41173: LD_VAR 0 6
41177: PUSH
41178: LD_INT 1
41180: EQUAL
41181: AND
41182: OR
41183: PUSH
41184: LD_VAR 0 1
41188: PUSH
41189: LD_INT 2
41191: PUSH
41192: LD_INT 3
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: IN
41199: NOT
41200: PUSH
41201: LD_VAR 0 6
41205: PUSH
41206: LD_INT 2
41208: EQUAL
41209: AND
41210: OR
41211: IFFALSE 41221
// mode = 0 ;
41213: LD_ADDR_VAR 0 6
41217: PUSH
41218: LD_INT 0
41220: ST_TO_ADDR
// case mode of 0 :
41221: LD_VAR 0 6
41225: PUSH
41226: LD_INT 0
41228: DOUBLE
41229: EQUAL
41230: IFTRUE 41234
41232: GO 52687
41234: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41235: LD_ADDR_VAR 0 11
41239: PUSH
41240: LD_INT 0
41242: PUSH
41243: LD_INT 0
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 0
41252: PUSH
41253: LD_INT 1
41255: NEG
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 1
41263: PUSH
41264: LD_INT 0
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 1
41273: PUSH
41274: LD_INT 1
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 0
41283: PUSH
41284: LD_INT 1
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 1
41293: NEG
41294: PUSH
41295: LD_INT 0
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 1
41304: NEG
41305: PUSH
41306: LD_INT 1
41308: NEG
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 1
41316: NEG
41317: PUSH
41318: LD_INT 2
41320: NEG
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 0
41328: PUSH
41329: LD_INT 2
41331: NEG
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 1
41339: PUSH
41340: LD_INT 1
41342: NEG
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 1
41350: PUSH
41351: LD_INT 2
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 0
41360: PUSH
41361: LD_INT 2
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 1
41370: NEG
41371: PUSH
41372: LD_INT 1
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 1
41381: PUSH
41382: LD_INT 3
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 0
41391: PUSH
41392: LD_INT 3
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 1
41401: NEG
41402: PUSH
41403: LD_INT 2
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41428: LD_ADDR_VAR 0 12
41432: PUSH
41433: LD_INT 0
41435: PUSH
41436: LD_INT 0
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 0
41445: PUSH
41446: LD_INT 1
41448: NEG
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 1
41456: PUSH
41457: LD_INT 0
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 1
41466: PUSH
41467: LD_INT 1
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 0
41476: PUSH
41477: LD_INT 1
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 1
41486: NEG
41487: PUSH
41488: LD_INT 0
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 1
41497: NEG
41498: PUSH
41499: LD_INT 1
41501: NEG
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 1
41509: PUSH
41510: LD_INT 1
41512: NEG
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 2
41520: PUSH
41521: LD_INT 0
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 2
41530: PUSH
41531: LD_INT 1
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 1
41540: NEG
41541: PUSH
41542: LD_INT 1
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 2
41551: NEG
41552: PUSH
41553: LD_INT 0
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 2
41562: NEG
41563: PUSH
41564: LD_INT 1
41566: NEG
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 2
41574: NEG
41575: PUSH
41576: LD_INT 1
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 3
41585: NEG
41586: PUSH
41587: LD_INT 0
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 3
41596: NEG
41597: PUSH
41598: LD_INT 1
41600: NEG
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41624: LD_ADDR_VAR 0 13
41628: PUSH
41629: LD_INT 0
41631: PUSH
41632: LD_INT 0
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 0
41641: PUSH
41642: LD_INT 1
41644: NEG
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 1
41652: PUSH
41653: LD_INT 0
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 1
41662: PUSH
41663: LD_INT 1
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 0
41672: PUSH
41673: LD_INT 1
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 1
41682: NEG
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 1
41693: NEG
41694: PUSH
41695: LD_INT 1
41697: NEG
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 1
41705: NEG
41706: PUSH
41707: LD_INT 2
41709: NEG
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 2
41717: PUSH
41718: LD_INT 1
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 2
41727: PUSH
41728: LD_INT 2
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 1
41737: PUSH
41738: LD_INT 2
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 2
41747: NEG
41748: PUSH
41749: LD_INT 1
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 2
41759: NEG
41760: PUSH
41761: LD_INT 2
41763: NEG
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 2
41771: NEG
41772: PUSH
41773: LD_INT 3
41775: NEG
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 3
41783: NEG
41784: PUSH
41785: LD_INT 2
41787: NEG
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 3
41795: NEG
41796: PUSH
41797: LD_INT 3
41799: NEG
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41823: LD_ADDR_VAR 0 14
41827: PUSH
41828: LD_INT 0
41830: PUSH
41831: LD_INT 0
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 0
41840: PUSH
41841: LD_INT 1
41843: NEG
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 1
41851: PUSH
41852: LD_INT 0
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 1
41861: PUSH
41862: LD_INT 1
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 0
41871: PUSH
41872: LD_INT 1
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 1
41881: NEG
41882: PUSH
41883: LD_INT 0
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: PUSH
41894: LD_INT 1
41896: NEG
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 1
41904: NEG
41905: PUSH
41906: LD_INT 2
41908: NEG
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 0
41916: PUSH
41917: LD_INT 2
41919: NEG
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 1
41927: PUSH
41928: LD_INT 1
41930: NEG
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 1
41938: PUSH
41939: LD_INT 2
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 0
41948: PUSH
41949: LD_INT 2
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 1
41958: NEG
41959: PUSH
41960: LD_INT 1
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 1
41969: NEG
41970: PUSH
41971: LD_INT 3
41973: NEG
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 0
41981: PUSH
41982: LD_INT 3
41984: NEG
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 1
41992: PUSH
41993: LD_INT 2
41995: NEG
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42019: LD_ADDR_VAR 0 15
42023: PUSH
42024: LD_INT 0
42026: PUSH
42027: LD_INT 0
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 0
42036: PUSH
42037: LD_INT 1
42039: NEG
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 1
42047: PUSH
42048: LD_INT 0
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 1
42057: PUSH
42058: LD_INT 1
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 0
42067: PUSH
42068: LD_INT 1
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 1
42077: NEG
42078: PUSH
42079: LD_INT 0
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 1
42088: NEG
42089: PUSH
42090: LD_INT 1
42092: NEG
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 1
42100: PUSH
42101: LD_INT 1
42103: NEG
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 2
42111: PUSH
42112: LD_INT 0
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 2
42121: PUSH
42122: LD_INT 1
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 1
42131: NEG
42132: PUSH
42133: LD_INT 1
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 2
42142: NEG
42143: PUSH
42144: LD_INT 0
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 2
42153: NEG
42154: PUSH
42155: LD_INT 1
42157: NEG
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 2
42165: PUSH
42166: LD_INT 1
42168: NEG
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 3
42176: PUSH
42177: LD_INT 0
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 3
42186: PUSH
42187: LD_INT 1
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42212: LD_ADDR_VAR 0 16
42216: PUSH
42217: LD_INT 0
42219: PUSH
42220: LD_INT 0
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 0
42229: PUSH
42230: LD_INT 1
42232: NEG
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 1
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 1
42250: PUSH
42251: LD_INT 1
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: LD_INT 1
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 1
42270: NEG
42271: PUSH
42272: LD_INT 0
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 1
42281: NEG
42282: PUSH
42283: LD_INT 1
42285: NEG
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 1
42293: NEG
42294: PUSH
42295: LD_INT 2
42297: NEG
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 2
42305: PUSH
42306: LD_INT 1
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 2
42315: PUSH
42316: LD_INT 2
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 1
42325: PUSH
42326: LD_INT 2
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 2
42335: NEG
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 2
42347: NEG
42348: PUSH
42349: LD_INT 2
42351: NEG
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 3
42359: PUSH
42360: LD_INT 2
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 3
42369: PUSH
42370: LD_INT 3
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 2
42379: PUSH
42380: LD_INT 3
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42405: LD_ADDR_VAR 0 17
42409: PUSH
42410: LD_INT 0
42412: PUSH
42413: LD_INT 0
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 0
42422: PUSH
42423: LD_INT 1
42425: NEG
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 1
42433: PUSH
42434: LD_INT 0
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 1
42443: PUSH
42444: LD_INT 1
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 0
42453: PUSH
42454: LD_INT 1
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 1
42463: NEG
42464: PUSH
42465: LD_INT 0
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 1
42474: NEG
42475: PUSH
42476: LD_INT 1
42478: NEG
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 1
42486: NEG
42487: PUSH
42488: LD_INT 2
42490: NEG
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 0
42498: PUSH
42499: LD_INT 2
42501: NEG
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 1
42509: PUSH
42510: LD_INT 1
42512: NEG
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 2
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 2
42530: PUSH
42531: LD_INT 1
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 2
42540: PUSH
42541: LD_INT 2
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 1
42550: PUSH
42551: LD_INT 2
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 0
42560: PUSH
42561: LD_INT 2
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 1
42570: NEG
42571: PUSH
42572: LD_INT 1
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 2
42581: NEG
42582: PUSH
42583: LD_INT 0
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 2
42592: NEG
42593: PUSH
42594: LD_INT 1
42596: NEG
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 2
42604: NEG
42605: PUSH
42606: LD_INT 2
42608: NEG
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42635: LD_ADDR_VAR 0 18
42639: PUSH
42640: LD_INT 0
42642: PUSH
42643: LD_INT 0
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 0
42652: PUSH
42653: LD_INT 1
42655: NEG
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 1
42663: PUSH
42664: LD_INT 0
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 1
42673: PUSH
42674: LD_INT 1
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 0
42683: PUSH
42684: LD_INT 1
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 1
42693: NEG
42694: PUSH
42695: LD_INT 0
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 1
42704: NEG
42705: PUSH
42706: LD_INT 1
42708: NEG
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 1
42716: NEG
42717: PUSH
42718: LD_INT 2
42720: NEG
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 0
42728: PUSH
42729: LD_INT 2
42731: NEG
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 1
42739: PUSH
42740: LD_INT 1
42742: NEG
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 2
42750: PUSH
42751: LD_INT 0
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 2
42760: PUSH
42761: LD_INT 1
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 2
42770: PUSH
42771: LD_INT 2
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 1
42780: PUSH
42781: LD_INT 2
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 0
42790: PUSH
42791: LD_INT 2
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 1
42800: NEG
42801: PUSH
42802: LD_INT 1
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 2
42811: NEG
42812: PUSH
42813: LD_INT 0
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 2
42822: NEG
42823: PUSH
42824: LD_INT 1
42826: NEG
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 2
42834: NEG
42835: PUSH
42836: LD_INT 2
42838: NEG
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42865: LD_ADDR_VAR 0 19
42869: PUSH
42870: LD_INT 0
42872: PUSH
42873: LD_INT 0
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 0
42882: PUSH
42883: LD_INT 1
42885: NEG
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 1
42893: PUSH
42894: LD_INT 0
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 1
42903: PUSH
42904: LD_INT 1
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 0
42913: PUSH
42914: LD_INT 1
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 1
42923: NEG
42924: PUSH
42925: LD_INT 0
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 1
42934: NEG
42935: PUSH
42936: LD_INT 1
42938: NEG
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 1
42946: NEG
42947: PUSH
42948: LD_INT 2
42950: NEG
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 0
42958: PUSH
42959: LD_INT 2
42961: NEG
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 1
42969: PUSH
42970: LD_INT 1
42972: NEG
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 2
42980: PUSH
42981: LD_INT 0
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 2
42990: PUSH
42991: LD_INT 1
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 2
43000: PUSH
43001: LD_INT 2
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 1
43010: PUSH
43011: LD_INT 2
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 0
43020: PUSH
43021: LD_INT 2
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 1
43030: NEG
43031: PUSH
43032: LD_INT 1
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 2
43041: NEG
43042: PUSH
43043: LD_INT 0
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 2
43052: NEG
43053: PUSH
43054: LD_INT 1
43056: NEG
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 2
43064: NEG
43065: PUSH
43066: LD_INT 2
43068: NEG
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43095: LD_ADDR_VAR 0 20
43099: PUSH
43100: LD_INT 0
43102: PUSH
43103: LD_INT 0
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 0
43112: PUSH
43113: LD_INT 1
43115: NEG
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 1
43123: PUSH
43124: LD_INT 0
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 1
43133: PUSH
43134: LD_INT 1
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 0
43143: PUSH
43144: LD_INT 1
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 1
43153: NEG
43154: PUSH
43155: LD_INT 0
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 1
43164: NEG
43165: PUSH
43166: LD_INT 1
43168: NEG
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 1
43176: NEG
43177: PUSH
43178: LD_INT 2
43180: NEG
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 0
43188: PUSH
43189: LD_INT 2
43191: NEG
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 1
43199: PUSH
43200: LD_INT 1
43202: NEG
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 2
43210: PUSH
43211: LD_INT 0
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 2
43220: PUSH
43221: LD_INT 1
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 2
43230: PUSH
43231: LD_INT 2
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 1
43240: PUSH
43241: LD_INT 2
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 0
43250: PUSH
43251: LD_INT 2
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 1
43260: NEG
43261: PUSH
43262: LD_INT 1
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 2
43271: NEG
43272: PUSH
43273: LD_INT 0
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 2
43282: NEG
43283: PUSH
43284: LD_INT 1
43286: NEG
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 2
43294: NEG
43295: PUSH
43296: LD_INT 2
43298: NEG
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43325: LD_ADDR_VAR 0 21
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: LD_INT 0
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 0
43342: PUSH
43343: LD_INT 1
43345: NEG
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 1
43353: PUSH
43354: LD_INT 0
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 1
43363: PUSH
43364: LD_INT 1
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 0
43373: PUSH
43374: LD_INT 1
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 1
43383: NEG
43384: PUSH
43385: LD_INT 0
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 1
43394: NEG
43395: PUSH
43396: LD_INT 1
43398: NEG
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 1
43406: NEG
43407: PUSH
43408: LD_INT 2
43410: NEG
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 0
43418: PUSH
43419: LD_INT 2
43421: NEG
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 1
43429: PUSH
43430: LD_INT 1
43432: NEG
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 2
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 2
43450: PUSH
43451: LD_INT 1
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 2
43460: PUSH
43461: LD_INT 2
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 1
43470: PUSH
43471: LD_INT 2
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 0
43480: PUSH
43481: LD_INT 2
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 1
43490: NEG
43491: PUSH
43492: LD_INT 1
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 2
43501: NEG
43502: PUSH
43503: LD_INT 0
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 2
43512: NEG
43513: PUSH
43514: LD_INT 1
43516: NEG
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 2
43524: NEG
43525: PUSH
43526: LD_INT 2
43528: NEG
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43555: LD_ADDR_VAR 0 22
43559: PUSH
43560: LD_INT 0
43562: PUSH
43563: LD_INT 0
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 0
43572: PUSH
43573: LD_INT 1
43575: NEG
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 1
43583: PUSH
43584: LD_INT 0
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 1
43593: PUSH
43594: LD_INT 1
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 0
43603: PUSH
43604: LD_INT 1
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 1
43613: NEG
43614: PUSH
43615: LD_INT 0
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 1
43624: NEG
43625: PUSH
43626: LD_INT 1
43628: NEG
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 1
43636: NEG
43637: PUSH
43638: LD_INT 2
43640: NEG
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 0
43648: PUSH
43649: LD_INT 2
43651: NEG
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 1
43659: PUSH
43660: LD_INT 1
43662: NEG
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 2
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 2
43680: PUSH
43681: LD_INT 1
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 2
43690: PUSH
43691: LD_INT 2
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 1
43700: PUSH
43701: LD_INT 2
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 0
43710: PUSH
43711: LD_INT 2
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 1
43720: NEG
43721: PUSH
43722: LD_INT 1
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 2
43731: NEG
43732: PUSH
43733: LD_INT 0
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 2
43742: NEG
43743: PUSH
43744: LD_INT 1
43746: NEG
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 2
43754: NEG
43755: PUSH
43756: LD_INT 2
43758: NEG
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43785: LD_ADDR_VAR 0 23
43789: PUSH
43790: LD_INT 0
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 0
43802: PUSH
43803: LD_INT 1
43805: NEG
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 1
43813: PUSH
43814: LD_INT 0
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 1
43823: PUSH
43824: LD_INT 1
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 0
43833: PUSH
43834: LD_INT 1
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 1
43843: NEG
43844: PUSH
43845: LD_INT 0
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 1
43854: NEG
43855: PUSH
43856: LD_INT 1
43858: NEG
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 1
43866: NEG
43867: PUSH
43868: LD_INT 2
43870: NEG
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 0
43878: PUSH
43879: LD_INT 2
43881: NEG
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 1
43889: PUSH
43890: LD_INT 1
43892: NEG
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 2
43900: PUSH
43901: LD_INT 0
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 2
43910: PUSH
43911: LD_INT 1
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 2
43920: PUSH
43921: LD_INT 2
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 1
43930: PUSH
43931: LD_INT 2
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 0
43940: PUSH
43941: LD_INT 2
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 1
43950: NEG
43951: PUSH
43952: LD_INT 1
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 2
43961: NEG
43962: PUSH
43963: LD_INT 0
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 2
43972: NEG
43973: PUSH
43974: LD_INT 1
43976: NEG
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 2
43984: NEG
43985: PUSH
43986: LD_INT 2
43988: NEG
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 2
43996: NEG
43997: PUSH
43998: LD_INT 3
44000: NEG
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 1
44008: NEG
44009: PUSH
44010: LD_INT 3
44012: NEG
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 1
44020: PUSH
44021: LD_INT 2
44023: NEG
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 2
44031: PUSH
44032: LD_INT 1
44034: NEG
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44065: LD_ADDR_VAR 0 24
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: LD_INT 1
44085: NEG
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 1
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: LD_INT 1
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 0
44113: PUSH
44114: LD_INT 1
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 1
44123: NEG
44124: PUSH
44125: LD_INT 0
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 1
44134: NEG
44135: PUSH
44136: LD_INT 1
44138: NEG
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 1
44146: NEG
44147: PUSH
44148: LD_INT 2
44150: NEG
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 0
44158: PUSH
44159: LD_INT 2
44161: NEG
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 1
44169: PUSH
44170: LD_INT 1
44172: NEG
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 2
44180: PUSH
44181: LD_INT 0
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 2
44190: PUSH
44191: LD_INT 1
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 2
44200: PUSH
44201: LD_INT 2
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 1
44210: PUSH
44211: LD_INT 2
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 0
44220: PUSH
44221: LD_INT 2
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 1
44230: NEG
44231: PUSH
44232: LD_INT 1
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 2
44241: NEG
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 2
44252: NEG
44253: PUSH
44254: LD_INT 1
44256: NEG
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 2
44264: NEG
44265: PUSH
44266: LD_INT 2
44268: NEG
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: LD_INT 2
44279: NEG
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 2
44287: PUSH
44288: LD_INT 1
44290: NEG
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 3
44298: PUSH
44299: LD_INT 1
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 3
44308: PUSH
44309: LD_INT 2
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44341: LD_ADDR_VAR 0 25
44345: PUSH
44346: LD_INT 0
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 0
44358: PUSH
44359: LD_INT 1
44361: NEG
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 1
44369: PUSH
44370: LD_INT 0
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 1
44379: PUSH
44380: LD_INT 1
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 0
44389: PUSH
44390: LD_INT 1
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 1
44399: NEG
44400: PUSH
44401: LD_INT 0
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 1
44410: NEG
44411: PUSH
44412: LD_INT 1
44414: NEG
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 1
44422: NEG
44423: PUSH
44424: LD_INT 2
44426: NEG
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 0
44434: PUSH
44435: LD_INT 2
44437: NEG
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 1
44445: PUSH
44446: LD_INT 1
44448: NEG
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 2
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 2
44466: PUSH
44467: LD_INT 1
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 2
44476: PUSH
44477: LD_INT 2
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 1
44486: PUSH
44487: LD_INT 2
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 0
44496: PUSH
44497: LD_INT 2
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 1
44506: NEG
44507: PUSH
44508: LD_INT 1
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 2
44517: NEG
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 2
44528: NEG
44529: PUSH
44530: LD_INT 1
44532: NEG
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 2
44540: NEG
44541: PUSH
44542: LD_INT 2
44544: NEG
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 3
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 3
44562: PUSH
44563: LD_INT 2
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 2
44572: PUSH
44573: LD_INT 3
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 1
44582: PUSH
44583: LD_INT 3
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44615: LD_ADDR_VAR 0 26
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: LD_INT 0
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 0
44632: PUSH
44633: LD_INT 1
44635: NEG
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 1
44643: PUSH
44644: LD_INT 0
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 1
44653: PUSH
44654: LD_INT 1
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 0
44663: PUSH
44664: LD_INT 1
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 1
44673: NEG
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 1
44684: NEG
44685: PUSH
44686: LD_INT 1
44688: NEG
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 1
44696: NEG
44697: PUSH
44698: LD_INT 2
44700: NEG
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 0
44708: PUSH
44709: LD_INT 2
44711: NEG
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 1
44719: PUSH
44720: LD_INT 1
44722: NEG
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 2
44730: PUSH
44731: LD_INT 0
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 2
44740: PUSH
44741: LD_INT 1
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 2
44750: PUSH
44751: LD_INT 2
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 1
44760: PUSH
44761: LD_INT 2
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 0
44770: PUSH
44771: LD_INT 2
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 1
44780: NEG
44781: PUSH
44782: LD_INT 1
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 2
44791: NEG
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 2
44802: NEG
44803: PUSH
44804: LD_INT 1
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 2
44814: NEG
44815: PUSH
44816: LD_INT 2
44818: NEG
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 2
44826: PUSH
44827: LD_INT 3
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 1
44836: PUSH
44837: LD_INT 3
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 1
44846: NEG
44847: PUSH
44848: LD_INT 2
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 2
44857: NEG
44858: PUSH
44859: LD_INT 1
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44891: LD_ADDR_VAR 0 27
44895: PUSH
44896: LD_INT 0
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 0
44908: PUSH
44909: LD_INT 1
44911: NEG
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 1
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 1
44929: PUSH
44930: LD_INT 1
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 0
44939: PUSH
44940: LD_INT 1
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 1
44949: NEG
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 1
44960: NEG
44961: PUSH
44962: LD_INT 1
44964: NEG
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 1
44972: NEG
44973: PUSH
44974: LD_INT 2
44976: NEG
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: LD_INT 2
44987: NEG
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 1
44995: PUSH
44996: LD_INT 1
44998: NEG
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 2
45006: PUSH
45007: LD_INT 0
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 2
45016: PUSH
45017: LD_INT 1
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 2
45026: PUSH
45027: LD_INT 2
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 1
45036: PUSH
45037: LD_INT 2
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 0
45046: PUSH
45047: LD_INT 2
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 1
45056: NEG
45057: PUSH
45058: LD_INT 1
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 2
45067: NEG
45068: PUSH
45069: LD_INT 0
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 2
45078: NEG
45079: PUSH
45080: LD_INT 1
45082: NEG
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 2
45090: NEG
45091: PUSH
45092: LD_INT 2
45094: NEG
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 1
45102: NEG
45103: PUSH
45104: LD_INT 2
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 2
45113: NEG
45114: PUSH
45115: LD_INT 1
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 3
45124: NEG
45125: PUSH
45126: LD_INT 1
45128: NEG
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 3
45136: NEG
45137: PUSH
45138: LD_INT 2
45140: NEG
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45171: LD_ADDR_VAR 0 28
45175: PUSH
45176: LD_INT 0
45178: PUSH
45179: LD_INT 0
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 0
45188: PUSH
45189: LD_INT 1
45191: NEG
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 1
45199: PUSH
45200: LD_INT 0
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 1
45209: PUSH
45210: LD_INT 1
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: LD_INT 1
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 1
45229: NEG
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 1
45240: NEG
45241: PUSH
45242: LD_INT 1
45244: NEG
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: LD_INT 2
45256: NEG
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 0
45264: PUSH
45265: LD_INT 2
45267: NEG
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 1
45275: PUSH
45276: LD_INT 1
45278: NEG
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 2
45286: PUSH
45287: LD_INT 0
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 2
45296: PUSH
45297: LD_INT 1
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 2
45306: PUSH
45307: LD_INT 2
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 1
45316: PUSH
45317: LD_INT 2
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: LD_INT 2
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 1
45336: NEG
45337: PUSH
45338: LD_INT 1
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 2
45347: NEG
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 2
45358: NEG
45359: PUSH
45360: LD_INT 1
45362: NEG
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 2
45370: NEG
45371: PUSH
45372: LD_INT 2
45374: NEG
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 2
45382: NEG
45383: PUSH
45384: LD_INT 3
45386: NEG
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 1
45394: NEG
45395: PUSH
45396: LD_INT 3
45398: NEG
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 3
45406: NEG
45407: PUSH
45408: LD_INT 1
45410: NEG
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 3
45418: NEG
45419: PUSH
45420: LD_INT 2
45422: NEG
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45453: LD_ADDR_VAR 0 29
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 0
45470: PUSH
45471: LD_INT 1
45473: NEG
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 1
45481: PUSH
45482: LD_INT 0
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 1
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 0
45501: PUSH
45502: LD_INT 1
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 1
45511: NEG
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 1
45522: NEG
45523: PUSH
45524: LD_INT 1
45526: NEG
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 1
45534: NEG
45535: PUSH
45536: LD_INT 2
45538: NEG
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 0
45546: PUSH
45547: LD_INT 2
45549: NEG
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 1
45557: PUSH
45558: LD_INT 1
45560: NEG
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 2
45568: PUSH
45569: LD_INT 0
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 2
45578: PUSH
45579: LD_INT 1
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 1
45588: PUSH
45589: LD_INT 2
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 0
45598: PUSH
45599: LD_INT 2
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 1
45608: NEG
45609: PUSH
45610: LD_INT 1
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 2
45619: NEG
45620: PUSH
45621: LD_INT 1
45623: NEG
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 2
45631: NEG
45632: PUSH
45633: LD_INT 2
45635: NEG
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 2
45643: NEG
45644: PUSH
45645: LD_INT 3
45647: NEG
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 2
45655: PUSH
45656: LD_INT 1
45658: NEG
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 3
45666: PUSH
45667: LD_INT 1
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 1
45676: PUSH
45677: LD_INT 3
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 1
45686: NEG
45687: PUSH
45688: LD_INT 2
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 3
45697: NEG
45698: PUSH
45699: LD_INT 2
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45732: LD_ADDR_VAR 0 30
45736: PUSH
45737: LD_INT 0
45739: PUSH
45740: LD_INT 0
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 0
45749: PUSH
45750: LD_INT 1
45752: NEG
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: LD_INT 0
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: LD_INT 1
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 0
45780: PUSH
45781: LD_INT 1
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 1
45790: NEG
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 1
45801: NEG
45802: PUSH
45803: LD_INT 1
45805: NEG
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 1
45813: NEG
45814: PUSH
45815: LD_INT 2
45817: NEG
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: LD_INT 2
45828: NEG
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 1
45836: PUSH
45837: LD_INT 1
45839: NEG
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 2
45847: PUSH
45848: LD_INT 0
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 2
45857: PUSH
45858: LD_INT 1
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 2
45867: PUSH
45868: LD_INT 2
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 1
45877: PUSH
45878: LD_INT 2
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 1
45887: NEG
45888: PUSH
45889: LD_INT 1
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 2
45898: NEG
45899: PUSH
45900: LD_INT 0
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 2
45909: NEG
45910: PUSH
45911: LD_INT 1
45913: NEG
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 1
45921: NEG
45922: PUSH
45923: LD_INT 3
45925: NEG
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 1
45933: PUSH
45934: LD_INT 2
45936: NEG
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 3
45944: PUSH
45945: LD_INT 2
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 2
45954: PUSH
45955: LD_INT 3
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 2
45964: NEG
45965: PUSH
45966: LD_INT 1
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 3
45975: NEG
45976: PUSH
45977: LD_INT 1
45979: NEG
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46010: LD_ADDR_VAR 0 31
46014: PUSH
46015: LD_INT 0
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 0
46027: PUSH
46028: LD_INT 1
46030: NEG
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 1
46038: PUSH
46039: LD_INT 0
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: LD_INT 1
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: LD_INT 1
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 1
46068: NEG
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: LD_INT 1
46083: NEG
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 1
46091: NEG
46092: PUSH
46093: LD_INT 2
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: LD_INT 1
46106: NEG
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 2
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 2
46124: PUSH
46125: LD_INT 1
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 2
46134: PUSH
46135: LD_INT 2
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 1
46144: PUSH
46145: LD_INT 2
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 0
46154: PUSH
46155: LD_INT 2
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 2
46175: NEG
46176: PUSH
46177: LD_INT 1
46179: NEG
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 2
46187: NEG
46188: PUSH
46189: LD_INT 2
46191: NEG
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 2
46199: NEG
46200: PUSH
46201: LD_INT 3
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 2
46211: PUSH
46212: LD_INT 1
46214: NEG
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 3
46222: PUSH
46223: LD_INT 1
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 1
46232: PUSH
46233: LD_INT 3
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: LD_INT 2
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 3
46253: NEG
46254: PUSH
46255: LD_INT 2
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46288: LD_ADDR_VAR 0 32
46292: PUSH
46293: LD_INT 0
46295: PUSH
46296: LD_INT 0
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 0
46305: PUSH
46306: LD_INT 1
46308: NEG
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 1
46316: PUSH
46317: LD_INT 0
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: LD_INT 1
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: LD_INT 1
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 1
46346: NEG
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 1
46357: NEG
46358: PUSH
46359: LD_INT 1
46361: NEG
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 1
46369: NEG
46370: PUSH
46371: LD_INT 2
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 0
46381: PUSH
46382: LD_INT 2
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: PUSH
46393: LD_INT 1
46395: NEG
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 2
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 2
46413: PUSH
46414: LD_INT 2
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: PUSH
46424: LD_INT 2
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 0
46433: PUSH
46434: LD_INT 2
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 1
46443: NEG
46444: PUSH
46445: LD_INT 1
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 2
46454: NEG
46455: PUSH
46456: LD_INT 0
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 2
46465: NEG
46466: PUSH
46467: LD_INT 1
46469: NEG
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 1
46477: NEG
46478: PUSH
46479: LD_INT 3
46481: NEG
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 1
46489: PUSH
46490: LD_INT 2
46492: NEG
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 3
46500: PUSH
46501: LD_INT 2
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 2
46510: PUSH
46511: LD_INT 3
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 2
46520: NEG
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 3
46531: NEG
46532: PUSH
46533: LD_INT 1
46535: NEG
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46566: LD_ADDR_VAR 0 33
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: LD_INT 1
46586: NEG
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 0
46614: PUSH
46615: LD_INT 1
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 1
46624: NEG
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 1
46635: NEG
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: NEG
46648: PUSH
46649: LD_INT 2
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: LD_INT 1
46662: NEG
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 2
46670: PUSH
46671: LD_INT 0
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 2
46680: PUSH
46681: LD_INT 1
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: LD_INT 2
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 0
46700: PUSH
46701: LD_INT 2
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 1
46710: NEG
46711: PUSH
46712: LD_INT 1
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 2
46721: NEG
46722: PUSH
46723: LD_INT 0
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 2
46732: NEG
46733: PUSH
46734: LD_INT 1
46736: NEG
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 2
46744: NEG
46745: PUSH
46746: LD_INT 2
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 2
46756: NEG
46757: PUSH
46758: LD_INT 3
46760: NEG
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 2
46768: PUSH
46769: LD_INT 1
46771: NEG
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 3
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 1
46789: PUSH
46790: LD_INT 3
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 1
46799: NEG
46800: PUSH
46801: LD_INT 2
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 3
46810: NEG
46811: PUSH
46812: LD_INT 2
46814: NEG
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46845: LD_ADDR_VAR 0 34
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 0
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 1
46873: PUSH
46874: LD_INT 0
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 1
46883: PUSH
46884: LD_INT 1
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 0
46893: PUSH
46894: LD_INT 1
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 1
46903: NEG
46904: PUSH
46905: LD_INT 0
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 1
46914: NEG
46915: PUSH
46916: LD_INT 1
46918: NEG
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 1
46926: NEG
46927: PUSH
46928: LD_INT 2
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 0
46938: PUSH
46939: LD_INT 2
46941: NEG
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 1
46949: PUSH
46950: LD_INT 1
46952: NEG
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 2
46960: PUSH
46961: LD_INT 1
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 2
46970: PUSH
46971: LD_INT 2
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 1
46980: PUSH
46981: LD_INT 2
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 1
46990: NEG
46991: PUSH
46992: LD_INT 1
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 2
47001: NEG
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 2
47012: NEG
47013: PUSH
47014: LD_INT 1
47016: NEG
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 2
47024: NEG
47025: PUSH
47026: LD_INT 2
47028: NEG
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 1
47036: NEG
47037: PUSH
47038: LD_INT 3
47040: NEG
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 1
47048: PUSH
47049: LD_INT 2
47051: NEG
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 3
47059: PUSH
47060: LD_INT 2
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 2
47069: PUSH
47070: LD_INT 3
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 2
47079: NEG
47080: PUSH
47081: LD_INT 1
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 3
47090: NEG
47091: PUSH
47092: LD_INT 1
47094: NEG
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47125: LD_ADDR_VAR 0 35
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: LD_INT 0
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 0
47142: PUSH
47143: LD_INT 1
47145: NEG
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 1
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 1
47163: PUSH
47164: LD_INT 1
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 0
47173: PUSH
47174: LD_INT 1
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 1
47194: NEG
47195: PUSH
47196: LD_INT 1
47198: NEG
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 2
47206: PUSH
47207: LD_INT 1
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 2
47216: NEG
47217: PUSH
47218: LD_INT 1
47220: NEG
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47237: LD_ADDR_VAR 0 36
47241: PUSH
47242: LD_INT 0
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 0
47254: PUSH
47255: LD_INT 1
47257: NEG
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 1
47265: PUSH
47266: LD_INT 0
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 1
47275: PUSH
47276: LD_INT 1
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 0
47285: PUSH
47286: LD_INT 1
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 1
47295: NEG
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 1
47306: NEG
47307: PUSH
47308: LD_INT 1
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 1
47318: NEG
47319: PUSH
47320: LD_INT 2
47322: NEG
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 1
47330: PUSH
47331: LD_INT 2
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47349: LD_ADDR_VAR 0 37
47353: PUSH
47354: LD_INT 0
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 0
47366: PUSH
47367: LD_INT 1
47369: NEG
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 1
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 1
47387: PUSH
47388: LD_INT 1
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 1
47407: NEG
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 1
47418: NEG
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 1
47430: PUSH
47431: LD_INT 1
47433: NEG
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 1
47441: NEG
47442: PUSH
47443: LD_INT 1
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47461: LD_ADDR_VAR 0 38
47465: PUSH
47466: LD_INT 0
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: LD_INT 1
47481: NEG
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 1
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 1
47499: PUSH
47500: LD_INT 1
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 0
47509: PUSH
47510: LD_INT 1
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 1
47519: NEG
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: LD_INT 1
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 2
47542: PUSH
47543: LD_INT 1
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 2
47552: NEG
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47573: LD_ADDR_VAR 0 39
47577: PUSH
47578: LD_INT 0
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 0
47590: PUSH
47591: LD_INT 1
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 1
47601: PUSH
47602: LD_INT 0
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 1
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 0
47621: PUSH
47622: LD_INT 1
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 1
47631: NEG
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: PUSH
47644: LD_INT 1
47646: NEG
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 1
47654: NEG
47655: PUSH
47656: LD_INT 2
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 1
47666: PUSH
47667: LD_INT 2
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47685: LD_ADDR_VAR 0 40
47689: PUSH
47690: LD_INT 0
47692: PUSH
47693: LD_INT 0
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 0
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 1
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 1
47723: PUSH
47724: LD_INT 1
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 0
47733: PUSH
47734: LD_INT 1
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 1
47743: NEG
47744: PUSH
47745: LD_INT 0
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 1
47754: NEG
47755: PUSH
47756: LD_INT 1
47758: NEG
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 1
47766: PUSH
47767: LD_INT 1
47769: NEG
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 1
47777: NEG
47778: PUSH
47779: LD_INT 1
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47797: LD_ADDR_VAR 0 41
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 0
47814: PUSH
47815: LD_INT 1
47817: NEG
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 1
47825: PUSH
47826: LD_INT 0
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: LD_INT 1
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 0
47845: PUSH
47846: LD_INT 1
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 1
47855: NEG
47856: PUSH
47857: LD_INT 0
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 1
47866: NEG
47867: PUSH
47868: LD_INT 1
47870: NEG
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 1
47878: NEG
47879: PUSH
47880: LD_INT 2
47882: NEG
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: LD_INT 1
47893: NEG
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 2
47901: PUSH
47902: LD_INT 0
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 2
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 2
47921: PUSH
47922: LD_INT 2
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 1
47931: PUSH
47932: LD_INT 2
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: LD_INT 1
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 2
47952: NEG
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 2
47963: NEG
47964: PUSH
47965: LD_INT 1
47967: NEG
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 2
47975: NEG
47976: PUSH
47977: LD_INT 2
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 2
47987: NEG
47988: PUSH
47989: LD_INT 3
47991: NEG
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 2
47999: PUSH
48000: LD_INT 1
48002: NEG
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 3
48010: PUSH
48011: LD_INT 0
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 3
48020: PUSH
48021: LD_INT 1
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 3
48030: PUSH
48031: LD_INT 2
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 3
48040: PUSH
48041: LD_INT 3
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 2
48050: PUSH
48051: LD_INT 3
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 2
48060: NEG
48061: PUSH
48062: LD_INT 1
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 3
48071: NEG
48072: PUSH
48073: LD_INT 0
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 3
48082: NEG
48083: PUSH
48084: LD_INT 1
48086: NEG
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 3
48094: NEG
48095: PUSH
48096: LD_INT 2
48098: NEG
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 3
48106: NEG
48107: PUSH
48108: LD_INT 3
48110: NEG
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48147: LD_ADDR_VAR 0 42
48151: PUSH
48152: LD_INT 0
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 0
48164: PUSH
48165: LD_INT 1
48167: NEG
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: LD_INT 0
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 1
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 0
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 1
48205: NEG
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 1
48216: NEG
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 1
48228: NEG
48229: PUSH
48230: LD_INT 2
48232: NEG
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: LD_INT 2
48243: NEG
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 1
48251: PUSH
48252: LD_INT 1
48254: NEG
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 2
48262: PUSH
48263: LD_INT 1
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 2
48272: PUSH
48273: LD_INT 2
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 1
48282: PUSH
48283: LD_INT 2
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 0
48292: PUSH
48293: LD_INT 2
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 1
48302: NEG
48303: PUSH
48304: LD_INT 1
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 2
48313: NEG
48314: PUSH
48315: LD_INT 1
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 2
48325: NEG
48326: PUSH
48327: LD_INT 2
48329: NEG
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 2
48337: NEG
48338: PUSH
48339: LD_INT 3
48341: NEG
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 1
48349: NEG
48350: PUSH
48351: LD_INT 3
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 0
48361: PUSH
48362: LD_INT 3
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 1
48372: PUSH
48373: LD_INT 2
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 3
48383: PUSH
48384: LD_INT 2
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 3
48393: PUSH
48394: LD_INT 3
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 2
48403: PUSH
48404: LD_INT 3
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 1
48413: PUSH
48414: LD_INT 3
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 0
48423: PUSH
48424: LD_INT 3
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 1
48433: NEG
48434: PUSH
48435: LD_INT 2
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 3
48444: NEG
48445: PUSH
48446: LD_INT 2
48448: NEG
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 3
48456: NEG
48457: PUSH
48458: LD_INT 3
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48497: LD_ADDR_VAR 0 43
48501: PUSH
48502: LD_INT 0
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: LD_INT 1
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: LD_INT 0
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 1
48535: PUSH
48536: LD_INT 1
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 1
48566: NEG
48567: PUSH
48568: LD_INT 1
48570: NEG
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 1
48578: NEG
48579: PUSH
48580: LD_INT 2
48582: NEG
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: LD_INT 2
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 1
48601: PUSH
48602: LD_INT 1
48604: NEG
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 2
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 2
48622: PUSH
48623: LD_INT 1
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 1
48632: PUSH
48633: LD_INT 2
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: LD_INT 2
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: LD_INT 1
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 2
48663: NEG
48664: PUSH
48665: LD_INT 0
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 2
48674: NEG
48675: PUSH
48676: LD_INT 1
48678: NEG
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 1
48686: NEG
48687: PUSH
48688: LD_INT 3
48690: NEG
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 0
48698: PUSH
48699: LD_INT 3
48701: NEG
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: PUSH
48710: LD_INT 2
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 2
48720: PUSH
48721: LD_INT 1
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 3
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 3
48741: PUSH
48742: LD_INT 1
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 1
48751: PUSH
48752: LD_INT 3
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 0
48761: PUSH
48762: LD_INT 3
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 1
48771: NEG
48772: PUSH
48773: LD_INT 2
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 2
48782: NEG
48783: PUSH
48784: LD_INT 1
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 3
48793: NEG
48794: PUSH
48795: LD_INT 0
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 3
48804: NEG
48805: PUSH
48806: LD_INT 1
48808: NEG
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48845: LD_ADDR_VAR 0 44
48849: PUSH
48850: LD_INT 0
48852: PUSH
48853: LD_INT 0
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 0
48862: PUSH
48863: LD_INT 1
48865: NEG
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 1
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 1
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 0
48893: PUSH
48894: LD_INT 1
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 1
48903: NEG
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 1
48914: NEG
48915: PUSH
48916: LD_INT 1
48918: NEG
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 1
48926: NEG
48927: PUSH
48928: LD_INT 2
48930: NEG
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 1
48938: PUSH
48939: LD_INT 1
48941: NEG
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 2
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 2
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 2
48969: PUSH
48970: LD_INT 2
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 1
48979: PUSH
48980: LD_INT 2
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 1
48989: NEG
48990: PUSH
48991: LD_INT 1
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 2
49000: NEG
49001: PUSH
49002: LD_INT 0
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 2
49011: NEG
49012: PUSH
49013: LD_INT 1
49015: NEG
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 2
49023: NEG
49024: PUSH
49025: LD_INT 2
49027: NEG
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 2
49035: NEG
49036: PUSH
49037: LD_INT 3
49039: NEG
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 2
49047: PUSH
49048: LD_INT 1
49050: NEG
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 3
49058: PUSH
49059: LD_INT 0
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 3
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 3
49078: PUSH
49079: LD_INT 2
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 3
49088: PUSH
49089: LD_INT 3
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 2
49098: PUSH
49099: LD_INT 3
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 2
49108: NEG
49109: PUSH
49110: LD_INT 1
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 3
49119: NEG
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 3
49130: NEG
49131: PUSH
49132: LD_INT 1
49134: NEG
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 3
49142: NEG
49143: PUSH
49144: LD_INT 2
49146: NEG
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 3
49154: NEG
49155: PUSH
49156: LD_INT 3
49158: NEG
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49195: LD_ADDR_VAR 0 45
49199: PUSH
49200: LD_INT 0
49202: PUSH
49203: LD_INT 0
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 0
49212: PUSH
49213: LD_INT 1
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 1
49223: PUSH
49224: LD_INT 0
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 1
49233: PUSH
49234: LD_INT 1
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 0
49243: PUSH
49244: LD_INT 1
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 1
49253: NEG
49254: PUSH
49255: LD_INT 0
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 1
49264: NEG
49265: PUSH
49266: LD_INT 1
49268: NEG
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: NEG
49277: PUSH
49278: LD_INT 2
49280: NEG
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 0
49288: PUSH
49289: LD_INT 2
49291: NEG
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: LD_INT 1
49302: NEG
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 2
49310: PUSH
49311: LD_INT 1
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 2
49320: PUSH
49321: LD_INT 2
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: LD_INT 2
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 0
49340: PUSH
49341: LD_INT 2
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 1
49350: NEG
49351: PUSH
49352: LD_INT 1
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 2
49361: NEG
49362: PUSH
49363: LD_INT 1
49365: NEG
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 2
49373: NEG
49374: PUSH
49375: LD_INT 2
49377: NEG
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 2
49385: NEG
49386: PUSH
49387: LD_INT 3
49389: NEG
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 1
49397: NEG
49398: PUSH
49399: LD_INT 3
49401: NEG
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: LD_INT 3
49412: NEG
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 1
49420: PUSH
49421: LD_INT 2
49423: NEG
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 3
49431: PUSH
49432: LD_INT 2
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 3
49441: PUSH
49442: LD_INT 3
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 2
49451: PUSH
49452: LD_INT 3
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 1
49461: PUSH
49462: LD_INT 3
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 0
49471: PUSH
49472: LD_INT 3
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 1
49481: NEG
49482: PUSH
49483: LD_INT 2
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 3
49492: NEG
49493: PUSH
49494: LD_INT 2
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 3
49504: NEG
49505: PUSH
49506: LD_INT 3
49508: NEG
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49545: LD_ADDR_VAR 0 46
49549: PUSH
49550: LD_INT 0
49552: PUSH
49553: LD_INT 0
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: LD_INT 1
49565: NEG
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 1
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: PUSH
49584: LD_INT 1
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 0
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 1
49603: NEG
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 1
49626: NEG
49627: PUSH
49628: LD_INT 2
49630: NEG
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: LD_INT 2
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 1
49649: PUSH
49650: LD_INT 1
49652: NEG
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 2
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 2
49670: PUSH
49671: LD_INT 1
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 1
49680: PUSH
49681: LD_INT 2
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 0
49690: PUSH
49691: LD_INT 2
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: LD_INT 1
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 2
49711: NEG
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 2
49722: NEG
49723: PUSH
49724: LD_INT 1
49726: NEG
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 1
49734: NEG
49735: PUSH
49736: LD_INT 3
49738: NEG
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: LD_INT 3
49749: NEG
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 1
49757: PUSH
49758: LD_INT 2
49760: NEG
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 2
49768: PUSH
49769: LD_INT 1
49771: NEG
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 3
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 3
49789: PUSH
49790: LD_INT 1
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 1
49799: PUSH
49800: LD_INT 3
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 0
49809: PUSH
49810: LD_INT 3
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 1
49819: NEG
49820: PUSH
49821: LD_INT 2
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 2
49830: NEG
49831: PUSH
49832: LD_INT 1
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 3
49841: NEG
49842: PUSH
49843: LD_INT 0
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 3
49852: NEG
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49893: LD_ADDR_VAR 0 47
49897: PUSH
49898: LD_INT 0
49900: PUSH
49901: LD_INT 0
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 0
49910: PUSH
49911: LD_INT 1
49913: NEG
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 1
49921: PUSH
49922: LD_INT 0
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 1
49931: PUSH
49932: LD_INT 1
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 0
49941: PUSH
49942: LD_INT 1
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 1
49951: NEG
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 1
49962: NEG
49963: PUSH
49964: LD_INT 1
49966: NEG
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 1
49974: NEG
49975: PUSH
49976: LD_INT 2
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: LD_INT 2
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 1
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 2
50008: NEG
50009: PUSH
50010: LD_INT 1
50012: NEG
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 2
50020: NEG
50021: PUSH
50022: LD_INT 2
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50044: LD_ADDR_VAR 0 48
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: LD_INT 0
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 0
50061: PUSH
50062: LD_INT 1
50064: NEG
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 1
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 1
50082: PUSH
50083: LD_INT 1
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 0
50092: PUSH
50093: LD_INT 1
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 1
50102: NEG
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: LD_INT 1
50117: NEG
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 1
50125: NEG
50126: PUSH
50127: LD_INT 2
50129: NEG
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 0
50137: PUSH
50138: LD_INT 2
50140: NEG
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 1
50148: PUSH
50149: LD_INT 1
50151: NEG
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 2
50159: PUSH
50160: LD_INT 0
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 2
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50191: LD_ADDR_VAR 0 49
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: LD_INT 0
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 0
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: LD_INT 0
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 1
50229: PUSH
50230: LD_INT 1
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 0
50239: PUSH
50240: LD_INT 1
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 1
50249: NEG
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 1
50260: NEG
50261: PUSH
50262: LD_INT 1
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 1
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 2
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 2
50293: PUSH
50294: LD_INT 1
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 2
50303: PUSH
50304: LD_INT 2
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: PUSH
50314: LD_INT 2
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50335: LD_ADDR_VAR 0 50
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 0
50352: PUSH
50353: LD_INT 1
50355: NEG
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 1
50363: PUSH
50364: LD_INT 0
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: LD_INT 1
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 1
50393: NEG
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 1
50404: NEG
50405: PUSH
50406: LD_INT 1
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 2
50416: PUSH
50417: LD_INT 1
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 2
50426: PUSH
50427: LD_INT 2
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 1
50436: PUSH
50437: LD_INT 2
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 0
50446: PUSH
50447: LD_INT 2
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 1
50456: NEG
50457: PUSH
50458: LD_INT 1
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50479: LD_ADDR_VAR 0 51
50483: PUSH
50484: LD_INT 0
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: LD_INT 1
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: LD_INT 0
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 1
50517: PUSH
50518: LD_INT 1
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 0
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 1
50537: NEG
50538: PUSH
50539: LD_INT 0
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: LD_INT 1
50552: NEG
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 1
50560: PUSH
50561: LD_INT 2
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: LD_INT 2
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 1
50580: NEG
50581: PUSH
50582: LD_INT 1
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 2
50591: NEG
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 2
50602: NEG
50603: PUSH
50604: LD_INT 1
50606: NEG
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50626: LD_ADDR_VAR 0 52
50630: PUSH
50631: LD_INT 0
50633: PUSH
50634: LD_INT 0
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 0
50643: PUSH
50644: LD_INT 1
50646: NEG
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 1
50654: PUSH
50655: LD_INT 0
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 1
50664: PUSH
50665: LD_INT 1
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 0
50674: PUSH
50675: LD_INT 1
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 1
50684: NEG
50685: PUSH
50686: LD_INT 0
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 1
50695: NEG
50696: PUSH
50697: LD_INT 1
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 1
50707: NEG
50708: PUSH
50709: LD_INT 2
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: NEG
50720: PUSH
50721: LD_INT 1
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 2
50730: NEG
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 2
50741: NEG
50742: PUSH
50743: LD_INT 1
50745: NEG
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 2
50753: NEG
50754: PUSH
50755: LD_INT 2
50757: NEG
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50777: LD_ADDR_VAR 0 53
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 1
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 1
50815: PUSH
50816: LD_INT 1
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 0
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 1
50835: NEG
50836: PUSH
50837: LD_INT 0
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 1
50846: NEG
50847: PUSH
50848: LD_INT 1
50850: NEG
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 1
50858: NEG
50859: PUSH
50860: LD_INT 2
50862: NEG
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: LD_INT 2
50873: NEG
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 1
50881: PUSH
50882: LD_INT 1
50884: NEG
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 2
50892: PUSH
50893: LD_INT 0
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 2
50902: PUSH
50903: LD_INT 1
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 2
50912: PUSH
50913: LD_INT 2
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 1
50922: PUSH
50923: LD_INT 2
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 0
50932: PUSH
50933: LD_INT 2
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 1
50942: NEG
50943: PUSH
50944: LD_INT 1
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 2
50953: NEG
50954: PUSH
50955: LD_INT 0
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 2
50964: NEG
50965: PUSH
50966: LD_INT 1
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 2
50976: NEG
50977: PUSH
50978: LD_INT 2
50980: NEG
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51007: LD_ADDR_VAR 0 54
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 0
51024: PUSH
51025: LD_INT 1
51027: NEG
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 1
51035: PUSH
51036: LD_INT 0
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 1
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 1
51065: NEG
51066: PUSH
51067: LD_INT 0
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 1
51076: NEG
51077: PUSH
51078: LD_INT 1
51080: NEG
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 1
51088: NEG
51089: PUSH
51090: LD_INT 2
51092: NEG
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: LD_INT 2
51103: NEG
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 1
51111: PUSH
51112: LD_INT 1
51114: NEG
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 2
51122: PUSH
51123: LD_INT 0
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 2
51132: PUSH
51133: LD_INT 1
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 2
51142: PUSH
51143: LD_INT 2
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 1
51152: PUSH
51153: LD_INT 2
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 0
51162: PUSH
51163: LD_INT 2
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 1
51172: NEG
51173: PUSH
51174: LD_INT 1
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 2
51183: NEG
51184: PUSH
51185: LD_INT 0
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 2
51194: NEG
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 2
51206: NEG
51207: PUSH
51208: LD_INT 2
51210: NEG
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51237: LD_ADDR_VAR 0 55
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: LD_INT 0
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: LD_INT 1
51257: NEG
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: LD_INT 0
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: LD_INT 1
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: LD_INT 1
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 1
51295: NEG
51296: PUSH
51297: LD_INT 0
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 1
51306: NEG
51307: PUSH
51308: LD_INT 1
51310: NEG
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 1
51318: NEG
51319: PUSH
51320: LD_INT 2
51322: NEG
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: LD_INT 2
51333: NEG
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 1
51341: PUSH
51342: LD_INT 1
51344: NEG
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 2
51352: PUSH
51353: LD_INT 0
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 2
51362: PUSH
51363: LD_INT 1
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 2
51372: PUSH
51373: LD_INT 2
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 1
51382: PUSH
51383: LD_INT 2
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: LD_INT 2
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 1
51402: NEG
51403: PUSH
51404: LD_INT 1
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 2
51413: NEG
51414: PUSH
51415: LD_INT 0
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 2
51424: NEG
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 2
51436: NEG
51437: PUSH
51438: LD_INT 2
51440: NEG
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51467: LD_ADDR_VAR 0 56
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: LD_INT 0
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 0
51484: PUSH
51485: LD_INT 1
51487: NEG
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 1
51495: PUSH
51496: LD_INT 0
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: LD_INT 1
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 1
51525: NEG
51526: PUSH
51527: LD_INT 0
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: NEG
51537: PUSH
51538: LD_INT 1
51540: NEG
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 1
51548: NEG
51549: PUSH
51550: LD_INT 2
51552: NEG
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: LD_INT 2
51563: NEG
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 1
51571: PUSH
51572: LD_INT 1
51574: NEG
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 2
51582: PUSH
51583: LD_INT 0
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 2
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 2
51602: PUSH
51603: LD_INT 2
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 1
51612: PUSH
51613: LD_INT 2
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 0
51622: PUSH
51623: LD_INT 2
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: NEG
51633: PUSH
51634: LD_INT 1
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 2
51643: NEG
51644: PUSH
51645: LD_INT 0
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 2
51654: NEG
51655: PUSH
51656: LD_INT 1
51658: NEG
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 2
51666: NEG
51667: PUSH
51668: LD_INT 2
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51697: LD_ADDR_VAR 0 57
51701: PUSH
51702: LD_INT 0
51704: PUSH
51705: LD_INT 0
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: LD_INT 1
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 1
51725: PUSH
51726: LD_INT 0
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 1
51735: PUSH
51736: LD_INT 1
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 0
51745: PUSH
51746: LD_INT 1
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 1
51755: NEG
51756: PUSH
51757: LD_INT 0
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 1
51766: NEG
51767: PUSH
51768: LD_INT 1
51770: NEG
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 1
51778: NEG
51779: PUSH
51780: LD_INT 2
51782: NEG
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: LD_INT 2
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 1
51801: PUSH
51802: LD_INT 1
51804: NEG
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 2
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 2
51822: PUSH
51823: LD_INT 1
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 2
51832: PUSH
51833: LD_INT 2
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 1
51842: PUSH
51843: LD_INT 2
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 0
51852: PUSH
51853: LD_INT 2
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 1
51862: NEG
51863: PUSH
51864: LD_INT 1
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 2
51873: NEG
51874: PUSH
51875: LD_INT 0
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 2
51884: NEG
51885: PUSH
51886: LD_INT 1
51888: NEG
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 2
51896: NEG
51897: PUSH
51898: LD_INT 2
51900: NEG
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51927: LD_ADDR_VAR 0 58
51931: PUSH
51932: LD_INT 0
51934: PUSH
51935: LD_INT 0
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 0
51944: PUSH
51945: LD_INT 1
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 1
51955: PUSH
51956: LD_INT 0
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: LD_INT 1
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: LD_INT 1
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 1
51985: NEG
51986: PUSH
51987: LD_INT 0
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 1
51996: NEG
51997: PUSH
51998: LD_INT 1
52000: NEG
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 1
52008: NEG
52009: PUSH
52010: LD_INT 2
52012: NEG
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: LD_INT 2
52023: NEG
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 1
52031: PUSH
52032: LD_INT 1
52034: NEG
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 2
52042: PUSH
52043: LD_INT 0
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 2
52052: PUSH
52053: LD_INT 1
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 2
52062: PUSH
52063: LD_INT 2
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: LD_INT 2
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 0
52082: PUSH
52083: LD_INT 2
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: LD_INT 1
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 2
52103: NEG
52104: PUSH
52105: LD_INT 0
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 2
52114: NEG
52115: PUSH
52116: LD_INT 1
52118: NEG
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 2
52126: NEG
52127: PUSH
52128: LD_INT 2
52130: NEG
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52157: LD_ADDR_VAR 0 59
52161: PUSH
52162: LD_INT 0
52164: PUSH
52165: LD_INT 0
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: LD_INT 1
52177: NEG
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 1
52185: PUSH
52186: LD_INT 0
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 1
52195: PUSH
52196: LD_INT 1
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: LD_INT 1
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 1
52215: NEG
52216: PUSH
52217: LD_INT 0
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 1
52226: NEG
52227: PUSH
52228: LD_INT 1
52230: NEG
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52245: LD_ADDR_VAR 0 60
52249: PUSH
52250: LD_INT 0
52252: PUSH
52253: LD_INT 0
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: LD_INT 1
52265: NEG
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 1
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 1
52283: PUSH
52284: LD_INT 1
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: LD_INT 1
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 1
52303: NEG
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 1
52314: NEG
52315: PUSH
52316: LD_INT 1
52318: NEG
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52333: LD_ADDR_VAR 0 61
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: LD_INT 0
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: LD_INT 1
52353: NEG
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 1
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 1
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 1
52391: NEG
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 1
52402: NEG
52403: PUSH
52404: LD_INT 1
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52421: LD_ADDR_VAR 0 62
52425: PUSH
52426: LD_INT 0
52428: PUSH
52429: LD_INT 0
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 0
52438: PUSH
52439: LD_INT 1
52441: NEG
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 1
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 1
52459: PUSH
52460: LD_INT 1
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 0
52469: PUSH
52470: LD_INT 1
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 1
52479: NEG
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 1
52490: NEG
52491: PUSH
52492: LD_INT 1
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52509: LD_ADDR_VAR 0 63
52513: PUSH
52514: LD_INT 0
52516: PUSH
52517: LD_INT 0
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 0
52526: PUSH
52527: LD_INT 1
52529: NEG
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 1
52537: PUSH
52538: LD_INT 0
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 1
52547: PUSH
52548: LD_INT 1
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 0
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 1
52567: NEG
52568: PUSH
52569: LD_INT 0
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 1
52578: NEG
52579: PUSH
52580: LD_INT 1
52582: NEG
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52597: LD_ADDR_VAR 0 64
52601: PUSH
52602: LD_INT 0
52604: PUSH
52605: LD_INT 0
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 0
52614: PUSH
52615: LD_INT 1
52617: NEG
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 1
52625: PUSH
52626: LD_INT 0
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 1
52635: PUSH
52636: LD_INT 1
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 0
52645: PUSH
52646: LD_INT 1
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 1
52655: NEG
52656: PUSH
52657: LD_INT 0
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 1
52666: NEG
52667: PUSH
52668: LD_INT 1
52670: NEG
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: ST_TO_ADDR
// end ; 1 :
52685: GO 58582
52687: LD_INT 1
52689: DOUBLE
52690: EQUAL
52691: IFTRUE 52695
52693: GO 55318
52695: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52696: LD_ADDR_VAR 0 11
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: LD_INT 3
52707: NEG
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: LD_INT 3
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 1
52726: PUSH
52727: LD_INT 2
52729: NEG
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: LIST
52739: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52740: LD_ADDR_VAR 0 12
52744: PUSH
52745: LD_INT 2
52747: PUSH
52748: LD_INT 1
52750: NEG
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 3
52758: PUSH
52759: LD_INT 0
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 3
52768: PUSH
52769: LD_INT 1
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: LIST
52780: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52781: LD_ADDR_VAR 0 13
52785: PUSH
52786: LD_INT 3
52788: PUSH
52789: LD_INT 2
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 3
52798: PUSH
52799: LD_INT 3
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 2
52808: PUSH
52809: LD_INT 3
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: LIST
52820: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52821: LD_ADDR_VAR 0 14
52825: PUSH
52826: LD_INT 1
52828: PUSH
52829: LD_INT 3
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 0
52838: PUSH
52839: LD_INT 3
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 1
52848: NEG
52849: PUSH
52850: LD_INT 2
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: LIST
52861: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52862: LD_ADDR_VAR 0 15
52866: PUSH
52867: LD_INT 2
52869: NEG
52870: PUSH
52871: LD_INT 1
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 3
52880: NEG
52881: PUSH
52882: LD_INT 0
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 3
52891: NEG
52892: PUSH
52893: LD_INT 1
52895: NEG
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: LIST
52905: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52906: LD_ADDR_VAR 0 16
52910: PUSH
52911: LD_INT 2
52913: NEG
52914: PUSH
52915: LD_INT 3
52917: NEG
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 3
52925: NEG
52926: PUSH
52927: LD_INT 2
52929: NEG
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 3
52937: NEG
52938: PUSH
52939: LD_INT 3
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: LIST
52951: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52952: LD_ADDR_VAR 0 17
52956: PUSH
52957: LD_INT 1
52959: NEG
52960: PUSH
52961: LD_INT 3
52963: NEG
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: LD_INT 3
52974: NEG
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 1
52982: PUSH
52983: LD_INT 2
52985: NEG
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: LIST
52995: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52996: LD_ADDR_VAR 0 18
53000: PUSH
53001: LD_INT 2
53003: PUSH
53004: LD_INT 1
53006: NEG
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 3
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 3
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: LIST
53036: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53037: LD_ADDR_VAR 0 19
53041: PUSH
53042: LD_INT 3
53044: PUSH
53045: LD_INT 2
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 3
53054: PUSH
53055: LD_INT 3
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 2
53064: PUSH
53065: LD_INT 3
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: LIST
53076: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53077: LD_ADDR_VAR 0 20
53081: PUSH
53082: LD_INT 1
53084: PUSH
53085: LD_INT 3
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 0
53094: PUSH
53095: LD_INT 3
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: NEG
53105: PUSH
53106: LD_INT 2
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: LIST
53117: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53118: LD_ADDR_VAR 0 21
53122: PUSH
53123: LD_INT 2
53125: NEG
53126: PUSH
53127: LD_INT 1
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 3
53136: NEG
53137: PUSH
53138: LD_INT 0
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 3
53147: NEG
53148: PUSH
53149: LD_INT 1
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: LIST
53161: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53162: LD_ADDR_VAR 0 22
53166: PUSH
53167: LD_INT 2
53169: NEG
53170: PUSH
53171: LD_INT 3
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 3
53181: NEG
53182: PUSH
53183: LD_INT 2
53185: NEG
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 3
53193: NEG
53194: PUSH
53195: LD_INT 3
53197: NEG
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: LIST
53207: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53208: LD_ADDR_VAR 0 23
53212: PUSH
53213: LD_INT 0
53215: PUSH
53216: LD_INT 3
53218: NEG
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: NEG
53227: PUSH
53228: LD_INT 4
53230: NEG
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 1
53238: PUSH
53239: LD_INT 3
53241: NEG
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: LIST
53251: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53252: LD_ADDR_VAR 0 24
53256: PUSH
53257: LD_INT 3
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 3
53269: PUSH
53270: LD_INT 1
53272: NEG
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 4
53280: PUSH
53281: LD_INT 1
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: LIST
53292: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53293: LD_ADDR_VAR 0 25
53297: PUSH
53298: LD_INT 3
53300: PUSH
53301: LD_INT 3
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 4
53310: PUSH
53311: LD_INT 3
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 3
53320: PUSH
53321: LD_INT 4
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: LIST
53332: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53333: LD_ADDR_VAR 0 26
53337: PUSH
53338: LD_INT 0
53340: PUSH
53341: LD_INT 3
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: LD_INT 4
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 1
53360: NEG
53361: PUSH
53362: LD_INT 3
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: LIST
53373: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53374: LD_ADDR_VAR 0 27
53378: PUSH
53379: LD_INT 3
53381: NEG
53382: PUSH
53383: LD_INT 0
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 3
53392: NEG
53393: PUSH
53394: LD_INT 1
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 4
53403: NEG
53404: PUSH
53405: LD_INT 1
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: LIST
53417: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53418: LD_ADDR_VAR 0 28
53422: PUSH
53423: LD_INT 3
53425: NEG
53426: PUSH
53427: LD_INT 3
53429: NEG
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 3
53437: NEG
53438: PUSH
53439: LD_INT 4
53441: NEG
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 4
53449: NEG
53450: PUSH
53451: LD_INT 3
53453: NEG
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: LIST
53463: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53464: LD_ADDR_VAR 0 29
53468: PUSH
53469: LD_INT 1
53471: NEG
53472: PUSH
53473: LD_INT 3
53475: NEG
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 0
53483: PUSH
53484: LD_INT 3
53486: NEG
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 1
53494: PUSH
53495: LD_INT 2
53497: NEG
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 1
53505: NEG
53506: PUSH
53507: LD_INT 4
53509: NEG
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: LD_INT 4
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: PUSH
53529: LD_INT 3
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 1
53539: NEG
53540: PUSH
53541: LD_INT 5
53543: NEG
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: LD_INT 5
53554: NEG
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 1
53562: PUSH
53563: LD_INT 4
53565: NEG
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 1
53573: NEG
53574: PUSH
53575: LD_INT 6
53577: NEG
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 0
53585: PUSH
53586: LD_INT 6
53588: NEG
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 1
53596: PUSH
53597: LD_INT 5
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53619: LD_ADDR_VAR 0 30
53623: PUSH
53624: LD_INT 2
53626: PUSH
53627: LD_INT 1
53629: NEG
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 3
53637: PUSH
53638: LD_INT 0
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 3
53647: PUSH
53648: LD_INT 1
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 3
53657: PUSH
53658: LD_INT 1
53660: NEG
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 4
53668: PUSH
53669: LD_INT 0
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 4
53678: PUSH
53679: LD_INT 1
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 4
53688: PUSH
53689: LD_INT 1
53691: NEG
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 5
53699: PUSH
53700: LD_INT 0
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 5
53709: PUSH
53710: LD_INT 1
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 5
53719: PUSH
53720: LD_INT 1
53722: NEG
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 6
53730: PUSH
53731: LD_INT 0
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 6
53740: PUSH
53741: LD_INT 1
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53762: LD_ADDR_VAR 0 31
53766: PUSH
53767: LD_INT 3
53769: PUSH
53770: LD_INT 2
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 3
53779: PUSH
53780: LD_INT 3
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 2
53789: PUSH
53790: LD_INT 3
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 4
53799: PUSH
53800: LD_INT 3
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 4
53809: PUSH
53810: LD_INT 4
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 3
53819: PUSH
53820: LD_INT 4
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 5
53829: PUSH
53830: LD_INT 4
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 5
53839: PUSH
53840: LD_INT 5
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 4
53849: PUSH
53850: LD_INT 5
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 6
53859: PUSH
53860: LD_INT 5
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 6
53869: PUSH
53870: LD_INT 6
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 5
53879: PUSH
53880: LD_INT 6
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53901: LD_ADDR_VAR 0 32
53905: PUSH
53906: LD_INT 1
53908: PUSH
53909: LD_INT 3
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: LD_INT 3
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: NEG
53929: PUSH
53930: LD_INT 2
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 1
53939: PUSH
53940: LD_INT 4
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 0
53949: PUSH
53950: LD_INT 4
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 1
53959: NEG
53960: PUSH
53961: LD_INT 3
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: LD_INT 5
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 0
53980: PUSH
53981: LD_INT 5
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 1
53990: NEG
53991: PUSH
53992: LD_INT 4
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 1
54001: PUSH
54002: LD_INT 6
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 0
54011: PUSH
54012: LD_INT 6
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 1
54021: NEG
54022: PUSH
54023: LD_INT 5
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54044: LD_ADDR_VAR 0 33
54048: PUSH
54049: LD_INT 2
54051: NEG
54052: PUSH
54053: LD_INT 1
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 3
54062: NEG
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 3
54073: NEG
54074: PUSH
54075: LD_INT 1
54077: NEG
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 3
54085: NEG
54086: PUSH
54087: LD_INT 1
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 4
54096: NEG
54097: PUSH
54098: LD_INT 0
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 4
54107: NEG
54108: PUSH
54109: LD_INT 1
54111: NEG
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 4
54119: NEG
54120: PUSH
54121: LD_INT 1
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 5
54130: NEG
54131: PUSH
54132: LD_INT 0
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 5
54141: NEG
54142: PUSH
54143: LD_INT 1
54145: NEG
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 5
54153: NEG
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 6
54164: NEG
54165: PUSH
54166: LD_INT 0
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 6
54175: NEG
54176: PUSH
54177: LD_INT 1
54179: NEG
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54199: LD_ADDR_VAR 0 34
54203: PUSH
54204: LD_INT 2
54206: NEG
54207: PUSH
54208: LD_INT 3
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 3
54218: NEG
54219: PUSH
54220: LD_INT 2
54222: NEG
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 3
54230: NEG
54231: PUSH
54232: LD_INT 3
54234: NEG
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 3
54242: NEG
54243: PUSH
54244: LD_INT 4
54246: NEG
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 4
54254: NEG
54255: PUSH
54256: LD_INT 3
54258: NEG
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 4
54266: NEG
54267: PUSH
54268: LD_INT 4
54270: NEG
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 4
54278: NEG
54279: PUSH
54280: LD_INT 5
54282: NEG
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 5
54290: NEG
54291: PUSH
54292: LD_INT 4
54294: NEG
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 5
54302: NEG
54303: PUSH
54304: LD_INT 5
54306: NEG
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 5
54314: NEG
54315: PUSH
54316: LD_INT 6
54318: NEG
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 6
54326: NEG
54327: PUSH
54328: LD_INT 5
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 6
54338: NEG
54339: PUSH
54340: LD_INT 6
54342: NEG
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54362: LD_ADDR_VAR 0 41
54366: PUSH
54367: LD_INT 0
54369: PUSH
54370: LD_INT 2
54372: NEG
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 1
54380: NEG
54381: PUSH
54382: LD_INT 3
54384: NEG
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: LD_INT 2
54395: NEG
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: LIST
54405: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54406: LD_ADDR_VAR 0 42
54410: PUSH
54411: LD_INT 2
54413: PUSH
54414: LD_INT 0
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 2
54423: PUSH
54424: LD_INT 1
54426: NEG
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 3
54434: PUSH
54435: LD_INT 1
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: LIST
54446: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54447: LD_ADDR_VAR 0 43
54451: PUSH
54452: LD_INT 2
54454: PUSH
54455: LD_INT 2
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 3
54464: PUSH
54465: LD_INT 2
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 2
54474: PUSH
54475: LD_INT 3
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: LIST
54486: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54487: LD_ADDR_VAR 0 44
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: LD_INT 2
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 1
54504: PUSH
54505: LD_INT 3
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 1
54514: NEG
54515: PUSH
54516: LD_INT 2
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: LIST
54527: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54528: LD_ADDR_VAR 0 45
54532: PUSH
54533: LD_INT 2
54535: NEG
54536: PUSH
54537: LD_INT 0
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 2
54546: NEG
54547: PUSH
54548: LD_INT 1
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 3
54557: NEG
54558: PUSH
54559: LD_INT 1
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: LIST
54571: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54572: LD_ADDR_VAR 0 46
54576: PUSH
54577: LD_INT 2
54579: NEG
54580: PUSH
54581: LD_INT 2
54583: NEG
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 2
54591: NEG
54592: PUSH
54593: LD_INT 3
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 3
54603: NEG
54604: PUSH
54605: LD_INT 2
54607: NEG
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: LIST
54617: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54618: LD_ADDR_VAR 0 47
54622: PUSH
54623: LD_INT 2
54625: NEG
54626: PUSH
54627: LD_INT 3
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: NEG
54638: PUSH
54639: LD_INT 3
54641: NEG
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54651: LD_ADDR_VAR 0 48
54655: PUSH
54656: LD_INT 1
54658: PUSH
54659: LD_INT 2
54661: NEG
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 2
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54682: LD_ADDR_VAR 0 49
54686: PUSH
54687: LD_INT 3
54689: PUSH
54690: LD_INT 1
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 3
54699: PUSH
54700: LD_INT 2
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54711: LD_ADDR_VAR 0 50
54715: PUSH
54716: LD_INT 2
54718: PUSH
54719: LD_INT 3
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 1
54728: PUSH
54729: LD_INT 3
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54740: LD_ADDR_VAR 0 51
54744: PUSH
54745: LD_INT 1
54747: NEG
54748: PUSH
54749: LD_INT 2
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 2
54758: NEG
54759: PUSH
54760: LD_INT 1
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54771: LD_ADDR_VAR 0 52
54775: PUSH
54776: LD_INT 3
54778: NEG
54779: PUSH
54780: LD_INT 1
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 3
54790: NEG
54791: PUSH
54792: LD_INT 2
54794: NEG
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54804: LD_ADDR_VAR 0 53
54808: PUSH
54809: LD_INT 1
54811: NEG
54812: PUSH
54813: LD_INT 3
54815: NEG
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 0
54823: PUSH
54824: LD_INT 3
54826: NEG
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: LD_INT 2
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: LIST
54847: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54848: LD_ADDR_VAR 0 54
54852: PUSH
54853: LD_INT 2
54855: PUSH
54856: LD_INT 1
54858: NEG
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 3
54866: PUSH
54867: LD_INT 0
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 3
54876: PUSH
54877: LD_INT 1
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: LIST
54888: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54889: LD_ADDR_VAR 0 55
54893: PUSH
54894: LD_INT 3
54896: PUSH
54897: LD_INT 2
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 3
54906: PUSH
54907: LD_INT 3
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 2
54916: PUSH
54917: LD_INT 3
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: LIST
54928: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54929: LD_ADDR_VAR 0 56
54933: PUSH
54934: LD_INT 1
54936: PUSH
54937: LD_INT 3
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: LD_INT 3
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 1
54956: NEG
54957: PUSH
54958: LD_INT 2
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: LIST
54969: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54970: LD_ADDR_VAR 0 57
54974: PUSH
54975: LD_INT 2
54977: NEG
54978: PUSH
54979: LD_INT 1
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 3
54988: NEG
54989: PUSH
54990: LD_INT 0
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 3
54999: NEG
55000: PUSH
55001: LD_INT 1
55003: NEG
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: LIST
55013: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55014: LD_ADDR_VAR 0 58
55018: PUSH
55019: LD_INT 2
55021: NEG
55022: PUSH
55023: LD_INT 3
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 3
55033: NEG
55034: PUSH
55035: LD_INT 2
55037: NEG
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 3
55045: NEG
55046: PUSH
55047: LD_INT 3
55049: NEG
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: LIST
55059: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55060: LD_ADDR_VAR 0 59
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: LD_INT 2
55071: NEG
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 0
55079: PUSH
55080: LD_INT 2
55082: NEG
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 1
55090: PUSH
55091: LD_INT 1
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: LIST
55103: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55104: LD_ADDR_VAR 0 60
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: LD_INT 1
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 2
55122: PUSH
55123: LD_INT 0
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 2
55132: PUSH
55133: LD_INT 1
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: LIST
55144: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55145: LD_ADDR_VAR 0 61
55149: PUSH
55150: LD_INT 2
55152: PUSH
55153: LD_INT 1
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 2
55162: PUSH
55163: LD_INT 2
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 1
55172: PUSH
55173: LD_INT 2
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: LIST
55184: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55185: LD_ADDR_VAR 0 62
55189: PUSH
55190: LD_INT 1
55192: PUSH
55193: LD_INT 2
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: LD_INT 2
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 1
55212: NEG
55213: PUSH
55214: LD_INT 1
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: LIST
55225: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55226: LD_ADDR_VAR 0 63
55230: PUSH
55231: LD_INT 1
55233: NEG
55234: PUSH
55235: LD_INT 1
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 2
55244: NEG
55245: PUSH
55246: LD_INT 0
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 2
55255: NEG
55256: PUSH
55257: LD_INT 1
55259: NEG
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: LIST
55269: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55270: LD_ADDR_VAR 0 64
55274: PUSH
55275: LD_INT 1
55277: NEG
55278: PUSH
55279: LD_INT 2
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 2
55289: NEG
55290: PUSH
55291: LD_INT 1
55293: NEG
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 2
55301: NEG
55302: PUSH
55303: LD_INT 2
55305: NEG
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: LIST
55315: ST_TO_ADDR
// end ; 2 :
55316: GO 58582
55318: LD_INT 2
55320: DOUBLE
55321: EQUAL
55322: IFTRUE 55326
55324: GO 58581
55326: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55327: LD_ADDR_VAR 0 29
55331: PUSH
55332: LD_INT 4
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 4
55344: PUSH
55345: LD_INT 1
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 5
55355: PUSH
55356: LD_INT 0
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 5
55365: PUSH
55366: LD_INT 1
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 4
55375: PUSH
55376: LD_INT 1
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 3
55385: PUSH
55386: LD_INT 0
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 3
55395: PUSH
55396: LD_INT 1
55398: NEG
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 3
55406: PUSH
55407: LD_INT 2
55409: NEG
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 5
55417: PUSH
55418: LD_INT 2
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 3
55427: PUSH
55428: LD_INT 3
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 3
55437: PUSH
55438: LD_INT 2
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 4
55447: PUSH
55448: LD_INT 3
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 4
55457: PUSH
55458: LD_INT 4
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 3
55467: PUSH
55468: LD_INT 4
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 2
55477: PUSH
55478: LD_INT 3
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 2
55487: PUSH
55488: LD_INT 2
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 4
55497: PUSH
55498: LD_INT 2
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 2
55507: PUSH
55508: LD_INT 4
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: LD_INT 4
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 0
55527: PUSH
55528: LD_INT 3
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 1
55537: PUSH
55538: LD_INT 4
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 1
55547: PUSH
55548: LD_INT 5
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 0
55557: PUSH
55558: LD_INT 5
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 1
55567: NEG
55568: PUSH
55569: LD_INT 4
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 1
55578: NEG
55579: PUSH
55580: LD_INT 3
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 2
55589: PUSH
55590: LD_INT 5
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 2
55599: NEG
55600: PUSH
55601: LD_INT 3
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 3
55610: NEG
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 3
55621: NEG
55622: PUSH
55623: LD_INT 1
55625: NEG
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 2
55633: NEG
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 2
55644: NEG
55645: PUSH
55646: LD_INT 1
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 3
55655: NEG
55656: PUSH
55657: LD_INT 1
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 4
55666: NEG
55667: PUSH
55668: LD_INT 0
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 4
55677: NEG
55678: PUSH
55679: LD_INT 1
55681: NEG
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 4
55689: NEG
55690: PUSH
55691: LD_INT 2
55693: NEG
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 2
55701: NEG
55702: PUSH
55703: LD_INT 2
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 4
55712: NEG
55713: PUSH
55714: LD_INT 4
55716: NEG
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 4
55724: NEG
55725: PUSH
55726: LD_INT 5
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 3
55736: NEG
55737: PUSH
55738: LD_INT 4
55740: NEG
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 3
55748: NEG
55749: PUSH
55750: LD_INT 3
55752: NEG
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 4
55760: NEG
55761: PUSH
55762: LD_INT 3
55764: NEG
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 5
55772: NEG
55773: PUSH
55774: LD_INT 4
55776: NEG
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 5
55784: NEG
55785: PUSH
55786: LD_INT 5
55788: NEG
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 3
55796: NEG
55797: PUSH
55798: LD_INT 5
55800: NEG
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 5
55808: NEG
55809: PUSH
55810: LD_INT 3
55812: NEG
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55865: LD_ADDR_VAR 0 30
55869: PUSH
55870: LD_INT 4
55872: PUSH
55873: LD_INT 4
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 4
55882: PUSH
55883: LD_INT 3
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 5
55892: PUSH
55893: LD_INT 4
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 5
55902: PUSH
55903: LD_INT 5
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 4
55912: PUSH
55913: LD_INT 5
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 3
55922: PUSH
55923: LD_INT 4
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 3
55932: PUSH
55933: LD_INT 3
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 5
55942: PUSH
55943: LD_INT 3
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 3
55952: PUSH
55953: LD_INT 5
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 0
55962: PUSH
55963: LD_INT 3
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: LD_INT 2
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 1
55982: PUSH
55983: LD_INT 3
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 1
55992: PUSH
55993: LD_INT 4
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: LD_INT 4
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 1
56012: NEG
56013: PUSH
56014: LD_INT 3
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 1
56023: NEG
56024: PUSH
56025: LD_INT 2
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 2
56034: PUSH
56035: LD_INT 4
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 2
56044: NEG
56045: PUSH
56046: LD_INT 2
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 4
56055: NEG
56056: PUSH
56057: LD_INT 0
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 4
56066: NEG
56067: PUSH
56068: LD_INT 1
56070: NEG
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 3
56078: NEG
56079: PUSH
56080: LD_INT 0
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 3
56089: NEG
56090: PUSH
56091: LD_INT 1
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 4
56100: NEG
56101: PUSH
56102: LD_INT 1
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 5
56111: NEG
56112: PUSH
56113: LD_INT 0
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 5
56122: NEG
56123: PUSH
56124: LD_INT 1
56126: NEG
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 5
56134: NEG
56135: PUSH
56136: LD_INT 2
56138: NEG
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 3
56146: NEG
56147: PUSH
56148: LD_INT 2
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 3
56157: NEG
56158: PUSH
56159: LD_INT 3
56161: NEG
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 3
56169: NEG
56170: PUSH
56171: LD_INT 4
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 2
56181: NEG
56182: PUSH
56183: LD_INT 3
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 2
56193: NEG
56194: PUSH
56195: LD_INT 2
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 3
56205: NEG
56206: PUSH
56207: LD_INT 2
56209: NEG
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 4
56217: NEG
56218: PUSH
56219: LD_INT 3
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 4
56229: NEG
56230: PUSH
56231: LD_INT 4
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 2
56241: NEG
56242: PUSH
56243: LD_INT 4
56245: NEG
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 4
56253: NEG
56254: PUSH
56255: LD_INT 2
56257: NEG
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 0
56265: PUSH
56266: LD_INT 4
56268: NEG
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 0
56276: PUSH
56277: LD_INT 5
56279: NEG
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 1
56287: PUSH
56288: LD_INT 4
56290: NEG
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 1
56298: PUSH
56299: LD_INT 3
56301: NEG
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: LD_INT 3
56312: NEG
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 1
56320: NEG
56321: PUSH
56322: LD_INT 4
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 1
56332: NEG
56333: PUSH
56334: LD_INT 5
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 2
56344: PUSH
56345: LD_INT 3
56347: NEG
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 2
56355: NEG
56356: PUSH
56357: LD_INT 5
56359: NEG
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56412: LD_ADDR_VAR 0 31
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: LD_INT 4
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: LD_INT 3
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: LD_INT 4
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 1
56449: PUSH
56450: LD_INT 5
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 0
56459: PUSH
56460: LD_INT 5
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 1
56469: NEG
56470: PUSH
56471: LD_INT 4
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 1
56480: NEG
56481: PUSH
56482: LD_INT 3
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 2
56491: PUSH
56492: LD_INT 5
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 2
56501: NEG
56502: PUSH
56503: LD_INT 3
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 3
56512: NEG
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 3
56523: NEG
56524: PUSH
56525: LD_INT 1
56527: NEG
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 2
56535: NEG
56536: PUSH
56537: LD_INT 0
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 2
56546: NEG
56547: PUSH
56548: LD_INT 1
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 3
56557: NEG
56558: PUSH
56559: LD_INT 1
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 4
56568: NEG
56569: PUSH
56570: LD_INT 0
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 4
56579: NEG
56580: PUSH
56581: LD_INT 1
56583: NEG
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 4
56591: NEG
56592: PUSH
56593: LD_INT 2
56595: NEG
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 2
56603: NEG
56604: PUSH
56605: LD_INT 2
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 4
56614: NEG
56615: PUSH
56616: LD_INT 4
56618: NEG
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 4
56626: NEG
56627: PUSH
56628: LD_INT 5
56630: NEG
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 3
56638: NEG
56639: PUSH
56640: LD_INT 4
56642: NEG
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 3
56650: NEG
56651: PUSH
56652: LD_INT 3
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 4
56662: NEG
56663: PUSH
56664: LD_INT 3
56666: NEG
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 5
56674: NEG
56675: PUSH
56676: LD_INT 4
56678: NEG
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 5
56686: NEG
56687: PUSH
56688: LD_INT 5
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 3
56698: NEG
56699: PUSH
56700: LD_INT 5
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 5
56710: NEG
56711: PUSH
56712: LD_INT 3
56714: NEG
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 0
56722: PUSH
56723: LD_INT 3
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 0
56733: PUSH
56734: LD_INT 4
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 1
56744: PUSH
56745: LD_INT 3
56747: NEG
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 1
56755: PUSH
56756: LD_INT 2
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 0
56766: PUSH
56767: LD_INT 2
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 1
56777: NEG
56778: PUSH
56779: LD_INT 3
56781: NEG
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 1
56789: NEG
56790: PUSH
56791: LD_INT 4
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 2
56801: PUSH
56802: LD_INT 2
56804: NEG
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 2
56812: NEG
56813: PUSH
56814: LD_INT 4
56816: NEG
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 4
56824: PUSH
56825: LD_INT 0
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 4
56834: PUSH
56835: LD_INT 1
56837: NEG
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 5
56845: PUSH
56846: LD_INT 0
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 5
56855: PUSH
56856: LD_INT 1
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 4
56865: PUSH
56866: LD_INT 1
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 3
56875: PUSH
56876: LD_INT 0
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 3
56885: PUSH
56886: LD_INT 1
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 3
56896: PUSH
56897: LD_INT 2
56899: NEG
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 5
56907: PUSH
56908: LD_INT 2
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56962: LD_ADDR_VAR 0 32
56966: PUSH
56967: LD_INT 4
56969: NEG
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 4
56980: NEG
56981: PUSH
56982: LD_INT 1
56984: NEG
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 3
56992: NEG
56993: PUSH
56994: LD_INT 0
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 3
57003: NEG
57004: PUSH
57005: LD_INT 1
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 4
57014: NEG
57015: PUSH
57016: LD_INT 1
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 5
57025: NEG
57026: PUSH
57027: LD_INT 0
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 5
57036: NEG
57037: PUSH
57038: LD_INT 1
57040: NEG
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 5
57048: NEG
57049: PUSH
57050: LD_INT 2
57052: NEG
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 3
57060: NEG
57061: PUSH
57062: LD_INT 2
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 3
57071: NEG
57072: PUSH
57073: LD_INT 3
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 3
57083: NEG
57084: PUSH
57085: LD_INT 4
57087: NEG
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 2
57095: NEG
57096: PUSH
57097: LD_INT 3
57099: NEG
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 2
57107: NEG
57108: PUSH
57109: LD_INT 2
57111: NEG
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 3
57119: NEG
57120: PUSH
57121: LD_INT 2
57123: NEG
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 4
57131: NEG
57132: PUSH
57133: LD_INT 3
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 4
57143: NEG
57144: PUSH
57145: LD_INT 4
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 2
57155: NEG
57156: PUSH
57157: LD_INT 4
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 4
57167: NEG
57168: PUSH
57169: LD_INT 2
57171: NEG
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 0
57179: PUSH
57180: LD_INT 4
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 0
57190: PUSH
57191: LD_INT 5
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 1
57201: PUSH
57202: LD_INT 4
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 1
57212: PUSH
57213: LD_INT 3
57215: NEG
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: LD_INT 3
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 1
57234: NEG
57235: PUSH
57236: LD_INT 4
57238: NEG
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 1
57246: NEG
57247: PUSH
57248: LD_INT 5
57250: NEG
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 2
57258: PUSH
57259: LD_INT 3
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 2
57269: NEG
57270: PUSH
57271: LD_INT 5
57273: NEG
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 3
57281: PUSH
57282: LD_INT 0
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 3
57291: PUSH
57292: LD_INT 1
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 4
57302: PUSH
57303: LD_INT 0
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 4
57312: PUSH
57313: LD_INT 1
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 3
57322: PUSH
57323: LD_INT 1
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 2
57332: PUSH
57333: LD_INT 0
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 2
57342: PUSH
57343: LD_INT 1
57345: NEG
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 2
57353: PUSH
57354: LD_INT 2
57356: NEG
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 4
57364: PUSH
57365: LD_INT 2
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 4
57374: PUSH
57375: LD_INT 4
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 4
57384: PUSH
57385: LD_INT 3
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 5
57394: PUSH
57395: LD_INT 4
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 5
57404: PUSH
57405: LD_INT 5
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 4
57414: PUSH
57415: LD_INT 5
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 3
57424: PUSH
57425: LD_INT 4
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 3
57434: PUSH
57435: LD_INT 3
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 5
57444: PUSH
57445: LD_INT 3
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 3
57454: PUSH
57455: LD_INT 5
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57509: LD_ADDR_VAR 0 33
57513: PUSH
57514: LD_INT 4
57516: NEG
57517: PUSH
57518: LD_INT 4
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 4
57528: NEG
57529: PUSH
57530: LD_INT 5
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 3
57540: NEG
57541: PUSH
57542: LD_INT 4
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 3
57552: NEG
57553: PUSH
57554: LD_INT 3
57556: NEG
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 4
57564: NEG
57565: PUSH
57566: LD_INT 3
57568: NEG
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 5
57576: NEG
57577: PUSH
57578: LD_INT 4
57580: NEG
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 5
57588: NEG
57589: PUSH
57590: LD_INT 5
57592: NEG
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 3
57600: NEG
57601: PUSH
57602: LD_INT 5
57604: NEG
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 5
57612: NEG
57613: PUSH
57614: LD_INT 3
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 0
57624: PUSH
57625: LD_INT 3
57627: NEG
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 0
57635: PUSH
57636: LD_INT 4
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 1
57646: PUSH
57647: LD_INT 3
57649: NEG
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 1
57657: PUSH
57658: LD_INT 2
57660: NEG
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 0
57668: PUSH
57669: LD_INT 2
57671: NEG
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 1
57679: NEG
57680: PUSH
57681: LD_INT 3
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 1
57691: NEG
57692: PUSH
57693: LD_INT 4
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 2
57703: PUSH
57704: LD_INT 2
57706: NEG
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 2
57714: NEG
57715: PUSH
57716: LD_INT 4
57718: NEG
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 4
57726: PUSH
57727: LD_INT 0
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 4
57736: PUSH
57737: LD_INT 1
57739: NEG
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 5
57747: PUSH
57748: LD_INT 0
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 5
57757: PUSH
57758: LD_INT 1
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 4
57767: PUSH
57768: LD_INT 1
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 3
57777: PUSH
57778: LD_INT 0
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 3
57787: PUSH
57788: LD_INT 1
57790: NEG
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 3
57798: PUSH
57799: LD_INT 2
57801: NEG
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 5
57809: PUSH
57810: LD_INT 2
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 3
57819: PUSH
57820: LD_INT 3
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 3
57829: PUSH
57830: LD_INT 2
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 4
57839: PUSH
57840: LD_INT 3
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 4
57849: PUSH
57850: LD_INT 4
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 3
57859: PUSH
57860: LD_INT 4
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 2
57869: PUSH
57870: LD_INT 3
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 2
57879: PUSH
57880: LD_INT 2
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 4
57889: PUSH
57890: LD_INT 2
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 2
57899: PUSH
57900: LD_INT 4
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 0
57909: PUSH
57910: LD_INT 4
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: LD_INT 3
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 1
57929: PUSH
57930: LD_INT 4
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 1
57939: PUSH
57940: LD_INT 5
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 0
57949: PUSH
57950: LD_INT 5
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 1
57959: NEG
57960: PUSH
57961: LD_INT 4
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 1
57970: NEG
57971: PUSH
57972: LD_INT 3
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 2
57981: PUSH
57982: LD_INT 5
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 2
57991: NEG
57992: PUSH
57993: LD_INT 3
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58047: LD_ADDR_VAR 0 34
58051: PUSH
58052: LD_INT 0
58054: PUSH
58055: LD_INT 4
58057: NEG
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 0
58065: PUSH
58066: LD_INT 5
58068: NEG
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 1
58076: PUSH
58077: LD_INT 4
58079: NEG
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 1
58087: PUSH
58088: LD_INT 3
58090: NEG
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 0
58098: PUSH
58099: LD_INT 3
58101: NEG
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 1
58109: NEG
58110: PUSH
58111: LD_INT 4
58113: NEG
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 1
58121: NEG
58122: PUSH
58123: LD_INT 5
58125: NEG
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 2
58133: PUSH
58134: LD_INT 3
58136: NEG
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 2
58144: NEG
58145: PUSH
58146: LD_INT 5
58148: NEG
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 3
58156: PUSH
58157: LD_INT 0
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 3
58166: PUSH
58167: LD_INT 1
58169: NEG
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 4
58177: PUSH
58178: LD_INT 0
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 4
58187: PUSH
58188: LD_INT 1
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 3
58197: PUSH
58198: LD_INT 1
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 2
58207: PUSH
58208: LD_INT 0
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 2
58217: PUSH
58218: LD_INT 1
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 2
58228: PUSH
58229: LD_INT 2
58231: NEG
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 4
58239: PUSH
58240: LD_INT 2
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 4
58249: PUSH
58250: LD_INT 4
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 4
58259: PUSH
58260: LD_INT 3
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 5
58269: PUSH
58270: LD_INT 4
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 5
58279: PUSH
58280: LD_INT 5
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 4
58289: PUSH
58290: LD_INT 5
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 3
58299: PUSH
58300: LD_INT 4
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 3
58309: PUSH
58310: LD_INT 3
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 5
58319: PUSH
58320: LD_INT 3
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 3
58329: PUSH
58330: LD_INT 5
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 0
58339: PUSH
58340: LD_INT 3
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 0
58349: PUSH
58350: LD_INT 2
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 1
58359: PUSH
58360: LD_INT 3
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 1
58369: PUSH
58370: LD_INT 4
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 0
58379: PUSH
58380: LD_INT 4
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 1
58389: NEG
58390: PUSH
58391: LD_INT 3
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 1
58400: NEG
58401: PUSH
58402: LD_INT 2
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 2
58411: PUSH
58412: LD_INT 4
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 2
58421: NEG
58422: PUSH
58423: LD_INT 2
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 4
58432: NEG
58433: PUSH
58434: LD_INT 0
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 4
58443: NEG
58444: PUSH
58445: LD_INT 1
58447: NEG
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 3
58455: NEG
58456: PUSH
58457: LD_INT 0
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 3
58466: NEG
58467: PUSH
58468: LD_INT 1
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 4
58477: NEG
58478: PUSH
58479: LD_INT 1
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 5
58488: NEG
58489: PUSH
58490: LD_INT 0
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 5
58499: NEG
58500: PUSH
58501: LD_INT 1
58503: NEG
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 5
58511: NEG
58512: PUSH
58513: LD_INT 2
58515: NEG
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 3
58523: NEG
58524: PUSH
58525: LD_INT 2
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: ST_TO_ADDR
// end ; end ;
58579: GO 58582
58581: POP
// case btype of b_depot , b_warehouse :
58582: LD_VAR 0 1
58586: PUSH
58587: LD_INT 0
58589: DOUBLE
58590: EQUAL
58591: IFTRUE 58601
58593: LD_INT 1
58595: DOUBLE
58596: EQUAL
58597: IFTRUE 58601
58599: GO 58802
58601: POP
// case nation of nation_american :
58602: LD_VAR 0 5
58606: PUSH
58607: LD_INT 1
58609: DOUBLE
58610: EQUAL
58611: IFTRUE 58615
58613: GO 58671
58615: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58616: LD_ADDR_VAR 0 9
58620: PUSH
58621: LD_VAR 0 11
58625: PUSH
58626: LD_VAR 0 12
58630: PUSH
58631: LD_VAR 0 13
58635: PUSH
58636: LD_VAR 0 14
58640: PUSH
58641: LD_VAR 0 15
58645: PUSH
58646: LD_VAR 0 16
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: PUSH
58659: LD_VAR 0 4
58663: PUSH
58664: LD_INT 1
58666: PLUS
58667: ARRAY
58668: ST_TO_ADDR
58669: GO 58800
58671: LD_INT 2
58673: DOUBLE
58674: EQUAL
58675: IFTRUE 58679
58677: GO 58735
58679: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58680: LD_ADDR_VAR 0 9
58684: PUSH
58685: LD_VAR 0 17
58689: PUSH
58690: LD_VAR 0 18
58694: PUSH
58695: LD_VAR 0 19
58699: PUSH
58700: LD_VAR 0 20
58704: PUSH
58705: LD_VAR 0 21
58709: PUSH
58710: LD_VAR 0 22
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: PUSH
58723: LD_VAR 0 4
58727: PUSH
58728: LD_INT 1
58730: PLUS
58731: ARRAY
58732: ST_TO_ADDR
58733: GO 58800
58735: LD_INT 3
58737: DOUBLE
58738: EQUAL
58739: IFTRUE 58743
58741: GO 58799
58743: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58744: LD_ADDR_VAR 0 9
58748: PUSH
58749: LD_VAR 0 23
58753: PUSH
58754: LD_VAR 0 24
58758: PUSH
58759: LD_VAR 0 25
58763: PUSH
58764: LD_VAR 0 26
58768: PUSH
58769: LD_VAR 0 27
58773: PUSH
58774: LD_VAR 0 28
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: PUSH
58787: LD_VAR 0 4
58791: PUSH
58792: LD_INT 1
58794: PLUS
58795: ARRAY
58796: ST_TO_ADDR
58797: GO 58800
58799: POP
58800: GO 59355
58802: LD_INT 2
58804: DOUBLE
58805: EQUAL
58806: IFTRUE 58816
58808: LD_INT 3
58810: DOUBLE
58811: EQUAL
58812: IFTRUE 58816
58814: GO 58872
58816: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58817: LD_ADDR_VAR 0 9
58821: PUSH
58822: LD_VAR 0 29
58826: PUSH
58827: LD_VAR 0 30
58831: PUSH
58832: LD_VAR 0 31
58836: PUSH
58837: LD_VAR 0 32
58841: PUSH
58842: LD_VAR 0 33
58846: PUSH
58847: LD_VAR 0 34
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: PUSH
58860: LD_VAR 0 4
58864: PUSH
58865: LD_INT 1
58867: PLUS
58868: ARRAY
58869: ST_TO_ADDR
58870: GO 59355
58872: LD_INT 16
58874: DOUBLE
58875: EQUAL
58876: IFTRUE 58934
58878: LD_INT 17
58880: DOUBLE
58881: EQUAL
58882: IFTRUE 58934
58884: LD_INT 18
58886: DOUBLE
58887: EQUAL
58888: IFTRUE 58934
58890: LD_INT 19
58892: DOUBLE
58893: EQUAL
58894: IFTRUE 58934
58896: LD_INT 22
58898: DOUBLE
58899: EQUAL
58900: IFTRUE 58934
58902: LD_INT 20
58904: DOUBLE
58905: EQUAL
58906: IFTRUE 58934
58908: LD_INT 21
58910: DOUBLE
58911: EQUAL
58912: IFTRUE 58934
58914: LD_INT 23
58916: DOUBLE
58917: EQUAL
58918: IFTRUE 58934
58920: LD_INT 24
58922: DOUBLE
58923: EQUAL
58924: IFTRUE 58934
58926: LD_INT 25
58928: DOUBLE
58929: EQUAL
58930: IFTRUE 58934
58932: GO 58990
58934: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58935: LD_ADDR_VAR 0 9
58939: PUSH
58940: LD_VAR 0 35
58944: PUSH
58945: LD_VAR 0 36
58949: PUSH
58950: LD_VAR 0 37
58954: PUSH
58955: LD_VAR 0 38
58959: PUSH
58960: LD_VAR 0 39
58964: PUSH
58965: LD_VAR 0 40
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: PUSH
58978: LD_VAR 0 4
58982: PUSH
58983: LD_INT 1
58985: PLUS
58986: ARRAY
58987: ST_TO_ADDR
58988: GO 59355
58990: LD_INT 6
58992: DOUBLE
58993: EQUAL
58994: IFTRUE 59046
58996: LD_INT 7
58998: DOUBLE
58999: EQUAL
59000: IFTRUE 59046
59002: LD_INT 8
59004: DOUBLE
59005: EQUAL
59006: IFTRUE 59046
59008: LD_INT 13
59010: DOUBLE
59011: EQUAL
59012: IFTRUE 59046
59014: LD_INT 12
59016: DOUBLE
59017: EQUAL
59018: IFTRUE 59046
59020: LD_INT 15
59022: DOUBLE
59023: EQUAL
59024: IFTRUE 59046
59026: LD_INT 11
59028: DOUBLE
59029: EQUAL
59030: IFTRUE 59046
59032: LD_INT 14
59034: DOUBLE
59035: EQUAL
59036: IFTRUE 59046
59038: LD_INT 10
59040: DOUBLE
59041: EQUAL
59042: IFTRUE 59046
59044: GO 59102
59046: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59047: LD_ADDR_VAR 0 9
59051: PUSH
59052: LD_VAR 0 41
59056: PUSH
59057: LD_VAR 0 42
59061: PUSH
59062: LD_VAR 0 43
59066: PUSH
59067: LD_VAR 0 44
59071: PUSH
59072: LD_VAR 0 45
59076: PUSH
59077: LD_VAR 0 46
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: PUSH
59090: LD_VAR 0 4
59094: PUSH
59095: LD_INT 1
59097: PLUS
59098: ARRAY
59099: ST_TO_ADDR
59100: GO 59355
59102: LD_INT 36
59104: DOUBLE
59105: EQUAL
59106: IFTRUE 59110
59108: GO 59166
59110: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59111: LD_ADDR_VAR 0 9
59115: PUSH
59116: LD_VAR 0 47
59120: PUSH
59121: LD_VAR 0 48
59125: PUSH
59126: LD_VAR 0 49
59130: PUSH
59131: LD_VAR 0 50
59135: PUSH
59136: LD_VAR 0 51
59140: PUSH
59141: LD_VAR 0 52
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: PUSH
59154: LD_VAR 0 4
59158: PUSH
59159: LD_INT 1
59161: PLUS
59162: ARRAY
59163: ST_TO_ADDR
59164: GO 59355
59166: LD_INT 4
59168: DOUBLE
59169: EQUAL
59170: IFTRUE 59192
59172: LD_INT 5
59174: DOUBLE
59175: EQUAL
59176: IFTRUE 59192
59178: LD_INT 34
59180: DOUBLE
59181: EQUAL
59182: IFTRUE 59192
59184: LD_INT 37
59186: DOUBLE
59187: EQUAL
59188: IFTRUE 59192
59190: GO 59248
59192: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59193: LD_ADDR_VAR 0 9
59197: PUSH
59198: LD_VAR 0 53
59202: PUSH
59203: LD_VAR 0 54
59207: PUSH
59208: LD_VAR 0 55
59212: PUSH
59213: LD_VAR 0 56
59217: PUSH
59218: LD_VAR 0 57
59222: PUSH
59223: LD_VAR 0 58
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: PUSH
59236: LD_VAR 0 4
59240: PUSH
59241: LD_INT 1
59243: PLUS
59244: ARRAY
59245: ST_TO_ADDR
59246: GO 59355
59248: LD_INT 31
59250: DOUBLE
59251: EQUAL
59252: IFTRUE 59298
59254: LD_INT 32
59256: DOUBLE
59257: EQUAL
59258: IFTRUE 59298
59260: LD_INT 33
59262: DOUBLE
59263: EQUAL
59264: IFTRUE 59298
59266: LD_INT 27
59268: DOUBLE
59269: EQUAL
59270: IFTRUE 59298
59272: LD_INT 26
59274: DOUBLE
59275: EQUAL
59276: IFTRUE 59298
59278: LD_INT 28
59280: DOUBLE
59281: EQUAL
59282: IFTRUE 59298
59284: LD_INT 29
59286: DOUBLE
59287: EQUAL
59288: IFTRUE 59298
59290: LD_INT 30
59292: DOUBLE
59293: EQUAL
59294: IFTRUE 59298
59296: GO 59354
59298: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59299: LD_ADDR_VAR 0 9
59303: PUSH
59304: LD_VAR 0 59
59308: PUSH
59309: LD_VAR 0 60
59313: PUSH
59314: LD_VAR 0 61
59318: PUSH
59319: LD_VAR 0 62
59323: PUSH
59324: LD_VAR 0 63
59328: PUSH
59329: LD_VAR 0 64
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: PUSH
59342: LD_VAR 0 4
59346: PUSH
59347: LD_INT 1
59349: PLUS
59350: ARRAY
59351: ST_TO_ADDR
59352: GO 59355
59354: POP
// temp_list2 = [ ] ;
59355: LD_ADDR_VAR 0 10
59359: PUSH
59360: EMPTY
59361: ST_TO_ADDR
// for i in temp_list do
59362: LD_ADDR_VAR 0 8
59366: PUSH
59367: LD_VAR 0 9
59371: PUSH
59372: FOR_IN
59373: IFFALSE 59425
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59375: LD_ADDR_VAR 0 10
59379: PUSH
59380: LD_VAR 0 10
59384: PUSH
59385: LD_VAR 0 8
59389: PUSH
59390: LD_INT 1
59392: ARRAY
59393: PUSH
59394: LD_VAR 0 2
59398: PLUS
59399: PUSH
59400: LD_VAR 0 8
59404: PUSH
59405: LD_INT 2
59407: ARRAY
59408: PUSH
59409: LD_VAR 0 3
59413: PLUS
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: EMPTY
59420: LIST
59421: ADD
59422: ST_TO_ADDR
59423: GO 59372
59425: POP
59426: POP
// result = temp_list2 ;
59427: LD_ADDR_VAR 0 7
59431: PUSH
59432: LD_VAR 0 10
59436: ST_TO_ADDR
// end ;
59437: LD_VAR 0 7
59441: RET
// export function EnemyInRange ( unit , dist ) ; begin
59442: LD_INT 0
59444: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59445: LD_ADDR_VAR 0 3
59449: PUSH
59450: LD_VAR 0 1
59454: PPUSH
59455: CALL_OW 255
59459: PPUSH
59460: LD_VAR 0 1
59464: PPUSH
59465: CALL_OW 250
59469: PPUSH
59470: LD_VAR 0 1
59474: PPUSH
59475: CALL_OW 251
59479: PPUSH
59480: LD_VAR 0 2
59484: PPUSH
59485: CALL 32815 0 4
59489: PUSH
59490: LD_INT 4
59492: ARRAY
59493: ST_TO_ADDR
// end ;
59494: LD_VAR 0 3
59498: RET
// export function PlayerSeeMe ( unit ) ; begin
59499: LD_INT 0
59501: PPUSH
// result := See ( your_side , unit ) ;
59502: LD_ADDR_VAR 0 2
59506: PUSH
59507: LD_OWVAR 2
59511: PPUSH
59512: LD_VAR 0 1
59516: PPUSH
59517: CALL_OW 292
59521: ST_TO_ADDR
// end ;
59522: LD_VAR 0 2
59526: RET
// export function ReverseDir ( unit ) ; begin
59527: LD_INT 0
59529: PPUSH
// if not unit then
59530: LD_VAR 0 1
59534: NOT
59535: IFFALSE 59539
// exit ;
59537: GO 59562
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59539: LD_ADDR_VAR 0 2
59543: PUSH
59544: LD_VAR 0 1
59548: PPUSH
59549: CALL_OW 254
59553: PUSH
59554: LD_INT 3
59556: PLUS
59557: PUSH
59558: LD_INT 6
59560: MOD
59561: ST_TO_ADDR
// end ;
59562: LD_VAR 0 2
59566: RET
// export function ReverseArray ( array ) ; var i ; begin
59567: LD_INT 0
59569: PPUSH
59570: PPUSH
// if not array then
59571: LD_VAR 0 1
59575: NOT
59576: IFFALSE 59580
// exit ;
59578: GO 59635
// result := [ ] ;
59580: LD_ADDR_VAR 0 2
59584: PUSH
59585: EMPTY
59586: ST_TO_ADDR
// for i := array downto 1 do
59587: LD_ADDR_VAR 0 3
59591: PUSH
59592: DOUBLE
59593: LD_VAR 0 1
59597: INC
59598: ST_TO_ADDR
59599: LD_INT 1
59601: PUSH
59602: FOR_DOWNTO
59603: IFFALSE 59633
// result := Join ( result , array [ i ] ) ;
59605: LD_ADDR_VAR 0 2
59609: PUSH
59610: LD_VAR 0 2
59614: PPUSH
59615: LD_VAR 0 1
59619: PUSH
59620: LD_VAR 0 3
59624: ARRAY
59625: PPUSH
59626: CALL 64291 0 2
59630: ST_TO_ADDR
59631: GO 59602
59633: POP
59634: POP
// end ;
59635: LD_VAR 0 2
59639: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
59640: LD_INT 0
59642: PPUSH
59643: PPUSH
59644: PPUSH
59645: PPUSH
59646: PPUSH
59647: PPUSH
// if not unit or not hexes then
59648: LD_VAR 0 1
59652: NOT
59653: PUSH
59654: LD_VAR 0 2
59658: NOT
59659: OR
59660: IFFALSE 59664
// exit ;
59662: GO 59787
// dist := 9999 ;
59664: LD_ADDR_VAR 0 5
59668: PUSH
59669: LD_INT 9999
59671: ST_TO_ADDR
// for i = 1 to hexes do
59672: LD_ADDR_VAR 0 4
59676: PUSH
59677: DOUBLE
59678: LD_INT 1
59680: DEC
59681: ST_TO_ADDR
59682: LD_VAR 0 2
59686: PUSH
59687: FOR_TO
59688: IFFALSE 59775
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59690: LD_ADDR_VAR 0 6
59694: PUSH
59695: LD_VAR 0 1
59699: PPUSH
59700: LD_VAR 0 2
59704: PUSH
59705: LD_VAR 0 4
59709: ARRAY
59710: PUSH
59711: LD_INT 1
59713: ARRAY
59714: PPUSH
59715: LD_VAR 0 2
59719: PUSH
59720: LD_VAR 0 4
59724: ARRAY
59725: PUSH
59726: LD_INT 2
59728: ARRAY
59729: PPUSH
59730: CALL_OW 297
59734: ST_TO_ADDR
// if tdist < dist then
59735: LD_VAR 0 6
59739: PUSH
59740: LD_VAR 0 5
59744: LESS
59745: IFFALSE 59773
// begin hex := hexes [ i ] ;
59747: LD_ADDR_VAR 0 8
59751: PUSH
59752: LD_VAR 0 2
59756: PUSH
59757: LD_VAR 0 4
59761: ARRAY
59762: ST_TO_ADDR
// dist := tdist ;
59763: LD_ADDR_VAR 0 5
59767: PUSH
59768: LD_VAR 0 6
59772: ST_TO_ADDR
// end ; end ;
59773: GO 59687
59775: POP
59776: POP
// result := hex ;
59777: LD_ADDR_VAR 0 3
59781: PUSH
59782: LD_VAR 0 8
59786: ST_TO_ADDR
// end ;
59787: LD_VAR 0 3
59791: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59792: LD_INT 0
59794: PPUSH
59795: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59796: LD_VAR 0 1
59800: NOT
59801: PUSH
59802: LD_VAR 0 1
59806: PUSH
59807: LD_INT 21
59809: PUSH
59810: LD_INT 2
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 23
59819: PUSH
59820: LD_INT 2
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PPUSH
59831: CALL_OW 69
59835: IN
59836: NOT
59837: OR
59838: IFFALSE 59842
// exit ;
59840: GO 59889
// for i = 1 to 3 do
59842: LD_ADDR_VAR 0 3
59846: PUSH
59847: DOUBLE
59848: LD_INT 1
59850: DEC
59851: ST_TO_ADDR
59852: LD_INT 3
59854: PUSH
59855: FOR_TO
59856: IFFALSE 59887
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59858: LD_VAR 0 1
59862: PPUSH
59863: CALL_OW 250
59867: PPUSH
59868: LD_VAR 0 1
59872: PPUSH
59873: CALL_OW 251
59877: PPUSH
59878: LD_INT 1
59880: PPUSH
59881: CALL_OW 453
59885: GO 59855
59887: POP
59888: POP
// end ;
59889: LD_VAR 0 2
59893: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59894: LD_INT 0
59896: PPUSH
59897: PPUSH
59898: PPUSH
59899: PPUSH
59900: PPUSH
59901: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59902: LD_VAR 0 1
59906: NOT
59907: PUSH
59908: LD_VAR 0 2
59912: NOT
59913: OR
59914: PUSH
59915: LD_VAR 0 1
59919: PPUSH
59920: CALL_OW 314
59924: OR
59925: IFFALSE 59929
// exit ;
59927: GO 60396
// if GetLives ( i ) < 250 then
59929: LD_VAR 0 4
59933: PPUSH
59934: CALL_OW 256
59938: PUSH
59939: LD_INT 250
59941: LESS
59942: IFFALSE 59955
// begin ComAutodestruct ( i ) ;
59944: LD_VAR 0 4
59948: PPUSH
59949: CALL 59792 0 1
// exit ;
59953: GO 60396
// end ; x := GetX ( enemy_unit ) ;
59955: LD_ADDR_VAR 0 7
59959: PUSH
59960: LD_VAR 0 2
59964: PPUSH
59965: CALL_OW 250
59969: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59970: LD_ADDR_VAR 0 8
59974: PUSH
59975: LD_VAR 0 2
59979: PPUSH
59980: CALL_OW 251
59984: ST_TO_ADDR
// if not x or not y then
59985: LD_VAR 0 7
59989: NOT
59990: PUSH
59991: LD_VAR 0 8
59995: NOT
59996: OR
59997: IFFALSE 60001
// exit ;
59999: GO 60396
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60001: LD_ADDR_VAR 0 6
60005: PUSH
60006: LD_VAR 0 7
60010: PPUSH
60011: LD_INT 0
60013: PPUSH
60014: LD_INT 4
60016: PPUSH
60017: CALL_OW 272
60021: PUSH
60022: LD_VAR 0 8
60026: PPUSH
60027: LD_INT 0
60029: PPUSH
60030: LD_INT 4
60032: PPUSH
60033: CALL_OW 273
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_VAR 0 7
60046: PPUSH
60047: LD_INT 1
60049: PPUSH
60050: LD_INT 4
60052: PPUSH
60053: CALL_OW 272
60057: PUSH
60058: LD_VAR 0 8
60062: PPUSH
60063: LD_INT 1
60065: PPUSH
60066: LD_INT 4
60068: PPUSH
60069: CALL_OW 273
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_VAR 0 7
60082: PPUSH
60083: LD_INT 2
60085: PPUSH
60086: LD_INT 4
60088: PPUSH
60089: CALL_OW 272
60093: PUSH
60094: LD_VAR 0 8
60098: PPUSH
60099: LD_INT 2
60101: PPUSH
60102: LD_INT 4
60104: PPUSH
60105: CALL_OW 273
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_VAR 0 7
60118: PPUSH
60119: LD_INT 3
60121: PPUSH
60122: LD_INT 4
60124: PPUSH
60125: CALL_OW 272
60129: PUSH
60130: LD_VAR 0 8
60134: PPUSH
60135: LD_INT 3
60137: PPUSH
60138: LD_INT 4
60140: PPUSH
60141: CALL_OW 273
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_VAR 0 7
60154: PPUSH
60155: LD_INT 4
60157: PPUSH
60158: LD_INT 4
60160: PPUSH
60161: CALL_OW 272
60165: PUSH
60166: LD_VAR 0 8
60170: PPUSH
60171: LD_INT 4
60173: PPUSH
60174: LD_INT 4
60176: PPUSH
60177: CALL_OW 273
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_VAR 0 7
60190: PPUSH
60191: LD_INT 5
60193: PPUSH
60194: LD_INT 4
60196: PPUSH
60197: CALL_OW 272
60201: PUSH
60202: LD_VAR 0 8
60206: PPUSH
60207: LD_INT 5
60209: PPUSH
60210: LD_INT 4
60212: PPUSH
60213: CALL_OW 273
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: ST_TO_ADDR
// for i = tmp downto 1 do
60230: LD_ADDR_VAR 0 4
60234: PUSH
60235: DOUBLE
60236: LD_VAR 0 6
60240: INC
60241: ST_TO_ADDR
60242: LD_INT 1
60244: PUSH
60245: FOR_DOWNTO
60246: IFFALSE 60347
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60248: LD_VAR 0 6
60252: PUSH
60253: LD_VAR 0 4
60257: ARRAY
60258: PUSH
60259: LD_INT 1
60261: ARRAY
60262: PPUSH
60263: LD_VAR 0 6
60267: PUSH
60268: LD_VAR 0 4
60272: ARRAY
60273: PUSH
60274: LD_INT 2
60276: ARRAY
60277: PPUSH
60278: CALL_OW 488
60282: NOT
60283: PUSH
60284: LD_VAR 0 6
60288: PUSH
60289: LD_VAR 0 4
60293: ARRAY
60294: PUSH
60295: LD_INT 1
60297: ARRAY
60298: PPUSH
60299: LD_VAR 0 6
60303: PUSH
60304: LD_VAR 0 4
60308: ARRAY
60309: PUSH
60310: LD_INT 2
60312: ARRAY
60313: PPUSH
60314: CALL_OW 428
60318: PUSH
60319: LD_INT 0
60321: NONEQUAL
60322: OR
60323: IFFALSE 60345
// tmp := Delete ( tmp , i ) ;
60325: LD_ADDR_VAR 0 6
60329: PUSH
60330: LD_VAR 0 6
60334: PPUSH
60335: LD_VAR 0 4
60339: PPUSH
60340: CALL_OW 3
60344: ST_TO_ADDR
60345: GO 60245
60347: POP
60348: POP
// j := GetClosestHex ( unit , tmp ) ;
60349: LD_ADDR_VAR 0 5
60353: PUSH
60354: LD_VAR 0 1
60358: PPUSH
60359: LD_VAR 0 6
60363: PPUSH
60364: CALL 59640 0 2
60368: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60369: LD_VAR 0 1
60373: PPUSH
60374: LD_VAR 0 5
60378: PUSH
60379: LD_INT 1
60381: ARRAY
60382: PPUSH
60383: LD_VAR 0 5
60387: PUSH
60388: LD_INT 2
60390: ARRAY
60391: PPUSH
60392: CALL_OW 111
// end ;
60396: LD_VAR 0 3
60400: RET
// export function PrepareApemanSoldier ( ) ; begin
60401: LD_INT 0
60403: PPUSH
// uc_nation := 0 ;
60404: LD_ADDR_OWVAR 21
60408: PUSH
60409: LD_INT 0
60411: ST_TO_ADDR
// hc_sex := sex_male ;
60412: LD_ADDR_OWVAR 27
60416: PUSH
60417: LD_INT 1
60419: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60420: LD_ADDR_OWVAR 28
60424: PUSH
60425: LD_INT 15
60427: ST_TO_ADDR
// hc_gallery :=  ;
60428: LD_ADDR_OWVAR 33
60432: PUSH
60433: LD_STRING 
60435: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60436: LD_ADDR_OWVAR 31
60440: PUSH
60441: LD_INT 0
60443: PPUSH
60444: LD_INT 3
60446: PPUSH
60447: CALL_OW 12
60451: PUSH
60452: LD_INT 0
60454: PPUSH
60455: LD_INT 3
60457: PPUSH
60458: CALL_OW 12
60462: PUSH
60463: LD_INT 0
60465: PUSH
60466: LD_INT 0
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: ST_TO_ADDR
// end ;
60475: LD_VAR 0 1
60479: RET
// export function PrepareApemanEngineer ( ) ; begin
60480: LD_INT 0
60482: PPUSH
// uc_nation := 0 ;
60483: LD_ADDR_OWVAR 21
60487: PUSH
60488: LD_INT 0
60490: ST_TO_ADDR
// hc_sex := sex_male ;
60491: LD_ADDR_OWVAR 27
60495: PUSH
60496: LD_INT 1
60498: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60499: LD_ADDR_OWVAR 28
60503: PUSH
60504: LD_INT 16
60506: ST_TO_ADDR
// hc_gallery :=  ;
60507: LD_ADDR_OWVAR 33
60511: PUSH
60512: LD_STRING 
60514: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60515: LD_ADDR_OWVAR 31
60519: PUSH
60520: LD_INT 0
60522: PPUSH
60523: LD_INT 3
60525: PPUSH
60526: CALL_OW 12
60530: PUSH
60531: LD_INT 0
60533: PPUSH
60534: LD_INT 3
60536: PPUSH
60537: CALL_OW 12
60541: PUSH
60542: LD_INT 0
60544: PUSH
60545: LD_INT 0
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: ST_TO_ADDR
// end ;
60554: LD_VAR 0 1
60558: RET
// export function PrepareApeman ( agressivity ) ; begin
60559: LD_INT 0
60561: PPUSH
// uc_side := 0 ;
60562: LD_ADDR_OWVAR 20
60566: PUSH
60567: LD_INT 0
60569: ST_TO_ADDR
// uc_nation := 0 ;
60570: LD_ADDR_OWVAR 21
60574: PUSH
60575: LD_INT 0
60577: ST_TO_ADDR
// hc_sex := sex_male ;
60578: LD_ADDR_OWVAR 27
60582: PUSH
60583: LD_INT 1
60585: ST_TO_ADDR
// hc_class := class_apeman ;
60586: LD_ADDR_OWVAR 28
60590: PUSH
60591: LD_INT 12
60593: ST_TO_ADDR
// hc_gallery :=  ;
60594: LD_ADDR_OWVAR 33
60598: PUSH
60599: LD_STRING 
60601: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60602: LD_ADDR_OWVAR 35
60606: PUSH
60607: LD_VAR 0 1
60611: NEG
60612: PPUSH
60613: LD_VAR 0 1
60617: PPUSH
60618: CALL_OW 12
60622: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60623: LD_ADDR_OWVAR 31
60627: PUSH
60628: LD_INT 0
60630: PPUSH
60631: LD_INT 3
60633: PPUSH
60634: CALL_OW 12
60638: PUSH
60639: LD_INT 0
60641: PPUSH
60642: LD_INT 3
60644: PPUSH
60645: CALL_OW 12
60649: PUSH
60650: LD_INT 0
60652: PUSH
60653: LD_INT 0
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: ST_TO_ADDR
// end ;
60662: LD_VAR 0 2
60666: RET
// export function PrepareTiger ( agressivity ) ; begin
60667: LD_INT 0
60669: PPUSH
// uc_side := 0 ;
60670: LD_ADDR_OWVAR 20
60674: PUSH
60675: LD_INT 0
60677: ST_TO_ADDR
// uc_nation := 0 ;
60678: LD_ADDR_OWVAR 21
60682: PUSH
60683: LD_INT 0
60685: ST_TO_ADDR
// hc_class := class_tiger ;
60686: LD_ADDR_OWVAR 28
60690: PUSH
60691: LD_INT 14
60693: ST_TO_ADDR
// hc_gallery :=  ;
60694: LD_ADDR_OWVAR 33
60698: PUSH
60699: LD_STRING 
60701: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60702: LD_ADDR_OWVAR 35
60706: PUSH
60707: LD_VAR 0 1
60711: NEG
60712: PPUSH
60713: LD_VAR 0 1
60717: PPUSH
60718: CALL_OW 12
60722: ST_TO_ADDR
// end ;
60723: LD_VAR 0 2
60727: RET
// export function PrepareEnchidna ( ) ; begin
60728: LD_INT 0
60730: PPUSH
// uc_side := 0 ;
60731: LD_ADDR_OWVAR 20
60735: PUSH
60736: LD_INT 0
60738: ST_TO_ADDR
// uc_nation := 0 ;
60739: LD_ADDR_OWVAR 21
60743: PUSH
60744: LD_INT 0
60746: ST_TO_ADDR
// hc_class := class_baggie ;
60747: LD_ADDR_OWVAR 28
60751: PUSH
60752: LD_INT 13
60754: ST_TO_ADDR
// hc_gallery :=  ;
60755: LD_ADDR_OWVAR 33
60759: PUSH
60760: LD_STRING 
60762: ST_TO_ADDR
// end ;
60763: LD_VAR 0 1
60767: RET
// export function PrepareFrog ( ) ; begin
60768: LD_INT 0
60770: PPUSH
// uc_side := 0 ;
60771: LD_ADDR_OWVAR 20
60775: PUSH
60776: LD_INT 0
60778: ST_TO_ADDR
// uc_nation := 0 ;
60779: LD_ADDR_OWVAR 21
60783: PUSH
60784: LD_INT 0
60786: ST_TO_ADDR
// hc_class := class_frog ;
60787: LD_ADDR_OWVAR 28
60791: PUSH
60792: LD_INT 19
60794: ST_TO_ADDR
// hc_gallery :=  ;
60795: LD_ADDR_OWVAR 33
60799: PUSH
60800: LD_STRING 
60802: ST_TO_ADDR
// end ;
60803: LD_VAR 0 1
60807: RET
// export function PrepareFish ( ) ; begin
60808: LD_INT 0
60810: PPUSH
// uc_side := 0 ;
60811: LD_ADDR_OWVAR 20
60815: PUSH
60816: LD_INT 0
60818: ST_TO_ADDR
// uc_nation := 0 ;
60819: LD_ADDR_OWVAR 21
60823: PUSH
60824: LD_INT 0
60826: ST_TO_ADDR
// hc_class := class_fish ;
60827: LD_ADDR_OWVAR 28
60831: PUSH
60832: LD_INT 20
60834: ST_TO_ADDR
// hc_gallery :=  ;
60835: LD_ADDR_OWVAR 33
60839: PUSH
60840: LD_STRING 
60842: ST_TO_ADDR
// end ;
60843: LD_VAR 0 1
60847: RET
// export function PrepareBird ( ) ; begin
60848: LD_INT 0
60850: PPUSH
// uc_side := 0 ;
60851: LD_ADDR_OWVAR 20
60855: PUSH
60856: LD_INT 0
60858: ST_TO_ADDR
// uc_nation := 0 ;
60859: LD_ADDR_OWVAR 21
60863: PUSH
60864: LD_INT 0
60866: ST_TO_ADDR
// hc_class := class_phororhacos ;
60867: LD_ADDR_OWVAR 28
60871: PUSH
60872: LD_INT 18
60874: ST_TO_ADDR
// hc_gallery :=  ;
60875: LD_ADDR_OWVAR 33
60879: PUSH
60880: LD_STRING 
60882: ST_TO_ADDR
// end ;
60883: LD_VAR 0 1
60887: RET
// export function PrepareHorse ( ) ; begin
60888: LD_INT 0
60890: PPUSH
// uc_side := 0 ;
60891: LD_ADDR_OWVAR 20
60895: PUSH
60896: LD_INT 0
60898: ST_TO_ADDR
// uc_nation := 0 ;
60899: LD_ADDR_OWVAR 21
60903: PUSH
60904: LD_INT 0
60906: ST_TO_ADDR
// hc_class := class_horse ;
60907: LD_ADDR_OWVAR 28
60911: PUSH
60912: LD_INT 21
60914: ST_TO_ADDR
// hc_gallery :=  ;
60915: LD_ADDR_OWVAR 33
60919: PUSH
60920: LD_STRING 
60922: ST_TO_ADDR
// end ;
60923: LD_VAR 0 1
60927: RET
// export function PrepareMastodont ( ) ; begin
60928: LD_INT 0
60930: PPUSH
// uc_side := 0 ;
60931: LD_ADDR_OWVAR 20
60935: PUSH
60936: LD_INT 0
60938: ST_TO_ADDR
// uc_nation := 0 ;
60939: LD_ADDR_OWVAR 21
60943: PUSH
60944: LD_INT 0
60946: ST_TO_ADDR
// vc_chassis := class_mastodont ;
60947: LD_ADDR_OWVAR 37
60951: PUSH
60952: LD_INT 31
60954: ST_TO_ADDR
// vc_control := control_rider ;
60955: LD_ADDR_OWVAR 38
60959: PUSH
60960: LD_INT 4
60962: ST_TO_ADDR
// end ;
60963: LD_VAR 0 1
60967: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60968: LD_INT 0
60970: PPUSH
60971: PPUSH
60972: PPUSH
// uc_side = 0 ;
60973: LD_ADDR_OWVAR 20
60977: PUSH
60978: LD_INT 0
60980: ST_TO_ADDR
// uc_nation = 0 ;
60981: LD_ADDR_OWVAR 21
60985: PUSH
60986: LD_INT 0
60988: ST_TO_ADDR
// InitHc_All ( ) ;
60989: CALL_OW 584
// InitVc ;
60993: CALL_OW 20
// if mastodonts then
60997: LD_VAR 0 6
61001: IFFALSE 61068
// for i = 1 to mastodonts do
61003: LD_ADDR_VAR 0 11
61007: PUSH
61008: DOUBLE
61009: LD_INT 1
61011: DEC
61012: ST_TO_ADDR
61013: LD_VAR 0 6
61017: PUSH
61018: FOR_TO
61019: IFFALSE 61066
// begin vc_chassis := 31 ;
61021: LD_ADDR_OWVAR 37
61025: PUSH
61026: LD_INT 31
61028: ST_TO_ADDR
// vc_control := control_rider ;
61029: LD_ADDR_OWVAR 38
61033: PUSH
61034: LD_INT 4
61036: ST_TO_ADDR
// animal := CreateVehicle ;
61037: LD_ADDR_VAR 0 12
61041: PUSH
61042: CALL_OW 45
61046: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61047: LD_VAR 0 12
61051: PPUSH
61052: LD_VAR 0 8
61056: PPUSH
61057: LD_INT 0
61059: PPUSH
61060: CALL 63196 0 3
// end ;
61064: GO 61018
61066: POP
61067: POP
// if horses then
61068: LD_VAR 0 5
61072: IFFALSE 61139
// for i = 1 to horses do
61074: LD_ADDR_VAR 0 11
61078: PUSH
61079: DOUBLE
61080: LD_INT 1
61082: DEC
61083: ST_TO_ADDR
61084: LD_VAR 0 5
61088: PUSH
61089: FOR_TO
61090: IFFALSE 61137
// begin hc_class := 21 ;
61092: LD_ADDR_OWVAR 28
61096: PUSH
61097: LD_INT 21
61099: ST_TO_ADDR
// hc_gallery :=  ;
61100: LD_ADDR_OWVAR 33
61104: PUSH
61105: LD_STRING 
61107: ST_TO_ADDR
// animal := CreateHuman ;
61108: LD_ADDR_VAR 0 12
61112: PUSH
61113: CALL_OW 44
61117: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61118: LD_VAR 0 12
61122: PPUSH
61123: LD_VAR 0 8
61127: PPUSH
61128: LD_INT 0
61130: PPUSH
61131: CALL 63196 0 3
// end ;
61135: GO 61089
61137: POP
61138: POP
// if birds then
61139: LD_VAR 0 1
61143: IFFALSE 61210
// for i = 1 to birds do
61145: LD_ADDR_VAR 0 11
61149: PUSH
61150: DOUBLE
61151: LD_INT 1
61153: DEC
61154: ST_TO_ADDR
61155: LD_VAR 0 1
61159: PUSH
61160: FOR_TO
61161: IFFALSE 61208
// begin hc_class := 18 ;
61163: LD_ADDR_OWVAR 28
61167: PUSH
61168: LD_INT 18
61170: ST_TO_ADDR
// hc_gallery =  ;
61171: LD_ADDR_OWVAR 33
61175: PUSH
61176: LD_STRING 
61178: ST_TO_ADDR
// animal := CreateHuman ;
61179: LD_ADDR_VAR 0 12
61183: PUSH
61184: CALL_OW 44
61188: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61189: LD_VAR 0 12
61193: PPUSH
61194: LD_VAR 0 8
61198: PPUSH
61199: LD_INT 0
61201: PPUSH
61202: CALL 63196 0 3
// end ;
61206: GO 61160
61208: POP
61209: POP
// if tigers then
61210: LD_VAR 0 2
61214: IFFALSE 61298
// for i = 1 to tigers do
61216: LD_ADDR_VAR 0 11
61220: PUSH
61221: DOUBLE
61222: LD_INT 1
61224: DEC
61225: ST_TO_ADDR
61226: LD_VAR 0 2
61230: PUSH
61231: FOR_TO
61232: IFFALSE 61296
// begin hc_class = class_tiger ;
61234: LD_ADDR_OWVAR 28
61238: PUSH
61239: LD_INT 14
61241: ST_TO_ADDR
// hc_gallery =  ;
61242: LD_ADDR_OWVAR 33
61246: PUSH
61247: LD_STRING 
61249: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61250: LD_ADDR_OWVAR 35
61254: PUSH
61255: LD_INT 7
61257: NEG
61258: PPUSH
61259: LD_INT 7
61261: PPUSH
61262: CALL_OW 12
61266: ST_TO_ADDR
// animal := CreateHuman ;
61267: LD_ADDR_VAR 0 12
61271: PUSH
61272: CALL_OW 44
61276: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61277: LD_VAR 0 12
61281: PPUSH
61282: LD_VAR 0 8
61286: PPUSH
61287: LD_INT 0
61289: PPUSH
61290: CALL 63196 0 3
// end ;
61294: GO 61231
61296: POP
61297: POP
// if apemans then
61298: LD_VAR 0 3
61302: IFFALSE 61425
// for i = 1 to apemans do
61304: LD_ADDR_VAR 0 11
61308: PUSH
61309: DOUBLE
61310: LD_INT 1
61312: DEC
61313: ST_TO_ADDR
61314: LD_VAR 0 3
61318: PUSH
61319: FOR_TO
61320: IFFALSE 61423
// begin hc_class = class_apeman ;
61322: LD_ADDR_OWVAR 28
61326: PUSH
61327: LD_INT 12
61329: ST_TO_ADDR
// hc_gallery =  ;
61330: LD_ADDR_OWVAR 33
61334: PUSH
61335: LD_STRING 
61337: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61338: LD_ADDR_OWVAR 35
61342: PUSH
61343: LD_INT 2
61345: NEG
61346: PPUSH
61347: LD_INT 2
61349: PPUSH
61350: CALL_OW 12
61354: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61355: LD_ADDR_OWVAR 31
61359: PUSH
61360: LD_INT 1
61362: PPUSH
61363: LD_INT 3
61365: PPUSH
61366: CALL_OW 12
61370: PUSH
61371: LD_INT 1
61373: PPUSH
61374: LD_INT 3
61376: PPUSH
61377: CALL_OW 12
61381: PUSH
61382: LD_INT 0
61384: PUSH
61385: LD_INT 0
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: ST_TO_ADDR
// animal := CreateHuman ;
61394: LD_ADDR_VAR 0 12
61398: PUSH
61399: CALL_OW 44
61403: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61404: LD_VAR 0 12
61408: PPUSH
61409: LD_VAR 0 8
61413: PPUSH
61414: LD_INT 0
61416: PPUSH
61417: CALL 63196 0 3
// end ;
61421: GO 61319
61423: POP
61424: POP
// if enchidnas then
61425: LD_VAR 0 4
61429: IFFALSE 61496
// for i = 1 to enchidnas do
61431: LD_ADDR_VAR 0 11
61435: PUSH
61436: DOUBLE
61437: LD_INT 1
61439: DEC
61440: ST_TO_ADDR
61441: LD_VAR 0 4
61445: PUSH
61446: FOR_TO
61447: IFFALSE 61494
// begin hc_class = 13 ;
61449: LD_ADDR_OWVAR 28
61453: PUSH
61454: LD_INT 13
61456: ST_TO_ADDR
// hc_gallery =  ;
61457: LD_ADDR_OWVAR 33
61461: PUSH
61462: LD_STRING 
61464: ST_TO_ADDR
// animal := CreateHuman ;
61465: LD_ADDR_VAR 0 12
61469: PUSH
61470: CALL_OW 44
61474: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61475: LD_VAR 0 12
61479: PPUSH
61480: LD_VAR 0 8
61484: PPUSH
61485: LD_INT 0
61487: PPUSH
61488: CALL 63196 0 3
// end ;
61492: GO 61446
61494: POP
61495: POP
// if fishes then
61496: LD_VAR 0 7
61500: IFFALSE 61567
// for i = 1 to fishes do
61502: LD_ADDR_VAR 0 11
61506: PUSH
61507: DOUBLE
61508: LD_INT 1
61510: DEC
61511: ST_TO_ADDR
61512: LD_VAR 0 7
61516: PUSH
61517: FOR_TO
61518: IFFALSE 61565
// begin hc_class = 20 ;
61520: LD_ADDR_OWVAR 28
61524: PUSH
61525: LD_INT 20
61527: ST_TO_ADDR
// hc_gallery =  ;
61528: LD_ADDR_OWVAR 33
61532: PUSH
61533: LD_STRING 
61535: ST_TO_ADDR
// animal := CreateHuman ;
61536: LD_ADDR_VAR 0 12
61540: PUSH
61541: CALL_OW 44
61545: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61546: LD_VAR 0 12
61550: PPUSH
61551: LD_VAR 0 9
61555: PPUSH
61556: LD_INT 0
61558: PPUSH
61559: CALL 63196 0 3
// end ;
61563: GO 61517
61565: POP
61566: POP
// end ;
61567: LD_VAR 0 10
61571: RET
// export function WantHeal ( sci , unit ) ; begin
61572: LD_INT 0
61574: PPUSH
// if GetTaskList ( sci ) > 0 then
61575: LD_VAR 0 1
61579: PPUSH
61580: CALL_OW 437
61584: PUSH
61585: LD_INT 0
61587: GREATER
61588: IFFALSE 61658
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61590: LD_VAR 0 1
61594: PPUSH
61595: CALL_OW 437
61599: PUSH
61600: LD_INT 1
61602: ARRAY
61603: PUSH
61604: LD_INT 1
61606: ARRAY
61607: PUSH
61608: LD_STRING l
61610: EQUAL
61611: PUSH
61612: LD_VAR 0 1
61616: PPUSH
61617: CALL_OW 437
61621: PUSH
61622: LD_INT 1
61624: ARRAY
61625: PUSH
61626: LD_INT 4
61628: ARRAY
61629: PUSH
61630: LD_VAR 0 2
61634: EQUAL
61635: AND
61636: IFFALSE 61648
// result := true else
61638: LD_ADDR_VAR 0 3
61642: PUSH
61643: LD_INT 1
61645: ST_TO_ADDR
61646: GO 61656
// result := false ;
61648: LD_ADDR_VAR 0 3
61652: PUSH
61653: LD_INT 0
61655: ST_TO_ADDR
// end else
61656: GO 61666
// result := false ;
61658: LD_ADDR_VAR 0 3
61662: PUSH
61663: LD_INT 0
61665: ST_TO_ADDR
// end ;
61666: LD_VAR 0 3
61670: RET
// export function HealTarget ( sci ) ; begin
61671: LD_INT 0
61673: PPUSH
// if not sci then
61674: LD_VAR 0 1
61678: NOT
61679: IFFALSE 61683
// exit ;
61681: GO 61748
// result := 0 ;
61683: LD_ADDR_VAR 0 2
61687: PUSH
61688: LD_INT 0
61690: ST_TO_ADDR
// if GetTaskList ( sci ) then
61691: LD_VAR 0 1
61695: PPUSH
61696: CALL_OW 437
61700: IFFALSE 61748
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61702: LD_VAR 0 1
61706: PPUSH
61707: CALL_OW 437
61711: PUSH
61712: LD_INT 1
61714: ARRAY
61715: PUSH
61716: LD_INT 1
61718: ARRAY
61719: PUSH
61720: LD_STRING l
61722: EQUAL
61723: IFFALSE 61748
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61725: LD_ADDR_VAR 0 2
61729: PUSH
61730: LD_VAR 0 1
61734: PPUSH
61735: CALL_OW 437
61739: PUSH
61740: LD_INT 1
61742: ARRAY
61743: PUSH
61744: LD_INT 4
61746: ARRAY
61747: ST_TO_ADDR
// end ;
61748: LD_VAR 0 2
61752: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61753: LD_INT 0
61755: PPUSH
61756: PPUSH
61757: PPUSH
61758: PPUSH
// if not base_units then
61759: LD_VAR 0 1
61763: NOT
61764: IFFALSE 61768
// exit ;
61766: GO 61855
// result := false ;
61768: LD_ADDR_VAR 0 2
61772: PUSH
61773: LD_INT 0
61775: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61776: LD_ADDR_VAR 0 5
61780: PUSH
61781: LD_VAR 0 1
61785: PPUSH
61786: LD_INT 21
61788: PUSH
61789: LD_INT 3
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PPUSH
61796: CALL_OW 72
61800: ST_TO_ADDR
// if not tmp then
61801: LD_VAR 0 5
61805: NOT
61806: IFFALSE 61810
// exit ;
61808: GO 61855
// for i in tmp do
61810: LD_ADDR_VAR 0 3
61814: PUSH
61815: LD_VAR 0 5
61819: PUSH
61820: FOR_IN
61821: IFFALSE 61853
// begin result := EnemyInRange ( i , 22 ) ;
61823: LD_ADDR_VAR 0 2
61827: PUSH
61828: LD_VAR 0 3
61832: PPUSH
61833: LD_INT 22
61835: PPUSH
61836: CALL 59442 0 2
61840: ST_TO_ADDR
// if result then
61841: LD_VAR 0 2
61845: IFFALSE 61851
// exit ;
61847: POP
61848: POP
61849: GO 61855
// end ;
61851: GO 61820
61853: POP
61854: POP
// end ;
61855: LD_VAR 0 2
61859: RET
// export function FilterByTag ( units , tag ) ; begin
61860: LD_INT 0
61862: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
61863: LD_ADDR_VAR 0 3
61867: PUSH
61868: LD_VAR 0 1
61872: PPUSH
61873: LD_INT 120
61875: PUSH
61876: LD_VAR 0 2
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PPUSH
61885: CALL_OW 72
61889: ST_TO_ADDR
// end ;
61890: LD_VAR 0 3
61894: RET
// export function IsDriver ( un ) ; begin
61895: LD_INT 0
61897: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61898: LD_ADDR_VAR 0 2
61902: PUSH
61903: LD_VAR 0 1
61907: PUSH
61908: LD_INT 55
61910: PUSH
61911: EMPTY
61912: LIST
61913: PPUSH
61914: CALL_OW 69
61918: IN
61919: ST_TO_ADDR
// end ;
61920: LD_VAR 0 2
61924: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61925: LD_INT 0
61927: PPUSH
61928: PPUSH
// list := [ ] ;
61929: LD_ADDR_VAR 0 5
61933: PUSH
61934: EMPTY
61935: ST_TO_ADDR
// case d of 0 :
61936: LD_VAR 0 3
61940: PUSH
61941: LD_INT 0
61943: DOUBLE
61944: EQUAL
61945: IFTRUE 61949
61947: GO 62082
61949: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61950: LD_ADDR_VAR 0 5
61954: PUSH
61955: LD_VAR 0 1
61959: PUSH
61960: LD_INT 4
61962: MINUS
61963: PUSH
61964: LD_VAR 0 2
61968: PUSH
61969: LD_INT 4
61971: MINUS
61972: PUSH
61973: LD_INT 2
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: LIST
61980: PUSH
61981: LD_VAR 0 1
61985: PUSH
61986: LD_INT 3
61988: MINUS
61989: PUSH
61990: LD_VAR 0 2
61994: PUSH
61995: LD_INT 1
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: LIST
62002: PUSH
62003: LD_VAR 0 1
62007: PUSH
62008: LD_INT 4
62010: PLUS
62011: PUSH
62012: LD_VAR 0 2
62016: PUSH
62017: LD_INT 4
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: LIST
62024: PUSH
62025: LD_VAR 0 1
62029: PUSH
62030: LD_INT 3
62032: PLUS
62033: PUSH
62034: LD_VAR 0 2
62038: PUSH
62039: LD_INT 3
62041: PLUS
62042: PUSH
62043: LD_INT 5
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: LIST
62050: PUSH
62051: LD_VAR 0 1
62055: PUSH
62056: LD_VAR 0 2
62060: PUSH
62061: LD_INT 4
62063: PLUS
62064: PUSH
62065: LD_INT 0
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: LIST
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: ST_TO_ADDR
// end ; 1 :
62080: GO 62780
62082: LD_INT 1
62084: DOUBLE
62085: EQUAL
62086: IFTRUE 62090
62088: GO 62223
62090: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62091: LD_ADDR_VAR 0 5
62095: PUSH
62096: LD_VAR 0 1
62100: PUSH
62101: LD_VAR 0 2
62105: PUSH
62106: LD_INT 4
62108: MINUS
62109: PUSH
62110: LD_INT 3
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: LIST
62117: PUSH
62118: LD_VAR 0 1
62122: PUSH
62123: LD_INT 3
62125: MINUS
62126: PUSH
62127: LD_VAR 0 2
62131: PUSH
62132: LD_INT 3
62134: MINUS
62135: PUSH
62136: LD_INT 2
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: LIST
62143: PUSH
62144: LD_VAR 0 1
62148: PUSH
62149: LD_INT 4
62151: MINUS
62152: PUSH
62153: LD_VAR 0 2
62157: PUSH
62158: LD_INT 1
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: LIST
62165: PUSH
62166: LD_VAR 0 1
62170: PUSH
62171: LD_VAR 0 2
62175: PUSH
62176: LD_INT 3
62178: PLUS
62179: PUSH
62180: LD_INT 0
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: LIST
62187: PUSH
62188: LD_VAR 0 1
62192: PUSH
62193: LD_INT 4
62195: PLUS
62196: PUSH
62197: LD_VAR 0 2
62201: PUSH
62202: LD_INT 4
62204: PLUS
62205: PUSH
62206: LD_INT 5
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: LIST
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: ST_TO_ADDR
// end ; 2 :
62221: GO 62780
62223: LD_INT 2
62225: DOUBLE
62226: EQUAL
62227: IFTRUE 62231
62229: GO 62360
62231: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62232: LD_ADDR_VAR 0 5
62236: PUSH
62237: LD_VAR 0 1
62241: PUSH
62242: LD_VAR 0 2
62246: PUSH
62247: LD_INT 3
62249: MINUS
62250: PUSH
62251: LD_INT 3
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: LIST
62258: PUSH
62259: LD_VAR 0 1
62263: PUSH
62264: LD_INT 4
62266: PLUS
62267: PUSH
62268: LD_VAR 0 2
62272: PUSH
62273: LD_INT 4
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: LIST
62280: PUSH
62281: LD_VAR 0 1
62285: PUSH
62286: LD_VAR 0 2
62290: PUSH
62291: LD_INT 4
62293: PLUS
62294: PUSH
62295: LD_INT 0
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: LIST
62302: PUSH
62303: LD_VAR 0 1
62307: PUSH
62308: LD_INT 3
62310: MINUS
62311: PUSH
62312: LD_VAR 0 2
62316: PUSH
62317: LD_INT 1
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: LIST
62324: PUSH
62325: LD_VAR 0 1
62329: PUSH
62330: LD_INT 4
62332: MINUS
62333: PUSH
62334: LD_VAR 0 2
62338: PUSH
62339: LD_INT 4
62341: MINUS
62342: PUSH
62343: LD_INT 2
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: LIST
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: ST_TO_ADDR
// end ; 3 :
62358: GO 62780
62360: LD_INT 3
62362: DOUBLE
62363: EQUAL
62364: IFTRUE 62368
62366: GO 62501
62368: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62369: LD_ADDR_VAR 0 5
62373: PUSH
62374: LD_VAR 0 1
62378: PUSH
62379: LD_INT 3
62381: PLUS
62382: PUSH
62383: LD_VAR 0 2
62387: PUSH
62388: LD_INT 4
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: LIST
62395: PUSH
62396: LD_VAR 0 1
62400: PUSH
62401: LD_INT 4
62403: PLUS
62404: PUSH
62405: LD_VAR 0 2
62409: PUSH
62410: LD_INT 4
62412: PLUS
62413: PUSH
62414: LD_INT 5
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: LIST
62421: PUSH
62422: LD_VAR 0 1
62426: PUSH
62427: LD_INT 4
62429: MINUS
62430: PUSH
62431: LD_VAR 0 2
62435: PUSH
62436: LD_INT 1
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: LIST
62443: PUSH
62444: LD_VAR 0 1
62448: PUSH
62449: LD_VAR 0 2
62453: PUSH
62454: LD_INT 4
62456: MINUS
62457: PUSH
62458: LD_INT 3
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: LIST
62465: PUSH
62466: LD_VAR 0 1
62470: PUSH
62471: LD_INT 3
62473: MINUS
62474: PUSH
62475: LD_VAR 0 2
62479: PUSH
62480: LD_INT 3
62482: MINUS
62483: PUSH
62484: LD_INT 2
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: LIST
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: ST_TO_ADDR
// end ; 4 :
62499: GO 62780
62501: LD_INT 4
62503: DOUBLE
62504: EQUAL
62505: IFTRUE 62509
62507: GO 62642
62509: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62510: LD_ADDR_VAR 0 5
62514: PUSH
62515: LD_VAR 0 1
62519: PUSH
62520: LD_VAR 0 2
62524: PUSH
62525: LD_INT 4
62527: PLUS
62528: PUSH
62529: LD_INT 0
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: LIST
62536: PUSH
62537: LD_VAR 0 1
62541: PUSH
62542: LD_INT 3
62544: PLUS
62545: PUSH
62546: LD_VAR 0 2
62550: PUSH
62551: LD_INT 3
62553: PLUS
62554: PUSH
62555: LD_INT 5
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: LIST
62562: PUSH
62563: LD_VAR 0 1
62567: PUSH
62568: LD_INT 4
62570: PLUS
62571: PUSH
62572: LD_VAR 0 2
62576: PUSH
62577: LD_INT 4
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: LIST
62584: PUSH
62585: LD_VAR 0 1
62589: PUSH
62590: LD_VAR 0 2
62594: PUSH
62595: LD_INT 3
62597: MINUS
62598: PUSH
62599: LD_INT 3
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: LIST
62606: PUSH
62607: LD_VAR 0 1
62611: PUSH
62612: LD_INT 4
62614: MINUS
62615: PUSH
62616: LD_VAR 0 2
62620: PUSH
62621: LD_INT 4
62623: MINUS
62624: PUSH
62625: LD_INT 2
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: LIST
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: ST_TO_ADDR
// end ; 5 :
62640: GO 62780
62642: LD_INT 5
62644: DOUBLE
62645: EQUAL
62646: IFTRUE 62650
62648: GO 62779
62650: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62651: LD_ADDR_VAR 0 5
62655: PUSH
62656: LD_VAR 0 1
62660: PUSH
62661: LD_INT 4
62663: MINUS
62664: PUSH
62665: LD_VAR 0 2
62669: PUSH
62670: LD_INT 1
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: LIST
62677: PUSH
62678: LD_VAR 0 1
62682: PUSH
62683: LD_VAR 0 2
62687: PUSH
62688: LD_INT 4
62690: MINUS
62691: PUSH
62692: LD_INT 3
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: LIST
62699: PUSH
62700: LD_VAR 0 1
62704: PUSH
62705: LD_INT 4
62707: PLUS
62708: PUSH
62709: LD_VAR 0 2
62713: PUSH
62714: LD_INT 4
62716: PLUS
62717: PUSH
62718: LD_INT 5
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: LIST
62725: PUSH
62726: LD_VAR 0 1
62730: PUSH
62731: LD_INT 3
62733: PLUS
62734: PUSH
62735: LD_VAR 0 2
62739: PUSH
62740: LD_INT 4
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: LIST
62747: PUSH
62748: LD_VAR 0 1
62752: PUSH
62753: LD_VAR 0 2
62757: PUSH
62758: LD_INT 3
62760: PLUS
62761: PUSH
62762: LD_INT 0
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: LIST
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: ST_TO_ADDR
// end ; end ;
62777: GO 62780
62779: POP
// result := list ;
62780: LD_ADDR_VAR 0 4
62784: PUSH
62785: LD_VAR 0 5
62789: ST_TO_ADDR
// end ;
62790: LD_VAR 0 4
62794: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62795: LD_INT 0
62797: PPUSH
62798: PPUSH
62799: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62800: LD_VAR 0 1
62804: NOT
62805: PUSH
62806: LD_VAR 0 2
62810: PUSH
62811: LD_INT 1
62813: PUSH
62814: LD_INT 2
62816: PUSH
62817: LD_INT 3
62819: PUSH
62820: LD_INT 4
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: IN
62829: NOT
62830: OR
62831: IFFALSE 62835
// exit ;
62833: GO 62918
// tmp := [ ] ;
62835: LD_ADDR_VAR 0 5
62839: PUSH
62840: EMPTY
62841: ST_TO_ADDR
// for i in units do
62842: LD_ADDR_VAR 0 4
62846: PUSH
62847: LD_VAR 0 1
62851: PUSH
62852: FOR_IN
62853: IFFALSE 62887
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
62855: LD_ADDR_VAR 0 5
62859: PUSH
62860: LD_VAR 0 5
62864: PPUSH
62865: LD_VAR 0 4
62869: PPUSH
62870: LD_VAR 0 2
62874: PPUSH
62875: CALL_OW 259
62879: PPUSH
62880: CALL 64291 0 2
62884: ST_TO_ADDR
62885: GO 62852
62887: POP
62888: POP
// if not tmp then
62889: LD_VAR 0 5
62893: NOT
62894: IFFALSE 62898
// exit ;
62896: GO 62918
// result := SortListByListDesc ( units , tmp ) ;
62898: LD_ADDR_VAR 0 3
62902: PUSH
62903: LD_VAR 0 1
62907: PPUSH
62908: LD_VAR 0 5
62912: PPUSH
62913: CALL_OW 77
62917: ST_TO_ADDR
// end ;
62918: LD_VAR 0 3
62922: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62923: LD_INT 0
62925: PPUSH
62926: PPUSH
62927: PPUSH
// result := false ;
62928: LD_ADDR_VAR 0 3
62932: PUSH
62933: LD_INT 0
62935: ST_TO_ADDR
// if not building then
62936: LD_VAR 0 2
62940: NOT
62941: IFFALSE 62945
// exit ;
62943: GO 63083
// x := GetX ( building ) ;
62945: LD_ADDR_VAR 0 4
62949: PUSH
62950: LD_VAR 0 2
62954: PPUSH
62955: CALL_OW 250
62959: ST_TO_ADDR
// y := GetY ( building ) ;
62960: LD_ADDR_VAR 0 5
62964: PUSH
62965: LD_VAR 0 2
62969: PPUSH
62970: CALL_OW 251
62974: ST_TO_ADDR
// if not x or not y then
62975: LD_VAR 0 4
62979: NOT
62980: PUSH
62981: LD_VAR 0 5
62985: NOT
62986: OR
62987: IFFALSE 62991
// exit ;
62989: GO 63083
// if GetTaskList ( unit ) then
62991: LD_VAR 0 1
62995: PPUSH
62996: CALL_OW 437
63000: IFFALSE 63083
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63002: LD_STRING e
63004: PUSH
63005: LD_VAR 0 1
63009: PPUSH
63010: CALL_OW 437
63014: PUSH
63015: LD_INT 1
63017: ARRAY
63018: PUSH
63019: LD_INT 1
63021: ARRAY
63022: EQUAL
63023: PUSH
63024: LD_VAR 0 4
63028: PUSH
63029: LD_VAR 0 1
63033: PPUSH
63034: CALL_OW 437
63038: PUSH
63039: LD_INT 1
63041: ARRAY
63042: PUSH
63043: LD_INT 2
63045: ARRAY
63046: EQUAL
63047: AND
63048: PUSH
63049: LD_VAR 0 5
63053: PUSH
63054: LD_VAR 0 1
63058: PPUSH
63059: CALL_OW 437
63063: PUSH
63064: LD_INT 1
63066: ARRAY
63067: PUSH
63068: LD_INT 3
63070: ARRAY
63071: EQUAL
63072: AND
63073: IFFALSE 63083
// result := true end ;
63075: LD_ADDR_VAR 0 3
63079: PUSH
63080: LD_INT 1
63082: ST_TO_ADDR
// end ;
63083: LD_VAR 0 3
63087: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63088: LD_INT 0
63090: PPUSH
// result := false ;
63091: LD_ADDR_VAR 0 4
63095: PUSH
63096: LD_INT 0
63098: ST_TO_ADDR
// if GetTaskList ( unit ) then
63099: LD_VAR 0 1
63103: PPUSH
63104: CALL_OW 437
63108: IFFALSE 63191
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63110: LD_STRING M
63112: PUSH
63113: LD_VAR 0 1
63117: PPUSH
63118: CALL_OW 437
63122: PUSH
63123: LD_INT 1
63125: ARRAY
63126: PUSH
63127: LD_INT 1
63129: ARRAY
63130: EQUAL
63131: PUSH
63132: LD_VAR 0 2
63136: PUSH
63137: LD_VAR 0 1
63141: PPUSH
63142: CALL_OW 437
63146: PUSH
63147: LD_INT 1
63149: ARRAY
63150: PUSH
63151: LD_INT 2
63153: ARRAY
63154: EQUAL
63155: AND
63156: PUSH
63157: LD_VAR 0 3
63161: PUSH
63162: LD_VAR 0 1
63166: PPUSH
63167: CALL_OW 437
63171: PUSH
63172: LD_INT 1
63174: ARRAY
63175: PUSH
63176: LD_INT 3
63178: ARRAY
63179: EQUAL
63180: AND
63181: IFFALSE 63191
// result := true ;
63183: LD_ADDR_VAR 0 4
63187: PUSH
63188: LD_INT 1
63190: ST_TO_ADDR
// end ; end ;
63191: LD_VAR 0 4
63195: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63196: LD_INT 0
63198: PPUSH
63199: PPUSH
63200: PPUSH
63201: PPUSH
// if not unit or not area then
63202: LD_VAR 0 1
63206: NOT
63207: PUSH
63208: LD_VAR 0 2
63212: NOT
63213: OR
63214: IFFALSE 63218
// exit ;
63216: GO 63394
// tmp := AreaToList ( area , i ) ;
63218: LD_ADDR_VAR 0 6
63222: PUSH
63223: LD_VAR 0 2
63227: PPUSH
63228: LD_VAR 0 5
63232: PPUSH
63233: CALL_OW 517
63237: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63238: LD_ADDR_VAR 0 5
63242: PUSH
63243: DOUBLE
63244: LD_INT 1
63246: DEC
63247: ST_TO_ADDR
63248: LD_VAR 0 6
63252: PUSH
63253: LD_INT 1
63255: ARRAY
63256: PUSH
63257: FOR_TO
63258: IFFALSE 63392
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63260: LD_ADDR_VAR 0 7
63264: PUSH
63265: LD_VAR 0 6
63269: PUSH
63270: LD_INT 1
63272: ARRAY
63273: PUSH
63274: LD_VAR 0 5
63278: ARRAY
63279: PUSH
63280: LD_VAR 0 6
63284: PUSH
63285: LD_INT 2
63287: ARRAY
63288: PUSH
63289: LD_VAR 0 5
63293: ARRAY
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
63299: LD_INT 92
63301: PUSH
63302: LD_VAR 0 7
63306: PUSH
63307: LD_INT 1
63309: ARRAY
63310: PUSH
63311: LD_VAR 0 7
63315: PUSH
63316: LD_INT 2
63318: ARRAY
63319: PUSH
63320: LD_INT 2
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: PPUSH
63329: CALL_OW 69
63333: PUSH
63334: LD_INT 0
63336: EQUAL
63337: IFFALSE 63390
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63339: LD_VAR 0 1
63343: PPUSH
63344: LD_VAR 0 7
63348: PUSH
63349: LD_INT 1
63351: ARRAY
63352: PPUSH
63353: LD_VAR 0 7
63357: PUSH
63358: LD_INT 2
63360: ARRAY
63361: PPUSH
63362: LD_VAR 0 3
63366: PPUSH
63367: CALL_OW 48
// result := IsPlaced ( unit ) ;
63371: LD_ADDR_VAR 0 4
63375: PUSH
63376: LD_VAR 0 1
63380: PPUSH
63381: CALL_OW 305
63385: ST_TO_ADDR
// exit ;
63386: POP
63387: POP
63388: GO 63394
// end ; end ;
63390: GO 63257
63392: POP
63393: POP
// end ;
63394: LD_VAR 0 4
63398: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63399: LD_INT 0
63401: PPUSH
63402: PPUSH
63403: PPUSH
// if not side or side > 8 then
63404: LD_VAR 0 1
63408: NOT
63409: PUSH
63410: LD_VAR 0 1
63414: PUSH
63415: LD_INT 8
63417: GREATER
63418: OR
63419: IFFALSE 63423
// exit ;
63421: GO 63610
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63423: LD_ADDR_VAR 0 4
63427: PUSH
63428: LD_INT 22
63430: PUSH
63431: LD_VAR 0 1
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 21
63442: PUSH
63443: LD_INT 3
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PPUSH
63454: CALL_OW 69
63458: ST_TO_ADDR
// if not tmp then
63459: LD_VAR 0 4
63463: NOT
63464: IFFALSE 63468
// exit ;
63466: GO 63610
// enable_addtolog := true ;
63468: LD_ADDR_OWVAR 81
63472: PUSH
63473: LD_INT 1
63475: ST_TO_ADDR
// AddToLog ( [ ) ;
63476: LD_STRING [
63478: PPUSH
63479: CALL_OW 561
// for i in tmp do
63483: LD_ADDR_VAR 0 3
63487: PUSH
63488: LD_VAR 0 4
63492: PUSH
63493: FOR_IN
63494: IFFALSE 63601
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63496: LD_STRING [
63498: PUSH
63499: LD_VAR 0 3
63503: PPUSH
63504: CALL_OW 266
63508: STR
63509: PUSH
63510: LD_STRING , 
63512: STR
63513: PUSH
63514: LD_VAR 0 3
63518: PPUSH
63519: CALL_OW 250
63523: STR
63524: PUSH
63525: LD_STRING , 
63527: STR
63528: PUSH
63529: LD_VAR 0 3
63533: PPUSH
63534: CALL_OW 251
63538: STR
63539: PUSH
63540: LD_STRING , 
63542: STR
63543: PUSH
63544: LD_VAR 0 3
63548: PPUSH
63549: CALL_OW 254
63553: STR
63554: PUSH
63555: LD_STRING , 
63557: STR
63558: PUSH
63559: LD_VAR 0 3
63563: PPUSH
63564: LD_INT 1
63566: PPUSH
63567: CALL_OW 268
63571: STR
63572: PUSH
63573: LD_STRING , 
63575: STR
63576: PUSH
63577: LD_VAR 0 3
63581: PPUSH
63582: LD_INT 2
63584: PPUSH
63585: CALL_OW 268
63589: STR
63590: PUSH
63591: LD_STRING ],
63593: STR
63594: PPUSH
63595: CALL_OW 561
// end ;
63599: GO 63493
63601: POP
63602: POP
// AddToLog ( ]; ) ;
63603: LD_STRING ];
63605: PPUSH
63606: CALL_OW 561
// end ;
63610: LD_VAR 0 2
63614: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63615: LD_INT 0
63617: PPUSH
63618: PPUSH
63619: PPUSH
63620: PPUSH
63621: PPUSH
// if not area or not rate or not max then
63622: LD_VAR 0 1
63626: NOT
63627: PUSH
63628: LD_VAR 0 2
63632: NOT
63633: OR
63634: PUSH
63635: LD_VAR 0 4
63639: NOT
63640: OR
63641: IFFALSE 63645
// exit ;
63643: GO 63834
// while 1 do
63645: LD_INT 1
63647: IFFALSE 63834
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63649: LD_ADDR_VAR 0 9
63653: PUSH
63654: LD_VAR 0 1
63658: PPUSH
63659: LD_INT 1
63661: PPUSH
63662: CALL_OW 287
63666: PUSH
63667: LD_INT 10
63669: MUL
63670: ST_TO_ADDR
// r := rate / 10 ;
63671: LD_ADDR_VAR 0 7
63675: PUSH
63676: LD_VAR 0 2
63680: PUSH
63681: LD_INT 10
63683: DIVREAL
63684: ST_TO_ADDR
// time := 1 1$00 ;
63685: LD_ADDR_VAR 0 8
63689: PUSH
63690: LD_INT 2100
63692: ST_TO_ADDR
// if amount < min then
63693: LD_VAR 0 9
63697: PUSH
63698: LD_VAR 0 3
63702: LESS
63703: IFFALSE 63721
// r := r * 2 else
63705: LD_ADDR_VAR 0 7
63709: PUSH
63710: LD_VAR 0 7
63714: PUSH
63715: LD_INT 2
63717: MUL
63718: ST_TO_ADDR
63719: GO 63747
// if amount > max then
63721: LD_VAR 0 9
63725: PUSH
63726: LD_VAR 0 4
63730: GREATER
63731: IFFALSE 63747
// r := r / 2 ;
63733: LD_ADDR_VAR 0 7
63737: PUSH
63738: LD_VAR 0 7
63742: PUSH
63743: LD_INT 2
63745: DIVREAL
63746: ST_TO_ADDR
// time := time / r ;
63747: LD_ADDR_VAR 0 8
63751: PUSH
63752: LD_VAR 0 8
63756: PUSH
63757: LD_VAR 0 7
63761: DIVREAL
63762: ST_TO_ADDR
// if time < 0 then
63763: LD_VAR 0 8
63767: PUSH
63768: LD_INT 0
63770: LESS
63771: IFFALSE 63788
// time := time * - 1 ;
63773: LD_ADDR_VAR 0 8
63777: PUSH
63778: LD_VAR 0 8
63782: PUSH
63783: LD_INT 1
63785: NEG
63786: MUL
63787: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
63788: LD_VAR 0 8
63792: PUSH
63793: LD_INT 35
63795: PPUSH
63796: LD_INT 875
63798: PPUSH
63799: CALL_OW 12
63803: PLUS
63804: PPUSH
63805: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63809: LD_INT 1
63811: PPUSH
63812: LD_INT 5
63814: PPUSH
63815: CALL_OW 12
63819: PPUSH
63820: LD_VAR 0 1
63824: PPUSH
63825: LD_INT 1
63827: PPUSH
63828: CALL_OW 55
// end ;
63832: GO 63645
// end ;
63834: LD_VAR 0 5
63838: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63839: LD_INT 0
63841: PPUSH
63842: PPUSH
63843: PPUSH
63844: PPUSH
63845: PPUSH
63846: PPUSH
63847: PPUSH
63848: PPUSH
// if not turrets or not factories then
63849: LD_VAR 0 1
63853: NOT
63854: PUSH
63855: LD_VAR 0 2
63859: NOT
63860: OR
63861: IFFALSE 63865
// exit ;
63863: GO 64172
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63865: LD_ADDR_VAR 0 10
63869: PUSH
63870: LD_INT 5
63872: PUSH
63873: LD_INT 6
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: LD_INT 2
63882: PUSH
63883: LD_INT 4
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 3
63892: PUSH
63893: LD_INT 5
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 24
63907: PUSH
63908: LD_INT 25
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 23
63917: PUSH
63918: LD_INT 27
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 42
63931: PUSH
63932: LD_INT 43
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: LD_INT 44
63941: PUSH
63942: LD_INT 46
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 45
63951: PUSH
63952: LD_INT 47
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: LIST
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: LIST
63968: ST_TO_ADDR
// result := [ ] ;
63969: LD_ADDR_VAR 0 3
63973: PUSH
63974: EMPTY
63975: ST_TO_ADDR
// for i in turrets do
63976: LD_ADDR_VAR 0 4
63980: PUSH
63981: LD_VAR 0 1
63985: PUSH
63986: FOR_IN
63987: IFFALSE 64170
// begin nat := GetNation ( i ) ;
63989: LD_ADDR_VAR 0 7
63993: PUSH
63994: LD_VAR 0 4
63998: PPUSH
63999: CALL_OW 248
64003: ST_TO_ADDR
// weapon := 0 ;
64004: LD_ADDR_VAR 0 8
64008: PUSH
64009: LD_INT 0
64011: ST_TO_ADDR
// if not nat then
64012: LD_VAR 0 7
64016: NOT
64017: IFFALSE 64021
// continue ;
64019: GO 63986
// for j in list [ nat ] do
64021: LD_ADDR_VAR 0 5
64025: PUSH
64026: LD_VAR 0 10
64030: PUSH
64031: LD_VAR 0 7
64035: ARRAY
64036: PUSH
64037: FOR_IN
64038: IFFALSE 64079
// if GetBWeapon ( i ) = j [ 1 ] then
64040: LD_VAR 0 4
64044: PPUSH
64045: CALL_OW 269
64049: PUSH
64050: LD_VAR 0 5
64054: PUSH
64055: LD_INT 1
64057: ARRAY
64058: EQUAL
64059: IFFALSE 64077
// begin weapon := j [ 2 ] ;
64061: LD_ADDR_VAR 0 8
64065: PUSH
64066: LD_VAR 0 5
64070: PUSH
64071: LD_INT 2
64073: ARRAY
64074: ST_TO_ADDR
// break ;
64075: GO 64079
// end ;
64077: GO 64037
64079: POP
64080: POP
// if not weapon then
64081: LD_VAR 0 8
64085: NOT
64086: IFFALSE 64090
// continue ;
64088: GO 63986
// for k in factories do
64090: LD_ADDR_VAR 0 6
64094: PUSH
64095: LD_VAR 0 2
64099: PUSH
64100: FOR_IN
64101: IFFALSE 64166
// begin weapons := AvailableWeaponList ( k ) ;
64103: LD_ADDR_VAR 0 9
64107: PUSH
64108: LD_VAR 0 6
64112: PPUSH
64113: CALL_OW 478
64117: ST_TO_ADDR
// if not weapons then
64118: LD_VAR 0 9
64122: NOT
64123: IFFALSE 64127
// continue ;
64125: GO 64100
// if weapon in weapons then
64127: LD_VAR 0 8
64131: PUSH
64132: LD_VAR 0 9
64136: IN
64137: IFFALSE 64164
// begin result := [ i , weapon ] ;
64139: LD_ADDR_VAR 0 3
64143: PUSH
64144: LD_VAR 0 4
64148: PUSH
64149: LD_VAR 0 8
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: ST_TO_ADDR
// exit ;
64158: POP
64159: POP
64160: POP
64161: POP
64162: GO 64172
// end ; end ;
64164: GO 64100
64166: POP
64167: POP
// end ;
64168: GO 63986
64170: POP
64171: POP
// end ;
64172: LD_VAR 0 3
64176: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64177: LD_INT 0
64179: PPUSH
// if not side or side > 8 then
64180: LD_VAR 0 3
64184: NOT
64185: PUSH
64186: LD_VAR 0 3
64190: PUSH
64191: LD_INT 8
64193: GREATER
64194: OR
64195: IFFALSE 64199
// exit ;
64197: GO 64258
// if not range then
64199: LD_VAR 0 4
64203: NOT
64204: IFFALSE 64215
// range := - 12 ;
64206: LD_ADDR_VAR 0 4
64210: PUSH
64211: LD_INT 12
64213: NEG
64214: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64215: LD_VAR 0 1
64219: PPUSH
64220: LD_VAR 0 2
64224: PPUSH
64225: LD_VAR 0 3
64229: PPUSH
64230: LD_VAR 0 4
64234: PPUSH
64235: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64239: LD_VAR 0 1
64243: PPUSH
64244: LD_VAR 0 2
64248: PPUSH
64249: LD_VAR 0 3
64253: PPUSH
64254: CALL_OW 331
// end ;
64258: LD_VAR 0 5
64262: RET
// export function Video ( mode ) ; begin
64263: LD_INT 0
64265: PPUSH
// ingame_video = mode ;
64266: LD_ADDR_OWVAR 52
64270: PUSH
64271: LD_VAR 0 1
64275: ST_TO_ADDR
// interface_hidden = mode ;
64276: LD_ADDR_OWVAR 54
64280: PUSH
64281: LD_VAR 0 1
64285: ST_TO_ADDR
// end ;
64286: LD_VAR 0 2
64290: RET
// export function Join ( array , element ) ; begin
64291: LD_INT 0
64293: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64294: LD_ADDR_VAR 0 3
64298: PUSH
64299: LD_VAR 0 1
64303: PPUSH
64304: LD_VAR 0 1
64308: PUSH
64309: LD_INT 1
64311: PLUS
64312: PPUSH
64313: LD_VAR 0 2
64317: PPUSH
64318: CALL_OW 1
64322: ST_TO_ADDR
// end ;
64323: LD_VAR 0 3
64327: RET
// export function JoinUnion ( array , element ) ; begin
64328: LD_INT 0
64330: PPUSH
// result := array union element ;
64331: LD_ADDR_VAR 0 3
64335: PUSH
64336: LD_VAR 0 1
64340: PUSH
64341: LD_VAR 0 2
64345: UNION
64346: ST_TO_ADDR
// end ;
64347: LD_VAR 0 3
64351: RET
// export function GetBehemoths ( side ) ; begin
64352: LD_INT 0
64354: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64355: LD_ADDR_VAR 0 2
64359: PUSH
64360: LD_INT 22
64362: PUSH
64363: LD_VAR 0 1
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 31
64374: PUSH
64375: LD_INT 25
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PPUSH
64386: CALL_OW 69
64390: ST_TO_ADDR
// end ;
64391: LD_VAR 0 2
64395: RET
// export function Shuffle ( array ) ; var i , index ; begin
64396: LD_INT 0
64398: PPUSH
64399: PPUSH
64400: PPUSH
// result := [ ] ;
64401: LD_ADDR_VAR 0 2
64405: PUSH
64406: EMPTY
64407: ST_TO_ADDR
// if not array then
64408: LD_VAR 0 1
64412: NOT
64413: IFFALSE 64417
// exit ;
64415: GO 64516
// Randomize ;
64417: CALL_OW 10
// for i = array downto 1 do
64421: LD_ADDR_VAR 0 3
64425: PUSH
64426: DOUBLE
64427: LD_VAR 0 1
64431: INC
64432: ST_TO_ADDR
64433: LD_INT 1
64435: PUSH
64436: FOR_DOWNTO
64437: IFFALSE 64514
// begin index := rand ( 1 , array ) ;
64439: LD_ADDR_VAR 0 4
64443: PUSH
64444: LD_INT 1
64446: PPUSH
64447: LD_VAR 0 1
64451: PPUSH
64452: CALL_OW 12
64456: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64457: LD_ADDR_VAR 0 2
64461: PUSH
64462: LD_VAR 0 2
64466: PPUSH
64467: LD_VAR 0 2
64471: PUSH
64472: LD_INT 1
64474: PLUS
64475: PPUSH
64476: LD_VAR 0 1
64480: PUSH
64481: LD_VAR 0 4
64485: ARRAY
64486: PPUSH
64487: CALL_OW 2
64491: ST_TO_ADDR
// array := Delete ( array , index ) ;
64492: LD_ADDR_VAR 0 1
64496: PUSH
64497: LD_VAR 0 1
64501: PPUSH
64502: LD_VAR 0 4
64506: PPUSH
64507: CALL_OW 3
64511: ST_TO_ADDR
// end ;
64512: GO 64436
64514: POP
64515: POP
// end ;
64516: LD_VAR 0 2
64520: RET
// export function GetBaseMaterials ( base ) ; begin
64521: LD_INT 0
64523: PPUSH
// result := [ 0 , 0 , 0 ] ;
64524: LD_ADDR_VAR 0 2
64528: PUSH
64529: LD_INT 0
64531: PUSH
64532: LD_INT 0
64534: PUSH
64535: LD_INT 0
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: LIST
64542: ST_TO_ADDR
// if not base then
64543: LD_VAR 0 1
64547: NOT
64548: IFFALSE 64552
// exit ;
64550: GO 64601
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64552: LD_ADDR_VAR 0 2
64556: PUSH
64557: LD_VAR 0 1
64561: PPUSH
64562: LD_INT 1
64564: PPUSH
64565: CALL_OW 275
64569: PUSH
64570: LD_VAR 0 1
64574: PPUSH
64575: LD_INT 2
64577: PPUSH
64578: CALL_OW 275
64582: PUSH
64583: LD_VAR 0 1
64587: PPUSH
64588: LD_INT 3
64590: PPUSH
64591: CALL_OW 275
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: LIST
64600: ST_TO_ADDR
// end ;
64601: LD_VAR 0 2
64605: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64606: LD_INT 0
64608: PPUSH
64609: PPUSH
// result := array ;
64610: LD_ADDR_VAR 0 3
64614: PUSH
64615: LD_VAR 0 1
64619: ST_TO_ADDR
// if size >= result then
64620: LD_VAR 0 2
64624: PUSH
64625: LD_VAR 0 3
64629: GREATEREQUAL
64630: IFFALSE 64634
// exit ;
64632: GO 64684
// if size then
64634: LD_VAR 0 2
64638: IFFALSE 64684
// for i := array downto size do
64640: LD_ADDR_VAR 0 4
64644: PUSH
64645: DOUBLE
64646: LD_VAR 0 1
64650: INC
64651: ST_TO_ADDR
64652: LD_VAR 0 2
64656: PUSH
64657: FOR_DOWNTO
64658: IFFALSE 64682
// result := Delete ( result , result ) ;
64660: LD_ADDR_VAR 0 3
64664: PUSH
64665: LD_VAR 0 3
64669: PPUSH
64670: LD_VAR 0 3
64674: PPUSH
64675: CALL_OW 3
64679: ST_TO_ADDR
64680: GO 64657
64682: POP
64683: POP
// end ;
64684: LD_VAR 0 3
64688: RET
// export function ComExit ( unit ) ; var tmp ; begin
64689: LD_INT 0
64691: PPUSH
64692: PPUSH
// if not IsInUnit ( unit ) then
64693: LD_VAR 0 1
64697: PPUSH
64698: CALL_OW 310
64702: NOT
64703: IFFALSE 64707
// exit ;
64705: GO 64767
// tmp := IsInUnit ( unit ) ;
64707: LD_ADDR_VAR 0 3
64711: PUSH
64712: LD_VAR 0 1
64716: PPUSH
64717: CALL_OW 310
64721: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64722: LD_VAR 0 3
64726: PPUSH
64727: CALL_OW 247
64731: PUSH
64732: LD_INT 2
64734: EQUAL
64735: IFFALSE 64748
// ComExitVehicle ( unit ) else
64737: LD_VAR 0 1
64741: PPUSH
64742: CALL_OW 121
64746: GO 64757
// ComExitBuilding ( unit ) ;
64748: LD_VAR 0 1
64752: PPUSH
64753: CALL_OW 122
// result := tmp ;
64757: LD_ADDR_VAR 0 2
64761: PUSH
64762: LD_VAR 0 3
64766: ST_TO_ADDR
// end ;
64767: LD_VAR 0 2
64771: RET
// export function ComExitAll ( units ) ; var i ; begin
64772: LD_INT 0
64774: PPUSH
64775: PPUSH
// if not units then
64776: LD_VAR 0 1
64780: NOT
64781: IFFALSE 64785
// exit ;
64783: GO 64811
// for i in units do
64785: LD_ADDR_VAR 0 3
64789: PUSH
64790: LD_VAR 0 1
64794: PUSH
64795: FOR_IN
64796: IFFALSE 64809
// ComExit ( i ) ;
64798: LD_VAR 0 3
64802: PPUSH
64803: CALL 64689 0 1
64807: GO 64795
64809: POP
64810: POP
// end ;
64811: LD_VAR 0 2
64815: RET
// export function ResetHc ; begin
64816: LD_INT 0
64818: PPUSH
// InitHc ;
64819: CALL_OW 19
// hc_importance := 0 ;
64823: LD_ADDR_OWVAR 32
64827: PUSH
64828: LD_INT 0
64830: ST_TO_ADDR
// end ;
64831: LD_VAR 0 1
64835: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64836: LD_INT 0
64838: PPUSH
64839: PPUSH
64840: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64841: LD_ADDR_VAR 0 6
64845: PUSH
64846: LD_VAR 0 1
64850: PUSH
64851: LD_VAR 0 3
64855: PLUS
64856: PUSH
64857: LD_INT 2
64859: DIV
64860: ST_TO_ADDR
// if _x < 0 then
64861: LD_VAR 0 6
64865: PUSH
64866: LD_INT 0
64868: LESS
64869: IFFALSE 64886
// _x := _x * - 1 ;
64871: LD_ADDR_VAR 0 6
64875: PUSH
64876: LD_VAR 0 6
64880: PUSH
64881: LD_INT 1
64883: NEG
64884: MUL
64885: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64886: LD_ADDR_VAR 0 7
64890: PUSH
64891: LD_VAR 0 2
64895: PUSH
64896: LD_VAR 0 4
64900: PLUS
64901: PUSH
64902: LD_INT 2
64904: DIV
64905: ST_TO_ADDR
// if _y < 0 then
64906: LD_VAR 0 7
64910: PUSH
64911: LD_INT 0
64913: LESS
64914: IFFALSE 64931
// _y := _y * - 1 ;
64916: LD_ADDR_VAR 0 7
64920: PUSH
64921: LD_VAR 0 7
64925: PUSH
64926: LD_INT 1
64928: NEG
64929: MUL
64930: ST_TO_ADDR
// result := [ _x , _y ] ;
64931: LD_ADDR_VAR 0 5
64935: PUSH
64936: LD_VAR 0 6
64940: PUSH
64941: LD_VAR 0 7
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: ST_TO_ADDR
// end ;
64950: LD_VAR 0 5
64954: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64955: LD_INT 0
64957: PPUSH
64958: PPUSH
64959: PPUSH
64960: PPUSH
// task := GetTaskList ( unit ) ;
64961: LD_ADDR_VAR 0 7
64965: PUSH
64966: LD_VAR 0 1
64970: PPUSH
64971: CALL_OW 437
64975: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64976: LD_VAR 0 7
64980: NOT
64981: PUSH
64982: LD_VAR 0 1
64986: PPUSH
64987: LD_VAR 0 2
64991: PPUSH
64992: CALL_OW 308
64996: NOT
64997: AND
64998: IFFALSE 65002
// exit ;
65000: GO 65120
// if IsInArea ( unit , area ) then
65002: LD_VAR 0 1
65006: PPUSH
65007: LD_VAR 0 2
65011: PPUSH
65012: CALL_OW 308
65016: IFFALSE 65034
// begin ComMoveToArea ( unit , goAway ) ;
65018: LD_VAR 0 1
65022: PPUSH
65023: LD_VAR 0 3
65027: PPUSH
65028: CALL_OW 113
// exit ;
65032: GO 65120
// end ; if task [ 1 ] [ 1 ] <> M then
65034: LD_VAR 0 7
65038: PUSH
65039: LD_INT 1
65041: ARRAY
65042: PUSH
65043: LD_INT 1
65045: ARRAY
65046: PUSH
65047: LD_STRING M
65049: NONEQUAL
65050: IFFALSE 65054
// exit ;
65052: GO 65120
// x := task [ 1 ] [ 2 ] ;
65054: LD_ADDR_VAR 0 5
65058: PUSH
65059: LD_VAR 0 7
65063: PUSH
65064: LD_INT 1
65066: ARRAY
65067: PUSH
65068: LD_INT 2
65070: ARRAY
65071: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65072: LD_ADDR_VAR 0 6
65076: PUSH
65077: LD_VAR 0 7
65081: PUSH
65082: LD_INT 1
65084: ARRAY
65085: PUSH
65086: LD_INT 3
65088: ARRAY
65089: ST_TO_ADDR
// if InArea ( x , y , area ) then
65090: LD_VAR 0 5
65094: PPUSH
65095: LD_VAR 0 6
65099: PPUSH
65100: LD_VAR 0 2
65104: PPUSH
65105: CALL_OW 309
65109: IFFALSE 65120
// ComStop ( unit ) ;
65111: LD_VAR 0 1
65115: PPUSH
65116: CALL_OW 141
// end ;
65120: LD_VAR 0 4
65124: RET
// export function Abs ( value ) ; begin
65125: LD_INT 0
65127: PPUSH
// result := value ;
65128: LD_ADDR_VAR 0 2
65132: PUSH
65133: LD_VAR 0 1
65137: ST_TO_ADDR
// if value < 0 then
65138: LD_VAR 0 1
65142: PUSH
65143: LD_INT 0
65145: LESS
65146: IFFALSE 65163
// result := value * - 1 ;
65148: LD_ADDR_VAR 0 2
65152: PUSH
65153: LD_VAR 0 1
65157: PUSH
65158: LD_INT 1
65160: NEG
65161: MUL
65162: ST_TO_ADDR
// end ;
65163: LD_VAR 0 2
65167: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65168: LD_INT 0
65170: PPUSH
65171: PPUSH
65172: PPUSH
65173: PPUSH
65174: PPUSH
65175: PPUSH
65176: PPUSH
65177: PPUSH
// if not unit or not building then
65178: LD_VAR 0 1
65182: NOT
65183: PUSH
65184: LD_VAR 0 2
65188: NOT
65189: OR
65190: IFFALSE 65194
// exit ;
65192: GO 65420
// x := GetX ( building ) ;
65194: LD_ADDR_VAR 0 4
65198: PUSH
65199: LD_VAR 0 2
65203: PPUSH
65204: CALL_OW 250
65208: ST_TO_ADDR
// y := GetY ( building ) ;
65209: LD_ADDR_VAR 0 6
65213: PUSH
65214: LD_VAR 0 2
65218: PPUSH
65219: CALL_OW 251
65223: ST_TO_ADDR
// d := GetDir ( building ) ;
65224: LD_ADDR_VAR 0 8
65228: PUSH
65229: LD_VAR 0 2
65233: PPUSH
65234: CALL_OW 254
65238: ST_TO_ADDR
// r := 4 ;
65239: LD_ADDR_VAR 0 9
65243: PUSH
65244: LD_INT 4
65246: ST_TO_ADDR
// for i := 1 to 5 do
65247: LD_ADDR_VAR 0 10
65251: PUSH
65252: DOUBLE
65253: LD_INT 1
65255: DEC
65256: ST_TO_ADDR
65257: LD_INT 5
65259: PUSH
65260: FOR_TO
65261: IFFALSE 65418
// begin _x := ShiftX ( x , d , r + i ) ;
65263: LD_ADDR_VAR 0 5
65267: PUSH
65268: LD_VAR 0 4
65272: PPUSH
65273: LD_VAR 0 8
65277: PPUSH
65278: LD_VAR 0 9
65282: PUSH
65283: LD_VAR 0 10
65287: PLUS
65288: PPUSH
65289: CALL_OW 272
65293: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65294: LD_ADDR_VAR 0 7
65298: PUSH
65299: LD_VAR 0 6
65303: PPUSH
65304: LD_VAR 0 8
65308: PPUSH
65309: LD_VAR 0 9
65313: PUSH
65314: LD_VAR 0 10
65318: PLUS
65319: PPUSH
65320: CALL_OW 273
65324: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65325: LD_VAR 0 5
65329: PPUSH
65330: LD_VAR 0 7
65334: PPUSH
65335: CALL_OW 488
65339: PUSH
65340: LD_VAR 0 5
65344: PPUSH
65345: LD_VAR 0 7
65349: PPUSH
65350: CALL_OW 428
65354: PPUSH
65355: CALL_OW 247
65359: PUSH
65360: LD_INT 3
65362: PUSH
65363: LD_INT 2
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: IN
65370: NOT
65371: AND
65372: IFFALSE 65416
// begin ComMoveXY ( unit , _x , _y ) ;
65374: LD_VAR 0 1
65378: PPUSH
65379: LD_VAR 0 5
65383: PPUSH
65384: LD_VAR 0 7
65388: PPUSH
65389: CALL_OW 111
// result := [ _x , _y ] ;
65393: LD_ADDR_VAR 0 3
65397: PUSH
65398: LD_VAR 0 5
65402: PUSH
65403: LD_VAR 0 7
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: ST_TO_ADDR
// exit ;
65412: POP
65413: POP
65414: GO 65420
// end ; end ;
65416: GO 65260
65418: POP
65419: POP
// end ;
65420: LD_VAR 0 3
65424: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65425: LD_INT 0
65427: PPUSH
65428: PPUSH
65429: PPUSH
// result := 0 ;
65430: LD_ADDR_VAR 0 3
65434: PUSH
65435: LD_INT 0
65437: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65438: LD_VAR 0 1
65442: PUSH
65443: LD_INT 0
65445: LESS
65446: PUSH
65447: LD_VAR 0 1
65451: PUSH
65452: LD_INT 8
65454: GREATER
65455: OR
65456: PUSH
65457: LD_VAR 0 2
65461: PUSH
65462: LD_INT 0
65464: LESS
65465: OR
65466: PUSH
65467: LD_VAR 0 2
65471: PUSH
65472: LD_INT 8
65474: GREATER
65475: OR
65476: IFFALSE 65480
// exit ;
65478: GO 65555
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65480: LD_ADDR_VAR 0 4
65484: PUSH
65485: LD_INT 22
65487: PUSH
65488: LD_VAR 0 2
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PPUSH
65497: CALL_OW 69
65501: PUSH
65502: FOR_IN
65503: IFFALSE 65553
// begin un := UnitShoot ( i ) ;
65505: LD_ADDR_VAR 0 5
65509: PUSH
65510: LD_VAR 0 4
65514: PPUSH
65515: CALL_OW 504
65519: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65520: LD_VAR 0 5
65524: PPUSH
65525: CALL_OW 255
65529: PUSH
65530: LD_VAR 0 1
65534: EQUAL
65535: IFFALSE 65551
// begin result := un ;
65537: LD_ADDR_VAR 0 3
65541: PUSH
65542: LD_VAR 0 5
65546: ST_TO_ADDR
// exit ;
65547: POP
65548: POP
65549: GO 65555
// end ; end ;
65551: GO 65502
65553: POP
65554: POP
// end ;
65555: LD_VAR 0 3
65559: RET
// export function GetCargoBay ( units ) ; begin
65560: LD_INT 0
65562: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65563: LD_ADDR_VAR 0 2
65567: PUSH
65568: LD_VAR 0 1
65572: PPUSH
65573: LD_INT 2
65575: PUSH
65576: LD_INT 34
65578: PUSH
65579: LD_INT 12
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: LD_INT 34
65588: PUSH
65589: LD_INT 51
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 34
65598: PUSH
65599: LD_INT 32
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_INT 34
65608: PUSH
65609: LD_INT 89
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: PPUSH
65623: CALL_OW 72
65627: ST_TO_ADDR
// end ;
65628: LD_VAR 0 2
65632: RET
// export function Negate ( value ) ; begin
65633: LD_INT 0
65635: PPUSH
// result := not value ;
65636: LD_ADDR_VAR 0 2
65640: PUSH
65641: LD_VAR 0 1
65645: NOT
65646: ST_TO_ADDR
// end ;
65647: LD_VAR 0 2
65651: RET
// export function Inc ( value ) ; begin
65652: LD_INT 0
65654: PPUSH
// result := value + 1 ;
65655: LD_ADDR_VAR 0 2
65659: PUSH
65660: LD_VAR 0 1
65664: PUSH
65665: LD_INT 1
65667: PLUS
65668: ST_TO_ADDR
// end ;
65669: LD_VAR 0 2
65673: RET
// export function Dec ( value ) ; begin
65674: LD_INT 0
65676: PPUSH
// result := value - 1 ;
65677: LD_ADDR_VAR 0 2
65681: PUSH
65682: LD_VAR 0 1
65686: PUSH
65687: LD_INT 1
65689: MINUS
65690: ST_TO_ADDR
// end ;
65691: LD_VAR 0 2
65695: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65696: LD_INT 0
65698: PPUSH
65699: PPUSH
65700: PPUSH
65701: PPUSH
65702: PPUSH
65703: PPUSH
65704: PPUSH
65705: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65706: LD_VAR 0 1
65710: PPUSH
65711: LD_VAR 0 2
65715: PPUSH
65716: CALL_OW 488
65720: NOT
65721: PUSH
65722: LD_VAR 0 3
65726: PPUSH
65727: LD_VAR 0 4
65731: PPUSH
65732: CALL_OW 488
65736: NOT
65737: OR
65738: IFFALSE 65751
// begin result := - 1 ;
65740: LD_ADDR_VAR 0 5
65744: PUSH
65745: LD_INT 1
65747: NEG
65748: ST_TO_ADDR
// exit ;
65749: GO 65986
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65751: LD_ADDR_VAR 0 12
65755: PUSH
65756: LD_VAR 0 1
65760: PPUSH
65761: LD_VAR 0 2
65765: PPUSH
65766: LD_VAR 0 3
65770: PPUSH
65771: LD_VAR 0 4
65775: PPUSH
65776: CALL 64836 0 4
65780: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65781: LD_ADDR_VAR 0 11
65785: PUSH
65786: LD_VAR 0 1
65790: PPUSH
65791: LD_VAR 0 2
65795: PPUSH
65796: LD_VAR 0 12
65800: PUSH
65801: LD_INT 1
65803: ARRAY
65804: PPUSH
65805: LD_VAR 0 12
65809: PUSH
65810: LD_INT 2
65812: ARRAY
65813: PPUSH
65814: CALL_OW 298
65818: ST_TO_ADDR
// distance := 9999 ;
65819: LD_ADDR_VAR 0 10
65823: PUSH
65824: LD_INT 9999
65826: ST_TO_ADDR
// for i := 0 to 5 do
65827: LD_ADDR_VAR 0 6
65831: PUSH
65832: DOUBLE
65833: LD_INT 0
65835: DEC
65836: ST_TO_ADDR
65837: LD_INT 5
65839: PUSH
65840: FOR_TO
65841: IFFALSE 65984
// begin _x := ShiftX ( x1 , i , centerDist ) ;
65843: LD_ADDR_VAR 0 7
65847: PUSH
65848: LD_VAR 0 1
65852: PPUSH
65853: LD_VAR 0 6
65857: PPUSH
65858: LD_VAR 0 11
65862: PPUSH
65863: CALL_OW 272
65867: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
65868: LD_ADDR_VAR 0 8
65872: PUSH
65873: LD_VAR 0 2
65877: PPUSH
65878: LD_VAR 0 6
65882: PPUSH
65883: LD_VAR 0 11
65887: PPUSH
65888: CALL_OW 273
65892: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65893: LD_VAR 0 7
65897: PPUSH
65898: LD_VAR 0 8
65902: PPUSH
65903: CALL_OW 488
65907: NOT
65908: IFFALSE 65912
// continue ;
65910: GO 65840
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65912: LD_ADDR_VAR 0 9
65916: PUSH
65917: LD_VAR 0 12
65921: PUSH
65922: LD_INT 1
65924: ARRAY
65925: PPUSH
65926: LD_VAR 0 12
65930: PUSH
65931: LD_INT 2
65933: ARRAY
65934: PPUSH
65935: LD_VAR 0 7
65939: PPUSH
65940: LD_VAR 0 8
65944: PPUSH
65945: CALL_OW 298
65949: ST_TO_ADDR
// if tmp < distance then
65950: LD_VAR 0 9
65954: PUSH
65955: LD_VAR 0 10
65959: LESS
65960: IFFALSE 65982
// begin result := i ;
65962: LD_ADDR_VAR 0 5
65966: PUSH
65967: LD_VAR 0 6
65971: ST_TO_ADDR
// distance := tmp ;
65972: LD_ADDR_VAR 0 10
65976: PUSH
65977: LD_VAR 0 9
65981: ST_TO_ADDR
// end ; end ;
65982: GO 65840
65984: POP
65985: POP
// end ;
65986: LD_VAR 0 5
65990: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65991: LD_INT 0
65993: PPUSH
65994: PPUSH
// if not driver or not IsInUnit ( driver ) then
65995: LD_VAR 0 1
65999: NOT
66000: PUSH
66001: LD_VAR 0 1
66005: PPUSH
66006: CALL_OW 310
66010: NOT
66011: OR
66012: IFFALSE 66016
// exit ;
66014: GO 66106
// vehicle := IsInUnit ( driver ) ;
66016: LD_ADDR_VAR 0 3
66020: PUSH
66021: LD_VAR 0 1
66025: PPUSH
66026: CALL_OW 310
66030: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66031: LD_VAR 0 1
66035: PPUSH
66036: LD_STRING \
66038: PUSH
66039: LD_INT 0
66041: PUSH
66042: LD_INT 0
66044: PUSH
66045: LD_INT 0
66047: PUSH
66048: LD_INT 0
66050: PUSH
66051: LD_INT 0
66053: PUSH
66054: LD_INT 0
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: PUSH
66066: LD_STRING E
66068: PUSH
66069: LD_INT 0
66071: PUSH
66072: LD_INT 0
66074: PUSH
66075: LD_VAR 0 3
66079: PUSH
66080: LD_INT 0
66082: PUSH
66083: LD_INT 0
66085: PUSH
66086: LD_INT 0
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PPUSH
66102: CALL_OW 446
// end ;
66106: LD_VAR 0 2
66110: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66111: LD_INT 0
66113: PPUSH
66114: PPUSH
// if not driver or not IsInUnit ( driver ) then
66115: LD_VAR 0 1
66119: NOT
66120: PUSH
66121: LD_VAR 0 1
66125: PPUSH
66126: CALL_OW 310
66130: NOT
66131: OR
66132: IFFALSE 66136
// exit ;
66134: GO 66226
// vehicle := IsInUnit ( driver ) ;
66136: LD_ADDR_VAR 0 3
66140: PUSH
66141: LD_VAR 0 1
66145: PPUSH
66146: CALL_OW 310
66150: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66151: LD_VAR 0 1
66155: PPUSH
66156: LD_STRING \
66158: PUSH
66159: LD_INT 0
66161: PUSH
66162: LD_INT 0
66164: PUSH
66165: LD_INT 0
66167: PUSH
66168: LD_INT 0
66170: PUSH
66171: LD_INT 0
66173: PUSH
66174: LD_INT 0
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: PUSH
66186: LD_STRING E
66188: PUSH
66189: LD_INT 0
66191: PUSH
66192: LD_INT 0
66194: PUSH
66195: LD_VAR 0 3
66199: PUSH
66200: LD_INT 0
66202: PUSH
66203: LD_INT 0
66205: PUSH
66206: LD_INT 0
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PPUSH
66222: CALL_OW 447
// end ;
66226: LD_VAR 0 2
66230: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66231: LD_INT 0
66233: PPUSH
66234: PPUSH
66235: PPUSH
// tmp := [ ] ;
66236: LD_ADDR_VAR 0 5
66240: PUSH
66241: EMPTY
66242: ST_TO_ADDR
// for i in units do
66243: LD_ADDR_VAR 0 4
66247: PUSH
66248: LD_VAR 0 1
66252: PUSH
66253: FOR_IN
66254: IFFALSE 66292
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66256: LD_ADDR_VAR 0 5
66260: PUSH
66261: LD_VAR 0 5
66265: PPUSH
66266: LD_VAR 0 5
66270: PUSH
66271: LD_INT 1
66273: PLUS
66274: PPUSH
66275: LD_VAR 0 4
66279: PPUSH
66280: CALL_OW 256
66284: PPUSH
66285: CALL_OW 2
66289: ST_TO_ADDR
66290: GO 66253
66292: POP
66293: POP
// if not tmp then
66294: LD_VAR 0 5
66298: NOT
66299: IFFALSE 66303
// exit ;
66301: GO 66351
// if asc then
66303: LD_VAR 0 2
66307: IFFALSE 66331
// result := SortListByListAsc ( units , tmp ) else
66309: LD_ADDR_VAR 0 3
66313: PUSH
66314: LD_VAR 0 1
66318: PPUSH
66319: LD_VAR 0 5
66323: PPUSH
66324: CALL_OW 76
66328: ST_TO_ADDR
66329: GO 66351
// result := SortListByListDesc ( units , tmp ) ;
66331: LD_ADDR_VAR 0 3
66335: PUSH
66336: LD_VAR 0 1
66340: PPUSH
66341: LD_VAR 0 5
66345: PPUSH
66346: CALL_OW 77
66350: ST_TO_ADDR
// end ;
66351: LD_VAR 0 3
66355: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66356: LD_INT 0
66358: PPUSH
66359: PPUSH
// task := GetTaskList ( mech ) ;
66360: LD_ADDR_VAR 0 4
66364: PUSH
66365: LD_VAR 0 1
66369: PPUSH
66370: CALL_OW 437
66374: ST_TO_ADDR
// if not task then
66375: LD_VAR 0 4
66379: NOT
66380: IFFALSE 66384
// exit ;
66382: GO 66426
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66384: LD_ADDR_VAR 0 3
66388: PUSH
66389: LD_VAR 0 4
66393: PUSH
66394: LD_INT 1
66396: ARRAY
66397: PUSH
66398: LD_INT 1
66400: ARRAY
66401: PUSH
66402: LD_STRING r
66404: EQUAL
66405: PUSH
66406: LD_VAR 0 4
66410: PUSH
66411: LD_INT 1
66413: ARRAY
66414: PUSH
66415: LD_INT 4
66417: ARRAY
66418: PUSH
66419: LD_VAR 0 2
66423: EQUAL
66424: AND
66425: ST_TO_ADDR
// end ;
66426: LD_VAR 0 3
66430: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66431: LD_INT 0
66433: PPUSH
// SetDir ( unit , d ) ;
66434: LD_VAR 0 1
66438: PPUSH
66439: LD_VAR 0 4
66443: PPUSH
66444: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66448: LD_VAR 0 1
66452: PPUSH
66453: LD_VAR 0 2
66457: PPUSH
66458: LD_VAR 0 3
66462: PPUSH
66463: LD_VAR 0 5
66467: PPUSH
66468: CALL_OW 48
// end ;
66472: LD_VAR 0 6
66476: RET
// export function ToNaturalNumber ( number ) ; begin
66477: LD_INT 0
66479: PPUSH
// result := number div 1 ;
66480: LD_ADDR_VAR 0 2
66484: PUSH
66485: LD_VAR 0 1
66489: PUSH
66490: LD_INT 1
66492: DIV
66493: ST_TO_ADDR
// if number < 0 then
66494: LD_VAR 0 1
66498: PUSH
66499: LD_INT 0
66501: LESS
66502: IFFALSE 66512
// result := 0 ;
66504: LD_ADDR_VAR 0 2
66508: PUSH
66509: LD_INT 0
66511: ST_TO_ADDR
// end ;
66512: LD_VAR 0 2
66516: RET
// export function SortByClass ( units , class ) ; var un ; begin
66517: LD_INT 0
66519: PPUSH
66520: PPUSH
// if not units or not class then
66521: LD_VAR 0 1
66525: NOT
66526: PUSH
66527: LD_VAR 0 2
66531: NOT
66532: OR
66533: IFFALSE 66537
// exit ;
66535: GO 66632
// result := [ ] ;
66537: LD_ADDR_VAR 0 3
66541: PUSH
66542: EMPTY
66543: ST_TO_ADDR
// for un in units do
66544: LD_ADDR_VAR 0 4
66548: PUSH
66549: LD_VAR 0 1
66553: PUSH
66554: FOR_IN
66555: IFFALSE 66630
// if GetClass ( un ) = class then
66557: LD_VAR 0 4
66561: PPUSH
66562: CALL_OW 257
66566: PUSH
66567: LD_VAR 0 2
66571: EQUAL
66572: IFFALSE 66599
// result := Insert ( result , 1 , un ) else
66574: LD_ADDR_VAR 0 3
66578: PUSH
66579: LD_VAR 0 3
66583: PPUSH
66584: LD_INT 1
66586: PPUSH
66587: LD_VAR 0 4
66591: PPUSH
66592: CALL_OW 2
66596: ST_TO_ADDR
66597: GO 66628
// result := Replace ( result , result + 1 , un ) ;
66599: LD_ADDR_VAR 0 3
66603: PUSH
66604: LD_VAR 0 3
66608: PPUSH
66609: LD_VAR 0 3
66613: PUSH
66614: LD_INT 1
66616: PLUS
66617: PPUSH
66618: LD_VAR 0 4
66622: PPUSH
66623: CALL_OW 1
66627: ST_TO_ADDR
66628: GO 66554
66630: POP
66631: POP
// end ;
66632: LD_VAR 0 3
66636: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66637: LD_INT 0
66639: PPUSH
66640: PPUSH
66641: PPUSH
66642: PPUSH
66643: PPUSH
66644: PPUSH
66645: PPUSH
// result := [ ] ;
66646: LD_ADDR_VAR 0 4
66650: PUSH
66651: EMPTY
66652: ST_TO_ADDR
// if x - r < 0 then
66653: LD_VAR 0 1
66657: PUSH
66658: LD_VAR 0 3
66662: MINUS
66663: PUSH
66664: LD_INT 0
66666: LESS
66667: IFFALSE 66679
// min_x := 0 else
66669: LD_ADDR_VAR 0 8
66673: PUSH
66674: LD_INT 0
66676: ST_TO_ADDR
66677: GO 66695
// min_x := x - r ;
66679: LD_ADDR_VAR 0 8
66683: PUSH
66684: LD_VAR 0 1
66688: PUSH
66689: LD_VAR 0 3
66693: MINUS
66694: ST_TO_ADDR
// if y - r < 0 then
66695: LD_VAR 0 2
66699: PUSH
66700: LD_VAR 0 3
66704: MINUS
66705: PUSH
66706: LD_INT 0
66708: LESS
66709: IFFALSE 66721
// min_y := 0 else
66711: LD_ADDR_VAR 0 7
66715: PUSH
66716: LD_INT 0
66718: ST_TO_ADDR
66719: GO 66737
// min_y := y - r ;
66721: LD_ADDR_VAR 0 7
66725: PUSH
66726: LD_VAR 0 2
66730: PUSH
66731: LD_VAR 0 3
66735: MINUS
66736: ST_TO_ADDR
// max_x := x + r ;
66737: LD_ADDR_VAR 0 9
66741: PUSH
66742: LD_VAR 0 1
66746: PUSH
66747: LD_VAR 0 3
66751: PLUS
66752: ST_TO_ADDR
// max_y := y + r ;
66753: LD_ADDR_VAR 0 10
66757: PUSH
66758: LD_VAR 0 2
66762: PUSH
66763: LD_VAR 0 3
66767: PLUS
66768: ST_TO_ADDR
// for _x = min_x to max_x do
66769: LD_ADDR_VAR 0 5
66773: PUSH
66774: DOUBLE
66775: LD_VAR 0 8
66779: DEC
66780: ST_TO_ADDR
66781: LD_VAR 0 9
66785: PUSH
66786: FOR_TO
66787: IFFALSE 66888
// for _y = min_y to max_y do
66789: LD_ADDR_VAR 0 6
66793: PUSH
66794: DOUBLE
66795: LD_VAR 0 7
66799: DEC
66800: ST_TO_ADDR
66801: LD_VAR 0 10
66805: PUSH
66806: FOR_TO
66807: IFFALSE 66884
// begin if not ValidHex ( _x , _y ) then
66809: LD_VAR 0 5
66813: PPUSH
66814: LD_VAR 0 6
66818: PPUSH
66819: CALL_OW 488
66823: NOT
66824: IFFALSE 66828
// continue ;
66826: GO 66806
// if GetResourceTypeXY ( _x , _y ) then
66828: LD_VAR 0 5
66832: PPUSH
66833: LD_VAR 0 6
66837: PPUSH
66838: CALL_OW 283
66842: IFFALSE 66882
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66844: LD_ADDR_VAR 0 4
66848: PUSH
66849: LD_VAR 0 4
66853: PPUSH
66854: LD_VAR 0 4
66858: PUSH
66859: LD_INT 1
66861: PLUS
66862: PPUSH
66863: LD_VAR 0 5
66867: PUSH
66868: LD_VAR 0 6
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PPUSH
66877: CALL_OW 1
66881: ST_TO_ADDR
// end ;
66882: GO 66806
66884: POP
66885: POP
66886: GO 66786
66888: POP
66889: POP
// end ;
66890: LD_VAR 0 4
66894: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
66895: LD_INT 0
66897: PPUSH
66898: PPUSH
66899: PPUSH
66900: PPUSH
66901: PPUSH
66902: PPUSH
66903: PPUSH
66904: PPUSH
// if not units then
66905: LD_VAR 0 1
66909: NOT
66910: IFFALSE 66914
// exit ;
66912: GO 67438
// result := UnitFilter ( units , [ f_ok ] ) ;
66914: LD_ADDR_VAR 0 3
66918: PUSH
66919: LD_VAR 0 1
66923: PPUSH
66924: LD_INT 50
66926: PUSH
66927: EMPTY
66928: LIST
66929: PPUSH
66930: CALL_OW 72
66934: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66935: LD_ADDR_VAR 0 8
66939: PUSH
66940: LD_VAR 0 1
66944: PUSH
66945: LD_INT 1
66947: ARRAY
66948: PPUSH
66949: CALL_OW 255
66953: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
66954: LD_ADDR_VAR 0 10
66958: PUSH
66959: LD_INT 29
66961: PUSH
66962: LD_INT 91
66964: PUSH
66965: LD_INT 49
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: LIST
66972: ST_TO_ADDR
// if not result then
66973: LD_VAR 0 3
66977: NOT
66978: IFFALSE 66982
// exit ;
66980: GO 67438
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66982: LD_ADDR_VAR 0 5
66986: PUSH
66987: LD_INT 81
66989: PUSH
66990: LD_VAR 0 8
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PPUSH
66999: CALL_OW 69
67003: ST_TO_ADDR
// for i in result do
67004: LD_ADDR_VAR 0 4
67008: PUSH
67009: LD_VAR 0 3
67013: PUSH
67014: FOR_IN
67015: IFFALSE 67436
// begin tag := GetTag ( i ) + 1 ;
67017: LD_ADDR_VAR 0 9
67021: PUSH
67022: LD_VAR 0 4
67026: PPUSH
67027: CALL_OW 110
67031: PUSH
67032: LD_INT 1
67034: PLUS
67035: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
67036: LD_ADDR_VAR 0 7
67040: PUSH
67041: LD_VAR 0 4
67045: PPUSH
67046: CALL_OW 250
67050: PPUSH
67051: LD_VAR 0 4
67055: PPUSH
67056: CALL_OW 251
67060: PPUSH
67061: LD_INT 6
67063: PPUSH
67064: CALL 66637 0 3
67068: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
67069: LD_VAR 0 4
67073: PPUSH
67074: CALL_OW 247
67078: PUSH
67079: LD_INT 2
67081: EQUAL
67082: PUSH
67083: LD_VAR 0 7
67087: AND
67088: PUSH
67089: LD_VAR 0 4
67093: PPUSH
67094: CALL_OW 264
67098: PUSH
67099: LD_VAR 0 10
67103: IN
67104: NOT
67105: AND
67106: IFFALSE 67145
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67108: LD_VAR 0 4
67112: PPUSH
67113: LD_VAR 0 7
67117: PUSH
67118: LD_INT 1
67120: ARRAY
67121: PUSH
67122: LD_INT 1
67124: ARRAY
67125: PPUSH
67126: LD_VAR 0 7
67130: PUSH
67131: LD_INT 1
67133: ARRAY
67134: PUSH
67135: LD_INT 2
67137: ARRAY
67138: PPUSH
67139: CALL_OW 116
67143: GO 67434
// if path > tag then
67145: LD_VAR 0 2
67149: PUSH
67150: LD_VAR 0 9
67154: GREATER
67155: IFFALSE 67363
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67157: LD_ADDR_VAR 0 6
67161: PUSH
67162: LD_VAR 0 5
67166: PPUSH
67167: LD_INT 91
67169: PUSH
67170: LD_VAR 0 4
67174: PUSH
67175: LD_INT 8
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: LIST
67182: PPUSH
67183: CALL_OW 72
67187: ST_TO_ADDR
// if nearEnemy then
67188: LD_VAR 0 6
67192: IFFALSE 67261
// begin if GetWeapon ( i ) = ru_time_lapser then
67194: LD_VAR 0 4
67198: PPUSH
67199: CALL_OW 264
67203: PUSH
67204: LD_INT 49
67206: EQUAL
67207: IFFALSE 67235
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67209: LD_VAR 0 4
67213: PPUSH
67214: LD_VAR 0 6
67218: PPUSH
67219: LD_VAR 0 4
67223: PPUSH
67224: CALL_OW 74
67228: PPUSH
67229: CALL_OW 112
67233: GO 67259
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67235: LD_VAR 0 4
67239: PPUSH
67240: LD_VAR 0 6
67244: PPUSH
67245: LD_VAR 0 4
67249: PPUSH
67250: CALL_OW 74
67254: PPUSH
67255: CALL 68363 0 2
// end else
67259: GO 67361
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67261: LD_VAR 0 4
67265: PPUSH
67266: LD_VAR 0 2
67270: PUSH
67271: LD_VAR 0 9
67275: ARRAY
67276: PUSH
67277: LD_INT 1
67279: ARRAY
67280: PPUSH
67281: LD_VAR 0 2
67285: PUSH
67286: LD_VAR 0 9
67290: ARRAY
67291: PUSH
67292: LD_INT 2
67294: ARRAY
67295: PPUSH
67296: CALL_OW 297
67300: PUSH
67301: LD_INT 6
67303: GREATER
67304: IFFALSE 67347
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67306: LD_VAR 0 4
67310: PPUSH
67311: LD_VAR 0 2
67315: PUSH
67316: LD_VAR 0 9
67320: ARRAY
67321: PUSH
67322: LD_INT 1
67324: ARRAY
67325: PPUSH
67326: LD_VAR 0 2
67330: PUSH
67331: LD_VAR 0 9
67335: ARRAY
67336: PUSH
67337: LD_INT 2
67339: ARRAY
67340: PPUSH
67341: CALL_OW 114
67345: GO 67361
// SetTag ( i , tag ) ;
67347: LD_VAR 0 4
67351: PPUSH
67352: LD_VAR 0 9
67356: PPUSH
67357: CALL_OW 109
// end else
67361: GO 67434
// if enemy then
67363: LD_VAR 0 5
67367: IFFALSE 67434
// begin if GetWeapon ( i ) = ru_time_lapser then
67369: LD_VAR 0 4
67373: PPUSH
67374: CALL_OW 264
67378: PUSH
67379: LD_INT 49
67381: EQUAL
67382: IFFALSE 67410
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67384: LD_VAR 0 4
67388: PPUSH
67389: LD_VAR 0 5
67393: PPUSH
67394: LD_VAR 0 4
67398: PPUSH
67399: CALL_OW 74
67403: PPUSH
67404: CALL_OW 112
67408: GO 67434
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67410: LD_VAR 0 4
67414: PPUSH
67415: LD_VAR 0 5
67419: PPUSH
67420: LD_VAR 0 4
67424: PPUSH
67425: CALL_OW 74
67429: PPUSH
67430: CALL 68363 0 2
// end ; end ;
67434: GO 67014
67436: POP
67437: POP
// end ;
67438: LD_VAR 0 3
67442: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67443: LD_INT 0
67445: PPUSH
67446: PPUSH
67447: PPUSH
// if not unit or IsInUnit ( unit ) then
67448: LD_VAR 0 1
67452: NOT
67453: PUSH
67454: LD_VAR 0 1
67458: PPUSH
67459: CALL_OW 310
67463: OR
67464: IFFALSE 67468
// exit ;
67466: GO 67559
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67468: LD_ADDR_VAR 0 4
67472: PUSH
67473: LD_VAR 0 1
67477: PPUSH
67478: CALL_OW 250
67482: PPUSH
67483: LD_VAR 0 2
67487: PPUSH
67488: LD_INT 1
67490: PPUSH
67491: CALL_OW 272
67495: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67496: LD_ADDR_VAR 0 5
67500: PUSH
67501: LD_VAR 0 1
67505: PPUSH
67506: CALL_OW 251
67510: PPUSH
67511: LD_VAR 0 2
67515: PPUSH
67516: LD_INT 1
67518: PPUSH
67519: CALL_OW 273
67523: ST_TO_ADDR
// if ValidHex ( x , y ) then
67524: LD_VAR 0 4
67528: PPUSH
67529: LD_VAR 0 5
67533: PPUSH
67534: CALL_OW 488
67538: IFFALSE 67559
// ComTurnXY ( unit , x , y ) ;
67540: LD_VAR 0 1
67544: PPUSH
67545: LD_VAR 0 4
67549: PPUSH
67550: LD_VAR 0 5
67554: PPUSH
67555: CALL_OW 118
// end ;
67559: LD_VAR 0 3
67563: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67564: LD_INT 0
67566: PPUSH
67567: PPUSH
// result := false ;
67568: LD_ADDR_VAR 0 3
67572: PUSH
67573: LD_INT 0
67575: ST_TO_ADDR
// if not units then
67576: LD_VAR 0 2
67580: NOT
67581: IFFALSE 67585
// exit ;
67583: GO 67630
// for i in units do
67585: LD_ADDR_VAR 0 4
67589: PUSH
67590: LD_VAR 0 2
67594: PUSH
67595: FOR_IN
67596: IFFALSE 67628
// if See ( side , i ) then
67598: LD_VAR 0 1
67602: PPUSH
67603: LD_VAR 0 4
67607: PPUSH
67608: CALL_OW 292
67612: IFFALSE 67626
// begin result := true ;
67614: LD_ADDR_VAR 0 3
67618: PUSH
67619: LD_INT 1
67621: ST_TO_ADDR
// exit ;
67622: POP
67623: POP
67624: GO 67630
// end ;
67626: GO 67595
67628: POP
67629: POP
// end ;
67630: LD_VAR 0 3
67634: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67635: LD_INT 0
67637: PPUSH
67638: PPUSH
67639: PPUSH
67640: PPUSH
// if not unit or not points then
67641: LD_VAR 0 1
67645: NOT
67646: PUSH
67647: LD_VAR 0 2
67651: NOT
67652: OR
67653: IFFALSE 67657
// exit ;
67655: GO 67747
// dist := 99999 ;
67657: LD_ADDR_VAR 0 5
67661: PUSH
67662: LD_INT 99999
67664: ST_TO_ADDR
// for i in points do
67665: LD_ADDR_VAR 0 4
67669: PUSH
67670: LD_VAR 0 2
67674: PUSH
67675: FOR_IN
67676: IFFALSE 67745
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67678: LD_ADDR_VAR 0 6
67682: PUSH
67683: LD_VAR 0 1
67687: PPUSH
67688: LD_VAR 0 4
67692: PUSH
67693: LD_INT 1
67695: ARRAY
67696: PPUSH
67697: LD_VAR 0 4
67701: PUSH
67702: LD_INT 2
67704: ARRAY
67705: PPUSH
67706: CALL_OW 297
67710: ST_TO_ADDR
// if tmpDist < dist then
67711: LD_VAR 0 6
67715: PUSH
67716: LD_VAR 0 5
67720: LESS
67721: IFFALSE 67743
// begin result := i ;
67723: LD_ADDR_VAR 0 3
67727: PUSH
67728: LD_VAR 0 4
67732: ST_TO_ADDR
// dist := tmpDist ;
67733: LD_ADDR_VAR 0 5
67737: PUSH
67738: LD_VAR 0 6
67742: ST_TO_ADDR
// end ; end ;
67743: GO 67675
67745: POP
67746: POP
// end ;
67747: LD_VAR 0 3
67751: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
67752: LD_INT 0
67754: PPUSH
// uc_side := side ;
67755: LD_ADDR_OWVAR 20
67759: PUSH
67760: LD_VAR 0 1
67764: ST_TO_ADDR
// uc_nation := 3 ;
67765: LD_ADDR_OWVAR 21
67769: PUSH
67770: LD_INT 3
67772: ST_TO_ADDR
// vc_chassis := 25 ;
67773: LD_ADDR_OWVAR 37
67777: PUSH
67778: LD_INT 25
67780: ST_TO_ADDR
// vc_engine := engine_siberite ;
67781: LD_ADDR_OWVAR 39
67785: PUSH
67786: LD_INT 3
67788: ST_TO_ADDR
// vc_control := control_computer ;
67789: LD_ADDR_OWVAR 38
67793: PUSH
67794: LD_INT 3
67796: ST_TO_ADDR
// vc_weapon := 59 ;
67797: LD_ADDR_OWVAR 40
67801: PUSH
67802: LD_INT 59
67804: ST_TO_ADDR
// result := CreateVehicle ;
67805: LD_ADDR_VAR 0 5
67809: PUSH
67810: CALL_OW 45
67814: ST_TO_ADDR
// SetDir ( result , d ) ;
67815: LD_VAR 0 5
67819: PPUSH
67820: LD_VAR 0 4
67824: PPUSH
67825: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
67829: LD_VAR 0 5
67833: PPUSH
67834: LD_VAR 0 2
67838: PPUSH
67839: LD_VAR 0 3
67843: PPUSH
67844: LD_INT 0
67846: PPUSH
67847: CALL_OW 48
// end ;
67851: LD_VAR 0 5
67855: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
67856: LD_INT 0
67858: PPUSH
67859: PPUSH
67860: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
67861: LD_ADDR_VAR 0 2
67865: PUSH
67866: LD_INT 0
67868: PUSH
67869: LD_INT 0
67871: PUSH
67872: LD_INT 0
67874: PUSH
67875: LD_INT 0
67877: PUSH
67878: EMPTY
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
67884: LD_VAR 0 1
67888: NOT
67889: PUSH
67890: LD_VAR 0 1
67894: PPUSH
67895: CALL_OW 264
67899: PUSH
67900: LD_INT 12
67902: PUSH
67903: LD_INT 51
67905: PUSH
67906: LD_INT 32
67908: PUSH
67909: LD_INT 89
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: LIST
67916: LIST
67917: IN
67918: NOT
67919: OR
67920: IFFALSE 67924
// exit ;
67922: GO 68022
// for i := 1 to 3 do
67924: LD_ADDR_VAR 0 3
67928: PUSH
67929: DOUBLE
67930: LD_INT 1
67932: DEC
67933: ST_TO_ADDR
67934: LD_INT 3
67936: PUSH
67937: FOR_TO
67938: IFFALSE 68020
// begin tmp := GetCargo ( cargo , i ) ;
67940: LD_ADDR_VAR 0 4
67944: PUSH
67945: LD_VAR 0 1
67949: PPUSH
67950: LD_VAR 0 3
67954: PPUSH
67955: CALL_OW 289
67959: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
67960: LD_ADDR_VAR 0 2
67964: PUSH
67965: LD_VAR 0 2
67969: PPUSH
67970: LD_VAR 0 3
67974: PPUSH
67975: LD_VAR 0 4
67979: PPUSH
67980: CALL_OW 1
67984: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
67985: LD_ADDR_VAR 0 2
67989: PUSH
67990: LD_VAR 0 2
67994: PPUSH
67995: LD_INT 4
67997: PPUSH
67998: LD_VAR 0 2
68002: PUSH
68003: LD_INT 4
68005: ARRAY
68006: PUSH
68007: LD_VAR 0 4
68011: PLUS
68012: PPUSH
68013: CALL_OW 1
68017: ST_TO_ADDR
// end ;
68018: GO 67937
68020: POP
68021: POP
// end ;
68022: LD_VAR 0 2
68026: RET
// export function Length ( array ) ; begin
68027: LD_INT 0
68029: PPUSH
// result := array + 0 ;
68030: LD_ADDR_VAR 0 2
68034: PUSH
68035: LD_VAR 0 1
68039: PUSH
68040: LD_INT 0
68042: PLUS
68043: ST_TO_ADDR
// end ;
68044: LD_VAR 0 2
68048: RET
// export function PrepareArray ( array ) ; begin
68049: LD_INT 0
68051: PPUSH
// result := array diff 0 ;
68052: LD_ADDR_VAR 0 2
68056: PUSH
68057: LD_VAR 0 1
68061: PUSH
68062: LD_INT 0
68064: DIFF
68065: ST_TO_ADDR
// if not result [ 1 ] then
68066: LD_VAR 0 2
68070: PUSH
68071: LD_INT 1
68073: ARRAY
68074: NOT
68075: IFFALSE 68095
// result := Delete ( result , 1 ) ;
68077: LD_ADDR_VAR 0 2
68081: PUSH
68082: LD_VAR 0 2
68086: PPUSH
68087: LD_INT 1
68089: PPUSH
68090: CALL_OW 3
68094: ST_TO_ADDR
// end ;
68095: LD_VAR 0 2
68099: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
68100: LD_INT 0
68102: PPUSH
68103: PPUSH
68104: PPUSH
68105: PPUSH
// sibRocketRange := 25 ;
68106: LD_ADDR_VAR 0 6
68110: PUSH
68111: LD_INT 25
68113: ST_TO_ADDR
// result := false ;
68114: LD_ADDR_VAR 0 4
68118: PUSH
68119: LD_INT 0
68121: ST_TO_ADDR
// for i := 0 to 5 do
68122: LD_ADDR_VAR 0 5
68126: PUSH
68127: DOUBLE
68128: LD_INT 0
68130: DEC
68131: ST_TO_ADDR
68132: LD_INT 5
68134: PUSH
68135: FOR_TO
68136: IFFALSE 68203
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
68138: LD_VAR 0 1
68142: PPUSH
68143: LD_VAR 0 5
68147: PPUSH
68148: LD_VAR 0 6
68152: PPUSH
68153: CALL_OW 272
68157: PPUSH
68158: LD_VAR 0 2
68162: PPUSH
68163: LD_VAR 0 5
68167: PPUSH
68168: LD_VAR 0 6
68172: PPUSH
68173: CALL_OW 273
68177: PPUSH
68178: LD_VAR 0 3
68182: PPUSH
68183: CALL_OW 309
68187: IFFALSE 68201
// begin result := true ;
68189: LD_ADDR_VAR 0 4
68193: PUSH
68194: LD_INT 1
68196: ST_TO_ADDR
// exit ;
68197: POP
68198: POP
68199: GO 68205
// end ;
68201: GO 68135
68203: POP
68204: POP
// end ;
68205: LD_VAR 0 4
68209: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
68210: LD_INT 0
68212: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
68213: LD_VAR 0 1
68217: PPUSH
68218: LD_VAR 0 2
68222: PPUSH
68223: LD_INT 0
68225: PPUSH
68226: LD_INT 0
68228: PPUSH
68229: LD_INT 1
68231: PPUSH
68232: LD_INT 0
68234: PPUSH
68235: CALL_OW 587
// end ;
68239: LD_VAR 0 3
68243: RET
// export function CenterOnNow ( unit ) ; begin
68244: LD_INT 0
68246: PPUSH
// result := IsInUnit ( unit ) ;
68247: LD_ADDR_VAR 0 2
68251: PUSH
68252: LD_VAR 0 1
68256: PPUSH
68257: CALL_OW 310
68261: ST_TO_ADDR
// if not result then
68262: LD_VAR 0 2
68266: NOT
68267: IFFALSE 68279
// result := unit ;
68269: LD_ADDR_VAR 0 2
68273: PUSH
68274: LD_VAR 0 1
68278: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
68279: LD_VAR 0 1
68283: PPUSH
68284: CALL_OW 87
// end ;
68288: LD_VAR 0 2
68292: RET
// export function ComMoveHex ( unit , hex ) ; begin
68293: LD_INT 0
68295: PPUSH
// if not hex then
68296: LD_VAR 0 2
68300: NOT
68301: IFFALSE 68305
// exit ;
68303: GO 68358
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
68305: LD_VAR 0 2
68309: PUSH
68310: LD_INT 1
68312: ARRAY
68313: PPUSH
68314: LD_VAR 0 2
68318: PUSH
68319: LD_INT 2
68321: ARRAY
68322: PPUSH
68323: CALL_OW 428
68327: IFFALSE 68331
// exit ;
68329: GO 68358
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
68331: LD_VAR 0 1
68335: PPUSH
68336: LD_VAR 0 2
68340: PUSH
68341: LD_INT 1
68343: ARRAY
68344: PPUSH
68345: LD_VAR 0 2
68349: PUSH
68350: LD_INT 2
68352: ARRAY
68353: PPUSH
68354: CALL_OW 111
// end ;
68358: LD_VAR 0 3
68362: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
68363: LD_INT 0
68365: PPUSH
68366: PPUSH
68367: PPUSH
// if not unit or not enemy then
68368: LD_VAR 0 1
68372: NOT
68373: PUSH
68374: LD_VAR 0 2
68378: NOT
68379: OR
68380: IFFALSE 68384
// exit ;
68382: GO 68508
// x := GetX ( enemy ) ;
68384: LD_ADDR_VAR 0 4
68388: PUSH
68389: LD_VAR 0 2
68393: PPUSH
68394: CALL_OW 250
68398: ST_TO_ADDR
// y := GetY ( enemy ) ;
68399: LD_ADDR_VAR 0 5
68403: PUSH
68404: LD_VAR 0 2
68408: PPUSH
68409: CALL_OW 251
68413: ST_TO_ADDR
// if ValidHex ( x , y ) then
68414: LD_VAR 0 4
68418: PPUSH
68419: LD_VAR 0 5
68423: PPUSH
68424: CALL_OW 488
68428: IFFALSE 68508
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
68430: LD_VAR 0 2
68434: PPUSH
68435: CALL_OW 247
68439: PUSH
68440: LD_INT 3
68442: PUSH
68443: LD_INT 2
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: IN
68450: PUSH
68451: LD_VAR 0 1
68455: PPUSH
68456: CALL_OW 255
68460: PPUSH
68461: LD_VAR 0 2
68465: PPUSH
68466: CALL_OW 292
68470: AND
68471: IFFALSE 68489
// ComAttackUnit ( unit , enemy ) else
68473: LD_VAR 0 1
68477: PPUSH
68478: LD_VAR 0 2
68482: PPUSH
68483: CALL_OW 115
68487: GO 68508
// ComAgressiveMove ( unit , x , y ) ;
68489: LD_VAR 0 1
68493: PPUSH
68494: LD_VAR 0 4
68498: PPUSH
68499: LD_VAR 0 5
68503: PPUSH
68504: CALL_OW 114
// end ;
68508: LD_VAR 0 3
68512: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
68513: LD_INT 0
68515: PPUSH
68516: PPUSH
68517: PPUSH
// list := AreaToList ( area , 0 ) ;
68518: LD_ADDR_VAR 0 5
68522: PUSH
68523: LD_VAR 0 1
68527: PPUSH
68528: LD_INT 0
68530: PPUSH
68531: CALL_OW 517
68535: ST_TO_ADDR
// if not list then
68536: LD_VAR 0 5
68540: NOT
68541: IFFALSE 68545
// exit ;
68543: GO 68675
// if all then
68545: LD_VAR 0 2
68549: IFFALSE 68637
// begin for i := 1 to list [ 1 ] do
68551: LD_ADDR_VAR 0 4
68555: PUSH
68556: DOUBLE
68557: LD_INT 1
68559: DEC
68560: ST_TO_ADDR
68561: LD_VAR 0 5
68565: PUSH
68566: LD_INT 1
68568: ARRAY
68569: PUSH
68570: FOR_TO
68571: IFFALSE 68633
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
68573: LD_ADDR_VAR 0 3
68577: PUSH
68578: LD_VAR 0 3
68582: PPUSH
68583: LD_VAR 0 3
68587: PUSH
68588: LD_INT 1
68590: PLUS
68591: PPUSH
68592: LD_VAR 0 5
68596: PUSH
68597: LD_INT 1
68599: ARRAY
68600: PUSH
68601: LD_VAR 0 4
68605: ARRAY
68606: PUSH
68607: LD_VAR 0 5
68611: PUSH
68612: LD_INT 2
68614: ARRAY
68615: PUSH
68616: LD_VAR 0 4
68620: ARRAY
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PPUSH
68626: CALL_OW 1
68630: ST_TO_ADDR
68631: GO 68570
68633: POP
68634: POP
// exit ;
68635: GO 68675
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
68637: LD_ADDR_VAR 0 3
68641: PUSH
68642: LD_VAR 0 5
68646: PUSH
68647: LD_INT 1
68649: ARRAY
68650: PUSH
68651: LD_INT 1
68653: ARRAY
68654: PUSH
68655: LD_VAR 0 5
68659: PUSH
68660: LD_INT 2
68662: ARRAY
68663: PUSH
68664: LD_INT 1
68666: ARRAY
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: PUSH
68672: EMPTY
68673: LIST
68674: ST_TO_ADDR
// end ;
68675: LD_VAR 0 3
68679: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
68680: LD_INT 0
68682: PPUSH
68683: PPUSH
// list := AreaToList ( area , 0 ) ;
68684: LD_ADDR_VAR 0 4
68688: PUSH
68689: LD_VAR 0 1
68693: PPUSH
68694: LD_INT 0
68696: PPUSH
68697: CALL_OW 517
68701: ST_TO_ADDR
// if not list then
68702: LD_VAR 0 4
68706: NOT
68707: IFFALSE 68711
// exit ;
68709: GO 68752
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
68711: LD_ADDR_VAR 0 3
68715: PUSH
68716: LD_VAR 0 4
68720: PUSH
68721: LD_INT 1
68723: ARRAY
68724: PUSH
68725: LD_INT 1
68727: ARRAY
68728: PUSH
68729: LD_VAR 0 4
68733: PUSH
68734: LD_INT 2
68736: ARRAY
68737: PUSH
68738: LD_INT 1
68740: ARRAY
68741: PUSH
68742: LD_VAR 0 2
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: LIST
68751: ST_TO_ADDR
// end ;
68752: LD_VAR 0 3
68756: RET
// export function First ( array ) ; begin
68757: LD_INT 0
68759: PPUSH
// if not array then
68760: LD_VAR 0 1
68764: NOT
68765: IFFALSE 68769
// exit ;
68767: GO 68783
// result := array [ 1 ] ;
68769: LD_ADDR_VAR 0 2
68773: PUSH
68774: LD_VAR 0 1
68778: PUSH
68779: LD_INT 1
68781: ARRAY
68782: ST_TO_ADDR
// end ;
68783: LD_VAR 0 2
68787: RET
// export function Last ( array ) ; begin
68788: LD_INT 0
68790: PPUSH
// if not array then
68791: LD_VAR 0 1
68795: NOT
68796: IFFALSE 68800
// exit ;
68798: GO 68816
// result := array [ array ] ;
68800: LD_ADDR_VAR 0 2
68804: PUSH
68805: LD_VAR 0 1
68809: PUSH
68810: LD_VAR 0 1
68814: ARRAY
68815: ST_TO_ADDR
// end ; end_of_file
68816: LD_VAR 0 2
68820: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68821: LD_VAR 0 1
68825: PPUSH
68826: LD_VAR 0 2
68830: PPUSH
68831: LD_VAR 0 3
68835: PPUSH
68836: LD_VAR 0 4
68840: PPUSH
68841: LD_VAR 0 5
68845: PPUSH
68846: LD_VAR 0 6
68850: PPUSH
68851: CALL 6048 0 6
// end ;
68855: PPOPN 6
68857: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
68858: LD_INT 0
68860: PPUSH
// begin if not units then
68861: LD_VAR 0 1
68865: NOT
68866: IFFALSE 68870
// exit ;
68868: GO 68870
// end ;
68870: PPOPN 7
68872: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
68873: CALL 5952 0 0
// end ; end_of_file
68877: PPOPN 1
68879: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68880: LD_VAR 0 1
68884: PUSH
68885: LD_INT 200
68887: DOUBLE
68888: GREATEREQUAL
68889: IFFALSE 68897
68891: LD_INT 299
68893: DOUBLE
68894: LESSEQUAL
68895: IFTRUE 68899
68897: GO 68931
68899: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68900: LD_VAR 0 1
68904: PPUSH
68905: LD_VAR 0 2
68909: PPUSH
68910: LD_VAR 0 3
68914: PPUSH
68915: LD_VAR 0 4
68919: PPUSH
68920: LD_VAR 0 5
68924: PPUSH
68925: CALL 22071 0 5
68929: GO 69008
68931: LD_INT 300
68933: DOUBLE
68934: GREATEREQUAL
68935: IFFALSE 68943
68937: LD_INT 399
68939: DOUBLE
68940: LESSEQUAL
68941: IFTRUE 68945
68943: GO 69007
68945: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68946: LD_VAR 0 1
68950: PPUSH
68951: LD_VAR 0 2
68955: PPUSH
68956: LD_VAR 0 3
68960: PPUSH
68961: LD_VAR 0 4
68965: PPUSH
68966: LD_VAR 0 5
68970: PPUSH
68971: LD_VAR 0 6
68975: PPUSH
68976: LD_VAR 0 7
68980: PPUSH
68981: LD_VAR 0 8
68985: PPUSH
68986: LD_VAR 0 9
68990: PPUSH
68991: LD_VAR 0 10
68995: PPUSH
68996: LD_VAR 0 11
69000: PPUSH
69001: CALL 18396 0 11
69005: GO 69008
69007: POP
// end ;
69008: PPOPN 11
69010: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69011: LD_VAR 0 1
69015: PPUSH
69016: LD_VAR 0 2
69020: PPUSH
69021: LD_VAR 0 3
69025: PPUSH
69026: LD_VAR 0 4
69030: PPUSH
69031: LD_VAR 0 5
69035: PPUSH
69036: CALL 21807 0 5
// end ;
69040: PPOPN 5
69042: END
