// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// FogOff ( true ) ;
  15: LD_INT 1
  17: PPUSH
  18: CALL_OW 344
// baseCorrect = 0 ;
  22: LD_ADDR_EXP 17
  26: PUSH
  27: LD_INT 0
  29: ST_TO_ADDR
// cutscene = 1 ;
  30: LD_ADDR_EXP 18
  34: PUSH
  35: LD_INT 1
  37: ST_TO_ADDR
// apemans = [ ] ;
  38: LD_ADDR_EXP 12
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourApemans = [ ] ;
  45: LD_ADDR_EXP 13
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// yourVehicles = [ ] ;
  52: LD_ADDR_EXP 14
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// randomsDelta := [ ] ;
  59: LD_ADDR_EXP 11
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// resources = [ ] ;
  66: LD_ADDR_EXP 20
  70: PUSH
  71: EMPTY
  72: ST_TO_ADDR
// mission_prefix := 06_ ;
  73: LD_ADDR_EXP 21
  77: PUSH
  78: LD_STRING 06_
  80: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  81: LD_ADDR_EXP 22
  85: PUSH
  86: LD_STRING 05_
  88: ST_TO_ADDR
// PrepareDeltaBase ;
  89: CALL 2234 0 0
// LoadVehicles ;
  93: CALL 1282 0 0
// PrepareHeroes ;
  97: CALL 169 0 0
// PrepareRandoms ;
 101: CALL 1583 0 0
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 105: LD_ADDR_EXP 19
 109: PUSH
 110: LD_INT 22
 112: PUSH
 113: LD_INT 1
 115: PUSH
 116: EMPTY
 117: LIST
 118: LIST
 119: PUSH
 120: LD_INT 2
 122: PUSH
 123: LD_INT 30
 125: PUSH
 126: LD_INT 6
 128: PUSH
 129: EMPTY
 130: LIST
 131: LIST
 132: PUSH
 133: LD_INT 30
 135: PUSH
 136: LD_INT 7
 138: PUSH
 139: EMPTY
 140: LIST
 141: LIST
 142: PUSH
 143: LD_INT 30
 145: PUSH
 146: LD_INT 8
 148: PUSH
 149: EMPTY
 150: LIST
 151: LIST
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: LIST
 157: LIST
 158: PUSH
 159: EMPTY
 160: LIST
 161: LIST
 162: PPUSH
 163: CALL_OW 69
 167: ST_TO_ADDR
// end ; end_of_file
 168: END
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 169: LD_INT 0
 171: PPUSH
 172: PPUSH
 173: PPUSH
 174: PPUSH
 175: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 176: LD_ADDR_VAR 0 3
 180: PUSH
 181: LD_INT 22
 183: PUSH
 184: LD_INT 1
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: PUSH
 191: LD_INT 21
 193: PUSH
 194: LD_INT 3
 196: PUSH
 197: EMPTY
 198: LIST
 199: LIST
 200: PUSH
 201: LD_INT 30
 203: PUSH
 204: LD_INT 0
 206: PUSH
 207: EMPTY
 208: LIST
 209: LIST
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PPUSH
 216: CALL_OW 69
 220: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , delta ) ;
 221: LD_VAR 0 3
 225: PUSH
 226: LD_INT 1
 228: ARRAY
 229: PPUSH
 230: LD_STRING delta
 232: PPUSH
 233: CALL_OW 500
// uc_side = 1 ;
 237: LD_ADDR_OWVAR 20
 241: PUSH
 242: LD_INT 1
 244: ST_TO_ADDR
// uc_nation = 1 ;
 245: LD_ADDR_OWVAR 21
 249: PUSH
 250: LD_INT 1
 252: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 253: LD_ADDR_EXP 1
 257: PUSH
 258: LD_STRING JMM
 260: PPUSH
 261: LD_INT 1
 263: PPUSH
 264: CALL 4348 0 2
 268: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 269: LD_ADDR_EXP 16
 273: PUSH
 274: LD_STRING Harisson
 276: PPUSH
 277: LD_INT 0
 279: PPUSH
 280: CALL 4348 0 2
 284: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 285: LD_EXP 1
 289: PPUSH
 290: LD_VAR 0 3
 294: PUSH
 295: LD_INT 1
 297: ARRAY
 298: PPUSH
 299: CALL_OW 250
 303: PPUSH
 304: LD_VAR 0 3
 308: PUSH
 309: LD_INT 1
 311: ARRAY
 312: PPUSH
 313: CALL_OW 251
 317: PPUSH
 318: LD_INT 5
 320: PPUSH
 321: LD_INT 0
 323: PPUSH
 324: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 328: LD_EXP 1
 332: PPUSH
 333: LD_INT 1
 335: PPUSH
 336: CALL_OW 336
// Gladstone = PrepareUnit ( Gladstone , true ) ;
 340: LD_ADDR_EXP 2
 344: PUSH
 345: LD_STRING Gladstone
 347: PPUSH
 348: LD_INT 1
 350: PPUSH
 351: CALL 4348 0 2
 355: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 356: LD_EXP 2
 360: PPUSH
 361: LD_VAR 0 3
 365: PUSH
 366: LD_INT 1
 368: ARRAY
 369: PPUSH
 370: CALL_OW 250
 374: PPUSH
 375: LD_VAR 0 3
 379: PUSH
 380: LD_INT 1
 382: ARRAY
 383: PPUSH
 384: CALL_OW 251
 388: PPUSH
 389: LD_INT 5
 391: PPUSH
 392: LD_INT 0
 394: PPUSH
 395: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 399: LD_EXP 2
 403: PPUSH
 404: LD_INT 4
 406: PPUSH
 407: CALL_OW 336
// Denis = PrepareUnit ( Denis , true ) ;
 411: LD_ADDR_EXP 3
 415: PUSH
 416: LD_STRING Denis
 418: PPUSH
 419: LD_INT 1
 421: PPUSH
 422: CALL 4348 0 2
 426: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 427: LD_EXP 3
 431: PPUSH
 432: LD_VAR 0 3
 436: PUSH
 437: LD_INT 1
 439: ARRAY
 440: PPUSH
 441: CALL_OW 250
 445: PPUSH
 446: LD_VAR 0 3
 450: PUSH
 451: LD_INT 1
 453: ARRAY
 454: PPUSH
 455: CALL_OW 251
 459: PPUSH
 460: LD_INT 5
 462: PPUSH
 463: LD_INT 0
 465: PPUSH
 466: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 470: LD_EXP 3
 474: PPUSH
 475: LD_INT 4
 477: PPUSH
 478: CALL_OW 336
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 482: LD_STRING FrankInDelta
 484: PPUSH
 485: LD_INT 0
 487: PPUSH
 488: CALL_OW 30
 492: PUSH
 493: LD_INT 1
 495: EQUAL
 496: IFFALSE 569
// begin Frank = PrepareUnit ( Frank , true ) ;
 498: LD_ADDR_EXP 5
 502: PUSH
 503: LD_STRING Frank
 505: PPUSH
 506: LD_INT 1
 508: PPUSH
 509: CALL 4348 0 2
 513: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 514: LD_EXP 5
 518: PPUSH
 519: LD_VAR 0 3
 523: PUSH
 524: LD_INT 1
 526: ARRAY
 527: PPUSH
 528: CALL_OW 250
 532: PPUSH
 533: LD_VAR 0 3
 537: PUSH
 538: LD_INT 1
 540: ARRAY
 541: PPUSH
 542: CALL_OW 251
 546: PPUSH
 547: LD_INT 5
 549: PPUSH
 550: LD_INT 0
 552: PPUSH
 553: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 557: LD_EXP 5
 561: PPUSH
 562: LD_INT 1
 564: PPUSH
 565: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 569: LD_STRING LisaInDelta
 571: PPUSH
 572: LD_INT 0
 574: PPUSH
 575: CALL_OW 30
 579: PUSH
 580: LD_INT 1
 582: EQUAL
 583: IFFALSE 656
// begin Lisa = PrepareUnit ( Lisa , true ) ;
 585: LD_ADDR_EXP 4
 589: PUSH
 590: LD_STRING Lisa
 592: PPUSH
 593: LD_INT 1
 595: PPUSH
 596: CALL 4348 0 2
 600: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 601: LD_EXP 4
 605: PPUSH
 606: LD_VAR 0 3
 610: PUSH
 611: LD_INT 1
 613: ARRAY
 614: PPUSH
 615: CALL_OW 250
 619: PPUSH
 620: LD_VAR 0 3
 624: PUSH
 625: LD_INT 1
 627: ARRAY
 628: PPUSH
 629: CALL_OW 251
 633: PPUSH
 634: LD_INT 5
 636: PPUSH
 637: LD_INT 0
 639: PPUSH
 640: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 644: LD_EXP 4
 648: PPUSH
 649: LD_INT 1
 651: PPUSH
 652: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 656: LD_STRING BobbyInDelta
 658: PPUSH
 659: LD_INT 0
 661: PPUSH
 662: CALL_OW 30
 666: PUSH
 667: LD_INT 1
 669: EQUAL
 670: IFFALSE 743
// begin Bobby = PrepareUnit ( Bobby , true ) ;
 672: LD_ADDR_EXP 6
 676: PUSH
 677: LD_STRING Bobby
 679: PPUSH
 680: LD_INT 1
 682: PPUSH
 683: CALL 4348 0 2
 687: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 688: LD_EXP 6
 692: PPUSH
 693: LD_VAR 0 3
 697: PUSH
 698: LD_INT 1
 700: ARRAY
 701: PPUSH
 702: CALL_OW 250
 706: PPUSH
 707: LD_VAR 0 3
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: PPUSH
 716: CALL_OW 251
 720: PPUSH
 721: LD_INT 5
 723: PPUSH
 724: LD_INT 0
 726: PPUSH
 727: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 731: LD_EXP 6
 735: PPUSH
 736: LD_INT 1
 738: PPUSH
 739: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 743: LD_STRING CyrusInDelta
 745: PPUSH
 746: LD_INT 0
 748: PPUSH
 749: CALL_OW 30
 753: PUSH
 754: LD_INT 1
 756: EQUAL
 757: IFFALSE 830
// begin Cyrus = PrepareUnit ( Cyrus , true ) ;
 759: LD_ADDR_EXP 7
 763: PUSH
 764: LD_STRING Cyrus
 766: PPUSH
 767: LD_INT 1
 769: PPUSH
 770: CALL 4348 0 2
 774: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 775: LD_EXP 7
 779: PPUSH
 780: LD_VAR 0 3
 784: PUSH
 785: LD_INT 1
 787: ARRAY
 788: PPUSH
 789: CALL_OW 250
 793: PPUSH
 794: LD_VAR 0 3
 798: PUSH
 799: LD_INT 1
 801: ARRAY
 802: PPUSH
 803: CALL_OW 251
 807: PPUSH
 808: LD_INT 5
 810: PPUSH
 811: LD_INT 0
 813: PPUSH
 814: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
 818: LD_EXP 7
 822: PPUSH
 823: LD_INT 1
 825: PPUSH
 826: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
 830: LD_STRING DonaldsonInDelta
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL_OW 30
 840: PUSH
 841: LD_INT 1
 843: EQUAL
 844: IFFALSE 917
// begin Donaldson = PrepareUnit ( Donaldson , true ) ;
 846: LD_ADDR_EXP 9
 850: PUSH
 851: LD_STRING Donaldson
 853: PPUSH
 854: LD_INT 1
 856: PPUSH
 857: CALL 4348 0 2
 861: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 862: LD_EXP 9
 866: PPUSH
 867: LD_VAR 0 3
 871: PUSH
 872: LD_INT 1
 874: ARRAY
 875: PPUSH
 876: CALL_OW 250
 880: PPUSH
 881: LD_VAR 0 3
 885: PUSH
 886: LD_INT 1
 888: ARRAY
 889: PPUSH
 890: CALL_OW 251
 894: PPUSH
 895: LD_INT 5
 897: PPUSH
 898: LD_INT 0
 900: PPUSH
 901: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
 905: LD_EXP 9
 909: PPUSH
 910: LD_INT 1
 912: PPUSH
 913: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
 917: LD_STRING BrownInDelta
 919: PPUSH
 920: LD_INT 0
 922: PPUSH
 923: CALL_OW 30
 927: PUSH
 928: LD_INT 1
 930: EQUAL
 931: IFFALSE 1004
// begin Brown = PrepareUnit ( Brown , true ) ;
 933: LD_ADDR_EXP 8
 937: PUSH
 938: LD_STRING Brown
 940: PPUSH
 941: LD_INT 1
 943: PPUSH
 944: CALL 4348 0 2
 948: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 949: LD_EXP 8
 953: PPUSH
 954: LD_VAR 0 3
 958: PUSH
 959: LD_INT 1
 961: ARRAY
 962: PPUSH
 963: CALL_OW 250
 967: PPUSH
 968: LD_VAR 0 3
 972: PUSH
 973: LD_INT 1
 975: ARRAY
 976: PPUSH
 977: CALL_OW 251
 981: PPUSH
 982: LD_INT 5
 984: PPUSH
 985: LD_INT 0
 987: PPUSH
 988: CALL_OW 50
// SetClass ( Brown , 2 ) ;
 992: LD_EXP 8
 996: PPUSH
 997: LD_INT 2
 999: PPUSH
1000: CALL_OW 336
// end ; others = CreateCharacterSet ( othersInDelta ) ;
1004: LD_ADDR_EXP 10
1008: PUSH
1009: LD_STRING othersInDelta
1011: PPUSH
1012: CALL_OW 31
1016: ST_TO_ADDR
// for i in others do
1017: LD_ADDR_VAR 0 2
1021: PUSH
1022: LD_EXP 10
1026: PUSH
1027: FOR_IN
1028: IFFALSE 1075
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1030: LD_VAR 0 2
1034: PPUSH
1035: LD_VAR 0 3
1039: PUSH
1040: LD_INT 1
1042: ARRAY
1043: PPUSH
1044: CALL_OW 250
1048: PPUSH
1049: LD_VAR 0 3
1053: PUSH
1054: LD_INT 1
1056: ARRAY
1057: PPUSH
1058: CALL_OW 251
1062: PPUSH
1063: LD_INT 35
1065: PPUSH
1066: LD_INT 0
1068: PPUSH
1069: CALL_OW 50
1073: GO 1027
1075: POP
1076: POP
// apemans = CreateCharacterSet ( apeInDelta ) ;
1077: LD_ADDR_EXP 12
1081: PUSH
1082: LD_STRING apeInDelta
1084: PPUSH
1085: CALL_OW 31
1089: ST_TO_ADDR
// uc_nation = 0 ;
1090: LD_ADDR_OWVAR 21
1094: PUSH
1095: LD_INT 0
1097: ST_TO_ADDR
// if apemans > 5 then
1098: LD_EXP 12
1102: PUSH
1103: LD_INT 5
1105: GREATER
1106: IFFALSE 1201
// begin for i := 1 to 5 do
1108: LD_ADDR_VAR 0 2
1112: PUSH
1113: DOUBLE
1114: LD_INT 1
1116: DEC
1117: ST_TO_ADDR
1118: LD_INT 5
1120: PUSH
1121: FOR_TO
1122: IFFALSE 1197
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1124: LD_EXP 12
1128: PUSH
1129: LD_VAR 0 2
1133: ARRAY
1134: PPUSH
1135: LD_VAR 0 3
1139: PUSH
1140: LD_INT 1
1142: ARRAY
1143: PPUSH
1144: CALL_OW 250
1148: PPUSH
1149: LD_VAR 0 3
1153: PUSH
1154: LD_INT 1
1156: ARRAY
1157: PPUSH
1158: CALL_OW 251
1162: PPUSH
1163: LD_INT 50
1165: PPUSH
1166: LD_INT 0
1168: PPUSH
1169: CALL_OW 50
// yourApemans = yourApemans ^ apemans [ i ] ;
1173: LD_ADDR_EXP 13
1177: PUSH
1178: LD_EXP 13
1182: PUSH
1183: LD_EXP 12
1187: PUSH
1188: LD_VAR 0 2
1192: ARRAY
1193: ADD
1194: ST_TO_ADDR
// end ;
1195: GO 1121
1197: POP
1198: POP
// end else
1199: GO 1277
// begin for i in apemans do
1201: LD_ADDR_VAR 0 2
1205: PUSH
1206: LD_EXP 12
1210: PUSH
1211: FOR_IN
1212: IFFALSE 1275
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1214: LD_VAR 0 2
1218: PPUSH
1219: LD_VAR 0 3
1223: PUSH
1224: LD_INT 1
1226: ARRAY
1227: PPUSH
1228: CALL_OW 250
1232: PPUSH
1233: LD_VAR 0 3
1237: PUSH
1238: LD_INT 1
1240: ARRAY
1241: PPUSH
1242: CALL_OW 251
1246: PPUSH
1247: LD_INT 50
1249: PPUSH
1250: LD_INT 0
1252: PPUSH
1253: CALL_OW 50
// yourApemans = yourApemans ^ i ;
1257: LD_ADDR_EXP 13
1261: PUSH
1262: LD_EXP 13
1266: PUSH
1267: LD_VAR 0 2
1271: ADD
1272: ST_TO_ADDR
// end ;
1273: GO 1211
1275: POP
1276: POP
// end ; end ;
1277: LD_VAR 0 1
1281: RET
// export function LoadVehicles ; var i , veh , tmp , vehicles ; begin
1282: LD_INT 0
1284: PPUSH
1285: PPUSH
1286: PPUSH
1287: PPUSH
1288: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1289: LD_ADDR_VAR 0 4
1293: PUSH
1294: LD_INT 22
1296: PUSH
1297: LD_INT 1
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: PUSH
1304: LD_INT 21
1306: PUSH
1307: LD_INT 3
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: PUSH
1314: LD_INT 30
1316: PUSH
1317: LD_INT 0
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: PUSH
1324: EMPTY
1325: LIST
1326: LIST
1327: LIST
1328: PPUSH
1329: CALL_OW 69
1333: ST_TO_ADDR
// uc_side = 1 ;
1334: LD_ADDR_OWVAR 20
1338: PUSH
1339: LD_INT 1
1341: ST_TO_ADDR
// vehicles = LoadVariable ( vehiclesInDelta , [ ] ) ;
1342: LD_ADDR_VAR 0 5
1346: PUSH
1347: LD_STRING vehiclesInDelta
1349: PPUSH
1350: EMPTY
1351: PPUSH
1352: CALL_OW 30
1356: ST_TO_ADDR
// for i = 1 to vehicles do
1357: LD_ADDR_VAR 0 2
1361: PUSH
1362: DOUBLE
1363: LD_INT 1
1365: DEC
1366: ST_TO_ADDR
1367: LD_VAR 0 5
1371: PUSH
1372: FOR_TO
1373: IFFALSE 1576
// begin if vehicles [ i + 4 ] = 11 or vehicles [ i ] = 3 then
1375: LD_VAR 0 5
1379: PUSH
1380: LD_VAR 0 2
1384: PUSH
1385: LD_INT 4
1387: PLUS
1388: ARRAY
1389: PUSH
1390: LD_INT 11
1392: EQUAL
1393: PUSH
1394: LD_VAR 0 5
1398: PUSH
1399: LD_VAR 0 2
1403: ARRAY
1404: PUSH
1405: LD_INT 3
1407: EQUAL
1408: OR
1409: IFFALSE 1560
// begin uc_nation = vehicles [ i ] ;
1411: LD_ADDR_OWVAR 21
1415: PUSH
1416: LD_VAR 0 5
1420: PUSH
1421: LD_VAR 0 2
1425: ARRAY
1426: ST_TO_ADDR
// vc_chassis = vehicles [ i + 1 ] ;
1427: LD_ADDR_OWVAR 37
1431: PUSH
1432: LD_VAR 0 5
1436: PUSH
1437: LD_VAR 0 2
1441: PUSH
1442: LD_INT 1
1444: PLUS
1445: ARRAY
1446: ST_TO_ADDR
// vc_engine = vehicles [ i + 2 ] ;
1447: LD_ADDR_OWVAR 39
1451: PUSH
1452: LD_VAR 0 5
1456: PUSH
1457: LD_VAR 0 2
1461: PUSH
1462: LD_INT 2
1464: PLUS
1465: ARRAY
1466: ST_TO_ADDR
// vc_control = vehicles [ i + 3 ] ;
1467: LD_ADDR_OWVAR 38
1471: PUSH
1472: LD_VAR 0 5
1476: PUSH
1477: LD_VAR 0 2
1481: PUSH
1482: LD_INT 3
1484: PLUS
1485: ARRAY
1486: ST_TO_ADDR
// vc_weapon = vehicles [ i + 4 ] ;
1487: LD_ADDR_OWVAR 40
1491: PUSH
1492: LD_VAR 0 5
1496: PUSH
1497: LD_VAR 0 2
1501: PUSH
1502: LD_INT 4
1504: PLUS
1505: ARRAY
1506: ST_TO_ADDR
// veh = CreateVehicle ;
1507: LD_ADDR_VAR 0 3
1511: PUSH
1512: CALL_OW 45
1516: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 40 , false ) ;
1517: LD_VAR 0 3
1521: PPUSH
1522: LD_VAR 0 4
1526: PUSH
1527: LD_INT 1
1529: ARRAY
1530: PPUSH
1531: CALL_OW 250
1535: PPUSH
1536: LD_VAR 0 4
1540: PUSH
1541: LD_INT 1
1543: ARRAY
1544: PPUSH
1545: CALL_OW 251
1549: PPUSH
1550: LD_INT 40
1552: PPUSH
1553: LD_INT 0
1555: PPUSH
1556: CALL_OW 50
// end ; i = i + 4 ;
1560: LD_ADDR_VAR 0 2
1564: PUSH
1565: LD_VAR 0 2
1569: PUSH
1570: LD_INT 4
1572: PLUS
1573: ST_TO_ADDR
// end ;
1574: GO 1372
1576: POP
1577: POP
// end ;
1578: LD_VAR 0 1
1582: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1583: LD_INT 0
1585: PPUSH
1586: PPUSH
1587: PPUSH
1588: PPUSH
1589: PPUSH
// uc_side = 1 ;
1590: LD_ADDR_OWVAR 20
1594: PUSH
1595: LD_INT 1
1597: ST_TO_ADDR
// uc_nation = 1 ;
1598: LD_ADDR_OWVAR 21
1602: PUSH
1603: LD_INT 1
1605: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1606: LD_ADDR_VAR 0 4
1610: PUSH
1611: LD_INT 22
1613: PUSH
1614: LD_INT 1
1616: PUSH
1617: EMPTY
1618: LIST
1619: LIST
1620: PUSH
1621: LD_INT 21
1623: PUSH
1624: LD_INT 3
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: PUSH
1631: LD_INT 30
1633: PUSH
1634: LD_INT 0
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: LIST
1645: PPUSH
1646: CALL_OW 69
1650: ST_TO_ADDR
// if FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] then
1651: LD_INT 22
1653: PUSH
1654: LD_INT 1
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PUSH
1661: LD_INT 25
1663: PUSH
1664: LD_INT 4
1666: PUSH
1667: EMPTY
1668: LIST
1669: LIST
1670: PUSH
1671: LD_INT 26
1673: PUSH
1674: LD_INT 1
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: PUSH
1681: EMPTY
1682: LIST
1683: LIST
1684: LIST
1685: PUSH
1686: EMPTY
1687: LIST
1688: PPUSH
1689: CALL_OW 69
1693: PUSH
1694: LD_EXP 1
1698: PUSH
1699: LD_EXP 7
1703: PUSH
1704: LD_EXP 6
1708: PUSH
1709: LD_EXP 5
1713: PUSH
1714: LD_EXP 2
1718: PUSH
1719: LD_EXP 3
1723: PUSH
1724: LD_EXP 8
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: DIFF
1738: IFFALSE 1839
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) [ 1 ] else
1740: LD_ADDR_EXP 15
1744: PUSH
1745: LD_INT 22
1747: PUSH
1748: LD_INT 1
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: PUSH
1755: LD_INT 25
1757: PUSH
1758: LD_INT 4
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: PUSH
1765: LD_INT 26
1767: PUSH
1768: LD_INT 1
1770: PUSH
1771: EMPTY
1772: LIST
1773: LIST
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: LIST
1779: PUSH
1780: EMPTY
1781: LIST
1782: PPUSH
1783: CALL_OW 69
1787: PUSH
1788: LD_EXP 1
1792: PUSH
1793: LD_EXP 7
1797: PUSH
1798: LD_EXP 6
1802: PUSH
1803: LD_EXP 5
1807: PUSH
1808: LD_EXP 2
1812: PUSH
1813: LD_EXP 3
1817: PUSH
1818: LD_EXP 8
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: DIFF
1832: PUSH
1833: LD_INT 1
1835: ARRAY
1836: ST_TO_ADDR
1837: GO 1986
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
1839: LD_ADDR_VAR 0 5
1843: PUSH
1844: LD_INT 22
1846: PUSH
1847: LD_INT 1
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: PUSH
1854: LD_INT 26
1856: PUSH
1857: LD_INT 1
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: EMPTY
1869: LIST
1870: PPUSH
1871: CALL_OW 69
1875: PUSH
1876: LD_EXP 1
1880: PUSH
1881: LD_EXP 7
1885: PUSH
1886: LD_EXP 6
1890: PUSH
1891: LD_EXP 5
1895: PUSH
1896: LD_EXP 2
1900: PUSH
1901: LD_EXP 3
1905: PUSH
1906: LD_EXP 8
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: DIFF
1920: ST_TO_ADDR
// if filter then
1921: LD_VAR 0 5
1925: IFFALSE 1986
// for i in filter do
1927: LD_ADDR_VAR 0 2
1931: PUSH
1932: LD_VAR 0 5
1936: PUSH
1937: FOR_IN
1938: IFFALSE 1984
// if GetSkill ( i , 4 ) >= 4 then
1940: LD_VAR 0 2
1944: PPUSH
1945: LD_INT 4
1947: PPUSH
1948: CALL_OW 259
1952: PUSH
1953: LD_INT 4
1955: GREATEREQUAL
1956: IFFALSE 1982
// begin deltaDoctor := i ;
1958: LD_ADDR_EXP 15
1962: PUSH
1963: LD_VAR 0 2
1967: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
1968: LD_EXP 15
1972: PPUSH
1973: LD_INT 4
1975: PPUSH
1976: CALL_OW 336
// break ;
1980: GO 1984
// end ;
1982: GO 1937
1984: POP
1985: POP
// end ; for i = 1 to 7 do
1986: LD_ADDR_VAR 0 2
1990: PUSH
1991: DOUBLE
1992: LD_INT 1
1994: DEC
1995: ST_TO_ADDR
1996: LD_INT 7
1998: PUSH
1999: FOR_TO
2000: IFFALSE 2137
// begin hc_gallery =  ;
2002: LD_ADDR_OWVAR 33
2006: PUSH
2007: LD_STRING 
2009: ST_TO_ADDR
// hc_name =  ;
2010: LD_ADDR_OWVAR 26
2014: PUSH
2015: LD_STRING 
2017: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) ) ;
2018: LD_INT 0
2020: PPUSH
2021: LD_INT 1
2023: PUSH
2024: LD_INT 2
2026: PUSH
2027: LD_INT 3
2029: PUSH
2030: LD_INT 4
2032: PUSH
2033: EMPTY
2034: LIST
2035: LIST
2036: LIST
2037: LIST
2038: PUSH
2039: LD_INT 1
2041: PPUSH
2042: LD_INT 4
2044: PPUSH
2045: CALL_OW 12
2049: ARRAY
2050: PPUSH
2051: LD_INT 3
2053: PPUSH
2054: LD_INT 5
2056: PPUSH
2057: CALL_OW 12
2061: PPUSH
2062: CALL_OW 380
// un = CreateHuman ;
2066: LD_ADDR_VAR 0 3
2070: PUSH
2071: CALL_OW 44
2075: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2076: LD_ADDR_EXP 11
2080: PUSH
2081: LD_EXP 11
2085: PUSH
2086: LD_VAR 0 3
2090: ADD
2091: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2092: LD_VAR 0 3
2096: PPUSH
2097: LD_VAR 0 4
2101: PUSH
2102: LD_INT 1
2104: ARRAY
2105: PPUSH
2106: CALL_OW 250
2110: PPUSH
2111: LD_VAR 0 4
2115: PUSH
2116: LD_INT 1
2118: ARRAY
2119: PPUSH
2120: CALL_OW 251
2124: PPUSH
2125: LD_INT 15
2127: PPUSH
2128: LD_INT 0
2130: PPUSH
2131: CALL_OW 50
// end ;
2135: GO 1999
2137: POP
2138: POP
// if deltaDoctor then
2139: LD_EXP 15
2143: IFFALSE 2147
// exit ;
2145: GO 2229
// hc_gallery =  ;
2147: LD_ADDR_OWVAR 33
2151: PUSH
2152: LD_STRING 
2154: ST_TO_ADDR
// hc_name = Dr. Adam Charles Dawkins ;
2155: LD_ADDR_OWVAR 26
2159: PUSH
2160: LD_STRING Dr. Adam Charles Dawkins
2162: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 6 ) ;
2163: LD_INT 1
2165: PPUSH
2166: LD_INT 4
2168: PPUSH
2169: LD_INT 6
2171: PPUSH
2172: CALL_OW 380
// deltaDoctor = CreateHuman ;
2176: LD_ADDR_EXP 15
2180: PUSH
2181: CALL_OW 44
2185: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2186: LD_EXP 15
2190: PPUSH
2191: LD_VAR 0 4
2195: PUSH
2196: LD_INT 1
2198: ARRAY
2199: PPUSH
2200: CALL_OW 250
2204: PPUSH
2205: LD_VAR 0 4
2209: PUSH
2210: LD_INT 1
2212: ARRAY
2213: PPUSH
2214: CALL_OW 251
2218: PPUSH
2219: LD_INT 5
2221: PPUSH
2222: LD_INT 0
2224: PPUSH
2225: CALL_OW 50
// end ; end_of_file
2229: LD_VAR 0 1
2233: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2234: LD_INT 0
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
2240: PPUSH
2241: PPUSH
2242: PPUSH
// buildings = LoadVariable ( buildingsInDelta , [ ] ) ;
2243: LD_ADDR_VAR 0 5
2247: PUSH
2248: LD_STRING buildingsInDelta
2250: PPUSH
2251: EMPTY
2252: PPUSH
2253: CALL_OW 30
2257: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2258: LD_INT 68
2260: PPUSH
2261: LD_INT 40
2263: PPUSH
2264: LD_INT 1
2266: PPUSH
2267: CALL_OW 441
// uc_side = 1 ;
2271: LD_ADDR_OWVAR 20
2275: PUSH
2276: LD_INT 1
2278: ST_TO_ADDR
// uc_nation = 1 ;
2279: LD_ADDR_OWVAR 21
2283: PUSH
2284: LD_INT 1
2286: ST_TO_ADDR
// for i = 1 to buildings do
2287: LD_ADDR_VAR 0 2
2291: PUSH
2292: DOUBLE
2293: LD_INT 1
2295: DEC
2296: ST_TO_ADDR
2297: LD_VAR 0 5
2301: PUSH
2302: FOR_TO
2303: IFFALSE 2601
// begin bc_type = buildings [ i ] [ 1 ] ;
2305: LD_ADDR_OWVAR 42
2309: PUSH
2310: LD_VAR 0 5
2314: PUSH
2315: LD_VAR 0 2
2319: ARRAY
2320: PUSH
2321: LD_INT 1
2323: ARRAY
2324: ST_TO_ADDR
// bc_level = buildings [ i ] [ 2 ] ;
2325: LD_ADDR_OWVAR 43
2329: PUSH
2330: LD_VAR 0 5
2334: PUSH
2335: LD_VAR 0 2
2339: ARRAY
2340: PUSH
2341: LD_INT 2
2343: ARRAY
2344: ST_TO_ADDR
// if bc_type = b_lab then
2345: LD_OWVAR 42
2349: PUSH
2350: LD_INT 6
2352: EQUAL
2353: IFFALSE 2371
// begin bc_kind1 = b_lab_basic ;
2355: LD_ADDR_OWVAR 44
2359: PUSH
2360: LD_INT 9
2362: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2363: LD_ADDR_OWVAR 45
2367: PUSH
2368: LD_INT 9
2370: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
2371: LD_OWVAR 42
2375: PUSH
2376: LD_INT 7
2378: EQUAL
2379: PUSH
2380: LD_OWVAR 42
2384: PUSH
2385: LD_INT 8
2387: EQUAL
2388: OR
2389: IFFALSE 2505
// begin if buildings [ i ] [ 6 ] then
2391: LD_VAR 0 5
2395: PUSH
2396: LD_VAR 0 2
2400: ARRAY
2401: PUSH
2402: LD_INT 6
2404: ARRAY
2405: IFFALSE 2427
// bc_kind1 = buildings [ i ] [ 6 ] ;
2407: LD_ADDR_OWVAR 44
2411: PUSH
2412: LD_VAR 0 5
2416: PUSH
2417: LD_VAR 0 2
2421: ARRAY
2422: PUSH
2423: LD_INT 6
2425: ARRAY
2426: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2427: LD_VAR 0 5
2431: PUSH
2432: LD_VAR 0 2
2436: ARRAY
2437: PUSH
2438: LD_INT 7
2440: ARRAY
2441: IFFALSE 2463
// bc_kind2 = buildings [ i ] [ 7 ] ;
2443: LD_ADDR_OWVAR 45
2447: PUSH
2448: LD_VAR 0 5
2452: PUSH
2453: LD_VAR 0 2
2457: ARRAY
2458: PUSH
2459: LD_INT 7
2461: ARRAY
2462: ST_TO_ADDR
// if not buildings [ i ] [ 6 ] and not buildings [ i ] [ 7 ] then
2463: LD_VAR 0 5
2467: PUSH
2468: LD_VAR 0 2
2472: ARRAY
2473: PUSH
2474: LD_INT 6
2476: ARRAY
2477: NOT
2478: PUSH
2479: LD_VAR 0 5
2483: PUSH
2484: LD_VAR 0 2
2488: ARRAY
2489: PUSH
2490: LD_INT 7
2492: ARRAY
2493: NOT
2494: AND
2495: IFFALSE 2505
// bc_type := b_lab ;
2497: LD_ADDR_OWVAR 42
2501: PUSH
2502: LD_INT 6
2504: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2505: LD_ADDR_VAR 0 4
2509: PUSH
2510: LD_VAR 0 5
2514: PUSH
2515: LD_VAR 0 2
2519: ARRAY
2520: PUSH
2521: LD_INT 3
2523: ARRAY
2524: PPUSH
2525: LD_VAR 0 5
2529: PUSH
2530: LD_VAR 0 2
2534: ARRAY
2535: PUSH
2536: LD_INT 4
2538: ARRAY
2539: PPUSH
2540: LD_VAR 0 5
2544: PUSH
2545: LD_VAR 0 2
2549: ARRAY
2550: PUSH
2551: LD_INT 5
2553: ARRAY
2554: PPUSH
2555: CALL_OW 47
2559: ST_TO_ADDR
// if GetBType ( building ) = b_bunker then
2560: LD_VAR 0 4
2564: PPUSH
2565: CALL_OW 266
2569: PUSH
2570: LD_INT 32
2572: EQUAL
2573: IFFALSE 2599
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2575: LD_VAR 0 4
2579: PPUSH
2580: LD_VAR 0 5
2584: PUSH
2585: LD_VAR 0 2
2589: ARRAY
2590: PUSH
2591: LD_INT 8
2593: ARRAY
2594: PPUSH
2595: CALL_OW 431
// end ;
2599: GO 2302
2601: POP
2602: POP
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2603: LD_ADDR_VAR 0 6
2607: PUSH
2608: LD_INT 22
2610: PUSH
2611: LD_INT 1
2613: PUSH
2614: EMPTY
2615: LIST
2616: LIST
2617: PUSH
2618: LD_INT 2
2620: PUSH
2621: LD_INT 30
2623: PUSH
2624: LD_INT 6
2626: PUSH
2627: EMPTY
2628: LIST
2629: LIST
2630: PUSH
2631: LD_INT 30
2633: PUSH
2634: LD_INT 7
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: PUSH
2641: LD_INT 30
2643: PUSH
2644: LD_INT 8
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: PUSH
2657: EMPTY
2658: LIST
2659: LIST
2660: PPUSH
2661: CALL_OW 69
2665: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2666: LD_ADDR_VAR 0 7
2670: PUSH
2671: LD_INT 22
2673: PUSH
2674: LD_INT 1
2676: PUSH
2677: EMPTY
2678: LIST
2679: LIST
2680: PUSH
2681: LD_INT 30
2683: PUSH
2684: LD_INT 0
2686: PUSH
2687: EMPTY
2688: LIST
2689: LIST
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: PPUSH
2695: CALL_OW 69
2699: ST_TO_ADDR
// if lab > 0 and tmp > 0 then
2700: LD_VAR 0 6
2704: PUSH
2705: LD_INT 0
2707: GREATER
2708: PUSH
2709: LD_VAR 0 7
2713: PUSH
2714: LD_INT 0
2716: GREATER
2717: AND
2718: IFFALSE 2728
// baseCorrect = 1 ;
2720: LD_ADDR_EXP 17
2724: PUSH
2725: LD_INT 1
2727: ST_TO_ADDR
// if baseCorrect = 0 then
2728: LD_EXP 17
2732: PUSH
2733: LD_INT 0
2735: EQUAL
2736: IFFALSE 3109
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2738: LD_ADDR_VAR 0 2
2742: PUSH
2743: LD_INT 22
2745: PUSH
2746: LD_INT 1
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: PUSH
2753: LD_INT 21
2755: PUSH
2756: LD_INT 3
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PPUSH
2767: CALL_OW 69
2771: PUSH
2772: FOR_IN
2773: IFFALSE 2786
// RemoveUnit ( i ) ;
2775: LD_VAR 0 2
2779: PPUSH
2780: CALL_OW 64
2784: GO 2772
2786: POP
2787: POP
// uc_nation = 1 ;
2788: LD_ADDR_OWVAR 21
2792: PUSH
2793: LD_INT 1
2795: ST_TO_ADDR
// uc_side = 1 ;
2796: LD_ADDR_OWVAR 20
2800: PUSH
2801: LD_INT 1
2803: ST_TO_ADDR
// bc_level = 5 ;
2804: LD_ADDR_OWVAR 43
2808: PUSH
2809: LD_INT 5
2811: ST_TO_ADDR
// bc_type = b_depot ;
2812: LD_ADDR_OWVAR 42
2816: PUSH
2817: LD_INT 0
2819: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2820: LD_INT 50
2822: PPUSH
2823: LD_INT 22
2825: PPUSH
2826: LD_INT 0
2828: PPUSH
2829: CALL_OW 47
// bc_type = b_bunker ;
2833: LD_ADDR_OWVAR 42
2837: PUSH
2838: LD_INT 32
2840: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
2841: LD_ADDR_VAR 0 4
2845: PUSH
2846: LD_INT 68
2848: PPUSH
2849: LD_INT 24
2851: PPUSH
2852: LD_INT 4
2854: PPUSH
2855: CALL_OW 47
2859: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
2860: LD_VAR 0 4
2864: PPUSH
2865: LD_INT 4
2867: PUSH
2868: LD_INT 11
2870: PUSH
2871: EMPTY
2872: LIST
2873: LIST
2874: PUSH
2875: LD_INT 1
2877: PPUSH
2878: LD_INT 2
2880: PPUSH
2881: CALL_OW 12
2885: ARRAY
2886: PPUSH
2887: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
2891: LD_ADDR_VAR 0 4
2895: PUSH
2896: LD_INT 71
2898: PPUSH
2899: LD_INT 34
2901: PPUSH
2902: LD_INT 4
2904: PPUSH
2905: CALL_OW 47
2909: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
2910: LD_VAR 0 4
2914: PPUSH
2915: LD_INT 4
2917: PUSH
2918: LD_INT 11
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: PUSH
2925: LD_INT 1
2927: PPUSH
2928: LD_INT 2
2930: PPUSH
2931: CALL_OW 12
2935: ARRAY
2936: PPUSH
2937: CALL_OW 431
// bc_type = 31 ;
2941: LD_ADDR_OWVAR 42
2945: PUSH
2946: LD_INT 31
2948: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
2949: LD_INT 51
2951: PPUSH
2952: LD_INT 7
2954: PPUSH
2955: LD_INT 3
2957: PPUSH
2958: CALL_OW 47
// bc_type = b_oil_mine ;
2962: LD_ADDR_OWVAR 42
2966: PUSH
2967: LD_INT 29
2969: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
2970: LD_INT 68
2972: PPUSH
2973: LD_INT 40
2975: PPUSH
2976: LD_INT 1
2978: PPUSH
2979: CALL_OW 47
// bc_type = b_workshop ;
2983: LD_ADDR_OWVAR 42
2987: PUSH
2988: LD_INT 2
2990: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
2991: LD_INT 38
2993: PPUSH
2994: LD_INT 20
2996: PPUSH
2997: LD_INT 2
2999: PPUSH
3000: CALL_OW 47
// bc_type = b_armoury ;
3004: LD_ADDR_OWVAR 42
3008: PUSH
3009: LD_INT 4
3011: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3012: LD_INT 38
3014: PPUSH
3015: LD_INT 20
3017: PPUSH
3018: LD_INT 2
3020: PPUSH
3021: CALL_OW 47
// bc_type = b_solar_power ;
3025: LD_ADDR_OWVAR 42
3029: PUSH
3030: LD_INT 27
3032: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3033: LD_INT 46
3035: PPUSH
3036: LD_INT 12
3038: PPUSH
3039: LD_INT 1
3041: PPUSH
3042: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3046: LD_INT 48
3048: PPUSH
3049: LD_INT 11
3051: PPUSH
3052: LD_INT 2
3054: PPUSH
3055: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 49 , 11 , 3 ) ;
3059: LD_INT 49
3061: PPUSH
3062: LD_INT 11
3064: PPUSH
3065: LD_INT 3
3067: PPUSH
3068: CALL_OW 47
// bc_type = b_lab_half ;
3072: LD_ADDR_OWVAR 42
3076: PUSH
3077: LD_INT 7
3079: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
3080: LD_ADDR_OWVAR 44
3084: PUSH
3085: LD_INT 15
3087: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
3088: LD_ADDR_OWVAR 45
3092: PUSH
3093: LD_INT 9
3095: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3096: LD_INT 42
3098: PPUSH
3099: LD_INT 15
3101: PPUSH
3102: LD_INT 2
3104: PPUSH
3105: CALL_OW 47
// end ; end ; end_of_file
3109: LD_VAR 0 1
3113: RET
// every 1 do var i , j , tmp ;
3114: GO 3116
3116: DISABLE
3117: LD_INT 0
3119: PPUSH
3120: PPUSH
3121: PPUSH
// begin InGameOn ;
3122: CALL_OW 8
// CenterNowOnUnits ( lab [ 1 ] ) ;
3126: LD_EXP 19
3130: PUSH
3131: LD_INT 1
3133: ARRAY
3134: PPUSH
3135: CALL_OW 87
// if IsOK ( Denis ) then
3139: LD_EXP 3
3143: PPUSH
3144: CALL_OW 302
3148: IFFALSE 3176
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3150: LD_INT 6
3152: PPUSH
3153: LD_INT 1
3155: PPUSH
3156: LD_INT 2
3158: PPUSH
3159: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3163: LD_INT 20
3165: PPUSH
3166: LD_INT 1
3168: PPUSH
3169: LD_INT 1
3171: PPUSH
3172: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3176: LD_EXP 1
3180: PPUSH
3181: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3185: LD_EXP 1
3189: PPUSH
3190: LD_EXP 15
3194: PPUSH
3195: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3199: LD_INT 35
3201: PPUSH
3202: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3206: LD_EXP 15
3210: PPUSH
3211: LD_EXP 1
3215: PPUSH
3216: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3220: LD_EXP 1
3224: PPUSH
3225: LD_EXP 15
3229: PPUSH
3230: CALL_OW 296
3234: PUSH
3235: LD_INT 5
3237: LESS
3238: IFFALSE 3199
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3240: LD_EXP 15
3244: PPUSH
3245: LD_EXP 1
3249: PPUSH
3250: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3254: LD_EXP 1
3258: PPUSH
3259: LD_STRING D1-JMM-1
3261: PPUSH
3262: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3266: LD_EXP 15
3270: PPUSH
3271: LD_STRING D1-Sci-1
3273: PPUSH
3274: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3278: LD_EXP 1
3282: PUSH
3283: LD_EXP 15
3287: PUSH
3288: LD_EXP 3
3292: PUSH
3293: EMPTY
3294: LIST
3295: LIST
3296: LIST
3297: PPUSH
3298: LD_EXP 19
3302: PUSH
3303: LD_INT 1
3305: ARRAY
3306: PPUSH
3307: CALL_OW 120
// end ;
3311: PPOPN 3
3313: END
// every 0 0$2 trigger IsInUnit ( JMM ) = lab [ 1 ] and IsInUnit ( DeltaDoctor ) = lab [ 1 ] do var i , j , tmp ;
3314: LD_EXP 1
3318: PPUSH
3319: CALL_OW 310
3323: PUSH
3324: LD_EXP 19
3328: PUSH
3329: LD_INT 1
3331: ARRAY
3332: EQUAL
3333: PUSH
3334: LD_EXP 15
3338: PPUSH
3339: CALL_OW 310
3343: PUSH
3344: LD_EXP 19
3348: PUSH
3349: LD_INT 1
3351: ARRAY
3352: EQUAL
3353: AND
3354: IFFALSE 3900
3356: GO 3358
3358: DISABLE
3359: LD_INT 0
3361: PPUSH
3362: PPUSH
3363: PPUSH
// begin CenterNowOnUnits ( lab [ 1 ] ) ;
3364: LD_EXP 19
3368: PUSH
3369: LD_INT 1
3371: ARRAY
3372: PPUSH
3373: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3377: LD_EXP 1
3381: PPUSH
3382: LD_STRING D1-JMM-2
3384: PPUSH
3385: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3389: LD_EXP 15
3393: PPUSH
3394: LD_STRING D1-Sci-2
3396: PPUSH
3397: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3401: LD_EXP 1
3405: PPUSH
3406: LD_STRING D1-JMM-3
3408: PPUSH
3409: CALL_OW 88
// if IsOK ( Denis ) then
3413: LD_EXP 3
3417: PPUSH
3418: CALL_OW 302
3422: IFFALSE 3438
// Say ( DeltaDoctor , D1-Sci-3 ) else
3424: LD_EXP 15
3428: PPUSH
3429: LD_STRING D1-Sci-3
3431: PPUSH
3432: CALL_OW 88
3436: GO 3450
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3438: LD_EXP 15
3442: PPUSH
3443: LD_STRING D1-Sci-3a
3445: PPUSH
3446: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3450: LD_EXP 1
3454: PPUSH
3455: LD_STRING D1-JMM-4
3457: PPUSH
3458: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3462: LD_ADDR_VAR 0 3
3466: PUSH
3467: LD_INT 22
3469: PUSH
3470: LD_INT 1
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: PUSH
3477: LD_INT 25
3479: PUSH
3480: LD_INT 4
3482: PUSH
3483: EMPTY
3484: LIST
3485: LIST
3486: PUSH
3487: LD_INT 3
3489: PUSH
3490: LD_INT 54
3492: PUSH
3493: EMPTY
3494: LIST
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: LIST
3504: PPUSH
3505: CALL_OW 69
3509: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3510: LD_ADDR_VAR 0 1
3514: PUSH
3515: LD_INT 22
3517: PUSH
3518: LD_INT 0
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: PPUSH
3525: CALL_OW 69
3529: PUSH
3530: FOR_IN
3531: IFFALSE 3581
// for j in tmp do
3533: LD_ADDR_VAR 0 2
3537: PUSH
3538: LD_VAR 0 3
3542: PUSH
3543: FOR_IN
3544: IFFALSE 3577
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3546: LD_VAR 0 2
3550: PPUSH
3551: LD_VAR 0 1
3555: PPUSH
3556: CALL_OW 250
3560: PPUSH
3561: LD_VAR 0 1
3565: PPUSH
3566: CALL_OW 251
3570: PPUSH
3571: CALL_OW 191
3575: GO 3543
3577: POP
3578: POP
3579: GO 3530
3581: POP
3582: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3583: LD_EXP 15
3587: PPUSH
3588: LD_STRING D1-Sci-4
3590: PPUSH
3591: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3595: LD_EXP 1
3599: PPUSH
3600: LD_STRING D1-JMM-5
3602: PPUSH
3603: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3607: LD_EXP 15
3611: PPUSH
3612: LD_STRING D1-Sci-5
3614: PPUSH
3615: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3619: LD_EXP 1
3623: PPUSH
3624: LD_STRING D1-JMM-6
3626: PPUSH
3627: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3631: LD_EXP 16
3635: PPUSH
3636: LD_STRING D1-Har-6
3638: PPUSH
3639: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3643: LD_EXP 1
3647: PPUSH
3648: LD_STRING D1-JMM-7
3650: PPUSH
3651: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3655: LD_EXP 16
3659: PPUSH
3660: LD_STRING D1-Har-7
3662: PPUSH
3663: CALL_OW 94
// if IsOK ( Denis ) then
3667: LD_EXP 3
3671: PPUSH
3672: CALL_OW 302
3676: IFFALSE 3690
// Say ( JMM , D1-JMM-8 ) ;
3678: LD_EXP 1
3682: PPUSH
3683: LD_STRING D1-JMM-8
3685: PPUSH
3686: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3690: LD_EXP 1
3694: PPUSH
3695: LD_STRING D1-JMM-8a
3697: PPUSH
3698: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3702: LD_EXP 16
3706: PPUSH
3707: LD_STRING D1-Har-8
3709: PPUSH
3710: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3714: LD_EXP 1
3718: PPUSH
3719: LD_STRING D1-JMM-9
3721: PPUSH
3722: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3726: LD_EXP 16
3730: PPUSH
3731: LD_STRING D1-Har-9
3733: PPUSH
3734: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3738: LD_EXP 1
3742: PPUSH
3743: LD_STRING D1-JMM-10
3745: PPUSH
3746: CALL_OW 88
// if IsOK ( Denis ) then
3750: LD_EXP 3
3754: PPUSH
3755: CALL_OW 302
3759: IFFALSE 3773
// Say ( JMM , D1-JMM-10a ) ;
3761: LD_EXP 1
3765: PPUSH
3766: LD_STRING D1-JMM-10a
3768: PPUSH
3769: CALL_OW 88
// SelectAndSaveCharacters ;
3773: CALL 4411 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 250 ) ;
3777: LD_EXP 19
3781: PUSH
3782: LD_INT 1
3784: ARRAY
3785: PPUSH
3786: CALL_OW 274
3790: PPUSH
3791: LD_INT 1
3793: PPUSH
3794: LD_INT 250
3796: PPUSH
3797: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) > 0 then
3801: LD_INT 22
3803: PUSH
3804: LD_INT 1
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: LD_INT 30
3813: PUSH
3814: LD_INT 29
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PPUSH
3825: CALL_OW 69
3829: PUSH
3830: LD_INT 0
3832: GREATER
3833: IFFALSE 3859
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
3835: LD_EXP 19
3839: PUSH
3840: LD_INT 1
3842: ARRAY
3843: PPUSH
3844: CALL_OW 274
3848: PPUSH
3849: LD_INT 2
3851: PPUSH
3852: LD_INT 300
3854: PPUSH
3855: CALL_OW 277
// InGameOff ;
3859: CALL_OW 9
// Query ( Q1 ) ;
3863: LD_STRING Q1
3865: PPUSH
3866: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
3870: LD_INT 3
3872: PPUSH
3873: LD_INT 1
3875: PPUSH
3876: CALL_OW 424
// if IsInUnit ( JMM ) then
3880: LD_EXP 1
3884: PPUSH
3885: CALL_OW 310
3889: IFFALSE 3900
// ComExitBuilding ( JMM ) ;
3891: LD_EXP 1
3895: PPUSH
3896: CALL_OW 122
// end ;
3900: PPOPN 3
3902: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
3903: LD_INT 3
3905: PPUSH
3906: LD_INT 22
3908: PUSH
3909: LD_INT 1
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: PUSH
3916: LD_INT 21
3918: PUSH
3919: LD_INT 1
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: PUSH
3926: EMPTY
3927: LIST
3928: LIST
3929: PPUSH
3930: CALL_OW 71
3934: PUSH
3935: LD_INT 0
3937: EQUAL
3938: IFFALSE 4256
3940: GO 3942
3942: DISABLE
3943: LD_INT 0
3945: PPUSH
3946: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) > 0 then
3947: LD_INT 3
3949: PPUSH
3950: LD_INT 21
3952: PUSH
3953: LD_INT 2
3955: PUSH
3956: EMPTY
3957: LIST
3958: LIST
3959: PUSH
3960: LD_INT 3
3962: PUSH
3963: LD_INT 58
3965: PUSH
3966: EMPTY
3967: LIST
3968: PUSH
3969: EMPTY
3970: LIST
3971: LIST
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: PPUSH
3977: CALL_OW 70
3981: PUSH
3982: LD_INT 0
3984: GREATER
3985: IFFALSE 4242
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
3987: LD_ADDR_VAR 0 1
3991: PUSH
3992: LD_INT 3
3994: PPUSH
3995: LD_INT 21
3997: PUSH
3998: LD_INT 2
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: PUSH
4005: LD_INT 3
4007: PUSH
4008: LD_INT 58
4010: PUSH
4011: EMPTY
4012: LIST
4013: PUSH
4014: EMPTY
4015: LIST
4016: LIST
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: PPUSH
4022: CALL_OW 70
4026: PUSH
4027: FOR_IN
4028: IFFALSE 4228
// begin cargoType = GetCargoType ( i ) ;
4030: LD_ADDR_VAR 0 2
4034: PUSH
4035: LD_VAR 0 1
4039: PPUSH
4040: CALL_OW 288
4044: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4045: LD_VAR 0 1
4049: PPUSH
4050: CALL_OW 264
4054: PUSH
4055: LD_INT 12
4057: EQUAL
4058: IFFALSE 4155
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] ;
4060: LD_ADDR_EXP 14
4064: PUSH
4065: LD_EXP 14
4069: PUSH
4070: LD_VAR 0 1
4074: PPUSH
4075: CALL_OW 248
4079: PUSH
4080: LD_VAR 0 1
4084: PPUSH
4085: CALL_OW 265
4089: PUSH
4090: LD_VAR 0 1
4094: PPUSH
4095: CALL_OW 262
4099: PUSH
4100: LD_VAR 0 1
4104: PPUSH
4105: CALL_OW 263
4109: PUSH
4110: LD_VAR 0 1
4114: PPUSH
4115: CALL_OW 264
4119: PUSH
4120: LD_VAR 0 2
4124: PUSH
4125: LD_VAR 0 1
4129: PPUSH
4130: LD_VAR 0 2
4134: PPUSH
4135: CALL_OW 289
4139: PUSH
4140: EMPTY
4141: LIST
4142: LIST
4143: LIST
4144: LIST
4145: LIST
4146: LIST
4147: LIST
4148: PUSH
4149: EMPTY
4150: LIST
4151: ADD
4152: ST_TO_ADDR
// end else
4153: GO 4226
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4155: LD_ADDR_EXP 14
4159: PUSH
4160: LD_EXP 14
4164: PUSH
4165: LD_VAR 0 1
4169: PPUSH
4170: CALL_OW 248
4174: PUSH
4175: LD_VAR 0 1
4179: PPUSH
4180: CALL_OW 265
4184: PUSH
4185: LD_VAR 0 1
4189: PPUSH
4190: CALL_OW 262
4194: PUSH
4195: LD_VAR 0 1
4199: PPUSH
4200: CALL_OW 263
4204: PUSH
4205: LD_VAR 0 1
4209: PPUSH
4210: CALL_OW 264
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: LIST
4219: LIST
4220: LIST
4221: PUSH
4222: EMPTY
4223: LIST
4224: ADD
4225: ST_TO_ADDR
// end ; end ;
4226: GO 4027
4228: POP
4229: POP
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4230: LD_EXP 14
4234: PPUSH
4235: LD_STRING 06_VehiclesIn06_1
4237: PPUSH
4238: CALL_OW 39
// end ; SaveCargos ;
4242: CALL 4259 0 0
// ChangeMap ( 6 , %_cont ) ;
4246: LD_INT 6
4248: PPUSH
4249: LD_STRING %_cont
4251: PPUSH
4252: CALL_OW 340
// end ;
4256: PPOPN 2
4258: END
// export function SaveCargos ; var i ; begin
4259: LD_INT 0
4261: PPUSH
4262: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
4263: LD_ADDR_VAR 0 2
4267: PUSH
4268: LD_INT 3
4270: PPUSH
4271: LD_INT 22
4273: PUSH
4274: LD_INT 1
4276: PUSH
4277: EMPTY
4278: LIST
4279: LIST
4280: PUSH
4281: LD_INT 34
4283: PUSH
4284: LD_INT 12
4286: PUSH
4287: EMPTY
4288: LIST
4289: LIST
4290: PUSH
4291: EMPTY
4292: LIST
4293: LIST
4294: PPUSH
4295: CALL_OW 70
4299: PUSH
4300: FOR_IN
4301: IFFALSE 4329
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
4303: LD_ADDR_EXP 20
4307: PUSH
4308: LD_EXP 20
4312: PUSH
4313: LD_VAR 0 2
4317: PPUSH
4318: CALL 5463 0 1
4322: PUSH
4323: EMPTY
4324: LIST
4325: ADD
4326: ST_TO_ADDR
4327: GO 4300
4329: POP
4330: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
4331: LD_EXP 20
4335: PPUSH
4336: LD_STRING 06_ResourcesInCargo06_1
4338: PPUSH
4339: CALL_OW 39
// end ; end_of_file
4343: LD_VAR 0 1
4347: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4348: LD_INT 0
4350: PPUSH
4351: PPUSH
// if exist_mode then
4352: LD_VAR 0 2
4356: IFFALSE 4381
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
4358: LD_ADDR_VAR 0 4
4362: PUSH
4363: LD_EXP 22
4367: PUSH
4368: LD_VAR 0 1
4372: STR
4373: PPUSH
4374: CALL_OW 34
4378: ST_TO_ADDR
4379: GO 4396
// unit := NewCharacter ( ident ) ;
4381: LD_ADDR_VAR 0 4
4385: PUSH
4386: LD_VAR 0 1
4390: PPUSH
4391: CALL_OW 25
4395: ST_TO_ADDR
// result := unit ;
4396: LD_ADDR_VAR 0 3
4400: PUSH
4401: LD_VAR 0 4
4405: ST_TO_ADDR
// end ;
4406: LD_VAR 0 3
4410: RET
// export function SelectAndSaveCharacters ; var i , yourPeople , selectedPeople , test ; begin
4411: LD_INT 0
4413: PPUSH
4414: PPUSH
4415: PPUSH
4416: PPUSH
4417: PPUSH
// yourPeople = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4418: LD_ADDR_VAR 0 3
4422: PUSH
4423: LD_INT 22
4425: PUSH
4426: LD_INT 1
4428: PUSH
4429: EMPTY
4430: LIST
4431: LIST
4432: PUSH
4433: LD_INT 21
4435: PUSH
4436: LD_INT 1
4438: PUSH
4439: EMPTY
4440: LIST
4441: LIST
4442: PUSH
4443: LD_INT 2
4445: PUSH
4446: LD_INT 25
4448: PUSH
4449: LD_INT 1
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: PUSH
4456: LD_INT 25
4458: PUSH
4459: LD_INT 2
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: PUSH
4466: LD_INT 25
4468: PUSH
4469: LD_INT 3
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: PUSH
4476: LD_INT 25
4478: PUSH
4479: LD_INT 4
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: LIST
4497: PPUSH
4498: CALL_OW 69
4502: PUSH
4503: LD_EXP 1
4507: PUSH
4508: LD_EXP 15
4512: PUSH
4513: LD_EXP 3
4517: PUSH
4518: EMPTY
4519: LIST
4520: LIST
4521: LIST
4522: DIFF
4523: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4524: LD_ADDR_VAR 0 4
4528: PUSH
4529: LD_STRING text
4531: PPUSH
4532: LD_INT 5
4534: PPUSH
4535: LD_INT 5
4537: PPUSH
4538: LD_INT -5
4540: PUSH
4541: LD_EXP 1
4545: PUSH
4546: LD_INT -6
4548: PUSH
4549: LD_INT -2
4551: PUSH
4552: LD_INT -3
4554: PUSH
4555: LD_INT -5
4557: PUSH
4558: EMPTY
4559: LIST
4560: LIST
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: PUSH
4566: LD_VAR 0 3
4570: ADD
4571: PUSH
4572: LD_INT -6
4574: PUSH
4575: LD_INT -4
4577: PUSH
4578: LD_EXP 3
4582: PUSH
4583: LD_EXP 15
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: ADD
4594: PPUSH
4595: LD_INT 1
4597: PUSH
4598: LD_INT 3
4600: PUSH
4601: LD_INT 2
4603: PUSH
4604: LD_INT 1
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: PUSH
4611: LD_INT 4
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: PPUSH
4620: CALL_OW 42
4624: ST_TO_ADDR
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4625: LD_EXP 1
4629: PPUSH
4630: LD_EXP 21
4634: PUSH
4635: LD_STRING JMM
4637: STR
4638: PPUSH
4639: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4643: LD_EXP 15
4647: PPUSH
4648: LD_STRING DeltaDoctor
4650: PPUSH
4651: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4655: LD_EXP 3
4659: PPUSH
4660: LD_EXP 21
4664: PUSH
4665: LD_STRING Denis
4667: STR
4668: PPUSH
4669: CALL_OW 38
// if Lisa in selectedPeople then
4673: LD_EXP 4
4677: PUSH
4678: LD_VAR 0 4
4682: IN
4683: IFFALSE 4715
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4685: LD_EXP 4
4689: PPUSH
4690: LD_EXP 21
4694: PUSH
4695: LD_STRING Lisa
4697: STR
4698: PPUSH
4699: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4703: LD_INT 1
4705: PPUSH
4706: LD_STRING LisaIn06
4708: PPUSH
4709: CALL_OW 39
// end else
4713: GO 4736
// if IsOk ( Lisa ) then
4715: LD_EXP 4
4719: PPUSH
4720: CALL_OW 302
4724: IFFALSE 4736
// SaveVariable ( 1 , LisaStayInDelta ) ;
4726: LD_INT 1
4728: PPUSH
4729: LD_STRING LisaStayInDelta
4731: PPUSH
4732: CALL_OW 39
// if Bobby in selectedPeople then
4736: LD_EXP 6
4740: PUSH
4741: LD_VAR 0 4
4745: IN
4746: IFFALSE 4778
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4748: LD_EXP 6
4752: PPUSH
4753: LD_EXP 21
4757: PUSH
4758: LD_STRING Bobby
4760: STR
4761: PPUSH
4762: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4766: LD_INT 1
4768: PPUSH
4769: LD_STRING BobbyIn06
4771: PPUSH
4772: CALL_OW 39
// end else
4776: GO 4799
// if IsOk ( Bobby ) then
4778: LD_EXP 6
4782: PPUSH
4783: CALL_OW 302
4787: IFFALSE 4799
// SaveVariable ( 1 , BobbyStayInDelta ) ;
4789: LD_INT 1
4791: PPUSH
4792: LD_STRING BobbyStayInDelta
4794: PPUSH
4795: CALL_OW 39
// if Cyrus in selectedPeople then
4799: LD_EXP 7
4803: PUSH
4804: LD_VAR 0 4
4808: IN
4809: IFFALSE 4841
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4811: LD_EXP 7
4815: PPUSH
4816: LD_EXP 21
4820: PUSH
4821: LD_STRING Cyrus
4823: STR
4824: PPUSH
4825: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
4829: LD_INT 1
4831: PPUSH
4832: LD_STRING CyrusIn06
4834: PPUSH
4835: CALL_OW 39
// end else
4839: GO 4862
// if IsOk ( Cyrus ) then
4841: LD_EXP 7
4845: PPUSH
4846: CALL_OW 302
4850: IFFALSE 4862
// SaveVariable ( 1 , CyrusStayInDelta ) ;
4852: LD_INT 1
4854: PPUSH
4855: LD_STRING CyrusStayInDelta
4857: PPUSH
4858: CALL_OW 39
// if Frank in selectedPeople then
4862: LD_EXP 5
4866: PUSH
4867: LD_VAR 0 4
4871: IN
4872: IFFALSE 4904
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
4874: LD_EXP 5
4878: PPUSH
4879: LD_EXP 21
4883: PUSH
4884: LD_STRING Frank
4886: STR
4887: PPUSH
4888: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
4892: LD_INT 1
4894: PPUSH
4895: LD_STRING FrankIn06
4897: PPUSH
4898: CALL_OW 39
// end else
4902: GO 4925
// if IsOk ( Frank ) then
4904: LD_EXP 5
4908: PPUSH
4909: CALL_OW 302
4913: IFFALSE 4925
// SaveVariable ( 1 , FrankStayInDelta ) ;
4915: LD_INT 1
4917: PPUSH
4918: LD_STRING FrankStayInDelta
4920: PPUSH
4921: CALL_OW 39
// if Brown in selectedPeople then
4925: LD_EXP 8
4929: PUSH
4930: LD_VAR 0 4
4934: IN
4935: IFFALSE 4967
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
4937: LD_EXP 8
4941: PPUSH
4942: LD_EXP 21
4946: PUSH
4947: LD_STRING Brown
4949: STR
4950: PPUSH
4951: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
4955: LD_INT 1
4957: PPUSH
4958: LD_STRING BrownIn06
4960: PPUSH
4961: CALL_OW 39
// end else
4965: GO 4988
// if IsOk ( Brown ) then
4967: LD_EXP 8
4971: PPUSH
4972: CALL_OW 302
4976: IFFALSE 4988
// SaveVariable ( 1 , BrownStayInDelta ) ;
4978: LD_INT 1
4980: PPUSH
4981: LD_STRING BrownStayInDelta
4983: PPUSH
4984: CALL_OW 39
// if Donaldson in selectedPeople then
4988: LD_EXP 9
4992: PUSH
4993: LD_VAR 0 4
4997: IN
4998: IFFALSE 5030
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5000: LD_EXP 9
5004: PPUSH
5005: LD_EXP 21
5009: PUSH
5010: LD_STRING Donaldson
5012: STR
5013: PPUSH
5014: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5018: LD_INT 1
5020: PPUSH
5021: LD_STRING DonaldsonIn06
5023: PPUSH
5024: CALL_OW 39
// end else
5028: GO 5051
// if IsOk ( Donaldson ) then
5030: LD_EXP 9
5034: PPUSH
5035: CALL_OW 302
5039: IFFALSE 5051
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5041: LD_INT 1
5043: PPUSH
5044: LD_STRING DonaldsonStayInDelta
5046: PPUSH
5047: CALL_OW 39
// if Gladstone in selectedPeople then
5051: LD_EXP 2
5055: PUSH
5056: LD_VAR 0 4
5060: IN
5061: IFFALSE 5093
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5063: LD_EXP 2
5067: PPUSH
5068: LD_EXP 21
5072: PUSH
5073: LD_STRING Gladstone
5075: STR
5076: PPUSH
5077: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
5081: LD_INT 1
5083: PPUSH
5084: LD_STRING GladstoneIn06
5086: PPUSH
5087: CALL_OW 39
// end else
5091: GO 5114
// if IsOk ( Gladstone ) then
5093: LD_EXP 2
5097: PPUSH
5098: CALL_OW 302
5102: IFFALSE 5114
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5104: LD_INT 1
5106: PPUSH
5107: LD_STRING GladstoneStayInDelta
5109: PPUSH
5110: CALL_OW 39
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
5114: LD_INT 22
5116: PUSH
5117: LD_INT 1
5119: PUSH
5120: EMPTY
5121: LIST
5122: LIST
5123: PUSH
5124: LD_INT 21
5126: PUSH
5127: LD_INT 1
5129: PUSH
5130: EMPTY
5131: LIST
5132: LIST
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: PPUSH
5138: CALL_OW 69
5142: PPUSH
5143: LD_INT 4
5145: PPUSH
5146: CALL_OW 235
// for i in selectedPeople do
5150: LD_ADDR_VAR 0 2
5154: PUSH
5155: LD_VAR 0 4
5159: PUSH
5160: FOR_IN
5161: IFFALSE 5177
// SetSide ( i , 1 ) ;
5163: LD_VAR 0 2
5167: PPUSH
5168: LD_INT 1
5170: PPUSH
5171: CALL_OW 235
5175: GO 5160
5177: POP
5178: POP
// for i in yourApemans do
5179: LD_ADDR_VAR 0 2
5183: PUSH
5184: LD_EXP 13
5188: PUSH
5189: FOR_IN
5190: IFFALSE 5206
// SetSide ( i , 1 ) ;
5192: LD_VAR 0 2
5196: PPUSH
5197: LD_INT 1
5199: PPUSH
5200: CALL_OW 235
5204: GO 5189
5206: POP
5207: POP
// SetSide ( JMM , 1 ) ;
5208: LD_EXP 1
5212: PPUSH
5213: LD_INT 1
5215: PPUSH
5216: CALL_OW 235
// SetSkill ( yourApemans , 2 , 5 ) ;
5220: LD_EXP 13
5224: PPUSH
5225: LD_INT 2
5227: PPUSH
5228: LD_INT 5
5230: PPUSH
5231: CALL_OW 237
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5235: LD_EXP 13
5239: PPUSH
5240: LD_STRING ApeIn06
5242: PPUSH
5243: CALL_OW 38
// SaveCharacters ( selectedPeople diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersIn06 ) ;
5247: LD_VAR 0 4
5251: PUSH
5252: LD_EXP 1
5256: PUSH
5257: LD_EXP 4
5261: PUSH
5262: LD_EXP 6
5266: PUSH
5267: LD_EXP 7
5271: PUSH
5272: LD_EXP 5
5276: PUSH
5277: LD_EXP 8
5281: PUSH
5282: LD_EXP 9
5286: PUSH
5287: LD_EXP 2
5291: PUSH
5292: LD_EXP 3
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: DIFF
5308: PPUSH
5309: LD_STRING OthersIn06
5311: PPUSH
5312: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersStayInDelta ) ;
5316: LD_INT 22
5318: PUSH
5319: LD_INT 4
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: PUSH
5326: LD_INT 2
5328: PUSH
5329: LD_INT 25
5331: PUSH
5332: LD_INT 1
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: PUSH
5339: LD_INT 25
5341: PUSH
5342: LD_INT 2
5344: PUSH
5345: EMPTY
5346: LIST
5347: LIST
5348: PUSH
5349: LD_INT 25
5351: PUSH
5352: LD_INT 3
5354: PUSH
5355: EMPTY
5356: LIST
5357: LIST
5358: PUSH
5359: LD_INT 25
5361: PUSH
5362: LD_INT 4
5364: PUSH
5365: EMPTY
5366: LIST
5367: LIST
5368: PUSH
5369: EMPTY
5370: LIST
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: PUSH
5376: EMPTY
5377: LIST
5378: LIST
5379: PPUSH
5380: CALL_OW 69
5384: PUSH
5385: LD_EXP 15
5389: PUSH
5390: LD_EXP 4
5394: PUSH
5395: LD_EXP 6
5399: PUSH
5400: LD_EXP 7
5404: PUSH
5405: LD_EXP 5
5409: PUSH
5410: LD_EXP 8
5414: PUSH
5415: LD_EXP 9
5419: PUSH
5420: LD_EXP 2
5424: PUSH
5425: LD_EXP 3
5429: PUSH
5430: EMPTY
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: DIFF
5441: PPUSH
5442: LD_STRING OthersStayInDelta
5444: PPUSH
5445: CALL_OW 38
// ComStop ( selectedPeople ) ;
5449: LD_VAR 0 4
5453: PPUSH
5454: CALL_OW 141
// end ;
5458: LD_VAR 0 1
5462: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
5463: LD_INT 0
5465: PPUSH
5466: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
5467: LD_ADDR_VAR 0 2
5471: PUSH
5472: LD_VAR 0 1
5476: PPUSH
5477: LD_INT 1
5479: PPUSH
5480: CALL_OW 289
5484: PUSH
5485: LD_VAR 0 1
5489: PPUSH
5490: LD_INT 2
5492: PPUSH
5493: CALL_OW 289
5497: PUSH
5498: LD_VAR 0 1
5502: PPUSH
5503: LD_INT 3
5505: PPUSH
5506: CALL_OW 289
5510: PUSH
5511: EMPTY
5512: LIST
5513: LIST
5514: LIST
5515: ST_TO_ADDR
// end ; end_of_file
5516: LD_VAR 0 2
5520: RET
// on Command ( comandid ) do var i ;
5521: LD_INT 0
5523: PPUSH
// begin if comandid = 65 then
5524: LD_VAR 0 1
5528: PUSH
5529: LD_INT 65
5531: EQUAL
5532: IFFALSE 5573
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5534: LD_ADDR_VAR 0 2
5538: PUSH
5539: LD_INT 22
5541: PUSH
5542: LD_INT 1
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: PUSH
5549: EMPTY
5550: LIST
5551: PPUSH
5552: CALL_OW 69
5556: PUSH
5557: FOR_IN
5558: IFFALSE 5571
// ComStop ( i ) ;
5560: LD_VAR 0 2
5564: PPUSH
5565: CALL_OW 141
5569: GO 5557
5571: POP
5572: POP
// end ;
5573: PPOPN 2
5575: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5576: LD_INT 0
5578: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5579: LD_ADDR_VAR 0 3
5583: PUSH
5584: LD_INT 22
5586: PUSH
5587: LD_INT 1
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: PUSH
5594: LD_INT 21
5596: PUSH
5597: LD_INT 3
5599: PUSH
5600: EMPTY
5601: LIST
5602: LIST
5603: PUSH
5604: LD_INT 30
5606: PUSH
5607: LD_INT 0
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: PUSH
5614: EMPTY
5615: LIST
5616: LIST
5617: LIST
5618: PPUSH
5619: CALL_OW 69
5623: ST_TO_ADDR
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5624: LD_VAR 0 1
5628: PPUSH
5629: LD_VAR 0 3
5633: PUSH
5634: LD_INT 1
5636: ARRAY
5637: PPUSH
5638: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5642: LD_VAR 0 1
5646: PPUSH
5647: LD_INT 4
5649: PPUSH
5650: CALL_OW 235
// end ;
5654: PPOPN 3
5656: END
