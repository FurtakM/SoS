// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect = 0 ;
  15: LD_ADDR_EXP 17
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene = 1 ;
  23: LD_ADDR_EXP 18
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans = [ ] ;
  31: LD_ADDR_EXP 12
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans = [ ] ;
  38: LD_ADDR_EXP 13
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles = [ ] ;
  45: LD_ADDR_EXP 14
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 11
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// resources = [ ] ;
  59: LD_ADDR_EXP 20
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// mission_prefix := 06_ ;
  66: LD_ADDR_EXP 21
  70: PUSH
  71: LD_STRING 06_
  73: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  74: LD_ADDR_EXP 22
  78: PUSH
  79: LD_STRING 05_
  81: ST_TO_ADDR
// PrepareDeltaBase ;
  82: CALL 2233 0 0
// LoadVehicles ;
  86: CALL 1275 0 0
// PrepareHeroes ;
  90: CALL 162 0 0
// PrepareRandoms ;
  94: CALL 1576 0 0
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
  98: LD_ADDR_EXP 19
 102: PUSH
 103: LD_INT 22
 105: PUSH
 106: LD_INT 1
 108: PUSH
 109: EMPTY
 110: LIST
 111: LIST
 112: PUSH
 113: LD_INT 2
 115: PUSH
 116: LD_INT 30
 118: PUSH
 119: LD_INT 6
 121: PUSH
 122: EMPTY
 123: LIST
 124: LIST
 125: PUSH
 126: LD_INT 30
 128: PUSH
 129: LD_INT 7
 131: PUSH
 132: EMPTY
 133: LIST
 134: LIST
 135: PUSH
 136: LD_INT 30
 138: PUSH
 139: LD_INT 8
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: LIST
 150: LIST
 151: PUSH
 152: EMPTY
 153: LIST
 154: LIST
 155: PPUSH
 156: CALL_OW 69
 160: ST_TO_ADDR
// end ; end_of_file
 161: END
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 162: LD_INT 0
 164: PPUSH
 165: PPUSH
 166: PPUSH
 167: PPUSH
 168: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 169: LD_ADDR_VAR 0 3
 173: PUSH
 174: LD_INT 22
 176: PUSH
 177: LD_INT 1
 179: PUSH
 180: EMPTY
 181: LIST
 182: LIST
 183: PUSH
 184: LD_INT 21
 186: PUSH
 187: LD_INT 3
 189: PUSH
 190: EMPTY
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 30
 196: PUSH
 197: LD_INT 0
 199: PUSH
 200: EMPTY
 201: LIST
 202: LIST
 203: PUSH
 204: EMPTY
 205: LIST
 206: LIST
 207: LIST
 208: PPUSH
 209: CALL_OW 69
 213: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , delta ) ;
 214: LD_VAR 0 3
 218: PUSH
 219: LD_INT 1
 221: ARRAY
 222: PPUSH
 223: LD_STRING delta
 225: PPUSH
 226: CALL_OW 500
// uc_side = 1 ;
 230: LD_ADDR_OWVAR 20
 234: PUSH
 235: LD_INT 1
 237: ST_TO_ADDR
// uc_nation = 1 ;
 238: LD_ADDR_OWVAR 21
 242: PUSH
 243: LD_INT 1
 245: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 246: LD_ADDR_EXP 1
 250: PUSH
 251: LD_STRING JMM
 253: PPUSH
 254: LD_INT 1
 256: PPUSH
 257: CALL 4321 0 2
 261: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 262: LD_ADDR_EXP 16
 266: PUSH
 267: LD_STRING Harisson
 269: PPUSH
 270: LD_INT 0
 272: PPUSH
 273: CALL 4321 0 2
 277: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 278: LD_EXP 1
 282: PPUSH
 283: LD_VAR 0 3
 287: PUSH
 288: LD_INT 1
 290: ARRAY
 291: PPUSH
 292: CALL_OW 250
 296: PPUSH
 297: LD_VAR 0 3
 301: PUSH
 302: LD_INT 1
 304: ARRAY
 305: PPUSH
 306: CALL_OW 251
 310: PPUSH
 311: LD_INT 5
 313: PPUSH
 314: LD_INT 0
 316: PPUSH
 317: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 321: LD_EXP 1
 325: PPUSH
 326: LD_INT 1
 328: PPUSH
 329: CALL_OW 336
// Gladstone = PrepareUnit ( Gladstone , true ) ;
 333: LD_ADDR_EXP 2
 337: PUSH
 338: LD_STRING Gladstone
 340: PPUSH
 341: LD_INT 1
 343: PPUSH
 344: CALL 4321 0 2
 348: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 349: LD_EXP 2
 353: PPUSH
 354: LD_VAR 0 3
 358: PUSH
 359: LD_INT 1
 361: ARRAY
 362: PPUSH
 363: CALL_OW 250
 367: PPUSH
 368: LD_VAR 0 3
 372: PUSH
 373: LD_INT 1
 375: ARRAY
 376: PPUSH
 377: CALL_OW 251
 381: PPUSH
 382: LD_INT 5
 384: PPUSH
 385: LD_INT 0
 387: PPUSH
 388: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 392: LD_EXP 2
 396: PPUSH
 397: LD_INT 4
 399: PPUSH
 400: CALL_OW 336
// Denis = PrepareUnit ( Denis , true ) ;
 404: LD_ADDR_EXP 3
 408: PUSH
 409: LD_STRING Denis
 411: PPUSH
 412: LD_INT 1
 414: PPUSH
 415: CALL 4321 0 2
 419: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 420: LD_EXP 3
 424: PPUSH
 425: LD_VAR 0 3
 429: PUSH
 430: LD_INT 1
 432: ARRAY
 433: PPUSH
 434: CALL_OW 250
 438: PPUSH
 439: LD_VAR 0 3
 443: PUSH
 444: LD_INT 1
 446: ARRAY
 447: PPUSH
 448: CALL_OW 251
 452: PPUSH
 453: LD_INT 5
 455: PPUSH
 456: LD_INT 0
 458: PPUSH
 459: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 463: LD_EXP 3
 467: PPUSH
 468: LD_INT 4
 470: PPUSH
 471: CALL_OW 336
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 475: LD_STRING FrankInDelta
 477: PPUSH
 478: LD_INT 0
 480: PPUSH
 481: CALL_OW 30
 485: PUSH
 486: LD_INT 1
 488: EQUAL
 489: IFFALSE 562
// begin Frank = PrepareUnit ( Frank , true ) ;
 491: LD_ADDR_EXP 5
 495: PUSH
 496: LD_STRING Frank
 498: PPUSH
 499: LD_INT 1
 501: PPUSH
 502: CALL 4321 0 2
 506: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 507: LD_EXP 5
 511: PPUSH
 512: LD_VAR 0 3
 516: PUSH
 517: LD_INT 1
 519: ARRAY
 520: PPUSH
 521: CALL_OW 250
 525: PPUSH
 526: LD_VAR 0 3
 530: PUSH
 531: LD_INT 1
 533: ARRAY
 534: PPUSH
 535: CALL_OW 251
 539: PPUSH
 540: LD_INT 5
 542: PPUSH
 543: LD_INT 0
 545: PPUSH
 546: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 550: LD_EXP 5
 554: PPUSH
 555: LD_INT 1
 557: PPUSH
 558: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 562: LD_STRING LisaInDelta
 564: PPUSH
 565: LD_INT 0
 567: PPUSH
 568: CALL_OW 30
 572: PUSH
 573: LD_INT 1
 575: EQUAL
 576: IFFALSE 649
// begin Lisa = PrepareUnit ( Lisa , true ) ;
 578: LD_ADDR_EXP 4
 582: PUSH
 583: LD_STRING Lisa
 585: PPUSH
 586: LD_INT 1
 588: PPUSH
 589: CALL 4321 0 2
 593: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 594: LD_EXP 4
 598: PPUSH
 599: LD_VAR 0 3
 603: PUSH
 604: LD_INT 1
 606: ARRAY
 607: PPUSH
 608: CALL_OW 250
 612: PPUSH
 613: LD_VAR 0 3
 617: PUSH
 618: LD_INT 1
 620: ARRAY
 621: PPUSH
 622: CALL_OW 251
 626: PPUSH
 627: LD_INT 5
 629: PPUSH
 630: LD_INT 0
 632: PPUSH
 633: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 637: LD_EXP 4
 641: PPUSH
 642: LD_INT 1
 644: PPUSH
 645: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 649: LD_STRING BobbyInDelta
 651: PPUSH
 652: LD_INT 0
 654: PPUSH
 655: CALL_OW 30
 659: PUSH
 660: LD_INT 1
 662: EQUAL
 663: IFFALSE 736
// begin Bobby = PrepareUnit ( Bobby , true ) ;
 665: LD_ADDR_EXP 6
 669: PUSH
 670: LD_STRING Bobby
 672: PPUSH
 673: LD_INT 1
 675: PPUSH
 676: CALL 4321 0 2
 680: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 681: LD_EXP 6
 685: PPUSH
 686: LD_VAR 0 3
 690: PUSH
 691: LD_INT 1
 693: ARRAY
 694: PPUSH
 695: CALL_OW 250
 699: PPUSH
 700: LD_VAR 0 3
 704: PUSH
 705: LD_INT 1
 707: ARRAY
 708: PPUSH
 709: CALL_OW 251
 713: PPUSH
 714: LD_INT 5
 716: PPUSH
 717: LD_INT 0
 719: PPUSH
 720: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 724: LD_EXP 6
 728: PPUSH
 729: LD_INT 1
 731: PPUSH
 732: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 736: LD_STRING CyrusInDelta
 738: PPUSH
 739: LD_INT 0
 741: PPUSH
 742: CALL_OW 30
 746: PUSH
 747: LD_INT 1
 749: EQUAL
 750: IFFALSE 823
// begin Cyrus = PrepareUnit ( Cyrus , true ) ;
 752: LD_ADDR_EXP 7
 756: PUSH
 757: LD_STRING Cyrus
 759: PPUSH
 760: LD_INT 1
 762: PPUSH
 763: CALL 4321 0 2
 767: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 768: LD_EXP 7
 772: PPUSH
 773: LD_VAR 0 3
 777: PUSH
 778: LD_INT 1
 780: ARRAY
 781: PPUSH
 782: CALL_OW 250
 786: PPUSH
 787: LD_VAR 0 3
 791: PUSH
 792: LD_INT 1
 794: ARRAY
 795: PPUSH
 796: CALL_OW 251
 800: PPUSH
 801: LD_INT 5
 803: PPUSH
 804: LD_INT 0
 806: PPUSH
 807: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
 811: LD_EXP 7
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
 823: LD_STRING DonaldsonInDelta
 825: PPUSH
 826: LD_INT 0
 828: PPUSH
 829: CALL_OW 30
 833: PUSH
 834: LD_INT 1
 836: EQUAL
 837: IFFALSE 910
// begin Donaldson = PrepareUnit ( Donaldson , true ) ;
 839: LD_ADDR_EXP 9
 843: PUSH
 844: LD_STRING Donaldson
 846: PPUSH
 847: LD_INT 1
 849: PPUSH
 850: CALL 4321 0 2
 854: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 855: LD_EXP 9
 859: PPUSH
 860: LD_VAR 0 3
 864: PUSH
 865: LD_INT 1
 867: ARRAY
 868: PPUSH
 869: CALL_OW 250
 873: PPUSH
 874: LD_VAR 0 3
 878: PUSH
 879: LD_INT 1
 881: ARRAY
 882: PPUSH
 883: CALL_OW 251
 887: PPUSH
 888: LD_INT 5
 890: PPUSH
 891: LD_INT 0
 893: PPUSH
 894: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
 898: LD_EXP 9
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
 910: LD_STRING BrownInDelta
 912: PPUSH
 913: LD_INT 0
 915: PPUSH
 916: CALL_OW 30
 920: PUSH
 921: LD_INT 1
 923: EQUAL
 924: IFFALSE 997
// begin Brown = PrepareUnit ( Brown , true ) ;
 926: LD_ADDR_EXP 8
 930: PUSH
 931: LD_STRING Brown
 933: PPUSH
 934: LD_INT 1
 936: PPUSH
 937: CALL 4321 0 2
 941: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 942: LD_EXP 8
 946: PPUSH
 947: LD_VAR 0 3
 951: PUSH
 952: LD_INT 1
 954: ARRAY
 955: PPUSH
 956: CALL_OW 250
 960: PPUSH
 961: LD_VAR 0 3
 965: PUSH
 966: LD_INT 1
 968: ARRAY
 969: PPUSH
 970: CALL_OW 251
 974: PPUSH
 975: LD_INT 5
 977: PPUSH
 978: LD_INT 0
 980: PPUSH
 981: CALL_OW 50
// SetClass ( Brown , 2 ) ;
 985: LD_EXP 8
 989: PPUSH
 990: LD_INT 2
 992: PPUSH
 993: CALL_OW 336
// end ; others = CreateCharacterSet ( othersInDelta ) ;
 997: LD_ADDR_EXP 10
1001: PUSH
1002: LD_STRING othersInDelta
1004: PPUSH
1005: CALL_OW 31
1009: ST_TO_ADDR
// for i in others do
1010: LD_ADDR_VAR 0 2
1014: PUSH
1015: LD_EXP 10
1019: PUSH
1020: FOR_IN
1021: IFFALSE 1068
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1023: LD_VAR 0 2
1027: PPUSH
1028: LD_VAR 0 3
1032: PUSH
1033: LD_INT 1
1035: ARRAY
1036: PPUSH
1037: CALL_OW 250
1041: PPUSH
1042: LD_VAR 0 3
1046: PUSH
1047: LD_INT 1
1049: ARRAY
1050: PPUSH
1051: CALL_OW 251
1055: PPUSH
1056: LD_INT 35
1058: PPUSH
1059: LD_INT 0
1061: PPUSH
1062: CALL_OW 50
1066: GO 1020
1068: POP
1069: POP
// apemans = CreateCharacterSet ( apeInDelta ) ;
1070: LD_ADDR_EXP 12
1074: PUSH
1075: LD_STRING apeInDelta
1077: PPUSH
1078: CALL_OW 31
1082: ST_TO_ADDR
// uc_nation = 0 ;
1083: LD_ADDR_OWVAR 21
1087: PUSH
1088: LD_INT 0
1090: ST_TO_ADDR
// if apemans > 5 then
1091: LD_EXP 12
1095: PUSH
1096: LD_INT 5
1098: GREATER
1099: IFFALSE 1194
// begin for i := 1 to 5 do
1101: LD_ADDR_VAR 0 2
1105: PUSH
1106: DOUBLE
1107: LD_INT 1
1109: DEC
1110: ST_TO_ADDR
1111: LD_INT 5
1113: PUSH
1114: FOR_TO
1115: IFFALSE 1190
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1117: LD_EXP 12
1121: PUSH
1122: LD_VAR 0 2
1126: ARRAY
1127: PPUSH
1128: LD_VAR 0 3
1132: PUSH
1133: LD_INT 1
1135: ARRAY
1136: PPUSH
1137: CALL_OW 250
1141: PPUSH
1142: LD_VAR 0 3
1146: PUSH
1147: LD_INT 1
1149: ARRAY
1150: PPUSH
1151: CALL_OW 251
1155: PPUSH
1156: LD_INT 50
1158: PPUSH
1159: LD_INT 0
1161: PPUSH
1162: CALL_OW 50
// yourApemans = yourApemans ^ apemans [ i ] ;
1166: LD_ADDR_EXP 13
1170: PUSH
1171: LD_EXP 13
1175: PUSH
1176: LD_EXP 12
1180: PUSH
1181: LD_VAR 0 2
1185: ARRAY
1186: ADD
1187: ST_TO_ADDR
// end ;
1188: GO 1114
1190: POP
1191: POP
// end else
1192: GO 1270
// begin for i in apemans do
1194: LD_ADDR_VAR 0 2
1198: PUSH
1199: LD_EXP 12
1203: PUSH
1204: FOR_IN
1205: IFFALSE 1268
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1207: LD_VAR 0 2
1211: PPUSH
1212: LD_VAR 0 3
1216: PUSH
1217: LD_INT 1
1219: ARRAY
1220: PPUSH
1221: CALL_OW 250
1225: PPUSH
1226: LD_VAR 0 3
1230: PUSH
1231: LD_INT 1
1233: ARRAY
1234: PPUSH
1235: CALL_OW 251
1239: PPUSH
1240: LD_INT 50
1242: PPUSH
1243: LD_INT 0
1245: PPUSH
1246: CALL_OW 50
// yourApemans = yourApemans ^ i ;
1250: LD_ADDR_EXP 13
1254: PUSH
1255: LD_EXP 13
1259: PUSH
1260: LD_VAR 0 2
1264: ADD
1265: ST_TO_ADDR
// end ;
1266: GO 1204
1268: POP
1269: POP
// end ; end ;
1270: LD_VAR 0 1
1274: RET
// export function LoadVehicles ; var i , veh , tmp , vehicles ; begin
1275: LD_INT 0
1277: PPUSH
1278: PPUSH
1279: PPUSH
1280: PPUSH
1281: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1282: LD_ADDR_VAR 0 4
1286: PUSH
1287: LD_INT 22
1289: PUSH
1290: LD_INT 1
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: PUSH
1297: LD_INT 21
1299: PUSH
1300: LD_INT 3
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: PUSH
1307: LD_INT 30
1309: PUSH
1310: LD_INT 0
1312: PUSH
1313: EMPTY
1314: LIST
1315: LIST
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: LIST
1321: PPUSH
1322: CALL_OW 69
1326: ST_TO_ADDR
// uc_side = 1 ;
1327: LD_ADDR_OWVAR 20
1331: PUSH
1332: LD_INT 1
1334: ST_TO_ADDR
// vehicles = LoadVariable ( vehiclesInDelta , [ ] ) ;
1335: LD_ADDR_VAR 0 5
1339: PUSH
1340: LD_STRING vehiclesInDelta
1342: PPUSH
1343: EMPTY
1344: PPUSH
1345: CALL_OW 30
1349: ST_TO_ADDR
// for i = 1 to vehicles do
1350: LD_ADDR_VAR 0 2
1354: PUSH
1355: DOUBLE
1356: LD_INT 1
1358: DEC
1359: ST_TO_ADDR
1360: LD_VAR 0 5
1364: PUSH
1365: FOR_TO
1366: IFFALSE 1569
// begin if vehicles [ i + 4 ] = 11 or vehicles [ i ] = 3 then
1368: LD_VAR 0 5
1372: PUSH
1373: LD_VAR 0 2
1377: PUSH
1378: LD_INT 4
1380: PLUS
1381: ARRAY
1382: PUSH
1383: LD_INT 11
1385: EQUAL
1386: PUSH
1387: LD_VAR 0 5
1391: PUSH
1392: LD_VAR 0 2
1396: ARRAY
1397: PUSH
1398: LD_INT 3
1400: EQUAL
1401: OR
1402: IFFALSE 1553
// begin uc_nation = vehicles [ i ] ;
1404: LD_ADDR_OWVAR 21
1408: PUSH
1409: LD_VAR 0 5
1413: PUSH
1414: LD_VAR 0 2
1418: ARRAY
1419: ST_TO_ADDR
// vc_chassis = vehicles [ i + 1 ] ;
1420: LD_ADDR_OWVAR 37
1424: PUSH
1425: LD_VAR 0 5
1429: PUSH
1430: LD_VAR 0 2
1434: PUSH
1435: LD_INT 1
1437: PLUS
1438: ARRAY
1439: ST_TO_ADDR
// vc_engine = vehicles [ i + 2 ] ;
1440: LD_ADDR_OWVAR 39
1444: PUSH
1445: LD_VAR 0 5
1449: PUSH
1450: LD_VAR 0 2
1454: PUSH
1455: LD_INT 2
1457: PLUS
1458: ARRAY
1459: ST_TO_ADDR
// vc_control = vehicles [ i + 3 ] ;
1460: LD_ADDR_OWVAR 38
1464: PUSH
1465: LD_VAR 0 5
1469: PUSH
1470: LD_VAR 0 2
1474: PUSH
1475: LD_INT 3
1477: PLUS
1478: ARRAY
1479: ST_TO_ADDR
// vc_weapon = vehicles [ i + 4 ] ;
1480: LD_ADDR_OWVAR 40
1484: PUSH
1485: LD_VAR 0 5
1489: PUSH
1490: LD_VAR 0 2
1494: PUSH
1495: LD_INT 4
1497: PLUS
1498: ARRAY
1499: ST_TO_ADDR
// veh = CreateVehicle ;
1500: LD_ADDR_VAR 0 3
1504: PUSH
1505: CALL_OW 45
1509: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 40 , false ) ;
1510: LD_VAR 0 3
1514: PPUSH
1515: LD_VAR 0 4
1519: PUSH
1520: LD_INT 1
1522: ARRAY
1523: PPUSH
1524: CALL_OW 250
1528: PPUSH
1529: LD_VAR 0 4
1533: PUSH
1534: LD_INT 1
1536: ARRAY
1537: PPUSH
1538: CALL_OW 251
1542: PPUSH
1543: LD_INT 40
1545: PPUSH
1546: LD_INT 0
1548: PPUSH
1549: CALL_OW 50
// end ; i = i + 4 ;
1553: LD_ADDR_VAR 0 2
1557: PUSH
1558: LD_VAR 0 2
1562: PUSH
1563: LD_INT 4
1565: PLUS
1566: ST_TO_ADDR
// end ;
1567: GO 1365
1569: POP
1570: POP
// end ;
1571: LD_VAR 0 1
1575: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1576: LD_INT 0
1578: PPUSH
1579: PPUSH
1580: PPUSH
1581: PPUSH
1582: PPUSH
// uc_side = 1 ;
1583: LD_ADDR_OWVAR 20
1587: PUSH
1588: LD_INT 1
1590: ST_TO_ADDR
// uc_nation = 1 ;
1591: LD_ADDR_OWVAR 21
1595: PUSH
1596: LD_INT 1
1598: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1599: LD_ADDR_VAR 0 4
1603: PUSH
1604: LD_INT 22
1606: PUSH
1607: LD_INT 1
1609: PUSH
1610: EMPTY
1611: LIST
1612: LIST
1613: PUSH
1614: LD_INT 21
1616: PUSH
1617: LD_INT 3
1619: PUSH
1620: EMPTY
1621: LIST
1622: LIST
1623: PUSH
1624: LD_INT 30
1626: PUSH
1627: LD_INT 0
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: LIST
1638: PPUSH
1639: CALL_OW 69
1643: ST_TO_ADDR
// if FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] then
1644: LD_INT 22
1646: PUSH
1647: LD_INT 1
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: LD_INT 25
1656: PUSH
1657: LD_INT 4
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 26
1666: PUSH
1667: LD_INT 1
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: LIST
1678: PUSH
1679: EMPTY
1680: LIST
1681: PPUSH
1682: CALL_OW 69
1686: PUSH
1687: LD_EXP 1
1691: PUSH
1692: LD_EXP 7
1696: PUSH
1697: LD_EXP 6
1701: PUSH
1702: LD_EXP 5
1706: PUSH
1707: LD_EXP 2
1711: PUSH
1712: LD_EXP 3
1716: PUSH
1717: LD_EXP 8
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: LIST
1726: LIST
1727: LIST
1728: LIST
1729: LIST
1730: DIFF
1731: IFFALSE 1832
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) [ 1 ] else
1733: LD_ADDR_EXP 15
1737: PUSH
1738: LD_INT 22
1740: PUSH
1741: LD_INT 1
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 4
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: LD_INT 26
1760: PUSH
1761: LD_INT 1
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PUSH
1768: EMPTY
1769: LIST
1770: LIST
1771: LIST
1772: PUSH
1773: EMPTY
1774: LIST
1775: PPUSH
1776: CALL_OW 69
1780: PUSH
1781: LD_EXP 1
1785: PUSH
1786: LD_EXP 7
1790: PUSH
1791: LD_EXP 6
1795: PUSH
1796: LD_EXP 5
1800: PUSH
1801: LD_EXP 2
1805: PUSH
1806: LD_EXP 3
1810: PUSH
1811: LD_EXP 8
1815: PUSH
1816: EMPTY
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: DIFF
1825: PUSH
1826: LD_INT 1
1828: ARRAY
1829: ST_TO_ADDR
1830: GO 1979
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
1832: LD_ADDR_VAR 0 5
1836: PUSH
1837: LD_INT 22
1839: PUSH
1840: LD_INT 1
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: LD_INT 26
1849: PUSH
1850: LD_INT 1
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: PUSH
1861: EMPTY
1862: LIST
1863: PPUSH
1864: CALL_OW 69
1868: PUSH
1869: LD_EXP 1
1873: PUSH
1874: LD_EXP 7
1878: PUSH
1879: LD_EXP 6
1883: PUSH
1884: LD_EXP 5
1888: PUSH
1889: LD_EXP 2
1893: PUSH
1894: LD_EXP 3
1898: PUSH
1899: LD_EXP 8
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: LIST
1912: DIFF
1913: ST_TO_ADDR
// if filter then
1914: LD_VAR 0 5
1918: IFFALSE 1979
// for i in filter do
1920: LD_ADDR_VAR 0 2
1924: PUSH
1925: LD_VAR 0 5
1929: PUSH
1930: FOR_IN
1931: IFFALSE 1977
// if GetSkill ( i , 4 ) >= 4 then
1933: LD_VAR 0 2
1937: PPUSH
1938: LD_INT 4
1940: PPUSH
1941: CALL_OW 259
1945: PUSH
1946: LD_INT 4
1948: GREATEREQUAL
1949: IFFALSE 1975
// begin deltaDoctor := i ;
1951: LD_ADDR_EXP 15
1955: PUSH
1956: LD_VAR 0 2
1960: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
1961: LD_EXP 15
1965: PPUSH
1966: LD_INT 4
1968: PPUSH
1969: CALL_OW 336
// break ;
1973: GO 1977
// end ;
1975: GO 1930
1977: POP
1978: POP
// end ; for i = 1 to 6 do
1979: LD_ADDR_VAR 0 2
1983: PUSH
1984: DOUBLE
1985: LD_INT 1
1987: DEC
1988: ST_TO_ADDR
1989: LD_INT 6
1991: PUSH
1992: FOR_TO
1993: IFFALSE 2136
// begin hc_gallery =  ;
1995: LD_ADDR_OWVAR 33
1999: PUSH
2000: LD_STRING 
2002: ST_TO_ADDR
// hc_name =  ;
2003: LD_ADDR_OWVAR 26
2007: PUSH
2008: LD_STRING 
2010: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) - Difficulty ) ;
2011: LD_INT 0
2013: PPUSH
2014: LD_INT 1
2016: PUSH
2017: LD_INT 2
2019: PUSH
2020: LD_INT 3
2022: PUSH
2023: LD_INT 4
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: PUSH
2032: LD_INT 1
2034: PPUSH
2035: LD_INT 4
2037: PPUSH
2038: CALL_OW 12
2042: ARRAY
2043: PPUSH
2044: LD_INT 3
2046: PPUSH
2047: LD_INT 5
2049: PPUSH
2050: CALL_OW 12
2054: PUSH
2055: LD_OWVAR 67
2059: MINUS
2060: PPUSH
2061: CALL_OW 380
// un = CreateHuman ;
2065: LD_ADDR_VAR 0 3
2069: PUSH
2070: CALL_OW 44
2074: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2075: LD_ADDR_EXP 11
2079: PUSH
2080: LD_EXP 11
2084: PUSH
2085: LD_VAR 0 3
2089: ADD
2090: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2091: LD_VAR 0 3
2095: PPUSH
2096: LD_VAR 0 4
2100: PUSH
2101: LD_INT 1
2103: ARRAY
2104: PPUSH
2105: CALL_OW 250
2109: PPUSH
2110: LD_VAR 0 4
2114: PUSH
2115: LD_INT 1
2117: ARRAY
2118: PPUSH
2119: CALL_OW 251
2123: PPUSH
2124: LD_INT 15
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 50
// end ;
2134: GO 1992
2136: POP
2137: POP
// if deltaDoctor then
2138: LD_EXP 15
2142: IFFALSE 2146
// exit ;
2144: GO 2228
// hc_gallery =  ;
2146: LD_ADDR_OWVAR 33
2150: PUSH
2151: LD_STRING 
2153: ST_TO_ADDR
// hc_name = Dr. Adam Charles Dawkins ;
2154: LD_ADDR_OWVAR 26
2158: PUSH
2159: LD_STRING Dr. Adam Charles Dawkins
2161: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 6 ) ;
2162: LD_INT 1
2164: PPUSH
2165: LD_INT 4
2167: PPUSH
2168: LD_INT 6
2170: PPUSH
2171: CALL_OW 380
// deltaDoctor = CreateHuman ;
2175: LD_ADDR_EXP 15
2179: PUSH
2180: CALL_OW 44
2184: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2185: LD_EXP 15
2189: PPUSH
2190: LD_VAR 0 4
2194: PUSH
2195: LD_INT 1
2197: ARRAY
2198: PPUSH
2199: CALL_OW 250
2203: PPUSH
2204: LD_VAR 0 4
2208: PUSH
2209: LD_INT 1
2211: ARRAY
2212: PPUSH
2213: CALL_OW 251
2217: PPUSH
2218: LD_INT 5
2220: PPUSH
2221: LD_INT 0
2223: PPUSH
2224: CALL_OW 50
// end ; end_of_file
2228: LD_VAR 0 1
2232: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2233: LD_INT 0
2235: PPUSH
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
2240: PPUSH
2241: PPUSH
// buildings = LoadVariable ( buildingsInDelta , [ ] ) ;
2242: LD_ADDR_VAR 0 5
2246: PUSH
2247: LD_STRING buildingsInDelta
2249: PPUSH
2250: EMPTY
2251: PPUSH
2252: CALL_OW 30
2256: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2257: LD_INT 68
2259: PPUSH
2260: LD_INT 40
2262: PPUSH
2263: LD_INT 1
2265: PPUSH
2266: CALL_OW 441
// uc_side = 1 ;
2270: LD_ADDR_OWVAR 20
2274: PUSH
2275: LD_INT 1
2277: ST_TO_ADDR
// uc_nation = 1 ;
2278: LD_ADDR_OWVAR 21
2282: PUSH
2283: LD_INT 1
2285: ST_TO_ADDR
// for i = 1 to buildings do
2286: LD_ADDR_VAR 0 2
2290: PUSH
2291: DOUBLE
2292: LD_INT 1
2294: DEC
2295: ST_TO_ADDR
2296: LD_VAR 0 5
2300: PUSH
2301: FOR_TO
2302: IFFALSE 2574
// begin bc_type = buildings [ i ] [ 1 ] ;
2304: LD_ADDR_OWVAR 42
2308: PUSH
2309: LD_VAR 0 5
2313: PUSH
2314: LD_VAR 0 2
2318: ARRAY
2319: PUSH
2320: LD_INT 1
2322: ARRAY
2323: ST_TO_ADDR
// bc_level = buildings [ i ] [ 2 ] ;
2324: LD_ADDR_OWVAR 43
2328: PUSH
2329: LD_VAR 0 5
2333: PUSH
2334: LD_VAR 0 2
2338: ARRAY
2339: PUSH
2340: LD_INT 2
2342: ARRAY
2343: ST_TO_ADDR
// if bc_type = b_lab_half or bc_type = b_lab_full then
2344: LD_OWVAR 42
2348: PUSH
2349: LD_INT 7
2351: EQUAL
2352: PUSH
2353: LD_OWVAR 42
2357: PUSH
2358: LD_INT 8
2360: EQUAL
2361: OR
2362: IFFALSE 2478
// begin if buildings [ i ] [ 6 ] then
2364: LD_VAR 0 5
2368: PUSH
2369: LD_VAR 0 2
2373: ARRAY
2374: PUSH
2375: LD_INT 6
2377: ARRAY
2378: IFFALSE 2400
// bc_kind1 = buildings [ i ] [ 6 ] ;
2380: LD_ADDR_OWVAR 44
2384: PUSH
2385: LD_VAR 0 5
2389: PUSH
2390: LD_VAR 0 2
2394: ARRAY
2395: PUSH
2396: LD_INT 6
2398: ARRAY
2399: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2400: LD_VAR 0 5
2404: PUSH
2405: LD_VAR 0 2
2409: ARRAY
2410: PUSH
2411: LD_INT 7
2413: ARRAY
2414: IFFALSE 2436
// bc_kind2 = buildings [ i ] [ 7 ] ;
2416: LD_ADDR_OWVAR 45
2420: PUSH
2421: LD_VAR 0 5
2425: PUSH
2426: LD_VAR 0 2
2430: ARRAY
2431: PUSH
2432: LD_INT 7
2434: ARRAY
2435: ST_TO_ADDR
// if not buildings [ i ] [ 6 ] and not buildings [ i ] [ 7 ] then
2436: LD_VAR 0 5
2440: PUSH
2441: LD_VAR 0 2
2445: ARRAY
2446: PUSH
2447: LD_INT 6
2449: ARRAY
2450: NOT
2451: PUSH
2452: LD_VAR 0 5
2456: PUSH
2457: LD_VAR 0 2
2461: ARRAY
2462: PUSH
2463: LD_INT 7
2465: ARRAY
2466: NOT
2467: AND
2468: IFFALSE 2478
// bc_type := b_lab ;
2470: LD_ADDR_OWVAR 42
2474: PUSH
2475: LD_INT 6
2477: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2478: LD_ADDR_VAR 0 4
2482: PUSH
2483: LD_VAR 0 5
2487: PUSH
2488: LD_VAR 0 2
2492: ARRAY
2493: PUSH
2494: LD_INT 3
2496: ARRAY
2497: PPUSH
2498: LD_VAR 0 5
2502: PUSH
2503: LD_VAR 0 2
2507: ARRAY
2508: PUSH
2509: LD_INT 4
2511: ARRAY
2512: PPUSH
2513: LD_VAR 0 5
2517: PUSH
2518: LD_VAR 0 2
2522: ARRAY
2523: PUSH
2524: LD_INT 5
2526: ARRAY
2527: PPUSH
2528: CALL_OW 47
2532: ST_TO_ADDR
// if GetBType ( building ) = b_bunker then
2533: LD_VAR 0 4
2537: PPUSH
2538: CALL_OW 266
2542: PUSH
2543: LD_INT 32
2545: EQUAL
2546: IFFALSE 2572
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2548: LD_VAR 0 4
2552: PPUSH
2553: LD_VAR 0 5
2557: PUSH
2558: LD_VAR 0 2
2562: ARRAY
2563: PUSH
2564: LD_INT 8
2566: ARRAY
2567: PPUSH
2568: CALL_OW 431
// end ;
2572: GO 2301
2574: POP
2575: POP
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2576: LD_ADDR_VAR 0 6
2580: PUSH
2581: LD_INT 22
2583: PUSH
2584: LD_INT 1
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PUSH
2591: LD_INT 2
2593: PUSH
2594: LD_INT 30
2596: PUSH
2597: LD_INT 6
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PUSH
2604: LD_INT 30
2606: PUSH
2607: LD_INT 7
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: PUSH
2614: LD_INT 30
2616: PUSH
2617: LD_INT 8
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: PUSH
2624: EMPTY
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: PPUSH
2634: CALL_OW 69
2638: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2639: LD_ADDR_VAR 0 7
2643: PUSH
2644: LD_INT 22
2646: PUSH
2647: LD_INT 1
2649: PUSH
2650: EMPTY
2651: LIST
2652: LIST
2653: PUSH
2654: LD_INT 30
2656: PUSH
2657: LD_INT 0
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: PPUSH
2668: CALL_OW 69
2672: ST_TO_ADDR
// if lab > 0 and tmp > 0 then
2673: LD_VAR 0 6
2677: PUSH
2678: LD_INT 0
2680: GREATER
2681: PUSH
2682: LD_VAR 0 7
2686: PUSH
2687: LD_INT 0
2689: GREATER
2690: AND
2691: IFFALSE 2701
// baseCorrect = 1 ;
2693: LD_ADDR_EXP 17
2697: PUSH
2698: LD_INT 1
2700: ST_TO_ADDR
// if baseCorrect = 0 then
2701: LD_EXP 17
2705: PUSH
2706: LD_INT 0
2708: EQUAL
2709: IFFALSE 3082
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2711: LD_ADDR_VAR 0 2
2715: PUSH
2716: LD_INT 22
2718: PUSH
2719: LD_INT 1
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: PUSH
2726: LD_INT 21
2728: PUSH
2729: LD_INT 3
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: PUSH
2736: EMPTY
2737: LIST
2738: LIST
2739: PPUSH
2740: CALL_OW 69
2744: PUSH
2745: FOR_IN
2746: IFFALSE 2759
// RemoveUnit ( i ) ;
2748: LD_VAR 0 2
2752: PPUSH
2753: CALL_OW 64
2757: GO 2745
2759: POP
2760: POP
// uc_nation = 1 ;
2761: LD_ADDR_OWVAR 21
2765: PUSH
2766: LD_INT 1
2768: ST_TO_ADDR
// uc_side = 1 ;
2769: LD_ADDR_OWVAR 20
2773: PUSH
2774: LD_INT 1
2776: ST_TO_ADDR
// bc_level = 5 ;
2777: LD_ADDR_OWVAR 43
2781: PUSH
2782: LD_INT 5
2784: ST_TO_ADDR
// bc_type = b_depot ;
2785: LD_ADDR_OWVAR 42
2789: PUSH
2790: LD_INT 0
2792: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2793: LD_INT 50
2795: PPUSH
2796: LD_INT 22
2798: PPUSH
2799: LD_INT 0
2801: PPUSH
2802: CALL_OW 47
// bc_type = b_bunker ;
2806: LD_ADDR_OWVAR 42
2810: PUSH
2811: LD_INT 32
2813: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
2814: LD_ADDR_VAR 0 4
2818: PUSH
2819: LD_INT 68
2821: PPUSH
2822: LD_INT 24
2824: PPUSH
2825: LD_INT 4
2827: PPUSH
2828: CALL_OW 47
2832: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
2833: LD_VAR 0 4
2837: PPUSH
2838: LD_INT 4
2840: PUSH
2841: LD_INT 11
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: PUSH
2848: LD_INT 1
2850: PPUSH
2851: LD_INT 2
2853: PPUSH
2854: CALL_OW 12
2858: ARRAY
2859: PPUSH
2860: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
2864: LD_ADDR_VAR 0 4
2868: PUSH
2869: LD_INT 71
2871: PPUSH
2872: LD_INT 34
2874: PPUSH
2875: LD_INT 4
2877: PPUSH
2878: CALL_OW 47
2882: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
2883: LD_VAR 0 4
2887: PPUSH
2888: LD_INT 4
2890: PUSH
2891: LD_INT 11
2893: PUSH
2894: EMPTY
2895: LIST
2896: LIST
2897: PUSH
2898: LD_INT 1
2900: PPUSH
2901: LD_INT 2
2903: PPUSH
2904: CALL_OW 12
2908: ARRAY
2909: PPUSH
2910: CALL_OW 431
// bc_type = 31 ;
2914: LD_ADDR_OWVAR 42
2918: PUSH
2919: LD_INT 31
2921: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
2922: LD_INT 51
2924: PPUSH
2925: LD_INT 7
2927: PPUSH
2928: LD_INT 3
2930: PPUSH
2931: CALL_OW 47
// bc_type = b_oil_mine ;
2935: LD_ADDR_OWVAR 42
2939: PUSH
2940: LD_INT 29
2942: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
2943: LD_INT 68
2945: PPUSH
2946: LD_INT 40
2948: PPUSH
2949: LD_INT 1
2951: PPUSH
2952: CALL_OW 47
// bc_type = b_workshop ;
2956: LD_ADDR_OWVAR 42
2960: PUSH
2961: LD_INT 2
2963: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
2964: LD_INT 38
2966: PPUSH
2967: LD_INT 20
2969: PPUSH
2970: LD_INT 2
2972: PPUSH
2973: CALL_OW 47
// bc_type = b_armoury ;
2977: LD_ADDR_OWVAR 42
2981: PUSH
2982: LD_INT 4
2984: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
2985: LD_INT 38
2987: PPUSH
2988: LD_INT 20
2990: PPUSH
2991: LD_INT 2
2993: PPUSH
2994: CALL_OW 47
// bc_type = b_solar_power ;
2998: LD_ADDR_OWVAR 42
3002: PUSH
3003: LD_INT 27
3005: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3006: LD_INT 46
3008: PPUSH
3009: LD_INT 12
3011: PPUSH
3012: LD_INT 1
3014: PPUSH
3015: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3019: LD_INT 48
3021: PPUSH
3022: LD_INT 11
3024: PPUSH
3025: LD_INT 2
3027: PPUSH
3028: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 49 , 11 , 3 ) ;
3032: LD_INT 49
3034: PPUSH
3035: LD_INT 11
3037: PPUSH
3038: LD_INT 3
3040: PPUSH
3041: CALL_OW 47
// bc_type = b_lab_half ;
3045: LD_ADDR_OWVAR 42
3049: PUSH
3050: LD_INT 7
3052: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
3053: LD_ADDR_OWVAR 44
3057: PUSH
3058: LD_INT 15
3060: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
3061: LD_ADDR_OWVAR 45
3065: PUSH
3066: LD_INT 9
3068: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3069: LD_INT 42
3071: PPUSH
3072: LD_INT 15
3074: PPUSH
3075: LD_INT 2
3077: PPUSH
3078: CALL_OW 47
// end ; end ; end_of_file
3082: LD_VAR 0 1
3086: RET
// every 1 do var i , j , tmp ;
3087: GO 3089
3089: DISABLE
3090: LD_INT 0
3092: PPUSH
3093: PPUSH
3094: PPUSH
// begin InGameOn ;
3095: CALL_OW 8
// CenterNowOnUnits ( lab [ 1 ] ) ;
3099: LD_EXP 19
3103: PUSH
3104: LD_INT 1
3106: ARRAY
3107: PPUSH
3108: CALL_OW 87
// if IsOK ( Denis ) then
3112: LD_EXP 3
3116: PPUSH
3117: CALL_OW 302
3121: IFFALSE 3149
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3123: LD_INT 6
3125: PPUSH
3126: LD_INT 1
3128: PPUSH
3129: LD_INT 2
3131: PPUSH
3132: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3136: LD_INT 20
3138: PPUSH
3139: LD_INT 1
3141: PPUSH
3142: LD_INT 1
3144: PPUSH
3145: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3149: LD_EXP 1
3153: PPUSH
3154: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3158: LD_EXP 1
3162: PPUSH
3163: LD_EXP 15
3167: PPUSH
3168: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3172: LD_INT 35
3174: PPUSH
3175: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3179: LD_EXP 15
3183: PPUSH
3184: LD_EXP 1
3188: PPUSH
3189: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3193: LD_EXP 1
3197: PPUSH
3198: LD_EXP 15
3202: PPUSH
3203: CALL_OW 296
3207: PUSH
3208: LD_INT 5
3210: LESS
3211: IFFALSE 3172
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3213: LD_EXP 15
3217: PPUSH
3218: LD_EXP 1
3222: PPUSH
3223: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3227: LD_EXP 1
3231: PPUSH
3232: LD_STRING D1-JMM-1
3234: PPUSH
3235: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3239: LD_EXP 15
3243: PPUSH
3244: LD_STRING D1-Sci-1
3246: PPUSH
3247: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3251: LD_EXP 1
3255: PUSH
3256: LD_EXP 15
3260: PUSH
3261: LD_EXP 3
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: LIST
3270: PPUSH
3271: LD_EXP 19
3275: PUSH
3276: LD_INT 1
3278: ARRAY
3279: PPUSH
3280: CALL_OW 120
// end ;
3284: PPOPN 3
3286: END
// every 0 0$2 trigger IsInUnit ( JMM ) = lab [ 1 ] and IsInUnit ( DeltaDoctor ) = lab [ 1 ] do var i , j , tmp ;
3287: LD_EXP 1
3291: PPUSH
3292: CALL_OW 310
3296: PUSH
3297: LD_EXP 19
3301: PUSH
3302: LD_INT 1
3304: ARRAY
3305: EQUAL
3306: PUSH
3307: LD_EXP 15
3311: PPUSH
3312: CALL_OW 310
3316: PUSH
3317: LD_EXP 19
3321: PUSH
3322: LD_INT 1
3324: ARRAY
3325: EQUAL
3326: AND
3327: IFFALSE 3873
3329: GO 3331
3331: DISABLE
3332: LD_INT 0
3334: PPUSH
3335: PPUSH
3336: PPUSH
// begin CenterNowOnUnits ( lab [ 1 ] ) ;
3337: LD_EXP 19
3341: PUSH
3342: LD_INT 1
3344: ARRAY
3345: PPUSH
3346: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3350: LD_EXP 1
3354: PPUSH
3355: LD_STRING D1-JMM-2
3357: PPUSH
3358: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3362: LD_EXP 15
3366: PPUSH
3367: LD_STRING D1-Sci-2
3369: PPUSH
3370: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3374: LD_EXP 1
3378: PPUSH
3379: LD_STRING D1-JMM-3
3381: PPUSH
3382: CALL_OW 88
// if IsOK ( Denis ) then
3386: LD_EXP 3
3390: PPUSH
3391: CALL_OW 302
3395: IFFALSE 3411
// Say ( DeltaDoctor , D1-Sci-3 ) else
3397: LD_EXP 15
3401: PPUSH
3402: LD_STRING D1-Sci-3
3404: PPUSH
3405: CALL_OW 88
3409: GO 3423
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3411: LD_EXP 15
3415: PPUSH
3416: LD_STRING D1-Sci-3a
3418: PPUSH
3419: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3423: LD_EXP 1
3427: PPUSH
3428: LD_STRING D1-JMM-4
3430: PPUSH
3431: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3435: LD_ADDR_VAR 0 3
3439: PUSH
3440: LD_INT 22
3442: PUSH
3443: LD_INT 1
3445: PUSH
3446: EMPTY
3447: LIST
3448: LIST
3449: PUSH
3450: LD_INT 25
3452: PUSH
3453: LD_INT 4
3455: PUSH
3456: EMPTY
3457: LIST
3458: LIST
3459: PUSH
3460: LD_INT 3
3462: PUSH
3463: LD_INT 54
3465: PUSH
3466: EMPTY
3467: LIST
3468: PUSH
3469: EMPTY
3470: LIST
3471: LIST
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: LIST
3477: PPUSH
3478: CALL_OW 69
3482: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3483: LD_ADDR_VAR 0 1
3487: PUSH
3488: LD_INT 22
3490: PUSH
3491: LD_INT 0
3493: PUSH
3494: EMPTY
3495: LIST
3496: LIST
3497: PPUSH
3498: CALL_OW 69
3502: PUSH
3503: FOR_IN
3504: IFFALSE 3554
// for j in tmp do
3506: LD_ADDR_VAR 0 2
3510: PUSH
3511: LD_VAR 0 3
3515: PUSH
3516: FOR_IN
3517: IFFALSE 3550
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3519: LD_VAR 0 2
3523: PPUSH
3524: LD_VAR 0 1
3528: PPUSH
3529: CALL_OW 250
3533: PPUSH
3534: LD_VAR 0 1
3538: PPUSH
3539: CALL_OW 251
3543: PPUSH
3544: CALL_OW 191
3548: GO 3516
3550: POP
3551: POP
3552: GO 3503
3554: POP
3555: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3556: LD_EXP 15
3560: PPUSH
3561: LD_STRING D1-Sci-4
3563: PPUSH
3564: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3568: LD_EXP 1
3572: PPUSH
3573: LD_STRING D1-JMM-5
3575: PPUSH
3576: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3580: LD_EXP 15
3584: PPUSH
3585: LD_STRING D1-Sci-5
3587: PPUSH
3588: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3592: LD_EXP 1
3596: PPUSH
3597: LD_STRING D1-JMM-6
3599: PPUSH
3600: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3604: LD_EXP 16
3608: PPUSH
3609: LD_STRING D1-Har-6
3611: PPUSH
3612: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3616: LD_EXP 1
3620: PPUSH
3621: LD_STRING D1-JMM-7
3623: PPUSH
3624: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3628: LD_EXP 16
3632: PPUSH
3633: LD_STRING D1-Har-7
3635: PPUSH
3636: CALL_OW 94
// if IsOK ( Denis ) then
3640: LD_EXP 3
3644: PPUSH
3645: CALL_OW 302
3649: IFFALSE 3663
// Say ( JMM , D1-JMM-8 ) ;
3651: LD_EXP 1
3655: PPUSH
3656: LD_STRING D1-JMM-8
3658: PPUSH
3659: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3663: LD_EXP 1
3667: PPUSH
3668: LD_STRING D1-JMM-8a
3670: PPUSH
3671: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3675: LD_EXP 16
3679: PPUSH
3680: LD_STRING D1-Har-8
3682: PPUSH
3683: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3687: LD_EXP 1
3691: PPUSH
3692: LD_STRING D1-JMM-9
3694: PPUSH
3695: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3699: LD_EXP 16
3703: PPUSH
3704: LD_STRING D1-Har-9
3706: PPUSH
3707: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3711: LD_EXP 1
3715: PPUSH
3716: LD_STRING D1-JMM-10
3718: PPUSH
3719: CALL_OW 88
// if IsOK ( Denis ) then
3723: LD_EXP 3
3727: PPUSH
3728: CALL_OW 302
3732: IFFALSE 3746
// Say ( JMM , D1-JMM-10a ) ;
3734: LD_EXP 1
3738: PPUSH
3739: LD_STRING D1-JMM-10a
3741: PPUSH
3742: CALL_OW 88
// SelectAndSaveCharacters ;
3746: CALL 4384 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 250 ) ;
3750: LD_EXP 19
3754: PUSH
3755: LD_INT 1
3757: ARRAY
3758: PPUSH
3759: CALL_OW 274
3763: PPUSH
3764: LD_INT 1
3766: PPUSH
3767: LD_INT 250
3769: PPUSH
3770: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) > 0 then
3774: LD_INT 22
3776: PUSH
3777: LD_INT 1
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: LD_INT 30
3786: PUSH
3787: LD_INT 29
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: PPUSH
3798: CALL_OW 69
3802: PUSH
3803: LD_INT 0
3805: GREATER
3806: IFFALSE 3832
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
3808: LD_EXP 19
3812: PUSH
3813: LD_INT 1
3815: ARRAY
3816: PPUSH
3817: CALL_OW 274
3821: PPUSH
3822: LD_INT 2
3824: PPUSH
3825: LD_INT 300
3827: PPUSH
3828: CALL_OW 277
// InGameOff ;
3832: CALL_OW 9
// Query ( Q1 ) ;
3836: LD_STRING Q1
3838: PPUSH
3839: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
3843: LD_INT 3
3845: PPUSH
3846: LD_INT 1
3848: PPUSH
3849: CALL_OW 424
// if IsInUnit ( JMM ) then
3853: LD_EXP 1
3857: PPUSH
3858: CALL_OW 310
3862: IFFALSE 3873
// ComExitBuilding ( JMM ) ;
3864: LD_EXP 1
3868: PPUSH
3869: CALL_OW 122
// end ;
3873: PPOPN 3
3875: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
3876: LD_INT 3
3878: PPUSH
3879: LD_INT 22
3881: PUSH
3882: LD_INT 1
3884: PUSH
3885: EMPTY
3886: LIST
3887: LIST
3888: PUSH
3889: LD_INT 21
3891: PUSH
3892: LD_INT 1
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: PUSH
3899: EMPTY
3900: LIST
3901: LIST
3902: PPUSH
3903: CALL_OW 71
3907: PUSH
3908: LD_INT 0
3910: EQUAL
3911: IFFALSE 4229
3913: GO 3915
3915: DISABLE
3916: LD_INT 0
3918: PPUSH
3919: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) > 0 then
3920: LD_INT 3
3922: PPUSH
3923: LD_INT 21
3925: PUSH
3926: LD_INT 2
3928: PUSH
3929: EMPTY
3930: LIST
3931: LIST
3932: PUSH
3933: LD_INT 3
3935: PUSH
3936: LD_INT 58
3938: PUSH
3939: EMPTY
3940: LIST
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: PUSH
3946: EMPTY
3947: LIST
3948: LIST
3949: PPUSH
3950: CALL_OW 70
3954: PUSH
3955: LD_INT 0
3957: GREATER
3958: IFFALSE 4215
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
3960: LD_ADDR_VAR 0 1
3964: PUSH
3965: LD_INT 3
3967: PPUSH
3968: LD_INT 21
3970: PUSH
3971: LD_INT 2
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: PUSH
3978: LD_INT 3
3980: PUSH
3981: LD_INT 58
3983: PUSH
3984: EMPTY
3985: LIST
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PPUSH
3995: CALL_OW 70
3999: PUSH
4000: FOR_IN
4001: IFFALSE 4201
// begin cargoType = GetCargoType ( i ) ;
4003: LD_ADDR_VAR 0 2
4007: PUSH
4008: LD_VAR 0 1
4012: PPUSH
4013: CALL_OW 288
4017: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4018: LD_VAR 0 1
4022: PPUSH
4023: CALL_OW 264
4027: PUSH
4028: LD_INT 12
4030: EQUAL
4031: IFFALSE 4128
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] ;
4033: LD_ADDR_EXP 14
4037: PUSH
4038: LD_EXP 14
4042: PUSH
4043: LD_VAR 0 1
4047: PPUSH
4048: CALL_OW 248
4052: PUSH
4053: LD_VAR 0 1
4057: PPUSH
4058: CALL_OW 265
4062: PUSH
4063: LD_VAR 0 1
4067: PPUSH
4068: CALL_OW 262
4072: PUSH
4073: LD_VAR 0 1
4077: PPUSH
4078: CALL_OW 263
4082: PUSH
4083: LD_VAR 0 1
4087: PPUSH
4088: CALL_OW 264
4092: PUSH
4093: LD_VAR 0 2
4097: PUSH
4098: LD_VAR 0 1
4102: PPUSH
4103: LD_VAR 0 2
4107: PPUSH
4108: CALL_OW 289
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: LIST
4121: PUSH
4122: EMPTY
4123: LIST
4124: ADD
4125: ST_TO_ADDR
// end else
4126: GO 4199
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4128: LD_ADDR_EXP 14
4132: PUSH
4133: LD_EXP 14
4137: PUSH
4138: LD_VAR 0 1
4142: PPUSH
4143: CALL_OW 248
4147: PUSH
4148: LD_VAR 0 1
4152: PPUSH
4153: CALL_OW 265
4157: PUSH
4158: LD_VAR 0 1
4162: PPUSH
4163: CALL_OW 262
4167: PUSH
4168: LD_VAR 0 1
4172: PPUSH
4173: CALL_OW 263
4177: PUSH
4178: LD_VAR 0 1
4182: PPUSH
4183: CALL_OW 264
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: LIST
4192: LIST
4193: LIST
4194: PUSH
4195: EMPTY
4196: LIST
4197: ADD
4198: ST_TO_ADDR
// end ; end ;
4199: GO 4000
4201: POP
4202: POP
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4203: LD_EXP 14
4207: PPUSH
4208: LD_STRING 06_VehiclesIn06_1
4210: PPUSH
4211: CALL_OW 39
// end ; SaveCargos ;
4215: CALL 4232 0 0
// ChangeMap ( 6 , %_cont ) ;
4219: LD_INT 6
4221: PPUSH
4222: LD_STRING %_cont
4224: PPUSH
4225: CALL_OW 340
// end ;
4229: PPOPN 2
4231: END
// export function SaveCargos ; var i ; begin
4232: LD_INT 0
4234: PPUSH
4235: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
4236: LD_ADDR_VAR 0 2
4240: PUSH
4241: LD_INT 3
4243: PPUSH
4244: LD_INT 22
4246: PUSH
4247: LD_INT 1
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: PUSH
4254: LD_INT 34
4256: PUSH
4257: LD_INT 12
4259: PUSH
4260: EMPTY
4261: LIST
4262: LIST
4263: PUSH
4264: EMPTY
4265: LIST
4266: LIST
4267: PPUSH
4268: CALL_OW 70
4272: PUSH
4273: FOR_IN
4274: IFFALSE 4302
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
4276: LD_ADDR_EXP 20
4280: PUSH
4281: LD_EXP 20
4285: PUSH
4286: LD_VAR 0 2
4290: PPUSH
4291: CALL 5504 0 1
4295: PUSH
4296: EMPTY
4297: LIST
4298: ADD
4299: ST_TO_ADDR
4300: GO 4273
4302: POP
4303: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
4304: LD_EXP 20
4308: PPUSH
4309: LD_STRING 06_ResourcesInCargo06_1
4311: PPUSH
4312: CALL_OW 39
// end ; end_of_file
4316: LD_VAR 0 1
4320: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4321: LD_INT 0
4323: PPUSH
4324: PPUSH
// if exist_mode then
4325: LD_VAR 0 2
4329: IFFALSE 4354
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
4331: LD_ADDR_VAR 0 4
4335: PUSH
4336: LD_EXP 22
4340: PUSH
4341: LD_VAR 0 1
4345: STR
4346: PPUSH
4347: CALL_OW 34
4351: ST_TO_ADDR
4352: GO 4369
// unit := NewCharacter ( ident ) ;
4354: LD_ADDR_VAR 0 4
4358: PUSH
4359: LD_VAR 0 1
4363: PPUSH
4364: CALL_OW 25
4368: ST_TO_ADDR
// result := unit ;
4369: LD_ADDR_VAR 0 3
4373: PUSH
4374: LD_VAR 0 4
4378: ST_TO_ADDR
// end ;
4379: LD_VAR 0 3
4383: RET
// export function SelectAndSaveCharacters ; var i , yourPeople , selectedPeople , test , rnd ; begin
4384: LD_INT 0
4386: PPUSH
4387: PPUSH
4388: PPUSH
4389: PPUSH
4390: PPUSH
4391: PPUSH
// rnd = [ 5 , rand ( 4 , 5 ) , 4 ] [ Difficulty ] ;
4392: LD_ADDR_VAR 0 6
4396: PUSH
4397: LD_INT 5
4399: PUSH
4400: LD_INT 4
4402: PPUSH
4403: LD_INT 5
4405: PPUSH
4406: CALL_OW 12
4410: PUSH
4411: LD_INT 4
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: LIST
4418: PUSH
4419: LD_OWVAR 67
4423: ARRAY
4424: ST_TO_ADDR
// yourPeople = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4425: LD_ADDR_VAR 0 3
4429: PUSH
4430: LD_INT 22
4432: PUSH
4433: LD_INT 1
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: PUSH
4440: LD_INT 21
4442: PUSH
4443: LD_INT 1
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: PUSH
4450: LD_INT 2
4452: PUSH
4453: LD_INT 25
4455: PUSH
4456: LD_INT 1
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: PUSH
4463: LD_INT 25
4465: PUSH
4466: LD_INT 2
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 25
4475: PUSH
4476: LD_INT 3
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: LD_INT 25
4485: PUSH
4486: LD_INT 4
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: PUSH
4500: EMPTY
4501: LIST
4502: LIST
4503: LIST
4504: PPUSH
4505: CALL_OW 69
4509: PUSH
4510: LD_EXP 1
4514: PUSH
4515: LD_EXP 15
4519: PUSH
4520: LD_EXP 3
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: LIST
4529: DIFF
4530: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , [ 5 , 4 , 4 ] [ Difficulty ] , rnd , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4531: LD_ADDR_VAR 0 4
4535: PUSH
4536: LD_STRING text
4538: PPUSH
4539: LD_INT 5
4541: PUSH
4542: LD_INT 4
4544: PUSH
4545: LD_INT 4
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: PUSH
4553: LD_OWVAR 67
4557: ARRAY
4558: PPUSH
4559: LD_VAR 0 6
4563: PPUSH
4564: LD_INT -5
4566: PUSH
4567: LD_EXP 1
4571: PUSH
4572: LD_INT -6
4574: PUSH
4575: LD_INT -2
4577: PUSH
4578: LD_INT -3
4580: PUSH
4581: LD_INT -5
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: PUSH
4592: LD_VAR 0 3
4596: ADD
4597: PUSH
4598: LD_INT -6
4600: PUSH
4601: LD_INT -4
4603: PUSH
4604: LD_EXP 3
4608: PUSH
4609: LD_EXP 15
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: ADD
4620: PPUSH
4621: LD_INT 1
4623: PUSH
4624: LD_INT 3
4626: PUSH
4627: LD_INT 2
4629: PUSH
4630: LD_INT 1
4632: PUSH
4633: EMPTY
4634: LIST
4635: LIST
4636: PUSH
4637: LD_INT 4
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: PPUSH
4646: CALL_OW 42
4650: ST_TO_ADDR
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4651: LD_EXP 1
4655: PPUSH
4656: LD_EXP 21
4660: PUSH
4661: LD_STRING JMM
4663: STR
4664: PPUSH
4665: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4669: LD_EXP 15
4673: PPUSH
4674: LD_STRING DeltaDoctor
4676: PPUSH
4677: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4681: LD_EXP 3
4685: PPUSH
4686: LD_EXP 21
4690: PUSH
4691: LD_STRING Denis
4693: STR
4694: PPUSH
4695: CALL_OW 38
// if Lisa in selectedPeople then
4699: LD_EXP 4
4703: PUSH
4704: LD_VAR 0 4
4708: IN
4709: IFFALSE 4741
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4711: LD_EXP 4
4715: PPUSH
4716: LD_EXP 21
4720: PUSH
4721: LD_STRING Lisa
4723: STR
4724: PPUSH
4725: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4729: LD_INT 1
4731: PPUSH
4732: LD_STRING LisaIn06
4734: PPUSH
4735: CALL_OW 39
// end else
4739: GO 4762
// if IsOk ( Lisa ) then
4741: LD_EXP 4
4745: PPUSH
4746: CALL_OW 302
4750: IFFALSE 4762
// SaveVariable ( 1 , LisaStayInDelta ) ;
4752: LD_INT 1
4754: PPUSH
4755: LD_STRING LisaStayInDelta
4757: PPUSH
4758: CALL_OW 39
// if Bobby in selectedPeople then
4762: LD_EXP 6
4766: PUSH
4767: LD_VAR 0 4
4771: IN
4772: IFFALSE 4804
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4774: LD_EXP 6
4778: PPUSH
4779: LD_EXP 21
4783: PUSH
4784: LD_STRING Bobby
4786: STR
4787: PPUSH
4788: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4792: LD_INT 1
4794: PPUSH
4795: LD_STRING BobbyIn06
4797: PPUSH
4798: CALL_OW 39
// end else
4802: GO 4825
// if IsOk ( Bobby ) then
4804: LD_EXP 6
4808: PPUSH
4809: CALL_OW 302
4813: IFFALSE 4825
// SaveVariable ( 1 , BobbyStayInDelta ) ;
4815: LD_INT 1
4817: PPUSH
4818: LD_STRING BobbyStayInDelta
4820: PPUSH
4821: CALL_OW 39
// if Cyrus in selectedPeople then
4825: LD_EXP 7
4829: PUSH
4830: LD_VAR 0 4
4834: IN
4835: IFFALSE 4867
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4837: LD_EXP 7
4841: PPUSH
4842: LD_EXP 21
4846: PUSH
4847: LD_STRING Cyrus
4849: STR
4850: PPUSH
4851: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
4855: LD_INT 1
4857: PPUSH
4858: LD_STRING CyrusIn06
4860: PPUSH
4861: CALL_OW 39
// end else
4865: GO 4888
// if IsOk ( Cyrus ) then
4867: LD_EXP 7
4871: PPUSH
4872: CALL_OW 302
4876: IFFALSE 4888
// SaveVariable ( 1 , CyrusStayInDelta ) ;
4878: LD_INT 1
4880: PPUSH
4881: LD_STRING CyrusStayInDelta
4883: PPUSH
4884: CALL_OW 39
// if Frank in selectedPeople then
4888: LD_EXP 5
4892: PUSH
4893: LD_VAR 0 4
4897: IN
4898: IFFALSE 4930
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
4900: LD_EXP 5
4904: PPUSH
4905: LD_EXP 21
4909: PUSH
4910: LD_STRING Frank
4912: STR
4913: PPUSH
4914: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
4918: LD_INT 1
4920: PPUSH
4921: LD_STRING FrankIn06
4923: PPUSH
4924: CALL_OW 39
// end else
4928: GO 4951
// if IsOk ( Frank ) then
4930: LD_EXP 5
4934: PPUSH
4935: CALL_OW 302
4939: IFFALSE 4951
// SaveVariable ( 1 , FrankStayInDelta ) ;
4941: LD_INT 1
4943: PPUSH
4944: LD_STRING FrankStayInDelta
4946: PPUSH
4947: CALL_OW 39
// if Brown in selectedPeople then
4951: LD_EXP 8
4955: PUSH
4956: LD_VAR 0 4
4960: IN
4961: IFFALSE 4993
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
4963: LD_EXP 8
4967: PPUSH
4968: LD_EXP 21
4972: PUSH
4973: LD_STRING Brown
4975: STR
4976: PPUSH
4977: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
4981: LD_INT 1
4983: PPUSH
4984: LD_STRING BrownIn06
4986: PPUSH
4987: CALL_OW 39
// end else
4991: GO 5014
// if IsOk ( Brown ) then
4993: LD_EXP 8
4997: PPUSH
4998: CALL_OW 302
5002: IFFALSE 5014
// SaveVariable ( 1 , BrownStayInDelta ) ;
5004: LD_INT 1
5006: PPUSH
5007: LD_STRING BrownStayInDelta
5009: PPUSH
5010: CALL_OW 39
// if Donaldson in selectedPeople then
5014: LD_EXP 9
5018: PUSH
5019: LD_VAR 0 4
5023: IN
5024: IFFALSE 5056
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5026: LD_EXP 9
5030: PPUSH
5031: LD_EXP 21
5035: PUSH
5036: LD_STRING Donaldson
5038: STR
5039: PPUSH
5040: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5044: LD_INT 1
5046: PPUSH
5047: LD_STRING DonaldsonIn06
5049: PPUSH
5050: CALL_OW 39
// end else
5054: GO 5077
// if IsOk ( Donaldson ) then
5056: LD_EXP 9
5060: PPUSH
5061: CALL_OW 302
5065: IFFALSE 5077
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5067: LD_INT 1
5069: PPUSH
5070: LD_STRING DonaldsonStayInDelta
5072: PPUSH
5073: CALL_OW 39
// if Gladstone in selectedPeople then
5077: LD_EXP 2
5081: PUSH
5082: LD_VAR 0 4
5086: IN
5087: IFFALSE 5119
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5089: LD_EXP 2
5093: PPUSH
5094: LD_EXP 21
5098: PUSH
5099: LD_STRING Gladstone
5101: STR
5102: PPUSH
5103: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
5107: LD_INT 1
5109: PPUSH
5110: LD_STRING GladstoneIn06
5112: PPUSH
5113: CALL_OW 39
// end else
5117: GO 5140
// if IsOk ( Gladstone ) then
5119: LD_EXP 2
5123: PPUSH
5124: CALL_OW 302
5128: IFFALSE 5140
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5130: LD_INT 1
5132: PPUSH
5133: LD_STRING GladstoneStayInDelta
5135: PPUSH
5136: CALL_OW 39
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
5140: LD_INT 22
5142: PUSH
5143: LD_INT 1
5145: PUSH
5146: EMPTY
5147: LIST
5148: LIST
5149: PUSH
5150: LD_INT 21
5152: PUSH
5153: LD_INT 1
5155: PUSH
5156: EMPTY
5157: LIST
5158: LIST
5159: PUSH
5160: EMPTY
5161: LIST
5162: LIST
5163: PPUSH
5164: CALL_OW 69
5168: PPUSH
5169: LD_INT 4
5171: PPUSH
5172: CALL_OW 235
// for i in selectedPeople do
5176: LD_ADDR_VAR 0 2
5180: PUSH
5181: LD_VAR 0 4
5185: PUSH
5186: FOR_IN
5187: IFFALSE 5203
// SetSide ( i , 1 ) ;
5189: LD_VAR 0 2
5193: PPUSH
5194: LD_INT 1
5196: PPUSH
5197: CALL_OW 235
5201: GO 5186
5203: POP
5204: POP
// for i in yourApemans do
5205: LD_ADDR_VAR 0 2
5209: PUSH
5210: LD_EXP 13
5214: PUSH
5215: FOR_IN
5216: IFFALSE 5232
// SetSide ( i , 1 ) ;
5218: LD_VAR 0 2
5222: PPUSH
5223: LD_INT 1
5225: PPUSH
5226: CALL_OW 235
5230: GO 5215
5232: POP
5233: POP
// SetSide ( JMM , 1 ) ;
5234: LD_EXP 1
5238: PPUSH
5239: LD_INT 1
5241: PPUSH
5242: CALL_OW 235
// SetSkill ( yourApemans , 2 , 5 ) ;
5246: LD_EXP 13
5250: PPUSH
5251: LD_INT 2
5253: PPUSH
5254: LD_INT 5
5256: PPUSH
5257: CALL_OW 237
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5261: LD_EXP 13
5265: PPUSH
5266: LD_STRING ApeIn06
5268: PPUSH
5269: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone ] , OthersIn06 ) ;
5273: LD_INT 22
5275: PUSH
5276: LD_INT 1
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: PUSH
5283: LD_INT 21
5285: PUSH
5286: LD_INT 1
5288: PUSH
5289: EMPTY
5290: LIST
5291: LIST
5292: PUSH
5293: LD_INT 2
5295: PUSH
5296: LD_INT 25
5298: PUSH
5299: LD_INT 1
5301: PUSH
5302: EMPTY
5303: LIST
5304: LIST
5305: PUSH
5306: LD_INT 25
5308: PUSH
5309: LD_INT 2
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: PUSH
5316: LD_INT 25
5318: PUSH
5319: LD_INT 3
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: PUSH
5326: LD_INT 25
5328: PUSH
5329: LD_INT 4
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: PUSH
5336: EMPTY
5337: LIST
5338: LIST
5339: LIST
5340: LIST
5341: LIST
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: LIST
5347: PPUSH
5348: CALL_OW 69
5352: PUSH
5353: LD_EXP 1
5357: PUSH
5358: LD_EXP 4
5362: PUSH
5363: LD_EXP 6
5367: PUSH
5368: LD_EXP 7
5372: PUSH
5373: LD_EXP 5
5377: PUSH
5378: LD_EXP 8
5382: PUSH
5383: LD_EXP 9
5387: PUSH
5388: LD_EXP 2
5392: PUSH
5393: EMPTY
5394: LIST
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: LIST
5400: LIST
5401: LIST
5402: DIFF
5403: PPUSH
5404: LD_STRING OthersIn06
5406: PPUSH
5407: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff randomsDelta ^ DeltaDoctor , OthersStayInDelta ) ;
5411: LD_INT 22
5413: PUSH
5414: LD_INT 4
5416: PUSH
5417: EMPTY
5418: LIST
5419: LIST
5420: PUSH
5421: LD_INT 2
5423: PUSH
5424: LD_INT 25
5426: PUSH
5427: LD_INT 1
5429: PUSH
5430: EMPTY
5431: LIST
5432: LIST
5433: PUSH
5434: LD_INT 25
5436: PUSH
5437: LD_INT 2
5439: PUSH
5440: EMPTY
5441: LIST
5442: LIST
5443: PUSH
5444: LD_INT 25
5446: PUSH
5447: LD_INT 3
5449: PUSH
5450: EMPTY
5451: LIST
5452: LIST
5453: PUSH
5454: LD_INT 25
5456: PUSH
5457: LD_INT 4
5459: PUSH
5460: EMPTY
5461: LIST
5462: LIST
5463: PUSH
5464: EMPTY
5465: LIST
5466: LIST
5467: LIST
5468: LIST
5469: LIST
5470: PUSH
5471: EMPTY
5472: LIST
5473: LIST
5474: PPUSH
5475: CALL_OW 69
5479: PUSH
5480: LD_EXP 11
5484: PUSH
5485: LD_EXP 15
5489: ADD
5490: DIFF
5491: PPUSH
5492: LD_STRING OthersStayInDelta
5494: PPUSH
5495: CALL_OW 38
// end ;
5499: LD_VAR 0 1
5503: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
5504: LD_INT 0
5506: PPUSH
5507: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
5508: LD_ADDR_VAR 0 2
5512: PUSH
5513: LD_VAR 0 1
5517: PPUSH
5518: LD_INT 1
5520: PPUSH
5521: CALL_OW 289
5525: PUSH
5526: LD_VAR 0 1
5530: PPUSH
5531: LD_INT 2
5533: PPUSH
5534: CALL_OW 289
5538: PUSH
5539: LD_VAR 0 1
5543: PPUSH
5544: LD_INT 3
5546: PPUSH
5547: CALL_OW 289
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: LIST
5556: ST_TO_ADDR
// end ; end_of_file
5557: LD_VAR 0 2
5561: RET
// on Command ( comandid ) do var i ;
5562: LD_INT 0
5564: PPUSH
// begin if comandid = 65 then
5565: LD_VAR 0 1
5569: PUSH
5570: LD_INT 65
5572: EQUAL
5573: IFFALSE 5614
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5575: LD_ADDR_VAR 0 2
5579: PUSH
5580: LD_INT 22
5582: PUSH
5583: LD_INT 1
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: PUSH
5590: EMPTY
5591: LIST
5592: PPUSH
5593: CALL_OW 69
5597: PUSH
5598: FOR_IN
5599: IFFALSE 5612
// ComStop ( i ) ;
5601: LD_VAR 0 2
5605: PPUSH
5606: CALL_OW 141
5610: GO 5598
5612: POP
5613: POP
// end ;
5614: PPOPN 2
5616: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5617: LD_INT 0
5619: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5620: LD_ADDR_VAR 0 3
5624: PUSH
5625: LD_INT 22
5627: PUSH
5628: LD_INT 1
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: PUSH
5635: LD_INT 21
5637: PUSH
5638: LD_INT 3
5640: PUSH
5641: EMPTY
5642: LIST
5643: LIST
5644: PUSH
5645: LD_INT 30
5647: PUSH
5648: LD_INT 0
5650: PUSH
5651: EMPTY
5652: LIST
5653: LIST
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: LIST
5659: PPUSH
5660: CALL_OW 69
5664: ST_TO_ADDR
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5665: LD_VAR 0 1
5669: PPUSH
5670: LD_VAR 0 3
5674: PUSH
5675: LD_INT 1
5677: ARRAY
5678: PPUSH
5679: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5683: LD_VAR 0 1
5687: PPUSH
5688: LD_INT 4
5690: PPUSH
5691: CALL_OW 235
// end ;
5695: PPOPN 3
5697: END
