// export JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Brown , Donaldson ; export others , randomsDelta ; export apemans , yourApemans ; export yourVehicles ; export DeltaDoctor ; export Harisson ; export selectedPeople ; export baseCorrect ; export cutscene ; export lab ; export resources ; export mission_prefix , mission_prefix_prev ; starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// FogOff ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 344
// baseCorrect = 0 ;
  15: LD_ADDR_EXP 18
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// cutscene = 1 ;
  23: LD_ADDR_EXP 19
  27: PUSH
  28: LD_INT 1
  30: ST_TO_ADDR
// apemans = [ ] ;
  31: LD_ADDR_EXP 12
  35: PUSH
  36: EMPTY
  37: ST_TO_ADDR
// yourApemans = [ ] ;
  38: LD_ADDR_EXP 13
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// yourVehicles = [ ] ;
  45: LD_ADDR_EXP 14
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// randomsDelta := [ ] ;
  52: LD_ADDR_EXP 11
  56: PUSH
  57: EMPTY
  58: ST_TO_ADDR
// resources = [ ] ;
  59: LD_ADDR_EXP 21
  63: PUSH
  64: EMPTY
  65: ST_TO_ADDR
// mission_prefix := 06_ ;
  66: LD_ADDR_EXP 22
  70: PUSH
  71: LD_STRING 06_
  73: ST_TO_ADDR
// mission_prefix_prev := 05_ ;
  74: LD_ADDR_EXP 23
  78: PUSH
  79: LD_STRING 05_
  81: ST_TO_ADDR
// CreateNature ;
  82: CALL 166 0 0
// PrepareDeltaBase ;
  86: CALL 2408 0 0
// LoadVehicles ;
  90: CALL 1448 0 0
// PrepareHeroes ;
  94: CALL 287 0 0
// PrepareRandoms ;
  98: CALL 1749 0 0
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 102: LD_ADDR_EXP 20
 106: PUSH
 107: LD_INT 22
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 2
 119: PUSH
 120: LD_INT 30
 122: PUSH
 123: LD_INT 6
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 30
 132: PUSH
 133: LD_INT 7
 135: PUSH
 136: EMPTY
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 30
 142: PUSH
 143: LD_INT 8
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: PPUSH
 160: CALL_OW 69
 164: ST_TO_ADDR
// end ;
 165: END
// export function CreateNature ; var i ; begin
 166: LD_INT 0
 168: PPUSH
 169: PPUSH
// uc_side := 0 ;
 170: LD_ADDR_OWVAR 20
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// uc_nation := 0 ;
 178: LD_ADDR_OWVAR 21
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// for i = 1 to 4 do
 186: LD_ADDR_VAR 0 2
 190: PUSH
 191: DOUBLE
 192: LD_INT 1
 194: DEC
 195: ST_TO_ADDR
 196: LD_INT 4
 198: PUSH
 199: FOR_TO
 200: IFFALSE 280
// begin hc_gallery :=  ;
 202: LD_ADDR_OWVAR 33
 206: PUSH
 207: LD_STRING 
 209: ST_TO_ADDR
// hc_name :=  ;
 210: LD_ADDR_OWVAR 26
 214: PUSH
 215: LD_STRING 
 217: ST_TO_ADDR
// hc_attr := [ rand ( 10 , 11 ) , rand ( 10 , 12 ) ] ;
 218: LD_ADDR_OWVAR 29
 222: PUSH
 223: LD_INT 10
 225: PPUSH
 226: LD_INT 11
 228: PPUSH
 229: CALL_OW 12
 233: PUSH
 234: LD_INT 10
 236: PPUSH
 237: LD_INT 12
 239: PPUSH
 240: CALL_OW 12
 244: PUSH
 245: EMPTY
 246: LIST
 247: LIST
 248: ST_TO_ADDR
// hc_class := class_apeman ;
 249: LD_ADDR_OWVAR 28
 253: PUSH
 254: LD_INT 12
 256: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 22 , 18 , 20 , false ) ;
 257: CALL_OW 44
 261: PPUSH
 262: LD_INT 22
 264: PPUSH
 265: LD_INT 18
 267: PPUSH
 268: LD_INT 20
 270: PPUSH
 271: LD_INT 0
 273: PPUSH
 274: CALL_OW 50
// end ;
 278: GO 199
 280: POP
 281: POP
// end ; end_of_file
 282: LD_VAR 0 1
 286: RET
// export function PrepareHeroes ; var i , tmp , ape , test ; begin
 287: LD_INT 0
 289: PPUSH
 290: PPUSH
 291: PPUSH
 292: PPUSH
 293: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
 294: LD_ADDR_VAR 0 3
 298: PUSH
 299: LD_INT 22
 301: PUSH
 302: LD_INT 1
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: PUSH
 309: LD_INT 21
 311: PUSH
 312: LD_INT 3
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: PUSH
 319: LD_INT 30
 321: PUSH
 322: LD_INT 0
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: LIST
 333: PPUSH
 334: CALL_OW 69
 338: ST_TO_ADDR
// SetBName ( tmp [ 1 ] , delta ) ;
 339: LD_VAR 0 3
 343: PUSH
 344: LD_INT 1
 346: ARRAY
 347: PPUSH
 348: LD_STRING delta
 350: PPUSH
 351: CALL_OW 500
// uc_side = 1 ;
 355: LD_ADDR_OWVAR 20
 359: PUSH
 360: LD_INT 1
 362: ST_TO_ADDR
// uc_nation = 1 ;
 363: LD_ADDR_OWVAR 21
 367: PUSH
 368: LD_INT 1
 370: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 371: LD_ADDR_EXP 1
 375: PUSH
 376: LD_STRING JMM
 378: PPUSH
 379: LD_INT 1
 381: PPUSH
 382: LD_EXP 23
 386: PPUSH
 387: CALL 23180 0 3
 391: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ,  ) ;
 392: LD_ADDR_EXP 16
 396: PUSH
 397: LD_STRING Harisson
 399: PPUSH
 400: LD_INT 0
 402: PPUSH
 403: LD_STRING 
 405: PPUSH
 406: CALL 23180 0 3
 410: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 411: LD_EXP 1
 415: PPUSH
 416: LD_VAR 0 3
 420: PUSH
 421: LD_INT 1
 423: ARRAY
 424: PPUSH
 425: CALL_OW 250
 429: PPUSH
 430: LD_VAR 0 3
 434: PUSH
 435: LD_INT 1
 437: ARRAY
 438: PPUSH
 439: CALL_OW 251
 443: PPUSH
 444: LD_INT 5
 446: PPUSH
 447: LD_INT 0
 449: PPUSH
 450: CALL_OW 50
// SetClass ( JMM , 1 ) ;
 454: LD_EXP 1
 458: PPUSH
 459: LD_INT 1
 461: PPUSH
 462: CALL_OW 336
// Gladstone = PrepareUnit ( Gladstone , true , mission_prefix_prev ) ;
 466: LD_ADDR_EXP 2
 470: PUSH
 471: LD_STRING Gladstone
 473: PPUSH
 474: LD_INT 1
 476: PPUSH
 477: LD_EXP 23
 481: PPUSH
 482: CALL 23180 0 3
 486: ST_TO_ADDR
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 487: LD_EXP 2
 491: PPUSH
 492: LD_VAR 0 3
 496: PUSH
 497: LD_INT 1
 499: ARRAY
 500: PPUSH
 501: CALL_OW 250
 505: PPUSH
 506: LD_VAR 0 3
 510: PUSH
 511: LD_INT 1
 513: ARRAY
 514: PPUSH
 515: CALL_OW 251
 519: PPUSH
 520: LD_INT 5
 522: PPUSH
 523: LD_INT 0
 525: PPUSH
 526: CALL_OW 50
// SetClass ( Gladstone , 4 ) ;
 530: LD_EXP 2
 534: PPUSH
 535: LD_INT 4
 537: PPUSH
 538: CALL_OW 336
// Denis = PrepareUnit ( Denis , true , mission_prefix_prev ) ;
 542: LD_ADDR_EXP 3
 546: PUSH
 547: LD_STRING Denis
 549: PPUSH
 550: LD_INT 1
 552: PPUSH
 553: LD_EXP 23
 557: PPUSH
 558: CALL 23180 0 3
 562: ST_TO_ADDR
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 563: LD_EXP 3
 567: PPUSH
 568: LD_VAR 0 3
 572: PUSH
 573: LD_INT 1
 575: ARRAY
 576: PPUSH
 577: CALL_OW 250
 581: PPUSH
 582: LD_VAR 0 3
 586: PUSH
 587: LD_INT 1
 589: ARRAY
 590: PPUSH
 591: CALL_OW 251
 595: PPUSH
 596: LD_INT 5
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: CALL_OW 50
// SetClass ( Denis , 4 ) ;
 606: LD_EXP 3
 610: PPUSH
 611: LD_INT 4
 613: PPUSH
 614: CALL_OW 336
// if LoadVariable ( FrankInDelta , 0 ) = 1 then
 618: LD_STRING FrankInDelta
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 30
 628: PUSH
 629: LD_INT 1
 631: EQUAL
 632: IFFALSE 710
// begin Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 634: LD_ADDR_EXP 5
 638: PUSH
 639: LD_STRING Frank
 641: PPUSH
 642: LD_INT 1
 644: PPUSH
 645: LD_EXP 23
 649: PPUSH
 650: CALL 23180 0 3
 654: ST_TO_ADDR
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 655: LD_EXP 5
 659: PPUSH
 660: LD_VAR 0 3
 664: PUSH
 665: LD_INT 1
 667: ARRAY
 668: PPUSH
 669: CALL_OW 250
 673: PPUSH
 674: LD_VAR 0 3
 678: PUSH
 679: LD_INT 1
 681: ARRAY
 682: PPUSH
 683: CALL_OW 251
 687: PPUSH
 688: LD_INT 5
 690: PPUSH
 691: LD_INT 0
 693: PPUSH
 694: CALL_OW 50
// SetClass ( Frank , 1 ) ;
 698: LD_EXP 5
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: CALL_OW 336
// end ; if LoadVariable ( LisaInDelta , 0 ) = 1 then
 710: LD_STRING LisaInDelta
 712: PPUSH
 713: LD_INT 0
 715: PPUSH
 716: CALL_OW 30
 720: PUSH
 721: LD_INT 1
 723: EQUAL
 724: IFFALSE 802
// begin Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 726: LD_ADDR_EXP 4
 730: PUSH
 731: LD_STRING Lisa
 733: PPUSH
 734: LD_INT 1
 736: PPUSH
 737: LD_EXP 23
 741: PPUSH
 742: CALL 23180 0 3
 746: ST_TO_ADDR
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 747: LD_EXP 4
 751: PPUSH
 752: LD_VAR 0 3
 756: PUSH
 757: LD_INT 1
 759: ARRAY
 760: PPUSH
 761: CALL_OW 250
 765: PPUSH
 766: LD_VAR 0 3
 770: PUSH
 771: LD_INT 1
 773: ARRAY
 774: PPUSH
 775: CALL_OW 251
 779: PPUSH
 780: LD_INT 5
 782: PPUSH
 783: LD_INT 0
 785: PPUSH
 786: CALL_OW 50
// SetClass ( Lisa , 1 ) ;
 790: LD_EXP 4
 794: PPUSH
 795: LD_INT 1
 797: PPUSH
 798: CALL_OW 336
// end ; if LoadVariable ( BobbyInDelta , 0 ) = 1 then
 802: LD_STRING BobbyInDelta
 804: PPUSH
 805: LD_INT 0
 807: PPUSH
 808: CALL_OW 30
 812: PUSH
 813: LD_INT 1
 815: EQUAL
 816: IFFALSE 894
// begin Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 818: LD_ADDR_EXP 6
 822: PUSH
 823: LD_STRING Bobby
 825: PPUSH
 826: LD_INT 1
 828: PPUSH
 829: LD_EXP 23
 833: PPUSH
 834: CALL 23180 0 3
 838: ST_TO_ADDR
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 839: LD_EXP 6
 843: PPUSH
 844: LD_VAR 0 3
 848: PUSH
 849: LD_INT 1
 851: ARRAY
 852: PPUSH
 853: CALL_OW 250
 857: PPUSH
 858: LD_VAR 0 3
 862: PUSH
 863: LD_INT 1
 865: ARRAY
 866: PPUSH
 867: CALL_OW 251
 871: PPUSH
 872: LD_INT 5
 874: PPUSH
 875: LD_INT 0
 877: PPUSH
 878: CALL_OW 50
// SetClass ( Bobby , 1 ) ;
 882: LD_EXP 6
 886: PPUSH
 887: LD_INT 1
 889: PPUSH
 890: CALL_OW 336
// end ; if LoadVariable ( CyrusInDelta , 0 ) = 1 then
 894: LD_STRING CyrusInDelta
 896: PPUSH
 897: LD_INT 0
 899: PPUSH
 900: CALL_OW 30
 904: PUSH
 905: LD_INT 1
 907: EQUAL
 908: IFFALSE 986
// begin Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 910: LD_ADDR_EXP 7
 914: PUSH
 915: LD_STRING Cyrus
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: LD_EXP 23
 925: PPUSH
 926: CALL 23180 0 3
 930: ST_TO_ADDR
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
 931: LD_EXP 7
 935: PPUSH
 936: LD_VAR 0 3
 940: PUSH
 941: LD_INT 1
 943: ARRAY
 944: PPUSH
 945: CALL_OW 250
 949: PPUSH
 950: LD_VAR 0 3
 954: PUSH
 955: LD_INT 1
 957: ARRAY
 958: PPUSH
 959: CALL_OW 251
 963: PPUSH
 964: LD_INT 5
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 50
// SetClass ( Cyrus , 1 ) ;
 974: LD_EXP 7
 978: PPUSH
 979: LD_INT 1
 981: PPUSH
 982: CALL_OW 336
// end ; if LoadVariable ( DonaldsonInDelta , 0 ) = 1 then
 986: LD_STRING DonaldsonInDelta
 988: PPUSH
 989: LD_INT 0
 991: PPUSH
 992: CALL_OW 30
 996: PUSH
 997: LD_INT 1
 999: EQUAL
1000: IFFALSE 1078
// begin Donaldson = PrepareUnit ( Donaldson , true , mission_prefix_prev ) ;
1002: LD_ADDR_EXP 9
1006: PUSH
1007: LD_STRING Donaldson
1009: PPUSH
1010: LD_INT 1
1012: PPUSH
1013: LD_EXP 23
1017: PPUSH
1018: CALL 23180 0 3
1022: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1023: LD_EXP 9
1027: PPUSH
1028: LD_VAR 0 3
1032: PUSH
1033: LD_INT 1
1035: ARRAY
1036: PPUSH
1037: CALL_OW 250
1041: PPUSH
1042: LD_VAR 0 3
1046: PUSH
1047: LD_INT 1
1049: ARRAY
1050: PPUSH
1051: CALL_OW 251
1055: PPUSH
1056: LD_INT 5
1058: PPUSH
1059: LD_INT 0
1061: PPUSH
1062: CALL_OW 50
// SetClass ( Donaldson , 1 ) ;
1066: LD_EXP 9
1070: PPUSH
1071: LD_INT 1
1073: PPUSH
1074: CALL_OW 336
// end ; if LoadVariable ( BrownInDelta , 0 ) = 1 then
1078: LD_STRING BrownInDelta
1080: PPUSH
1081: LD_INT 0
1083: PPUSH
1084: CALL_OW 30
1088: PUSH
1089: LD_INT 1
1091: EQUAL
1092: IFFALSE 1170
// begin Brown = PrepareUnit ( Brown , true , mission_prefix_prev ) ;
1094: LD_ADDR_EXP 8
1098: PUSH
1099: LD_STRING Brown
1101: PPUSH
1102: LD_INT 1
1104: PPUSH
1105: LD_EXP 23
1109: PPUSH
1110: CALL 23180 0 3
1114: ST_TO_ADDR
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
1115: LD_EXP 8
1119: PPUSH
1120: LD_VAR 0 3
1124: PUSH
1125: LD_INT 1
1127: ARRAY
1128: PPUSH
1129: CALL_OW 250
1133: PPUSH
1134: LD_VAR 0 3
1138: PUSH
1139: LD_INT 1
1141: ARRAY
1142: PPUSH
1143: CALL_OW 251
1147: PPUSH
1148: LD_INT 5
1150: PPUSH
1151: LD_INT 0
1153: PPUSH
1154: CALL_OW 50
// SetClass ( Brown , 2 ) ;
1158: LD_EXP 8
1162: PPUSH
1163: LD_INT 2
1165: PPUSH
1166: CALL_OW 336
// end ; others = CreateCharacterSet ( othersInDelta ) ;
1170: LD_ADDR_EXP 10
1174: PUSH
1175: LD_STRING othersInDelta
1177: PPUSH
1178: CALL_OW 31
1182: ST_TO_ADDR
// for i in others do
1183: LD_ADDR_VAR 0 2
1187: PUSH
1188: LD_EXP 10
1192: PUSH
1193: FOR_IN
1194: IFFALSE 1241
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1196: LD_VAR 0 2
1200: PPUSH
1201: LD_VAR 0 3
1205: PUSH
1206: LD_INT 1
1208: ARRAY
1209: PPUSH
1210: CALL_OW 250
1214: PPUSH
1215: LD_VAR 0 3
1219: PUSH
1220: LD_INT 1
1222: ARRAY
1223: PPUSH
1224: CALL_OW 251
1228: PPUSH
1229: LD_INT 35
1231: PPUSH
1232: LD_INT 0
1234: PPUSH
1235: CALL_OW 50
1239: GO 1193
1241: POP
1242: POP
// apemans = CreateCharacterSet ( apeInDelta ) ;
1243: LD_ADDR_EXP 12
1247: PUSH
1248: LD_STRING apeInDelta
1250: PPUSH
1251: CALL_OW 31
1255: ST_TO_ADDR
// uc_nation = 0 ;
1256: LD_ADDR_OWVAR 21
1260: PUSH
1261: LD_INT 0
1263: ST_TO_ADDR
// if apemans > 5 then
1264: LD_EXP 12
1268: PUSH
1269: LD_INT 5
1271: GREATER
1272: IFFALSE 1367
// begin for i := 1 to 5 do
1274: LD_ADDR_VAR 0 2
1278: PUSH
1279: DOUBLE
1280: LD_INT 1
1282: DEC
1283: ST_TO_ADDR
1284: LD_INT 5
1286: PUSH
1287: FOR_TO
1288: IFFALSE 1363
// begin PlaceUnitXYR ( apemans [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1290: LD_EXP 12
1294: PUSH
1295: LD_VAR 0 2
1299: ARRAY
1300: PPUSH
1301: LD_VAR 0 3
1305: PUSH
1306: LD_INT 1
1308: ARRAY
1309: PPUSH
1310: CALL_OW 250
1314: PPUSH
1315: LD_VAR 0 3
1319: PUSH
1320: LD_INT 1
1322: ARRAY
1323: PPUSH
1324: CALL_OW 251
1328: PPUSH
1329: LD_INT 50
1331: PPUSH
1332: LD_INT 0
1334: PPUSH
1335: CALL_OW 50
// yourApemans = yourApemans ^ apemans [ i ] ;
1339: LD_ADDR_EXP 13
1343: PUSH
1344: LD_EXP 13
1348: PUSH
1349: LD_EXP 12
1353: PUSH
1354: LD_VAR 0 2
1358: ARRAY
1359: ADD
1360: ST_TO_ADDR
// end ;
1361: GO 1287
1363: POP
1364: POP
// end else
1365: GO 1443
// begin for i in apemans do
1367: LD_ADDR_VAR 0 2
1371: PUSH
1372: LD_EXP 12
1376: PUSH
1377: FOR_IN
1378: IFFALSE 1441
// begin PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 50 , false ) ;
1380: LD_VAR 0 2
1384: PPUSH
1385: LD_VAR 0 3
1389: PUSH
1390: LD_INT 1
1392: ARRAY
1393: PPUSH
1394: CALL_OW 250
1398: PPUSH
1399: LD_VAR 0 3
1403: PUSH
1404: LD_INT 1
1406: ARRAY
1407: PPUSH
1408: CALL_OW 251
1412: PPUSH
1413: LD_INT 50
1415: PPUSH
1416: LD_INT 0
1418: PPUSH
1419: CALL_OW 50
// yourApemans = yourApemans ^ i ;
1423: LD_ADDR_EXP 13
1427: PUSH
1428: LD_EXP 13
1432: PUSH
1433: LD_VAR 0 2
1437: ADD
1438: ST_TO_ADDR
// end ;
1439: GO 1377
1441: POP
1442: POP
// end ; end ;
1443: LD_VAR 0 1
1447: RET
// export function LoadVehicles ; var i , veh , tmp , vehicles ; begin
1448: LD_INT 0
1450: PPUSH
1451: PPUSH
1452: PPUSH
1453: PPUSH
1454: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1455: LD_ADDR_VAR 0 4
1459: PUSH
1460: LD_INT 22
1462: PUSH
1463: LD_INT 1
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PUSH
1470: LD_INT 21
1472: PUSH
1473: LD_INT 3
1475: PUSH
1476: EMPTY
1477: LIST
1478: LIST
1479: PUSH
1480: LD_INT 30
1482: PUSH
1483: LD_INT 0
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: LIST
1494: PPUSH
1495: CALL_OW 69
1499: ST_TO_ADDR
// uc_side = 1 ;
1500: LD_ADDR_OWVAR 20
1504: PUSH
1505: LD_INT 1
1507: ST_TO_ADDR
// vehicles = LoadVariable ( vehiclesInDelta , [ ] ) ;
1508: LD_ADDR_VAR 0 5
1512: PUSH
1513: LD_STRING vehiclesInDelta
1515: PPUSH
1516: EMPTY
1517: PPUSH
1518: CALL_OW 30
1522: ST_TO_ADDR
// for i = 1 to vehicles do
1523: LD_ADDR_VAR 0 2
1527: PUSH
1528: DOUBLE
1529: LD_INT 1
1531: DEC
1532: ST_TO_ADDR
1533: LD_VAR 0 5
1537: PUSH
1538: FOR_TO
1539: IFFALSE 1742
// begin if vehicles [ i + 4 ] = 11 or vehicles [ i ] = 3 then
1541: LD_VAR 0 5
1545: PUSH
1546: LD_VAR 0 2
1550: PUSH
1551: LD_INT 4
1553: PLUS
1554: ARRAY
1555: PUSH
1556: LD_INT 11
1558: EQUAL
1559: PUSH
1560: LD_VAR 0 5
1564: PUSH
1565: LD_VAR 0 2
1569: ARRAY
1570: PUSH
1571: LD_INT 3
1573: EQUAL
1574: OR
1575: IFFALSE 1726
// begin uc_nation = vehicles [ i ] ;
1577: LD_ADDR_OWVAR 21
1581: PUSH
1582: LD_VAR 0 5
1586: PUSH
1587: LD_VAR 0 2
1591: ARRAY
1592: ST_TO_ADDR
// vc_chassis = vehicles [ i + 1 ] ;
1593: LD_ADDR_OWVAR 37
1597: PUSH
1598: LD_VAR 0 5
1602: PUSH
1603: LD_VAR 0 2
1607: PUSH
1608: LD_INT 1
1610: PLUS
1611: ARRAY
1612: ST_TO_ADDR
// vc_engine = vehicles [ i + 2 ] ;
1613: LD_ADDR_OWVAR 39
1617: PUSH
1618: LD_VAR 0 5
1622: PUSH
1623: LD_VAR 0 2
1627: PUSH
1628: LD_INT 2
1630: PLUS
1631: ARRAY
1632: ST_TO_ADDR
// vc_control = vehicles [ i + 3 ] ;
1633: LD_ADDR_OWVAR 38
1637: PUSH
1638: LD_VAR 0 5
1642: PUSH
1643: LD_VAR 0 2
1647: PUSH
1648: LD_INT 3
1650: PLUS
1651: ARRAY
1652: ST_TO_ADDR
// vc_weapon = vehicles [ i + 4 ] ;
1653: LD_ADDR_OWVAR 40
1657: PUSH
1658: LD_VAR 0 5
1662: PUSH
1663: LD_VAR 0 2
1667: PUSH
1668: LD_INT 4
1670: PLUS
1671: ARRAY
1672: ST_TO_ADDR
// veh = CreateVehicle ;
1673: LD_ADDR_VAR 0 3
1677: PUSH
1678: CALL_OW 45
1682: ST_TO_ADDR
// PlaceUnitXYR ( veh , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 40 , false ) ;
1683: LD_VAR 0 3
1687: PPUSH
1688: LD_VAR 0 4
1692: PUSH
1693: LD_INT 1
1695: ARRAY
1696: PPUSH
1697: CALL_OW 250
1701: PPUSH
1702: LD_VAR 0 4
1706: PUSH
1707: LD_INT 1
1709: ARRAY
1710: PPUSH
1711: CALL_OW 251
1715: PPUSH
1716: LD_INT 40
1718: PPUSH
1719: LD_INT 0
1721: PPUSH
1722: CALL_OW 50
// end ; i = i + 4 ;
1726: LD_ADDR_VAR 0 2
1730: PUSH
1731: LD_VAR 0 2
1735: PUSH
1736: LD_INT 4
1738: PLUS
1739: ST_TO_ADDR
// end ;
1740: GO 1538
1742: POP
1743: POP
// end ;
1744: LD_VAR 0 1
1748: RET
// export function PrepareRandoms ; var i , un , tmp , filter ; begin
1749: LD_INT 0
1751: PPUSH
1752: PPUSH
1753: PPUSH
1754: PPUSH
1755: PPUSH
// uc_side = 1 ;
1756: LD_ADDR_OWVAR 20
1760: PUSH
1761: LD_INT 1
1763: ST_TO_ADDR
// uc_nation = 1 ;
1764: LD_ADDR_OWVAR 21
1768: PUSH
1769: LD_INT 1
1771: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
1772: LD_ADDR_VAR 0 4
1776: PUSH
1777: LD_INT 22
1779: PUSH
1780: LD_INT 1
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: PUSH
1787: LD_INT 21
1789: PUSH
1790: LD_INT 3
1792: PUSH
1793: EMPTY
1794: LIST
1795: LIST
1796: PUSH
1797: LD_INT 30
1799: PUSH
1800: LD_INT 0
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: LIST
1811: PPUSH
1812: CALL_OW 69
1816: ST_TO_ADDR
// if FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] then
1817: LD_INT 22
1819: PUSH
1820: LD_INT 1
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PUSH
1827: LD_INT 25
1829: PUSH
1830: LD_INT 4
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 26
1839: PUSH
1840: LD_INT 1
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: LIST
1851: PUSH
1852: EMPTY
1853: LIST
1854: PPUSH
1855: CALL_OW 69
1859: PUSH
1860: LD_EXP 1
1864: PUSH
1865: LD_EXP 7
1869: PUSH
1870: LD_EXP 6
1874: PUSH
1875: LD_EXP 5
1879: PUSH
1880: LD_EXP 2
1884: PUSH
1885: LD_EXP 3
1889: PUSH
1890: LD_EXP 8
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: DIFF
1904: IFFALSE 2005
// deltaDoctor := ( FilterAllunits ( [ [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ) [ 1 ] else
1906: LD_ADDR_EXP 15
1910: PUSH
1911: LD_INT 22
1913: PUSH
1914: LD_INT 1
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PUSH
1921: LD_INT 25
1923: PUSH
1924: LD_INT 4
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PUSH
1931: LD_INT 26
1933: PUSH
1934: LD_INT 1
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: LIST
1945: PUSH
1946: EMPTY
1947: LIST
1948: PPUSH
1949: CALL_OW 69
1953: PUSH
1954: LD_EXP 1
1958: PUSH
1959: LD_EXP 7
1963: PUSH
1964: LD_EXP 6
1968: PUSH
1969: LD_EXP 5
1973: PUSH
1974: LD_EXP 2
1978: PUSH
1979: LD_EXP 3
1983: PUSH
1984: LD_EXP 8
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: DIFF
1998: PUSH
1999: LD_INT 1
2001: ARRAY
2002: ST_TO_ADDR
2003: GO 2152
// begin filter := FilterAllunits ( [ [ [ f_side , 1 ] , [ f_sex , sex_male ] ] ] ) diff [ JMM , Cyrus , Bobby , Frank , Gladstone , Denis , Brown ] ;
2005: LD_ADDR_VAR 0 5
2009: PUSH
2010: LD_INT 22
2012: PUSH
2013: LD_INT 1
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 26
2022: PUSH
2023: LD_INT 1
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PUSH
2034: EMPTY
2035: LIST
2036: PPUSH
2037: CALL_OW 69
2041: PUSH
2042: LD_EXP 1
2046: PUSH
2047: LD_EXP 7
2051: PUSH
2052: LD_EXP 6
2056: PUSH
2057: LD_EXP 5
2061: PUSH
2062: LD_EXP 2
2066: PUSH
2067: LD_EXP 3
2071: PUSH
2072: LD_EXP 8
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: DIFF
2086: ST_TO_ADDR
// if filter then
2087: LD_VAR 0 5
2091: IFFALSE 2152
// for i in filter do
2093: LD_ADDR_VAR 0 2
2097: PUSH
2098: LD_VAR 0 5
2102: PUSH
2103: FOR_IN
2104: IFFALSE 2150
// if GetSkill ( i , 4 ) >= 4 then
2106: LD_VAR 0 2
2110: PPUSH
2111: LD_INT 4
2113: PPUSH
2114: CALL_OW 259
2118: PUSH
2119: LD_INT 4
2121: GREATEREQUAL
2122: IFFALSE 2148
// begin deltaDoctor := i ;
2124: LD_ADDR_EXP 15
2128: PUSH
2129: LD_VAR 0 2
2133: ST_TO_ADDR
// SetClass ( deltaDoctor , 4 ) ;
2134: LD_EXP 15
2138: PPUSH
2139: LD_INT 4
2141: PPUSH
2142: CALL_OW 336
// break ;
2146: GO 2150
// end ;
2148: GO 2103
2150: POP
2151: POP
// end ; for i = 1 to 7 do
2152: LD_ADDR_VAR 0 2
2156: PUSH
2157: DOUBLE
2158: LD_INT 1
2160: DEC
2161: ST_TO_ADDR
2162: LD_INT 7
2164: PUSH
2165: FOR_TO
2166: IFFALSE 2303
// begin hc_gallery =  ;
2168: LD_ADDR_OWVAR 33
2172: PUSH
2173: LD_STRING 
2175: ST_TO_ADDR
// hc_name =  ;
2176: LD_ADDR_OWVAR 26
2180: PUSH
2181: LD_STRING 
2183: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) ) ;
2184: LD_INT 0
2186: PPUSH
2187: LD_INT 1
2189: PUSH
2190: LD_INT 2
2192: PUSH
2193: LD_INT 3
2195: PUSH
2196: LD_INT 4
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: PUSH
2205: LD_INT 1
2207: PPUSH
2208: LD_INT 4
2210: PPUSH
2211: CALL_OW 12
2215: ARRAY
2216: PPUSH
2217: LD_INT 3
2219: PPUSH
2220: LD_INT 5
2222: PPUSH
2223: CALL_OW 12
2227: PPUSH
2228: CALL_OW 380
// un = CreateHuman ;
2232: LD_ADDR_VAR 0 3
2236: PUSH
2237: CALL_OW 44
2241: ST_TO_ADDR
// randomsDelta := randomsDelta ^ un ;
2242: LD_ADDR_EXP 11
2246: PUSH
2247: LD_EXP 11
2251: PUSH
2252: LD_VAR 0 3
2256: ADD
2257: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2258: LD_VAR 0 3
2262: PPUSH
2263: LD_VAR 0 4
2267: PUSH
2268: LD_INT 1
2270: ARRAY
2271: PPUSH
2272: CALL_OW 250
2276: PPUSH
2277: LD_VAR 0 4
2281: PUSH
2282: LD_INT 1
2284: ARRAY
2285: PPUSH
2286: CALL_OW 251
2290: PPUSH
2291: LD_INT 15
2293: PPUSH
2294: LD_INT 0
2296: PPUSH
2297: CALL_OW 50
// end ;
2301: GO 2165
2303: POP
2304: POP
// if deltaDoctor then
2305: LD_EXP 15
2309: IFFALSE 2313
// exit ;
2311: GO 2403
// hc_gallery = Dawkins ;
2313: LD_ADDR_OWVAR 33
2317: PUSH
2318: LD_STRING Dawkins
2320: ST_TO_ADDR
// hc_face_number := 1 ;
2321: LD_ADDR_OWVAR 34
2325: PUSH
2326: LD_INT 1
2328: ST_TO_ADDR
// hc_name = Dr. Adam Charles Dawkins ;
2329: LD_ADDR_OWVAR 26
2333: PUSH
2334: LD_STRING Dr. Adam Charles Dawkins
2336: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 6 ) ;
2337: LD_INT 1
2339: PPUSH
2340: LD_INT 4
2342: PPUSH
2343: LD_INT 6
2345: PPUSH
2346: CALL_OW 380
// deltaDoctor = CreateHuman ;
2350: LD_ADDR_EXP 15
2354: PUSH
2355: CALL_OW 44
2359: ST_TO_ADDR
// PlaceUnitXYR ( deltaDoctor , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 5 , false ) ;
2360: LD_EXP 15
2364: PPUSH
2365: LD_VAR 0 4
2369: PUSH
2370: LD_INT 1
2372: ARRAY
2373: PPUSH
2374: CALL_OW 250
2378: PPUSH
2379: LD_VAR 0 4
2383: PUSH
2384: LD_INT 1
2386: ARRAY
2387: PPUSH
2388: CALL_OW 251
2392: PPUSH
2393: LD_INT 5
2395: PPUSH
2396: LD_INT 0
2398: PPUSH
2399: CALL_OW 50
// end ; end_of_file
2403: LD_VAR 0 1
2407: RET
// export function PrepareDeltaBase ; var i , j , building , buildings , lab , tmp ; begin
2408: LD_INT 0
2410: PPUSH
2411: PPUSH
2412: PPUSH
2413: PPUSH
2414: PPUSH
2415: PPUSH
2416: PPUSH
// buildings = LoadVariable ( buildingsInDelta , [ ] ) ;
2417: LD_ADDR_VAR 0 5
2421: PUSH
2422: LD_STRING buildingsInDelta
2424: PPUSH
2425: EMPTY
2426: PPUSH
2427: CALL_OW 30
2431: ST_TO_ADDR
// SetResourceVisibility ( 68 , 40 , 1 ) ;
2432: LD_INT 68
2434: PPUSH
2435: LD_INT 40
2437: PPUSH
2438: LD_INT 1
2440: PPUSH
2441: CALL_OW 441
// uc_side = 1 ;
2445: LD_ADDR_OWVAR 20
2449: PUSH
2450: LD_INT 1
2452: ST_TO_ADDR
// uc_nation = 1 ;
2453: LD_ADDR_OWVAR 21
2457: PUSH
2458: LD_INT 1
2460: ST_TO_ADDR
// for i = 1 to buildings do
2461: LD_ADDR_VAR 0 2
2465: PUSH
2466: DOUBLE
2467: LD_INT 1
2469: DEC
2470: ST_TO_ADDR
2471: LD_VAR 0 5
2475: PUSH
2476: FOR_TO
2477: IFFALSE 2775
// begin bc_type = buildings [ i ] [ 1 ] ;
2479: LD_ADDR_OWVAR 42
2483: PUSH
2484: LD_VAR 0 5
2488: PUSH
2489: LD_VAR 0 2
2493: ARRAY
2494: PUSH
2495: LD_INT 1
2497: ARRAY
2498: ST_TO_ADDR
// bc_level = buildings [ i ] [ 2 ] ;
2499: LD_ADDR_OWVAR 43
2503: PUSH
2504: LD_VAR 0 5
2508: PUSH
2509: LD_VAR 0 2
2513: ARRAY
2514: PUSH
2515: LD_INT 2
2517: ARRAY
2518: ST_TO_ADDR
// if bc_type = b_lab then
2519: LD_OWVAR 42
2523: PUSH
2524: LD_INT 6
2526: EQUAL
2527: IFFALSE 2545
// begin bc_kind1 = b_lab_basic ;
2529: LD_ADDR_OWVAR 44
2533: PUSH
2534: LD_INT 9
2536: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2537: LD_ADDR_OWVAR 45
2541: PUSH
2542: LD_INT 9
2544: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
2545: LD_OWVAR 42
2549: PUSH
2550: LD_INT 7
2552: EQUAL
2553: PUSH
2554: LD_OWVAR 42
2558: PUSH
2559: LD_INT 8
2561: EQUAL
2562: OR
2563: IFFALSE 2679
// begin if buildings [ i ] [ 6 ] then
2565: LD_VAR 0 5
2569: PUSH
2570: LD_VAR 0 2
2574: ARRAY
2575: PUSH
2576: LD_INT 6
2578: ARRAY
2579: IFFALSE 2601
// bc_kind1 = buildings [ i ] [ 6 ] ;
2581: LD_ADDR_OWVAR 44
2585: PUSH
2586: LD_VAR 0 5
2590: PUSH
2591: LD_VAR 0 2
2595: ARRAY
2596: PUSH
2597: LD_INT 6
2599: ARRAY
2600: ST_TO_ADDR
// if buildings [ i ] [ 7 ] then
2601: LD_VAR 0 5
2605: PUSH
2606: LD_VAR 0 2
2610: ARRAY
2611: PUSH
2612: LD_INT 7
2614: ARRAY
2615: IFFALSE 2637
// bc_kind2 = buildings [ i ] [ 7 ] ;
2617: LD_ADDR_OWVAR 45
2621: PUSH
2622: LD_VAR 0 5
2626: PUSH
2627: LD_VAR 0 2
2631: ARRAY
2632: PUSH
2633: LD_INT 7
2635: ARRAY
2636: ST_TO_ADDR
// if not buildings [ i ] [ 6 ] and not buildings [ i ] [ 7 ] then
2637: LD_VAR 0 5
2641: PUSH
2642: LD_VAR 0 2
2646: ARRAY
2647: PUSH
2648: LD_INT 6
2650: ARRAY
2651: NOT
2652: PUSH
2653: LD_VAR 0 5
2657: PUSH
2658: LD_VAR 0 2
2662: ARRAY
2663: PUSH
2664: LD_INT 7
2666: ARRAY
2667: NOT
2668: AND
2669: IFFALSE 2679
// bc_type := b_lab ;
2671: LD_ADDR_OWVAR 42
2675: PUSH
2676: LD_INT 6
2678: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( buildings [ i ] [ 3 ] , buildings [ i ] [ 4 ] , buildings [ i ] [ 5 ] ) ;
2679: LD_ADDR_VAR 0 4
2683: PUSH
2684: LD_VAR 0 5
2688: PUSH
2689: LD_VAR 0 2
2693: ARRAY
2694: PUSH
2695: LD_INT 3
2697: ARRAY
2698: PPUSH
2699: LD_VAR 0 5
2703: PUSH
2704: LD_VAR 0 2
2708: ARRAY
2709: PUSH
2710: LD_INT 4
2712: ARRAY
2713: PPUSH
2714: LD_VAR 0 5
2718: PUSH
2719: LD_VAR 0 2
2723: ARRAY
2724: PUSH
2725: LD_INT 5
2727: ARRAY
2728: PPUSH
2729: CALL_OW 47
2733: ST_TO_ADDR
// if GetBType ( building ) = b_bunker then
2734: LD_VAR 0 4
2738: PPUSH
2739: CALL_OW 266
2743: PUSH
2744: LD_INT 32
2746: EQUAL
2747: IFFALSE 2773
// PlaceWeaponTurret ( building , buildings [ i ] [ 8 ] ) ;
2749: LD_VAR 0 4
2753: PPUSH
2754: LD_VAR 0 5
2758: PUSH
2759: LD_VAR 0 2
2763: ARRAY
2764: PUSH
2765: LD_INT 8
2767: ARRAY
2768: PPUSH
2769: CALL_OW 431
// end ;
2773: GO 2476
2775: POP
2776: POP
// lab = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2777: LD_ADDR_VAR 0 6
2781: PUSH
2782: LD_INT 22
2784: PUSH
2785: LD_INT 1
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: LD_INT 2
2794: PUSH
2795: LD_INT 30
2797: PUSH
2798: LD_INT 6
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: PUSH
2805: LD_INT 30
2807: PUSH
2808: LD_INT 7
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: PUSH
2815: LD_INT 30
2817: PUSH
2818: LD_INT 8
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: LIST
2829: LIST
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PPUSH
2835: CALL_OW 69
2839: ST_TO_ADDR
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) ;
2840: LD_ADDR_VAR 0 7
2844: PUSH
2845: LD_INT 22
2847: PUSH
2848: LD_INT 1
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: LD_INT 30
2857: PUSH
2858: LD_INT 0
2860: PUSH
2861: EMPTY
2862: LIST
2863: LIST
2864: PUSH
2865: EMPTY
2866: LIST
2867: LIST
2868: PPUSH
2869: CALL_OW 69
2873: ST_TO_ADDR
// if lab > 0 and tmp > 0 then
2874: LD_VAR 0 6
2878: PUSH
2879: LD_INT 0
2881: GREATER
2882: PUSH
2883: LD_VAR 0 7
2887: PUSH
2888: LD_INT 0
2890: GREATER
2891: AND
2892: IFFALSE 2902
// baseCorrect = 1 ;
2894: LD_ADDR_EXP 18
2898: PUSH
2899: LD_INT 1
2901: ST_TO_ADDR
// if baseCorrect = 0 then
2902: LD_EXP 18
2906: PUSH
2907: LD_INT 0
2909: EQUAL
2910: IFFALSE 3283
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
2912: LD_ADDR_VAR 0 2
2916: PUSH
2917: LD_INT 22
2919: PUSH
2920: LD_INT 1
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: PUSH
2927: LD_INT 21
2929: PUSH
2930: LD_INT 3
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: PPUSH
2941: CALL_OW 69
2945: PUSH
2946: FOR_IN
2947: IFFALSE 2960
// RemoveUnit ( i ) ;
2949: LD_VAR 0 2
2953: PPUSH
2954: CALL_OW 64
2958: GO 2946
2960: POP
2961: POP
// uc_nation = 1 ;
2962: LD_ADDR_OWVAR 21
2966: PUSH
2967: LD_INT 1
2969: ST_TO_ADDR
// uc_side = 1 ;
2970: LD_ADDR_OWVAR 20
2974: PUSH
2975: LD_INT 1
2977: ST_TO_ADDR
// bc_level = 5 ;
2978: LD_ADDR_OWVAR 43
2982: PUSH
2983: LD_INT 5
2985: ST_TO_ADDR
// bc_type = b_depot ;
2986: LD_ADDR_OWVAR 42
2990: PUSH
2991: LD_INT 0
2993: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 50 , 22 , 0 ) ;
2994: LD_INT 50
2996: PPUSH
2997: LD_INT 22
2999: PPUSH
3000: LD_INT 0
3002: PPUSH
3003: CALL_OW 47
// bc_type = b_bunker ;
3007: LD_ADDR_OWVAR 42
3011: PUSH
3012: LD_INT 32
3014: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 68 , 24 , 4 ) ;
3015: LD_ADDR_VAR 0 4
3019: PUSH
3020: LD_INT 68
3022: PPUSH
3023: LD_INT 24
3025: PPUSH
3026: LD_INT 4
3028: PPUSH
3029: CALL_OW 47
3033: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
3034: LD_VAR 0 4
3038: PPUSH
3039: LD_INT 4
3041: PUSH
3042: LD_INT 11
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PUSH
3049: LD_INT 1
3051: PPUSH
3052: LD_INT 2
3054: PPUSH
3055: CALL_OW 12
3059: ARRAY
3060: PPUSH
3061: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 71 , 34 , 4 ) ;
3065: LD_ADDR_VAR 0 4
3069: PUSH
3070: LD_INT 71
3072: PPUSH
3073: LD_INT 34
3075: PPUSH
3076: LD_INT 4
3078: PPUSH
3079: CALL_OW 47
3083: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 11 ] [ Rand ( 1 , 2 ) ] ) ;
3084: LD_VAR 0 4
3088: PPUSH
3089: LD_INT 4
3091: PUSH
3092: LD_INT 11
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PUSH
3099: LD_INT 1
3101: PPUSH
3102: LD_INT 2
3104: PPUSH
3105: CALL_OW 12
3109: ARRAY
3110: PPUSH
3111: CALL_OW 431
// bc_type = 31 ;
3115: LD_ADDR_OWVAR 42
3119: PUSH
3120: LD_INT 31
3122: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 51 , 7 , 3 ) ;
3123: LD_INT 51
3125: PPUSH
3126: LD_INT 7
3128: PPUSH
3129: LD_INT 3
3131: PPUSH
3132: CALL_OW 47
// bc_type = b_oil_mine ;
3136: LD_ADDR_OWVAR 42
3140: PUSH
3141: LD_INT 29
3143: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 40 , 1 ) ;
3144: LD_INT 68
3146: PPUSH
3147: LD_INT 40
3149: PPUSH
3150: LD_INT 1
3152: PPUSH
3153: CALL_OW 47
// bc_type = b_workshop ;
3157: LD_ADDR_OWVAR 42
3161: PUSH
3162: LD_INT 2
3164: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3165: LD_INT 38
3167: PPUSH
3168: LD_INT 20
3170: PPUSH
3171: LD_INT 2
3173: PPUSH
3174: CALL_OW 47
// bc_type = b_armoury ;
3178: LD_ADDR_OWVAR 42
3182: PUSH
3183: LD_INT 4
3185: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 38 , 20 , 2 ) ;
3186: LD_INT 38
3188: PPUSH
3189: LD_INT 20
3191: PPUSH
3192: LD_INT 2
3194: PPUSH
3195: CALL_OW 47
// bc_type = b_solar_power ;
3199: LD_ADDR_OWVAR 42
3203: PUSH
3204: LD_INT 27
3206: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 46 , 12 , 1 ) ;
3207: LD_INT 46
3209: PPUSH
3210: LD_INT 12
3212: PPUSH
3213: LD_INT 1
3215: PPUSH
3216: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 48 , 11 , 2 ) ;
3220: LD_INT 48
3222: PPUSH
3223: LD_INT 11
3225: PPUSH
3226: LD_INT 2
3228: PPUSH
3229: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 49 , 11 , 3 ) ;
3233: LD_INT 49
3235: PPUSH
3236: LD_INT 11
3238: PPUSH
3239: LD_INT 3
3241: PPUSH
3242: CALL_OW 47
// bc_type = b_lab_half ;
3246: LD_ADDR_OWVAR 42
3250: PUSH
3251: LD_INT 7
3253: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
3254: LD_ADDR_OWVAR 44
3258: PUSH
3259: LD_INT 15
3261: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
3262: LD_ADDR_OWVAR 45
3266: PUSH
3267: LD_INT 9
3269: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 42 , 15 , 2 ) ;
3270: LD_INT 42
3272: PPUSH
3273: LD_INT 15
3275: PPUSH
3276: LD_INT 2
3278: PPUSH
3279: CALL_OW 47
// end ; end ; end_of_file
3283: LD_VAR 0 1
3287: RET
// every 1 do var i , j , tmp ;
3288: GO 3290
3290: DISABLE
3291: LD_INT 0
3293: PPUSH
3294: PPUSH
3295: PPUSH
// begin InGameOn ;
3296: CALL_OW 8
// CenterNowOnUnits ( lab [ 1 ] ) ;
3300: LD_EXP 20
3304: PUSH
3305: LD_INT 1
3307: ARRAY
3308: PPUSH
3309: CALL_OW 87
// if IsOK ( Denis ) then
3313: LD_EXP 3
3317: PPUSH
3318: CALL_OW 302
3322: IFFALSE 3350
// begin SetTech ( tech_radar , 1 , state_researched ) ;
3324: LD_INT 6
3326: PPUSH
3327: LD_INT 1
3329: PPUSH
3330: LD_INT 2
3332: PPUSH
3333: CALL_OW 322
// SetRestrict ( b_ext_radar , 1 , true ) ;
3337: LD_INT 20
3339: PPUSH
3340: LD_INT 1
3342: PPUSH
3343: LD_INT 1
3345: PPUSH
3346: CALL_OW 324
// end ; CenterNowOnUnits ( JMM ) ;
3350: LD_EXP 1
3354: PPUSH
3355: CALL_OW 87
// ComTurnUnit ( JMM , DeltaDoctor ) ;
3359: LD_EXP 1
3363: PPUSH
3364: LD_EXP 15
3368: PPUSH
3369: CALL_OW 119
// repeat wait ( 0 0$1 ) ;
3373: LD_INT 35
3375: PPUSH
3376: CALL_OW 67
// ComMoveUnit ( DeltaDoctor , JMM ) ;
3380: LD_EXP 15
3384: PPUSH
3385: LD_EXP 1
3389: PPUSH
3390: CALL_OW 112
// until GetDistUnits ( JMM , DeltaDoctor ) < 5 ;
3394: LD_EXP 1
3398: PPUSH
3399: LD_EXP 15
3403: PPUSH
3404: CALL_OW 296
3408: PUSH
3409: LD_INT 5
3411: LESS
3412: IFFALSE 3373
// ComTurnUnit ( DeltaDoctor , JMM ) ;
3414: LD_EXP 15
3418: PPUSH
3419: LD_EXP 1
3423: PPUSH
3424: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3428: LD_EXP 1
3432: PPUSH
3433: LD_STRING D1-JMM-1
3435: PPUSH
3436: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-1 ) ;
3440: LD_EXP 15
3444: PPUSH
3445: LD_STRING D1-Sci-1
3447: PPUSH
3448: CALL_OW 88
// ComEnterUnit ( [ JMM , DeltaDoctor , Denis ] , lab [ 1 ] ) ;
3452: LD_EXP 1
3456: PUSH
3457: LD_EXP 15
3461: PUSH
3462: LD_EXP 3
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: LIST
3471: PPUSH
3472: LD_EXP 20
3476: PUSH
3477: LD_INT 1
3479: ARRAY
3480: PPUSH
3481: CALL_OW 120
// end ;
3485: PPOPN 3
3487: END
// every 0 0$2 trigger IsInUnit ( JMM ) = lab [ 1 ] and IsInUnit ( DeltaDoctor ) = lab [ 1 ] do var i , j , tmp ;
3488: LD_EXP 1
3492: PPUSH
3493: CALL_OW 310
3497: PUSH
3498: LD_EXP 20
3502: PUSH
3503: LD_INT 1
3505: ARRAY
3506: EQUAL
3507: PUSH
3508: LD_EXP 15
3512: PPUSH
3513: CALL_OW 310
3517: PUSH
3518: LD_EXP 20
3522: PUSH
3523: LD_INT 1
3525: ARRAY
3526: EQUAL
3527: AND
3528: IFFALSE 4074
3530: GO 3532
3532: DISABLE
3533: LD_INT 0
3535: PPUSH
3536: PPUSH
3537: PPUSH
// begin CenterNowOnUnits ( lab [ 1 ] ) ;
3538: LD_EXP 20
3542: PUSH
3543: LD_INT 1
3545: ARRAY
3546: PPUSH
3547: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
3551: LD_EXP 1
3555: PPUSH
3556: LD_STRING D1-JMM-2
3558: PPUSH
3559: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-2 ) ;
3563: LD_EXP 15
3567: PPUSH
3568: LD_STRING D1-Sci-2
3570: PPUSH
3571: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3575: LD_EXP 1
3579: PPUSH
3580: LD_STRING D1-JMM-3
3582: PPUSH
3583: CALL_OW 88
// if IsOK ( Denis ) then
3587: LD_EXP 3
3591: PPUSH
3592: CALL_OW 302
3596: IFFALSE 3612
// Say ( DeltaDoctor , D1-Sci-3 ) else
3598: LD_EXP 15
3602: PPUSH
3603: LD_STRING D1-Sci-3
3605: PPUSH
3606: CALL_OW 88
3610: GO 3624
// Say ( DeltaDoctor , D1-Sci-3a ) ;
3612: LD_EXP 15
3616: PPUSH
3617: LD_STRING D1-Sci-3a
3619: PPUSH
3620: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3624: LD_EXP 1
3628: PPUSH
3629: LD_STRING D1-JMM-4
3631: PPUSH
3632: CALL_OW 88
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
3636: LD_ADDR_VAR 0 3
3640: PUSH
3641: LD_INT 22
3643: PUSH
3644: LD_INT 1
3646: PUSH
3647: EMPTY
3648: LIST
3649: LIST
3650: PUSH
3651: LD_INT 25
3653: PUSH
3654: LD_INT 4
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: PUSH
3661: LD_INT 3
3663: PUSH
3664: LD_INT 54
3666: PUSH
3667: EMPTY
3668: LIST
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: LIST
3678: PPUSH
3679: CALL_OW 69
3683: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 0 ] ) do
3684: LD_ADDR_VAR 0 1
3688: PUSH
3689: LD_INT 22
3691: PUSH
3692: LD_INT 0
3694: PUSH
3695: EMPTY
3696: LIST
3697: LIST
3698: PPUSH
3699: CALL_OW 69
3703: PUSH
3704: FOR_IN
3705: IFFALSE 3755
// for j in tmp do
3707: LD_ADDR_VAR 0 2
3711: PUSH
3712: LD_VAR 0 3
3716: PUSH
3717: FOR_IN
3718: IFFALSE 3751
// AddComTameXY ( j , GetX ( i ) , GetY ( i ) ) ;
3720: LD_VAR 0 2
3724: PPUSH
3725: LD_VAR 0 1
3729: PPUSH
3730: CALL_OW 250
3734: PPUSH
3735: LD_VAR 0 1
3739: PPUSH
3740: CALL_OW 251
3744: PPUSH
3745: CALL_OW 191
3749: GO 3717
3751: POP
3752: POP
3753: GO 3704
3755: POP
3756: POP
// Say ( DeltaDoctor , D1-Sci-4 ) ;
3757: LD_EXP 15
3761: PPUSH
3762: LD_STRING D1-Sci-4
3764: PPUSH
3765: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3769: LD_EXP 1
3773: PPUSH
3774: LD_STRING D1-JMM-5
3776: PPUSH
3777: CALL_OW 88
// Say ( DeltaDoctor , D1-Sci-5 ) ;
3781: LD_EXP 15
3785: PPUSH
3786: LD_STRING D1-Sci-5
3788: PPUSH
3789: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3793: LD_EXP 1
3797: PPUSH
3798: LD_STRING D1-JMM-6
3800: PPUSH
3801: CALL_OW 88
// SayRadio ( Harisson , D1-Har-6 ) ;
3805: LD_EXP 16
3809: PPUSH
3810: LD_STRING D1-Har-6
3812: PPUSH
3813: CALL_OW 94
// Say ( JMM , D1-JMM-7 ) ;
3817: LD_EXP 1
3821: PPUSH
3822: LD_STRING D1-JMM-7
3824: PPUSH
3825: CALL_OW 88
// SayRadio ( Harisson , D1-Har-7 ) ;
3829: LD_EXP 16
3833: PPUSH
3834: LD_STRING D1-Har-7
3836: PPUSH
3837: CALL_OW 94
// if IsOK ( Denis ) then
3841: LD_EXP 3
3845: PPUSH
3846: CALL_OW 302
3850: IFFALSE 3864
// Say ( JMM , D1-JMM-8 ) ;
3852: LD_EXP 1
3856: PPUSH
3857: LD_STRING D1-JMM-8
3859: PPUSH
3860: CALL_OW 88
// Say ( JMM , D1-JMM-8a ) ;
3864: LD_EXP 1
3868: PPUSH
3869: LD_STRING D1-JMM-8a
3871: PPUSH
3872: CALL_OW 88
// SayRadio ( Harisson , D1-Har-8 ) ;
3876: LD_EXP 16
3880: PPUSH
3881: LD_STRING D1-Har-8
3883: PPUSH
3884: CALL_OW 94
// Say ( JMM , D1-JMM-9 ) ;
3888: LD_EXP 1
3892: PPUSH
3893: LD_STRING D1-JMM-9
3895: PPUSH
3896: CALL_OW 88
// SayRadio ( Harisson , D1-Har-9 ) ;
3900: LD_EXP 16
3904: PPUSH
3905: LD_STRING D1-Har-9
3907: PPUSH
3908: CALL_OW 94
// Say ( JMM , D1-JMM-10 ) ;
3912: LD_EXP 1
3916: PPUSH
3917: LD_STRING D1-JMM-10
3919: PPUSH
3920: CALL_OW 88
// if IsOK ( Denis ) then
3924: LD_EXP 3
3928: PPUSH
3929: CALL_OW 302
3933: IFFALSE 3947
// Say ( JMM , D1-JMM-10a ) ;
3935: LD_EXP 1
3939: PPUSH
3940: LD_STRING D1-JMM-10a
3942: PPUSH
3943: CALL_OW 88
// SelectDeltaCharacters ;
3947: CALL 4433 0 0
// SetResourceType ( GetBase ( lab [ 1 ] ) , 1 , 150 ) ;
3951: LD_EXP 20
3955: PUSH
3956: LD_INT 1
3958: ARRAY
3959: PPUSH
3960: CALL_OW 274
3964: PPUSH
3965: LD_INT 1
3967: PPUSH
3968: LD_INT 150
3970: PPUSH
3971: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) > 0 then
3975: LD_INT 22
3977: PUSH
3978: LD_INT 1
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: PUSH
3985: LD_INT 30
3987: PUSH
3988: LD_INT 29
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PUSH
3995: EMPTY
3996: LIST
3997: LIST
3998: PPUSH
3999: CALL_OW 69
4003: PUSH
4004: LD_INT 0
4006: GREATER
4007: IFFALSE 4033
// SetResourceType ( GetBase ( lab [ 1 ] ) , 2 , 300 ) ;
4009: LD_EXP 20
4013: PUSH
4014: LD_INT 1
4016: ARRAY
4017: PPUSH
4018: CALL_OW 274
4022: PPUSH
4023: LD_INT 2
4025: PPUSH
4026: LD_INT 300
4028: PPUSH
4029: CALL_OW 277
// InGameOff ;
4033: CALL_OW 9
// Query ( Q1 ) ;
4037: LD_STRING Q1
4039: PPUSH
4040: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
4044: LD_INT 3
4046: PPUSH
4047: LD_INT 1
4049: PPUSH
4050: CALL_OW 424
// if IsInUnit ( JMM ) then
4054: LD_EXP 1
4058: PPUSH
4059: CALL_OW 310
4063: IFFALSE 4074
// ComExitBuilding ( JMM ) ;
4065: LD_EXP 1
4069: PPUSH
4070: CALL_OW 122
// end ;
4074: PPOPN 3
4076: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var i , cargoType ;
4077: LD_INT 3
4079: PPUSH
4080: LD_INT 22
4082: PUSH
4083: LD_INT 1
4085: PUSH
4086: EMPTY
4087: LIST
4088: LIST
4089: PUSH
4090: LD_INT 21
4092: PUSH
4093: LD_INT 1
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: PPUSH
4104: CALL_OW 71
4108: PUSH
4109: LD_INT 0
4111: EQUAL
4112: IFFALSE 4430
4114: GO 4116
4116: DISABLE
4117: LD_INT 0
4119: PPUSH
4120: PPUSH
// begin SaveDeltaCharacters ;
4121: CALL 4787 0 0
// if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) then
4125: LD_INT 3
4127: PPUSH
4128: LD_INT 21
4130: PUSH
4131: LD_INT 2
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: PUSH
4138: LD_INT 3
4140: PUSH
4141: LD_INT 58
4143: PUSH
4144: EMPTY
4145: LIST
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: PPUSH
4155: CALL_OW 70
4159: IFFALSE 4416
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
4161: LD_ADDR_VAR 0 1
4165: PUSH
4166: LD_INT 3
4168: PPUSH
4169: LD_INT 21
4171: PUSH
4172: LD_INT 2
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PUSH
4179: LD_INT 3
4181: PUSH
4182: LD_INT 58
4184: PUSH
4185: EMPTY
4186: LIST
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: PPUSH
4196: CALL_OW 70
4200: PUSH
4201: FOR_IN
4202: IFFALSE 4414
// begin cargoType = GetCargoType ( i ) ;
4204: LD_ADDR_VAR 0 2
4208: PUSH
4209: LD_VAR 0 1
4213: PPUSH
4214: CALL_OW 288
4218: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
4219: LD_VAR 0 1
4223: PPUSH
4224: CALL_OW 264
4228: PUSH
4229: LD_INT 12
4231: EQUAL
4232: IFFALSE 4329
// yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] else
4234: LD_ADDR_EXP 14
4238: PUSH
4239: LD_EXP 14
4243: PUSH
4244: LD_VAR 0 1
4248: PPUSH
4249: CALL_OW 248
4253: PUSH
4254: LD_VAR 0 1
4258: PPUSH
4259: CALL_OW 265
4263: PUSH
4264: LD_VAR 0 1
4268: PPUSH
4269: CALL_OW 262
4273: PUSH
4274: LD_VAR 0 1
4278: PPUSH
4279: CALL_OW 263
4283: PUSH
4284: LD_VAR 0 1
4288: PPUSH
4289: CALL_OW 264
4293: PUSH
4294: LD_VAR 0 2
4298: PUSH
4299: LD_VAR 0 1
4303: PPUSH
4304: LD_VAR 0 2
4308: PPUSH
4309: CALL_OW 289
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: PUSH
4323: EMPTY
4324: LIST
4325: ADD
4326: ST_TO_ADDR
4327: GO 4400
// yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
4329: LD_ADDR_EXP 14
4333: PUSH
4334: LD_EXP 14
4338: PUSH
4339: LD_VAR 0 1
4343: PPUSH
4344: CALL_OW 248
4348: PUSH
4349: LD_VAR 0 1
4353: PPUSH
4354: CALL_OW 265
4358: PUSH
4359: LD_VAR 0 1
4363: PPUSH
4364: CALL_OW 262
4368: PUSH
4369: LD_VAR 0 1
4373: PPUSH
4374: CALL_OW 263
4378: PUSH
4379: LD_VAR 0 1
4383: PPUSH
4384: CALL_OW 264
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: PUSH
4396: EMPTY
4397: LIST
4398: ADD
4399: ST_TO_ADDR
// SaveVariable ( yourVehicles , 06_VehiclesIn06_1 ) ;
4400: LD_EXP 14
4404: PPUSH
4405: LD_STRING 06_VehiclesIn06_1
4407: PPUSH
4408: CALL_OW 39
// end ;
4412: GO 4201
4414: POP
4415: POP
// end ; SaveCargos ;
4416: CALL 5543 0 0
// ChangeMap ( 6 , %_cont ) ;
4420: LD_INT 6
4422: PPUSH
4423: LD_STRING %_cont
4425: PPUSH
4426: CALL_OW 340
// end ; end_of_file
4430: PPOPN 2
4432: END
// export function SelectDeltaCharacters ; var i , yourPeople ; begin
4433: LD_INT 0
4435: PPUSH
4436: PPUSH
4437: PPUSH
// selectedPeople := [ ] ;
4438: LD_ADDR_EXP 17
4442: PUSH
4443: EMPTY
4444: ST_TO_ADDR
// yourPeople = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , DeltaDoctor , Denis ] ;
4445: LD_ADDR_VAR 0 3
4449: PUSH
4450: LD_INT 22
4452: PUSH
4453: LD_INT 1
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PUSH
4460: LD_INT 21
4462: PUSH
4463: LD_INT 1
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PUSH
4470: LD_INT 2
4472: PUSH
4473: LD_INT 25
4475: PUSH
4476: LD_INT 1
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: LD_INT 25
4485: PUSH
4486: LD_INT 2
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: LD_INT 25
4495: PUSH
4496: LD_INT 3
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 25
4505: PUSH
4506: LD_INT 4
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: LIST
4524: PPUSH
4525: CALL_OW 69
4529: PUSH
4530: LD_EXP 1
4534: PUSH
4535: LD_EXP 15
4539: PUSH
4540: LD_EXP 3
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: LIST
4549: DIFF
4550: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 5 , 5 , [ sel_change_class , JMM , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ yourPeople ^ [ sel_dont_change_class , sel_not_changeable , Denis , DeltaDoctor ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
4551: LD_ADDR_EXP 17
4555: PUSH
4556: LD_STRING text
4558: PPUSH
4559: LD_INT 5
4561: PPUSH
4562: LD_INT 5
4564: PPUSH
4565: LD_INT -5
4567: PUSH
4568: LD_EXP 1
4572: PUSH
4573: LD_INT -6
4575: PUSH
4576: LD_INT -2
4578: PUSH
4579: LD_INT -3
4581: PUSH
4582: LD_INT -5
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: PUSH
4593: LD_VAR 0 3
4597: ADD
4598: PUSH
4599: LD_INT -6
4601: PUSH
4602: LD_INT -4
4604: PUSH
4605: LD_EXP 3
4609: PUSH
4610: LD_EXP 15
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: ADD
4621: PPUSH
4622: LD_INT 1
4624: PUSH
4625: LD_INT 3
4627: PUSH
4628: LD_INT 2
4630: PUSH
4631: LD_INT 1
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: PUSH
4638: LD_INT 4
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: PPUSH
4647: CALL_OW 42
4651: ST_TO_ADDR
// ComStop ( selectedPeople ) ;
4652: LD_EXP 17
4656: PPUSH
4657: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4661: LD_INT 22
4663: PUSH
4664: LD_INT 1
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: LD_INT 21
4673: PUSH
4674: LD_INT 1
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: PPUSH
4685: CALL_OW 69
4689: PPUSH
4690: LD_INT 4
4692: PPUSH
4693: CALL_OW 235
// for i in selectedPeople do
4697: LD_ADDR_VAR 0 2
4701: PUSH
4702: LD_EXP 17
4706: PUSH
4707: FOR_IN
4708: IFFALSE 4724
// SetSide ( i , 1 ) ;
4710: LD_VAR 0 2
4714: PPUSH
4715: LD_INT 1
4717: PPUSH
4718: CALL_OW 235
4722: GO 4707
4724: POP
4725: POP
// for i in yourApemans do
4726: LD_ADDR_VAR 0 2
4730: PUSH
4731: LD_EXP 13
4735: PUSH
4736: FOR_IN
4737: IFFALSE 4753
// SetSide ( i , 1 ) ;
4739: LD_VAR 0 2
4743: PPUSH
4744: LD_INT 1
4746: PPUSH
4747: CALL_OW 235
4751: GO 4736
4753: POP
4754: POP
// SetSide ( JMM , 1 ) ;
4755: LD_EXP 1
4759: PPUSH
4760: LD_INT 1
4762: PPUSH
4763: CALL_OW 235
// SetSkill ( yourApemans , 2 , 5 ) ;
4767: LD_EXP 13
4771: PPUSH
4772: LD_INT 2
4774: PPUSH
4775: LD_INT 5
4777: PPUSH
4778: CALL_OW 237
// end ;
4782: LD_VAR 0 1
4786: RET
// export function SaveDeltaCharacters ; begin
4787: LD_INT 0
4789: PPUSH
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4790: LD_EXP 1
4794: PPUSH
4795: LD_EXP 22
4799: PUSH
4800: LD_STRING JMM
4802: STR
4803: PPUSH
4804: CALL_OW 38
// SaveCharacters ( DeltaDoctor , DeltaDoctor ) ;
4808: LD_EXP 15
4812: PPUSH
4813: LD_STRING DeltaDoctor
4815: PPUSH
4816: CALL_OW 38
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
4820: LD_EXP 3
4824: PPUSH
4825: LD_EXP 22
4829: PUSH
4830: LD_STRING Denis
4832: STR
4833: PPUSH
4834: CALL_OW 38
// if Lisa in selectedPeople then
4838: LD_EXP 4
4842: PUSH
4843: LD_EXP 17
4847: IN
4848: IFFALSE 4880
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
4850: LD_EXP 4
4854: PPUSH
4855: LD_EXP 22
4859: PUSH
4860: LD_STRING Lisa
4862: STR
4863: PPUSH
4864: CALL_OW 38
// SaveVariable ( 1 , LisaIn06 ) ;
4868: LD_INT 1
4870: PPUSH
4871: LD_STRING LisaIn06
4873: PPUSH
4874: CALL_OW 39
// end else
4878: GO 4901
// if IsOk ( Lisa ) then
4880: LD_EXP 4
4884: PPUSH
4885: CALL_OW 302
4889: IFFALSE 4901
// SaveVariable ( 1 , LisaStayInDelta ) ;
4891: LD_INT 1
4893: PPUSH
4894: LD_STRING LisaStayInDelta
4896: PPUSH
4897: CALL_OW 39
// if Bobby in selectedPeople then
4901: LD_EXP 6
4905: PUSH
4906: LD_EXP 17
4910: IN
4911: IFFALSE 4943
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4913: LD_EXP 6
4917: PPUSH
4918: LD_EXP 22
4922: PUSH
4923: LD_STRING Bobby
4925: STR
4926: PPUSH
4927: CALL_OW 38
// SaveVariable ( 1 , BobbyIn06 ) ;
4931: LD_INT 1
4933: PPUSH
4934: LD_STRING BobbyIn06
4936: PPUSH
4937: CALL_OW 39
// end else
4941: GO 4964
// if IsOk ( Bobby ) then
4943: LD_EXP 6
4947: PPUSH
4948: CALL_OW 302
4952: IFFALSE 4964
// SaveVariable ( 1 , BobbyStayInDelta ) ;
4954: LD_INT 1
4956: PPUSH
4957: LD_STRING BobbyStayInDelta
4959: PPUSH
4960: CALL_OW 39
// if Cyrus in selectedPeople then
4964: LD_EXP 7
4968: PUSH
4969: LD_EXP 17
4973: IN
4974: IFFALSE 5006
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4976: LD_EXP 7
4980: PPUSH
4981: LD_EXP 22
4985: PUSH
4986: LD_STRING Cyrus
4988: STR
4989: PPUSH
4990: CALL_OW 38
// SaveVariable ( 1 , CyrusIn06 ) ;
4994: LD_INT 1
4996: PPUSH
4997: LD_STRING CyrusIn06
4999: PPUSH
5000: CALL_OW 39
// end else
5004: GO 5027
// if IsOk ( Cyrus ) then
5006: LD_EXP 7
5010: PPUSH
5011: CALL_OW 302
5015: IFFALSE 5027
// SaveVariable ( 1 , CyrusStayInDelta ) ;
5017: LD_INT 1
5019: PPUSH
5020: LD_STRING CyrusStayInDelta
5022: PPUSH
5023: CALL_OW 39
// if Frank in selectedPeople then
5027: LD_EXP 5
5031: PUSH
5032: LD_EXP 17
5036: IN
5037: IFFALSE 5069
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5039: LD_EXP 5
5043: PPUSH
5044: LD_EXP 22
5048: PUSH
5049: LD_STRING Frank
5051: STR
5052: PPUSH
5053: CALL_OW 38
// SaveVariable ( 1 , FrankIn06 ) ;
5057: LD_INT 1
5059: PPUSH
5060: LD_STRING FrankIn06
5062: PPUSH
5063: CALL_OW 39
// end else
5067: GO 5090
// if IsOk ( Frank ) then
5069: LD_EXP 5
5073: PPUSH
5074: CALL_OW 302
5078: IFFALSE 5090
// SaveVariable ( 1 , FrankStayInDelta ) ;
5080: LD_INT 1
5082: PPUSH
5083: LD_STRING FrankStayInDelta
5085: PPUSH
5086: CALL_OW 39
// if Brown in selectedPeople then
5090: LD_EXP 8
5094: PUSH
5095: LD_EXP 17
5099: IN
5100: IFFALSE 5132
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5102: LD_EXP 8
5106: PPUSH
5107: LD_EXP 22
5111: PUSH
5112: LD_STRING Brown
5114: STR
5115: PPUSH
5116: CALL_OW 38
// SaveVariable ( 1 , BrownIn06 ) ;
5120: LD_INT 1
5122: PPUSH
5123: LD_STRING BrownIn06
5125: PPUSH
5126: CALL_OW 39
// end else
5130: GO 5153
// if IsOk ( Brown ) then
5132: LD_EXP 8
5136: PPUSH
5137: CALL_OW 302
5141: IFFALSE 5153
// SaveVariable ( 1 , BrownStayInDelta ) ;
5143: LD_INT 1
5145: PPUSH
5146: LD_STRING BrownStayInDelta
5148: PPUSH
5149: CALL_OW 39
// if Donaldson in selectedPeople then
5153: LD_EXP 9
5157: PUSH
5158: LD_EXP 17
5162: IN
5163: IFFALSE 5195
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5165: LD_EXP 9
5169: PPUSH
5170: LD_EXP 22
5174: PUSH
5175: LD_STRING Donaldson
5177: STR
5178: PPUSH
5179: CALL_OW 38
// SaveVariable ( 1 , DonaldsonIn06 ) ;
5183: LD_INT 1
5185: PPUSH
5186: LD_STRING DonaldsonIn06
5188: PPUSH
5189: CALL_OW 39
// end else
5193: GO 5216
// if IsOk ( Donaldson ) then
5195: LD_EXP 9
5199: PPUSH
5200: CALL_OW 302
5204: IFFALSE 5216
// SaveVariable ( 1 , DonaldsonStayInDelta ) ;
5206: LD_INT 1
5208: PPUSH
5209: LD_STRING DonaldsonStayInDelta
5211: PPUSH
5212: CALL_OW 39
// if Gladstone in selectedPeople then
5216: LD_EXP 2
5220: PUSH
5221: LD_EXP 17
5225: IN
5226: IFFALSE 5258
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5228: LD_EXP 2
5232: PPUSH
5233: LD_EXP 22
5237: PUSH
5238: LD_STRING Gladstone
5240: STR
5241: PPUSH
5242: CALL_OW 38
// SaveVariable ( 1 , GladstoneIn06 ) ;
5246: LD_INT 1
5248: PPUSH
5249: LD_STRING GladstoneIn06
5251: PPUSH
5252: CALL_OW 39
// end else
5256: GO 5279
// if IsOk ( Gladstone ) then
5258: LD_EXP 2
5262: PPUSH
5263: CALL_OW 302
5267: IFFALSE 5279
// SaveVariable ( 1 , GladstoneStayInDelta ) ;
5269: LD_INT 1
5271: PPUSH
5272: LD_STRING GladstoneStayInDelta
5274: PPUSH
5275: CALL_OW 39
// selectedPeople := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ;
5279: LD_ADDR_EXP 17
5283: PUSH
5284: LD_INT 22
5286: PUSH
5287: LD_INT 1
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: PUSH
5294: LD_INT 23
5296: PUSH
5297: LD_INT 1
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: PUSH
5304: LD_INT 21
5306: PUSH
5307: LD_INT 1
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: PUSH
5314: EMPTY
5315: LIST
5316: LIST
5317: LIST
5318: PPUSH
5319: CALL_OW 69
5323: ST_TO_ADDR
// SaveCharacters ( yourApemans , ApeIn06 ) ;
5324: LD_EXP 13
5328: PPUSH
5329: LD_STRING ApeIn06
5331: PPUSH
5332: CALL_OW 38
// SaveCharacters ( selectedPeople diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersIn06 ) ;
5336: LD_EXP 17
5340: PUSH
5341: LD_EXP 1
5345: PUSH
5346: LD_EXP 4
5350: PUSH
5351: LD_EXP 6
5355: PUSH
5356: LD_EXP 7
5360: PUSH
5361: LD_EXP 5
5365: PUSH
5366: LD_EXP 8
5370: PUSH
5371: LD_EXP 9
5375: PUSH
5376: LD_EXP 2
5380: PUSH
5381: LD_EXP 3
5385: PUSH
5386: EMPTY
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: DIFF
5397: PPUSH
5398: LD_STRING OthersIn06
5400: PPUSH
5401: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ DeltaDoctor , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis ] , OthersStayInDelta ) ;
5405: LD_INT 22
5407: PUSH
5408: LD_INT 4
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: PUSH
5415: LD_INT 2
5417: PUSH
5418: LD_INT 25
5420: PUSH
5421: LD_INT 1
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: PUSH
5428: LD_INT 25
5430: PUSH
5431: LD_INT 2
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: PUSH
5438: LD_INT 25
5440: PUSH
5441: LD_INT 3
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: PUSH
5448: LD_INT 25
5450: PUSH
5451: LD_INT 4
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PPUSH
5469: CALL_OW 69
5473: PUSH
5474: LD_EXP 15
5478: PUSH
5479: LD_EXP 4
5483: PUSH
5484: LD_EXP 6
5488: PUSH
5489: LD_EXP 7
5493: PUSH
5494: LD_EXP 5
5498: PUSH
5499: LD_EXP 8
5503: PUSH
5504: LD_EXP 9
5508: PUSH
5509: LD_EXP 2
5513: PUSH
5514: LD_EXP 3
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: DIFF
5530: PPUSH
5531: LD_STRING OthersStayInDelta
5533: PPUSH
5534: CALL_OW 38
// end ;
5538: LD_VAR 0 1
5542: RET
// export function SaveCargos ; var i ; begin
5543: LD_INT 0
5545: PPUSH
5546: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
5547: LD_ADDR_VAR 0 2
5551: PUSH
5552: LD_INT 3
5554: PPUSH
5555: LD_INT 22
5557: PUSH
5558: LD_INT 1
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PUSH
5565: LD_INT 34
5567: PUSH
5568: LD_INT 12
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: PPUSH
5579: CALL_OW 70
5583: PUSH
5584: FOR_IN
5585: IFFALSE 5613
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
5587: LD_ADDR_EXP 21
5591: PUSH
5592: LD_EXP 21
5596: PUSH
5597: LD_VAR 0 2
5601: PPUSH
5602: CALL 5632 0 1
5606: PUSH
5607: EMPTY
5608: LIST
5609: ADD
5610: ST_TO_ADDR
5611: GO 5584
5613: POP
5614: POP
// SaveVariable ( resources , 06_ResourcesInCargo06_1 ) ;
5615: LD_EXP 21
5619: PPUSH
5620: LD_STRING 06_ResourcesInCargo06_1
5622: PPUSH
5623: CALL_OW 39
// end ;
5627: LD_VAR 0 1
5631: RET
// export function GetMultiCargo ( cargo_bay ) ; begin
5632: LD_INT 0
5634: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
5635: LD_ADDR_VAR 0 2
5639: PUSH
5640: LD_VAR 0 1
5644: PPUSH
5645: LD_INT 1
5647: PPUSH
5648: CALL_OW 289
5652: PUSH
5653: LD_VAR 0 1
5657: PPUSH
5658: LD_INT 2
5660: PPUSH
5661: CALL_OW 289
5665: PUSH
5666: LD_VAR 0 1
5670: PPUSH
5671: LD_INT 3
5673: PPUSH
5674: CALL_OW 289
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: LIST
5683: ST_TO_ADDR
// end ; end_of_file
5684: LD_VAR 0 2
5688: RET
// on Command ( comandid ) do var i ;
5689: LD_INT 0
5691: PPUSH
// begin if comandid = 65 then
5692: LD_VAR 0 1
5696: PUSH
5697: LD_INT 65
5699: EQUAL
5700: IFFALSE 5741
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
5702: LD_ADDR_VAR 0 2
5706: PUSH
5707: LD_INT 22
5709: PUSH
5710: LD_INT 1
5712: PUSH
5713: EMPTY
5714: LIST
5715: LIST
5716: PUSH
5717: EMPTY
5718: LIST
5719: PPUSH
5720: CALL_OW 69
5724: PUSH
5725: FOR_IN
5726: IFFALSE 5739
// ComStop ( i ) ;
5728: LD_VAR 0 2
5732: PPUSH
5733: CALL_OW 141
5737: GO 5725
5739: POP
5740: POP
// end ;
5741: PPOPN 2
5743: END
// on ApemanTamed ( apeman , human ) do var tmp ;
5744: LD_INT 0
5746: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] ] ) ;
5747: LD_ADDR_VAR 0 3
5751: PUSH
5752: LD_INT 22
5754: PUSH
5755: LD_INT 1
5757: PUSH
5758: EMPTY
5759: LIST
5760: LIST
5761: PUSH
5762: LD_INT 21
5764: PUSH
5765: LD_INT 3
5767: PUSH
5768: EMPTY
5769: LIST
5770: LIST
5771: PUSH
5772: LD_INT 30
5774: PUSH
5775: LD_INT 0
5777: PUSH
5778: EMPTY
5779: LIST
5780: LIST
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: LIST
5786: PPUSH
5787: CALL_OW 69
5791: ST_TO_ADDR
// ComEnterUnit ( apeman , tmp [ 1 ] ) ;
5792: LD_VAR 0 1
5796: PPUSH
5797: LD_VAR 0 3
5801: PUSH
5802: LD_INT 1
5804: ARRAY
5805: PPUSH
5806: CALL_OW 120
// SetSide ( apeman , 4 ) ;
5810: LD_VAR 0 1
5814: PPUSH
5815: LD_INT 4
5817: PPUSH
5818: CALL_OW 235
// end ; end_of_file
5822: PPOPN 3
5824: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5825: LD_INT 0
5827: PPUSH
// if p2 = 100 then
5828: LD_VAR 0 2
5832: PUSH
5833: LD_INT 100
5835: EQUAL
5836: IFFALSE 6785
// begin if not StreamModeActive then
5838: LD_EXP 24
5842: NOT
5843: IFFALSE 5853
// StreamModeActive := true ;
5845: LD_ADDR_EXP 24
5849: PUSH
5850: LD_INT 1
5852: ST_TO_ADDR
// if p3 = 0 then
5853: LD_VAR 0 3
5857: PUSH
5858: LD_INT 0
5860: EQUAL
5861: IFFALSE 5867
// InitStreamMode ;
5863: CALL 6945 0 0
// if p3 = 1 then
5867: LD_VAR 0 3
5871: PUSH
5872: LD_INT 1
5874: EQUAL
5875: IFFALSE 5885
// sRocket := true ;
5877: LD_ADDR_EXP 29
5881: PUSH
5882: LD_INT 1
5884: ST_TO_ADDR
// if p3 = 2 then
5885: LD_VAR 0 3
5889: PUSH
5890: LD_INT 2
5892: EQUAL
5893: IFFALSE 5903
// sSpeed := true ;
5895: LD_ADDR_EXP 28
5899: PUSH
5900: LD_INT 1
5902: ST_TO_ADDR
// if p3 = 3 then
5903: LD_VAR 0 3
5907: PUSH
5908: LD_INT 3
5910: EQUAL
5911: IFFALSE 5921
// sEngine := true ;
5913: LD_ADDR_EXP 30
5917: PUSH
5918: LD_INT 1
5920: ST_TO_ADDR
// if p3 = 4 then
5921: LD_VAR 0 3
5925: PUSH
5926: LD_INT 4
5928: EQUAL
5929: IFFALSE 5939
// sSpec := true ;
5931: LD_ADDR_EXP 27
5935: PUSH
5936: LD_INT 1
5938: ST_TO_ADDR
// if p3 = 5 then
5939: LD_VAR 0 3
5943: PUSH
5944: LD_INT 5
5946: EQUAL
5947: IFFALSE 5957
// sLevel := true ;
5949: LD_ADDR_EXP 31
5953: PUSH
5954: LD_INT 1
5956: ST_TO_ADDR
// if p3 = 6 then
5957: LD_VAR 0 3
5961: PUSH
5962: LD_INT 6
5964: EQUAL
5965: IFFALSE 5975
// sArmoury := true ;
5967: LD_ADDR_EXP 32
5971: PUSH
5972: LD_INT 1
5974: ST_TO_ADDR
// if p3 = 7 then
5975: LD_VAR 0 3
5979: PUSH
5980: LD_INT 7
5982: EQUAL
5983: IFFALSE 5993
// sRadar := true ;
5985: LD_ADDR_EXP 33
5989: PUSH
5990: LD_INT 1
5992: ST_TO_ADDR
// if p3 = 8 then
5993: LD_VAR 0 3
5997: PUSH
5998: LD_INT 8
6000: EQUAL
6001: IFFALSE 6011
// sBunker := true ;
6003: LD_ADDR_EXP 34
6007: PUSH
6008: LD_INT 1
6010: ST_TO_ADDR
// if p3 = 9 then
6011: LD_VAR 0 3
6015: PUSH
6016: LD_INT 9
6018: EQUAL
6019: IFFALSE 6029
// sHack := true ;
6021: LD_ADDR_EXP 35
6025: PUSH
6026: LD_INT 1
6028: ST_TO_ADDR
// if p3 = 10 then
6029: LD_VAR 0 3
6033: PUSH
6034: LD_INT 10
6036: EQUAL
6037: IFFALSE 6047
// sFire := true ;
6039: LD_ADDR_EXP 36
6043: PUSH
6044: LD_INT 1
6046: ST_TO_ADDR
// if p3 = 11 then
6047: LD_VAR 0 3
6051: PUSH
6052: LD_INT 11
6054: EQUAL
6055: IFFALSE 6065
// sRefresh := true ;
6057: LD_ADDR_EXP 37
6061: PUSH
6062: LD_INT 1
6064: ST_TO_ADDR
// if p3 = 12 then
6065: LD_VAR 0 3
6069: PUSH
6070: LD_INT 12
6072: EQUAL
6073: IFFALSE 6083
// sExp := true ;
6075: LD_ADDR_EXP 38
6079: PUSH
6080: LD_INT 1
6082: ST_TO_ADDR
// if p3 = 13 then
6083: LD_VAR 0 3
6087: PUSH
6088: LD_INT 13
6090: EQUAL
6091: IFFALSE 6101
// sDepot := true ;
6093: LD_ADDR_EXP 39
6097: PUSH
6098: LD_INT 1
6100: ST_TO_ADDR
// if p3 = 14 then
6101: LD_VAR 0 3
6105: PUSH
6106: LD_INT 14
6108: EQUAL
6109: IFFALSE 6119
// sFlag := true ;
6111: LD_ADDR_EXP 40
6115: PUSH
6116: LD_INT 1
6118: ST_TO_ADDR
// if p3 = 15 then
6119: LD_VAR 0 3
6123: PUSH
6124: LD_INT 15
6126: EQUAL
6127: IFFALSE 6137
// sKamikadze := true ;
6129: LD_ADDR_EXP 48
6133: PUSH
6134: LD_INT 1
6136: ST_TO_ADDR
// if p3 = 16 then
6137: LD_VAR 0 3
6141: PUSH
6142: LD_INT 16
6144: EQUAL
6145: IFFALSE 6155
// sTroll := true ;
6147: LD_ADDR_EXP 49
6151: PUSH
6152: LD_INT 1
6154: ST_TO_ADDR
// if p3 = 17 then
6155: LD_VAR 0 3
6159: PUSH
6160: LD_INT 17
6162: EQUAL
6163: IFFALSE 6173
// sSlow := true ;
6165: LD_ADDR_EXP 50
6169: PUSH
6170: LD_INT 1
6172: ST_TO_ADDR
// if p3 = 18 then
6173: LD_VAR 0 3
6177: PUSH
6178: LD_INT 18
6180: EQUAL
6181: IFFALSE 6191
// sLack := true ;
6183: LD_ADDR_EXP 51
6187: PUSH
6188: LD_INT 1
6190: ST_TO_ADDR
// if p3 = 19 then
6191: LD_VAR 0 3
6195: PUSH
6196: LD_INT 19
6198: EQUAL
6199: IFFALSE 6209
// sTank := true ;
6201: LD_ADDR_EXP 53
6205: PUSH
6206: LD_INT 1
6208: ST_TO_ADDR
// if p3 = 20 then
6209: LD_VAR 0 3
6213: PUSH
6214: LD_INT 20
6216: EQUAL
6217: IFFALSE 6227
// sRemote := true ;
6219: LD_ADDR_EXP 54
6223: PUSH
6224: LD_INT 1
6226: ST_TO_ADDR
// if p3 = 21 then
6227: LD_VAR 0 3
6231: PUSH
6232: LD_INT 21
6234: EQUAL
6235: IFFALSE 6245
// sPowell := true ;
6237: LD_ADDR_EXP 55
6241: PUSH
6242: LD_INT 1
6244: ST_TO_ADDR
// if p3 = 22 then
6245: LD_VAR 0 3
6249: PUSH
6250: LD_INT 22
6252: EQUAL
6253: IFFALSE 6263
// sTeleport := true ;
6255: LD_ADDR_EXP 58
6259: PUSH
6260: LD_INT 1
6262: ST_TO_ADDR
// if p3 = 23 then
6263: LD_VAR 0 3
6267: PUSH
6268: LD_INT 23
6270: EQUAL
6271: IFFALSE 6281
// sOilTower := true ;
6273: LD_ADDR_EXP 60
6277: PUSH
6278: LD_INT 1
6280: ST_TO_ADDR
// if p3 = 24 then
6281: LD_VAR 0 3
6285: PUSH
6286: LD_INT 24
6288: EQUAL
6289: IFFALSE 6299
// sShovel := true ;
6291: LD_ADDR_EXP 61
6295: PUSH
6296: LD_INT 1
6298: ST_TO_ADDR
// if p3 = 25 then
6299: LD_VAR 0 3
6303: PUSH
6304: LD_INT 25
6306: EQUAL
6307: IFFALSE 6317
// sSheik := true ;
6309: LD_ADDR_EXP 62
6313: PUSH
6314: LD_INT 1
6316: ST_TO_ADDR
// if p3 = 26 then
6317: LD_VAR 0 3
6321: PUSH
6322: LD_INT 26
6324: EQUAL
6325: IFFALSE 6335
// sEarthquake := true ;
6327: LD_ADDR_EXP 64
6331: PUSH
6332: LD_INT 1
6334: ST_TO_ADDR
// if p3 = 27 then
6335: LD_VAR 0 3
6339: PUSH
6340: LD_INT 27
6342: EQUAL
6343: IFFALSE 6353
// sAI := true ;
6345: LD_ADDR_EXP 65
6349: PUSH
6350: LD_INT 1
6352: ST_TO_ADDR
// if p3 = 28 then
6353: LD_VAR 0 3
6357: PUSH
6358: LD_INT 28
6360: EQUAL
6361: IFFALSE 6371
// sCargo := true ;
6363: LD_ADDR_EXP 68
6367: PUSH
6368: LD_INT 1
6370: ST_TO_ADDR
// if p3 = 29 then
6371: LD_VAR 0 3
6375: PUSH
6376: LD_INT 29
6378: EQUAL
6379: IFFALSE 6389
// sDLaser := true ;
6381: LD_ADDR_EXP 69
6385: PUSH
6386: LD_INT 1
6388: ST_TO_ADDR
// if p3 = 30 then
6389: LD_VAR 0 3
6393: PUSH
6394: LD_INT 30
6396: EQUAL
6397: IFFALSE 6407
// sExchange := true ;
6399: LD_ADDR_EXP 70
6403: PUSH
6404: LD_INT 1
6406: ST_TO_ADDR
// if p3 = 31 then
6407: LD_VAR 0 3
6411: PUSH
6412: LD_INT 31
6414: EQUAL
6415: IFFALSE 6425
// sFac := true ;
6417: LD_ADDR_EXP 71
6421: PUSH
6422: LD_INT 1
6424: ST_TO_ADDR
// if p3 = 32 then
6425: LD_VAR 0 3
6429: PUSH
6430: LD_INT 32
6432: EQUAL
6433: IFFALSE 6443
// sPower := true ;
6435: LD_ADDR_EXP 72
6439: PUSH
6440: LD_INT 1
6442: ST_TO_ADDR
// if p3 = 33 then
6443: LD_VAR 0 3
6447: PUSH
6448: LD_INT 33
6450: EQUAL
6451: IFFALSE 6461
// sRandom := true ;
6453: LD_ADDR_EXP 73
6457: PUSH
6458: LD_INT 1
6460: ST_TO_ADDR
// if p3 = 34 then
6461: LD_VAR 0 3
6465: PUSH
6466: LD_INT 34
6468: EQUAL
6469: IFFALSE 6479
// sShield := true ;
6471: LD_ADDR_EXP 74
6475: PUSH
6476: LD_INT 1
6478: ST_TO_ADDR
// if p3 = 35 then
6479: LD_VAR 0 3
6483: PUSH
6484: LD_INT 35
6486: EQUAL
6487: IFFALSE 6497
// sTime := true ;
6489: LD_ADDR_EXP 75
6493: PUSH
6494: LD_INT 1
6496: ST_TO_ADDR
// if p3 = 36 then
6497: LD_VAR 0 3
6501: PUSH
6502: LD_INT 36
6504: EQUAL
6505: IFFALSE 6515
// sTools := true ;
6507: LD_ADDR_EXP 76
6511: PUSH
6512: LD_INT 1
6514: ST_TO_ADDR
// if p3 = 101 then
6515: LD_VAR 0 3
6519: PUSH
6520: LD_INT 101
6522: EQUAL
6523: IFFALSE 6533
// sSold := true ;
6525: LD_ADDR_EXP 41
6529: PUSH
6530: LD_INT 1
6532: ST_TO_ADDR
// if p3 = 102 then
6533: LD_VAR 0 3
6537: PUSH
6538: LD_INT 102
6540: EQUAL
6541: IFFALSE 6551
// sDiff := true ;
6543: LD_ADDR_EXP 42
6547: PUSH
6548: LD_INT 1
6550: ST_TO_ADDR
// if p3 = 103 then
6551: LD_VAR 0 3
6555: PUSH
6556: LD_INT 103
6558: EQUAL
6559: IFFALSE 6569
// sFog := true ;
6561: LD_ADDR_EXP 45
6565: PUSH
6566: LD_INT 1
6568: ST_TO_ADDR
// if p3 = 104 then
6569: LD_VAR 0 3
6573: PUSH
6574: LD_INT 104
6576: EQUAL
6577: IFFALSE 6587
// sReset := true ;
6579: LD_ADDR_EXP 46
6583: PUSH
6584: LD_INT 1
6586: ST_TO_ADDR
// if p3 = 105 then
6587: LD_VAR 0 3
6591: PUSH
6592: LD_INT 105
6594: EQUAL
6595: IFFALSE 6605
// sSun := true ;
6597: LD_ADDR_EXP 47
6601: PUSH
6602: LD_INT 1
6604: ST_TO_ADDR
// if p3 = 106 then
6605: LD_VAR 0 3
6609: PUSH
6610: LD_INT 106
6612: EQUAL
6613: IFFALSE 6623
// sTiger := true ;
6615: LD_ADDR_EXP 43
6619: PUSH
6620: LD_INT 1
6622: ST_TO_ADDR
// if p3 = 107 then
6623: LD_VAR 0 3
6627: PUSH
6628: LD_INT 107
6630: EQUAL
6631: IFFALSE 6641
// sBomb := true ;
6633: LD_ADDR_EXP 44
6637: PUSH
6638: LD_INT 1
6640: ST_TO_ADDR
// if p3 = 108 then
6641: LD_VAR 0 3
6645: PUSH
6646: LD_INT 108
6648: EQUAL
6649: IFFALSE 6659
// sWound := true ;
6651: LD_ADDR_EXP 52
6655: PUSH
6656: LD_INT 1
6658: ST_TO_ADDR
// if p3 = 109 then
6659: LD_VAR 0 3
6663: PUSH
6664: LD_INT 109
6666: EQUAL
6667: IFFALSE 6677
// sBetray := true ;
6669: LD_ADDR_EXP 56
6673: PUSH
6674: LD_INT 1
6676: ST_TO_ADDR
// if p3 = 110 then
6677: LD_VAR 0 3
6681: PUSH
6682: LD_INT 110
6684: EQUAL
6685: IFFALSE 6695
// sContamin := true ;
6687: LD_ADDR_EXP 57
6691: PUSH
6692: LD_INT 1
6694: ST_TO_ADDR
// if p3 = 111 then
6695: LD_VAR 0 3
6699: PUSH
6700: LD_INT 111
6702: EQUAL
6703: IFFALSE 6713
// sOil := true ;
6705: LD_ADDR_EXP 59
6709: PUSH
6710: LD_INT 1
6712: ST_TO_ADDR
// if p3 = 112 then
6713: LD_VAR 0 3
6717: PUSH
6718: LD_INT 112
6720: EQUAL
6721: IFFALSE 6731
// sStu := true ;
6723: LD_ADDR_EXP 63
6727: PUSH
6728: LD_INT 1
6730: ST_TO_ADDR
// if p3 = 113 then
6731: LD_VAR 0 3
6735: PUSH
6736: LD_INT 113
6738: EQUAL
6739: IFFALSE 6749
// sBazooka := true ;
6741: LD_ADDR_EXP 66
6745: PUSH
6746: LD_INT 1
6748: ST_TO_ADDR
// if p3 = 114 then
6749: LD_VAR 0 3
6753: PUSH
6754: LD_INT 114
6756: EQUAL
6757: IFFALSE 6767
// sMortar := true ;
6759: LD_ADDR_EXP 67
6763: PUSH
6764: LD_INT 1
6766: ST_TO_ADDR
// if p3 = 115 then
6767: LD_VAR 0 3
6771: PUSH
6772: LD_INT 115
6774: EQUAL
6775: IFFALSE 6785
// sRanger := true ;
6777: LD_ADDR_EXP 77
6781: PUSH
6782: LD_INT 1
6784: ST_TO_ADDR
// end ; if p2 = 101 then
6785: LD_VAR 0 2
6789: PUSH
6790: LD_INT 101
6792: EQUAL
6793: IFFALSE 6921
// begin case p3 of 1 :
6795: LD_VAR 0 3
6799: PUSH
6800: LD_INT 1
6802: DOUBLE
6803: EQUAL
6804: IFTRUE 6808
6806: GO 6815
6808: POP
// hHackUnlimitedResources ; 2 :
6809: CALL 17958 0 0
6813: GO 6921
6815: LD_INT 2
6817: DOUBLE
6818: EQUAL
6819: IFTRUE 6823
6821: GO 6830
6823: POP
// hHackSetLevel10 ; 3 :
6824: CALL 18091 0 0
6828: GO 6921
6830: LD_INT 3
6832: DOUBLE
6833: EQUAL
6834: IFTRUE 6838
6836: GO 6845
6838: POP
// hHackSetLevel10YourUnits ; 4 :
6839: CALL 18176 0 0
6843: GO 6921
6845: LD_INT 4
6847: DOUBLE
6848: EQUAL
6849: IFTRUE 6853
6851: GO 6860
6853: POP
// hHackInvincible ; 5 :
6854: CALL 18624 0 0
6858: GO 6921
6860: LD_INT 5
6862: DOUBLE
6863: EQUAL
6864: IFTRUE 6868
6866: GO 6875
6868: POP
// hHackInvisible ; 6 :
6869: CALL 18735 0 0
6873: GO 6921
6875: LD_INT 6
6877: DOUBLE
6878: EQUAL
6879: IFTRUE 6883
6881: GO 6890
6883: POP
// hHackChangeYourSide ; 7 :
6884: CALL 18792 0 0
6888: GO 6921
6890: LD_INT 7
6892: DOUBLE
6893: EQUAL
6894: IFTRUE 6898
6896: GO 6905
6898: POP
// hHackChangeUnitSide ; 8 :
6899: CALL 18834 0 0
6903: GO 6921
6905: LD_INT 8
6907: DOUBLE
6908: EQUAL
6909: IFTRUE 6913
6911: GO 6920
6913: POP
// hHackFog ; end ;
6914: CALL 18935 0 0
6918: GO 6921
6920: POP
// end ; end ;
6921: LD_VAR 0 7
6925: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
6926: GO 6928
6928: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6929: LD_STRING initStreamRollete();
6931: PPUSH
6932: CALL_OW 559
// InitStreamMode ;
6936: CALL 6945 0 0
// DefineStreamItems ( ) ;
6940: CALL 7385 0 0
// end ;
6944: END
// function InitStreamMode ; begin
6945: LD_INT 0
6947: PPUSH
// streamModeActive := false ;
6948: LD_ADDR_EXP 24
6952: PUSH
6953: LD_INT 0
6955: ST_TO_ADDR
// normalCounter := 36 ;
6956: LD_ADDR_EXP 25
6960: PUSH
6961: LD_INT 36
6963: ST_TO_ADDR
// hardcoreCounter := 16 ;
6964: LD_ADDR_EXP 26
6968: PUSH
6969: LD_INT 16
6971: ST_TO_ADDR
// sRocket := false ;
6972: LD_ADDR_EXP 29
6976: PUSH
6977: LD_INT 0
6979: ST_TO_ADDR
// sSpeed := false ;
6980: LD_ADDR_EXP 28
6984: PUSH
6985: LD_INT 0
6987: ST_TO_ADDR
// sEngine := false ;
6988: LD_ADDR_EXP 30
6992: PUSH
6993: LD_INT 0
6995: ST_TO_ADDR
// sSpec := false ;
6996: LD_ADDR_EXP 27
7000: PUSH
7001: LD_INT 0
7003: ST_TO_ADDR
// sLevel := false ;
7004: LD_ADDR_EXP 31
7008: PUSH
7009: LD_INT 0
7011: ST_TO_ADDR
// sArmoury := false ;
7012: LD_ADDR_EXP 32
7016: PUSH
7017: LD_INT 0
7019: ST_TO_ADDR
// sRadar := false ;
7020: LD_ADDR_EXP 33
7024: PUSH
7025: LD_INT 0
7027: ST_TO_ADDR
// sBunker := false ;
7028: LD_ADDR_EXP 34
7032: PUSH
7033: LD_INT 0
7035: ST_TO_ADDR
// sHack := false ;
7036: LD_ADDR_EXP 35
7040: PUSH
7041: LD_INT 0
7043: ST_TO_ADDR
// sFire := false ;
7044: LD_ADDR_EXP 36
7048: PUSH
7049: LD_INT 0
7051: ST_TO_ADDR
// sRefresh := false ;
7052: LD_ADDR_EXP 37
7056: PUSH
7057: LD_INT 0
7059: ST_TO_ADDR
// sExp := false ;
7060: LD_ADDR_EXP 38
7064: PUSH
7065: LD_INT 0
7067: ST_TO_ADDR
// sDepot := false ;
7068: LD_ADDR_EXP 39
7072: PUSH
7073: LD_INT 0
7075: ST_TO_ADDR
// sFlag := false ;
7076: LD_ADDR_EXP 40
7080: PUSH
7081: LD_INT 0
7083: ST_TO_ADDR
// sKamikadze := false ;
7084: LD_ADDR_EXP 48
7088: PUSH
7089: LD_INT 0
7091: ST_TO_ADDR
// sTroll := false ;
7092: LD_ADDR_EXP 49
7096: PUSH
7097: LD_INT 0
7099: ST_TO_ADDR
// sSlow := false ;
7100: LD_ADDR_EXP 50
7104: PUSH
7105: LD_INT 0
7107: ST_TO_ADDR
// sLack := false ;
7108: LD_ADDR_EXP 51
7112: PUSH
7113: LD_INT 0
7115: ST_TO_ADDR
// sTank := false ;
7116: LD_ADDR_EXP 53
7120: PUSH
7121: LD_INT 0
7123: ST_TO_ADDR
// sRemote := false ;
7124: LD_ADDR_EXP 54
7128: PUSH
7129: LD_INT 0
7131: ST_TO_ADDR
// sPowell := false ;
7132: LD_ADDR_EXP 55
7136: PUSH
7137: LD_INT 0
7139: ST_TO_ADDR
// sTeleport := false ;
7140: LD_ADDR_EXP 58
7144: PUSH
7145: LD_INT 0
7147: ST_TO_ADDR
// sOilTower := false ;
7148: LD_ADDR_EXP 60
7152: PUSH
7153: LD_INT 0
7155: ST_TO_ADDR
// sShovel := false ;
7156: LD_ADDR_EXP 61
7160: PUSH
7161: LD_INT 0
7163: ST_TO_ADDR
// sSheik := false ;
7164: LD_ADDR_EXP 62
7168: PUSH
7169: LD_INT 0
7171: ST_TO_ADDR
// sEarthquake := false ;
7172: LD_ADDR_EXP 64
7176: PUSH
7177: LD_INT 0
7179: ST_TO_ADDR
// sAI := false ;
7180: LD_ADDR_EXP 65
7184: PUSH
7185: LD_INT 0
7187: ST_TO_ADDR
// sCargo := false ;
7188: LD_ADDR_EXP 68
7192: PUSH
7193: LD_INT 0
7195: ST_TO_ADDR
// sDLaser := false ;
7196: LD_ADDR_EXP 69
7200: PUSH
7201: LD_INT 0
7203: ST_TO_ADDR
// sExchange := false ;
7204: LD_ADDR_EXP 70
7208: PUSH
7209: LD_INT 0
7211: ST_TO_ADDR
// sFac := false ;
7212: LD_ADDR_EXP 71
7216: PUSH
7217: LD_INT 0
7219: ST_TO_ADDR
// sPower := false ;
7220: LD_ADDR_EXP 72
7224: PUSH
7225: LD_INT 0
7227: ST_TO_ADDR
// sRandom := false ;
7228: LD_ADDR_EXP 73
7232: PUSH
7233: LD_INT 0
7235: ST_TO_ADDR
// sShield := false ;
7236: LD_ADDR_EXP 74
7240: PUSH
7241: LD_INT 0
7243: ST_TO_ADDR
// sTime := false ;
7244: LD_ADDR_EXP 75
7248: PUSH
7249: LD_INT 0
7251: ST_TO_ADDR
// sTools := false ;
7252: LD_ADDR_EXP 76
7256: PUSH
7257: LD_INT 0
7259: ST_TO_ADDR
// sSold := false ;
7260: LD_ADDR_EXP 41
7264: PUSH
7265: LD_INT 0
7267: ST_TO_ADDR
// sDiff := false ;
7268: LD_ADDR_EXP 42
7272: PUSH
7273: LD_INT 0
7275: ST_TO_ADDR
// sFog := false ;
7276: LD_ADDR_EXP 45
7280: PUSH
7281: LD_INT 0
7283: ST_TO_ADDR
// sReset := false ;
7284: LD_ADDR_EXP 46
7288: PUSH
7289: LD_INT 0
7291: ST_TO_ADDR
// sSun := false ;
7292: LD_ADDR_EXP 47
7296: PUSH
7297: LD_INT 0
7299: ST_TO_ADDR
// sTiger := false ;
7300: LD_ADDR_EXP 43
7304: PUSH
7305: LD_INT 0
7307: ST_TO_ADDR
// sBomb := false ;
7308: LD_ADDR_EXP 44
7312: PUSH
7313: LD_INT 0
7315: ST_TO_ADDR
// sWound := false ;
7316: LD_ADDR_EXP 52
7320: PUSH
7321: LD_INT 0
7323: ST_TO_ADDR
// sBetray := false ;
7324: LD_ADDR_EXP 56
7328: PUSH
7329: LD_INT 0
7331: ST_TO_ADDR
// sContamin := false ;
7332: LD_ADDR_EXP 57
7336: PUSH
7337: LD_INT 0
7339: ST_TO_ADDR
// sOil := false ;
7340: LD_ADDR_EXP 59
7344: PUSH
7345: LD_INT 0
7347: ST_TO_ADDR
// sStu := false ;
7348: LD_ADDR_EXP 63
7352: PUSH
7353: LD_INT 0
7355: ST_TO_ADDR
// sBazooka := false ;
7356: LD_ADDR_EXP 66
7360: PUSH
7361: LD_INT 0
7363: ST_TO_ADDR
// sMortar := false ;
7364: LD_ADDR_EXP 67
7368: PUSH
7369: LD_INT 0
7371: ST_TO_ADDR
// sRanger := false ;
7372: LD_ADDR_EXP 77
7376: PUSH
7377: LD_INT 0
7379: ST_TO_ADDR
// end ;
7380: LD_VAR 0 1
7384: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
7385: LD_INT 0
7387: PPUSH
7388: PPUSH
7389: PPUSH
7390: PPUSH
7391: PPUSH
// result := [ ] ;
7392: LD_ADDR_VAR 0 1
7396: PUSH
7397: EMPTY
7398: ST_TO_ADDR
// if campaign_id = 1 then
7399: LD_OWVAR 69
7403: PUSH
7404: LD_INT 1
7406: EQUAL
7407: IFFALSE 10345
// begin case mission_number of 1 :
7409: LD_OWVAR 70
7413: PUSH
7414: LD_INT 1
7416: DOUBLE
7417: EQUAL
7418: IFTRUE 7422
7420: GO 7486
7422: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
7423: LD_ADDR_VAR 0 1
7427: PUSH
7428: LD_INT 2
7430: PUSH
7431: LD_INT 4
7433: PUSH
7434: LD_INT 11
7436: PUSH
7437: LD_INT 12
7439: PUSH
7440: LD_INT 15
7442: PUSH
7443: LD_INT 16
7445: PUSH
7446: LD_INT 22
7448: PUSH
7449: LD_INT 23
7451: PUSH
7452: LD_INT 26
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: PUSH
7466: LD_INT 101
7468: PUSH
7469: LD_INT 102
7471: PUSH
7472: LD_INT 106
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: LIST
7479: PUSH
7480: EMPTY
7481: LIST
7482: LIST
7483: ST_TO_ADDR
7484: GO 10343
7486: LD_INT 2
7488: DOUBLE
7489: EQUAL
7490: IFTRUE 7494
7492: GO 7566
7494: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
7495: LD_ADDR_VAR 0 1
7499: PUSH
7500: LD_INT 2
7502: PUSH
7503: LD_INT 4
7505: PUSH
7506: LD_INT 11
7508: PUSH
7509: LD_INT 12
7511: PUSH
7512: LD_INT 15
7514: PUSH
7515: LD_INT 16
7517: PUSH
7518: LD_INT 22
7520: PUSH
7521: LD_INT 23
7523: PUSH
7524: LD_INT 26
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: PUSH
7538: LD_INT 101
7540: PUSH
7541: LD_INT 102
7543: PUSH
7544: LD_INT 105
7546: PUSH
7547: LD_INT 106
7549: PUSH
7550: LD_INT 108
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: LIST
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: ST_TO_ADDR
7564: GO 10343
7566: LD_INT 3
7568: DOUBLE
7569: EQUAL
7570: IFTRUE 7574
7572: GO 7650
7574: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
7575: LD_ADDR_VAR 0 1
7579: PUSH
7580: LD_INT 2
7582: PUSH
7583: LD_INT 4
7585: PUSH
7586: LD_INT 5
7588: PUSH
7589: LD_INT 11
7591: PUSH
7592: LD_INT 12
7594: PUSH
7595: LD_INT 15
7597: PUSH
7598: LD_INT 16
7600: PUSH
7601: LD_INT 22
7603: PUSH
7604: LD_INT 26
7606: PUSH
7607: LD_INT 36
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 101
7624: PUSH
7625: LD_INT 102
7627: PUSH
7628: LD_INT 105
7630: PUSH
7631: LD_INT 106
7633: PUSH
7634: LD_INT 108
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: ST_TO_ADDR
7648: GO 10343
7650: LD_INT 4
7652: DOUBLE
7653: EQUAL
7654: IFTRUE 7658
7656: GO 7742
7658: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
7659: LD_ADDR_VAR 0 1
7663: PUSH
7664: LD_INT 2
7666: PUSH
7667: LD_INT 4
7669: PUSH
7670: LD_INT 5
7672: PUSH
7673: LD_INT 8
7675: PUSH
7676: LD_INT 11
7678: PUSH
7679: LD_INT 12
7681: PUSH
7682: LD_INT 15
7684: PUSH
7685: LD_INT 16
7687: PUSH
7688: LD_INT 22
7690: PUSH
7691: LD_INT 23
7693: PUSH
7694: LD_INT 26
7696: PUSH
7697: LD_INT 36
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: PUSH
7714: LD_INT 101
7716: PUSH
7717: LD_INT 102
7719: PUSH
7720: LD_INT 105
7722: PUSH
7723: LD_INT 106
7725: PUSH
7726: LD_INT 108
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: PUSH
7736: EMPTY
7737: LIST
7738: LIST
7739: ST_TO_ADDR
7740: GO 10343
7742: LD_INT 5
7744: DOUBLE
7745: EQUAL
7746: IFTRUE 7750
7748: GO 7850
7750: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
7751: LD_ADDR_VAR 0 1
7755: PUSH
7756: LD_INT 2
7758: PUSH
7759: LD_INT 4
7761: PUSH
7762: LD_INT 5
7764: PUSH
7765: LD_INT 6
7767: PUSH
7768: LD_INT 8
7770: PUSH
7771: LD_INT 11
7773: PUSH
7774: LD_INT 12
7776: PUSH
7777: LD_INT 15
7779: PUSH
7780: LD_INT 16
7782: PUSH
7783: LD_INT 22
7785: PUSH
7786: LD_INT 23
7788: PUSH
7789: LD_INT 25
7791: PUSH
7792: LD_INT 26
7794: PUSH
7795: LD_INT 36
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: PUSH
7814: LD_INT 101
7816: PUSH
7817: LD_INT 102
7819: PUSH
7820: LD_INT 105
7822: PUSH
7823: LD_INT 106
7825: PUSH
7826: LD_INT 108
7828: PUSH
7829: LD_INT 109
7831: PUSH
7832: LD_INT 112
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: ST_TO_ADDR
7848: GO 10343
7850: LD_INT 6
7852: DOUBLE
7853: EQUAL
7854: IFTRUE 7858
7856: GO 7978
7858: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
7859: LD_ADDR_VAR 0 1
7863: PUSH
7864: LD_INT 2
7866: PUSH
7867: LD_INT 4
7869: PUSH
7870: LD_INT 5
7872: PUSH
7873: LD_INT 6
7875: PUSH
7876: LD_INT 8
7878: PUSH
7879: LD_INT 11
7881: PUSH
7882: LD_INT 12
7884: PUSH
7885: LD_INT 15
7887: PUSH
7888: LD_INT 16
7890: PUSH
7891: LD_INT 20
7893: PUSH
7894: LD_INT 21
7896: PUSH
7897: LD_INT 22
7899: PUSH
7900: LD_INT 23
7902: PUSH
7903: LD_INT 25
7905: PUSH
7906: LD_INT 26
7908: PUSH
7909: LD_INT 30
7911: PUSH
7912: LD_INT 31
7914: PUSH
7915: LD_INT 32
7917: PUSH
7918: LD_INT 36
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: PUSH
7942: LD_INT 101
7944: PUSH
7945: LD_INT 102
7947: PUSH
7948: LD_INT 105
7950: PUSH
7951: LD_INT 106
7953: PUSH
7954: LD_INT 108
7956: PUSH
7957: LD_INT 109
7959: PUSH
7960: LD_INT 112
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: ST_TO_ADDR
7976: GO 10343
7978: LD_INT 7
7980: DOUBLE
7981: EQUAL
7982: IFTRUE 7986
7984: GO 8086
7986: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
7987: LD_ADDR_VAR 0 1
7991: PUSH
7992: LD_INT 2
7994: PUSH
7995: LD_INT 4
7997: PUSH
7998: LD_INT 5
8000: PUSH
8001: LD_INT 7
8003: PUSH
8004: LD_INT 11
8006: PUSH
8007: LD_INT 12
8009: PUSH
8010: LD_INT 15
8012: PUSH
8013: LD_INT 16
8015: PUSH
8016: LD_INT 20
8018: PUSH
8019: LD_INT 21
8021: PUSH
8022: LD_INT 22
8024: PUSH
8025: LD_INT 23
8027: PUSH
8028: LD_INT 25
8030: PUSH
8031: LD_INT 26
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: PUSH
8050: LD_INT 101
8052: PUSH
8053: LD_INT 102
8055: PUSH
8056: LD_INT 103
8058: PUSH
8059: LD_INT 105
8061: PUSH
8062: LD_INT 106
8064: PUSH
8065: LD_INT 108
8067: PUSH
8068: LD_INT 112
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: ST_TO_ADDR
8084: GO 10343
8086: LD_INT 8
8088: DOUBLE
8089: EQUAL
8090: IFTRUE 8094
8092: GO 8222
8094: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
8095: LD_ADDR_VAR 0 1
8099: PUSH
8100: LD_INT 2
8102: PUSH
8103: LD_INT 4
8105: PUSH
8106: LD_INT 5
8108: PUSH
8109: LD_INT 6
8111: PUSH
8112: LD_INT 7
8114: PUSH
8115: LD_INT 8
8117: PUSH
8118: LD_INT 11
8120: PUSH
8121: LD_INT 12
8123: PUSH
8124: LD_INT 15
8126: PUSH
8127: LD_INT 16
8129: PUSH
8130: LD_INT 20
8132: PUSH
8133: LD_INT 21
8135: PUSH
8136: LD_INT 22
8138: PUSH
8139: LD_INT 23
8141: PUSH
8142: LD_INT 25
8144: PUSH
8145: LD_INT 26
8147: PUSH
8148: LD_INT 30
8150: PUSH
8151: LD_INT 31
8153: PUSH
8154: LD_INT 32
8156: PUSH
8157: LD_INT 36
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: LIST
8181: PUSH
8182: LD_INT 101
8184: PUSH
8185: LD_INT 102
8187: PUSH
8188: LD_INT 103
8190: PUSH
8191: LD_INT 105
8193: PUSH
8194: LD_INT 106
8196: PUSH
8197: LD_INT 108
8199: PUSH
8200: LD_INT 109
8202: PUSH
8203: LD_INT 112
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: ST_TO_ADDR
8220: GO 10343
8222: LD_INT 9
8224: DOUBLE
8225: EQUAL
8226: IFTRUE 8230
8228: GO 8366
8230: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
8231: LD_ADDR_VAR 0 1
8235: PUSH
8236: LD_INT 2
8238: PUSH
8239: LD_INT 4
8241: PUSH
8242: LD_INT 5
8244: PUSH
8245: LD_INT 6
8247: PUSH
8248: LD_INT 7
8250: PUSH
8251: LD_INT 8
8253: PUSH
8254: LD_INT 11
8256: PUSH
8257: LD_INT 12
8259: PUSH
8260: LD_INT 15
8262: PUSH
8263: LD_INT 16
8265: PUSH
8266: LD_INT 20
8268: PUSH
8269: LD_INT 21
8271: PUSH
8272: LD_INT 22
8274: PUSH
8275: LD_INT 23
8277: PUSH
8278: LD_INT 25
8280: PUSH
8281: LD_INT 26
8283: PUSH
8284: LD_INT 28
8286: PUSH
8287: LD_INT 30
8289: PUSH
8290: LD_INT 31
8292: PUSH
8293: LD_INT 32
8295: PUSH
8296: LD_INT 36
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: PUSH
8322: LD_INT 101
8324: PUSH
8325: LD_INT 102
8327: PUSH
8328: LD_INT 103
8330: PUSH
8331: LD_INT 105
8333: PUSH
8334: LD_INT 106
8336: PUSH
8337: LD_INT 108
8339: PUSH
8340: LD_INT 109
8342: PUSH
8343: LD_INT 112
8345: PUSH
8346: LD_INT 114
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: PUSH
8360: EMPTY
8361: LIST
8362: LIST
8363: ST_TO_ADDR
8364: GO 10343
8366: LD_INT 10
8368: DOUBLE
8369: EQUAL
8370: IFTRUE 8374
8372: GO 8558
8374: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
8375: LD_ADDR_VAR 0 1
8379: PUSH
8380: LD_INT 2
8382: PUSH
8383: LD_INT 4
8385: PUSH
8386: LD_INT 5
8388: PUSH
8389: LD_INT 6
8391: PUSH
8392: LD_INT 7
8394: PUSH
8395: LD_INT 8
8397: PUSH
8398: LD_INT 9
8400: PUSH
8401: LD_INT 10
8403: PUSH
8404: LD_INT 11
8406: PUSH
8407: LD_INT 12
8409: PUSH
8410: LD_INT 13
8412: PUSH
8413: LD_INT 14
8415: PUSH
8416: LD_INT 15
8418: PUSH
8419: LD_INT 16
8421: PUSH
8422: LD_INT 17
8424: PUSH
8425: LD_INT 18
8427: PUSH
8428: LD_INT 19
8430: PUSH
8431: LD_INT 20
8433: PUSH
8434: LD_INT 21
8436: PUSH
8437: LD_INT 22
8439: PUSH
8440: LD_INT 23
8442: PUSH
8443: LD_INT 24
8445: PUSH
8446: LD_INT 25
8448: PUSH
8449: LD_INT 26
8451: PUSH
8452: LD_INT 28
8454: PUSH
8455: LD_INT 30
8457: PUSH
8458: LD_INT 31
8460: PUSH
8461: LD_INT 32
8463: PUSH
8464: LD_INT 36
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: PUSH
8498: LD_INT 101
8500: PUSH
8501: LD_INT 102
8503: PUSH
8504: LD_INT 103
8506: PUSH
8507: LD_INT 104
8509: PUSH
8510: LD_INT 105
8512: PUSH
8513: LD_INT 106
8515: PUSH
8516: LD_INT 107
8518: PUSH
8519: LD_INT 108
8521: PUSH
8522: LD_INT 109
8524: PUSH
8525: LD_INT 110
8527: PUSH
8528: LD_INT 111
8530: PUSH
8531: LD_INT 112
8533: PUSH
8534: LD_INT 114
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: ST_TO_ADDR
8556: GO 10343
8558: LD_INT 11
8560: DOUBLE
8561: EQUAL
8562: IFTRUE 8566
8564: GO 8758
8566: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
8567: LD_ADDR_VAR 0 1
8571: PUSH
8572: LD_INT 2
8574: PUSH
8575: LD_INT 3
8577: PUSH
8578: LD_INT 4
8580: PUSH
8581: LD_INT 5
8583: PUSH
8584: LD_INT 6
8586: PUSH
8587: LD_INT 7
8589: PUSH
8590: LD_INT 8
8592: PUSH
8593: LD_INT 9
8595: PUSH
8596: LD_INT 10
8598: PUSH
8599: LD_INT 11
8601: PUSH
8602: LD_INT 12
8604: PUSH
8605: LD_INT 13
8607: PUSH
8608: LD_INT 14
8610: PUSH
8611: LD_INT 15
8613: PUSH
8614: LD_INT 16
8616: PUSH
8617: LD_INT 17
8619: PUSH
8620: LD_INT 18
8622: PUSH
8623: LD_INT 19
8625: PUSH
8626: LD_INT 20
8628: PUSH
8629: LD_INT 21
8631: PUSH
8632: LD_INT 22
8634: PUSH
8635: LD_INT 23
8637: PUSH
8638: LD_INT 24
8640: PUSH
8641: LD_INT 25
8643: PUSH
8644: LD_INT 26
8646: PUSH
8647: LD_INT 28
8649: PUSH
8650: LD_INT 30
8652: PUSH
8653: LD_INT 31
8655: PUSH
8656: LD_INT 32
8658: PUSH
8659: LD_INT 34
8661: PUSH
8662: LD_INT 36
8664: PUSH
8665: EMPTY
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: PUSH
8698: LD_INT 101
8700: PUSH
8701: LD_INT 102
8703: PUSH
8704: LD_INT 103
8706: PUSH
8707: LD_INT 104
8709: PUSH
8710: LD_INT 105
8712: PUSH
8713: LD_INT 106
8715: PUSH
8716: LD_INT 107
8718: PUSH
8719: LD_INT 108
8721: PUSH
8722: LD_INT 109
8724: PUSH
8725: LD_INT 110
8727: PUSH
8728: LD_INT 111
8730: PUSH
8731: LD_INT 112
8733: PUSH
8734: LD_INT 114
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: ST_TO_ADDR
8756: GO 10343
8758: LD_INT 12
8760: DOUBLE
8761: EQUAL
8762: IFTRUE 8766
8764: GO 8974
8766: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
8767: LD_ADDR_VAR 0 1
8771: PUSH
8772: LD_INT 1
8774: PUSH
8775: LD_INT 2
8777: PUSH
8778: LD_INT 3
8780: PUSH
8781: LD_INT 4
8783: PUSH
8784: LD_INT 5
8786: PUSH
8787: LD_INT 6
8789: PUSH
8790: LD_INT 7
8792: PUSH
8793: LD_INT 8
8795: PUSH
8796: LD_INT 9
8798: PUSH
8799: LD_INT 10
8801: PUSH
8802: LD_INT 11
8804: PUSH
8805: LD_INT 12
8807: PUSH
8808: LD_INT 13
8810: PUSH
8811: LD_INT 14
8813: PUSH
8814: LD_INT 15
8816: PUSH
8817: LD_INT 16
8819: PUSH
8820: LD_INT 17
8822: PUSH
8823: LD_INT 18
8825: PUSH
8826: LD_INT 19
8828: PUSH
8829: LD_INT 20
8831: PUSH
8832: LD_INT 21
8834: PUSH
8835: LD_INT 22
8837: PUSH
8838: LD_INT 23
8840: PUSH
8841: LD_INT 24
8843: PUSH
8844: LD_INT 25
8846: PUSH
8847: LD_INT 26
8849: PUSH
8850: LD_INT 27
8852: PUSH
8853: LD_INT 28
8855: PUSH
8856: LD_INT 30
8858: PUSH
8859: LD_INT 31
8861: PUSH
8862: LD_INT 32
8864: PUSH
8865: LD_INT 33
8867: PUSH
8868: LD_INT 34
8870: PUSH
8871: LD_INT 36
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: PUSH
8910: LD_INT 101
8912: PUSH
8913: LD_INT 102
8915: PUSH
8916: LD_INT 103
8918: PUSH
8919: LD_INT 104
8921: PUSH
8922: LD_INT 105
8924: PUSH
8925: LD_INT 106
8927: PUSH
8928: LD_INT 107
8930: PUSH
8931: LD_INT 108
8933: PUSH
8934: LD_INT 109
8936: PUSH
8937: LD_INT 110
8939: PUSH
8940: LD_INT 111
8942: PUSH
8943: LD_INT 112
8945: PUSH
8946: LD_INT 113
8948: PUSH
8949: LD_INT 114
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: PUSH
8968: EMPTY
8969: LIST
8970: LIST
8971: ST_TO_ADDR
8972: GO 10343
8974: LD_INT 13
8976: DOUBLE
8977: EQUAL
8978: IFTRUE 8982
8980: GO 9178
8982: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
8983: LD_ADDR_VAR 0 1
8987: PUSH
8988: LD_INT 1
8990: PUSH
8991: LD_INT 2
8993: PUSH
8994: LD_INT 3
8996: PUSH
8997: LD_INT 4
8999: PUSH
9000: LD_INT 5
9002: PUSH
9003: LD_INT 8
9005: PUSH
9006: LD_INT 9
9008: PUSH
9009: LD_INT 10
9011: PUSH
9012: LD_INT 11
9014: PUSH
9015: LD_INT 12
9017: PUSH
9018: LD_INT 14
9020: PUSH
9021: LD_INT 15
9023: PUSH
9024: LD_INT 16
9026: PUSH
9027: LD_INT 17
9029: PUSH
9030: LD_INT 18
9032: PUSH
9033: LD_INT 19
9035: PUSH
9036: LD_INT 20
9038: PUSH
9039: LD_INT 21
9041: PUSH
9042: LD_INT 22
9044: PUSH
9045: LD_INT 23
9047: PUSH
9048: LD_INT 24
9050: PUSH
9051: LD_INT 25
9053: PUSH
9054: LD_INT 26
9056: PUSH
9057: LD_INT 27
9059: PUSH
9060: LD_INT 28
9062: PUSH
9063: LD_INT 30
9065: PUSH
9066: LD_INT 31
9068: PUSH
9069: LD_INT 32
9071: PUSH
9072: LD_INT 33
9074: PUSH
9075: LD_INT 34
9077: PUSH
9078: LD_INT 36
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: PUSH
9114: LD_INT 101
9116: PUSH
9117: LD_INT 102
9119: PUSH
9120: LD_INT 103
9122: PUSH
9123: LD_INT 104
9125: PUSH
9126: LD_INT 105
9128: PUSH
9129: LD_INT 106
9131: PUSH
9132: LD_INT 107
9134: PUSH
9135: LD_INT 108
9137: PUSH
9138: LD_INT 109
9140: PUSH
9141: LD_INT 110
9143: PUSH
9144: LD_INT 111
9146: PUSH
9147: LD_INT 112
9149: PUSH
9150: LD_INT 113
9152: PUSH
9153: LD_INT 114
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: ST_TO_ADDR
9176: GO 10343
9178: LD_INT 14
9180: DOUBLE
9181: EQUAL
9182: IFTRUE 9186
9184: GO 9398
9186: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
9187: LD_ADDR_VAR 0 1
9191: PUSH
9192: LD_INT 1
9194: PUSH
9195: LD_INT 2
9197: PUSH
9198: LD_INT 3
9200: PUSH
9201: LD_INT 4
9203: PUSH
9204: LD_INT 5
9206: PUSH
9207: LD_INT 6
9209: PUSH
9210: LD_INT 7
9212: PUSH
9213: LD_INT 8
9215: PUSH
9216: LD_INT 9
9218: PUSH
9219: LD_INT 10
9221: PUSH
9222: LD_INT 11
9224: PUSH
9225: LD_INT 12
9227: PUSH
9228: LD_INT 13
9230: PUSH
9231: LD_INT 14
9233: PUSH
9234: LD_INT 15
9236: PUSH
9237: LD_INT 16
9239: PUSH
9240: LD_INT 17
9242: PUSH
9243: LD_INT 18
9245: PUSH
9246: LD_INT 19
9248: PUSH
9249: LD_INT 20
9251: PUSH
9252: LD_INT 21
9254: PUSH
9255: LD_INT 22
9257: PUSH
9258: LD_INT 23
9260: PUSH
9261: LD_INT 24
9263: PUSH
9264: LD_INT 25
9266: PUSH
9267: LD_INT 26
9269: PUSH
9270: LD_INT 27
9272: PUSH
9273: LD_INT 28
9275: PUSH
9276: LD_INT 29
9278: PUSH
9279: LD_INT 30
9281: PUSH
9282: LD_INT 31
9284: PUSH
9285: LD_INT 32
9287: PUSH
9288: LD_INT 33
9290: PUSH
9291: LD_INT 34
9293: PUSH
9294: LD_INT 36
9296: PUSH
9297: EMPTY
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: PUSH
9334: LD_INT 101
9336: PUSH
9337: LD_INT 102
9339: PUSH
9340: LD_INT 103
9342: PUSH
9343: LD_INT 104
9345: PUSH
9346: LD_INT 105
9348: PUSH
9349: LD_INT 106
9351: PUSH
9352: LD_INT 107
9354: PUSH
9355: LD_INT 108
9357: PUSH
9358: LD_INT 109
9360: PUSH
9361: LD_INT 110
9363: PUSH
9364: LD_INT 111
9366: PUSH
9367: LD_INT 112
9369: PUSH
9370: LD_INT 113
9372: PUSH
9373: LD_INT 114
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: PUSH
9392: EMPTY
9393: LIST
9394: LIST
9395: ST_TO_ADDR
9396: GO 10343
9398: LD_INT 15
9400: DOUBLE
9401: EQUAL
9402: IFTRUE 9406
9404: GO 9618
9406: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
9407: LD_ADDR_VAR 0 1
9411: PUSH
9412: LD_INT 1
9414: PUSH
9415: LD_INT 2
9417: PUSH
9418: LD_INT 3
9420: PUSH
9421: LD_INT 4
9423: PUSH
9424: LD_INT 5
9426: PUSH
9427: LD_INT 6
9429: PUSH
9430: LD_INT 7
9432: PUSH
9433: LD_INT 8
9435: PUSH
9436: LD_INT 9
9438: PUSH
9439: LD_INT 10
9441: PUSH
9442: LD_INT 11
9444: PUSH
9445: LD_INT 12
9447: PUSH
9448: LD_INT 13
9450: PUSH
9451: LD_INT 14
9453: PUSH
9454: LD_INT 15
9456: PUSH
9457: LD_INT 16
9459: PUSH
9460: LD_INT 17
9462: PUSH
9463: LD_INT 18
9465: PUSH
9466: LD_INT 19
9468: PUSH
9469: LD_INT 20
9471: PUSH
9472: LD_INT 21
9474: PUSH
9475: LD_INT 22
9477: PUSH
9478: LD_INT 23
9480: PUSH
9481: LD_INT 24
9483: PUSH
9484: LD_INT 25
9486: PUSH
9487: LD_INT 26
9489: PUSH
9490: LD_INT 27
9492: PUSH
9493: LD_INT 28
9495: PUSH
9496: LD_INT 29
9498: PUSH
9499: LD_INT 30
9501: PUSH
9502: LD_INT 31
9504: PUSH
9505: LD_INT 32
9507: PUSH
9508: LD_INT 33
9510: PUSH
9511: LD_INT 34
9513: PUSH
9514: LD_INT 36
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: LIST
9553: PUSH
9554: LD_INT 101
9556: PUSH
9557: LD_INT 102
9559: PUSH
9560: LD_INT 103
9562: PUSH
9563: LD_INT 104
9565: PUSH
9566: LD_INT 105
9568: PUSH
9569: LD_INT 106
9571: PUSH
9572: LD_INT 107
9574: PUSH
9575: LD_INT 108
9577: PUSH
9578: LD_INT 109
9580: PUSH
9581: LD_INT 110
9583: PUSH
9584: LD_INT 111
9586: PUSH
9587: LD_INT 112
9589: PUSH
9590: LD_INT 113
9592: PUSH
9593: LD_INT 114
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: ST_TO_ADDR
9616: GO 10343
9618: LD_INT 16
9620: DOUBLE
9621: EQUAL
9622: IFTRUE 9626
9624: GO 9750
9626: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
9627: LD_ADDR_VAR 0 1
9631: PUSH
9632: LD_INT 2
9634: PUSH
9635: LD_INT 4
9637: PUSH
9638: LD_INT 5
9640: PUSH
9641: LD_INT 7
9643: PUSH
9644: LD_INT 11
9646: PUSH
9647: LD_INT 12
9649: PUSH
9650: LD_INT 15
9652: PUSH
9653: LD_INT 16
9655: PUSH
9656: LD_INT 20
9658: PUSH
9659: LD_INT 21
9661: PUSH
9662: LD_INT 22
9664: PUSH
9665: LD_INT 23
9667: PUSH
9668: LD_INT 25
9670: PUSH
9671: LD_INT 26
9673: PUSH
9674: LD_INT 30
9676: PUSH
9677: LD_INT 31
9679: PUSH
9680: LD_INT 32
9682: PUSH
9683: LD_INT 33
9685: PUSH
9686: LD_INT 34
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: PUSH
9710: LD_INT 101
9712: PUSH
9713: LD_INT 102
9715: PUSH
9716: LD_INT 103
9718: PUSH
9719: LD_INT 106
9721: PUSH
9722: LD_INT 108
9724: PUSH
9725: LD_INT 112
9727: PUSH
9728: LD_INT 113
9730: PUSH
9731: LD_INT 114
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: ST_TO_ADDR
9748: GO 10343
9750: LD_INT 17
9752: DOUBLE
9753: EQUAL
9754: IFTRUE 9758
9756: GO 9970
9758: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
9759: LD_ADDR_VAR 0 1
9763: PUSH
9764: LD_INT 1
9766: PUSH
9767: LD_INT 2
9769: PUSH
9770: LD_INT 3
9772: PUSH
9773: LD_INT 4
9775: PUSH
9776: LD_INT 5
9778: PUSH
9779: LD_INT 6
9781: PUSH
9782: LD_INT 7
9784: PUSH
9785: LD_INT 8
9787: PUSH
9788: LD_INT 9
9790: PUSH
9791: LD_INT 10
9793: PUSH
9794: LD_INT 11
9796: PUSH
9797: LD_INT 12
9799: PUSH
9800: LD_INT 13
9802: PUSH
9803: LD_INT 14
9805: PUSH
9806: LD_INT 15
9808: PUSH
9809: LD_INT 16
9811: PUSH
9812: LD_INT 17
9814: PUSH
9815: LD_INT 18
9817: PUSH
9818: LD_INT 19
9820: PUSH
9821: LD_INT 20
9823: PUSH
9824: LD_INT 21
9826: PUSH
9827: LD_INT 22
9829: PUSH
9830: LD_INT 23
9832: PUSH
9833: LD_INT 24
9835: PUSH
9836: LD_INT 25
9838: PUSH
9839: LD_INT 26
9841: PUSH
9842: LD_INT 27
9844: PUSH
9845: LD_INT 28
9847: PUSH
9848: LD_INT 29
9850: PUSH
9851: LD_INT 30
9853: PUSH
9854: LD_INT 31
9856: PUSH
9857: LD_INT 32
9859: PUSH
9860: LD_INT 33
9862: PUSH
9863: LD_INT 34
9865: PUSH
9866: LD_INT 36
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: PUSH
9906: LD_INT 101
9908: PUSH
9909: LD_INT 102
9911: PUSH
9912: LD_INT 103
9914: PUSH
9915: LD_INT 104
9917: PUSH
9918: LD_INT 105
9920: PUSH
9921: LD_INT 106
9923: PUSH
9924: LD_INT 107
9926: PUSH
9927: LD_INT 108
9929: PUSH
9930: LD_INT 109
9932: PUSH
9933: LD_INT 110
9935: PUSH
9936: LD_INT 111
9938: PUSH
9939: LD_INT 112
9941: PUSH
9942: LD_INT 113
9944: PUSH
9945: LD_INT 114
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: ST_TO_ADDR
9968: GO 10343
9970: LD_INT 18
9972: DOUBLE
9973: EQUAL
9974: IFTRUE 9978
9976: GO 10114
9978: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
9979: LD_ADDR_VAR 0 1
9983: PUSH
9984: LD_INT 2
9986: PUSH
9987: LD_INT 4
9989: PUSH
9990: LD_INT 5
9992: PUSH
9993: LD_INT 7
9995: PUSH
9996: LD_INT 11
9998: PUSH
9999: LD_INT 12
10001: PUSH
10002: LD_INT 15
10004: PUSH
10005: LD_INT 16
10007: PUSH
10008: LD_INT 20
10010: PUSH
10011: LD_INT 21
10013: PUSH
10014: LD_INT 22
10016: PUSH
10017: LD_INT 23
10019: PUSH
10020: LD_INT 25
10022: PUSH
10023: LD_INT 26
10025: PUSH
10026: LD_INT 30
10028: PUSH
10029: LD_INT 31
10031: PUSH
10032: LD_INT 32
10034: PUSH
10035: LD_INT 33
10037: PUSH
10038: LD_INT 34
10040: PUSH
10041: LD_INT 35
10043: PUSH
10044: LD_INT 36
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: PUSH
10070: LD_INT 101
10072: PUSH
10073: LD_INT 102
10075: PUSH
10076: LD_INT 103
10078: PUSH
10079: LD_INT 106
10081: PUSH
10082: LD_INT 108
10084: PUSH
10085: LD_INT 112
10087: PUSH
10088: LD_INT 113
10090: PUSH
10091: LD_INT 114
10093: PUSH
10094: LD_INT 115
10096: PUSH
10097: EMPTY
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: ST_TO_ADDR
10112: GO 10343
10114: LD_INT 19
10116: DOUBLE
10117: EQUAL
10118: IFTRUE 10122
10120: GO 10342
10122: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
10123: LD_ADDR_VAR 0 1
10127: PUSH
10128: LD_INT 1
10130: PUSH
10131: LD_INT 2
10133: PUSH
10134: LD_INT 3
10136: PUSH
10137: LD_INT 4
10139: PUSH
10140: LD_INT 5
10142: PUSH
10143: LD_INT 6
10145: PUSH
10146: LD_INT 7
10148: PUSH
10149: LD_INT 8
10151: PUSH
10152: LD_INT 9
10154: PUSH
10155: LD_INT 10
10157: PUSH
10158: LD_INT 11
10160: PUSH
10161: LD_INT 12
10163: PUSH
10164: LD_INT 13
10166: PUSH
10167: LD_INT 14
10169: PUSH
10170: LD_INT 15
10172: PUSH
10173: LD_INT 16
10175: PUSH
10176: LD_INT 17
10178: PUSH
10179: LD_INT 18
10181: PUSH
10182: LD_INT 19
10184: PUSH
10185: LD_INT 20
10187: PUSH
10188: LD_INT 21
10190: PUSH
10191: LD_INT 22
10193: PUSH
10194: LD_INT 23
10196: PUSH
10197: LD_INT 24
10199: PUSH
10200: LD_INT 25
10202: PUSH
10203: LD_INT 26
10205: PUSH
10206: LD_INT 27
10208: PUSH
10209: LD_INT 28
10211: PUSH
10212: LD_INT 29
10214: PUSH
10215: LD_INT 30
10217: PUSH
10218: LD_INT 31
10220: PUSH
10221: LD_INT 32
10223: PUSH
10224: LD_INT 33
10226: PUSH
10227: LD_INT 34
10229: PUSH
10230: LD_INT 35
10232: PUSH
10233: LD_INT 36
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: PUSH
10274: LD_INT 101
10276: PUSH
10277: LD_INT 102
10279: PUSH
10280: LD_INT 103
10282: PUSH
10283: LD_INT 104
10285: PUSH
10286: LD_INT 105
10288: PUSH
10289: LD_INT 106
10291: PUSH
10292: LD_INT 107
10294: PUSH
10295: LD_INT 108
10297: PUSH
10298: LD_INT 109
10300: PUSH
10301: LD_INT 110
10303: PUSH
10304: LD_INT 111
10306: PUSH
10307: LD_INT 112
10309: PUSH
10310: LD_INT 113
10312: PUSH
10313: LD_INT 114
10315: PUSH
10316: LD_INT 115
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: ST_TO_ADDR
10340: GO 10343
10342: POP
// end else
10343: GO 10562
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
10345: LD_ADDR_VAR 0 1
10349: PUSH
10350: LD_INT 1
10352: PUSH
10353: LD_INT 2
10355: PUSH
10356: LD_INT 3
10358: PUSH
10359: LD_INT 4
10361: PUSH
10362: LD_INT 5
10364: PUSH
10365: LD_INT 6
10367: PUSH
10368: LD_INT 7
10370: PUSH
10371: LD_INT 8
10373: PUSH
10374: LD_INT 9
10376: PUSH
10377: LD_INT 10
10379: PUSH
10380: LD_INT 11
10382: PUSH
10383: LD_INT 12
10385: PUSH
10386: LD_INT 13
10388: PUSH
10389: LD_INT 14
10391: PUSH
10392: LD_INT 15
10394: PUSH
10395: LD_INT 16
10397: PUSH
10398: LD_INT 17
10400: PUSH
10401: LD_INT 18
10403: PUSH
10404: LD_INT 19
10406: PUSH
10407: LD_INT 20
10409: PUSH
10410: LD_INT 21
10412: PUSH
10413: LD_INT 22
10415: PUSH
10416: LD_INT 23
10418: PUSH
10419: LD_INT 24
10421: PUSH
10422: LD_INT 25
10424: PUSH
10425: LD_INT 26
10427: PUSH
10428: LD_INT 27
10430: PUSH
10431: LD_INT 28
10433: PUSH
10434: LD_INT 29
10436: PUSH
10437: LD_INT 30
10439: PUSH
10440: LD_INT 31
10442: PUSH
10443: LD_INT 32
10445: PUSH
10446: LD_INT 33
10448: PUSH
10449: LD_INT 34
10451: PUSH
10452: LD_INT 35
10454: PUSH
10455: LD_INT 36
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: PUSH
10496: LD_INT 101
10498: PUSH
10499: LD_INT 102
10501: PUSH
10502: LD_INT 103
10504: PUSH
10505: LD_INT 104
10507: PUSH
10508: LD_INT 105
10510: PUSH
10511: LD_INT 106
10513: PUSH
10514: LD_INT 107
10516: PUSH
10517: LD_INT 108
10519: PUSH
10520: LD_INT 109
10522: PUSH
10523: LD_INT 110
10525: PUSH
10526: LD_INT 111
10528: PUSH
10529: LD_INT 112
10531: PUSH
10532: LD_INT 113
10534: PUSH
10535: LD_INT 114
10537: PUSH
10538: LD_INT 115
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: ST_TO_ADDR
// if result then
10562: LD_VAR 0 1
10566: IFFALSE 10855
// begin normal :=  ;
10568: LD_ADDR_VAR 0 3
10572: PUSH
10573: LD_STRING 
10575: ST_TO_ADDR
// hardcore :=  ;
10576: LD_ADDR_VAR 0 4
10580: PUSH
10581: LD_STRING 
10583: ST_TO_ADDR
// for i = 1 to normalCounter do
10584: LD_ADDR_VAR 0 5
10588: PUSH
10589: DOUBLE
10590: LD_INT 1
10592: DEC
10593: ST_TO_ADDR
10594: LD_EXP 25
10598: PUSH
10599: FOR_TO
10600: IFFALSE 10701
// begin tmp := 0 ;
10602: LD_ADDR_VAR 0 2
10606: PUSH
10607: LD_STRING 0
10609: ST_TO_ADDR
// if result [ 1 ] then
10610: LD_VAR 0 1
10614: PUSH
10615: LD_INT 1
10617: ARRAY
10618: IFFALSE 10683
// if result [ 1 ] [ 1 ] = i then
10620: LD_VAR 0 1
10624: PUSH
10625: LD_INT 1
10627: ARRAY
10628: PUSH
10629: LD_INT 1
10631: ARRAY
10632: PUSH
10633: LD_VAR 0 5
10637: EQUAL
10638: IFFALSE 10683
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10640: LD_ADDR_VAR 0 1
10644: PUSH
10645: LD_VAR 0 1
10649: PPUSH
10650: LD_INT 1
10652: PPUSH
10653: LD_VAR 0 1
10657: PUSH
10658: LD_INT 1
10660: ARRAY
10661: PPUSH
10662: LD_INT 1
10664: PPUSH
10665: CALL_OW 3
10669: PPUSH
10670: CALL_OW 1
10674: ST_TO_ADDR
// tmp := 1 ;
10675: LD_ADDR_VAR 0 2
10679: PUSH
10680: LD_STRING 1
10682: ST_TO_ADDR
// end ; normal := normal & tmp ;
10683: LD_ADDR_VAR 0 3
10687: PUSH
10688: LD_VAR 0 3
10692: PUSH
10693: LD_VAR 0 2
10697: STR
10698: ST_TO_ADDR
// end ;
10699: GO 10599
10701: POP
10702: POP
// for i = 1 to hardcoreCounter do
10703: LD_ADDR_VAR 0 5
10707: PUSH
10708: DOUBLE
10709: LD_INT 1
10711: DEC
10712: ST_TO_ADDR
10713: LD_EXP 26
10717: PUSH
10718: FOR_TO
10719: IFFALSE 10824
// begin tmp := 0 ;
10721: LD_ADDR_VAR 0 2
10725: PUSH
10726: LD_STRING 0
10728: ST_TO_ADDR
// if result [ 2 ] then
10729: LD_VAR 0 1
10733: PUSH
10734: LD_INT 2
10736: ARRAY
10737: IFFALSE 10806
// if result [ 2 ] [ 1 ] = 100 + i then
10739: LD_VAR 0 1
10743: PUSH
10744: LD_INT 2
10746: ARRAY
10747: PUSH
10748: LD_INT 1
10750: ARRAY
10751: PUSH
10752: LD_INT 100
10754: PUSH
10755: LD_VAR 0 5
10759: PLUS
10760: EQUAL
10761: IFFALSE 10806
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10763: LD_ADDR_VAR 0 1
10767: PUSH
10768: LD_VAR 0 1
10772: PPUSH
10773: LD_INT 2
10775: PPUSH
10776: LD_VAR 0 1
10780: PUSH
10781: LD_INT 2
10783: ARRAY
10784: PPUSH
10785: LD_INT 1
10787: PPUSH
10788: CALL_OW 3
10792: PPUSH
10793: CALL_OW 1
10797: ST_TO_ADDR
// tmp := 1 ;
10798: LD_ADDR_VAR 0 2
10802: PUSH
10803: LD_STRING 1
10805: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10806: LD_ADDR_VAR 0 4
10810: PUSH
10811: LD_VAR 0 4
10815: PUSH
10816: LD_VAR 0 2
10820: STR
10821: ST_TO_ADDR
// end ;
10822: GO 10718
10824: POP
10825: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
10826: LD_STRING getStreamItemsFromMission("
10828: PUSH
10829: LD_VAR 0 3
10833: STR
10834: PUSH
10835: LD_STRING ","
10837: STR
10838: PUSH
10839: LD_VAR 0 4
10843: STR
10844: PUSH
10845: LD_STRING ")
10847: STR
10848: PPUSH
10849: CALL_OW 559
// end else
10853: GO 10862
// ToLua ( getStreamItemsFromMission("","") ) ;
10855: LD_STRING getStreamItemsFromMission("","")
10857: PPUSH
10858: CALL_OW 559
// end ;
10862: LD_VAR 0 1
10866: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10867: LD_EXP 24
10871: PUSH
10872: LD_EXP 29
10876: AND
10877: IFFALSE 11001
10879: GO 10881
10881: DISABLE
10882: LD_INT 0
10884: PPUSH
10885: PPUSH
// begin enable ;
10886: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10887: LD_ADDR_VAR 0 2
10891: PUSH
10892: LD_INT 22
10894: PUSH
10895: LD_OWVAR 2
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: PUSH
10904: LD_INT 2
10906: PUSH
10907: LD_INT 34
10909: PUSH
10910: LD_INT 7
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: PUSH
10917: LD_INT 34
10919: PUSH
10920: LD_INT 45
10922: PUSH
10923: EMPTY
10924: LIST
10925: LIST
10926: PUSH
10927: LD_INT 34
10929: PUSH
10930: LD_INT 28
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: PUSH
10937: LD_INT 34
10939: PUSH
10940: LD_INT 47
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: PUSH
10954: EMPTY
10955: LIST
10956: LIST
10957: PPUSH
10958: CALL_OW 69
10962: ST_TO_ADDR
// if not tmp then
10963: LD_VAR 0 2
10967: NOT
10968: IFFALSE 10972
// exit ;
10970: GO 11001
// for i in tmp do
10972: LD_ADDR_VAR 0 1
10976: PUSH
10977: LD_VAR 0 2
10981: PUSH
10982: FOR_IN
10983: IFFALSE 10999
// begin SetLives ( i , 0 ) ;
10985: LD_VAR 0 1
10989: PPUSH
10990: LD_INT 0
10992: PPUSH
10993: CALL_OW 234
// end ;
10997: GO 10982
10999: POP
11000: POP
// end ;
11001: PPOPN 2
11003: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11004: LD_EXP 24
11008: PUSH
11009: LD_EXP 30
11013: AND
11014: IFFALSE 11098
11016: GO 11018
11018: DISABLE
11019: LD_INT 0
11021: PPUSH
11022: PPUSH
// begin enable ;
11023: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11024: LD_ADDR_VAR 0 2
11028: PUSH
11029: LD_INT 22
11031: PUSH
11032: LD_OWVAR 2
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: PUSH
11041: LD_INT 32
11043: PUSH
11044: LD_INT 3
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: PPUSH
11055: CALL_OW 69
11059: ST_TO_ADDR
// if not tmp then
11060: LD_VAR 0 2
11064: NOT
11065: IFFALSE 11069
// exit ;
11067: GO 11098
// for i in tmp do
11069: LD_ADDR_VAR 0 1
11073: PUSH
11074: LD_VAR 0 2
11078: PUSH
11079: FOR_IN
11080: IFFALSE 11096
// begin SetLives ( i , 0 ) ;
11082: LD_VAR 0 1
11086: PPUSH
11087: LD_INT 0
11089: PPUSH
11090: CALL_OW 234
// end ;
11094: GO 11079
11096: POP
11097: POP
// end ;
11098: PPOPN 2
11100: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11101: LD_EXP 24
11105: PUSH
11106: LD_EXP 27
11110: AND
11111: IFFALSE 11204
11113: GO 11115
11115: DISABLE
11116: LD_INT 0
11118: PPUSH
// begin enable ;
11119: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11120: LD_ADDR_VAR 0 1
11124: PUSH
11125: LD_INT 22
11127: PUSH
11128: LD_OWVAR 2
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 2
11139: PUSH
11140: LD_INT 25
11142: PUSH
11143: LD_INT 5
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: LD_INT 25
11152: PUSH
11153: LD_INT 9
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PUSH
11160: LD_INT 25
11162: PUSH
11163: LD_INT 8
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: PPUSH
11180: CALL_OW 69
11184: PUSH
11185: FOR_IN
11186: IFFALSE 11202
// begin SetClass ( i , 1 ) ;
11188: LD_VAR 0 1
11192: PPUSH
11193: LD_INT 1
11195: PPUSH
11196: CALL_OW 336
// end ;
11200: GO 11185
11202: POP
11203: POP
// end ;
11204: PPOPN 1
11206: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11207: LD_EXP 24
11211: PUSH
11212: LD_EXP 28
11216: AND
11217: PUSH
11218: LD_OWVAR 65
11222: PUSH
11223: LD_INT 7
11225: LESS
11226: AND
11227: IFFALSE 11241
11229: GO 11231
11231: DISABLE
// begin enable ;
11232: ENABLE
// game_speed := 7 ;
11233: LD_ADDR_OWVAR 65
11237: PUSH
11238: LD_INT 7
11240: ST_TO_ADDR
// end ;
11241: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11242: LD_EXP 24
11246: PUSH
11247: LD_EXP 31
11251: AND
11252: IFFALSE 11454
11254: GO 11256
11256: DISABLE
11257: LD_INT 0
11259: PPUSH
11260: PPUSH
11261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11262: LD_ADDR_VAR 0 3
11266: PUSH
11267: LD_INT 81
11269: PUSH
11270: LD_OWVAR 2
11274: PUSH
11275: EMPTY
11276: LIST
11277: LIST
11278: PUSH
11279: LD_INT 21
11281: PUSH
11282: LD_INT 1
11284: PUSH
11285: EMPTY
11286: LIST
11287: LIST
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PPUSH
11293: CALL_OW 69
11297: ST_TO_ADDR
// if not tmp then
11298: LD_VAR 0 3
11302: NOT
11303: IFFALSE 11307
// exit ;
11305: GO 11454
// if tmp > 5 then
11307: LD_VAR 0 3
11311: PUSH
11312: LD_INT 5
11314: GREATER
11315: IFFALSE 11327
// k := 5 else
11317: LD_ADDR_VAR 0 2
11321: PUSH
11322: LD_INT 5
11324: ST_TO_ADDR
11325: GO 11337
// k := tmp ;
11327: LD_ADDR_VAR 0 2
11331: PUSH
11332: LD_VAR 0 3
11336: ST_TO_ADDR
// for i := 1 to k do
11337: LD_ADDR_VAR 0 1
11341: PUSH
11342: DOUBLE
11343: LD_INT 1
11345: DEC
11346: ST_TO_ADDR
11347: LD_VAR 0 2
11351: PUSH
11352: FOR_TO
11353: IFFALSE 11452
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11355: LD_VAR 0 3
11359: PUSH
11360: LD_VAR 0 1
11364: ARRAY
11365: PPUSH
11366: LD_VAR 0 1
11370: PUSH
11371: LD_INT 4
11373: MOD
11374: PUSH
11375: LD_INT 1
11377: PLUS
11378: PPUSH
11379: CALL_OW 259
11383: PUSH
11384: LD_INT 10
11386: LESS
11387: IFFALSE 11450
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11389: LD_VAR 0 3
11393: PUSH
11394: LD_VAR 0 1
11398: ARRAY
11399: PPUSH
11400: LD_VAR 0 1
11404: PUSH
11405: LD_INT 4
11407: MOD
11408: PUSH
11409: LD_INT 1
11411: PLUS
11412: PPUSH
11413: LD_VAR 0 3
11417: PUSH
11418: LD_VAR 0 1
11422: ARRAY
11423: PPUSH
11424: LD_VAR 0 1
11428: PUSH
11429: LD_INT 4
11431: MOD
11432: PUSH
11433: LD_INT 1
11435: PLUS
11436: PPUSH
11437: CALL_OW 259
11441: PUSH
11442: LD_INT 1
11444: PLUS
11445: PPUSH
11446: CALL_OW 237
11450: GO 11352
11452: POP
11453: POP
// end ;
11454: PPOPN 3
11456: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11457: LD_EXP 24
11461: PUSH
11462: LD_EXP 32
11466: AND
11467: IFFALSE 11487
11469: GO 11471
11471: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11472: LD_INT 4
11474: PPUSH
11475: LD_OWVAR 2
11479: PPUSH
11480: LD_INT 0
11482: PPUSH
11483: CALL_OW 324
11487: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11488: LD_EXP 24
11492: PUSH
11493: LD_EXP 61
11497: AND
11498: IFFALSE 11518
11500: GO 11502
11502: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11503: LD_INT 19
11505: PPUSH
11506: LD_OWVAR 2
11510: PPUSH
11511: LD_INT 0
11513: PPUSH
11514: CALL_OW 324
11518: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11519: LD_EXP 24
11523: PUSH
11524: LD_EXP 33
11528: AND
11529: IFFALSE 11631
11531: GO 11533
11533: DISABLE
11534: LD_INT 0
11536: PPUSH
11537: PPUSH
// begin enable ;
11538: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11539: LD_ADDR_VAR 0 2
11543: PUSH
11544: LD_INT 22
11546: PUSH
11547: LD_OWVAR 2
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 2
11558: PUSH
11559: LD_INT 34
11561: PUSH
11562: LD_INT 11
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 34
11571: PUSH
11572: LD_INT 30
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: LIST
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: PPUSH
11588: CALL_OW 69
11592: ST_TO_ADDR
// if not tmp then
11593: LD_VAR 0 2
11597: NOT
11598: IFFALSE 11602
// exit ;
11600: GO 11631
// for i in tmp do
11602: LD_ADDR_VAR 0 1
11606: PUSH
11607: LD_VAR 0 2
11611: PUSH
11612: FOR_IN
11613: IFFALSE 11629
// begin SetLives ( i , 0 ) ;
11615: LD_VAR 0 1
11619: PPUSH
11620: LD_INT 0
11622: PPUSH
11623: CALL_OW 234
// end ;
11627: GO 11612
11629: POP
11630: POP
// end ;
11631: PPOPN 2
11633: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11634: LD_EXP 24
11638: PUSH
11639: LD_EXP 34
11643: AND
11644: IFFALSE 11664
11646: GO 11648
11648: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11649: LD_INT 32
11651: PPUSH
11652: LD_OWVAR 2
11656: PPUSH
11657: LD_INT 0
11659: PPUSH
11660: CALL_OW 324
11664: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11665: LD_EXP 24
11669: PUSH
11670: LD_EXP 35
11674: AND
11675: IFFALSE 11856
11677: GO 11679
11679: DISABLE
11680: LD_INT 0
11682: PPUSH
11683: PPUSH
11684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11685: LD_ADDR_VAR 0 2
11689: PUSH
11690: LD_INT 22
11692: PUSH
11693: LD_OWVAR 2
11697: PUSH
11698: EMPTY
11699: LIST
11700: LIST
11701: PUSH
11702: LD_INT 33
11704: PUSH
11705: LD_INT 3
11707: PUSH
11708: EMPTY
11709: LIST
11710: LIST
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: PPUSH
11716: CALL_OW 69
11720: ST_TO_ADDR
// if not tmp then
11721: LD_VAR 0 2
11725: NOT
11726: IFFALSE 11730
// exit ;
11728: GO 11856
// side := 0 ;
11730: LD_ADDR_VAR 0 3
11734: PUSH
11735: LD_INT 0
11737: ST_TO_ADDR
// for i := 1 to 8 do
11738: LD_ADDR_VAR 0 1
11742: PUSH
11743: DOUBLE
11744: LD_INT 1
11746: DEC
11747: ST_TO_ADDR
11748: LD_INT 8
11750: PUSH
11751: FOR_TO
11752: IFFALSE 11800
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11754: LD_OWVAR 2
11758: PUSH
11759: LD_VAR 0 1
11763: NONEQUAL
11764: PUSH
11765: LD_OWVAR 2
11769: PPUSH
11770: LD_VAR 0 1
11774: PPUSH
11775: CALL_OW 81
11779: PUSH
11780: LD_INT 2
11782: EQUAL
11783: AND
11784: IFFALSE 11798
// begin side := i ;
11786: LD_ADDR_VAR 0 3
11790: PUSH
11791: LD_VAR 0 1
11795: ST_TO_ADDR
// break ;
11796: GO 11800
// end ;
11798: GO 11751
11800: POP
11801: POP
// if not side then
11802: LD_VAR 0 3
11806: NOT
11807: IFFALSE 11811
// exit ;
11809: GO 11856
// for i := 1 to tmp do
11811: LD_ADDR_VAR 0 1
11815: PUSH
11816: DOUBLE
11817: LD_INT 1
11819: DEC
11820: ST_TO_ADDR
11821: LD_VAR 0 2
11825: PUSH
11826: FOR_TO
11827: IFFALSE 11854
// if Prob ( 60 ) then
11829: LD_INT 60
11831: PPUSH
11832: CALL_OW 13
11836: IFFALSE 11852
// SetSide ( i , side ) ;
11838: LD_VAR 0 1
11842: PPUSH
11843: LD_VAR 0 3
11847: PPUSH
11848: CALL_OW 235
11852: GO 11826
11854: POP
11855: POP
// end ;
11856: PPOPN 3
11858: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11859: LD_EXP 24
11863: PUSH
11864: LD_EXP 37
11868: AND
11869: IFFALSE 11988
11871: GO 11873
11873: DISABLE
11874: LD_INT 0
11876: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11877: LD_ADDR_VAR 0 1
11881: PUSH
11882: LD_INT 22
11884: PUSH
11885: LD_OWVAR 2
11889: PUSH
11890: EMPTY
11891: LIST
11892: LIST
11893: PUSH
11894: LD_INT 21
11896: PUSH
11897: LD_INT 1
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: PUSH
11904: LD_INT 3
11906: PUSH
11907: LD_INT 23
11909: PUSH
11910: LD_INT 0
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: LIST
11925: PPUSH
11926: CALL_OW 69
11930: PUSH
11931: FOR_IN
11932: IFFALSE 11986
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11934: LD_VAR 0 1
11938: PPUSH
11939: CALL_OW 257
11943: PUSH
11944: LD_INT 1
11946: PUSH
11947: LD_INT 2
11949: PUSH
11950: LD_INT 3
11952: PUSH
11953: LD_INT 4
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: IN
11962: IFFALSE 11984
// SetClass ( un , rand ( 1 , 4 ) ) ;
11964: LD_VAR 0 1
11968: PPUSH
11969: LD_INT 1
11971: PPUSH
11972: LD_INT 4
11974: PPUSH
11975: CALL_OW 12
11979: PPUSH
11980: CALL_OW 336
11984: GO 11931
11986: POP
11987: POP
// end ;
11988: PPOPN 1
11990: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11991: LD_EXP 24
11995: PUSH
11996: LD_EXP 36
12000: AND
12001: IFFALSE 12080
12003: GO 12005
12005: DISABLE
12006: LD_INT 0
12008: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12009: LD_ADDR_VAR 0 1
12013: PUSH
12014: LD_INT 22
12016: PUSH
12017: LD_OWVAR 2
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: PUSH
12026: LD_INT 21
12028: PUSH
12029: LD_INT 3
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PPUSH
12040: CALL_OW 69
12044: ST_TO_ADDR
// if not tmp then
12045: LD_VAR 0 1
12049: NOT
12050: IFFALSE 12054
// exit ;
12052: GO 12080
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12054: LD_VAR 0 1
12058: PUSH
12059: LD_INT 1
12061: PPUSH
12062: LD_VAR 0 1
12066: PPUSH
12067: CALL_OW 12
12071: ARRAY
12072: PPUSH
12073: LD_INT 100
12075: PPUSH
12076: CALL_OW 234
// end ;
12080: PPOPN 1
12082: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12083: LD_EXP 24
12087: PUSH
12088: LD_EXP 38
12092: AND
12093: IFFALSE 12191
12095: GO 12097
12097: DISABLE
12098: LD_INT 0
12100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12101: LD_ADDR_VAR 0 1
12105: PUSH
12106: LD_INT 22
12108: PUSH
12109: LD_OWVAR 2
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: PUSH
12118: LD_INT 21
12120: PUSH
12121: LD_INT 1
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PPUSH
12132: CALL_OW 69
12136: ST_TO_ADDR
// if not tmp then
12137: LD_VAR 0 1
12141: NOT
12142: IFFALSE 12146
// exit ;
12144: GO 12191
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12146: LD_VAR 0 1
12150: PUSH
12151: LD_INT 1
12153: PPUSH
12154: LD_VAR 0 1
12158: PPUSH
12159: CALL_OW 12
12163: ARRAY
12164: PPUSH
12165: LD_INT 1
12167: PPUSH
12168: LD_INT 4
12170: PPUSH
12171: CALL_OW 12
12175: PPUSH
12176: LD_INT 3000
12178: PPUSH
12179: LD_INT 9000
12181: PPUSH
12182: CALL_OW 12
12186: PPUSH
12187: CALL_OW 492
// end ;
12191: PPOPN 1
12193: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12194: LD_EXP 24
12198: PUSH
12199: LD_EXP 39
12203: AND
12204: IFFALSE 12224
12206: GO 12208
12208: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12209: LD_INT 1
12211: PPUSH
12212: LD_OWVAR 2
12216: PPUSH
12217: LD_INT 0
12219: PPUSH
12220: CALL_OW 324
12224: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12225: LD_EXP 24
12229: PUSH
12230: LD_EXP 40
12234: AND
12235: IFFALSE 12318
12237: GO 12239
12239: DISABLE
12240: LD_INT 0
12242: PPUSH
12243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12244: LD_ADDR_VAR 0 2
12248: PUSH
12249: LD_INT 22
12251: PUSH
12252: LD_OWVAR 2
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PUSH
12261: LD_INT 21
12263: PUSH
12264: LD_INT 3
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: PPUSH
12275: CALL_OW 69
12279: ST_TO_ADDR
// if not tmp then
12280: LD_VAR 0 2
12284: NOT
12285: IFFALSE 12289
// exit ;
12287: GO 12318
// for i in tmp do
12289: LD_ADDR_VAR 0 1
12293: PUSH
12294: LD_VAR 0 2
12298: PUSH
12299: FOR_IN
12300: IFFALSE 12316
// SetBLevel ( i , 10 ) ;
12302: LD_VAR 0 1
12306: PPUSH
12307: LD_INT 10
12309: PPUSH
12310: CALL_OW 241
12314: GO 12299
12316: POP
12317: POP
// end ;
12318: PPOPN 2
12320: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12321: LD_EXP 24
12325: PUSH
12326: LD_EXP 41
12330: AND
12331: IFFALSE 12442
12333: GO 12335
12335: DISABLE
12336: LD_INT 0
12338: PPUSH
12339: PPUSH
12340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12341: LD_ADDR_VAR 0 3
12345: PUSH
12346: LD_INT 22
12348: PUSH
12349: LD_OWVAR 2
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: PUSH
12358: LD_INT 25
12360: PUSH
12361: LD_INT 1
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: PPUSH
12372: CALL_OW 69
12376: ST_TO_ADDR
// if not tmp then
12377: LD_VAR 0 3
12381: NOT
12382: IFFALSE 12386
// exit ;
12384: GO 12442
// un := tmp [ rand ( 1 , tmp ) ] ;
12386: LD_ADDR_VAR 0 2
12390: PUSH
12391: LD_VAR 0 3
12395: PUSH
12396: LD_INT 1
12398: PPUSH
12399: LD_VAR 0 3
12403: PPUSH
12404: CALL_OW 12
12408: ARRAY
12409: ST_TO_ADDR
// if Crawls ( un ) then
12410: LD_VAR 0 2
12414: PPUSH
12415: CALL_OW 318
12419: IFFALSE 12430
// ComWalk ( un ) ;
12421: LD_VAR 0 2
12425: PPUSH
12426: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12430: LD_VAR 0 2
12434: PPUSH
12435: LD_INT 5
12437: PPUSH
12438: CALL_OW 336
// end ;
12442: PPOPN 3
12444: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
12445: LD_EXP 24
12449: PUSH
12450: LD_EXP 42
12454: AND
12455: PUSH
12456: LD_OWVAR 67
12460: PUSH
12461: LD_INT 3
12463: LESS
12464: AND
12465: IFFALSE 12484
12467: GO 12469
12469: DISABLE
// Difficulty := Difficulty + 1 ;
12470: LD_ADDR_OWVAR 67
12474: PUSH
12475: LD_OWVAR 67
12479: PUSH
12480: LD_INT 1
12482: PLUS
12483: ST_TO_ADDR
12484: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12485: LD_EXP 24
12489: PUSH
12490: LD_EXP 43
12494: AND
12495: IFFALSE 12598
12497: GO 12499
12499: DISABLE
12500: LD_INT 0
12502: PPUSH
// begin for i := 1 to 5 do
12503: LD_ADDR_VAR 0 1
12507: PUSH
12508: DOUBLE
12509: LD_INT 1
12511: DEC
12512: ST_TO_ADDR
12513: LD_INT 5
12515: PUSH
12516: FOR_TO
12517: IFFALSE 12596
// begin uc_nation := nation_nature ;
12519: LD_ADDR_OWVAR 21
12523: PUSH
12524: LD_INT 0
12526: ST_TO_ADDR
// uc_side := 0 ;
12527: LD_ADDR_OWVAR 20
12531: PUSH
12532: LD_INT 0
12534: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12535: LD_ADDR_OWVAR 29
12539: PUSH
12540: LD_INT 12
12542: PUSH
12543: LD_INT 12
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: ST_TO_ADDR
// hc_agressivity := 20 ;
12550: LD_ADDR_OWVAR 35
12554: PUSH
12555: LD_INT 20
12557: ST_TO_ADDR
// hc_class := class_tiger ;
12558: LD_ADDR_OWVAR 28
12562: PUSH
12563: LD_INT 14
12565: ST_TO_ADDR
// hc_gallery :=  ;
12566: LD_ADDR_OWVAR 33
12570: PUSH
12571: LD_STRING 
12573: ST_TO_ADDR
// hc_name :=  ;
12574: LD_ADDR_OWVAR 26
12578: PUSH
12579: LD_STRING 
12581: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12582: CALL_OW 44
12586: PPUSH
12587: LD_INT 0
12589: PPUSH
12590: CALL_OW 51
// end ;
12594: GO 12516
12596: POP
12597: POP
// end ;
12598: PPOPN 1
12600: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12601: LD_EXP 24
12605: PUSH
12606: LD_EXP 44
12610: AND
12611: IFFALSE 12620
12613: GO 12615
12615: DISABLE
// StreamSibBomb ;
12616: CALL 12621 0 0
12620: END
// export function StreamSibBomb ; var i , x , y ; begin
12621: LD_INT 0
12623: PPUSH
12624: PPUSH
12625: PPUSH
12626: PPUSH
// result := false ;
12627: LD_ADDR_VAR 0 1
12631: PUSH
12632: LD_INT 0
12634: ST_TO_ADDR
// for i := 1 to 16 do
12635: LD_ADDR_VAR 0 2
12639: PUSH
12640: DOUBLE
12641: LD_INT 1
12643: DEC
12644: ST_TO_ADDR
12645: LD_INT 16
12647: PUSH
12648: FOR_TO
12649: IFFALSE 12848
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12651: LD_ADDR_VAR 0 3
12655: PUSH
12656: LD_INT 10
12658: PUSH
12659: LD_INT 20
12661: PUSH
12662: LD_INT 30
12664: PUSH
12665: LD_INT 40
12667: PUSH
12668: LD_INT 50
12670: PUSH
12671: LD_INT 60
12673: PUSH
12674: LD_INT 70
12676: PUSH
12677: LD_INT 80
12679: PUSH
12680: LD_INT 90
12682: PUSH
12683: LD_INT 100
12685: PUSH
12686: LD_INT 110
12688: PUSH
12689: LD_INT 120
12691: PUSH
12692: LD_INT 130
12694: PUSH
12695: LD_INT 140
12697: PUSH
12698: LD_INT 150
12700: PUSH
12701: EMPTY
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: PUSH
12718: LD_INT 1
12720: PPUSH
12721: LD_INT 15
12723: PPUSH
12724: CALL_OW 12
12728: ARRAY
12729: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12730: LD_ADDR_VAR 0 4
12734: PUSH
12735: LD_INT 10
12737: PUSH
12738: LD_INT 20
12740: PUSH
12741: LD_INT 30
12743: PUSH
12744: LD_INT 40
12746: PUSH
12747: LD_INT 50
12749: PUSH
12750: LD_INT 60
12752: PUSH
12753: LD_INT 70
12755: PUSH
12756: LD_INT 80
12758: PUSH
12759: LD_INT 90
12761: PUSH
12762: LD_INT 100
12764: PUSH
12765: LD_INT 110
12767: PUSH
12768: LD_INT 120
12770: PUSH
12771: LD_INT 130
12773: PUSH
12774: LD_INT 140
12776: PUSH
12777: LD_INT 150
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: PUSH
12797: LD_INT 1
12799: PPUSH
12800: LD_INT 15
12802: PPUSH
12803: CALL_OW 12
12807: ARRAY
12808: ST_TO_ADDR
// if ValidHex ( x , y ) then
12809: LD_VAR 0 3
12813: PPUSH
12814: LD_VAR 0 4
12818: PPUSH
12819: CALL_OW 488
12823: IFFALSE 12846
// begin result := [ x , y ] ;
12825: LD_ADDR_VAR 0 1
12829: PUSH
12830: LD_VAR 0 3
12834: PUSH
12835: LD_VAR 0 4
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: ST_TO_ADDR
// break ;
12844: GO 12848
// end ; end ;
12846: GO 12648
12848: POP
12849: POP
// if result then
12850: LD_VAR 0 1
12854: IFFALSE 12914
// begin ToLua ( playSibBomb() ) ;
12856: LD_STRING playSibBomb()
12858: PPUSH
12859: CALL_OW 559
// wait ( 0 0$14 ) ;
12863: LD_INT 490
12865: PPUSH
12866: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12870: LD_VAR 0 1
12874: PUSH
12875: LD_INT 1
12877: ARRAY
12878: PPUSH
12879: LD_VAR 0 1
12883: PUSH
12884: LD_INT 2
12886: ARRAY
12887: PPUSH
12888: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12892: LD_VAR 0 1
12896: PUSH
12897: LD_INT 1
12899: ARRAY
12900: PPUSH
12901: LD_VAR 0 1
12905: PUSH
12906: LD_INT 2
12908: ARRAY
12909: PPUSH
12910: CALL_OW 429
// end ; end ;
12914: LD_VAR 0 1
12918: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12919: LD_EXP 24
12923: PUSH
12924: LD_EXP 46
12928: AND
12929: IFFALSE 12941
12931: GO 12933
12933: DISABLE
// YouLost (  ) ;
12934: LD_STRING 
12936: PPUSH
12937: CALL_OW 104
12941: END
// every 0 0$1 trigger StreamModeActive and sFog do
12942: LD_EXP 24
12946: PUSH
12947: LD_EXP 45
12951: AND
12952: IFFALSE 12966
12954: GO 12956
12956: DISABLE
// FogOff ( your_side ) ;
12957: LD_OWVAR 2
12961: PPUSH
12962: CALL_OW 344
12966: END
// every 0 0$1 trigger StreamModeActive and sSun do
12967: LD_EXP 24
12971: PUSH
12972: LD_EXP 47
12976: AND
12977: IFFALSE 13005
12979: GO 12981
12981: DISABLE
// begin solar_recharge_percent := 0 ;
12982: LD_ADDR_OWVAR 79
12986: PUSH
12987: LD_INT 0
12989: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12990: LD_INT 10500
12992: PPUSH
12993: CALL_OW 67
// solar_recharge_percent := 100 ;
12997: LD_ADDR_OWVAR 79
13001: PUSH
13002: LD_INT 100
13004: ST_TO_ADDR
// end ;
13005: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13006: LD_EXP 24
13010: PUSH
13011: LD_EXP 48
13015: AND
13016: IFFALSE 13255
13018: GO 13020
13020: DISABLE
13021: LD_INT 0
13023: PPUSH
13024: PPUSH
13025: PPUSH
// begin tmp := [ ] ;
13026: LD_ADDR_VAR 0 3
13030: PUSH
13031: EMPTY
13032: ST_TO_ADDR
// for i := 1 to 6 do
13033: LD_ADDR_VAR 0 1
13037: PUSH
13038: DOUBLE
13039: LD_INT 1
13041: DEC
13042: ST_TO_ADDR
13043: LD_INT 6
13045: PUSH
13046: FOR_TO
13047: IFFALSE 13152
// begin uc_nation := nation_nature ;
13049: LD_ADDR_OWVAR 21
13053: PUSH
13054: LD_INT 0
13056: ST_TO_ADDR
// uc_side := 0 ;
13057: LD_ADDR_OWVAR 20
13061: PUSH
13062: LD_INT 0
13064: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13065: LD_ADDR_OWVAR 29
13069: PUSH
13070: LD_INT 12
13072: PUSH
13073: LD_INT 12
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: ST_TO_ADDR
// hc_agressivity := 20 ;
13080: LD_ADDR_OWVAR 35
13084: PUSH
13085: LD_INT 20
13087: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13088: LD_ADDR_OWVAR 28
13092: PUSH
13093: LD_INT 17
13095: ST_TO_ADDR
// hc_gallery :=  ;
13096: LD_ADDR_OWVAR 33
13100: PUSH
13101: LD_STRING 
13103: ST_TO_ADDR
// hc_name :=  ;
13104: LD_ADDR_OWVAR 26
13108: PUSH
13109: LD_STRING 
13111: ST_TO_ADDR
// un := CreateHuman ;
13112: LD_ADDR_VAR 0 2
13116: PUSH
13117: CALL_OW 44
13121: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13122: LD_VAR 0 2
13126: PPUSH
13127: LD_INT 1
13129: PPUSH
13130: CALL_OW 51
// tmp := tmp ^ un ;
13134: LD_ADDR_VAR 0 3
13138: PUSH
13139: LD_VAR 0 3
13143: PUSH
13144: LD_VAR 0 2
13148: ADD
13149: ST_TO_ADDR
// end ;
13150: GO 13046
13152: POP
13153: POP
// repeat wait ( 0 0$1 ) ;
13154: LD_INT 35
13156: PPUSH
13157: CALL_OW 67
// for un in tmp do
13161: LD_ADDR_VAR 0 2
13165: PUSH
13166: LD_VAR 0 3
13170: PUSH
13171: FOR_IN
13172: IFFALSE 13246
// begin if IsDead ( un ) then
13174: LD_VAR 0 2
13178: PPUSH
13179: CALL_OW 301
13183: IFFALSE 13203
// begin tmp := tmp diff un ;
13185: LD_ADDR_VAR 0 3
13189: PUSH
13190: LD_VAR 0 3
13194: PUSH
13195: LD_VAR 0 2
13199: DIFF
13200: ST_TO_ADDR
// continue ;
13201: GO 13171
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13203: LD_VAR 0 2
13207: PPUSH
13208: LD_INT 3
13210: PUSH
13211: LD_INT 22
13213: PUSH
13214: LD_INT 0
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: PPUSH
13225: CALL_OW 69
13229: PPUSH
13230: LD_VAR 0 2
13234: PPUSH
13235: CALL_OW 74
13239: PPUSH
13240: CALL_OW 115
// end ;
13244: GO 13171
13246: POP
13247: POP
// until not tmp ;
13248: LD_VAR 0 3
13252: NOT
13253: IFFALSE 13154
// end ;
13255: PPOPN 3
13257: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13258: LD_EXP 24
13262: PUSH
13263: LD_EXP 49
13267: AND
13268: IFFALSE 13322
13270: GO 13272
13272: DISABLE
// begin ToLua ( displayTroll(); ) ;
13273: LD_STRING displayTroll();
13275: PPUSH
13276: CALL_OW 559
// wait ( 3 3$00 ) ;
13280: LD_INT 6300
13282: PPUSH
13283: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13287: LD_STRING hideTroll();
13289: PPUSH
13290: CALL_OW 559
// wait ( 1 1$00 ) ;
13294: LD_INT 2100
13296: PPUSH
13297: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13301: LD_STRING displayTroll();
13303: PPUSH
13304: CALL_OW 559
// wait ( 1 1$00 ) ;
13308: LD_INT 2100
13310: PPUSH
13311: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13315: LD_STRING hideTroll();
13317: PPUSH
13318: CALL_OW 559
// end ;
13322: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13323: LD_EXP 24
13327: PUSH
13328: LD_EXP 50
13332: AND
13333: IFFALSE 13396
13335: GO 13337
13337: DISABLE
13338: LD_INT 0
13340: PPUSH
// begin p := 0 ;
13341: LD_ADDR_VAR 0 1
13345: PUSH
13346: LD_INT 0
13348: ST_TO_ADDR
// repeat game_speed := 1 ;
13349: LD_ADDR_OWVAR 65
13353: PUSH
13354: LD_INT 1
13356: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13357: LD_INT 35
13359: PPUSH
13360: CALL_OW 67
// p := p + 1 ;
13364: LD_ADDR_VAR 0 1
13368: PUSH
13369: LD_VAR 0 1
13373: PUSH
13374: LD_INT 1
13376: PLUS
13377: ST_TO_ADDR
// until p >= 60 ;
13378: LD_VAR 0 1
13382: PUSH
13383: LD_INT 60
13385: GREATEREQUAL
13386: IFFALSE 13349
// game_speed := 4 ;
13388: LD_ADDR_OWVAR 65
13392: PUSH
13393: LD_INT 4
13395: ST_TO_ADDR
// end ;
13396: PPOPN 1
13398: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13399: LD_EXP 24
13403: PUSH
13404: LD_EXP 51
13408: AND
13409: IFFALSE 13555
13411: GO 13413
13413: DISABLE
13414: LD_INT 0
13416: PPUSH
13417: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13418: LD_ADDR_VAR 0 1
13422: PUSH
13423: LD_INT 22
13425: PUSH
13426: LD_OWVAR 2
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: LD_INT 2
13437: PUSH
13438: LD_INT 30
13440: PUSH
13441: LD_INT 0
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 30
13450: PUSH
13451: LD_INT 1
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: LIST
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: PPUSH
13467: CALL_OW 69
13471: ST_TO_ADDR
// if not depot then
13472: LD_VAR 0 1
13476: NOT
13477: IFFALSE 13481
// exit ;
13479: GO 13555
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13481: LD_ADDR_VAR 0 2
13485: PUSH
13486: LD_VAR 0 1
13490: PUSH
13491: LD_INT 1
13493: PPUSH
13494: LD_VAR 0 1
13498: PPUSH
13499: CALL_OW 12
13503: ARRAY
13504: PPUSH
13505: CALL_OW 274
13509: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13510: LD_VAR 0 2
13514: PPUSH
13515: LD_INT 1
13517: PPUSH
13518: LD_INT 0
13520: PPUSH
13521: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13525: LD_VAR 0 2
13529: PPUSH
13530: LD_INT 2
13532: PPUSH
13533: LD_INT 0
13535: PPUSH
13536: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13540: LD_VAR 0 2
13544: PPUSH
13545: LD_INT 3
13547: PPUSH
13548: LD_INT 0
13550: PPUSH
13551: CALL_OW 277
// end ;
13555: PPOPN 2
13557: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13558: LD_EXP 24
13562: PUSH
13563: LD_EXP 52
13567: AND
13568: IFFALSE 13665
13570: GO 13572
13572: DISABLE
13573: LD_INT 0
13575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13576: LD_ADDR_VAR 0 1
13580: PUSH
13581: LD_INT 22
13583: PUSH
13584: LD_OWVAR 2
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: PUSH
13593: LD_INT 21
13595: PUSH
13596: LD_INT 1
13598: PUSH
13599: EMPTY
13600: LIST
13601: LIST
13602: PUSH
13603: LD_INT 3
13605: PUSH
13606: LD_INT 23
13608: PUSH
13609: LD_INT 0
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: LIST
13624: PPUSH
13625: CALL_OW 69
13629: ST_TO_ADDR
// if not tmp then
13630: LD_VAR 0 1
13634: NOT
13635: IFFALSE 13639
// exit ;
13637: GO 13665
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13639: LD_VAR 0 1
13643: PUSH
13644: LD_INT 1
13646: PPUSH
13647: LD_VAR 0 1
13651: PPUSH
13652: CALL_OW 12
13656: ARRAY
13657: PPUSH
13658: LD_INT 200
13660: PPUSH
13661: CALL_OW 234
// end ;
13665: PPOPN 1
13667: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13668: LD_EXP 24
13672: PUSH
13673: LD_EXP 53
13677: AND
13678: IFFALSE 13757
13680: GO 13682
13682: DISABLE
13683: LD_INT 0
13685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13686: LD_ADDR_VAR 0 1
13690: PUSH
13691: LD_INT 22
13693: PUSH
13694: LD_OWVAR 2
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: PUSH
13703: LD_INT 21
13705: PUSH
13706: LD_INT 2
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: PUSH
13713: EMPTY
13714: LIST
13715: LIST
13716: PPUSH
13717: CALL_OW 69
13721: ST_TO_ADDR
// if not tmp then
13722: LD_VAR 0 1
13726: NOT
13727: IFFALSE 13731
// exit ;
13729: GO 13757
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13731: LD_VAR 0 1
13735: PUSH
13736: LD_INT 1
13738: PPUSH
13739: LD_VAR 0 1
13743: PPUSH
13744: CALL_OW 12
13748: ARRAY
13749: PPUSH
13750: LD_INT 60
13752: PPUSH
13753: CALL_OW 234
// end ;
13757: PPOPN 1
13759: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13760: LD_EXP 24
13764: PUSH
13765: LD_EXP 54
13769: AND
13770: IFFALSE 13869
13772: GO 13774
13774: DISABLE
13775: LD_INT 0
13777: PPUSH
13778: PPUSH
// begin enable ;
13779: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13780: LD_ADDR_VAR 0 1
13784: PUSH
13785: LD_INT 22
13787: PUSH
13788: LD_OWVAR 2
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: PUSH
13797: LD_INT 61
13799: PUSH
13800: EMPTY
13801: LIST
13802: PUSH
13803: LD_INT 33
13805: PUSH
13806: LD_INT 2
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: LIST
13817: PPUSH
13818: CALL_OW 69
13822: ST_TO_ADDR
// if not tmp then
13823: LD_VAR 0 1
13827: NOT
13828: IFFALSE 13832
// exit ;
13830: GO 13869
// for i in tmp do
13832: LD_ADDR_VAR 0 2
13836: PUSH
13837: LD_VAR 0 1
13841: PUSH
13842: FOR_IN
13843: IFFALSE 13867
// if IsControledBy ( i ) then
13845: LD_VAR 0 2
13849: PPUSH
13850: CALL_OW 312
13854: IFFALSE 13865
// ComUnlink ( i ) ;
13856: LD_VAR 0 2
13860: PPUSH
13861: CALL_OW 136
13865: GO 13842
13867: POP
13868: POP
// end ;
13869: PPOPN 2
13871: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13872: LD_EXP 24
13876: PUSH
13877: LD_EXP 55
13881: AND
13882: IFFALSE 14022
13884: GO 13886
13886: DISABLE
13887: LD_INT 0
13889: PPUSH
13890: PPUSH
// begin ToLua ( displayPowell(); ) ;
13891: LD_STRING displayPowell();
13893: PPUSH
13894: CALL_OW 559
// uc_side := 0 ;
13898: LD_ADDR_OWVAR 20
13902: PUSH
13903: LD_INT 0
13905: ST_TO_ADDR
// uc_nation := 2 ;
13906: LD_ADDR_OWVAR 21
13910: PUSH
13911: LD_INT 2
13913: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13914: LD_ADDR_OWVAR 37
13918: PUSH
13919: LD_INT 14
13921: ST_TO_ADDR
// vc_engine := engine_siberite ;
13922: LD_ADDR_OWVAR 39
13926: PUSH
13927: LD_INT 3
13929: ST_TO_ADDR
// vc_control := control_apeman ;
13930: LD_ADDR_OWVAR 38
13934: PUSH
13935: LD_INT 5
13937: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13938: LD_ADDR_OWVAR 40
13942: PUSH
13943: LD_INT 29
13945: ST_TO_ADDR
// un := CreateVehicle ;
13946: LD_ADDR_VAR 0 2
13950: PUSH
13951: CALL_OW 45
13955: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13956: LD_VAR 0 2
13960: PPUSH
13961: LD_INT 1
13963: PPUSH
13964: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13968: LD_INT 35
13970: PPUSH
13971: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13975: LD_VAR 0 2
13979: PPUSH
13980: LD_INT 22
13982: PUSH
13983: LD_OWVAR 2
13987: PUSH
13988: EMPTY
13989: LIST
13990: LIST
13991: PPUSH
13992: CALL_OW 69
13996: PPUSH
13997: LD_VAR 0 2
14001: PPUSH
14002: CALL_OW 74
14006: PPUSH
14007: CALL_OW 115
// until IsDead ( un ) ;
14011: LD_VAR 0 2
14015: PPUSH
14016: CALL_OW 301
14020: IFFALSE 13968
// end ;
14022: PPOPN 2
14024: END
// every 0 0$1 trigger StreamModeActive and sStu do
14025: LD_EXP 24
14029: PUSH
14030: LD_EXP 63
14034: AND
14035: IFFALSE 14051
14037: GO 14039
14039: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14040: LD_STRING displayStucuk();
14042: PPUSH
14043: CALL_OW 559
// ResetFog ;
14047: CALL_OW 335
// end ;
14051: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14052: LD_EXP 24
14056: PUSH
14057: LD_EXP 56
14061: AND
14062: IFFALSE 14203
14064: GO 14066
14066: DISABLE
14067: LD_INT 0
14069: PPUSH
14070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14071: LD_ADDR_VAR 0 2
14075: PUSH
14076: LD_INT 22
14078: PUSH
14079: LD_OWVAR 2
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: PUSH
14088: LD_INT 21
14090: PUSH
14091: LD_INT 1
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: PPUSH
14102: CALL_OW 69
14106: ST_TO_ADDR
// if not tmp then
14107: LD_VAR 0 2
14111: NOT
14112: IFFALSE 14116
// exit ;
14114: GO 14203
// un := tmp [ rand ( 1 , tmp ) ] ;
14116: LD_ADDR_VAR 0 1
14120: PUSH
14121: LD_VAR 0 2
14125: PUSH
14126: LD_INT 1
14128: PPUSH
14129: LD_VAR 0 2
14133: PPUSH
14134: CALL_OW 12
14138: ARRAY
14139: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14140: LD_VAR 0 1
14144: PPUSH
14145: LD_INT 0
14147: PPUSH
14148: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14152: LD_VAR 0 1
14156: PPUSH
14157: LD_OWVAR 3
14161: PUSH
14162: LD_VAR 0 1
14166: DIFF
14167: PPUSH
14168: LD_VAR 0 1
14172: PPUSH
14173: CALL_OW 74
14177: PPUSH
14178: CALL_OW 115
// wait ( 0 0$20 ) ;
14182: LD_INT 700
14184: PPUSH
14185: CALL_OW 67
// SetSide ( un , your_side ) ;
14189: LD_VAR 0 1
14193: PPUSH
14194: LD_OWVAR 2
14198: PPUSH
14199: CALL_OW 235
// end ;
14203: PPOPN 2
14205: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14206: LD_EXP 24
14210: PUSH
14211: LD_EXP 57
14215: AND
14216: IFFALSE 14322
14218: GO 14220
14220: DISABLE
14221: LD_INT 0
14223: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14224: LD_ADDR_VAR 0 1
14228: PUSH
14229: LD_INT 22
14231: PUSH
14232: LD_OWVAR 2
14236: PUSH
14237: EMPTY
14238: LIST
14239: LIST
14240: PUSH
14241: LD_INT 2
14243: PUSH
14244: LD_INT 30
14246: PUSH
14247: LD_INT 0
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: PUSH
14254: LD_INT 30
14256: PUSH
14257: LD_INT 1
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: LIST
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PPUSH
14273: CALL_OW 69
14277: ST_TO_ADDR
// if not depot then
14278: LD_VAR 0 1
14282: NOT
14283: IFFALSE 14287
// exit ;
14285: GO 14322
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14287: LD_VAR 0 1
14291: PUSH
14292: LD_INT 1
14294: ARRAY
14295: PPUSH
14296: CALL_OW 250
14300: PPUSH
14301: LD_VAR 0 1
14305: PUSH
14306: LD_INT 1
14308: ARRAY
14309: PPUSH
14310: CALL_OW 251
14314: PPUSH
14315: LD_INT 70
14317: PPUSH
14318: CALL_OW 495
// end ;
14322: PPOPN 1
14324: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14325: LD_EXP 24
14329: PUSH
14330: LD_EXP 58
14334: AND
14335: IFFALSE 14546
14337: GO 14339
14339: DISABLE
14340: LD_INT 0
14342: PPUSH
14343: PPUSH
14344: PPUSH
14345: PPUSH
14346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14347: LD_ADDR_VAR 0 5
14351: PUSH
14352: LD_INT 22
14354: PUSH
14355: LD_OWVAR 2
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PUSH
14364: LD_INT 21
14366: PUSH
14367: LD_INT 1
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PPUSH
14378: CALL_OW 69
14382: ST_TO_ADDR
// if not tmp then
14383: LD_VAR 0 5
14387: NOT
14388: IFFALSE 14392
// exit ;
14390: GO 14546
// for i in tmp do
14392: LD_ADDR_VAR 0 1
14396: PUSH
14397: LD_VAR 0 5
14401: PUSH
14402: FOR_IN
14403: IFFALSE 14544
// begin d := rand ( 0 , 5 ) ;
14405: LD_ADDR_VAR 0 4
14409: PUSH
14410: LD_INT 0
14412: PPUSH
14413: LD_INT 5
14415: PPUSH
14416: CALL_OW 12
14420: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14421: LD_ADDR_VAR 0 2
14425: PUSH
14426: LD_VAR 0 1
14430: PPUSH
14431: CALL_OW 250
14435: PPUSH
14436: LD_VAR 0 4
14440: PPUSH
14441: LD_INT 3
14443: PPUSH
14444: LD_INT 12
14446: PPUSH
14447: CALL_OW 12
14451: PPUSH
14452: CALL_OW 272
14456: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14457: LD_ADDR_VAR 0 3
14461: PUSH
14462: LD_VAR 0 1
14466: PPUSH
14467: CALL_OW 251
14471: PPUSH
14472: LD_VAR 0 4
14476: PPUSH
14477: LD_INT 3
14479: PPUSH
14480: LD_INT 12
14482: PPUSH
14483: CALL_OW 12
14487: PPUSH
14488: CALL_OW 273
14492: ST_TO_ADDR
// if ValidHex ( x , y ) then
14493: LD_VAR 0 2
14497: PPUSH
14498: LD_VAR 0 3
14502: PPUSH
14503: CALL_OW 488
14507: IFFALSE 14542
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14509: LD_VAR 0 1
14513: PPUSH
14514: LD_VAR 0 2
14518: PPUSH
14519: LD_VAR 0 3
14523: PPUSH
14524: LD_INT 3
14526: PPUSH
14527: LD_INT 6
14529: PPUSH
14530: CALL_OW 12
14534: PPUSH
14535: LD_INT 1
14537: PPUSH
14538: CALL_OW 483
// end ;
14542: GO 14402
14544: POP
14545: POP
// end ;
14546: PPOPN 5
14548: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14549: LD_EXP 24
14553: PUSH
14554: LD_EXP 59
14558: AND
14559: IFFALSE 14653
14561: GO 14563
14563: DISABLE
14564: LD_INT 0
14566: PPUSH
14567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14568: LD_ADDR_VAR 0 2
14572: PUSH
14573: LD_INT 22
14575: PUSH
14576: LD_OWVAR 2
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: PUSH
14585: LD_INT 32
14587: PUSH
14588: LD_INT 1
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: PUSH
14595: LD_INT 21
14597: PUSH
14598: LD_INT 2
14600: PUSH
14601: EMPTY
14602: LIST
14603: LIST
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: LIST
14609: PPUSH
14610: CALL_OW 69
14614: ST_TO_ADDR
// if not tmp then
14615: LD_VAR 0 2
14619: NOT
14620: IFFALSE 14624
// exit ;
14622: GO 14653
// for i in tmp do
14624: LD_ADDR_VAR 0 1
14628: PUSH
14629: LD_VAR 0 2
14633: PUSH
14634: FOR_IN
14635: IFFALSE 14651
// SetFuel ( i , 0 ) ;
14637: LD_VAR 0 1
14641: PPUSH
14642: LD_INT 0
14644: PPUSH
14645: CALL_OW 240
14649: GO 14634
14651: POP
14652: POP
// end ;
14653: PPOPN 2
14655: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14656: LD_EXP 24
14660: PUSH
14661: LD_EXP 60
14665: AND
14666: IFFALSE 14732
14668: GO 14670
14670: DISABLE
14671: LD_INT 0
14673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14674: LD_ADDR_VAR 0 1
14678: PUSH
14679: LD_INT 22
14681: PUSH
14682: LD_OWVAR 2
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: PUSH
14691: LD_INT 30
14693: PUSH
14694: LD_INT 29
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: PPUSH
14705: CALL_OW 69
14709: ST_TO_ADDR
// if not tmp then
14710: LD_VAR 0 1
14714: NOT
14715: IFFALSE 14719
// exit ;
14717: GO 14732
// DestroyUnit ( tmp [ 1 ] ) ;
14719: LD_VAR 0 1
14723: PUSH
14724: LD_INT 1
14726: ARRAY
14727: PPUSH
14728: CALL_OW 65
// end ;
14732: PPOPN 1
14734: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14735: LD_EXP 24
14739: PUSH
14740: LD_EXP 62
14744: AND
14745: IFFALSE 14874
14747: GO 14749
14749: DISABLE
14750: LD_INT 0
14752: PPUSH
// begin uc_side := 0 ;
14753: LD_ADDR_OWVAR 20
14757: PUSH
14758: LD_INT 0
14760: ST_TO_ADDR
// uc_nation := nation_arabian ;
14761: LD_ADDR_OWVAR 21
14765: PUSH
14766: LD_INT 2
14768: ST_TO_ADDR
// hc_gallery :=  ;
14769: LD_ADDR_OWVAR 33
14773: PUSH
14774: LD_STRING 
14776: ST_TO_ADDR
// hc_name :=  ;
14777: LD_ADDR_OWVAR 26
14781: PUSH
14782: LD_STRING 
14784: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14785: LD_INT 1
14787: PPUSH
14788: LD_INT 11
14790: PPUSH
14791: LD_INT 10
14793: PPUSH
14794: CALL_OW 380
// un := CreateHuman ;
14798: LD_ADDR_VAR 0 1
14802: PUSH
14803: CALL_OW 44
14807: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14808: LD_VAR 0 1
14812: PPUSH
14813: LD_INT 1
14815: PPUSH
14816: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14820: LD_INT 35
14822: PPUSH
14823: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14827: LD_VAR 0 1
14831: PPUSH
14832: LD_INT 22
14834: PUSH
14835: LD_OWVAR 2
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PPUSH
14844: CALL_OW 69
14848: PPUSH
14849: LD_VAR 0 1
14853: PPUSH
14854: CALL_OW 74
14858: PPUSH
14859: CALL_OW 115
// until IsDead ( un ) ;
14863: LD_VAR 0 1
14867: PPUSH
14868: CALL_OW 301
14872: IFFALSE 14820
// end ;
14874: PPOPN 1
14876: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14877: LD_EXP 24
14881: PUSH
14882: LD_EXP 64
14886: AND
14887: IFFALSE 14899
14889: GO 14891
14891: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14892: LD_STRING earthquake(getX(game), 0, 32)
14894: PPUSH
14895: CALL_OW 559
14899: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14900: LD_EXP 24
14904: PUSH
14905: LD_EXP 65
14909: AND
14910: IFFALSE 15001
14912: GO 14914
14914: DISABLE
14915: LD_INT 0
14917: PPUSH
// begin enable ;
14918: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14919: LD_ADDR_VAR 0 1
14923: PUSH
14924: LD_INT 22
14926: PUSH
14927: LD_OWVAR 2
14931: PUSH
14932: EMPTY
14933: LIST
14934: LIST
14935: PUSH
14936: LD_INT 21
14938: PUSH
14939: LD_INT 2
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: PUSH
14946: LD_INT 33
14948: PUSH
14949: LD_INT 3
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: LIST
14960: PPUSH
14961: CALL_OW 69
14965: ST_TO_ADDR
// if not tmp then
14966: LD_VAR 0 1
14970: NOT
14971: IFFALSE 14975
// exit ;
14973: GO 15001
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14975: LD_VAR 0 1
14979: PUSH
14980: LD_INT 1
14982: PPUSH
14983: LD_VAR 0 1
14987: PPUSH
14988: CALL_OW 12
14992: ARRAY
14993: PPUSH
14994: LD_INT 1
14996: PPUSH
14997: CALL_OW 234
// end ;
15001: PPOPN 1
15003: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15004: LD_EXP 24
15008: PUSH
15009: LD_EXP 66
15013: AND
15014: IFFALSE 15155
15016: GO 15018
15018: DISABLE
15019: LD_INT 0
15021: PPUSH
15022: PPUSH
15023: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15024: LD_ADDR_VAR 0 3
15028: PUSH
15029: LD_INT 22
15031: PUSH
15032: LD_OWVAR 2
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: PUSH
15041: LD_INT 25
15043: PUSH
15044: LD_INT 1
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: PPUSH
15055: CALL_OW 69
15059: ST_TO_ADDR
// if not tmp then
15060: LD_VAR 0 3
15064: NOT
15065: IFFALSE 15069
// exit ;
15067: GO 15155
// un := tmp [ rand ( 1 , tmp ) ] ;
15069: LD_ADDR_VAR 0 2
15073: PUSH
15074: LD_VAR 0 3
15078: PUSH
15079: LD_INT 1
15081: PPUSH
15082: LD_VAR 0 3
15086: PPUSH
15087: CALL_OW 12
15091: ARRAY
15092: ST_TO_ADDR
// if Crawls ( un ) then
15093: LD_VAR 0 2
15097: PPUSH
15098: CALL_OW 318
15102: IFFALSE 15113
// ComWalk ( un ) ;
15104: LD_VAR 0 2
15108: PPUSH
15109: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15113: LD_VAR 0 2
15117: PPUSH
15118: LD_INT 9
15120: PPUSH
15121: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15125: LD_INT 28
15127: PPUSH
15128: LD_OWVAR 2
15132: PPUSH
15133: LD_INT 2
15135: PPUSH
15136: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15140: LD_INT 29
15142: PPUSH
15143: LD_OWVAR 2
15147: PPUSH
15148: LD_INT 2
15150: PPUSH
15151: CALL_OW 322
// end ;
15155: PPOPN 3
15157: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15158: LD_EXP 24
15162: PUSH
15163: LD_EXP 67
15167: AND
15168: IFFALSE 15279
15170: GO 15172
15172: DISABLE
15173: LD_INT 0
15175: PPUSH
15176: PPUSH
15177: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15178: LD_ADDR_VAR 0 3
15182: PUSH
15183: LD_INT 22
15185: PUSH
15186: LD_OWVAR 2
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: PUSH
15195: LD_INT 25
15197: PUSH
15198: LD_INT 1
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: PPUSH
15209: CALL_OW 69
15213: ST_TO_ADDR
// if not tmp then
15214: LD_VAR 0 3
15218: NOT
15219: IFFALSE 15223
// exit ;
15221: GO 15279
// un := tmp [ rand ( 1 , tmp ) ] ;
15223: LD_ADDR_VAR 0 2
15227: PUSH
15228: LD_VAR 0 3
15232: PUSH
15233: LD_INT 1
15235: PPUSH
15236: LD_VAR 0 3
15240: PPUSH
15241: CALL_OW 12
15245: ARRAY
15246: ST_TO_ADDR
// if Crawls ( un ) then
15247: LD_VAR 0 2
15251: PPUSH
15252: CALL_OW 318
15256: IFFALSE 15267
// ComWalk ( un ) ;
15258: LD_VAR 0 2
15262: PPUSH
15263: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15267: LD_VAR 0 2
15271: PPUSH
15272: LD_INT 8
15274: PPUSH
15275: CALL_OW 336
// end ;
15279: PPOPN 3
15281: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15282: LD_EXP 24
15286: PUSH
15287: LD_EXP 68
15291: AND
15292: IFFALSE 15436
15294: GO 15296
15296: DISABLE
15297: LD_INT 0
15299: PPUSH
15300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15301: LD_ADDR_VAR 0 2
15305: PUSH
15306: LD_INT 22
15308: PUSH
15309: LD_OWVAR 2
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: PUSH
15318: LD_INT 21
15320: PUSH
15321: LD_INT 2
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: PUSH
15328: LD_INT 2
15330: PUSH
15331: LD_INT 34
15333: PUSH
15334: LD_INT 12
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 34
15343: PUSH
15344: LD_INT 51
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: PUSH
15351: LD_INT 34
15353: PUSH
15354: LD_INT 32
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: LIST
15371: PPUSH
15372: CALL_OW 69
15376: ST_TO_ADDR
// if not tmp then
15377: LD_VAR 0 2
15381: NOT
15382: IFFALSE 15386
// exit ;
15384: GO 15436
// for i in tmp do
15386: LD_ADDR_VAR 0 1
15390: PUSH
15391: LD_VAR 0 2
15395: PUSH
15396: FOR_IN
15397: IFFALSE 15434
// if GetCargo ( i , mat_artifact ) = 0 then
15399: LD_VAR 0 1
15403: PPUSH
15404: LD_INT 4
15406: PPUSH
15407: CALL_OW 289
15411: PUSH
15412: LD_INT 0
15414: EQUAL
15415: IFFALSE 15432
// SetCargo ( i , mat_siberit , 100 ) ;
15417: LD_VAR 0 1
15421: PPUSH
15422: LD_INT 3
15424: PPUSH
15425: LD_INT 100
15427: PPUSH
15428: CALL_OW 290
15432: GO 15396
15434: POP
15435: POP
// end ;
15436: PPOPN 2
15438: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15439: LD_EXP 24
15443: PUSH
15444: LD_EXP 69
15448: AND
15449: IFFALSE 15632
15451: GO 15453
15453: DISABLE
15454: LD_INT 0
15456: PPUSH
15457: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15458: LD_ADDR_VAR 0 2
15462: PUSH
15463: LD_INT 22
15465: PUSH
15466: LD_OWVAR 2
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PPUSH
15475: CALL_OW 69
15479: ST_TO_ADDR
// if not tmp then
15480: LD_VAR 0 2
15484: NOT
15485: IFFALSE 15489
// exit ;
15487: GO 15632
// for i := 1 to 2 do
15489: LD_ADDR_VAR 0 1
15493: PUSH
15494: DOUBLE
15495: LD_INT 1
15497: DEC
15498: ST_TO_ADDR
15499: LD_INT 2
15501: PUSH
15502: FOR_TO
15503: IFFALSE 15630
// begin uc_side := your_side ;
15505: LD_ADDR_OWVAR 20
15509: PUSH
15510: LD_OWVAR 2
15514: ST_TO_ADDR
// uc_nation := nation_american ;
15515: LD_ADDR_OWVAR 21
15519: PUSH
15520: LD_INT 1
15522: ST_TO_ADDR
// vc_chassis := us_morphling ;
15523: LD_ADDR_OWVAR 37
15527: PUSH
15528: LD_INT 5
15530: ST_TO_ADDR
// vc_engine := engine_siberite ;
15531: LD_ADDR_OWVAR 39
15535: PUSH
15536: LD_INT 3
15538: ST_TO_ADDR
// vc_control := control_computer ;
15539: LD_ADDR_OWVAR 38
15543: PUSH
15544: LD_INT 3
15546: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15547: LD_ADDR_OWVAR 40
15551: PUSH
15552: LD_INT 10
15554: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15555: LD_VAR 0 2
15559: PUSH
15560: LD_INT 1
15562: ARRAY
15563: PPUSH
15564: CALL_OW 310
15568: NOT
15569: IFFALSE 15616
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15571: CALL_OW 45
15575: PPUSH
15576: LD_VAR 0 2
15580: PUSH
15581: LD_INT 1
15583: ARRAY
15584: PPUSH
15585: CALL_OW 250
15589: PPUSH
15590: LD_VAR 0 2
15594: PUSH
15595: LD_INT 1
15597: ARRAY
15598: PPUSH
15599: CALL_OW 251
15603: PPUSH
15604: LD_INT 12
15606: PPUSH
15607: LD_INT 1
15609: PPUSH
15610: CALL_OW 50
15614: GO 15628
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15616: CALL_OW 45
15620: PPUSH
15621: LD_INT 1
15623: PPUSH
15624: CALL_OW 51
// end ;
15628: GO 15502
15630: POP
15631: POP
// end ;
15632: PPOPN 2
15634: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15635: LD_EXP 24
15639: PUSH
15640: LD_EXP 70
15644: AND
15645: IFFALSE 15867
15647: GO 15649
15649: DISABLE
15650: LD_INT 0
15652: PPUSH
15653: PPUSH
15654: PPUSH
15655: PPUSH
15656: PPUSH
15657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15658: LD_ADDR_VAR 0 6
15662: PUSH
15663: LD_INT 22
15665: PUSH
15666: LD_OWVAR 2
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: PUSH
15675: LD_INT 21
15677: PUSH
15678: LD_INT 1
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: PUSH
15685: LD_INT 3
15687: PUSH
15688: LD_INT 23
15690: PUSH
15691: LD_INT 0
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: LIST
15706: PPUSH
15707: CALL_OW 69
15711: ST_TO_ADDR
// if not tmp then
15712: LD_VAR 0 6
15716: NOT
15717: IFFALSE 15721
// exit ;
15719: GO 15867
// s1 := rand ( 1 , 4 ) ;
15721: LD_ADDR_VAR 0 2
15725: PUSH
15726: LD_INT 1
15728: PPUSH
15729: LD_INT 4
15731: PPUSH
15732: CALL_OW 12
15736: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15737: LD_ADDR_VAR 0 4
15741: PUSH
15742: LD_VAR 0 6
15746: PUSH
15747: LD_INT 1
15749: ARRAY
15750: PPUSH
15751: LD_VAR 0 2
15755: PPUSH
15756: CALL_OW 259
15760: ST_TO_ADDR
// if s1 = 1 then
15761: LD_VAR 0 2
15765: PUSH
15766: LD_INT 1
15768: EQUAL
15769: IFFALSE 15789
// s2 := rand ( 2 , 4 ) else
15771: LD_ADDR_VAR 0 3
15775: PUSH
15776: LD_INT 2
15778: PPUSH
15779: LD_INT 4
15781: PPUSH
15782: CALL_OW 12
15786: ST_TO_ADDR
15787: GO 15797
// s2 := 1 ;
15789: LD_ADDR_VAR 0 3
15793: PUSH
15794: LD_INT 1
15796: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15797: LD_ADDR_VAR 0 5
15801: PUSH
15802: LD_VAR 0 6
15806: PUSH
15807: LD_INT 1
15809: ARRAY
15810: PPUSH
15811: LD_VAR 0 3
15815: PPUSH
15816: CALL_OW 259
15820: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15821: LD_VAR 0 6
15825: PUSH
15826: LD_INT 1
15828: ARRAY
15829: PPUSH
15830: LD_VAR 0 2
15834: PPUSH
15835: LD_VAR 0 5
15839: PPUSH
15840: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15844: LD_VAR 0 6
15848: PUSH
15849: LD_INT 1
15851: ARRAY
15852: PPUSH
15853: LD_VAR 0 3
15857: PPUSH
15858: LD_VAR 0 4
15862: PPUSH
15863: CALL_OW 237
// end ;
15867: PPOPN 6
15869: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15870: LD_EXP 24
15874: PUSH
15875: LD_EXP 71
15879: AND
15880: IFFALSE 15959
15882: GO 15884
15884: DISABLE
15885: LD_INT 0
15887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15888: LD_ADDR_VAR 0 1
15892: PUSH
15893: LD_INT 22
15895: PUSH
15896: LD_OWVAR 2
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: PUSH
15905: LD_INT 30
15907: PUSH
15908: LD_INT 3
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: PPUSH
15919: CALL_OW 69
15923: ST_TO_ADDR
// if not tmp then
15924: LD_VAR 0 1
15928: NOT
15929: IFFALSE 15933
// exit ;
15931: GO 15959
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15933: LD_VAR 0 1
15937: PUSH
15938: LD_INT 1
15940: PPUSH
15941: LD_VAR 0 1
15945: PPUSH
15946: CALL_OW 12
15950: ARRAY
15951: PPUSH
15952: LD_INT 1
15954: PPUSH
15955: CALL_OW 234
// end ;
15959: PPOPN 1
15961: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15962: LD_EXP 24
15966: PUSH
15967: LD_EXP 72
15971: AND
15972: IFFALSE 16084
15974: GO 15976
15976: DISABLE
15977: LD_INT 0
15979: PPUSH
15980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15981: LD_ADDR_VAR 0 2
15985: PUSH
15986: LD_INT 22
15988: PUSH
15989: LD_OWVAR 2
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PUSH
15998: LD_INT 2
16000: PUSH
16001: LD_INT 30
16003: PUSH
16004: LD_INT 27
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: LD_INT 30
16013: PUSH
16014: LD_INT 26
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: LD_INT 30
16023: PUSH
16024: LD_INT 28
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: PPUSH
16041: CALL_OW 69
16045: ST_TO_ADDR
// if not tmp then
16046: LD_VAR 0 2
16050: NOT
16051: IFFALSE 16055
// exit ;
16053: GO 16084
// for i in tmp do
16055: LD_ADDR_VAR 0 1
16059: PUSH
16060: LD_VAR 0 2
16064: PUSH
16065: FOR_IN
16066: IFFALSE 16082
// SetLives ( i , 1 ) ;
16068: LD_VAR 0 1
16072: PPUSH
16073: LD_INT 1
16075: PPUSH
16076: CALL_OW 234
16080: GO 16065
16082: POP
16083: POP
// end ;
16084: PPOPN 2
16086: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16087: LD_EXP 24
16091: PUSH
16092: LD_EXP 73
16096: AND
16097: IFFALSE 16371
16099: GO 16101
16101: DISABLE
16102: LD_INT 0
16104: PPUSH
16105: PPUSH
16106: PPUSH
// begin i := rand ( 1 , 7 ) ;
16107: LD_ADDR_VAR 0 1
16111: PUSH
16112: LD_INT 1
16114: PPUSH
16115: LD_INT 7
16117: PPUSH
16118: CALL_OW 12
16122: ST_TO_ADDR
// case i of 1 :
16123: LD_VAR 0 1
16127: PUSH
16128: LD_INT 1
16130: DOUBLE
16131: EQUAL
16132: IFTRUE 16136
16134: GO 16146
16136: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16137: LD_STRING earthquake(getX(game), 0, 32)
16139: PPUSH
16140: CALL_OW 559
16144: GO 16371
16146: LD_INT 2
16148: DOUBLE
16149: EQUAL
16150: IFTRUE 16154
16152: GO 16168
16154: POP
// begin ToLua ( displayStucuk(); ) ;
16155: LD_STRING displayStucuk();
16157: PPUSH
16158: CALL_OW 559
// ResetFog ;
16162: CALL_OW 335
// end ; 3 :
16166: GO 16371
16168: LD_INT 3
16170: DOUBLE
16171: EQUAL
16172: IFTRUE 16176
16174: GO 16280
16176: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16177: LD_ADDR_VAR 0 2
16181: PUSH
16182: LD_INT 22
16184: PUSH
16185: LD_OWVAR 2
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: PUSH
16194: LD_INT 25
16196: PUSH
16197: LD_INT 1
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PPUSH
16208: CALL_OW 69
16212: ST_TO_ADDR
// if not tmp then
16213: LD_VAR 0 2
16217: NOT
16218: IFFALSE 16222
// exit ;
16220: GO 16371
// un := tmp [ rand ( 1 , tmp ) ] ;
16222: LD_ADDR_VAR 0 3
16226: PUSH
16227: LD_VAR 0 2
16231: PUSH
16232: LD_INT 1
16234: PPUSH
16235: LD_VAR 0 2
16239: PPUSH
16240: CALL_OW 12
16244: ARRAY
16245: ST_TO_ADDR
// if Crawls ( un ) then
16246: LD_VAR 0 3
16250: PPUSH
16251: CALL_OW 318
16255: IFFALSE 16266
// ComWalk ( un ) ;
16257: LD_VAR 0 3
16261: PPUSH
16262: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16266: LD_VAR 0 3
16270: PPUSH
16271: LD_INT 8
16273: PPUSH
16274: CALL_OW 336
// end ; 4 :
16278: GO 16371
16280: LD_INT 4
16282: DOUBLE
16283: EQUAL
16284: IFTRUE 16288
16286: GO 16349
16288: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16289: LD_ADDR_VAR 0 2
16293: PUSH
16294: LD_INT 22
16296: PUSH
16297: LD_OWVAR 2
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: PUSH
16306: LD_INT 30
16308: PUSH
16309: LD_INT 29
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PPUSH
16320: CALL_OW 69
16324: ST_TO_ADDR
// if not tmp then
16325: LD_VAR 0 2
16329: NOT
16330: IFFALSE 16334
// exit ;
16332: GO 16371
// DestroyUnit ( tmp [ 1 ] ) ;
16334: LD_VAR 0 2
16338: PUSH
16339: LD_INT 1
16341: ARRAY
16342: PPUSH
16343: CALL_OW 65
// end ; 5 .. 7 :
16347: GO 16371
16349: LD_INT 5
16351: DOUBLE
16352: GREATEREQUAL
16353: IFFALSE 16361
16355: LD_INT 7
16357: DOUBLE
16358: LESSEQUAL
16359: IFTRUE 16363
16361: GO 16370
16363: POP
// StreamSibBomb ; end ;
16364: CALL 12621 0 0
16368: GO 16371
16370: POP
// end ;
16371: PPOPN 3
16373: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16374: LD_EXP 24
16378: PUSH
16379: LD_EXP 74
16383: AND
16384: IFFALSE 16540
16386: GO 16388
16388: DISABLE
16389: LD_INT 0
16391: PPUSH
16392: PPUSH
16393: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16394: LD_ADDR_VAR 0 2
16398: PUSH
16399: LD_INT 81
16401: PUSH
16402: LD_OWVAR 2
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PUSH
16411: LD_INT 2
16413: PUSH
16414: LD_INT 21
16416: PUSH
16417: LD_INT 1
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: PUSH
16424: LD_INT 21
16426: PUSH
16427: LD_INT 2
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: LIST
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: PPUSH
16443: CALL_OW 69
16447: ST_TO_ADDR
// if not tmp then
16448: LD_VAR 0 2
16452: NOT
16453: IFFALSE 16457
// exit ;
16455: GO 16540
// p := 0 ;
16457: LD_ADDR_VAR 0 3
16461: PUSH
16462: LD_INT 0
16464: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16465: LD_INT 35
16467: PPUSH
16468: CALL_OW 67
// p := p + 1 ;
16472: LD_ADDR_VAR 0 3
16476: PUSH
16477: LD_VAR 0 3
16481: PUSH
16482: LD_INT 1
16484: PLUS
16485: ST_TO_ADDR
// for i in tmp do
16486: LD_ADDR_VAR 0 1
16490: PUSH
16491: LD_VAR 0 2
16495: PUSH
16496: FOR_IN
16497: IFFALSE 16528
// if GetLives ( i ) < 1000 then
16499: LD_VAR 0 1
16503: PPUSH
16504: CALL_OW 256
16508: PUSH
16509: LD_INT 1000
16511: LESS
16512: IFFALSE 16526
// SetLives ( i , 1000 ) ;
16514: LD_VAR 0 1
16518: PPUSH
16519: LD_INT 1000
16521: PPUSH
16522: CALL_OW 234
16526: GO 16496
16528: POP
16529: POP
// until p > 20 ;
16530: LD_VAR 0 3
16534: PUSH
16535: LD_INT 20
16537: GREATER
16538: IFFALSE 16465
// end ;
16540: PPOPN 3
16542: END
// every 0 0$1 trigger StreamModeActive and sTime do
16543: LD_EXP 24
16547: PUSH
16548: LD_EXP 75
16552: AND
16553: IFFALSE 16588
16555: GO 16557
16557: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16558: LD_INT 28
16560: PPUSH
16561: LD_OWVAR 2
16565: PPUSH
16566: LD_INT 2
16568: PPUSH
16569: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16573: LD_INT 30
16575: PPUSH
16576: LD_OWVAR 2
16580: PPUSH
16581: LD_INT 2
16583: PPUSH
16584: CALL_OW 322
// end ;
16588: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16589: LD_EXP 24
16593: PUSH
16594: LD_EXP 76
16598: AND
16599: IFFALSE 16720
16601: GO 16603
16603: DISABLE
16604: LD_INT 0
16606: PPUSH
16607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16608: LD_ADDR_VAR 0 2
16612: PUSH
16613: LD_INT 22
16615: PUSH
16616: LD_OWVAR 2
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: LD_INT 21
16627: PUSH
16628: LD_INT 1
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: PUSH
16635: LD_INT 3
16637: PUSH
16638: LD_INT 23
16640: PUSH
16641: LD_INT 0
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: LIST
16656: PPUSH
16657: CALL_OW 69
16661: ST_TO_ADDR
// if not tmp then
16662: LD_VAR 0 2
16666: NOT
16667: IFFALSE 16671
// exit ;
16669: GO 16720
// for i in tmp do
16671: LD_ADDR_VAR 0 1
16675: PUSH
16676: LD_VAR 0 2
16680: PUSH
16681: FOR_IN
16682: IFFALSE 16718
// begin if Crawls ( i ) then
16684: LD_VAR 0 1
16688: PPUSH
16689: CALL_OW 318
16693: IFFALSE 16704
// ComWalk ( i ) ;
16695: LD_VAR 0 1
16699: PPUSH
16700: CALL_OW 138
// SetClass ( i , 2 ) ;
16704: LD_VAR 0 1
16708: PPUSH
16709: LD_INT 2
16711: PPUSH
16712: CALL_OW 336
// end ;
16716: GO 16681
16718: POP
16719: POP
// end ;
16720: PPOPN 2
16722: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16723: LD_EXP 24
16727: PUSH
16728: LD_EXP 77
16732: AND
16733: IFFALSE 17014
16735: GO 16737
16737: DISABLE
16738: LD_INT 0
16740: PPUSH
16741: PPUSH
16742: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16743: LD_OWVAR 2
16747: PPUSH
16748: LD_INT 9
16750: PPUSH
16751: LD_INT 1
16753: PPUSH
16754: LD_INT 1
16756: PPUSH
16757: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16761: LD_INT 9
16763: PPUSH
16764: LD_OWVAR 2
16768: PPUSH
16769: CALL_OW 343
// uc_side := 9 ;
16773: LD_ADDR_OWVAR 20
16777: PUSH
16778: LD_INT 9
16780: ST_TO_ADDR
// uc_nation := 2 ;
16781: LD_ADDR_OWVAR 21
16785: PUSH
16786: LD_INT 2
16788: ST_TO_ADDR
// hc_name := Dark Warrior ;
16789: LD_ADDR_OWVAR 26
16793: PUSH
16794: LD_STRING Dark Warrior
16796: ST_TO_ADDR
// hc_gallery :=  ;
16797: LD_ADDR_OWVAR 33
16801: PUSH
16802: LD_STRING 
16804: ST_TO_ADDR
// hc_noskilllimit := true ;
16805: LD_ADDR_OWVAR 76
16809: PUSH
16810: LD_INT 1
16812: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16813: LD_ADDR_OWVAR 31
16817: PUSH
16818: LD_INT 30
16820: PUSH
16821: LD_INT 30
16823: PUSH
16824: LD_INT 30
16826: PUSH
16827: LD_INT 30
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: ST_TO_ADDR
// un := CreateHuman ;
16836: LD_ADDR_VAR 0 3
16840: PUSH
16841: CALL_OW 44
16845: ST_TO_ADDR
// hc_noskilllimit := false ;
16846: LD_ADDR_OWVAR 76
16850: PUSH
16851: LD_INT 0
16853: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16854: LD_VAR 0 3
16858: PPUSH
16859: LD_INT 1
16861: PPUSH
16862: CALL_OW 51
// p := 0 ;
16866: LD_ADDR_VAR 0 2
16870: PUSH
16871: LD_INT 0
16873: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16874: LD_INT 35
16876: PPUSH
16877: CALL_OW 67
// p := p + 1 ;
16881: LD_ADDR_VAR 0 2
16885: PUSH
16886: LD_VAR 0 2
16890: PUSH
16891: LD_INT 1
16893: PLUS
16894: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16895: LD_VAR 0 3
16899: PPUSH
16900: CALL_OW 256
16904: PUSH
16905: LD_INT 1000
16907: LESS
16908: IFFALSE 16922
// SetLives ( un , 1000 ) ;
16910: LD_VAR 0 3
16914: PPUSH
16915: LD_INT 1000
16917: PPUSH
16918: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16922: LD_VAR 0 3
16926: PPUSH
16927: LD_INT 81
16929: PUSH
16930: LD_OWVAR 2
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: PUSH
16939: LD_INT 91
16941: PUSH
16942: LD_VAR 0 3
16946: PUSH
16947: LD_INT 30
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: LIST
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: PPUSH
16959: CALL_OW 69
16963: PPUSH
16964: LD_VAR 0 3
16968: PPUSH
16969: CALL_OW 74
16973: PPUSH
16974: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
16978: LD_VAR 0 2
16982: PUSH
16983: LD_INT 60
16985: GREATER
16986: PUSH
16987: LD_VAR 0 3
16991: PPUSH
16992: CALL_OW 301
16996: OR
16997: IFFALSE 16874
// if un then
16999: LD_VAR 0 3
17003: IFFALSE 17014
// RemoveUnit ( un ) ;
17005: LD_VAR 0 3
17009: PPUSH
17010: CALL_OW 64
// end ;
17014: PPOPN 3
17016: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17017: LD_INT 0
17019: PPUSH
// case cmd of 301 :
17020: LD_VAR 0 1
17024: PUSH
17025: LD_INT 301
17027: DOUBLE
17028: EQUAL
17029: IFTRUE 17033
17031: GO 17065
17033: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17034: LD_VAR 0 6
17038: PPUSH
17039: LD_VAR 0 7
17043: PPUSH
17044: LD_VAR 0 8
17048: PPUSH
17049: LD_VAR 0 4
17053: PPUSH
17054: LD_VAR 0 5
17058: PPUSH
17059: CALL 18266 0 5
17063: GO 17186
17065: LD_INT 302
17067: DOUBLE
17068: EQUAL
17069: IFTRUE 17073
17071: GO 17110
17073: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17074: LD_VAR 0 6
17078: PPUSH
17079: LD_VAR 0 7
17083: PPUSH
17084: LD_VAR 0 8
17088: PPUSH
17089: LD_VAR 0 9
17093: PPUSH
17094: LD_VAR 0 4
17098: PPUSH
17099: LD_VAR 0 5
17103: PPUSH
17104: CALL 18357 0 6
17108: GO 17186
17110: LD_INT 303
17112: DOUBLE
17113: EQUAL
17114: IFTRUE 17118
17116: GO 17155
17118: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17119: LD_VAR 0 6
17123: PPUSH
17124: LD_VAR 0 7
17128: PPUSH
17129: LD_VAR 0 8
17133: PPUSH
17134: LD_VAR 0 9
17138: PPUSH
17139: LD_VAR 0 4
17143: PPUSH
17144: LD_VAR 0 5
17148: PPUSH
17149: CALL 17191 0 6
17153: GO 17186
17155: LD_INT 304
17157: DOUBLE
17158: EQUAL
17159: IFTRUE 17163
17161: GO 17185
17163: POP
// hHackTeleport ( unit , x , y ) ; end ;
17164: LD_VAR 0 2
17168: PPUSH
17169: LD_VAR 0 4
17173: PPUSH
17174: LD_VAR 0 5
17178: PPUSH
17179: CALL 18950 0 3
17183: GO 17186
17185: POP
// end ;
17186: LD_VAR 0 12
17190: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17191: LD_INT 0
17193: PPUSH
17194: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17195: LD_VAR 0 1
17199: PUSH
17200: LD_INT 1
17202: LESS
17203: PUSH
17204: LD_VAR 0 1
17208: PUSH
17209: LD_INT 3
17211: GREATER
17212: OR
17213: PUSH
17214: LD_VAR 0 5
17218: PPUSH
17219: LD_VAR 0 6
17223: PPUSH
17224: CALL_OW 428
17228: OR
17229: IFFALSE 17233
// exit ;
17231: GO 17953
// uc_side := your_side ;
17233: LD_ADDR_OWVAR 20
17237: PUSH
17238: LD_OWVAR 2
17242: ST_TO_ADDR
// uc_nation := nation ;
17243: LD_ADDR_OWVAR 21
17247: PUSH
17248: LD_VAR 0 1
17252: ST_TO_ADDR
// bc_level = 1 ;
17253: LD_ADDR_OWVAR 43
17257: PUSH
17258: LD_INT 1
17260: ST_TO_ADDR
// case btype of 1 :
17261: LD_VAR 0 2
17265: PUSH
17266: LD_INT 1
17268: DOUBLE
17269: EQUAL
17270: IFTRUE 17274
17272: GO 17285
17274: POP
// bc_type := b_depot ; 2 :
17275: LD_ADDR_OWVAR 42
17279: PUSH
17280: LD_INT 0
17282: ST_TO_ADDR
17283: GO 17897
17285: LD_INT 2
17287: DOUBLE
17288: EQUAL
17289: IFTRUE 17293
17291: GO 17304
17293: POP
// bc_type := b_warehouse ; 3 :
17294: LD_ADDR_OWVAR 42
17298: PUSH
17299: LD_INT 1
17301: ST_TO_ADDR
17302: GO 17897
17304: LD_INT 3
17306: DOUBLE
17307: EQUAL
17308: IFTRUE 17312
17310: GO 17323
17312: POP
// bc_type := b_lab ; 4 .. 9 :
17313: LD_ADDR_OWVAR 42
17317: PUSH
17318: LD_INT 6
17320: ST_TO_ADDR
17321: GO 17897
17323: LD_INT 4
17325: DOUBLE
17326: GREATEREQUAL
17327: IFFALSE 17335
17329: LD_INT 9
17331: DOUBLE
17332: LESSEQUAL
17333: IFTRUE 17337
17335: GO 17389
17337: POP
// begin bc_type := b_lab_half ;
17338: LD_ADDR_OWVAR 42
17342: PUSH
17343: LD_INT 7
17345: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17346: LD_ADDR_OWVAR 44
17350: PUSH
17351: LD_INT 10
17353: PUSH
17354: LD_INT 11
17356: PUSH
17357: LD_INT 12
17359: PUSH
17360: LD_INT 15
17362: PUSH
17363: LD_INT 14
17365: PUSH
17366: LD_INT 13
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: PUSH
17377: LD_VAR 0 2
17381: PUSH
17382: LD_INT 3
17384: MINUS
17385: ARRAY
17386: ST_TO_ADDR
// end ; 10 .. 13 :
17387: GO 17897
17389: LD_INT 10
17391: DOUBLE
17392: GREATEREQUAL
17393: IFFALSE 17401
17395: LD_INT 13
17397: DOUBLE
17398: LESSEQUAL
17399: IFTRUE 17403
17401: GO 17480
17403: POP
// begin bc_type := b_lab_full ;
17404: LD_ADDR_OWVAR 42
17408: PUSH
17409: LD_INT 8
17411: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17412: LD_ADDR_OWVAR 44
17416: PUSH
17417: LD_INT 10
17419: PUSH
17420: LD_INT 12
17422: PUSH
17423: LD_INT 14
17425: PUSH
17426: LD_INT 13
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: PUSH
17435: LD_VAR 0 2
17439: PUSH
17440: LD_INT 9
17442: MINUS
17443: ARRAY
17444: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17445: LD_ADDR_OWVAR 45
17449: PUSH
17450: LD_INT 11
17452: PUSH
17453: LD_INT 15
17455: PUSH
17456: LD_INT 12
17458: PUSH
17459: LD_INT 15
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: PUSH
17468: LD_VAR 0 2
17472: PUSH
17473: LD_INT 9
17475: MINUS
17476: ARRAY
17477: ST_TO_ADDR
// end ; 14 :
17478: GO 17897
17480: LD_INT 14
17482: DOUBLE
17483: EQUAL
17484: IFTRUE 17488
17486: GO 17499
17488: POP
// bc_type := b_workshop ; 15 :
17489: LD_ADDR_OWVAR 42
17493: PUSH
17494: LD_INT 2
17496: ST_TO_ADDR
17497: GO 17897
17499: LD_INT 15
17501: DOUBLE
17502: EQUAL
17503: IFTRUE 17507
17505: GO 17518
17507: POP
// bc_type := b_factory ; 16 :
17508: LD_ADDR_OWVAR 42
17512: PUSH
17513: LD_INT 3
17515: ST_TO_ADDR
17516: GO 17897
17518: LD_INT 16
17520: DOUBLE
17521: EQUAL
17522: IFTRUE 17526
17524: GO 17537
17526: POP
// bc_type := b_ext_gun ; 17 :
17527: LD_ADDR_OWVAR 42
17531: PUSH
17532: LD_INT 17
17534: ST_TO_ADDR
17535: GO 17897
17537: LD_INT 17
17539: DOUBLE
17540: EQUAL
17541: IFTRUE 17545
17543: GO 17573
17545: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17546: LD_ADDR_OWVAR 42
17550: PUSH
17551: LD_INT 19
17553: PUSH
17554: LD_INT 23
17556: PUSH
17557: LD_INT 19
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: LIST
17564: PUSH
17565: LD_VAR 0 1
17569: ARRAY
17570: ST_TO_ADDR
17571: GO 17897
17573: LD_INT 18
17575: DOUBLE
17576: EQUAL
17577: IFTRUE 17581
17579: GO 17592
17581: POP
// bc_type := b_ext_radar ; 19 :
17582: LD_ADDR_OWVAR 42
17586: PUSH
17587: LD_INT 20
17589: ST_TO_ADDR
17590: GO 17897
17592: LD_INT 19
17594: DOUBLE
17595: EQUAL
17596: IFTRUE 17600
17598: GO 17611
17600: POP
// bc_type := b_ext_radio ; 20 :
17601: LD_ADDR_OWVAR 42
17605: PUSH
17606: LD_INT 22
17608: ST_TO_ADDR
17609: GO 17897
17611: LD_INT 20
17613: DOUBLE
17614: EQUAL
17615: IFTRUE 17619
17617: GO 17630
17619: POP
// bc_type := b_ext_siberium ; 21 :
17620: LD_ADDR_OWVAR 42
17624: PUSH
17625: LD_INT 21
17627: ST_TO_ADDR
17628: GO 17897
17630: LD_INT 21
17632: DOUBLE
17633: EQUAL
17634: IFTRUE 17638
17636: GO 17649
17638: POP
// bc_type := b_ext_computer ; 22 :
17639: LD_ADDR_OWVAR 42
17643: PUSH
17644: LD_INT 24
17646: ST_TO_ADDR
17647: GO 17897
17649: LD_INT 22
17651: DOUBLE
17652: EQUAL
17653: IFTRUE 17657
17655: GO 17668
17657: POP
// bc_type := b_ext_track ; 23 :
17658: LD_ADDR_OWVAR 42
17662: PUSH
17663: LD_INT 16
17665: ST_TO_ADDR
17666: GO 17897
17668: LD_INT 23
17670: DOUBLE
17671: EQUAL
17672: IFTRUE 17676
17674: GO 17687
17676: POP
// bc_type := b_ext_laser ; 24 :
17677: LD_ADDR_OWVAR 42
17681: PUSH
17682: LD_INT 25
17684: ST_TO_ADDR
17685: GO 17897
17687: LD_INT 24
17689: DOUBLE
17690: EQUAL
17691: IFTRUE 17695
17693: GO 17706
17695: POP
// bc_type := b_control_tower ; 25 :
17696: LD_ADDR_OWVAR 42
17700: PUSH
17701: LD_INT 36
17703: ST_TO_ADDR
17704: GO 17897
17706: LD_INT 25
17708: DOUBLE
17709: EQUAL
17710: IFTRUE 17714
17712: GO 17725
17714: POP
// bc_type := b_breastwork ; 26 :
17715: LD_ADDR_OWVAR 42
17719: PUSH
17720: LD_INT 31
17722: ST_TO_ADDR
17723: GO 17897
17725: LD_INT 26
17727: DOUBLE
17728: EQUAL
17729: IFTRUE 17733
17731: GO 17744
17733: POP
// bc_type := b_bunker ; 27 :
17734: LD_ADDR_OWVAR 42
17738: PUSH
17739: LD_INT 32
17741: ST_TO_ADDR
17742: GO 17897
17744: LD_INT 27
17746: DOUBLE
17747: EQUAL
17748: IFTRUE 17752
17750: GO 17763
17752: POP
// bc_type := b_turret ; 28 :
17753: LD_ADDR_OWVAR 42
17757: PUSH
17758: LD_INT 33
17760: ST_TO_ADDR
17761: GO 17897
17763: LD_INT 28
17765: DOUBLE
17766: EQUAL
17767: IFTRUE 17771
17769: GO 17782
17771: POP
// bc_type := b_armoury ; 29 :
17772: LD_ADDR_OWVAR 42
17776: PUSH
17777: LD_INT 4
17779: ST_TO_ADDR
17780: GO 17897
17782: LD_INT 29
17784: DOUBLE
17785: EQUAL
17786: IFTRUE 17790
17788: GO 17801
17790: POP
// bc_type := b_barracks ; 30 :
17791: LD_ADDR_OWVAR 42
17795: PUSH
17796: LD_INT 5
17798: ST_TO_ADDR
17799: GO 17897
17801: LD_INT 30
17803: DOUBLE
17804: EQUAL
17805: IFTRUE 17809
17807: GO 17820
17809: POP
// bc_type := b_solar_power ; 31 :
17810: LD_ADDR_OWVAR 42
17814: PUSH
17815: LD_INT 27
17817: ST_TO_ADDR
17818: GO 17897
17820: LD_INT 31
17822: DOUBLE
17823: EQUAL
17824: IFTRUE 17828
17826: GO 17839
17828: POP
// bc_type := b_oil_power ; 32 :
17829: LD_ADDR_OWVAR 42
17833: PUSH
17834: LD_INT 26
17836: ST_TO_ADDR
17837: GO 17897
17839: LD_INT 32
17841: DOUBLE
17842: EQUAL
17843: IFTRUE 17847
17845: GO 17858
17847: POP
// bc_type := b_siberite_power ; 33 :
17848: LD_ADDR_OWVAR 42
17852: PUSH
17853: LD_INT 28
17855: ST_TO_ADDR
17856: GO 17897
17858: LD_INT 33
17860: DOUBLE
17861: EQUAL
17862: IFTRUE 17866
17864: GO 17877
17866: POP
// bc_type := b_oil_mine ; 34 :
17867: LD_ADDR_OWVAR 42
17871: PUSH
17872: LD_INT 29
17874: ST_TO_ADDR
17875: GO 17897
17877: LD_INT 34
17879: DOUBLE
17880: EQUAL
17881: IFTRUE 17885
17883: GO 17896
17885: POP
// bc_type := b_siberite_mine ; end ;
17886: LD_ADDR_OWVAR 42
17890: PUSH
17891: LD_INT 30
17893: ST_TO_ADDR
17894: GO 17897
17896: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17897: LD_ADDR_VAR 0 8
17901: PUSH
17902: LD_VAR 0 5
17906: PPUSH
17907: LD_VAR 0 6
17911: PPUSH
17912: LD_VAR 0 3
17916: PPUSH
17917: CALL_OW 47
17921: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17922: LD_OWVAR 42
17926: PUSH
17927: LD_INT 32
17929: PUSH
17930: LD_INT 33
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: IN
17937: IFFALSE 17953
// PlaceWeaponTurret ( b , weapon ) ;
17939: LD_VAR 0 8
17943: PPUSH
17944: LD_VAR 0 4
17948: PPUSH
17949: CALL_OW 431
// end ;
17953: LD_VAR 0 7
17957: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17958: LD_INT 0
17960: PPUSH
17961: PPUSH
17962: PPUSH
17963: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17964: LD_ADDR_VAR 0 4
17968: PUSH
17969: LD_INT 22
17971: PUSH
17972: LD_OWVAR 2
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 2
17983: PUSH
17984: LD_INT 30
17986: PUSH
17987: LD_INT 0
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 30
17996: PUSH
17997: LD_INT 1
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: LIST
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PPUSH
18013: CALL_OW 69
18017: ST_TO_ADDR
// if not tmp then
18018: LD_VAR 0 4
18022: NOT
18023: IFFALSE 18027
// exit ;
18025: GO 18086
// for i in tmp do
18027: LD_ADDR_VAR 0 2
18031: PUSH
18032: LD_VAR 0 4
18036: PUSH
18037: FOR_IN
18038: IFFALSE 18084
// for j = 1 to 3 do
18040: LD_ADDR_VAR 0 3
18044: PUSH
18045: DOUBLE
18046: LD_INT 1
18048: DEC
18049: ST_TO_ADDR
18050: LD_INT 3
18052: PUSH
18053: FOR_TO
18054: IFFALSE 18080
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18056: LD_VAR 0 2
18060: PPUSH
18061: CALL_OW 274
18065: PPUSH
18066: LD_VAR 0 3
18070: PPUSH
18071: LD_INT 99999
18073: PPUSH
18074: CALL_OW 277
18078: GO 18053
18080: POP
18081: POP
18082: GO 18037
18084: POP
18085: POP
// end ;
18086: LD_VAR 0 1
18090: RET
// export function hHackSetLevel10 ; var i , j ; begin
18091: LD_INT 0
18093: PPUSH
18094: PPUSH
18095: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18096: LD_ADDR_VAR 0 2
18100: PUSH
18101: LD_INT 21
18103: PUSH
18104: LD_INT 1
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: PPUSH
18111: CALL_OW 69
18115: PUSH
18116: FOR_IN
18117: IFFALSE 18169
// if IsSelected ( i ) then
18119: LD_VAR 0 2
18123: PPUSH
18124: CALL_OW 306
18128: IFFALSE 18167
// begin for j := 1 to 4 do
18130: LD_ADDR_VAR 0 3
18134: PUSH
18135: DOUBLE
18136: LD_INT 1
18138: DEC
18139: ST_TO_ADDR
18140: LD_INT 4
18142: PUSH
18143: FOR_TO
18144: IFFALSE 18165
// SetSkill ( i , j , 10 ) ;
18146: LD_VAR 0 2
18150: PPUSH
18151: LD_VAR 0 3
18155: PPUSH
18156: LD_INT 10
18158: PPUSH
18159: CALL_OW 237
18163: GO 18143
18165: POP
18166: POP
// end ;
18167: GO 18116
18169: POP
18170: POP
// end ;
18171: LD_VAR 0 1
18175: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18176: LD_INT 0
18178: PPUSH
18179: PPUSH
18180: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18181: LD_ADDR_VAR 0 2
18185: PUSH
18186: LD_INT 22
18188: PUSH
18189: LD_OWVAR 2
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 21
18200: PUSH
18201: LD_INT 1
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PPUSH
18212: CALL_OW 69
18216: PUSH
18217: FOR_IN
18218: IFFALSE 18259
// begin for j := 1 to 4 do
18220: LD_ADDR_VAR 0 3
18224: PUSH
18225: DOUBLE
18226: LD_INT 1
18228: DEC
18229: ST_TO_ADDR
18230: LD_INT 4
18232: PUSH
18233: FOR_TO
18234: IFFALSE 18255
// SetSkill ( i , j , 10 ) ;
18236: LD_VAR 0 2
18240: PPUSH
18241: LD_VAR 0 3
18245: PPUSH
18246: LD_INT 10
18248: PPUSH
18249: CALL_OW 237
18253: GO 18233
18255: POP
18256: POP
// end ;
18257: GO 18217
18259: POP
18260: POP
// end ;
18261: LD_VAR 0 1
18265: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18266: LD_INT 0
18268: PPUSH
// uc_side := your_side ;
18269: LD_ADDR_OWVAR 20
18273: PUSH
18274: LD_OWVAR 2
18278: ST_TO_ADDR
// uc_nation := nation ;
18279: LD_ADDR_OWVAR 21
18283: PUSH
18284: LD_VAR 0 1
18288: ST_TO_ADDR
// InitHc ;
18289: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18293: LD_INT 0
18295: PPUSH
18296: LD_VAR 0 2
18300: PPUSH
18301: LD_VAR 0 3
18305: PPUSH
18306: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18310: LD_VAR 0 4
18314: PPUSH
18315: LD_VAR 0 5
18319: PPUSH
18320: CALL_OW 428
18324: PUSH
18325: LD_INT 0
18327: EQUAL
18328: IFFALSE 18352
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18330: CALL_OW 44
18334: PPUSH
18335: LD_VAR 0 4
18339: PPUSH
18340: LD_VAR 0 5
18344: PPUSH
18345: LD_INT 1
18347: PPUSH
18348: CALL_OW 48
// end ;
18352: LD_VAR 0 6
18356: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18357: LD_INT 0
18359: PPUSH
18360: PPUSH
// uc_side := your_side ;
18361: LD_ADDR_OWVAR 20
18365: PUSH
18366: LD_OWVAR 2
18370: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18371: LD_VAR 0 1
18375: PUSH
18376: LD_INT 1
18378: PUSH
18379: LD_INT 2
18381: PUSH
18382: LD_INT 3
18384: PUSH
18385: LD_INT 4
18387: PUSH
18388: LD_INT 5
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: IN
18398: IFFALSE 18410
// uc_nation := nation_american else
18400: LD_ADDR_OWVAR 21
18404: PUSH
18405: LD_INT 1
18407: ST_TO_ADDR
18408: GO 18453
// if chassis in [ 11 , 12 , 13 , 14 ] then
18410: LD_VAR 0 1
18414: PUSH
18415: LD_INT 11
18417: PUSH
18418: LD_INT 12
18420: PUSH
18421: LD_INT 13
18423: PUSH
18424: LD_INT 14
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: IN
18433: IFFALSE 18445
// uc_nation := nation_arabian else
18435: LD_ADDR_OWVAR 21
18439: PUSH
18440: LD_INT 2
18442: ST_TO_ADDR
18443: GO 18453
// uc_nation := nation_russian ;
18445: LD_ADDR_OWVAR 21
18449: PUSH
18450: LD_INT 3
18452: ST_TO_ADDR
// vc_chassis := chassis ;
18453: LD_ADDR_OWVAR 37
18457: PUSH
18458: LD_VAR 0 1
18462: ST_TO_ADDR
// vc_engine := engine ;
18463: LD_ADDR_OWVAR 39
18467: PUSH
18468: LD_VAR 0 2
18472: ST_TO_ADDR
// vc_control := control ;
18473: LD_ADDR_OWVAR 38
18477: PUSH
18478: LD_VAR 0 3
18482: ST_TO_ADDR
// vc_weapon := weapon ;
18483: LD_ADDR_OWVAR 40
18487: PUSH
18488: LD_VAR 0 4
18492: ST_TO_ADDR
// un := CreateVehicle ;
18493: LD_ADDR_VAR 0 8
18497: PUSH
18498: CALL_OW 45
18502: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18503: LD_VAR 0 8
18507: PPUSH
18508: LD_INT 0
18510: PPUSH
18511: LD_INT 5
18513: PPUSH
18514: CALL_OW 12
18518: PPUSH
18519: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18523: LD_VAR 0 8
18527: PPUSH
18528: LD_VAR 0 5
18532: PPUSH
18533: LD_VAR 0 6
18537: PPUSH
18538: LD_INT 1
18540: PPUSH
18541: CALL_OW 48
// end ;
18545: LD_VAR 0 7
18549: RET
// export hInvincible ; every 1 do
18550: GO 18552
18552: DISABLE
// hInvincible := [ ] ;
18553: LD_ADDR_EXP 78
18557: PUSH
18558: EMPTY
18559: ST_TO_ADDR
18560: END
// every 10 do var i ;
18561: GO 18563
18563: DISABLE
18564: LD_INT 0
18566: PPUSH
// begin enable ;
18567: ENABLE
// if not hInvincible then
18568: LD_EXP 78
18572: NOT
18573: IFFALSE 18577
// exit ;
18575: GO 18621
// for i in hInvincible do
18577: LD_ADDR_VAR 0 1
18581: PUSH
18582: LD_EXP 78
18586: PUSH
18587: FOR_IN
18588: IFFALSE 18619
// if GetLives ( i ) < 1000 then
18590: LD_VAR 0 1
18594: PPUSH
18595: CALL_OW 256
18599: PUSH
18600: LD_INT 1000
18602: LESS
18603: IFFALSE 18617
// SetLives ( i , 1000 ) ;
18605: LD_VAR 0 1
18609: PPUSH
18610: LD_INT 1000
18612: PPUSH
18613: CALL_OW 234
18617: GO 18587
18619: POP
18620: POP
// end ;
18621: PPOPN 1
18623: END
// export function hHackInvincible ; var i ; begin
18624: LD_INT 0
18626: PPUSH
18627: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18628: LD_ADDR_VAR 0 2
18632: PUSH
18633: LD_INT 2
18635: PUSH
18636: LD_INT 21
18638: PUSH
18639: LD_INT 1
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PUSH
18646: LD_INT 21
18648: PUSH
18649: LD_INT 2
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: LIST
18660: PPUSH
18661: CALL_OW 69
18665: PUSH
18666: FOR_IN
18667: IFFALSE 18728
// if IsSelected ( i ) then
18669: LD_VAR 0 2
18673: PPUSH
18674: CALL_OW 306
18678: IFFALSE 18726
// begin if i in hInvincible then
18680: LD_VAR 0 2
18684: PUSH
18685: LD_EXP 78
18689: IN
18690: IFFALSE 18710
// hInvincible := hInvincible diff i else
18692: LD_ADDR_EXP 78
18696: PUSH
18697: LD_EXP 78
18701: PUSH
18702: LD_VAR 0 2
18706: DIFF
18707: ST_TO_ADDR
18708: GO 18726
// hInvincible := hInvincible union i ;
18710: LD_ADDR_EXP 78
18714: PUSH
18715: LD_EXP 78
18719: PUSH
18720: LD_VAR 0 2
18724: UNION
18725: ST_TO_ADDR
// end ;
18726: GO 18666
18728: POP
18729: POP
// end ;
18730: LD_VAR 0 1
18734: RET
// export function hHackInvisible ; var i , j ; begin
18735: LD_INT 0
18737: PPUSH
18738: PPUSH
18739: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18740: LD_ADDR_VAR 0 2
18744: PUSH
18745: LD_INT 21
18747: PUSH
18748: LD_INT 1
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PPUSH
18755: CALL_OW 69
18759: PUSH
18760: FOR_IN
18761: IFFALSE 18785
// if IsSelected ( i ) then
18763: LD_VAR 0 2
18767: PPUSH
18768: CALL_OW 306
18772: IFFALSE 18783
// ComForceInvisible ( i ) ;
18774: LD_VAR 0 2
18778: PPUSH
18779: CALL_OW 496
18783: GO 18760
18785: POP
18786: POP
// end ;
18787: LD_VAR 0 1
18791: RET
// export function hHackChangeYourSide ; begin
18792: LD_INT 0
18794: PPUSH
// if your_side = 8 then
18795: LD_OWVAR 2
18799: PUSH
18800: LD_INT 8
18802: EQUAL
18803: IFFALSE 18815
// your_side := 0 else
18805: LD_ADDR_OWVAR 2
18809: PUSH
18810: LD_INT 0
18812: ST_TO_ADDR
18813: GO 18829
// your_side := your_side + 1 ;
18815: LD_ADDR_OWVAR 2
18819: PUSH
18820: LD_OWVAR 2
18824: PUSH
18825: LD_INT 1
18827: PLUS
18828: ST_TO_ADDR
// end ;
18829: LD_VAR 0 1
18833: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18834: LD_INT 0
18836: PPUSH
18837: PPUSH
18838: PPUSH
// for i in all_units do
18839: LD_ADDR_VAR 0 2
18843: PUSH
18844: LD_OWVAR 3
18848: PUSH
18849: FOR_IN
18850: IFFALSE 18928
// if IsSelected ( i ) then
18852: LD_VAR 0 2
18856: PPUSH
18857: CALL_OW 306
18861: IFFALSE 18926
// begin j := GetSide ( i ) ;
18863: LD_ADDR_VAR 0 3
18867: PUSH
18868: LD_VAR 0 2
18872: PPUSH
18873: CALL_OW 255
18877: ST_TO_ADDR
// if j = 8 then
18878: LD_VAR 0 3
18882: PUSH
18883: LD_INT 8
18885: EQUAL
18886: IFFALSE 18898
// j := 0 else
18888: LD_ADDR_VAR 0 3
18892: PUSH
18893: LD_INT 0
18895: ST_TO_ADDR
18896: GO 18912
// j := j + 1 ;
18898: LD_ADDR_VAR 0 3
18902: PUSH
18903: LD_VAR 0 3
18907: PUSH
18908: LD_INT 1
18910: PLUS
18911: ST_TO_ADDR
// SetSide ( i , j ) ;
18912: LD_VAR 0 2
18916: PPUSH
18917: LD_VAR 0 3
18921: PPUSH
18922: CALL_OW 235
// end ;
18926: GO 18849
18928: POP
18929: POP
// end ;
18930: LD_VAR 0 1
18934: RET
// export function hHackFog ; begin
18935: LD_INT 0
18937: PPUSH
// FogOff ( true ) ;
18938: LD_INT 1
18940: PPUSH
18941: CALL_OW 344
// end ;
18945: LD_VAR 0 1
18949: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18950: LD_INT 0
18952: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18953: LD_VAR 0 1
18957: PPUSH
18958: LD_VAR 0 2
18962: PPUSH
18963: LD_VAR 0 3
18967: PPUSH
18968: LD_INT 1
18970: PPUSH
18971: LD_INT 1
18973: PPUSH
18974: CALL_OW 483
// CenterOnXY ( x , y ) ;
18978: LD_VAR 0 2
18982: PPUSH
18983: LD_VAR 0 3
18987: PPUSH
18988: CALL_OW 84
// end ; end_of_file
18992: LD_VAR 0 4
18996: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
18997: LD_INT 0
18999: PPUSH
19000: PPUSH
19001: PPUSH
19002: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19003: LD_VAR 0 1
19007: PPUSH
19008: CALL_OW 264
19012: PUSH
19013: LD_EXP 95
19017: EQUAL
19018: IFFALSE 19090
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19020: LD_INT 68
19022: PPUSH
19023: LD_VAR 0 1
19027: PPUSH
19028: CALL_OW 255
19032: PPUSH
19033: CALL_OW 321
19037: PUSH
19038: LD_INT 2
19040: EQUAL
19041: IFFALSE 19053
// eff := 70 else
19043: LD_ADDR_VAR 0 4
19047: PUSH
19048: LD_INT 70
19050: ST_TO_ADDR
19051: GO 19061
// eff := 30 ;
19053: LD_ADDR_VAR 0 4
19057: PUSH
19058: LD_INT 30
19060: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19061: LD_VAR 0 1
19065: PPUSH
19066: CALL_OW 250
19070: PPUSH
19071: LD_VAR 0 1
19075: PPUSH
19076: CALL_OW 251
19080: PPUSH
19081: LD_VAR 0 4
19085: PPUSH
19086: CALL_OW 495
// end ; end ;
19090: LD_VAR 0 2
19094: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
19095: LD_INT 0
19097: PPUSH
// end ;
19098: LD_VAR 0 4
19102: RET
// export function SOS_Command ( cmd ) ; begin
19103: LD_INT 0
19105: PPUSH
// end ;
19106: LD_VAR 0 2
19110: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
19111: LD_INT 0
19113: PPUSH
// if cmd = 121 then
19114: LD_VAR 0 1
19118: PUSH
19119: LD_INT 121
19121: EQUAL
19122: IFFALSE 19124
// end ;
19124: LD_VAR 0 6
19128: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
19129: LD_INT 0
19131: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
19132: LD_VAR 0 1
19136: PUSH
19137: LD_INT 250
19139: EQUAL
19140: PUSH
19141: LD_VAR 0 2
19145: PPUSH
19146: CALL_OW 264
19150: PUSH
19151: LD_EXP 98
19155: EQUAL
19156: AND
19157: IFFALSE 19178
// MinerPlaceMine ( unit , x , y ) ;
19159: LD_VAR 0 2
19163: PPUSH
19164: LD_VAR 0 4
19168: PPUSH
19169: LD_VAR 0 5
19173: PPUSH
19174: CALL 21527 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
19178: LD_VAR 0 1
19182: PUSH
19183: LD_INT 251
19185: EQUAL
19186: PUSH
19187: LD_VAR 0 2
19191: PPUSH
19192: CALL_OW 264
19196: PUSH
19197: LD_EXP 98
19201: EQUAL
19202: AND
19203: IFFALSE 19224
// MinerDetonateMine ( unit , x , y ) ;
19205: LD_VAR 0 2
19209: PPUSH
19210: LD_VAR 0 4
19214: PPUSH
19215: LD_VAR 0 5
19219: PPUSH
19220: CALL 21804 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
19224: LD_VAR 0 1
19228: PUSH
19229: LD_INT 252
19231: EQUAL
19232: PUSH
19233: LD_VAR 0 2
19237: PPUSH
19238: CALL_OW 264
19242: PUSH
19243: LD_EXP 98
19247: EQUAL
19248: AND
19249: IFFALSE 19270
// MinerCreateMinefield ( unit , x , y ) ;
19251: LD_VAR 0 2
19255: PPUSH
19256: LD_VAR 0 4
19260: PPUSH
19261: LD_VAR 0 5
19265: PPUSH
19266: CALL 22221 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
19270: LD_VAR 0 1
19274: PUSH
19275: LD_INT 253
19277: EQUAL
19278: PUSH
19279: LD_VAR 0 2
19283: PPUSH
19284: CALL_OW 257
19288: PUSH
19289: LD_INT 5
19291: EQUAL
19292: AND
19293: IFFALSE 19314
// ComBinocular ( unit , x , y ) ;
19295: LD_VAR 0 2
19299: PPUSH
19300: LD_VAR 0 4
19304: PPUSH
19305: LD_VAR 0 5
19309: PPUSH
19310: CALL 22592 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
19314: LD_VAR 0 1
19318: PUSH
19319: LD_INT 254
19321: EQUAL
19322: PUSH
19323: LD_VAR 0 2
19327: PPUSH
19328: CALL_OW 264
19332: PUSH
19333: LD_EXP 93
19337: EQUAL
19338: AND
19339: PUSH
19340: LD_VAR 0 3
19344: PPUSH
19345: CALL_OW 263
19349: PUSH
19350: LD_INT 3
19352: EQUAL
19353: AND
19354: IFFALSE 19370
// HackDestroyVehicle ( unit , selectedUnit ) ;
19356: LD_VAR 0 2
19360: PPUSH
19361: LD_VAR 0 3
19365: PPUSH
19366: CALL 20887 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
19370: LD_VAR 0 1
19374: PUSH
19375: LD_INT 255
19377: EQUAL
19378: PUSH
19379: LD_VAR 0 2
19383: PPUSH
19384: CALL_OW 264
19388: PUSH
19389: LD_INT 14
19391: PUSH
19392: LD_INT 53
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: IN
19399: AND
19400: PUSH
19401: LD_VAR 0 4
19405: PPUSH
19406: LD_VAR 0 5
19410: PPUSH
19411: CALL_OW 488
19415: AND
19416: IFFALSE 19440
// CutTreeXYR ( unit , x , y , 12 ) ;
19418: LD_VAR 0 2
19422: PPUSH
19423: LD_VAR 0 4
19427: PPUSH
19428: LD_VAR 0 5
19432: PPUSH
19433: LD_INT 12
19435: PPUSH
19436: CALL 19453 0 4
// end ;
19440: LD_VAR 0 6
19444: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
19445: LD_INT 0
19447: PPUSH
// end ;
19448: LD_VAR 0 4
19452: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
19453: LD_INT 0
19455: PPUSH
19456: PPUSH
19457: PPUSH
19458: PPUSH
19459: PPUSH
19460: PPUSH
19461: PPUSH
19462: PPUSH
19463: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
19464: LD_VAR 0 1
19468: NOT
19469: PUSH
19470: LD_VAR 0 2
19474: PPUSH
19475: LD_VAR 0 3
19479: PPUSH
19480: CALL_OW 488
19484: NOT
19485: OR
19486: PUSH
19487: LD_VAR 0 4
19491: NOT
19492: OR
19493: IFFALSE 19497
// exit ;
19495: GO 19837
// list := [ ] ;
19497: LD_ADDR_VAR 0 13
19501: PUSH
19502: EMPTY
19503: ST_TO_ADDR
// if x - r < 0 then
19504: LD_VAR 0 2
19508: PUSH
19509: LD_VAR 0 4
19513: MINUS
19514: PUSH
19515: LD_INT 0
19517: LESS
19518: IFFALSE 19530
// min_x := 0 else
19520: LD_ADDR_VAR 0 7
19524: PUSH
19525: LD_INT 0
19527: ST_TO_ADDR
19528: GO 19546
// min_x := x - r ;
19530: LD_ADDR_VAR 0 7
19534: PUSH
19535: LD_VAR 0 2
19539: PUSH
19540: LD_VAR 0 4
19544: MINUS
19545: ST_TO_ADDR
// if y - r < 0 then
19546: LD_VAR 0 3
19550: PUSH
19551: LD_VAR 0 4
19555: MINUS
19556: PUSH
19557: LD_INT 0
19559: LESS
19560: IFFALSE 19572
// min_y := 0 else
19562: LD_ADDR_VAR 0 8
19566: PUSH
19567: LD_INT 0
19569: ST_TO_ADDR
19570: GO 19588
// min_y := y - r ;
19572: LD_ADDR_VAR 0 8
19576: PUSH
19577: LD_VAR 0 3
19581: PUSH
19582: LD_VAR 0 4
19586: MINUS
19587: ST_TO_ADDR
// max_x := x + r ;
19588: LD_ADDR_VAR 0 9
19592: PUSH
19593: LD_VAR 0 2
19597: PUSH
19598: LD_VAR 0 4
19602: PLUS
19603: ST_TO_ADDR
// max_y := y + r ;
19604: LD_ADDR_VAR 0 10
19608: PUSH
19609: LD_VAR 0 3
19613: PUSH
19614: LD_VAR 0 4
19618: PLUS
19619: ST_TO_ADDR
// for _x = min_x to max_x do
19620: LD_ADDR_VAR 0 11
19624: PUSH
19625: DOUBLE
19626: LD_VAR 0 7
19630: DEC
19631: ST_TO_ADDR
19632: LD_VAR 0 9
19636: PUSH
19637: FOR_TO
19638: IFFALSE 19755
// for _y = min_y to max_y do
19640: LD_ADDR_VAR 0 12
19644: PUSH
19645: DOUBLE
19646: LD_VAR 0 8
19650: DEC
19651: ST_TO_ADDR
19652: LD_VAR 0 10
19656: PUSH
19657: FOR_TO
19658: IFFALSE 19751
// begin if not ValidHex ( _x , _y ) then
19660: LD_VAR 0 11
19664: PPUSH
19665: LD_VAR 0 12
19669: PPUSH
19670: CALL_OW 488
19674: NOT
19675: IFFALSE 19679
// continue ;
19677: GO 19657
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19679: LD_VAR 0 11
19683: PPUSH
19684: LD_VAR 0 12
19688: PPUSH
19689: CALL_OW 351
19693: PUSH
19694: LD_VAR 0 11
19698: PPUSH
19699: LD_VAR 0 12
19703: PPUSH
19704: CALL_OW 554
19708: AND
19709: IFFALSE 19749
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19711: LD_ADDR_VAR 0 13
19715: PUSH
19716: LD_VAR 0 13
19720: PPUSH
19721: LD_VAR 0 13
19725: PUSH
19726: LD_INT 1
19728: PLUS
19729: PPUSH
19730: LD_VAR 0 11
19734: PUSH
19735: LD_VAR 0 12
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PPUSH
19744: CALL_OW 2
19748: ST_TO_ADDR
// end ;
19749: GO 19657
19751: POP
19752: POP
19753: GO 19637
19755: POP
19756: POP
// if not list then
19757: LD_VAR 0 13
19761: NOT
19762: IFFALSE 19766
// exit ;
19764: GO 19837
// for i in list do
19766: LD_ADDR_VAR 0 6
19770: PUSH
19771: LD_VAR 0 13
19775: PUSH
19776: FOR_IN
19777: IFFALSE 19835
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
19779: LD_VAR 0 1
19783: PPUSH
19784: LD_STRING M
19786: PUSH
19787: LD_VAR 0 6
19791: PUSH
19792: LD_INT 1
19794: ARRAY
19795: PUSH
19796: LD_VAR 0 6
19800: PUSH
19801: LD_INT 2
19803: ARRAY
19804: PUSH
19805: LD_INT 0
19807: PUSH
19808: LD_INT 0
19810: PUSH
19811: LD_INT 0
19813: PUSH
19814: LD_INT 0
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: PUSH
19826: EMPTY
19827: LIST
19828: PPUSH
19829: CALL_OW 447
19833: GO 19776
19835: POP
19836: POP
// end ;
19837: LD_VAR 0 5
19841: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
19842: LD_EXP 81
19846: NOT
19847: IFFALSE 19897
19849: GO 19851
19851: DISABLE
// begin initHack := true ;
19852: LD_ADDR_EXP 81
19856: PUSH
19857: LD_INT 1
19859: ST_TO_ADDR
// hackTanks := [ ] ;
19860: LD_ADDR_EXP 82
19864: PUSH
19865: EMPTY
19866: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
19867: LD_ADDR_EXP 83
19871: PUSH
19872: EMPTY
19873: ST_TO_ADDR
// hackLimit := 3 ;
19874: LD_ADDR_EXP 84
19878: PUSH
19879: LD_INT 3
19881: ST_TO_ADDR
// hackDist := 12 ;
19882: LD_ADDR_EXP 85
19886: PUSH
19887: LD_INT 12
19889: ST_TO_ADDR
// hackCounter := [ ] ;
19890: LD_ADDR_EXP 86
19894: PUSH
19895: EMPTY
19896: ST_TO_ADDR
// end ;
19897: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
19898: LD_EXP 81
19902: PUSH
19903: LD_INT 34
19905: PUSH
19906: LD_EXP 93
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PPUSH
19915: CALL_OW 69
19919: AND
19920: IFFALSE 20175
19922: GO 19924
19924: DISABLE
19925: LD_INT 0
19927: PPUSH
19928: PPUSH
// begin enable ;
19929: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
19930: LD_ADDR_VAR 0 1
19934: PUSH
19935: LD_INT 34
19937: PUSH
19938: LD_EXP 93
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: PPUSH
19947: CALL_OW 69
19951: PUSH
19952: FOR_IN
19953: IFFALSE 20173
// begin if not i in hackTanks then
19955: LD_VAR 0 1
19959: PUSH
19960: LD_EXP 82
19964: IN
19965: NOT
19966: IFFALSE 20049
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19968: LD_ADDR_EXP 82
19972: PUSH
19973: LD_EXP 82
19977: PPUSH
19978: LD_EXP 82
19982: PUSH
19983: LD_INT 1
19985: PLUS
19986: PPUSH
19987: LD_VAR 0 1
19991: PPUSH
19992: CALL_OW 1
19996: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19997: LD_ADDR_EXP 83
20001: PUSH
20002: LD_EXP 83
20006: PPUSH
20007: LD_EXP 83
20011: PUSH
20012: LD_INT 1
20014: PLUS
20015: PPUSH
20016: EMPTY
20017: PPUSH
20018: CALL_OW 1
20022: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
20023: LD_ADDR_EXP 86
20027: PUSH
20028: LD_EXP 86
20032: PPUSH
20033: LD_EXP 86
20037: PUSH
20038: LD_INT 1
20040: PLUS
20041: PPUSH
20042: EMPTY
20043: PPUSH
20044: CALL_OW 1
20048: ST_TO_ADDR
// end ; if not IsOk ( i ) then
20049: LD_VAR 0 1
20053: PPUSH
20054: CALL_OW 302
20058: NOT
20059: IFFALSE 20072
// begin HackUnlinkAll ( i ) ;
20061: LD_VAR 0 1
20065: PPUSH
20066: CALL 20178 0 1
// continue ;
20070: GO 19952
// end ; HackCheckCapturedStatus ( i ) ;
20072: LD_VAR 0 1
20076: PPUSH
20077: CALL 20621 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
20081: LD_ADDR_VAR 0 2
20085: PUSH
20086: LD_INT 81
20088: PUSH
20089: LD_VAR 0 1
20093: PPUSH
20094: CALL_OW 255
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: LD_INT 33
20105: PUSH
20106: LD_INT 3
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: PUSH
20113: LD_INT 91
20115: PUSH
20116: LD_VAR 0 1
20120: PUSH
20121: LD_EXP 85
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 50
20133: PUSH
20134: EMPTY
20135: LIST
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: PPUSH
20143: CALL_OW 69
20147: ST_TO_ADDR
// if not tmp then
20148: LD_VAR 0 2
20152: NOT
20153: IFFALSE 20157
// continue ;
20155: GO 19952
// HackLink ( i , tmp ) ;
20157: LD_VAR 0 1
20161: PPUSH
20162: LD_VAR 0 2
20166: PPUSH
20167: CALL 20314 0 2
// end ;
20171: GO 19952
20173: POP
20174: POP
// end ;
20175: PPOPN 2
20177: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
20178: LD_INT 0
20180: PPUSH
20181: PPUSH
20182: PPUSH
// if not hack in hackTanks then
20183: LD_VAR 0 1
20187: PUSH
20188: LD_EXP 82
20192: IN
20193: NOT
20194: IFFALSE 20198
// exit ;
20196: GO 20309
// index := GetElementIndex ( hackTanks , hack ) ;
20198: LD_ADDR_VAR 0 4
20202: PUSH
20203: LD_EXP 82
20207: PPUSH
20208: LD_VAR 0 1
20212: PPUSH
20213: CALL 27951 0 2
20217: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
20218: LD_EXP 83
20222: PUSH
20223: LD_VAR 0 4
20227: ARRAY
20228: IFFALSE 20309
// begin for i in hackTanksCaptured [ index ] do
20230: LD_ADDR_VAR 0 3
20234: PUSH
20235: LD_EXP 83
20239: PUSH
20240: LD_VAR 0 4
20244: ARRAY
20245: PUSH
20246: FOR_IN
20247: IFFALSE 20273
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
20249: LD_VAR 0 3
20253: PUSH
20254: LD_INT 1
20256: ARRAY
20257: PPUSH
20258: LD_VAR 0 3
20262: PUSH
20263: LD_INT 2
20265: ARRAY
20266: PPUSH
20267: CALL_OW 235
20271: GO 20246
20273: POP
20274: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
20275: LD_ADDR_EXP 83
20279: PUSH
20280: LD_EXP 83
20284: PPUSH
20285: LD_VAR 0 4
20289: PPUSH
20290: EMPTY
20291: PPUSH
20292: CALL_OW 1
20296: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
20297: LD_VAR 0 1
20301: PPUSH
20302: LD_INT 0
20304: PPUSH
20305: CALL_OW 505
// end ; end ;
20309: LD_VAR 0 2
20313: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
20314: LD_INT 0
20316: PPUSH
20317: PPUSH
20318: PPUSH
// if not hack in hackTanks or not vehicles then
20319: LD_VAR 0 1
20323: PUSH
20324: LD_EXP 82
20328: IN
20329: NOT
20330: PUSH
20331: LD_VAR 0 2
20335: NOT
20336: OR
20337: IFFALSE 20341
// exit ;
20339: GO 20616
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
20341: LD_ADDR_VAR 0 2
20345: PUSH
20346: LD_VAR 0 1
20350: PPUSH
20351: LD_VAR 0 2
20355: PPUSH
20356: LD_INT 1
20358: PPUSH
20359: LD_INT 1
20361: PPUSH
20362: CALL 28601 0 4
20366: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
20367: LD_ADDR_VAR 0 5
20371: PUSH
20372: LD_EXP 82
20376: PPUSH
20377: LD_VAR 0 1
20381: PPUSH
20382: CALL 27951 0 2
20386: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
20387: LD_EXP 83
20391: PUSH
20392: LD_VAR 0 5
20396: ARRAY
20397: PUSH
20398: LD_EXP 84
20402: LESS
20403: IFFALSE 20592
// begin for i := 1 to vehicles do
20405: LD_ADDR_VAR 0 4
20409: PUSH
20410: DOUBLE
20411: LD_INT 1
20413: DEC
20414: ST_TO_ADDR
20415: LD_VAR 0 2
20419: PUSH
20420: FOR_TO
20421: IFFALSE 20590
// begin if hackTanksCaptured [ index ] = hackLimit then
20423: LD_EXP 83
20427: PUSH
20428: LD_VAR 0 5
20432: ARRAY
20433: PUSH
20434: LD_EXP 84
20438: EQUAL
20439: IFFALSE 20443
// break ;
20441: GO 20590
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
20443: LD_ADDR_EXP 86
20447: PUSH
20448: LD_EXP 86
20452: PPUSH
20453: LD_VAR 0 5
20457: PPUSH
20458: LD_EXP 86
20462: PUSH
20463: LD_VAR 0 5
20467: ARRAY
20468: PUSH
20469: LD_INT 1
20471: PLUS
20472: PPUSH
20473: CALL_OW 1
20477: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
20478: LD_ADDR_EXP 83
20482: PUSH
20483: LD_EXP 83
20487: PPUSH
20488: LD_VAR 0 5
20492: PUSH
20493: LD_EXP 83
20497: PUSH
20498: LD_VAR 0 5
20502: ARRAY
20503: PUSH
20504: LD_INT 1
20506: PLUS
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: PPUSH
20512: LD_VAR 0 2
20516: PUSH
20517: LD_VAR 0 4
20521: ARRAY
20522: PUSH
20523: LD_VAR 0 2
20527: PUSH
20528: LD_VAR 0 4
20532: ARRAY
20533: PPUSH
20534: CALL_OW 255
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PPUSH
20543: CALL 28166 0 3
20547: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
20548: LD_VAR 0 2
20552: PUSH
20553: LD_VAR 0 4
20557: ARRAY
20558: PPUSH
20559: LD_VAR 0 1
20563: PPUSH
20564: CALL_OW 255
20568: PPUSH
20569: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
20573: LD_VAR 0 2
20577: PUSH
20578: LD_VAR 0 4
20582: ARRAY
20583: PPUSH
20584: CALL_OW 141
// end ;
20588: GO 20420
20590: POP
20591: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20592: LD_VAR 0 1
20596: PPUSH
20597: LD_EXP 83
20601: PUSH
20602: LD_VAR 0 5
20606: ARRAY
20607: PUSH
20608: LD_INT 0
20610: PLUS
20611: PPUSH
20612: CALL_OW 505
// end ;
20616: LD_VAR 0 3
20620: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
20621: LD_INT 0
20623: PPUSH
20624: PPUSH
20625: PPUSH
20626: PPUSH
// if not hack in hackTanks then
20627: LD_VAR 0 1
20631: PUSH
20632: LD_EXP 82
20636: IN
20637: NOT
20638: IFFALSE 20642
// exit ;
20640: GO 20882
// index := GetElementIndex ( hackTanks , hack ) ;
20642: LD_ADDR_VAR 0 4
20646: PUSH
20647: LD_EXP 82
20651: PPUSH
20652: LD_VAR 0 1
20656: PPUSH
20657: CALL 27951 0 2
20661: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
20662: LD_ADDR_VAR 0 3
20666: PUSH
20667: DOUBLE
20668: LD_EXP 83
20672: PUSH
20673: LD_VAR 0 4
20677: ARRAY
20678: INC
20679: ST_TO_ADDR
20680: LD_INT 1
20682: PUSH
20683: FOR_DOWNTO
20684: IFFALSE 20856
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
20686: LD_ADDR_VAR 0 5
20690: PUSH
20691: LD_EXP 83
20695: PUSH
20696: LD_VAR 0 4
20700: ARRAY
20701: PUSH
20702: LD_VAR 0 3
20706: ARRAY
20707: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
20708: LD_VAR 0 5
20712: PUSH
20713: LD_INT 1
20715: ARRAY
20716: PPUSH
20717: CALL_OW 302
20721: NOT
20722: PUSH
20723: LD_VAR 0 5
20727: PUSH
20728: LD_INT 1
20730: ARRAY
20731: PPUSH
20732: CALL_OW 255
20736: PUSH
20737: LD_VAR 0 1
20741: PPUSH
20742: CALL_OW 255
20746: NONEQUAL
20747: OR
20748: IFFALSE 20854
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
20750: LD_VAR 0 5
20754: PUSH
20755: LD_INT 1
20757: ARRAY
20758: PPUSH
20759: CALL_OW 305
20763: PUSH
20764: LD_VAR 0 5
20768: PUSH
20769: LD_INT 1
20771: ARRAY
20772: PPUSH
20773: CALL_OW 255
20777: PUSH
20778: LD_VAR 0 1
20782: PPUSH
20783: CALL_OW 255
20787: EQUAL
20788: AND
20789: IFFALSE 20813
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
20791: LD_VAR 0 5
20795: PUSH
20796: LD_INT 1
20798: ARRAY
20799: PPUSH
20800: LD_VAR 0 5
20804: PUSH
20805: LD_INT 2
20807: ARRAY
20808: PPUSH
20809: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
20813: LD_ADDR_EXP 83
20817: PUSH
20818: LD_EXP 83
20822: PPUSH
20823: LD_VAR 0 4
20827: PPUSH
20828: LD_EXP 83
20832: PUSH
20833: LD_VAR 0 4
20837: ARRAY
20838: PPUSH
20839: LD_VAR 0 3
20843: PPUSH
20844: CALL_OW 3
20848: PPUSH
20849: CALL_OW 1
20853: ST_TO_ADDR
// end ; end ;
20854: GO 20683
20856: POP
20857: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20858: LD_VAR 0 1
20862: PPUSH
20863: LD_EXP 83
20867: PUSH
20868: LD_VAR 0 4
20872: ARRAY
20873: PUSH
20874: LD_INT 0
20876: PLUS
20877: PPUSH
20878: CALL_OW 505
// end ;
20882: LD_VAR 0 2
20886: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
20887: LD_INT 0
20889: PPUSH
20890: PPUSH
20891: PPUSH
20892: PPUSH
// if not hack in hackTanks then
20893: LD_VAR 0 1
20897: PUSH
20898: LD_EXP 82
20902: IN
20903: NOT
20904: IFFALSE 20908
// exit ;
20906: GO 20993
// index := GetElementIndex ( hackTanks , hack ) ;
20908: LD_ADDR_VAR 0 5
20912: PUSH
20913: LD_EXP 82
20917: PPUSH
20918: LD_VAR 0 1
20922: PPUSH
20923: CALL 27951 0 2
20927: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
20928: LD_ADDR_VAR 0 4
20932: PUSH
20933: DOUBLE
20934: LD_INT 1
20936: DEC
20937: ST_TO_ADDR
20938: LD_EXP 83
20942: PUSH
20943: LD_VAR 0 5
20947: ARRAY
20948: PUSH
20949: FOR_TO
20950: IFFALSE 20991
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
20952: LD_EXP 83
20956: PUSH
20957: LD_VAR 0 5
20961: ARRAY
20962: PUSH
20963: LD_VAR 0 4
20967: ARRAY
20968: PUSH
20969: LD_INT 1
20971: ARRAY
20972: PUSH
20973: LD_VAR 0 2
20977: EQUAL
20978: IFFALSE 20989
// KillUnit ( vehicle ) ;
20980: LD_VAR 0 2
20984: PPUSH
20985: CALL_OW 66
20989: GO 20949
20991: POP
20992: POP
// end ;
20993: LD_VAR 0 3
20997: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
20998: LD_EXP 87
21002: NOT
21003: IFFALSE 21038
21005: GO 21007
21007: DISABLE
// begin initMiner := true ;
21008: LD_ADDR_EXP 87
21012: PUSH
21013: LD_INT 1
21015: ST_TO_ADDR
// minersList := [ ] ;
21016: LD_ADDR_EXP 88
21020: PUSH
21021: EMPTY
21022: ST_TO_ADDR
// minerMinesList := [ ] ;
21023: LD_ADDR_EXP 89
21027: PUSH
21028: EMPTY
21029: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
21030: LD_ADDR_EXP 90
21034: PUSH
21035: LD_INT 5
21037: ST_TO_ADDR
// end ;
21038: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
21039: LD_EXP 87
21043: PUSH
21044: LD_INT 34
21046: PUSH
21047: LD_EXP 98
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PPUSH
21056: CALL_OW 69
21060: AND
21061: IFFALSE 21524
21063: GO 21065
21065: DISABLE
21066: LD_INT 0
21068: PPUSH
21069: PPUSH
21070: PPUSH
21071: PPUSH
// begin enable ;
21072: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
21073: LD_ADDR_VAR 0 1
21077: PUSH
21078: LD_INT 34
21080: PUSH
21081: LD_EXP 98
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PPUSH
21090: CALL_OW 69
21094: PUSH
21095: FOR_IN
21096: IFFALSE 21168
// begin if not i in minersList then
21098: LD_VAR 0 1
21102: PUSH
21103: LD_EXP 88
21107: IN
21108: NOT
21109: IFFALSE 21166
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
21111: LD_ADDR_EXP 88
21115: PUSH
21116: LD_EXP 88
21120: PPUSH
21121: LD_EXP 88
21125: PUSH
21126: LD_INT 1
21128: PLUS
21129: PPUSH
21130: LD_VAR 0 1
21134: PPUSH
21135: CALL_OW 1
21139: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
21140: LD_ADDR_EXP 89
21144: PUSH
21145: LD_EXP 89
21149: PPUSH
21150: LD_EXP 89
21154: PUSH
21155: LD_INT 1
21157: PLUS
21158: PPUSH
21159: EMPTY
21160: PPUSH
21161: CALL_OW 1
21165: ST_TO_ADDR
// end end ;
21166: GO 21095
21168: POP
21169: POP
// for i := minerMinesList downto 1 do
21170: LD_ADDR_VAR 0 1
21174: PUSH
21175: DOUBLE
21176: LD_EXP 89
21180: INC
21181: ST_TO_ADDR
21182: LD_INT 1
21184: PUSH
21185: FOR_DOWNTO
21186: IFFALSE 21522
// begin if IsLive ( minersList [ i ] ) then
21188: LD_EXP 88
21192: PUSH
21193: LD_VAR 0 1
21197: ARRAY
21198: PPUSH
21199: CALL_OW 300
21203: IFFALSE 21231
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
21205: LD_EXP 88
21209: PUSH
21210: LD_VAR 0 1
21214: ARRAY
21215: PPUSH
21216: LD_EXP 89
21220: PUSH
21221: LD_VAR 0 1
21225: ARRAY
21226: PPUSH
21227: CALL_OW 505
// if not minerMinesList [ i ] then
21231: LD_EXP 89
21235: PUSH
21236: LD_VAR 0 1
21240: ARRAY
21241: NOT
21242: IFFALSE 21246
// continue ;
21244: GO 21185
// for j := minerMinesList [ i ] downto 1 do
21246: LD_ADDR_VAR 0 2
21250: PUSH
21251: DOUBLE
21252: LD_EXP 89
21256: PUSH
21257: LD_VAR 0 1
21261: ARRAY
21262: INC
21263: ST_TO_ADDR
21264: LD_INT 1
21266: PUSH
21267: FOR_DOWNTO
21268: IFFALSE 21518
// begin side := GetSide ( minersList [ i ] ) ;
21270: LD_ADDR_VAR 0 3
21274: PUSH
21275: LD_EXP 88
21279: PUSH
21280: LD_VAR 0 1
21284: ARRAY
21285: PPUSH
21286: CALL_OW 255
21290: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
21291: LD_ADDR_VAR 0 4
21295: PUSH
21296: LD_EXP 89
21300: PUSH
21301: LD_VAR 0 1
21305: ARRAY
21306: PUSH
21307: LD_VAR 0 2
21311: ARRAY
21312: PUSH
21313: LD_INT 1
21315: ARRAY
21316: PPUSH
21317: LD_EXP 89
21321: PUSH
21322: LD_VAR 0 1
21326: ARRAY
21327: PUSH
21328: LD_VAR 0 2
21332: ARRAY
21333: PUSH
21334: LD_INT 2
21336: ARRAY
21337: PPUSH
21338: CALL_OW 428
21342: ST_TO_ADDR
// if not tmp then
21343: LD_VAR 0 4
21347: NOT
21348: IFFALSE 21352
// continue ;
21350: GO 21267
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
21352: LD_VAR 0 4
21356: PUSH
21357: LD_INT 81
21359: PUSH
21360: LD_VAR 0 3
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PPUSH
21369: CALL_OW 69
21373: IN
21374: PUSH
21375: LD_EXP 89
21379: PUSH
21380: LD_VAR 0 1
21384: ARRAY
21385: PUSH
21386: LD_VAR 0 2
21390: ARRAY
21391: PUSH
21392: LD_INT 1
21394: ARRAY
21395: PPUSH
21396: LD_EXP 89
21400: PUSH
21401: LD_VAR 0 1
21405: ARRAY
21406: PUSH
21407: LD_VAR 0 2
21411: ARRAY
21412: PUSH
21413: LD_INT 2
21415: ARRAY
21416: PPUSH
21417: CALL_OW 458
21421: AND
21422: IFFALSE 21516
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
21424: LD_EXP 89
21428: PUSH
21429: LD_VAR 0 1
21433: ARRAY
21434: PUSH
21435: LD_VAR 0 2
21439: ARRAY
21440: PUSH
21441: LD_INT 1
21443: ARRAY
21444: PPUSH
21445: LD_EXP 89
21449: PUSH
21450: LD_VAR 0 1
21454: ARRAY
21455: PUSH
21456: LD_VAR 0 2
21460: ARRAY
21461: PUSH
21462: LD_INT 2
21464: ARRAY
21465: PPUSH
21466: LD_VAR 0 3
21470: PPUSH
21471: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
21475: LD_ADDR_EXP 89
21479: PUSH
21480: LD_EXP 89
21484: PPUSH
21485: LD_VAR 0 1
21489: PPUSH
21490: LD_EXP 89
21494: PUSH
21495: LD_VAR 0 1
21499: ARRAY
21500: PPUSH
21501: LD_VAR 0 2
21505: PPUSH
21506: CALL_OW 3
21510: PPUSH
21511: CALL_OW 1
21515: ST_TO_ADDR
// end ; end ;
21516: GO 21267
21518: POP
21519: POP
// end ;
21520: GO 21185
21522: POP
21523: POP
// end ;
21524: PPOPN 4
21526: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
21527: LD_INT 0
21529: PPUSH
21530: PPUSH
// result := false ;
21531: LD_ADDR_VAR 0 4
21535: PUSH
21536: LD_INT 0
21538: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
21539: LD_VAR 0 1
21543: PPUSH
21544: CALL_OW 264
21548: PUSH
21549: LD_EXP 98
21553: EQUAL
21554: NOT
21555: IFFALSE 21559
// exit ;
21557: GO 21799
// index := GetElementIndex ( minersList , unit ) ;
21559: LD_ADDR_VAR 0 5
21563: PUSH
21564: LD_EXP 88
21568: PPUSH
21569: LD_VAR 0 1
21573: PPUSH
21574: CALL 27951 0 2
21578: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
21579: LD_EXP 89
21583: PUSH
21584: LD_VAR 0 5
21588: ARRAY
21589: PUSH
21590: LD_EXP 90
21594: GREATEREQUAL
21595: IFFALSE 21599
// exit ;
21597: GO 21799
// ComMoveXY ( unit , x , y ) ;
21599: LD_VAR 0 1
21603: PPUSH
21604: LD_VAR 0 2
21608: PPUSH
21609: LD_VAR 0 3
21613: PPUSH
21614: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21618: LD_INT 35
21620: PPUSH
21621: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
21625: LD_VAR 0 1
21629: PPUSH
21630: LD_VAR 0 2
21634: PPUSH
21635: LD_VAR 0 3
21639: PPUSH
21640: CALL 58723 0 3
21644: NOT
21645: PUSH
21646: LD_VAR 0 1
21650: PPUSH
21651: CALL_OW 314
21655: AND
21656: IFFALSE 21660
// exit ;
21658: GO 21799
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
21660: LD_VAR 0 2
21664: PPUSH
21665: LD_VAR 0 3
21669: PPUSH
21670: CALL_OW 428
21674: PUSH
21675: LD_VAR 0 1
21679: EQUAL
21680: PUSH
21681: LD_VAR 0 1
21685: PPUSH
21686: CALL_OW 314
21690: NOT
21691: AND
21692: IFFALSE 21618
// PlaySoundXY ( x , y , PlantMine ) ;
21694: LD_VAR 0 2
21698: PPUSH
21699: LD_VAR 0 3
21703: PPUSH
21704: LD_STRING PlantMine
21706: PPUSH
21707: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
21711: LD_VAR 0 2
21715: PPUSH
21716: LD_VAR 0 3
21720: PPUSH
21721: LD_VAR 0 1
21725: PPUSH
21726: CALL_OW 255
21730: PPUSH
21731: LD_INT 0
21733: PPUSH
21734: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
21738: LD_ADDR_EXP 89
21742: PUSH
21743: LD_EXP 89
21747: PPUSH
21748: LD_VAR 0 5
21752: PUSH
21753: LD_EXP 89
21757: PUSH
21758: LD_VAR 0 5
21762: ARRAY
21763: PUSH
21764: LD_INT 1
21766: PLUS
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PPUSH
21772: LD_VAR 0 2
21776: PUSH
21777: LD_VAR 0 3
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: PPUSH
21786: CALL 28166 0 3
21790: ST_TO_ADDR
// result := true ;
21791: LD_ADDR_VAR 0 4
21795: PUSH
21796: LD_INT 1
21798: ST_TO_ADDR
// end ;
21799: LD_VAR 0 4
21803: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
21804: LD_INT 0
21806: PPUSH
21807: PPUSH
21808: PPUSH
// if not unit in minersList then
21809: LD_VAR 0 1
21813: PUSH
21814: LD_EXP 88
21818: IN
21819: NOT
21820: IFFALSE 21824
// exit ;
21822: GO 22216
// index := GetElementIndex ( minersList , unit ) ;
21824: LD_ADDR_VAR 0 6
21828: PUSH
21829: LD_EXP 88
21833: PPUSH
21834: LD_VAR 0 1
21838: PPUSH
21839: CALL 27951 0 2
21843: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
21844: LD_ADDR_VAR 0 5
21848: PUSH
21849: DOUBLE
21850: LD_EXP 89
21854: PUSH
21855: LD_VAR 0 6
21859: ARRAY
21860: INC
21861: ST_TO_ADDR
21862: LD_INT 1
21864: PUSH
21865: FOR_DOWNTO
21866: IFFALSE 22027
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
21868: LD_EXP 89
21872: PUSH
21873: LD_VAR 0 6
21877: ARRAY
21878: PUSH
21879: LD_VAR 0 5
21883: ARRAY
21884: PUSH
21885: LD_INT 1
21887: ARRAY
21888: PUSH
21889: LD_VAR 0 2
21893: EQUAL
21894: PUSH
21895: LD_EXP 89
21899: PUSH
21900: LD_VAR 0 6
21904: ARRAY
21905: PUSH
21906: LD_VAR 0 5
21910: ARRAY
21911: PUSH
21912: LD_INT 2
21914: ARRAY
21915: PUSH
21916: LD_VAR 0 3
21920: EQUAL
21921: AND
21922: IFFALSE 22025
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21924: LD_EXP 89
21928: PUSH
21929: LD_VAR 0 6
21933: ARRAY
21934: PUSH
21935: LD_VAR 0 5
21939: ARRAY
21940: PUSH
21941: LD_INT 1
21943: ARRAY
21944: PPUSH
21945: LD_EXP 89
21949: PUSH
21950: LD_VAR 0 6
21954: ARRAY
21955: PUSH
21956: LD_VAR 0 5
21960: ARRAY
21961: PUSH
21962: LD_INT 2
21964: ARRAY
21965: PPUSH
21966: LD_VAR 0 1
21970: PPUSH
21971: CALL_OW 255
21975: PPUSH
21976: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21980: LD_ADDR_EXP 89
21984: PUSH
21985: LD_EXP 89
21989: PPUSH
21990: LD_VAR 0 6
21994: PPUSH
21995: LD_EXP 89
21999: PUSH
22000: LD_VAR 0 6
22004: ARRAY
22005: PPUSH
22006: LD_VAR 0 5
22010: PPUSH
22011: CALL_OW 3
22015: PPUSH
22016: CALL_OW 1
22020: ST_TO_ADDR
// exit ;
22021: POP
22022: POP
22023: GO 22216
// end ; end ;
22025: GO 21865
22027: POP
22028: POP
// for i := minerMinesList [ index ] downto 1 do
22029: LD_ADDR_VAR 0 5
22033: PUSH
22034: DOUBLE
22035: LD_EXP 89
22039: PUSH
22040: LD_VAR 0 6
22044: ARRAY
22045: INC
22046: ST_TO_ADDR
22047: LD_INT 1
22049: PUSH
22050: FOR_DOWNTO
22051: IFFALSE 22214
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
22053: LD_EXP 89
22057: PUSH
22058: LD_VAR 0 6
22062: ARRAY
22063: PUSH
22064: LD_VAR 0 5
22068: ARRAY
22069: PUSH
22070: LD_INT 1
22072: ARRAY
22073: PPUSH
22074: LD_EXP 89
22078: PUSH
22079: LD_VAR 0 6
22083: ARRAY
22084: PUSH
22085: LD_VAR 0 5
22089: ARRAY
22090: PUSH
22091: LD_INT 2
22093: ARRAY
22094: PPUSH
22095: LD_VAR 0 2
22099: PPUSH
22100: LD_VAR 0 3
22104: PPUSH
22105: CALL_OW 298
22109: PUSH
22110: LD_INT 6
22112: LESS
22113: IFFALSE 22212
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22115: LD_EXP 89
22119: PUSH
22120: LD_VAR 0 6
22124: ARRAY
22125: PUSH
22126: LD_VAR 0 5
22130: ARRAY
22131: PUSH
22132: LD_INT 1
22134: ARRAY
22135: PPUSH
22136: LD_EXP 89
22140: PUSH
22141: LD_VAR 0 6
22145: ARRAY
22146: PUSH
22147: LD_VAR 0 5
22151: ARRAY
22152: PUSH
22153: LD_INT 2
22155: ARRAY
22156: PPUSH
22157: LD_VAR 0 1
22161: PPUSH
22162: CALL_OW 255
22166: PPUSH
22167: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22171: LD_ADDR_EXP 89
22175: PUSH
22176: LD_EXP 89
22180: PPUSH
22181: LD_VAR 0 6
22185: PPUSH
22186: LD_EXP 89
22190: PUSH
22191: LD_VAR 0 6
22195: ARRAY
22196: PPUSH
22197: LD_VAR 0 5
22201: PPUSH
22202: CALL_OW 3
22206: PPUSH
22207: CALL_OW 1
22211: ST_TO_ADDR
// end ; end ;
22212: GO 22050
22214: POP
22215: POP
// end ;
22216: LD_VAR 0 4
22220: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
22221: LD_INT 0
22223: PPUSH
22224: PPUSH
22225: PPUSH
22226: PPUSH
22227: PPUSH
22228: PPUSH
22229: PPUSH
22230: PPUSH
22231: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
22232: LD_VAR 0 1
22236: PPUSH
22237: CALL_OW 264
22241: PUSH
22242: LD_EXP 98
22246: EQUAL
22247: NOT
22248: PUSH
22249: LD_VAR 0 1
22253: PUSH
22254: LD_EXP 88
22258: IN
22259: NOT
22260: OR
22261: IFFALSE 22265
// exit ;
22263: GO 22587
// index := GetElementIndex ( minersList , unit ) ;
22265: LD_ADDR_VAR 0 6
22269: PUSH
22270: LD_EXP 88
22274: PPUSH
22275: LD_VAR 0 1
22279: PPUSH
22280: CALL 27951 0 2
22284: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
22285: LD_ADDR_VAR 0 8
22289: PUSH
22290: LD_EXP 90
22294: PUSH
22295: LD_EXP 89
22299: PUSH
22300: LD_VAR 0 6
22304: ARRAY
22305: MINUS
22306: ST_TO_ADDR
// if not minesFreeAmount then
22307: LD_VAR 0 8
22311: NOT
22312: IFFALSE 22316
// exit ;
22314: GO 22587
// tmp := [ ] ;
22316: LD_ADDR_VAR 0 7
22320: PUSH
22321: EMPTY
22322: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
22323: LD_ADDR_VAR 0 5
22327: PUSH
22328: DOUBLE
22329: LD_INT 1
22331: DEC
22332: ST_TO_ADDR
22333: LD_VAR 0 8
22337: PUSH
22338: FOR_TO
22339: IFFALSE 22534
// begin _d := rand ( 0 , 5 ) ;
22341: LD_ADDR_VAR 0 11
22345: PUSH
22346: LD_INT 0
22348: PPUSH
22349: LD_INT 5
22351: PPUSH
22352: CALL_OW 12
22356: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
22357: LD_ADDR_VAR 0 12
22361: PUSH
22362: LD_INT 2
22364: PPUSH
22365: LD_INT 6
22367: PPUSH
22368: CALL_OW 12
22372: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
22373: LD_ADDR_VAR 0 9
22377: PUSH
22378: LD_VAR 0 2
22382: PPUSH
22383: LD_VAR 0 11
22387: PPUSH
22388: LD_VAR 0 12
22392: PPUSH
22393: CALL_OW 272
22397: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
22398: LD_ADDR_VAR 0 10
22402: PUSH
22403: LD_VAR 0 3
22407: PPUSH
22408: LD_VAR 0 11
22412: PPUSH
22413: LD_VAR 0 12
22417: PPUSH
22418: CALL_OW 273
22422: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
22423: LD_VAR 0 9
22427: PPUSH
22428: LD_VAR 0 10
22432: PPUSH
22433: CALL_OW 488
22437: PUSH
22438: LD_VAR 0 9
22442: PUSH
22443: LD_VAR 0 10
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_VAR 0 7
22456: IN
22457: NOT
22458: AND
22459: PUSH
22460: LD_VAR 0 9
22464: PPUSH
22465: LD_VAR 0 10
22469: PPUSH
22470: CALL_OW 458
22474: NOT
22475: AND
22476: IFFALSE 22518
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
22478: LD_ADDR_VAR 0 7
22482: PUSH
22483: LD_VAR 0 7
22487: PPUSH
22488: LD_VAR 0 7
22492: PUSH
22493: LD_INT 1
22495: PLUS
22496: PPUSH
22497: LD_VAR 0 9
22501: PUSH
22502: LD_VAR 0 10
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PPUSH
22511: CALL_OW 1
22515: ST_TO_ADDR
22516: GO 22532
// i := i - 1 ;
22518: LD_ADDR_VAR 0 5
22522: PUSH
22523: LD_VAR 0 5
22527: PUSH
22528: LD_INT 1
22530: MINUS
22531: ST_TO_ADDR
// end ;
22532: GO 22338
22534: POP
22535: POP
// for i in tmp do
22536: LD_ADDR_VAR 0 5
22540: PUSH
22541: LD_VAR 0 7
22545: PUSH
22546: FOR_IN
22547: IFFALSE 22585
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
22549: LD_VAR 0 1
22553: PPUSH
22554: LD_VAR 0 5
22558: PUSH
22559: LD_INT 1
22561: ARRAY
22562: PPUSH
22563: LD_VAR 0 5
22567: PUSH
22568: LD_INT 2
22570: ARRAY
22571: PPUSH
22572: CALL 21527 0 3
22576: NOT
22577: IFFALSE 22583
// exit ;
22579: POP
22580: POP
22581: GO 22587
22583: GO 22546
22585: POP
22586: POP
// end ;
22587: LD_VAR 0 4
22591: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
22592: LD_INT 0
22594: PPUSH
22595: PPUSH
22596: PPUSH
22597: PPUSH
22598: PPUSH
22599: PPUSH
22600: PPUSH
// if not GetClass ( unit ) = class_sniper then
22601: LD_VAR 0 1
22605: PPUSH
22606: CALL_OW 257
22610: PUSH
22611: LD_INT 5
22613: EQUAL
22614: NOT
22615: IFFALSE 22619
// exit ;
22617: GO 23007
// dist := 8 ;
22619: LD_ADDR_VAR 0 5
22623: PUSH
22624: LD_INT 8
22626: ST_TO_ADDR
// viewRange := 12 ;
22627: LD_ADDR_VAR 0 7
22631: PUSH
22632: LD_INT 12
22634: ST_TO_ADDR
// side := GetSide ( unit ) ;
22635: LD_ADDR_VAR 0 6
22639: PUSH
22640: LD_VAR 0 1
22644: PPUSH
22645: CALL_OW 255
22649: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
22650: LD_INT 61
22652: PPUSH
22653: LD_VAR 0 6
22657: PPUSH
22658: CALL_OW 321
22662: PUSH
22663: LD_INT 2
22665: EQUAL
22666: IFFALSE 22676
// viewRange := 16 ;
22668: LD_ADDR_VAR 0 7
22672: PUSH
22673: LD_INT 16
22675: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
22676: LD_VAR 0 1
22680: PPUSH
22681: LD_VAR 0 2
22685: PPUSH
22686: LD_VAR 0 3
22690: PPUSH
22691: CALL_OW 297
22695: PUSH
22696: LD_VAR 0 5
22700: GREATER
22701: IFFALSE 22780
// begin ComMoveXY ( unit , x , y ) ;
22703: LD_VAR 0 1
22707: PPUSH
22708: LD_VAR 0 2
22712: PPUSH
22713: LD_VAR 0 3
22717: PPUSH
22718: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22722: LD_INT 35
22724: PPUSH
22725: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
22729: LD_VAR 0 1
22733: PPUSH
22734: LD_VAR 0 2
22738: PPUSH
22739: LD_VAR 0 3
22743: PPUSH
22744: CALL 58723 0 3
22748: NOT
22749: IFFALSE 22753
// exit ;
22751: GO 23007
// until GetDistUnitXY ( unit , x , y ) < dist ;
22753: LD_VAR 0 1
22757: PPUSH
22758: LD_VAR 0 2
22762: PPUSH
22763: LD_VAR 0 3
22767: PPUSH
22768: CALL_OW 297
22772: PUSH
22773: LD_VAR 0 5
22777: LESS
22778: IFFALSE 22722
// end ; ComTurnXY ( unit , x , y ) ;
22780: LD_VAR 0 1
22784: PPUSH
22785: LD_VAR 0 2
22789: PPUSH
22790: LD_VAR 0 3
22794: PPUSH
22795: CALL_OW 118
// wait ( 5 ) ;
22799: LD_INT 5
22801: PPUSH
22802: CALL_OW 67
// _d := GetDir ( unit ) ;
22806: LD_ADDR_VAR 0 10
22810: PUSH
22811: LD_VAR 0 1
22815: PPUSH
22816: CALL_OW 254
22820: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
22821: LD_ADDR_VAR 0 8
22825: PUSH
22826: LD_VAR 0 1
22830: PPUSH
22831: CALL_OW 250
22835: PPUSH
22836: LD_VAR 0 10
22840: PPUSH
22841: LD_VAR 0 5
22845: PPUSH
22846: CALL_OW 272
22850: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
22851: LD_ADDR_VAR 0 9
22855: PUSH
22856: LD_VAR 0 1
22860: PPUSH
22861: CALL_OW 251
22865: PPUSH
22866: LD_VAR 0 10
22870: PPUSH
22871: LD_VAR 0 5
22875: PPUSH
22876: CALL_OW 273
22880: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22881: LD_VAR 0 8
22885: PPUSH
22886: LD_VAR 0 9
22890: PPUSH
22891: CALL_OW 488
22895: NOT
22896: IFFALSE 22900
// exit ;
22898: GO 23007
// ComAnimCustom ( unit , 1 ) ;
22900: LD_VAR 0 1
22904: PPUSH
22905: LD_INT 1
22907: PPUSH
22908: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
22912: LD_VAR 0 8
22916: PPUSH
22917: LD_VAR 0 9
22921: PPUSH
22922: LD_VAR 0 6
22926: PPUSH
22927: LD_VAR 0 7
22931: PPUSH
22932: CALL_OW 330
// repeat wait ( 1 ) ;
22936: LD_INT 1
22938: PPUSH
22939: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
22943: LD_VAR 0 1
22947: PPUSH
22948: CALL_OW 316
22952: PUSH
22953: LD_VAR 0 1
22957: PPUSH
22958: CALL_OW 314
22962: OR
22963: PUSH
22964: LD_VAR 0 1
22968: PPUSH
22969: CALL_OW 302
22973: NOT
22974: OR
22975: PUSH
22976: LD_VAR 0 1
22980: PPUSH
22981: CALL_OW 301
22985: OR
22986: IFFALSE 22936
// RemoveSeeing ( _x , _y , side ) ;
22988: LD_VAR 0 8
22992: PPUSH
22993: LD_VAR 0 9
22997: PPUSH
22998: LD_VAR 0 6
23002: PPUSH
23003: CALL_OW 331
// end ; end_of_file
23007: LD_VAR 0 4
23011: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
23012: LD_INT 0
23014: PPUSH
// ar_miner := 81 ;
23015: LD_ADDR_EXP 98
23019: PUSH
23020: LD_INT 81
23022: ST_TO_ADDR
// ar_crane := 88 ;
23023: LD_ADDR_EXP 97
23027: PUSH
23028: LD_INT 88
23030: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
23031: LD_ADDR_EXP 92
23035: PUSH
23036: LD_INT 89
23038: ST_TO_ADDR
// us_hack := 99 ;
23039: LD_ADDR_EXP 93
23043: PUSH
23044: LD_INT 99
23046: ST_TO_ADDR
// us_artillery := 97 ;
23047: LD_ADDR_EXP 94
23051: PUSH
23052: LD_INT 97
23054: ST_TO_ADDR
// ar_bio_bomb := 91 ;
23055: LD_ADDR_EXP 95
23059: PUSH
23060: LD_INT 91
23062: ST_TO_ADDR
// ar_mortar := 92 ;
23063: LD_ADDR_EXP 96
23067: PUSH
23068: LD_INT 92
23070: ST_TO_ADDR
// ru_radar := 98 ;
23071: LD_ADDR_EXP 91
23075: PUSH
23076: LD_INT 98
23078: ST_TO_ADDR
// tech_Artillery := 80 ;
23079: LD_ADDR_EXP 99
23083: PUSH
23084: LD_INT 80
23086: ST_TO_ADDR
// tech_RadMat := 81 ;
23087: LD_ADDR_EXP 100
23091: PUSH
23092: LD_INT 81
23094: ST_TO_ADDR
// tech_BasicTools := 82 ;
23095: LD_ADDR_EXP 101
23099: PUSH
23100: LD_INT 82
23102: ST_TO_ADDR
// tech_Cargo := 83 ;
23103: LD_ADDR_EXP 102
23107: PUSH
23108: LD_INT 83
23110: ST_TO_ADDR
// tech_Track := 84 ;
23111: LD_ADDR_EXP 103
23115: PUSH
23116: LD_INT 84
23118: ST_TO_ADDR
// tech_Crane := 85 ;
23119: LD_ADDR_EXP 104
23123: PUSH
23124: LD_INT 85
23126: ST_TO_ADDR
// tech_Bulldozer := 86 ;
23127: LD_ADDR_EXP 105
23131: PUSH
23132: LD_INT 86
23134: ST_TO_ADDR
// tech_Hovercraft := 87 ;
23135: LD_ADDR_EXP 106
23139: PUSH
23140: LD_INT 87
23142: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
23143: LD_ADDR_EXP 107
23147: PUSH
23148: LD_INT 88
23150: ST_TO_ADDR
// class_mastodont := 31 ;
23151: LD_ADDR_EXP 108
23155: PUSH
23156: LD_INT 31
23158: ST_TO_ADDR
// class_horse := 21 ;
23159: LD_ADDR_EXP 109
23163: PUSH
23164: LD_INT 21
23166: ST_TO_ADDR
// end ;
23167: LD_VAR 0 1
23171: RET
// every 1 do
23172: GO 23174
23174: DISABLE
// InitGlobalVariables ; end_of_file
23175: CALL 23012 0 0
23179: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23180: LD_INT 0
23182: PPUSH
23183: PPUSH
// if exist_mode then
23184: LD_VAR 0 2
23188: IFFALSE 23213
// unit := CreateCharacter ( prefix & ident ) else
23190: LD_ADDR_VAR 0 5
23194: PUSH
23195: LD_VAR 0 3
23199: PUSH
23200: LD_VAR 0 1
23204: STR
23205: PPUSH
23206: CALL_OW 34
23210: ST_TO_ADDR
23211: GO 23228
// unit := NewCharacter ( ident ) ;
23213: LD_ADDR_VAR 0 5
23217: PUSH
23218: LD_VAR 0 1
23222: PPUSH
23223: CALL_OW 25
23227: ST_TO_ADDR
// result := unit ;
23228: LD_ADDR_VAR 0 4
23232: PUSH
23233: LD_VAR 0 5
23237: ST_TO_ADDR
// end ;
23238: LD_VAR 0 4
23242: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23243: LD_INT 0
23245: PPUSH
23246: PPUSH
// if not side or not nation then
23247: LD_VAR 0 1
23251: NOT
23252: PUSH
23253: LD_VAR 0 2
23257: NOT
23258: OR
23259: IFFALSE 23263
// exit ;
23261: GO 24031
// case nation of nation_american :
23263: LD_VAR 0 2
23267: PUSH
23268: LD_INT 1
23270: DOUBLE
23271: EQUAL
23272: IFTRUE 23276
23274: GO 23490
23276: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23277: LD_ADDR_VAR 0 4
23281: PUSH
23282: LD_INT 35
23284: PUSH
23285: LD_INT 45
23287: PUSH
23288: LD_INT 46
23290: PUSH
23291: LD_INT 47
23293: PUSH
23294: LD_INT 82
23296: PUSH
23297: LD_INT 83
23299: PUSH
23300: LD_INT 84
23302: PUSH
23303: LD_INT 85
23305: PUSH
23306: LD_INT 86
23308: PUSH
23309: LD_INT 1
23311: PUSH
23312: LD_INT 2
23314: PUSH
23315: LD_INT 6
23317: PUSH
23318: LD_INT 15
23320: PUSH
23321: LD_INT 16
23323: PUSH
23324: LD_INT 7
23326: PUSH
23327: LD_INT 12
23329: PUSH
23330: LD_INT 13
23332: PUSH
23333: LD_INT 10
23335: PUSH
23336: LD_INT 14
23338: PUSH
23339: LD_INT 20
23341: PUSH
23342: LD_INT 21
23344: PUSH
23345: LD_INT 22
23347: PUSH
23348: LD_INT 25
23350: PUSH
23351: LD_INT 32
23353: PUSH
23354: LD_INT 27
23356: PUSH
23357: LD_INT 36
23359: PUSH
23360: LD_INT 69
23362: PUSH
23363: LD_INT 39
23365: PUSH
23366: LD_INT 34
23368: PUSH
23369: LD_INT 40
23371: PUSH
23372: LD_INT 48
23374: PUSH
23375: LD_INT 49
23377: PUSH
23378: LD_INT 50
23380: PUSH
23381: LD_INT 51
23383: PUSH
23384: LD_INT 52
23386: PUSH
23387: LD_INT 53
23389: PUSH
23390: LD_INT 54
23392: PUSH
23393: LD_INT 55
23395: PUSH
23396: LD_INT 56
23398: PUSH
23399: LD_INT 57
23401: PUSH
23402: LD_INT 58
23404: PUSH
23405: LD_INT 59
23407: PUSH
23408: LD_INT 60
23410: PUSH
23411: LD_INT 61
23413: PUSH
23414: LD_INT 62
23416: PUSH
23417: LD_INT 80
23419: PUSH
23420: LD_INT 82
23422: PUSH
23423: LD_INT 83
23425: PUSH
23426: LD_INT 84
23428: PUSH
23429: LD_INT 85
23431: PUSH
23432: LD_INT 86
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: ST_TO_ADDR
23488: GO 23955
23490: LD_INT 2
23492: DOUBLE
23493: EQUAL
23494: IFTRUE 23498
23496: GO 23724
23498: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
23499: LD_ADDR_VAR 0 4
23503: PUSH
23504: LD_INT 35
23506: PUSH
23507: LD_INT 45
23509: PUSH
23510: LD_INT 46
23512: PUSH
23513: LD_INT 47
23515: PUSH
23516: LD_INT 82
23518: PUSH
23519: LD_INT 83
23521: PUSH
23522: LD_INT 84
23524: PUSH
23525: LD_INT 85
23527: PUSH
23528: LD_INT 87
23530: PUSH
23531: LD_INT 70
23533: PUSH
23534: LD_INT 1
23536: PUSH
23537: LD_INT 11
23539: PUSH
23540: LD_INT 3
23542: PUSH
23543: LD_INT 4
23545: PUSH
23546: LD_INT 5
23548: PUSH
23549: LD_INT 6
23551: PUSH
23552: LD_INT 15
23554: PUSH
23555: LD_INT 18
23557: PUSH
23558: LD_INT 7
23560: PUSH
23561: LD_INT 17
23563: PUSH
23564: LD_INT 8
23566: PUSH
23567: LD_INT 20
23569: PUSH
23570: LD_INT 21
23572: PUSH
23573: LD_INT 22
23575: PUSH
23576: LD_INT 72
23578: PUSH
23579: LD_INT 26
23581: PUSH
23582: LD_INT 69
23584: PUSH
23585: LD_INT 39
23587: PUSH
23588: LD_INT 40
23590: PUSH
23591: LD_INT 41
23593: PUSH
23594: LD_INT 42
23596: PUSH
23597: LD_INT 43
23599: PUSH
23600: LD_INT 48
23602: PUSH
23603: LD_INT 49
23605: PUSH
23606: LD_INT 50
23608: PUSH
23609: LD_INT 51
23611: PUSH
23612: LD_INT 52
23614: PUSH
23615: LD_INT 53
23617: PUSH
23618: LD_INT 54
23620: PUSH
23621: LD_INT 55
23623: PUSH
23624: LD_INT 56
23626: PUSH
23627: LD_INT 60
23629: PUSH
23630: LD_INT 61
23632: PUSH
23633: LD_INT 62
23635: PUSH
23636: LD_INT 66
23638: PUSH
23639: LD_INT 67
23641: PUSH
23642: LD_INT 68
23644: PUSH
23645: LD_INT 81
23647: PUSH
23648: LD_INT 82
23650: PUSH
23651: LD_INT 83
23653: PUSH
23654: LD_INT 84
23656: PUSH
23657: LD_INT 85
23659: PUSH
23660: LD_INT 87
23662: PUSH
23663: LD_INT 88
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: ST_TO_ADDR
23722: GO 23955
23724: LD_INT 3
23726: DOUBLE
23727: EQUAL
23728: IFTRUE 23732
23730: GO 23954
23732: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
23733: LD_ADDR_VAR 0 4
23737: PUSH
23738: LD_INT 46
23740: PUSH
23741: LD_INT 47
23743: PUSH
23744: LD_INT 1
23746: PUSH
23747: LD_INT 2
23749: PUSH
23750: LD_INT 82
23752: PUSH
23753: LD_INT 83
23755: PUSH
23756: LD_INT 84
23758: PUSH
23759: LD_INT 85
23761: PUSH
23762: LD_INT 86
23764: PUSH
23765: LD_INT 11
23767: PUSH
23768: LD_INT 9
23770: PUSH
23771: LD_INT 20
23773: PUSH
23774: LD_INT 19
23776: PUSH
23777: LD_INT 21
23779: PUSH
23780: LD_INT 24
23782: PUSH
23783: LD_INT 22
23785: PUSH
23786: LD_INT 25
23788: PUSH
23789: LD_INT 28
23791: PUSH
23792: LD_INT 29
23794: PUSH
23795: LD_INT 30
23797: PUSH
23798: LD_INT 31
23800: PUSH
23801: LD_INT 37
23803: PUSH
23804: LD_INT 38
23806: PUSH
23807: LD_INT 32
23809: PUSH
23810: LD_INT 27
23812: PUSH
23813: LD_INT 33
23815: PUSH
23816: LD_INT 69
23818: PUSH
23819: LD_INT 39
23821: PUSH
23822: LD_INT 34
23824: PUSH
23825: LD_INT 40
23827: PUSH
23828: LD_INT 71
23830: PUSH
23831: LD_INT 23
23833: PUSH
23834: LD_INT 44
23836: PUSH
23837: LD_INT 48
23839: PUSH
23840: LD_INT 49
23842: PUSH
23843: LD_INT 50
23845: PUSH
23846: LD_INT 51
23848: PUSH
23849: LD_INT 52
23851: PUSH
23852: LD_INT 53
23854: PUSH
23855: LD_INT 54
23857: PUSH
23858: LD_INT 55
23860: PUSH
23861: LD_INT 56
23863: PUSH
23864: LD_INT 57
23866: PUSH
23867: LD_INT 58
23869: PUSH
23870: LD_INT 59
23872: PUSH
23873: LD_INT 63
23875: PUSH
23876: LD_INT 64
23878: PUSH
23879: LD_INT 65
23881: PUSH
23882: LD_INT 82
23884: PUSH
23885: LD_INT 83
23887: PUSH
23888: LD_INT 84
23890: PUSH
23891: LD_INT 85
23893: PUSH
23894: LD_INT 86
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: ST_TO_ADDR
23952: GO 23955
23954: POP
// if state > - 1 and state < 3 then
23955: LD_VAR 0 3
23959: PUSH
23960: LD_INT 1
23962: NEG
23963: GREATER
23964: PUSH
23965: LD_VAR 0 3
23969: PUSH
23970: LD_INT 3
23972: LESS
23973: AND
23974: IFFALSE 24031
// for i in result do
23976: LD_ADDR_VAR 0 5
23980: PUSH
23981: LD_VAR 0 4
23985: PUSH
23986: FOR_IN
23987: IFFALSE 24029
// if GetTech ( i , side ) <> state then
23989: LD_VAR 0 5
23993: PPUSH
23994: LD_VAR 0 1
23998: PPUSH
23999: CALL_OW 321
24003: PUSH
24004: LD_VAR 0 3
24008: NONEQUAL
24009: IFFALSE 24027
// result := result diff i ;
24011: LD_ADDR_VAR 0 4
24015: PUSH
24016: LD_VAR 0 4
24020: PUSH
24021: LD_VAR 0 5
24025: DIFF
24026: ST_TO_ADDR
24027: GO 23986
24029: POP
24030: POP
// end ;
24031: LD_VAR 0 4
24035: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24036: LD_INT 0
24038: PPUSH
24039: PPUSH
24040: PPUSH
// result := true ;
24041: LD_ADDR_VAR 0 3
24045: PUSH
24046: LD_INT 1
24048: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24049: LD_ADDR_VAR 0 5
24053: PUSH
24054: LD_VAR 0 2
24058: PPUSH
24059: CALL_OW 480
24063: ST_TO_ADDR
// if not tmp then
24064: LD_VAR 0 5
24068: NOT
24069: IFFALSE 24073
// exit ;
24071: GO 24122
// for i in tmp do
24073: LD_ADDR_VAR 0 4
24077: PUSH
24078: LD_VAR 0 5
24082: PUSH
24083: FOR_IN
24084: IFFALSE 24120
// if GetTech ( i , side ) <> state_researched then
24086: LD_VAR 0 4
24090: PPUSH
24091: LD_VAR 0 1
24095: PPUSH
24096: CALL_OW 321
24100: PUSH
24101: LD_INT 2
24103: NONEQUAL
24104: IFFALSE 24118
// begin result := false ;
24106: LD_ADDR_VAR 0 3
24110: PUSH
24111: LD_INT 0
24113: ST_TO_ADDR
// exit ;
24114: POP
24115: POP
24116: GO 24122
// end ;
24118: GO 24083
24120: POP
24121: POP
// end ;
24122: LD_VAR 0 3
24126: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24127: LD_INT 0
24129: PPUSH
24130: PPUSH
24131: PPUSH
24132: PPUSH
24133: PPUSH
24134: PPUSH
24135: PPUSH
24136: PPUSH
24137: PPUSH
24138: PPUSH
24139: PPUSH
24140: PPUSH
24141: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24142: LD_VAR 0 1
24146: NOT
24147: PUSH
24148: LD_VAR 0 1
24152: PPUSH
24153: CALL_OW 257
24157: PUSH
24158: LD_INT 9
24160: NONEQUAL
24161: OR
24162: IFFALSE 24166
// exit ;
24164: GO 24739
// side := GetSide ( unit ) ;
24166: LD_ADDR_VAR 0 9
24170: PUSH
24171: LD_VAR 0 1
24175: PPUSH
24176: CALL_OW 255
24180: ST_TO_ADDR
// tech_space := tech_spacanom ;
24181: LD_ADDR_VAR 0 12
24185: PUSH
24186: LD_INT 29
24188: ST_TO_ADDR
// tech_time := tech_taurad ;
24189: LD_ADDR_VAR 0 13
24193: PUSH
24194: LD_INT 28
24196: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24197: LD_ADDR_VAR 0 11
24201: PUSH
24202: LD_VAR 0 1
24206: PPUSH
24207: CALL_OW 310
24211: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24212: LD_VAR 0 11
24216: PPUSH
24217: CALL_OW 247
24221: PUSH
24222: LD_INT 2
24224: EQUAL
24225: IFFALSE 24229
// exit ;
24227: GO 24739
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24229: LD_ADDR_VAR 0 8
24233: PUSH
24234: LD_INT 81
24236: PUSH
24237: LD_VAR 0 9
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PUSH
24246: LD_INT 3
24248: PUSH
24249: LD_INT 21
24251: PUSH
24252: LD_INT 3
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PPUSH
24267: CALL_OW 69
24271: ST_TO_ADDR
// if not tmp then
24272: LD_VAR 0 8
24276: NOT
24277: IFFALSE 24281
// exit ;
24279: GO 24739
// if in_unit then
24281: LD_VAR 0 11
24285: IFFALSE 24309
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24287: LD_ADDR_VAR 0 10
24291: PUSH
24292: LD_VAR 0 8
24296: PPUSH
24297: LD_VAR 0 11
24301: PPUSH
24302: CALL_OW 74
24306: ST_TO_ADDR
24307: GO 24329
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24309: LD_ADDR_VAR 0 10
24313: PUSH
24314: LD_VAR 0 8
24318: PPUSH
24319: LD_VAR 0 1
24323: PPUSH
24324: CALL_OW 74
24328: ST_TO_ADDR
// if not enemy then
24329: LD_VAR 0 10
24333: NOT
24334: IFFALSE 24338
// exit ;
24336: GO 24739
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24338: LD_VAR 0 11
24342: PUSH
24343: LD_VAR 0 11
24347: PPUSH
24348: LD_VAR 0 10
24352: PPUSH
24353: CALL_OW 296
24357: PUSH
24358: LD_INT 13
24360: GREATER
24361: AND
24362: PUSH
24363: LD_VAR 0 1
24367: PPUSH
24368: LD_VAR 0 10
24372: PPUSH
24373: CALL_OW 296
24377: PUSH
24378: LD_INT 12
24380: GREATER
24381: OR
24382: IFFALSE 24386
// exit ;
24384: GO 24739
// missile := [ 1 ] ;
24386: LD_ADDR_VAR 0 14
24390: PUSH
24391: LD_INT 1
24393: PUSH
24394: EMPTY
24395: LIST
24396: ST_TO_ADDR
// if Researched ( side , tech_space ) then
24397: LD_VAR 0 9
24401: PPUSH
24402: LD_VAR 0 12
24406: PPUSH
24407: CALL_OW 325
24411: IFFALSE 24440
// missile := Insert ( missile , missile + 1 , 2 ) ;
24413: LD_ADDR_VAR 0 14
24417: PUSH
24418: LD_VAR 0 14
24422: PPUSH
24423: LD_VAR 0 14
24427: PUSH
24428: LD_INT 1
24430: PLUS
24431: PPUSH
24432: LD_INT 2
24434: PPUSH
24435: CALL_OW 2
24439: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
24440: LD_VAR 0 9
24444: PPUSH
24445: LD_VAR 0 13
24449: PPUSH
24450: CALL_OW 325
24454: PUSH
24455: LD_VAR 0 10
24459: PPUSH
24460: CALL_OW 255
24464: PPUSH
24465: LD_VAR 0 13
24469: PPUSH
24470: CALL_OW 325
24474: NOT
24475: AND
24476: IFFALSE 24505
// missile := Insert ( missile , missile + 1 , 3 ) ;
24478: LD_ADDR_VAR 0 14
24482: PUSH
24483: LD_VAR 0 14
24487: PPUSH
24488: LD_VAR 0 14
24492: PUSH
24493: LD_INT 1
24495: PLUS
24496: PPUSH
24497: LD_INT 3
24499: PPUSH
24500: CALL_OW 2
24504: ST_TO_ADDR
// if missile < 2 then
24505: LD_VAR 0 14
24509: PUSH
24510: LD_INT 2
24512: LESS
24513: IFFALSE 24517
// exit ;
24515: GO 24739
// x := GetX ( enemy ) ;
24517: LD_ADDR_VAR 0 4
24521: PUSH
24522: LD_VAR 0 10
24526: PPUSH
24527: CALL_OW 250
24531: ST_TO_ADDR
// y := GetY ( enemy ) ;
24532: LD_ADDR_VAR 0 5
24536: PUSH
24537: LD_VAR 0 10
24541: PPUSH
24542: CALL_OW 251
24546: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24547: LD_ADDR_VAR 0 6
24551: PUSH
24552: LD_VAR 0 4
24556: PUSH
24557: LD_INT 1
24559: NEG
24560: PPUSH
24561: LD_INT 1
24563: PPUSH
24564: CALL_OW 12
24568: PLUS
24569: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24570: LD_ADDR_VAR 0 7
24574: PUSH
24575: LD_VAR 0 5
24579: PUSH
24580: LD_INT 1
24582: NEG
24583: PPUSH
24584: LD_INT 1
24586: PPUSH
24587: CALL_OW 12
24591: PLUS
24592: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24593: LD_VAR 0 6
24597: PPUSH
24598: LD_VAR 0 7
24602: PPUSH
24603: CALL_OW 488
24607: NOT
24608: IFFALSE 24630
// begin _x := x ;
24610: LD_ADDR_VAR 0 6
24614: PUSH
24615: LD_VAR 0 4
24619: ST_TO_ADDR
// _y := y ;
24620: LD_ADDR_VAR 0 7
24624: PUSH
24625: LD_VAR 0 5
24629: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24630: LD_ADDR_VAR 0 3
24634: PUSH
24635: LD_INT 1
24637: PPUSH
24638: LD_VAR 0 14
24642: PPUSH
24643: CALL_OW 12
24647: ST_TO_ADDR
// case i of 1 :
24648: LD_VAR 0 3
24652: PUSH
24653: LD_INT 1
24655: DOUBLE
24656: EQUAL
24657: IFTRUE 24661
24659: GO 24678
24661: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
24662: LD_VAR 0 1
24666: PPUSH
24667: LD_VAR 0 10
24671: PPUSH
24672: CALL_OW 115
24676: GO 24739
24678: LD_INT 2
24680: DOUBLE
24681: EQUAL
24682: IFTRUE 24686
24684: GO 24708
24686: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
24687: LD_VAR 0 1
24691: PPUSH
24692: LD_VAR 0 6
24696: PPUSH
24697: LD_VAR 0 7
24701: PPUSH
24702: CALL_OW 153
24706: GO 24739
24708: LD_INT 3
24710: DOUBLE
24711: EQUAL
24712: IFTRUE 24716
24714: GO 24738
24716: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
24717: LD_VAR 0 1
24721: PPUSH
24722: LD_VAR 0 6
24726: PPUSH
24727: LD_VAR 0 7
24731: PPUSH
24732: CALL_OW 154
24736: GO 24739
24738: POP
// end ;
24739: LD_VAR 0 2
24743: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
24744: LD_INT 0
24746: PPUSH
24747: PPUSH
24748: PPUSH
24749: PPUSH
24750: PPUSH
24751: PPUSH
// if not unit or not building then
24752: LD_VAR 0 1
24756: NOT
24757: PUSH
24758: LD_VAR 0 2
24762: NOT
24763: OR
24764: IFFALSE 24768
// exit ;
24766: GO 24926
// x := GetX ( building ) ;
24768: LD_ADDR_VAR 0 5
24772: PUSH
24773: LD_VAR 0 2
24777: PPUSH
24778: CALL_OW 250
24782: ST_TO_ADDR
// y := GetY ( building ) ;
24783: LD_ADDR_VAR 0 6
24787: PUSH
24788: LD_VAR 0 2
24792: PPUSH
24793: CALL_OW 251
24797: ST_TO_ADDR
// for i = 0 to 5 do
24798: LD_ADDR_VAR 0 4
24802: PUSH
24803: DOUBLE
24804: LD_INT 0
24806: DEC
24807: ST_TO_ADDR
24808: LD_INT 5
24810: PUSH
24811: FOR_TO
24812: IFFALSE 24924
// begin _x := ShiftX ( x , i , 3 ) ;
24814: LD_ADDR_VAR 0 7
24818: PUSH
24819: LD_VAR 0 5
24823: PPUSH
24824: LD_VAR 0 4
24828: PPUSH
24829: LD_INT 3
24831: PPUSH
24832: CALL_OW 272
24836: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
24837: LD_ADDR_VAR 0 8
24841: PUSH
24842: LD_VAR 0 6
24846: PPUSH
24847: LD_VAR 0 4
24851: PPUSH
24852: LD_INT 3
24854: PPUSH
24855: CALL_OW 273
24859: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24860: LD_VAR 0 7
24864: PPUSH
24865: LD_VAR 0 8
24869: PPUSH
24870: CALL_OW 488
24874: NOT
24875: IFFALSE 24879
// continue ;
24877: GO 24811
// if HexInfo ( _x , _y ) = 0 then
24879: LD_VAR 0 7
24883: PPUSH
24884: LD_VAR 0 8
24888: PPUSH
24889: CALL_OW 428
24893: PUSH
24894: LD_INT 0
24896: EQUAL
24897: IFFALSE 24922
// begin ComMoveXY ( unit , _x , _y ) ;
24899: LD_VAR 0 1
24903: PPUSH
24904: LD_VAR 0 7
24908: PPUSH
24909: LD_VAR 0 8
24913: PPUSH
24914: CALL_OW 111
// exit ;
24918: POP
24919: POP
24920: GO 24926
// end ; end ;
24922: GO 24811
24924: POP
24925: POP
// end ;
24926: LD_VAR 0 3
24930: RET
// export function ScanBase ( side , base_area ) ; begin
24931: LD_INT 0
24933: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
24934: LD_ADDR_VAR 0 3
24938: PUSH
24939: LD_VAR 0 2
24943: PPUSH
24944: LD_INT 81
24946: PUSH
24947: LD_VAR 0 1
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PPUSH
24956: CALL_OW 70
24960: ST_TO_ADDR
// end ;
24961: LD_VAR 0 3
24965: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
24966: LD_INT 0
24968: PPUSH
24969: PPUSH
24970: PPUSH
24971: PPUSH
// result := false ;
24972: LD_ADDR_VAR 0 2
24976: PUSH
24977: LD_INT 0
24979: ST_TO_ADDR
// side := GetSide ( unit ) ;
24980: LD_ADDR_VAR 0 3
24984: PUSH
24985: LD_VAR 0 1
24989: PPUSH
24990: CALL_OW 255
24994: ST_TO_ADDR
// nat := GetNation ( unit ) ;
24995: LD_ADDR_VAR 0 4
24999: PUSH
25000: LD_VAR 0 1
25004: PPUSH
25005: CALL_OW 248
25009: ST_TO_ADDR
// case nat of 1 :
25010: LD_VAR 0 4
25014: PUSH
25015: LD_INT 1
25017: DOUBLE
25018: EQUAL
25019: IFTRUE 25023
25021: GO 25034
25023: POP
// tech := tech_lassight ; 2 :
25024: LD_ADDR_VAR 0 5
25028: PUSH
25029: LD_INT 12
25031: ST_TO_ADDR
25032: GO 25073
25034: LD_INT 2
25036: DOUBLE
25037: EQUAL
25038: IFTRUE 25042
25040: GO 25053
25042: POP
// tech := tech_mortar ; 3 :
25043: LD_ADDR_VAR 0 5
25047: PUSH
25048: LD_INT 41
25050: ST_TO_ADDR
25051: GO 25073
25053: LD_INT 3
25055: DOUBLE
25056: EQUAL
25057: IFTRUE 25061
25059: GO 25072
25061: POP
// tech := tech_bazooka ; end ;
25062: LD_ADDR_VAR 0 5
25066: PUSH
25067: LD_INT 44
25069: ST_TO_ADDR
25070: GO 25073
25072: POP
// if Researched ( side , tech ) then
25073: LD_VAR 0 3
25077: PPUSH
25078: LD_VAR 0 5
25082: PPUSH
25083: CALL_OW 325
25087: IFFALSE 25114
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25089: LD_ADDR_VAR 0 2
25093: PUSH
25094: LD_INT 5
25096: PUSH
25097: LD_INT 8
25099: PUSH
25100: LD_INT 9
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: LIST
25107: PUSH
25108: LD_VAR 0 4
25112: ARRAY
25113: ST_TO_ADDR
// end ;
25114: LD_VAR 0 2
25118: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25119: LD_INT 0
25121: PPUSH
25122: PPUSH
25123: PPUSH
// if not mines then
25124: LD_VAR 0 2
25128: NOT
25129: IFFALSE 25133
// exit ;
25131: GO 25277
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25133: LD_ADDR_VAR 0 5
25137: PUSH
25138: LD_INT 81
25140: PUSH
25141: LD_VAR 0 1
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 3
25152: PUSH
25153: LD_INT 21
25155: PUSH
25156: LD_INT 3
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PPUSH
25171: CALL_OW 69
25175: ST_TO_ADDR
// for i in mines do
25176: LD_ADDR_VAR 0 4
25180: PUSH
25181: LD_VAR 0 2
25185: PUSH
25186: FOR_IN
25187: IFFALSE 25275
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25189: LD_VAR 0 4
25193: PUSH
25194: LD_INT 1
25196: ARRAY
25197: PPUSH
25198: LD_VAR 0 4
25202: PUSH
25203: LD_INT 2
25205: ARRAY
25206: PPUSH
25207: CALL_OW 458
25211: NOT
25212: IFFALSE 25216
// continue ;
25214: GO 25186
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25216: LD_VAR 0 4
25220: PUSH
25221: LD_INT 1
25223: ARRAY
25224: PPUSH
25225: LD_VAR 0 4
25229: PUSH
25230: LD_INT 2
25232: ARRAY
25233: PPUSH
25234: CALL_OW 428
25238: PUSH
25239: LD_VAR 0 5
25243: IN
25244: IFFALSE 25273
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25246: LD_VAR 0 4
25250: PUSH
25251: LD_INT 1
25253: ARRAY
25254: PPUSH
25255: LD_VAR 0 4
25259: PUSH
25260: LD_INT 2
25262: ARRAY
25263: PPUSH
25264: LD_VAR 0 1
25268: PPUSH
25269: CALL_OW 456
// end ;
25273: GO 25186
25275: POP
25276: POP
// end ;
25277: LD_VAR 0 3
25281: RET
// export function Count ( array ) ; var i ; begin
25282: LD_INT 0
25284: PPUSH
25285: PPUSH
// result := 0 ;
25286: LD_ADDR_VAR 0 2
25290: PUSH
25291: LD_INT 0
25293: ST_TO_ADDR
// for i in array do
25294: LD_ADDR_VAR 0 3
25298: PUSH
25299: LD_VAR 0 1
25303: PUSH
25304: FOR_IN
25305: IFFALSE 25329
// if i then
25307: LD_VAR 0 3
25311: IFFALSE 25327
// result := result + 1 ;
25313: LD_ADDR_VAR 0 2
25317: PUSH
25318: LD_VAR 0 2
25322: PUSH
25323: LD_INT 1
25325: PLUS
25326: ST_TO_ADDR
25327: GO 25304
25329: POP
25330: POP
// end ;
25331: LD_VAR 0 2
25335: RET
// export function IsEmpty ( building ) ; begin
25336: LD_INT 0
25338: PPUSH
// if not building then
25339: LD_VAR 0 1
25343: NOT
25344: IFFALSE 25348
// exit ;
25346: GO 25391
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25348: LD_ADDR_VAR 0 2
25352: PUSH
25353: LD_VAR 0 1
25357: PUSH
25358: LD_INT 22
25360: PUSH
25361: LD_VAR 0 1
25365: PPUSH
25366: CALL_OW 255
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 58
25377: PUSH
25378: EMPTY
25379: LIST
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PPUSH
25385: CALL_OW 69
25389: IN
25390: ST_TO_ADDR
// end ;
25391: LD_VAR 0 2
25395: RET
// export function IsNotFull ( building ) ; begin
25396: LD_INT 0
25398: PPUSH
// if not building then
25399: LD_VAR 0 1
25403: NOT
25404: IFFALSE 25408
// exit ;
25406: GO 25427
// result := UnitsInside ( building ) < 6 ;
25408: LD_ADDR_VAR 0 2
25412: PUSH
25413: LD_VAR 0 1
25417: PPUSH
25418: CALL_OW 313
25422: PUSH
25423: LD_INT 6
25425: LESS
25426: ST_TO_ADDR
// end ;
25427: LD_VAR 0 2
25431: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
25432: LD_INT 0
25434: PPUSH
25435: PPUSH
25436: PPUSH
25437: PPUSH
// tmp := [ ] ;
25438: LD_ADDR_VAR 0 3
25442: PUSH
25443: EMPTY
25444: ST_TO_ADDR
// list := [ ] ;
25445: LD_ADDR_VAR 0 5
25449: PUSH
25450: EMPTY
25451: ST_TO_ADDR
// for i = 16 to 25 do
25452: LD_ADDR_VAR 0 4
25456: PUSH
25457: DOUBLE
25458: LD_INT 16
25460: DEC
25461: ST_TO_ADDR
25462: LD_INT 25
25464: PUSH
25465: FOR_TO
25466: IFFALSE 25539
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
25468: LD_ADDR_VAR 0 3
25472: PUSH
25473: LD_VAR 0 3
25477: PUSH
25478: LD_INT 22
25480: PUSH
25481: LD_VAR 0 1
25485: PPUSH
25486: CALL_OW 255
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 91
25497: PUSH
25498: LD_VAR 0 1
25502: PUSH
25503: LD_INT 6
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 30
25513: PUSH
25514: LD_VAR 0 4
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: LIST
25527: PUSH
25528: EMPTY
25529: LIST
25530: PPUSH
25531: CALL_OW 69
25535: ADD
25536: ST_TO_ADDR
25537: GO 25465
25539: POP
25540: POP
// for i = 1 to tmp do
25541: LD_ADDR_VAR 0 4
25545: PUSH
25546: DOUBLE
25547: LD_INT 1
25549: DEC
25550: ST_TO_ADDR
25551: LD_VAR 0 3
25555: PUSH
25556: FOR_TO
25557: IFFALSE 25645
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
25559: LD_ADDR_VAR 0 5
25563: PUSH
25564: LD_VAR 0 5
25568: PUSH
25569: LD_VAR 0 3
25573: PUSH
25574: LD_VAR 0 4
25578: ARRAY
25579: PPUSH
25580: CALL_OW 266
25584: PUSH
25585: LD_VAR 0 3
25589: PUSH
25590: LD_VAR 0 4
25594: ARRAY
25595: PPUSH
25596: CALL_OW 250
25600: PUSH
25601: LD_VAR 0 3
25605: PUSH
25606: LD_VAR 0 4
25610: ARRAY
25611: PPUSH
25612: CALL_OW 251
25616: PUSH
25617: LD_VAR 0 3
25621: PUSH
25622: LD_VAR 0 4
25626: ARRAY
25627: PPUSH
25628: CALL_OW 254
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: PUSH
25639: EMPTY
25640: LIST
25641: ADD
25642: ST_TO_ADDR
25643: GO 25556
25645: POP
25646: POP
// result := list ;
25647: LD_ADDR_VAR 0 2
25651: PUSH
25652: LD_VAR 0 5
25656: ST_TO_ADDR
// end ;
25657: LD_VAR 0 2
25661: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
25662: LD_INT 0
25664: PPUSH
25665: PPUSH
25666: PPUSH
25667: PPUSH
25668: PPUSH
25669: PPUSH
25670: PPUSH
// if not factory then
25671: LD_VAR 0 1
25675: NOT
25676: IFFALSE 25680
// exit ;
25678: GO 26273
// if control = control_apeman then
25680: LD_VAR 0 4
25684: PUSH
25685: LD_INT 5
25687: EQUAL
25688: IFFALSE 25797
// begin tmp := UnitsInside ( factory ) ;
25690: LD_ADDR_VAR 0 8
25694: PUSH
25695: LD_VAR 0 1
25699: PPUSH
25700: CALL_OW 313
25704: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
25705: LD_VAR 0 8
25709: PPUSH
25710: LD_INT 25
25712: PUSH
25713: LD_INT 12
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PPUSH
25720: CALL_OW 72
25724: NOT
25725: IFFALSE 25735
// control := control_manual ;
25727: LD_ADDR_VAR 0 4
25731: PUSH
25732: LD_INT 1
25734: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
25735: LD_ADDR_VAR 0 8
25739: PUSH
25740: LD_VAR 0 1
25744: PPUSH
25745: CALL 25432 0 1
25749: ST_TO_ADDR
// if tmp then
25750: LD_VAR 0 8
25754: IFFALSE 25797
// begin for i in tmp do
25756: LD_ADDR_VAR 0 7
25760: PUSH
25761: LD_VAR 0 8
25765: PUSH
25766: FOR_IN
25767: IFFALSE 25795
// if i [ 1 ] = b_ext_radio then
25769: LD_VAR 0 7
25773: PUSH
25774: LD_INT 1
25776: ARRAY
25777: PUSH
25778: LD_INT 22
25780: EQUAL
25781: IFFALSE 25793
// begin control := control_remote ;
25783: LD_ADDR_VAR 0 4
25787: PUSH
25788: LD_INT 2
25790: ST_TO_ADDR
// break ;
25791: GO 25795
// end ;
25793: GO 25766
25795: POP
25796: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25797: LD_VAR 0 1
25801: PPUSH
25802: LD_VAR 0 2
25806: PPUSH
25807: LD_VAR 0 3
25811: PPUSH
25812: LD_VAR 0 4
25816: PPUSH
25817: LD_VAR 0 5
25821: PPUSH
25822: CALL_OW 448
25826: IFFALSE 25861
// begin result := [ chassis , engine , control , weapon ] ;
25828: LD_ADDR_VAR 0 6
25832: PUSH
25833: LD_VAR 0 2
25837: PUSH
25838: LD_VAR 0 3
25842: PUSH
25843: LD_VAR 0 4
25847: PUSH
25848: LD_VAR 0 5
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: ST_TO_ADDR
// exit ;
25859: GO 26273
// end ; _chassis := AvailableChassisList ( factory ) ;
25861: LD_ADDR_VAR 0 9
25865: PUSH
25866: LD_VAR 0 1
25870: PPUSH
25871: CALL_OW 475
25875: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
25876: LD_ADDR_VAR 0 11
25880: PUSH
25881: LD_VAR 0 1
25885: PPUSH
25886: CALL_OW 476
25890: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
25891: LD_ADDR_VAR 0 12
25895: PUSH
25896: LD_VAR 0 1
25900: PPUSH
25901: CALL_OW 477
25905: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25906: LD_ADDR_VAR 0 10
25910: PUSH
25911: LD_VAR 0 1
25915: PPUSH
25916: CALL_OW 478
25920: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25921: LD_VAR 0 9
25925: NOT
25926: PUSH
25927: LD_VAR 0 11
25931: NOT
25932: OR
25933: PUSH
25934: LD_VAR 0 12
25938: NOT
25939: OR
25940: PUSH
25941: LD_VAR 0 10
25945: NOT
25946: OR
25947: IFFALSE 25982
// begin result := [ chassis , engine , control , weapon ] ;
25949: LD_ADDR_VAR 0 6
25953: PUSH
25954: LD_VAR 0 2
25958: PUSH
25959: LD_VAR 0 3
25963: PUSH
25964: LD_VAR 0 4
25968: PUSH
25969: LD_VAR 0 5
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: ST_TO_ADDR
// exit ;
25980: GO 26273
// end ; if not chassis in _chassis then
25982: LD_VAR 0 2
25986: PUSH
25987: LD_VAR 0 9
25991: IN
25992: NOT
25993: IFFALSE 26019
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25995: LD_ADDR_VAR 0 2
25999: PUSH
26000: LD_VAR 0 9
26004: PUSH
26005: LD_INT 1
26007: PPUSH
26008: LD_VAR 0 9
26012: PPUSH
26013: CALL_OW 12
26017: ARRAY
26018: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26019: LD_VAR 0 2
26023: PPUSH
26024: LD_VAR 0 3
26028: PPUSH
26029: CALL 26278 0 2
26033: NOT
26034: IFFALSE 26093
// repeat engine := _engine [ 1 ] ;
26036: LD_ADDR_VAR 0 3
26040: PUSH
26041: LD_VAR 0 11
26045: PUSH
26046: LD_INT 1
26048: ARRAY
26049: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26050: LD_ADDR_VAR 0 11
26054: PUSH
26055: LD_VAR 0 11
26059: PPUSH
26060: LD_INT 1
26062: PPUSH
26063: CALL_OW 3
26067: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26068: LD_VAR 0 2
26072: PPUSH
26073: LD_VAR 0 3
26077: PPUSH
26078: CALL 26278 0 2
26082: PUSH
26083: LD_VAR 0 11
26087: PUSH
26088: EMPTY
26089: EQUAL
26090: OR
26091: IFFALSE 26036
// if not control in _control then
26093: LD_VAR 0 4
26097: PUSH
26098: LD_VAR 0 12
26102: IN
26103: NOT
26104: IFFALSE 26130
// control := _control [ rand ( 1 , _control ) ] ;
26106: LD_ADDR_VAR 0 4
26110: PUSH
26111: LD_VAR 0 12
26115: PUSH
26116: LD_INT 1
26118: PPUSH
26119: LD_VAR 0 12
26123: PPUSH
26124: CALL_OW 12
26128: ARRAY
26129: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26130: LD_VAR 0 2
26134: PPUSH
26135: LD_VAR 0 5
26139: PPUSH
26140: CALL 26498 0 2
26144: NOT
26145: IFFALSE 26204
// repeat weapon := _weapon [ 1 ] ;
26147: LD_ADDR_VAR 0 5
26151: PUSH
26152: LD_VAR 0 10
26156: PUSH
26157: LD_INT 1
26159: ARRAY
26160: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26161: LD_ADDR_VAR 0 10
26165: PUSH
26166: LD_VAR 0 10
26170: PPUSH
26171: LD_INT 1
26173: PPUSH
26174: CALL_OW 3
26178: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26179: LD_VAR 0 2
26183: PPUSH
26184: LD_VAR 0 5
26188: PPUSH
26189: CALL 26498 0 2
26193: PUSH
26194: LD_VAR 0 10
26198: PUSH
26199: EMPTY
26200: EQUAL
26201: OR
26202: IFFALSE 26147
// result := [ ] ;
26204: LD_ADDR_VAR 0 6
26208: PUSH
26209: EMPTY
26210: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26211: LD_VAR 0 1
26215: PPUSH
26216: LD_VAR 0 2
26220: PPUSH
26221: LD_VAR 0 3
26225: PPUSH
26226: LD_VAR 0 4
26230: PPUSH
26231: LD_VAR 0 5
26235: PPUSH
26236: CALL_OW 448
26240: IFFALSE 26273
// result := [ chassis , engine , control , weapon ] ;
26242: LD_ADDR_VAR 0 6
26246: PUSH
26247: LD_VAR 0 2
26251: PUSH
26252: LD_VAR 0 3
26256: PUSH
26257: LD_VAR 0 4
26261: PUSH
26262: LD_VAR 0 5
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: ST_TO_ADDR
// end ;
26273: LD_VAR 0 6
26277: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26278: LD_INT 0
26280: PPUSH
// if not chassis or not engine then
26281: LD_VAR 0 1
26285: NOT
26286: PUSH
26287: LD_VAR 0 2
26291: NOT
26292: OR
26293: IFFALSE 26297
// exit ;
26295: GO 26493
// case engine of engine_solar :
26297: LD_VAR 0 2
26301: PUSH
26302: LD_INT 2
26304: DOUBLE
26305: EQUAL
26306: IFTRUE 26310
26308: GO 26348
26310: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26311: LD_ADDR_VAR 0 3
26315: PUSH
26316: LD_INT 11
26318: PUSH
26319: LD_INT 12
26321: PUSH
26322: LD_INT 13
26324: PUSH
26325: LD_INT 14
26327: PUSH
26328: LD_INT 1
26330: PUSH
26331: LD_INT 2
26333: PUSH
26334: LD_INT 3
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: ST_TO_ADDR
26346: GO 26477
26348: LD_INT 1
26350: DOUBLE
26351: EQUAL
26352: IFTRUE 26356
26354: GO 26418
26356: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26357: LD_ADDR_VAR 0 3
26361: PUSH
26362: LD_INT 11
26364: PUSH
26365: LD_INT 12
26367: PUSH
26368: LD_INT 13
26370: PUSH
26371: LD_INT 14
26373: PUSH
26374: LD_INT 1
26376: PUSH
26377: LD_INT 2
26379: PUSH
26380: LD_INT 3
26382: PUSH
26383: LD_INT 4
26385: PUSH
26386: LD_INT 5
26388: PUSH
26389: LD_INT 21
26391: PUSH
26392: LD_INT 23
26394: PUSH
26395: LD_INT 22
26397: PUSH
26398: LD_INT 24
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: ST_TO_ADDR
26416: GO 26477
26418: LD_INT 3
26420: DOUBLE
26421: EQUAL
26422: IFTRUE 26426
26424: GO 26476
26426: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26427: LD_ADDR_VAR 0 3
26431: PUSH
26432: LD_INT 13
26434: PUSH
26435: LD_INT 14
26437: PUSH
26438: LD_INT 2
26440: PUSH
26441: LD_INT 3
26443: PUSH
26444: LD_INT 4
26446: PUSH
26447: LD_INT 5
26449: PUSH
26450: LD_INT 21
26452: PUSH
26453: LD_INT 22
26455: PUSH
26456: LD_INT 23
26458: PUSH
26459: LD_INT 24
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: ST_TO_ADDR
26474: GO 26477
26476: POP
// result := ( chassis in result ) ;
26477: LD_ADDR_VAR 0 3
26481: PUSH
26482: LD_VAR 0 1
26486: PUSH
26487: LD_VAR 0 3
26491: IN
26492: ST_TO_ADDR
// end ;
26493: LD_VAR 0 3
26497: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
26498: LD_INT 0
26500: PPUSH
// if not chassis or not weapon then
26501: LD_VAR 0 1
26505: NOT
26506: PUSH
26507: LD_VAR 0 2
26511: NOT
26512: OR
26513: IFFALSE 26517
// exit ;
26515: GO 27579
// case weapon of us_machine_gun :
26517: LD_VAR 0 2
26521: PUSH
26522: LD_INT 2
26524: DOUBLE
26525: EQUAL
26526: IFTRUE 26530
26528: GO 26560
26530: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
26531: LD_ADDR_VAR 0 3
26535: PUSH
26536: LD_INT 1
26538: PUSH
26539: LD_INT 2
26541: PUSH
26542: LD_INT 3
26544: PUSH
26545: LD_INT 4
26547: PUSH
26548: LD_INT 5
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: ST_TO_ADDR
26558: GO 27563
26560: LD_INT 3
26562: DOUBLE
26563: EQUAL
26564: IFTRUE 26568
26566: GO 26598
26568: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
26569: LD_ADDR_VAR 0 3
26573: PUSH
26574: LD_INT 1
26576: PUSH
26577: LD_INT 2
26579: PUSH
26580: LD_INT 3
26582: PUSH
26583: LD_INT 4
26585: PUSH
26586: LD_INT 5
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: ST_TO_ADDR
26596: GO 27563
26598: LD_INT 11
26600: DOUBLE
26601: EQUAL
26602: IFTRUE 26606
26604: GO 26636
26606: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
26607: LD_ADDR_VAR 0 3
26611: PUSH
26612: LD_INT 1
26614: PUSH
26615: LD_INT 2
26617: PUSH
26618: LD_INT 3
26620: PUSH
26621: LD_INT 4
26623: PUSH
26624: LD_INT 5
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: ST_TO_ADDR
26634: GO 27563
26636: LD_INT 4
26638: DOUBLE
26639: EQUAL
26640: IFTRUE 26644
26642: GO 26670
26644: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
26645: LD_ADDR_VAR 0 3
26649: PUSH
26650: LD_INT 2
26652: PUSH
26653: LD_INT 3
26655: PUSH
26656: LD_INT 4
26658: PUSH
26659: LD_INT 5
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: ST_TO_ADDR
26668: GO 27563
26670: LD_INT 5
26672: DOUBLE
26673: EQUAL
26674: IFTRUE 26678
26676: GO 26704
26678: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
26679: LD_ADDR_VAR 0 3
26683: PUSH
26684: LD_INT 2
26686: PUSH
26687: LD_INT 3
26689: PUSH
26690: LD_INT 4
26692: PUSH
26693: LD_INT 5
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: ST_TO_ADDR
26702: GO 27563
26704: LD_INT 9
26706: DOUBLE
26707: EQUAL
26708: IFTRUE 26712
26710: GO 26738
26712: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
26713: LD_ADDR_VAR 0 3
26717: PUSH
26718: LD_INT 2
26720: PUSH
26721: LD_INT 3
26723: PUSH
26724: LD_INT 4
26726: PUSH
26727: LD_INT 5
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: ST_TO_ADDR
26736: GO 27563
26738: LD_INT 7
26740: DOUBLE
26741: EQUAL
26742: IFTRUE 26746
26744: GO 26772
26746: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
26747: LD_ADDR_VAR 0 3
26751: PUSH
26752: LD_INT 2
26754: PUSH
26755: LD_INT 3
26757: PUSH
26758: LD_INT 4
26760: PUSH
26761: LD_INT 5
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: ST_TO_ADDR
26770: GO 27563
26772: LD_INT 12
26774: DOUBLE
26775: EQUAL
26776: IFTRUE 26780
26778: GO 26806
26780: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
26781: LD_ADDR_VAR 0 3
26785: PUSH
26786: LD_INT 2
26788: PUSH
26789: LD_INT 3
26791: PUSH
26792: LD_INT 4
26794: PUSH
26795: LD_INT 5
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: ST_TO_ADDR
26804: GO 27563
26806: LD_INT 13
26808: DOUBLE
26809: EQUAL
26810: IFTRUE 26814
26812: GO 26840
26814: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
26815: LD_ADDR_VAR 0 3
26819: PUSH
26820: LD_INT 2
26822: PUSH
26823: LD_INT 3
26825: PUSH
26826: LD_INT 4
26828: PUSH
26829: LD_INT 5
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: ST_TO_ADDR
26838: GO 27563
26840: LD_INT 14
26842: DOUBLE
26843: EQUAL
26844: IFTRUE 26848
26846: GO 26866
26848: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
26849: LD_ADDR_VAR 0 3
26853: PUSH
26854: LD_INT 4
26856: PUSH
26857: LD_INT 5
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: ST_TO_ADDR
26864: GO 27563
26866: LD_INT 6
26868: DOUBLE
26869: EQUAL
26870: IFTRUE 26874
26872: GO 26892
26874: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
26875: LD_ADDR_VAR 0 3
26879: PUSH
26880: LD_INT 4
26882: PUSH
26883: LD_INT 5
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: ST_TO_ADDR
26890: GO 27563
26892: LD_INT 10
26894: DOUBLE
26895: EQUAL
26896: IFTRUE 26900
26898: GO 26918
26900: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26901: LD_ADDR_VAR 0 3
26905: PUSH
26906: LD_INT 4
26908: PUSH
26909: LD_INT 5
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: ST_TO_ADDR
26916: GO 27563
26918: LD_INT 22
26920: DOUBLE
26921: EQUAL
26922: IFTRUE 26926
26924: GO 26952
26926: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26927: LD_ADDR_VAR 0 3
26931: PUSH
26932: LD_INT 11
26934: PUSH
26935: LD_INT 12
26937: PUSH
26938: LD_INT 13
26940: PUSH
26941: LD_INT 14
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: ST_TO_ADDR
26950: GO 27563
26952: LD_INT 23
26954: DOUBLE
26955: EQUAL
26956: IFTRUE 26960
26958: GO 26986
26960: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26961: LD_ADDR_VAR 0 3
26965: PUSH
26966: LD_INT 11
26968: PUSH
26969: LD_INT 12
26971: PUSH
26972: LD_INT 13
26974: PUSH
26975: LD_INT 14
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: ST_TO_ADDR
26984: GO 27563
26986: LD_INT 24
26988: DOUBLE
26989: EQUAL
26990: IFTRUE 26994
26992: GO 27020
26994: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26995: LD_ADDR_VAR 0 3
26999: PUSH
27000: LD_INT 11
27002: PUSH
27003: LD_INT 12
27005: PUSH
27006: LD_INT 13
27008: PUSH
27009: LD_INT 14
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: ST_TO_ADDR
27018: GO 27563
27020: LD_INT 30
27022: DOUBLE
27023: EQUAL
27024: IFTRUE 27028
27026: GO 27054
27028: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27029: LD_ADDR_VAR 0 3
27033: PUSH
27034: LD_INT 11
27036: PUSH
27037: LD_INT 12
27039: PUSH
27040: LD_INT 13
27042: PUSH
27043: LD_INT 14
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: ST_TO_ADDR
27052: GO 27563
27054: LD_INT 25
27056: DOUBLE
27057: EQUAL
27058: IFTRUE 27062
27060: GO 27080
27062: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27063: LD_ADDR_VAR 0 3
27067: PUSH
27068: LD_INT 13
27070: PUSH
27071: LD_INT 14
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: ST_TO_ADDR
27078: GO 27563
27080: LD_INT 27
27082: DOUBLE
27083: EQUAL
27084: IFTRUE 27088
27086: GO 27106
27088: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
27089: LD_ADDR_VAR 0 3
27093: PUSH
27094: LD_INT 13
27096: PUSH
27097: LD_INT 14
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: ST_TO_ADDR
27104: GO 27563
27106: LD_EXP 96
27110: DOUBLE
27111: EQUAL
27112: IFTRUE 27116
27114: GO 27142
27116: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27117: LD_ADDR_VAR 0 3
27121: PUSH
27122: LD_INT 11
27124: PUSH
27125: LD_INT 12
27127: PUSH
27128: LD_INT 13
27130: PUSH
27131: LD_INT 14
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: ST_TO_ADDR
27140: GO 27563
27142: LD_INT 28
27144: DOUBLE
27145: EQUAL
27146: IFTRUE 27150
27148: GO 27168
27150: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27151: LD_ADDR_VAR 0 3
27155: PUSH
27156: LD_INT 13
27158: PUSH
27159: LD_INT 14
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: ST_TO_ADDR
27166: GO 27563
27168: LD_INT 29
27170: DOUBLE
27171: EQUAL
27172: IFTRUE 27176
27174: GO 27194
27176: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27177: LD_ADDR_VAR 0 3
27181: PUSH
27182: LD_INT 13
27184: PUSH
27185: LD_INT 14
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: ST_TO_ADDR
27192: GO 27563
27194: LD_INT 31
27196: DOUBLE
27197: EQUAL
27198: IFTRUE 27202
27200: GO 27220
27202: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27203: LD_ADDR_VAR 0 3
27207: PUSH
27208: LD_INT 13
27210: PUSH
27211: LD_INT 14
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: ST_TO_ADDR
27218: GO 27563
27220: LD_INT 26
27222: DOUBLE
27223: EQUAL
27224: IFTRUE 27228
27226: GO 27246
27228: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27229: LD_ADDR_VAR 0 3
27233: PUSH
27234: LD_INT 13
27236: PUSH
27237: LD_INT 14
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: ST_TO_ADDR
27244: GO 27563
27246: LD_INT 42
27248: DOUBLE
27249: EQUAL
27250: IFTRUE 27254
27252: GO 27280
27254: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27255: LD_ADDR_VAR 0 3
27259: PUSH
27260: LD_INT 21
27262: PUSH
27263: LD_INT 22
27265: PUSH
27266: LD_INT 23
27268: PUSH
27269: LD_INT 24
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: ST_TO_ADDR
27278: GO 27563
27280: LD_INT 43
27282: DOUBLE
27283: EQUAL
27284: IFTRUE 27288
27286: GO 27314
27288: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27289: LD_ADDR_VAR 0 3
27293: PUSH
27294: LD_INT 21
27296: PUSH
27297: LD_INT 22
27299: PUSH
27300: LD_INT 23
27302: PUSH
27303: LD_INT 24
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: ST_TO_ADDR
27312: GO 27563
27314: LD_INT 44
27316: DOUBLE
27317: EQUAL
27318: IFTRUE 27322
27320: GO 27348
27322: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27323: LD_ADDR_VAR 0 3
27327: PUSH
27328: LD_INT 21
27330: PUSH
27331: LD_INT 22
27333: PUSH
27334: LD_INT 23
27336: PUSH
27337: LD_INT 24
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: ST_TO_ADDR
27346: GO 27563
27348: LD_INT 45
27350: DOUBLE
27351: EQUAL
27352: IFTRUE 27356
27354: GO 27382
27356: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27357: LD_ADDR_VAR 0 3
27361: PUSH
27362: LD_INT 21
27364: PUSH
27365: LD_INT 22
27367: PUSH
27368: LD_INT 23
27370: PUSH
27371: LD_INT 24
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: ST_TO_ADDR
27380: GO 27563
27382: LD_INT 49
27384: DOUBLE
27385: EQUAL
27386: IFTRUE 27390
27388: GO 27416
27390: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27391: LD_ADDR_VAR 0 3
27395: PUSH
27396: LD_INT 21
27398: PUSH
27399: LD_INT 22
27401: PUSH
27402: LD_INT 23
27404: PUSH
27405: LD_INT 24
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: ST_TO_ADDR
27414: GO 27563
27416: LD_INT 51
27418: DOUBLE
27419: EQUAL
27420: IFTRUE 27424
27422: GO 27450
27424: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
27425: LD_ADDR_VAR 0 3
27429: PUSH
27430: LD_INT 21
27432: PUSH
27433: LD_INT 22
27435: PUSH
27436: LD_INT 23
27438: PUSH
27439: LD_INT 24
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: ST_TO_ADDR
27448: GO 27563
27450: LD_INT 52
27452: DOUBLE
27453: EQUAL
27454: IFTRUE 27458
27456: GO 27484
27458: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
27459: LD_ADDR_VAR 0 3
27463: PUSH
27464: LD_INT 21
27466: PUSH
27467: LD_INT 22
27469: PUSH
27470: LD_INT 23
27472: PUSH
27473: LD_INT 24
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: ST_TO_ADDR
27482: GO 27563
27484: LD_INT 53
27486: DOUBLE
27487: EQUAL
27488: IFTRUE 27492
27490: GO 27510
27492: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27493: LD_ADDR_VAR 0 3
27497: PUSH
27498: LD_INT 23
27500: PUSH
27501: LD_INT 24
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: ST_TO_ADDR
27508: GO 27563
27510: LD_INT 46
27512: DOUBLE
27513: EQUAL
27514: IFTRUE 27518
27516: GO 27536
27518: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
27519: LD_ADDR_VAR 0 3
27523: PUSH
27524: LD_INT 23
27526: PUSH
27527: LD_INT 24
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: ST_TO_ADDR
27534: GO 27563
27536: LD_INT 47
27538: DOUBLE
27539: EQUAL
27540: IFTRUE 27544
27542: GO 27562
27544: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27545: LD_ADDR_VAR 0 3
27549: PUSH
27550: LD_INT 23
27552: PUSH
27553: LD_INT 24
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: ST_TO_ADDR
27560: GO 27563
27562: POP
// result := ( chassis in result ) ;
27563: LD_ADDR_VAR 0 3
27567: PUSH
27568: LD_VAR 0 1
27572: PUSH
27573: LD_VAR 0 3
27577: IN
27578: ST_TO_ADDR
// end ;
27579: LD_VAR 0 3
27583: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
27584: LD_INT 0
27586: PPUSH
27587: PPUSH
27588: PPUSH
27589: PPUSH
27590: PPUSH
27591: PPUSH
27592: PPUSH
// result := array ;
27593: LD_ADDR_VAR 0 5
27597: PUSH
27598: LD_VAR 0 1
27602: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
27603: LD_VAR 0 1
27607: NOT
27608: PUSH
27609: LD_VAR 0 2
27613: NOT
27614: OR
27615: PUSH
27616: LD_VAR 0 3
27620: NOT
27621: OR
27622: PUSH
27623: LD_VAR 0 2
27627: PUSH
27628: LD_VAR 0 1
27632: GREATER
27633: OR
27634: PUSH
27635: LD_VAR 0 3
27639: PUSH
27640: LD_VAR 0 1
27644: GREATER
27645: OR
27646: IFFALSE 27650
// exit ;
27648: GO 27946
// if direction then
27650: LD_VAR 0 4
27654: IFFALSE 27718
// begin d := 1 ;
27656: LD_ADDR_VAR 0 9
27660: PUSH
27661: LD_INT 1
27663: ST_TO_ADDR
// if i_from > i_to then
27664: LD_VAR 0 2
27668: PUSH
27669: LD_VAR 0 3
27673: GREATER
27674: IFFALSE 27700
// length := ( array - i_from ) + i_to else
27676: LD_ADDR_VAR 0 11
27680: PUSH
27681: LD_VAR 0 1
27685: PUSH
27686: LD_VAR 0 2
27690: MINUS
27691: PUSH
27692: LD_VAR 0 3
27696: PLUS
27697: ST_TO_ADDR
27698: GO 27716
// length := i_to - i_from ;
27700: LD_ADDR_VAR 0 11
27704: PUSH
27705: LD_VAR 0 3
27709: PUSH
27710: LD_VAR 0 2
27714: MINUS
27715: ST_TO_ADDR
// end else
27716: GO 27779
// begin d := - 1 ;
27718: LD_ADDR_VAR 0 9
27722: PUSH
27723: LD_INT 1
27725: NEG
27726: ST_TO_ADDR
// if i_from > i_to then
27727: LD_VAR 0 2
27731: PUSH
27732: LD_VAR 0 3
27736: GREATER
27737: IFFALSE 27757
// length := i_from - i_to else
27739: LD_ADDR_VAR 0 11
27743: PUSH
27744: LD_VAR 0 2
27748: PUSH
27749: LD_VAR 0 3
27753: MINUS
27754: ST_TO_ADDR
27755: GO 27779
// length := ( array - i_to ) + i_from ;
27757: LD_ADDR_VAR 0 11
27761: PUSH
27762: LD_VAR 0 1
27766: PUSH
27767: LD_VAR 0 3
27771: MINUS
27772: PUSH
27773: LD_VAR 0 2
27777: PLUS
27778: ST_TO_ADDR
// end ; if not length then
27779: LD_VAR 0 11
27783: NOT
27784: IFFALSE 27788
// exit ;
27786: GO 27946
// tmp := array ;
27788: LD_ADDR_VAR 0 10
27792: PUSH
27793: LD_VAR 0 1
27797: ST_TO_ADDR
// for i = 1 to length do
27798: LD_ADDR_VAR 0 6
27802: PUSH
27803: DOUBLE
27804: LD_INT 1
27806: DEC
27807: ST_TO_ADDR
27808: LD_VAR 0 11
27812: PUSH
27813: FOR_TO
27814: IFFALSE 27934
// begin for j = 1 to array do
27816: LD_ADDR_VAR 0 7
27820: PUSH
27821: DOUBLE
27822: LD_INT 1
27824: DEC
27825: ST_TO_ADDR
27826: LD_VAR 0 1
27830: PUSH
27831: FOR_TO
27832: IFFALSE 27920
// begin k := j + d ;
27834: LD_ADDR_VAR 0 8
27838: PUSH
27839: LD_VAR 0 7
27843: PUSH
27844: LD_VAR 0 9
27848: PLUS
27849: ST_TO_ADDR
// if k > array then
27850: LD_VAR 0 8
27854: PUSH
27855: LD_VAR 0 1
27859: GREATER
27860: IFFALSE 27870
// k := 1 ;
27862: LD_ADDR_VAR 0 8
27866: PUSH
27867: LD_INT 1
27869: ST_TO_ADDR
// if not k then
27870: LD_VAR 0 8
27874: NOT
27875: IFFALSE 27887
// k := array ;
27877: LD_ADDR_VAR 0 8
27881: PUSH
27882: LD_VAR 0 1
27886: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27887: LD_ADDR_VAR 0 10
27891: PUSH
27892: LD_VAR 0 10
27896: PPUSH
27897: LD_VAR 0 8
27901: PPUSH
27902: LD_VAR 0 1
27906: PUSH
27907: LD_VAR 0 7
27911: ARRAY
27912: PPUSH
27913: CALL_OW 1
27917: ST_TO_ADDR
// end ;
27918: GO 27831
27920: POP
27921: POP
// array := tmp ;
27922: LD_ADDR_VAR 0 1
27926: PUSH
27927: LD_VAR 0 10
27931: ST_TO_ADDR
// end ;
27932: GO 27813
27934: POP
27935: POP
// result := array ;
27936: LD_ADDR_VAR 0 5
27940: PUSH
27941: LD_VAR 0 1
27945: ST_TO_ADDR
// end ;
27946: LD_VAR 0 5
27950: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27951: LD_INT 0
27953: PPUSH
27954: PPUSH
// result := 0 ;
27955: LD_ADDR_VAR 0 3
27959: PUSH
27960: LD_INT 0
27962: ST_TO_ADDR
// if not array or not value in array then
27963: LD_VAR 0 1
27967: NOT
27968: PUSH
27969: LD_VAR 0 2
27973: PUSH
27974: LD_VAR 0 1
27978: IN
27979: NOT
27980: OR
27981: IFFALSE 27985
// exit ;
27983: GO 28039
// for i = 1 to array do
27985: LD_ADDR_VAR 0 4
27989: PUSH
27990: DOUBLE
27991: LD_INT 1
27993: DEC
27994: ST_TO_ADDR
27995: LD_VAR 0 1
27999: PUSH
28000: FOR_TO
28001: IFFALSE 28037
// if value = array [ i ] then
28003: LD_VAR 0 2
28007: PUSH
28008: LD_VAR 0 1
28012: PUSH
28013: LD_VAR 0 4
28017: ARRAY
28018: EQUAL
28019: IFFALSE 28035
// begin result := i ;
28021: LD_ADDR_VAR 0 3
28025: PUSH
28026: LD_VAR 0 4
28030: ST_TO_ADDR
// exit ;
28031: POP
28032: POP
28033: GO 28039
// end ;
28035: GO 28000
28037: POP
28038: POP
// end ;
28039: LD_VAR 0 3
28043: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28044: LD_INT 0
28046: PPUSH
// vc_chassis := chassis ;
28047: LD_ADDR_OWVAR 37
28051: PUSH
28052: LD_VAR 0 1
28056: ST_TO_ADDR
// vc_engine := engine ;
28057: LD_ADDR_OWVAR 39
28061: PUSH
28062: LD_VAR 0 2
28066: ST_TO_ADDR
// vc_control := control ;
28067: LD_ADDR_OWVAR 38
28071: PUSH
28072: LD_VAR 0 3
28076: ST_TO_ADDR
// vc_weapon := weapon ;
28077: LD_ADDR_OWVAR 40
28081: PUSH
28082: LD_VAR 0 4
28086: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28087: LD_ADDR_OWVAR 41
28091: PUSH
28092: LD_VAR 0 5
28096: ST_TO_ADDR
// end ;
28097: LD_VAR 0 6
28101: RET
// export function WantPlant ( unit ) ; var task ; begin
28102: LD_INT 0
28104: PPUSH
28105: PPUSH
// result := false ;
28106: LD_ADDR_VAR 0 2
28110: PUSH
28111: LD_INT 0
28113: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28114: LD_ADDR_VAR 0 3
28118: PUSH
28119: LD_VAR 0 1
28123: PPUSH
28124: CALL_OW 437
28128: ST_TO_ADDR
// if task then
28129: LD_VAR 0 3
28133: IFFALSE 28161
// if task [ 1 ] [ 1 ] = p then
28135: LD_VAR 0 3
28139: PUSH
28140: LD_INT 1
28142: ARRAY
28143: PUSH
28144: LD_INT 1
28146: ARRAY
28147: PUSH
28148: LD_STRING p
28150: EQUAL
28151: IFFALSE 28161
// result := true ;
28153: LD_ADDR_VAR 0 2
28157: PUSH
28158: LD_INT 1
28160: ST_TO_ADDR
// end ;
28161: LD_VAR 0 2
28165: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28166: LD_INT 0
28168: PPUSH
28169: PPUSH
28170: PPUSH
28171: PPUSH
// if pos < 1 then
28172: LD_VAR 0 2
28176: PUSH
28177: LD_INT 1
28179: LESS
28180: IFFALSE 28184
// exit ;
28182: GO 28487
// if pos = 1 then
28184: LD_VAR 0 2
28188: PUSH
28189: LD_INT 1
28191: EQUAL
28192: IFFALSE 28225
// result := Replace ( arr , pos [ 1 ] , value ) else
28194: LD_ADDR_VAR 0 4
28198: PUSH
28199: LD_VAR 0 1
28203: PPUSH
28204: LD_VAR 0 2
28208: PUSH
28209: LD_INT 1
28211: ARRAY
28212: PPUSH
28213: LD_VAR 0 3
28217: PPUSH
28218: CALL_OW 1
28222: ST_TO_ADDR
28223: GO 28487
// begin tmp := arr ;
28225: LD_ADDR_VAR 0 6
28229: PUSH
28230: LD_VAR 0 1
28234: ST_TO_ADDR
// s_arr := [ tmp ] ;
28235: LD_ADDR_VAR 0 7
28239: PUSH
28240: LD_VAR 0 6
28244: PUSH
28245: EMPTY
28246: LIST
28247: ST_TO_ADDR
// for i = 1 to pos - 1 do
28248: LD_ADDR_VAR 0 5
28252: PUSH
28253: DOUBLE
28254: LD_INT 1
28256: DEC
28257: ST_TO_ADDR
28258: LD_VAR 0 2
28262: PUSH
28263: LD_INT 1
28265: MINUS
28266: PUSH
28267: FOR_TO
28268: IFFALSE 28313
// begin tmp := tmp [ pos [ i ] ] ;
28270: LD_ADDR_VAR 0 6
28274: PUSH
28275: LD_VAR 0 6
28279: PUSH
28280: LD_VAR 0 2
28284: PUSH
28285: LD_VAR 0 5
28289: ARRAY
28290: ARRAY
28291: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28292: LD_ADDR_VAR 0 7
28296: PUSH
28297: LD_VAR 0 7
28301: PUSH
28302: LD_VAR 0 6
28306: PUSH
28307: EMPTY
28308: LIST
28309: ADD
28310: ST_TO_ADDR
// end ;
28311: GO 28267
28313: POP
28314: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28315: LD_ADDR_VAR 0 6
28319: PUSH
28320: LD_VAR 0 6
28324: PPUSH
28325: LD_VAR 0 2
28329: PUSH
28330: LD_VAR 0 2
28334: ARRAY
28335: PPUSH
28336: LD_VAR 0 3
28340: PPUSH
28341: CALL_OW 1
28345: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28346: LD_ADDR_VAR 0 7
28350: PUSH
28351: LD_VAR 0 7
28355: PPUSH
28356: LD_VAR 0 7
28360: PPUSH
28361: LD_VAR 0 6
28365: PPUSH
28366: CALL_OW 1
28370: ST_TO_ADDR
// for i = s_arr downto 2 do
28371: LD_ADDR_VAR 0 5
28375: PUSH
28376: DOUBLE
28377: LD_VAR 0 7
28381: INC
28382: ST_TO_ADDR
28383: LD_INT 2
28385: PUSH
28386: FOR_DOWNTO
28387: IFFALSE 28471
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28389: LD_ADDR_VAR 0 6
28393: PUSH
28394: LD_VAR 0 7
28398: PUSH
28399: LD_VAR 0 5
28403: PUSH
28404: LD_INT 1
28406: MINUS
28407: ARRAY
28408: PPUSH
28409: LD_VAR 0 2
28413: PUSH
28414: LD_VAR 0 5
28418: PUSH
28419: LD_INT 1
28421: MINUS
28422: ARRAY
28423: PPUSH
28424: LD_VAR 0 7
28428: PUSH
28429: LD_VAR 0 5
28433: ARRAY
28434: PPUSH
28435: CALL_OW 1
28439: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
28440: LD_ADDR_VAR 0 7
28444: PUSH
28445: LD_VAR 0 7
28449: PPUSH
28450: LD_VAR 0 5
28454: PUSH
28455: LD_INT 1
28457: MINUS
28458: PPUSH
28459: LD_VAR 0 6
28463: PPUSH
28464: CALL_OW 1
28468: ST_TO_ADDR
// end ;
28469: GO 28386
28471: POP
28472: POP
// result := s_arr [ 1 ] ;
28473: LD_ADDR_VAR 0 4
28477: PUSH
28478: LD_VAR 0 7
28482: PUSH
28483: LD_INT 1
28485: ARRAY
28486: ST_TO_ADDR
// end ; end ;
28487: LD_VAR 0 4
28491: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28492: LD_INT 0
28494: PPUSH
28495: PPUSH
// if not list then
28496: LD_VAR 0 1
28500: NOT
28501: IFFALSE 28505
// exit ;
28503: GO 28596
// i := list [ pos1 ] ;
28505: LD_ADDR_VAR 0 5
28509: PUSH
28510: LD_VAR 0 1
28514: PUSH
28515: LD_VAR 0 2
28519: ARRAY
28520: ST_TO_ADDR
// if not i then
28521: LD_VAR 0 5
28525: NOT
28526: IFFALSE 28530
// exit ;
28528: GO 28596
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
28530: LD_ADDR_VAR 0 1
28534: PUSH
28535: LD_VAR 0 1
28539: PPUSH
28540: LD_VAR 0 2
28544: PPUSH
28545: LD_VAR 0 1
28549: PUSH
28550: LD_VAR 0 3
28554: ARRAY
28555: PPUSH
28556: CALL_OW 1
28560: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28561: LD_ADDR_VAR 0 1
28565: PUSH
28566: LD_VAR 0 1
28570: PPUSH
28571: LD_VAR 0 3
28575: PPUSH
28576: LD_VAR 0 5
28580: PPUSH
28581: CALL_OW 1
28585: ST_TO_ADDR
// result := list ;
28586: LD_ADDR_VAR 0 4
28590: PUSH
28591: LD_VAR 0 1
28595: ST_TO_ADDR
// end ;
28596: LD_VAR 0 4
28600: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
28601: LD_INT 0
28603: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
28604: LD_ADDR_VAR 0 5
28608: PUSH
28609: LD_VAR 0 1
28613: PPUSH
28614: CALL_OW 250
28618: PPUSH
28619: LD_VAR 0 1
28623: PPUSH
28624: CALL_OW 251
28628: PPUSH
28629: LD_VAR 0 2
28633: PPUSH
28634: LD_VAR 0 3
28638: PPUSH
28639: LD_VAR 0 4
28643: PPUSH
28644: CALL 28654 0 5
28648: ST_TO_ADDR
// end ;
28649: LD_VAR 0 5
28653: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
28654: LD_INT 0
28656: PPUSH
28657: PPUSH
28658: PPUSH
28659: PPUSH
// if not list then
28660: LD_VAR 0 3
28664: NOT
28665: IFFALSE 28669
// exit ;
28667: GO 29057
// result := [ ] ;
28669: LD_ADDR_VAR 0 6
28673: PUSH
28674: EMPTY
28675: ST_TO_ADDR
// for i in list do
28676: LD_ADDR_VAR 0 7
28680: PUSH
28681: LD_VAR 0 3
28685: PUSH
28686: FOR_IN
28687: IFFALSE 28889
// begin tmp := GetDistUnitXY ( i , x , y ) ;
28689: LD_ADDR_VAR 0 9
28693: PUSH
28694: LD_VAR 0 7
28698: PPUSH
28699: LD_VAR 0 1
28703: PPUSH
28704: LD_VAR 0 2
28708: PPUSH
28709: CALL_OW 297
28713: ST_TO_ADDR
// if not result then
28714: LD_VAR 0 6
28718: NOT
28719: IFFALSE 28745
// result := [ [ i , tmp ] ] else
28721: LD_ADDR_VAR 0 6
28725: PUSH
28726: LD_VAR 0 7
28730: PUSH
28731: LD_VAR 0 9
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: EMPTY
28741: LIST
28742: ST_TO_ADDR
28743: GO 28887
// begin if result [ result ] [ 2 ] < tmp then
28745: LD_VAR 0 6
28749: PUSH
28750: LD_VAR 0 6
28754: ARRAY
28755: PUSH
28756: LD_INT 2
28758: ARRAY
28759: PUSH
28760: LD_VAR 0 9
28764: LESS
28765: IFFALSE 28807
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
28767: LD_ADDR_VAR 0 6
28771: PUSH
28772: LD_VAR 0 6
28776: PPUSH
28777: LD_VAR 0 6
28781: PUSH
28782: LD_INT 1
28784: PLUS
28785: PPUSH
28786: LD_VAR 0 7
28790: PUSH
28791: LD_VAR 0 9
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PPUSH
28800: CALL_OW 2
28804: ST_TO_ADDR
28805: GO 28887
// for j = 1 to result do
28807: LD_ADDR_VAR 0 8
28811: PUSH
28812: DOUBLE
28813: LD_INT 1
28815: DEC
28816: ST_TO_ADDR
28817: LD_VAR 0 6
28821: PUSH
28822: FOR_TO
28823: IFFALSE 28885
// begin if tmp < result [ j ] [ 2 ] then
28825: LD_VAR 0 9
28829: PUSH
28830: LD_VAR 0 6
28834: PUSH
28835: LD_VAR 0 8
28839: ARRAY
28840: PUSH
28841: LD_INT 2
28843: ARRAY
28844: LESS
28845: IFFALSE 28883
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28847: LD_ADDR_VAR 0 6
28851: PUSH
28852: LD_VAR 0 6
28856: PPUSH
28857: LD_VAR 0 8
28861: PPUSH
28862: LD_VAR 0 7
28866: PUSH
28867: LD_VAR 0 9
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PPUSH
28876: CALL_OW 2
28880: ST_TO_ADDR
// break ;
28881: GO 28885
// end ; end ;
28883: GO 28822
28885: POP
28886: POP
// end ; end ;
28887: GO 28686
28889: POP
28890: POP
// if result and not asc then
28891: LD_VAR 0 6
28895: PUSH
28896: LD_VAR 0 4
28900: NOT
28901: AND
28902: IFFALSE 28977
// begin tmp := result ;
28904: LD_ADDR_VAR 0 9
28908: PUSH
28909: LD_VAR 0 6
28913: ST_TO_ADDR
// for i = tmp downto 1 do
28914: LD_ADDR_VAR 0 7
28918: PUSH
28919: DOUBLE
28920: LD_VAR 0 9
28924: INC
28925: ST_TO_ADDR
28926: LD_INT 1
28928: PUSH
28929: FOR_DOWNTO
28930: IFFALSE 28975
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28932: LD_ADDR_VAR 0 6
28936: PUSH
28937: LD_VAR 0 6
28941: PPUSH
28942: LD_VAR 0 9
28946: PUSH
28947: LD_VAR 0 7
28951: MINUS
28952: PUSH
28953: LD_INT 1
28955: PLUS
28956: PPUSH
28957: LD_VAR 0 9
28961: PUSH
28962: LD_VAR 0 7
28966: ARRAY
28967: PPUSH
28968: CALL_OW 1
28972: ST_TO_ADDR
28973: GO 28929
28975: POP
28976: POP
// end ; tmp := [ ] ;
28977: LD_ADDR_VAR 0 9
28981: PUSH
28982: EMPTY
28983: ST_TO_ADDR
// if mode then
28984: LD_VAR 0 5
28988: IFFALSE 29057
// begin for i = 1 to result do
28990: LD_ADDR_VAR 0 7
28994: PUSH
28995: DOUBLE
28996: LD_INT 1
28998: DEC
28999: ST_TO_ADDR
29000: LD_VAR 0 6
29004: PUSH
29005: FOR_TO
29006: IFFALSE 29045
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29008: LD_ADDR_VAR 0 9
29012: PUSH
29013: LD_VAR 0 9
29017: PPUSH
29018: LD_VAR 0 7
29022: PPUSH
29023: LD_VAR 0 6
29027: PUSH
29028: LD_VAR 0 7
29032: ARRAY
29033: PUSH
29034: LD_INT 1
29036: ARRAY
29037: PPUSH
29038: CALL_OW 1
29042: ST_TO_ADDR
29043: GO 29005
29045: POP
29046: POP
// result := tmp ;
29047: LD_ADDR_VAR 0 6
29051: PUSH
29052: LD_VAR 0 9
29056: ST_TO_ADDR
// end ; end ;
29057: LD_VAR 0 6
29061: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29062: LD_INT 0
29064: PPUSH
29065: PPUSH
29066: PPUSH
29067: PPUSH
29068: PPUSH
29069: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29070: LD_ADDR_VAR 0 5
29074: PUSH
29075: LD_INT 0
29077: PUSH
29078: LD_INT 0
29080: PUSH
29081: LD_INT 0
29083: PUSH
29084: EMPTY
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: ST_TO_ADDR
// if not x or not y then
29092: LD_VAR 0 2
29096: NOT
29097: PUSH
29098: LD_VAR 0 3
29102: NOT
29103: OR
29104: IFFALSE 29108
// exit ;
29106: GO 30760
// if not range then
29108: LD_VAR 0 4
29112: NOT
29113: IFFALSE 29123
// range := 10 ;
29115: LD_ADDR_VAR 0 4
29119: PUSH
29120: LD_INT 10
29122: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29123: LD_ADDR_VAR 0 8
29127: PUSH
29128: LD_INT 81
29130: PUSH
29131: LD_VAR 0 1
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 92
29142: PUSH
29143: LD_VAR 0 2
29147: PUSH
29148: LD_VAR 0 3
29152: PUSH
29153: LD_VAR 0 4
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: PUSH
29164: LD_INT 3
29166: PUSH
29167: LD_INT 21
29169: PUSH
29170: LD_INT 3
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: LIST
29185: PPUSH
29186: CALL_OW 69
29190: ST_TO_ADDR
// if not tmp then
29191: LD_VAR 0 8
29195: NOT
29196: IFFALSE 29200
// exit ;
29198: GO 30760
// for i in tmp do
29200: LD_ADDR_VAR 0 6
29204: PUSH
29205: LD_VAR 0 8
29209: PUSH
29210: FOR_IN
29211: IFFALSE 30735
// begin points := [ 0 , 0 , 0 ] ;
29213: LD_ADDR_VAR 0 9
29217: PUSH
29218: LD_INT 0
29220: PUSH
29221: LD_INT 0
29223: PUSH
29224: LD_INT 0
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: LIST
29231: ST_TO_ADDR
// bpoints := 1 ;
29232: LD_ADDR_VAR 0 10
29236: PUSH
29237: LD_INT 1
29239: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29240: LD_VAR 0 6
29244: PPUSH
29245: CALL_OW 247
29249: PUSH
29250: LD_INT 1
29252: DOUBLE
29253: EQUAL
29254: IFTRUE 29258
29256: GO 29836
29258: POP
// begin if GetClass ( i ) = 1 then
29259: LD_VAR 0 6
29263: PPUSH
29264: CALL_OW 257
29268: PUSH
29269: LD_INT 1
29271: EQUAL
29272: IFFALSE 29293
// points := [ 10 , 5 , 3 ] ;
29274: LD_ADDR_VAR 0 9
29278: PUSH
29279: LD_INT 10
29281: PUSH
29282: LD_INT 5
29284: PUSH
29285: LD_INT 3
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: LIST
29292: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29293: LD_VAR 0 6
29297: PPUSH
29298: CALL_OW 257
29302: PUSH
29303: LD_INT 2
29305: PUSH
29306: LD_INT 3
29308: PUSH
29309: LD_INT 4
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: LIST
29316: IN
29317: IFFALSE 29338
// points := [ 3 , 2 , 1 ] ;
29319: LD_ADDR_VAR 0 9
29323: PUSH
29324: LD_INT 3
29326: PUSH
29327: LD_INT 2
29329: PUSH
29330: LD_INT 1
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: LIST
29337: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29338: LD_VAR 0 6
29342: PPUSH
29343: CALL_OW 257
29347: PUSH
29348: LD_INT 5
29350: EQUAL
29351: IFFALSE 29372
// points := [ 130 , 5 , 2 ] ;
29353: LD_ADDR_VAR 0 9
29357: PUSH
29358: LD_INT 130
29360: PUSH
29361: LD_INT 5
29363: PUSH
29364: LD_INT 2
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: LIST
29371: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29372: LD_VAR 0 6
29376: PPUSH
29377: CALL_OW 257
29381: PUSH
29382: LD_INT 8
29384: EQUAL
29385: IFFALSE 29406
// points := [ 35 , 35 , 30 ] ;
29387: LD_ADDR_VAR 0 9
29391: PUSH
29392: LD_INT 35
29394: PUSH
29395: LD_INT 35
29397: PUSH
29398: LD_INT 30
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: LIST
29405: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29406: LD_VAR 0 6
29410: PPUSH
29411: CALL_OW 257
29415: PUSH
29416: LD_INT 9
29418: EQUAL
29419: IFFALSE 29440
// points := [ 20 , 55 , 40 ] ;
29421: LD_ADDR_VAR 0 9
29425: PUSH
29426: LD_INT 20
29428: PUSH
29429: LD_INT 55
29431: PUSH
29432: LD_INT 40
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: LIST
29439: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29440: LD_VAR 0 6
29444: PPUSH
29445: CALL_OW 257
29449: PUSH
29450: LD_INT 12
29452: PUSH
29453: LD_INT 16
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: IN
29460: IFFALSE 29481
// points := [ 5 , 3 , 2 ] ;
29462: LD_ADDR_VAR 0 9
29466: PUSH
29467: LD_INT 5
29469: PUSH
29470: LD_INT 3
29472: PUSH
29473: LD_INT 2
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: LIST
29480: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29481: LD_VAR 0 6
29485: PPUSH
29486: CALL_OW 257
29490: PUSH
29491: LD_INT 17
29493: EQUAL
29494: IFFALSE 29515
// points := [ 100 , 50 , 75 ] ;
29496: LD_ADDR_VAR 0 9
29500: PUSH
29501: LD_INT 100
29503: PUSH
29504: LD_INT 50
29506: PUSH
29507: LD_INT 75
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: LIST
29514: ST_TO_ADDR
// if GetClass ( i ) = 15 then
29515: LD_VAR 0 6
29519: PPUSH
29520: CALL_OW 257
29524: PUSH
29525: LD_INT 15
29527: EQUAL
29528: IFFALSE 29549
// points := [ 10 , 5 , 3 ] ;
29530: LD_ADDR_VAR 0 9
29534: PUSH
29535: LD_INT 10
29537: PUSH
29538: LD_INT 5
29540: PUSH
29541: LD_INT 3
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: LIST
29548: ST_TO_ADDR
// if GetClass ( i ) = 14 then
29549: LD_VAR 0 6
29553: PPUSH
29554: CALL_OW 257
29558: PUSH
29559: LD_INT 14
29561: EQUAL
29562: IFFALSE 29583
// points := [ 10 , 0 , 0 ] ;
29564: LD_ADDR_VAR 0 9
29568: PUSH
29569: LD_INT 10
29571: PUSH
29572: LD_INT 0
29574: PUSH
29575: LD_INT 0
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: LIST
29582: ST_TO_ADDR
// if GetClass ( i ) = 11 then
29583: LD_VAR 0 6
29587: PPUSH
29588: CALL_OW 257
29592: PUSH
29593: LD_INT 11
29595: EQUAL
29596: IFFALSE 29617
// points := [ 30 , 10 , 5 ] ;
29598: LD_ADDR_VAR 0 9
29602: PUSH
29603: LD_INT 30
29605: PUSH
29606: LD_INT 10
29608: PUSH
29609: LD_INT 5
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: LIST
29616: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
29617: LD_VAR 0 1
29621: PPUSH
29622: LD_INT 5
29624: PPUSH
29625: CALL_OW 321
29629: PUSH
29630: LD_INT 2
29632: EQUAL
29633: IFFALSE 29650
// bpoints := bpoints * 1.8 ;
29635: LD_ADDR_VAR 0 10
29639: PUSH
29640: LD_VAR 0 10
29644: PUSH
29645: LD_REAL  1.80000000000000E+0000
29648: MUL
29649: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
29650: LD_VAR 0 6
29654: PPUSH
29655: CALL_OW 257
29659: PUSH
29660: LD_INT 1
29662: PUSH
29663: LD_INT 2
29665: PUSH
29666: LD_INT 3
29668: PUSH
29669: LD_INT 4
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: IN
29678: PUSH
29679: LD_VAR 0 1
29683: PPUSH
29684: LD_INT 51
29686: PPUSH
29687: CALL_OW 321
29691: PUSH
29692: LD_INT 2
29694: EQUAL
29695: AND
29696: IFFALSE 29713
// bpoints := bpoints * 1.2 ;
29698: LD_ADDR_VAR 0 10
29702: PUSH
29703: LD_VAR 0 10
29707: PUSH
29708: LD_REAL  1.20000000000000E+0000
29711: MUL
29712: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
29713: LD_VAR 0 6
29717: PPUSH
29718: CALL_OW 257
29722: PUSH
29723: LD_INT 5
29725: PUSH
29726: LD_INT 7
29728: PUSH
29729: LD_INT 9
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: LIST
29736: IN
29737: PUSH
29738: LD_VAR 0 1
29742: PPUSH
29743: LD_INT 52
29745: PPUSH
29746: CALL_OW 321
29750: PUSH
29751: LD_INT 2
29753: EQUAL
29754: AND
29755: IFFALSE 29772
// bpoints := bpoints * 1.5 ;
29757: LD_ADDR_VAR 0 10
29761: PUSH
29762: LD_VAR 0 10
29766: PUSH
29767: LD_REAL  1.50000000000000E+0000
29770: MUL
29771: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
29772: LD_VAR 0 1
29776: PPUSH
29777: LD_INT 66
29779: PPUSH
29780: CALL_OW 321
29784: PUSH
29785: LD_INT 2
29787: EQUAL
29788: IFFALSE 29805
// bpoints := bpoints * 1.1 ;
29790: LD_ADDR_VAR 0 10
29794: PUSH
29795: LD_VAR 0 10
29799: PUSH
29800: LD_REAL  1.10000000000000E+0000
29803: MUL
29804: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
29805: LD_ADDR_VAR 0 10
29809: PUSH
29810: LD_VAR 0 10
29814: PUSH
29815: LD_VAR 0 6
29819: PPUSH
29820: LD_INT 1
29822: PPUSH
29823: CALL_OW 259
29827: PUSH
29828: LD_REAL  1.15000000000000E+0000
29831: MUL
29832: MUL
29833: ST_TO_ADDR
// end ; unit_vehicle :
29834: GO 30664
29836: LD_INT 2
29838: DOUBLE
29839: EQUAL
29840: IFTRUE 29844
29842: GO 30652
29844: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29845: LD_VAR 0 6
29849: PPUSH
29850: CALL_OW 264
29854: PUSH
29855: LD_INT 2
29857: PUSH
29858: LD_INT 42
29860: PUSH
29861: LD_INT 24
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: LIST
29868: IN
29869: IFFALSE 29890
// points := [ 25 , 5 , 3 ] ;
29871: LD_ADDR_VAR 0 9
29875: PUSH
29876: LD_INT 25
29878: PUSH
29879: LD_INT 5
29881: PUSH
29882: LD_INT 3
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: LIST
29889: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29890: LD_VAR 0 6
29894: PPUSH
29895: CALL_OW 264
29899: PUSH
29900: LD_INT 4
29902: PUSH
29903: LD_INT 43
29905: PUSH
29906: LD_INT 25
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: LIST
29913: IN
29914: IFFALSE 29935
// points := [ 40 , 15 , 5 ] ;
29916: LD_ADDR_VAR 0 9
29920: PUSH
29921: LD_INT 40
29923: PUSH
29924: LD_INT 15
29926: PUSH
29927: LD_INT 5
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: LIST
29934: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29935: LD_VAR 0 6
29939: PPUSH
29940: CALL_OW 264
29944: PUSH
29945: LD_INT 3
29947: PUSH
29948: LD_INT 23
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: IN
29955: IFFALSE 29976
// points := [ 7 , 25 , 8 ] ;
29957: LD_ADDR_VAR 0 9
29961: PUSH
29962: LD_INT 7
29964: PUSH
29965: LD_INT 25
29967: PUSH
29968: LD_INT 8
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: LIST
29975: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29976: LD_VAR 0 6
29980: PPUSH
29981: CALL_OW 264
29985: PUSH
29986: LD_INT 5
29988: PUSH
29989: LD_INT 27
29991: PUSH
29992: LD_INT 44
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: LIST
29999: IN
30000: IFFALSE 30021
// points := [ 14 , 50 , 16 ] ;
30002: LD_ADDR_VAR 0 9
30006: PUSH
30007: LD_INT 14
30009: PUSH
30010: LD_INT 50
30012: PUSH
30013: LD_INT 16
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: LIST
30020: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30021: LD_VAR 0 6
30025: PPUSH
30026: CALL_OW 264
30030: PUSH
30031: LD_INT 6
30033: PUSH
30034: LD_INT 46
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: IN
30041: IFFALSE 30062
// points := [ 32 , 120 , 70 ] ;
30043: LD_ADDR_VAR 0 9
30047: PUSH
30048: LD_INT 32
30050: PUSH
30051: LD_INT 120
30053: PUSH
30054: LD_INT 70
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: LIST
30061: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
30062: LD_VAR 0 6
30066: PPUSH
30067: CALL_OW 264
30071: PUSH
30072: LD_INT 7
30074: PUSH
30075: LD_INT 28
30077: PUSH
30078: LD_INT 45
30080: PUSH
30081: LD_EXP 96
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: IN
30092: IFFALSE 30113
// points := [ 35 , 20 , 45 ] ;
30094: LD_ADDR_VAR 0 9
30098: PUSH
30099: LD_INT 35
30101: PUSH
30102: LD_INT 20
30104: PUSH
30105: LD_INT 45
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: LIST
30112: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30113: LD_VAR 0 6
30117: PPUSH
30118: CALL_OW 264
30122: PUSH
30123: LD_INT 47
30125: PUSH
30126: EMPTY
30127: LIST
30128: IN
30129: IFFALSE 30150
// points := [ 67 , 45 , 75 ] ;
30131: LD_ADDR_VAR 0 9
30135: PUSH
30136: LD_INT 67
30138: PUSH
30139: LD_INT 45
30141: PUSH
30142: LD_INT 75
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: LIST
30149: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30150: LD_VAR 0 6
30154: PPUSH
30155: CALL_OW 264
30159: PUSH
30160: LD_INT 26
30162: PUSH
30163: EMPTY
30164: LIST
30165: IN
30166: IFFALSE 30187
// points := [ 120 , 30 , 80 ] ;
30168: LD_ADDR_VAR 0 9
30172: PUSH
30173: LD_INT 120
30175: PUSH
30176: LD_INT 30
30178: PUSH
30179: LD_INT 80
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: LIST
30186: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30187: LD_VAR 0 6
30191: PPUSH
30192: CALL_OW 264
30196: PUSH
30197: LD_INT 22
30199: PUSH
30200: EMPTY
30201: LIST
30202: IN
30203: IFFALSE 30224
// points := [ 40 , 1 , 1 ] ;
30205: LD_ADDR_VAR 0 9
30209: PUSH
30210: LD_INT 40
30212: PUSH
30213: LD_INT 1
30215: PUSH
30216: LD_INT 1
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: LIST
30223: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30224: LD_VAR 0 6
30228: PPUSH
30229: CALL_OW 264
30233: PUSH
30234: LD_INT 29
30236: PUSH
30237: EMPTY
30238: LIST
30239: IN
30240: IFFALSE 30261
// points := [ 70 , 200 , 400 ] ;
30242: LD_ADDR_VAR 0 9
30246: PUSH
30247: LD_INT 70
30249: PUSH
30250: LD_INT 200
30252: PUSH
30253: LD_INT 400
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: LIST
30260: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30261: LD_VAR 0 6
30265: PPUSH
30266: CALL_OW 264
30270: PUSH
30271: LD_INT 14
30273: PUSH
30274: LD_INT 53
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: IN
30281: IFFALSE 30302
// points := [ 40 , 10 , 20 ] ;
30283: LD_ADDR_VAR 0 9
30287: PUSH
30288: LD_INT 40
30290: PUSH
30291: LD_INT 10
30293: PUSH
30294: LD_INT 20
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: LIST
30301: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30302: LD_VAR 0 6
30306: PPUSH
30307: CALL_OW 264
30311: PUSH
30312: LD_INT 9
30314: PUSH
30315: EMPTY
30316: LIST
30317: IN
30318: IFFALSE 30339
// points := [ 5 , 70 , 20 ] ;
30320: LD_ADDR_VAR 0 9
30324: PUSH
30325: LD_INT 5
30327: PUSH
30328: LD_INT 70
30330: PUSH
30331: LD_INT 20
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: LIST
30338: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30339: LD_VAR 0 6
30343: PPUSH
30344: CALL_OW 264
30348: PUSH
30349: LD_INT 10
30351: PUSH
30352: EMPTY
30353: LIST
30354: IN
30355: IFFALSE 30376
// points := [ 35 , 110 , 70 ] ;
30357: LD_ADDR_VAR 0 9
30361: PUSH
30362: LD_INT 35
30364: PUSH
30365: LD_INT 110
30367: PUSH
30368: LD_INT 70
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: LIST
30375: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30376: LD_VAR 0 6
30380: PPUSH
30381: CALL_OW 265
30385: PUSH
30386: LD_INT 25
30388: EQUAL
30389: IFFALSE 30410
// points := [ 80 , 65 , 100 ] ;
30391: LD_ADDR_VAR 0 9
30395: PUSH
30396: LD_INT 80
30398: PUSH
30399: LD_INT 65
30401: PUSH
30402: LD_INT 100
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: LIST
30409: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30410: LD_VAR 0 6
30414: PPUSH
30415: CALL_OW 263
30419: PUSH
30420: LD_INT 1
30422: EQUAL
30423: IFFALSE 30458
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30425: LD_ADDR_VAR 0 10
30429: PUSH
30430: LD_VAR 0 10
30434: PUSH
30435: LD_VAR 0 6
30439: PPUSH
30440: CALL_OW 311
30444: PPUSH
30445: LD_INT 3
30447: PPUSH
30448: CALL_OW 259
30452: PUSH
30453: LD_INT 4
30455: MUL
30456: MUL
30457: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30458: LD_VAR 0 6
30462: PPUSH
30463: CALL_OW 263
30467: PUSH
30468: LD_INT 2
30470: EQUAL
30471: IFFALSE 30522
// begin j := IsControledBy ( i ) ;
30473: LD_ADDR_VAR 0 7
30477: PUSH
30478: LD_VAR 0 6
30482: PPUSH
30483: CALL_OW 312
30487: ST_TO_ADDR
// if j then
30488: LD_VAR 0 7
30492: IFFALSE 30522
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30494: LD_ADDR_VAR 0 10
30498: PUSH
30499: LD_VAR 0 10
30503: PUSH
30504: LD_VAR 0 7
30508: PPUSH
30509: LD_INT 3
30511: PPUSH
30512: CALL_OW 259
30516: PUSH
30517: LD_INT 3
30519: MUL
30520: MUL
30521: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
30522: LD_VAR 0 6
30526: PPUSH
30527: CALL_OW 264
30531: PUSH
30532: LD_INT 5
30534: PUSH
30535: LD_INT 6
30537: PUSH
30538: LD_INT 46
30540: PUSH
30541: LD_INT 44
30543: PUSH
30544: LD_INT 47
30546: PUSH
30547: LD_INT 45
30549: PUSH
30550: LD_INT 28
30552: PUSH
30553: LD_INT 7
30555: PUSH
30556: LD_INT 27
30558: PUSH
30559: LD_INT 29
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: IN
30574: PUSH
30575: LD_VAR 0 1
30579: PPUSH
30580: LD_INT 52
30582: PPUSH
30583: CALL_OW 321
30587: PUSH
30588: LD_INT 2
30590: EQUAL
30591: AND
30592: IFFALSE 30609
// bpoints := bpoints * 1.2 ;
30594: LD_ADDR_VAR 0 10
30598: PUSH
30599: LD_VAR 0 10
30603: PUSH
30604: LD_REAL  1.20000000000000E+0000
30607: MUL
30608: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
30609: LD_VAR 0 6
30613: PPUSH
30614: CALL_OW 264
30618: PUSH
30619: LD_INT 6
30621: PUSH
30622: LD_INT 46
30624: PUSH
30625: LD_INT 47
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: LIST
30632: IN
30633: IFFALSE 30650
// bpoints := bpoints * 1.2 ;
30635: LD_ADDR_VAR 0 10
30639: PUSH
30640: LD_VAR 0 10
30644: PUSH
30645: LD_REAL  1.20000000000000E+0000
30648: MUL
30649: ST_TO_ADDR
// end ; unit_building :
30650: GO 30664
30652: LD_INT 3
30654: DOUBLE
30655: EQUAL
30656: IFTRUE 30660
30658: GO 30663
30660: POP
// ; end ;
30661: GO 30664
30663: POP
// for j = 1 to 3 do
30664: LD_ADDR_VAR 0 7
30668: PUSH
30669: DOUBLE
30670: LD_INT 1
30672: DEC
30673: ST_TO_ADDR
30674: LD_INT 3
30676: PUSH
30677: FOR_TO
30678: IFFALSE 30731
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
30680: LD_ADDR_VAR 0 5
30684: PUSH
30685: LD_VAR 0 5
30689: PPUSH
30690: LD_VAR 0 7
30694: PPUSH
30695: LD_VAR 0 5
30699: PUSH
30700: LD_VAR 0 7
30704: ARRAY
30705: PUSH
30706: LD_VAR 0 9
30710: PUSH
30711: LD_VAR 0 7
30715: ARRAY
30716: PUSH
30717: LD_VAR 0 10
30721: MUL
30722: PLUS
30723: PPUSH
30724: CALL_OW 1
30728: ST_TO_ADDR
30729: GO 30677
30731: POP
30732: POP
// end ;
30733: GO 29210
30735: POP
30736: POP
// result := Replace ( result , 4 , tmp ) ;
30737: LD_ADDR_VAR 0 5
30741: PUSH
30742: LD_VAR 0 5
30746: PPUSH
30747: LD_INT 4
30749: PPUSH
30750: LD_VAR 0 8
30754: PPUSH
30755: CALL_OW 1
30759: ST_TO_ADDR
// end ;
30760: LD_VAR 0 5
30764: RET
// export function DangerAtRange ( unit , range ) ; begin
30765: LD_INT 0
30767: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
30768: LD_ADDR_VAR 0 3
30772: PUSH
30773: LD_VAR 0 1
30777: PPUSH
30778: CALL_OW 255
30782: PPUSH
30783: LD_VAR 0 1
30787: PPUSH
30788: CALL_OW 250
30792: PPUSH
30793: LD_VAR 0 1
30797: PPUSH
30798: CALL_OW 251
30802: PPUSH
30803: LD_VAR 0 2
30807: PPUSH
30808: CALL 29062 0 4
30812: ST_TO_ADDR
// end ;
30813: LD_VAR 0 3
30817: RET
// export function DangerInArea ( side , area ) ; begin
30818: LD_INT 0
30820: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
30821: LD_ADDR_VAR 0 3
30825: PUSH
30826: LD_VAR 0 2
30830: PPUSH
30831: LD_INT 81
30833: PUSH
30834: LD_VAR 0 1
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PPUSH
30843: CALL_OW 70
30847: ST_TO_ADDR
// end ;
30848: LD_VAR 0 3
30852: RET
// export function IsExtension ( b ) ; begin
30853: LD_INT 0
30855: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30856: LD_ADDR_VAR 0 2
30860: PUSH
30861: LD_VAR 0 1
30865: PUSH
30866: LD_INT 23
30868: PUSH
30869: LD_INT 20
30871: PUSH
30872: LD_INT 22
30874: PUSH
30875: LD_INT 17
30877: PUSH
30878: LD_INT 24
30880: PUSH
30881: LD_INT 21
30883: PUSH
30884: LD_INT 19
30886: PUSH
30887: LD_INT 16
30889: PUSH
30890: LD_INT 25
30892: PUSH
30893: LD_INT 18
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: IN
30908: ST_TO_ADDR
// end ;
30909: LD_VAR 0 2
30913: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
30914: LD_INT 0
30916: PPUSH
30917: PPUSH
30918: PPUSH
// result := [ ] ;
30919: LD_ADDR_VAR 0 4
30923: PUSH
30924: EMPTY
30925: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30926: LD_ADDR_VAR 0 5
30930: PUSH
30931: LD_VAR 0 2
30935: PPUSH
30936: LD_INT 21
30938: PUSH
30939: LD_INT 3
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: PPUSH
30946: CALL_OW 70
30950: ST_TO_ADDR
// if not tmp then
30951: LD_VAR 0 5
30955: NOT
30956: IFFALSE 30960
// exit ;
30958: GO 31024
// if checkLink then
30960: LD_VAR 0 3
30964: IFFALSE 31014
// begin for i in tmp do
30966: LD_ADDR_VAR 0 6
30970: PUSH
30971: LD_VAR 0 5
30975: PUSH
30976: FOR_IN
30977: IFFALSE 31012
// if GetBase ( i ) <> base then
30979: LD_VAR 0 6
30983: PPUSH
30984: CALL_OW 274
30988: PUSH
30989: LD_VAR 0 1
30993: NONEQUAL
30994: IFFALSE 31010
// ComLinkToBase ( base , i ) ;
30996: LD_VAR 0 1
31000: PPUSH
31001: LD_VAR 0 6
31005: PPUSH
31006: CALL_OW 169
31010: GO 30976
31012: POP
31013: POP
// end ; result := tmp ;
31014: LD_ADDR_VAR 0 4
31018: PUSH
31019: LD_VAR 0 5
31023: ST_TO_ADDR
// end ;
31024: LD_VAR 0 4
31028: RET
// export function ComComplete ( units , b ) ; var i ; begin
31029: LD_INT 0
31031: PPUSH
31032: PPUSH
// if not units then
31033: LD_VAR 0 1
31037: NOT
31038: IFFALSE 31042
// exit ;
31040: GO 31132
// for i in units do
31042: LD_ADDR_VAR 0 4
31046: PUSH
31047: LD_VAR 0 1
31051: PUSH
31052: FOR_IN
31053: IFFALSE 31130
// if BuildingStatus ( b ) = bs_build then
31055: LD_VAR 0 2
31059: PPUSH
31060: CALL_OW 461
31064: PUSH
31065: LD_INT 1
31067: EQUAL
31068: IFFALSE 31128
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31070: LD_VAR 0 4
31074: PPUSH
31075: LD_STRING h
31077: PUSH
31078: LD_VAR 0 2
31082: PPUSH
31083: CALL_OW 250
31087: PUSH
31088: LD_VAR 0 2
31092: PPUSH
31093: CALL_OW 251
31097: PUSH
31098: LD_VAR 0 2
31102: PUSH
31103: LD_INT 0
31105: PUSH
31106: LD_INT 0
31108: PUSH
31109: LD_INT 0
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: PUSH
31121: EMPTY
31122: LIST
31123: PPUSH
31124: CALL_OW 446
31128: GO 31052
31130: POP
31131: POP
// end ;
31132: LD_VAR 0 3
31136: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31137: LD_INT 0
31139: PPUSH
31140: PPUSH
31141: PPUSH
31142: PPUSH
31143: PPUSH
31144: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
31145: LD_VAR 0 1
31149: NOT
31150: PUSH
31151: LD_VAR 0 1
31155: PPUSH
31156: CALL_OW 263
31160: PUSH
31161: LD_INT 2
31163: NONEQUAL
31164: OR
31165: IFFALSE 31169
// exit ;
31167: GO 31485
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31169: LD_ADDR_VAR 0 6
31173: PUSH
31174: LD_INT 22
31176: PUSH
31177: LD_VAR 0 1
31181: PPUSH
31182: CALL_OW 255
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: LD_INT 2
31193: PUSH
31194: LD_INT 30
31196: PUSH
31197: LD_INT 36
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 34
31206: PUSH
31207: LD_INT 31
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: LIST
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PPUSH
31223: CALL_OW 69
31227: ST_TO_ADDR
// if not tmp then
31228: LD_VAR 0 6
31232: NOT
31233: IFFALSE 31237
// exit ;
31235: GO 31485
// result := [ ] ;
31237: LD_ADDR_VAR 0 2
31241: PUSH
31242: EMPTY
31243: ST_TO_ADDR
// for i in tmp do
31244: LD_ADDR_VAR 0 3
31248: PUSH
31249: LD_VAR 0 6
31253: PUSH
31254: FOR_IN
31255: IFFALSE 31326
// begin t := UnitsInside ( i ) ;
31257: LD_ADDR_VAR 0 4
31261: PUSH
31262: LD_VAR 0 3
31266: PPUSH
31267: CALL_OW 313
31271: ST_TO_ADDR
// if t then
31272: LD_VAR 0 4
31276: IFFALSE 31324
// for j in t do
31278: LD_ADDR_VAR 0 7
31282: PUSH
31283: LD_VAR 0 4
31287: PUSH
31288: FOR_IN
31289: IFFALSE 31322
// result := Replace ( result , result + 1 , j ) ;
31291: LD_ADDR_VAR 0 2
31295: PUSH
31296: LD_VAR 0 2
31300: PPUSH
31301: LD_VAR 0 2
31305: PUSH
31306: LD_INT 1
31308: PLUS
31309: PPUSH
31310: LD_VAR 0 7
31314: PPUSH
31315: CALL_OW 1
31319: ST_TO_ADDR
31320: GO 31288
31322: POP
31323: POP
// end ;
31324: GO 31254
31326: POP
31327: POP
// if not result then
31328: LD_VAR 0 2
31332: NOT
31333: IFFALSE 31337
// exit ;
31335: GO 31485
// mech := result [ 1 ] ;
31337: LD_ADDR_VAR 0 5
31341: PUSH
31342: LD_VAR 0 2
31346: PUSH
31347: LD_INT 1
31349: ARRAY
31350: ST_TO_ADDR
// if result > 1 then
31351: LD_VAR 0 2
31355: PUSH
31356: LD_INT 1
31358: GREATER
31359: IFFALSE 31471
// begin for i = 2 to result do
31361: LD_ADDR_VAR 0 3
31365: PUSH
31366: DOUBLE
31367: LD_INT 2
31369: DEC
31370: ST_TO_ADDR
31371: LD_VAR 0 2
31375: PUSH
31376: FOR_TO
31377: IFFALSE 31469
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31379: LD_ADDR_VAR 0 4
31383: PUSH
31384: LD_VAR 0 2
31388: PUSH
31389: LD_VAR 0 3
31393: ARRAY
31394: PPUSH
31395: LD_INT 3
31397: PPUSH
31398: CALL_OW 259
31402: PUSH
31403: LD_VAR 0 2
31407: PUSH
31408: LD_VAR 0 3
31412: ARRAY
31413: PPUSH
31414: CALL_OW 432
31418: MINUS
31419: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31420: LD_VAR 0 4
31424: PUSH
31425: LD_VAR 0 5
31429: PPUSH
31430: LD_INT 3
31432: PPUSH
31433: CALL_OW 259
31437: PUSH
31438: LD_VAR 0 5
31442: PPUSH
31443: CALL_OW 432
31447: MINUS
31448: GREATEREQUAL
31449: IFFALSE 31467
// mech := result [ i ] ;
31451: LD_ADDR_VAR 0 5
31455: PUSH
31456: LD_VAR 0 2
31460: PUSH
31461: LD_VAR 0 3
31465: ARRAY
31466: ST_TO_ADDR
// end ;
31467: GO 31376
31469: POP
31470: POP
// end ; ComLinkTo ( vehicle , mech ) ;
31471: LD_VAR 0 1
31475: PPUSH
31476: LD_VAR 0 5
31480: PPUSH
31481: CALL_OW 135
// end ;
31485: LD_VAR 0 2
31489: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31490: LD_INT 0
31492: PPUSH
31493: PPUSH
31494: PPUSH
31495: PPUSH
31496: PPUSH
31497: PPUSH
31498: PPUSH
31499: PPUSH
31500: PPUSH
31501: PPUSH
31502: PPUSH
31503: PPUSH
31504: PPUSH
// result := [ ] ;
31505: LD_ADDR_VAR 0 7
31509: PUSH
31510: EMPTY
31511: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31512: LD_VAR 0 1
31516: PPUSH
31517: CALL_OW 266
31521: PUSH
31522: LD_INT 0
31524: PUSH
31525: LD_INT 1
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: IN
31532: NOT
31533: IFFALSE 31537
// exit ;
31535: GO 33171
// if name then
31537: LD_VAR 0 3
31541: IFFALSE 31557
// SetBName ( base_dep , name ) ;
31543: LD_VAR 0 1
31547: PPUSH
31548: LD_VAR 0 3
31552: PPUSH
31553: CALL_OW 500
// base := GetBase ( base_dep ) ;
31557: LD_ADDR_VAR 0 15
31561: PUSH
31562: LD_VAR 0 1
31566: PPUSH
31567: CALL_OW 274
31571: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
31572: LD_ADDR_VAR 0 16
31576: PUSH
31577: LD_VAR 0 1
31581: PPUSH
31582: CALL_OW 255
31586: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
31587: LD_ADDR_VAR 0 17
31591: PUSH
31592: LD_VAR 0 1
31596: PPUSH
31597: CALL_OW 248
31601: ST_TO_ADDR
// if sources then
31602: LD_VAR 0 5
31606: IFFALSE 31653
// for i = 1 to 3 do
31608: LD_ADDR_VAR 0 8
31612: PUSH
31613: DOUBLE
31614: LD_INT 1
31616: DEC
31617: ST_TO_ADDR
31618: LD_INT 3
31620: PUSH
31621: FOR_TO
31622: IFFALSE 31651
// AddResourceType ( base , i , sources [ i ] ) ;
31624: LD_VAR 0 15
31628: PPUSH
31629: LD_VAR 0 8
31633: PPUSH
31634: LD_VAR 0 5
31638: PUSH
31639: LD_VAR 0 8
31643: ARRAY
31644: PPUSH
31645: CALL_OW 276
31649: GO 31621
31651: POP
31652: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
31653: LD_ADDR_VAR 0 18
31657: PUSH
31658: LD_VAR 0 15
31662: PPUSH
31663: LD_VAR 0 2
31667: PPUSH
31668: LD_INT 1
31670: PPUSH
31671: CALL 30914 0 3
31675: ST_TO_ADDR
// InitHc ;
31676: CALL_OW 19
// InitUc ;
31680: CALL_OW 18
// uc_side := side ;
31684: LD_ADDR_OWVAR 20
31688: PUSH
31689: LD_VAR 0 16
31693: ST_TO_ADDR
// uc_nation := nation ;
31694: LD_ADDR_OWVAR 21
31698: PUSH
31699: LD_VAR 0 17
31703: ST_TO_ADDR
// if buildings then
31704: LD_VAR 0 18
31708: IFFALSE 33030
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
31710: LD_ADDR_VAR 0 19
31714: PUSH
31715: LD_VAR 0 18
31719: PPUSH
31720: LD_INT 2
31722: PUSH
31723: LD_INT 30
31725: PUSH
31726: LD_INT 29
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: LD_INT 30
31735: PUSH
31736: LD_INT 30
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: LIST
31747: PPUSH
31748: CALL_OW 72
31752: ST_TO_ADDR
// if tmp then
31753: LD_VAR 0 19
31757: IFFALSE 31805
// for i in tmp do
31759: LD_ADDR_VAR 0 8
31763: PUSH
31764: LD_VAR 0 19
31768: PUSH
31769: FOR_IN
31770: IFFALSE 31803
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
31772: LD_VAR 0 8
31776: PPUSH
31777: CALL_OW 250
31781: PPUSH
31782: LD_VAR 0 8
31786: PPUSH
31787: CALL_OW 251
31791: PPUSH
31792: LD_VAR 0 16
31796: PPUSH
31797: CALL_OW 441
31801: GO 31769
31803: POP
31804: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
31805: LD_VAR 0 18
31809: PPUSH
31810: LD_INT 2
31812: PUSH
31813: LD_INT 30
31815: PUSH
31816: LD_INT 32
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: LD_INT 30
31825: PUSH
31826: LD_INT 33
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: LIST
31837: PPUSH
31838: CALL_OW 72
31842: IFFALSE 31930
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
31844: LD_ADDR_VAR 0 8
31848: PUSH
31849: LD_VAR 0 18
31853: PPUSH
31854: LD_INT 2
31856: PUSH
31857: LD_INT 30
31859: PUSH
31860: LD_INT 32
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 30
31869: PUSH
31870: LD_INT 33
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: LIST
31881: PPUSH
31882: CALL_OW 72
31886: PUSH
31887: FOR_IN
31888: IFFALSE 31928
// begin if not GetBWeapon ( i ) then
31890: LD_VAR 0 8
31894: PPUSH
31895: CALL_OW 269
31899: NOT
31900: IFFALSE 31926
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31902: LD_VAR 0 8
31906: PPUSH
31907: LD_VAR 0 8
31911: PPUSH
31912: LD_VAR 0 2
31916: PPUSH
31917: CALL 33176 0 2
31921: PPUSH
31922: CALL_OW 431
// end ;
31926: GO 31887
31928: POP
31929: POP
// end ; for i = 1 to personel do
31930: LD_ADDR_VAR 0 8
31934: PUSH
31935: DOUBLE
31936: LD_INT 1
31938: DEC
31939: ST_TO_ADDR
31940: LD_VAR 0 6
31944: PUSH
31945: FOR_TO
31946: IFFALSE 33010
// begin if i > 4 then
31948: LD_VAR 0 8
31952: PUSH
31953: LD_INT 4
31955: GREATER
31956: IFFALSE 31960
// break ;
31958: GO 33010
// case i of 1 :
31960: LD_VAR 0 8
31964: PUSH
31965: LD_INT 1
31967: DOUBLE
31968: EQUAL
31969: IFTRUE 31973
31971: GO 32053
31973: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31974: LD_ADDR_VAR 0 12
31978: PUSH
31979: LD_VAR 0 18
31983: PPUSH
31984: LD_INT 22
31986: PUSH
31987: LD_VAR 0 16
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 58
31998: PUSH
31999: EMPTY
32000: LIST
32001: PUSH
32002: LD_INT 2
32004: PUSH
32005: LD_INT 30
32007: PUSH
32008: LD_INT 32
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 30
32017: PUSH
32018: LD_INT 4
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 30
32027: PUSH
32028: LD_INT 5
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: LIST
32045: PPUSH
32046: CALL_OW 72
32050: ST_TO_ADDR
32051: GO 32275
32053: LD_INT 2
32055: DOUBLE
32056: EQUAL
32057: IFTRUE 32061
32059: GO 32123
32061: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32062: LD_ADDR_VAR 0 12
32066: PUSH
32067: LD_VAR 0 18
32071: PPUSH
32072: LD_INT 22
32074: PUSH
32075: LD_VAR 0 16
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 2
32086: PUSH
32087: LD_INT 30
32089: PUSH
32090: LD_INT 0
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 30
32099: PUSH
32100: LD_INT 1
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: LIST
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PPUSH
32116: CALL_OW 72
32120: ST_TO_ADDR
32121: GO 32275
32123: LD_INT 3
32125: DOUBLE
32126: EQUAL
32127: IFTRUE 32131
32129: GO 32193
32131: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32132: LD_ADDR_VAR 0 12
32136: PUSH
32137: LD_VAR 0 18
32141: PPUSH
32142: LD_INT 22
32144: PUSH
32145: LD_VAR 0 16
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 2
32156: PUSH
32157: LD_INT 30
32159: PUSH
32160: LD_INT 2
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: LD_INT 30
32169: PUSH
32170: LD_INT 3
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: LIST
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PPUSH
32186: CALL_OW 72
32190: ST_TO_ADDR
32191: GO 32275
32193: LD_INT 4
32195: DOUBLE
32196: EQUAL
32197: IFTRUE 32201
32199: GO 32274
32201: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32202: LD_ADDR_VAR 0 12
32206: PUSH
32207: LD_VAR 0 18
32211: PPUSH
32212: LD_INT 22
32214: PUSH
32215: LD_VAR 0 16
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 2
32226: PUSH
32227: LD_INT 30
32229: PUSH
32230: LD_INT 6
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 30
32239: PUSH
32240: LD_INT 7
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 30
32249: PUSH
32250: LD_INT 8
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PPUSH
32267: CALL_OW 72
32271: ST_TO_ADDR
32272: GO 32275
32274: POP
// if i = 1 then
32275: LD_VAR 0 8
32279: PUSH
32280: LD_INT 1
32282: EQUAL
32283: IFFALSE 32394
// begin tmp := [ ] ;
32285: LD_ADDR_VAR 0 19
32289: PUSH
32290: EMPTY
32291: ST_TO_ADDR
// for j in f do
32292: LD_ADDR_VAR 0 9
32296: PUSH
32297: LD_VAR 0 12
32301: PUSH
32302: FOR_IN
32303: IFFALSE 32376
// if GetBType ( j ) = b_bunker then
32305: LD_VAR 0 9
32309: PPUSH
32310: CALL_OW 266
32314: PUSH
32315: LD_INT 32
32317: EQUAL
32318: IFFALSE 32345
// tmp := Insert ( tmp , 1 , j ) else
32320: LD_ADDR_VAR 0 19
32324: PUSH
32325: LD_VAR 0 19
32329: PPUSH
32330: LD_INT 1
32332: PPUSH
32333: LD_VAR 0 9
32337: PPUSH
32338: CALL_OW 2
32342: ST_TO_ADDR
32343: GO 32374
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32345: LD_ADDR_VAR 0 19
32349: PUSH
32350: LD_VAR 0 19
32354: PPUSH
32355: LD_VAR 0 19
32359: PUSH
32360: LD_INT 1
32362: PLUS
32363: PPUSH
32364: LD_VAR 0 9
32368: PPUSH
32369: CALL_OW 2
32373: ST_TO_ADDR
32374: GO 32302
32376: POP
32377: POP
// if tmp then
32378: LD_VAR 0 19
32382: IFFALSE 32394
// f := tmp ;
32384: LD_ADDR_VAR 0 12
32388: PUSH
32389: LD_VAR 0 19
32393: ST_TO_ADDR
// end ; x := personel [ i ] ;
32394: LD_ADDR_VAR 0 13
32398: PUSH
32399: LD_VAR 0 6
32403: PUSH
32404: LD_VAR 0 8
32408: ARRAY
32409: ST_TO_ADDR
// if x = - 1 then
32410: LD_VAR 0 13
32414: PUSH
32415: LD_INT 1
32417: NEG
32418: EQUAL
32419: IFFALSE 32628
// begin for j in f do
32421: LD_ADDR_VAR 0 9
32425: PUSH
32426: LD_VAR 0 12
32430: PUSH
32431: FOR_IN
32432: IFFALSE 32624
// repeat InitHc ;
32434: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32438: LD_VAR 0 9
32442: PPUSH
32443: CALL_OW 266
32447: PUSH
32448: LD_INT 5
32450: EQUAL
32451: IFFALSE 32521
// begin if UnitsInside ( j ) < 3 then
32453: LD_VAR 0 9
32457: PPUSH
32458: CALL_OW 313
32462: PUSH
32463: LD_INT 3
32465: LESS
32466: IFFALSE 32502
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32468: LD_INT 0
32470: PPUSH
32471: LD_INT 5
32473: PUSH
32474: LD_INT 8
32476: PUSH
32477: LD_INT 9
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: LIST
32484: PUSH
32485: LD_VAR 0 17
32489: ARRAY
32490: PPUSH
32491: LD_VAR 0 4
32495: PPUSH
32496: CALL_OW 380
32500: GO 32519
// PrepareHuman ( false , i , skill ) ;
32502: LD_INT 0
32504: PPUSH
32505: LD_VAR 0 8
32509: PPUSH
32510: LD_VAR 0 4
32514: PPUSH
32515: CALL_OW 380
// end else
32519: GO 32538
// PrepareHuman ( false , i , skill ) ;
32521: LD_INT 0
32523: PPUSH
32524: LD_VAR 0 8
32528: PPUSH
32529: LD_VAR 0 4
32533: PPUSH
32534: CALL_OW 380
// un := CreateHuman ;
32538: LD_ADDR_VAR 0 14
32542: PUSH
32543: CALL_OW 44
32547: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32548: LD_ADDR_VAR 0 7
32552: PUSH
32553: LD_VAR 0 7
32557: PPUSH
32558: LD_INT 1
32560: PPUSH
32561: LD_VAR 0 14
32565: PPUSH
32566: CALL_OW 2
32570: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
32571: LD_VAR 0 14
32575: PPUSH
32576: LD_VAR 0 9
32580: PPUSH
32581: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
32585: LD_VAR 0 9
32589: PPUSH
32590: CALL_OW 313
32594: PUSH
32595: LD_INT 6
32597: EQUAL
32598: PUSH
32599: LD_VAR 0 9
32603: PPUSH
32604: CALL_OW 266
32608: PUSH
32609: LD_INT 32
32611: PUSH
32612: LD_INT 31
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: IN
32619: OR
32620: IFFALSE 32434
32622: GO 32431
32624: POP
32625: POP
// end else
32626: GO 33008
// for j = 1 to x do
32628: LD_ADDR_VAR 0 9
32632: PUSH
32633: DOUBLE
32634: LD_INT 1
32636: DEC
32637: ST_TO_ADDR
32638: LD_VAR 0 13
32642: PUSH
32643: FOR_TO
32644: IFFALSE 33006
// begin InitHc ;
32646: CALL_OW 19
// if not f then
32650: LD_VAR 0 12
32654: NOT
32655: IFFALSE 32744
// begin PrepareHuman ( false , i , skill ) ;
32657: LD_INT 0
32659: PPUSH
32660: LD_VAR 0 8
32664: PPUSH
32665: LD_VAR 0 4
32669: PPUSH
32670: CALL_OW 380
// un := CreateHuman ;
32674: LD_ADDR_VAR 0 14
32678: PUSH
32679: CALL_OW 44
32683: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32684: LD_ADDR_VAR 0 7
32688: PUSH
32689: LD_VAR 0 7
32693: PPUSH
32694: LD_INT 1
32696: PPUSH
32697: LD_VAR 0 14
32701: PPUSH
32702: CALL_OW 2
32706: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32707: LD_VAR 0 14
32711: PPUSH
32712: LD_VAR 0 1
32716: PPUSH
32717: CALL_OW 250
32721: PPUSH
32722: LD_VAR 0 1
32726: PPUSH
32727: CALL_OW 251
32731: PPUSH
32732: LD_INT 10
32734: PPUSH
32735: LD_INT 0
32737: PPUSH
32738: CALL_OW 50
// continue ;
32742: GO 32643
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
32744: LD_VAR 0 12
32748: PUSH
32749: LD_INT 1
32751: ARRAY
32752: PPUSH
32753: CALL_OW 313
32757: PUSH
32758: LD_VAR 0 12
32762: PUSH
32763: LD_INT 1
32765: ARRAY
32766: PPUSH
32767: CALL_OW 266
32771: PUSH
32772: LD_INT 32
32774: PUSH
32775: LD_INT 31
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: IN
32782: AND
32783: PUSH
32784: LD_VAR 0 12
32788: PUSH
32789: LD_INT 1
32791: ARRAY
32792: PPUSH
32793: CALL_OW 313
32797: PUSH
32798: LD_INT 6
32800: EQUAL
32801: OR
32802: IFFALSE 32822
// f := Delete ( f , 1 ) ;
32804: LD_ADDR_VAR 0 12
32808: PUSH
32809: LD_VAR 0 12
32813: PPUSH
32814: LD_INT 1
32816: PPUSH
32817: CALL_OW 3
32821: ST_TO_ADDR
// if not f then
32822: LD_VAR 0 12
32826: NOT
32827: IFFALSE 32845
// begin x := x + 2 ;
32829: LD_ADDR_VAR 0 13
32833: PUSH
32834: LD_VAR 0 13
32838: PUSH
32839: LD_INT 2
32841: PLUS
32842: ST_TO_ADDR
// continue ;
32843: GO 32643
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
32845: LD_VAR 0 12
32849: PUSH
32850: LD_INT 1
32852: ARRAY
32853: PPUSH
32854: CALL_OW 266
32858: PUSH
32859: LD_INT 5
32861: EQUAL
32862: IFFALSE 32936
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32864: LD_VAR 0 12
32868: PUSH
32869: LD_INT 1
32871: ARRAY
32872: PPUSH
32873: CALL_OW 313
32877: PUSH
32878: LD_INT 3
32880: LESS
32881: IFFALSE 32917
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32883: LD_INT 0
32885: PPUSH
32886: LD_INT 5
32888: PUSH
32889: LD_INT 8
32891: PUSH
32892: LD_INT 9
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: LIST
32899: PUSH
32900: LD_VAR 0 17
32904: ARRAY
32905: PPUSH
32906: LD_VAR 0 4
32910: PPUSH
32911: CALL_OW 380
32915: GO 32934
// PrepareHuman ( false , i , skill ) ;
32917: LD_INT 0
32919: PPUSH
32920: LD_VAR 0 8
32924: PPUSH
32925: LD_VAR 0 4
32929: PPUSH
32930: CALL_OW 380
// end else
32934: GO 32953
// PrepareHuman ( false , i , skill ) ;
32936: LD_INT 0
32938: PPUSH
32939: LD_VAR 0 8
32943: PPUSH
32944: LD_VAR 0 4
32948: PPUSH
32949: CALL_OW 380
// un := CreateHuman ;
32953: LD_ADDR_VAR 0 14
32957: PUSH
32958: CALL_OW 44
32962: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32963: LD_ADDR_VAR 0 7
32967: PUSH
32968: LD_VAR 0 7
32972: PPUSH
32973: LD_INT 1
32975: PPUSH
32976: LD_VAR 0 14
32980: PPUSH
32981: CALL_OW 2
32985: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32986: LD_VAR 0 14
32990: PPUSH
32991: LD_VAR 0 12
32995: PUSH
32996: LD_INT 1
32998: ARRAY
32999: PPUSH
33000: CALL_OW 52
// end ;
33004: GO 32643
33006: POP
33007: POP
// end ;
33008: GO 31945
33010: POP
33011: POP
// result := result ^ buildings ;
33012: LD_ADDR_VAR 0 7
33016: PUSH
33017: LD_VAR 0 7
33021: PUSH
33022: LD_VAR 0 18
33026: ADD
33027: ST_TO_ADDR
// end else
33028: GO 33171
// begin for i = 1 to personel do
33030: LD_ADDR_VAR 0 8
33034: PUSH
33035: DOUBLE
33036: LD_INT 1
33038: DEC
33039: ST_TO_ADDR
33040: LD_VAR 0 6
33044: PUSH
33045: FOR_TO
33046: IFFALSE 33169
// begin if i > 4 then
33048: LD_VAR 0 8
33052: PUSH
33053: LD_INT 4
33055: GREATER
33056: IFFALSE 33060
// break ;
33058: GO 33169
// x := personel [ i ] ;
33060: LD_ADDR_VAR 0 13
33064: PUSH
33065: LD_VAR 0 6
33069: PUSH
33070: LD_VAR 0 8
33074: ARRAY
33075: ST_TO_ADDR
// if x = - 1 then
33076: LD_VAR 0 13
33080: PUSH
33081: LD_INT 1
33083: NEG
33084: EQUAL
33085: IFFALSE 33089
// continue ;
33087: GO 33045
// PrepareHuman ( false , i , skill ) ;
33089: LD_INT 0
33091: PPUSH
33092: LD_VAR 0 8
33096: PPUSH
33097: LD_VAR 0 4
33101: PPUSH
33102: CALL_OW 380
// un := CreateHuman ;
33106: LD_ADDR_VAR 0 14
33110: PUSH
33111: CALL_OW 44
33115: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33116: LD_VAR 0 14
33120: PPUSH
33121: LD_VAR 0 1
33125: PPUSH
33126: CALL_OW 250
33130: PPUSH
33131: LD_VAR 0 1
33135: PPUSH
33136: CALL_OW 251
33140: PPUSH
33141: LD_INT 10
33143: PPUSH
33144: LD_INT 0
33146: PPUSH
33147: CALL_OW 50
// result := result ^ un ;
33151: LD_ADDR_VAR 0 7
33155: PUSH
33156: LD_VAR 0 7
33160: PUSH
33161: LD_VAR 0 14
33165: ADD
33166: ST_TO_ADDR
// end ;
33167: GO 33045
33169: POP
33170: POP
// end ; end ;
33171: LD_VAR 0 7
33175: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33176: LD_INT 0
33178: PPUSH
33179: PPUSH
33180: PPUSH
33181: PPUSH
33182: PPUSH
33183: PPUSH
33184: PPUSH
33185: PPUSH
33186: PPUSH
33187: PPUSH
33188: PPUSH
33189: PPUSH
33190: PPUSH
33191: PPUSH
33192: PPUSH
33193: PPUSH
// result := false ;
33194: LD_ADDR_VAR 0 3
33198: PUSH
33199: LD_INT 0
33201: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33202: LD_VAR 0 1
33206: NOT
33207: PUSH
33208: LD_VAR 0 1
33212: PPUSH
33213: CALL_OW 266
33217: PUSH
33218: LD_INT 32
33220: PUSH
33221: LD_INT 33
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: IN
33228: NOT
33229: OR
33230: IFFALSE 33234
// exit ;
33232: GO 34343
// nat := GetNation ( tower ) ;
33234: LD_ADDR_VAR 0 12
33238: PUSH
33239: LD_VAR 0 1
33243: PPUSH
33244: CALL_OW 248
33248: ST_TO_ADDR
// side := GetSide ( tower ) ;
33249: LD_ADDR_VAR 0 16
33253: PUSH
33254: LD_VAR 0 1
33258: PPUSH
33259: CALL_OW 255
33263: ST_TO_ADDR
// x := GetX ( tower ) ;
33264: LD_ADDR_VAR 0 10
33268: PUSH
33269: LD_VAR 0 1
33273: PPUSH
33274: CALL_OW 250
33278: ST_TO_ADDR
// y := GetY ( tower ) ;
33279: LD_ADDR_VAR 0 11
33283: PUSH
33284: LD_VAR 0 1
33288: PPUSH
33289: CALL_OW 251
33293: ST_TO_ADDR
// if not x or not y then
33294: LD_VAR 0 10
33298: NOT
33299: PUSH
33300: LD_VAR 0 11
33304: NOT
33305: OR
33306: IFFALSE 33310
// exit ;
33308: GO 34343
// weapon := 0 ;
33310: LD_ADDR_VAR 0 18
33314: PUSH
33315: LD_INT 0
33317: ST_TO_ADDR
// fac_list := [ ] ;
33318: LD_ADDR_VAR 0 17
33322: PUSH
33323: EMPTY
33324: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
33325: LD_ADDR_VAR 0 6
33329: PUSH
33330: LD_VAR 0 1
33334: PPUSH
33335: CALL_OW 274
33339: PPUSH
33340: LD_VAR 0 2
33344: PPUSH
33345: LD_INT 0
33347: PPUSH
33348: CALL 30914 0 3
33352: PPUSH
33353: LD_INT 30
33355: PUSH
33356: LD_INT 3
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PPUSH
33363: CALL_OW 72
33367: ST_TO_ADDR
// if not factories then
33368: LD_VAR 0 6
33372: NOT
33373: IFFALSE 33377
// exit ;
33375: GO 34343
// for i in factories do
33377: LD_ADDR_VAR 0 8
33381: PUSH
33382: LD_VAR 0 6
33386: PUSH
33387: FOR_IN
33388: IFFALSE 33413
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33390: LD_ADDR_VAR 0 17
33394: PUSH
33395: LD_VAR 0 17
33399: PUSH
33400: LD_VAR 0 8
33404: PPUSH
33405: CALL_OW 478
33409: UNION
33410: ST_TO_ADDR
33411: GO 33387
33413: POP
33414: POP
// if not fac_list then
33415: LD_VAR 0 17
33419: NOT
33420: IFFALSE 33424
// exit ;
33422: GO 34343
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33424: LD_ADDR_VAR 0 5
33428: PUSH
33429: LD_INT 4
33431: PUSH
33432: LD_INT 5
33434: PUSH
33435: LD_INT 9
33437: PUSH
33438: LD_INT 10
33440: PUSH
33441: LD_INT 6
33443: PUSH
33444: LD_INT 7
33446: PUSH
33447: LD_INT 11
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 27
33461: PUSH
33462: LD_INT 28
33464: PUSH
33465: LD_INT 26
33467: PUSH
33468: LD_INT 30
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 43
33479: PUSH
33480: LD_INT 44
33482: PUSH
33483: LD_INT 46
33485: PUSH
33486: LD_INT 45
33488: PUSH
33489: LD_INT 47
33491: PUSH
33492: LD_INT 49
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: LIST
33507: PUSH
33508: LD_VAR 0 12
33512: ARRAY
33513: ST_TO_ADDR
// list := list isect fac_list ;
33514: LD_ADDR_VAR 0 5
33518: PUSH
33519: LD_VAR 0 5
33523: PUSH
33524: LD_VAR 0 17
33528: ISECT
33529: ST_TO_ADDR
// if not list then
33530: LD_VAR 0 5
33534: NOT
33535: IFFALSE 33539
// exit ;
33537: GO 34343
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
33539: LD_VAR 0 12
33543: PUSH
33544: LD_INT 3
33546: EQUAL
33547: PUSH
33548: LD_INT 49
33550: PUSH
33551: LD_VAR 0 5
33555: IN
33556: AND
33557: PUSH
33558: LD_INT 31
33560: PPUSH
33561: LD_VAR 0 16
33565: PPUSH
33566: CALL_OW 321
33570: PUSH
33571: LD_INT 2
33573: EQUAL
33574: AND
33575: IFFALSE 33635
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
33577: LD_INT 22
33579: PUSH
33580: LD_VAR 0 16
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 35
33591: PUSH
33592: LD_INT 49
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 91
33601: PUSH
33602: LD_VAR 0 1
33606: PUSH
33607: LD_INT 10
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: LIST
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: LIST
33619: PPUSH
33620: CALL_OW 69
33624: NOT
33625: IFFALSE 33635
// weapon := ru_time_lapser ;
33627: LD_ADDR_VAR 0 18
33631: PUSH
33632: LD_INT 49
33634: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
33635: LD_VAR 0 12
33639: PUSH
33640: LD_INT 1
33642: PUSH
33643: LD_INT 2
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: IN
33650: PUSH
33651: LD_INT 11
33653: PUSH
33654: LD_VAR 0 5
33658: IN
33659: PUSH
33660: LD_INT 30
33662: PUSH
33663: LD_VAR 0 5
33667: IN
33668: OR
33669: AND
33670: PUSH
33671: LD_INT 6
33673: PPUSH
33674: LD_VAR 0 16
33678: PPUSH
33679: CALL_OW 321
33683: PUSH
33684: LD_INT 2
33686: EQUAL
33687: AND
33688: IFFALSE 33853
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
33690: LD_INT 22
33692: PUSH
33693: LD_VAR 0 16
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: LD_INT 2
33704: PUSH
33705: LD_INT 35
33707: PUSH
33708: LD_INT 11
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 35
33717: PUSH
33718: LD_INT 30
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 91
33732: PUSH
33733: LD_VAR 0 1
33737: PUSH
33738: LD_INT 18
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: LIST
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: LIST
33750: PPUSH
33751: CALL_OW 69
33755: NOT
33756: PUSH
33757: LD_INT 22
33759: PUSH
33760: LD_VAR 0 16
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 2
33771: PUSH
33772: LD_INT 30
33774: PUSH
33775: LD_INT 32
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: PUSH
33782: LD_INT 30
33784: PUSH
33785: LD_INT 33
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 91
33799: PUSH
33800: LD_VAR 0 1
33804: PUSH
33805: LD_INT 12
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: LIST
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: LIST
33817: PUSH
33818: EMPTY
33819: LIST
33820: PPUSH
33821: CALL_OW 69
33825: PUSH
33826: LD_INT 2
33828: GREATER
33829: AND
33830: IFFALSE 33853
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33832: LD_ADDR_VAR 0 18
33836: PUSH
33837: LD_INT 11
33839: PUSH
33840: LD_INT 30
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_VAR 0 12
33851: ARRAY
33852: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33853: LD_VAR 0 18
33857: NOT
33858: PUSH
33859: LD_INT 40
33861: PPUSH
33862: LD_VAR 0 16
33866: PPUSH
33867: CALL_OW 321
33871: PUSH
33872: LD_INT 2
33874: EQUAL
33875: AND
33876: PUSH
33877: LD_INT 7
33879: PUSH
33880: LD_VAR 0 5
33884: IN
33885: PUSH
33886: LD_INT 28
33888: PUSH
33889: LD_VAR 0 5
33893: IN
33894: OR
33895: PUSH
33896: LD_INT 45
33898: PUSH
33899: LD_VAR 0 5
33903: IN
33904: OR
33905: AND
33906: IFFALSE 34160
// begin hex := GetHexInfo ( x , y ) ;
33908: LD_ADDR_VAR 0 4
33912: PUSH
33913: LD_VAR 0 10
33917: PPUSH
33918: LD_VAR 0 11
33922: PPUSH
33923: CALL_OW 546
33927: ST_TO_ADDR
// if hex [ 1 ] then
33928: LD_VAR 0 4
33932: PUSH
33933: LD_INT 1
33935: ARRAY
33936: IFFALSE 33940
// exit ;
33938: GO 34343
// height := hex [ 2 ] ;
33940: LD_ADDR_VAR 0 15
33944: PUSH
33945: LD_VAR 0 4
33949: PUSH
33950: LD_INT 2
33952: ARRAY
33953: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33954: LD_ADDR_VAR 0 14
33958: PUSH
33959: LD_INT 0
33961: PUSH
33962: LD_INT 2
33964: PUSH
33965: LD_INT 3
33967: PUSH
33968: LD_INT 5
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: ST_TO_ADDR
// for i in tmp do
33977: LD_ADDR_VAR 0 8
33981: PUSH
33982: LD_VAR 0 14
33986: PUSH
33987: FOR_IN
33988: IFFALSE 34158
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33990: LD_ADDR_VAR 0 9
33994: PUSH
33995: LD_VAR 0 10
33999: PPUSH
34000: LD_VAR 0 8
34004: PPUSH
34005: LD_INT 5
34007: PPUSH
34008: CALL_OW 272
34012: PUSH
34013: LD_VAR 0 11
34017: PPUSH
34018: LD_VAR 0 8
34022: PPUSH
34023: LD_INT 5
34025: PPUSH
34026: CALL_OW 273
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34035: LD_VAR 0 9
34039: PUSH
34040: LD_INT 1
34042: ARRAY
34043: PPUSH
34044: LD_VAR 0 9
34048: PUSH
34049: LD_INT 2
34051: ARRAY
34052: PPUSH
34053: CALL_OW 488
34057: IFFALSE 34156
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34059: LD_ADDR_VAR 0 4
34063: PUSH
34064: LD_VAR 0 9
34068: PUSH
34069: LD_INT 1
34071: ARRAY
34072: PPUSH
34073: LD_VAR 0 9
34077: PUSH
34078: LD_INT 2
34080: ARRAY
34081: PPUSH
34082: CALL_OW 546
34086: ST_TO_ADDR
// if hex [ 1 ] then
34087: LD_VAR 0 4
34091: PUSH
34092: LD_INT 1
34094: ARRAY
34095: IFFALSE 34099
// continue ;
34097: GO 33987
// h := hex [ 2 ] ;
34099: LD_ADDR_VAR 0 13
34103: PUSH
34104: LD_VAR 0 4
34108: PUSH
34109: LD_INT 2
34111: ARRAY
34112: ST_TO_ADDR
// if h + 7 < height then
34113: LD_VAR 0 13
34117: PUSH
34118: LD_INT 7
34120: PLUS
34121: PUSH
34122: LD_VAR 0 15
34126: LESS
34127: IFFALSE 34156
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34129: LD_ADDR_VAR 0 18
34133: PUSH
34134: LD_INT 7
34136: PUSH
34137: LD_INT 28
34139: PUSH
34140: LD_INT 45
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: LIST
34147: PUSH
34148: LD_VAR 0 12
34152: ARRAY
34153: ST_TO_ADDR
// break ;
34154: GO 34158
// end ; end ; end ;
34156: GO 33987
34158: POP
34159: POP
// end ; if not weapon then
34160: LD_VAR 0 18
34164: NOT
34165: IFFALSE 34225
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34167: LD_ADDR_VAR 0 5
34171: PUSH
34172: LD_VAR 0 5
34176: PUSH
34177: LD_INT 11
34179: PUSH
34180: LD_INT 30
34182: PUSH
34183: LD_INT 49
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: LIST
34190: DIFF
34191: ST_TO_ADDR
// if not list then
34192: LD_VAR 0 5
34196: NOT
34197: IFFALSE 34201
// exit ;
34199: GO 34343
// weapon := list [ rand ( 1 , list ) ] ;
34201: LD_ADDR_VAR 0 18
34205: PUSH
34206: LD_VAR 0 5
34210: PUSH
34211: LD_INT 1
34213: PPUSH
34214: LD_VAR 0 5
34218: PPUSH
34219: CALL_OW 12
34223: ARRAY
34224: ST_TO_ADDR
// end ; if weapon then
34225: LD_VAR 0 18
34229: IFFALSE 34343
// begin tmp := CostOfWeapon ( weapon ) ;
34231: LD_ADDR_VAR 0 14
34235: PUSH
34236: LD_VAR 0 18
34240: PPUSH
34241: CALL_OW 451
34245: ST_TO_ADDR
// j := GetBase ( tower ) ;
34246: LD_ADDR_VAR 0 9
34250: PUSH
34251: LD_VAR 0 1
34255: PPUSH
34256: CALL_OW 274
34260: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34261: LD_VAR 0 9
34265: PPUSH
34266: LD_INT 1
34268: PPUSH
34269: CALL_OW 275
34273: PUSH
34274: LD_VAR 0 14
34278: PUSH
34279: LD_INT 1
34281: ARRAY
34282: GREATEREQUAL
34283: PUSH
34284: LD_VAR 0 9
34288: PPUSH
34289: LD_INT 2
34291: PPUSH
34292: CALL_OW 275
34296: PUSH
34297: LD_VAR 0 14
34301: PUSH
34302: LD_INT 2
34304: ARRAY
34305: GREATEREQUAL
34306: AND
34307: PUSH
34308: LD_VAR 0 9
34312: PPUSH
34313: LD_INT 3
34315: PPUSH
34316: CALL_OW 275
34320: PUSH
34321: LD_VAR 0 14
34325: PUSH
34326: LD_INT 3
34328: ARRAY
34329: GREATEREQUAL
34330: AND
34331: IFFALSE 34343
// result := weapon ;
34333: LD_ADDR_VAR 0 3
34337: PUSH
34338: LD_VAR 0 18
34342: ST_TO_ADDR
// end ; end ;
34343: LD_VAR 0 3
34347: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34348: LD_INT 0
34350: PPUSH
34351: PPUSH
// result := true ;
34352: LD_ADDR_VAR 0 3
34356: PUSH
34357: LD_INT 1
34359: ST_TO_ADDR
// if array1 = array2 then
34360: LD_VAR 0 1
34364: PUSH
34365: LD_VAR 0 2
34369: EQUAL
34370: IFFALSE 34430
// begin for i = 1 to array1 do
34372: LD_ADDR_VAR 0 4
34376: PUSH
34377: DOUBLE
34378: LD_INT 1
34380: DEC
34381: ST_TO_ADDR
34382: LD_VAR 0 1
34386: PUSH
34387: FOR_TO
34388: IFFALSE 34426
// if array1 [ i ] <> array2 [ i ] then
34390: LD_VAR 0 1
34394: PUSH
34395: LD_VAR 0 4
34399: ARRAY
34400: PUSH
34401: LD_VAR 0 2
34405: PUSH
34406: LD_VAR 0 4
34410: ARRAY
34411: NONEQUAL
34412: IFFALSE 34424
// begin result := false ;
34414: LD_ADDR_VAR 0 3
34418: PUSH
34419: LD_INT 0
34421: ST_TO_ADDR
// break ;
34422: GO 34426
// end ;
34424: GO 34387
34426: POP
34427: POP
// end else
34428: GO 34438
// result := false ;
34430: LD_ADDR_VAR 0 3
34434: PUSH
34435: LD_INT 0
34437: ST_TO_ADDR
// end ;
34438: LD_VAR 0 3
34442: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
34443: LD_INT 0
34445: PPUSH
34446: PPUSH
// if not array1 or not array2 then
34447: LD_VAR 0 1
34451: NOT
34452: PUSH
34453: LD_VAR 0 2
34457: NOT
34458: OR
34459: IFFALSE 34463
// exit ;
34461: GO 34527
// result := true ;
34463: LD_ADDR_VAR 0 3
34467: PUSH
34468: LD_INT 1
34470: ST_TO_ADDR
// for i = 1 to array1 do
34471: LD_ADDR_VAR 0 4
34475: PUSH
34476: DOUBLE
34477: LD_INT 1
34479: DEC
34480: ST_TO_ADDR
34481: LD_VAR 0 1
34485: PUSH
34486: FOR_TO
34487: IFFALSE 34525
// if array1 [ i ] <> array2 [ i ] then
34489: LD_VAR 0 1
34493: PUSH
34494: LD_VAR 0 4
34498: ARRAY
34499: PUSH
34500: LD_VAR 0 2
34504: PUSH
34505: LD_VAR 0 4
34509: ARRAY
34510: NONEQUAL
34511: IFFALSE 34523
// begin result := false ;
34513: LD_ADDR_VAR 0 3
34517: PUSH
34518: LD_INT 0
34520: ST_TO_ADDR
// break ;
34521: GO 34525
// end ;
34523: GO 34486
34525: POP
34526: POP
// end ;
34527: LD_VAR 0 3
34531: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
34532: LD_INT 0
34534: PPUSH
34535: PPUSH
34536: PPUSH
// pom := GetBase ( fac ) ;
34537: LD_ADDR_VAR 0 5
34541: PUSH
34542: LD_VAR 0 1
34546: PPUSH
34547: CALL_OW 274
34551: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34552: LD_ADDR_VAR 0 4
34556: PUSH
34557: LD_VAR 0 2
34561: PUSH
34562: LD_INT 1
34564: ARRAY
34565: PPUSH
34566: LD_VAR 0 2
34570: PUSH
34571: LD_INT 2
34573: ARRAY
34574: PPUSH
34575: LD_VAR 0 2
34579: PUSH
34580: LD_INT 3
34582: ARRAY
34583: PPUSH
34584: LD_VAR 0 2
34588: PUSH
34589: LD_INT 4
34591: ARRAY
34592: PPUSH
34593: CALL_OW 449
34597: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34598: LD_ADDR_VAR 0 3
34602: PUSH
34603: LD_VAR 0 5
34607: PPUSH
34608: LD_INT 1
34610: PPUSH
34611: CALL_OW 275
34615: PUSH
34616: LD_VAR 0 4
34620: PUSH
34621: LD_INT 1
34623: ARRAY
34624: GREATEREQUAL
34625: PUSH
34626: LD_VAR 0 5
34630: PPUSH
34631: LD_INT 2
34633: PPUSH
34634: CALL_OW 275
34638: PUSH
34639: LD_VAR 0 4
34643: PUSH
34644: LD_INT 2
34646: ARRAY
34647: GREATEREQUAL
34648: AND
34649: PUSH
34650: LD_VAR 0 5
34654: PPUSH
34655: LD_INT 3
34657: PPUSH
34658: CALL_OW 275
34662: PUSH
34663: LD_VAR 0 4
34667: PUSH
34668: LD_INT 3
34670: ARRAY
34671: GREATEREQUAL
34672: AND
34673: ST_TO_ADDR
// end ;
34674: LD_VAR 0 3
34678: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
34679: LD_INT 0
34681: PPUSH
34682: PPUSH
34683: PPUSH
34684: PPUSH
// pom := GetBase ( building ) ;
34685: LD_ADDR_VAR 0 3
34689: PUSH
34690: LD_VAR 0 1
34694: PPUSH
34695: CALL_OW 274
34699: ST_TO_ADDR
// if not pom then
34700: LD_VAR 0 3
34704: NOT
34705: IFFALSE 34709
// exit ;
34707: GO 34879
// btype := GetBType ( building ) ;
34709: LD_ADDR_VAR 0 5
34713: PUSH
34714: LD_VAR 0 1
34718: PPUSH
34719: CALL_OW 266
34723: ST_TO_ADDR
// if btype = b_armoury then
34724: LD_VAR 0 5
34728: PUSH
34729: LD_INT 4
34731: EQUAL
34732: IFFALSE 34742
// btype := b_barracks ;
34734: LD_ADDR_VAR 0 5
34738: PUSH
34739: LD_INT 5
34741: ST_TO_ADDR
// if btype = b_depot then
34742: LD_VAR 0 5
34746: PUSH
34747: LD_INT 0
34749: EQUAL
34750: IFFALSE 34760
// btype := b_warehouse ;
34752: LD_ADDR_VAR 0 5
34756: PUSH
34757: LD_INT 1
34759: ST_TO_ADDR
// if btype = b_workshop then
34760: LD_VAR 0 5
34764: PUSH
34765: LD_INT 2
34767: EQUAL
34768: IFFALSE 34778
// btype := b_factory ;
34770: LD_ADDR_VAR 0 5
34774: PUSH
34775: LD_INT 3
34777: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34778: LD_ADDR_VAR 0 4
34782: PUSH
34783: LD_VAR 0 5
34787: PPUSH
34788: LD_VAR 0 1
34792: PPUSH
34793: CALL_OW 248
34797: PPUSH
34798: CALL_OW 450
34802: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34803: LD_ADDR_VAR 0 2
34807: PUSH
34808: LD_VAR 0 3
34812: PPUSH
34813: LD_INT 1
34815: PPUSH
34816: CALL_OW 275
34820: PUSH
34821: LD_VAR 0 4
34825: PUSH
34826: LD_INT 1
34828: ARRAY
34829: GREATEREQUAL
34830: PUSH
34831: LD_VAR 0 3
34835: PPUSH
34836: LD_INT 2
34838: PPUSH
34839: CALL_OW 275
34843: PUSH
34844: LD_VAR 0 4
34848: PUSH
34849: LD_INT 2
34851: ARRAY
34852: GREATEREQUAL
34853: AND
34854: PUSH
34855: LD_VAR 0 3
34859: PPUSH
34860: LD_INT 3
34862: PPUSH
34863: CALL_OW 275
34867: PUSH
34868: LD_VAR 0 4
34872: PUSH
34873: LD_INT 3
34875: ARRAY
34876: GREATEREQUAL
34877: AND
34878: ST_TO_ADDR
// end ;
34879: LD_VAR 0 2
34883: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34884: LD_INT 0
34886: PPUSH
34887: PPUSH
34888: PPUSH
// pom := GetBase ( building ) ;
34889: LD_ADDR_VAR 0 4
34893: PUSH
34894: LD_VAR 0 1
34898: PPUSH
34899: CALL_OW 274
34903: ST_TO_ADDR
// if not pom then
34904: LD_VAR 0 4
34908: NOT
34909: IFFALSE 34913
// exit ;
34911: GO 35014
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34913: LD_ADDR_VAR 0 5
34917: PUSH
34918: LD_VAR 0 2
34922: PPUSH
34923: LD_VAR 0 1
34927: PPUSH
34928: CALL_OW 248
34932: PPUSH
34933: CALL_OW 450
34937: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34938: LD_ADDR_VAR 0 3
34942: PUSH
34943: LD_VAR 0 4
34947: PPUSH
34948: LD_INT 1
34950: PPUSH
34951: CALL_OW 275
34955: PUSH
34956: LD_VAR 0 5
34960: PUSH
34961: LD_INT 1
34963: ARRAY
34964: GREATEREQUAL
34965: PUSH
34966: LD_VAR 0 4
34970: PPUSH
34971: LD_INT 2
34973: PPUSH
34974: CALL_OW 275
34978: PUSH
34979: LD_VAR 0 5
34983: PUSH
34984: LD_INT 2
34986: ARRAY
34987: GREATEREQUAL
34988: AND
34989: PUSH
34990: LD_VAR 0 4
34994: PPUSH
34995: LD_INT 3
34997: PPUSH
34998: CALL_OW 275
35002: PUSH
35003: LD_VAR 0 5
35007: PUSH
35008: LD_INT 3
35010: ARRAY
35011: GREATEREQUAL
35012: AND
35013: ST_TO_ADDR
// end ;
35014: LD_VAR 0 3
35018: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
35019: LD_INT 0
35021: PPUSH
35022: PPUSH
35023: PPUSH
35024: PPUSH
35025: PPUSH
35026: PPUSH
35027: PPUSH
35028: PPUSH
35029: PPUSH
35030: PPUSH
35031: PPUSH
// result := false ;
35032: LD_ADDR_VAR 0 8
35036: PUSH
35037: LD_INT 0
35039: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
35040: LD_VAR 0 5
35044: NOT
35045: PUSH
35046: LD_VAR 0 1
35050: NOT
35051: OR
35052: PUSH
35053: LD_VAR 0 2
35057: NOT
35058: OR
35059: PUSH
35060: LD_VAR 0 3
35064: NOT
35065: OR
35066: IFFALSE 35070
// exit ;
35068: GO 35884
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
35070: LD_ADDR_VAR 0 14
35074: PUSH
35075: LD_VAR 0 1
35079: PPUSH
35080: LD_VAR 0 2
35084: PPUSH
35085: LD_VAR 0 3
35089: PPUSH
35090: LD_VAR 0 4
35094: PPUSH
35095: LD_VAR 0 5
35099: PUSH
35100: LD_INT 1
35102: ARRAY
35103: PPUSH
35104: CALL_OW 248
35108: PPUSH
35109: LD_INT 0
35111: PPUSH
35112: CALL 37121 0 6
35116: ST_TO_ADDR
// if not hexes then
35117: LD_VAR 0 14
35121: NOT
35122: IFFALSE 35126
// exit ;
35124: GO 35884
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35126: LD_ADDR_VAR 0 17
35130: PUSH
35131: LD_VAR 0 5
35135: PPUSH
35136: LD_INT 22
35138: PUSH
35139: LD_VAR 0 13
35143: PPUSH
35144: CALL_OW 255
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 2
35155: PUSH
35156: LD_INT 30
35158: PUSH
35159: LD_INT 0
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 30
35168: PUSH
35169: LD_INT 1
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: LIST
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PPUSH
35185: CALL_OW 72
35189: ST_TO_ADDR
// for i = 1 to hexes do
35190: LD_ADDR_VAR 0 9
35194: PUSH
35195: DOUBLE
35196: LD_INT 1
35198: DEC
35199: ST_TO_ADDR
35200: LD_VAR 0 14
35204: PUSH
35205: FOR_TO
35206: IFFALSE 35882
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35208: LD_ADDR_VAR 0 13
35212: PUSH
35213: LD_VAR 0 14
35217: PUSH
35218: LD_VAR 0 9
35222: ARRAY
35223: PUSH
35224: LD_INT 1
35226: ARRAY
35227: PPUSH
35228: LD_VAR 0 14
35232: PUSH
35233: LD_VAR 0 9
35237: ARRAY
35238: PUSH
35239: LD_INT 2
35241: ARRAY
35242: PPUSH
35243: CALL_OW 428
35247: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35248: LD_VAR 0 14
35252: PUSH
35253: LD_VAR 0 9
35257: ARRAY
35258: PUSH
35259: LD_INT 1
35261: ARRAY
35262: PPUSH
35263: LD_VAR 0 14
35267: PUSH
35268: LD_VAR 0 9
35272: ARRAY
35273: PUSH
35274: LD_INT 2
35276: ARRAY
35277: PPUSH
35278: CALL_OW 351
35282: PUSH
35283: LD_VAR 0 14
35287: PUSH
35288: LD_VAR 0 9
35292: ARRAY
35293: PUSH
35294: LD_INT 1
35296: ARRAY
35297: PPUSH
35298: LD_VAR 0 14
35302: PUSH
35303: LD_VAR 0 9
35307: ARRAY
35308: PUSH
35309: LD_INT 2
35311: ARRAY
35312: PPUSH
35313: CALL_OW 488
35317: NOT
35318: OR
35319: PUSH
35320: LD_VAR 0 13
35324: PPUSH
35325: CALL_OW 247
35329: PUSH
35330: LD_INT 3
35332: EQUAL
35333: OR
35334: IFFALSE 35340
// exit ;
35336: POP
35337: POP
35338: GO 35884
// if not tmp then
35340: LD_VAR 0 13
35344: NOT
35345: IFFALSE 35349
// continue ;
35347: GO 35205
// result := true ;
35349: LD_ADDR_VAR 0 8
35353: PUSH
35354: LD_INT 1
35356: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
35357: LD_VAR 0 6
35361: PUSH
35362: LD_VAR 0 13
35366: PPUSH
35367: CALL_OW 247
35371: PUSH
35372: LD_INT 2
35374: EQUAL
35375: AND
35376: PUSH
35377: LD_VAR 0 13
35381: PPUSH
35382: CALL_OW 263
35386: PUSH
35387: LD_INT 1
35389: EQUAL
35390: AND
35391: IFFALSE 35555
// begin if IsDrivenBy ( tmp ) then
35393: LD_VAR 0 13
35397: PPUSH
35398: CALL_OW 311
35402: IFFALSE 35406
// continue ;
35404: GO 35205
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
35406: LD_VAR 0 6
35410: PPUSH
35411: LD_INT 3
35413: PUSH
35414: LD_INT 60
35416: PUSH
35417: EMPTY
35418: LIST
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 3
35426: PUSH
35427: LD_INT 55
35429: PUSH
35430: EMPTY
35431: LIST
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PPUSH
35441: CALL_OW 72
35445: IFFALSE 35553
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
35447: LD_ADDR_VAR 0 18
35451: PUSH
35452: LD_VAR 0 6
35456: PPUSH
35457: LD_INT 3
35459: PUSH
35460: LD_INT 60
35462: PUSH
35463: EMPTY
35464: LIST
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 3
35472: PUSH
35473: LD_INT 55
35475: PUSH
35476: EMPTY
35477: LIST
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PPUSH
35487: CALL_OW 72
35491: PUSH
35492: LD_INT 1
35494: ARRAY
35495: ST_TO_ADDR
// if IsInUnit ( driver ) then
35496: LD_VAR 0 18
35500: PPUSH
35501: CALL_OW 310
35505: IFFALSE 35516
// ComExit ( driver ) ;
35507: LD_VAR 0 18
35511: PPUSH
35512: CALL 60305 0 1
// AddComEnterUnit ( driver , tmp ) ;
35516: LD_VAR 0 18
35520: PPUSH
35521: LD_VAR 0 13
35525: PPUSH
35526: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
35530: LD_VAR 0 18
35534: PPUSH
35535: LD_VAR 0 7
35539: PPUSH
35540: CALL_OW 173
// AddComExitVehicle ( driver ) ;
35544: LD_VAR 0 18
35548: PPUSH
35549: CALL_OW 181
// end ; continue ;
35553: GO 35205
// end ; if not cleaners or not tmp in cleaners then
35555: LD_VAR 0 6
35559: NOT
35560: PUSH
35561: LD_VAR 0 13
35565: PUSH
35566: LD_VAR 0 6
35570: IN
35571: NOT
35572: OR
35573: IFFALSE 35880
// begin if dep then
35575: LD_VAR 0 17
35579: IFFALSE 35715
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
35581: LD_ADDR_VAR 0 16
35585: PUSH
35586: LD_VAR 0 17
35590: PUSH
35591: LD_INT 1
35593: ARRAY
35594: PPUSH
35595: CALL_OW 250
35599: PPUSH
35600: LD_VAR 0 17
35604: PUSH
35605: LD_INT 1
35607: ARRAY
35608: PPUSH
35609: CALL_OW 254
35613: PPUSH
35614: LD_INT 5
35616: PPUSH
35617: CALL_OW 272
35621: PUSH
35622: LD_VAR 0 17
35626: PUSH
35627: LD_INT 1
35629: ARRAY
35630: PPUSH
35631: CALL_OW 251
35635: PPUSH
35636: LD_VAR 0 17
35640: PUSH
35641: LD_INT 1
35643: ARRAY
35644: PPUSH
35645: CALL_OW 254
35649: PPUSH
35650: LD_INT 5
35652: PPUSH
35653: CALL_OW 273
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
35662: LD_VAR 0 16
35666: PUSH
35667: LD_INT 1
35669: ARRAY
35670: PPUSH
35671: LD_VAR 0 16
35675: PUSH
35676: LD_INT 2
35678: ARRAY
35679: PPUSH
35680: CALL_OW 488
35684: IFFALSE 35715
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
35686: LD_VAR 0 13
35690: PPUSH
35691: LD_VAR 0 16
35695: PUSH
35696: LD_INT 1
35698: ARRAY
35699: PPUSH
35700: LD_VAR 0 16
35704: PUSH
35705: LD_INT 2
35707: ARRAY
35708: PPUSH
35709: CALL_OW 111
// continue ;
35713: GO 35205
// end ; end ; r := GetDir ( tmp ) ;
35715: LD_ADDR_VAR 0 15
35719: PUSH
35720: LD_VAR 0 13
35724: PPUSH
35725: CALL_OW 254
35729: ST_TO_ADDR
// if r = 5 then
35730: LD_VAR 0 15
35734: PUSH
35735: LD_INT 5
35737: EQUAL
35738: IFFALSE 35748
// r := 0 ;
35740: LD_ADDR_VAR 0 15
35744: PUSH
35745: LD_INT 0
35747: ST_TO_ADDR
// for j = r to 5 do
35748: LD_ADDR_VAR 0 10
35752: PUSH
35753: DOUBLE
35754: LD_VAR 0 15
35758: DEC
35759: ST_TO_ADDR
35760: LD_INT 5
35762: PUSH
35763: FOR_TO
35764: IFFALSE 35878
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
35766: LD_ADDR_VAR 0 11
35770: PUSH
35771: LD_VAR 0 13
35775: PPUSH
35776: CALL_OW 250
35780: PPUSH
35781: LD_VAR 0 10
35785: PPUSH
35786: LD_INT 2
35788: PPUSH
35789: CALL_OW 272
35793: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
35794: LD_ADDR_VAR 0 12
35798: PUSH
35799: LD_VAR 0 13
35803: PPUSH
35804: CALL_OW 251
35808: PPUSH
35809: LD_VAR 0 10
35813: PPUSH
35814: LD_INT 2
35816: PPUSH
35817: CALL_OW 273
35821: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
35822: LD_VAR 0 11
35826: PPUSH
35827: LD_VAR 0 12
35831: PPUSH
35832: CALL_OW 488
35836: PUSH
35837: LD_VAR 0 11
35841: PPUSH
35842: LD_VAR 0 12
35846: PPUSH
35847: CALL_OW 428
35851: NOT
35852: AND
35853: IFFALSE 35876
// begin ComMoveXY ( tmp , _x , _y ) ;
35855: LD_VAR 0 13
35859: PPUSH
35860: LD_VAR 0 11
35864: PPUSH
35865: LD_VAR 0 12
35869: PPUSH
35870: CALL_OW 111
// break ;
35874: GO 35878
// end ; end ;
35876: GO 35763
35878: POP
35879: POP
// end ; end ;
35880: GO 35205
35882: POP
35883: POP
// end ;
35884: LD_VAR 0 8
35888: RET
// export function BuildingTechInvented ( side , btype ) ; begin
35889: LD_INT 0
35891: PPUSH
// result := true ;
35892: LD_ADDR_VAR 0 3
35896: PUSH
35897: LD_INT 1
35899: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
35900: LD_VAR 0 2
35904: PUSH
35905: LD_INT 24
35907: DOUBLE
35908: EQUAL
35909: IFTRUE 35919
35911: LD_INT 33
35913: DOUBLE
35914: EQUAL
35915: IFTRUE 35919
35917: GO 35944
35919: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
35920: LD_ADDR_VAR 0 3
35924: PUSH
35925: LD_INT 32
35927: PPUSH
35928: LD_VAR 0 1
35932: PPUSH
35933: CALL_OW 321
35937: PUSH
35938: LD_INT 2
35940: EQUAL
35941: ST_TO_ADDR
35942: GO 36264
35944: LD_INT 20
35946: DOUBLE
35947: EQUAL
35948: IFTRUE 35952
35950: GO 35977
35952: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
35953: LD_ADDR_VAR 0 3
35957: PUSH
35958: LD_INT 6
35960: PPUSH
35961: LD_VAR 0 1
35965: PPUSH
35966: CALL_OW 321
35970: PUSH
35971: LD_INT 2
35973: EQUAL
35974: ST_TO_ADDR
35975: GO 36264
35977: LD_INT 22
35979: DOUBLE
35980: EQUAL
35981: IFTRUE 35991
35983: LD_INT 36
35985: DOUBLE
35986: EQUAL
35987: IFTRUE 35991
35989: GO 36016
35991: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
35992: LD_ADDR_VAR 0 3
35996: PUSH
35997: LD_INT 15
35999: PPUSH
36000: LD_VAR 0 1
36004: PPUSH
36005: CALL_OW 321
36009: PUSH
36010: LD_INT 2
36012: EQUAL
36013: ST_TO_ADDR
36014: GO 36264
36016: LD_INT 30
36018: DOUBLE
36019: EQUAL
36020: IFTRUE 36024
36022: GO 36049
36024: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
36025: LD_ADDR_VAR 0 3
36029: PUSH
36030: LD_INT 20
36032: PPUSH
36033: LD_VAR 0 1
36037: PPUSH
36038: CALL_OW 321
36042: PUSH
36043: LD_INT 2
36045: EQUAL
36046: ST_TO_ADDR
36047: GO 36264
36049: LD_INT 28
36051: DOUBLE
36052: EQUAL
36053: IFTRUE 36063
36055: LD_INT 21
36057: DOUBLE
36058: EQUAL
36059: IFTRUE 36063
36061: GO 36088
36063: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
36064: LD_ADDR_VAR 0 3
36068: PUSH
36069: LD_INT 21
36071: PPUSH
36072: LD_VAR 0 1
36076: PPUSH
36077: CALL_OW 321
36081: PUSH
36082: LD_INT 2
36084: EQUAL
36085: ST_TO_ADDR
36086: GO 36264
36088: LD_INT 16
36090: DOUBLE
36091: EQUAL
36092: IFTRUE 36096
36094: GO 36123
36096: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
36097: LD_ADDR_VAR 0 3
36101: PUSH
36102: LD_EXP 103
36106: PPUSH
36107: LD_VAR 0 1
36111: PPUSH
36112: CALL_OW 321
36116: PUSH
36117: LD_INT 2
36119: EQUAL
36120: ST_TO_ADDR
36121: GO 36264
36123: LD_INT 19
36125: DOUBLE
36126: EQUAL
36127: IFTRUE 36137
36129: LD_INT 23
36131: DOUBLE
36132: EQUAL
36133: IFTRUE 36137
36135: GO 36164
36137: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
36138: LD_ADDR_VAR 0 3
36142: PUSH
36143: LD_EXP 102
36147: PPUSH
36148: LD_VAR 0 1
36152: PPUSH
36153: CALL_OW 321
36157: PUSH
36158: LD_INT 2
36160: EQUAL
36161: ST_TO_ADDR
36162: GO 36264
36164: LD_INT 17
36166: DOUBLE
36167: EQUAL
36168: IFTRUE 36172
36170: GO 36197
36172: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
36173: LD_ADDR_VAR 0 3
36177: PUSH
36178: LD_INT 39
36180: PPUSH
36181: LD_VAR 0 1
36185: PPUSH
36186: CALL_OW 321
36190: PUSH
36191: LD_INT 2
36193: EQUAL
36194: ST_TO_ADDR
36195: GO 36264
36197: LD_INT 18
36199: DOUBLE
36200: EQUAL
36201: IFTRUE 36205
36203: GO 36230
36205: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
36206: LD_ADDR_VAR 0 3
36210: PUSH
36211: LD_INT 40
36213: PPUSH
36214: LD_VAR 0 1
36218: PPUSH
36219: CALL_OW 321
36223: PUSH
36224: LD_INT 2
36226: EQUAL
36227: ST_TO_ADDR
36228: GO 36264
36230: LD_INT 27
36232: DOUBLE
36233: EQUAL
36234: IFTRUE 36238
36236: GO 36263
36238: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
36239: LD_ADDR_VAR 0 3
36243: PUSH
36244: LD_INT 35
36246: PPUSH
36247: LD_VAR 0 1
36251: PPUSH
36252: CALL_OW 321
36256: PUSH
36257: LD_INT 2
36259: EQUAL
36260: ST_TO_ADDR
36261: GO 36264
36263: POP
// end ;
36264: LD_VAR 0 3
36268: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
36269: LD_INT 0
36271: PPUSH
36272: PPUSH
36273: PPUSH
36274: PPUSH
36275: PPUSH
36276: PPUSH
36277: PPUSH
36278: PPUSH
36279: PPUSH
36280: PPUSH
36281: PPUSH
// result := false ;
36282: LD_ADDR_VAR 0 6
36286: PUSH
36287: LD_INT 0
36289: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36290: LD_VAR 0 1
36294: NOT
36295: PUSH
36296: LD_VAR 0 1
36300: PPUSH
36301: CALL_OW 266
36305: PUSH
36306: LD_INT 0
36308: PUSH
36309: LD_INT 1
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: IN
36316: NOT
36317: OR
36318: PUSH
36319: LD_VAR 0 2
36323: NOT
36324: OR
36325: PUSH
36326: LD_VAR 0 5
36330: PUSH
36331: LD_INT 0
36333: PUSH
36334: LD_INT 1
36336: PUSH
36337: LD_INT 2
36339: PUSH
36340: LD_INT 3
36342: PUSH
36343: LD_INT 4
36345: PUSH
36346: LD_INT 5
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: IN
36357: NOT
36358: OR
36359: PUSH
36360: LD_VAR 0 3
36364: PPUSH
36365: LD_VAR 0 4
36369: PPUSH
36370: CALL_OW 488
36374: NOT
36375: OR
36376: IFFALSE 36380
// exit ;
36378: GO 37116
// side := GetSide ( depot ) ;
36380: LD_ADDR_VAR 0 9
36384: PUSH
36385: LD_VAR 0 1
36389: PPUSH
36390: CALL_OW 255
36394: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
36395: LD_VAR 0 9
36399: PPUSH
36400: LD_VAR 0 2
36404: PPUSH
36405: CALL 35889 0 2
36409: NOT
36410: IFFALSE 36414
// exit ;
36412: GO 37116
// pom := GetBase ( depot ) ;
36414: LD_ADDR_VAR 0 10
36418: PUSH
36419: LD_VAR 0 1
36423: PPUSH
36424: CALL_OW 274
36428: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36429: LD_ADDR_VAR 0 11
36433: PUSH
36434: LD_VAR 0 2
36438: PPUSH
36439: LD_VAR 0 1
36443: PPUSH
36444: CALL_OW 248
36448: PPUSH
36449: CALL_OW 450
36453: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36454: LD_VAR 0 10
36458: PPUSH
36459: LD_INT 1
36461: PPUSH
36462: CALL_OW 275
36466: PUSH
36467: LD_VAR 0 11
36471: PUSH
36472: LD_INT 1
36474: ARRAY
36475: GREATEREQUAL
36476: PUSH
36477: LD_VAR 0 10
36481: PPUSH
36482: LD_INT 2
36484: PPUSH
36485: CALL_OW 275
36489: PUSH
36490: LD_VAR 0 11
36494: PUSH
36495: LD_INT 2
36497: ARRAY
36498: GREATEREQUAL
36499: AND
36500: PUSH
36501: LD_VAR 0 10
36505: PPUSH
36506: LD_INT 3
36508: PPUSH
36509: CALL_OW 275
36513: PUSH
36514: LD_VAR 0 11
36518: PUSH
36519: LD_INT 3
36521: ARRAY
36522: GREATEREQUAL
36523: AND
36524: NOT
36525: IFFALSE 36529
// exit ;
36527: GO 37116
// if GetBType ( depot ) = b_depot then
36529: LD_VAR 0 1
36533: PPUSH
36534: CALL_OW 266
36538: PUSH
36539: LD_INT 0
36541: EQUAL
36542: IFFALSE 36554
// dist := 28 else
36544: LD_ADDR_VAR 0 14
36548: PUSH
36549: LD_INT 28
36551: ST_TO_ADDR
36552: GO 36562
// dist := 36 ;
36554: LD_ADDR_VAR 0 14
36558: PUSH
36559: LD_INT 36
36561: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36562: LD_VAR 0 1
36566: PPUSH
36567: LD_VAR 0 3
36571: PPUSH
36572: LD_VAR 0 4
36576: PPUSH
36577: CALL_OW 297
36581: PUSH
36582: LD_VAR 0 14
36586: GREATER
36587: IFFALSE 36591
// exit ;
36589: GO 37116
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
36591: LD_ADDR_VAR 0 12
36595: PUSH
36596: LD_VAR 0 2
36600: PPUSH
36601: LD_VAR 0 3
36605: PPUSH
36606: LD_VAR 0 4
36610: PPUSH
36611: LD_VAR 0 5
36615: PPUSH
36616: LD_VAR 0 1
36620: PPUSH
36621: CALL_OW 248
36625: PPUSH
36626: LD_INT 0
36628: PPUSH
36629: CALL 37121 0 6
36633: ST_TO_ADDR
// if not hexes then
36634: LD_VAR 0 12
36638: NOT
36639: IFFALSE 36643
// exit ;
36641: GO 37116
// hex := GetHexInfo ( x , y ) ;
36643: LD_ADDR_VAR 0 15
36647: PUSH
36648: LD_VAR 0 3
36652: PPUSH
36653: LD_VAR 0 4
36657: PPUSH
36658: CALL_OW 546
36662: ST_TO_ADDR
// if hex [ 1 ] then
36663: LD_VAR 0 15
36667: PUSH
36668: LD_INT 1
36670: ARRAY
36671: IFFALSE 36675
// exit ;
36673: GO 37116
// height := hex [ 2 ] ;
36675: LD_ADDR_VAR 0 13
36679: PUSH
36680: LD_VAR 0 15
36684: PUSH
36685: LD_INT 2
36687: ARRAY
36688: ST_TO_ADDR
// for i = 1 to hexes do
36689: LD_ADDR_VAR 0 7
36693: PUSH
36694: DOUBLE
36695: LD_INT 1
36697: DEC
36698: ST_TO_ADDR
36699: LD_VAR 0 12
36703: PUSH
36704: FOR_TO
36705: IFFALSE 37035
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
36707: LD_VAR 0 12
36711: PUSH
36712: LD_VAR 0 7
36716: ARRAY
36717: PUSH
36718: LD_INT 1
36720: ARRAY
36721: PPUSH
36722: LD_VAR 0 12
36726: PUSH
36727: LD_VAR 0 7
36731: ARRAY
36732: PUSH
36733: LD_INT 2
36735: ARRAY
36736: PPUSH
36737: CALL_OW 488
36741: NOT
36742: PUSH
36743: LD_VAR 0 12
36747: PUSH
36748: LD_VAR 0 7
36752: ARRAY
36753: PUSH
36754: LD_INT 1
36756: ARRAY
36757: PPUSH
36758: LD_VAR 0 12
36762: PUSH
36763: LD_VAR 0 7
36767: ARRAY
36768: PUSH
36769: LD_INT 2
36771: ARRAY
36772: PPUSH
36773: CALL_OW 428
36777: PUSH
36778: LD_INT 0
36780: GREATER
36781: OR
36782: PUSH
36783: LD_VAR 0 12
36787: PUSH
36788: LD_VAR 0 7
36792: ARRAY
36793: PUSH
36794: LD_INT 1
36796: ARRAY
36797: PPUSH
36798: LD_VAR 0 12
36802: PUSH
36803: LD_VAR 0 7
36807: ARRAY
36808: PUSH
36809: LD_INT 2
36811: ARRAY
36812: PPUSH
36813: CALL_OW 351
36817: OR
36818: IFFALSE 36824
// exit ;
36820: POP
36821: POP
36822: GO 37116
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36824: LD_ADDR_VAR 0 8
36828: PUSH
36829: LD_VAR 0 12
36833: PUSH
36834: LD_VAR 0 7
36838: ARRAY
36839: PUSH
36840: LD_INT 1
36842: ARRAY
36843: PPUSH
36844: LD_VAR 0 12
36848: PUSH
36849: LD_VAR 0 7
36853: ARRAY
36854: PUSH
36855: LD_INT 2
36857: ARRAY
36858: PPUSH
36859: CALL_OW 546
36863: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36864: LD_VAR 0 8
36868: PUSH
36869: LD_INT 1
36871: ARRAY
36872: PUSH
36873: LD_VAR 0 8
36877: PUSH
36878: LD_INT 2
36880: ARRAY
36881: PUSH
36882: LD_VAR 0 13
36886: PUSH
36887: LD_INT 2
36889: PLUS
36890: GREATER
36891: OR
36892: PUSH
36893: LD_VAR 0 8
36897: PUSH
36898: LD_INT 2
36900: ARRAY
36901: PUSH
36902: LD_VAR 0 13
36906: PUSH
36907: LD_INT 2
36909: MINUS
36910: LESS
36911: OR
36912: PUSH
36913: LD_VAR 0 8
36917: PUSH
36918: LD_INT 3
36920: ARRAY
36921: PUSH
36922: LD_INT 0
36924: PUSH
36925: LD_INT 8
36927: PUSH
36928: LD_INT 9
36930: PUSH
36931: LD_INT 10
36933: PUSH
36934: LD_INT 11
36936: PUSH
36937: LD_INT 12
36939: PUSH
36940: LD_INT 13
36942: PUSH
36943: LD_INT 16
36945: PUSH
36946: LD_INT 17
36948: PUSH
36949: LD_INT 18
36951: PUSH
36952: LD_INT 19
36954: PUSH
36955: LD_INT 20
36957: PUSH
36958: LD_INT 21
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: IN
36976: NOT
36977: OR
36978: PUSH
36979: LD_VAR 0 8
36983: PUSH
36984: LD_INT 5
36986: ARRAY
36987: NOT
36988: OR
36989: PUSH
36990: LD_VAR 0 8
36994: PUSH
36995: LD_INT 6
36997: ARRAY
36998: PUSH
36999: LD_INT 1
37001: PUSH
37002: LD_INT 2
37004: PUSH
37005: LD_INT 7
37007: PUSH
37008: LD_INT 9
37010: PUSH
37011: LD_INT 10
37013: PUSH
37014: LD_INT 11
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: IN
37025: NOT
37026: OR
37027: IFFALSE 37033
// exit ;
37029: POP
37030: POP
37031: GO 37116
// end ;
37033: GO 36704
37035: POP
37036: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37037: LD_VAR 0 9
37041: PPUSH
37042: LD_VAR 0 3
37046: PPUSH
37047: LD_VAR 0 4
37051: PPUSH
37052: LD_INT 20
37054: PPUSH
37055: CALL 29062 0 4
37059: PUSH
37060: LD_INT 4
37062: ARRAY
37063: IFFALSE 37067
// exit ;
37065: GO 37116
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37067: LD_VAR 0 2
37071: PUSH
37072: LD_INT 29
37074: PUSH
37075: LD_INT 30
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: IN
37082: PUSH
37083: LD_VAR 0 3
37087: PPUSH
37088: LD_VAR 0 4
37092: PPUSH
37093: LD_VAR 0 9
37097: PPUSH
37098: CALL_OW 440
37102: NOT
37103: AND
37104: IFFALSE 37108
// exit ;
37106: GO 37116
// result := true ;
37108: LD_ADDR_VAR 0 6
37112: PUSH
37113: LD_INT 1
37115: ST_TO_ADDR
// end ;
37116: LD_VAR 0 6
37120: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37121: LD_INT 0
37123: PPUSH
37124: PPUSH
37125: PPUSH
37126: PPUSH
37127: PPUSH
37128: PPUSH
37129: PPUSH
37130: PPUSH
37131: PPUSH
37132: PPUSH
37133: PPUSH
37134: PPUSH
37135: PPUSH
37136: PPUSH
37137: PPUSH
37138: PPUSH
37139: PPUSH
37140: PPUSH
37141: PPUSH
37142: PPUSH
37143: PPUSH
37144: PPUSH
37145: PPUSH
37146: PPUSH
37147: PPUSH
37148: PPUSH
37149: PPUSH
37150: PPUSH
37151: PPUSH
37152: PPUSH
37153: PPUSH
37154: PPUSH
37155: PPUSH
37156: PPUSH
37157: PPUSH
37158: PPUSH
37159: PPUSH
37160: PPUSH
37161: PPUSH
37162: PPUSH
37163: PPUSH
37164: PPUSH
37165: PPUSH
37166: PPUSH
37167: PPUSH
37168: PPUSH
37169: PPUSH
37170: PPUSH
37171: PPUSH
37172: PPUSH
37173: PPUSH
37174: PPUSH
37175: PPUSH
37176: PPUSH
37177: PPUSH
37178: PPUSH
37179: PPUSH
37180: PPUSH
// result = [ ] ;
37181: LD_ADDR_VAR 0 7
37185: PUSH
37186: EMPTY
37187: ST_TO_ADDR
// temp_list = [ ] ;
37188: LD_ADDR_VAR 0 9
37192: PUSH
37193: EMPTY
37194: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37195: LD_VAR 0 4
37199: PUSH
37200: LD_INT 0
37202: PUSH
37203: LD_INT 1
37205: PUSH
37206: LD_INT 2
37208: PUSH
37209: LD_INT 3
37211: PUSH
37212: LD_INT 4
37214: PUSH
37215: LD_INT 5
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: IN
37226: NOT
37227: PUSH
37228: LD_VAR 0 1
37232: PUSH
37233: LD_INT 0
37235: PUSH
37236: LD_INT 1
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: IN
37243: PUSH
37244: LD_VAR 0 5
37248: PUSH
37249: LD_INT 1
37251: PUSH
37252: LD_INT 2
37254: PUSH
37255: LD_INT 3
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: LIST
37262: IN
37263: NOT
37264: AND
37265: OR
37266: IFFALSE 37270
// exit ;
37268: GO 55661
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37270: LD_VAR 0 1
37274: PUSH
37275: LD_INT 6
37277: PUSH
37278: LD_INT 7
37280: PUSH
37281: LD_INT 8
37283: PUSH
37284: LD_INT 13
37286: PUSH
37287: LD_INT 12
37289: PUSH
37290: LD_INT 15
37292: PUSH
37293: LD_INT 11
37295: PUSH
37296: LD_INT 14
37298: PUSH
37299: LD_INT 10
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: IN
37313: IFFALSE 37323
// btype = b_lab ;
37315: LD_ADDR_VAR 0 1
37319: PUSH
37320: LD_INT 6
37322: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37323: LD_VAR 0 6
37327: PUSH
37328: LD_INT 0
37330: PUSH
37331: LD_INT 1
37333: PUSH
37334: LD_INT 2
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: LIST
37341: IN
37342: NOT
37343: PUSH
37344: LD_VAR 0 1
37348: PUSH
37349: LD_INT 0
37351: PUSH
37352: LD_INT 1
37354: PUSH
37355: LD_INT 2
37357: PUSH
37358: LD_INT 3
37360: PUSH
37361: LD_INT 6
37363: PUSH
37364: LD_INT 36
37366: PUSH
37367: LD_INT 4
37369: PUSH
37370: LD_INT 5
37372: PUSH
37373: LD_INT 31
37375: PUSH
37376: LD_INT 32
37378: PUSH
37379: LD_INT 33
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: IN
37395: NOT
37396: PUSH
37397: LD_VAR 0 6
37401: PUSH
37402: LD_INT 1
37404: EQUAL
37405: AND
37406: OR
37407: PUSH
37408: LD_VAR 0 1
37412: PUSH
37413: LD_INT 2
37415: PUSH
37416: LD_INT 3
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: IN
37423: NOT
37424: PUSH
37425: LD_VAR 0 6
37429: PUSH
37430: LD_INT 2
37432: EQUAL
37433: AND
37434: OR
37435: IFFALSE 37445
// mode = 0 ;
37437: LD_ADDR_VAR 0 6
37441: PUSH
37442: LD_INT 0
37444: ST_TO_ADDR
// case mode of 0 :
37445: LD_VAR 0 6
37449: PUSH
37450: LD_INT 0
37452: DOUBLE
37453: EQUAL
37454: IFTRUE 37458
37456: GO 48911
37458: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37459: LD_ADDR_VAR 0 11
37463: PUSH
37464: LD_INT 0
37466: PUSH
37467: LD_INT 0
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 0
37476: PUSH
37477: LD_INT 1
37479: NEG
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PUSH
37485: LD_INT 1
37487: PUSH
37488: LD_INT 0
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_INT 1
37497: PUSH
37498: LD_INT 1
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 0
37507: PUSH
37508: LD_INT 1
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 1
37517: NEG
37518: PUSH
37519: LD_INT 0
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 1
37528: NEG
37529: PUSH
37530: LD_INT 1
37532: NEG
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: LD_INT 1
37540: NEG
37541: PUSH
37542: LD_INT 2
37544: NEG
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 0
37552: PUSH
37553: LD_INT 2
37555: NEG
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 1
37563: PUSH
37564: LD_INT 1
37566: NEG
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 1
37574: PUSH
37575: LD_INT 2
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 0
37584: PUSH
37585: LD_INT 2
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: PUSH
37592: LD_INT 1
37594: NEG
37595: PUSH
37596: LD_INT 1
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 1
37605: PUSH
37606: LD_INT 3
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 0
37615: PUSH
37616: LD_INT 3
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PUSH
37623: LD_INT 1
37625: NEG
37626: PUSH
37627: LD_INT 2
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37652: LD_ADDR_VAR 0 12
37656: PUSH
37657: LD_INT 0
37659: PUSH
37660: LD_INT 0
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 0
37669: PUSH
37670: LD_INT 1
37672: NEG
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 1
37680: PUSH
37681: LD_INT 0
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 1
37690: PUSH
37691: LD_INT 1
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 0
37700: PUSH
37701: LD_INT 1
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PUSH
37708: LD_INT 1
37710: NEG
37711: PUSH
37712: LD_INT 0
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 1
37721: NEG
37722: PUSH
37723: LD_INT 1
37725: NEG
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 1
37733: PUSH
37734: LD_INT 1
37736: NEG
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 2
37744: PUSH
37745: LD_INT 0
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 2
37754: PUSH
37755: LD_INT 1
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 1
37764: NEG
37765: PUSH
37766: LD_INT 1
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 2
37775: NEG
37776: PUSH
37777: LD_INT 0
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 2
37786: NEG
37787: PUSH
37788: LD_INT 1
37790: NEG
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 2
37798: NEG
37799: PUSH
37800: LD_INT 1
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 3
37809: NEG
37810: PUSH
37811: LD_INT 0
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 3
37820: NEG
37821: PUSH
37822: LD_INT 1
37824: NEG
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37848: LD_ADDR_VAR 0 13
37852: PUSH
37853: LD_INT 0
37855: PUSH
37856: LD_INT 0
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 0
37865: PUSH
37866: LD_INT 1
37868: NEG
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 1
37876: PUSH
37877: LD_INT 0
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 1
37886: PUSH
37887: LD_INT 1
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 0
37896: PUSH
37897: LD_INT 1
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 1
37906: NEG
37907: PUSH
37908: LD_INT 0
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 1
37917: NEG
37918: PUSH
37919: LD_INT 1
37921: NEG
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 1
37929: NEG
37930: PUSH
37931: LD_INT 2
37933: NEG
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 2
37941: PUSH
37942: LD_INT 1
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 2
37951: PUSH
37952: LD_INT 2
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 1
37961: PUSH
37962: LD_INT 2
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 2
37971: NEG
37972: PUSH
37973: LD_INT 1
37975: NEG
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 2
37983: NEG
37984: PUSH
37985: LD_INT 2
37987: NEG
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 2
37995: NEG
37996: PUSH
37997: LD_INT 3
37999: NEG
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 3
38007: NEG
38008: PUSH
38009: LD_INT 2
38011: NEG
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 3
38019: NEG
38020: PUSH
38021: LD_INT 3
38023: NEG
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38047: LD_ADDR_VAR 0 14
38051: PUSH
38052: LD_INT 0
38054: PUSH
38055: LD_INT 0
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 0
38064: PUSH
38065: LD_INT 1
38067: NEG
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 1
38075: PUSH
38076: LD_INT 0
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 1
38085: PUSH
38086: LD_INT 1
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 0
38095: PUSH
38096: LD_INT 1
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 1
38105: NEG
38106: PUSH
38107: LD_INT 0
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 1
38116: NEG
38117: PUSH
38118: LD_INT 1
38120: NEG
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 1
38128: NEG
38129: PUSH
38130: LD_INT 2
38132: NEG
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 0
38140: PUSH
38141: LD_INT 2
38143: NEG
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 1
38151: PUSH
38152: LD_INT 1
38154: NEG
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 1
38162: PUSH
38163: LD_INT 2
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 0
38172: PUSH
38173: LD_INT 2
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 1
38182: NEG
38183: PUSH
38184: LD_INT 1
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 1
38193: NEG
38194: PUSH
38195: LD_INT 3
38197: NEG
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 0
38205: PUSH
38206: LD_INT 3
38208: NEG
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 1
38216: PUSH
38217: LD_INT 2
38219: NEG
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38243: LD_ADDR_VAR 0 15
38247: PUSH
38248: LD_INT 0
38250: PUSH
38251: LD_INT 0
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 0
38260: PUSH
38261: LD_INT 1
38263: NEG
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 1
38271: PUSH
38272: LD_INT 0
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 1
38281: PUSH
38282: LD_INT 1
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 0
38291: PUSH
38292: LD_INT 1
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 1
38301: NEG
38302: PUSH
38303: LD_INT 0
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 1
38312: NEG
38313: PUSH
38314: LD_INT 1
38316: NEG
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 1
38324: PUSH
38325: LD_INT 1
38327: NEG
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 2
38335: PUSH
38336: LD_INT 0
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 2
38345: PUSH
38346: LD_INT 1
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 1
38355: NEG
38356: PUSH
38357: LD_INT 1
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: LD_INT 2
38366: NEG
38367: PUSH
38368: LD_INT 0
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: LD_INT 2
38377: NEG
38378: PUSH
38379: LD_INT 1
38381: NEG
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: LD_INT 2
38389: PUSH
38390: LD_INT 1
38392: NEG
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 3
38400: PUSH
38401: LD_INT 0
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: LD_INT 3
38410: PUSH
38411: LD_INT 1
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38436: LD_ADDR_VAR 0 16
38440: PUSH
38441: LD_INT 0
38443: PUSH
38444: LD_INT 0
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: LD_INT 0
38453: PUSH
38454: LD_INT 1
38456: NEG
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 1
38464: PUSH
38465: LD_INT 0
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 1
38474: PUSH
38475: LD_INT 1
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 0
38484: PUSH
38485: LD_INT 1
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: PUSH
38492: LD_INT 1
38494: NEG
38495: PUSH
38496: LD_INT 0
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 1
38505: NEG
38506: PUSH
38507: LD_INT 1
38509: NEG
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 1
38517: NEG
38518: PUSH
38519: LD_INT 2
38521: NEG
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: LD_INT 2
38529: PUSH
38530: LD_INT 1
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 2
38539: PUSH
38540: LD_INT 2
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 1
38549: PUSH
38550: LD_INT 2
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 2
38559: NEG
38560: PUSH
38561: LD_INT 1
38563: NEG
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 2
38571: NEG
38572: PUSH
38573: LD_INT 2
38575: NEG
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 3
38583: PUSH
38584: LD_INT 2
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 3
38593: PUSH
38594: LD_INT 3
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 2
38603: PUSH
38604: LD_INT 3
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38629: LD_ADDR_VAR 0 17
38633: PUSH
38634: LD_INT 0
38636: PUSH
38637: LD_INT 0
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 0
38646: PUSH
38647: LD_INT 1
38649: NEG
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 1
38657: PUSH
38658: LD_INT 0
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 1
38667: PUSH
38668: LD_INT 1
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 0
38677: PUSH
38678: LD_INT 1
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 1
38687: NEG
38688: PUSH
38689: LD_INT 0
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 1
38698: NEG
38699: PUSH
38700: LD_INT 1
38702: NEG
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 1
38710: NEG
38711: PUSH
38712: LD_INT 2
38714: NEG
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 0
38722: PUSH
38723: LD_INT 2
38725: NEG
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 1
38733: PUSH
38734: LD_INT 1
38736: NEG
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 2
38744: PUSH
38745: LD_INT 0
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 2
38754: PUSH
38755: LD_INT 1
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 2
38764: PUSH
38765: LD_INT 2
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 1
38774: PUSH
38775: LD_INT 2
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 0
38784: PUSH
38785: LD_INT 2
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 1
38794: NEG
38795: PUSH
38796: LD_INT 1
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 2
38805: NEG
38806: PUSH
38807: LD_INT 0
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 2
38816: NEG
38817: PUSH
38818: LD_INT 1
38820: NEG
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 2
38828: NEG
38829: PUSH
38830: LD_INT 2
38832: NEG
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38859: LD_ADDR_VAR 0 18
38863: PUSH
38864: LD_INT 0
38866: PUSH
38867: LD_INT 0
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 0
38876: PUSH
38877: LD_INT 1
38879: NEG
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 1
38887: PUSH
38888: LD_INT 0
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 1
38897: PUSH
38898: LD_INT 1
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 0
38907: PUSH
38908: LD_INT 1
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 1
38917: NEG
38918: PUSH
38919: LD_INT 0
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 1
38928: NEG
38929: PUSH
38930: LD_INT 1
38932: NEG
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 1
38940: NEG
38941: PUSH
38942: LD_INT 2
38944: NEG
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 0
38952: PUSH
38953: LD_INT 2
38955: NEG
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 1
38963: PUSH
38964: LD_INT 1
38966: NEG
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 2
38974: PUSH
38975: LD_INT 0
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 2
38984: PUSH
38985: LD_INT 1
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 2
38994: PUSH
38995: LD_INT 2
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 1
39004: PUSH
39005: LD_INT 2
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 0
39014: PUSH
39015: LD_INT 2
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 1
39024: NEG
39025: PUSH
39026: LD_INT 1
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: LD_INT 2
39035: NEG
39036: PUSH
39037: LD_INT 0
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 2
39046: NEG
39047: PUSH
39048: LD_INT 1
39050: NEG
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 2
39058: NEG
39059: PUSH
39060: LD_INT 2
39062: NEG
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39089: LD_ADDR_VAR 0 19
39093: PUSH
39094: LD_INT 0
39096: PUSH
39097: LD_INT 0
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 0
39106: PUSH
39107: LD_INT 1
39109: NEG
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 1
39117: PUSH
39118: LD_INT 0
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 1
39127: PUSH
39128: LD_INT 1
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 0
39137: PUSH
39138: LD_INT 1
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 1
39147: NEG
39148: PUSH
39149: LD_INT 0
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 1
39158: NEG
39159: PUSH
39160: LD_INT 1
39162: NEG
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 1
39170: NEG
39171: PUSH
39172: LD_INT 2
39174: NEG
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 0
39182: PUSH
39183: LD_INT 2
39185: NEG
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 1
39193: PUSH
39194: LD_INT 1
39196: NEG
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 2
39204: PUSH
39205: LD_INT 0
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 2
39214: PUSH
39215: LD_INT 1
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 2
39224: PUSH
39225: LD_INT 2
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 1
39234: PUSH
39235: LD_INT 2
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 0
39244: PUSH
39245: LD_INT 2
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 1
39254: NEG
39255: PUSH
39256: LD_INT 1
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 2
39265: NEG
39266: PUSH
39267: LD_INT 0
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 2
39276: NEG
39277: PUSH
39278: LD_INT 1
39280: NEG
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 2
39288: NEG
39289: PUSH
39290: LD_INT 2
39292: NEG
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39319: LD_ADDR_VAR 0 20
39323: PUSH
39324: LD_INT 0
39326: PUSH
39327: LD_INT 0
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 0
39336: PUSH
39337: LD_INT 1
39339: NEG
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 1
39347: PUSH
39348: LD_INT 0
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 1
39357: PUSH
39358: LD_INT 1
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 0
39367: PUSH
39368: LD_INT 1
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 1
39377: NEG
39378: PUSH
39379: LD_INT 0
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 1
39388: NEG
39389: PUSH
39390: LD_INT 1
39392: NEG
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 1
39400: NEG
39401: PUSH
39402: LD_INT 2
39404: NEG
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 0
39412: PUSH
39413: LD_INT 2
39415: NEG
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 1
39423: PUSH
39424: LD_INT 1
39426: NEG
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 2
39434: PUSH
39435: LD_INT 0
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 2
39444: PUSH
39445: LD_INT 1
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 2
39454: PUSH
39455: LD_INT 2
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 1
39464: PUSH
39465: LD_INT 2
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 0
39474: PUSH
39475: LD_INT 2
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 1
39484: NEG
39485: PUSH
39486: LD_INT 1
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 2
39495: NEG
39496: PUSH
39497: LD_INT 0
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 2
39506: NEG
39507: PUSH
39508: LD_INT 1
39510: NEG
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: LD_INT 2
39518: NEG
39519: PUSH
39520: LD_INT 2
39522: NEG
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39549: LD_ADDR_VAR 0 21
39553: PUSH
39554: LD_INT 0
39556: PUSH
39557: LD_INT 0
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 0
39566: PUSH
39567: LD_INT 1
39569: NEG
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 1
39577: PUSH
39578: LD_INT 0
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 1
39587: PUSH
39588: LD_INT 1
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 0
39597: PUSH
39598: LD_INT 1
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 1
39607: NEG
39608: PUSH
39609: LD_INT 0
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 1
39618: NEG
39619: PUSH
39620: LD_INT 1
39622: NEG
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 1
39630: NEG
39631: PUSH
39632: LD_INT 2
39634: NEG
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 0
39642: PUSH
39643: LD_INT 2
39645: NEG
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 1
39653: PUSH
39654: LD_INT 1
39656: NEG
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 2
39664: PUSH
39665: LD_INT 0
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 2
39674: PUSH
39675: LD_INT 1
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 2
39684: PUSH
39685: LD_INT 2
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 1
39694: PUSH
39695: LD_INT 2
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 0
39704: PUSH
39705: LD_INT 2
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 1
39714: NEG
39715: PUSH
39716: LD_INT 1
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 2
39725: NEG
39726: PUSH
39727: LD_INT 0
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 2
39736: NEG
39737: PUSH
39738: LD_INT 1
39740: NEG
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 2
39748: NEG
39749: PUSH
39750: LD_INT 2
39752: NEG
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39779: LD_ADDR_VAR 0 22
39783: PUSH
39784: LD_INT 0
39786: PUSH
39787: LD_INT 0
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 0
39796: PUSH
39797: LD_INT 1
39799: NEG
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 1
39807: PUSH
39808: LD_INT 0
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 1
39817: PUSH
39818: LD_INT 1
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 0
39827: PUSH
39828: LD_INT 1
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 1
39837: NEG
39838: PUSH
39839: LD_INT 0
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 1
39848: NEG
39849: PUSH
39850: LD_INT 1
39852: NEG
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 1
39860: NEG
39861: PUSH
39862: LD_INT 2
39864: NEG
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 0
39872: PUSH
39873: LD_INT 2
39875: NEG
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 1
39883: PUSH
39884: LD_INT 1
39886: NEG
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 2
39894: PUSH
39895: LD_INT 0
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 2
39904: PUSH
39905: LD_INT 1
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 2
39914: PUSH
39915: LD_INT 2
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 1
39924: PUSH
39925: LD_INT 2
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 0
39934: PUSH
39935: LD_INT 2
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 1
39944: NEG
39945: PUSH
39946: LD_INT 1
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 2
39955: NEG
39956: PUSH
39957: LD_INT 0
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 2
39966: NEG
39967: PUSH
39968: LD_INT 1
39970: NEG
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 2
39978: NEG
39979: PUSH
39980: LD_INT 2
39982: NEG
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40009: LD_ADDR_VAR 0 23
40013: PUSH
40014: LD_INT 0
40016: PUSH
40017: LD_INT 0
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 0
40026: PUSH
40027: LD_INT 1
40029: NEG
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 1
40037: PUSH
40038: LD_INT 0
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 1
40047: PUSH
40048: LD_INT 1
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 0
40057: PUSH
40058: LD_INT 1
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 1
40067: NEG
40068: PUSH
40069: LD_INT 0
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 1
40078: NEG
40079: PUSH
40080: LD_INT 1
40082: NEG
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 1
40090: NEG
40091: PUSH
40092: LD_INT 2
40094: NEG
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 0
40102: PUSH
40103: LD_INT 2
40105: NEG
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 1
40113: PUSH
40114: LD_INT 1
40116: NEG
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 2
40124: PUSH
40125: LD_INT 0
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 2
40134: PUSH
40135: LD_INT 1
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 2
40144: PUSH
40145: LD_INT 2
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 1
40154: PUSH
40155: LD_INT 2
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 0
40164: PUSH
40165: LD_INT 2
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 1
40174: NEG
40175: PUSH
40176: LD_INT 1
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 2
40185: NEG
40186: PUSH
40187: LD_INT 0
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 2
40196: NEG
40197: PUSH
40198: LD_INT 1
40200: NEG
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 2
40208: NEG
40209: PUSH
40210: LD_INT 2
40212: NEG
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 2
40220: NEG
40221: PUSH
40222: LD_INT 3
40224: NEG
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 1
40232: NEG
40233: PUSH
40234: LD_INT 3
40236: NEG
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 1
40244: PUSH
40245: LD_INT 2
40247: NEG
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 2
40255: PUSH
40256: LD_INT 1
40258: NEG
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40289: LD_ADDR_VAR 0 24
40293: PUSH
40294: LD_INT 0
40296: PUSH
40297: LD_INT 0
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 0
40306: PUSH
40307: LD_INT 1
40309: NEG
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 1
40317: PUSH
40318: LD_INT 0
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 1
40327: PUSH
40328: LD_INT 1
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 0
40337: PUSH
40338: LD_INT 1
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 1
40347: NEG
40348: PUSH
40349: LD_INT 0
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 1
40358: NEG
40359: PUSH
40360: LD_INT 1
40362: NEG
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 1
40370: NEG
40371: PUSH
40372: LD_INT 2
40374: NEG
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 0
40382: PUSH
40383: LD_INT 2
40385: NEG
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 1
40393: PUSH
40394: LD_INT 1
40396: NEG
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 2
40404: PUSH
40405: LD_INT 0
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 2
40414: PUSH
40415: LD_INT 1
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 2
40424: PUSH
40425: LD_INT 2
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 1
40434: PUSH
40435: LD_INT 2
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 0
40444: PUSH
40445: LD_INT 2
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 1
40454: NEG
40455: PUSH
40456: LD_INT 1
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 2
40465: NEG
40466: PUSH
40467: LD_INT 0
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 2
40476: NEG
40477: PUSH
40478: LD_INT 1
40480: NEG
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 2
40488: NEG
40489: PUSH
40490: LD_INT 2
40492: NEG
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 1
40500: PUSH
40501: LD_INT 2
40503: NEG
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 2
40511: PUSH
40512: LD_INT 1
40514: NEG
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 3
40522: PUSH
40523: LD_INT 1
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 3
40532: PUSH
40533: LD_INT 2
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40565: LD_ADDR_VAR 0 25
40569: PUSH
40570: LD_INT 0
40572: PUSH
40573: LD_INT 0
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 0
40582: PUSH
40583: LD_INT 1
40585: NEG
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 1
40593: PUSH
40594: LD_INT 0
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 1
40603: PUSH
40604: LD_INT 1
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 0
40613: PUSH
40614: LD_INT 1
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 1
40623: NEG
40624: PUSH
40625: LD_INT 0
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 1
40634: NEG
40635: PUSH
40636: LD_INT 1
40638: NEG
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 1
40646: NEG
40647: PUSH
40648: LD_INT 2
40650: NEG
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: LD_INT 2
40661: NEG
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 1
40669: PUSH
40670: LD_INT 1
40672: NEG
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 2
40680: PUSH
40681: LD_INT 0
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 2
40690: PUSH
40691: LD_INT 1
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 2
40700: PUSH
40701: LD_INT 2
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 1
40710: PUSH
40711: LD_INT 2
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 0
40720: PUSH
40721: LD_INT 2
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 1
40730: NEG
40731: PUSH
40732: LD_INT 1
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 2
40741: NEG
40742: PUSH
40743: LD_INT 0
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 2
40752: NEG
40753: PUSH
40754: LD_INT 1
40756: NEG
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 2
40764: NEG
40765: PUSH
40766: LD_INT 2
40768: NEG
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 3
40776: PUSH
40777: LD_INT 1
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 3
40786: PUSH
40787: LD_INT 2
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 2
40796: PUSH
40797: LD_INT 3
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 1
40806: PUSH
40807: LD_INT 3
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40839: LD_ADDR_VAR 0 26
40843: PUSH
40844: LD_INT 0
40846: PUSH
40847: LD_INT 0
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 0
40856: PUSH
40857: LD_INT 1
40859: NEG
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 1
40867: PUSH
40868: LD_INT 0
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 1
40877: PUSH
40878: LD_INT 1
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 0
40887: PUSH
40888: LD_INT 1
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 1
40897: NEG
40898: PUSH
40899: LD_INT 0
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 1
40908: NEG
40909: PUSH
40910: LD_INT 1
40912: NEG
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 1
40920: NEG
40921: PUSH
40922: LD_INT 2
40924: NEG
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: LD_INT 2
40935: NEG
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 1
40943: PUSH
40944: LD_INT 1
40946: NEG
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 2
40954: PUSH
40955: LD_INT 0
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 2
40964: PUSH
40965: LD_INT 1
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 2
40974: PUSH
40975: LD_INT 2
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 1
40984: PUSH
40985: LD_INT 2
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 0
40994: PUSH
40995: LD_INT 2
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 1
41004: NEG
41005: PUSH
41006: LD_INT 1
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 2
41015: NEG
41016: PUSH
41017: LD_INT 0
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 2
41026: NEG
41027: PUSH
41028: LD_INT 1
41030: NEG
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 2
41038: NEG
41039: PUSH
41040: LD_INT 2
41042: NEG
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 2
41050: PUSH
41051: LD_INT 3
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 1
41060: PUSH
41061: LD_INT 3
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 1
41070: NEG
41071: PUSH
41072: LD_INT 2
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 2
41081: NEG
41082: PUSH
41083: LD_INT 1
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41115: LD_ADDR_VAR 0 27
41119: PUSH
41120: LD_INT 0
41122: PUSH
41123: LD_INT 0
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 0
41132: PUSH
41133: LD_INT 1
41135: NEG
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 1
41143: PUSH
41144: LD_INT 0
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 1
41153: PUSH
41154: LD_INT 1
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 0
41163: PUSH
41164: LD_INT 1
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 1
41173: NEG
41174: PUSH
41175: LD_INT 0
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 1
41184: NEG
41185: PUSH
41186: LD_INT 1
41188: NEG
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 1
41196: NEG
41197: PUSH
41198: LD_INT 2
41200: NEG
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 0
41208: PUSH
41209: LD_INT 2
41211: NEG
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 1
41219: PUSH
41220: LD_INT 1
41222: NEG
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 2
41230: PUSH
41231: LD_INT 0
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 2
41240: PUSH
41241: LD_INT 1
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 2
41250: PUSH
41251: LD_INT 2
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 1
41260: PUSH
41261: LD_INT 2
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 0
41270: PUSH
41271: LD_INT 2
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 1
41280: NEG
41281: PUSH
41282: LD_INT 1
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 2
41291: NEG
41292: PUSH
41293: LD_INT 0
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 2
41302: NEG
41303: PUSH
41304: LD_INT 1
41306: NEG
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 2
41314: NEG
41315: PUSH
41316: LD_INT 2
41318: NEG
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 1
41326: NEG
41327: PUSH
41328: LD_INT 2
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 2
41337: NEG
41338: PUSH
41339: LD_INT 1
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 3
41348: NEG
41349: PUSH
41350: LD_INT 1
41352: NEG
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 3
41360: NEG
41361: PUSH
41362: LD_INT 2
41364: NEG
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41395: LD_ADDR_VAR 0 28
41399: PUSH
41400: LD_INT 0
41402: PUSH
41403: LD_INT 0
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 0
41412: PUSH
41413: LD_INT 1
41415: NEG
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 1
41423: PUSH
41424: LD_INT 0
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 1
41433: PUSH
41434: LD_INT 1
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 0
41443: PUSH
41444: LD_INT 1
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 1
41453: NEG
41454: PUSH
41455: LD_INT 0
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 1
41464: NEG
41465: PUSH
41466: LD_INT 1
41468: NEG
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 1
41476: NEG
41477: PUSH
41478: LD_INT 2
41480: NEG
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 0
41488: PUSH
41489: LD_INT 2
41491: NEG
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 1
41499: PUSH
41500: LD_INT 1
41502: NEG
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 2
41510: PUSH
41511: LD_INT 0
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 2
41520: PUSH
41521: LD_INT 1
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 2
41530: PUSH
41531: LD_INT 2
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 1
41540: PUSH
41541: LD_INT 2
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 0
41550: PUSH
41551: LD_INT 2
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 1
41560: NEG
41561: PUSH
41562: LD_INT 1
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 2
41571: NEG
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 2
41582: NEG
41583: PUSH
41584: LD_INT 1
41586: NEG
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 2
41594: NEG
41595: PUSH
41596: LD_INT 2
41598: NEG
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 2
41606: NEG
41607: PUSH
41608: LD_INT 3
41610: NEG
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 1
41618: NEG
41619: PUSH
41620: LD_INT 3
41622: NEG
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 3
41630: NEG
41631: PUSH
41632: LD_INT 1
41634: NEG
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 3
41642: NEG
41643: PUSH
41644: LD_INT 2
41646: NEG
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41677: LD_ADDR_VAR 0 29
41681: PUSH
41682: LD_INT 0
41684: PUSH
41685: LD_INT 0
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 0
41694: PUSH
41695: LD_INT 1
41697: NEG
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 1
41705: PUSH
41706: LD_INT 0
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 1
41715: PUSH
41716: LD_INT 1
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 0
41725: PUSH
41726: LD_INT 1
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 1
41735: NEG
41736: PUSH
41737: LD_INT 0
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 1
41746: NEG
41747: PUSH
41748: LD_INT 1
41750: NEG
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 1
41758: NEG
41759: PUSH
41760: LD_INT 2
41762: NEG
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 0
41770: PUSH
41771: LD_INT 2
41773: NEG
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 1
41781: PUSH
41782: LD_INT 1
41784: NEG
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 2
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 2
41802: PUSH
41803: LD_INT 1
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 1
41812: PUSH
41813: LD_INT 2
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 0
41822: PUSH
41823: LD_INT 2
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 1
41832: NEG
41833: PUSH
41834: LD_INT 1
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 2
41843: NEG
41844: PUSH
41845: LD_INT 1
41847: NEG
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 2
41855: NEG
41856: PUSH
41857: LD_INT 2
41859: NEG
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 2
41867: NEG
41868: PUSH
41869: LD_INT 3
41871: NEG
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 2
41879: PUSH
41880: LD_INT 1
41882: NEG
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 3
41890: PUSH
41891: LD_INT 1
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 1
41900: PUSH
41901: LD_INT 3
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 1
41910: NEG
41911: PUSH
41912: LD_INT 2
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 3
41921: NEG
41922: PUSH
41923: LD_INT 2
41925: NEG
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41956: LD_ADDR_VAR 0 30
41960: PUSH
41961: LD_INT 0
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 0
41973: PUSH
41974: LD_INT 1
41976: NEG
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 1
41984: PUSH
41985: LD_INT 0
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 1
41994: PUSH
41995: LD_INT 1
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 0
42004: PUSH
42005: LD_INT 1
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 1
42014: NEG
42015: PUSH
42016: LD_INT 0
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 1
42025: NEG
42026: PUSH
42027: LD_INT 1
42029: NEG
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 1
42037: NEG
42038: PUSH
42039: LD_INT 2
42041: NEG
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 0
42049: PUSH
42050: LD_INT 2
42052: NEG
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 1
42060: PUSH
42061: LD_INT 1
42063: NEG
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 2
42071: PUSH
42072: LD_INT 0
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 2
42081: PUSH
42082: LD_INT 1
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 2
42091: PUSH
42092: LD_INT 2
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 1
42101: PUSH
42102: LD_INT 2
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 1
42111: NEG
42112: PUSH
42113: LD_INT 1
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 2
42122: NEG
42123: PUSH
42124: LD_INT 0
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 2
42133: NEG
42134: PUSH
42135: LD_INT 1
42137: NEG
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 1
42145: NEG
42146: PUSH
42147: LD_INT 3
42149: NEG
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 1
42157: PUSH
42158: LD_INT 2
42160: NEG
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 3
42168: PUSH
42169: LD_INT 2
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 2
42178: PUSH
42179: LD_INT 3
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 2
42188: NEG
42189: PUSH
42190: LD_INT 1
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 3
42199: NEG
42200: PUSH
42201: LD_INT 1
42203: NEG
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42234: LD_ADDR_VAR 0 31
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: LD_INT 0
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 0
42251: PUSH
42252: LD_INT 1
42254: NEG
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 1
42262: PUSH
42263: LD_INT 0
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 1
42272: PUSH
42273: LD_INT 1
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 0
42282: PUSH
42283: LD_INT 1
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 1
42292: NEG
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 1
42303: NEG
42304: PUSH
42305: LD_INT 1
42307: NEG
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 1
42315: NEG
42316: PUSH
42317: LD_INT 2
42319: NEG
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 1
42327: PUSH
42328: LD_INT 1
42330: NEG
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 2
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 2
42348: PUSH
42349: LD_INT 1
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 2
42358: PUSH
42359: LD_INT 2
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 1
42368: PUSH
42369: LD_INT 2
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 0
42378: PUSH
42379: LD_INT 2
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 1
42388: NEG
42389: PUSH
42390: LD_INT 1
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 2
42399: NEG
42400: PUSH
42401: LD_INT 1
42403: NEG
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 2
42411: NEG
42412: PUSH
42413: LD_INT 2
42415: NEG
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 2
42423: NEG
42424: PUSH
42425: LD_INT 3
42427: NEG
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 2
42435: PUSH
42436: LD_INT 1
42438: NEG
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 3
42446: PUSH
42447: LD_INT 1
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 1
42456: PUSH
42457: LD_INT 3
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 1
42466: NEG
42467: PUSH
42468: LD_INT 2
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 3
42477: NEG
42478: PUSH
42479: LD_INT 2
42481: NEG
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42512: LD_ADDR_VAR 0 32
42516: PUSH
42517: LD_INT 0
42519: PUSH
42520: LD_INT 0
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 0
42529: PUSH
42530: LD_INT 1
42532: NEG
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 1
42540: PUSH
42541: LD_INT 0
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 1
42550: PUSH
42551: LD_INT 1
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 0
42560: PUSH
42561: LD_INT 1
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 1
42570: NEG
42571: PUSH
42572: LD_INT 0
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 1
42581: NEG
42582: PUSH
42583: LD_INT 1
42585: NEG
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 1
42593: NEG
42594: PUSH
42595: LD_INT 2
42597: NEG
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 0
42605: PUSH
42606: LD_INT 2
42608: NEG
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 1
42616: PUSH
42617: LD_INT 1
42619: NEG
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 2
42627: PUSH
42628: LD_INT 1
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 2
42637: PUSH
42638: LD_INT 2
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 1
42647: PUSH
42648: LD_INT 2
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 0
42657: PUSH
42658: LD_INT 2
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 1
42667: NEG
42668: PUSH
42669: LD_INT 1
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 2
42678: NEG
42679: PUSH
42680: LD_INT 0
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 2
42689: NEG
42690: PUSH
42691: LD_INT 1
42693: NEG
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 1
42701: NEG
42702: PUSH
42703: LD_INT 3
42705: NEG
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 1
42713: PUSH
42714: LD_INT 2
42716: NEG
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 3
42724: PUSH
42725: LD_INT 2
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 2
42734: PUSH
42735: LD_INT 3
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 2
42744: NEG
42745: PUSH
42746: LD_INT 1
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 3
42755: NEG
42756: PUSH
42757: LD_INT 1
42759: NEG
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42790: LD_ADDR_VAR 0 33
42794: PUSH
42795: LD_INT 0
42797: PUSH
42798: LD_INT 0
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 0
42807: PUSH
42808: LD_INT 1
42810: NEG
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 1
42818: PUSH
42819: LD_INT 0
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 1
42828: PUSH
42829: LD_INT 1
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 0
42838: PUSH
42839: LD_INT 1
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 1
42848: NEG
42849: PUSH
42850: LD_INT 0
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 1
42859: NEG
42860: PUSH
42861: LD_INT 1
42863: NEG
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 1
42871: NEG
42872: PUSH
42873: LD_INT 2
42875: NEG
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 1
42883: PUSH
42884: LD_INT 1
42886: NEG
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 2
42894: PUSH
42895: LD_INT 0
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 2
42904: PUSH
42905: LD_INT 1
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 1
42914: PUSH
42915: LD_INT 2
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 0
42924: PUSH
42925: LD_INT 2
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 1
42934: NEG
42935: PUSH
42936: LD_INT 1
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 2
42945: NEG
42946: PUSH
42947: LD_INT 0
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 2
42956: NEG
42957: PUSH
42958: LD_INT 1
42960: NEG
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 2
42968: NEG
42969: PUSH
42970: LD_INT 2
42972: NEG
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 2
42980: NEG
42981: PUSH
42982: LD_INT 3
42984: NEG
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 2
42992: PUSH
42993: LD_INT 1
42995: NEG
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 3
43003: PUSH
43004: LD_INT 1
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 1
43013: PUSH
43014: LD_INT 3
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 1
43023: NEG
43024: PUSH
43025: LD_INT 2
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 3
43034: NEG
43035: PUSH
43036: LD_INT 2
43038: NEG
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43069: LD_ADDR_VAR 0 34
43073: PUSH
43074: LD_INT 0
43076: PUSH
43077: LD_INT 0
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 0
43086: PUSH
43087: LD_INT 1
43089: NEG
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 1
43097: PUSH
43098: LD_INT 0
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 1
43107: PUSH
43108: LD_INT 1
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 0
43117: PUSH
43118: LD_INT 1
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 1
43127: NEG
43128: PUSH
43129: LD_INT 0
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 1
43138: NEG
43139: PUSH
43140: LD_INT 1
43142: NEG
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 1
43150: NEG
43151: PUSH
43152: LD_INT 2
43154: NEG
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 0
43162: PUSH
43163: LD_INT 2
43165: NEG
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 1
43173: PUSH
43174: LD_INT 1
43176: NEG
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 2
43184: PUSH
43185: LD_INT 1
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 2
43194: PUSH
43195: LD_INT 2
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 1
43204: PUSH
43205: LD_INT 2
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 1
43214: NEG
43215: PUSH
43216: LD_INT 1
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 2
43225: NEG
43226: PUSH
43227: LD_INT 0
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 2
43236: NEG
43237: PUSH
43238: LD_INT 1
43240: NEG
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 2
43248: NEG
43249: PUSH
43250: LD_INT 2
43252: NEG
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 1
43260: NEG
43261: PUSH
43262: LD_INT 3
43264: NEG
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 1
43272: PUSH
43273: LD_INT 2
43275: NEG
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 3
43283: PUSH
43284: LD_INT 2
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 2
43293: PUSH
43294: LD_INT 3
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 2
43303: NEG
43304: PUSH
43305: LD_INT 1
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 3
43314: NEG
43315: PUSH
43316: LD_INT 1
43318: NEG
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43349: LD_ADDR_VAR 0 35
43353: PUSH
43354: LD_INT 0
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 0
43366: PUSH
43367: LD_INT 1
43369: NEG
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 1
43377: PUSH
43378: LD_INT 0
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 1
43387: PUSH
43388: LD_INT 1
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 0
43397: PUSH
43398: LD_INT 1
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 1
43407: NEG
43408: PUSH
43409: LD_INT 0
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 1
43418: NEG
43419: PUSH
43420: LD_INT 1
43422: NEG
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 2
43430: PUSH
43431: LD_INT 1
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 2
43440: NEG
43441: PUSH
43442: LD_INT 1
43444: NEG
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43461: LD_ADDR_VAR 0 36
43465: PUSH
43466: LD_INT 0
43468: PUSH
43469: LD_INT 0
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 0
43478: PUSH
43479: LD_INT 1
43481: NEG
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 1
43489: PUSH
43490: LD_INT 0
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 1
43499: PUSH
43500: LD_INT 1
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 0
43509: PUSH
43510: LD_INT 1
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 1
43519: NEG
43520: PUSH
43521: LD_INT 0
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 1
43530: NEG
43531: PUSH
43532: LD_INT 1
43534: NEG
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 1
43542: NEG
43543: PUSH
43544: LD_INT 2
43546: NEG
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 1
43554: PUSH
43555: LD_INT 2
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43573: LD_ADDR_VAR 0 37
43577: PUSH
43578: LD_INT 0
43580: PUSH
43581: LD_INT 0
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 0
43590: PUSH
43591: LD_INT 1
43593: NEG
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 1
43601: PUSH
43602: LD_INT 0
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 1
43611: PUSH
43612: LD_INT 1
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 0
43621: PUSH
43622: LD_INT 1
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 1
43631: NEG
43632: PUSH
43633: LD_INT 0
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 1
43642: NEG
43643: PUSH
43644: LD_INT 1
43646: NEG
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 1
43654: PUSH
43655: LD_INT 1
43657: NEG
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 1
43665: NEG
43666: PUSH
43667: LD_INT 1
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43685: LD_ADDR_VAR 0 38
43689: PUSH
43690: LD_INT 0
43692: PUSH
43693: LD_INT 0
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: LD_INT 1
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 1
43713: PUSH
43714: LD_INT 0
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 1
43723: PUSH
43724: LD_INT 1
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 0
43733: PUSH
43734: LD_INT 1
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 1
43743: NEG
43744: PUSH
43745: LD_INT 0
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 1
43754: NEG
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 2
43766: PUSH
43767: LD_INT 1
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 2
43776: NEG
43777: PUSH
43778: LD_INT 1
43780: NEG
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43797: LD_ADDR_VAR 0 39
43801: PUSH
43802: LD_INT 0
43804: PUSH
43805: LD_INT 0
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 0
43814: PUSH
43815: LD_INT 1
43817: NEG
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 1
43825: PUSH
43826: LD_INT 0
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: LD_INT 1
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 0
43845: PUSH
43846: LD_INT 1
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 1
43855: NEG
43856: PUSH
43857: LD_INT 0
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 1
43866: NEG
43867: PUSH
43868: LD_INT 1
43870: NEG
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 1
43878: NEG
43879: PUSH
43880: LD_INT 2
43882: NEG
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 1
43890: PUSH
43891: LD_INT 2
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43909: LD_ADDR_VAR 0 40
43913: PUSH
43914: LD_INT 0
43916: PUSH
43917: LD_INT 0
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 0
43926: PUSH
43927: LD_INT 1
43929: NEG
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 1
43937: PUSH
43938: LD_INT 0
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 1
43947: PUSH
43948: LD_INT 1
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 0
43957: PUSH
43958: LD_INT 1
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 1
43967: NEG
43968: PUSH
43969: LD_INT 0
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 1
43978: NEG
43979: PUSH
43980: LD_INT 1
43982: NEG
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 1
43990: PUSH
43991: LD_INT 1
43993: NEG
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 1
44001: NEG
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44021: LD_ADDR_VAR 0 41
44025: PUSH
44026: LD_INT 0
44028: PUSH
44029: LD_INT 0
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 0
44038: PUSH
44039: LD_INT 1
44041: NEG
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 1
44049: PUSH
44050: LD_INT 0
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 1
44059: PUSH
44060: LD_INT 1
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 0
44069: PUSH
44070: LD_INT 1
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: NEG
44080: PUSH
44081: LD_INT 0
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 1
44090: NEG
44091: PUSH
44092: LD_INT 1
44094: NEG
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 1
44102: NEG
44103: PUSH
44104: LD_INT 2
44106: NEG
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 1
44114: PUSH
44115: LD_INT 1
44117: NEG
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 2
44125: PUSH
44126: LD_INT 0
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 2
44135: PUSH
44136: LD_INT 1
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 2
44145: PUSH
44146: LD_INT 2
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: LD_INT 2
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 1
44165: NEG
44166: PUSH
44167: LD_INT 1
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 2
44176: NEG
44177: PUSH
44178: LD_INT 0
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 2
44187: NEG
44188: PUSH
44189: LD_INT 1
44191: NEG
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 2
44199: NEG
44200: PUSH
44201: LD_INT 2
44203: NEG
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 2
44211: NEG
44212: PUSH
44213: LD_INT 3
44215: NEG
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 2
44223: PUSH
44224: LD_INT 1
44226: NEG
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 3
44234: PUSH
44235: LD_INT 0
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 3
44244: PUSH
44245: LD_INT 1
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 3
44254: PUSH
44255: LD_INT 2
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 3
44264: PUSH
44265: LD_INT 3
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 2
44274: PUSH
44275: LD_INT 3
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 2
44284: NEG
44285: PUSH
44286: LD_INT 1
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 3
44295: NEG
44296: PUSH
44297: LD_INT 0
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 3
44306: NEG
44307: PUSH
44308: LD_INT 1
44310: NEG
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 3
44318: NEG
44319: PUSH
44320: LD_INT 2
44322: NEG
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 3
44330: NEG
44331: PUSH
44332: LD_INT 3
44334: NEG
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44371: LD_ADDR_VAR 0 42
44375: PUSH
44376: LD_INT 0
44378: PUSH
44379: LD_INT 0
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 0
44388: PUSH
44389: LD_INT 1
44391: NEG
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 1
44399: PUSH
44400: LD_INT 0
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 1
44409: PUSH
44410: LD_INT 1
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 0
44419: PUSH
44420: LD_INT 1
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 1
44429: NEG
44430: PUSH
44431: LD_INT 0
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 1
44440: NEG
44441: PUSH
44442: LD_INT 1
44444: NEG
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: NEG
44453: PUSH
44454: LD_INT 2
44456: NEG
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 0
44464: PUSH
44465: LD_INT 2
44467: NEG
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 1
44475: PUSH
44476: LD_INT 1
44478: NEG
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 2
44486: PUSH
44487: LD_INT 1
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 2
44496: PUSH
44497: LD_INT 2
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 1
44506: PUSH
44507: LD_INT 2
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 0
44516: PUSH
44517: LD_INT 2
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 1
44526: NEG
44527: PUSH
44528: LD_INT 1
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 2
44537: NEG
44538: PUSH
44539: LD_INT 1
44541: NEG
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 2
44549: NEG
44550: PUSH
44551: LD_INT 2
44553: NEG
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 2
44561: NEG
44562: PUSH
44563: LD_INT 3
44565: NEG
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 1
44573: NEG
44574: PUSH
44575: LD_INT 3
44577: NEG
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 0
44585: PUSH
44586: LD_INT 3
44588: NEG
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 1
44596: PUSH
44597: LD_INT 2
44599: NEG
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 3
44607: PUSH
44608: LD_INT 2
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 3
44617: PUSH
44618: LD_INT 3
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 2
44627: PUSH
44628: LD_INT 3
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 1
44637: PUSH
44638: LD_INT 3
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 0
44647: PUSH
44648: LD_INT 3
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 1
44657: NEG
44658: PUSH
44659: LD_INT 2
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 3
44668: NEG
44669: PUSH
44670: LD_INT 2
44672: NEG
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 3
44680: NEG
44681: PUSH
44682: LD_INT 3
44684: NEG
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44721: LD_ADDR_VAR 0 43
44725: PUSH
44726: LD_INT 0
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 0
44738: PUSH
44739: LD_INT 1
44741: NEG
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 1
44749: PUSH
44750: LD_INT 0
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 1
44759: PUSH
44760: LD_INT 1
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 0
44769: PUSH
44770: LD_INT 1
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 1
44779: NEG
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 1
44790: NEG
44791: PUSH
44792: LD_INT 1
44794: NEG
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 1
44802: NEG
44803: PUSH
44804: LD_INT 2
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 0
44814: PUSH
44815: LD_INT 2
44817: NEG
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 1
44825: PUSH
44826: LD_INT 1
44828: NEG
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 2
44836: PUSH
44837: LD_INT 0
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 2
44846: PUSH
44847: LD_INT 1
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 1
44856: PUSH
44857: LD_INT 2
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 0
44866: PUSH
44867: LD_INT 2
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 1
44876: NEG
44877: PUSH
44878: LD_INT 1
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 2
44887: NEG
44888: PUSH
44889: LD_INT 0
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 2
44898: NEG
44899: PUSH
44900: LD_INT 1
44902: NEG
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 1
44910: NEG
44911: PUSH
44912: LD_INT 3
44914: NEG
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: LD_INT 3
44925: NEG
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 1
44933: PUSH
44934: LD_INT 2
44936: NEG
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 2
44944: PUSH
44945: LD_INT 1
44947: NEG
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 3
44955: PUSH
44956: LD_INT 0
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 3
44965: PUSH
44966: LD_INT 1
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: LD_INT 3
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 0
44985: PUSH
44986: LD_INT 3
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 1
44995: NEG
44996: PUSH
44997: LD_INT 2
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 2
45006: NEG
45007: PUSH
45008: LD_INT 1
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 3
45017: NEG
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 3
45028: NEG
45029: PUSH
45030: LD_INT 1
45032: NEG
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45069: LD_ADDR_VAR 0 44
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: LD_INT 0
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 0
45086: PUSH
45087: LD_INT 1
45089: NEG
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 1
45097: PUSH
45098: LD_INT 0
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 1
45107: PUSH
45108: LD_INT 1
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 0
45117: PUSH
45118: LD_INT 1
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 1
45127: NEG
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: NEG
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: PUSH
45152: LD_INT 2
45154: NEG
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 1
45162: PUSH
45163: LD_INT 1
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 2
45173: PUSH
45174: LD_INT 0
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 2
45183: PUSH
45184: LD_INT 1
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 2
45193: PUSH
45194: LD_INT 2
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 1
45203: PUSH
45204: LD_INT 2
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 1
45213: NEG
45214: PUSH
45215: LD_INT 1
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 2
45224: NEG
45225: PUSH
45226: LD_INT 0
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 2
45235: NEG
45236: PUSH
45237: LD_INT 1
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 2
45247: NEG
45248: PUSH
45249: LD_INT 2
45251: NEG
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 2
45259: NEG
45260: PUSH
45261: LD_INT 3
45263: NEG
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 2
45271: PUSH
45272: LD_INT 1
45274: NEG
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 3
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 3
45292: PUSH
45293: LD_INT 1
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 3
45302: PUSH
45303: LD_INT 2
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 3
45312: PUSH
45313: LD_INT 3
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 2
45322: PUSH
45323: LD_INT 3
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 2
45332: NEG
45333: PUSH
45334: LD_INT 1
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 3
45343: NEG
45344: PUSH
45345: LD_INT 0
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 3
45354: NEG
45355: PUSH
45356: LD_INT 1
45358: NEG
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 3
45366: NEG
45367: PUSH
45368: LD_INT 2
45370: NEG
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 3
45378: NEG
45379: PUSH
45380: LD_INT 3
45382: NEG
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45419: LD_ADDR_VAR 0 45
45423: PUSH
45424: LD_INT 0
45426: PUSH
45427: LD_INT 0
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 0
45436: PUSH
45437: LD_INT 1
45439: NEG
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 1
45447: PUSH
45448: LD_INT 0
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 1
45457: PUSH
45458: LD_INT 1
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 0
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 1
45477: NEG
45478: PUSH
45479: LD_INT 0
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 1
45488: NEG
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 1
45500: NEG
45501: PUSH
45502: LD_INT 2
45504: NEG
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 0
45512: PUSH
45513: LD_INT 2
45515: NEG
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 1
45523: PUSH
45524: LD_INT 1
45526: NEG
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 2
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 2
45544: PUSH
45545: LD_INT 2
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: LD_INT 2
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 0
45564: PUSH
45565: LD_INT 2
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 1
45574: NEG
45575: PUSH
45576: LD_INT 1
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 2
45585: NEG
45586: PUSH
45587: LD_INT 1
45589: NEG
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 2
45597: NEG
45598: PUSH
45599: LD_INT 2
45601: NEG
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 2
45609: NEG
45610: PUSH
45611: LD_INT 3
45613: NEG
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 1
45621: NEG
45622: PUSH
45623: LD_INT 3
45625: NEG
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 0
45633: PUSH
45634: LD_INT 3
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: LD_INT 2
45647: NEG
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 3
45655: PUSH
45656: LD_INT 2
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 3
45665: PUSH
45666: LD_INT 3
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 2
45675: PUSH
45676: LD_INT 3
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 1
45685: PUSH
45686: LD_INT 3
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: LD_INT 3
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 1
45705: NEG
45706: PUSH
45707: LD_INT 2
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 3
45716: NEG
45717: PUSH
45718: LD_INT 2
45720: NEG
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 3
45728: NEG
45729: PUSH
45730: LD_INT 3
45732: NEG
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45769: LD_ADDR_VAR 0 46
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: LD_INT 0
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: LD_INT 1
45789: NEG
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: LD_INT 0
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 1
45807: PUSH
45808: LD_INT 1
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: LD_INT 1
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 1
45827: NEG
45828: PUSH
45829: LD_INT 0
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 1
45838: NEG
45839: PUSH
45840: LD_INT 1
45842: NEG
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 1
45850: NEG
45851: PUSH
45852: LD_INT 2
45854: NEG
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 0
45862: PUSH
45863: LD_INT 2
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 1
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 2
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 2
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 1
45904: PUSH
45905: LD_INT 2
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 0
45914: PUSH
45915: LD_INT 2
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 1
45924: NEG
45925: PUSH
45926: LD_INT 1
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 2
45935: NEG
45936: PUSH
45937: LD_INT 0
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 2
45946: NEG
45947: PUSH
45948: LD_INT 1
45950: NEG
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 1
45958: NEG
45959: PUSH
45960: LD_INT 3
45962: NEG
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: LD_INT 3
45973: NEG
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: LD_INT 2
45984: NEG
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 2
45992: PUSH
45993: LD_INT 1
45995: NEG
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 3
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 3
46013: PUSH
46014: LD_INT 1
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 1
46023: PUSH
46024: LD_INT 3
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: LD_INT 3
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 1
46043: NEG
46044: PUSH
46045: LD_INT 2
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 2
46054: NEG
46055: PUSH
46056: LD_INT 1
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 3
46065: NEG
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 3
46076: NEG
46077: PUSH
46078: LD_INT 1
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46117: LD_ADDR_VAR 0 47
46121: PUSH
46122: LD_INT 0
46124: PUSH
46125: LD_INT 0
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: LD_INT 1
46137: NEG
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 1
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 1
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 0
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 1
46175: NEG
46176: PUSH
46177: LD_INT 0
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 1
46186: NEG
46187: PUSH
46188: LD_INT 1
46190: NEG
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 1
46198: NEG
46199: PUSH
46200: LD_INT 2
46202: NEG
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: LD_INT 2
46213: NEG
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 1
46221: PUSH
46222: LD_INT 1
46224: NEG
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 2
46232: NEG
46233: PUSH
46234: LD_INT 1
46236: NEG
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 2
46244: NEG
46245: PUSH
46246: LD_INT 2
46248: NEG
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46268: LD_ADDR_VAR 0 48
46272: PUSH
46273: LD_INT 0
46275: PUSH
46276: LD_INT 0
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 0
46285: PUSH
46286: LD_INT 1
46288: NEG
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 1
46296: PUSH
46297: LD_INT 0
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 1
46306: PUSH
46307: LD_INT 1
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 0
46316: PUSH
46317: LD_INT 1
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 1
46326: NEG
46327: PUSH
46328: LD_INT 0
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 1
46337: NEG
46338: PUSH
46339: LD_INT 1
46341: NEG
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: LD_INT 2
46353: NEG
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 0
46361: PUSH
46362: LD_INT 2
46364: NEG
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 1
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 2
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 2
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46415: LD_ADDR_VAR 0 49
46419: PUSH
46420: LD_INT 0
46422: PUSH
46423: LD_INT 0
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 0
46432: PUSH
46433: LD_INT 1
46435: NEG
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 1
46443: PUSH
46444: LD_INT 0
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 1
46453: PUSH
46454: LD_INT 1
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 0
46463: PUSH
46464: LD_INT 1
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 1
46473: NEG
46474: PUSH
46475: LD_INT 0
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 1
46484: NEG
46485: PUSH
46486: LD_INT 1
46488: NEG
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 1
46496: PUSH
46497: LD_INT 1
46499: NEG
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 2
46507: PUSH
46508: LD_INT 0
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 2
46517: PUSH
46518: LD_INT 1
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 2
46527: PUSH
46528: LD_INT 2
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: LD_INT 2
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46559: LD_ADDR_VAR 0 50
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: LD_INT 0
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: LD_INT 1
46579: NEG
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 1
46587: PUSH
46588: LD_INT 0
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: LD_INT 1
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 0
46607: PUSH
46608: LD_INT 1
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 1
46617: NEG
46618: PUSH
46619: LD_INT 0
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 1
46628: NEG
46629: PUSH
46630: LD_INT 1
46632: NEG
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 2
46640: PUSH
46641: LD_INT 1
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 2
46650: PUSH
46651: LD_INT 2
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 1
46660: PUSH
46661: LD_INT 2
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: LD_INT 2
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 1
46680: NEG
46681: PUSH
46682: LD_INT 1
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46703: LD_ADDR_VAR 0 51
46707: PUSH
46708: LD_INT 0
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 0
46720: PUSH
46721: LD_INT 1
46723: NEG
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 1
46731: PUSH
46732: LD_INT 0
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: LD_INT 1
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 1
46772: NEG
46773: PUSH
46774: LD_INT 1
46776: NEG
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 1
46784: PUSH
46785: LD_INT 2
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: LD_INT 2
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 1
46804: NEG
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 2
46815: NEG
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 2
46826: NEG
46827: PUSH
46828: LD_INT 1
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46850: LD_ADDR_VAR 0 52
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: LD_INT 0
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: LD_INT 1
46870: NEG
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 1
46878: PUSH
46879: LD_INT 0
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 1
46888: PUSH
46889: LD_INT 1
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 0
46898: PUSH
46899: LD_INT 1
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 1
46908: NEG
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 1
46919: NEG
46920: PUSH
46921: LD_INT 1
46923: NEG
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 1
46931: NEG
46932: PUSH
46933: LD_INT 2
46935: NEG
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 1
46943: NEG
46944: PUSH
46945: LD_INT 1
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 2
46954: NEG
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 2
46965: NEG
46966: PUSH
46967: LD_INT 1
46969: NEG
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 2
46977: NEG
46978: PUSH
46979: LD_INT 2
46981: NEG
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47001: LD_ADDR_VAR 0 53
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: LD_INT 0
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: LD_INT 1
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 1
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 1
47039: PUSH
47040: LD_INT 1
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: LD_INT 1
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 1
47059: NEG
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 1
47070: NEG
47071: PUSH
47072: LD_INT 1
47074: NEG
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 1
47082: NEG
47083: PUSH
47084: LD_INT 2
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: LD_INT 2
47097: NEG
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 1
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 2
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 2
47126: PUSH
47127: LD_INT 1
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 2
47136: PUSH
47137: LD_INT 2
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: LD_INT 2
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: LD_INT 2
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 1
47166: NEG
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 2
47177: NEG
47178: PUSH
47179: LD_INT 0
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 2
47188: NEG
47189: PUSH
47190: LD_INT 1
47192: NEG
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 2
47200: NEG
47201: PUSH
47202: LD_INT 2
47204: NEG
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47231: LD_ADDR_VAR 0 54
47235: PUSH
47236: LD_INT 0
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 0
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 1
47259: PUSH
47260: LD_INT 0
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: PUSH
47270: LD_INT 1
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: LD_INT 1
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 1
47289: NEG
47290: PUSH
47291: LD_INT 0
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 1
47300: NEG
47301: PUSH
47302: LD_INT 1
47304: NEG
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 1
47312: NEG
47313: PUSH
47314: LD_INT 2
47316: NEG
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 0
47324: PUSH
47325: LD_INT 2
47327: NEG
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 1
47335: PUSH
47336: LD_INT 1
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 2
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 2
47356: PUSH
47357: LD_INT 1
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 2
47366: PUSH
47367: LD_INT 2
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: LD_INT 2
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: LD_INT 2
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 2
47407: NEG
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 2
47418: NEG
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 2
47430: NEG
47431: PUSH
47432: LD_INT 2
47434: NEG
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47461: LD_ADDR_VAR 0 55
47465: PUSH
47466: LD_INT 0
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: LD_INT 1
47481: NEG
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 1
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 1
47499: PUSH
47500: LD_INT 1
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 0
47509: PUSH
47510: LD_INT 1
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 1
47519: NEG
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: LD_INT 1
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 1
47542: NEG
47543: PUSH
47544: LD_INT 2
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 0
47554: PUSH
47555: LD_INT 2
47557: NEG
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: LD_INT 1
47568: NEG
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 2
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 2
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 2
47596: PUSH
47597: LD_INT 2
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 1
47606: PUSH
47607: LD_INT 2
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: LD_INT 2
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: PUSH
47628: LD_INT 1
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 2
47637: NEG
47638: PUSH
47639: LD_INT 0
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 2
47648: NEG
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 2
47660: NEG
47661: PUSH
47662: LD_INT 2
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47691: LD_ADDR_VAR 0 56
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 0
47708: PUSH
47709: LD_INT 1
47711: NEG
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 1
47719: PUSH
47720: LD_INT 0
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 1
47729: PUSH
47730: LD_INT 1
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: LD_INT 1
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 1
47749: NEG
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: LD_INT 1
47764: NEG
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 1
47772: NEG
47773: PUSH
47774: LD_INT 2
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 0
47784: PUSH
47785: LD_INT 2
47787: NEG
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 1
47795: PUSH
47796: LD_INT 1
47798: NEG
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 2
47806: PUSH
47807: LD_INT 0
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 2
47816: PUSH
47817: LD_INT 1
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 2
47826: PUSH
47827: LD_INT 2
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 1
47836: PUSH
47837: LD_INT 2
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: LD_INT 2
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 1
47856: NEG
47857: PUSH
47858: LD_INT 1
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 2
47867: NEG
47868: PUSH
47869: LD_INT 0
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 2
47878: NEG
47879: PUSH
47880: LD_INT 1
47882: NEG
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 2
47890: NEG
47891: PUSH
47892: LD_INT 2
47894: NEG
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47921: LD_ADDR_VAR 0 57
47925: PUSH
47926: LD_INT 0
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 0
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 1
47949: PUSH
47950: LD_INT 0
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 1
47959: PUSH
47960: LD_INT 1
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 0
47969: PUSH
47970: LD_INT 1
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 1
47979: NEG
47980: PUSH
47981: LD_INT 0
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: LD_INT 1
47994: NEG
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 1
48002: NEG
48003: PUSH
48004: LD_INT 2
48006: NEG
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 0
48014: PUSH
48015: LD_INT 2
48017: NEG
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 1
48025: PUSH
48026: LD_INT 1
48028: NEG
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 2
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 2
48046: PUSH
48047: LD_INT 1
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 2
48056: PUSH
48057: LD_INT 2
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 1
48066: PUSH
48067: LD_INT 2
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 0
48076: PUSH
48077: LD_INT 2
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 1
48086: NEG
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 2
48097: NEG
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 2
48108: NEG
48109: PUSH
48110: LD_INT 1
48112: NEG
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 2
48120: NEG
48121: PUSH
48122: LD_INT 2
48124: NEG
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48151: LD_ADDR_VAR 0 58
48155: PUSH
48156: LD_INT 0
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 0
48168: PUSH
48169: LD_INT 1
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 1
48179: PUSH
48180: LD_INT 0
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 1
48189: PUSH
48190: LD_INT 1
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 0
48199: PUSH
48200: LD_INT 1
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 1
48209: NEG
48210: PUSH
48211: LD_INT 0
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: LD_INT 1
48224: NEG
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 1
48232: NEG
48233: PUSH
48234: LD_INT 2
48236: NEG
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 0
48244: PUSH
48245: LD_INT 2
48247: NEG
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: LD_INT 1
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 2
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 2
48276: PUSH
48277: LD_INT 1
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 2
48286: PUSH
48287: LD_INT 2
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 1
48296: PUSH
48297: LD_INT 2
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: LD_INT 2
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 1
48316: NEG
48317: PUSH
48318: LD_INT 1
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 2
48327: NEG
48328: PUSH
48329: LD_INT 0
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 2
48338: NEG
48339: PUSH
48340: LD_INT 1
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 2
48350: NEG
48351: PUSH
48352: LD_INT 2
48354: NEG
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48381: LD_ADDR_VAR 0 59
48385: PUSH
48386: LD_INT 0
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 0
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 1
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 1
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 0
48429: PUSH
48430: LD_INT 1
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 1
48439: NEG
48440: PUSH
48441: LD_INT 0
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 1
48450: NEG
48451: PUSH
48452: LD_INT 1
48454: NEG
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48469: LD_ADDR_VAR 0 60
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: LD_INT 0
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 0
48486: PUSH
48487: LD_INT 1
48489: NEG
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: LD_INT 0
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 1
48507: PUSH
48508: LD_INT 1
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 0
48517: PUSH
48518: LD_INT 1
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 1
48527: NEG
48528: PUSH
48529: LD_INT 0
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 1
48538: NEG
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48557: LD_ADDR_VAR 0 61
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: LD_INT 1
48577: NEG
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 1
48585: PUSH
48586: LD_INT 0
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: PUSH
48596: LD_INT 1
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: LD_INT 1
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: NEG
48627: PUSH
48628: LD_INT 1
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48645: LD_ADDR_VAR 0 62
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: LD_INT 0
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 0
48662: PUSH
48663: LD_INT 1
48665: NEG
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 1
48673: PUSH
48674: LD_INT 0
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 1
48683: PUSH
48684: LD_INT 1
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 0
48693: PUSH
48694: LD_INT 1
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 1
48703: NEG
48704: PUSH
48705: LD_INT 0
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 1
48714: NEG
48715: PUSH
48716: LD_INT 1
48718: NEG
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48733: LD_ADDR_VAR 0 63
48737: PUSH
48738: LD_INT 0
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 0
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 1
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 1
48771: PUSH
48772: LD_INT 1
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 0
48781: PUSH
48782: LD_INT 1
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 1
48791: NEG
48792: PUSH
48793: LD_INT 0
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: LD_INT 1
48806: NEG
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48821: LD_ADDR_VAR 0 64
48825: PUSH
48826: LD_INT 0
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 0
48838: PUSH
48839: LD_INT 1
48841: NEG
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 1
48849: PUSH
48850: LD_INT 0
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 1
48859: PUSH
48860: LD_INT 1
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: LD_INT 1
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 1
48879: NEG
48880: PUSH
48881: LD_INT 0
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 1
48890: NEG
48891: PUSH
48892: LD_INT 1
48894: NEG
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: ST_TO_ADDR
// end ; 1 :
48909: GO 54806
48911: LD_INT 1
48913: DOUBLE
48914: EQUAL
48915: IFTRUE 48919
48917: GO 51542
48919: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48920: LD_ADDR_VAR 0 11
48924: PUSH
48925: LD_INT 1
48927: NEG
48928: PUSH
48929: LD_INT 3
48931: NEG
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 0
48939: PUSH
48940: LD_INT 3
48942: NEG
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 1
48950: PUSH
48951: LD_INT 2
48953: NEG
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: LIST
48963: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48964: LD_ADDR_VAR 0 12
48968: PUSH
48969: LD_INT 2
48971: PUSH
48972: LD_INT 1
48974: NEG
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 3
48982: PUSH
48983: LD_INT 0
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 3
48992: PUSH
48993: LD_INT 1
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: LIST
49004: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49005: LD_ADDR_VAR 0 13
49009: PUSH
49010: LD_INT 3
49012: PUSH
49013: LD_INT 2
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 3
49022: PUSH
49023: LD_INT 3
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 2
49032: PUSH
49033: LD_INT 3
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: LIST
49044: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49045: LD_ADDR_VAR 0 14
49049: PUSH
49050: LD_INT 1
49052: PUSH
49053: LD_INT 3
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 0
49062: PUSH
49063: LD_INT 3
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 1
49072: NEG
49073: PUSH
49074: LD_INT 2
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: LIST
49085: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49086: LD_ADDR_VAR 0 15
49090: PUSH
49091: LD_INT 2
49093: NEG
49094: PUSH
49095: LD_INT 1
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 3
49104: NEG
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 3
49115: NEG
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: LIST
49129: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49130: LD_ADDR_VAR 0 16
49134: PUSH
49135: LD_INT 2
49137: NEG
49138: PUSH
49139: LD_INT 3
49141: NEG
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 3
49149: NEG
49150: PUSH
49151: LD_INT 2
49153: NEG
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 3
49161: NEG
49162: PUSH
49163: LD_INT 3
49165: NEG
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: LIST
49175: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49176: LD_ADDR_VAR 0 17
49180: PUSH
49181: LD_INT 1
49183: NEG
49184: PUSH
49185: LD_INT 3
49187: NEG
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 0
49195: PUSH
49196: LD_INT 3
49198: NEG
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 1
49206: PUSH
49207: LD_INT 2
49209: NEG
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: LIST
49219: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49220: LD_ADDR_VAR 0 18
49224: PUSH
49225: LD_INT 2
49227: PUSH
49228: LD_INT 1
49230: NEG
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 3
49238: PUSH
49239: LD_INT 0
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 3
49248: PUSH
49249: LD_INT 1
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: LIST
49260: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49261: LD_ADDR_VAR 0 19
49265: PUSH
49266: LD_INT 3
49268: PUSH
49269: LD_INT 2
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 3
49278: PUSH
49279: LD_INT 3
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 2
49288: PUSH
49289: LD_INT 3
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: LIST
49300: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49301: LD_ADDR_VAR 0 20
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: LD_INT 3
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 0
49318: PUSH
49319: LD_INT 3
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 1
49328: NEG
49329: PUSH
49330: LD_INT 2
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: LIST
49341: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49342: LD_ADDR_VAR 0 21
49346: PUSH
49347: LD_INT 2
49349: NEG
49350: PUSH
49351: LD_INT 1
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 3
49360: NEG
49361: PUSH
49362: LD_INT 0
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 3
49371: NEG
49372: PUSH
49373: LD_INT 1
49375: NEG
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: LIST
49385: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49386: LD_ADDR_VAR 0 22
49390: PUSH
49391: LD_INT 2
49393: NEG
49394: PUSH
49395: LD_INT 3
49397: NEG
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 3
49405: NEG
49406: PUSH
49407: LD_INT 2
49409: NEG
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 3
49417: NEG
49418: PUSH
49419: LD_INT 3
49421: NEG
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: LIST
49431: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49432: LD_ADDR_VAR 0 23
49436: PUSH
49437: LD_INT 0
49439: PUSH
49440: LD_INT 3
49442: NEG
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 1
49450: NEG
49451: PUSH
49452: LD_INT 4
49454: NEG
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 1
49462: PUSH
49463: LD_INT 3
49465: NEG
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: LIST
49475: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49476: LD_ADDR_VAR 0 24
49480: PUSH
49481: LD_INT 3
49483: PUSH
49484: LD_INT 0
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 3
49493: PUSH
49494: LD_INT 1
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 4
49504: PUSH
49505: LD_INT 1
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: LIST
49516: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49517: LD_ADDR_VAR 0 25
49521: PUSH
49522: LD_INT 3
49524: PUSH
49525: LD_INT 3
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 4
49534: PUSH
49535: LD_INT 3
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 3
49544: PUSH
49545: LD_INT 4
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: LIST
49556: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49557: LD_ADDR_VAR 0 26
49561: PUSH
49562: LD_INT 0
49564: PUSH
49565: LD_INT 3
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 1
49574: PUSH
49575: LD_INT 4
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 1
49584: NEG
49585: PUSH
49586: LD_INT 3
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: LIST
49597: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
49598: LD_ADDR_VAR 0 27
49602: PUSH
49603: LD_INT 3
49605: NEG
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 3
49616: NEG
49617: PUSH
49618: LD_INT 1
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 4
49627: NEG
49628: PUSH
49629: LD_INT 1
49631: NEG
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: LIST
49641: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
49642: LD_ADDR_VAR 0 28
49646: PUSH
49647: LD_INT 3
49649: NEG
49650: PUSH
49651: LD_INT 3
49653: NEG
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 3
49661: NEG
49662: PUSH
49663: LD_INT 4
49665: NEG
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 4
49673: NEG
49674: PUSH
49675: LD_INT 3
49677: NEG
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: LIST
49687: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
49688: LD_ADDR_VAR 0 29
49692: PUSH
49693: LD_INT 1
49695: NEG
49696: PUSH
49697: LD_INT 3
49699: NEG
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 0
49707: PUSH
49708: LD_INT 3
49710: NEG
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 1
49718: PUSH
49719: LD_INT 2
49721: NEG
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 1
49729: NEG
49730: PUSH
49731: LD_INT 4
49733: NEG
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 0
49741: PUSH
49742: LD_INT 4
49744: NEG
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 1
49752: PUSH
49753: LD_INT 3
49755: NEG
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 1
49763: NEG
49764: PUSH
49765: LD_INT 5
49767: NEG
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 0
49775: PUSH
49776: LD_INT 5
49778: NEG
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: PUSH
49787: LD_INT 4
49789: NEG
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: LD_INT 6
49801: NEG
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 0
49809: PUSH
49810: LD_INT 6
49812: NEG
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 1
49820: PUSH
49821: LD_INT 5
49823: NEG
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49843: LD_ADDR_VAR 0 30
49847: PUSH
49848: LD_INT 2
49850: PUSH
49851: LD_INT 1
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 3
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 3
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 3
49881: PUSH
49882: LD_INT 1
49884: NEG
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 4
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 4
49902: PUSH
49903: LD_INT 1
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 4
49912: PUSH
49913: LD_INT 1
49915: NEG
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 5
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 5
49933: PUSH
49934: LD_INT 1
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 5
49943: PUSH
49944: LD_INT 1
49946: NEG
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 6
49954: PUSH
49955: LD_INT 0
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 6
49964: PUSH
49965: LD_INT 1
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49986: LD_ADDR_VAR 0 31
49990: PUSH
49991: LD_INT 3
49993: PUSH
49994: LD_INT 2
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 3
50003: PUSH
50004: LD_INT 3
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 2
50013: PUSH
50014: LD_INT 3
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 4
50023: PUSH
50024: LD_INT 3
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 4
50033: PUSH
50034: LD_INT 4
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 3
50043: PUSH
50044: LD_INT 4
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 5
50053: PUSH
50054: LD_INT 4
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 5
50063: PUSH
50064: LD_INT 5
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 4
50073: PUSH
50074: LD_INT 5
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 6
50083: PUSH
50084: LD_INT 5
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 6
50093: PUSH
50094: LD_INT 6
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 5
50103: PUSH
50104: LD_INT 6
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50125: LD_ADDR_VAR 0 32
50129: PUSH
50130: LD_INT 1
50132: PUSH
50133: LD_INT 3
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 0
50142: PUSH
50143: LD_INT 3
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 1
50152: NEG
50153: PUSH
50154: LD_INT 2
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: PUSH
50164: LD_INT 4
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 0
50173: PUSH
50174: LD_INT 4
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: PUSH
50185: LD_INT 3
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 1
50194: PUSH
50195: LD_INT 5
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 0
50204: PUSH
50205: LD_INT 5
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 1
50214: NEG
50215: PUSH
50216: LD_INT 4
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 1
50225: PUSH
50226: LD_INT 6
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: LD_INT 6
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 1
50245: NEG
50246: PUSH
50247: LD_INT 5
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50268: LD_ADDR_VAR 0 33
50272: PUSH
50273: LD_INT 2
50275: NEG
50276: PUSH
50277: LD_INT 1
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 3
50286: NEG
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 3
50297: NEG
50298: PUSH
50299: LD_INT 1
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 3
50309: NEG
50310: PUSH
50311: LD_INT 1
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 4
50320: NEG
50321: PUSH
50322: LD_INT 0
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 4
50331: NEG
50332: PUSH
50333: LD_INT 1
50335: NEG
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 4
50343: NEG
50344: PUSH
50345: LD_INT 1
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 5
50354: NEG
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 5
50365: NEG
50366: PUSH
50367: LD_INT 1
50369: NEG
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 5
50377: NEG
50378: PUSH
50379: LD_INT 1
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 6
50388: NEG
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 6
50399: NEG
50400: PUSH
50401: LD_INT 1
50403: NEG
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50423: LD_ADDR_VAR 0 34
50427: PUSH
50428: LD_INT 2
50430: NEG
50431: PUSH
50432: LD_INT 3
50434: NEG
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 3
50442: NEG
50443: PUSH
50444: LD_INT 2
50446: NEG
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 3
50454: NEG
50455: PUSH
50456: LD_INT 3
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 3
50466: NEG
50467: PUSH
50468: LD_INT 4
50470: NEG
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 4
50478: NEG
50479: PUSH
50480: LD_INT 3
50482: NEG
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 4
50490: NEG
50491: PUSH
50492: LD_INT 4
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 4
50502: NEG
50503: PUSH
50504: LD_INT 5
50506: NEG
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 5
50514: NEG
50515: PUSH
50516: LD_INT 4
50518: NEG
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 5
50526: NEG
50527: PUSH
50528: LD_INT 5
50530: NEG
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 5
50538: NEG
50539: PUSH
50540: LD_INT 6
50542: NEG
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 6
50550: NEG
50551: PUSH
50552: LD_INT 5
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 6
50562: NEG
50563: PUSH
50564: LD_INT 6
50566: NEG
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
50586: LD_ADDR_VAR 0 41
50590: PUSH
50591: LD_INT 0
50593: PUSH
50594: LD_INT 2
50596: NEG
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 1
50604: NEG
50605: PUSH
50606: LD_INT 3
50608: NEG
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: PUSH
50617: LD_INT 2
50619: NEG
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: LIST
50629: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
50630: LD_ADDR_VAR 0 42
50634: PUSH
50635: LD_INT 2
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 2
50647: PUSH
50648: LD_INT 1
50650: NEG
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 3
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: LIST
50670: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
50671: LD_ADDR_VAR 0 43
50675: PUSH
50676: LD_INT 2
50678: PUSH
50679: LD_INT 2
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 3
50688: PUSH
50689: LD_INT 2
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 2
50698: PUSH
50699: LD_INT 3
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: LIST
50710: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
50711: LD_ADDR_VAR 0 44
50715: PUSH
50716: LD_INT 0
50718: PUSH
50719: LD_INT 2
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: LD_INT 3
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 1
50738: NEG
50739: PUSH
50740: LD_INT 2
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: LIST
50751: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50752: LD_ADDR_VAR 0 45
50756: PUSH
50757: LD_INT 2
50759: NEG
50760: PUSH
50761: LD_INT 0
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 2
50770: NEG
50771: PUSH
50772: LD_INT 1
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 3
50781: NEG
50782: PUSH
50783: LD_INT 1
50785: NEG
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: LIST
50795: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
50796: LD_ADDR_VAR 0 46
50800: PUSH
50801: LD_INT 2
50803: NEG
50804: PUSH
50805: LD_INT 2
50807: NEG
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 2
50815: NEG
50816: PUSH
50817: LD_INT 3
50819: NEG
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 3
50827: NEG
50828: PUSH
50829: LD_INT 2
50831: NEG
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: LIST
50841: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50842: LD_ADDR_VAR 0 47
50846: PUSH
50847: LD_INT 2
50849: NEG
50850: PUSH
50851: LD_INT 3
50853: NEG
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 1
50861: NEG
50862: PUSH
50863: LD_INT 3
50865: NEG
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50875: LD_ADDR_VAR 0 48
50879: PUSH
50880: LD_INT 1
50882: PUSH
50883: LD_INT 2
50885: NEG
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 2
50893: PUSH
50894: LD_INT 1
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50906: LD_ADDR_VAR 0 49
50910: PUSH
50911: LD_INT 3
50913: PUSH
50914: LD_INT 1
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 3
50923: PUSH
50924: LD_INT 2
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50935: LD_ADDR_VAR 0 50
50939: PUSH
50940: LD_INT 2
50942: PUSH
50943: LD_INT 3
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 1
50952: PUSH
50953: LD_INT 3
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50964: LD_ADDR_VAR 0 51
50968: PUSH
50969: LD_INT 1
50971: NEG
50972: PUSH
50973: LD_INT 2
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 2
50982: NEG
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50995: LD_ADDR_VAR 0 52
50999: PUSH
51000: LD_INT 3
51002: NEG
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 3
51014: NEG
51015: PUSH
51016: LD_INT 2
51018: NEG
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51028: LD_ADDR_VAR 0 53
51032: PUSH
51033: LD_INT 1
51035: NEG
51036: PUSH
51037: LD_INT 3
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: LD_INT 3
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: LD_INT 2
51061: NEG
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: LIST
51071: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51072: LD_ADDR_VAR 0 54
51076: PUSH
51077: LD_INT 2
51079: PUSH
51080: LD_INT 1
51082: NEG
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 3
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 3
51100: PUSH
51101: LD_INT 1
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: LIST
51112: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51113: LD_ADDR_VAR 0 55
51117: PUSH
51118: LD_INT 3
51120: PUSH
51121: LD_INT 2
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 3
51130: PUSH
51131: LD_INT 3
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 2
51140: PUSH
51141: LD_INT 3
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: LIST
51152: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51153: LD_ADDR_VAR 0 56
51157: PUSH
51158: LD_INT 1
51160: PUSH
51161: LD_INT 3
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 0
51170: PUSH
51171: LD_INT 3
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 1
51180: NEG
51181: PUSH
51182: LD_INT 2
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: LIST
51193: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51194: LD_ADDR_VAR 0 57
51198: PUSH
51199: LD_INT 2
51201: NEG
51202: PUSH
51203: LD_INT 1
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 3
51212: NEG
51213: PUSH
51214: LD_INT 0
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 3
51223: NEG
51224: PUSH
51225: LD_INT 1
51227: NEG
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: LIST
51237: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51238: LD_ADDR_VAR 0 58
51242: PUSH
51243: LD_INT 2
51245: NEG
51246: PUSH
51247: LD_INT 3
51249: NEG
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 3
51257: NEG
51258: PUSH
51259: LD_INT 2
51261: NEG
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 3
51269: NEG
51270: PUSH
51271: LD_INT 3
51273: NEG
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: LIST
51283: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51284: LD_ADDR_VAR 0 59
51288: PUSH
51289: LD_INT 1
51291: NEG
51292: PUSH
51293: LD_INT 2
51295: NEG
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 0
51303: PUSH
51304: LD_INT 2
51306: NEG
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 1
51314: PUSH
51315: LD_INT 1
51317: NEG
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: LIST
51327: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51328: LD_ADDR_VAR 0 60
51332: PUSH
51333: LD_INT 1
51335: PUSH
51336: LD_INT 1
51338: NEG
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 2
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 2
51356: PUSH
51357: LD_INT 1
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: LIST
51368: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51369: LD_ADDR_VAR 0 61
51373: PUSH
51374: LD_INT 2
51376: PUSH
51377: LD_INT 1
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 2
51386: PUSH
51387: LD_INT 2
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: LD_INT 2
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: LIST
51408: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51409: LD_ADDR_VAR 0 62
51413: PUSH
51414: LD_INT 1
51416: PUSH
51417: LD_INT 2
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 0
51426: PUSH
51427: LD_INT 2
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 1
51436: NEG
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: LIST
51449: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51450: LD_ADDR_VAR 0 63
51454: PUSH
51455: LD_INT 1
51457: NEG
51458: PUSH
51459: LD_INT 1
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 2
51468: NEG
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 2
51479: NEG
51480: PUSH
51481: LD_INT 1
51483: NEG
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: LIST
51493: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51494: LD_ADDR_VAR 0 64
51498: PUSH
51499: LD_INT 1
51501: NEG
51502: PUSH
51503: LD_INT 2
51505: NEG
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 2
51513: NEG
51514: PUSH
51515: LD_INT 1
51517: NEG
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 2
51525: NEG
51526: PUSH
51527: LD_INT 2
51529: NEG
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: LIST
51539: ST_TO_ADDR
// end ; 2 :
51540: GO 54806
51542: LD_INT 2
51544: DOUBLE
51545: EQUAL
51546: IFTRUE 51550
51548: GO 54805
51550: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51551: LD_ADDR_VAR 0 29
51555: PUSH
51556: LD_INT 4
51558: PUSH
51559: LD_INT 0
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 4
51568: PUSH
51569: LD_INT 1
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 5
51579: PUSH
51580: LD_INT 0
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 5
51589: PUSH
51590: LD_INT 1
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 4
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 3
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 3
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 3
51630: PUSH
51631: LD_INT 2
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 5
51641: PUSH
51642: LD_INT 2
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 3
51651: PUSH
51652: LD_INT 3
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 3
51661: PUSH
51662: LD_INT 2
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 4
51671: PUSH
51672: LD_INT 3
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 4
51681: PUSH
51682: LD_INT 4
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 3
51691: PUSH
51692: LD_INT 4
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 2
51701: PUSH
51702: LD_INT 3
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 2
51711: PUSH
51712: LD_INT 2
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 4
51721: PUSH
51722: LD_INT 2
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 2
51731: PUSH
51732: LD_INT 4
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: LD_INT 4
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 0
51751: PUSH
51752: LD_INT 3
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 1
51761: PUSH
51762: LD_INT 4
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 1
51771: PUSH
51772: LD_INT 5
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 0
51781: PUSH
51782: LD_INT 5
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 1
51791: NEG
51792: PUSH
51793: LD_INT 4
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 1
51802: NEG
51803: PUSH
51804: LD_INT 3
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 2
51813: PUSH
51814: LD_INT 5
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 2
51823: NEG
51824: PUSH
51825: LD_INT 3
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 3
51834: NEG
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 3
51845: NEG
51846: PUSH
51847: LD_INT 1
51849: NEG
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 2
51857: NEG
51858: PUSH
51859: LD_INT 0
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 2
51868: NEG
51869: PUSH
51870: LD_INT 1
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 3
51879: NEG
51880: PUSH
51881: LD_INT 1
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 4
51890: NEG
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 4
51901: NEG
51902: PUSH
51903: LD_INT 1
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 4
51913: NEG
51914: PUSH
51915: LD_INT 2
51917: NEG
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 2
51925: NEG
51926: PUSH
51927: LD_INT 2
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 4
51936: NEG
51937: PUSH
51938: LD_INT 4
51940: NEG
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 4
51948: NEG
51949: PUSH
51950: LD_INT 5
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 3
51960: NEG
51961: PUSH
51962: LD_INT 4
51964: NEG
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 3
51972: NEG
51973: PUSH
51974: LD_INT 3
51976: NEG
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 4
51984: NEG
51985: PUSH
51986: LD_INT 3
51988: NEG
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 5
51996: NEG
51997: PUSH
51998: LD_INT 4
52000: NEG
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 5
52008: NEG
52009: PUSH
52010: LD_INT 5
52012: NEG
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 3
52020: NEG
52021: PUSH
52022: LD_INT 5
52024: NEG
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 5
52032: NEG
52033: PUSH
52034: LD_INT 3
52036: NEG
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52089: LD_ADDR_VAR 0 30
52093: PUSH
52094: LD_INT 4
52096: PUSH
52097: LD_INT 4
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 4
52106: PUSH
52107: LD_INT 3
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 5
52116: PUSH
52117: LD_INT 4
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 5
52126: PUSH
52127: LD_INT 5
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 4
52136: PUSH
52137: LD_INT 5
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 3
52146: PUSH
52147: LD_INT 4
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 3
52156: PUSH
52157: LD_INT 3
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 5
52166: PUSH
52167: LD_INT 3
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 3
52176: PUSH
52177: LD_INT 5
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 0
52186: PUSH
52187: LD_INT 3
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: LD_INT 2
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: LD_INT 3
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 1
52216: PUSH
52217: LD_INT 4
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: LD_INT 4
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 1
52236: NEG
52237: PUSH
52238: LD_INT 3
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: LD_INT 2
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 2
52258: PUSH
52259: LD_INT 4
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 2
52268: NEG
52269: PUSH
52270: LD_INT 2
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 4
52279: NEG
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 4
52290: NEG
52291: PUSH
52292: LD_INT 1
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 3
52302: NEG
52303: PUSH
52304: LD_INT 0
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 3
52313: NEG
52314: PUSH
52315: LD_INT 1
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 4
52324: NEG
52325: PUSH
52326: LD_INT 1
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 5
52335: NEG
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 5
52346: NEG
52347: PUSH
52348: LD_INT 1
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 5
52358: NEG
52359: PUSH
52360: LD_INT 2
52362: NEG
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 3
52370: NEG
52371: PUSH
52372: LD_INT 2
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 3
52381: NEG
52382: PUSH
52383: LD_INT 3
52385: NEG
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 3
52393: NEG
52394: PUSH
52395: LD_INT 4
52397: NEG
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 2
52405: NEG
52406: PUSH
52407: LD_INT 3
52409: NEG
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 2
52417: NEG
52418: PUSH
52419: LD_INT 2
52421: NEG
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 3
52429: NEG
52430: PUSH
52431: LD_INT 2
52433: NEG
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 4
52441: NEG
52442: PUSH
52443: LD_INT 3
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 4
52453: NEG
52454: PUSH
52455: LD_INT 4
52457: NEG
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 2
52465: NEG
52466: PUSH
52467: LD_INT 4
52469: NEG
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 4
52477: NEG
52478: PUSH
52479: LD_INT 2
52481: NEG
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 0
52489: PUSH
52490: LD_INT 4
52492: NEG
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: LD_INT 5
52503: NEG
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 1
52511: PUSH
52512: LD_INT 4
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: PUSH
52523: LD_INT 3
52525: NEG
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 0
52533: PUSH
52534: LD_INT 3
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 1
52544: NEG
52545: PUSH
52546: LD_INT 4
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: LD_INT 5
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 2
52568: PUSH
52569: LD_INT 3
52571: NEG
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 2
52579: NEG
52580: PUSH
52581: LD_INT 5
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
52636: LD_ADDR_VAR 0 31
52640: PUSH
52641: LD_INT 0
52643: PUSH
52644: LD_INT 4
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: LD_INT 3
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 1
52663: PUSH
52664: LD_INT 4
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 1
52673: PUSH
52674: LD_INT 5
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 0
52683: PUSH
52684: LD_INT 5
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 1
52693: NEG
52694: PUSH
52695: LD_INT 4
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 1
52704: NEG
52705: PUSH
52706: LD_INT 3
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 2
52715: PUSH
52716: LD_INT 5
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 2
52725: NEG
52726: PUSH
52727: LD_INT 3
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 3
52736: NEG
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 3
52747: NEG
52748: PUSH
52749: LD_INT 1
52751: NEG
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 2
52759: NEG
52760: PUSH
52761: LD_INT 0
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 2
52770: NEG
52771: PUSH
52772: LD_INT 1
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 3
52781: NEG
52782: PUSH
52783: LD_INT 1
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 4
52792: NEG
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 4
52803: NEG
52804: PUSH
52805: LD_INT 1
52807: NEG
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 4
52815: NEG
52816: PUSH
52817: LD_INT 2
52819: NEG
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 2
52827: NEG
52828: PUSH
52829: LD_INT 2
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 4
52838: NEG
52839: PUSH
52840: LD_INT 4
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 4
52850: NEG
52851: PUSH
52852: LD_INT 5
52854: NEG
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 3
52862: NEG
52863: PUSH
52864: LD_INT 4
52866: NEG
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 3
52874: NEG
52875: PUSH
52876: LD_INT 3
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 4
52886: NEG
52887: PUSH
52888: LD_INT 3
52890: NEG
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 5
52898: NEG
52899: PUSH
52900: LD_INT 4
52902: NEG
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 5
52910: NEG
52911: PUSH
52912: LD_INT 5
52914: NEG
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 3
52922: NEG
52923: PUSH
52924: LD_INT 5
52926: NEG
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 5
52934: NEG
52935: PUSH
52936: LD_INT 3
52938: NEG
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: LD_INT 3
52949: NEG
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 0
52957: PUSH
52958: LD_INT 4
52960: NEG
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 1
52968: PUSH
52969: LD_INT 3
52971: NEG
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 1
52979: PUSH
52980: LD_INT 2
52982: NEG
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 0
52990: PUSH
52991: LD_INT 2
52993: NEG
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 1
53001: NEG
53002: PUSH
53003: LD_INT 3
53005: NEG
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: LD_INT 4
53017: NEG
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 2
53025: PUSH
53026: LD_INT 2
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 2
53036: NEG
53037: PUSH
53038: LD_INT 4
53040: NEG
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 4
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 4
53058: PUSH
53059: LD_INT 1
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 5
53069: PUSH
53070: LD_INT 0
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 5
53079: PUSH
53080: LD_INT 1
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 4
53089: PUSH
53090: LD_INT 1
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 3
53099: PUSH
53100: LD_INT 0
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 3
53109: PUSH
53110: LD_INT 1
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 3
53120: PUSH
53121: LD_INT 2
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 5
53131: PUSH
53132: LD_INT 2
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53186: LD_ADDR_VAR 0 32
53190: PUSH
53191: LD_INT 4
53193: NEG
53194: PUSH
53195: LD_INT 0
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 4
53204: NEG
53205: PUSH
53206: LD_INT 1
53208: NEG
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 3
53216: NEG
53217: PUSH
53218: LD_INT 0
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 3
53227: NEG
53228: PUSH
53229: LD_INT 1
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 4
53238: NEG
53239: PUSH
53240: LD_INT 1
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 5
53249: NEG
53250: PUSH
53251: LD_INT 0
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 5
53260: NEG
53261: PUSH
53262: LD_INT 1
53264: NEG
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 5
53272: NEG
53273: PUSH
53274: LD_INT 2
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 3
53284: NEG
53285: PUSH
53286: LD_INT 2
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 3
53295: NEG
53296: PUSH
53297: LD_INT 3
53299: NEG
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 3
53307: NEG
53308: PUSH
53309: LD_INT 4
53311: NEG
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 2
53319: NEG
53320: PUSH
53321: LD_INT 3
53323: NEG
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 2
53331: NEG
53332: PUSH
53333: LD_INT 2
53335: NEG
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 3
53343: NEG
53344: PUSH
53345: LD_INT 2
53347: NEG
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 4
53355: NEG
53356: PUSH
53357: LD_INT 3
53359: NEG
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 4
53367: NEG
53368: PUSH
53369: LD_INT 4
53371: NEG
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 2
53379: NEG
53380: PUSH
53381: LD_INT 4
53383: NEG
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 4
53391: NEG
53392: PUSH
53393: LD_INT 2
53395: NEG
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: LD_INT 4
53406: NEG
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: LD_INT 5
53417: NEG
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 1
53425: PUSH
53426: LD_INT 4
53428: NEG
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 1
53436: PUSH
53437: LD_INT 3
53439: NEG
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 0
53447: PUSH
53448: LD_INT 3
53450: NEG
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 1
53458: NEG
53459: PUSH
53460: LD_INT 4
53462: NEG
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 1
53470: NEG
53471: PUSH
53472: LD_INT 5
53474: NEG
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 2
53482: PUSH
53483: LD_INT 3
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 2
53493: NEG
53494: PUSH
53495: LD_INT 5
53497: NEG
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 3
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 3
53515: PUSH
53516: LD_INT 1
53518: NEG
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 4
53526: PUSH
53527: LD_INT 0
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 4
53536: PUSH
53537: LD_INT 1
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 3
53546: PUSH
53547: LD_INT 1
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 2
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 2
53566: PUSH
53567: LD_INT 1
53569: NEG
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 2
53577: PUSH
53578: LD_INT 2
53580: NEG
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 4
53588: PUSH
53589: LD_INT 2
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 4
53598: PUSH
53599: LD_INT 4
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 4
53608: PUSH
53609: LD_INT 3
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 5
53618: PUSH
53619: LD_INT 4
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 5
53628: PUSH
53629: LD_INT 5
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 4
53638: PUSH
53639: LD_INT 5
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 3
53648: PUSH
53649: LD_INT 4
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 3
53658: PUSH
53659: LD_INT 3
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 5
53668: PUSH
53669: LD_INT 3
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 3
53678: PUSH
53679: LD_INT 5
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
53733: LD_ADDR_VAR 0 33
53737: PUSH
53738: LD_INT 4
53740: NEG
53741: PUSH
53742: LD_INT 4
53744: NEG
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 4
53752: NEG
53753: PUSH
53754: LD_INT 5
53756: NEG
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 3
53764: NEG
53765: PUSH
53766: LD_INT 4
53768: NEG
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 3
53776: NEG
53777: PUSH
53778: LD_INT 3
53780: NEG
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 4
53788: NEG
53789: PUSH
53790: LD_INT 3
53792: NEG
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 5
53800: NEG
53801: PUSH
53802: LD_INT 4
53804: NEG
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 5
53812: NEG
53813: PUSH
53814: LD_INT 5
53816: NEG
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 3
53824: NEG
53825: PUSH
53826: LD_INT 5
53828: NEG
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 5
53836: NEG
53837: PUSH
53838: LD_INT 3
53840: NEG
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 0
53848: PUSH
53849: LD_INT 3
53851: NEG
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 0
53859: PUSH
53860: LD_INT 4
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 1
53870: PUSH
53871: LD_INT 3
53873: NEG
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 1
53881: PUSH
53882: LD_INT 2
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 0
53892: PUSH
53893: LD_INT 2
53895: NEG
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 1
53903: NEG
53904: PUSH
53905: LD_INT 3
53907: NEG
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 1
53915: NEG
53916: PUSH
53917: LD_INT 4
53919: NEG
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 2
53927: PUSH
53928: LD_INT 2
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 2
53938: NEG
53939: PUSH
53940: LD_INT 4
53942: NEG
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 4
53950: PUSH
53951: LD_INT 0
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 4
53960: PUSH
53961: LD_INT 1
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 5
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 5
53981: PUSH
53982: LD_INT 1
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 4
53991: PUSH
53992: LD_INT 1
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 3
54001: PUSH
54002: LD_INT 0
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 3
54011: PUSH
54012: LD_INT 1
54014: NEG
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 3
54022: PUSH
54023: LD_INT 2
54025: NEG
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 5
54033: PUSH
54034: LD_INT 2
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 3
54043: PUSH
54044: LD_INT 3
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 3
54053: PUSH
54054: LD_INT 2
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 4
54063: PUSH
54064: LD_INT 3
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 4
54073: PUSH
54074: LD_INT 4
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 3
54083: PUSH
54084: LD_INT 4
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 2
54093: PUSH
54094: LD_INT 3
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 2
54103: PUSH
54104: LD_INT 2
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 4
54113: PUSH
54114: LD_INT 2
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 2
54123: PUSH
54124: LD_INT 4
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 0
54133: PUSH
54134: LD_INT 4
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: LD_INT 3
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: LD_INT 4
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: LD_INT 5
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 0
54173: PUSH
54174: LD_INT 5
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 1
54183: NEG
54184: PUSH
54185: LD_INT 4
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 1
54194: NEG
54195: PUSH
54196: LD_INT 3
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 2
54205: PUSH
54206: LD_INT 5
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 2
54215: NEG
54216: PUSH
54217: LD_INT 3
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54271: LD_ADDR_VAR 0 34
54275: PUSH
54276: LD_INT 0
54278: PUSH
54279: LD_INT 4
54281: NEG
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 0
54289: PUSH
54290: LD_INT 5
54292: NEG
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 1
54300: PUSH
54301: LD_INT 4
54303: NEG
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 1
54311: PUSH
54312: LD_INT 3
54314: NEG
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: LD_INT 3
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: NEG
54334: PUSH
54335: LD_INT 4
54337: NEG
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 1
54345: NEG
54346: PUSH
54347: LD_INT 5
54349: NEG
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 2
54357: PUSH
54358: LD_INT 3
54360: NEG
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 2
54368: NEG
54369: PUSH
54370: LD_INT 5
54372: NEG
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 3
54380: PUSH
54381: LD_INT 0
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 3
54390: PUSH
54391: LD_INT 1
54393: NEG
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 4
54401: PUSH
54402: LD_INT 0
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 4
54411: PUSH
54412: LD_INT 1
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 3
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 2
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 2
54441: PUSH
54442: LD_INT 1
54444: NEG
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 2
54452: PUSH
54453: LD_INT 2
54455: NEG
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 4
54463: PUSH
54464: LD_INT 2
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 4
54473: PUSH
54474: LD_INT 4
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 4
54483: PUSH
54484: LD_INT 3
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 5
54493: PUSH
54494: LD_INT 4
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 5
54503: PUSH
54504: LD_INT 5
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 4
54513: PUSH
54514: LD_INT 5
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 3
54523: PUSH
54524: LD_INT 4
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 3
54533: PUSH
54534: LD_INT 3
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 5
54543: PUSH
54544: LD_INT 3
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 3
54553: PUSH
54554: LD_INT 5
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 0
54563: PUSH
54564: LD_INT 3
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: LD_INT 2
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 1
54583: PUSH
54584: LD_INT 3
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 1
54593: PUSH
54594: LD_INT 4
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: LD_INT 4
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: LD_INT 3
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 1
54624: NEG
54625: PUSH
54626: LD_INT 2
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 2
54635: PUSH
54636: LD_INT 4
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 2
54645: NEG
54646: PUSH
54647: LD_INT 2
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 4
54656: NEG
54657: PUSH
54658: LD_INT 0
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 4
54667: NEG
54668: PUSH
54669: LD_INT 1
54671: NEG
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 3
54679: NEG
54680: PUSH
54681: LD_INT 0
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 3
54690: NEG
54691: PUSH
54692: LD_INT 1
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 4
54701: NEG
54702: PUSH
54703: LD_INT 1
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 5
54712: NEG
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 5
54723: NEG
54724: PUSH
54725: LD_INT 1
54727: NEG
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 5
54735: NEG
54736: PUSH
54737: LD_INT 2
54739: NEG
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 3
54747: NEG
54748: PUSH
54749: LD_INT 2
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: ST_TO_ADDR
// end ; end ;
54803: GO 54806
54805: POP
// case btype of b_depot , b_warehouse :
54806: LD_VAR 0 1
54810: PUSH
54811: LD_INT 0
54813: DOUBLE
54814: EQUAL
54815: IFTRUE 54825
54817: LD_INT 1
54819: DOUBLE
54820: EQUAL
54821: IFTRUE 54825
54823: GO 55026
54825: POP
// case nation of nation_american :
54826: LD_VAR 0 5
54830: PUSH
54831: LD_INT 1
54833: DOUBLE
54834: EQUAL
54835: IFTRUE 54839
54837: GO 54895
54839: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
54840: LD_ADDR_VAR 0 9
54844: PUSH
54845: LD_VAR 0 11
54849: PUSH
54850: LD_VAR 0 12
54854: PUSH
54855: LD_VAR 0 13
54859: PUSH
54860: LD_VAR 0 14
54864: PUSH
54865: LD_VAR 0 15
54869: PUSH
54870: LD_VAR 0 16
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: PUSH
54883: LD_VAR 0 4
54887: PUSH
54888: LD_INT 1
54890: PLUS
54891: ARRAY
54892: ST_TO_ADDR
54893: GO 55024
54895: LD_INT 2
54897: DOUBLE
54898: EQUAL
54899: IFTRUE 54903
54901: GO 54959
54903: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
54904: LD_ADDR_VAR 0 9
54908: PUSH
54909: LD_VAR 0 17
54913: PUSH
54914: LD_VAR 0 18
54918: PUSH
54919: LD_VAR 0 19
54923: PUSH
54924: LD_VAR 0 20
54928: PUSH
54929: LD_VAR 0 21
54933: PUSH
54934: LD_VAR 0 22
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: PUSH
54947: LD_VAR 0 4
54951: PUSH
54952: LD_INT 1
54954: PLUS
54955: ARRAY
54956: ST_TO_ADDR
54957: GO 55024
54959: LD_INT 3
54961: DOUBLE
54962: EQUAL
54963: IFTRUE 54967
54965: GO 55023
54967: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54968: LD_ADDR_VAR 0 9
54972: PUSH
54973: LD_VAR 0 23
54977: PUSH
54978: LD_VAR 0 24
54982: PUSH
54983: LD_VAR 0 25
54987: PUSH
54988: LD_VAR 0 26
54992: PUSH
54993: LD_VAR 0 27
54997: PUSH
54998: LD_VAR 0 28
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: PUSH
55011: LD_VAR 0 4
55015: PUSH
55016: LD_INT 1
55018: PLUS
55019: ARRAY
55020: ST_TO_ADDR
55021: GO 55024
55023: POP
55024: GO 55579
55026: LD_INT 2
55028: DOUBLE
55029: EQUAL
55030: IFTRUE 55040
55032: LD_INT 3
55034: DOUBLE
55035: EQUAL
55036: IFTRUE 55040
55038: GO 55096
55040: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55041: LD_ADDR_VAR 0 9
55045: PUSH
55046: LD_VAR 0 29
55050: PUSH
55051: LD_VAR 0 30
55055: PUSH
55056: LD_VAR 0 31
55060: PUSH
55061: LD_VAR 0 32
55065: PUSH
55066: LD_VAR 0 33
55070: PUSH
55071: LD_VAR 0 34
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: PUSH
55084: LD_VAR 0 4
55088: PUSH
55089: LD_INT 1
55091: PLUS
55092: ARRAY
55093: ST_TO_ADDR
55094: GO 55579
55096: LD_INT 16
55098: DOUBLE
55099: EQUAL
55100: IFTRUE 55158
55102: LD_INT 17
55104: DOUBLE
55105: EQUAL
55106: IFTRUE 55158
55108: LD_INT 18
55110: DOUBLE
55111: EQUAL
55112: IFTRUE 55158
55114: LD_INT 19
55116: DOUBLE
55117: EQUAL
55118: IFTRUE 55158
55120: LD_INT 22
55122: DOUBLE
55123: EQUAL
55124: IFTRUE 55158
55126: LD_INT 20
55128: DOUBLE
55129: EQUAL
55130: IFTRUE 55158
55132: LD_INT 21
55134: DOUBLE
55135: EQUAL
55136: IFTRUE 55158
55138: LD_INT 23
55140: DOUBLE
55141: EQUAL
55142: IFTRUE 55158
55144: LD_INT 24
55146: DOUBLE
55147: EQUAL
55148: IFTRUE 55158
55150: LD_INT 25
55152: DOUBLE
55153: EQUAL
55154: IFTRUE 55158
55156: GO 55214
55158: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55159: LD_ADDR_VAR 0 9
55163: PUSH
55164: LD_VAR 0 35
55168: PUSH
55169: LD_VAR 0 36
55173: PUSH
55174: LD_VAR 0 37
55178: PUSH
55179: LD_VAR 0 38
55183: PUSH
55184: LD_VAR 0 39
55188: PUSH
55189: LD_VAR 0 40
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: PUSH
55202: LD_VAR 0 4
55206: PUSH
55207: LD_INT 1
55209: PLUS
55210: ARRAY
55211: ST_TO_ADDR
55212: GO 55579
55214: LD_INT 6
55216: DOUBLE
55217: EQUAL
55218: IFTRUE 55270
55220: LD_INT 7
55222: DOUBLE
55223: EQUAL
55224: IFTRUE 55270
55226: LD_INT 8
55228: DOUBLE
55229: EQUAL
55230: IFTRUE 55270
55232: LD_INT 13
55234: DOUBLE
55235: EQUAL
55236: IFTRUE 55270
55238: LD_INT 12
55240: DOUBLE
55241: EQUAL
55242: IFTRUE 55270
55244: LD_INT 15
55246: DOUBLE
55247: EQUAL
55248: IFTRUE 55270
55250: LD_INT 11
55252: DOUBLE
55253: EQUAL
55254: IFTRUE 55270
55256: LD_INT 14
55258: DOUBLE
55259: EQUAL
55260: IFTRUE 55270
55262: LD_INT 10
55264: DOUBLE
55265: EQUAL
55266: IFTRUE 55270
55268: GO 55326
55270: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55271: LD_ADDR_VAR 0 9
55275: PUSH
55276: LD_VAR 0 41
55280: PUSH
55281: LD_VAR 0 42
55285: PUSH
55286: LD_VAR 0 43
55290: PUSH
55291: LD_VAR 0 44
55295: PUSH
55296: LD_VAR 0 45
55300: PUSH
55301: LD_VAR 0 46
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: PUSH
55314: LD_VAR 0 4
55318: PUSH
55319: LD_INT 1
55321: PLUS
55322: ARRAY
55323: ST_TO_ADDR
55324: GO 55579
55326: LD_INT 36
55328: DOUBLE
55329: EQUAL
55330: IFTRUE 55334
55332: GO 55390
55334: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55335: LD_ADDR_VAR 0 9
55339: PUSH
55340: LD_VAR 0 47
55344: PUSH
55345: LD_VAR 0 48
55349: PUSH
55350: LD_VAR 0 49
55354: PUSH
55355: LD_VAR 0 50
55359: PUSH
55360: LD_VAR 0 51
55364: PUSH
55365: LD_VAR 0 52
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: PUSH
55378: LD_VAR 0 4
55382: PUSH
55383: LD_INT 1
55385: PLUS
55386: ARRAY
55387: ST_TO_ADDR
55388: GO 55579
55390: LD_INT 4
55392: DOUBLE
55393: EQUAL
55394: IFTRUE 55416
55396: LD_INT 5
55398: DOUBLE
55399: EQUAL
55400: IFTRUE 55416
55402: LD_INT 34
55404: DOUBLE
55405: EQUAL
55406: IFTRUE 55416
55408: LD_INT 37
55410: DOUBLE
55411: EQUAL
55412: IFTRUE 55416
55414: GO 55472
55416: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55417: LD_ADDR_VAR 0 9
55421: PUSH
55422: LD_VAR 0 53
55426: PUSH
55427: LD_VAR 0 54
55431: PUSH
55432: LD_VAR 0 55
55436: PUSH
55437: LD_VAR 0 56
55441: PUSH
55442: LD_VAR 0 57
55446: PUSH
55447: LD_VAR 0 58
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: PUSH
55460: LD_VAR 0 4
55464: PUSH
55465: LD_INT 1
55467: PLUS
55468: ARRAY
55469: ST_TO_ADDR
55470: GO 55579
55472: LD_INT 31
55474: DOUBLE
55475: EQUAL
55476: IFTRUE 55522
55478: LD_INT 32
55480: DOUBLE
55481: EQUAL
55482: IFTRUE 55522
55484: LD_INT 33
55486: DOUBLE
55487: EQUAL
55488: IFTRUE 55522
55490: LD_INT 27
55492: DOUBLE
55493: EQUAL
55494: IFTRUE 55522
55496: LD_INT 26
55498: DOUBLE
55499: EQUAL
55500: IFTRUE 55522
55502: LD_INT 28
55504: DOUBLE
55505: EQUAL
55506: IFTRUE 55522
55508: LD_INT 29
55510: DOUBLE
55511: EQUAL
55512: IFTRUE 55522
55514: LD_INT 30
55516: DOUBLE
55517: EQUAL
55518: IFTRUE 55522
55520: GO 55578
55522: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
55523: LD_ADDR_VAR 0 9
55527: PUSH
55528: LD_VAR 0 59
55532: PUSH
55533: LD_VAR 0 60
55537: PUSH
55538: LD_VAR 0 61
55542: PUSH
55543: LD_VAR 0 62
55547: PUSH
55548: LD_VAR 0 63
55552: PUSH
55553: LD_VAR 0 64
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: PUSH
55566: LD_VAR 0 4
55570: PUSH
55571: LD_INT 1
55573: PLUS
55574: ARRAY
55575: ST_TO_ADDR
55576: GO 55579
55578: POP
// temp_list2 = [ ] ;
55579: LD_ADDR_VAR 0 10
55583: PUSH
55584: EMPTY
55585: ST_TO_ADDR
// for i in temp_list do
55586: LD_ADDR_VAR 0 8
55590: PUSH
55591: LD_VAR 0 9
55595: PUSH
55596: FOR_IN
55597: IFFALSE 55649
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
55599: LD_ADDR_VAR 0 10
55603: PUSH
55604: LD_VAR 0 10
55608: PUSH
55609: LD_VAR 0 8
55613: PUSH
55614: LD_INT 1
55616: ARRAY
55617: PUSH
55618: LD_VAR 0 2
55622: PLUS
55623: PUSH
55624: LD_VAR 0 8
55628: PUSH
55629: LD_INT 2
55631: ARRAY
55632: PUSH
55633: LD_VAR 0 3
55637: PLUS
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: EMPTY
55644: LIST
55645: ADD
55646: ST_TO_ADDR
55647: GO 55596
55649: POP
55650: POP
// result = temp_list2 ;
55651: LD_ADDR_VAR 0 7
55655: PUSH
55656: LD_VAR 0 10
55660: ST_TO_ADDR
// end ;
55661: LD_VAR 0 7
55665: RET
// export function EnemyInRange ( unit , dist ) ; begin
55666: LD_INT 0
55668: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
55669: LD_ADDR_VAR 0 3
55673: PUSH
55674: LD_VAR 0 1
55678: PPUSH
55679: CALL_OW 255
55683: PPUSH
55684: LD_VAR 0 1
55688: PPUSH
55689: CALL_OW 250
55693: PPUSH
55694: LD_VAR 0 1
55698: PPUSH
55699: CALL_OW 251
55703: PPUSH
55704: LD_VAR 0 2
55708: PPUSH
55709: CALL 29062 0 4
55713: PUSH
55714: LD_INT 4
55716: ARRAY
55717: ST_TO_ADDR
// end ;
55718: LD_VAR 0 3
55722: RET
// export function PlayerSeeMe ( unit ) ; begin
55723: LD_INT 0
55725: PPUSH
// result := See ( your_side , unit ) ;
55726: LD_ADDR_VAR 0 2
55730: PUSH
55731: LD_OWVAR 2
55735: PPUSH
55736: LD_VAR 0 1
55740: PPUSH
55741: CALL_OW 292
55745: ST_TO_ADDR
// end ;
55746: LD_VAR 0 2
55750: RET
// export function ReverseDir ( unit ) ; begin
55751: LD_INT 0
55753: PPUSH
// if not unit then
55754: LD_VAR 0 1
55758: NOT
55759: IFFALSE 55763
// exit ;
55761: GO 55786
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
55763: LD_ADDR_VAR 0 2
55767: PUSH
55768: LD_VAR 0 1
55772: PPUSH
55773: CALL_OW 254
55777: PUSH
55778: LD_INT 3
55780: PLUS
55781: PUSH
55782: LD_INT 6
55784: MOD
55785: ST_TO_ADDR
// end ;
55786: LD_VAR 0 2
55790: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
55791: LD_INT 0
55793: PPUSH
55794: PPUSH
55795: PPUSH
55796: PPUSH
55797: PPUSH
// if not hexes then
55798: LD_VAR 0 2
55802: NOT
55803: IFFALSE 55807
// exit ;
55805: GO 55955
// dist := 9999 ;
55807: LD_ADDR_VAR 0 5
55811: PUSH
55812: LD_INT 9999
55814: ST_TO_ADDR
// for i = 1 to hexes do
55815: LD_ADDR_VAR 0 4
55819: PUSH
55820: DOUBLE
55821: LD_INT 1
55823: DEC
55824: ST_TO_ADDR
55825: LD_VAR 0 2
55829: PUSH
55830: FOR_TO
55831: IFFALSE 55943
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
55833: LD_VAR 0 1
55837: PPUSH
55838: LD_VAR 0 2
55842: PUSH
55843: LD_VAR 0 4
55847: ARRAY
55848: PUSH
55849: LD_INT 1
55851: ARRAY
55852: PPUSH
55853: LD_VAR 0 2
55857: PUSH
55858: LD_VAR 0 4
55862: ARRAY
55863: PUSH
55864: LD_INT 2
55866: ARRAY
55867: PPUSH
55868: CALL_OW 297
55872: PUSH
55873: LD_VAR 0 5
55877: LESS
55878: IFFALSE 55941
// begin hex := hexes [ i ] ;
55880: LD_ADDR_VAR 0 7
55884: PUSH
55885: LD_VAR 0 2
55889: PUSH
55890: LD_VAR 0 4
55894: ARRAY
55895: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55896: LD_ADDR_VAR 0 5
55900: PUSH
55901: LD_VAR 0 1
55905: PPUSH
55906: LD_VAR 0 2
55910: PUSH
55911: LD_VAR 0 4
55915: ARRAY
55916: PUSH
55917: LD_INT 1
55919: ARRAY
55920: PPUSH
55921: LD_VAR 0 2
55925: PUSH
55926: LD_VAR 0 4
55930: ARRAY
55931: PUSH
55932: LD_INT 2
55934: ARRAY
55935: PPUSH
55936: CALL_OW 297
55940: ST_TO_ADDR
// end ; end ;
55941: GO 55830
55943: POP
55944: POP
// result := hex ;
55945: LD_ADDR_VAR 0 3
55949: PUSH
55950: LD_VAR 0 7
55954: ST_TO_ADDR
// end ;
55955: LD_VAR 0 3
55959: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55960: LD_INT 0
55962: PPUSH
55963: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55964: LD_VAR 0 1
55968: NOT
55969: PUSH
55970: LD_VAR 0 1
55974: PUSH
55975: LD_INT 21
55977: PUSH
55978: LD_INT 2
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 23
55987: PUSH
55988: LD_INT 2
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PPUSH
55999: CALL_OW 69
56003: IN
56004: NOT
56005: OR
56006: IFFALSE 56010
// exit ;
56008: GO 56057
// for i = 1 to 3 do
56010: LD_ADDR_VAR 0 3
56014: PUSH
56015: DOUBLE
56016: LD_INT 1
56018: DEC
56019: ST_TO_ADDR
56020: LD_INT 3
56022: PUSH
56023: FOR_TO
56024: IFFALSE 56055
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56026: LD_VAR 0 1
56030: PPUSH
56031: CALL_OW 250
56035: PPUSH
56036: LD_VAR 0 1
56040: PPUSH
56041: CALL_OW 251
56045: PPUSH
56046: LD_INT 1
56048: PPUSH
56049: CALL_OW 453
56053: GO 56023
56055: POP
56056: POP
// end ;
56057: LD_VAR 0 2
56061: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56062: LD_INT 0
56064: PPUSH
56065: PPUSH
56066: PPUSH
56067: PPUSH
56068: PPUSH
56069: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
56070: LD_VAR 0 1
56074: NOT
56075: PUSH
56076: LD_VAR 0 2
56080: NOT
56081: OR
56082: PUSH
56083: LD_VAR 0 1
56087: PPUSH
56088: CALL_OW 314
56092: OR
56093: IFFALSE 56097
// exit ;
56095: GO 56538
// x := GetX ( enemy_unit ) ;
56097: LD_ADDR_VAR 0 7
56101: PUSH
56102: LD_VAR 0 2
56106: PPUSH
56107: CALL_OW 250
56111: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56112: LD_ADDR_VAR 0 8
56116: PUSH
56117: LD_VAR 0 2
56121: PPUSH
56122: CALL_OW 251
56126: ST_TO_ADDR
// if not x or not y then
56127: LD_VAR 0 7
56131: NOT
56132: PUSH
56133: LD_VAR 0 8
56137: NOT
56138: OR
56139: IFFALSE 56143
// exit ;
56141: GO 56538
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56143: LD_ADDR_VAR 0 6
56147: PUSH
56148: LD_VAR 0 7
56152: PPUSH
56153: LD_INT 0
56155: PPUSH
56156: LD_INT 4
56158: PPUSH
56159: CALL_OW 272
56163: PUSH
56164: LD_VAR 0 8
56168: PPUSH
56169: LD_INT 0
56171: PPUSH
56172: LD_INT 4
56174: PPUSH
56175: CALL_OW 273
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_VAR 0 7
56188: PPUSH
56189: LD_INT 1
56191: PPUSH
56192: LD_INT 4
56194: PPUSH
56195: CALL_OW 272
56199: PUSH
56200: LD_VAR 0 8
56204: PPUSH
56205: LD_INT 1
56207: PPUSH
56208: LD_INT 4
56210: PPUSH
56211: CALL_OW 273
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_VAR 0 7
56224: PPUSH
56225: LD_INT 2
56227: PPUSH
56228: LD_INT 4
56230: PPUSH
56231: CALL_OW 272
56235: PUSH
56236: LD_VAR 0 8
56240: PPUSH
56241: LD_INT 2
56243: PPUSH
56244: LD_INT 4
56246: PPUSH
56247: CALL_OW 273
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_VAR 0 7
56260: PPUSH
56261: LD_INT 3
56263: PPUSH
56264: LD_INT 4
56266: PPUSH
56267: CALL_OW 272
56271: PUSH
56272: LD_VAR 0 8
56276: PPUSH
56277: LD_INT 3
56279: PPUSH
56280: LD_INT 4
56282: PPUSH
56283: CALL_OW 273
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_VAR 0 7
56296: PPUSH
56297: LD_INT 4
56299: PPUSH
56300: LD_INT 4
56302: PPUSH
56303: CALL_OW 272
56307: PUSH
56308: LD_VAR 0 8
56312: PPUSH
56313: LD_INT 4
56315: PPUSH
56316: LD_INT 4
56318: PPUSH
56319: CALL_OW 273
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_VAR 0 7
56332: PPUSH
56333: LD_INT 5
56335: PPUSH
56336: LD_INT 4
56338: PPUSH
56339: CALL_OW 272
56343: PUSH
56344: LD_VAR 0 8
56348: PPUSH
56349: LD_INT 5
56351: PPUSH
56352: LD_INT 4
56354: PPUSH
56355: CALL_OW 273
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: ST_TO_ADDR
// for i = tmp downto 1 do
56372: LD_ADDR_VAR 0 4
56376: PUSH
56377: DOUBLE
56378: LD_VAR 0 6
56382: INC
56383: ST_TO_ADDR
56384: LD_INT 1
56386: PUSH
56387: FOR_DOWNTO
56388: IFFALSE 56489
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56390: LD_VAR 0 6
56394: PUSH
56395: LD_VAR 0 4
56399: ARRAY
56400: PUSH
56401: LD_INT 1
56403: ARRAY
56404: PPUSH
56405: LD_VAR 0 6
56409: PUSH
56410: LD_VAR 0 4
56414: ARRAY
56415: PUSH
56416: LD_INT 2
56418: ARRAY
56419: PPUSH
56420: CALL_OW 488
56424: NOT
56425: PUSH
56426: LD_VAR 0 6
56430: PUSH
56431: LD_VAR 0 4
56435: ARRAY
56436: PUSH
56437: LD_INT 1
56439: ARRAY
56440: PPUSH
56441: LD_VAR 0 6
56445: PUSH
56446: LD_VAR 0 4
56450: ARRAY
56451: PUSH
56452: LD_INT 2
56454: ARRAY
56455: PPUSH
56456: CALL_OW 428
56460: PUSH
56461: LD_INT 0
56463: NONEQUAL
56464: OR
56465: IFFALSE 56487
// tmp := Delete ( tmp , i ) ;
56467: LD_ADDR_VAR 0 6
56471: PUSH
56472: LD_VAR 0 6
56476: PPUSH
56477: LD_VAR 0 4
56481: PPUSH
56482: CALL_OW 3
56486: ST_TO_ADDR
56487: GO 56387
56489: POP
56490: POP
// j := GetClosestHex ( unit , tmp ) ;
56491: LD_ADDR_VAR 0 5
56495: PUSH
56496: LD_VAR 0 1
56500: PPUSH
56501: LD_VAR 0 6
56505: PPUSH
56506: CALL 55791 0 2
56510: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
56511: LD_VAR 0 1
56515: PPUSH
56516: LD_VAR 0 5
56520: PUSH
56521: LD_INT 1
56523: ARRAY
56524: PPUSH
56525: LD_VAR 0 5
56529: PUSH
56530: LD_INT 2
56532: ARRAY
56533: PPUSH
56534: CALL_OW 111
// end ;
56538: LD_VAR 0 3
56542: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56543: LD_INT 0
56545: PPUSH
56546: PPUSH
56547: PPUSH
// uc_side = 0 ;
56548: LD_ADDR_OWVAR 20
56552: PUSH
56553: LD_INT 0
56555: ST_TO_ADDR
// uc_nation = 0 ;
56556: LD_ADDR_OWVAR 21
56560: PUSH
56561: LD_INT 0
56563: ST_TO_ADDR
// InitHc_All ( ) ;
56564: CALL_OW 584
// InitVc ;
56568: CALL_OW 20
// if mastodonts then
56572: LD_VAR 0 6
56576: IFFALSE 56643
// for i = 1 to mastodonts do
56578: LD_ADDR_VAR 0 11
56582: PUSH
56583: DOUBLE
56584: LD_INT 1
56586: DEC
56587: ST_TO_ADDR
56588: LD_VAR 0 6
56592: PUSH
56593: FOR_TO
56594: IFFALSE 56641
// begin vc_chassis := 31 ;
56596: LD_ADDR_OWVAR 37
56600: PUSH
56601: LD_INT 31
56603: ST_TO_ADDR
// vc_control := control_rider ;
56604: LD_ADDR_OWVAR 38
56608: PUSH
56609: LD_INT 4
56611: ST_TO_ADDR
// animal := CreateVehicle ;
56612: LD_ADDR_VAR 0 12
56616: PUSH
56617: CALL_OW 45
56621: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56622: LD_VAR 0 12
56626: PPUSH
56627: LD_VAR 0 8
56631: PPUSH
56632: LD_INT 0
56634: PPUSH
56635: CALL 58831 0 3
// end ;
56639: GO 56593
56641: POP
56642: POP
// if horses then
56643: LD_VAR 0 5
56647: IFFALSE 56714
// for i = 1 to horses do
56649: LD_ADDR_VAR 0 11
56653: PUSH
56654: DOUBLE
56655: LD_INT 1
56657: DEC
56658: ST_TO_ADDR
56659: LD_VAR 0 5
56663: PUSH
56664: FOR_TO
56665: IFFALSE 56712
// begin hc_class := 21 ;
56667: LD_ADDR_OWVAR 28
56671: PUSH
56672: LD_INT 21
56674: ST_TO_ADDR
// hc_gallery :=  ;
56675: LD_ADDR_OWVAR 33
56679: PUSH
56680: LD_STRING 
56682: ST_TO_ADDR
// animal := CreateHuman ;
56683: LD_ADDR_VAR 0 12
56687: PUSH
56688: CALL_OW 44
56692: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56693: LD_VAR 0 12
56697: PPUSH
56698: LD_VAR 0 8
56702: PPUSH
56703: LD_INT 0
56705: PPUSH
56706: CALL 58831 0 3
// end ;
56710: GO 56664
56712: POP
56713: POP
// if birds then
56714: LD_VAR 0 1
56718: IFFALSE 56785
// for i = 1 to birds do
56720: LD_ADDR_VAR 0 11
56724: PUSH
56725: DOUBLE
56726: LD_INT 1
56728: DEC
56729: ST_TO_ADDR
56730: LD_VAR 0 1
56734: PUSH
56735: FOR_TO
56736: IFFALSE 56783
// begin hc_class = 18 ;
56738: LD_ADDR_OWVAR 28
56742: PUSH
56743: LD_INT 18
56745: ST_TO_ADDR
// hc_gallery =  ;
56746: LD_ADDR_OWVAR 33
56750: PUSH
56751: LD_STRING 
56753: ST_TO_ADDR
// animal := CreateHuman ;
56754: LD_ADDR_VAR 0 12
56758: PUSH
56759: CALL_OW 44
56763: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56764: LD_VAR 0 12
56768: PPUSH
56769: LD_VAR 0 8
56773: PPUSH
56774: LD_INT 0
56776: PPUSH
56777: CALL 58831 0 3
// end ;
56781: GO 56735
56783: POP
56784: POP
// if tigers then
56785: LD_VAR 0 2
56789: IFFALSE 56873
// for i = 1 to tigers do
56791: LD_ADDR_VAR 0 11
56795: PUSH
56796: DOUBLE
56797: LD_INT 1
56799: DEC
56800: ST_TO_ADDR
56801: LD_VAR 0 2
56805: PUSH
56806: FOR_TO
56807: IFFALSE 56871
// begin hc_class = class_tiger ;
56809: LD_ADDR_OWVAR 28
56813: PUSH
56814: LD_INT 14
56816: ST_TO_ADDR
// hc_gallery =  ;
56817: LD_ADDR_OWVAR 33
56821: PUSH
56822: LD_STRING 
56824: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56825: LD_ADDR_OWVAR 35
56829: PUSH
56830: LD_INT 7
56832: NEG
56833: PPUSH
56834: LD_INT 7
56836: PPUSH
56837: CALL_OW 12
56841: ST_TO_ADDR
// animal := CreateHuman ;
56842: LD_ADDR_VAR 0 12
56846: PUSH
56847: CALL_OW 44
56851: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56852: LD_VAR 0 12
56856: PPUSH
56857: LD_VAR 0 8
56861: PPUSH
56862: LD_INT 0
56864: PPUSH
56865: CALL 58831 0 3
// end ;
56869: GO 56806
56871: POP
56872: POP
// if apemans then
56873: LD_VAR 0 3
56877: IFFALSE 57000
// for i = 1 to apemans do
56879: LD_ADDR_VAR 0 11
56883: PUSH
56884: DOUBLE
56885: LD_INT 1
56887: DEC
56888: ST_TO_ADDR
56889: LD_VAR 0 3
56893: PUSH
56894: FOR_TO
56895: IFFALSE 56998
// begin hc_class = class_apeman ;
56897: LD_ADDR_OWVAR 28
56901: PUSH
56902: LD_INT 12
56904: ST_TO_ADDR
// hc_gallery =  ;
56905: LD_ADDR_OWVAR 33
56909: PUSH
56910: LD_STRING 
56912: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56913: LD_ADDR_OWVAR 35
56917: PUSH
56918: LD_INT 2
56920: NEG
56921: PPUSH
56922: LD_INT 2
56924: PPUSH
56925: CALL_OW 12
56929: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56930: LD_ADDR_OWVAR 31
56934: PUSH
56935: LD_INT 1
56937: PPUSH
56938: LD_INT 3
56940: PPUSH
56941: CALL_OW 12
56945: PUSH
56946: LD_INT 1
56948: PPUSH
56949: LD_INT 3
56951: PPUSH
56952: CALL_OW 12
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: LD_INT 0
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: ST_TO_ADDR
// animal := CreateHuman ;
56969: LD_ADDR_VAR 0 12
56973: PUSH
56974: CALL_OW 44
56978: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56979: LD_VAR 0 12
56983: PPUSH
56984: LD_VAR 0 8
56988: PPUSH
56989: LD_INT 0
56991: PPUSH
56992: CALL 58831 0 3
// end ;
56996: GO 56894
56998: POP
56999: POP
// if enchidnas then
57000: LD_VAR 0 4
57004: IFFALSE 57071
// for i = 1 to enchidnas do
57006: LD_ADDR_VAR 0 11
57010: PUSH
57011: DOUBLE
57012: LD_INT 1
57014: DEC
57015: ST_TO_ADDR
57016: LD_VAR 0 4
57020: PUSH
57021: FOR_TO
57022: IFFALSE 57069
// begin hc_class = 13 ;
57024: LD_ADDR_OWVAR 28
57028: PUSH
57029: LD_INT 13
57031: ST_TO_ADDR
// hc_gallery =  ;
57032: LD_ADDR_OWVAR 33
57036: PUSH
57037: LD_STRING 
57039: ST_TO_ADDR
// animal := CreateHuman ;
57040: LD_ADDR_VAR 0 12
57044: PUSH
57045: CALL_OW 44
57049: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57050: LD_VAR 0 12
57054: PPUSH
57055: LD_VAR 0 8
57059: PPUSH
57060: LD_INT 0
57062: PPUSH
57063: CALL 58831 0 3
// end ;
57067: GO 57021
57069: POP
57070: POP
// if fishes then
57071: LD_VAR 0 7
57075: IFFALSE 57142
// for i = 1 to fishes do
57077: LD_ADDR_VAR 0 11
57081: PUSH
57082: DOUBLE
57083: LD_INT 1
57085: DEC
57086: ST_TO_ADDR
57087: LD_VAR 0 7
57091: PUSH
57092: FOR_TO
57093: IFFALSE 57140
// begin hc_class = 20 ;
57095: LD_ADDR_OWVAR 28
57099: PUSH
57100: LD_INT 20
57102: ST_TO_ADDR
// hc_gallery =  ;
57103: LD_ADDR_OWVAR 33
57107: PUSH
57108: LD_STRING 
57110: ST_TO_ADDR
// animal := CreateHuman ;
57111: LD_ADDR_VAR 0 12
57115: PUSH
57116: CALL_OW 44
57120: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57121: LD_VAR 0 12
57125: PPUSH
57126: LD_VAR 0 9
57130: PPUSH
57131: LD_INT 0
57133: PPUSH
57134: CALL 58831 0 3
// end ;
57138: GO 57092
57140: POP
57141: POP
// end ;
57142: LD_VAR 0 10
57146: RET
// export function WantHeal ( sci , unit ) ; begin
57147: LD_INT 0
57149: PPUSH
// if GetTaskList ( sci ) > 0 then
57150: LD_VAR 0 1
57154: PPUSH
57155: CALL_OW 437
57159: PUSH
57160: LD_INT 0
57162: GREATER
57163: IFFALSE 57233
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57165: LD_VAR 0 1
57169: PPUSH
57170: CALL_OW 437
57174: PUSH
57175: LD_INT 1
57177: ARRAY
57178: PUSH
57179: LD_INT 1
57181: ARRAY
57182: PUSH
57183: LD_STRING l
57185: EQUAL
57186: PUSH
57187: LD_VAR 0 1
57191: PPUSH
57192: CALL_OW 437
57196: PUSH
57197: LD_INT 1
57199: ARRAY
57200: PUSH
57201: LD_INT 4
57203: ARRAY
57204: PUSH
57205: LD_VAR 0 2
57209: EQUAL
57210: AND
57211: IFFALSE 57223
// result := true else
57213: LD_ADDR_VAR 0 3
57217: PUSH
57218: LD_INT 1
57220: ST_TO_ADDR
57221: GO 57231
// result := false ;
57223: LD_ADDR_VAR 0 3
57227: PUSH
57228: LD_INT 0
57230: ST_TO_ADDR
// end else
57231: GO 57241
// result := false ;
57233: LD_ADDR_VAR 0 3
57237: PUSH
57238: LD_INT 0
57240: ST_TO_ADDR
// end ;
57241: LD_VAR 0 3
57245: RET
// export function HealTarget ( sci ) ; begin
57246: LD_INT 0
57248: PPUSH
// if not sci then
57249: LD_VAR 0 1
57253: NOT
57254: IFFALSE 57258
// exit ;
57256: GO 57323
// result := 0 ;
57258: LD_ADDR_VAR 0 2
57262: PUSH
57263: LD_INT 0
57265: ST_TO_ADDR
// if GetTaskList ( sci ) then
57266: LD_VAR 0 1
57270: PPUSH
57271: CALL_OW 437
57275: IFFALSE 57323
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57277: LD_VAR 0 1
57281: PPUSH
57282: CALL_OW 437
57286: PUSH
57287: LD_INT 1
57289: ARRAY
57290: PUSH
57291: LD_INT 1
57293: ARRAY
57294: PUSH
57295: LD_STRING l
57297: EQUAL
57298: IFFALSE 57323
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57300: LD_ADDR_VAR 0 2
57304: PUSH
57305: LD_VAR 0 1
57309: PPUSH
57310: CALL_OW 437
57314: PUSH
57315: LD_INT 1
57317: ARRAY
57318: PUSH
57319: LD_INT 4
57321: ARRAY
57322: ST_TO_ADDR
// end ;
57323: LD_VAR 0 2
57327: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57328: LD_INT 0
57330: PPUSH
57331: PPUSH
57332: PPUSH
57333: PPUSH
// if not base_units then
57334: LD_VAR 0 1
57338: NOT
57339: IFFALSE 57343
// exit ;
57341: GO 57430
// result := false ;
57343: LD_ADDR_VAR 0 2
57347: PUSH
57348: LD_INT 0
57350: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57351: LD_ADDR_VAR 0 5
57355: PUSH
57356: LD_VAR 0 1
57360: PPUSH
57361: LD_INT 21
57363: PUSH
57364: LD_INT 3
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PPUSH
57371: CALL_OW 72
57375: ST_TO_ADDR
// if not tmp then
57376: LD_VAR 0 5
57380: NOT
57381: IFFALSE 57385
// exit ;
57383: GO 57430
// for i in tmp do
57385: LD_ADDR_VAR 0 3
57389: PUSH
57390: LD_VAR 0 5
57394: PUSH
57395: FOR_IN
57396: IFFALSE 57428
// begin result := EnemyInRange ( i , 22 ) ;
57398: LD_ADDR_VAR 0 2
57402: PUSH
57403: LD_VAR 0 3
57407: PPUSH
57408: LD_INT 22
57410: PPUSH
57411: CALL 55666 0 2
57415: ST_TO_ADDR
// if result then
57416: LD_VAR 0 2
57420: IFFALSE 57426
// exit ;
57422: POP
57423: POP
57424: GO 57430
// end ;
57426: GO 57395
57428: POP
57429: POP
// end ;
57430: LD_VAR 0 2
57434: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
57435: LD_INT 0
57437: PPUSH
57438: PPUSH
// if not units then
57439: LD_VAR 0 1
57443: NOT
57444: IFFALSE 57448
// exit ;
57446: GO 57518
// result := [ ] ;
57448: LD_ADDR_VAR 0 3
57452: PUSH
57453: EMPTY
57454: ST_TO_ADDR
// for i in units do
57455: LD_ADDR_VAR 0 4
57459: PUSH
57460: LD_VAR 0 1
57464: PUSH
57465: FOR_IN
57466: IFFALSE 57516
// if GetTag ( i ) = tag then
57468: LD_VAR 0 4
57472: PPUSH
57473: CALL_OW 110
57477: PUSH
57478: LD_VAR 0 2
57482: EQUAL
57483: IFFALSE 57514
// result := Replace ( result , result + 1 , i ) ;
57485: LD_ADDR_VAR 0 3
57489: PUSH
57490: LD_VAR 0 3
57494: PPUSH
57495: LD_VAR 0 3
57499: PUSH
57500: LD_INT 1
57502: PLUS
57503: PPUSH
57504: LD_VAR 0 4
57508: PPUSH
57509: CALL_OW 1
57513: ST_TO_ADDR
57514: GO 57465
57516: POP
57517: POP
// end ;
57518: LD_VAR 0 3
57522: RET
// export function IsDriver ( un ) ; begin
57523: LD_INT 0
57525: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57526: LD_ADDR_VAR 0 2
57530: PUSH
57531: LD_VAR 0 1
57535: PUSH
57536: LD_INT 55
57538: PUSH
57539: EMPTY
57540: LIST
57541: PPUSH
57542: CALL_OW 69
57546: IN
57547: ST_TO_ADDR
// end ;
57548: LD_VAR 0 2
57552: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57553: LD_INT 0
57555: PPUSH
57556: PPUSH
// list := [ ] ;
57557: LD_ADDR_VAR 0 5
57561: PUSH
57562: EMPTY
57563: ST_TO_ADDR
// case d of 0 :
57564: LD_VAR 0 3
57568: PUSH
57569: LD_INT 0
57571: DOUBLE
57572: EQUAL
57573: IFTRUE 57577
57575: GO 57710
57577: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
57578: LD_ADDR_VAR 0 5
57582: PUSH
57583: LD_VAR 0 1
57587: PUSH
57588: LD_INT 4
57590: MINUS
57591: PUSH
57592: LD_VAR 0 2
57596: PUSH
57597: LD_INT 4
57599: MINUS
57600: PUSH
57601: LD_INT 2
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: LIST
57608: PUSH
57609: LD_VAR 0 1
57613: PUSH
57614: LD_INT 3
57616: MINUS
57617: PUSH
57618: LD_VAR 0 2
57622: PUSH
57623: LD_INT 1
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: LIST
57630: PUSH
57631: LD_VAR 0 1
57635: PUSH
57636: LD_INT 4
57638: PLUS
57639: PUSH
57640: LD_VAR 0 2
57644: PUSH
57645: LD_INT 4
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: LIST
57652: PUSH
57653: LD_VAR 0 1
57657: PUSH
57658: LD_INT 3
57660: PLUS
57661: PUSH
57662: LD_VAR 0 2
57666: PUSH
57667: LD_INT 3
57669: PLUS
57670: PUSH
57671: LD_INT 5
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: LIST
57678: PUSH
57679: LD_VAR 0 1
57683: PUSH
57684: LD_VAR 0 2
57688: PUSH
57689: LD_INT 4
57691: PLUS
57692: PUSH
57693: LD_INT 0
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: LIST
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: ST_TO_ADDR
// end ; 1 :
57708: GO 58408
57710: LD_INT 1
57712: DOUBLE
57713: EQUAL
57714: IFTRUE 57718
57716: GO 57851
57718: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57719: LD_ADDR_VAR 0 5
57723: PUSH
57724: LD_VAR 0 1
57728: PUSH
57729: LD_VAR 0 2
57733: PUSH
57734: LD_INT 4
57736: MINUS
57737: PUSH
57738: LD_INT 3
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: LIST
57745: PUSH
57746: LD_VAR 0 1
57750: PUSH
57751: LD_INT 3
57753: MINUS
57754: PUSH
57755: LD_VAR 0 2
57759: PUSH
57760: LD_INT 3
57762: MINUS
57763: PUSH
57764: LD_INT 2
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: LIST
57771: PUSH
57772: LD_VAR 0 1
57776: PUSH
57777: LD_INT 4
57779: MINUS
57780: PUSH
57781: LD_VAR 0 2
57785: PUSH
57786: LD_INT 1
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: LIST
57793: PUSH
57794: LD_VAR 0 1
57798: PUSH
57799: LD_VAR 0 2
57803: PUSH
57804: LD_INT 3
57806: PLUS
57807: PUSH
57808: LD_INT 0
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: LIST
57815: PUSH
57816: LD_VAR 0 1
57820: PUSH
57821: LD_INT 4
57823: PLUS
57824: PUSH
57825: LD_VAR 0 2
57829: PUSH
57830: LD_INT 4
57832: PLUS
57833: PUSH
57834: LD_INT 5
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: LIST
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: ST_TO_ADDR
// end ; 2 :
57849: GO 58408
57851: LD_INT 2
57853: DOUBLE
57854: EQUAL
57855: IFTRUE 57859
57857: GO 57988
57859: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57860: LD_ADDR_VAR 0 5
57864: PUSH
57865: LD_VAR 0 1
57869: PUSH
57870: LD_VAR 0 2
57874: PUSH
57875: LD_INT 3
57877: MINUS
57878: PUSH
57879: LD_INT 3
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: LIST
57886: PUSH
57887: LD_VAR 0 1
57891: PUSH
57892: LD_INT 4
57894: PLUS
57895: PUSH
57896: LD_VAR 0 2
57900: PUSH
57901: LD_INT 4
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: LIST
57908: PUSH
57909: LD_VAR 0 1
57913: PUSH
57914: LD_VAR 0 2
57918: PUSH
57919: LD_INT 4
57921: PLUS
57922: PUSH
57923: LD_INT 0
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: LIST
57930: PUSH
57931: LD_VAR 0 1
57935: PUSH
57936: LD_INT 3
57938: MINUS
57939: PUSH
57940: LD_VAR 0 2
57944: PUSH
57945: LD_INT 1
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: LIST
57952: PUSH
57953: LD_VAR 0 1
57957: PUSH
57958: LD_INT 4
57960: MINUS
57961: PUSH
57962: LD_VAR 0 2
57966: PUSH
57967: LD_INT 4
57969: MINUS
57970: PUSH
57971: LD_INT 2
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: LIST
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: ST_TO_ADDR
// end ; 3 :
57986: GO 58408
57988: LD_INT 3
57990: DOUBLE
57991: EQUAL
57992: IFTRUE 57996
57994: GO 58129
57996: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57997: LD_ADDR_VAR 0 5
58001: PUSH
58002: LD_VAR 0 1
58006: PUSH
58007: LD_INT 3
58009: PLUS
58010: PUSH
58011: LD_VAR 0 2
58015: PUSH
58016: LD_INT 4
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: LIST
58023: PUSH
58024: LD_VAR 0 1
58028: PUSH
58029: LD_INT 4
58031: PLUS
58032: PUSH
58033: LD_VAR 0 2
58037: PUSH
58038: LD_INT 4
58040: PLUS
58041: PUSH
58042: LD_INT 5
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: LIST
58049: PUSH
58050: LD_VAR 0 1
58054: PUSH
58055: LD_INT 4
58057: MINUS
58058: PUSH
58059: LD_VAR 0 2
58063: PUSH
58064: LD_INT 1
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: LIST
58071: PUSH
58072: LD_VAR 0 1
58076: PUSH
58077: LD_VAR 0 2
58081: PUSH
58082: LD_INT 4
58084: MINUS
58085: PUSH
58086: LD_INT 3
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: LIST
58093: PUSH
58094: LD_VAR 0 1
58098: PUSH
58099: LD_INT 3
58101: MINUS
58102: PUSH
58103: LD_VAR 0 2
58107: PUSH
58108: LD_INT 3
58110: MINUS
58111: PUSH
58112: LD_INT 2
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: LIST
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: ST_TO_ADDR
// end ; 4 :
58127: GO 58408
58129: LD_INT 4
58131: DOUBLE
58132: EQUAL
58133: IFTRUE 58137
58135: GO 58270
58137: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58138: LD_ADDR_VAR 0 5
58142: PUSH
58143: LD_VAR 0 1
58147: PUSH
58148: LD_VAR 0 2
58152: PUSH
58153: LD_INT 4
58155: PLUS
58156: PUSH
58157: LD_INT 0
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: LIST
58164: PUSH
58165: LD_VAR 0 1
58169: PUSH
58170: LD_INT 3
58172: PLUS
58173: PUSH
58174: LD_VAR 0 2
58178: PUSH
58179: LD_INT 3
58181: PLUS
58182: PUSH
58183: LD_INT 5
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: LIST
58190: PUSH
58191: LD_VAR 0 1
58195: PUSH
58196: LD_INT 4
58198: PLUS
58199: PUSH
58200: LD_VAR 0 2
58204: PUSH
58205: LD_INT 4
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: LIST
58212: PUSH
58213: LD_VAR 0 1
58217: PUSH
58218: LD_VAR 0 2
58222: PUSH
58223: LD_INT 3
58225: MINUS
58226: PUSH
58227: LD_INT 3
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: LIST
58234: PUSH
58235: LD_VAR 0 1
58239: PUSH
58240: LD_INT 4
58242: MINUS
58243: PUSH
58244: LD_VAR 0 2
58248: PUSH
58249: LD_INT 4
58251: MINUS
58252: PUSH
58253: LD_INT 2
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: LIST
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: ST_TO_ADDR
// end ; 5 :
58268: GO 58408
58270: LD_INT 5
58272: DOUBLE
58273: EQUAL
58274: IFTRUE 58278
58276: GO 58407
58278: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58279: LD_ADDR_VAR 0 5
58283: PUSH
58284: LD_VAR 0 1
58288: PUSH
58289: LD_INT 4
58291: MINUS
58292: PUSH
58293: LD_VAR 0 2
58297: PUSH
58298: LD_INT 1
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: LIST
58305: PUSH
58306: LD_VAR 0 1
58310: PUSH
58311: LD_VAR 0 2
58315: PUSH
58316: LD_INT 4
58318: MINUS
58319: PUSH
58320: LD_INT 3
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: LIST
58327: PUSH
58328: LD_VAR 0 1
58332: PUSH
58333: LD_INT 4
58335: PLUS
58336: PUSH
58337: LD_VAR 0 2
58341: PUSH
58342: LD_INT 4
58344: PLUS
58345: PUSH
58346: LD_INT 5
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: LIST
58353: PUSH
58354: LD_VAR 0 1
58358: PUSH
58359: LD_INT 3
58361: PLUS
58362: PUSH
58363: LD_VAR 0 2
58367: PUSH
58368: LD_INT 4
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: LIST
58375: PUSH
58376: LD_VAR 0 1
58380: PUSH
58381: LD_VAR 0 2
58385: PUSH
58386: LD_INT 3
58388: PLUS
58389: PUSH
58390: LD_INT 0
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: LIST
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: ST_TO_ADDR
// end ; end ;
58405: GO 58408
58407: POP
// result := list ;
58408: LD_ADDR_VAR 0 4
58412: PUSH
58413: LD_VAR 0 5
58417: ST_TO_ADDR
// end ;
58418: LD_VAR 0 4
58422: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58423: LD_INT 0
58425: PPUSH
58426: PPUSH
58427: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58428: LD_VAR 0 1
58432: NOT
58433: PUSH
58434: LD_VAR 0 2
58438: PUSH
58439: LD_INT 1
58441: PUSH
58442: LD_INT 2
58444: PUSH
58445: LD_INT 3
58447: PUSH
58448: LD_INT 4
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: IN
58457: NOT
58458: OR
58459: IFFALSE 58463
// exit ;
58461: GO 58555
// tmp := [ ] ;
58463: LD_ADDR_VAR 0 5
58467: PUSH
58468: EMPTY
58469: ST_TO_ADDR
// for i in units do
58470: LD_ADDR_VAR 0 4
58474: PUSH
58475: LD_VAR 0 1
58479: PUSH
58480: FOR_IN
58481: IFFALSE 58524
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
58483: LD_ADDR_VAR 0 5
58487: PUSH
58488: LD_VAR 0 5
58492: PPUSH
58493: LD_VAR 0 5
58497: PUSH
58498: LD_INT 1
58500: PLUS
58501: PPUSH
58502: LD_VAR 0 4
58506: PPUSH
58507: LD_VAR 0 2
58511: PPUSH
58512: CALL_OW 259
58516: PPUSH
58517: CALL_OW 2
58521: ST_TO_ADDR
58522: GO 58480
58524: POP
58525: POP
// if not tmp then
58526: LD_VAR 0 5
58530: NOT
58531: IFFALSE 58535
// exit ;
58533: GO 58555
// result := SortListByListDesc ( units , tmp ) ;
58535: LD_ADDR_VAR 0 3
58539: PUSH
58540: LD_VAR 0 1
58544: PPUSH
58545: LD_VAR 0 5
58549: PPUSH
58550: CALL_OW 77
58554: ST_TO_ADDR
// end ;
58555: LD_VAR 0 3
58559: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58560: LD_INT 0
58562: PPUSH
58563: PPUSH
58564: PPUSH
// result := false ;
58565: LD_ADDR_VAR 0 3
58569: PUSH
58570: LD_INT 0
58572: ST_TO_ADDR
// x := GetX ( building ) ;
58573: LD_ADDR_VAR 0 4
58577: PUSH
58578: LD_VAR 0 2
58582: PPUSH
58583: CALL_OW 250
58587: ST_TO_ADDR
// y := GetY ( building ) ;
58588: LD_ADDR_VAR 0 5
58592: PUSH
58593: LD_VAR 0 2
58597: PPUSH
58598: CALL_OW 251
58602: ST_TO_ADDR
// if not building or not x or not y then
58603: LD_VAR 0 2
58607: NOT
58608: PUSH
58609: LD_VAR 0 4
58613: NOT
58614: OR
58615: PUSH
58616: LD_VAR 0 5
58620: NOT
58621: OR
58622: IFFALSE 58626
// exit ;
58624: GO 58718
// if GetTaskList ( unit ) then
58626: LD_VAR 0 1
58630: PPUSH
58631: CALL_OW 437
58635: IFFALSE 58718
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58637: LD_STRING e
58639: PUSH
58640: LD_VAR 0 1
58644: PPUSH
58645: CALL_OW 437
58649: PUSH
58650: LD_INT 1
58652: ARRAY
58653: PUSH
58654: LD_INT 1
58656: ARRAY
58657: EQUAL
58658: PUSH
58659: LD_VAR 0 4
58663: PUSH
58664: LD_VAR 0 1
58668: PPUSH
58669: CALL_OW 437
58673: PUSH
58674: LD_INT 1
58676: ARRAY
58677: PUSH
58678: LD_INT 2
58680: ARRAY
58681: EQUAL
58682: AND
58683: PUSH
58684: LD_VAR 0 5
58688: PUSH
58689: LD_VAR 0 1
58693: PPUSH
58694: CALL_OW 437
58698: PUSH
58699: LD_INT 1
58701: ARRAY
58702: PUSH
58703: LD_INT 3
58705: ARRAY
58706: EQUAL
58707: AND
58708: IFFALSE 58718
// result := true end ;
58710: LD_ADDR_VAR 0 3
58714: PUSH
58715: LD_INT 1
58717: ST_TO_ADDR
// end ;
58718: LD_VAR 0 3
58722: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
58723: LD_INT 0
58725: PPUSH
// result := false ;
58726: LD_ADDR_VAR 0 4
58730: PUSH
58731: LD_INT 0
58733: ST_TO_ADDR
// if GetTaskList ( unit ) then
58734: LD_VAR 0 1
58738: PPUSH
58739: CALL_OW 437
58743: IFFALSE 58826
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58745: LD_STRING M
58747: PUSH
58748: LD_VAR 0 1
58752: PPUSH
58753: CALL_OW 437
58757: PUSH
58758: LD_INT 1
58760: ARRAY
58761: PUSH
58762: LD_INT 1
58764: ARRAY
58765: EQUAL
58766: PUSH
58767: LD_VAR 0 2
58771: PUSH
58772: LD_VAR 0 1
58776: PPUSH
58777: CALL_OW 437
58781: PUSH
58782: LD_INT 1
58784: ARRAY
58785: PUSH
58786: LD_INT 2
58788: ARRAY
58789: EQUAL
58790: AND
58791: PUSH
58792: LD_VAR 0 3
58796: PUSH
58797: LD_VAR 0 1
58801: PPUSH
58802: CALL_OW 437
58806: PUSH
58807: LD_INT 1
58809: ARRAY
58810: PUSH
58811: LD_INT 3
58813: ARRAY
58814: EQUAL
58815: AND
58816: IFFALSE 58826
// result := true ;
58818: LD_ADDR_VAR 0 4
58822: PUSH
58823: LD_INT 1
58825: ST_TO_ADDR
// end ; end ;
58826: LD_VAR 0 4
58830: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58831: LD_INT 0
58833: PPUSH
58834: PPUSH
58835: PPUSH
58836: PPUSH
// if not unit or not area then
58837: LD_VAR 0 1
58841: NOT
58842: PUSH
58843: LD_VAR 0 2
58847: NOT
58848: OR
58849: IFFALSE 58853
// exit ;
58851: GO 59017
// tmp := AreaToList ( area , i ) ;
58853: LD_ADDR_VAR 0 6
58857: PUSH
58858: LD_VAR 0 2
58862: PPUSH
58863: LD_VAR 0 5
58867: PPUSH
58868: CALL_OW 517
58872: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58873: LD_ADDR_VAR 0 5
58877: PUSH
58878: DOUBLE
58879: LD_INT 1
58881: DEC
58882: ST_TO_ADDR
58883: LD_VAR 0 6
58887: PUSH
58888: LD_INT 1
58890: ARRAY
58891: PUSH
58892: FOR_TO
58893: IFFALSE 59015
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58895: LD_ADDR_VAR 0 7
58899: PUSH
58900: LD_VAR 0 6
58904: PUSH
58905: LD_INT 1
58907: ARRAY
58908: PUSH
58909: LD_VAR 0 5
58913: ARRAY
58914: PUSH
58915: LD_VAR 0 6
58919: PUSH
58920: LD_INT 2
58922: ARRAY
58923: PUSH
58924: LD_VAR 0 5
58928: ARRAY
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58934: LD_VAR 0 7
58938: PUSH
58939: LD_INT 1
58941: ARRAY
58942: PPUSH
58943: LD_VAR 0 7
58947: PUSH
58948: LD_INT 2
58950: ARRAY
58951: PPUSH
58952: CALL_OW 428
58956: PUSH
58957: LD_INT 0
58959: EQUAL
58960: IFFALSE 59013
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58962: LD_VAR 0 1
58966: PPUSH
58967: LD_VAR 0 7
58971: PUSH
58972: LD_INT 1
58974: ARRAY
58975: PPUSH
58976: LD_VAR 0 7
58980: PUSH
58981: LD_INT 2
58983: ARRAY
58984: PPUSH
58985: LD_VAR 0 3
58989: PPUSH
58990: CALL_OW 48
// result := IsPlaced ( unit ) ;
58994: LD_ADDR_VAR 0 4
58998: PUSH
58999: LD_VAR 0 1
59003: PPUSH
59004: CALL_OW 305
59008: ST_TO_ADDR
// exit ;
59009: POP
59010: POP
59011: GO 59017
// end ; end ;
59013: GO 58892
59015: POP
59016: POP
// end ;
59017: LD_VAR 0 4
59021: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59022: LD_INT 0
59024: PPUSH
59025: PPUSH
59026: PPUSH
// if not side or side > 8 then
59027: LD_VAR 0 1
59031: NOT
59032: PUSH
59033: LD_VAR 0 1
59037: PUSH
59038: LD_INT 8
59040: GREATER
59041: OR
59042: IFFALSE 59046
// exit ;
59044: GO 59233
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59046: LD_ADDR_VAR 0 4
59050: PUSH
59051: LD_INT 22
59053: PUSH
59054: LD_VAR 0 1
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 21
59065: PUSH
59066: LD_INT 3
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PPUSH
59077: CALL_OW 69
59081: ST_TO_ADDR
// if not tmp then
59082: LD_VAR 0 4
59086: NOT
59087: IFFALSE 59091
// exit ;
59089: GO 59233
// enable_addtolog := true ;
59091: LD_ADDR_OWVAR 81
59095: PUSH
59096: LD_INT 1
59098: ST_TO_ADDR
// AddToLog ( [ ) ;
59099: LD_STRING [
59101: PPUSH
59102: CALL_OW 561
// for i in tmp do
59106: LD_ADDR_VAR 0 3
59110: PUSH
59111: LD_VAR 0 4
59115: PUSH
59116: FOR_IN
59117: IFFALSE 59224
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59119: LD_STRING [
59121: PUSH
59122: LD_VAR 0 3
59126: PPUSH
59127: CALL_OW 266
59131: STR
59132: PUSH
59133: LD_STRING , 
59135: STR
59136: PUSH
59137: LD_VAR 0 3
59141: PPUSH
59142: CALL_OW 250
59146: STR
59147: PUSH
59148: LD_STRING , 
59150: STR
59151: PUSH
59152: LD_VAR 0 3
59156: PPUSH
59157: CALL_OW 251
59161: STR
59162: PUSH
59163: LD_STRING , 
59165: STR
59166: PUSH
59167: LD_VAR 0 3
59171: PPUSH
59172: CALL_OW 254
59176: STR
59177: PUSH
59178: LD_STRING , 
59180: STR
59181: PUSH
59182: LD_VAR 0 3
59186: PPUSH
59187: LD_INT 1
59189: PPUSH
59190: CALL_OW 268
59194: STR
59195: PUSH
59196: LD_STRING , 
59198: STR
59199: PUSH
59200: LD_VAR 0 3
59204: PPUSH
59205: LD_INT 2
59207: PPUSH
59208: CALL_OW 268
59212: STR
59213: PUSH
59214: LD_STRING ],
59216: STR
59217: PPUSH
59218: CALL_OW 561
// end ;
59222: GO 59116
59224: POP
59225: POP
// AddToLog ( ]; ) ;
59226: LD_STRING ];
59228: PPUSH
59229: CALL_OW 561
// end ;
59233: LD_VAR 0 2
59237: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59238: LD_INT 0
59240: PPUSH
59241: PPUSH
59242: PPUSH
59243: PPUSH
59244: PPUSH
// if not area or not rate or not max then
59245: LD_VAR 0 1
59249: NOT
59250: PUSH
59251: LD_VAR 0 2
59255: NOT
59256: OR
59257: PUSH
59258: LD_VAR 0 4
59262: NOT
59263: OR
59264: IFFALSE 59268
// exit ;
59266: GO 59460
// while 1 do
59268: LD_INT 1
59270: IFFALSE 59460
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59272: LD_ADDR_VAR 0 9
59276: PUSH
59277: LD_VAR 0 1
59281: PPUSH
59282: LD_INT 1
59284: PPUSH
59285: CALL_OW 287
59289: PUSH
59290: LD_INT 10
59292: MUL
59293: ST_TO_ADDR
// r := rate / 10 ;
59294: LD_ADDR_VAR 0 7
59298: PUSH
59299: LD_VAR 0 2
59303: PUSH
59304: LD_INT 10
59306: DIVREAL
59307: ST_TO_ADDR
// time := 1 1$00 ;
59308: LD_ADDR_VAR 0 8
59312: PUSH
59313: LD_INT 2100
59315: ST_TO_ADDR
// if amount < min then
59316: LD_VAR 0 9
59320: PUSH
59321: LD_VAR 0 3
59325: LESS
59326: IFFALSE 59344
// r := r * 2 else
59328: LD_ADDR_VAR 0 7
59332: PUSH
59333: LD_VAR 0 7
59337: PUSH
59338: LD_INT 2
59340: MUL
59341: ST_TO_ADDR
59342: GO 59370
// if amount > max then
59344: LD_VAR 0 9
59348: PUSH
59349: LD_VAR 0 4
59353: GREATER
59354: IFFALSE 59370
// r := r / 2 ;
59356: LD_ADDR_VAR 0 7
59360: PUSH
59361: LD_VAR 0 7
59365: PUSH
59366: LD_INT 2
59368: DIVREAL
59369: ST_TO_ADDR
// time := time / r ;
59370: LD_ADDR_VAR 0 8
59374: PUSH
59375: LD_VAR 0 8
59379: PUSH
59380: LD_VAR 0 7
59384: DIVREAL
59385: ST_TO_ADDR
// if time < 0 then
59386: LD_VAR 0 8
59390: PUSH
59391: LD_INT 0
59393: LESS
59394: IFFALSE 59411
// time := time * - 1 ;
59396: LD_ADDR_VAR 0 8
59400: PUSH
59401: LD_VAR 0 8
59405: PUSH
59406: LD_INT 1
59408: NEG
59409: MUL
59410: ST_TO_ADDR
// wait ( time ) ;
59411: LD_VAR 0 8
59415: PPUSH
59416: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
59420: LD_INT 35
59422: PPUSH
59423: LD_INT 875
59425: PPUSH
59426: CALL_OW 12
59430: PPUSH
59431: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59435: LD_INT 1
59437: PPUSH
59438: LD_INT 5
59440: PPUSH
59441: CALL_OW 12
59445: PPUSH
59446: LD_VAR 0 1
59450: PPUSH
59451: LD_INT 1
59453: PPUSH
59454: CALL_OW 55
// end ;
59458: GO 59268
// end ;
59460: LD_VAR 0 5
59464: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59465: LD_INT 0
59467: PPUSH
59468: PPUSH
59469: PPUSH
59470: PPUSH
59471: PPUSH
59472: PPUSH
59473: PPUSH
59474: PPUSH
// if not turrets or not factories then
59475: LD_VAR 0 1
59479: NOT
59480: PUSH
59481: LD_VAR 0 2
59485: NOT
59486: OR
59487: IFFALSE 59491
// exit ;
59489: GO 59798
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59491: LD_ADDR_VAR 0 10
59495: PUSH
59496: LD_INT 5
59498: PUSH
59499: LD_INT 6
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 2
59508: PUSH
59509: LD_INT 4
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 3
59518: PUSH
59519: LD_INT 5
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 24
59533: PUSH
59534: LD_INT 25
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 23
59543: PUSH
59544: LD_INT 27
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 42
59557: PUSH
59558: LD_INT 43
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 44
59567: PUSH
59568: LD_INT 46
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 45
59577: PUSH
59578: LD_INT 47
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: LIST
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: LIST
59594: ST_TO_ADDR
// result := [ ] ;
59595: LD_ADDR_VAR 0 3
59599: PUSH
59600: EMPTY
59601: ST_TO_ADDR
// for i in turrets do
59602: LD_ADDR_VAR 0 4
59606: PUSH
59607: LD_VAR 0 1
59611: PUSH
59612: FOR_IN
59613: IFFALSE 59796
// begin nat := GetNation ( i ) ;
59615: LD_ADDR_VAR 0 7
59619: PUSH
59620: LD_VAR 0 4
59624: PPUSH
59625: CALL_OW 248
59629: ST_TO_ADDR
// weapon := 0 ;
59630: LD_ADDR_VAR 0 8
59634: PUSH
59635: LD_INT 0
59637: ST_TO_ADDR
// if not nat then
59638: LD_VAR 0 7
59642: NOT
59643: IFFALSE 59647
// continue ;
59645: GO 59612
// for j in list [ nat ] do
59647: LD_ADDR_VAR 0 5
59651: PUSH
59652: LD_VAR 0 10
59656: PUSH
59657: LD_VAR 0 7
59661: ARRAY
59662: PUSH
59663: FOR_IN
59664: IFFALSE 59705
// if GetBWeapon ( i ) = j [ 1 ] then
59666: LD_VAR 0 4
59670: PPUSH
59671: CALL_OW 269
59675: PUSH
59676: LD_VAR 0 5
59680: PUSH
59681: LD_INT 1
59683: ARRAY
59684: EQUAL
59685: IFFALSE 59703
// begin weapon := j [ 2 ] ;
59687: LD_ADDR_VAR 0 8
59691: PUSH
59692: LD_VAR 0 5
59696: PUSH
59697: LD_INT 2
59699: ARRAY
59700: ST_TO_ADDR
// break ;
59701: GO 59705
// end ;
59703: GO 59663
59705: POP
59706: POP
// if not weapon then
59707: LD_VAR 0 8
59711: NOT
59712: IFFALSE 59716
// continue ;
59714: GO 59612
// for k in factories do
59716: LD_ADDR_VAR 0 6
59720: PUSH
59721: LD_VAR 0 2
59725: PUSH
59726: FOR_IN
59727: IFFALSE 59792
// begin weapons := AvailableWeaponList ( k ) ;
59729: LD_ADDR_VAR 0 9
59733: PUSH
59734: LD_VAR 0 6
59738: PPUSH
59739: CALL_OW 478
59743: ST_TO_ADDR
// if not weapons then
59744: LD_VAR 0 9
59748: NOT
59749: IFFALSE 59753
// continue ;
59751: GO 59726
// if weapon in weapons then
59753: LD_VAR 0 8
59757: PUSH
59758: LD_VAR 0 9
59762: IN
59763: IFFALSE 59790
// begin result := [ i , weapon ] ;
59765: LD_ADDR_VAR 0 3
59769: PUSH
59770: LD_VAR 0 4
59774: PUSH
59775: LD_VAR 0 8
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: ST_TO_ADDR
// exit ;
59784: POP
59785: POP
59786: POP
59787: POP
59788: GO 59798
// end ; end ;
59790: GO 59726
59792: POP
59793: POP
// end ;
59794: GO 59612
59796: POP
59797: POP
// end ;
59798: LD_VAR 0 3
59802: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59803: LD_INT 0
59805: PPUSH
// if not side or side > 8 then
59806: LD_VAR 0 3
59810: NOT
59811: PUSH
59812: LD_VAR 0 3
59816: PUSH
59817: LD_INT 8
59819: GREATER
59820: OR
59821: IFFALSE 59825
// exit ;
59823: GO 59884
// if not range then
59825: LD_VAR 0 4
59829: NOT
59830: IFFALSE 59841
// range := - 12 ;
59832: LD_ADDR_VAR 0 4
59836: PUSH
59837: LD_INT 12
59839: NEG
59840: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59841: LD_VAR 0 1
59845: PPUSH
59846: LD_VAR 0 2
59850: PPUSH
59851: LD_VAR 0 3
59855: PPUSH
59856: LD_VAR 0 4
59860: PPUSH
59861: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59865: LD_VAR 0 1
59869: PPUSH
59870: LD_VAR 0 2
59874: PPUSH
59875: LD_VAR 0 3
59879: PPUSH
59880: CALL_OW 331
// end ;
59884: LD_VAR 0 5
59888: RET
// export function Video ( mode ) ; begin
59889: LD_INT 0
59891: PPUSH
// ingame_video = mode ;
59892: LD_ADDR_OWVAR 52
59896: PUSH
59897: LD_VAR 0 1
59901: ST_TO_ADDR
// interface_hidden = mode ;
59902: LD_ADDR_OWVAR 54
59906: PUSH
59907: LD_VAR 0 1
59911: ST_TO_ADDR
// end ;
59912: LD_VAR 0 2
59916: RET
// export function Join ( array , element ) ; begin
59917: LD_INT 0
59919: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59920: LD_ADDR_VAR 0 3
59924: PUSH
59925: LD_VAR 0 1
59929: PPUSH
59930: LD_VAR 0 1
59934: PUSH
59935: LD_INT 1
59937: PLUS
59938: PPUSH
59939: LD_VAR 0 2
59943: PPUSH
59944: CALL_OW 1
59948: ST_TO_ADDR
// end ;
59949: LD_VAR 0 3
59953: RET
// export function JoinUnion ( array , element ) ; begin
59954: LD_INT 0
59956: PPUSH
// result := array union element ;
59957: LD_ADDR_VAR 0 3
59961: PUSH
59962: LD_VAR 0 1
59966: PUSH
59967: LD_VAR 0 2
59971: UNION
59972: ST_TO_ADDR
// end ;
59973: LD_VAR 0 3
59977: RET
// export function GetBehemoths ( side ) ; begin
59978: LD_INT 0
59980: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
59981: LD_ADDR_VAR 0 2
59985: PUSH
59986: LD_INT 22
59988: PUSH
59989: LD_VAR 0 1
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 31
60000: PUSH
60001: LD_INT 25
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PPUSH
60012: CALL_OW 69
60016: ST_TO_ADDR
// end ;
60017: LD_VAR 0 2
60021: RET
// export function Shuffle ( array ) ; var i , index ; begin
60022: LD_INT 0
60024: PPUSH
60025: PPUSH
60026: PPUSH
// result := [ ] ;
60027: LD_ADDR_VAR 0 2
60031: PUSH
60032: EMPTY
60033: ST_TO_ADDR
// if not array then
60034: LD_VAR 0 1
60038: NOT
60039: IFFALSE 60043
// exit ;
60041: GO 60142
// Randomize ;
60043: CALL_OW 10
// for i = array downto 1 do
60047: LD_ADDR_VAR 0 3
60051: PUSH
60052: DOUBLE
60053: LD_VAR 0 1
60057: INC
60058: ST_TO_ADDR
60059: LD_INT 1
60061: PUSH
60062: FOR_DOWNTO
60063: IFFALSE 60140
// begin index := rand ( 1 , array ) ;
60065: LD_ADDR_VAR 0 4
60069: PUSH
60070: LD_INT 1
60072: PPUSH
60073: LD_VAR 0 1
60077: PPUSH
60078: CALL_OW 12
60082: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60083: LD_ADDR_VAR 0 2
60087: PUSH
60088: LD_VAR 0 2
60092: PPUSH
60093: LD_VAR 0 2
60097: PUSH
60098: LD_INT 1
60100: PLUS
60101: PPUSH
60102: LD_VAR 0 1
60106: PUSH
60107: LD_VAR 0 4
60111: ARRAY
60112: PPUSH
60113: CALL_OW 2
60117: ST_TO_ADDR
// array := Delete ( array , index ) ;
60118: LD_ADDR_VAR 0 1
60122: PUSH
60123: LD_VAR 0 1
60127: PPUSH
60128: LD_VAR 0 4
60132: PPUSH
60133: CALL_OW 3
60137: ST_TO_ADDR
// end ;
60138: GO 60062
60140: POP
60141: POP
// end ;
60142: LD_VAR 0 2
60146: RET
// export function GetBaseMaterials ( base ) ; begin
60147: LD_INT 0
60149: PPUSH
// result := [ 0 , 0 , 0 ] ;
60150: LD_ADDR_VAR 0 2
60154: PUSH
60155: LD_INT 0
60157: PUSH
60158: LD_INT 0
60160: PUSH
60161: LD_INT 0
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: LIST
60168: ST_TO_ADDR
// if not base then
60169: LD_VAR 0 1
60173: NOT
60174: IFFALSE 60178
// exit ;
60176: GO 60227
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60178: LD_ADDR_VAR 0 2
60182: PUSH
60183: LD_VAR 0 1
60187: PPUSH
60188: LD_INT 1
60190: PPUSH
60191: CALL_OW 275
60195: PUSH
60196: LD_VAR 0 1
60200: PPUSH
60201: LD_INT 2
60203: PPUSH
60204: CALL_OW 275
60208: PUSH
60209: LD_VAR 0 1
60213: PPUSH
60214: LD_INT 3
60216: PPUSH
60217: CALL_OW 275
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: LIST
60226: ST_TO_ADDR
// end ;
60227: LD_VAR 0 2
60231: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60232: LD_INT 0
60234: PPUSH
60235: PPUSH
// result := array ;
60236: LD_ADDR_VAR 0 3
60240: PUSH
60241: LD_VAR 0 1
60245: ST_TO_ADDR
// if size > 0 then
60246: LD_VAR 0 2
60250: PUSH
60251: LD_INT 0
60253: GREATER
60254: IFFALSE 60300
// for i := array downto size do
60256: LD_ADDR_VAR 0 4
60260: PUSH
60261: DOUBLE
60262: LD_VAR 0 1
60266: INC
60267: ST_TO_ADDR
60268: LD_VAR 0 2
60272: PUSH
60273: FOR_DOWNTO
60274: IFFALSE 60298
// result := Delete ( result , result ) ;
60276: LD_ADDR_VAR 0 3
60280: PUSH
60281: LD_VAR 0 3
60285: PPUSH
60286: LD_VAR 0 3
60290: PPUSH
60291: CALL_OW 3
60295: ST_TO_ADDR
60296: GO 60273
60298: POP
60299: POP
// end ;
60300: LD_VAR 0 3
60304: RET
// export function ComExit ( unit ) ; var tmp ; begin
60305: LD_INT 0
60307: PPUSH
60308: PPUSH
// if not IsInUnit ( unit ) then
60309: LD_VAR 0 1
60313: PPUSH
60314: CALL_OW 310
60318: NOT
60319: IFFALSE 60323
// exit ;
60321: GO 60383
// tmp := IsInUnit ( unit ) ;
60323: LD_ADDR_VAR 0 3
60327: PUSH
60328: LD_VAR 0 1
60332: PPUSH
60333: CALL_OW 310
60337: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60338: LD_VAR 0 3
60342: PPUSH
60343: CALL_OW 247
60347: PUSH
60348: LD_INT 2
60350: EQUAL
60351: IFFALSE 60364
// ComExitVehicle ( unit ) else
60353: LD_VAR 0 1
60357: PPUSH
60358: CALL_OW 121
60362: GO 60373
// ComExitBuilding ( unit ) ;
60364: LD_VAR 0 1
60368: PPUSH
60369: CALL_OW 122
// result := tmp ;
60373: LD_ADDR_VAR 0 2
60377: PUSH
60378: LD_VAR 0 3
60382: ST_TO_ADDR
// end ;
60383: LD_VAR 0 2
60387: RET
// export function ComExitAll ( units ) ; var i ; begin
60388: LD_INT 0
60390: PPUSH
60391: PPUSH
// if not units then
60392: LD_VAR 0 1
60396: NOT
60397: IFFALSE 60401
// exit ;
60399: GO 60427
// for i in units do
60401: LD_ADDR_VAR 0 3
60405: PUSH
60406: LD_VAR 0 1
60410: PUSH
60411: FOR_IN
60412: IFFALSE 60425
// ComExit ( i ) ;
60414: LD_VAR 0 3
60418: PPUSH
60419: CALL 60305 0 1
60423: GO 60411
60425: POP
60426: POP
// end ;
60427: LD_VAR 0 2
60431: RET
// export function ResetHc ; begin
60432: LD_INT 0
60434: PPUSH
// InitHc ;
60435: CALL_OW 19
// hc_importance := 0 ;
60439: LD_ADDR_OWVAR 32
60443: PUSH
60444: LD_INT 0
60446: ST_TO_ADDR
// end ;
60447: LD_VAR 0 1
60451: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
60452: LD_INT 0
60454: PPUSH
60455: PPUSH
60456: PPUSH
// _x := ( x1 + x2 ) div 2 ;
60457: LD_ADDR_VAR 0 6
60461: PUSH
60462: LD_VAR 0 1
60466: PUSH
60467: LD_VAR 0 3
60471: PLUS
60472: PUSH
60473: LD_INT 2
60475: DIV
60476: ST_TO_ADDR
// if _x < 0 then
60477: LD_VAR 0 6
60481: PUSH
60482: LD_INT 0
60484: LESS
60485: IFFALSE 60502
// _x := _x * - 1 ;
60487: LD_ADDR_VAR 0 6
60491: PUSH
60492: LD_VAR 0 6
60496: PUSH
60497: LD_INT 1
60499: NEG
60500: MUL
60501: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
60502: LD_ADDR_VAR 0 7
60506: PUSH
60507: LD_VAR 0 2
60511: PUSH
60512: LD_VAR 0 4
60516: PLUS
60517: PUSH
60518: LD_INT 2
60520: DIV
60521: ST_TO_ADDR
// if _y < 0 then
60522: LD_VAR 0 7
60526: PUSH
60527: LD_INT 0
60529: LESS
60530: IFFALSE 60547
// _y := _y * - 1 ;
60532: LD_ADDR_VAR 0 7
60536: PUSH
60537: LD_VAR 0 7
60541: PUSH
60542: LD_INT 1
60544: NEG
60545: MUL
60546: ST_TO_ADDR
// result := [ _x , _y ] ;
60547: LD_ADDR_VAR 0 5
60551: PUSH
60552: LD_VAR 0 6
60556: PUSH
60557: LD_VAR 0 7
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: ST_TO_ADDR
// end ;
60566: LD_VAR 0 5
60570: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
60571: LD_INT 0
60573: PPUSH
60574: PPUSH
60575: PPUSH
60576: PPUSH
// task := GetTaskList ( unit ) ;
60577: LD_ADDR_VAR 0 7
60581: PUSH
60582: LD_VAR 0 1
60586: PPUSH
60587: CALL_OW 437
60591: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
60592: LD_VAR 0 7
60596: NOT
60597: PUSH
60598: LD_VAR 0 1
60602: PPUSH
60603: LD_VAR 0 2
60607: PPUSH
60608: CALL_OW 308
60612: NOT
60613: AND
60614: IFFALSE 60618
// exit ;
60616: GO 60736
// if IsInArea ( unit , area ) then
60618: LD_VAR 0 1
60622: PPUSH
60623: LD_VAR 0 2
60627: PPUSH
60628: CALL_OW 308
60632: IFFALSE 60650
// begin ComMoveToArea ( unit , goAway ) ;
60634: LD_VAR 0 1
60638: PPUSH
60639: LD_VAR 0 3
60643: PPUSH
60644: CALL_OW 113
// exit ;
60648: GO 60736
// end ; if task [ 1 ] [ 1 ] <> M then
60650: LD_VAR 0 7
60654: PUSH
60655: LD_INT 1
60657: ARRAY
60658: PUSH
60659: LD_INT 1
60661: ARRAY
60662: PUSH
60663: LD_STRING M
60665: NONEQUAL
60666: IFFALSE 60670
// exit ;
60668: GO 60736
// x := task [ 1 ] [ 2 ] ;
60670: LD_ADDR_VAR 0 5
60674: PUSH
60675: LD_VAR 0 7
60679: PUSH
60680: LD_INT 1
60682: ARRAY
60683: PUSH
60684: LD_INT 2
60686: ARRAY
60687: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
60688: LD_ADDR_VAR 0 6
60692: PUSH
60693: LD_VAR 0 7
60697: PUSH
60698: LD_INT 1
60700: ARRAY
60701: PUSH
60702: LD_INT 3
60704: ARRAY
60705: ST_TO_ADDR
// if InArea ( x , y , area ) then
60706: LD_VAR 0 5
60710: PPUSH
60711: LD_VAR 0 6
60715: PPUSH
60716: LD_VAR 0 2
60720: PPUSH
60721: CALL_OW 309
60725: IFFALSE 60736
// ComStop ( unit ) ;
60727: LD_VAR 0 1
60731: PPUSH
60732: CALL_OW 141
// end ;
60736: LD_VAR 0 4
60740: RET
// export function Abs ( value ) ; begin
60741: LD_INT 0
60743: PPUSH
// result := value ;
60744: LD_ADDR_VAR 0 2
60748: PUSH
60749: LD_VAR 0 1
60753: ST_TO_ADDR
// if value < 0 then
60754: LD_VAR 0 1
60758: PUSH
60759: LD_INT 0
60761: LESS
60762: IFFALSE 60779
// result := value * - 1 ;
60764: LD_ADDR_VAR 0 2
60768: PUSH
60769: LD_VAR 0 1
60773: PUSH
60774: LD_INT 1
60776: NEG
60777: MUL
60778: ST_TO_ADDR
// end ;
60779: LD_VAR 0 2
60783: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60784: LD_INT 0
60786: PPUSH
60787: PPUSH
60788: PPUSH
60789: PPUSH
60790: PPUSH
60791: PPUSH
60792: PPUSH
60793: PPUSH
// if not unit or not building then
60794: LD_VAR 0 1
60798: NOT
60799: PUSH
60800: LD_VAR 0 2
60804: NOT
60805: OR
60806: IFFALSE 60810
// exit ;
60808: GO 61036
// x := GetX ( building ) ;
60810: LD_ADDR_VAR 0 4
60814: PUSH
60815: LD_VAR 0 2
60819: PPUSH
60820: CALL_OW 250
60824: ST_TO_ADDR
// y := GetY ( building ) ;
60825: LD_ADDR_VAR 0 6
60829: PUSH
60830: LD_VAR 0 2
60834: PPUSH
60835: CALL_OW 251
60839: ST_TO_ADDR
// d := GetDir ( building ) ;
60840: LD_ADDR_VAR 0 8
60844: PUSH
60845: LD_VAR 0 2
60849: PPUSH
60850: CALL_OW 254
60854: ST_TO_ADDR
// r := 4 ;
60855: LD_ADDR_VAR 0 9
60859: PUSH
60860: LD_INT 4
60862: ST_TO_ADDR
// for i := 1 to 5 do
60863: LD_ADDR_VAR 0 10
60867: PUSH
60868: DOUBLE
60869: LD_INT 1
60871: DEC
60872: ST_TO_ADDR
60873: LD_INT 5
60875: PUSH
60876: FOR_TO
60877: IFFALSE 61034
// begin _x := ShiftX ( x , d , r + i ) ;
60879: LD_ADDR_VAR 0 5
60883: PUSH
60884: LD_VAR 0 4
60888: PPUSH
60889: LD_VAR 0 8
60893: PPUSH
60894: LD_VAR 0 9
60898: PUSH
60899: LD_VAR 0 10
60903: PLUS
60904: PPUSH
60905: CALL_OW 272
60909: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60910: LD_ADDR_VAR 0 7
60914: PUSH
60915: LD_VAR 0 6
60919: PPUSH
60920: LD_VAR 0 8
60924: PPUSH
60925: LD_VAR 0 9
60929: PUSH
60930: LD_VAR 0 10
60934: PLUS
60935: PPUSH
60936: CALL_OW 273
60940: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60941: LD_VAR 0 5
60945: PPUSH
60946: LD_VAR 0 7
60950: PPUSH
60951: CALL_OW 488
60955: PUSH
60956: LD_VAR 0 5
60960: PPUSH
60961: LD_VAR 0 7
60965: PPUSH
60966: CALL_OW 428
60970: PPUSH
60971: CALL_OW 247
60975: PUSH
60976: LD_INT 3
60978: PUSH
60979: LD_INT 2
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: IN
60986: NOT
60987: AND
60988: IFFALSE 61032
// begin ComMoveXY ( unit , _x , _y ) ;
60990: LD_VAR 0 1
60994: PPUSH
60995: LD_VAR 0 5
60999: PPUSH
61000: LD_VAR 0 7
61004: PPUSH
61005: CALL_OW 111
// result := [ _x , _y ] ;
61009: LD_ADDR_VAR 0 3
61013: PUSH
61014: LD_VAR 0 5
61018: PUSH
61019: LD_VAR 0 7
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: ST_TO_ADDR
// exit ;
61028: POP
61029: POP
61030: GO 61036
// end ; end ;
61032: GO 60876
61034: POP
61035: POP
// end ;
61036: LD_VAR 0 3
61040: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
61041: LD_INT 0
61043: PPUSH
61044: PPUSH
61045: PPUSH
// result := 0 ;
61046: LD_ADDR_VAR 0 3
61050: PUSH
61051: LD_INT 0
61053: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61054: LD_VAR 0 1
61058: PUSH
61059: LD_INT 0
61061: LESS
61062: PUSH
61063: LD_VAR 0 1
61067: PUSH
61068: LD_INT 8
61070: GREATER
61071: OR
61072: PUSH
61073: LD_VAR 0 2
61077: PUSH
61078: LD_INT 0
61080: LESS
61081: OR
61082: PUSH
61083: LD_VAR 0 2
61087: PUSH
61088: LD_INT 8
61090: GREATER
61091: OR
61092: IFFALSE 61096
// exit ;
61094: GO 61171
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
61096: LD_ADDR_VAR 0 4
61100: PUSH
61101: LD_INT 22
61103: PUSH
61104: LD_VAR 0 2
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PPUSH
61113: CALL_OW 69
61117: PUSH
61118: FOR_IN
61119: IFFALSE 61169
// begin un := UnitShoot ( i ) ;
61121: LD_ADDR_VAR 0 5
61125: PUSH
61126: LD_VAR 0 4
61130: PPUSH
61131: CALL_OW 504
61135: ST_TO_ADDR
// if GetSide ( un ) = side1 then
61136: LD_VAR 0 5
61140: PPUSH
61141: CALL_OW 255
61145: PUSH
61146: LD_VAR 0 1
61150: EQUAL
61151: IFFALSE 61167
// begin result := un ;
61153: LD_ADDR_VAR 0 3
61157: PUSH
61158: LD_VAR 0 5
61162: ST_TO_ADDR
// exit ;
61163: POP
61164: POP
61165: GO 61171
// end ; end ;
61167: GO 61118
61169: POP
61170: POP
// end ;
61171: LD_VAR 0 3
61175: RET
// export function GetCargoBay ( units ) ; begin
61176: LD_INT 0
61178: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
61179: LD_ADDR_VAR 0 2
61183: PUSH
61184: LD_VAR 0 1
61188: PPUSH
61189: LD_INT 2
61191: PUSH
61192: LD_INT 34
61194: PUSH
61195: LD_INT 12
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 34
61204: PUSH
61205: LD_INT 51
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 34
61214: PUSH
61215: LD_INT 32
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 34
61224: PUSH
61225: LD_EXP 92
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: PPUSH
61241: CALL_OW 72
61245: ST_TO_ADDR
// end ;
61246: LD_VAR 0 2
61250: RET
// export function Negate ( value ) ; begin
61251: LD_INT 0
61253: PPUSH
// result := not value ;
61254: LD_ADDR_VAR 0 2
61258: PUSH
61259: LD_VAR 0 1
61263: NOT
61264: ST_TO_ADDR
// end ;
61265: LD_VAR 0 2
61269: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
61270: LD_INT 0
61272: PPUSH
// if x1 = x2 then
61273: LD_VAR 0 1
61277: PUSH
61278: LD_VAR 0 3
61282: EQUAL
61283: IFFALSE 61317
// begin if y1 > y2 then
61285: LD_VAR 0 2
61289: PUSH
61290: LD_VAR 0 4
61294: GREATER
61295: IFFALSE 61307
// result := 0 else
61297: LD_ADDR_VAR 0 5
61301: PUSH
61302: LD_INT 0
61304: ST_TO_ADDR
61305: GO 61315
// result := 3 ;
61307: LD_ADDR_VAR 0 5
61311: PUSH
61312: LD_INT 3
61314: ST_TO_ADDR
// exit ;
61315: GO 61403
// end ; if y1 = y2 then
61317: LD_VAR 0 2
61321: PUSH
61322: LD_VAR 0 4
61326: EQUAL
61327: IFFALSE 61361
// begin if x1 > x2 then
61329: LD_VAR 0 1
61333: PUSH
61334: LD_VAR 0 3
61338: GREATER
61339: IFFALSE 61351
// result := 1 else
61341: LD_ADDR_VAR 0 5
61345: PUSH
61346: LD_INT 1
61348: ST_TO_ADDR
61349: GO 61359
// result := 4 ;
61351: LD_ADDR_VAR 0 5
61355: PUSH
61356: LD_INT 4
61358: ST_TO_ADDR
// exit ;
61359: GO 61403
// end ; if x1 > x2 and y1 > y2 then
61361: LD_VAR 0 1
61365: PUSH
61366: LD_VAR 0 3
61370: GREATER
61371: PUSH
61372: LD_VAR 0 2
61376: PUSH
61377: LD_VAR 0 4
61381: GREATER
61382: AND
61383: IFFALSE 61395
// result := 2 else
61385: LD_ADDR_VAR 0 5
61389: PUSH
61390: LD_INT 2
61392: ST_TO_ADDR
61393: GO 61403
// result := 5 ;
61395: LD_ADDR_VAR 0 5
61399: PUSH
61400: LD_INT 5
61402: ST_TO_ADDR
// end ;
61403: LD_VAR 0 5
61407: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61408: LD_INT 0
61410: PPUSH
61411: PPUSH
// if not driver or not IsInUnit ( driver ) then
61412: LD_VAR 0 1
61416: NOT
61417: PUSH
61418: LD_VAR 0 1
61422: PPUSH
61423: CALL_OW 310
61427: NOT
61428: OR
61429: IFFALSE 61433
// exit ;
61431: GO 61523
// vehicle := IsInUnit ( driver ) ;
61433: LD_ADDR_VAR 0 3
61437: PUSH
61438: LD_VAR 0 1
61442: PPUSH
61443: CALL_OW 310
61447: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61448: LD_VAR 0 1
61452: PPUSH
61453: LD_STRING \
61455: PUSH
61456: LD_INT 0
61458: PUSH
61459: LD_INT 0
61461: PUSH
61462: LD_INT 0
61464: PUSH
61465: LD_INT 0
61467: PUSH
61468: LD_INT 0
61470: PUSH
61471: LD_INT 0
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: PUSH
61483: LD_STRING E
61485: PUSH
61486: LD_INT 0
61488: PUSH
61489: LD_INT 0
61491: PUSH
61492: LD_VAR 0 3
61496: PUSH
61497: LD_INT 0
61499: PUSH
61500: LD_INT 0
61502: PUSH
61503: LD_INT 0
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PPUSH
61519: CALL_OW 446
// end ;
61523: LD_VAR 0 2
61527: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61528: LD_INT 0
61530: PPUSH
61531: PPUSH
// if not driver or not IsInUnit ( driver ) then
61532: LD_VAR 0 1
61536: NOT
61537: PUSH
61538: LD_VAR 0 1
61542: PPUSH
61543: CALL_OW 310
61547: NOT
61548: OR
61549: IFFALSE 61553
// exit ;
61551: GO 61643
// vehicle := IsInUnit ( driver ) ;
61553: LD_ADDR_VAR 0 3
61557: PUSH
61558: LD_VAR 0 1
61562: PPUSH
61563: CALL_OW 310
61567: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61568: LD_VAR 0 1
61572: PPUSH
61573: LD_STRING \
61575: PUSH
61576: LD_INT 0
61578: PUSH
61579: LD_INT 0
61581: PUSH
61582: LD_INT 0
61584: PUSH
61585: LD_INT 0
61587: PUSH
61588: LD_INT 0
61590: PUSH
61591: LD_INT 0
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: PUSH
61603: LD_STRING E
61605: PUSH
61606: LD_INT 0
61608: PUSH
61609: LD_INT 0
61611: PUSH
61612: LD_VAR 0 3
61616: PUSH
61617: LD_INT 0
61619: PUSH
61620: LD_INT 0
61622: PUSH
61623: LD_INT 0
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PPUSH
61639: CALL_OW 447
// end ;
61643: LD_VAR 0 2
61647: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
61648: LD_INT 0
61650: PPUSH
61651: PPUSH
61652: PPUSH
// tmp := [ ] ;
61653: LD_ADDR_VAR 0 5
61657: PUSH
61658: EMPTY
61659: ST_TO_ADDR
// for i in units do
61660: LD_ADDR_VAR 0 4
61664: PUSH
61665: LD_VAR 0 1
61669: PUSH
61670: FOR_IN
61671: IFFALSE 61709
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
61673: LD_ADDR_VAR 0 5
61677: PUSH
61678: LD_VAR 0 5
61682: PPUSH
61683: LD_VAR 0 5
61687: PUSH
61688: LD_INT 1
61690: PLUS
61691: PPUSH
61692: LD_VAR 0 4
61696: PPUSH
61697: CALL_OW 256
61701: PPUSH
61702: CALL_OW 2
61706: ST_TO_ADDR
61707: GO 61670
61709: POP
61710: POP
// if not tmp then
61711: LD_VAR 0 5
61715: NOT
61716: IFFALSE 61720
// exit ;
61718: GO 61768
// if asc then
61720: LD_VAR 0 2
61724: IFFALSE 61748
// result := SortListByListAsc ( units , tmp ) else
61726: LD_ADDR_VAR 0 3
61730: PUSH
61731: LD_VAR 0 1
61735: PPUSH
61736: LD_VAR 0 5
61740: PPUSH
61741: CALL_OW 76
61745: ST_TO_ADDR
61746: GO 61768
// result := SortListByListDesc ( units , tmp ) ;
61748: LD_ADDR_VAR 0 3
61752: PUSH
61753: LD_VAR 0 1
61757: PPUSH
61758: LD_VAR 0 5
61762: PPUSH
61763: CALL_OW 77
61767: ST_TO_ADDR
// end ;
61768: LD_VAR 0 3
61772: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61773: LD_INT 0
61775: PPUSH
61776: PPUSH
// task := GetTaskList ( mech ) ;
61777: LD_ADDR_VAR 0 4
61781: PUSH
61782: LD_VAR 0 1
61786: PPUSH
61787: CALL_OW 437
61791: ST_TO_ADDR
// if not task then
61792: LD_VAR 0 4
61796: NOT
61797: IFFALSE 61801
// exit ;
61799: GO 61843
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61801: LD_ADDR_VAR 0 3
61805: PUSH
61806: LD_VAR 0 4
61810: PUSH
61811: LD_INT 1
61813: ARRAY
61814: PUSH
61815: LD_INT 1
61817: ARRAY
61818: PUSH
61819: LD_STRING r
61821: EQUAL
61822: PUSH
61823: LD_VAR 0 4
61827: PUSH
61828: LD_INT 1
61830: ARRAY
61831: PUSH
61832: LD_INT 4
61834: ARRAY
61835: PUSH
61836: LD_VAR 0 2
61840: EQUAL
61841: AND
61842: ST_TO_ADDR
// end ;
61843: LD_VAR 0 3
61847: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61848: LD_INT 0
61850: PPUSH
// SetDir ( unit , d ) ;
61851: LD_VAR 0 1
61855: PPUSH
61856: LD_VAR 0 4
61860: PPUSH
61861: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
61865: LD_VAR 0 1
61869: PPUSH
61870: LD_VAR 0 2
61874: PPUSH
61875: LD_VAR 0 3
61879: PPUSH
61880: LD_VAR 0 5
61884: PPUSH
61885: CALL_OW 48
// end ;
61889: LD_VAR 0 6
61893: RET
// export function ToNaturalNumber ( number ) ; begin
61894: LD_INT 0
61896: PPUSH
// result := number div 1 ;
61897: LD_ADDR_VAR 0 2
61901: PUSH
61902: LD_VAR 0 1
61906: PUSH
61907: LD_INT 1
61909: DIV
61910: ST_TO_ADDR
// if number < 0 then
61911: LD_VAR 0 1
61915: PUSH
61916: LD_INT 0
61918: LESS
61919: IFFALSE 61929
// result := 0 ;
61921: LD_ADDR_VAR 0 2
61925: PUSH
61926: LD_INT 0
61928: ST_TO_ADDR
// end ;
61929: LD_VAR 0 2
61933: RET
// export function SortByClass ( units , class ) ; var un ; begin
61934: LD_INT 0
61936: PPUSH
61937: PPUSH
// if not units or not class then
61938: LD_VAR 0 1
61942: NOT
61943: PUSH
61944: LD_VAR 0 2
61948: NOT
61949: OR
61950: IFFALSE 61954
// exit ;
61952: GO 62049
// result := [ ] ;
61954: LD_ADDR_VAR 0 3
61958: PUSH
61959: EMPTY
61960: ST_TO_ADDR
// for un in units do
61961: LD_ADDR_VAR 0 4
61965: PUSH
61966: LD_VAR 0 1
61970: PUSH
61971: FOR_IN
61972: IFFALSE 62047
// if GetClass ( un ) = class then
61974: LD_VAR 0 4
61978: PPUSH
61979: CALL_OW 257
61983: PUSH
61984: LD_VAR 0 2
61988: EQUAL
61989: IFFALSE 62016
// result := Insert ( result , 1 , un ) else
61991: LD_ADDR_VAR 0 3
61995: PUSH
61996: LD_VAR 0 3
62000: PPUSH
62001: LD_INT 1
62003: PPUSH
62004: LD_VAR 0 4
62008: PPUSH
62009: CALL_OW 2
62013: ST_TO_ADDR
62014: GO 62045
// result := Replace ( result , result + 1 , un ) ;
62016: LD_ADDR_VAR 0 3
62020: PUSH
62021: LD_VAR 0 3
62025: PPUSH
62026: LD_VAR 0 3
62030: PUSH
62031: LD_INT 1
62033: PLUS
62034: PPUSH
62035: LD_VAR 0 4
62039: PPUSH
62040: CALL_OW 1
62044: ST_TO_ADDR
62045: GO 61971
62047: POP
62048: POP
// end ;
62049: LD_VAR 0 3
62053: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
62054: LD_INT 0
62056: PPUSH
62057: PPUSH
62058: PPUSH
62059: PPUSH
62060: PPUSH
62061: PPUSH
62062: PPUSH
// result := [ ] ;
62063: LD_ADDR_VAR 0 4
62067: PUSH
62068: EMPTY
62069: ST_TO_ADDR
// if x - r < 0 then
62070: LD_VAR 0 1
62074: PUSH
62075: LD_VAR 0 3
62079: MINUS
62080: PUSH
62081: LD_INT 0
62083: LESS
62084: IFFALSE 62096
// min_x := 0 else
62086: LD_ADDR_VAR 0 8
62090: PUSH
62091: LD_INT 0
62093: ST_TO_ADDR
62094: GO 62112
// min_x := x - r ;
62096: LD_ADDR_VAR 0 8
62100: PUSH
62101: LD_VAR 0 1
62105: PUSH
62106: LD_VAR 0 3
62110: MINUS
62111: ST_TO_ADDR
// if y - r < 0 then
62112: LD_VAR 0 2
62116: PUSH
62117: LD_VAR 0 3
62121: MINUS
62122: PUSH
62123: LD_INT 0
62125: LESS
62126: IFFALSE 62138
// min_y := 0 else
62128: LD_ADDR_VAR 0 7
62132: PUSH
62133: LD_INT 0
62135: ST_TO_ADDR
62136: GO 62154
// min_y := y - r ;
62138: LD_ADDR_VAR 0 7
62142: PUSH
62143: LD_VAR 0 2
62147: PUSH
62148: LD_VAR 0 3
62152: MINUS
62153: ST_TO_ADDR
// max_x := x + r ;
62154: LD_ADDR_VAR 0 9
62158: PUSH
62159: LD_VAR 0 1
62163: PUSH
62164: LD_VAR 0 3
62168: PLUS
62169: ST_TO_ADDR
// max_y := y + r ;
62170: LD_ADDR_VAR 0 10
62174: PUSH
62175: LD_VAR 0 2
62179: PUSH
62180: LD_VAR 0 3
62184: PLUS
62185: ST_TO_ADDR
// for _x = min_x to max_x do
62186: LD_ADDR_VAR 0 5
62190: PUSH
62191: DOUBLE
62192: LD_VAR 0 8
62196: DEC
62197: ST_TO_ADDR
62198: LD_VAR 0 9
62202: PUSH
62203: FOR_TO
62204: IFFALSE 62305
// for _y = min_y to max_y do
62206: LD_ADDR_VAR 0 6
62210: PUSH
62211: DOUBLE
62212: LD_VAR 0 7
62216: DEC
62217: ST_TO_ADDR
62218: LD_VAR 0 10
62222: PUSH
62223: FOR_TO
62224: IFFALSE 62301
// begin if not ValidHex ( _x , _y ) then
62226: LD_VAR 0 5
62230: PPUSH
62231: LD_VAR 0 6
62235: PPUSH
62236: CALL_OW 488
62240: NOT
62241: IFFALSE 62245
// continue ;
62243: GO 62223
// if GetResourceTypeXY ( _x , _y ) then
62245: LD_VAR 0 5
62249: PPUSH
62250: LD_VAR 0 6
62254: PPUSH
62255: CALL_OW 283
62259: IFFALSE 62299
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
62261: LD_ADDR_VAR 0 4
62265: PUSH
62266: LD_VAR 0 4
62270: PPUSH
62271: LD_VAR 0 4
62275: PUSH
62276: LD_INT 1
62278: PLUS
62279: PPUSH
62280: LD_VAR 0 5
62284: PUSH
62285: LD_VAR 0 6
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PPUSH
62294: CALL_OW 1
62298: ST_TO_ADDR
// end ;
62299: GO 62223
62301: POP
62302: POP
62303: GO 62203
62305: POP
62306: POP
// end ;
62307: LD_VAR 0 4
62311: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
62312: LD_INT 0
62314: PPUSH
62315: PPUSH
62316: PPUSH
62317: PPUSH
62318: PPUSH
62319: PPUSH
// if not units then
62320: LD_VAR 0 1
62324: NOT
62325: IFFALSE 62329
// exit ;
62327: GO 62730
// result := UnitFilter ( units , [ f_ok ] ) ;
62329: LD_ADDR_VAR 0 3
62333: PUSH
62334: LD_VAR 0 1
62338: PPUSH
62339: LD_INT 50
62341: PUSH
62342: EMPTY
62343: LIST
62344: PPUSH
62345: CALL_OW 72
62349: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
62350: LD_ADDR_VAR 0 7
62354: PUSH
62355: LD_VAR 0 1
62359: PUSH
62360: LD_INT 1
62362: ARRAY
62363: PPUSH
62364: CALL_OW 255
62368: ST_TO_ADDR
// if not result then
62369: LD_VAR 0 3
62373: NOT
62374: IFFALSE 62378
// exit ;
62376: GO 62730
// for i in result do
62378: LD_ADDR_VAR 0 4
62382: PUSH
62383: LD_VAR 0 3
62387: PUSH
62388: FOR_IN
62389: IFFALSE 62728
// begin tag := GetTag ( i ) + 1 ;
62391: LD_ADDR_VAR 0 8
62395: PUSH
62396: LD_VAR 0 4
62400: PPUSH
62401: CALL_OW 110
62405: PUSH
62406: LD_INT 1
62408: PLUS
62409: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
62410: LD_ADDR_VAR 0 6
62414: PUSH
62415: LD_VAR 0 4
62419: PPUSH
62420: CALL_OW 250
62424: PPUSH
62425: LD_VAR 0 4
62429: PPUSH
62430: CALL_OW 251
62434: PPUSH
62435: LD_INT 6
62437: PPUSH
62438: CALL 62054 0 3
62442: ST_TO_ADDR
// if cr then
62443: LD_VAR 0 6
62447: IFFALSE 62486
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
62449: LD_VAR 0 4
62453: PPUSH
62454: LD_VAR 0 6
62458: PUSH
62459: LD_INT 1
62461: ARRAY
62462: PUSH
62463: LD_INT 1
62465: ARRAY
62466: PPUSH
62467: LD_VAR 0 6
62471: PUSH
62472: LD_INT 1
62474: ARRAY
62475: PUSH
62476: LD_INT 2
62478: ARRAY
62479: PPUSH
62480: CALL_OW 116
62484: GO 62726
// if path > tag then
62486: LD_VAR 0 2
62490: PUSH
62491: LD_VAR 0 8
62495: GREATER
62496: IFFALSE 62674
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
62498: LD_ADDR_VAR 0 5
62502: PUSH
62503: LD_INT 81
62505: PUSH
62506: LD_VAR 0 7
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 91
62517: PUSH
62518: LD_VAR 0 4
62522: PUSH
62523: LD_INT 12
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: LIST
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PPUSH
62535: CALL_OW 69
62539: ST_TO_ADDR
// if enemy then
62540: LD_VAR 0 5
62544: IFFALSE 62572
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
62546: LD_VAR 0 4
62550: PPUSH
62551: LD_VAR 0 5
62555: PPUSH
62556: LD_VAR 0 4
62560: PPUSH
62561: CALL_OW 74
62565: PPUSH
62566: CALL_OW 115
62570: GO 62672
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
62572: LD_VAR 0 4
62576: PPUSH
62577: LD_VAR 0 2
62581: PUSH
62582: LD_VAR 0 8
62586: ARRAY
62587: PUSH
62588: LD_INT 1
62590: ARRAY
62591: PPUSH
62592: LD_VAR 0 2
62596: PUSH
62597: LD_VAR 0 8
62601: ARRAY
62602: PUSH
62603: LD_INT 2
62605: ARRAY
62606: PPUSH
62607: CALL_OW 297
62611: PUSH
62612: LD_INT 6
62614: GREATER
62615: IFFALSE 62658
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
62617: LD_VAR 0 4
62621: PPUSH
62622: LD_VAR 0 2
62626: PUSH
62627: LD_VAR 0 8
62631: ARRAY
62632: PUSH
62633: LD_INT 1
62635: ARRAY
62636: PPUSH
62637: LD_VAR 0 2
62641: PUSH
62642: LD_VAR 0 8
62646: ARRAY
62647: PUSH
62648: LD_INT 2
62650: ARRAY
62651: PPUSH
62652: CALL_OW 114
62656: GO 62672
// SetTag ( i , tag ) ;
62658: LD_VAR 0 4
62662: PPUSH
62663: LD_VAR 0 8
62667: PPUSH
62668: CALL_OW 109
// end else
62672: GO 62726
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
62674: LD_ADDR_VAR 0 5
62678: PUSH
62679: LD_INT 81
62681: PUSH
62682: LD_VAR 0 7
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PPUSH
62691: CALL_OW 69
62695: ST_TO_ADDR
// if enemy then
62696: LD_VAR 0 5
62700: IFFALSE 62726
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62702: LD_VAR 0 4
62706: PPUSH
62707: LD_VAR 0 5
62711: PPUSH
62712: LD_VAR 0 4
62716: PPUSH
62717: CALL_OW 74
62721: PPUSH
62722: CALL_OW 115
// end ; end ;
62726: GO 62388
62728: POP
62729: POP
// end ; end_of_file
62730: LD_VAR 0 3
62734: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
62735: LD_VAR 0 1
62739: PPUSH
62740: LD_VAR 0 2
62744: PPUSH
62745: LD_VAR 0 3
62749: PPUSH
62750: LD_VAR 0 4
62754: PPUSH
62755: LD_VAR 0 5
62759: PPUSH
62760: LD_VAR 0 6
62764: PPUSH
62765: CALL 5825 0 6
// end ;
62769: PPOPN 6
62771: END
